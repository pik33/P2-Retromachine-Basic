00000                 | 
00000                 | #line 1 "D:/programowanie/p2-retromachine/Propeller/Basic2/P2-Retromachine-Basic/basic020.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 20
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 44 08 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec F0 BE 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 38 BD 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 F8 A6 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 38 AC 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 18 B0 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 9C 36 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 58 B7 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 AC 4A 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 5C 72 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 14 70 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb EC 81 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc A8 4B 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     50 34 B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     28 34 B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     00 34 B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     F8 2A B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     48 2B B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     38 2B B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     9C 2A B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     16 01 00 FF 
00ab4     D6 2B 06 F6 | 	mov	local07, ##@LR__4007
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     2D 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##23520
00adc     1C 53 B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     54 52 B1 FD | 	call	#__system__LTrim_S
00ae8     2D 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##23520
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     16 01 00 FF 
00af8     D7 1F 06 F6 | 	mov	local01, ##@LR__4008
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     2D 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##23520
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     52 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##42080
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     52 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##42080
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     2D 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##23520
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     2D 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##23520
00b64     16 01 00 FF 
00b68     D8 17 06 F6 | 	mov	arg03, ##@LR__4009
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     40 53 B1 FD | 	call	#__system__Instr
00b74     52 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##42084
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     52 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##42084
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     2D 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##23520
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     2D 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##23520
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     52 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##42084
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     52 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##42084
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     2D 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##23520
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     2D 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     52 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##42084
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     52 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##42084
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     1C 4E B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     C0 51 B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     F8 50 B1 FD | 	call	#__system__LTrim_S
00c44     52 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##42088
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     52 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##42084
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     50 4D B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     7C 51 B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     B4 50 B1 FD | 	call	#__system__LTrim_S
00c88     2D 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##23520
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     2D 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##23520
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     16 01 00 FF 
00ca4     DA 1F 06 F6 | 	mov	local01, ##@LR__4010
00ca8     52 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##42088
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     52 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##42088
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     2D 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##23528
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     2D 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##23528
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     52 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##42088
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     52 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##42088
00cf0     16 01 00 FF 
00cf4     DB 15 06 F6 | 	mov	arg02, ##@LR__4011
00cf8     AC 2D B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     2D 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     2D 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     2D 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##23528
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     2D 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##23528
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     52 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##42088
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     52 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##42088
00d4c     16 01 00 FF 
00d50     DC 15 06 F6 | 	mov	arg02, ##@LR__4012
00d54     50 2D B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     2D 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     2D 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     2D 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##23528
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     2D 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##23528
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     52 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##42088
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     52 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##42088
00da4     16 01 00 FF 
00da8     DD 15 06 F6 | 	mov	arg02, ##@LR__4013
00dac     F8 2C B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     2D 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     2D 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     2D 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##23528
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     2D 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##23528
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     52 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##42088
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     52 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##42088
00dfc     16 01 00 FF 
00e00     DE 15 06 F6 | 	mov	arg02, ##@LR__4014
00e04     A0 2C B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     2D 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     2D 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     2D 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##23520
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     2D 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##23520
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     88 4C B1 FD | 	call	#__system__Mid_S
00e58     52 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##42092
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     52 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##42092
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     52 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##42080
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     52 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##42080
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     52 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##42100
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     52 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##42100
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     2D 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##23520
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     52 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##42100
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     7C 4B B1 FD | 	call	#__system__Mid_S
00f64     52 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##42108
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     52 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##42108
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     16 01 00 FF 
00f80     DF 15 06 F6 | 	mov	arg02, ##@LR__4015
00f84     20 2B B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     2B 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##22480
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     52 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##42108
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     2D 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##23520
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     52 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##42100
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     DC 4A B1 FD | 	call	#__system__Mid_S
01004     52 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##42108
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     52 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##42108
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     16 01 00 FF 
01020     E0 15 06 F6 | 	mov	arg02, ##@LR__4016
01024     80 2A B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     2B 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##22480
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     52 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##42108
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     2B 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##22480
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     16 01 00 FF 
01088     E1 15 06 F6 | 	mov	arg02, ##@LR__4017
0108c     2B 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##22480
01094     10 2A B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     2B 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##22480
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     2B 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##22480
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     D4 29 B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     2B 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##22480
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     2B 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##22480
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     52 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##42108
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     52 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##42108
011b0     16 01 00 FF 
011b4     E3 15 06 F6 | 	mov	arg02, ##@LR__4018
011b8     EC 28 B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     52 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##42108
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     52 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##42108
011dc     16 01 00 FF 
011e0     E5 15 06 F6 | 	mov	arg02, ##@LR__4019
011e4     C0 28 B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     2B 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##22480
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     2B 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##22480
01224     28 48 B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     16 01 00 FF 
01230     E7 15 06 F6 | 	mov	arg02, ##@LR__4020
01234     70 28 B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     2B 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##22480
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     2B 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##22480
0126c     58 47 B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     16 01 00 FF 
01278     E9 15 06 F6 | 	mov	arg02, ##@LR__4021
0127c     28 28 B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     2B 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##22480
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     2B 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##22480
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     40 47 B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     BC 27 B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     2B 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##22480
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     2B 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##22480
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     2B 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##22480
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     52 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##42116
01424     16 01 00 FF 
01428     EB 15 06 F6 | 	mov	arg02, ##@LR__4022
0142c     78 26 B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     52 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##42116
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     52 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##42116
0144c     16 01 00 FF 
01450     ED 15 06 F6 | 	mov	arg02, ##@LR__4023
01454     50 26 B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     52 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##42116
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     52 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##42116
01474     16 01 00 FF 
01478     EF 15 06 F6 | 	mov	arg02, ##@LR__4024
0147c     28 26 B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     52 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##42116
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     52 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##42116
0149c     16 01 00 FF 
014a0     F1 2F 06 F6 | 	mov	local09, ##@LR__4025
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     FC 25 B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     52 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##42116
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     52 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##42116
014c8     16 01 00 FF 
014cc     F3 37 06 F6 | 	mov	local13, ##@LR__4026
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     CC 25 B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     52 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##42116
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     52 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##42116
014f8     16 01 00 FF 
014fc     F5 37 06 F6 | 	mov	local13, ##@LR__4027
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     A0 25 B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     52 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##42116
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     52 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##42116
01524     16 01 00 FF 
01528     F7 47 06 F6 | 	mov	local21, ##@LR__4028
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     74 25 B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     52 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##42120
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     52 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##42120
01550     16 01 00 FF 
01554     F9 49 06 F6 | 	mov	local22, ##@LR__4029
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     44 25 B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     52 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##42116
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     52 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##42116
01580     16 01 00 FF 
01584     FB 49 06 F6 | 	mov	local22, ##@LR__4030
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     18 25 B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     52 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##42120
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     52 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##42120
015ac     16 01 00 FF 
015b0     FD 41 06 F6 | 	mov	local18, ##@LR__4031
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     E8 24 B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     52 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##42116
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     52 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##42116
015dc     16 01 00 FF 
015e0     FF 41 06 F6 | 	mov	local18, ##@LR__4032
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     BC 24 B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     52 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##42120
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##42120
01608     17 01 00 FF 
0160c     01 4C 06 F6 | 	mov	local24, ##@LR__4033
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     8C 24 B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     52 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##42116
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     52 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##42116
01638     17 01 00 FF 
0163c     03 4E 06 F6 | 	mov	local25, ##@LR__4034
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     5C 24 B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     52 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##42120
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     52 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##42120
01668     17 01 00 FF 
0166c     05 50 06 F6 | 	mov	local26, ##@LR__4035
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     2C 24 B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     2B 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##22480
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     52 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##42120
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     1C 24 B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     2B 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##22480
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     2B 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##22480
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     2B 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##22480
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     2B 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##22480
017bc     3C 46 B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     74 45 B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     2B 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##22480
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     2B 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     2B 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##22480
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     2B 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##22480
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     2B 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##22480
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     9C 40 B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     17 01 00 FF 
01934     07 14 06 F6 | 	mov	arg02, ##@LR__4036
01938     6C 21 B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     2B 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##22480
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     E0 40 B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     17 01 00 FF 
01978     09 14 06 F6 | 	mov	arg02, ##@LR__4037
0197c     28 21 B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     2B 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##22480
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     2B 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##22480
019c0     B8 42 B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     2B 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##22480
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     2B 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##22480
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     2B 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##22480
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     2B 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##22480
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     2B 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##22480
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     2B 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##22480
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     2B 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##22480
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     2B 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     2B 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##22480
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     2B 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##22480
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     2B 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##22480
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     2B 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##22480
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     2B 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##22480
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     2B 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##22480
01b78                 | ' 
01b78                 | ' select case s
01b78     17 01 00 FF 
01b7c     D2 14 06 F6 | 	mov	arg02, ##@LR__4094
01b80     24 1F B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     2B 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##22480
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     2B 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##22480
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     2B 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##22480
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     2B 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##22480
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     2B 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##22480
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     2B 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##22480
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     2B 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##22480
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     2B 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##22480
01c74     38 15 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     2B 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##22480
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     2B 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##22480
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     2B 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##22480
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     2B 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
01cd0     B0 18 B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     52 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##42124
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     2B 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##22480
01d04     54 1B B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     52 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##42128
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     2B 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##22480
01d3c     74 1C B0 FD | 	call	#_isdec
01d40     52 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##42132
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     52 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##42124
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     52 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##42128
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     52 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##42128
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     52 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##42132
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     52 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##42132
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     2B 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##22480
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     2B 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##22480
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     52 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##42124
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     52 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##42124
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     52 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##42128
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     52 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##42128
01dec     52 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##42132
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     52 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     2B 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##22480
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     2B 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##22480
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     52 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##42124
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     52 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##42124
01e50     52 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##42128
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     52 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##42128
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     52 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##42132
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     52 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     2B 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##22480
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     2B 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##22480
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     2B 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##22480
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     2B 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##22480
01edc     94 1B B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     2B 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##22480
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     2B 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##22480
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     58 3B B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     2B 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##22480
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     2B 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fb4     58 13 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     2B 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##22480
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     2B 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##22480
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     2B 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##22480
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     17 01 00 FF 
02020     0B 2A 06 F6 | 	mov	local07, ##@LR__4038
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     17 01 00 FF 
0204c     0C 14 06 F6 | 	mov	arg02, ##@LR__4039
02050     54 1A B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     2B 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##22480
02070     17 01 00 FF 
02074     11 14 06 F6 | 	mov	arg02, ##@LR__4040
02078     2C 1A B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     2B 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##22480
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     2B 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##22480
02098     17 01 00 FF 
0209c     16 14 06 F6 | 	mov	arg02, ##@LR__4041
020a0     04 1A B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     2B 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##22492
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     2B 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##22492
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     2B 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##22500
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     2B 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     2B 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##22492
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     2B 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     2B 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##22480
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     2B 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##22480
02110     17 01 00 FF 
02114     1B 28 06 F6 | 	mov	local06, ##@LR__4042
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     88 19 B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     2B 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##22480
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     2B 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##22480
0213c     17 01 00 FF 
02140     21 28 06 F6 | 	mov	local06, ##@LR__4043
02144     14 15 02 F6 | 	mov	arg02, local06
02148     5C 19 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     2B 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##22480
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     2B 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##22480
02168     17 01 00 FF 
0216c     28 2A 06 F6 | 	mov	local07, ##@LR__4044
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     2C 19 B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     2B 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##22492
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     2B 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##22492
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     2B 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     2B 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     2B 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##22488
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     2B 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##22488
021d8     17 01 00 FF 
021dc     2E 14 06 F6 | 	mov	arg02, ##@LR__4045
021e0     C4 18 B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     17 01 00 FF 
021f0     31 1E 06 F6 | 	mov	local01, ##@LR__4046
021f4     2B 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##22488
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     2B 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##22492
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     2B 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##22488
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     2B 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##22488
02228     17 01 00 FF 
0222c     33 28 06 F6 | 	mov	local06, ##@LR__4047
02230     14 15 02 F6 | 	mov	arg02, local06
02234     70 18 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     17 01 00 FF 
02244     37 1E 06 F6 | 	mov	local01, ##@LR__4048
02248     2B 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##22488
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     2B 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##22492
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     34 17 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     2B 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##22480
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     2B 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##22480
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     A0 47 B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     2D 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##23528
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     2D 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     00 18 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     2D 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##23528
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     2D 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##23528
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     2D 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##23528
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     2D 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##23528
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     2B 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##22500
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     2B 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##22500
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     2D 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##23528
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     2D 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##23528
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     E4 26 B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     20 E2 B0 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     52 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##42088
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     52 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##42088
02384     17 01 00 FF 
02388     39 14 06 F6 | 	mov	arg02, ##@LR__4049
0238c     18 17 B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     52 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##42088
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     2D 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##23528
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     2D 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##23528
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     2D 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##23528
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     2D 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##23528
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     2D 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##23528
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     2B 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##22492
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     2B 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##22492
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     2D 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##23528
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     2D 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##23528
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     F8 25 B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     34 E1 B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     52 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##42088
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     52 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##42088
02470     17 01 00 FF 
02474     3A 14 06 F6 | 	mov	arg02, ##@LR__4050
02478     2C 16 B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     52 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##42088
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     2D 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##23528
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     2D 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##23528
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     2D 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##23528
024cc     2D 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##23528
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     2D 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     2B 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     2B 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     2D 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##23528
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     2D 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##23528
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     EC 25 B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     52 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##42088
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     52 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##42088
02538     17 01 00 FF 
0253c     3B 14 06 F6 | 	mov	arg02, ##@LR__4051
02540     64 15 B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     52 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##42088
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     2D 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##23528
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     2D 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##23528
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     2D 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##23528
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     2D 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     2D 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     2B 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##22492
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     2B 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##22492
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     2D 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##23528
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     2D 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##23528
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     24 25 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     52 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##42088
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     52 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##42088
02600     17 01 00 FF 
02604     3C 14 06 F6 | 	mov	arg02, ##@LR__4052
02608     9C 14 B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     52 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##42088
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     2D 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##23528
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     2B 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##22484
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     2B 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##22484
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     2B 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##22492
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     2B 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     88 24 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     2B 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##22484
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     2B 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##22484
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     2B 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##22492
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     2B 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     98 68 B1 FD | 	call	#__system___getiolock_0306
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     AC 13 B1 FD | 	call	#__system___lockmem
026d4     17 01 00 FF 
026d8     3D 14 06 F6 | 	mov	arg02, ##@LR__4053
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     A4 1F B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     3C 1F B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     64 68 B1 FD | 	call	#__system___getiolock_0306
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     28 23 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     F0 57 B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     54 DE B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     52 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##42088
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     52 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##42088
0274c     17 01 00 FF 
02750     6C 14 06 F6 | 	mov	arg02, ##@LR__4054
02754     50 13 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     52 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##42088
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     2D 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##23520
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     17 01 00 FF 
02788     6D 12 06 F6 | 	mov	arg01, ##@LR__4055
0278c                 | ' 
0278c                 | ' write(text)
0278c     CC 02 B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     28 04 B1 FD | 	call	#_hg010b_spin2_crlf
02794     17 01 00 FF 
02798     6E 12 06 F6 | 	mov	arg01, ##@LR__4056
0279c                 | ' 
0279c                 | ' write(text)
0279c     BC 02 B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     18 04 B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     17 01 00 FF 
027c0     74 14 06 F6 | 	mov	arg02, ##@LR__4057
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     DC 12 B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     17 01 00 FF 
027d8     76 14 06 F6 | 	mov	arg02, ##@LR__4058
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     C4 12 B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     17 01 00 FF 
027f0     78 14 06 F6 | 	mov	arg02, ##@LR__4059
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     AC 12 B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     17 01 00 FF 
02808     7B 14 06 F6 | 	mov	arg02, ##@LR__4060
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     94 12 B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     17 01 00 FF 
02820     7F 14 06 F6 | 	mov	arg02, ##@LR__4061
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     7C 12 B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     17 01 00 FF 
02838     81 14 06 F6 | 	mov	arg02, ##@LR__4062
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     64 12 B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     17 01 00 FF 
02850     83 14 06 F6 | 	mov	arg02, ##@LR__4063
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     4C 12 B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     17 01 00 FF 
02868     87 14 06 F6 | 	mov	arg02, ##@LR__4064
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     34 12 B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     17 01 00 FF 
02880     8B 14 06 F6 | 	mov	arg02, ##@LR__4065
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     1C 12 B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     17 01 00 FF 
02898     8F 14 06 F6 | 	mov	arg02, ##@LR__4066
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     04 12 B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     17 01 00 FF 
028b0     93 14 06 F6 | 	mov	arg02, ##@LR__4067
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     EC 11 B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     17 01 00 FF 
028c8     97 14 06 F6 | 	mov	arg02, ##@LR__4068
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     D4 11 B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     17 01 00 FF 
028e0     99 14 06 F6 | 	mov	arg02, ##@LR__4069
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     BC 11 B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     17 01 00 FF 
028f8     9D 14 06 F6 | 	mov	arg02, ##@LR__4070
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     A4 11 B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     17 01 00 FF 
02910     9F 14 06 F6 | 	mov	arg02, ##@LR__4071
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     8C 11 B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     17 01 00 FF 
02928     A1 14 06 F6 | 	mov	arg02, ##@LR__4072
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     74 11 B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     17 01 00 FF 
02940     A4 14 06 F6 | 	mov	arg02, ##@LR__4073
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     5C 11 B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     17 01 00 FF 
02958     A7 14 06 F6 | 	mov	arg02, ##@LR__4074
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     44 11 B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     17 01 00 FF 
02970     A9 14 06 F6 | 	mov	arg02, ##@LR__4075
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     2C 11 B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     17 01 00 FF 
02988     AB 14 06 F6 | 	mov	arg02, ##@LR__4076
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     14 11 B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     17 01 00 FF 
029a0     AE 14 06 F6 | 	mov	arg02, ##@LR__4077
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     FC 10 B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     17 01 00 FF 
029b8     B1 14 06 F6 | 	mov	arg02, ##@LR__4078
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     E4 10 B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     17 01 00 FF 
02aa0     B4 14 06 F6 | 	mov	arg02, ##@LR__4079
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     FC 0F B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     17 01 00 FF 
02ab8     B6 14 06 F6 | 	mov	arg02, ##@LR__4080
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     E4 0F B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     17 01 00 FF 
02ad0     B8 14 06 F6 | 	mov	arg02, ##@LR__4081
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     CC 0F B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     17 01 00 FF 
02ae8     BA 14 06 F6 | 	mov	arg02, ##@LR__4082
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     B4 0F B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     17 01 00 FF 
02b00     BC 14 06 F6 | 	mov	arg02, ##@LR__4083
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     9C 0F B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     17 01 00 FF 
02b18     BE 14 06 F6 | 	mov	arg02, ##@LR__4084
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     84 0F B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     17 01 00 FF 
02b30     C0 14 06 F6 | 	mov	arg02, ##@LR__4085
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     6C 0F B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     17 01 00 FF 
02b48     C2 14 06 F6 | 	mov	arg02, ##@LR__4086
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     54 0F B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     17 01 00 FF 
02b60     C4 14 06 F6 | 	mov	arg02, ##@LR__4087
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     3C 0F B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     17 01 00 FF 
02b78     C6 14 06 F6 | 	mov	arg02, ##@LR__4088
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     24 0F B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     17 01 00 FF 
02b90     C8 14 06 F6 | 	mov	arg02, ##@LR__4089
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     0C 0F B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     17 01 00 FF 
02ba8     CA 14 06 F6 | 	mov	arg02, ##@LR__4090
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     F4 0E B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     17 01 00 FF 
02bc0     CC 14 06 F6 | 	mov	arg02, ##@LR__4091
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     DC 0E B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     17 01 00 FF 
02bd8     CE 14 06 F6 | 	mov	arg02, ##@LR__4092
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     C4 0E B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     17 01 00 FF 
02bf0     D0 14 06 F6 | 	mov	arg02, ##@LR__4093
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     AC 0E B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     17 01 00 FF 
02ca0     D4 14 06 F6 | 	mov	arg02, ##@LR__4095
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     FC 0D B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     AC 03 90 AD |  if_e	jmp	#LR__0180
02cb4     17 01 00 FF 
02cb8     D8 14 06 F6 | 	mov	arg02, ##@LR__4096
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     E4 0D B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     9C 03 90 AD |  if_e	jmp	#LR__0181
02ccc     17 01 00 FF 
02cd0     DC 14 06 F6 | 	mov	arg02, ##@LR__4097
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     CC 0D B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     8C 03 90 AD |  if_e	jmp	#LR__0182
02ce4     17 01 00 FF 
02ce8     E1 14 06 F6 | 	mov	arg02, ##@LR__4098
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     B4 0D B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     7C 03 90 AD |  if_e	jmp	#LR__0183
02cfc     17 01 00 FF 
02d00     E6 14 06 F6 | 	mov	arg02, ##@LR__4099
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     9C 0D B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     6C 03 90 AD |  if_e	jmp	#LR__0184
02d14     17 01 00 FF 
02d18     EC 14 06 F6 | 	mov	arg02, ##@LR__4100
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     84 0D B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     5C 03 90 AD |  if_e	jmp	#LR__0185
02d2c     17 01 00 FF 
02d30     F3 14 06 F6 | 	mov	arg02, ##@LR__4101
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     6C 0D B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     4C 03 90 AD |  if_e	jmp	#LR__0186
02d44     17 01 00 FF 
02d48     FB 14 06 F6 | 	mov	arg02, ##@LR__4102
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     54 0D B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     3C 03 90 AD |  if_e	jmp	#LR__0187
02d5c     17 01 00 FF 
02d60     FF 14 06 F6 | 	mov	arg02, ##@LR__4103
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     3C 0D B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     2C 03 90 AD |  if_e	jmp	#LR__0188
02d74     17 01 00 FF 
02d78     05 15 06 F6 | 	mov	arg02, ##@LR__4104
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     24 0D B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     1C 03 90 AD |  if_e	jmp	#LR__0189
02d8c     17 01 00 FF 
02d90     0B 15 06 F6 | 	mov	arg02, ##@LR__4105
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     0C 0D B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     0C 03 90 AD |  if_e	jmp	#LR__0190
02da4     17 01 00 FF 
02da8     11 15 06 F6 | 	mov	arg02, ##@LR__4106
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     F4 0C B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     FC 02 90 AD |  if_e	jmp	#LR__0191
02dbc     17 01 00 FF 
02dc0     16 15 06 F6 | 	mov	arg02, ##@LR__4107
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     DC 0C B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     EC 02 90 AD |  if_e	jmp	#LR__0192
02dd4     17 01 00 FF 
02dd8     1A 15 06 F6 | 	mov	arg02, ##@LR__4108
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     C4 0C B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     DC 02 90 AD |  if_e	jmp	#LR__0193
02dec     17 01 00 FF 
02df0     1F 15 06 F6 | 	mov	arg02, ##@LR__4109
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     AC 0C B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     CC 02 90 AD |  if_e	jmp	#LR__0194
02e04     17 01 00 FF 
02e08     25 15 06 F6 | 	mov	arg02, ##@LR__4110
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     94 0C B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     BC 02 90 AD |  if_e	jmp	#LR__0195
02e1c     17 01 00 FF 
02e20     2A 15 06 F6 | 	mov	arg02, ##@LR__4111
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     7C 0C B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     AC 02 90 AD |  if_e	jmp	#LR__0196
02e34     17 01 00 FF 
02e38     2F 15 06 F6 | 	mov	arg02, ##@LR__4112
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     64 0C B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     9C 02 90 AD |  if_e	jmp	#LR__0197
02e4c     17 01 00 FF 
02e50     34 15 06 F6 | 	mov	arg02, ##@LR__4113
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     4C 0C B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     8C 02 90 AD |  if_e	jmp	#LR__0198
02e64     17 01 00 FF 
02e68     3D 15 06 F6 | 	mov	arg02, ##@LR__4114
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     34 0C B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     7C 02 90 AD |  if_e	jmp	#LR__0199
02e7c     17 01 00 FF 
02e80     44 15 06 F6 | 	mov	arg02, ##@LR__4115
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     1C 0C B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     6C 02 90 AD |  if_e	jmp	#LR__0200
02e94     17 01 00 FF 
02e98     4C 15 06 F6 | 	mov	arg02, ##@LR__4116
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     04 0C B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     5C 02 90 AD |  if_e	jmp	#LR__0201
02eac     17 01 00 FF 
02eb0     4F 15 06 F6 | 	mov	arg02, ##@LR__4117
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     EC 0B B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     4C 02 90 AD |  if_e	jmp	#LR__0202
02ec4     17 01 00 FF 
02ec8     54 15 06 F6 | 	mov	arg02, ##@LR__4118
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     D4 0B B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     3C 02 90 AD |  if_e	jmp	#LR__0203
02edc     17 01 00 FF 
02ee0     59 15 06 F6 | 	mov	arg02, ##@LR__4119
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     BC 0B B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     2C 02 90 AD |  if_e	jmp	#LR__0204
02ef4     17 01 00 FF 
02ef8     5E 15 06 F6 | 	mov	arg02, ##@LR__4120
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     A4 0B B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     1C 02 90 AD |  if_e	jmp	#LR__0205
02f0c     17 01 00 FF 
02f10     62 15 06 F6 | 	mov	arg02, ##@LR__4121
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     8C 0B B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     0C 02 90 AD |  if_e	jmp	#LR__0206
02f24     17 01 00 FF 
02f28     66 15 06 F6 | 	mov	arg02, ##@LR__4122
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     74 0B B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     FC 01 90 AD |  if_e	jmp	#LR__0207
02f3c     17 01 00 FF 
02f40     6B 15 06 F6 | 	mov	arg02, ##@LR__4123
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     5C 0B B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     EC 01 90 AD |  if_e	jmp	#LR__0208
02f54     17 01 00 FF 
02f58     71 15 06 F6 | 	mov	arg02, ##@LR__4124
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     44 0B B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     DC 01 90 AD |  if_e	jmp	#LR__0209
02f6c     17 01 00 FF 
02f70     75 15 06 F6 | 	mov	arg02, ##@LR__4125
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     2C 0B B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     CC 01 90 AD |  if_e	jmp	#LR__0210
02f84     17 01 00 FF 
02f88     7A 15 06 F6 | 	mov	arg02, ##@LR__4126
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     14 0B B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     BC 01 90 AD |  if_e	jmp	#LR__0211
02f9c     17 01 00 FF 
02fa0     7F 15 06 F6 | 	mov	arg02, ##@LR__4127
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     FC 0A B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     AC 01 90 AD |  if_e	jmp	#LR__0212
02fb4     17 01 00 FF 
02fb8     85 15 06 F6 | 	mov	arg02, ##@LR__4128
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     E4 0A B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     9C 01 90 AD |  if_e	jmp	#LR__0213
02fcc     17 01 00 FF 
02fd0     8C 15 06 F6 | 	mov	arg02, ##@LR__4129
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     CC 0A B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     8C 01 90 AD |  if_e	jmp	#LR__0214
02fe4     17 01 00 FF 
02fe8     92 15 06 F6 | 	mov	arg02, ##@LR__4130
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     B4 0A B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     7C 01 90 AD |  if_e	jmp	#LR__0215
02ffc     17 01 00 FF 
03000     9C 15 06 F6 | 	mov	arg02, ##@LR__4131
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     9C 0A B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     6C 01 90 AD |  if_e	jmp	#LR__0216
03014     17 01 00 FF 
03018     A3 15 06 F6 | 	mov	arg02, ##@LR__4132
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     84 0A B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     5C 01 90 AD |  if_e	jmp	#LR__0217
0302c     17 01 00 FF 
03030     AD 15 06 F6 | 	mov	arg02, ##@LR__4133
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     6C 0A B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     4C 01 90 AD |  if_e	jmp	#LR__0218
03044     17 01 00 FF 
03048     B2 15 06 F6 | 	mov	arg02, ##@LR__4134
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     54 0A B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     3C 01 90 AD |  if_e	jmp	#LR__0219
0305c     40 01 90 FD | 	jmp	#LR__0220
03060                 | LR__0180
03060     40 FA 05 F6 | 	mov	result1, #64
03064     3C 01 90 FD | 	jmp	#LR__0221
03068                 | LR__0181
03068     41 FA 05 F6 | 	mov	result1, #65
0306c     34 01 90 FD | 	jmp	#LR__0221
03070                 | LR__0182
03070     42 FA 05 F6 | 	mov	result1, #66
03074     2C 01 90 FD | 	jmp	#LR__0221
03078                 | LR__0183
03078     43 FA 05 F6 | 	mov	result1, #67
0307c     24 01 90 FD | 	jmp	#LR__0221
03080                 | LR__0184
03080     44 FA 05 F6 | 	mov	result1, #68
03084     1C 01 90 FD | 	jmp	#LR__0221
03088                 | LR__0185
03088     45 FA 05 F6 | 	mov	result1, #69
0308c     14 01 90 FD | 	jmp	#LR__0221
03090                 | LR__0186
03090     46 FA 05 F6 | 	mov	result1, #70
03094     0C 01 90 FD | 	jmp	#LR__0221
03098                 | LR__0187
03098     47 FA 05 F6 | 	mov	result1, #71
0309c     04 01 90 FD | 	jmp	#LR__0221
030a0                 | LR__0188
030a0     48 FA 05 F6 | 	mov	result1, #72
030a4     FC 00 90 FD | 	jmp	#LR__0221
030a8                 | LR__0189
030a8     49 FA 05 F6 | 	mov	result1, #73
030ac     F4 00 90 FD | 	jmp	#LR__0221
030b0                 | LR__0190
030b0     44 FA 05 F6 | 	mov	result1, #68
030b4     EC 00 90 FD | 	jmp	#LR__0221
030b8                 | LR__0191
030b8     4C FA 05 F6 | 	mov	result1, #76
030bc     E4 00 90 FD | 	jmp	#LR__0221
030c0                 | LR__0192
030c0     4D FA 05 F6 | 	mov	result1, #77
030c4     DC 00 90 FD | 	jmp	#LR__0221
030c8                 | LR__0193
030c8     4E FA 05 F6 | 	mov	result1, #78
030cc     D4 00 90 FD | 	jmp	#LR__0221
030d0                 | LR__0194
030d0     50 FA 05 F6 | 	mov	result1, #80
030d4     CC 00 90 FD | 	jmp	#LR__0221
030d8                 | LR__0195
030d8     51 FA 05 F6 | 	mov	result1, #81
030dc     C4 00 90 FD | 	jmp	#LR__0221
030e0                 | LR__0196
030e0     52 FA 05 F6 | 	mov	result1, #82
030e4     BC 00 90 FD | 	jmp	#LR__0221
030e8                 | LR__0197
030e8     59 FA 05 F6 | 	mov	result1, #89
030ec     B4 00 90 FD | 	jmp	#LR__0221
030f0                 | LR__0198
030f0     55 FA 05 F6 | 	mov	result1, #85
030f4     AC 00 90 FD | 	jmp	#LR__0221
030f8                 | LR__0199
030f8     56 FA 05 F6 | 	mov	result1, #86
030fc     A4 00 90 FD | 	jmp	#LR__0221
03100                 | LR__0200
03100     57 FA 05 F6 | 	mov	result1, #87
03104     9C 00 90 FD | 	jmp	#LR__0221
03108                 | LR__0201
03108     58 FA 05 F6 | 	mov	result1, #88
0310c     94 00 90 FD | 	jmp	#LR__0221
03110                 | LR__0202
03110     5A FA 05 F6 | 	mov	result1, #90
03114     8C 00 90 FD | 	jmp	#LR__0221
03118                 | LR__0203
03118     5B FA 05 F6 | 	mov	result1, #91
0311c     84 00 90 FD | 	jmp	#LR__0221
03120                 | LR__0204
03120     5C FA 05 F6 | 	mov	result1, #92
03124     7C 00 90 FD | 	jmp	#LR__0221
03128                 | LR__0205
03128     5D FA 05 F6 | 	mov	result1, #93
0312c     74 00 90 FD | 	jmp	#LR__0221
03130                 | LR__0206
03130     4A FA 05 F6 | 	mov	result1, #74
03134     6C 00 90 FD | 	jmp	#LR__0221
03138                 | LR__0207
03138     4B FA 05 F6 | 	mov	result1, #75
0313c     64 00 90 FD | 	jmp	#LR__0221
03140                 | LR__0208
03140     5E FA 05 F6 | 	mov	result1, #94
03144     5C 00 90 FD | 	jmp	#LR__0221
03148                 | LR__0209
03148     5F FA 05 F6 | 	mov	result1, #95
0314c     54 00 90 FD | 	jmp	#LR__0221
03150                 | LR__0210
03150     60 FA 05 F6 | 	mov	result1, #96
03154     4C 00 90 FD | 	jmp	#LR__0221
03158                 | LR__0211
03158     61 FA 05 F6 | 	mov	result1, #97
0315c     44 00 90 FD | 	jmp	#LR__0221
03160                 | LR__0212
03160     63 FA 05 F6 | 	mov	result1, #99
03164     3C 00 90 FD | 	jmp	#LR__0221
03168                 | LR__0213
03168     68 FA 05 F6 | 	mov	result1, #104
0316c     34 00 90 FD | 	jmp	#LR__0221
03170                 | LR__0214
03170     69 FA 05 F6 | 	mov	result1, #105
03174     2C 00 90 FD | 	jmp	#LR__0221
03178                 | LR__0215
03178     6C FA 05 F6 | 	mov	result1, #108
0317c     24 00 90 FD | 	jmp	#LR__0221
03180                 | LR__0216
03180     6D FA 05 F6 | 	mov	result1, #109
03184     1C 00 90 FD | 	jmp	#LR__0221
03188                 | LR__0217
03188     70 FA 05 F6 | 	mov	result1, #112
0318c     14 00 90 FD | 	jmp	#LR__0221
03190                 | LR__0218
03190     71 FA 05 F6 | 	mov	result1, #113
03194     0C 00 90 FD | 	jmp	#LR__0221
03198                 | LR__0219
03198     72 FA 05 F6 | 	mov	result1, #114
0319c     04 00 90 FD | 	jmp	#LR__0221
031a0                 | LR__0220
031a0     00 FA 05 F6 | 	mov	result1, #0
031a4                 | LR__0221
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _iscommand_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' function isfunction(s as string) as ubyte
031b0                 | _isfunction
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     17 01 00 FF 
031c0     B6 15 06 F6 | 	mov	arg02, ##@LR__4135
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     DC 08 B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     DC 00 90 AD |  if_e	jmp	#LR__0230
031d4     17 01 00 FF 
031d8     BA 15 06 F6 | 	mov	arg02, ##@LR__4136
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     C4 08 B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     CC 00 90 AD |  if_e	jmp	#LR__0231
031ec     17 01 00 FF 
031f0     C1 15 06 F6 | 	mov	arg02, ##@LR__4137
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     AC 08 B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     BC 00 90 AD |  if_e	jmp	#LR__0232
03204     17 01 00 FF 
03208     C8 15 06 F6 | 	mov	arg02, ##@LR__4138
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     94 08 B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     AC 00 90 AD |  if_e	jmp	#LR__0233
0321c     17 01 00 FF 
03220     CF 15 06 F6 | 	mov	arg02, ##@LR__4139
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     7C 08 B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     9C 00 90 AD |  if_e	jmp	#LR__0234
03234     17 01 00 FF 
03238     D6 15 06 F6 | 	mov	arg02, ##@LR__4140
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     64 08 B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     8C 00 90 AD |  if_e	jmp	#LR__0235
0324c     17 01 00 FF 
03250     DE 15 06 F6 | 	mov	arg02, ##@LR__4141
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     4C 08 B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     7C 00 90 AD |  if_e	jmp	#LR__0236
03264     17 01 00 FF 
03268     E2 15 06 F6 | 	mov	arg02, ##@LR__4142
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     34 08 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     6C 00 90 AD |  if_e	jmp	#LR__0237
0327c     17 01 00 FF 
03280     E8 15 06 F6 | 	mov	arg02, ##@LR__4143
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     1C 08 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     5C 00 90 AD |  if_e	jmp	#LR__0238
03294     17 01 00 FF 
03298     EE 15 06 F6 | 	mov	arg02, ##@LR__4144
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     04 08 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     4C 00 90 AD |  if_e	jmp	#LR__0239
032ac     50 00 90 FD | 	jmp	#LR__0240
032b0                 | LR__0230
032b0     54 FA 05 F6 | 	mov	result1, #84
032b4     4C 00 90 FD | 	jmp	#LR__0241
032b8                 | LR__0231
032b8     64 FA 05 F6 | 	mov	result1, #100
032bc     44 00 90 FD | 	jmp	#LR__0241
032c0                 | LR__0232
032c0     65 FA 05 F6 | 	mov	result1, #101
032c4     3C 00 90 FD | 	jmp	#LR__0241
032c8                 | LR__0233
032c8     66 FA 05 F6 | 	mov	result1, #102
032cc     34 00 90 FD | 	jmp	#LR__0241
032d0                 | LR__0234
032d0     67 FA 05 F6 | 	mov	result1, #103
032d4     2C 00 90 FD | 	jmp	#LR__0241
032d8                 | LR__0235
032d8     62 FA 05 F6 | 	mov	result1, #98
032dc     24 00 90 FD | 	jmp	#LR__0241
032e0                 | LR__0236
032e0     6B FA 05 F6 | 	mov	result1, #107
032e4     1C 00 90 FD | 	jmp	#LR__0241
032e8                 | LR__0237
032e8     6A FA 05 F6 | 	mov	result1, #106
032ec     14 00 90 FD | 	jmp	#LR__0241
032f0                 | LR__0238
032f0     6E FA 05 F6 | 	mov	result1, #110
032f4     0C 00 90 FD | 	jmp	#LR__0241
032f8                 | LR__0239
032f8     6F FA 05 F6 | 	mov	result1, #111
032fc     04 00 90 FD | 	jmp	#LR__0241
03300                 | LR__0240
03300     00 FA 05 F6 | 	mov	result1, #0
03304                 | LR__0241
03304     A7 F0 03 F6 | 	mov	ptra, fp
03308     B2 00 A0 FD | 	call	#popregs_
0330c                 | _isfunction_ret
0330c     2D 00 64 FD | 	ret
03310                 | 
03310                 | ' 
03310                 | ' function isname(s as string) as boolean
03310                 | _isname
03310     0D 4A 05 F6 | 	mov	COUNT_, #13
03314     A8 00 A0 FD | 	call	#pushregs_
03318     09 1F 02 F6 | 	mov	local01, arg01
0331c     09 21 02 F6 | 	mov	local02, arg01
03320     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03324                 | LR__0250
03324     10 FB C9 FA | 	rdbyte	result1, local02 wz
03328     01 20 06 51 |  if_ne	add	local02, #1
0332c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03330                 | LR__0251
03330     09 21 82 F1 | 	sub	local02, arg01
03334     10 FB 01 F6 | 	mov	result1, local02
03338     FD 22 0A F6 | 	mov	local03, result1 wz
0333c     00 FA 05 A6 |  if_e	mov	result1, #0
03340     34 02 90 AD |  if_e	jmp	#LR__0263
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     01 14 06 F6 | 	mov	arg02, #1
0334c     01 16 06 F6 | 	mov	arg03, #1
03350     8C 27 B1 FD | 	call	#__system__Mid_S
03354     FD 24 02 F6 | 	mov	local04, result1
03358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03358     17 01 00 FF 
0335c     F7 15 06 F6 | 	mov	arg02, ##@LR__4145
03360     12 13 02 F6 | 	mov	arg01, local04
03364     40 07 B1 FD | 	call	#__system___string_cmp
03368     00 FA 55 F2 | 	cmps	result1, #0 wc
0336c     18 00 90 CD |  if_b	jmp	#LR__0252
03370     17 01 00 FF 
03374     F9 15 06 F6 | 	mov	arg02, ##@LR__4146
03378     12 13 02 F6 | 	mov	arg01, local04
0337c     28 07 B1 FD | 	call	#__system___string_cmp
03380     01 FA 55 F2 | 	cmps	result1, #1 wc
03384     1C 00 90 CD |  if_b	jmp	#LR__0253
03388                 | LR__0252
03388     17 01 00 FF 
0338c     FB 15 06 F6 | 	mov	arg02, ##@LR__4147
03390     12 13 02 F6 | 	mov	arg01, local04
03394     10 07 B1 FD | 	call	#__system___string_cmp
03398     00 FA 0D F2 | 	cmp	result1, #0 wz
0339c     00 FA 05 56 |  if_ne	mov	result1, #0
033a0     D4 01 90 5D |  if_ne	jmp	#LR__0263
033a4                 | LR__0253
033a4                 | ' if l>2 then 
033a4     03 22 56 F2 | 	cmps	local03, #3 wc
033a8     C8 01 90 CD |  if_b	jmp	#LR__0262
033ac                 | '   for i=2 to l
033ac     02 26 06 F6 | 	mov	local05, #2
033b0     11 29 02 F6 | 	mov	local06, local03
033b4     01 28 06 F1 | 	add	local06, #1
033b8                 | LR__0254
033b8     14 27 52 F2 | 	cmps	local05, local06 wc
033bc     B4 01 90 3D |  if_ae	jmp	#LR__0261
033c0     0F 13 02 F6 | 	mov	arg01, local01
033c4     13 15 02 F6 | 	mov	arg02, local05
033c8     01 16 06 F6 | 	mov	arg03, #1
033cc     10 27 B1 FD | 	call	#__system__Mid_S
033d0     FD 24 02 F6 | 	mov	local04, result1
033d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
033d4     11 27 52 F2 | 	cmps	local05, local03 wc
033d8     9C 00 90 3D |  if_ae	jmp	#LR__0257
033dc     17 01 00 FF 
033e0     FD 15 06 F6 | 	mov	arg02, ##@LR__4148
033e4     12 13 02 F6 | 	mov	arg01, local04
033e8     BC 06 B1 FD | 	call	#__system___string_cmp
033ec     00 FA 55 F2 | 	cmps	result1, #0 wc
033f0     18 00 90 CD |  if_b	jmp	#LR__0255
033f4     17 01 00 FF 
033f8     FF 15 06 F6 | 	mov	arg02, ##@LR__4149
033fc     12 13 02 F6 | 	mov	arg01, local04
03400     A4 06 B1 FD | 	call	#__system___string_cmp
03404     01 FA 55 F2 | 	cmps	result1, #1 wc
03408     6C 00 90 CD |  if_b	jmp	#LR__0257
0340c                 | LR__0255
0340c     18 01 00 FF 
03410     01 14 06 F6 | 	mov	arg02, ##@LR__4150
03414     12 13 02 F6 | 	mov	arg01, local04
03418     8C 06 B1 FD | 	call	#__system___string_cmp
0341c     00 FA 55 F2 | 	cmps	result1, #0 wc
03420     18 00 90 CD |  if_b	jmp	#LR__0256
03424     18 01 00 FF 
03428     03 14 06 F6 | 	mov	arg02, ##@LR__4151
0342c     12 13 02 F6 | 	mov	arg01, local04
03430     74 06 B1 FD | 	call	#__system___string_cmp
03434     01 FA 55 F2 | 	cmps	result1, #1 wc
03438     3C 00 90 CD |  if_b	jmp	#LR__0257
0343c                 | LR__0256
0343c     18 01 00 FF 
03440     05 2A 06 F6 | 	mov	local07, ##@LR__4152
03444     12 13 02 F6 | 	mov	arg01, local04
03448     15 15 02 F6 | 	mov	arg02, local07
0344c     58 06 B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     20 00 90 AD |  if_e	jmp	#LR__0257
03458     18 01 00 FF 
0345c     07 2C 06 F6 | 	mov	local08, ##@LR__4153
03460     12 13 02 F6 | 	mov	arg01, local04
03464     16 15 02 F6 | 	mov	arg02, local08
03468     3C 06 B1 FD | 	call	#__system___string_cmp
0346c     FD 2E 0A F6 | 	mov	local09, result1 wz
03470     00 FA 05 56 |  if_ne	mov	result1, #0
03474     00 01 90 5D |  if_ne	jmp	#LR__0263
03478                 | LR__0257
03478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03478     11 27 0A F2 | 	cmp	local05, local03 wz
0347c     EC 00 90 5D |  if_ne	jmp	#LR__0260
03480     18 01 00 FF 
03484     09 30 06 F6 | 	mov	local10, ##@LR__4154
03488     12 13 02 F6 | 	mov	arg01, local04
0348c     18 15 02 F6 | 	mov	arg02, local10
03490     14 06 B1 FD | 	call	#__system___string_cmp
03494     FD 32 02 F6 | 	mov	local11, result1
03498     00 32 56 F2 | 	cmps	local11, #0 wc
0349c     1C 00 90 CD |  if_b	jmp	#LR__0258
034a0     18 01 00 FF 
034a4     0B 14 06 F6 | 	mov	arg02, ##@LR__4155
034a8     12 13 02 F6 | 	mov	arg01, local04
034ac     F8 05 B1 FD | 	call	#__system___string_cmp
034b0     FD 30 02 F6 | 	mov	local10, result1
034b4     01 30 56 F2 | 	cmps	local10, #1 wc
034b8     B0 00 90 CD |  if_b	jmp	#LR__0260
034bc                 | LR__0258
034bc     18 01 00 FF 
034c0     0D 14 06 F6 | 	mov	arg02, ##@LR__4156
034c4     12 13 02 F6 | 	mov	arg01, local04
034c8     DC 05 B1 FD | 	call	#__system___string_cmp
034cc     00 FA 55 F2 | 	cmps	result1, #0 wc
034d0     1C 00 90 CD |  if_b	jmp	#LR__0259
034d4     18 01 00 FF 
034d8     0F 2E 06 F6 | 	mov	local09, ##@LR__4157
034dc     12 13 02 F6 | 	mov	arg01, local04
034e0     17 15 02 F6 | 	mov	arg02, local09
034e4     C0 05 B1 FD | 	call	#__system___string_cmp
034e8     01 FA 55 F2 | 	cmps	result1, #1 wc
034ec     7C 00 90 CD |  if_b	jmp	#LR__0260
034f0                 | LR__0259
034f0     18 01 00 FF 
034f4     11 2E 06 F6 | 	mov	local09, ##@LR__4158
034f8     12 13 02 F6 | 	mov	arg01, local04
034fc     17 15 02 F6 | 	mov	arg02, local09
03500     A4 05 B1 FD | 	call	#__system___string_cmp
03504     00 FA 4D F2 | 	cmps	result1, #0 wz
03508     60 00 90 AD |  if_e	jmp	#LR__0260
0350c     18 01 00 FF 
03510     13 2C 06 F6 | 	mov	local08, ##@LR__4159
03514     12 13 02 F6 | 	mov	arg01, local04
03518     16 15 02 F6 | 	mov	arg02, local08
0351c     88 05 B1 FD | 	call	#__system___string_cmp
03520     FD 2E 0A F6 | 	mov	local09, result1 wz
03524     44 00 90 AD |  if_e	jmp	#LR__0260
03528     18 01 00 FF 
0352c     15 34 06 F6 | 	mov	local12, ##@LR__4160
03530     1A 2D 02 F6 | 	mov	local08, local12
03534     12 13 02 F6 | 	mov	arg01, local04
03538     16 15 02 F6 | 	mov	arg02, local08
0353c     68 05 B1 FD | 	call	#__system___string_cmp
03540     FD 2A 0A F6 | 	mov	local07, result1 wz
03544     24 00 90 AD |  if_e	jmp	#LR__0260
03548     18 01 00 FF 
0354c     17 36 06 F6 | 	mov	local13, ##@LR__4161
03550     1B 35 02 F6 | 	mov	local12, local13
03554     12 13 02 F6 | 	mov	arg01, local04
03558     1A 15 02 F6 | 	mov	arg02, local12
0355c     48 05 B1 FD | 	call	#__system___string_cmp
03560     FD 2C 0A F6 | 	mov	local08, result1 wz
03564     00 FA 05 56 |  if_ne	mov	result1, #0
03568     0C 00 90 5D |  if_ne	jmp	#LR__0263
0356c                 | LR__0260
0356c     01 26 06 F1 | 	add	local05, #1
03570     44 FE 9F FD | 	jmp	#LR__0254
03574                 | LR__0261
03574                 | LR__0262
03574                 | ' return true
03574     01 FA 65 F6 | 	neg	result1, #1
03578                 | LR__0263
03578     A7 F0 03 F6 | 	mov	ptra, fp
0357c     B2 00 A0 FD | 	call	#popregs_
03580                 | _isname_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | ' 
03584                 | ' function isnum(s as string) as boolean
03584                 | _isnum
03584     0D 4A 05 F6 | 	mov	COUNT_, #13
03588     A8 00 A0 FD | 	call	#pushregs_
0358c     09 1F 02 F6 | 	mov	local01, arg01
03590     00 20 06 F6 | 	mov	local02, #0
03594     00 22 06 F6 | 	mov	local03, #0
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     09 25 02 F6 | 	mov	local04, arg01
035a0     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
035a4                 | LR__0270
035a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
035a8     01 24 06 51 |  if_ne	add	local04, #1
035ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
035b0                 | LR__0271
035b0     09 25 82 F1 | 	sub	local04, arg01
035b4     12 FB 01 F6 | 	mov	result1, local04
035b8     FD 26 0A F6 | 	mov	local05, result1 wz
035bc     00 FA 05 A6 |  if_e	mov	result1, #0
035c0     8C 02 90 AD |  if_e	jmp	#LR__0282
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     01 14 06 F6 | 	mov	arg02, #1
035cc     01 16 06 F6 | 	mov	arg03, #1
035d0     0C 25 B1 FD | 	call	#__system__Mid_S
035d4     FD 28 02 F6 | 	mov	local06, result1
035d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
035d8     18 01 00 FF 
035dc     19 14 06 F6 | 	mov	arg02, ##@LR__4162
035e0     14 13 02 F6 | 	mov	arg01, local06
035e4     C0 04 B1 FD | 	call	#__system___string_cmp
035e8     00 FA 55 F2 | 	cmps	result1, #0 wc
035ec     18 00 90 CD |  if_b	jmp	#LR__0272
035f0     18 01 00 FF 
035f4     1B 14 06 F6 | 	mov	arg02, ##@LR__4163
035f8     14 13 02 F6 | 	mov	arg01, local06
035fc     A8 04 B1 FD | 	call	#__system___string_cmp
03600     01 FA 55 F2 | 	cmps	result1, #1 wc
03604     78 00 90 CD |  if_b	jmp	#LR__0273
03608                 | LR__0272
03608     18 01 00 FF 
0360c     1D 14 06 F6 | 	mov	arg02, ##@LR__4164
03610     14 13 02 F6 | 	mov	arg01, local06
03614     90 04 B1 FD | 	call	#__system___string_cmp
03618     00 FA 0D F2 | 	cmp	result1, #0 wz
0361c     60 00 90 AD |  if_e	jmp	#LR__0273
03620     18 01 00 FF 
03624     1F 2A 06 F6 | 	mov	local07, ##@LR__4165
03628     14 13 02 F6 | 	mov	arg01, local06
0362c     15 15 02 F6 | 	mov	arg02, local07
03630     74 04 B1 FD | 	call	#__system___string_cmp
03634     00 FA 0D F2 | 	cmp	result1, #0 wz
03638     44 00 90 AD |  if_e	jmp	#LR__0273
0363c     18 01 00 FF 
03640     21 2C 06 F6 | 	mov	local08, ##@LR__4166
03644     16 2B 02 F6 | 	mov	local07, local08
03648     14 13 02 F6 | 	mov	arg01, local06
0364c     15 15 02 F6 | 	mov	arg02, local07
03650     54 04 B1 FD | 	call	#__system___string_cmp
03654     00 FA 4D F2 | 	cmps	result1, #0 wz
03658     24 00 90 AD |  if_e	jmp	#LR__0273
0365c     18 01 00 FF 
03660     23 2E 06 F6 | 	mov	local09, ##@LR__4167
03664     17 2D 02 F6 | 	mov	local08, local09
03668     14 13 02 F6 | 	mov	arg01, local06
0366c     16 15 02 F6 | 	mov	arg02, local08
03670     34 04 B1 FD | 	call	#__system___string_cmp
03674     FD 2A 0A F6 | 	mov	local07, result1 wz
03678     00 FA 05 56 |  if_ne	mov	result1, #0
0367c     D0 01 90 5D |  if_ne	jmp	#LR__0282
03680                 | LR__0273
03680                 | ' if m$="." then ds=1
03680     18 01 00 FF 
03684     25 14 06 F6 | 	mov	arg02, ##@LR__4168
03688     14 13 02 F6 | 	mov	arg01, local06
0368c     18 04 B1 FD | 	call	#__system___string_cmp
03690     00 FA 0D F2 | 	cmp	result1, #0 wz
03694     01 20 06 A6 |  if_e	mov	local02, #1
03698                 | ' if l>1 then 
03698     02 26 56 F2 | 	cmps	local05, #2 wc
0369c     AC 01 90 CD |  if_b	jmp	#LR__0281
036a0                 | '   for i=2 to l
036a0     02 30 06 F6 | 	mov	local10, #2
036a4     13 33 02 F6 | 	mov	local11, local05
036a8     01 32 06 F1 | 	add	local11, #1
036ac                 | LR__0274
036ac     19 31 52 F2 | 	cmps	local10, local11 wc
036b0     98 01 90 3D |  if_ae	jmp	#LR__0280
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     18 15 02 F6 | 	mov	arg02, local10
036bc     01 16 06 F6 | 	mov	arg03, #1
036c0     1C 24 B1 FD | 	call	#__system__Mid_S
036c4     FD 28 02 F6 | 	mov	local06, result1
036c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
036c8     18 01 00 FF 
036cc     27 14 06 F6 | 	mov	arg02, ##@LR__4169
036d0     14 13 02 F6 | 	mov	arg01, local06
036d4     D0 03 B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0275
036e0     18 01 00 FF 
036e4     29 14 06 F6 | 	mov	arg02, ##@LR__4170
036e8     14 13 02 F6 | 	mov	arg01, local06
036ec     B8 03 B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     98 00 90 CD |  if_b	jmp	#LR__0276
036f8                 | LR__0275
036f8     18 01 00 FF 
036fc     2B 14 06 F6 | 	mov	arg02, ##@LR__4171
03700     14 13 02 F6 | 	mov	arg01, local06
03704     A0 03 B1 FD | 	call	#__system___string_cmp
03708     00 FA 0D F2 | 	cmp	result1, #0 wz
0370c     80 00 90 AD |  if_e	jmp	#LR__0276
03710     18 01 00 FF 
03714     2D 2A 06 F6 | 	mov	local07, ##@LR__4172
03718     14 13 02 F6 | 	mov	arg01, local06
0371c     15 15 02 F6 | 	mov	arg02, local07
03720     84 03 B1 FD | 	call	#__system___string_cmp
03724     00 FA 4D F2 | 	cmps	result1, #0 wz
03728     64 00 90 AD |  if_e	jmp	#LR__0276
0372c     18 01 00 FF 
03730     2F 2C 06 F6 | 	mov	local08, ##@LR__4173
03734     16 2B 02 F6 | 	mov	local07, local08
03738     14 13 02 F6 | 	mov	arg01, local06
0373c     15 15 02 F6 | 	mov	arg02, local07
03740     64 03 B1 FD | 	call	#__system___string_cmp
03744     FD 34 0A F6 | 	mov	local12, result1 wz
03748     44 00 90 AD |  if_e	jmp	#LR__0276
0374c     18 01 00 FF 
03750     31 2E 06 F6 | 	mov	local09, ##@LR__4174
03754     17 2D 02 F6 | 	mov	local08, local09
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     16 15 02 F6 | 	mov	arg02, local08
03760     44 03 B1 FD | 	call	#__system___string_cmp
03764     FD 2A 0A F6 | 	mov	local07, result1 wz
03768     24 00 90 AD |  if_e	jmp	#LR__0276
0376c     18 01 00 FF 
03770     33 36 06 F6 | 	mov	local13, ##@LR__4175
03774     1B 2F 02 F6 | 	mov	local09, local13
03778     14 13 02 F6 | 	mov	arg01, local06
0377c     17 15 02 F6 | 	mov	arg02, local09
03780     24 03 B1 FD | 	call	#__system___string_cmp
03784     FD 2C 0A F6 | 	mov	local08, result1 wz
03788     00 FA 05 56 |  if_ne	mov	result1, #0
0378c     C0 00 90 5D |  if_ne	jmp	#LR__0282
03790                 | LR__0276
03790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03790     18 01 00 FF 
03794     35 14 06 F6 | 	mov	arg02, ##@LR__4176
03798     14 13 02 F6 | 	mov	arg01, local06
0379c     08 03 B1 FD | 	call	#__system___string_cmp
037a0     00 FA 0D F2 | 	cmp	result1, #0 wz
037a4     38 00 90 5D |  if_ne	jmp	#LR__0277
037a8     18 15 02 F6 | 	mov	arg02, local10
037ac     01 14 86 F1 | 	sub	arg02, #1
037b0     0F 13 02 F6 | 	mov	arg01, local01
037b4     01 16 06 F6 | 	mov	arg03, #1
037b8     24 23 B1 FD | 	call	#__system__Mid_S
037bc     FD 12 02 F6 | 	mov	arg01, result1
037c0     B8 24 B1 FD | 	call	#__system__LCase_S
037c4     FD 12 02 F6 | 	mov	arg01, result1
037c8     18 01 00 FF 
037cc     37 14 06 F6 | 	mov	arg02, ##@LR__4177
037d0     D4 02 B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     70 00 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0277
037e0                 | '     if m$="." then ds+=1: if ds>1 then return false
037e0     18 01 00 FF 
037e4     39 14 06 F6 | 	mov	arg02, ##@LR__4178
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     B8 02 B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A1 |  if_e	add	local02, #1
037f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
037fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03804     18 01 00 FF 
03808     3B 14 06 F6 | 	mov	arg02, ##@LR__4179
0380c     14 13 02 F6 | 	mov	arg01, local06
03810     94 02 B1 FD | 	call	#__system___string_cmp
03814     00 FA 4D F2 | 	cmps	result1, #0 wz
03818     18 00 90 AD |  if_e	jmp	#LR__0278
0381c     18 01 00 FF 
03820     3D 14 06 F6 | 	mov	arg02, ##@LR__4180
03824     14 13 02 F6 | 	mov	arg01, local06
03828     7C 02 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 4D F2 | 	cmps	result1, #0 wz
03830     10 00 90 5D |  if_ne	jmp	#LR__0279
03834                 | LR__0278
03834     01 22 06 F1 | 	add	local03, #1
03838     02 22 56 F2 | 	cmps	local03, #2 wc
0383c     00 FA 05 36 |  if_ae	mov	result1, #0
03840     0C 00 90 3D |  if_ae	jmp	#LR__0282
03844                 | LR__0279
03844     01 30 06 F1 | 	add	local10, #1
03848     60 FE 9F FD | 	jmp	#LR__0274
0384c                 | LR__0280
0384c                 | LR__0281
0384c                 | ' return true
0384c     01 FA 65 F6 | 	neg	result1, #1
03850                 | LR__0282
03850     A7 F0 03 F6 | 	mov	ptra, fp
03854     B2 00 A0 FD | 	call	#popregs_
03858                 | _isnum_ret
03858     2D 00 64 FD | 	ret
0385c                 | 
0385c                 | '   
0385c                 | ' function isint(s as string) as boolean
0385c                 | _isint
0385c     05 4A 05 F6 | 	mov	COUNT_, #5
03860     A8 00 A0 FD | 	call	#pushregs_
03864     09 1F 02 F6 | 	mov	local01, arg01
03868     09 21 02 F6 | 	mov	local02, arg01
0386c     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
03870                 | LR__0290
03870     10 FB C9 FA | 	rdbyte	result1, local02 wz
03874     01 20 06 51 |  if_ne	add	local02, #1
03878     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
0387c                 | LR__0291
0387c     09 21 82 F1 | 	sub	local02, arg01
03880     10 FB 01 F6 | 	mov	result1, local02
03884     FD 20 0A F6 | 	mov	local02, result1 wz
03888     00 FA 05 A6 |  if_e	mov	result1, #0
0388c     18 01 90 AD |  if_e	jmp	#LR__0299
03890     0F 13 02 F6 | 	mov	arg01, local01
03894     01 14 06 F6 | 	mov	arg02, #1
03898     01 16 06 F6 | 	mov	arg03, #1
0389c     40 22 B1 FD | 	call	#__system__Mid_S
038a0     FD 22 02 F6 | 	mov	local03, result1
038a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038a4     18 01 00 FF 
038a8     3F 14 06 F6 | 	mov	arg02, ##@LR__4181
038ac     11 13 02 F6 | 	mov	arg01, local03
038b0     F4 01 B1 FD | 	call	#__system___string_cmp
038b4     00 FA 55 F2 | 	cmps	result1, #0 wc
038b8     18 00 90 CD |  if_b	jmp	#LR__0292
038bc     18 01 00 FF 
038c0     41 14 06 F6 | 	mov	arg02, ##@LR__4182
038c4     11 13 02 F6 | 	mov	arg01, local03
038c8     DC 01 B1 FD | 	call	#__system___string_cmp
038cc     01 FA 55 F2 | 	cmps	result1, #1 wc
038d0     4C 00 90 CD |  if_b	jmp	#LR__0293
038d4                 | LR__0292
038d4     18 01 00 FF 
038d8     43 14 06 F6 | 	mov	arg02, ##@LR__4183
038dc     11 13 02 F6 | 	mov	arg01, local03
038e0     C4 01 B1 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     34 00 90 AD |  if_e	jmp	#LR__0293
038ec     18 01 00 FF 
038f0     45 14 06 F6 | 	mov	arg02, ##@LR__4184
038f4     11 13 02 F6 | 	mov	arg01, local03
038f8     AC 01 B1 FD | 	call	#__system___string_cmp
038fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03900     1C 00 90 AD |  if_e	jmp	#LR__0293
03904     18 01 00 FF 
03908     47 14 06 F6 | 	mov	arg02, ##@LR__4185
0390c     11 13 02 F6 | 	mov	arg01, local03
03910     94 01 B1 FD | 	call	#__system___string_cmp
03914     00 FA 0D F2 | 	cmp	result1, #0 wz
03918     00 FA 05 56 |  if_ne	mov	result1, #0
0391c     88 00 90 5D |  if_ne	jmp	#LR__0299
03920                 | LR__0293
03920                 | ' 
03920                 | ' if l>1 then 
03920     02 20 56 F2 | 	cmps	local02, #2 wc
03924     7C 00 90 CD |  if_b	jmp	#LR__0298
03928                 | '   for i=2 to l
03928     02 24 06 F6 | 	mov	local04, #2
0392c     10 27 02 F6 | 	mov	local05, local02
03930     01 26 06 F1 | 	add	local05, #1
03934                 | LR__0294
03934     13 25 52 F2 | 	cmps	local04, local05 wc
03938     68 00 90 3D |  if_ae	jmp	#LR__0297
0393c     0F 13 02 F6 | 	mov	arg01, local01
03940     12 15 02 F6 | 	mov	arg02, local04
03944     01 16 06 F6 | 	mov	arg03, #1
03948     94 21 B1 FD | 	call	#__system__Mid_S
0394c     FD 22 02 F6 | 	mov	local03, result1
03950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03950     18 01 00 FF 
03954     49 14 06 F6 | 	mov	arg02, ##@LR__4186
03958     11 13 02 F6 | 	mov	arg01, local03
0395c     48 01 B1 FD | 	call	#__system___string_cmp
03960     00 FA 55 F2 | 	cmps	result1, #0 wc
03964     18 00 90 CD |  if_b	jmp	#LR__0295
03968     18 01 00 FF 
0396c     4B 14 06 F6 | 	mov	arg02, ##@LR__4187
03970     11 13 02 F6 | 	mov	arg01, local03
03974     30 01 B1 FD | 	call	#__system___string_cmp
03978     01 FA 55 F2 | 	cmps	result1, #1 wc
0397c     1C 00 90 CD |  if_b	jmp	#LR__0296
03980                 | LR__0295
03980     18 01 00 FF 
03984     4D 14 06 F6 | 	mov	arg02, ##@LR__4188
03988     11 13 02 F6 | 	mov	arg01, local03
0398c     18 01 B1 FD | 	call	#__system___string_cmp
03990     00 FA 0D F2 | 	cmp	result1, #0 wz
03994     00 FA 05 56 |  if_ne	mov	result1, #0
03998     0C 00 90 5D |  if_ne	jmp	#LR__0299
0399c                 | LR__0296
0399c     01 24 06 F1 | 	add	local04, #1
039a0     90 FF 9F FD | 	jmp	#LR__0294
039a4                 | LR__0297
039a4                 | LR__0298
039a4                 | ' return true
039a4     01 FA 65 F6 | 	neg	result1, #1
039a8                 | LR__0299
039a8     A7 F0 03 F6 | 	mov	ptra, fp
039ac     B2 00 A0 FD | 	call	#popregs_
039b0                 | _isint_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | ' 
039b4                 | ' function isdec(s as string) as boolean
039b4                 | _isdec
039b4     05 4A 05 F6 | 	mov	COUNT_, #5
039b8     A8 00 A0 FD | 	call	#pushregs_
039bc     09 1F 02 F6 | 	mov	local01, arg01
039c0     09 21 02 F6 | 	mov	local02, arg01
039c4     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
039c8                 | LR__0300
039c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
039cc     01 20 06 51 |  if_ne	add	local02, #1
039d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
039d4                 | LR__0301
039d4     09 21 82 F1 | 	sub	local02, arg01
039d8     10 FB 01 F6 | 	mov	result1, local02
039dc     FD 20 0A F6 | 	mov	local02, result1 wz
039e0     00 FA 05 A6 |  if_e	mov	result1, #0
039e4     80 00 90 AD |  if_e	jmp	#LR__0306
039e8                 | ' for i=1 to l
039e8     01 22 06 F6 | 	mov	local03, #1
039ec     10 25 02 F6 | 	mov	local04, local02
039f0     01 24 06 F1 | 	add	local04, #1
039f4                 | LR__0302
039f4     12 23 52 F2 | 	cmps	local03, local04 wc
039f8     68 00 90 3D |  if_ae	jmp	#LR__0305
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     11 15 02 F6 | 	mov	arg02, local03
03a04     01 16 06 F6 | 	mov	arg03, #1
03a08     D4 20 B1 FD | 	call	#__system__Mid_S
03a0c     FD 26 02 F6 | 	mov	local05, result1
03a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03a10     18 01 00 FF 
03a14     4F 14 06 F6 | 	mov	arg02, ##@LR__4189
03a18     13 13 02 F6 | 	mov	arg01, local05
03a1c     88 00 B1 FD | 	call	#__system___string_cmp
03a20     00 FA 55 F2 | 	cmps	result1, #0 wc
03a24     18 00 90 CD |  if_b	jmp	#LR__0303
03a28     18 01 00 FF 
03a2c     51 14 06 F6 | 	mov	arg02, ##@LR__4190
03a30     13 13 02 F6 | 	mov	arg01, local05
03a34     70 00 B1 FD | 	call	#__system___string_cmp
03a38     01 FA 55 F2 | 	cmps	result1, #1 wc
03a3c     1C 00 90 CD |  if_b	jmp	#LR__0304
03a40                 | LR__0303
03a40     18 01 00 FF 
03a44     53 14 06 F6 | 	mov	arg02, ##@LR__4191
03a48     13 13 02 F6 | 	mov	arg01, local05
03a4c     58 00 B1 FD | 	call	#__system___string_cmp
03a50     00 FA 0D F2 | 	cmp	result1, #0 wz
03a54     00 FA 05 56 |  if_ne	mov	result1, #0
03a58     0C 00 90 5D |  if_ne	jmp	#LR__0306
03a5c                 | LR__0304
03a5c     01 22 06 F1 | 	add	local03, #1
03a60     90 FF 9F FD | 	jmp	#LR__0302
03a64                 | LR__0305
03a64                 | ' return true
03a64     01 FA 65 F6 | 	neg	result1, #1
03a68                 | LR__0306
03a68     A7 F0 03 F6 | 	mov	ptra, fp
03a6c     B2 00 A0 FD | 	call	#popregs_
03a70                 | _isdec_ret
03a70     2D 00 64 FD | 	ret
03a74                 | 
03a74                 | ' 
03a74                 | ' function isstring(s as string) as boolean
03a74                 | _isstring
03a74     01 4A 05 F6 | 	mov	COUNT_, #1
03a78     A8 00 A0 FD | 	call	#pushregs_
03a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03a7c     09 1F 02 F6 | 	mov	local01, arg01
03a80     01 14 06 F6 | 	mov	arg02, #1
03a84     40 1F B1 FD | 	call	#__system__Left_S
03a88     FD 12 02 F6 | 	mov	arg01, result1
03a8c     18 01 00 FF 
03a90     55 14 06 F6 | 	mov	arg02, ##@LR__4192
03a94     10 00 B1 FD | 	call	#__system___string_cmp
03a98     00 FA 4D F2 | 	cmps	result1, #0 wz
03a9c     28 00 90 5D |  if_ne	jmp	#LR__0310
03aa0     0F 13 02 F6 | 	mov	arg01, local01
03aa4     01 14 06 F6 | 	mov	arg02, #1
03aa8     A4 1F B1 FD | 	call	#__system__Right_S
03aac     FD 12 02 F6 | 	mov	arg01, result1
03ab0     18 01 00 FF 
03ab4     57 14 06 F6 | 	mov	arg02, ##@LR__4193
03ab8     EC FF B0 FD | 	call	#__system___string_cmp
03abc     00 FA 4D F2 | 	cmps	result1, #0 wz
03ac0     01 FA 65 A6 |  if_e	neg	result1, #1
03ac4     04 00 90 AD |  if_e	jmp	#LR__0311
03ac8                 | LR__0310
03ac8     00 FA 05 F6 | 	mov	result1, #0
03acc                 | LR__0311
03acc     A7 F0 03 F6 | 	mov	ptra, fp
03ad0     B2 00 A0 FD | 	call	#popregs_
03ad4                 | _isstring_ret
03ad4     2D 00 64 FD | 	ret
03ad8                 | 
03ad8                 | ' 
03ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '----- delete a line from a program
03ad8                 | ' 
03ad8                 | ' function deleteline(aline as ulong) as integer
03ad8                 | _deleteline
03ad8     03 4A 05 F6 | 	mov	COUNT_, #3
03adc     A8 00 A0 FD | 	call	#pushregs_
03ae0     2C F0 07 F1 | 	add	ptra, #44
03ae4     04 4E 05 F1 | 	add	fp, #4
03ae8     A7 12 62 FC | 	wrlong	arg01, fp
03aec     41 00 00 FF 
03af0     48 E4 05 F1 | 	add	objptr, ##33352
03af4     F2 1E 02 FB | 	rdlong	local01, objptr
03af8     0C 4E 05 F1 | 	add	fp, #12
03afc     A7 1E 62 FC | 	wrlong	local01, fp
03b00     10 4E 85 F1 | 	sub	fp, #16
03b04                 | ' 
03b04                 | ' 
03b04                 | ' searchptr=programstart
03b04                 | ' 
03b04                 | ' do
03b04     35 00 00 FF 
03b08     88 E5 85 F1 | 	sub	objptr, ##27528
03b0c                 | LR__0320
03b0c     14 4E 05 F1 | 	add	fp, #20
03b10     A7 12 02 F6 | 	mov	arg01, fp
03b14     04 4E 85 F1 | 	sub	fp, #4
03b18     A7 14 02 FB | 	rdlong	arg02, fp
03b1c     10 4E 85 F1 | 	sub	fp, #16
03b20     18 16 06 F6 | 	mov	arg03, #24
03b24     6C F4 B0 FD | 	call	#_psram_spin2_read1
03b28     10 4E 05 F1 | 	add	fp, #16
03b2c     A7 1E 02 FB | 	rdlong	local01, fp
03b30     08 4E 85 F1 | 	sub	fp, #8
03b34     A7 1E 62 FC | 	wrlong	local01, fp
03b38     20 4E 05 F1 | 	add	fp, #32
03b3c     A7 1E 02 FB | 	rdlong	local01, fp
03b40     18 4E 85 F1 | 	sub	fp, #24
03b44     A7 1E 62 FC | 	wrlong	local01, fp
03b48     04 4E 05 F1 | 	add	fp, #4
03b4c     A7 1E 02 FB | 	rdlong	local01, fp
03b50     10 4E 85 F1 | 	sub	fp, #16
03b54     A7 16 02 FB | 	rdlong	arg03, fp
03b58     04 4E 85 F1 | 	sub	fp, #4
03b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03b60     28 4E 05 C1 |  if_b	add	fp, #40
03b64     A7 20 02 CB |  if_b	rdlong	local02, fp
03b68     28 4E 85 C1 |  if_b	sub	fp, #40
03b6c     FF FF 3F CF 
03b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03b78     0B 00 00 FF 
03b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
03b80                 | ' 
03b80                 | ' 
03b80                 | ' if header(0)<>aline then return -1
03b80     14 4E 05 F1 | 	add	fp, #20
03b84     A7 1E 02 FB | 	rdlong	local01, fp
03b88     10 4E 85 F1 | 	sub	fp, #16
03b8c     A7 22 02 FB | 	rdlong	local03, fp
03b90     04 4E 85 F1 | 	sub	fp, #4
03b94     11 1F 0A F2 | 	cmp	local01, local03 wz
03b98     01 FA 65 56 |  if_ne	neg	result1, #1
03b9c     4C 03 90 5D |  if_ne	jmp	#LR__0326
03ba0     08 4E 05 F1 | 	add	fp, #8
03ba4     A7 12 02 FB | 	rdlong	arg01, fp
03ba8     08 4E 85 F1 | 	sub	fp, #8
03bac     01 14 66 F6 | 	neg	arg02, #1
03bb0     01 16 06 F6 | 	mov	arg03, #1
03bb4     00 18 06 F6 | 	mov	arg04, #0
03bb8     0B 00 00 FF 
03bbc     C0 E4 05 F1 | 	add	objptr, ##5824
03bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
03bc0     04 1A 06 F6 | 	mov	arg05, #4
03bc4     04 F5 B0 FD | 	call	#_psram_spin2_fill
03bc8     0B 00 00 FF 
03bcc     C0 E4 85 F1 | 	sub	objptr, ##5824
03bd0                 | ' 
03bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03bd0                 | ' 
03bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03bd0     28 4E 05 F1 | 	add	fp, #40
03bd4     A7 1E 02 FB | 	rdlong	local01, fp
03bd8     28 4E 85 F1 | 	sub	fp, #40
03bdc     FF FF 3F FF 
03be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03be4     24 4E 05 A1 |  if_e	add	fp, #36
03be8     A7 22 02 AB |  if_e	rdlong	local03, fp
03bec     24 4E 85 A1 |  if_e	sub	fp, #36
03bf0     FF FF 7F AF 
03bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03bf8     90 00 90 5D |  if_ne	jmp	#LR__0321
03bfc     41 00 00 FF 
03c00     48 E4 05 F1 | 	add	objptr, ##33352
03c04     F2 00 68 FC | 	wrlong	#0, objptr
03c08     07 00 00 FF 
03c0c     28 E4 85 F1 | 	sub	objptr, ##3624
03c10     F2 00 68 FC | 	wrlong	#0, objptr
03c14     07 00 00 FF 
03c18     2C E4 05 F1 | 	add	objptr, ##3628
03c1c     F2 00 68 FC | 	wrlong	#0, objptr
03c20     04 E4 05 F1 | 	add	objptr, #4
03c24     FF FF FF FF 
03c28     F2 FE 6B FC | 	wrlong	##-1, objptr
03c2c     00 12 06 F6 | 	mov	arg01, #0
03c30     10 E4 85 F1 | 	sub	objptr, #16
03c34     F2 00 68 FC | 	wrlong	#0, objptr
03c38     01 14 66 F6 | 	neg	arg02, #1
03c3c     01 16 06 F6 | 	mov	arg03, #1
03c40     00 18 06 F6 | 	mov	arg04, #0
03c44     35 00 00 FF 
03c48     80 E5 85 F1 | 	sub	objptr, ##27520
03c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c4c     04 1A 06 F6 | 	mov	arg05, #4
03c50     78 F4 B0 FD | 	call	#_psram_spin2_fill
03c54     10 12 06 F6 | 	mov	arg01, #16
03c58     01 14 66 F6 | 	neg	arg02, #1
03c5c     01 16 06 F6 | 	mov	arg03, #1
03c60     00 18 06 F6 | 	mov	arg04, #0
03c64                 | '     return fill(addr, pattern, count, listPtr, 4)
03c64     04 1A 06 F6 | 	mov	arg05, #4
03c68     60 F4 B0 FD | 	call	#_psram_spin2_fill
03c6c     14 12 06 F6 | 	mov	arg01, #20
03c70     1E 14 CE F9 | 	bmask	arg02, #30
03c74     01 16 06 F6 | 	mov	arg03, #1
03c78     00 18 06 F6 | 	mov	arg04, #0
03c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c7c     04 1A 06 F6 | 	mov	arg05, #4
03c80     48 F4 B0 FD | 	call	#_psram_spin2_fill
03c84     0B 00 00 FF 
03c88     C0 E4 85 F1 | 	sub	objptr, ##5824
03c8c                 | LR__0321
03c8c                 | ' 
03c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03c8c     28 4E 05 F1 | 	add	fp, #40
03c90     A7 1E 02 FB | 	rdlong	local01, fp
03c94     28 4E 85 F1 | 	sub	fp, #40
03c98     FF FF 3F FF 
03c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ca0     88 00 90 5D |  if_ne	jmp	#LR__0322
03ca4     24 4E 05 F1 | 	add	fp, #36
03ca8     A7 22 02 FB | 	rdlong	local03, fp
03cac     24 4E 85 F1 | 	sub	fp, #36
03cb0     FF FF 7F FF 
03cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03cb8     70 00 90 AD |  if_e	jmp	#LR__0322
03cbc     24 4E 05 F1 | 	add	fp, #36
03cc0     A7 12 02 FB | 	rdlong	arg01, fp
03cc4     24 4E 85 F1 | 	sub	fp, #36
03cc8     14 12 06 F1 | 	add	arg01, #20
03ccc     1E 14 CE F9 | 	bmask	arg02, #30
03cd0     01 16 06 F6 | 	mov	arg03, #1
03cd4     00 18 06 F6 | 	mov	arg04, #0
03cd8     0B 00 00 FF 
03cdc     C0 E4 05 F1 | 	add	objptr, ##5824
03ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ce0     04 1A 06 F6 | 	mov	arg05, #4
03ce4     E4 F3 B0 FD | 	call	#_psram_spin2_fill
03ce8     24 4E 05 F1 | 	add	fp, #36
03cec     A7 1E 02 FB | 	rdlong	local01, fp
03cf0     35 00 00 FF 
03cf4     90 E5 05 F1 | 	add	objptr, ##27536
03cf8     F2 1E 62 FC | 	wrlong	local01, objptr
03cfc     41 00 00 FF 
03d00     50 E4 85 F1 | 	sub	objptr, ##33360
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     24 4E 85 F1 | 	sub	fp, #36
03d0c     38 CA B0 FD | 	call	#_pslpeek
03d10     41 00 00 FF 
03d14     4C E4 05 F1 | 	add	objptr, ##33356
03d18     F2 FA 61 FC | 	wrlong	result1, objptr
03d1c     41 00 00 FF 
03d20     4C E4 85 F1 | 	sub	objptr, ##33356
03d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03d24                 | '   lastline=pslpeek(header(4))
03d24                 | '   return 0
03d24     00 FA 05 F6 | 	mov	result1, #0
03d28     C0 01 90 FD | 	jmp	#LR__0326
03d2c                 | LR__0322
03d2c                 | ' 
03d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03d2c     28 4E 05 F1 | 	add	fp, #40
03d30     A7 1E 02 FB | 	rdlong	local01, fp
03d34     28 4E 85 F1 | 	sub	fp, #40
03d38     FF FF 3F FF 
03d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d40     6C 00 90 AD |  if_e	jmp	#LR__0323
03d44     24 4E 05 F1 | 	add	fp, #36
03d48     A7 22 02 FB | 	rdlong	local03, fp
03d4c     24 4E 85 F1 | 	sub	fp, #36
03d50     FF FF 7F FF 
03d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03d58     54 00 90 5D |  if_ne	jmp	#LR__0323
03d5c     28 4E 05 F1 | 	add	fp, #40
03d60     A7 12 02 FB | 	rdlong	arg01, fp
03d64     28 4E 85 F1 | 	sub	fp, #40
03d68     10 12 06 F1 | 	add	arg01, #16
03d6c     01 14 66 F6 | 	neg	arg02, #1
03d70     01 16 06 F6 | 	mov	arg03, #1
03d74     00 18 06 F6 | 	mov	arg04, #0
03d78     0B 00 00 FF 
03d7c     C0 E4 05 F1 | 	add	objptr, ##5824
03d80                 | '     return fill(addr, pattern, count, listPtr, 4)
03d80     04 1A 06 F6 | 	mov	arg05, #4
03d84     44 F3 B0 FD | 	call	#_psram_spin2_fill
03d88     28 4E 05 F1 | 	add	fp, #40
03d8c     A7 1E 02 FB | 	rdlong	local01, fp
03d90     28 4E 85 F1 | 	sub	fp, #40
03d94     35 00 00 FF 
03d98     88 E5 05 F1 | 	add	objptr, ##27528
03d9c     F2 1E 62 FC | 	wrlong	local01, objptr
03da0     41 00 00 FF 
03da4     48 E4 85 F1 | 	sub	objptr, ##33352
03da8                 | ' '   print "deleted first line"
03da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03da8                 | '   return 0
03da8     00 FA 05 F6 | 	mov	result1, #0
03dac     3C 01 90 FD | 	jmp	#LR__0326
03db0                 | LR__0323
03db0                 | ' 
03db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03db0     28 4E 05 F1 | 	add	fp, #40
03db4     A7 1E 02 FB | 	rdlong	local01, fp
03db8     28 4E 85 F1 | 	sub	fp, #40
03dbc     FF FF 3F FF 
03dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03dc4     24 4E 05 51 |  if_ne	add	fp, #36
03dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
03dcc     24 4E 85 51 |  if_ne	sub	fp, #36
03dd0     FF FF 7F 5F 
03dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03dd8     68 00 90 AD |  if_e	jmp	#LR__0324
03ddc     28 4E 05 F1 | 	add	fp, #40
03de0     A7 12 02 FB | 	rdlong	arg01, fp
03de4     10 12 06 F1 | 	add	arg01, #16
03de8     04 4E 85 F1 | 	sub	fp, #4
03dec     A7 14 02 FB | 	rdlong	arg02, fp
03df0     24 4E 85 F1 | 	sub	fp, #36
03df4     01 16 06 F6 | 	mov	arg03, #1
03df8     00 18 06 F6 | 	mov	arg04, #0
03dfc     0B 00 00 FF 
03e00     C0 E4 05 F1 | 	add	objptr, ##5824
03e04                 | '     return fill(addr, pattern, count, listPtr, 4)
03e04     04 1A 06 F6 | 	mov	arg05, #4
03e08     C0 F2 B0 FD | 	call	#_psram_spin2_fill
03e0c     24 4E 05 F1 | 	add	fp, #36
03e10     A7 12 02 FB | 	rdlong	arg01, fp
03e14     14 12 06 F1 | 	add	arg01, #20
03e18     04 4E 05 F1 | 	add	fp, #4
03e1c     A7 14 02 FB | 	rdlong	arg02, fp
03e20     28 4E 85 F1 | 	sub	fp, #40
03e24     01 16 06 F6 | 	mov	arg03, #1
03e28     00 18 06 F6 | 	mov	arg04, #0
03e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
03e2c     04 1A 06 F6 | 	mov	arg05, #4
03e30     98 F2 B0 FD | 	call	#_psram_spin2_fill
03e34     0B 00 00 FF 
03e38     C0 E4 85 F1 | 	sub	objptr, ##5824
03e3c                 | '    pslpoke(header(5)+16,header(4))  
03e3c                 | '    pslpoke(header(4)+20, header(5))
03e3c                 | '    return 0
03e3c     00 FA 05 F6 | 	mov	result1, #0
03e40     A8 00 90 FD | 	jmp	#LR__0326
03e44                 | LR__0324
03e44     10 4E 05 F1 | 	add	fp, #16
03e48     A7 1E 02 FB | 	rdlong	local01, fp
03e4c     08 4E 85 F1 | 	sub	fp, #8
03e50     A7 1E 62 FC | 	wrlong	local01, fp
03e54     41 00 00 FF 
03e58     48 E4 05 F1 | 	add	objptr, ##33352
03e5c     F2 1E 02 FB | 	rdlong	local01, objptr
03e60     08 4E 05 F1 | 	add	fp, #8
03e64     A7 1E 62 FC | 	wrlong	local01, fp
03e68     10 4E 85 F1 | 	sub	fp, #16
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03e6c                 | ' 
03e6c                 | ' lineptr2=searchptr
03e6c                 | ' searchptr=programstart
03e6c                 | ' 
03e6c                 | ' do
03e6c     35 00 00 FF 
03e70     88 E5 85 F1 | 	sub	objptr, ##27528
03e74                 | LR__0325
03e74     14 4E 05 F1 | 	add	fp, #20
03e78     A7 12 02 F6 | 	mov	arg01, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     A7 14 02 FB | 	rdlong	arg02, fp
03e84     10 4E 85 F1 | 	sub	fp, #16
03e88     18 16 06 F6 | 	mov	arg03, #24
03e8c     04 F1 B0 FD | 	call	#_psram_spin2_read1
03e90     10 4E 05 F1 | 	add	fp, #16
03e94     A7 1E 02 FB | 	rdlong	local01, fp
03e98     08 4E 85 F1 | 	sub	fp, #8
03e9c     A7 1E 62 FC | 	wrlong	local01, fp
03ea0     20 4E 05 F1 | 	add	fp, #32
03ea4     A7 1E 02 FB | 	rdlong	local01, fp
03ea8     18 4E 85 F1 | 	sub	fp, #24
03eac     A7 1E 62 FC | 	wrlong	local01, fp
03eb0     04 4E 05 F1 | 	add	fp, #4
03eb4     A7 1E 02 FB | 	rdlong	local01, fp
03eb8     10 4E 85 F1 | 	sub	fp, #16
03ebc     A7 22 02 FB | 	rdlong	local03, fp
03ec0     04 4E 85 F1 | 	sub	fp, #4
03ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
03ec8     28 4E 05 C1 |  if_b	add	fp, #40
03ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
03ed0     28 4E 85 C1 |  if_b	sub	fp, #40
03ed4     FF FF 3F CF 
03ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
03ee0     0B 00 00 FF 
03ee4     C0 E4 85 F1 | 	sub	objptr, ##5824
03ee8     00 FA 05 F6 | 	mov	result1, #0
03eec                 | LR__0326
03eec     A7 F0 03 F6 | 	mov	ptra, fp
03ef0     B2 00 A0 FD | 	call	#popregs_
03ef4                 | _deleteline_ret
03ef4     2D 00 64 FD | 	ret
03ef8                 | 
03ef8                 | ' 
03ef8                 | ' sub save_line
03ef8                 | _save_line
03ef8     03 4A 05 F6 | 	mov	COUNT_, #3
03efc     A8 00 A0 FD | 	call	#pushregs_
03f00     41 00 00 FF 
03f04     40 E4 05 F1 | 	add	objptr, ##33344
03f08     F2 16 02 FB | 	rdlong	arg03, objptr
03f0c     01 16 06 F1 | 	add	arg03, #1
03f10     05 00 00 FF 
03f14     18 E4 85 F1 | 	sub	objptr, ##2584
03f18     F2 14 02 FB | 	rdlong	arg02, objptr
03f1c     0B 15 02 FD | 	qmul	arg02, arg03
03f20     0E 00 00 FF 
03f24     44 E4 85 F1 | 	sub	objptr, ##7236
03f28     F2 12 02 FB | 	rdlong	arg01, objptr
03f2c     2D 00 00 FF 
03f30     E4 E5 85 F1 | 	sub	objptr, ##23524
03f34     09 1F 02 F6 | 	mov	local01, arg01
03f38     18 20 62 FD | 	getqx	local02
03f3c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
03f40                 | LR__0330
03f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
03f44     01 1E 06 51 |  if_ne	add	local01, #1
03f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
03f4c                 | LR__0331
03f4c     09 1F 82 F1 | 	sub	local01, arg01
03f50     03 1E CE F7 | 	test	local01, #3 wz
03f54     02 1E 46 50 |  if_ne	shr	local01, #2
03f58     01 1E 06 51 |  if_ne	add	local01, #1
03f5c     02 1E 66 50 |  if_ne	shl	local01, #2
03f60     10 23 02 F6 | 	mov	local03, local02
03f64     0F 23 02 F1 | 	add	local03, local01
03f68     3A 00 00 FF 
03f6c     20 E4 05 F1 | 	add	objptr, ##29728
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     10 17 02 F1 | 	add	arg03, local02
03f78     04 00 00 FF 
03f7c     28 E4 05 F1 | 	add	objptr, ##2088
03f80     F2 16 62 FC | 	wrlong	arg03, objptr
03f84     04 E4 05 F1 | 	add	objptr, #4
03f88     F2 1E 62 FC | 	wrlong	local01, objptr
03f8c     0C E4 85 F1 | 	sub	objptr, #12
03f90     F2 12 02 F6 | 	mov	arg01, objptr
03f94     04 00 00 FF 
03f98     20 E4 85 F1 | 	sub	objptr, ##2080
03f9c     F2 14 02 FB | 	rdlong	arg02, objptr
03fa0     10 17 02 F6 | 	mov	arg03, local02
03fa4     2E 00 00 FF 
03fa8     60 E5 85 F1 | 	sub	objptr, ##23904
03fac     80 F0 B0 FD | 	call	#_psram_spin2_write
03fb0     22 00 00 FF 
03fb4     24 E5 05 F1 | 	add	objptr, ##17700
03fb8     F2 12 02 FB | 	rdlong	arg01, objptr
03fbc     0C 00 00 FF 
03fc0     3C E4 05 F1 | 	add	objptr, ##6204
03fc4     F2 14 02 FB | 	rdlong	arg02, objptr
03fc8     10 15 02 F1 | 	add	arg02, local02
03fcc     0F 17 02 F6 | 	mov	arg03, local01
03fd0     2E 00 00 FF 
03fd4     60 E5 85 F1 | 	sub	objptr, ##23904
03fd8     54 F0 B0 FD | 	call	#_psram_spin2_write
03fdc     2E 00 00 FF 
03fe0     60 E5 05 F1 | 	add	objptr, ##23904
03fe4     F2 1E 02 FB | 	rdlong	local01, objptr
03fe8     11 1F 02 F1 | 	add	local01, local03
03fec     F2 1E 62 FC | 	wrlong	local01, objptr
03ff0     3A 00 00 FF 
03ff4     20 E4 85 F1 | 	sub	objptr, ##29728
03ff8     A7 F0 03 F6 | 	mov	ptra, fp
03ffc     B2 00 A0 FD | 	call	#popregs_
04000                 | _save_line_ret
04000     2D 00 64 FD | 	ret
04004                 | 
04004                 | ' 
04004                 | ' 
04004                 | ' function insertline(aline as ulong) as integer
04004                 | _insertline
04004     02 4A 05 F6 | 	mov	COUNT_, #2
04008     A8 00 A0 FD | 	call	#pushregs_
0400c     28 F0 07 F1 | 	add	ptra, #40
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 12 62 FC | 	wrlong	arg01, fp
04018     41 00 00 FF 
0401c     48 E4 05 F1 | 	add	objptr, ##33352
04020     F2 1E 02 FB | 	rdlong	local01, objptr
04024     04 4E 05 F1 | 	add	fp, #4
04028     A7 1E 62 FC | 	wrlong	local01, fp
0402c     08 4E 85 F1 | 	sub	fp, #8
04030                 | ' 
04030                 | ' do
04030     35 00 00 FF 
04034     88 E5 85 F1 | 	sub	objptr, ##27528
04038                 | LR__0340
04038     10 4E 05 F1 | 	add	fp, #16
0403c     A7 12 02 F6 | 	mov	arg01, fp
04040     08 4E 85 F1 | 	sub	fp, #8
04044     A7 14 02 FB | 	rdlong	arg02, fp
04048     08 4E 85 F1 | 	sub	fp, #8
0404c     18 16 06 F6 | 	mov	arg03, #24
04050     40 EF B0 FD | 	call	#_psram_spin2_read1
04054     08 4E 05 F1 | 	add	fp, #8
04058     A7 1E 02 FB | 	rdlong	local01, fp
0405c     04 4E 05 F1 | 	add	fp, #4
04060     A7 1E 62 FC | 	wrlong	local01, fp
04064     18 4E 05 F1 | 	add	fp, #24
04068     A7 1E 02 FB | 	rdlong	local01, fp
0406c     1C 4E 85 F1 | 	sub	fp, #28
04070     A7 1E 62 FC | 	wrlong	local01, fp
04074     08 4E 05 F1 | 	add	fp, #8
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     0C 4E 85 F1 | 	sub	fp, #12
04080     A7 16 02 FB | 	rdlong	arg03, fp
04084     04 4E 85 F1 | 	sub	fp, #4
04088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0408c     24 4E 05 C1 |  if_b	add	fp, #36
04090     A7 20 02 CB |  if_b	rdlong	local02, fp
04094     24 4E 85 C1 |  if_b	sub	fp, #36
04098     FF FF 3F CF 
0409c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
040a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
040a4     0B 00 00 FF 
040a8     C0 E4 85 F1 | 	sub	objptr, ##5824
040ac                 | ' 
040ac                 | ' if header(0)=aline then return -1 ' delete it first
040ac     10 4E 05 F1 | 	add	fp, #16
040b0     A7 1E 02 FB | 	rdlong	local01, fp
040b4     0C 4E 85 F1 | 	sub	fp, #12
040b8     A7 20 02 FB | 	rdlong	local02, fp
040bc     04 4E 85 F1 | 	sub	fp, #4
040c0     10 1F 0A F2 | 	cmp	local01, local02 wz
040c4     01 FA 65 A6 |  if_e	neg	result1, #1
040c8     74 01 90 AD |  if_e	jmp	#LR__0343
040cc                 | ' if header(0)<aline then return -2 ' end of program reached
040cc     10 4E 05 F1 | 	add	fp, #16
040d0     A7 1E 02 FB | 	rdlong	local01, fp
040d4     0C 4E 85 F1 | 	sub	fp, #12
040d8     A7 16 02 FB | 	rdlong	arg03, fp
040dc     04 4E 85 F1 | 	sub	fp, #4
040e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
040e4     02 FA 65 C6 |  if_b	neg	result1, #2
040e8     54 01 90 CD |  if_b	jmp	#LR__0343
040ec                 | ' 
040ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
040ec     20 4E 05 F1 | 	add	fp, #32
040f0     A7 1E 02 FB | 	rdlong	local01, fp
040f4     20 4E 85 F1 | 	sub	fp, #32
040f8     FF FF 7F FF 
040fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04100     84 00 90 5D |  if_ne	jmp	#LR__0341
04104     3A 00 00 FF 
04108     20 E4 05 F1 | 	add	objptr, ##29728
0410c     F2 1E 02 FB | 	rdlong	local01, objptr
04110     07 00 00 FF 
04114     28 E4 05 F1 | 	add	objptr, ##3624
04118     F2 1E 62 FC | 	wrlong	local01, objptr
0411c     0C 4E 05 F1 | 	add	fp, #12
04120     A7 12 02 FB | 	rdlong	arg01, fp
04124     0C 4E 85 F1 | 	sub	fp, #12
04128     10 12 06 F1 | 	add	arg01, #16
0412c     07 00 00 FF 
04130     28 E4 85 F1 | 	sub	objptr, ##3624
04134     F2 14 02 FB | 	rdlong	arg02, objptr
04138     01 16 06 F6 | 	mov	arg03, #1
0413c     00 18 06 F6 | 	mov	arg04, #0
04140     2E 00 00 FF 
04144     60 E5 85 F1 | 	sub	objptr, ##23904
04148                 | '     return fill(addr, pattern, count, listPtr, 4)
04148     04 1A 06 F6 | 	mov	arg05, #4
0414c     7C EF B0 FD | 	call	#_psram_spin2_fill
04150     32 00 00 FF 
04154     90 E5 05 F1 | 	add	objptr, ##26000
04158     FF FF FF FF 
0415c     F2 FE 6B FC | 	wrlong	##-1, objptr
04160     0C 4E 05 F1 | 	add	fp, #12
04164     A7 1E 02 FB | 	rdlong	local01, fp
04168     0C 4E 85 F1 | 	sub	fp, #12
0416c     04 E4 05 F1 | 	add	objptr, #4
04170     F2 1E 62 FC | 	wrlong	local01, objptr
04174     3E 00 00 FF 
04178     54 E4 85 F1 | 	sub	objptr, ##31828
0417c     78 FD BF FD | 	call	#_save_line
04180                 | '   programstart=programptr
04180                 | '   pslpoke(lineptr2+16,programptr)
04180                 | '   ucompiledline(4)=$FFFF_FFFF
04180                 | '   ucompiledline(5)=lineptr2
04180                 | '   save_line
04180                 | '   return 0
04180     00 FA 05 F6 | 	mov	result1, #0
04184     B8 00 90 FD | 	jmp	#LR__0343
04188                 | LR__0341
04188                 | ' 
04188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04188     20 4E 05 F1 | 	add	fp, #32
0418c     A7 1E 02 FB | 	rdlong	local01, fp
04190     20 4E 85 F1 | 	sub	fp, #32
04194     FF FF 7F FF 
04198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0419c     9C 00 90 AD |  if_e	jmp	#LR__0342
041a0     20 4E 05 F1 | 	add	fp, #32
041a4     A7 1E 02 FB | 	rdlong	local01, fp
041a8     3E 00 00 FF 
041ac     50 E4 05 F1 | 	add	objptr, ##31824
041b0     F2 1E 62 FC | 	wrlong	local01, objptr
041b4     14 4E 85 F1 | 	sub	fp, #20
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 E4 05 F1 | 	add	objptr, #4
041c0     F2 1E 62 FC | 	wrlong	local01, objptr
041c4     A7 12 02 FB | 	rdlong	arg01, fp
041c8     0C 4E 85 F1 | 	sub	fp, #12
041cc     10 12 06 F1 | 	add	arg01, #16
041d0     04 00 00 FF 
041d4     34 E4 85 F1 | 	sub	objptr, ##2100
041d8     F2 14 02 FB | 	rdlong	arg02, objptr
041dc     01 16 06 F6 | 	mov	arg03, #1
041e0     00 18 06 F6 | 	mov	arg04, #0
041e4     2E 00 00 FF 
041e8     60 E5 85 F1 | 	sub	objptr, ##23904
041ec                 | '     return fill(addr, pattern, count, listPtr, 4)
041ec     04 1A 06 F6 | 	mov	arg05, #4
041f0     D8 EE B0 FD | 	call	#_psram_spin2_fill
041f4     20 4E 05 F1 | 	add	fp, #32
041f8     A7 12 02 FB | 	rdlong	arg01, fp
041fc     20 4E 85 F1 | 	sub	fp, #32
04200     14 12 06 F1 | 	add	arg01, #20
04204     2E 00 00 FF 
04208     60 E5 05 F1 | 	add	objptr, ##23904
0420c     F2 14 02 FB | 	rdlong	arg02, objptr
04210     01 16 06 F6 | 	mov	arg03, #1
04214     00 18 06 F6 | 	mov	arg04, #0
04218     2E 00 00 FF 
0421c     60 E5 85 F1 | 	sub	objptr, ##23904
04220                 | '     return fill(addr, pattern, count, listPtr, 4)
04220     04 1A 06 F6 | 	mov	arg05, #4
04224     A4 EE B0 FD | 	call	#_psram_spin2_fill
04228     0B 00 00 FF 
0422c     C0 E4 85 F1 | 	sub	objptr, ##5824
04230     C4 FC BF FD | 	call	#_save_line
04234                 | '   ucompiledline(4)=header(4)
04234                 | '   ucompiledline(5)=lineptr2
04234                 | '   pslpoke(lineptr2+16,programptr)
04234                 | '   pslpoke(header(4)+20,programptr)
04234                 | '   save_line
04234                 | '   return 0
04234     00 FA 05 F6 | 	mov	result1, #0
04238     04 00 90 FD | 	jmp	#LR__0343
0423c                 | LR__0342
0423c     00 FA 05 F6 | 	mov	result1, #0
04240                 | LR__0343
04240     A7 F0 03 F6 | 	mov	ptra, fp
04244     B2 00 A0 FD | 	call	#popregs_
04248                 | _insertline_ret
04248     2D 00 64 FD | 	ret
0424c                 | 
0424c                 | ' 
0424c                 | ' sub add_line_at_end(aline) 
0424c                 | _add_line_at_end
0424c     41 00 00 FF 
04250     4C E4 05 F1 | 	add	objptr, ##33356
04254     F2 12 62 FC | 	wrlong	arg01, objptr
04258     04 E4 05 F1 | 	add	objptr, #4
0425c     F2 14 02 FB | 	rdlong	arg02, objptr
04260     03 00 00 FF 
04264     00 E4 85 F1 | 	sub	objptr, ##1536
04268     F2 14 62 FC | 	wrlong	arg02, objptr
0426c     03 00 00 FF 
04270     00 E4 05 F1 | 	add	objptr, ##1536
04274     F2 12 02 FB | 	rdlong	arg01, objptr
04278     14 12 06 F1 | 	add	arg01, #20
0427c     07 00 00 FF 
04280     30 E4 85 F1 | 	sub	objptr, ##3632
04284     F2 14 02 FB | 	rdlong	arg02, objptr
04288     01 16 06 F6 | 	mov	arg03, #1
0428c     00 18 06 F6 | 	mov	arg04, #0
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298                 | '     return fill(addr, pattern, count, listPtr, 4)
04298     04 1A 06 F6 | 	mov	arg05, #4
0429c     2C EE B0 FD | 	call	#_psram_spin2_fill
042a0     2E 00 00 FF 
042a4     60 E5 05 F1 | 	add	objptr, ##23904
042a8     F2 14 02 FB | 	rdlong	arg02, objptr
042ac     07 00 00 FF 
042b0     30 E4 05 F1 | 	add	objptr, ##3632
042b4     F2 14 62 FC | 	wrlong	arg02, objptr
042b8     02 00 00 FF 
042bc     FC E5 85 F1 | 	sub	objptr, ##1532
042c0     FF FF BF FF 
042c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
042c8                 | ' 
042c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
042c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
042c8     04 00 00 FF 
042cc     34 E4 85 F1 | 	sub	objptr, ##2100
042d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
042d4     3A 00 00 FF 
042d8     20 E4 85 F1 | 	sub	objptr, ##29728
042dc     3E 00 00 AF 
042e0     50 E4 05 A1 |  if_e	add	objptr, ##31824
042e4     FF FF FF AF 
042e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
042ec     3E 00 00 AF 
042f0     50 E4 85 A1 |  if_e	sub	objptr, ##31824
042f4     00 FC BF FD | 	call	#_save_line
042f8     3A 00 00 FF 
042fc     20 E4 05 F1 | 	add	objptr, ##29728
04300     F2 12 02 FB | 	rdlong	arg01, objptr
04304     01 14 66 F6 | 	neg	arg02, #1
04308     01 16 06 F6 | 	mov	arg03, #1
0430c     00 18 06 F6 | 	mov	arg04, #0
04310     2E 00 00 FF 
04314     60 E5 85 F1 | 	sub	objptr, ##23904
04318                 | '     return fill(addr, pattern, count, listPtr, 4)
04318     04 1A 06 F6 | 	mov	arg05, #4
0431c     AC ED B0 FD | 	call	#_psram_spin2_fill
04320     0B 00 00 FF 
04324     C0 E4 85 F1 | 	sub	objptr, ##5824
04328                 | _add_line_at_end_ret
04328     2D 00 64 FD | 	ret
0432c                 | 
0432c                 | ' 
0432c                 | ' function compile_immediate(linetype as ulong) as integer
0432c                 | _compile_immediate
0432c     0A 4A 05 F6 | 	mov	COUNT_, #10
04330     A8 00 A0 FD | 	call	#pushregs_
04334                 | _compile_immediate_enter
04334     09 25 0A F6 | 	mov	local04, arg01 wz
04338     00 26 06 F6 | 	mov	local05, #0
0433c     00 28 06 F6 | 	mov	local06, #0
04340                 | ' 
04340                 | ' ' linetype=cont+1, linetype=0 immediate
04340                 | ' '  : 1: this is the first part of the line that will continue
04340                 | ' ' 2 - this is the continuation of the line
04340                 | ' ' 3 - this is the last continued line
04340                 | ' ' 4 - this is the one and only part
04340                 | ' 
04340                 | ' err=0
04340                 | ' cmd=0
04340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04340     2C 00 90 5D |  if_ne	jmp	#LR__0350
04344     2B 00 00 FF 
04348     D4 E5 05 F1 | 	add	objptr, ##22484
0434c     F2 28 02 FB | 	rdlong	local06, objptr
04350     02 00 00 FF 
04354     34 E4 05 F1 | 	add	objptr, ##1076
04358     F2 02 68 FC | 	wrlong	#1, objptr
0435c     13 00 00 FF 
04360     38 E4 05 F1 | 	add	objptr, ##9784
04364     F2 00 68 FC | 	wrlong	#0, objptr
04368     41 00 00 FF 
0436c     40 E4 85 F1 | 	sub	objptr, ##33344
04370                 | LR__0350
04370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
04370     02 24 0E F2 | 	cmp	local04, #2 wz
04374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04378     2B 00 00 AF 
0437c     D4 E5 05 A1 |  if_e	add	objptr, ##22484
04380     F2 28 02 AB |  if_e	rdlong	local06, objptr
04384     02 00 00 AF 
04388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0438c     F2 02 68 AC |  if_e	wrlong	#1, objptr
04390     2E 00 00 AF 
04394     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04398     04 24 0E F2 | 	cmp	local04, #4 wz
0439c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
043a0     2C 00 90 5D |  if_ne	jmp	#LR__0351
043a4     2B 00 00 FF 
043a8     DC E5 05 F1 | 	add	objptr, ##22492
043ac     F2 28 02 FB | 	rdlong	local06, objptr
043b0     02 00 00 FF 
043b4     2C E4 05 F1 | 	add	objptr, ##1068
043b8     F2 04 68 FC | 	wrlong	#2, objptr
043bc     13 00 00 FF 
043c0     38 E4 05 F1 | 	add	objptr, ##9784
043c4     F2 04 68 FC | 	wrlong	#2, objptr
043c8     41 00 00 FF 
043cc     40 E4 85 F1 | 	sub	objptr, ##33344
043d0                 | LR__0351
043d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
043d0     05 24 0E F2 | 	cmp	local04, #5 wz
043d4     40 00 90 5D |  if_ne	jmp	#LR__0352
043d8     2E 00 00 FF 
043dc     08 E4 05 F1 | 	add	objptr, ##23560
043e0     F2 2A 02 FB | 	rdlong	local07, objptr
043e4     15 29 02 F6 | 	mov	local06, local07
043e8     03 28 66 F0 | 	shl	local06, #3
043ec     02 00 00 FF 
043f0     38 E4 85 F1 | 	sub	objptr, ##1080
043f4     F2 28 02 F1 | 	add	local06, objptr
043f8     04 28 06 F1 | 	add	local06, #4
043fc     14 29 02 FB | 	rdlong	local06, local06
04400     01 2A 06 F1 | 	add	local07, #1
04404     02 00 00 FF 
04408     38 E4 05 F1 | 	add	objptr, ##1080
0440c     F2 2A 62 FC | 	wrlong	local07, objptr
04410     2E 00 00 FF 
04414     08 E4 85 F1 | 	sub	objptr, ##23560
04418                 | LR__0352
04418     00 2C 06 F6 | 	mov	local08, #0
0441c                 | ' vars=0
0441c                 | ' 'print cmd
0441c                 | ' 451 select case cmd
0441c     14 2F 02 F6 | 	mov	local09, local06
04420     40 2E 86 F1 | 	sub	local09, #64
04424     33 2E 26 F3 | 	fle	local09, #51
04428     30 2E 62 FD | 	jmprel	local09
0442c                 | LR__0353
0442c     14 02 90 FD | 	jmp	#LR__0388
04430     10 02 90 FD | 	jmp	#LR__0388
04434     D4 00 90 FD | 	jmp	#LR__0355
04438     DC 00 90 FD | 	jmp	#LR__0356
0443c     20 01 90 FD | 	jmp	#LR__0362
04440     E0 00 90 FD | 	jmp	#LR__0357
04444     E8 00 90 FD | 	jmp	#LR__0358
04448     F0 00 90 FD | 	jmp	#LR__0359
0444c     F8 00 90 FD | 	jmp	#LR__0360
04450     00 01 90 FD | 	jmp	#LR__0361
04454     68 01 90 FD | 	jmp	#LR__0372
04458     6C 01 90 FD | 	jmp	#LR__0373
0445c     A0 00 90 FD | 	jmp	#LR__0354
04460     E0 01 90 FD | 	jmp	#LR__0388
04464     04 01 90 FD | 	jmp	#LR__0363
04468     D0 01 90 FD | 	jmp	#LR__0387
0446c     18 01 90 FD | 	jmp	#LR__0365
04470     1C 01 90 FD | 	jmp	#LR__0366
04474     20 01 90 FD | 	jmp	#LR__0367
04478     C0 01 90 FD | 	jmp	#LR__0387
0447c     BC 01 90 FD | 	jmp	#LR__0387
04480     24 01 90 FD | 	jmp	#LR__0369
04484     28 01 90 FD | 	jmp	#LR__0370
04488     B8 01 90 FD | 	jmp	#LR__0388
0448c     28 01 90 FD | 	jmp	#LR__0371
04490     0C 01 90 FD | 	jmp	#LR__0368
04494     38 01 90 FD | 	jmp	#LR__0374
04498     A0 01 90 FD | 	jmp	#LR__0387
0449c     38 01 90 FD | 	jmp	#LR__0375
044a0     A0 01 90 FD | 	jmp	#LR__0388
044a4     3C 01 90 FD | 	jmp	#LR__0376
044a8     40 01 90 FD | 	jmp	#LR__0377
044ac     44 01 90 FD | 	jmp	#LR__0378
044b0     48 01 90 FD | 	jmp	#LR__0379
044b4     84 01 90 FD | 	jmp	#LR__0387
044b8     48 01 90 FD | 	jmp	#LR__0380
044bc     7C 01 90 FD | 	jmp	#LR__0387
044c0     78 01 90 FD | 	jmp	#LR__0387
044c4     74 01 90 FD | 	jmp	#LR__0387
044c8     70 01 90 FD | 	jmp	#LR__0387
044cc     3C 01 90 FD | 	jmp	#LR__0381
044d0     40 01 90 FD | 	jmp	#LR__0382
044d4     64 01 90 FD | 	jmp	#LR__0387
044d8     60 01 90 FD | 	jmp	#LR__0387
044dc     44 01 90 FD | 	jmp	#LR__0384
044e0     38 01 90 FD | 	jmp	#LR__0383
044e4     54 01 90 FD | 	jmp	#LR__0387
044e8     50 01 90 FD | 	jmp	#LR__0387
044ec     54 01 90 FD | 	jmp	#LR__0388
044f0     38 01 90 FD | 	jmp	#LR__0385
044f4     3C 01 90 FD | 	jmp	#LR__0386
044f8     40 01 90 FD | 	jmp	#LR__0387
044fc     44 01 90 FD | 	jmp	#LR__0388
04500                 | LR__0354
04500     0C 0D B0 FD | 	call	#_compile_fun_varp
04504     FD 2C 02 F6 | 	mov	local08, result1
04508     38 01 90 FD | 	jmp	#LR__0388
0450c                 | LR__0355
0450c     20 09 B0 FD | 	call	#_compile_fun_2p
04510     FD 26 02 F6 | 	mov	local05, result1
04514     2C 01 90 FD | 	jmp	#LR__0388
04518                 | LR__0356
04518     14 09 B0 FD | 	call	#_compile_fun_2p
0451c     FD 26 02 F6 | 	mov	local05, result1
04520     20 01 90 FD | 	jmp	#LR__0388
04524                 | LR__0357
04524     7C 09 B0 FD | 	call	#_compile_fun_3p
04528     FD 26 02 F6 | 	mov	local05, result1
0452c     14 01 90 FD | 	jmp	#LR__0388
04530                 | LR__0358
04530     70 09 B0 FD | 	call	#_compile_fun_3p
04534     FD 26 02 F6 | 	mov	local05, result1
04538     08 01 90 FD | 	jmp	#LR__0388
0453c                 | LR__0359
0453c     30 0A B0 FD | 	call	#_compile_fun_4p
04540     FD 26 02 F6 | 	mov	local05, result1
04544     FC 00 90 FD | 	jmp	#LR__0388
04548                 | LR__0360
04548     24 0A B0 FD | 	call	#_compile_fun_4p
0454c     FD 26 02 F6 | 	mov	local05, result1
04550     F0 00 90 FD | 	jmp	#LR__0388
04554                 | LR__0361
04554     78 28 B0 FD | 	call	#_expr
04558                 | ' 
04558                 | ' 
04558                 | ' expr()
04558                 | ' return 0
04558     00 26 06 F6 | 	mov	local05, #0
0455c     E4 00 90 FD | 	jmp	#LR__0388
04560                 | LR__0362
04560     D8 0D B0 FD | 	call	#_compile_print
04564     FD 26 02 F6 | 	mov	local05, result1
04568     94 01 90 FD | 	jmp	#LR__0389
0456c                 | LR__0363
0456c     01 24 16 F2 | 	cmp	local04, #1 wc
04570     08 00 90 CD |  if_b	jmp	#LR__0364
04574     F8 24 B0 FD | 	call	#_compile_goto
04578     84 01 90 FD | 	jmp	#LR__0389
0457c                 | LR__0364
0457c     19 12 06 F6 | 	mov	arg01, #25
04580     08 C0 B0 FD | 	call	#_printerror
04584     78 01 90 FD | 	jmp	#LR__0389
04588                 | LR__0365
04588     44 28 B0 FD | 	call	#_expr
0458c                 | ' 
0458c                 | ' 
0458c                 | ' expr()
0458c                 | ' return 0
0458c     B4 00 90 FD | 	jmp	#LR__0388
04590                 | LR__0366
04590     3C 28 B0 FD | 	call	#_expr
04594                 | ' 
04594                 | ' 
04594                 | ' expr()
04594                 | ' return 0
04594     AC 00 90 FD | 	jmp	#LR__0388
04598                 | LR__0367
04598     34 28 B0 FD | 	call	#_expr
0459c                 | ' 
0459c                 | ' 
0459c                 | ' expr()
0459c                 | ' return 0
0459c     A4 00 90 FD | 	jmp	#LR__0388
045a0                 | LR__0368
045a0     2C 28 B0 FD | 	call	#_expr
045a4                 | ' 
045a4                 | ' 
045a4                 | ' expr()
045a4                 | ' return 0
045a4     9C 00 90 FD | 	jmp	#LR__0388
045a8                 | LR__0369
045a8     10 0D B0 FD | 	call	#_compile_int_fun_2p
045ac     94 00 90 FD | 	jmp	#LR__0388
045b0                 | LR__0370
045b0     94 07 B0 FD | 	call	#_compile_converttoint
045b4                 | ' return err
045b4     8C 00 90 FD | 	jmp	#LR__0388
045b8                 | LR__0371
045b8     58 14 B0 FD | 	call	#_compile_if
045bc     40 01 90 FD | 	jmp	#LR__0389
045c0                 | LR__0372
045c0     10 1B B0 FD | 	call	#_compile_for
045c4     38 01 90 FD | 	jmp	#LR__0389
045c8                 | LR__0373
045c8     F4 22 B0 FD | 	call	#_compile_next
045cc     30 01 90 FD | 	jmp	#LR__0389
045d0                 | LR__0374
045d0     80 15 B0 FD | 	call	#_compile_else
045d4     28 01 90 FD | 	jmp	#LR__0389
045d8                 | LR__0375
045d8     54 08 B0 FD | 	call	#_compile_fun_2p
045dc     FD 26 02 F6 | 	mov	local05, result1
045e0     60 00 90 FD | 	jmp	#LR__0388
045e4                 | LR__0376
045e4     E8 27 B0 FD | 	call	#_expr
045e8                 | ' 
045e8                 | ' 
045e8                 | ' expr()
045e8                 | ' return 0
045e8     58 00 90 FD | 	jmp	#LR__0388
045ec                 | LR__0377
045ec     E0 27 B0 FD | 	call	#_expr
045f0                 | ' 
045f0                 | ' 
045f0                 | ' expr()
045f0                 | ' return 0
045f0     50 00 90 FD | 	jmp	#LR__0388
045f4                 | LR__0378
045f4     D8 27 B0 FD | 	call	#_expr
045f8                 | ' 
045f8                 | ' 
045f8                 | ' expr()
045f8                 | ' return 0
045f8     48 00 90 FD | 	jmp	#LR__0388
045fc                 | LR__0379
045fc     D0 27 B0 FD | 	call	#_expr
04600                 | ' 
04600                 | ' 
04600                 | ' expr()
04600                 | ' return 0
04600     40 00 90 FD | 	jmp	#LR__0388
04604                 | LR__0380
04604     C8 27 B0 FD | 	call	#_expr
04608                 | ' 
04608                 | ' 
04608                 | ' expr()
04608                 | ' return 0
04608     38 00 90 FD | 	jmp	#LR__0388
0460c                 | LR__0381
0460c     C0 27 B0 FD | 	call	#_expr
04610                 | ' 
04610                 | ' 
04610                 | ' expr()
04610                 | ' return 0
04610     30 00 90 FD | 	jmp	#LR__0388
04614                 | LR__0382
04614     B8 27 B0 FD | 	call	#_expr
04618                 | ' 
04618                 | ' 
04618                 | ' expr()
04618                 | ' return 0
04618     28 00 90 FD | 	jmp	#LR__0388
0461c                 | LR__0383
0461c     84 08 B0 FD | 	call	#_compile_fun_3p
04620     20 00 90 FD | 	jmp	#LR__0388
04624                 | LR__0384
04624     6C 0A B0 FD | 	call	#_compile_fun_5p
04628     18 00 90 FD | 	jmp	#LR__0388
0462c                 | LR__0385
0462c     40 09 B0 FD | 	call	#_compile_fun_4p
04630     10 00 90 FD | 	jmp	#LR__0388
04634                 | LR__0386
04634     44 16 B0 FD | 	call	#_compile_dim
04638     C4 00 90 FD | 	jmp	#LR__0389
0463c                 | LR__0387
0463c     4C 06 B0 FD | 	call	#_compile_unknown
04640     BC 00 90 FD | 	jmp	#LR__0389
04644                 | LR__0388
04644     14 23 02 F6 | 	mov	local03, local06
04648     16 1F 02 F6 | 	mov	local01, local08
0464c     0F 2B 02 F6 | 	mov	local07, local01
04650     10 31 02 F6 | 	mov	local10, local02
04654     11 1F 02 F6 | 	mov	local01, local03
04658     41 00 00 FF 
0465c     40 E4 05 F1 | 	add	objptr, ##33344
04660     F2 2E 02 FB | 	rdlong	local09, objptr
04664     17 2D 02 F6 | 	mov	local08, local09
04668     01 2C 66 F0 | 	shl	local08, #1
0466c     17 2D 02 F1 | 	add	local08, local09
04670     02 2C 66 F0 | 	shl	local08, #2
04674     03 00 00 FF 
04678     00 E4 85 F1 | 	sub	objptr, ##1536
0467c     F2 2C 02 F1 | 	add	local08, objptr
04680     16 2B 62 FC | 	wrlong	local07, local08
04684     03 00 00 FF 
04688     00 E4 05 F1 | 	add	objptr, ##1536
0468c     F2 2E 02 FB | 	rdlong	local09, objptr
04690     17 2D 02 F6 | 	mov	local08, local09
04694     01 2C 66 F0 | 	shl	local08, #1
04698     17 2D 02 F1 | 	add	local08, local09
0469c     02 2C 66 F0 | 	shl	local08, #2
046a0     03 00 00 FF 
046a4     00 E4 85 F1 | 	sub	objptr, ##1536
046a8     F2 2C 02 F1 | 	add	local08, objptr
046ac     04 2C 06 F1 | 	add	local08, #4
046b0     16 31 62 FC | 	wrlong	local10, local08
046b4     03 00 00 FF 
046b8     00 E4 05 F1 | 	add	objptr, ##1536
046bc     F2 30 02 FB | 	rdlong	local10, objptr
046c0     18 2F 02 F6 | 	mov	local09, local10
046c4     01 2E 66 F0 | 	shl	local09, #1
046c8     18 2F 02 F1 | 	add	local09, local10
046cc     02 2E 66 F0 | 	shl	local09, #2
046d0     03 00 00 FF 
046d4     00 E4 85 F1 | 	sub	objptr, ##1536
046d8     F2 2E 02 F1 | 	add	local09, objptr
046dc     08 2E 06 F1 | 	add	local09, #8
046e0     17 1F 62 FC | 	wrlong	local01, local09
046e4     03 00 00 FF 
046e8     00 E4 05 F1 | 	add	objptr, ##1536
046ec     F2 2A 02 FB | 	rdlong	local07, objptr
046f0     01 2A 06 F1 | 	add	local07, #1
046f4     F2 2A 62 FC | 	wrlong	local07, objptr
046f8     41 00 00 FF 
046fc     40 E4 85 F1 | 	sub	objptr, ##33344
04700                 | LR__0389
04700                 | ' 
04700                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
04700                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
04700     00 24 0E F2 | 	cmp	local04, #0 wz
04704     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04708     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
0470c     38 00 90 5D |  if_ne	jmp	#LR__0390
04710     41 00 00 FF 
04714     40 E4 05 F1 | 	add	objptr, ##33344
04718     F2 30 02 FB | 	rdlong	local10, objptr
0471c     18 1F 02 F6 | 	mov	local01, local10
04720     01 1E 66 F0 | 	shl	local01, #1
04724     18 1F 02 F1 | 	add	local01, local10
04728     02 1E 66 F0 | 	shl	local01, #2
0472c     03 00 00 FF 
04730     00 E4 85 F1 | 	sub	objptr, ##1536
04734     F2 1E 02 F1 | 	add	local01, objptr
04738     08 1E 06 F1 | 	add	local01, #8
0473c     0F FD 6B FC | 	wrlong	#510, local01
04740     3E 00 00 FF 
04744     40 E4 85 F1 | 	sub	objptr, ##31808
04748                 | LR__0390
04748                 | ' 
04748                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult : next i
04748                 | ' return err
04748     13 FB 01 F6 | 	mov	result1, local05
0474c     A7 F0 03 F6 | 	mov	ptra, fp
04750     B2 00 A0 FD | 	call	#popregs_
04754                 | _compile_immediate_ret
04754     2D 00 64 FD | 	ret
04758                 | 
04758                 | ' 
04758                 | ' 
04758                 | ' sub compile_immediate_assign(linetype as ulong)
04758                 | _compile_immediate_assign
04758     09 4A 05 F6 | 	mov	COUNT_, #9
0475c     A8 00 A0 FD | 	call	#pushregs_
04760     09 25 0A F6 | 	mov	local04, arg01 wz
04764     FF 22 06 F6 | 	mov	local03, #255
04768     01 26 66 F6 | 	neg	local05, #1
0476c                 | ' 
0476c                 | ' t1.result_type=result_error : t1.result.uresult=0
0476c                 | ' i=-1: j=-1
0476c                 | ' 
0476c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
0476c     2C 00 90 5D |  if_ne	jmp	#LR__0400
04770     2B 00 00 FF 
04774     D0 E5 05 F1 | 	add	objptr, ##22480
04778     F2 28 02 FB | 	rdlong	local06, objptr
0477c     02 00 00 FF 
04780     38 E4 05 F1 | 	add	objptr, ##1080
04784     F2 04 68 FC | 	wrlong	#2, objptr
04788     13 00 00 FF 
0478c     38 E4 05 F1 | 	add	objptr, ##9784
04790     F2 00 68 FC | 	wrlong	#0, objptr
04794     41 00 00 FF 
04798     40 E4 85 F1 | 	sub	objptr, ##33344
0479c                 | LR__0400
0479c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0479c     02 24 0E F2 | 	cmp	local04, #2 wz
047a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
047a4     2B 00 00 AF 
047a8     D0 E5 05 A1 |  if_e	add	objptr, ##22480
047ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
047b0     02 00 00 AF 
047b4     38 E4 05 A1 |  if_e	add	objptr, ##1080
047b8     F2 04 68 AC |  if_e	wrlong	#2, objptr
047bc     2E 00 00 AF 
047c0     08 E4 85 A1 |  if_e	sub	objptr, ##23560
047c4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
047c4     04 24 0E F2 | 	cmp	local04, #4 wz
047c8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
047cc     2C 00 90 5D |  if_ne	jmp	#LR__0401
047d0     2B 00 00 FF 
047d4     D8 E5 05 F1 | 	add	objptr, ##22488
047d8     F2 28 02 FB | 	rdlong	local06, objptr
047dc     02 00 00 FF 
047e0     30 E4 05 F1 | 	add	objptr, ##1072
047e4     F2 06 68 FC | 	wrlong	#3, objptr
047e8     13 00 00 FF 
047ec     38 E4 05 F1 | 	add	objptr, ##9784
047f0     F2 04 68 FC | 	wrlong	#2, objptr
047f4     41 00 00 FF 
047f8     40 E4 85 F1 | 	sub	objptr, ##33344
047fc                 | LR__0401
047fc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
047fc     05 24 0E F2 | 	cmp	local04, #5 wz
04800     3C 00 90 5D |  if_ne	jmp	#LR__0402
04804     2E 00 00 FF 
04808     08 E4 05 F1 | 	add	objptr, ##23560
0480c     F2 FA 01 FB | 	rdlong	result1, objptr
04810     FD 28 02 F6 | 	mov	local06, result1
04814     03 28 66 F0 | 	shl	local06, #3
04818     02 00 00 FF 
0481c     38 E4 85 F1 | 	sub	objptr, ##1080
04820     F2 28 02 F1 | 	add	local06, objptr
04824     14 29 02 FB | 	rdlong	local06, local06
04828     02 FA 05 F1 | 	add	result1, #2
0482c     02 00 00 FF 
04830     38 E4 05 F1 | 	add	objptr, ##1080
04834     F2 FA 61 FC | 	wrlong	result1, objptr
04838     2E 00 00 FF 
0483c     08 E4 85 F1 | 	sub	objptr, ##23560
04840                 | LR__0402
04840     14 13 02 F6 | 	mov	arg01, local06
04844     01 14 06 F6 | 	mov	arg02, #1
04848     04 12 B1 FD | 	call	#__system__Right_S
0484c     80 25 B0 FD | 	call	#_expr
04850                 | '  
04850                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04850                 | ' 
04850                 | ' suffix2$=right$(varname2$,1)
04850                 | ' expr()
04850                 | ' 
04850                 | ' 
04850                 | ' if varnum>0 then
04850     2B 00 00 FF 
04854     CC E5 05 F1 | 	add	objptr, ##22476
04858     F2 2A 02 FB | 	rdlong	local07, objptr
0485c     2B 00 00 FF 
04860     CC E5 85 F1 | 	sub	objptr, ##22476
04864     01 2A 56 F2 | 	cmps	local07, #1 wc
04868     58 00 90 CD |  if_b	jmp	#LR__0405
0486c                 | '   for i=0 to varnum-1
0486c     00 2C 06 F6 | 	mov	local08, #0
04870     2B 00 00 FF 
04874     CC E5 05 F1 | 	add	objptr, ##22476
04878     F2 2E 02 FB | 	rdlong	local09, objptr
0487c     2B 00 00 FF 
04880     CC E5 85 F1 | 	sub	objptr, ##22476
04884                 | LR__0403
04884     17 2D 52 F2 | 	cmps	local08, local09 wc
04888     38 00 90 3D |  if_ae	jmp	#LR__0404
0488c                 | '     if variables(i).name=varname2$ then j=i : exit
0488c     16 2B 02 F6 | 	mov	local07, local08
04890     04 2A 66 F0 | 	shl	local07, #4
04894     0B 00 00 FF 
04898     CC E5 05 F1 | 	add	objptr, ##6092
0489c     F2 2A 02 F1 | 	add	local07, objptr
048a0     15 13 02 FB | 	rdlong	arg01, local07
048a4     14 15 02 F6 | 	mov	arg02, local06
048a8     0B 00 00 FF 
048ac     CC E5 85 F1 | 	sub	objptr, ##6092
048b0     F4 F1 B0 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     16 27 02 A6 |  if_e	mov	local05, local08
048bc     01 2C 06 51 |  if_ne	add	local08, #1
048c0     C0 FF 9F 5D |  if_ne	jmp	#LR__0403
048c4                 | LR__0404
048c4                 | LR__0405
048c4                 | ' if  j=-1 andalso varnum<maxvars then   
048c4     FF FF 7F FF 
048c8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
048cc     60 00 90 5D |  if_ne	jmp	#LR__0406
048d0     2B 00 00 FF 
048d4     CC E5 05 F1 | 	add	objptr, ##22476
048d8     F2 2A 02 FB | 	rdlong	local07, objptr
048dc     2B 00 00 FF 
048e0     CC E5 85 F1 | 	sub	objptr, ##22476
048e4     01 00 00 FF 
048e8     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
048ec     40 00 90 3D |  if_ae	jmp	#LR__0406
048f0     2B 00 00 FF 
048f4     CC E5 05 F1 | 	add	objptr, ##22476
048f8     F2 2E 02 FB | 	rdlong	local09, objptr
048fc     04 2E 66 F0 | 	shl	local09, #4
04900     20 00 00 FF 
04904     00 E4 85 F1 | 	sub	objptr, ##16384
04908     F2 2E 02 F1 | 	add	local09, objptr
0490c     17 29 62 FC | 	wrlong	local06, local09
04910     20 00 00 FF 
04914     00 E4 05 F1 | 	add	objptr, ##16384
04918     F2 2A 02 FB | 	rdlong	local07, objptr
0491c     15 27 02 F6 | 	mov	local05, local07
04920     01 2A 06 F1 | 	add	local07, #1
04924     F2 2A 62 FC | 	wrlong	local07, objptr
04928     2B 00 00 FF 
0492c     CC E5 85 F1 | 	sub	objptr, ##22476
04930                 | LR__0406
04930     13 1F 02 F6 | 	mov	local01, local05
04934     17 22 06 F6 | 	mov	local03, #23
04938     0F 2B 02 F6 | 	mov	local07, local01
0493c     10 2F 02 F6 | 	mov	local09, local02
04940     11 1F 02 F6 | 	mov	local01, local03
04944     41 00 00 FF 
04948     40 E4 05 F1 | 	add	objptr, ##33344
0494c     F2 2C 02 FB | 	rdlong	local08, objptr
04950     16 29 02 F6 | 	mov	local06, local08
04954     01 28 66 F0 | 	shl	local06, #1
04958     16 29 02 F1 | 	add	local06, local08
0495c     02 28 66 F0 | 	shl	local06, #2
04960     03 00 00 FF 
04964     00 E4 85 F1 | 	sub	objptr, ##1536
04968     F2 28 02 F1 | 	add	local06, objptr
0496c     14 2B 62 FC | 	wrlong	local07, local06
04970     03 00 00 FF 
04974     00 E4 05 F1 | 	add	objptr, ##1536
04978     F2 2C 02 FB | 	rdlong	local08, objptr
0497c     16 2B 02 F6 | 	mov	local07, local08
04980     01 2A 66 F0 | 	shl	local07, #1
04984     16 2B 02 F1 | 	add	local07, local08
04988     02 2A 66 F0 | 	shl	local07, #2
0498c     03 00 00 FF 
04990     00 E4 85 F1 | 	sub	objptr, ##1536
04994     F2 2A 02 F1 | 	add	local07, objptr
04998     04 2A 06 F1 | 	add	local07, #4
0499c     15 2F 62 FC | 	wrlong	local09, local07
049a0     03 00 00 FF 
049a4     00 E4 05 F1 | 	add	objptr, ##1536
049a8     F2 2E 02 FB | 	rdlong	local09, objptr
049ac     17 2D 02 F6 | 	mov	local08, local09
049b0     01 2C 66 F0 | 	shl	local08, #1
049b4     17 2D 02 F1 | 	add	local08, local09
049b8     02 2C 66 F0 | 	shl	local08, #2
049bc     03 00 00 FF 
049c0     00 E4 85 F1 | 	sub	objptr, ##1536
049c4     F2 2C 02 F1 | 	add	local08, objptr
049c8     08 2C 06 F1 | 	add	local08, #8
049cc     16 1F 62 FC | 	wrlong	local01, local08
049d0     03 00 00 FF 
049d4     00 E4 05 F1 | 	add	objptr, ##1536
049d8     F2 2A 02 FB | 	rdlong	local07, objptr
049dc     01 2A 06 F1 | 	add	local07, #1
049e0     F2 2A 62 FC | 	wrlong	local07, objptr
049e4     41 00 00 FF 
049e8     40 E4 85 F1 | 	sub	objptr, ##33344
049ec                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
049ec                 | ' 
049ec                 | ' 
049ec                 | ' compiledline(lineptr)=t1:  lineptr+=1 
049ec                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
049ec     00 24 0E F2 | 	cmp	local04, #0 wz
049f0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
049f4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
049f8     38 00 90 5D |  if_ne	jmp	#LR__0407
049fc     41 00 00 FF 
04a00     40 E4 05 F1 | 	add	objptr, ##33344
04a04     F2 1E 02 FB | 	rdlong	local01, objptr
04a08     0F 2F 02 F6 | 	mov	local09, local01
04a0c     01 2E 66 F0 | 	shl	local09, #1
04a10     0F 2F 02 F1 | 	add	local09, local01
04a14     02 2E 66 F0 | 	shl	local09, #2
04a18     03 00 00 FF 
04a1c     00 E4 85 F1 | 	sub	objptr, ##1536
04a20     F2 2E 02 F1 | 	add	local09, objptr
04a24     08 2E 06 F1 | 	add	local09, #8
04a28     17 FD 6B FC | 	wrlong	#510, local09
04a2c     3E 00 00 FF 
04a30     40 E4 85 F1 | 	sub	objptr, ##31808
04a34                 | LR__0407
04a34     A7 F0 03 F6 | 	mov	ptra, fp
04a38     B2 00 A0 FD | 	call	#popregs_
04a3c                 | _compile_immediate_assign_ret
04a3c     2D 00 64 FD | 	ret
04a40                 | 
04a40                 | ' 
04a40                 | ' ' ------------------ compile the line that is calling a command 
04a40                 | ' 
04a40                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04a40                 | _compile
04a40     04 4A 05 F6 | 	mov	COUNT_, #4
04a44     A8 00 A0 FD | 	call	#pushregs_
04a48     09 1F 0A F6 | 	mov	local01, arg01 wz
04a4c     0A 21 02 F6 | 	mov	local02, arg02
04a50     0B 23 02 F6 | 	mov	local03, arg03
04a54                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04a54                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04a54                 | '  
04a54                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04a54                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04a54     0C 00 90 5D |  if_ne	jmp	#LR__0410
04a58     00 12 06 F6 | 	mov	arg01, #0
04a5c     CC F8 BF FD | 	call	#_compile_immediate
04a60     A0 00 90 FD | 	jmp	#LR__0417
04a64                 | LR__0410
04a64     3E 00 00 FF 
04a68     40 E4 05 F1 | 	add	objptr, ##31808
04a6c     F2 1E 62 FC | 	wrlong	local01, objptr
04a70     04 E4 05 F1 | 	add	objptr, #4
04a74     F2 20 62 FC | 	wrlong	local02, objptr
04a78     3E 00 00 FF 
04a7c     44 E4 85 F1 | 	sub	objptr, ##31812
04a80     11 13 02 F6 | 	mov	arg01, local03
04a84     01 12 06 F1 | 	add	arg01, #1
04a88     A0 F8 BF FD | 	call	#_compile_immediate
04a8c     FD 24 0A F6 | 	mov	local04, result1 wz
04a90                 | ' 
04a90                 | ' ucompiledline(0)=alinemajor
04a90                 | ' ucompiledline(1)=alineminor
04a90                 | ' 
04a90                 | ' 
04a90                 | ' ' cont: 0: this is the first part of the line that will continue
04a90                 | ' ' 1 - this is the continuation of the line
04a90                 | ' ' 2 - this is the last continued line
04a90                 | ' ' 3 - this is the ome and only part
04a90                 | ' 
04a90                 | ' 
04a90                 | ' err=compile_immediate(cont+1) 
04a90                 | ' if err=0 then
04a90     6C 00 90 5D |  if_ne	jmp	#LR__0416
04a94                 | '   if cont=3 orelse cont=2 then 
04a94     03 22 0E F2 | 	cmp	local03, #3 wz
04a98     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04a9c     60 00 90 5D |  if_ne	jmp	#LR__0415
04aa0                 | '     if alinemajor >lastline then 
04aa0     41 00 00 FF 
04aa4     4C E4 05 F1 | 	add	objptr, ##33356
04aa8     F2 16 02 FB | 	rdlong	arg03, objptr
04aac     41 00 00 FF 
04ab0     4C E4 85 F1 | 	sub	objptr, ##33356
04ab4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04ab8     0C 00 90 ED |  if_be	jmp	#LR__0411
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     88 F7 BF FD | 	call	#_add_line_at_end
04ac4     38 00 90 FD | 	jmp	#LR__0414
04ac8                 | LR__0411
04ac8     0F 13 02 F6 | 	mov	arg01, local01
04acc     08 F0 BF FD | 	call	#_deleteline
04ad0                 | '       deleteline(alinemajor)  
04ad0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04ad0     41 00 00 FF 
04ad4     4C E4 05 F1 | 	add	objptr, ##33356
04ad8     F2 16 02 FB | 	rdlong	arg03, objptr
04adc     41 00 00 FF 
04ae0     4C E4 85 F1 | 	sub	objptr, ##33356
04ae4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04ae8     0C 00 90 ED |  if_be	jmp	#LR__0412
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     58 F7 BF FD | 	call	#_add_line_at_end
04af4     08 00 90 FD | 	jmp	#LR__0413
04af8                 | LR__0412
04af8     0F 13 02 F6 | 	mov	arg01, local01
04afc     04 F5 BF FD | 	call	#_insertline
04b00                 | LR__0413
04b00                 | LR__0414
04b00                 | LR__0415
04b00                 | LR__0416
04b00                 | ' return err
04b00     12 FB 01 F6 | 	mov	result1, local04
04b04                 | LR__0417
04b04     A7 F0 03 F6 | 	mov	ptra, fp
04b08     B2 00 A0 FD | 	call	#popregs_
04b0c                 | _compile_ret
04b0c     2D 00 64 FD | 	ret
04b10                 | 
04b10                 | ' 
04b10                 | ' ' ------------------ compile the line that is assigning to a variable
04b10                 | ' 
04b10                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04b10                 | _compile_assign
04b10     03 4A 05 F6 | 	mov	COUNT_, #3
04b14     A8 00 A0 FD | 	call	#pushregs_
04b18     09 1F 0A F6 | 	mov	local01, arg01 wz
04b1c     0A 21 02 F6 | 	mov	local02, arg02
04b20     0B 23 02 F6 | 	mov	local03, arg03
04b24                 | ' 
04b24                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04b24                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04b24     0C 00 90 5D |  if_ne	jmp	#LR__0420
04b28     00 12 06 F6 | 	mov	arg01, #0
04b2c     28 FC BF FD | 	call	#_compile_immediate_assign
04b30     94 00 90 FD | 	jmp	#LR__0426
04b34                 | LR__0420
04b34     3E 00 00 FF 
04b38     40 E4 05 F1 | 	add	objptr, ##31808
04b3c     F2 1E 62 FC | 	wrlong	local01, objptr
04b40     04 E4 05 F1 | 	add	objptr, #4
04b44     F2 20 62 FC | 	wrlong	local02, objptr
04b48     3E 00 00 FF 
04b4c     44 E4 85 F1 | 	sub	objptr, ##31812
04b50     11 13 02 F6 | 	mov	arg01, local03
04b54     01 12 06 F1 | 	add	arg01, #1
04b58     FC FB BF FD | 	call	#_compile_immediate_assign
04b5c                 | ' 
04b5c                 | ' ucompiledline(0)=alinemajor
04b5c                 | ' ucompiledline(1)=alineminor
04b5c                 | ' 
04b5c                 | ' compile_immediate_assign(cont+1) 
04b5c                 | ' 
04b5c                 | ' if cont=3 orelse cont=2 then 
04b5c     03 22 0E F2 | 	cmp	local03, #3 wz
04b60     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04b64     60 00 90 5D |  if_ne	jmp	#LR__0425
04b68                 | '   if alinemajor >lastline then 
04b68     41 00 00 FF 
04b6c     4C E4 05 F1 | 	add	objptr, ##33356
04b70     F2 16 02 FB | 	rdlong	arg03, objptr
04b74     41 00 00 FF 
04b78     4C E4 85 F1 | 	sub	objptr, ##33356
04b7c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04b80     0C 00 90 ED |  if_be	jmp	#LR__0421
04b84     0F 13 02 F6 | 	mov	arg01, local01
04b88     C0 F6 BF FD | 	call	#_add_line_at_end
04b8c     38 00 90 FD | 	jmp	#LR__0424
04b90                 | LR__0421
04b90     0F 13 02 F6 | 	mov	arg01, local01
04b94     40 EF BF FD | 	call	#_deleteline
04b98                 | '     deleteline(alinemajor)  
04b98                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
04b98     41 00 00 FF 
04b9c     4C E4 05 F1 | 	add	objptr, ##33356
04ba0     F2 16 02 FB | 	rdlong	arg03, objptr
04ba4     41 00 00 FF 
04ba8     4C E4 85 F1 | 	sub	objptr, ##33356
04bac     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04bb0     0C 00 90 ED |  if_be	jmp	#LR__0422
04bb4     0F 13 02 F6 | 	mov	arg01, local01
04bb8     90 F6 BF FD | 	call	#_add_line_at_end
04bbc     08 00 90 FD | 	jmp	#LR__0423
04bc0                 | LR__0422
04bc0     0F 13 02 F6 | 	mov	arg01, local01
04bc4     3C F4 BF FD | 	call	#_insertline
04bc8                 | LR__0423
04bc8                 | LR__0424
04bc8                 | LR__0425
04bc8                 | LR__0426
04bc8     A7 F0 03 F6 | 	mov	ptra, fp
04bcc     B2 00 A0 FD | 	call	#popregs_
04bd0                 | _compile_assign_ret
04bd0     2D 00 64 FD | 	ret
04bd4                 | 
04bd4                 | ' 
04bd4                 | ' sub compile_error(errno)
04bd4                 | _compile_error
04bd4     FF 04 06 F6 | 	mov	_var03, #255
04bd8     01 07 02 F6 | 	mov	_var04, _var02
04bdc     02 09 02 F6 | 	mov	_var05, _var03
04be0     41 00 00 FF 
04be4     40 E4 05 F1 | 	add	objptr, ##33344
04be8     F2 0A 02 FB | 	rdlong	_var06, objptr
04bec     05 0D 02 F6 | 	mov	_var07, _var06
04bf0     01 0C 66 F0 | 	shl	_var07, #1
04bf4     05 0D 02 F1 | 	add	_var07, _var06
04bf8     02 0C 66 F0 | 	shl	_var07, #2
04bfc     03 00 00 FF 
04c00     00 E4 85 F1 | 	sub	objptr, ##1536
04c04     F2 0C 02 F1 | 	add	_var07, objptr
04c08     06 13 62 FC | 	wrlong	arg01, _var07
04c0c     03 00 00 FF 
04c10     00 E4 05 F1 | 	add	objptr, ##1536
04c14     F2 0C 02 FB | 	rdlong	_var07, objptr
04c18     06 0B 02 F6 | 	mov	_var06, _var07
04c1c     01 0A 66 F0 | 	shl	_var06, #1
04c20     06 0B 02 F1 | 	add	_var06, _var07
04c24     02 0A 66 F0 | 	shl	_var06, #2
04c28     03 00 00 FF 
04c2c     00 E4 85 F1 | 	sub	objptr, ##1536
04c30     F2 0A 02 F1 | 	add	_var06, objptr
04c34     04 0A 06 F1 | 	add	_var06, #4
04c38     05 07 62 FC | 	wrlong	_var04, _var06
04c3c     03 00 00 FF 
04c40     00 E4 05 F1 | 	add	objptr, ##1536
04c44     F2 0C 02 FB | 	rdlong	_var07, objptr
04c48     06 0B 02 F6 | 	mov	_var06, _var07
04c4c     01 0A 66 F0 | 	shl	_var06, #1
04c50     06 0B 02 F1 | 	add	_var06, _var07
04c54     02 0A 66 F0 | 	shl	_var06, #2
04c58     03 00 00 FF 
04c5c     00 E4 85 F1 | 	sub	objptr, ##1536
04c60     F2 0A 02 F1 | 	add	_var06, objptr
04c64     08 0A 06 F1 | 	add	_var06, #8
04c68     05 09 62 FC | 	wrlong	_var05, _var06
04c6c     03 00 00 FF 
04c70     00 E4 05 F1 | 	add	objptr, ##1536
04c74     F2 12 02 FB | 	rdlong	arg01, objptr
04c78     01 12 06 F1 | 	add	arg01, #1
04c7c     F2 12 62 FC | 	wrlong	arg01, objptr
04c80     41 00 00 FF 
04c84     40 E4 85 F1 | 	sub	objptr, ##33344
04c88                 | _compile_error_ret
04c88     2D 00 64 FD | 	ret
04c8c                 | 
04c8c                 | ' 
04c8c                 | ' 
04c8c                 | ' sub compile_unknown() 
04c8c                 | _compile_unknown
04c8c     FF 04 06 F6 | 	mov	_var03, #255
04c90     17 00 06 F6 | 	mov	_var01, #23
04c94     01 07 02 F6 | 	mov	_var04, _var02
04c98     02 01 02 F6 | 	mov	_var01, _var03
04c9c     41 00 00 FF 
04ca0     40 E4 05 F1 | 	add	objptr, ##33344
04ca4     F2 08 02 FB | 	rdlong	_var05, objptr
04ca8     04 0B 02 F6 | 	mov	_var06, _var05
04cac     01 0A 66 F0 | 	shl	_var06, #1
04cb0     04 0B 02 F1 | 	add	_var06, _var05
04cb4     02 0A 66 F0 | 	shl	_var06, #2
04cb8     03 00 00 FF 
04cbc     00 E4 85 F1 | 	sub	objptr, ##1536
04cc0     F2 0A 02 F1 | 	add	_var06, objptr
04cc4     05 2F 68 FC | 	wrlong	#23, _var06
04cc8     03 00 00 FF 
04ccc     00 E4 05 F1 | 	add	objptr, ##1536
04cd0     F2 0A 02 FB | 	rdlong	_var06, objptr
04cd4     05 09 02 F6 | 	mov	_var05, _var06
04cd8     01 08 66 F0 | 	shl	_var05, #1
04cdc     05 09 02 F1 | 	add	_var05, _var06
04ce0     02 08 66 F0 | 	shl	_var05, #2
04ce4     03 00 00 FF 
04ce8     00 E4 85 F1 | 	sub	objptr, ##1536
04cec     F2 08 02 F1 | 	add	_var05, objptr
04cf0     04 08 06 F1 | 	add	_var05, #4
04cf4     04 07 62 FC | 	wrlong	_var04, _var05
04cf8     03 00 00 FF 
04cfc     00 E4 05 F1 | 	add	objptr, ##1536
04d00     F2 0A 02 FB | 	rdlong	_var06, objptr
04d04     05 09 02 F6 | 	mov	_var05, _var06
04d08     01 08 66 F0 | 	shl	_var05, #1
04d0c     05 09 02 F1 | 	add	_var05, _var06
04d10     02 08 66 F0 | 	shl	_var05, #2
04d14     03 00 00 FF 
04d18     00 E4 85 F1 | 	sub	objptr, ##1536
04d1c     F2 08 02 F1 | 	add	_var05, objptr
04d20     08 08 06 F1 | 	add	_var05, #8
04d24     04 01 62 FC | 	wrlong	_var01, _var05
04d28     03 00 00 FF 
04d2c     00 E4 05 F1 | 	add	objptr, ##1536
04d30     F2 0A 02 FB | 	rdlong	_var06, objptr
04d34     01 0A 06 F1 | 	add	_var06, #1
04d38     F2 0A 62 FC | 	wrlong	_var06, objptr
04d3c     41 00 00 FF 
04d40     40 E4 85 F1 | 	sub	objptr, ##33344
04d44                 | _compile_unknown_ret
04d44     2D 00 64 FD | 	ret
04d48                 | 
04d48                 | ' 
04d48                 | ' function compile_converttoint() as integer
04d48                 | _compile_converttoint
04d48     06 4A 05 F6 | 	mov	COUNT_, #6
04d4c     A8 00 A0 FD | 	call	#pushregs_
04d50     00 1E 06 F6 | 	mov	local01, #0
04d54     78 20 B0 FD | 	call	#_expr
04d58     FD 24 0A F6 | 	mov	local04, result1 wz
04d5c                 | ' err=0
04d5c                 | ' t1.result.uresult=0
04d5c                 | ' err=expr()
04d5c                 | ' if err=0 then
04d5c     C0 00 90 5D |  if_ne	jmp	#LR__0430
04d60     16 22 06 F6 | 	mov	local03, #22
04d64     0F 27 02 F6 | 	mov	local05, local01
04d68     10 29 02 F6 | 	mov	local06, local02
04d6c     11 25 02 F6 | 	mov	local04, local03
04d70     41 00 00 FF 
04d74     40 E4 05 F1 | 	add	objptr, ##33344
04d78     F2 1E 02 FB | 	rdlong	local01, objptr
04d7c     0F FB 01 F6 | 	mov	result1, local01
04d80     01 FA 65 F0 | 	shl	result1, #1
04d84     0F FB 01 F1 | 	add	result1, local01
04d88     02 FA 65 F0 | 	shl	result1, #2
04d8c     03 00 00 FF 
04d90     00 E4 85 F1 | 	sub	objptr, ##1536
04d94     F2 FA 01 F1 | 	add	result1, objptr
04d98     FD 26 62 FC | 	wrlong	local05, result1
04d9c     03 00 00 FF 
04da0     00 E4 05 F1 | 	add	objptr, ##1536
04da4     F2 26 02 FB | 	rdlong	local05, objptr
04da8     13 1F 02 F6 | 	mov	local01, local05
04dac     01 1E 66 F0 | 	shl	local01, #1
04db0     13 1F 02 F1 | 	add	local01, local05
04db4     02 1E 66 F0 | 	shl	local01, #2
04db8     03 00 00 FF 
04dbc     00 E4 85 F1 | 	sub	objptr, ##1536
04dc0     F2 1E 02 F1 | 	add	local01, objptr
04dc4     04 1E 06 F1 | 	add	local01, #4
04dc8     0F 29 62 FC | 	wrlong	local06, local01
04dcc     03 00 00 FF 
04dd0     00 E4 05 F1 | 	add	objptr, ##1536
04dd4     F2 28 02 FB | 	rdlong	local06, objptr
04dd8     14 27 02 F6 | 	mov	local05, local06
04ddc     01 26 66 F0 | 	shl	local05, #1
04de0     14 27 02 F1 | 	add	local05, local06
04de4     02 26 66 F0 | 	shl	local05, #2
04de8     03 00 00 FF 
04dec     00 E4 85 F1 | 	sub	objptr, ##1536
04df0     F2 26 02 F1 | 	add	local05, objptr
04df4     08 26 06 F1 | 	add	local05, #8
04df8     13 25 62 FC | 	wrlong	local04, local05
04dfc     03 00 00 FF 
04e00     00 E4 05 F1 | 	add	objptr, ##1536
04e04     F2 26 02 FB | 	rdlong	local05, objptr
04e08     01 26 06 F1 | 	add	local05, #1
04e0c     F2 26 62 FC | 	wrlong	local05, objptr
04e10     41 00 00 FF 
04e14     40 E4 85 F1 | 	sub	objptr, ##33344
04e18                 | '   t1.result_type=fun_converttoint
04e18                 | '   compiledline(lineptr)=t1: lineptr+=1 
04e18                 | '   return 0
04e18     00 FA 05 F6 | 	mov	result1, #0
04e1c     04 00 90 FD | 	jmp	#LR__0431
04e20                 | LR__0430
04e20                 | '   return err
04e20     12 FB 01 F6 | 	mov	result1, local04
04e24                 | LR__0431
04e24     A7 F0 03 F6 | 	mov	ptra, fp
04e28     B2 00 A0 FD | 	call	#popregs_
04e2c                 | _compile_converttoint_ret
04e2c     2D 00 64 FD | 	ret
04e30                 | 
04e30                 | ' 
04e30                 | ' 
04e30                 | ' function compile_fun_2p() as ulong
04e30                 | _compile_fun_2p
04e30     01 4A 05 F6 | 	mov	COUNT_, #1
04e34     A8 00 A0 FD | 	call	#pushregs_
04e38     94 1F B0 FD | 	call	#_expr
04e3c                 | ' 
04e3c                 | ' expr()
04e3c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04e3c     2E 00 00 FF 
04e40     08 E4 05 F1 | 	add	objptr, ##23560
04e44     F2 1E 02 FB | 	rdlong	local01, objptr
04e48     03 1E 66 F0 | 	shl	local01, #3
04e4c     02 00 00 FF 
04e50     38 E4 85 F1 | 	sub	objptr, ##1080
04e54     F2 1E 02 F1 | 	add	local01, objptr
04e58     04 1E 06 F1 | 	add	local01, #4
04e5c     0F 1F 02 FB | 	rdlong	local01, local01
04e60     11 1E 0E F2 | 	cmp	local01, #17 wz
04e64     2B 00 00 FF 
04e68     D0 E5 85 F1 | 	sub	objptr, ##22480
04e6c     15 FA 05 56 |  if_ne	mov	result1, #21
04e70     24 00 90 5D |  if_ne	jmp	#LR__0440
04e74     2E 00 00 FF 
04e78     08 E4 05 F1 | 	add	objptr, ##23560
04e7c     F2 1E 02 FB | 	rdlong	local01, objptr
04e80     01 1E 06 F1 | 	add	local01, #1
04e84     F2 1E 62 FC | 	wrlong	local01, objptr
04e88     2E 00 00 FF 
04e8c     08 E4 85 F1 | 	sub	objptr, ##23560
04e90     3C 1F B0 FD | 	call	#_expr
04e94     00 FA 05 F6 | 	mov	result1, #0
04e98                 | LR__0440
04e98     A7 F0 03 F6 | 	mov	ptra, fp
04e9c     B2 00 A0 FD | 	call	#popregs_
04ea0                 | _compile_fun_2p_ret
04ea0     2D 00 64 FD | 	ret
04ea4                 | 
04ea4                 | ' 
04ea4                 | ' function compile_fun_3p() as ulong
04ea4                 | _compile_fun_3p
04ea4     01 4A 05 F6 | 	mov	COUNT_, #1
04ea8     A8 00 A0 FD | 	call	#pushregs_
04eac     20 1F B0 FD | 	call	#_expr
04eb0                 | ' 
04eb0                 | ' expr()
04eb0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04eb0     2E 00 00 FF 
04eb4     08 E4 05 F1 | 	add	objptr, ##23560
04eb8     F2 1E 02 FB | 	rdlong	local01, objptr
04ebc     03 1E 66 F0 | 	shl	local01, #3
04ec0     02 00 00 FF 
04ec4     38 E4 85 F1 | 	sub	objptr, ##1080
04ec8     F2 1E 02 F1 | 	add	local01, objptr
04ecc     04 1E 06 F1 | 	add	local01, #4
04ed0     0F 1F 02 FB | 	rdlong	local01, local01
04ed4     11 1E 0E F2 | 	cmp	local01, #17 wz
04ed8     2B 00 00 FF 
04edc     D0 E5 85 F1 | 	sub	objptr, ##22480
04ee0     15 FA 05 56 |  if_ne	mov	result1, #21
04ee4     7C 00 90 5D |  if_ne	jmp	#LR__0450
04ee8     2E 00 00 FF 
04eec     08 E4 05 F1 | 	add	objptr, ##23560
04ef0     F2 1E 02 FB | 	rdlong	local01, objptr
04ef4     01 1E 06 F1 | 	add	local01, #1
04ef8     F2 1E 62 FC | 	wrlong	local01, objptr
04efc     2E 00 00 FF 
04f00     08 E4 85 F1 | 	sub	objptr, ##23560
04f04     C8 1E B0 FD | 	call	#_expr
04f08                 | ' expr()
04f08                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04f08     2E 00 00 FF 
04f0c     08 E4 05 F1 | 	add	objptr, ##23560
04f10     F2 1E 02 FB | 	rdlong	local01, objptr
04f14     03 1E 66 F0 | 	shl	local01, #3
04f18     02 00 00 FF 
04f1c     38 E4 85 F1 | 	sub	objptr, ##1080
04f20     F2 1E 02 F1 | 	add	local01, objptr
04f24     04 1E 06 F1 | 	add	local01, #4
04f28     0F 1F 02 FB | 	rdlong	local01, local01
04f2c     11 1E 0E F2 | 	cmp	local01, #17 wz
04f30     2B 00 00 FF 
04f34     D0 E5 85 F1 | 	sub	objptr, ##22480
04f38     15 FA 05 56 |  if_ne	mov	result1, #21
04f3c     24 00 90 5D |  if_ne	jmp	#LR__0450
04f40     2E 00 00 FF 
04f44     08 E4 05 F1 | 	add	objptr, ##23560
04f48     F2 1E 02 FB | 	rdlong	local01, objptr
04f4c     01 1E 06 F1 | 	add	local01, #1
04f50     F2 1E 62 FC | 	wrlong	local01, objptr
04f54     2E 00 00 FF 
04f58     08 E4 85 F1 | 	sub	objptr, ##23560
04f5c     70 1E B0 FD | 	call	#_expr
04f60     00 FA 05 F6 | 	mov	result1, #0
04f64                 | LR__0450
04f64     A7 F0 03 F6 | 	mov	ptra, fp
04f68     B2 00 A0 FD | 	call	#popregs_
04f6c                 | _compile_fun_3p_ret
04f6c     2D 00 64 FD | 	ret
04f70                 | 
04f70                 | ' 
04f70                 | ' function compile_fun_4p() as ulong
04f70                 | _compile_fun_4p
04f70     01 4A 05 F6 | 	mov	COUNT_, #1
04f74     A8 00 A0 FD | 	call	#pushregs_
04f78     54 1E B0 FD | 	call	#_expr
04f7c                 | ' 
04f7c                 | ' expr()
04f7c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04f7c     2E 00 00 FF 
04f80     08 E4 05 F1 | 	add	objptr, ##23560
04f84     F2 1E 02 FB | 	rdlong	local01, objptr
04f88     03 1E 66 F0 | 	shl	local01, #3
04f8c     02 00 00 FF 
04f90     38 E4 85 F1 | 	sub	objptr, ##1080
04f94     F2 1E 02 F1 | 	add	local01, objptr
04f98     04 1E 06 F1 | 	add	local01, #4
04f9c     0F 1F 02 FB | 	rdlong	local01, local01
04fa0     11 1E 0E F2 | 	cmp	local01, #17 wz
04fa4     2B 00 00 FF 
04fa8     D0 E5 85 F1 | 	sub	objptr, ##22480
04fac     15 FA 05 56 |  if_ne	mov	result1, #21
04fb0     D4 00 90 5D |  if_ne	jmp	#LR__0460
04fb4     2E 00 00 FF 
04fb8     08 E4 05 F1 | 	add	objptr, ##23560
04fbc     F2 1E 02 FB | 	rdlong	local01, objptr
04fc0     01 1E 06 F1 | 	add	local01, #1
04fc4     F2 1E 62 FC | 	wrlong	local01, objptr
04fc8     2E 00 00 FF 
04fcc     08 E4 85 F1 | 	sub	objptr, ##23560
04fd0     FC 1D B0 FD | 	call	#_expr
04fd4                 | ' expr()
04fd4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04fd4     2E 00 00 FF 
04fd8     08 E4 05 F1 | 	add	objptr, ##23560
04fdc     F2 1E 02 FB | 	rdlong	local01, objptr
04fe0     03 1E 66 F0 | 	shl	local01, #3
04fe4     02 00 00 FF 
04fe8     38 E4 85 F1 | 	sub	objptr, ##1080
04fec     F2 1E 02 F1 | 	add	local01, objptr
04ff0     04 1E 06 F1 | 	add	local01, #4
04ff4     0F 1F 02 FB | 	rdlong	local01, local01
04ff8     11 1E 0E F2 | 	cmp	local01, #17 wz
04ffc     2B 00 00 FF 
05000     D0 E5 85 F1 | 	sub	objptr, ##22480
05004     15 FA 05 56 |  if_ne	mov	result1, #21
05008     7C 00 90 5D |  if_ne	jmp	#LR__0460
0500c     2E 00 00 FF 
05010     08 E4 05 F1 | 	add	objptr, ##23560
05014     F2 1E 02 FB | 	rdlong	local01, objptr
05018     01 1E 06 F1 | 	add	local01, #1
0501c     F2 1E 62 FC | 	wrlong	local01, objptr
05020     2E 00 00 FF 
05024     08 E4 85 F1 | 	sub	objptr, ##23560
05028     A4 1D B0 FD | 	call	#_expr
0502c                 | ' expr()
0502c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0502c     2E 00 00 FF 
05030     08 E4 05 F1 | 	add	objptr, ##23560
05034     F2 1E 02 FB | 	rdlong	local01, objptr
05038     03 1E 66 F0 | 	shl	local01, #3
0503c     02 00 00 FF 
05040     38 E4 85 F1 | 	sub	objptr, ##1080
05044     F2 1E 02 F1 | 	add	local01, objptr
05048     04 1E 06 F1 | 	add	local01, #4
0504c     0F 1F 02 FB | 	rdlong	local01, local01
05050     11 1E 0E F2 | 	cmp	local01, #17 wz
05054     2B 00 00 FF 
05058     D0 E5 85 F1 | 	sub	objptr, ##22480
0505c     15 FA 05 56 |  if_ne	mov	result1, #21
05060     24 00 90 5D |  if_ne	jmp	#LR__0460
05064     2E 00 00 FF 
05068     08 E4 05 F1 | 	add	objptr, ##23560
0506c     F2 1E 02 FB | 	rdlong	local01, objptr
05070     01 1E 06 F1 | 	add	local01, #1
05074     F2 1E 62 FC | 	wrlong	local01, objptr
05078     2E 00 00 FF 
0507c     08 E4 85 F1 | 	sub	objptr, ##23560
05080     4C 1D B0 FD | 	call	#_expr
05084     00 FA 05 F6 | 	mov	result1, #0
05088                 | LR__0460
05088     A7 F0 03 F6 | 	mov	ptra, fp
0508c     B2 00 A0 FD | 	call	#popregs_
05090                 | _compile_fun_4p_ret
05090     2D 00 64 FD | 	ret
05094                 | 
05094                 | ' 
05094                 | ' 
05094                 | ' function compile_fun_5p() as ulong
05094                 | _compile_fun_5p
05094     01 4A 05 F6 | 	mov	COUNT_, #1
05098     A8 00 A0 FD | 	call	#pushregs_
0509c     30 1D B0 FD | 	call	#_expr
050a0                 | ' 
050a0                 | ' expr()
050a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
050a0     2E 00 00 FF 
050a4     08 E4 05 F1 | 	add	objptr, ##23560
050a8     F2 1E 02 FB | 	rdlong	local01, objptr
050ac     03 1E 66 F0 | 	shl	local01, #3
050b0     02 00 00 FF 
050b4     38 E4 85 F1 | 	sub	objptr, ##1080
050b8     F2 1E 02 F1 | 	add	local01, objptr
050bc     04 1E 06 F1 | 	add	local01, #4
050c0     0F 1F 02 FB | 	rdlong	local01, local01
050c4     11 1E 0E F2 | 	cmp	local01, #17 wz
050c8     2B 00 00 FF 
050cc     D0 E5 85 F1 | 	sub	objptr, ##22480
050d0     15 FA 05 56 |  if_ne	mov	result1, #21
050d4     2C 01 90 5D |  if_ne	jmp	#LR__0470
050d8     2E 00 00 FF 
050dc     08 E4 05 F1 | 	add	objptr, ##23560
050e0     F2 1E 02 FB | 	rdlong	local01, objptr
050e4     01 1E 06 F1 | 	add	local01, #1
050e8     F2 1E 62 FC | 	wrlong	local01, objptr
050ec     2E 00 00 FF 
050f0     08 E4 85 F1 | 	sub	objptr, ##23560
050f4     D8 1C B0 FD | 	call	#_expr
050f8                 | ' expr()
050f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
050f8     2E 00 00 FF 
050fc     08 E4 05 F1 | 	add	objptr, ##23560
05100     F2 1E 02 FB | 	rdlong	local01, objptr
05104     03 1E 66 F0 | 	shl	local01, #3
05108     02 00 00 FF 
0510c     38 E4 85 F1 | 	sub	objptr, ##1080
05110     F2 1E 02 F1 | 	add	local01, objptr
05114     04 1E 06 F1 | 	add	local01, #4
05118     0F 1F 02 FB | 	rdlong	local01, local01
0511c     11 1E 0E F2 | 	cmp	local01, #17 wz
05120     2B 00 00 FF 
05124     D0 E5 85 F1 | 	sub	objptr, ##22480
05128     15 FA 05 56 |  if_ne	mov	result1, #21
0512c     D4 00 90 5D |  if_ne	jmp	#LR__0470
05130     2E 00 00 FF 
05134     08 E4 05 F1 | 	add	objptr, ##23560
05138     F2 1E 02 FB | 	rdlong	local01, objptr
0513c     01 1E 06 F1 | 	add	local01, #1
05140     F2 1E 62 FC | 	wrlong	local01, objptr
05144     2E 00 00 FF 
05148     08 E4 85 F1 | 	sub	objptr, ##23560
0514c     80 1C B0 FD | 	call	#_expr
05150                 | ' expr()
05150                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05150     2E 00 00 FF 
05154     08 E4 05 F1 | 	add	objptr, ##23560
05158     F2 1E 02 FB | 	rdlong	local01, objptr
0515c     03 1E 66 F0 | 	shl	local01, #3
05160     02 00 00 FF 
05164     38 E4 85 F1 | 	sub	objptr, ##1080
05168     F2 1E 02 F1 | 	add	local01, objptr
0516c     04 1E 06 F1 | 	add	local01, #4
05170     0F 1F 02 FB | 	rdlong	local01, local01
05174     11 1E 0E F2 | 	cmp	local01, #17 wz
05178     2B 00 00 FF 
0517c     D0 E5 85 F1 | 	sub	objptr, ##22480
05180     15 FA 05 56 |  if_ne	mov	result1, #21
05184     7C 00 90 5D |  if_ne	jmp	#LR__0470
05188     2E 00 00 FF 
0518c     08 E4 05 F1 | 	add	objptr, ##23560
05190     F2 1E 02 FB | 	rdlong	local01, objptr
05194     01 1E 06 F1 | 	add	local01, #1
05198     F2 1E 62 FC | 	wrlong	local01, objptr
0519c     2E 00 00 FF 
051a0     08 E4 85 F1 | 	sub	objptr, ##23560
051a4     28 1C B0 FD | 	call	#_expr
051a8                 | ' expr()
051a8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
051a8     2E 00 00 FF 
051ac     08 E4 05 F1 | 	add	objptr, ##23560
051b0     F2 1E 02 FB | 	rdlong	local01, objptr
051b4     03 1E 66 F0 | 	shl	local01, #3
051b8     02 00 00 FF 
051bc     38 E4 85 F1 | 	sub	objptr, ##1080
051c0     F2 1E 02 F1 | 	add	local01, objptr
051c4     04 1E 06 F1 | 	add	local01, #4
051c8     0F 1F 02 FB | 	rdlong	local01, local01
051cc     11 1E 0E F2 | 	cmp	local01, #17 wz
051d0     2B 00 00 FF 
051d4     D0 E5 85 F1 | 	sub	objptr, ##22480
051d8     15 FA 05 56 |  if_ne	mov	result1, #21
051dc     24 00 90 5D |  if_ne	jmp	#LR__0470
051e0     2E 00 00 FF 
051e4     08 E4 05 F1 | 	add	objptr, ##23560
051e8     F2 1E 02 FB | 	rdlong	local01, objptr
051ec     01 1E 06 F1 | 	add	local01, #1
051f0     F2 1E 62 FC | 	wrlong	local01, objptr
051f4     2E 00 00 FF 
051f8     08 E4 85 F1 | 	sub	objptr, ##23560
051fc     D0 1B B0 FD | 	call	#_expr
05200     00 FA 05 F6 | 	mov	result1, #0
05204                 | LR__0470
05204     A7 F0 03 F6 | 	mov	ptra, fp
05208     B2 00 A0 FD | 	call	#popregs_
0520c                 | _compile_fun_5p_ret
0520c     2D 00 64 FD | 	ret
05210                 | 
05210                 | ' 
05210                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
05210                 | _compile_fun_varp
05210     02 4A 05 F6 | 	mov	COUNT_, #2
05214     A8 00 A0 FD | 	call	#pushregs_
05218     00 1E 06 F6 | 	mov	local01, #0
0521c                 | ' i=0
0521c                 | ' if lparts(ct).token<>token_end then
0521c     2E 00 00 FF 
05220     08 E4 05 F1 | 	add	objptr, ##23560
05224     F2 20 02 FB | 	rdlong	local02, objptr
05228     03 20 66 F0 | 	shl	local02, #3
0522c     02 00 00 FF 
05230     38 E4 85 F1 | 	sub	objptr, ##1080
05234     F2 20 02 F1 | 	add	local02, objptr
05238     04 20 06 F1 | 	add	local02, #4
0523c     10 21 02 FB | 	rdlong	local02, local02
05240     FE 21 0E F2 | 	cmp	local02, #510 wz
05244     2B 00 00 FF 
05248     D0 E5 85 F1 | 	sub	objptr, ##22480
0524c     5C 00 90 AD |  if_e	jmp	#LR__0482
05250                 | '   do
05250                 | LR__0480
05250     7C 1B B0 FD | 	call	#_expr
05254     01 1E 06 F1 | 	add	local01, #1
05258                 | '   expr()
05258                 | '    i+=1
05258                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
05258     2E 00 00 FF 
0525c     08 E4 05 F1 | 	add	objptr, ##23560
05260     F2 20 02 FB | 	rdlong	local02, objptr
05264     03 20 66 F0 | 	shl	local02, #3
05268     02 00 00 FF 
0526c     38 E4 85 F1 | 	sub	objptr, ##1080
05270     F2 20 02 F1 | 	add	local02, objptr
05274     04 20 06 F1 | 	add	local02, #4
05278     10 21 02 FB | 	rdlong	local02, local02
0527c     11 20 0E F2 | 	cmp	local02, #17 wz
05280     2B 00 00 FF 
05284     D0 E5 85 F1 | 	sub	objptr, ##22480
05288     20 00 90 5D |  if_ne	jmp	#LR__0481
0528c     2E 00 00 FF 
05290     08 E4 05 F1 | 	add	objptr, ##23560
05294     F2 20 02 FB | 	rdlong	local02, objptr
05298     01 20 06 F1 | 	add	local02, #1
0529c     F2 20 62 FC | 	wrlong	local02, objptr
052a0     2E 00 00 FF 
052a4     08 E4 85 F1 | 	sub	objptr, ##23560
052a8     A4 FF 9F FD | 	jmp	#LR__0480
052ac                 | LR__0481
052ac                 | LR__0482
052ac                 | ' return i
052ac     0F FB 01 F6 | 	mov	result1, local01
052b0     A7 F0 03 F6 | 	mov	ptra, fp
052b4     B2 00 A0 FD | 	call	#popregs_
052b8                 | _compile_fun_varp_ret
052b8     2D 00 64 FD | 	ret
052bc                 | 
052bc                 | ' 
052bc                 | ' 
052bc                 | ' function compile_int_fun_2p() as ulong
052bc                 | _compile_int_fun_2p
052bc     01 4A 05 F6 | 	mov	COUNT_, #1
052c0     A8 00 A0 FD | 	call	#pushregs_
052c4     80 FA BF FD | 	call	#_compile_converttoint
052c8     FD 1E 02 F6 | 	mov	local01, result1
052cc                 | ' err=compile_converttoint() : if err>0 then return err
052cc     01 1E 56 F2 | 	cmps	local01, #1 wc
052d0     0F FB 01 36 |  if_ae	mov	result1, local01
052d4     58 00 90 3D |  if_ae	jmp	#LR__0490
052d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052d8     2E 00 00 FF 
052dc     08 E4 05 F1 | 	add	objptr, ##23560
052e0     F2 1E 02 FB | 	rdlong	local01, objptr
052e4     03 1E 66 F0 | 	shl	local01, #3
052e8     02 00 00 FF 
052ec     38 E4 85 F1 | 	sub	objptr, ##1080
052f0     F2 1E 02 F1 | 	add	local01, objptr
052f4     04 1E 06 F1 | 	add	local01, #4
052f8     0F 1F 02 FB | 	rdlong	local01, local01
052fc     11 1E 0E F2 | 	cmp	local01, #17 wz
05300     2B 00 00 FF 
05304     D0 E5 85 F1 | 	sub	objptr, ##22480
05308     15 FA 05 56 |  if_ne	mov	result1, #21
0530c     20 00 90 5D |  if_ne	jmp	#LR__0490
05310     2E 00 00 FF 
05314     08 E4 05 F1 | 	add	objptr, ##23560
05318     F2 1E 02 FB | 	rdlong	local01, objptr
0531c     01 1E 06 F1 | 	add	local01, #1
05320     F2 1E 62 FC | 	wrlong	local01, objptr
05324     2E 00 00 FF 
05328     08 E4 85 F1 | 	sub	objptr, ##23560
0532c     18 FA BF FD | 	call	#_compile_converttoint
05330                 | ' err=compile_converttoint() 
05330                 | ' return err
05330                 | LR__0490
05330     A7 F0 03 F6 | 	mov	ptra, fp
05334     B2 00 A0 FD | 	call	#popregs_
05338                 | _compile_int_fun_2p_ret
05338     2D 00 64 FD | 	ret
0533c                 | 
0533c                 | ' 
0533c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0533c                 | _compile_print
0533c     0B 4A 05 F6 | 	mov	COUNT_, #11
05340     A8 00 A0 FD | 	call	#pushregs_
05344     00 1E 06 F6 | 	mov	local01, #0
05348     1D 22 06 F6 | 	mov	local03, #29
0534c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0534c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0534c     2E 00 00 FF 
05350     08 E4 05 F1 | 	add	objptr, ##23560
05354     F2 24 02 FB | 	rdlong	local04, objptr
05358     03 24 66 F0 | 	shl	local04, #3
0535c     02 00 00 FF 
05360     38 E4 85 F1 | 	sub	objptr, ##1080
05364     F2 24 02 F1 | 	add	local04, objptr
05368     04 24 06 F1 | 	add	local04, #4
0536c     12 25 02 FB | 	rdlong	local04, local04
05370     FE 25 0E F2 | 	cmp	local04, #510 wz
05374     2B 00 00 FF 
05378     D0 E5 85 F1 | 	sub	objptr, ##22480
0537c     68 01 90 5D |  if_ne	jmp	#LR__0500
05380     20 22 06 F6 | 	mov	local03, #32
05384     0F 27 02 F6 | 	mov	local05, local01
05388     10 29 02 F6 | 	mov	local06, local02
0538c     11 2B 02 F6 | 	mov	local07, local03
05390     41 00 00 FF 
05394     40 E4 05 F1 | 	add	objptr, ##33344
05398     F2 2C 02 FB | 	rdlong	local08, objptr
0539c     16 2F 02 F6 | 	mov	local09, local08
053a0     01 2E 66 F0 | 	shl	local09, #1
053a4     16 2F 02 F1 | 	add	local09, local08
053a8     02 2E 66 F0 | 	shl	local09, #2
053ac     03 00 00 FF 
053b0     00 E4 85 F1 | 	sub	objptr, ##1536
053b4     F2 2E 02 F1 | 	add	local09, objptr
053b8     17 27 62 FC | 	wrlong	local05, local09
053bc     03 00 00 FF 
053c0     00 E4 05 F1 | 	add	objptr, ##1536
053c4     F2 26 02 FB | 	rdlong	local05, objptr
053c8     13 31 02 F6 | 	mov	local10, local05
053cc     01 30 66 F0 | 	shl	local10, #1
053d0     13 31 02 F1 | 	add	local10, local05
053d4     02 30 66 F0 | 	shl	local10, #2
053d8     03 00 00 FF 
053dc     00 E4 85 F1 | 	sub	objptr, ##1536
053e0     F2 30 02 F1 | 	add	local10, objptr
053e4     04 30 06 F1 | 	add	local10, #4
053e8     18 29 62 FC | 	wrlong	local06, local10
053ec     03 00 00 FF 
053f0     00 E4 05 F1 | 	add	objptr, ##1536
053f4     F2 26 02 FB | 	rdlong	local05, objptr
053f8     13 33 02 F6 | 	mov	local11, local05
053fc     01 32 66 F0 | 	shl	local11, #1
05400     13 33 02 F1 | 	add	local11, local05
05404     02 32 66 F0 | 	shl	local11, #2
05408     03 00 00 FF 
0540c     00 E4 85 F1 | 	sub	objptr, ##1536
05410     F2 32 02 F1 | 	add	local11, objptr
05414     08 32 06 F1 | 	add	local11, #8
05418     19 2B 62 FC | 	wrlong	local07, local11
0541c     03 00 00 FF 
05420     00 E4 05 F1 | 	add	objptr, ##1536
05424     F2 26 02 FB | 	rdlong	local05, objptr
05428     01 26 06 F1 | 	add	local05, #1
0542c     F2 26 62 FC | 	wrlong	local05, objptr
05430     44 22 06 F6 | 	mov	local03, #68
05434     0F 27 02 F6 | 	mov	local05, local01
05438     10 29 02 F6 | 	mov	local06, local02
0543c     11 2B 02 F6 | 	mov	local07, local03
05440     F2 2C 02 FB | 	rdlong	local08, objptr
05444     16 2F 02 F6 | 	mov	local09, local08
05448     01 2E 66 F0 | 	shl	local09, #1
0544c     16 2F 02 F1 | 	add	local09, local08
05450     02 2E 66 F0 | 	shl	local09, #2
05454     03 00 00 FF 
05458     00 E4 85 F1 | 	sub	objptr, ##1536
0545c     F2 2E 02 F1 | 	add	local09, objptr
05460     17 27 62 FC | 	wrlong	local05, local09
05464     03 00 00 FF 
05468     00 E4 05 F1 | 	add	objptr, ##1536
0546c     F2 32 02 FB | 	rdlong	local11, objptr
05470     19 31 02 F6 | 	mov	local10, local11
05474     01 30 66 F0 | 	shl	local10, #1
05478     19 31 02 F1 | 	add	local10, local11
0547c     02 30 66 F0 | 	shl	local10, #2
05480     03 00 00 FF 
05484     00 E4 85 F1 | 	sub	objptr, ##1536
05488     F2 30 02 F1 | 	add	local10, objptr
0548c     04 30 06 F1 | 	add	local10, #4
05490     18 29 62 FC | 	wrlong	local06, local10
05494     03 00 00 FF 
05498     00 E4 05 F1 | 	add	objptr, ##1536
0549c     F2 30 02 FB | 	rdlong	local10, objptr
054a0     18 33 02 F6 | 	mov	local11, local10
054a4     01 32 66 F0 | 	shl	local11, #1
054a8     18 33 02 F1 | 	add	local11, local10
054ac     02 32 66 F0 | 	shl	local11, #2
054b0     03 00 00 FF 
054b4     00 E4 85 F1 | 	sub	objptr, ##1536
054b8     F2 32 02 F1 | 	add	local11, objptr
054bc     08 32 06 F1 | 	add	local11, #8
054c0     19 2B 62 FC | 	wrlong	local07, local11
054c4     03 00 00 FF 
054c8     00 E4 05 F1 | 	add	objptr, ##1536
054cc     F2 26 02 FB | 	rdlong	local05, objptr
054d0     01 26 06 F1 | 	add	local05, #1
054d4     F2 26 62 FC | 	wrlong	local05, objptr
054d8     41 00 00 FF 
054dc     40 E4 85 F1 | 	sub	objptr, ##33344
054e0     00 FA 05 F6 | 	mov	result1, #0
054e4     20 05 90 FD | 	jmp	#LR__0507
054e8                 | LR__0500
054e8                 | ' do
054e8                 | LR__0501
054e8     E4 18 B0 FD | 	call	#_expr
054ec                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
054ec                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
054ec     2E 00 00 FF 
054f0     08 E4 05 F1 | 	add	objptr, ##23560
054f4     F2 24 02 FB | 	rdlong	local04, objptr
054f8     03 24 66 F0 | 	shl	local04, #3
054fc     02 00 00 FF 
05500     38 E4 85 F1 | 	sub	objptr, ##1080
05504     F2 24 02 F1 | 	add	local04, objptr
05508     04 24 06 F1 | 	add	local04, #4
0550c     12 2D 02 FB | 	rdlong	local08, local04
05510     11 2C 0E F2 | 	cmp	local08, #17 wz
05514     2B 00 00 FF 
05518     D0 E5 85 F1 | 	sub	objptr, ##22480
0551c     60 01 90 5D |  if_ne	jmp	#LR__0502
05520     21 22 06 F6 | 	mov	local03, #33
05524     0F 27 02 F6 | 	mov	local05, local01
05528     10 29 02 F6 | 	mov	local06, local02
0552c     11 2B 02 F6 | 	mov	local07, local03
05530     41 00 00 FF 
05534     40 E4 05 F1 | 	add	objptr, ##33344
05538     F2 2C 02 FB | 	rdlong	local08, objptr
0553c     16 2F 02 F6 | 	mov	local09, local08
05540     01 2E 66 F0 | 	shl	local09, #1
05544     16 2F 02 F1 | 	add	local09, local08
05548     02 2E 66 F0 | 	shl	local09, #2
0554c     03 00 00 FF 
05550     00 E4 85 F1 | 	sub	objptr, ##1536
05554     F2 2E 02 F1 | 	add	local09, objptr
05558     17 27 62 FC | 	wrlong	local05, local09
0555c     03 00 00 FF 
05560     00 E4 05 F1 | 	add	objptr, ##1536
05564     F2 32 02 FB | 	rdlong	local11, objptr
05568     19 31 02 F6 | 	mov	local10, local11
0556c     01 30 66 F0 | 	shl	local10, #1
05570     19 31 02 F1 | 	add	local10, local11
05574     02 30 66 F0 | 	shl	local10, #2
05578     03 00 00 FF 
0557c     00 E4 85 F1 | 	sub	objptr, ##1536
05580     F2 30 02 F1 | 	add	local10, objptr
05584     04 30 06 F1 | 	add	local10, #4
05588     18 29 62 FC | 	wrlong	local06, local10
0558c     03 00 00 FF 
05590     00 E4 05 F1 | 	add	objptr, ##1536
05594     F2 26 02 FB | 	rdlong	local05, objptr
05598     13 33 02 F6 | 	mov	local11, local05
0559c     01 32 66 F0 | 	shl	local11, #1
055a0     13 33 02 F1 | 	add	local11, local05
055a4     02 32 66 F0 | 	shl	local11, #2
055a8     03 00 00 FF 
055ac     00 E4 85 F1 | 	sub	objptr, ##1536
055b0     F2 32 02 F1 | 	add	local11, objptr
055b4     08 32 06 F1 | 	add	local11, #8
055b8     19 2B 62 FC | 	wrlong	local07, local11
055bc     03 00 00 FF 
055c0     00 E4 05 F1 | 	add	objptr, ##1536
055c4     F2 26 02 FB | 	rdlong	local05, objptr
055c8     01 26 06 F1 | 	add	local05, #1
055cc     F2 26 62 FC | 	wrlong	local05, objptr
055d0     44 22 06 F6 | 	mov	local03, #68
055d4     0F 27 02 F6 | 	mov	local05, local01
055d8     10 29 02 F6 | 	mov	local06, local02
055dc     11 2B 02 F6 | 	mov	local07, local03
055e0     F2 2C 02 FB | 	rdlong	local08, objptr
055e4     16 2F 02 F6 | 	mov	local09, local08
055e8     01 2E 66 F0 | 	shl	local09, #1
055ec     16 2F 02 F1 | 	add	local09, local08
055f0     02 2E 66 F0 | 	shl	local09, #2
055f4     03 00 00 FF 
055f8     00 E4 85 F1 | 	sub	objptr, ##1536
055fc     F2 2E 02 F1 | 	add	local09, objptr
05600     17 27 62 FC | 	wrlong	local05, local09
05604     03 00 00 FF 
05608     00 E4 05 F1 | 	add	objptr, ##1536
0560c     F2 32 02 FB | 	rdlong	local11, objptr
05610     19 31 02 F6 | 	mov	local10, local11
05614     01 30 66 F0 | 	shl	local10, #1
05618     19 31 02 F1 | 	add	local10, local11
0561c     02 30 66 F0 | 	shl	local10, #2
05620     03 00 00 FF 
05624     00 E4 85 F1 | 	sub	objptr, ##1536
05628     F2 30 02 F1 | 	add	local10, objptr
0562c     04 30 06 F1 | 	add	local10, #4
05630     18 29 62 FC | 	wrlong	local06, local10
05634     03 00 00 FF 
05638     00 E4 05 F1 | 	add	objptr, ##1536
0563c     F2 30 02 FB | 	rdlong	local10, objptr
05640     18 33 02 F6 | 	mov	local11, local10
05644     01 32 66 F0 | 	shl	local11, #1
05648     18 33 02 F1 | 	add	local11, local10
0564c     02 32 66 F0 | 	shl	local11, #2
05650     03 00 00 FF 
05654     00 E4 85 F1 | 	sub	objptr, ##1536
05658     F2 32 02 F1 | 	add	local11, objptr
0565c     08 32 06 F1 | 	add	local11, #8
05660     19 2B 62 FC | 	wrlong	local07, local11
05664     03 00 00 FF 
05668     00 E4 05 F1 | 	add	objptr, ##1536
0566c     F2 26 02 FB | 	rdlong	local05, objptr
05670     01 26 06 F1 | 	add	local05, #1
05674     F2 26 62 FC | 	wrlong	local05, objptr
05678     41 00 00 FF 
0567c     40 E4 85 F1 | 	sub	objptr, ##33344
05680                 | LR__0502
05680                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05680     2E 00 00 FF 
05684     08 E4 05 F1 | 	add	objptr, ##23560
05688     F2 24 02 FB | 	rdlong	local04, objptr
0568c     03 24 66 F0 | 	shl	local04, #3
05690     02 00 00 FF 
05694     38 E4 85 F1 | 	sub	objptr, ##1080
05698     F2 24 02 F1 | 	add	local04, objptr
0569c     04 24 06 F1 | 	add	local04, #4
056a0     12 2D 02 FB | 	rdlong	local08, local04
056a4     12 2C 0E F2 | 	cmp	local08, #18 wz
056a8     2B 00 00 FF 
056ac     D0 E5 85 F1 | 	sub	objptr, ##22480
056b0     60 01 90 5D |  if_ne	jmp	#LR__0503
056b4     22 22 06 F6 | 	mov	local03, #34
056b8     0F 27 02 F6 | 	mov	local05, local01
056bc     10 29 02 F6 | 	mov	local06, local02
056c0     11 2B 02 F6 | 	mov	local07, local03
056c4     41 00 00 FF 
056c8     40 E4 05 F1 | 	add	objptr, ##33344
056cc     F2 2C 02 FB | 	rdlong	local08, objptr
056d0     16 2F 02 F6 | 	mov	local09, local08
056d4     01 2E 66 F0 | 	shl	local09, #1
056d8     16 2F 02 F1 | 	add	local09, local08
056dc     02 2E 66 F0 | 	shl	local09, #2
056e0     03 00 00 FF 
056e4     00 E4 85 F1 | 	sub	objptr, ##1536
056e8     F2 2E 02 F1 | 	add	local09, objptr
056ec     17 27 62 FC | 	wrlong	local05, local09
056f0     03 00 00 FF 
056f4     00 E4 05 F1 | 	add	objptr, ##1536
056f8     F2 32 02 FB | 	rdlong	local11, objptr
056fc     19 31 02 F6 | 	mov	local10, local11
05700     01 30 66 F0 | 	shl	local10, #1
05704     19 31 02 F1 | 	add	local10, local11
05708     02 30 66 F0 | 	shl	local10, #2
0570c     03 00 00 FF 
05710     00 E4 85 F1 | 	sub	objptr, ##1536
05714     F2 30 02 F1 | 	add	local10, objptr
05718     04 30 06 F1 | 	add	local10, #4
0571c     18 29 62 FC | 	wrlong	local06, local10
05720     03 00 00 FF 
05724     00 E4 05 F1 | 	add	objptr, ##1536
05728     F2 26 02 FB | 	rdlong	local05, objptr
0572c     13 33 02 F6 | 	mov	local11, local05
05730     01 32 66 F0 | 	shl	local11, #1
05734     13 33 02 F1 | 	add	local11, local05
05738     02 32 66 F0 | 	shl	local11, #2
0573c     03 00 00 FF 
05740     00 E4 85 F1 | 	sub	objptr, ##1536
05744     F2 32 02 F1 | 	add	local11, objptr
05748     08 32 06 F1 | 	add	local11, #8
0574c     19 2B 62 FC | 	wrlong	local07, local11
05750     03 00 00 FF 
05754     00 E4 05 F1 | 	add	objptr, ##1536
05758     F2 26 02 FB | 	rdlong	local05, objptr
0575c     01 26 06 F1 | 	add	local05, #1
05760     F2 26 62 FC | 	wrlong	local05, objptr
05764     44 22 06 F6 | 	mov	local03, #68
05768     0F 27 02 F6 | 	mov	local05, local01
0576c     10 29 02 F6 | 	mov	local06, local02
05770     11 2B 02 F6 | 	mov	local07, local03
05774     F2 2C 02 FB | 	rdlong	local08, objptr
05778     16 2F 02 F6 | 	mov	local09, local08
0577c     01 2E 66 F0 | 	shl	local09, #1
05780     16 2F 02 F1 | 	add	local09, local08
05784     02 2E 66 F0 | 	shl	local09, #2
05788     03 00 00 FF 
0578c     00 E4 85 F1 | 	sub	objptr, ##1536
05790     F2 2E 02 F1 | 	add	local09, objptr
05794     17 27 62 FC | 	wrlong	local05, local09
05798     03 00 00 FF 
0579c     00 E4 05 F1 | 	add	objptr, ##1536
057a0     F2 32 02 FB | 	rdlong	local11, objptr
057a4     19 31 02 F6 | 	mov	local10, local11
057a8     01 30 66 F0 | 	shl	local10, #1
057ac     19 31 02 F1 | 	add	local10, local11
057b0     02 30 66 F0 | 	shl	local10, #2
057b4     03 00 00 FF 
057b8     00 E4 85 F1 | 	sub	objptr, ##1536
057bc     F2 30 02 F1 | 	add	local10, objptr
057c0     04 30 06 F1 | 	add	local10, #4
057c4     18 29 62 FC | 	wrlong	local06, local10
057c8     03 00 00 FF 
057cc     00 E4 05 F1 | 	add	objptr, ##1536
057d0     F2 30 02 FB | 	rdlong	local10, objptr
057d4     18 33 02 F6 | 	mov	local11, local10
057d8     01 32 66 F0 | 	shl	local11, #1
057dc     18 33 02 F1 | 	add	local11, local10
057e0     02 32 66 F0 | 	shl	local11, #2
057e4     03 00 00 FF 
057e8     00 E4 85 F1 | 	sub	objptr, ##1536
057ec     F2 32 02 F1 | 	add	local11, objptr
057f0     08 32 06 F1 | 	add	local11, #8
057f4     19 2B 62 FC | 	wrlong	local07, local11
057f8     03 00 00 FF 
057fc     00 E4 05 F1 | 	add	objptr, ##1536
05800     F2 26 02 FB | 	rdlong	local05, objptr
05804     01 26 06 F1 | 	add	local05, #1
05808     F2 26 62 FC | 	wrlong	local05, objptr
0580c     41 00 00 FF 
05810     40 E4 85 F1 | 	sub	objptr, ##33344
05814                 | LR__0503
05814                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05814     2E 00 00 FF 
05818     08 E4 05 F1 | 	add	objptr, ##23560
0581c     F2 24 02 FB | 	rdlong	local04, objptr
05820     03 24 66 F0 | 	shl	local04, #3
05824     02 00 00 FF 
05828     38 E4 85 F1 | 	sub	objptr, ##1080
0582c     F2 24 02 F1 | 	add	local04, objptr
05830     04 24 06 F1 | 	add	local04, #4
05834     12 2D 02 FB | 	rdlong	local08, local04
05838     FE 2D 0E F2 | 	cmp	local08, #510 wz
0583c     2B 00 00 FF 
05840     D0 E5 85 F1 | 	sub	objptr, ##22480
05844     B8 00 90 5D |  if_ne	jmp	#LR__0504
05848     44 22 06 F6 | 	mov	local03, #68
0584c     0F 27 02 F6 | 	mov	local05, local01
05850     10 29 02 F6 | 	mov	local06, local02
05854     11 2B 02 F6 | 	mov	local07, local03
05858     41 00 00 FF 
0585c     40 E4 05 F1 | 	add	objptr, ##33344
05860     F2 2C 02 FB | 	rdlong	local08, objptr
05864     16 2F 02 F6 | 	mov	local09, local08
05868     01 2E 66 F0 | 	shl	local09, #1
0586c     16 2F 02 F1 | 	add	local09, local08
05870     02 2E 66 F0 | 	shl	local09, #2
05874     03 00 00 FF 
05878     00 E4 85 F1 | 	sub	objptr, ##1536
0587c     F2 2E 02 F1 | 	add	local09, objptr
05880     17 27 62 FC | 	wrlong	local05, local09
05884     03 00 00 FF 
05888     00 E4 05 F1 | 	add	objptr, ##1536
0588c     F2 32 02 FB | 	rdlong	local11, objptr
05890     19 31 02 F6 | 	mov	local10, local11
05894     01 30 66 F0 | 	shl	local10, #1
05898     19 31 02 F1 | 	add	local10, local11
0589c     02 30 66 F0 | 	shl	local10, #2
058a0     03 00 00 FF 
058a4     00 E4 85 F1 | 	sub	objptr, ##1536
058a8     F2 30 02 F1 | 	add	local10, objptr
058ac     04 30 06 F1 | 	add	local10, #4
058b0     18 29 62 FC | 	wrlong	local06, local10
058b4     03 00 00 FF 
058b8     00 E4 05 F1 | 	add	objptr, ##1536
058bc     F2 30 02 FB | 	rdlong	local10, objptr
058c0     18 33 02 F6 | 	mov	local11, local10
058c4     01 32 66 F0 | 	shl	local11, #1
058c8     18 33 02 F1 | 	add	local11, local10
058cc     02 32 66 F0 | 	shl	local11, #2
058d0     03 00 00 FF 
058d4     00 E4 85 F1 | 	sub	objptr, ##1536
058d8     F2 32 02 F1 | 	add	local11, objptr
058dc     08 32 06 F1 | 	add	local11, #8
058e0     19 2B 62 FC | 	wrlong	local07, local11
058e4     03 00 00 FF 
058e8     00 E4 05 F1 | 	add	objptr, ##1536
058ec     F2 26 02 FB | 	rdlong	local05, objptr
058f0     01 26 06 F1 | 	add	local05, #1
058f4     F2 26 62 FC | 	wrlong	local05, objptr
058f8     41 00 00 FF 
058fc     40 E4 85 F1 | 	sub	objptr, ##33344
05900                 | LR__0504
05900                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05900     2E 00 00 FF 
05904     08 E4 05 F1 | 	add	objptr, ##23560
05908     F2 24 02 FB | 	rdlong	local04, objptr
0590c     03 24 66 F0 | 	shl	local04, #3
05910     02 00 00 FF 
05914     38 E4 85 F1 | 	sub	objptr, ##1080
05918     F2 24 02 F1 | 	add	local04, objptr
0591c     04 24 06 F1 | 	add	local04, #4
05920     12 2D 02 FB | 	rdlong	local08, local04
05924     11 2C 0E F2 | 	cmp	local08, #17 wz
05928     2B 00 00 FF 
0592c     D0 E5 85 F1 | 	sub	objptr, ##22480
05930     6C 00 90 AD |  if_e	jmp	#LR__0505
05934     2E 00 00 FF 
05938     08 E4 05 F1 | 	add	objptr, ##23560
0593c     F2 2C 02 FB | 	rdlong	local08, objptr
05940     03 2C 66 F0 | 	shl	local08, #3
05944     02 00 00 FF 
05948     38 E4 85 F1 | 	sub	objptr, ##1080
0594c     F2 2C 02 F1 | 	add	local08, objptr
05950     04 2C 06 F1 | 	add	local08, #4
05954     16 2D 02 FB | 	rdlong	local08, local08
05958     12 2C 0E F2 | 	cmp	local08, #18 wz
0595c     2B 00 00 FF 
05960     D0 E5 85 F1 | 	sub	objptr, ##22480
05964     38 00 90 AD |  if_e	jmp	#LR__0505
05968     2E 00 00 FF 
0596c     08 E4 05 F1 | 	add	objptr, ##23560
05970     F2 32 02 FB | 	rdlong	local11, objptr
05974     03 32 66 F0 | 	shl	local11, #3
05978     02 00 00 FF 
0597c     38 E4 85 F1 | 	sub	objptr, ##1080
05980     F2 32 02 F1 | 	add	local11, objptr
05984     04 32 06 F1 | 	add	local11, #4
05988     19 33 02 FB | 	rdlong	local11, local11
0598c     FE 33 0E F2 | 	cmp	local11, #510 wz
05990     2B 00 00 FF 
05994     D0 E5 85 F1 | 	sub	objptr, ##22480
05998     16 FA 05 56 |  if_ne	mov	result1, #22
0599c     68 00 90 5D |  if_ne	jmp	#LR__0507
059a0                 | LR__0505
059a0     2E 00 00 FF 
059a4     08 E4 05 F1 | 	add	objptr, ##23560
059a8     F2 24 02 FB | 	rdlong	local04, objptr
059ac     01 24 06 F1 | 	add	local04, #1
059b0     F2 24 62 FC | 	wrlong	local04, objptr
059b4     03 24 66 F0 | 	shl	local04, #3
059b8     02 00 00 FF 
059bc     38 E4 85 F1 | 	sub	objptr, ##1080
059c0     F2 24 02 F1 | 	add	local04, objptr
059c4     04 24 06 F1 | 	add	local04, #4
059c8     12 2D 02 FB | 	rdlong	local08, local04
059cc     FE 2D 0E F2 | 	cmp	local08, #510 wz
059d0     2B 00 00 FF 
059d4     D0 E5 85 F1 | 	sub	objptr, ##22480
059d8     28 00 90 AD |  if_e	jmp	#LR__0506
059dc     2E 00 00 FF 
059e0     08 E4 05 F1 | 	add	objptr, ##23560
059e4     F2 32 02 FB | 	rdlong	local11, objptr
059e8     0E 00 00 FF 
059ec     1C E4 05 F1 | 	add	objptr, ##7196
059f0     F2 30 02 FB | 	rdlong	local10, objptr
059f4     3C 00 00 FF 
059f8     24 E4 85 F1 | 	sub	objptr, ##30756
059fc     18 33 52 F2 | 	cmps	local11, local10 wc
05a00     E4 FA 9F CD |  if_b	jmp	#LR__0501
05a04                 | LR__0506
05a04                 | ' return 0
05a04     00 FA 05 F6 | 	mov	result1, #0
05a08                 | LR__0507
05a08     A7 F0 03 F6 | 	mov	ptra, fp
05a0c     B2 00 A0 FD | 	call	#popregs_
05a10                 | _compile_print_ret
05a10     2D 00 64 FD | 	ret
05a14                 | 
05a14                 | ' 
05a14                 | ' function compile_if() as ulong  
05a14                 | _compile_if
05a14     05 4A 05 F6 | 	mov	COUNT_, #5
05a18     A8 00 A0 FD | 	call	#pushregs_
05a1c                 | _compile_if_enter
05a1c     28 F3 BF FD | 	call	#_compile_converttoint
05a20                 | ' return err
05a20     2E 00 00 FF 
05a24     08 E4 05 F1 | 	add	objptr, ##23560
05a28     F2 FA 01 FB | 	rdlong	result1, objptr
05a2c     01 FA 05 F1 | 	add	result1, #1
05a30     F2 FA 61 FC | 	wrlong	result1, objptr
05a34     58 22 06 F6 | 	mov	local03, #88
05a38     0F 25 02 F6 | 	mov	local04, local01
05a3c     10 27 02 F6 | 	mov	local05, local02
05a40     11 1F 02 F6 | 	mov	local01, local03
05a44     13 00 00 FF 
05a48     38 E4 05 F1 | 	add	objptr, ##9784
05a4c     F2 12 02 FB | 	rdlong	arg01, objptr
05a50     09 FB 01 F6 | 	mov	result1, arg01
05a54     01 FA 65 F0 | 	shl	result1, #1
05a58     09 FB 01 F1 | 	add	result1, arg01
05a5c     02 FA 65 F0 | 	shl	result1, #2
05a60     03 00 00 FF 
05a64     00 E4 85 F1 | 	sub	objptr, ##1536
05a68     F2 FA 01 F1 | 	add	result1, objptr
05a6c     FD 24 62 FC | 	wrlong	local04, result1
05a70     03 00 00 FF 
05a74     00 E4 05 F1 | 	add	objptr, ##1536
05a78     F2 12 02 FB | 	rdlong	arg01, objptr
05a7c     09 25 02 F6 | 	mov	local04, arg01
05a80     01 24 66 F0 | 	shl	local04, #1
05a84     09 25 02 F1 | 	add	local04, arg01
05a88     02 24 66 F0 | 	shl	local04, #2
05a8c     03 00 00 FF 
05a90     00 E4 85 F1 | 	sub	objptr, ##1536
05a94     F2 24 02 F1 | 	add	local04, objptr
05a98     04 24 06 F1 | 	add	local04, #4
05a9c     12 27 62 FC | 	wrlong	local05, local04
05aa0     03 00 00 FF 
05aa4     00 E4 05 F1 | 	add	objptr, ##1536
05aa8     F2 24 02 FB | 	rdlong	local04, objptr
05aac     12 27 02 F6 | 	mov	local05, local04
05ab0     01 26 66 F0 | 	shl	local05, #1
05ab4     12 27 02 F1 | 	add	local05, local04
05ab8     02 26 66 F0 | 	shl	local05, #2
05abc     03 00 00 FF 
05ac0     00 E4 85 F1 | 	sub	objptr, ##1536
05ac4     F2 26 02 F1 | 	add	local05, objptr
05ac8     08 26 06 F1 | 	add	local05, #8
05acc     13 1F 62 FC | 	wrlong	local01, local05
05ad0     03 00 00 FF 
05ad4     00 E4 05 F1 | 	add	objptr, ##1536
05ad8     F2 24 02 FB | 	rdlong	local04, objptr
05adc     01 24 06 F1 | 	add	local04, #1
05ae0     F2 24 62 FC | 	wrlong	local04, objptr
05ae4                 | ' 
05ae4                 | ' 'print "In compile_if"
05ae4                 | ' compile_int_fun_1p()
05ae4                 | ' cmd=lparts(ct).token : ct+=1
05ae4                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05ae4                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05ae4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05ae4     13 00 00 FF 
05ae8     38 E4 85 F1 | 	sub	objptr, ##9784
05aec     F2 26 02 FB | 	rdlong	local05, objptr
05af0     01 26 06 F1 | 	add	local05, #1
05af4     03 26 66 F0 | 	shl	local05, #3
05af8     02 00 00 FF 
05afc     38 E4 85 F1 | 	sub	objptr, ##1080
05b00     F2 26 02 F1 | 	add	local05, objptr
05b04     13 13 02 FB | 	rdlong	arg01, local05
05b08     2B 00 00 FF 
05b0c     D0 E5 85 F1 | 	sub	objptr, ##22480
05b10                 | ' 
05b10                 | ' select case s
05b10     17 01 00 FF 
05b14     D2 14 06 F6 | 	mov	arg02, ##@LR__4094
05b18     8C DF B0 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     1B FA 05 A6 |  if_e	mov	result1, #27
05b24     00 FA 05 56 |  if_ne	mov	result1, #0
05b28     00 FA 0D F2 | 	cmp	result1, #0 wz
05b2c     0C 00 90 AD |  if_e	jmp	#LR__0510
05b30     05 12 06 F6 | 	mov	arg01, #5
05b34     20 EC BF FD | 	call	#_compile_immediate_assign
05b38     08 00 90 FD | 	jmp	#LR__0511
05b3c                 | LR__0510
05b3c     05 12 06 F6 | 	mov	arg01, #5
05b40     E8 E7 BF FD | 	call	#_compile_immediate
05b44                 | LR__0511
05b44                 | ' 
05b44                 | ' 
05b44                 | ' return 0
05b44     00 FA 05 F6 | 	mov	result1, #0
05b48     A7 F0 03 F6 | 	mov	ptra, fp
05b4c     B2 00 A0 FD | 	call	#popregs_
05b50                 | _compile_if_ret
05b50     2D 00 64 FD | 	ret
05b54                 | 
05b54                 | ' 
05b54                 | ' function compile_else() as ulong  
05b54                 | _compile_else
05b54     05 4A 05 F6 | 	mov	COUNT_, #5
05b58     A8 00 A0 FD | 	call	#pushregs_
05b5c                 | _compile_else_enter
05b5c     5A 22 06 F6 | 	mov	local03, #90
05b60     0F 25 02 F6 | 	mov	local04, local01
05b64     10 27 02 F6 | 	mov	local05, local02
05b68     11 1F 02 F6 | 	mov	local01, local03
05b6c     41 00 00 FF 
05b70     40 E4 05 F1 | 	add	objptr, ##33344
05b74     F2 12 02 FB | 	rdlong	arg01, objptr
05b78     09 FB 01 F6 | 	mov	result1, arg01
05b7c     01 FA 65 F0 | 	shl	result1, #1
05b80     09 FB 01 F1 | 	add	result1, arg01
05b84     02 FA 65 F0 | 	shl	result1, #2
05b88     03 00 00 FF 
05b8c     00 E4 85 F1 | 	sub	objptr, ##1536
05b90     F2 FA 01 F1 | 	add	result1, objptr
05b94     FD 24 62 FC | 	wrlong	local04, result1
05b98     03 00 00 FF 
05b9c     00 E4 05 F1 | 	add	objptr, ##1536
05ba0     F2 FA 01 FB | 	rdlong	result1, objptr
05ba4     FD 24 02 F6 | 	mov	local04, result1
05ba8     01 24 66 F0 | 	shl	local04, #1
05bac     FD 24 02 F1 | 	add	local04, result1
05bb0     02 24 66 F0 | 	shl	local04, #2
05bb4     03 00 00 FF 
05bb8     00 E4 85 F1 | 	sub	objptr, ##1536
05bbc     F2 24 02 F1 | 	add	local04, objptr
05bc0     04 24 06 F1 | 	add	local04, #4
05bc4     12 27 62 FC | 	wrlong	local05, local04
05bc8     03 00 00 FF 
05bcc     00 E4 05 F1 | 	add	objptr, ##1536
05bd0     F2 24 02 FB | 	rdlong	local04, objptr
05bd4     12 27 02 F6 | 	mov	local05, local04
05bd8     01 26 66 F0 | 	shl	local05, #1
05bdc     12 27 02 F1 | 	add	local05, local04
05be0     02 26 66 F0 | 	shl	local05, #2
05be4     03 00 00 FF 
05be8     00 E4 85 F1 | 	sub	objptr, ##1536
05bec     F2 26 02 F1 | 	add	local05, objptr
05bf0     08 26 06 F1 | 	add	local05, #8
05bf4     13 1F 62 FC | 	wrlong	local01, local05
05bf8     03 00 00 FF 
05bfc     00 E4 05 F1 | 	add	objptr, ##1536
05c00     F2 24 02 FB | 	rdlong	local04, objptr
05c04     01 24 06 F1 | 	add	local04, #1
05c08     F2 24 62 FC | 	wrlong	local04, objptr
05c0c                 | ' 
05c0c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
05c0c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05c0c     13 00 00 FF 
05c10     38 E4 85 F1 | 	sub	objptr, ##9784
05c14     F2 26 02 FB | 	rdlong	local05, objptr
05c18     01 26 06 F1 | 	add	local05, #1
05c1c     03 26 66 F0 | 	shl	local05, #3
05c20     02 00 00 FF 
05c24     38 E4 85 F1 | 	sub	objptr, ##1080
05c28     F2 26 02 F1 | 	add	local05, objptr
05c2c     13 13 02 FB | 	rdlong	arg01, local05
05c30     2B 00 00 FF 
05c34     D0 E5 85 F1 | 	sub	objptr, ##22480
05c38                 | ' 
05c38                 | ' select case s
05c38     17 01 00 FF 
05c3c     D2 14 06 F6 | 	mov	arg02, ##@LR__4094
05c40     64 DE B0 FD | 	call	#__system___string_cmp
05c44     00 FA 0D F2 | 	cmp	result1, #0 wz
05c48     1B FA 05 A6 |  if_e	mov	result1, #27
05c4c     00 FA 05 56 |  if_ne	mov	result1, #0
05c50     00 FA 0D F2 | 	cmp	result1, #0 wz
05c54     0C 00 90 AD |  if_e	jmp	#LR__0520
05c58     05 12 06 F6 | 	mov	arg01, #5
05c5c     F8 EA BF FD | 	call	#_compile_immediate_assign
05c60     08 00 90 FD | 	jmp	#LR__0521
05c64                 | LR__0520
05c64     05 12 06 F6 | 	mov	arg01, #5
05c68     C0 E6 BF FD | 	call	#_compile_immediate
05c6c                 | LR__0521
05c6c                 | ' 
05c6c                 | ' 
05c6c                 | ' return 0
05c6c     00 FA 05 F6 | 	mov	result1, #0
05c70     A7 F0 03 F6 | 	mov	ptra, fp
05c74     B2 00 A0 FD | 	call	#popregs_
05c78                 | _compile_else_ret
05c78     2D 00 64 FD | 	ret
05c7c                 | 
05c7c                 | ' 
05c7c                 | ' 
05c7c                 | ' function compile_dim() as ulong  
05c7c                 | _compile_dim
05c7c     0C 4A 05 F6 | 	mov	COUNT_, #12
05c80     A8 00 A0 FD | 	call	#pushregs_
05c84     01 1E 06 F6 | 	mov	local01, #1
05c88     01 20 06 F6 | 	mov	local02, #1
05c8c     01 22 06 F6 | 	mov	local03, #1
05c90                 | ' 
05c90                 | ' dims(0)=1: dims(1)=1: dims(2)=1
05c90                 | ' 
05c90                 | ' if isname(lparts(ct).part$) then 
05c90     2E 00 00 FF 
05c94     08 E4 05 F1 | 	add	objptr, ##23560
05c98     F2 18 02 FB | 	rdlong	arg04, objptr
05c9c     03 18 66 F0 | 	shl	arg04, #3
05ca0     02 00 00 FF 
05ca4     38 E4 85 F1 | 	sub	objptr, ##1080
05ca8     F2 18 02 F1 | 	add	arg04, objptr
05cac     0C 13 02 FB | 	rdlong	arg01, arg04
05cb0     2B 00 00 FF 
05cb4     D0 E5 85 F1 | 	sub	objptr, ##22480
05cb8     54 D6 BF FD | 	call	#_isname
05cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc0     68 03 90 AD |  if_e	jmp	#LR__0539
05cc4     2E 00 00 FF 
05cc8     08 E4 05 F1 | 	add	objptr, ##23560
05ccc     F2 18 02 FB | 	rdlong	arg04, objptr
05cd0     03 18 66 F0 | 	shl	arg04, #3
05cd4     02 00 00 FF 
05cd8     38 E4 85 F1 | 	sub	objptr, ##1080
05cdc     F2 18 02 F1 | 	add	arg04, objptr
05ce0     0C 25 02 FB | 	rdlong	local04, arg04
05ce4     01 26 66 F6 | 	neg	local05, #1
05ce8                 | '   varname2$=lparts(ct).part$ 
05ce8                 | '   j=-1
05ce8                 | '   if varnum>0 then
05ce8     04 E4 85 F1 | 	sub	objptr, #4
05cec     F2 28 02 FB | 	rdlong	local06, objptr
05cf0     2B 00 00 FF 
05cf4     CC E5 85 F1 | 	sub	objptr, ##22476
05cf8     01 28 56 F2 | 	cmps	local06, #1 wc
05cfc     A8 00 90 CD |  if_b	jmp	#LR__0532
05d00                 | '     print varnum
05d00     00 12 06 F6 | 	mov	arg01, #0
05d04     5C 32 B1 FD | 	call	#__system___getiolock_0306
05d08     FD 12 02 F6 | 	mov	arg01, result1
05d0c     70 DD B0 FD | 	call	#__system___lockmem
05d10     2B 00 00 FF 
05d14     CC E5 05 F1 | 	add	objptr, ##22476
05d18     F2 14 02 FB | 	rdlong	arg02, objptr
05d1c     2B 00 00 FF 
05d20     CC E5 85 F1 | 	sub	objptr, ##22476
05d24     00 12 06 F6 | 	mov	arg01, #0
05d28     00 16 06 F6 | 	mov	arg03, #0
05d2c     0A 18 06 F6 | 	mov	arg04, #10
05d30     9C E9 B0 FD | 	call	#__system___basic_print_integer
05d34     00 12 06 F6 | 	mov	arg01, #0
05d38     0A 14 06 F6 | 	mov	arg02, #10
05d3c     00 16 06 F6 | 	mov	arg03, #0
05d40     F0 E8 B0 FD | 	call	#__system___basic_print_char
05d44     00 12 06 F6 | 	mov	arg01, #0
05d48     18 32 B1 FD | 	call	#__system___getiolock_0306
05d4c     FD 00 68 FC | 	wrlong	#0, result1
05d50                 | '     for i=0 to varnum-1
05d50     00 2A 06 F6 | 	mov	local07, #0
05d54     2B 00 00 FF 
05d58     CC E5 05 F1 | 	add	objptr, ##22476
05d5c     F2 2C 02 FB | 	rdlong	local08, objptr
05d60     2B 00 00 FF 
05d64     CC E5 85 F1 | 	sub	objptr, ##22476
05d68                 | LR__0530
05d68     16 2B 52 F2 | 	cmps	local07, local08 wc
05d6c     38 00 90 3D |  if_ae	jmp	#LR__0531
05d70                 | '       if variables(i).name=varname2$ then j=i : exit
05d70     15 19 02 F6 | 	mov	arg04, local07
05d74     04 18 66 F0 | 	shl	arg04, #4
05d78     0B 00 00 FF 
05d7c     CC E5 05 F1 | 	add	objptr, ##6092
05d80     F2 18 02 F1 | 	add	arg04, objptr
05d84     0C 13 02 FB | 	rdlong	arg01, arg04
05d88     12 15 02 F6 | 	mov	arg02, local04
05d8c     0B 00 00 FF 
05d90     CC E5 85 F1 | 	sub	objptr, ##6092
05d94     10 DD B0 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     15 27 02 A6 |  if_e	mov	local05, local07
05da0     01 2A 06 51 |  if_ne	add	local07, #1
05da4     C0 FF 9F 5D |  if_ne	jmp	#LR__0530
05da8                 | LR__0531
05da8                 | LR__0532
05da8                 | '   if j<>-1 then printerror (42) : return 42
05da8     FF FF 7F FF 
05dac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05db0     10 00 90 AD |  if_e	jmp	#LR__0533
05db4     2A 12 06 F6 | 	mov	arg01, #42
05db8     D0 A7 B0 FD | 	call	#_printerror
05dbc     2A FA 05 F6 | 	mov	result1, #42
05dc0     04 03 90 FD | 	jmp	#LR__0541
05dc4                 | LR__0533
05dc4                 | '   if lparts(ct+1).part$ <>"(" then printerror(43) : return 43
05dc4     2E 00 00 FF 
05dc8     08 E4 05 F1 | 	add	objptr, ##23560
05dcc     F2 18 02 FB | 	rdlong	arg04, objptr
05dd0     01 18 06 F1 | 	add	arg04, #1
05dd4     03 18 66 F0 | 	shl	arg04, #3
05dd8     02 00 00 FF 
05ddc     38 E4 85 F1 | 	sub	objptr, ##1080
05de0     F2 18 02 F1 | 	add	arg04, objptr
05de4     0C 13 02 FB | 	rdlong	arg01, arg04
05de8     18 01 00 FF 
05dec     59 14 06 F6 | 	mov	arg02, ##@LR__4194
05df0     2B 00 00 FF 
05df4     D0 E5 85 F1 | 	sub	objptr, ##22480
05df8     AC DC B0 FD | 	call	#__system___string_cmp
05dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
05e00     10 00 90 AD |  if_e	jmp	#LR__0534
05e04     2B 12 06 F6 | 	mov	arg01, #43
05e08     80 A7 B0 FD | 	call	#_printerror
05e0c     2B FA 05 F6 | 	mov	result1, #43
05e10     B4 02 90 FD | 	jmp	#LR__0541
05e14                 | LR__0534
05e14     2E 00 00 FF 
05e18     08 E4 05 F1 | 	add	objptr, ##23560
05e1c     F2 2E 02 FB | 	rdlong	local09, objptr
05e20     2E 00 00 FF 
05e24     08 E4 85 F1 | 	sub	objptr, ##23560
05e28     02 2E 06 F1 | 	add	local09, #2
05e2c     00 30 06 F6 | 	mov	local10, #0
05e30                 | '   l=ct+2 : m=0 : do
05e30                 | LR__0535
05e30                 | '     print lparts(l).part$, isdec(lparts(l).part$)
05e30     00 12 06 F6 | 	mov	arg01, #0
05e34     2C 31 B1 FD | 	call	#__system___getiolock_0306
05e38     FD 12 02 F6 | 	mov	arg01, result1
05e3c     40 DC B0 FD | 	call	#__system___lockmem
05e40     17 19 02 F6 | 	mov	arg04, local09
05e44     03 18 66 F0 | 	shl	arg04, #3
05e48     2B 00 00 FF 
05e4c     D0 E5 05 F1 | 	add	objptr, ##22480
05e50     F2 18 02 F1 | 	add	arg04, objptr
05e54     0C 15 02 FB | 	rdlong	arg02, arg04
05e58     00 12 06 F6 | 	mov	arg01, #0
05e5c     00 16 06 F6 | 	mov	arg03, #0
05e60     2B 00 00 FF 
05e64     D0 E5 85 F1 | 	sub	objptr, ##22480
05e68     20 E8 B0 FD | 	call	#__system___basic_print_string
05e6c     00 12 06 F6 | 	mov	arg01, #0
05e70     09 14 06 F6 | 	mov	arg02, #9
05e74     00 16 06 F6 | 	mov	arg03, #0
05e78     B8 E7 B0 FD | 	call	#__system___basic_print_char
05e7c     00 2C 06 F6 | 	mov	local08, #0
05e80     17 19 02 F6 | 	mov	arg04, local09
05e84     03 18 66 F0 | 	shl	arg04, #3
05e88     2B 00 00 FF 
05e8c     D0 E5 05 F1 | 	add	objptr, ##22480
05e90     F2 18 02 F1 | 	add	arg04, objptr
05e94     0C 13 02 FB | 	rdlong	arg01, arg04
05e98     2B 00 00 FF 
05e9c     D0 E5 85 F1 | 	sub	objptr, ##22480
05ea0     10 DB BF FD | 	call	#_isdec
05ea4     FD 14 02 F6 | 	mov	arg02, result1
05ea8     16 13 02 F6 | 	mov	arg01, local08
05eac     00 16 06 F6 | 	mov	arg03, #0
05eb0     0A 18 06 F6 | 	mov	arg04, #10
05eb4     18 E8 B0 FD | 	call	#__system___basic_print_integer
05eb8     00 12 06 F6 | 	mov	arg01, #0
05ebc     0A 14 06 F6 | 	mov	arg02, #10
05ec0     00 16 06 F6 | 	mov	arg03, #0
05ec4     6C E7 B0 FD | 	call	#__system___basic_print_char
05ec8     00 12 06 F6 | 	mov	arg01, #0
05ecc     94 30 B1 FD | 	call	#__system___getiolock_0306
05ed0     FD 00 68 FC | 	wrlong	#0, result1
05ed4                 | '     if isdec(lparts(l).part$) then 
05ed4     17 19 02 F6 | 	mov	arg04, local09
05ed8     03 18 66 F0 | 	shl	arg04, #3
05edc     2B 00 00 FF 
05ee0     D0 E5 05 F1 | 	add	objptr, ##22480
05ee4     F2 18 02 F1 | 	add	arg04, objptr
05ee8     0C 13 02 FB | 	rdlong	arg01, arg04
05eec     2B 00 00 FF 
05ef0     D0 E5 85 F1 | 	sub	objptr, ##22480
05ef4     BC DA BF FD | 	call	#_isdec
05ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
05efc     44 00 90 AD |  if_e	jmp	#LR__0536
05f00     18 33 02 F6 | 	mov	local11, local10
05f04     0F 33 06 F1 | 	add	local11, #local01
05f08     17 2D 02 F6 | 	mov	local08, local09
05f0c     03 2C 66 F0 | 	shl	local08, #3
05f10     2B 00 00 FF 
05f14     D0 E5 05 F1 | 	add	objptr, ##22480
05f18     F2 2C 02 F1 | 	add	local08, objptr
05f1c     16 13 02 FB | 	rdlong	arg01, local08
05f20     00 14 06 F6 | 	mov	arg02, #0
05f24     2B 00 00 FF 
05f28     D0 E5 85 F1 | 	sub	objptr, ##22480
05f2c     14 0B B1 FD | 	call	#__system____builtin_atoi
05f30     FD 34 02 F6 | 	mov	local12, result1
05f34                 | 	'.live	local12
05f34                 | 	'.live	local11
05f34     00 32 8E F9 | 	altd	local11, #0
05f38     1A 33 02 F6 | 	mov	local11, local12
05f3c     01 30 06 F1 | 	add	local10, #1
05f40     10 00 90 FD | 	jmp	#LR__0537
05f44                 | LR__0536
05f44     11 12 06 F6 | 	mov	arg01, #17
05f48     40 A6 B0 FD | 	call	#_printerror
05f4c                 | '       printerror (17)  : return(17)
05f4c     11 FA 05 F6 | 	mov	result1, #17
05f50     74 01 90 FD | 	jmp	#LR__0541
05f54                 | LR__0537
05f54                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
05f54     17 35 02 F6 | 	mov	local12, local09
05f58     01 34 06 F1 | 	add	local12, #1
05f5c     03 34 66 F0 | 	shl	local12, #3
05f60     2B 00 00 FF 
05f64     D0 E5 05 F1 | 	add	objptr, ##22480
05f68     F2 34 02 F1 | 	add	local12, objptr
05f6c     1A 13 02 FB | 	rdlong	arg01, local12
05f70     18 01 00 FF 
05f74     5B 14 06 F6 | 	mov	arg02, ##@LR__4195
05f78     2B 00 00 FF 
05f7c     D0 E5 85 F1 | 	sub	objptr, ##22480
05f80     24 DB B0 FD | 	call	#__system___string_cmp
05f84     00 FA 0D F2 | 	cmp	result1, #0 wz
05f88     48 00 90 AD |  if_e	jmp	#LR__0538
05f8c     17 35 02 F6 | 	mov	local12, local09
05f90     01 34 06 F1 | 	add	local12, #1
05f94     03 34 66 F0 | 	shl	local12, #3
05f98     2B 00 00 FF 
05f9c     D0 E5 05 F1 | 	add	objptr, ##22480
05fa0     F2 34 02 F1 | 	add	local12, objptr
05fa4     1A 13 02 FB | 	rdlong	arg01, local12
05fa8     18 01 00 FF 
05fac     5D 14 06 F6 | 	mov	arg02, ##@LR__4196
05fb0     2B 00 00 FF 
05fb4     D0 E5 85 F1 | 	sub	objptr, ##22480
05fb8     EC DA B0 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     10 00 90 AD |  if_e	jmp	#LR__0538
05fc4     2C 12 06 F6 | 	mov	arg01, #44
05fc8     C0 A5 B0 FD | 	call	#_printerror
05fcc     2C FA 05 F6 | 	mov	result1, #44
05fd0     F4 00 90 FD | 	jmp	#LR__0541
05fd4                 | LR__0538
05fd4     02 2E 06 F1 | 	add	local09, #2
05fd8     17 35 02 F6 | 	mov	local12, local09
05fdc     01 34 86 F1 | 	sub	local12, #1
05fe0     03 34 66 F0 | 	shl	local12, #3
05fe4     2B 00 00 FF 
05fe8     D0 E5 05 F1 | 	add	objptr, ##22480
05fec     F2 34 02 F1 | 	add	local12, objptr
05ff0     1A 13 02 FB | 	rdlong	arg01, local12
05ff4     18 01 00 FF 
05ff8     5F 14 06 F6 | 	mov	arg02, ##@LR__4197
05ffc     2B 00 00 FF 
06000     D0 E5 85 F1 | 	sub	objptr, ##22480
06004     A0 DA B0 FD | 	call	#__system___string_cmp
06008     00 FA 0D F2 | 	cmp	result1, #0 wz
0600c     03 30 56 52 |  if_ne	cmps	local10, #3 wc
06010     1C FE 9F 4D |  if_c_and_nz	jmp	#LR__0535
06014                 | '   if m>3 then printerror(45): return(45)
06014     04 30 56 F2 | 	cmps	local10, #4 wc
06018     20 00 90 CD |  if_b	jmp	#LR__0540
0601c     2D 12 06 F6 | 	mov	arg01, #45
06020     68 A5 B0 FD | 	call	#_printerror
06024     2D FA 05 F6 | 	mov	result1, #45
06028     9C 00 90 FD | 	jmp	#LR__0541
0602c                 | LR__0539
0602c     2E 12 06 F6 | 	mov	arg01, #46
06030     58 A5 B0 FD | 	call	#_printerror
06034                 | '   printerror(46): return 46
06034     2E FA 05 F6 | 	mov	result1, #46
06038     8C 00 90 FD | 	jmp	#LR__0541
0603c                 | LR__0540
0603c                 | ' print dims(0),dims(1),dims(2)
0603c     00 12 06 F6 | 	mov	arg01, #0
06040     20 2F B1 FD | 	call	#__system___getiolock_0306
06044     FD 12 02 F6 | 	mov	arg01, result1
06048     34 DA B0 FD | 	call	#__system___lockmem
0604c     00 12 06 F6 | 	mov	arg01, #0
06050     0F 15 02 F6 | 	mov	arg02, local01
06054     00 16 06 F6 | 	mov	arg03, #0
06058     0A 18 06 F6 | 	mov	arg04, #10
0605c     B0 E6 B0 FD | 	call	#__system___basic_print_unsigned
06060     00 12 06 F6 | 	mov	arg01, #0
06064     09 14 06 F6 | 	mov	arg02, #9
06068     00 16 06 F6 | 	mov	arg03, #0
0606c     C4 E5 B0 FD | 	call	#__system___basic_print_char
06070     10 15 02 F6 | 	mov	arg02, local02
06074     00 12 06 F6 | 	mov	arg01, #0
06078     00 16 06 F6 | 	mov	arg03, #0
0607c     0A 18 06 F6 | 	mov	arg04, #10
06080     8C E6 B0 FD | 	call	#__system___basic_print_unsigned
06084     00 12 06 F6 | 	mov	arg01, #0
06088     09 14 06 F6 | 	mov	arg02, #9
0608c     00 16 06 F6 | 	mov	arg03, #0
06090     A0 E5 B0 FD | 	call	#__system___basic_print_char
06094     11 15 02 F6 | 	mov	arg02, local03
06098     00 12 06 F6 | 	mov	arg01, #0
0609c     00 16 06 F6 | 	mov	arg03, #0
060a0     0A 18 06 F6 | 	mov	arg04, #10
060a4     68 E6 B0 FD | 	call	#__system___basic_print_unsigned
060a8     00 12 06 F6 | 	mov	arg01, #0
060ac     0A 14 06 F6 | 	mov	arg02, #10
060b0     00 16 06 F6 | 	mov	arg03, #0
060b4     7C E5 B0 FD | 	call	#__system___basic_print_char
060b8     00 12 06 F6 | 	mov	arg01, #0
060bc     A4 2E B1 FD | 	call	#__system___getiolock_0306
060c0     FD 00 68 FC | 	wrlong	#0, result1
060c4                 | ' 
060c4                 | ' ' to do
060c4                 | ' 
060c4                 | ' '- allocate a new variable
060c4                 | ' '- type: result_arraay
060c4                 | ' '- compute size: dim*dim*dim*12 (sizeof expr_result) + header ( size,size, size)
060c4                 | ' ' - lower memtop, var uresult=memtop - pointer to an array
060c4                 | ' 
060c4                 | ' ' getvar - ??? 
060c4                 | ' 
060c4                 | ' 
060c4                 | ' 
060c4                 | ' 
060c4                 | '  ' if  j=-1 andalso varnum<maxvars then   
060c4                 | '   '  variables(varnum).name=varname2$
060c4                 | '   '  variables(varnum).type=result_array
060c4                 | ' ' allocate space on memtop. Todo: check if the space exists
060c4                 | '     
060c4                 | '   '  j=varnum
060c4                 | '  '   varnum+=1
060c4                 | ' 'endif
060c4                 | ' 
060c4                 | ' '
060c4                 | '  '  j=-1 
060c4                 | '  '  do: j=j+1 : loop until variables(j).name=lparts(ct).part$ orelse j>=varnum
060c4                 | '    
060c4                 | ' 
060c4                 | ' 
060c4                 | ' 'compile_immediate_assign(5) else compile_error(32) : return 32
060c4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
060c4                 | ' 't1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
060c4                 | ' 'varnum=t1.result.uresult
060c4                 | ' 'if lparts(ct).part$<>"to" then  compile_error(33) : return 33
060c4                 | ' 'ct+=1
060c4                 | ' 'expr()  ' there is "to" value pushed on the stack
060c4                 | ' 'if lparts(ct).part$="step" then 
060c4                 | ' 'ct+=1
060c4                 | ' 'expr()
060c4                 | ' 'else
060c4                 | ' 'compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=1 : lineptr+=1
060c4                 | ' 'endif
060c4                 | ' 'compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
060c4                 | ' 'compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
060c4                 | ' return 0
060c4     00 FA 05 F6 | 	mov	result1, #0
060c8                 | LR__0541
060c8     A7 F0 03 F6 | 	mov	ptra, fp
060cc     B2 00 A0 FD | 	call	#popregs_
060d0                 | _compile_dim_ret
060d0     2D 00 64 FD | 	ret
060d4                 | 
060d4                 | ' 
060d4                 | ' 
060d4                 | ' function compile_for() as ulong  
060d4                 | _compile_for
060d4     07 4A 05 F6 | 	mov	COUNT_, #7
060d8     A8 00 A0 FD | 	call	#pushregs_
060dc                 | ' 
060dc                 | ' 
060dc                 | ' 
060dc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
060dc     2E 00 00 FF 
060e0     08 E4 05 F1 | 	add	objptr, ##23560
060e4     F2 14 02 FB | 	rdlong	arg02, objptr
060e8     01 14 06 F1 | 	add	arg02, #1
060ec     03 14 66 F0 | 	shl	arg02, #3
060f0     02 00 00 FF 
060f4     38 E4 85 F1 | 	sub	objptr, ##1080
060f8     F2 14 02 F1 | 	add	arg02, objptr
060fc     0A 13 02 FB | 	rdlong	arg01, arg02
06100     2B 00 00 FF 
06104     D0 E5 85 F1 | 	sub	objptr, ##22480
06108                 | ' 
06108                 | ' select case s
06108     17 01 00 FF 
0610c     D2 14 06 F6 | 	mov	arg02, ##@LR__4094
06110     94 D9 B0 FD | 	call	#__system___string_cmp
06114     00 FA 0D F2 | 	cmp	result1, #0 wz
06118     1B FA 05 A6 |  if_e	mov	result1, #27
0611c     00 FA 05 56 |  if_ne	mov	result1, #0
06120     00 FA 0D F2 | 	cmp	result1, #0 wz
06124     0C 00 90 AD |  if_e	jmp	#LR__0550
06128     05 12 06 F6 | 	mov	arg01, #5
0612c     28 E6 BF FD | 	call	#_compile_immediate_assign
06130     10 00 90 FD | 	jmp	#LR__0551
06134                 | LR__0550
06134     20 12 06 F6 | 	mov	arg01, #32
06138     98 EA BF FD | 	call	#_compile_error
0613c     20 FA 05 F6 | 	mov	result1, #32
06140     AC 02 90 FD | 	jmp	#LR__0556
06144                 | LR__0551
06144     41 00 00 FF 
06148     40 E4 05 F1 | 	add	objptr, ##33344
0614c     F2 12 02 FB | 	rdlong	arg01, objptr
06150     09 25 02 F6 | 	mov	local04, arg01
06154     01 24 86 F1 | 	sub	local04, #1
06158     12 15 02 F6 | 	mov	arg02, local04
0615c     01 14 66 F0 | 	shl	arg02, #1
06160     12 15 02 F1 | 	add	arg02, local04
06164     02 14 66 F0 | 	shl	arg02, #2
06168     03 00 00 FF 
0616c     00 E4 85 F1 | 	sub	objptr, ##1536
06170     F2 14 02 F1 | 	add	arg02, objptr
06174     0A 1F 02 FB | 	rdlong	local01, arg02
06178     04 14 06 F1 | 	add	arg02, #4
0617c     0A 27 02 FB | 	rdlong	local05, arg02
06180     01 12 86 F1 | 	sub	arg01, #1
06184     09 29 02 F6 | 	mov	local06, arg01
06188     01 28 66 F0 | 	shl	local06, #1
0618c     09 29 02 F1 | 	add	local06, arg01
06190     02 28 66 F0 | 	shl	local06, #2
06194     F2 28 02 F1 | 	add	local06, objptr
06198     08 28 06 F1 | 	add	local06, #8
0619c     14 13 02 FB | 	rdlong	arg01, local06
061a0     13 21 02 F6 | 	mov	local02, local05
061a4     09 23 02 F6 | 	mov	local03, arg01
061a8                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
061a8                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
061a8     17 22 0E F2 | 	cmp	local03, #23 wz
061ac     3E 00 00 FF 
061b0     40 E4 85 F1 | 	sub	objptr, ##31808
061b4     10 00 90 AD |  if_e	jmp	#LR__0552
061b8     22 12 06 F6 | 	mov	arg01, #34
061bc     14 EA BF FD | 	call	#_compile_error
061c0     22 FA 05 F6 | 	mov	result1, #34
061c4     28 02 90 FD | 	jmp	#LR__0556
061c8                 | LR__0552
061c8     0F 2B 02 F6 | 	mov	local07, local01
061cc                 | ' varnum=t1.result.uresult
061cc                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
061cc     2E 00 00 FF 
061d0     08 E4 05 F1 | 	add	objptr, ##23560
061d4     F2 24 02 FB | 	rdlong	local04, objptr
061d8     03 24 66 F0 | 	shl	local04, #3
061dc     02 00 00 FF 
061e0     38 E4 85 F1 | 	sub	objptr, ##1080
061e4     F2 24 02 F1 | 	add	local04, objptr
061e8     12 13 02 FB | 	rdlong	arg01, local04
061ec     18 01 00 FF 
061f0     61 14 06 F6 | 	mov	arg02, ##@LR__4198
061f4     2B 00 00 FF 
061f8     D0 E5 85 F1 | 	sub	objptr, ##22480
061fc     A8 D8 B0 FD | 	call	#__system___string_cmp
06200     00 FA 0D F2 | 	cmp	result1, #0 wz
06204     10 00 90 AD |  if_e	jmp	#LR__0553
06208     21 12 06 F6 | 	mov	arg01, #33
0620c     C4 E9 BF FD | 	call	#_compile_error
06210     21 FA 05 F6 | 	mov	result1, #33
06214     D8 01 90 FD | 	jmp	#LR__0556
06218                 | LR__0553
06218     2E 00 00 FF 
0621c     08 E4 05 F1 | 	add	objptr, ##23560
06220     F2 28 02 FB | 	rdlong	local06, objptr
06224     01 28 06 F1 | 	add	local06, #1
06228     F2 28 62 FC | 	wrlong	local06, objptr
0622c     2E 00 00 FF 
06230     08 E4 85 F1 | 	sub	objptr, ##23560
06234     98 0B B0 FD | 	call	#_expr
06238                 | ' ct+=1
06238                 | ' expr()  ' there is "to" value pushed on the stack
06238                 | ' if lparts(ct).part$="step" then 
06238     2E 00 00 FF 
0623c     08 E4 05 F1 | 	add	objptr, ##23560
06240     F2 24 02 FB | 	rdlong	local04, objptr
06244     03 24 66 F0 | 	shl	local04, #3
06248     02 00 00 FF 
0624c     38 E4 85 F1 | 	sub	objptr, ##1080
06250     F2 24 02 F1 | 	add	local04, objptr
06254     12 13 02 FB | 	rdlong	arg01, local04
06258     18 01 00 FF 
0625c     64 14 06 F6 | 	mov	arg02, ##@LR__4199
06260     2B 00 00 FF 
06264     D0 E5 85 F1 | 	sub	objptr, ##22480
06268     3C D8 B0 FD | 	call	#__system___string_cmp
0626c     00 FA 0D F2 | 	cmp	result1, #0 wz
06270     24 00 90 5D |  if_ne	jmp	#LR__0554
06274     2E 00 00 FF 
06278     08 E4 05 F1 | 	add	objptr, ##23560
0627c     F2 28 02 FB | 	rdlong	local06, objptr
06280     01 28 06 F1 | 	add	local06, #1
06284     F2 28 62 FC | 	wrlong	local06, objptr
06288     2E 00 00 FF 
0628c     08 E4 85 F1 | 	sub	objptr, ##23560
06290     3C 0B B0 FD | 	call	#_expr
06294     78 00 90 FD | 	jmp	#LR__0555
06298                 | LR__0554
06298     41 00 00 FF 
0629c     40 E4 05 F1 | 	add	objptr, ##33344
062a0     F2 28 02 FB | 	rdlong	local06, objptr
062a4     14 27 02 F6 | 	mov	local05, local06
062a8     01 26 66 F0 | 	shl	local05, #1
062ac     14 27 02 F1 | 	add	local05, local06
062b0     02 26 66 F0 | 	shl	local05, #2
062b4     03 00 00 FF 
062b8     00 E4 85 F1 | 	sub	objptr, ##1536
062bc     F2 26 02 F1 | 	add	local05, objptr
062c0     08 26 06 F1 | 	add	local05, #8
062c4     13 39 68 FC | 	wrlong	#28, local05
062c8     03 00 00 FF 
062cc     00 E4 05 F1 | 	add	objptr, ##1536
062d0     F2 28 02 FB | 	rdlong	local06, objptr
062d4     14 27 02 F6 | 	mov	local05, local06
062d8     01 26 66 F0 | 	shl	local05, #1
062dc     14 27 02 F1 | 	add	local05, local06
062e0     02 26 66 F0 | 	shl	local05, #2
062e4     03 00 00 FF 
062e8     00 E4 85 F1 | 	sub	objptr, ##1536
062ec     F2 26 02 F1 | 	add	local05, objptr
062f0     13 03 68 FC | 	wrlong	#1, local05
062f4     03 00 00 FF 
062f8     00 E4 05 F1 | 	add	objptr, ##1536
062fc     F2 28 02 FB | 	rdlong	local06, objptr
06300     01 28 06 F1 | 	add	local06, #1
06304     F2 28 62 FC | 	wrlong	local06, objptr
06308     41 00 00 FF 
0630c     40 E4 85 F1 | 	sub	objptr, ##33344
06310                 | LR__0555
06310     41 00 00 FF 
06314     40 E4 05 F1 | 	add	objptr, ##33344
06318     F2 28 02 FB | 	rdlong	local06, objptr
0631c     14 27 02 F6 | 	mov	local05, local06
06320     01 26 66 F0 | 	shl	local05, #1
06324     14 27 02 F1 | 	add	local05, local06
06328     02 26 66 F0 | 	shl	local05, #2
0632c     03 00 00 FF 
06330     00 E4 85 F1 | 	sub	objptr, ##1536
06334     F2 26 02 F1 | 	add	local05, objptr
06338     08 26 06 F1 | 	add	local05, #8
0633c     13 39 68 FC | 	wrlong	#28, local05
06340     03 00 00 FF 
06344     00 E4 05 F1 | 	add	objptr, ##1536
06348     F2 28 02 FB | 	rdlong	local06, objptr
0634c     14 27 02 F6 | 	mov	local05, local06
06350     01 26 66 F0 | 	shl	local05, #1
06354     14 27 02 F1 | 	add	local05, local06
06358     02 26 66 F0 | 	shl	local05, #2
0635c     03 00 00 FF 
06360     00 E4 85 F1 | 	sub	objptr, ##1536
06364     F2 26 02 F1 | 	add	local05, objptr
06368     13 2B 62 FC | 	wrlong	local07, local05
0636c     03 00 00 FF 
06370     00 E4 05 F1 | 	add	objptr, ##1536
06374     F2 2A 02 FB | 	rdlong	local07, objptr
06378     01 2A 06 F1 | 	add	local07, #1
0637c     F2 2A 62 FC | 	wrlong	local07, objptr
06380     15 29 02 F6 | 	mov	local06, local07
06384     01 28 66 F0 | 	shl	local06, #1
06388     15 29 02 F1 | 	add	local06, local07
0638c     02 28 66 F0 | 	shl	local06, #2
06390     03 00 00 FF 
06394     00 E4 85 F1 | 	sub	objptr, ##1536
06398     F2 28 02 F1 | 	add	local06, objptr
0639c     08 28 06 F1 | 	add	local06, #8
063a0     14 95 68 FC | 	wrlong	#74, local06
063a4     03 00 00 FF 
063a8     00 E4 05 F1 | 	add	objptr, ##1536
063ac     F2 2A 02 FB | 	rdlong	local07, objptr
063b0     15 29 02 F6 | 	mov	local06, local07
063b4     01 28 66 F0 | 	shl	local06, #1
063b8     15 29 02 F1 | 	add	local06, local07
063bc     02 28 66 F0 | 	shl	local06, #2
063c0     03 00 00 FF 
063c4     00 E4 85 F1 | 	sub	objptr, ##1536
063c8     F2 28 02 F1 | 	add	local06, objptr
063cc     14 01 68 FC | 	wrlong	#0, local06
063d0     03 00 00 FF 
063d4     00 E4 05 F1 | 	add	objptr, ##1536
063d8     F2 2A 02 FB | 	rdlong	local07, objptr
063dc     01 2A 06 F1 | 	add	local07, #1
063e0     F2 2A 62 FC | 	wrlong	local07, objptr
063e4     41 00 00 FF 
063e8     40 E4 85 F1 | 	sub	objptr, ##33344
063ec                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
063ec                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
063ec                 | ' 
063ec                 | ' 
063ec                 | ' return 0
063ec     00 FA 05 F6 | 	mov	result1, #0
063f0                 | LR__0556
063f0     A7 F0 03 F6 | 	mov	ptra, fp
063f4     B2 00 A0 FD | 	call	#popregs_
063f8                 | _compile_for_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | ' 
063fc                 | ' 
063fc                 | ' sub do_for()
063fc                 | _do_for
063fc     05 4A 05 F6 | 	mov	COUNT_, #5
06400     A8 00 A0 FD | 	call	#pushregs_
06404     50 00 00 FF 
06408     9C E5 05 F1 | 	add	objptr, ##41372
0640c     F2 24 02 FB | 	rdlong	local04, objptr
06410     01 24 06 F1 | 	add	local04, #1
06414     F2 24 62 FC | 	wrlong	local04, objptr
06418     50 00 00 FF 
0641c     9C E5 85 F1 | 	sub	objptr, ##41372
06420     FC 1B B0 FD | 	call	#_pop
06424     FD 1E 02 F6 | 	mov	local01, result1
06428     FE 20 02 F6 | 	mov	local02, result2
0642c     FF 22 02 F6 | 	mov	local03, result3
06430     50 00 00 FF 
06434     9C E5 05 F1 | 	add	objptr, ##41372
06438     F2 24 02 FB | 	rdlong	local04, objptr
0643c     12 27 02 F6 | 	mov	local05, local04
06440     02 26 66 F0 | 	shl	local05, #2
06444     12 27 02 F1 | 	add	local05, local04
06448     02 26 66 F0 | 	shl	local05, #2
0644c     07 00 00 FF 
06450     40 E5 85 F1 | 	sub	objptr, ##3904
06454     F2 26 02 F1 | 	add	local05, objptr
06458     08 26 06 F1 | 	add	local05, #8
0645c     13 1F 62 FC | 	wrlong	local01, local05
06460     49 00 00 FF 
06464     5C E4 85 F1 | 	sub	objptr, ##37468
06468     B4 1B B0 FD | 	call	#_pop
0646c     FD 1E 02 F6 | 	mov	local01, result1
06470     FE 20 02 F6 | 	mov	local02, result2
06474     FF 22 02 F6 | 	mov	local03, result3
06478     50 00 00 FF 
0647c     9C E5 05 F1 | 	add	objptr, ##41372
06480     F2 24 02 FB | 	rdlong	local04, objptr
06484     12 27 02 F6 | 	mov	local05, local04
06488     02 26 66 F0 | 	shl	local05, #2
0648c     12 27 02 F1 | 	add	local05, local04
06490     02 26 66 F0 | 	shl	local05, #2
06494     07 00 00 FF 
06498     40 E5 85 F1 | 	sub	objptr, ##3904
0649c     F2 26 02 F1 | 	add	local05, objptr
064a0     0C 26 06 F1 | 	add	local05, #12
064a4     13 1F 62 FC | 	wrlong	local01, local05
064a8     49 00 00 FF 
064ac     5C E4 85 F1 | 	sub	objptr, ##37468
064b0     6C 1B B0 FD | 	call	#_pop
064b4     FD 1E 02 F6 | 	mov	local01, result1
064b8     FE 20 02 F6 | 	mov	local02, result2
064bc     FF 22 02 F6 | 	mov	local03, result3
064c0     50 00 00 FF 
064c4     9C E5 05 F1 | 	add	objptr, ##41372
064c8     F2 24 02 FB | 	rdlong	local04, objptr
064cc     12 27 02 F6 | 	mov	local05, local04
064d0     02 26 66 F0 | 	shl	local05, #2
064d4     12 27 02 F1 | 	add	local05, local04
064d8     02 26 66 F0 | 	shl	local05, #2
064dc     07 00 00 FF 
064e0     40 E5 85 F1 | 	sub	objptr, ##3904
064e4     F2 26 02 F1 | 	add	local05, objptr
064e8     10 26 06 F1 | 	add	local05, #16
064ec     13 1F 62 FC | 	wrlong	local01, local05
064f0                 | ' fortop+=1
064f0                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
064f0                 | ' 'if i> maxfor then printerror(36) : return
064f0                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
064f0                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
064f0                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
064f0                 | ' if compiledline(lineptr_e).result_type=token_end then
064f0     08 00 00 FF 
064f4     18 E4 85 F1 | 	sub	objptr, ##4120
064f8     F2 1E 02 FB | 	rdlong	local01, objptr
064fc     0F 27 02 F6 | 	mov	local05, local01
06500     01 26 66 F0 | 	shl	local05, #1
06504     0F 27 02 F1 | 	add	local05, local01
06508     02 26 66 F0 | 	shl	local05, #2
0650c     03 00 00 FF 
06510     04 E4 85 F1 | 	sub	objptr, ##1540
06514     F2 26 02 F1 | 	add	local05, objptr
06518     08 26 06 F1 | 	add	local05, #8
0651c     13 27 02 FB | 	rdlong	local05, local05
06520     FE 27 0E F2 | 	cmp	local05, #510 wz
06524     3E 00 00 FF 
06528     40 E4 85 F1 | 	sub	objptr, ##31808
0652c     70 00 90 5D |  if_ne	jmp	#LR__0560
06530     50 00 00 FF 
06534     9C E5 05 F1 | 	add	objptr, ##41372
06538     F2 1E 02 FB | 	rdlong	local01, objptr
0653c     0F 27 02 F6 | 	mov	local05, local01
06540     02 26 66 F0 | 	shl	local05, #2
06544     0F 27 02 F1 | 	add	local05, local01
06548     02 26 66 F0 | 	shl	local05, #2
0654c     07 00 00 FF 
06550     40 E5 85 F1 | 	sub	objptr, ##3904
06554     F2 26 02 F1 | 	add	local05, objptr
06558     07 00 00 FF 
0655c     18 E5 05 F1 | 	add	objptr, ##3864
06560     F2 1E 02 FB | 	rdlong	local01, objptr
06564     13 1F 62 FC | 	wrlong	local01, local05
06568     28 E4 05 F1 | 	add	objptr, #40
0656c     F2 1E 02 FB | 	rdlong	local01, objptr
06570     0F 27 02 F6 | 	mov	local05, local01
06574     02 26 66 F0 | 	shl	local05, #2
06578     0F 27 02 F1 | 	add	local05, local01
0657c     02 26 66 F0 | 	shl	local05, #2
06580     07 00 00 FF 
06584     40 E5 85 F1 | 	sub	objptr, ##3904
06588     F2 26 02 F1 | 	add	local05, objptr
0658c     04 26 06 F1 | 	add	local05, #4
06590     13 01 68 FC | 	wrlong	#0, local05
06594     49 00 00 FF 
06598     5C E4 85 F1 | 	sub	objptr, ##37468
0659c     7C 00 90 FD | 	jmp	#LR__0561
065a0                 | LR__0560
065a0     50 00 00 FF 
065a4     9C E5 05 F1 | 	add	objptr, ##41372
065a8     F2 1E 02 FB | 	rdlong	local01, objptr
065ac     0F 27 02 F6 | 	mov	local05, local01
065b0     02 26 66 F0 | 	shl	local05, #2
065b4     0F 27 02 F1 | 	add	local05, local01
065b8     02 26 66 F0 | 	shl	local05, #2
065bc     07 00 00 FF 
065c0     40 E5 85 F1 | 	sub	objptr, ##3904
065c4     F2 26 02 F1 | 	add	local05, objptr
065c8     07 00 00 FF 
065cc     20 E5 05 F1 | 	add	objptr, ##3872
065d0     F2 1E 02 FB | 	rdlong	local01, objptr
065d4     13 1F 62 FC | 	wrlong	local01, local05
065d8     20 E4 05 F1 | 	add	objptr, #32
065dc     F2 1E 02 FB | 	rdlong	local01, objptr
065e0     0F 27 02 F6 | 	mov	local05, local01
065e4     02 26 66 F0 | 	shl	local05, #2
065e8     0F 27 02 F1 | 	add	local05, local01
065ec     02 26 66 F0 | 	shl	local05, #2
065f0     07 00 00 FF 
065f4     40 E5 85 F1 | 	sub	objptr, ##3904
065f8     F2 26 02 F1 | 	add	local05, objptr
065fc     08 00 00 FF 
06600     18 E4 85 F1 | 	sub	objptr, ##4120
06604     F2 1E 02 FB | 	rdlong	local01, objptr
06608     41 00 00 FF 
0660c     44 E4 85 F1 | 	sub	objptr, ##33348
06610     01 1E 06 F1 | 	add	local01, #1
06614     04 26 06 F1 | 	add	local05, #4
06618     13 1F 62 FC | 	wrlong	local01, local05
0661c                 | LR__0561
0661c     A7 F0 03 F6 | 	mov	ptra, fp
06620     B2 00 A0 FD | 	call	#popregs_
06624                 | _do_for_ret
06624     2D 00 64 FD | 	ret
06628                 | 
06628                 | ' 
06628                 | ' ' now do_next todo
06628                 | ' 
06628                 | ' sub do_next()
06628                 | _do_next
06628     04 4A 05 F6 | 	mov	COUNT_, #4
0662c     A8 00 A0 FD | 	call	#pushregs_
06630     EC 19 B0 FD | 	call	#_pop
06634     FD 1E 02 F6 | 	mov	local01, result1
06638     FE 20 02 F6 | 	mov	local02, result2
0663c     FF 22 02 F6 | 	mov	local03, result3
06640                 | ' 
06640                 | ' t1=pop() :varnum=t1.result.uresult
06640                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06640     50 00 00 FF 
06644     9C E5 05 F1 | 	add	objptr, ##41372
06648     F2 12 02 FB | 	rdlong	arg01, objptr
0664c     09 25 02 F6 | 	mov	local04, arg01
06650     02 24 66 F0 | 	shl	local04, #2
06654     09 25 02 F1 | 	add	local04, arg01
06658     02 24 66 F0 | 	shl	local04, #2
0665c     07 00 00 FF 
06660     40 E5 85 F1 | 	sub	objptr, ##3904
06664     F2 24 02 F1 | 	add	local04, objptr
06668     08 24 06 F1 | 	add	local04, #8
0666c     12 25 02 FB | 	rdlong	local04, local04
06670     0F 25 0A F2 | 	cmp	local04, local01 wz
06674     49 00 00 FF 
06678     5C E4 85 F1 | 	sub	objptr, ##37468
0667c     0C 00 90 AD |  if_e	jmp	#LR__0570
06680     25 12 06 F6 | 	mov	arg01, #37
06684     04 9F B0 FD | 	call	#_printerror
06688     28 02 90 FD | 	jmp	#LR__0574
0668c                 | LR__0570
0668c     50 00 00 FF 
06690     9C E5 05 F1 | 	add	objptr, ##41372
06694     F2 12 02 FB | 	rdlong	arg01, objptr
06698     09 25 02 F6 | 	mov	local04, arg01
0669c     02 24 66 F0 | 	shl	local04, #2
066a0     09 25 02 F1 | 	add	local04, arg01
066a4     02 24 66 F0 | 	shl	local04, #2
066a8     07 00 00 FF 
066ac     40 E5 85 F1 | 	sub	objptr, ##3904
066b0     F2 24 02 F1 | 	add	local04, objptr
066b4     0C 24 06 F1 | 	add	local04, #12
066b8     12 25 02 FB | 	rdlong	local04, local04
066bc     0F 13 02 F6 | 	mov	arg01, local01
066c0     04 12 66 F0 | 	shl	arg01, #4
066c4     3D 00 00 FF 
066c8     90 E4 85 F1 | 	sub	objptr, ##31376
066cc     F2 12 02 F1 | 	add	arg01, objptr
066d0     0F FF 01 F6 | 	mov	result3, local01
066d4     04 FE 65 F0 | 	shl	result3, #4
066d8     F2 FE 01 F1 | 	add	result3, objptr
066dc     04 FE 05 F1 | 	add	result3, #4
066e0     FF FE 01 FB | 	rdlong	result3, result3
066e4     12 FF 01 F1 | 	add	result3, local04
066e8     04 12 06 F1 | 	add	arg01, #4
066ec     09 FF 61 FC | 	wrlong	result3, arg01
066f0                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
066f0                 | ' if fortable(fortop).stepval>0 then
066f0     44 00 00 FF 
066f4     D0 E5 05 F1 | 	add	objptr, ##35280
066f8     F2 12 02 FB | 	rdlong	arg01, objptr
066fc     09 25 02 F6 | 	mov	local04, arg01
06700     02 24 66 F0 | 	shl	local04, #2
06704     09 25 02 F1 | 	add	local04, arg01
06708     02 24 66 F0 | 	shl	local04, #2
0670c     07 00 00 FF 
06710     40 E5 85 F1 | 	sub	objptr, ##3904
06714     F2 24 02 F1 | 	add	local04, objptr
06718     0C 24 06 F1 | 	add	local04, #12
0671c     12 25 02 FB | 	rdlong	local04, local04
06720     01 24 56 F2 | 	cmps	local04, #1 wc
06724     49 00 00 FF 
06728     5C E4 85 F1 | 	sub	objptr, ##37468
0672c     78 00 90 CD |  if_b	jmp	#LR__0571
06730                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06730     04 1E 66 F0 | 	shl	local01, #4
06734     0B 00 00 FF 
06738     CC E5 05 F1 | 	add	objptr, ##6092
0673c     F2 1E 02 F1 | 	add	local01, objptr
06740     44 00 00 FF 
06744     D0 E5 05 F1 | 	add	objptr, ##35280
06748     F2 24 02 FB | 	rdlong	local04, objptr
0674c     12 13 02 F6 | 	mov	arg01, local04
06750     02 12 66 F0 | 	shl	arg01, #2
06754     12 13 02 F1 | 	add	arg01, local04
06758     02 12 66 F0 | 	shl	arg01, #2
0675c     07 00 00 FF 
06760     40 E5 85 F1 | 	sub	objptr, ##3904
06764     F2 12 02 F1 | 	add	arg01, objptr
06768     04 1E 06 F1 | 	add	local01, #4
0676c     0F 25 02 FB | 	rdlong	local04, local01
06770     10 12 06 F1 | 	add	arg01, #16
06774     09 13 02 FB | 	rdlong	arg01, arg01
06778     09 25 5A F2 | 	cmps	local04, arg01 wcz
0677c     49 00 00 FF 
06780     5C E4 85 F1 | 	sub	objptr, ##37468
06784     9C 00 90 ED |  if_be	jmp	#LR__0573
06788     50 00 00 FF 
0678c     9C E5 05 F1 | 	add	objptr, ##41372
06790     F2 24 02 FB | 	rdlong	local04, objptr
06794     01 24 86 F1 | 	sub	local04, #1
06798     F2 24 62 FC | 	wrlong	local04, objptr
0679c     50 00 00 FF 
067a0     9C E5 85 F1 | 	sub	objptr, ##41372
067a4     0C 01 90 FD | 	jmp	#LR__0574
067a8                 | LR__0571
067a8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
067a8     0F 13 02 F6 | 	mov	arg01, local01
067ac     04 12 66 F0 | 	shl	arg01, #4
067b0     0B 00 00 FF 
067b4     CC E5 05 F1 | 	add	objptr, ##6092
067b8     F2 12 02 F1 | 	add	arg01, objptr
067bc     44 00 00 FF 
067c0     D0 E5 05 F1 | 	add	objptr, ##35280
067c4     F2 24 02 FB | 	rdlong	local04, objptr
067c8     12 1F 02 F6 | 	mov	local01, local04
067cc     02 1E 66 F0 | 	shl	local01, #2
067d0     12 1F 02 F1 | 	add	local01, local04
067d4     02 1E 66 F0 | 	shl	local01, #2
067d8     07 00 00 FF 
067dc     40 E5 85 F1 | 	sub	objptr, ##3904
067e0     F2 1E 02 F1 | 	add	local01, objptr
067e4     04 12 06 F1 | 	add	arg01, #4
067e8     09 13 02 FB | 	rdlong	arg01, arg01
067ec     10 1E 06 F1 | 	add	local01, #16
067f0     0F 1F 02 FB | 	rdlong	local01, local01
067f4     0F 13 52 F2 | 	cmps	arg01, local01 wc
067f8     49 00 00 FF 
067fc     5C E4 85 F1 | 	sub	objptr, ##37468
06800     20 00 90 3D |  if_ae	jmp	#LR__0572
06804     50 00 00 FF 
06808     9C E5 05 F1 | 	add	objptr, ##41372
0680c     F2 24 02 FB | 	rdlong	local04, objptr
06810     01 24 86 F1 | 	sub	local04, #1
06814     F2 24 62 FC | 	wrlong	local04, objptr
06818     50 00 00 FF 
0681c     9C E5 85 F1 | 	sub	objptr, ##41372
06820     90 00 90 FD | 	jmp	#LR__0574
06824                 | LR__0572
06824                 | LR__0573
06824     50 00 00 FF 
06828     9C E5 05 F1 | 	add	objptr, ##41372
0682c     F2 1E 02 FB | 	rdlong	local01, objptr
06830     0F 25 02 F6 | 	mov	local04, local01
06834     02 24 66 F0 | 	shl	local04, #2
06838     0F 25 02 F1 | 	add	local04, local01
0683c     02 24 66 F0 | 	shl	local04, #2
06840     07 00 00 FF 
06844     40 E5 85 F1 | 	sub	objptr, ##3904
06848     F2 24 02 F1 | 	add	local04, objptr
0684c     12 25 02 FB | 	rdlong	local04, local04
06850     07 00 00 FF 
06854     18 E5 05 F1 | 	add	objptr, ##3864
06858     F2 24 62 FC | 	wrlong	local04, objptr
0685c     28 E4 05 F1 | 	add	objptr, #40
06860     F2 1E 02 FB | 	rdlong	local01, objptr
06864     0F 25 02 F6 | 	mov	local04, local01
06868     02 24 66 F0 | 	shl	local04, #2
0686c     0F 25 02 F1 | 	add	local04, local01
06870     02 24 66 F0 | 	shl	local04, #2
06874     07 00 00 FF 
06878     40 E5 85 F1 | 	sub	objptr, ##3904
0687c     F2 24 02 F1 | 	add	local04, objptr
06880     04 24 06 F1 | 	add	local04, #4
06884     12 25 02 FB | 	rdlong	local04, local04
06888     07 00 00 FF 
0688c     1C E5 05 F1 | 	add	objptr, ##3868
06890     F2 24 62 FC | 	wrlong	local04, objptr
06894     0F 00 00 FF 
06898     38 E5 85 F1 | 	sub	objptr, ##7992
0689c     F2 24 02 FB | 	rdlong	local04, objptr
068a0     01 24 86 F1 | 	sub	local04, #1
068a4     04 E4 05 F1 | 	add	objptr, #4
068a8     F2 24 62 FC | 	wrlong	local04, objptr
068ac     41 00 00 FF 
068b0     44 E4 85 F1 | 	sub	objptr, ##33348
068b4                 | LR__0574
068b4     A7 F0 03 F6 | 	mov	ptra, fp
068b8     B2 00 A0 FD | 	call	#popregs_
068bc                 | _do_next_ret
068bc     2D 00 64 FD | 	ret
068c0                 | 
068c0                 | ' 
068c0                 | ' 
068c0                 | ' function compile_next() as ulong
068c0                 | _compile_next
068c0     04 4A 05 F6 | 	mov	COUNT_, #4
068c4     A8 00 A0 FD | 	call	#pushregs_
068c8     2E 00 00 FF 
068cc     08 E4 05 F1 | 	add	objptr, ##23560
068d0     F2 12 02 FB | 	rdlong	arg01, objptr
068d4     03 12 66 F0 | 	shl	arg01, #3
068d8     02 00 00 FF 
068dc     38 E4 85 F1 | 	sub	objptr, ##1080
068e0     F2 12 02 F1 | 	add	arg01, objptr
068e4     09 1F 02 FB | 	rdlong	local01, arg01
068e8                 | ' 
068e8                 | ' varname$=lparts(ct).part$ 
068e8                 | ' 'suffix$=right$(varname$,1)
068e8                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
068e8                 | ' if varnum=0 then compile_error(35)  : return 35
068e8     04 E4 85 F1 | 	sub	objptr, #4
068ec     F2 14 0A FB | 	rdlong	arg02, objptr wz
068f0     2B 00 00 FF 
068f4     CC E5 85 F1 | 	sub	objptr, ##22476
068f8     10 00 90 5D |  if_ne	jmp	#LR__0580
068fc     23 12 06 F6 | 	mov	arg01, #35
06900     D0 E2 BF FD | 	call	#_compile_error
06904     23 FA 05 F6 | 	mov	result1, #35
06908     58 01 90 FD | 	jmp	#LR__0584
0690c                 | LR__0580
0690c     01 20 66 F6 | 	neg	local02, #1
06910                 | ' j=-1
06910                 | ' for i=0 to varnum-1
06910     00 22 06 F6 | 	mov	local03, #0
06914     2B 00 00 FF 
06918     CC E5 05 F1 | 	add	objptr, ##22476
0691c     F2 24 02 FB | 	rdlong	local04, objptr
06920     2B 00 00 FF 
06924     CC E5 85 F1 | 	sub	objptr, ##22476
06928                 | LR__0581
06928     12 23 12 F2 | 	cmp	local03, local04 wc
0692c     38 00 90 3D |  if_ae	jmp	#LR__0582
06930                 | '   if variables(i).name=varname$ then j=i : exit
06930     11 15 02 F6 | 	mov	arg02, local03
06934     04 14 66 F0 | 	shl	arg02, #4
06938     0B 00 00 FF 
0693c     CC E5 05 F1 | 	add	objptr, ##6092
06940     F2 14 02 F1 | 	add	arg02, objptr
06944     0A 13 02 FB | 	rdlong	arg01, arg02
06948     0F 15 02 F6 | 	mov	arg02, local01
0694c     0B 00 00 FF 
06950     CC E5 85 F1 | 	sub	objptr, ##6092
06954     50 D1 B0 FD | 	call	#__system___string_cmp
06958     00 FA 0D F2 | 	cmp	result1, #0 wz
0695c     11 21 02 A6 |  if_e	mov	local02, local03
06960     01 22 06 51 |  if_ne	add	local03, #1
06964     C0 FF 9F 5D |  if_ne	jmp	#LR__0581
06968                 | LR__0582
06968                 | ' if j=-1 then compile_error(35) : return 35
06968     FF FF 7F FF 
0696c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06970     10 00 90 5D |  if_ne	jmp	#LR__0583
06974     23 12 06 F6 | 	mov	arg01, #35
06978     58 E2 BF FD | 	call	#_compile_error
0697c     23 FA 05 F6 | 	mov	result1, #35
06980     E0 00 90 FD | 	jmp	#LR__0584
06984                 | LR__0583
06984     41 00 00 FF 
06988     40 E4 05 F1 | 	add	objptr, ##33344
0698c     F2 24 02 FB | 	rdlong	local04, objptr
06990     12 23 02 F6 | 	mov	local03, local04
06994     01 22 66 F0 | 	shl	local03, #1
06998     12 23 02 F1 | 	add	local03, local04
0699c     02 22 66 F0 | 	shl	local03, #2
069a0     03 00 00 FF 
069a4     00 E4 85 F1 | 	sub	objptr, ##1536
069a8     F2 22 02 F1 | 	add	local03, objptr
069ac     08 22 06 F1 | 	add	local03, #8
069b0     11 39 68 FC | 	wrlong	#28, local03
069b4     03 00 00 FF 
069b8     00 E4 05 F1 | 	add	objptr, ##1536
069bc     F2 24 02 FB | 	rdlong	local04, objptr
069c0     12 23 02 F6 | 	mov	local03, local04
069c4     01 22 66 F0 | 	shl	local03, #1
069c8     12 23 02 F1 | 	add	local03, local04
069cc     02 22 66 F0 | 	shl	local03, #2
069d0     03 00 00 FF 
069d4     00 E4 85 F1 | 	sub	objptr, ##1536
069d8     F2 22 02 F1 | 	add	local03, objptr
069dc     11 21 62 FC | 	wrlong	local02, local03
069e0     03 00 00 FF 
069e4     00 E4 05 F1 | 	add	objptr, ##1536
069e8     F2 24 02 FB | 	rdlong	local04, objptr
069ec     01 24 06 F1 | 	add	local04, #1
069f0     F2 24 62 FC | 	wrlong	local04, objptr
069f4     12 23 02 F6 | 	mov	local03, local04
069f8     01 22 66 F0 | 	shl	local03, #1
069fc     12 23 02 F1 | 	add	local03, local04
06a00     02 22 66 F0 | 	shl	local03, #2
06a04     03 00 00 FF 
06a08     00 E4 85 F1 | 	sub	objptr, ##1536
06a0c     F2 22 02 F1 | 	add	local03, objptr
06a10     08 22 06 F1 | 	add	local03, #8
06a14     11 97 68 FC | 	wrlong	#75, local03
06a18     03 00 00 FF 
06a1c     00 E4 05 F1 | 	add	objptr, ##1536
06a20     F2 24 02 FB | 	rdlong	local04, objptr
06a24     12 23 02 F6 | 	mov	local03, local04
06a28     01 22 66 F0 | 	shl	local03, #1
06a2c     12 23 02 F1 | 	add	local03, local04
06a30     02 22 66 F0 | 	shl	local03, #2
06a34     03 00 00 FF 
06a38     00 E4 85 F1 | 	sub	objptr, ##1536
06a3c     F2 22 02 F1 | 	add	local03, objptr
06a40     11 01 68 FC | 	wrlong	#0, local03
06a44     03 00 00 FF 
06a48     00 E4 05 F1 | 	add	objptr, ##1536
06a4c     F2 24 02 FB | 	rdlong	local04, objptr
06a50     01 24 06 F1 | 	add	local04, #1
06a54     F2 24 62 FC | 	wrlong	local04, objptr
06a58     41 00 00 FF 
06a5c     40 E4 85 F1 | 	sub	objptr, ##33344
06a60                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
06a60                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
06a60                 | ' return 0
06a60     00 FA 05 F6 | 	mov	result1, #0
06a64                 | LR__0584
06a64     A7 F0 03 F6 | 	mov	ptra, fp
06a68     B2 00 A0 FD | 	call	#popregs_
06a6c                 | _compile_next_ret
06a6c     2D 00 64 FD | 	ret
06a70                 | 
06a70                 | ' 
06a70                 | ' 
06a70                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
06a70                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
06a70                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
06a70                 | ' 
06a70                 | ' 
06a70                 | ' function compile_goto( ) as ulong
06a70                 | _compile_goto
06a70     03 4A 05 F6 | 	mov	COUNT_, #3
06a74     A8 00 A0 FD | 	call	#pushregs_
06a78     28 F0 07 F1 | 	add	ptra, #40
06a7c                 | ' 
06a7c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
06a7c     2E 00 00 FF 
06a80     08 E4 05 F1 | 	add	objptr, ##23560
06a84     F2 16 02 FB | 	rdlong	arg03, objptr
06a88     03 16 66 F0 | 	shl	arg03, #3
06a8c     02 00 00 FF 
06a90     38 E4 85 F1 | 	sub	objptr, ##1080
06a94     F2 16 02 F1 | 	add	arg03, objptr
06a98     04 16 06 F1 | 	add	arg03, #4
06a9c     0B 17 02 FB | 	rdlong	arg03, arg03
06aa0     01 00 00 FF 
06aa4     00 16 0E F2 | 	cmp	arg03, ##512 wz
06aa8     2B 00 00 FF 
06aac     D0 E5 85 F1 | 	sub	objptr, ##22480
06ab0     CC 02 90 5D |  if_ne	jmp	#LR__0595
06ab4     2E 00 00 FF 
06ab8     08 E4 05 F1 | 	add	objptr, ##23560
06abc     F2 16 02 FB | 	rdlong	arg03, objptr
06ac0     01 16 06 F1 | 	add	arg03, #1
06ac4     03 16 66 F0 | 	shl	arg03, #3
06ac8     02 00 00 FF 
06acc     38 E4 85 F1 | 	sub	objptr, ##1080
06ad0     F2 16 02 F1 | 	add	arg03, objptr
06ad4     04 16 06 F1 | 	add	arg03, #4
06ad8     0B 17 02 FB | 	rdlong	arg03, arg03
06adc     FE 17 0E F2 | 	cmp	arg03, #510 wz
06ae0     2B 00 00 FF 
06ae4     D0 E5 85 F1 | 	sub	objptr, ##22480
06ae8     94 02 90 5D |  if_ne	jmp	#LR__0595
06aec     2E 00 00 FF 
06af0     08 E4 05 F1 | 	add	objptr, ##23560
06af4     F2 16 02 FB | 	rdlong	arg03, objptr
06af8     03 16 66 F0 | 	shl	arg03, #3
06afc     02 00 00 FF 
06b00     38 E4 85 F1 | 	sub	objptr, ##1080
06b04     F2 16 02 F1 | 	add	arg03, objptr
06b08     0B 13 02 FB | 	rdlong	arg01, arg03
06b0c     00 14 06 F6 | 	mov	arg02, #0
06b10     2B 00 00 FF 
06b14     D0 E5 85 F1 | 	sub	objptr, ##22480
06b18     28 FF B0 FD | 	call	#__system____builtin_atoi
06b1c     04 4E 05 F1 | 	add	fp, #4
06b20     A7 FA 61 FC | 	wrlong	result1, fp
06b24     41 00 00 FF 
06b28     40 E4 05 F1 | 	add	objptr, ##33344
06b2c     F2 1E 02 FB | 	rdlong	local01, objptr
06b30     0F 21 02 F6 | 	mov	local02, local01
06b34     01 20 66 F0 | 	shl	local02, #1
06b38     0F 21 02 F1 | 	add	local02, local01
06b3c     02 20 66 F0 | 	shl	local02, #2
06b40     03 00 00 FF 
06b44     00 E4 85 F1 | 	sub	objptr, ##1536
06b48     F2 20 02 F1 | 	add	local02, objptr
06b4c     08 20 06 F1 | 	add	local02, #8
06b50     10 9D 68 FC | 	wrlong	#78, local02
06b54     03 00 00 FF 
06b58     08 E4 05 F1 | 	add	objptr, ##1544
06b5c     F2 22 02 FB | 	rdlong	local03, objptr
06b60     41 00 00 FF 
06b64     48 E4 85 F1 | 	sub	objptr, ##33352
06b68     04 4E 05 F1 | 	add	fp, #4
06b6c     A7 22 62 FC | 	wrlong	local03, fp
06b70     08 4E 85 F1 | 	sub	fp, #8
06b74                 | ' 
06b74                 | '   gotoline=val%(lparts(ct).part$) 
06b74                 | '   compiledline(lineptr).result_type=token_fast_goto
06b74                 | ' ' now find a pointer to goto
06b74                 | '   gotoptr=programstart
06b74                 | '   do
06b74                 | LR__0590
06b74     10 4E 05 F1 | 	add	fp, #16
06b78     A7 12 02 F6 | 	mov	arg01, fp
06b7c     08 4E 85 F1 | 	sub	fp, #8
06b80     A7 14 02 FB | 	rdlong	arg02, fp
06b84     08 4E 85 F1 | 	sub	fp, #8
06b88     18 16 06 F6 | 	mov	arg03, #24
06b8c     0B 00 00 FF 
06b90     C0 E4 05 F1 | 	add	objptr, ##5824
06b94     FC C3 B0 FD | 	call	#_psram_spin2_read1
06b98     0B 00 00 FF 
06b9c     C0 E4 85 F1 | 	sub	objptr, ##5824
06ba0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
06ba0                 | '     if gotoheader(0)<>$FFFFFFFF then
06ba0     10 4E 05 F1 | 	add	fp, #16
06ba4     A7 22 02 FB | 	rdlong	local03, fp
06ba8     10 4E 85 F1 | 	sub	fp, #16
06bac     FF FF 7F FF 
06bb0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
06bb4     24 00 90 AD |  if_e	jmp	#LR__0591
06bb8     08 4E 05 F1 | 	add	fp, #8
06bbc     A7 22 02 FB | 	rdlong	local03, fp
06bc0     04 4E 05 F1 | 	add	fp, #4
06bc4     A7 22 62 FC | 	wrlong	local03, fp
06bc8     18 4E 05 F1 | 	add	fp, #24
06bcc     A7 22 02 FB | 	rdlong	local03, fp
06bd0     1C 4E 85 F1 | 	sub	fp, #28
06bd4     A7 22 62 FC | 	wrlong	local03, fp
06bd8     08 4E 85 F1 | 	sub	fp, #8
06bdc                 | LR__0591
06bdc     24 4E 05 F1 | 	add	fp, #36
06be0     A7 22 02 FB | 	rdlong	local03, fp
06be4     24 4E 85 F1 | 	sub	fp, #36
06be8     FF FF 3F FF 
06bec     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
06bf0     10 4E 05 51 |  if_ne	add	fp, #16
06bf4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
06bf8     10 4E 85 51 |  if_ne	sub	fp, #16
06bfc     FF FF 7F 5F 
06c00     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
06c04     1C 00 90 AD |  if_e	jmp	#LR__0592
06c08     10 4E 05 F1 | 	add	fp, #16
06c0c     A7 22 02 FB | 	rdlong	local03, fp
06c10     0C 4E 85 F1 | 	sub	fp, #12
06c14     A7 20 02 FB | 	rdlong	local02, fp
06c18     04 4E 85 F1 | 	sub	fp, #4
06c1c     10 23 0A F2 | 	cmp	local03, local02 wz
06c20     50 FF 9F 5D |  if_ne	jmp	#LR__0590
06c24                 | LR__0592
06c24                 | '   if gotoheader(0)=gotoline then
06c24     10 4E 05 F1 | 	add	fp, #16
06c28     A7 22 02 FB | 	rdlong	local03, fp
06c2c     0C 4E 85 F1 | 	sub	fp, #12
06c30     A7 1E 02 FB | 	rdlong	local01, fp
06c34     04 4E 85 F1 | 	sub	fp, #4
06c38     0F 23 0A F2 | 	cmp	local03, local01 wz
06c3c     7C 00 90 5D |  if_ne	jmp	#LR__0593
06c40     41 00 00 FF 
06c44     40 E4 05 F1 | 	add	objptr, ##33344
06c48     F2 1E 02 FB | 	rdlong	local01, objptr
06c4c     0F 21 02 F6 | 	mov	local02, local01
06c50     01 20 66 F0 | 	shl	local02, #1
06c54     0F 21 02 F1 | 	add	local02, local01
06c58     02 20 66 F0 | 	shl	local02, #2
06c5c     03 00 00 FF 
06c60     00 E4 85 F1 | 	sub	objptr, ##1536
06c64     F2 20 02 F1 | 	add	local02, objptr
06c68     0C 4E 05 F1 | 	add	fp, #12
06c6c     A7 22 02 FB | 	rdlong	local03, fp
06c70     10 23 62 FC | 	wrlong	local03, local02
06c74     03 00 00 FF 
06c78     00 E4 05 F1 | 	add	objptr, ##1536
06c7c     F2 1E 02 FB | 	rdlong	local01, objptr
06c80     0F 21 02 F6 | 	mov	local02, local01
06c84     01 20 66 F0 | 	shl	local02, #1
06c88     0F 21 02 F1 | 	add	local02, local01
06c8c     02 20 66 F0 | 	shl	local02, #2
06c90     03 00 00 FF 
06c94     00 E4 85 F1 | 	sub	objptr, ##1536
06c98     F2 20 02 F1 | 	add	local02, objptr
06c9c     08 4E 85 F1 | 	sub	fp, #8
06ca0     A7 22 02 FB | 	rdlong	local03, fp
06ca4     04 4E 85 F1 | 	sub	fp, #4
06ca8     04 20 06 F1 | 	add	local02, #4
06cac     10 23 62 FC | 	wrlong	local03, local02
06cb0     3E 00 00 FF 
06cb4     40 E4 85 F1 | 	sub	objptr, ##31808
06cb8     A4 00 90 FD | 	jmp	#LR__0594
06cbc                 | LR__0593
06cbc     41 00 00 FF 
06cc0     40 E4 05 F1 | 	add	objptr, ##33344
06cc4     F2 1E 02 FB | 	rdlong	local01, objptr
06cc8     0F 21 02 F6 | 	mov	local02, local01
06ccc     01 20 66 F0 | 	shl	local02, #1
06cd0     0F 21 02 F1 | 	add	local02, local01
06cd4     02 20 66 F0 | 	shl	local02, #2
06cd8     03 00 00 FF 
06cdc     00 E4 85 F1 | 	sub	objptr, ##1536
06ce0     F2 20 02 F1 | 	add	local02, objptr
06ce4     00 00 C0 FF 
06ce8     10 01 68 FC | 	wrlong	##-2147483648, local02
06cec     03 00 00 FF 
06cf0     00 E4 05 F1 | 	add	objptr, ##1536
06cf4     F2 1E 02 FB | 	rdlong	local01, objptr
06cf8     0F 21 02 F6 | 	mov	local02, local01
06cfc     01 20 66 F0 | 	shl	local02, #1
06d00     0F 21 02 F1 | 	add	local02, local01
06d04     02 20 66 F0 | 	shl	local02, #2
06d08     03 00 00 FF 
06d0c     00 E4 85 F1 | 	sub	objptr, ##1536
06d10     F2 20 02 F1 | 	add	local02, objptr
06d14     04 4E 05 F1 | 	add	fp, #4
06d18     A7 22 02 FB | 	rdlong	local03, fp
06d1c     04 4E 85 F1 | 	sub	fp, #4
06d20     04 20 06 F1 | 	add	local02, #4
06d24     10 23 62 FC | 	wrlong	local03, local02
06d28     03 00 00 FF 
06d2c     00 E4 05 F1 | 	add	objptr, ##1536
06d30     F2 1E 02 FB | 	rdlong	local01, objptr
06d34     0F 21 02 F6 | 	mov	local02, local01
06d38     01 20 66 F0 | 	shl	local02, #1
06d3c     0F 21 02 F1 | 	add	local02, local01
06d40     02 20 66 F0 | 	shl	local02, #2
06d44     03 00 00 FF 
06d48     00 E4 85 F1 | 	sub	objptr, ##1536
06d4c     F2 20 02 F1 | 	add	local02, objptr
06d50     08 20 06 F1 | 	add	local02, #8
06d54     10 A7 68 FC | 	wrlong	#83, local02
06d58     3E 00 00 FF 
06d5c     40 E4 85 F1 | 	sub	objptr, ##31808
06d60                 | LR__0594
06d60     41 00 00 FF 
06d64     40 E4 05 F1 | 	add	objptr, ##33344
06d68     F2 22 02 FB | 	rdlong	local03, objptr
06d6c     01 22 06 F1 | 	add	local03, #1
06d70     F2 22 62 FC | 	wrlong	local03, objptr
06d74     41 00 00 FF 
06d78     40 E4 85 F1 | 	sub	objptr, ##33344
06d7c     40 00 90 FD | 	jmp	#LR__0596
06d80                 | LR__0595
06d80                 | '    print "We have a slow goto, todo  "
06d80     00 12 06 F6 | 	mov	arg01, #0
06d84     DC 21 B1 FD | 	call	#__system___getiolock_0306
06d88     FD 12 02 F6 | 	mov	arg01, result1
06d8c     F0 CC B0 FD | 	call	#__system___lockmem
06d90     18 01 00 FF 
06d94     69 14 06 F6 | 	mov	arg02, ##@LR__4200
06d98     00 12 06 F6 | 	mov	arg01, #0
06d9c     00 16 06 F6 | 	mov	arg03, #0
06da0     E8 D8 B0 FD | 	call	#__system___basic_print_string
06da4     00 12 06 F6 | 	mov	arg01, #0
06da8     0A 14 06 F6 | 	mov	arg02, #10
06dac     00 16 06 F6 | 	mov	arg03, #0
06db0     80 D8 B0 FD | 	call	#__system___basic_print_char
06db4     00 12 06 F6 | 	mov	arg01, #0
06db8     A8 21 B1 FD | 	call	#__system___getiolock_0306
06dbc     FD 00 68 FC | 	wrlong	#0, result1
06dc0                 | LR__0596
06dc0                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
06dc0                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
06dc0                 | ' return 0
06dc0     00 FA 05 F6 | 	mov	result1, #0
06dc4     A7 F0 03 F6 | 	mov	ptra, fp
06dc8     B2 00 A0 FD | 	call	#popregs_
06dcc                 | _compile_goto_ret
06dcc     2D 00 64 FD | 	ret
06dd0                 | 
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' function expr() as integer 
06dd0                 | _expr
06dd0     07 4A 05 F6 | 	mov	COUNT_, #7
06dd4     A8 00 A0 FD | 	call	#pushregs_
06dd8                 | _expr_enter
06dd8     2E 00 00 FF 
06ddc     08 E4 05 F1 | 	add	objptr, ##23560
06de0     F2 24 02 FB | 	rdlong	local04, objptr
06de4     03 24 66 F0 | 	shl	local04, #3
06de8     02 00 00 FF 
06dec     38 E4 85 F1 | 	sub	objptr, ##1080
06df0     F2 24 02 F1 | 	add	local04, objptr
06df4     04 24 06 F1 | 	add	local04, #4
06df8     12 27 02 FB | 	rdlong	local05, local04
06dfc                 | ' 
06dfc                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
06dfc     FE 27 0E F2 | 	cmp	local05, #510 wz
06e00     2B 00 00 FF 
06e04     D0 E5 85 F1 | 	sub	objptr, ##22480
06e08     C4 00 90 5D |  if_ne	jmp	#LR__0600
06e0c     1D 1E 06 F6 | 	mov	local01, #29
06e10     FF 22 06 F6 | 	mov	local03, #255
06e14     0F 29 02 F6 | 	mov	local06, local01
06e18     10 2B 02 F6 | 	mov	local07, local02
06e1c     11 1F 02 F6 | 	mov	local01, local03
06e20     41 00 00 FF 
06e24     40 E4 05 F1 | 	add	objptr, ##33344
06e28     F2 26 02 FB | 	rdlong	local05, objptr
06e2c     13 25 02 F6 | 	mov	local04, local05
06e30     01 24 66 F0 | 	shl	local04, #1
06e34     13 25 02 F1 | 	add	local04, local05
06e38     02 24 66 F0 | 	shl	local04, #2
06e3c     03 00 00 FF 
06e40     00 E4 85 F1 | 	sub	objptr, ##1536
06e44     F2 24 02 F1 | 	add	local04, objptr
06e48     12 29 62 FC | 	wrlong	local06, local04
06e4c     03 00 00 FF 
06e50     00 E4 05 F1 | 	add	objptr, ##1536
06e54     F2 28 02 FB | 	rdlong	local06, objptr
06e58     14 27 02 F6 | 	mov	local05, local06
06e5c     01 26 66 F0 | 	shl	local05, #1
06e60     14 27 02 F1 | 	add	local05, local06
06e64     02 26 66 F0 | 	shl	local05, #2
06e68     03 00 00 FF 
06e6c     00 E4 85 F1 | 	sub	objptr, ##1536
06e70     F2 26 02 F1 | 	add	local05, objptr
06e74     04 26 06 F1 | 	add	local05, #4
06e78     13 2B 62 FC | 	wrlong	local07, local05
06e7c     03 00 00 FF 
06e80     00 E4 05 F1 | 	add	objptr, ##1536
06e84     F2 2A 02 FB | 	rdlong	local07, objptr
06e88     15 29 02 F6 | 	mov	local06, local07
06e8c     01 28 66 F0 | 	shl	local06, #1
06e90     15 29 02 F1 | 	add	local06, local07
06e94     02 28 66 F0 | 	shl	local06, #2
06e98     03 00 00 FF 
06e9c     00 E4 85 F1 | 	sub	objptr, ##1536
06ea0     F2 28 02 F1 | 	add	local06, objptr
06ea4     08 28 06 F1 | 	add	local06, #8
06ea8     14 1F 62 FC | 	wrlong	local01, local06
06eac     03 00 00 FF 
06eb0     00 E4 05 F1 | 	add	objptr, ##1536
06eb4     F2 28 02 FB | 	rdlong	local06, objptr
06eb8     01 28 06 F1 | 	add	local06, #1
06ebc     F2 28 62 FC | 	wrlong	local06, objptr
06ec0     41 00 00 FF 
06ec4     40 E4 85 F1 | 	sub	objptr, ##33344
06ec8     1D FA 05 F6 | 	mov	result1, #29
06ecc     54 01 90 FD | 	jmp	#LR__0603
06ed0                 | LR__0600
06ed0     00 1E 06 F6 | 	mov	local01, #0
06ed4     58 01 B0 FD | 	call	#_addsub
06ed8     2E 00 00 FF 
06edc     08 E4 05 F1 | 	add	objptr, ##23560
06ee0     F2 24 02 FB | 	rdlong	local04, objptr
06ee4     03 24 66 F0 | 	shl	local04, #3
06ee8     02 00 00 FF 
06eec     38 E4 85 F1 | 	sub	objptr, ##1080
06ef0     F2 24 02 F1 | 	add	local04, objptr
06ef4     04 24 06 F1 | 	add	local04, #4
06ef8     12 27 02 FB | 	rdlong	local05, local04
06efc                 | ' t3.result.uresult=0
06efc                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
06efc                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
06efc                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
06efc     2B 00 00 FF 
06f00     D0 E5 85 F1 | 	sub	objptr, ##22480
06f04                 | LR__0601
06f04     1B 26 0E F2 | 	cmp	local05, #27 wz
06f08     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
06f0c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
06f10     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
06f14     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
06f18     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
06f1c     00 01 90 5D |  if_ne	jmp	#LR__0602
06f20     2E 00 00 FF 
06f24     08 E4 05 F1 | 	add	objptr, ##23560
06f28     F2 28 02 FB | 	rdlong	local06, objptr
06f2c     01 28 06 F1 | 	add	local06, #1
06f30     F2 28 62 FC | 	wrlong	local06, objptr
06f34     2E 00 00 FF 
06f38     08 E4 85 F1 | 	sub	objptr, ##23560
06f3c     F0 00 B0 FD | 	call	#_addsub
06f40     13 23 02 F6 | 	mov	local03, local05
06f44     0F 29 02 F6 | 	mov	local06, local01
06f48     10 2B 02 F6 | 	mov	local07, local02
06f4c     11 27 02 F6 | 	mov	local05, local03
06f50     41 00 00 FF 
06f54     40 E4 05 F1 | 	add	objptr, ##33344
06f58     F2 24 02 FB | 	rdlong	local04, objptr
06f5c     12 FB 01 F6 | 	mov	result1, local04
06f60     01 FA 65 F0 | 	shl	result1, #1
06f64     12 FB 01 F1 | 	add	result1, local04
06f68     02 FA 65 F0 | 	shl	result1, #2
06f6c     03 00 00 FF 
06f70     00 E4 85 F1 | 	sub	objptr, ##1536
06f74     F2 FA 01 F1 | 	add	result1, objptr
06f78     FD 28 62 FC | 	wrlong	local06, result1
06f7c     03 00 00 FF 
06f80     00 E4 05 F1 | 	add	objptr, ##1536
06f84     F2 28 02 FB | 	rdlong	local06, objptr
06f88     14 25 02 F6 | 	mov	local04, local06
06f8c     01 24 66 F0 | 	shl	local04, #1
06f90     14 25 02 F1 | 	add	local04, local06
06f94     02 24 66 F0 | 	shl	local04, #2
06f98     03 00 00 FF 
06f9c     00 E4 85 F1 | 	sub	objptr, ##1536
06fa0     F2 24 02 F1 | 	add	local04, objptr
06fa4     04 24 06 F1 | 	add	local04, #4
06fa8     12 2B 62 FC | 	wrlong	local07, local04
06fac     03 00 00 FF 
06fb0     00 E4 05 F1 | 	add	objptr, ##1536
06fb4     F2 2A 02 FB | 	rdlong	local07, objptr
06fb8     15 29 02 F6 | 	mov	local06, local07
06fbc     01 28 66 F0 | 	shl	local06, #1
06fc0     15 29 02 F1 | 	add	local06, local07
06fc4     02 28 66 F0 | 	shl	local06, #2
06fc8     03 00 00 FF 
06fcc     00 E4 85 F1 | 	sub	objptr, ##1536
06fd0     F2 28 02 F1 | 	add	local06, objptr
06fd4     08 28 06 F1 | 	add	local06, #8
06fd8     14 27 62 FC | 	wrlong	local05, local06
06fdc     03 00 00 FF 
06fe0     00 E4 05 F1 | 	add	objptr, ##1536
06fe4     F2 28 02 FB | 	rdlong	local06, objptr
06fe8     01 28 06 F1 | 	add	local06, #1
06fec     F2 28 62 FC | 	wrlong	local06, objptr
06ff0     13 00 00 FF 
06ff4     38 E4 85 F1 | 	sub	objptr, ##9784
06ff8     F2 24 02 FB | 	rdlong	local04, objptr
06ffc     03 24 66 F0 | 	shl	local04, #3
07000     02 00 00 FF 
07004     38 E4 85 F1 | 	sub	objptr, ##1080
07008     F2 24 02 F1 | 	add	local04, objptr
0700c     04 24 06 F1 | 	add	local04, #4
07010     12 27 02 FB | 	rdlong	local05, local04
07014     2B 00 00 FF 
07018     D0 E5 85 F1 | 	sub	objptr, ##22480
0701c     E4 FE 9F FD | 	jmp	#LR__0601
07020                 | LR__0602
07020                 | ' return 0  
07020     00 FA 05 F6 | 	mov	result1, #0
07024                 | LR__0603
07024     A7 F0 03 F6 | 	mov	ptra, fp
07028     B2 00 A0 FD | 	call	#popregs_
0702c                 | _expr_ret
0702c     2D 00 64 FD | 	ret
07030                 | 
07030                 | ' 
07030                 | ' 
07030                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07030                 | ' 
07030                 | ' function addsub() as integer 
07030                 | _addsub
07030     07 4A 05 F6 | 	mov	COUNT_, #7
07034     A8 00 A0 FD | 	call	#pushregs_
07038                 | _addsub_enter
07038     00 1E 06 F6 | 	mov	local01, #0
0703c     50 01 B0 FD | 	call	#_muldiv
07040     2E 00 00 FF 
07044     08 E4 05 F1 | 	add	objptr, ##23560
07048     F2 24 02 FB | 	rdlong	local04, objptr
0704c     03 24 66 F0 | 	shl	local04, #3
07050     02 00 00 FF 
07054     38 E4 85 F1 | 	sub	objptr, ##1080
07058     F2 24 02 F1 | 	add	local04, objptr
0705c     04 24 06 F1 | 	add	local04, #4
07060     12 27 02 FB | 	rdlong	local05, local04
07064                 | ' t3.result.uresult=0
07064                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07064                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07064                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07064     2B 00 00 FF 
07068     D0 E5 85 F1 | 	sub	objptr, ##22480
0706c                 | LR__0610
0706c     01 26 0E F2 | 	cmp	local05, #1 wz
07070     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07074     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07078     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0707c     00 01 90 5D |  if_ne	jmp	#LR__0611
07080     2E 00 00 FF 
07084     08 E4 05 F1 | 	add	objptr, ##23560
07088     F2 24 02 FB | 	rdlong	local04, objptr
0708c     01 24 06 F1 | 	add	local04, #1
07090     F2 24 62 FC | 	wrlong	local04, objptr
07094     2E 00 00 FF 
07098     08 E4 85 F1 | 	sub	objptr, ##23560
0709c     F0 00 B0 FD | 	call	#_muldiv
070a0     13 23 02 F6 | 	mov	local03, local05
070a4     0F 29 02 F6 | 	mov	local06, local01
070a8     10 2B 02 F6 | 	mov	local07, local02
070ac     11 27 02 F6 | 	mov	local05, local03
070b0     41 00 00 FF 
070b4     40 E4 05 F1 | 	add	objptr, ##33344
070b8     F2 24 02 FB | 	rdlong	local04, objptr
070bc     12 FB 01 F6 | 	mov	result1, local04
070c0     01 FA 65 F0 | 	shl	result1, #1
070c4     12 FB 01 F1 | 	add	result1, local04
070c8     02 FA 65 F0 | 	shl	result1, #2
070cc     03 00 00 FF 
070d0     00 E4 85 F1 | 	sub	objptr, ##1536
070d4     F2 FA 01 F1 | 	add	result1, objptr
070d8     FD 28 62 FC | 	wrlong	local06, result1
070dc     03 00 00 FF 
070e0     00 E4 05 F1 | 	add	objptr, ##1536
070e4     F2 28 02 FB | 	rdlong	local06, objptr
070e8     14 25 02 F6 | 	mov	local04, local06
070ec     01 24 66 F0 | 	shl	local04, #1
070f0     14 25 02 F1 | 	add	local04, local06
070f4     02 24 66 F0 | 	shl	local04, #2
070f8     03 00 00 FF 
070fc     00 E4 85 F1 | 	sub	objptr, ##1536
07100     F2 24 02 F1 | 	add	local04, objptr
07104     04 24 06 F1 | 	add	local04, #4
07108     12 2B 62 FC | 	wrlong	local07, local04
0710c     03 00 00 FF 
07110     00 E4 05 F1 | 	add	objptr, ##1536
07114     F2 2A 02 FB | 	rdlong	local07, objptr
07118     15 29 02 F6 | 	mov	local06, local07
0711c     01 28 66 F0 | 	shl	local06, #1
07120     15 29 02 F1 | 	add	local06, local07
07124     02 28 66 F0 | 	shl	local06, #2
07128     03 00 00 FF 
0712c     00 E4 85 F1 | 	sub	objptr, ##1536
07130     F2 28 02 F1 | 	add	local06, objptr
07134     08 28 06 F1 | 	add	local06, #8
07138     14 27 62 FC | 	wrlong	local05, local06
0713c     03 00 00 FF 
07140     00 E4 05 F1 | 	add	objptr, ##1536
07144     F2 28 02 FB | 	rdlong	local06, objptr
07148     01 28 06 F1 | 	add	local06, #1
0714c     F2 28 62 FC | 	wrlong	local06, objptr
07150     13 00 00 FF 
07154     38 E4 85 F1 | 	sub	objptr, ##9784
07158     F2 24 02 FB | 	rdlong	local04, objptr
0715c     03 24 66 F0 | 	shl	local04, #3
07160     02 00 00 FF 
07164     38 E4 85 F1 | 	sub	objptr, ##1080
07168     F2 24 02 F1 | 	add	local04, objptr
0716c     04 24 06 F1 | 	add	local04, #4
07170     12 27 02 FB | 	rdlong	local05, local04
07174     2B 00 00 FF 
07178     D0 E5 85 F1 | 	sub	objptr, ##22480
0717c     EC FE 9F FD | 	jmp	#LR__0610
07180                 | LR__0611
07180                 | '   return 0
07180     00 FA 05 F6 | 	mov	result1, #0
07184     A7 F0 03 F6 | 	mov	ptra, fp
07188     B2 00 A0 FD | 	call	#popregs_
0718c                 | _addsub_ret
0718c     2D 00 64 FD | 	ret
07190                 | 
07190                 | ' 
07190                 | ' sub muldiv()
07190                 | _muldiv
07190     08 4A 05 F6 | 	mov	COUNT_, #8
07194     A8 00 A0 FD | 	call	#pushregs_
07198                 | _muldiv_enter
07198     00 1E 06 F6 | 	mov	local01, #0
0719c     58 01 B0 FD | 	call	#_getvalue
071a0     2E 00 00 FF 
071a4     08 E4 05 F1 | 	add	objptr, ##23560
071a8     F2 24 02 FB | 	rdlong	local04, objptr
071ac     03 24 66 F0 | 	shl	local04, #3
071b0     02 00 00 FF 
071b4     38 E4 85 F1 | 	sub	objptr, ##1080
071b8     F2 24 02 F1 | 	add	local04, objptr
071bc     04 24 06 F1 | 	add	local04, #4
071c0     12 27 02 FB | 	rdlong	local05, local04
071c4                 | ' t3.result.uresult=0
071c4                 | ' getvalue()    
071c4                 | ' op = lparts(ct).token
071c4                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
071c4     2B 00 00 FF 
071c8     D0 E5 85 F1 | 	sub	objptr, ##22480
071cc                 | LR__0620
071cc     05 26 0E F2 | 	cmp	local05, #5 wz
071d0     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
071d4     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
071d8     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
071dc     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
071e0     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
071e4     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
071e8     00 01 90 5D |  if_ne	jmp	#LR__0621
071ec     2E 00 00 FF 
071f0     08 E4 05 F1 | 	add	objptr, ##23560
071f4     F2 24 02 FB | 	rdlong	local04, objptr
071f8     01 24 06 F1 | 	add	local04, #1
071fc     F2 24 62 FC | 	wrlong	local04, objptr
07200     2E 00 00 FF 
07204     08 E4 85 F1 | 	sub	objptr, ##23560
07208     EC 00 B0 FD | 	call	#_getvalue
0720c     13 23 02 F6 | 	mov	local03, local05
07210     0F 29 02 F6 | 	mov	local06, local01
07214     10 2B 02 F6 | 	mov	local07, local02
07218     11 27 02 F6 | 	mov	local05, local03
0721c     41 00 00 FF 
07220     40 E4 05 F1 | 	add	objptr, ##33344
07224     F2 24 02 FB | 	rdlong	local04, objptr
07228     12 2D 02 F6 | 	mov	local08, local04
0722c     01 2C 66 F0 | 	shl	local08, #1
07230     12 2D 02 F1 | 	add	local08, local04
07234     02 2C 66 F0 | 	shl	local08, #2
07238     03 00 00 FF 
0723c     00 E4 85 F1 | 	sub	objptr, ##1536
07240     F2 2C 02 F1 | 	add	local08, objptr
07244     16 29 62 FC | 	wrlong	local06, local08
07248     03 00 00 FF 
0724c     00 E4 05 F1 | 	add	objptr, ##1536
07250     F2 2C 02 FB | 	rdlong	local08, objptr
07254     16 29 02 F6 | 	mov	local06, local08
07258     01 28 66 F0 | 	shl	local06, #1
0725c     16 29 02 F1 | 	add	local06, local08
07260     02 28 66 F0 | 	shl	local06, #2
07264     03 00 00 FF 
07268     00 E4 85 F1 | 	sub	objptr, ##1536
0726c     F2 28 02 F1 | 	add	local06, objptr
07270     04 28 06 F1 | 	add	local06, #4
07274     14 2B 62 FC | 	wrlong	local07, local06
07278     03 00 00 FF 
0727c     00 E4 05 F1 | 	add	objptr, ##1536
07280     F2 2C 02 FB | 	rdlong	local08, objptr
07284     16 2B 02 F6 | 	mov	local07, local08
07288     01 2A 66 F0 | 	shl	local07, #1
0728c     16 2B 02 F1 | 	add	local07, local08
07290     02 2A 66 F0 | 	shl	local07, #2
07294     03 00 00 FF 
07298     00 E4 85 F1 | 	sub	objptr, ##1536
0729c     F2 2A 02 F1 | 	add	local07, objptr
072a0     08 2A 06 F1 | 	add	local07, #8
072a4     15 27 62 FC | 	wrlong	local05, local07
072a8     03 00 00 FF 
072ac     00 E4 05 F1 | 	add	objptr, ##1536
072b0     F2 28 02 FB | 	rdlong	local06, objptr
072b4     01 28 06 F1 | 	add	local06, #1
072b8     F2 28 62 FC | 	wrlong	local06, objptr
072bc     13 00 00 FF 
072c0     38 E4 85 F1 | 	sub	objptr, ##9784
072c4     F2 24 02 FB | 	rdlong	local04, objptr
072c8     03 24 66 F0 | 	shl	local04, #3
072cc     02 00 00 FF 
072d0     38 E4 85 F1 | 	sub	objptr, ##1080
072d4     F2 24 02 F1 | 	add	local04, objptr
072d8     04 24 06 F1 | 	add	local04, #4
072dc     12 27 02 FB | 	rdlong	local05, local04
072e0     2B 00 00 FF 
072e4     D0 E5 85 F1 | 	sub	objptr, ##22480
072e8     E0 FE 9F FD | 	jmp	#LR__0620
072ec                 | LR__0621
072ec     A7 F0 03 F6 | 	mov	ptra, fp
072f0     B2 00 A0 FD | 	call	#popregs_
072f4                 | _muldiv_ret
072f4     2D 00 64 FD | 	ret
072f8                 | 
072f8                 | ' 
072f8                 | ' sub getvalue() 
072f8                 | _getvalue
072f8     08 4A 05 F6 | 	mov	COUNT_, #8
072fc     A8 00 A0 FD | 	call	#pushregs_
07300                 | _getvalue_enter
07300     01 24 06 F6 | 	mov	local04, #1
07304     00 1E 06 F6 | 	mov	local01, #0
07308     1D 22 06 F6 | 	mov	local03, #29
0730c     2E 00 00 FF 
07310     08 E4 05 F1 | 	add	objptr, ##23560
07314     F2 FA 01 FB | 	rdlong	result1, objptr
07318     03 FA 65 F0 | 	shl	result1, #3
0731c     02 00 00 FF 
07320     38 E4 85 F1 | 	sub	objptr, ##1080
07324     F2 FA 01 F1 | 	add	result1, objptr
07328     04 FA 05 F1 | 	add	result1, #4
0732c     FD 26 02 FB | 	rdlong	local05, result1
07330                 | ' m=1
07330                 | ' t1.result.uresult=0: t1.result_type=result_uint
07330                 | ' op=lparts(ct).token
07330                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07330     02 26 0E F2 | 	cmp	local05, #2 wz
07334     2B 00 00 FF 
07338     D0 E5 85 F1 | 	sub	objptr, ##22480
0733c     38 00 90 5D |  if_ne	jmp	#LR__0630
07340     01 24 66 F6 | 	neg	local04, #1
07344     2E 00 00 FF 
07348     08 E4 05 F1 | 	add	objptr, ##23560
0734c     F2 26 02 FB | 	rdlong	local05, objptr
07350     01 26 06 F1 | 	add	local05, #1
07354     F2 26 62 FC | 	wrlong	local05, objptr
07358     03 26 66 F0 | 	shl	local05, #3
0735c     02 00 00 FF 
07360     38 E4 85 F1 | 	sub	objptr, ##1080
07364     F2 26 02 F1 | 	add	local05, objptr
07368     04 26 06 F1 | 	add	local05, #4
0736c     13 27 02 FB | 	rdlong	local05, local05
07370     2B 00 00 FF 
07374     D0 E5 85 F1 | 	sub	objptr, ##22480
07378                 | LR__0630
07378                 | ' select case op
07378     01 00 00 FF 
0737c     00 26 0E F2 | 	cmp	local05, ##512 wz
07380     3C 00 90 AD |  if_e	jmp	#LR__0631
07384     01 00 00 FF 
07388     01 26 0E F2 | 	cmp	local05, ##513 wz
0738c     88 01 90 AD |  if_e	jmp	#LR__0634
07390     01 00 00 FF 
07394     02 26 0E F2 | 	cmp	local05, ##514 wz
07398     84 02 90 AD |  if_e	jmp	#LR__0635
0739c     01 00 00 FF 
073a0     03 26 0E F2 | 	cmp	local05, ##515 wz
073a4     E8 03 90 AD |  if_e	jmp	#LR__0638
073a8     01 00 00 FF 
073ac     04 26 0E F2 | 	cmp	local05, ##516 wz
073b0     CC 04 90 AD |  if_e	jmp	#LR__0639
073b4     15 26 0E F2 | 	cmp	local05, #21 wz
073b8     EC 04 90 AD |  if_e	jmp	#LR__0640
073bc     5C 05 90 FD | 	jmp	#LR__0641
073c0                 | LR__0631
073c0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
073c0     01 24 0E F2 | 	cmp	local04, #1 wz
073c4     3C 00 90 5D |  if_ne	jmp	#LR__0632
073c8     2E 00 00 FF 
073cc     08 E4 05 F1 | 	add	objptr, ##23560
073d0     F2 26 02 FB | 	rdlong	local05, objptr
073d4     03 26 66 F0 | 	shl	local05, #3
073d8     02 00 00 FF 
073dc     38 E4 85 F1 | 	sub	objptr, ##1080
073e0     F2 26 02 F1 | 	add	local05, objptr
073e4     13 13 02 FB | 	rdlong	arg01, local05
073e8     00 14 06 F6 | 	mov	arg02, #0
073ec     2B 00 00 FF 
073f0     D0 E5 85 F1 | 	sub	objptr, ##22480
073f4     4C F6 B0 FD | 	call	#__system____builtin_atoi
073f8     FD 24 02 FD | 	qmul	local04, result1
073fc     18 1E 62 FD | 	getqx	local01
07400     1D 22 06 F6 | 	mov	local03, #29
07404                 | LR__0632
07404                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07404     FF FF 7F FF 
07408     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0740c     3C 00 90 5D |  if_ne	jmp	#LR__0633
07410     2E 00 00 FF 
07414     08 E4 05 F1 | 	add	objptr, ##23560
07418     F2 26 02 FB | 	rdlong	local05, objptr
0741c     03 26 66 F0 | 	shl	local05, #3
07420     02 00 00 FF 
07424     38 E4 85 F1 | 	sub	objptr, ##1080
07428     F2 26 02 F1 | 	add	local05, objptr
0742c     13 13 02 FB | 	rdlong	arg01, local05
07430     00 14 06 F6 | 	mov	arg02, #0
07434     2B 00 00 FF 
07438     D0 E5 85 F1 | 	sub	objptr, ##22480
0743c     04 F6 B0 FD | 	call	#__system____builtin_atoi
07440     FD 24 02 FD | 	qmul	local04, result1
07444     18 1E 62 FD | 	getqx	local01
07448     1C 22 06 F6 | 	mov	local03, #28
0744c                 | LR__0633
0744c     0F 29 02 F6 | 	mov	local06, local01
07450     10 2B 02 F6 | 	mov	local07, local02
07454     11 27 02 F6 | 	mov	local05, local03
07458     41 00 00 FF 
0745c     40 E4 05 F1 | 	add	objptr, ##33344
07460     F2 1E 02 FB | 	rdlong	local01, objptr
07464     0F 25 02 F6 | 	mov	local04, local01
07468     01 24 66 F0 | 	shl	local04, #1
0746c     0F 25 02 F1 | 	add	local04, local01
07470     02 24 66 F0 | 	shl	local04, #2
07474     03 00 00 FF 
07478     00 E4 85 F1 | 	sub	objptr, ##1536
0747c     F2 24 02 F1 | 	add	local04, objptr
07480     12 29 62 FC | 	wrlong	local06, local04
07484     03 00 00 FF 
07488     00 E4 05 F1 | 	add	objptr, ##1536
0748c     F2 28 02 FB | 	rdlong	local06, objptr
07490     14 1F 02 F6 | 	mov	local01, local06
07494     01 1E 66 F0 | 	shl	local01, #1
07498     14 1F 02 F1 | 	add	local01, local06
0749c     02 1E 66 F0 | 	shl	local01, #2
074a0     03 00 00 FF 
074a4     00 E4 85 F1 | 	sub	objptr, ##1536
074a8     F2 1E 02 F1 | 	add	local01, objptr
074ac     04 1E 06 F1 | 	add	local01, #4
074b0     0F 2B 62 FC | 	wrlong	local07, local01
074b4     03 00 00 FF 
074b8     00 E4 05 F1 | 	add	objptr, ##1536
074bc     F2 2A 02 FB | 	rdlong	local07, objptr
074c0     15 29 02 F6 | 	mov	local06, local07
074c4     01 28 66 F0 | 	shl	local06, #1
074c8     15 29 02 F1 | 	add	local06, local07
074cc     02 28 66 F0 | 	shl	local06, #2
074d0     03 00 00 FF 
074d4     00 E4 85 F1 | 	sub	objptr, ##1536
074d8     F2 28 02 F1 | 	add	local06, objptr
074dc     08 28 06 F1 | 	add	local06, #8
074e0     14 27 62 FC | 	wrlong	local05, local06
074e4     03 00 00 FF 
074e8     00 E4 05 F1 | 	add	objptr, ##1536
074ec     F2 28 02 FB | 	rdlong	local06, objptr
074f0     01 28 06 F1 | 	add	local06, #1
074f4     F2 28 62 FC | 	wrlong	local06, objptr
074f8     13 00 00 FF 
074fc     38 E4 85 F1 | 	sub	objptr, ##9784
07500     F2 28 02 FB | 	rdlong	local06, objptr
07504     01 28 06 F1 | 	add	local06, #1
07508     F2 28 62 FC | 	wrlong	local06, objptr
0750c     2E 00 00 FF 
07510     08 E4 85 F1 | 	sub	objptr, ##23560
07514     28 04 90 FD | 	jmp	#LR__0642
07518                 | LR__0634
07518     2E 00 00 FF 
0751c     08 E4 05 F1 | 	add	objptr, ##23560
07520     F2 28 02 FB | 	rdlong	local06, objptr
07524     03 28 66 F0 | 	shl	local06, #3
07528     02 00 00 FF 
0752c     38 E4 85 F1 | 	sub	objptr, ##1080
07530     F2 28 02 F1 | 	add	local06, objptr
07534     14 13 02 FB | 	rdlong	arg01, local06
07538     00 14 06 F6 | 	mov	arg02, #0
0753c     2B 00 00 FF 
07540     D0 E5 85 F1 | 	sub	objptr, ##22480
07544     FC F4 B0 FD | 	call	#__system____builtin_atoi
07548     FD 24 02 FD | 	qmul	local04, result1
0754c     41 00 00 FF 
07550     40 E4 05 F1 | 	add	objptr, ##33344
07554     F2 28 02 FB | 	rdlong	local06, objptr
07558     14 2D 02 F6 | 	mov	local08, local06
0755c     01 2C 66 F0 | 	shl	local08, #1
07560     14 2D 02 F1 | 	add	local08, local06
07564     02 2C 66 F0 | 	shl	local08, #2
07568     03 00 00 FF 
0756c     00 E4 85 F1 | 	sub	objptr, ##1536
07570     F2 2C 02 F1 | 	add	local08, objptr
07574     03 00 00 FF 
07578     00 E4 05 F1 | 	add	objptr, ##1536
0757c     18 1E 62 FD | 	getqx	local01
07580     1C 22 06 F6 | 	mov	local03, #28
07584     0F 29 02 F6 | 	mov	local06, local01
07588     10 2B 02 F6 | 	mov	local07, local02
0758c     16 29 62 FC | 	wrlong	local06, local08
07590     11 2D 02 F6 | 	mov	local08, local03
07594     F2 28 02 FB | 	rdlong	local06, objptr
07598     14 27 02 F6 | 	mov	local05, local06
0759c     01 26 66 F0 | 	shl	local05, #1
075a0     14 27 02 F1 | 	add	local05, local06
075a4     02 26 66 F0 | 	shl	local05, #2
075a8     03 00 00 FF 
075ac     00 E4 85 F1 | 	sub	objptr, ##1536
075b0     F2 26 02 F1 | 	add	local05, objptr
075b4     04 26 06 F1 | 	add	local05, #4
075b8     13 2B 62 FC | 	wrlong	local07, local05
075bc     03 00 00 FF 
075c0     00 E4 05 F1 | 	add	objptr, ##1536
075c4     F2 2A 02 FB | 	rdlong	local07, objptr
075c8     15 29 02 F6 | 	mov	local06, local07
075cc     01 28 66 F0 | 	shl	local06, #1
075d0     15 29 02 F1 | 	add	local06, local07
075d4     02 28 66 F0 | 	shl	local06, #2
075d8     03 00 00 FF 
075dc     00 E4 85 F1 | 	sub	objptr, ##1536
075e0     F2 28 02 F1 | 	add	local06, objptr
075e4     08 28 06 F1 | 	add	local06, #8
075e8     14 2D 62 FC | 	wrlong	local08, local06
075ec     03 00 00 FF 
075f0     00 E4 05 F1 | 	add	objptr, ##1536
075f4     F2 28 02 FB | 	rdlong	local06, objptr
075f8     01 28 06 F1 | 	add	local06, #1
075fc     F2 28 62 FC | 	wrlong	local06, objptr
07600     13 00 00 FF 
07604     38 E4 85 F1 | 	sub	objptr, ##9784
07608     F2 28 02 FB | 	rdlong	local06, objptr
0760c     01 28 06 F1 | 	add	local06, #1
07610     F2 28 62 FC | 	wrlong	local06, objptr
07614     2E 00 00 FF 
07618     08 E4 85 F1 | 	sub	objptr, ##23560
0761c     20 03 90 FD | 	jmp	#LR__0642
07620                 | LR__0635
07620                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07620     01 24 0E F2 | 	cmp	local04, #1 wz
07624     48 00 90 5D |  if_ne	jmp	#LR__0636
07628     00 C0 1F FF 
0762c     00 28 06 F6 | 	mov	local06, ##1065353216
07630     2E 00 00 FF 
07634     08 E4 05 F1 | 	add	objptr, ##23560
07638     F2 2C 02 FB | 	rdlong	local08, objptr
0763c     03 2C 66 F0 | 	shl	local08, #3
07640     02 00 00 FF 
07644     38 E4 85 F1 | 	sub	objptr, ##1080
07648     F2 2C 02 F1 | 	add	local08, objptr
0764c     16 13 02 FB | 	rdlong	arg01, local08
07650     2B 00 00 FF 
07654     D0 E5 85 F1 | 	sub	objptr, ##22480
07658     58 F5 B0 FD | 	call	#__system____builtin_atof
0765c     FD 14 02 F6 | 	mov	arg02, result1
07660     14 13 02 F6 | 	mov	arg01, local06
07664     64 ED B0 FD | 	call	#__system___float_mul
07668     FD 1E 02 F6 | 	mov	local01, result1
0766c     1E 22 06 F6 | 	mov	local03, #30
07670                 | LR__0636
07670                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07670     FF FF 7F FF 
07674     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07678     48 00 90 5D |  if_ne	jmp	#LR__0637
0767c     00 C0 5F FF 
07680     00 28 06 F6 | 	mov	local06, ##-1082130432
07684     2E 00 00 FF 
07688     08 E4 05 F1 | 	add	objptr, ##23560
0768c     F2 2C 02 FB | 	rdlong	local08, objptr
07690     03 2C 66 F0 | 	shl	local08, #3
07694     02 00 00 FF 
07698     38 E4 85 F1 | 	sub	objptr, ##1080
0769c     F2 2C 02 F1 | 	add	local08, objptr
076a0     16 13 02 FB | 	rdlong	arg01, local08
076a4     2B 00 00 FF 
076a8     D0 E5 85 F1 | 	sub	objptr, ##22480
076ac     04 F5 B0 FD | 	call	#__system____builtin_atof
076b0     FD 14 02 F6 | 	mov	arg02, result1
076b4     14 13 02 F6 | 	mov	arg01, local06
076b8     10 ED B0 FD | 	call	#__system___float_mul
076bc     FD 1E 02 F6 | 	mov	local01, result1
076c0     1E 22 06 F6 | 	mov	local03, #30
076c4                 | LR__0637
076c4     0F 29 02 F6 | 	mov	local06, local01
076c8     10 2B 02 F6 | 	mov	local07, local02
076cc     11 27 02 F6 | 	mov	local05, local03
076d0     41 00 00 FF 
076d4     40 E4 05 F1 | 	add	objptr, ##33344
076d8     F2 1E 02 FB | 	rdlong	local01, objptr
076dc     0F 2D 02 F6 | 	mov	local08, local01
076e0     01 2C 66 F0 | 	shl	local08, #1
076e4     0F 2D 02 F1 | 	add	local08, local01
076e8     02 2C 66 F0 | 	shl	local08, #2
076ec     03 00 00 FF 
076f0     00 E4 85 F1 | 	sub	objptr, ##1536
076f4     F2 2C 02 F1 | 	add	local08, objptr
076f8     16 29 62 FC | 	wrlong	local06, local08
076fc     03 00 00 FF 
07700     00 E4 05 F1 | 	add	objptr, ##1536
07704     F2 2C 02 FB | 	rdlong	local08, objptr
07708     16 29 02 F6 | 	mov	local06, local08
0770c     01 28 66 F0 | 	shl	local06, #1
07710     16 29 02 F1 | 	add	local06, local08
07714     02 28 66 F0 | 	shl	local06, #2
07718     03 00 00 FF 
0771c     00 E4 85 F1 | 	sub	objptr, ##1536
07720     F2 28 02 F1 | 	add	local06, objptr
07724     04 28 06 F1 | 	add	local06, #4
07728     14 2B 62 FC | 	wrlong	local07, local06
0772c     03 00 00 FF 
07730     00 E4 05 F1 | 	add	objptr, ##1536
07734     F2 2C 02 FB | 	rdlong	local08, objptr
07738     16 2B 02 F6 | 	mov	local07, local08
0773c     01 2A 66 F0 | 	shl	local07, #1
07740     16 2B 02 F1 | 	add	local07, local08
07744     02 2A 66 F0 | 	shl	local07, #2
07748     03 00 00 FF 
0774c     00 E4 85 F1 | 	sub	objptr, ##1536
07750     F2 2A 02 F1 | 	add	local07, objptr
07754     08 2A 06 F1 | 	add	local07, #8
07758     15 27 62 FC | 	wrlong	local05, local07
0775c     03 00 00 FF 
07760     00 E4 05 F1 | 	add	objptr, ##1536
07764     F2 28 02 FB | 	rdlong	local06, objptr
07768     01 28 06 F1 | 	add	local06, #1
0776c     F2 28 62 FC | 	wrlong	local06, objptr
07770     13 00 00 FF 
07774     38 E4 85 F1 | 	sub	objptr, ##9784
07778     F2 28 02 FB | 	rdlong	local06, objptr
0777c     01 28 06 F1 | 	add	local06, #1
07780     F2 28 62 FC | 	wrlong	local06, objptr
07784     2E 00 00 FF 
07788     08 E4 85 F1 | 	sub	objptr, ##23560
0778c     B0 01 90 FD | 	jmp	#LR__0642
07790                 | LR__0638
07790     2E 00 00 FF 
07794     08 E4 05 F1 | 	add	objptr, ##23560
07798     F2 28 02 FB | 	rdlong	local06, objptr
0779c     03 28 66 F0 | 	shl	local06, #3
077a0     02 00 00 FF 
077a4     38 E4 85 F1 | 	sub	objptr, ##1080
077a8     F2 28 02 F1 | 	add	local06, objptr
077ac     14 1F 02 FB | 	rdlong	local01, local06
077b0     1F 22 06 F6 | 	mov	local03, #31
077b4     0F 29 02 F6 | 	mov	local06, local01
077b8     10 2B 02 F6 | 	mov	local07, local02
077bc     11 27 02 F6 | 	mov	local05, local03
077c0     15 00 00 FF 
077c4     70 E4 05 F1 | 	add	objptr, ##10864
077c8     F2 1E 02 FB | 	rdlong	local01, objptr
077cc     0F 2D 02 F6 | 	mov	local08, local01
077d0     01 2C 66 F0 | 	shl	local08, #1
077d4     0F 2D 02 F1 | 	add	local08, local01
077d8     02 2C 66 F0 | 	shl	local08, #2
077dc     03 00 00 FF 
077e0     00 E4 85 F1 | 	sub	objptr, ##1536
077e4     F2 2C 02 F1 | 	add	local08, objptr
077e8     16 29 62 FC | 	wrlong	local06, local08
077ec     03 00 00 FF 
077f0     00 E4 05 F1 | 	add	objptr, ##1536
077f4     F2 2C 02 FB | 	rdlong	local08, objptr
077f8     16 29 02 F6 | 	mov	local06, local08
077fc     01 28 66 F0 | 	shl	local06, #1
07800     16 29 02 F1 | 	add	local06, local08
07804     02 28 66 F0 | 	shl	local06, #2
07808     03 00 00 FF 
0780c     00 E4 85 F1 | 	sub	objptr, ##1536
07810     F2 28 02 F1 | 	add	local06, objptr
07814     04 28 06 F1 | 	add	local06, #4
07818     14 2B 62 FC | 	wrlong	local07, local06
0781c     03 00 00 FF 
07820     00 E4 05 F1 | 	add	objptr, ##1536
07824     F2 2C 02 FB | 	rdlong	local08, objptr
07828     16 2B 02 F6 | 	mov	local07, local08
0782c     01 2A 66 F0 | 	shl	local07, #1
07830     16 2B 02 F1 | 	add	local07, local08
07834     02 2A 66 F0 | 	shl	local07, #2
07838     03 00 00 FF 
0783c     00 E4 85 F1 | 	sub	objptr, ##1536
07840     F2 2A 02 F1 | 	add	local07, objptr
07844     08 2A 06 F1 | 	add	local07, #8
07848     15 27 62 FC | 	wrlong	local05, local07
0784c     03 00 00 FF 
07850     00 E4 05 F1 | 	add	objptr, ##1536
07854     F2 28 02 FB | 	rdlong	local06, objptr
07858     01 28 06 F1 | 	add	local06, #1
0785c     F2 28 62 FC | 	wrlong	local06, objptr
07860     13 00 00 FF 
07864     38 E4 85 F1 | 	sub	objptr, ##9784
07868     F2 28 02 FB | 	rdlong	local06, objptr
0786c     01 28 06 F1 | 	add	local06, #1
07870     F2 28 62 FC | 	wrlong	local06, objptr
07874     2E 00 00 FF 
07878     08 E4 85 F1 | 	sub	objptr, ##23560
0787c     C0 00 90 FD | 	jmp	#LR__0642
07880                 | LR__0639
07880     12 13 02 F6 | 	mov	arg01, local04
07884     B8 03 B0 FD | 	call	#_getvar
07888     2E 00 00 FF 
0788c     08 E4 05 F1 | 	add	objptr, ##23560
07890     F2 28 02 FB | 	rdlong	local06, objptr
07894     01 28 06 F1 | 	add	local06, #1
07898     F2 28 62 FC | 	wrlong	local06, objptr
0789c     2E 00 00 FF 
078a0     08 E4 85 F1 | 	sub	objptr, ##23560
078a4     98 00 90 FD | 	jmp	#LR__0642
078a8                 | LR__0640
078a8     2E 00 00 FF 
078ac     08 E4 05 F1 | 	add	objptr, ##23560
078b0     F2 28 02 FB | 	rdlong	local06, objptr
078b4     01 28 06 F1 | 	add	local06, #1
078b8     F2 28 62 FC | 	wrlong	local06, objptr
078bc     2E 00 00 FF 
078c0     08 E4 85 F1 | 	sub	objptr, ##23560
078c4     08 F5 BF FD | 	call	#_expr
078c8                 | '     ct+=1
078c8                 | '     expr() 
078c8                 | '     if lparts(ct).token=token_rpar then ct+=1
078c8     2E 00 00 FF 
078cc     08 E4 05 F1 | 	add	objptr, ##23560
078d0     F2 2C 02 FB | 	rdlong	local08, objptr
078d4     03 2C 66 F0 | 	shl	local08, #3
078d8     02 00 00 FF 
078dc     38 E4 85 F1 | 	sub	objptr, ##1080
078e0     F2 2C 02 F1 | 	add	local08, objptr
078e4     04 2C 06 F1 | 	add	local08, #4
078e8     16 2D 02 FB | 	rdlong	local08, local08
078ec     14 2C 0E F2 | 	cmp	local08, #20 wz
078f0     2B 00 00 FF 
078f4     D0 E5 85 F1 | 	sub	objptr, ##22480
078f8     44 00 90 5D |  if_ne	jmp	#LR__0642
078fc     2E 00 00 FF 
07900     08 E4 05 F1 | 	add	objptr, ##23560
07904     F2 28 02 FB | 	rdlong	local06, objptr
07908     01 28 06 F1 | 	add	local06, #1
0790c     F2 28 62 FC | 	wrlong	local06, objptr
07910     2E 00 00 FF 
07914     08 E4 85 F1 | 	sub	objptr, ##23560
07918     24 00 90 FD | 	jmp	#LR__0642
0791c                 | LR__0641
0791c     12 13 02 F6 | 	mov	arg01, local04
07920     28 00 B0 FD | 	call	#_getfun
07924     2E 00 00 FF 
07928     08 E4 05 F1 | 	add	objptr, ##23560
0792c     F2 28 02 FB | 	rdlong	local06, objptr
07930     01 28 06 F1 | 	add	local06, #1
07934     F2 28 62 FC | 	wrlong	local06, objptr
07938     2E 00 00 FF 
0793c     08 E4 85 F1 | 	sub	objptr, ##23560
07940                 | LR__0642
07940     A7 F0 03 F6 | 	mov	ptra, fp
07944     B2 00 A0 FD | 	call	#popregs_
07948                 | _getvalue_ret
07948     2D 00 64 FD | 	ret
0794c                 | 
0794c                 | ' 
0794c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0794c                 | _getfun
0794c     0A 4A 05 F6 | 	mov	COUNT_, #10
07950     A8 00 A0 FD | 	call	#pushregs_
07954                 | _getfun_enter
07954     09 25 02 F6 | 	mov	local04, arg01
07958     2E 00 00 FF 
0795c     08 E4 05 F1 | 	add	objptr, ##23560
07960     F2 26 02 FB | 	rdlong	local05, objptr
07964     13 29 02 F6 | 	mov	local06, local05
07968     00 2A 06 F6 | 	mov	local07, #0
0796c                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0796c                 | ' oldct=ct
0796c                 | ' numpar=0
0796c                 | '   
0796c                 | ' if lparts(ct+1).token=token_lpar then
0796c     01 26 06 F1 | 	add	local05, #1
07970     03 26 66 F0 | 	shl	local05, #3
07974     02 00 00 FF 
07978     38 E4 85 F1 | 	sub	objptr, ##1080
0797c     F2 26 02 F1 | 	add	local05, objptr
07980     04 26 06 F1 | 	add	local05, #4
07984     13 27 02 FB | 	rdlong	local05, local05
07988     15 26 0E F2 | 	cmp	local05, #21 wz
0798c     2B 00 00 FF 
07990     D0 E5 85 F1 | 	sub	objptr, ##22480
07994     08 01 90 5D |  if_ne	jmp	#LR__0654
07998     2E 00 00 FF 
0799c     08 E4 05 F1 | 	add	objptr, ##23560
079a0     F2 2C 02 FB | 	rdlong	local08, objptr
079a4     01 2C 06 F1 | 	add	local08, #1
079a8     F2 2C 62 FC | 	wrlong	local08, objptr
079ac     2E 00 00 FF 
079b0     08 E4 85 F1 | 	sub	objptr, ##23560
079b4                 | '   ct+=1 											' omit this lpar, this is for expr list
079b4                 | '   do
079b4                 | LR__0650
079b4     2E 00 00 FF 
079b8     08 E4 05 F1 | 	add	objptr, ##23560
079bc     F2 26 02 FB | 	rdlong	local05, objptr
079c0     01 26 06 F1 | 	add	local05, #1
079c4     F2 26 62 FC | 	wrlong	local05, objptr
079c8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
079c8                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
079c8     03 26 66 F0 | 	shl	local05, #3
079cc     02 00 00 FF 
079d0     38 E4 85 F1 | 	sub	objptr, ##1080
079d4     F2 26 02 F1 | 	add	local05, objptr
079d8     04 26 06 F1 | 	add	local05, #4
079dc     13 2D 02 FB | 	rdlong	local08, local05
079e0     15 2C 0E F2 | 	cmp	local08, #21 wz
079e4     2B 00 00 FF 
079e8     D0 E5 85 F1 | 	sub	objptr, ##22480
079ec     40 00 90 5D |  if_ne	jmp	#LR__0651
079f0     2E 00 00 FF 
079f4     08 E4 05 F1 | 	add	objptr, ##23560
079f8     F2 2C 02 FB | 	rdlong	local08, objptr
079fc     01 2C 06 F1 | 	add	local08, #1
07a00     F2 2C 62 FC | 	wrlong	local08, objptr
07a04     2E 00 00 FF 
07a08     08 E4 85 F1 | 	sub	objptr, ##23560
07a0c     C0 F3 BF FD | 	call	#_expr
07a10     2E 00 00 FF 
07a14     08 E4 05 F1 | 	add	objptr, ##23560
07a18     F2 2C 02 FB | 	rdlong	local08, objptr
07a1c     01 2C 06 F1 | 	add	local08, #1
07a20     F2 2C 62 FC | 	wrlong	local08, objptr
07a24     2E 00 00 FF 
07a28     08 E4 85 F1 | 	sub	objptr, ##23560
07a2c     04 00 90 FD | 	jmp	#LR__0652
07a30                 | LR__0651
07a30     9C F3 BF FD | 	call	#_expr
07a34                 | LR__0652
07a34     01 2A 06 F1 | 	add	local07, #1
07a38     2E 00 00 FF 
07a3c     08 E4 05 F1 | 	add	objptr, ##23560
07a40     F2 26 02 FB | 	rdlong	local05, objptr
07a44     03 26 66 F0 | 	shl	local05, #3
07a48     02 00 00 FF 
07a4c     38 E4 85 F1 | 	sub	objptr, ##1080
07a50     F2 26 02 F1 | 	add	local05, objptr
07a54     04 26 06 F1 | 	add	local05, #4
07a58     13 2D 02 FB | 	rdlong	local08, local05
07a5c     14 2C 0E F2 | 	cmp	local08, #20 wz
07a60     2B 00 00 FF 
07a64     D0 E5 85 F1 | 	sub	objptr, ##22480
07a68     34 00 90 AD |  if_e	jmp	#LR__0653
07a6c     2E 00 00 FF 
07a70     08 E4 05 F1 | 	add	objptr, ##23560
07a74     F2 2C 02 FB | 	rdlong	local08, objptr
07a78     03 2C 66 F0 | 	shl	local08, #3
07a7c     02 00 00 FF 
07a80     38 E4 85 F1 | 	sub	objptr, ##1080
07a84     F2 2C 02 F1 | 	add	local08, objptr
07a88     04 2C 06 F1 | 	add	local08, #4
07a8c     16 2D 02 FB | 	rdlong	local08, local08
07a90     FE 2D 0E F2 | 	cmp	local08, #510 wz
07a94     2B 00 00 FF 
07a98     D0 E5 85 F1 | 	sub	objptr, ##22480
07a9c     14 FF 9F 5D |  if_ne	jmp	#LR__0650
07aa0                 | LR__0653
07aa0                 | LR__0654
07aa0     15 1F 02 F6 | 	mov	local01, local07
07aa4     03 28 66 F0 | 	shl	local06, #3
07aa8     2B 00 00 FF 
07aac     D0 E5 05 F1 | 	add	objptr, ##22480
07ab0     F2 28 02 F1 | 	add	local06, objptr
07ab4     04 28 06 F1 | 	add	local06, #4
07ab8     14 23 02 FB | 	rdlong	local03, local06
07abc     0F 2D 02 F6 | 	mov	local08, local01
07ac0     10 2B 02 F6 | 	mov	local07, local02
07ac4     11 29 02 F6 | 	mov	local06, local03
07ac8     15 00 00 FF 
07acc     70 E4 05 F1 | 	add	objptr, ##10864
07ad0     F2 26 02 FB | 	rdlong	local05, objptr
07ad4     13 13 02 F6 | 	mov	arg01, local05
07ad8     01 12 66 F0 | 	shl	arg01, #1
07adc     13 13 02 F1 | 	add	arg01, local05
07ae0     02 12 66 F0 | 	shl	arg01, #2
07ae4     03 00 00 FF 
07ae8     00 E4 85 F1 | 	sub	objptr, ##1536
07aec     F2 12 02 F1 | 	add	arg01, objptr
07af0     09 2D 62 FC | 	wrlong	local08, arg01
07af4     03 00 00 FF 
07af8     00 E4 05 F1 | 	add	objptr, ##1536
07afc     F2 2C 02 FB | 	rdlong	local08, objptr
07b00     16 2F 02 F6 | 	mov	local09, local08
07b04     01 2E 66 F0 | 	shl	local09, #1
07b08     16 2F 02 F1 | 	add	local09, local08
07b0c     02 2E 66 F0 | 	shl	local09, #2
07b10     03 00 00 FF 
07b14     00 E4 85 F1 | 	sub	objptr, ##1536
07b18     F2 2E 02 F1 | 	add	local09, objptr
07b1c     04 2E 06 F1 | 	add	local09, #4
07b20     17 2B 62 FC | 	wrlong	local07, local09
07b24     03 00 00 FF 
07b28     00 E4 05 F1 | 	add	objptr, ##1536
07b2c     F2 2C 02 FB | 	rdlong	local08, objptr
07b30     16 31 02 F6 | 	mov	local10, local08
07b34     01 30 66 F0 | 	shl	local10, #1
07b38     16 31 02 F1 | 	add	local10, local08
07b3c     02 30 66 F0 | 	shl	local10, #2
07b40     03 00 00 FF 
07b44     00 E4 85 F1 | 	sub	objptr, ##1536
07b48     F2 30 02 F1 | 	add	local10, objptr
07b4c     08 30 06 F1 | 	add	local10, #8
07b50     18 29 62 FC | 	wrlong	local06, local10
07b54     03 00 00 FF 
07b58     00 E4 05 F1 | 	add	objptr, ##1536
07b5c     F2 2C 02 FB | 	rdlong	local08, objptr
07b60     01 2C 06 F1 | 	add	local08, #1
07b64     F2 2C 62 FC | 	wrlong	local08, objptr
07b68     41 00 00 FF 
07b6c     40 E4 85 F1 | 	sub	objptr, ##33344
07b70                 | ' 
07b70                 | ' t2.result.uresult=numpar
07b70                 | ' 
07b70                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
07b70                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
07b70                 | ' 
07b70                 | '   
07b70                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
07b70     FF FF 7F FF 
07b74     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07b78     B8 00 90 5D |  if_ne	jmp	#LR__0655
07b7c     15 22 06 F6 | 	mov	local03, #21
07b80     0F 2D 02 F6 | 	mov	local08, local01
07b84     10 2B 02 F6 | 	mov	local07, local02
07b88     11 29 02 F6 | 	mov	local06, local03
07b8c     41 00 00 FF 
07b90     40 E4 05 F1 | 	add	objptr, ##33344
07b94     F2 26 02 FB | 	rdlong	local05, objptr
07b98     13 13 02 F6 | 	mov	arg01, local05
07b9c     01 12 66 F0 | 	shl	arg01, #1
07ba0     13 13 02 F1 | 	add	arg01, local05
07ba4     02 12 66 F0 | 	shl	arg01, #2
07ba8     03 00 00 FF 
07bac     00 E4 85 F1 | 	sub	objptr, ##1536
07bb0     F2 12 02 F1 | 	add	arg01, objptr
07bb4     09 2D 62 FC | 	wrlong	local08, arg01
07bb8     03 00 00 FF 
07bbc     00 E4 05 F1 | 	add	objptr, ##1536
07bc0     F2 30 02 FB | 	rdlong	local10, objptr
07bc4     18 2F 02 F6 | 	mov	local09, local10
07bc8     01 2E 66 F0 | 	shl	local09, #1
07bcc     18 2F 02 F1 | 	add	local09, local10
07bd0     02 2E 66 F0 | 	shl	local09, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 2E 02 F1 | 	add	local09, objptr
07be0     04 2E 06 F1 | 	add	local09, #4
07be4     17 2B 62 FC | 	wrlong	local07, local09
07be8     03 00 00 FF 
07bec     00 E4 05 F1 | 	add	objptr, ##1536
07bf0     F2 2E 02 FB | 	rdlong	local09, objptr
07bf4     17 31 02 F6 | 	mov	local10, local09
07bf8     01 30 66 F0 | 	shl	local10, #1
07bfc     17 31 02 F1 | 	add	local10, local09
07c00     02 30 66 F0 | 	shl	local10, #2
07c04     03 00 00 FF 
07c08     00 E4 85 F1 | 	sub	objptr, ##1536
07c0c     F2 30 02 F1 | 	add	local10, objptr
07c10     08 30 06 F1 | 	add	local10, #8
07c14     18 29 62 FC | 	wrlong	local06, local10
07c18     03 00 00 FF 
07c1c     00 E4 05 F1 | 	add	objptr, ##1536
07c20     F2 2C 02 FB | 	rdlong	local08, objptr
07c24     01 2C 06 F1 | 	add	local08, #1
07c28     F2 2C 62 FC | 	wrlong	local08, objptr
07c2c     41 00 00 FF 
07c30     40 E4 85 F1 | 	sub	objptr, ##33344
07c34                 | LR__0655
07c34     A7 F0 03 F6 | 	mov	ptra, fp
07c38     B2 00 A0 FD | 	call	#popregs_
07c3c                 | _getfun_ret
07c3c     2D 00 64 FD | 	ret
07c40                 | 
07c40                 | '   
07c40                 | '   
07c40                 | ' sub getvar(m as integer) 
07c40                 | _getvar
07c40     08 4A 05 F6 | 	mov	COUNT_, #8
07c44     A8 00 A0 FD | 	call	#pushregs_
07c48     09 25 02 F6 | 	mov	local04, arg01
07c4c     2E 00 00 FF 
07c50     08 E4 05 F1 | 	add	objptr, ##23560
07c54     F2 14 02 FB | 	rdlong	arg02, objptr
07c58     03 14 66 F0 | 	shl	arg02, #3
07c5c     02 00 00 FF 
07c60     38 E4 85 F1 | 	sub	objptr, ##1080
07c64     F2 14 02 F1 | 	add	arg02, objptr
07c68     0A 27 02 FB | 	rdlong	local05, arg02
07c6c     13 13 02 F6 | 	mov	arg01, local05
07c70     01 14 06 F6 | 	mov	arg02, #1
07c74     2B 00 00 FF 
07c78     D0 E5 85 F1 | 	sub	objptr, ##22480
07c7c     D0 DD B0 FD | 	call	#__system__Right_S
07c80     01 28 66 F6 | 	neg	local06, #1
07c84                 | ' 
07c84                 | ' varname$=lparts(ct).part$
07c84                 | ' suffix$=right$(varname$,1)
07c84                 | ' j=-1
07c84                 | ' 
07c84                 | ' for i=0 to varnum-1
07c84     00 2A 06 F6 | 	mov	local07, #0
07c88     2B 00 00 FF 
07c8c     CC E5 05 F1 | 	add	objptr, ##22476
07c90     F2 2C 02 FB | 	rdlong	local08, objptr
07c94     2B 00 00 FF 
07c98     CC E5 85 F1 | 	sub	objptr, ##22476
07c9c                 | LR__0660
07c9c     16 2B 52 F2 | 	cmps	local07, local08 wc
07ca0     38 00 90 3D |  if_ae	jmp	#LR__0661
07ca4                 | '   if variables(i).name=varname$ then j=i : exit
07ca4     15 15 02 F6 | 	mov	arg02, local07
07ca8     04 14 66 F0 | 	shl	arg02, #4
07cac     0B 00 00 FF 
07cb0     CC E5 05 F1 | 	add	objptr, ##6092
07cb4     F2 14 02 F1 | 	add	arg02, objptr
07cb8     0A 13 02 FB | 	rdlong	arg01, arg02
07cbc     13 15 02 F6 | 	mov	arg02, local05
07cc0     0B 00 00 FF 
07cc4     CC E5 85 F1 | 	sub	objptr, ##6092
07cc8     DC BD B0 FD | 	call	#__system___string_cmp
07ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd0     15 29 02 A6 |  if_e	mov	local06, local07
07cd4     01 2A 06 51 |  if_ne	add	local07, #1
07cd8     C0 FF 9F 5D |  if_ne	jmp	#LR__0660
07cdc                 | LR__0661
07cdc                 | ' if  j=-1 andalso varnum<maxvars then   
07cdc     FF FF 7F FF 
07ce0     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07ce4     A8 00 90 5D |  if_ne	jmp	#LR__0662
07ce8     2B 00 00 FF 
07cec     CC E5 05 F1 | 	add	objptr, ##22476
07cf0     F2 2C 02 FB | 	rdlong	local08, objptr
07cf4     2B 00 00 FF 
07cf8     CC E5 85 F1 | 	sub	objptr, ##22476
07cfc     01 00 00 FF 
07d00     FF 2D 56 F2 | 	cmps	local08, ##1023 wc
07d04     88 00 90 3D |  if_ae	jmp	#LR__0662
07d08     2B 00 00 FF 
07d0c     CC E5 05 F1 | 	add	objptr, ##22476
07d10     F2 2C 02 FB | 	rdlong	local08, objptr
07d14     04 2C 66 F0 | 	shl	local08, #4
07d18     20 00 00 FF 
07d1c     00 E4 85 F1 | 	sub	objptr, ##16384
07d20     F2 2C 02 F1 | 	add	local08, objptr
07d24     16 27 62 FC | 	wrlong	local05, local08
07d28     20 00 00 FF 
07d2c     00 E4 05 F1 | 	add	objptr, ##16384
07d30     F2 2C 02 FB | 	rdlong	local08, objptr
07d34     04 2C 66 F0 | 	shl	local08, #4
07d38     20 00 00 FF 
07d3c     00 E4 85 F1 | 	sub	objptr, ##16384
07d40     F2 2C 02 F1 | 	add	local08, objptr
07d44     04 2C 06 F1 | 	add	local08, #4
07d48     16 01 68 FC | 	wrlong	#0, local08
07d4c     20 00 00 FF 
07d50     00 E4 05 F1 | 	add	objptr, ##16384
07d54     F2 2C 02 FB | 	rdlong	local08, objptr
07d58     04 2C 66 F0 | 	shl	local08, #4
07d5c     20 00 00 FF 
07d60     00 E4 85 F1 | 	sub	objptr, ##16384
07d64     F2 2C 02 F1 | 	add	local08, objptr
07d68     0C 2C 06 F1 | 	add	local08, #12
07d6c     16 39 68 FC | 	wrlong	#28, local08
07d70     20 00 00 FF 
07d74     00 E4 05 F1 | 	add	objptr, ##16384
07d78     F2 2C 02 FB | 	rdlong	local08, objptr
07d7c     16 29 02 F6 | 	mov	local06, local08
07d80     01 2C 06 F1 | 	add	local08, #1
07d84     F2 2C 62 FC | 	wrlong	local08, objptr
07d88     2B 00 00 FF 
07d8c     CC E5 85 F1 | 	sub	objptr, ##22476
07d90                 | LR__0662
07d90     11 22 06 F6 | 	mov	local03, #17
07d94     14 1F 02 F6 | 	mov	local01, local06
07d98     0F 2D 02 F6 | 	mov	local08, local01
07d9c     10 2B 02 F6 | 	mov	local07, local02
07da0     11 29 02 F6 | 	mov	local06, local03
07da4     41 00 00 FF 
07da8     40 E4 05 F1 | 	add	objptr, ##33344
07dac     F2 26 02 FB | 	rdlong	local05, objptr
07db0     13 FB 01 F6 | 	mov	result1, local05
07db4     01 FA 65 F0 | 	shl	result1, #1
07db8     13 FB 01 F1 | 	add	result1, local05
07dbc     02 FA 65 F0 | 	shl	result1, #2
07dc0     03 00 00 FF 
07dc4     00 E4 85 F1 | 	sub	objptr, ##1536
07dc8     F2 FA 01 F1 | 	add	result1, objptr
07dcc     FD 2C 62 FC | 	wrlong	local08, result1
07dd0     03 00 00 FF 
07dd4     00 E4 05 F1 | 	add	objptr, ##1536
07dd8     F2 2C 02 FB | 	rdlong	local08, objptr
07ddc     16 15 02 F6 | 	mov	arg02, local08
07de0     01 14 66 F0 | 	shl	arg02, #1
07de4     16 15 02 F1 | 	add	arg02, local08
07de8     02 14 66 F0 | 	shl	arg02, #2
07dec     03 00 00 FF 
07df0     00 E4 85 F1 | 	sub	objptr, ##1536
07df4     F2 14 02 F1 | 	add	arg02, objptr
07df8     04 14 06 F1 | 	add	arg02, #4
07dfc     0A 2B 62 FC | 	wrlong	local07, arg02
07e00     03 00 00 FF 
07e04     00 E4 05 F1 | 	add	objptr, ##1536
07e08     F2 2C 02 FB | 	rdlong	local08, objptr
07e0c     16 13 02 F6 | 	mov	arg01, local08
07e10     01 12 66 F0 | 	shl	arg01, #1
07e14     16 13 02 F1 | 	add	arg01, local08
07e18     02 12 66 F0 | 	shl	arg01, #2
07e1c     03 00 00 FF 
07e20     00 E4 85 F1 | 	sub	objptr, ##1536
07e24     F2 12 02 F1 | 	add	arg01, objptr
07e28     08 12 06 F1 | 	add	arg01, #8
07e2c     09 29 62 FC | 	wrlong	local06, arg01
07e30     03 00 00 FF 
07e34     00 E4 05 F1 | 	add	objptr, ##1536
07e38     F2 2C 02 FB | 	rdlong	local08, objptr
07e3c     01 2C 06 F1 | 	add	local08, #1
07e40     F2 2C 62 FC | 	wrlong	local08, objptr
07e44     41 00 00 FF 
07e48     40 E4 85 F1 | 	sub	objptr, ##33344
07e4c                 | ' t2.result_type=fun_getvar:t2.result.uresult=j
07e4c                 | ' 
07e4c                 | ' /'
07e4c                 | ' '/
07e4c                 | ' 701 
07e4c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
07e4c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
07e4c     FF FF 7F FF 
07e50     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07e54     B8 00 90 5D |  if_ne	jmp	#LR__0663
07e58     15 22 06 F6 | 	mov	local03, #21
07e5c     0F 2D 02 F6 | 	mov	local08, local01
07e60     10 2B 02 F6 | 	mov	local07, local02
07e64     11 29 02 F6 | 	mov	local06, local03
07e68     41 00 00 FF 
07e6c     40 E4 05 F1 | 	add	objptr, ##33344
07e70     F2 26 02 FB | 	rdlong	local05, objptr
07e74     13 FB 01 F6 | 	mov	result1, local05
07e78     01 FA 65 F0 | 	shl	result1, #1
07e7c     13 FB 01 F1 | 	add	result1, local05
07e80     02 FA 65 F0 | 	shl	result1, #2
07e84     03 00 00 FF 
07e88     00 E4 85 F1 | 	sub	objptr, ##1536
07e8c     F2 FA 01 F1 | 	add	result1, objptr
07e90     FD 2C 62 FC | 	wrlong	local08, result1
07e94     03 00 00 FF 
07e98     00 E4 05 F1 | 	add	objptr, ##1536
07e9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ea0     0F 15 02 F6 | 	mov	arg02, local01
07ea4     01 14 66 F0 | 	shl	arg02, #1
07ea8     0F 15 02 F1 | 	add	arg02, local01
07eac     02 14 66 F0 | 	shl	arg02, #2
07eb0     03 00 00 FF 
07eb4     00 E4 85 F1 | 	sub	objptr, ##1536
07eb8     F2 14 02 F1 | 	add	arg02, objptr
07ebc     04 14 06 F1 | 	add	arg02, #4
07ec0     0A 2B 62 FC | 	wrlong	local07, arg02
07ec4     03 00 00 FF 
07ec8     00 E4 05 F1 | 	add	objptr, ##1536
07ecc     F2 1E 02 FB | 	rdlong	local01, objptr
07ed0     0F 13 02 F6 | 	mov	arg01, local01
07ed4     01 12 66 F0 | 	shl	arg01, #1
07ed8     0F 13 02 F1 | 	add	arg01, local01
07edc     02 12 66 F0 | 	shl	arg01, #2
07ee0     03 00 00 FF 
07ee4     00 E4 85 F1 | 	sub	objptr, ##1536
07ee8     F2 12 02 F1 | 	add	arg01, objptr
07eec     08 12 06 F1 | 	add	arg01, #8
07ef0     09 29 62 FC | 	wrlong	local06, arg01
07ef4     03 00 00 FF 
07ef8     00 E4 05 F1 | 	add	objptr, ##1536
07efc     F2 2C 02 FB | 	rdlong	local08, objptr
07f00     01 2C 06 F1 | 	add	local08, #1
07f04     F2 2C 62 FC | 	wrlong	local08, objptr
07f08     41 00 00 FF 
07f0c     40 E4 85 F1 | 	sub	objptr, ##33344
07f10                 | LR__0663
07f10     A7 F0 03 F6 | 	mov	ptra, fp
07f14     B2 00 A0 FD | 	call	#popregs_
07f18                 | _getvar_ret
07f18     2D 00 64 FD | 	ret
07f1c                 | 
07f1c                 | ' 
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' 
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' 
07f1c                 | ' function execute_line (astart=0 as integer) as integer
07f1c                 | _execute_line
07f1c     04 4A 05 F6 | 	mov	COUNT_, #4
07f20     A8 00 A0 FD | 	call	#pushregs_
07f24     50 00 00 FF 
07f28     78 E5 05 F1 | 	add	objptr, ##41336
07f2c     F2 00 68 FC | 	wrlong	#0, objptr
07f30                 | ' runptr2=0
07f30                 | ' for lineptr_e=astart to lineptr-1
07f30     0F 00 00 FF 
07f34     34 E5 85 F1 | 	sub	objptr, ##7988
07f38     F2 12 62 FC | 	wrlong	arg01, objptr
07f3c     04 E4 85 F1 | 	sub	objptr, #4
07f40     F2 1E 02 FB | 	rdlong	local01, objptr
07f44     41 00 00 FF 
07f48     40 E4 85 F1 | 	sub	objptr, ##33344
07f4c                 | LR__0670
07f4c     41 00 00 FF 
07f50     44 E4 05 F1 | 	add	objptr, ##33348
07f54     F2 FA 01 FB | 	rdlong	result1, objptr
07f58     41 00 00 FF 
07f5c     44 E4 85 F1 | 	sub	objptr, ##33348
07f60     0F FB 51 F2 | 	cmps	result1, local01 wc
07f64     98 00 90 3D |  if_ae	jmp	#LR__0671
07f68     41 00 00 FF 
07f6c     44 E4 05 F1 | 	add	objptr, ##33348
07f70     F2 FA 01 FB | 	rdlong	result1, objptr
07f74     FD 20 02 F6 | 	mov	local02, result1
07f78     01 20 66 F0 | 	shl	local02, #1
07f7c     FD 20 02 F1 | 	add	local02, result1
07f80     02 20 66 F0 | 	shl	local02, #2
07f84     03 00 00 FF 
07f88     04 E4 85 F1 | 	sub	objptr, ##1540
07f8c     F2 20 02 F1 | 	add	local02, objptr
07f90     08 20 06 F1 | 	add	local02, #8
07f94     10 21 02 FB | 	rdlong	local02, local02
07f98     10 21 E2 F8 | 	getbyte	local02, local02, #0
07f9c     02 20 66 F0 | 	shl	local02, #2
07fa0     04 00 00 FF 
07fa4     1C E4 85 F1 | 	sub	objptr, ##2076
07fa8     F2 20 02 F1 | 	add	local02, objptr
07fac     10 21 02 FB | 	rdlong	local02, local02
07fb0     10 23 02 F6 | 	mov	local03, local02
07fb4     13 20 46 F7 | 	zerox	local02, #19
07fb8     14 22 46 F0 | 	shr	local03, #20
07fbc     02 22 66 F0 | 	shl	local03, #2
07fc0     ED 22 02 F1 | 	add	local03, __methods__
07fc4     11 23 02 FB | 	rdlong	local03, local03
07fc8     3A 00 00 FF 
07fcc     24 E4 85 F1 | 	sub	objptr, ##29732
07fd0     F2 24 02 F6 | 	mov	local04, objptr
07fd4     10 E5 01 F6 | 	mov	objptr, local02
07fd8     2D 22 62 FD | 	call	local03
07fdc     12 E5 01 F6 | 	mov	objptr, local04
07fe0     41 00 00 FF 
07fe4     44 E4 05 F1 | 	add	objptr, ##33348
07fe8     F2 24 02 FB | 	rdlong	local04, objptr
07fec     01 24 06 F1 | 	add	local04, #1
07ff0     F2 24 62 FC | 	wrlong	local04, objptr
07ff4     41 00 00 FF 
07ff8     44 E4 85 F1 | 	sub	objptr, ##33348
07ffc     4C FF 9F FD | 	jmp	#LR__0670
08000                 | LR__0671
08000                 | ' return runptr2
08000     50 00 00 FF 
08004     78 E5 05 F1 | 	add	objptr, ##41336
08008     F2 FA 01 FB | 	rdlong	result1, objptr
0800c     50 00 00 FF 
08010     78 E5 85 F1 | 	sub	objptr, ##41336
08014     A7 F0 03 F6 | 	mov	ptra, fp
08018     B2 00 A0 FD | 	call	#popregs_
0801c                 | _execute_line_ret
0801c     2D 00 64 FD | 	ret
08020                 | 
08020                 | ' 
08020                 | ' 
08020                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08020                 | ' 
08020                 | ' function pop() as expr_result
08020                 | _pop
08020                 | ' 
08020                 | ' if stackpointer=0 then
08020     3A 00 00 FF 
08024     1C E4 05 F1 | 	add	objptr, ##29724
08028     F2 FA 09 FB | 	rdlong	result1, objptr wz
0802c     3A 00 00 FF 
08030     1C E4 85 F1 | 	sub	objptr, ##29724
08034     FF 04 06 A6 |  if_e	mov	_var03, #255
08038     18 00 06 A6 |  if_e	mov	_var01, #24
0803c     68 00 90 AD |  if_e	jmp	#LR__0680
08040     3A 00 00 FF 
08044     1C E4 05 F1 | 	add	objptr, ##29724
08048     F2 FA 01 FB | 	rdlong	result1, objptr
0804c     01 FA 85 F1 | 	sub	result1, #1
08050     F2 FA 61 FC | 	wrlong	result1, objptr
08054     FD FE 01 F6 | 	mov	result3, result1
08058     01 FE 65 F0 | 	shl	result3, #1
0805c     FD FE 01 F1 | 	add	result3, result1
08060     02 FE 65 F0 | 	shl	result3, #2
08064     0C 00 00 FF 
08068     0C E4 85 F1 | 	sub	objptr, ##6156
0806c     F2 FE 01 F1 | 	add	result3, objptr
08070     FF 00 02 FB | 	rdlong	_var01, result3
08074     04 FE 05 F1 | 	add	result3, #4
08078     FF FE 01 FB | 	rdlong	result3, result3
0807c     FD FC 01 F6 | 	mov	result2, result1
08080     01 FC 65 F0 | 	shl	result2, #1
08084     FD FC 01 F1 | 	add	result2, result1
08088     02 FC 65 F0 | 	shl	result2, #2
0808c     F2 FC 01 F1 | 	add	result2, objptr
08090     08 FC 05 F1 | 	add	result2, #8
08094     FE FA 01 FB | 	rdlong	result1, result2
08098     FF 02 02 F6 | 	mov	_var02, result3
0809c     FD 04 02 F6 | 	mov	_var03, result1
080a0     2E 00 00 FF 
080a4     10 E4 85 F1 | 	sub	objptr, ##23568
080a8                 | LR__0680
080a8                 | ' return t1
080a8     01 FD 01 F6 | 	mov	result2, _var02
080ac     02 FF 01 F6 | 	mov	result3, _var03
080b0     00 FB 01 F6 | 	mov	result1, _var01
080b4                 | _pop_ret
080b4     2D 00 64 FD | 	ret
080b8                 | 
080b8                 | ' 
080b8                 | ' sub push(t1 as expr_result )
080b8                 | _push
080b8                 | ' 
080b8                 | ' 'print "In push: "; t1.result_type
080b8                 | ' 'print "In push: "; t1.result.uresult
080b8                 | ' 
080b8                 | ' if stackpointer<maxstack then 
080b8     3A 00 00 FF 
080bc     1C E4 05 F1 | 	add	objptr, ##29724
080c0     F2 00 02 FB | 	rdlong	_var01, objptr
080c4     3A 00 00 FF 
080c8     1C E4 85 F1 | 	sub	objptr, ##29724
080cc     01 00 00 FF 
080d0     00 00 56 F2 | 	cmps	_var01, ##512 wc
080d4     BC 00 90 3D |  if_ae	jmp	#LR__0690
080d8     09 01 02 FB | 	rdlong	_var01, arg01
080dc     04 12 06 F1 | 	add	arg01, #4
080e0     09 03 02 FB | 	rdlong	_var02, arg01
080e4     04 12 06 F1 | 	add	arg01, #4
080e8     09 13 02 FB | 	rdlong	arg01, arg01
080ec     3A 00 00 FF 
080f0     1C E4 05 F1 | 	add	objptr, ##29724
080f4     F2 04 02 FB | 	rdlong	_var03, objptr
080f8     02 07 02 F6 | 	mov	_var04, _var03
080fc     01 06 66 F0 | 	shl	_var04, #1
08100     02 07 02 F1 | 	add	_var04, _var03
08104     02 06 66 F0 | 	shl	_var04, #2
08108     0C 00 00 FF 
0810c     0C E4 85 F1 | 	sub	objptr, ##6156
08110     F2 06 02 F1 | 	add	_var04, objptr
08114     03 01 62 FC | 	wrlong	_var01, _var04
08118     0C 00 00 FF 
0811c     0C E4 05 F1 | 	add	objptr, ##6156
08120     F2 06 02 FB | 	rdlong	_var04, objptr
08124     03 05 02 F6 | 	mov	_var03, _var04
08128     01 04 66 F0 | 	shl	_var03, #1
0812c     03 05 02 F1 | 	add	_var03, _var04
08130     02 04 66 F0 | 	shl	_var03, #2
08134     0C 00 00 FF 
08138     0C E4 85 F1 | 	sub	objptr, ##6156
0813c     F2 04 02 F1 | 	add	_var03, objptr
08140     04 04 06 F1 | 	add	_var03, #4
08144     02 03 62 FC | 	wrlong	_var02, _var03
08148     0C 00 00 FF 
0814c     0C E4 05 F1 | 	add	objptr, ##6156
08150     F2 06 02 FB | 	rdlong	_var04, objptr
08154     03 05 02 F6 | 	mov	_var03, _var04
08158     01 04 66 F0 | 	shl	_var03, #1
0815c     03 05 02 F1 | 	add	_var03, _var04
08160     02 04 66 F0 | 	shl	_var03, #2
08164     0C 00 00 FF 
08168     0C E4 85 F1 | 	sub	objptr, ##6156
0816c     F2 04 02 F1 | 	add	_var03, objptr
08170     08 04 06 F1 | 	add	_var03, #8
08174     02 13 62 FC | 	wrlong	arg01, _var03
08178     0C 00 00 FF 
0817c     0C E4 05 F1 | 	add	objptr, ##6156
08180     F2 00 02 FB | 	rdlong	_var01, objptr
08184     01 00 06 F1 | 	add	_var01, #1
08188     F2 00 62 FC | 	wrlong	_var01, objptr
0818c     3A 00 00 FF 
08190     1C E4 85 F1 | 	sub	objptr, ##29724
08194                 | LR__0690
08194                 | _push_ret
08194     2D 00 64 FD | 	ret
08198                 | 
08198                 | ' 
08198                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08198                 | ' 
08198                 | ' sub do_push
08198                 | _do_push
08198                 | ' if stackpointer<maxstack then 
08198     3A 00 00 FF 
0819c     1C E4 05 F1 | 	add	objptr, ##29724
081a0     F2 00 02 FB | 	rdlong	_var01, objptr
081a4     3A 00 00 FF 
081a8     1C E4 85 F1 | 	sub	objptr, ##29724
081ac     01 00 00 FF 
081b0     00 00 56 F2 | 	cmps	_var01, ##512 wc
081b4     F8 00 90 3D |  if_ae	jmp	#LR__0700
081b8     41 00 00 FF 
081bc     44 E4 05 F1 | 	add	objptr, ##33348
081c0     F2 02 02 FB | 	rdlong	_var02, objptr
081c4     01 05 02 F6 | 	mov	_var03, _var02
081c8     01 04 66 F0 | 	shl	_var03, #1
081cc     01 05 02 F1 | 	add	_var03, _var02
081d0     02 04 66 F0 | 	shl	_var03, #2
081d4     03 00 00 FF 
081d8     04 E4 85 F1 | 	sub	objptr, ##1540
081dc     F2 04 02 F1 | 	add	_var03, objptr
081e0     02 01 02 FB | 	rdlong	_var01, _var03
081e4     04 04 06 F1 | 	add	_var03, #4
081e8     02 07 02 FB | 	rdlong	_var04, _var03
081ec     01 05 02 F6 | 	mov	_var03, _var02
081f0     01 04 66 F0 | 	shl	_var03, #1
081f4     01 05 02 F1 | 	add	_var03, _var02
081f8     02 04 66 F0 | 	shl	_var03, #2
081fc     F2 04 02 F1 | 	add	_var03, objptr
08200     08 04 06 F1 | 	add	_var03, #8
08204     02 03 02 FB | 	rdlong	_var02, _var03
08208     04 00 00 FF 
0820c     24 E4 85 F1 | 	sub	objptr, ##2084
08210     F2 04 02 FB | 	rdlong	_var03, objptr
08214     02 09 02 F6 | 	mov	_var05, _var03
08218     01 08 66 F0 | 	shl	_var05, #1
0821c     02 09 02 F1 | 	add	_var05, _var03
08220     02 08 66 F0 | 	shl	_var05, #2
08224     0C 00 00 FF 
08228     0C E4 85 F1 | 	sub	objptr, ##6156
0822c     F2 08 02 F1 | 	add	_var05, objptr
08230     04 01 62 FC | 	wrlong	_var01, _var05
08234     0C 00 00 FF 
08238     0C E4 05 F1 | 	add	objptr, ##6156
0823c     F2 08 02 FB | 	rdlong	_var05, objptr
08240     04 05 02 F6 | 	mov	_var03, _var05
08244     01 04 66 F0 | 	shl	_var03, #1
08248     04 05 02 F1 | 	add	_var03, _var05
0824c     02 04 66 F0 | 	shl	_var03, #2
08250     0C 00 00 FF 
08254     0C E4 85 F1 | 	sub	objptr, ##6156
08258     F2 04 02 F1 | 	add	_var03, objptr
0825c     04 04 06 F1 | 	add	_var03, #4
08260     02 07 62 FC | 	wrlong	_var04, _var03
08264     0C 00 00 FF 
08268     0C E4 05 F1 | 	add	objptr, ##6156
0826c     F2 08 02 FB | 	rdlong	_var05, objptr
08270     04 07 02 F6 | 	mov	_var04, _var05
08274     01 06 66 F0 | 	shl	_var04, #1
08278     04 07 02 F1 | 	add	_var04, _var05
0827c     02 06 66 F0 | 	shl	_var04, #2
08280     0C 00 00 FF 
08284     0C E4 85 F1 | 	sub	objptr, ##6156
08288     F2 06 02 F1 | 	add	_var04, objptr
0828c     08 06 06 F1 | 	add	_var04, #8
08290     03 03 62 FC | 	wrlong	_var02, _var04
08294     0C 00 00 FF 
08298     0C E4 05 F1 | 	add	objptr, ##6156
0829c     F2 00 02 FB | 	rdlong	_var01, objptr
082a0     01 00 06 F1 | 	add	_var01, #1
082a4     F2 00 62 FC | 	wrlong	_var01, objptr
082a8     3A 00 00 FF 
082ac     1C E4 85 F1 | 	sub	objptr, ##29724
082b0                 | LR__0700
082b0                 | _do_push_ret
082b0     2D 00 64 FD | 	ret
082b4                 | 
082b4                 | ' 
082b4                 | '   
082b4                 | ' sub csave_block(address as ulong)
082b4                 | _csave_block
082b4     09 01 02 F6 | 	mov	_var01, arg01
082b8                 | ' 
082b8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
082b8                 | ' ' we enter it at the state of playing 1 kHz header tone
082b8                 | ' 
082b8                 | ' for i=0 to 63 step 2
082b8     00 02 06 F6 | 	mov	_var02, #0
082bc                 | LR__0710
082bc                 | '   do: loop until lpeek(base+32*7)>32768
082bc     2D 00 00 FF 
082c0     D4 E5 05 F1 | 	add	objptr, ##23508
082c4     97 0C 48 FB | 	callpa	#(@LR__0712-@LR__0711)>>2,fcache_load_ptr_
082c8                 | LR__0711
082c8     F2 12 02 FB | 	rdlong	arg01, objptr
082cc     E0 12 06 F1 | 	add	arg01, #224
082d0     09 FB 01 FB | 	rdlong	result1, arg01
082d4     40 00 00 FF 
082d8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
082dc     E8 FF 9F CD |  if_b	jmp	#LR__0711
082e0                 | LR__0712
082e0     00 13 02 F6 | 	mov	arg01, _var01
082e4     01 05 02 F6 | 	mov	_var03, _var02
082e8     02 04 66 F0 | 	shl	_var03, #2
082ec     02 13 02 F1 | 	add	arg01, _var03
082f0     09 07 02 FB | 	rdlong	_var04, arg01
082f4     24 00 00 FF 
082f8     AC E4 05 F1 | 	add	objptr, ##18604
082fc     F2 06 62 FC | 	wrlong	_var04, objptr
08300     52 00 00 FF 
08304     80 E4 85 F1 | 	sub	objptr, ##42112
08308                 | '   q=lpeek(address+4*i)
08308                 | '      for bit=0 to 31
08308     00 08 06 F6 | 	mov	_var05, #0
0830c     97 84 48 FB | 	callpa	#(@LR__0717-@LR__0713)>>2,fcache_load_ptr_
08310                 | LR__0713
08310                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08310     52 00 00 FF 
08314     80 E4 05 F1 | 	add	objptr, ##42112
08318     F2 06 02 FB | 	rdlong	_var04, objptr
0831c     52 00 00 FF 
08320     80 E4 85 F1 | 	sub	objptr, ##42112
08324     04 05 C2 F9 | 	decod	_var03, _var05
08328     02 07 CA F7 | 	test	_var04, _var03 wz
0832c     60 00 90 AD |  if_e	jmp	#LR__0714
08330     04 05 02 F6 | 	mov	_var03, _var05
08334     02 04 66 F0 | 	shl	_var03, #2
08338     4E 00 00 FF 
0833c     70 E4 05 F1 | 	add	objptr, ##40048
08340     F2 04 02 F1 | 	add	_var03, objptr
08344     02 FF 48 FC | 	wrbyte	#127, _var03
08348     04 05 02 F6 | 	mov	_var03, _var05
0834c     02 04 66 F0 | 	shl	_var03, #2
08350     01 04 06 F1 | 	add	_var03, #1
08354     F2 04 02 F1 | 	add	_var03, objptr
08358     02 01 49 FC | 	wrbyte	#128, _var03
0835c     04 05 02 F6 | 	mov	_var03, _var05
08360     02 04 66 F0 | 	shl	_var03, #2
08364     02 04 06 F1 | 	add	_var03, #2
08368     F2 04 02 F1 | 	add	_var03, objptr
0836c     02 FF 48 FC | 	wrbyte	#127, _var03
08370     04 05 02 F6 | 	mov	_var03, _var05
08374     02 04 66 F0 | 	shl	_var03, #2
08378     03 04 06 F1 | 	add	_var03, #3
0837c     F2 04 02 F1 | 	add	_var03, objptr
08380     02 01 49 FC | 	wrbyte	#128, _var03
08384     4E 00 00 FF 
08388     70 E4 85 F1 | 	sub	objptr, ##40048
0838c     5C 00 90 FD | 	jmp	#LR__0715
08390                 | LR__0714
08390     04 05 02 F6 | 	mov	_var03, _var05
08394     02 04 66 F0 | 	shl	_var03, #2
08398     4E 00 00 FF 
0839c     70 E4 05 F1 | 	add	objptr, ##40048
083a0     F2 04 02 F1 | 	add	_var03, objptr
083a4     02 01 49 FC | 	wrbyte	#128, _var03
083a8     04 05 02 F6 | 	mov	_var03, _var05
083ac     02 04 66 F0 | 	shl	_var03, #2
083b0     01 04 06 F1 | 	add	_var03, #1
083b4     F2 04 02 F1 | 	add	_var03, objptr
083b8     02 01 49 FC | 	wrbyte	#128, _var03
083bc     04 05 02 F6 | 	mov	_var03, _var05
083c0     02 04 66 F0 | 	shl	_var03, #2
083c4     02 04 06 F1 | 	add	_var03, #2
083c8     F2 04 02 F1 | 	add	_var03, objptr
083cc     02 FF 48 FC | 	wrbyte	#127, _var03
083d0     04 05 02 F6 | 	mov	_var03, _var05
083d4     02 04 66 F0 | 	shl	_var03, #2
083d8     03 04 06 F1 | 	add	_var03, #3
083dc     F2 04 02 F1 | 	add	_var03, objptr
083e0     02 FF 48 FC | 	wrbyte	#127, _var03
083e4     4E 00 00 FF 
083e8     70 E4 85 F1 | 	sub	objptr, ##40048
083ec                 | LR__0715
083ec     01 08 06 F1 | 	add	_var05, #1
083f0     20 08 56 F2 | 	cmps	_var05, #32 wc
083f4     18 FF 9F CD |  if_b	jmp	#LR__0713
083f8                 | '   do: loop until lpeek(base+32*7)<32768
083f8     2D 00 00 FF 
083fc     D4 E5 05 F1 | 	add	objptr, ##23508
08400                 | LR__0716
08400     F2 12 02 FB | 	rdlong	arg01, objptr
08404     E0 12 06 F1 | 	add	arg01, #224
08408     09 FB 01 FB | 	rdlong	result1, arg01
0840c     40 00 00 FF 
08410     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08414     E8 FF 9F 3D |  if_ae	jmp	#LR__0716
08418                 | LR__0717
08418     00 13 02 F6 | 	mov	arg01, _var01
0841c     04 12 06 F1 | 	add	arg01, #4
08420     01 05 02 F6 | 	mov	_var03, _var02
08424     02 04 66 F0 | 	shl	_var03, #2
08428     02 13 02 F1 | 	add	arg01, _var03
0842c     09 07 02 FB | 	rdlong	_var04, arg01
08430     24 00 00 FF 
08434     AC E4 05 F1 | 	add	objptr, ##18604
08438     F2 06 62 FC | 	wrlong	_var04, objptr
0843c     52 00 00 FF 
08440     80 E4 85 F1 | 	sub	objptr, ##42112
08444                 | '   q=lpeek(address+4+4*i)
08444                 | '      for bit=0 to 31
08444     00 08 06 F6 | 	mov	_var05, #0
08448     97 94 48 FB | 	callpa	#(@LR__0721-@LR__0718)>>2,fcache_load_ptr_
0844c                 | LR__0718
0844c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0844c     52 00 00 FF 
08450     80 E4 05 F1 | 	add	objptr, ##42112
08454     F2 06 02 FB | 	rdlong	_var04, objptr
08458     52 00 00 FF 
0845c     80 E4 85 F1 | 	sub	objptr, ##42112
08460     04 05 C2 F9 | 	decod	_var03, _var05
08464     02 07 CA F7 | 	test	_var04, _var03 wz
08468     80 00 90 AD |  if_e	jmp	#LR__0719
0846c     04 0B 02 F6 | 	mov	_var06, _var05
08470     02 0A 66 F0 | 	shl	_var06, #2
08474     80 04 06 F6 | 	mov	_var03, #128
08478     05 05 02 F1 | 	add	_var03, _var06
0847c     4E 00 00 FF 
08480     70 E4 05 F1 | 	add	objptr, ##40048
08484     F2 04 02 F1 | 	add	_var03, objptr
08488     02 FF 48 FC | 	wrbyte	#127, _var03
0848c     04 0B 02 F6 | 	mov	_var06, _var05
08490     02 0A 66 F0 | 	shl	_var06, #2
08494     80 04 06 F6 | 	mov	_var03, #128
08498     05 05 02 F1 | 	add	_var03, _var06
0849c     01 04 06 F1 | 	add	_var03, #1
084a0     F2 04 02 F1 | 	add	_var03, objptr
084a4     02 01 49 FC | 	wrbyte	#128, _var03
084a8     04 0B 02 F6 | 	mov	_var06, _var05
084ac     02 0A 66 F0 | 	shl	_var06, #2
084b0     80 04 06 F6 | 	mov	_var03, #128
084b4     05 05 02 F1 | 	add	_var03, _var06
084b8     02 04 06 F1 | 	add	_var03, #2
084bc     F2 04 02 F1 | 	add	_var03, objptr
084c0     02 FF 48 FC | 	wrbyte	#127, _var03
084c4     04 0B 02 F6 | 	mov	_var06, _var05
084c8     02 0A 66 F0 | 	shl	_var06, #2
084cc     80 04 06 F6 | 	mov	_var03, #128
084d0     05 05 02 F1 | 	add	_var03, _var06
084d4     03 04 06 F1 | 	add	_var03, #3
084d8     F2 04 02 F1 | 	add	_var03, objptr
084dc     02 01 49 FC | 	wrbyte	#128, _var03
084e0     4E 00 00 FF 
084e4     70 E4 85 F1 | 	sub	objptr, ##40048
084e8     7C 00 90 FD | 	jmp	#LR__0720
084ec                 | LR__0719
084ec     04 0B 02 F6 | 	mov	_var06, _var05
084f0     02 0A 66 F0 | 	shl	_var06, #2
084f4     80 04 06 F6 | 	mov	_var03, #128
084f8     05 05 02 F1 | 	add	_var03, _var06
084fc     4E 00 00 FF 
08500     70 E4 05 F1 | 	add	objptr, ##40048
08504     F2 04 02 F1 | 	add	_var03, objptr
08508     02 01 49 FC | 	wrbyte	#128, _var03
0850c     04 0B 02 F6 | 	mov	_var06, _var05
08510     02 0A 66 F0 | 	shl	_var06, #2
08514     80 04 06 F6 | 	mov	_var03, #128
08518     05 05 02 F1 | 	add	_var03, _var06
0851c     01 04 06 F1 | 	add	_var03, #1
08520     F2 04 02 F1 | 	add	_var03, objptr
08524     02 01 49 FC | 	wrbyte	#128, _var03
08528     04 0B 02 F6 | 	mov	_var06, _var05
0852c     02 0A 66 F0 | 	shl	_var06, #2
08530     80 04 06 F6 | 	mov	_var03, #128
08534     05 05 02 F1 | 	add	_var03, _var06
08538     02 04 06 F1 | 	add	_var03, #2
0853c     F2 04 02 F1 | 	add	_var03, objptr
08540     02 FF 48 FC | 	wrbyte	#127, _var03
08544     04 0B 02 F6 | 	mov	_var06, _var05
08548     02 0A 66 F0 | 	shl	_var06, #2
0854c     80 04 06 F6 | 	mov	_var03, #128
08550     05 05 02 F1 | 	add	_var03, _var06
08554     03 04 06 F1 | 	add	_var03, #3
08558     F2 04 02 F1 | 	add	_var03, objptr
0855c     02 FF 48 FC | 	wrbyte	#127, _var03
08560     4E 00 00 FF 
08564     70 E4 85 F1 | 	sub	objptr, ##40048
08568                 | LR__0720
08568     01 08 06 F1 | 	add	_var05, #1
0856c     20 08 56 F2 | 	cmps	_var05, #32 wc
08570     D8 FE 9F CD |  if_b	jmp	#LR__0718
08574                 | LR__0721
08574     02 02 06 F1 | 	add	_var02, #2
08578     40 02 56 F2 | 	cmps	_var02, #64 wc
0857c     3C FD 9F CD |  if_b	jmp	#LR__0710
08580                 | ' do: loop until lpeek(base+32*7)>32768
08580     2D 00 00 FF 
08584     D4 E5 05 F1 | 	add	objptr, ##23508
08588     97 84 48 FB | 	callpa	#(@LR__0730-@LR__0722)>>2,fcache_load_ptr_
0858c                 | LR__0722
0858c     F2 12 02 FB | 	rdlong	arg01, objptr
08590     E0 12 06 F1 | 	add	arg01, #224
08594     09 FB 01 FB | 	rdlong	result1, arg01
08598     40 00 00 FF 
0859c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
085a0     E8 FF 9F CD |  if_b	jmp	#LR__0722
085a4     2D 00 00 FF 
085a8     D4 E5 85 F1 | 	sub	objptr, ##23508
085ac                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
085ac     00 02 06 F6 | 	mov	_var02, #0
085b0                 | LR__0723
085b0     01 07 52 F6 | 	abs	_var04, _var02 wc
085b4     07 06 06 F5 | 	and	_var04, #7
085b8     03 07 82 F6 | 	negc	_var04, _var04
085bc     04 06 56 F2 | 	cmps	_var04, #4 wc
085c0     20 00 90 3D |  if_ae	jmp	#LR__0724
085c4     01 0B 02 F6 | 	mov	_var06, _var02
085c8     4E 00 00 FF 
085cc     70 E4 05 F1 | 	add	objptr, ##40048
085d0     F2 0A 02 F1 | 	add	_var06, objptr
085d4     05 FF 48 FC | 	wrbyte	#127, _var06
085d8     4E 00 00 FF 
085dc     70 E4 85 F1 | 	sub	objptr, ##40048
085e0     1C 00 90 FD | 	jmp	#LR__0725
085e4                 | LR__0724
085e4     01 0B 02 F6 | 	mov	_var06, _var02
085e8     4E 00 00 FF 
085ec     70 E4 05 F1 | 	add	objptr, ##40048
085f0     F2 0A 02 F1 | 	add	_var06, objptr
085f4     05 01 49 FC | 	wrbyte	#128, _var06
085f8     4E 00 00 FF 
085fc     70 E4 85 F1 | 	sub	objptr, ##40048
08600                 | LR__0725
08600     01 02 06 F1 | 	add	_var02, #1
08604     80 02 56 F2 | 	cmps	_var02, #128 wc
08608     A4 FF 9F CD |  if_b	jmp	#LR__0723
0860c                 | ' 
0860c                 | ' do: loop until lpeek(base+32*7)<32768
0860c     2D 00 00 FF 
08610     D4 E5 05 F1 | 	add	objptr, ##23508
08614                 | LR__0726
08614     F2 12 02 FB | 	rdlong	arg01, objptr
08618     E0 12 06 F1 | 	add	arg01, #224
0861c     09 FB 01 FB | 	rdlong	result1, arg01
08620     40 00 00 FF 
08624     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08628     E8 FF 9F 3D |  if_ae	jmp	#LR__0726
0862c     2D 00 00 FF 
08630     D4 E5 85 F1 | 	sub	objptr, ##23508
08634                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08634     80 02 06 F6 | 	mov	_var02, #128
08638                 | LR__0727
08638     01 07 52 F6 | 	abs	_var04, _var02 wc
0863c     07 06 06 F5 | 	and	_var04, #7
08640     03 07 82 F6 | 	negc	_var04, _var04
08644     04 06 56 F2 | 	cmps	_var04, #4 wc
08648     20 00 90 3D |  if_ae	jmp	#LR__0728
0864c     01 0B 02 F6 | 	mov	_var06, _var02
08650     4E 00 00 FF 
08654     70 E4 05 F1 | 	add	objptr, ##40048
08658     F2 0A 02 F1 | 	add	_var06, objptr
0865c     05 FF 48 FC | 	wrbyte	#127, _var06
08660     4E 00 00 FF 
08664     70 E4 85 F1 | 	sub	objptr, ##40048
08668     1C 00 90 FD | 	jmp	#LR__0729
0866c                 | LR__0728
0866c     01 0B 02 F6 | 	mov	_var06, _var02
08670     4E 00 00 FF 
08674     70 E4 05 F1 | 	add	objptr, ##40048
08678     F2 0A 02 F1 | 	add	_var06, objptr
0867c     05 01 49 FC | 	wrbyte	#128, _var06
08680     4E 00 00 FF 
08684     70 E4 85 F1 | 	sub	objptr, ##40048
08688                 | LR__0729
08688     01 02 06 F1 | 	add	_var02, #1
0868c     00 03 16 F2 | 	cmp	_var02, #256 wc
08690     A4 FF 9F CD |  if_b	jmp	#LR__0727
08694                 | LR__0730
08694                 | _csave_block_ret
08694     2D 00 64 FD | 	ret
08698                 | 
08698                 | ' 
08698                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
08698                 | _csave_addtoblock
08698     04 4A 05 F6 | 	mov	COUNT_, #4
0869c     A8 00 A0 FD | 	call	#pushregs_
086a0     09 1F 02 F6 | 	mov	local01, arg01
086a4                 | ' 
086a4                 | ' 
086a4                 | ' if force=0 then
086a4     07 14 4E F7 | 	zerox	arg02, #7 wz
086a8     78 00 90 5D |  if_ne	jmp	#LR__0740
086ac     50 00 00 FF 
086b0     70 E5 05 F1 | 	add	objptr, ##41328
086b4     F2 14 02 FB | 	rdlong	arg02, objptr
086b8     02 00 00 FF 
086bc     00 E4 85 F1 | 	sub	objptr, ##1024
086c0     F2 14 02 F1 | 	add	arg02, objptr
086c4     0A 1F 42 FC | 	wrbyte	local01, arg02
086c8     02 00 00 FF 
086cc     00 E4 05 F1 | 	add	objptr, ##1024
086d0     F2 1E 02 FB | 	rdlong	local01, objptr
086d4     01 1E 06 F1 | 	add	local01, #1
086d8     F2 1E 62 FC | 	wrlong	local01, objptr
086dc                 | '   block(blockptr)=d
086dc                 | '   blockptr+=1
086dc                 | '   if blockptr>=255 then
086dc     50 00 00 FF 
086e0     70 E5 85 F1 | 	sub	objptr, ##41328
086e4     FF 1E 16 F2 | 	cmp	local01, #255 wc
086e8     E4 00 90 CD |  if_b	jmp	#LR__0744
086ec     4E 00 00 FF 
086f0     70 E5 05 F1 | 	add	objptr, ##40304
086f4     F2 12 02 F6 | 	mov	arg01, objptr
086f8     4E 00 00 FF 
086fc     70 E5 85 F1 | 	sub	objptr, ##40304
08700     B0 FB BF FD | 	call	#_csave_block
08704     50 00 00 FF 
08708     70 E5 05 F1 | 	add	objptr, ##41328
0870c     F2 00 68 FC | 	wrlong	#0, objptr
08710     50 00 00 FF 
08714     70 E5 85 F1 | 	sub	objptr, ##41328
08718     2C 13 06 F6 | 	mov	arg01, #300
0871c     6C B5 B0 FD | 	call	#__system___waitms
08720     AC 00 90 FD | 	jmp	#LR__0744
08724                 | LR__0740
08724     50 00 00 FF 
08728     70 E5 05 F1 | 	add	objptr, ##41328
0872c     F2 20 02 FB | 	rdlong	local02, objptr
08730     02 00 00 FF 
08734     00 E4 85 F1 | 	sub	objptr, ##1024
08738     F2 20 02 F1 | 	add	local02, objptr
0873c     10 1F 42 FC | 	wrbyte	local01, local02
08740                 | '   block(blockptr)=d
08740                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
08740     02 00 00 FF 
08744     00 E4 05 F1 | 	add	objptr, ##1024
08748     F2 22 02 FB | 	rdlong	local03, objptr
0874c     50 00 00 FF 
08750     70 E5 85 F1 | 	sub	objptr, ##41328
08754     FF 22 16 F2 | 	cmp	local03, #255 wc
08758     40 00 90 3D |  if_ae	jmp	#LR__0743
0875c     50 00 00 FF 
08760     70 E5 05 F1 | 	add	objptr, ##41328
08764     F2 24 02 FB | 	rdlong	local04, objptr
08768     50 00 00 FF 
0876c     70 E5 85 F1 | 	sub	objptr, ##41328
08770                 | LR__0741
08770     00 25 56 F2 | 	cmps	local04, #256 wc
08774     24 00 90 3D |  if_ae	jmp	#LR__0742
08778     12 21 02 F6 | 	mov	local02, local04
0877c     4E 00 00 FF 
08780     70 E5 05 F1 | 	add	objptr, ##40304
08784     F2 20 02 F1 | 	add	local02, objptr
08788     10 01 48 FC | 	wrbyte	#0, local02
0878c     01 24 06 F1 | 	add	local04, #1
08790     4E 00 00 FF 
08794     70 E5 85 F1 | 	sub	objptr, ##40304
08798     D4 FF 9F FD | 	jmp	#LR__0741
0879c                 | LR__0742
0879c                 | LR__0743
0879c     4E 00 00 FF 
087a0     70 E5 05 F1 | 	add	objptr, ##40304
087a4     F2 12 02 F6 | 	mov	arg01, objptr
087a8     4E 00 00 FF 
087ac     70 E5 85 F1 | 	sub	objptr, ##40304
087b0     00 FB BF FD | 	call	#_csave_block
087b4     50 00 00 FF 
087b8     70 E5 05 F1 | 	add	objptr, ##41328
087bc     F2 00 68 FC | 	wrlong	#0, objptr
087c0     50 00 00 FF 
087c4     70 E5 85 F1 | 	sub	objptr, ##41328
087c8     2C 13 06 F6 | 	mov	arg01, #300
087cc     BC B4 B0 FD | 	call	#__system___waitms
087d0                 | LR__0744
087d0     A7 F0 03 F6 | 	mov	ptra, fp
087d4     B2 00 A0 FD | 	call	#popregs_
087d8                 | _csave_addtoblock_ret
087d8     2D 00 64 FD | 	ret
087dc                 | 
087dc                 | ' 
087dc                 | ' sub test_csave
087dc                 | _test_csave
087dc     04 4A 05 F6 | 	mov	COUNT_, #4
087e0     A8 00 A0 FD | 	call	#pushregs_
087e4     C0 F0 07 F1 | 	add	ptra, #192
087e8                 | ' 'dim fileheader,savestart, saveptr as ulong
087e8                 | ' 
087e8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
087e8     41 00 00 FF 
087ec     48 E4 05 F1 | 	add	objptr, ##33352
087f0     F2 12 02 FB | 	rdlong	arg01, objptr
087f4     41 00 00 FF 
087f8     48 E4 85 F1 | 	sub	objptr, ##33352
087fc     48 7F B0 FD | 	call	#_pslpeek
08800     FF FF 7F FF 
08804     FF FB 0D F2 | 	cmp	result1, ##-1 wz
08808     0C 00 90 5D |  if_ne	jmp	#LR__0750
0880c     1B 12 06 F6 | 	mov	arg01, #27
08810     78 7D B0 FD | 	call	#_printerror
08814     0C 03 90 FD | 	jmp	#LR__0762
08818                 | LR__0750
08818     04 F8 BF FD | 	call	#_pop
0881c     FF 1E 02 F6 | 	mov	local01, result3
08820     90 4E 05 F1 | 	add	fp, #144
08824     A7 FA 61 FC | 	wrlong	result1, fp
08828     04 4E 05 F1 | 	add	fp, #4
0882c     A7 FC 61 FC | 	wrlong	result2, fp
08830     04 4E 05 F1 | 	add	fp, #4
08834     A7 1E 62 FC | 	wrlong	local01, fp
08838                 | ' t1=pop()
08838                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
08838     98 4E 85 F1 | 	sub	fp, #152
0883c     1F 1E 0E F2 | 	cmp	local01, #31 wz
08840     18 01 00 5F 
08844     85 1E 06 56 |  if_ne	mov	local01, ##@LR__4201
08848     8C 4E 05 51 |  if_ne	add	fp, #140
0884c     A7 1E 62 5C |  if_ne	wrlong	local01, fp
08850     8C 4E 85 51 |  if_ne	sub	fp, #140
08854     90 4E 05 A1 |  if_e	add	fp, #144
08858     A7 1E 02 AB |  if_e	rdlong	local01, fp
0885c     04 4E 85 A1 |  if_e	sub	fp, #4
08860     A7 1E 62 AC |  if_e	wrlong	local01, fp
08864     8C 4E 85 A1 |  if_e	sub	fp, #140
08868                 | ' 
08868                 | ' ' prepare 1 kHz header wave
08868                 | ' 
08868                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08868     A7 00 68 FC | 	wrlong	#0, fp
0886c     97 34 48 FB | 	callpa	#(@LR__0754-@LR__0751)>>2,fcache_load_ptr_
08870                 | LR__0751
08870     A7 1E 02 FB | 	rdlong	local01, fp
08874     0F 1F 52 F6 | 	abs	local01, local01 wc
08878     07 1E 06 F5 | 	and	local01, #7
0887c     0F 1F 82 F6 | 	negc	local01, local01
08880     04 1E 56 F2 | 	cmps	local01, #4 wc
08884     20 00 90 3D |  if_ae	jmp	#LR__0752
08888     A7 1E 02 FB | 	rdlong	local01, fp
0888c     4E 00 00 FF 
08890     70 E4 05 F1 | 	add	objptr, ##40048
08894     F2 1E 02 F1 | 	add	local01, objptr
08898     0F FF 48 FC | 	wrbyte	#127, local01
0889c     4E 00 00 FF 
088a0     70 E4 85 F1 | 	sub	objptr, ##40048
088a4     1C 00 90 FD | 	jmp	#LR__0753
088a8                 | LR__0752
088a8     A7 1E 02 FB | 	rdlong	local01, fp
088ac     4E 00 00 FF 
088b0     70 E4 05 F1 | 	add	objptr, ##40048
088b4     F2 1E 02 F1 | 	add	local01, objptr
088b8     0F 01 49 FC | 	wrbyte	#128, local01
088bc     4E 00 00 FF 
088c0     70 E4 85 F1 | 	sub	objptr, ##40048
088c4                 | LR__0753
088c4     A7 1E 02 FB | 	rdlong	local01, fp
088c8     01 1E 06 F1 | 	add	local01, #1
088cc     A7 1E 62 FC | 	wrlong	local01, fp
088d0     00 1F 56 F2 | 	cmps	local01, #256 wc
088d4     98 FF 9F CD |  if_b	jmp	#LR__0751
088d8                 | LR__0754
088d8     4E 00 00 FF 
088dc     70 E4 05 F1 | 	add	objptr, ##40048
088e0     F2 14 02 F6 | 	mov	arg02, objptr
088e4     07 12 06 F6 | 	mov	arg01, #7
088e8     0F 00 00 FF 
088ec     40 17 06 F6 | 	mov	arg03, ##8000
088f0     0E 18 C6 F9 | 	decod	arg04, #14
088f4     00 1B 06 F6 | 	mov	arg05, #256
088f8     00 1C 06 F6 | 	mov	arg06, #0
088fc     42 00 00 FF 
08900     B0 E5 85 F1 | 	sub	objptr, ##34224
08904     E0 AD B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
08908     0B 00 00 FF 
0890c     C0 E4 85 F1 | 	sub	objptr, ##5824
08910     05 00 00 FF 
08914     B8 13 06 F6 | 	mov	arg01, ##3000
08918     70 B3 B0 FD | 	call	#__system___waitms
0891c     50 00 00 FF 
08920     70 E5 05 F1 | 	add	objptr, ##41328
08924     F2 00 68 FC | 	wrlong	#0, objptr
08928     50 00 00 FF 
0892c     70 E5 85 F1 | 	sub	objptr, ##41328
08930     72 12 06 F6 | 	mov	arg01, #114
08934     00 14 06 F6 | 	mov	arg02, #0
08938     5C FD BF FD | 	call	#_csave_addtoblock
0893c     62 12 06 F6 | 	mov	arg01, #98
08940     00 14 06 F6 | 	mov	arg02, #0
08944     50 FD BF FD | 	call	#_csave_addtoblock
08948     61 12 06 F6 | 	mov	arg01, #97
0894c     00 14 06 F6 | 	mov	arg02, #0
08950     44 FD BF FD | 	call	#_csave_addtoblock
08954     0D 12 06 F6 | 	mov	arg01, #13
08958     00 14 06 F6 | 	mov	arg02, #0
0895c     38 FD BF FD | 	call	#_csave_addtoblock
08960                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
08960                 | ' waitms 3000 
08960                 | ' 
08960                 | ' blockptr=0
08960                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
08960                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
08960     A7 02 68 FC | 	wrlong	#1, fp
08964     8C 4E 05 F1 | 	add	fp, #140
08968     A7 12 02 FB | 	rdlong	arg01, fp
0896c     8C 4E 85 F1 | 	sub	fp, #140
08970     09 21 02 F6 | 	mov	local02, arg01
08974     97 06 48 FB | 	callpa	#(@LR__0756-@LR__0755)>>2,fcache_load_ptr_
08978                 | LR__0755
08978     10 FB C9 FA | 	rdbyte	result1, local02 wz
0897c     01 20 06 51 |  if_ne	add	local02, #1
08980     F4 FF 9F 5D |  if_ne	jmp	#LR__0755
08984                 | LR__0756
08984     09 21 82 F1 | 	sub	local02, arg01
08988     10 23 02 F6 | 	mov	local03, local02
0898c     01 22 06 F1 | 	add	local03, #1
08990                 | LR__0757
08990     A7 1E 02 FB | 	rdlong	local01, fp
08994     11 1F 52 F2 | 	cmps	local01, local03 wc
08998     34 00 90 3D |  if_ae	jmp	#LR__0758
0899c     8C 4E 05 F1 | 	add	fp, #140
089a0     A7 12 02 FB | 	rdlong	arg01, fp
089a4     8C 4E 85 F1 | 	sub	fp, #140
089a8     A7 14 02 FB | 	rdlong	arg02, fp
089ac     01 16 06 F6 | 	mov	arg03, #1
089b0     2C D1 B0 FD | 	call	#__system__Mid_S
089b4     FD 12 C2 FA | 	rdbyte	arg01, result1
089b8     00 14 06 F6 | 	mov	arg02, #0
089bc     D8 FC BF FD | 	call	#_csave_addtoblock
089c0     A7 1E 02 FB | 	rdlong	local01, fp
089c4     01 1E 06 F1 | 	add	local01, #1
089c8     A7 1E 62 FC | 	wrlong	local01, fp
089cc     C0 FF 9F FD | 	jmp	#LR__0757
089d0                 | LR__0758
089d0     00 12 06 F6 | 	mov	arg01, #0
089d4     00 14 06 F6 | 	mov	arg02, #0
089d8     BC FC BF FD | 	call	#_csave_addtoblock
089dc     72 12 06 F6 | 	mov	arg01, #114
089e0     00 14 06 F6 | 	mov	arg02, #0
089e4     B0 FC BF FD | 	call	#_csave_addtoblock
089e8     62 12 06 F6 | 	mov	arg01, #98
089ec     00 14 06 F6 | 	mov	arg02, #0
089f0     A4 FC BF FD | 	call	#_csave_addtoblock
089f4     73 12 06 F6 | 	mov	arg01, #115
089f8     00 14 06 F6 | 	mov	arg02, #0
089fc     98 FC BF FD | 	call	#_csave_addtoblock
08a00     0D 12 06 F6 | 	mov	arg01, #13
08a04     00 14 06 F6 | 	mov	arg02, #0
08a08     8C FC BF FD | 	call	#_csave_addtoblock
08a0c     41 00 00 FF 
08a10     48 E4 05 F1 | 	add	objptr, ##33352
08a14     F2 1E 02 FB | 	rdlong	local01, objptr
08a18     41 00 00 FF 
08a1c     48 E4 85 F1 | 	sub	objptr, ##33352
08a20     9C 4E 05 F1 | 	add	fp, #156
08a24     A7 1E 62 FC | 	wrlong	local01, fp
08a28     9C 4E 85 F1 | 	sub	fp, #156
08a2c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
08a2c                 | ' 
08a2c                 | ' saveptr=programstart
08a2c                 | ' do
08a2c                 | LR__0759
08a2c     A0 4E 05 F1 | 	add	fp, #160
08a30     A7 12 02 F6 | 	mov	arg01, fp
08a34     04 4E 85 F1 | 	sub	fp, #4
08a38     A7 14 02 FB | 	rdlong	arg02, fp
08a3c     9C 4E 85 F1 | 	sub	fp, #156
08a40     18 16 06 F6 | 	mov	arg03, #24
08a44     0B 00 00 FF 
08a48     C0 E4 05 F1 | 	add	objptr, ##5824
08a4c     44 A5 B0 FD | 	call	#_psram_spin2_read1
08a50     0C 4E 05 F1 | 	add	fp, #12
08a54     A7 12 02 F6 | 	mov	arg01, fp
08a58     9C 4E 05 F1 | 	add	fp, #156
08a5c     A7 14 02 FB | 	rdlong	arg02, fp
08a60     04 4E 05 F1 | 	add	fp, #4
08a64     A7 16 02 FB | 	rdlong	arg03, fp
08a68     AC 4E 85 F1 | 	sub	fp, #172
08a6c     24 A5 B0 FD | 	call	#_psram_spin2_read1
08a70     0B 00 00 FF 
08a74     C0 E4 85 F1 | 	sub	objptr, ##5824
08a78     AC 4E 05 F1 | 	add	fp, #172
08a7c     A7 12 02 FB | 	rdlong	arg01, fp
08a80     AC 4E 85 F1 | 	sub	fp, #172
08a84     00 14 06 F6 | 	mov	arg02, #0
08a88     0C FC BF FD | 	call	#_csave_addtoblock
08a8c                 | '   psram.read1(varptr(header(0)),saveptr,24)
08a8c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
08a8c                 | '   csave_addtoblock(header(3),0) ' that's always <255
08a8c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
08a8c     A7 00 68 FC | 	wrlong	#0, fp
08a90     AC 4E 05 F1 | 	add	fp, #172
08a94     A7 24 02 FB | 	rdlong	local04, fp
08a98     AC 4E 85 F1 | 	sub	fp, #172
08a9c                 | LR__0760
08a9c     A7 1E 02 FB | 	rdlong	local01, fp
08aa0     12 1F 52 F2 | 	cmps	local01, local04 wc
08aa4     2C 00 90 3D |  if_ae	jmp	#LR__0761
08aa8     A7 22 02 FB | 	rdlong	local03, fp
08aac     0C 4E 05 F1 | 	add	fp, #12
08ab0     A7 22 02 F1 | 	add	local03, fp
08ab4     11 13 C2 FA | 	rdbyte	arg01, local03
08ab8     00 14 06 F6 | 	mov	arg02, #0
08abc     0C 4E 85 F1 | 	sub	fp, #12
08ac0     D4 FB BF FD | 	call	#_csave_addtoblock
08ac4     A7 22 02 FB | 	rdlong	local03, fp
08ac8     01 22 06 F1 | 	add	local03, #1
08acc     A7 22 62 FC | 	wrlong	local03, fp
08ad0     C8 FF 9F FD | 	jmp	#LR__0760
08ad4                 | LR__0761
08ad4     B4 4E 05 F1 | 	add	fp, #180
08ad8     A7 1E 02 FB | 	rdlong	local01, fp
08adc     18 4E 85 F1 | 	sub	fp, #24
08ae0     A7 1E 62 FC | 	wrlong	local01, fp
08ae4     18 4E 05 F1 | 	add	fp, #24
08ae8     A7 1E 02 FB | 	rdlong	local01, fp
08aec     B4 4E 85 F1 | 	sub	fp, #180
08af0     FF FF 3F FF 
08af4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
08af8     30 FF 9F 5D |  if_ne	jmp	#LR__0759
08afc     00 12 06 F6 | 	mov	arg01, #0
08b00     01 14 06 F6 | 	mov	arg02, #1
08b04     90 FB BF FD | 	call	#_csave_addtoblock
08b08     2D 00 00 FF 
08b0c     D4 E5 05 F1 | 	add	objptr, ##23508
08b10     F2 12 02 FB | 	rdlong	arg01, objptr
08b14     2D 00 00 FF 
08b18     D4 E5 85 F1 | 	sub	objptr, ##23508
08b1c     F4 12 06 F1 | 	add	arg01, #244
08b20     09 01 58 FC | 	wrword	#0, arg01
08b24                 | LR__0762
08b24     A7 F0 03 F6 | 	mov	ptra, fp
08b28     B2 00 A0 FD | 	call	#popregs_
08b2c                 | _test_csave_ret
08b2c     2D 00 64 FD | 	ret
08b30                 | 
08b30                 | ' 
08b30                 | ' ' ----------------- Save the program
08b30                 | ' 
08b30                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
08b30                 | _do_save
08b30     01 4A 05 F6 | 	mov	COUNT_, #1
08b34     A8 00 A0 FD | 	call	#pushregs_
08b38     01 00 00 FF 
08b3c     B8 F0 07 F1 | 	add	ptra, ##696
08b40     01 00 00 FF 
08b44     10 4E 05 F1 | 	add	fp, ##528
08b48     B1 B0 86 FF 
08b4c     A7 E4 68 FC | 	wrlong	##224486002, fp
08b50     01 00 00 FF 
08b54     10 4E 85 F1 | 	sub	fp, ##528
08b58     C4 F4 BF FD | 	call	#_pop
08b5c     FF 1A 02 F6 | 	mov	arg05, result3
08b60     A7 FA 61 FC | 	wrlong	result1, fp
08b64     04 4E 05 F1 | 	add	fp, #4
08b68     A7 FC 61 FC | 	wrlong	result2, fp
08b6c     04 4E 05 F1 | 	add	fp, #4
08b70     A7 1A 62 FC | 	wrlong	arg05, fp
08b74     08 4E 85 F1 | 	sub	fp, #8
08b78                 | ' 
08b78                 | ' fileheader=$0D616272' rba+ver'
08b78                 | ' 
08b78                 | ' t1=pop() 
08b78                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
08b78     41 00 00 FF 
08b7c     48 E4 05 F1 | 	add	objptr, ##33352
08b80     F2 12 02 FB | 	rdlong	arg01, objptr
08b84     41 00 00 FF 
08b88     48 E4 85 F1 | 	sub	objptr, ##33352
08b8c     B8 7B B0 FD | 	call	#_pslpeek
08b90     FF FF 7F FF 
08b94     FF FB 0D F2 | 	cmp	result1, ##-1 wz
08b98     0C 00 90 5D |  if_ne	jmp	#LR__0770
08b9c     1B 12 06 F6 | 	mov	arg01, #27
08ba0     E8 79 B0 FD | 	call	#_printerror
08ba4     E4 01 90 FD | 	jmp	#LR__0773
08ba8                 | LR__0770
08ba8                 | ' if t1.result_type=result_string then
08ba8     08 4E 05 F1 | 	add	fp, #8
08bac     A7 1E 02 FB | 	rdlong	local01, fp
08bb0     08 4E 85 F1 | 	sub	fp, #8
08bb4     1F 1E 0E F2 | 	cmp	local01, #31 wz
08bb8     D0 01 90 5D |  if_ne	jmp	#LR__0772
08bbc                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
08bbc     A7 12 02 FB | 	rdlong	arg01, fp
08bc0     18 01 00 FF 
08bc4     90 14 06 F6 | 	mov	arg02, ##@LR__4202
08bc8     DC AE B0 FD | 	call	#__system___string_cmp
08bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
08bd0     18 01 00 AF 
08bd4     91 1E 06 A6 |  if_e	mov	local01, ##@LR__4203
08bd8     A7 1E 62 AC |  if_e	wrlong	local01, fp
08bdc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
08bdc     09 12 06 F6 | 	mov	arg01, #9
08be0     F4 F9 B0 FD | 	call	#__system__close
08be4     09 1E 06 F6 | 	mov	local01, #9
08be8     49 00 00 FF 
08bec     58 E4 05 F1 | 	add	objptr, ##37464
08bf0     F2 12 02 FB | 	rdlong	arg01, objptr
08bf4     49 00 00 FF 
08bf8     58 E4 85 F1 | 	sub	objptr, ##37464
08bfc     18 01 00 FF 
08c00     9C 14 06 F6 | 	mov	arg02, ##@LR__4204
08c04     D4 AE B0 FD | 	call	#__system___string_concat
08c08     FD 12 02 F6 | 	mov	arg01, result1
08c0c     A7 14 02 FB | 	rdlong	arg02, fp
08c10     C8 AE B0 FD | 	call	#__system___string_concat
08c14     FD 14 02 F6 | 	mov	arg02, result1
08c18     0F 13 02 F6 | 	mov	arg01, local01
08c1c     0D 16 06 F6 | 	mov	arg03, #13
08c20     78 B9 B0 FD | 	call	#__system___basic_open_string
08c24                 | '   put #9,1,fileheader,1
08c24     01 00 00 FF 
08c28     10 4E 05 F1 | 	add	fp, ##528
08c2c     A7 16 02 F6 | 	mov	arg03, fp
08c30     01 00 00 FF 
08c34     10 4E 85 F1 | 	sub	fp, ##528
08c38     09 12 06 F6 | 	mov	arg01, #9
08c3c     01 14 06 F6 | 	mov	arg02, #1
08c40     01 18 06 F6 | 	mov	arg04, #1
08c44     04 1A 06 F6 | 	mov	arg05, #4
08c48     04 BB B0 FD | 	call	#__system___basic_put
08c4c     01 00 00 FF 
08c50     0C 4E 05 F1 | 	add	fp, ##524
08c54     A7 0A 68 FC | 	wrlong	#5, fp
08c58     41 00 00 FF 
08c5c     48 E4 05 F1 | 	add	objptr, ##33352
08c60     F2 1E 02 FB | 	rdlong	local01, objptr
08c64     41 00 00 FF 
08c68     48 E4 85 F1 | 	sub	objptr, ##33352
08c6c     0C 4E 05 F1 | 	add	fp, #12
08c70     A7 1E 62 FC | 	wrlong	local01, fp
08c74     01 00 00 FF 
08c78     18 4E 85 F1 | 	sub	fp, ##536
08c7c                 | '   i=5
08c7c                 | '   saveptr=programstart
08c7c                 | '   do
08c7c                 | LR__0771
08c7c     01 00 00 FF 
08c80     1C 4E 05 F1 | 	add	fp, ##540
08c84     A7 12 02 F6 | 	mov	arg01, fp
08c88     04 4E 85 F1 | 	sub	fp, #4
08c8c     A7 14 02 FB | 	rdlong	arg02, fp
08c90     01 00 00 FF 
08c94     18 4E 85 F1 | 	sub	fp, ##536
08c98     18 16 06 F6 | 	mov	arg03, #24
08c9c     0B 00 00 FF 
08ca0     C0 E4 05 F1 | 	add	objptr, ##5824
08ca4     EC A2 B0 FD | 	call	#_psram_spin2_read1
08ca8     01 00 00 FF 
08cac     34 4E 05 F1 | 	add	fp, ##564
08cb0     A7 12 02 F6 | 	mov	arg01, fp
08cb4     10 4E 85 F1 | 	sub	fp, #16
08cb8     A7 14 02 FB | 	rdlong	arg02, fp
08cbc     04 4E 05 F1 | 	add	fp, #4
08cc0     A7 16 02 FB | 	rdlong	arg03, fp
08cc4     01 00 00 FF 
08cc8     28 4E 85 F1 | 	sub	fp, ##552
08ccc     C4 A2 B0 FD | 	call	#_psram_spin2_read1
08cd0     0B 00 00 FF 
08cd4     C0 E4 85 F1 | 	sub	objptr, ##5824
08cd8                 | '     psram.read1(varptr(header(0)),saveptr,24)
08cd8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3))  
08cd8                 | '     put #9,i,header(3),1 : i+=4
08cd8     01 00 00 FF 
08cdc     0C 4E 05 F1 | 	add	fp, ##524
08ce0     A7 14 02 FB | 	rdlong	arg02, fp
08ce4     1C 4E 05 F1 | 	add	fp, #28
08ce8     A7 16 02 F6 | 	mov	arg03, fp
08cec     01 00 00 FF 
08cf0     28 4E 85 F1 | 	sub	fp, ##552
08cf4     09 12 06 F6 | 	mov	arg01, #9
08cf8     01 18 06 F6 | 	mov	arg04, #1
08cfc     04 1A 06 F6 | 	mov	arg05, #4
08d00     4C BA B0 FD | 	call	#__system___basic_put
08d04     01 00 00 FF 
08d08     0C 4E 05 F1 | 	add	fp, ##524
08d0c     A7 14 02 FB | 	rdlong	arg02, fp
08d10     04 14 06 F1 | 	add	arg02, #4
08d14     A7 14 62 FC | 	wrlong	arg02, fp
08d18                 | '     put #9,i,linebuf(0),header(3) : i+=header(3)
08d18     28 4E 05 F1 | 	add	fp, #40
08d1c     A7 16 02 F6 | 	mov	arg03, fp
08d20     0C 4E 85 F1 | 	sub	fp, #12
08d24     A7 18 02 FB | 	rdlong	arg04, fp
08d28     01 00 00 FF 
08d2c     28 4E 85 F1 | 	sub	fp, ##552
08d30     09 12 06 F6 | 	mov	arg01, #9
08d34     01 1A 06 F6 | 	mov	arg05, #1
08d38     14 BA B0 FD | 	call	#__system___basic_put
08d3c     01 00 00 FF 
08d40     28 4E 05 F1 | 	add	fp, ##552
08d44     A7 1A 02 FB | 	rdlong	arg05, fp
08d48     1C 4E 85 F1 | 	sub	fp, #28
08d4c     A7 1E 02 FB | 	rdlong	local01, fp
08d50     0D 1F 02 F1 | 	add	local01, arg05
08d54     A7 1E 62 FC | 	wrlong	local01, fp
08d58     24 4E 05 F1 | 	add	fp, #36
08d5c     A7 1E 02 FB | 	rdlong	local01, fp
08d60     18 4E 85 F1 | 	sub	fp, #24
08d64     A7 1E 62 FC | 	wrlong	local01, fp
08d68     18 4E 05 F1 | 	add	fp, #24
08d6c     A7 1E 02 FB | 	rdlong	local01, fp
08d70     01 00 00 FF 
08d74     30 4E 85 F1 | 	sub	fp, ##560
08d78     FF FF 3F FF 
08d7c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
08d80     F8 FE 9F 5D |  if_ne	jmp	#LR__0771
08d84                 | '   close #9  
08d84     09 12 06 F6 | 	mov	arg01, #9
08d88     4C F8 B0 FD | 	call	#__system__close
08d8c                 | LR__0772
08d8c                 | LR__0773
08d8c     A7 F0 03 F6 | 	mov	ptra, fp
08d90     B2 00 A0 FD | 	call	#popregs_
08d94                 | _do_save_ret
08d94     2D 00 64 FD | 	ret
08d98                 | 
08d98                 | ' 
08d98                 | ' '----------------- Load the program
08d98                 | ' 'lo todo: errors while loading
08d98                 | ' sub do_load
08d98                 | _do_load
08d98     01 4A 05 F6 | 	mov	COUNT_, #1
08d9c     A8 00 A0 FD | 	call	#pushregs_
08da0     A4 F0 07 F1 | 	add	ptra, #164
08da4     A0 4E 05 F1 | 	add	fp, #160
08da8     A7 12 02 F6 | 	mov	arg01, fp
08dac     80 4E 85 F1 | 	sub	fp, #128
08db0     A7 14 02 F6 | 	mov	arg02, fp
08db4     20 4E 85 F1 | 	sub	fp, #32
08db8     09 15 62 FC | 	wrlong	arg02, arg01
08dbc     60 F2 BF FD | 	call	#_pop
08dc0     FF 1E 02 F6 | 	mov	local01, result3
08dc4     A7 FA 61 FC | 	wrlong	result1, fp
08dc8     04 4E 05 F1 | 	add	fp, #4
08dcc     A7 FC 61 FC | 	wrlong	result2, fp
08dd0     04 4E 05 F1 | 	add	fp, #4
08dd4     A7 1E 62 FC | 	wrlong	local01, fp
08dd8                 | ' 
08dd8                 | ' lpoke varptr(line2$),varptr(line2)
08dd8                 | ' t1=pop() 
08dd8                 | ' if t1.result_type=result_string then
08dd8     08 4E 85 F1 | 	sub	fp, #8
08ddc     1F 1E 0E F2 | 	cmp	local01, #31 wz
08de0     64 02 90 5D |  if_ne	jmp	#LR__0784
08de4     3C 08 B0 FD | 	call	#_do_new
08de8                 | '   do_new
08de8                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
08de8     A7 12 02 FB | 	rdlong	arg01, fp
08dec     18 01 00 FF 
08df0     9E 14 06 F6 | 	mov	arg02, ##@LR__4205
08df4     B0 AC B0 FD | 	call	#__system___string_cmp
08df8     00 FA 0D F2 | 	cmp	result1, #0 wz
08dfc     18 01 00 AF 
08e00     9F 1E 06 A6 |  if_e	mov	local01, ##@LR__4206
08e04     A7 1E 62 AC |  if_e	wrlong	local01, fp
08e08                 | ' '   print currentdir$+"/"+t1.result.sresult
08e08                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
08e08     09 12 06 F6 | 	mov	arg01, #9
08e0c     C8 F7 B0 FD | 	call	#__system__close
08e10     09 1E 06 F6 | 	mov	local01, #9
08e14     49 00 00 FF 
08e18     58 E4 05 F1 | 	add	objptr, ##37464
08e1c     F2 12 02 FB | 	rdlong	arg01, objptr
08e20     49 00 00 FF 
08e24     58 E4 85 F1 | 	sub	objptr, ##37464
08e28     18 01 00 FF 
08e2c     AA 14 06 F6 | 	mov	arg02, ##@LR__4207
08e30     A8 AC B0 FD | 	call	#__system___string_concat
08e34     FD 12 02 F6 | 	mov	arg01, result1
08e38     A7 14 02 FB | 	rdlong	arg02, fp
08e3c     9C AC B0 FD | 	call	#__system___string_concat
08e40     FD 14 02 F6 | 	mov	arg02, result1
08e44     0F 13 02 F6 | 	mov	arg01, local01
08e48     00 16 06 F6 | 	mov	arg03, #0
08e4c     4C B7 B0 FD | 	call	#__system___basic_open_string
08e50     20 E8 05 F1 | 	add	ptr___system__dat__, #32
08e54     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
08e58     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
08e5c     10 4E 05 F1 | 	add	fp, #16
08e60     A7 FA 61 FC | 	wrlong	result1, fp
08e64                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
08e64     10 4E 85 F1 | 	sub	fp, #16
08e68     9C 00 90 AD |  if_e	jmp	#LR__0780
08e6c     00 12 06 F6 | 	mov	arg01, #0
08e70     F0 00 B1 FD | 	call	#__system___getiolock_0306
08e74     FD 12 02 F6 | 	mov	arg01, result1
08e78     04 AC B0 FD | 	call	#__system___lockmem
08e7c     18 01 00 FF 
08e80     AC 14 06 F6 | 	mov	arg02, ##@LR__4208
08e84     00 12 06 F6 | 	mov	arg01, #0
08e88     00 16 06 F6 | 	mov	arg03, #0
08e8c     FC B7 B0 FD | 	call	#__system___basic_print_string
08e90     10 4E 05 F1 | 	add	fp, #16
08e94     A7 14 02 FB | 	rdlong	arg02, fp
08e98     10 4E 85 F1 | 	sub	fp, #16
08e9c     00 12 06 F6 | 	mov	arg01, #0
08ea0     00 16 06 F6 | 	mov	arg03, #0
08ea4     0A 18 06 F6 | 	mov	arg04, #10
08ea8     24 B8 B0 FD | 	call	#__system___basic_print_integer
08eac     18 01 00 FF 
08eb0     BA 14 06 F6 | 	mov	arg02, ##@LR__4209
08eb4     00 12 06 F6 | 	mov	arg01, #0
08eb8     00 16 06 F6 | 	mov	arg03, #0
08ebc     CC B7 B0 FD | 	call	#__system___basic_print_string
08ec0     10 4E 05 F1 | 	add	fp, #16
08ec4     A7 12 02 FB | 	rdlong	arg01, fp
08ec8     10 4E 85 F1 | 	sub	fp, #16
08ecc     E8 D0 B0 FD | 	call	#__system___strerror
08ed0     FD 14 02 F6 | 	mov	arg02, result1
08ed4     00 12 06 F6 | 	mov	arg01, #0
08ed8     00 16 06 F6 | 	mov	arg03, #0
08edc     AC B7 B0 FD | 	call	#__system___basic_print_string
08ee0     00 12 06 F6 | 	mov	arg01, #0
08ee4     0A 14 06 F6 | 	mov	arg02, #10
08ee8     00 16 06 F6 | 	mov	arg03, #0
08eec     44 B7 B0 FD | 	call	#__system___basic_print_char
08ef0     00 12 06 F6 | 	mov	arg01, #0
08ef4     6C 00 B1 FD | 	call	#__system___getiolock_0306
08ef8     FD 00 68 FC | 	wrlong	#0, result1
08efc     09 12 06 F6 | 	mov	arg01, #9
08f00     D4 F6 B0 FD | 	call	#__system__close
08f04     48 01 90 FD | 	jmp	#LR__0786
08f08                 | LR__0780
08f08     0C 4E 05 F1 | 	add	fp, #12
08f0c     A7 0A 68 FC | 	wrlong	#5, fp
08f10                 | '   i=5
08f10                 | '   get #9,1,header,1
08f10     0C 4E 05 F1 | 	add	fp, #12
08f14     A7 16 02 F6 | 	mov	arg03, fp
08f18     18 4E 85 F1 | 	sub	fp, #24
08f1c     09 12 06 F6 | 	mov	arg01, #9
08f20     01 14 06 F6 | 	mov	arg02, #1
08f24     01 18 06 F6 | 	mov	arg04, #1
08f28     04 1A 06 F6 | 	mov	arg05, #4
08f2c     8C B8 B0 FD | 	call	#__system___basic_get
08f30                 | '   if header<>$0D616272 then printerror(26) : close #9 : return
08f30     18 4E 05 F1 | 	add	fp, #24
08f34     A7 1E 02 FB | 	rdlong	local01, fp
08f38     18 4E 85 F1 | 	sub	fp, #24
08f3c     B1 B0 06 FF 
08f40     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
08f44     14 00 90 AD |  if_e	jmp	#LR__0781
08f48     1A 12 06 F6 | 	mov	arg01, #26
08f4c     3C 76 B0 FD | 	call	#_printerror
08f50     09 12 06 F6 | 	mov	arg01, #9
08f54     80 F6 B0 FD | 	call	#__system__close
08f58     F4 00 90 FD | 	jmp	#LR__0786
08f5c                 | LR__0781
08f5c                 | '   do
08f5c                 | LR__0782
08f5c                 | '     get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
08f5c     0C 4E 05 F1 | 	add	fp, #12
08f60     A7 14 02 FB | 	rdlong	arg02, fp
08f64     10 4E 05 F1 | 	add	fp, #16
08f68     A7 16 02 F6 | 	mov	arg03, fp
08f6c     1C 4E 85 F1 | 	sub	fp, #28
08f70     09 12 06 F6 | 	mov	arg01, #9
08f74     01 18 06 F6 | 	mov	arg04, #1
08f78     04 1A 06 F6 | 	mov	arg05, #4
08f7c     3C B8 B0 FD | 	call	#__system___basic_get
08f80     14 4E 05 F1 | 	add	fp, #20
08f84     A7 FA 61 FC | 	wrlong	result1, fp
08f88     08 4E 85 F1 | 	sub	fp, #8
08f8c     A7 1E 02 FB | 	rdlong	local01, fp
08f90     04 1E 06 F1 | 	add	local01, #4
08f94     A7 1E 62 FC | 	wrlong	local01, fp
08f98     10 4E 05 F1 | 	add	fp, #16
08f9c     A7 1E 02 FB | 	rdlong	local01, fp
08fa0     04 4E 05 F1 | 	add	fp, #4
08fa4     A7 1E 02 F1 | 	add	local01, fp
08fa8     0F 01 48 FC | 	wrbyte	#0, local01
08fac                 | '    if amount=1 then  
08fac     0C 4E 85 F1 | 	sub	fp, #12
08fb0     A7 1E 02 FB | 	rdlong	local01, fp
08fb4     14 4E 85 F1 | 	sub	fp, #20
08fb8     01 1E 0E F2 | 	cmp	local01, #1 wz
08fbc     68 00 90 5D |  if_ne	jmp	#LR__0783
08fc0                 | '       get #9,i,line2(0),linelength : i+=linelength
08fc0     0C 4E 05 F1 | 	add	fp, #12
08fc4     A7 14 02 FB | 	rdlong	arg02, fp
08fc8     14 4E 05 F1 | 	add	fp, #20
08fcc     A7 16 02 F6 | 	mov	arg03, fp
08fd0     04 4E 85 F1 | 	sub	fp, #4
08fd4     A7 18 02 FB | 	rdlong	arg04, fp
08fd8     1C 4E 85 F1 | 	sub	fp, #28
08fdc     09 12 06 F6 | 	mov	arg01, #9
08fe0     01 1A 06 F6 | 	mov	arg05, #1
08fe4     D4 B7 B0 FD | 	call	#__system___basic_get
08fe8     0C 4E 05 F1 | 	add	fp, #12
08fec     A7 1E 02 FB | 	rdlong	local01, fp
08ff0     10 4E 05 F1 | 	add	fp, #16
08ff4     A7 1A 02 FB | 	rdlong	arg05, fp
08ff8     0D 1F 02 F1 | 	add	local01, arg05
08ffc     10 4E 85 F1 | 	sub	fp, #16
09000     A7 1E 62 FC | 	wrlong	local01, fp
09004     94 4E 05 F1 | 	add	fp, #148
09008     A7 1E 02 FB | 	rdlong	local01, fp
0900c     A0 4E 85 F1 | 	sub	fp, #160
09010     2D 00 00 FF 
09014     E0 E5 05 F1 | 	add	objptr, ##23520
09018     F2 1E 62 FC | 	wrlong	local01, objptr
0901c     2D 00 00 FF 
09020     E0 E5 85 F1 | 	sub	objptr, ##23520
09024     F4 79 BF FD | 	call	#_interpret
09028                 | LR__0783
09028     14 4E 05 F1 | 	add	fp, #20
0902c     A7 1E 02 FB | 	rdlong	local01, fp
09030     14 4E 85 F1 | 	sub	fp, #20
09034     01 1E 56 F2 | 	cmps	local01, #1 wc
09038     20 FF 9F 3D |  if_ae	jmp	#LR__0782
0903c                 | '   close #9  
0903c     09 12 06 F6 | 	mov	arg01, #9
09040     94 F5 B0 FD | 	call	#__system__close
09044     08 00 90 FD | 	jmp	#LR__0785
09048                 | LR__0784
09048     1E 12 06 F6 | 	mov	arg01, #30
0904c     3C 75 B0 FD | 	call	#_printerror
09050                 | LR__0785
09050                 | LR__0786
09050     A7 F0 03 F6 | 	mov	ptra, fp
09054     B2 00 A0 FD | 	call	#popregs_
09058                 | _do_load_ret
09058     2D 00 64 FD | 	ret
0905c                 | 
0905c                 | ' 
0905c                 | ' '----------------- Run the program 
0905c                 | ' 
0905c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0905c                 | ' 
0905c                 | ' sub do_run
0905c                 | _do_run
0905c     01 4A 05 F6 | 	mov	COUNT_, #1
09060     A8 00 A0 FD | 	call	#pushregs_
09064     41 00 00 FF 
09068     48 E4 05 F1 | 	add	objptr, ##33352
0906c     F2 1C 02 FB | 	rdlong	arg06, objptr
09070     0F 00 00 FF 
09074     2C E5 05 F1 | 	add	objptr, ##7980
09078     F2 1C 62 FC | 	wrlong	arg06, objptr
0907c     04 E4 05 F1 | 	add	objptr, #4
09080     F2 00 68 FC | 	wrlong	#0, objptr
09084     04 E4 05 F1 | 	add	objptr, #4
09088     FF FF FF FF 
0908c     F2 FE 6B FC | 	wrlong	##-1, objptr
09090                 | ' if inrun>0 then 
09090     04 E4 05 F1 | 	add	objptr, #4
09094     F2 1C 02 FB | 	rdlong	arg06, objptr
09098     50 00 00 FF 
0909c     80 E5 85 F1 | 	sub	objptr, ##41344
090a0     01 1C 16 F2 | 	cmp	arg06, #1 wc
090a4     30 00 90 CD |  if_b	jmp	#LR__0790
090a8     50 00 00 FF 
090ac     84 E5 05 F1 | 	add	objptr, ##41348
090b0     F2 12 02 F6 | 	mov	arg01, objptr
090b4     10 E4 85 F1 | 	sub	objptr, #16
090b8     F2 14 02 FB | 	rdlong	arg02, objptr
090bc     18 16 06 F6 | 	mov	arg03, #24
090c0     45 00 00 FF 
090c4     B4 E4 85 F1 | 	sub	objptr, ##35508
090c8     C8 9E B0 FD | 	call	#_psram_spin2_read1
090cc     0B 00 00 FF 
090d0     C0 E4 85 F1 | 	sub	objptr, ##5824
090d4                 | '   psram.read1(varptr(runheader),runptr,24)  
090d4                 | '   return
090d4     A4 02 90 FD | 	jmp	#LR__0796
090d8                 | LR__0790
090d8     50 00 00 FF 
090dc     80 E5 05 F1 | 	add	objptr, ##41344
090e0     F2 02 68 FC | 	wrlong	#1, objptr
090e4     04 E4 05 F1 | 	add	objptr, #4
090e8     F2 12 02 F6 | 	mov	arg01, objptr
090ec     10 E4 85 F1 | 	sub	objptr, #16
090f0     F2 14 02 FB | 	rdlong	arg02, objptr
090f4     18 16 06 F6 | 	mov	arg03, #24
090f8     45 00 00 FF 
090fc     B4 E4 85 F1 | 	sub	objptr, ##35508
09100     90 9E B0 FD | 	call	#_psram_spin2_read1
09104                 | ' inrun=1
09104                 | ' psram.read1(varptr(runheader),runptr,24) 
09104                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09104     45 00 00 FF 
09108     C4 E4 05 F1 | 	add	objptr, ##35524
0910c     F2 1E 02 FB | 	rdlong	local01, objptr
09110     50 00 00 FF 
09114     84 E5 85 F1 | 	sub	objptr, ##41348
09118     FF FF 7F FF 
0911c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09120     50 00 00 AF 
09124     80 E5 05 A1 |  if_e	add	objptr, ##41344
09128     F2 00 68 AC |  if_e	wrlong	#0, objptr
0912c     50 00 00 AF 
09130     80 E5 85 A1 |  if_e	sub	objptr, ##41344
09134     44 02 90 AD |  if_e	jmp	#LR__0796
09138                 | ' do 
09138                 | LR__0791
09138                 | '   if runptr<>oldrunptr then
09138     50 00 00 FF 
0913c     74 E5 05 F1 | 	add	objptr, ##41332
09140     F2 1E 02 FB | 	rdlong	local01, objptr
09144     08 E4 05 F1 | 	add	objptr, #8
09148     F2 1C 02 FB | 	rdlong	arg06, objptr
0914c     50 00 00 FF 
09150     7C E5 85 F1 | 	sub	objptr, ##41340
09154     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09158     CC 00 90 AD |  if_e	jmp	#LR__0792
0915c     50 00 00 FF 
09160     84 E5 05 F1 | 	add	objptr, ##41348
09164     F2 12 02 F6 | 	mov	arg01, objptr
09168     10 E4 85 F1 | 	sub	objptr, #16
0916c     F2 14 02 FB | 	rdlong	arg02, objptr
09170     18 16 06 F6 | 	mov	arg03, #24
09174     45 00 00 FF 
09178     B4 E4 85 F1 | 	sub	objptr, ##35508
0917c     14 9E B0 FD | 	call	#_psram_spin2_read1
09180     32 00 00 FF 
09184     80 E5 05 F1 | 	add	objptr, ##25984
09188     F2 12 02 F6 | 	mov	arg01, objptr
0918c     12 00 00 FF 
09190     34 E5 05 F1 | 	add	objptr, ##9524
09194     F2 14 02 FB | 	rdlong	arg02, objptr
09198     14 00 00 FF 
0919c     4C E5 85 F1 | 	sub	objptr, ##10572
091a0     F2 1E 02 FB | 	rdlong	local01, objptr
091a4     01 1E 66 F0 | 	shl	local01, #1
091a8     0F 15 02 F1 | 	add	arg02, local01
091ac     14 00 00 FF 
091b0     64 E5 05 F1 | 	add	objptr, ##10596
091b4     F2 16 02 FB | 	rdlong	arg03, objptr
091b8     18 E4 85 F1 | 	sub	objptr, #24
091bc     F2 1E 02 FB | 	rdlong	local01, objptr
091c0     0F 17 82 F1 | 	sub	arg03, local01
091c4     45 00 00 FF 
091c8     B4 E4 85 F1 | 	sub	objptr, ##35508
091cc     C4 9D B0 FD | 	call	#_psram_spin2_read1
091d0     45 00 00 FF 
091d4     CC E4 05 F1 | 	add	objptr, ##35532
091d8     F2 1E 02 FB | 	rdlong	local01, objptr
091dc     18 E4 85 F1 | 	sub	objptr, #24
091e0     F2 1C 02 FB | 	rdlong	arg06, objptr
091e4     0E 1F 82 F1 | 	sub	local01, arg06
091e8     14 00 00 FF 
091ec     4C E5 85 F1 | 	sub	objptr, ##10572
091f0     F2 1C 02 FB | 	rdlong	arg06, objptr
091f4     0E 1F 12 FD | 	qdiv	local01, arg06
091f8     05 00 00 FF 
091fc     18 E4 05 F1 | 	add	objptr, ##2584
09200     18 1E 62 FD | 	getqx	local01
09204     03 1E 86 F1 | 	sub	local01, #3
09208     F2 1E 62 FC | 	wrlong	local01, objptr
0920c     0F 00 00 FF 
09210     34 E5 05 F1 | 	add	objptr, ##7988
09214     F2 1E 02 FB | 	rdlong	local01, objptr
09218     08 E4 05 F1 | 	add	objptr, #8
0921c     F2 1E 62 FC | 	wrlong	local01, objptr
09220     50 00 00 FF 
09224     7C E5 85 F1 | 	sub	objptr, ##41340
09228                 | LR__0792
09228     50 00 00 FF 
0922c     98 E5 05 F1 | 	add	objptr, ##41368
09230     F2 1E 02 FB | 	rdlong	local01, objptr
09234     24 E4 85 F1 | 	sub	objptr, #36
09238     F2 1E 62 FC | 	wrlong	local01, objptr
0923c     04 E4 05 F1 | 	add	objptr, #4
09240     F2 12 02 FB | 	rdlong	arg01, objptr
09244     50 00 00 FF 
09248     78 E5 85 F1 | 	sub	objptr, ##41336
0924c     CC EC BF FD | 	call	#_execute_line
09250     50 00 00 FF 
09254     78 E5 05 F1 | 	add	objptr, ##41336
09258     F2 FA 61 FC | 	wrlong	result1, objptr
0925c     04 E4 85 F1 | 	sub	objptr, #4
09260     F2 1E 02 FB | 	rdlong	local01, objptr
09264     50 00 00 FF 
09268     74 E5 85 F1 | 	sub	objptr, ##41332
0926c     FF FF 3F FF 
09270     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09274     0C 00 90 AD |  if_e	jmp	#LR__0793
09278     A8 A0 B0 FD | 	call	#_usbnew_spin2_get_key
0927c     06 FB 0D F2 | 	cmp	result1, #262 wz
09280     B4 FE 9F 5D |  if_ne	jmp	#LR__0791
09284                 | LR__0793
09284                 | ' if runheader(5)<>$7FFF_FFFF then 
09284     50 00 00 FF 
09288     98 E5 05 F1 | 	add	objptr, ##41368
0928c     F2 1E 02 FB | 	rdlong	local01, objptr
09290     50 00 00 FF 
09294     98 E5 85 F1 | 	sub	objptr, ##41368
09298     FF FF 3F FF 
0929c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
092a0     C4 00 90 AD |  if_e	jmp	#LR__0795
092a4                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
092a4     50 00 00 FF 
092a8     A4 E5 05 F1 | 	add	objptr, ##41380
092ac     F2 1E 02 FB | 	rdlong	local01, objptr
092b0     50 00 00 FF 
092b4     A4 E5 85 F1 | 	sub	objptr, ##41380
092b8     01 1E 0E F2 | 	cmp	local01, #1 wz
092bc     44 00 90 5D |  if_ne	jmp	#LR__0794
092c0     01 00 00 FF 
092c4     00 EA 05 F1 | 	add	ptr__dat__, ##512
092c8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
092cc     01 00 00 FF 
092d0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
092d4     07 12 06 F6 | 	mov	arg01, #7
092d8     56 00 00 FF 
092dc     44 16 06 F6 | 	mov	arg03, ##44100
092e0     0E 18 C6 F9 | 	decod	arg04, #14
092e4     03 00 00 FF 
092e8     94 1A 06 F6 | 	mov	arg05, ##1684
092ec     01 1C 66 F6 | 	neg	arg06, #1
092f0     0B 00 00 FF 
092f4     C0 E4 05 F1 | 	add	objptr, ##5824
092f8     50 A3 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
092fc     0B 00 00 FF 
09300     C0 E4 85 F1 | 	sub	objptr, ##5824
09304                 | LR__0794
09304                 | '   print "Stopped at line ";runheader(0)
09304     00 12 06 F6 | 	mov	arg01, #0
09308     58 FC B0 FD | 	call	#__system___getiolock_0306
0930c     FD 12 02 F6 | 	mov	arg01, result1
09310     6C A7 B0 FD | 	call	#__system___lockmem
09314     18 01 00 FF 
09318     BD 14 06 F6 | 	mov	arg02, ##@LR__4210
0931c     00 12 06 F6 | 	mov	arg01, #0
09320     00 16 06 F6 | 	mov	arg03, #0
09324     64 B3 B0 FD | 	call	#__system___basic_print_string
09328     50 00 00 FF 
0932c     84 E5 05 F1 | 	add	objptr, ##41348
09330     F2 14 02 FB | 	rdlong	arg02, objptr
09334     50 00 00 FF 
09338     84 E5 85 F1 | 	sub	objptr, ##41348
0933c     00 12 06 F6 | 	mov	arg01, #0
09340     00 16 06 F6 | 	mov	arg03, #0
09344     0A 18 06 F6 | 	mov	arg04, #10
09348     C4 B3 B0 FD | 	call	#__system___basic_print_unsigned
0934c     00 12 06 F6 | 	mov	arg01, #0
09350     0A 14 06 F6 | 	mov	arg02, #10
09354     00 16 06 F6 | 	mov	arg03, #0
09358     D8 B2 B0 FD | 	call	#__system___basic_print_char
0935c     00 12 06 F6 | 	mov	arg01, #0
09360     00 FC B0 FD | 	call	#__system___getiolock_0306
09364     FD 00 68 FC | 	wrlong	#0, result1
09368                 | LR__0795
09368     50 00 00 FF 
0936c     80 E5 05 F1 | 	add	objptr, ##41344
09370     F2 00 68 FC | 	wrlong	#0, objptr
09374     50 00 00 FF 
09378     80 E5 85 F1 | 	sub	objptr, ##41344
0937c                 | LR__0796
0937c     A7 F0 03 F6 | 	mov	ptra, fp
09380     B2 00 A0 FD | 	call	#popregs_
09384                 | _do_run_ret
09384     2D 00 64 FD | 	ret
09388                 | 
09388                 | ' 
09388                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09388                 | ' 
09388                 | ' sub do_list
09388                 | _do_list
09388     02 4A 05 F6 | 	mov	COUNT_, #2
0938c     A8 00 A0 FD | 	call	#pushregs_
09390     B8 F0 07 F1 | 	add	ptra, #184
09394     04 4E 05 F1 | 	add	fp, #4
09398     A7 00 68 FC | 	wrlong	#0, fp
0939c     04 4E 05 F1 | 	add	fp, #4
093a0     FF FF BF FF 
093a4     A7 FE 6B FC | 	wrlong	##2147483647, fp
093a8     08 4E 85 F1 | 	sub	fp, #8
093ac     41 00 00 FF 
093b0     44 E4 05 F1 | 	add	objptr, ##33348
093b4     F2 1E 02 FB | 	rdlong	local01, objptr
093b8     0F 17 02 F6 | 	mov	arg03, local01
093bc     01 16 66 F0 | 	shl	arg03, #1
093c0     0F 17 02 F1 | 	add	arg03, local01
093c4     02 16 66 F0 | 	shl	arg03, #2
093c8     03 00 00 FF 
093cc     04 E4 85 F1 | 	sub	objptr, ##1540
093d0     F2 16 02 F1 | 	add	arg03, objptr
093d4     0B 17 02 FB | 	rdlong	arg03, arg03
093d8     A7 16 62 FC | 	wrlong	arg03, fp
093dc                 | ' 
093dc                 | ' startline=0 : endline=$7FFFFFFF
093dc                 | ' numpar=compiledline(lineptr_e).result.uresult
093dc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
093dc     01 16 0E F2 | 	cmp	arg03, #1 wz
093e0     3E 00 00 FF 
093e4     40 E4 85 F1 | 	sub	objptr, ##31808
093e8     3C 00 90 5D |  if_ne	jmp	#LR__0800
093ec     30 EC BF FD | 	call	#_pop
093f0     FF 1E 02 F6 | 	mov	local01, result3
093f4     0C 4E 05 F1 | 	add	fp, #12
093f8     A7 FA 61 FC | 	wrlong	result1, fp
093fc     04 4E 05 F1 | 	add	fp, #4
09400     A7 FC 61 FC | 	wrlong	result2, fp
09404     04 4E 05 F1 | 	add	fp, #4
09408     A7 1E 62 FC | 	wrlong	local01, fp
0940c     08 4E 85 F1 | 	sub	fp, #8
09410     A7 12 02 F6 | 	mov	arg01, fp
09414     0C 4E 85 F1 | 	sub	fp, #12
09418     D0 37 B0 FD | 	call	#_converttoint
0941c     04 4E 05 F1 | 	add	fp, #4
09420     A7 FA 61 FC | 	wrlong	result1, fp
09424     04 4E 85 F1 | 	sub	fp, #4
09428                 | LR__0800
09428                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
09428     A7 16 02 FB | 	rdlong	arg03, fp
0942c     02 16 0E F2 | 	cmp	arg03, #2 wz
09430     7C 00 90 5D |  if_ne	jmp	#LR__0801
09434     E8 EB BF FD | 	call	#_pop
09438     FF 1E 02 F6 | 	mov	local01, result3
0943c     0C 4E 05 F1 | 	add	fp, #12
09440     A7 FA 61 FC | 	wrlong	result1, fp
09444     04 4E 05 F1 | 	add	fp, #4
09448     A7 FC 61 FC | 	wrlong	result2, fp
0944c     04 4E 05 F1 | 	add	fp, #4
09450     A7 1E 62 FC | 	wrlong	local01, fp
09454     08 4E 85 F1 | 	sub	fp, #8
09458     A7 12 02 F6 | 	mov	arg01, fp
0945c     0C 4E 85 F1 | 	sub	fp, #12
09460     88 37 B0 FD | 	call	#_converttoint
09464     FD 1E 02 F6 | 	mov	local01, result1
09468     08 4E 05 F1 | 	add	fp, #8
0946c     A7 1E 62 FC | 	wrlong	local01, fp
09470     08 4E 85 F1 | 	sub	fp, #8
09474     A8 EB BF FD | 	call	#_pop
09478     FF 1E 02 F6 | 	mov	local01, result3
0947c     0C 4E 05 F1 | 	add	fp, #12
09480     A7 FA 61 FC | 	wrlong	result1, fp
09484     04 4E 05 F1 | 	add	fp, #4
09488     A7 FC 61 FC | 	wrlong	result2, fp
0948c     04 4E 05 F1 | 	add	fp, #4
09490     A7 1E 62 FC | 	wrlong	local01, fp
09494     08 4E 85 F1 | 	sub	fp, #8
09498     A7 12 02 F6 | 	mov	arg01, fp
0949c     0C 4E 85 F1 | 	sub	fp, #12
094a0     48 37 B0 FD | 	call	#_converttoint
094a4     04 4E 05 F1 | 	add	fp, #4
094a8     A7 FA 61 FC | 	wrlong	result1, fp
094ac     04 4E 85 F1 | 	sub	fp, #4
094b0                 | LR__0801
094b0                 | ' 
094b0                 | ' 
094b0                 | ' print
094b0     00 12 06 F6 | 	mov	arg01, #0
094b4     AC FA B0 FD | 	call	#__system___getiolock_0306
094b8     FD 12 02 F6 | 	mov	arg01, result1
094bc     C0 A5 B0 FD | 	call	#__system___lockmem
094c0     00 12 06 F6 | 	mov	arg01, #0
094c4     0A 14 06 F6 | 	mov	arg02, #10
094c8     00 16 06 F6 | 	mov	arg03, #0
094cc     64 B1 B0 FD | 	call	#__system___basic_print_char
094d0     00 12 06 F6 | 	mov	arg01, #0
094d4     8C FA B0 FD | 	call	#__system___getiolock_0306
094d8     FD 00 68 FC | 	wrlong	#0, result1
094dc     41 00 00 FF 
094e0     48 E4 05 F1 | 	add	objptr, ##33352
094e4     F2 20 02 FB | 	rdlong	local02, objptr
094e8     11 00 00 FF 
094ec     54 E4 05 F1 | 	add	objptr, ##8788
094f0     F2 20 62 FC | 	wrlong	local02, objptr
094f4     52 00 00 FF 
094f8     9C E4 85 F1 | 	sub	objptr, ##42140
094fc                 | ' do 
094fc                 | LR__0802
094fc     20 4E 05 F1 | 	add	fp, #32
09500     A7 12 02 F6 | 	mov	arg01, fp
09504     20 4E 85 F1 | 	sub	fp, #32
09508     52 00 00 FF 
0950c     9C E4 05 F1 | 	add	objptr, ##42140
09510     F2 14 02 FB | 	rdlong	arg02, objptr
09514     18 16 06 F6 | 	mov	arg03, #24
09518     46 00 00 FF 
0951c     DC E5 85 F1 | 	sub	objptr, ##36316
09520     70 9A B0 FD | 	call	#_psram_spin2_read1
09524     0B 00 00 FF 
09528     C0 E4 85 F1 | 	sub	objptr, ##5824
0952c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0952c                 | '   if header(0)<> $FFFFFFFF then
0952c     20 4E 05 F1 | 	add	fp, #32
09530     A7 20 02 FB | 	rdlong	local02, fp
09534     20 4E 85 F1 | 	sub	fp, #32
09538     FF FF 7F FF 
0953c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09540     A8 00 90 AD |  if_e	jmp	#LR__0804
09544     38 4E 05 F1 | 	add	fp, #56
09548     3F 16 06 F6 | 	mov	arg03, #63
0954c     28 16 62 FD | 	setq	arg03
09550     A7 00 68 FC | 	wrlong	#0, fp
09554     A7 12 02 F6 | 	mov	arg01, fp
09558     10 4E 85 F1 | 	sub	fp, #16
0955c     A7 14 02 FB | 	rdlong	arg02, fp
09560     04 4E 05 F1 | 	add	fp, #4
09564     A7 16 02 FB | 	rdlong	arg03, fp
09568     2C 4E 85 F1 | 	sub	fp, #44
0956c     0B 00 00 FF 
09570     C0 E4 05 F1 | 	add	objptr, ##5824
09574     1C 9A B0 FD | 	call	#_psram_spin2_read1
09578     0B 00 00 FF 
0957c     C0 E4 85 F1 | 	sub	objptr, ##5824
09580                 | '     longfill(linebuf,0,64)
09580                 | '     psram.read1(varptr(linebuf),header(2),header(3))
09580                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
09580     20 4E 05 F1 | 	add	fp, #32
09584     A7 20 02 FB | 	rdlong	local02, fp
09588     1C 4E 85 F1 | 	sub	fp, #28
0958c     A7 1E 02 FB | 	rdlong	local01, fp
09590     04 4E 85 F1 | 	sub	fp, #4
09594     0F 21 52 F2 | 	cmps	local02, local01 wc
09598     30 00 90 CD |  if_b	jmp	#LR__0803
0959c     20 4E 05 F1 | 	add	fp, #32
095a0     A7 20 02 FB | 	rdlong	local02, fp
095a4     18 4E 85 F1 | 	sub	fp, #24
095a8     A7 16 02 FB | 	rdlong	arg03, fp
095ac     08 4E 85 F1 | 	sub	fp, #8
095b0     0B 21 5A F2 | 	cmps	local02, arg03 wcz
095b4     14 00 90 1D |  if_a	jmp	#LR__0803
095b8     38 4E 05 F1 | 	add	fp, #56
095bc     A7 12 02 F6 | 	mov	arg01, fp
095c0     38 4E 85 F1 | 	sub	fp, #56
095c4                 | ' 
095c4                 | ' write(text)
095c4     94 94 B0 FD | 	call	#_hg010b_spin2_write
095c8                 | ' crlf
095c8     F0 95 B0 FD | 	call	#_hg010b_spin2_crlf
095cc                 | LR__0803
095cc     34 4E 05 F1 | 	add	fp, #52
095d0     A7 20 02 FB | 	rdlong	local02, fp
095d4     34 4E 85 F1 | 	sub	fp, #52
095d8     52 00 00 FF 
095dc     9C E4 05 F1 | 	add	objptr, ##42140
095e0     F2 20 62 FC | 	wrlong	local02, objptr
095e4     52 00 00 FF 
095e8     9C E4 85 F1 | 	sub	objptr, ##42140
095ec                 | LR__0804
095ec     34 4E 05 F1 | 	add	fp, #52
095f0     A7 20 02 FB | 	rdlong	local02, fp
095f4     34 4E 85 F1 | 	sub	fp, #52
095f8     FF FF 3F FF 
095fc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
09600     20 4E 05 51 |  if_ne	add	fp, #32
09604     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09608     20 4E 85 51 |  if_ne	sub	fp, #32
0960c     FF FF 7F 5F 
09610     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09614     E4 FE 9F 5D |  if_ne	jmp	#LR__0802
09618     A7 F0 03 F6 | 	mov	ptra, fp
0961c     B2 00 A0 FD | 	call	#popregs_
09620                 | _do_list_ret
09620     2D 00 64 FD | 	ret
09624                 | 
09624                 | ' 
09624                 | ' '---------------- Clear the program
09624                 | ' 
09624                 | ' sub do_new
09624                 | _do_new
09624     03 4A 05 F6 | 	mov	COUNT_, #3
09628     A8 00 A0 FD | 	call	#pushregs_
0962c     00 12 06 F6 | 	mov	arg01, #0
09630     01 14 66 F6 | 	neg	arg02, #1
09634     01 16 06 F6 | 	mov	arg03, #1
09638     00 18 06 F6 | 	mov	arg04, #0
0963c     0B 00 00 FF 
09640     C0 E4 05 F1 | 	add	objptr, ##5824
09644                 | '     return fill(addr, pattern, count, listPtr, 4)
09644     04 1A 06 F6 | 	mov	arg05, #4
09648     80 9A B0 FD | 	call	#_psram_spin2_fill
0964c     20 00 00 FF 
09650     0C E5 05 F1 | 	add	objptr, ##16652
09654     F2 00 68 FC | 	wrlong	#0, objptr
09658     15 00 00 FF 
0965c     7C E4 05 F1 | 	add	objptr, ##10876
09660     F2 00 68 FC | 	wrlong	#0, objptr
09664     0F 00 00 FF 
09668     2C E5 05 F1 | 	add	objptr, ##7980
0966c     F2 00 68 FC | 	wrlong	#0, objptr
09670     04 E4 05 F1 | 	add	objptr, #4
09674     F2 00 68 FC | 	wrlong	#0, objptr
09678     16 00 00 FF 
0967c     5C E5 85 F1 | 	sub	objptr, ##11612
09680     F2 00 68 FC | 	wrlong	#0, objptr
09684     07 00 00 FF 
09688     24 E4 05 F1 | 	add	objptr, ##3620
0968c     F2 00 68 FC | 	wrlong	#0, objptr
09690     07 00 00 FF 
09694     20 E4 85 F1 | 	sub	objptr, ##3616
09698     F2 00 68 FC | 	wrlong	#0, objptr
0969c     0F 00 00 FF 
096a0     34 E4 05 F1 | 	add	objptr, ##7732
096a4     F2 00 68 FC | 	wrlong	#0, objptr
096a8     08 00 00 FF 
096ac     08 E4 85 F1 | 	sub	objptr, ##4104
096b0     F2 00 68 FC | 	wrlong	#0, objptr
096b4     04 E4 05 F1 | 	add	objptr, #4
096b8     FF FF FF FF 
096bc     F2 FE 6B FC | 	wrlong	##-1, objptr
096c0     0F 00 00 FF 
096c4     4C E5 05 F1 | 	add	objptr, ##8012
096c8     F2 00 68 FC | 	wrlong	#0, objptr
096cc                 | ' 
096cc                 | ' pslpoke(0,$FFFFFFFF)
096cc                 | ' varnum=0
096cc                 | ' programstart=0 :runptr=0 : runptr2=0
096cc                 | ' stackpointer=0
096cc                 | ' lineptr=0 
096cc                 | ' programptr=0 : stringptr=0
096cc                 | ' lastline=0 : lastlineptr=-1 :fortop=0
096cc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
096cc     00 1E 06 F6 | 	mov	local01, #0
096d0     07 00 00 FF 
096d4     40 E5 85 F1 | 	sub	objptr, ##3904
096d8     97 16 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
096dc                 | LR__0810
096dc     0F 21 02 F6 | 	mov	local02, local01
096e0     02 20 66 F0 | 	shl	local02, #2
096e4     0F 21 02 F1 | 	add	local02, local01
096e8     02 20 66 F0 | 	shl	local02, #2
096ec     F2 20 02 F1 | 	add	local02, objptr
096f0     08 20 06 F1 | 	add	local02, #8
096f4     FF FF FF FF 
096f8     10 FF 6B FC | 	wrlong	##-1, local02
096fc     01 1E 06 F1 | 	add	local01, #1
09700     81 1E 56 F2 | 	cmps	local01, #129 wc
09704     D4 FF 9F CD |  if_b	jmp	#LR__0810
09708                 | LR__0811
09708     49 00 00 FF 
0970c     5C E4 85 F1 | 	sub	objptr, ##37468
09710                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
09710     00 1E 06 F6 | 	mov	local01, #0
09714                 | LR__0812
09714     0F 21 02 F6 | 	mov	local02, local01
09718     02 20 66 F0 | 	shl	local02, #2
0971c     51 00 00 FF 
09720     F8 E5 05 F1 | 	add	objptr, ##41976
09724     F2 20 02 F1 | 	add	local02, objptr
09728     10 21 0A FB | 	rdlong	local02, local02 wz
0972c     51 00 00 FF 
09730     F8 E5 85 F1 | 	sub	objptr, ##41976
09734     34 00 90 AD |  if_e	jmp	#LR__0813
09738     0F 13 02 F6 | 	mov	arg01, local01
0973c     00 14 06 F6 | 	mov	arg02, #0
09740     00 16 06 F6 | 	mov	arg03, #0
09744     94 83 B0 FD | 	call	#_hg010b_spin2_setspritesize
09748     0F 21 02 F6 | 	mov	local02, local01
0974c     02 20 66 F0 | 	shl	local02, #2
09750     51 00 00 FF 
09754     F8 E5 05 F1 | 	add	objptr, ##41976
09758     F2 20 02 F1 | 	add	local02, objptr
0975c     10 13 02 FB | 	rdlong	arg01, local02
09760     51 00 00 FF 
09764     F8 E5 85 F1 | 	sub	objptr, ##41976
09768     F0 DD B0 FD | 	call	#__system___gc_free
0976c                 | LR__0813
0976c     F2 22 02 FB | 	rdlong	local03, objptr
09770     52 00 00 FF 
09774     3C E4 05 F1 | 	add	objptr, ##42044
09778     F2 22 62 FC | 	wrlong	local03, objptr
0977c     52 00 00 FF 
09780     3C E4 85 F1 | 	sub	objptr, ##42044
09784     11 12 06 F6 | 	mov	arg01, #17
09788     08 14 06 F6 | 	mov	arg02, #8
0978c     10 16 06 F6 | 	mov	arg03, #16
09790     48 83 B0 FD | 	call	#_hg010b_spin2_setspritesize
09794     01 1E 06 F1 | 	add	local01, #1
09798     10 1E 56 F2 | 	cmps	local01, #16 wc
0979c     74 FF 9F CD |  if_b	jmp	#LR__0812
097a0     A7 F0 03 F6 | 	mov	ptra, fp
097a4     B2 00 A0 FD | 	call	#popregs_
097a8                 | _do_new_ret
097a8     2D 00 64 FD | 	ret
097ac                 | 
097ac                 | ' 
097ac                 | ' '----------------------- goto
097ac                 | ' sub do_fast_goto
097ac                 | _do_fast_goto
097ac     02 4A 05 F6 | 	mov	COUNT_, #2
097b0     A8 00 A0 FD | 	call	#pushregs_
097b4                 | _do_fast_goto_enter
097b4     41 00 00 FF 
097b8     44 E4 05 F1 | 	add	objptr, ##33348
097bc     F2 12 02 FB | 	rdlong	arg01, objptr
097c0     09 1F 02 F6 | 	mov	local01, arg01
097c4     01 1E 66 F0 | 	shl	local01, #1
097c8     09 1F 02 F1 | 	add	local01, arg01
097cc     02 1E 66 F0 | 	shl	local01, #2
097d0     03 00 00 FF 
097d4     04 E4 85 F1 | 	sub	objptr, ##1540
097d8     F2 1E 02 F1 | 	add	local01, objptr
097dc     0F 21 02 FB | 	rdlong	local02, local01
097e0     10 13 02 F6 | 	mov	arg01, local02
097e4     3E 00 00 FF 
097e8     40 E4 85 F1 | 	sub	objptr, ##31808
097ec     58 6F B0 FD | 	call	#_pslpeek
097f0     FD 12 02 F6 | 	mov	arg01, result1
097f4                 | ' 
097f4                 | ' testptr=compiledline(lineptr_e).result.uresult
097f4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
097f4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
097f4     41 00 00 FF 
097f8     44 E4 05 F1 | 	add	objptr, ##33348
097fc     F2 FA 01 FB | 	rdlong	result1, objptr
09800     FD 1E 02 F6 | 	mov	local01, result1
09804     01 1E 66 F0 | 	shl	local01, #1
09808     FD 1E 02 F1 | 	add	local01, result1
0980c     02 1E 66 F0 | 	shl	local01, #2
09810     03 00 00 FF 
09814     04 E4 85 F1 | 	sub	objptr, ##1540
09818     F2 1E 02 F1 | 	add	local01, objptr
0981c     04 1E 06 F1 | 	add	local01, #4
09820     0F 1F 02 FB | 	rdlong	local01, local01
09824     0F 13 0A F2 | 	cmp	arg01, local01 wz
09828     3E 00 00 FF 
0982c     40 E4 85 F1 | 	sub	objptr, ##31808
09830     58 00 90 5D |  if_ne	jmp	#LR__0820
09834     50 00 00 FF 
09838     74 E5 05 F1 | 	add	objptr, ##41332
0983c     F2 20 62 FC | 	wrlong	local02, objptr
09840     0F 00 00 FF 
09844     34 E5 85 F1 | 	sub	objptr, ##7988
09848     F2 20 02 FB | 	rdlong	local02, objptr
0984c     01 20 86 F1 | 	sub	local02, #1
09850     04 E4 05 F1 | 	add	objptr, #4
09854     F2 20 62 FC | 	wrlong	local02, objptr
09858                 | '   runptr=testptr
09858                 | '   lineptr_e=lineptr-1
09858                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
09858     0F 00 00 FF 
0985c     54 E5 05 F1 | 	add	objptr, ##8020
09860     F2 20 02 FB | 	rdlong	local02, objptr
09864     50 00 00 FF 
09868     98 E5 85 F1 | 	sub	objptr, ##41368
0986c     FF FF 3F FF 
09870     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
09874     50 00 00 AF 
09878     98 E5 05 A1 |  if_e	add	objptr, ##41368
0987c     F2 00 68 AC |  if_e	wrlong	#0, objptr
09880     50 00 00 AF 
09884     98 E5 85 A1 |  if_e	sub	objptr, ##41368
09888     04 00 90 FD | 	jmp	#LR__0821
0988c                 | LR__0820
0988c     0C 00 B0 FD | 	call	#_do_find_goto
09890                 | LR__0821
09890     A7 F0 03 F6 | 	mov	ptra, fp
09894     B2 00 A0 FD | 	call	#popregs_
09898                 | _do_fast_goto_ret
09898     2D 00 64 FD | 	ret
0989c                 | 
0989c                 | ' 
0989c                 | ' 
0989c                 | ' 
0989c                 | ' 
0989c                 | ' sub do_find_goto
0989c                 | _do_find_goto
0989c     03 4A 05 F6 | 	mov	COUNT_, #3
098a0     A8 00 A0 FD | 	call	#pushregs_
098a4     24 F0 07 F1 | 	add	ptra, #36
098a8                 | _do_find_goto_enter
098a8     41 00 00 FF 
098ac     44 E4 05 F1 | 	add	objptr, ##33348
098b0     F2 1E 02 FB | 	rdlong	local01, objptr
098b4     0F 21 02 F6 | 	mov	local02, local01
098b8     01 20 66 F0 | 	shl	local02, #1
098bc     0F 21 02 F1 | 	add	local02, local01
098c0     02 20 66 F0 | 	shl	local02, #2
098c4     03 00 00 FF 
098c8     04 E4 85 F1 | 	sub	objptr, ##1540
098cc     F2 20 02 F1 | 	add	local02, objptr
098d0     04 20 06 F1 | 	add	local02, #4
098d4     10 21 02 FB | 	rdlong	local02, local02
098d8     A7 20 62 FC | 	wrlong	local02, fp
098dc     03 00 00 FF 
098e0     08 E4 05 F1 | 	add	objptr, ##1544
098e4     F2 22 02 FB | 	rdlong	local03, objptr
098e8     41 00 00 FF 
098ec     48 E4 85 F1 | 	sub	objptr, ##33352
098f0     04 4E 05 F1 | 	add	fp, #4
098f4     A7 22 62 FC | 	wrlong	local03, fp
098f8     04 4E 85 F1 | 	sub	fp, #4
098fc                 | ' 
098fc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
098fc                 | '  ' print "find goto"                                                                     'print gotoline 
098fc                 | ' gotoptr=programstart
098fc                 | ' do
098fc                 | LR__0830
098fc     0C 4E 05 F1 | 	add	fp, #12
09900     A7 12 02 F6 | 	mov	arg01, fp
09904     08 4E 85 F1 | 	sub	fp, #8
09908     A7 14 02 FB | 	rdlong	arg02, fp
0990c     04 4E 85 F1 | 	sub	fp, #4
09910     18 16 06 F6 | 	mov	arg03, #24
09914     0B 00 00 FF 
09918     C0 E4 05 F1 | 	add	objptr, ##5824
0991c     74 96 B0 FD | 	call	#_psram_spin2_read1
09920     0B 00 00 FF 
09924     C0 E4 85 F1 | 	sub	objptr, ##5824
09928                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
09928                 | '   if gotoheader(0)<>$FFFFFFFF then
09928     0C 4E 05 F1 | 	add	fp, #12
0992c     A7 22 02 FB | 	rdlong	local03, fp
09930     0C 4E 85 F1 | 	sub	fp, #12
09934     FF FF 7F FF 
09938     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0993c     24 00 90 AD |  if_e	jmp	#LR__0831
09940     04 4E 05 F1 | 	add	fp, #4
09944     A7 22 02 FB | 	rdlong	local03, fp
09948     04 4E 05 F1 | 	add	fp, #4
0994c     A7 22 62 FC | 	wrlong	local03, fp
09950     18 4E 05 F1 | 	add	fp, #24
09954     A7 22 02 FB | 	rdlong	local03, fp
09958     1C 4E 85 F1 | 	sub	fp, #28
0995c     A7 22 62 FC | 	wrlong	local03, fp
09960     04 4E 85 F1 | 	sub	fp, #4
09964                 | LR__0831
09964     20 4E 05 F1 | 	add	fp, #32
09968     A7 22 02 FB | 	rdlong	local03, fp
0996c     20 4E 85 F1 | 	sub	fp, #32
09970     FF FF 3F FF 
09974     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09978     0C 4E 05 51 |  if_ne	add	fp, #12
0997c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09980     0C 4E 85 51 |  if_ne	sub	fp, #12
09984     FF FF 7F 5F 
09988     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0998c     18 00 90 AD |  if_e	jmp	#LR__0832
09990     0C 4E 05 F1 | 	add	fp, #12
09994     A7 22 02 FB | 	rdlong	local03, fp
09998     0C 4E 85 F1 | 	sub	fp, #12
0999c     A7 20 02 FB | 	rdlong	local02, fp
099a0     10 23 0A F2 | 	cmp	local03, local02 wz
099a4     54 FF 9F 5D |  if_ne	jmp	#LR__0830
099a8                 | LR__0832
099a8                 | ' 
099a8                 | ' if gotoheader(0)=gotoline then
099a8     0C 4E 05 F1 | 	add	fp, #12
099ac     A7 22 02 FB | 	rdlong	local03, fp
099b0     0C 4E 85 F1 | 	sub	fp, #12
099b4     A7 1E 02 FB | 	rdlong	local01, fp
099b8     0F 23 0A F2 | 	cmp	local03, local01 wz
099bc     D8 00 90 5D |  if_ne	jmp	#LR__0833
099c0     41 00 00 FF 
099c4     44 E4 05 F1 | 	add	objptr, ##33348
099c8     F2 1E 02 FB | 	rdlong	local01, objptr
099cc     0F 21 02 F6 | 	mov	local02, local01
099d0     01 20 66 F0 | 	shl	local02, #1
099d4     0F 21 02 F1 | 	add	local02, local01
099d8     02 20 66 F0 | 	shl	local02, #2
099dc     03 00 00 FF 
099e0     04 E4 85 F1 | 	sub	objptr, ##1540
099e4     F2 20 02 F1 | 	add	local02, objptr
099e8     08 4E 05 F1 | 	add	fp, #8
099ec     A7 22 02 FB | 	rdlong	local03, fp
099f0     10 23 62 FC | 	wrlong	local03, local02
099f4     03 00 00 FF 
099f8     04 E4 05 F1 | 	add	objptr, ##1540
099fc     F2 1E 02 FB | 	rdlong	local01, objptr
09a00     0F 21 02 F6 | 	mov	local02, local01
09a04     01 20 66 F0 | 	shl	local02, #1
09a08     0F 21 02 F1 | 	add	local02, local01
09a0c     02 20 66 F0 | 	shl	local02, #2
09a10     03 00 00 FF 
09a14     04 E4 85 F1 | 	sub	objptr, ##1540
09a18     F2 20 02 F1 | 	add	local02, objptr
09a1c     08 20 06 F1 | 	add	local02, #8
09a20     10 9D 68 FC | 	wrlong	#78, local02
09a24     03 00 00 FF 
09a28     04 E4 05 F1 | 	add	objptr, ##1540
09a2c     F2 20 02 FB | 	rdlong	local02, objptr
09a30     10 13 02 F6 | 	mov	arg01, local02
09a34     01 12 66 F0 | 	shl	arg01, #1
09a38     10 13 02 F1 | 	add	arg01, local02
09a3c     02 12 66 F0 | 	shl	arg01, #2
09a40     03 00 00 FF 
09a44     04 E4 85 F1 | 	sub	objptr, ##1540
09a48     F2 12 02 F1 | 	add	arg01, objptr
09a4c     12 00 00 FF 
09a50     3C E5 05 F1 | 	add	objptr, ##9532
09a54     F2 14 02 FB | 	rdlong	arg02, objptr
09a58     02 22 06 F6 | 	mov	local03, #2
09a5c     10 23 02 F1 | 	add	local03, local02
09a60     14 00 00 FF 
09a64     54 E5 85 F1 | 	sub	objptr, ##10580
09a68     F2 16 02 FB | 	rdlong	arg03, objptr
09a6c     0B 23 02 FD | 	qmul	local03, arg03
09a70     08 4E 85 F1 | 	sub	fp, #8
09a74     30 00 00 FF 
09a78     68 E5 85 F1 | 	sub	objptr, ##24936
09a7c     18 22 62 FD | 	getqx	local03
09a80     11 15 02 F1 | 	add	arg02, local03
09a84     A8 95 B0 FD | 	call	#_psram_spin2_write
09a88     0B 00 00 FF 
09a8c     C0 E4 85 F1 | 	sub	objptr, ##5824
09a90     18 FD BF FD | 	call	#_do_fast_goto
09a94     08 00 90 FD | 	jmp	#LR__0834
09a98                 | LR__0833
09a98     26 12 06 F6 | 	mov	arg01, #38
09a9c     EC 6A B0 FD | 	call	#_printerror
09aa0                 | LR__0834
09aa0     A7 F0 03 F6 | 	mov	ptra, fp
09aa4     B2 00 A0 FD | 	call	#popregs_
09aa8                 | _do_find_goto_ret
09aa8     2D 00 64 FD | 	ret
09aac                 | 
09aac                 | ' 
09aac                 | ' sub do_slow_goto
09aac                 | _do_slow_goto
09aac                 | _do_slow_goto_ret
09aac     2D 00 64 FD | 	ret
09ab0                 | 
09ab0                 | ' 
09ab0                 | ' '----------------------- Error processing
09ab0                 | ' 
09ab0                 | ' sub do_error
09ab0                 | _do_error
09ab0     01 4A 05 F6 | 	mov	COUNT_, #1
09ab4     A8 00 A0 FD | 	call	#pushregs_
09ab8     41 00 00 FF 
09abc     44 E4 05 F1 | 	add	objptr, ##33348
09ac0     F2 18 02 FB | 	rdlong	arg04, objptr
09ac4     0C 17 02 F6 | 	mov	arg03, arg04
09ac8     01 16 66 F0 | 	shl	arg03, #1
09acc     0C 17 02 F1 | 	add	arg03, arg04
09ad0     02 16 66 F0 | 	shl	arg03, #2
09ad4     03 00 00 FF 
09ad8     04 E4 85 F1 | 	sub	objptr, ##1540
09adc     F2 16 02 F1 | 	add	arg03, objptr
09ae0     0B 1F 02 FB | 	rdlong	local01, arg03
09ae4                 | ' r=compiledline(lineptr_e).result.uresult
09ae4                 | ' print "Error ";r;": ";errors$(r)
09ae4     00 12 06 F6 | 	mov	arg01, #0
09ae8     3E 00 00 FF 
09aec     40 E4 85 F1 | 	sub	objptr, ##31808
09af0     70 F4 B0 FD | 	call	#__system___getiolock_0306
09af4     FD 12 02 F6 | 	mov	arg01, result1
09af8     84 9F B0 FD | 	call	#__system___lockmem
09afc     18 01 00 FF 
09b00     CE 14 06 F6 | 	mov	arg02, ##@LR__4211
09b04     00 12 06 F6 | 	mov	arg01, #0
09b08     00 16 06 F6 | 	mov	arg03, #0
09b0c     7C AB B0 FD | 	call	#__system___basic_print_string
09b10     00 12 06 F6 | 	mov	arg01, #0
09b14     0F 15 02 F6 | 	mov	arg02, local01
09b18     00 16 06 F6 | 	mov	arg03, #0
09b1c     0A 18 06 F6 | 	mov	arg04, #10
09b20     EC AB B0 FD | 	call	#__system___basic_print_unsigned
09b24     18 01 00 FF 
09b28     D5 14 06 F6 | 	mov	arg02, ##@LR__4212
09b2c     00 12 06 F6 | 	mov	arg01, #0
09b30     00 16 06 F6 | 	mov	arg03, #0
09b34     54 AB B0 FD | 	call	#__system___basic_print_string
09b38     02 1E 66 F0 | 	shl	local01, #2
09b3c     3C 00 00 FF 
09b40     40 E4 05 F1 | 	add	objptr, ##30784
09b44     F2 1E 02 F1 | 	add	local01, objptr
09b48     0F 15 02 FB | 	rdlong	arg02, local01
09b4c     00 12 06 F6 | 	mov	arg01, #0
09b50     00 16 06 F6 | 	mov	arg03, #0
09b54     3C 00 00 FF 
09b58     40 E4 85 F1 | 	sub	objptr, ##30784
09b5c     2C AB B0 FD | 	call	#__system___basic_print_string
09b60     00 12 06 F6 | 	mov	arg01, #0
09b64     0A 14 06 F6 | 	mov	arg02, #10
09b68     00 16 06 F6 | 	mov	arg03, #0
09b6c     C4 AA B0 FD | 	call	#__system___basic_print_char
09b70     00 12 06 F6 | 	mov	arg01, #0
09b74     EC F3 B0 FD | 	call	#__system___getiolock_0306
09b78     FD 00 68 FC | 	wrlong	#0, result1
09b7c     A7 F0 03 F6 | 	mov	ptra, fp
09b80     B2 00 A0 FD | 	call	#popregs_
09b84                 | _do_error_ret
09b84     2D 00 64 FD | 	ret
09b88                 | 
09b88                 | ' 
09b88                 | ' 
09b88                 | ' '------------------ Assigning to a variable  
09b88                 | ' 
09b88                 | ' 
09b88                 | ' sub do_assign
09b88                 | _do_assign
09b88     05 4A 05 F6 | 	mov	COUNT_, #5
09b8c     A8 00 A0 FD | 	call	#pushregs_
09b90     41 00 00 FF 
09b94     44 E4 05 F1 | 	add	objptr, ##33348
09b98     F2 24 02 FB | 	rdlong	local04, objptr
09b9c     12 27 02 F6 | 	mov	local05, local04
09ba0     01 26 66 F0 | 	shl	local05, #1
09ba4     12 27 02 F1 | 	add	local05, local04
09ba8     02 26 66 F0 | 	shl	local05, #2
09bac     03 00 00 FF 
09bb0     04 E4 85 F1 | 	sub	objptr, ##1540
09bb4     F2 26 02 F1 | 	add	local05, objptr
09bb8     13 27 02 FB | 	rdlong	local05, local05
09bbc     3E 00 00 FF 
09bc0     40 E4 85 F1 | 	sub	objptr, ##31808
09bc4     58 E4 BF FD | 	call	#_pop
09bc8     FD 1E 02 F6 | 	mov	local01, result1
09bcc     FE 20 02 F6 | 	mov	local02, result2
09bd0     FF 22 02 F6 | 	mov	local03, result3
09bd4     10 FD 01 F6 | 	mov	result2, local02
09bd8     13 25 02 F6 | 	mov	local04, local05
09bdc     04 24 66 F0 | 	shl	local04, #4
09be0     0B 00 00 FF 
09be4     CC E5 05 F1 | 	add	objptr, ##6092
09be8     F2 24 02 F1 | 	add	local04, objptr
09bec     04 24 06 F1 | 	add	local04, #4
09bf0     12 1F 62 FC | 	wrlong	local01, local04
09bf4     13 25 02 F6 | 	mov	local04, local05
09bf8     04 24 66 F0 | 	shl	local04, #4
09bfc     F2 24 02 F1 | 	add	local04, objptr
09c00     08 24 06 F1 | 	add	local04, #8
09c04     12 FD 61 FC | 	wrlong	result2, local04
09c08     13 FF 01 F6 | 	mov	result3, local05
09c0c     04 FE 65 F0 | 	shl	result3, #4
09c10     F2 FE 01 F1 | 	add	result3, objptr
09c14     0C FE 05 F1 | 	add	result3, #12
09c18     FF 22 62 FC | 	wrlong	local03, result3
09c1c     0B 00 00 FF 
09c20     CC E5 85 F1 | 	sub	objptr, ##6092
09c24     A7 F0 03 F6 | 	mov	ptra, fp
09c28     B2 00 A0 FD | 	call	#popregs_
09c2c                 | _do_assign_ret
09c2c     2D 00 64 FD | 	ret
09c30                 | 
09c30                 | ' 
09c30                 | ' 
09c30                 | ' ' --------------------- Read a variable and push to the stack
09c30                 | ' 
09c30                 | ' sub do_getvar
09c30                 | _do_getvar
09c30     01 4A 05 F6 | 	mov	COUNT_, #1
09c34     A8 00 A0 FD | 	call	#pushregs_
09c38     0C F0 07 F1 | 	add	ptra, #12
09c3c     41 00 00 FF 
09c40     44 E4 05 F1 | 	add	objptr, ##33348
09c44     F2 12 02 FB | 	rdlong	arg01, objptr
09c48     09 1F 02 F6 | 	mov	local01, arg01
09c4c     01 1E 66 F0 | 	shl	local01, #1
09c50     09 1F 02 F1 | 	add	local01, arg01
09c54     02 1E 66 F0 | 	shl	local01, #2
09c58     03 00 00 FF 
09c5c     04 E4 85 F1 | 	sub	objptr, ##1540
09c60     F2 1E 02 F1 | 	add	local01, objptr
09c64     0F 1F 02 FB | 	rdlong	local01, local01
09c68     04 1E 66 F0 | 	shl	local01, #4
09c6c     32 00 00 FF 
09c70     74 E4 85 F1 | 	sub	objptr, ##25716
09c74     F2 1E 02 F1 | 	add	local01, objptr
09c78     04 1E 06 F1 | 	add	local01, #4
09c7c     0F 13 02 FB | 	rdlong	arg01, local01
09c80     04 1E 06 F1 | 	add	local01, #4
09c84     0F 1F 02 FB | 	rdlong	local01, local01
09c88     A7 12 62 FC | 	wrlong	arg01, fp
09c8c     04 4E 05 F1 | 	add	fp, #4
09c90     A7 1E 62 FC | 	wrlong	local01, fp
09c94     35 00 00 FF 
09c98     78 E4 05 F1 | 	add	objptr, ##27256
09c9c     F2 1E 02 FB | 	rdlong	local01, objptr
09ca0     0F 13 02 F6 | 	mov	arg01, local01
09ca4     01 12 66 F0 | 	shl	arg01, #1
09ca8     0F 13 02 F1 | 	add	arg01, local01
09cac     02 12 66 F0 | 	shl	arg01, #2
09cb0     03 00 00 FF 
09cb4     04 E4 85 F1 | 	sub	objptr, ##1540
09cb8     F2 12 02 F1 | 	add	arg01, objptr
09cbc     09 1F 02 FB | 	rdlong	local01, arg01
09cc0     04 1E 66 F0 | 	shl	local01, #4
09cc4     32 00 00 FF 
09cc8     74 E4 85 F1 | 	sub	objptr, ##25716
09ccc     F2 1E 02 F1 | 	add	local01, objptr
09cd0     0C 1E 06 F1 | 	add	local01, #12
09cd4     0F 1F 02 FB | 	rdlong	local01, local01
09cd8     04 4E 05 F1 | 	add	fp, #4
09cdc     A7 1E 62 FC | 	wrlong	local01, fp
09ce0     08 4E 85 F1 | 	sub	fp, #8
09ce4     A7 12 02 F6 | 	mov	arg01, fp
09ce8     0B 00 00 FF 
09cec     CC E5 85 F1 | 	sub	objptr, ##6092
09cf0     C4 E3 BF FD | 	call	#_push
09cf4     A7 F0 03 F6 | 	mov	ptra, fp
09cf8     B2 00 A0 FD | 	call	#popregs_
09cfc                 | _do_getvar_ret
09cfc     2D 00 64 FD | 	ret
09d00                 | 
09d00                 | ' 
09d00                 | ' '------------------------ Operators 
09d00                 | ' 
09d00                 | ' sub do_plus 
09d00                 | _do_plus
09d00     05 4A 05 F6 | 	mov	COUNT_, #5
09d04     A8 00 A0 FD | 	call	#pushregs_
09d08     18 F0 07 F1 | 	add	ptra, #24
09d0c     10 E3 BF FD | 	call	#_pop
09d10     FD 1E 02 F6 | 	mov	local01, result1
09d14     FE 20 02 F6 | 	mov	local02, result2
09d18     FF 22 02 F6 | 	mov	local03, result3
09d1c     0C 4E 05 F1 | 	add	fp, #12
09d20     A7 1E 62 FC | 	wrlong	local01, fp
09d24     04 4E 05 F1 | 	add	fp, #4
09d28     A7 20 62 FC | 	wrlong	local02, fp
09d2c     04 4E 05 F1 | 	add	fp, #4
09d30     A7 22 62 FC | 	wrlong	local03, fp
09d34     14 4E 85 F1 | 	sub	fp, #20
09d38     E4 E2 BF FD | 	call	#_pop
09d3c     FF 22 02 F6 | 	mov	local03, result3
09d40     A7 FA 61 FC | 	wrlong	result1, fp
09d44     04 4E 05 F1 | 	add	fp, #4
09d48     A7 FC 61 FC | 	wrlong	result2, fp
09d4c     04 4E 05 F1 | 	add	fp, #4
09d50     A7 22 62 FC | 	wrlong	local03, fp
09d54                 | ' 
09d54                 | ' t2=pop()
09d54                 | ' t1=pop()
09d54                 | ' 
09d54                 | ' 
09d54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
09d54     08 4E 85 F1 | 	sub	fp, #8
09d58     1D 22 0E F2 | 	cmp	local03, #29 wz
09d5c     14 4E 05 A1 |  if_e	add	fp, #20
09d60     A7 24 02 AB |  if_e	rdlong	local04, fp
09d64     14 4E 85 A1 |  if_e	sub	fp, #20
09d68     12 23 02 A6 |  if_e	mov	local03, local04
09d6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
09d70     1C 00 90 5D |  if_ne	jmp	#LR__0840
09d74     A7 1E 02 FB | 	rdlong	local01, fp
09d78     0C 4E 05 F1 | 	add	fp, #12
09d7c     A7 20 02 FB | 	rdlong	local02, fp
09d80     0C 4E 85 F1 | 	sub	fp, #12
09d84     10 1F 02 F1 | 	add	local01, local02
09d88     A7 1E 62 FC | 	wrlong	local01, fp
09d8c     3C 03 90 FD | 	jmp	#LR__0852
09d90                 | LR__0840
09d90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
09d90     08 4E 05 F1 | 	add	fp, #8
09d94     A7 1E 02 FB | 	rdlong	local01, fp
09d98     08 4E 85 F1 | 	sub	fp, #8
09d9c     1D 1E 0E F2 | 	cmp	local01, #29 wz
09da0     14 4E 05 A1 |  if_e	add	fp, #20
09da4     A7 24 02 AB |  if_e	rdlong	local04, fp
09da8     14 4E 85 A1 |  if_e	sub	fp, #20
09dac     12 23 02 A6 |  if_e	mov	local03, local04
09db0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
09db4     28 00 90 5D |  if_ne	jmp	#LR__0841
09db8     A7 1E 02 FB | 	rdlong	local01, fp
09dbc     0C 4E 05 F1 | 	add	fp, #12
09dc0     A7 20 02 FB | 	rdlong	local02, fp
09dc4     0C 4E 85 F1 | 	sub	fp, #12
09dc8     10 1F 02 F1 | 	add	local01, local02
09dcc     A7 1E 62 FC | 	wrlong	local01, fp
09dd0     08 4E 05 F1 | 	add	fp, #8
09dd4     A7 38 68 FC | 	wrlong	#28, fp
09dd8     08 4E 85 F1 | 	sub	fp, #8
09ddc     EC 02 90 FD | 	jmp	#LR__0852
09de0                 | LR__0841
09de0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
09de0     08 4E 05 F1 | 	add	fp, #8
09de4     A7 1E 02 FB | 	rdlong	local01, fp
09de8     08 4E 85 F1 | 	sub	fp, #8
09dec     1D 1E 0E F2 | 	cmp	local01, #29 wz
09df0     14 4E 05 A1 |  if_e	add	fp, #20
09df4     A7 24 02 AB |  if_e	rdlong	local04, fp
09df8     14 4E 85 A1 |  if_e	sub	fp, #20
09dfc     12 23 02 A6 |  if_e	mov	local03, local04
09e00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
09e04     30 00 90 5D |  if_ne	jmp	#LR__0842
09e08     A7 12 02 FB | 	rdlong	arg01, fp
09e0c     90 C2 B0 FD | 	call	#__system___float_fromuns
09e10     FD 12 02 F6 | 	mov	arg01, result1
09e14     0C 4E 05 F1 | 	add	fp, #12
09e18     A7 14 02 FB | 	rdlong	arg02, fp
09e1c     0C 4E 85 F1 | 	sub	fp, #12
09e20     B0 C2 B0 FD | 	call	#__system___float_add
09e24     A7 FA 61 FC | 	wrlong	result1, fp
09e28     08 4E 05 F1 | 	add	fp, #8
09e2c     A7 3C 68 FC | 	wrlong	#30, fp
09e30     08 4E 85 F1 | 	sub	fp, #8
09e34     94 02 90 FD | 	jmp	#LR__0852
09e38                 | LR__0842
09e38                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
09e38     08 4E 05 F1 | 	add	fp, #8
09e3c     A7 1E 02 FB | 	rdlong	local01, fp
09e40     08 4E 85 F1 | 	sub	fp, #8
09e44     1C 1E 0E F2 | 	cmp	local01, #28 wz
09e48     14 4E 05 A1 |  if_e	add	fp, #20
09e4c     A7 24 02 AB |  if_e	rdlong	local04, fp
09e50     14 4E 85 A1 |  if_e	sub	fp, #20
09e54     12 23 02 A6 |  if_e	mov	local03, local04
09e58     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
09e5c     1C 00 90 5D |  if_ne	jmp	#LR__0843
09e60     A7 1E 02 FB | 	rdlong	local01, fp
09e64     0C 4E 05 F1 | 	add	fp, #12
09e68     A7 20 02 FB | 	rdlong	local02, fp
09e6c     0C 4E 85 F1 | 	sub	fp, #12
09e70     10 1F 02 F1 | 	add	local01, local02
09e74     A7 1E 62 FC | 	wrlong	local01, fp
09e78     50 02 90 FD | 	jmp	#LR__0852
09e7c                 | LR__0843
09e7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
09e7c     08 4E 05 F1 | 	add	fp, #8
09e80     A7 1E 02 FB | 	rdlong	local01, fp
09e84     08 4E 85 F1 | 	sub	fp, #8
09e88     1C 1E 0E F2 | 	cmp	local01, #28 wz
09e8c     14 4E 05 A1 |  if_e	add	fp, #20
09e90     A7 24 02 AB |  if_e	rdlong	local04, fp
09e94     14 4E 85 A1 |  if_e	sub	fp, #20
09e98     12 23 02 A6 |  if_e	mov	local03, local04
09e9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
09ea0     1C 00 90 5D |  if_ne	jmp	#LR__0844
09ea4     A7 1E 02 FB | 	rdlong	local01, fp
09ea8     0C 4E 05 F1 | 	add	fp, #12
09eac     A7 20 02 FB | 	rdlong	local02, fp
09eb0     0C 4E 85 F1 | 	sub	fp, #12
09eb4     10 1F 02 F1 | 	add	local01, local02
09eb8     A7 1E 62 FC | 	wrlong	local01, fp
09ebc     0C 02 90 FD | 	jmp	#LR__0852
09ec0                 | LR__0844
09ec0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
09ec0     08 4E 05 F1 | 	add	fp, #8
09ec4     A7 1E 02 FB | 	rdlong	local01, fp
09ec8     08 4E 85 F1 | 	sub	fp, #8
09ecc     1C 1E 0E F2 | 	cmp	local01, #28 wz
09ed0     14 4E 05 A1 |  if_e	add	fp, #20
09ed4     A7 24 02 AB |  if_e	rdlong	local04, fp
09ed8     14 4E 85 A1 |  if_e	sub	fp, #20
09edc     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
09ee0     40 00 90 5D |  if_ne	jmp	#LR__0845
09ee4     A7 12 02 FB | 	rdlong	arg01, fp
09ee8     09 13 52 F6 | 	abs	arg01, arg01 wc
09eec     1F 26 C6 C9 |  if_b	decod	local05, #31
09ef0     00 26 06 36 |  if_ae	mov	local05, #0
09ef4     A8 C1 B0 FD | 	call	#__system___float_fromuns
09ef8     13 FB 61 F5 | 	xor	result1, local05
09efc     FD 12 02 F6 | 	mov	arg01, result1
09f00     0C 4E 05 F1 | 	add	fp, #12
09f04     A7 14 02 FB | 	rdlong	arg02, fp
09f08     0C 4E 85 F1 | 	sub	fp, #12
09f0c     C4 C1 B0 FD | 	call	#__system___float_add
09f10     A7 FA 61 FC | 	wrlong	result1, fp
09f14     08 4E 05 F1 | 	add	fp, #8
09f18     A7 3C 68 FC | 	wrlong	#30, fp
09f1c     08 4E 85 F1 | 	sub	fp, #8
09f20     A8 01 90 FD | 	jmp	#LR__0852
09f24                 | LR__0845
09f24                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
09f24     08 4E 05 F1 | 	add	fp, #8
09f28     A7 1E 02 FB | 	rdlong	local01, fp
09f2c     08 4E 85 F1 | 	sub	fp, #8
09f30     1E 1E 0E F2 | 	cmp	local01, #30 wz
09f34     14 4E 05 A1 |  if_e	add	fp, #20
09f38     A7 22 02 AB |  if_e	rdlong	local03, fp
09f3c     14 4E 85 A1 |  if_e	sub	fp, #20
09f40     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
09f44     28 00 90 5D |  if_ne	jmp	#LR__0846
09f48     A7 1E 02 FB | 	rdlong	local01, fp
09f4c     0C 4E 05 F1 | 	add	fp, #12
09f50     A7 12 02 FB | 	rdlong	arg01, fp
09f54     0C 4E 85 F1 | 	sub	fp, #12
09f58     44 C1 B0 FD | 	call	#__system___float_fromuns
09f5c     FD 14 02 F6 | 	mov	arg02, result1
09f60     0F 13 02 F6 | 	mov	arg01, local01
09f64     6C C1 B0 FD | 	call	#__system___float_add
09f68     A7 FA 61 FC | 	wrlong	result1, fp
09f6c     5C 01 90 FD | 	jmp	#LR__0852
09f70                 | LR__0846
09f70                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
09f70     08 4E 05 F1 | 	add	fp, #8
09f74     A7 1E 02 FB | 	rdlong	local01, fp
09f78     08 4E 85 F1 | 	sub	fp, #8
09f7c     1E 1E 0E F2 | 	cmp	local01, #30 wz
09f80     14 4E 05 A1 |  if_e	add	fp, #20
09f84     A7 22 02 AB |  if_e	rdlong	local03, fp
09f88     14 4E 85 A1 |  if_e	sub	fp, #20
09f8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
09f90     38 00 90 5D |  if_ne	jmp	#LR__0847
09f94     A7 1E 02 FB | 	rdlong	local01, fp
09f98     0C 4E 05 F1 | 	add	fp, #12
09f9c     A7 12 02 FB | 	rdlong	arg01, fp
09fa0     0C 4E 85 F1 | 	sub	fp, #12
09fa4     09 13 52 F6 | 	abs	arg01, arg01 wc
09fa8     1F 26 C6 C9 |  if_b	decod	local05, #31
09fac     00 26 06 36 |  if_ae	mov	local05, #0
09fb0     EC C0 B0 FD | 	call	#__system___float_fromuns
09fb4     13 FB 61 F5 | 	xor	result1, local05
09fb8     FD 14 02 F6 | 	mov	arg02, result1
09fbc     0F 13 02 F6 | 	mov	arg01, local01
09fc0     10 C1 B0 FD | 	call	#__system___float_add
09fc4     A7 FA 61 FC | 	wrlong	result1, fp
09fc8     00 01 90 FD | 	jmp	#LR__0852
09fcc                 | LR__0847
09fcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
09fcc     08 4E 05 F1 | 	add	fp, #8
09fd0     A7 1E 02 FB | 	rdlong	local01, fp
09fd4     08 4E 85 F1 | 	sub	fp, #8
09fd8     1E 1E 0E F2 | 	cmp	local01, #30 wz
09fdc     14 4E 05 A1 |  if_e	add	fp, #20
09fe0     A7 22 02 AB |  if_e	rdlong	local03, fp
09fe4     14 4E 85 A1 |  if_e	sub	fp, #20
09fe8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
09fec     1C 00 90 5D |  if_ne	jmp	#LR__0848
09ff0     A7 12 02 FB | 	rdlong	arg01, fp
09ff4     0C 4E 05 F1 | 	add	fp, #12
09ff8     A7 14 02 FB | 	rdlong	arg02, fp
09ffc     0C 4E 85 F1 | 	sub	fp, #12
0a000     D0 C0 B0 FD | 	call	#__system___float_add
0a004     A7 FA 61 FC | 	wrlong	result1, fp
0a008     C0 00 90 FD | 	jmp	#LR__0852
0a00c                 | LR__0848
0a00c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0a00c     08 4E 05 F1 | 	add	fp, #8
0a010     A7 1E 02 FB | 	rdlong	local01, fp
0a014     08 4E 85 F1 | 	sub	fp, #8
0a018     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a01c     24 00 90 5D |  if_ne	jmp	#LR__0849
0a020     14 4E 05 F1 | 	add	fp, #20
0a024     A7 22 02 FB | 	rdlong	local03, fp
0a028     14 4E 85 F1 | 	sub	fp, #20
0a02c     1F 22 0E F2 | 	cmp	local03, #31 wz
0a030     A7 04 68 5C |  if_ne	wrlong	#2, fp
0a034     08 4E 05 51 |  if_ne	add	fp, #8
0a038     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0a03c     08 4E 85 51 |  if_ne	sub	fp, #8
0a040     88 00 90 5D |  if_ne	jmp	#LR__0852
0a044                 | LR__0849
0a044                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0a044     14 4E 05 F1 | 	add	fp, #20
0a048     A7 1E 02 FB | 	rdlong	local01, fp
0a04c     14 4E 85 F1 | 	sub	fp, #20
0a050     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a054     24 00 90 5D |  if_ne	jmp	#LR__0850
0a058     08 4E 05 F1 | 	add	fp, #8
0a05c     A7 22 02 FB | 	rdlong	local03, fp
0a060     08 4E 85 F1 | 	sub	fp, #8
0a064     1F 22 0E F2 | 	cmp	local03, #31 wz
0a068     A7 04 68 5C |  if_ne	wrlong	#2, fp
0a06c     08 4E 05 51 |  if_ne	add	fp, #8
0a070     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0a074     08 4E 85 51 |  if_ne	sub	fp, #8
0a078     50 00 90 5D |  if_ne	jmp	#LR__0852
0a07c                 | LR__0850
0a07c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0a07c     08 4E 05 F1 | 	add	fp, #8
0a080     A7 1E 02 FB | 	rdlong	local01, fp
0a084     08 4E 85 F1 | 	sub	fp, #8
0a088     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a08c     14 4E 05 A1 |  if_e	add	fp, #20
0a090     A7 22 02 AB |  if_e	rdlong	local03, fp
0a094     14 4E 85 A1 |  if_e	sub	fp, #20
0a098     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0a09c     1C 00 90 5D |  if_ne	jmp	#LR__0851
0a0a0     A7 12 02 FB | 	rdlong	arg01, fp
0a0a4     0C 4E 05 F1 | 	add	fp, #12
0a0a8     A7 14 02 FB | 	rdlong	arg02, fp
0a0ac     0C 4E 85 F1 | 	sub	fp, #12
0a0b0     28 9A B0 FD | 	call	#__system___string_concat
0a0b4     A7 FA 61 FC | 	wrlong	result1, fp
0a0b8     10 00 90 FD | 	jmp	#LR__0852
0a0bc                 | LR__0851
0a0bc     A7 08 68 FC | 	wrlong	#4, fp
0a0c0     08 4E 05 F1 | 	add	fp, #8
0a0c4     A7 FE 69 FC | 	wrlong	#255, fp
0a0c8     08 4E 85 F1 | 	sub	fp, #8
0a0cc                 | LR__0852
0a0cc     A7 12 02 F6 | 	mov	arg01, fp
0a0d0     E4 DF BF FD | 	call	#_push
0a0d4     A7 F0 03 F6 | 	mov	ptra, fp
0a0d8     B2 00 A0 FD | 	call	#popregs_
0a0dc                 | _do_plus_ret
0a0dc     2D 00 64 FD | 	ret
0a0e0                 | 
0a0e0                 | ' 
0a0e0                 | ' sub do_minus
0a0e0                 | _do_minus
0a0e0     05 4A 05 F6 | 	mov	COUNT_, #5
0a0e4     A8 00 A0 FD | 	call	#pushregs_
0a0e8     18 F0 07 F1 | 	add	ptra, #24
0a0ec     30 DF BF FD | 	call	#_pop
0a0f0     FD 1E 02 F6 | 	mov	local01, result1
0a0f4     FE 20 02 F6 | 	mov	local02, result2
0a0f8     FF 22 02 F6 | 	mov	local03, result3
0a0fc     0C 4E 05 F1 | 	add	fp, #12
0a100     A7 1E 62 FC | 	wrlong	local01, fp
0a104     04 4E 05 F1 | 	add	fp, #4
0a108     A7 20 62 FC | 	wrlong	local02, fp
0a10c     04 4E 05 F1 | 	add	fp, #4
0a110     A7 22 62 FC | 	wrlong	local03, fp
0a114     14 4E 85 F1 | 	sub	fp, #20
0a118     04 DF BF FD | 	call	#_pop
0a11c     FF 22 02 F6 | 	mov	local03, result3
0a120     A7 FA 61 FC | 	wrlong	result1, fp
0a124     04 4E 05 F1 | 	add	fp, #4
0a128     A7 FC 61 FC | 	wrlong	result2, fp
0a12c     04 4E 05 F1 | 	add	fp, #4
0a130     A7 22 62 FC | 	wrlong	local03, fp
0a134                 | ' 
0a134                 | ' t2=pop()
0a134                 | ' t1=pop()
0a134                 | ' 
0a134                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0a134     08 4E 85 F1 | 	sub	fp, #8
0a138     1D 22 0E F2 | 	cmp	local03, #29 wz
0a13c     14 4E 05 A1 |  if_e	add	fp, #20
0a140     A7 24 02 AB |  if_e	rdlong	local04, fp
0a144     14 4E 85 A1 |  if_e	sub	fp, #20
0a148     12 23 02 A6 |  if_e	mov	local03, local04
0a14c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a150     5C 00 90 5D |  if_ne	jmp	#LR__0861
0a154                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0a154     0C 4E 05 F1 | 	add	fp, #12
0a158     A7 1E 02 FB | 	rdlong	local01, fp
0a15c     0C 4E 85 F1 | 	sub	fp, #12
0a160     A7 22 02 FB | 	rdlong	local03, fp
0a164     11 1F 12 F2 | 	cmp	local01, local03 wc
0a168     1C 00 90 3D |  if_ae	jmp	#LR__0860
0a16c     A7 1E 02 FB | 	rdlong	local01, fp
0a170     0C 4E 05 F1 | 	add	fp, #12
0a174     A7 20 02 FB | 	rdlong	local02, fp
0a178     0C 4E 85 F1 | 	sub	fp, #12
0a17c     10 1F 82 F1 | 	sub	local01, local02
0a180     A7 1E 62 FC | 	wrlong	local01, fp
0a184     F4 02 90 FD | 	jmp	#LR__0870
0a188                 | LR__0860
0a188     A7 1E 02 FB | 	rdlong	local01, fp
0a18c     0C 4E 05 F1 | 	add	fp, #12
0a190     A7 20 02 FB | 	rdlong	local02, fp
0a194     0C 4E 85 F1 | 	sub	fp, #12
0a198     10 1F 82 F1 | 	sub	local01, local02
0a19c     A7 1E 62 FC | 	wrlong	local01, fp
0a1a0     08 4E 05 F1 | 	add	fp, #8
0a1a4     A7 38 68 FC | 	wrlong	#28, fp
0a1a8     08 4E 85 F1 | 	sub	fp, #8
0a1ac     CC 02 90 FD | 	jmp	#LR__0870
0a1b0                 | LR__0861
0a1b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0a1b0     08 4E 05 F1 | 	add	fp, #8
0a1b4     A7 1E 02 FB | 	rdlong	local01, fp
0a1b8     08 4E 85 F1 | 	sub	fp, #8
0a1bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a1c0     14 4E 05 A1 |  if_e	add	fp, #20
0a1c4     A7 24 02 AB |  if_e	rdlong	local04, fp
0a1c8     14 4E 85 A1 |  if_e	sub	fp, #20
0a1cc     12 23 02 A6 |  if_e	mov	local03, local04
0a1d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a1d4     28 00 90 5D |  if_ne	jmp	#LR__0862
0a1d8     A7 1E 02 FB | 	rdlong	local01, fp
0a1dc     0C 4E 05 F1 | 	add	fp, #12
0a1e0     A7 20 02 FB | 	rdlong	local02, fp
0a1e4     0C 4E 85 F1 | 	sub	fp, #12
0a1e8     10 1F 82 F1 | 	sub	local01, local02
0a1ec     A7 1E 62 FC | 	wrlong	local01, fp
0a1f0     08 4E 05 F1 | 	add	fp, #8
0a1f4     A7 38 68 FC | 	wrlong	#28, fp
0a1f8     08 4E 85 F1 | 	sub	fp, #8
0a1fc     7C 02 90 FD | 	jmp	#LR__0870
0a200                 | LR__0862
0a200                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0a200     08 4E 05 F1 | 	add	fp, #8
0a204     A7 1E 02 FB | 	rdlong	local01, fp
0a208     08 4E 85 F1 | 	sub	fp, #8
0a20c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a210     14 4E 05 A1 |  if_e	add	fp, #20
0a214     A7 24 02 AB |  if_e	rdlong	local04, fp
0a218     14 4E 85 A1 |  if_e	sub	fp, #20
0a21c     12 23 02 A6 |  if_e	mov	local03, local04
0a220     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a224     34 00 90 5D |  if_ne	jmp	#LR__0863
0a228     A7 12 02 FB | 	rdlong	arg01, fp
0a22c     70 BE B0 FD | 	call	#__system___float_fromuns
0a230     FD 12 02 F6 | 	mov	arg01, result1
0a234     0C 4E 05 F1 | 	add	fp, #12
0a238     A7 14 02 FB | 	rdlong	arg02, fp
0a23c     0C 4E 85 F1 | 	sub	fp, #12
0a240     1F 14 E6 F4 | 	bitnot	arg02, #31
0a244     8C BE B0 FD | 	call	#__system___float_add
0a248     A7 FA 61 FC | 	wrlong	result1, fp
0a24c     08 4E 05 F1 | 	add	fp, #8
0a250     A7 3C 68 FC | 	wrlong	#30, fp
0a254     08 4E 85 F1 | 	sub	fp, #8
0a258     20 02 90 FD | 	jmp	#LR__0870
0a25c                 | LR__0863
0a25c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0a25c     08 4E 05 F1 | 	add	fp, #8
0a260     A7 1E 02 FB | 	rdlong	local01, fp
0a264     08 4E 85 F1 | 	sub	fp, #8
0a268     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a26c     14 4E 05 A1 |  if_e	add	fp, #20
0a270     A7 24 02 AB |  if_e	rdlong	local04, fp
0a274     14 4E 85 A1 |  if_e	sub	fp, #20
0a278     12 23 02 A6 |  if_e	mov	local03, local04
0a27c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a280     1C 00 90 5D |  if_ne	jmp	#LR__0864
0a284     A7 1E 02 FB | 	rdlong	local01, fp
0a288     0C 4E 05 F1 | 	add	fp, #12
0a28c     A7 20 02 FB | 	rdlong	local02, fp
0a290     0C 4E 85 F1 | 	sub	fp, #12
0a294     10 1F 82 F1 | 	sub	local01, local02
0a298     A7 1E 62 FC | 	wrlong	local01, fp
0a29c     DC 01 90 FD | 	jmp	#LR__0870
0a2a0                 | LR__0864
0a2a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0a2a0     08 4E 05 F1 | 	add	fp, #8
0a2a4     A7 1E 02 FB | 	rdlong	local01, fp
0a2a8     08 4E 85 F1 | 	sub	fp, #8
0a2ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a2b0     14 4E 05 A1 |  if_e	add	fp, #20
0a2b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0a2b8     14 4E 85 A1 |  if_e	sub	fp, #20
0a2bc     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0a2c0     1C 00 90 5D |  if_ne	jmp	#LR__0865
0a2c4     A7 1E 02 FB | 	rdlong	local01, fp
0a2c8     0C 4E 05 F1 | 	add	fp, #12
0a2cc     A7 20 02 FB | 	rdlong	local02, fp
0a2d0     0C 4E 85 F1 | 	sub	fp, #12
0a2d4     10 1F 82 F1 | 	sub	local01, local02
0a2d8     A7 1E 62 FC | 	wrlong	local01, fp
0a2dc     9C 01 90 FD | 	jmp	#LR__0870
0a2e0                 | LR__0865
0a2e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0a2e0     08 4E 05 F1 | 	add	fp, #8
0a2e4     A7 1E 02 FB | 	rdlong	local01, fp
0a2e8     08 4E 85 F1 | 	sub	fp, #8
0a2ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a2f0     14 4E 05 A1 |  if_e	add	fp, #20
0a2f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0a2f8     14 4E 85 A1 |  if_e	sub	fp, #20
0a2fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a300     44 00 90 5D |  if_ne	jmp	#LR__0866
0a304     A7 12 02 FB | 	rdlong	arg01, fp
0a308     09 13 52 F6 | 	abs	arg01, arg01 wc
0a30c     1F 26 C6 C9 |  if_b	decod	local05, #31
0a310     00 26 06 36 |  if_ae	mov	local05, #0
0a314     88 BD B0 FD | 	call	#__system___float_fromuns
0a318     13 FB 61 F5 | 	xor	result1, local05
0a31c     FD 12 02 F6 | 	mov	arg01, result1
0a320     0C 4E 05 F1 | 	add	fp, #12
0a324     A7 14 02 FB | 	rdlong	arg02, fp
0a328     0C 4E 85 F1 | 	sub	fp, #12
0a32c     1F 14 E6 F4 | 	bitnot	arg02, #31
0a330     A0 BD B0 FD | 	call	#__system___float_add
0a334     A7 FA 61 FC | 	wrlong	result1, fp
0a338     08 4E 05 F1 | 	add	fp, #8
0a33c     A7 3C 68 FC | 	wrlong	#30, fp
0a340     08 4E 85 F1 | 	sub	fp, #8
0a344     34 01 90 FD | 	jmp	#LR__0870
0a348                 | LR__0866
0a348                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0a348     08 4E 05 F1 | 	add	fp, #8
0a34c     A7 1E 02 FB | 	rdlong	local01, fp
0a350     08 4E 85 F1 | 	sub	fp, #8
0a354     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a358     14 4E 05 A1 |  if_e	add	fp, #20
0a35c     A7 22 02 AB |  if_e	rdlong	local03, fp
0a360     14 4E 85 A1 |  if_e	sub	fp, #20
0a364     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a368     2C 00 90 5D |  if_ne	jmp	#LR__0867
0a36c     A7 1E 02 FB | 	rdlong	local01, fp
0a370     0C 4E 05 F1 | 	add	fp, #12
0a374     A7 12 02 FB | 	rdlong	arg01, fp
0a378     0C 4E 85 F1 | 	sub	fp, #12
0a37c     20 BD B0 FD | 	call	#__system___float_fromuns
0a380     FD 14 02 F6 | 	mov	arg02, result1
0a384     0F 13 02 F6 | 	mov	arg01, local01
0a388     1F 14 E6 F4 | 	bitnot	arg02, #31
0a38c     44 BD B0 FD | 	call	#__system___float_add
0a390     A7 FA 61 FC | 	wrlong	result1, fp
0a394     E4 00 90 FD | 	jmp	#LR__0870
0a398                 | LR__0867
0a398                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0a398     08 4E 05 F1 | 	add	fp, #8
0a39c     A7 1E 02 FB | 	rdlong	local01, fp
0a3a0     08 4E 85 F1 | 	sub	fp, #8
0a3a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a3a8     14 4E 05 A1 |  if_e	add	fp, #20
0a3ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0a3b0     14 4E 85 A1 |  if_e	sub	fp, #20
0a3b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a3b8     3C 00 90 5D |  if_ne	jmp	#LR__0868
0a3bc     A7 1E 02 FB | 	rdlong	local01, fp
0a3c0     0C 4E 05 F1 | 	add	fp, #12
0a3c4     A7 12 02 FB | 	rdlong	arg01, fp
0a3c8     0C 4E 85 F1 | 	sub	fp, #12
0a3cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0a3d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0a3d4     00 26 06 36 |  if_ae	mov	local05, #0
0a3d8     C4 BC B0 FD | 	call	#__system___float_fromuns
0a3dc     13 FB 61 F5 | 	xor	result1, local05
0a3e0     FD 14 02 F6 | 	mov	arg02, result1
0a3e4     0F 13 02 F6 | 	mov	arg01, local01
0a3e8     1F 14 E6 F4 | 	bitnot	arg02, #31
0a3ec     E4 BC B0 FD | 	call	#__system___float_add
0a3f0     A7 FA 61 FC | 	wrlong	result1, fp
0a3f4     84 00 90 FD | 	jmp	#LR__0870
0a3f8                 | LR__0868
0a3f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0a3f8     08 4E 05 F1 | 	add	fp, #8
0a3fc     A7 1E 02 FB | 	rdlong	local01, fp
0a400     08 4E 85 F1 | 	sub	fp, #8
0a404     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a408     14 4E 05 A1 |  if_e	add	fp, #20
0a40c     A7 22 02 AB |  if_e	rdlong	local03, fp
0a410     14 4E 85 A1 |  if_e	sub	fp, #20
0a414     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a418     20 00 90 5D |  if_ne	jmp	#LR__0869
0a41c     A7 12 02 FB | 	rdlong	arg01, fp
0a420     0C 4E 05 F1 | 	add	fp, #12
0a424     A7 14 02 FB | 	rdlong	arg02, fp
0a428     0C 4E 85 F1 | 	sub	fp, #12
0a42c     1F 14 E6 F4 | 	bitnot	arg02, #31
0a430     A0 BC B0 FD | 	call	#__system___float_add
0a434     A7 FA 61 FC | 	wrlong	result1, fp
0a438     40 00 90 FD | 	jmp	#LR__0870
0a43c                 | LR__0869
0a43c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0a43c     08 4E 05 F1 | 	add	fp, #8
0a440     A7 1E 02 FB | 	rdlong	local01, fp
0a444     08 4E 85 F1 | 	sub	fp, #8
0a448     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a44c     14 4E 05 51 |  if_ne	add	fp, #20
0a450     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a454     14 4E 85 51 |  if_ne	sub	fp, #20
0a458     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0a45c     A7 06 68 AC |  if_e	wrlong	#3, fp
0a460     08 4E 05 A1 |  if_e	add	fp, #8
0a464     A7 FE 69 AC |  if_e	wrlong	#255, fp
0a468     08 4E 85 A1 |  if_e	sub	fp, #8
0a46c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0a470     08 4E 05 51 |  if_ne	add	fp, #8
0a474     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0a478     08 4E 85 51 |  if_ne	sub	fp, #8
0a47c                 | LR__0870
0a47c     A7 12 02 F6 | 	mov	arg01, fp
0a480     34 DC BF FD | 	call	#_push
0a484     A7 F0 03 F6 | 	mov	ptra, fp
0a488     B2 00 A0 FD | 	call	#popregs_
0a48c                 | _do_minus_ret
0a48c     2D 00 64 FD | 	ret
0a490                 | 
0a490                 | ' 
0a490                 | ' sub do_and 
0a490                 | _do_and
0a490     03 4A 05 F6 | 	mov	COUNT_, #3
0a494     A8 00 A0 FD | 	call	#pushregs_
0a498     18 F0 07 F1 | 	add	ptra, #24
0a49c     80 DB BF FD | 	call	#_pop
0a4a0     FD 12 02 F6 | 	mov	arg01, result1
0a4a4     FE 1E 02 F6 | 	mov	local01, result2
0a4a8     FF 20 02 F6 | 	mov	local02, result3
0a4ac     0C 4E 05 F1 | 	add	fp, #12
0a4b0     A7 12 62 FC | 	wrlong	arg01, fp
0a4b4     04 4E 05 F1 | 	add	fp, #4
0a4b8     A7 1E 62 FC | 	wrlong	local01, fp
0a4bc     04 4E 05 F1 | 	add	fp, #4
0a4c0     A7 20 62 FC | 	wrlong	local02, fp
0a4c4     14 4E 85 F1 | 	sub	fp, #20
0a4c8     54 DB BF FD | 	call	#_pop
0a4cc     FF 22 02 F6 | 	mov	local03, result3
0a4d0     A7 FA 61 FC | 	wrlong	result1, fp
0a4d4     04 4E 05 F1 | 	add	fp, #4
0a4d8     A7 FC 61 FC | 	wrlong	result2, fp
0a4dc     04 4E 05 F1 | 	add	fp, #4
0a4e0     A7 22 62 FC | 	wrlong	local03, fp
0a4e4                 | ' 
0a4e4                 | ' t2=pop()
0a4e4                 | ' t1=pop()
0a4e4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0a4e4     08 4E 85 F1 | 	sub	fp, #8
0a4e8     1C 22 0E F2 | 	cmp	local03, #28 wz
0a4ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0a4f0     A7 22 62 AC |  if_e	wrlong	local03, fp
0a4f4     08 4E 05 A1 |  if_e	add	fp, #8
0a4f8     A7 3A 68 AC |  if_e	wrlong	#29, fp
0a4fc     08 4E 85 A1 |  if_e	sub	fp, #8
0a500                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0a500     14 4E 05 F1 | 	add	fp, #20
0a504     A7 22 02 FB | 	rdlong	local03, fp
0a508     14 4E 85 F1 | 	sub	fp, #20
0a50c     1C 22 0E F2 | 	cmp	local03, #28 wz
0a510     18 00 90 5D |  if_ne	jmp	#LR__0880
0a514     0C 4E 05 F1 | 	add	fp, #12
0a518     A7 22 02 FB | 	rdlong	local03, fp
0a51c     A7 22 62 FC | 	wrlong	local03, fp
0a520     08 4E 05 F1 | 	add	fp, #8
0a524     A7 3A 68 FC | 	wrlong	#29, fp
0a528     14 4E 85 F1 | 	sub	fp, #20
0a52c                 | LR__0880
0a52c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0a52c     08 4E 05 F1 | 	add	fp, #8
0a530     A7 22 02 FB | 	rdlong	local03, fp
0a534     08 4E 85 F1 | 	sub	fp, #8
0a538     1F 22 0E F2 | 	cmp	local03, #31 wz
0a53c     14 4E 05 51 |  if_ne	add	fp, #20
0a540     A7 20 02 5B |  if_ne	rdlong	local02, fp
0a544     14 4E 85 51 |  if_ne	sub	fp, #20
0a548     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0a54c     08 4E 05 51 |  if_ne	add	fp, #8
0a550     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a554     08 4E 85 51 |  if_ne	sub	fp, #8
0a558     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0a55c     14 4E 05 51 |  if_ne	add	fp, #20
0a560     14 4E 85 51 |  if_ne	sub	fp, #20
0a564     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0a568     A7 0C 68 AC |  if_e	wrlong	#6, fp
0a56c     08 4E 05 A1 |  if_e	add	fp, #8
0a570     A7 FE 69 AC |  if_e	wrlong	#255, fp
0a574     08 4E 85 A1 |  if_e	sub	fp, #8
0a578     18 00 90 AD |  if_e	jmp	#LR__0881
0a57c     A7 22 02 FB | 	rdlong	local03, fp
0a580     0C 4E 05 F1 | 	add	fp, #12
0a584     A7 1E 02 FB | 	rdlong	local01, fp
0a588     0C 4E 85 F1 | 	sub	fp, #12
0a58c     0F 23 02 F5 | 	and	local03, local01
0a590     A7 22 62 FC | 	wrlong	local03, fp
0a594                 | LR__0881
0a594     A7 12 02 F6 | 	mov	arg01, fp
0a598     1C DB BF FD | 	call	#_push
0a59c     A7 F0 03 F6 | 	mov	ptra, fp
0a5a0     B2 00 A0 FD | 	call	#popregs_
0a5a4                 | _do_and_ret
0a5a4     2D 00 64 FD | 	ret
0a5a8                 | 
0a5a8                 | ' 
0a5a8                 | ' sub do_or 
0a5a8                 | _do_or
0a5a8     03 4A 05 F6 | 	mov	COUNT_, #3
0a5ac     A8 00 A0 FD | 	call	#pushregs_
0a5b0     18 F0 07 F1 | 	add	ptra, #24
0a5b4     68 DA BF FD | 	call	#_pop
0a5b8     FD 12 02 F6 | 	mov	arg01, result1
0a5bc     FE 1E 02 F6 | 	mov	local01, result2
0a5c0     FF 20 02 F6 | 	mov	local02, result3
0a5c4     0C 4E 05 F1 | 	add	fp, #12
0a5c8     A7 12 62 FC | 	wrlong	arg01, fp
0a5cc     04 4E 05 F1 | 	add	fp, #4
0a5d0     A7 1E 62 FC | 	wrlong	local01, fp
0a5d4     04 4E 05 F1 | 	add	fp, #4
0a5d8     A7 20 62 FC | 	wrlong	local02, fp
0a5dc     14 4E 85 F1 | 	sub	fp, #20
0a5e0     3C DA BF FD | 	call	#_pop
0a5e4     FF 22 02 F6 | 	mov	local03, result3
0a5e8     A7 FA 61 FC | 	wrlong	result1, fp
0a5ec     04 4E 05 F1 | 	add	fp, #4
0a5f0     A7 FC 61 FC | 	wrlong	result2, fp
0a5f4     04 4E 05 F1 | 	add	fp, #4
0a5f8     A7 22 62 FC | 	wrlong	local03, fp
0a5fc                 | ' 
0a5fc                 | ' t2=pop()
0a5fc                 | ' t1=pop()
0a5fc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0a5fc     08 4E 85 F1 | 	sub	fp, #8
0a600     1C 22 0E F2 | 	cmp	local03, #28 wz
0a604     A7 22 02 AB |  if_e	rdlong	local03, fp
0a608     A7 22 62 AC |  if_e	wrlong	local03, fp
0a60c     08 4E 05 A1 |  if_e	add	fp, #8
0a610     A7 3A 68 AC |  if_e	wrlong	#29, fp
0a614     08 4E 85 A1 |  if_e	sub	fp, #8
0a618                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0a618     14 4E 05 F1 | 	add	fp, #20
0a61c     A7 22 02 FB | 	rdlong	local03, fp
0a620     14 4E 85 F1 | 	sub	fp, #20
0a624     1C 22 0E F2 | 	cmp	local03, #28 wz
0a628     18 00 90 5D |  if_ne	jmp	#LR__0890
0a62c     0C 4E 05 F1 | 	add	fp, #12
0a630     A7 22 02 FB | 	rdlong	local03, fp
0a634     A7 22 62 FC | 	wrlong	local03, fp
0a638     08 4E 05 F1 | 	add	fp, #8
0a63c     A7 3A 68 FC | 	wrlong	#29, fp
0a640     14 4E 85 F1 | 	sub	fp, #20
0a644                 | LR__0890
0a644                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0a644     08 4E 05 F1 | 	add	fp, #8
0a648     A7 22 02 FB | 	rdlong	local03, fp
0a64c     08 4E 85 F1 | 	sub	fp, #8
0a650     1F 22 0E F2 | 	cmp	local03, #31 wz
0a654     14 4E 05 51 |  if_ne	add	fp, #20
0a658     A7 20 02 5B |  if_ne	rdlong	local02, fp
0a65c     14 4E 85 51 |  if_ne	sub	fp, #20
0a660     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0a664     08 4E 05 51 |  if_ne	add	fp, #8
0a668     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a66c     08 4E 85 51 |  if_ne	sub	fp, #8
0a670     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0a674     14 4E 05 51 |  if_ne	add	fp, #20
0a678     14 4E 85 51 |  if_ne	sub	fp, #20
0a67c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0a680     A7 0C 68 AC |  if_e	wrlong	#6, fp
0a684     08 4E 05 A1 |  if_e	add	fp, #8
0a688     A7 FE 69 AC |  if_e	wrlong	#255, fp
0a68c     08 4E 85 A1 |  if_e	sub	fp, #8
0a690     18 00 90 AD |  if_e	jmp	#LR__0891
0a694     A7 22 02 FB | 	rdlong	local03, fp
0a698     0C 4E 05 F1 | 	add	fp, #12
0a69c     A7 1E 02 FB | 	rdlong	local01, fp
0a6a0     0C 4E 85 F1 | 	sub	fp, #12
0a6a4     0F 23 42 F5 | 	or	local03, local01
0a6a8     A7 22 62 FC | 	wrlong	local03, fp
0a6ac                 | LR__0891
0a6ac     A7 12 02 F6 | 	mov	arg01, fp
0a6b0     04 DA BF FD | 	call	#_push
0a6b4     A7 F0 03 F6 | 	mov	ptra, fp
0a6b8     B2 00 A0 FD | 	call	#popregs_
0a6bc                 | _do_or_ret
0a6bc     2D 00 64 FD | 	ret
0a6c0                 | 
0a6c0                 | ' 
0a6c0                 | ' sub do_mul
0a6c0                 | _do_mul
0a6c0     05 4A 05 F6 | 	mov	COUNT_, #5
0a6c4     A8 00 A0 FD | 	call	#pushregs_
0a6c8     18 F0 07 F1 | 	add	ptra, #24
0a6cc     50 D9 BF FD | 	call	#_pop
0a6d0     FD 1E 02 F6 | 	mov	local01, result1
0a6d4     FE 20 02 F6 | 	mov	local02, result2
0a6d8     FF 22 02 F6 | 	mov	local03, result3
0a6dc     0C 4E 05 F1 | 	add	fp, #12
0a6e0     A7 1E 62 FC | 	wrlong	local01, fp
0a6e4     04 4E 05 F1 | 	add	fp, #4
0a6e8     A7 20 62 FC | 	wrlong	local02, fp
0a6ec     04 4E 05 F1 | 	add	fp, #4
0a6f0     A7 22 62 FC | 	wrlong	local03, fp
0a6f4     14 4E 85 F1 | 	sub	fp, #20
0a6f8     24 D9 BF FD | 	call	#_pop
0a6fc     FF 22 02 F6 | 	mov	local03, result3
0a700     A7 FA 61 FC | 	wrlong	result1, fp
0a704     04 4E 05 F1 | 	add	fp, #4
0a708     A7 FC 61 FC | 	wrlong	result2, fp
0a70c     04 4E 05 F1 | 	add	fp, #4
0a710     A7 22 62 FC | 	wrlong	local03, fp
0a714                 | ' 
0a714                 | ' t2=pop()
0a714                 | ' t1=pop()
0a714                 | ' 
0a714                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0a714     08 4E 85 F1 | 	sub	fp, #8
0a718     1D 22 0E F2 | 	cmp	local03, #29 wz
0a71c     14 4E 05 A1 |  if_e	add	fp, #20
0a720     A7 24 02 AB |  if_e	rdlong	local04, fp
0a724     14 4E 85 A1 |  if_e	sub	fp, #20
0a728     12 23 02 A6 |  if_e	mov	local03, local04
0a72c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a730     20 00 90 5D |  if_ne	jmp	#LR__0900
0a734     A7 20 02 FB | 	rdlong	local02, fp
0a738     0C 4E 05 F1 | 	add	fp, #12
0a73c     A7 22 02 FB | 	rdlong	local03, fp
0a740     11 21 02 FD | 	qmul	local02, local03
0a744     0C 4E 85 F1 | 	sub	fp, #12
0a748     18 1E 62 FD | 	getqx	local01
0a74c     A7 1E 62 FC | 	wrlong	local01, fp
0a750     C4 02 90 FD | 	jmp	#LR__0909
0a754                 | LR__0900
0a754                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0a754     08 4E 05 F1 | 	add	fp, #8
0a758     A7 1E 02 FB | 	rdlong	local01, fp
0a75c     08 4E 85 F1 | 	sub	fp, #8
0a760     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a764     14 4E 05 A1 |  if_e	add	fp, #20
0a768     A7 24 02 AB |  if_e	rdlong	local04, fp
0a76c     14 4E 85 A1 |  if_e	sub	fp, #20
0a770     12 23 02 A6 |  if_e	mov	local03, local04
0a774     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a778     2C 00 90 5D |  if_ne	jmp	#LR__0901
0a77c     A7 20 02 FB | 	rdlong	local02, fp
0a780     0C 4E 05 F1 | 	add	fp, #12
0a784     A7 22 02 FB | 	rdlong	local03, fp
0a788     11 21 02 FD | 	qmul	local02, local03
0a78c     0C 4E 85 F1 | 	sub	fp, #12
0a790     18 1E 62 FD | 	getqx	local01
0a794     A7 1E 62 FC | 	wrlong	local01, fp
0a798     08 4E 05 F1 | 	add	fp, #8
0a79c     A7 38 68 FC | 	wrlong	#28, fp
0a7a0     08 4E 85 F1 | 	sub	fp, #8
0a7a4     70 02 90 FD | 	jmp	#LR__0909
0a7a8                 | LR__0901
0a7a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0a7a8     08 4E 05 F1 | 	add	fp, #8
0a7ac     A7 1E 02 FB | 	rdlong	local01, fp
0a7b0     08 4E 85 F1 | 	sub	fp, #8
0a7b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a7b8     14 4E 05 A1 |  if_e	add	fp, #20
0a7bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0a7c0     14 4E 85 A1 |  if_e	sub	fp, #20
0a7c4     12 23 02 A6 |  if_e	mov	local03, local04
0a7c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a7cc     30 00 90 5D |  if_ne	jmp	#LR__0902
0a7d0     A7 12 02 FB | 	rdlong	arg01, fp
0a7d4     C8 B8 B0 FD | 	call	#__system___float_fromuns
0a7d8     FD 12 02 F6 | 	mov	arg01, result1
0a7dc     0C 4E 05 F1 | 	add	fp, #12
0a7e0     A7 14 02 FB | 	rdlong	arg02, fp
0a7e4     0C 4E 85 F1 | 	sub	fp, #12
0a7e8     E0 BB B0 FD | 	call	#__system___float_mul
0a7ec     A7 FA 61 FC | 	wrlong	result1, fp
0a7f0     08 4E 05 F1 | 	add	fp, #8
0a7f4     A7 3C 68 FC | 	wrlong	#30, fp
0a7f8     08 4E 85 F1 | 	sub	fp, #8
0a7fc     18 02 90 FD | 	jmp	#LR__0909
0a800                 | LR__0902
0a800                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0a800     08 4E 05 F1 | 	add	fp, #8
0a804     A7 1E 02 FB | 	rdlong	local01, fp
0a808     08 4E 85 F1 | 	sub	fp, #8
0a80c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a810     14 4E 05 A1 |  if_e	add	fp, #20
0a814     A7 24 02 AB |  if_e	rdlong	local04, fp
0a818     14 4E 85 A1 |  if_e	sub	fp, #20
0a81c     12 23 02 A6 |  if_e	mov	local03, local04
0a820     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a824     20 00 90 5D |  if_ne	jmp	#LR__0903
0a828     A7 20 02 FB | 	rdlong	local02, fp
0a82c     0C 4E 05 F1 | 	add	fp, #12
0a830     A7 22 02 FB | 	rdlong	local03, fp
0a834     11 21 02 FD | 	qmul	local02, local03
0a838     0C 4E 85 F1 | 	sub	fp, #12
0a83c     18 1E 62 FD | 	getqx	local01
0a840     A7 1E 62 FC | 	wrlong	local01, fp
0a844     D0 01 90 FD | 	jmp	#LR__0909
0a848                 | LR__0903
0a848                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0a848     08 4E 05 F1 | 	add	fp, #8
0a84c     A7 1E 02 FB | 	rdlong	local01, fp
0a850     08 4E 85 F1 | 	sub	fp, #8
0a854     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a858     14 4E 05 A1 |  if_e	add	fp, #20
0a85c     A7 24 02 AB |  if_e	rdlong	local04, fp
0a860     14 4E 85 A1 |  if_e	sub	fp, #20
0a864     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0a868     20 00 90 5D |  if_ne	jmp	#LR__0904
0a86c     A7 20 02 FB | 	rdlong	local02, fp
0a870     0C 4E 05 F1 | 	add	fp, #12
0a874     A7 22 02 FB | 	rdlong	local03, fp
0a878     11 21 02 FD | 	qmul	local02, local03
0a87c     0C 4E 85 F1 | 	sub	fp, #12
0a880     18 1E 62 FD | 	getqx	local01
0a884     A7 1E 62 FC | 	wrlong	local01, fp
0a888     8C 01 90 FD | 	jmp	#LR__0909
0a88c                 | LR__0904
0a88c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0a88c     08 4E 05 F1 | 	add	fp, #8
0a890     A7 1E 02 FB | 	rdlong	local01, fp
0a894     08 4E 85 F1 | 	sub	fp, #8
0a898     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a89c     14 4E 05 A1 |  if_e	add	fp, #20
0a8a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0a8a4     14 4E 85 A1 |  if_e	sub	fp, #20
0a8a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a8ac     40 00 90 5D |  if_ne	jmp	#LR__0905
0a8b0     A7 12 02 FB | 	rdlong	arg01, fp
0a8b4     09 13 52 F6 | 	abs	arg01, arg01 wc
0a8b8     1F 26 C6 C9 |  if_b	decod	local05, #31
0a8bc     00 26 06 36 |  if_ae	mov	local05, #0
0a8c0     DC B7 B0 FD | 	call	#__system___float_fromuns
0a8c4     13 FB 61 F5 | 	xor	result1, local05
0a8c8     FD 12 02 F6 | 	mov	arg01, result1
0a8cc     0C 4E 05 F1 | 	add	fp, #12
0a8d0     A7 14 02 FB | 	rdlong	arg02, fp
0a8d4     0C 4E 85 F1 | 	sub	fp, #12
0a8d8     F0 BA B0 FD | 	call	#__system___float_mul
0a8dc     A7 FA 61 FC | 	wrlong	result1, fp
0a8e0     08 4E 05 F1 | 	add	fp, #8
0a8e4     A7 3C 68 FC | 	wrlong	#30, fp
0a8e8     08 4E 85 F1 | 	sub	fp, #8
0a8ec     28 01 90 FD | 	jmp	#LR__0909
0a8f0                 | LR__0905
0a8f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0a8f0     08 4E 05 F1 | 	add	fp, #8
0a8f4     A7 1E 02 FB | 	rdlong	local01, fp
0a8f8     08 4E 85 F1 | 	sub	fp, #8
0a8fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a900     14 4E 05 A1 |  if_e	add	fp, #20
0a904     A7 22 02 AB |  if_e	rdlong	local03, fp
0a908     14 4E 85 A1 |  if_e	sub	fp, #20
0a90c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a910     28 00 90 5D |  if_ne	jmp	#LR__0906
0a914     A7 1E 02 FB | 	rdlong	local01, fp
0a918     0C 4E 05 F1 | 	add	fp, #12
0a91c     A7 12 02 FB | 	rdlong	arg01, fp
0a920     0C 4E 85 F1 | 	sub	fp, #12
0a924     78 B7 B0 FD | 	call	#__system___float_fromuns
0a928     FD 14 02 F6 | 	mov	arg02, result1
0a92c     0F 13 02 F6 | 	mov	arg01, local01
0a930     98 BA B0 FD | 	call	#__system___float_mul
0a934     A7 FA 61 FC | 	wrlong	result1, fp
0a938     DC 00 90 FD | 	jmp	#LR__0909
0a93c                 | LR__0906
0a93c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0a93c     08 4E 05 F1 | 	add	fp, #8
0a940     A7 1E 02 FB | 	rdlong	local01, fp
0a944     08 4E 85 F1 | 	sub	fp, #8
0a948     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a94c     14 4E 05 A1 |  if_e	add	fp, #20
0a950     A7 22 02 AB |  if_e	rdlong	local03, fp
0a954     14 4E 85 A1 |  if_e	sub	fp, #20
0a958     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a95c     38 00 90 5D |  if_ne	jmp	#LR__0907
0a960     A7 1E 02 FB | 	rdlong	local01, fp
0a964     0C 4E 05 F1 | 	add	fp, #12
0a968     A7 12 02 FB | 	rdlong	arg01, fp
0a96c     0C 4E 85 F1 | 	sub	fp, #12
0a970     09 13 52 F6 | 	abs	arg01, arg01 wc
0a974     1F 26 C6 C9 |  if_b	decod	local05, #31
0a978     00 26 06 36 |  if_ae	mov	local05, #0
0a97c     20 B7 B0 FD | 	call	#__system___float_fromuns
0a980     13 FB 61 F5 | 	xor	result1, local05
0a984     FD 14 02 F6 | 	mov	arg02, result1
0a988     0F 13 02 F6 | 	mov	arg01, local01
0a98c     3C BA B0 FD | 	call	#__system___float_mul
0a990     A7 FA 61 FC | 	wrlong	result1, fp
0a994     80 00 90 FD | 	jmp	#LR__0909
0a998                 | LR__0907
0a998                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0a998     08 4E 05 F1 | 	add	fp, #8
0a99c     A7 1E 02 FB | 	rdlong	local01, fp
0a9a0     08 4E 85 F1 | 	sub	fp, #8
0a9a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a9a8     14 4E 05 A1 |  if_e	add	fp, #20
0a9ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0a9b0     14 4E 85 A1 |  if_e	sub	fp, #20
0a9b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a9b8     1C 00 90 5D |  if_ne	jmp	#LR__0908
0a9bc     A7 12 02 FB | 	rdlong	arg01, fp
0a9c0     0C 4E 05 F1 | 	add	fp, #12
0a9c4     A7 14 02 FB | 	rdlong	arg02, fp
0a9c8     0C 4E 85 F1 | 	sub	fp, #12
0a9cc     FC B9 B0 FD | 	call	#__system___float_mul
0a9d0     A7 FA 61 FC | 	wrlong	result1, fp
0a9d4     40 00 90 FD | 	jmp	#LR__0909
0a9d8                 | LR__0908
0a9d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0a9d8     08 4E 05 F1 | 	add	fp, #8
0a9dc     A7 1E 02 FB | 	rdlong	local01, fp
0a9e0     08 4E 85 F1 | 	sub	fp, #8
0a9e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a9e8     14 4E 05 51 |  if_ne	add	fp, #20
0a9ec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a9f0     14 4E 85 51 |  if_ne	sub	fp, #20
0a9f4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0a9f8     A7 10 68 AC |  if_e	wrlong	#8, fp
0a9fc     08 4E 05 A1 |  if_e	add	fp, #8
0aa00     A7 FE 69 AC |  if_e	wrlong	#255, fp
0aa04     08 4E 85 A1 |  if_e	sub	fp, #8
0aa08     A7 12 68 5C |  if_ne	wrlong	#9, fp
0aa0c     08 4E 05 51 |  if_ne	add	fp, #8
0aa10     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0aa14     08 4E 85 51 |  if_ne	sub	fp, #8
0aa18                 | LR__0909
0aa18     A7 12 02 F6 | 	mov	arg01, fp
0aa1c     98 D6 BF FD | 	call	#_push
0aa20     A7 F0 03 F6 | 	mov	ptra, fp
0aa24     B2 00 A0 FD | 	call	#popregs_
0aa28                 | _do_mul_ret
0aa28     2D 00 64 FD | 	ret
0aa2c                 | 
0aa2c                 | ' 
0aa2c                 | ' sub do_div 
0aa2c                 | _do_div
0aa2c     01 4A 05 F6 | 	mov	COUNT_, #1
0aa30     A8 00 A0 FD | 	call	#pushregs_
0aa34     18 F0 07 F1 | 	add	ptra, #24
0aa38     E4 D5 BF FD | 	call	#_pop
0aa3c     FD 60 02 F6 | 	mov	muldivb_, result1
0aa40     FE 5E 02 F6 | 	mov	muldiva_, result2
0aa44     FF 1E 02 F6 | 	mov	local01, result3
0aa48     0C 4E 05 F1 | 	add	fp, #12
0aa4c     A7 60 62 FC | 	wrlong	muldivb_, fp
0aa50     04 4E 05 F1 | 	add	fp, #4
0aa54     A7 5E 62 FC | 	wrlong	muldiva_, fp
0aa58     04 4E 05 F1 | 	add	fp, #4
0aa5c     A7 1E 62 FC | 	wrlong	local01, fp
0aa60     14 4E 85 F1 | 	sub	fp, #20
0aa64     B8 D5 BF FD | 	call	#_pop
0aa68     A7 FA 61 FC | 	wrlong	result1, fp
0aa6c     04 4E 05 F1 | 	add	fp, #4
0aa70     A7 FC 61 FC | 	wrlong	result2, fp
0aa74     04 4E 05 F1 | 	add	fp, #4
0aa78     A7 FE 61 FC | 	wrlong	result3, fp
0aa7c                 | ' 
0aa7c                 | ' t2=pop()
0aa7c                 | ' t1=pop()
0aa7c                 | ' 
0aa7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0aa7c     08 4E 85 F1 | 	sub	fp, #8
0aa80     1F FE 0D F2 | 	cmp	result3, #31 wz
0aa84     14 4E 05 51 |  if_ne	add	fp, #20
0aa88     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0aa8c     14 4E 85 51 |  if_ne	sub	fp, #20
0aa90     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0aa94     A7 14 68 AC |  if_e	wrlong	#10, fp
0aa98     08 4E 05 A1 |  if_e	add	fp, #8
0aa9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0aaa0     08 4E 85 A1 |  if_e	sub	fp, #8
0aaa4     90 01 90 AD |  if_e	jmp	#LR__0916
0aaa8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0aaa8     08 4E 05 F1 | 	add	fp, #8
0aaac     A7 60 02 FB | 	rdlong	muldivb_, fp
0aab0     08 4E 85 F1 | 	sub	fp, #8
0aab4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aab8     1C 00 90 5D |  if_ne	jmp	#LR__0910
0aabc     08 4E 05 F1 | 	add	fp, #8
0aac0     A7 38 68 FC | 	wrlong	#28, fp
0aac4     08 4E 85 F1 | 	sub	fp, #8
0aac8     A7 12 02 FB | 	rdlong	arg01, fp
0aacc     00 14 06 F6 | 	mov	arg02, #0
0aad0     C0 BD B0 FD | 	call	#__system___float_tointeger
0aad4     A7 FA 61 FC | 	wrlong	result1, fp
0aad8                 | LR__0910
0aad8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0aad8     14 4E 05 F1 | 	add	fp, #20
0aadc     A7 60 02 FB | 	rdlong	muldivb_, fp
0aae0     14 4E 85 F1 | 	sub	fp, #20
0aae4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aae8     28 00 90 5D |  if_ne	jmp	#LR__0911
0aaec     14 4E 05 F1 | 	add	fp, #20
0aaf0     A7 38 68 FC | 	wrlong	#28, fp
0aaf4     08 4E 85 F1 | 	sub	fp, #8
0aaf8     A7 12 02 FB | 	rdlong	arg01, fp
0aafc     0C 4E 85 F1 | 	sub	fp, #12
0ab00     00 14 06 F6 | 	mov	arg02, #0
0ab04     8C BD B0 FD | 	call	#__system___float_tointeger
0ab08     0C 4E 05 F1 | 	add	fp, #12
0ab0c     A7 FA 61 FC | 	wrlong	result1, fp
0ab10     0C 4E 85 F1 | 	sub	fp, #12
0ab14                 | LR__0911
0ab14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0ab14     08 4E 05 F1 | 	add	fp, #8
0ab18     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab1c     08 4E 85 F1 | 	sub	fp, #8
0ab20     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0ab24     14 4E 05 A1 |  if_e	add	fp, #20
0ab28     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ab2c     14 4E 85 A1 |  if_e	sub	fp, #20
0ab30     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ab34     20 00 90 5D |  if_ne	jmp	#LR__0912
0ab38     0C 4E 05 F1 | 	add	fp, #12
0ab3c     A7 1E 02 FB | 	rdlong	local01, fp
0ab40     0C 4E 85 F1 | 	sub	fp, #12
0ab44     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab48     0F 61 12 FD | 	qdiv	muldivb_, local01
0ab4c     18 1E 62 FD | 	getqx	local01
0ab50     A7 1E 62 FC | 	wrlong	local01, fp
0ab54     E0 00 90 FD | 	jmp	#LR__0916
0ab58                 | LR__0912
0ab58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0ab58     08 4E 05 F1 | 	add	fp, #8
0ab5c     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab60     08 4E 85 F1 | 	sub	fp, #8
0ab64     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0ab68     14 4E 05 A1 |  if_e	add	fp, #20
0ab6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ab70     14 4E 85 A1 |  if_e	sub	fp, #20
0ab74     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ab78     2C 00 90 5D |  if_ne	jmp	#LR__0913
0ab7c     0C 4E 05 F1 | 	add	fp, #12
0ab80     A7 1E 02 FB | 	rdlong	local01, fp
0ab84     0C 4E 85 F1 | 	sub	fp, #12
0ab88     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab8c     0F 61 12 FD | 	qdiv	muldivb_, local01
0ab90     18 1E 62 FD | 	getqx	local01
0ab94     A7 1E 62 FC | 	wrlong	local01, fp
0ab98     08 4E 05 F1 | 	add	fp, #8
0ab9c     A7 38 68 FC | 	wrlong	#28, fp
0aba0     08 4E 85 F1 | 	sub	fp, #8
0aba4     90 00 90 FD | 	jmp	#LR__0916
0aba8                 | LR__0913
0aba8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0aba8     08 4E 05 F1 | 	add	fp, #8
0abac     A7 60 02 FB | 	rdlong	muldivb_, fp
0abb0     08 4E 85 F1 | 	sub	fp, #8
0abb4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0abb8     14 4E 05 A1 |  if_e	add	fp, #20
0abbc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0abc0     14 4E 85 A1 |  if_e	sub	fp, #20
0abc4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0abc8     1C 00 90 5D |  if_ne	jmp	#LR__0914
0abcc     A7 5E 02 FB | 	rdlong	muldiva_, fp
0abd0     0C 4E 05 F1 | 	add	fp, #12
0abd4     A7 60 02 FB | 	rdlong	muldivb_, fp
0abd8     0C 4E 85 F1 | 	sub	fp, #12
0abdc     BA 00 A0 FD | 	call	#divide_
0abe0     A7 60 62 FC | 	wrlong	muldivb_, fp
0abe4     50 00 90 FD | 	jmp	#LR__0916
0abe8                 | LR__0914
0abe8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0abe8     08 4E 05 F1 | 	add	fp, #8
0abec     A7 60 02 FB | 	rdlong	muldivb_, fp
0abf0     08 4E 85 F1 | 	sub	fp, #8
0abf4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0abf8     14 4E 05 A1 |  if_e	add	fp, #20
0abfc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ac00     14 4E 85 A1 |  if_e	sub	fp, #20
0ac04     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ac08     1C 00 90 5D |  if_ne	jmp	#LR__0915
0ac0c     A7 5E 02 FB | 	rdlong	muldiva_, fp
0ac10     0C 4E 05 F1 | 	add	fp, #12
0ac14     A7 60 02 FB | 	rdlong	muldivb_, fp
0ac18     0C 4E 85 F1 | 	sub	fp, #12
0ac1c     BA 00 A0 FD | 	call	#divide_
0ac20     A7 60 62 FC | 	wrlong	muldivb_, fp
0ac24     10 00 90 FD | 	jmp	#LR__0916
0ac28                 | LR__0915
0ac28     A7 16 68 FC | 	wrlong	#11, fp
0ac2c     08 4E 05 F1 | 	add	fp, #8
0ac30     A7 FE 69 FC | 	wrlong	#255, fp
0ac34     08 4E 85 F1 | 	sub	fp, #8
0ac38                 | LR__0916
0ac38     A7 12 02 F6 | 	mov	arg01, fp
0ac3c     78 D4 BF FD | 	call	#_push
0ac40     A7 F0 03 F6 | 	mov	ptra, fp
0ac44     B2 00 A0 FD | 	call	#popregs_
0ac48                 | _do_div_ret
0ac48     2D 00 64 FD | 	ret
0ac4c                 | 
0ac4c                 | ' 
0ac4c                 | ' sub do_fdiv 
0ac4c                 | _do_fdiv
0ac4c     02 4A 05 F6 | 	mov	COUNT_, #2
0ac50     A8 00 A0 FD | 	call	#pushregs_
0ac54     18 F0 07 F1 | 	add	ptra, #24
0ac58     C4 D3 BF FD | 	call	#_pop
0ac5c     FD 14 02 F6 | 	mov	arg02, result1
0ac60     FE 12 02 F6 | 	mov	arg01, result2
0ac64     FF 1E 02 F6 | 	mov	local01, result3
0ac68     0C 4E 05 F1 | 	add	fp, #12
0ac6c     A7 14 62 FC | 	wrlong	arg02, fp
0ac70     04 4E 05 F1 | 	add	fp, #4
0ac74     A7 12 62 FC | 	wrlong	arg01, fp
0ac78     04 4E 05 F1 | 	add	fp, #4
0ac7c     A7 1E 62 FC | 	wrlong	local01, fp
0ac80     14 4E 85 F1 | 	sub	fp, #20
0ac84     98 D3 BF FD | 	call	#_pop
0ac88     A7 FA 61 FC | 	wrlong	result1, fp
0ac8c     04 4E 05 F1 | 	add	fp, #4
0ac90     A7 FC 61 FC | 	wrlong	result2, fp
0ac94     04 4E 05 F1 | 	add	fp, #4
0ac98     A7 FE 61 FC | 	wrlong	result3, fp
0ac9c                 | ' 
0ac9c                 | ' t2=pop()
0ac9c                 | ' t1=pop()
0ac9c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0ac9c     08 4E 85 F1 | 	sub	fp, #8
0aca0     1F FE 0D F2 | 	cmp	result3, #31 wz
0aca4     14 4E 05 51 |  if_ne	add	fp, #20
0aca8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0acac     14 4E 85 51 |  if_ne	sub	fp, #20
0acb0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0acb4     A7 14 68 AC |  if_e	wrlong	#10, fp
0acb8     08 4E 05 A1 |  if_e	add	fp, #8
0acbc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0acc0     08 4E 85 A1 |  if_e	sub	fp, #8
0acc4     38 01 90 AD |  if_e	jmp	#LR__0925
0acc8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0acc8     08 4E 05 F1 | 	add	fp, #8
0accc     A7 14 02 FB | 	rdlong	arg02, fp
0acd0     08 4E 85 F1 | 	sub	fp, #8
0acd4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0acd8     28 00 90 5D |  if_ne	jmp	#LR__0920
0acdc     08 4E 05 F1 | 	add	fp, #8
0ace0     A7 3C 68 FC | 	wrlong	#30, fp
0ace4     08 4E 85 F1 | 	sub	fp, #8
0ace8     A7 12 02 FB | 	rdlong	arg01, fp
0acec     09 13 52 F6 | 	abs	arg01, arg01 wc
0acf0     1F 20 C6 C9 |  if_b	decod	local02, #31
0acf4     00 20 06 36 |  if_ae	mov	local02, #0
0acf8     A4 B3 B0 FD | 	call	#__system___float_fromuns
0acfc     10 FB 61 F5 | 	xor	result1, local02
0ad00     A7 FA 61 FC | 	wrlong	result1, fp
0ad04                 | LR__0920
0ad04                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0ad04     08 4E 05 F1 | 	add	fp, #8
0ad08     A7 14 02 FB | 	rdlong	arg02, fp
0ad0c     08 4E 85 F1 | 	sub	fp, #8
0ad10     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ad14     18 00 90 5D |  if_ne	jmp	#LR__0921
0ad18     08 4E 05 F1 | 	add	fp, #8
0ad1c     A7 3C 68 FC | 	wrlong	#30, fp
0ad20     08 4E 85 F1 | 	sub	fp, #8
0ad24     A7 12 02 FB | 	rdlong	arg01, fp
0ad28     74 B3 B0 FD | 	call	#__system___float_fromuns
0ad2c     A7 FA 61 FC | 	wrlong	result1, fp
0ad30                 | LR__0921
0ad30                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ad30     14 4E 05 F1 | 	add	fp, #20
0ad34     A7 14 02 FB | 	rdlong	arg02, fp
0ad38     14 4E 85 F1 | 	sub	fp, #20
0ad3c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ad40     34 00 90 5D |  if_ne	jmp	#LR__0922
0ad44     14 4E 05 F1 | 	add	fp, #20
0ad48     A7 3C 68 FC | 	wrlong	#30, fp
0ad4c     08 4E 85 F1 | 	sub	fp, #8
0ad50     A7 12 02 FB | 	rdlong	arg01, fp
0ad54     0C 4E 85 F1 | 	sub	fp, #12
0ad58     09 13 52 F6 | 	abs	arg01, arg01 wc
0ad5c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ad60     00 20 06 36 |  if_ae	mov	local02, #0
0ad64     38 B3 B0 FD | 	call	#__system___float_fromuns
0ad68     10 FB 61 F5 | 	xor	result1, local02
0ad6c     0C 4E 05 F1 | 	add	fp, #12
0ad70     A7 FA 61 FC | 	wrlong	result1, fp
0ad74     0C 4E 85 F1 | 	sub	fp, #12
0ad78                 | LR__0922
0ad78                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ad78     14 4E 05 F1 | 	add	fp, #20
0ad7c     A7 14 02 FB | 	rdlong	arg02, fp
0ad80     14 4E 85 F1 | 	sub	fp, #20
0ad84     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ad88     24 00 90 5D |  if_ne	jmp	#LR__0923
0ad8c     14 4E 05 F1 | 	add	fp, #20
0ad90     A7 3C 68 FC | 	wrlong	#30, fp
0ad94     08 4E 85 F1 | 	sub	fp, #8
0ad98     A7 12 02 FB | 	rdlong	arg01, fp
0ad9c     0C 4E 85 F1 | 	sub	fp, #12
0ada0     FC B2 B0 FD | 	call	#__system___float_fromuns
0ada4     0C 4E 05 F1 | 	add	fp, #12
0ada8     A7 FA 61 FC | 	wrlong	result1, fp
0adac     0C 4E 85 F1 | 	sub	fp, #12
0adb0                 | LR__0923
0adb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0adb0     08 4E 05 F1 | 	add	fp, #8
0adb4     A7 14 02 FB | 	rdlong	arg02, fp
0adb8     08 4E 85 F1 | 	sub	fp, #8
0adbc     1E 14 0E F2 | 	cmp	arg02, #30 wz
0adc0     14 4E 05 A1 |  if_e	add	fp, #20
0adc4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0adc8     14 4E 85 A1 |  if_e	sub	fp, #20
0adcc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0add0     1C 00 90 5D |  if_ne	jmp	#LR__0924
0add4     A7 12 02 FB | 	rdlong	arg01, fp
0add8     0C 4E 05 F1 | 	add	fp, #12
0addc     A7 14 02 FB | 	rdlong	arg02, fp
0ade0     0C 4E 85 F1 | 	sub	fp, #12
0ade4     E8 B7 B0 FD | 	call	#__system___float_div
0ade8     A7 FA 61 FC | 	wrlong	result1, fp
0adec     10 00 90 FD | 	jmp	#LR__0925
0adf0                 | LR__0924
0adf0     A7 16 68 FC | 	wrlong	#11, fp
0adf4     08 4E 05 F1 | 	add	fp, #8
0adf8     A7 FE 69 FC | 	wrlong	#255, fp
0adfc     08 4E 85 F1 | 	sub	fp, #8
0ae00                 | LR__0925
0ae00     A7 12 02 F6 | 	mov	arg01, fp
0ae04     B0 D2 BF FD | 	call	#_push
0ae08     A7 F0 03 F6 | 	mov	ptra, fp
0ae0c     B2 00 A0 FD | 	call	#popregs_
0ae10                 | _do_fdiv_ret
0ae10     2D 00 64 FD | 	ret
0ae14                 | 
0ae14                 | ' 
0ae14                 | ' 
0ae14                 | ' sub do_mod 
0ae14                 | _do_mod
0ae14     01 4A 05 F6 | 	mov	COUNT_, #1
0ae18     A8 00 A0 FD | 	call	#pushregs_
0ae1c     18 F0 07 F1 | 	add	ptra, #24
0ae20     FC D1 BF FD | 	call	#_pop
0ae24     FD 60 02 F6 | 	mov	muldivb_, result1
0ae28     FE 5E 02 F6 | 	mov	muldiva_, result2
0ae2c     FF 1E 02 F6 | 	mov	local01, result3
0ae30     0C 4E 05 F1 | 	add	fp, #12
0ae34     A7 60 62 FC | 	wrlong	muldivb_, fp
0ae38     04 4E 05 F1 | 	add	fp, #4
0ae3c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0ae40     04 4E 05 F1 | 	add	fp, #4
0ae44     A7 1E 62 FC | 	wrlong	local01, fp
0ae48     14 4E 85 F1 | 	sub	fp, #20
0ae4c     D0 D1 BF FD | 	call	#_pop
0ae50     A7 FA 61 FC | 	wrlong	result1, fp
0ae54     04 4E 05 F1 | 	add	fp, #4
0ae58     A7 FC 61 FC | 	wrlong	result2, fp
0ae5c     04 4E 05 F1 | 	add	fp, #4
0ae60     A7 FE 61 FC | 	wrlong	result3, fp
0ae64                 | ' 
0ae64                 | ' t2=pop()
0ae64                 | ' t1=pop()
0ae64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0ae64     08 4E 85 F1 | 	sub	fp, #8
0ae68     1F FE 0D F2 | 	cmp	result3, #31 wz
0ae6c     14 4E 05 51 |  if_ne	add	fp, #20
0ae70     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ae74     14 4E 85 51 |  if_ne	sub	fp, #20
0ae78     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0ae7c     A7 14 68 AC |  if_e	wrlong	#10, fp
0ae80     08 4E 05 A1 |  if_e	add	fp, #8
0ae84     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ae88     08 4E 85 A1 |  if_e	sub	fp, #8
0ae8c     90 01 90 AD |  if_e	jmp	#LR__0936
0ae90                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ae90     08 4E 05 F1 | 	add	fp, #8
0ae94     A7 60 02 FB | 	rdlong	muldivb_, fp
0ae98     08 4E 85 F1 | 	sub	fp, #8
0ae9c     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aea0     1C 00 90 5D |  if_ne	jmp	#LR__0930
0aea4     08 4E 05 F1 | 	add	fp, #8
0aea8     A7 38 68 FC | 	wrlong	#28, fp
0aeac     08 4E 85 F1 | 	sub	fp, #8
0aeb0     A7 12 02 FB | 	rdlong	arg01, fp
0aeb4     00 14 06 F6 | 	mov	arg02, #0
0aeb8     D8 B9 B0 FD | 	call	#__system___float_tointeger
0aebc     A7 FA 61 FC | 	wrlong	result1, fp
0aec0                 | LR__0930
0aec0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0aec0     14 4E 05 F1 | 	add	fp, #20
0aec4     A7 60 02 FB | 	rdlong	muldivb_, fp
0aec8     14 4E 85 F1 | 	sub	fp, #20
0aecc     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aed0     28 00 90 5D |  if_ne	jmp	#LR__0931
0aed4     14 4E 05 F1 | 	add	fp, #20
0aed8     A7 38 68 FC | 	wrlong	#28, fp
0aedc     08 4E 85 F1 | 	sub	fp, #8
0aee0     A7 12 02 FB | 	rdlong	arg01, fp
0aee4     0C 4E 85 F1 | 	sub	fp, #12
0aee8     00 14 06 F6 | 	mov	arg02, #0
0aeec     A4 B9 B0 FD | 	call	#__system___float_tointeger
0aef0     0C 4E 05 F1 | 	add	fp, #12
0aef4     A7 FA 61 FC | 	wrlong	result1, fp
0aef8     0C 4E 85 F1 | 	sub	fp, #12
0aefc                 | LR__0931
0aefc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0aefc     08 4E 05 F1 | 	add	fp, #8
0af00     A7 60 02 FB | 	rdlong	muldivb_, fp
0af04     08 4E 85 F1 | 	sub	fp, #8
0af08     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0af0c     14 4E 05 A1 |  if_e	add	fp, #20
0af10     A7 1E 02 AB |  if_e	rdlong	local01, fp
0af14     14 4E 85 A1 |  if_e	sub	fp, #20
0af18     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0af1c     20 00 90 5D |  if_ne	jmp	#LR__0932
0af20     0C 4E 05 F1 | 	add	fp, #12
0af24     A7 1E 02 FB | 	rdlong	local01, fp
0af28     0C 4E 85 F1 | 	sub	fp, #12
0af2c     A7 60 02 FB | 	rdlong	muldivb_, fp
0af30     0F 61 12 FD | 	qdiv	muldivb_, local01
0af34     19 1E 62 FD | 	getqy	local01
0af38     A7 1E 62 FC | 	wrlong	local01, fp
0af3c     E0 00 90 FD | 	jmp	#LR__0936
0af40                 | LR__0932
0af40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0af40     08 4E 05 F1 | 	add	fp, #8
0af44     A7 60 02 FB | 	rdlong	muldivb_, fp
0af48     08 4E 85 F1 | 	sub	fp, #8
0af4c     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0af50     14 4E 05 A1 |  if_e	add	fp, #20
0af54     A7 1E 02 AB |  if_e	rdlong	local01, fp
0af58     14 4E 85 A1 |  if_e	sub	fp, #20
0af5c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0af60     2C 00 90 5D |  if_ne	jmp	#LR__0933
0af64     0C 4E 05 F1 | 	add	fp, #12
0af68     A7 1E 02 FB | 	rdlong	local01, fp
0af6c     0C 4E 85 F1 | 	sub	fp, #12
0af70     A7 60 02 FB | 	rdlong	muldivb_, fp
0af74     0F 61 12 FD | 	qdiv	muldivb_, local01
0af78     19 1E 62 FD | 	getqy	local01
0af7c     A7 1E 62 FC | 	wrlong	local01, fp
0af80     08 4E 05 F1 | 	add	fp, #8
0af84     A7 38 68 FC | 	wrlong	#28, fp
0af88     08 4E 85 F1 | 	sub	fp, #8
0af8c     90 00 90 FD | 	jmp	#LR__0936
0af90                 | LR__0933
0af90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0af90     08 4E 05 F1 | 	add	fp, #8
0af94     A7 60 02 FB | 	rdlong	muldivb_, fp
0af98     08 4E 85 F1 | 	sub	fp, #8
0af9c     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0afa0     14 4E 05 A1 |  if_e	add	fp, #20
0afa4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0afa8     14 4E 85 A1 |  if_e	sub	fp, #20
0afac     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0afb0     1C 00 90 5D |  if_ne	jmp	#LR__0934
0afb4     A7 5E 02 FB | 	rdlong	muldiva_, fp
0afb8     0C 4E 05 F1 | 	add	fp, #12
0afbc     A7 60 02 FB | 	rdlong	muldivb_, fp
0afc0     0C 4E 85 F1 | 	sub	fp, #12
0afc4     BA 00 A0 FD | 	call	#divide_
0afc8     A7 5E 62 FC | 	wrlong	muldiva_, fp
0afcc     50 00 90 FD | 	jmp	#LR__0936
0afd0                 | LR__0934
0afd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0afd0     08 4E 05 F1 | 	add	fp, #8
0afd4     A7 60 02 FB | 	rdlong	muldivb_, fp
0afd8     08 4E 85 F1 | 	sub	fp, #8
0afdc     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0afe0     14 4E 05 A1 |  if_e	add	fp, #20
0afe4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0afe8     14 4E 85 A1 |  if_e	sub	fp, #20
0afec     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0aff0     1C 00 90 5D |  if_ne	jmp	#LR__0935
0aff4     A7 5E 02 FB | 	rdlong	muldiva_, fp
0aff8     0C 4E 05 F1 | 	add	fp, #12
0affc     A7 60 02 FB | 	rdlong	muldivb_, fp
0b000     0C 4E 85 F1 | 	sub	fp, #12
0b004     BA 00 A0 FD | 	call	#divide_
0b008     A7 5E 62 FC | 	wrlong	muldiva_, fp
0b00c     10 00 90 FD | 	jmp	#LR__0936
0b010                 | LR__0935
0b010     A7 16 68 FC | 	wrlong	#11, fp
0b014     08 4E 05 F1 | 	add	fp, #8
0b018     A7 FE 69 FC | 	wrlong	#255, fp
0b01c     08 4E 85 F1 | 	sub	fp, #8
0b020                 | LR__0936
0b020     A7 12 02 F6 | 	mov	arg01, fp
0b024     90 D0 BF FD | 	call	#_push
0b028     A7 F0 03 F6 | 	mov	ptra, fp
0b02c     B2 00 A0 FD | 	call	#popregs_
0b030                 | _do_mod_ret
0b030     2D 00 64 FD | 	ret
0b034                 | 
0b034                 | ' 
0b034                 | ' sub do_shl 
0b034                 | _do_shl
0b034     03 4A 05 F6 | 	mov	COUNT_, #3
0b038     A8 00 A0 FD | 	call	#pushregs_
0b03c     18 F0 07 F1 | 	add	ptra, #24
0b040     DC CF BF FD | 	call	#_pop
0b044     FD 12 02 F6 | 	mov	arg01, result1
0b048     FE 1E 02 F6 | 	mov	local01, result2
0b04c     FF 20 02 F6 | 	mov	local02, result3
0b050     0C 4E 05 F1 | 	add	fp, #12
0b054     A7 12 62 FC | 	wrlong	arg01, fp
0b058     04 4E 05 F1 | 	add	fp, #4
0b05c     A7 1E 62 FC | 	wrlong	local01, fp
0b060     04 4E 05 F1 | 	add	fp, #4
0b064     A7 20 62 FC | 	wrlong	local02, fp
0b068     14 4E 85 F1 | 	sub	fp, #20
0b06c     B0 CF BF FD | 	call	#_pop
0b070     FF 22 02 F6 | 	mov	local03, result3
0b074     A7 FA 61 FC | 	wrlong	result1, fp
0b078     04 4E 05 F1 | 	add	fp, #4
0b07c     A7 FC 61 FC | 	wrlong	result2, fp
0b080     04 4E 05 F1 | 	add	fp, #4
0b084     A7 22 62 FC | 	wrlong	local03, fp
0b088                 | ' 
0b088                 | ' t2=pop()
0b088                 | ' t1=pop()
0b088                 | ' 
0b088                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0b088     08 4E 85 F1 | 	sub	fp, #8
0b08c     1C 22 0E F2 | 	cmp	local03, #28 wz
0b090     A7 22 02 AB |  if_e	rdlong	local03, fp
0b094     A7 22 62 AC |  if_e	wrlong	local03, fp
0b098     08 4E 05 A1 |  if_e	add	fp, #8
0b09c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0b0a0     08 4E 85 A1 |  if_e	sub	fp, #8
0b0a4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0b0a4     14 4E 05 F1 | 	add	fp, #20
0b0a8     A7 22 02 FB | 	rdlong	local03, fp
0b0ac     14 4E 85 F1 | 	sub	fp, #20
0b0b0     1C 22 0E F2 | 	cmp	local03, #28 wz
0b0b4     18 00 90 5D |  if_ne	jmp	#LR__0940
0b0b8     0C 4E 05 F1 | 	add	fp, #12
0b0bc     A7 22 02 FB | 	rdlong	local03, fp
0b0c0     A7 22 62 FC | 	wrlong	local03, fp
0b0c4     08 4E 05 F1 | 	add	fp, #8
0b0c8     A7 3A 68 FC | 	wrlong	#29, fp
0b0cc     14 4E 85 F1 | 	sub	fp, #20
0b0d0                 | LR__0940
0b0d0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0b0d0     08 4E 05 F1 | 	add	fp, #8
0b0d4     A7 22 02 FB | 	rdlong	local03, fp
0b0d8     08 4E 85 F1 | 	sub	fp, #8
0b0dc     1F 22 0E F2 | 	cmp	local03, #31 wz
0b0e0     14 4E 05 51 |  if_ne	add	fp, #20
0b0e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0b0e8     14 4E 85 51 |  if_ne	sub	fp, #20
0b0ec     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0b0f0     08 4E 05 51 |  if_ne	add	fp, #8
0b0f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b0f8     08 4E 85 51 |  if_ne	sub	fp, #8
0b0fc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0b100     14 4E 05 51 |  if_ne	add	fp, #20
0b104     14 4E 85 51 |  if_ne	sub	fp, #20
0b108     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0b10c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0b110     08 4E 05 A1 |  if_e	add	fp, #8
0b114     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b118     08 4E 85 A1 |  if_e	sub	fp, #8
0b11c     18 00 90 AD |  if_e	jmp	#LR__0941
0b120     A7 22 02 FB | 	rdlong	local03, fp
0b124     0C 4E 05 F1 | 	add	fp, #12
0b128     A7 1E 02 FB | 	rdlong	local01, fp
0b12c     0C 4E 85 F1 | 	sub	fp, #12
0b130     0F 23 62 F0 | 	shl	local03, local01
0b134     A7 22 62 FC | 	wrlong	local03, fp
0b138                 | LR__0941
0b138     A7 12 02 F6 | 	mov	arg01, fp
0b13c     78 CF BF FD | 	call	#_push
0b140     A7 F0 03 F6 | 	mov	ptra, fp
0b144     B2 00 A0 FD | 	call	#popregs_
0b148                 | _do_shl_ret
0b148     2D 00 64 FD | 	ret
0b14c                 | 
0b14c                 | ' 
0b14c                 | ' sub do_shr 
0b14c                 | _do_shr
0b14c     03 4A 05 F6 | 	mov	COUNT_, #3
0b150     A8 00 A0 FD | 	call	#pushregs_
0b154     18 F0 07 F1 | 	add	ptra, #24
0b158     C4 CE BF FD | 	call	#_pop
0b15c     FD 12 02 F6 | 	mov	arg01, result1
0b160     FE 1E 02 F6 | 	mov	local01, result2
0b164     FF 20 02 F6 | 	mov	local02, result3
0b168     0C 4E 05 F1 | 	add	fp, #12
0b16c     A7 12 62 FC | 	wrlong	arg01, fp
0b170     04 4E 05 F1 | 	add	fp, #4
0b174     A7 1E 62 FC | 	wrlong	local01, fp
0b178     04 4E 05 F1 | 	add	fp, #4
0b17c     A7 20 62 FC | 	wrlong	local02, fp
0b180     14 4E 85 F1 | 	sub	fp, #20
0b184     98 CE BF FD | 	call	#_pop
0b188     FF 22 02 F6 | 	mov	local03, result3
0b18c     A7 FA 61 FC | 	wrlong	result1, fp
0b190     04 4E 05 F1 | 	add	fp, #4
0b194     A7 FC 61 FC | 	wrlong	result2, fp
0b198     04 4E 05 F1 | 	add	fp, #4
0b19c     A7 22 62 FC | 	wrlong	local03, fp
0b1a0                 | ' t2=pop()
0b1a0                 | ' t1=pop()
0b1a0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0b1a0     08 4E 85 F1 | 	sub	fp, #8
0b1a4     1C 22 0E F2 | 	cmp	local03, #28 wz
0b1a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b1ac     A7 22 62 AC |  if_e	wrlong	local03, fp
0b1b0     08 4E 05 A1 |  if_e	add	fp, #8
0b1b4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0b1b8     08 4E 85 A1 |  if_e	sub	fp, #8
0b1bc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0b1bc     14 4E 05 F1 | 	add	fp, #20
0b1c0     A7 22 02 FB | 	rdlong	local03, fp
0b1c4     14 4E 85 F1 | 	sub	fp, #20
0b1c8     1C 22 0E F2 | 	cmp	local03, #28 wz
0b1cc     18 00 90 5D |  if_ne	jmp	#LR__0950
0b1d0     0C 4E 05 F1 | 	add	fp, #12
0b1d4     A7 22 02 FB | 	rdlong	local03, fp
0b1d8     A7 22 62 FC | 	wrlong	local03, fp
0b1dc     08 4E 05 F1 | 	add	fp, #8
0b1e0     A7 3A 68 FC | 	wrlong	#29, fp
0b1e4     14 4E 85 F1 | 	sub	fp, #20
0b1e8                 | LR__0950
0b1e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0b1e8     08 4E 05 F1 | 	add	fp, #8
0b1ec     A7 22 02 FB | 	rdlong	local03, fp
0b1f0     08 4E 85 F1 | 	sub	fp, #8
0b1f4     1F 22 0E F2 | 	cmp	local03, #31 wz
0b1f8     14 4E 05 51 |  if_ne	add	fp, #20
0b1fc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0b200     14 4E 85 51 |  if_ne	sub	fp, #20
0b204     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0b208     08 4E 05 51 |  if_ne	add	fp, #8
0b20c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b210     08 4E 85 51 |  if_ne	sub	fp, #8
0b214     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0b218     14 4E 05 51 |  if_ne	add	fp, #20
0b21c     14 4E 85 51 |  if_ne	sub	fp, #20
0b220     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0b224     A7 0C 68 AC |  if_e	wrlong	#6, fp
0b228     08 4E 05 A1 |  if_e	add	fp, #8
0b22c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b230     08 4E 85 A1 |  if_e	sub	fp, #8
0b234     18 00 90 AD |  if_e	jmp	#LR__0951
0b238     A7 22 02 FB | 	rdlong	local03, fp
0b23c     0C 4E 05 F1 | 	add	fp, #12
0b240     A7 1E 02 FB | 	rdlong	local01, fp
0b244     0C 4E 85 F1 | 	sub	fp, #12
0b248     0F 23 42 F0 | 	shr	local03, local01
0b24c     A7 22 62 FC | 	wrlong	local03, fp
0b250                 | LR__0951
0b250     A7 12 02 F6 | 	mov	arg01, fp
0b254     60 CE BF FD | 	call	#_push
0b258     A7 F0 03 F6 | 	mov	ptra, fp
0b25c     B2 00 A0 FD | 	call	#popregs_
0b260                 | _do_shr_ret
0b260     2D 00 64 FD | 	ret
0b264                 | 
0b264                 | ' 
0b264                 | ' sub do_power 
0b264                 | _do_power
0b264     02 4A 05 F6 | 	mov	COUNT_, #2
0b268     A8 00 A0 FD | 	call	#pushregs_
0b26c     18 F0 07 F1 | 	add	ptra, #24
0b270     AC CD BF FD | 	call	#_pop
0b274     FD 14 02 F6 | 	mov	arg02, result1
0b278     FE 12 02 F6 | 	mov	arg01, result2
0b27c     FF 1E 02 F6 | 	mov	local01, result3
0b280     0C 4E 05 F1 | 	add	fp, #12
0b284     A7 14 62 FC | 	wrlong	arg02, fp
0b288     04 4E 05 F1 | 	add	fp, #4
0b28c     A7 12 62 FC | 	wrlong	arg01, fp
0b290     04 4E 05 F1 | 	add	fp, #4
0b294     A7 1E 62 FC | 	wrlong	local01, fp
0b298     14 4E 85 F1 | 	sub	fp, #20
0b29c     80 CD BF FD | 	call	#_pop
0b2a0     A7 FA 61 FC | 	wrlong	result1, fp
0b2a4     04 4E 05 F1 | 	add	fp, #4
0b2a8     A7 FC 61 FC | 	wrlong	result2, fp
0b2ac     04 4E 05 F1 | 	add	fp, #4
0b2b0     A7 FE 61 FC | 	wrlong	result3, fp
0b2b4                 | ' t2=pop()
0b2b4                 | ' t1=pop()
0b2b4                 | ' 
0b2b4                 | ' 
0b2b4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0b2b4     08 4E 85 F1 | 	sub	fp, #8
0b2b8     1F FE 0D F2 | 	cmp	result3, #31 wz
0b2bc     14 4E 05 51 |  if_ne	add	fp, #20
0b2c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b2c4     14 4E 85 51 |  if_ne	sub	fp, #20
0b2c8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0b2cc     A7 18 68 AC |  if_e	wrlong	#12, fp
0b2d0     08 4E 05 A1 |  if_e	add	fp, #8
0b2d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b2d8     08 4E 85 A1 |  if_e	sub	fp, #8
0b2dc     38 01 90 AD |  if_e	jmp	#LR__0965
0b2e0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0b2e0     08 4E 05 F1 | 	add	fp, #8
0b2e4     A7 14 02 FB | 	rdlong	arg02, fp
0b2e8     08 4E 85 F1 | 	sub	fp, #8
0b2ec     1C 14 0E F2 | 	cmp	arg02, #28 wz
0b2f0     28 00 90 5D |  if_ne	jmp	#LR__0960
0b2f4     08 4E 05 F1 | 	add	fp, #8
0b2f8     A7 3C 68 FC | 	wrlong	#30, fp
0b2fc     08 4E 85 F1 | 	sub	fp, #8
0b300     A7 12 02 FB | 	rdlong	arg01, fp
0b304     09 13 52 F6 | 	abs	arg01, arg01 wc
0b308     1F 20 C6 C9 |  if_b	decod	local02, #31
0b30c     00 20 06 36 |  if_ae	mov	local02, #0
0b310     8C AD B0 FD | 	call	#__system___float_fromuns
0b314     10 FB 61 F5 | 	xor	result1, local02
0b318     A7 FA 61 FC | 	wrlong	result1, fp
0b31c                 | LR__0960
0b31c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0b31c     08 4E 05 F1 | 	add	fp, #8
0b320     A7 14 02 FB | 	rdlong	arg02, fp
0b324     08 4E 85 F1 | 	sub	fp, #8
0b328     1D 14 0E F2 | 	cmp	arg02, #29 wz
0b32c     18 00 90 5D |  if_ne	jmp	#LR__0961
0b330     08 4E 05 F1 | 	add	fp, #8
0b334     A7 3C 68 FC | 	wrlong	#30, fp
0b338     08 4E 85 F1 | 	sub	fp, #8
0b33c     A7 12 02 FB | 	rdlong	arg01, fp
0b340     5C AD B0 FD | 	call	#__system___float_fromuns
0b344     A7 FA 61 FC | 	wrlong	result1, fp
0b348                 | LR__0961
0b348                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0b348     14 4E 05 F1 | 	add	fp, #20
0b34c     A7 14 02 FB | 	rdlong	arg02, fp
0b350     14 4E 85 F1 | 	sub	fp, #20
0b354     1C 14 0E F2 | 	cmp	arg02, #28 wz
0b358     34 00 90 5D |  if_ne	jmp	#LR__0962
0b35c     14 4E 05 F1 | 	add	fp, #20
0b360     A7 3C 68 FC | 	wrlong	#30, fp
0b364     08 4E 85 F1 | 	sub	fp, #8
0b368     A7 12 02 FB | 	rdlong	arg01, fp
0b36c     0C 4E 85 F1 | 	sub	fp, #12
0b370     09 13 52 F6 | 	abs	arg01, arg01 wc
0b374     1F 20 C6 C9 |  if_b	decod	local02, #31
0b378     00 20 06 36 |  if_ae	mov	local02, #0
0b37c     20 AD B0 FD | 	call	#__system___float_fromuns
0b380     10 FB 61 F5 | 	xor	result1, local02
0b384     0C 4E 05 F1 | 	add	fp, #12
0b388     A7 FA 61 FC | 	wrlong	result1, fp
0b38c     0C 4E 85 F1 | 	sub	fp, #12
0b390                 | LR__0962
0b390                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0b390     14 4E 05 F1 | 	add	fp, #20
0b394     A7 14 02 FB | 	rdlong	arg02, fp
0b398     14 4E 85 F1 | 	sub	fp, #20
0b39c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0b3a0     24 00 90 5D |  if_ne	jmp	#LR__0963
0b3a4     14 4E 05 F1 | 	add	fp, #20
0b3a8     A7 3C 68 FC | 	wrlong	#30, fp
0b3ac     08 4E 85 F1 | 	sub	fp, #8
0b3b0     A7 12 02 FB | 	rdlong	arg01, fp
0b3b4     0C 4E 85 F1 | 	sub	fp, #12
0b3b8     E4 AC B0 FD | 	call	#__system___float_fromuns
0b3bc     0C 4E 05 F1 | 	add	fp, #12
0b3c0     A7 FA 61 FC | 	wrlong	result1, fp
0b3c4     0C 4E 85 F1 | 	sub	fp, #12
0b3c8                 | LR__0963
0b3c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0b3c8     08 4E 05 F1 | 	add	fp, #8
0b3cc     A7 14 02 FB | 	rdlong	arg02, fp
0b3d0     08 4E 85 F1 | 	sub	fp, #8
0b3d4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0b3d8     14 4E 05 A1 |  if_e	add	fp, #20
0b3dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0b3e0     14 4E 85 A1 |  if_e	sub	fp, #20
0b3e4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0b3e8     1C 00 90 5D |  if_ne	jmp	#LR__0964
0b3ec     A7 12 02 FB | 	rdlong	arg01, fp
0b3f0     0C 4E 05 F1 | 	add	fp, #12
0b3f4     A7 14 02 FB | 	rdlong	arg02, fp
0b3f8     0C 4E 85 F1 | 	sub	fp, #12
0b3fc     38 BC B0 FD | 	call	#__system____builtin_powf
0b400     A7 FA 61 FC | 	wrlong	result1, fp
0b404     10 00 90 FD | 	jmp	#LR__0965
0b408                 | LR__0964
0b408     A7 1A 68 FC | 	wrlong	#13, fp
0b40c     08 4E 05 F1 | 	add	fp, #8
0b410     A7 FE 69 FC | 	wrlong	#255, fp
0b414     08 4E 85 F1 | 	sub	fp, #8
0b418                 | LR__0965
0b418     A7 12 02 F6 | 	mov	arg01, fp
0b41c     98 CC BF FD | 	call	#_push
0b420     A7 F0 03 F6 | 	mov	ptra, fp
0b424     B2 00 A0 FD | 	call	#popregs_
0b428                 | _do_power_ret
0b428     2D 00 64 FD | 	ret
0b42c                 | 
0b42c                 | ' 
0b42c                 | ' 
0b42c                 | ' sub do_eq
0b42c                 | _do_eq
0b42c     05 4A 05 F6 | 	mov	COUNT_, #5
0b430     A8 00 A0 FD | 	call	#pushregs_
0b434     18 F0 07 F1 | 	add	ptra, #24
0b438     E4 CB BF FD | 	call	#_pop
0b43c     FD 1E 02 F6 | 	mov	local01, result1
0b440     FE 20 02 F6 | 	mov	local02, result2
0b444     FF 22 02 F6 | 	mov	local03, result3
0b448     0C 4E 05 F1 | 	add	fp, #12
0b44c     A7 1E 62 FC | 	wrlong	local01, fp
0b450     04 4E 05 F1 | 	add	fp, #4
0b454     A7 20 62 FC | 	wrlong	local02, fp
0b458     04 4E 05 F1 | 	add	fp, #4
0b45c     A7 22 62 FC | 	wrlong	local03, fp
0b460     14 4E 85 F1 | 	sub	fp, #20
0b464     B8 CB BF FD | 	call	#_pop
0b468     FF 22 02 F6 | 	mov	local03, result3
0b46c     A7 FA 61 FC | 	wrlong	result1, fp
0b470     04 4E 05 F1 | 	add	fp, #4
0b474     A7 FC 61 FC | 	wrlong	result2, fp
0b478     04 4E 05 F1 | 	add	fp, #4
0b47c     A7 22 62 FC | 	wrlong	local03, fp
0b480                 | ' t2=pop()
0b480                 | ' t1=pop()
0b480                 | ' 
0b480                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0b480     08 4E 85 F1 | 	sub	fp, #8
0b484     1F 22 0E F2 | 	cmp	local03, #31 wz
0b488     14 4E 05 A1 |  if_e	add	fp, #20
0b48c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b490     14 4E 85 A1 |  if_e	sub	fp, #20
0b494     12 23 02 A6 |  if_e	mov	local03, local04
0b498     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b49c     28 00 90 5D |  if_ne	jmp	#LR__0970
0b4a0     00 1E 06 F6 | 	mov	local01, #0
0b4a4     A7 12 02 FB | 	rdlong	arg01, fp
0b4a8     0C 4E 05 F1 | 	add	fp, #12
0b4ac     A7 14 02 FB | 	rdlong	arg02, fp
0b4b0     0C 4E 85 F1 | 	sub	fp, #12
0b4b4     F0 85 B0 FD | 	call	#__system___string_cmp
0b4b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4bc     00 1E 26 A6 |  if_e	not	local01, #0
0b4c0     A7 1E 62 FC | 	wrlong	local01, fp
0b4c4     04 03 90 FD | 	jmp	#LR__0980
0b4c8                 | LR__0970
0b4c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0b4c8     08 4E 05 F1 | 	add	fp, #8
0b4cc     A7 1E 02 FB | 	rdlong	local01, fp
0b4d0     08 4E 85 F1 | 	sub	fp, #8
0b4d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b4d8     14 4E 05 A1 |  if_e	add	fp, #20
0b4dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b4e0     14 4E 85 A1 |  if_e	sub	fp, #20
0b4e4     12 23 02 A6 |  if_e	mov	local03, local04
0b4e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b4ec     2C 00 90 5D |  if_ne	jmp	#LR__0971
0b4f0     00 1E 06 F6 | 	mov	local01, #0
0b4f4     A7 12 02 FB | 	rdlong	arg01, fp
0b4f8     0C 4E 05 F1 | 	add	fp, #12
0b4fc     A7 14 02 FB | 	rdlong	arg02, fp
0b500     0C 4E 85 F1 | 	sub	fp, #12
0b504     01 16 06 F6 | 	mov	arg03, #1
0b508     F4 B2 B0 FD | 	call	#__system___float_cmp
0b50c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b510     00 1E 26 A6 |  if_e	not	local01, #0
0b514     A7 1E 62 FC | 	wrlong	local01, fp
0b518     B0 02 90 FD | 	jmp	#LR__0980
0b51c                 | LR__0971
0b51c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0b51c     08 4E 05 F1 | 	add	fp, #8
0b520     A7 1E 02 FB | 	rdlong	local01, fp
0b524     08 4E 85 F1 | 	sub	fp, #8
0b528     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b52c     14 4E 05 A1 |  if_e	add	fp, #20
0b530     A7 24 02 AB |  if_e	rdlong	local04, fp
0b534     14 4E 85 A1 |  if_e	sub	fp, #20
0b538     12 23 02 A6 |  if_e	mov	local03, local04
0b53c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b540     48 00 90 5D |  if_ne	jmp	#LR__0972
0b544     00 1E 06 F6 | 	mov	local01, #0
0b548     A7 20 02 FB | 	rdlong	local02, fp
0b54c     0C 4E 05 F1 | 	add	fp, #12
0b550     A7 12 02 FB | 	rdlong	arg01, fp
0b554     0C 4E 85 F1 | 	sub	fp, #12
0b558     09 13 52 F6 | 	abs	arg01, arg01 wc
0b55c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b560     00 26 06 36 |  if_ae	mov	local05, #0
0b564     38 AB B0 FD | 	call	#__system___float_fromuns
0b568     13 FB 61 F5 | 	xor	result1, local05
0b56c     FD 14 02 F6 | 	mov	arg02, result1
0b570     10 13 02 F6 | 	mov	arg01, local02
0b574     01 16 06 F6 | 	mov	arg03, #1
0b578     84 B2 B0 FD | 	call	#__system___float_cmp
0b57c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b580     00 1E 26 A6 |  if_e	not	local01, #0
0b584     A7 1E 62 FC | 	wrlong	local01, fp
0b588     40 02 90 FD | 	jmp	#LR__0980
0b58c                 | LR__0972
0b58c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0b58c     08 4E 05 F1 | 	add	fp, #8
0b590     A7 1E 02 FB | 	rdlong	local01, fp
0b594     08 4E 85 F1 | 	sub	fp, #8
0b598     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b59c     14 4E 05 A1 |  if_e	add	fp, #20
0b5a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b5a4     14 4E 85 A1 |  if_e	sub	fp, #20
0b5a8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0b5ac     38 00 90 5D |  if_ne	jmp	#LR__0973
0b5b0     00 1E 06 F6 | 	mov	local01, #0
0b5b4     A7 20 02 FB | 	rdlong	local02, fp
0b5b8     0C 4E 05 F1 | 	add	fp, #12
0b5bc     A7 12 02 FB | 	rdlong	arg01, fp
0b5c0     0C 4E 85 F1 | 	sub	fp, #12
0b5c4     D8 AA B0 FD | 	call	#__system___float_fromuns
0b5c8     FD 14 02 F6 | 	mov	arg02, result1
0b5cc     10 13 02 F6 | 	mov	arg01, local02
0b5d0     01 16 06 F6 | 	mov	arg03, #1
0b5d4     28 B2 B0 FD | 	call	#__system___float_cmp
0b5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5dc     00 1E 26 A6 |  if_e	not	local01, #0
0b5e0     A7 1E 62 FC | 	wrlong	local01, fp
0b5e4     E4 01 90 FD | 	jmp	#LR__0980
0b5e8                 | LR__0973
0b5e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0b5e8     08 4E 05 F1 | 	add	fp, #8
0b5ec     A7 1E 02 FB | 	rdlong	local01, fp
0b5f0     08 4E 85 F1 | 	sub	fp, #8
0b5f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b5f8     14 4E 05 A1 |  if_e	add	fp, #20
0b5fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0b600     14 4E 85 A1 |  if_e	sub	fp, #20
0b604     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b608     44 00 90 5D |  if_ne	jmp	#LR__0974
0b60c     00 1E 06 F6 | 	mov	local01, #0
0b610     A7 12 02 FB | 	rdlong	arg01, fp
0b614     09 13 52 F6 | 	abs	arg01, arg01 wc
0b618     1F 26 C6 C9 |  if_b	decod	local05, #31
0b61c     00 26 06 36 |  if_ae	mov	local05, #0
0b620     7C AA B0 FD | 	call	#__system___float_fromuns
0b624     13 FB 61 F5 | 	xor	result1, local05
0b628     FD 12 02 F6 | 	mov	arg01, result1
0b62c     0C 4E 05 F1 | 	add	fp, #12
0b630     A7 14 02 FB | 	rdlong	arg02, fp
0b634     0C 4E 85 F1 | 	sub	fp, #12
0b638     01 16 06 F6 | 	mov	arg03, #1
0b63c     C0 B1 B0 FD | 	call	#__system___float_cmp
0b640     00 FA 0D F2 | 	cmp	result1, #0 wz
0b644     00 1E 26 A6 |  if_e	not	local01, #0
0b648     A7 1E 62 FC | 	wrlong	local01, fp
0b64c     7C 01 90 FD | 	jmp	#LR__0980
0b650                 | LR__0974
0b650                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0b650     08 4E 05 F1 | 	add	fp, #8
0b654     A7 1E 02 FB | 	rdlong	local01, fp
0b658     08 4E 85 F1 | 	sub	fp, #8
0b65c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b660     14 4E 05 A1 |  if_e	add	fp, #20
0b664     A7 22 02 AB |  if_e	rdlong	local03, fp
0b668     14 4E 85 A1 |  if_e	sub	fp, #20
0b66c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b670     24 00 90 5D |  if_ne	jmp	#LR__0975
0b674     00 1E 06 F6 | 	mov	local01, #0
0b678     A7 20 02 FB | 	rdlong	local02, fp
0b67c     0C 4E 05 F1 | 	add	fp, #12
0b680     A7 22 02 FB | 	rdlong	local03, fp
0b684     0C 4E 85 F1 | 	sub	fp, #12
0b688     11 21 0A F2 | 	cmp	local02, local03 wz
0b68c     01 1E 66 A6 |  if_e	neg	local01, #1
0b690     A7 1E 62 FC | 	wrlong	local01, fp
0b694     34 01 90 FD | 	jmp	#LR__0980
0b698                 | LR__0975
0b698                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0b698     08 4E 05 F1 | 	add	fp, #8
0b69c     A7 1E 02 FB | 	rdlong	local01, fp
0b6a0     08 4E 85 F1 | 	sub	fp, #8
0b6a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b6a8     14 4E 05 A1 |  if_e	add	fp, #20
0b6ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6b0     14 4E 85 A1 |  if_e	sub	fp, #20
0b6b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b6b8     24 00 90 5D |  if_ne	jmp	#LR__0976
0b6bc     00 1E 06 F6 | 	mov	local01, #0
0b6c0     A7 20 02 FB | 	rdlong	local02, fp
0b6c4     0C 4E 05 F1 | 	add	fp, #12
0b6c8     A7 22 02 FB | 	rdlong	local03, fp
0b6cc     0C 4E 85 F1 | 	sub	fp, #12
0b6d0     11 21 0A F2 | 	cmp	local02, local03 wz
0b6d4     01 1E 66 A6 |  if_e	neg	local01, #1
0b6d8     A7 1E 62 FC | 	wrlong	local01, fp
0b6dc     EC 00 90 FD | 	jmp	#LR__0980
0b6e0                 | LR__0976
0b6e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0b6e0     08 4E 05 F1 | 	add	fp, #8
0b6e4     A7 1E 02 FB | 	rdlong	local01, fp
0b6e8     08 4E 85 F1 | 	sub	fp, #8
0b6ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b6f0     14 4E 05 A1 |  if_e	add	fp, #20
0b6f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6f8     14 4E 85 A1 |  if_e	sub	fp, #20
0b6fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b700     34 00 90 5D |  if_ne	jmp	#LR__0977
0b704     00 1E 06 F6 | 	mov	local01, #0
0b708     A7 12 02 FB | 	rdlong	arg01, fp
0b70c     90 A9 B0 FD | 	call	#__system___float_fromuns
0b710     FD 12 02 F6 | 	mov	arg01, result1
0b714     0C 4E 05 F1 | 	add	fp, #12
0b718     A7 14 02 FB | 	rdlong	arg02, fp
0b71c     0C 4E 85 F1 | 	sub	fp, #12
0b720     01 16 06 F6 | 	mov	arg03, #1
0b724     D8 B0 B0 FD | 	call	#__system___float_cmp
0b728     00 FA 0D F2 | 	cmp	result1, #0 wz
0b72c     00 1E 26 A6 |  if_e	not	local01, #0
0b730     A7 1E 62 FC | 	wrlong	local01, fp
0b734     94 00 90 FD | 	jmp	#LR__0980
0b738                 | LR__0977
0b738                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0b738     08 4E 05 F1 | 	add	fp, #8
0b73c     A7 1E 02 FB | 	rdlong	local01, fp
0b740     08 4E 85 F1 | 	sub	fp, #8
0b744     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b748     14 4E 05 A1 |  if_e	add	fp, #20
0b74c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b750     14 4E 85 A1 |  if_e	sub	fp, #20
0b754     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b758     24 00 90 5D |  if_ne	jmp	#LR__0978
0b75c     00 1E 06 F6 | 	mov	local01, #0
0b760     A7 20 02 FB | 	rdlong	local02, fp
0b764     0C 4E 05 F1 | 	add	fp, #12
0b768     A7 22 02 FB | 	rdlong	local03, fp
0b76c     0C 4E 85 F1 | 	sub	fp, #12
0b770     11 21 0A F2 | 	cmp	local02, local03 wz
0b774     01 1E 66 A6 |  if_e	neg	local01, #1
0b778     A7 1E 62 FC | 	wrlong	local01, fp
0b77c     4C 00 90 FD | 	jmp	#LR__0980
0b780                 | LR__0978
0b780                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0b780     08 4E 05 F1 | 	add	fp, #8
0b784     A7 1E 02 FB | 	rdlong	local01, fp
0b788     08 4E 85 F1 | 	sub	fp, #8
0b78c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b790     14 4E 05 A1 |  if_e	add	fp, #20
0b794     A7 22 02 AB |  if_e	rdlong	local03, fp
0b798     14 4E 85 A1 |  if_e	sub	fp, #20
0b79c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b7a0     24 00 90 5D |  if_ne	jmp	#LR__0979
0b7a4     00 1E 06 F6 | 	mov	local01, #0
0b7a8     A7 20 02 FB | 	rdlong	local02, fp
0b7ac     0C 4E 05 F1 | 	add	fp, #12
0b7b0     A7 22 02 FB | 	rdlong	local03, fp
0b7b4     0C 4E 85 F1 | 	sub	fp, #12
0b7b8     11 21 0A F2 | 	cmp	local02, local03 wz
0b7bc     01 1E 66 A6 |  if_e	neg	local01, #1
0b7c0     A7 1E 62 FC | 	wrlong	local01, fp
0b7c4     04 00 90 FD | 	jmp	#LR__0980
0b7c8                 | LR__0979
0b7c8     A7 00 68 FC | 	wrlong	#0, fp
0b7cc                 | LR__0980
0b7cc     08 4E 05 F1 | 	add	fp, #8
0b7d0     A7 38 68 FC | 	wrlong	#28, fp
0b7d4     08 4E 85 F1 | 	sub	fp, #8
0b7d8     A7 12 02 F6 | 	mov	arg01, fp
0b7dc     D8 C8 BF FD | 	call	#_push
0b7e0     A7 F0 03 F6 | 	mov	ptra, fp
0b7e4     B2 00 A0 FD | 	call	#popregs_
0b7e8                 | _do_eq_ret
0b7e8     2D 00 64 FD | 	ret
0b7ec                 | 
0b7ec                 | ' 
0b7ec                 | ' sub do_gt
0b7ec                 | _do_gt
0b7ec     05 4A 05 F6 | 	mov	COUNT_, #5
0b7f0     A8 00 A0 FD | 	call	#pushregs_
0b7f4     18 F0 07 F1 | 	add	ptra, #24
0b7f8     24 C8 BF FD | 	call	#_pop
0b7fc     FD 1E 02 F6 | 	mov	local01, result1
0b800     FE 20 02 F6 | 	mov	local02, result2
0b804     FF 22 02 F6 | 	mov	local03, result3
0b808     0C 4E 05 F1 | 	add	fp, #12
0b80c     A7 1E 62 FC | 	wrlong	local01, fp
0b810     04 4E 05 F1 | 	add	fp, #4
0b814     A7 20 62 FC | 	wrlong	local02, fp
0b818     04 4E 05 F1 | 	add	fp, #4
0b81c     A7 22 62 FC | 	wrlong	local03, fp
0b820     14 4E 85 F1 | 	sub	fp, #20
0b824     F8 C7 BF FD | 	call	#_pop
0b828     FF 22 02 F6 | 	mov	local03, result3
0b82c     A7 FA 61 FC | 	wrlong	result1, fp
0b830     04 4E 05 F1 | 	add	fp, #4
0b834     A7 FC 61 FC | 	wrlong	result2, fp
0b838     04 4E 05 F1 | 	add	fp, #4
0b83c     A7 22 62 FC | 	wrlong	local03, fp
0b840                 | ' t2=pop()
0b840                 | ' t1=pop()
0b840                 | ' 
0b840                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0b840     08 4E 85 F1 | 	sub	fp, #8
0b844     1F 22 0E F2 | 	cmp	local03, #31 wz
0b848     14 4E 05 A1 |  if_e	add	fp, #20
0b84c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b850     14 4E 85 A1 |  if_e	sub	fp, #20
0b854     12 23 02 A6 |  if_e	mov	local03, local04
0b858     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b85c     28 00 90 5D |  if_ne	jmp	#LR__0990
0b860     00 1E 06 F6 | 	mov	local01, #0
0b864     A7 12 02 FB | 	rdlong	arg01, fp
0b868     0C 4E 05 F1 | 	add	fp, #12
0b86c     A7 14 02 FB | 	rdlong	arg02, fp
0b870     0C 4E 85 F1 | 	sub	fp, #12
0b874     30 82 B0 FD | 	call	#__system___string_cmp
0b878     01 FA 55 F2 | 	cmps	result1, #1 wc
0b87c     00 1E 26 36 |  if_ae	not	local01, #0
0b880     A7 1E 62 FC | 	wrlong	local01, fp
0b884     04 03 90 FD | 	jmp	#LR__1000
0b888                 | LR__0990
0b888                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0b888     08 4E 05 F1 | 	add	fp, #8
0b88c     A7 1E 02 FB | 	rdlong	local01, fp
0b890     08 4E 85 F1 | 	sub	fp, #8
0b894     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b898     14 4E 05 A1 |  if_e	add	fp, #20
0b89c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8a0     14 4E 85 A1 |  if_e	sub	fp, #20
0b8a4     12 23 02 A6 |  if_e	mov	local03, local04
0b8a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b8ac     2C 00 90 5D |  if_ne	jmp	#LR__0991
0b8b0     00 1E 06 F6 | 	mov	local01, #0
0b8b4     A7 12 02 FB | 	rdlong	arg01, fp
0b8b8     0C 4E 05 F1 | 	add	fp, #12
0b8bc     A7 14 02 FB | 	rdlong	arg02, fp
0b8c0     0C 4E 85 F1 | 	sub	fp, #12
0b8c4     01 16 66 F6 | 	neg	arg03, #1
0b8c8     34 AF B0 FD | 	call	#__system___float_cmp
0b8cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0b8d0     00 1E 26 36 |  if_ae	not	local01, #0
0b8d4     A7 1E 62 FC | 	wrlong	local01, fp
0b8d8     B0 02 90 FD | 	jmp	#LR__1000
0b8dc                 | LR__0991
0b8dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0b8dc     08 4E 05 F1 | 	add	fp, #8
0b8e0     A7 1E 02 FB | 	rdlong	local01, fp
0b8e4     08 4E 85 F1 | 	sub	fp, #8
0b8e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b8ec     14 4E 05 A1 |  if_e	add	fp, #20
0b8f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8f4     14 4E 85 A1 |  if_e	sub	fp, #20
0b8f8     12 23 02 A6 |  if_e	mov	local03, local04
0b8fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b900     48 00 90 5D |  if_ne	jmp	#LR__0992
0b904     00 1E 06 F6 | 	mov	local01, #0
0b908     A7 20 02 FB | 	rdlong	local02, fp
0b90c     0C 4E 05 F1 | 	add	fp, #12
0b910     A7 12 02 FB | 	rdlong	arg01, fp
0b914     0C 4E 85 F1 | 	sub	fp, #12
0b918     09 13 52 F6 | 	abs	arg01, arg01 wc
0b91c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b920     00 26 06 36 |  if_ae	mov	local05, #0
0b924     78 A7 B0 FD | 	call	#__system___float_fromuns
0b928     13 FB 61 F5 | 	xor	result1, local05
0b92c     FD 14 02 F6 | 	mov	arg02, result1
0b930     10 13 02 F6 | 	mov	arg01, local02
0b934     01 16 66 F6 | 	neg	arg03, #1
0b938     C4 AE B0 FD | 	call	#__system___float_cmp
0b93c     01 FA 55 F2 | 	cmps	result1, #1 wc
0b940     00 1E 26 36 |  if_ae	not	local01, #0
0b944     A7 1E 62 FC | 	wrlong	local01, fp
0b948     40 02 90 FD | 	jmp	#LR__1000
0b94c                 | LR__0992
0b94c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0b94c     08 4E 05 F1 | 	add	fp, #8
0b950     A7 1E 02 FB | 	rdlong	local01, fp
0b954     08 4E 85 F1 | 	sub	fp, #8
0b958     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b95c     14 4E 05 A1 |  if_e	add	fp, #20
0b960     A7 24 02 AB |  if_e	rdlong	local04, fp
0b964     14 4E 85 A1 |  if_e	sub	fp, #20
0b968     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0b96c     38 00 90 5D |  if_ne	jmp	#LR__0993
0b970     00 1E 06 F6 | 	mov	local01, #0
0b974     A7 20 02 FB | 	rdlong	local02, fp
0b978     0C 4E 05 F1 | 	add	fp, #12
0b97c     A7 12 02 FB | 	rdlong	arg01, fp
0b980     0C 4E 85 F1 | 	sub	fp, #12
0b984     18 A7 B0 FD | 	call	#__system___float_fromuns
0b988     FD 14 02 F6 | 	mov	arg02, result1
0b98c     10 13 02 F6 | 	mov	arg01, local02
0b990     01 16 66 F6 | 	neg	arg03, #1
0b994     68 AE B0 FD | 	call	#__system___float_cmp
0b998     01 FA 55 F2 | 	cmps	result1, #1 wc
0b99c     00 1E 26 36 |  if_ae	not	local01, #0
0b9a0     A7 1E 62 FC | 	wrlong	local01, fp
0b9a4     E4 01 90 FD | 	jmp	#LR__1000
0b9a8                 | LR__0993
0b9a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0b9a8     08 4E 05 F1 | 	add	fp, #8
0b9ac     A7 1E 02 FB | 	rdlong	local01, fp
0b9b0     08 4E 85 F1 | 	sub	fp, #8
0b9b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b9b8     14 4E 05 A1 |  if_e	add	fp, #20
0b9bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0b9c0     14 4E 85 A1 |  if_e	sub	fp, #20
0b9c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b9c8     44 00 90 5D |  if_ne	jmp	#LR__0994
0b9cc     00 1E 06 F6 | 	mov	local01, #0
0b9d0     A7 12 02 FB | 	rdlong	arg01, fp
0b9d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9d8     1F 26 C6 C9 |  if_b	decod	local05, #31
0b9dc     00 26 06 36 |  if_ae	mov	local05, #0
0b9e0     BC A6 B0 FD | 	call	#__system___float_fromuns
0b9e4     13 FB 61 F5 | 	xor	result1, local05
0b9e8     FD 12 02 F6 | 	mov	arg01, result1
0b9ec     0C 4E 05 F1 | 	add	fp, #12
0b9f0     A7 14 02 FB | 	rdlong	arg02, fp
0b9f4     0C 4E 85 F1 | 	sub	fp, #12
0b9f8     01 16 66 F6 | 	neg	arg03, #1
0b9fc     00 AE B0 FD | 	call	#__system___float_cmp
0ba00     01 FA 55 F2 | 	cmps	result1, #1 wc
0ba04     00 1E 26 36 |  if_ae	not	local01, #0
0ba08     A7 1E 62 FC | 	wrlong	local01, fp
0ba0c     7C 01 90 FD | 	jmp	#LR__1000
0ba10                 | LR__0994
0ba10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0ba10     08 4E 05 F1 | 	add	fp, #8
0ba14     A7 1E 02 FB | 	rdlong	local01, fp
0ba18     08 4E 85 F1 | 	sub	fp, #8
0ba1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba20     14 4E 05 A1 |  if_e	add	fp, #20
0ba24     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba28     14 4E 85 A1 |  if_e	sub	fp, #20
0ba2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ba30     24 00 90 5D |  if_ne	jmp	#LR__0995
0ba34     00 1E 06 F6 | 	mov	local01, #0
0ba38     A7 20 02 FB | 	rdlong	local02, fp
0ba3c     0C 4E 05 F1 | 	add	fp, #12
0ba40     A7 22 02 FB | 	rdlong	local03, fp
0ba44     0C 4E 85 F1 | 	sub	fp, #12
0ba48     11 21 5A F2 | 	cmps	local02, local03 wcz
0ba4c     01 1E 66 16 |  if_a	neg	local01, #1
0ba50     A7 1E 62 FC | 	wrlong	local01, fp
0ba54     34 01 90 FD | 	jmp	#LR__1000
0ba58                 | LR__0995
0ba58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0ba58     08 4E 05 F1 | 	add	fp, #8
0ba5c     A7 1E 02 FB | 	rdlong	local01, fp
0ba60     08 4E 85 F1 | 	sub	fp, #8
0ba64     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba68     14 4E 05 A1 |  if_e	add	fp, #20
0ba6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba70     14 4E 85 A1 |  if_e	sub	fp, #20
0ba74     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ba78     24 00 90 5D |  if_ne	jmp	#LR__0996
0ba7c     00 1E 06 F6 | 	mov	local01, #0
0ba80     A7 20 02 FB | 	rdlong	local02, fp
0ba84     0C 4E 05 F1 | 	add	fp, #12
0ba88     A7 22 02 FB | 	rdlong	local03, fp
0ba8c     0C 4E 85 F1 | 	sub	fp, #12
0ba90     11 21 5A F2 | 	cmps	local02, local03 wcz
0ba94     01 1E 66 16 |  if_a	neg	local01, #1
0ba98     A7 1E 62 FC | 	wrlong	local01, fp
0ba9c     EC 00 90 FD | 	jmp	#LR__1000
0baa0                 | LR__0996
0baa0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0baa0     08 4E 05 F1 | 	add	fp, #8
0baa4     A7 1E 02 FB | 	rdlong	local01, fp
0baa8     08 4E 85 F1 | 	sub	fp, #8
0baac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bab0     14 4E 05 A1 |  if_e	add	fp, #20
0bab4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bab8     14 4E 85 A1 |  if_e	sub	fp, #20
0babc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bac0     34 00 90 5D |  if_ne	jmp	#LR__0997
0bac4     00 1E 06 F6 | 	mov	local01, #0
0bac8     A7 12 02 FB | 	rdlong	arg01, fp
0bacc     D0 A5 B0 FD | 	call	#__system___float_fromuns
0bad0     FD 12 02 F6 | 	mov	arg01, result1
0bad4     0C 4E 05 F1 | 	add	fp, #12
0bad8     A7 14 02 FB | 	rdlong	arg02, fp
0badc     0C 4E 85 F1 | 	sub	fp, #12
0bae0     01 16 66 F6 | 	neg	arg03, #1
0bae4     18 AD B0 FD | 	call	#__system___float_cmp
0bae8     01 FA 55 F2 | 	cmps	result1, #1 wc
0baec     00 1E 26 36 |  if_ae	not	local01, #0
0baf0     A7 1E 62 FC | 	wrlong	local01, fp
0baf4     94 00 90 FD | 	jmp	#LR__1000
0baf8                 | LR__0997
0baf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0baf8     08 4E 05 F1 | 	add	fp, #8
0bafc     A7 1E 02 FB | 	rdlong	local01, fp
0bb00     08 4E 85 F1 | 	sub	fp, #8
0bb04     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bb08     14 4E 05 A1 |  if_e	add	fp, #20
0bb0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb10     14 4E 85 A1 |  if_e	sub	fp, #20
0bb14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bb18     24 00 90 5D |  if_ne	jmp	#LR__0998
0bb1c     00 1E 06 F6 | 	mov	local01, #0
0bb20     A7 20 02 FB | 	rdlong	local02, fp
0bb24     0C 4E 05 F1 | 	add	fp, #12
0bb28     A7 22 02 FB | 	rdlong	local03, fp
0bb2c     0C 4E 85 F1 | 	sub	fp, #12
0bb30     11 21 5A F2 | 	cmps	local02, local03 wcz
0bb34     01 1E 66 16 |  if_a	neg	local01, #1
0bb38     A7 1E 62 FC | 	wrlong	local01, fp
0bb3c     4C 00 90 FD | 	jmp	#LR__1000
0bb40                 | LR__0998
0bb40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0bb40     08 4E 05 F1 | 	add	fp, #8
0bb44     A7 1E 02 FB | 	rdlong	local01, fp
0bb48     08 4E 85 F1 | 	sub	fp, #8
0bb4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bb50     14 4E 05 A1 |  if_e	add	fp, #20
0bb54     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb58     14 4E 85 A1 |  if_e	sub	fp, #20
0bb5c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bb60     24 00 90 5D |  if_ne	jmp	#LR__0999
0bb64     00 1E 06 F6 | 	mov	local01, #0
0bb68     A7 20 02 FB | 	rdlong	local02, fp
0bb6c     0C 4E 05 F1 | 	add	fp, #12
0bb70     A7 22 02 FB | 	rdlong	local03, fp
0bb74     0C 4E 85 F1 | 	sub	fp, #12
0bb78     11 21 1A F2 | 	cmp	local02, local03 wcz
0bb7c     01 1E 66 16 |  if_a	neg	local01, #1
0bb80     A7 1E 62 FC | 	wrlong	local01, fp
0bb84     04 00 90 FD | 	jmp	#LR__1000
0bb88                 | LR__0999
0bb88     A7 00 68 FC | 	wrlong	#0, fp
0bb8c                 | LR__1000
0bb8c     08 4E 05 F1 | 	add	fp, #8
0bb90     A7 38 68 FC | 	wrlong	#28, fp
0bb94     08 4E 85 F1 | 	sub	fp, #8
0bb98     A7 12 02 F6 | 	mov	arg01, fp
0bb9c     18 C5 BF FD | 	call	#_push
0bba0     A7 F0 03 F6 | 	mov	ptra, fp
0bba4     B2 00 A0 FD | 	call	#popregs_
0bba8                 | _do_gt_ret
0bba8     2D 00 64 FD | 	ret
0bbac                 | 
0bbac                 | ' 
0bbac                 | ' sub do_lt
0bbac                 | _do_lt
0bbac     05 4A 05 F6 | 	mov	COUNT_, #5
0bbb0     A8 00 A0 FD | 	call	#pushregs_
0bbb4     18 F0 07 F1 | 	add	ptra, #24
0bbb8     64 C4 BF FD | 	call	#_pop
0bbbc     FD 1E 02 F6 | 	mov	local01, result1
0bbc0     FE 20 02 F6 | 	mov	local02, result2
0bbc4     FF 22 02 F6 | 	mov	local03, result3
0bbc8     0C 4E 05 F1 | 	add	fp, #12
0bbcc     A7 1E 62 FC | 	wrlong	local01, fp
0bbd0     04 4E 05 F1 | 	add	fp, #4
0bbd4     A7 20 62 FC | 	wrlong	local02, fp
0bbd8     04 4E 05 F1 | 	add	fp, #4
0bbdc     A7 22 62 FC | 	wrlong	local03, fp
0bbe0     14 4E 85 F1 | 	sub	fp, #20
0bbe4     38 C4 BF FD | 	call	#_pop
0bbe8     FF 22 02 F6 | 	mov	local03, result3
0bbec     A7 FA 61 FC | 	wrlong	result1, fp
0bbf0     04 4E 05 F1 | 	add	fp, #4
0bbf4     A7 FC 61 FC | 	wrlong	result2, fp
0bbf8     04 4E 05 F1 | 	add	fp, #4
0bbfc     A7 22 62 FC | 	wrlong	local03, fp
0bc00                 | ' t2=pop()
0bc00                 | ' t1=pop()
0bc00                 | ' 
0bc00                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0bc00     08 4E 85 F1 | 	sub	fp, #8
0bc04     1F 22 0E F2 | 	cmp	local03, #31 wz
0bc08     14 4E 05 A1 |  if_e	add	fp, #20
0bc0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc10     14 4E 85 A1 |  if_e	sub	fp, #20
0bc14     12 23 02 A6 |  if_e	mov	local03, local04
0bc18     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0bc1c     28 00 90 5D |  if_ne	jmp	#LR__1010
0bc20     00 1E 06 F6 | 	mov	local01, #0
0bc24     A7 12 02 FB | 	rdlong	arg01, fp
0bc28     0C 4E 05 F1 | 	add	fp, #12
0bc2c     A7 14 02 FB | 	rdlong	arg02, fp
0bc30     0C 4E 85 F1 | 	sub	fp, #12
0bc34     70 7E B0 FD | 	call	#__system___string_cmp
0bc38     00 FA 55 F2 | 	cmps	result1, #0 wc
0bc3c     00 1E 26 C6 |  if_b	not	local01, #0
0bc40     A7 1E 62 FC | 	wrlong	local01, fp
0bc44     F4 02 90 FD | 	jmp	#LR__1020
0bc48                 | LR__1010
0bc48                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0bc48     08 4E 05 F1 | 	add	fp, #8
0bc4c     A7 1E 02 FB | 	rdlong	local01, fp
0bc50     08 4E 85 F1 | 	sub	fp, #8
0bc54     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bc58     14 4E 05 A1 |  if_e	add	fp, #20
0bc5c     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc60     14 4E 85 A1 |  if_e	sub	fp, #20
0bc64     12 23 02 A6 |  if_e	mov	local03, local04
0bc68     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bc6c     2C 00 90 5D |  if_ne	jmp	#LR__1011
0bc70     00 1E 06 F6 | 	mov	local01, #0
0bc74     A7 12 02 FB | 	rdlong	arg01, fp
0bc78     0C 4E 05 F1 | 	add	fp, #12
0bc7c     A7 14 02 FB | 	rdlong	arg02, fp
0bc80     0C 4E 85 F1 | 	sub	fp, #12
0bc84     01 16 06 F6 | 	mov	arg03, #1
0bc88     74 AB B0 FD | 	call	#__system___float_cmp
0bc8c     00 FA 55 F2 | 	cmps	result1, #0 wc
0bc90     00 1E 26 C6 |  if_b	not	local01, #0
0bc94     A7 1E 62 FC | 	wrlong	local01, fp
0bc98     A0 02 90 FD | 	jmp	#LR__1020
0bc9c                 | LR__1011
0bc9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0bc9c     08 4E 05 F1 | 	add	fp, #8
0bca0     A7 1E 02 FB | 	rdlong	local01, fp
0bca4     08 4E 85 F1 | 	sub	fp, #8
0bca8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bcac     14 4E 05 A1 |  if_e	add	fp, #20
0bcb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0bcb4     14 4E 85 A1 |  if_e	sub	fp, #20
0bcb8     12 23 02 A6 |  if_e	mov	local03, local04
0bcbc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bcc0     48 00 90 5D |  if_ne	jmp	#LR__1012
0bcc4     00 1E 06 F6 | 	mov	local01, #0
0bcc8     A7 20 02 FB | 	rdlong	local02, fp
0bccc     0C 4E 05 F1 | 	add	fp, #12
0bcd0     A7 12 02 FB | 	rdlong	arg01, fp
0bcd4     0C 4E 85 F1 | 	sub	fp, #12
0bcd8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bcdc     1F 26 C6 C9 |  if_b	decod	local05, #31
0bce0     00 26 06 36 |  if_ae	mov	local05, #0
0bce4     B8 A3 B0 FD | 	call	#__system___float_fromuns
0bce8     13 FB 61 F5 | 	xor	result1, local05
0bcec     FD 14 02 F6 | 	mov	arg02, result1
0bcf0     10 13 02 F6 | 	mov	arg01, local02
0bcf4     01 16 06 F6 | 	mov	arg03, #1
0bcf8     04 AB B0 FD | 	call	#__system___float_cmp
0bcfc     00 FA 55 F2 | 	cmps	result1, #0 wc
0bd00     00 1E 26 C6 |  if_b	not	local01, #0
0bd04     A7 1E 62 FC | 	wrlong	local01, fp
0bd08     30 02 90 FD | 	jmp	#LR__1020
0bd0c                 | LR__1012
0bd0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0bd0c     08 4E 05 F1 | 	add	fp, #8
0bd10     A7 1E 02 FB | 	rdlong	local01, fp
0bd14     08 4E 85 F1 | 	sub	fp, #8
0bd18     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bd1c     14 4E 05 A1 |  if_e	add	fp, #20
0bd20     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd24     14 4E 85 A1 |  if_e	sub	fp, #20
0bd28     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0bd2c     38 00 90 5D |  if_ne	jmp	#LR__1013
0bd30     00 1E 06 F6 | 	mov	local01, #0
0bd34     A7 20 02 FB | 	rdlong	local02, fp
0bd38     0C 4E 05 F1 | 	add	fp, #12
0bd3c     A7 12 02 FB | 	rdlong	arg01, fp
0bd40     0C 4E 85 F1 | 	sub	fp, #12
0bd44     58 A3 B0 FD | 	call	#__system___float_fromuns
0bd48     FD 14 02 F6 | 	mov	arg02, result1
0bd4c     10 13 02 F6 | 	mov	arg01, local02
0bd50     01 16 06 F6 | 	mov	arg03, #1
0bd54     A8 AA B0 FD | 	call	#__system___float_cmp
0bd58     00 FA 55 F2 | 	cmps	result1, #0 wc
0bd5c     00 1E 26 C6 |  if_b	not	local01, #0
0bd60     A7 1E 62 FC | 	wrlong	local01, fp
0bd64     D4 01 90 FD | 	jmp	#LR__1020
0bd68                 | LR__1013
0bd68                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0bd68     08 4E 05 F1 | 	add	fp, #8
0bd6c     A7 1E 02 FB | 	rdlong	local01, fp
0bd70     08 4E 85 F1 | 	sub	fp, #8
0bd74     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bd78     14 4E 05 A1 |  if_e	add	fp, #20
0bd7c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bd80     14 4E 85 A1 |  if_e	sub	fp, #20
0bd84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bd88     44 00 90 5D |  if_ne	jmp	#LR__1014
0bd8c     00 1E 06 F6 | 	mov	local01, #0
0bd90     A7 12 02 FB | 	rdlong	arg01, fp
0bd94     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd98     1F 26 C6 C9 |  if_b	decod	local05, #31
0bd9c     00 26 06 36 |  if_ae	mov	local05, #0
0bda0     FC A2 B0 FD | 	call	#__system___float_fromuns
0bda4     13 FB 61 F5 | 	xor	result1, local05
0bda8     FD 12 02 F6 | 	mov	arg01, result1
0bdac     0C 4E 05 F1 | 	add	fp, #12
0bdb0     A7 14 02 FB | 	rdlong	arg02, fp
0bdb4     0C 4E 85 F1 | 	sub	fp, #12
0bdb8     01 16 06 F6 | 	mov	arg03, #1
0bdbc     40 AA B0 FD | 	call	#__system___float_cmp
0bdc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0bdc4     00 1E 26 C6 |  if_b	not	local01, #0
0bdc8     A7 1E 62 FC | 	wrlong	local01, fp
0bdcc     6C 01 90 FD | 	jmp	#LR__1020
0bdd0                 | LR__1014
0bdd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0bdd0     08 4E 05 F1 | 	add	fp, #8
0bdd4     A7 1E 02 FB | 	rdlong	local01, fp
0bdd8     08 4E 85 F1 | 	sub	fp, #8
0bddc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bde0     14 4E 05 A1 |  if_e	add	fp, #20
0bde4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bde8     14 4E 85 A1 |  if_e	sub	fp, #20
0bdec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bdf0     20 00 90 5D |  if_ne	jmp	#LR__1015
0bdf4     A7 20 02 FB | 	rdlong	local02, fp
0bdf8     0C 4E 05 F1 | 	add	fp, #12
0bdfc     A7 22 02 FB | 	rdlong	local03, fp
0be00     0C 4E 85 F1 | 	sub	fp, #12
0be04     11 21 52 F2 | 	cmps	local02, local03 wc
0be08     0F 1F A2 F1 | 	subx	local01, local01
0be0c     A7 1E 62 FC | 	wrlong	local01, fp
0be10     28 01 90 FD | 	jmp	#LR__1020
0be14                 | LR__1015
0be14                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0be14     08 4E 05 F1 | 	add	fp, #8
0be18     A7 1E 02 FB | 	rdlong	local01, fp
0be1c     08 4E 85 F1 | 	sub	fp, #8
0be20     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be24     14 4E 05 A1 |  if_e	add	fp, #20
0be28     A7 22 02 AB |  if_e	rdlong	local03, fp
0be2c     14 4E 85 A1 |  if_e	sub	fp, #20
0be30     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0be34     20 00 90 5D |  if_ne	jmp	#LR__1016
0be38     A7 20 02 FB | 	rdlong	local02, fp
0be3c     0C 4E 05 F1 | 	add	fp, #12
0be40     A7 22 02 FB | 	rdlong	local03, fp
0be44     0C 4E 85 F1 | 	sub	fp, #12
0be48     11 21 52 F2 | 	cmps	local02, local03 wc
0be4c     0F 1F A2 F1 | 	subx	local01, local01
0be50     A7 1E 62 FC | 	wrlong	local01, fp
0be54     E4 00 90 FD | 	jmp	#LR__1020
0be58                 | LR__1016
0be58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0be58     08 4E 05 F1 | 	add	fp, #8
0be5c     A7 1E 02 FB | 	rdlong	local01, fp
0be60     08 4E 85 F1 | 	sub	fp, #8
0be64     1D 1E 0E F2 | 	cmp	local01, #29 wz
0be68     14 4E 05 A1 |  if_e	add	fp, #20
0be6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0be70     14 4E 85 A1 |  if_e	sub	fp, #20
0be74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0be78     34 00 90 5D |  if_ne	jmp	#LR__1017
0be7c     00 1E 06 F6 | 	mov	local01, #0
0be80     A7 12 02 FB | 	rdlong	arg01, fp
0be84     18 A2 B0 FD | 	call	#__system___float_fromuns
0be88     FD 12 02 F6 | 	mov	arg01, result1
0be8c     0C 4E 05 F1 | 	add	fp, #12
0be90     A7 14 02 FB | 	rdlong	arg02, fp
0be94     0C 4E 85 F1 | 	sub	fp, #12
0be98     01 16 06 F6 | 	mov	arg03, #1
0be9c     60 A9 B0 FD | 	call	#__system___float_cmp
0bea0     00 FA 55 F2 | 	cmps	result1, #0 wc
0bea4     00 1E 26 C6 |  if_b	not	local01, #0
0bea8     A7 1E 62 FC | 	wrlong	local01, fp
0beac     8C 00 90 FD | 	jmp	#LR__1020
0beb0                 | LR__1017
0beb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0beb0     08 4E 05 F1 | 	add	fp, #8
0beb4     A7 1E 02 FB | 	rdlong	local01, fp
0beb8     08 4E 85 F1 | 	sub	fp, #8
0bebc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bec0     14 4E 05 A1 |  if_e	add	fp, #20
0bec4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bec8     14 4E 85 A1 |  if_e	sub	fp, #20
0becc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bed0     20 00 90 5D |  if_ne	jmp	#LR__1018
0bed4     A7 20 02 FB | 	rdlong	local02, fp
0bed8     0C 4E 05 F1 | 	add	fp, #12
0bedc     A7 22 02 FB | 	rdlong	local03, fp
0bee0     0C 4E 85 F1 | 	sub	fp, #12
0bee4     11 21 52 F2 | 	cmps	local02, local03 wc
0bee8     0F 1F A2 F1 | 	subx	local01, local01
0beec     A7 1E 62 FC | 	wrlong	local01, fp
0bef0     48 00 90 FD | 	jmp	#LR__1020
0bef4                 | LR__1018
0bef4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0bef4     08 4E 05 F1 | 	add	fp, #8
0bef8     A7 1E 02 FB | 	rdlong	local01, fp
0befc     08 4E 85 F1 | 	sub	fp, #8
0bf00     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bf04     14 4E 05 A1 |  if_e	add	fp, #20
0bf08     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf0c     14 4E 85 A1 |  if_e	sub	fp, #20
0bf10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bf14     20 00 90 5D |  if_ne	jmp	#LR__1019
0bf18     A7 20 02 FB | 	rdlong	local02, fp
0bf1c     0C 4E 05 F1 | 	add	fp, #12
0bf20     A7 22 02 FB | 	rdlong	local03, fp
0bf24     0C 4E 85 F1 | 	sub	fp, #12
0bf28     11 21 12 F2 | 	cmp	local02, local03 wc
0bf2c     0F 1F A2 F1 | 	subx	local01, local01
0bf30     A7 1E 62 FC | 	wrlong	local01, fp
0bf34     04 00 90 FD | 	jmp	#LR__1020
0bf38                 | LR__1019
0bf38     A7 00 68 FC | 	wrlong	#0, fp
0bf3c                 | LR__1020
0bf3c     08 4E 05 F1 | 	add	fp, #8
0bf40     A7 38 68 FC | 	wrlong	#28, fp
0bf44     08 4E 85 F1 | 	sub	fp, #8
0bf48     A7 12 02 F6 | 	mov	arg01, fp
0bf4c     68 C1 BF FD | 	call	#_push
0bf50     A7 F0 03 F6 | 	mov	ptra, fp
0bf54     B2 00 A0 FD | 	call	#popregs_
0bf58                 | _do_lt_ret
0bf58     2D 00 64 FD | 	ret
0bf5c                 | 
0bf5c                 | ' 
0bf5c                 | ' sub do_ge
0bf5c                 | _do_ge
0bf5c     05 4A 05 F6 | 	mov	COUNT_, #5
0bf60     A8 00 A0 FD | 	call	#pushregs_
0bf64     18 F0 07 F1 | 	add	ptra, #24
0bf68     B4 C0 BF FD | 	call	#_pop
0bf6c     FD 1E 02 F6 | 	mov	local01, result1
0bf70     FE 20 02 F6 | 	mov	local02, result2
0bf74     FF 22 02 F6 | 	mov	local03, result3
0bf78     0C 4E 05 F1 | 	add	fp, #12
0bf7c     A7 1E 62 FC | 	wrlong	local01, fp
0bf80     04 4E 05 F1 | 	add	fp, #4
0bf84     A7 20 62 FC | 	wrlong	local02, fp
0bf88     04 4E 05 F1 | 	add	fp, #4
0bf8c     A7 22 62 FC | 	wrlong	local03, fp
0bf90     14 4E 85 F1 | 	sub	fp, #20
0bf94     88 C0 BF FD | 	call	#_pop
0bf98     FF 22 02 F6 | 	mov	local03, result3
0bf9c     A7 FA 61 FC | 	wrlong	result1, fp
0bfa0     04 4E 05 F1 | 	add	fp, #4
0bfa4     A7 FC 61 FC | 	wrlong	result2, fp
0bfa8     04 4E 05 F1 | 	add	fp, #4
0bfac     A7 22 62 FC | 	wrlong	local03, fp
0bfb0                 | ' t2=pop()
0bfb0                 | ' t1=pop()
0bfb0                 | ' 
0bfb0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0bfb0     08 4E 85 F1 | 	sub	fp, #8
0bfb4     1F 22 0E F2 | 	cmp	local03, #31 wz
0bfb8     14 4E 05 A1 |  if_e	add	fp, #20
0bfbc     A7 24 02 AB |  if_e	rdlong	local04, fp
0bfc0     14 4E 85 A1 |  if_e	sub	fp, #20
0bfc4     12 23 02 A6 |  if_e	mov	local03, local04
0bfc8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0bfcc     28 00 90 5D |  if_ne	jmp	#LR__1030
0bfd0     00 1E 06 F6 | 	mov	local01, #0
0bfd4     A7 12 02 FB | 	rdlong	arg01, fp
0bfd8     0C 4E 05 F1 | 	add	fp, #12
0bfdc     A7 14 02 FB | 	rdlong	arg02, fp
0bfe0     0C 4E 85 F1 | 	sub	fp, #12
0bfe4     C0 7A B0 FD | 	call	#__system___string_cmp
0bfe8     00 FA 55 F2 | 	cmps	result1, #0 wc
0bfec     00 1E 26 36 |  if_ae	not	local01, #0
0bff0     A7 1E 62 FC | 	wrlong	local01, fp
0bff4     04 03 90 FD | 	jmp	#LR__1040
0bff8                 | LR__1030
0bff8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0bff8     08 4E 05 F1 | 	add	fp, #8
0bffc     A7 1E 02 FB | 	rdlong	local01, fp
0c000     08 4E 85 F1 | 	sub	fp, #8
0c004     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c008     14 4E 05 A1 |  if_e	add	fp, #20
0c00c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c010     14 4E 85 A1 |  if_e	sub	fp, #20
0c014     12 23 02 A6 |  if_e	mov	local03, local04
0c018     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c01c     2C 00 90 5D |  if_ne	jmp	#LR__1031
0c020     00 1E 06 F6 | 	mov	local01, #0
0c024     A7 12 02 FB | 	rdlong	arg01, fp
0c028     0C 4E 05 F1 | 	add	fp, #12
0c02c     A7 14 02 FB | 	rdlong	arg02, fp
0c030     0C 4E 85 F1 | 	sub	fp, #12
0c034     01 16 66 F6 | 	neg	arg03, #1
0c038     C4 A7 B0 FD | 	call	#__system___float_cmp
0c03c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c040     00 1E 26 36 |  if_ae	not	local01, #0
0c044     A7 1E 62 FC | 	wrlong	local01, fp
0c048     B0 02 90 FD | 	jmp	#LR__1040
0c04c                 | LR__1031
0c04c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0c04c     08 4E 05 F1 | 	add	fp, #8
0c050     A7 1E 02 FB | 	rdlong	local01, fp
0c054     08 4E 85 F1 | 	sub	fp, #8
0c058     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c05c     14 4E 05 A1 |  if_e	add	fp, #20
0c060     A7 24 02 AB |  if_e	rdlong	local04, fp
0c064     14 4E 85 A1 |  if_e	sub	fp, #20
0c068     12 23 02 A6 |  if_e	mov	local03, local04
0c06c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c070     48 00 90 5D |  if_ne	jmp	#LR__1032
0c074     00 1E 06 F6 | 	mov	local01, #0
0c078     A7 20 02 FB | 	rdlong	local02, fp
0c07c     0C 4E 05 F1 | 	add	fp, #12
0c080     A7 12 02 FB | 	rdlong	arg01, fp
0c084     0C 4E 85 F1 | 	sub	fp, #12
0c088     09 13 52 F6 | 	abs	arg01, arg01 wc
0c08c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c090     00 26 06 36 |  if_ae	mov	local05, #0
0c094     08 A0 B0 FD | 	call	#__system___float_fromuns
0c098     13 FB 61 F5 | 	xor	result1, local05
0c09c     FD 14 02 F6 | 	mov	arg02, result1
0c0a0     10 13 02 F6 | 	mov	arg01, local02
0c0a4     01 16 66 F6 | 	neg	arg03, #1
0c0a8     54 A7 B0 FD | 	call	#__system___float_cmp
0c0ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0c0b0     00 1E 26 36 |  if_ae	not	local01, #0
0c0b4     A7 1E 62 FC | 	wrlong	local01, fp
0c0b8     40 02 90 FD | 	jmp	#LR__1040
0c0bc                 | LR__1032
0c0bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0c0bc     08 4E 05 F1 | 	add	fp, #8
0c0c0     A7 1E 02 FB | 	rdlong	local01, fp
0c0c4     08 4E 85 F1 | 	sub	fp, #8
0c0c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c0cc     14 4E 05 A1 |  if_e	add	fp, #20
0c0d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0c0d4     14 4E 85 A1 |  if_e	sub	fp, #20
0c0d8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c0dc     38 00 90 5D |  if_ne	jmp	#LR__1033
0c0e0     00 1E 06 F6 | 	mov	local01, #0
0c0e4     A7 20 02 FB | 	rdlong	local02, fp
0c0e8     0C 4E 05 F1 | 	add	fp, #12
0c0ec     A7 12 02 FB | 	rdlong	arg01, fp
0c0f0     0C 4E 85 F1 | 	sub	fp, #12
0c0f4     A8 9F B0 FD | 	call	#__system___float_fromuns
0c0f8     FD 14 02 F6 | 	mov	arg02, result1
0c0fc     10 13 02 F6 | 	mov	arg01, local02
0c100     01 16 66 F6 | 	neg	arg03, #1
0c104     F8 A6 B0 FD | 	call	#__system___float_cmp
0c108     00 FA 55 F2 | 	cmps	result1, #0 wc
0c10c     00 1E 26 36 |  if_ae	not	local01, #0
0c110     A7 1E 62 FC | 	wrlong	local01, fp
0c114     E4 01 90 FD | 	jmp	#LR__1040
0c118                 | LR__1033
0c118                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0c118     08 4E 05 F1 | 	add	fp, #8
0c11c     A7 1E 02 FB | 	rdlong	local01, fp
0c120     08 4E 85 F1 | 	sub	fp, #8
0c124     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c128     14 4E 05 A1 |  if_e	add	fp, #20
0c12c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c130     14 4E 85 A1 |  if_e	sub	fp, #20
0c134     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c138     44 00 90 5D |  if_ne	jmp	#LR__1034
0c13c     00 1E 06 F6 | 	mov	local01, #0
0c140     A7 12 02 FB | 	rdlong	arg01, fp
0c144     09 13 52 F6 | 	abs	arg01, arg01 wc
0c148     1F 26 C6 C9 |  if_b	decod	local05, #31
0c14c     00 26 06 36 |  if_ae	mov	local05, #0
0c150     4C 9F B0 FD | 	call	#__system___float_fromuns
0c154     13 FB 61 F5 | 	xor	result1, local05
0c158     FD 12 02 F6 | 	mov	arg01, result1
0c15c     0C 4E 05 F1 | 	add	fp, #12
0c160     A7 14 02 FB | 	rdlong	arg02, fp
0c164     0C 4E 85 F1 | 	sub	fp, #12
0c168     01 16 66 F6 | 	neg	arg03, #1
0c16c     90 A6 B0 FD | 	call	#__system___float_cmp
0c170     00 FA 55 F2 | 	cmps	result1, #0 wc
0c174     00 1E 26 36 |  if_ae	not	local01, #0
0c178     A7 1E 62 FC | 	wrlong	local01, fp
0c17c     7C 01 90 FD | 	jmp	#LR__1040
0c180                 | LR__1034
0c180                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0c180     08 4E 05 F1 | 	add	fp, #8
0c184     A7 1E 02 FB | 	rdlong	local01, fp
0c188     08 4E 85 F1 | 	sub	fp, #8
0c18c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c190     14 4E 05 A1 |  if_e	add	fp, #20
0c194     A7 22 02 AB |  if_e	rdlong	local03, fp
0c198     14 4E 85 A1 |  if_e	sub	fp, #20
0c19c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c1a0     24 00 90 5D |  if_ne	jmp	#LR__1035
0c1a4     00 1E 06 F6 | 	mov	local01, #0
0c1a8     A7 20 02 FB | 	rdlong	local02, fp
0c1ac     0C 4E 05 F1 | 	add	fp, #12
0c1b0     A7 22 02 FB | 	rdlong	local03, fp
0c1b4     0C 4E 85 F1 | 	sub	fp, #12
0c1b8     11 21 52 F2 | 	cmps	local02, local03 wc
0c1bc     01 1E 66 36 |  if_ae	neg	local01, #1
0c1c0     A7 1E 62 FC | 	wrlong	local01, fp
0c1c4     34 01 90 FD | 	jmp	#LR__1040
0c1c8                 | LR__1035
0c1c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0c1c8     08 4E 05 F1 | 	add	fp, #8
0c1cc     A7 1E 02 FB | 	rdlong	local01, fp
0c1d0     08 4E 85 F1 | 	sub	fp, #8
0c1d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c1d8     14 4E 05 A1 |  if_e	add	fp, #20
0c1dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0c1e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c1e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c1e8     24 00 90 5D |  if_ne	jmp	#LR__1036
0c1ec     00 1E 06 F6 | 	mov	local01, #0
0c1f0     A7 20 02 FB | 	rdlong	local02, fp
0c1f4     0C 4E 05 F1 | 	add	fp, #12
0c1f8     A7 22 02 FB | 	rdlong	local03, fp
0c1fc     0C 4E 85 F1 | 	sub	fp, #12
0c200     11 21 52 F2 | 	cmps	local02, local03 wc
0c204     01 1E 66 36 |  if_ae	neg	local01, #1
0c208     A7 1E 62 FC | 	wrlong	local01, fp
0c20c     EC 00 90 FD | 	jmp	#LR__1040
0c210                 | LR__1036
0c210                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0c210     08 4E 05 F1 | 	add	fp, #8
0c214     A7 1E 02 FB | 	rdlong	local01, fp
0c218     08 4E 85 F1 | 	sub	fp, #8
0c21c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c220     14 4E 05 A1 |  if_e	add	fp, #20
0c224     A7 22 02 AB |  if_e	rdlong	local03, fp
0c228     14 4E 85 A1 |  if_e	sub	fp, #20
0c22c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c230     34 00 90 5D |  if_ne	jmp	#LR__1037
0c234     00 1E 06 F6 | 	mov	local01, #0
0c238     A7 12 02 FB | 	rdlong	arg01, fp
0c23c     60 9E B0 FD | 	call	#__system___float_fromuns
0c240     FD 12 02 F6 | 	mov	arg01, result1
0c244     0C 4E 05 F1 | 	add	fp, #12
0c248     A7 14 02 FB | 	rdlong	arg02, fp
0c24c     0C 4E 85 F1 | 	sub	fp, #12
0c250     01 16 66 F6 | 	neg	arg03, #1
0c254     A8 A5 B0 FD | 	call	#__system___float_cmp
0c258     00 FA 55 F2 | 	cmps	result1, #0 wc
0c25c     00 1E 26 36 |  if_ae	not	local01, #0
0c260     A7 1E 62 FC | 	wrlong	local01, fp
0c264     94 00 90 FD | 	jmp	#LR__1040
0c268                 | LR__1037
0c268                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0c268     08 4E 05 F1 | 	add	fp, #8
0c26c     A7 1E 02 FB | 	rdlong	local01, fp
0c270     08 4E 85 F1 | 	sub	fp, #8
0c274     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c278     14 4E 05 A1 |  if_e	add	fp, #20
0c27c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c280     14 4E 85 A1 |  if_e	sub	fp, #20
0c284     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c288     24 00 90 5D |  if_ne	jmp	#LR__1038
0c28c     00 1E 06 F6 | 	mov	local01, #0
0c290     A7 20 02 FB | 	rdlong	local02, fp
0c294     0C 4E 05 F1 | 	add	fp, #12
0c298     A7 22 02 FB | 	rdlong	local03, fp
0c29c     0C 4E 85 F1 | 	sub	fp, #12
0c2a0     11 21 52 F2 | 	cmps	local02, local03 wc
0c2a4     01 1E 66 36 |  if_ae	neg	local01, #1
0c2a8     A7 1E 62 FC | 	wrlong	local01, fp
0c2ac     4C 00 90 FD | 	jmp	#LR__1040
0c2b0                 | LR__1038
0c2b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0c2b0     08 4E 05 F1 | 	add	fp, #8
0c2b4     A7 1E 02 FB | 	rdlong	local01, fp
0c2b8     08 4E 85 F1 | 	sub	fp, #8
0c2bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c2c0     14 4E 05 A1 |  if_e	add	fp, #20
0c2c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0c2c8     14 4E 85 A1 |  if_e	sub	fp, #20
0c2cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c2d0     24 00 90 5D |  if_ne	jmp	#LR__1039
0c2d4     00 1E 06 F6 | 	mov	local01, #0
0c2d8     A7 20 02 FB | 	rdlong	local02, fp
0c2dc     0C 4E 05 F1 | 	add	fp, #12
0c2e0     A7 22 02 FB | 	rdlong	local03, fp
0c2e4     0C 4E 85 F1 | 	sub	fp, #12
0c2e8     11 21 12 F2 | 	cmp	local02, local03 wc
0c2ec     01 1E 66 36 |  if_ae	neg	local01, #1
0c2f0     A7 1E 62 FC | 	wrlong	local01, fp
0c2f4     04 00 90 FD | 	jmp	#LR__1040
0c2f8                 | LR__1039
0c2f8     A7 00 68 FC | 	wrlong	#0, fp
0c2fc                 | LR__1040
0c2fc     08 4E 05 F1 | 	add	fp, #8
0c300     A7 38 68 FC | 	wrlong	#28, fp
0c304     08 4E 85 F1 | 	sub	fp, #8
0c308     A7 12 02 F6 | 	mov	arg01, fp
0c30c     A8 BD BF FD | 	call	#_push
0c310     A7 F0 03 F6 | 	mov	ptra, fp
0c314     B2 00 A0 FD | 	call	#popregs_
0c318                 | _do_ge_ret
0c318     2D 00 64 FD | 	ret
0c31c                 | 
0c31c                 | ' 
0c31c                 | ' sub do_le
0c31c                 | _do_le
0c31c     05 4A 05 F6 | 	mov	COUNT_, #5
0c320     A8 00 A0 FD | 	call	#pushregs_
0c324     18 F0 07 F1 | 	add	ptra, #24
0c328     F4 BC BF FD | 	call	#_pop
0c32c     FD 1E 02 F6 | 	mov	local01, result1
0c330     FE 20 02 F6 | 	mov	local02, result2
0c334     FF 22 02 F6 | 	mov	local03, result3
0c338     0C 4E 05 F1 | 	add	fp, #12
0c33c     A7 1E 62 FC | 	wrlong	local01, fp
0c340     04 4E 05 F1 | 	add	fp, #4
0c344     A7 20 62 FC | 	wrlong	local02, fp
0c348     04 4E 05 F1 | 	add	fp, #4
0c34c     A7 22 62 FC | 	wrlong	local03, fp
0c350     14 4E 85 F1 | 	sub	fp, #20
0c354     C8 BC BF FD | 	call	#_pop
0c358     FF 22 02 F6 | 	mov	local03, result3
0c35c     A7 FA 61 FC | 	wrlong	result1, fp
0c360     04 4E 05 F1 | 	add	fp, #4
0c364     A7 FC 61 FC | 	wrlong	result2, fp
0c368     04 4E 05 F1 | 	add	fp, #4
0c36c     A7 22 62 FC | 	wrlong	local03, fp
0c370                 | ' t2=pop()
0c370                 | ' t1=pop()
0c370                 | ' 
0c370                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0c370     08 4E 85 F1 | 	sub	fp, #8
0c374     1F 22 0E F2 | 	cmp	local03, #31 wz
0c378     14 4E 05 A1 |  if_e	add	fp, #20
0c37c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c380     14 4E 85 A1 |  if_e	sub	fp, #20
0c384     12 23 02 A6 |  if_e	mov	local03, local04
0c388     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c38c     28 00 90 5D |  if_ne	jmp	#LR__1050
0c390     00 1E 06 F6 | 	mov	local01, #0
0c394     A7 12 02 FB | 	rdlong	arg01, fp
0c398     0C 4E 05 F1 | 	add	fp, #12
0c39c     A7 14 02 FB | 	rdlong	arg02, fp
0c3a0     0C 4E 85 F1 | 	sub	fp, #12
0c3a4     00 77 B0 FD | 	call	#__system___string_cmp
0c3a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c3ac     00 1E 26 C6 |  if_b	not	local01, #0
0c3b0     A7 1E 62 FC | 	wrlong	local01, fp
0c3b4     04 03 90 FD | 	jmp	#LR__1060
0c3b8                 | LR__1050
0c3b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0c3b8     08 4E 05 F1 | 	add	fp, #8
0c3bc     A7 1E 02 FB | 	rdlong	local01, fp
0c3c0     08 4E 85 F1 | 	sub	fp, #8
0c3c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c3c8     14 4E 05 A1 |  if_e	add	fp, #20
0c3cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0c3d0     14 4E 85 A1 |  if_e	sub	fp, #20
0c3d4     12 23 02 A6 |  if_e	mov	local03, local04
0c3d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c3dc     2C 00 90 5D |  if_ne	jmp	#LR__1051
0c3e0     00 1E 06 F6 | 	mov	local01, #0
0c3e4     A7 12 02 FB | 	rdlong	arg01, fp
0c3e8     0C 4E 05 F1 | 	add	fp, #12
0c3ec     A7 14 02 FB | 	rdlong	arg02, fp
0c3f0     0C 4E 85 F1 | 	sub	fp, #12
0c3f4     01 16 06 F6 | 	mov	arg03, #1
0c3f8     04 A4 B0 FD | 	call	#__system___float_cmp
0c3fc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c400     00 1E 26 C6 |  if_b	not	local01, #0
0c404     A7 1E 62 FC | 	wrlong	local01, fp
0c408     B0 02 90 FD | 	jmp	#LR__1060
0c40c                 | LR__1051
0c40c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0c40c     08 4E 05 F1 | 	add	fp, #8
0c410     A7 1E 02 FB | 	rdlong	local01, fp
0c414     08 4E 85 F1 | 	sub	fp, #8
0c418     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c41c     14 4E 05 A1 |  if_e	add	fp, #20
0c420     A7 24 02 AB |  if_e	rdlong	local04, fp
0c424     14 4E 85 A1 |  if_e	sub	fp, #20
0c428     12 23 02 A6 |  if_e	mov	local03, local04
0c42c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c430     48 00 90 5D |  if_ne	jmp	#LR__1052
0c434     00 1E 06 F6 | 	mov	local01, #0
0c438     A7 20 02 FB | 	rdlong	local02, fp
0c43c     0C 4E 05 F1 | 	add	fp, #12
0c440     A7 12 02 FB | 	rdlong	arg01, fp
0c444     0C 4E 85 F1 | 	sub	fp, #12
0c448     09 13 52 F6 | 	abs	arg01, arg01 wc
0c44c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c450     00 26 06 36 |  if_ae	mov	local05, #0
0c454     48 9C B0 FD | 	call	#__system___float_fromuns
0c458     13 FB 61 F5 | 	xor	result1, local05
0c45c     FD 14 02 F6 | 	mov	arg02, result1
0c460     10 13 02 F6 | 	mov	arg01, local02
0c464     01 16 06 F6 | 	mov	arg03, #1
0c468     94 A3 B0 FD | 	call	#__system___float_cmp
0c46c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c470     00 1E 26 C6 |  if_b	not	local01, #0
0c474     A7 1E 62 FC | 	wrlong	local01, fp
0c478     40 02 90 FD | 	jmp	#LR__1060
0c47c                 | LR__1052
0c47c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0c47c     08 4E 05 F1 | 	add	fp, #8
0c480     A7 1E 02 FB | 	rdlong	local01, fp
0c484     08 4E 85 F1 | 	sub	fp, #8
0c488     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c48c     14 4E 05 A1 |  if_e	add	fp, #20
0c490     A7 24 02 AB |  if_e	rdlong	local04, fp
0c494     14 4E 85 A1 |  if_e	sub	fp, #20
0c498     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c49c     38 00 90 5D |  if_ne	jmp	#LR__1053
0c4a0     00 1E 06 F6 | 	mov	local01, #0
0c4a4     A7 20 02 FB | 	rdlong	local02, fp
0c4a8     0C 4E 05 F1 | 	add	fp, #12
0c4ac     A7 12 02 FB | 	rdlong	arg01, fp
0c4b0     0C 4E 85 F1 | 	sub	fp, #12
0c4b4     E8 9B B0 FD | 	call	#__system___float_fromuns
0c4b8     FD 14 02 F6 | 	mov	arg02, result1
0c4bc     10 13 02 F6 | 	mov	arg01, local02
0c4c0     01 16 06 F6 | 	mov	arg03, #1
0c4c4     38 A3 B0 FD | 	call	#__system___float_cmp
0c4c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c4cc     00 1E 26 C6 |  if_b	not	local01, #0
0c4d0     A7 1E 62 FC | 	wrlong	local01, fp
0c4d4     E4 01 90 FD | 	jmp	#LR__1060
0c4d8                 | LR__1053
0c4d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0c4d8     08 4E 05 F1 | 	add	fp, #8
0c4dc     A7 1E 02 FB | 	rdlong	local01, fp
0c4e0     08 4E 85 F1 | 	sub	fp, #8
0c4e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c4e8     14 4E 05 A1 |  if_e	add	fp, #20
0c4ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0c4f0     14 4E 85 A1 |  if_e	sub	fp, #20
0c4f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c4f8     44 00 90 5D |  if_ne	jmp	#LR__1054
0c4fc     00 1E 06 F6 | 	mov	local01, #0
0c500     A7 12 02 FB | 	rdlong	arg01, fp
0c504     09 13 52 F6 | 	abs	arg01, arg01 wc
0c508     1F 26 C6 C9 |  if_b	decod	local05, #31
0c50c     00 26 06 36 |  if_ae	mov	local05, #0
0c510     8C 9B B0 FD | 	call	#__system___float_fromuns
0c514     13 FB 61 F5 | 	xor	result1, local05
0c518     FD 12 02 F6 | 	mov	arg01, result1
0c51c     0C 4E 05 F1 | 	add	fp, #12
0c520     A7 14 02 FB | 	rdlong	arg02, fp
0c524     0C 4E 85 F1 | 	sub	fp, #12
0c528     01 16 06 F6 | 	mov	arg03, #1
0c52c     D0 A2 B0 FD | 	call	#__system___float_cmp
0c530     01 FA 55 F2 | 	cmps	result1, #1 wc
0c534     00 1E 26 C6 |  if_b	not	local01, #0
0c538     A7 1E 62 FC | 	wrlong	local01, fp
0c53c     7C 01 90 FD | 	jmp	#LR__1060
0c540                 | LR__1054
0c540                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0c540     08 4E 05 F1 | 	add	fp, #8
0c544     A7 1E 02 FB | 	rdlong	local01, fp
0c548     08 4E 85 F1 | 	sub	fp, #8
0c54c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c550     14 4E 05 A1 |  if_e	add	fp, #20
0c554     A7 22 02 AB |  if_e	rdlong	local03, fp
0c558     14 4E 85 A1 |  if_e	sub	fp, #20
0c55c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c560     24 00 90 5D |  if_ne	jmp	#LR__1055
0c564     00 1E 06 F6 | 	mov	local01, #0
0c568     A7 20 02 FB | 	rdlong	local02, fp
0c56c     0C 4E 05 F1 | 	add	fp, #12
0c570     A7 22 02 FB | 	rdlong	local03, fp
0c574     0C 4E 85 F1 | 	sub	fp, #12
0c578     11 21 5A F2 | 	cmps	local02, local03 wcz
0c57c     01 1E 66 E6 |  if_be	neg	local01, #1
0c580     A7 1E 62 FC | 	wrlong	local01, fp
0c584     34 01 90 FD | 	jmp	#LR__1060
0c588                 | LR__1055
0c588                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0c588     08 4E 05 F1 | 	add	fp, #8
0c58c     A7 1E 02 FB | 	rdlong	local01, fp
0c590     08 4E 85 F1 | 	sub	fp, #8
0c594     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c598     14 4E 05 A1 |  if_e	add	fp, #20
0c59c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c5a0     14 4E 85 A1 |  if_e	sub	fp, #20
0c5a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c5a8     24 00 90 5D |  if_ne	jmp	#LR__1056
0c5ac     00 1E 06 F6 | 	mov	local01, #0
0c5b0     A7 20 02 FB | 	rdlong	local02, fp
0c5b4     0C 4E 05 F1 | 	add	fp, #12
0c5b8     A7 22 02 FB | 	rdlong	local03, fp
0c5bc     0C 4E 85 F1 | 	sub	fp, #12
0c5c0     11 21 5A F2 | 	cmps	local02, local03 wcz
0c5c4     01 1E 66 E6 |  if_be	neg	local01, #1
0c5c8     A7 1E 62 FC | 	wrlong	local01, fp
0c5cc     EC 00 90 FD | 	jmp	#LR__1060
0c5d0                 | LR__1056
0c5d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0c5d0     08 4E 05 F1 | 	add	fp, #8
0c5d4     A7 1E 02 FB | 	rdlong	local01, fp
0c5d8     08 4E 85 F1 | 	sub	fp, #8
0c5dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c5e0     14 4E 05 A1 |  if_e	add	fp, #20
0c5e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0c5e8     14 4E 85 A1 |  if_e	sub	fp, #20
0c5ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c5f0     34 00 90 5D |  if_ne	jmp	#LR__1057
0c5f4     00 1E 06 F6 | 	mov	local01, #0
0c5f8     A7 12 02 FB | 	rdlong	arg01, fp
0c5fc     A0 9A B0 FD | 	call	#__system___float_fromuns
0c600     FD 12 02 F6 | 	mov	arg01, result1
0c604     0C 4E 05 F1 | 	add	fp, #12
0c608     A7 14 02 FB | 	rdlong	arg02, fp
0c60c     0C 4E 85 F1 | 	sub	fp, #12
0c610     01 16 06 F6 | 	mov	arg03, #1
0c614     E8 A1 B0 FD | 	call	#__system___float_cmp
0c618     01 FA 55 F2 | 	cmps	result1, #1 wc
0c61c     00 1E 26 C6 |  if_b	not	local01, #0
0c620     A7 1E 62 FC | 	wrlong	local01, fp
0c624     94 00 90 FD | 	jmp	#LR__1060
0c628                 | LR__1057
0c628                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0c628     08 4E 05 F1 | 	add	fp, #8
0c62c     A7 1E 02 FB | 	rdlong	local01, fp
0c630     08 4E 85 F1 | 	sub	fp, #8
0c634     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c638     14 4E 05 A1 |  if_e	add	fp, #20
0c63c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c640     14 4E 85 A1 |  if_e	sub	fp, #20
0c644     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c648     24 00 90 5D |  if_ne	jmp	#LR__1058
0c64c     00 1E 06 F6 | 	mov	local01, #0
0c650     A7 20 02 FB | 	rdlong	local02, fp
0c654     0C 4E 05 F1 | 	add	fp, #12
0c658     A7 22 02 FB | 	rdlong	local03, fp
0c65c     0C 4E 85 F1 | 	sub	fp, #12
0c660     11 21 5A F2 | 	cmps	local02, local03 wcz
0c664     01 1E 66 E6 |  if_be	neg	local01, #1
0c668     A7 1E 62 FC | 	wrlong	local01, fp
0c66c     4C 00 90 FD | 	jmp	#LR__1060
0c670                 | LR__1058
0c670                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0c670     08 4E 05 F1 | 	add	fp, #8
0c674     A7 1E 02 FB | 	rdlong	local01, fp
0c678     08 4E 85 F1 | 	sub	fp, #8
0c67c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c680     14 4E 05 A1 |  if_e	add	fp, #20
0c684     A7 22 02 AB |  if_e	rdlong	local03, fp
0c688     14 4E 85 A1 |  if_e	sub	fp, #20
0c68c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c690     24 00 90 5D |  if_ne	jmp	#LR__1059
0c694     00 1E 06 F6 | 	mov	local01, #0
0c698     A7 20 02 FB | 	rdlong	local02, fp
0c69c     0C 4E 05 F1 | 	add	fp, #12
0c6a0     A7 22 02 FB | 	rdlong	local03, fp
0c6a4     0C 4E 85 F1 | 	sub	fp, #12
0c6a8     11 21 1A F2 | 	cmp	local02, local03 wcz
0c6ac     01 1E 66 E6 |  if_be	neg	local01, #1
0c6b0     A7 1E 62 FC | 	wrlong	local01, fp
0c6b4     04 00 90 FD | 	jmp	#LR__1060
0c6b8                 | LR__1059
0c6b8     A7 00 68 FC | 	wrlong	#0, fp
0c6bc                 | LR__1060
0c6bc     08 4E 05 F1 | 	add	fp, #8
0c6c0     A7 38 68 FC | 	wrlong	#28, fp
0c6c4     08 4E 85 F1 | 	sub	fp, #8
0c6c8     A7 12 02 F6 | 	mov	arg01, fp
0c6cc     E8 B9 BF FD | 	call	#_push
0c6d0     A7 F0 03 F6 | 	mov	ptra, fp
0c6d4     B2 00 A0 FD | 	call	#popregs_
0c6d8                 | _do_le_ret
0c6d8     2D 00 64 FD | 	ret
0c6dc                 | 
0c6dc                 | ' 
0c6dc                 | ' 
0c6dc                 | ' sub do_ne
0c6dc                 | _do_ne
0c6dc     05 4A 05 F6 | 	mov	COUNT_, #5
0c6e0     A8 00 A0 FD | 	call	#pushregs_
0c6e4     18 F0 07 F1 | 	add	ptra, #24
0c6e8     34 B9 BF FD | 	call	#_pop
0c6ec     FD 1E 02 F6 | 	mov	local01, result1
0c6f0     FE 20 02 F6 | 	mov	local02, result2
0c6f4     FF 22 02 F6 | 	mov	local03, result3
0c6f8     0C 4E 05 F1 | 	add	fp, #12
0c6fc     A7 1E 62 FC | 	wrlong	local01, fp
0c700     04 4E 05 F1 | 	add	fp, #4
0c704     A7 20 62 FC | 	wrlong	local02, fp
0c708     04 4E 05 F1 | 	add	fp, #4
0c70c     A7 22 62 FC | 	wrlong	local03, fp
0c710     14 4E 85 F1 | 	sub	fp, #20
0c714     08 B9 BF FD | 	call	#_pop
0c718     FF 22 02 F6 | 	mov	local03, result3
0c71c     A7 FA 61 FC | 	wrlong	result1, fp
0c720     04 4E 05 F1 | 	add	fp, #4
0c724     A7 FC 61 FC | 	wrlong	result2, fp
0c728     04 4E 05 F1 | 	add	fp, #4
0c72c     A7 22 62 FC | 	wrlong	local03, fp
0c730                 | ' t2=pop()
0c730                 | ' t1=pop()
0c730                 | ' 
0c730                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0c730     08 4E 85 F1 | 	sub	fp, #8
0c734     1F 22 0E F2 | 	cmp	local03, #31 wz
0c738     14 4E 05 A1 |  if_e	add	fp, #20
0c73c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c740     14 4E 85 A1 |  if_e	sub	fp, #20
0c744     12 23 02 A6 |  if_e	mov	local03, local04
0c748     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c74c     28 00 90 5D |  if_ne	jmp	#LR__1070
0c750     00 1E 06 F6 | 	mov	local01, #0
0c754     A7 12 02 FB | 	rdlong	arg01, fp
0c758     0C 4E 05 F1 | 	add	fp, #12
0c75c     A7 14 02 FB | 	rdlong	arg02, fp
0c760     0C 4E 85 F1 | 	sub	fp, #12
0c764     40 73 B0 FD | 	call	#__system___string_cmp
0c768     00 FA 0D F2 | 	cmp	result1, #0 wz
0c76c     00 1E 26 56 |  if_ne	not	local01, #0
0c770     A7 1E 62 FC | 	wrlong	local01, fp
0c774     04 03 90 FD | 	jmp	#LR__1080
0c778                 | LR__1070
0c778                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0c778     08 4E 05 F1 | 	add	fp, #8
0c77c     A7 1E 02 FB | 	rdlong	local01, fp
0c780     08 4E 85 F1 | 	sub	fp, #8
0c784     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c788     14 4E 05 A1 |  if_e	add	fp, #20
0c78c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c790     14 4E 85 A1 |  if_e	sub	fp, #20
0c794     12 23 02 A6 |  if_e	mov	local03, local04
0c798     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c79c     2C 00 90 5D |  if_ne	jmp	#LR__1071
0c7a0     00 1E 06 F6 | 	mov	local01, #0
0c7a4     A7 12 02 FB | 	rdlong	arg01, fp
0c7a8     0C 4E 05 F1 | 	add	fp, #12
0c7ac     A7 14 02 FB | 	rdlong	arg02, fp
0c7b0     0C 4E 85 F1 | 	sub	fp, #12
0c7b4     01 16 06 F6 | 	mov	arg03, #1
0c7b8     44 A0 B0 FD | 	call	#__system___float_cmp
0c7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c7c0     00 1E 26 56 |  if_ne	not	local01, #0
0c7c4     A7 1E 62 FC | 	wrlong	local01, fp
0c7c8     B0 02 90 FD | 	jmp	#LR__1080
0c7cc                 | LR__1071
0c7cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0c7cc     08 4E 05 F1 | 	add	fp, #8
0c7d0     A7 1E 02 FB | 	rdlong	local01, fp
0c7d4     08 4E 85 F1 | 	sub	fp, #8
0c7d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c7dc     14 4E 05 A1 |  if_e	add	fp, #20
0c7e0     A7 24 02 AB |  if_e	rdlong	local04, fp
0c7e4     14 4E 85 A1 |  if_e	sub	fp, #20
0c7e8     12 23 02 A6 |  if_e	mov	local03, local04
0c7ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c7f0     48 00 90 5D |  if_ne	jmp	#LR__1072
0c7f4     00 1E 06 F6 | 	mov	local01, #0
0c7f8     A7 20 02 FB | 	rdlong	local02, fp
0c7fc     0C 4E 05 F1 | 	add	fp, #12
0c800     A7 12 02 FB | 	rdlong	arg01, fp
0c804     0C 4E 85 F1 | 	sub	fp, #12
0c808     09 13 52 F6 | 	abs	arg01, arg01 wc
0c80c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c810     00 26 06 36 |  if_ae	mov	local05, #0
0c814     88 98 B0 FD | 	call	#__system___float_fromuns
0c818     13 FB 61 F5 | 	xor	result1, local05
0c81c     FD 14 02 F6 | 	mov	arg02, result1
0c820     10 13 02 F6 | 	mov	arg01, local02
0c824     01 16 06 F6 | 	mov	arg03, #1
0c828     D4 9F B0 FD | 	call	#__system___float_cmp
0c82c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c830     00 1E 26 56 |  if_ne	not	local01, #0
0c834     A7 1E 62 FC | 	wrlong	local01, fp
0c838     40 02 90 FD | 	jmp	#LR__1080
0c83c                 | LR__1072
0c83c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0c83c     08 4E 05 F1 | 	add	fp, #8
0c840     A7 1E 02 FB | 	rdlong	local01, fp
0c844     08 4E 85 F1 | 	sub	fp, #8
0c848     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c84c     14 4E 05 A1 |  if_e	add	fp, #20
0c850     A7 24 02 AB |  if_e	rdlong	local04, fp
0c854     14 4E 85 A1 |  if_e	sub	fp, #20
0c858     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c85c     38 00 90 5D |  if_ne	jmp	#LR__1073
0c860     00 1E 06 F6 | 	mov	local01, #0
0c864     A7 20 02 FB | 	rdlong	local02, fp
0c868     0C 4E 05 F1 | 	add	fp, #12
0c86c     A7 12 02 FB | 	rdlong	arg01, fp
0c870     0C 4E 85 F1 | 	sub	fp, #12
0c874     28 98 B0 FD | 	call	#__system___float_fromuns
0c878     FD 14 02 F6 | 	mov	arg02, result1
0c87c     10 13 02 F6 | 	mov	arg01, local02
0c880     01 16 06 F6 | 	mov	arg03, #1
0c884     78 9F B0 FD | 	call	#__system___float_cmp
0c888     00 FA 0D F2 | 	cmp	result1, #0 wz
0c88c     00 1E 26 56 |  if_ne	not	local01, #0
0c890     A7 1E 62 FC | 	wrlong	local01, fp
0c894     E4 01 90 FD | 	jmp	#LR__1080
0c898                 | LR__1073
0c898                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0c898     08 4E 05 F1 | 	add	fp, #8
0c89c     A7 1E 02 FB | 	rdlong	local01, fp
0c8a0     08 4E 85 F1 | 	sub	fp, #8
0c8a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c8a8     14 4E 05 A1 |  if_e	add	fp, #20
0c8ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0c8b0     14 4E 85 A1 |  if_e	sub	fp, #20
0c8b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c8b8     44 00 90 5D |  if_ne	jmp	#LR__1074
0c8bc     00 1E 06 F6 | 	mov	local01, #0
0c8c0     A7 12 02 FB | 	rdlong	arg01, fp
0c8c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8c8     1F 26 C6 C9 |  if_b	decod	local05, #31
0c8cc     00 26 06 36 |  if_ae	mov	local05, #0
0c8d0     CC 97 B0 FD | 	call	#__system___float_fromuns
0c8d4     13 FB 61 F5 | 	xor	result1, local05
0c8d8     FD 12 02 F6 | 	mov	arg01, result1
0c8dc     0C 4E 05 F1 | 	add	fp, #12
0c8e0     A7 14 02 FB | 	rdlong	arg02, fp
0c8e4     0C 4E 85 F1 | 	sub	fp, #12
0c8e8     01 16 06 F6 | 	mov	arg03, #1
0c8ec     10 9F B0 FD | 	call	#__system___float_cmp
0c8f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c8f4     00 1E 26 56 |  if_ne	not	local01, #0
0c8f8     A7 1E 62 FC | 	wrlong	local01, fp
0c8fc     7C 01 90 FD | 	jmp	#LR__1080
0c900                 | LR__1074
0c900                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0c900     08 4E 05 F1 | 	add	fp, #8
0c904     A7 1E 02 FB | 	rdlong	local01, fp
0c908     08 4E 85 F1 | 	sub	fp, #8
0c90c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c910     14 4E 05 A1 |  if_e	add	fp, #20
0c914     A7 22 02 AB |  if_e	rdlong	local03, fp
0c918     14 4E 85 A1 |  if_e	sub	fp, #20
0c91c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c920     24 00 90 5D |  if_ne	jmp	#LR__1075
0c924     00 1E 06 F6 | 	mov	local01, #0
0c928     A7 20 02 FB | 	rdlong	local02, fp
0c92c     0C 4E 05 F1 | 	add	fp, #12
0c930     A7 22 02 FB | 	rdlong	local03, fp
0c934     0C 4E 85 F1 | 	sub	fp, #12
0c938     11 21 0A F2 | 	cmp	local02, local03 wz
0c93c     01 1E 66 56 |  if_ne	neg	local01, #1
0c940     A7 1E 62 FC | 	wrlong	local01, fp
0c944     34 01 90 FD | 	jmp	#LR__1080
0c948                 | LR__1075
0c948                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0c948     08 4E 05 F1 | 	add	fp, #8
0c94c     A7 1E 02 FB | 	rdlong	local01, fp
0c950     08 4E 85 F1 | 	sub	fp, #8
0c954     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c958     14 4E 05 A1 |  if_e	add	fp, #20
0c95c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c960     14 4E 85 A1 |  if_e	sub	fp, #20
0c964     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c968     24 00 90 5D |  if_ne	jmp	#LR__1076
0c96c     00 1E 06 F6 | 	mov	local01, #0
0c970     A7 20 02 FB | 	rdlong	local02, fp
0c974     0C 4E 05 F1 | 	add	fp, #12
0c978     A7 22 02 FB | 	rdlong	local03, fp
0c97c     0C 4E 85 F1 | 	sub	fp, #12
0c980     11 21 0A F2 | 	cmp	local02, local03 wz
0c984     01 1E 66 56 |  if_ne	neg	local01, #1
0c988     A7 1E 62 FC | 	wrlong	local01, fp
0c98c     EC 00 90 FD | 	jmp	#LR__1080
0c990                 | LR__1076
0c990                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0c990     08 4E 05 F1 | 	add	fp, #8
0c994     A7 1E 02 FB | 	rdlong	local01, fp
0c998     08 4E 85 F1 | 	sub	fp, #8
0c99c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c9a0     14 4E 05 A1 |  if_e	add	fp, #20
0c9a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0c9a8     14 4E 85 A1 |  if_e	sub	fp, #20
0c9ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c9b0     34 00 90 5D |  if_ne	jmp	#LR__1077
0c9b4     00 1E 06 F6 | 	mov	local01, #0
0c9b8     A7 12 02 FB | 	rdlong	arg01, fp
0c9bc     E0 96 B0 FD | 	call	#__system___float_fromuns
0c9c0     FD 12 02 F6 | 	mov	arg01, result1
0c9c4     0C 4E 05 F1 | 	add	fp, #12
0c9c8     A7 14 02 FB | 	rdlong	arg02, fp
0c9cc     0C 4E 85 F1 | 	sub	fp, #12
0c9d0     01 16 06 F6 | 	mov	arg03, #1
0c9d4     28 9E B0 FD | 	call	#__system___float_cmp
0c9d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c9dc     00 1E 26 56 |  if_ne	not	local01, #0
0c9e0     A7 1E 62 FC | 	wrlong	local01, fp
0c9e4     94 00 90 FD | 	jmp	#LR__1080
0c9e8                 | LR__1077
0c9e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0c9e8     08 4E 05 F1 | 	add	fp, #8
0c9ec     A7 1E 02 FB | 	rdlong	local01, fp
0c9f0     08 4E 85 F1 | 	sub	fp, #8
0c9f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c9f8     14 4E 05 A1 |  if_e	add	fp, #20
0c9fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0ca00     14 4E 85 A1 |  if_e	sub	fp, #20
0ca04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ca08     24 00 90 5D |  if_ne	jmp	#LR__1078
0ca0c     00 1E 06 F6 | 	mov	local01, #0
0ca10     A7 20 02 FB | 	rdlong	local02, fp
0ca14     0C 4E 05 F1 | 	add	fp, #12
0ca18     A7 22 02 FB | 	rdlong	local03, fp
0ca1c     0C 4E 85 F1 | 	sub	fp, #12
0ca20     11 21 0A F2 | 	cmp	local02, local03 wz
0ca24     01 1E 66 56 |  if_ne	neg	local01, #1
0ca28     A7 1E 62 FC | 	wrlong	local01, fp
0ca2c     4C 00 90 FD | 	jmp	#LR__1080
0ca30                 | LR__1078
0ca30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0ca30     08 4E 05 F1 | 	add	fp, #8
0ca34     A7 1E 02 FB | 	rdlong	local01, fp
0ca38     08 4E 85 F1 | 	sub	fp, #8
0ca3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ca40     14 4E 05 A1 |  if_e	add	fp, #20
0ca44     A7 22 02 AB |  if_e	rdlong	local03, fp
0ca48     14 4E 85 A1 |  if_e	sub	fp, #20
0ca4c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ca50     24 00 90 5D |  if_ne	jmp	#LR__1079
0ca54     00 1E 06 F6 | 	mov	local01, #0
0ca58     A7 20 02 FB | 	rdlong	local02, fp
0ca5c     0C 4E 05 F1 | 	add	fp, #12
0ca60     A7 22 02 FB | 	rdlong	local03, fp
0ca64     0C 4E 85 F1 | 	sub	fp, #12
0ca68     11 21 0A F2 | 	cmp	local02, local03 wz
0ca6c     01 1E 66 56 |  if_ne	neg	local01, #1
0ca70     A7 1E 62 FC | 	wrlong	local01, fp
0ca74     04 00 90 FD | 	jmp	#LR__1080
0ca78                 | LR__1079
0ca78     A7 00 68 FC | 	wrlong	#0, fp
0ca7c                 | LR__1080
0ca7c     08 4E 05 F1 | 	add	fp, #8
0ca80     A7 38 68 FC | 	wrlong	#28, fp
0ca84     08 4E 85 F1 | 	sub	fp, #8
0ca88     A7 12 02 F6 | 	mov	arg01, fp
0ca8c     28 B6 BF FD | 	call	#_push
0ca90     A7 F0 03 F6 | 	mov	ptra, fp
0ca94     B2 00 A0 FD | 	call	#popregs_
0ca98                 | _do_ne_ret
0ca98     2D 00 64 FD | 	ret
0ca9c                 | 
0ca9c                 | ' 
0ca9c                 | ' 
0ca9c                 | ' 
0ca9c                 | ' ' -------------------   convert a variable on the top of stack to integer
0ca9c                 | ' 
0ca9c                 | ' sub do_converttoint
0ca9c                 | _do_converttoint
0ca9c     02 4A 05 F6 | 	mov	COUNT_, #2
0caa0     A8 00 A0 FD | 	call	#pushregs_
0caa4     18 F0 07 F1 | 	add	ptra, #24
0caa8     74 B5 BF FD | 	call	#_pop
0caac     FE 1E 02 F6 | 	mov	local01, result2
0cab0     FF 20 02 F6 | 	mov	local02, result3
0cab4     A7 FA 61 FC | 	wrlong	result1, fp
0cab8     04 4E 05 F1 | 	add	fp, #4
0cabc     A7 1E 62 FC | 	wrlong	local01, fp
0cac0     04 4E 05 F1 | 	add	fp, #4
0cac4     A7 20 62 FC | 	wrlong	local02, fp
0cac8                 | ' t1=pop() 
0cac8                 | ' select case t1.result_type
0cac8     08 4E 85 F1 | 	sub	fp, #8
0cacc     1C 20 0E F2 | 	cmp	local02, #28 wz
0cad0     24 00 90 AD |  if_e	jmp	#LR__1090
0cad4     1D 20 0E F2 | 	cmp	local02, #29 wz
0cad8     38 00 90 AD |  if_e	jmp	#LR__1091
0cadc     1E 20 0E F2 | 	cmp	local02, #30 wz
0cae0     4C 00 90 AD |  if_e	jmp	#LR__1092
0cae4     1F 20 0E F2 | 	cmp	local02, #31 wz
0cae8     68 00 90 AD |  if_e	jmp	#LR__1093
0caec     FF 20 0E F2 | 	cmp	local02, #255 wz
0caf0     8C 00 90 AD |  if_e	jmp	#LR__1094
0caf4     A8 00 90 FD | 	jmp	#LR__1095
0caf8                 | LR__1090
0caf8     A7 20 02 FB | 	rdlong	local02, fp
0cafc     0C 4E 05 F1 | 	add	fp, #12
0cb00     A7 20 62 FC | 	wrlong	local02, fp
0cb04     04 4E 05 F1 | 	add	fp, #4
0cb08     A7 38 68 FC | 	wrlong	#28, fp
0cb0c     10 4E 85 F1 | 	sub	fp, #16
0cb10     A0 00 90 FD | 	jmp	#LR__1096
0cb14                 | LR__1091
0cb14     A7 20 02 FB | 	rdlong	local02, fp
0cb18     0C 4E 05 F1 | 	add	fp, #12
0cb1c     A7 20 62 FC | 	wrlong	local02, fp
0cb20     04 4E 05 F1 | 	add	fp, #4
0cb24     A7 38 68 FC | 	wrlong	#28, fp
0cb28     10 4E 85 F1 | 	sub	fp, #16
0cb2c     84 00 90 FD | 	jmp	#LR__1096
0cb30                 | LR__1092
0cb30     A7 12 02 FB | 	rdlong	arg01, fp
0cb34     01 14 06 F6 | 	mov	arg02, #1
0cb38     58 9D B0 FD | 	call	#__system___float_tointeger
0cb3c     0C 4E 05 F1 | 	add	fp, #12
0cb40     A7 FA 61 FC | 	wrlong	result1, fp
0cb44     04 4E 05 F1 | 	add	fp, #4
0cb48     A7 38 68 FC | 	wrlong	#28, fp
0cb4c     10 4E 85 F1 | 	sub	fp, #16
0cb50     60 00 90 FD | 	jmp	#LR__1096
0cb54                 | LR__1093
0cb54     A7 12 02 FB | 	rdlong	arg01, fp
0cb58     58 A0 B0 FD | 	call	#__system____builtin_atof
0cb5c     FD 12 02 F6 | 	mov	arg01, result1
0cb60     00 14 06 F6 | 	mov	arg02, #0
0cb64     2C 9D B0 FD | 	call	#__system___float_tointeger
0cb68     0C 4E 05 F1 | 	add	fp, #12
0cb6c     A7 FA 61 FC | 	wrlong	result1, fp
0cb70     04 4E 05 F1 | 	add	fp, #4
0cb74     A7 38 68 FC | 	wrlong	#28, fp
0cb78     10 4E 85 F1 | 	sub	fp, #16
0cb7c     34 00 90 FD | 	jmp	#LR__1096
0cb80                 | LR__1094
0cb80     0C 4E 05 F1 | 	add	fp, #12
0cb84     A7 00 68 FC | 	wrlong	#0, fp
0cb88     0C 4E 85 F1 | 	sub	fp, #12
0cb8c     A7 20 02 FB | 	rdlong	local02, fp
0cb90     10 4E 05 F1 | 	add	fp, #16
0cb94     A7 20 62 FC | 	wrlong	local02, fp
0cb98     10 4E 85 F1 | 	sub	fp, #16
0cb9c     14 00 90 FD | 	jmp	#LR__1096
0cba0                 | LR__1095
0cba0     0C 4E 05 F1 | 	add	fp, #12
0cba4     A7 00 68 FC | 	wrlong	#0, fp
0cba8     04 4E 05 F1 | 	add	fp, #4
0cbac     A7 02 68 FC | 	wrlong	#1, fp
0cbb0     10 4E 85 F1 | 	sub	fp, #16
0cbb4                 | LR__1096
0cbb4     0C 4E 05 F1 | 	add	fp, #12
0cbb8     A7 20 02 FB | 	rdlong	local02, fp
0cbbc     0C 4E 85 F1 | 	sub	fp, #12
0cbc0     A7 20 62 FC | 	wrlong	local02, fp
0cbc4     10 4E 05 F1 | 	add	fp, #16
0cbc8     A7 20 02 FB | 	rdlong	local02, fp
0cbcc     08 4E 85 F1 | 	sub	fp, #8
0cbd0     A7 20 62 FC | 	wrlong	local02, fp
0cbd4     08 4E 85 F1 | 	sub	fp, #8
0cbd8     A7 12 02 F6 | 	mov	arg01, fp
0cbdc     D8 B4 BF FD | 	call	#_push
0cbe0     A7 F0 03 F6 | 	mov	ptra, fp
0cbe4     B2 00 A0 FD | 	call	#popregs_
0cbe8                 | _do_converttoint_ret
0cbe8     2D 00 64 FD | 	ret
0cbec                 | 
0cbec                 | ' 
0cbec                 | ' function converttoint (t1 as expr_result) as integer
0cbec                 | _converttoint
0cbec     02 4A 05 F6 | 	mov	COUNT_, #2
0cbf0     A8 00 A0 FD | 	call	#pushregs_
0cbf4     09 1F 02 F6 | 	mov	local01, arg01
0cbf8                 | ' 
0cbf8                 | ' select case t1.result_type
0cbf8     08 1E 06 F1 | 	add	local01, #8
0cbfc     0F 21 02 FB | 	rdlong	local02, local01
0cc00     08 1E 86 F1 | 	sub	local01, #8
0cc04     1C 20 86 F1 | 	sub	local02, #28
0cc08     04 20 26 F3 | 	fle	local02, #4
0cc0c     30 20 62 FD | 	jmprel	local02
0cc10                 | LR__1100
0cc10     10 00 90 FD | 	jmp	#LR__1101
0cc14     14 00 90 FD | 	jmp	#LR__1102
0cc18     18 00 90 FD | 	jmp	#LR__1103
0cc1c     24 00 90 FD | 	jmp	#LR__1104
0cc20     38 00 90 FD | 	jmp	#LR__1105
0cc24                 | LR__1101
0cc24     0F FB 01 FB | 	rdlong	result1, local01
0cc28     34 00 90 FD | 	jmp	#LR__1106
0cc2c                 | LR__1102
0cc2c     0F FB 01 FB | 	rdlong	result1, local01
0cc30     2C 00 90 FD | 	jmp	#LR__1106
0cc34                 | LR__1103
0cc34     0F 13 02 FB | 	rdlong	arg01, local01
0cc38     01 14 06 F6 | 	mov	arg02, #1
0cc3c     54 9C B0 FD | 	call	#__system___float_tointeger
0cc40     1C 00 90 FD | 	jmp	#LR__1106
0cc44                 | LR__1104
0cc44     0F 13 02 FB | 	rdlong	arg01, local01
0cc48     68 9F B0 FD | 	call	#__system____builtin_atof
0cc4c     FD 12 02 F6 | 	mov	arg01, result1
0cc50     00 14 06 F6 | 	mov	arg02, #0
0cc54     3C 9C B0 FD | 	call	#__system___float_tointeger
0cc58     04 00 90 FD | 	jmp	#LR__1106
0cc5c                 | LR__1105
0cc5c     00 FA 05 F6 | 	mov	result1, #0
0cc60                 | LR__1106
0cc60     A7 F0 03 F6 | 	mov	ptra, fp
0cc64     B2 00 A0 FD | 	call	#popregs_
0cc68                 | _converttoint_ret
0cc68     2D 00 64 FD | 	ret
0cc6c                 | 
0cc6c                 | ' 
0cc6c                 | ' sub do_rnd
0cc6c                 | _do_rnd
0cc6c     01 4A 05 F6 | 	mov	COUNT_, #1
0cc70     A8 00 A0 FD | 	call	#pushregs_
0cc74     10 F0 07 F1 | 	add	ptra, #16
0cc78     41 00 00 FF 
0cc7c     44 E4 05 F1 | 	add	objptr, ##33348
0cc80     F2 1E 02 FB | 	rdlong	local01, objptr
0cc84     0F 17 02 F6 | 	mov	arg03, local01
0cc88     01 16 66 F0 | 	shl	arg03, #1
0cc8c     0F 17 02 F1 | 	add	arg03, local01
0cc90     02 16 66 F0 | 	shl	arg03, #2
0cc94     03 00 00 FF 
0cc98     04 E4 85 F1 | 	sub	objptr, ##1540
0cc9c     F2 16 02 F1 | 	add	arg03, objptr
0cca0     0B 17 02 FB | 	rdlong	arg03, arg03
0cca4     0C 4E 05 F1 | 	add	fp, #12
0cca8     A7 16 62 FC | 	wrlong	arg03, fp
0ccac                 | ' 
0ccac                 | ' numpar=compiledline(lineptr_e).result.uresult
0ccac                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0ccac     0C 4E 85 F1 | 	sub	fp, #12
0ccb0     02 16 16 F2 | 	cmp	arg03, #2 wc
0ccb4     3E 00 00 FF 
0ccb8     40 E4 85 F1 | 	sub	objptr, ##31808
0ccbc     3C 00 90 CD |  if_b	jmp	#LR__1110
0ccc0     00 12 06 F6 | 	mov	arg01, #0
0ccc4     9C C2 B0 FD | 	call	#__system___getiolock_0306
0ccc8     FD 12 02 F6 | 	mov	arg01, result1
0cccc     B0 6D B0 FD | 	call	#__system___lockmem
0ccd0     18 01 00 FF 
0ccd4     D8 14 06 F6 | 	mov	arg02, ##@LR__4213
0ccd8     00 12 06 F6 | 	mov	arg01, #0
0ccdc     00 16 06 F6 | 	mov	arg03, #0
0cce0     A8 79 B0 FD | 	call	#__system___basic_print_string
0cce4     00 12 06 F6 | 	mov	arg01, #0
0cce8     78 C2 B0 FD | 	call	#__system___getiolock_0306
0ccec     FD 00 68 FC | 	wrlong	#0, result1
0ccf0     27 12 06 F6 | 	mov	arg01, #39
0ccf4     94 38 B0 FD | 	call	#_printerror
0ccf8     2C 01 90 FD | 	jmp	#LR__1117
0ccfc                 | LR__1110
0ccfc                 | ' if numpar=0 then
0ccfc     0C 4E 05 F1 | 	add	fp, #12
0cd00     A7 FE 09 FB | 	rdlong	result3, fp wz
0cd04     0C 4E 85 F1 | 	sub	fp, #12
0cd08     20 00 90 5D |  if_ne	jmp	#LR__1111
0cd0c     08 4E 05 F1 | 	add	fp, #8
0cd10     A7 3A 68 FC | 	wrlong	#29, fp
0cd14     08 4E 85 F1 | 	sub	fp, #8
0cd18     1B FA 61 FD | 	getrnd	result1
0cd1c     A7 FA 61 FC | 	wrlong	result1, fp
0cd20     A7 12 02 F6 | 	mov	arg01, fp
0cd24     90 B3 BF FD | 	call	#_push
0cd28     FC 00 90 FD | 	jmp	#LR__1116
0cd2c                 | LR__1111
0cd2c     F0 B2 BF FD | 	call	#_pop
0cd30     A7 FA 61 FC | 	wrlong	result1, fp
0cd34     04 4E 05 F1 | 	add	fp, #4
0cd38     A7 FC 61 FC | 	wrlong	result2, fp
0cd3c     04 4E 05 F1 | 	add	fp, #4
0cd40     A7 FE 61 FC | 	wrlong	result3, fp
0cd44                 | '   t1=pop()
0cd44                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0cd44     08 4E 85 F1 | 	sub	fp, #8
0cd48     1C FE 0D F2 | 	cmp	result3, #28 wz
0cd4c     08 4E 05 51 |  if_ne	add	fp, #8
0cd50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cd54     08 4E 85 51 |  if_ne	sub	fp, #8
0cd58     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0cd5c     2C 00 90 5D |  if_ne	jmp	#LR__1112
0cd60     1B FA 61 FD | 	getrnd	result1
0cd64     A7 1E 02 FB | 	rdlong	local01, fp
0cd68     0F FB 11 FD | 	qdiv	result1, local01
0cd6c     A7 12 02 F6 | 	mov	arg01, fp
0cd70     19 1E 62 FD | 	getqy	local01
0cd74     A7 1E 62 FC | 	wrlong	local01, fp
0cd78     08 4E 05 F1 | 	add	fp, #8
0cd7c     A7 3A 68 FC | 	wrlong	#29, fp
0cd80     08 4E 85 F1 | 	sub	fp, #8
0cd84     30 B3 BF FD | 	call	#_push
0cd88     9C 00 90 FD | 	jmp	#LR__1115
0cd8c                 | LR__1112
0cd8c     08 4E 05 F1 | 	add	fp, #8
0cd90     A7 1E 02 FB | 	rdlong	local01, fp
0cd94     08 4E 85 F1 | 	sub	fp, #8
0cd98     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cd9c     48 00 90 5D |  if_ne	jmp	#LR__1113
0cda0     A7 12 02 FB | 	rdlong	arg01, fp
0cda4     00 C0 24 FF 
0cda8     00 14 06 F6 | 	mov	arg02, ##1233125376
0cdac     20 98 B0 FD | 	call	#__system___float_div
0cdb0     FD 1E 02 F6 | 	mov	local01, result1
0cdb4     1B 12 62 FD | 	getrnd	arg01
0cdb8     74 13 06 F4 | 	bitl	arg01, #372
0cdbc     E0 92 B0 FD | 	call	#__system___float_fromuns
0cdc0     FD 14 02 F6 | 	mov	arg02, result1
0cdc4     0F 13 02 F6 | 	mov	arg01, local01
0cdc8     00 96 B0 FD | 	call	#__system___float_mul
0cdcc     A7 FA 61 FC | 	wrlong	result1, fp
0cdd0     08 4E 05 F1 | 	add	fp, #8
0cdd4     A7 3C 68 FC | 	wrlong	#30, fp
0cdd8     08 4E 85 F1 | 	sub	fp, #8
0cddc     A7 12 02 F6 | 	mov	arg01, fp
0cde0     D4 B2 BF FD | 	call	#_push
0cde4     40 00 90 FD | 	jmp	#LR__1114
0cde8                 | LR__1113
0cde8                 | '     print "rnd: "; : printerror(40) 
0cde8     00 12 06 F6 | 	mov	arg01, #0
0cdec     74 C1 B0 FD | 	call	#__system___getiolock_0306
0cdf0     FD 12 02 F6 | 	mov	arg01, result1
0cdf4     88 6C B0 FD | 	call	#__system___lockmem
0cdf8     18 01 00 FF 
0cdfc     DE 14 06 F6 | 	mov	arg02, ##@LR__4214
0ce00     00 12 06 F6 | 	mov	arg01, #0
0ce04     00 16 06 F6 | 	mov	arg03, #0
0ce08     80 78 B0 FD | 	call	#__system___basic_print_string
0ce0c     00 12 06 F6 | 	mov	arg01, #0
0ce10     50 C1 B0 FD | 	call	#__system___getiolock_0306
0ce14     FD 00 68 FC | 	wrlong	#0, result1
0ce18     28 12 06 F6 | 	mov	arg01, #40
0ce1c     6C 37 B0 FD | 	call	#_printerror
0ce20     A7 12 02 F6 | 	mov	arg01, fp
0ce24     90 B2 BF FD | 	call	#_push
0ce28                 | LR__1114
0ce28                 | LR__1115
0ce28                 | LR__1116
0ce28                 | LR__1117
0ce28     A7 F0 03 F6 | 	mov	ptra, fp
0ce2c     B2 00 A0 FD | 	call	#popregs_
0ce30                 | _do_rnd_ret
0ce30     2D 00 64 FD | 	ret
0ce34                 | 
0ce34                 | ' 
0ce34                 | ' sub do_sin
0ce34                 | _do_sin
0ce34     03 4A 05 F6 | 	mov	COUNT_, #3
0ce38     A8 00 A0 FD | 	call	#pushregs_
0ce3c     10 F0 07 F1 | 	add	ptra, #16
0ce40     41 00 00 FF 
0ce44     44 E4 05 F1 | 	add	objptr, ##33348
0ce48     F2 1E 02 FB | 	rdlong	local01, objptr
0ce4c     0F 17 02 F6 | 	mov	arg03, local01
0ce50     01 16 66 F0 | 	shl	arg03, #1
0ce54     0F 17 02 F1 | 	add	arg03, local01
0ce58     02 16 66 F0 | 	shl	arg03, #2
0ce5c     03 00 00 FF 
0ce60     04 E4 85 F1 | 	sub	objptr, ##1540
0ce64     F2 16 02 F1 | 	add	arg03, objptr
0ce68     0B 17 02 FB | 	rdlong	arg03, arg03
0ce6c     0C 4E 05 F1 | 	add	fp, #12
0ce70     A7 16 62 FC | 	wrlong	arg03, fp
0ce74                 | ' 
0ce74                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce74                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0ce74     0C 4E 85 F1 | 	sub	fp, #12
0ce78     02 16 16 F2 | 	cmp	arg03, #2 wc
0ce7c     3E 00 00 FF 
0ce80     40 E4 85 F1 | 	sub	objptr, ##31808
0ce84     0C 4E 05 C1 |  if_b	add	fp, #12
0ce88     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0ce8c     0C 4E 85 C1 |  if_b	sub	fp, #12
0ce90     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0ce94     00 12 06 F6 | 	mov	arg01, #0
0ce98     C8 C0 B0 FD | 	call	#__system___getiolock_0306
0ce9c     FD 12 02 F6 | 	mov	arg01, result1
0cea0     DC 6B B0 FD | 	call	#__system___lockmem
0cea4     18 01 00 FF 
0cea8     E4 14 06 F6 | 	mov	arg02, ##@LR__4215
0ceac     00 12 06 F6 | 	mov	arg01, #0
0ceb0     00 16 06 F6 | 	mov	arg03, #0
0ceb4     D4 77 B0 FD | 	call	#__system___basic_print_string
0ceb8     00 12 06 F6 | 	mov	arg01, #0
0cebc     A4 C0 B0 FD | 	call	#__system___getiolock_0306
0cec0     FD 00 68 FC | 	wrlong	#0, result1
0cec4     27 12 06 F6 | 	mov	arg01, #39
0cec8     C0 36 B0 FD | 	call	#_printerror
0cecc     40 01 90 FD | 	jmp	#LR__1125
0ced0                 | LR__1120
0ced0     4C B1 BF FD | 	call	#_pop
0ced4     A7 FA 61 FC | 	wrlong	result1, fp
0ced8     04 4E 05 F1 | 	add	fp, #4
0cedc     A7 FC 61 FC | 	wrlong	result2, fp
0cee0     04 4E 05 F1 | 	add	fp, #4
0cee4     A7 FE 61 FC | 	wrlong	result3, fp
0cee8                 | ' t1=pop()
0cee8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0cee8     08 4E 85 F1 | 	sub	fp, #8
0ceec     1C FE 0D F2 | 	cmp	result3, #28 wz
0cef0     08 4E 05 51 |  if_ne	add	fp, #8
0cef4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cef8     08 4E 85 51 |  if_ne	sub	fp, #8
0cefc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0cf00     70 00 90 5D |  if_ne	jmp	#LR__1121
0cf04     A7 1E 02 FB | 	rdlong	local01, fp
0cf08     0F 1F 52 F6 | 	abs	local01, local01 wc
0cf0c     68 1F 16 FD | 	qdiv	local01, #360
0cf10     87 24 20 FF 
0cf14     DB 21 06 F6 | 	mov	local02, ##1078530011
0cf18     19 1E 62 FD | 	getqy	local01
0cf1c     0F 13 82 F6 | 	negc	arg01, local01
0cf20     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf24     1F 22 C6 C9 |  if_b	decod	local03, #31
0cf28     00 22 06 36 |  if_ae	mov	local03, #0
0cf2c     70 91 B0 FD | 	call	#__system___float_fromuns
0cf30     11 FB 61 F5 | 	xor	result1, local03
0cf34     FD 12 02 F6 | 	mov	arg01, result1
0cf38     00 9A 21 FF 
0cf3c     00 14 06 F6 | 	mov	arg02, ##1127481344
0cf40     8C 96 B0 FD | 	call	#__system___float_div
0cf44     FD 14 02 F6 | 	mov	arg02, result1
0cf48     10 13 02 F6 | 	mov	arg01, local02
0cf4c     7C 94 B0 FD | 	call	#__system___float_mul
0cf50     FD 12 02 F6 | 	mov	arg01, result1
0cf54     B0 9D B0 FD | 	call	#__system____builtin_sinf
0cf58     A7 FA 61 FC | 	wrlong	result1, fp
0cf5c     08 4E 05 F1 | 	add	fp, #8
0cf60     A7 3C 68 FC | 	wrlong	#30, fp
0cf64     08 4E 85 F1 | 	sub	fp, #8
0cf68     A7 12 02 F6 | 	mov	arg01, fp
0cf6c     48 B1 BF FD | 	call	#_push
0cf70     9C 00 90 FD | 	jmp	#LR__1124
0cf74                 | LR__1121
0cf74     08 4E 05 F1 | 	add	fp, #8
0cf78     A7 20 02 FB | 	rdlong	local02, fp
0cf7c     08 4E 85 F1 | 	sub	fp, #8
0cf80     1E 20 0E F2 | 	cmp	local02, #30 wz
0cf84     48 00 90 5D |  if_ne	jmp	#LR__1122
0cf88     87 24 20 FF 
0cf8c     DB 21 06 F6 | 	mov	local02, ##1078530011
0cf90     A7 12 02 FB | 	rdlong	arg01, fp
0cf94     00 9A 21 FF 
0cf98     00 14 06 F6 | 	mov	arg02, ##1127481344
0cf9c     30 96 B0 FD | 	call	#__system___float_div
0cfa0     FD 14 02 F6 | 	mov	arg02, result1
0cfa4     10 13 02 F6 | 	mov	arg01, local02
0cfa8     20 94 B0 FD | 	call	#__system___float_mul
0cfac     FD 12 02 F6 | 	mov	arg01, result1
0cfb0     54 9D B0 FD | 	call	#__system____builtin_sinf
0cfb4     A7 FA 61 FC | 	wrlong	result1, fp
0cfb8     08 4E 05 F1 | 	add	fp, #8
0cfbc     A7 3C 68 FC | 	wrlong	#30, fp
0cfc0     08 4E 85 F1 | 	sub	fp, #8
0cfc4     A7 12 02 F6 | 	mov	arg01, fp
0cfc8     EC B0 BF FD | 	call	#_push
0cfcc     40 00 90 FD | 	jmp	#LR__1123
0cfd0                 | LR__1122
0cfd0                 | '   print "sin: "; : printerror(40) 
0cfd0     00 12 06 F6 | 	mov	arg01, #0
0cfd4     8C BF B0 FD | 	call	#__system___getiolock_0306
0cfd8     FD 12 02 F6 | 	mov	arg01, result1
0cfdc     A0 6A B0 FD | 	call	#__system___lockmem
0cfe0     18 01 00 FF 
0cfe4     EA 14 06 F6 | 	mov	arg02, ##@LR__4216
0cfe8     00 12 06 F6 | 	mov	arg01, #0
0cfec     00 16 06 F6 | 	mov	arg03, #0
0cff0     98 76 B0 FD | 	call	#__system___basic_print_string
0cff4     00 12 06 F6 | 	mov	arg01, #0
0cff8     68 BF B0 FD | 	call	#__system___getiolock_0306
0cffc     FD 00 68 FC | 	wrlong	#0, result1
0d000     28 12 06 F6 | 	mov	arg01, #40
0d004     84 35 B0 FD | 	call	#_printerror
0d008     A7 12 02 F6 | 	mov	arg01, fp
0d00c     A8 B0 BF FD | 	call	#_push
0d010                 | LR__1123
0d010                 | LR__1124
0d010                 | LR__1125
0d010     A7 F0 03 F6 | 	mov	ptra, fp
0d014     B2 00 A0 FD | 	call	#popregs_
0d018                 | _do_sin_ret
0d018     2D 00 64 FD | 	ret
0d01c                 | 
0d01c                 | ' 
0d01c                 | ' sub do_stick
0d01c                 | _do_stick
0d01c     01 4A 05 F6 | 	mov	COUNT_, #1
0d020     A8 00 A0 FD | 	call	#pushregs_
0d024     10 F0 07 F1 | 	add	ptra, #16
0d028     41 00 00 FF 
0d02c     44 E4 05 F1 | 	add	objptr, ##33348
0d030     F2 1E 02 FB | 	rdlong	local01, objptr
0d034     0F 17 02 F6 | 	mov	arg03, local01
0d038     01 16 66 F0 | 	shl	arg03, #1
0d03c     0F 17 02 F1 | 	add	arg03, local01
0d040     02 16 66 F0 | 	shl	arg03, #2
0d044     03 00 00 FF 
0d048     04 E4 85 F1 | 	sub	objptr, ##1540
0d04c     F2 16 02 F1 | 	add	arg03, objptr
0d050     0B 17 02 FB | 	rdlong	arg03, arg03
0d054     0C 4E 05 F1 | 	add	fp, #12
0d058     A7 16 62 FC | 	wrlong	arg03, fp
0d05c                 | ' 
0d05c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d05c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0d05c     0C 4E 85 F1 | 	sub	fp, #12
0d060     02 16 16 F2 | 	cmp	arg03, #2 wc
0d064     3E 00 00 FF 
0d068     40 E4 85 F1 | 	sub	objptr, ##31808
0d06c     3C 00 90 CD |  if_b	jmp	#LR__1130
0d070     00 12 06 F6 | 	mov	arg01, #0
0d074     EC BE B0 FD | 	call	#__system___getiolock_0306
0d078     FD 12 02 F6 | 	mov	arg01, result1
0d07c     00 6A B0 FD | 	call	#__system___lockmem
0d080     18 01 00 FF 
0d084     F0 14 06 F6 | 	mov	arg02, ##@LR__4217
0d088     00 12 06 F6 | 	mov	arg01, #0
0d08c     00 16 06 F6 | 	mov	arg03, #0
0d090     F8 75 B0 FD | 	call	#__system___basic_print_string
0d094     00 12 06 F6 | 	mov	arg01, #0
0d098     C8 BE B0 FD | 	call	#__system___getiolock_0306
0d09c     FD 00 68 FC | 	wrlong	#0, result1
0d0a0     27 12 06 F6 | 	mov	arg01, #39
0d0a4     E4 34 B0 FD | 	call	#_printerror
0d0a8     E8 00 90 FD | 	jmp	#LR__1134
0d0ac                 | LR__1130
0d0ac                 | ' 
0d0ac                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0d0ac     0C 4E 05 F1 | 	add	fp, #12
0d0b0     A7 FE 09 FB | 	rdlong	result3, fp wz
0d0b4     0C 4E 85 F1 | 	sub	fp, #12
0d0b8     30 00 90 5D |  if_ne	jmp	#LR__1131
0d0bc     51 00 00 FF 
0d0c0     C0 E5 05 F1 | 	add	objptr, ##41920
0d0c4     F2 1E 02 FB | 	rdlong	local01, objptr
0d0c8     51 00 00 FF 
0d0cc     C0 E5 85 F1 | 	sub	objptr, ##41920
0d0d0     A7 1E 62 FC | 	wrlong	local01, fp
0d0d4     08 4E 05 F1 | 	add	fp, #8
0d0d8     A7 3A 68 FC | 	wrlong	#29, fp
0d0dc     08 4E 85 F1 | 	sub	fp, #8
0d0e0     A7 12 02 F6 | 	mov	arg01, fp
0d0e4     D0 AF BF FD | 	call	#_push
0d0e8     A8 00 90 FD | 	jmp	#LR__1134
0d0ec                 | LR__1131
0d0ec     30 AF BF FD | 	call	#_pop
0d0f0     A7 FA 61 FC | 	wrlong	result1, fp
0d0f4     04 4E 05 F1 | 	add	fp, #4
0d0f8     A7 FC 61 FC | 	wrlong	result2, fp
0d0fc     04 4E 05 F1 | 	add	fp, #4
0d100     A7 FE 61 FC | 	wrlong	result3, fp
0d104                 | ' 
0d104                 | ' t1=pop()
0d104                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0d104     08 4E 85 F1 | 	sub	fp, #8
0d108     1C FE 0D F2 | 	cmp	result3, #28 wz
0d10c     08 4E 05 51 |  if_ne	add	fp, #8
0d110     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d114     08 4E 85 51 |  if_ne	sub	fp, #8
0d118     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d11c     6C 00 90 5D |  if_ne	jmp	#LR__1133
0d120     A7 1E 02 FB | 	rdlong	local01, fp
0d124     52 00 00 FF 
0d128     80 E4 05 F1 | 	add	objptr, ##42112
0d12c     F2 1E 62 FC | 	wrlong	local01, objptr
0d130                 | '   q=t1.result.uresult
0d130                 | '   if q<7 then 
0d130     52 00 00 FF 
0d134     80 E4 85 F1 | 	sub	objptr, ##42112
0d138     07 1E 56 F2 | 	cmps	local01, #7 wc
0d13c     40 00 90 3D |  if_ae	jmp	#LR__1132
0d140     52 00 00 FF 
0d144     80 E4 05 F1 | 	add	objptr, ##42112
0d148     F2 1E 02 FB | 	rdlong	local01, objptr
0d14c     02 1E 66 F0 | 	shl	local01, #2
0d150     C0 E4 85 F1 | 	sub	objptr, #192
0d154     F2 1E 02 F1 | 	add	local01, objptr
0d158     0F 1F 02 FB | 	rdlong	local01, local01
0d15c     A7 1E 62 FC | 	wrlong	local01, fp
0d160     08 4E 05 F1 | 	add	fp, #8
0d164     A7 3A 68 FC | 	wrlong	#29, fp
0d168     08 4E 85 F1 | 	sub	fp, #8
0d16c     A7 12 02 F6 | 	mov	arg01, fp
0d170     51 00 00 FF 
0d174     C0 E5 85 F1 | 	sub	objptr, ##41920
0d178     3C AF BF FD | 	call	#_push
0d17c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0d17c     14 00 90 FD | 	jmp	#LR__1134
0d180                 | LR__1132
0d180     29 12 06 F6 | 	mov	arg01, #41
0d184     04 34 B0 FD | 	call	#_printerror
0d188                 | '      printerror(41) : return
0d188     08 00 90 FD | 	jmp	#LR__1134
0d18c                 | LR__1133
0d18c     29 12 06 F6 | 	mov	arg01, #41
0d190     F8 33 B0 FD | 	call	#_printerror
0d194                 | LR__1134
0d194     A7 F0 03 F6 | 	mov	ptra, fp
0d198     B2 00 A0 FD | 	call	#popregs_
0d19c                 | _do_stick_ret
0d19c     2D 00 64 FD | 	ret
0d1a0                 | 
0d1a0                 | ' 
0d1a0                 | ' sub do_strig
0d1a0                 | _do_strig
0d1a0     01 4A 05 F6 | 	mov	COUNT_, #1
0d1a4     A8 00 A0 FD | 	call	#pushregs_
0d1a8     10 F0 07 F1 | 	add	ptra, #16
0d1ac     41 00 00 FF 
0d1b0     44 E4 05 F1 | 	add	objptr, ##33348
0d1b4     F2 1E 02 FB | 	rdlong	local01, objptr
0d1b8     0F 17 02 F6 | 	mov	arg03, local01
0d1bc     01 16 66 F0 | 	shl	arg03, #1
0d1c0     0F 17 02 F1 | 	add	arg03, local01
0d1c4     02 16 66 F0 | 	shl	arg03, #2
0d1c8     03 00 00 FF 
0d1cc     04 E4 85 F1 | 	sub	objptr, ##1540
0d1d0     F2 16 02 F1 | 	add	arg03, objptr
0d1d4     0B 17 02 FB | 	rdlong	arg03, arg03
0d1d8     0C 4E 05 F1 | 	add	fp, #12
0d1dc     A7 16 62 FC | 	wrlong	arg03, fp
0d1e0                 | ' 
0d1e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0d1e0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0d1e0     0C 4E 85 F1 | 	sub	fp, #12
0d1e4     02 16 16 F2 | 	cmp	arg03, #2 wc
0d1e8     3E 00 00 FF 
0d1ec     40 E4 85 F1 | 	sub	objptr, ##31808
0d1f0     3C 00 90 CD |  if_b	jmp	#LR__1140
0d1f4     00 12 06 F6 | 	mov	arg01, #0
0d1f8     68 BD B0 FD | 	call	#__system___getiolock_0306
0d1fc     FD 12 02 F6 | 	mov	arg01, result1
0d200     7C 68 B0 FD | 	call	#__system___lockmem
0d204     18 01 00 FF 
0d208     F8 14 06 F6 | 	mov	arg02, ##@LR__4218
0d20c     00 12 06 F6 | 	mov	arg01, #0
0d210     00 16 06 F6 | 	mov	arg03, #0
0d214     74 74 B0 FD | 	call	#__system___basic_print_string
0d218     00 12 06 F6 | 	mov	arg01, #0
0d21c     44 BD B0 FD | 	call	#__system___getiolock_0306
0d220     FD 00 68 FC | 	wrlong	#0, result1
0d224     27 12 06 F6 | 	mov	arg01, #39
0d228     60 33 B0 FD | 	call	#_printerror
0d22c     E8 00 90 FD | 	jmp	#LR__1144
0d230                 | LR__1140
0d230                 | ' 
0d230                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0d230     0C 4E 05 F1 | 	add	fp, #12
0d234     A7 FE 09 FB | 	rdlong	result3, fp wz
0d238     0C 4E 85 F1 | 	sub	fp, #12
0d23c     30 00 90 5D |  if_ne	jmp	#LR__1141
0d240     51 00 00 FF 
0d244     DC E5 05 F1 | 	add	objptr, ##41948
0d248     F2 1E 02 FB | 	rdlong	local01, objptr
0d24c     51 00 00 FF 
0d250     DC E5 85 F1 | 	sub	objptr, ##41948
0d254     A7 1E 62 FC | 	wrlong	local01, fp
0d258     08 4E 05 F1 | 	add	fp, #8
0d25c     A7 3A 68 FC | 	wrlong	#29, fp
0d260     08 4E 85 F1 | 	sub	fp, #8
0d264     A7 12 02 F6 | 	mov	arg01, fp
0d268     4C AE BF FD | 	call	#_push
0d26c     A8 00 90 FD | 	jmp	#LR__1144
0d270                 | LR__1141
0d270     AC AD BF FD | 	call	#_pop
0d274     A7 FA 61 FC | 	wrlong	result1, fp
0d278     04 4E 05 F1 | 	add	fp, #4
0d27c     A7 FC 61 FC | 	wrlong	result2, fp
0d280     04 4E 05 F1 | 	add	fp, #4
0d284     A7 FE 61 FC | 	wrlong	result3, fp
0d288                 | ' 
0d288                 | ' t1=pop()
0d288                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0d288     08 4E 85 F1 | 	sub	fp, #8
0d28c     1C FE 0D F2 | 	cmp	result3, #28 wz
0d290     08 4E 05 51 |  if_ne	add	fp, #8
0d294     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d298     08 4E 85 51 |  if_ne	sub	fp, #8
0d29c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d2a0     6C 00 90 5D |  if_ne	jmp	#LR__1143
0d2a4     A7 1E 02 FB | 	rdlong	local01, fp
0d2a8     52 00 00 FF 
0d2ac     80 E4 05 F1 | 	add	objptr, ##42112
0d2b0     F2 1E 62 FC | 	wrlong	local01, objptr
0d2b4                 | '   q=t1.result.uresult
0d2b4                 | '   if q<7 then 
0d2b4     52 00 00 FF 
0d2b8     80 E4 85 F1 | 	sub	objptr, ##42112
0d2bc     07 1E 56 F2 | 	cmps	local01, #7 wc
0d2c0     40 00 90 3D |  if_ae	jmp	#LR__1142
0d2c4     52 00 00 FF 
0d2c8     80 E4 05 F1 | 	add	objptr, ##42112
0d2cc     F2 1E 02 FB | 	rdlong	local01, objptr
0d2d0     02 1E 66 F0 | 	shl	local01, #2
0d2d4     A4 E4 85 F1 | 	sub	objptr, #164
0d2d8     F2 1E 02 F1 | 	add	local01, objptr
0d2dc     0F 1F 02 FB | 	rdlong	local01, local01
0d2e0     A7 1E 62 FC | 	wrlong	local01, fp
0d2e4     08 4E 05 F1 | 	add	fp, #8
0d2e8     A7 3A 68 FC | 	wrlong	#29, fp
0d2ec     08 4E 85 F1 | 	sub	fp, #8
0d2f0     A7 12 02 F6 | 	mov	arg01, fp
0d2f4     51 00 00 FF 
0d2f8     DC E5 85 F1 | 	sub	objptr, ##41948
0d2fc     B8 AD BF FD | 	call	#_push
0d300                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0d300     14 00 90 FD | 	jmp	#LR__1144
0d304                 | LR__1142
0d304     29 12 06 F6 | 	mov	arg01, #41
0d308     80 32 B0 FD | 	call	#_printerror
0d30c                 | '      printerror(41) : return
0d30c     08 00 90 FD | 	jmp	#LR__1144
0d310                 | LR__1143
0d310     29 12 06 F6 | 	mov	arg01, #41
0d314     74 32 B0 FD | 	call	#_printerror
0d318                 | LR__1144
0d318     A7 F0 03 F6 | 	mov	ptra, fp
0d31c     B2 00 A0 FD | 	call	#popregs_
0d320                 | _do_strig_ret
0d320     2D 00 64 FD | 	ret
0d324                 | 
0d324                 | ' 
0d324                 | ' sub do_getpixel
0d324                 | _do_getpixel
0d324     00 4A 05 F6 | 	mov	COUNT_, #0
0d328     A8 00 A0 FD | 	call	#pushregs_
0d32c     24 F0 07 F1 | 	add	ptra, #36
0d330     41 00 00 FF 
0d334     44 E4 05 F1 | 	add	objptr, ##33348
0d338     F2 16 02 FB | 	rdlong	arg03, objptr
0d33c     0B 15 02 F6 | 	mov	arg02, arg03
0d340     01 14 66 F0 | 	shl	arg02, #1
0d344     0B 15 02 F1 | 	add	arg02, arg03
0d348     02 14 66 F0 | 	shl	arg02, #2
0d34c     03 00 00 FF 
0d350     04 E4 85 F1 | 	sub	objptr, ##1540
0d354     F2 14 02 F1 | 	add	arg02, objptr
0d358     0A 17 02 FB | 	rdlong	arg03, arg02
0d35c     18 4E 05 F1 | 	add	fp, #24
0d360     A7 16 62 FC | 	wrlong	arg03, fp
0d364                 | ' 
0d364                 | ' numpar=compiledline(lineptr_e).result.uresult
0d364                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0d364     18 4E 85 F1 | 	sub	fp, #24
0d368     02 16 0E F2 | 	cmp	arg03, #2 wz
0d36c     3E 00 00 FF 
0d370     40 E4 85 F1 | 	sub	objptr, ##31808
0d374     3C 00 90 AD |  if_e	jmp	#LR__1150
0d378     00 12 06 F6 | 	mov	arg01, #0
0d37c     E4 BB B0 FD | 	call	#__system___getiolock_0306
0d380     FD 12 02 F6 | 	mov	arg01, result1
0d384     F8 66 B0 FD | 	call	#__system___lockmem
0d388     18 01 00 FF 
0d38c     00 15 06 F6 | 	mov	arg02, ##@LR__4219
0d390     00 12 06 F6 | 	mov	arg01, #0
0d394     00 16 06 F6 | 	mov	arg03, #0
0d398     F0 72 B0 FD | 	call	#__system___basic_print_string
0d39c     00 12 06 F6 | 	mov	arg01, #0
0d3a0     C0 BB B0 FD | 	call	#__system___getiolock_0306
0d3a4     FD 00 68 FC | 	wrlong	#0, result1
0d3a8     27 12 06 F6 | 	mov	arg01, #39
0d3ac     DC 31 B0 FD | 	call	#_printerror
0d3b0     B4 00 90 FD | 	jmp	#LR__1151
0d3b4                 | LR__1150
0d3b4     68 AC BF FD | 	call	#_pop
0d3b8     FD 16 02 F6 | 	mov	arg03, result1
0d3bc     FE 14 02 F6 | 	mov	arg02, result2
0d3c0     FF 12 02 F6 | 	mov	arg01, result3
0d3c4     0C 4E 05 F1 | 	add	fp, #12
0d3c8     A7 16 62 FC | 	wrlong	arg03, fp
0d3cc     04 4E 05 F1 | 	add	fp, #4
0d3d0     A7 14 62 FC | 	wrlong	arg02, fp
0d3d4     04 4E 05 F1 | 	add	fp, #4
0d3d8     A7 12 62 FC | 	wrlong	arg01, fp
0d3dc     14 4E 85 F1 | 	sub	fp, #20
0d3e0     3C AC BF FD | 	call	#_pop
0d3e4     FF 16 02 F6 | 	mov	arg03, result3
0d3e8     A7 FA 61 FC | 	wrlong	result1, fp
0d3ec     04 4E 05 F1 | 	add	fp, #4
0d3f0     A7 FC 61 FC | 	wrlong	result2, fp
0d3f4     04 4E 05 F1 | 	add	fp, #4
0d3f8     A7 16 62 FC | 	wrlong	arg03, fp
0d3fc     08 4E 85 F1 | 	sub	fp, #8
0d400     A7 12 02 F6 | 	mov	arg01, fp
0d404     E4 F7 BF FD | 	call	#_converttoint
0d408     1C 4E 05 F1 | 	add	fp, #28
0d40c     A7 FA 61 FC | 	wrlong	result1, fp
0d410     10 4E 85 F1 | 	sub	fp, #16
0d414     A7 12 02 F6 | 	mov	arg01, fp
0d418     0C 4E 85 F1 | 	sub	fp, #12
0d41c     CC F7 BF FD | 	call	#_converttoint
0d420     FD 16 02 F6 | 	mov	arg03, result1
0d424     20 4E 05 F1 | 	add	fp, #32
0d428     A7 16 62 FC | 	wrlong	arg03, fp
0d42c     F2 12 02 FB | 	rdlong	arg01, objptr
0d430     04 4E 85 F1 | 	sub	fp, #4
0d434     A7 FE 01 FB | 	rdlong	result3, fp
0d438     FF 12 02 F1 | 	add	arg01, result3
0d43c     1C 4E 85 F1 | 	sub	fp, #28
0d440     0A 16 66 F0 | 	shl	arg03, #10
0d444     0B 13 02 F1 | 	add	arg01, arg03
0d448     A4 32 B0 FD | 	call	#_pspeek
0d44c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d450     A7 FA 61 FC | 	wrlong	result1, fp
0d454     08 4E 05 F1 | 	add	fp, #8
0d458     A7 3A 68 FC | 	wrlong	#29, fp
0d45c     08 4E 85 F1 | 	sub	fp, #8
0d460     A7 12 02 F6 | 	mov	arg01, fp
0d464     50 AC BF FD | 	call	#_push
0d468                 | LR__1151
0d468     A7 F0 03 F6 | 	mov	ptra, fp
0d46c     B2 00 A0 FD | 	call	#popregs_
0d470                 | _do_getpixel_ret
0d470     2D 00 64 FD | 	ret
0d474                 | 
0d474                 | ' 
0d474                 | ' 
0d474                 | ' 
0d474                 | ' sub do_defsprite
0d474                 | _do_defsprite
0d474     07 4A 05 F6 | 	mov	COUNT_, #7
0d478     A8 00 A0 FD | 	call	#pushregs_
0d47c     5C F0 07 F1 | 	add	ptra, #92
0d480     9C AB BF FD | 	call	#_pop
0d484     FD 16 02 F6 | 	mov	arg03, result1
0d488     FE 14 02 F6 | 	mov	arg02, result2
0d48c     FF 12 02 F6 | 	mov	arg01, result3
0d490     30 4E 05 F1 | 	add	fp, #48
0d494     A7 16 62 FC | 	wrlong	arg03, fp
0d498     04 4E 05 F1 | 	add	fp, #4
0d49c     A7 14 62 FC | 	wrlong	arg02, fp
0d4a0     04 4E 05 F1 | 	add	fp, #4
0d4a4     A7 12 62 FC | 	wrlong	arg01, fp
0d4a8     38 4E 85 F1 | 	sub	fp, #56
0d4ac     70 AB BF FD | 	call	#_pop
0d4b0     FD 16 02 F6 | 	mov	arg03, result1
0d4b4     FE 14 02 F6 | 	mov	arg02, result2
0d4b8     FF 12 02 F6 | 	mov	arg01, result3
0d4bc     24 4E 05 F1 | 	add	fp, #36
0d4c0     A7 16 62 FC | 	wrlong	arg03, fp
0d4c4     04 4E 05 F1 | 	add	fp, #4
0d4c8     A7 14 62 FC | 	wrlong	arg02, fp
0d4cc     04 4E 05 F1 | 	add	fp, #4
0d4d0     A7 12 62 FC | 	wrlong	arg01, fp
0d4d4     2C 4E 85 F1 | 	sub	fp, #44
0d4d8     44 AB BF FD | 	call	#_pop
0d4dc     FD 16 02 F6 | 	mov	arg03, result1
0d4e0     FE 14 02 F6 | 	mov	arg02, result2
0d4e4     FF 12 02 F6 | 	mov	arg01, result3
0d4e8     18 4E 05 F1 | 	add	fp, #24
0d4ec     A7 16 62 FC | 	wrlong	arg03, fp
0d4f0     04 4E 05 F1 | 	add	fp, #4
0d4f4     A7 14 62 FC | 	wrlong	arg02, fp
0d4f8     04 4E 05 F1 | 	add	fp, #4
0d4fc     A7 12 62 FC | 	wrlong	arg01, fp
0d500     20 4E 85 F1 | 	sub	fp, #32
0d504     18 AB BF FD | 	call	#_pop
0d508     FD 16 02 F6 | 	mov	arg03, result1
0d50c     FE 14 02 F6 | 	mov	arg02, result2
0d510     FF 12 02 F6 | 	mov	arg01, result3
0d514     0C 4E 05 F1 | 	add	fp, #12
0d518     A7 16 62 FC | 	wrlong	arg03, fp
0d51c     04 4E 05 F1 | 	add	fp, #4
0d520     A7 14 62 FC | 	wrlong	arg02, fp
0d524     04 4E 05 F1 | 	add	fp, #4
0d528     A7 12 62 FC | 	wrlong	arg01, fp
0d52c     14 4E 85 F1 | 	sub	fp, #20
0d530     EC AA BF FD | 	call	#_pop
0d534     FF 16 02 F6 | 	mov	arg03, result3
0d538     A7 FA 61 FC | 	wrlong	result1, fp
0d53c     04 4E 05 F1 | 	add	fp, #4
0d540     A7 FC 61 FC | 	wrlong	result2, fp
0d544     04 4E 05 F1 | 	add	fp, #4
0d548     A7 16 62 FC | 	wrlong	arg03, fp
0d54c     08 4E 85 F1 | 	sub	fp, #8
0d550     A7 12 02 F6 | 	mov	arg01, fp
0d554     94 F6 BF FD | 	call	#_converttoint
0d558     3C 4E 05 F1 | 	add	fp, #60
0d55c     A7 FA 61 FC | 	wrlong	result1, fp
0d560     30 4E 85 F1 | 	sub	fp, #48
0d564     A7 12 02 F6 | 	mov	arg01, fp
0d568     0C 4E 85 F1 | 	sub	fp, #12
0d56c     7C F6 BF FD | 	call	#_converttoint
0d570     40 4E 05 F1 | 	add	fp, #64
0d574     A7 FA 61 FC | 	wrlong	result1, fp
0d578     28 4E 85 F1 | 	sub	fp, #40
0d57c     A7 12 02 F6 | 	mov	arg01, fp
0d580     18 4E 85 F1 | 	sub	fp, #24
0d584     64 F6 BF FD | 	call	#_converttoint
0d588     44 4E 05 F1 | 	add	fp, #68
0d58c     A7 FA 61 FC | 	wrlong	result1, fp
0d590     20 4E 85 F1 | 	sub	fp, #32
0d594     A7 12 02 F6 | 	mov	arg01, fp
0d598     24 4E 85 F1 | 	sub	fp, #36
0d59c     4C F6 BF FD | 	call	#_converttoint
0d5a0     48 4E 05 F1 | 	add	fp, #72
0d5a4     A7 FA 61 FC | 	wrlong	result1, fp
0d5a8     18 4E 85 F1 | 	sub	fp, #24
0d5ac     A7 12 02 F6 | 	mov	arg01, fp
0d5b0     30 4E 85 F1 | 	sub	fp, #48
0d5b4     34 F6 BF FD | 	call	#_converttoint
0d5b8     4C 4E 05 F1 | 	add	fp, #76
0d5bc     A7 FA 61 FC | 	wrlong	result1, fp
0d5c0                 | ' 
0d5c0                 | ' t5=pop()
0d5c0                 | ' t4=pop()
0d5c0                 | ' t3=pop()
0d5c0                 | ' t2=pop()
0d5c0                 | ' t1=pop()
0d5c0                 | ' 
0d5c0                 | ' ' do convert, defsprite is not a racing command
0d5c0                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0d5c0                 | '  
0d5c0                 | ' ' todo: check parameters for linits
0d5c0                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0d5c0     10 4E 85 F1 | 	sub	fp, #16
0d5c4     A7 16 02 FB | 	rdlong	arg03, fp
0d5c8     3C 4E 85 F1 | 	sub	fp, #60
0d5cc     02 16 66 F0 | 	shl	arg03, #2
0d5d0     51 00 00 FF 
0d5d4     F8 E5 05 F1 | 	add	objptr, ##41976
0d5d8     F2 16 02 F1 | 	add	arg03, objptr
0d5dc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d5e0     51 00 00 FF 
0d5e4     F8 E5 85 F1 | 	sub	objptr, ##41976
0d5e8     2C 00 90 AD |  if_e	jmp	#LR__1160
0d5ec     3C 4E 05 F1 | 	add	fp, #60
0d5f0     A7 16 02 FB | 	rdlong	arg03, fp
0d5f4     3C 4E 85 F1 | 	sub	fp, #60
0d5f8     02 16 66 F0 | 	shl	arg03, #2
0d5fc     51 00 00 FF 
0d600     F8 E5 05 F1 | 	add	objptr, ##41976
0d604     F2 16 02 F1 | 	add	arg03, objptr
0d608     0B 13 02 FB | 	rdlong	arg01, arg03
0d60c     51 00 00 FF 
0d610     F8 E5 85 F1 | 	sub	objptr, ##41976
0d614     44 9F B0 FD | 	call	#__system___gc_free
0d618                 | LR__1160
0d618     3C 4E 05 F1 | 	add	fp, #60
0d61c     A7 1E 02 FB | 	rdlong	local01, fp
0d620     0C 4E 05 F1 | 	add	fp, #12
0d624     A7 16 02 FB | 	rdlong	arg03, fp
0d628     04 4E 05 F1 | 	add	fp, #4
0d62c     A7 14 02 FB | 	rdlong	arg02, fp
0d630     0A 17 02 FD | 	qmul	arg03, arg02
0d634     02 1E 66 F0 | 	shl	local01, #2
0d638     51 00 00 FF 
0d63c     F8 E5 05 F1 | 	add	objptr, ##41976
0d640     F2 1E 02 F1 | 	add	local01, objptr
0d644     4C 4E 85 F1 | 	sub	fp, #76
0d648     51 00 00 FF 
0d64c     F8 E5 85 F1 | 	sub	objptr, ##41976
0d650     18 12 62 FD | 	getqx	arg01
0d654     C8 9D B0 FD | 	call	#__system___gc_alloc_managed
0d658     0F FB 61 FC | 	wrlong	result1, local01
0d65c                 | ' for y=a3 to a3+a5-1
0d65c     44 4E 05 F1 | 	add	fp, #68
0d660     A7 20 02 FB | 	rdlong	local02, fp
0d664     0C 4E 05 F1 | 	add	fp, #12
0d668     A7 20 62 FC | 	wrlong	local02, fp
0d66c     0C 4E 85 F1 | 	sub	fp, #12
0d670     A7 22 02 FB | 	rdlong	local03, fp
0d674     08 4E 05 F1 | 	add	fp, #8
0d678     A7 24 02 FB | 	rdlong	local04, fp
0d67c     4C 4E 85 F1 | 	sub	fp, #76
0d680     12 23 02 F1 | 	add	local03, local04
0d684                 | LR__1161
0d684     50 4E 05 F1 | 	add	fp, #80
0d688     A7 20 02 FB | 	rdlong	local02, fp
0d68c     50 4E 85 F1 | 	sub	fp, #80
0d690     11 21 52 F2 | 	cmps	local02, local03 wc
0d694     10 01 90 3D |  if_ae	jmp	#LR__1164
0d698                 | '   for x=a2 to a4+a2-1
0d698     40 4E 05 F1 | 	add	fp, #64
0d69c     A7 1E 02 FB | 	rdlong	local01, fp
0d6a0     52 00 00 FF 
0d6a4     54 E4 05 F1 | 	add	objptr, ##42068
0d6a8     F2 1E 62 FC | 	wrlong	local01, objptr
0d6ac     52 00 00 FF 
0d6b0     54 E4 85 F1 | 	sub	objptr, ##42068
0d6b4     08 4E 05 F1 | 	add	fp, #8
0d6b8     A7 26 02 FB | 	rdlong	local05, fp
0d6bc     08 4E 85 F1 | 	sub	fp, #8
0d6c0     A7 28 02 FB | 	rdlong	local06, fp
0d6c4     40 4E 85 F1 | 	sub	fp, #64
0d6c8     14 27 02 F1 | 	add	local05, local06
0d6cc                 | LR__1162
0d6cc     52 00 00 FF 
0d6d0     54 E4 05 F1 | 	add	objptr, ##42068
0d6d4     F2 1E 02 FB | 	rdlong	local01, objptr
0d6d8     52 00 00 FF 
0d6dc     54 E4 85 F1 | 	sub	objptr, ##42068
0d6e0     13 1F 52 F2 | 	cmps	local01, local05 wc
0d6e4     A8 00 90 3D |  if_ae	jmp	#LR__1163
0d6e8     3C 4E 05 F1 | 	add	fp, #60
0d6ec     A7 28 02 FB | 	rdlong	local06, fp
0d6f0     04 4E 05 F1 | 	add	fp, #4
0d6f4     A7 24 02 FB | 	rdlong	local04, fp
0d6f8     10 4E 05 F1 | 	add	fp, #16
0d6fc     A7 20 02 FB | 	rdlong	local02, fp
0d700     10 1F 02 F6 | 	mov	local01, local02
0d704     0C 4E 85 F1 | 	sub	fp, #12
0d708     A7 16 02 FB | 	rdlong	arg03, fp
0d70c     0B 1F 82 F1 | 	sub	local01, arg03
0d710     04 4E 05 F1 | 	add	fp, #4
0d714     A7 16 02 FB | 	rdlong	arg03, fp
0d718     0B 1F 02 FD | 	qmul	local01, arg03
0d71c     02 28 66 F0 | 	shl	local06, #2
0d720     51 00 00 FF 
0d724     F8 E5 05 F1 | 	add	objptr, ##41976
0d728     F2 28 02 F1 | 	add	local06, objptr
0d72c     14 29 02 FB | 	rdlong	local06, local06
0d730     5C E4 05 F1 | 	add	objptr, #92
0d734     F2 1E 02 FB | 	rdlong	local01, objptr
0d738     52 00 00 FF 
0d73c     54 E4 85 F1 | 	sub	objptr, ##42068
0d740     0F 2B 02 F6 | 	mov	local07, local01
0d744     12 2B 82 F1 | 	sub	local07, local04
0d748     F2 12 02 FB | 	rdlong	arg01, objptr
0d74c     0F 13 02 F1 | 	add	arg01, local01
0d750     48 4E 85 F1 | 	sub	fp, #72
0d754     0A 20 66 F0 | 	shl	local02, #10
0d758     10 13 02 F1 | 	add	arg01, local02
0d75c     18 24 62 FD | 	getqx	local04
0d760     12 2B 02 F1 | 	add	local07, local04
0d764     14 2B 02 F1 | 	add	local07, local06
0d768     84 2F B0 FD | 	call	#_pspeek
0d76c     15 FB 41 FC | 	wrbyte	result1, local07
0d770     52 00 00 FF 
0d774     54 E4 05 F1 | 	add	objptr, ##42068
0d778     F2 2A 02 FB | 	rdlong	local07, objptr
0d77c     01 2A 06 F1 | 	add	local07, #1
0d780     F2 2A 62 FC | 	wrlong	local07, objptr
0d784     52 00 00 FF 
0d788     54 E4 85 F1 | 	sub	objptr, ##42068
0d78c     3C FF 9F FD | 	jmp	#LR__1162
0d790                 | LR__1163
0d790     50 4E 05 F1 | 	add	fp, #80
0d794     A7 2A 02 FB | 	rdlong	local07, fp
0d798     01 2A 06 F1 | 	add	local07, #1
0d79c     A7 2A 62 FC | 	wrlong	local07, fp
0d7a0     50 4E 85 F1 | 	sub	fp, #80
0d7a4     DC FE 9F FD | 	jmp	#LR__1161
0d7a8                 | LR__1164
0d7a8     3C 4E 05 F1 | 	add	fp, #60
0d7ac     A7 2A 02 FB | 	rdlong	local07, fp
0d7b0     15 13 02 F6 | 	mov	arg01, local07
0d7b4     3C 4E 85 F1 | 	sub	fp, #60
0d7b8     02 2A 66 F0 | 	shl	local07, #2
0d7bc     51 00 00 FF 
0d7c0     F8 E5 05 F1 | 	add	objptr, ##41976
0d7c4     F2 2A 02 F1 | 	add	local07, objptr
0d7c8     15 15 02 FB | 	rdlong	arg02, local07
0d7cc     51 00 00 FF 
0d7d0     F8 E5 85 F1 | 	sub	objptr, ##41976
0d7d4     90 42 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0d7d8     3C 4E 05 F1 | 	add	fp, #60
0d7dc     A7 12 02 FB | 	rdlong	arg01, fp
0d7e0     0C 4E 05 F1 | 	add	fp, #12
0d7e4     A7 14 02 FB | 	rdlong	arg02, fp
0d7e8     04 4E 05 F1 | 	add	fp, #4
0d7ec     A7 16 02 FB | 	rdlong	arg03, fp
0d7f0     4C 4E 85 F1 | 	sub	fp, #76
0d7f4     E4 42 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d7f8     A7 F0 03 F6 | 	mov	ptra, fp
0d7fc     B2 00 A0 FD | 	call	#popregs_
0d800                 | _do_defsprite_ret
0d800     2D 00 64 FD | 	ret
0d804                 | 
0d804                 | ' 
0d804                 | ' sub do_sprite
0d804                 | _do_sprite
0d804     00 4A 05 F6 | 	mov	COUNT_, #0
0d808     A8 00 A0 FD | 	call	#pushregs_
0d80c     30 F0 07 F1 | 	add	ptra, #48
0d810     0C A8 BF FD | 	call	#_pop
0d814     FD 16 02 F6 | 	mov	arg03, result1
0d818     FE 14 02 F6 | 	mov	arg02, result2
0d81c     FF 12 02 F6 | 	mov	arg01, result3
0d820     18 4E 05 F1 | 	add	fp, #24
0d824     A7 16 62 FC | 	wrlong	arg03, fp
0d828     04 4E 05 F1 | 	add	fp, #4
0d82c     A7 14 62 FC | 	wrlong	arg02, fp
0d830     04 4E 05 F1 | 	add	fp, #4
0d834     A7 12 62 FC | 	wrlong	arg01, fp
0d838     20 4E 85 F1 | 	sub	fp, #32
0d83c     E0 A7 BF FD | 	call	#_pop
0d840     FD 16 02 F6 | 	mov	arg03, result1
0d844     FE 14 02 F6 | 	mov	arg02, result2
0d848     FF 12 02 F6 | 	mov	arg01, result3
0d84c     0C 4E 05 F1 | 	add	fp, #12
0d850     A7 16 62 FC | 	wrlong	arg03, fp
0d854     04 4E 05 F1 | 	add	fp, #4
0d858     A7 14 62 FC | 	wrlong	arg02, fp
0d85c     04 4E 05 F1 | 	add	fp, #4
0d860     A7 12 62 FC | 	wrlong	arg01, fp
0d864     14 4E 85 F1 | 	sub	fp, #20
0d868     B4 A7 BF FD | 	call	#_pop
0d86c     FF 16 02 F6 | 	mov	arg03, result3
0d870     A7 FA 61 FC | 	wrlong	result1, fp
0d874     04 4E 05 F1 | 	add	fp, #4
0d878     A7 FC 61 FC | 	wrlong	result2, fp
0d87c     04 4E 05 F1 | 	add	fp, #4
0d880     A7 16 62 FC | 	wrlong	arg03, fp
0d884     08 4E 85 F1 | 	sub	fp, #8
0d888     A7 12 02 F6 | 	mov	arg01, fp
0d88c     5C F3 BF FD | 	call	#_converttoint
0d890     24 4E 05 F1 | 	add	fp, #36
0d894     A7 FA 61 FC | 	wrlong	result1, fp
0d898     18 4E 85 F1 | 	sub	fp, #24
0d89c     A7 12 02 F6 | 	mov	arg01, fp
0d8a0     0C 4E 85 F1 | 	sub	fp, #12
0d8a4     44 F3 BF FD | 	call	#_converttoint
0d8a8     28 4E 05 F1 | 	add	fp, #40
0d8ac     A7 FA 61 FC | 	wrlong	result1, fp
0d8b0     10 4E 85 F1 | 	sub	fp, #16
0d8b4     A7 12 02 F6 | 	mov	arg01, fp
0d8b8     18 4E 85 F1 | 	sub	fp, #24
0d8bc     2C F3 BF FD | 	call	#_converttoint
0d8c0     2C 4E 05 F1 | 	add	fp, #44
0d8c4     A7 FA 61 FC | 	wrlong	result1, fp
0d8c8     08 4E 85 F1 | 	sub	fp, #8
0d8cc     A7 12 02 FB | 	rdlong	arg01, fp
0d8d0     04 4E 05 F1 | 	add	fp, #4
0d8d4     A7 14 02 FB | 	rdlong	arg02, fp
0d8d8     FD 16 02 F6 | 	mov	arg03, result1
0d8dc     28 4E 85 F1 | 	sub	fp, #40
0d8e0     AC 41 B0 FD | 	call	#_hg010b_spin2_setspritepos
0d8e4     A7 F0 03 F6 | 	mov	ptra, fp
0d8e8     B2 00 A0 FD | 	call	#popregs_
0d8ec                 | _do_sprite_ret
0d8ec     2D 00 64 FD | 	ret
0d8f0                 | 
0d8f0                 | ' 
0d8f0                 | ' sub do_mousex
0d8f0                 | _do_mousex
0d8f0     00 4A 05 F6 | 	mov	COUNT_, #0
0d8f4     A8 00 A0 FD | 	call	#pushregs_
0d8f8     0C F0 07 F1 | 	add	ptra, #12
0d8fc     08 4E 05 F1 | 	add	fp, #8
0d900     A7 3A 68 FC | 	wrlong	#29, fp
0d904     08 4E 85 F1 | 	sub	fp, #8
0d908     51 00 00 FF 
0d90c     B0 E5 05 F1 | 	add	objptr, ##41904
0d910     F2 12 02 FB | 	rdlong	arg01, objptr
0d914     51 00 00 FF 
0d918     B0 E5 85 F1 | 	sub	objptr, ##41904
0d91c     A7 12 62 FC | 	wrlong	arg01, fp
0d920     A7 12 02 F6 | 	mov	arg01, fp
0d924     90 A7 BF FD | 	call	#_push
0d928     A7 F0 03 F6 | 	mov	ptra, fp
0d92c     B2 00 A0 FD | 	call	#popregs_
0d930                 | _do_mousex_ret
0d930     2D 00 64 FD | 	ret
0d934                 | 
0d934                 | ' 
0d934                 | ' sub do_mousey
0d934                 | _do_mousey
0d934     00 4A 05 F6 | 	mov	COUNT_, #0
0d938     A8 00 A0 FD | 	call	#pushregs_
0d93c     0C F0 07 F1 | 	add	ptra, #12
0d940     08 4E 05 F1 | 	add	fp, #8
0d944     A7 3A 68 FC | 	wrlong	#29, fp
0d948     08 4E 85 F1 | 	sub	fp, #8
0d94c     51 00 00 FF 
0d950     B4 E5 05 F1 | 	add	objptr, ##41908
0d954     F2 12 02 FB | 	rdlong	arg01, objptr
0d958     51 00 00 FF 
0d95c     B4 E5 85 F1 | 	sub	objptr, ##41908
0d960     A7 12 62 FC | 	wrlong	arg01, fp
0d964     A7 12 02 F6 | 	mov	arg01, fp
0d968     4C A7 BF FD | 	call	#_push
0d96c     A7 F0 03 F6 | 	mov	ptra, fp
0d970     B2 00 A0 FD | 	call	#popregs_
0d974                 | _do_mousey_ret
0d974     2D 00 64 FD | 	ret
0d978                 | 
0d978                 | ' 
0d978                 | ' sub do_mousew
0d978                 | _do_mousew
0d978     00 4A 05 F6 | 	mov	COUNT_, #0
0d97c     A8 00 A0 FD | 	call	#pushregs_
0d980     0C F0 07 F1 | 	add	ptra, #12
0d984     08 4E 05 F1 | 	add	fp, #8
0d988     A7 38 68 FC | 	wrlong	#28, fp
0d98c     08 4E 85 F1 | 	sub	fp, #8
0d990     51 00 00 FF 
0d994     BC E5 05 F1 | 	add	objptr, ##41916
0d998     F2 12 02 FB | 	rdlong	arg01, objptr
0d99c     51 00 00 FF 
0d9a0     BC E5 85 F1 | 	sub	objptr, ##41916
0d9a4     A7 12 62 FC | 	wrlong	arg01, fp
0d9a8     A7 12 02 F6 | 	mov	arg01, fp
0d9ac     08 A7 BF FD | 	call	#_push
0d9b0     A7 F0 03 F6 | 	mov	ptra, fp
0d9b4     B2 00 A0 FD | 	call	#popregs_
0d9b8                 | _do_mousew_ret
0d9b8     2D 00 64 FD | 	ret
0d9bc                 | 
0d9bc                 | ' 
0d9bc                 | ' sub do_mousek
0d9bc                 | _do_mousek
0d9bc     00 4A 05 F6 | 	mov	COUNT_, #0
0d9c0     A8 00 A0 FD | 	call	#pushregs_
0d9c4     0C F0 07 F1 | 	add	ptra, #12
0d9c8     08 4E 05 F1 | 	add	fp, #8
0d9cc     A7 3A 68 FC | 	wrlong	#29, fp
0d9d0     08 4E 85 F1 | 	sub	fp, #8
0d9d4     51 00 00 FF 
0d9d8     B8 E5 05 F1 | 	add	objptr, ##41912
0d9dc     F2 12 02 FB | 	rdlong	arg01, objptr
0d9e0     51 00 00 FF 
0d9e4     B8 E5 85 F1 | 	sub	objptr, ##41912
0d9e8     A7 12 62 FC | 	wrlong	arg01, fp
0d9ec     A7 12 02 F6 | 	mov	arg01, fp
0d9f0     C4 A6 BF FD | 	call	#_push
0d9f4     A7 F0 03 F6 | 	mov	ptra, fp
0d9f8     B2 00 A0 FD | 	call	#popregs_
0d9fc                 | _do_mousek_ret
0d9fc     2D 00 64 FD | 	ret
0da00                 | 
0da00                 | ' sub do_gettime
0da00                 | _do_gettime
0da00     02 4A 05 F6 | 	mov	COUNT_, #2
0da04     A8 00 A0 FD | 	call	#pushregs_
0da08     14 F0 07 F1 | 	add	ptra, #20
0da0c                 | ' 
0da0c                 | ' const asm 
0da0c     1A 1E 72 FD | 	getct	local01 wc
0da10     1A 20 62 FD | 	getct	local02
0da14                 | ' 
0da14                 | ' return hi1, lo1
0da14     10 FD 01 F6 | 	mov	result2, local02
0da18     A7 1E 62 FC | 	wrlong	local01, fp
0da1c     04 4E 05 F1 | 	add	fp, #4
0da20     A7 FC 61 FC | 	wrlong	result2, fp
0da24     0C 4E 05 F1 | 	add	fp, #12
0da28     A7 3A 68 FC | 	wrlong	#29, fp
0da2c     0C 4E 85 F1 | 	sub	fp, #12
0da30     A7 12 02 FB | 	rdlong	arg01, fp
0da34     04 4E 05 F1 | 	add	fp, #4
0da38     A7 12 62 FC | 	wrlong	arg01, fp
0da3c     08 4E 85 F1 | 	sub	fp, #8
0da40     A7 12 02 FB | 	rdlong	arg01, fp
0da44     0C 4E 05 F1 | 	add	fp, #12
0da48     A7 12 62 FC | 	wrlong	arg01, fp
0da4c     04 4E 85 F1 | 	sub	fp, #4
0da50     A7 12 02 F6 | 	mov	arg01, fp
0da54     08 4E 85 F1 | 	sub	fp, #8
0da58     5C A6 BF FD | 	call	#_push
0da5c     A7 F0 03 F6 | 	mov	ptra, fp
0da60     B2 00 A0 FD | 	call	#popregs_
0da64                 | _do_gettime_ret
0da64     2D 00 64 FD | 	ret
0da68                 | 
0da68                 | '    
0da68                 | ' 
0da68                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0da68                 | ' 
0da68                 | ' '' ----------------------------- Clear the screen
0da68                 | ' 
0da68                 | ' sub do_cls
0da68                 | _do_cls
0da68     2E 00 00 FF 
0da6c     00 E4 05 F1 | 	add	objptr, ##23552
0da70     F2 12 02 FB | 	rdlong	arg01, objptr
0da74     04 E4 85 F1 | 	sub	objptr, #4
0da78     F2 14 02 FB | 	rdlong	arg02, objptr
0da7c     2D 00 00 FF 
0da80     FC E5 85 F1 | 	sub	objptr, ##23548
0da84     18 4D B0 FD | 	call	#_hg010b_spin2_cls
0da88     2E 00 00 FF 
0da8c     00 E4 05 F1 | 	add	objptr, ##23552
0da90     F2 14 02 FB | 	rdlong	arg02, objptr
0da94     14 E4 85 F1 | 	sub	objptr, #20
0da98     F2 14 62 FC | 	wrlong	arg02, objptr
0da9c     2D 00 00 FF 
0daa0     EC E5 85 F1 | 	sub	objptr, ##23532
0daa4                 | ' cls(ink,paper): plot_color=ink: print
0daa4     00 12 06 F6 | 	mov	arg01, #0
0daa8     B8 B4 B0 FD | 	call	#__system___getiolock_0306
0daac     FD 12 02 F6 | 	mov	arg01, result1
0dab0     CC 5F B0 FD | 	call	#__system___lockmem
0dab4     00 12 06 F6 | 	mov	arg01, #0
0dab8     0A 14 06 F6 | 	mov	arg02, #10
0dabc     00 16 06 F6 | 	mov	arg03, #0
0dac0     70 6B B0 FD | 	call	#__system___basic_print_char
0dac4     00 12 06 F6 | 	mov	arg01, #0
0dac8     98 B4 B0 FD | 	call	#__system___getiolock_0306
0dacc     FD 00 68 FC | 	wrlong	#0, result1
0dad0                 | _do_cls_ret
0dad0     2D 00 64 FD | 	ret
0dad4                 | 
0dad4                 | ' 
0dad4                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0dad4                 | ' 
0dad4                 | ' sub do_color
0dad4                 | _do_color
0dad4     03 4A 05 F6 | 	mov	COUNT_, #3
0dad8     A8 00 A0 FD | 	call	#pushregs_
0dadc     40 A5 BF FD | 	call	#_pop
0dae0     FD 1E 02 F6 | 	mov	local01, result1
0dae4     FE 20 02 F6 | 	mov	local02, result2
0dae8     FF 22 02 F6 | 	mov	local03, result3
0daec     2D 00 00 FF 
0daf0     EC E5 05 F1 | 	add	objptr, ##23532
0daf4     F2 1E 62 FC | 	wrlong	local01, objptr
0daf8     2D 00 00 FF 
0dafc     EC E5 85 F1 | 	sub	objptr, ##23532
0db00     A7 F0 03 F6 | 	mov	ptra, fp
0db04     B2 00 A0 FD | 	call	#popregs_
0db08                 | _do_color_ret
0db08     2D 00 64 FD | 	ret
0db0c                 | 
0db0c                 | ' 
0db0c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0db0c                 | ' 
0db0c                 | ' sub do_plot
0db0c                 | _do_plot
0db0c     08 4A 05 F6 | 	mov	COUNT_, #8
0db10     A8 00 A0 FD | 	call	#pushregs_
0db14     08 A5 BF FD | 	call	#_pop
0db18     FD 1E 02 F6 | 	mov	local01, result1
0db1c     FE 14 02 F6 | 	mov	arg02, result2
0db20     FF 16 02 F6 | 	mov	arg03, result3
0db24     0A 21 02 F6 | 	mov	local02, arg02
0db28     0B 23 02 F6 | 	mov	local03, arg03
0db2c     F0 A4 BF FD | 	call	#_pop
0db30     FD 24 02 F6 | 	mov	local04, result1
0db34     FE 26 02 F6 | 	mov	local05, result2
0db38     FF 28 02 F6 | 	mov	local06, result3
0db3c     12 2B 02 F6 | 	mov	local07, local04
0db40     0F 2D 02 F6 | 	mov	local08, local01
0db44                 | ' t2=pop() 					 
0db44                 | ' t1=pop()
0db44                 | ' 
0db44                 | ' x=t1.result.iresult
0db44                 | ' y=t2.result.iresult	
0db44                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0db44     1C 28 0E F2 | 	cmp	local06, #28 wz
0db48     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0db4c     44 00 90 5D |  if_ne	jmp	#LR__1170
0db50     1C 22 0E F2 | 	cmp	local03, #28 wz
0db54     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0db58     38 00 90 5D |  if_ne	jmp	#LR__1170
0db5c     2D 00 00 FF 
0db60     F0 E5 05 F1 | 	add	objptr, ##23536
0db64     F2 2A 62 FC | 	wrlong	local07, objptr
0db68     04 E4 05 F1 | 	add	objptr, #4
0db6c     F2 2C 62 FC | 	wrlong	local08, objptr
0db70     04 E4 85 F1 | 	sub	objptr, #4
0db74     F2 12 02 FB | 	rdlong	arg01, objptr
0db78     04 E4 85 F1 | 	sub	objptr, #4
0db7c     F2 16 02 FB | 	rdlong	arg03, objptr
0db80     2D 00 00 FF 
0db84     EC E5 85 F1 | 	sub	objptr, ##23532
0db88     16 15 02 F6 | 	mov	arg02, local08
0db8c     98 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0db90     A4 00 90 FD | 	jmp	#LR__1175
0db94                 | LR__1170
0db94                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0db94     1E 28 0E F2 | 	cmp	local06, #30 wz
0db98     10 00 90 5D |  if_ne	jmp	#LR__1171
0db9c     12 13 02 F6 | 	mov	arg01, local04
0dba0     01 14 06 F6 | 	mov	arg02, #1
0dba4     EC 8C B0 FD | 	call	#__system___float_tointeger
0dba8     FD 2A 02 F6 | 	mov	local07, result1
0dbac                 | LR__1171
0dbac                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0dbac     1E 22 0E F2 | 	cmp	local03, #30 wz
0dbb0     10 00 90 5D |  if_ne	jmp	#LR__1172
0dbb4     0F 13 02 F6 | 	mov	arg01, local01
0dbb8     01 14 06 F6 | 	mov	arg02, #1
0dbbc     D4 8C B0 FD | 	call	#__system___float_tointeger
0dbc0     FD 2C 02 F6 | 	mov	local08, result1
0dbc4                 | LR__1172
0dbc4                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0dbc4     1F 28 0E F2 | 	cmp	local06, #31 wz
0dbc8     18 00 90 5D |  if_ne	jmp	#LR__1173
0dbcc     12 13 02 F6 | 	mov	arg01, local04
0dbd0     E0 8F B0 FD | 	call	#__system____builtin_atof
0dbd4     FD 12 02 F6 | 	mov	arg01, result1
0dbd8     00 14 06 F6 | 	mov	arg02, #0
0dbdc     B4 8C B0 FD | 	call	#__system___float_tointeger
0dbe0     FD 2A 02 F6 | 	mov	local07, result1
0dbe4                 | LR__1173
0dbe4                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0dbe4     1F 22 0E F2 | 	cmp	local03, #31 wz
0dbe8     18 00 90 5D |  if_ne	jmp	#LR__1174
0dbec     0F 13 02 F6 | 	mov	arg01, local01
0dbf0     C0 8F B0 FD | 	call	#__system____builtin_atof
0dbf4     FD 12 02 F6 | 	mov	arg01, result1
0dbf8     00 14 06 F6 | 	mov	arg02, #0
0dbfc     94 8C B0 FD | 	call	#__system___float_tointeger
0dc00     FD 2C 02 F6 | 	mov	local08, result1
0dc04                 | LR__1174
0dc04     2D 00 00 FF 
0dc08     F0 E5 05 F1 | 	add	objptr, ##23536
0dc0c     F2 2A 62 FC | 	wrlong	local07, objptr
0dc10     04 E4 05 F1 | 	add	objptr, #4
0dc14     F2 2C 62 FC | 	wrlong	local08, objptr
0dc18     04 E4 85 F1 | 	sub	objptr, #4
0dc1c     F2 12 02 FB | 	rdlong	arg01, objptr
0dc20     04 E4 85 F1 | 	sub	objptr, #4
0dc24     F2 16 02 FB | 	rdlong	arg03, objptr
0dc28     2D 00 00 FF 
0dc2c     EC E5 85 F1 | 	sub	objptr, ##23532
0dc30     16 15 02 F6 | 	mov	arg02, local08
0dc34     F0 3E B0 FD | 	call	#_hg010b_spin2_putpixel
0dc38                 | LR__1175
0dc38     A7 F0 03 F6 | 	mov	ptra, fp
0dc3c     B2 00 A0 FD | 	call	#popregs_
0dc40                 | _do_plot_ret
0dc40     2D 00 64 FD | 	ret
0dc44                 | 
0dc44                 | ' 
0dc44                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0dc44                 | ' 
0dc44                 | ' sub do_draw
0dc44                 | _do_draw
0dc44     08 4A 05 F6 | 	mov	COUNT_, #8
0dc48     A8 00 A0 FD | 	call	#pushregs_
0dc4c     D0 A3 BF FD | 	call	#_pop
0dc50     FD 1E 02 F6 | 	mov	local01, result1
0dc54     FE 18 02 F6 | 	mov	arg04, result2
0dc58     FF 16 02 F6 | 	mov	arg03, result3
0dc5c     0C 21 02 F6 | 	mov	local02, arg04
0dc60     0B 23 02 F6 | 	mov	local03, arg03
0dc64     B8 A3 BF FD | 	call	#_pop
0dc68     FD 24 02 F6 | 	mov	local04, result1
0dc6c     FE 26 02 F6 | 	mov	local05, result2
0dc70     FF 28 02 F6 | 	mov	local06, result3
0dc74     12 2B 02 F6 | 	mov	local07, local04
0dc78     0F 2D 02 F6 | 	mov	local08, local01
0dc7c                 | ' 
0dc7c                 | ' t2=pop()
0dc7c                 | ' t1=pop()
0dc7c                 | ' x=t1.result.iresult
0dc7c                 | ' y=t2.result.iresult
0dc7c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0dc7c     1C 28 0E F2 | 	cmp	local06, #28 wz
0dc80     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0dc84     5C 00 90 5D |  if_ne	jmp	#LR__1180
0dc88     1C 22 0E F2 | 	cmp	local03, #28 wz
0dc8c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0dc90     50 00 90 5D |  if_ne	jmp	#LR__1180
0dc94     2D 00 00 FF 
0dc98     F0 E5 05 F1 | 	add	objptr, ##23536
0dc9c     F2 12 02 FB | 	rdlong	arg01, objptr
0dca0     04 E4 05 F1 | 	add	objptr, #4
0dca4     F2 14 02 FB | 	rdlong	arg02, objptr
0dca8     08 E4 85 F1 | 	sub	objptr, #8
0dcac     F2 1A 02 FB | 	rdlong	arg05, objptr
0dcb0     2D 00 00 FF 
0dcb4     EC E5 85 F1 | 	sub	objptr, ##23532
0dcb8     15 17 02 F6 | 	mov	arg03, local07
0dcbc     16 19 02 F6 | 	mov	arg04, local08
0dcc0     14 41 B0 FD | 	call	#_hg010b_spin2_draw
0dcc4     2D 00 00 FF 
0dcc8     F0 E5 05 F1 | 	add	objptr, ##23536
0dccc     F2 2A 62 FC | 	wrlong	local07, objptr
0dcd0     04 E4 05 F1 | 	add	objptr, #4
0dcd4     F2 2C 62 FC | 	wrlong	local08, objptr
0dcd8     2D 00 00 FF 
0dcdc     F4 E5 85 F1 | 	sub	objptr, ##23540
0dce0     BC 00 90 FD | 	jmp	#LR__1185
0dce4                 | LR__1180
0dce4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0dce4     1E 28 0E F2 | 	cmp	local06, #30 wz
0dce8     10 00 90 5D |  if_ne	jmp	#LR__1181
0dcec     12 13 02 F6 | 	mov	arg01, local04
0dcf0     01 14 06 F6 | 	mov	arg02, #1
0dcf4     9C 8B B0 FD | 	call	#__system___float_tointeger
0dcf8     FD 2A 02 F6 | 	mov	local07, result1
0dcfc                 | LR__1181
0dcfc                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0dcfc     1E 22 0E F2 | 	cmp	local03, #30 wz
0dd00     10 00 90 5D |  if_ne	jmp	#LR__1182
0dd04     0F 13 02 F6 | 	mov	arg01, local01
0dd08     01 14 06 F6 | 	mov	arg02, #1
0dd0c     84 8B B0 FD | 	call	#__system___float_tointeger
0dd10     FD 2C 02 F6 | 	mov	local08, result1
0dd14                 | LR__1182
0dd14                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0dd14     1F 28 0E F2 | 	cmp	local06, #31 wz
0dd18     18 00 90 5D |  if_ne	jmp	#LR__1183
0dd1c     12 13 02 F6 | 	mov	arg01, local04
0dd20     90 8E B0 FD | 	call	#__system____builtin_atof
0dd24     FD 12 02 F6 | 	mov	arg01, result1
0dd28     00 14 06 F6 | 	mov	arg02, #0
0dd2c     64 8B B0 FD | 	call	#__system___float_tointeger
0dd30     FD 2A 02 F6 | 	mov	local07, result1
0dd34                 | LR__1183
0dd34                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0dd34     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd38     18 00 90 5D |  if_ne	jmp	#LR__1184
0dd3c     0F 13 02 F6 | 	mov	arg01, local01
0dd40     70 8E B0 FD | 	call	#__system____builtin_atof
0dd44     FD 12 02 F6 | 	mov	arg01, result1
0dd48     00 14 06 F6 | 	mov	arg02, #0
0dd4c     44 8B B0 FD | 	call	#__system___float_tointeger
0dd50     FD 2C 02 F6 | 	mov	local08, result1
0dd54                 | LR__1184
0dd54     2D 00 00 FF 
0dd58     F0 E5 05 F1 | 	add	objptr, ##23536
0dd5c     F2 12 02 FB | 	rdlong	arg01, objptr
0dd60     04 E4 05 F1 | 	add	objptr, #4
0dd64     F2 14 02 FB | 	rdlong	arg02, objptr
0dd68     08 E4 85 F1 | 	sub	objptr, #8
0dd6c     F2 1A 02 FB | 	rdlong	arg05, objptr
0dd70     2D 00 00 FF 
0dd74     EC E5 85 F1 | 	sub	objptr, ##23532
0dd78     15 17 02 F6 | 	mov	arg03, local07
0dd7c     16 19 02 F6 | 	mov	arg04, local08
0dd80     54 40 B0 FD | 	call	#_hg010b_spin2_draw
0dd84     2D 00 00 FF 
0dd88     F0 E5 05 F1 | 	add	objptr, ##23536
0dd8c     F2 2A 62 FC | 	wrlong	local07, objptr
0dd90     04 E4 05 F1 | 	add	objptr, #4
0dd94     F2 2C 62 FC | 	wrlong	local08, objptr
0dd98     2D 00 00 FF 
0dd9c     F4 E5 85 F1 | 	sub	objptr, ##23540
0dda0                 | LR__1185
0dda0     A7 F0 03 F6 | 	mov	ptra, fp
0dda4     B2 00 A0 FD | 	call	#popregs_
0dda8                 | _do_draw_ret
0dda8     2D 00 64 FD | 	ret
0ddac                 | 
0ddac                 | ' 
0ddac                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0ddac                 | ' 
0ddac                 | ' sub do_fcircle
0ddac                 | _do_fcircle
0ddac     02 4A 05 F6 | 	mov	COUNT_, #2
0ddb0     A8 00 A0 FD | 	call	#pushregs_
0ddb4     24 F0 07 F1 | 	add	ptra, #36
0ddb8     64 A2 BF FD | 	call	#_pop
0ddbc     FD 18 02 F6 | 	mov	arg04, result1
0ddc0     FE 16 02 F6 | 	mov	arg03, result2
0ddc4     FF 14 02 F6 | 	mov	arg02, result3
0ddc8     18 4E 05 F1 | 	add	fp, #24
0ddcc     A7 18 62 FC | 	wrlong	arg04, fp
0ddd0     04 4E 05 F1 | 	add	fp, #4
0ddd4     A7 16 62 FC | 	wrlong	arg03, fp
0ddd8     04 4E 05 F1 | 	add	fp, #4
0dddc     A7 14 62 FC | 	wrlong	arg02, fp
0dde0     20 4E 85 F1 | 	sub	fp, #32
0dde4     38 A2 BF FD | 	call	#_pop
0dde8     FD 18 02 F6 | 	mov	arg04, result1
0ddec     FE 16 02 F6 | 	mov	arg03, result2
0ddf0     FF 1E 02 F6 | 	mov	local01, result3
0ddf4     0C 4E 05 F1 | 	add	fp, #12
0ddf8     A7 18 62 FC | 	wrlong	arg04, fp
0ddfc     04 4E 05 F1 | 	add	fp, #4
0de00     A7 16 62 FC | 	wrlong	arg03, fp
0de04     04 4E 05 F1 | 	add	fp, #4
0de08     A7 1E 62 FC | 	wrlong	local01, fp
0de0c     14 4E 85 F1 | 	sub	fp, #20
0de10     0C A2 BF FD | 	call	#_pop
0de14     A7 FA 61 FC | 	wrlong	result1, fp
0de18     04 4E 05 F1 | 	add	fp, #4
0de1c     A7 FC 61 FC | 	wrlong	result2, fp
0de20     04 4E 05 F1 | 	add	fp, #4
0de24     A7 FE 61 FC | 	wrlong	result3, fp
0de28                 | ' 
0de28                 | ' t3=pop()
0de28                 | ' t2=pop()
0de28                 | ' t1=pop()
0de28                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0de28     FF 18 02 F6 | 	mov	arg04, result3
0de2c     08 4E 85 F1 | 	sub	fp, #8
0de30     1C 18 0E F2 | 	cmp	arg04, #28 wz
0de34     08 4E 05 51 |  if_ne	add	fp, #8
0de38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0de3c     08 4E 85 51 |  if_ne	sub	fp, #8
0de40     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0de44     7C 00 90 5D |  if_ne	jmp	#LR__1190
0de48     14 4E 05 F1 | 	add	fp, #20
0de4c     A7 1E 02 FB | 	rdlong	local01, fp
0de50     14 4E 85 F1 | 	sub	fp, #20
0de54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de58     14 4E 05 51 |  if_ne	add	fp, #20
0de5c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0de60     14 4E 85 51 |  if_ne	sub	fp, #20
0de64     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0de68     58 00 90 5D |  if_ne	jmp	#LR__1190
0de6c     20 4E 05 F1 | 	add	fp, #32
0de70     A7 1E 02 FB | 	rdlong	local01, fp
0de74     20 4E 85 F1 | 	sub	fp, #32
0de78     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de7c     20 4E 05 51 |  if_ne	add	fp, #32
0de80     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0de84     20 4E 85 51 |  if_ne	sub	fp, #32
0de88     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0de8c     34 00 90 5D |  if_ne	jmp	#LR__1190
0de90     A7 12 02 FB | 	rdlong	arg01, fp
0de94     0C 4E 05 F1 | 	add	fp, #12
0de98     A7 14 02 FB | 	rdlong	arg02, fp
0de9c     0C 4E 05 F1 | 	add	fp, #12
0dea0     A7 16 02 FB | 	rdlong	arg03, fp
0dea4     18 4E 85 F1 | 	sub	fp, #24
0dea8     2D 00 00 FF 
0deac     EC E5 05 F1 | 	add	objptr, ##23532
0deb0     F2 18 02 FB | 	rdlong	arg04, objptr
0deb4     2D 00 00 FF 
0deb8     EC E5 85 F1 | 	sub	objptr, ##23532
0debc     A8 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0dec0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0dec0     54 00 90 FD | 	jmp	#LR__1191
0dec4                 | LR__1190
0dec4     A7 12 02 F6 | 	mov	arg01, fp
0dec8     20 ED BF FD | 	call	#_converttoint
0decc     FD 1E 02 F6 | 	mov	local01, result1
0ded0     0C 4E 05 F1 | 	add	fp, #12
0ded4     A7 12 02 F6 | 	mov	arg01, fp
0ded8     0C 4E 85 F1 | 	sub	fp, #12
0dedc     0C ED BF FD | 	call	#_converttoint
0dee0     FD 20 02 F6 | 	mov	local02, result1
0dee4     18 4E 05 F1 | 	add	fp, #24
0dee8     A7 12 02 F6 | 	mov	arg01, fp
0deec     18 4E 85 F1 | 	sub	fp, #24
0def0     F8 EC BF FD | 	call	#_converttoint
0def4     FD 16 02 F6 | 	mov	arg03, result1
0def8     2D 00 00 FF 
0defc     EC E5 05 F1 | 	add	objptr, ##23532
0df00     F2 18 02 FB | 	rdlong	arg04, objptr
0df04     2D 00 00 FF 
0df08     EC E5 85 F1 | 	sub	objptr, ##23532
0df0c     0F 13 02 F6 | 	mov	arg01, local01
0df10     10 15 02 F6 | 	mov	arg02, local02
0df14     50 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0df18                 | LR__1191
0df18     A7 F0 03 F6 | 	mov	ptra, fp
0df1c     B2 00 A0 FD | 	call	#popregs_
0df20                 | _do_fcircle_ret
0df20     2D 00 64 FD | 	ret
0df24                 | 
0df24                 | ' 
0df24                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0df24                 | ' 
0df24                 | ' sub do_circle
0df24                 | _do_circle
0df24     02 4A 05 F6 | 	mov	COUNT_, #2
0df28     A8 00 A0 FD | 	call	#pushregs_
0df2c     24 F0 07 F1 | 	add	ptra, #36
0df30     EC A0 BF FD | 	call	#_pop
0df34     FD 18 02 F6 | 	mov	arg04, result1
0df38     FE 16 02 F6 | 	mov	arg03, result2
0df3c     FF 14 02 F6 | 	mov	arg02, result3
0df40     18 4E 05 F1 | 	add	fp, #24
0df44     A7 18 62 FC | 	wrlong	arg04, fp
0df48     04 4E 05 F1 | 	add	fp, #4
0df4c     A7 16 62 FC | 	wrlong	arg03, fp
0df50     04 4E 05 F1 | 	add	fp, #4
0df54     A7 14 62 FC | 	wrlong	arg02, fp
0df58     20 4E 85 F1 | 	sub	fp, #32
0df5c     C0 A0 BF FD | 	call	#_pop
0df60     FD 18 02 F6 | 	mov	arg04, result1
0df64     FE 16 02 F6 | 	mov	arg03, result2
0df68     FF 1E 02 F6 | 	mov	local01, result3
0df6c     0C 4E 05 F1 | 	add	fp, #12
0df70     A7 18 62 FC | 	wrlong	arg04, fp
0df74     04 4E 05 F1 | 	add	fp, #4
0df78     A7 16 62 FC | 	wrlong	arg03, fp
0df7c     04 4E 05 F1 | 	add	fp, #4
0df80     A7 1E 62 FC | 	wrlong	local01, fp
0df84     14 4E 85 F1 | 	sub	fp, #20
0df88     94 A0 BF FD | 	call	#_pop
0df8c     A7 FA 61 FC | 	wrlong	result1, fp
0df90     04 4E 05 F1 | 	add	fp, #4
0df94     A7 FC 61 FC | 	wrlong	result2, fp
0df98     04 4E 05 F1 | 	add	fp, #4
0df9c     A7 FE 61 FC | 	wrlong	result3, fp
0dfa0                 | ' 
0dfa0                 | ' t3=pop()
0dfa0                 | ' t2=pop()
0dfa0                 | ' t1=pop()
0dfa0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0dfa0     FF 18 02 F6 | 	mov	arg04, result3
0dfa4     08 4E 85 F1 | 	sub	fp, #8
0dfa8     1C 18 0E F2 | 	cmp	arg04, #28 wz
0dfac     08 4E 05 51 |  if_ne	add	fp, #8
0dfb0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0dfb4     08 4E 85 51 |  if_ne	sub	fp, #8
0dfb8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0dfbc     7C 00 90 5D |  if_ne	jmp	#LR__1200
0dfc0     14 4E 05 F1 | 	add	fp, #20
0dfc4     A7 1E 02 FB | 	rdlong	local01, fp
0dfc8     14 4E 85 F1 | 	sub	fp, #20
0dfcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dfd0     14 4E 05 51 |  if_ne	add	fp, #20
0dfd4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dfd8     14 4E 85 51 |  if_ne	sub	fp, #20
0dfdc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dfe0     58 00 90 5D |  if_ne	jmp	#LR__1200
0dfe4     20 4E 05 F1 | 	add	fp, #32
0dfe8     A7 1E 02 FB | 	rdlong	local01, fp
0dfec     20 4E 85 F1 | 	sub	fp, #32
0dff0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dff4     20 4E 05 51 |  if_ne	add	fp, #32
0dff8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dffc     20 4E 85 51 |  if_ne	sub	fp, #32
0e000     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e004     34 00 90 5D |  if_ne	jmp	#LR__1200
0e008     A7 12 02 FB | 	rdlong	arg01, fp
0e00c     0C 4E 05 F1 | 	add	fp, #12
0e010     A7 14 02 FB | 	rdlong	arg02, fp
0e014     0C 4E 05 F1 | 	add	fp, #12
0e018     A7 16 02 FB | 	rdlong	arg03, fp
0e01c     18 4E 85 F1 | 	sub	fp, #24
0e020     2D 00 00 FF 
0e024     EC E5 05 F1 | 	add	objptr, ##23532
0e028     F2 18 02 FB | 	rdlong	arg04, objptr
0e02c     2D 00 00 FF 
0e030     EC E5 85 F1 | 	sub	objptr, ##23532
0e034     3C 43 B0 FD | 	call	#_hg010b_spin2_circle
0e038                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0e038     54 00 90 FD | 	jmp	#LR__1201
0e03c                 | LR__1200
0e03c     A7 12 02 F6 | 	mov	arg01, fp
0e040     A8 EB BF FD | 	call	#_converttoint
0e044     FD 1E 02 F6 | 	mov	local01, result1
0e048     0C 4E 05 F1 | 	add	fp, #12
0e04c     A7 12 02 F6 | 	mov	arg01, fp
0e050     0C 4E 85 F1 | 	sub	fp, #12
0e054     94 EB BF FD | 	call	#_converttoint
0e058     FD 20 02 F6 | 	mov	local02, result1
0e05c     18 4E 05 F1 | 	add	fp, #24
0e060     A7 12 02 F6 | 	mov	arg01, fp
0e064     18 4E 85 F1 | 	sub	fp, #24
0e068     80 EB BF FD | 	call	#_converttoint
0e06c     FD 16 02 F6 | 	mov	arg03, result1
0e070     2D 00 00 FF 
0e074     EC E5 05 F1 | 	add	objptr, ##23532
0e078     F2 18 02 FB | 	rdlong	arg04, objptr
0e07c     2D 00 00 FF 
0e080     EC E5 85 F1 | 	sub	objptr, ##23532
0e084     0F 13 02 F6 | 	mov	arg01, local01
0e088     10 15 02 F6 | 	mov	arg02, local02
0e08c     E4 42 B0 FD | 	call	#_hg010b_spin2_circle
0e090                 | LR__1201
0e090     A7 F0 03 F6 | 	mov	ptra, fp
0e094     B2 00 A0 FD | 	call	#popregs_
0e098                 | _do_circle_ret
0e098     2D 00 64 FD | 	ret
0e09c                 | 
0e09c                 | ' 
0e09c                 | ' ' -------------------------- Draw a rectangle
0e09c                 | ' 
0e09c                 | ' sub do_box
0e09c                 | _do_box
0e09c     03 4A 05 F6 | 	mov	COUNT_, #3
0e0a0     A8 00 A0 FD | 	call	#pushregs_
0e0a4     30 F0 07 F1 | 	add	ptra, #48
0e0a8     74 9F BF FD | 	call	#_pop
0e0ac     FD 1A 02 F6 | 	mov	arg05, result1
0e0b0     FE 18 02 F6 | 	mov	arg04, result2
0e0b4     FF 16 02 F6 | 	mov	arg03, result3
0e0b8     24 4E 05 F1 | 	add	fp, #36
0e0bc     A7 1A 62 FC | 	wrlong	arg05, fp
0e0c0     04 4E 05 F1 | 	add	fp, #4
0e0c4     A7 18 62 FC | 	wrlong	arg04, fp
0e0c8     04 4E 05 F1 | 	add	fp, #4
0e0cc     A7 16 62 FC | 	wrlong	arg03, fp
0e0d0     2C 4E 85 F1 | 	sub	fp, #44
0e0d4     48 9F BF FD | 	call	#_pop
0e0d8     FD 1A 02 F6 | 	mov	arg05, result1
0e0dc     FE 18 02 F6 | 	mov	arg04, result2
0e0e0     FF 16 02 F6 | 	mov	arg03, result3
0e0e4     18 4E 05 F1 | 	add	fp, #24
0e0e8     A7 1A 62 FC | 	wrlong	arg05, fp
0e0ec     04 4E 05 F1 | 	add	fp, #4
0e0f0     A7 18 62 FC | 	wrlong	arg04, fp
0e0f4     04 4E 05 F1 | 	add	fp, #4
0e0f8     A7 16 62 FC | 	wrlong	arg03, fp
0e0fc     20 4E 85 F1 | 	sub	fp, #32
0e100     1C 9F BF FD | 	call	#_pop
0e104     FD 1A 02 F6 | 	mov	arg05, result1
0e108     FE 18 02 F6 | 	mov	arg04, result2
0e10c     FF 1E 02 F6 | 	mov	local01, result3
0e110     0C 4E 05 F1 | 	add	fp, #12
0e114     A7 1A 62 FC | 	wrlong	arg05, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 18 62 FC | 	wrlong	arg04, fp
0e120     04 4E 05 F1 | 	add	fp, #4
0e124     A7 1E 62 FC | 	wrlong	local01, fp
0e128     14 4E 85 F1 | 	sub	fp, #20
0e12c     F0 9E BF FD | 	call	#_pop
0e130     A7 FA 61 FC | 	wrlong	result1, fp
0e134     04 4E 05 F1 | 	add	fp, #4
0e138     A7 FC 61 FC | 	wrlong	result2, fp
0e13c     04 4E 05 F1 | 	add	fp, #4
0e140     A7 FE 61 FC | 	wrlong	result3, fp
0e144                 | ' 
0e144                 | ' t4=pop()
0e144                 | ' t3=pop()
0e144                 | ' t2=pop()
0e144                 | ' t1=pop()
0e144                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e144     FF 1A 02 F6 | 	mov	arg05, result3
0e148     08 4E 85 F1 | 	sub	fp, #8
0e14c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e150     08 4E 05 51 |  if_ne	add	fp, #8
0e154     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e158     08 4E 85 51 |  if_ne	sub	fp, #8
0e15c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e160     A8 00 90 5D |  if_ne	jmp	#LR__1210
0e164     14 4E 05 F1 | 	add	fp, #20
0e168     A7 1E 02 FB | 	rdlong	local01, fp
0e16c     14 4E 85 F1 | 	sub	fp, #20
0e170     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e174     14 4E 05 51 |  if_ne	add	fp, #20
0e178     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e17c     14 4E 85 51 |  if_ne	sub	fp, #20
0e180     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e184     84 00 90 5D |  if_ne	jmp	#LR__1210
0e188     20 4E 05 F1 | 	add	fp, #32
0e18c     A7 1E 02 FB | 	rdlong	local01, fp
0e190     20 4E 85 F1 | 	sub	fp, #32
0e194     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e198     20 4E 05 51 |  if_ne	add	fp, #32
0e19c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1a0     20 4E 85 51 |  if_ne	sub	fp, #32
0e1a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e1a8     60 00 90 5D |  if_ne	jmp	#LR__1210
0e1ac     2C 4E 05 F1 | 	add	fp, #44
0e1b0     A7 1E 02 FB | 	rdlong	local01, fp
0e1b4     2C 4E 85 F1 | 	sub	fp, #44
0e1b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e1bc     2C 4E 05 51 |  if_ne	add	fp, #44
0e1c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1c4     2C 4E 85 51 |  if_ne	sub	fp, #44
0e1c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e1cc     3C 00 90 5D |  if_ne	jmp	#LR__1210
0e1d0     A7 12 02 FB | 	rdlong	arg01, fp
0e1d4     0C 4E 05 F1 | 	add	fp, #12
0e1d8     A7 14 02 FB | 	rdlong	arg02, fp
0e1dc     0C 4E 05 F1 | 	add	fp, #12
0e1e0     A7 16 02 FB | 	rdlong	arg03, fp
0e1e4     0C 4E 05 F1 | 	add	fp, #12
0e1e8     A7 18 02 FB | 	rdlong	arg04, fp
0e1ec     24 4E 85 F1 | 	sub	fp, #36
0e1f0     2D 00 00 FF 
0e1f4     EC E5 05 F1 | 	add	objptr, ##23532
0e1f8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e1fc     2D 00 00 FF 
0e200     EC E5 85 F1 | 	sub	objptr, ##23532
0e204     38 43 B0 FD | 	call	#_hg010b_spin2_box
0e208                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e208     6C 00 90 FD | 	jmp	#LR__1211
0e20c                 | LR__1210
0e20c     A7 12 02 F6 | 	mov	arg01, fp
0e210     D8 E9 BF FD | 	call	#_converttoint
0e214     FD 20 02 F6 | 	mov	local02, result1
0e218     0C 4E 05 F1 | 	add	fp, #12
0e21c     A7 12 02 F6 | 	mov	arg01, fp
0e220     0C 4E 85 F1 | 	sub	fp, #12
0e224     C4 E9 BF FD | 	call	#_converttoint
0e228     FD 22 02 F6 | 	mov	local03, result1
0e22c     18 4E 05 F1 | 	add	fp, #24
0e230     A7 12 02 F6 | 	mov	arg01, fp
0e234     18 4E 85 F1 | 	sub	fp, #24
0e238     B0 E9 BF FD | 	call	#_converttoint
0e23c     FD 1E 02 F6 | 	mov	local01, result1
0e240     24 4E 05 F1 | 	add	fp, #36
0e244     A7 12 02 F6 | 	mov	arg01, fp
0e248     24 4E 85 F1 | 	sub	fp, #36
0e24c     9C E9 BF FD | 	call	#_converttoint
0e250     FD 18 02 F6 | 	mov	arg04, result1
0e254     2D 00 00 FF 
0e258     EC E5 05 F1 | 	add	objptr, ##23532
0e25c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e260     2D 00 00 FF 
0e264     EC E5 85 F1 | 	sub	objptr, ##23532
0e268     10 13 02 F6 | 	mov	arg01, local02
0e26c     11 15 02 F6 | 	mov	arg02, local03
0e270     0F 17 02 F6 | 	mov	arg03, local01
0e274     C8 42 B0 FD | 	call	#_hg010b_spin2_box
0e278                 | LR__1211
0e278     A7 F0 03 F6 | 	mov	ptra, fp
0e27c     B2 00 A0 FD | 	call	#popregs_
0e280                 | _do_box_ret
0e280     2D 00 64 FD | 	ret
0e284                 | 
0e284                 | ' 
0e284                 | ' sub do_fill
0e284                 | _do_fill
0e284     03 4A 05 F6 | 	mov	COUNT_, #3
0e288     A8 00 A0 FD | 	call	#pushregs_
0e28c     30 F0 07 F1 | 	add	ptra, #48
0e290     8C 9D BF FD | 	call	#_pop
0e294     FD 18 02 F6 | 	mov	arg04, result1
0e298     FE 16 02 F6 | 	mov	arg03, result2
0e29c     FF 14 02 F6 | 	mov	arg02, result3
0e2a0     24 4E 05 F1 | 	add	fp, #36
0e2a4     A7 18 62 FC | 	wrlong	arg04, fp
0e2a8     04 4E 05 F1 | 	add	fp, #4
0e2ac     A7 16 62 FC | 	wrlong	arg03, fp
0e2b0     04 4E 05 F1 | 	add	fp, #4
0e2b4     A7 14 62 FC | 	wrlong	arg02, fp
0e2b8     2C 4E 85 F1 | 	sub	fp, #44
0e2bc     60 9D BF FD | 	call	#_pop
0e2c0     FD 18 02 F6 | 	mov	arg04, result1
0e2c4     FE 16 02 F6 | 	mov	arg03, result2
0e2c8     FF 14 02 F6 | 	mov	arg02, result3
0e2cc     18 4E 05 F1 | 	add	fp, #24
0e2d0     A7 18 62 FC | 	wrlong	arg04, fp
0e2d4     04 4E 05 F1 | 	add	fp, #4
0e2d8     A7 16 62 FC | 	wrlong	arg03, fp
0e2dc     04 4E 05 F1 | 	add	fp, #4
0e2e0     A7 14 62 FC | 	wrlong	arg02, fp
0e2e4     20 4E 85 F1 | 	sub	fp, #32
0e2e8     34 9D BF FD | 	call	#_pop
0e2ec     FD 18 02 F6 | 	mov	arg04, result1
0e2f0     FE 16 02 F6 | 	mov	arg03, result2
0e2f4     FF 1E 02 F6 | 	mov	local01, result3
0e2f8     0C 4E 05 F1 | 	add	fp, #12
0e2fc     A7 18 62 FC | 	wrlong	arg04, fp
0e300     04 4E 05 F1 | 	add	fp, #4
0e304     A7 16 62 FC | 	wrlong	arg03, fp
0e308     04 4E 05 F1 | 	add	fp, #4
0e30c     A7 1E 62 FC | 	wrlong	local01, fp
0e310     14 4E 85 F1 | 	sub	fp, #20
0e314     08 9D BF FD | 	call	#_pop
0e318     A7 FA 61 FC | 	wrlong	result1, fp
0e31c     04 4E 05 F1 | 	add	fp, #4
0e320     A7 FC 61 FC | 	wrlong	result2, fp
0e324     04 4E 05 F1 | 	add	fp, #4
0e328     A7 FE 61 FC | 	wrlong	result3, fp
0e32c                 | ' 
0e32c                 | ' t4=pop()
0e32c                 | ' t3=pop()
0e32c                 | ' t2=pop()
0e32c                 | ' t1=pop()
0e32c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e32c     FF 18 02 F6 | 	mov	arg04, result3
0e330     08 4E 85 F1 | 	sub	fp, #8
0e334     1C 18 0E F2 | 	cmp	arg04, #28 wz
0e338     08 4E 05 51 |  if_ne	add	fp, #8
0e33c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e340     08 4E 85 51 |  if_ne	sub	fp, #8
0e344     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e348     94 00 90 5D |  if_ne	jmp	#LR__1220
0e34c     14 4E 05 F1 | 	add	fp, #20
0e350     A7 1E 02 FB | 	rdlong	local01, fp
0e354     14 4E 85 F1 | 	sub	fp, #20
0e358     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e35c     14 4E 05 51 |  if_ne	add	fp, #20
0e360     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e364     14 4E 85 51 |  if_ne	sub	fp, #20
0e368     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e36c     70 00 90 5D |  if_ne	jmp	#LR__1220
0e370     20 4E 05 F1 | 	add	fp, #32
0e374     A7 1E 02 FB | 	rdlong	local01, fp
0e378     20 4E 85 F1 | 	sub	fp, #32
0e37c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e380     20 4E 05 51 |  if_ne	add	fp, #32
0e384     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e388     20 4E 85 51 |  if_ne	sub	fp, #32
0e38c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e390     4C 00 90 5D |  if_ne	jmp	#LR__1220
0e394     2C 4E 05 F1 | 	add	fp, #44
0e398     A7 1E 02 FB | 	rdlong	local01, fp
0e39c     2C 4E 85 F1 | 	sub	fp, #44
0e3a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3a4     2C 4E 05 51 |  if_ne	add	fp, #44
0e3a8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e3ac     2C 4E 85 51 |  if_ne	sub	fp, #44
0e3b0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e3b4     28 00 90 5D |  if_ne	jmp	#LR__1220
0e3b8     A7 12 02 FB | 	rdlong	arg01, fp
0e3bc     0C 4E 05 F1 | 	add	fp, #12
0e3c0     A7 14 02 FB | 	rdlong	arg02, fp
0e3c4     0C 4E 05 F1 | 	add	fp, #12
0e3c8     A7 16 02 FB | 	rdlong	arg03, fp
0e3cc     0C 4E 05 F1 | 	add	fp, #12
0e3d0     A7 18 02 FB | 	rdlong	arg04, fp
0e3d4     24 4E 85 F1 | 	sub	fp, #36
0e3d8     EC 3B B0 FD | 	call	#_hg010b_spin2_fill
0e3dc                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0e3dc     58 00 90 FD | 	jmp	#LR__1221
0e3e0                 | LR__1220
0e3e0     A7 12 02 F6 | 	mov	arg01, fp
0e3e4     04 E8 BF FD | 	call	#_converttoint
0e3e8     FD 20 02 F6 | 	mov	local02, result1
0e3ec     0C 4E 05 F1 | 	add	fp, #12
0e3f0     A7 12 02 F6 | 	mov	arg01, fp
0e3f4     0C 4E 85 F1 | 	sub	fp, #12
0e3f8     F0 E7 BF FD | 	call	#_converttoint
0e3fc     FD 22 02 F6 | 	mov	local03, result1
0e400     18 4E 05 F1 | 	add	fp, #24
0e404     A7 12 02 F6 | 	mov	arg01, fp
0e408     18 4E 85 F1 | 	sub	fp, #24
0e40c     DC E7 BF FD | 	call	#_converttoint
0e410     FD 1E 02 F6 | 	mov	local01, result1
0e414     24 4E 05 F1 | 	add	fp, #36
0e418     A7 12 02 F6 | 	mov	arg01, fp
0e41c     24 4E 85 F1 | 	sub	fp, #36
0e420     C8 E7 BF FD | 	call	#_converttoint
0e424     FD 18 02 F6 | 	mov	arg04, result1
0e428     10 13 02 F6 | 	mov	arg01, local02
0e42c     11 15 02 F6 | 	mov	arg02, local03
0e430     0F 17 02 F6 | 	mov	arg03, local01
0e434     90 3B B0 FD | 	call	#_hg010b_spin2_fill
0e438                 | LR__1221
0e438     A7 F0 03 F6 | 	mov	ptra, fp
0e43c     B2 00 A0 FD | 	call	#popregs_
0e440                 | _do_fill_ret
0e440     2D 00 64 FD | 	ret
0e444                 | 
0e444                 | ' 
0e444                 | ' ' -------------------------- Draw a frane
0e444                 | ' 
0e444                 | ' sub do_frame
0e444                 | _do_frame
0e444     03 4A 05 F6 | 	mov	COUNT_, #3
0e448     A8 00 A0 FD | 	call	#pushregs_
0e44c     30 F0 07 F1 | 	add	ptra, #48
0e450     CC 9B BF FD | 	call	#_pop
0e454     FD 1A 02 F6 | 	mov	arg05, result1
0e458     FE 18 02 F6 | 	mov	arg04, result2
0e45c     FF 16 02 F6 | 	mov	arg03, result3
0e460     24 4E 05 F1 | 	add	fp, #36
0e464     A7 1A 62 FC | 	wrlong	arg05, fp
0e468     04 4E 05 F1 | 	add	fp, #4
0e46c     A7 18 62 FC | 	wrlong	arg04, fp
0e470     04 4E 05 F1 | 	add	fp, #4
0e474     A7 16 62 FC | 	wrlong	arg03, fp
0e478     2C 4E 85 F1 | 	sub	fp, #44
0e47c     A0 9B BF FD | 	call	#_pop
0e480     FD 1A 02 F6 | 	mov	arg05, result1
0e484     FE 18 02 F6 | 	mov	arg04, result2
0e488     FF 16 02 F6 | 	mov	arg03, result3
0e48c     18 4E 05 F1 | 	add	fp, #24
0e490     A7 1A 62 FC | 	wrlong	arg05, fp
0e494     04 4E 05 F1 | 	add	fp, #4
0e498     A7 18 62 FC | 	wrlong	arg04, fp
0e49c     04 4E 05 F1 | 	add	fp, #4
0e4a0     A7 16 62 FC | 	wrlong	arg03, fp
0e4a4     20 4E 85 F1 | 	sub	fp, #32
0e4a8     74 9B BF FD | 	call	#_pop
0e4ac     FD 1A 02 F6 | 	mov	arg05, result1
0e4b0     FE 18 02 F6 | 	mov	arg04, result2
0e4b4     FF 1E 02 F6 | 	mov	local01, result3
0e4b8     0C 4E 05 F1 | 	add	fp, #12
0e4bc     A7 1A 62 FC | 	wrlong	arg05, fp
0e4c0     04 4E 05 F1 | 	add	fp, #4
0e4c4     A7 18 62 FC | 	wrlong	arg04, fp
0e4c8     04 4E 05 F1 | 	add	fp, #4
0e4cc     A7 1E 62 FC | 	wrlong	local01, fp
0e4d0     14 4E 85 F1 | 	sub	fp, #20
0e4d4     48 9B BF FD | 	call	#_pop
0e4d8     A7 FA 61 FC | 	wrlong	result1, fp
0e4dc     04 4E 05 F1 | 	add	fp, #4
0e4e0     A7 FC 61 FC | 	wrlong	result2, fp
0e4e4     04 4E 05 F1 | 	add	fp, #4
0e4e8     A7 FE 61 FC | 	wrlong	result3, fp
0e4ec                 | ' 
0e4ec                 | ' t4=pop()
0e4ec                 | ' t3=pop()
0e4ec                 | ' t2=pop()
0e4ec                 | ' t1=pop()
0e4ec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e4ec     FF 1A 02 F6 | 	mov	arg05, result3
0e4f0     08 4E 85 F1 | 	sub	fp, #8
0e4f4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e4f8     08 4E 05 51 |  if_ne	add	fp, #8
0e4fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e500     08 4E 85 51 |  if_ne	sub	fp, #8
0e504     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e508     A8 00 90 5D |  if_ne	jmp	#LR__1230
0e50c     14 4E 05 F1 | 	add	fp, #20
0e510     A7 1E 02 FB | 	rdlong	local01, fp
0e514     14 4E 85 F1 | 	sub	fp, #20
0e518     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e51c     14 4E 05 51 |  if_ne	add	fp, #20
0e520     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e524     14 4E 85 51 |  if_ne	sub	fp, #20
0e528     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e52c     84 00 90 5D |  if_ne	jmp	#LR__1230
0e530     20 4E 05 F1 | 	add	fp, #32
0e534     A7 1E 02 FB | 	rdlong	local01, fp
0e538     20 4E 85 F1 | 	sub	fp, #32
0e53c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e540     20 4E 05 51 |  if_ne	add	fp, #32
0e544     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e548     20 4E 85 51 |  if_ne	sub	fp, #32
0e54c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e550     60 00 90 5D |  if_ne	jmp	#LR__1230
0e554     2C 4E 05 F1 | 	add	fp, #44
0e558     A7 1E 02 FB | 	rdlong	local01, fp
0e55c     2C 4E 85 F1 | 	sub	fp, #44
0e560     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e564     2C 4E 05 51 |  if_ne	add	fp, #44
0e568     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e56c     2C 4E 85 51 |  if_ne	sub	fp, #44
0e570     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e574     3C 00 90 5D |  if_ne	jmp	#LR__1230
0e578     A7 12 02 FB | 	rdlong	arg01, fp
0e57c     0C 4E 05 F1 | 	add	fp, #12
0e580     A7 14 02 FB | 	rdlong	arg02, fp
0e584     0C 4E 05 F1 | 	add	fp, #12
0e588     A7 16 02 FB | 	rdlong	arg03, fp
0e58c     0C 4E 05 F1 | 	add	fp, #12
0e590     A7 18 02 FB | 	rdlong	arg04, fp
0e594     24 4E 85 F1 | 	sub	fp, #36
0e598     2D 00 00 FF 
0e59c     EC E5 05 F1 | 	add	objptr, ##23532
0e5a0     F2 1A 02 FB | 	rdlong	arg05, objptr
0e5a4     2D 00 00 FF 
0e5a8     EC E5 85 F1 | 	sub	objptr, ##23532
0e5ac     10 3F B0 FD | 	call	#_hg010b_spin2_frame
0e5b0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e5b0     6C 00 90 FD | 	jmp	#LR__1231
0e5b4                 | LR__1230
0e5b4     A7 12 02 F6 | 	mov	arg01, fp
0e5b8     30 E6 BF FD | 	call	#_converttoint
0e5bc     FD 20 02 F6 | 	mov	local02, result1
0e5c0     0C 4E 05 F1 | 	add	fp, #12
0e5c4     A7 12 02 F6 | 	mov	arg01, fp
0e5c8     0C 4E 85 F1 | 	sub	fp, #12
0e5cc     1C E6 BF FD | 	call	#_converttoint
0e5d0     FD 22 02 F6 | 	mov	local03, result1
0e5d4     18 4E 05 F1 | 	add	fp, #24
0e5d8     A7 12 02 F6 | 	mov	arg01, fp
0e5dc     18 4E 85 F1 | 	sub	fp, #24
0e5e0     08 E6 BF FD | 	call	#_converttoint
0e5e4     FD 1E 02 F6 | 	mov	local01, result1
0e5e8     24 4E 05 F1 | 	add	fp, #36
0e5ec     A7 12 02 F6 | 	mov	arg01, fp
0e5f0     24 4E 85 F1 | 	sub	fp, #36
0e5f4     F4 E5 BF FD | 	call	#_converttoint
0e5f8     FD 18 02 F6 | 	mov	arg04, result1
0e5fc     2D 00 00 FF 
0e600     EC E5 05 F1 | 	add	objptr, ##23532
0e604     F2 1A 02 FB | 	rdlong	arg05, objptr
0e608     2D 00 00 FF 
0e60c     EC E5 85 F1 | 	sub	objptr, ##23532
0e610     10 13 02 F6 | 	mov	arg01, local02
0e614     11 15 02 F6 | 	mov	arg02, local03
0e618     0F 17 02 F6 | 	mov	arg03, local01
0e61c     A0 3E B0 FD | 	call	#_hg010b_spin2_frame
0e620                 | LR__1231
0e620     A7 F0 03 F6 | 	mov	ptra, fp
0e624     B2 00 A0 FD | 	call	#popregs_
0e628                 | _do_frame_ret
0e628     2D 00 64 FD | 	ret
0e62c                 | 
0e62c                 | ' 
0e62c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0e62c                 | ' 
0e62c                 | ' ' ------------------------- Print to the screem
0e62c                 | ' 
0e62c                 | ' sub do_print  
0e62c                 | _do_print
0e62c     0A 4A 05 F6 | 	mov	COUNT_, #10
0e630     A8 00 A0 FD | 	call	#pushregs_
0e634     00 24 06 F6 | 	mov	local04, #0
0e638     E4 99 BF FD | 	call	#_pop
0e63c     FD 26 02 F6 | 	mov	local05, result1
0e640     FE 28 02 F6 | 	mov	local06, result2
0e644     FF 2A 02 F6 | 	mov	local07, result3
0e648     13 1F 02 F6 | 	mov	local01, local05
0e64c     14 21 02 F6 | 	mov	local02, local06
0e650     15 23 02 F6 | 	mov	local03, local07
0e654                 | '  
0e654                 | ' r=0
0e654                 | ' t1=pop() 
0e654                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0e654     21 22 0E F2 | 	cmp	local03, #33 wz
0e658     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0e65c     20 00 90 5D |  if_ne	jmp	#LR__1240
0e660     11 25 02 F6 | 	mov	local04, local03
0e664     B8 99 BF FD | 	call	#_pop
0e668     FD 26 02 F6 | 	mov	local05, result1
0e66c     FE 28 02 F6 | 	mov	local06, result2
0e670     FF 2A 02 F6 | 	mov	local07, result3
0e674     13 1F 02 F6 | 	mov	local01, local05
0e678     14 21 02 F6 | 	mov	local02, local06
0e67c     15 23 02 F6 | 	mov	local03, local07
0e680                 | LR__1240
0e680                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0e680     20 22 0E F2 | 	cmp	local03, #32 wz
0e684     11 25 02 A6 |  if_e	mov	local04, local03
0e688                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0e688     FF 22 0E F2 | 	cmp	local03, #255 wz
0e68c     0C 00 90 5D |  if_ne	jmp	#LR__1241
0e690     0F 13 02 F6 | 	mov	arg01, local01
0e694     F4 1E B0 FD | 	call	#_printerror
0e698     30 04 90 FD | 	jmp	#LR__1258
0e69c                 | LR__1241
0e69c                 | ' 
0e69c                 | ' if r=print_mod_comma  then
0e69c     21 24 0E F2 | 	cmp	local04, #33 wz
0e6a0     AC 01 90 5D |  if_ne	jmp	#LR__1246
0e6a4                 | '   if t1.result_type=result_int then print t1.result.iresult,
0e6a4     1C 22 0E F2 | 	cmp	local03, #28 wz
0e6a8     64 00 90 5D |  if_ne	jmp	#LR__1242
0e6ac     00 12 06 F6 | 	mov	arg01, #0
0e6b0     B0 A8 B0 FD | 	call	#__system___getiolock_0306
0e6b4     FD 12 02 F6 | 	mov	arg01, result1
0e6b8     C4 53 B0 FD | 	call	#__system___lockmem
0e6bc     00 28 06 F6 | 	mov	local06, #0
0e6c0     00 12 06 F6 | 	mov	arg01, #0
0e6c4     0F 15 02 F6 | 	mov	arg02, local01
0e6c8     00 16 06 F6 | 	mov	arg03, #0
0e6cc     0A 18 06 F6 | 	mov	arg04, #10
0e6d0     FC 5F B0 FD | 	call	#__system___basic_print_integer
0e6d4     FD 2A 02 F6 | 	mov	local07, result1
0e6d8     14 27 02 F6 | 	mov	local05, local06
0e6dc     15 27 02 F1 | 	add	local05, local07
0e6e0     00 2C 06 F6 | 	mov	local08, #0
0e6e4     00 12 06 F6 | 	mov	arg01, #0
0e6e8     09 14 06 F6 | 	mov	arg02, #9
0e6ec     00 16 06 F6 | 	mov	arg03, #0
0e6f0     40 5F B0 FD | 	call	#__system___basic_print_char
0e6f4     FD 2E 02 F6 | 	mov	local09, result1
0e6f8     FD 26 02 F1 | 	add	local05, result1
0e6fc     00 12 06 F6 | 	mov	arg01, #0
0e700     60 A8 B0 FD | 	call	#__system___getiolock_0306
0e704     FD 00 68 FC | 	wrlong	#0, result1
0e708     00 FA 05 F6 | 	mov	result1, #0
0e70c     00 30 06 F6 | 	mov	local10, #0
0e710                 | LR__1242
0e710                 | '   if t1.result_type=result_uint then print t1.result.uresult,
0e710     1D 22 0E F2 | 	cmp	local03, #29 wz
0e714     64 00 90 5D |  if_ne	jmp	#LR__1243
0e718     00 12 06 F6 | 	mov	arg01, #0
0e71c     44 A8 B0 FD | 	call	#__system___getiolock_0306
0e720     FD 12 02 F6 | 	mov	arg01, result1
0e724     58 53 B0 FD | 	call	#__system___lockmem
0e728     00 28 06 F6 | 	mov	local06, #0
0e72c     00 12 06 F6 | 	mov	arg01, #0
0e730     0F 15 02 F6 | 	mov	arg02, local01
0e734     00 16 06 F6 | 	mov	arg03, #0
0e738     0A 18 06 F6 | 	mov	arg04, #10
0e73c     D0 5F B0 FD | 	call	#__system___basic_print_unsigned
0e740     FD 2A 02 F6 | 	mov	local07, result1
0e744     14 27 02 F6 | 	mov	local05, local06
0e748     15 27 02 F1 | 	add	local05, local07
0e74c     00 2C 06 F6 | 	mov	local08, #0
0e750     00 12 06 F6 | 	mov	arg01, #0
0e754     09 14 06 F6 | 	mov	arg02, #9
0e758     00 16 06 F6 | 	mov	arg03, #0
0e75c     D4 5E B0 FD | 	call	#__system___basic_print_char
0e760     FD 2E 02 F6 | 	mov	local09, result1
0e764     FD 26 02 F1 | 	add	local05, result1
0e768     00 12 06 F6 | 	mov	arg01, #0
0e76c     F4 A7 B0 FD | 	call	#__system___getiolock_0306
0e770     FD 00 68 FC | 	wrlong	#0, result1
0e774     00 FA 05 F6 | 	mov	result1, #0
0e778     00 30 06 F6 | 	mov	local10, #0
0e77c                 | LR__1243
0e77c                 | '   if t1.result_type=result_float then print t1.result.fresult,
0e77c     1E 22 0E F2 | 	cmp	local03, #30 wz
0e780     64 00 90 5D |  if_ne	jmp	#LR__1244
0e784     00 12 06 F6 | 	mov	arg01, #0
0e788     D8 A7 B0 FD | 	call	#__system___getiolock_0306
0e78c     FD 12 02 F6 | 	mov	arg01, result1
0e790     EC 52 B0 FD | 	call	#__system___lockmem
0e794     00 28 06 F6 | 	mov	local06, #0
0e798     00 12 06 F6 | 	mov	arg01, #0
0e79c     0F 15 02 F6 | 	mov	arg02, local01
0e7a0     00 16 06 F6 | 	mov	arg03, #0
0e7a4     23 18 06 F6 | 	mov	arg04, #35
0e7a8     38 82 B0 FD | 	call	#__system___basic_print_float
0e7ac     FD 2A 02 F6 | 	mov	local07, result1
0e7b0     14 27 02 F6 | 	mov	local05, local06
0e7b4     15 27 02 F1 | 	add	local05, local07
0e7b8     00 2C 06 F6 | 	mov	local08, #0
0e7bc     00 12 06 F6 | 	mov	arg01, #0
0e7c0     09 14 06 F6 | 	mov	arg02, #9
0e7c4     00 16 06 F6 | 	mov	arg03, #0
0e7c8     68 5E B0 FD | 	call	#__system___basic_print_char
0e7cc     FD 2E 02 F6 | 	mov	local09, result1
0e7d0     FD 26 02 F1 | 	add	local05, result1
0e7d4     00 12 06 F6 | 	mov	arg01, #0
0e7d8     88 A7 B0 FD | 	call	#__system___getiolock_0306
0e7dc     FD 00 68 FC | 	wrlong	#0, result1
0e7e0     00 FA 05 F6 | 	mov	result1, #0
0e7e4     00 30 06 F6 | 	mov	local10, #0
0e7e8                 | LR__1244
0e7e8                 | '   if t1.result_type=result_string then print t1.result.sresult,
0e7e8     1F 22 0E F2 | 	cmp	local03, #31 wz
0e7ec     60 00 90 5D |  if_ne	jmp	#LR__1245
0e7f0     00 12 06 F6 | 	mov	arg01, #0
0e7f4     6C A7 B0 FD | 	call	#__system___getiolock_0306
0e7f8     FD 12 02 F6 | 	mov	arg01, result1
0e7fc     80 52 B0 FD | 	call	#__system___lockmem
0e800     00 28 06 F6 | 	mov	local06, #0
0e804     00 12 06 F6 | 	mov	arg01, #0
0e808     0F 15 02 F6 | 	mov	arg02, local01
0e80c     00 16 06 F6 | 	mov	arg03, #0
0e810     78 5E B0 FD | 	call	#__system___basic_print_string
0e814     FD 2A 02 F6 | 	mov	local07, result1
0e818     14 27 02 F6 | 	mov	local05, local06
0e81c     15 27 02 F1 | 	add	local05, local07
0e820     00 2C 06 F6 | 	mov	local08, #0
0e824     00 12 06 F6 | 	mov	arg01, #0
0e828     09 14 06 F6 | 	mov	arg02, #9
0e82c     00 16 06 F6 | 	mov	arg03, #0
0e830     00 5E B0 FD | 	call	#__system___basic_print_char
0e834     FD 2E 02 F6 | 	mov	local09, result1
0e838     FD 26 02 F1 | 	add	local05, result1
0e83c     00 12 06 F6 | 	mov	arg01, #0
0e840     20 A7 B0 FD | 	call	#__system___getiolock_0306
0e844     FD 00 68 FC | 	wrlong	#0, result1
0e848     00 FA 05 F6 | 	mov	result1, #0
0e84c     00 30 06 F6 | 	mov	local10, #0
0e850                 | LR__1245
0e850                 | LR__1246
0e850                 | ' if r=print_mod_semicolon then 
0e850     22 24 0E F2 | 	cmp	local04, #34 wz
0e854     1C 01 90 5D |  if_ne	jmp	#LR__1251
0e858                 | '   if t1.result_type=result_int then print t1.result.iresult;
0e858     1C 22 0E F2 | 	cmp	local03, #28 wz
0e85c     50 00 90 5D |  if_ne	jmp	#LR__1247
0e860     00 12 06 F6 | 	mov	arg01, #0
0e864     FC A6 B0 FD | 	call	#__system___getiolock_0306
0e868     FD 12 02 F6 | 	mov	arg01, result1
0e86c     10 52 B0 FD | 	call	#__system___lockmem
0e870     00 28 06 F6 | 	mov	local06, #0
0e874     00 30 06 F6 | 	mov	local10, #0
0e878     0A 2C 06 F6 | 	mov	local08, #10
0e87c     00 12 06 F6 | 	mov	arg01, #0
0e880     0F 15 02 F6 | 	mov	arg02, local01
0e884     00 16 06 F6 | 	mov	arg03, #0
0e888     0A 18 06 F6 | 	mov	arg04, #10
0e88c     40 5E B0 FD | 	call	#__system___basic_print_integer
0e890     FD 2A 02 F6 | 	mov	local07, result1
0e894     14 27 02 F6 | 	mov	local05, local06
0e898     15 27 02 F1 | 	add	local05, local07
0e89c     00 12 06 F6 | 	mov	arg01, #0
0e8a0     C0 A6 B0 FD | 	call	#__system___getiolock_0306
0e8a4     FD 00 68 FC | 	wrlong	#0, result1
0e8a8     00 FA 05 F6 | 	mov	result1, #0
0e8ac     00 2E 06 F6 | 	mov	local09, #0
0e8b0                 | LR__1247
0e8b0                 | '   if t1.result_type=result_uint then print t1.result.uresult;
0e8b0     1D 22 0E F2 | 	cmp	local03, #29 wz
0e8b4     50 00 90 5D |  if_ne	jmp	#LR__1248
0e8b8     00 12 06 F6 | 	mov	arg01, #0
0e8bc     A4 A6 B0 FD | 	call	#__system___getiolock_0306
0e8c0     FD 12 02 F6 | 	mov	arg01, result1
0e8c4     B8 51 B0 FD | 	call	#__system___lockmem
0e8c8     00 28 06 F6 | 	mov	local06, #0
0e8cc     00 30 06 F6 | 	mov	local10, #0
0e8d0     0A 2C 06 F6 | 	mov	local08, #10
0e8d4     00 12 06 F6 | 	mov	arg01, #0
0e8d8     0F 15 02 F6 | 	mov	arg02, local01
0e8dc     00 16 06 F6 | 	mov	arg03, #0
0e8e0     0A 18 06 F6 | 	mov	arg04, #10
0e8e4     28 5E B0 FD | 	call	#__system___basic_print_unsigned
0e8e8     FD 2A 02 F6 | 	mov	local07, result1
0e8ec     14 27 02 F6 | 	mov	local05, local06
0e8f0     15 27 02 F1 | 	add	local05, local07
0e8f4     00 12 06 F6 | 	mov	arg01, #0
0e8f8     68 A6 B0 FD | 	call	#__system___getiolock_0306
0e8fc     FD 00 68 FC | 	wrlong	#0, result1
0e900     00 FA 05 F6 | 	mov	result1, #0
0e904     00 2E 06 F6 | 	mov	local09, #0
0e908                 | LR__1248
0e908                 | '   if t1.result_type=result_float then print t1.result.fresult;
0e908     1E 22 0E F2 | 	cmp	local03, #30 wz
0e90c     30 00 90 5D |  if_ne	jmp	#LR__1249
0e910     00 12 06 F6 | 	mov	arg01, #0
0e914     4C A6 B0 FD | 	call	#__system___getiolock_0306
0e918     FD 12 02 F6 | 	mov	arg01, result1
0e91c     60 51 B0 FD | 	call	#__system___lockmem
0e920     00 12 06 F6 | 	mov	arg01, #0
0e924     0F 15 02 F6 | 	mov	arg02, local01
0e928     00 16 06 F6 | 	mov	arg03, #0
0e92c     23 18 06 F6 | 	mov	arg04, #35
0e930     B0 80 B0 FD | 	call	#__system___basic_print_float
0e934     00 12 06 F6 | 	mov	arg01, #0
0e938     28 A6 B0 FD | 	call	#__system___getiolock_0306
0e93c     FD 00 68 FC | 	wrlong	#0, result1
0e940                 | LR__1249
0e940                 | '   if t1.result_type=result_string then print t1.result.sresult;
0e940     1F 22 0E F2 | 	cmp	local03, #31 wz
0e944     2C 00 90 5D |  if_ne	jmp	#LR__1250
0e948     00 12 06 F6 | 	mov	arg01, #0
0e94c     14 A6 B0 FD | 	call	#__system___getiolock_0306
0e950     FD 12 02 F6 | 	mov	arg01, result1
0e954     28 51 B0 FD | 	call	#__system___lockmem
0e958     00 12 06 F6 | 	mov	arg01, #0
0e95c     0F 15 02 F6 | 	mov	arg02, local01
0e960     00 16 06 F6 | 	mov	arg03, #0
0e964     24 5D B0 FD | 	call	#__system___basic_print_string
0e968     00 12 06 F6 | 	mov	arg01, #0
0e96c     F4 A5 B0 FD | 	call	#__system___getiolock_0306
0e970     FD 00 68 FC | 	wrlong	#0, result1
0e974                 | LR__1250
0e974                 | LR__1251
0e974                 | ' if r=0 then 
0e974     00 24 0E F2 | 	cmp	local04, #0 wz
0e978     1C 01 90 5D |  if_ne	jmp	#LR__1256
0e97c                 | '   if t1.result_type=result_int then print t1.result.iresult
0e97c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e980     40 00 90 5D |  if_ne	jmp	#LR__1252
0e984     00 12 06 F6 | 	mov	arg01, #0
0e988     D8 A5 B0 FD | 	call	#__system___getiolock_0306
0e98c     FD 12 02 F6 | 	mov	arg01, result1
0e990     EC 50 B0 FD | 	call	#__system___lockmem
0e994     00 12 06 F6 | 	mov	arg01, #0
0e998     0F 15 02 F6 | 	mov	arg02, local01
0e99c     00 16 06 F6 | 	mov	arg03, #0
0e9a0     0A 18 06 F6 | 	mov	arg04, #10
0e9a4     28 5D B0 FD | 	call	#__system___basic_print_integer
0e9a8     00 12 06 F6 | 	mov	arg01, #0
0e9ac     0A 14 06 F6 | 	mov	arg02, #10
0e9b0     00 16 06 F6 | 	mov	arg03, #0
0e9b4     7C 5C B0 FD | 	call	#__system___basic_print_char
0e9b8     00 12 06 F6 | 	mov	arg01, #0
0e9bc     A4 A5 B0 FD | 	call	#__system___getiolock_0306
0e9c0     FD 00 68 FC | 	wrlong	#0, result1
0e9c4                 | LR__1252
0e9c4                 | '   if t1.result_type=result_uint then print t1.result.uresult
0e9c4     1D 22 0E F2 | 	cmp	local03, #29 wz
0e9c8     40 00 90 5D |  if_ne	jmp	#LR__1253
0e9cc     00 12 06 F6 | 	mov	arg01, #0
0e9d0     90 A5 B0 FD | 	call	#__system___getiolock_0306
0e9d4     FD 12 02 F6 | 	mov	arg01, result1
0e9d8     A4 50 B0 FD | 	call	#__system___lockmem
0e9dc     00 12 06 F6 | 	mov	arg01, #0
0e9e0     0F 15 02 F6 | 	mov	arg02, local01
0e9e4     00 16 06 F6 | 	mov	arg03, #0
0e9e8     0A 18 06 F6 | 	mov	arg04, #10
0e9ec     20 5D B0 FD | 	call	#__system___basic_print_unsigned
0e9f0     00 12 06 F6 | 	mov	arg01, #0
0e9f4     0A 14 06 F6 | 	mov	arg02, #10
0e9f8     00 16 06 F6 | 	mov	arg03, #0
0e9fc     34 5C B0 FD | 	call	#__system___basic_print_char
0ea00     00 12 06 F6 | 	mov	arg01, #0
0ea04     5C A5 B0 FD | 	call	#__system___getiolock_0306
0ea08     FD 00 68 FC | 	wrlong	#0, result1
0ea0c                 | LR__1253
0ea0c                 | '   if t1.result_type=result_float then print t1.result.fresult
0ea0c     1E 22 0E F2 | 	cmp	local03, #30 wz
0ea10     40 00 90 5D |  if_ne	jmp	#LR__1254
0ea14     00 12 06 F6 | 	mov	arg01, #0
0ea18     48 A5 B0 FD | 	call	#__system___getiolock_0306
0ea1c     FD 12 02 F6 | 	mov	arg01, result1
0ea20     5C 50 B0 FD | 	call	#__system___lockmem
0ea24     00 12 06 F6 | 	mov	arg01, #0
0ea28     0F 15 02 F6 | 	mov	arg02, local01
0ea2c     00 16 06 F6 | 	mov	arg03, #0
0ea30     23 18 06 F6 | 	mov	arg04, #35
0ea34     AC 7F B0 FD | 	call	#__system___basic_print_float
0ea38     00 12 06 F6 | 	mov	arg01, #0
0ea3c     0A 14 06 F6 | 	mov	arg02, #10
0ea40     00 16 06 F6 | 	mov	arg03, #0
0ea44     EC 5B B0 FD | 	call	#__system___basic_print_char
0ea48     00 12 06 F6 | 	mov	arg01, #0
0ea4c     14 A5 B0 FD | 	call	#__system___getiolock_0306
0ea50     FD 00 68 FC | 	wrlong	#0, result1
0ea54                 | LR__1254
0ea54                 | '   if t1.result_type=result_string then print t1.result.sresult
0ea54     1F 22 0E F2 | 	cmp	local03, #31 wz
0ea58     3C 00 90 5D |  if_ne	jmp	#LR__1255
0ea5c     00 12 06 F6 | 	mov	arg01, #0
0ea60     00 A5 B0 FD | 	call	#__system___getiolock_0306
0ea64     FD 12 02 F6 | 	mov	arg01, result1
0ea68     14 50 B0 FD | 	call	#__system___lockmem
0ea6c     00 12 06 F6 | 	mov	arg01, #0
0ea70     0F 15 02 F6 | 	mov	arg02, local01
0ea74     00 16 06 F6 | 	mov	arg03, #0
0ea78     10 5C B0 FD | 	call	#__system___basic_print_string
0ea7c     00 12 06 F6 | 	mov	arg01, #0
0ea80     0A 14 06 F6 | 	mov	arg02, #10
0ea84     00 16 06 F6 | 	mov	arg03, #0
0ea88     A8 5B B0 FD | 	call	#__system___basic_print_char
0ea8c     00 12 06 F6 | 	mov	arg01, #0
0ea90     D0 A4 B0 FD | 	call	#__system___getiolock_0306
0ea94     FD 00 68 FC | 	wrlong	#0, result1
0ea98                 | LR__1255
0ea98                 | LR__1256
0ea98                 | ' if r=print_mod_empty then print
0ea98     20 24 0E F2 | 	cmp	local04, #32 wz
0ea9c     2C 00 90 5D |  if_ne	jmp	#LR__1257
0eaa0     00 12 06 F6 | 	mov	arg01, #0
0eaa4     BC A4 B0 FD | 	call	#__system___getiolock_0306
0eaa8     FD 12 02 F6 | 	mov	arg01, result1
0eaac     D0 4F B0 FD | 	call	#__system___lockmem
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     0A 14 06 F6 | 	mov	arg02, #10
0eab8     00 16 06 F6 | 	mov	arg03, #0
0eabc     74 5B B0 FD | 	call	#__system___basic_print_char
0eac0     00 12 06 F6 | 	mov	arg01, #0
0eac4     9C A4 B0 FD | 	call	#__system___getiolock_0306
0eac8     FD 00 68 FC | 	wrlong	#0, result1
0eacc                 | LR__1257
0eacc                 | LR__1258
0eacc     A7 F0 03 F6 | 	mov	ptra, fp
0ead0     B2 00 A0 FD | 	call	#popregs_
0ead4                 | _do_print_ret
0ead4     2D 00 64 FD | 	ret
0ead8                 | 
0ead8                 | ' 
0ead8                 | ' 
0ead8                 | ' sub do_paper
0ead8                 | _do_paper
0ead8     03 4A 05 F6 | 	mov	COUNT_, #3
0eadc     A8 00 A0 FD | 	call	#pushregs_
0eae0     3C 95 BF FD | 	call	#_pop
0eae4     FD 1E 02 F6 | 	mov	local01, result1
0eae8     FE 20 02 F6 | 	mov	local02, result2
0eaec     FF 22 02 F6 | 	mov	local03, result3
0eaf0                 | ' t1=pop() 
0eaf0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0eaf0     1E 22 0E F2 | 	cmp	local03, #30 wz
0eaf4     10 00 90 5D |  if_ne	jmp	#LR__1260
0eaf8     0F 13 02 F6 | 	mov	arg01, local01
0eafc     00 14 06 F6 | 	mov	arg02, #0
0eb00     90 7D B0 FD | 	call	#__system___float_tointeger
0eb04     FD 1E 02 F6 | 	mov	local01, result1
0eb08                 | LR__1260
0eb08                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0eb08     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb0c     18 00 90 5D |  if_ne	jmp	#LR__1261
0eb10     0F 13 02 F6 | 	mov	arg01, local01
0eb14     9C 80 B0 FD | 	call	#__system____builtin_atof
0eb18     FD 12 02 F6 | 	mov	arg01, result1
0eb1c     00 14 06 F6 | 	mov	arg02, #0
0eb20     70 7D B0 FD | 	call	#__system___float_tointeger
0eb24     FD 1E 02 F6 | 	mov	local01, result1
0eb28                 | LR__1261
0eb28     2D 00 00 FF 
0eb2c     FC E5 05 F1 | 	add	objptr, ##23548
0eb30     F2 1E 62 FC | 	wrlong	local01, objptr
0eb34     04 E4 05 F1 | 	add	objptr, #4
0eb38     F2 12 02 FB | 	rdlong	arg01, objptr
0eb3c                 | ' 
0eb3c                 | ' write_color:=ff
0eb3c     2D 00 00 FF 
0eb40     C3 E5 85 F1 | 	sub	objptr, ##23491
0eb44     F2 12 62 FC | 	wrlong	arg01, objptr
0eb48                 | ' write_background:=bb
0eb48     04 E4 05 F1 | 	add	objptr, #4
0eb4c     F2 1E 62 FC | 	wrlong	local01, objptr
0eb50     41 E4 85 F1 | 	sub	objptr, #65
0eb54     A7 F0 03 F6 | 	mov	ptra, fp
0eb58     B2 00 A0 FD | 	call	#popregs_
0eb5c                 | _do_paper_ret
0eb5c     2D 00 64 FD | 	ret
0eb60                 | 
0eb60                 | ' 
0eb60                 | ' sub do_ink
0eb60                 | _do_ink
0eb60     03 4A 05 F6 | 	mov	COUNT_, #3
0eb64     A8 00 A0 FD | 	call	#pushregs_
0eb68     B4 94 BF FD | 	call	#_pop
0eb6c     FD 1E 02 F6 | 	mov	local01, result1
0eb70     FE 20 02 F6 | 	mov	local02, result2
0eb74     FF 22 02 F6 | 	mov	local03, result3
0eb78                 | ' t1=pop() 
0eb78                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0eb78     1E 22 0E F2 | 	cmp	local03, #30 wz
0eb7c     10 00 90 5D |  if_ne	jmp	#LR__1270
0eb80     0F 13 02 F6 | 	mov	arg01, local01
0eb84     00 14 06 F6 | 	mov	arg02, #0
0eb88     08 7D B0 FD | 	call	#__system___float_tointeger
0eb8c     FD 1E 02 F6 | 	mov	local01, result1
0eb90                 | LR__1270
0eb90                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0eb90     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb94     18 00 90 5D |  if_ne	jmp	#LR__1271
0eb98     0F 13 02 F6 | 	mov	arg01, local01
0eb9c     14 80 B0 FD | 	call	#__system____builtin_atof
0eba0     FD 12 02 F6 | 	mov	arg01, result1
0eba4     00 14 06 F6 | 	mov	arg02, #0
0eba8     E8 7C B0 FD | 	call	#__system___float_tointeger
0ebac     FD 1E 02 F6 | 	mov	local01, result1
0ebb0                 | LR__1271
0ebb0     2E 00 00 FF 
0ebb4     00 E4 05 F1 | 	add	objptr, ##23552
0ebb8     F2 1E 62 FC | 	wrlong	local01, objptr
0ebbc     04 E4 85 F1 | 	sub	objptr, #4
0ebc0     F2 14 02 FB | 	rdlong	arg02, objptr
0ebc4                 | ' 
0ebc4                 | ' write_color:=ff
0ebc4     2D 00 00 FF 
0ebc8     BF E5 85 F1 | 	sub	objptr, ##23487
0ebcc     F2 1E 62 FC | 	wrlong	local01, objptr
0ebd0                 | ' write_background:=bb
0ebd0     04 E4 05 F1 | 	add	objptr, #4
0ebd4     F2 14 62 FC | 	wrlong	arg02, objptr
0ebd8     2D 00 00 FF 
0ebdc     BF E5 05 F1 | 	add	objptr, ##23487
0ebe0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebe4     2E 00 00 FF 
0ebe8     00 E4 85 F1 | 	sub	objptr, ##23552
0ebec     5C 2B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
0ebf0     A7 F0 03 F6 | 	mov	ptra, fp
0ebf4     B2 00 A0 FD | 	call	#popregs_
0ebf8                 | _do_ink_ret
0ebf8     2D 00 64 FD | 	ret
0ebfc                 | 
0ebfc                 | ' 
0ebfc                 | ' 
0ebfc                 | ' sub do_font
0ebfc                 | _do_font
0ebfc     03 4A 05 F6 | 	mov	COUNT_, #3
0ec00     A8 00 A0 FD | 	call	#pushregs_
0ec04     18 94 BF FD | 	call	#_pop
0ec08     FD 1E 02 F6 | 	mov	local01, result1
0ec0c     FE 20 02 F6 | 	mov	local02, result2
0ec10     FF 22 02 F6 | 	mov	local03, result3
0ec14                 | ' t1=pop() 
0ec14                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0ec14     1E 22 0E F2 | 	cmp	local03, #30 wz
0ec18     10 00 90 5D |  if_ne	jmp	#LR__1280
0ec1c     0F 13 02 F6 | 	mov	arg01, local01
0ec20     00 14 06 F6 | 	mov	arg02, #0
0ec24     6C 7C B0 FD | 	call	#__system___float_tointeger
0ec28     FD 1E 02 F6 | 	mov	local01, result1
0ec2c                 | LR__1280
0ec2c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0ec2c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ec30     18 00 90 5D |  if_ne	jmp	#LR__1281
0ec34     0F 13 02 F6 | 	mov	arg01, local01
0ec38     78 7F B0 FD | 	call	#__system____builtin_atof
0ec3c     FD 12 02 F6 | 	mov	arg01, result1
0ec40     00 14 06 F6 | 	mov	arg02, #0
0ec44     4C 7C B0 FD | 	call	#__system___float_tointeger
0ec48     FD 1E 02 F6 | 	mov	local01, result1
0ec4c                 | LR__1281
0ec4c     2E 00 00 FF 
0ec50     04 E4 05 F1 | 	add	objptr, ##23556
0ec54     F2 1E 62 FC | 	wrlong	local01, objptr
0ec58     2E 00 00 FF 
0ec5c     04 E4 85 F1 | 	sub	objptr, ##23556
0ec60     02 1E 66 F0 | 	shl	local01, #2
0ec64     0F 13 02 F6 | 	mov	arg01, local01
0ec68     4C 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ec6c     A7 F0 03 F6 | 	mov	ptra, fp
0ec70     B2 00 A0 FD | 	call	#popregs_
0ec74                 | _do_font_ret
0ec74     2D 00 64 FD | 	ret
0ec78                 | 
0ec78                 | ' 
0ec78                 | ' sub do_mode
0ec78                 | _do_mode
0ec78     04 4A 05 F6 | 	mov	COUNT_, #4
0ec7c     A8 00 A0 FD | 	call	#pushregs_
0ec80     9C 93 BF FD | 	call	#_pop
0ec84     FD 1E 02 F6 | 	mov	local01, result1
0ec88     FE 20 02 F6 | 	mov	local02, result2
0ec8c     FF 22 02 F6 | 	mov	local03, result3
0ec90                 | ' t1=pop() 
0ec90                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0ec90     1E 22 0E F2 | 	cmp	local03, #30 wz
0ec94     10 00 90 5D |  if_ne	jmp	#LR__1290
0ec98     0F 13 02 F6 | 	mov	arg01, local01
0ec9c     00 14 06 F6 | 	mov	arg02, #0
0eca0     F0 7B B0 FD | 	call	#__system___float_tointeger
0eca4     FD 1E 02 F6 | 	mov	local01, result1
0eca8                 | LR__1290
0eca8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0eca8     1F 22 0E F2 | 	cmp	local03, #31 wz
0ecac     18 00 90 5D |  if_ne	jmp	#LR__1291
0ecb0     0F 13 02 F6 | 	mov	arg01, local01
0ecb4     FC 7E B0 FD | 	call	#__system____builtin_atof
0ecb8     FD 12 02 F6 | 	mov	arg01, result1
0ecbc     00 14 06 F6 | 	mov	arg02, #0
0ecc0     D0 7B B0 FD | 	call	#__system___float_tointeger
0ecc4     FD 1E 02 F6 | 	mov	local01, result1
0ecc8                 | LR__1291
0ecc8                 | ' select case t1.result.iresult
0ecc8     0F 25 02 F6 | 	mov	local04, local01
0eccc     04 24 26 F3 | 	fle	local04, #4
0ecd0     30 24 62 FD | 	jmprel	local04
0ecd4                 | LR__1292
0ecd4     10 00 90 FD | 	jmp	#LR__1293
0ecd8     68 00 90 FD | 	jmp	#LR__1294
0ecdc     C0 00 90 FD | 	jmp	#LR__1295
0ece0     18 01 90 FD | 	jmp	#LR__1296
0ece4     6C 01 90 FD | 	jmp	#LR__1297
0ece8                 | LR__1293
0ece8     2E 00 00 FF 
0ecec     04 E4 05 F1 | 	add	objptr, ##23556
0ecf0     F2 02 68 FC | 	wrlong	#1, objptr
0ecf4     04 E4 85 F1 | 	sub	objptr, #4
0ecf8     F2 34 69 FC | 	wrlong	#154, objptr
0ecfc     04 E4 85 F1 | 	sub	objptr, #4
0ed00     F2 26 69 FC | 	wrlong	#147, objptr
0ed04     2D 00 00 FF 
0ed08     FC E5 85 F1 | 	sub	objptr, ##23548
0ed0c     04 12 06 F6 | 	mov	arg01, #4
0ed10     A4 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ed14     2E 00 00 FF 
0ed18     00 E4 05 F1 | 	add	objptr, ##23552
0ed1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ed20     04 E4 85 F1 | 	sub	objptr, #4
0ed24     F2 14 02 FB | 	rdlong	arg02, objptr
0ed28                 | ' 
0ed28                 | ' write_color:=ff
0ed28     2D 00 00 FF 
0ed2c     BF E5 85 F1 | 	sub	objptr, ##23487
0ed30     F2 12 62 FC | 	wrlong	arg01, objptr
0ed34                 | ' write_background:=bb
0ed34     04 E4 05 F1 | 	add	objptr, #4
0ed38     F2 14 62 FC | 	wrlong	arg02, objptr
0ed3c     41 E4 85 F1 | 	sub	objptr, #65
0ed40     10 01 90 FD | 	jmp	#LR__1297
0ed44                 | LR__1294
0ed44     2E 00 00 FF 
0ed48     04 E4 05 F1 | 	add	objptr, ##23556
0ed4c     F2 00 68 FC | 	wrlong	#0, objptr
0ed50     04 E4 85 F1 | 	sub	objptr, #4
0ed54     F2 2E 68 FC | 	wrlong	#23, objptr
0ed58     00 12 06 F6 | 	mov	arg01, #0
0ed5c     04 E4 85 F1 | 	sub	objptr, #4
0ed60     F2 00 68 FC | 	wrlong	#0, objptr
0ed64     2D 00 00 FF 
0ed68     FC E5 85 F1 | 	sub	objptr, ##23548
0ed6c     48 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ed70     2E 00 00 FF 
0ed74     00 E4 05 F1 | 	add	objptr, ##23552
0ed78     F2 12 02 FB | 	rdlong	arg01, objptr
0ed7c     04 E4 85 F1 | 	sub	objptr, #4
0ed80     F2 14 02 FB | 	rdlong	arg02, objptr
0ed84                 | ' 
0ed84                 | ' write_color:=ff
0ed84     2D 00 00 FF 
0ed88     BF E5 85 F1 | 	sub	objptr, ##23487
0ed8c     F2 12 62 FC | 	wrlong	arg01, objptr
0ed90                 | ' write_background:=bb
0ed90     04 E4 05 F1 | 	add	objptr, #4
0ed94     F2 14 62 FC | 	wrlong	arg02, objptr
0ed98     41 E4 85 F1 | 	sub	objptr, #65
0ed9c     B4 00 90 FD | 	jmp	#LR__1297
0eda0                 | LR__1295
0eda0     2E 00 00 FF 
0eda4     04 E4 05 F1 | 	add	objptr, ##23556
0eda8     F2 00 68 FC | 	wrlong	#0, objptr
0edac     04 E4 85 F1 | 	sub	objptr, #4
0edb0     F2 6A 69 FC | 	wrlong	#181, objptr
0edb4     00 12 06 F6 | 	mov	arg01, #0
0edb8     04 E4 85 F1 | 	sub	objptr, #4
0edbc     F2 00 68 FC | 	wrlong	#0, objptr
0edc0     2D 00 00 FF 
0edc4     FC E5 85 F1 | 	sub	objptr, ##23548
0edc8     EC 38 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0edcc     2E 00 00 FF 
0edd0     00 E4 05 F1 | 	add	objptr, ##23552
0edd4     F2 12 02 FB | 	rdlong	arg01, objptr
0edd8     04 E4 85 F1 | 	sub	objptr, #4
0eddc     F2 14 02 FB | 	rdlong	arg02, objptr
0ede0                 | ' 
0ede0                 | ' write_color:=ff
0ede0     2D 00 00 FF 
0ede4     BF E5 85 F1 | 	sub	objptr, ##23487
0ede8     F2 12 62 FC | 	wrlong	arg01, objptr
0edec                 | ' write_background:=bb
0edec     04 E4 05 F1 | 	add	objptr, #4
0edf0     F2 14 62 FC | 	wrlong	arg02, objptr
0edf4     41 E4 85 F1 | 	sub	objptr, #65
0edf8     58 00 90 FD | 	jmp	#LR__1297
0edfc                 | LR__1296
0edfc     2E 00 00 FF 
0ee00     04 E4 05 F1 | 	add	objptr, ##23556
0ee04     F2 00 68 FC | 	wrlong	#0, objptr
0ee08     04 E4 85 F1 | 	sub	objptr, #4
0ee0c     F2 1E 68 FC | 	wrlong	#15, objptr
0ee10     00 12 06 F6 | 	mov	arg01, #0
0ee14     04 E4 85 F1 | 	sub	objptr, #4
0ee18     F2 00 68 FC | 	wrlong	#0, objptr
0ee1c     2D 00 00 FF 
0ee20     FC E5 85 F1 | 	sub	objptr, ##23548
0ee24     90 38 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ee28     2E 00 00 FF 
0ee2c     00 E4 05 F1 | 	add	objptr, ##23552
0ee30     F2 12 02 FB | 	rdlong	arg01, objptr
0ee34     04 E4 85 F1 | 	sub	objptr, #4
0ee38     F2 14 02 FB | 	rdlong	arg02, objptr
0ee3c                 | ' 
0ee3c                 | ' write_color:=ff
0ee3c     2D 00 00 FF 
0ee40     BF E5 85 F1 | 	sub	objptr, ##23487
0ee44     F2 12 62 FC | 	wrlong	arg01, objptr
0ee48                 | ' write_background:=bb
0ee48     04 E4 05 F1 | 	add	objptr, #4
0ee4c     F2 14 62 FC | 	wrlong	arg02, objptr
0ee50     41 E4 85 F1 | 	sub	objptr, #65
0ee54                 | LR__1297
0ee54     2E 00 00 FF 
0ee58     00 E4 05 F1 | 	add	objptr, ##23552
0ee5c     F2 12 02 FB | 	rdlong	arg01, objptr
0ee60     04 E4 85 F1 | 	sub	objptr, #4
0ee64     F2 14 02 FB | 	rdlong	arg02, objptr
0ee68     2D 00 00 FF 
0ee6c     FC E5 85 F1 | 	sub	objptr, ##23548
0ee70     2C 39 B0 FD | 	call	#_hg010b_spin2_cls
0ee74     18 01 00 FF 
0ee78     0B 13 06 F6 | 	mov	arg01, ##@LR__4220
0ee7c                 | ' 
0ee7c                 | ' write(text)
0ee7c     DC 3B B0 FD | 	call	#_hg010b_spin2_write
0ee80                 | ' crlf
0ee80     38 3D B0 FD | 	call	#_hg010b_spin2_crlf
0ee84     09 00 00 FF 
0ee88     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
0ee8c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
0ee90     09 00 00 FF 
0ee94     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
0ee98                 | ' 
0ee98                 | ' write(text)
0ee98     C0 3B B0 FD | 	call	#_hg010b_spin2_write
0ee9c                 | ' crlf
0ee9c     1C 3D B0 FD | 	call	#_hg010b_spin2_crlf
0eea0     50 00 00 FF 
0eea4     A0 E5 05 F1 | 	add	objptr, ##41376
0eea8     F2 12 02 FB | 	rdlong	arg01, objptr
0eeac     50 00 00 FF 
0eeb0     A0 E5 85 F1 | 	sub	objptr, ##41376
0eeb4                 | ' 
0eeb4                 | ' write(text)
0eeb4     A4 3B B0 FD | 	call	#_hg010b_spin2_write
0eeb8                 | ' crlf
0eeb8     00 3D B0 FD | 	call	#_hg010b_spin2_crlf
0eebc     A7 F0 03 F6 | 	mov	ptra, fp
0eec0     B2 00 A0 FD | 	call	#popregs_
0eec4                 | _do_mode_ret
0eec4     2D 00 64 FD | 	ret
0eec8                 | 
0eec8                 | ' 
0eec8                 | ' 
0eec8                 | ' 
0eec8                 | ' sub do_pinwrite
0eec8                 | _do_pinwrite
0eec8     54 91 BF FD | 	call	#_pop
0eecc     FD 14 02 F6 | 	mov	arg02, result1
0eed0     4C 91 BF FD | 	call	#_pop
0eed4     FD 12 02 F6 | 	mov	arg01, result1
0eed8     58 4D B0 FD | 	call	#__system___pinwrite
0eedc                 | _do_pinwrite_ret
0eedc     2D 00 64 FD | 	ret
0eee0                 | 
0eee0                 | ' 
0eee0                 | ' sub do_waitms
0eee0                 | _do_waitms
0eee0     01 4A 05 F6 | 	mov	COUNT_, #1
0eee4     A8 00 A0 FD | 	call	#pushregs_
0eee8     18 F0 07 F1 | 	add	ptra, #24
0eeec     30 91 BF FD | 	call	#_pop
0eef0     A7 FA 61 FC | 	wrlong	result1, fp
0eef4     04 4E 05 F1 | 	add	fp, #4
0eef8     A7 FC 61 FC | 	wrlong	result2, fp
0eefc     04 4E 05 F1 | 	add	fp, #4
0ef00     A7 FE 61 FC | 	wrlong	result3, fp
0ef04                 | ' 
0ef04                 | ' t1=pop() 'value
0ef04                 | ' 
0ef04                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
0ef04     08 4E 85 F1 | 	sub	fp, #8
0ef08     1C FE 0D F2 | 	cmp	result3, #28 wz
0ef0c     08 4E 05 51 |  if_ne	add	fp, #8
0ef10     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ef14     08 4E 85 51 |  if_ne	sub	fp, #8
0ef18     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
0ef1c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0ef20     0C 4E 05 A1 |  if_e	add	fp, #12
0ef24     A7 12 62 AC |  if_e	wrlong	arg01, fp
0ef28     0C 4E 85 A1 |  if_e	sub	fp, #12
0ef2c     14 00 90 AD |  if_e	jmp	#LR__1300
0ef30     A7 12 02 F6 | 	mov	arg01, fp
0ef34     B4 DC BF FD | 	call	#_converttoint
0ef38     0C 4E 05 F1 | 	add	fp, #12
0ef3c     A7 FA 61 FC | 	wrlong	result1, fp
0ef40     0C 4E 85 F1 | 	sub	fp, #12
0ef44                 | LR__1300
0ef44                 | ' if t<0 then return
0ef44     0C 4E 05 F1 | 	add	fp, #12
0ef48     A7 12 02 FB | 	rdlong	arg01, fp
0ef4c     0C 4E 85 F1 | 	sub	fp, #12
0ef50     00 12 56 F2 | 	cmps	arg01, #0 wc
0ef54     B8 00 90 CD |  if_b	jmp	#LR__1305
0ef58                 | ' if t < 5000 then 
0ef58     0C 4E 05 F1 | 	add	fp, #12
0ef5c     A7 12 02 FB | 	rdlong	arg01, fp
0ef60     0C 4E 85 F1 | 	sub	fp, #12
0ef64     09 00 00 FF 
0ef68     88 13 56 F2 | 	cmps	arg01, ##5000 wc
0ef6c     14 00 90 3D |  if_ae	jmp	#LR__1301
0ef70     0C 4E 05 F1 | 	add	fp, #12
0ef74     A7 12 02 FB | 	rdlong	arg01, fp
0ef78     0C 4E 85 F1 | 	sub	fp, #12
0ef7c     0C 4D B0 FD | 	call	#__system___waitms
0ef80     8C 00 90 FD | 	jmp	#LR__1304
0ef84                 | LR__1301
0ef84     10 4E 05 F1 | 	add	fp, #16
0ef88     A7 02 68 FC | 	wrlong	#1, fp
0ef8c     04 4E 85 F1 | 	sub	fp, #4
0ef90     A7 12 02 FB | 	rdlong	arg01, fp
0ef94     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef98     09 00 00 FF 
0ef9c     88 13 16 FD | 	qdiv	arg01, ##5000
0efa0                 | '   for i=1 to t/5000
0efa0     0C 4E 85 F1 | 	sub	fp, #12
0efa4     18 1E 62 FD | 	getqx	local01
0efa8     0F 1F 82 F6 | 	negc	local01, local01
0efac     01 1E 06 F1 | 	add	local01, #1
0efb0                 | LR__1302
0efb0     10 4E 05 F1 | 	add	fp, #16
0efb4     A7 12 02 FB | 	rdlong	arg01, fp
0efb8     10 4E 85 F1 | 	sub	fp, #16
0efbc     0F 13 52 F2 | 	cmps	arg01, local01 wc
0efc0     28 00 90 3D |  if_ae	jmp	#LR__1303
0efc4     0C 4E 05 F1 | 	add	fp, #12
0efc8     A7 12 02 FB | 	rdlong	arg01, fp
0efcc     0C 4E 85 F1 | 	sub	fp, #12
0efd0     B8 4C B0 FD | 	call	#__system___waitms
0efd4     10 4E 05 F1 | 	add	fp, #16
0efd8     A7 12 02 FB | 	rdlong	arg01, fp
0efdc     01 12 06 F1 | 	add	arg01, #1
0efe0     A7 12 62 FC | 	wrlong	arg01, fp
0efe4     10 4E 85 F1 | 	sub	fp, #16
0efe8     C4 FF 9F FD | 	jmp	#LR__1302
0efec                 | LR__1303
0efec     0C 4E 05 F1 | 	add	fp, #12
0eff0     A7 1E 02 FB | 	rdlong	local01, fp
0eff4     0F 1F 52 F6 | 	abs	local01, local01 wc
0eff8     09 00 00 FF 
0effc     88 1F 16 FD | 	qdiv	local01, ##5000
0f000     0C 4E 85 F1 | 	sub	fp, #12
0f004     19 1E 62 FD | 	getqy	local01
0f008     0F 13 82 F6 | 	negc	arg01, local01
0f00c     7C 4C B0 FD | 	call	#__system___waitms
0f010                 | LR__1304
0f010                 | LR__1305
0f010     A7 F0 03 F6 | 	mov	ptra, fp
0f014     B2 00 A0 FD | 	call	#popregs_
0f018                 | _do_waitms_ret
0f018     2D 00 64 FD | 	ret
0f01c                 | 
0f01c                 | ' 
0f01c                 | ' sub do_waitvbl
0f01c                 | _do_waitvbl
0f01c     01 12 06 F6 | 	mov	arg01, #1
0f020     0C 37 B0 FD | 	call	#_hg010b_spin2_waitvbl
0f024                 | _do_waitvbl_ret
0f024     2D 00 64 FD | 	ret
0f028                 | 
0f028                 | ' 
0f028                 | ' sub do_waitclock
0f028                 | _do_waitclock
0f028     52 00 00 FF 
0f02c     38 E4 05 F1 | 	add	objptr, ##42040
0f030     F2 00 02 FB | 	rdlong	_var01, objptr
0f034                 | ' c=hkcnt
0f034                 | ' do: loop until hkcnt<>c
0f034                 | LR__1310
0f034     F2 02 02 FB | 	rdlong	_var02, objptr
0f038     00 03 0A F2 | 	cmp	_var02, _var01 wz
0f03c     F4 FF 9F AD |  if_e	jmp	#LR__1310
0f040     52 00 00 FF 
0f044     38 E4 85 F1 | 	sub	objptr, ##42040
0f048                 | _do_waitclock_ret
0f048     2D 00 64 FD | 	ret
0f04c                 | 
0f04c                 | ' 
0f04c                 | ' sub do_dir
0f04c                 | _do_dir
0f04c     03 4A 05 F6 | 	mov	COUNT_, #3
0f050     A8 00 A0 FD | 	call	#pushregs_
0f054     18 01 00 FF 
0f058     0C 13 06 F6 | 	mov	arg01, ##@LR__4221
0f05c     C4 4F B0 FD | 	call	#__system___chdir
0f060                 | ' chdir("/sd/bas")       ' set working directory
0f060                 | ' print "Working directory: "; currentdir$ 
0f060     00 12 06 F6 | 	mov	arg01, #0
0f064     FC 9E B0 FD | 	call	#__system___getiolock_0306
0f068     FD 12 02 F6 | 	mov	arg01, result1
0f06c     10 4A B0 FD | 	call	#__system___lockmem
0f070     18 01 00 FF 
0f074     14 15 06 F6 | 	mov	arg02, ##@LR__4222
0f078     00 12 06 F6 | 	mov	arg01, #0
0f07c     00 16 06 F6 | 	mov	arg03, #0
0f080     08 56 B0 FD | 	call	#__system___basic_print_string
0f084     49 00 00 FF 
0f088     58 E4 05 F1 | 	add	objptr, ##37464
0f08c     F2 14 02 FB | 	rdlong	arg02, objptr
0f090     49 00 00 FF 
0f094     58 E4 85 F1 | 	sub	objptr, ##37464
0f098     00 12 06 F6 | 	mov	arg01, #0
0f09c     00 16 06 F6 | 	mov	arg03, #0
0f0a0     E8 55 B0 FD | 	call	#__system___basic_print_string
0f0a4     00 12 06 F6 | 	mov	arg01, #0
0f0a8     0A 14 06 F6 | 	mov	arg02, #10
0f0ac     00 16 06 F6 | 	mov	arg03, #0
0f0b0     80 55 B0 FD | 	call	#__system___basic_print_char
0f0b4     00 12 06 F6 | 	mov	arg01, #0
0f0b8     A8 9E B0 FD | 	call	#__system___getiolock_0306
0f0bc     FD 00 68 FC | 	wrlong	#0, result1
0f0c0     18 01 00 FF 
0f0c4     28 13 06 F6 | 	mov	arg01, ##@LR__4223
0f0c8     10 14 06 F6 | 	mov	arg02, #16
0f0cc     CC 9F B0 FD | 	call	#__system___basic_dir
0f0d0     FD 1E 02 F6 | 	mov	local01, result1
0f0d4                 | ' 
0f0d4                 | ' filename=dir$("*", fbDirectory)
0f0d4                 | ' while filename <> "" and filename <> nil
0f0d4                 | LR__1320
0f0d4     00 20 06 F6 | 	mov	local02, #0
0f0d8     18 01 00 FF 
0f0dc     2A 15 06 F6 | 	mov	arg02, ##@LR__4224
0f0e0     0F 13 02 F6 | 	mov	arg01, local01
0f0e4     C0 49 B0 FD | 	call	#__system___string_cmp
0f0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0ec     00 20 26 56 |  if_ne	not	local02, #0
0f0f0     00 22 06 F6 | 	mov	local03, #0
0f0f4     0F 13 02 F6 | 	mov	arg01, local01
0f0f8     00 14 06 F6 | 	mov	arg02, #0
0f0fc     A8 49 B0 FD | 	call	#__system___string_cmp
0f100     00 FA 0D F2 | 	cmp	result1, #0 wz
0f104     00 22 26 56 |  if_ne	not	local03, #0
0f108     11 21 CA F7 | 	test	local02, local03 wz
0f10c     64 00 90 AD |  if_e	jmp	#LR__1321
0f110                 | '   print "[dir] ";filename
0f110     00 12 06 F6 | 	mov	arg01, #0
0f114     4C 9E B0 FD | 	call	#__system___getiolock_0306
0f118     FD 12 02 F6 | 	mov	arg01, result1
0f11c     60 49 B0 FD | 	call	#__system___lockmem
0f120     18 01 00 FF 
0f124     2B 15 06 F6 | 	mov	arg02, ##@LR__4225
0f128     00 12 06 F6 | 	mov	arg01, #0
0f12c     00 16 06 F6 | 	mov	arg03, #0
0f130     58 55 B0 FD | 	call	#__system___basic_print_string
0f134     00 12 06 F6 | 	mov	arg01, #0
0f138     0F 15 02 F6 | 	mov	arg02, local01
0f13c     00 16 06 F6 | 	mov	arg03, #0
0f140     48 55 B0 FD | 	call	#__system___basic_print_string
0f144     00 12 06 F6 | 	mov	arg01, #0
0f148     0A 14 06 F6 | 	mov	arg02, #10
0f14c     00 16 06 F6 | 	mov	arg03, #0
0f150     E0 54 B0 FD | 	call	#__system___basic_print_char
0f154     00 12 06 F6 | 	mov	arg01, #0
0f158     08 9E B0 FD | 	call	#__system___getiolock_0306
0f15c     FD 00 68 FC | 	wrlong	#0, result1
0f160     00 12 06 F6 | 	mov	arg01, #0
0f164     00 14 06 F6 | 	mov	arg02, #0
0f168     30 9F B0 FD | 	call	#__system___basic_dir
0f16c     FD 1E 02 F6 | 	mov	local01, result1
0f170     60 FF 9F FD | 	jmp	#LR__1320
0f174                 | LR__1321
0f174     18 01 00 FF 
0f178     32 13 06 F6 | 	mov	arg01, ##@LR__4226
0f17c     21 14 06 F6 | 	mov	arg02, #33
0f180     18 9F B0 FD | 	call	#__system___basic_dir
0f184     FD 1E 02 F6 | 	mov	local01, result1
0f188                 | ' 
0f188                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
0f188                 | ' do while filename <> "" and filename <> nil
0f188                 | LR__1322
0f188     00 20 06 F6 | 	mov	local02, #0
0f18c     18 01 00 FF 
0f190     34 15 06 F6 | 	mov	arg02, ##@LR__4227
0f194     0F 13 02 F6 | 	mov	arg01, local01
0f198     0C 49 B0 FD | 	call	#__system___string_cmp
0f19c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1a0     00 20 26 56 |  if_ne	not	local02, #0
0f1a4     00 22 06 F6 | 	mov	local03, #0
0f1a8     0F 13 02 F6 | 	mov	arg01, local01
0f1ac     00 14 06 F6 | 	mov	arg02, #0
0f1b0     F4 48 B0 FD | 	call	#__system___string_cmp
0f1b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1b8     00 22 26 56 |  if_ne	not	local03, #0
0f1bc     11 21 CA F7 | 	test	local02, local03 wz
0f1c0     54 01 90 AD |  if_e	jmp	#LR__1326
0f1c4                 | '   print filename
0f1c4     00 12 06 F6 | 	mov	arg01, #0
0f1c8     98 9D B0 FD | 	call	#__system___getiolock_0306
0f1cc     FD 12 02 F6 | 	mov	arg01, result1
0f1d0     AC 48 B0 FD | 	call	#__system___lockmem
0f1d4     00 12 06 F6 | 	mov	arg01, #0
0f1d8     0F 15 02 F6 | 	mov	arg02, local01
0f1dc     00 16 06 F6 | 	mov	arg03, #0
0f1e0     A8 54 B0 FD | 	call	#__system___basic_print_string
0f1e4     00 12 06 F6 | 	mov	arg01, #0
0f1e8     0A 14 06 F6 | 	mov	arg02, #10
0f1ec     00 16 06 F6 | 	mov	arg03, #0
0f1f0     40 54 B0 FD | 	call	#__system___basic_print_char
0f1f4     00 12 06 F6 | 	mov	arg01, #0
0f1f8     68 9D B0 FD | 	call	#__system___getiolock_0306
0f1fc     FD 00 68 FC | 	wrlong	#0, result1
0f200     00 12 06 F6 | 	mov	arg01, #0
0f204     00 14 06 F6 | 	mov	arg02, #0
0f208     90 9E B0 FD | 	call	#__system___basic_dir
0f20c     FD 1E 02 F6 | 	mov	local01, result1
0f210                 | '   filename = dir$()      ' continue scan
0f210                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
0f210                 | ' return cursor_y
0f210     3A E4 05 F1 | 	add	objptr, #58
0f214     F2 FA C1 FA | 	rdbyte	result1, objptr
0f218     3A E4 85 F1 | 	sub	objptr, #58
0f21c     22 FA 0D F2 | 	cmp	result1, #34 wz
0f220     64 FF 9F 5D |  if_ne	jmp	#LR__1322
0f224                 | '     print "-----more, press any key";
0f224     00 12 06 F6 | 	mov	arg01, #0
0f228     38 9D B0 FD | 	call	#__system___getiolock_0306
0f22c     FD 12 02 F6 | 	mov	arg01, result1
0f230     4C 48 B0 FD | 	call	#__system___lockmem
0f234     18 01 00 FF 
0f238     35 15 06 F6 | 	mov	arg02, ##@LR__4228
0f23c     00 12 06 F6 | 	mov	arg01, #0
0f240     00 16 06 F6 | 	mov	arg03, #0
0f244     44 54 B0 FD | 	call	#__system___basic_print_string
0f248     00 12 06 F6 | 	mov	arg01, #0
0f24c     14 9D B0 FD | 	call	#__system___getiolock_0306
0f250     FD 00 68 FC | 	wrlong	#0, result1
0f254                 | '     do 
0f254                 | LR__1323
0f254     CC 40 B0 FD | 	call	#_usbnew_spin2_get_key
0f258     00 FA 0D F2 | 	cmp	result1, #0 wz
0f25c     F4 FF 9F 5D |  if_ne	jmp	#LR__1323
0f260                 | '     do
0f260                 | LR__1324
0f260     C0 40 B0 FD | 	call	#_usbnew_spin2_get_key
0f264     00 FA 0D F2 | 	cmp	result1, #0 wz
0f268     F4 FF 9F AD |  if_e	jmp	#LR__1324
0f26c                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
0f26c     50 00 00 FF 
0f270     A4 E5 05 F1 | 	add	objptr, ##41380
0f274     F2 20 02 FB | 	rdlong	local02, objptr
0f278     50 00 00 FF 
0f27c     A4 E5 85 F1 | 	sub	objptr, ##41380
0f280     01 20 0E F2 | 	cmp	local02, #1 wz
0f284     44 00 90 5D |  if_ne	jmp	#LR__1325
0f288     01 00 00 FF 
0f28c     00 EA 05 F1 | 	add	ptr__dat__, ##512
0f290     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0f294     01 00 00 FF 
0f298     00 EA 85 F1 | 	sub	ptr__dat__, ##512
0f29c     07 12 06 F6 | 	mov	arg01, #7
0f2a0     56 00 00 FF 
0f2a4     44 16 06 F6 | 	mov	arg03, ##44100
0f2a8     0E 18 C6 F9 | 	decod	arg04, #14
0f2ac     03 00 00 FF 
0f2b0     94 1A 06 F6 | 	mov	arg05, ##1684
0f2b4     01 1C 66 F6 | 	neg	arg06, #1
0f2b8     0B 00 00 FF 
0f2bc     C0 E4 05 F1 | 	add	objptr, ##5824
0f2c0     88 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0f2c4     0B 00 00 FF 
0f2c8     C0 E4 85 F1 | 	sub	objptr, ##5824
0f2cc                 | LR__1325
0f2cc     00 12 06 F6 | 	mov	arg01, #0
0f2d0     23 14 06 F6 | 	mov	arg02, #35
0f2d4     20 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
0f2d8                 | '     position 0,35: print "                             ";: position 4,35  
0f2d8     00 12 06 F6 | 	mov	arg01, #0
0f2dc     84 9C B0 FD | 	call	#__system___getiolock_0306
0f2e0     FD 12 02 F6 | 	mov	arg01, result1
0f2e4     98 47 B0 FD | 	call	#__system___lockmem
0f2e8     18 01 00 FF 
0f2ec     4E 15 06 F6 | 	mov	arg02, ##@LR__4229
0f2f0     00 12 06 F6 | 	mov	arg01, #0
0f2f4     00 16 06 F6 | 	mov	arg03, #0
0f2f8     90 53 B0 FD | 	call	#__system___basic_print_string
0f2fc     00 12 06 F6 | 	mov	arg01, #0
0f300     60 9C B0 FD | 	call	#__system___getiolock_0306
0f304     FD 00 68 FC | 	wrlong	#0, result1
0f308     04 12 06 F6 | 	mov	arg01, #4
0f30c     23 14 06 F6 | 	mov	arg02, #35
0f310     E4 33 B0 FD | 	call	#_hg010b_spin2_setcursorpos
0f314     70 FE 9F FD | 	jmp	#LR__1322
0f318                 | LR__1326
0f318     A7 F0 03 F6 | 	mov	ptra, fp
0f31c     B2 00 A0 FD | 	call	#popregs_
0f320                 | _do_dir_ret
0f320     2D 00 64 FD | 	ret
0f324                 | 
0f324                 | ' 
0f324                 | ' sub do_if
0f324                 | _do_if
0f324     05 4A 05 F6 | 	mov	COUNT_, #5
0f328     A8 00 A0 FD | 	call	#pushregs_
0f32c     F0 8C BF FD | 	call	#_pop
0f330     FD 1E 0A F6 | 	mov	local01, result1 wz
0f334     FE 20 02 F6 | 	mov	local02, result2
0f338     FF 22 02 F6 | 	mov	local03, result3
0f33c                 | ' t1=pop()
0f33c                 | ' ' if uresult=0, jump over else
0f33c                 | ' if t1.result.uresult = 0 then 
0f33c     BC 00 90 5D |  if_ne	jmp	#LR__1332
0f340                 | '   for i=lineptr_e to lineptr-1
0f340     41 00 00 FF 
0f344     44 E4 05 F1 | 	add	objptr, ##33348
0f348     F2 24 02 FB | 	rdlong	local04, objptr
0f34c     04 E4 85 F1 | 	sub	objptr, #4
0f350     F2 26 02 FB | 	rdlong	local05, objptr
0f354     41 00 00 FF 
0f358     40 E4 85 F1 | 	sub	objptr, ##33344
0f35c                 | LR__1330
0f35c     13 25 52 F2 | 	cmps	local04, local05 wc
0f360     78 00 90 3D |  if_ae	jmp	#LR__1331
0f364     12 FF 01 F6 | 	mov	result3, local04
0f368     01 FE 65 F0 | 	shl	result3, #1
0f36c     12 FF 01 F1 | 	add	result3, local04
0f370     02 FE 65 F0 | 	shl	result3, #2
0f374     3E 00 00 FF 
0f378     40 E4 05 F1 | 	add	objptr, ##31808
0f37c     F2 FE 01 F1 | 	add	result3, objptr
0f380     FF 1E 02 FB | 	rdlong	local01, result3
0f384     04 FE 05 F1 | 	add	result3, #4
0f388     FF FC 01 FB | 	rdlong	result2, result3
0f38c     12 FF 01 F6 | 	mov	result3, local04
0f390     01 FE 65 F0 | 	shl	result3, #1
0f394     12 FF 01 F1 | 	add	result3, local04
0f398     02 FE 65 F0 | 	shl	result3, #2
0f39c     F2 FE 01 F1 | 	add	result3, objptr
0f3a0     08 FE 05 F1 | 	add	result3, #8
0f3a4     FF FE 01 FB | 	rdlong	result3, result3
0f3a8     FE 20 02 F6 | 	mov	local02, result2
0f3ac     FF 22 02 F6 | 	mov	local03, result3
0f3b0                 | '     t1=compiledline(i)
0f3b0                 | '     if t1.result_type=token_else then lineptr_e=i : return
0f3b0     5A 22 0E F2 | 	cmp	local03, #90 wz
0f3b4     3E 00 00 FF 
0f3b8     40 E4 85 F1 | 	sub	objptr, ##31808
0f3bc     41 00 00 AF 
0f3c0     44 E4 05 A1 |  if_e	add	objptr, ##33348
0f3c4     F2 24 62 AC |  if_e	wrlong	local04, objptr
0f3c8     41 00 00 AF 
0f3cc     44 E4 85 A1 |  if_e	sub	objptr, ##33348
0f3d0     28 00 90 AD |  if_e	jmp	#LR__1333
0f3d4     01 24 06 F1 | 	add	local04, #1
0f3d8     80 FF 9F FD | 	jmp	#LR__1330
0f3dc                 | LR__1331
0f3dc     41 00 00 FF 
0f3e0     40 E4 05 F1 | 	add	objptr, ##33344
0f3e4     F2 26 02 FB | 	rdlong	local05, objptr
0f3e8     01 26 86 F1 | 	sub	local05, #1
0f3ec     04 E4 05 F1 | 	add	objptr, #4
0f3f0     F2 26 62 FC | 	wrlong	local05, objptr
0f3f4     41 00 00 FF 
0f3f8     44 E4 85 F1 | 	sub	objptr, ##33348
0f3fc                 | LR__1332
0f3fc                 | LR__1333
0f3fc     A7 F0 03 F6 | 	mov	ptra, fp
0f400     B2 00 A0 FD | 	call	#popregs_
0f404                 | _do_if_ret
0f404     2D 00 64 FD | 	ret
0f408                 | 
0f408                 | ' 
0f408                 | ' sub do_else
0f408                 | _do_else
0f408     41 00 00 FF 
0f40c     40 E4 05 F1 | 	add	objptr, ##33344
0f410     F2 00 02 FB | 	rdlong	_var01, objptr
0f414     01 00 86 F1 | 	sub	_var01, #1
0f418     04 E4 05 F1 | 	add	objptr, #4
0f41c     F2 00 62 FC | 	wrlong	_var01, objptr
0f420     41 00 00 FF 
0f424     44 E4 85 F1 | 	sub	objptr, ##33348
0f428                 | _do_else_ret
0f428     2D 00 64 FD | 	ret
0f42c                 | 
0f42c                 | ' 
0f42c                 | ' 
0f42c                 | ' 
0f42c                 | ' sub do_nothing
0f42c                 | _do_nothing
0f42c                 | _do_nothing_ret
0f42c     2D 00 64 FD | 	ret
0f430                 | 
0f430                 | ' 
0f430                 | ' sub do_brun
0f430                 | _do_brun
0f430     08 4A 05 F6 | 	mov	COUNT_, #8
0f434     A8 00 A0 FD | 	call	#pushregs_
0f438     E4 8B BF FD | 	call	#_pop
0f43c     FF 1A 02 F6 | 	mov	arg05, result3
0f440     FD 1E 02 F6 | 	mov	local01, result1
0f444     FE 20 02 F6 | 	mov	local02, result2
0f448     0D 23 02 F6 | 	mov	local03, arg05
0f44c                 | ' 
0f44c                 | ' t1=pop() 
0f44c                 | ' if t1.result_type=result_string then
0f44c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f450     EC 01 90 5D |  if_ne	jmp	#LR__1343
0f454     0F 25 02 F6 | 	mov	local04, local01
0f458                 | '   filename=t1.result.sresult
0f458                 | '   if left$(filename,1)="/" then 
0f458     12 13 02 F6 | 	mov	arg01, local04
0f45c     01 14 06 F6 | 	mov	arg02, #1
0f460     64 65 B0 FD | 	call	#__system__Left_S
0f464     FD 12 02 F6 | 	mov	arg01, result1
0f468     18 01 00 FF 
0f46c     6C 15 06 F6 | 	mov	arg02, ##@LR__4230
0f470     34 46 B0 FD | 	call	#__system___string_cmp
0f474     00 FA 0D F2 | 	cmp	result1, #0 wz
0f478     12 27 02 A6 |  if_e	mov	local05, local04
0f47c     14 00 90 AD |  if_e	jmp	#LR__1340
0f480     18 01 00 FF 
0f484     6E 13 06 F6 | 	mov	arg01, ##@LR__4231
0f488     12 15 02 F6 | 	mov	arg02, local04
0f48c     4C 46 B0 FD | 	call	#__system___string_concat
0f490     FD 26 02 F6 | 	mov	local05, result1
0f494                 | LR__1340
0f494                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
0f494                 | '   open fullfilename for input as #9
0f494     09 12 06 F6 | 	mov	arg01, #9
0f498     13 15 02 F6 | 	mov	arg02, local05
0f49c     00 16 06 F6 | 	mov	arg03, #0
0f4a0     F8 50 B0 FD | 	call	#__system___basic_open_string
0f4a4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0f4a8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0f4ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0f4b0     FD 28 0A F6 | 	mov	local06, result1 wz
0f4b4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0f4b4     8C 00 90 AD |  if_e	jmp	#LR__1341
0f4b8     00 12 06 F6 | 	mov	arg01, #0
0f4bc     A4 9A B0 FD | 	call	#__system___getiolock_0306
0f4c0     FD 12 02 F6 | 	mov	arg01, result1
0f4c4     B8 45 B0 FD | 	call	#__system___lockmem
0f4c8     18 01 00 FF 
0f4cc     77 15 06 F6 | 	mov	arg02, ##@LR__4232
0f4d0     00 12 06 F6 | 	mov	arg01, #0
0f4d4     00 16 06 F6 | 	mov	arg03, #0
0f4d8     B0 51 B0 FD | 	call	#__system___basic_print_string
0f4dc     00 12 06 F6 | 	mov	arg01, #0
0f4e0     14 15 02 F6 | 	mov	arg02, local06
0f4e4     00 16 06 F6 | 	mov	arg03, #0
0f4e8     0A 18 06 F6 | 	mov	arg04, #10
0f4ec     E0 51 B0 FD | 	call	#__system___basic_print_integer
0f4f0     18 01 00 FF 
0f4f4     85 15 06 F6 | 	mov	arg02, ##@LR__4233
0f4f8     00 12 06 F6 | 	mov	arg01, #0
0f4fc     00 16 06 F6 | 	mov	arg03, #0
0f500     88 51 B0 FD | 	call	#__system___basic_print_string
0f504     14 13 02 F6 | 	mov	arg01, local06
0f508     AC 6A B0 FD | 	call	#__system___strerror
0f50c     FD 14 02 F6 | 	mov	arg02, result1
0f510     00 12 06 F6 | 	mov	arg01, #0
0f514     00 16 06 F6 | 	mov	arg03, #0
0f518     70 51 B0 FD | 	call	#__system___basic_print_string
0f51c     00 12 06 F6 | 	mov	arg01, #0
0f520     0A 14 06 F6 | 	mov	arg02, #10
0f524     00 16 06 F6 | 	mov	arg03, #0
0f528     08 51 B0 FD | 	call	#__system___basic_print_char
0f52c     00 12 06 F6 | 	mov	arg01, #0
0f530     30 9A B0 FD | 	call	#__system___getiolock_0306
0f534     FD 00 68 FC | 	wrlong	#0, result1
0f538     09 12 06 F6 | 	mov	arg01, #9
0f53c     98 90 B0 FD | 	call	#__system__close
0f540     FC 00 90 FD | 	jmp	#LR__1344
0f544                 | LR__1341
0f544     01 2A 06 F6 | 	mov	local07, #1
0f548     00 2C 06 F6 | 	mov	local08, #0
0f54c                 | '   do
0f54c                 | LR__1342
0f54c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0f54c     4E 00 00 FF 
0f550     70 E5 05 F1 | 	add	objptr, ##40304
0f554     F2 16 02 F6 | 	mov	arg03, objptr
0f558     4E 00 00 FF 
0f55c     70 E5 85 F1 | 	sub	objptr, ##40304
0f560     09 12 06 F6 | 	mov	arg01, #9
0f564     15 15 02 F6 | 	mov	arg02, local07
0f568     0A 18 C6 F9 | 	decod	arg04, #10
0f56c     01 1A 06 F6 | 	mov	arg05, #1
0f570     48 52 B0 FD | 	call	#__system___basic_get
0f574     FD 28 02 F6 | 	mov	local06, result1
0f578     FD 2A 02 F1 | 	add	local07, result1
0f57c     4E 00 00 FF 
0f580     70 E5 05 F1 | 	add	objptr, ##40304
0f584     F2 12 02 F6 | 	mov	arg01, objptr
0f588     16 15 02 F6 | 	mov	arg02, local08
0f58c     0A 16 C6 F9 | 	decod	arg03, #10
0f590     43 00 00 FF 
0f594     B0 E4 85 F1 | 	sub	objptr, ##34480
0f598     94 3A B0 FD | 	call	#_psram_spin2_write
0f59c     0B 00 00 FF 
0f5a0     C0 E4 85 F1 | 	sub	objptr, ##5824
0f5a4     14 2D 02 F1 | 	add	local08, local06
0f5a8     02 00 00 FF 
0f5ac     00 28 0E F2 | 	cmp	local06, ##1024 wz
0f5b0     E0 03 00 AF 
0f5b4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0f5b8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1342
0f5bc     2D 00 00 FF 
0f5c0     C0 E5 05 F1 | 	add	objptr, ##23488
0f5c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f5c8     03 12 62 FD | 	cogstop	arg01
0f5cc     04 E4 05 F1 | 	add	objptr, #4
0f5d0     F2 12 02 FB | 	rdlong	arg01, objptr
0f5d4     03 12 62 FD | 	cogstop	arg01
0f5d8     04 E4 05 F1 | 	add	objptr, #4
0f5dc     F2 12 02 FB | 	rdlong	arg01, objptr
0f5e0     03 12 62 FD | 	cogstop	arg01
0f5e4     22 00 00 FF 
0f5e8     E0 E5 05 F1 | 	add	objptr, ##17888
0f5ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f5f0     03 12 62 FD | 	cogstop	arg01
0f5f4     09 00 00 FF 
0f5f8     74 EB 05 F1 | 	add	ptr__dat__, ##4980
0f5fc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0f600     09 00 00 FF 
0f604     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
0f608     22 00 00 FF 
0f60c     D8 E5 85 F1 | 	sub	objptr, ##17880
0f610     1E 2C 06 F6 | 	mov	local08, #30
0f614     28 E4 61 FD | 	setq	objptr
0f618     0A 2D F2 FC | 	coginit	local08, arg02 wc
0f61c     01 2C 66 C6 |  if_b	neg	local08, #1
0f620     24 00 00 FF 
0f624     DC E4 05 F1 | 	add	objptr, ##18652
0f628     F2 2C 62 FC | 	wrlong	local08, objptr
0f62c     52 00 00 FF 
0f630     AC E4 85 F1 | 	sub	objptr, ##42156
0f634     00 12 06 F6 | 	mov	arg01, #0
0f638     01 12 62 FD | 	cogid	arg01
0f63c     03 12 62 FD | 	cogstop	arg01
0f640                 | LR__1343
0f640                 | LR__1344
0f640     A7 F0 03 F6 | 	mov	ptra, fp
0f644     B2 00 A0 FD | 	call	#popregs_
0f648                 | _do_brun_ret
0f648     2D 00 64 FD | 	ret
0f64c                 | 
0f64c                 | ' 
0f64c                 | ' 
0f64c                 | ' sub do_mouse
0f64c                 | _do_mouse
0f64c     D0 89 BF FD | 	call	#_pop
0f650     00 FA 4D F2 | 	cmps	result1, #0 wz
0f654                 | ' 
0f654                 | ' t1=pop()
0f654                 | ' 
0f654                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
0f654     14 00 90 5D |  if_ne	jmp	#LR__1350
0f658     10 12 06 F6 | 	mov	arg01, #16
0f65c     00 14 06 F6 | 	mov	arg02, #0
0f660     00 16 06 F6 | 	mov	arg03, #0
0f664     74 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f668     10 00 90 FD | 	jmp	#LR__1351
0f66c                 | LR__1350
0f66c     10 12 06 F6 | 	mov	arg01, #16
0f670     20 14 06 F6 | 	mov	arg02, #32
0f674     20 16 06 F6 | 	mov	arg03, #32
0f678     60 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f67c                 | LR__1351
0f67c                 | _do_mouse_ret
0f67c     2D 00 64 FD | 	ret
0f680                 | 
0f680                 | ' 
0f680                 | ' sub do_cursor
0f680                 | _do_cursor
0f680     9C 89 BF FD | 	call	#_pop
0f684     00 FA 4D F2 | 	cmps	result1, #0 wz
0f688                 | ' 
0f688                 | ' t1=pop()
0f688                 | ' 
0f688                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f688     14 00 90 5D |  if_ne	jmp	#LR__1360
0f68c     11 12 06 F6 | 	mov	arg01, #17
0f690     00 14 06 F6 | 	mov	arg02, #0
0f694     00 16 06 F6 | 	mov	arg03, #0
0f698     40 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f69c     10 00 90 FD | 	jmp	#LR__1361
0f6a0                 | LR__1360
0f6a0     11 12 06 F6 | 	mov	arg01, #17
0f6a4     08 14 06 F6 | 	mov	arg02, #8
0f6a8     10 16 06 F6 | 	mov	arg03, #16
0f6ac     2C 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f6b0                 | LR__1361
0f6b0                 | _do_cursor_ret
0f6b0     2D 00 64 FD | 	ret
0f6b4                 | 
0f6b4                 | ' 
0f6b4                 | ' 
0f6b4                 | ' sub do_click
0f6b4                 | _do_click
0f6b4     68 89 BF FD | 	call	#_pop
0f6b8     00 FA 4D F2 | 	cmps	result1, #0 wz
0f6bc                 | ' 
0f6bc                 | ' t1=pop()
0f6bc                 | ' 
0f6bc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f6bc     50 00 00 AF 
0f6c0     A4 E5 05 A1 |  if_e	add	objptr, ##41380
0f6c4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f6c8     50 00 00 FF 
0f6cc     A4 E5 C5 F3 | 	sumz	objptr, ##41380
0f6d0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f6d4     50 00 00 5F 
0f6d8     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
0f6dc                 | _do_click_ret
0f6dc     2D 00 64 FD | 	ret
0f6e0                 | 
0f6e0                 | ' 
0f6e0                 | ' 
0f6e0                 | ' sub do_beep
0f6e0                 | _do_beep
0f6e0     02 4A 05 F6 | 	mov	COUNT_, #2
0f6e4     A8 00 A0 FD | 	call	#pushregs_
0f6e8     20 F0 07 F1 | 	add	ptra, #32
0f6ec     30 89 BF FD | 	call	#_pop
0f6f0     FD 1E 02 F6 | 	mov	local01, result1
0f6f4     FE 1C 02 F6 | 	mov	arg06, result2
0f6f8     FF 20 02 F6 | 	mov	local02, result3
0f6fc     0C 4E 05 F1 | 	add	fp, #12
0f700     A7 1E 62 FC | 	wrlong	local01, fp
0f704     04 4E 05 F1 | 	add	fp, #4
0f708     A7 1C 62 FC | 	wrlong	arg06, fp
0f70c     04 4E 05 F1 | 	add	fp, #4
0f710     A7 20 62 FC | 	wrlong	local02, fp
0f714     14 4E 85 F1 | 	sub	fp, #20
0f718     04 89 BF FD | 	call	#_pop
0f71c     A7 FA 61 FC | 	wrlong	result1, fp
0f720     04 4E 05 F1 | 	add	fp, #4
0f724     A7 FC 61 FC | 	wrlong	result2, fp
0f728     04 4E 05 F1 | 	add	fp, #4
0f72c     A7 FE 61 FC | 	wrlong	result3, fp
0f730                 | ' 
0f730                 | ' 
0f730                 | ' 
0f730                 | ' t2=pop()
0f730                 | ' t1=pop()
0f730                 | ' 
0f730                 | ' 
0f730                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0f730     08 4E 85 F1 | 	sub	fp, #8
0f734     1C FE 0D F2 | 	cmp	result3, #28 wz
0f738     08 4E 05 51 |  if_ne	add	fp, #8
0f73c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f740     08 4E 85 51 |  if_ne	sub	fp, #8
0f744     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0f748     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f74c     18 4E 05 A1 |  if_e	add	fp, #24
0f750     A7 1E 62 AC |  if_e	wrlong	local01, fp
0f754     18 4E 85 A1 |  if_e	sub	fp, #24
0f758     14 00 90 AD |  if_e	jmp	#LR__1370
0f75c     A7 12 02 F6 | 	mov	arg01, fp
0f760     88 D4 BF FD | 	call	#_converttoint
0f764     18 4E 05 F1 | 	add	fp, #24
0f768     A7 FA 61 FC | 	wrlong	result1, fp
0f76c     18 4E 85 F1 | 	sub	fp, #24
0f770                 | LR__1370
0f770     1C 4E 05 F1 | 	add	fp, #28
0f774     A7 FE 48 FC | 	wrbyte	#127, fp
0f778     01 4E 05 F1 | 	add	fp, #1
0f77c     A7 00 49 FC | 	wrbyte	#128, fp
0f780     01 4E 85 F1 | 	sub	fp, #1
0f784     A7 14 02 F6 | 	mov	arg02, fp
0f788     04 4E 85 F1 | 	sub	fp, #4
0f78c     A7 16 02 FB | 	rdlong	arg03, fp
0f790     18 4E 85 F1 | 	sub	fp, #24
0f794     01 16 66 F0 | 	shl	arg03, #1
0f798     07 12 06 F6 | 	mov	arg01, #7
0f79c     0E 18 C6 F9 | 	decod	arg04, #14
0f7a0     02 1A 06 F6 | 	mov	arg05, #2
0f7a4     00 1C 06 F6 | 	mov	arg06, #0
0f7a8     0B 00 00 FF 
0f7ac     C0 E4 05 F1 | 	add	objptr, ##5824
0f7b0     34 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0f7b4     0B 00 00 FF 
0f7b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0f7bc     0C 4E 05 F1 | 	add	fp, #12
0f7c0     A7 12 02 F6 | 	mov	arg01, fp
0f7c4     0C 4E 85 F1 | 	sub	fp, #12
0f7c8     EC 88 BF FD | 	call	#_push
0f7cc     10 F7 BF FD | 	call	#_do_waitms
0f7d0     07 12 06 F6 | 	mov	arg01, #7
0f7d4     0B 00 00 FF 
0f7d8     C0 E4 05 F1 | 	add	objptr, ##5824
0f7dc     BC 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
0f7e0     0B 00 00 FF 
0f7e4     C0 E4 85 F1 | 	sub	objptr, ##5824
0f7e8     A7 F0 03 F6 | 	mov	ptra, fp
0f7ec     B2 00 A0 FD | 	call	#popregs_
0f7f0                 | _do_beep_ret
0f7f0     2D 00 64 FD | 	ret
0f7f4                 | 
0f7f4                 | ' 
0f7f4                 | ' sub do_no_command
0f7f4                 | _do_no_command
0f7f4     17 12 06 F6 | 	mov	arg01, #23
0f7f8     90 0D B0 FD | 	call	#_printerror
0f7fc                 | _do_no_command_ret
0f7fc     2D 00 64 FD | 	ret
0f800                 | 
0f800                 | ' 
0f800                 | ' sub do_negative
0f800                 | _do_negative
0f800     02 4A 05 F6 | 	mov	COUNT_, #2
0f804     A8 00 A0 FD | 	call	#pushregs_
0f808     0C F0 07 F1 | 	add	ptra, #12
0f80c     10 88 BF FD | 	call	#_pop
0f810     FF 1E 02 F6 | 	mov	local01, result3
0f814     A7 FA 61 FC | 	wrlong	result1, fp
0f818     04 4E 05 F1 | 	add	fp, #4
0f81c     A7 FC 61 FC | 	wrlong	result2, fp
0f820     04 4E 05 F1 | 	add	fp, #4
0f824     A7 1E 62 FC | 	wrlong	local01, fp
0f828                 | ' t1=pop()
0f828                 | ' if t1.result_type=result_int then 
0f828     08 4E 85 F1 | 	sub	fp, #8
0f82c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f830     A7 20 02 AB |  if_e	rdlong	local02, fp
0f834     10 1F 62 A6 |  if_e	neg	local01, local02
0f838     A7 1E 62 AC |  if_e	wrlong	local01, fp
0f83c     5C 00 90 AD |  if_e	jmp	#LR__1382
0f840     08 4E 05 F1 | 	add	fp, #8
0f844     A7 1E 02 FB | 	rdlong	local01, fp
0f848     08 4E 85 F1 | 	sub	fp, #8
0f84c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f850     1C 00 90 5D |  if_ne	jmp	#LR__1380
0f854     A7 20 02 FB | 	rdlong	local02, fp
0f858     10 1F 62 F6 | 	neg	local01, local02
0f85c     A7 1E 62 FC | 	wrlong	local01, fp
0f860     08 4E 05 F1 | 	add	fp, #8
0f864     A7 38 68 FC | 	wrlong	#28, fp
0f868     08 4E 85 F1 | 	sub	fp, #8
0f86c     2C 00 90 FD | 	jmp	#LR__1381
0f870                 | LR__1380
0f870     08 4E 05 F1 | 	add	fp, #8
0f874     A7 1E 02 FB | 	rdlong	local01, fp
0f878     08 4E 85 F1 | 	sub	fp, #8
0f87c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f880     A7 FA 01 AB |  if_e	rdlong	result1, fp
0f884     1F FA E5 A4 |  if_e	bitnot	result1, #31
0f888     A7 FA 61 AC |  if_e	wrlong	result1, fp
0f88c     08 4E 05 51 |  if_ne	add	fp, #8
0f890     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f894     08 4E 85 51 |  if_ne	sub	fp, #8
0f898     A7 50 68 5C |  if_ne	wrlong	#40, fp
0f89c                 | LR__1381
0f89c                 | LR__1382
0f89c     A7 12 02 F6 | 	mov	arg01, fp
0f8a0     14 88 BF FD | 	call	#_push
0f8a4     A7 F0 03 F6 | 	mov	ptra, fp
0f8a8     B2 00 A0 FD | 	call	#popregs_
0f8ac                 | _do_negative_ret
0f8ac     2D 00 64 FD | 	ret
0f8b0                 | 
0f8b0                 | ' 
0f8b0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
0f8b0                 | ' 
0f8b0                 | ' ''----------------------------------------------------------------------------------------------------
0f8b0                 | ' ''------------------ Initialization procedures -------------------------------------------------------
0f8b0                 | ' ''----------------------------------------------------------------------------------------------------
0f8b0                 | ' 
0f8b0                 | ' ''--------------------------- Command function pointers
0f8b0                 | ' 
0f8b0                 | ' sub init_commands
0f8b0                 | _init_commands
0f8b0                 | ' 
0f8b0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
0f8b0     00 00 06 F6 | 	mov	_var01, #0
0f8b4     97 16 48 FB | 	callpa	#(@LR__1391-@LR__1390)>>2,fcache_load_ptr_
0f8b8                 | LR__1390
0f8b8     00 FB 01 F6 | 	mov	result1, _var01
0f8bc     02 FA 65 F0 | 	shl	result1, #2
0f8c0     3A 00 00 FF 
0f8c4     24 E4 05 F1 | 	add	objptr, ##29732
0f8c8     F2 FA 01 F1 | 	add	result1, objptr
0f8cc     3A 00 00 FF 
0f8d0     24 E4 85 F1 | 	sub	objptr, ##29732
0f8d4     FD E4 61 FC | 	wrlong	objptr, result1
0f8d8     01 00 06 F1 | 	add	_var01, #1
0f8dc     00 01 56 F2 | 	cmps	_var01, #256 wc
0f8e0     D4 FF 9F CD |  if_b	jmp	#LR__1390
0f8e4                 | LR__1391
0f8e4     F2 FA 01 F6 | 	mov	result1, objptr
0f8e8     14 FA 25 F4 | 	bith	result1, #20
0f8ec     3A 00 00 FF 
0f8f0     28 E4 05 F1 | 	add	objptr, ##29736
0f8f4     F2 FA 61 FC | 	wrlong	result1, objptr
0f8f8     3A 00 00 FF 
0f8fc     28 E4 85 F1 | 	sub	objptr, ##29736
0f900     F2 FA 01 F6 | 	mov	result1, objptr
0f904     15 FA 25 F4 | 	bith	result1, #21
0f908     3A 00 00 FF 
0f90c     2C E4 05 F1 | 	add	objptr, ##29740
0f910     F2 FA 61 FC | 	wrlong	result1, objptr
0f914     3A 00 00 FF 
0f918     2C E4 85 F1 | 	sub	objptr, ##29740
0f91c     F2 FA 01 F6 | 	mov	result1, objptr
0f920     34 FA 25 F4 | 	bith	result1, #52
0f924     3A 00 00 FF 
0f928     30 E4 05 F1 | 	add	objptr, ##29744
0f92c     F2 FA 61 FC | 	wrlong	result1, objptr
0f930     3A 00 00 FF 
0f934     30 E4 85 F1 | 	sub	objptr, ##29744
0f938     F2 FA 01 F6 | 	mov	result1, objptr
0f93c     16 FA 25 F4 | 	bith	result1, #22
0f940     3A 00 00 FF 
0f944     38 E4 05 F1 | 	add	objptr, ##29752
0f948     F2 FA 61 FC | 	wrlong	result1, objptr
0f94c     3A 00 00 FF 
0f950     38 E4 85 F1 | 	sub	objptr, ##29752
0f954     F2 FA 01 F6 | 	mov	result1, objptr
0f958     00 28 00 FF 
0f95c     00 FA 45 F5 | 	or	result1, ##5242880
0f960     3A 00 00 FF 
0f964     3C E4 05 F1 | 	add	objptr, ##29756
0f968     F2 FA 61 FC | 	wrlong	result1, objptr
0f96c     3A 00 00 FF 
0f970     3C E4 85 F1 | 	sub	objptr, ##29756
0f974     F2 FA 01 F6 | 	mov	result1, objptr
0f978     35 FA 25 F4 | 	bith	result1, #53
0f97c     3A 00 00 FF 
0f980     40 E4 05 F1 | 	add	objptr, ##29760
0f984     F2 FA 61 FC | 	wrlong	result1, objptr
0f988     3A 00 00 FF 
0f98c     40 E4 85 F1 | 	sub	objptr, ##29760
0f990     F2 FA 01 F6 | 	mov	result1, objptr
0f994     54 FA 25 F4 | 	bith	result1, #84
0f998     3A 00 00 FF 
0f99c     44 E4 05 F1 | 	add	objptr, ##29764
0f9a0     F2 FA 61 FC | 	wrlong	result1, objptr
0f9a4     3A 00 00 FF 
0f9a8     44 E4 85 F1 | 	sub	objptr, ##29764
0f9ac     F2 FA 01 F6 | 	mov	result1, objptr
0f9b0     17 FA 25 F4 | 	bith	result1, #23
0f9b4     3A 00 00 FF 
0f9b8     48 E4 05 F1 | 	add	objptr, ##29768
0f9bc     F2 FA 61 FC | 	wrlong	result1, objptr
0f9c0     3A 00 00 FF 
0f9c4     48 E4 85 F1 | 	sub	objptr, ##29768
0f9c8     F2 FA 01 F6 | 	mov	result1, objptr
0f9cc     00 48 00 FF 
0f9d0     00 FA 45 F5 | 	or	result1, ##9437184
0f9d4     3A 00 00 FF 
0f9d8     4C E4 05 F1 | 	add	objptr, ##29772
0f9dc     F2 FA 61 FC | 	wrlong	result1, objptr
0f9e0     3A 00 00 FF 
0f9e4     4C E4 85 F1 | 	sub	objptr, ##29772
0f9e8     F2 FA 01 F6 | 	mov	result1, objptr
0f9ec     00 50 00 FF 
0f9f0     00 FA 45 F5 | 	or	result1, ##10485760
0f9f4     3A 00 00 FF 
0f9f8     50 E4 05 F1 | 	add	objptr, ##29776
0f9fc     F2 FA 61 FC | 	wrlong	result1, objptr
0fa00     3A 00 00 FF 
0fa04     50 E4 85 F1 | 	sub	objptr, ##29776
0fa08     F2 FA 01 F6 | 	mov	result1, objptr
0fa0c     00 58 00 FF 
0fa10     00 FA 45 F5 | 	or	result1, ##11534336
0fa14     3A 00 00 FF 
0fa18     54 E4 05 F1 | 	add	objptr, ##29780
0fa1c     F2 FA 61 FC | 	wrlong	result1, objptr
0fa20     3A 00 00 FF 
0fa24     54 E4 85 F1 | 	sub	objptr, ##29780
0fa28     F2 FA 01 F6 | 	mov	result1, objptr
0fa2c     36 FA 25 F4 | 	bith	result1, #54
0fa30     3A 00 00 FF 
0fa34     68 E4 05 F1 | 	add	objptr, ##29800
0fa38     F2 FA 61 FC | 	wrlong	result1, objptr
0fa3c     3A 00 00 FF 
0fa40     68 E4 85 F1 | 	sub	objptr, ##29800
0fa44     F2 FA 01 F6 | 	mov	result1, objptr
0fa48     00 68 00 FF 
0fa4c     00 FA 45 F5 | 	or	result1, ##13631488
0fa50     3A 00 00 FF 
0fa54     98 E4 05 F1 | 	add	objptr, ##29848
0fa58     F2 FA 61 FC | 	wrlong	result1, objptr
0fa5c     3A 00 00 FF 
0fa60     98 E4 85 F1 | 	sub	objptr, ##29848
0fa64     F2 FA 01 F6 | 	mov	result1, objptr
0fa68     00 68 00 FF 
0fa6c     00 FA 45 F5 | 	or	result1, ##13631488
0fa70     3A 00 00 FF 
0fa74     94 E4 05 F1 | 	add	objptr, ##29844
0fa78     F2 FA 61 FC | 	wrlong	result1, objptr
0fa7c     3A 00 00 FF 
0fa80     94 E4 85 F1 | 	sub	objptr, ##29844
0fa84     F2 FA 01 F6 | 	mov	result1, objptr
0fa88     00 68 00 FF 
0fa8c     00 FA 45 F5 | 	or	result1, ##13631488
0fa90     3A 00 00 FF 
0fa94     9C E4 05 F1 | 	add	objptr, ##29852
0fa98     F2 FA 61 FC | 	wrlong	result1, objptr
0fa9c     3A 00 00 FF 
0faa0     9C E4 85 F1 | 	sub	objptr, ##29852
0faa4     F2 FA 01 F6 | 	mov	result1, objptr
0faa8     00 68 00 FF 
0faac     00 FA 45 F5 | 	or	result1, ##13631488
0fab0     3A 00 00 FF 
0fab4     A0 E4 05 F1 | 	add	objptr, ##29856
0fab8     F2 FA 61 FC | 	wrlong	result1, objptr
0fabc     3A 00 00 FF 
0fac0     A0 E4 85 F1 | 	sub	objptr, ##29856
0fac4     F2 FA 01 F6 | 	mov	result1, objptr
0fac8     55 FA 25 F4 | 	bith	result1, #85
0facc     3A 00 00 FF 
0fad0     80 E4 05 F1 | 	add	objptr, ##29824
0fad4     F2 FA 61 FC | 	wrlong	result1, objptr
0fad8     3A 00 00 FF 
0fadc     80 E4 85 F1 | 	sub	objptr, ##29824
0fae0     F2 FA 01 F6 | 	mov	result1, objptr
0fae4     00 68 00 FF 
0fae8     00 FA 45 F5 | 	or	result1, ##13631488
0faec     3A 00 00 FF 
0faf0     A4 E4 05 F1 | 	add	objptr, ##29860
0faf4     F2 FA 61 FC | 	wrlong	result1, objptr
0faf8     3A 00 00 FF 
0fafc     A4 E4 85 F1 | 	sub	objptr, ##29860
0fb00     F2 FA 01 F6 | 	mov	result1, objptr
0fb04     00 68 00 FF 
0fb08     00 FA 45 F5 | 	or	result1, ##13631488
0fb0c     3A 00 00 FF 
0fb10     A8 E4 05 F1 | 	add	objptr, ##29864
0fb14     F2 FA 61 FC | 	wrlong	result1, objptr
0fb18     3A 00 00 FF 
0fb1c     A8 E4 85 F1 | 	sub	objptr, ##29864
0fb20     F2 FA 01 F6 | 	mov	result1, objptr
0fb24     00 68 00 FF 
0fb28     00 FA 45 F5 | 	or	result1, ##13631488
0fb2c     3A 00 00 FF 
0fb30     AC E4 05 F1 | 	add	objptr, ##29868
0fb34     F2 FA 61 FC | 	wrlong	result1, objptr
0fb38     3A 00 00 FF 
0fb3c     AC E4 85 F1 | 	sub	objptr, ##29868
0fb40     F2 FA 01 F6 | 	mov	result1, objptr
0fb44     74 FA 25 F4 | 	bith	result1, #116
0fb48     3A 00 00 FF 
0fb4c     24 E5 05 F1 | 	add	objptr, ##29988
0fb50     F2 FA 61 FC | 	wrlong	result1, objptr
0fb54     3A 00 00 FF 
0fb58     24 E5 85 F1 | 	sub	objptr, ##29988
0fb5c     F2 FA 01 F6 | 	mov	result1, objptr
0fb60     18 FA 25 F4 | 	bith	result1, #24
0fb64     3A 00 00 FF 
0fb68     28 E5 05 F1 | 	add	objptr, ##29992
0fb6c     F2 FA 61 FC | 	wrlong	result1, objptr
0fb70     3A 00 00 FF 
0fb74     28 E5 85 F1 | 	sub	objptr, ##29992
0fb78     F2 FA 01 F6 | 	mov	result1, objptr
0fb7c     00 88 00 FF 
0fb80     00 FA 45 F5 | 	or	result1, ##17825792
0fb84     3A 00 00 FF 
0fb88     2C E5 05 F1 | 	add	objptr, ##29996
0fb8c     F2 FA 61 FC | 	wrlong	result1, objptr
0fb90     3A 00 00 FF 
0fb94     2C E5 85 F1 | 	sub	objptr, ##29996
0fb98     F2 FA 01 F6 | 	mov	result1, objptr
0fb9c     00 90 00 FF 
0fba0     00 FA 45 F5 | 	or	result1, ##18874368
0fba4     3A 00 00 FF 
0fba8     30 E5 05 F1 | 	add	objptr, ##30000
0fbac     F2 FA 61 FC | 	wrlong	result1, objptr
0fbb0     3A 00 00 FF 
0fbb4     30 E5 85 F1 | 	sub	objptr, ##30000
0fbb8     F2 FA 01 F6 | 	mov	result1, objptr
0fbbc     00 98 00 FF 
0fbc0     00 FA 45 F5 | 	or	result1, ##19922944
0fbc4     3A 00 00 FF 
0fbc8     34 E5 05 F1 | 	add	objptr, ##30004
0fbcc     F2 FA 61 FC | 	wrlong	result1, objptr
0fbd0     3A 00 00 FF 
0fbd4     34 E5 85 F1 | 	sub	objptr, ##30004
0fbd8     F2 FA 01 F6 | 	mov	result1, objptr
0fbdc     00 A0 00 FF 
0fbe0     00 FA 45 F5 | 	or	result1, ##20971520
0fbe4     3A 00 00 FF 
0fbe8     38 E5 05 F1 | 	add	objptr, ##30008
0fbec     F2 FA 61 FC | 	wrlong	result1, objptr
0fbf0     3A 00 00 FF 
0fbf4     38 E5 85 F1 | 	sub	objptr, ##30008
0fbf8     F2 FA 01 F6 | 	mov	result1, objptr
0fbfc     00 A8 00 FF 
0fc00     00 FA 45 F5 | 	or	result1, ##22020096
0fc04     3A 00 00 FF 
0fc08     3C E5 05 F1 | 	add	objptr, ##30012
0fc0c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc10     3A 00 00 FF 
0fc14     3C E5 85 F1 | 	sub	objptr, ##30012
0fc18     F2 FA 01 F6 | 	mov	result1, objptr
0fc1c     00 B0 00 FF 
0fc20     00 FA 45 F5 | 	or	result1, ##23068672
0fc24     3A 00 00 FF 
0fc28     40 E5 05 F1 | 	add	objptr, ##30016
0fc2c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc30     3A 00 00 FF 
0fc34     40 E5 85 F1 | 	sub	objptr, ##30016
0fc38     F2 FA 01 F6 | 	mov	result1, objptr
0fc3c     00 B8 00 FF 
0fc40     00 FA 45 F5 | 	or	result1, ##24117248
0fc44     3A 00 00 FF 
0fc48     44 E5 05 F1 | 	add	objptr, ##30020
0fc4c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc50     3A 00 00 FF 
0fc54     44 E5 85 F1 | 	sub	objptr, ##30020
0fc58     F2 FA 01 F6 | 	mov	result1, objptr
0fc5c     37 FA 25 F4 | 	bith	result1, #55
0fc60     3A 00 00 FF 
0fc64     48 E5 05 F1 | 	add	objptr, ##30024
0fc68     F2 FA 61 FC | 	wrlong	result1, objptr
0fc6c     3A 00 00 FF 
0fc70     48 E5 85 F1 | 	sub	objptr, ##30024
0fc74     F2 FA 01 F6 | 	mov	result1, objptr
0fc78     00 C8 00 FF 
0fc7c     00 FA 45 F5 | 	or	result1, ##26214400
0fc80     3A 00 00 FF 
0fc84     4C E5 05 F1 | 	add	objptr, ##30028
0fc88     F2 FA 61 FC | 	wrlong	result1, objptr
0fc8c     3A 00 00 FF 
0fc90     4C E5 85 F1 | 	sub	objptr, ##30028
0fc94     F2 FA 01 F6 | 	mov	result1, objptr
0fc98     00 D0 00 FF 
0fc9c     00 FA 45 F5 | 	or	result1, ##27262976
0fca0     3A 00 00 FF 
0fca4     50 E5 05 F1 | 	add	objptr, ##30032
0fca8     F2 FA 61 FC | 	wrlong	result1, objptr
0fcac     3A 00 00 FF 
0fcb0     50 E5 85 F1 | 	sub	objptr, ##30032
0fcb4     F2 FA 01 F6 | 	mov	result1, objptr
0fcb8     00 D8 00 FF 
0fcbc     00 FA 45 F5 | 	or	result1, ##28311552
0fcc0     3A 00 00 FF 
0fcc4     54 E5 05 F1 | 	add	objptr, ##30036
0fcc8     F2 FA 61 FC | 	wrlong	result1, objptr
0fccc     3A 00 00 FF 
0fcd0     54 E5 85 F1 | 	sub	objptr, ##30036
0fcd4     F2 FA 01 F6 | 	mov	result1, objptr
0fcd8     56 FA 25 F4 | 	bith	result1, #86
0fcdc     3A 00 00 FF 
0fce0     58 E5 05 F1 | 	add	objptr, ##30040
0fce4     F2 FA 61 FC | 	wrlong	result1, objptr
0fce8     3A 00 00 FF 
0fcec     58 E5 85 F1 | 	sub	objptr, ##30040
0fcf0     F2 FA 01 F6 | 	mov	result1, objptr
0fcf4     00 E8 00 FF 
0fcf8     00 FA 45 F5 | 	or	result1, ##30408704
0fcfc     3C 00 00 FF 
0fd00     20 E4 05 F1 | 	add	objptr, ##30752
0fd04     F2 FA 61 FC | 	wrlong	result1, objptr
0fd08     3C 00 00 FF 
0fd0c     20 E4 85 F1 | 	sub	objptr, ##30752
0fd10     F2 FA 01 F6 | 	mov	result1, objptr
0fd14     75 FA 25 F4 | 	bith	result1, #117
0fd18     3A 00 00 FF 
0fd1c     5C E5 05 F1 | 	add	objptr, ##30044
0fd20     F2 FA 61 FC | 	wrlong	result1, objptr
0fd24     3A 00 00 FF 
0fd28     5C E5 85 F1 | 	sub	objptr, ##30044
0fd2c     F2 FA 01 F6 | 	mov	result1, objptr
0fd30     94 FA 25 F4 | 	bith	result1, #148
0fd34     3A 00 00 FF 
0fd38     70 E5 05 F1 | 	add	objptr, ##30064
0fd3c     F2 FA 61 FC | 	wrlong	result1, objptr
0fd40     3A 00 00 FF 
0fd44     70 E5 85 F1 | 	sub	objptr, ##30064
0fd48     F2 FA 01 F6 | 	mov	result1, objptr
0fd4c     19 FA 25 F4 | 	bith	result1, #25
0fd50     3A 00 00 FF 
0fd54     60 E5 05 F1 | 	add	objptr, ##30048
0fd58     F2 FA 61 FC | 	wrlong	result1, objptr
0fd5c     3A 00 00 FF 
0fd60     60 E5 85 F1 | 	sub	objptr, ##30048
0fd64     F2 FA 01 F6 | 	mov	result1, objptr
0fd68     00 08 01 FF 
0fd6c     00 FA 45 F5 | 	or	result1, ##34603008
0fd70     3A 00 00 FF 
0fd74     7C E4 05 F1 | 	add	objptr, ##29820
0fd78     F2 FA 61 FC | 	wrlong	result1, objptr
0fd7c     3A 00 00 FF 
0fd80     7C E4 85 F1 | 	sub	objptr, ##29820
0fd84     F2 FA 01 F6 | 	mov	result1, objptr
0fd88     00 10 01 FF 
0fd8c     00 FA 45 F5 | 	or	result1, ##35651584
0fd90     3A 00 00 FF 
0fd94     64 E5 05 F1 | 	add	objptr, ##30052
0fd98     F2 FA 61 FC | 	wrlong	result1, objptr
0fd9c     3A 00 00 FF 
0fda0     64 E5 85 F1 | 	sub	objptr, ##30052
0fda4     F2 FA 01 F6 | 	mov	result1, objptr
0fda8     00 18 01 FF 
0fdac     00 FA 45 F5 | 	or	result1, ##36700160
0fdb0     3A 00 00 FF 
0fdb4     68 E5 05 F1 | 	add	objptr, ##30056
0fdb8     F2 FA 61 FC | 	wrlong	result1, objptr
0fdbc     3A 00 00 FF 
0fdc0     68 E5 85 F1 | 	sub	objptr, ##30056
0fdc4     F2 FA 01 F6 | 	mov	result1, objptr
0fdc8     00 20 01 FF 
0fdcc     00 FA 45 F5 | 	or	result1, ##37748736
0fdd0     3A 00 00 FF 
0fdd4     6C E5 05 F1 | 	add	objptr, ##30060
0fdd8     F2 FA 61 FC | 	wrlong	result1, objptr
0fddc     3A 00 00 FF 
0fde0     6C E5 85 F1 | 	sub	objptr, ##30060
0fde4     F2 FA 01 F6 | 	mov	result1, objptr
0fde8     00 28 01 FF 
0fdec     00 FA 45 F5 | 	or	result1, ##38797312
0fdf0     3A 00 00 FF 
0fdf4     78 E5 05 F1 | 	add	objptr, ##30072
0fdf8     F2 FA 61 FC | 	wrlong	result1, objptr
0fdfc     3A 00 00 FF 
0fe00     78 E5 85 F1 | 	sub	objptr, ##30072
0fe04     F2 FA 01 F6 | 	mov	result1, objptr
0fe08     00 30 01 FF 
0fe0c     00 FA 45 F5 | 	or	result1, ##39845888
0fe10     3A 00 00 FF 
0fe14     7C E5 05 F1 | 	add	objptr, ##30076
0fe18     F2 FA 61 FC | 	wrlong	result1, objptr
0fe1c     3A 00 00 FF 
0fe20     7C E5 85 F1 | 	sub	objptr, ##30076
0fe24     F2 FA 01 F6 | 	mov	result1, objptr
0fe28     00 38 01 FF 
0fe2c     00 FA 45 F5 | 	or	result1, ##40894464
0fe30     3A 00 00 FF 
0fe34     80 E5 05 F1 | 	add	objptr, ##30080
0fe38     F2 FA 61 FC | 	wrlong	result1, objptr
0fe3c     3A 00 00 FF 
0fe40     80 E5 85 F1 | 	sub	objptr, ##30080
0fe44     F2 FA 01 F6 | 	mov	result1, objptr
0fe48     00 40 01 FF 
0fe4c     00 FA 45 F5 | 	or	result1, ##41943040
0fe50     3A 00 00 FF 
0fe54     84 E5 05 F1 | 	add	objptr, ##30084
0fe58     F2 FA 61 FC | 	wrlong	result1, objptr
0fe5c     3A 00 00 FF 
0fe60     84 E5 85 F1 | 	sub	objptr, ##30084
0fe64     F2 FA 01 F6 | 	mov	result1, objptr
0fe68     00 48 01 FF 
0fe6c     00 FA 45 F5 | 	or	result1, ##42991616
0fe70     3A 00 00 FF 
0fe74     8C E5 05 F1 | 	add	objptr, ##30092
0fe78     F2 FA 61 FC | 	wrlong	result1, objptr
0fe7c     3A 00 00 FF 
0fe80     8C E5 85 F1 | 	sub	objptr, ##30092
0fe84     F2 FA 01 F6 | 	mov	result1, objptr
0fe88     00 50 01 FF 
0fe8c     00 FA 45 F5 | 	or	result1, ##44040192
0fe90     3A 00 00 FF 
0fe94     90 E5 05 F1 | 	add	objptr, ##30096
0fe98     F2 FA 61 FC | 	wrlong	result1, objptr
0fe9c     3A 00 00 FF 
0fea0     90 E5 85 F1 | 	sub	objptr, ##30096
0fea4     F2 FA 01 F6 | 	mov	result1, objptr
0fea8     00 58 01 FF 
0feac     00 FA 45 F5 | 	or	result1, ##45088768
0feb0     3A 00 00 FF 
0feb4     90 E4 05 F1 | 	add	objptr, ##29840
0feb8     F2 FA 61 FC | 	wrlong	result1, objptr
0febc     3A 00 00 FF 
0fec0     90 E4 85 F1 | 	sub	objptr, ##29840
0fec4     F2 FA 01 F6 | 	mov	result1, objptr
0fec8     00 60 01 FF 
0fecc     00 FA 45 F5 | 	or	result1, ##46137344
0fed0     3A 00 00 FF 
0fed4     C0 E4 05 F1 | 	add	objptr, ##29888
0fed8     F2 FA 61 FC | 	wrlong	result1, objptr
0fedc     3A 00 00 FF 
0fee0     C0 E4 85 F1 | 	sub	objptr, ##29888
0fee4     F2 FA 01 F6 | 	mov	result1, objptr
0fee8     00 68 01 FF 
0feec     00 FA 45 F5 | 	or	result1, ##47185920
0fef0     3A 00 00 FF 
0fef4     BC E4 05 F1 | 	add	objptr, ##29884
0fef8     F2 FA 61 FC | 	wrlong	result1, objptr
0fefc     3A 00 00 FF 
0ff00     BC E4 85 F1 | 	sub	objptr, ##29884
0ff04     F2 FA 01 F6 | 	mov	result1, objptr
0ff08     00 70 01 FF 
0ff0c     00 FA 45 F5 | 	or	result1, ##48234496
0ff10     3A 00 00 FF 
0ff14     60 E4 05 F1 | 	add	objptr, ##29792
0ff18     F2 FA 61 FC | 	wrlong	result1, objptr
0ff1c     3A 00 00 FF 
0ff20     60 E4 85 F1 | 	sub	objptr, ##29792
0ff24     F2 FA 01 F6 | 	mov	result1, objptr
0ff28     00 78 01 FF 
0ff2c     00 FA 45 F5 | 	or	result1, ##49283072
0ff30     3A 00 00 FF 
0ff34     64 E4 05 F1 | 	add	objptr, ##29796
0ff38     F2 FA 61 FC | 	wrlong	result1, objptr
0ff3c     3A 00 00 FF 
0ff40     64 E4 85 F1 | 	sub	objptr, ##29796
0ff44     F2 FA 01 F6 | 	mov	result1, objptr
0ff48     38 FA 25 F4 | 	bith	result1, #56
0ff4c     3A 00 00 FF 
0ff50     CC E4 05 F1 | 	add	objptr, ##29900
0ff54     F2 FA 61 FC | 	wrlong	result1, objptr
0ff58     3A 00 00 FF 
0ff5c     CC E4 85 F1 | 	sub	objptr, ##29900
0ff60     F2 FA 01 F6 | 	mov	result1, objptr
0ff64     00 88 01 FF 
0ff68     00 FA 45 F5 | 	or	result1, ##51380224
0ff6c     3A 00 00 FF 
0ff70     74 E5 05 F1 | 	add	objptr, ##30068
0ff74     F2 FA 61 FC | 	wrlong	result1, objptr
0ff78     3A 00 00 FF 
0ff7c     74 E5 85 F1 | 	sub	objptr, ##30068
0ff80     F2 FA 01 F6 | 	mov	result1, objptr
0ff84     00 90 01 FF 
0ff88     00 FA 45 F5 | 	or	result1, ##52428800
0ff8c     3A 00 00 FF 
0ff90     88 E5 05 F1 | 	add	objptr, ##30088
0ff94     F2 FA 61 FC | 	wrlong	result1, objptr
0ff98     3A 00 00 FF 
0ff9c     88 E5 85 F1 | 	sub	objptr, ##30088
0ffa0     F2 FA 01 F6 | 	mov	result1, objptr
0ffa4     00 98 01 FF 
0ffa8     00 FA 45 F5 | 	or	result1, ##53477376
0ffac     3A 00 00 FF 
0ffb0     94 E5 05 F1 | 	add	objptr, ##30100
0ffb4     F2 FA 61 FC | 	wrlong	result1, objptr
0ffb8     3A 00 00 FF 
0ffbc     94 E5 85 F1 | 	sub	objptr, ##30100
0ffc0     F2 FA 01 F6 | 	mov	result1, objptr
0ffc4     00 A0 01 FF 
0ffc8     00 FA 45 F5 | 	or	result1, ##54525952
0ffcc     3A 00 00 FF 
0ffd0     98 E5 05 F1 | 	add	objptr, ##30104
0ffd4     F2 FA 61 FC | 	wrlong	result1, objptr
0ffd8     3A 00 00 FF 
0ffdc     98 E5 85 F1 | 	sub	objptr, ##30104
0ffe0     F2 FA 01 F6 | 	mov	result1, objptr
0ffe4     00 A8 01 FF 
0ffe8     00 FA 45 F5 | 	or	result1, ##55574528
0ffec     3A 00 00 FF 
0fff0     9C E5 05 F1 | 	add	objptr, ##30108
0fff4     F2 FA 61 FC | 	wrlong	result1, objptr
0fff8     3A 00 00 FF 
0fffc     9C E5 85 F1 | 	sub	objptr, ##30108
10000     F2 FA 01 F6 | 	mov	result1, objptr
10004     00 B0 01 FF 
10008     00 FA 45 F5 | 	or	result1, ##56623104
1000c     3A 00 00 FF 
10010     A0 E5 05 F1 | 	add	objptr, ##30112
10014     F2 FA 61 FC | 	wrlong	result1, objptr
10018     3A 00 00 FF 
1001c     A0 E5 85 F1 | 	sub	objptr, ##30112
10020     F2 FA 01 F6 | 	mov	result1, objptr
10024     00 B8 01 FF 
10028     00 FA 45 F5 | 	or	result1, ##57671680
1002c     3A 00 00 FF 
10030     A4 E5 05 F1 | 	add	objptr, ##30116
10034     F2 FA 61 FC | 	wrlong	result1, objptr
10038     3A 00 00 FF 
1003c     A4 E5 85 F1 | 	sub	objptr, ##30116
10040     F2 FA 01 F6 | 	mov	result1, objptr
10044     57 FA 25 F4 | 	bith	result1, #87
10048     3A 00 00 FF 
1004c     A8 E5 05 F1 | 	add	objptr, ##30120
10050     F2 FA 61 FC | 	wrlong	result1, objptr
10054     3A 00 00 FF 
10058     A8 E5 85 F1 | 	sub	objptr, ##30120
1005c     F2 FA 01 F6 | 	mov	result1, objptr
10060     94 FA 25 F4 | 	bith	result1, #148
10064     3A 00 00 FF 
10068     70 E5 05 F1 | 	add	objptr, ##30064
1006c     F2 FA 61 FC | 	wrlong	result1, objptr
10070     3A 00 00 FF 
10074     70 E5 85 F1 | 	sub	objptr, ##30064
10078     F2 FA 01 F6 | 	mov	result1, objptr
1007c     00 C8 01 FF 
10080     00 FA 45 F5 | 	or	result1, ##59768832
10084     3A 00 00 FF 
10088     B0 E5 05 F1 | 	add	objptr, ##30128
1008c     F2 FA 61 FC | 	wrlong	result1, objptr
10090     3A 00 00 FF 
10094     B0 E5 85 F1 | 	sub	objptr, ##30128
10098     F2 FA 01 F6 | 	mov	result1, objptr
1009c     00 D0 01 FF 
100a0     00 FA 45 F5 | 	or	result1, ##60817408
100a4     3A 00 00 FF 
100a8     AC E5 05 F1 | 	add	objptr, ##30124
100ac     F2 FA 61 FC | 	wrlong	result1, objptr
100b0     3A 00 00 FF 
100b4     AC E5 85 F1 | 	sub	objptr, ##30124
100b8     F2 FA 01 F6 | 	mov	result1, objptr
100bc     00 D8 01 FF 
100c0     00 FA 45 F5 | 	or	result1, ##61865984
100c4     3A 00 00 FF 
100c8     C4 E5 05 F1 | 	add	objptr, ##30148
100cc     F2 FA 61 FC | 	wrlong	result1, objptr
100d0     3A 00 00 FF 
100d4     C4 E5 85 F1 | 	sub	objptr, ##30148
100d8     F2 FA 01 F6 | 	mov	result1, objptr
100dc     76 FA 25 F4 | 	bith	result1, #118
100e0     3A 00 00 FF 
100e4     C8 E5 05 F1 | 	add	objptr, ##30152
100e8     F2 FA 61 FC | 	wrlong	result1, objptr
100ec     3A 00 00 FF 
100f0     C8 E5 85 F1 | 	sub	objptr, ##30152
100f4     F2 FA 01 F6 | 	mov	result1, objptr
100f8     00 E8 01 FF 
100fc     00 FA 45 F5 | 	or	result1, ##63963136
10100     3A 00 00 FF 
10104     B4 E5 05 F1 | 	add	objptr, ##30132
10108     F2 FA 61 FC | 	wrlong	result1, objptr
1010c     3A 00 00 FF 
10110     B4 E5 85 F1 | 	sub	objptr, ##30132
10114     F2 FA 01 F6 | 	mov	result1, objptr
10118     95 FA 25 F4 | 	bith	result1, #149
1011c     3A 00 00 FF 
10120     B8 E5 05 F1 | 	add	objptr, ##30136
10124     F2 FA 61 FC | 	wrlong	result1, objptr
10128     3A 00 00 FF 
1012c     B8 E5 85 F1 | 	sub	objptr, ##30136
10130     F2 FA 01 F6 | 	mov	result1, objptr
10134     B4 FA 25 F4 | 	bith	result1, #180
10138     3A 00 00 FF 
1013c     BC E5 05 F1 | 	add	objptr, ##30140
10140     F2 FA 61 FC | 	wrlong	result1, objptr
10144     3A 00 00 FF 
10148     BC E5 85 F1 | 	sub	objptr, ##30140
1014c     F2 FA 01 F6 | 	mov	result1, objptr
10150     1A FA 25 F4 | 	bith	result1, #26
10154     3A 00 00 FF 
10158     C0 E5 05 F1 | 	add	objptr, ##30144
1015c     F2 FA 61 FC | 	wrlong	result1, objptr
10160     3A 00 00 FF 
10164     C0 E5 85 F1 | 	sub	objptr, ##30144
10168     F2 FA 01 F6 | 	mov	result1, objptr
1016c     00 08 02 FF 
10170     00 FA 45 F5 | 	or	result1, ##68157440
10174     3A 00 00 FF 
10178     D0 E5 05 F1 | 	add	objptr, ##30160
1017c     F2 FA 61 FC | 	wrlong	result1, objptr
10180     3A 00 00 FF 
10184     D0 E5 85 F1 | 	sub	objptr, ##30160
10188     F2 FA 01 F6 | 	mov	result1, objptr
1018c     00 10 02 FF 
10190     00 FA 45 F5 | 	or	result1, ##69206016
10194     3A 00 00 FF 
10198     CC E5 05 F1 | 	add	objptr, ##30156
1019c     F2 FA 61 FC | 	wrlong	result1, objptr
101a0     3A 00 00 FF 
101a4     CC E5 85 F1 | 	sub	objptr, ##30156
101a8     F2 FA 01 F6 | 	mov	result1, objptr
101ac     00 18 02 FF 
101b0     00 FA 45 F5 | 	or	result1, ##70254592
101b4     3A 00 00 FF 
101b8     DC E5 05 F1 | 	add	objptr, ##30172
101bc     F2 FA 61 FC | 	wrlong	result1, objptr
101c0     3A 00 00 FF 
101c4     DC E5 85 F1 | 	sub	objptr, ##30172
101c8     F2 FA 01 F6 | 	mov	result1, objptr
101cc     00 20 02 FF 
101d0     00 FA 45 F5 | 	or	result1, ##71303168
101d4     3A 00 00 FF 
101d8     D8 E5 05 F1 | 	add	objptr, ##30168
101dc     F2 FA 61 FC | 	wrlong	result1, objptr
101e0     3A 00 00 FF 
101e4     D8 E5 85 F1 | 	sub	objptr, ##30168
101e8     F2 FA 01 F6 | 	mov	result1, objptr
101ec     00 28 02 FF 
101f0     00 FA 45 F5 | 	or	result1, ##72351744
101f4     3A 00 00 FF 
101f8     D4 E5 05 F1 | 	add	objptr, ##30164
101fc     F2 FA 61 FC | 	wrlong	result1, objptr
10200     3A 00 00 FF 
10204     D4 E5 85 F1 | 	sub	objptr, ##30164
10208     F2 FA 01 F6 | 	mov	result1, objptr
1020c     00 30 02 FF 
10210     00 FA 45 F5 | 	or	result1, ##73400320
10214     3A 00 00 FF 
10218     E0 E5 05 F1 | 	add	objptr, ##30176
1021c     F2 FA 61 FC | 	wrlong	result1, objptr
10220     3A 00 00 FF 
10224     E0 E5 85 F1 | 	sub	objptr, ##30176
10228     F2 FA 01 F6 | 	mov	result1, objptr
1022c     00 38 02 FF 
10230     00 FA 45 F5 | 	or	result1, ##74448896
10234     3A 00 00 FF 
10238     E4 E5 05 F1 | 	add	objptr, ##30180
1023c     F2 FA 61 FC | 	wrlong	result1, objptr
10240     3A 00 00 FF 
10244     E4 E5 85 F1 | 	sub	objptr, ##30180
10248     F2 FA 01 F6 | 	mov	result1, objptr
1024c     00 40 02 FF 
10250     00 FA 45 F5 | 	or	result1, ##75497472
10254     3A 00 00 FF 
10258     78 E4 05 F1 | 	add	objptr, ##29816
1025c     F2 FA 61 FC | 	wrlong	result1, objptr
10260     3A 00 00 FF 
10264     78 E4 85 F1 | 	sub	objptr, ##29816
10268     F2 FA 01 F6 | 	mov	result1, objptr
1026c     00 48 02 FF 
10270     00 FA 45 F5 | 	or	result1, ##76546048
10274     3A 00 00 FF 
10278     E8 E5 05 F1 | 	add	objptr, ##30184
1027c     F2 FA 61 FC | 	wrlong	result1, objptr
10280     3A 00 00 FF 
10284     E8 E5 85 F1 | 	sub	objptr, ##30184
10288                 | _init_commands_ret
10288     2D 00 64 FD | 	ret
1028c                 | 
1028c                 | ' 
1028c                 | ' ''--------------------------------Error strings -------------------------------------
1028c                 | ' 
1028c                 | ' sub init_error_strings
1028c                 | _init_error_strings
1028c     18 01 00 FF 
10290     88 01 06 F6 | 	mov	_var01, ##@LR__4234
10294     3C 00 00 FF 
10298     40 E4 05 F1 | 	add	objptr, ##30784
1029c     F2 00 62 FC | 	wrlong	_var01, objptr
102a0     18 01 00 FF 
102a4     89 01 06 F6 | 	mov	_var01, ##@LR__4235
102a8     04 E4 05 F1 | 	add	objptr, #4
102ac     F2 00 62 FC | 	wrlong	_var01, objptr
102b0     18 01 00 FF 
102b4     AE 01 06 F6 | 	mov	_var01, ##@LR__4236
102b8     04 E4 05 F1 | 	add	objptr, #4
102bc     F2 00 62 FC | 	wrlong	_var01, objptr
102c0     18 01 00 FF 
102c4     CF 01 06 F6 | 	mov	_var01, ##@LR__4237
102c8     04 E4 05 F1 | 	add	objptr, #4
102cc     F2 00 62 FC | 	wrlong	_var01, objptr
102d0     18 01 00 FF 
102d4     E9 01 06 F6 | 	mov	_var01, ##@LR__4238
102d8     04 E4 05 F1 | 	add	objptr, #4
102dc     F2 00 62 FC | 	wrlong	_var01, objptr
102e0     19 01 00 FF 
102e4     05 00 06 F6 | 	mov	_var01, ##@LR__4239
102e8     04 E4 05 F1 | 	add	objptr, #4
102ec     F2 00 62 FC | 	wrlong	_var01, objptr
102f0     19 01 00 FF 
102f4     27 00 06 F6 | 	mov	_var01, ##@LR__4240
102f8     04 E4 05 F1 | 	add	objptr, #4
102fc     F2 00 62 FC | 	wrlong	_var01, objptr
10300     19 01 00 FF 
10304     55 00 06 F6 | 	mov	_var01, ##@LR__4241
10308     04 E4 05 F1 | 	add	objptr, #4
1030c     F2 00 62 FC | 	wrlong	_var01, objptr
10310     19 01 00 FF 
10314     80 00 06 F6 | 	mov	_var01, ##@LR__4242
10318     04 E4 05 F1 | 	add	objptr, #4
1031c     F2 00 62 FC | 	wrlong	_var01, objptr
10320     19 01 00 FF 
10324     99 00 06 F6 | 	mov	_var01, ##@LR__4243
10328     04 E4 05 F1 | 	add	objptr, #4
1032c     F2 00 62 FC | 	wrlong	_var01, objptr
10330     19 01 00 FF 
10334     BA 00 06 F6 | 	mov	_var01, ##@LR__4244
10338     04 E4 05 F1 | 	add	objptr, #4
1033c     F2 00 62 FC | 	wrlong	_var01, objptr
10340     19 01 00 FF 
10344     D1 00 06 F6 | 	mov	_var01, ##@LR__4245
10348     04 E4 05 F1 | 	add	objptr, #4
1034c     F2 00 62 FC | 	wrlong	_var01, objptr
10350     19 01 00 FF 
10354     EF 00 06 F6 | 	mov	_var01, ##@LR__4246
10358     04 E4 05 F1 | 	add	objptr, #4
1035c     F2 00 62 FC | 	wrlong	_var01, objptr
10360     19 01 00 FF 
10364     13 01 06 F6 | 	mov	_var01, ##@LR__4247
10368     04 E4 05 F1 | 	add	objptr, #4
1036c     F2 00 62 FC | 	wrlong	_var01, objptr
10370     19 01 00 FF 
10374     3A 01 06 F6 | 	mov	_var01, ##@LR__4248
10378     04 E4 05 F1 | 	add	objptr, #4
1037c     F2 00 62 FC | 	wrlong	_var01, objptr
10380     19 01 00 FF 
10384     56 01 06 F6 | 	mov	_var01, ##@LR__4249
10388     04 E4 05 F1 | 	add	objptr, #4
1038c     F2 00 62 FC | 	wrlong	_var01, objptr
10390     19 01 00 FF 
10394     67 01 06 F6 | 	mov	_var01, ##@LR__4250
10398     04 E4 05 F1 | 	add	objptr, #4
1039c     F2 00 62 FC | 	wrlong	_var01, objptr
103a0     19 01 00 FF 
103a4     77 01 06 F6 | 	mov	_var01, ##@LR__4251
103a8     04 E4 05 F1 | 	add	objptr, #4
103ac     F2 00 62 FC | 	wrlong	_var01, objptr
103b0     19 01 00 FF 
103b4     92 01 06 F6 | 	mov	_var01, ##@LR__4252
103b8     04 E4 05 F1 | 	add	objptr, #4
103bc     F2 00 62 FC | 	wrlong	_var01, objptr
103c0     19 01 00 FF 
103c4     A4 01 06 F6 | 	mov	_var01, ##@LR__4253
103c8     04 E4 05 F1 | 	add	objptr, #4
103cc     F2 00 62 FC | 	wrlong	_var01, objptr
103d0     19 01 00 FF 
103d4     BC 01 06 F6 | 	mov	_var01, ##@LR__4254
103d8     04 E4 05 F1 | 	add	objptr, #4
103dc     F2 00 62 FC | 	wrlong	_var01, objptr
103e0     19 01 00 FF 
103e4     D0 01 06 F6 | 	mov	_var01, ##@LR__4255
103e8     04 E4 05 F1 | 	add	objptr, #4
103ec     F2 00 62 FC | 	wrlong	_var01, objptr
103f0     19 01 00 FF 
103f4     E0 01 06 F6 | 	mov	_var01, ##@LR__4256
103f8     04 E4 05 F1 | 	add	objptr, #4
103fc     F2 00 62 FC | 	wrlong	_var01, objptr
10400     19 01 00 FF 
10404     FD 01 06 F6 | 	mov	_var01, ##@LR__4257
10408     04 E4 05 F1 | 	add	objptr, #4
1040c     F2 00 62 FC | 	wrlong	_var01, objptr
10410     1A 01 00 FF 
10414     0E 00 06 F6 | 	mov	_var01, ##@LR__4258
10418     04 E4 05 F1 | 	add	objptr, #4
1041c     F2 00 62 FC | 	wrlong	_var01, objptr
10420     1A 01 00 FF 
10424     1F 00 06 F6 | 	mov	_var01, ##@LR__4259
10428     04 E4 05 F1 | 	add	objptr, #4
1042c     F2 00 62 FC | 	wrlong	_var01, objptr
10430     1A 01 00 FF 
10434     4A 00 06 F6 | 	mov	_var01, ##@LR__4260
10438     04 E4 05 F1 | 	add	objptr, #4
1043c     F2 00 62 FC | 	wrlong	_var01, objptr
10440     1A 01 00 FF 
10444     66 00 06 F6 | 	mov	_var01, ##@LR__4261
10448     04 E4 05 F1 | 	add	objptr, #4
1044c     F2 00 62 FC | 	wrlong	_var01, objptr
10450     1A 01 00 FF 
10454     7C 00 06 F6 | 	mov	_var01, ##@LR__4262
10458     04 E4 05 F1 | 	add	objptr, #4
1045c     F2 00 62 FC | 	wrlong	_var01, objptr
10460     1A 01 00 FF 
10464     89 00 06 F6 | 	mov	_var01, ##@LR__4263
10468     04 E4 05 F1 | 	add	objptr, #4
1046c     F2 00 62 FC | 	wrlong	_var01, objptr
10470     1A 01 00 FF 
10474     9B 00 06 F6 | 	mov	_var01, ##@LR__4264
10478     04 E4 05 F1 | 	add	objptr, #4
1047c     F2 00 62 FC | 	wrlong	_var01, objptr
10480     1A 01 00 FF 
10484     AC 00 06 F6 | 	mov	_var01, ##@LR__4265
10488     04 E4 05 F1 | 	add	objptr, #4
1048c     F2 00 62 FC | 	wrlong	_var01, objptr
10490     1A 01 00 FF 
10494     C8 00 06 F6 | 	mov	_var01, ##@LR__4266
10498     04 E4 05 F1 | 	add	objptr, #4
1049c     F2 00 62 FC | 	wrlong	_var01, objptr
104a0     1A 01 00 FF 
104a4     D9 00 06 F6 | 	mov	_var01, ##@LR__4267
104a8     04 E4 05 F1 | 	add	objptr, #4
104ac     F2 00 62 FC | 	wrlong	_var01, objptr
104b0     1A 01 00 FF 
104b4     E8 00 06 F6 | 	mov	_var01, ##@LR__4268
104b8     04 E4 05 F1 | 	add	objptr, #4
104bc     F2 00 62 FC | 	wrlong	_var01, objptr
104c0     1A 01 00 FF 
104c4     03 01 06 F6 | 	mov	_var01, ##@LR__4269
104c8     04 E4 05 F1 | 	add	objptr, #4
104cc     F2 00 62 FC | 	wrlong	_var01, objptr
104d0     1A 01 00 FF 
104d4     37 01 06 F6 | 	mov	_var01, ##@LR__4270
104d8     04 E4 05 F1 | 	add	objptr, #4
104dc     F2 00 62 FC | 	wrlong	_var01, objptr
104e0     1A 01 00 FF 
104e4     50 01 06 F6 | 	mov	_var01, ##@LR__4271
104e8     04 E4 05 F1 | 	add	objptr, #4
104ec     F2 00 62 FC | 	wrlong	_var01, objptr
104f0     1A 01 00 FF 
104f4     6C 01 06 F6 | 	mov	_var01, ##@LR__4272
104f8     04 E4 05 F1 | 	add	objptr, #4
104fc     F2 00 62 FC | 	wrlong	_var01, objptr
10500     1A 01 00 FF 
10504     8A 01 06 F6 | 	mov	_var01, ##@LR__4273
10508     04 E4 05 F1 | 	add	objptr, #4
1050c     F2 00 62 FC | 	wrlong	_var01, objptr
10510     1A 01 00 FF 
10514     A3 01 06 F6 | 	mov	_var01, ##@LR__4274
10518     04 E4 05 F1 | 	add	objptr, #4
1051c     F2 00 62 FC | 	wrlong	_var01, objptr
10520     1A 01 00 FF 
10524     C2 01 06 F6 | 	mov	_var01, ##@LR__4275
10528     04 E4 05 F1 | 	add	objptr, #4
1052c     F2 00 62 FC | 	wrlong	_var01, objptr
10530     1A 01 00 FF 
10534     D1 01 06 F6 | 	mov	_var01, ##@LR__4276
10538     04 E4 05 F1 | 	add	objptr, #4
1053c     F2 00 62 FC | 	wrlong	_var01, objptr
10540     1A 01 00 FF 
10544     FF 01 06 F6 | 	mov	_var01, ##@LR__4277
10548     04 E4 05 F1 | 	add	objptr, #4
1054c     F2 00 62 FC | 	wrlong	_var01, objptr
10550     1B 01 00 FF 
10554     0D 00 06 F6 | 	mov	_var01, ##@LR__4278
10558     04 E4 05 F1 | 	add	objptr, #4
1055c     F2 00 62 FC | 	wrlong	_var01, objptr
10560     1B 01 00 FF 
10564     22 00 06 F6 | 	mov	_var01, ##@LR__4279
10568     04 E4 05 F1 | 	add	objptr, #4
1056c     F2 00 62 FC | 	wrlong	_var01, objptr
10570     1B 01 00 FF 
10574     46 00 06 F6 | 	mov	_var01, ##@LR__4280
10578     04 E4 05 F1 | 	add	objptr, #4
1057c     F2 00 62 FC | 	wrlong	_var01, objptr
10580     3C 00 00 FF 
10584     F8 E4 85 F1 | 	sub	objptr, ##30968
10588                 | _init_error_strings_ret
10588     2D 00 64 FD | 	ret
1058c                 | 
1058c                 | '         
1058c                 | ' sub printerror(err as integer)
1058c                 | _printerror
1058c     01 4A 05 F6 | 	mov	COUNT_, #1
10590     A8 00 A0 FD | 	call	#pushregs_
10594     09 1F 02 F6 | 	mov	local01, arg01
10598     1B 01 00 FF 
1059c     5D 12 06 F6 | 	mov	arg01, ##@LR__4281
105a0     B8 24 B0 FD | 	call	#_hg010b_spin2_write
105a4     0F 13 02 F6 | 	mov	arg01, local01
105a8     B0 26 B0 FD | 	call	#_hg010b_spin2_inttostr
105ac     FD 12 02 F6 | 	mov	arg01, result1
105b0     A8 24 B0 FD | 	call	#_hg010b_spin2_write
105b4     1B 01 00 FF 
105b8     64 12 06 F6 | 	mov	arg01, ##@LR__4282
105bc     9C 24 B0 FD | 	call	#_hg010b_spin2_write
105c0     02 1E 66 F0 | 	shl	local01, #2
105c4     3C 00 00 FF 
105c8     40 E4 05 F1 | 	add	objptr, ##30784
105cc     F2 1E 02 F1 | 	add	local01, objptr
105d0     0F 13 02 FB | 	rdlong	arg01, local01
105d4     3C 00 00 FF 
105d8     40 E4 85 F1 | 	sub	objptr, ##30784
105dc                 | ' 
105dc                 | ' write(text)
105dc     7C 24 B0 FD | 	call	#_hg010b_spin2_write
105e0                 | ' crlf
105e0     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
105e4     A7 F0 03 F6 | 	mov	ptra, fp
105e8     B2 00 A0 FD | 	call	#popregs_
105ec                 | _printerror_ret
105ec     2D 00 64 FD | 	ret
105f0                 | 
105f0                 | ' 
105f0                 | ' '' ------------------------------- Hardware start/stop/initialization 
105f0                 | ' 
105f0                 | ' sub startpsram
105f0                 | _startpsram
105f0     00 12 06 F6 | 	mov	arg01, #0
105f4     0A 14 C6 F9 | 	decod	arg02, #10
105f8     0B 16 06 F6 | 	mov	arg03, #11
105fc     07 18 06 F6 | 	mov	arg04, #7
10600     0B 00 00 FF 
10604     C0 E4 05 F1 | 	add	objptr, ##5824
10608     5C 27 B0 FD | 	call	#_psram_spin2_startx
1060c     22 00 00 FF 
10610     0C E5 05 F1 | 	add	objptr, ##17676
10614     F2 FA 61 FC | 	wrlong	result1, objptr
10618                 | '     return $7FF00 + cog*12
10618     0C E4 05 F1 | 	add	objptr, #12
1061c     FF 03 80 FF 
10620     F2 00 6A FC | 	wrlong	##524032, objptr
10624     2D 00 00 FF 
10628     D8 E5 85 F1 | 	sub	objptr, ##23512
1062c                 | _startpsram_ret
1062c     2D 00 64 FD | 	ret
10630                 | 
10630                 | ' 
10630                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
10630                 | _startvideo
10630     01 4A 05 F6 | 	mov	COUNT_, #1
10634     A8 00 A0 FD | 	call	#pushregs_
10638     2D 00 00 FF 
1063c     D8 E5 05 F1 | 	add	objptr, ##23512
10640     F2 18 02 FB | 	rdlong	arg04, objptr
10644     2D 00 00 FF 
10648     D8 E5 85 F1 | 	sub	objptr, ##23512
1064c     0A 13 02 F6 | 	mov	arg01, arg02
10650     0C 15 02 F6 | 	mov	arg02, arg04
10654     18 0F B0 FD | 	call	#_hg010b_spin2_start
10658     2D 00 00 FF 
1065c     C4 E5 05 F1 | 	add	objptr, ##23492
10660     F2 FA 61 FC | 	wrlong	result1, objptr
10664                 | ' 
10664                 | ' videocog=v.start(pin,mbox)
10664                 | ' 
10664                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
10664     00 1E 06 F6 | 	mov	local01, #0
10668     22 00 00 FF 
1066c     04 E5 85 F1 | 	sub	objptr, ##17668
10670                 | LR__1400
10670     0F 13 02 F6 | 	mov	arg01, local01
10674     00 28 00 FF 
10678     00 14 06 F6 | 	mov	arg02, ##5242880
1067c     40 2B B0 FD | 	call	#_psram_spin2_setQos
10680     01 1E 06 F1 | 	add	local01, #1
10684     08 1E 56 F2 | 	cmps	local01, #8 wc
10688     E4 FF 9F CD |  if_b	jmp	#LR__1400
1068c     22 00 00 FF 
10690     04 E5 05 F1 | 	add	objptr, ##17668
10694     F2 12 02 FB | 	rdlong	arg01, objptr
10698     7A 00 02 FF 
1069c     00 14 06 F6 | 	mov	arg02, ##67171328
106a0     22 00 00 FF 
106a4     04 E5 85 F1 | 	sub	objptr, ##17668
106a8     14 2B B0 FD | 	call	#_psram_spin2_setQos
106ac     0B 00 00 FF 
106b0     C0 E4 85 F1 | 	sub	objptr, ##5824
106b4                 | ' psram.setQoS(videocog, $0400f400) 
106b4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
106b4     F2 14 02 F6 | 	mov	arg02, objptr
106b8     00 50 02 FF 
106bc     00 14 46 F5 | 	or	arg02, ##77594624
106c0     00 16 06 F6 | 	mov	arg03, #0
106c4     00 18 06 F6 | 	mov	arg04, #0
106c8     00 12 06 F6 | 	mov	arg01, #0
106cc     70 3D B0 FD | 	call	#__system___basic_open
106d0                 | ' return videocog
106d0     2D 00 00 FF 
106d4     C4 E5 05 F1 | 	add	objptr, ##23492
106d8     F2 FA 01 FB | 	rdlong	result1, objptr
106dc     2D 00 00 FF 
106e0     C4 E5 85 F1 | 	sub	objptr, ##23492
106e4     A7 F0 03 F6 | 	mov	ptra, fp
106e8     B2 00 A0 FD | 	call	#popregs_
106ec                 | _startvideo_ret
106ec     2D 00 64 FD | 	ret
106f0                 | 
106f0                 | ' 
106f0                 | ' function pspeek(adr as ulong) as ubyte
106f0                 | _pspeek
106f0     00 4A 05 F6 | 	mov	COUNT_, #0
106f4     A8 00 A0 FD | 	call	#pushregs_
106f8     0C F0 07 F1 | 	add	ptra, #12
106fc     04 4E 05 F1 | 	add	fp, #4
10700     A7 12 62 FC | 	wrlong	arg01, fp
10704     04 4E 05 F1 | 	add	fp, #4
10708     A7 12 02 F6 | 	mov	arg01, fp
1070c     04 4E 85 F1 | 	sub	fp, #4
10710     A7 14 02 FB | 	rdlong	arg02, fp
10714     04 4E 85 F1 | 	sub	fp, #4
10718     01 16 06 F6 | 	mov	arg03, #1
1071c     0B 00 00 FF 
10720     C0 E4 05 F1 | 	add	objptr, ##5824
10724     6C 28 B0 FD | 	call	#_psram_spin2_read1
10728     0B 00 00 FF 
1072c     C0 E4 85 F1 | 	sub	objptr, ##5824
10730                 | ' psram.read1(varptr(res),adr,1)
10730                 | ' return res
10730     08 4E 05 F1 | 	add	fp, #8
10734     A7 FA C1 FA | 	rdbyte	result1, fp
10738     08 4E 85 F1 | 	sub	fp, #8
1073c     A7 F0 03 F6 | 	mov	ptra, fp
10740     B2 00 A0 FD | 	call	#popregs_
10744                 | _pspeek_ret
10744     2D 00 64 FD | 	ret
10748                 | 
10748                 | ' 
10748                 | ' function pslpeek(adr as ulong) as ulong
10748                 | _pslpeek
10748     00 4A 05 F6 | 	mov	COUNT_, #0
1074c     A8 00 A0 FD | 	call	#pushregs_
10750     0C F0 07 F1 | 	add	ptra, #12
10754     04 4E 05 F1 | 	add	fp, #4
10758     A7 12 62 FC | 	wrlong	arg01, fp
1075c     04 4E 05 F1 | 	add	fp, #4
10760     A7 12 02 F6 | 	mov	arg01, fp
10764     04 4E 85 F1 | 	sub	fp, #4
10768     A7 14 02 FB | 	rdlong	arg02, fp
1076c     04 4E 85 F1 | 	sub	fp, #4
10770     04 16 06 F6 | 	mov	arg03, #4
10774     0B 00 00 FF 
10778     C0 E4 05 F1 | 	add	objptr, ##5824
1077c     14 28 B0 FD | 	call	#_psram_spin2_read1
10780     0B 00 00 FF 
10784     C0 E4 85 F1 | 	sub	objptr, ##5824
10788                 | ' psram.read1(varptr(res),adr,4)
10788                 | ' return res
10788     08 4E 05 F1 | 	add	fp, #8
1078c     A7 FA 01 FB | 	rdlong	result1, fp
10790     08 4E 85 F1 | 	sub	fp, #8
10794     A7 F0 03 F6 | 	mov	ptra, fp
10798     B2 00 A0 FD | 	call	#popregs_
1079c                 | _pslpeek_ret
1079c     2D 00 64 FD | 	ret
107a0                 | 
107a0                 | ' 
107a0                 | ' '' ------------------------------- USB keyboard scan to char translator
107a0                 | ' 
107a0                 | ' function scantochar(key)
107a0                 | _scantochar
107a0                 | ' 
107a0                 | ' select case (key shr 8) and 255
107a0     09 01 02 F6 | 	mov	_var01, arg01
107a4     08 00 C6 F0 | 	sar	_var01, #8
107a8     FF 00 0E F5 | 	and	_var01, #255 wz
107ac     24 00 90 AD |  if_e	jmp	#LR__1410
107b0     02 00 0E F2 | 	cmp	_var01, #2 wz
107b4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
107b8     30 00 90 AD |  if_e	jmp	#LR__1411
107bc     40 00 0E F2 | 	cmp	_var01, #64 wz
107c0     44 00 90 AD |  if_e	jmp	#LR__1412
107c4     42 00 0E F2 | 	cmp	_var01, #66 wz
107c8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
107cc     70 00 90 5D |  if_ne	jmp	#LR__1414
107d0     50 00 90 FD | 	jmp	#LR__1413
107d4                 | LR__1410
107d4     09 FB 01 F6 | 	mov	result1, arg01
107d8     7F FA 05 F5 | 	and	result1, #127
107dc     02 FA 65 F0 | 	shl	result1, #2
107e0     F5 FA 01 F1 | 	add	result1, ptr__dat__
107e4     FD FA C1 FA | 	rdbyte	result1, result1
107e8     54 00 90 FD | 	jmp	#_scantochar_ret
107ec                 | LR__1411
107ec     09 FB 01 F6 | 	mov	result1, arg01
107f0     7F FA 05 F5 | 	and	result1, #127
107f4     02 FA 65 F0 | 	shl	result1, #2
107f8     01 FA 05 F1 | 	add	result1, #1
107fc     F5 FA 01 F1 | 	add	result1, ptr__dat__
10800     FD FA C1 FA | 	rdbyte	result1, result1
10804     38 00 90 FD | 	jmp	#_scantochar_ret
10808                 | LR__1412
10808     09 FB 01 F6 | 	mov	result1, arg01
1080c     7F FA 05 F5 | 	and	result1, #127
10810     02 FA 65 F0 | 	shl	result1, #2
10814     02 FA 05 F1 | 	add	result1, #2
10818     F5 FA 01 F1 | 	add	result1, ptr__dat__
1081c     FD FA C1 FA | 	rdbyte	result1, result1
10820     1C 00 90 FD | 	jmp	#_scantochar_ret
10824                 | LR__1413
10824     09 FB 01 F6 | 	mov	result1, arg01
10828     7F FA 05 F5 | 	and	result1, #127
1082c     02 FA 65 F0 | 	shl	result1, #2
10830     03 FA 05 F1 | 	add	result1, #3
10834     F5 FA 01 F1 | 	add	result1, ptr__dat__
10838     FD FA C1 FA | 	rdbyte	result1, result1
1083c     00 00 90 FD | 	jmp	#_scantochar_ret
10840                 | LR__1414
10840                 | _scantochar_ret
10840     2D 00 64 FD | 	ret
10844                 | 
10844                 | _program
10844     0B 4A 05 F6 | 	mov	COUNT_, #11
10848     A8 00 A0 FD | 	call	#pushregs_
1084c     A0 FD BF FD | 	call	#_startpsram
10850     40 12 06 F6 | 	mov	arg01, #64
10854     00 14 06 F6 | 	mov	arg02, #0
10858     00 16 06 F6 | 	mov	arg03, #0
1085c     D0 FD BF FD | 	call	#_startvideo
10860     00 12 06 F6 | 	mov	arg01, #0
10864     00 14 06 F6 | 	mov	arg02, #0
10868     00 16 06 F6 | 	mov	arg03, #0
1086c     0B 00 00 FF 
10870     C0 E4 05 F1 | 	add	objptr, ##5824
10874     5C 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
10878     FE 1C 02 F6 | 	mov	arg06, result2
1087c     22 00 00 FF 
10880     00 E5 05 F1 | 	add	objptr, ##17664
10884     F2 FA 61 FC | 	wrlong	result1, objptr
10888     14 E4 05 F1 | 	add	objptr, #20
1088c     F2 1C 62 FC | 	wrlong	arg06, objptr
10890     2D 00 00 FF 
10894     D4 E5 85 F1 | 	sub	objptr, ##23508
10898     32 12 06 F6 | 	mov	arg01, #50
1089c     EC 33 B0 FD | 	call	#__system___waitms
108a0     2D 00 00 FF 
108a4     D4 E5 05 F1 | 	add	objptr, ##23508
108a8     F2 12 02 FB | 	rdlong	arg01, objptr
108ac     2D 00 00 FF 
108b0     D4 E5 85 F1 | 	sub	objptr, ##23508
108b4     14 12 06 F1 | 	add	arg01, #20
108b8     20 00 80 FF 
108bc     09 01 58 FC | 	wrword	##16384, arg01
108c0     04 2A B0 FD | 	call	#_usbnew_spin2_start
108c4     2D 00 00 FF 
108c8     C8 E5 05 F1 | 	add	objptr, ##23496
108cc     F2 FA 61 FC | 	wrlong	result1, objptr
108d0                 | '   mouse_limits[0] := xlim
108d0     0F 00 00 FF 
108d4     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
108d8     01 00 80 FF 
108dc     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
108e0                 | '   mouse_limits[1] := ylim
108e0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
108e4     01 00 80 FF 
108e8     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
108ec     2D 00 00 FF 
108f0     BB E4 85 F1 | 	sub	objptr, ##23227
108f4     F2 12 02 F6 | 	mov	arg01, objptr
108f8     0D E5 85 F1 | 	sub	objptr, #269
108fc     C4 12 06 F1 | 	add	arg01, #196
10900                 | '   mouse_outptr := ptr
10900     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
10904     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
10908     0F 00 00 FF 
1090c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
10910     07 00 00 FF 
10914     72 EB 05 F1 | 	add	ptr__dat__, ##3954
10918     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1091c     07 00 00 FF 
10920     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
10924     10 12 06 F6 | 	mov	arg01, #16
10928     3C 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1092c     10 12 06 F6 | 	mov	arg01, #16
10930     20 14 06 F6 | 	mov	arg02, #32
10934     20 16 06 F6 | 	mov	arg03, #32
10938     A0 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
1093c     09 12 C6 F9 | 	decod	arg01, #9
10940     20 15 06 F6 | 	mov	arg02, #288
10944     3C 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
10948     F2 1C 02 F6 | 	mov	arg06, objptr
1094c     50 00 00 FF 
10950     AC E5 05 F1 | 	add	objptr, ##41388
10954     F2 1A 02 F6 | 	mov	arg05, objptr
10958     0D 1D 62 FC | 	wrlong	arg06, arg05
1095c     04 1A 06 F1 | 	add	arg05, #4
10960     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
10964     EF 14 02 F6 | 	mov	arg02, entryptr__
10968     F2 1E 02 F6 | 	mov	local01, objptr
1096c     1E FA 05 F6 | 	mov	result1, #30
10970     28 1E 62 FD | 	setq	local01
10974     0A FB F1 FC | 	coginit	result1, arg02 wc
10978     01 FA 65 C6 |  if_b	neg	result1, #1
1097c     04 E4 85 F1 | 	sub	objptr, #4
10980     F2 FA 61 FC | 	wrlong	result1, objptr
10984     01 00 00 FF 
10988     90 E4 05 F1 | 	add	objptr, ##656
1098c     F2 00 68 FC | 	wrlong	#0, objptr
10990     24 00 00 FF 
10994     40 E4 85 F1 | 	sub	objptr, ##18496
10998     F2 04 68 FC | 	wrlong	#2, objptr
1099c     04 E4 05 F1 | 	add	objptr, #4
109a0     F2 26 69 FC | 	wrlong	#147, objptr
109a4     04 E4 05 F1 | 	add	objptr, #4
109a8     F2 34 69 FC | 	wrlong	#154, objptr
109ac     04 E4 05 F1 | 	add	objptr, #4
109b0     F2 08 68 FC | 	wrlong	#4, objptr
109b4     04 E4 85 F1 | 	sub	objptr, #4
109b8     F2 1C 02 FB | 	rdlong	arg06, objptr
109bc     14 E4 85 F1 | 	sub	objptr, #20
109c0     F2 1C 62 FC | 	wrlong	arg06, objptr
109c4     04 E4 05 F1 | 	add	objptr, #4
109c8     F2 00 68 FC | 	wrlong	#0, objptr
109cc     04 E4 05 F1 | 	add	objptr, #4
109d0     F2 00 68 FC | 	wrlong	#0, objptr
109d4     22 00 00 FF 
109d8     B0 E5 05 F1 | 	add	objptr, ##17840
109dc     F2 02 68 FC | 	wrlong	#1, objptr
109e0     14 00 00 FF 
109e4     7C E5 85 F1 | 	sub	objptr, ##10620
109e8     F2 18 68 FC | 	wrlong	#12, objptr
109ec     3C 00 00 FF 
109f0     28 E4 85 F1 | 	sub	objptr, ##30760
109f4     B8 EE BF FD | 	call	#_init_commands
109f8     90 F8 BF FD | 	call	#_init_error_strings
109fc     24 8C BF FD | 	call	#_do_new
10a00     2E 00 00 FF 
10a04     00 E4 05 F1 | 	add	objptr, ##23552
10a08     F2 12 02 FB | 	rdlong	arg01, objptr
10a0c     04 E4 85 F1 | 	sub	objptr, #4
10a10     F2 14 02 FB | 	rdlong	arg02, objptr
10a14     2D 00 00 FF 
10a18     FC E5 85 F1 | 	sub	objptr, ##23548
10a1c     80 1D B0 FD | 	call	#_hg010b_spin2_cls
10a20     2E 00 00 FF 
10a24     04 E4 05 F1 | 	add	objptr, ##23556
10a28     F2 12 02 FB | 	rdlong	arg01, objptr
10a2c     2E 00 00 FF 
10a30     04 E4 85 F1 | 	sub	objptr, ##23556
10a34     80 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
10a38                 | ' 
10a38                 | ' leading_spaces:=amount
10a38     01 00 00 FF 
10a3c     B2 E4 05 F1 | 	add	objptr, ##690
10a40     F2 04 68 FC | 	wrlong	#2, objptr
10a44     01 00 00 FF 
10a48     B2 E4 85 F1 | 	sub	objptr, ##690
10a4c     1B 01 00 FF 
10a50     67 20 06 F6 | 	mov	local02, ##@LR__4283
10a54     3D 12 06 F6 | 	mov	arg01, #61
10a58     3C 14 06 F6 | 	mov	arg02, #60
10a5c     3B 16 06 F6 | 	mov	arg03, #59
10a60     3A 18 06 F6 | 	mov	arg04, #58
10a64     9C 75 B0 FD | 	call	#__system___vfs_open_sdcardx
10a68     FD 14 02 F6 | 	mov	arg02, result1
10a6c     10 13 02 F6 | 	mov	arg01, local02
10a70     F0 32 B0 FD | 	call	#__system___mount
10a74     1B 01 00 FF 
10a78     6B 12 06 F6 | 	mov	arg01, ##@LR__4284
10a7c     A4 35 B0 FD | 	call	#__system___chdir
10a80     1B 01 00 FF 
10a84     73 20 06 F6 | 	mov	local02, ##@LR__4285
10a88     49 00 00 FF 
10a8c     58 E4 05 F1 | 	add	objptr, ##37464
10a90     F2 20 62 FC | 	wrlong	local02, objptr
10a94     1B 00 00 FF 
10a98     60 E4 85 F1 | 	sub	objptr, ##13920
10a9c     F2 12 02 FB | 	rdlong	arg01, objptr
10aa0     2D 00 00 FF 
10aa4     F8 E5 85 F1 | 	sub	objptr, ##23544
10aa8     01 12 66 F0 | 	shl	arg01, #1
10aac     01 14 06 F6 | 	mov	arg02, #1
10ab0     44 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
10ab4                 | ' 
10ab4                 | ' init_commands
10ab4                 | ' init_error_strings
10ab4                 | ' do_new
10ab4                 | ' 
10ab4                 | ' 
10ab4                 | ' cls(ink, paper)
10ab4                 | ' 'v.setfontfamily(4) 				' use ST Mono font
10ab4                 | ' v.setfontfamily(font) 				' use ST Mono font
10ab4                 | ' v.setleadingspaces(2)
10ab4                 | ' mount "/sd", _vfs_open_sdcard()
10ab4                 | ' chdir "/sd/bas"
10ab4                 | ' 
10ab4                 | ' currentdir$="/sd/bas"
10ab4                 | ' 
10ab4                 | ' position 2*editor_spaces,1 : print ver$
10ab4     00 12 06 F6 | 	mov	arg01, #0
10ab8     A8 84 B0 FD | 	call	#__system___getiolock_0306
10abc     FD 12 02 F6 | 	mov	arg01, result1
10ac0     BC 2F B0 FD | 	call	#__system___lockmem
10ac4     09 00 00 FF 
10ac8     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
10acc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
10ad0     09 00 00 FF 
10ad4     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
10ad8     00 12 06 F6 | 	mov	arg01, #0
10adc     00 16 06 F6 | 	mov	arg03, #0
10ae0     A8 3B B0 FD | 	call	#__system___basic_print_string
10ae4     00 12 06 F6 | 	mov	arg01, #0
10ae8     0A 14 06 F6 | 	mov	arg02, #10
10aec     00 16 06 F6 | 	mov	arg03, #0
10af0     40 3B B0 FD | 	call	#__system___basic_print_char
10af4     00 12 06 F6 | 	mov	arg01, #0
10af8     68 84 B0 FD | 	call	#__system___getiolock_0306
10afc     FD 00 68 FC | 	wrlong	#0, result1
10b00     F2 12 02 FB | 	rdlong	arg01, objptr
10b04     00 14 06 F6 | 	mov	arg02, #0
10b08     0A 16 06 F6 | 	mov	arg03, #10
10b0c     B0 50 B0 FD | 	call	#__system__Number_S
10b10     FD 12 02 F6 | 	mov	arg01, result1
10b14     1B 01 00 FF 
10b18     7B 14 06 F6 | 	mov	arg02, ##@LR__4286
10b1c     BC 2F B0 FD | 	call	#__system___string_concat
10b20     FD 20 02 F6 | 	mov	local02, result1
10b24     50 00 00 FF 
10b28     A0 E5 05 F1 | 	add	objptr, ##41376
10b2c     F2 20 62 FC | 	wrlong	local02, objptr
10b30     50 00 00 FF 
10b34     A0 E5 85 F1 | 	sub	objptr, ##41376
10b38                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
10b38     00 12 06 F6 | 	mov	arg01, #0
10b3c     24 84 B0 FD | 	call	#__system___getiolock_0306
10b40     FD 12 02 F6 | 	mov	arg01, result1
10b44     38 2F B0 FD | 	call	#__system___lockmem
10b48     50 00 00 FF 
10b4c     A0 E5 05 F1 | 	add	objptr, ##41376
10b50     F2 14 02 FB | 	rdlong	arg02, objptr
10b54     50 00 00 FF 
10b58     A0 E5 85 F1 | 	sub	objptr, ##41376
10b5c     00 12 06 F6 | 	mov	arg01, #0
10b60     00 16 06 F6 | 	mov	arg03, #0
10b64     24 3B B0 FD | 	call	#__system___basic_print_string
10b68     00 12 06 F6 | 	mov	arg01, #0
10b6c     0A 14 06 F6 | 	mov	arg02, #10
10b70     00 16 06 F6 | 	mov	arg03, #0
10b74     BC 3A B0 FD | 	call	#__system___basic_print_char
10b78     00 12 06 F6 | 	mov	arg01, #0
10b7c     E4 83 B0 FD | 	call	#__system___getiolock_0306
10b80     FD 00 68 FC | 	wrlong	#0, result1
10b84     2D 00 00 FF 
10b88     F8 E5 05 F1 | 	add	objptr, ##23544
10b8c     F2 12 02 FB | 	rdlong	arg01, objptr
10b90     2D 00 00 FF 
10b94     F8 E5 85 F1 | 	sub	objptr, ##23544
10b98     01 12 66 F0 | 	shl	arg01, #1
10b9c     04 14 06 F6 | 	mov	arg02, #4
10ba0     54 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
10ba4                 | ' position 2*editor_spaces,4 : print "Ready"
10ba4     00 12 06 F6 | 	mov	arg01, #0
10ba8     B8 83 B0 FD | 	call	#__system___getiolock_0306
10bac     FD 12 02 F6 | 	mov	arg01, result1
10bb0     CC 2E B0 FD | 	call	#__system___lockmem
10bb4     1B 01 00 FF 
10bb8     8D 14 06 F6 | 	mov	arg02, ##@LR__4287
10bbc     00 12 06 F6 | 	mov	arg01, #0
10bc0     00 16 06 F6 | 	mov	arg03, #0
10bc4     C4 3A B0 FD | 	call	#__system___basic_print_string
10bc8     FD 22 02 F6 | 	mov	local03, result1
10bcc     00 12 06 F6 | 	mov	arg01, #0
10bd0     0A 14 06 F6 | 	mov	arg02, #10
10bd4     00 16 06 F6 | 	mov	arg03, #0
10bd8     58 3A B0 FD | 	call	#__system___basic_print_char
10bdc     01 24 06 F6 | 	mov	local04, #1
10be0     00 12 06 F6 | 	mov	arg01, #0
10be4     7C 83 B0 FD | 	call	#__system___getiolock_0306
10be8     FD 00 68 FC | 	wrlong	#0, result1
10bec     00 26 06 F6 | 	mov	local05, #0
10bf0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
10bf0                 | ' 
10bf0                 | ' 
10bf0                 | ' '-------------------------------------------------------------------------------------------------------- 
10bf0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
10bf0                 | ' '--------------------------------------------------------------------------------------------------------
10bf0                 | ' 
10bf0                 | ' do
10bf0                 | LR__1420
10bf0     01 12 06 F6 | 	mov	arg01, #1
10bf4     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
10bf8     28 27 B0 FD | 	call	#_usbnew_spin2_get_key
10bfc     3C 00 00 FF 
10c00     38 E4 05 F1 | 	add	objptr, ##30776
10c04     F2 FA 61 FC | 	wrlong	result1, objptr
10c08                 | '   return hkbd_led_rep
10c08     13 00 00 FF 
10c0c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
10c10     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
10c14     13 00 00 FF 
10c18     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
10c1c     16 00 00 FF 
10c20     08 E4 05 F1 | 	add	objptr, ##11272
10c24     F2 FA 61 FC | 	wrlong	result1, objptr
10c28                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
10c28     16 00 00 FF 
10c2c     08 E4 85 F1 | 	sub	objptr, ##11272
10c30     F2 20 02 FB | 	rdlong	local02, objptr
10c34     3C 00 00 FF 
10c38     38 E4 85 F1 | 	sub	objptr, ##30776
10c3c     01 20 16 F2 | 	cmp	local02, #1 wc
10c40     BC 00 90 CD |  if_b	jmp	#LR__1421
10c44     3C 00 00 FF 
10c48     38 E4 05 F1 | 	add	objptr, ##30776
10c4c     F2 24 02 FB | 	rdlong	local04, objptr
10c50     3C 00 00 FF 
10c54     38 E4 85 F1 | 	sub	objptr, ##30776
10c58     12 23 02 F6 | 	mov	local03, local04
10c5c     04 22 16 F2 | 	cmp	local03, #4 wc
10c60     9C 00 90 3D |  if_ae	jmp	#LR__1421
10c64     50 00 00 FF 
10c68     A4 E5 05 F1 | 	add	objptr, ##41380
10c6c     F2 1E 02 FB | 	rdlong	local01, objptr
10c70     50 00 00 FF 
10c74     A4 E5 85 F1 | 	sub	objptr, ##41380
10c78     0F 27 02 F6 | 	mov	local05, local01
10c7c     01 26 0E F2 | 	cmp	local05, #1 wz
10c80     7C 00 90 5D |  if_ne	jmp	#LR__1421
10c84     04 00 00 FF 
10c88     94 EA 05 F1 | 	add	ptr__dat__, ##2196
10c8c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10c90     04 00 00 FF 
10c94     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
10c98     56 00 00 FF 
10c9c     44 22 06 F6 | 	mov	local03, ##44100
10ca0     0E 24 C6 F9 | 	decod	local04, #14
10ca4     00 26 06 F6 | 	mov	local05, #0
10ca8     03 00 00 FF 
10cac     DE 1E 06 F6 | 	mov	local01, ##1758
10cb0     07 12 06 F6 | 	mov	arg01, #7
10cb4     56 00 00 FF 
10cb8     44 16 06 F6 | 	mov	arg03, ##44100
10cbc     0E 18 C6 F9 | 	decod	arg04, #14
10cc0     00 1A 06 F6 | 	mov	arg05, #0
10cc4     03 00 00 FF 
10cc8     DE 1C 06 F6 | 	mov	arg06, ##1758
10ccc     0B 00 00 FF 
10cd0     C0 E4 05 F1 | 	add	objptr, ##5824
10cd4     74 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10cd8     0B 00 00 FF 
10cdc     C0 E4 85 F1 | 	sub	objptr, ##5824
10ce0     0A 12 06 F6 | 	mov	arg01, #10
10ce4     A4 2F B0 FD | 	call	#__system___waitms
10ce8     07 12 06 F6 | 	mov	arg01, #7
10cec     0B 00 00 FF 
10cf0     C0 E4 05 F1 | 	add	objptr, ##5824
10cf4     A4 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
10cf8     0B 00 00 FF 
10cfc     C0 E4 85 F1 | 	sub	objptr, ##5824
10d00                 | LR__1421
10d00                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
10d00     3C 00 00 FF 
10d04     38 E4 05 F1 | 	add	objptr, ##30776
10d08     F2 20 02 FB | 	rdlong	local02, objptr
10d0c     3C 00 00 FF 
10d10     38 E4 85 F1 | 	sub	objptr, ##30776
10d14     04 20 16 F2 | 	cmp	local02, #4 wc
10d18     80 00 90 CD |  if_b	jmp	#LR__1422
10d1c     3C 00 00 FF 
10d20     38 E4 05 F1 | 	add	objptr, ##30776
10d24     F2 24 02 FB | 	rdlong	local04, objptr
10d28     3C 00 00 FF 
10d2c     38 E4 85 F1 | 	sub	objptr, ##30776
10d30     12 23 02 F6 | 	mov	local03, local04
10d34     00 00 40 FF 
10d38     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
10d3c     3C 00 00 CF 
10d40     38 E4 05 C1 |  if_b	add	objptr, ##30776
10d44     F2 1E 02 CB |  if_b	rdlong	local01, objptr
10d48     3C 00 00 CF 
10d4c     38 E4 85 C1 |  if_b	sub	objptr, ##30776
10d50     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
10d54     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
10d58     40 00 90 3D |  if_ae	jmp	#LR__1422
10d5c     3C 00 00 FF 
10d60     38 E4 05 F1 | 	add	objptr, ##30776
10d64     F2 20 02 FB | 	rdlong	local02, objptr
10d68     04 E4 05 F1 | 	add	objptr, #4
10d6c     F2 20 62 FC | 	wrlong	local02, objptr
10d70     16 00 00 FF 
10d74     08 E4 05 F1 | 	add	objptr, ##11272
10d78     F2 02 68 FC | 	wrlong	#1, objptr
10d7c     16 00 00 FF 
10d80     08 E4 85 F1 | 	sub	objptr, ##11272
10d84     F2 20 02 FB | 	rdlong	local02, objptr
10d88     16 00 00 FF 
10d8c     0C E4 05 F1 | 	add	objptr, ##11276
10d90     F2 20 62 FC | 	wrlong	local02, objptr
10d94     52 00 00 FF 
10d98     48 E4 85 F1 | 	sub	objptr, ##42056
10d9c                 | LR__1422
10d9c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
10d9c     3C 00 00 FF 
10da0     38 E4 05 F1 | 	add	objptr, ##30776
10da4     F2 20 02 FB | 	rdlong	local02, objptr
10da8     3C 00 00 FF 
10dac     38 E4 85 F1 | 	sub	objptr, ##30776
10db0     00 00 40 FF 
10db4     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
10db8     52 00 00 3F 
10dbc     4C E4 05 31 |  if_ae	add	objptr, ##42060
10dc0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
10dc4     08 E4 85 31 |  if_ae	sub	objptr, #8
10dc8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
10dcc     52 00 00 3F 
10dd0     44 E4 85 31 |  if_ae	sub	objptr, ##42052
10dd4                 | ' if key=0 andalso rpt=1 then rptcnt+=1
10dd4     3C 00 00 FF 
10dd8     38 E4 05 F1 | 	add	objptr, ##30776
10ddc     F2 20 0A FB | 	rdlong	local02, objptr wz
10de0     3C 00 00 FF 
10de4     38 E4 85 F1 | 	sub	objptr, ##30776
10de8     52 00 00 AF 
10dec     44 E4 05 A1 |  if_e	add	objptr, ##42052
10df0     F2 24 02 AB |  if_e	rdlong	local04, objptr
10df4     52 00 00 AF 
10df8     44 E4 85 A1 |  if_e	sub	objptr, ##42052
10dfc     12 23 02 A6 |  if_e	mov	local03, local04
10e00     01 22 0E A2 |  if_e	cmp	local03, #1 wz
10e04     52 00 00 AF 
10e08     4C E4 05 A1 |  if_e	add	objptr, ##42060
10e0c     F2 20 02 AB |  if_e	rdlong	local02, objptr
10e10     01 20 06 A1 |  if_e	add	local02, #1
10e14     F2 20 62 AC |  if_e	wrlong	local02, objptr
10e18     52 00 00 AF 
10e1c     4C E4 85 A1 |  if_e	sub	objptr, ##42060
10e20                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
10e20     3C 00 00 FF 
10e24     38 E4 05 F1 | 	add	objptr, ##30776
10e28     F2 20 02 FB | 	rdlong	local02, objptr
10e2c     3C 00 00 FF 
10e30     38 E4 85 F1 | 	sub	objptr, ##30776
10e34     00 00 40 FF 
10e38     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
10e3c     44 00 90 3D |  if_ae	jmp	#LR__1424
10e40     52 00 00 FF 
10e44     4C E4 05 F1 | 	add	objptr, ##42060
10e48     F2 20 02 FB | 	rdlong	local02, objptr
10e4c     52 00 00 FF 
10e50     4C E4 85 F1 | 	sub	objptr, ##42060
10e54     19 20 0E F2 | 	cmp	local02, #25 wz
10e58     28 00 90 5D |  if_ne	jmp	#LR__1423
10e5c     3C 00 00 FF 
10e60     3C E4 05 F1 | 	add	objptr, ##30780
10e64     F2 20 02 FB | 	rdlong	local02, objptr
10e68     16 00 00 FF 
10e6c     0C E4 05 F1 | 	add	objptr, ##11276
10e70     F2 20 62 FC | 	wrlong	local02, objptr
10e74     04 E4 05 F1 | 	add	objptr, #4
10e78     F2 2A 68 FC | 	wrlong	#21, objptr
10e7c     52 00 00 FF 
10e80     4C E4 85 F1 | 	sub	objptr, ##42060
10e84                 | LR__1423
10e84                 | LR__1424
10e84                 | ' 
10e84                 | ' 
10e84                 | ' if key3<>0 then
10e84     52 00 00 FF 
10e88     48 E4 05 F1 | 	add	objptr, ##42056
10e8c     F2 28 0A FB | 	rdlong	local06, objptr wz
10e90     52 00 00 FF 
10e94     48 E4 85 F1 | 	sub	objptr, ##42056
10e98     54 FD 9F AD |  if_e	jmp	#LR__1420
10e9c                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
10e9c     50 00 00 FF 
10ea0     A4 E5 05 F1 | 	add	objptr, ##41380
10ea4     F2 20 02 FB | 	rdlong	local02, objptr
10ea8     50 00 00 FF 
10eac     A4 E5 85 F1 | 	sub	objptr, ##41380
10eb0     01 20 0E F2 | 	cmp	local02, #1 wz
10eb4     5C 00 90 5D |  if_ne	jmp	#LR__1425
10eb8     01 00 00 FF 
10ebc     00 EA 05 F1 | 	add	ptr__dat__, ##512
10ec0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10ec4     01 00 00 FF 
10ec8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
10ecc     56 00 00 FF 
10ed0     44 22 06 F6 | 	mov	local03, ##44100
10ed4     0E 24 C6 F9 | 	decod	local04, #14
10ed8     03 00 00 FF 
10edc     94 26 06 F6 | 	mov	local05, ##1684
10ee0     01 1E 66 F6 | 	neg	local01, #1
10ee4     07 12 06 F6 | 	mov	arg01, #7
10ee8     56 00 00 FF 
10eec     44 16 06 F6 | 	mov	arg03, ##44100
10ef0     0E 18 C6 F9 | 	decod	arg04, #14
10ef4     03 00 00 FF 
10ef8     94 1A 06 F6 | 	mov	arg05, ##1684
10efc     01 1C 66 F6 | 	neg	arg06, #1
10f00     0B 00 00 FF 
10f04     C0 E4 05 F1 | 	add	objptr, ##5824
10f08     40 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10f0c     0B 00 00 FF 
10f10     C0 E4 85 F1 | 	sub	objptr, ##5824
10f14                 | LR__1425
10f14     52 00 00 FF 
10f18     48 E4 05 F1 | 	add	objptr, ##42056
10f1c     F2 12 02 FB | 	rdlong	arg01, objptr
10f20     52 00 00 FF 
10f24     48 E4 85 F1 | 	sub	objptr, ##42056
10f28     74 F8 BF FD | 	call	#_scantochar
10f2c     52 00 00 FF 
10f30     50 E4 05 F1 | 	add	objptr, ##42064
10f34     F2 FA 61 FC | 	wrlong	result1, objptr
10f38                 | '   if leds and 2 = 2 then 
10f38     10 E4 85 F1 | 	sub	objptr, #16
10f3c     F2 20 0A FB | 	rdlong	local02, objptr wz
10f40     52 00 00 FF 
10f44     40 E4 85 F1 | 	sub	objptr, ##42048
10f48     68 01 90 AD |  if_e	jmp	#LR__1433
10f4c                 | '     if key4>96 andalso key4<123 then
10f4c     52 00 00 FF 
10f50     50 E4 05 F1 | 	add	objptr, ##42064
10f54     F2 20 02 FB | 	rdlong	local02, objptr
10f58     52 00 00 FF 
10f5c     50 E4 85 F1 | 	sub	objptr, ##42064
10f60     61 20 56 F2 | 	cmps	local02, #97 wc
10f64     40 00 90 CD |  if_b	jmp	#LR__1426
10f68     52 00 00 FF 
10f6c     50 E4 05 F1 | 	add	objptr, ##42064
10f70     F2 24 02 FB | 	rdlong	local04, objptr
10f74     52 00 00 FF 
10f78     50 E4 85 F1 | 	sub	objptr, ##42064
10f7c     12 23 02 F6 | 	mov	local03, local04
10f80     7B 22 56 F2 | 	cmps	local03, #123 wc
10f84     20 00 90 3D |  if_ae	jmp	#LR__1426
10f88     52 00 00 FF 
10f8c     50 E4 05 F1 | 	add	objptr, ##42064
10f90     F2 20 02 FB | 	rdlong	local02, objptr
10f94     20 20 86 F1 | 	sub	local02, #32
10f98     F2 20 62 FC | 	wrlong	local02, objptr
10f9c     52 00 00 FF 
10fa0     50 E4 85 F1 | 	sub	objptr, ##42064
10fa4     0C 01 90 FD | 	jmp	#LR__1432
10fa8                 | LR__1426
10fa8     52 00 00 FF 
10fac     50 E4 05 F1 | 	add	objptr, ##42064
10fb0     F2 20 02 FB | 	rdlong	local02, objptr
10fb4     52 00 00 FF 
10fb8     50 E4 85 F1 | 	sub	objptr, ##42064
10fbc     41 20 56 F2 | 	cmps	local02, #65 wc
10fc0     40 00 90 CD |  if_b	jmp	#LR__1427
10fc4     52 00 00 FF 
10fc8     50 E4 05 F1 | 	add	objptr, ##42064
10fcc     F2 24 02 FB | 	rdlong	local04, objptr
10fd0     52 00 00 FF 
10fd4     50 E4 85 F1 | 	sub	objptr, ##42064
10fd8     12 23 02 F6 | 	mov	local03, local04
10fdc     5B 22 56 F2 | 	cmps	local03, #91 wc
10fe0     20 00 90 3D |  if_ae	jmp	#LR__1427
10fe4     52 00 00 FF 
10fe8     50 E4 05 F1 | 	add	objptr, ##42064
10fec     F2 20 02 FB | 	rdlong	local02, objptr
10ff0     20 20 06 F1 | 	add	local02, #32
10ff4     F2 20 62 FC | 	wrlong	local02, objptr
10ff8     52 00 00 FF 
10ffc     50 E4 85 F1 | 	sub	objptr, ##42064
11000     B0 00 90 FD | 	jmp	#LR__1431
11004                 | LR__1427
11004     52 00 00 FF 
11008     50 E4 05 F1 | 	add	objptr, ##42064
1100c     F2 20 02 FB | 	rdlong	local02, objptr
11010     52 00 00 FF 
11014     50 E4 85 F1 | 	sub	objptr, ##42064
11018     17 20 56 F2 | 	cmps	local02, #23 wc
1101c     40 00 90 CD |  if_b	jmp	#LR__1428
11020     52 00 00 FF 
11024     50 E4 05 F1 | 	add	objptr, ##42064
11028     F2 24 02 FB | 	rdlong	local04, objptr
1102c     52 00 00 FF 
11030     50 E4 85 F1 | 	sub	objptr, ##42064
11034     12 23 02 F6 | 	mov	local03, local04
11038     20 22 56 F2 | 	cmps	local03, #32 wc
1103c     20 00 90 3D |  if_ae	jmp	#LR__1428
11040     52 00 00 FF 
11044     50 E4 05 F1 | 	add	objptr, ##42064
11048     F2 20 02 FB | 	rdlong	local02, objptr
1104c     09 20 86 F1 | 	sub	local02, #9
11050     F2 20 62 FC | 	wrlong	local02, objptr
11054     52 00 00 FF 
11058     50 E4 85 F1 | 	sub	objptr, ##42064
1105c     54 00 90 FD | 	jmp	#LR__1430
11060                 | LR__1428
11060     52 00 00 FF 
11064     50 E4 05 F1 | 	add	objptr, ##42064
11068     F2 20 02 FB | 	rdlong	local02, objptr
1106c     52 00 00 FF 
11070     50 E4 85 F1 | 	sub	objptr, ##42064
11074     0E 20 56 F2 | 	cmps	local02, #14 wc
11078     38 00 90 CD |  if_b	jmp	#LR__1429
1107c     52 00 00 FF 
11080     50 E4 05 F1 | 	add	objptr, ##42064
11084     F2 24 02 FB | 	rdlong	local04, objptr
11088     52 00 00 FF 
1108c     50 E4 85 F1 | 	sub	objptr, ##42064
11090     12 23 02 F6 | 	mov	local03, local04
11094     17 22 56 F2 | 	cmps	local03, #23 wc
11098     52 00 00 CF 
1109c     50 E4 05 C1 |  if_b	add	objptr, ##42064
110a0     F2 20 02 CB |  if_b	rdlong	local02, objptr
110a4     27 20 06 C1 |  if_b	add	local02, #39
110a8     F2 20 62 CC |  if_b	wrlong	local02, objptr
110ac     52 00 00 CF 
110b0     50 E4 85 C1 |  if_b	sub	objptr, ##42064
110b4                 | LR__1429
110b4                 | LR__1430
110b4                 | LR__1431
110b4                 | LR__1432
110b4                 | LR__1433
110b4                 | '  
110b4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
110b4     52 00 00 FF 
110b8     50 E4 05 F1 | 	add	objptr, ##42064
110bc     F2 20 02 FB | 	rdlong	local02, objptr
110c0     52 00 00 FF 
110c4     50 E4 85 F1 | 	sub	objptr, ##42064
110c8     01 20 56 F2 | 	cmps	local02, #1 wc
110cc     90 00 90 CD |  if_b	jmp	#LR__1434
110d0     52 00 00 FF 
110d4     50 E4 05 F1 | 	add	objptr, ##42064
110d8     F2 24 02 FB | 	rdlong	local04, objptr
110dc     52 00 00 FF 
110e0     50 E4 85 F1 | 	sub	objptr, ##42064
110e4     12 23 02 F6 | 	mov	local03, local04
110e8     7F 22 56 F2 | 	cmps	local03, #127 wc
110ec     38 E4 05 C1 |  if_b	add	objptr, #56
110f0     F2 1E E2 CA |  if_b	rdword	local01, objptr
110f4     38 E4 85 C1 |  if_b	sub	objptr, #56
110f8     0F 27 32 C9 |  if_b	getword	local05, local01, #0
110fc     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
11100     5C 00 90 3D |  if_ae	jmp	#LR__1434
11104     52 00 00 FF 
11108     50 E4 05 F1 | 	add	objptr, ##42064
1110c     F2 12 02 FB | 	rdlong	arg01, objptr
11110     52 00 00 FF 
11114     50 E4 85 F1 | 	sub	objptr, ##42064
11118     70 4A B0 FD | 	call	#__system__Chr_S
1111c     FD 2A 02 F6 | 	mov	local07, result1
11120     2D 00 00 FF 
11124     E0 E5 05 F1 | 	add	objptr, ##23520
11128     F2 12 02 FB | 	rdlong	arg01, objptr
1112c     2D 00 00 FF 
11130     E0 E5 85 F1 | 	sub	objptr, ##23520
11134     15 15 02 F6 | 	mov	arg02, local07
11138     A0 29 B0 FD | 	call	#__system___string_concat
1113c     2D 00 00 FF 
11140     E0 E5 05 F1 | 	add	objptr, ##23520
11144     F2 FA 61 FC | 	wrlong	result1, objptr
11148     24 00 00 FF 
1114c     70 E4 05 F1 | 	add	objptr, ##18544
11150     F2 12 02 FB | 	rdlong	arg01, objptr
11154     52 00 00 FF 
11158     50 E4 85 F1 | 	sub	objptr, ##42064
1115c     E0 16 B0 FD | 	call	#_hg010b_spin2_putchar
11160                 | LR__1434
11160                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
11160     52 00 00 FF 
11164     50 E4 05 F1 | 	add	objptr, ##42064
11168     F2 20 02 FB | 	rdlong	local02, objptr
1116c     52 00 00 FF 
11170     50 E4 85 F1 | 	sub	objptr, ##42064
11174     01 20 56 F2 | 	cmps	local02, #1 wc
11178     D0 00 90 CD |  if_b	jmp	#LR__1435
1117c     52 00 00 FF 
11180     50 E4 05 F1 | 	add	objptr, ##42064
11184     F2 24 02 FB | 	rdlong	local04, objptr
11188     52 00 00 FF 
1118c     50 E4 85 F1 | 	sub	objptr, ##42064
11190     12 23 02 F6 | 	mov	local03, local04
11194     7F 22 56 F2 | 	cmps	local03, #127 wc
11198     B0 00 90 3D |  if_ae	jmp	#LR__1435
1119c     38 E4 05 F1 | 	add	objptr, #56
111a0     F2 1E E2 FA | 	rdword	local01, objptr
111a4     38 E4 85 F1 | 	sub	objptr, #56
111a8     0F 27 32 F9 | 	getword	local05, local01, #0
111ac     FE 26 0E F2 | 	cmp	local05, #254 wz
111b0     50 00 00 AF 
111b4     A4 E5 05 A1 |  if_e	add	objptr, ##41380
111b8     F2 2C 02 AB |  if_e	rdlong	local08, objptr
111bc     50 00 00 AF 
111c0     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
111c4     16 2F 02 A6 |  if_e	mov	local09, local08
111c8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
111cc     7C 00 90 5D |  if_ne	jmp	#LR__1435
111d0     04 00 00 FF 
111d4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
111d8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
111dc     04 00 00 FF 
111e0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
111e4     56 00 00 FF 
111e8     44 22 06 F6 | 	mov	local03, ##44100
111ec     0E 24 C6 F9 | 	decod	local04, #14
111f0     00 26 06 F6 | 	mov	local05, #0
111f4     03 00 00 FF 
111f8     DE 1E 06 F6 | 	mov	local01, ##1758
111fc     07 12 06 F6 | 	mov	arg01, #7
11200     56 00 00 FF 
11204     44 16 06 F6 | 	mov	arg03, ##44100
11208     0E 18 C6 F9 | 	decod	arg04, #14
1120c     00 1A 06 F6 | 	mov	arg05, #0
11210     03 00 00 FF 
11214     DE 1C 06 F6 | 	mov	arg06, ##1758
11218     0B 00 00 FF 
1121c     C0 E4 05 F1 | 	add	objptr, ##5824
11220     28 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
11224     0B 00 00 FF 
11228     C0 E4 85 F1 | 	sub	objptr, ##5824
1122c     2C 13 06 F6 | 	mov	arg01, #300
11230     58 2A B0 FD | 	call	#__system___waitms
11234     00 12 06 F6 | 	mov	arg01, #0
11238     0B 00 00 FF 
1123c     C0 E4 05 F1 | 	add	objptr, ##5824
11240     58 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11244     0B 00 00 FF 
11248     C0 E4 85 F1 | 	sub	objptr, ##5824
1124c                 | LR__1435
1124c                 | '  
1124c                 | '   'tab
1124c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1124c     52 00 00 FF 
11250     48 E4 05 F1 | 	add	objptr, ##42056
11254     F2 20 02 FB | 	rdlong	local02, objptr
11258     52 00 00 FF 
1125c     48 E4 85 F1 | 	sub	objptr, ##42056
11260     10 21 E2 F8 | 	getbyte	local02, local02, #0
11264     2B 20 0E F2 | 	cmp	local02, #43 wz
11268     B4 00 90 5D |  if_ne	jmp	#LR__1436
1126c     38 E4 05 F1 | 	add	objptr, #56
11270     F2 24 E2 FA | 	rdword	local04, objptr
11274     38 E4 85 F1 | 	sub	objptr, #56
11278     12 23 32 F9 | 	getword	local03, local04, #0
1127c     F0 22 16 F2 | 	cmp	local03, #240 wc
11280     9C 00 90 CD |  if_b	jmp	#LR__1436
11284     50 00 00 FF 
11288     A4 E5 05 F1 | 	add	objptr, ##41380
1128c     F2 1E 02 FB | 	rdlong	local01, objptr
11290     50 00 00 FF 
11294     A4 E5 85 F1 | 	sub	objptr, ##41380
11298     0F 27 02 F6 | 	mov	local05, local01
1129c     01 26 0E F2 | 	cmp	local05, #1 wz
112a0     7C 00 90 5D |  if_ne	jmp	#LR__1436
112a4     04 00 00 FF 
112a8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
112ac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
112b0     04 00 00 FF 
112b4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
112b8     56 00 00 FF 
112bc     44 22 06 F6 | 	mov	local03, ##44100
112c0     0E 24 C6 F9 | 	decod	local04, #14
112c4     00 26 06 F6 | 	mov	local05, #0
112c8     03 00 00 FF 
112cc     DE 1E 06 F6 | 	mov	local01, ##1758
112d0     00 12 06 F6 | 	mov	arg01, #0
112d4     56 00 00 FF 
112d8     44 16 06 F6 | 	mov	arg03, ##44100
112dc     0E 18 C6 F9 | 	decod	arg04, #14
112e0     00 1A 06 F6 | 	mov	arg05, #0
112e4     03 00 00 FF 
112e8     DE 1C 06 F6 | 	mov	arg06, ##1758
112ec     0B 00 00 FF 
112f0     C0 E4 05 F1 | 	add	objptr, ##5824
112f4     54 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
112f8     0B 00 00 FF 
112fc     C0 E4 85 F1 | 	sub	objptr, ##5824
11300     2C 13 06 F6 | 	mov	arg01, #300
11304     84 29 B0 FD | 	call	#__system___waitms
11308     00 12 06 F6 | 	mov	arg01, #0
1130c     0B 00 00 FF 
11310     C0 E4 05 F1 | 	add	objptr, ##5824
11314     84 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11318     0B 00 00 FF 
1131c     C0 E4 85 F1 | 	sub	objptr, ##5824
11320                 | LR__1436
11320                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
11320     52 00 00 FF 
11324     48 E4 05 F1 | 	add	objptr, ##42056
11328     F2 20 02 FB | 	rdlong	local02, objptr
1132c     52 00 00 FF 
11330     48 E4 85 F1 | 	sub	objptr, ##42056
11334     10 21 E2 F8 | 	getbyte	local02, local02, #0
11338     2B 20 0E F2 | 	cmp	local02, #43 wz
1133c     AC 00 90 5D |  if_ne	jmp	#LR__1439
11340     38 E4 05 F1 | 	add	objptr, #56
11344     F2 24 E2 FA | 	rdword	local04, objptr
11348     38 E4 85 F1 | 	sub	objptr, #56
1134c     12 23 32 F9 | 	getword	local03, local04, #0
11350     F0 22 16 F2 | 	cmp	local03, #240 wc
11354     94 00 90 3D |  if_ae	jmp	#LR__1439
11358     38 E4 05 F1 | 	add	objptr, #56
1135c     F2 20 E2 FA | 	rdword	local02, objptr
11360     10 23 52 F6 | 	abs	local03, local02 wc
11364     11 23 42 F8 | 	getnib	local03, local03, #0
11368     11 23 82 F6 | 	negc	local03, local03
1136c     11 25 52 F6 | 	abs	local04, local03 wc
11370     01 24 46 F0 | 	shr	local04, #1
11374     12 25 82 F6 | 	negc	local04, local04
11378     52 00 00 FF 
1137c     1C E4 05 F1 | 	add	objptr, ##42012
11380     F2 24 62 FC | 	wrlong	local04, objptr
11384     12 31 02 F6 | 	mov	local10, local04
11388     52 00 00 FF 
1138c     54 E4 85 F1 | 	sub	objptr, ##42068
11390                 | LR__1437
11390     08 30 56 F2 | 	cmps	local10, #8 wc
11394     54 00 90 3D |  if_ae	jmp	#LR__1438
11398     2D 00 00 FF 
1139c     E0 E5 05 F1 | 	add	objptr, ##23520
113a0     F2 12 02 FB | 	rdlong	arg01, objptr
113a4     2D 00 00 FF 
113a8     E0 E5 85 F1 | 	sub	objptr, ##23520
113ac     1B 01 00 FF 
113b0     93 24 06 F6 | 	mov	local04, ##@LR__4288
113b4     12 15 02 F6 | 	mov	arg02, local04
113b8     20 27 B0 FD | 	call	#__system___string_concat
113bc     2D 00 00 FF 
113c0     E0 E5 05 F1 | 	add	objptr, ##23520
113c4     F2 FA 61 FC | 	wrlong	result1, objptr
113c8     2D 00 00 FF 
113cc     E0 E5 85 F1 | 	sub	objptr, ##23520
113d0     1B 01 00 FF 
113d4     95 12 06 F6 | 	mov	arg01, ##@LR__4289
113d8     80 16 B0 FD | 	call	#_hg010b_spin2_write
113dc     18 23 02 F6 | 	mov	local03, local10
113e0     01 22 06 F1 | 	add	local03, #1
113e4     11 31 02 F6 | 	mov	local10, local03
113e8     A4 FF 9F FD | 	jmp	#LR__1437
113ec                 | LR__1438
113ec                 | LR__1439
113ec                 | '  
113ec                 | '   'backspace
113ec                 | '   if (key3 and 255) = 42 then 
113ec     52 00 00 FF 
113f0     48 E4 05 F1 | 	add	objptr, ##42056
113f4     F2 20 02 FB | 	rdlong	local02, objptr
113f8     52 00 00 FF 
113fc     48 E4 85 F1 | 	sub	objptr, ##42056
11400     10 21 E2 F8 | 	getbyte	local02, local02, #0
11404     2A 20 0E F2 | 	cmp	local02, #42 wz
11408     D4 00 90 5D |  if_ne	jmp	#LR__1444
1140c                 | '       if v.cursor_x>4 then 
1140c     38 E4 05 F1 | 	add	objptr, #56
11410     F2 20 E2 FA | 	rdword	local02, objptr
11414     38 E4 85 F1 | 	sub	objptr, #56
11418     05 20 16 F2 | 	cmp	local02, #5 wc
1141c     9C 00 90 CD |  if_b	jmp	#LR__1442
11420     2D 00 00 FF 
11424     E0 E5 05 F1 | 	add	objptr, ##23520
11428     F2 26 02 FB | 	rdlong	local05, objptr
1142c     2D 00 00 FF 
11430     E0 E5 85 F1 | 	sub	objptr, ##23520
11434     13 13 02 F6 | 	mov	arg01, local05
11438     09 33 02 F6 | 	mov	local11, arg01
1143c     97 06 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
11440                 | LR__1440
11440     19 FB C9 FA | 	rdbyte	result1, local11 wz
11444     01 32 06 51 |  if_ne	add	local11, #1
11448     F4 FF 9F 5D |  if_ne	jmp	#LR__1440
1144c                 | LR__1441
1144c     09 33 82 F1 | 	sub	local11, arg01
11450     19 15 02 F6 | 	mov	arg02, local11
11454     01 14 86 F1 | 	sub	arg02, #1
11458     13 13 02 F6 | 	mov	arg01, local05
1145c     68 45 B0 FD | 	call	#__system__Left_S
11460     2D 00 00 FF 
11464     E0 E5 05 F1 | 	add	objptr, ##23520
11468     F2 FA 61 FC | 	wrlong	result1, objptr
1146c     2D 00 00 FF 
11470     A8 E5 85 F1 | 	sub	objptr, ##23464
11474     F2 12 E2 FA | 	rdword	arg01, objptr
11478     02 12 86 F1 | 	sub	arg01, #2
1147c     02 E4 05 F1 | 	add	objptr, #2
11480     F2 14 C2 FA | 	rdbyte	arg02, objptr
11484     3A E4 85 F1 | 	sub	objptr, #58
11488     6C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1148c     20 12 06 F6 | 	mov	arg01, #32
11490     AC 13 B0 FD | 	call	#_hg010b_spin2_putchar
11494     38 E4 05 F1 | 	add	objptr, #56
11498     F2 12 E2 FA | 	rdword	arg01, objptr
1149c     02 12 86 F1 | 	sub	arg01, #2
114a0     02 E4 05 F1 | 	add	objptr, #2
114a4     F2 24 C2 FA | 	rdbyte	local04, objptr
114a8     3A E4 85 F1 | 	sub	objptr, #58
114ac     12 23 E2 F8 | 	getbyte	local03, local04, #0
114b0     11 15 02 F6 | 	mov	arg02, local03
114b4     40 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
114b8     24 00 90 FD | 	jmp	#LR__1443
114bc                 | LR__1442
114bc     1B 01 00 FF 
114c0     97 20 06 F6 | 	mov	local02, ##@LR__4290
114c4     2D 00 00 FF 
114c8     E0 E5 05 F1 | 	add	objptr, ##23520
114cc     F2 20 62 FC | 	wrlong	local02, objptr
114d0     2D 00 00 FF 
114d4     A8 E5 85 F1 | 	sub	objptr, ##23464
114d8     F2 08 58 FC | 	wrword	#4, objptr
114dc     38 E4 85 F1 | 	sub	objptr, #56
114e0                 | LR__1443
114e0                 | LR__1444
114e0                 | '    
114e0                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
114e0                 | '  
114e0                 | '   if key4=key_enter then 
114e0     52 00 00 FF 
114e4     50 E4 05 F1 | 	add	objptr, ##42064
114e8     F2 28 02 FB | 	rdlong	local06, objptr
114ec     52 00 00 FF 
114f0     50 E4 85 F1 | 	sub	objptr, ##42064
114f4     8D 28 0E F2 | 	cmp	local06, #141 wz
114f8     50 00 90 5D |  if_ne	jmp	#LR__1445
114fc     BC 16 B0 FD | 	call	#_hg010b_spin2_crlf
11500     18 F5 BE FD | 	call	#_interpret
11504     1B 01 00 FF 
11508     98 20 06 F6 | 	mov	local02, ##@LR__4291
1150c     2D 00 00 FF 
11510     E0 E5 05 F1 | 	add	objptr, ##23520
11514     F2 20 62 FC | 	wrlong	local02, objptr
11518     1A FA 61 FD | 	getct	result1
1151c     24 00 00 FF 
11520     78 E4 05 F1 | 	add	objptr, ##18552
11524     F2 24 02 FB | 	rdlong	local04, objptr
11528     12 23 02 F6 | 	mov	local03, local04
1152c     11 FB 81 F1 | 	sub	result1, local03
11530     F2 FA 61 FC | 	wrlong	result1, objptr
11534     14 E4 85 F1 | 	sub	objptr, #20
11538     F2 00 68 FC | 	wrlong	#0, objptr
1153c     08 E4 05 F1 | 	add	objptr, #8
11540     F2 00 68 FC | 	wrlong	#0, objptr
11544     52 00 00 FF 
11548     4C E4 85 F1 | 	sub	objptr, ##42060
1154c                 | LR__1445
1154c     52 00 00 FF 
11550     48 E4 05 F1 | 	add	objptr, ##42056
11554     F2 00 68 FC | 	wrlong	#0, objptr
11558     52 00 00 FF 
1155c     48 E4 85 F1 | 	sub	objptr, ##42056
11560     8C F6 9F FD | 	jmp	#LR__1420
11564     A7 F0 03 F6 | 	mov	ptra, fp
11568     B2 00 A0 FD | 	call	#popregs_
1156c                 | _program_ret
1156c     2D 00 64 FD | 	ret
11570                 | 
11570                 | ' '' this is not a main program.
11570                 | ' 
11570                 | ' '****************************************************************************************************************
11570                 | ' '                                                                                                             	*
11570                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
11570                 | ' '                                                                                                            	*
11570                 | ' ' mode - mode #, see below											*
11570                 | ' ' base - HDMI base pin												*
11570                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
11570                 | ' '														*
11570                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
11570                 | ' '' set bit #15 for custom timings														*
11570                 | ' '' p - 1 - psram, 0 - hub											*
11570                 | ' '' t - 1 - graphics, 0 - text											*
11570                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
11570                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
11570                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
11570                 | ' '														*
11570                 | ' '****************************************************************************************************************
11570                 | ' 
11570                 | ' pub start(base,mb):result |i
11570                 | _hg010b_spin2_start
11570                 | ' 
11570                 | ' '--------------------------- initialize pointers and variables
11570                 | ' 
11570                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
11570     30 E4 05 F1 | 	add	objptr, #48
11574     F2 FA 01 F6 | 	mov	result1, objptr
11578     28 E4 85 F1 | 	sub	objptr, #40
1157c     F2 FA 61 FC | 	wrlong	result1, objptr
11580                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
11580                 | ' hdmibase:=base							' HDMI base pin, 8*n
11580     18 E4 05 F1 | 	add	objptr, #24
11584     F2 12 62 FC | 	wrlong	arg01, objptr
11588                 | ' mailbox_ptr:=mb		
11588     04 E4 05 F1 | 	add	objptr, #4
1158c     F2 14 62 FC | 	wrlong	arg02, objptr
11590                 | ' mailbox0:=mb				' PSRAM mailbox pointer
11590     C1 E5 05 F1 | 	add	objptr, #449
11594     F2 14 62 FC | 	wrlong	arg02, objptr
11598                 | ' sprite_ptr:=@spr1ptr
11598     D8 E4 85 F1 | 	sub	objptr, #216
1159c     F2 FA 01 F6 | 	mov	result1, objptr
115a0     E5 E4 85 F1 | 	sub	objptr, #229
115a4     F2 FA 61 FC | 	wrlong	result1, objptr
115a8                 | ' 
115a8                 | ' 		'
115a8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
115a8     E5 E4 05 F1 | 	add	objptr, #229
115ac     F2 FA 01 FB | 	rdlong	result1, objptr
115b0     D0 FA 05 F1 | 	add	result1, #208
115b4     FD 10 58 FC | 	wrword	#8, result1
115b8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
115b8     F2 16 02 FB | 	rdlong	arg03, objptr
115bc     D2 16 06 F1 | 	add	arg03, #210
115c0     0B 21 58 FC | 	wrword	#16, arg03
115c4                 | ' leading_spaces:=0				'
115c4     A5 E5 05 F1 | 	add	objptr, #421
115c8     F2 00 68 FC | 	wrlong	#0, objptr
115cc                 | ' 
115cc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
115cc     99 E4 85 F1 | 	sub	objptr, #153
115d0     00 00 A0 FF 
115d4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
115d8                 | ' emptydl[1]:=0
115d8     04 E4 05 F1 | 	add	objptr, #4
115dc     F2 00 68 FC | 	wrlong	#0, objptr
115e0                 | ' 
115e0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
115e0                 | ' 
115e0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
115e0     28 E5 85 F1 | 	sub	objptr, #296
115e4     F2 02 68 FC | 	wrlong	#1, objptr
115e8                 | ' if s_debug<>0
115e8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
115e8     20 00 80 FF 
115ec     F2 00 68 FC | 	wrlong	##16384, objptr
115f0     F5 E4 85 F1 | 	sub	objptr, #245
115f4                 | ' setmode()							' set the mode, see below
115f4     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
115f8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
115f8     45 E4 05 F1 | 	add	objptr, #69
115fc     F2 FA 01 F6 | 	mov	result1, objptr
11600     35 E4 85 F1 | 	sub	objptr, #53
11604     F2 FA 61 FC | 	wrlong	result1, objptr
11608                 | ' cursor_ptr:=@cursor_x						
11608     28 E4 05 F1 | 	add	objptr, #40
1160c     F2 16 02 F6 | 	mov	arg03, objptr
11610     2C E4 85 F1 | 	sub	objptr, #44
11614     F2 16 62 FC | 	wrlong	arg03, objptr
11618                 | ' fontnum:=0  							' start with a PC type font 
11618     55 E4 05 F1 | 	add	objptr, #85
1161c     F2 00 68 FC | 	wrlong	#0, objptr
11620                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
11620     1C E4 05 F1 | 	add	objptr, #28
11624     F2 12 02 F6 | 	mov	arg01, objptr
11628     7D E4 85 F1 | 	sub	objptr, #125
1162c     10 00 00 FF 
11630     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
11634     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
11638     10 00 00 FF 
1163c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
11640     10 16 06 F6 | 	mov	arg03, #16
11644     58 23 B0 FD | 	call	#__system____builtin_memmove
11648                 | ' leading_spaces:=0
11648     01 00 00 FF 
1164c     B2 E4 05 F1 | 	add	objptr, ##690
11650     F2 00 68 FC | 	wrlong	#0, objptr
11654     01 00 00 FF 
11658     B2 E4 85 F1 | 	sub	objptr, ##690
1165c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1165c                 | ' 
1165c                 | ' initcursor(154)
1165c     9A 12 06 F6 | 	mov	arg01, #154
11660     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
11664                 | ' 
11664                 | ' '---------------------------- start the cog
11664                 | ' 
11664                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
11664     10 00 00 FF 
11668     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1166c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
11670     10 00 00 FF 
11674     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
11678     10 E4 05 F1 | 	add	objptr, #16
1167c     10 FA 05 F6 | 	mov	result1, #16
11680     28 E4 61 FD | 	setq	objptr
11684     0A FB F1 FC | 	coginit	result1, arg02 wc
11688     01 FA 65 C6 |  if_b	neg	result1, #1
1168c     1C E4 05 F1 | 	add	objptr, #28
11690     F2 FA 61 FC | 	wrlong	result1, objptr
11694     2C E4 85 F1 | 	sub	objptr, #44
11698                 | ' waitms(40)							' wait for stabilize
11698     28 12 06 F6 | 	mov	arg01, #40
1169c     EC 25 B0 FD | 	call	#__system___waitms
116a0                 | ' return cog							' return the driver's cog #
116a0     2C E4 05 F1 | 	add	objptr, #44
116a4     F2 FA 01 FB | 	rdlong	result1, objptr
116a8     2C E4 85 F1 | 	sub	objptr, #44
116ac                 | _hg010b_spin2_start_ret
116ac     2D 00 64 FD | 	ret
116b0                 | 
116b0                 | ' 
116b0                 | ' 
116b0                 | ' '**************************************************************************************************************** 
116b0                 | ' '                                                                                                             	*
116b0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
116b0                 | ' '  Mode number - see start() above or bits below								*
116b0                 | ' '                                                                                                             	*
116b0                 | ' '****************************************************************************************************************
116b0                 | ' 
116b0                 | ' '---------------------------- initialize a cursor (MSDOS type)
116b0                 | ' pub initcursor(color) |i
116b0                 | _hg010b_spin2_initcursor
116b0     03 4A 05 F6 | 	mov	COUNT_, #3
116b4     A8 00 A0 FD | 	call	#pushregs_
116b8     09 1F 02 F6 | 	mov	local01, arg01
116bc                 | ' 
116bc                 | ' cursor_x:=0							' place the cursor at 0:0
116bc     38 E4 05 F1 | 	add	objptr, #56
116c0     F2 00 58 FC | 	wrword	#0, objptr
116c4                 | ' cursor_y:=0
116c4     02 E4 05 F1 | 	add	objptr, #2
116c8     F2 00 48 FC | 	wrbyte	#0, objptr
116cc                 | ' repeat i from 0 to 111
116cc     00 20 06 F6 | 	mov	local02, #0
116d0     F8 E5 05 F1 | 	add	objptr, #504
116d4     97 1A 48 FB | 	callpa	#(@LR__1452-@LR__1450)>>2,fcache_load_ptr_
116d8                 | LR__1450
116d8                 | '   cursor[i]:=0
116d8     10 23 02 F6 | 	mov	local03, local02
116dc     F2 22 02 F1 | 	add	local03, objptr
116e0     11 01 48 FC | 	wrbyte	#0, local03
116e4     01 20 06 F1 | 	add	local02, #1
116e8     70 20 56 F2 | 	cmps	local02, #112 wc
116ec     E8 FF 9F CD |  if_b	jmp	#LR__1450
116f0                 | ' repeat i from 112 to 127
116f0     70 20 06 F6 | 	mov	local02, #112
116f4                 | LR__1451
116f4                 | '   cursor[i]:=color  
116f4     10 23 02 F6 | 	mov	local03, local02
116f8     F2 22 02 F1 | 	add	local03, objptr
116fc     11 1F 42 FC | 	wrbyte	local01, local03
11700     01 20 06 F1 | 	add	local02, #1
11704     80 20 16 F2 | 	cmp	local02, #128 wc
11708     E8 FF 9F CD |  if_b	jmp	#LR__1451
1170c                 | LR__1452
1170c                 | ' 'repeat i from 0 to 127
1170c                 | ' '  if ((i/8)//2)
1170c                 | ' '    cursor[i]:=15
1170c                 | ' '  else
1170c                 | ' '    cursor[i]:=0
1170c                 | ' '  if i>=120    
1170c                 | ' '    cursor[i]:=40
1170c                 | ' setspriteptr(17,@cursor)
1170c     F2 14 02 F6 | 	mov	arg02, objptr
11710     01 00 00 FF 
11714     32 E4 85 F1 | 	sub	objptr, ##562
11718     11 12 06 F6 | 	mov	arg01, #17
1171c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
11720                 | ' setspritesize(17,8,16)
11720     11 12 06 F6 | 	mov	arg01, #17
11724     08 14 06 F6 | 	mov	arg02, #8
11728     10 16 06 F6 | 	mov	arg03, #16
1172c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
11730                 | ' setspritepos(17,0,0)
11730     11 12 06 F6 | 	mov	arg01, #17
11734     00 14 06 F6 | 	mov	arg02, #0
11738     00 16 06 F6 | 	mov	arg03, #0
1173c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
11740     A7 F0 03 F6 | 	mov	ptra, fp
11744     B2 00 A0 FD | 	call	#popregs_
11748                 | _hg010b_spin2_initcursor_ret
11748     2D 00 64 FD | 	ret
1174c                 | 
1174c                 | ' 
1174c                 | '  
1174c                 | ' pub setcursorcolor(color) |i
1174c                 | _hg010b_spin2_setcursorcolor
1174c                 | ' 
1174c                 | ' 
1174c                 | ' repeat i from 0 to 111
1174c     00 00 06 F6 | 	mov	_var01, #0
11750     01 00 00 FF 
11754     32 E4 05 F1 | 	add	objptr, ##562
11758     97 1A 48 FB | 	callpa	#(@LR__1462-@LR__1460)>>2,fcache_load_ptr_
1175c                 | LR__1460
1175c                 | '   cursor[i]:=0
1175c     00 03 02 F6 | 	mov	_var02, _var01
11760     F2 02 02 F1 | 	add	_var02, objptr
11764     01 01 48 FC | 	wrbyte	#0, _var02
11768     01 00 06 F1 | 	add	_var01, #1
1176c     70 00 56 F2 | 	cmps	_var01, #112 wc
11770     E8 FF 9F CD |  if_b	jmp	#LR__1460
11774                 | ' repeat i from 112 to 127
11774     70 00 06 F6 | 	mov	_var01, #112
11778                 | LR__1461
11778                 | '   cursor[i]:=color  
11778     00 03 02 F6 | 	mov	_var02, _var01
1177c     F2 02 02 F1 | 	add	_var02, objptr
11780     01 13 42 FC | 	wrbyte	arg01, _var02
11784     01 00 06 F1 | 	add	_var01, #1
11788     80 00 16 F2 | 	cmp	_var01, #128 wc
1178c     E8 FF 9F CD |  if_b	jmp	#LR__1461
11790                 | LR__1462
11790     01 00 00 FF 
11794     32 E4 85 F1 | 	sub	objptr, ##562
11798                 | _hg010b_spin2_setcursorcolor_ret
11798     2D 00 64 FD | 	ret
1179c                 | 
1179c                 | '  
1179c                 | ' 
1179c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1179c                 | _hg010b_spin2_setmode
1179c     02 4A 05 F6 | 	mov	COUNT_, #2
117a0     A8 00 A0 FD | 	call	#pushregs_
117a4                 | ' 
117a4                 | ' 
117a4                 | ' dl_ptr:=@emptydl[0]
117a4     01 00 00 FF 
117a8     19 E4 05 F1 | 	add	objptr, ##537
117ac     F2 60 02 F6 | 	mov	muldivb_, objptr
117b0     FD E5 85 F1 | 	sub	objptr, #509
117b4     F2 60 62 FC | 	wrlong	muldivb_, objptr
117b8                 | ' 
117b8                 | ' if cog>0 
117b8     10 E4 05 F1 | 	add	objptr, #16
117bc     F2 60 02 FB | 	rdlong	muldivb_, objptr
117c0     2C E4 85 F1 | 	sub	objptr, #44
117c4     01 60 56 F2 | 	cmps	muldivb_, #1 wc
117c8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
117c8     01 12 06 36 |  if_ae	mov	arg01, #1
117cc     60 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
117d0                 | ' xres:=1024
117d0     01 00 00 FF 
117d4     22 E4 05 F1 | 	add	objptr, ##546
117d8     02 00 80 FF 
117dc     F2 00 68 FC | 	wrlong	##1024, objptr
117e0                 | ' yres:=576  
117e0     04 E4 05 F1 | 	add	objptr, #4
117e4     01 00 80 FF 
117e8     F2 80 68 FC | 	wrlong	##576, objptr
117ec                 | ' ppl:=(timings[3])
117ec     10 00 00 FF 
117f0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
117f4     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
117f8     51 E5 85 F1 | 	sub	objptr, #337
117fc     F2 60 62 FC | 	wrlong	muldivb_, objptr
11800                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
11800     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
11804     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
11808     01 1E 66 F0 | 	shl	local01, #1
1180c     80 E4 85 F1 | 	sub	objptr, #128
11810     F2 1E 62 FC | 	wrlong	local01, objptr
11814                 | ' cpl1:=cpl '' todo remove
11814     04 E4 05 F1 | 	add	objptr, #4
11818     F2 1E 62 FC | 	wrlong	local01, objptr
1181c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1181c     02 00 00 FF 
11820     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
11824     41 E4 85 F1 | 	sub	objptr, #65
11828     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1182c                 | ' repeat i from 0 to 3
1182c     00 20 06 F6 | 	mov	local02, #0
11830     02 00 00 FF 
11834     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
11838     08 E4 05 F1 | 	add	objptr, #8
1183c     97 20 48 FB | 	callpa	#(@LR__1471-@LR__1470)>>2,fcache_load_ptr_
11840                 | LR__1470
11840                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
11840     10 1F 02 F6 | 	mov	local01, local02
11844     02 1E 66 F0 | 	shl	local01, #2
11848     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1184c     F2 60 02 FB | 	rdlong	muldivb_, objptr
11850     11 60 66 F0 | 	shl	muldivb_, #17
11854     0F 1F 02 FB | 	rdlong	local01, local01
11858     30 1F 02 F1 | 	add	local01, muldivb_
1185c     80 40 38 FF 
11860     00 1E 06 F1 | 	add	local01, ##1887502336
11864     10 61 02 F6 | 	mov	muldivb_, local02
11868     02 60 66 F0 | 	shl	muldivb_, #2
1186c     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
11870     30 1F 62 FC | 	wrlong	local01, muldivb_
11874     01 20 06 F1 | 	add	local02, #1
11878     04 20 56 F2 | 	cmps	local02, #4 wc
1187c     C0 FF 9F CD |  if_b	jmp	#LR__1470
11880                 | LR__1471
11880     20 E4 85 F1 | 	sub	objptr, #32
11884                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
11884     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
11888     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1188c     14 1E 66 FC | 	wrlong	local01, #20
11890                 | ' hubset(timings[10])
11890     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
11894     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
11898     10 00 00 FF 
1189c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
118a0     00 12 62 FD | 	hubset	arg01
118a4                 | ' waitms(1)                                                   	' wait for stabilization
118a4     01 12 06 F6 | 	mov	arg01, #1
118a8     E0 23 B0 FD | 	call	#__system___waitms
118ac     10 00 00 FF 
118b0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
118b4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
118b8     5D E4 05 F1 | 	add	objptr, #93
118bc     F2 20 62 FC | 	wrlong	local02, objptr
118c0     10 1F 52 F6 | 	abs	local01, local02 wc
118c4     04 1E 46 F0 | 	shr	local01, #4
118c8     0F 1F 82 F6 | 	negc	local01, local01
118cc     9C E4 05 F1 | 	add	objptr, #156
118d0     F2 1E 62 FC | 	wrlong	local01, objptr
118d4     A4 E4 85 F1 | 	sub	objptr, #164
118d8     F2 20 02 FB | 	rdlong	local02, objptr
118dc     08 E4 05 F1 | 	add	objptr, #8
118e0     F2 1E 02 FB | 	rdlong	local01, objptr
118e4     0F 21 02 FD | 	qmul	local02, local01
118e8                 | ' lines:=timings[11]
118e8                 | ' t_lines:=lines/16
118e8                 | ' buflen:=cpl*lines						' framebuffer length in longs
118e8     29 E4 85 F1 | 	sub	objptr, #41
118ec                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
118ec     19 1E C6 F9 | 	decod	local01, #25
118f0                 | ' mode_ptr:=@timings						' set pointers to timings
118f0     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
118f4                 | ' graphmode:=1024+512+192+48							' det global variable
118f4                 | ' makedl(graphmode)							' make a DL for the mode
118f4     03 00 00 FF 
118f8     F0 12 06 F6 | 	mov	arg01, ##1776
118fc     18 20 62 FD | 	getqx	local02
11900     F2 20 62 FC | 	wrlong	local02, objptr
11904     34 E4 85 F1 | 	sub	objptr, #52
11908     02 20 66 F0 | 	shl	local02, #2
1190c     10 1F 82 F1 | 	sub	local01, local02
11910     F2 1E 62 FC | 	wrlong	local01, objptr
11914     14 E4 05 F1 | 	add	objptr, #20
11918     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1191c     79 E4 05 F1 | 	add	objptr, #121
11920     03 00 80 FF 
11924     F2 E0 69 FC | 	wrlong	##1776, objptr
11928     8D E4 85 F1 | 	sub	objptr, #141
1192c     10 00 00 FF 
11930     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
11934     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
11938                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
11938     F2 1E 02 FB | 	rdlong	local01, objptr
1193c     D9 E4 05 F1 | 	add	objptr, #217
11940     F2 1E 62 FC | 	wrlong	local01, objptr
11944                 | ' s_font_ptr:=font_ptr
11944     D5 E4 85 F1 | 	sub	objptr, #213
11948     F2 1E 02 FB | 	rdlong	local01, objptr
1194c     D9 E4 05 F1 | 	add	objptr, #217
11950     F2 1E 62 FC | 	wrlong	local01, objptr
11954                 | ' s_lines:=lines
11954     80 E4 85 F1 | 	sub	objptr, #128
11958     F2 1E 02 FB | 	rdlong	local01, objptr
1195c     84 E4 05 F1 | 	add	objptr, #132
11960     F2 1E 62 FC | 	wrlong	local01, objptr
11964                 | ' s_buflen:=buflen
11964     AD E4 85 F1 | 	sub	objptr, #173
11968     F2 1E 02 FB | 	rdlong	local01, objptr
1196c     B5 E4 05 F1 | 	add	objptr, #181
11970     F2 1E 62 FC | 	wrlong	local01, objptr
11974                 | ' s_cpl:=cpl
11974     94 E4 85 F1 | 	sub	objptr, #148
11978     F2 1E 02 FB | 	rdlong	local01, objptr
1197c     90 E4 05 F1 | 	add	objptr, #144
11980     F2 1E 62 FC | 	wrlong	local01, objptr
11984                 | ' s_cpl1:=cpl
11984     90 E4 85 F1 | 	sub	objptr, #144
11988     F2 1E 02 FB | 	rdlong	local01, objptr
1198c     98 E4 05 F1 | 	add	objptr, #152
11990     F2 1E 62 FC | 	wrlong	local01, objptr
11994                 | ' st_lines:=t_lines
11994     0C E4 05 F1 | 	add	objptr, #12
11998     F2 1E 02 FB | 	rdlong	local01, objptr
1199c     04 E4 05 F1 | 	add	objptr, #4
119a0     F2 1E 62 FC | 	wrlong	local01, objptr
119a4                 | ' ppl:=ppl/xzoom  
119a4     28 E4 85 F1 | 	sub	objptr, #40
119a8     F2 5E 02 FB | 	rdlong	muldiva_, objptr
119ac     2C E4 05 F1 | 	add	objptr, #44
119b0     F2 60 02 FB | 	rdlong	muldivb_, objptr
119b4     01 E5 85 F1 | 	sub	objptr, #257
119b8     BA 00 A0 FD | 	call	#divide_
119bc     D5 E4 05 F1 | 	add	objptr, #213
119c0     F2 60 62 FC | 	wrlong	muldivb_, objptr
119c4                 | ' s_ppl:=ppl
119c4     1C E4 05 F1 | 	add	objptr, #28
119c8     F2 60 62 FC | 	wrlong	muldivb_, objptr
119cc     F1 E4 85 F1 | 	sub	objptr, #241
119d0                 | ' waitms(20)							' wait 
119d0     14 12 06 F6 | 	mov	arg01, #20
119d4     B4 22 B0 FD | 	call	#__system___waitms
119d8     A7 F0 03 F6 | 	mov	ptra, fp
119dc     B2 00 A0 FD | 	call	#popregs_
119e0                 | _hg010b_spin2_setmode_ret
119e0     2D 00 64 FD | 	ret
119e4                 | 
119e4                 | ' 
119e4                 | ' 
119e4                 | ' '****************************************************************************************************************
119e4                 | ' '                                                                                                             	*
119e4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
119e4                 | ' '                                                                                                             	*
119e4                 | ' '****************************************************************************************************************
119e4                 | ' 
119e4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
119e4                 | _hg010b_spin2_makedl
119e4                 | ' 
119e4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
119e4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
119e4                 | ' repeat i from 0 to 11                                                           ' clear DL
119e4     00 00 06 F6 | 	mov	_var01, #0
119e8     E9 E5 05 F1 | 	add	objptr, #489
119ec     97 0E 48 FB | 	callpa	#(@LR__1481-@LR__1480)>>2,fcache_load_ptr_
119f0                 | LR__1480
119f0                 | '   displaylist[i]:=0 
119f0     00 03 02 F6 | 	mov	_var02, _var01
119f4     02 02 66 F0 | 	shl	_var02, #2
119f8     F2 02 02 F1 | 	add	_var02, objptr
119fc     01 01 68 FC | 	wrlong	#0, _var02
11a00     01 00 06 F1 | 	add	_var01, #1
11a04     0C 00 56 F2 | 	cmps	_var01, #12 wc
11a08     E4 FF 9F CD |  if_b	jmp	#LR__1480
11a0c                 | LR__1481
11a0c                 | '                         ' 
11a0c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
11a0c     8C E5 85 F1 | 	sub	objptr, #396
11a10     F2 02 02 FB | 	rdlong	_var02, objptr
11a14     14 02 66 F0 | 	shl	_var02, #20
11a18     01 02 06 F1 | 	add	_var02, #1
11a1c     04 E4 85 F1 | 	sub	objptr, #4
11a20     F2 00 02 FB | 	rdlong	_var01, objptr
11a24     02 00 66 F0 | 	shl	_var01, #2
11a28     04 00 66 F0 | 	shl	_var01, #4
11a2c     00 03 02 F1 | 	add	_var02, _var01
11a30     90 E5 05 F1 | 	add	objptr, #400
11a34     F2 02 62 FC | 	wrlong	_var02, objptr
11a38     E9 E5 85 F1 | 	sub	objptr, #489
11a3c                 | ' displaylist[1]:=buf_ptr<<4+%10  
11a3c     F2 02 02 FB | 	rdlong	_var02, objptr
11a40     04 02 66 F0 | 	shl	_var02, #4
11a44     02 02 06 F1 | 	add	_var02, #2
11a48     ED E5 05 F1 | 	add	objptr, #493
11a4c     F2 02 62 FC | 	wrlong	_var02, objptr
11a50                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
11a50     04 E4 85 F1 | 	sub	objptr, #4
11a54     F2 02 02 F6 | 	mov	_var02, objptr
11a58     CD E5 85 F1 | 	sub	objptr, #461
11a5c     F2 02 62 FC | 	wrlong	_var02, objptr
11a60     1C E4 85 F1 | 	sub	objptr, #28
11a64                 | _hg010b_spin2_makedl_ret
11a64     2D 00 64 FD | 	ret
11a68                 | 
11a68                 | ' 
11a68                 | ' 
11a68                 | ' '****************************************************************************************************************
11a68                 | ' '                                                                        					*
11a68                 | ' '  Graphic primitives                                                    					*
11a68                 | ' '                                                                        					*
11a68                 | ' '****************************************************************************************************************
11a68                 | ' 
11a68                 | ' pub setspriteptr(num,ptr)
11a68                 | _hg010b_spin2_setspriteptr
11a68                 | ' long[@spr1ptr+12*num]:=ptr
11a68     0D E5 05 F1 | 	add	objptr, #269
11a6c     F2 00 02 F6 | 	mov	_var01, objptr
11a70     09 03 02 F6 | 	mov	_var02, arg01
11a74     01 02 66 F0 | 	shl	_var02, #1
11a78     09 03 02 F1 | 	add	_var02, arg01
11a7c     02 02 66 F0 | 	shl	_var02, #2
11a80     01 01 02 F1 | 	add	_var01, _var02
11a84     00 15 62 FC | 	wrlong	arg02, _var01
11a88     0D E5 85 F1 | 	sub	objptr, #269
11a8c                 | _hg010b_spin2_setspriteptr_ret
11a8c     2D 00 64 FD | 	ret
11a90                 | 
11a90                 | ' 
11a90                 | ' pub setspritepos(num,x,y)
11a90                 | _hg010b_spin2_setspritepos
11a90                 | ' word[@spr1ptr+12*num+4]:=x
11a90     0D E5 05 F1 | 	add	objptr, #269
11a94     F2 00 02 F6 | 	mov	_var01, objptr
11a98     09 03 02 F6 | 	mov	_var02, arg01
11a9c     01 02 66 F0 | 	shl	_var02, #1
11aa0     09 03 02 F1 | 	add	_var02, arg01
11aa4     02 02 66 F0 | 	shl	_var02, #2
11aa8     01 01 02 F1 | 	add	_var01, _var02
11aac     04 00 06 F1 | 	add	_var01, #4
11ab0     00 15 52 FC | 	wrword	arg02, _var01
11ab4                 | ' word[@spr1ptr+12*num+6]:=y
11ab4     F2 00 02 F6 | 	mov	_var01, objptr
11ab8     09 03 02 F6 | 	mov	_var02, arg01
11abc     01 02 66 F0 | 	shl	_var02, #1
11ac0     09 03 02 F1 | 	add	_var02, arg01
11ac4     02 02 66 F0 | 	shl	_var02, #2
11ac8     01 01 02 F1 | 	add	_var01, _var02
11acc     06 00 06 F1 | 	add	_var01, #6
11ad0     00 17 52 FC | 	wrword	arg03, _var01
11ad4     0D E5 85 F1 | 	sub	objptr, #269
11ad8                 | _hg010b_spin2_setspritepos_ret
11ad8     2D 00 64 FD | 	ret
11adc                 | 
11adc                 | ' 
11adc                 | ' pub setspritesize(num,w,h)
11adc                 | _hg010b_spin2_setspritesize
11adc                 | ' word[@spr1ptr+12*num+8]:=w
11adc     0D E5 05 F1 | 	add	objptr, #269
11ae0     F2 00 02 F6 | 	mov	_var01, objptr
11ae4     09 03 02 F6 | 	mov	_var02, arg01
11ae8     01 02 66 F0 | 	shl	_var02, #1
11aec     09 03 02 F1 | 	add	_var02, arg01
11af0     02 02 66 F0 | 	shl	_var02, #2
11af4     01 01 02 F1 | 	add	_var01, _var02
11af8     08 00 06 F1 | 	add	_var01, #8
11afc     00 15 52 FC | 	wrword	arg02, _var01
11b00                 | ' word[@spr1ptr+12*num+10]:=h
11b00     F2 00 02 F6 | 	mov	_var01, objptr
11b04     09 03 02 F6 | 	mov	_var02, arg01
11b08     01 02 66 F0 | 	shl	_var02, #1
11b0c     09 03 02 F1 | 	add	_var02, arg01
11b10     02 02 66 F0 | 	shl	_var02, #2
11b14     01 01 02 F1 | 	add	_var01, _var02
11b18     0A 00 06 F1 | 	add	_var01, #10
11b1c     00 17 52 FC | 	wrword	arg03, _var01
11b20     0D E5 85 F1 | 	sub	objptr, #269
11b24                 | _hg010b_spin2_setspritesize_ret
11b24     2D 00 64 FD | 	ret
11b28                 | 
11b28                 | ' 
11b28                 | ' 
11b28                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
11b28                 | ' 
11b28                 | ' 
11b28                 | ' pub putpixel(x,y,c)
11b28                 | _hg010b_spin2_putpixel
11b28     04 4A 05 F6 | 	mov	COUNT_, #4
11b2c     A8 00 A0 FD | 	call	#pushregs_
11b30     09 1F 02 F6 | 	mov	local01, arg01
11b34                 | ' 
11b34                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
11b34     00 20 06 F6 | 	mov	local02, #0
11b38     00 1E 56 F2 | 	cmps	local01, #0 wc
11b3c     01 20 66 36 |  if_ae	neg	local02, #1
11b40     E5 E4 05 F1 | 	add	objptr, #229
11b44     F2 1A 02 FB | 	rdlong	arg05, objptr
11b48     02 1A 66 F0 | 	shl	arg05, #2
11b4c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
11b50     11 23 A2 F1 | 	subx	local03, local03
11b54     11 21 02 F5 | 	and	local02, local03
11b58     00 22 06 F6 | 	mov	local03, #0
11b5c     00 14 56 F2 | 	cmps	arg02, #0 wc
11b60     01 22 66 36 |  if_ae	neg	local03, #1
11b64     11 21 02 F5 | 	and	local02, local03
11b68     04 E4 85 F1 | 	sub	objptr, #4
11b6c     F2 22 02 FB | 	rdlong	local03, objptr
11b70     E1 E4 85 F1 | 	sub	objptr, #225
11b74     11 15 52 F2 | 	cmps	arg02, local03 wc
11b78     12 25 A2 F1 | 	subx	local04, local04
11b7c     12 21 CA F7 | 	test	local02, local04 wz
11b80     48 00 90 AD |  if_e	jmp	#LR__1490
11b84     D9 E4 05 F1 | 	add	objptr, #217
11b88     F2 12 02 FB | 	rdlong	arg01, objptr
11b8c     14 E4 05 F1 | 	add	objptr, #20
11b90     F2 24 02 FB | 	rdlong	local04, objptr
11b94     02 24 66 F0 | 	shl	local04, #2
11b98     0A 25 02 FD | 	qmul	local04, arg02
11b9c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
11b9c     0B 15 02 F6 | 	mov	arg02, arg03
11ba0     01 16 06 F6 | 	mov	arg03, #1
11ba4     00 18 06 F6 | 	mov	arg04, #0
11ba8     01 1A 06 F6 | 	mov	arg05, #1
11bac     0A 00 00 FF 
11bb0     D3 E5 05 F1 | 	add	objptr, ##5587
11bb4     18 24 62 FD | 	getqx	local04
11bb8     0F 25 02 F1 | 	add	local04, local01
11bbc     12 13 02 F1 | 	add	arg01, local04
11bc0     08 15 B0 FD | 	call	#_psram_spin2_fill
11bc4     0B 00 00 FF 
11bc8     C0 E4 85 F1 | 	sub	objptr, ##5824
11bcc                 | LR__1490
11bcc     A7 F0 03 F6 | 	mov	ptra, fp
11bd0     B2 00 A0 FD | 	call	#popregs_
11bd4                 | _hg010b_spin2_putpixel_ret
11bd4     2D 00 64 FD | 	ret
11bd8                 | 
11bd8                 | ' 
11bd8                 | ' pub putpixel2(x,y,c)
11bd8                 | _hg010b_spin2_putpixel2
11bd8     02 4A 05 F6 | 	mov	COUNT_, #2
11bdc     A8 00 A0 FD | 	call	#pushregs_
11be0     D9 E4 05 F1 | 	add	objptr, #217
11be4     F2 1E 02 FB | 	rdlong	local01, objptr
11be8     14 E4 05 F1 | 	add	objptr, #20
11bec     F2 1A 02 FB | 	rdlong	arg05, objptr
11bf0     02 1A 66 F0 | 	shl	arg05, #2
11bf4     0A 1B 02 FD | 	qmul	arg05, arg02
11bf8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
11bf8     0B 15 02 F6 | 	mov	arg02, arg03
11bfc     01 16 06 F6 | 	mov	arg03, #1
11c00     00 18 06 F6 | 	mov	arg04, #0
11c04     01 1A 06 F6 | 	mov	arg05, #1
11c08     0A 00 00 FF 
11c0c     D3 E5 05 F1 | 	add	objptr, ##5587
11c10     18 20 62 FD | 	getqx	local02
11c14     09 21 02 F1 | 	add	local02, arg01
11c18     10 1F 02 F1 | 	add	local01, local02
11c1c     0F 13 02 F6 | 	mov	arg01, local01
11c20     A8 14 B0 FD | 	call	#_psram_spin2_fill
11c24     0B 00 00 FF 
11c28     C0 E4 85 F1 | 	sub	objptr, ##5824
11c2c     A7 F0 03 F6 | 	mov	ptra, fp
11c30     B2 00 A0 FD | 	call	#popregs_
11c34                 | _hg010b_spin2_putpixel2_ret
11c34     2D 00 64 FD | 	ret
11c38                 | 
11c38                 | ' 
11c38                 | ' pub getpixel2(x,y): c 
11c38                 | _hg010b_spin2_getpixel2
11c38     02 4A 05 F6 | 	mov	COUNT_, #2
11c3c     A8 00 A0 FD | 	call	#pushregs_
11c40     0C F0 07 F1 | 	add	ptra, #12
11c44     04 4E 05 F1 | 	add	fp, #4
11c48     A7 12 62 FC | 	wrlong	arg01, fp
11c4c     04 4E 05 F1 | 	add	fp, #4
11c50     A7 14 62 FC | 	wrlong	arg02, fp
11c54     08 4E 85 F1 | 	sub	fp, #8
11c58     A7 00 68 FC | 	wrlong	#0, fp
11c5c     A7 12 02 F6 | 	mov	arg01, fp
11c60     D9 E4 05 F1 | 	add	objptr, #217
11c64     F2 14 02 FB | 	rdlong	arg02, objptr
11c68     14 E4 05 F1 | 	add	objptr, #20
11c6c     F2 16 02 FB | 	rdlong	arg03, objptr
11c70     02 16 66 F0 | 	shl	arg03, #2
11c74     08 4E 05 F1 | 	add	fp, #8
11c78     A7 FA 01 FB | 	rdlong	result1, fp
11c7c     FD 16 02 FD | 	qmul	arg03, result1
11c80                 | ' 
11c80                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
11c80     04 4E 85 F1 | 	sub	fp, #4
11c84     A7 1E 02 FB | 	rdlong	local01, fp
11c88     04 4E 85 F1 | 	sub	fp, #4
11c8c     01 16 06 F6 | 	mov	arg03, #1
11c90     0A 00 00 FF 
11c94     D3 E5 05 F1 | 	add	objptr, ##5587
11c98     18 20 62 FD | 	getqx	local02
11c9c     0F 21 02 F1 | 	add	local02, local01
11ca0     10 15 02 F1 | 	add	arg02, local02
11ca4     EC 12 B0 FD | 	call	#_psram_spin2_read1
11ca8     0B 00 00 FF 
11cac     C0 E4 85 F1 | 	sub	objptr, ##5824
11cb0                 | ' return c
11cb0     A7 FA 01 FB | 	rdlong	result1, fp
11cb4     A7 F0 03 F6 | 	mov	ptra, fp
11cb8     B2 00 A0 FD | 	call	#popregs_
11cbc                 | _hg010b_spin2_getpixel2_ret
11cbc     2D 00 64 FD | 	ret
11cc0                 | 
11cc0                 | '   
11cc0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
11cc0                 | ' 
11cc0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
11cc0                 | _hg010b_spin2_fastline
11cc0     02 4A 05 F6 | 	mov	COUNT_, #2
11cc4     A8 00 A0 FD | 	call	#pushregs_
11cc8     09 1F 02 F6 | 	mov	local01, arg01
11ccc     0A 21 02 F6 | 	mov	local02, arg02
11cd0                 | ' 
11cd0                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
11cd0     00 16 56 F2 | 	cmps	arg03, #0 wc
11cd4     F4 00 90 CD |  if_b	jmp	#LR__1500
11cd8     01 00 00 FF 
11cdc     26 E4 05 F1 | 	add	objptr, ##550
11ce0     F2 1A 02 FB | 	rdlong	arg05, objptr
11ce4     01 00 00 FF 
11ce8     26 E4 85 F1 | 	sub	objptr, ##550
11cec     0D 17 52 F2 | 	cmps	arg03, arg05 wc
11cf0     D8 00 90 3D |  if_ae	jmp	#LR__1500
11cf4     00 1E 56 F2 | 	cmps	local01, #0 wc
11cf8     00 20 56 C2 |  if_b	cmps	local02, #0 wc
11cfc     CC 00 90 CD |  if_b	jmp	#LR__1500
11d00     01 00 00 FF 
11d04     22 E4 05 F1 | 	add	objptr, ##546
11d08     F2 1A 02 FB | 	rdlong	arg05, objptr
11d0c     01 00 00 FF 
11d10     22 E4 85 F1 | 	sub	objptr, ##546
11d14     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
11d18     01 00 00 1F 
11d1c     22 E4 05 11 |  if_a	add	objptr, ##546
11d20     F2 12 02 1B |  if_a	rdlong	arg01, objptr
11d24     01 00 00 1F 
11d28     22 E4 85 11 |  if_a	sub	objptr, ##546
11d2c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
11d30                 | '   return
11d30     98 00 90 1D |  if_a	jmp	#LR__1500
11d34     10 1F 5A F2 | 	cmps	local01, local02 wcz
11d38     0F 1B 02 16 |  if_a	mov	arg05, local01
11d3c     10 1F 02 16 |  if_a	mov	local01, local02
11d40     0D 21 02 16 |  if_a	mov	local02, arg05
11d44     00 1E 56 F2 | 	cmps	local01, #0 wc
11d48     00 1E 06 C6 |  if_b	mov	local01, #0
11d4c     01 00 00 FF 
11d50     22 E4 05 F1 | 	add	objptr, ##546
11d54     F2 1A 02 FB | 	rdlong	arg05, objptr
11d58     01 00 00 FF 
11d5c     22 E4 85 F1 | 	sub	objptr, ##546
11d60     0D 21 52 F2 | 	cmps	local02, arg05 wc
11d64     01 00 00 3F 
11d68     22 E4 05 31 |  if_ae	add	objptr, ##546
11d6c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
11d70     01 00 00 3F 
11d74     22 E4 85 31 |  if_ae	sub	objptr, ##546
11d78     D9 E4 05 F1 | 	add	objptr, #217
11d7c     F2 12 02 FB | 	rdlong	arg01, objptr
11d80     14 E4 05 F1 | 	add	objptr, #20
11d84     F2 1A 02 FB | 	rdlong	arg05, objptr
11d88     02 1A 66 F0 | 	shl	arg05, #2
11d8c     0B 1B 02 FD | 	qmul	arg05, arg03
11d90                 | ' if x1>x2
11d90                 | '   x1,x2:=x2,x1
11d90                 | ' if x1<0 
11d90                 | '   x1:=0
11d90                 | ' if x2>=xres
11d90                 | '   x2:=xres-1  
11d90     01 20 86 31 |  if_ae	sub	local02, #1
11d94                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
11d94     01 16 06 F6 | 	mov	arg03, #1
11d98     10 17 02 F1 | 	add	arg03, local02
11d9c     0F 17 82 F1 | 	sub	arg03, local01
11da0     0C 15 02 F6 | 	mov	arg02, arg04
11da4     00 18 06 F6 | 	mov	arg04, #0
11da8     01 1A 06 F6 | 	mov	arg05, #1
11dac     0A 00 00 FF 
11db0     D3 E5 05 F1 | 	add	objptr, ##5587
11db4     18 20 62 FD | 	getqx	local02
11db8     0F 21 02 F1 | 	add	local02, local01
11dbc     10 13 02 F1 | 	add	arg01, local02
11dc0     08 13 B0 FD | 	call	#_psram_spin2_fill
11dc4     0B 00 00 FF 
11dc8     C0 E4 85 F1 | 	sub	objptr, ##5824
11dcc                 | LR__1500
11dcc     A7 F0 03 F6 | 	mov	ptra, fp
11dd0     B2 00 A0 FD | 	call	#popregs_
11dd4                 | _hg010b_spin2_fastline_ret
11dd4     2D 00 64 FD | 	ret
11dd8                 | 
11dd8                 | ' 
11dd8                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
11dd8                 | _hg010b_spin2_draw
11dd8     0E 4A 05 F6 | 	mov	COUNT_, #14
11ddc     A8 00 A0 FD | 	call	#pushregs_
11de0     09 1F 02 F6 | 	mov	local01, arg01
11de4     0A 21 02 F6 | 	mov	local02, arg02
11de8     0B 23 02 F6 | 	mov	local03, arg03
11dec     0C 25 02 F6 | 	mov	local04, arg04
11df0     0D 27 02 F6 | 	mov	local05, arg05
11df4                 | ' 
11df4                 | ' if (y1==y2)
11df4     12 21 0A F2 | 	cmp	local02, local04 wz
11df8     18 00 90 5D |  if_ne	jmp	#LR__1510
11dfc                 | '   fastline(x1,x2,y1,c)
11dfc     0F 13 02 F6 | 	mov	arg01, local01
11e00     11 15 02 F6 | 	mov	arg02, local03
11e04     10 17 02 F6 | 	mov	arg03, local02
11e08     13 19 02 F6 | 	mov	arg04, local05
11e0c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
11e10     F8 00 90 FD | 	jmp	#LR__1516
11e14                 | LR__1510
11e14                 | ' else  
11e14                 | '   x:=x1
11e14     0F 29 02 F6 | 	mov	local06, local01
11e18                 | '   y:=y1
11e18     10 2B 02 F6 | 	mov	local07, local02
11e1c                 | ' 
11e1c                 | '   if (x1<x2) 
11e1c     11 1F 52 F2 | 	cmps	local01, local03 wc
11e20                 | '     xi:=1
11e20     01 2C 06 C6 |  if_b	mov	local08, #1
11e24                 | '     dx:=x2-x1
11e24     11 2F 02 C6 |  if_b	mov	local09, local03
11e28     0F 2F 82 C1 |  if_b	sub	local09, local01
11e2c                 | '   else
11e2c                 | '     xi:=-1
11e2c     01 2C 66 36 |  if_ae	neg	local08, #1
11e30                 | '     dx:=x1-x2
11e30     11 1F 82 31 |  if_ae	sub	local01, local03
11e34     0F 2F 02 36 |  if_ae	mov	local09, local01
11e38                 | '   
11e38                 | '   if (y1<y2) 
11e38     12 21 52 F2 | 	cmps	local02, local04 wc
11e3c                 | '     yi:=1
11e3c     01 30 06 C6 |  if_b	mov	local10, #1
11e40                 | '     dy:=y2-y1
11e40     12 33 02 C6 |  if_b	mov	local11, local04
11e44     10 33 82 C1 |  if_b	sub	local11, local02
11e48                 | '   else
11e48                 | '     yi:=-1
11e48     01 30 66 36 |  if_ae	neg	local10, #1
11e4c                 | '     dy:=y1-y2
11e4c     12 21 82 31 |  if_ae	sub	local02, local04
11e50     10 33 02 36 |  if_ae	mov	local11, local02
11e54                 | ' 
11e54                 | '   putpixel(x,y,c)
11e54     13 17 02 F6 | 	mov	arg03, local05
11e58     14 13 02 F6 | 	mov	arg01, local06
11e5c     15 15 02 F6 | 	mov	arg02, local07
11e60     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
11e64                 | ' 
11e64                 | '   if (dx>dy)
11e64     19 2F 5A F2 | 	cmps	local09, local11 wcz
11e68     50 00 90 ED |  if_be	jmp	#LR__1512
11e6c                 | '     ai:=(dy-dx)*2
11e6c     19 35 02 F6 | 	mov	local12, local11
11e70     17 35 82 F1 | 	sub	local12, local09
11e74     01 34 66 F0 | 	shl	local12, #1
11e78                 | '     bi:=dy*2
11e78     01 32 66 F0 | 	shl	local11, #1
11e7c     19 37 02 F6 | 	mov	local13, local11
11e80                 | '     d:= bi-dx
11e80     1B 39 02 F6 | 	mov	local14, local13
11e84     17 39 82 F1 | 	sub	local14, local09
11e88                 | '     repeat while (x<>x2) 
11e88                 | LR__1511
11e88     11 29 0A F2 | 	cmp	local06, local03 wz
11e8c     7C 00 90 AD |  if_e	jmp	#LR__1515
11e90                 | '       if (d>=0) 
11e90     00 38 56 F2 | 	cmps	local14, #0 wc
11e94                 | '         x+=xi
11e94     16 29 02 31 |  if_ae	add	local06, local08
11e98                 | '         y+=yi
11e98     18 2B 02 31 |  if_ae	add	local07, local10
11e9c                 | '         d+=ai
11e9c     1A 39 02 31 |  if_ae	add	local14, local12
11ea0                 | '       else
11ea0                 | '         d+=bi
11ea0     1B 39 02 C1 |  if_b	add	local14, local13
11ea4                 | '         x+=xi
11ea4     16 29 02 C1 |  if_b	add	local06, local08
11ea8                 | '       putpixel(x,y,c)
11ea8     14 13 02 F6 | 	mov	arg01, local06
11eac     15 15 02 F6 | 	mov	arg02, local07
11eb0     13 17 02 F6 | 	mov	arg03, local05
11eb4     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
11eb8     CC FF 9F FD | 	jmp	#LR__1511
11ebc                 | LR__1512
11ebc                 | '   else
11ebc                 | '     ai:=(dx-dy)*2
11ebc     17 35 02 F6 | 	mov	local12, local09
11ec0     19 35 82 F1 | 	sub	local12, local11
11ec4     01 34 66 F0 | 	shl	local12, #1
11ec8                 | '     bi:=dx*2
11ec8     01 2E 66 F0 | 	shl	local09, #1
11ecc     17 37 02 F6 | 	mov	local13, local09
11ed0                 | '     d:=bi-dy
11ed0     1B 39 02 F6 | 	mov	local14, local13
11ed4     19 39 82 F1 | 	sub	local14, local11
11ed8                 | '     repeat while (y<>y2)
11ed8                 | LR__1513
11ed8     12 2B 0A F2 | 	cmp	local07, local04 wz
11edc     2C 00 90 AD |  if_e	jmp	#LR__1514
11ee0                 | '       if (d>=0)
11ee0     00 38 56 F2 | 	cmps	local14, #0 wc
11ee4                 | '         x+=xi
11ee4     16 29 02 31 |  if_ae	add	local06, local08
11ee8                 | '         y+=yi
11ee8     18 2B 02 31 |  if_ae	add	local07, local10
11eec                 | '         d+=ai
11eec     1A 39 02 31 |  if_ae	add	local14, local12
11ef0                 | '       else
11ef0                 | '         d+=bi
11ef0     1B 39 02 C1 |  if_b	add	local14, local13
11ef4                 | '         y+=yi
11ef4     18 2B 02 C1 |  if_b	add	local07, local10
11ef8                 | '       putpixel(x, y,c)
11ef8     14 13 02 F6 | 	mov	arg01, local06
11efc     15 15 02 F6 | 	mov	arg02, local07
11f00     13 17 02 F6 | 	mov	arg03, local05
11f04     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
11f08     CC FF 9F FD | 	jmp	#LR__1513
11f0c                 | LR__1514
11f0c                 | LR__1515
11f0c                 | LR__1516
11f0c     A7 F0 03 F6 | 	mov	ptra, fp
11f10     B2 00 A0 FD | 	call	#popregs_
11f14                 | _hg010b_spin2_draw_ret
11f14     2D 00 64 FD | 	ret
11f18                 | 
11f18                 | '  
11f18                 | ' pub fillpush(val) 
11f18                 | _hg010b_spin2_fillpush
11f18                 | ' fillstack[fillptr]:=val
11f18     0B 00 00 FF 
11f1c     B6 E4 05 F1 | 	add	objptr, ##5814
11f20     F2 00 02 FB | 	rdlong	_var01, objptr
11f24     02 00 66 F0 | 	shl	_var01, #2
11f28     0A 00 00 FF 
11f2c     00 E4 85 F1 | 	sub	objptr, ##5120
11f30     F2 00 02 F1 | 	add	_var01, objptr
11f34     00 13 62 FC | 	wrlong	arg01, _var01
11f38                 | ' fillptr+=1   
11f38     0A 00 00 FF 
11f3c     00 E4 05 F1 | 	add	objptr, ##5120
11f40     F2 00 02 FB | 	rdlong	_var01, objptr
11f44     01 00 06 F1 | 	add	_var01, #1
11f48     F2 00 62 FC | 	wrlong	_var01, objptr
11f4c     0B 00 00 FF 
11f50     B6 E4 85 F1 | 	sub	objptr, ##5814
11f54                 | _hg010b_spin2_fillpush_ret
11f54     2D 00 64 FD | 	ret
11f58                 | 
11f58                 | ' 
11f58                 | '     
11f58                 | ' pub fillpop() : val
11f58                 | _hg010b_spin2_fillpop
11f58                 | ' 
11f58                 | ' fillptr-=1
11f58     0B 00 00 FF 
11f5c     B6 E4 05 F1 | 	add	objptr, ##5814
11f60     F2 FA 01 FB | 	rdlong	result1, objptr
11f64     01 FA 85 F1 | 	sub	result1, #1
11f68     F2 FA 61 FC | 	wrlong	result1, objptr
11f6c                 | ' if fillptr<0
11f6c     0B 00 00 FF 
11f70     B6 E4 85 F1 | 	sub	objptr, ##5814
11f74     00 FA 55 F2 | 	cmps	result1, #0 wc
11f78                 | '   fillptr:=0
11f78     0B 00 00 CF 
11f7c     B6 E4 05 C1 |  if_b	add	objptr, ##5814
11f80     F2 00 68 CC |  if_b	wrlong	#0, objptr
11f84     0B 00 00 CF 
11f88     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
11f8c                 | '   val:=-12345
11f8c     E7 FF 7F CF 
11f90     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
11f94     28 00 90 CD |  if_b	jmp	#LR__1520
11f98                 | ' else 
11f98                 | '   val:=fillstack[fillptr]
11f98     0B 00 00 FF 
11f9c     B6 E4 05 F1 | 	add	objptr, ##5814
11fa0     F2 00 02 FB | 	rdlong	_var01, objptr
11fa4     02 00 66 F0 | 	shl	_var01, #2
11fa8     0A 00 00 FF 
11fac     00 E4 85 F1 | 	sub	objptr, ##5120
11fb0     F2 00 02 F1 | 	add	_var01, objptr
11fb4     00 01 02 FB | 	rdlong	_var01, _var01
11fb8     01 00 00 FF 
11fbc     B6 E4 85 F1 | 	sub	objptr, ##694
11fc0                 | LR__1520
11fc0                 | ' return val
11fc0     00 FB 01 F6 | 	mov	result1, _var01
11fc4                 | _hg010b_spin2_fillpop_ret
11fc4     2D 00 64 FD | 	ret
11fc8                 | 
11fc8                 | ' 
11fc8                 | '       
11fc8                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
11fc8                 | _hg010b_spin2_fill
11fc8     0B 4A 05 F6 | 	mov	COUNT_, #11
11fcc     A8 00 A0 FD | 	call	#pushregs_
11fd0                 | ' 
11fd0                 | ' newcolor:=newcolor & 255
11fd0     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
11fd4                 | ' oldcolor:=oldcolor & 255
11fd4     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
11fd8                 | ' 
11fd8                 | ' if (oldcolor == newcolor) 
11fd8     0F 21 0A F2 | 	cmp	local02, local01 wz
11fdc                 | '   return
11fdc     7C 02 90 AD |  if_e	jmp	#LR__1539
11fe0                 | ' 
11fe0                 | ' fillptr:=0
11fe0     0B 00 00 FF 
11fe4     B6 E4 05 F1 | 	add	objptr, ##5814
11fe8     F2 00 68 FC | 	wrlong	#0, objptr
11fec                 | ' fillmax:=0
11fec     04 E4 05 F1 | 	add	objptr, #4
11ff0     F2 00 68 FC | 	wrlong	#0, objptr
11ff4     0B 00 00 FF 
11ff8     BA E4 85 F1 | 	sub	objptr, ##5818
11ffc                 | ' fillpush(x)
11ffc     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
12000                 | ' fillpush(y)
12000     0A 13 02 F6 | 	mov	arg01, arg02
12004     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
12008                 | ' y:=fillpop()
12008     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1200c     FD 22 02 F6 | 	mov	local03, result1
12010                 | ' x:=fillpop()
12010     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
12014     FD 24 02 F6 | 	mov	local04, result1
12018                 | ' pinhigh(38)
12018     59 4C 64 FD | 	drvh	#38
1201c                 | ' repeat while (x>-1)       
1201c                 | LR__1530
1201c     00 24 56 F2 | 	cmps	local04, #0 wc
12020     34 02 90 CD |  if_b	jmp	#LR__1538
12024                 | '   pintoggle(39)
12024     5F 4E 64 FD | 	drvnot	#39
12028                 | '   x1 := x
12028     12 27 02 F6 | 	mov	local05, local04
1202c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1202c                 | LR__1531
1202c     00 28 06 F6 | 	mov	local06, #0
12030     00 2A 06 F6 | 	mov	local07, #0
12034     00 26 56 F2 | 	cmps	local05, #0 wc
12038     01 2A 66 36 |  if_ae	neg	local07, #1
1203c     00 2A 0E F2 | 	cmp	local07, #0 wz
12040     00 28 26 56 |  if_ne	not	local06, #0
12044     00 2C 06 F6 | 	mov	local08, #0
12048     00 2E 06 F6 | 	mov	local09, #0
1204c     11 15 02 F6 | 	mov	arg02, local03
12050     13 13 02 F6 | 	mov	arg01, local05
12054     E0 FB BF FD | 	call	#_hg010b_spin2_getpixel2
12058     10 FB 09 F2 | 	cmp	result1, local02 wz
1205c     00 2E 26 A6 |  if_e	not	local09, #0
12060     00 2E 0E F2 | 	cmp	local09, #0 wz
12064     00 2C 26 56 |  if_ne	not	local08, #0
12068     16 29 CA F7 | 	test	local06, local08 wz
1206c                 | '     x1--
1206c     01 26 86 51 |  if_ne	sub	local05, #1
12070     B8 FF 9F 5D |  if_ne	jmp	#LR__1531
12074                 | '   x1++
12074     01 26 06 F1 | 	add	local05, #1
12078                 | '   spanabove := 0
12078     00 30 06 F6 | 	mov	local10, #0
1207c                 | '   spanbelow := 0
1207c     00 32 06 F6 | 	mov	local11, #0
12080                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
12080                 | LR__1532
12080     00 28 06 F6 | 	mov	local06, #0
12084     02 00 00 FF 
12088     00 26 56 F2 | 	cmps	local05, ##1024 wc
1208c     00 28 26 C6 |  if_b	not	local06, #0
12090     00 2C 06 F6 | 	mov	local08, #0
12094     00 2E 06 F6 | 	mov	local09, #0
12098     11 15 02 F6 | 	mov	arg02, local03
1209c     13 13 02 F6 | 	mov	arg01, local05
120a0     94 FB BF FD | 	call	#_hg010b_spin2_getpixel2
120a4     10 FB 09 F2 | 	cmp	result1, local02 wz
120a8     00 2E 26 A6 |  if_e	not	local09, #0
120ac     00 2E 0E F2 | 	cmp	local09, #0 wz
120b0     00 2C 26 56 |  if_ne	not	local08, #0
120b4     16 29 CA F7 | 	test	local06, local08 wz
120b8     88 01 90 AD |  if_e	jmp	#LR__1537
120bc                 | '     putpixel2 (x1,y, newcolor & 255)
120bc     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
120c0     13 13 02 F6 | 	mov	arg01, local05
120c4     11 15 02 F6 | 	mov	arg02, local03
120c8     0C FB BF FD | 	call	#_hg010b_spin2_putpixel2
120cc                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
120cc     00 28 06 F6 | 	mov	local06, #0
120d0     00 2A 06 F6 | 	mov	local07, #0
120d4     00 30 0E F2 | 	cmp	local10, #0 wz
120d8     01 22 56 A2 |  if_e	cmps	local03, #1 wc
120dc     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
120e0     00 2A 0E F2 | 	cmp	local07, #0 wz
120e4     00 28 26 56 |  if_ne	not	local06, #0
120e8     00 2C 06 F6 | 	mov	local08, #0
120ec     00 2E 06 F6 | 	mov	local09, #0
120f0     11 15 02 F6 | 	mov	arg02, local03
120f4     01 14 86 F1 | 	sub	arg02, #1
120f8     13 13 02 F6 | 	mov	arg01, local05
120fc     38 FB BF FD | 	call	#_hg010b_spin2_getpixel2
12100     10 FB 09 F2 | 	cmp	result1, local02 wz
12104     00 2E 26 A6 |  if_e	not	local09, #0
12108     00 2E 0E F2 | 	cmp	local09, #0 wz
1210c     00 2C 26 56 |  if_ne	not	local08, #0
12110     16 29 CA F7 | 	test	local06, local08 wz
12114     1C 00 90 AD |  if_e	jmp	#LR__1533
12118                 | '       fillpush(x1)
12118     13 13 02 F6 | 	mov	arg01, local05
1211c     F8 FD BF FD | 	call	#_hg010b_spin2_fillpush
12120                 | '       fillpush(y-1)
12120     11 13 02 F6 | 	mov	arg01, local03
12124     01 12 86 F1 | 	sub	arg01, #1
12128     EC FD BF FD | 	call	#_hg010b_spin2_fillpush
1212c                 | '       spanAbove := 1 
1212c     01 30 06 F6 | 	mov	local10, #1
12130     4C 00 90 FD | 	jmp	#LR__1534
12134                 | LR__1533
12134                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
12134     00 28 06 F6 | 	mov	local06, #0
12138     00 2A 06 F6 | 	mov	local07, #0
1213c     00 30 0E F2 | 	cmp	local10, #0 wz
12140     01 22 56 52 |  if_ne	cmps	local03, #1 wc
12144     01 2A 66 16 |  if_a	neg	local07, #1
12148     00 2A 0E F2 | 	cmp	local07, #0 wz
1214c     00 28 26 56 |  if_ne	not	local06, #0
12150     00 2C 06 F6 | 	mov	local08, #0
12154     00 2E 06 F6 | 	mov	local09, #0
12158     11 15 02 F6 | 	mov	arg02, local03
1215c     01 14 86 F1 | 	sub	arg02, #1
12160     13 13 02 F6 | 	mov	arg01, local05
12164     D0 FA BF FD | 	call	#_hg010b_spin2_getpixel2
12168     10 FB 09 F2 | 	cmp	result1, local02 wz
1216c     00 2E 26 56 |  if_ne	not	local09, #0
12170     00 2E 0E F2 | 	cmp	local09, #0 wz
12174     00 2C 26 56 |  if_ne	not	local08, #0
12178     16 29 CA F7 | 	test	local06, local08 wz
1217c                 | '       spanAbove := 0 
1217c     00 30 06 56 |  if_ne	mov	local10, #0
12180                 | LR__1534
12180                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
12180     00 28 06 F6 | 	mov	local06, #0
12184     00 2A 06 F6 | 	mov	local07, #0
12188     00 32 0E F2 | 	cmp	local11, #0 wz
1218c     01 00 00 AF 
12190     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
12194     01 2A 66 86 |  if_c_and_z	neg	local07, #1
12198     00 2A 0E F2 | 	cmp	local07, #0 wz
1219c     00 28 26 56 |  if_ne	not	local06, #0
121a0     00 2C 06 F6 | 	mov	local08, #0
121a4     00 2E 06 F6 | 	mov	local09, #0
121a8     11 15 02 F6 | 	mov	arg02, local03
121ac     01 14 06 F1 | 	add	arg02, #1
121b0     13 13 02 F6 | 	mov	arg01, local05
121b4     80 FA BF FD | 	call	#_hg010b_spin2_getpixel2
121b8     10 FB 09 F2 | 	cmp	result1, local02 wz
121bc     00 2E 26 A6 |  if_e	not	local09, #0
121c0     00 2E 0E F2 | 	cmp	local09, #0 wz
121c4     00 2C 26 56 |  if_ne	not	local08, #0
121c8     16 29 CA F7 | 	test	local06, local08 wz
121cc     1C 00 90 AD |  if_e	jmp	#LR__1535
121d0                 | '       fillpush(x1)
121d0     13 13 02 F6 | 	mov	arg01, local05
121d4     40 FD BF FD | 	call	#_hg010b_spin2_fillpush
121d8                 | '       fillpush(y + 1)
121d8     11 13 02 F6 | 	mov	arg01, local03
121dc     01 12 06 F1 | 	add	arg01, #1
121e0     34 FD BF FD | 	call	#_hg010b_spin2_fillpush
121e4                 | '       spanBelow := 1
121e4     01 32 06 F6 | 	mov	local11, #1
121e8     50 00 90 FD | 	jmp	#LR__1536
121ec                 | LR__1535
121ec                 | '     elseif((spanBelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
121ec     00 28 06 F6 | 	mov	local06, #0
121f0     00 2A 06 F6 | 	mov	local07, #0
121f4     00 32 0E F2 | 	cmp	local11, #0 wz
121f8     01 00 00 5F 
121fc     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
12200     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
12204     00 2A 0E F2 | 	cmp	local07, #0 wz
12208     00 28 26 56 |  if_ne	not	local06, #0
1220c     00 2C 06 F6 | 	mov	local08, #0
12210     00 2E 06 F6 | 	mov	local09, #0
12214     11 15 02 F6 | 	mov	arg02, local03
12218     01 14 06 F1 | 	add	arg02, #1
1221c     13 13 02 F6 | 	mov	arg01, local05
12220     14 FA BF FD | 	call	#_hg010b_spin2_getpixel2
12224     10 FB 09 F2 | 	cmp	result1, local02 wz
12228     00 2E 26 56 |  if_ne	not	local09, #0
1222c     00 2E 0E F2 | 	cmp	local09, #0 wz
12230     00 2C 26 56 |  if_ne	not	local08, #0
12234     16 29 CA F7 | 	test	local06, local08 wz
12238                 | '       spanBelow := 0
12238     00 32 06 56 |  if_ne	mov	local11, #0
1223c                 | LR__1536
1223c                 | '     x1++
1223c     01 26 06 F1 | 	add	local05, #1
12240     3C FE 9F FD | 	jmp	#LR__1532
12244                 | LR__1537
12244                 | '   y:=fillpop()
12244     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
12248     FD 22 02 F6 | 	mov	local03, result1
1224c                 | '   x:=fillpop()
1224c     08 FD BF FD | 	call	#_hg010b_spin2_fillpop
12250     FD 24 02 F6 | 	mov	local04, result1
12254     C4 FD 9F FD | 	jmp	#LR__1530
12258                 | LR__1538
12258                 | ' pinlow(38)    
12258     58 4C 64 FD | 	drvl	#38
1225c                 | LR__1539
1225c     A7 F0 03 F6 | 	mov	ptra, fp
12260     B2 00 A0 FD | 	call	#popregs_
12264                 | _hg010b_spin2_fill_ret
12264     2D 00 64 FD | 	ret
12268                 | 
12268                 | ' 
12268                 | ' '-- A filled circle -----------------------------------------------------
12268                 | ' 
12268                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
12268                 | _hg010b_spin2_fcircle
12268     08 4A 05 F6 | 	mov	COUNT_, #8
1226c     A8 00 A0 FD | 	call	#pushregs_
12270     0B 1F 02 F6 | 	mov	local01, arg03
12274     FF FF 7F FF 
12278     FE 1F 06 FD | 	qmul	local01, ##-2
1227c     09 21 02 F6 | 	mov	local02, arg01
12280     0A 23 02 F6 | 	mov	local03, arg02
12284     0C 25 02 F6 | 	mov	local04, arg04
12288                 | ' 
12288                 | ' d:=5-4*r
12288     0F 19 02 F6 | 	mov	arg04, local01
1228c     02 18 66 F0 | 	shl	arg04, #2
12290     05 26 06 F6 | 	mov	local05, #5
12294     0C 27 82 F1 | 	sub	local05, arg04
12298                 | ' x:=0
12298     00 28 06 F6 | 	mov	local06, #0
1229c                 | ' y:=r
1229c                 | ' da:=(-2*r+5)*4
1229c                 | ' db:=3*4
1229c     0C 2A 06 F6 | 	mov	local07, #12
122a0                 | ' repeat while (x<=y) 
122a0     18 2C 62 FD | 	getqx	local08
122a4     05 2C 06 F1 | 	add	local08, #5
122a8     02 2C 66 F0 | 	shl	local08, #2
122ac                 | LR__1540
122ac     0F 29 5A F2 | 	cmps	local06, local01 wcz
122b0     B4 00 90 1D |  if_a	jmp	#LR__1542
122b4                 | '   fastline(x0-x,x0+x,y0-y,c)
122b4     10 13 02 F6 | 	mov	arg01, local02
122b8     14 13 82 F1 | 	sub	arg01, local06
122bc     10 15 02 F6 | 	mov	arg02, local02
122c0     14 15 02 F1 | 	add	arg02, local06
122c4     11 17 02 F6 | 	mov	arg03, local03
122c8     0F 17 82 F1 | 	sub	arg03, local01
122cc     12 19 02 F6 | 	mov	arg04, local04
122d0     EC F9 BF FD | 	call	#_hg010b_spin2_fastline
122d4                 | '   fastline(x0-x,x0+x,y0+y,c)
122d4     10 13 02 F6 | 	mov	arg01, local02
122d8     14 13 82 F1 | 	sub	arg01, local06
122dc     10 15 02 F6 | 	mov	arg02, local02
122e0     14 15 02 F1 | 	add	arg02, local06
122e4     11 17 02 F6 | 	mov	arg03, local03
122e8     0F 17 02 F1 | 	add	arg03, local01
122ec     12 19 02 F6 | 	mov	arg04, local04
122f0     CC F9 BF FD | 	call	#_hg010b_spin2_fastline
122f4                 | '   fastline(x0-y,x0+y,y0-x,c)
122f4     10 13 02 F6 | 	mov	arg01, local02
122f8     0F 13 82 F1 | 	sub	arg01, local01
122fc     10 15 02 F6 | 	mov	arg02, local02
12300     0F 15 02 F1 | 	add	arg02, local01
12304     11 17 02 F6 | 	mov	arg03, local03
12308     14 17 82 F1 | 	sub	arg03, local06
1230c     12 19 02 F6 | 	mov	arg04, local04
12310     AC F9 BF FD | 	call	#_hg010b_spin2_fastline
12314                 | '   fastline(x0-y,x0+y,y0+x,c)
12314     10 13 02 F6 | 	mov	arg01, local02
12318     0F 13 82 F1 | 	sub	arg01, local01
1231c     10 15 02 F6 | 	mov	arg02, local02
12320     0F 15 02 F1 | 	add	arg02, local01
12324     11 17 02 F6 | 	mov	arg03, local03
12328     14 17 02 F1 | 	add	arg03, local06
1232c     12 19 02 F6 | 	mov	arg04, local04
12330     8C F9 BF FD | 	call	#_hg010b_spin2_fastline
12334                 | '   if d>0 
12334     01 26 56 F2 | 	cmps	local05, #1 wc
12338     18 00 90 CD |  if_b	jmp	#LR__1541
1233c                 | '     d+=da
1233c     16 27 02 F1 | 	add	local05, local08
12340                 | '     y-=1
12340     01 1E 86 F1 | 	sub	local01, #1
12344                 | '     x+=1
12344     01 28 06 F1 | 	add	local06, #1
12348                 | '     da+=4*4
12348     10 2C 06 F1 | 	add	local08, #16
1234c                 | '     db+=2*4
1234c     08 2A 06 F1 | 	add	local07, #8
12350     58 FF 9F FD | 	jmp	#LR__1540
12354                 | LR__1541
12354                 | '   else
12354                 | '     d+=db
12354     15 27 02 F1 | 	add	local05, local07
12358                 | '     x+=1
12358     01 28 06 F1 | 	add	local06, #1
1235c                 | '     da+=2*4
1235c     08 2C 06 F1 | 	add	local08, #8
12360                 | '     db+=2*4
12360     08 2A 06 F1 | 	add	local07, #8
12364     44 FF 9F FD | 	jmp	#LR__1540
12368                 | LR__1542
12368     A7 F0 03 F6 | 	mov	ptra, fp
1236c     B2 00 A0 FD | 	call	#popregs_
12370                 | _hg010b_spin2_fcircle_ret
12370     2D 00 64 FD | 	ret
12374                 | 
12374                 | '  
12374                 | ' '-- A circle ------------------------------------------------------------ 
12374                 | '  
12374                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
12374                 | _hg010b_spin2_circle
12374     08 4A 05 F6 | 	mov	COUNT_, #8
12378     A8 00 A0 FD | 	call	#pushregs_
1237c     0B 1F 02 F6 | 	mov	local01, arg03
12380     FF FF 7F FF 
12384     FE 1F 06 FD | 	qmul	local01, ##-2
12388     09 21 02 F6 | 	mov	local02, arg01
1238c     0A 23 02 F6 | 	mov	local03, arg02
12390     0C 25 02 F6 | 	mov	local04, arg04
12394                 | ' 
12394                 | '  
12394                 | ' d:=5-4*r
12394     0F 19 02 F6 | 	mov	arg04, local01
12398     02 18 66 F0 | 	shl	arg04, #2
1239c     05 26 06 F6 | 	mov	local05, #5
123a0     0C 27 82 F1 | 	sub	local05, arg04
123a4                 | ' x:=0
123a4     00 28 06 F6 | 	mov	local06, #0
123a8                 | ' y:=r
123a8                 | ' da:=(-2*r+5)*4
123a8                 | ' db:=3*4
123a8     0C 2A 06 F6 | 	mov	local07, #12
123ac                 | ' repeat while (x<=y) 
123ac     18 2C 62 FD | 	getqx	local08
123b0     05 2C 06 F1 | 	add	local08, #5
123b4     02 2C 66 F0 | 	shl	local08, #2
123b8                 | LR__1550
123b8     0F 29 5A F2 | 	cmps	local06, local01 wcz
123bc     F4 00 90 1D |  if_a	jmp	#LR__1552
123c0                 | '   putpixel(x0-x,y0-y,c)
123c0     10 13 02 F6 | 	mov	arg01, local02
123c4     14 13 82 F1 | 	sub	arg01, local06
123c8     11 15 02 F6 | 	mov	arg02, local03
123cc     0F 15 82 F1 | 	sub	arg02, local01
123d0     12 17 02 F6 | 	mov	arg03, local04
123d4     50 F7 BF FD | 	call	#_hg010b_spin2_putpixel
123d8                 | '   putpixel(x0-x,y0+y,c)
123d8     10 13 02 F6 | 	mov	arg01, local02
123dc     14 13 82 F1 | 	sub	arg01, local06
123e0     11 15 02 F6 | 	mov	arg02, local03
123e4     0F 15 02 F1 | 	add	arg02, local01
123e8     12 17 02 F6 | 	mov	arg03, local04
123ec     38 F7 BF FD | 	call	#_hg010b_spin2_putpixel
123f0                 | '   putpixel(x0+x,y0-y,c)
123f0     10 13 02 F6 | 	mov	arg01, local02
123f4     14 13 02 F1 | 	add	arg01, local06
123f8     11 15 02 F6 | 	mov	arg02, local03
123fc     0F 15 82 F1 | 	sub	arg02, local01
12400     12 17 02 F6 | 	mov	arg03, local04
12404     20 F7 BF FD | 	call	#_hg010b_spin2_putpixel
12408                 | '   putpixel(x0+x,y0+y,c)
12408     10 13 02 F6 | 	mov	arg01, local02
1240c     14 13 02 F1 | 	add	arg01, local06
12410     11 15 02 F6 | 	mov	arg02, local03
12414     0F 15 02 F1 | 	add	arg02, local01
12418     12 17 02 F6 | 	mov	arg03, local04
1241c     08 F7 BF FD | 	call	#_hg010b_spin2_putpixel
12420                 | '   putpixel(x0-y,y0-x,c)
12420     10 13 02 F6 | 	mov	arg01, local02
12424     0F 13 82 F1 | 	sub	arg01, local01
12428     11 15 02 F6 | 	mov	arg02, local03
1242c     14 15 82 F1 | 	sub	arg02, local06
12430     12 17 02 F6 | 	mov	arg03, local04
12434     F0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12438                 | '   putpixel(x0-y,y0+x,c)
12438     10 13 02 F6 | 	mov	arg01, local02
1243c     0F 13 82 F1 | 	sub	arg01, local01
12440     11 15 02 F6 | 	mov	arg02, local03
12444     14 15 02 F1 | 	add	arg02, local06
12448     12 17 02 F6 | 	mov	arg03, local04
1244c     D8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12450                 | '   putpixel(x0+y,y0-x,c)
12450     10 13 02 F6 | 	mov	arg01, local02
12454     0F 13 02 F1 | 	add	arg01, local01
12458     11 15 02 F6 | 	mov	arg02, local03
1245c     14 15 82 F1 | 	sub	arg02, local06
12460     12 17 02 F6 | 	mov	arg03, local04
12464     C0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12468                 | '   putpixel(x0+y,y0+x,c)
12468     10 13 02 F6 | 	mov	arg01, local02
1246c     0F 13 02 F1 | 	add	arg01, local01
12470     11 15 02 F6 | 	mov	arg02, local03
12474     14 15 02 F1 | 	add	arg02, local06
12478     12 17 02 F6 | 	mov	arg03, local04
1247c     A8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12480                 | '   if d>0 
12480     01 26 56 F2 | 	cmps	local05, #1 wc
12484     18 00 90 CD |  if_b	jmp	#LR__1551
12488                 | '     d+=da
12488     16 27 02 F1 | 	add	local05, local08
1248c                 | '     y-=1
1248c     01 1E 86 F1 | 	sub	local01, #1
12490                 | '     x+=1
12490     01 28 06 F1 | 	add	local06, #1
12494                 | '     da+=4*4
12494     10 2C 06 F1 | 	add	local08, #16
12498                 | '     db+=2*4
12498     08 2A 06 F1 | 	add	local07, #8
1249c     18 FF 9F FD | 	jmp	#LR__1550
124a0                 | LR__1551
124a0                 | '   else
124a0                 | '     d+=db
124a0     15 27 02 F1 | 	add	local05, local07
124a4                 | '     x+=1
124a4     01 28 06 F1 | 	add	local06, #1
124a8                 | '     da+=2*4
124a8     08 2C 06 F1 | 	add	local08, #8
124ac                 | '     db+=2*4
124ac     08 2A 06 F1 | 	add	local07, #8
124b0     04 FF 9F FD | 	jmp	#LR__1550
124b4                 | LR__1552
124b4     A7 F0 03 F6 | 	mov	ptra, fp
124b8     B2 00 A0 FD | 	call	#popregs_
124bc                 | _hg010b_spin2_circle_ret
124bc     2D 00 64 FD | 	ret
124c0                 | 
124c0                 | '     
124c0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
124c0                 | ' 
124c0                 | ' pub frame(x1,y1,x2,y2,c)
124c0                 | _hg010b_spin2_frame
124c0     05 4A 05 F6 | 	mov	COUNT_, #5
124c4     A8 00 A0 FD | 	call	#pushregs_
124c8     09 1F 02 F6 | 	mov	local01, arg01
124cc     0A 21 02 F6 | 	mov	local02, arg02
124d0     0B 23 02 F6 | 	mov	local03, arg03
124d4     0C 25 02 F6 | 	mov	local04, arg04
124d8     0D 27 02 F6 | 	mov	local05, arg05
124dc                 | ' 
124dc                 | ' fastline(x1,x2,y1,c)
124dc     0F 13 02 F6 | 	mov	arg01, local01
124e0     11 15 02 F6 | 	mov	arg02, local03
124e4     10 17 02 F6 | 	mov	arg03, local02
124e8     13 19 02 F6 | 	mov	arg04, local05
124ec     D0 F7 BF FD | 	call	#_hg010b_spin2_fastline
124f0                 | ' fastline(x1,x2,y2,c)
124f0     0F 13 02 F6 | 	mov	arg01, local01
124f4     11 15 02 F6 | 	mov	arg02, local03
124f8     12 17 02 F6 | 	mov	arg03, local04
124fc     13 19 02 F6 | 	mov	arg04, local05
12500     BC F7 BF FD | 	call	#_hg010b_spin2_fastline
12504                 | ' line(x1,y1,x1,y2,c)
12504     0F 13 02 F6 | 	mov	arg01, local01
12508     10 15 02 F6 | 	mov	arg02, local02
1250c     0F 17 02 F6 | 	mov	arg03, local01
12510     12 19 02 F6 | 	mov	arg04, local04
12514     13 1B 02 F6 | 	mov	arg05, local05
12518                 | ' draw(x1,y1,x2,y2,c)
12518     BC F8 BF FD | 	call	#_hg010b_spin2_draw
1251c                 | ' line(x2,y1,x2,y2,c)
1251c     11 13 02 F6 | 	mov	arg01, local03
12520     10 15 02 F6 | 	mov	arg02, local02
12524     11 17 02 F6 | 	mov	arg03, local03
12528     12 19 02 F6 | 	mov	arg04, local04
1252c     13 1B 02 F6 | 	mov	arg05, local05
12530                 | ' draw(x1,y1,x2,y2,c)
12530     A4 F8 BF FD | 	call	#_hg010b_spin2_draw
12534     A7 F0 03 F6 | 	mov	ptra, fp
12538     B2 00 A0 FD | 	call	#popregs_
1253c                 | _hg010b_spin2_frame_ret
1253c     2D 00 64 FD | 	ret
12540                 | 
12540                 | ' 
12540                 | ' '-- A box (a filled rectangle) ----------------------------------------
12540                 | ' 
12540                 | ' pub box(x1,y1,x2,y2,c) |yy
12540                 | _hg010b_spin2_box
12540     06 4A 05 F6 | 	mov	COUNT_, #6
12544     A8 00 A0 FD | 	call	#pushregs_
12548     09 1F 02 F6 | 	mov	local01, arg01
1254c     0A 21 02 F6 | 	mov	local02, arg02
12550     0B 23 02 F6 | 	mov	local03, arg03
12554     0C 25 02 F6 | 	mov	local04, arg04
12558     0D 27 02 F6 | 	mov	local05, arg05
1255c                 | ' 
1255c                 | ' repeat yy from y1 to y2
1255c     10 25 52 F2 | 	cmps	local04, local02 wc
12560     01 28 86 F6 | 	negc	local06, #1
12564     14 25 02 F1 | 	add	local04, local06
12568                 | LR__1560
12568                 | '   fastline(x1,x2,yy,c)
12568     0F 13 02 F6 | 	mov	arg01, local01
1256c     11 15 02 F6 | 	mov	arg02, local03
12570     13 19 02 F6 | 	mov	arg04, local05
12574     10 17 02 F6 | 	mov	arg03, local02
12578     44 F7 BF FD | 	call	#_hg010b_spin2_fastline
1257c     14 21 02 F1 | 	add	local02, local06
12580     12 21 0A F2 | 	cmp	local02, local04 wz
12584     E0 FF 9F 5D |  if_ne	jmp	#LR__1560
12588     A7 F0 03 F6 | 	mov	ptra, fp
1258c     B2 00 A0 FD | 	call	#popregs_
12590                 | _hg010b_spin2_box_ret
12590     2D 00 64 FD | 	ret
12594                 | 
12594                 | '       
12594                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
12594                 | _hg010b_spin2_putcharxycgf
12594                 | ' 
12594                 | '  
12594                 | ' repeat yy from 0 to 15
12594     00 00 06 F6 | 	mov	_var01, #0
12598     97 8C 48 FB | 	callpa	#(@LR__1572-@LR__1570)>>2,fcache_load_ptr_
1259c                 | LR__1570
1259c                 | ' 
1259c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1259c     91 E4 05 F1 | 	add	objptr, #145
125a0     F2 02 02 FB | 	rdlong	_var02, objptr
125a4     0A 02 66 F0 | 	shl	_var02, #10
125a8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
125ac     01 05 02 F1 | 	add	_var03, _var02
125b0     0B 03 02 F6 | 	mov	_var02, arg03
125b4     04 02 66 F0 | 	shl	_var02, #4
125b8     01 05 02 F1 | 	add	_var03, _var02
125bc     00 05 02 F1 | 	add	_var03, _var01
125c0     02 05 C2 FA | 	rdbyte	_var03, _var03
125c4                 | '   asm
125c4     00 04 0E F4 | 	testb	_var03, #0 wz
125c8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
125cc     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
125d0     01 04 0E F4 | 	testb	_var03, #1 wz
125d4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
125d8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
125dc     02 04 0E F4 | 	testb	_var03, #2 wz
125e0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
125e4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
125e8     03 04 0E F4 | 	testb	_var03, #3 wz
125ec     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
125f0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
125f4     04 04 0E F4 | 	testb	_var03, #4 wz
125f8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
125fc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
12600     05 04 0E F4 | 	testb	_var03, #5 wz
12604     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
12608     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1260c     06 04 0E F4 | 	testb	_var03, #6 wz
12610     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
12614     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
12618     07 04 0E F4 | 	testb	_var03, #7 wz
1261c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
12620     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
12624                 | '   
12624                 | '   ccc[0]:=c1
12624     99 E5 05 F1 | 	add	objptr, #409
12628     F2 06 62 FC | 	wrlong	_var04, objptr
1262c                 | '   ccc[1]:=c2 
1262c     04 E4 05 F1 | 	add	objptr, #4
12630     F2 08 62 FC | 	wrlong	_var05, objptr
12634                 | '   long[mailbox0][2]:=8
12634     49 E4 85 F1 | 	sub	objptr, #73
12638     F2 04 02 FB | 	rdlong	_var03, objptr
1263c     08 04 06 F1 | 	add	_var03, #8
12640     02 11 68 FC | 	wrlong	#8, _var03
12644                 | '   long[mailbox0][1]:=@ccc
12644     45 E4 05 F1 | 	add	objptr, #69
12648     F2 04 02 F6 | 	mov	_var03, objptr
1264c     45 E4 85 F1 | 	sub	objptr, #69
12650     F2 02 02 FB | 	rdlong	_var02, objptr
12654     04 02 06 F1 | 	add	_var02, #4
12658     01 05 62 FC | 	wrlong	_var03, _var02
1265c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1265c     0C E5 85 F1 | 	sub	objptr, #268
12660     F2 04 02 FB | 	rdlong	_var03, objptr
12664     0A 03 02 F6 | 	mov	_var02, arg02
12668     00 03 02 F1 | 	add	_var02, _var01
1266c     0A 02 66 F0 | 	shl	_var02, #10
12670     09 0B 02 F6 | 	mov	_var06, arg01
12674     02 0A 66 F0 | 	shl	_var06, #2
12678     05 03 02 F1 | 	add	_var02, _var06
1267c     01 05 02 F1 | 	add	_var03, _var02
12680     00 00 78 FF 
12684     00 04 06 F1 | 	add	_var03, ##-268435456
12688     0C E5 05 F1 | 	add	objptr, #268
1268c     F2 0A 02 FB | 	rdlong	_var06, objptr
12690     05 05 62 FC | 	wrlong	_var03, _var06
12694                 | '   repeat
12694                 | LR__1571
12694     F2 04 02 FB | 	rdlong	_var03, objptr
12698     02 03 02 FB | 	rdlong	_var02, _var03
1269c     00 02 56 F2 | 	cmps	_var02, #0 wc
126a0     F0 FF 9F CD |  if_b	jmp	#LR__1571
126a4     E5 E5 85 F1 | 	sub	objptr, #485
126a8     01 00 06 F1 | 	add	_var01, #1
126ac     10 00 56 F2 | 	cmps	_var01, #16 wc
126b0     E8 FE 9F CD |  if_b	jmp	#LR__1570
126b4                 | LR__1572
126b4                 | _hg010b_spin2_putcharxycgf_ret
126b4     2D 00 64 FD | 	ret
126b8                 | 
126b8                 | ' 
126b8                 | ' 
126b8                 | ' '**********************************************************************r***
126b8                 | ' '                                                                        *
126b8                 | ' ' Font related functions                                                 *
126b8                 | ' '                                                                        *
126b8                 | ' '*************************************************************************
126b8                 | ' 
126b8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
126b8                 | ' 
126b8                 | ' pub setfontfamily(afontnum)
126b8                 | _hg010b_spin2_setfontfamily
126b8                 | ' 
126b8                 | ' font_family:=afontnum
126b8     91 E4 05 F1 | 	add	objptr, #145
126bc     F2 12 62 FC | 	wrlong	arg01, objptr
126c0     91 E4 85 F1 | 	sub	objptr, #145
126c4                 | ' 'if afontnum==8
126c4                 | ' '  font_ptr:=@amiga_font
126c4                 | ' 
126c4                 | ' if afontnum==4
126c4     04 12 0E F2 | 	cmp	arg01, #4 wz
126c8                 | '   font_ptr:=@st_font
126c8     08 00 00 AF 
126cc     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
126d0     04 E4 05 A1 |  if_e	add	objptr, #4
126d4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
126d8     04 E4 85 A1 |  if_e	sub	objptr, #4
126dc     08 00 00 AF 
126e0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
126e4                 | ' if afontnum==0
126e4     00 12 0E F2 | 	cmp	arg01, #0 wz
126e8                 | '   font_ptr:=@vga_font
126e8     04 E4 05 A1 |  if_e	add	objptr, #4
126ec     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
126f0     04 E4 85 A1 |  if_e	sub	objptr, #4
126f4                 | _hg010b_spin2_setfontfamily_ret
126f4     2D 00 64 FD | 	ret
126f8                 | 
126f8                 | ' 
126f8                 | ' '*************************************************************************
126f8                 | ' '                                                                        *
126f8                 | ' '  Cursor functions                                                      *
126f8                 | ' '                                                                        *
126f8                 | ' '*************************************************************************
126f8                 | ' 
126f8                 | ' 
126f8                 | ' pub setcursorpos(x,y)
126f8                 | _hg010b_spin2_setcursorpos
126f8                 | ' 
126f8                 | ' ''---------- Set the (x,y) position of cursor
126f8                 | ' 
126f8                 | ' cursor_x:=x
126f8     38 E4 05 F1 | 	add	objptr, #56
126fc     F2 12 52 FC | 	wrword	arg01, objptr
12700                 | ' cursor_y:=y
12700     02 E4 05 F1 | 	add	objptr, #2
12704     F2 14 42 FC | 	wrbyte	arg02, objptr
12708                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
12708     02 E4 85 F1 | 	sub	objptr, #2
1270c     F2 14 E2 FA | 	rdword	arg02, objptr
12710     02 14 66 F0 | 	shl	arg02, #2
12714     02 E4 05 F1 | 	add	objptr, #2
12718     F2 16 C2 FA | 	rdbyte	arg03, objptr
1271c     3A E4 85 F1 | 	sub	objptr, #58
12720     04 16 66 F0 | 	shl	arg03, #4
12724     11 12 06 F6 | 	mov	arg01, #17
12728     64 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1272c                 | _hg010b_spin2_setcursorpos_ret
1272c     2D 00 64 FD | 	ret
12730                 | 
12730                 | ' 
12730                 | ' '*************************************************************************
12730                 | ' '                                                                        *
12730                 | ' '  VBlank functions                                                      *
12730                 | ' '                                                                        *
12730                 | ' '*************************************************************************
12730                 | ' 
12730                 | ' pub waitvbl(amount) | i
12730                 | _hg010b_spin2_waitvbl
12730     03 4A 05 F6 | 	mov	COUNT_, #3
12734     A8 00 A0 FD | 	call	#pushregs_
12738     09 1F 02 F6 | 	mov	local01, arg01
1273c                 | ' 
1273c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1273c                 | ' 
1273c                 | ' repeat i from 1 to amount
1273c     01 20 06 F6 | 	mov	local02, #1
12740     01 1E 56 F2 | 	cmps	local01, #1 wc
12744     01 22 86 F6 | 	negc	local03, #1
12748     11 1F 02 F1 | 	add	local01, local03
1274c                 | LR__1580
1274c                 | '   repeat until vblank==0
1274c                 | LR__1581
1274c     45 E4 05 F1 | 	add	objptr, #69
12750     F2 12 0A FB | 	rdlong	arg01, objptr wz
12754     45 E4 85 F1 | 	sub	objptr, #69
12758     0C 00 90 AD |  if_e	jmp	#LR__1582
1275c                 | '     waitus(100)
1275c     64 12 06 F6 | 	mov	arg01, #100
12760     94 15 B0 FD | 	call	#__system___waitus
12764     E4 FF 9F FD | 	jmp	#LR__1581
12768                 | LR__1582
12768                 | '   repeat until vblank==1
12768                 | LR__1583
12768     45 E4 05 F1 | 	add	objptr, #69
1276c     F2 12 02 FB | 	rdlong	arg01, objptr
12770     45 E4 85 F1 | 	sub	objptr, #69
12774     01 12 0E F2 | 	cmp	arg01, #1 wz
12778     0C 00 90 AD |  if_e	jmp	#LR__1584
1277c                 | '     waitus(100)
1277c     64 12 06 F6 | 	mov	arg01, #100
12780     74 15 B0 FD | 	call	#__system___waitus
12784     E0 FF 9F FD | 	jmp	#LR__1583
12788                 | LR__1584
12788     11 21 02 F1 | 	add	local02, local03
1278c     0F 21 0A F2 | 	cmp	local02, local01 wz
12790     B8 FF 9F 5D |  if_ne	jmp	#LR__1580
12794     A7 F0 03 F6 | 	mov	ptra, fp
12798     B2 00 A0 FD | 	call	#popregs_
1279c                 | _hg010b_spin2_waitvbl_ret
1279c     2D 00 64 FD | 	ret
127a0                 | 
127a0                 | ' 
127a0                 | ' 
127a0                 | ' pub cls(fc,bc)   :c,i
127a0                 | _hg010b_spin2_cls
127a0     02 4A 05 F6 | 	mov	COUNT_, #2
127a4     A8 00 A0 FD | 	call	#pushregs_
127a8     09 1F 02 F6 | 	mov	local01, arg01
127ac     0A 21 02 F6 | 	mov	local02, arg02
127b0                 | ' 
127b0                 | ' c:=bc
127b0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
127b0     D9 E4 05 F1 | 	add	objptr, #217
127b4     F2 12 02 FB | 	rdlong	arg01, objptr
127b8     A5 E4 85 F1 | 	sub	objptr, #165
127bc     F2 16 02 FB | 	rdlong	arg03, objptr
127c0     02 16 66 F0 | 	shl	arg03, #2
127c4     10 15 02 F6 | 	mov	arg02, local02
127c8     00 18 06 F6 | 	mov	arg04, #0
127cc     01 1A 06 F6 | 	mov	arg05, #1
127d0     0B 00 00 FF 
127d4     8C E4 05 F1 | 	add	objptr, ##5772
127d8     F0 08 B0 FD | 	call	#_psram_spin2_fill
127dc                 | ' setwritecolors(fc,bc)
127dc                 | ' 
127dc                 | ' write_color:=ff
127dc     0B 00 00 FF 
127e0     83 E4 85 F1 | 	sub	objptr, ##5763
127e4     F2 1E 62 FC | 	wrlong	local01, objptr
127e8                 | ' write_background:=bb
127e8     04 E4 05 F1 | 	add	objptr, #4
127ec     F2 20 62 FC | 	wrlong	local02, objptr
127f0                 | ' cursor_x:=0
127f0     09 E4 85 F1 | 	sub	objptr, #9
127f4     F2 00 58 FC | 	wrword	#0, objptr
127f8                 | ' cursor_y:=0
127f8     02 E4 05 F1 | 	add	objptr, #2
127fc     F2 00 48 FC | 	wrbyte	#0, objptr
12800                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
12800     02 E4 85 F1 | 	sub	objptr, #2
12804     F2 14 E2 FA | 	rdword	arg02, objptr
12808     02 14 66 F0 | 	shl	arg02, #2
1280c     02 E4 05 F1 | 	add	objptr, #2
12810     F2 16 C2 FA | 	rdbyte	arg03, objptr
12814     3A E4 85 F1 | 	sub	objptr, #58
12818     04 16 66 F0 | 	shl	arg03, #4
1281c     11 12 06 F6 | 	mov	arg01, #17
12820     6C F2 BF FD | 	call	#_hg010b_spin2_setspritepos
12824                 | ' setcursorcolor(fc)
12824     0F 13 02 F6 | 	mov	arg01, local01
12828     20 EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1282c     10 FB 01 F6 | 	mov	result1, local02
12830     00 FC 05 F6 | 	mov	result2, #0
12834     A7 F0 03 F6 | 	mov	ptra, fp
12838     B2 00 A0 FD | 	call	#popregs_
1283c                 | _hg010b_spin2_cls_ret
1283c     2D 00 64 FD | 	ret
12840                 | 
12840                 | ' 
12840                 | ' ''---------- Output a char at the cursor position, move the cursor 
12840                 | ' 
12840                 | ' pub putchar(achar) | c,x,y,l,newcpl
12840                 | _hg010b_spin2_putchar
12840     01 4A 05 F6 | 	mov	COUNT_, #1
12844     A8 00 A0 FD | 	call	#pushregs_
12848     09 1F 02 F6 | 	mov	local01, arg01
1284c                 | ' 
1284c                 | ' if achar==10
1284c     0A 1E 0E F2 | 	cmp	local01, #10 wz
12850                 | '   crlf()
12850     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
12854                 | ' if achar==9
12854     09 1E 0E F2 | 	cmp	local01, #9 wz
12858     18 00 90 5D |  if_ne	jmp	#LR__1590
1285c                 | '   cursor_x:=(cursor_x& %11110000)+16
1285c     38 E4 05 F1 | 	add	objptr, #56
12860     F2 16 E2 FA | 	rdword	arg03, objptr
12864     F0 16 06 F5 | 	and	arg03, #240
12868     10 16 06 F1 | 	add	arg03, #16
1286c     F2 16 52 FC | 	wrword	arg03, objptr
12870     38 E4 85 F1 | 	sub	objptr, #56
12874                 | LR__1590
12874                 | '   
12874                 | ' if (achar<>9) && (achar<>10) 
12874     09 1E 0E F2 | 	cmp	local01, #9 wz
12878     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1287c     44 00 90 AD |  if_e	jmp	#LR__1591
12880                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
12880     38 E4 05 F1 | 	add	objptr, #56
12884     F2 12 E2 FA | 	rdword	arg01, objptr
12888     02 E4 05 F1 | 	add	objptr, #2
1288c     F2 14 C2 FA | 	rdbyte	arg02, objptr
12890     04 14 66 F0 | 	shl	arg02, #4
12894     03 E4 05 F1 | 	add	objptr, #3
12898     F2 18 02 FB | 	rdlong	arg04, objptr
1289c     04 E4 05 F1 | 	add	objptr, #4
128a0     F2 1A 02 FB | 	rdlong	arg05, objptr
128a4     41 E4 85 F1 | 	sub	objptr, #65
128a8     0F 17 02 F6 | 	mov	arg03, local01
128ac     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
128b0                 | '   cursor_x+=2
128b0     38 E4 05 F1 | 	add	objptr, #56
128b4     F2 1E E2 FA | 	rdword	local01, objptr
128b8     02 1E 06 F1 | 	add	local01, #2
128bc     F2 1E 52 FC | 	wrword	local01, objptr
128c0     38 E4 85 F1 | 	sub	objptr, #56
128c4                 | LR__1591
128c4                 | ' 
128c4                 | ' if cursor_x>=256
128c4     38 E4 05 F1 | 	add	objptr, #56
128c8     F2 1E E2 FA | 	rdword	local01, objptr
128cc     38 E4 85 F1 | 	sub	objptr, #56
128d0     00 1F 56 F2 | 	cmps	local01, #256 wc
128d4     64 00 90 CD |  if_b	jmp	#LR__1593
128d8                 | '   cursor_x:=0
128d8     38 E4 05 F1 | 	add	objptr, #56
128dc     F2 00 58 FC | 	wrword	#0, objptr
128e0                 | '   cursor_y+=1
128e0     02 E4 05 F1 | 	add	objptr, #2
128e4     F2 1E C2 FA | 	rdbyte	local01, objptr
128e8     01 1E 06 F1 | 	add	local01, #1
128ec     F2 1E 42 FC | 	wrbyte	local01, objptr
128f0                 | '   if cursor_y>st_lines-1
128f0     C3 E4 05 F1 | 	add	objptr, #195
128f4     F2 1E 02 FB | 	rdlong	local01, objptr
128f8     01 1E 86 F1 | 	sub	local01, #1
128fc     C3 E4 85 F1 | 	sub	objptr, #195
12900     F2 16 C2 FA | 	rdbyte	arg03, objptr
12904     3A E4 85 F1 | 	sub	objptr, #58
12908     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1290c     2C 00 90 ED |  if_be	jmp	#LR__1592
12910                 | '     scrollup()
12910     00 12 06 F6 | 	mov	arg01, #0
12914     01 00 00 FF 
12918     40 14 06 F6 | 	mov	arg02, ##576
1291c     10 16 06 F6 | 	mov	arg03, #16
12920     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
12924                 | '     cursor_y:=st_lines-1
12924     FD E4 05 F1 | 	add	objptr, #253
12928     F2 1E 02 FB | 	rdlong	local01, objptr
1292c     01 1E 86 F1 | 	sub	local01, #1
12930     C3 E4 85 F1 | 	sub	objptr, #195
12934     F2 1E 42 FC | 	wrbyte	local01, objptr
12938     3A E4 85 F1 | 	sub	objptr, #58
1293c                 | LR__1592
1293c                 | LR__1593
1293c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1293c     38 E4 05 F1 | 	add	objptr, #56
12940     F2 14 E2 FA | 	rdword	arg02, objptr
12944     02 14 66 F0 | 	shl	arg02, #2
12948     02 E4 05 F1 | 	add	objptr, #2
1294c     F2 16 C2 FA | 	rdbyte	arg03, objptr
12950     3A E4 85 F1 | 	sub	objptr, #58
12954     04 16 66 F0 | 	shl	arg03, #4
12958     11 12 06 F6 | 	mov	arg01, #17
1295c     30 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
12960     A7 F0 03 F6 | 	mov	ptra, fp
12964     B2 00 A0 FD | 	call	#popregs_
12968                 | _hg010b_spin2_putchar_ret
12968     2D 00 64 FD | 	ret
1296c                 | 
1296c                 | '     
1296c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1296c                 | ' 
1296c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1296c                 | _hg010b_spin2_putchar2
1296c     01 4A 05 F6 | 	mov	COUNT_, #1
12970     A8 00 A0 FD | 	call	#pushregs_
12974                 | ' 
12974                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
12974     38 E4 05 F1 | 	add	objptr, #56
12978     F2 1E E2 FA | 	rdword	local01, objptr
1297c     02 E4 05 F1 | 	add	objptr, #2
12980     F2 14 C2 FA | 	rdbyte	arg02, objptr
12984     04 14 66 F0 | 	shl	arg02, #4
12988     09 17 02 F6 | 	mov	arg03, arg01
1298c     03 E4 05 F1 | 	add	objptr, #3
12990     F2 18 02 FB | 	rdlong	arg04, objptr
12994     04 E4 05 F1 | 	add	objptr, #4
12998     F2 1A 02 FB | 	rdlong	arg05, objptr
1299c     41 E4 85 F1 | 	sub	objptr, #65
129a0     0F 13 02 F6 | 	mov	arg01, local01
129a4     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
129a8                 | ' cursor_x+=2
129a8     38 E4 05 F1 | 	add	objptr, #56
129ac     F2 1E E2 FA | 	rdword	local01, objptr
129b0     02 1E 06 F1 | 	add	local01, #2
129b4     F2 1E 52 FC | 	wrword	local01, objptr
129b8                 | ' if cursor_x>=256
129b8     F2 1E E2 FA | 	rdword	local01, objptr
129bc     38 E4 85 F1 | 	sub	objptr, #56
129c0     00 1F 56 F2 | 	cmps	local01, #256 wc
129c4     64 00 90 CD |  if_b	jmp	#LR__1601
129c8                 | '   cursor_x:=0
129c8     38 E4 05 F1 | 	add	objptr, #56
129cc     F2 00 58 FC | 	wrword	#0, objptr
129d0                 | '   cursor_y+=1
129d0     02 E4 05 F1 | 	add	objptr, #2
129d4     F2 1E C2 FA | 	rdbyte	local01, objptr
129d8     01 1E 06 F1 | 	add	local01, #1
129dc     F2 1E 42 FC | 	wrbyte	local01, objptr
129e0                 | '   if cursor_y>st_lines-1
129e0     C3 E4 05 F1 | 	add	objptr, #195
129e4     F2 1E 02 FB | 	rdlong	local01, objptr
129e8     01 1E 86 F1 | 	sub	local01, #1
129ec     C3 E4 85 F1 | 	sub	objptr, #195
129f0     F2 1A C2 FA | 	rdbyte	arg05, objptr
129f4     3A E4 85 F1 | 	sub	objptr, #58
129f8     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
129fc     2C 00 90 ED |  if_be	jmp	#LR__1600
12a00                 | '     scrollup()
12a00     00 12 06 F6 | 	mov	arg01, #0
12a04     01 00 00 FF 
12a08     40 14 06 F6 | 	mov	arg02, ##576
12a0c     10 16 06 F6 | 	mov	arg03, #16
12a10     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
12a14                 | '     cursor_y:=st_lines-1
12a14     FD E4 05 F1 | 	add	objptr, #253
12a18     F2 1E 02 FB | 	rdlong	local01, objptr
12a1c     01 1E 86 F1 | 	sub	local01, #1
12a20     C3 E4 85 F1 | 	sub	objptr, #195
12a24     F2 1E 42 FC | 	wrbyte	local01, objptr
12a28     3A E4 85 F1 | 	sub	objptr, #58
12a2c                 | LR__1600
12a2c                 | LR__1601
12a2c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
12a2c     38 E4 05 F1 | 	add	objptr, #56
12a30     F2 14 E2 FA | 	rdword	arg02, objptr
12a34     02 14 66 F0 | 	shl	arg02, #2
12a38     02 E4 05 F1 | 	add	objptr, #2
12a3c     F2 16 C2 FA | 	rdbyte	arg03, objptr
12a40     3A E4 85 F1 | 	sub	objptr, #58
12a44     04 16 66 F0 | 	shl	arg03, #4
12a48     11 12 06 F6 | 	mov	arg01, #17
12a4c     40 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
12a50     A7 F0 03 F6 | 	mov	ptra, fp
12a54     B2 00 A0 FD | 	call	#popregs_
12a58                 | _hg010b_spin2_putchar2_ret
12a58     2D 00 64 FD | 	ret
12a5c                 | 
12a5c                 | ' ''--------- Output a string at the cursor position, move the cursor  
12a5c                 | ' 
12a5c                 | ' pub write(text) | iii,c,ncx,ncy
12a5c                 | _hg010b_spin2_write
12a5c     04 4A 05 F6 | 	mov	COUNT_, #4
12a60     A8 00 A0 FD | 	call	#pushregs_
12a64     09 1F 02 F6 | 	mov	local01, arg01
12a68                 | ' 
12a68                 | ' repeat iii from 0 to strsize(text)-1
12a68     00 20 06 F6 | 	mov	local02, #0
12a6c     0F 13 02 F6 | 	mov	arg01, local01
12a70     09 23 02 F6 | 	mov	local03, arg01
12a74     97 06 48 FB | 	callpa	#(@LR__1611-@LR__1610)>>2,fcache_load_ptr_
12a78                 | LR__1610
12a78     11 FB C9 FA | 	rdbyte	result1, local03 wz
12a7c     01 22 06 51 |  if_ne	add	local03, #1
12a80     F4 FF 9F 5D |  if_ne	jmp	#LR__1610
12a84                 | LR__1611
12a84     09 23 82 F1 | 	sub	local03, arg01
12a88     01 22 86 F1 | 	sub	local03, #1
12a8c     00 22 56 F2 | 	cmps	local03, #0 wc
12a90     01 24 86 F6 | 	negc	local04, #1
12a94     12 23 02 F1 | 	add	local03, local04
12a98                 | LR__1612
12a98                 | '   putchar2(byte[text+iii])
12a98     0F 13 02 F6 | 	mov	arg01, local01
12a9c     10 13 02 F1 | 	add	arg01, local02
12aa0     09 13 C2 FA | 	rdbyte	arg01, arg01
12aa4     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
12aa8     12 21 02 F1 | 	add	local02, local04
12aac     11 21 0A F2 | 	cmp	local02, local03 wz
12ab0     E4 FF 9F 5D |  if_ne	jmp	#LR__1612
12ab4     A7 F0 03 F6 | 	mov	ptra, fp
12ab8     B2 00 A0 FD | 	call	#popregs_
12abc                 | _hg010b_spin2_write_ret
12abc     2D 00 64 FD | 	ret
12ac0                 | 
12ac0                 | ' 
12ac0                 | ' ''-----------  Scroll the screen one line up
12ac0                 | ' 
12ac0                 | ' pub scrollup(start=0, end=576 , amount=16) | i
12ac0                 | _hg010b_spin2_scrollup
12ac0     01 4A 05 F6 | 	mov	COUNT_, #1
12ac4     A8 00 A0 FD | 	call	#pushregs_
12ac8                 | ' 	
12ac8                 | ' repeat i from 0 to 559 
12ac8     00 1E 06 F6 | 	mov	local01, #0
12acc                 | LR__1620
12acc     F5 E4 05 F1 | 	add	objptr, #245
12ad0     F2 18 02 FB | 	rdlong	arg04, objptr
12ad4     1C E4 85 F1 | 	sub	objptr, #28
12ad8     F2 14 02 FB | 	rdlong	arg02, objptr
12adc     0F 13 02 F6 | 	mov	arg01, local01
12ae0     10 12 06 F1 | 	add	arg01, #16
12ae4     02 12 66 F0 | 	shl	arg01, #2
12ae8     14 E4 05 F1 | 	add	objptr, #20
12aec     F2 16 02 FB | 	rdlong	arg03, objptr
12af0     0B 13 02 FD | 	qmul	arg01, arg03
12af4                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
12af4     F6 03 00 FF 
12af8     00 12 06 F6 | 	mov	arg01, ##519168
12afc     0C 13 82 F1 | 	sub	arg01, arg04
12b00     02 16 66 F0 | 	shl	arg03, #2
12b04     0A 00 00 FF 
12b08     D3 E5 05 F1 | 	add	objptr, ##5587
12b0c     18 18 62 FD | 	getqx	arg04
12b10     0C 15 02 F1 | 	add	arg02, arg04
12b14     7C 04 B0 FD | 	call	#_psram_spin2_read1
12b18     0A 00 00 FF 
12b1c     CB E5 85 F1 | 	sub	objptr, ##5579
12b20     F2 18 02 FB | 	rdlong	arg04, objptr
12b24     1C E4 85 F1 | 	sub	objptr, #28
12b28     F2 14 02 FB | 	rdlong	arg02, objptr
12b2c     0F 13 02 F6 | 	mov	arg01, local01
12b30     02 12 66 F0 | 	shl	arg01, #2
12b34     14 E4 05 F1 | 	add	objptr, #20
12b38     F2 16 02 FB | 	rdlong	arg03, objptr
12b3c     0B 13 02 FD | 	qmul	arg01, arg03
12b40                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
12b40     F6 03 00 FF 
12b44     00 12 06 F6 | 	mov	arg01, ##519168
12b48     0C 13 82 F1 | 	sub	arg01, arg04
12b4c     02 16 66 F0 | 	shl	arg03, #2
12b50     0A 00 00 FF 
12b54     D3 E5 05 F1 | 	add	objptr, ##5587
12b58     18 18 62 FD | 	getqx	arg04
12b5c     0C 15 02 F1 | 	add	arg02, arg04
12b60     CC 04 B0 FD | 	call	#_psram_spin2_write
12b64     0B 00 00 FF 
12b68     C0 E4 85 F1 | 	sub	objptr, ##5824
12b6c     01 1E 06 F1 | 	add	local01, #1
12b70     01 00 00 FF 
12b74     30 1E 56 F2 | 	cmps	local01, ##560 wc
12b78     50 FF 9F CD |  if_b	jmp	#LR__1620
12b7c                 | ' 
12b7c                 | ' repeat i from 560 to 575
12b7c     01 00 00 FF 
12b80     30 1E 06 F6 | 	mov	local01, ##560
12b84                 | LR__1621
12b84                 | '    fastline(0,1023,i,write_background)   
12b84     41 E4 05 F1 | 	add	objptr, #65
12b88     F2 18 02 FB | 	rdlong	arg04, objptr
12b8c     41 E4 85 F1 | 	sub	objptr, #65
12b90     00 12 06 F6 | 	mov	arg01, #0
12b94     09 14 CE F9 | 	bmask	arg02, #9
12b98     0F 17 02 F6 | 	mov	arg03, local01
12b9c     20 F1 BF FD | 	call	#_hg010b_spin2_fastline
12ba0     01 1E 06 F1 | 	add	local01, #1
12ba4     01 00 00 FF 
12ba8     40 1E 16 F2 | 	cmp	local01, ##576 wc
12bac     D4 FF 9F CD |  if_b	jmp	#LR__1621
12bb0     A7 F0 03 F6 | 	mov	ptra, fp
12bb4     B2 00 A0 FD | 	call	#popregs_
12bb8                 | _hg010b_spin2_scrollup_ret
12bb8     2D 00 64 FD | 	ret
12bbc                 | 
12bbc                 | ' 
12bbc                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
12bbc                 | ' 
12bbc                 | ' pub crlf()
12bbc                 | _hg010b_spin2_crlf
12bbc                 | ' 
12bbc                 | ' cursor_x:=leading_spaces*2
12bbc     01 00 00 FF 
12bc0     B2 E4 05 F1 | 	add	objptr, ##690
12bc4     F2 16 02 FB | 	rdlong	arg03, objptr
12bc8     01 16 66 F0 | 	shl	arg03, #1
12bcc     01 00 00 FF 
12bd0     7A E4 85 F1 | 	sub	objptr, ##634
12bd4     F2 16 52 FC | 	wrword	arg03, objptr
12bd8                 | ' cursor_y+=1
12bd8     02 E4 05 F1 | 	add	objptr, #2
12bdc     F2 16 C2 FA | 	rdbyte	arg03, objptr
12be0     01 16 06 F1 | 	add	arg03, #1
12be4     F2 16 42 FC | 	wrbyte	arg03, objptr
12be8                 | ' if cursor_y>st_lines-1
12be8     C3 E4 05 F1 | 	add	objptr, #195
12bec     F2 16 02 FB | 	rdlong	arg03, objptr
12bf0     01 16 86 F1 | 	sub	arg03, #1
12bf4     C3 E4 85 F1 | 	sub	objptr, #195
12bf8     F2 14 C2 FA | 	rdbyte	arg02, objptr
12bfc     3A E4 85 F1 | 	sub	objptr, #58
12c00     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
12c04     2C 00 90 ED |  if_be	jmp	#LR__1630
12c08                 | '   scrollup()
12c08     00 12 06 F6 | 	mov	arg01, #0
12c0c     01 00 00 FF 
12c10     40 14 06 F6 | 	mov	arg02, ##576
12c14     10 16 06 F6 | 	mov	arg03, #16
12c18     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
12c1c                 | '   cursor_y:=st_lines-1
12c1c     FD E4 05 F1 | 	add	objptr, #253
12c20     F2 16 02 FB | 	rdlong	arg03, objptr
12c24     01 16 86 F1 | 	sub	arg03, #1
12c28     C3 E4 85 F1 | 	sub	objptr, #195
12c2c     F2 16 42 FC | 	wrbyte	arg03, objptr
12c30     3A E4 85 F1 | 	sub	objptr, #58
12c34                 | LR__1630
12c34                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
12c34     38 E4 05 F1 | 	add	objptr, #56
12c38     F2 14 E2 FA | 	rdword	arg02, objptr
12c3c     02 14 66 F0 | 	shl	arg02, #2
12c40     02 E4 05 F1 | 	add	objptr, #2
12c44     F2 16 C2 FA | 	rdbyte	arg03, objptr
12c48     3A E4 85 F1 | 	sub	objptr, #58
12c4c     04 16 66 F0 | 	shl	arg03, #4
12c50     11 12 06 F6 | 	mov	arg01, #17
12c54     38 EE BF FD | 	call	#_hg010b_spin2_setspritepos
12c58                 | _hg010b_spin2_crlf_ret
12c58     2D 00 64 FD | 	ret
12c5c                 | 
12c5c                 | ' 
12c5c                 | ' 
12c5c                 | ' '*************************************************************************
12c5c                 | ' '                                                                        *
12c5c                 | ' '  Conversions                                                           *
12c5c                 | ' '                                                                        *
12c5c                 | ' '*************************************************************************
12c5c                 | ' 
12c5c                 | ' ''---------- Convert a integer to dec string, return a pointer
12c5c                 | ' 
12c5c                 | ' pub inttostr(i):result |q,pos,k,j
12c5c                 | _hg010b_spin2_inttostr
12c5c     03 4A 05 F6 | 	mov	COUNT_, #3
12c60     A8 00 A0 FD | 	call	#pushregs_
12c64     09 1F 0A F6 | 	mov	local01, arg01 wz
12c68                 | ' 
12c68                 | ' j:=i
12c68                 | ' pos:=10
12c68     0A 20 06 F6 | 	mov	local02, #10
12c6c                 | ' k:=0
12c6c     00 22 06 F6 | 	mov	local03, #0
12c70                 | ' 
12c70                 | ' if (j==0)
12c70     18 00 90 5D |  if_ne	jmp	#LR__1640
12c74                 | '   n_string[0]:=48
12c74     49 E4 05 F1 | 	add	objptr, #73
12c78     F2 60 48 FC | 	wrbyte	#48, objptr
12c7c                 | '   n_string[1]:=0
12c7c     01 E4 05 F1 | 	add	objptr, #1
12c80     F2 00 48 FC | 	wrbyte	#0, objptr
12c84     4A E4 85 F1 | 	sub	objptr, #74
12c88     C4 00 90 FD | 	jmp	#LR__1647
12c8c                 | LR__1640
12c8c                 | ' 
12c8c                 | ' else
12c8c                 | '   if (j<0)
12c8c     0F 1F 52 F6 | 	abs	local01, local01 wc
12c90                 | '     j:=0-j
12c90                 | '     k:=45
12c90     2D 22 06 C6 |  if_b	mov	local03, #45
12c94                 | ' 
12c94                 | '   n_string[11]:=0
12c94     54 E4 05 F1 | 	add	objptr, #84
12c98     F2 00 48 FC | 	wrbyte	#0, objptr
12c9c     54 E4 85 F1 | 	sub	objptr, #84
12ca0     97 24 48 FB | 	callpa	#(@LR__1642-@LR__1641)>>2,fcache_load_ptr_
12ca4                 | '   repeat while (pos>-1)
12ca4                 | LR__1641
12ca4     00 20 56 F2 | 	cmps	local02, #0 wc
12ca8     40 00 90 CD |  if_b	jmp	#LR__1643
12cac     0F FB 51 F6 | 	abs	result1, local01 wc
12cb0     0A FA 15 FD | 	qdiv	result1, #10
12cb4                 | '     q:=j//10
12cb4     19 FA 61 FD | 	getqy	result1
12cb8     FD FA 81 F6 | 	negc	result1, result1
12cbc     0F 1F 52 F6 | 	abs	local01, local01 wc
12cc0     0A 1E 16 FD | 	qdiv	local01, #10
12cc4                 | '     q:=48+q
12cc4     30 FA 05 F1 | 	add	result1, #48
12cc8                 | '     n_string[pos]:=q
12cc8     10 1F 02 F6 | 	mov	local01, local02
12ccc     49 E4 05 F1 | 	add	objptr, #73
12cd0     F2 1E 02 F1 | 	add	local01, objptr
12cd4     0F FB 41 FC | 	wrbyte	result1, local01
12cd8                 | '     j:=j/10
12cd8     49 E4 85 F1 | 	sub	objptr, #73
12cdc                 | '     pos-=1
12cdc     01 20 86 F1 | 	sub	local02, #1
12ce0     18 1E 62 FD | 	getqx	local01
12ce4     0F 1F 82 F6 | 	negc	local01, local01
12ce8     B8 FF 9F FD | 	jmp	#LR__1641
12cec                 | LR__1642
12cec                 | LR__1643
12cec                 | '   repeat while n_string[0]==48
12cec                 | LR__1644
12cec     49 E4 05 F1 | 	add	objptr, #73
12cf0     F2 16 C2 FA | 	rdbyte	arg03, objptr
12cf4     49 E4 85 F1 | 	sub	objptr, #73
12cf8     30 16 0E F2 | 	cmp	arg03, #48 wz
12cfc     20 00 90 5D |  if_ne	jmp	#LR__1645
12d00                 | '     bytemove(@n_string,@n_string+1,12)
12d00     49 E4 05 F1 | 	add	objptr, #73
12d04     F2 12 02 F6 | 	mov	arg01, objptr
12d08     F2 14 02 F6 | 	mov	arg02, objptr
12d0c     49 E4 85 F1 | 	sub	objptr, #73
12d10     01 14 06 F1 | 	add	arg02, #1
12d14     0C 16 06 F6 | 	mov	arg03, #12
12d18     84 0C B0 FD | 	call	#__system____builtin_memmove
12d1c     CC FF 9F FD | 	jmp	#LR__1644
12d20                 | LR__1645
12d20                 | ' 
12d20                 | '   if k==45
12d20     2D 22 0E F2 | 	cmp	local03, #45 wz
12d24     28 00 90 5D |  if_ne	jmp	#LR__1646
12d28                 | '      bytemove(@n_string+1,@n_string,12)
12d28     49 E4 05 F1 | 	add	objptr, #73
12d2c     F2 12 02 F6 | 	mov	arg01, objptr
12d30     01 12 06 F1 | 	add	arg01, #1
12d34     F2 14 02 F6 | 	mov	arg02, objptr
12d38     49 E4 85 F1 | 	sub	objptr, #73
12d3c     0C 16 06 F6 | 	mov	arg03, #12
12d40     5C 0C B0 FD | 	call	#__system____builtin_memmove
12d44                 | '      n_string[0]:=k
12d44     49 E4 05 F1 | 	add	objptr, #73
12d48     F2 22 42 FC | 	wrbyte	local03, objptr
12d4c     49 E4 85 F1 | 	sub	objptr, #73
12d50                 | LR__1646
12d50                 | LR__1647
12d50                 | ' 
12d50                 | ' q:=@n_string
12d50     49 E4 05 F1 | 	add	objptr, #73
12d54     F2 FA 01 F6 | 	mov	result1, objptr
12d58     49 E4 85 F1 | 	sub	objptr, #73
12d5c                 | ' return q
12d5c     A7 F0 03 F6 | 	mov	ptra, fp
12d60     B2 00 A0 FD | 	call	#popregs_
12d64                 | _hg010b_spin2_inttostr_ret
12d64     2D 00 64 FD | 	ret
12d68                 | 
12d68                 | ' 
12d68                 | ' '..............................................................................
12d68                 | ' 
12d68                 | ' {{
12d68                 | ' }}
12d68                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
12d68                 | _psram_spin2_startx
12d68     04 4A 05 F6 | 	mov	COUNT_, #4
12d6c     A8 00 A0 FD | 	call	#pushregs_
12d70     09 1F 02 F6 | 	mov	local01, arg01
12d74     0B 21 02 F6 | 	mov	local02, arg03
12d78     0C 23 02 F6 | 	mov	local03, arg04
12d7c                 | '     stop() ' restart driver if required
12d7c     54 01 B0 FD | 	call	#_psram_spin2_stop
12d80     00 1E 0E F2 | 	cmp	local01, #0 wz
12d84     14 1E 06 AB |  if_e	rdlong	local01, #20
12d88     0F 15 52 F6 | 	abs	arg02, local01 wc
12d8c     A1 07 00 FF 
12d90     40 14 16 FD | 	qdiv	arg02, ##1000000
12d94                 | ' 
12d94                 | '     ' use current frequency if none specified
12d94                 | ' 
12d94                 | '     if freq == 0 
12d94                 | '         freq := clkfreq 
12d94                 | ' 
12d94                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
12d94                 | ' 
12d94                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
12d94                 | '     if burst < 0
12d94                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
12d94     18 14 62 FD | 	getqx	arg02
12d98     0A 19 82 F6 | 	negc	arg04, arg02
12d9c     03 18 66 F0 | 	shl	arg04, #3
12da0     84 18 86 F1 | 	sub	arg04, #132
12da4     04 18 46 F0 | 	shr	arg04, #4
12da8     04 18 66 F0 | 	shl	arg04, #4
12dac     00 18 56 F2 | 	cmps	arg04, #0 wc
12db0     0E FA 65 C6 |  if_b	neg	result1, #14
12db4     10 01 90 CD |  if_b	jmp	#LR__1653
12db8                 | ' 
12db8                 | '     ' compute the input delay
12db8                 | ' 
12db8                 | '     if delay <= 0
12db8     01 20 56 F2 | 	cmps	local02, #1 wc
12dbc     10 00 90 3D |  if_ae	jmp	#LR__1650
12dc0                 | '         delay := lookupDelay(freq)
12dc0     0F 13 02 F6 | 	mov	arg01, local01
12dc4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
12dc8     FD 20 02 F6 | 	mov	local02, result1
12dcc     04 00 90 FD | 	jmp	#LR__1651
12dd0                 | LR__1650
12dd0                 | '     else
12dd0                 | '         delay <#= $f ' limit to 15
12dd0     0F 20 66 F3 | 	fles	local02, #15
12dd4                 | LR__1651
12dd4                 | ' 
12dd4                 | '     ' create our lock
12dd4                 | ' 
12dd4                 | '     driverlock := LOCKNEW()  
12dd4     00 FA 05 F6 | 	mov	result1, #0
12dd8     04 FA 61 FD | 	locknew	result1
12ddc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
12de0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
12de4                 | '     if driverlock == -1
12de4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
12de8     FF FF 7F FF 
12dec     FF FB 0D F2 | 	cmp	result1, ##-1 wz
12df0                 | '         return ERR_NO_LOCK
12df0     1A FA 65 A6 |  if_e	neg	result1, #26
12df4     D0 00 90 AD |  if_e	jmp	#LR__1653
12df8                 | ' 
12df8                 | '     ' patch in the proper data and HUB addresses to the startup structure
12df8                 | ' 
12df8                 | '     long[@startupData][0]:=clkfreq
12df8     14 1E 06 FB | 	rdlong	local01, #20
12dfc     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
12e00     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
12e04                 | ' '    long[@startupData][1]:=$1000_0000
12e04                 | '     long[@startupData][5]:=@deviceData
12e04     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
12e08     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
12e0c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
12e10     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
12e14     14 14 06 F1 | 	add	arg02, #20
12e18     0A 1F 62 FC | 	wrlong	local01, arg02
12e1c                 | '     long[@startupData][6]:=@qosData
12e1c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
12e20     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
12e24     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
12e28     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
12e2c     18 14 06 F1 | 	add	arg02, #24
12e30     0A 1F 62 FC | 	wrlong	local01, arg02
12e34                 | '     long[@startupData][7]:=$7FF00
12e34     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
12e38     1C 1E 06 F1 | 	add	local01, #28
12e3c     FF 03 80 FF 
12e40     0F 01 6A FC | 	wrlong	##524032, local01
12e44                 | ' 
12e44                 | '     ' setup some default bank and QoS parameter values
12e44                 | ' 
12e44                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
12e44     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
12e48     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
12e4c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
12e50     10 18 66 F0 | 	shl	arg04, #16
12e54     0C 20 66 F0 | 	shl	local02, #12
12e58     10 19 42 F5 | 	or	arg04, local02
12e5c     18 18 46 F5 | 	or	arg04, #24
12e60     0C 15 02 F6 | 	mov	arg02, arg04
12e64     02 16 06 F6 | 	mov	arg03, #2
12e68     A0 00 A0 FD | 	call	#\builtin_longfill_
12e6c                 | '     longfill(@qosData, $FFFF0000, 8)
12e6c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
12e70     07 16 06 F6 | 	mov	arg03, #7
12e74     28 16 62 FD | 	setq	arg03
12e78     80 FF FF FF 
12e7c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
12e80                 | ' 
12e80                 | '     ' get the address of the PSRAM memory driver so we can start it
12e80                 | ' 
12e80                 | '     driverAddr:= driver.getDriverAddr()
12e80                 | '     return @driver_start
12e80     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
12e84     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
12e88     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
12e8c                 | ' 
12e8c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
12e8c                 | ' 
12e8c                 | '     if desiredcog < 0
12e8c     00 22 56 F2 | 	cmps	local03, #0 wc
12e90                 | '         desiredcog := NEWCOG
12e90     10 22 06 C6 |  if_b	mov	local03, #16
12e94                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
12e94     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
12e98     11 25 02 F6 | 	mov	local04, local03
12e9c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
12ea0     0A 25 F2 FC | 	coginit	local04, arg02 wc
12ea4     01 24 66 C6 |  if_b	neg	local04, #1
12ea8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
12eac     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
12eb0                 | '     repeat until long[@startupData] == 0 
12eb0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
12eb4                 | LR__1652
12eb4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
12eb8     F8 FF 9F 5D |  if_ne	jmp	#LR__1652
12ebc                 | ' 
12ebc                 | '     return drivercog
12ebc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
12ec0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
12ec4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12ec8                 | LR__1653
12ec8     A7 F0 03 F6 | 	mov	ptra, fp
12ecc     B2 00 A0 FD | 	call	#popregs_
12ed0                 | _psram_spin2_startx_ret
12ed0     2D 00 64 FD | 	ret
12ed4                 | 
12ed4                 | ' 
12ed4                 | ' '..............................................................................
12ed4                 | ' 
12ed4                 | ' {{
12ed4                 | ' }}
12ed4                 | ' PUB stop() : i
12ed4                 | _psram_spin2_stop
12ed4     00 00 06 F6 | 	mov	_var01, #0
12ed8                 | '     if drivercog <> -1
12ed8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
12edc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
12ee0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12ee4     FF FF 7F FF 
12ee8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
12eec     70 00 90 AD |  if_e	jmp	#LR__1663
12ef0                 | '         cogstop(drivercog) ' a rather brutal stop
12ef0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
12ef4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
12ef8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12efc     03 12 62 FD | 	cogstop	arg01
12f00     97 26 48 FB | 	callpa	#(@LR__1662-@LR__1660)>>2,fcache_load_ptr_
12f04                 | '         repeat i from 0 to 7
12f04                 | LR__1660
12f04                 | '             if long[$7FF00][i*3] < 0
12f04     00 FB 01 F6 | 	mov	result1, _var01
12f08     01 FA 65 F0 | 	shl	result1, #1
12f0c     00 FB 01 F1 | 	add	result1, _var01
12f10     02 FA 65 F0 | 	shl	result1, #2
12f14     FF 03 00 FF 
12f18     00 FB 05 F1 | 	add	result1, ##524032
12f1c     FD FA 01 FB | 	rdlong	result1, result1
12f20     00 FA 55 F2 | 	cmps	result1, #0 wc
12f24     1C 00 90 3D |  if_ae	jmp	#LR__1661
12f28                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
12f28     00 FB 01 F6 | 	mov	result1, _var01
12f2c     01 FA 65 F0 | 	shl	result1, #1
12f30     00 FB 01 F1 | 	add	result1, _var01
12f34     02 FA 65 F0 | 	shl	result1, #2
12f38     FF 03 00 FF 
12f3c     00 FB 05 F1 | 	add	result1, ##524032
12f40     FD 20 68 FC | 	wrlong	#16, result1
12f44                 | LR__1661
12f44     01 00 06 F1 | 	add	_var01, #1
12f48     08 00 56 F2 | 	cmps	_var01, #8 wc
12f4c     B4 FF 9F CD |  if_b	jmp	#LR__1660
12f50                 | LR__1662
12f50                 | '         drivercog := -1
12f50     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
12f54     FF FF FF FF 
12f58     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
12f5c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12f60                 | LR__1663
12f60                 | '     if driverlock <> -1
12f60     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
12f64     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
12f68     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
12f6c     FF FF 7F FF 
12f70     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
12f74                 | '         LOCKRET(driverlock)
12f74     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
12f78     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
12f7c     05 12 62 5D |  if_ne	lockret	arg01
12f80                 | '         driverlock := -1
12f80     FF FF FF 5F 
12f84     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
12f88     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
12f8c     00 FB 01 F6 | 	mov	result1, _var01
12f90                 | _psram_spin2_stop_ret
12f90     2D 00 64 FD | 	ret
12f94                 | 
12f94                 | ' 
12f94                 | ' '..............................................................................
12f94                 | ' 
12f94                 | ' {{
12f94                 | ' }}
12f94                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
12f94                 | _psram_spin2_read1
12f94                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
12f94                 | '     if drivercog == -1 ' driver must be running
12f94     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
12f98     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
12f9c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12fa0     FF FF 7F FF 
12fa4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
12fa8                 | '         return ERR_INACTIVE
12fa8     0F FA 65 A6 |  if_e	neg	result1, #15
12fac     7C 00 90 AD |  if_e	jmp	#LR__1671
12fb0                 | '     if count == 0 ' don't even bother reading
12fb0     00 16 0E F2 | 	cmp	arg03, #0 wz
12fb4                 | '         return 0
12fb4     00 FA 05 A6 |  if_e	mov	result1, #0
12fb8     70 00 90 AD |  if_e	jmp	#LR__1671
12fbc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
12fbc     00 FA 05 F6 | 	mov	result1, #0
12fc0     01 FA 61 FD | 	cogid	result1
12fc4     FD 00 02 F6 | 	mov	_var01, result1
12fc8     01 00 66 F0 | 	shl	_var01, #1
12fcc     FD 00 02 F1 | 	add	_var01, result1
12fd0     02 00 66 F0 | 	shl	_var01, #2
12fd4     FF 03 00 FF 
12fd8     00 03 06 F6 | 	mov	_var02, ##524032
12fdc     00 03 02 F1 | 	add	_var02, _var01
12fe0                 | '     if long[mailbox] < 0
12fe0     01 01 02 FB | 	rdlong	_var01, _var02
12fe4     00 00 56 F2 | 	cmps	_var01, #0 wc
12fe8                 | '         return ERR_MAILBOX_BUSY
12fe8     1C FA 65 C6 |  if_b	neg	result1, #28
12fec     3C 00 90 CD |  if_b	jmp	#LR__1671
12ff0                 | '     long[mailbox][2] := count
12ff0     08 02 06 F1 | 	add	_var02, #8
12ff4     01 17 62 FC | 	wrlong	arg03, _var02
12ff8                 | '     long[mailbox][1] := dstHubAddr
12ff8     04 02 86 F1 | 	sub	_var02, #4
12ffc     01 13 62 FC | 	wrlong	arg01, _var02
13000     04 02 86 F1 | 	sub	_var02, #4
13004                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
13004     0A 05 02 F6 | 	mov	_var03, arg02
13008     D9 04 06 F4 | 	bitl	_var03, #217
1300c     00 00 58 FF 
13010     00 00 06 F6 | 	mov	_var01, ##-1342177280
13014     02 01 02 F1 | 	add	_var01, _var03
13018     01 01 62 FC | 	wrlong	_var01, _var02
1301c                 | '     repeat
1301c                 | LR__1670
1301c                 | '         result := long[mailbox]    
1301c     01 05 02 FB | 	rdlong	_var03, _var02
13020     00 04 56 F2 | 	cmps	_var03, #0 wc
13024     F4 FF 9F CD |  if_b	jmp	#LR__1670
13028                 | '     while result < 0   
13028                 | '     return -result                       'return success or error
13028     02 FB 61 F6 | 	neg	result1, _var03
1302c                 | LR__1671
1302c                 | _psram_spin2_read1_ret
1302c     2D 00 64 FD | 	ret
13030                 | 
13030                 | ' 
13030                 | ' '..............................................................................
13030                 | ' 
13030                 | ' {{
13030                 | ' }}
13030                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
13030                 | _psram_spin2_write
13030                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
13030                 | '     if drivercog == -1 ' driver must be running
13030     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
13034     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
13038     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1303c     FF FF 7F FF 
13040     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
13044                 | '         return ERR_INACTIVE
13044     0F FA 65 A6 |  if_e	neg	result1, #15
13048     7C 00 90 AD |  if_e	jmp	#LR__1681
1304c                 | '     if count == 0 ' don't even bother writing
1304c     00 16 0E F2 | 	cmp	arg03, #0 wz
13050                 | '         return 0
13050     00 FA 05 A6 |  if_e	mov	result1, #0
13054     70 00 90 AD |  if_e	jmp	#LR__1681
13058                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
13058     00 FA 05 F6 | 	mov	result1, #0
1305c     01 FA 61 FD | 	cogid	result1
13060     FD 00 02 F6 | 	mov	_var01, result1
13064     01 00 66 F0 | 	shl	_var01, #1
13068     FD 00 02 F1 | 	add	_var01, result1
1306c     02 00 66 F0 | 	shl	_var01, #2
13070     FF 03 00 FF 
13074     00 03 06 F6 | 	mov	_var02, ##524032
13078     00 03 02 F1 | 	add	_var02, _var01
1307c                 | '     if long[mailbox] < 0
1307c     01 01 02 FB | 	rdlong	_var01, _var02
13080     00 00 56 F2 | 	cmps	_var01, #0 wc
13084                 | '         return ERR_MAILBOX_BUSY
13084     1C FA 65 C6 |  if_b	neg	result1, #28
13088     3C 00 90 CD |  if_b	jmp	#LR__1681
1308c                 | '     long[mailbox][2] := count
1308c     08 02 06 F1 | 	add	_var02, #8
13090     01 17 62 FC | 	wrlong	arg03, _var02
13094                 | '     long[mailbox][1] := srcHubAddr
13094     04 02 86 F1 | 	sub	_var02, #4
13098     01 13 62 FC | 	wrlong	arg01, _var02
1309c     04 02 86 F1 | 	sub	_var02, #4
130a0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
130a0     0A 05 02 F6 | 	mov	_var03, arg02
130a4     D9 04 06 F4 | 	bitl	_var03, #217
130a8     00 00 78 FF 
130ac     00 00 06 F6 | 	mov	_var01, ##-268435456
130b0     02 01 02 F1 | 	add	_var01, _var03
130b4     01 01 62 FC | 	wrlong	_var01, _var02
130b8                 | '     repeat
130b8                 | LR__1680
130b8                 | '         result := long[mailbox]    
130b8     01 05 02 FB | 	rdlong	_var03, _var02
130bc     00 04 56 F2 | 	cmps	_var03, #0 wc
130c0     F4 FF 9F CD |  if_b	jmp	#LR__1680
130c4                 | '     while result < 0   
130c4                 | '     return -result                       'return success or error
130c4     02 FB 61 F6 | 	neg	result1, _var03
130c8                 | LR__1681
130c8                 | _psram_spin2_write_ret
130c8     2D 00 64 FD | 	ret
130cc                 | 
130cc                 | ' 
130cc                 | ' ' generalized fill
130cc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
130cc                 | _psram_spin2_fill
130cc     09 01 02 F6 | 	mov	_var01, arg01
130d0     0A 03 02 F6 | 	mov	_var02, arg02
130d4     0B 05 02 F6 | 	mov	_var03, arg03
130d8     0D 07 02 F6 | 	mov	_var04, arg05
130dc                 | '     case datasize 
130dc     01 06 86 F1 | 	sub	_var04, #1
130e0     04 06 26 F3 | 	fle	_var04, #4
130e4     30 06 62 FD | 	jmprel	_var04
130e8                 | LR__1690
130e8     10 00 90 FD | 	jmp	#LR__1691
130ec     18 00 90 FD | 	jmp	#LR__1692
130f0     2C 00 90 FD | 	jmp	#LR__1694
130f4     1C 00 90 FD | 	jmp	#LR__1693
130f8     24 00 90 FD | 	jmp	#LR__1694
130fc                 | LR__1691
130fc                 | '         1: req := driver.R_WRITEBYTE
130fc     00 00 60 FF 
13100     00 08 06 F6 | 	mov	_var05, ##-1073741824
13104     20 00 90 FD | 	jmp	#LR__1695
13108                 | LR__1692
13108                 | '         2: req := driver.R_WRITEWORD
13108     00 00 68 FF 
1310c     00 08 06 F6 | 	mov	_var05, ##-805306368
13110     14 00 90 FD | 	jmp	#LR__1695
13114                 | LR__1693
13114                 | '         4: req := driver.R_WRITELONG
13114     00 00 70 FF 
13118     00 08 06 F6 | 	mov	_var05, ##-536870912
1311c     08 00 90 FD | 	jmp	#LR__1695
13120                 | LR__1694
13120                 | '         other : return ERR_INVALID
13120     06 FA 65 F6 | 	neg	result1, #6
13124     94 00 90 FD | 	jmp	#LR__1697
13128                 | LR__1695
13128                 | '     if count == 0   ' nothing to do
13128     00 04 0E F2 | 	cmp	_var03, #0 wz
1312c                 | '         return 0
1312c     00 FA 05 A6 |  if_e	mov	result1, #0
13130     88 00 90 AD |  if_e	jmp	#LR__1697
13134                 | '     if drivercog == -1
13134     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
13138     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1313c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
13140     FF FF 7F FF 
13144     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
13148                 | '         return ERR_INACTIVE
13148     0F FA 65 A6 |  if_e	neg	result1, #15
1314c     6C 00 90 AD |  if_e	jmp	#LR__1697
13150                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
13150     00 FA 05 F6 | 	mov	result1, #0
13154     01 FA 61 FD | 	cogid	result1
13158     FD 06 02 F6 | 	mov	_var04, result1
1315c     01 06 66 F0 | 	shl	_var04, #1
13160     FD 06 02 F1 | 	add	_var04, result1
13164     02 06 66 F0 | 	shl	_var04, #2
13168     FF 03 00 FF 
1316c     00 0B 06 F6 | 	mov	_var06, ##524032
13170     03 0B 02 F1 | 	add	_var06, _var04
13174                 | '     if long[mailbox] < 0
13174     05 07 02 FB | 	rdlong	_var04, _var06
13178     00 06 56 F2 | 	cmps	_var04, #0 wc
1317c                 | '         return ERR_MAILBOX_BUSY
1317c     1C FA 65 C6 |  if_b	neg	result1, #28
13180     38 00 90 CD |  if_b	jmp	#LR__1697
13184                 | '     long[mailbox][2] := count
13184     08 0A 06 F1 | 	add	_var06, #8
13188     05 05 62 FC | 	wrlong	_var03, _var06
1318c                 | '     long[mailbox][1] := pattern
1318c     04 0A 86 F1 | 	sub	_var06, #4
13190     05 03 62 FC | 	wrlong	_var02, _var06
13194     04 0A 86 F1 | 	sub	_var06, #4
13198                 | '     long[mailbox] := req + (addr & $fffffff)
13198     04 0D 02 F6 | 	mov	_var07, _var05
1319c     00 0F 02 F6 | 	mov	_var08, _var01
131a0     7C 0E 06 F4 | 	bitl	_var08, #124
131a4     07 0D 02 F1 | 	add	_var07, _var08
131a8     05 0D 62 FC | 	wrlong	_var07, _var06
131ac                 | '     repeat
131ac                 | LR__1696
131ac                 | '         r := long[mailbox]
131ac     05 0F 02 FB | 	rdlong	_var08, _var06
131b0     00 0E 56 F2 | 	cmps	_var08, #0 wc
131b4     F4 FF 9F CD |  if_b	jmp	#LR__1696
131b8                 | '     while r < 0
131b8                 | '     return -r                  ' return 0 for success or negated error code
131b8     07 FB 61 F6 | 	neg	result1, _var08
131bc                 | LR__1697
131bc                 | _psram_spin2_fill_ret
131bc     2D 00 64 FD | 	ret
131c0                 | 
131c0                 | ' 
131c0                 | ' '..............................................................................
131c0                 | ' 
131c0                 | ' {{
131c0                 | ' }}
131c0                 | ' PUB setQos(cog, qos) : result | mailbox
131c0                 | _psram_spin2_setQos
131c0     09 01 02 F6 | 	mov	_var01, arg01
131c4                 | '     if drivercog == -1 ' driver must be running
131c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
131c8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
131cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
131d0     FF FF 7F FF 
131d4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
131d8                 | '         return ERR_INACTIVE
131d8     0F FA 65 A6 |  if_e	neg	result1, #15
131dc     9C 00 90 AD |  if_e	jmp	#LR__1704
131e0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
131e0     00 00 56 F2 | 	cmps	_var01, #0 wc
131e4     08 00 90 CD |  if_b	jmp	#LR__1700
131e8     08 00 56 F2 | 	cmps	_var01, #8 wc
131ec     08 00 90 CD |  if_b	jmp	#LR__1701
131f0                 | LR__1700
131f0                 | '         return ERR_INVALID
131f0     06 FA 65 F6 | 	neg	result1, #6
131f4     84 00 90 FD | 	jmp	#LR__1704
131f8                 | LR__1701
131f8                 | '     long[@qosData][cog] := qos & !$1ff
131f8     FF 15 26 F5 | 	andn	arg02, #511
131fc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
13200     02 00 66 F0 | 	shl	_var01, #2
13204     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
13208     00 15 62 FC | 	wrlong	arg02, _var01
1320c                 | '     mailbox := $7FF00 + drivercog*12
1320c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
13210     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
13214     02 07 02 F6 | 	mov	_var04, _var03
13218     01 06 66 F0 | 	shl	_var04, #1
1321c     02 07 02 F1 | 	add	_var04, _var03
13220     02 06 66 F0 | 	shl	_var04, #2
13224     FF 03 00 FF 
13228     00 09 06 F6 | 	mov	_var05, ##524032
1322c     03 09 02 F1 | 	add	_var05, _var04
13230                 | '     repeat until LOCKTRY(driverlock)
13230     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
13234                 | LR__1702
13234     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
13238     06 12 72 FD | 	locktry	arg01 wc
1323c     F4 FF 9F 3D |  if_ae	jmp	#LR__1702
13240     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
13244                 | '     long[mailbox] := driver.R_CONFIG + cogid()
13244     00 06 06 F6 | 	mov	_var04, #0
13248     01 06 62 FD | 	cogid	_var04
1324c     00 00 78 FF 
13250     00 02 06 F6 | 	mov	_var02, ##-268435456
13254     03 03 02 F1 | 	add	_var02, _var04
13258     04 03 62 FC | 	wrlong	_var02, _var05
1325c                 | '     repeat while long[mailbox] < 0
1325c                 | LR__1703
1325c     04 03 02 FB | 	rdlong	_var02, _var05
13260     00 02 56 F2 | 	cmps	_var02, #0 wc
13264     F4 FF 9F CD |  if_b	jmp	#LR__1703
13268                 | '     LOCKREL(driverlock)
13268     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1326c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
13270     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
13274     07 12 72 FD | 	lockrel	arg01 wc
13278     00 FA 05 F6 | 	mov	result1, #0
1327c                 | LR__1704
1327c                 | _psram_spin2_setQos_ret
1327c     2D 00 64 FD | 	ret
13280                 | 
13280                 | ' 
13280                 | ' '..............................................................................
13280                 | ' 
13280                 | ' {{
13280                 | ' }}
13280                 | ' PRI lookupDelay(freq) : delay | profile
13280                 | _psram_spin2_lookupDelay
13280                 | '     profile := @delayTable
13280     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
13284     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
13288                 | '     delay := long[profile][0]
13288     00 03 02 FB | 	rdlong	_var02, _var01
1328c                 | '     repeat while long[profile][1] 
1328c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
13290     97 16 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
13294                 | LR__1710
13294     04 00 06 F1 | 	add	_var01, #4
13298     00 FB 09 FB | 	rdlong	result1, _var01 wz
1329c     04 00 86 F1 | 	sub	_var01, #4
132a0     1C 00 90 AD |  if_e	jmp	#LR__1712
132a4                 | '         if freq +< long[profile][1] 
132a4     04 00 06 F1 | 	add	_var01, #4
132a8     00 FB 01 FB | 	rdlong	result1, _var01
132ac     04 00 86 F1 | 	sub	_var01, #4
132b0     FD 12 12 F2 | 	cmp	arg01, result1 wc
132b4                 | '             quit
132b4                 | '         profile += 4
132b4     04 00 06 31 |  if_ae	add	_var01, #4
132b8                 | '         delay++
132b8     01 02 06 31 |  if_ae	add	_var02, #1
132bc     D4 FF 9F 3D |  if_ae	jmp	#LR__1710
132c0                 | LR__1711
132c0                 | LR__1712
132c0     01 FB 01 F6 | 	mov	result1, _var02
132c4                 | _psram_spin2_lookupDelay_ret
132c4     2D 00 64 FD | 	ret
132c8                 | 
132c8                 | ' 
132c8                 | ' PUB start() : r
132c8                 | _usbnew_spin2_start
132c8     00 00 06 F6 | 	mov	_var01, #0
132cc                 | '   ifnot driver_cog
132cc     15 00 00 FF 
132d0     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
132d4     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
132d8     15 00 00 FF 
132dc     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
132e0     38 00 90 5D |  if_ne	jmp	#LR__1720
132e4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
132e4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
132e8     10 00 06 F6 | 	mov	_var01, #16
132ec     00 16 06 F6 | 	mov	arg03, #0
132f0     28 16 62 FD | 	setq	arg03
132f4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
132f8     01 00 66 C6 |  if_b	neg	_var01, #1
132fc                 | '     if r >= 0
132fc     00 00 56 F2 | 	cmps	_var01, #0 wc
13300                 | '       driver_cog := r+1
13300     00 03 02 36 |  if_ae	mov	_var02, _var01
13304     01 02 06 31 |  if_ae	add	_var02, #1
13308     15 00 00 3F 
1330c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
13310     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
13314     15 00 00 3F 
13318     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1331c                 | LR__1720
1331c     00 FB 01 F6 | 	mov	result1, _var01
13320                 | _usbnew_spin2_start_ret
13320     2D 00 64 FD | 	ret
13324                 | 
13324                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
13324                 | ' 
13324                 | ' '' Return key event from buffer if there is one
13324                 | ' PUB get_key() : r | tail
13324                 | _usbnew_spin2_get_key
13324                 | '   tail := keyq_tail
13324     0F 00 00 FF 
13328     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1332c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
13330                 | '   if keyq_head == tail
13330     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
13334     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
13338     0F 00 00 FF 
1333c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
13340     00 03 0A F2 | 	cmp	_var02, _var01 wz
13344                 | '     return 0 ' No event
13344     00 FA 05 A6 |  if_e	mov	result1, #0
13348     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1334c                 | '   r := keyq_data[tail]
1334c     00 03 02 F6 | 	mov	_var02, _var01
13350     02 02 66 F0 | 	shl	_var02, #2
13354     0F 00 00 FF 
13358     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1335c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
13360     01 FB 01 FB | 	rdlong	result1, _var02
13364                 | '   if ++tail == KEYQUEUE_SIZE
13364     01 00 06 F1 | 	add	_var01, #1
13368     80 00 0E F2 | 	cmp	_var01, #128 wz
1336c                 | '     tail := 0
1336c     00 00 06 A6 |  if_e	mov	_var01, #0
13370                 | '   keyq_tail := tail
13370     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
13374     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
13378     0F 00 00 FF 
1337c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
13380                 | _usbnew_spin2_get_key_ret
13380     2D 00 64 FD | 	ret
13384                 | 
13384                 | ' 
13384                 | ' '' Emulate mouse movement
13384                 | ' PUB mouse_move(x,y)
13384                 | _usbnew_spin2_mouse_move
13384     02 4A 05 F6 | 	mov	COUNT_, #2
13388     A8 00 A0 FD | 	call	#pushregs_
1338c     09 1F 02 F6 | 	mov	local01, arg01
13390     0A 21 02 F6 | 	mov	local02, arg02
13394                 | '   mouse_lock := 1
13394     14 00 00 FF 
13398     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1339c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
133a0     14 00 00 FF 
133a4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
133a8                 | '   waitus(2) ' hope driver is now done
133a8     02 12 06 F6 | 	mov	arg01, #2
133ac     48 09 B0 FD | 	call	#__system___waitus
133b0                 | '   mouse_xacc := x
133b0     14 00 00 FF 
133b4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
133b8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
133bc                 | '   mouse_yacc := y
133bc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
133c0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
133c4                 | '   if mouse_outptr
133c4     04 00 00 FF 
133c8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
133cc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
133d0     0F 00 00 FF 
133d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
133d8     24 00 90 AD |  if_e	jmp	#LR__1730
133dc                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
133dc     10 20 66 F0 | 	shl	local02, #16
133e0     0F 1F 32 F9 | 	getword	local01, local01, #0
133e4     0F 21 42 F5 | 	or	local02, local01
133e8     0F 00 00 FF 
133ec     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
133f0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
133f4     0F 00 00 FF 
133f8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
133fc     0F 21 62 FC | 	wrlong	local02, local01
13400                 | LR__1730
13400                 | '   mouse_lock := 0
13400     14 00 00 FF 
13404     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
13408     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1340c     14 00 00 FF 
13410     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
13414     A7 F0 03 F6 | 	mov	ptra, fp
13418     B2 00 A0 FD | 	call	#popregs_
1341c                 | _usbnew_spin2_mouse_move_ret
1341c     2D 00 64 FD | 	ret
13420                 | 
13420                 | '     '' Set HAVE_HIDPAD to enable.
13420                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
13420                 | ' 
13420                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
13420                 | ' PUB hidpad_id(dev) : r
13420                 | _usbnew_spin2_hidpad_id
13420                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
13420     13 00 00 FF 
13424     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
13428     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1342c     09 01 02 F6 | 	mov	_var01, arg01
13430     03 00 66 F0 | 	shl	_var01, #3
13434     09 01 82 F1 | 	sub	_var01, arg01
13438     02 00 66 F0 | 	shl	_var01, #2
1343c     00 FB 01 F1 | 	add	result1, _var01
13440     FD FA 01 FB | 	rdlong	result1, result1
13444     13 00 00 FF 
13448     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1344c                 | _usbnew_spin2_hidpad_id_ret
1344c     2D 00 64 FD | 	ret
13450                 | 
13450                 | ' 
13450                 | ' '' Get all button states for a device
13450                 | ' PUB hidpad_buttons(dev) : r 
13450                 | _usbnew_spin2_hidpad_buttons
13450                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
13450     13 00 00 FF 
13454     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
13458     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1345c     09 01 02 F6 | 	mov	_var01, arg01
13460     03 00 66 F0 | 	shl	_var01, #3
13464     09 01 82 F1 | 	sub	_var01, arg01
13468     02 00 66 F0 | 	shl	_var01, #2
1346c     00 FB 01 F1 | 	add	result1, _var01
13470     14 FA 05 F1 | 	add	result1, #20
13474     FD FA 01 FB | 	rdlong	result1, result1
13478     13 00 00 FF 
1347c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
13480                 | _usbnew_spin2_hidpad_buttons_ret
13480     2D 00 64 FD | 	ret
13484                 | 
13484                 | ' 
13484                 | ' '' Get state of an axis (normalized between -32768 and 32767)
13484                 | ' PUB hidpad_axis(dev,axnum) : r
13484                 | _usbnew_spin2_hidpad_axis
13484                 | '   if axnum +>= 6
13484     06 14 16 F2 | 	cmp	arg02, #6 wc
13488                 | '     return 0
13488     00 FA 05 36 |  if_ae	mov	result1, #0
1348c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
13490                 | '   else 
13490                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
13490     13 00 00 FF 
13494     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
13498     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1349c     09 01 02 F6 | 	mov	_var01, arg01
134a0     03 00 66 F0 | 	shl	_var01, #3
134a4     09 01 82 F1 | 	sub	_var01, arg01
134a8     02 00 66 F0 | 	shl	_var01, #2
134ac     00 FB 01 F1 | 	add	result1, _var01
134b0     04 00 06 F6 | 	mov	_var01, #4
134b4     0A 01 02 F1 | 	add	_var01, arg02
134b8     01 00 66 F0 | 	shl	_var01, #1
134bc     FD 00 02 F1 | 	add	_var01, result1
134c0     00 FB E1 FA | 	rdword	result1, _var01
134c4     0F FA 65 F7 | 	signx	result1, #15
134c8     13 00 00 FF 
134cc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
134d0                 | _usbnew_spin2_hidpad_axis_ret
134d0     2D 00 64 FD | 	ret
134d4                 | 
134d4                 | ' 
134d4                 | ' 
134d4                 | ' '--------------------------------------------------------------
134d4                 | ' '---------- Init the variables, start the cog. ----------------
134d4                 | ' '--------------------------------------------------------------
134d4                 | ' 
134d4                 | ' pub start(mbox,scope,cache) :cog,base | iii
134d4                 | _Audio093b_8_sc_spin2_start
134d4     04 4A 05 F6 | 	mov	COUNT_, #4
134d8     A8 00 A0 FD | 	call	#pushregs_
134dc     09 1F 02 F6 | 	mov	local01, arg01
134e0                 | ' 
134e0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
134e0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
134e0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
134e0                 | ' 
134e0                 | ' mailboxaddr:=mbox 
134e0     F2 1E 62 FC | 	wrlong	local01, objptr
134e4                 | ' scope_ptr:=scope
134e4     04 E4 05 F1 | 	add	objptr, #4
134e8     F2 14 62 FC | 	wrlong	arg02, objptr
134ec                 | ' cache_ptr:=cache
134ec     04 E4 05 F1 | 	add	objptr, #4
134f0     F2 16 62 FC | 	wrlong	arg03, objptr
134f4                 | ' base:=@channel1[0]
134f4     04 E4 05 F1 | 	add	objptr, #4
134f8     F2 20 02 F6 | 	mov	local02, objptr
134fc                 | ' 
134fc                 | ' repeat iii from 0 to 7
134fc     00 22 06 F6 | 	mov	local03, #0
13500     01 00 00 FF 
13504     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
13508     0C E4 85 F1 | 	sub	objptr, #12
1350c     97 80 48 FB | 	callpa	#(@LR__1741-@LR__1740)>>2,fcache_load_ptr_
13510                 | LR__1740
13510                 | '   long[base+32*iii]:=0
13510     10 1F 02 F6 | 	mov	local01, local02
13514     11 FD 01 F6 | 	mov	result2, local03
13518     05 FC 65 F0 | 	shl	result2, #5
1351c     FE 1E 02 F1 | 	add	local01, result2
13520     0F 01 68 FC | 	wrlong	#0, local01
13524                 | '   long[base+32*iii+4]:=0
13524     10 1F 02 F6 | 	mov	local01, local02
13528     11 FD 01 F6 | 	mov	result2, local03
1352c     05 FC 65 F0 | 	shl	result2, #5
13530     FE 1E 02 F1 | 	add	local01, result2
13534     04 1E 06 F1 | 	add	local01, #4
13538     0F 01 68 FC | 	wrlong	#0, local01
1353c                 | '   long[base+32*iii+12]:=0
1353c     10 25 02 F6 | 	mov	local04, local02
13540     11 1F 02 F6 | 	mov	local01, local03
13544     05 1E 66 F0 | 	shl	local01, #5
13548     0F 25 02 F1 | 	add	local04, local01
1354c     0C 24 06 F1 | 	add	local04, #12
13550     12 01 68 FC | 	wrlong	#0, local04
13554                 | '   long[base+32*iii+16]:=2 
13554     10 25 02 F6 | 	mov	local04, local02
13558     11 1F 02 F6 | 	mov	local01, local03
1355c     05 1E 66 F0 | 	shl	local01, #5
13560     0F 25 02 F1 | 	add	local04, local01
13564     10 24 06 F1 | 	add	local04, #16
13568     12 05 68 FC | 	wrlong	#2, local04
1356c                 | '   word[base+32*iii+20]:=0
1356c     10 25 02 F6 | 	mov	local04, local02
13570     11 1F 02 F6 | 	mov	local01, local03
13574     05 1E 66 F0 | 	shl	local01, #5
13578     0F 25 02 F1 | 	add	local04, local01
1357c     14 24 06 F1 | 	add	local04, #20
13580     12 01 58 FC | 	wrword	#0, local04
13584                 | '   word[base+32*iii+22]:=8192
13584     10 25 02 F6 | 	mov	local04, local02
13588     11 1F 02 F6 | 	mov	local01, local03
1358c     05 1E 66 F0 | 	shl	local01, #5
13590     0F 25 02 F1 | 	add	local04, local01
13594     16 24 06 F1 | 	add	local04, #22
13598     10 00 80 FF 
1359c     12 01 58 FC | 	wrword	##8192, local04
135a0                 | '   word[base+32*iii+24]:=4000+2*iii
135a0     11 25 02 F6 | 	mov	local04, local03
135a4     01 24 66 F0 | 	shl	local04, #1
135a8     07 00 00 FF 
135ac     A0 1F 06 F6 | 	mov	local01, ##4000
135b0     12 1F 02 F1 | 	add	local01, local04
135b4     10 25 02 F6 | 	mov	local04, local02
135b8     11 FD 01 F6 | 	mov	result2, local03
135bc     05 FC 65 F0 | 	shl	result2, #5
135c0     FE 24 02 F1 | 	add	local04, result2
135c4     18 24 06 F1 | 	add	local04, #24
135c8     12 1F 52 FC | 	wrword	local01, local04
135cc                 | '   word[base+32*iii+26]:=2
135cc     10 25 02 F6 | 	mov	local04, local02
135d0     11 1F 02 F6 | 	mov	local01, local03
135d4     05 1E 66 F0 | 	shl	local01, #5
135d8     0F 25 02 F1 | 	add	local04, local01
135dc     1A 24 06 F1 | 	add	local04, #26
135e0     12 05 58 FC | 	wrword	#2, local04
135e4                 | '   long [base+32*iii+8]:=@null | $C0000000
135e4     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
135e8     3E 1E 26 F4 | 	bith	local01, #62
135ec     10 25 02 F6 | 	mov	local04, local02
135f0     11 17 02 F6 | 	mov	arg03, local03
135f4     05 16 66 F0 | 	shl	arg03, #5
135f8     0B 25 02 F1 | 	add	local04, arg03
135fc     08 24 06 F1 | 	add	local04, #8
13600     12 1F 62 FC | 	wrlong	local01, local04
13604     01 22 06 F1 | 	add	local03, #1
13608     08 22 56 F2 | 	cmps	local03, #8 wc
1360c     00 FF 9F CD |  if_b	jmp	#LR__1740
13610                 | LR__1741
13610     01 00 00 FF 
13614     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
13618                 | '   
13618                 | ' cog:=coginit(16,@audio,@mailboxaddr)
13618     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
1361c     F2 16 02 F6 | 	mov	arg03, objptr
13620     10 24 06 F6 | 	mov	local04, #16
13624     28 16 62 FD | 	setq	arg03
13628     0A 25 F2 FC | 	coginit	local04, arg02 wc
1362c     01 24 66 C6 |  if_b	neg	local04, #1
13630                 | ' waitms(100)
13630     64 12 06 F6 | 	mov	arg01, #100
13634     54 06 B0 FD | 	call	#__system___waitms
13638                 | ' return cog,base
13638     10 FD 01 F6 | 	mov	result2, local02
1363c     12 FB 01 F6 | 	mov	result1, local04
13640     A7 F0 03 F6 | 	mov	ptra, fp
13644     B2 00 A0 FD | 	call	#popregs_
13648                 | _Audio093b_8_sc_spin2_start_ret
13648     2D 00 64 FD | 	ret
1364c                 | 
1364c                 | ' 
1364c                 | ' ' a simple play procedure to not poke everything. 
1364c                 | ' 
1364c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1364c                 | _Audio093b_8_sc_spin2_play
1364c     0C E4 05 F1 | 	add	objptr, #12
13650     F2 00 02 F6 | 	mov	_var01, objptr
13654     05 12 66 F0 | 	shl	arg01, #5
13658     09 01 02 F1 | 	add	_var01, arg01
1365c     00 00 60 FF 
13660     00 14 06 F1 | 	add	arg02, ##-1073741824
13664     00 13 02 F6 | 	mov	arg01, _var01
13668     08 12 06 F1 | 	add	arg01, #8
1366c     09 15 62 FC | 	wrlong	arg02, arg01
13670     00 15 02 F6 | 	mov	arg02, _var01
13674     0C 14 06 F1 | 	add	arg02, #12
13678     0A 1B 62 FC | 	wrlong	arg05, arg02
1367c     00 1C 56 F2 | 	cmps	arg06, #0 wc
13680     00 15 02 36 |  if_ae	mov	arg02, _var01
13684     10 14 06 31 |  if_ae	add	arg02, #16
13688     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
1368c     02 1A 06 C1 |  if_b	add	arg05, #2
13690     00 13 02 C6 |  if_b	mov	arg01, _var01
13694     10 12 06 C1 |  if_b	add	arg01, #16
13698     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1369c     0B 15 52 F6 | 	abs	arg02, arg03 wc
136a0     0F 1B 80 FF 
136a4     0A 3F 1A FD | 	qdiv	##3546911, arg02
136a8                 | ' 
136a8                 | ' base2:=@channel1[0]+32*channel
136a8                 | ' long[base2+8]:=sample+$C0000000 
136a8                 | ' long[base2+12]:= len
136a8                 | ' if loop >=0 
136a8                 | '   long[base2+16]:= loop
136a8     0C E4 85 F1 | 	sub	objptr, #12
136ac                 | ' else
136ac                 | '   long[base2+16]:= len+2
136ac                 | ' word[base2+20]:=vol
136ac     00 15 02 F6 | 	mov	arg02, _var01
136b0     14 14 06 F1 | 	add	arg02, #20
136b4     0A 19 52 FC | 	wrword	arg04, arg02
136b8                 | ' word[base2+24]:= 3546911/splfreq 
136b8     00 13 02 F6 | 	mov	arg01, _var01
136bc     18 12 06 F1 | 	add	arg01, #24
136c0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
136c0                 | ' long[base2+28]:=$40000000
136c0     18 14 62 FD | 	getqx	arg02
136c4     0A 15 82 F6 | 	negc	arg02, arg02
136c8     09 15 52 FC | 	wrword	arg02, arg01
136cc     00 15 02 F6 | 	mov	arg02, _var01
136d0     1A 14 06 F1 | 	add	arg02, #26
136d4     0A 01 5A FC | 	wrword	#256, arg02
136d8     1C 00 06 F1 | 	add	_var01, #28
136dc     00 00 A0 FF 
136e0     00 01 68 FC | 	wrlong	##1073741824, _var01
136e4                 | _Audio093b_8_sc_spin2_play_ret
136e4     2D 00 64 FD | 	ret
136e8                 | 
136e8                 | ' until (i >>8) >=len
136e8                 | ' 
136e8                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
136e8                 | _Audio093b_8_sc_spin2_play8
136e8                 | ' 
136e8                 | ' base2:=@channel1[0]+32*channel
136e8     0C E4 05 F1 | 	add	objptr, #12
136ec     F2 00 02 F6 | 	mov	_var01, objptr
136f0     05 12 66 F0 | 	shl	arg01, #5
136f4     09 01 02 F1 | 	add	_var01, arg01
136f8                 | ' long[base2]:=0
136f8     00 01 68 FC | 	wrlong	#0, _var01
136fc                 | ' long[base2+8]:=sample+$40000000 
136fc     00 00 20 FF 
13700     00 14 06 F1 | 	add	arg02, ##1073741824
13704     00 13 02 F6 | 	mov	arg01, _var01
13708     08 12 06 F1 | 	add	arg01, #8
1370c     09 15 62 FC | 	wrlong	arg02, arg01
13710                 | ' if loop>=0
13710     00 1C 56 F2 | 	cmps	arg06, #0 wc
13714     0C E4 85 F1 | 	sub	objptr, #12
13718     1C 00 90 CD |  if_b	jmp	#LR__1750
1371c                 | '   long[base2+12]:=loop
1371c     00 15 02 F6 | 	mov	arg02, _var01
13720     0C 14 06 F1 | 	add	arg02, #12
13724     0A 1D 62 FC | 	wrlong	arg06, arg02
13728                 | '   long[base2+16]:= len
13728     00 1D 02 F6 | 	mov	arg06, _var01
1372c     10 1C 06 F1 | 	add	arg06, #16
13730     0E 1B 62 FC | 	wrlong	arg05, arg06
13734     1C 00 90 FD | 	jmp	#LR__1751
13738                 | LR__1750
13738                 | ' else
13738                 | '   long[base2+12]:= len
13738     00 1D 02 F6 | 	mov	arg06, _var01
1373c     0C 1C 06 F1 | 	add	arg06, #12
13740     0E 1B 62 FC | 	wrlong	arg05, arg06
13744                 | '   long[base2+16]:= len+1
13744     01 1A 06 F1 | 	add	arg05, #1
13748     00 13 02 F6 | 	mov	arg01, _var01
1374c     10 12 06 F1 | 	add	arg01, #16
13750     09 1B 62 FC | 	wrlong	arg05, arg01
13754                 | LR__1751
13754     0B 17 52 F6 | 	abs	arg03, arg03 wc
13758     0F 1B 80 FF 
1375c     0B 3F 1A FD | 	qdiv	##3546911, arg03
13760                 | ' word[base2+20]:=vol
13760     00 17 02 F6 | 	mov	arg03, _var01
13764     14 16 06 F1 | 	add	arg03, #20
13768     0B 19 52 FC | 	wrword	arg04, arg03
1376c                 | ' word[base2+24]:= 3546911/splfreq 
1376c     00 13 02 F6 | 	mov	arg01, _var01
13770     18 12 06 F1 | 	add	arg01, #24
13774                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
13774                 | ' long[base2+28]:=$40000000
13774     18 18 62 FD | 	getqx	arg04
13778     0C 19 82 F6 | 	negc	arg04, arg04
1377c     09 19 52 FC | 	wrword	arg04, arg01
13780     00 19 02 F6 | 	mov	arg04, _var01
13784     1A 18 06 F1 | 	add	arg04, #26
13788     0C 01 5A FC | 	wrword	#256, arg04
1378c     1C 00 06 F1 | 	add	_var01, #28
13790     00 00 A0 FF 
13794     00 01 68 FC | 	wrlong	##1073741824, _var01
13798                 | _Audio093b_8_sc_spin2_play8_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | '     
1379c                 | ' pub stop(channel) 'silence it
1379c                 | _Audio093b_8_sc_spin2_stop
1379c                 | ' 
1379c                 | ' word[@channel1[0]+32*channel+20]:=0
1379c     0C E4 05 F1 | 	add	objptr, #12
137a0     F2 00 02 F6 | 	mov	_var01, objptr
137a4     05 12 66 F0 | 	shl	arg01, #5
137a8     09 01 02 F1 | 	add	_var01, arg01
137ac     14 00 06 F1 | 	add	_var01, #20
137b0     00 01 58 FC | 	wrword	#0, _var01
137b4     0C E4 85 F1 | 	sub	objptr, #12
137b8                 | _Audio093b_8_sc_spin2_stop_ret
137b8     2D 00 64 FD | 	ret
137bc                 | hubexit
137bc     81 00 80 FD | 	jmp	#cogexit
137c0                 | 
137c0                 | __system___setbaud
137c0     14 5E 06 FB | 	rdlong	muldiva_, #20
137c4     09 61 02 F6 | 	mov	muldivb_, arg01
137c8     BA 00 A0 FD | 	call	#divide_
137cc     97 06 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
137d0                 | LR__1760
137d0     3E FA 9D FA | 	rdpin	result1, #62 wc
137d4     FE FC A1 F1 | 	subx	result2, result2
137d8     F4 FF 9F CD |  if_b	jmp	#LR__1760
137dc                 | LR__1761
137dc     40 7C 64 FD | 	dirl	#62
137e0     40 7E 64 FD | 	dirl	#63
137e4     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
137e8     10 60 66 F0 | 	shl	muldivb_, #16
137ec     07 14 06 F6 | 	mov	arg02, #7
137f0     30 15 02 F1 | 	add	arg02, muldivb_
137f4     3E F8 0C FC | 	wrpin	#124, #62
137f8     3E 14 16 FC | 	wxpin	arg02, #62
137fc     3F 7C 0C FC | 	wrpin	#62, #63
13800     14 14 06 F1 | 	add	arg02, #20
13804     3F 14 16 FC | 	wxpin	arg02, #63
13808     41 7C 64 FD | 	dirh	#62
1380c     41 7E 64 FD | 	dirh	#63
13810                 | __system___setbaud_ret
13810     2D 00 64 FD | 	ret
13814                 | 
13814                 | __system___txraw
13814     01 4A 05 F6 | 	mov	COUNT_, #1
13818     A8 00 A0 FD | 	call	#pushregs_
1381c     09 1F 02 F6 | 	mov	local01, arg01
13820     97 06 48 FB | 	callpa	#(@LR__1771-@LR__1770)>>2,fcache_load_ptr_
13824                 | LR__1770
13824     3E FA 9D FA | 	rdpin	result1, #62 wc
13828     FE FC A1 F1 | 	subx	result2, result2
1382c     F4 FF 9F CD |  if_b	jmp	#LR__1770
13830                 | LR__1771
13830     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
13834     C2 01 00 AF 
13838     00 12 06 A6 |  if_e	mov	arg01, ##230400
1383c     80 FF BF AD |  if_e	call	#__system___setbaud
13840     3E 1E 26 FC | 	wypin	local01, #62
13844     01 FA 05 F6 | 	mov	result1, #1
13848     A7 F0 03 F6 | 	mov	ptra, fp
1384c     B2 00 A0 FD | 	call	#popregs_
13850                 | __system___txraw_ret
13850     2D 00 64 FD | 	ret
13854                 | 
13854                 | __system___rxraw
13854     0D 4A 05 F6 | 	mov	COUNT_, #13
13858     A8 00 A0 FD | 	call	#pushregs_
1385c     09 1F 02 F6 | 	mov	local01, arg01
13860     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
13864     C2 01 00 AF 
13868     00 12 06 A6 |  if_e	mov	arg01, ##230400
1386c     50 FF BF AD |  if_e	call	#__system___setbaud
13870     00 1E 0E F2 | 	cmp	local01, #0 wz
13874     20 00 90 AD |  if_e	jmp	#LR__1780
13878     14 22 06 FB | 	rdlong	local03, #20
1387c     0A 22 46 F0 | 	shr	local03, #10
13880     11 1F 02 FD | 	qmul	local01, local03
13884     1A FA 61 FD | 	getct	result1
13888     18 24 62 FD | 	getqx	local04
1388c     12 FB 01 F1 | 	add	result1, local04
13890     FD 26 02 F6 | 	mov	local05, result1
13894     04 00 90 FD | 	jmp	#LR__1781
13898                 | LR__1780
13898     00 26 06 F6 | 	mov	local05, #0
1389c                 | LR__1781
1389c     01 28 66 F6 | 	neg	local06, #1
138a0     3F 2A 06 F6 | 	mov	local07, #63
138a4     00 2C 06 F6 | 	mov	local08, #0
138a8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
138ac     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
138b0     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
138b4                 | LR__1782
138b4     08 2E 16 F4 | 	testb	local09, #8 wc
138b8     09 2E 76 F4 | 	testbn	local09, #9 andc
138bc     0A 2E 46 F0 | 	shr	local09, #10
138c0     01 2C 06 C6 |  if_b	mov	local08, #1
138c4     40 7E 6C 3D |  if_ae	testp	#63 wz
138c8     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
138cc     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
138d0     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
138d4                 | LR__1783
138d4     00 20 06 F6 | 	mov	local02, #0
138d8     00 2C 0E F2 | 	cmp	local08, #0 wz
138dc     01 20 66 56 |  if_ne	neg	local02, #1
138e0     00 30 06 F6 | 	mov	local10, #0
138e4     00 22 06 F6 | 	mov	local03, #0
138e8     00 1E 0E F2 | 	cmp	local01, #0 wz
138ec     01 22 66 56 |  if_ne	neg	local03, #1
138f0     00 24 06 F6 | 	mov	local04, #0
138f4     00 32 06 F6 | 	mov	local11, #0
138f8     1A FA 61 FD | 	getct	result1
138fc     FD 34 02 F6 | 	mov	local12, result1
13900     1A 37 02 F6 | 	mov	local13, local12
13904     13 37 82 F1 | 	sub	local13, local05
13908     00 36 56 F2 | 	cmps	local13, #0 wc
1390c     00 32 26 C6 |  if_b	not	local11, #0
13910     00 32 0E F2 | 	cmp	local11, #0 wz
13914     00 24 26 56 |  if_ne	not	local04, #0
13918     12 23 CA F7 | 	test	local03, local04 wz
1391c     00 30 26 56 |  if_ne	not	local10, #0
13920     18 21 4A F5 | 	or	local02, local10 wz
13924     8C FF 9F AD |  if_e	jmp	#LR__1782
13928     00 2C 0E F2 | 	cmp	local08, #0 wz
1392c     17 29 02 56 |  if_ne	mov	local06, local09
13930     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
13934     04 E8 05 F1 | 	add	ptr___system__dat__, #4
13938     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1393c     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
13940     14 FB 01 F6 | 	mov	result1, local06
13944     A7 F0 03 F6 | 	mov	ptra, fp
13948     B2 00 A0 FD | 	call	#popregs_
1394c                 | __system___rxraw_ret
1394c     2D 00 64 FD | 	ret
13950                 | 
13950                 | __system___getus
13950     1A FC 71 FD | 	getct	result2 wc
13954     1A 00 62 FD | 	getct	_var01
13958     10 E8 05 F1 | 	add	ptr___system__dat__, #16
1395c     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
13960     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
13964     20 00 90 5D |  if_ne	jmp	#LR__1790
13968     14 02 06 FB | 	rdlong	_var02, #20
1396c     A1 07 00 FF 
13970     40 02 16 FD | 	qdiv	_var02, ##1000000
13974     10 E8 05 F1 | 	add	ptr___system__dat__, #16
13978     18 FA 61 FD | 	getqx	result1
1397c     FD 02 02 F6 | 	mov	_var02, result1
13980     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
13984     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
13988                 | LR__1790
13988     01 FD 11 FD | 	qdiv	result2, _var02
1398c     19 FC 61 FD | 	getqy	result2
13990     28 FC 61 FD | 	setq	result2
13994     01 01 12 FD | 	qdiv	_var01, _var02
13998     18 FA 61 FD | 	getqx	result1
1399c                 | __system___getus_ret
1399c     2D 00 64 FD | 	ret
139a0                 | 
139a0                 | __system____builtin_memmove
139a0     09 01 02 F6 | 	mov	_var01, arg01
139a4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
139a8     10 00 90 CD |  if_b	jmp	#LR__1800
139ac     0A 03 02 F6 | 	mov	_var02, arg02
139b0     0B 03 02 F1 | 	add	_var02, arg03
139b4     01 13 52 F2 | 	cmps	arg01, _var02 wc
139b8     48 00 90 CD |  if_b	jmp	#LR__1806
139bc                 | LR__1800
139bc     0B 05 02 F6 | 	mov	_var03, arg03
139c0     02 04 4E F0 | 	shr	_var03, #2 wz
139c4     18 00 90 AD |  if_e	jmp	#LR__1805
139c8     97 0A 48 FB | 	callpa	#(@LR__1803-@LR__1801)>>2,fcache_load_ptr_
139cc                 | LR__1801
139cc     02 09 D8 FC | 	rep	@LR__1804, _var03
139d0                 | LR__1802
139d0     0A 05 02 FB | 	rdlong	_var03, arg02
139d4     09 05 62 FC | 	wrlong	_var03, arg01
139d8     04 12 06 F1 | 	add	arg01, #4
139dc     04 14 06 F1 | 	add	arg02, #4
139e0                 | LR__1803
139e0                 | LR__1804
139e0                 | LR__1805
139e0     02 16 CE F7 | 	test	arg03, #2 wz
139e4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
139e8     09 03 52 5C |  if_ne	wrword	_var02, arg01
139ec     02 12 06 51 |  if_ne	add	arg01, #2
139f0     02 14 06 51 |  if_ne	add	arg02, #2
139f4     01 16 CE F7 | 	test	arg03, #1 wz
139f8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
139fc     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
13a00     28 00 90 FD | 	jmp	#LR__1812
13a04                 | LR__1806
13a04     0B 13 02 F1 | 	add	arg01, arg03
13a08     0B 15 02 F1 | 	add	arg02, arg03
13a0c     0B 07 0A F6 | 	mov	_var04, arg03 wz
13a10     18 00 90 AD |  if_e	jmp	#LR__1811
13a14     97 0A 48 FB | 	callpa	#(@LR__1809-@LR__1807)>>2,fcache_load_ptr_
13a18                 | LR__1807
13a18     03 09 D8 FC | 	rep	@LR__1810, _var04
13a1c                 | LR__1808
13a1c     01 12 86 F1 | 	sub	arg01, #1
13a20     01 14 86 F1 | 	sub	arg02, #1
13a24     0A 03 C2 FA | 	rdbyte	_var02, arg02
13a28     09 03 42 FC | 	wrbyte	_var02, arg01
13a2c                 | LR__1809
13a2c                 | LR__1810
13a2c                 | LR__1811
13a2c                 | LR__1812
13a2c     00 FB 01 F6 | 	mov	result1, _var01
13a30                 | __system____builtin_memmove_ret
13a30     2D 00 64 FD | 	ret
13a34                 | 
13a34                 | __system____builtin_strcpy
13a34     09 01 02 F6 | 	mov	_var01, arg01
13a38     97 0A 48 FB | 	callpa	#(@LR__1821-@LR__1820)>>2,fcache_load_ptr_
13a3c                 | LR__1820
13a3c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
13a40     09 FB 41 FC | 	wrbyte	result1, arg01
13a44     01 14 06 F1 | 	add	arg02, #1
13a48     01 12 06 F1 | 	add	arg01, #1
13a4c     EC FF 9F 5D |  if_ne	jmp	#LR__1820
13a50                 | LR__1821
13a50     00 FB 01 F6 | 	mov	result1, _var01
13a54                 | __system____builtin_strcpy_ret
13a54     2D 00 64 FD | 	ret
13a58                 | 
13a58                 | __system____topofstack
13a58     00 4A 05 F6 | 	mov	COUNT_, #0
13a5c     A8 00 A0 FD | 	call	#pushregs_
13a60     08 F0 07 F1 | 	add	ptra, #8
13a64     04 4E 05 F1 | 	add	fp, #4
13a68     A7 12 62 FC | 	wrlong	arg01, fp
13a6c     A7 FA 01 F6 | 	mov	result1, fp
13a70     04 4E 85 F1 | 	sub	fp, #4
13a74     A7 F0 03 F6 | 	mov	ptra, fp
13a78     B2 00 A0 FD | 	call	#popregs_
13a7c                 | __system____topofstack_ret
13a7c     2D 00 64 FD | 	ret
13a80                 | 
13a80                 | __system___lockmem
13a80     00 FA 05 F6 | 	mov	result1, #0
13a84     01 FA 61 FD | 	cogid	result1
13a88     00 FB 05 F1 | 	add	result1, #256
13a8c                 | LR__1830
13a8c     09 01 0A FB | 	rdlong	_var01, arg01 wz
13a90     09 FB 61 AC |  if_e	wrlong	result1, arg01
13a94     09 01 02 AB |  if_e	rdlong	_var01, arg01
13a98     09 01 02 AB |  if_e	rdlong	_var01, arg01
13a9c     FD 00 0A F2 | 	cmp	_var01, result1 wz
13aa0     E8 FF 9F 5D |  if_ne	jmp	#LR__1830
13aa4                 | __system___lockmem_ret
13aa4     2D 00 64 FD | 	ret
13aa8                 | 
13aa8                 | __system___string_cmp
13aa8     97 14 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
13aac                 | LR__1840
13aac     09 01 C2 FA | 	rdbyte	_var01, arg01
13ab0     0A 03 C2 FA | 	rdbyte	_var02, arg02
13ab4     00 05 02 F6 | 	mov	_var03, _var01
13ab8     01 05 8A F1 | 	sub	_var03, _var02 wz
13abc     01 12 06 F1 | 	add	arg01, #1
13ac0     01 14 06 F1 | 	add	arg02, #1
13ac4     0C 00 90 5D |  if_ne	jmp	#LR__1842
13ac8     00 00 0E F2 | 	cmp	_var01, #0 wz
13acc     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
13ad0     D8 FF 9F 5D |  if_ne	jmp	#LR__1840
13ad4                 | LR__1841
13ad4                 | LR__1842
13ad4     02 FB 01 F6 | 	mov	result1, _var03
13ad8                 | __system___string_cmp_ret
13ad8     2D 00 64 FD | 	ret
13adc                 | 
13adc                 | __system___string_concat
13adc     05 4A 05 F6 | 	mov	COUNT_, #5
13ae0     A8 00 A0 FD | 	call	#pushregs_
13ae4     09 1F 02 F6 | 	mov	local01, arg01
13ae8     0A 21 02 F6 | 	mov	local02, arg02
13aec     0F 13 02 F6 | 	mov	arg01, local01
13af0     09 23 02 F6 | 	mov	local03, arg01
13af4     97 06 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
13af8                 | LR__1850
13af8     11 FB C9 FA | 	rdbyte	result1, local03 wz
13afc     01 22 06 51 |  if_ne	add	local03, #1
13b00     F4 FF 9F 5D |  if_ne	jmp	#LR__1850
13b04                 | LR__1851
13b04     09 23 82 F1 | 	sub	local03, arg01
13b08     11 25 02 F6 | 	mov	local04, local03
13b0c     10 13 02 F6 | 	mov	arg01, local02
13b10     09 23 02 F6 | 	mov	local03, arg01
13b14     97 06 48 FB | 	callpa	#(@LR__1853-@LR__1852)>>2,fcache_load_ptr_
13b18                 | LR__1852
13b18     11 FB C9 FA | 	rdbyte	result1, local03 wz
13b1c     01 22 06 51 |  if_ne	add	local03, #1
13b20     F4 FF 9F 5D |  if_ne	jmp	#LR__1852
13b24                 | LR__1853
13b24     09 23 82 F1 | 	sub	local03, arg01
13b28     12 13 02 F6 | 	mov	arg01, local04
13b2c     11 13 02 F1 | 	add	arg01, local03
13b30     01 12 06 F1 | 	add	arg01, #1
13b34     E8 38 B0 FD | 	call	#__system___gc_alloc_managed
13b38     FD 26 0A F6 | 	mov	local05, result1 wz
13b3c     28 00 90 AD |  if_e	jmp	#LR__1854
13b40     13 13 02 F6 | 	mov	arg01, local05
13b44     0F 15 02 F6 | 	mov	arg02, local01
13b48     12 17 02 F6 | 	mov	arg03, local04
13b4c     50 FE BF FD | 	call	#__system____builtin_memmove
13b50     13 13 02 F6 | 	mov	arg01, local05
13b54     12 13 02 F1 | 	add	arg01, local04
13b58     01 22 06 F1 | 	add	local03, #1
13b5c     10 15 02 F6 | 	mov	arg02, local02
13b60     11 17 02 F6 | 	mov	arg03, local03
13b64     38 FE BF FD | 	call	#__system____builtin_memmove
13b68                 | LR__1854
13b68     13 FB 01 F6 | 	mov	result1, local05
13b6c     A7 F0 03 F6 | 	mov	ptra, fp
13b70     B2 00 A0 FD | 	call	#popregs_
13b74                 | __system___string_concat_ret
13b74     2D 00 64 FD | 	ret
13b78                 | 
13b78                 | __system___tx
13b78     02 4A 05 F6 | 	mov	COUNT_, #2
13b7c     A8 00 A0 FD | 	call	#pushregs_
13b80     09 1F 02 F6 | 	mov	local01, arg01
13b84     0A 1E 0E F2 | 	cmp	local01, #10 wz
13b88     18 00 90 5D |  if_ne	jmp	#LR__1860
13b8c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
13b90     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
13b94     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
13b98     02 20 CE F7 | 	test	local02, #2 wz
13b9c     0D 12 06 56 |  if_ne	mov	arg01, #13
13ba0     70 FC BF 5D |  if_ne	call	#__system___txraw
13ba4                 | LR__1860
13ba4     0F 13 02 F6 | 	mov	arg01, local01
13ba8     68 FC BF FD | 	call	#__system___txraw
13bac     A7 F0 03 F6 | 	mov	ptra, fp
13bb0     B2 00 A0 FD | 	call	#popregs_
13bb4                 | __system___tx_ret
13bb4     2D 00 64 FD | 	ret
13bb8                 | 
13bb8                 | __system___rx
13bb8     01 4A 05 F6 | 	mov	COUNT_, #1
13bbc     A8 00 A0 FD | 	call	#pushregs_
13bc0                 | LR__1870
13bc0     00 12 06 F6 | 	mov	arg01, #0
13bc4     8C FC BF FD | 	call	#__system___rxraw
13bc8     FD 1E 02 F6 | 	mov	local01, result1
13bcc     FF FF 7F FF 
13bd0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
13bd4     E8 FF 9F AD |  if_e	jmp	#LR__1870
13bd8     0D 1E 0E F2 | 	cmp	local01, #13 wz
13bdc     14 00 90 5D |  if_ne	jmp	#LR__1871
13be0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
13be4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
13be8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
13bec     02 FA CD F7 | 	test	result1, #2 wz
13bf0     0A 1E 06 56 |  if_ne	mov	local01, #10
13bf4                 | LR__1871
13bf4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
13bf8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
13bfc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
13c00     01 12 CE F7 | 	test	arg01, #1 wz
13c04     1C 00 90 AD |  if_e	jmp	#LR__1874
13c08     7F 1E 0E F2 | 	cmp	local01, #127 wz
13c0c     0C 00 90 5D |  if_ne	jmp	#LR__1872
13c10     08 12 06 F6 | 	mov	arg01, #8
13c14     60 FF BF FD | 	call	#__system___tx
13c18     08 00 90 FD | 	jmp	#LR__1873
13c1c                 | LR__1872
13c1c     0F 13 02 F6 | 	mov	arg01, local01
13c20     54 FF BF FD | 	call	#__system___tx
13c24                 | LR__1873
13c24                 | LR__1874
13c24     0F FB 01 F6 | 	mov	result1, local01
13c28     A7 F0 03 F6 | 	mov	ptra, fp
13c2c     B2 00 A0 FD | 	call	#popregs_
13c30                 | __system___rx_ret
13c30     2D 00 64 FD | 	ret
13c34                 | 
13c34                 | __system___pinwrite
13c34     09 01 02 F6 | 	mov	_var01, arg01
13c38     1F 00 06 F5 | 	and	_var01, #31
13c3c     20 12 CE F7 | 	test	arg01, #32 wz
13c40     06 12 46 F0 | 	shr	arg01, #6
13c44     09 13 CA F9 | 	bmask	arg01, arg01
13c48     00 13 62 F0 | 	shl	arg01, _var01
13c4c     00 15 62 F0 | 	shl	arg02, _var01
13c50     1C 00 90 AD |  if_e	jmp	#LR__1880
13c54     09 F7 43 F5 | 	or	dirb, arg01
13c58     FD 01 02 F6 | 	mov	_var01, outb
13c5c     09 01 22 F5 | 	andn	_var01, arg01
13c60     09 15 02 F5 | 	and	arg02, arg01
13c64     0A 01 42 F5 | 	or	_var01, arg02
13c68     00 FB 03 F6 | 	mov	outb, _var01
13c6c     18 00 90 FD | 	jmp	#LR__1881
13c70                 | LR__1880
13c70     09 F5 43 F5 | 	or	dira, arg01
13c74     FC 01 02 F6 | 	mov	_var01, outa
13c78     09 01 22 F5 | 	andn	_var01, arg01
13c7c     09 15 02 F5 | 	and	arg02, arg01
13c80     0A 01 42 F5 | 	or	_var01, arg02
13c84     00 F9 03 F6 | 	mov	outa, _var01
13c88                 | LR__1881
13c88                 | __system___pinwrite_ret
13c88     2D 00 64 FD | 	ret
13c8c                 | 
13c8c                 | __system___waitms
13c8c     09 01 02 F6 | 	mov	_var01, arg01
13c90     1A 02 62 FD | 	getct	_var02
13c94     14 04 06 FB | 	rdlong	_var03, #20
13c98     97 14 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
13c9c                 | LR__1890
13c9c     01 00 00 FF 
13ca0     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
13ca4     1C 00 90 CD |  if_b	jmp	#LR__1892
13ca8     02 03 02 F1 | 	add	_var02, _var03
13cac     01 13 02 F6 | 	mov	arg01, _var02
13cb0     00 12 66 FA | 	addct1	arg01, #0
13cb4     24 22 60 FD | 	waitct1
13cb8     01 00 00 FF 
13cbc     E8 01 86 F1 | 	sub	_var01, ##1000
13cc0     D8 FF 9F FD | 	jmp	#LR__1890
13cc4                 | LR__1891
13cc4                 | LR__1892
13cc4     01 00 56 F2 | 	cmps	_var01, #1 wc
13cc8     28 00 90 CD |  if_b	jmp	#LR__1893
13ccc     02 01 02 FD | 	qmul	_var01, _var03
13cd0     01 00 00 FF 
13cd4     E8 17 06 F6 | 	mov	arg03, ##1000
13cd8     19 FA 61 FD | 	getqy	result1
13cdc     18 12 62 FD | 	getqx	arg01
13ce0     28 FA 61 FD | 	setq	result1
13ce4     0B 13 12 FD | 	qdiv	arg01, arg03
13ce8     18 12 62 FD | 	getqx	arg01
13cec     01 13 62 FA | 	addct1	arg01, _var02
13cf0     24 22 60 FD | 	waitct1
13cf4                 | LR__1893
13cf4                 | __system___waitms_ret
13cf4     2D 00 64 FD | 	ret
13cf8                 | 
13cf8                 | __system___waitus
13cf8     09 01 02 F6 | 	mov	_var01, arg01
13cfc     1A 02 62 FD | 	getct	_var02
13d00     14 04 06 FB | 	rdlong	_var03, #20
13d04     97 14 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
13d08                 | LR__1900
13d08     A1 07 00 FF 
13d0c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
13d10     1C 00 90 CD |  if_b	jmp	#LR__1902
13d14     02 03 02 F1 | 	add	_var02, _var03
13d18     01 13 02 F6 | 	mov	arg01, _var02
13d1c     00 12 66 FA | 	addct1	arg01, #0
13d20     24 22 60 FD | 	waitct1
13d24     A1 07 00 FF 
13d28     40 00 86 F1 | 	sub	_var01, ##1000000
13d2c     D8 FF 9F FD | 	jmp	#LR__1900
13d30                 | LR__1901
13d30                 | LR__1902
13d30     01 00 56 F2 | 	cmps	_var01, #1 wc
13d34     28 00 90 CD |  if_b	jmp	#LR__1903
13d38     02 01 02 FD | 	qmul	_var01, _var03
13d3c     A1 07 00 FF 
13d40     40 16 06 F6 | 	mov	arg03, ##1000000
13d44     19 FA 61 FD | 	getqy	result1
13d48     18 12 62 FD | 	getqx	arg01
13d4c     28 FA 61 FD | 	setq	result1
13d50     0B 13 12 FD | 	qdiv	arg01, arg03
13d54     18 FA 61 FD | 	getqx	result1
13d58     FD 02 62 FA | 	addct1	_var02, result1
13d5c     24 22 60 FD | 	waitct1
13d60                 | LR__1903
13d60                 | __system___waitus_ret
13d60     2D 00 64 FD | 	ret
13d64                 | 
13d64                 | __system___mount
13d64     0B 4A 05 F6 | 	mov	COUNT_, #11
13d68     A8 00 A0 FD | 	call	#pushregs_
13d6c     09 1F 02 F6 | 	mov	local01, arg01
13d70     0A 21 0A F6 | 	mov	local02, arg02 wz
13d74     01 22 66 F6 | 	neg	local03, #1
13d78     01 FA 65 A6 |  if_e	neg	result1, #1
13d7c     98 02 90 AD |  if_e	jmp	#LR__1925
13d80     0F FB C1 FA | 	rdbyte	result1, local01
13d84     2F FA 0D F2 | 	cmp	result1, #47 wz
13d88     28 00 90 5D |  if_ne	jmp	#LR__1912
13d8c     0F 13 02 F6 | 	mov	arg01, local01
13d90     09 25 02 F6 | 	mov	local04, arg01
13d94     97 06 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
13d98                 | LR__1910
13d98     12 FB C9 FA | 	rdbyte	result1, local04 wz
13d9c     01 24 06 51 |  if_ne	add	local04, #1
13da0     F4 FF 9F 5D |  if_ne	jmp	#LR__1910
13da4                 | LR__1911
13da4     09 25 82 F1 | 	sub	local04, arg01
13da8     12 FB 01 F6 | 	mov	result1, local04
13dac     10 FA 55 F2 | 	cmps	result1, #16 wc
13db0     14 00 90 CD |  if_b	jmp	#LR__1913
13db4                 | LR__1912
13db4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
13db8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
13dbc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
13dc0     01 FA 65 F6 | 	neg	result1, #1
13dc4     50 02 90 FD | 	jmp	#LR__1925
13dc8                 | LR__1913
13dc8     00 26 06 F6 | 	mov	local05, #0
13dcc                 | LR__1914
13dcc     04 26 56 F2 | 	cmps	local05, #4 wc
13dd0     B0 00 90 3D |  if_ae	jmp	#LR__1919
13dd4     13 13 02 F6 | 	mov	arg01, local05
13dd8     02 12 66 F0 | 	shl	arg01, #2
13ddc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13de0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
13de4     09 FB 09 FB | 	rdlong	result1, arg01 wz
13de8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13dec     00 22 56 A2 |  if_e	cmps	local03, #0 wc
13df0     13 23 02 86 |  if_c_and_z	mov	local03, local05
13df4     84 00 90 8D |  if_c_and_z	jmp	#LR__1918
13df8     13 13 02 F6 | 	mov	arg01, local05
13dfc     02 12 66 F0 | 	shl	arg01, #2
13e00     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13e04     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
13e08     09 13 02 FB | 	rdlong	arg01, arg01
13e0c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13e10     09 25 02 F6 | 	mov	local04, arg01
13e14     97 06 48 FB | 	callpa	#(@LR__1916-@LR__1915)>>2,fcache_load_ptr_
13e18                 | LR__1915
13e18     12 FB C9 FA | 	rdbyte	result1, local04 wz
13e1c     01 24 06 51 |  if_ne	add	local04, #1
13e20     F4 FF 9F 5D |  if_ne	jmp	#LR__1915
13e24                 | LR__1916
13e24     09 25 82 F1 | 	sub	local04, arg01
13e28     12 29 02 F6 | 	mov	local06, local04
13e2c     14 13 02 F6 | 	mov	arg01, local06
13e30     0F 13 02 F1 | 	add	arg01, local01
13e34     09 FB C1 FA | 	rdbyte	result1, arg01
13e38     2F FA 0D F2 | 	cmp	result1, #47 wz
13e3c     14 2B 02 56 |  if_ne	mov	local07, local06
13e40     0F 2B 02 51 |  if_ne	add	local07, local01
13e44     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
13e48     30 00 90 5D |  if_ne	jmp	#LR__1917
13e4c     13 17 02 F6 | 	mov	arg03, local05
13e50     02 16 66 F0 | 	shl	arg03, #2
13e54     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13e58     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
13e5c     0B 15 02 FB | 	rdlong	arg02, arg03
13e60     0F 13 02 F6 | 	mov	arg01, local01
13e64     14 17 02 F6 | 	mov	arg03, local06
13e68     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13e6c     30 4A B0 FD | 	call	#__system__strncmp
13e70     00 FA 0D F2 | 	cmp	result1, #0 wz
13e74     13 23 02 A6 |  if_e	mov	local03, local05
13e78     08 00 90 AD |  if_e	jmp	#LR__1919
13e7c                 | LR__1917
13e7c                 | LR__1918
13e7c     01 26 06 F1 | 	add	local05, #1
13e80     48 FF 9F FD | 	jmp	#LR__1914
13e84                 | LR__1919
13e84     FF FF 7F FF 
13e88     FF 23 0E F2 | 	cmp	local03, ##-1 wz
13e8c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
13e90     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
13e94     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
13e98     01 FA 65 A6 |  if_e	neg	result1, #1
13e9c     78 01 90 AD |  if_e	jmp	#LR__1925
13ea0     11 27 02 F6 | 	mov	local05, local03
13ea4     13 2B 02 F6 | 	mov	local07, local05
13ea8     02 2A 66 F0 | 	shl	local07, #2
13eac     74 E8 05 F1 | 	add	ptr___system__dat__, #116
13eb0     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
13eb4     15 29 0A FB | 	rdlong	local06, local07 wz
13eb8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
13ebc     58 00 90 AD |  if_e	jmp	#LR__1920
13ec0     4C 28 06 F1 | 	add	local06, #76
13ec4     14 2B 0A FB | 	rdlong	local07, local06 wz
13ec8     4C 28 86 F1 | 	sub	local06, #76
13ecc     48 00 90 AD |  if_e	jmp	#LR__1920
13ed0     4C 28 06 F1 | 	add	local06, #76
13ed4     14 2B 02 FB | 	rdlong	local07, local06
13ed8     15 23 02 F6 | 	mov	local03, local07
13edc     13 2A 46 F7 | 	zerox	local07, #19
13ee0     14 22 46 F0 | 	shr	local03, #20
13ee4     02 22 66 F0 | 	shl	local03, #2
13ee8     ED 22 02 F1 | 	add	local03, __methods__
13eec     11 23 02 FB | 	rdlong	local03, local03
13ef0     13 29 02 F6 | 	mov	local06, local05
13ef4     02 28 66 F0 | 	shl	local06, #2
13ef8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13efc     F4 28 02 F1 | 	add	local06, ptr___system__dat__
13f00     14 13 02 FB | 	rdlong	arg01, local06
13f04     F2 28 02 F6 | 	mov	local06, objptr
13f08     15 E5 01 F6 | 	mov	objptr, local07
13f0c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13f10     2D 22 62 FD | 	call	local03
13f14     14 E5 01 F6 | 	mov	objptr, local06
13f18                 | LR__1920
13f18     13 2D 02 F6 | 	mov	local08, local05
13f1c     02 2C 66 F0 | 	shl	local08, #2
13f20     74 E8 05 F1 | 	add	ptr___system__dat__, #116
13f24     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
13f28     16 21 62 FC | 	wrlong	local02, local08
13f2c     00 20 0E F2 | 	cmp	local02, #0 wz
13f30     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
13f34     18 00 90 5D |  if_ne	jmp	#LR__1921
13f38     02 26 66 F0 | 	shl	local05, #2
13f3c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13f40     F4 26 02 F1 | 	add	local05, ptr___system__dat__
13f44     13 01 68 FC | 	wrlong	#0, local05
13f48     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13f4c     C4 00 90 FD | 	jmp	#LR__1924
13f50                 | LR__1921
13f50     13 2F 02 F6 | 	mov	local09, local05
13f54     04 2E 66 F0 | 	shl	local09, #4
13f58     24 E8 05 F1 | 	add	ptr___system__dat__, #36
13f5c     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
13f60     17 13 02 F6 | 	mov	arg01, local09
13f64     0F 15 02 F6 | 	mov	arg02, local01
13f68     10 16 06 F6 | 	mov	arg03, #16
13f6c     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
13f70     80 48 B0 FD | 	call	#__system__strncpy
13f74     48 20 06 F1 | 	add	local02, #72
13f78     10 2D 0A FB | 	rdlong	local08, local02 wz
13f7c     48 20 86 F1 | 	sub	local02, #72
13f80     7C 00 90 AD |  if_e	jmp	#LR__1923
13f84     48 20 06 F1 | 	add	local02, #72
13f88     10 2D 02 FB | 	rdlong	local08, local02
13f8c     16 31 02 F6 | 	mov	local10, local08
13f90     13 2C 46 F7 | 	zerox	local08, #19
13f94     14 30 46 F0 | 	shr	local10, #20
13f98     02 30 66 F0 | 	shl	local10, #2
13f9c     ED 30 02 F1 | 	add	local10, __methods__
13fa0     18 31 02 FB | 	rdlong	local10, local10
13fa4     17 13 02 F6 | 	mov	arg01, local09
13fa8     F2 32 02 F6 | 	mov	local11, objptr
13fac     16 E5 01 F6 | 	mov	objptr, local08
13fb0     2D 30 62 FD | 	call	local10
13fb4     19 E5 01 F6 | 	mov	objptr, local11
13fb8     FD 12 0A F6 | 	mov	arg01, result1 wz
13fbc     40 00 90 AD |  if_e	jmp	#LR__1922
13fc0     13 2D 02 F6 | 	mov	local08, local05
13fc4     02 2C 66 F0 | 	shl	local08, #2
13fc8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
13fcc     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
13fd0     16 01 68 FC | 	wrlong	#0, local08
13fd4     02 26 66 F0 | 	shl	local05, #2
13fd8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
13fdc     F4 26 02 F1 | 	add	local05, ptr___system__dat__
13fe0     13 01 68 FC | 	wrlong	#0, local05
13fe4     09 13 6A F6 | 	neg	arg01, arg01 wz
13fe8     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
13fec     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
13ff0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
13ff4     01 FA 65 56 |  if_ne	neg	result1, #1
13ff8     00 FA 05 A6 |  if_e	mov	result1, #0
13ffc     18 00 90 FD | 	jmp	#LR__1925
14000                 | LR__1922
14000                 | LR__1923
14000     02 26 66 F0 | 	shl	local05, #2
14004     64 E8 05 F1 | 	add	ptr___system__dat__, #100
14008     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1400c     13 2F 62 FC | 	wrlong	local09, local05
14010     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
14014                 | LR__1924
14014     00 FA 05 F6 | 	mov	result1, #0
14018                 | LR__1925
14018     A7 F0 03 F6 | 	mov	ptra, fp
1401c     B2 00 A0 FD | 	call	#popregs_
14020                 | __system___mount_ret
14020     2D 00 64 FD | 	ret
14024                 | 
14024                 | __system___chdir
14024     00 4A 05 F6 | 	mov	COUNT_, #0
14028     A8 00 A0 FD | 	call	#pushregs_
1402c     40 F0 07 F1 | 	add	ptra, #64
14030     04 4E 05 F1 | 	add	fp, #4
14034     A7 12 62 FC | 	wrlong	arg01, fp
14038     04 4E 05 F1 | 	add	fp, #4
1403c     A7 14 02 F6 | 	mov	arg02, fp
14040     08 4E 85 F1 | 	sub	fp, #8
14044     50 44 B0 FD | 	call	#__system__stat
14048     3C 4E 05 F1 | 	add	fp, #60
1404c     A7 FA 61 FC | 	wrlong	result1, fp
14050     3C 4E 85 F1 | 	sub	fp, #60
14054     00 FA 0D F2 | 	cmp	result1, #0 wz
14058     3C 4E 05 51 |  if_ne	add	fp, #60
1405c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
14060     3C 4E 85 51 |  if_ne	sub	fp, #60
14064     BC 00 90 5D |  if_ne	jmp	#LR__1932
14068     10 4E 05 F1 | 	add	fp, #16
1406c     A7 12 02 FB | 	rdlong	arg01, fp
14070     10 4E 85 F1 | 	sub	fp, #16
14074     78 00 00 FF 
14078     00 12 06 F5 | 	and	arg01, ##61440
1407c     08 00 00 FF 
14080     00 12 0E F2 | 	cmp	arg01, ##4096 wz
14084     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
14088     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1408c     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
14090     01 FA 65 56 |  if_ne	neg	result1, #1
14094     8C 00 90 5D |  if_ne	jmp	#LR__1932
14098     04 4E 05 F1 | 	add	fp, #4
1409c     A7 16 02 FB | 	rdlong	arg03, fp
140a0     04 4E 85 F1 | 	sub	fp, #4
140a4     0B 17 C2 FA | 	rdbyte	arg03, arg03
140a8     2F 16 0E F2 | 	cmp	arg03, #47 wz
140ac     24 00 90 5D |  if_ne	jmp	#LR__1930
140b0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
140b4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
140b8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
140bc     04 4E 05 F1 | 	add	fp, #4
140c0     A7 14 02 FB | 	rdlong	arg02, fp
140c4     04 4E 85 F1 | 	sub	fp, #4
140c8     00 17 06 F6 | 	mov	arg03, #256
140cc     24 47 B0 FD | 	call	#__system__strncpy
140d0     4C 00 90 FD | 	jmp	#LR__1931
140d4                 | LR__1930
140d4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
140d8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
140dc     38 4E 05 F1 | 	add	fp, #56
140e0     A7 12 62 FC | 	wrlong	arg01, fp
140e4     38 4E 85 F1 | 	sub	fp, #56
140e8     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
140ec     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
140f0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
140f4     00 17 06 F6 | 	mov	arg03, #256
140f8     F8 46 B0 FD | 	call	#__system__strncpy
140fc     38 4E 05 F1 | 	add	fp, #56
14100     A7 12 02 FB | 	rdlong	arg01, fp
14104     34 4E 85 F1 | 	sub	fp, #52
14108     A7 14 02 FB | 	rdlong	arg02, fp
1410c     04 4E 85 F1 | 	sub	fp, #4
14110     84 E8 05 F1 | 	add	ptr___system__dat__, #132
14114     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
14118     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1411c     10 00 B0 FD | 	call	#__system____getvfsforfile
14120                 | LR__1931
14120     00 FA 05 F6 | 	mov	result1, #0
14124                 | LR__1932
14124     A7 F0 03 F6 | 	mov	ptra, fp
14128     B2 00 A0 FD | 	call	#popregs_
1412c                 | __system___chdir_ret
1412c     2D 00 64 FD | 	ret
14130                 | 
14130                 | __system____getvfsforfile
14130     0E 4A 05 F6 | 	mov	COUNT_, #14
14134     A8 00 A0 FD | 	call	#pushregs_
14138     09 1F 02 F6 | 	mov	local01, arg01
1413c     0A 21 02 F6 | 	mov	local02, arg02
14140     0B 23 02 F6 | 	mov	local03, arg03
14144     97 10 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
14148                 | LR__1940
14148     10 FB C1 FA | 	rdbyte	result1, local02
1414c     2F FA 0D F2 | 	cmp	result1, #47 wz
14150     01 20 06 A1 |  if_e	add	local02, #1
14154     10 25 C2 AA |  if_e	rdbyte	local04, local02
14158     01 20 86 A1 |  if_e	sub	local02, #1
1415c     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
14160     01 20 06 A1 |  if_e	add	local02, #1
14164     E0 FF 9F AD |  if_e	jmp	#LR__1940
14168                 | LR__1941
14168     10 25 C2 FA | 	rdbyte	local04, local02
1416c     2F 24 0E F2 | 	cmp	local04, #47 wz
14170     14 00 90 5D |  if_ne	jmp	#LR__1942
14174     0F 13 02 F6 | 	mov	arg01, local01
14178     10 15 02 F6 | 	mov	arg02, local02
1417c     00 17 06 F6 | 	mov	arg03, #256
14180     70 46 B0 FD | 	call	#__system__strncpy
14184     7C 00 90 FD | 	jmp	#LR__1944
14188                 | LR__1942
14188     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1418c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
14190     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
14194     0F 13 02 F6 | 	mov	arg01, local01
14198     00 17 06 F6 | 	mov	arg03, #256
1419c     54 46 B0 FD | 	call	#__system__strncpy
141a0     10 25 CA FA | 	rdbyte	local04, local02 wz
141a4     5C 00 90 AD |  if_e	jmp	#LR__1943
141a8     10 25 C2 FA | 	rdbyte	local04, local02
141ac     2E 24 0E F2 | 	cmp	local04, #46 wz
141b0     01 20 06 A1 |  if_e	add	local02, #1
141b4     10 27 C2 AA |  if_e	rdbyte	local05, local02
141b8     01 20 86 A1 |  if_e	sub	local02, #1
141bc     13 29 02 A6 |  if_e	mov	local06, local05
141c0     07 28 4E A7 |  if_e	zerox	local06, #7 wz
141c4     3C 00 90 AD |  if_e	jmp	#LR__1943
141c8     0F 27 C2 FA | 	rdbyte	local05, local01
141cc     2F 26 0E F2 | 	cmp	local05, #47 wz
141d0     01 1E 06 A1 |  if_e	add	local01, #1
141d4     0F 25 C2 AA |  if_e	rdbyte	local04, local01
141d8     01 1E 86 A1 |  if_e	sub	local01, #1
141dc     00 24 4E A2 |  if_e	cmps	local04, #0 wz
141e0     16 01 00 5F 
141e4     44 15 06 56 |  if_ne	mov	arg02, ##@LR__3980
141e8     0F 13 02 56 |  if_ne	mov	arg01, local01
141ec     00 17 06 56 |  if_ne	mov	arg03, #256
141f0     4C 46 B0 5D |  if_ne	call	#__system__strncat
141f4     0F 13 02 F6 | 	mov	arg01, local01
141f8     10 15 02 F6 | 	mov	arg02, local02
141fc     00 17 06 F6 | 	mov	arg03, #256
14200     3C 46 B0 FD | 	call	#__system__strncat
14204                 | LR__1943
14204                 | LR__1944
14204     0F 13 02 F6 | 	mov	arg01, local01
14208     F4 47 B0 FD | 	call	#__system___normalizeName
1420c     0F 25 CA FA | 	rdbyte	local04, local01 wz
14210     1C 00 90 AD |  if_e	jmp	#LR__1945
14214     0F 25 C2 FA | 	rdbyte	local04, local01
14218     2F 24 0E F2 | 	cmp	local04, #47 wz
1421c     01 1E 06 A1 |  if_e	add	local01, #1
14220     0F 29 C2 AA |  if_e	rdbyte	local06, local01
14224     01 1E 86 A1 |  if_e	sub	local01, #1
14228     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1422c     18 00 90 5D |  if_ne	jmp	#LR__1946
14230                 | LR__1945
14230     01 00 00 FF 
14234     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
14238     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1423c     01 00 00 FF 
14240     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
14244     EC 01 90 FD | 	jmp	#LR__1960
14248                 | LR__1946
14248     00 2A 06 F6 | 	mov	local07, #0
1424c                 | LR__1947
1424c     04 2A 56 F2 | 	cmps	local07, #4 wc
14250     CC 01 90 3D |  if_ae	jmp	#LR__1959
14254     15 29 02 F6 | 	mov	local06, local07
14258     02 28 66 F0 | 	shl	local06, #2
1425c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
14260     F4 28 02 F1 | 	add	local06, ptr___system__dat__
14264     14 29 0A FB | 	rdlong	local06, local06 wz
14268     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1426c     A8 01 90 AD |  if_e	jmp	#LR__1958
14270     15 25 02 F6 | 	mov	local04, local07
14274     02 24 66 F0 | 	shl	local04, #2
14278     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1427c     F4 24 02 F1 | 	add	local04, ptr___system__dat__
14280     12 13 02 FB | 	rdlong	arg01, local04
14284     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
14288     09 2D 02 F6 | 	mov	local08, arg01
1428c     97 06 48 FB | 	callpa	#(@LR__1949-@LR__1948)>>2,fcache_load_ptr_
14290                 | LR__1948
14290     16 FB C9 FA | 	rdbyte	result1, local08 wz
14294     01 2C 06 51 |  if_ne	add	local08, #1
14298     F4 FF 9F 5D |  if_ne	jmp	#LR__1948
1429c                 | LR__1949
1429c     09 2D 82 F1 | 	sub	local08, arg01
142a0     16 2F 02 F6 | 	mov	local09, local08
142a4     17 25 02 F6 | 	mov	local04, local09
142a8     0F 25 02 F1 | 	add	local04, local01
142ac     12 29 C2 FA | 	rdbyte	local06, local04
142b0     2F 28 0E F2 | 	cmp	local06, #47 wz
142b4     17 31 02 56 |  if_ne	mov	local10, local09
142b8     0F 31 02 51 |  if_ne	add	local10, local01
142bc     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
142c0     54 01 90 5D |  if_ne	jmp	#LR__1957
142c4     15 17 02 F6 | 	mov	arg03, local07
142c8     02 16 66 F0 | 	shl	arg03, #2
142cc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
142d0     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
142d4     0B 15 02 FB | 	rdlong	arg02, arg03
142d8     17 17 02 F6 | 	mov	arg03, local09
142dc     0F 13 02 F6 | 	mov	arg01, local01
142e0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
142e4     B8 45 B0 FD | 	call	#__system__strncmp
142e8     00 FA 4D F2 | 	cmps	result1, #0 wz
142ec     28 01 90 5D |  if_ne	jmp	#LR__1957
142f0     15 33 02 F6 | 	mov	local11, local07
142f4     02 32 66 F0 | 	shl	local11, #2
142f8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
142fc     F4 32 02 F1 | 	add	local11, ptr___system__dat__
14300     19 35 02 FB | 	rdlong	local12, local11
14304     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
14308     97 22 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
1430c                 | LR__1950
1430c     17 29 02 F6 | 	mov	local06, local09
14310     01 28 06 F1 | 	add	local06, #1
14314     0F 29 02 F1 | 	add	local06, local01
14318     14 33 C2 FA | 	rdbyte	local11, local06
1431c     2E 32 0E F2 | 	cmp	local11, #46 wz
14320     2C 00 90 5D |  if_ne	jmp	#LR__1952
14324     17 33 02 F6 | 	mov	local11, local09
14328     02 32 06 F1 | 	add	local11, #2
1432c     0F 33 02 F1 | 	add	local11, local01
14330     19 31 C2 FA | 	rdbyte	local10, local11
14334     2F 30 0E F2 | 	cmp	local10, #47 wz
14338     17 37 02 56 |  if_ne	mov	local13, local09
1433c     02 36 06 51 |  if_ne	add	local13, #2
14340     0F 37 02 51 |  if_ne	add	local13, local01
14344     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
14348     01 2E 06 A1 |  if_e	add	local09, #1
1434c     BC FF 9F AD |  if_e	jmp	#LR__1950
14350                 | LR__1951
14350                 | LR__1952
14350     00 22 0E F2 | 	cmp	local03, #0 wz
14354     11 13 02 56 |  if_ne	mov	arg01, local03
14358     0F 15 02 56 |  if_ne	mov	arg02, local01
1435c     00 17 06 56 |  if_ne	mov	arg03, #256
14360     90 44 B0 5D |  if_ne	call	#__system__strncpy
14364     0F 15 02 F6 | 	mov	arg02, local01
14368     17 15 02 F1 | 	add	arg02, local09
1436c     01 14 06 F1 | 	add	arg02, #1
14370     0F 13 02 F6 | 	mov	arg01, local01
14374     BC F6 BF FD | 	call	#__system____builtin_strcpy
14378     0F 13 02 F6 | 	mov	arg01, local01
1437c     09 2D 02 F6 | 	mov	local08, arg01
14380     97 06 48 FB | 	callpa	#(@LR__1954-@LR__1953)>>2,fcache_load_ptr_
14384                 | LR__1953
14384     16 FB C9 FA | 	rdbyte	result1, local08 wz
14388     01 2C 06 51 |  if_ne	add	local08, #1
1438c     F4 FF 9F 5D |  if_ne	jmp	#LR__1953
14390                 | LR__1954
14390     09 2D 82 F1 | 	sub	local08, arg01
14394     16 2F 02 F6 | 	mov	local09, local08
14398                 | LR__1955
14398     01 2E 56 F2 | 	cmps	local09, #1 wc
1439c     70 00 90 CD |  if_b	jmp	#LR__1956
143a0     17 25 02 F6 | 	mov	local04, local09
143a4     0F 25 02 F1 | 	add	local04, local01
143a8     12 33 C2 FA | 	rdbyte	local11, local04
143ac     2F 32 0E F2 | 	cmp	local11, #47 wz
143b0     17 33 02 A6 |  if_e	mov	local11, local09
143b4     0F 33 02 A1 |  if_e	add	local11, local01
143b8     19 01 48 AC |  if_e	wrbyte	#0, local11
143bc     01 2E 86 A1 |  if_e	sub	local09, #1
143c0     D4 FF 9F AD |  if_e	jmp	#LR__1955
143c4     17 25 02 F6 | 	mov	local04, local09
143c8     0F 25 02 F1 | 	add	local04, local01
143cc     12 33 C2 FA | 	rdbyte	local11, local04
143d0     2E 32 0E F2 | 	cmp	local11, #46 wz
143d4     38 00 90 5D |  if_ne	jmp	#LR__1956
143d8     02 2E 56 F2 | 	cmps	local09, #2 wc
143dc     30 00 90 CD |  if_b	jmp	#LR__1956
143e0     17 39 02 F6 | 	mov	local14, local09
143e4     01 38 86 F1 | 	sub	local14, #1
143e8     0F 39 02 F1 | 	add	local14, local01
143ec     1C 27 C2 FA | 	rdbyte	local05, local14
143f0     2F 26 0E F2 | 	cmp	local05, #47 wz
143f4     18 00 90 5D |  if_ne	jmp	#LR__1956
143f8     17 25 02 F6 | 	mov	local04, local09
143fc     01 24 86 F1 | 	sub	local04, #1
14400     0F 25 02 F1 | 	add	local04, local01
14404     12 01 48 FC | 	wrbyte	#0, local04
14408     02 2E 86 F1 | 	sub	local09, #2
1440c     88 FF 9F FD | 	jmp	#LR__1955
14410                 | LR__1956
14410     1A FB 01 F6 | 	mov	result1, local12
14414     1C 00 90 FD | 	jmp	#LR__1960
14418                 | LR__1957
14418                 | LR__1958
14418     01 2A 06 F1 | 	add	local07, #1
1441c     2C FE 9F FD | 	jmp	#LR__1947
14420                 | LR__1959
14420     03 00 00 FF 
14424     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
14428     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1442c     03 00 00 FF 
14430     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
14434                 | LR__1960
14434     A7 F0 03 F6 | 	mov	ptra, fp
14438     B2 00 A0 FD | 	call	#popregs_
1443c                 | __system____getvfsforfile_ret
1443c     2D 00 64 FD | 	ret
14440                 | 
14440                 | __system___basic_open
14440     05 4A 05 F6 | 	mov	COUNT_, #5
14444     A8 00 A0 FD | 	call	#pushregs_
14448     0A 1F 02 F6 | 	mov	local01, arg02
1444c     0B 21 02 F6 | 	mov	local02, arg03
14450     0C 23 02 F6 | 	mov	local03, arg04
14454     00 24 06 F6 | 	mov	local04, #0
14458     70 43 B0 FD | 	call	#__system____getftab
1445c     FD 26 0A F6 | 	mov	local05, result1 wz
14460     18 00 90 5D |  if_ne	jmp	#LR__1970
14464     EE 12 02 F6 | 	mov	arg01, abortchain
14468     0C 14 06 F6 | 	mov	arg02, #12
1446c     01 16 06 F6 | 	mov	arg03, #1
14470     DA 00 A0 FD | 	call	#__longjmp
14474     01 FA 65 F6 | 	neg	result1, #1
14478     14 01 90 FD | 	jmp	#LR__1979
1447c                 | LR__1970
1447c     08 26 06 F1 | 	add	local05, #8
14480     13 FB 09 FB | 	rdlong	result1, local05 wz
14484     08 26 86 F1 | 	sub	local05, #8
14488     13 13 02 56 |  if_ne	mov	arg01, local05
1448c     90 3A B0 5D |  if_ne	call	#__system___closeraw
14490     00 1E 0E F2 | 	cmp	local01, #0 wz
14494     00 20 0E A2 |  if_e	cmp	local02, #0 wz
14498     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1449c     3C 00 90 AD |  if_e	jmp	#LR__1972
144a0     0C 12 06 F6 | 	mov	arg01, #12
144a4     78 2F B0 FD | 	call	#__system___gc_alloc_managed
144a8     FD 24 0A F6 | 	mov	local04, result1 wz
144ac     18 00 90 5D |  if_ne	jmp	#LR__1971
144b0     EE 12 02 F6 | 	mov	arg01, abortchain
144b4     07 14 06 F6 | 	mov	arg02, #7
144b8     01 16 06 F6 | 	mov	arg03, #1
144bc     DA 00 A0 FD | 	call	#__longjmp
144c0     01 FA 65 F6 | 	neg	result1, #1
144c4     C8 00 90 FD | 	jmp	#LR__1979
144c8                 | LR__1971
144c8     12 01 68 FC | 	wrlong	#0, local04
144cc     04 24 06 F1 | 	add	local04, #4
144d0     12 01 68 FC | 	wrlong	#0, local04
144d4     04 24 86 F1 | 	sub	local04, #4
144d8     13 25 62 FC | 	wrlong	local04, local05
144dc                 | LR__1972
144dc     00 1E 0E F2 | 	cmp	local01, #0 wz
144e0     20 00 90 AD |  if_e	jmp	#LR__1973
144e4     12 1F 62 FC | 	wrlong	local01, local04
144e8     12 FB 01 F6 | 	mov	result1, local04
144ec     00 58 02 FF 
144f0     00 FA 45 F5 | 	or	result1, ##78643200
144f4     1C 26 06 F1 | 	add	local05, #28
144f8     13 FB 61 FC | 	wrlong	result1, local05
144fc     1C 26 86 F1 | 	sub	local05, #28
14500     0C 00 90 FD | 	jmp	#LR__1974
14504                 | LR__1973
14504     1C 26 06 F1 | 	add	local05, #28
14508     13 01 68 FC | 	wrlong	#0, local05
1450c     1C 26 86 F1 | 	sub	local05, #28
14510                 | LR__1974
14510     00 20 0E F2 | 	cmp	local02, #0 wz
14514     28 00 90 AD |  if_e	jmp	#LR__1975
14518     04 24 06 F1 | 	add	local04, #4
1451c     12 21 62 FC | 	wrlong	local02, local04
14520     04 24 86 F1 | 	sub	local04, #4
14524     12 FB 01 F6 | 	mov	result1, local04
14528     00 60 02 FF 
1452c     00 FA 45 F5 | 	or	result1, ##79691776
14530     20 26 06 F1 | 	add	local05, #32
14534     13 FB 61 FC | 	wrlong	result1, local05
14538     20 26 86 F1 | 	sub	local05, #32
1453c     0C 00 90 FD | 	jmp	#LR__1976
14540                 | LR__1975
14540     20 26 06 F1 | 	add	local05, #32
14544     13 01 68 FC | 	wrlong	#0, local05
14548     20 26 86 F1 | 	sub	local05, #32
1454c                 | LR__1976
1454c     00 22 0E F2 | 	cmp	local03, #0 wz
14550     24 00 90 AD |  if_e	jmp	#LR__1977
14554     08 24 06 F1 | 	add	local04, #8
14558     12 23 62 FC | 	wrlong	local03, local04
1455c     08 24 86 F1 | 	sub	local04, #8
14560     00 68 02 FF 
14564     00 24 46 F5 | 	or	local04, ##80740352
14568     24 26 06 F1 | 	add	local05, #36
1456c     13 25 62 FC | 	wrlong	local04, local05
14570     24 26 86 F1 | 	sub	local05, #36
14574     0C 00 90 FD | 	jmp	#LR__1978
14578                 | LR__1977
14578     24 26 06 F1 | 	add	local05, #36
1457c     13 01 68 FC | 	wrlong	#0, local05
14580     24 26 86 F1 | 	sub	local05, #36
14584                 | LR__1978
14584     08 26 06 F1 | 	add	local05, #8
14588     13 0F 68 FC | 	wrlong	#7, local05
1458c     00 FA 05 F6 | 	mov	result1, #0
14590                 | LR__1979
14590     A7 F0 03 F6 | 	mov	ptra, fp
14594     B2 00 A0 FD | 	call	#popregs_
14598                 | __system___basic_open_ret
14598     2D 00 64 FD | 	ret
1459c                 | 
1459c                 | __system___basic_open_string
1459c     04 4A 05 F6 | 	mov	COUNT_, #4
145a0     A8 00 A0 FD | 	call	#pushregs_
145a4     0A 1F 02 F6 | 	mov	local01, arg02
145a8     0B 21 02 F6 | 	mov	local02, arg03
145ac     1C 42 B0 FD | 	call	#__system____getftab
145b0     FD 22 0A F6 | 	mov	local03, result1 wz
145b4     18 00 90 5D |  if_ne	jmp	#LR__1980
145b8     EE 12 02 F6 | 	mov	arg01, abortchain
145bc     0C 14 06 F6 | 	mov	arg02, #12
145c0     01 16 06 F6 | 	mov	arg03, #1
145c4     DA 00 A0 FD | 	call	#__longjmp
145c8     01 FA 65 F6 | 	neg	result1, #1
145cc     58 00 90 FD | 	jmp	#LR__1982
145d0                 | LR__1980
145d0     08 22 06 F1 | 	add	local03, #8
145d4     11 19 0A FB | 	rdlong	arg04, local03 wz
145d8     08 22 86 F1 | 	sub	local03, #8
145dc     11 13 02 56 |  if_ne	mov	arg01, local03
145e0     3C 39 B0 5D |  if_ne	call	#__system___closeraw
145e4     0F 15 02 F6 | 	mov	arg02, local01
145e8     10 17 02 F6 | 	mov	arg03, local02
145ec     11 13 02 F6 | 	mov	arg01, local03
145f0     B6 19 06 F6 | 	mov	arg04, #438
145f4     24 36 B0 FD | 	call	#__system___openraw
145f8     FD 24 02 F6 | 	mov	local04, result1
145fc     00 24 56 F2 | 	cmps	local04, #0 wc
14600     20 00 90 3D |  if_ae	jmp	#LR__1981
14604     20 E8 05 F1 | 	add	ptr___system__dat__, #32
14608     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1460c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
14610     EE 12 02 F6 | 	mov	arg01, abortchain
14614     01 16 06 F6 | 	mov	arg03, #1
14618     DA 00 A0 FD | 	call	#__longjmp
1461c     01 FA 65 F6 | 	neg	result1, #1
14620     04 00 90 FD | 	jmp	#LR__1982
14624                 | LR__1981
14624     12 FB 01 F6 | 	mov	result1, local04
14628                 | LR__1982
14628     A7 F0 03 F6 | 	mov	ptra, fp
1462c     B2 00 A0 FD | 	call	#popregs_
14630                 | __system___basic_open_string_ret
14630     2D 00 64 FD | 	ret
14634                 | 
14634                 | __system___basic_print_char
14634     03 4A 05 F6 | 	mov	COUNT_, #3
14638     A8 00 A0 FD | 	call	#pushregs_
1463c     0A 1F 02 F6 | 	mov	local01, arg02
14640     DC 48 B0 FD | 	call	#__system___gettxfunc
14644     FD 20 0A F6 | 	mov	local02, result1 wz
14648     00 FA 05 A6 |  if_e	mov	result1, #0
1464c     30 00 90 AD |  if_e	jmp	#LR__1990
14650     10 23 02 F6 | 	mov	local03, local02
14654     13 20 46 F7 | 	zerox	local02, #19
14658     14 22 46 F0 | 	shr	local03, #20
1465c     02 22 66 F0 | 	shl	local03, #2
14660     ED 22 02 F1 | 	add	local03, __methods__
14664     11 23 02 FB | 	rdlong	local03, local03
14668     0F 13 02 F6 | 	mov	arg01, local01
1466c     F2 1E 02 F6 | 	mov	local01, objptr
14670     10 E5 01 F6 | 	mov	objptr, local02
14674     2D 22 62 FD | 	call	local03
14678     0F E5 01 F6 | 	mov	objptr, local01
1467c     01 FA 05 F6 | 	mov	result1, #1
14680                 | LR__1990
14680     A7 F0 03 F6 | 	mov	ptra, fp
14684     B2 00 A0 FD | 	call	#popregs_
14688                 | __system___basic_print_char_ret
14688     2D 00 64 FD | 	ret
1468c                 | 
1468c                 | __system___basic_print_string
1468c     03 4A 05 F6 | 	mov	COUNT_, #3
14690     A8 00 A0 FD | 	call	#pushregs_
14694     0A 1F 02 F6 | 	mov	local01, arg02
14698     0B 21 02 F6 | 	mov	local02, arg03
1469c     80 48 B0 FD | 	call	#__system___gettxfunc
146a0     FD 22 0A F6 | 	mov	local03, result1 wz
146a4     00 FA 05 A6 |  if_e	mov	result1, #0
146a8     18 00 90 AD |  if_e	jmp	#LR__2000
146ac     00 1E 0E F2 | 	cmp	local01, #0 wz
146b0     00 FA 05 A6 |  if_e	mov	result1, #0
146b4     11 13 02 56 |  if_ne	mov	arg01, local03
146b8     10 15 02 56 |  if_ne	mov	arg02, local02
146bc     0F 17 02 56 |  if_ne	mov	arg03, local01
146c0     BC 01 B0 5D |  if_ne	call	#__system___fmtstr
146c4                 | LR__2000
146c4     A7 F0 03 F6 | 	mov	ptra, fp
146c8     B2 00 A0 FD | 	call	#popregs_
146cc                 | __system___basic_print_string_ret
146cc     2D 00 64 FD | 	ret
146d0                 | 
146d0                 | __system___basic_print_integer
146d0     04 4A 05 F6 | 	mov	COUNT_, #4
146d4     A8 00 A0 FD | 	call	#pushregs_
146d8     0A 1F 02 F6 | 	mov	local01, arg02
146dc     0B 21 02 F6 | 	mov	local02, arg03
146e0     0C 23 02 F6 | 	mov	local03, arg04
146e4     38 48 B0 FD | 	call	#__system___gettxfunc
146e8     FD 24 0A F6 | 	mov	local04, result1 wz
146ec     00 FA 05 A6 |  if_e	mov	result1, #0
146f0     12 13 02 56 |  if_ne	mov	arg01, local04
146f4     10 15 02 56 |  if_ne	mov	arg02, local02
146f8     0F 17 02 56 |  if_ne	mov	arg03, local01
146fc     11 19 02 56 |  if_ne	mov	arg04, local03
14700     68 02 B0 5D |  if_ne	call	#__system___fmtnum
14704     A7 F0 03 F6 | 	mov	ptra, fp
14708     B2 00 A0 FD | 	call	#popregs_
1470c                 | __system___basic_print_integer_ret
1470c     2D 00 64 FD | 	ret
14710                 | 
14710                 | __system___basic_print_unsigned
14710     03 4A 05 F6 | 	mov	COUNT_, #3
14714     A8 00 A0 FD | 	call	#pushregs_
14718     0A 1F 02 F6 | 	mov	local01, arg02
1471c     0B 21 02 F6 | 	mov	local02, arg03
14720     0C 23 02 F6 | 	mov	local03, arg04
14724     F8 47 B0 FD | 	call	#__system___gettxfunc
14728     FD 12 0A F6 | 	mov	arg01, result1 wz
1472c     00 FA 05 A6 |  if_e	mov	result1, #0
14730     3A 20 26 54 |  if_ne	bith	local02, #58
14734     10 15 02 56 |  if_ne	mov	arg02, local02
14738     0F 17 02 56 |  if_ne	mov	arg03, local01
1473c     11 19 02 56 |  if_ne	mov	arg04, local03
14740     28 02 B0 5D |  if_ne	call	#__system___fmtnum
14744     A7 F0 03 F6 | 	mov	ptra, fp
14748     B2 00 A0 FD | 	call	#popregs_
1474c                 | __system___basic_print_unsigned_ret
1474c     2D 00 64 FD | 	ret
14750                 | 
14750                 | __system___basic_put
14750     04 4A 05 F6 | 	mov	COUNT_, #4
14754     A8 00 A0 FD | 	call	#pushregs_
14758     0D 1F 02 F6 | 	mov	local01, arg05
1475c     0F 19 02 FD | 	qmul	arg04, local01
14760     09 21 02 F6 | 	mov	local02, arg01
14764     0B 23 02 F6 | 	mov	local03, arg03
14768     00 14 0E F2 | 	cmp	arg02, #0 wz
1476c     01 14 86 51 |  if_ne	sub	arg02, #1
14770     10 13 02 56 |  if_ne	mov	arg01, local02
14774     00 16 06 56 |  if_ne	mov	arg03, #0
14778     18 24 62 FD | 	getqx	local04
1477c     94 3E B0 5D |  if_ne	call	#__system__lseek
14780     11 15 02 F6 | 	mov	arg02, local03
14784     12 17 02 F6 | 	mov	arg03, local04
14788     10 13 02 F6 | 	mov	arg01, local02
1478c     D0 3D B0 FD | 	call	#__system__write
14790     FD 24 02 F6 | 	mov	local04, result1
14794     01 24 56 F2 | 	cmps	local04, #1 wc
14798     10 00 90 CD |  if_b	jmp	#LR__2010
1479c     12 5F 02 F6 | 	mov	muldiva_, local04
147a0     0F 61 02 F6 | 	mov	muldivb_, local01
147a4     BA 00 A0 FD | 	call	#divide_
147a8     30 25 02 F6 | 	mov	local04, muldivb_
147ac                 | LR__2010
147ac     12 FB 01 F6 | 	mov	result1, local04
147b0     A7 F0 03 F6 | 	mov	ptra, fp
147b4     B2 00 A0 FD | 	call	#popregs_
147b8                 | __system___basic_put_ret
147b8     2D 00 64 FD | 	ret
147bc                 | 
147bc                 | __system___basic_get
147bc     04 4A 05 F6 | 	mov	COUNT_, #4
147c0     A8 00 A0 FD | 	call	#pushregs_
147c4     0D 1F 02 F6 | 	mov	local01, arg05
147c8     0F 19 02 FD | 	qmul	arg04, local01
147cc     09 21 02 F6 | 	mov	local02, arg01
147d0     0B 23 02 F6 | 	mov	local03, arg03
147d4     00 14 0E F2 | 	cmp	arg02, #0 wz
147d8     01 14 86 51 |  if_ne	sub	arg02, #1
147dc     10 13 02 56 |  if_ne	mov	arg01, local02
147e0     00 16 06 56 |  if_ne	mov	arg03, #0
147e4     18 24 62 FD | 	getqx	local04
147e8     28 3E B0 5D |  if_ne	call	#__system__lseek
147ec     11 15 02 F6 | 	mov	arg02, local03
147f0     12 17 02 F6 | 	mov	arg03, local04
147f4     10 13 02 F6 | 	mov	arg01, local02
147f8     A0 3D B0 FD | 	call	#__system__read
147fc     FD 24 02 F6 | 	mov	local04, result1
14800     01 24 56 F2 | 	cmps	local04, #1 wc
14804     10 00 90 CD |  if_b	jmp	#LR__2020
14808     12 5F 02 F6 | 	mov	muldiva_, local04
1480c     0F 61 02 F6 | 	mov	muldivb_, local01
14810     BA 00 A0 FD | 	call	#divide_
14814     30 25 02 F6 | 	mov	local04, muldivb_
14818                 | LR__2020
14818     12 FB 01 F6 | 	mov	result1, local04
1481c     A7 F0 03 F6 | 	mov	ptra, fp
14820     B2 00 A0 FD | 	call	#popregs_
14824                 | __system___basic_get_ret
14824     2D 00 64 FD | 	ret
14828                 | 
14828                 | __system___fmtchar
14828     00 4A 05 F6 | 	mov	COUNT_, #0
1482c     A8 00 A0 FD | 	call	#pushregs_
14830     10 F0 07 F1 | 	add	ptra, #16
14834     04 4E 05 F1 | 	add	fp, #4
14838     A7 12 62 FC | 	wrlong	arg01, fp
1483c     04 4E 05 F1 | 	add	fp, #4
14840     A7 14 62 FC | 	wrlong	arg02, fp
14844     04 4E 05 F1 | 	add	fp, #4
14848     A7 16 62 FC | 	wrlong	arg03, fp
1484c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
14850     A7 16 62 FC | 	wrlong	arg03, fp
14854     08 4E 85 F1 | 	sub	fp, #8
14858     A7 12 02 FB | 	rdlong	arg01, fp
1485c     04 4E 05 F1 | 	add	fp, #4
14860     A7 14 02 FB | 	rdlong	arg02, fp
14864     04 4E 05 F1 | 	add	fp, #4
14868     A7 16 02 F6 | 	mov	arg03, fp
1486c     0C 4E 85 F1 | 	sub	fp, #12
14870     0C 00 B0 FD | 	call	#__system___fmtstr
14874     A7 F0 03 F6 | 	mov	ptra, fp
14878     B2 00 A0 FD | 	call	#popregs_
1487c                 | __system___fmtchar_ret
1487c     2D 00 64 FD | 	ret
14880                 | 
14880                 | __system___fmtstr
14880     09 4A 05 F6 | 	mov	COUNT_, #9
14884     A8 00 A0 FD | 	call	#pushregs_
14888     09 1F 02 F6 | 	mov	local01, arg01
1488c     0A 21 02 F6 | 	mov	local02, arg02
14890     0B 23 02 F6 | 	mov	local03, arg03
14894     10 19 E2 F8 | 	getbyte	arg04, local02, #0
14898     11 13 02 F6 | 	mov	arg01, local03
1489c     09 25 02 F6 | 	mov	local04, arg01
148a0     97 06 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
148a4                 | LR__2030
148a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
148a8     01 24 06 51 |  if_ne	add	local04, #1
148ac     F4 FF 9F 5D |  if_ne	jmp	#LR__2030
148b0                 | LR__2031
148b0     09 25 82 F1 | 	sub	local04, arg01
148b4     00 18 0E F2 | 	cmp	arg04, #0 wz
148b8     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
148bc     10 15 02 F6 | 	mov	arg02, local02
148c0     12 17 02 F6 | 	mov	arg03, local04
148c4     0F 13 02 F6 | 	mov	arg01, local01
148c8     02 18 06 F6 | 	mov	arg04, #2
148cc     F0 42 B0 FD | 	call	#__system___fmtpad
148d0     FD 26 02 F6 | 	mov	local05, result1
148d4     00 26 56 F2 | 	cmps	local05, #0 wc
148d8     13 FB 01 C6 |  if_b	mov	result1, local05
148dc     80 00 90 CD |  if_b	jmp	#LR__2034
148e0     01 24 56 F2 | 	cmps	local04, #1 wc
148e4     50 00 90 CD |  if_b	jmp	#LR__2033
148e8     12 29 02 F6 | 	mov	local06, local04
148ec                 | LR__2032
148ec     0F 2B 02 F6 | 	mov	local07, local01
148f0     0F 2D 02 F6 | 	mov	local08, local01
148f4     13 2A 46 F7 | 	zerox	local07, #19
148f8     14 2C 46 F0 | 	shr	local08, #20
148fc     02 2C 66 F0 | 	shl	local08, #2
14900     ED 2C 02 F1 | 	add	local08, __methods__
14904     16 2D 02 FB | 	rdlong	local08, local08
14908     11 13 C2 FA | 	rdbyte	arg01, local03
1490c     F2 2E 02 F6 | 	mov	local09, objptr
14910     15 E5 01 F6 | 	mov	objptr, local07
14914     01 22 06 F1 | 	add	local03, #1
14918     2D 2C 62 FD | 	call	local08
1491c     17 E5 01 F6 | 	mov	objptr, local09
14920     FD 2E 02 F6 | 	mov	local09, result1
14924     00 2E 56 F2 | 	cmps	local09, #0 wc
14928     17 FB 01 C6 |  if_b	mov	result1, local09
1492c     30 00 90 CD |  if_b	jmp	#LR__2034
14930     17 27 02 F1 | 	add	local05, local09
14934     ED 29 6E FB | 	djnz	local06, #LR__2032
14938                 | LR__2033
14938     10 15 02 F6 | 	mov	arg02, local02
1493c     12 17 02 F6 | 	mov	arg03, local04
14940     0F 13 02 F6 | 	mov	arg01, local01
14944     01 18 06 F6 | 	mov	arg04, #1
14948     74 42 B0 FD | 	call	#__system___fmtpad
1494c     FD 2E 02 F6 | 	mov	local09, result1
14950     00 2E 56 F2 | 	cmps	local09, #0 wc
14954     17 FB 01 C6 |  if_b	mov	result1, local09
14958     17 27 02 31 |  if_ae	add	local05, local09
1495c     13 FB 01 36 |  if_ae	mov	result1, local05
14960                 | LR__2034
14960     A7 F0 03 F6 | 	mov	ptra, fp
14964     B2 00 A0 FD | 	call	#popregs_
14968                 | __system___fmtstr_ret
14968     2D 00 64 FD | 	ret
1496c                 | 
1496c                 | __system___fmtnum
1496c     0B 4A 05 F6 | 	mov	COUNT_, #11
14970     A8 00 A0 FD | 	call	#pushregs_
14974     09 1F 02 F6 | 	mov	local01, arg01
14978     0A 21 02 F6 | 	mov	local02, arg02
1497c     0B 23 02 F6 | 	mov	local03, arg03
14980     0C 25 02 F6 | 	mov	local04, arg04
14984     F8 27 02 F6 | 	mov	local05, ptra
14988     13 29 02 F6 | 	mov	local06, local05
1498c     00 2A 06 F6 | 	mov	local07, #0
14990     10 2D 02 F6 | 	mov	local08, local02
14994     10 2C 46 F0 | 	shr	local08, #16
14998     3F 2C 06 F5 | 	and	local08, #63
1499c     10 2F E2 F8 | 	getbyte	local09, local02, #0
149a0     10 31 02 F6 | 	mov	local10, local02
149a4     1A 30 46 F0 | 	shr	local10, #26
149a8     03 30 06 F5 | 	and	local10, #3
149ac     18 33 02 F6 | 	mov	local11, local10
149b0     01 2C 56 F2 | 	cmps	local08, #1 wc
149b4     44 F0 07 F1 | 	add	ptra, #68
149b8     01 2C 86 31 |  if_ae	sub	local08, #1
149bc     41 2E 56 F2 | 	cmps	local09, #65 wc
149c0     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
149c4     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
149c8     03 32 0E F2 | 	cmp	local11, #3 wz
149cc     00 32 06 A6 |  if_e	mov	local11, #0
149d0     00 22 56 52 |  if_ne	cmps	local03, #0 wc
149d4     04 32 06 46 |  if_c_and_nz	mov	local11, #4
149d8     11 23 62 46 |  if_c_and_nz	neg	local03, local03
149dc     00 32 0E F2 | 	cmp	local11, #0 wz
149e0     4C 00 90 AD |  if_e	jmp	#LR__2043
149e4     01 2A 06 F6 | 	mov	local07, #1
149e8     17 2D 0A F2 | 	cmp	local08, local09 wz
149ec     18 00 90 5D |  if_ne	jmp	#LR__2041
149f0     05 2C 6E FB | 	djnz	local08, #LR__2040
149f4     0F 13 02 F6 | 	mov	arg01, local01
149f8     10 15 02 F6 | 	mov	arg02, local02
149fc     23 16 06 F6 | 	mov	arg03, #35
14a00     24 FE BF FD | 	call	#__system___fmtchar
14a04     88 00 90 FD | 	jmp	#LR__2047
14a08                 | LR__2040
14a08                 | LR__2041
14a08     02 32 0E F2 | 	cmp	local11, #2 wz
14a0c     14 31 02 A6 |  if_e	mov	local10, local06
14a10     01 28 06 A1 |  if_e	add	local06, #1
14a14     18 41 48 AC |  if_e	wrbyte	#32, local10
14a18     14 00 90 AD |  if_e	jmp	#LR__2042
14a1c     04 32 0E F2 | 	cmp	local11, #4 wz
14a20     14 5B 48 AC |  if_e	wrbyte	#45, local06
14a24     01 28 06 A1 |  if_e	add	local06, #1
14a28     14 57 48 5C |  if_ne	wrbyte	#43, local06
14a2c     01 28 06 51 |  if_ne	add	local06, #1
14a30                 | LR__2042
14a30                 | LR__2043
14a30     14 13 02 F6 | 	mov	arg01, local06
14a34     11 15 02 F6 | 	mov	arg02, local03
14a38     12 17 02 F6 | 	mov	arg03, local04
14a3c     16 19 02 F6 | 	mov	arg04, local08
14a40     00 1A 06 F6 | 	mov	arg05, #0
14a44     1D 20 2E F4 | 	testbn	local02, #29 wz
14a48     01 1A 06 56 |  if_ne	mov	arg05, #1
14a4c     38 42 B0 FD | 	call	#__system___uitoa
14a50     FD 2A 02 F1 | 	add	local07, result1
14a54     17 2B 5A F2 | 	cmps	local07, local09 wcz
14a58     24 00 90 ED |  if_be	jmp	#LR__2046
14a5c     97 0E 48 FB | 	callpa	#(@LR__2045-@LR__2044)>>2,fcache_load_ptr_
14a60                 | LR__2044
14a60     17 31 02 F6 | 	mov	local10, local09
14a64     01 30 56 F2 | 	cmps	local10, #1 wc
14a68     01 2E 86 F1 | 	sub	local09, #1
14a6c     14 31 02 36 |  if_ae	mov	local10, local06
14a70     01 28 06 31 |  if_ae	add	local06, #1
14a74     18 47 48 3C |  if_ae	wrbyte	#35, local10
14a78     E4 FF 9F 3D |  if_ae	jmp	#LR__2044
14a7c                 | LR__2045
14a7c     14 01 48 FC | 	wrbyte	#0, local06
14a80                 | LR__2046
14a80     0F 13 02 F6 | 	mov	arg01, local01
14a84     10 15 02 F6 | 	mov	arg02, local02
14a88     13 17 02 F6 | 	mov	arg03, local05
14a8c     F0 FD BF FD | 	call	#__system___fmtstr
14a90                 | LR__2047
14a90     A7 F0 03 F6 | 	mov	ptra, fp
14a94     B2 00 A0 FD | 	call	#popregs_
14a98                 | __system___fmtnum_ret
14a98     2D 00 64 FD | 	ret
14a9c                 | 
14a9c                 | __system___fmtfloat
14a9c     10 4A 05 F6 | 	mov	COUNT_, #16
14aa0     A8 00 A0 FD | 	call	#pushregs_
14aa4     24 F1 07 F1 | 	add	ptra, #292
14aa8     04 4E 05 F1 | 	add	fp, #4
14aac     A7 12 62 FC | 	wrlong	arg01, fp
14ab0     04 4E 05 F1 | 	add	fp, #4
14ab4     A7 14 62 FC | 	wrlong	arg02, fp
14ab8     04 4E 05 F1 | 	add	fp, #4
14abc     A7 16 62 FC | 	wrlong	arg03, fp
14ac0     04 4E 05 F1 | 	add	fp, #4
14ac4     A7 18 62 FC | 	wrlong	arg04, fp
14ac8     0C 4E 05 F1 | 	add	fp, #12
14acc     A7 14 68 FC | 	wrlong	#10, fp
14ad0     08 4E 05 F1 | 	add	fp, #8
14ad4     A7 00 68 FC | 	wrlong	#0, fp
14ad8     08 4E 05 F1 | 	add	fp, #8
14adc     A7 00 68 FC | 	wrlong	#0, fp
14ae0     08 4E 05 F1 | 	add	fp, #8
14ae4     A7 00 68 FC | 	wrlong	#0, fp
14ae8     04 4E 05 F1 | 	add	fp, #4
14aec     A7 04 68 FC | 	wrlong	#2, fp
14af0     04 4E 05 F1 | 	add	fp, #4
14af4     A7 00 68 FC | 	wrlong	#0, fp
14af8     04 4E 05 F1 | 	add	fp, #4
14afc     A7 00 68 FC | 	wrlong	#0, fp
14b00     04 4E 05 F1 | 	add	fp, #4
14b04     A7 00 68 FC | 	wrlong	#0, fp
14b08     04 4E 05 F1 | 	add	fp, #4
14b0c     A7 00 68 FC | 	wrlong	#0, fp
14b10     18 4E 05 F1 | 	add	fp, #24
14b14     A7 00 68 FC | 	wrlong	#0, fp
14b18     68 4E 05 F1 | 	add	fp, #104
14b1c     A7 1E 02 F6 | 	mov	local01, fp
14b20     08 4E 85 F1 | 	sub	fp, #8
14b24     A7 1E 62 FC | 	wrlong	local01, fp
14b28     04 4E 05 F1 | 	add	fp, #4
14b2c     A7 1E 62 FC | 	wrlong	local01, fp
14b30     BC 4E 85 F1 | 	sub	fp, #188
14b34     A7 1E 02 FB | 	rdlong	local01, fp
14b38     10 1E 46 F0 | 	shr	local01, #16
14b3c     3F 1E 06 F5 | 	and	local01, #63
14b40     B0 4E 05 F1 | 	add	fp, #176
14b44     A7 1E 62 FC | 	wrlong	local01, fp
14b48     B0 4E 85 F1 | 	sub	fp, #176
14b4c     A7 1E 02 FB | 	rdlong	local01, fp
14b50     1C 1E 46 F0 | 	shr	local01, #28
14b54     01 1E 06 F5 | 	and	local01, #1
14b58     08 4F 05 F1 | 	add	fp, #264
14b5c     A7 1E 62 FC | 	wrlong	local01, fp
14b60     58 4E 85 F1 | 	sub	fp, #88
14b64     A7 1E 0A FB | 	rdlong	local01, fp wz
14b68     B8 4E 85 F1 | 	sub	fp, #184
14b6c     3C 00 90 5D |  if_ne	jmp	#LR__2051
14b70     10 4E 05 F1 | 	add	fp, #16
14b74     A7 1E 02 FB | 	rdlong	local01, fp
14b78     10 4E 85 F1 | 	sub	fp, #16
14b7c     61 1E 0E F2 | 	cmp	local01, #97 wz
14b80     18 00 90 5D |  if_ne	jmp	#LR__2050
14b84     B8 4E 05 F1 | 	add	fp, #184
14b88     A7 1A 68 FC | 	wrlong	#13, fp
14b8c     84 4E 85 F1 | 	sub	fp, #132
14b90     A7 02 68 FC | 	wrlong	#1, fp
14b94     34 4E 85 F1 | 	sub	fp, #52
14b98     24 00 90 FD | 	jmp	#LR__2052
14b9c                 | LR__2050
14b9c     B8 4E 05 F1 | 	add	fp, #184
14ba0     A7 0C 68 FC | 	wrlong	#6, fp
14ba4     B8 4E 85 F1 | 	sub	fp, #184
14ba8     14 00 90 FD | 	jmp	#LR__2052
14bac                 | LR__2051
14bac     B8 4E 05 F1 | 	add	fp, #184
14bb0     A7 1E 02 FB | 	rdlong	local01, fp
14bb4     01 1E 86 F1 | 	sub	local01, #1
14bb8     A7 1E 62 FC | 	wrlong	local01, fp
14bbc     B8 4E 85 F1 | 	sub	fp, #184
14bc0                 | LR__2052
14bc0     08 4E 05 F1 | 	add	fp, #8
14bc4     A7 1E 02 FB | 	rdlong	local01, fp
14bc8     16 1E 46 F0 | 	shr	local01, #22
14bcc     03 1E 06 F5 | 	and	local01, #3
14bd0     04 4F 05 F1 | 	add	fp, #260
14bd4     A7 1E 62 FC | 	wrlong	local01, fp
14bd8     04 4F 85 F1 | 	sub	fp, #260
14bdc     A7 1E 02 FB | 	rdlong	local01, fp
14be0     1D 1E 46 F0 | 	shr	local01, #29
14be4     01 1E 06 F5 | 	and	local01, #1
14be8     B4 4E 05 F1 | 	add	fp, #180
14bec     A7 1E 62 FC | 	wrlong	local01, fp
14bf0     B4 4E 85 F1 | 	sub	fp, #180
14bf4     A7 1E 02 FB | 	rdlong	local01, fp
14bf8     0F 1F EA F8 | 	getbyte	local01, local01, #1
14bfc     60 4E 05 F1 | 	add	fp, #96
14c00     A7 1E 62 FC | 	wrlong	local01, fp
14c04     60 4E 85 F1 | 	sub	fp, #96
14c08     A7 1E 02 FB | 	rdlong	local01, fp
14c0c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
14c10     64 4E 05 F1 | 	add	fp, #100
14c14     A7 1E 62 FC | 	wrlong	local01, fp
14c18     00 1E 06 F6 | 	mov	local01, #0
14c1c     5C 4E 85 F1 | 	sub	fp, #92
14c20     A7 1A 02 FB | 	rdlong	arg05, fp
14c24     65 1A 0E F2 | 	cmp	arg05, #101 wz
14c28     01 1E 06 A6 |  if_e	mov	local01, #1
14c2c     14 4E 05 F1 | 	add	fp, #20
14c30     A7 1E 62 FC | 	wrlong	local01, fp
14c34     98 4E 05 F1 | 	add	fp, #152
14c38     A7 20 0A FB | 	rdlong	local02, fp wz
14c3c     45 1E 06 56 |  if_ne	mov	local01, #69
14c40     65 1E 06 A6 |  if_e	mov	local01, #101
14c44     8C 4E 85 F1 | 	sub	fp, #140
14c48     A7 1E 62 FC | 	wrlong	local01, fp
14c4c     20 4E 85 F1 | 	sub	fp, #32
14c50     A7 1E 02 FB | 	rdlong	local01, fp
14c54     10 4E 85 F1 | 	sub	fp, #16
14c58     61 1E 0E F2 | 	cmp	local01, #97 wz
14c5c     4C 00 90 5D |  if_ne	jmp	#LR__2053
14c60     24 4E 05 F1 | 	add	fp, #36
14c64     A7 02 68 FC | 	wrlong	#1, fp
14c68     98 4E 05 F1 | 	add	fp, #152
14c6c     A7 20 0A FB | 	rdlong	local02, fp wz
14c70     50 1E 06 56 |  if_ne	mov	local01, #80
14c74     70 1E 06 A6 |  if_e	mov	local01, #112
14c78     8C 4E 85 F1 | 	sub	fp, #140
14c7c     A7 1E 62 FC | 	wrlong	local01, fp
14c80     14 4E 85 F1 | 	sub	fp, #20
14c84     A7 04 68 FC | 	wrlong	#2, fp
14c88     1C 4E 05 F1 | 	add	fp, #28
14c8c     A7 02 68 FC | 	wrlong	#1, fp
14c90     84 4E 05 F1 | 	add	fp, #132
14c94     A7 20 0A FB | 	rdlong	local02, fp wz
14c98     58 1E 06 56 |  if_ne	mov	local01, #88
14c9c     78 1E 06 A6 |  if_e	mov	local01, #120
14ca0     7C 4E 85 F1 | 	sub	fp, #124
14ca4     A7 1E 62 FC | 	wrlong	local01, fp
14ca8     40 4E 85 F1 | 	sub	fp, #64
14cac                 | LR__2053
14cac     10 4E 05 F1 | 	add	fp, #16
14cb0     A7 1E 02 FB | 	rdlong	local01, fp
14cb4     10 4E 85 F1 | 	sub	fp, #16
14cb8     23 1E 0E F2 | 	cmp	local01, #35 wz
14cbc     3C 00 90 5D |  if_ne	jmp	#LR__2056
14cc0     48 4E 05 F1 | 	add	fp, #72
14cc4     A7 02 68 FC | 	wrlong	#1, fp
14cc8     C8 4E 05 F1 | 	add	fp, #200
14ccc     A7 1E 0A FB | 	rdlong	local01, fp wz
14cd0     10 4F 85 F1 | 	sub	fp, #272
14cd4     18 00 90 AD |  if_e	jmp	#LR__2054
14cd8     10 4E 05 F1 | 	add	fp, #16
14cdc     A7 CC 68 FC | 	wrlong	#102, fp
14ce0     00 4F 05 F1 | 	add	fp, #256
14ce4     A7 00 68 FC | 	wrlong	#0, fp
14ce8     10 4F 85 F1 | 	sub	fp, #272
14cec     0C 00 90 FD | 	jmp	#LR__2055
14cf0                 | LR__2054
14cf0     10 4F 05 F1 | 	add	fp, #272
14cf4     A7 02 68 FC | 	wrlong	#1, fp
14cf8     10 4F 85 F1 | 	sub	fp, #272
14cfc                 | LR__2055
14cfc                 | LR__2056
14cfc     08 4E 05 F1 | 	add	fp, #8
14d00     A7 1E 02 FB | 	rdlong	local01, fp
14d04     1A 1E 46 F0 | 	shr	local01, #26
14d08     03 1E 06 F5 | 	and	local01, #3
14d0c     5C 4E 05 F1 | 	add	fp, #92
14d10     A7 1E 62 FC | 	wrlong	local01, fp
14d14     58 4E 85 F1 | 	sub	fp, #88
14d18     A7 FA 01 FB | 	rdlong	result1, fp
14d1c     0C 4E 85 F1 | 	sub	fp, #12
14d20     1F FA 4D F0 | 	shr	result1, #31 wz
14d24     20 00 90 AD |  if_e	jmp	#LR__2057
14d28     2C 4E 05 F1 | 	add	fp, #44
14d2c     A7 5A 68 FC | 	wrlong	#45, fp
14d30     20 4E 85 F1 | 	sub	fp, #32
14d34     A7 FA 01 FB | 	rdlong	result1, fp
14d38     1F FA E5 F4 | 	bitnot	result1, #31
14d3c     A7 FA 61 FC | 	wrlong	result1, fp
14d40     0C 4E 85 F1 | 	sub	fp, #12
14d44     3C 00 90 FD | 	jmp	#LR__2059
14d48                 | LR__2057
14d48     64 4E 05 F1 | 	add	fp, #100
14d4c     A7 1E 02 FB | 	rdlong	local01, fp
14d50     64 4E 85 F1 | 	sub	fp, #100
14d54     01 1E 0E F2 | 	cmp	local01, #1 wz
14d58     2C 4E 05 A1 |  if_e	add	fp, #44
14d5c     A7 56 68 AC |  if_e	wrlong	#43, fp
14d60     2C 4E 85 A1 |  if_e	sub	fp, #44
14d64     1C 00 90 AD |  if_e	jmp	#LR__2058
14d68     64 4E 05 F1 | 	add	fp, #100
14d6c     A7 1E 02 FB | 	rdlong	local01, fp
14d70     64 4E 85 F1 | 	sub	fp, #100
14d74     02 1E 0E F2 | 	cmp	local01, #2 wz
14d78     2C 4E 05 A1 |  if_e	add	fp, #44
14d7c     A7 40 68 AC |  if_e	wrlong	#32, fp
14d80     2C 4E 85 A1 |  if_e	sub	fp, #44
14d84                 | LR__2058
14d84                 | LR__2059
14d84     08 4E 05 F1 | 	add	fp, #8
14d88     A7 1E 02 FB | 	rdlong	local01, fp
14d8c     18 1E 46 F0 | 	shr	local01, #24
14d90     03 1E 06 F5 | 	and	local01, #3
14d94     3C 4E 05 F1 | 	add	fp, #60
14d98     A7 1E 62 FC | 	wrlong	local01, fp
14d9c     00 1E 06 F6 | 	mov	local01, #0
14da0     18 4E 85 F1 | 	sub	fp, #24
14da4     A7 22 0A FB | 	rdlong	local03, fp wz
14da8     2C 4E 85 F1 | 	sub	fp, #44
14dac     18 00 90 5D |  if_ne	jmp	#LR__2060
14db0     1C 4E 05 F1 | 	add	fp, #28
14db4     A7 24 02 FB | 	rdlong	local04, fp
14db8     1C 4E 85 F1 | 	sub	fp, #28
14dbc     12 27 02 F6 | 	mov	local05, local04
14dc0     0A 26 0E F2 | 	cmp	local05, #10 wz
14dc4     04 00 90 AD |  if_e	jmp	#LR__2061
14dc8                 | LR__2060
14dc8     01 1E 66 F5 | 	xor	local01, #1
14dcc                 | LR__2061
14dcc     3C 4E 05 F1 | 	add	fp, #60
14dd0     A7 1E 62 FC | 	wrlong	local01, fp
14dd4     3C 4E 85 F1 | 	sub	fp, #60
14dd8     00 1E 0E F2 | 	cmp	local01, #0 wz
14ddc     0C 01 90 AD |  if_e	jmp	#LR__2063
14de0     44 4E 05 F1 | 	add	fp, #68
14de4     A7 26 02 FB | 	rdlong	local05, fp
14de8     44 4E 85 F1 | 	sub	fp, #68
14dec     13 23 02 F6 | 	mov	local03, local05
14df0     02 22 0E F2 | 	cmp	local03, #2 wz
14df4     F4 00 90 5D |  if_ne	jmp	#LR__2063
14df8     0C 4F 05 F1 | 	add	fp, #268
14dfc     A7 28 02 FB | 	rdlong	local06, fp
14e00     0C 4F 85 F1 | 	sub	fp, #268
14e04     14 25 02 F6 | 	mov	local04, local06
14e08     02 24 0E F2 | 	cmp	local04, #2 wz
14e0c     DC 00 90 AD |  if_e	jmp	#LR__2063
14e10     C0 4E 05 F1 | 	add	fp, #192
14e14     A7 12 02 FB | 	rdlong	arg01, fp
14e18     94 4E 85 F1 | 	sub	fp, #148
14e1c     A7 14 02 FB | 	rdlong	arg02, fp
14e20     14 4E 05 F1 | 	add	fp, #20
14e24     A7 16 02 FB | 	rdlong	arg03, fp
14e28     40 4E 85 F1 | 	sub	fp, #64
14e2c     C0 40 B0 FD | 	call	#__system__emitsign_0266
14e30     14 4F 05 F1 | 	add	fp, #276
14e34     A7 FA 61 FC | 	wrlong	result1, fp
14e38     14 4F 85 F1 | 	sub	fp, #276
14e3c     00 FA 55 F2 | 	cmps	result1, #0 wc
14e40     14 4F 05 C1 |  if_b	add	fp, #276
14e44     A7 FA 01 CB |  if_b	rdlong	result1, fp
14e48     14 4F 85 C1 |  if_b	sub	fp, #276
14e4c     6C 0B 90 CD |  if_b	jmp	#LR__2113
14e50     C0 4E 05 F1 | 	add	fp, #192
14e54     A7 1E 02 FB | 	rdlong	local01, fp
14e58     54 4E 05 F1 | 	add	fp, #84
14e5c     A7 26 02 FB | 	rdlong	local05, fp
14e60     13 23 02 F6 | 	mov	local03, local05
14e64     13 1F 02 F1 | 	add	local01, local05
14e68     54 4E 85 F1 | 	sub	fp, #84
14e6c     A7 1E 62 FC | 	wrlong	local01, fp
14e70     58 4E 85 F1 | 	sub	fp, #88
14e74     A7 1E 0A FB | 	rdlong	local01, fp wz
14e78     68 4E 85 F1 | 	sub	fp, #104
14e7c     60 00 90 AD |  if_e	jmp	#LR__2062
14e80     68 4E 05 F1 | 	add	fp, #104
14e84     A7 1E 02 FB | 	rdlong	local01, fp
14e88     AC 4E 05 F1 | 	add	fp, #172
14e8c     A7 22 02 FB | 	rdlong	local03, fp
14e90     11 1F 82 F1 | 	sub	local01, local03
14e94     AC 4E 85 F1 | 	sub	fp, #172
14e98     A7 1E 62 FC | 	wrlong	local01, fp
14e9c     68 4E 85 F1 | 	sub	fp, #104
14ea0     00 1E 56 F2 | 	cmps	local01, #0 wc
14ea4     68 4E 05 C1 |  if_b	add	fp, #104
14ea8     A7 00 68 CC |  if_b	wrlong	#0, fp
14eac     68 4E 85 C1 |  if_b	sub	fp, #104
14eb0     08 4E 05 F1 | 	add	fp, #8
14eb4     A7 1E 02 FB | 	rdlong	local01, fp
14eb8     E8 1E 06 F4 | 	bitl	local01, #232
14ebc     A7 1E 62 FC | 	wrlong	local01, fp
14ec0     60 4E 05 F1 | 	add	fp, #96
14ec4     A7 26 02 FB | 	rdlong	local05, fp
14ec8     13 23 02 F6 | 	mov	local03, local05
14ecc     08 22 66 F0 | 	shl	local03, #8
14ed0     11 1F 42 F5 | 	or	local01, local03
14ed4     60 4E 85 F1 | 	sub	fp, #96
14ed8     A7 1E 62 FC | 	wrlong	local01, fp
14edc     08 4E 85 F1 | 	sub	fp, #8
14ee0                 | LR__2062
14ee0     3C 4E 05 F1 | 	add	fp, #60
14ee4     A7 00 68 FC | 	wrlong	#0, fp
14ee8     3C 4E 85 F1 | 	sub	fp, #60
14eec                 | LR__2063
14eec     0C 4E 05 F1 | 	add	fp, #12
14ef0     A7 12 02 FB | 	rdlong	arg01, fp
14ef4     0C 4E 85 F1 | 	sub	fp, #12
14ef8     D0 1D B0 FD | 	call	#__system____builtin_ilogb
14efc     FF FF 3F FF 
14f00     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
14f04     50 00 90 5D |  if_ne	jmp	#LR__2065
14f08     2C 4E 05 F1 | 	add	fp, #44
14f0c     A7 1E 0A FB | 	rdlong	local01, fp wz
14f10     2C 4E 85 F1 | 	sub	fp, #44
14f14     24 00 90 AD |  if_e	jmp	#LR__2064
14f18     C0 4E 05 F1 | 	add	fp, #192
14f1c     A7 20 02 FB | 	rdlong	local02, fp
14f20     10 23 02 F6 | 	mov	local03, local02
14f24     01 22 06 F1 | 	add	local03, #1
14f28     A7 22 62 FC | 	wrlong	local03, fp
14f2c     94 4E 85 F1 | 	sub	fp, #148
14f30     A7 24 02 FB | 	rdlong	local04, fp
14f34     2C 4E 85 F1 | 	sub	fp, #44
14f38     10 25 42 FC | 	wrbyte	local04, local02
14f3c                 | LR__2064
14f3c     C0 4E 05 F1 | 	add	fp, #192
14f40     A7 12 02 FB | 	rdlong	arg01, fp
14f44     C0 4E 85 F1 | 	sub	fp, #192
14f48     16 01 00 FF 
14f4c     46 15 06 F6 | 	mov	arg02, ##@LR__3981
14f50     E0 EA BF FD | 	call	#__system____builtin_strcpy
14f54     A4 08 90 FD | 	jmp	#LR__2101
14f58                 | LR__2065
14f58     0C 4E 05 F1 | 	add	fp, #12
14f5c     A7 20 02 FB | 	rdlong	local02, fp
14f60     0C 4E 85 F1 | 	sub	fp, #12
14f64     10 13 02 F6 | 	mov	arg01, local02
14f68     60 1D B0 FD | 	call	#__system____builtin_ilogb
14f6c     00 00 40 FF 
14f70     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
14f74     50 00 90 5D |  if_ne	jmp	#LR__2067
14f78     2C 4E 05 F1 | 	add	fp, #44
14f7c     A7 1E 0A FB | 	rdlong	local01, fp wz
14f80     2C 4E 85 F1 | 	sub	fp, #44
14f84     24 00 90 AD |  if_e	jmp	#LR__2066
14f88     C0 4E 05 F1 | 	add	fp, #192
14f8c     A7 20 02 FB | 	rdlong	local02, fp
14f90     10 23 02 F6 | 	mov	local03, local02
14f94     01 22 06 F1 | 	add	local03, #1
14f98     A7 22 62 FC | 	wrlong	local03, fp
14f9c     94 4E 85 F1 | 	sub	fp, #148
14fa0     A7 24 02 FB | 	rdlong	local04, fp
14fa4     2C 4E 85 F1 | 	sub	fp, #44
14fa8     10 25 42 FC | 	wrbyte	local04, local02
14fac                 | LR__2066
14fac     C0 4E 05 F1 | 	add	fp, #192
14fb0     A7 12 02 FB | 	rdlong	arg01, fp
14fb4     C0 4E 85 F1 | 	sub	fp, #192
14fb8     16 01 00 FF 
14fbc     4A 15 06 F6 | 	mov	arg02, ##@LR__3982
14fc0     70 EA BF FD | 	call	#__system____builtin_strcpy
14fc4     34 08 90 FD | 	jmp	#LR__2101
14fc8                 | LR__2067
14fc8     10 4E 05 F1 | 	add	fp, #16
14fcc     A7 1E 02 FB | 	rdlong	local01, fp
14fd0     10 4E 85 F1 | 	sub	fp, #16
14fd4     67 1E 0E F2 | 	cmp	local01, #103 wz
14fd8     10 4E 05 51 |  if_ne	add	fp, #16
14fdc     A7 22 02 5B |  if_ne	rdlong	local03, fp
14fe0     10 4E 85 51 |  if_ne	sub	fp, #16
14fe4     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
14fe8     94 01 90 5D |  if_ne	jmp	#LR__2072
14fec     0C 4E 05 F1 | 	add	fp, #12
14ff0     A7 12 02 FB | 	rdlong	arg01, fp
14ff4     08 4E 05 F1 | 	add	fp, #8
14ff8     A7 14 02 F6 | 	mov	arg02, fp
14ffc     0C 4E 05 F1 | 	add	fp, #12
15000     A7 16 02 F6 | 	mov	arg03, fp
15004     98 4E 05 F1 | 	add	fp, #152
15008     A7 18 02 FB | 	rdlong	arg04, fp
1500c     9C 4E 85 F1 | 	sub	fp, #156
15010     A7 1A 02 FB | 	rdlong	arg05, fp
15014     1C 4E 85 F1 | 	sub	fp, #28
15018     E0 3C B0 FD | 	call	#__system__disassemble_0264
1501c     10 4E 05 F1 | 	add	fp, #16
15020     A7 1E 02 FB | 	rdlong	local01, fp
15024     10 4E 85 F1 | 	sub	fp, #16
15028     23 1E 0E F2 | 	cmp	local01, #35 wz
1502c     A0 00 90 5D |  if_ne	jmp	#LR__2069
15030     20 4E 05 F1 | 	add	fp, #32
15034     A7 1E 02 FB | 	rdlong	local01, fp
15038     98 4E 05 F1 | 	add	fp, #152
1503c     A7 22 02 FB | 	rdlong	local03, fp
15040     B8 4E 85 F1 | 	sub	fp, #184
15044     11 1F 5A F2 | 	cmps	local01, local03 wcz
15048     24 4E 05 11 |  if_a	add	fp, #36
1504c     A7 02 68 1C |  if_a	wrlong	#1, fp
15050     24 4E 85 11 |  if_a	sub	fp, #36
15054     A4 01 90 1D |  if_a	jmp	#LR__2075
15058     20 4E 05 F1 | 	add	fp, #32
1505c     A7 1E 02 FB | 	rdlong	local01, fp
15060     20 4E 85 F1 | 	sub	fp, #32
15064     00 1E 56 F2 | 	cmps	local01, #0 wc
15068     2C 00 90 3D |  if_ae	jmp	#LR__2068
1506c     B8 4E 05 F1 | 	add	fp, #184
15070     A7 1E 02 FB | 	rdlong	local01, fp
15074     0F 1F 62 F6 | 	neg	local01, local01
15078     98 4E 85 F1 | 	sub	fp, #152
1507c     A7 22 02 FB | 	rdlong	local03, fp
15080     20 4E 85 F1 | 	sub	fp, #32
15084     0F 23 5A F2 | 	cmps	local03, local01 wcz
15088     24 4E 05 E1 |  if_be	add	fp, #36
1508c     A7 02 68 EC |  if_be	wrlong	#1, fp
15090     24 4E 85 E1 |  if_be	sub	fp, #36
15094     64 01 90 FD | 	jmp	#LR__2075
15098                 | LR__2068
15098     20 4E 05 F1 | 	add	fp, #32
1509c     A7 1E 02 FB | 	rdlong	local01, fp
150a0     20 4E 85 F1 | 	sub	fp, #32
150a4     01 1E 56 F2 | 	cmps	local01, #1 wc
150a8     50 01 90 CD |  if_b	jmp	#LR__2075
150ac     B8 4E 05 F1 | 	add	fp, #184
150b0     A7 1E 02 FB | 	rdlong	local01, fp
150b4     98 4E 85 F1 | 	sub	fp, #152
150b8     A7 22 02 FB | 	rdlong	local03, fp
150bc     11 1F 82 F1 | 	sub	local01, local03
150c0     98 4E 05 F1 | 	add	fp, #152
150c4     A7 1E 62 FC | 	wrlong	local01, fp
150c8     B8 4E 85 F1 | 	sub	fp, #184
150cc     2C 01 90 FD | 	jmp	#LR__2075
150d0                 | LR__2069
150d0     00 1E 06 F6 | 	mov	local01, #0
150d4     08 4E 05 F1 | 	add	fp, #8
150d8     A7 20 02 FB | 	rdlong	local02, fp
150dc     1C 20 46 F0 | 	shr	local02, #28
150e0     01 20 0E F5 | 	and	local02, #1 wz
150e4     01 1E 06 A6 |  if_e	mov	local01, #1
150e8     2C 4E 05 F1 | 	add	fp, #44
150ec     A7 1E 62 FC | 	wrlong	local01, fp
150f0     14 4E 85 F1 | 	sub	fp, #20
150f4     A7 1E 02 FB | 	rdlong	local01, fp
150f8     98 4E 05 F1 | 	add	fp, #152
150fc     A7 22 02 FB | 	rdlong	local03, fp
15100     B8 4E 85 F1 | 	sub	fp, #184
15104     11 1F 52 F2 | 	cmps	local01, local03 wc
15108     18 00 90 3D |  if_ae	jmp	#LR__2070
1510c     20 4E 05 F1 | 	add	fp, #32
15110     A7 24 02 FB | 	rdlong	local04, fp
15114     20 4E 85 F1 | 	sub	fp, #32
15118     FF FF 7F FF 
1511c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
15120     10 00 90 3D |  if_ae	jmp	#LR__2071
15124                 | LR__2070
15124     24 4E 05 F1 | 	add	fp, #36
15128     A7 02 68 FC | 	wrlong	#1, fp
1512c     24 4E 85 F1 | 	sub	fp, #36
15130     C8 00 90 FD | 	jmp	#LR__2075
15134                 | LR__2071
15134     B8 4E 05 F1 | 	add	fp, #184
15138     A7 24 02 FB | 	rdlong	local04, fp
1513c     98 4E 85 F1 | 	sub	fp, #152
15140     A7 22 02 FB | 	rdlong	local03, fp
15144     11 25 82 F1 | 	sub	local04, local03
15148     98 4E 05 F1 | 	add	fp, #152
1514c     A7 24 62 FC | 	wrlong	local04, fp
15150     AC 4E 85 F1 | 	sub	fp, #172
15154     A7 12 02 FB | 	rdlong	arg01, fp
15158     08 4E 05 F1 | 	add	fp, #8
1515c     A7 14 02 F6 | 	mov	arg02, fp
15160     0C 4E 05 F1 | 	add	fp, #12
15164     A7 16 02 F6 | 	mov	arg03, fp
15168     12 19 62 F6 | 	neg	arg04, local04
1516c     04 4E 85 F1 | 	sub	fp, #4
15170     A7 1A 02 FB | 	rdlong	arg05, fp
15174     1C 4E 85 F1 | 	sub	fp, #28
15178     80 3B B0 FD | 	call	#__system__disassemble_0264
1517c     7C 00 90 FD | 	jmp	#LR__2075
15180                 | LR__2072
15180     24 4E 05 F1 | 	add	fp, #36
15184     A7 1E 0A FB | 	rdlong	local01, fp wz
15188     24 4E 85 F1 | 	sub	fp, #36
1518c     34 00 90 AD |  if_e	jmp	#LR__2073
15190     0C 4E 05 F1 | 	add	fp, #12
15194     A7 12 02 FB | 	rdlong	arg01, fp
15198     08 4E 05 F1 | 	add	fp, #8
1519c     A7 14 02 F6 | 	mov	arg02, fp
151a0     0C 4E 05 F1 | 	add	fp, #12
151a4     A7 16 02 F6 | 	mov	arg03, fp
151a8     98 4E 05 F1 | 	add	fp, #152
151ac     A7 18 02 FB | 	rdlong	arg04, fp
151b0     9C 4E 85 F1 | 	sub	fp, #156
151b4     A7 1A 02 FB | 	rdlong	arg05, fp
151b8     1C 4E 85 F1 | 	sub	fp, #28
151bc     3C 3B B0 FD | 	call	#__system__disassemble_0264
151c0     38 00 90 FD | 	jmp	#LR__2074
151c4                 | LR__2073
151c4     0C 4E 05 F1 | 	add	fp, #12
151c8     A7 12 02 FB | 	rdlong	arg01, fp
151cc     08 4E 05 F1 | 	add	fp, #8
151d0     A7 14 02 F6 | 	mov	arg02, fp
151d4     0C 4E 05 F1 | 	add	fp, #12
151d8     A7 16 02 F6 | 	mov	arg03, fp
151dc     98 4E 05 F1 | 	add	fp, #152
151e0     A7 24 02 FB | 	rdlong	local04, fp
151e4     01 24 06 F1 | 	add	local04, #1
151e8     12 19 62 F6 | 	neg	arg04, local04
151ec     9C 4E 85 F1 | 	sub	fp, #156
151f0     A7 1A 02 FB | 	rdlong	arg05, fp
151f4     1C 4E 85 F1 | 	sub	fp, #28
151f8     00 3B B0 FD | 	call	#__system__disassemble_0264
151fc                 | LR__2074
151fc                 | LR__2075
151fc     1C 4E 05 F1 | 	add	fp, #28
15200     A7 1E 02 FB | 	rdlong	local01, fp
15204     1C 4E 85 F1 | 	sub	fp, #28
15208     02 1E 0E F2 | 	cmp	local01, #2 wz
1520c     4C 00 90 5D |  if_ne	jmp	#LR__2078
15210     1C 4E 05 F1 | 	add	fp, #28
15214     A7 20 68 FC | 	wrlong	#16, fp
15218     1C 4E 85 F1 | 	sub	fp, #28
1521c                 | LR__2076
1521c     14 4E 05 F1 | 	add	fp, #20
15220     A7 1E 0A FB | 	rdlong	local01, fp wz
15224     14 4E 85 F1 | 	sub	fp, #20
15228     30 00 90 AD |  if_e	jmp	#LR__2077
1522c     14 4E 05 F1 | 	add	fp, #20
15230     A7 22 02 FB | 	rdlong	local03, fp
15234     14 4E 85 F1 | 	sub	fp, #20
15238     00 80 00 FF 
1523c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
15240     18 00 90 3D |  if_ae	jmp	#LR__2077
15244     14 4E 05 F1 | 	add	fp, #20
15248     A7 1E 02 FB | 	rdlong	local01, fp
1524c     01 1E 66 F0 | 	shl	local01, #1
15250     A7 1E 62 FC | 	wrlong	local01, fp
15254     14 4E 85 F1 | 	sub	fp, #20
15258     C0 FF 9F FD | 	jmp	#LR__2076
1525c                 | LR__2077
1525c                 | LR__2078
1525c     70 4E 05 F1 | 	add	fp, #112
15260     A7 12 02 F6 | 	mov	arg01, fp
15264     5C 4E 85 F1 | 	sub	fp, #92
15268     A7 14 02 FB | 	rdlong	arg02, fp
1526c     08 4E 05 F1 | 	add	fp, #8
15270     A7 16 02 FB | 	rdlong	arg03, fp
15274     A0 4E 05 F1 | 	add	fp, #160
15278     A7 1A 02 FB | 	rdlong	arg05, fp
1527c     BC 4E 85 F1 | 	sub	fp, #188
15280     01 18 06 F6 | 	mov	arg04, #1
15284     00 3A B0 FD | 	call	#__system___uitoa
15288     58 4E 05 F1 | 	add	fp, #88
1528c     A7 FA 61 FC | 	wrlong	result1, fp
15290     38 4E 85 F1 | 	sub	fp, #56
15294     A7 1E 02 FB | 	rdlong	local01, fp
15298     20 4E 85 F1 | 	sub	fp, #32
1529c     00 1E 56 F2 | 	cmps	local01, #0 wc
152a0     50 00 90 3D |  if_ae	jmp	#LR__2079
152a4     60 4E 05 F1 | 	add	fp, #96
152a8     A7 5A 68 FC | 	wrlong	#45, fp
152ac     50 4E 05 F1 | 	add	fp, #80
152b0     A7 12 02 F6 | 	mov	arg01, fp
152b4     90 4E 85 F1 | 	sub	fp, #144
152b8     A7 22 02 FB | 	rdlong	local03, fp
152bc     11 15 62 F6 | 	neg	arg02, local03
152c0     18 4E 05 F1 | 	add	fp, #24
152c4     A7 18 02 FB | 	rdlong	arg04, fp
152c8     84 4E 05 F1 | 	add	fp, #132
152cc     A7 28 02 FB | 	rdlong	local06, fp
152d0     BC 4E 85 F1 | 	sub	fp, #188
152d4     14 25 02 F6 | 	mov	local04, local06
152d8     0A 16 06 F6 | 	mov	arg03, #10
152dc     12 1B 02 F6 | 	mov	arg05, local04
152e0     A4 39 B0 FD | 	call	#__system___uitoa
152e4     5C 4E 05 F1 | 	add	fp, #92
152e8     A7 FA 61 FC | 	wrlong	result1, fp
152ec     5C 4E 85 F1 | 	sub	fp, #92
152f0     48 00 90 FD | 	jmp	#LR__2080
152f4                 | LR__2079
152f4     60 4E 05 F1 | 	add	fp, #96
152f8     A7 56 68 FC | 	wrlong	#43, fp
152fc     50 4E 05 F1 | 	add	fp, #80
15300     A7 12 02 F6 | 	mov	arg01, fp
15304     90 4E 85 F1 | 	sub	fp, #144
15308     A7 14 02 FB | 	rdlong	arg02, fp
1530c     18 4E 05 F1 | 	add	fp, #24
15310     A7 18 02 FB | 	rdlong	arg04, fp
15314     84 4E 05 F1 | 	add	fp, #132
15318     A7 28 02 FB | 	rdlong	local06, fp
1531c     BC 4E 85 F1 | 	sub	fp, #188
15320     14 25 02 F6 | 	mov	local04, local06
15324     0A 16 06 F6 | 	mov	arg03, #10
15328     12 1B 02 F6 | 	mov	arg05, local04
1532c     58 39 B0 FD | 	call	#__system___uitoa
15330     5C 4E 05 F1 | 	add	fp, #92
15334     A7 FA 61 FC | 	wrlong	result1, fp
15338     5C 4E 85 F1 | 	sub	fp, #92
1533c                 | LR__2080
1533c     24 4E 05 F1 | 	add	fp, #36
15340     A7 1E 0A FB | 	rdlong	local01, fp wz
15344     24 4E 85 F1 | 	sub	fp, #36
15348     2C 00 90 AD |  if_e	jmp	#LR__2081
1534c     50 4E 05 F1 | 	add	fp, #80
15350     A7 00 68 FC | 	wrlong	#0, fp
15354     04 4E 85 F1 | 	sub	fp, #4
15358     A7 00 68 FC | 	wrlong	#0, fp
1535c     6C 4E 05 F1 | 	add	fp, #108
15360     A7 1E 02 FB | 	rdlong	local01, fp
15364     01 1E 06 F1 | 	add	local01, #1
15368     64 4E 85 F1 | 	sub	fp, #100
1536c     A7 1E 62 FC | 	wrlong	local01, fp
15370     54 4E 85 F1 | 	sub	fp, #84
15374     88 00 90 FD | 	jmp	#LR__2084
15378                 | LR__2081
15378     20 4E 05 F1 | 	add	fp, #32
1537c     A7 1E 02 FB | 	rdlong	local01, fp
15380     20 4E 85 F1 | 	sub	fp, #32
15384     00 1E 56 F2 | 	cmps	local01, #0 wc
15388     40 00 90 3D |  if_ae	jmp	#LR__2082
1538c     20 4E 05 F1 | 	add	fp, #32
15390     A7 20 02 FB | 	rdlong	local02, fp
15394     30 4E 05 F1 | 	add	fp, #48
15398     A7 20 62 FC | 	wrlong	local02, fp
1539c     04 4E 85 F1 | 	sub	fp, #4
153a0     A7 20 62 FC | 	wrlong	local02, fp
153a4     2C 4E 85 F1 | 	sub	fp, #44
153a8     A7 1E 02 FB | 	rdlong	local01, fp
153ac     98 4E 05 F1 | 	add	fp, #152
153b0     A7 22 02 FB | 	rdlong	local03, fp
153b4     11 1F 02 F1 | 	add	local01, local03
153b8     01 1E 06 F1 | 	add	local01, #1
153bc     64 4E 85 F1 | 	sub	fp, #100
153c0     A7 1E 62 FC | 	wrlong	local01, fp
153c4     54 4E 85 F1 | 	sub	fp, #84
153c8     34 00 90 FD | 	jmp	#LR__2083
153cc                 | LR__2082
153cc     4C 4E 05 F1 | 	add	fp, #76
153d0     A7 00 68 FC | 	wrlong	#0, fp
153d4     2C 4E 85 F1 | 	sub	fp, #44
153d8     A7 1E 02 FB | 	rdlong	local01, fp
153dc     30 4E 05 F1 | 	add	fp, #48
153e0     A7 1E 62 FC | 	wrlong	local01, fp
153e4     68 4E 05 F1 | 	add	fp, #104
153e8     A7 22 02 FB | 	rdlong	local03, fp
153ec     11 1F 02 F1 | 	add	local01, local03
153f0     01 1E 06 F1 | 	add	local01, #1
153f4     64 4E 85 F1 | 	sub	fp, #100
153f8     A7 1E 62 FC | 	wrlong	local01, fp
153fc     54 4E 85 F1 | 	sub	fp, #84
15400                 | LR__2083
15400                 | LR__2084
15400     54 4E 05 F1 | 	add	fp, #84
15404     A7 1E 02 FB | 	rdlong	local01, fp
15408     08 4E 85 F1 | 	sub	fp, #8
1540c     A7 22 02 FB | 	rdlong	local03, fp
15410     11 1F 82 F1 | 	sub	local01, local03
15414     01 1E 06 F1 | 	add	local01, #1
15418     24 4E 85 F1 | 	sub	fp, #36
1541c     A7 1E 62 FC | 	wrlong	local01, fp
15420     04 4E 05 F1 | 	add	fp, #4
15424     A7 1E 0A FB | 	rdlong	local01, fp wz
15428     2C 4E 85 F1 | 	sub	fp, #44
1542c     28 4E 05 51 |  if_ne	add	fp, #40
15430     A7 22 02 5B |  if_ne	rdlong	local03, fp
15434     01 22 06 51 |  if_ne	add	local03, #1
15438     A7 22 62 5C |  if_ne	wrlong	local03, fp
1543c     28 4E 85 51 |  if_ne	sub	fp, #40
15440     1C 4E 05 F1 | 	add	fp, #28
15444     A7 1E 02 FB | 	rdlong	local01, fp
15448     1C 4E 85 F1 | 	sub	fp, #28
1544c     10 1E 0E F2 | 	cmp	local01, #16 wz
15450     28 4E 05 A1 |  if_e	add	fp, #40
15454     A7 1E 02 AB |  if_e	rdlong	local01, fp
15458     02 1E 06 A1 |  if_e	add	local01, #2
1545c     A7 1E 62 AC |  if_e	wrlong	local01, fp
15460     28 4E 85 A1 |  if_e	sub	fp, #40
15464     24 4E 05 F1 | 	add	fp, #36
15468     A7 1E 0A FB | 	rdlong	local01, fp wz
1546c     24 4E 85 F1 | 	sub	fp, #36
15470     28 00 90 AD |  if_e	jmp	#LR__2085
15474     28 4E 05 F1 | 	add	fp, #40
15478     A7 1E 02 FB | 	rdlong	local01, fp
1547c     02 22 06 F6 | 	mov	local03, #2
15480     34 4E 05 F1 | 	add	fp, #52
15484     A7 26 02 FB | 	rdlong	local05, fp
15488     13 23 02 F1 | 	add	local03, local05
1548c     11 1F 02 F1 | 	add	local01, local03
15490     34 4E 85 F1 | 	sub	fp, #52
15494     A7 1E 62 FC | 	wrlong	local01, fp
15498     28 4E 85 F1 | 	sub	fp, #40
1549c                 | LR__2085
1549c     28 4E 05 F1 | 	add	fp, #40
154a0     A7 1E 02 FB | 	rdlong	local01, fp
154a4     28 4E 85 F1 | 	sub	fp, #40
154a8     41 1E 56 F2 | 	cmps	local01, #65 wc
154ac     01 FA 65 36 |  if_ae	neg	result1, #1
154b0     08 05 90 3D |  if_ae	jmp	#LR__2113
154b4     3C 4E 05 F1 | 	add	fp, #60
154b8     A7 1E 0A FB | 	rdlong	local01, fp wz
154bc     3C 4E 85 F1 | 	sub	fp, #60
154c0     60 00 90 AD |  if_e	jmp	#LR__2086
154c4     C0 4E 05 F1 | 	add	fp, #192
154c8     A7 12 02 FB | 	rdlong	arg01, fp
154cc     94 4E 85 F1 | 	sub	fp, #148
154d0     A7 14 02 FB | 	rdlong	arg02, fp
154d4     14 4E 05 F1 | 	add	fp, #20
154d8     A7 16 02 FB | 	rdlong	arg03, fp
154dc     40 4E 85 F1 | 	sub	fp, #64
154e0     0C 3A B0 FD | 	call	#__system__emitsign_0266
154e4     18 4F 05 F1 | 	add	fp, #280
154e8     A7 FA 61 FC | 	wrlong	result1, fp
154ec     18 4F 85 F1 | 	sub	fp, #280
154f0     00 FA 55 F2 | 	cmps	result1, #0 wc
154f4     18 4F 05 C1 |  if_b	add	fp, #280
154f8     A7 FA 01 CB |  if_b	rdlong	result1, fp
154fc     18 4F 85 C1 |  if_b	sub	fp, #280
15500     B8 04 90 CD |  if_b	jmp	#LR__2113
15504     C0 4E 05 F1 | 	add	fp, #192
15508     A7 1E 02 FB | 	rdlong	local01, fp
1550c     58 4E 05 F1 | 	add	fp, #88
15510     A7 22 02 FB | 	rdlong	local03, fp
15514     11 1F 02 F1 | 	add	local01, local03
15518     58 4E 85 F1 | 	sub	fp, #88
1551c     A7 1E 62 FC | 	wrlong	local01, fp
15520     C0 4E 85 F1 | 	sub	fp, #192
15524                 | LR__2086
15524     4C 4E 05 F1 | 	add	fp, #76
15528     A7 1E 02 FB | 	rdlong	local01, fp
1552c     34 4E 85 F1 | 	sub	fp, #52
15530     A7 1E 62 FC | 	wrlong	local01, fp
15534     18 4E 85 F1 | 	sub	fp, #24
15538     97 9E 48 FB | 	callpa	#(@LR__2092-@LR__2087)>>2,fcache_load_ptr_
1553c                 | LR__2087
1553c     18 4E 05 F1 | 	add	fp, #24
15540     A7 20 02 FB | 	rdlong	local02, fp
15544     3C 4E 05 F1 | 	add	fp, #60
15548     A7 26 02 FB | 	rdlong	local05, fp
1554c     54 4E 85 F1 | 	sub	fp, #84
15550     13 21 52 F2 | 	cmps	local02, local05 wc
15554     20 01 90 3D |  if_ae	jmp	#LR__2093
15558     18 4E 05 F1 | 	add	fp, #24
1555c     A7 28 02 FB | 	rdlong	local06, fp
15560     18 4E 85 F1 | 	sub	fp, #24
15564     00 28 56 F2 | 	cmps	local06, #0 wc
15568     58 00 90 CD |  if_b	jmp	#LR__2088
1556c     18 4E 05 F1 | 	add	fp, #24
15570     A7 28 02 FB | 	rdlong	local06, fp
15574     40 4E 05 F1 | 	add	fp, #64
15578     A7 2A 02 FB | 	rdlong	local07, fp
1557c     58 4E 85 F1 | 	sub	fp, #88
15580     15 29 52 F2 | 	cmps	local06, local07 wc
15584     3C 00 90 3D |  if_ae	jmp	#LR__2088
15588     C0 4E 05 F1 | 	add	fp, #192
1558c     A7 2C 02 FB | 	rdlong	local08, fp
15590     16 2B 02 F6 | 	mov	local07, local08
15594     01 2A 06 F1 | 	add	local07, #1
15598     A7 2A 62 FC | 	wrlong	local07, fp
1559c     A8 4E 85 F1 | 	sub	fp, #168
155a0     A7 2A 02 FB | 	rdlong	local07, fp
155a4     15 2F 02 F6 | 	mov	local09, local07
155a8     58 4E 05 F1 | 	add	fp, #88
155ac     A7 30 02 F6 | 	mov	local10, fp
155b0     A7 2E 02 F1 | 	add	local09, fp
155b4     17 33 C2 FA | 	rdbyte	local11, local09
155b8     16 33 42 FC | 	wrbyte	local11, local08
155bc     70 4E 85 F1 | 	sub	fp, #112
155c0     20 00 90 FD | 	jmp	#LR__2089
155c4                 | LR__2088
155c4     C0 4E 05 F1 | 	add	fp, #192
155c8     A7 2C 02 FB | 	rdlong	local08, fp
155cc     16 2F 02 F6 | 	mov	local09, local08
155d0     01 2E 06 F1 | 	add	local09, #1
155d4     A7 2E 62 FC | 	wrlong	local09, fp
155d8     C0 4E 85 F1 | 	sub	fp, #192
155dc     30 2E 06 F6 | 	mov	local09, #48
155e0     16 61 48 FC | 	wrbyte	#48, local08
155e4                 | LR__2089
155e4     18 4E 05 F1 | 	add	fp, #24
155e8     A7 28 02 FB | 	rdlong	local06, fp
155ec     38 4E 05 F1 | 	add	fp, #56
155f0     A7 34 02 FB | 	rdlong	local12, fp
155f4     50 4E 85 F1 | 	sub	fp, #80
155f8     1A 29 0A F2 | 	cmp	local06, local12 wz
155fc     5C 00 90 5D |  if_ne	jmp	#LR__2091
15600     10 4F 05 F1 | 	add	fp, #272
15604     A7 2A 02 FB | 	rdlong	local07, fp
15608     10 4F 85 F1 | 	sub	fp, #272
1560c     15 2F 0A F6 | 	mov	local09, local07 wz
15610     28 00 90 5D |  if_ne	jmp	#LR__2090
15614     54 4E 05 F1 | 	add	fp, #84
15618     A7 32 02 FB | 	rdlong	local11, fp
1561c     19 31 02 F6 | 	mov	local10, local11
15620     01 30 86 F1 | 	sub	local10, #1
15624     3C 4E 85 F1 | 	sub	fp, #60
15628     A7 36 02 FB | 	rdlong	local13, fp
1562c     18 4E 85 F1 | 	sub	fp, #24
15630     1B 39 02 F6 | 	mov	local14, local13
15634     18 39 52 F2 | 	cmps	local14, local10 wc
15638     20 00 90 3D |  if_ae	jmp	#LR__2091
1563c                 | LR__2090
1563c     C0 4E 05 F1 | 	add	fp, #192
15640     A7 2C 02 FB | 	rdlong	local08, fp
15644     16 35 02 F6 | 	mov	local12, local08
15648     01 34 06 F1 | 	add	local12, #1
1564c     A7 34 62 FC | 	wrlong	local12, fp
15650     C0 4E 85 F1 | 	sub	fp, #192
15654     2E 2E 06 F6 | 	mov	local09, #46
15658     16 5D 48 FC | 	wrbyte	#46, local08
1565c                 | LR__2091
1565c     18 4E 05 F1 | 	add	fp, #24
15660     A7 3A 02 FB | 	rdlong	local15, fp
15664     1D 35 02 F6 | 	mov	local12, local15
15668     01 34 06 F1 | 	add	local12, #1
1566c     A7 34 62 FC | 	wrlong	local12, fp
15670     18 4E 85 F1 | 	sub	fp, #24
15674     C4 FE 9F FD | 	jmp	#LR__2087
15678                 | LR__2092
15678                 | LR__2093
15678     34 4E 05 F1 | 	add	fp, #52
1567c     A7 1E 0A FB | 	rdlong	local01, fp wz
15680     34 4E 85 F1 | 	sub	fp, #52
15684     A0 00 90 AD |  if_e	jmp	#LR__2097
15688     C0 4E 05 F1 | 	add	fp, #192
1568c     A7 1E 02 FB | 	rdlong	local01, fp
15690     01 1E 86 F1 | 	sub	local01, #1
15694     A7 1E 62 FC | 	wrlong	local01, fp
15698     C0 4E 85 F1 | 	sub	fp, #192
1569c     97 26 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
156a0                 | LR__2094
156a0     C0 4E 05 F1 | 	add	fp, #192
156a4     A7 1E 02 FB | 	rdlong	local01, fp
156a8     04 4E 05 F1 | 	add	fp, #4
156ac     A7 22 02 FB | 	rdlong	local03, fp
156b0     C4 4E 85 F1 | 	sub	fp, #196
156b4     11 1F 5A F2 | 	cmps	local01, local03 wcz
156b8     30 00 90 ED |  if_be	jmp	#LR__2096
156bc     C0 4E 05 F1 | 	add	fp, #192
156c0     A7 28 02 FB | 	rdlong	local06, fp
156c4     C0 4E 85 F1 | 	sub	fp, #192
156c8     14 25 C2 FA | 	rdbyte	local04, local06
156cc     30 24 0E F2 | 	cmp	local04, #48 wz
156d0     18 00 90 5D |  if_ne	jmp	#LR__2096
156d4     C0 4E 05 F1 | 	add	fp, #192
156d8     A7 1E 02 FB | 	rdlong	local01, fp
156dc     01 1E 86 F1 | 	sub	local01, #1
156e0     A7 1E 62 FC | 	wrlong	local01, fp
156e4     C0 4E 85 F1 | 	sub	fp, #192
156e8     B4 FF 9F FD | 	jmp	#LR__2094
156ec                 | LR__2095
156ec                 | LR__2096
156ec     C0 4E 05 F1 | 	add	fp, #192
156f0     A7 20 02 FB | 	rdlong	local02, fp
156f4     C0 4E 85 F1 | 	sub	fp, #192
156f8     10 1F C2 FA | 	rdbyte	local01, local02
156fc     2E 1E 0E F2 | 	cmp	local01, #46 wz
15700     C0 4E 05 A1 |  if_e	add	fp, #192
15704     A7 1E 02 AB |  if_e	rdlong	local01, fp
15708     01 1E 86 A1 |  if_e	sub	local01, #1
1570c     A7 1E 62 AC |  if_e	wrlong	local01, fp
15710     C0 4E 85 A1 |  if_e	sub	fp, #192
15714     C0 4E 05 F1 | 	add	fp, #192
15718     A7 22 02 FB | 	rdlong	local03, fp
1571c     01 22 06 F1 | 	add	local03, #1
15720     A7 22 62 FC | 	wrlong	local03, fp
15724     C0 4E 85 F1 | 	sub	fp, #192
15728                 | LR__2097
15728     24 4E 05 F1 | 	add	fp, #36
1572c     A7 1E 0A FB | 	rdlong	local01, fp wz
15730     24 4E 85 F1 | 	sub	fp, #36
15734     B4 00 90 AD |  if_e	jmp	#LR__2100
15738     C0 4E 05 F1 | 	add	fp, #192
1573c     A7 20 02 FB | 	rdlong	local02, fp
15740     10 23 02 F6 | 	mov	local03, local02
15744     01 22 06 F1 | 	add	local03, #1
15748     A7 22 62 FC | 	wrlong	local03, fp
1574c     90 4E 85 F1 | 	sub	fp, #144
15750     A7 24 02 FB | 	rdlong	local04, fp
15754     10 25 42 FC | 	wrbyte	local04, local02
15758     90 4E 05 F1 | 	add	fp, #144
1575c     A7 20 02 FB | 	rdlong	local02, fp
15760     10 23 02 F6 | 	mov	local03, local02
15764     01 22 06 F1 | 	add	local03, #1
15768     A7 22 62 FC | 	wrlong	local03, fp
1576c     60 4E 85 F1 | 	sub	fp, #96
15770     A7 24 02 FB | 	rdlong	local04, fp
15774     10 25 42 FC | 	wrbyte	local04, local02
15778     48 4E 85 F1 | 	sub	fp, #72
1577c     A7 00 68 FC | 	wrlong	#0, fp
15780     18 4E 85 F1 | 	sub	fp, #24
15784                 | LR__2098
15784     18 4E 05 F1 | 	add	fp, #24
15788     A7 20 02 FB | 	rdlong	local02, fp
1578c     44 4E 05 F1 | 	add	fp, #68
15790     A7 26 02 FB | 	rdlong	local05, fp
15794     5C 4E 85 F1 | 	sub	fp, #92
15798     13 21 52 F2 | 	cmps	local02, local05 wc
1579c     4C 00 90 3D |  if_ae	jmp	#LR__2099
157a0     C0 4E 05 F1 | 	add	fp, #192
157a4     A7 2C 02 FB | 	rdlong	local08, fp
157a8     16 35 02 F6 | 	mov	local12, local08
157ac     01 34 06 F1 | 	add	local12, #1
157b0     A7 34 62 FC | 	wrlong	local12, fp
157b4     A8 4E 85 F1 | 	sub	fp, #168
157b8     A7 2A 02 FB | 	rdlong	local07, fp
157bc     15 2F 02 F6 | 	mov	local09, local07
157c0     98 4E 05 F1 | 	add	fp, #152
157c4     A7 30 02 F6 | 	mov	local10, fp
157c8     A7 2E 02 F1 | 	add	local09, fp
157cc     17 33 C2 FA | 	rdbyte	local11, local09
157d0     16 33 42 FC | 	wrbyte	local11, local08
157d4     98 4E 85 F1 | 	sub	fp, #152
157d8     A7 34 02 FB | 	rdlong	local12, fp
157dc     01 34 06 F1 | 	add	local12, #1
157e0     A7 34 62 FC | 	wrlong	local12, fp
157e4     18 4E 85 F1 | 	sub	fp, #24
157e8     98 FF 9F FD | 	jmp	#LR__2098
157ec                 | LR__2099
157ec                 | LR__2100
157ec     C0 4E 05 F1 | 	add	fp, #192
157f0     A7 1E 02 FB | 	rdlong	local01, fp
157f4     C0 4E 85 F1 | 	sub	fp, #192
157f8     0F 01 48 FC | 	wrbyte	#0, local01
157fc                 | LR__2101
157fc     6C 4E 05 F1 | 	add	fp, #108
15800     A7 1E 0A FB | 	rdlong	local01, fp wz
15804     6C 4E 85 F1 | 	sub	fp, #108
15808     90 01 90 AD |  if_e	jmp	#LR__2112
1580c     48 4E 05 F1 | 	add	fp, #72
15810     A7 22 0A FB | 	rdlong	local03, fp wz
15814     48 4E 85 F1 | 	sub	fp, #72
15818     80 01 90 AD |  if_e	jmp	#LR__2112
1581c     C4 4E 05 F1 | 	add	fp, #196
15820     A7 12 02 FB | 	rdlong	arg01, fp
15824     C4 4E 85 F1 | 	sub	fp, #196
15828     09 3D 02 F6 | 	mov	local16, arg01
1582c     97 06 48 FB | 	callpa	#(@LR__2103-@LR__2102)>>2,fcache_load_ptr_
15830                 | LR__2102
15830     1E FB C9 FA | 	rdbyte	result1, local16 wz
15834     01 3C 06 51 |  if_ne	add	local16, #1
15838     F4 FF 9F 5D |  if_ne	jmp	#LR__2102
1583c                 | LR__2103
1583c     09 3D 82 F1 | 	sub	local16, arg01
15840     1E 25 02 F6 | 	mov	local04, local16
15844     6C 4E 05 F1 | 	add	fp, #108
15848     A7 28 02 FB | 	rdlong	local06, fp
1584c     6C 4E 85 F1 | 	sub	fp, #108
15850     14 25 5A F2 | 	cmps	local04, local06 wcz
15854     44 01 90 ED |  if_be	jmp	#LR__2112
15858     C4 4E 05 F1 | 	add	fp, #196
1585c     A7 1E 02 FB | 	rdlong	local01, fp
15860     5C 4E 05 F1 | 	add	fp, #92
15864     A7 1E 62 FC | 	wrlong	local01, fp
15868     FC 4E 85 F1 | 	sub	fp, #252
1586c     A7 1E 0A FB | 	rdlong	local01, fp wz
15870     24 4E 85 F1 | 	sub	fp, #36
15874     20 00 90 AD |  if_e	jmp	#LR__2104
15878     B8 4E 05 F1 | 	add	fp, #184
1587c     A7 00 68 FC | 	wrlong	#0, fp
15880     4C 4E 85 F1 | 	sub	fp, #76
15884     A7 1E 02 FB | 	rdlong	local01, fp
15888     B0 4E 05 F1 | 	add	fp, #176
1588c     A7 1E 62 FC | 	wrlong	local01, fp
15890     1C 4F 85 F1 | 	sub	fp, #284
15894     24 00 90 FD | 	jmp	#LR__2105
15898                 | LR__2104
15898     6C 4E 05 F1 | 	add	fp, #108
1589c     A7 1E 02 FB | 	rdlong	local01, fp
158a0     01 1E 86 F1 | 	sub	local01, #1
158a4     4C 4E 05 F1 | 	add	fp, #76
158a8     A7 22 02 FB | 	rdlong	local03, fp
158ac     11 1F 82 F1 | 	sub	local01, local03
158b0     64 4E 05 F1 | 	add	fp, #100
158b4     A7 1E 62 FC | 	wrlong	local01, fp
158b8     1C 4F 85 F1 | 	sub	fp, #284
158bc                 | LR__2105
158bc     97 20 48 FB | 	callpa	#(@LR__2107-@LR__2106)>>2,fcache_load_ptr_
158c0                 | LR__2106
158c0     1C 4F 05 F1 | 	add	fp, #284
158c4     A7 1E 0A FB | 	rdlong	local01, fp wz
158c8     1C 4F 85 F1 | 	sub	fp, #284
158cc     30 00 90 AD |  if_e	jmp	#LR__2108
158d0     20 4F 05 F1 | 	add	fp, #288
158d4     A7 20 02 FB | 	rdlong	local02, fp
158d8     10 23 02 F6 | 	mov	local03, local02
158dc     01 22 06 F1 | 	add	local03, #1
158e0     A7 22 62 FC | 	wrlong	local03, fp
158e4     10 55 48 FC | 	wrbyte	#42, local02
158e8     04 4E 85 F1 | 	sub	fp, #4
158ec     A7 1E 02 FB | 	rdlong	local01, fp
158f0     01 1E 86 F1 | 	sub	local01, #1
158f4     A7 1E 62 FC | 	wrlong	local01, fp
158f8     1C 4F 85 F1 | 	sub	fp, #284
158fc     C0 FF 9F FD | 	jmp	#LR__2106
15900                 | LR__2107
15900                 | LR__2108
15900     B8 4E 05 F1 | 	add	fp, #184
15904     A7 1E 0A FB | 	rdlong	local01, fp wz
15908     B8 4E 85 F1 | 	sub	fp, #184
1590c     70 00 90 AD |  if_e	jmp	#LR__2111
15910     20 4F 05 F1 | 	add	fp, #288
15914     A7 20 02 FB | 	rdlong	local02, fp
15918     10 23 02 F6 | 	mov	local03, local02
1591c     01 22 06 F1 | 	add	local03, #1
15920     A7 22 62 FC | 	wrlong	local03, fp
15924     10 5D 48 FC | 	wrbyte	#46, local02
15928     04 4E 85 F1 | 	sub	fp, #4
1592c     A7 00 68 FC | 	wrlong	#0, fp
15930     1C 4F 85 F1 | 	sub	fp, #284
15934                 | LR__2109
15934     1C 4F 05 F1 | 	add	fp, #284
15938     A7 20 02 FB | 	rdlong	local02, fp
1593c     64 4E 85 F1 | 	sub	fp, #100
15940     A7 26 02 FB | 	rdlong	local05, fp
15944     B8 4E 85 F1 | 	sub	fp, #184
15948     13 21 52 F2 | 	cmps	local02, local05 wc
1594c     30 00 90 3D |  if_ae	jmp	#LR__2110
15950     20 4F 05 F1 | 	add	fp, #288
15954     A7 2C 02 FB | 	rdlong	local08, fp
15958     16 35 02 F6 | 	mov	local12, local08
1595c     01 34 06 F1 | 	add	local12, #1
15960     A7 34 62 FC | 	wrlong	local12, fp
15964     16 55 48 FC | 	wrbyte	#42, local08
15968     04 4E 85 F1 | 	sub	fp, #4
1596c     A7 34 02 FB | 	rdlong	local12, fp
15970     01 34 06 F1 | 	add	local12, #1
15974     A7 34 62 FC | 	wrlong	local12, fp
15978     1C 4F 85 F1 | 	sub	fp, #284
1597c     B4 FF 9F FD | 	jmp	#LR__2109
15980                 | LR__2110
15980                 | LR__2111
15980     20 4F 05 F1 | 	add	fp, #288
15984     A7 20 02 FB | 	rdlong	local02, fp
15988     10 23 02 F6 | 	mov	local03, local02
1598c     01 22 06 F1 | 	add	local03, #1
15990     A7 22 62 FC | 	wrlong	local03, fp
15994     20 4F 85 F1 | 	sub	fp, #288
15998     10 01 48 FC | 	wrbyte	#0, local02
1599c                 | LR__2112
1599c     04 4E 05 F1 | 	add	fp, #4
159a0     A7 12 02 FB | 	rdlong	arg01, fp
159a4     04 4E 05 F1 | 	add	fp, #4
159a8     A7 14 02 FB | 	rdlong	arg02, fp
159ac     BC 4E 05 F1 | 	add	fp, #188
159b0     A7 16 02 FB | 	rdlong	arg03, fp
159b4     C4 4E 85 F1 | 	sub	fp, #196
159b8     C4 EE BF FD | 	call	#__system___fmtstr
159bc                 | LR__2113
159bc     A7 F0 03 F6 | 	mov	ptra, fp
159c0     B2 00 A0 FD | 	call	#popregs_
159c4                 | __system___fmtfloat_ret
159c4     2D 00 64 FD | 	ret
159c8                 | 
159c8                 | __system__Left_S
159c8     04 4A 05 F6 | 	mov	COUNT_, #4
159cc     A8 00 A0 FD | 	call	#pushregs_
159d0     09 1F 02 F6 | 	mov	local01, arg01
159d4     0A 21 02 F6 | 	mov	local02, arg02
159d8     01 20 56 F2 | 	cmps	local02, #1 wc
159dc     16 01 00 CF 
159e0     4E FB 05 C6 |  if_b	mov	result1, ##@LR__3983
159e4     5C 00 90 CD |  if_b	jmp	#LR__2123
159e8     0F 13 02 F6 | 	mov	arg01, local01
159ec     09 23 02 F6 | 	mov	local03, arg01
159f0     97 06 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
159f4                 | LR__2120
159f4     11 FB C9 FA | 	rdbyte	result1, local03 wz
159f8     01 22 06 51 |  if_ne	add	local03, #1
159fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2120
15a00                 | LR__2121
15a00     09 23 82 F1 | 	sub	local03, arg01
15a04     11 FB 01 F6 | 	mov	result1, local03
15a08     10 FB 59 F2 | 	cmps	result1, local02 wcz
15a0c     0F FB 01 E6 |  if_be	mov	result1, local01
15a10     30 00 90 ED |  if_be	jmp	#LR__2123
15a14     10 13 02 F6 | 	mov	arg01, local02
15a18     02 12 06 F1 | 	add	arg01, #2
15a1c     00 1A B0 FD | 	call	#__system___gc_alloc_managed
15a20     FD 24 0A F6 | 	mov	local04, result1 wz
15a24     18 00 90 AD |  if_e	jmp	#LR__2122
15a28     12 13 02 F6 | 	mov	arg01, local04
15a2c     0F 15 02 F6 | 	mov	arg02, local01
15a30     10 17 02 F6 | 	mov	arg03, local02
15a34     68 DF BF FD | 	call	#__system____builtin_memmove
15a38     12 21 02 F1 | 	add	local02, local04
15a3c     10 01 48 FC | 	wrbyte	#0, local02
15a40                 | LR__2122
15a40     12 FB 01 F6 | 	mov	result1, local04
15a44                 | LR__2123
15a44     A7 F0 03 F6 | 	mov	ptra, fp
15a48     B2 00 A0 FD | 	call	#popregs_
15a4c                 | __system__Left_S_ret
15a4c     2D 00 64 FD | 	ret
15a50                 | 
15a50                 | __system__Right_S
15a50     05 4A 05 F6 | 	mov	COUNT_, #5
15a54     A8 00 A0 FD | 	call	#pushregs_
15a58     09 1F 02 F6 | 	mov	local01, arg01
15a5c     0A 21 02 F6 | 	mov	local02, arg02
15a60     01 20 56 F2 | 	cmps	local02, #1 wc
15a64     16 01 00 CF 
15a68     4F FB 05 C6 |  if_b	mov	result1, ##@LR__3984
15a6c     64 00 90 CD |  if_b	jmp	#LR__2133
15a70     0F 13 02 F6 | 	mov	arg01, local01
15a74     09 23 02 F6 | 	mov	local03, arg01
15a78     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
15a7c                 | LR__2130
15a7c     11 FB C9 FA | 	rdbyte	result1, local03 wz
15a80     01 22 06 51 |  if_ne	add	local03, #1
15a84     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
15a88                 | LR__2131
15a88     09 23 82 F1 | 	sub	local03, arg01
15a8c     11 FB 01 F6 | 	mov	result1, local03
15a90     FD 24 02 F6 | 	mov	local04, result1
15a94     10 25 5A F2 | 	cmps	local04, local02 wcz
15a98     0F FB 01 E6 |  if_be	mov	result1, local01
15a9c     34 00 90 ED |  if_be	jmp	#LR__2133
15aa0     10 13 02 F6 | 	mov	arg01, local02
15aa4     02 12 06 F1 | 	add	arg01, #2
15aa8     74 19 B0 FD | 	call	#__system___gc_alloc_managed
15aac     FD 26 0A F6 | 	mov	local05, result1 wz
15ab0     1C 00 90 AD |  if_e	jmp	#LR__2132
15ab4     10 25 82 F1 | 	sub	local04, local02
15ab8     0F 25 02 F1 | 	add	local04, local01
15abc     01 20 06 F1 | 	add	local02, #1
15ac0     13 13 02 F6 | 	mov	arg01, local05
15ac4     12 15 02 F6 | 	mov	arg02, local04
15ac8     10 17 02 F6 | 	mov	arg03, local02
15acc     D0 DE BF FD | 	call	#__system____builtin_memmove
15ad0                 | LR__2132
15ad0     13 FB 01 F6 | 	mov	result1, local05
15ad4                 | LR__2133
15ad4     A7 F0 03 F6 | 	mov	ptra, fp
15ad8     B2 00 A0 FD | 	call	#popregs_
15adc                 | __system__Right_S_ret
15adc     2D 00 64 FD | 	ret
15ae0                 | 
15ae0                 | __system__Mid_S
15ae0     05 4A 05 F6 | 	mov	COUNT_, #5
15ae4     A8 00 A0 FD | 	call	#pushregs_
15ae8     09 1F 02 F6 | 	mov	local01, arg01
15aec     0A 21 02 F6 | 	mov	local02, arg02
15af0     01 16 56 F2 | 	cmps	arg03, #1 wc
15af4     16 01 00 CF 
15af8     50 FB 05 C6 |  if_b	mov	result1, ##@LR__3985
15afc     80 00 90 CD |  if_b	jmp	#LR__2143
15b00     01 20 86 F1 | 	sub	local02, #1
15b04     00 20 56 F3 | 	fges	local02, #0 wc
15b08     0F 13 02 F6 | 	mov	arg01, local01
15b0c     09 23 02 F6 | 	mov	local03, arg01
15b10     97 06 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
15b14                 | LR__2140
15b14     11 FB C9 FA | 	rdbyte	result1, local03 wz
15b18     01 22 06 51 |  if_ne	add	local03, #1
15b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2140
15b20                 | LR__2141
15b20     09 23 82 F1 | 	sub	local03, arg01
15b24     11 FB 01 F6 | 	mov	result1, local03
15b28     FD 14 02 F6 | 	mov	arg02, result1
15b2c     10 15 52 F2 | 	cmps	arg02, local02 wc
15b30     16 01 00 CF 
15b34     51 FB 05 C6 |  if_b	mov	result1, ##@LR__3986
15b38     44 00 90 CD |  if_b	jmp	#LR__2143
15b3c     0A 25 02 F6 | 	mov	local04, arg02
15b40     10 25 82 F1 | 	sub	local04, local02
15b44     0B 25 5A F2 | 	cmps	local04, arg03 wcz
15b48     0B 25 02 16 |  if_a	mov	local04, arg03
15b4c     12 13 02 F6 | 	mov	arg01, local04
15b50     02 12 06 F1 | 	add	arg01, #2
15b54     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
15b58     FD 26 0A F6 | 	mov	local05, result1 wz
15b5c     1C 00 90 AD |  if_e	jmp	#LR__2142
15b60     0F 21 02 F1 | 	add	local02, local01
15b64     13 13 02 F6 | 	mov	arg01, local05
15b68     10 15 02 F6 | 	mov	arg02, local02
15b6c     12 17 02 F6 | 	mov	arg03, local04
15b70     2C DE BF FD | 	call	#__system____builtin_memmove
15b74     13 25 02 F1 | 	add	local04, local05
15b78     12 01 48 FC | 	wrbyte	#0, local04
15b7c                 | LR__2142
15b7c     13 FB 01 F6 | 	mov	result1, local05
15b80                 | LR__2143
15b80     A7 F0 03 F6 | 	mov	ptra, fp
15b84     B2 00 A0 FD | 	call	#popregs_
15b88                 | __system__Mid_S_ret
15b88     2D 00 64 FD | 	ret
15b8c                 | 
15b8c                 | __system__Chr_S
15b8c     01 4A 05 F6 | 	mov	COUNT_, #1
15b90     A8 00 A0 FD | 	call	#pushregs_
15b94     09 1F 02 F6 | 	mov	local01, arg01
15b98     03 12 06 F6 | 	mov	arg01, #3
15b9c     80 18 B0 FD | 	call	#__system___gc_alloc_managed
15ba0     00 FA 4D F2 | 	cmps	result1, #0 wz
15ba4     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
15ba8     01 FA 05 51 |  if_ne	add	result1, #1
15bac     FD 00 48 5C |  if_ne	wrbyte	#0, result1
15bb0     01 FA 85 51 |  if_ne	sub	result1, #1
15bb4     A7 F0 03 F6 | 	mov	ptra, fp
15bb8     B2 00 A0 FD | 	call	#popregs_
15bbc                 | __system__Chr_S_ret
15bbc     2D 00 64 FD | 	ret
15bc0                 | 
15bc0                 | __system__Number_S
15bc0     08 4A 05 F6 | 	mov	COUNT_, #8
15bc4     A8 00 A0 FD | 	call	#pushregs_
15bc8     09 1F 02 F6 | 	mov	local01, arg01
15bcc     0A 21 0A F6 | 	mov	local02, arg02 wz
15bd0     0B 23 02 F6 | 	mov	local03, arg03
15bd4     3C 00 90 5D |  if_ne	jmp	#LR__2152
15bd8     01 20 06 F6 | 	mov	local02, #1
15bdc     11 25 02 F6 | 	mov	local04, local03
15be0     01 26 06 F6 | 	mov	local05, #1
15be4     97 16 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
15be8                 | LR__2150
15be8     00 28 06 F6 | 	mov	local06, #0
15bec     0F 25 1A F2 | 	cmp	local04, local01 wcz
15bf0     01 28 66 E6 |  if_be	neg	local06, #1
15bf4     12 27 12 F2 | 	cmp	local05, local04 wc
15bf8     15 2B A2 F1 | 	subx	local07, local07
15bfc     15 29 CA F7 | 	test	local06, local07 wz
15c00     11 25 02 5D |  if_ne	qmul	local04, local03
15c04     12 27 02 56 |  if_ne	mov	local05, local04
15c08     01 20 06 51 |  if_ne	add	local02, #1
15c0c     18 24 62 5D |  if_ne	getqx	local04
15c10     D4 FF 9F 5D |  if_ne	jmp	#LR__2150
15c14                 | LR__2151
15c14                 | LR__2152
15c14     20 20 36 F3 | 	fle	local02, #32 wc
15c18     10 13 02 F6 | 	mov	arg01, local02
15c1c     02 12 06 F1 | 	add	arg01, #2
15c20     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
15c24     FD 28 02 F6 | 	mov	local06, result1
15c28     10 2B 02 F6 | 	mov	local07, local02
15c2c     14 2B 02 F1 | 	add	local07, local06
15c30     15 01 48 FC | 	wrbyte	#0, local07
15c34     97 1A 48 FB | 	callpa	#(@LR__2154-@LR__2153)>>2,fcache_load_ptr_
15c38                 | LR__2153
15c38     01 20 16 F2 | 	cmp	local02, #1 wc
15c3c     2C 00 90 CD |  if_b	jmp	#LR__2155
15c40     11 1F 12 FD | 	qdiv	local01, local03
15c44     01 20 86 F1 | 	sub	local02, #1
15c48     10 2B 02 F6 | 	mov	local07, local02
15c4c     14 2B 02 F1 | 	add	local07, local06
15c50     19 2C 62 FD | 	getqy	local08
15c54     0A 2C 16 F2 | 	cmp	local08, #10 wc
15c58     30 2C 06 C1 |  if_b	add	local08, #48
15c5c     37 2C 06 31 |  if_ae	add	local08, #55
15c60     15 2D 42 FC | 	wrbyte	local08, local07
15c64     18 1E 62 FD | 	getqx	local01
15c68     CC FF 9F FD | 	jmp	#LR__2153
15c6c                 | LR__2154
15c6c                 | LR__2155
15c6c     14 FB 01 F6 | 	mov	result1, local06
15c70     A7 F0 03 F6 | 	mov	ptra, fp
15c74     B2 00 A0 FD | 	call	#popregs_
15c78                 | __system__Number_S_ret
15c78     2D 00 64 FD | 	ret
15c7c                 | 
15c7c                 | __system__LCase_S
15c7c     07 4A 05 F6 | 	mov	COUNT_, #7
15c80     A8 00 A0 FD | 	call	#pushregs_
15c84     09 1F 02 F6 | 	mov	local01, arg01
15c88     09 21 02 F6 | 	mov	local02, arg01
15c8c     97 06 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
15c90                 | LR__2160
15c90     10 FB C9 FA | 	rdbyte	result1, local02 wz
15c94     01 20 06 51 |  if_ne	add	local02, #1
15c98     F4 FF 9F 5D |  if_ne	jmp	#LR__2160
15c9c                 | LR__2161
15c9c     09 21 82 F1 | 	sub	local02, arg01
15ca0     10 FB 01 F6 | 	mov	result1, local02
15ca4     FD 20 0A F6 | 	mov	local02, result1 wz
15ca8     16 01 00 AF 
15cac     52 FB 05 A6 |  if_e	mov	result1, ##@LR__3987
15cb0     7C 00 90 AD |  if_e	jmp	#LR__2167
15cb4     10 13 02 F6 | 	mov	arg01, local02
15cb8     02 12 06 F1 | 	add	arg01, #2
15cbc     60 17 B0 FD | 	call	#__system___gc_alloc_managed
15cc0     FD 22 0A F6 | 	mov	local03, result1 wz
15cc4     64 00 90 AD |  if_e	jmp	#LR__2166
15cc8     01 24 66 F6 | 	neg	local04, #1
15ccc     97 26 48 FB | 	callpa	#(@LR__2165-@LR__2162)>>2,fcache_load_ptr_
15cd0                 | LR__2162
15cd0     01 24 06 F1 | 	add	local04, #1
15cd4     12 27 02 F6 | 	mov	local05, local04
15cd8     0F 27 02 F1 | 	add	local05, local01
15cdc     13 29 C2 FA | 	rdbyte	local06, local05
15ce0     41 28 56 F2 | 	cmps	local06, #65 wc
15ce4     18 00 90 CD |  if_b	jmp	#LR__2163
15ce8     5B 28 56 F2 | 	cmps	local06, #91 wc
15cec     12 2B 02 C6 |  if_b	mov	local07, local04
15cf0     11 2B 02 C1 |  if_b	add	local07, local03
15cf4     20 28 06 C1 |  if_b	add	local06, #32
15cf8     15 29 42 CC |  if_b	wrbyte	local06, local07
15cfc     0C 00 90 CD |  if_b	jmp	#LR__2164
15d00                 | LR__2163
15d00     12 2B 02 F6 | 	mov	local07, local04
15d04     11 2B 02 F1 | 	add	local07, local03
15d08     15 29 42 FC | 	wrbyte	local06, local07
15d0c                 | LR__2164
15d0c     10 29 02 F6 | 	mov	local06, local02
15d10     01 28 86 F1 | 	sub	local06, #1
15d14     14 25 0A F2 | 	cmp	local04, local06 wz
15d18     B4 FF 9F 5D |  if_ne	jmp	#LR__2162
15d1c                 | LR__2165
15d1c     11 21 02 F1 | 	add	local02, local03
15d20     10 01 48 FC | 	wrbyte	#0, local02
15d24     11 FB 01 F6 | 	mov	result1, local03
15d28     04 00 90 FD | 	jmp	#LR__2167
15d2c                 | LR__2166
15d2c     11 FB 01 F6 | 	mov	result1, local03
15d30                 | LR__2167
15d30     A7 F0 03 F6 | 	mov	ptra, fp
15d34     B2 00 A0 FD | 	call	#popregs_
15d38                 | __system__LCase_S_ret
15d38     2D 00 64 FD | 	ret
15d3c                 | 
15d3c                 | __system__LTrim_S
15d3c     05 4A 05 F6 | 	mov	COUNT_, #5
15d40     A8 00 A0 FD | 	call	#pushregs_
15d44     09 1F 02 F6 | 	mov	local01, arg01
15d48     09 21 02 F6 | 	mov	local02, arg01
15d4c     97 06 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
15d50                 | LR__2170
15d50     10 FB C9 FA | 	rdbyte	result1, local02 wz
15d54     01 20 06 51 |  if_ne	add	local02, #1
15d58     F4 FF 9F 5D |  if_ne	jmp	#LR__2170
15d5c                 | LR__2171
15d5c     09 21 82 F1 | 	sub	local02, arg01
15d60     10 FB 01 F6 | 	mov	result1, local02
15d64     FD 20 0A F6 | 	mov	local02, result1 wz
15d68     16 01 00 AF 
15d6c     53 FB 05 A6 |  if_e	mov	result1, ##@LR__3988
15d70     7C 00 90 AD |  if_e	jmp	#LR__2176
15d74     00 22 06 F6 | 	mov	local03, #0
15d78     10 25 02 F6 | 	mov	local04, local02
15d7c                 | LR__2172
15d7c     12 23 52 F2 | 	cmps	local03, local04 wc
15d80     68 00 90 3D |  if_ae	jmp	#LR__2175
15d84     11 17 02 F6 | 	mov	arg03, local03
15d88     0F 17 02 F1 | 	add	arg03, local01
15d8c     0B 17 C2 FA | 	rdbyte	arg03, arg03
15d90     20 16 0E F2 | 	cmp	arg03, #32 wz
15d94     4C 00 90 AD |  if_e	jmp	#LR__2174
15d98     10 13 02 F6 | 	mov	arg01, local02
15d9c     11 13 82 F1 | 	sub	arg01, local03
15da0     02 12 06 F1 | 	add	arg01, #2
15da4     78 16 B0 FD | 	call	#__system___gc_alloc_managed
15da8     FD 26 0A F6 | 	mov	local05, result1 wz
15dac     2C 00 90 AD |  if_e	jmp	#LR__2173
15db0     11 15 02 F6 | 	mov	arg02, local03
15db4     0F 15 02 F1 | 	add	arg02, local01
15db8     10 17 02 F6 | 	mov	arg03, local02
15dbc     11 17 82 F1 | 	sub	arg03, local03
15dc0     13 13 02 F6 | 	mov	arg01, local05
15dc4     D8 DB BF FD | 	call	#__system____builtin_memmove
15dc8     11 21 82 F1 | 	sub	local02, local03
15dcc     13 21 02 F1 | 	add	local02, local05
15dd0     10 01 48 FC | 	wrbyte	#0, local02
15dd4     13 FB 01 F6 | 	mov	result1, local05
15dd8     14 00 90 FD | 	jmp	#LR__2176
15ddc                 | LR__2173
15ddc     13 FB 01 F6 | 	mov	result1, local05
15de0     0C 00 90 FD | 	jmp	#LR__2176
15de4                 | LR__2174
15de4     01 22 06 F1 | 	add	local03, #1
15de8     90 FF 9F FD | 	jmp	#LR__2172
15dec                 | LR__2175
15dec     0F FB 01 F6 | 	mov	result1, local01
15df0                 | LR__2176
15df0     A7 F0 03 F6 | 	mov	ptra, fp
15df4     B2 00 A0 FD | 	call	#popregs_
15df8                 | __system__LTrim_S_ret
15df8     2D 00 64 FD | 	ret
15dfc                 | 
15dfc                 | __system__RTrim_S
15dfc     04 4A 05 F6 | 	mov	COUNT_, #4
15e00     A8 00 A0 FD | 	call	#pushregs_
15e04     09 1F 02 F6 | 	mov	local01, arg01
15e08     09 21 02 F6 | 	mov	local02, arg01
15e0c     97 06 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
15e10                 | LR__2180
15e10     10 FB C9 FA | 	rdbyte	result1, local02 wz
15e14     01 20 06 51 |  if_ne	add	local02, #1
15e18     F4 FF 9F 5D |  if_ne	jmp	#LR__2180
15e1c                 | LR__2181
15e1c     09 21 82 F1 | 	sub	local02, arg01
15e20     10 FB 01 F6 | 	mov	result1, local02
15e24     FD 20 0A F6 | 	mov	local02, result1 wz
15e28     16 01 00 AF 
15e2c     54 FB 05 A6 |  if_e	mov	result1, ##@LR__3989
15e30     74 00 90 AD |  if_e	jmp	#LR__2185
15e34     10 23 02 F6 | 	mov	local03, local02
15e38     01 22 86 F1 | 	sub	local03, #1
15e3c                 | LR__2182
15e3c     11 15 02 F6 | 	mov	arg02, local03
15e40     0F 15 02 F1 | 	add	arg02, local01
15e44     0A 21 C2 FA | 	rdbyte	local02, arg02
15e48     20 20 0E F2 | 	cmp	local02, #32 wz
15e4c     44 00 90 AD |  if_e	jmp	#LR__2184
15e50     11 13 02 F6 | 	mov	arg01, local03
15e54     02 12 06 F1 | 	add	arg01, #2
15e58     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
15e5c     FD 24 0A F6 | 	mov	local04, result1 wz
15e60     28 00 90 AD |  if_e	jmp	#LR__2183
15e64     11 17 02 F6 | 	mov	arg03, local03
15e68     01 16 06 F1 | 	add	arg03, #1
15e6c     12 13 02 F6 | 	mov	arg01, local04
15e70     0F 15 02 F6 | 	mov	arg02, local01
15e74     28 DB BF FD | 	call	#__system____builtin_memmove
15e78     01 22 06 F1 | 	add	local03, #1
15e7c     12 23 02 F1 | 	add	local03, local04
15e80     11 01 48 FC | 	wrbyte	#0, local03
15e84     12 FB 01 F6 | 	mov	result1, local04
15e88     1C 00 90 FD | 	jmp	#LR__2185
15e8c                 | LR__2183
15e8c     12 FB 01 F6 | 	mov	result1, local04
15e90     14 00 90 FD | 	jmp	#LR__2185
15e94                 | LR__2184
15e94     01 22 86 F1 | 	sub	local03, #1
15e98     00 22 56 F2 | 	cmps	local03, #0 wc
15e9c     9C FF 9F 3D |  if_ae	jmp	#LR__2182
15ea0     16 01 00 FF 
15ea4     55 FB 05 F6 | 	mov	result1, ##@LR__3990
15ea8                 | LR__2185
15ea8     A7 F0 03 F6 | 	mov	ptra, fp
15eac     B2 00 A0 FD | 	call	#popregs_
15eb0                 | __system__RTrim_S_ret
15eb0     2D 00 64 FD | 	ret
15eb4                 | 
15eb4                 | __system__Instr
15eb4     07 4A 05 F6 | 	mov	COUNT_, #7
15eb8     A8 00 A0 FD | 	call	#pushregs_
15ebc     09 1F 02 F6 | 	mov	local01, arg01
15ec0     0A 21 02 F6 | 	mov	local02, arg02
15ec4     0B 23 02 F6 | 	mov	local03, arg03
15ec8     11 13 02 F6 | 	mov	arg01, local03
15ecc     09 25 02 F6 | 	mov	local04, arg01
15ed0     97 06 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
15ed4                 | LR__2190
15ed4     12 FB C9 FA | 	rdbyte	result1, local04 wz
15ed8     01 24 06 51 |  if_ne	add	local04, #1
15edc     F4 FF 9F 5D |  if_ne	jmp	#LR__2190
15ee0                 | LR__2191
15ee0     09 25 82 F1 | 	sub	local04, arg01
15ee4     12 27 02 F6 | 	mov	local05, local04
15ee8     10 13 02 F6 | 	mov	arg01, local02
15eec     09 25 02 F6 | 	mov	local04, arg01
15ef0     97 06 48 FB | 	callpa	#(@LR__2193-@LR__2192)>>2,fcache_load_ptr_
15ef4                 | LR__2192
15ef4     12 FB C9 FA | 	rdbyte	result1, local04 wz
15ef8     01 24 06 51 |  if_ne	add	local04, #1
15efc     F4 FF 9F 5D |  if_ne	jmp	#LR__2192
15f00                 | LR__2193
15f00     09 25 82 F1 | 	sub	local04, arg01
15f04     12 FB 01 F6 | 	mov	result1, local04
15f08     FD 18 0A F6 | 	mov	arg04, result1 wz
15f0c     00 FA 05 A6 |  if_e	mov	result1, #0
15f10     98 00 90 AD |  if_e	jmp	#LR__2197
15f14     00 26 0E F2 | 	cmp	local05, #0 wz
15f18     00 FA 05 A6 |  if_e	mov	result1, #0
15f1c     8C 00 90 AD |  if_e	jmp	#LR__2197
15f20     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
15f24     00 FA 05 16 |  if_a	mov	result1, #0
15f28     80 00 90 1D |  if_a	jmp	#LR__2197
15f2c     01 1E 56 F2 | 	cmps	local01, #1 wc
15f30     01 1E 06 C6 |  if_b	mov	local01, #1
15f34     11 29 C2 FA | 	rdbyte	local06, local03
15f38     01 26 0E F2 | 	cmp	local05, #1 wz
15f3c     18 00 90 5D |  if_ne	jmp	#LR__2194
15f40     10 13 02 F6 | 	mov	arg01, local02
15f44     14 15 02 F6 | 	mov	arg02, local06
15f48     0F 17 02 F6 | 	mov	arg03, local01
15f4c     00 18 06 F6 | 	mov	arg04, #0
15f50     60 30 B0 FD | 	call	#__system____ScanForChar
15f54     54 00 90 FD | 	jmp	#LR__2197
15f58                 | LR__2194
15f58     0F 2B 02 F6 | 	mov	local07, local01
15f5c                 | LR__2195
15f5c     10 13 02 F6 | 	mov	arg01, local02
15f60     14 15 02 F6 | 	mov	arg02, local06
15f64     15 17 02 F6 | 	mov	arg03, local07
15f68     00 18 06 F6 | 	mov	arg04, #0
15f6c     44 30 B0 FD | 	call	#__system____ScanForChar
15f70     FD 2A 0A F6 | 	mov	local07, result1 wz
15f74     30 00 90 AD |  if_e	jmp	#LR__2196
15f78     13 17 02 F6 | 	mov	arg03, local05
15f7c     10 13 02 F6 | 	mov	arg01, local02
15f80     15 15 02 F6 | 	mov	arg02, local07
15f84     58 FB BF FD | 	call	#__system__Mid_S
15f88     FD 12 02 F6 | 	mov	arg01, result1
15f8c     11 15 02 F6 | 	mov	arg02, local03
15f90     14 DB BF FD | 	call	#__system___string_cmp
15f94     00 FA 0D F2 | 	cmp	result1, #0 wz
15f98     15 FB 01 A6 |  if_e	mov	result1, local07
15f9c     0C 00 90 AD |  if_e	jmp	#LR__2197
15fa0     13 2B 02 F1 | 	add	local07, local05
15fa4     B4 FF 9F FD | 	jmp	#LR__2195
15fa8                 | LR__2196
15fa8     00 FA 05 F6 | 	mov	result1, #0
15fac                 | LR__2197
15fac     A7 F0 03 F6 | 	mov	ptra, fp
15fb0     B2 00 A0 FD | 	call	#popregs_
15fb4                 | __system__Instr_ret
15fb4     2D 00 64 FD | 	ret
15fb8                 | 
15fb8                 | __system___strerror
15fb8     00 12 56 F2 | 	cmps	arg01, #0 wc
15fbc     08 00 90 CD |  if_b	jmp	#LR__2200
15fc0     1A 12 56 F2 | 	cmps	arg01, #26 wc
15fc4     04 00 90 CD |  if_b	jmp	#LR__2201
15fc8                 | LR__2200
15fc8     19 12 06 F6 | 	mov	arg01, #25
15fcc                 | LR__2201
15fcc     02 12 66 F0 | 	shl	arg01, #2
15fd0     01 00 00 FF 
15fd4     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
15fd8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15fdc     09 FB 01 FB | 	rdlong	result1, arg01
15fe0     01 00 00 FF 
15fe4     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
15fe8                 | __system___strerror_ret
15fe8     2D 00 64 FD | 	ret
15fec                 | 
15fec                 | __system___int64_shl
15fec     20 16 CE F7 | 	test	arg03, #32 wz
15ff0     09 15 02 56 |  if_ne	mov	arg02, arg01
15ff4     00 12 06 56 |  if_ne	mov	arg01, #0
15ff8     1F 16 CE F7 | 	test	arg03, #31 wz
15ffc     18 00 90 AD |  if_e	jmp	#LR__2210
16000     0B 15 62 F0 | 	shl	arg02, arg03
16004     09 FB 01 F6 | 	mov	result1, arg01
16008     0B FD 61 F6 | 	neg	result2, arg03
1600c     FE FA 41 F0 | 	shr	result1, result2
16010     FD 14 42 F5 | 	or	arg02, result1
16014     0B 13 62 F0 | 	shl	arg01, arg03
16018                 | LR__2210
16018     0A FD 01 F6 | 	mov	result2, arg02
1601c     09 FB 01 F6 | 	mov	result1, arg01
16020                 | __system___int64_shl_ret
16020     2D 00 64 FD | 	ret
16024                 | 
16024                 | __system___usepins
16024     14 E8 05 F1 | 	add	ptr___system__dat__, #20
16028     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1602c     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
16030     00 13 CA F7 | 	test	arg01, _var01 wz
16034     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
16038     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1603c     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
16040     01 15 CA A7 |  if_e	test	arg02, _var02 wz
16044     00 FA 05 56 |  if_ne	mov	result1, #0
16048     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1604c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
16050     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
16054     09 03 42 F5 | 	or	_var02, arg01
16058     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1605c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
16060     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
16064     0A 03 42 F5 | 	or	_var02, arg02
16068     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1606c     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
16070     01 FA 65 F6 | 	neg	result1, #1
16074                 | __system___usepins_ret
16074     2D 00 64 FD | 	ret
16078                 | 
16078                 | __system___freepins
16078     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1607c     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
16080     09 01 22 F5 | 	andn	_var01, arg01
16084     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
16088     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1608c     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
16090     0A 01 22 F5 | 	andn	_var01, arg02
16094     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
16098     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1609c                 | __system___freepins_ret
1609c     2D 00 64 FD | 	ret
160a0                 | 
160a0                 | __system___float_fromuns
160a0     09 17 0A F6 | 	mov	arg03, arg01 wz
160a4     0B FB 01 A6 |  if_e	mov	result1, arg03
160a8     24 00 90 AD |  if_e	jmp	#LR__2220
160ac     0B 15 92 F7 | 	encod	arg02, arg03 wc
160b0     01 14 06 C1 |  if_b	add	arg02, #1
160b4     01 14 86 F1 | 	sub	arg02, #1
160b8     1F 12 06 F6 | 	mov	arg01, #31
160bc     0A 13 82 F1 | 	sub	arg01, arg02
160c0     09 17 62 F0 | 	shl	arg03, arg01
160c4     02 16 46 F0 | 	shr	arg03, #2
160c8     00 12 06 F6 | 	mov	arg01, #0
160cc     74 08 B0 FD | 	call	#__system___float_Pack
160d0                 | LR__2220
160d0                 | __system___float_fromuns_ret
160d0     2D 00 64 FD | 	ret
160d4                 | 
160d4                 | __system___float_add
160d4     0F 4A 05 F6 | 	mov	COUNT_, #15
160d8     A8 00 A0 FD | 	call	#pushregs_
160dc     09 1F 02 F6 | 	mov	local01, arg01
160e0     0A 21 02 F6 | 	mov	local02, arg02
160e4     00 22 06 F6 | 	mov	local03, #0
160e8     0F 25 02 F6 | 	mov	local04, local01
160ec     12 27 02 F6 | 	mov	local05, local04
160f0     16 26 46 F7 | 	zerox	local05, #22
160f4     12 29 02 F6 | 	mov	local06, local04
160f8     01 28 66 F0 | 	shl	local06, #1
160fc     18 28 46 F0 | 	shr	local06, #24
16100     1F 24 46 F0 | 	shr	local04, #31
16104     10 13 02 F6 | 	mov	arg01, local02
16108     09 FB 01 F6 | 	mov	result1, arg01
1610c     FD 2A 02 F6 | 	mov	local07, result1
16110     15 2D 02 F6 | 	mov	local08, local07
16114     16 2C 46 F7 | 	zerox	local08, #22
16118     15 2F 02 F6 | 	mov	local09, local07
1611c     01 2E 66 F0 | 	shl	local09, #1
16120     18 2E 46 F0 | 	shr	local09, #24
16124     17 31 02 F6 | 	mov	local10, local09
16128     1F 2A 46 F0 | 	shr	local07, #31
1612c     00 32 06 F6 | 	mov	local11, #0
16130     00 34 06 F6 | 	mov	local12, #0
16134     18 29 12 F2 | 	cmp	local06, local10 wc
16138     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1613c     2C 00 90 1D |  if_a	jmp	#LR__2230
16140     16 27 12 32 |  if_ae	cmp	local05, local08 wc
16144     24 00 90 3D |  if_ae	jmp	#LR__2230
16148     13 37 02 F6 | 	mov	local13, local05
1614c     16 27 02 F6 | 	mov	local05, local08
16150     1B 2D 02 F6 | 	mov	local08, local13
16154     14 37 02 F6 | 	mov	local13, local06
16158     18 29 02 F6 | 	mov	local06, local10
1615c     1B 31 02 F6 | 	mov	local10, local13
16160     12 37 02 F6 | 	mov	local13, local04
16164     15 25 02 F6 | 	mov	local04, local07
16168     1B 2B 02 F6 | 	mov	local07, local13
1616c                 | LR__2230
1616c     FF 28 0E F2 | 	cmp	local06, #255 wz
16170     70 01 90 AD |  if_e	jmp	#LR__2245
16174     00 28 0E F2 | 	cmp	local06, #0 wz
16178     AC 01 90 AD |  if_e	jmp	#LR__2247
1617c     17 26 26 F4 | 	bith	local05, #23
16180                 | LR__2231
16180     00 30 0E F2 | 	cmp	local10, #0 wz
16184     F0 01 90 AD |  if_e	jmp	#LR__2251
16188     17 2C 26 F4 | 	bith	local08, #23
1618c                 | LR__2232
1618c     7F 28 86 F1 | 	sub	local06, #127
16190     7F 30 86 F1 | 	sub	local10, #127
16194     14 39 02 F6 | 	mov	local14, local06
16198     18 39 82 F1 | 	sub	local14, local10
1619c     97 14 48 FB | 	callpa	#(@LR__2234-@LR__2233)>>2,fcache_load_ptr_
161a0                 | LR__2233
161a0     20 38 56 F2 | 	cmps	local14, #32 wc
161a4     20 00 90 CD |  if_b	jmp	#LR__2235
161a8     16 2F 02 F6 | 	mov	local09, local08
161ac     00 32 0E F2 | 	cmp	local11, #0 wz
161b0     6F 32 62 FD | 	wrnz	local11
161b4     19 2F 42 F5 | 	or	local09, local11
161b8     17 33 02 F6 | 	mov	local11, local09
161bc     00 2C 06 F6 | 	mov	local08, #0
161c0     20 38 86 F1 | 	sub	local14, #32
161c4     D8 FF 9F FD | 	jmp	#LR__2233
161c8                 | LR__2234
161c8                 | LR__2235
161c8     00 38 0E F2 | 	cmp	local14, #0 wz
161cc     38 00 90 AD |  if_e	jmp	#LR__2236
161d0     16 37 02 F6 | 	mov	local13, local08
161d4     20 30 06 F6 | 	mov	local10, #32
161d8     1C 31 82 F1 | 	sub	local10, local14
161dc     18 37 62 F0 | 	shl	local13, local10
161e0     19 31 02 F6 | 	mov	local10, local11
161e4     20 2E 06 F6 | 	mov	local09, #32
161e8     1C 2F 82 F1 | 	sub	local09, local14
161ec     17 31 6A F0 | 	shl	local10, local09 wz
161f0     1C 33 42 F0 | 	shr	local11, local14
161f4     1C 2D 42 F0 | 	shr	local08, local14
161f8     1B 33 42 F5 | 	or	local11, local13
161fc     00 3A 06 F6 | 	mov	local15, #0
16200     01 3A 06 56 |  if_ne	mov	local15, #1
16204     1D 33 42 F5 | 	or	local11, local15
16208                 | LR__2236
16208     12 3B 02 F6 | 	mov	local15, local04
1620c     15 3B 62 F5 | 	xor	local15, local07
16210     01 3A CE F7 | 	test	local15, #1 wz
16214     18 00 90 AD |  if_e	jmp	#LR__2237
16218     16 2D 22 F6 | 	not	local08, local08
1621c     19 33 22 F6 | 	not	local11, local11
16220     01 32 0E F1 | 	add	local11, #1 wz
16224     00 3A 06 F6 | 	mov	local15, #0
16228     01 3A 06 A6 |  if_e	mov	local15, #1
1622c     1D 2D 02 F1 | 	add	local08, local15
16230                 | LR__2237
16230     19 35 12 F1 | 	add	local12, local11 wc
16234     16 27 22 F1 | 	addx	local05, local08
16238     00 26 56 F2 | 	cmps	local05, #0 wc
1623c     1C 00 90 3D |  if_ae	jmp	#LR__2238
16240     01 24 66 F5 | 	xor	local04, #1
16244     13 27 22 F6 | 	not	local05, local05
16248     1A 35 22 F6 | 	not	local12, local12
1624c     01 34 0E F1 | 	add	local12, #1 wz
16250     00 3A 06 F6 | 	mov	local15, #0
16254     01 3A 06 A6 |  if_e	mov	local15, #1
16258     1D 27 02 F1 | 	add	local05, local15
1625c                 | LR__2238
1625c     00 80 00 FF 
16260     00 26 16 F2 | 	cmp	local05, ##16777216 wc
16264     28 00 90 CD |  if_b	jmp	#LR__2239
16268     01 28 06 F1 | 	add	local06, #1
1626c     1A 39 02 F6 | 	mov	local14, local12
16270     01 38 06 F5 | 	and	local14, #1
16274     01 34 46 F0 | 	shr	local12, #1
16278     13 3B 02 F6 | 	mov	local15, local05
1627c     1F 3A 66 F0 | 	shl	local15, #31
16280     1D 35 42 F5 | 	or	local12, local15
16284     1C 35 42 F5 | 	or	local12, local14
16288     01 26 46 F0 | 	shr	local05, #1
1628c     3C 00 90 FD | 	jmp	#LR__2244
16290                 | LR__2239
16290     00 40 00 FF 
16294     00 26 16 F2 | 	cmp	local05, ##8388608 wc
16298     30 00 90 3D |  if_ae	jmp	#LR__2243
1629c     00 26 0E F2 | 	cmp	local05, #0 wz
162a0     00 34 0E A2 |  if_e	cmp	local12, #0 wz
162a4     08 24 46 A5 |  if_e	or	local04, #8
162a8     01 24 26 A5 |  if_e	andn	local04, #1
162ac     1C 00 90 AD |  if_e	jmp	#LR__2242
162b0                 | LR__2240
162b0     00 40 00 FF 
162b4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
162b8     10 00 90 3D |  if_ae	jmp	#LR__2241
162bc     1A 35 12 F1 | 	add	local12, local12 wc
162c0     13 27 22 F1 | 	addx	local05, local05
162c4     01 28 86 F1 | 	sub	local06, #1
162c8     E4 FF 9F FD | 	jmp	#LR__2240
162cc                 | LR__2241
162cc                 | LR__2242
162cc                 | LR__2243
162cc                 | LR__2244
162cc     13 13 02 F6 | 	mov	arg01, local05
162d0     1A 15 02 F6 | 	mov	arg02, local12
162d4     14 17 02 F6 | 	mov	arg03, local06
162d8     12 19 02 F6 | 	mov	arg04, local04
162dc     18 31 B0 FD | 	call	#__system__pack_0372
162e0     DC 00 90 FD | 	jmp	#LR__2255
162e4                 | LR__2245
162e4     FF 30 0E F2 | 	cmp	local10, #255 wz
162e8     10 00 90 5D |  if_ne	jmp	#LR__2246
162ec     12 2B 0A F2 | 	cmp	local07, local04 wz
162f0     00 F8 3F 5F 
162f4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
162f8     C4 00 90 5D |  if_ne	jmp	#LR__2255
162fc                 | LR__2246
162fc     00 26 0E F2 | 	cmp	local05, #0 wz
16300     00 F8 3F 5F 
16304     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
16308     B4 00 90 5D |  if_ne	jmp	#LR__2255
1630c     1A 15 02 F6 | 	mov	arg02, local12
16310     14 17 02 F6 | 	mov	arg03, local06
16314     12 19 02 F6 | 	mov	arg04, local04
16318     02 18 46 F5 | 	or	arg04, #2
1631c     13 13 02 F6 | 	mov	arg01, local05
16320     D4 30 B0 FD | 	call	#__system__pack_0372
16324     98 00 90 FD | 	jmp	#LR__2255
16328                 | LR__2247
16328     00 26 0E F2 | 	cmp	local05, #0 wz
1632c     28 00 90 AD |  if_e	jmp	#LR__2250
16330     01 26 66 F0 | 	shl	local05, #1
16334     97 0E 48 FB | 	callpa	#(@LR__2249-@LR__2248)>>2,fcache_load_ptr_
16338                 | LR__2248
16338     00 40 00 FF 
1633c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
16340     14 3B 02 C6 |  if_b	mov	local15, local06
16344     01 3A 86 C1 |  if_b	sub	local15, #1
16348     1D 29 02 C6 |  if_b	mov	local06, local15
1634c     01 26 66 C0 |  if_b	shl	local05, #1
16350     E4 FF 9F CD |  if_b	jmp	#LR__2248
16354                 | LR__2249
16354     28 FE 9F FD | 	jmp	#LR__2231
16358                 | LR__2250
16358     15 25 02 F5 | 	and	local04, local07
1635c     12 19 02 F6 | 	mov	arg04, local04
16360     08 18 46 F5 | 	or	arg04, #8
16364     00 12 06 F6 | 	mov	arg01, #0
16368     00 14 06 F6 | 	mov	arg02, #0
1636c     00 16 06 F6 | 	mov	arg03, #0
16370     84 30 B0 FD | 	call	#__system__pack_0372
16374     48 00 90 FD | 	jmp	#LR__2255
16378                 | LR__2251
16378     00 2C 0E F2 | 	cmp	local08, #0 wz
1637c     28 00 90 AD |  if_e	jmp	#LR__2254
16380     01 2C 66 F0 | 	shl	local08, #1
16384     97 0E 48 FB | 	callpa	#(@LR__2253-@LR__2252)>>2,fcache_load_ptr_
16388                 | LR__2252
16388     00 40 00 FF 
1638c     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
16390     18 3B 02 C6 |  if_b	mov	local15, local10
16394     01 3A 86 C1 |  if_b	sub	local15, #1
16398     1D 31 02 C6 |  if_b	mov	local10, local15
1639c     01 2C 66 C0 |  if_b	shl	local08, #1
163a0     E4 FF 9F CD |  if_b	jmp	#LR__2252
163a4                 | LR__2253
163a4     E4 FD 9F FD | 	jmp	#LR__2232
163a8                 | LR__2254
163a8     7F 28 86 F1 | 	sub	local06, #127
163ac     13 13 02 F6 | 	mov	arg01, local05
163b0     1A 15 02 F6 | 	mov	arg02, local12
163b4     14 17 02 F6 | 	mov	arg03, local06
163b8     12 19 02 F6 | 	mov	arg04, local04
163bc     38 30 B0 FD | 	call	#__system__pack_0372
163c0                 | LR__2255
163c0     A7 F0 03 F6 | 	mov	ptra, fp
163c4     B2 00 A0 FD | 	call	#popregs_
163c8                 | __system___float_add_ret
163c8     2D 00 64 FD | 	ret
163cc                 | 
163cc                 | __system___float_mul
163cc     0B 4A 05 F6 | 	mov	COUNT_, #11
163d0     A8 00 A0 FD | 	call	#pushregs_
163d4     09 1F 02 F6 | 	mov	local01, arg01
163d8     0A 21 02 F6 | 	mov	local02, arg02
163dc     0F 23 02 F6 | 	mov	local03, local01
163e0     11 25 02 F6 | 	mov	local04, local03
163e4     16 24 46 F7 | 	zerox	local04, #22
163e8     11 27 02 F6 | 	mov	local05, local03
163ec     01 26 66 F0 | 	shl	local05, #1
163f0     18 26 46 F0 | 	shr	local05, #24
163f4     1F 22 46 F0 | 	shr	local03, #31
163f8     10 FB 01 F6 | 	mov	result1, local02
163fc     FD 28 02 F6 | 	mov	local06, result1
16400     14 2B 02 F6 | 	mov	local07, local06
16404     16 2A 46 F7 | 	zerox	local07, #22
16408     14 2D 02 F6 | 	mov	local08, local06
1640c     01 2C 66 F0 | 	shl	local08, #1
16410     18 2C 46 F0 | 	shr	local08, #24
16414     1F 28 46 F0 | 	shr	local06, #31
16418     14 23 62 F5 | 	xor	local03, local06
1641c     FF 26 0E F2 | 	cmp	local05, #255 wz
16420     90 00 90 AD |  if_e	jmp	#LR__2263
16424     FF 2C 0E F2 | 	cmp	local08, #255 wz
16428     D8 00 90 AD |  if_e	jmp	#LR__2265
1642c     00 26 0E F2 | 	cmp	local05, #0 wz
16430     0C 01 90 AD |  if_e	jmp	#LR__2266
16434     17 24 26 F4 | 	bith	local04, #23
16438                 | LR__2260
16438     00 2C 0E F2 | 	cmp	local08, #0 wz
1643c     44 01 90 AD |  if_e	jmp	#LR__2270
16440     17 2A 26 F4 | 	bith	local07, #23
16444                 | LR__2261
16444     12 21 02 F6 | 	mov	local02, local04
16448     04 20 66 F0 | 	shl	local02, #4
1644c     15 29 02 F6 | 	mov	local06, local07
16450     05 28 66 F0 | 	shl	local06, #5
16454     14 21 02 FD | 	qmul	local02, local06
16458     16 27 02 F1 | 	add	local05, local08
1645c     FE 26 86 F1 | 	sub	local05, #254
16460     13 2F 02 F6 | 	mov	local09, local05
16464     04 24 66 F0 | 	shl	local04, #4
16468     05 2A 66 F0 | 	shl	local07, #5
1646c     18 30 62 FD | 	getqx	local10
16470     15 25 02 FD | 	qmul	local04, local07
16474     19 32 62 FD | 	getqy	local11
16478     00 80 00 FF 
1647c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
16480     18 00 90 CD |  if_b	jmp	#LR__2262
16484     01 2E 06 F1 | 	add	local09, #1
16488     01 30 46 F0 | 	shr	local10, #1
1648c     19 2D 02 F6 | 	mov	local08, local11
16490     1F 2C 66 F0 | 	shl	local08, #31
16494     16 31 42 F5 | 	or	local10, local08
16498     01 32 46 F0 | 	shr	local11, #1
1649c                 | LR__2262
1649c     19 13 02 F6 | 	mov	arg01, local11
164a0     18 15 02 F6 | 	mov	arg02, local10
164a4     17 17 02 F6 | 	mov	arg03, local09
164a8     11 19 02 F6 | 	mov	arg04, local03
164ac     48 2F B0 FD | 	call	#__system__pack_0372
164b0     10 01 90 FD | 	jmp	#LR__2274
164b4                 | LR__2263
164b4     00 24 0E F2 | 	cmp	local04, #0 wz
164b8     0F FB 01 56 |  if_ne	mov	result1, local01
164bc     04 01 90 5D |  if_ne	jmp	#LR__2274
164c0     FF 2C 56 F2 | 	cmps	local08, #255 wc
164c4     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
164c8     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
164cc     18 00 90 4D |  if_c_and_nz	jmp	#LR__2264
164d0     00 F8 3F CF 
164d4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
164d8     E8 00 90 CD |  if_b	jmp	#LR__2274
164dc     00 2A 0E F2 | 	cmp	local07, #0 wz
164e0     10 FB 01 56 |  if_ne	mov	result1, local02
164e4     DC 00 90 5D |  if_ne	jmp	#LR__2274
164e8                 | LR__2264
164e8     02 22 46 F5 | 	or	local03, #2
164ec     00 12 06 F6 | 	mov	arg01, #0
164f0     00 14 06 F6 | 	mov	arg02, #0
164f4     13 17 02 F6 | 	mov	arg03, local05
164f8     11 19 02 F6 | 	mov	arg04, local03
164fc     F8 2E B0 FD | 	call	#__system__pack_0372
16500     C0 00 90 FD | 	jmp	#LR__2274
16504                 | LR__2265
16504     00 26 0E F2 | 	cmp	local05, #0 wz
16508     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1650c     00 F8 3F AF 
16510     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
16514     AC 00 90 AD |  if_e	jmp	#LR__2274
16518     00 2A 0E F2 | 	cmp	local07, #0 wz
1651c     10 FB 01 56 |  if_ne	mov	result1, local02
16520     A0 00 90 5D |  if_ne	jmp	#LR__2274
16524     16 17 02 F6 | 	mov	arg03, local08
16528     11 19 02 F6 | 	mov	arg04, local03
1652c     02 18 46 F5 | 	or	arg04, #2
16530     00 12 06 F6 | 	mov	arg01, #0
16534     00 14 06 F6 | 	mov	arg02, #0
16538     BC 2E B0 FD | 	call	#__system__pack_0372
1653c     84 00 90 FD | 	jmp	#LR__2274
16540                 | LR__2266
16540     00 24 0E F2 | 	cmp	local04, #0 wz
16544     20 00 90 AD |  if_e	jmp	#LR__2269
16548     01 24 66 F0 | 	shl	local04, #1
1654c     97 0A 48 FB | 	callpa	#(@LR__2268-@LR__2267)>>2,fcache_load_ptr_
16550                 | LR__2267
16550     00 40 00 FF 
16554     00 24 16 F2 | 	cmp	local04, ##8388608 wc
16558     01 26 86 C1 |  if_b	sub	local05, #1
1655c     01 24 66 C0 |  if_b	shl	local04, #1
16560     EC FF 9F CD |  if_b	jmp	#LR__2267
16564                 | LR__2268
16564     D0 FE 9F FD | 	jmp	#LR__2260
16568                 | LR__2269
16568     08 22 46 F5 | 	or	local03, #8
1656c     00 12 06 F6 | 	mov	arg01, #0
16570     00 14 06 F6 | 	mov	arg02, #0
16574     00 16 06 F6 | 	mov	arg03, #0
16578     11 19 02 F6 | 	mov	arg04, local03
1657c     78 2E B0 FD | 	call	#__system__pack_0372
16580     40 00 90 FD | 	jmp	#LR__2274
16584                 | LR__2270
16584     00 2A 0E F2 | 	cmp	local07, #0 wz
16588     20 00 90 AD |  if_e	jmp	#LR__2273
1658c     01 2A 66 F0 | 	shl	local07, #1
16590     97 0A 48 FB | 	callpa	#(@LR__2272-@LR__2271)>>2,fcache_load_ptr_
16594                 | LR__2271
16594     00 40 00 FF 
16598     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1659c     01 2C 86 C1 |  if_b	sub	local08, #1
165a0     01 2A 66 C0 |  if_b	shl	local07, #1
165a4     EC FF 9F CD |  if_b	jmp	#LR__2271
165a8                 | LR__2272
165a8     98 FE 9F FD | 	jmp	#LR__2261
165ac                 | LR__2273
165ac     08 22 46 F5 | 	or	local03, #8
165b0     00 12 06 F6 | 	mov	arg01, #0
165b4     00 14 06 F6 | 	mov	arg02, #0
165b8     00 16 06 F6 | 	mov	arg03, #0
165bc     11 19 02 F6 | 	mov	arg04, local03
165c0     34 2E B0 FD | 	call	#__system__pack_0372
165c4                 | LR__2274
165c4     A7 F0 03 F6 | 	mov	ptra, fp
165c8     B2 00 A0 FD | 	call	#popregs_
165cc                 | __system___float_mul_ret
165cc     2D 00 64 FD | 	ret
165d0                 | 
165d0                 | __system___float_div
165d0     0E 4A 05 F6 | 	mov	COUNT_, #14
165d4     A8 00 A0 FD | 	call	#pushregs_
165d8     09 23 02 F6 | 	mov	local03, arg01
165dc     0A 25 02 F6 | 	mov	local04, arg02
165e0     11 27 02 F6 | 	mov	local05, local03
165e4     13 29 02 F6 | 	mov	local06, local05
165e8     16 28 46 F7 | 	zerox	local06, #22
165ec     13 2B 02 F6 | 	mov	local07, local05
165f0     01 2A 66 F0 | 	shl	local07, #1
165f4     18 2A 46 F0 | 	shr	local07, #24
165f8     1F 26 46 F0 | 	shr	local05, #31
165fc     12 FB 01 F6 | 	mov	result1, local04
16600     FD 2C 02 F6 | 	mov	local08, result1
16604     16 2F 02 F6 | 	mov	local09, local08
16608     16 2E 46 F7 | 	zerox	local09, #22
1660c     16 31 02 F6 | 	mov	local10, local08
16610     01 30 66 F0 | 	shl	local10, #1
16614     18 30 46 F0 | 	shr	local10, #24
16618     1F 2C 46 F0 | 	shr	local08, #31
1661c     16 27 62 F5 | 	xor	local05, local08
16620     FF 2A 0E F2 | 	cmp	local07, #255 wz
16624     D4 00 90 AD |  if_e	jmp	#LR__2285
16628     FF 30 0E F2 | 	cmp	local10, #255 wz
1662c     04 01 90 AD |  if_e	jmp	#LR__2286
16630     00 2A 0E F2 | 	cmp	local07, #0 wz
16634     24 01 90 AD |  if_e	jmp	#LR__2287
16638     17 28 26 F4 | 	bith	local06, #23
1663c                 | LR__2280
1663c     00 30 0E F2 | 	cmp	local10, #0 wz
16640     70 01 90 AD |  if_e	jmp	#LR__2291
16644     17 2E 26 F4 | 	bith	local09, #23
16648                 | LR__2281
16648     18 2B 82 F1 | 	sub	local07, local10
1664c     15 33 02 F6 | 	mov	local11, local07
16650     14 13 02 F6 | 	mov	arg01, local06
16654     02 12 46 F0 | 	shr	arg01, #2
16658     1E 28 66 F0 | 	shl	local06, #30
1665c     14 15 02 F6 | 	mov	arg02, local06
16660     17 17 02 F6 | 	mov	arg03, local09
16664     28 12 62 FD | 	setq	arg01
16668     0B 15 12 FD | 	qdiv	arg02, arg03
1666c     00 34 06 F6 | 	mov	local12, #0
16670     18 1E 62 FD | 	getqx	local01
16674     19 FC 61 FD | 	getqy	result2
16678     FE 20 02 F6 | 	mov	local02, result2
1667c     0F 37 02 F6 | 	mov	local13, local01
16680     00 20 4E F2 | 	cmps	local02, #0 wz
16684     1B 39 02 F6 | 	mov	local14, local13
16688     19 38 66 F0 | 	shl	local14, #25
1668c     01 34 06 56 |  if_ne	mov	local12, #1
16690     1A 39 42 F5 | 	or	local14, local12
16694     07 36 46 F0 | 	shr	local13, #7
16698     00 80 00 FF 
1669c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
166a0     1C 00 90 CD |  if_b	jmp	#LR__2282
166a4     01 32 06 F1 | 	add	local11, #1
166a8     01 38 46 F0 | 	shr	local14, #1
166ac     1B 35 02 F6 | 	mov	local12, local13
166b0     1F 34 66 F0 | 	shl	local12, #31
166b4     1A 39 42 F5 | 	or	local14, local12
166b8     01 36 46 F0 | 	shr	local13, #1
166bc     24 00 90 FD | 	jmp	#LR__2284
166c0                 | LR__2282
166c0     00 40 00 FF 
166c4     00 36 16 F2 | 	cmp	local13, ##8388608 wc
166c8     18 00 90 3D |  if_ae	jmp	#LR__2283
166cc     01 32 86 F1 | 	sub	local11, #1
166d0     01 36 66 F0 | 	shl	local13, #1
166d4     1C 35 02 F6 | 	mov	local12, local14
166d8     1F 34 46 F0 | 	shr	local12, #31
166dc     1A 37 42 F5 | 	or	local13, local12
166e0     01 38 66 F0 | 	shl	local14, #1
166e4                 | LR__2283
166e4                 | LR__2284
166e4     1B 13 02 F6 | 	mov	arg01, local13
166e8     1C 15 02 F6 | 	mov	arg02, local14
166ec     19 17 02 F6 | 	mov	arg03, local11
166f0     13 19 02 F6 | 	mov	arg04, local05
166f4     00 2D B0 FD | 	call	#__system__pack_0372
166f8     F8 00 90 FD | 	jmp	#LR__2295
166fc                 | LR__2285
166fc     00 28 0E F2 | 	cmp	local06, #0 wz
16700     11 FB 01 56 |  if_ne	mov	result1, local03
16704     EC 00 90 5D |  if_ne	jmp	#LR__2295
16708     FF 30 0E F2 | 	cmp	local10, #255 wz
1670c     00 F8 3F AF 
16710     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
16714     DC 00 90 AD |  if_e	jmp	#LR__2295
16718     02 26 46 F5 | 	or	local05, #2
1671c     00 12 06 F6 | 	mov	arg01, #0
16720     00 14 06 F6 | 	mov	arg02, #0
16724     15 17 02 F6 | 	mov	arg03, local07
16728     13 19 02 F6 | 	mov	arg04, local05
1672c     C8 2C B0 FD | 	call	#__system__pack_0372
16730     C0 00 90 FD | 	jmp	#LR__2295
16734                 | LR__2286
16734     00 2E 0E F2 | 	cmp	local09, #0 wz
16738     12 FB 01 56 |  if_ne	mov	result1, local04
1673c     B4 00 90 5D |  if_ne	jmp	#LR__2295
16740     13 19 02 F6 | 	mov	arg04, local05
16744     08 18 46 F5 | 	or	arg04, #8
16748     00 12 06 F6 | 	mov	arg01, #0
1674c     00 14 06 F6 | 	mov	arg02, #0
16750     00 16 06 F6 | 	mov	arg03, #0
16754     A0 2C B0 FD | 	call	#__system__pack_0372
16758     98 00 90 FD | 	jmp	#LR__2295
1675c                 | LR__2287
1675c     00 28 0E F2 | 	cmp	local06, #0 wz
16760     20 00 90 AD |  if_e	jmp	#LR__2290
16764     01 28 66 F0 | 	shl	local06, #1
16768     97 0A 48 FB | 	callpa	#(@LR__2289-@LR__2288)>>2,fcache_load_ptr_
1676c                 | LR__2288
1676c     00 40 00 FF 
16770     00 28 16 F2 | 	cmp	local06, ##8388608 wc
16774     01 2A 86 C1 |  if_b	sub	local07, #1
16778     01 28 66 C0 |  if_b	shl	local06, #1
1677c     EC FF 9F CD |  if_b	jmp	#LR__2288
16780                 | LR__2289
16780     B8 FE 9F FD | 	jmp	#LR__2280
16784                 | LR__2290
16784     00 30 0E F2 | 	cmp	local10, #0 wz
16788     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1678c     00 F8 3F AF 
16790     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
16794     5C 00 90 AD |  if_e	jmp	#LR__2295
16798     13 19 02 F6 | 	mov	arg04, local05
1679c     08 18 46 F5 | 	or	arg04, #8
167a0     00 12 06 F6 | 	mov	arg01, #0
167a4     00 14 06 F6 | 	mov	arg02, #0
167a8     00 16 06 F6 | 	mov	arg03, #0
167ac     48 2C B0 FD | 	call	#__system__pack_0372
167b0     40 00 90 FD | 	jmp	#LR__2295
167b4                 | LR__2291
167b4     00 2E 0E F2 | 	cmp	local09, #0 wz
167b8     20 00 90 AD |  if_e	jmp	#LR__2294
167bc     01 2E 66 F0 | 	shl	local09, #1
167c0     97 0A 48 FB | 	callpa	#(@LR__2293-@LR__2292)>>2,fcache_load_ptr_
167c4                 | LR__2292
167c4     00 40 00 FF 
167c8     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
167cc     01 30 86 C1 |  if_b	sub	local10, #1
167d0     01 2E 66 C0 |  if_b	shl	local09, #1
167d4     EC FF 9F CD |  if_b	jmp	#LR__2292
167d8                 | LR__2293
167d8     6C FE 9F FD | 	jmp	#LR__2281
167dc                 | LR__2294
167dc     02 26 46 F5 | 	or	local05, #2
167e0     00 12 06 F6 | 	mov	arg01, #0
167e4     00 14 06 F6 | 	mov	arg02, #0
167e8     00 16 06 F6 | 	mov	arg03, #0
167ec     13 19 02 F6 | 	mov	arg04, local05
167f0     04 2C B0 FD | 	call	#__system__pack_0372
167f4                 | LR__2295
167f4     A7 F0 03 F6 | 	mov	ptra, fp
167f8     B2 00 A0 FD | 	call	#popregs_
167fc                 | __system___float_div_ret
167fc     2D 00 64 FD | 	ret
16800                 | 
16800                 | __system___float_cmp
16800     00 C0 3F FF 
16804     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
16808     00 C0 3F CF 
1680c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
16810     0B FB 01 36 |  if_ae	mov	result1, arg03
16814     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
16818     00 C0 7F FF 
1681c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
16820     00 C0 7F CF 
16824     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
16828     0B FB 01 36 |  if_ae	mov	result1, arg03
1682c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
16830     00 12 56 F2 | 	cmps	arg01, #0 wc
16834     2C 00 90 3D |  if_ae	jmp	#LR__2300
16838     00 14 56 F2 | 	cmps	arg02, #0 wc
1683c     0A FB 01 C6 |  if_b	mov	result1, arg02
16840     09 FB 81 C1 |  if_b	sub	result1, arg01
16844     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
16848     00 14 0E F2 | 	cmp	arg02, #0 wz
1684c     00 00 40 AF 
16850     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
16854     00 FA 05 A6 |  if_e	mov	result1, #0
16858     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1685c     01 FA 65 F6 | 	neg	result1, #1
16860     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
16864                 | LR__2300
16864     00 14 56 F2 | 	cmps	arg02, #0 wc
16868     1C 00 90 3D |  if_ae	jmp	#LR__2301
1686c     00 12 0E F2 | 	cmp	arg01, #0 wz
16870     00 00 40 AF 
16874     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
16878     00 FA 05 A6 |  if_e	mov	result1, #0
1687c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
16880     01 FA 05 F6 | 	mov	result1, #1
16884     08 00 90 FD | 	jmp	#__system___float_cmp_ret
16888                 | LR__2301
16888     0A 13 82 F1 | 	sub	arg01, arg02
1688c     09 FB 01 F6 | 	mov	result1, arg01
16890                 | __system___float_cmp_ret
16890     2D 00 64 FD | 	ret
16894                 | 
16894                 | __system___float_tointeger
16894     02 4A 05 F6 | 	mov	COUNT_, #2
16898     A8 00 A0 FD | 	call	#pushregs_
1689c     50 00 B0 FD | 	call	#__system___float_Unpack
168a0     FF FF 7F FF 
168a4     FF FD 55 F2 | 	cmps	result2, ##-1 wc
168a8     34 00 90 CD |  if_b	jmp	#LR__2310
168ac     1F FC 55 F2 | 	cmps	result2, #31 wc
168b0     2C 00 90 3D |  if_ae	jmp	#LR__2310
168b4     02 FE 65 F0 | 	shl	result3, #2
168b8     1E 1E 06 F6 | 	mov	local01, #30
168bc     FE 1E 82 F1 | 	sub	local01, result2
168c0     0F FF 41 F0 | 	shr	result3, local01
168c4     FF 20 02 F6 | 	mov	local02, result3
168c8     0A 21 02 F1 | 	add	local02, arg02
168cc     01 20 46 F0 | 	shr	local02, #1
168d0     00 FA 0D F2 | 	cmp	result1, #0 wz
168d4     10 21 62 56 |  if_ne	neg	local02, local02
168d8     10 FB 01 F6 | 	mov	result1, local02
168dc     04 00 90 FD | 	jmp	#LR__2311
168e0                 | LR__2310
168e0     00 FA 05 F6 | 	mov	result1, #0
168e4                 | LR__2311
168e4     A7 F0 03 F6 | 	mov	ptra, fp
168e8     B2 00 A0 FD | 	call	#popregs_
168ec                 | __system___float_tointeger_ret
168ec     2D 00 64 FD | 	ret
168f0                 | 
168f0                 | __system___float_Unpack
168f0     09 01 02 F6 | 	mov	_var01, arg01
168f4     1F 00 46 F0 | 	shr	_var01, #31
168f8     09 03 02 F6 | 	mov	_var02, arg01
168fc     01 02 66 F0 | 	shl	_var02, #1
16900     18 02 4E F0 | 	shr	_var02, #24 wz
16904     17 13 06 F4 | 	bitl	arg01, #279
16908     06 12 66 50 |  if_ne	shl	arg01, #6
1690c     1D 12 26 54 |  if_ne	bith	arg01, #29
16910     1C 00 90 5D |  if_ne	jmp	#LR__2320
16914     09 05 92 F7 | 	encod	_var03, arg01 wc
16918     01 04 06 C1 |  if_b	add	_var03, #1
1691c     17 04 86 F1 | 	sub	_var03, #23
16920     02 03 02 F6 | 	mov	_var02, _var03
16924     07 FC 05 F6 | 	mov	result2, #7
16928     02 FD 81 F1 | 	sub	result2, _var03
1692c     FE 12 62 F0 | 	shl	arg01, result2
16930                 | LR__2320
16930     7F 02 86 F1 | 	sub	_var02, #127
16934     09 FF 01 F6 | 	mov	result3, arg01
16938     00 FB 01 F6 | 	mov	result1, _var01
1693c     01 FD 01 F6 | 	mov	result2, _var02
16940                 | __system___float_Unpack_ret
16940     2D 00 64 FD | 	ret
16944                 | 
16944                 | __system___float_Pack
16944     00 00 06 F6 | 	mov	_var01, #0
16948     00 16 0E F2 | 	cmp	arg03, #0 wz
1694c     8C 00 90 AD |  if_e	jmp	#LR__2331
16950     0B 03 92 F7 | 	encod	_var02, arg03 wc
16954     01 02 06 C1 |  if_b	add	_var02, #1
16958     21 00 06 F6 | 	mov	_var01, #33
1695c     01 01 82 F1 | 	sub	_var01, _var02
16960     00 17 62 F0 | 	shl	arg03, _var01
16964     03 02 06 F6 | 	mov	_var02, #3
16968     00 03 82 F1 | 	sub	_var02, _var01
1696c     01 15 02 F1 | 	add	arg02, _var02
16970     0A 05 02 F6 | 	mov	_var03, arg02
16974     00 17 06 F1 | 	add	arg03, #256
16978     0B 03 02 F6 | 	mov	_var02, arg03
1697c     FF 02 2E F5 | 	andn	_var02, #255 wz
16980     01 04 06 A1 |  if_e	add	_var03, #1
16984     7F 04 06 F1 | 	add	_var03, #127
16988     FF FF 7F FF 
1698c     E9 05 46 F3 | 	fges	_var03, ##-23
16990     FF 04 66 F3 | 	fles	_var03, #255
16994     01 04 56 F2 | 	cmps	_var03, #1 wc
16998     1C 00 90 3D |  if_ae	jmp	#LR__2330
1699c     01 16 46 F0 | 	shr	arg03, #1
169a0     1F 02 C6 F9 | 	decod	_var02, #31
169a4     0B 03 02 F1 | 	add	_var02, arg03
169a8     02 05 62 F6 | 	neg	_var03, _var03
169ac     02 03 42 F0 | 	shr	_var02, _var03
169b0     01 17 02 F6 | 	mov	arg03, _var02
169b4     00 04 06 F6 | 	mov	_var03, #0
169b8                 | LR__2330
169b8     09 FB 01 F6 | 	mov	result1, arg01
169bc     1F FA 65 F0 | 	shl	result1, #31
169c0     02 03 02 F6 | 	mov	_var02, _var03
169c4     17 02 66 F0 | 	shl	_var02, #23
169c8     01 FB 41 F5 | 	or	result1, _var02
169cc     0B 07 02 F6 | 	mov	_var04, arg03
169d0     09 06 46 F0 | 	shr	_var04, #9
169d4     03 FB 41 F5 | 	or	result1, _var04
169d8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
169dc                 | LR__2331
169dc     00 FB 01 F6 | 	mov	result1, _var01
169e0                 | __system___float_Pack_ret
169e0     2D 00 64 FD | 	ret
169e4                 | 
169e4                 | __system___basic_print_float
169e4     05 4A 05 F6 | 	mov	COUNT_, #5
169e8     A8 00 A0 FD | 	call	#pushregs_
169ec     09 1F 02 F6 | 	mov	local01, arg01
169f0     0A 21 02 F6 | 	mov	local02, arg02
169f4     0B 23 0A F6 | 	mov	local03, arg03 wz
169f8     0C 25 02 F6 | 	mov	local04, arg04
169fc     14 00 90 5D |  if_ne	jmp	#LR__2340
16a00     23 24 0E F2 | 	cmp	local04, #35 wz
16a04     80 02 10 AF 
16a08     00 26 06 A6 |  if_e	mov	local05, ##537198592
16a0c     1D 26 C6 59 |  if_ne	decod	local05, #29
16a10     13 23 02 F6 | 	mov	local03, local05
16a14                 | LR__2340
16a14     0F 13 02 F6 | 	mov	arg01, local01
16a18     04 25 B0 FD | 	call	#__system___gettxfunc
16a1c     FD 26 0A F6 | 	mov	local05, result1 wz
16a20     00 FA 05 A6 |  if_e	mov	result1, #0
16a24     13 13 02 56 |  if_ne	mov	arg01, local05
16a28     11 15 02 56 |  if_ne	mov	arg02, local03
16a2c     10 17 02 56 |  if_ne	mov	arg03, local02
16a30     12 19 02 56 |  if_ne	mov	arg04, local04
16a34     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
16a38     A7 F0 03 F6 | 	mov	ptra, fp
16a3c     B2 00 A0 FD | 	call	#popregs_
16a40                 | __system___basic_print_float_ret
16a40     2D 00 64 FD | 	ret
16a44                 | 
16a44                 | __system____builtin_atoi
16a44     07 4A 05 F6 | 	mov	COUNT_, #7
16a48     A8 00 A0 FD | 	call	#pushregs_
16a4c                 | __system____builtin_atoi_enter
16a4c     09 1F 02 F6 | 	mov	local01, arg01
16a50     0A 21 02 F6 | 	mov	local02, arg02
16a54     00 22 06 F6 | 	mov	local03, #0
16a58     00 24 06 F6 | 	mov	local04, #0
16a5c     00 26 06 F6 | 	mov	local05, #0
16a60     97 08 48 FB | 	callpa	#(@LR__2351-@LR__2350)>>2,fcache_load_ptr_
16a64                 | LR__2350
16a64     0F 29 C2 FA | 	rdbyte	local06, local01
16a68     20 28 0E F2 | 	cmp	local06, #32 wz
16a6c     01 1E 06 A1 |  if_e	add	local01, #1
16a70     F0 FF 9F AD |  if_e	jmp	#LR__2350
16a74                 | LR__2351
16a74     0F 2B C2 FA | 	rdbyte	local07, local01
16a78                 | LR__2352
16a78     2D 2A 0E F2 | 	cmp	local07, #45 wz
16a7c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
16a80     18 00 90 5D |  if_ne	jmp	#LR__2353
16a84     01 1E 06 F1 | 	add	local01, #1
16a88     2D 2A 0E F2 | 	cmp	local07, #45 wz
16a8c     01 28 06 A6 |  if_e	mov	local06, #1
16a90     14 27 C2 A2 |  if_e	subr	local05, local06
16a94     0F 2B C2 FA | 	rdbyte	local07, local01
16a98     DC FF 9F FD | 	jmp	#LR__2352
16a9c                 | LR__2353
16a9c     97 48 48 FB | 	callpa	#(@LR__2361-@LR__2354)>>2,fcache_load_ptr_
16aa0                 | LR__2354
16aa0                 | LR__2355
16aa0     0F 2B C2 FA | 	rdbyte	local07, local01
16aa4     5F 2A 0E F2 | 	cmp	local07, #95 wz
16aa8     01 1E 06 F1 | 	add	local01, #1
16aac     F0 FF 9F AD |  if_e	jmp	#LR__2355
16ab0     30 2A 0E F2 | 	cmp	local07, #48 wz
16ab4     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
16ab8     00 24 06 A6 |  if_e	mov	local04, #0
16abc     60 00 90 AD |  if_e	jmp	#LR__2360
16ac0     31 2A 56 F2 | 	cmps	local07, #49 wc
16ac4     18 00 90 CD |  if_b	jmp	#LR__2356
16ac8     3A 2A 56 F2 | 	cmps	local07, #58 wc
16acc     15 25 02 C6 |  if_b	mov	local04, local07
16ad0     30 24 86 C1 |  if_b	sub	local04, #48
16ad4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
16ad8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
16adc     40 00 90 CD |  if_b	jmp	#LR__2359
16ae0                 | LR__2356
16ae0     0B 20 56 F2 | 	cmps	local02, #11 wc
16ae4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
16ae8     14 00 90 CD |  if_b	jmp	#LR__2357
16aec     67 2A 56 F2 | 	cmps	local07, #103 wc
16af0     61 2A 86 C1 |  if_b	sub	local07, #97
16af4     0A 24 06 C6 |  if_b	mov	local04, #10
16af8     15 25 02 C1 |  if_b	add	local04, local07
16afc     20 00 90 CD |  if_b	jmp	#LR__2358
16b00                 | LR__2357
16b00     0B 20 56 F2 | 	cmps	local02, #11 wc
16b04     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
16b08     24 00 90 CD |  if_b	jmp	#LR__2362
16b0c     47 2A 56 F2 | 	cmps	local07, #71 wc
16b10     41 2A 86 C1 |  if_b	sub	local07, #65
16b14     0A 24 06 C6 |  if_b	mov	local04, #10
16b18     15 25 02 C1 |  if_b	add	local04, local07
16b1c     10 00 90 3D |  if_ae	jmp	#LR__2362
16b20                 | LR__2358
16b20                 | LR__2359
16b20                 | LR__2360
16b20     11 21 02 FD | 	qmul	local02, local03
16b24     18 22 62 FD | 	getqx	local03
16b28     12 23 02 F1 | 	add	local03, local04
16b2c     70 FF 9F FD | 	jmp	#LR__2354
16b30                 | LR__2361
16b30                 | LR__2362
16b30     00 20 0E F2 | 	cmp	local02, #0 wz
16b34     64 00 90 5D |  if_ne	jmp	#LR__2368
16b38     78 2A 0E F2 | 	cmp	local07, #120 wz
16b3c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
16b40     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
16b44     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
16b48     14 00 90 5D |  if_ne	jmp	#LR__2363
16b4c     0F 13 02 F6 | 	mov	arg01, local01
16b50     10 14 06 F6 | 	mov	arg02, #16
16b54     EC FE BF FD | 	call	#__system____builtin_atoi
16b58     FD 22 02 F6 | 	mov	local03, result1
16b5c     3C 00 90 FD | 	jmp	#LR__2367
16b60                 | LR__2363
16b60     62 2A 0E F2 | 	cmp	local07, #98 wz
16b64     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
16b68     14 00 90 5D |  if_ne	jmp	#LR__2364
16b6c     0F 13 02 F6 | 	mov	arg01, local01
16b70     02 14 06 F6 | 	mov	arg02, #2
16b74     CC FE BF FD | 	call	#__system____builtin_atoi
16b78     FD 22 02 F6 | 	mov	local03, result1
16b7c     1C 00 90 FD | 	jmp	#LR__2366
16b80                 | LR__2364
16b80     6F 2A 0E F2 | 	cmp	local07, #111 wz
16b84     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
16b88     10 00 90 5D |  if_ne	jmp	#LR__2365
16b8c     0F 13 02 F6 | 	mov	arg01, local01
16b90     08 14 06 F6 | 	mov	arg02, #8
16b94     AC FE BF FD | 	call	#__system____builtin_atoi
16b98     FD 22 02 F6 | 	mov	local03, result1
16b9c                 | LR__2365
16b9c                 | LR__2366
16b9c                 | LR__2367
16b9c                 | LR__2368
16b9c     00 26 0E F2 | 	cmp	local05, #0 wz
16ba0     11 23 62 56 |  if_ne	neg	local03, local03
16ba4     11 FB 01 F6 | 	mov	result1, local03
16ba8     A7 F0 03 F6 | 	mov	ptra, fp
16bac     B2 00 A0 FD | 	call	#popregs_
16bb0                 | __system____builtin_atoi_ret
16bb0     2D 00 64 FD | 	ret
16bb4                 | 
16bb4                 | __system____builtin_atof
16bb4     07 4A 05 F6 | 	mov	COUNT_, #7
16bb8     A8 00 A0 FD | 	call	#pushregs_
16bbc     09 1F 02 F6 | 	mov	local01, arg01
16bc0     00 20 06 F6 | 	mov	local02, #0
16bc4     00 22 06 F6 | 	mov	local03, #0
16bc8     00 24 06 F6 | 	mov	local04, #0
16bcc     00 26 06 F6 | 	mov	local05, #0
16bd0     97 08 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
16bd4                 | LR__2370
16bd4     0F 17 C2 FA | 	rdbyte	arg03, local01
16bd8     20 16 0E F2 | 	cmp	arg03, #32 wz
16bdc     01 1E 06 A1 |  if_e	add	local01, #1
16be0     F0 FF 9F AD |  if_e	jmp	#LR__2370
16be4                 | LR__2371
16be4     0F 29 C2 FA | 	rdbyte	local06, local01
16be8                 | LR__2372
16be8     2B 28 0E F2 | 	cmp	local06, #43 wz
16bec     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
16bf0     14 00 90 5D |  if_ne	jmp	#LR__2373
16bf4     2D 28 0E F2 | 	cmp	local06, #45 wz
16bf8     1F 24 E6 A4 |  if_e	bitnot	local04, #31
16bfc     01 1E 06 F1 | 	add	local01, #1
16c00     0F 29 C2 FA | 	rdbyte	local06, local01
16c04     E0 FF 9F FD | 	jmp	#LR__2372
16c08                 | LR__2373
16c08                 | LR__2374
16c08     97 08 48 FB | 	callpa	#(@LR__2376-@LR__2375)>>2,fcache_load_ptr_
16c0c                 | LR__2375
16c0c     0F 29 C2 FA | 	rdbyte	local06, local01
16c10     5F 28 0E F2 | 	cmp	local06, #95 wz
16c14     01 1E 06 F1 | 	add	local01, #1
16c18     F0 FF 9F AD |  if_e	jmp	#LR__2375
16c1c                 | LR__2376
16c1c     00 28 0E F2 | 	cmp	local06, #0 wz
16c20     5C 00 90 AD |  if_e	jmp	#LR__2378
16c24     30 28 56 F2 | 	cmps	local06, #48 wc
16c28     44 00 90 CD |  if_b	jmp	#LR__2377
16c2c     3A 28 56 F2 | 	cmps	local06, #58 wc
16c30     3C 00 90 3D |  if_ae	jmp	#LR__2377
16c34     10 13 02 F6 | 	mov	arg01, local02
16c38     00 90 20 FF 
16c3c     00 14 06 F6 | 	mov	arg02, ##1092616192
16c40     88 F7 BF FD | 	call	#__system___float_mul
16c44     FD 20 02 F6 | 	mov	local02, result1
16c48     30 28 86 F1 | 	sub	local06, #48
16c4c     14 13 02 F6 | 	mov	arg01, local06
16c50     4C F4 BF FD | 	call	#__system___float_fromuns
16c54     FD 14 02 F6 | 	mov	arg02, result1
16c58     10 13 02 F6 | 	mov	arg01, local02
16c5c     74 F4 BF FD | 	call	#__system___float_add
16c60     FD 20 02 F6 | 	mov	local02, result1
16c64     00 26 0E F2 | 	cmp	local05, #0 wz
16c68     01 22 86 51 |  if_ne	sub	local03, #1
16c6c     98 FF 9F FD | 	jmp	#LR__2374
16c70                 | LR__2377
16c70     2E 28 0E F2 | 	cmp	local06, #46 wz
16c74     00 26 0E A2 |  if_e	cmp	local05, #0 wz
16c78     01 26 06 A6 |  if_e	mov	local05, #1
16c7c     88 FF 9F AD |  if_e	jmp	#LR__2374
16c80                 | LR__2378
16c80     45 28 0E F2 | 	cmp	local06, #69 wz
16c84     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
16c88     18 00 90 5D |  if_ne	jmp	#LR__2379
16c8c     0F 13 02 F6 | 	mov	arg01, local01
16c90     00 14 06 F6 | 	mov	arg02, #0
16c94     AC FD BF FD | 	call	#__system____builtin_atoi
16c98     11 FB 01 F1 | 	add	result1, local03
16c9c     FD 2A 02 F6 | 	mov	local07, result1
16ca0     04 00 90 FD | 	jmp	#LR__2380
16ca4                 | LR__2379
16ca4     11 2B 02 F6 | 	mov	local07, local03
16ca8                 | LR__2380
16ca8     15 17 02 F6 | 	mov	arg03, local07
16cac     10 13 02 F6 | 	mov	arg01, local02
16cb0     00 90 20 FF 
16cb4     00 14 06 F6 | 	mov	arg02, ##1092616192
16cb8     44 04 B0 FD | 	call	#__system___float_pow_n
16cbc     12 FB 61 F5 | 	xor	result1, local04
16cc0     A7 F0 03 F6 | 	mov	ptra, fp
16cc4     B2 00 A0 FD | 	call	#popregs_
16cc8                 | __system____builtin_atof_ret
16cc8     2D 00 64 FD | 	ret
16ccc                 | 
16ccc                 | __system____builtin_ilogb
16ccc     20 FC BF FD | 	call	#__system___float_Unpack
16cd0     00 FE 0D F2 | 	cmp	result3, #0 wz
16cd4     00 00 40 AF 
16cd8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
16cdc     24 00 90 AD |  if_e	jmp	#LR__2391
16ce0     80 FC 0D F2 | 	cmp	result2, #128 wz
16ce4     18 00 90 5D |  if_ne	jmp	#LR__2390
16ce8     00 00 10 FF 
16cec     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
16cf0     1E FA CD A9 |  if_e	bmask	result1, #30
16cf4     0C 00 90 AD |  if_e	jmp	#LR__2391
16cf8     1F FA C5 F9 | 	decod	result1, #31
16cfc     04 00 90 FD | 	jmp	#LR__2391
16d00                 | LR__2390
16d00     FE FA 01 F6 | 	mov	result1, result2
16d04                 | LR__2391
16d04                 | __system____builtin_ilogb_ret
16d04     2D 00 64 FD | 	ret
16d08                 | 
16d08                 | __system____builtin_sinf
16d08     03 4A 05 F6 | 	mov	COUNT_, #3
16d0c     A8 00 A0 FD | 	call	#pushregs_
16d10     09 1F 02 F6 | 	mov	local01, arg01
16d14     66 E6 1E FF 
16d18     CD 14 06 F6 | 	mov	arg02, ##1036831949
16d1c     01 16 06 F6 | 	mov	arg03, #1
16d20     DC FA BF FD | 	call	#__system___float_cmp
16d24     00 FA 55 F2 | 	cmps	result1, #0 wc
16d28     5C 00 90 3D |  if_ae	jmp	#LR__2400
16d2c     0F 13 02 F6 | 	mov	arg01, local01
16d30     66 E6 5E FF 
16d34     CD 14 06 F6 | 	mov	arg02, ##-1110651699
16d38     01 16 66 F6 | 	neg	arg03, #1
16d3c     C0 FA BF FD | 	call	#__system___float_cmp
16d40     01 FA 55 F2 | 	cmps	result1, #1 wc
16d44     40 00 90 CD |  if_b	jmp	#LR__2400
16d48     0F 13 02 F6 | 	mov	arg01, local01
16d4c     0F 15 02 F6 | 	mov	arg02, local01
16d50     78 F6 BF FD | 	call	#__system___float_mul
16d54     FD 12 02 F6 | 	mov	arg01, result1
16d58     0F 15 02 F6 | 	mov	arg02, local01
16d5c     6C F6 BF FD | 	call	#__system___float_mul
16d60     FD 12 02 F6 | 	mov	arg01, result1
16d64     00 60 20 FF 
16d68     00 14 06 F6 | 	mov	arg02, ##1086324736
16d6c     60 F8 BF FD | 	call	#__system___float_div
16d70     FD 14 02 F6 | 	mov	arg02, result1
16d74     0F 13 02 F6 | 	mov	arg01, local01
16d78     1F 14 E6 F4 | 	bitnot	arg02, #31
16d7c     54 F3 BF FD | 	call	#__system___float_add
16d80     FD 20 02 F6 | 	mov	local02, result1
16d84     54 00 90 FD | 	jmp	#LR__2401
16d88                 | LR__2400
16d88     0F 13 02 F6 | 	mov	arg01, local01
16d8c     7C 91 26 FF 
16d90     83 15 06 F6 | 	mov	arg02, ##1294137731
16d94     34 F6 BF FD | 	call	#__system___float_mul
16d98     FD 12 02 F6 | 	mov	arg01, result1
16d9c     00 14 06 F6 | 	mov	arg02, #0
16da0     F0 FA BF FD | 	call	#__system___float_tointeger
16da4     02 FA 65 F0 | 	shl	result1, #2
16da8     00 00 A0 FF 
16dac     FD 00 48 FD | 	qrotate	##1073741824, result1
16db0     19 12 62 FD | 	getqy	arg01
16db4     09 13 52 F6 | 	abs	arg01, arg01 wc
16db8     1F 22 C6 C9 |  if_b	decod	local03, #31
16dbc     00 22 06 36 |  if_ae	mov	local03, #0
16dc0     DC F2 BF FD | 	call	#__system___float_fromuns
16dc4     11 FB 61 F5 | 	xor	result1, local03
16dc8     FD 12 02 F6 | 	mov	arg01, result1
16dcc     00 40 27 FF 
16dd0     00 14 06 F6 | 	mov	arg02, ##1317011456
16dd4     F8 F7 BF FD | 	call	#__system___float_div
16dd8     FD 20 02 F6 | 	mov	local02, result1
16ddc                 | LR__2401
16ddc     10 FB 01 F6 | 	mov	result1, local02
16de0     A7 F0 03 F6 | 	mov	ptra, fp
16de4     B2 00 A0 FD | 	call	#popregs_
16de8                 | __system____builtin_sinf_ret
16de8     2D 00 64 FD | 	ret
16dec                 | 
16dec                 | __system____builtin_exp2f
16dec     04 4A 05 F6 | 	mov	COUNT_, #4
16df0     A8 00 A0 FD | 	call	#pushregs_
16df4     09 1F 02 F6 | 	mov	local01, arg01
16df8     00 7F 21 FF 
16dfc     00 14 06 F6 | 	mov	arg02, ##1123942400
16e00     01 16 66 F6 | 	neg	arg03, #1
16e04     F8 F9 BF FD | 	call	#__system___float_cmp
16e08     00 FA 55 F2 | 	cmps	result1, #0 wc
16e0c     00 C0 3F 3F 
16e10     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
16e14     DC 00 90 3D |  if_ae	jmp	#LR__2411
16e18     0F 13 02 F6 | 	mov	arg01, local01
16e1c     00 7F 61 FF 
16e20     00 14 06 F6 | 	mov	arg02, ##-1023541248
16e24     01 16 06 F6 | 	mov	arg03, #1
16e28     D4 F9 BF FD | 	call	#__system___float_cmp
16e2c     00 FA 55 F2 | 	cmps	result1, #0 wc
16e30     00 FA 05 C6 |  if_b	mov	result1, #0
16e34     BC 00 90 CD |  if_b	jmp	#LR__2411
16e38     0F 13 02 F6 | 	mov	arg01, local01
16e3c     00 14 06 F6 | 	mov	arg02, #0
16e40     50 FA BF FD | 	call	#__system___float_tointeger
16e44     FD 20 02 F6 | 	mov	local02, result1
16e48     10 13 52 F6 | 	abs	arg01, local02 wc
16e4c     1F 22 C6 C9 |  if_b	decod	local03, #31
16e50     00 22 06 36 |  if_ae	mov	local03, #0
16e54     48 F2 BF FD | 	call	#__system___float_fromuns
16e58     11 FB 61 F5 | 	xor	result1, local03
16e5c     FD 14 02 F6 | 	mov	arg02, result1
16e60     0F 13 02 F6 | 	mov	arg01, local01
16e64     1F 14 E6 F4 | 	bitnot	arg02, #31
16e68     68 F2 BF FD | 	call	#__system___float_add
16e6c     FD 24 02 F6 | 	mov	local04, result1
16e70     12 13 02 F6 | 	mov	arg01, local04
16e74     00 14 06 F6 | 	mov	arg02, #0
16e78     01 16 06 F6 | 	mov	arg03, #1
16e7c     80 F9 BF FD | 	call	#__system___float_cmp
16e80     00 FA 55 F2 | 	cmps	result1, #0 wc
16e84     18 00 90 3D |  if_ae	jmp	#LR__2410
16e88     12 13 02 F6 | 	mov	arg01, local04
16e8c     00 C0 1F FF 
16e90     00 14 06 F6 | 	mov	arg02, ##1065353216
16e94     3C F2 BF FD | 	call	#__system___float_add
16e98     FD 24 02 F6 | 	mov	local04, result1
16e9c     01 20 86 F1 | 	sub	local02, #1
16ea0                 | LR__2410
16ea0     7F 20 06 F1 | 	add	local02, #127
16ea4     17 20 66 F0 | 	shl	local02, #23
16ea8     12 13 02 F6 | 	mov	arg01, local04
16eac     00 80 26 FF 
16eb0     00 14 06 F6 | 	mov	arg02, ##1291845632
16eb4     14 F5 BF FD | 	call	#__system___float_mul
16eb8     FD 12 02 F6 | 	mov	arg01, result1
16ebc     00 14 06 F6 | 	mov	arg02, #0
16ec0     D0 F9 BF FD | 	call	#__system___float_tointeger
16ec4     FD 24 0A F6 | 	mov	local04, result1 wz
16ec8     10 FB 01 A6 |  if_e	mov	result1, local02
16ecc     24 00 90 AD |  if_e	jmp	#LR__2411
16ed0     3E 24 26 F4 | 	bith	local04, #62
16ed4     0F 24 62 FD | 	qexp	local04
16ed8     10 13 02 F6 | 	mov	arg01, local02
16edc     18 14 62 FD | 	getqx	arg02
16ee0     01 14 06 F1 | 	add	arg02, #1
16ee4     01 14 46 F0 | 	shr	arg02, #1
16ee8     00 80 1F FF 
16eec     00 14 06 F1 | 	add	arg02, ##1056964608
16ef0     D8 F4 BF FD | 	call	#__system___float_mul
16ef4                 | LR__2411
16ef4     A7 F0 03 F6 | 	mov	ptra, fp
16ef8     B2 00 A0 FD | 	call	#popregs_
16efc                 | __system____builtin_exp2f_ret
16efc     2D 00 64 FD | 	ret
16f00                 | 
16f00                 | __system____builtin_log2f
16f00     06 4A 05 F6 | 	mov	COUNT_, #6
16f04     A8 00 A0 FD | 	call	#pushregs_
16f08     09 1F 02 F6 | 	mov	local01, arg01
16f0c     09 21 0A F6 | 	mov	local02, arg01 wz
16f10     00 00 40 5F 
16f14     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
16f18     00 40 00 AF 
16f1c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
16f20     08 01 90 AD |  if_e	jmp	#LR__2424
16f24     00 20 56 F2 | 	cmps	local02, #0 wc
16f28     00 E0 3F CF 
16f2c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
16f30     F8 00 90 CD |  if_b	jmp	#LR__2424
16f34     0F 13 02 F6 | 	mov	arg01, local01
16f38     00 90 20 FF 
16f3c     00 14 06 F6 | 	mov	arg02, ##1092616192
16f40     01 16 06 F6 | 	mov	arg03, #1
16f44     B8 F8 BF FD | 	call	#__system___float_cmp
16f48     00 FA 0D F2 | 	cmp	result1, #0 wz
16f4c     4D 2A 20 AF 
16f50     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
16f54     D4 00 90 AD |  if_e	jmp	#LR__2424
16f58     0F 13 02 F6 | 	mov	arg01, local01
16f5c     FC 16 20 FF 
16f60     54 14 06 F6 | 	mov	arg02, ##1076754516
16f64     01 16 06 F6 | 	mov	arg03, #1
16f68     94 F8 BF FD | 	call	#__system___float_cmp
16f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
16f70     55 DC 1F AF 
16f74     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
16f78     B0 00 90 AD |  if_e	jmp	#LR__2424
16f7c     10 23 02 F6 | 	mov	local03, local02
16f80     17 22 46 F0 | 	shr	local03, #23
16f84     11 23 E2 F8 | 	getbyte	local03, local03, #0
16f88     17 21 06 F4 | 	bitl	local02, #279
16f8c     10 25 02 F6 | 	mov	local04, local02
16f90     FF 22 0E F2 | 	cmp	local03, #255 wz
16f94     1C 00 90 5D |  if_ne	jmp	#LR__2420
16f98     00 24 0E F2 | 	cmp	local04, #0 wz
16f9c     00 C0 3F 5F 
16fa0     00 26 06 56 |  if_ne	mov	local05, ##2139095040
16fa4     00 E0 3F AF 
16fa8     00 26 06 A6 |  if_e	mov	local05, ##2143289344
16fac     13 FB 01 F6 | 	mov	result1, local05
16fb0     78 00 90 FD | 	jmp	#LR__2424
16fb4                 | LR__2420
16fb4     00 22 0E F2 | 	cmp	local03, #0 wz
16fb8     17 24 26 54 |  if_ne	bith	local04, #23
16fbc     7F 22 86 51 |  if_ne	sub	local03, #127
16fc0     28 00 90 5D |  if_ne	jmp	#LR__2423
16fc4     00 24 0E F2 | 	cmp	local04, #0 wz
16fc8     00 40 00 AF 
16fcc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
16fd0     58 00 90 AD |  if_e	jmp	#LR__2424
16fd4     7E 22 66 F6 | 	neg	local03, #126
16fd8     97 08 48 FB | 	callpa	#(@LR__2422-@LR__2421)>>2,fcache_load_ptr_
16fdc                 | LR__2421
16fdc     17 24 2E F4 | 	testbn	local04, #23 wz
16fe0     01 24 66 A0 |  if_e	shl	local04, #1
16fe4     01 22 06 A1 |  if_e	add	local03, #1
16fe8     F0 FF 9F AD |  if_e	jmp	#LR__2421
16fec                 | LR__2422
16fec                 | LR__2423
16fec     0E 24 62 FD | 	qlog	local04
16ff0     01 22 86 F1 | 	sub	local03, #1
16ff4     11 13 52 F6 | 	abs	arg01, local03 wc
16ff8     1F 28 C6 C9 |  if_b	decod	local06, #31
16ffc     00 28 06 36 |  if_ae	mov	local06, #0
17000     18 26 62 FD | 	getqx	local05
17004     9B 26 06 F4 | 	bitl	local05, #155
17008     08 26 06 F1 | 	add	local05, #8
1700c     04 26 46 F0 | 	shr	local05, #4
17010     00 C0 1F FF 
17014     00 26 06 F1 | 	add	local05, ##1065353216
17018     84 F0 BF FD | 	call	#__system___float_fromuns
1701c     14 FB 61 F5 | 	xor	result1, local06
17020     FD 14 02 F6 | 	mov	arg02, result1
17024     13 13 02 F6 | 	mov	arg01, local05
17028     A8 F0 BF FD | 	call	#__system___float_add
1702c                 | LR__2424
1702c     A7 F0 03 F6 | 	mov	ptra, fp
17030     B2 00 A0 FD | 	call	#popregs_
17034                 | __system____builtin_log2f_ret
17034     2D 00 64 FD | 	ret
17038                 | 
17038                 | __system____builtin_powf
17038     04 4A 05 F6 | 	mov	COUNT_, #4
1703c     A8 00 A0 FD | 	call	#pushregs_
17040     09 1F 02 F6 | 	mov	local01, arg01
17044     0A 21 02 F6 | 	mov	local02, arg02
17048     10 13 02 F6 | 	mov	arg01, local02
1704c     00 14 06 F6 | 	mov	arg02, #0
17050     40 F8 BF FD | 	call	#__system___float_tointeger
17054     FD 22 02 F6 | 	mov	local03, result1
17058     11 13 52 F6 | 	abs	arg01, local03 wc
1705c     1F 24 C6 C9 |  if_b	decod	local04, #31
17060     00 24 06 36 |  if_ae	mov	local04, #0
17064     38 F0 BF FD | 	call	#__system___float_fromuns
17068     12 FB 61 F5 | 	xor	result1, local04
1706c     FD 12 02 F6 | 	mov	arg01, result1
17070     10 15 02 F6 | 	mov	arg02, local02
17074     01 16 06 F6 | 	mov	arg03, #1
17078     84 F7 BF FD | 	call	#__system___float_cmp
1707c     00 FA 0D F2 | 	cmp	result1, #0 wz
17080     18 00 90 5D |  if_ne	jmp	#LR__2430
17084     00 C0 1F FF 
17088     00 12 06 F6 | 	mov	arg01, ##1065353216
1708c     0F 15 02 F6 | 	mov	arg02, local01
17090     11 17 02 F6 | 	mov	arg03, local03
17094     68 00 B0 FD | 	call	#__system___float_pow_n
17098     58 00 90 FD | 	jmp	#LR__2431
1709c                 | LR__2430
1709c     0F 13 02 F6 | 	mov	arg01, local01
170a0     00 14 06 F6 | 	mov	arg02, #0
170a4     01 16 06 F6 | 	mov	arg03, #1
170a8     54 F7 BF FD | 	call	#__system___float_cmp
170ac     00 FA 55 F2 | 	cmps	result1, #0 wc
170b0     00 E0 3F CF 
170b4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
170b8     38 00 90 CD |  if_b	jmp	#LR__2431
170bc     0F 13 02 F6 | 	mov	arg01, local01
170c0     00 14 06 F6 | 	mov	arg02, #0
170c4     01 16 06 F6 | 	mov	arg03, #1
170c8     34 F7 BF FD | 	call	#__system___float_cmp
170cc     00 FA 0D F2 | 	cmp	result1, #0 wz
170d0     00 FA 05 A6 |  if_e	mov	result1, #0
170d4     1C 00 90 AD |  if_e	jmp	#LR__2431
170d8     0F 13 02 F6 | 	mov	arg01, local01
170dc     20 FE BF FD | 	call	#__system____builtin_log2f
170e0     FD 12 02 F6 | 	mov	arg01, result1
170e4     10 15 02 F6 | 	mov	arg02, local02
170e8     E0 F2 BF FD | 	call	#__system___float_mul
170ec     FD 12 02 F6 | 	mov	arg01, result1
170f0     F8 FC BF FD | 	call	#__system____builtin_exp2f
170f4                 | LR__2431
170f4     A7 F0 03 F6 | 	mov	ptra, fp
170f8     B2 00 A0 FD | 	call	#popregs_
170fc                 | __system____builtin_powf_ret
170fc     2D 00 64 FD | 	ret
17100                 | 
17100                 | __system___float_pow_n
17100     05 4A 05 F6 | 	mov	COUNT_, #5
17104     A8 00 A0 FD | 	call	#pushregs_
17108     09 1F 02 F6 | 	mov	local01, arg01
1710c     0A 21 02 F6 | 	mov	local02, arg02
17110     0B 23 02 F6 | 	mov	local03, arg03
17114     00 22 56 F2 | 	cmps	local03, #0 wc
17118     18 00 90 3D |  if_ae	jmp	#LR__2440
1711c     01 24 06 F6 | 	mov	local04, #1
17120     11 23 62 F6 | 	neg	local03, local03
17124     00 22 56 F2 | 	cmps	local03, #0 wc
17128     00 FA 05 C6 |  if_b	mov	result1, #0
1712c     94 00 90 CD |  if_b	jmp	#LR__2448
17130     04 00 90 FD | 	jmp	#LR__2441
17134                 | LR__2440
17134     00 24 06 F6 | 	mov	local04, #0
17138                 | LR__2441
17138     00 C0 1F FF 
1713c     00 26 06 F6 | 	mov	local05, ##1065353216
17140                 | LR__2442
17140     01 22 56 F2 | 	cmps	local03, #1 wc
17144     30 00 90 CD |  if_b	jmp	#LR__2444
17148     01 22 CE F7 | 	test	local03, #1 wz
1714c     10 00 90 AD |  if_e	jmp	#LR__2443
17150     13 13 02 F6 | 	mov	arg01, local05
17154     10 15 02 F6 | 	mov	arg02, local02
17158     70 F2 BF FD | 	call	#__system___float_mul
1715c     FD 26 02 F6 | 	mov	local05, result1
17160                 | LR__2443
17160     01 22 C6 F0 | 	sar	local03, #1
17164     10 13 02 F6 | 	mov	arg01, local02
17168     10 15 02 F6 | 	mov	arg02, local02
1716c     5C F2 BF FD | 	call	#__system___float_mul
17170     FD 20 02 F6 | 	mov	local02, result1
17174     C8 FF 9F FD | 	jmp	#LR__2442
17178                 | LR__2444
17178     00 24 0E F2 | 	cmp	local04, #0 wz
1717c     14 00 90 AD |  if_e	jmp	#LR__2445
17180     0F 13 02 F6 | 	mov	arg01, local01
17184     13 15 02 F6 | 	mov	arg02, local05
17188     44 F4 BF FD | 	call	#__system___float_div
1718c     FD 26 02 F6 | 	mov	local05, result1
17190     2C 00 90 FD | 	jmp	#LR__2447
17194                 | LR__2445
17194     0F 13 02 F6 | 	mov	arg01, local01
17198     00 C0 1F FF 
1719c     00 14 06 F6 | 	mov	arg02, ##1065353216
171a0     01 16 06 F6 | 	mov	arg03, #1
171a4     58 F6 BF FD | 	call	#__system___float_cmp
171a8     00 FA 0D F2 | 	cmp	result1, #0 wz
171ac     10 00 90 AD |  if_e	jmp	#LR__2446
171b0     0F 13 02 F6 | 	mov	arg01, local01
171b4     13 15 02 F6 | 	mov	arg02, local05
171b8     10 F2 BF FD | 	call	#__system___float_mul
171bc     FD 26 02 F6 | 	mov	local05, result1
171c0                 | LR__2446
171c0                 | LR__2447
171c0     13 FB 01 F6 | 	mov	result1, local05
171c4                 | LR__2448
171c4     A7 F0 03 F6 | 	mov	ptra, fp
171c8     B2 00 A0 FD | 	call	#popregs_
171cc                 | __system___float_pow_n_ret
171cc     2D 00 64 FD | 	ret
171d0                 | 
171d0                 | __system___gc_ptrs
171d0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
171d4     00 03 02 F6 | 	mov	_var02, _var01
171d8     F3 01 00 FF 
171dc     F8 03 06 F1 | 	add	_var02, ##255992
171e0     00 FD 09 FB | 	rdlong	result2, _var01 wz
171e4     74 00 90 5D |  if_ne	jmp	#LR__2450
171e8     01 FD 01 F6 | 	mov	result2, _var02
171ec     00 FD 81 F1 | 	sub	result2, _var01
171f0     00 03 58 FC | 	wrword	#1, _var01
171f4     00 FB 01 F6 | 	mov	result1, _var01
171f8     02 FA 05 F1 | 	add	result1, #2
171fc     36 00 80 FF 
17200     FD 20 59 FC | 	wrword	##27792, result1
17204     00 FB 01 F6 | 	mov	result1, _var01
17208     04 FA 05 F1 | 	add	result1, #4
1720c     FD 00 58 FC | 	wrword	#0, result1
17210     00 FB 01 F6 | 	mov	result1, _var01
17214     06 FA 05 F1 | 	add	result1, #6
17218     FD 02 58 FC | 	wrword	#1, result1
1721c     10 00 06 F1 | 	add	_var01, #16
17220     FE FC 51 F6 | 	abs	result2, result2 wc
17224     04 FC 45 F0 | 	shr	result2, #4
17228     FE FC 81 F6 | 	negc	result2, result2
1722c     00 FD 51 FC | 	wrword	result2, _var01
17230     00 FD 01 F6 | 	mov	result2, _var01
17234     02 FC 05 F1 | 	add	result2, #2
17238     36 00 80 FF 
1723c     FE 1E 59 FC | 	wrword	##27791, result2
17240     00 FD 01 F6 | 	mov	result2, _var01
17244     04 FC 05 F1 | 	add	result2, #4
17248     FE 00 58 FC | 	wrword	#0, result2
1724c     00 FD 01 F6 | 	mov	result2, _var01
17250     06 FC 05 F1 | 	add	result2, #6
17254     FE 00 58 FC | 	wrword	#0, result2
17258     10 00 86 F1 | 	sub	_var01, #16
1725c                 | LR__2450
1725c     00 FB 01 F6 | 	mov	result1, _var01
17260     01 FD 01 F6 | 	mov	result2, _var02
17264                 | __system___gc_ptrs_ret
17264     2D 00 64 FD | 	ret
17268                 | 
17268                 | __system___gc_tryalloc
17268     0B 4A 05 F6 | 	mov	COUNT_, #11
1726c     A8 00 A0 FD | 	call	#pushregs_
17270     09 1F 02 F6 | 	mov	local01, arg01
17274     0A 21 02 F6 | 	mov	local02, arg02
17278     54 FF BF FD | 	call	#__system___gc_ptrs
1727c     FD 22 02 F6 | 	mov	local03, result1
17280     FE 24 02 F6 | 	mov	local04, result2
17284     11 27 02 F6 | 	mov	local05, local03
17288     00 28 06 F6 | 	mov	local06, #0
1728c     97 1E 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
17290                 | LR__2460
17290     13 2B 02 F6 | 	mov	local07, local05
17294     06 26 06 F1 | 	add	local05, #6
17298     13 15 EA FA | 	rdword	arg02, local05 wz
1729c     11 13 02 F6 | 	mov	arg01, local03
172a0     00 FA 05 A6 |  if_e	mov	result1, #0
172a4     04 14 66 50 |  if_ne	shl	arg02, #4
172a8     0A 13 02 51 |  if_ne	add	arg01, arg02
172ac     09 FB 01 56 |  if_ne	mov	result1, arg01
172b0     FD 26 0A F6 | 	mov	local05, result1 wz
172b4     13 29 E2 5A |  if_ne	rdword	local06, local05
172b8     00 26 0E F2 | 	cmp	local05, #0 wz
172bc     12 27 52 52 |  if_ne	cmps	local05, local04 wc
172c0     08 00 90 1D |  if_a	jmp	#LR__2462
172c4     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
172c8     C4 FF 9F 1D |  if_a	jmp	#LR__2460
172cc                 | LR__2461
172cc                 | LR__2462
172cc     00 26 0E F2 | 	cmp	local05, #0 wz
172d0     13 FB 01 A6 |  if_e	mov	result1, local05
172d4     3C 01 90 AD |  if_e	jmp	#LR__2465
172d8     13 FD 01 F6 | 	mov	result2, local05
172dc     06 FC 05 F1 | 	add	result2, #6
172e0     FE 2C E2 FA | 	rdword	local08, result2
172e4     14 1F 52 F2 | 	cmps	local01, local06 wc
172e8     C0 00 90 3D |  if_ae	jmp	#LR__2464
172ec     13 1F 52 FC | 	wrword	local01, local05
172f0     13 13 02 F6 | 	mov	arg01, local05
172f4     0F 2D 02 F6 | 	mov	local08, local01
172f8     04 2C 66 F0 | 	shl	local08, #4
172fc     16 13 02 F1 | 	add	arg01, local08
17300     0F 29 82 F1 | 	sub	local06, local01
17304     09 29 52 FC | 	wrword	local06, arg01
17308     09 2D 02 F6 | 	mov	local08, arg01
1730c     02 2C 06 F1 | 	add	local08, #2
17310     36 00 80 FF 
17314     16 1F 59 FC | 	wrword	##27791, local08
17318     13 15 0A F6 | 	mov	arg02, local05 wz
1731c     00 FA 05 A6 |  if_e	mov	result1, #0
17320     11 15 82 51 |  if_ne	sub	arg02, local03
17324     04 14 46 50 |  if_ne	shr	arg02, #4
17328     0A FB 01 56 |  if_ne	mov	result1, arg02
1732c     09 2D 02 F6 | 	mov	local08, arg01
17330     04 2C 06 F1 | 	add	local08, #4
17334     16 FB 51 FC | 	wrword	result1, local08
17338     13 2D 02 F6 | 	mov	local08, local05
1733c     06 2C 06 F1 | 	add	local08, #6
17340     09 15 02 F6 | 	mov	arg02, arg01
17344     16 2D E2 FA | 	rdword	local08, local08
17348     06 14 06 F1 | 	add	arg02, #6
1734c     0A 2D 52 FC | 	wrword	local08, arg02
17350     09 2F 02 F6 | 	mov	local09, arg01
17354     17 15 0A F6 | 	mov	arg02, local09 wz
17358     00 FA 05 A6 |  if_e	mov	result1, #0
1735c     11 15 82 51 |  if_ne	sub	arg02, local03
17360     04 14 46 50 |  if_ne	shr	arg02, #4
17364     0A FB 01 56 |  if_ne	mov	result1, arg02
17368     FD 2C 02 F6 | 	mov	local08, result1
1736c     09 31 EA FA | 	rdword	local10, arg01 wz
17370     00 FA 05 A6 |  if_e	mov	result1, #0
17374     04 30 66 50 |  if_ne	shl	local10, #4
17378     18 13 02 51 |  if_ne	add	arg01, local10
1737c     09 FB 01 56 |  if_ne	mov	result1, arg01
17380     FD 32 0A F6 | 	mov	local11, result1 wz
17384     24 00 90 AD |  if_e	jmp	#LR__2463
17388     12 33 52 F2 | 	cmps	local11, local04 wc
1738c     1C 00 90 3D |  if_ae	jmp	#LR__2463
17390     17 15 0A F6 | 	mov	arg02, local09 wz
17394     00 FA 05 A6 |  if_e	mov	result1, #0
17398     11 15 82 51 |  if_ne	sub	arg02, local03
1739c     04 14 46 50 |  if_ne	shr	arg02, #4
173a0     0A FB 01 56 |  if_ne	mov	result1, arg02
173a4     04 32 06 F1 | 	add	local11, #4
173a8     19 FB 51 FC | 	wrword	result1, local11
173ac                 | LR__2463
173ac                 | LR__2464
173ac     06 2A 06 F1 | 	add	local07, #6
173b0     15 2D 52 FC | 	wrword	local08, local07
173b4     36 00 00 FF 
173b8     80 2E 06 F6 | 	mov	local09, ##27776
173bc     10 2F 42 F5 | 	or	local09, local02
173c0     00 FA 05 F6 | 	mov	result1, #0
173c4     01 FA 61 FD | 	cogid	result1
173c8     FD 2E 42 F5 | 	or	local09, result1
173cc     13 33 02 F6 | 	mov	local11, local05
173d0     02 32 06 F1 | 	add	local11, #2
173d4     19 2F 52 FC | 	wrword	local09, local11
173d8     11 2F 02 F6 | 	mov	local09, local03
173dc     08 2E 06 F1 | 	add	local09, #8
173e0     13 33 02 F6 | 	mov	local11, local05
173e4     17 2F E2 FA | 	rdword	local09, local09
173e8     06 32 06 F1 | 	add	local11, #6
173ec     19 2F 52 FC | 	wrword	local09, local11
173f0     13 15 0A F6 | 	mov	arg02, local05 wz
173f4     00 FA 05 A6 |  if_e	mov	result1, #0
173f8     11 15 82 51 |  if_ne	sub	arg02, local03
173fc     04 14 46 50 |  if_ne	shr	arg02, #4
17400     0A FB 01 56 |  if_ne	mov	result1, arg02
17404     08 22 06 F1 | 	add	local03, #8
17408     11 FB 51 FC | 	wrword	result1, local03
1740c     08 26 06 F1 | 	add	local05, #8
17410     13 FB 01 F6 | 	mov	result1, local05
17414                 | LR__2465
17414     A7 F0 03 F6 | 	mov	ptra, fp
17418     B2 00 A0 FD | 	call	#popregs_
1741c                 | __system___gc_tryalloc_ret
1741c     2D 00 64 FD | 	ret
17420                 | 
17420                 | __system___gc_alloc_managed
17420     01 4A 05 F6 | 	mov	COUNT_, #1
17424     A8 00 A0 FD | 	call	#pushregs_
17428     09 1F 02 F6 | 	mov	local01, arg01
1742c     00 14 06 F6 | 	mov	arg02, #0
17430     1C 00 B0 FD | 	call	#__system___gc_doalloc
17434     FD 14 0A F6 | 	mov	arg02, result1 wz
17438     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1743c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
17440     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
17444     A7 F0 03 F6 | 	mov	ptra, fp
17448     B2 00 A0 FD | 	call	#popregs_
1744c                 | __system___gc_alloc_managed_ret
1744c     2D 00 64 FD | 	ret
17450                 | 
17450                 | __system___gc_doalloc
17450     06 4A 05 F6 | 	mov	COUNT_, #6
17454     A8 00 A0 FD | 	call	#pushregs_
17458     09 1F 0A F6 | 	mov	local01, arg01 wz
1745c     0A 21 02 F6 | 	mov	local02, arg02
17460     00 FA 05 A6 |  if_e	mov	result1, #0
17464     8C 00 90 AD |  if_e	jmp	#LR__2477
17468     17 1E 06 F1 | 	add	local01, #23
1746c     0F 1E 26 F5 | 	andn	local01, #15
17470     04 1E 46 F0 | 	shr	local01, #4
17474     1C E8 05 F1 | 	add	ptr___system__dat__, #28
17478     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1747c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
17480     FC C5 BF FD | 	call	#__system___lockmem
17484     0F 13 02 F6 | 	mov	arg01, local01
17488     10 15 02 F6 | 	mov	arg02, local02
1748c     D8 FD BF FD | 	call	#__system___gc_tryalloc
17490     FD 22 0A F6 | 	mov	local03, result1 wz
17494     14 00 90 5D |  if_ne	jmp	#LR__2470
17498     70 03 B0 FD | 	call	#__system___gc_docollect
1749c     0F 13 02 F6 | 	mov	arg01, local01
174a0     10 15 02 F6 | 	mov	arg02, local02
174a4     C0 FD BF FD | 	call	#__system___gc_tryalloc
174a8     FD 22 02 F6 | 	mov	local03, result1
174ac                 | LR__2470
174ac     1C E8 05 F1 | 	add	ptr___system__dat__, #28
174b0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
174b4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
174b8     09 01 68 FC | 	wrlong	#0, arg01
174bc     00 22 0E F2 | 	cmp	local03, #0 wz
174c0     2C 00 90 AD |  if_e	jmp	#LR__2476
174c4     04 1E 66 F0 | 	shl	local01, #4
174c8     08 1E 86 F1 | 	sub	local01, #8
174cc     0F 25 52 F6 | 	abs	local04, local01 wc
174d0     02 24 46 F0 | 	shr	local04, #2
174d4     12 27 8A F6 | 	negc	local05, local04 wz
174d8     11 29 02 F6 | 	mov	local06, local03
174dc     10 00 90 AD |  if_e	jmp	#LR__2475
174e0     97 06 48 FB | 	callpa	#(@LR__2473-@LR__2471)>>2,fcache_load_ptr_
174e4                 | LR__2471
174e4     13 05 D8 FC | 	rep	@LR__2474, local05
174e8                 | LR__2472
174e8     14 01 68 FC | 	wrlong	#0, local06
174ec     04 28 06 F1 | 	add	local06, #4
174f0                 | LR__2473
174f0                 | LR__2474
174f0                 | LR__2475
174f0                 | LR__2476
174f0     11 FB 01 F6 | 	mov	result1, local03
174f4                 | LR__2477
174f4     A7 F0 03 F6 | 	mov	ptra, fp
174f8     B2 00 A0 FD | 	call	#popregs_
174fc                 | __system___gc_doalloc_ret
174fc     2D 00 64 FD | 	ret
17500                 | 
17500                 | __system___gc_isvalidptr
17500     F8 16 06 F4 | 	bitl	arg03, #248
17504     08 16 86 F1 | 	sub	arg03, #8
17508     09 17 52 F2 | 	cmps	arg03, arg01 wc
1750c     08 00 90 CD |  if_b	jmp	#LR__2480
17510     0A 17 52 F2 | 	cmps	arg03, arg02 wc
17514     08 00 90 CD |  if_b	jmp	#LR__2481
17518                 | LR__2480
17518     00 FA 05 F6 | 	mov	result1, #0
1751c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
17520                 | LR__2481
17520     0B 01 02 F6 | 	mov	_var01, arg03
17524     09 01 62 F5 | 	xor	_var01, arg01
17528     0F 00 CE F7 | 	test	_var01, #15 wz
1752c     00 FA 05 56 |  if_ne	mov	result1, #0
17530     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
17534     0B 01 02 F6 | 	mov	_var01, arg03
17538     02 00 06 F1 | 	add	_var01, #2
1753c     00 01 E2 FA | 	rdword	_var01, _var01
17540     7F 00 00 FF 
17544     C0 01 06 F5 | 	and	_var01, ##65472
17548     36 00 00 FF 
1754c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
17550     00 FA 05 56 |  if_ne	mov	result1, #0
17554     0B FB 01 A6 |  if_e	mov	result1, arg03
17558                 | __system___gc_isvalidptr_ret
17558     2D 00 64 FD | 	ret
1755c                 | 
1755c                 | __system___gc_free
1755c     09 17 02 F6 | 	mov	arg03, arg01
17560     6C FC BF FD | 	call	#__system___gc_ptrs
17564     FD 12 02 F6 | 	mov	arg01, result1
17568     FE 14 02 F6 | 	mov	arg02, result2
1756c     90 FF BF FD | 	call	#__system___gc_isvalidptr
17570     FD 14 0A F6 | 	mov	arg02, result1 wz
17574     28 00 90 AD |  if_e	jmp	#LR__2490
17578     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1757c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
17580     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
17584     F8 C4 BF FD | 	call	#__system___lockmem
17588     0A 13 02 F6 | 	mov	arg01, arg02
1758c     14 00 B0 FD | 	call	#__system___gc_dofree
17590     1C E8 05 F1 | 	add	ptr___system__dat__, #28
17594     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
17598     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1759c     09 01 68 FC | 	wrlong	#0, arg01
175a0                 | LR__2490
175a0                 | __system___gc_free_ret
175a0     2D 00 64 FD | 	ret
175a4                 | 
175a4                 | __system___gc_dofree
175a4     06 4A 05 F6 | 	mov	COUNT_, #6
175a8     A8 00 A0 FD | 	call	#pushregs_
175ac     09 1F 02 F6 | 	mov	local01, arg01
175b0     1C FC BF FD | 	call	#__system___gc_ptrs
175b4     FD 20 02 F6 | 	mov	local02, result1
175b8     FE 22 02 F6 | 	mov	local03, result2
175bc     0F 15 02 F6 | 	mov	arg02, local01
175c0     02 14 06 F1 | 	add	arg02, #2
175c4     36 00 80 FF 
175c8     0A 1F 59 FC | 	wrword	##27791, arg02
175cc     0F 25 02 F6 | 	mov	local04, local01
175d0     0F 13 02 F6 | 	mov	arg01, local01
175d4     09 27 EA FA | 	rdword	local05, arg01 wz
175d8     00 FA 05 A6 |  if_e	mov	result1, #0
175dc     04 26 66 50 |  if_ne	shl	local05, #4
175e0     13 13 02 51 |  if_ne	add	arg01, local05
175e4     09 FB 01 56 |  if_ne	mov	result1, arg01
175e8     FD 28 02 F6 | 	mov	local06, result1
175ec     97 24 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
175f0                 | LR__2500
175f0     04 24 06 F1 | 	add	local04, #4
175f4     12 15 EA FA | 	rdword	arg02, local04 wz
175f8     10 13 02 F6 | 	mov	arg01, local02
175fc     00 FA 05 A6 |  if_e	mov	result1, #0
17600     04 14 66 50 |  if_ne	shl	arg02, #4
17604     0A 13 02 51 |  if_ne	add	arg01, arg02
17608     09 FB 01 56 |  if_ne	mov	result1, arg01
1760c     FD 24 0A F6 | 	mov	local04, result1 wz
17610     24 00 90 AD |  if_e	jmp	#LR__2502
17614     12 13 02 F6 | 	mov	arg01, local04
17618     00 FA 05 F6 | 	mov	result1, #0
1761c     02 12 06 F1 | 	add	arg01, #2
17620     09 13 E2 FA | 	rdword	arg01, arg01
17624     36 00 00 FF 
17628     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1762c     01 FA 65 A6 |  if_e	neg	result1, #1
17630     00 FA 0D F2 | 	cmp	result1, #0 wz
17634     B8 FF 9F AD |  if_e	jmp	#LR__2500
17638                 | LR__2501
17638                 | LR__2502
17638     00 24 0E F2 | 	cmp	local04, #0 wz
1763c     10 25 02 A6 |  if_e	mov	local04, local02
17640     12 15 02 F6 | 	mov	arg02, local04
17644     06 14 06 F1 | 	add	arg02, #6
17648     0F 13 02 F6 | 	mov	arg01, local01
1764c     0A 15 E2 FA | 	rdword	arg02, arg02
17650     06 12 06 F1 | 	add	arg01, #6
17654     09 15 52 FC | 	wrword	arg02, arg01
17658     0F 15 0A F6 | 	mov	arg02, local01 wz
1765c     00 FA 05 A6 |  if_e	mov	result1, #0
17660     10 15 82 51 |  if_ne	sub	arg02, local02
17664     04 14 46 50 |  if_ne	shr	arg02, #4
17668     0A FB 01 56 |  if_ne	mov	result1, arg02
1766c     12 15 02 F6 | 	mov	arg02, local04
17670     06 14 06 F1 | 	add	arg02, #6
17674     0A FB 51 FC | 	wrword	result1, arg02
17678     10 25 0A F2 | 	cmp	local04, local02 wz
1767c     A4 00 90 AD |  if_e	jmp	#LR__2505
17680     12 13 02 F6 | 	mov	arg01, local04
17684     09 27 EA FA | 	rdword	local05, arg01 wz
17688     00 FA 05 A6 |  if_e	mov	result1, #0
1768c     04 26 66 50 |  if_ne	shl	local05, #4
17690     13 13 02 51 |  if_ne	add	arg01, local05
17694     09 FB 01 56 |  if_ne	mov	result1, arg01
17698     0F FB 09 F2 | 	cmp	result1, local01 wz
1769c     84 00 90 5D |  if_ne	jmp	#LR__2504
176a0     12 29 E2 FA | 	rdword	local06, local04
176a4     0F 15 E2 FA | 	rdword	arg02, local01
176a8     0A 29 02 F1 | 	add	local06, arg02
176ac     12 29 52 FC | 	wrword	local06, local04
176b0     0F 29 02 F6 | 	mov	local06, local01
176b4     02 28 06 F1 | 	add	local06, #2
176b8     14 01 58 FC | 	wrword	#0, local06
176bc     0F 13 02 F6 | 	mov	arg01, local01
176c0     09 27 EA FA | 	rdword	local05, arg01 wz
176c4     00 FA 05 A6 |  if_e	mov	result1, #0
176c8     04 26 66 50 |  if_ne	shl	local05, #4
176cc     13 13 02 51 |  if_ne	add	arg01, local05
176d0     09 FB 01 56 |  if_ne	mov	result1, arg01
176d4     FD 28 02 F6 | 	mov	local06, result1
176d8     11 29 52 F2 | 	cmps	local06, local03 wc
176dc     20 00 90 3D |  if_ae	jmp	#LR__2503
176e0     12 15 0A F6 | 	mov	arg02, local04 wz
176e4     00 FA 05 A6 |  if_e	mov	result1, #0
176e8     10 15 82 51 |  if_ne	sub	arg02, local02
176ec     04 14 46 50 |  if_ne	shr	arg02, #4
176f0     0A FB 01 56 |  if_ne	mov	result1, arg02
176f4     14 15 02 F6 | 	mov	arg02, local06
176f8     04 14 06 F1 | 	add	arg02, #4
176fc     0A FB 51 FC | 	wrword	result1, arg02
17700                 | LR__2503
17700     0F 15 02 F6 | 	mov	arg02, local01
17704     06 14 06 F1 | 	add	arg02, #6
17708     12 FD 01 F6 | 	mov	result2, local04
1770c     0A 15 E2 FA | 	rdword	arg02, arg02
17710     06 FC 05 F1 | 	add	result2, #6
17714     FE 14 52 FC | 	wrword	arg02, result2
17718     06 1E 06 F1 | 	add	local01, #6
1771c     0F 01 58 FC | 	wrword	#0, local01
17720     12 1F 02 F6 | 	mov	local01, local04
17724                 | LR__2504
17724                 | LR__2505
17724     0F 13 02 F6 | 	mov	arg01, local01
17728     09 27 EA FA | 	rdword	local05, arg01 wz
1772c     00 FA 05 A6 |  if_e	mov	result1, #0
17730     04 26 66 50 |  if_ne	shl	local05, #4
17734     13 13 02 51 |  if_ne	add	arg01, local05
17738     09 FB 01 56 |  if_ne	mov	result1, arg01
1773c     FD 14 0A F6 | 	mov	arg02, result1 wz
17740     B8 00 90 AD |  if_e	jmp	#LR__2507
17744     11 15 52 F2 | 	cmps	arg02, local03 wc
17748     B0 00 90 3D |  if_ae	jmp	#LR__2507
1774c     0A 13 02 F6 | 	mov	arg01, arg02
17750     00 FA 05 F6 | 	mov	result1, #0
17754     02 12 06 F1 | 	add	arg01, #2
17758     09 13 E2 FA | 	rdword	arg01, arg01
1775c     36 00 00 FF 
17760     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
17764     01 FA 65 A6 |  if_e	neg	result1, #1
17768     00 FA 0D F2 | 	cmp	result1, #0 wz
1776c     8C 00 90 AD |  if_e	jmp	#LR__2507
17770     0F 25 02 F6 | 	mov	local04, local01
17774     12 29 E2 FA | 	rdword	local06, local04
17778     0A 13 02 F6 | 	mov	arg01, arg02
1777c     09 1F E2 FA | 	rdword	local01, arg01
17780     0F 29 02 F1 | 	add	local06, local01
17784     12 29 52 FC | 	wrword	local06, local04
17788     09 29 02 F6 | 	mov	local06, arg01
1778c     06 28 06 F1 | 	add	local06, #6
17790     12 1F 02 F6 | 	mov	local01, local04
17794     14 29 E2 FA | 	rdword	local06, local06
17798     06 1E 06 F1 | 	add	local01, #6
1779c     0F 29 52 FC | 	wrword	local06, local01
177a0     09 29 02 F6 | 	mov	local06, arg01
177a4     02 28 06 F1 | 	add	local06, #2
177a8     14 55 59 FC | 	wrword	#170, local06
177ac     09 29 02 F6 | 	mov	local06, arg01
177b0     06 28 06 F1 | 	add	local06, #6
177b4     14 01 58 FC | 	wrword	#0, local06
177b8     09 27 EA FA | 	rdword	local05, arg01 wz
177bc     00 FA 05 A6 |  if_e	mov	result1, #0
177c0     04 26 66 50 |  if_ne	shl	local05, #4
177c4     13 13 02 51 |  if_ne	add	arg01, local05
177c8     09 FB 01 56 |  if_ne	mov	result1, arg01
177cc     FD 28 0A F6 | 	mov	local06, result1 wz
177d0     28 00 90 AD |  if_e	jmp	#LR__2506
177d4     11 29 52 F2 | 	cmps	local06, local03 wc
177d8     20 00 90 3D |  if_ae	jmp	#LR__2506
177dc     12 15 0A F6 | 	mov	arg02, local04 wz
177e0     00 FA 05 A6 |  if_e	mov	result1, #0
177e4     10 15 82 51 |  if_ne	sub	arg02, local02
177e8     04 14 46 50 |  if_ne	shr	arg02, #4
177ec     0A FB 01 56 |  if_ne	mov	result1, arg02
177f0     14 25 02 F6 | 	mov	local04, local06
177f4     04 24 06 F1 | 	add	local04, #4
177f8     12 FB 51 FC | 	wrword	result1, local04
177fc                 | LR__2506
177fc                 | LR__2507
177fc     14 FB 01 F6 | 	mov	result1, local06
17800     A7 F0 03 F6 | 	mov	ptra, fp
17804     B2 00 A0 FD | 	call	#popregs_
17808                 | __system___gc_dofree_ret
17808     2D 00 64 FD | 	ret
1780c                 | 
1780c                 | __system___gc_docollect
1780c     05 4A 05 F6 | 	mov	COUNT_, #5
17810     A8 00 A0 FD | 	call	#pushregs_
17814     B8 F9 BF FD | 	call	#__system___gc_ptrs
17818     FE 1E 02 F6 | 	mov	local01, result2
1781c     FD 20 02 F6 | 	mov	local02, result1
17820     10 13 02 F6 | 	mov	arg01, local02
17824     09 23 EA FA | 	rdword	local03, arg01 wz
17828     00 FA 05 A6 |  if_e	mov	result1, #0
1782c     04 22 66 50 |  if_ne	shl	local03, #4
17830     11 13 02 51 |  if_ne	add	arg01, local03
17834     09 FB 01 56 |  if_ne	mov	result1, arg01
17838     FD 24 0A F6 | 	mov	local04, result1 wz
1783c     00 FA 05 F6 | 	mov	result1, #0
17840     01 FA 61 FD | 	cogid	result1
17844     FD 26 02 F6 | 	mov	local05, result1
17848     48 00 90 AD |  if_e	jmp	#LR__2512
1784c     97 22 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
17850                 | LR__2510
17850     0F 25 52 F2 | 	cmps	local04, local01 wc
17854     3C 00 90 3D |  if_ae	jmp	#LR__2512
17858     12 15 02 F6 | 	mov	arg02, local04
1785c     02 14 06 F1 | 	add	arg02, #2
17860     0A 15 E2 FA | 	rdword	arg02, arg02
17864     20 14 26 F5 | 	andn	arg02, #32
17868     12 13 02 F6 | 	mov	arg01, local04
1786c     02 12 06 F1 | 	add	arg01, #2
17870     09 15 52 FC | 	wrword	arg02, arg01
17874     12 13 02 F6 | 	mov	arg01, local04
17878     09 23 EA FA | 	rdword	local03, arg01 wz
1787c     00 FA 05 A6 |  if_e	mov	result1, #0
17880     04 22 66 50 |  if_ne	shl	local03, #4
17884     11 13 02 51 |  if_ne	add	arg01, local03
17888     09 FB 01 56 |  if_ne	mov	result1, arg01
1788c     FD 24 0A F6 | 	mov	local04, result1 wz
17890     BC FF 9F 5D |  if_ne	jmp	#LR__2510
17894                 | LR__2511
17894                 | LR__2512
17894     00 22 06 F6 | 	mov	local03, #0
17898     00 12 06 F6 | 	mov	arg01, #0
1789c     B8 C1 BF FD | 	call	#__system____topofstack
178a0     FD 14 02 F6 | 	mov	arg02, result1
178a4     11 13 02 F6 | 	mov	arg01, local03
178a8     90 00 B0 FD | 	call	#__system___gc_markhub
178ac     1C 01 B0 FD | 	call	#__system___gc_markcog
178b0     10 13 02 F6 | 	mov	arg01, local02
178b4     09 23 EA FA | 	rdword	local03, arg01 wz
178b8     00 FA 05 A6 |  if_e	mov	result1, #0
178bc     04 22 66 50 |  if_ne	shl	local03, #4
178c0     11 13 02 51 |  if_ne	add	arg01, local03
178c4     09 FB 01 56 |  if_ne	mov	result1, arg01
178c8     FD 20 0A F6 | 	mov	local02, result1 wz
178cc     60 00 90 AD |  if_e	jmp	#LR__2516
178d0                 | LR__2513
178d0     10 25 02 F6 | 	mov	local04, local02
178d4     12 13 02 F6 | 	mov	arg01, local04
178d8     09 23 EA FA | 	rdword	local03, arg01 wz
178dc     00 FA 05 A6 |  if_e	mov	result1, #0
178e0     04 22 66 50 |  if_ne	shl	local03, #4
178e4     11 13 02 51 |  if_ne	add	arg01, local03
178e8     09 FB 01 56 |  if_ne	mov	result1, arg01
178ec     FD 20 02 F6 | 	mov	local02, result1
178f0     12 15 02 F6 | 	mov	arg02, local04
178f4     02 14 06 F1 | 	add	arg02, #2
178f8     0A 15 E2 FA | 	rdword	arg02, arg02
178fc     20 14 CE F7 | 	test	arg02, #32 wz
17900     10 14 CE A7 |  if_e	test	arg02, #16 wz
17904     1C 00 90 5D |  if_ne	jmp	#LR__2515
17908     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1790c     13 15 0A F2 | 	cmp	arg02, local05 wz
17910     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
17914     0C 00 90 5D |  if_ne	jmp	#LR__2514
17918     12 13 02 F6 | 	mov	arg01, local04
1791c     84 FC BF FD | 	call	#__system___gc_dofree
17920     FD 20 02 F6 | 	mov	local02, result1
17924                 | LR__2514
17924                 | LR__2515
17924     00 20 0E F2 | 	cmp	local02, #0 wz
17928     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1792c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2513
17930                 | LR__2516
17930     A7 F0 03 F6 | 	mov	ptra, fp
17934     B2 00 A0 FD | 	call	#popregs_
17938                 | __system___gc_docollect_ret
17938     2D 00 64 FD | 	ret
1793c                 | 
1793c                 | __system___gc_markhub
1793c     04 4A 05 F6 | 	mov	COUNT_, #4
17940     A8 00 A0 FD | 	call	#pushregs_
17944     09 1F 02 F6 | 	mov	local01, arg01
17948     0A 21 02 F6 | 	mov	local02, arg02
1794c     80 F8 BF FD | 	call	#__system___gc_ptrs
17950     FD 22 02 F6 | 	mov	local03, result1
17954     FE 24 02 F6 | 	mov	local04, result2
17958                 | LR__2520
17958     10 1F 52 F2 | 	cmps	local01, local02 wc
1795c     60 00 90 3D |  if_ae	jmp	#LR__2521
17960     0F 17 02 FB | 	rdlong	arg03, local01
17964     04 1E 06 F1 | 	add	local01, #4
17968     12 15 02 F6 | 	mov	arg02, local04
1796c     11 13 02 F6 | 	mov	arg01, local03
17970     8C FB BF FD | 	call	#__system___gc_isvalidptr
17974     FD 16 0A F6 | 	mov	arg03, result1 wz
17978     DC FF 9F AD |  if_e	jmp	#LR__2520
1797c     0B 13 02 F6 | 	mov	arg01, arg03
17980     00 FA 05 F6 | 	mov	result1, #0
17984     02 12 06 F1 | 	add	arg01, #2
17988     09 13 E2 FA | 	rdword	arg01, arg01
1798c     36 00 00 FF 
17990     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
17994     01 FA 65 A6 |  if_e	neg	result1, #1
17998     00 FA 0D F2 | 	cmp	result1, #0 wz
1799c     B8 FF 9F 5D |  if_ne	jmp	#LR__2520
179a0     0B FD 01 F6 | 	mov	result2, arg03
179a4     02 FC 05 F1 | 	add	result2, #2
179a8     FE FC E1 FA | 	rdword	result2, result2
179ac     0F FC 25 F5 | 	andn	result2, #15
179b0     2E FC 45 F5 | 	or	result2, #46
179b4     02 16 06 F1 | 	add	arg03, #2
179b8     0B FD 51 FC | 	wrword	result2, arg03
179bc     98 FF 9F FD | 	jmp	#LR__2520
179c0                 | LR__2521
179c0     A7 F0 03 F6 | 	mov	ptra, fp
179c4     B2 00 A0 FD | 	call	#popregs_
179c8                 | __system___gc_markhub_ret
179c8     2D 00 64 FD | 	ret
179cc                 | 
179cc                 | __system___gc_markcog
179cc     04 4A 05 F6 | 	mov	COUNT_, #4
179d0     A8 00 A0 FD | 	call	#pushregs_
179d4     F8 F7 BF FD | 	call	#__system___gc_ptrs
179d8     FD 1E 02 F6 | 	mov	local01, result1
179dc     FE 20 02 F6 | 	mov	local02, result2
179e0     EF 23 06 F6 | 	mov	local03, #495
179e4                 | LR__2530
179e4                 | 	'.live	local03
179e4     00 22 96 F9 | 	alts	local03, #0
179e8     11 25 02 F6 | 	mov	local04, local03
179ec     0F 13 02 F6 | 	mov	arg01, local01
179f0     10 15 02 F6 | 	mov	arg02, local02
179f4     12 17 02 F6 | 	mov	arg03, local04
179f8     04 FB BF FD | 	call	#__system___gc_isvalidptr
179fc     00 FA 0D F2 | 	cmp	result1, #0 wz
17a00     18 00 90 AD |  if_e	jmp	#LR__2531
17a04     FD 24 02 F6 | 	mov	local04, result1
17a08     02 24 06 F1 | 	add	local04, #2
17a0c     12 25 E2 FA | 	rdword	local04, local04
17a10     20 24 46 F5 | 	or	local04, #32
17a14     02 FA 05 F1 | 	add	result1, #2
17a18     FD 24 52 FC | 	wrword	local04, result1
17a1c                 | LR__2531
17a1c     01 22 86 F1 | 	sub	local03, #1
17a20     00 22 56 F2 | 	cmps	local03, #0 wc
17a24     BC FF 9F 3D |  if_ae	jmp	#LR__2530
17a28     A7 F0 03 F6 | 	mov	ptra, fp
17a2c     B2 00 A0 FD | 	call	#popregs_
17a30                 | __system___gc_markcog_ret
17a30     2D 00 64 FD | 	ret
17a34                 | 
17a34                 | __system__opendir
17a34     06 4A 05 F6 | 	mov	COUNT_, #6
17a38     A8 00 A0 FD | 	call	#pushregs_
17a3c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
17a40     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
17a44     09 15 02 F6 | 	mov	arg02, arg01
17a48     0F 13 02 F6 | 	mov	arg01, local01
17a4c     00 16 06 F6 | 	mov	arg03, #0
17a50     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
17a54     D8 C6 BF FD | 	call	#__system____getvfsforfile
17a58     FD 20 0A F6 | 	mov	local02, result1 wz
17a5c     10 00 90 AD |  if_e	jmp	#LR__2540
17a60     28 20 06 F1 | 	add	local02, #40
17a64     10 17 0A FB | 	rdlong	arg03, local02 wz
17a68     28 20 86 F1 | 	sub	local02, #40
17a6c     14 00 90 5D |  if_ne	jmp	#LR__2541
17a70                 | LR__2540
17a70     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17a74     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
17a78     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17a7c     00 FA 05 F6 | 	mov	result1, #0
17a80     90 00 90 FD | 	jmp	#LR__2543
17a84                 | LR__2541
17a84     5C 12 06 F6 | 	mov	arg01, #92
17a88     10 14 06 F6 | 	mov	arg02, #16
17a8c     C0 F9 BF FD | 	call	#__system___gc_doalloc
17a90     FD 22 0A F6 | 	mov	local03, result1 wz
17a94     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
17a98     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
17a9c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
17aa0     00 FA 05 A6 |  if_e	mov	result1, #0
17aa4     6C 00 90 AD |  if_e	jmp	#LR__2543
17aa8     28 20 06 F1 | 	add	local02, #40
17aac     10 25 02 FB | 	rdlong	local04, local02
17ab0     12 27 02 F6 | 	mov	local05, local04
17ab4     28 20 86 F1 | 	sub	local02, #40
17ab8     13 26 46 F7 | 	zerox	local05, #19
17abc     14 24 46 F0 | 	shr	local04, #20
17ac0     02 24 66 F0 | 	shl	local04, #2
17ac4     ED 24 02 F1 | 	add	local04, __methods__
17ac8     12 25 02 FB | 	rdlong	local04, local04
17acc     11 13 02 F6 | 	mov	arg01, local03
17ad0     0F 15 02 F6 | 	mov	arg02, local01
17ad4     F2 28 02 F6 | 	mov	local06, objptr
17ad8     13 E5 01 F6 | 	mov	objptr, local05
17adc     2D 24 62 FD | 	call	local04
17ae0     14 E5 01 F6 | 	mov	objptr, local06
17ae4     FD 16 0A F6 | 	mov	arg03, result1 wz
17ae8     20 00 90 AD |  if_e	jmp	#LR__2542
17aec     00 16 4E F2 | 	cmps	arg03, #0 wz
17af0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17af4     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
17af8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17afc     11 13 02 F6 | 	mov	arg01, local03
17b00     58 FA BF FD | 	call	#__system___gc_free
17b04     00 FA 05 F6 | 	mov	result1, #0
17b08     08 00 90 FD | 	jmp	#LR__2543
17b0c                 | LR__2542
17b0c     11 21 62 FC | 	wrlong	local02, local03
17b10     11 FB 01 F6 | 	mov	result1, local03
17b14                 | LR__2543
17b14     A7 F0 03 F6 | 	mov	ptra, fp
17b18     B2 00 A0 FD | 	call	#popregs_
17b1c                 | __system__opendir_ret
17b1c     2D 00 64 FD | 	ret
17b20                 | 
17b20                 | __system__closedir
17b20     04 4A 05 F6 | 	mov	COUNT_, #4
17b24     A8 00 A0 FD | 	call	#pushregs_
17b28     09 1F 02 F6 | 	mov	local01, arg01
17b2c     0F 13 02 FB | 	rdlong	arg01, local01
17b30     2C 12 06 F1 | 	add	arg01, #44
17b34     09 21 02 FB | 	rdlong	local02, arg01
17b38     10 23 02 F6 | 	mov	local03, local02
17b3c     13 22 46 F7 | 	zerox	local03, #19
17b40     14 20 46 F0 | 	shr	local02, #20
17b44     02 20 66 F0 | 	shl	local02, #2
17b48     ED 20 02 F1 | 	add	local02, __methods__
17b4c     10 21 02 FB | 	rdlong	local02, local02
17b50     0F 13 02 F6 | 	mov	arg01, local01
17b54     F2 24 02 F6 | 	mov	local04, objptr
17b58     11 E5 01 F6 | 	mov	objptr, local03
17b5c     2D 20 62 FD | 	call	local02
17b60     12 E5 01 F6 | 	mov	objptr, local04
17b64     FD 24 02 F6 | 	mov	local04, result1
17b68     0F 13 02 F6 | 	mov	arg01, local01
17b6c     EC F9 BF FD | 	call	#__system___gc_free
17b70     00 24 4E F2 | 	cmps	local04, #0 wz
17b74     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17b78     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
17b7c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17b80     01 FA 65 56 |  if_ne	neg	result1, #1
17b84     00 FA 05 A6 |  if_e	mov	result1, #0
17b88     A7 F0 03 F6 | 	mov	ptra, fp
17b8c     B2 00 A0 FD | 	call	#popregs_
17b90                 | __system__closedir_ret
17b90     2D 00 64 FD | 	ret
17b94                 | 
17b94                 | __system__readdir
17b94     04 4A 05 F6 | 	mov	COUNT_, #4
17b98     A8 00 A0 FD | 	call	#pushregs_
17b9c     09 15 0A FB | 	rdlong	arg02, arg01 wz
17ba0     08 12 06 F1 | 	add	arg01, #8
17ba4     09 1F 02 F6 | 	mov	local01, arg01
17ba8     08 12 86 F1 | 	sub	arg01, #8
17bac     00 FA 05 A6 |  if_e	mov	result1, #0
17bb0     5C 00 90 AD |  if_e	jmp	#LR__2551
17bb4     30 14 06 F1 | 	add	arg02, #48
17bb8     0A 21 02 FB | 	rdlong	local02, arg02
17bbc     10 23 02 F6 | 	mov	local03, local02
17bc0     13 22 46 F7 | 	zerox	local03, #19
17bc4     14 20 46 F0 | 	shr	local02, #20
17bc8     02 20 66 F0 | 	shl	local02, #2
17bcc     ED 20 02 F1 | 	add	local02, __methods__
17bd0     10 21 02 FB | 	rdlong	local02, local02
17bd4     0F 15 02 F6 | 	mov	arg02, local01
17bd8     F2 24 02 F6 | 	mov	local04, objptr
17bdc     11 E5 01 F6 | 	mov	objptr, local03
17be0     2D 20 62 FD | 	call	local02
17be4     12 E5 01 F6 | 	mov	objptr, local04
17be8     00 FA 4D F2 | 	cmps	result1, #0 wz
17bec     1C 00 90 AD |  if_e	jmp	#LR__2550
17bf0     01 FA 55 F2 | 	cmps	result1, #1 wc
17bf4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
17bf8     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
17bfc     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
17c00     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
17c04     00 FA 05 F6 | 	mov	result1, #0
17c08     04 00 90 FD | 	jmp	#LR__2551
17c0c                 | LR__2550
17c0c     0F FB 01 F6 | 	mov	result1, local01
17c10                 | LR__2551
17c10     A7 F0 03 F6 | 	mov	ptra, fp
17c14     B2 00 A0 FD | 	call	#popregs_
17c18                 | __system__readdir_ret
17c18     2D 00 64 FD | 	ret
17c1c                 | 
17c1c                 | __system___openraw
17c1c     15 4A 05 F6 | 	mov	COUNT_, #21
17c20     A8 00 A0 FD | 	call	#pushregs_
17c24     09 1F 02 F6 | 	mov	local01, arg01
17c28     0A 21 02 F6 | 	mov	local02, arg02
17c2c     0B 23 02 F6 | 	mov	local03, arg03
17c30     0C 25 02 F6 | 	mov	local04, arg04
17c34     04 26 06 F6 | 	mov	local05, #4
17c38     0F 29 02 F6 | 	mov	local06, local01
17c3c     00 2A 06 F6 | 	mov	local07, #0
17c40     84 E9 05 F1 | 	add	ptr___system__dat__, #388
17c44     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
17c48     16 13 02 F6 | 	mov	arg01, local08
17c4c     10 15 02 F6 | 	mov	arg02, local02
17c50     00 16 06 F6 | 	mov	arg03, #0
17c54     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
17c58     D4 C4 BF FD | 	call	#__system____getvfsforfile
17c5c     FD 2E 0A F6 | 	mov	local09, result1 wz
17c60     10 00 90 AD |  if_e	jmp	#LR__2560
17c64     20 2E 06 F1 | 	add	local09, #32
17c68     17 FB 09 FB | 	rdlong	result1, local09 wz
17c6c     20 2E 86 F1 | 	sub	local09, #32
17c70     14 00 90 5D |  if_ne	jmp	#LR__2561
17c74                 | LR__2560
17c74     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17c78     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
17c7c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17c80     01 FA 65 F6 | 	neg	result1, #1
17c84     8C 02 90 FD | 	jmp	#LR__2574
17c88                 | LR__2561
17c88     14 13 02 F6 | 	mov	arg01, local06
17c8c     00 14 06 F6 | 	mov	arg02, #0
17c90     34 16 06 F6 | 	mov	arg03, #52
17c94     09 31 02 F6 | 	mov	local10, arg01
17c98     98 00 A0 FD | 	call	#\builtin_bytefill_
17c9c     20 2E 06 F1 | 	add	local09, #32
17ca0     17 33 02 FB | 	rdlong	local11, local09
17ca4     19 35 02 F6 | 	mov	local12, local11
17ca8     19 37 02 F6 | 	mov	local13, local11
17cac     20 2E 86 F1 | 	sub	local09, #32
17cb0     1B 39 02 F6 | 	mov	local14, local13
17cb4     13 34 46 F7 | 	zerox	local12, #19
17cb8     14 38 46 F0 | 	shr	local14, #20
17cbc     02 38 66 F0 | 	shl	local14, #2
17cc0     ED 38 02 F1 | 	add	local14, __methods__
17cc4     1C 39 02 FB | 	rdlong	local14, local14
17cc8     14 3B 02 F6 | 	mov	local15, local06
17ccc     16 3D 02 F6 | 	mov	local16, local08
17cd0     11 3F 02 F6 | 	mov	local17, local03
17cd4     1D 13 02 F6 | 	mov	arg01, local15
17cd8     1E 15 02 F6 | 	mov	arg02, local16
17cdc     1F 17 02 F6 | 	mov	arg03, local17
17ce0     F2 40 02 F6 | 	mov	local18, objptr
17ce4     1A E5 01 F6 | 	mov	objptr, local12
17ce8     2D 38 62 FD | 	call	local14
17cec     20 E5 01 F6 | 	mov	objptr, local18
17cf0     FD 42 0A F6 | 	mov	local19, result1 wz
17cf4     04 22 CE 57 |  if_ne	test	local03, #4 wz
17cf8     58 00 90 AD |  if_e	jmp	#LR__2562
17cfc     24 2E 06 F1 | 	add	local09, #36
17d00     17 33 02 FB | 	rdlong	local11, local09
17d04     19 35 02 F6 | 	mov	local12, local11
17d08     19 37 02 F6 | 	mov	local13, local11
17d0c     24 2E 86 F1 | 	sub	local09, #36
17d10     1B 39 02 F6 | 	mov	local14, local13
17d14     13 34 46 F7 | 	zerox	local12, #19
17d18     14 38 46 F0 | 	shr	local14, #20
17d1c     02 38 66 F0 | 	shl	local14, #2
17d20     ED 38 02 F1 | 	add	local14, __methods__
17d24     1C 39 02 FB | 	rdlong	local14, local14
17d28     14 3B 02 F6 | 	mov	local15, local06
17d2c     16 3D 02 F6 | 	mov	local16, local08
17d30     12 3F 02 F6 | 	mov	local17, local04
17d34     1D 13 02 F6 | 	mov	arg01, local15
17d38     1E 15 02 F6 | 	mov	arg02, local16
17d3c     1F 17 02 F6 | 	mov	arg03, local17
17d40     F2 40 02 F6 | 	mov	local18, objptr
17d44     1A E5 01 F6 | 	mov	objptr, local12
17d48     2D 38 62 FD | 	call	local14
17d4c     20 E5 01 F6 | 	mov	objptr, local18
17d50     FD 42 02 F6 | 	mov	local19, result1
17d54                 | LR__2562
17d54     00 42 0E F2 | 	cmp	local19, #0 wz
17d58     8C 01 90 5D |  if_ne	jmp	#LR__2572
17d5c     11 45 02 F6 | 	mov	local20, local03
17d60     03 44 0E F5 | 	and	local20, #3 wz
17d64     02 26 46 55 |  if_ne	or	local05, #2
17d68     01 44 0E F2 | 	cmp	local20, #1 wz
17d6c     01 26 46 55 |  if_ne	or	local05, #1
17d70     20 22 CE F7 | 	test	local03, #32 wz
17d74     C0 26 46 55 |  if_ne	or	local05, #192
17d78     08 28 06 F1 | 	add	local06, #8
17d7c     14 27 62 FC | 	wrlong	local05, local06
17d80     0C 28 06 F1 | 	add	local06, #12
17d84     14 47 0A FB | 	rdlong	local21, local06 wz
17d88     14 28 86 F1 | 	sub	local06, #20
17d8c     18 00 90 5D |  if_ne	jmp	#LR__2563
17d90     04 2E 06 F1 | 	add	local09, #4
17d94     17 47 02 FB | 	rdlong	local21, local09
17d98     04 2E 86 F1 | 	sub	local09, #4
17d9c     14 28 06 F1 | 	add	local06, #20
17da0     14 47 62 FC | 	wrlong	local21, local06
17da4     14 28 86 F1 | 	sub	local06, #20
17da8                 | LR__2563
17da8     18 28 06 F1 | 	add	local06, #24
17dac     14 47 0A FB | 	rdlong	local21, local06 wz
17db0     18 28 86 F1 | 	sub	local06, #24
17db4     18 00 90 5D |  if_ne	jmp	#LR__2564
17db8     08 2E 06 F1 | 	add	local09, #8
17dbc     17 47 02 FB | 	rdlong	local21, local09
17dc0     08 2E 86 F1 | 	sub	local09, #8
17dc4     18 28 06 F1 | 	add	local06, #24
17dc8     14 47 62 FC | 	wrlong	local21, local06
17dcc     18 28 86 F1 | 	sub	local06, #24
17dd0                 | LR__2564
17dd0     24 28 06 F1 | 	add	local06, #36
17dd4     14 47 0A FB | 	rdlong	local21, local06 wz
17dd8     24 28 86 F1 | 	sub	local06, #36
17ddc     17 47 02 AB |  if_e	rdlong	local21, local09
17de0     24 28 06 A1 |  if_e	add	local06, #36
17de4     14 47 62 AC |  if_e	wrlong	local21, local06
17de8     24 28 86 A1 |  if_e	sub	local06, #36
17dec     28 28 06 F1 | 	add	local06, #40
17df0     14 47 0A FB | 	rdlong	local21, local06 wz
17df4     28 28 86 F1 | 	sub	local06, #40
17df8     18 00 90 5D |  if_ne	jmp	#LR__2565
17dfc     10 2E 06 F1 | 	add	local09, #16
17e00     17 47 02 FB | 	rdlong	local21, local09
17e04     10 2E 86 F1 | 	sub	local09, #16
17e08     28 28 06 F1 | 	add	local06, #40
17e0c     14 47 62 FC | 	wrlong	local21, local06
17e10     28 28 86 F1 | 	sub	local06, #40
17e14                 | LR__2565
17e14     30 28 06 F1 | 	add	local06, #48
17e18     14 47 0A FB | 	rdlong	local21, local06 wz
17e1c     30 28 86 F1 | 	sub	local06, #48
17e20     18 00 90 5D |  if_ne	jmp	#LR__2566
17e24     0C 2E 06 F1 | 	add	local09, #12
17e28     17 47 02 FB | 	rdlong	local21, local09
17e2c     0C 2E 86 F1 | 	sub	local09, #12
17e30     30 28 06 F1 | 	add	local06, #48
17e34     14 47 62 FC | 	wrlong	local21, local06
17e38     30 28 86 F1 | 	sub	local06, #48
17e3c                 | LR__2566
17e3c     1C 28 06 F1 | 	add	local06, #28
17e40     14 47 0A FB | 	rdlong	local21, local06 wz
17e44     1C 28 86 F1 | 	sub	local06, #28
17e48     1C 00 90 5D |  if_ne	jmp	#LR__2567
17e4c     01 2A 06 F6 | 	mov	local07, #1
17e50     F2 12 02 F6 | 	mov	arg01, objptr
17e54     00 A8 02 FF 
17e58     00 12 46 F5 | 	or	arg01, ##89128960
17e5c     1C 28 06 F1 | 	add	local06, #28
17e60     14 13 62 FC | 	wrlong	arg01, local06
17e64     1C 28 86 F1 | 	sub	local06, #28
17e68                 | LR__2567
17e68     20 28 06 F1 | 	add	local06, #32
17e6c     14 47 0A FB | 	rdlong	local21, local06 wz
17e70     20 28 86 F1 | 	sub	local06, #32
17e74     1C 00 90 5D |  if_ne	jmp	#LR__2568
17e78     01 2A 06 F6 | 	mov	local07, #1
17e7c     F2 12 02 F6 | 	mov	arg01, objptr
17e80     00 B0 02 FF 
17e84     00 12 46 F5 | 	or	arg01, ##90177536
17e88     20 28 06 F1 | 	add	local06, #32
17e8c     14 13 62 FC | 	wrlong	arg01, local06
17e90     20 28 86 F1 | 	sub	local06, #32
17e94                 | LR__2568
17e94     2C 28 06 F1 | 	add	local06, #44
17e98     14 47 0A FB | 	rdlong	local21, local06 wz
17e9c     2C 28 86 F1 | 	sub	local06, #44
17ea0     44 00 90 5D |  if_ne	jmp	#LR__2571
17ea4     14 2E 06 F1 | 	add	local09, #20
17ea8     17 47 0A FB | 	rdlong	local21, local09 wz
17eac     14 2E 86 F1 | 	sub	local09, #20
17eb0     18 00 90 AD |  if_e	jmp	#LR__2569
17eb4     14 2E 06 F1 | 	add	local09, #20
17eb8     17 47 02 FB | 	rdlong	local21, local09
17ebc     2C 28 06 F1 | 	add	local06, #44
17ec0     14 47 62 FC | 	wrlong	local21, local06
17ec4     2C 28 86 F1 | 	sub	local06, #44
17ec8     1C 00 90 FD | 	jmp	#LR__2570
17ecc                 | LR__2569
17ecc     01 2A 06 F6 | 	mov	local07, #1
17ed0     F2 12 02 F6 | 	mov	arg01, objptr
17ed4     00 B8 02 FF 
17ed8     00 12 46 F5 | 	or	arg01, ##91226112
17edc     2C 28 06 F1 | 	add	local06, #44
17ee0     14 13 62 FC | 	wrlong	arg01, local06
17ee4     2C 28 86 F1 | 	sub	local06, #44
17ee8                 | LR__2570
17ee8                 | LR__2571
17ee8                 | LR__2572
17ee8     00 2A 0E F2 | 	cmp	local07, #0 wz
17eec     14 13 02 56 |  if_ne	mov	arg01, local06
17ef0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
17ef4     00 42 0E F2 | 	cmp	local19, #0 wz
17ef8     00 12 06 A6 |  if_e	mov	arg01, #0
17efc     10 00 90 5D |  if_ne	jmp	#LR__2573
17f00     00 12 4E F2 | 	cmps	arg01, #0 wz
17f04     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17f08     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
17f0c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17f10                 | LR__2573
17f10     21 FB 01 F6 | 	mov	result1, local19
17f14                 | LR__2574
17f14     A7 F0 03 F6 | 	mov	ptra, fp
17f18     B2 00 A0 FD | 	call	#popregs_
17f1c                 | __system___openraw_ret
17f1c     2D 00 64 FD | 	ret
17f20                 | 
17f20                 | __system___closeraw
17f20     05 4A 05 F6 | 	mov	COUNT_, #5
17f24     A8 00 A0 FD | 	call	#pushregs_
17f28     09 1F 02 F6 | 	mov	local01, arg01
17f2c     00 20 06 F6 | 	mov	local02, #0
17f30     08 1E 06 F1 | 	add	local01, #8
17f34     0F FB 09 FB | 	rdlong	result1, local01 wz
17f38     08 1E 86 F1 | 	sub	local01, #8
17f3c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
17f40     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
17f44     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
17f48     01 FA 65 A6 |  if_e	neg	result1, #1
17f4c     A8 00 90 AD |  if_e	jmp	#LR__2582
17f50     2C 1E 06 F1 | 	add	local01, #44
17f54     0F FB 09 FB | 	rdlong	result1, local01 wz
17f58     2C 1E 86 F1 | 	sub	local01, #44
17f5c     38 00 90 AD |  if_e	jmp	#LR__2580
17f60     2C 1E 06 F1 | 	add	local01, #44
17f64     0F 23 02 FB | 	rdlong	local03, local01
17f68     11 25 02 F6 | 	mov	local04, local03
17f6c     2C 1E 86 F1 | 	sub	local01, #44
17f70     13 24 46 F7 | 	zerox	local04, #19
17f74     14 22 46 F0 | 	shr	local03, #20
17f78     02 22 66 F0 | 	shl	local03, #2
17f7c     ED 22 02 F1 | 	add	local03, __methods__
17f80     11 23 02 FB | 	rdlong	local03, local03
17f84     0F 13 02 F6 | 	mov	arg01, local01
17f88     F2 26 02 F6 | 	mov	local05, objptr
17f8c     12 E5 01 F6 | 	mov	objptr, local04
17f90     2D 22 62 FD | 	call	local03
17f94     13 E5 01 F6 | 	mov	objptr, local05
17f98                 | LR__2580
17f98     24 1E 06 F1 | 	add	local01, #36
17f9c     0F 27 0A FB | 	rdlong	local05, local01 wz
17fa0     24 1E 86 F1 | 	sub	local01, #36
17fa4     3C 00 90 AD |  if_e	jmp	#LR__2581
17fa8     24 1E 06 F1 | 	add	local01, #36
17fac     0F 23 02 FB | 	rdlong	local03, local01
17fb0     11 25 02 F6 | 	mov	local04, local03
17fb4     24 1E 86 F1 | 	sub	local01, #36
17fb8     13 24 46 F7 | 	zerox	local04, #19
17fbc     14 22 46 F0 | 	shr	local03, #20
17fc0     02 22 66 F0 | 	shl	local03, #2
17fc4     ED 22 02 F1 | 	add	local03, __methods__
17fc8     11 23 02 FB | 	rdlong	local03, local03
17fcc     0F 13 02 F6 | 	mov	arg01, local01
17fd0     F2 26 02 F6 | 	mov	local05, objptr
17fd4     12 E5 01 F6 | 	mov	objptr, local04
17fd8     2D 22 62 FD | 	call	local03
17fdc     13 E5 01 F6 | 	mov	objptr, local05
17fe0     FD 20 02 F6 | 	mov	local02, result1
17fe4                 | LR__2581
17fe4     0F 13 02 F6 | 	mov	arg01, local01
17fe8     00 14 06 F6 | 	mov	arg02, #0
17fec     34 16 06 F6 | 	mov	arg03, #52
17ff0     98 00 A0 FD | 	call	#\builtin_bytefill_
17ff4     10 FB 01 F6 | 	mov	result1, local02
17ff8                 | LR__2582
17ff8     A7 F0 03 F6 | 	mov	ptra, fp
17ffc     B2 00 A0 FD | 	call	#popregs_
18000                 | __system___closeraw_ret
18000     2D 00 64 FD | 	ret
18004                 | 
18004                 | __system___vfs_open_sdcardx
18004     0B 4A 05 F6 | 	mov	COUNT_, #11
18008     A8 00 A0 FD | 	call	#pushregs_
1800c     09 23 02 F6 | 	mov	local03, arg01
18010     0A 25 02 F6 | 	mov	local04, arg02
18014     0B 27 02 F6 | 	mov	local05, arg03
18018     0C 29 02 F6 | 	mov	local06, arg04
1801c     01 00 00 FF 
18020     24 12 06 F6 | 	mov	arg01, ##548
18024     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
18028     FD 2A 02 F6 | 	mov	local07, result1
1802c     01 00 00 FF 
18030     34 12 06 F6 | 	mov	arg01, ##564
18034     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
18038     FD 2C 02 F6 | 	mov	local08, result1
1803c     11 19 02 F6 | 	mov	arg04, local03
18040     1F 18 C6 F0 | 	sar	arg04, #31
18044     11 17 02 F6 | 	mov	arg03, local03
18048     01 12 06 F6 | 	mov	arg01, #1
1804c     00 14 06 F6 | 	mov	arg02, #0
18050     98 DF BF FD | 	call	#__system___int64_shl
18054     FD 1E 02 F6 | 	mov	local01, result1
18058     FE 2E 02 F6 | 	mov	local09, result2
1805c     12 19 02 F6 | 	mov	arg04, local04
18060     1F 18 C6 F0 | 	sar	arg04, #31
18064     12 17 02 F6 | 	mov	arg03, local04
18068     01 12 06 F6 | 	mov	arg01, #1
1806c     00 14 06 F6 | 	mov	arg02, #0
18070     78 DF BF FD | 	call	#__system___int64_shl
18074     FD 1E 42 F5 | 	or	local01, result1
18078     FE 2E 42 F5 | 	or	local09, result2
1807c     13 19 02 F6 | 	mov	arg04, local05
18080     1F 18 C6 F0 | 	sar	arg04, #31
18084     13 17 02 F6 | 	mov	arg03, local05
18088     01 12 06 F6 | 	mov	arg01, #1
1808c     00 14 06 F6 | 	mov	arg02, #0
18090     58 DF BF FD | 	call	#__system___int64_shl
18094     FD 1E 42 F5 | 	or	local01, result1
18098     FE 2E 42 F5 | 	or	local09, result2
1809c     14 19 02 F6 | 	mov	arg04, local06
180a0     1F 18 C6 F0 | 	sar	arg04, #31
180a4     14 17 02 F6 | 	mov	arg03, local06
180a8     01 12 06 F6 | 	mov	arg01, #1
180ac     00 14 06 F6 | 	mov	arg02, #0
180b0     38 DF BF FD | 	call	#__system___int64_shl
180b4     17 15 02 F6 | 	mov	arg02, local09
180b8     FD 1E 42 F5 | 	or	local01, result1
180bc     0A FD 41 F5 | 	or	result2, arg02
180c0     FE 20 02 F6 | 	mov	local02, result2
180c4     0F 13 02 F6 | 	mov	arg01, local01
180c8     10 15 02 F6 | 	mov	arg02, local02
180cc     54 DF BF FD | 	call	#__system___usepins
180d0     00 FA 0D F2 | 	cmp	result1, #0 wz
180d4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
180d8     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
180dc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
180e0     00 FA 05 A6 |  if_e	mov	result1, #0
180e4     B4 00 90 AD |  if_e	jmp	#LR__2592
180e8     0F 31 02 F6 | 	mov	local10, local01
180ec     10 2F 02 F6 | 	mov	local09, local02
180f0     01 00 00 FF 
180f4     08 2A 06 F1 | 	add	local07, ##520
180f8     15 31 62 FC | 	wrlong	local10, local07
180fc     04 2A 06 F1 | 	add	local07, #4
18100     15 2F 62 FC | 	wrlong	local09, local07
18104     01 00 00 FF 
18108     0C 2A 86 F1 | 	sub	local07, ##524
1810c     14 1B 02 F6 | 	mov	arg05, local06
18110     00 12 06 F6 | 	mov	arg01, #0
18114     11 15 02 F6 | 	mov	arg02, local03
18118     12 17 02 F6 | 	mov	arg03, local04
1811c     13 19 02 F6 | 	mov	arg04, local05
18120     F2 30 02 F6 | 	mov	local10, objptr
18124     15 E5 01 F6 | 	mov	objptr, local07
18128     3C 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
1812c     18 E5 01 F6 | 	mov	objptr, local10
18130     FD 32 0A F6 | 	mov	local11, result1 wz
18134     24 00 90 5D |  if_ne	jmp	#LR__2590
18138     16 01 00 FF 
1813c     AE 15 06 F6 | 	mov	arg02, ##@LR__3997
18140     16 13 02 F6 | 	mov	arg01, local08
18144     00 16 06 F6 | 	mov	arg03, #0
18148     F2 32 02 F6 | 	mov	local11, objptr
1814c     15 E5 01 F6 | 	mov	objptr, local07
18150     6C 60 B0 FD | 	call	#_fatfs_cc_f_mount
18154     19 E5 01 F6 | 	mov	objptr, local11
18158     FD 32 02 F6 | 	mov	local11, result1
1815c                 | LR__2590
1815c     00 32 0E F2 | 	cmp	local11, #0 wz
18160     24 00 90 AD |  if_e	jmp	#LR__2591
18164     0F 13 02 F6 | 	mov	arg01, local01
18168     10 15 02 F6 | 	mov	arg02, local02
1816c     08 DF BF FD | 	call	#__system___freepins
18170     19 13 6A F6 | 	neg	arg01, local11 wz
18174     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18178     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1817c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18180     00 FA 05 F6 | 	mov	result1, #0
18184     14 00 90 FD | 	jmp	#LR__2592
18188                 | LR__2591
18188     15 13 02 F6 | 	mov	arg01, local07
1818c     F2 32 02 F6 | 	mov	local11, objptr
18190     15 E5 01 F6 | 	mov	objptr, local07
18194     08 9D B0 FD | 	call	#_fatfs_cc_get_vfs
18198     19 E5 01 F6 | 	mov	objptr, local11
1819c                 | LR__2592
1819c     A7 F0 03 F6 | 	mov	ptra, fp
181a0     B2 00 A0 FD | 	call	#popregs_
181a4                 | __system___vfs_open_sdcardx_ret
181a4     2D 00 64 FD | 	ret
181a8                 | 
181a8                 | __system____default_getc
181a8     03 4A 05 F6 | 	mov	COUNT_, #3
181ac     A8 00 A0 FD | 	call	#pushregs_
181b0     09 1F 02 F6 | 	mov	local01, arg01
181b4     0F 21 02 FB | 	rdlong	local02, local01
181b8     08 20 06 F1 | 	add	local02, #8
181bc     10 23 02 FB | 	rdlong	local03, local02
181c0     02 22 CE F7 | 	test	local03, #2 wz
181c4     0F 13 02 56 |  if_ne	mov	arg01, local01
181c8     00 01 B0 5D |  if_ne	call	#__system____default_flush
181cc     10 23 02 FB | 	rdlong	local03, local02
181d0     01 22 46 F5 | 	or	local03, #1
181d4     10 23 62 FC | 	wrlong	local03, local02
181d8     08 20 86 F1 | 	sub	local02, #8
181dc     10 23 0A FB | 	rdlong	local03, local02 wz
181e0     0C 00 90 5D |  if_ne	jmp	#LR__2600
181e4     0F 13 02 F6 | 	mov	arg01, local01
181e8     24 18 B0 FD | 	call	#__system____default_filbuf
181ec     FD 22 02 F6 | 	mov	local03, result1
181f0                 | LR__2600
181f0     01 22 56 F2 | 	cmps	local03, #1 wc
181f4     01 FA 65 C6 |  if_b	neg	result1, #1
181f8     1C 00 90 CD |  if_b	jmp	#LR__2601
181fc     01 22 86 F1 | 	sub	local03, #1
18200     10 23 62 FC | 	wrlong	local03, local02
18204     04 20 06 F1 | 	add	local02, #4
18208     10 23 02 FB | 	rdlong	local03, local02
1820c     11 FB C1 FA | 	rdbyte	result1, local03
18210     01 22 06 F1 | 	add	local03, #1
18214     10 23 62 FC | 	wrlong	local03, local02
18218                 | LR__2601
18218     A7 F0 03 F6 | 	mov	ptra, fp
1821c     B2 00 A0 FD | 	call	#popregs_
18220                 | __system____default_getc_ret
18220     2D 00 64 FD | 	ret
18224                 | 
18224                 | __system____default_putc
18224     06 4A 05 F6 | 	mov	COUNT_, #6
18228     A8 00 A0 FD | 	call	#pushregs_
1822c     09 1F 02 F6 | 	mov	local01, arg01
18230     0A 21 02 F6 | 	mov	local02, arg02
18234     10 23 02 FB | 	rdlong	local03, local02
18238     08 22 06 F1 | 	add	local03, #8
1823c     11 FB 01 FB | 	rdlong	result1, local03
18240     01 FA CD F7 | 	test	result1, #1 wz
18244     10 13 02 56 |  if_ne	mov	arg01, local02
18248     80 00 B0 5D |  if_ne	call	#__system____default_flush
1824c     11 25 02 FB | 	rdlong	local04, local03
18250     02 24 46 F5 | 	or	local04, #2
18254     11 25 62 FC | 	wrlong	local04, local03
18258     08 22 86 F1 | 	sub	local03, #8
1825c     11 27 02 FB | 	rdlong	local05, local03
18260     10 22 06 F1 | 	add	local03, #16
18264     11 15 02 FB | 	rdlong	arg02, local03
18268     10 22 86 F1 | 	sub	local03, #16
1826c     13 FB 01 F6 | 	mov	result1, local05
18270     0A FB 01 F1 | 	add	result1, arg02
18274     FD 1E 42 FC | 	wrbyte	local01, result1
18278     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1827c     01 26 06 F1 | 	add	local05, #1
18280     11 27 62 FC | 	wrlong	local05, local03
18284     06 20 06 F1 | 	add	local02, #6
18288     10 29 EA FA | 	rdword	local06, local02 wz
1828c     06 20 86 F1 | 	sub	local02, #6
18290     0C 22 06 51 |  if_ne	add	local03, #12
18294     11 25 02 5B |  if_ne	rdlong	local04, local03
18298     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1829c     0C 00 90 AD |  if_e	jmp	#LR__2610
182a0     0A 1E 0E F2 | 	cmp	local01, #10 wz
182a4     01 28 0E A2 |  if_e	cmp	local06, #1 wz
182a8     10 00 90 5D |  if_ne	jmp	#LR__2611
182ac                 | LR__2610
182ac     10 13 02 F6 | 	mov	arg01, local02
182b0     18 00 B0 FD | 	call	#__system____default_flush
182b4     00 FA 0D F2 | 	cmp	result1, #0 wz
182b8     01 1E 66 56 |  if_ne	neg	local01, #1
182bc                 | LR__2611
182bc     0F FB 01 F6 | 	mov	result1, local01
182c0     A7 F0 03 F6 | 	mov	ptra, fp
182c4     B2 00 A0 FD | 	call	#popregs_
182c8                 | __system____default_putc_ret
182c8     2D 00 64 FD | 	ret
182cc                 | 
182cc                 | __system____default_flush
182cc     06 4A 05 F6 | 	mov	COUNT_, #6
182d0     A8 00 A0 FD | 	call	#pushregs_
182d4     09 1F 02 F6 | 	mov	local01, arg01
182d8     0F 21 02 FB | 	rdlong	local02, local01
182dc     10 23 02 FB | 	rdlong	local03, local02
182e0     08 20 06 F1 | 	add	local02, #8
182e4     10 FB 01 FB | 	rdlong	result1, local02
182e8     08 20 86 F1 | 	sub	local02, #8
182ec     02 FA CD F7 | 	test	result1, #2 wz
182f0     D0 00 90 AD |  if_e	jmp	#LR__2622
182f4     01 22 56 F2 | 	cmps	local03, #1 wc
182f8     20 01 90 CD |  if_b	jmp	#LR__2624
182fc     08 1E 06 F1 | 	add	local01, #8
18300     0F FB 01 FB | 	rdlong	result1, local01
18304     08 1E 86 F1 | 	sub	local01, #8
18308     40 FA CD F7 | 	test	result1, #64 wz
1830c     68 00 90 AD |  if_e	jmp	#LR__2621
18310     08 1E 06 F1 | 	add	local01, #8
18314     0F 17 02 FB | 	rdlong	arg03, local01
18318     08 1E 86 F1 | 	sub	local01, #8
1831c     80 16 CE F7 | 	test	arg03, #128 wz
18320     54 00 90 AD |  if_e	jmp	#LR__2620
18324     30 1E 06 F1 | 	add	local01, #48
18328     0F 25 02 FB | 	rdlong	local04, local01
1832c     12 27 02 F6 | 	mov	local05, local04
18330     30 1E 86 F1 | 	sub	local01, #48
18334     13 26 46 F7 | 	zerox	local05, #19
18338     14 24 46 F0 | 	shr	local04, #20
1833c     02 24 66 F0 | 	shl	local04, #2
18340     ED 24 02 F1 | 	add	local04, __methods__
18344     12 25 02 FB | 	rdlong	local04, local04
18348     0F 13 02 F6 | 	mov	arg01, local01
1834c     00 14 06 F6 | 	mov	arg02, #0
18350     02 16 06 F6 | 	mov	arg03, #2
18354     F2 28 02 F6 | 	mov	local06, objptr
18358     13 E5 01 F6 | 	mov	objptr, local05
1835c     2D 24 62 FD | 	call	local04
18360     14 E5 01 F6 | 	mov	objptr, local06
18364     08 1E 06 F1 | 	add	local01, #8
18368     0F 29 02 FB | 	rdlong	local06, local01
1836c     80 28 26 F5 | 	andn	local06, #128
18370     0F 29 62 FC | 	wrlong	local06, local01
18374     08 1E 86 F1 | 	sub	local01, #8
18378                 | LR__2620
18378                 | LR__2621
18378     18 1E 06 F1 | 	add	local01, #24
1837c     0F 25 02 FB | 	rdlong	local04, local01
18380     12 27 02 F6 | 	mov	local05, local04
18384     18 1E 86 F1 | 	sub	local01, #24
18388     13 26 46 F7 | 	zerox	local05, #19
1838c     14 24 46 F0 | 	shr	local04, #20
18390     02 24 66 F0 | 	shl	local04, #2
18394     ED 24 02 F1 | 	add	local04, __methods__
18398     12 25 02 FB | 	rdlong	local04, local04
1839c     10 20 06 F1 | 	add	local02, #16
183a0     10 15 02 FB | 	rdlong	arg02, local02
183a4     10 20 86 F1 | 	sub	local02, #16
183a8     0F 13 02 F6 | 	mov	arg01, local01
183ac     11 17 02 F6 | 	mov	arg03, local03
183b0     F2 28 02 F6 | 	mov	local06, objptr
183b4     13 E5 01 F6 | 	mov	objptr, local05
183b8     2D 24 62 FD | 	call	local04
183bc     14 E5 01 F6 | 	mov	objptr, local06
183c0     58 00 90 FD | 	jmp	#LR__2624
183c4                 | LR__2622
183c4     08 20 06 F1 | 	add	local02, #8
183c8     10 29 02 FB | 	rdlong	local06, local02
183cc     08 20 86 F1 | 	sub	local02, #8
183d0     01 28 CE F7 | 	test	local06, #1 wz
183d4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
183d8     40 00 90 AD |  if_e	jmp	#LR__2623
183dc     30 1E 06 F1 | 	add	local01, #48
183e0     0F 25 02 FB | 	rdlong	local04, local01
183e4     12 27 02 F6 | 	mov	local05, local04
183e8     30 1E 86 F1 | 	sub	local01, #48
183ec     13 26 46 F7 | 	zerox	local05, #19
183f0     14 24 46 F0 | 	shr	local04, #20
183f4     02 24 66 F0 | 	shl	local04, #2
183f8     ED 24 02 F1 | 	add	local04, __methods__
183fc     12 25 02 FB | 	rdlong	local04, local04
18400     0F 13 02 F6 | 	mov	arg01, local01
18404     11 15 62 F6 | 	neg	arg02, local03
18408     01 16 06 F6 | 	mov	arg03, #1
1840c     F2 28 02 F6 | 	mov	local06, objptr
18410     13 E5 01 F6 | 	mov	objptr, local05
18414     2D 24 62 FD | 	call	local04
18418     14 E5 01 F6 | 	mov	objptr, local06
1841c                 | LR__2623
1841c                 | LR__2624
1841c     10 01 68 FC | 	wrlong	#0, local02
18420     04 20 06 F1 | 	add	local02, #4
18424     10 01 68 FC | 	wrlong	#0, local02
18428     04 20 06 F1 | 	add	local02, #4
1842c     10 01 68 FC | 	wrlong	#0, local02
18430     00 FA 05 F6 | 	mov	result1, #0
18434     A7 F0 03 F6 | 	mov	ptra, fp
18438     B2 00 A0 FD | 	call	#popregs_
1843c                 | __system____default_flush_ret
1843c     2D 00 64 FD | 	ret
18440                 | 
18440                 | __system____default_buffer_init
18440     02 4A 05 F6 | 	mov	COUNT_, #2
18444     A8 00 A0 FD | 	call	#pushregs_
18448     09 1F 02 F6 | 	mov	local01, arg01
1844c     0F 21 02 FB | 	rdlong	local02, local01
18450     0F 13 02 F6 | 	mov	arg01, local01
18454     34 03 B0 FD | 	call	#__system___isatty
18458     00 FA 0D F2 | 	cmp	result1, #0 wz
1845c     06 1E 06 51 |  if_ne	add	local01, #6
18460     0F 0B 58 5C |  if_ne	wrword	#5, local01
18464     06 1E 06 A1 |  if_e	add	local01, #6
18468     0F 0D 58 AC |  if_e	wrword	#6, local01
1846c     14 20 06 F1 | 	add	local02, #20
18470     10 1F 02 F6 | 	mov	local01, local02
18474     04 20 86 F1 | 	sub	local02, #4
18478     10 1F 62 FC | 	wrlong	local01, local02
1847c     04 20 86 F1 | 	sub	local02, #4
18480     02 00 80 FF 
18484     10 01 68 FC | 	wrlong	##1024, local02
18488     00 FA 05 F6 | 	mov	result1, #0
1848c     A7 F0 03 F6 | 	mov	ptra, fp
18490     B2 00 A0 FD | 	call	#popregs_
18494                 | __system____default_buffer_init_ret
18494     2D 00 64 FD | 	ret
18498                 | 
18498                 | __system__stat
18498     04 4A 05 F6 | 	mov	COUNT_, #4
1849c     A8 00 A0 FD | 	call	#pushregs_
184a0     0A 1F 02 F6 | 	mov	local01, arg02
184a4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
184a8     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
184ac     09 15 02 F6 | 	mov	arg02, arg01
184b0     10 13 02 F6 | 	mov	arg01, local02
184b4     00 16 06 F6 | 	mov	arg03, #0
184b8     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
184bc     70 BC BF FD | 	call	#__system____getvfsforfile
184c0     FD 22 0A F6 | 	mov	local03, result1 wz
184c4     10 00 90 AD |  if_e	jmp	#LR__2630
184c8     34 22 06 F1 | 	add	local03, #52
184cc     11 17 0A FB | 	rdlong	arg03, local03 wz
184d0     34 22 86 F1 | 	sub	local03, #52
184d4     14 00 90 5D |  if_ne	jmp	#LR__2631
184d8                 | LR__2630
184d8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
184dc     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
184e0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
184e4     01 FA 65 F6 | 	neg	result1, #1
184e8     68 00 90 FD | 	jmp	#LR__2632
184ec                 | LR__2631
184ec     0F 13 02 F6 | 	mov	arg01, local01
184f0     00 14 06 F6 | 	mov	arg02, #0
184f4     30 16 06 F6 | 	mov	arg03, #48
184f8     09 25 02 F6 | 	mov	local04, arg01
184fc     98 00 A0 FD | 	call	#\builtin_bytefill_
18500     12 FB 01 F6 | 	mov	result1, local04
18504     10 13 CA FA | 	rdbyte	arg01, local02 wz
18508     08 1E 06 A1 |  if_e	add	local01, #8
1850c     08 00 80 AF 
18510     0F FF 6B AC |  if_e	wrlong	##4607, local01
18514     00 FA 05 A6 |  if_e	mov	result1, #0
18518     38 00 90 AD |  if_e	jmp	#LR__2632
1851c     34 22 06 F1 | 	add	local03, #52
18520     11 23 02 FB | 	rdlong	local03, local03
18524     11 25 02 F6 | 	mov	local04, local03
18528     13 22 46 F7 | 	zerox	local03, #19
1852c     14 24 46 F0 | 	shr	local04, #20
18530     02 24 66 F0 | 	shl	local04, #2
18534     ED 24 02 F1 | 	add	local04, __methods__
18538     12 25 02 FB | 	rdlong	local04, local04
1853c     10 13 02 F6 | 	mov	arg01, local02
18540     0F 15 02 F6 | 	mov	arg02, local01
18544     F2 20 02 F6 | 	mov	local02, objptr
18548     11 E5 01 F6 | 	mov	objptr, local03
1854c     2D 24 62 FD | 	call	local04
18550     10 E5 01 F6 | 	mov	objptr, local02
18554                 | LR__2632
18554     A7 F0 03 F6 | 	mov	ptra, fp
18558     B2 00 A0 FD | 	call	#popregs_
1855c                 | __system__stat_ret
1855c     2D 00 64 FD | 	ret
18560                 | 
18560                 | __system__write
18560     0A 12 16 F2 | 	cmp	arg01, #10 wc
18564     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
18568     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1856c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
18570     01 FA 65 36 |  if_ae	neg	result1, #1
18574     20 00 90 3D |  if_ae	jmp	#LR__2640
18578     34 12 06 FD | 	qmul	arg01, #52
1857c     02 00 00 FF 
18580     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
18584     18 12 62 FD | 	getqx	arg01
18588     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1858c     02 00 00 FF 
18590     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
18594     C8 0F B0 FD | 	call	#__system___vfswrite
18598                 | LR__2640
18598                 | __system__write_ret
18598     2D 00 64 FD | 	ret
1859c                 | 
1859c                 | __system__read
1859c     0A 12 16 F2 | 	cmp	arg01, #10 wc
185a0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
185a4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
185a8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
185ac     01 FA 65 36 |  if_ae	neg	result1, #1
185b0     20 00 90 3D |  if_ae	jmp	#LR__2650
185b4     34 12 06 FD | 	qmul	arg01, #52
185b8     02 00 00 FF 
185bc     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
185c0     18 12 62 FD | 	getqx	arg01
185c4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
185c8     02 00 00 FF 
185cc     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
185d0     54 11 B0 FD | 	call	#__system___vfsread
185d4                 | LR__2650
185d4                 | __system__read_ret
185d4     2D 00 64 FD | 	ret
185d8                 | 
185d8                 | __system__close
185d8     0A 12 16 F2 | 	cmp	arg01, #10 wc
185dc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
185e0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
185e4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
185e8     01 FA 65 36 |  if_ae	neg	result1, #1
185ec     20 00 90 3D |  if_ae	jmp	#LR__2660
185f0     34 12 06 FD | 	qmul	arg01, #52
185f4     02 00 00 FF 
185f8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
185fc     18 12 62 FD | 	getqx	arg01
18600     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18604     02 00 00 FF 
18608     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1860c     10 F9 BF FD | 	call	#__system___closeraw
18610                 | LR__2660
18610                 | __system__close_ret
18610     2D 00 64 FD | 	ret
18614                 | 
18614                 | __system__lseek
18614     06 4A 05 F6 | 	mov	COUNT_, #6
18618     A8 00 A0 FD | 	call	#pushregs_
1861c     0A 12 16 F2 | 	cmp	arg01, #10 wc
18620     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
18624     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
18628     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1862c     01 FA 65 36 |  if_ae	neg	result1, #1
18630     C4 00 90 3D |  if_ae	jmp	#LR__2671
18634     34 12 06 FD | 	qmul	arg01, #52
18638     02 00 00 FF 
1863c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
18640     18 1E 62 FD | 	getqx	local01
18644     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
18648     30 1E 06 F1 | 	add	local01, #48
1864c     0F 13 0A FB | 	rdlong	arg01, local01 wz
18650     30 1E 86 F1 | 	sub	local01, #48
18654     02 00 00 FF 
18658     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1865c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
18660     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
18664     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
18668     01 FA 65 A6 |  if_e	neg	result1, #1
1866c     88 00 90 AD |  if_e	jmp	#LR__2671
18670     08 1E 06 F1 | 	add	local01, #8
18674     0F 21 02 FB | 	rdlong	local02, local01
18678     08 1E 86 F1 | 	sub	local01, #8
1867c     40 20 CE F7 | 	test	local02, #64 wz
18680     08 1E 06 51 |  if_ne	add	local01, #8
18684     0F 21 02 5B |  if_ne	rdlong	local02, local01
18688     80 20 46 55 |  if_ne	or	local02, #128
1868c     0F 21 62 5C |  if_ne	wrlong	local02, local01
18690     08 1E 86 51 |  if_ne	sub	local01, #8
18694     30 1E 06 F1 | 	add	local01, #48
18698     0F 23 02 FB | 	rdlong	local03, local01
1869c     11 25 02 F6 | 	mov	local04, local03
186a0     30 1E 86 F1 | 	sub	local01, #48
186a4     13 24 46 F7 | 	zerox	local04, #19
186a8     14 22 46 F0 | 	shr	local03, #20
186ac     02 22 66 F0 | 	shl	local03, #2
186b0     ED 22 02 F1 | 	add	local03, __methods__
186b4     11 23 02 FB | 	rdlong	local03, local03
186b8     0F 13 02 F6 | 	mov	arg01, local01
186bc     F2 26 02 F6 | 	mov	local05, objptr
186c0     12 E5 01 F6 | 	mov	objptr, local04
186c4     2D 22 62 FD | 	call	local03
186c8     13 E5 01 F6 | 	mov	objptr, local05
186cc     FD 28 02 F6 | 	mov	local06, result1
186d0     00 28 56 F2 | 	cmps	local06, #0 wc
186d4     1C 00 90 3D |  if_ae	jmp	#LR__2670
186d8     14 13 6A F6 | 	neg	arg01, local06 wz
186dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
186e0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
186e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
186e8     01 FA 65 56 |  if_ne	neg	result1, #1
186ec     00 FA 05 A6 |  if_e	mov	result1, #0
186f0     04 00 90 FD | 	jmp	#LR__2671
186f4                 | LR__2670
186f4     14 FB 01 F6 | 	mov	result1, local06
186f8                 | LR__2671
186f8     A7 F0 03 F6 | 	mov	ptra, fp
186fc     B2 00 A0 FD | 	call	#popregs_
18700                 | __system__lseek_ret
18700     2D 00 64 FD | 	ret
18704                 | 
18704                 | __system___ioctl
18704     03 4A 05 F6 | 	mov	COUNT_, #3
18708     A8 00 A0 FD | 	call	#pushregs_
1870c     00 12 4E F2 | 	cmps	arg01, #0 wz
18710     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
18714     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
18718     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1871c     01 FA 65 A6 |  if_e	neg	result1, #1
18720     5C 00 90 AD |  if_e	jmp	#LR__2681
18724     28 12 06 F1 | 	add	arg01, #40
18728     09 1F 02 FB | 	rdlong	local01, arg01
1872c     0F 21 02 F6 | 	mov	local02, local01
18730     28 12 86 F1 | 	sub	arg01, #40
18734     13 20 46 F7 | 	zerox	local02, #19
18738     14 1E 46 F0 | 	shr	local01, #20
1873c     02 1E 66 F0 | 	shl	local01, #2
18740     ED 1E 02 F1 | 	add	local01, __methods__
18744     0F 1F 02 FB | 	rdlong	local01, local01
18748     F2 22 02 F6 | 	mov	local03, objptr
1874c     10 E5 01 F6 | 	mov	objptr, local02
18750     2D 1E 62 FD | 	call	local01
18754     11 E5 01 F6 | 	mov	objptr, local03
18758     FD 12 0A F6 | 	mov	arg01, result1 wz
1875c     1C 00 90 AD |  if_e	jmp	#LR__2680
18760     00 12 4E F2 | 	cmps	arg01, #0 wz
18764     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18768     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1876c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18770     01 FA 65 56 |  if_ne	neg	result1, #1
18774     00 FA 05 A6 |  if_e	mov	result1, #0
18778     04 00 90 FD | 	jmp	#LR__2681
1877c                 | LR__2680
1877c     00 FA 05 F6 | 	mov	result1, #0
18780                 | LR__2681
18780     A7 F0 03 F6 | 	mov	ptra, fp
18784     B2 00 A0 FD | 	call	#popregs_
18788                 | __system___ioctl_ret
18788     2D 00 64 FD | 	ret
1878c                 | 
1878c                 | __system___isatty
1878c     00 4A 05 F6 | 	mov	COUNT_, #0
18790     A8 00 A0 FD | 	call	#pushregs_
18794     0C F0 07 F1 | 	add	ptra, #12
18798     04 4E 05 F1 | 	add	fp, #4
1879c     A7 12 62 FC | 	wrlong	arg01, fp
187a0     04 4E 05 F1 | 	add	fp, #4
187a4     A7 16 02 F6 | 	mov	arg03, fp
187a8     08 4E 85 F1 | 	sub	fp, #8
187ac     00 15 06 F6 | 	mov	arg02, #256
187b0     50 FF BF FD | 	call	#__system___ioctl
187b4     00 FA 0D F2 | 	cmp	result1, #0 wz
187b8     01 FA 05 A6 |  if_e	mov	result1, #1
187bc     00 FA 05 56 |  if_ne	mov	result1, #0
187c0     A7 F0 03 F6 | 	mov	ptra, fp
187c4     B2 00 A0 FD | 	call	#popregs_
187c8                 | __system___isatty_ret
187c8     2D 00 64 FD | 	ret
187cc                 | 
187cc                 | __system____getftab
187cc     0A 12 16 F2 | 	cmp	arg01, #10 wc
187d0     34 12 06 CD |  if_b	qmul	arg01, #52
187d4     00 FA 05 36 |  if_ae	mov	result1, #0
187d8     02 00 00 CF 
187dc     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
187e0     18 FA 61 CD |  if_b	getqx	result1
187e4     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
187e8     02 00 00 CF 
187ec     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
187f0                 | __system____getftab_ret
187f0     2D 00 64 FD | 	ret
187f4                 | 
187f4                 | __system__strncpy
187f4     09 01 02 F6 | 	mov	_var01, arg01
187f8                 | LR__2690
187f8     01 16 86 F1 | 	sub	arg03, #1
187fc     00 16 56 F2 | 	cmps	arg03, #0 wc
18800     18 00 90 CD |  if_b	jmp	#LR__2691
18804     0A FB C1 FA | 	rdbyte	result1, arg02
18808     00 FB 41 FC | 	wrbyte	result1, _var01
1880c     01 14 06 F1 | 	add	arg02, #1
18810     00 FB C9 FA | 	rdbyte	result1, _var01 wz
18814     01 00 06 F1 | 	add	_var01, #1
18818     DC FF 9F 5D |  if_ne	jmp	#LR__2690
1881c                 | LR__2691
1881c     97 0C 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
18820                 | LR__2692
18820     01 16 86 F1 | 	sub	arg03, #1
18824     00 16 56 F2 | 	cmps	arg03, #0 wc
18828     00 03 02 36 |  if_ae	mov	_var02, _var01
1882c     01 00 06 31 |  if_ae	add	_var01, #1
18830     01 01 48 3C |  if_ae	wrbyte	#0, _var02
18834     E8 FF 9F 3D |  if_ae	jmp	#LR__2692
18838                 | LR__2693
18838     09 FB 01 F6 | 	mov	result1, arg01
1883c                 | __system__strncpy_ret
1883c     2D 00 64 FD | 	ret
18840                 | 
18840                 | __system__strncat
18840     00 14 4E F2 | 	cmps	arg02, #0 wz
18844     50 00 90 AD |  if_e	jmp	#LR__2704
18848     01 16 16 F2 | 	cmp	arg03, #1 wc
1884c     48 00 90 CD |  if_b	jmp	#LR__2704
18850     09 01 02 F6 | 	mov	_var01, arg01
18854     97 1E 48 FB | 	callpa	#(@LR__2702-@LR__2700)>>2,fcache_load_ptr_
18858                 | LR__2700
18858     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1885c     01 00 06 51 |  if_ne	add	_var01, #1
18860     F4 FF 9F 5D |  if_ne	jmp	#LR__2700
18864     0B 03 02 F6 | 	mov	_var02, arg03
18868                 | LR__2701
18868     0A 05 C2 FA | 	rdbyte	_var03, arg02
1886c     02 07 02 F6 | 	mov	_var04, _var03
18870     07 06 4E F7 | 	zerox	_var04, #7 wz
18874     01 14 06 F1 | 	add	arg02, #1
18878     18 00 90 AD |  if_e	jmp	#LR__2703
1887c     01 02 86 F1 | 	sub	_var02, #1
18880     00 02 56 F2 | 	cmps	_var02, #0 wc
18884     00 07 02 36 |  if_ae	mov	_var04, _var01
18888     01 00 06 31 |  if_ae	add	_var01, #1
1888c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
18890     D4 FF 9F 3D |  if_ae	jmp	#LR__2701
18894                 | LR__2702
18894                 | LR__2703
18894     00 01 48 FC | 	wrbyte	#0, _var01
18898                 | LR__2704
18898     09 FB 01 F6 | 	mov	result1, arg01
1889c                 | __system__strncat_ret
1889c     2D 00 64 FD | 	ret
188a0                 | 
188a0                 | __system__strncmp
188a0     09 01 0A F6 | 	mov	_var01, arg01 wz
188a4     14 00 90 5D |  if_ne	jmp	#LR__2710
188a8     00 14 0E F2 | 	cmp	arg02, #0 wz
188ac     01 02 66 56 |  if_ne	neg	_var02, #1
188b0     00 02 06 A6 |  if_e	mov	_var02, #0
188b4     01 FB 01 F6 | 	mov	result1, _var02
188b8     74 00 90 FD | 	jmp	#__system__strncmp_ret
188bc                 | LR__2710
188bc     00 14 0E F2 | 	cmp	arg02, #0 wz
188c0     01 FA 05 A6 |  if_e	mov	result1, #1
188c4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
188c8     0B 05 02 F6 | 	mov	_var03, arg03
188cc     97 16 48 FB | 	callpa	#(@LR__2712-@LR__2711)>>2,fcache_load_ptr_
188d0                 | LR__2711
188d0     00 07 C2 FA | 	rdbyte	_var04, _var01
188d4     0A 09 02 F6 | 	mov	_var05, arg02
188d8     04 0B C2 FA | 	rdbyte	_var06, _var05
188dc     01 04 86 F1 | 	sub	_var03, #1
188e0     00 04 56 F2 | 	cmps	_var03, #0 wc
188e4     01 00 06 F1 | 	add	_var01, #1
188e8     01 14 06 F1 | 	add	arg02, #1
188ec     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
188f0     08 00 90 2D |  if_nc_and_z	jmp	#LR__2713
188f4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
188f8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2711
188fc                 | LR__2712
188fc                 | LR__2713
188fc     00 04 56 F2 | 	cmps	_var03, #0 wc
18900     00 FA 05 C6 |  if_b	mov	result1, #0
18904     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
18908     05 07 0A F2 | 	cmp	_var04, _var06 wz
1890c     00 FA 05 A6 |  if_e	mov	result1, #0
18910     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
18914     00 06 0E F2 | 	cmp	_var04, #0 wz
18918     01 FA 65 A6 |  if_e	neg	result1, #1
1891c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
18920     00 0A 0E F2 | 	cmp	_var06, #0 wz
18924     01 FA 05 A6 |  if_e	mov	result1, #1
18928     03 FB 01 56 |  if_ne	mov	result1, _var04
1892c     05 FB 81 51 |  if_ne	sub	result1, _var06
18930                 | __system__strncmp_ret
18930     2D 00 64 FD | 	ret
18934                 | 
18934                 | __system____root_opendir
18934     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18938     04 12 06 F1 | 	add	arg01, #4
1893c     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
18940     00 FA 05 F6 | 	mov	result1, #0
18944     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18948                 | __system____root_opendir_ret
18948     2D 00 64 FD | 	ret
1894c                 | 
1894c                 | __system____root_readdir
1894c     03 4A 05 F6 | 	mov	COUNT_, #3
18950     A8 00 A0 FD | 	call	#pushregs_
18954     09 1F 02 F6 | 	mov	local01, arg01
18958     0A 21 02 F6 | 	mov	local02, arg02
1895c     04 1E 06 F1 | 	add	local01, #4
18960     0F 23 02 FB | 	rdlong	local03, local01
18964     04 1E 86 F1 | 	sub	local01, #4
18968                 | LR__2720
18968     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1896c     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
18970     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
18974     01 FA 65 A6 |  if_e	neg	result1, #1
18978     48 00 90 AD |  if_e	jmp	#LR__2721
1897c     11 17 0A FB | 	rdlong	arg03, local03 wz
18980     04 22 06 A1 |  if_e	add	local03, #4
18984     E0 FF 9F AD |  if_e	jmp	#LR__2720
18988     11 15 02 FB | 	rdlong	arg02, local03
1898c     01 14 06 F1 | 	add	arg02, #1
18990     10 13 02 F6 | 	mov	arg01, local02
18994     40 16 06 F6 | 	mov	arg03, #64
18998     58 FE BF FD | 	call	#__system__strncpy
1899c     50 20 06 F1 | 	add	local02, #80
189a0     10 03 48 FC | 	wrbyte	#1, local02
189a4     08 20 86 F1 | 	sub	local02, #8
189a8     10 01 68 FC | 	wrlong	#0, local02
189ac     04 20 06 F1 | 	add	local02, #4
189b0     10 01 68 FC | 	wrlong	#0, local02
189b4     04 22 06 F1 | 	add	local03, #4
189b8     04 1E 06 F1 | 	add	local01, #4
189bc     0F 23 62 FC | 	wrlong	local03, local01
189c0     00 FA 05 F6 | 	mov	result1, #0
189c4                 | LR__2721
189c4     A7 F0 03 F6 | 	mov	ptra, fp
189c8     B2 00 A0 FD | 	call	#popregs_
189cc                 | __system____root_readdir_ret
189cc     2D 00 64 FD | 	ret
189d0                 | 
189d0                 | __system____root_closedir
189d0     00 FA 05 F6 | 	mov	result1, #0
189d4                 | __system____root_closedir_ret
189d4     2D 00 64 FD | 	ret
189d8                 | 
189d8                 | __system____root_stat
189d8     0A 01 02 F6 | 	mov	_var01, arg02
189dc     00 13 02 F6 | 	mov	arg01, _var01
189e0     00 14 06 F6 | 	mov	arg02, #0
189e4     30 16 06 F6 | 	mov	arg03, #48
189e8     98 00 A0 FD | 	call	#\builtin_bytefill_
189ec     08 00 06 F1 | 	add	_var01, #8
189f0     08 00 80 FF 
189f4     00 FF 6B FC | 	wrlong	##4607, _var01
189f8     00 FA 05 F6 | 	mov	result1, #0
189fc                 | __system____root_stat_ret
189fc     2D 00 64 FD | 	ret
18a00                 | 
18a00                 | __system___normalizeName
18a00     00 00 06 F6 | 	mov	_var01, #0
18a04     09 03 02 F6 | 	mov	_var02, arg01
18a08     01 05 02 F6 | 	mov	_var03, _var02
18a0c                 | LR__2730
18a0c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
18a10     5C 01 90 AD |  if_e	jmp	#LR__2749
18a14     00 00 0E F2 | 	cmp	_var01, #0 wz
18a18     02 07 02 56 |  if_ne	mov	_var04, _var03
18a1c     01 04 06 51 |  if_ne	add	_var03, #1
18a20     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
18a24     00 00 06 56 |  if_ne	mov	_var01, #0
18a28     01 07 C2 FA | 	rdbyte	_var04, _var02
18a2c     2E 06 0E F2 | 	cmp	_var04, #46 wz
18a30     D8 00 90 5D |  if_ne	jmp	#LR__2742
18a34     01 02 06 F1 | 	add	_var02, #1
18a38     01 07 C2 FA | 	rdbyte	_var04, _var02
18a3c     01 02 86 F1 | 	sub	_var02, #1
18a40     2F 06 0E F2 | 	cmp	_var04, #47 wz
18a44     18 00 90 AD |  if_e	jmp	#LR__2731
18a48     01 02 06 F1 | 	add	_var02, #1
18a4c     01 09 C2 FA | 	rdbyte	_var05, _var02
18a50     01 02 86 F1 | 	sub	_var02, #1
18a54     04 0B 02 F6 | 	mov	_var06, _var05
18a58     07 0A 4E F7 | 	zerox	_var06, #7 wz
18a5c     10 00 90 5D |  if_ne	jmp	#LR__2732
18a60                 | LR__2731
18a60     01 0D 02 F6 | 	mov	_var07, _var02
18a64     01 0C 06 F1 | 	add	_var07, #1
18a68     06 03 02 F6 | 	mov	_var02, _var07
18a6c     E0 00 90 FD | 	jmp	#LR__2746
18a70                 | LR__2732
18a70     01 02 06 F1 | 	add	_var02, #1
18a74     01 0D C2 FA | 	rdbyte	_var07, _var02
18a78     01 02 86 F1 | 	sub	_var02, #1
18a7c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
18a80     2E 06 0E F2 | 	cmp	_var04, #46 wz
18a84     84 00 90 5D |  if_ne	jmp	#LR__2741
18a88     02 02 06 F1 | 	add	_var02, #2
18a8c     01 0D C2 FA | 	rdbyte	_var07, _var02
18a90     02 02 86 F1 | 	sub	_var02, #2
18a94     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
18a98     2F 06 0E F2 | 	cmp	_var04, #47 wz
18a9c     18 00 90 AD |  if_e	jmp	#LR__2733
18aa0     02 02 06 F1 | 	add	_var02, #2
18aa4     01 09 C2 FA | 	rdbyte	_var05, _var02
18aa8     02 02 86 F1 | 	sub	_var02, #2
18aac     04 0B 02 F6 | 	mov	_var06, _var05
18ab0     07 0A 4E F7 | 	zerox	_var06, #7 wz
18ab4     54 00 90 5D |  if_ne	jmp	#LR__2740
18ab8                 | LR__2733
18ab8     02 02 06 F1 | 	add	_var02, #2
18abc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
18ac0     40 00 90 ED |  if_be	jmp	#LR__2739
18ac4     02 0F 02 F6 | 	mov	_var08, _var03
18ac8     01 0E 86 F1 | 	sub	_var08, #1
18acc                 | LR__2734
18acc     07 07 C2 FA | 	rdbyte	_var04, _var08
18ad0     2F 06 0E F2 | 	cmp	_var04, #47 wz
18ad4     0C 00 90 5D |  if_ne	jmp	#LR__2735
18ad8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
18adc     01 0E 86 11 |  if_a	sub	_var08, #1
18ae0     E8 FF 9F 1D |  if_a	jmp	#LR__2734
18ae4                 | LR__2735
18ae4     97 0C 48 FB | 	callpa	#(@LR__2737-@LR__2736)>>2,fcache_load_ptr_
18ae8                 | LR__2736
18ae8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
18aec     10 00 90 ED |  if_be	jmp	#LR__2738
18af0     07 07 C2 FA | 	rdbyte	_var04, _var08
18af4     2F 06 0E F2 | 	cmp	_var04, #47 wz
18af8     01 0E 86 51 |  if_ne	sub	_var08, #1
18afc     E8 FF 9F 5D |  if_ne	jmp	#LR__2736
18b00                 | LR__2737
18b00                 | LR__2738
18b00     07 05 02 F6 | 	mov	_var03, _var08
18b04                 | LR__2739
18b04     01 00 06 F6 | 	mov	_var01, #1
18b08     44 00 90 FD | 	jmp	#LR__2746
18b0c                 | LR__2740
18b0c                 | LR__2741
18b0c                 | LR__2742
18b0c     97 18 48 FB | 	callpa	#(@LR__2744-@LR__2743)>>2,fcache_load_ptr_
18b10                 | LR__2743
18b10     01 07 CA FA | 	rdbyte	_var04, _var02 wz
18b14     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
18b18     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
18b1c     20 00 90 AD |  if_e	jmp	#LR__2745
18b20     01 0B 02 F6 | 	mov	_var06, _var02
18b24     01 09 02 F6 | 	mov	_var05, _var02
18b28     01 08 06 F1 | 	add	_var05, #1
18b2c     05 11 C2 FA | 	rdbyte	_var09, _var06
18b30     04 03 02 F6 | 	mov	_var02, _var05
18b34     02 11 42 FC | 	wrbyte	_var09, _var03
18b38     01 04 06 F1 | 	add	_var03, #1
18b3c     D0 FF 9F FD | 	jmp	#LR__2743
18b40                 | LR__2744
18b40                 | LR__2745
18b40     01 07 C2 FA | 	rdbyte	_var04, _var02
18b44     2F 06 0E F2 | 	cmp	_var04, #47 wz
18b48     C0 FE 9F 5D |  if_ne	jmp	#LR__2730
18b4c     01 00 06 F6 | 	mov	_var01, #1
18b50                 | LR__2746
18b50     97 0C 48 FB | 	callpa	#(@LR__2748-@LR__2747)>>2,fcache_load_ptr_
18b54                 | LR__2747
18b54     01 07 C2 FA | 	rdbyte	_var04, _var02
18b58     2F 06 0E F2 | 	cmp	_var04, #47 wz
18b5c     01 0D 02 A6 |  if_e	mov	_var07, _var02
18b60     01 0C 06 A1 |  if_e	add	_var07, #1
18b64     06 03 02 A6 |  if_e	mov	_var02, _var07
18b68     E8 FF 9F AD |  if_e	jmp	#LR__2747
18b6c                 | LR__2748
18b6c     9C FE 9F FD | 	jmp	#LR__2730
18b70                 | LR__2749
18b70     02 01 48 FC | 	wrbyte	#0, _var03
18b74                 | __system___normalizeName_ret
18b74     2D 00 64 FD | 	ret
18b78                 | 
18b78                 | __system___strrev
18b78     09 01 CA FA | 	rdbyte	_var01, arg01 wz
18b7c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
18b80     09 03 02 F6 | 	mov	_var02, arg01
18b84     97 1A 48 FB | 	callpa	#(@LR__2752-@LR__2750)>>2,fcache_load_ptr_
18b88                 | LR__2750
18b88     01 01 CA FA | 	rdbyte	_var01, _var02 wz
18b8c     01 02 06 51 |  if_ne	add	_var02, #1
18b90     F4 FF 9F 5D |  if_ne	jmp	#LR__2750
18b94     01 02 86 F1 | 	sub	_var02, #1
18b98                 | LR__2751
18b98     09 03 5A F2 | 	cmps	_var02, arg01 wcz
18b9c     1C 00 90 ED |  if_be	jmp	#LR__2753
18ba0     09 01 C2 FA | 	rdbyte	_var01, arg01
18ba4     01 05 C2 FA | 	rdbyte	_var03, _var02
18ba8     09 05 42 FC | 	wrbyte	_var03, arg01
18bac     01 01 42 FC | 	wrbyte	_var01, _var02
18bb0     01 12 06 F1 | 	add	arg01, #1
18bb4     01 02 86 F1 | 	sub	_var02, #1
18bb8     DC FF 9F FD | 	jmp	#LR__2751
18bbc                 | LR__2752
18bbc                 | LR__2753
18bbc                 | __system___strrev_ret
18bbc     2D 00 64 FD | 	ret
18bc0                 | 
18bc0                 | __system___fmtpad
18bc0     06 4A 05 F6 | 	mov	COUNT_, #6
18bc4     A8 00 A0 FD | 	call	#pushregs_
18bc8     09 1F 02 F6 | 	mov	local01, arg01
18bcc     0A 21 02 F6 | 	mov	local02, arg02
18bd0     0B 23 02 F6 | 	mov	local03, arg03
18bd4     10 13 EA F8 | 	getbyte	arg01, local02, #1
18bd8     16 20 46 F0 | 	shr	local02, #22
18bdc     03 20 0E F5 | 	and	local02, #3 wz
18be0     00 24 06 F6 | 	mov	local04, #0
18be4     01 20 06 A6 |  if_e	mov	local02, #1
18be8     0C 21 CA F7 | 	test	local02, arg04 wz
18bec     00 FA 05 A6 |  if_e	mov	result1, #0
18bf0     88 00 90 AD |  if_e	jmp	#LR__2763
18bf4     09 23 C2 F2 | 	subr	local03, arg01
18bf8     01 22 56 F2 | 	cmps	local03, #1 wc
18bfc     00 FA 05 C6 |  if_b	mov	result1, #0
18c00     78 00 90 CD |  if_b	jmp	#LR__2763
18c04     03 20 0E F2 | 	cmp	local02, #3 wz
18c08     18 00 90 5D |  if_ne	jmp	#LR__2760
18c0c     01 18 0E F2 | 	cmp	arg04, #1 wz
18c10     6E 20 62 FD | 	wrz	local02
18c14     10 23 02 F1 | 	add	local03, local02
18c18     11 23 52 F6 | 	abs	local03, local03 wc
18c1c     01 22 46 F0 | 	shr	local03, #1
18c20     11 23 82 F6 | 	negc	local03, local03
18c24                 | LR__2760
18c24     01 22 56 F2 | 	cmps	local03, #1 wc
18c28     4C 00 90 CD |  if_b	jmp	#LR__2762
18c2c     11 27 02 F6 | 	mov	local05, local03
18c30                 | LR__2761
18c30     0F 21 02 F6 | 	mov	local02, local01
18c34     0F 29 02 F6 | 	mov	local06, local01
18c38     13 20 46 F7 | 	zerox	local02, #19
18c3c     14 28 46 F0 | 	shr	local06, #20
18c40     02 28 66 F0 | 	shl	local06, #2
18c44     ED 28 02 F1 | 	add	local06, __methods__
18c48     14 29 02 FB | 	rdlong	local06, local06
18c4c     20 12 06 F6 | 	mov	arg01, #32
18c50     F2 22 02 F6 | 	mov	local03, objptr
18c54     10 E5 01 F6 | 	mov	objptr, local02
18c58     2D 28 62 FD | 	call	local06
18c5c     11 E5 01 F6 | 	mov	objptr, local03
18c60     FD 28 02 F6 | 	mov	local06, result1
18c64     00 28 56 F2 | 	cmps	local06, #0 wc
18c68     14 FB 01 C6 |  if_b	mov	result1, local06
18c6c     0C 00 90 CD |  if_b	jmp	#LR__2763
18c70     14 25 02 F1 | 	add	local04, local06
18c74     EE 27 6E FB | 	djnz	local05, #LR__2761
18c78                 | LR__2762
18c78     12 FB 01 F6 | 	mov	result1, local04
18c7c                 | LR__2763
18c7c     A7 F0 03 F6 | 	mov	ptra, fp
18c80     B2 00 A0 FD | 	call	#popregs_
18c84                 | __system___fmtpad_ret
18c84     2D 00 64 FD | 	ret
18c88                 | 
18c88                 | __system___uitoa
18c88     04 4A 05 F6 | 	mov	COUNT_, #4
18c8c     A8 00 A0 FD | 	call	#pushregs_
18c90     09 1F 02 F6 | 	mov	local01, arg01
18c94     00 1A 4E F2 | 	cmps	arg05, #0 wz
18c98     0F 1B 02 F6 | 	mov	arg05, local01
18c9c     00 20 06 F6 | 	mov	local02, #0
18ca0     37 22 06 56 |  if_ne	mov	local03, #55
18ca4     57 22 06 A6 |  if_e	mov	local03, #87
18ca8                 | LR__2770
18ca8     0B 15 12 FD | 	qdiv	arg02, arg03
18cac     19 24 62 FD | 	getqy	local04
18cb0     0B 15 12 FD | 	qdiv	arg02, arg03
18cb4     0A 24 16 F2 | 	cmp	local04, #10 wc
18cb8     30 24 06 C1 |  if_b	add	local04, #48
18cbc     11 25 02 31 |  if_ae	add	local04, local03
18cc0     0D 25 42 FC | 	wrbyte	local04, arg05
18cc4     01 1A 06 F1 | 	add	arg05, #1
18cc8     01 20 06 F1 | 	add	local02, #1
18ccc     18 14 62 FD | 	getqx	arg02
18cd0     00 14 0E F2 | 	cmp	arg02, #0 wz
18cd4     D0 FF 9F 5D |  if_ne	jmp	#LR__2770
18cd8     0C 21 12 F2 | 	cmp	local02, arg04 wc
18cdc     C8 FF 9F CD |  if_b	jmp	#LR__2770
18ce0     0D 01 48 FC | 	wrbyte	#0, arg05
18ce4     0F 13 02 F6 | 	mov	arg01, local01
18ce8     8C FE BF FD | 	call	#__system___strrev
18cec     10 FB 01 F6 | 	mov	result1, local02
18cf0     A7 F0 03 F6 | 	mov	ptra, fp
18cf4     B2 00 A0 FD | 	call	#popregs_
18cf8                 | __system___uitoa_ret
18cf8     2D 00 64 FD | 	ret
18cfc                 | 
18cfc                 | __system__disassemble_0264
18cfc     10 4A 05 F6 | 	mov	COUNT_, #16
18d00     A8 00 A0 FD | 	call	#pushregs_
18d04     09 1F 02 F6 | 	mov	local01, arg01
18d08     0A 21 02 F6 | 	mov	local02, arg02
18d0c     0B 23 02 F6 | 	mov	local03, arg03
18d10     0C 25 02 F6 | 	mov	local04, arg04
18d14     0D 27 02 F6 | 	mov	local05, arg05
18d18     13 13 52 F6 | 	abs	arg01, local05 wc
18d1c     1F 28 C6 C9 |  if_b	decod	local06, #31
18d20     00 28 06 36 |  if_ae	mov	local06, #0
18d24     78 D3 BF FD | 	call	#__system___float_fromuns
18d28     14 FB 61 F5 | 	xor	result1, local06
18d2c     FD 2A 02 F6 | 	mov	local07, result1
18d30     00 2C 06 F6 | 	mov	local08, #0
18d34     0F 13 02 F6 | 	mov	arg01, local01
18d38     00 14 06 F6 | 	mov	arg02, #0
18d3c     01 16 06 F6 | 	mov	arg03, #1
18d40     BC DA BF FD | 	call	#__system___float_cmp
18d44     00 FA 0D F2 | 	cmp	result1, #0 wz
18d48     00 2E 06 A6 |  if_e	mov	local09, #0
18d4c     10 01 68 AC |  if_e	wrlong	#0, local02
18d50     11 2F 62 AC |  if_e	wrlong	local09, local03
18d54     8C 01 90 AD |  if_e	jmp	#LR__2792
18d58     0F 13 02 F6 | 	mov	arg01, local01
18d5c     6C DF BF FD | 	call	#__system____builtin_ilogb
18d60     FD 30 02 F6 | 	mov	local10, result1
18d64     0A 26 0E F2 | 	cmp	local05, #10 wz
18d68     24 00 90 5D |  if_ne	jmp	#LR__2780
18d6c     18 2F 02 F6 | 	mov	local09, local10
18d70     01 2E 66 F0 | 	shl	local09, #1
18d74     18 2F 02 F1 | 	add	local09, local10
18d78     17 31 52 F6 | 	abs	local10, local09 wc
18d7c     0A 30 16 FD | 	qdiv	local10, #10
18d80     09 32 06 F6 | 	mov	local11, #9
18d84     18 30 62 FD | 	getqx	local10
18d88     18 31 82 F6 | 	negc	local10, local10
18d8c     04 00 90 FD | 	jmp	#LR__2781
18d90                 | LR__2780
18d90     18 32 06 F6 | 	mov	local11, #24
18d94                 | LR__2781
18d94                 | LR__2782
18d94     08 2C 56 F2 | 	cmps	local08, #8 wc
18d98     01 2C 06 F1 | 	add	local08, #1
18d9c     60 00 90 3D |  if_ae	jmp	#LR__2783
18da0     00 C0 1F FF 
18da4     00 12 06 F6 | 	mov	arg01, ##1065353216
18da8     15 15 02 F6 | 	mov	arg02, local07
18dac     18 17 02 F6 | 	mov	arg03, local10
18db0     4C E3 BF FD | 	call	#__system___float_pow_n
18db4     FD 14 02 F6 | 	mov	arg02, result1
18db8     0F 13 02 F6 | 	mov	arg01, local01
18dbc     10 D8 BF FD | 	call	#__system___float_div
18dc0     FD 34 02 F6 | 	mov	local12, result1
18dc4     1A 13 02 F6 | 	mov	arg01, local12
18dc8     00 C0 1F FF 
18dcc     00 14 06 F6 | 	mov	arg02, ##1065353216
18dd0     01 16 06 F6 | 	mov	arg03, #1
18dd4     28 DA BF FD | 	call	#__system___float_cmp
18dd8     00 FA 55 F2 | 	cmps	result1, #0 wc
18ddc     01 30 86 C1 |  if_b	sub	local10, #1
18de0     B0 FF 9F CD |  if_b	jmp	#LR__2782
18de4     15 15 02 F6 | 	mov	arg02, local07
18de8     1A 13 02 F6 | 	mov	arg01, local12
18dec     01 16 66 F6 | 	neg	arg03, #1
18df0     0C DA BF FD | 	call	#__system___float_cmp
18df4     00 FA 55 F2 | 	cmps	result1, #0 wc
18df8     01 30 06 31 |  if_ae	add	local10, #1
18dfc     94 FF 9F 3D |  if_ae	jmp	#LR__2782
18e00                 | LR__2783
18e00     1A 13 02 F6 | 	mov	arg01, local12
18e04     C4 DE BF FD | 	call	#__system____builtin_ilogb
18e08     FD 36 02 F6 | 	mov	local13, result1
18e0c     1A 39 02 F6 | 	mov	local14, local12
18e10     17 39 06 F4 | 	bitl	local14, #279
18e14     17 38 26 F4 | 	bith	local14, #23
18e18     1B 39 62 F0 | 	shl	local14, local13
18e1c     02 26 0E F2 | 	cmp	local05, #2 wz
18e20     02 24 66 A0 |  if_e	shl	local04, #2
18e24     00 3A 06 F6 | 	mov	local15, #0
18e28     00 24 56 F2 | 	cmps	local04, #0 wc
18e2c     10 00 90 3D |  if_ae	jmp	#LR__2784
18e30     18 25 C2 F2 | 	subr	local04, local10
18e34     00 24 56 F2 | 	cmps	local04, #0 wc
18e38     A0 00 90 CD |  if_b	jmp	#LR__2791
18e3c     04 00 90 FD | 	jmp	#LR__2785
18e40                 | LR__2784
18e40     01 24 06 F1 | 	add	local04, #1
18e44                 | LR__2785
18e44     19 25 7A F3 | 	fles	local04, local11 wcz
18e48     01 3C 06 F6 | 	mov	local16, #1
18e4c     97 22 48 FB | 	callpa	#(@LR__2787-@LR__2786)>>2,fcache_load_ptr_
18e50                 | LR__2786
18e50     00 40 00 FF 
18e54     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
18e58     38 00 90 3D |  if_ae	jmp	#LR__2788
18e5c     01 24 56 F2 | 	cmps	local04, #1 wc
18e60     01 24 86 F1 | 	sub	local04, #1
18e64     2C 00 90 CD |  if_b	jmp	#LR__2788
18e68     13 3B 02 FD | 	qmul	local15, local05
18e6c     1C 37 02 F6 | 	mov	local13, local14
18e70     17 36 46 F0 | 	shr	local13, #23
18e74     17 39 06 F4 | 	bitl	local14, #279
18e78     18 3A 62 FD | 	getqx	local15
18e7c     13 3D 02 FD | 	qmul	local16, local05
18e80     18 3C 62 FD | 	getqx	local16
18e84     13 39 02 FD | 	qmul	local14, local05
18e88     1B 3B 02 F1 | 	add	local15, local13
18e8c     18 38 62 FD | 	getqx	local14
18e90     BC FF 9F FD | 	jmp	#LR__2786
18e94                 | LR__2787
18e94                 | LR__2788
18e94     13 2F 02 F6 | 	mov	local09, local05
18e98     17 2E 66 F0 | 	shl	local09, #23
18e9c     17 37 52 F6 | 	abs	local13, local09 wc
18ea0     01 36 46 F0 | 	shr	local13, #1
18ea4     1B 37 82 F6 | 	negc	local13, local13
18ea8     1B 39 1A F2 | 	cmp	local14, local13 wcz
18eac     20 00 90 1D |  if_a	jmp	#LR__2789
18eb0     17 26 66 F0 | 	shl	local05, #23
18eb4     13 37 52 F6 | 	abs	local13, local05 wc
18eb8     01 36 46 F0 | 	shr	local13, #1
18ebc     1B 37 82 F6 | 	negc	local13, local13
18ec0     1B 39 0A F2 | 	cmp	local14, local13 wz
18ec4     14 00 90 5D |  if_ne	jmp	#LR__2790
18ec8     01 3A CE F7 | 	test	local15, #1 wz
18ecc     0C 00 90 AD |  if_e	jmp	#LR__2790
18ed0                 | LR__2789
18ed0     01 3A 06 F1 | 	add	local15, #1
18ed4     1E 3B 0A F2 | 	cmp	local15, local16 wz
18ed8     01 30 06 A1 |  if_e	add	local10, #1
18edc                 | LR__2790
18edc                 | LR__2791
18edc     10 3B 62 FC | 	wrlong	local15, local02
18ee0     11 31 62 FC | 	wrlong	local10, local03
18ee4                 | LR__2792
18ee4     A7 F0 03 F6 | 	mov	ptra, fp
18ee8     B2 00 A0 FD | 	call	#popregs_
18eec                 | __system__disassemble_0264_ret
18eec     2D 00 64 FD | 	ret
18ef0                 | 
18ef0                 | __system__emitsign_0266
18ef0     00 FA 05 F6 | 	mov	result1, #0
18ef4     00 14 0E F2 | 	cmp	arg02, #0 wz
18ef8     09 01 02 56 |  if_ne	mov	_var01, arg01
18efc     01 12 06 51 |  if_ne	add	arg01, #1
18f00     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
18f04     01 FA 05 56 |  if_ne	mov	result1, #1
18f08     00 16 0E F2 | 	cmp	arg03, #0 wz
18f0c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
18f10     01 12 06 51 |  if_ne	add	arg01, #1
18f14     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
18f18     02 FA 05 51 |  if_ne	add	result1, #2
18f1c                 | __system__emitsign_0266_ret
18f1c     2D 00 64 FD | 	ret
18f20                 | 
18f20                 | __system___gettxfunc
18f20     01 4A 05 F6 | 	mov	COUNT_, #1
18f24     A8 00 A0 FD | 	call	#pushregs_
18f28     A0 F8 BF FD | 	call	#__system____getftab
18f2c     FD 1E 0A F6 | 	mov	local01, result1 wz
18f30     10 00 90 AD |  if_e	jmp	#LR__2800
18f34     08 1E 06 F1 | 	add	local01, #8
18f38     0F 15 0A FB | 	rdlong	arg02, local01 wz
18f3c     08 1E 86 F1 | 	sub	local01, #8
18f40     08 00 90 5D |  if_ne	jmp	#LR__2801
18f44                 | LR__2800
18f44     00 FA 05 F6 | 	mov	result1, #0
18f48     0C 00 90 FD | 	jmp	#LR__2802
18f4c                 | LR__2801
18f4c     00 70 02 FF 
18f50     00 1E 46 F5 | 	or	local01, ##81788928
18f54     0F FB 01 F6 | 	mov	result1, local01
18f58                 | LR__2802
18f58     A7 F0 03 F6 | 	mov	ptra, fp
18f5c     B2 00 A0 FD | 	call	#popregs_
18f60                 | __system___gettxfunc_ret
18f60     2D 00 64 FD | 	ret
18f64                 | 
18f64                 | __system___getiolock_0306
18f64     01 4A 05 F6 | 	mov	COUNT_, #1
18f68     A8 00 A0 FD | 	call	#pushregs_
18f6c     5C F8 BF FD | 	call	#__system____getftab
18f70     FD 1E 0A F6 | 	mov	local01, result1 wz
18f74     10 00 90 AD |  if_e	jmp	#LR__2810
18f78     08 1E 06 F1 | 	add	local01, #8
18f7c     0F FB 09 FB | 	rdlong	result1, local01 wz
18f80     08 1E 86 F1 | 	sub	local01, #8
18f84     18 00 90 5D |  if_ne	jmp	#LR__2811
18f88                 | LR__2810
18f88     01 00 00 FF 
18f8c     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
18f90     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
18f94     01 00 00 FF 
18f98     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
18f9c     08 00 90 FD | 	jmp	#LR__2812
18fa0                 | LR__2811
18fa0     0C 1E 06 F1 | 	add	local01, #12
18fa4     0F FB 01 F6 | 	mov	result1, local01
18fa8                 | LR__2812
18fa8     A7 F0 03 F6 | 	mov	ptra, fp
18fac     B2 00 A0 FD | 	call	#popregs_
18fb0                 | __system___getiolock_0306_ret
18fb0     2D 00 64 FD | 	ret
18fb4                 | 
18fb4                 | __system____ScanForChar
18fb4     09 01 02 F6 | 	mov	_var01, arg01
18fb8     09 03 02 F6 | 	mov	_var02, arg01
18fbc     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
18fc0                 | LR__2820
18fc0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
18fc4     01 02 06 51 |  if_ne	add	_var02, #1
18fc8     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
18fcc                 | LR__2821
18fcc     09 03 82 F1 | 	sub	_var02, arg01
18fd0     01 FB 01 F6 | 	mov	result1, _var02
18fd4     FD 12 0A F6 | 	mov	arg01, result1 wz
18fd8     00 FA 05 A6 |  if_e	mov	result1, #0
18fdc     B8 00 90 AD |  if_e	jmp	#LR__2828
18fe0     0A 05 02 F6 | 	mov	_var03, arg02
18fe4     07 04 4E F7 | 	zerox	_var03, #7 wz
18fe8     00 FA 05 A6 |  if_e	mov	result1, #0
18fec     A8 00 90 AD |  if_e	jmp	#LR__2828
18ff0     01 16 16 F2 | 	cmp	arg03, #1 wc
18ff4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
18ff8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
18ffc     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
19000     94 00 90 4D |  if_c_and_nz	jmp	#LR__2828
19004     09 17 1A F2 | 	cmp	arg03, arg01 wcz
19008     10 00 90 ED |  if_be	jmp	#LR__2822
1900c     00 18 0E F2 | 	cmp	arg04, #0 wz
19010     00 FA 05 A6 |  if_e	mov	result1, #0
19014     80 00 90 AD |  if_e	jmp	#LR__2828
19018     09 17 02 F6 | 	mov	arg03, arg01
1901c                 | LR__2822
1901c     01 16 86 F1 | 	sub	arg03, #1
19020     00 18 0E F2 | 	cmp	arg04, #0 wz
19024     38 00 90 5D |  if_ne	jmp	#LR__2824
19028     0B 07 02 F6 | 	mov	_var04, arg03
1902c     09 09 02 F6 | 	mov	_var05, arg01
19030                 | LR__2823
19030     04 07 12 F2 | 	cmp	_var04, _var05 wc
19034     5C 00 90 3D |  if_ae	jmp	#LR__2827
19038     03 05 02 F6 | 	mov	_var03, _var04
1903c     00 05 02 F1 | 	add	_var03, _var01
19040     02 05 C2 FA | 	rdbyte	_var03, _var03
19044     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
19048     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1904c     01 06 06 A1 |  if_e	add	_var04, #1
19050     03 FB 01 A6 |  if_e	mov	result1, _var04
19054     40 00 90 AD |  if_e	jmp	#LR__2828
19058     01 06 06 F1 | 	add	_var04, #1
1905c     D0 FF 9F FD | 	jmp	#LR__2823
19060                 | LR__2824
19060     0B 07 02 F6 | 	mov	_var04, arg03
19064                 | LR__2825
19064     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
19068     28 00 90 1D |  if_a	jmp	#LR__2826
1906c     03 09 02 F6 | 	mov	_var05, _var04
19070     00 09 02 F1 | 	add	_var05, _var01
19074     04 05 C2 FA | 	rdbyte	_var03, _var05
19078     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1907c     04 05 0A F2 | 	cmp	_var03, _var05 wz
19080     01 06 06 A1 |  if_e	add	_var04, #1
19084     03 FB 01 A6 |  if_e	mov	result1, _var04
19088     0C 00 90 AD |  if_e	jmp	#LR__2828
1908c     01 06 86 F1 | 	sub	_var04, #1
19090     D0 FF 9F FD | 	jmp	#LR__2825
19094                 | LR__2826
19094                 | LR__2827
19094     00 FA 05 F6 | 	mov	result1, #0
19098                 | LR__2828
19098                 | __system____ScanForChar_ret
19098     2D 00 64 FD | 	ret
1909c                 | 
1909c                 | __system___basic_dir
1909c     05 4A 05 F6 | 	mov	COUNT_, #5
190a0     A8 00 A0 FD | 	call	#pushregs_
190a4     4C F0 07 F1 | 	add	ptra, #76
190a8     04 4E 05 F1 | 	add	fp, #4
190ac     A7 12 62 FC | 	wrlong	arg01, fp
190b0     04 4E 05 F1 | 	add	fp, #4
190b4     A7 14 62 FC | 	wrlong	arg02, fp
190b8     04 4E 85 F1 | 	sub	fp, #4
190bc     A7 14 0A FB | 	rdlong	arg02, fp wz
190c0     04 4E 85 F1 | 	sub	fp, #4
190c4     04 4E 05 51 |  if_ne	add	fp, #4
190c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
190cc     04 4E 85 51 |  if_ne	sub	fp, #4
190d0     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
190d4     70 00 90 AD |  if_e	jmp	#LR__2830
190d8     03 00 00 FF 
190dc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
190e0     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
190e4     03 00 00 FF 
190e8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
190ec     03 00 00 5F 
190f0     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
190f4     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
190f8     03 00 00 5F 
190fc     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
19100     1C EA BF 5D |  if_ne	call	#__system__closedir
19104     16 01 00 FF 
19108     B0 13 06 F6 | 	mov	arg01, ##@LR__3998
1910c     24 E9 BF FD | 	call	#__system__opendir
19110     03 00 00 FF 
19114     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
19118     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1911c     08 4E 05 F1 | 	add	fp, #8
19120     A7 20 02 FB | 	rdlong	local02, fp
19124     04 E8 05 F1 | 	add	ptr___system__dat__, #4
19128     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1912c     04 4E 85 F1 | 	sub	fp, #4
19130     A7 20 02 FB | 	rdlong	local02, fp
19134     04 4E 85 F1 | 	sub	fp, #4
19138     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1913c     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
19140     03 00 00 FF 
19144     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
19148                 | LR__2830
19148     03 00 00 FF 
1914c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
19150     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
19154     03 00 00 FF 
19158     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1915c     16 01 00 AF 
19160     B2 FB 05 A6 |  if_e	mov	result1, ##@LR__3999
19164     84 02 90 AD |  if_e	jmp	#LR__2843
19168                 | LR__2831
19168     03 00 00 FF 
1916c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
19170     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
19174     03 00 00 FF 
19178     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1917c     14 EA BF FD | 	call	#__system__readdir
19180     0C 4E 05 F1 | 	add	fp, #12
19184     A7 FA 61 FC | 	wrlong	result1, fp
19188     0C 4E 85 F1 | 	sub	fp, #12
1918c     00 FA 0D F2 | 	cmp	result1, #0 wz
19190     38 00 90 5D |  if_ne	jmp	#LR__2832
19194     03 00 00 FF 
19198     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1919c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
191a0     03 00 00 FF 
191a4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
191a8     74 E9 BF FD | 	call	#__system__closedir
191ac     03 00 00 FF 
191b0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
191b4     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
191b8     03 00 00 FF 
191bc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
191c0     16 01 00 FF 
191c4     B4 FB 05 F6 | 	mov	result1, ##@LR__4000
191c8     20 02 90 FD | 	jmp	#LR__2843
191cc                 | LR__2832
191cc     0C 4E 05 F1 | 	add	fp, #12
191d0     A7 12 02 FB | 	rdlong	arg01, fp
191d4     0C 4E 85 F1 | 	sub	fp, #12
191d8     03 00 00 FF 
191dc     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
191e0     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
191e4     03 00 00 FF 
191e8     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
191ec     10 09 B0 FD | 	call	#__system___pat_match
191f0     00 FA 0D F2 | 	cmp	result1, #0 wz
191f4     70 FF 9F AD |  if_e	jmp	#LR__2831
191f8     03 00 00 FF 
191fc     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
19200     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
19204     03 00 00 FF 
19208     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1920c     78 01 90 AD |  if_e	jmp	#LR__2839
19210     0C 4E 05 F1 | 	add	fp, #12
19214     A7 12 02 FB | 	rdlong	arg01, fp
19218     04 4E 05 F1 | 	add	fp, #4
1921c     A7 14 02 F6 | 	mov	arg02, fp
19220     10 4E 85 F1 | 	sub	fp, #16
19224     70 F2 BF FD | 	call	#__system__stat
19228     40 4E 05 F1 | 	add	fp, #64
1922c     A7 FA 61 FC | 	wrlong	result1, fp
19230     40 4E 85 F1 | 	sub	fp, #64
19234     00 FA 0D F2 | 	cmp	result1, #0 wz
19238     16 01 00 5F 
1923c     B6 FB 05 56 |  if_ne	mov	result1, ##@LR__4001
19240     A8 01 90 5D |  if_ne	jmp	#LR__2843
19244     18 4E 05 F1 | 	add	fp, #24
19248     A7 20 02 FB | 	rdlong	local02, fp
1924c     78 00 00 FF 
19250     00 20 06 F5 | 	and	local02, ##61440
19254     2C 4E 05 F1 | 	add	fp, #44
19258     A7 20 62 FC | 	wrlong	local02, fp
1925c     38 4E 85 F1 | 	sub	fp, #56
19260     A7 20 02 FB | 	rdlong	local02, fp
19264     0C 4E 85 F1 | 	sub	fp, #12
19268     10 21 C2 FA | 	rdbyte	local02, local02
1926c     2E 20 0E F2 | 	cmp	local02, #46 wz
19270     08 4E 05 A1 |  if_e	add	fp, #8
19274     A7 04 68 AC |  if_e	wrlong	#2, fp
19278     08 4E C5 F3 | 	sumz	fp, #8
1927c     A7 00 68 5C |  if_ne	wrlong	#0, fp
19280     08 4E 85 51 |  if_ne	sub	fp, #8
19284     44 4E 05 F1 | 	add	fp, #68
19288     A7 20 02 FB | 	rdlong	local02, fp
1928c     44 4E 85 F1 | 	sub	fp, #68
19290     08 00 00 FF 
19294     00 20 0E F2 | 	cmp	local02, ##4096 wz
19298     18 00 90 5D |  if_ne	jmp	#LR__2833
1929c     08 4E 05 F1 | 	add	fp, #8
192a0     A7 20 02 FB | 	rdlong	local02, fp
192a4     10 20 46 F5 | 	or	local02, #16
192a8     A7 20 62 FC | 	wrlong	local02, fp
192ac     08 4E 85 F1 | 	sub	fp, #8
192b0     AC 00 90 FD | 	jmp	#LR__2838
192b4                 | LR__2833
192b4     44 4E 05 F1 | 	add	fp, #68
192b8     A7 20 02 FB | 	rdlong	local02, fp
192bc     44 4E 85 F1 | 	sub	fp, #68
192c0     10 00 00 FF 
192c4     00 20 0E F2 | 	cmp	local02, ##8192 wz
192c8     44 4E 05 51 |  if_ne	add	fp, #68
192cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
192d0     44 4E 85 51 |  if_ne	sub	fp, #68
192d4     18 00 00 5F 
192d8     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
192dc     44 4E 05 51 |  if_ne	add	fp, #68
192e0     0F 23 02 56 |  if_ne	mov	local03, local01
192e4     44 4E 85 51 |  if_ne	sub	fp, #68
192e8     20 00 00 5F 
192ec     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
192f0     18 00 90 5D |  if_ne	jmp	#LR__2834
192f4     08 4E 05 F1 | 	add	fp, #8
192f8     A7 20 02 FB | 	rdlong	local02, fp
192fc     04 20 46 F5 | 	or	local02, #4
19300     A7 20 62 FC | 	wrlong	local02, fp
19304     08 4E 85 F1 | 	sub	fp, #8
19308     54 00 90 FD | 	jmp	#LR__2837
1930c                 | LR__2834
1930c     18 4E 05 F1 | 	add	fp, #24
19310     A7 20 02 FB | 	rdlong	local02, fp
19314     18 4E 85 F1 | 	sub	fp, #24
19318     92 20 CE F7 | 	test	local02, #146 wz
1931c     18 00 90 5D |  if_ne	jmp	#LR__2835
19320     08 4E 05 F1 | 	add	fp, #8
19324     A7 20 02 FB | 	rdlong	local02, fp
19328     01 20 46 F5 | 	or	local02, #1
1932c     A7 20 62 FC | 	wrlong	local02, fp
19330     08 4E 85 F1 | 	sub	fp, #8
19334     28 00 90 FD | 	jmp	#LR__2836
19338                 | LR__2835
19338     44 4E 05 F1 | 	add	fp, #68
1933c     A7 24 02 FB | 	rdlong	local04, fp
19340     44 4E 85 F1 | 	sub	fp, #68
19344     08 00 00 FF 
19348     00 24 0E F2 | 	cmp	local04, ##4096 wz
1934c     08 4E 05 51 |  if_ne	add	fp, #8
19350     A7 24 02 5B |  if_ne	rdlong	local04, fp
19354     20 24 46 55 |  if_ne	or	local04, #32
19358     A7 24 62 5C |  if_ne	wrlong	local04, fp
1935c     08 4E 85 51 |  if_ne	sub	fp, #8
19360                 | LR__2836
19360                 | LR__2837
19360                 | LR__2838
19360     08 4E 05 F1 | 	add	fp, #8
19364     A7 24 02 FB | 	rdlong	local04, fp
19368     08 4E 85 F1 | 	sub	fp, #8
1936c     03 00 00 FF 
19370     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
19374     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
19378     03 00 00 FF 
1937c     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
19380     0F 25 CA F7 | 	test	local04, local01 wz
19384     E0 FD 9F AD |  if_e	jmp	#LR__2831
19388                 | LR__2839
19388     0C 4E 05 F1 | 	add	fp, #12
1938c     A7 12 02 FB | 	rdlong	arg01, fp
19390     0C 4E 85 F1 | 	sub	fp, #12
19394     09 27 02 F6 | 	mov	local05, arg01
19398     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
1939c                 | LR__2840
1939c     13 FB C9 FA | 	rdbyte	result1, local05 wz
193a0     01 26 06 51 |  if_ne	add	local05, #1
193a4     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
193a8                 | LR__2841
193a8     13 13 C2 F2 | 	subr	arg01, local05
193ac     01 12 06 F1 | 	add	arg01, #1
193b0     6C E0 BF FD | 	call	#__system___gc_alloc_managed
193b4     48 4E 05 F1 | 	add	fp, #72
193b8     A7 FA 61 FC | 	wrlong	result1, fp
193bc     48 4E 85 F1 | 	sub	fp, #72
193c0     00 FA 0D F2 | 	cmp	result1, #0 wz
193c4     18 00 90 AD |  if_e	jmp	#LR__2842
193c8     48 4E 05 F1 | 	add	fp, #72
193cc     A7 12 02 FB | 	rdlong	arg01, fp
193d0     3C 4E 85 F1 | 	sub	fp, #60
193d4     A7 14 02 FB | 	rdlong	arg02, fp
193d8     0C 4E 85 F1 | 	sub	fp, #12
193dc     54 A6 BF FD | 	call	#__system____builtin_strcpy
193e0                 | LR__2842
193e0     48 4E 05 F1 | 	add	fp, #72
193e4     A7 FA 01 FB | 	rdlong	result1, fp
193e8     48 4E 85 F1 | 	sub	fp, #72
193ec                 | LR__2843
193ec     A7 F0 03 F6 | 	mov	ptra, fp
193f0     B2 00 A0 FD | 	call	#popregs_
193f4                 | __system___basic_dir_ret
193f4     2D 00 64 FD | 	ret
193f8                 | 
193f8                 | __system__pack_0372
193f8     09 01 02 F6 | 	mov	_var01, arg01
193fc     7F 16 06 F1 | 	add	arg03, #127
19400     04 18 CE F7 | 	test	arg04, #4 wz
19404     10 00 90 AD |  if_e	jmp	#LR__2850
19408     00 00 0E F2 | 	cmp	_var01, #0 wz
1940c     16 00 C6 A9 |  if_e	decod	_var01, #22
19410     F7 00 26 F4 | 	bith	_var01, #247
19414     B4 00 90 FD | 	jmp	#LR__2859
19418                 | LR__2850
19418     02 18 CE F7 | 	test	arg04, #2 wz
1941c     00 C0 3F 5F 
19420     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
19424     00 14 06 56 |  if_ne	mov	arg02, #0
19428     A0 00 90 5D |  if_ne	jmp	#LR__2858
1942c     08 18 CE F7 | 	test	arg04, #8 wz
19430     00 00 06 56 |  if_ne	mov	_var01, #0
19434     94 00 90 5D |  if_ne	jmp	#LR__2857
19438     FF 16 56 F2 | 	cmps	arg03, #255 wc
1943c     00 C0 3F 3F 
19440     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
19444     00 14 06 36 |  if_ae	mov	arg02, #0
19448     80 00 90 3D |  if_ae	jmp	#LR__2856
1944c     01 16 56 F2 | 	cmps	arg03, #1 wc
19450     6C 00 90 3D |  if_ae	jmp	#LR__2854
19454     01 14 46 F0 | 	shr	arg02, #1
19458     00 03 02 F6 | 	mov	_var02, _var01
1945c     01 02 06 F5 | 	and	_var02, #1
19460     1F 02 66 F0 | 	shl	_var02, #31
19464     01 15 42 F5 | 	or	arg02, _var02
19468     01 00 46 F0 | 	shr	_var01, #1
1946c     97 1E 48 FB | 	callpa	#(@LR__2852-@LR__2851)>>2,fcache_load_ptr_
19470                 | LR__2851
19470     00 16 56 F2 | 	cmps	arg03, #0 wc
19474     34 00 90 3D |  if_ae	jmp	#LR__2853
19478     00 00 0E F2 | 	cmp	_var01, #0 wz
1947c     2C 00 90 AD |  if_e	jmp	#LR__2853
19480     0A 13 02 F6 | 	mov	arg01, arg02
19484     01 12 06 F5 | 	and	arg01, #1
19488     01 16 06 F1 | 	add	arg03, #1
1948c     01 14 46 F0 | 	shr	arg02, #1
19490     00 03 02 F6 | 	mov	_var02, _var01
19494     01 02 06 F5 | 	and	_var02, #1
19498     1F 02 66 F0 | 	shl	_var02, #31
1949c     01 15 42 F5 | 	or	arg02, _var02
194a0     09 15 42 F5 | 	or	arg02, arg01
194a4     01 00 46 F0 | 	shr	_var01, #1
194a8     C4 FF 9F FD | 	jmp	#LR__2851
194ac                 | LR__2852
194ac                 | LR__2853
194ac     00 16 56 F2 | 	cmps	arg03, #0 wc
194b0     18 00 90 3D |  if_ae	jmp	#LR__2855
194b4     00 14 0E F2 | 	cmp	arg02, #0 wz
194b8     6F 14 62 FD | 	wrnz	arg02
194bc     0C 00 90 FD | 	jmp	#LR__2855
194c0                 | LR__2854
194c0     17 01 06 F4 | 	bitl	_var01, #279
194c4     17 16 66 F0 | 	shl	arg03, #23
194c8     0B 01 42 F5 | 	or	_var01, arg03
194cc                 | LR__2855
194cc                 | LR__2856
194cc                 | LR__2857
194cc                 | LR__2858
194cc                 | LR__2859
194cc     01 00 CE F7 | 	test	_var01, #1 wz
194d0     01 14 46 55 |  if_ne	or	arg02, #1
194d4     0A 17 02 F6 | 	mov	arg03, arg02
194d8     00 02 06 F6 | 	mov	_var02, #0
194dc     FF FF 3F FF 
194e0     FF 15 06 F1 | 	add	arg02, ##2147483647
194e4     0B 15 12 F2 | 	cmp	arg02, arg03 wc
194e8     01 02 06 C6 |  if_b	mov	_var02, #1
194ec     01 01 02 F1 | 	add	_var01, _var02
194f0     01 18 CE F7 | 	test	arg04, #1 wz
194f4     1F 00 26 54 |  if_ne	bith	_var01, #31
194f8     00 FB 01 F6 | 	mov	result1, _var01
194fc                 | __system__pack_0372_ret
194fc     2D 00 64 FD | 	ret
19500                 | 
19500                 | __system___rxtxioctl_0461
19500     00 15 0E F2 | 	cmp	arg02, #256 wz
19504     0C 00 90 AD |  if_e	jmp	#LR__2860
19508     01 15 0E F2 | 	cmp	arg02, #257 wz
1950c     1C 00 90 AD |  if_e	jmp	#LR__2861
19510     30 00 90 FD | 	jmp	#LR__2862
19514                 | LR__2860
19514     08 E8 05 F1 | 	add	ptr___system__dat__, #8
19518     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1951c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
19520     0B FB 61 FC | 	wrlong	result1, arg03
19524     00 FA 05 F6 | 	mov	result1, #0
19528     28 00 90 FD | 	jmp	#LR__2863
1952c                 | LR__2861
1952c     0B 13 02 FB | 	rdlong	arg01, arg03
19530     08 E8 05 F1 | 	add	ptr___system__dat__, #8
19534     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19538     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1953c     00 FA 05 F6 | 	mov	result1, #0
19540     10 00 90 FD | 	jmp	#LR__2863
19544                 | LR__2862
19544     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19548     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1954c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19550     01 FA 65 F6 | 	neg	result1, #1
19554                 | LR__2863
19554                 | __system___rxtxioctl_0461_ret
19554     2D 00 64 FD | 	ret
19558                 | 
19558                 | __system____dummy_flush_0462
19558     00 FA 05 F6 | 	mov	result1, #0
1955c                 | __system____dummy_flush_0462_ret
1955c     2D 00 64 FD | 	ret
19560                 | 
19560                 | __system___vfswrite
19560     09 4A 05 F6 | 	mov	COUNT_, #9
19564     A8 00 A0 FD | 	call	#pushregs_
19568     09 1F 02 F6 | 	mov	local01, arg01
1956c     0A 21 02 F6 | 	mov	local02, arg02
19570     0B 23 02 F6 | 	mov	local03, arg03
19574     10 25 02 F6 | 	mov	local04, local02
19578     08 1E 06 F1 | 	add	local01, #8
1957c     0F 13 02 FB | 	rdlong	arg01, local01
19580     08 1E 86 F1 | 	sub	local01, #8
19584     02 12 CE F7 | 	test	arg01, #2 wz
19588     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1958c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
19590     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19594     01 FA 65 A6 |  if_e	neg	result1, #1
19598     80 01 90 AD |  if_e	jmp	#LR__2876
1959c     08 1E 06 F1 | 	add	local01, #8
195a0     0F FB 01 FB | 	rdlong	result1, local01
195a4     08 1E 86 F1 | 	sub	local01, #8
195a8     40 FA CD F7 | 	test	result1, #64 wz
195ac     68 00 90 AD |  if_e	jmp	#LR__2871
195b0     08 1E 06 F1 | 	add	local01, #8
195b4     0F 15 02 FB | 	rdlong	arg02, local01
195b8     08 1E 86 F1 | 	sub	local01, #8
195bc     80 14 CE F7 | 	test	arg02, #128 wz
195c0     54 00 90 AD |  if_e	jmp	#LR__2870
195c4     30 1E 06 F1 | 	add	local01, #48
195c8     0F 27 02 FB | 	rdlong	local05, local01
195cc     13 29 02 F6 | 	mov	local06, local05
195d0     30 1E 86 F1 | 	sub	local01, #48
195d4     13 28 46 F7 | 	zerox	local06, #19
195d8     14 26 46 F0 | 	shr	local05, #20
195dc     02 26 66 F0 | 	shl	local05, #2
195e0     ED 26 02 F1 | 	add	local05, __methods__
195e4     13 27 02 FB | 	rdlong	local05, local05
195e8     0F 13 02 F6 | 	mov	arg01, local01
195ec     00 14 06 F6 | 	mov	arg02, #0
195f0     02 16 06 F6 | 	mov	arg03, #2
195f4     F2 2A 02 F6 | 	mov	local07, objptr
195f8     14 E5 01 F6 | 	mov	objptr, local06
195fc     2D 26 62 FD | 	call	local05
19600     15 E5 01 F6 | 	mov	objptr, local07
19604     08 1E 06 F1 | 	add	local01, #8
19608     0F 2B 02 FB | 	rdlong	local07, local01
1960c     80 2A 26 F5 | 	andn	local07, #128
19610     0F 2B 62 FC | 	wrlong	local07, local01
19614     08 1E 86 F1 | 	sub	local01, #8
19618                 | LR__2870
19618                 | LR__2871
19618     18 1E 06 F1 | 	add	local01, #24
1961c     0F 2B 0A FB | 	rdlong	local07, local01 wz
19620     18 1E 86 F1 | 	sub	local01, #24
19624     80 00 90 AD |  if_e	jmp	#LR__2873
19628     18 1E 06 F1 | 	add	local01, #24
1962c     0F 27 02 FB | 	rdlong	local05, local01
19630     13 29 02 F6 | 	mov	local06, local05
19634     18 1E 86 F1 | 	sub	local01, #24
19638     13 28 46 F7 | 	zerox	local06, #19
1963c     14 26 46 F0 | 	shr	local05, #20
19640     02 26 66 F0 | 	shl	local05, #2
19644     ED 26 02 F1 | 	add	local05, __methods__
19648     13 27 02 FB | 	rdlong	local05, local05
1964c     10 15 02 F6 | 	mov	arg02, local02
19650     11 17 02 F6 | 	mov	arg03, local03
19654     0F 13 02 F6 | 	mov	arg01, local01
19658     F2 2A 02 F6 | 	mov	local07, objptr
1965c     14 E5 01 F6 | 	mov	objptr, local06
19660     2D 26 62 FD | 	call	local05
19664     15 E5 01 F6 | 	mov	objptr, local07
19668     FD 2C 02 F6 | 	mov	local08, result1
1966c     00 2C 56 F2 | 	cmps	local08, #0 wc
19670     2C 00 90 3D |  if_ae	jmp	#LR__2872
19674     08 1E 06 F1 | 	add	local01, #8
19678     0F 2B 02 FB | 	rdlong	local07, local01
1967c     20 2A 46 F5 | 	or	local07, #32
19680     0F 2B 62 FC | 	wrlong	local07, local01
19684     00 2C 4E F2 | 	cmps	local08, #0 wz
19688     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1968c     F4 2C 62 FC | 	wrlong	local08, ptr___system__dat__
19690     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19694     01 FA 65 56 |  if_ne	neg	result1, #1
19698     00 FA 05 A6 |  if_e	mov	result1, #0
1969c     7C 00 90 FD | 	jmp	#LR__2876
196a0                 | LR__2872
196a0     16 FB 01 F6 | 	mov	result1, local08
196a4     74 00 90 FD | 	jmp	#LR__2876
196a8                 | LR__2873
196a8     1C 1E 06 F1 | 	add	local01, #28
196ac     0F 2F 0A FB | 	rdlong	local09, local01 wz
196b0     1C 1E 86 F1 | 	sub	local01, #28
196b4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
196b8     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
196bc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
196c0     01 FA 65 A6 |  if_e	neg	result1, #1
196c4     54 00 90 AD |  if_e	jmp	#LR__2876
196c8     00 2C 06 F6 | 	mov	local08, #0
196cc                 | LR__2874
196cc     01 22 16 F2 | 	cmp	local03, #1 wc
196d0     44 00 90 CD |  if_b	jmp	#LR__2875
196d4     17 29 02 F6 | 	mov	local06, local09
196d8     17 27 02 F6 | 	mov	local05, local09
196dc     13 28 46 F7 | 	zerox	local06, #19
196e0     14 26 46 F0 | 	shr	local05, #20
196e4     02 26 66 F0 | 	shl	local05, #2
196e8     ED 26 02 F1 | 	add	local05, __methods__
196ec     13 27 02 FB | 	rdlong	local05, local05
196f0     12 13 C2 FA | 	rdbyte	arg01, local04
196f4     0F 15 02 F6 | 	mov	arg02, local01
196f8     F2 2A 02 F6 | 	mov	local07, objptr
196fc     14 E5 01 F6 | 	mov	objptr, local06
19700     01 24 06 F1 | 	add	local04, #1
19704     2D 26 62 FD | 	call	local05
19708     15 E5 01 F6 | 	mov	objptr, local07
1970c     FD 2C 02 F1 | 	add	local08, result1
19710     01 22 86 F1 | 	sub	local03, #1
19714     B4 FF 9F FD | 	jmp	#LR__2874
19718                 | LR__2875
19718     16 FB 01 F6 | 	mov	result1, local08
1971c                 | LR__2876
1971c     A7 F0 03 F6 | 	mov	ptra, fp
19720     B2 00 A0 FD | 	call	#popregs_
19724                 | __system___vfswrite_ret
19724     2D 00 64 FD | 	ret
19728                 | 
19728                 | __system___vfsread
19728     03 4A 05 F6 | 	mov	COUNT_, #3
1972c     A8 00 A0 FD | 	call	#pushregs_
19730     28 F0 07 F1 | 	add	ptra, #40
19734     04 4E 05 F1 | 	add	fp, #4
19738     A7 12 62 FC | 	wrlong	arg01, fp
1973c     04 4E 05 F1 | 	add	fp, #4
19740     A7 14 62 FC | 	wrlong	arg02, fp
19744     04 4E 05 F1 | 	add	fp, #4
19748     A7 16 62 FC | 	wrlong	arg03, fp
1974c     04 4E 85 F1 | 	sub	fp, #4
19750     A7 FA 01 FB | 	rdlong	result1, fp
19754     14 4E 05 F1 | 	add	fp, #20
19758     A7 FA 61 FC | 	wrlong	result1, fp
1975c     04 4E 05 F1 | 	add	fp, #4
19760     A7 00 68 FC | 	wrlong	#0, fp
19764     1C 4E 85 F1 | 	sub	fp, #28
19768     A7 12 02 FB | 	rdlong	arg01, fp
1976c     04 4E 85 F1 | 	sub	fp, #4
19770     08 12 06 F1 | 	add	arg01, #8
19774     09 FB 01 FB | 	rdlong	result1, arg01
19778     01 FA CD F7 | 	test	result1, #1 wz
1977c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19780     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
19784     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19788     01 FA 65 A6 |  if_e	neg	result1, #1
1978c     74 02 90 AD |  if_e	jmp	#LR__2886
19790     04 4E 05 F1 | 	add	fp, #4
19794     A7 12 02 FB | 	rdlong	arg01, fp
19798     04 4E 85 F1 | 	sub	fp, #4
1979c     14 12 06 F1 | 	add	arg01, #20
197a0     09 FB 09 FB | 	rdlong	result1, arg01 wz
197a4     B8 00 90 AD |  if_e	jmp	#LR__2881
197a8     04 4E 05 F1 | 	add	fp, #4
197ac     A7 12 02 FB | 	rdlong	arg01, fp
197b0     09 17 02 F6 | 	mov	arg03, arg01
197b4     14 16 06 F1 | 	add	arg03, #20
197b8     0B 1F 02 FB | 	rdlong	local01, arg03
197bc     0F 21 02 F6 | 	mov	local02, local01
197c0     13 1E 46 F7 | 	zerox	local01, #19
197c4     14 20 46 F0 | 	shr	local02, #20
197c8     02 20 66 F0 | 	shl	local02, #2
197cc     ED 20 02 F1 | 	add	local02, __methods__
197d0     10 21 02 FB | 	rdlong	local02, local02
197d4     04 4E 05 F1 | 	add	fp, #4
197d8     A7 14 02 FB | 	rdlong	arg02, fp
197dc     04 4E 05 F1 | 	add	fp, #4
197e0     A7 16 02 FB | 	rdlong	arg03, fp
197e4     0C 4E 85 F1 | 	sub	fp, #12
197e8     F2 22 02 F6 | 	mov	local03, objptr
197ec     0F E5 01 F6 | 	mov	objptr, local01
197f0     2D 20 62 FD | 	call	local02
197f4     11 E5 01 F6 | 	mov	objptr, local03
197f8     10 4E 05 F1 | 	add	fp, #16
197fc     A7 FA 61 FC | 	wrlong	result1, fp
19800     10 4E 85 F1 | 	sub	fp, #16
19804     00 FA 55 F2 | 	cmps	result1, #0 wc
19808     44 00 90 3D |  if_ae	jmp	#LR__2880
1980c     04 4E 05 F1 | 	add	fp, #4
19810     A7 22 02 FB | 	rdlong	local03, fp
19814     11 1F 02 F6 | 	mov	local01, local03
19818     08 22 06 F1 | 	add	local03, #8
1981c     11 21 02 FB | 	rdlong	local02, local03
19820     20 20 46 F5 | 	or	local02, #32
19824     08 1E 06 F1 | 	add	local01, #8
19828     0F 21 62 FC | 	wrlong	local02, local01
1982c     0C 4E 05 F1 | 	add	fp, #12
19830     A7 12 0A FB | 	rdlong	arg01, fp wz
19834     10 4E 85 F1 | 	sub	fp, #16
19838     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1983c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19840     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19844     01 FA 65 56 |  if_ne	neg	result1, #1
19848     00 FA 05 A6 |  if_e	mov	result1, #0
1984c     B4 01 90 FD | 	jmp	#LR__2886
19850                 | LR__2880
19850     10 4E 05 F1 | 	add	fp, #16
19854     A7 FA 01 FB | 	rdlong	result1, fp
19858     10 4E 85 F1 | 	sub	fp, #16
1985c     A4 01 90 FD | 	jmp	#LR__2886
19860                 | LR__2881
19860     04 4E 05 F1 | 	add	fp, #4
19864     A7 12 02 FB | 	rdlong	arg01, fp
19868     20 12 06 F1 | 	add	arg01, #32
1986c     09 13 0A FB | 	rdlong	arg01, arg01 wz
19870     14 4E 05 F1 | 	add	fp, #20
19874     A7 12 62 FC | 	wrlong	arg01, fp
19878     18 4E 85 F1 | 	sub	fp, #24
1987c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19880     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
19884     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19888     01 FA 65 A6 |  if_e	neg	result1, #1
1988c     74 01 90 AD |  if_e	jmp	#LR__2886
19890     04 4E 05 F1 | 	add	fp, #4
19894     A7 22 02 FB | 	rdlong	local03, fp
19898     04 4E 85 F1 | 	sub	fp, #4
1989c     28 22 06 F1 | 	add	local03, #40
198a0     11 21 0A FB | 	rdlong	local02, local03 wz
198a4     7C 00 90 AD |  if_e	jmp	#LR__2883
198a8     04 4E 05 F1 | 	add	fp, #4
198ac     A7 12 02 FB | 	rdlong	arg01, fp
198b0     09 23 02 F6 | 	mov	local03, arg01
198b4     28 22 06 F1 | 	add	local03, #40
198b8     11 1F 02 FB | 	rdlong	local01, local03
198bc     0F 21 02 F6 | 	mov	local02, local01
198c0     13 1E 46 F7 | 	zerox	local01, #19
198c4     14 20 46 F0 | 	shr	local02, #20
198c8     02 20 66 F0 | 	shl	local02, #2
198cc     ED 20 02 F1 | 	add	local02, __methods__
198d0     10 21 02 FB | 	rdlong	local02, local02
198d4     20 4E 05 F1 | 	add	fp, #32
198d8     A7 16 02 F6 | 	mov	arg03, fp
198dc     24 4E 85 F1 | 	sub	fp, #36
198e0     00 15 06 F6 | 	mov	arg02, #256
198e4     F2 22 02 F6 | 	mov	local03, objptr
198e8     0F E5 01 F6 | 	mov	objptr, local01
198ec     2D 20 62 FD | 	call	local02
198f0     11 E5 01 F6 | 	mov	objptr, local03
198f4     10 4E 05 F1 | 	add	fp, #16
198f8     A7 FA 61 FC | 	wrlong	result1, fp
198fc     00 FA 4D F2 | 	cmps	result1, #0 wz
19900     10 4E 85 F1 | 	sub	fp, #16
19904     1C 00 90 5D |  if_ne	jmp	#LR__2882
19908     24 4E 05 F1 | 	add	fp, #36
1990c     A7 20 02 FB | 	rdlong	local02, fp
19910     24 4E 85 F1 | 	sub	fp, #36
19914     02 20 CE F7 | 	test	local02, #2 wz
19918     20 4E 05 51 |  if_ne	add	fp, #32
1991c     A7 02 68 5C |  if_ne	wrlong	#1, fp
19920     20 4E 85 51 |  if_ne	sub	fp, #32
19924                 | LR__2882
19924                 | LR__2883
19924     10 4E 05 F1 | 	add	fp, #16
19928     A7 00 68 FC | 	wrlong	#0, fp
1992c     10 4E 85 F1 | 	sub	fp, #16
19930                 | LR__2884
19930     0C 4E 05 F1 | 	add	fp, #12
19934     A7 22 02 FB | 	rdlong	local03, fp
19938     0C 4E 85 F1 | 	sub	fp, #12
1993c     01 22 16 F2 | 	cmp	local03, #1 wc
19940     B4 00 90 CD |  if_b	jmp	#LR__2885
19944     18 4E 05 F1 | 	add	fp, #24
19948     A7 20 02 FB | 	rdlong	local02, fp
1994c     10 23 02 F6 | 	mov	local03, local02
19950     13 22 46 F7 | 	zerox	local03, #19
19954     14 20 46 F0 | 	shr	local02, #20
19958     02 20 66 F0 | 	shl	local02, #2
1995c     ED 20 02 F1 | 	add	local02, __methods__
19960     10 21 02 FB | 	rdlong	local02, local02
19964     14 4E 85 F1 | 	sub	fp, #20
19968     A7 12 02 FB | 	rdlong	arg01, fp
1996c     04 4E 85 F1 | 	sub	fp, #4
19970     F2 1E 02 F6 | 	mov	local01, objptr
19974     11 E5 01 F6 | 	mov	objptr, local03
19978     2D 20 62 FD | 	call	local02
1997c     0F E5 01 F6 | 	mov	objptr, local01
19980     14 4E 05 F1 | 	add	fp, #20
19984     A7 FA 61 FC | 	wrlong	result1, fp
19988     14 4E 85 F1 | 	sub	fp, #20
1998c     00 FA 55 F2 | 	cmps	result1, #0 wc
19990     64 00 90 CD |  if_b	jmp	#LR__2885
19994     1C 4E 05 F1 | 	add	fp, #28
19998     A7 22 02 FB | 	rdlong	local03, fp
1999c     11 21 02 F6 | 	mov	local02, local03
199a0     01 20 06 F1 | 	add	local02, #1
199a4     A7 20 62 FC | 	wrlong	local02, fp
199a8     08 4E 85 F1 | 	sub	fp, #8
199ac     A7 20 02 FB | 	rdlong	local02, fp
199b0     11 21 42 FC | 	wrbyte	local02, local03
199b4     04 4E 85 F1 | 	sub	fp, #4
199b8     A7 22 02 FB | 	rdlong	local03, fp
199bc     01 22 06 F1 | 	add	local03, #1
199c0     A7 22 62 FC | 	wrlong	local03, fp
199c4     04 4E 85 F1 | 	sub	fp, #4
199c8     A7 22 02 FB | 	rdlong	local03, fp
199cc     01 22 86 F1 | 	sub	local03, #1
199d0     A7 22 62 FC | 	wrlong	local03, fp
199d4     14 4E 05 F1 | 	add	fp, #20
199d8     A7 22 0A FB | 	rdlong	local03, fp wz
199dc     20 4E 85 F1 | 	sub	fp, #32
199e0     4C FF 9F AD |  if_e	jmp	#LR__2884
199e4     14 4E 05 F1 | 	add	fp, #20
199e8     A7 20 02 FB | 	rdlong	local02, fp
199ec     14 4E 85 F1 | 	sub	fp, #20
199f0     0A 20 0E F2 | 	cmp	local02, #10 wz
199f4     38 FF 9F 5D |  if_ne	jmp	#LR__2884
199f8                 | LR__2885
199f8     10 4E 05 F1 | 	add	fp, #16
199fc     A7 FA 01 FB | 	rdlong	result1, fp
19a00     10 4E 85 F1 | 	sub	fp, #16
19a04                 | LR__2886
19a04     A7 F0 03 F6 | 	mov	ptra, fp
19a08     B2 00 A0 FD | 	call	#popregs_
19a0c                 | __system___vfsread_ret
19a0c     2D 00 64 FD | 	ret
19a10                 | 
19a10                 | __system____default_filbuf
19a10     04 4A 05 F6 | 	mov	COUNT_, #4
19a14     A8 00 A0 FD | 	call	#pushregs_
19a18     09 1F 02 F6 | 	mov	local01, arg01
19a1c     0F 21 02 FB | 	rdlong	local02, local01
19a20     0C 20 06 F1 | 	add	local02, #12
19a24     10 FB 09 FB | 	rdlong	result1, local02 wz
19a28     0C 20 86 F1 | 	sub	local02, #12
19a2c     20 00 90 5D |  if_ne	jmp	#LR__2890
19a30     14 20 06 F1 | 	add	local02, #20
19a34     10 FB 01 F6 | 	mov	result1, local02
19a38     04 20 86 F1 | 	sub	local02, #4
19a3c     10 FB 61 FC | 	wrlong	result1, local02
19a40     04 20 86 F1 | 	sub	local02, #4
19a44     02 00 80 FF 
19a48     10 01 68 FC | 	wrlong	##1024, local02
19a4c     0C 20 86 F1 | 	sub	local02, #12
19a50                 | LR__2890
19a50     14 1E 06 F1 | 	add	local01, #20
19a54     0F 23 02 FB | 	rdlong	local03, local01
19a58     11 25 02 F6 | 	mov	local04, local03
19a5c     14 1E 86 F1 | 	sub	local01, #20
19a60     13 24 46 F7 | 	zerox	local04, #19
19a64     14 22 46 F0 | 	shr	local03, #20
19a68     02 22 66 F0 | 	shl	local03, #2
19a6c     ED 22 02 F1 | 	add	local03, __methods__
19a70     11 23 02 FB | 	rdlong	local03, local03
19a74     10 20 06 F1 | 	add	local02, #16
19a78     10 15 02 FB | 	rdlong	arg02, local02
19a7c     04 20 86 F1 | 	sub	local02, #4
19a80     10 17 02 FB | 	rdlong	arg03, local02
19a84     0C 20 86 F1 | 	sub	local02, #12
19a88     0F 13 02 F6 | 	mov	arg01, local01
19a8c     F2 1E 02 F6 | 	mov	local01, objptr
19a90     12 E5 01 F6 | 	mov	objptr, local04
19a94     2D 22 62 FD | 	call	local03
19a98     0F E5 01 F6 | 	mov	objptr, local01
19a9c     FD 24 02 F6 | 	mov	local04, result1
19aa0     00 24 56 F2 | 	cmps	local04, #0 wc
19aa4     01 FA 65 C6 |  if_b	neg	result1, #1
19aa8     28 00 90 CD |  if_b	jmp	#LR__2891
19aac     10 25 62 FC | 	wrlong	local04, local02
19ab0     10 20 06 F1 | 	add	local02, #16
19ab4     10 23 02 FB | 	rdlong	local03, local02
19ab8     0C 20 86 F1 | 	sub	local02, #12
19abc     10 23 62 FC | 	wrlong	local03, local02
19ac0     04 20 06 F1 | 	add	local02, #4
19ac4     10 23 02 FB | 	rdlong	local03, local02
19ac8     01 22 46 F5 | 	or	local03, #1
19acc     10 23 62 FC | 	wrlong	local03, local02
19ad0     12 FB 01 F6 | 	mov	result1, local04
19ad4                 | LR__2891
19ad4     A7 F0 03 F6 | 	mov	ptra, fp
19ad8     B2 00 A0 FD | 	call	#popregs_
19adc                 | __system____default_filbuf_ret
19adc     2D 00 64 FD | 	ret
19ae0                 | 
19ae0                 | __system__getlower_0847
19ae0     41 12 56 F2 | 	cmps	arg01, #65 wc
19ae4     10 00 90 CD |  if_b	jmp	#LR__2900
19ae8     5B 12 56 F2 | 	cmps	arg01, #91 wc
19aec     09 FB 01 C6 |  if_b	mov	result1, arg01
19af0     20 FA 05 C1 |  if_b	add	result1, #32
19af4     04 00 90 CD |  if_b	jmp	#__system__getlower_0847_ret
19af8                 | LR__2900
19af8     09 FB 01 F6 | 	mov	result1, arg01
19afc                 | __system__getlower_0847_ret
19afc     2D 00 64 FD | 	ret
19b00                 | 
19b00                 | __system___pat_match
19b00     08 4A 05 F6 | 	mov	COUNT_, #8
19b04     A8 00 A0 FD | 	call	#pushregs_
19b08     09 1F 02 F6 | 	mov	local01, arg01
19b0c                 | LR__2910
19b0c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
19b10     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
19b14     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
19b18     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
19b1c     2C 00 90 AD |  if_e	jmp	#LR__2911
19b20     0A 13 C2 FA | 	rdbyte	arg01, arg02
19b24     B8 FF BF FD | 	call	#__system__getlower_0847
19b28     FD 22 02 F6 | 	mov	local03, result1
19b2c     0F 13 C2 FA | 	rdbyte	arg01, local01
19b30     AC FF BF FD | 	call	#__system__getlower_0847
19b34     11 FB 09 F2 | 	cmp	result1, local03 wz
19b38     00 FA 05 56 |  if_ne	mov	result1, #0
19b3c     FC 00 90 5D |  if_ne	jmp	#LR__2919
19b40     01 1E 06 F1 | 	add	local01, #1
19b44     01 14 06 F1 | 	add	arg02, #1
19b48     C0 FF 9F FD | 	jmp	#LR__2910
19b4c                 | LR__2911
19b4c     0A 23 C2 FA | 	rdbyte	local03, arg02
19b50     2A 22 0E F2 | 	cmp	local03, #42 wz
19b54     D4 00 90 5D |  if_ne	jmp	#LR__2918
19b58     01 14 06 F1 | 	add	arg02, #1
19b5c     0A 21 C2 FA | 	rdbyte	local02, arg02
19b60     01 14 86 F1 | 	sub	arg02, #1
19b64     2E 20 0E F2 | 	cmp	local02, #46 wz
19b68     28 00 90 5D |  if_ne	jmp	#LR__2912
19b6c     02 14 06 F1 | 	add	arg02, #2
19b70     0A 21 C2 FA | 	rdbyte	local02, arg02
19b74     02 14 86 F1 | 	sub	arg02, #2
19b78     2A 20 0E F2 | 	cmp	local02, #42 wz
19b7c     03 14 06 A1 |  if_e	add	arg02, #3
19b80     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
19b84     03 14 86 A1 |  if_e	sub	arg02, #3
19b88     12 27 0A A6 |  if_e	mov	local05, local04 wz
19b8c     01 FA 05 A6 |  if_e	mov	result1, #1
19b90     A8 00 90 AD |  if_e	jmp	#LR__2919
19b94                 | LR__2912
19b94     01 14 06 F1 | 	add	arg02, #1
19b98     00 28 06 F6 | 	mov	local06, #0
19b9c     97 1E 48 FB | 	callpa	#(@LR__2915-@LR__2913)>>2,fcache_load_ptr_
19ba0                 | LR__2913
19ba0     14 2B 02 F6 | 	mov	local07, local06
19ba4     0A 2B 02 F1 | 	add	local07, arg02
19ba8     15 2B CA FA | 	rdbyte	local07, local07 wz
19bac     14 27 02 56 |  if_ne	mov	local05, local06
19bb0     01 26 06 51 |  if_ne	add	local05, #1
19bb4     13 29 02 56 |  if_ne	mov	local06, local05
19bb8     E4 FF 9F 5D |  if_ne	jmp	#LR__2913
19bbc     00 2C 06 F6 | 	mov	local08, #0
19bc0                 | LR__2914
19bc0     16 2B 02 F6 | 	mov	local07, local08
19bc4     0F 2B 02 F1 | 	add	local07, local01
19bc8     15 2B CA FA | 	rdbyte	local07, local07 wz
19bcc     16 27 02 56 |  if_ne	mov	local05, local08
19bd0     01 26 06 51 |  if_ne	add	local05, #1
19bd4     13 2D 02 56 |  if_ne	mov	local08, local05
19bd8     E4 FF 9F 5D |  if_ne	jmp	#LR__2914
19bdc                 | LR__2915
19bdc     14 2D 52 F2 | 	cmps	local08, local06 wc
19be0     00 FA 05 C6 |  if_b	mov	result1, #0
19be4     54 00 90 CD |  if_b	jmp	#LR__2919
19be8     16 21 02 F6 | 	mov	local02, local08
19bec     14 21 82 F1 | 	sub	local02, local06
19bf0     10 1F 02 F1 | 	add	local01, local02
19bf4                 | LR__2916
19bf4     01 28 56 F2 | 	cmps	local06, #1 wc
19bf8     30 00 90 CD |  if_b	jmp	#LR__2917
19bfc     0F 13 C2 FA | 	rdbyte	arg01, local01
19c00     DC FE BF FD | 	call	#__system__getlower_0847
19c04     FD 2C 02 F6 | 	mov	local08, result1
19c08     0A 13 C2 FA | 	rdbyte	arg01, arg02
19c0c     D0 FE BF FD | 	call	#__system__getlower_0847
19c10     FD 2C 0A F2 | 	cmp	local08, result1 wz
19c14     00 FA 05 56 |  if_ne	mov	result1, #0
19c18     20 00 90 5D |  if_ne	jmp	#LR__2919
19c1c     01 1E 06 F1 | 	add	local01, #1
19c20     01 14 06 F1 | 	add	arg02, #1
19c24     01 28 86 F1 | 	sub	local06, #1
19c28     C8 FF 9F FD | 	jmp	#LR__2916
19c2c                 | LR__2917
19c2c                 | LR__2918
19c2c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
19c30     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
19c34     01 FA 05 A6 |  if_e	mov	result1, #1
19c38     00 FA 05 56 |  if_ne	mov	result1, #0
19c3c                 | LR__2919
19c3c     A7 F0 03 F6 | 	mov	ptra, fp
19c40     B2 00 A0 FD | 	call	#popregs_
19c44                 | __system___pat_match_ret
19c44     2D 00 64 FD | 	ret
19c48                 | 
19c48                 | _fatfs_cc_ff_uni2oem
19c48     00 00 06 F6 | 	mov	_var01, #0
19c4c     80 12 16 F2 | 	cmp	arg01, #128 wc
19c50     09 01 02 C6 |  if_b	mov	_var01, arg01
19c54     58 00 90 CD |  if_b	jmp	#LR__2924
19c58     80 00 00 FF 
19c5c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
19c60     4C 00 90 3D |  if_ae	jmp	#LR__2923
19c64     0A FB 31 F9 | 	getword	result1, arg02, #0
19c68     01 00 00 FF 
19c6c     52 FB 0D F2 | 	cmp	result1, ##850 wz
19c70     3C 00 90 5D |  if_ne	jmp	#LR__2923
19c74                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
19c74     00 00 06 F6 | 	mov	_var01, #0
19c78     97 14 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
19c7c                 | LR__2920
19c7c     00 FB 31 F9 | 	getword	result1, _var01, #0
19c80     80 FA 15 F2 | 	cmp	result1, #128 wc
19c84     1C 00 90 3D |  if_ae	jmp	#LR__2922
19c88     00 FB 31 F9 | 	getword	result1, _var01, #0
19c8c     01 FA 65 F0 | 	shl	result1, #1
19c90     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
19c94     FD FA E1 FA | 	rdword	result1, result1
19c98     FD 12 0A F2 | 	cmp	arg01, result1 wz
19c9c     01 00 06 51 |  if_ne	add	_var01, #1
19ca0     D8 FF 9F 5D |  if_ne	jmp	#LR__2920
19ca4                 | LR__2921
19ca4                 | LR__2922
19ca4     00 01 32 F9 | 	getword	_var01, _var01, #0
19ca8     80 00 06 F1 | 	add	_var01, #128
19cac     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
19cb0                 | LR__2923
19cb0                 | LR__2924
19cb0                 | ' 			c = (c + 0x80) & 0xFF;
19cb0                 | ' 		}
19cb0                 | ' 	}
19cb0                 | ' 
19cb0                 | ' 	return c;
19cb0     00 FB 01 F6 | 	mov	result1, _var01
19cb4                 | _fatfs_cc_ff_uni2oem_ret
19cb4     2D 00 64 FD | 	ret
19cb8                 | 
19cb8                 | _fatfs_cc_ff_oem2uni
19cb8     00 00 06 F6 | 	mov	_var01, #0
19cbc     09 FB 31 F9 | 	getword	result1, arg01, #0
19cc0     80 FA 15 F2 | 	cmp	result1, #128 wc
19cc4     09 01 02 C6 |  if_b	mov	_var01, arg01
19cc8     2C 00 90 CD |  if_b	jmp	#LR__2931
19ccc     0A 15 32 F9 | 	getword	arg02, arg02, #0
19cd0     01 00 00 FF 
19cd4     52 15 0E F2 | 	cmp	arg02, ##850 wz
19cd8     1C 00 90 5D |  if_ne	jmp	#LR__2930
19cdc     09 FB 31 F9 | 	getword	result1, arg01, #0
19ce0     00 FB 15 F2 | 	cmp	result1, #256 wc
19ce4     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
19ce8     80 12 86 C1 |  if_b	sub	arg01, #128
19cec     01 12 66 C0 |  if_b	shl	arg01, #1
19cf0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
19cf4     09 01 E2 CA |  if_b	rdword	_var01, arg01
19cf8                 | LR__2930
19cf8                 | LR__2931
19cf8                 | ' 		}
19cf8                 | ' 	}
19cf8                 | ' 
19cf8                 | ' 	return c;
19cf8     00 FB 01 F6 | 	mov	result1, _var01
19cfc                 | _fatfs_cc_ff_oem2uni_ret
19cfc     2D 00 64 FD | 	ret
19d00                 | 
19d00                 | _fatfs_cc_ff_wtoupper
19d00     09 01 02 F6 | 	mov	_var01, arg01
19d04     80 00 00 FF 
19d08     00 00 16 F2 | 	cmp	_var01, ##65536 wc
19d0c     60 01 90 3D |  if_ae	jmp	#LR__2953
19d10     00 03 02 F6 | 	mov	_var02, _var01
19d14     01 01 32 F9 | 	getword	_var01, _var02, #0
19d18     08 00 00 FF 
19d1c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
19d20     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
19d24     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
19d28     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
19d2c     01 00 00 3F 
19d30     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
19d34     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
19d38     01 00 00 3F 
19d3c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
19d40     02 07 02 F6 | 	mov	_var04, _var03
19d44                 | ' 		uc = (WORD)uni;
19d44                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
19d44                 | ' 		for (;;) {
19d44                 | LR__2940
19d44     03 09 E2 FA | 	rdword	_var05, _var04
19d48     04 05 02 F6 | 	mov	_var03, _var05
19d4c     0F 04 4E F7 | 	zerox	_var03, #15 wz
19d50     02 06 06 F1 | 	add	_var04, #2
19d54     14 01 90 AD |  if_e	jmp	#LR__2952
19d58     01 05 32 F9 | 	getword	_var03, _var02, #0
19d5c     04 01 32 F9 | 	getword	_var01, _var05, #0
19d60     00 05 12 F2 | 	cmp	_var03, _var01 wc
19d64     04 01 90 CD |  if_b	jmp	#LR__2952
19d68     03 0B E2 FA | 	rdword	_var06, _var04
19d6c     05 0D 32 F9 | 	getword	_var07, _var06, #0
19d70     08 0C 46 F0 | 	shr	_var07, #8
19d74     05 0B 32 F9 | 	getword	_var06, _var06, #0
19d78     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
19d7c     01 05 32 F9 | 	getword	_var03, _var02, #0
19d80     04 0F 32 F9 | 	getword	_var08, _var05, #0
19d84     05 01 32 F9 | 	getword	_var01, _var06, #0
19d88     00 0F 02 F1 | 	add	_var08, _var01
19d8c     07 05 52 F2 | 	cmps	_var03, _var08 wc
19d90     02 06 06 F1 | 	add	_var04, #2
19d94     C4 00 90 3D |  if_ae	jmp	#LR__2951
19d98                 | ' 				switch (cmd) {
19d98     06 11 32 F9 | 	getword	_var09, _var07, #0
19d9c     09 10 26 F3 | 	fle	_var09, #9
19da0     30 10 62 FD | 	jmprel	_var09
19da4                 | LR__2941
19da4     24 00 90 FD | 	jmp	#LR__2942
19da8     3C 00 90 FD | 	jmp	#LR__2943
19dac     54 00 90 FD | 	jmp	#LR__2944
19db0     5C 00 90 FD | 	jmp	#LR__2945
19db4     64 00 90 FD | 	jmp	#LR__2946
19db8     6C 00 90 FD | 	jmp	#LR__2947
19dbc     74 00 90 FD | 	jmp	#LR__2948
19dc0     7C 00 90 FD | 	jmp	#LR__2949
19dc4     84 00 90 FD | 	jmp	#LR__2950
19dc8     A0 00 90 FD | 	jmp	#LR__2952
19dcc                 | LR__2942
19dcc     01 03 32 F9 | 	getword	_var02, _var02, #0
19dd0     04 09 32 F9 | 	getword	_var05, _var05, #0
19dd4     04 03 82 F1 | 	sub	_var02, _var05
19dd8     01 02 66 F0 | 	shl	_var02, #1
19ddc     03 03 02 F1 | 	add	_var02, _var04
19de0     01 03 E2 FA | 	rdword	_var02, _var02
19de4     84 00 90 FD | 	jmp	#LR__2952
19de8                 | LR__2943
19de8     01 05 32 F9 | 	getword	_var03, _var02, #0
19dec     01 03 32 F9 | 	getword	_var02, _var02, #0
19df0     04 09 32 F9 | 	getword	_var05, _var05, #0
19df4     04 03 82 F1 | 	sub	_var02, _var05
19df8     01 02 06 F5 | 	and	_var02, #1
19dfc     02 03 C2 F2 | 	subr	_var02, _var03
19e00     68 00 90 FD | 	jmp	#LR__2952
19e04                 | LR__2944
19e04     01 03 32 F9 | 	getword	_var02, _var02, #0
19e08     10 02 86 F1 | 	sub	_var02, #16
19e0c     5C 00 90 FD | 	jmp	#LR__2952
19e10                 | LR__2945
19e10     01 03 32 F9 | 	getword	_var02, _var02, #0
19e14     20 02 86 F1 | 	sub	_var02, #32
19e18     50 00 90 FD | 	jmp	#LR__2952
19e1c                 | LR__2946
19e1c     01 03 32 F9 | 	getword	_var02, _var02, #0
19e20     30 02 86 F1 | 	sub	_var02, #48
19e24     44 00 90 FD | 	jmp	#LR__2952
19e28                 | LR__2947
19e28     01 03 32 F9 | 	getword	_var02, _var02, #0
19e2c     1A 02 86 F1 | 	sub	_var02, #26
19e30     38 00 90 FD | 	jmp	#LR__2952
19e34                 | LR__2948
19e34     01 03 32 F9 | 	getword	_var02, _var02, #0
19e38     08 02 06 F1 | 	add	_var02, #8
19e3c     2C 00 90 FD | 	jmp	#LR__2952
19e40                 | LR__2949
19e40     01 03 32 F9 | 	getword	_var02, _var02, #0
19e44     50 02 86 F1 | 	sub	_var02, #80
19e48     20 00 90 FD | 	jmp	#LR__2952
19e4c                 | LR__2950
19e4c     01 03 32 F9 | 	getword	_var02, _var02, #0
19e50     0E 00 00 FF 
19e54     60 02 86 F1 | 	sub	_var02, ##7264
19e58                 | ' 				}
19e58                 | ' 				break;
19e58     10 00 90 FD | 	jmp	#LR__2952
19e5c                 | LR__2951
19e5c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
19e60     02 0A 06 AA |  if_e	mul	_var06, #2
19e64     05 07 02 A1 |  if_e	add	_var04, _var06
19e68     D8 FE 9F FD | 	jmp	#LR__2940
19e6c                 | LR__2952
19e6c     01 01 32 F9 | 	getword	_var01, _var02, #0
19e70                 | LR__2953
19e70                 | ' 		}
19e70                 | ' 		uni = uc;
19e70                 | ' 	}
19e70                 | ' 
19e70                 | ' 	return uni;
19e70     00 FB 01 F6 | 	mov	result1, _var01
19e74                 | _fatfs_cc_ff_wtoupper_ret
19e74     2D 00 64 FD | 	ret
19e78                 | 
19e78                 | _fatfs_cc_strncpy
19e78     09 01 02 F6 | 	mov	_var01, arg01
19e7c     97 12 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
19e80                 | ' 
19e80                 | ' 	dscan = dst;
19e80                 | ' 	sscan = src;
19e80                 | ' 	count = n;
19e80                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
19e80                 | LR__2960
19e80     01 16 86 F1 | 	sub	arg03, #1
19e84     00 16 56 F2 | 	cmps	arg03, #0 wc
19e88     18 00 90 CD |  if_b	jmp	#LR__2962
19e8c     0A FB C1 FA | 	rdbyte	result1, arg02
19e90     00 FB 41 FC | 	wrbyte	result1, _var01
19e94     01 14 06 F1 | 	add	arg02, #1
19e98     00 FB C9 FA | 	rdbyte	result1, _var01 wz
19e9c                 | ' 		continue;
19e9c     01 00 06 F1 | 	add	_var01, #1
19ea0     DC FF 9F 5D |  if_ne	jmp	#LR__2960
19ea4                 | LR__2961
19ea4                 | LR__2962
19ea4     97 0C 48 FB | 	callpa	#(@LR__2964-@LR__2963)>>2,fcache_load_ptr_
19ea8                 | ' 	while (--count >= 0)
19ea8                 | LR__2963
19ea8     01 16 86 F1 | 	sub	arg03, #1
19eac     00 16 56 F2 | 	cmps	arg03, #0 wc
19eb0     00 03 02 36 |  if_ae	mov	_var02, _var01
19eb4     01 00 06 31 |  if_ae	add	_var01, #1
19eb8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
19ebc     E8 FF 9F 3D |  if_ae	jmp	#LR__2963
19ec0                 | LR__2964
19ec0                 | ' 		*dscan++ = '\0';
19ec0                 | ' 	return(dst);
19ec0     09 FB 01 F6 | 	mov	result1, arg01
19ec4                 | _fatfs_cc_strncpy_ret
19ec4     2D 00 64 FD | 	ret
19ec8                 | 
19ec8                 | _fatfs_cc_memcmp
19ec8                 | ' 	for (n = size; n > 0; n--)
19ec8     00 16 0E F2 | 	cmp	arg03, #0 wz
19ecc     28 00 90 AD |  if_e	jmp	#LR__2971
19ed0                 | LR__2970
19ed0     09 01 C2 FA | 	rdbyte	_var01, arg01
19ed4     0A 03 C2 FA | 	rdbyte	_var02, arg02
19ed8     01 01 0A F2 | 	cmp	_var01, _var02 wz
19edc     01 12 06 A1 |  if_e	add	arg01, #1
19ee0     01 14 06 A1 |  if_e	add	arg02, #1
19ee4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
19ee4     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
19ee8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
19eec     01 FB 81 51 |  if_ne	sub	result1, _var02
19ef0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
19ef4     F6 17 6E FB | 	djnz	arg03, #LR__2970
19ef8                 | LR__2971
19ef8                 | ' 
19ef8                 | ' 	return(0);
19ef8     00 FA 05 F6 | 	mov	result1, #0
19efc                 | _fatfs_cc_memcmp_ret
19efc     2D 00 64 FD | 	ret
19f00                 | 
19f00                 | _fatfs_cc_strncmp
19f00     09 01 0A F6 | 	mov	_var01, arg01 wz
19f04     14 00 90 5D |  if_ne	jmp	#LR__2980
19f08                 | ' 		return scan2 ? -1 : 0;
19f08     00 14 0E F2 | 	cmp	arg02, #0 wz
19f0c     01 02 66 56 |  if_ne	neg	_var02, #1
19f10     00 02 06 A6 |  if_e	mov	_var02, #0
19f14     01 FB 01 F6 | 	mov	result1, _var02
19f18     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
19f1c                 | LR__2980
19f1c     00 14 0E F2 | 	cmp	arg02, #0 wz
19f20     01 FA 05 A6 |  if_e	mov	result1, #1
19f24     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
19f28     0B 05 02 F6 | 	mov	_var03, arg03
19f2c     97 16 48 FB | 	callpa	#(@LR__2982-@LR__2981)>>2,fcache_load_ptr_
19f30                 | ' 	count = n;
19f30                 | ' 	do {
19f30                 | LR__2981
19f30     00 07 C2 FA | 	rdbyte	_var04, _var01
19f34     0A 09 02 F6 | 	mov	_var05, arg02
19f38     04 0B C2 FA | 	rdbyte	_var06, _var05
19f3c     01 04 86 F1 | 	sub	_var03, #1
19f40     00 04 56 F2 | 	cmps	_var03, #0 wc
19f44     01 00 06 F1 | 	add	_var01, #1
19f48     01 14 06 F1 | 	add	arg02, #1
19f4c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
19f50     08 00 90 2D |  if_nc_and_z	jmp	#LR__2983
19f54     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
19f58     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2981
19f5c                 | LR__2982
19f5c                 | LR__2983
19f5c     00 04 56 F2 | 	cmps	_var03, #0 wc
19f60                 | ' 		return(0);
19f60     00 FA 05 C6 |  if_b	mov	result1, #0
19f64     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
19f68     05 07 0A F2 | 	cmp	_var04, _var06 wz
19f6c                 | ' 		return(0);
19f6c     00 FA 05 A6 |  if_e	mov	result1, #0
19f70     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
19f74     00 06 0E F2 | 	cmp	_var04, #0 wz
19f78                 | ' 		return(-1);
19f78     01 FA 65 A6 |  if_e	neg	result1, #1
19f7c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
19f80     00 0A 0E F2 | 	cmp	_var06, #0 wz
19f84                 | ' 		return(1);
19f84     01 FA 05 A6 |  if_e	mov	result1, #1
19f88                 | ' 		return(c1 - c2);
19f88     03 FB 01 56 |  if_ne	mov	result1, _var04
19f8c     05 FB 81 51 |  if_ne	sub	result1, _var06
19f90                 | _fatfs_cc_strncmp_ret
19f90     2D 00 64 FD | 	ret
19f94                 | 
19f94                 | _fatfs_cc_strchr
19f94                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
19f94                 | ' 	while ((c = *s++) != (char) charwanted)
19f94                 | LR__2990
19f94     09 01 02 F6 | 	mov	_var01, arg01
19f98     00 03 C2 FA | 	rdbyte	_var02, _var01
19f9c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
19fa0     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
19fa4     03 05 0A F2 | 	cmp	_var03, _var04 wz
19fa8     01 12 06 F1 | 	add	arg01, #1
19fac     14 00 90 AD |  if_e	jmp	#LR__2991
19fb0     01 05 02 F6 | 	mov	_var03, _var02
19fb4     07 04 4E F7 | 	zerox	_var03, #7 wz
19fb8     00 FA 05 A6 |  if_e	mov	result1, #0
19fbc     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
19fc0     D0 FF 9F FD | 	jmp	#LR__2990
19fc4                 | LR__2991
19fc4                 | ' 	return((char *)--s);
19fc4     01 12 86 F1 | 	sub	arg01, #1
19fc8     09 FB 01 F6 | 	mov	result1, arg01
19fcc                 | _fatfs_cc_strchr_ret
19fcc     2D 00 64 FD | 	ret
19fd0                 | 
19fd0                 | _fatfs_cc_disk_initialize
19fd0     04 4A 05 F6 | 	mov	COUNT_, #4
19fd4     A8 00 A0 FD | 	call	#pushregs_
19fd8     40 F0 07 F1 | 	add	ptra, #64
19fdc     04 4E 05 F1 | 	add	fp, #4
19fe0     A7 12 42 FC | 	wrbyte	arg01, fp
19fe4     01 00 00 FF 
19fe8     14 E4 05 F1 | 	add	objptr, ##532
19fec     F2 18 02 FB | 	rdlong	arg04, objptr
19ff0     2C 4E 05 F1 | 	add	fp, #44
19ff4     A7 18 62 FC | 	wrlong	arg04, fp
19ff8     04 E4 85 F1 | 	sub	objptr, #4
19ffc     F2 18 02 FB | 	rdlong	arg04, objptr
1a000     04 4E 05 F1 | 	add	fp, #4
1a004     A7 18 62 FC | 	wrlong	arg04, fp
1a008     08 E4 05 F1 | 	add	objptr, #8
1a00c     F2 18 02 FB | 	rdlong	arg04, objptr
1a010     04 4E 05 F1 | 	add	fp, #4
1a014     A7 18 62 FC | 	wrlong	arg04, fp
1a018     04 E4 05 F1 | 	add	objptr, #4
1a01c     F2 18 02 FB | 	rdlong	arg04, objptr
1a020     04 4E 05 F1 | 	add	fp, #4
1a024     A7 18 62 FC | 	wrlong	arg04, fp
1a028     04 E4 05 F1 | 	add	objptr, #4
1a02c     F2 02 48 FC | 	wrbyte	#1, objptr
1a030     01 00 00 FF 
1a034     20 E4 85 F1 | 	sub	objptr, ##544
1a038     38 4E 85 F1 | 	sub	fp, #56
1a03c     A7 18 CA FA | 	rdbyte	arg04, fp wz
1a040     04 4E 85 F1 | 	sub	fp, #4
1a044                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1a044                 | '             return RES_NOTRDY;
1a044     03 FA 05 56 |  if_ne	mov	result1, #3
1a048     D8 05 90 5D |  if_ne	jmp	#LR__3018
1a04c     13 00 00 FF 
1a050     10 13 06 F6 | 	mov	arg01, ##10000
1a054     A0 9C BF FD | 	call	#__system___waitus
1a058     30 4E 05 F1 | 	add	fp, #48
1a05c     A7 12 02 FB | 	rdlong	arg01, fp
1a060     09 01 08 FC | 	wrpin	#0, arg01
1a064     04 4E 05 F1 | 	add	fp, #4
1a068     A7 12 02 FB | 	rdlong	arg01, fp
1a06c     09 01 08 FC | 	wrpin	#0, arg01
1a070     04 4E 05 F1 | 	add	fp, #4
1a074     A7 12 02 FB | 	rdlong	arg01, fp
1a078     09 01 08 FC | 	wrpin	#0, arg01
1a07c     04 4E 05 F1 | 	add	fp, #4
1a080     A7 12 02 FB | 	rdlong	arg01, fp
1a084     09 00 80 FF 
1a088     09 01 08 FC | 	wrpin	##4608, arg01
1a08c     0C 4E 85 F1 | 	sub	fp, #12
1a090     A7 12 02 FB | 	rdlong	arg01, fp
1a094     59 12 62 FD | 	drvh	arg01
1a098     04 4E 05 F1 | 	add	fp, #4
1a09c     A7 12 02 FB | 	rdlong	arg01, fp
1a0a0     59 12 62 FD | 	drvh	arg01
1a0a4     04 4E 05 F1 | 	add	fp, #4
1a0a8     A7 12 02 FB | 	rdlong	arg01, fp
1a0ac     59 12 62 FD | 	drvh	arg01
1a0b0     04 4E 05 F1 | 	add	fp, #4
1a0b4     A7 12 02 FB | 	rdlong	arg01, fp
1a0b8     59 12 62 FD | 	drvh	arg01
1a0bc     20 4E 85 F1 | 	sub	fp, #32
1a0c0     00 04 80 FF 
1a0c4     A7 20 68 FC | 	wrlong	##524304, fp
1a0c8     04 4E 05 F1 | 	add	fp, #4
1a0cc     20 03 80 FF 
1a0d0     A7 90 68 FC | 	wrlong	##409672, fp
1a0d4     14 4E 05 F1 | 	add	fp, #20
1a0d8     A7 1E 02 FB | 	rdlong	local01, fp
1a0dc     18 4E 85 F1 | 	sub	fp, #24
1a0e0     A7 16 02 FB | 	rdlong	arg03, fp
1a0e4     40 1E 62 FD | 	dirl	local01
1a0e8     A0 03 80 FF 
1a0ec     0F 91 08 FC | 	wrpin	##475208, local01
1a0f0     0F 17 12 FC | 	wxpin	arg03, local01
1a0f4     0F 01 28 FC | 	wypin	#0, local01
1a0f8     41 1E 62 FD | 	dirh	local01
1a0fc     1C 4E 05 F1 | 	add	fp, #28
1a100     A7 20 02 FB | 	rdlong	local02, fp
1a104     10 1F 82 F1 | 	sub	local01, local02
1a108     07 1E 06 F5 | 	and	local01, #7
1a10c     18 1E 66 F0 | 	shl	local01, #24
1a110     78 14 06 F6 | 	mov	arg02, #120
1a114     0F 15 42 F5 | 	or	arg02, local01
1a118     14 4E 85 F1 | 	sub	fp, #20
1a11c     A7 14 62 FC | 	wrlong	arg02, fp
1a120     14 4E 05 F1 | 	add	fp, #20
1a124     A7 12 02 FB | 	rdlong	arg01, fp
1a128     10 14 26 F4 | 	bith	arg02, #16
1a12c     40 12 62 FD | 	dirl	arg01
1a130     09 15 02 FC | 	wrpin	arg02, arg01
1a134     09 3F 18 FC | 	wxpin	#31, arg01
1a138     FF FF FF FF 
1a13c     09 FF 2B FC | 	wypin	##-1, arg01
1a140     41 12 62 FD | 	dirh	arg01
1a144     04 4E 85 F1 | 	sub	fp, #4
1a148     A7 14 02 FB | 	rdlong	arg02, fp
1a14c     08 4E 05 F1 | 	add	fp, #8
1a150     A7 22 02 FB | 	rdlong	local03, fp
1a154     11 15 82 F1 | 	sub	arg02, local03
1a158     07 14 06 F5 | 	and	arg02, #7
1a15c     18 14 66 F0 | 	shl	arg02, #24
1a160     14 4E 85 F1 | 	sub	fp, #20
1a164     A7 14 62 FC | 	wrlong	arg02, fp
1a168     29 00 00 FF 
1a16c     7A 14 46 F5 | 	or	arg02, ##21114
1a170     A7 14 62 FC | 	wrlong	arg02, fp
1a174     14 4E 05 F1 | 	add	fp, #20
1a178     A7 12 02 FB | 	rdlong	arg01, fp
1a17c     40 12 62 FD | 	dirl	arg01
1a180     09 15 02 FC | 	wrpin	arg02, arg01
1a184     09 4F 18 FC | 	wxpin	#39, arg01
1a188     09 01 28 FC | 	wypin	#0, arg01
1a18c     41 12 62 FD | 	dirh	arg01
1a190     28 4E 85 F1 | 	sub	fp, #40
1a194     A7 12 02 F6 | 	mov	arg01, fp
1a198     14 4E 85 F1 | 	sub	fp, #20
1a19c     0A 14 06 F6 | 	mov	arg02, #10
1a1a0     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a1a4     00 12 06 F6 | 	mov	arg01, #0
1a1a8     00 14 06 F6 | 	mov	arg02, #0
1a1ac     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a1b0     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0891
1a1b4     64 12 06 F6 | 	mov	arg01, #100
1a1b8     3C 9B BF FD | 	call	#__system___waitus
1a1bc     14 4E 05 F1 | 	add	fp, #20
1a1c0     A7 12 02 F6 | 	mov	arg01, fp
1a1c4     14 4E 85 F1 | 	sub	fp, #20
1a1c8     0A 14 06 F6 | 	mov	arg02, #10
1a1cc     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a1d0     0C 4E 05 F1 | 	add	fp, #12
1a1d4     A7 00 48 FC | 	wrbyte	#0, fp
1a1d8     0C 4E 85 F1 | 	sub	fp, #12
1a1dc     00 12 06 F6 | 	mov	arg01, #0
1a1e0     00 14 06 F6 | 	mov	arg02, #0
1a1e4     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a1e8     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1a1ec     01 18 0E F2 | 	cmp	arg04, #1 wz
1a1f0     B8 03 90 5D |  if_ne	jmp	#LR__3017
1a1f4     08 12 06 F6 | 	mov	arg01, #8
1a1f8     AA 15 06 F6 | 	mov	arg02, #426
1a1fc     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a200     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a204     01 FA 0D F2 | 	cmp	result1, #1 wz
1a208     98 01 90 5D |  if_ne	jmp	#LR__3003
1a20c     14 4E 05 F1 | 	add	fp, #20
1a210     A7 12 02 F6 | 	mov	arg01, fp
1a214     14 4E 85 F1 | 	sub	fp, #20
1a218     04 14 06 F6 | 	mov	arg02, #4
1a21c     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a220     16 4E 05 F1 | 	add	fp, #22
1a224     A7 24 C2 FA | 	rdbyte	local04, fp
1a228     16 4E 85 F1 | 	sub	fp, #22
1a22c     01 24 0E F2 | 	cmp	local04, #1 wz
1a230     17 4E 05 A1 |  if_e	add	fp, #23
1a234     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1a238     17 4E 85 A1 |  if_e	sub	fp, #23
1a23c     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1a240     68 03 90 5D |  if_ne	jmp	#LR__3016
1a244                 | ' 				for (tmr = 1000; tmr; tmr--) {
1a244     18 4E 05 F1 | 	add	fp, #24
1a248     01 00 80 FF 
1a24c     A7 D0 6B FC | 	wrlong	##1000, fp
1a250     18 4E 85 F1 | 	sub	fp, #24
1a254                 | LR__3000
1a254     18 4E 05 F1 | 	add	fp, #24
1a258     A7 1E 0A FB | 	rdlong	local01, fp wz
1a25c     18 4E 85 F1 | 	sub	fp, #24
1a260     3C 00 90 AD |  if_e	jmp	#LR__3001
1a264     A9 12 06 F6 | 	mov	arg01, #169
1a268     1E 14 C6 F9 | 	decod	arg02, #30
1a26c     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a270     FD 24 02 F6 | 	mov	local04, result1
1a274     07 24 4E F7 | 	zerox	local04, #7 wz
1a278     24 00 90 AD |  if_e	jmp	#LR__3001
1a27c     01 00 00 FF 
1a280     E8 13 06 F6 | 	mov	arg01, ##1000
1a284     70 9A BF FD | 	call	#__system___waitus
1a288     18 4E 05 F1 | 	add	fp, #24
1a28c     A7 24 02 FB | 	rdlong	local04, fp
1a290     01 24 86 F1 | 	sub	local04, #1
1a294     A7 24 62 FC | 	wrlong	local04, fp
1a298     18 4E 85 F1 | 	sub	fp, #24
1a29c     B4 FF 9F FD | 	jmp	#LR__3000
1a2a0                 | LR__3001
1a2a0     18 4E 05 F1 | 	add	fp, #24
1a2a4     A7 24 0A FB | 	rdlong	local04, fp wz
1a2a8     18 4E 85 F1 | 	sub	fp, #24
1a2ac     4C 00 90 AD |  if_e	jmp	#LR__3002
1a2b0     3A 12 06 F6 | 	mov	arg01, #58
1a2b4     00 14 06 F6 | 	mov	arg02, #0
1a2b8     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a2bc     FD 22 02 F6 | 	mov	local03, result1
1a2c0     07 22 4E F7 | 	zerox	local03, #7 wz
1a2c4     34 00 90 5D |  if_ne	jmp	#LR__3002
1a2c8     14 4E 05 F1 | 	add	fp, #20
1a2cc     A7 12 02 F6 | 	mov	arg01, fp
1a2d0     14 4E 85 F1 | 	sub	fp, #20
1a2d4     04 14 06 F6 | 	mov	arg02, #4
1a2d8     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a2dc     14 4E 05 F1 | 	add	fp, #20
1a2e0     A7 1E C2 FA | 	rdbyte	local01, fp
1a2e4     40 1E CE F7 | 	test	local01, #64 wz
1a2e8     0C 24 06 56 |  if_ne	mov	local04, #12
1a2ec     04 24 06 A6 |  if_e	mov	local04, #4
1a2f0     08 4E 85 F1 | 	sub	fp, #8
1a2f4     A7 24 42 FC | 	wrbyte	local04, fp
1a2f8     0C 4E 85 F1 | 	sub	fp, #12
1a2fc                 | LR__3002
1a2fc     14 24 06 FB | 	rdlong	local04, #20
1a300     18 4E 05 F1 | 	add	fp, #24
1a304     A7 24 62 FC | 	wrlong	local04, fp
1a308     0C 4E 05 F1 | 	add	fp, #12
1a30c     A7 24 02 FB | 	rdlong	local04, fp
1a310     1B 24 26 F4 | 	bith	local04, #27
1a314     A7 24 62 FC | 	wrlong	local04, fp
1a318     0C 4E 85 F1 | 	sub	fp, #12
1a31c     A7 24 02 FB | 	rdlong	local04, fp
1a320     18 4E 85 F1 | 	sub	fp, #24
1a324     68 78 04 FF 
1a328     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1a32c     1C 4E 05 C1 |  if_b	add	fp, #28
1a330     00 01 80 CF 
1a334     A7 08 68 CC |  if_b	wrlong	##131076, fp
1a338     1C 4E 85 C1 |  if_b	sub	fp, #28
1a33c     6C 02 90 CD |  if_b	jmp	#LR__3016
1a340     18 4E 05 F1 | 	add	fp, #24
1a344     A7 24 02 FB | 	rdlong	local04, fp
1a348     18 4E 85 F1 | 	sub	fp, #24
1a34c     E1 F5 05 FF 
1a350     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1a354     1C 4E 05 C1 |  if_b	add	fp, #28
1a358     00 01 80 CF 
1a35c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1a360     1C 4E 85 C1 |  if_b	sub	fp, #28
1a364     44 02 90 CD |  if_b	jmp	#LR__3016
1a368     18 4E 05 F1 | 	add	fp, #24
1a36c     A7 24 02 FB | 	rdlong	local04, fp
1a370     18 4E 85 F1 | 	sub	fp, #24
1a374     3B 58 08 FF 
1a378     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1a37c     1C 4E 05 C1 |  if_b	add	fp, #28
1a380     00 01 80 CF 
1a384     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1a388     1C 4E 85 C1 |  if_b	sub	fp, #28
1a38c     1C 02 90 CD |  if_b	jmp	#LR__3016
1a390     1C 4E 05 F1 | 	add	fp, #28
1a394     80 01 80 FF 
1a398     A7 10 68 FC | 	wrlong	##196616, fp
1a39c     1C 4E 85 F1 | 	sub	fp, #28
1a3a0     08 02 90 FD | 	jmp	#LR__3016
1a3a4                 | LR__3003
1a3a4     A9 12 06 F6 | 	mov	arg01, #169
1a3a8     00 14 06 F6 | 	mov	arg02, #0
1a3ac     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a3b0     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1a3b4     02 24 16 F2 | 	cmp	local04, #2 wc
1a3b8     18 00 90 3D |  if_ae	jmp	#LR__3004
1a3bc     0C 4E 05 F1 | 	add	fp, #12
1a3c0     A7 04 48 FC | 	wrbyte	#2, fp
1a3c4     04 4E 05 F1 | 	add	fp, #4
1a3c8     A7 52 49 FC | 	wrbyte	#169, fp
1a3cc     10 4E 85 F1 | 	sub	fp, #16
1a3d0     14 00 90 FD | 	jmp	#LR__3005
1a3d4                 | LR__3004
1a3d4     0C 4E 05 F1 | 	add	fp, #12
1a3d8     A7 02 48 FC | 	wrbyte	#1, fp
1a3dc     04 4E 05 F1 | 	add	fp, #4
1a3e0     A7 02 48 FC | 	wrbyte	#1, fp
1a3e4     10 4E 85 F1 | 	sub	fp, #16
1a3e8                 | LR__3005
1a3e8                 | ' 				ty =  0x01 ; cmd =  (1) ;
1a3e8                 | ' 			}
1a3e8                 | ' 			for (tmr = 1000; tmr; tmr--) {
1a3e8     18 4E 05 F1 | 	add	fp, #24
1a3ec     01 00 80 FF 
1a3f0     A7 D0 6B FC | 	wrlong	##1000, fp
1a3f4     18 4E 85 F1 | 	sub	fp, #24
1a3f8                 | LR__3006
1a3f8     18 4E 05 F1 | 	add	fp, #24
1a3fc     A7 22 0A FB | 	rdlong	local03, fp wz
1a400     18 4E 85 F1 | 	sub	fp, #24
1a404     44 00 90 AD |  if_e	jmp	#LR__3007
1a408     10 4E 05 F1 | 	add	fp, #16
1a40c     A7 12 C2 FA | 	rdbyte	arg01, fp
1a410     10 4E 85 F1 | 	sub	fp, #16
1a414     00 14 06 F6 | 	mov	arg02, #0
1a418     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a41c     FD 24 02 F6 | 	mov	local04, result1
1a420     07 24 4E F7 | 	zerox	local04, #7 wz
1a424     24 00 90 AD |  if_e	jmp	#LR__3007
1a428     01 00 00 FF 
1a42c     E8 13 06 F6 | 	mov	arg01, ##1000
1a430     C4 98 BF FD | 	call	#__system___waitus
1a434     18 4E 05 F1 | 	add	fp, #24
1a438     A7 24 02 FB | 	rdlong	local04, fp
1a43c     01 24 86 F1 | 	sub	local04, #1
1a440     A7 24 62 FC | 	wrlong	local04, fp
1a444     18 4E 85 F1 | 	sub	fp, #24
1a448     AC FF 9F FD | 	jmp	#LR__3006
1a44c                 | LR__3007
1a44c     18 4E 05 F1 | 	add	fp, #24
1a450     A7 24 0A FB | 	rdlong	local04, fp wz
1a454     18 4E 85 F1 | 	sub	fp, #24
1a458     14 00 90 AD |  if_e	jmp	#LR__3008
1a45c     10 12 06 F6 | 	mov	arg01, #16
1a460     09 14 C6 F9 | 	decod	arg02, #9
1a464     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a468     07 FA 4D F7 | 	zerox	result1, #7 wz
1a46c     0C 00 90 AD |  if_e	jmp	#LR__3009
1a470                 | LR__3008
1a470     0C 4E 05 F1 | 	add	fp, #12
1a474     A7 00 48 FC | 	wrbyte	#0, fp
1a478     0C 4E 85 F1 | 	sub	fp, #12
1a47c                 | LR__3009
1a47c     14 24 06 FB | 	rdlong	local04, #20
1a480     18 4E 05 F1 | 	add	fp, #24
1a484     A7 24 62 FC | 	wrlong	local04, fp
1a488     18 4E 85 F1 | 	sub	fp, #24
1a48c     F0 FA 02 FF 
1a490     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1a494     18 00 90 3D |  if_ae	jmp	#LR__3010
1a498     24 4E 05 F1 | 	add	fp, #36
1a49c     A7 24 02 FB | 	rdlong	local04, fp
1a4a0     1B 24 26 F4 | 	bith	local04, #27
1a4a4     A7 24 62 FC | 	wrlong	local04, fp
1a4a8     24 4E 85 F1 | 	sub	fp, #36
1a4ac     2C 00 90 FD | 	jmp	#LR__3011
1a4b0                 | LR__3010
1a4b0     18 4E 05 F1 | 	add	fp, #24
1a4b4     A7 24 02 FB | 	rdlong	local04, fp
1a4b8     18 4E 85 F1 | 	sub	fp, #24
1a4bc     E1 F5 05 FF 
1a4c0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1a4c4     24 4E 05 C1 |  if_b	add	fp, #36
1a4c8     A7 24 02 CB |  if_b	rdlong	local04, fp
1a4cc     80 00 04 CF 
1a4d0     00 24 46 C5 |  if_b	or	local04, ##134283264
1a4d4     A7 24 62 CC |  if_b	wrlong	local04, fp
1a4d8     24 4E 85 C1 |  if_b	sub	fp, #36
1a4dc                 | LR__3011
1a4dc     18 4E 05 F1 | 	add	fp, #24
1a4e0     A7 24 02 FB | 	rdlong	local04, fp
1a4e4     18 4E 85 F1 | 	sub	fp, #24
1a4e8     F0 FA 02 FF 
1a4ec     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1a4f0     1C 4E 05 C1 |  if_b	add	fp, #28
1a4f4     00 01 80 CF 
1a4f8     A7 08 68 CC |  if_b	wrlong	##131076, fp
1a4fc     1C 4E 85 C1 |  if_b	sub	fp, #28
1a500     A8 00 90 CD |  if_b	jmp	#LR__3015
1a504     18 4E 05 F1 | 	add	fp, #24
1a508     A7 24 02 FB | 	rdlong	local04, fp
1a50c     18 4E 85 F1 | 	sub	fp, #24
1a510     68 78 04 FF 
1a514     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1a518     1C 4E 05 C1 |  if_b	add	fp, #28
1a51c     80 01 80 CF 
1a520     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1a524     1C 4E 85 C1 |  if_b	sub	fp, #28
1a528     80 00 90 CD |  if_b	jmp	#LR__3014
1a52c     18 4E 05 F1 | 	add	fp, #24
1a530     A7 24 02 FB | 	rdlong	local04, fp
1a534     18 4E 85 F1 | 	sub	fp, #24
1a538     E1 F5 05 FF 
1a53c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1a540     1C 4E 05 C1 |  if_b	add	fp, #28
1a544     00 02 80 CF 
1a548     A7 10 68 CC |  if_b	wrlong	##262152, fp
1a54c     1C 4E 85 C1 |  if_b	sub	fp, #28
1a550     58 00 90 CD |  if_b	jmp	#LR__3013
1a554     18 4E 05 F1 | 	add	fp, #24
1a558     A7 24 02 FB | 	rdlong	local04, fp
1a55c     18 4E 85 F1 | 	sub	fp, #24
1a560     59 73 07 FF 
1a564     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1a568     1C 4E 05 C1 |  if_b	add	fp, #28
1a56c     80 02 80 CF 
1a570     A7 14 68 CC |  if_b	wrlong	##327690, fp
1a574     1C 4E 85 C1 |  if_b	sub	fp, #28
1a578     30 00 90 CD |  if_b	jmp	#LR__3012
1a57c     18 4E 05 F1 | 	add	fp, #24
1a580     A7 24 02 FB | 	rdlong	local04, fp
1a584     18 4E 85 F1 | 	sub	fp, #24
1a588     D1 F0 08 FF 
1a58c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1a590     1C 4E 05 C1 |  if_b	add	fp, #28
1a594     00 03 80 CF 
1a598     A7 18 68 CC |  if_b	wrlong	##393228, fp
1a59c     1C 4E 85 F3 | 	sumc	fp, #28
1a5a0     80 03 80 3F 
1a5a4     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1a5a8     1C 4E 85 31 |  if_ae	sub	fp, #28
1a5ac                 | LR__3012
1a5ac                 | LR__3013
1a5ac                 | LR__3014
1a5ac                 | LR__3015
1a5ac                 | LR__3016
1a5ac                 | LR__3017
1a5ac     0C 4E 05 F1 | 	add	fp, #12
1a5b0     A7 24 C2 FA | 	rdbyte	local04, fp
1a5b4     01 00 00 FF 
1a5b8     21 E4 05 F1 | 	add	objptr, ##545
1a5bc     F2 24 42 FC | 	wrbyte	local04, objptr
1a5c0     A7 1E CA FA | 	rdbyte	local01, fp wz
1a5c4     00 24 06 56 |  if_ne	mov	local04, #0
1a5c8     01 24 06 A6 |  if_e	mov	local04, #1
1a5cc     20 4E 05 F1 | 	add	fp, #32
1a5d0     A7 24 42 FC | 	wrbyte	local04, fp
1a5d4     A7 24 C2 FA | 	rdbyte	local04, fp
1a5d8     2C 4E 85 F1 | 	sub	fp, #44
1a5dc     01 E4 85 F1 | 	sub	objptr, #1
1a5e0     F2 24 42 FC | 	wrbyte	local04, objptr
1a5e4     01 00 00 FF 
1a5e8     20 E4 85 F1 | 	sub	objptr, ##544
1a5ec     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0891
1a5f0     34 4E 05 F1 | 	add	fp, #52
1a5f4     A7 12 02 FB | 	rdlong	arg01, fp
1a5f8     18 4E 85 F1 | 	sub	fp, #24
1a5fc     A7 14 02 FB | 	rdlong	arg02, fp
1a600     09 15 12 FC | 	wxpin	arg02, arg01
1a604     1C 4E 05 F1 | 	add	fp, #28
1a608     A7 12 02 FB | 	rdlong	arg01, fp
1a60c     14 4E 85 F1 | 	sub	fp, #20
1a610     A7 14 02 FB | 	rdlong	arg02, fp
1a614     09 15 02 FC | 	wrpin	arg02, arg01
1a618                 | ' 
1a618                 | ' 		}
1a618                 | ' 	}
1a618                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1a618                 | ' 	CardType = ty;
1a618                 | ' 	s = ty ? 0 :  0x01 ;
1a618                 | ' 	Stat = s;
1a618                 | ' 
1a618                 | ' 	deselect();
1a618                 | ' 
1a618                 | ' 
1a618                 | ' 	_wxpin( PIN_CLK, ck_div );
1a618                 | ' 	_wrpin( PIN_DI, spm_tx );
1a618                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1a618                 | ' 	return s;
1a618     08 4E 05 F1 | 	add	fp, #8
1a61c     A7 FA C1 FA | 	rdbyte	result1, fp
1a620     2C 4E 85 F1 | 	sub	fp, #44
1a624                 | LR__3018
1a624     A7 F0 03 F6 | 	mov	ptra, fp
1a628     B2 00 A0 FD | 	call	#popregs_
1a62c                 | _fatfs_cc_disk_initialize_ret
1a62c     2D 00 64 FD | 	ret
1a630                 | 
1a630                 | _fatfs_cc_disk_read
1a630     05 4A 05 F6 | 	mov	COUNT_, #5
1a634     A8 00 A0 FD | 	call	#pushregs_
1a638     0A 1F 02 F6 | 	mov	local01, arg02
1a63c     0B 21 02 F6 | 	mov	local02, arg03
1a640     0C 23 02 F6 | 	mov	local03, arg04
1a644     00 12 0E F2 | 	cmp	arg01, #0 wz
1a648     01 FA 05 56 |  if_ne	mov	result1, #1
1a64c                 | ' 
1a64c                 | ' 	return Stat;
1a64c     01 00 00 AF 
1a650     20 E4 05 A1 |  if_e	add	objptr, ##544
1a654     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1a658     01 00 00 AF 
1a65c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1a660     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a664     01 FA CD F7 | 	test	result1, #1 wz
1a668     03 FA 05 56 |  if_ne	mov	result1, #3
1a66c     84 00 90 5D |  if_ne	jmp	#LR__3022
1a670     01 00 00 FF 
1a674     21 E4 05 F1 | 	add	objptr, ##545
1a678     F2 24 C2 FA | 	rdbyte	local04, objptr
1a67c     01 00 00 FF 
1a680     21 E4 85 F1 | 	sub	objptr, ##545
1a684     08 24 CE F7 | 	test	local04, #8 wz
1a688     09 20 66 A0 |  if_e	shl	local02, #9
1a68c     02 22 16 F2 | 	cmp	local03, #2 wc
1a690     12 24 06 36 |  if_ae	mov	local04, #18
1a694     11 24 06 C6 |  if_b	mov	local04, #17
1a698     10 15 02 F6 | 	mov	arg02, local02
1a69c     12 13 02 F6 | 	mov	arg01, local04
1a6a0     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a6a4     FD 26 02 F6 | 	mov	local05, result1
1a6a8     07 26 4E F7 | 	zerox	local05, #7 wz
1a6ac     30 00 90 5D |  if_ne	jmp	#LR__3021
1a6b0                 | ' 		do {
1a6b0                 | LR__3020
1a6b0     0F 13 02 F6 | 	mov	arg01, local01
1a6b4     09 14 C6 F9 | 	decod	arg02, #9
1a6b8     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0899
1a6bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a6c0     01 00 00 5F 
1a6c4     00 1E 06 51 |  if_ne	add	local01, ##512
1a6c8     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3020
1a6cc     12 25 E2 F8 | 	getbyte	local04, local04, #0
1a6d0     12 24 0E F2 | 	cmp	local04, #18 wz
1a6d4     0C 12 06 A6 |  if_e	mov	arg01, #12
1a6d8     00 14 06 A6 |  if_e	mov	arg02, #0
1a6dc     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0905
1a6e0                 | LR__3021
1a6e0     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0891
1a6e4                 | ' 	}
1a6e4                 | ' 	deselect();
1a6e4                 | ' 
1a6e4                 | ' 	return count ? RES_ERROR : RES_OK;
1a6e4     00 22 0E F2 | 	cmp	local03, #0 wz
1a6e8     01 26 06 56 |  if_ne	mov	local05, #1
1a6ec     00 26 06 A6 |  if_e	mov	local05, #0
1a6f0     13 FB 01 F6 | 	mov	result1, local05
1a6f4                 | LR__3022
1a6f4     A7 F0 03 F6 | 	mov	ptra, fp
1a6f8     B2 00 A0 FD | 	call	#popregs_
1a6fc                 | _fatfs_cc_disk_read_ret
1a6fc     2D 00 64 FD | 	ret
1a700                 | 
1a700                 | _fatfs_cc_disk_write
1a700     04 4A 05 F6 | 	mov	COUNT_, #4
1a704     A8 00 A0 FD | 	call	#pushregs_
1a708     0A 1F 02 F6 | 	mov	local01, arg02
1a70c     0C 21 02 F6 | 	mov	local02, arg04
1a710     0B 23 02 F6 | 	mov	local03, arg03
1a714     00 12 0E F2 | 	cmp	arg01, #0 wz
1a718     01 FA 05 56 |  if_ne	mov	result1, #1
1a71c                 | ' 
1a71c                 | ' 	return Stat;
1a71c     01 00 00 AF 
1a720     20 E4 05 A1 |  if_e	add	objptr, ##544
1a724     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1a728     01 00 00 AF 
1a72c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1a730     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a734     01 FA CD F7 | 	test	result1, #1 wz
1a738     03 FA 05 56 |  if_ne	mov	result1, #3
1a73c     D4 00 90 5D |  if_ne	jmp	#LR__3034
1a740     01 00 00 FF 
1a744     21 E4 05 F1 | 	add	objptr, ##545
1a748     F2 16 C2 FA | 	rdbyte	arg03, objptr
1a74c     01 00 00 FF 
1a750     21 E4 85 F1 | 	sub	objptr, ##545
1a754     08 16 CE F7 | 	test	arg03, #8 wz
1a758     09 22 66 A0 |  if_e	shl	local03, #9
1a75c     01 20 0E F2 | 	cmp	local02, #1 wz
1a760     30 00 90 5D |  if_ne	jmp	#LR__3030
1a764     18 12 06 F6 | 	mov	arg01, #24
1a768     11 15 02 F6 | 	mov	arg02, local03
1a76c     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a770     FD 24 02 F6 | 	mov	local04, result1
1a774     07 24 4E F7 | 	zerox	local04, #7 wz
1a778     84 00 90 5D |  if_ne	jmp	#LR__3033
1a77c     0F 13 02 F6 | 	mov	arg01, local01
1a780     FE 14 06 F6 | 	mov	arg02, #254
1a784     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0901
1a788     00 FA 0D F2 | 	cmp	result1, #0 wz
1a78c     00 20 06 56 |  if_ne	mov	local02, #0
1a790     6C 00 90 FD | 	jmp	#LR__3033
1a794                 | LR__3030
1a794     01 00 00 FF 
1a798     21 E4 05 F1 | 	add	objptr, ##545
1a79c     F2 24 C2 FA | 	rdbyte	local04, objptr
1a7a0     01 00 00 FF 
1a7a4     21 E4 85 F1 | 	sub	objptr, ##545
1a7a8     06 24 CE F7 | 	test	local04, #6 wz
1a7ac     97 12 06 56 |  if_ne	mov	arg01, #151
1a7b0     10 15 02 56 |  if_ne	mov	arg02, local02
1a7b4     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0905
1a7b8     11 15 02 F6 | 	mov	arg02, local03
1a7bc     19 12 06 F6 | 	mov	arg01, #25
1a7c0     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a7c4     FD 24 02 F6 | 	mov	local04, result1
1a7c8     07 24 4E F7 | 	zerox	local04, #7 wz
1a7cc     30 00 90 5D |  if_ne	jmp	#LR__3032
1a7d0                 | ' 			do {
1a7d0                 | LR__3031
1a7d0     0F 13 02 F6 | 	mov	arg01, local01
1a7d4     FC 14 06 F6 | 	mov	arg02, #252
1a7d8     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0901
1a7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a7e0     01 00 00 5F 
1a7e4     00 1E 06 51 |  if_ne	add	local01, ##512
1a7e8     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3031
1a7ec     00 12 06 F6 | 	mov	arg01, #0
1a7f0     FD 14 06 F6 | 	mov	arg02, #253
1a7f4     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0901
1a7f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a7fc     01 20 06 A6 |  if_e	mov	local02, #1
1a800                 | LR__3032
1a800                 | LR__3033
1a800     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0891
1a804                 | ' 				count = 1;
1a804                 | ' 		}
1a804                 | ' 	}
1a804                 | ' 	deselect();
1a804                 | ' 
1a804                 | ' 	return count ? RES_ERROR : RES_OK;
1a804     00 20 0E F2 | 	cmp	local02, #0 wz
1a808     01 24 06 56 |  if_ne	mov	local04, #1
1a80c     00 24 06 A6 |  if_e	mov	local04, #0
1a810     12 FB 01 F6 | 	mov	result1, local04
1a814                 | LR__3034
1a814     A7 F0 03 F6 | 	mov	ptra, fp
1a818     B2 00 A0 FD | 	call	#popregs_
1a81c                 | _fatfs_cc_disk_write_ret
1a81c     2D 00 64 FD | 	ret
1a820                 | 
1a820                 | _fatfs_cc_disk_ioctl
1a820     01 4A 05 F6 | 	mov	COUNT_, #1
1a824     A8 00 A0 FD | 	call	#pushregs_
1a828     30 F0 07 F1 | 	add	ptra, #48
1a82c     04 4E 05 F1 | 	add	fp, #4
1a830     A7 12 42 FC | 	wrbyte	arg01, fp
1a834     04 4E 05 F1 | 	add	fp, #4
1a838     A7 14 42 FC | 	wrbyte	arg02, fp
1a83c     04 4E 05 F1 | 	add	fp, #4
1a840     A7 16 62 FC | 	wrlong	arg03, fp
1a844     08 4E 85 F1 | 	sub	fp, #8
1a848     A7 12 CA FA | 	rdbyte	arg01, fp wz
1a84c     04 4E 85 F1 | 	sub	fp, #4
1a850     01 FA 05 56 |  if_ne	mov	result1, #1
1a854                 | ' 
1a854                 | ' 	return Stat;
1a854     01 00 00 AF 
1a858     20 E4 05 A1 |  if_e	add	objptr, ##544
1a85c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1a860     01 00 00 AF 
1a864     20 E4 85 A1 |  if_e	sub	objptr, ##544
1a868     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a86c     01 FA CD F7 | 	test	result1, #1 wz
1a870     03 FA 05 56 |  if_ne	mov	result1, #3
1a874     E4 01 90 5D |  if_ne	jmp	#LR__3048
1a878     10 4E 05 F1 | 	add	fp, #16
1a87c     A7 02 68 FC | 	wrlong	#1, fp
1a880                 | ' 
1a880                 | ' 	res = RES_ERROR;
1a880                 | ' 	switch (ctrl) {
1a880     08 4E 85 F1 | 	sub	fp, #8
1a884     A7 1E C2 FA | 	rdbyte	local01, fp
1a888     08 4E 85 F1 | 	sub	fp, #8
1a88c     04 1E 26 F3 | 	fle	local01, #4
1a890     30 1E 62 FD | 	jmprel	local01
1a894                 | LR__3040
1a894     10 00 90 FD | 	jmp	#LR__3041
1a898     24 00 90 FD | 	jmp	#LR__3042
1a89c     A0 01 90 FD | 	jmp	#LR__3046
1a8a0     80 01 90 FD | 	jmp	#LR__3045
1a8a4     98 01 90 FD | 	jmp	#LR__3046
1a8a8                 | LR__3041
1a8a8     B0 79 B0 FD | 	call	#_fatfs_cc_select_0895
1a8ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1a8b0     10 4E 05 51 |  if_ne	add	fp, #16
1a8b4     A7 00 68 5C |  if_ne	wrlong	#0, fp
1a8b8     10 4E 85 51 |  if_ne	sub	fp, #16
1a8bc                 | ' 			break;
1a8bc     8C 01 90 FD | 	jmp	#LR__3047
1a8c0                 | LR__3042
1a8c0     09 12 06 F6 | 	mov	arg01, #9
1a8c4     00 14 06 F6 | 	mov	arg02, #0
1a8c8     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a8cc     FD 1E 02 F6 | 	mov	local01, result1
1a8d0     07 1E 4E F7 | 	zerox	local01, #7 wz
1a8d4     74 01 90 5D |  if_ne	jmp	#LR__3047
1a8d8     18 4E 05 F1 | 	add	fp, #24
1a8dc     A7 12 02 F6 | 	mov	arg01, fp
1a8e0     18 4E 85 F1 | 	sub	fp, #24
1a8e4     10 14 06 F6 | 	mov	arg02, #16
1a8e8     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0899
1a8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1a8f0     58 01 90 AD |  if_e	jmp	#LR__3047
1a8f4     18 4E 05 F1 | 	add	fp, #24
1a8f8     A7 1E C2 FA | 	rdbyte	local01, fp
1a8fc     18 4E 85 F1 | 	sub	fp, #24
1a900     06 1E 46 F0 | 	shr	local01, #6
1a904     01 1E 0E F2 | 	cmp	local01, #1 wz
1a908     5C 00 90 5D |  if_ne	jmp	#LR__3043
1a90c     21 4E 05 F1 | 	add	fp, #33
1a910     A7 1E C2 FA | 	rdbyte	local01, fp
1a914     01 4E 85 F1 | 	sub	fp, #1
1a918     A7 FA C1 FA | 	rdbyte	result1, fp
1a91c     FD FA 31 F9 | 	getword	result1, result1, #0
1a920     08 FA 65 F0 | 	shl	result1, #8
1a924     FD 1E 02 F1 | 	add	local01, result1
1a928     01 4E 85 F1 | 	sub	fp, #1
1a92c     A7 FA C1 FA | 	rdbyte	result1, fp
1a930     3F FA 05 F5 | 	and	result1, #63
1a934     10 FA 65 F0 | 	shl	result1, #16
1a938     FD 1E 02 F1 | 	add	local01, result1
1a93c     01 1E 06 F1 | 	add	local01, #1
1a940     09 4E 05 F1 | 	add	fp, #9
1a944     A7 1E 62 FC | 	wrlong	local01, fp
1a948     1C 4E 85 F1 | 	sub	fp, #28
1a94c     A7 1E 02 FB | 	rdlong	local01, fp
1a950     1C 4E 05 F1 | 	add	fp, #28
1a954     A7 FA 01 FB | 	rdlong	result1, fp
1a958     28 4E 85 F1 | 	sub	fp, #40
1a95c     0A FA 65 F0 | 	shl	result1, #10
1a960     0F FB 61 FC | 	wrlong	result1, local01
1a964     AC 00 90 FD | 	jmp	#LR__3044
1a968                 | LR__3043
1a968     1D 4E 05 F1 | 	add	fp, #29
1a96c     A7 1E C2 FA | 	rdbyte	local01, fp
1a970     0F 1F 42 F8 | 	getnib	local01, local01, #0
1a974     05 4E 05 F1 | 	add	fp, #5
1a978     A7 FA C1 FA | 	rdbyte	result1, fp
1a97c     80 FA 05 F5 | 	and	result1, #128
1a980     07 FA C5 F0 | 	sar	result1, #7
1a984     FD 1E 02 F1 | 	add	local01, result1
1a988     01 4E 85 F1 | 	sub	fp, #1
1a98c     A7 FA C1 FA | 	rdbyte	result1, fp
1a990     03 FA 05 F5 | 	and	result1, #3
1a994     01 FA 65 F0 | 	shl	result1, #1
1a998     FD 1E 02 F1 | 	add	local01, result1
1a99c     02 1E 06 F1 | 	add	local01, #2
1a9a0     0D 4E 85 F1 | 	sub	fp, #13
1a9a4     A7 1E 42 FC | 	wrbyte	local01, fp
1a9a8     0C 4E 05 F1 | 	add	fp, #12
1a9ac     A7 1E C2 FA | 	rdbyte	local01, fp
1a9b0     06 1E 46 F0 | 	shr	local01, #6
1a9b4     01 4E 85 F1 | 	sub	fp, #1
1a9b8     A7 FA C1 FA | 	rdbyte	result1, fp
1a9bc     FD FA 31 F9 | 	getword	result1, result1, #0
1a9c0     02 FA 65 F0 | 	shl	result1, #2
1a9c4     FD 1E 02 F1 | 	add	local01, result1
1a9c8     01 4E 85 F1 | 	sub	fp, #1
1a9cc     A7 FA C1 FA | 	rdbyte	result1, fp
1a9d0     03 FA 05 F5 | 	and	result1, #3
1a9d4     FD FA 31 F9 | 	getword	result1, result1, #0
1a9d8     0A FA 65 F0 | 	shl	result1, #10
1a9dc     FD 1E 02 F1 | 	add	local01, result1
1a9e0     01 1E 06 F1 | 	add	local01, #1
1a9e4     0A 4E 05 F1 | 	add	fp, #10
1a9e8     A7 1E 62 FC | 	wrlong	local01, fp
1a9ec     1C 4E 85 F1 | 	sub	fp, #28
1a9f0     A7 1E 02 FB | 	rdlong	local01, fp
1a9f4     1C 4E 05 F1 | 	add	fp, #28
1a9f8     A7 FA 01 FB | 	rdlong	result1, fp
1a9fc     14 4E 85 F1 | 	sub	fp, #20
1aa00     A7 16 C2 FA | 	rdbyte	arg03, fp
1aa04     14 4E 85 F1 | 	sub	fp, #20
1aa08     09 16 86 F1 | 	sub	arg03, #9
1aa0c     0B FB 61 F0 | 	shl	result1, arg03
1aa10     0F FB 61 FC | 	wrlong	result1, local01
1aa14                 | LR__3044
1aa14     10 4E 05 F1 | 	add	fp, #16
1aa18     A7 00 68 FC | 	wrlong	#0, fp
1aa1c     10 4E 85 F1 | 	sub	fp, #16
1aa20                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1aa20                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1aa20                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1aa20                 | ' 				}
1aa20                 | ' 				res = RES_OK;
1aa20                 | ' 			}
1aa20                 | ' 			break;
1aa20     28 00 90 FD | 	jmp	#LR__3047
1aa24                 | LR__3045
1aa24     0C 4E 05 F1 | 	add	fp, #12
1aa28     A7 1E 02 FB | 	rdlong	local01, fp
1aa2c     0F 01 69 FC | 	wrlong	#128, local01
1aa30     04 4E 05 F1 | 	add	fp, #4
1aa34     A7 00 68 FC | 	wrlong	#0, fp
1aa38     10 4E 85 F1 | 	sub	fp, #16
1aa3c                 | ' 			*(DWORD*)buff = 128;
1aa3c                 | ' 			res = RES_OK;
1aa3c                 | ' 			break;
1aa3c     0C 00 90 FD | 	jmp	#LR__3047
1aa40                 | LR__3046
1aa40     10 4E 05 F1 | 	add	fp, #16
1aa44     A7 08 68 FC | 	wrlong	#4, fp
1aa48     10 4E 85 F1 | 	sub	fp, #16
1aa4c                 | LR__3047
1aa4c     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0891
1aa50                 | ' 			res = RES_PARERR;
1aa50                 | ' 	}
1aa50                 | ' 
1aa50                 | ' 	deselect();
1aa50                 | ' 
1aa50                 | ' 	return res;
1aa50     10 4E 05 F1 | 	add	fp, #16
1aa54     A7 FA 01 FB | 	rdlong	result1, fp
1aa58     10 4E 85 F1 | 	sub	fp, #16
1aa5c                 | LR__3048
1aa5c     A7 F0 03 F6 | 	mov	ptra, fp
1aa60     B2 00 A0 FD | 	call	#popregs_
1aa64                 | _fatfs_cc_disk_ioctl_ret
1aa64     2D 00 64 FD | 	ret
1aa68                 | 
1aa68                 | _fatfs_cc_disk_setpins
1aa68     00 12 0E F2 | 	cmp	arg01, #0 wz
1aa6c     01 FA 65 56 |  if_ne	neg	result1, #1
1aa70     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1aa74     01 00 00 FF 
1aa78     10 E4 05 F1 | 	add	objptr, ##528
1aa7c     F2 14 62 FC | 	wrlong	arg02, objptr
1aa80     04 E4 05 F1 | 	add	objptr, #4
1aa84     F2 16 62 FC | 	wrlong	arg03, objptr
1aa88     04 E4 05 F1 | 	add	objptr, #4
1aa8c     F2 18 62 FC | 	wrlong	arg04, objptr
1aa90     04 E4 05 F1 | 	add	objptr, #4
1aa94     F2 1A 62 FC | 	wrlong	arg05, objptr
1aa98     01 00 00 FF 
1aa9c     1C E4 85 F1 | 	sub	objptr, ##540
1aaa0     00 FA 05 F6 | 	mov	result1, #0
1aaa4                 | _fatfs_cc_disk_setpins_ret
1aaa4     2D 00 64 FD | 	ret
1aaa8                 | 
1aaa8                 | _fatfs_cc_tchar2uni
1aaa8     09 01 02 FB | 	rdlong	_var01, arg01
1aaac     00 03 02 F6 | 	mov	_var02, _var01
1aab0     01 00 06 F1 | 	add	_var01, #1
1aab4     00 05 02 F6 | 	mov	_var03, _var01
1aab8     01 07 C2 FA | 	rdbyte	_var04, _var02
1aabc     80 06 CE F7 | 	test	_var04, #128 wz
1aac0     E8 00 90 AD |  if_e	jmp	#LR__3057
1aac4     03 09 02 F6 | 	mov	_var05, _var04
1aac8     E0 08 06 F5 | 	and	_var05, #224
1aacc     C0 08 0E F2 | 	cmp	_var05, #192 wz
1aad0     1F 06 06 A5 |  if_e	and	_var04, #31
1aad4     01 0A 06 A6 |  if_e	mov	_var06, #1
1aad8     34 00 90 AD |  if_e	jmp	#LR__3051
1aadc     03 09 02 F6 | 	mov	_var05, _var04
1aae0     F0 08 06 F5 | 	and	_var05, #240
1aae4     E0 08 0E F2 | 	cmp	_var05, #224 wz
1aae8     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1aaec     02 0A 06 A6 |  if_e	mov	_var06, #2
1aaf0     1C 00 90 AD |  if_e	jmp	#LR__3050
1aaf4     03 09 02 F6 | 	mov	_var05, _var04
1aaf8     F8 08 06 F5 | 	and	_var05, #248
1aafc     F0 08 0E F2 | 	cmp	_var05, #240 wz
1ab00     07 06 06 A5 |  if_e	and	_var04, #7
1ab04     03 0A 06 A6 |  if_e	mov	_var06, #3
1ab08                 | ' 			return 0xFFFFFFFF;
1ab08     01 FA 65 56 |  if_ne	neg	result1, #1
1ab0c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1ab10                 | LR__3050
1ab10                 | LR__3051
1ab10                 | ' 		}
1ab10                 | ' 		do {
1ab10                 | LR__3052
1ab10     02 0D C2 FA | 	rdbyte	_var07, _var03
1ab14     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1ab18     C0 08 06 F5 | 	and	_var05, #192
1ab1c     80 08 0E F2 | 	cmp	_var05, #128 wz
1ab20     01 04 06 F1 | 	add	_var03, #1
1ab24     01 FA 65 56 |  if_ne	neg	result1, #1
1ab28     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1ab2c     06 06 66 F0 | 	shl	_var04, #6
1ab30     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1ab34     3F 02 06 F5 | 	and	_var02, #63
1ab38     01 07 42 F5 | 	or	_var04, _var02
1ab3c     F4 0B 6E FB | 	djnz	_var06, #LR__3052
1ab40     80 06 16 F2 | 	cmp	_var04, #128 wc
1ab44     24 00 90 CD |  if_b	jmp	#LR__3054
1ab48     6C 00 00 FF 
1ab4c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1ab50     0C 00 90 CD |  if_b	jmp	#LR__3053
1ab54     70 00 00 FF 
1ab58     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1ab5c     0C 00 90 CD |  if_b	jmp	#LR__3054
1ab60                 | LR__3053
1ab60     80 08 00 FF 
1ab64     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1ab68     08 00 90 CD |  if_b	jmp	#LR__3055
1ab6c                 | LR__3054
1ab6c     01 FA 65 F6 | 	neg	result1, #1
1ab70     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1ab74                 | LR__3055
1ab74     80 00 00 FF 
1ab78     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1ab7c     2C 00 90 CD |  if_b	jmp	#LR__3056
1ab80     03 03 02 F6 | 	mov	_var02, _var04
1ab84     80 00 00 FF 
1ab88     00 02 86 F1 | 	sub	_var02, ##65536
1ab8c     06 02 66 F0 | 	shl	_var02, #6
1ab90     80 FF 01 FF 
1ab94     00 02 06 F5 | 	and	_var02, ##67043328
1ab98     6E 00 6C FF 
1ab9c     00 08 06 F6 | 	mov	_var05, ##-671032320
1aba0     01 09 42 F5 | 	or	_var05, _var02
1aba4     09 06 46 F7 | 	zerox	_var04, #9
1aba8     04 07 42 F5 | 	or	_var04, _var05
1abac                 | LR__3056
1abac                 | LR__3057
1abac     09 05 62 FC | 	wrlong	_var03, arg01
1abb0                 | ' 	}
1abb0                 | ' #line 811 "ff.c"
1abb0                 | ' 	*str = p;
1abb0                 | ' 	return uc;
1abb0     03 FB 01 F6 | 	mov	result1, _var04
1abb4                 | _fatfs_cc_tchar2uni_ret
1abb4     2D 00 64 FD | 	ret
1abb8                 | 
1abb8                 | _fatfs_cc_put_utf
1abb8     80 12 16 F2 | 	cmp	arg01, #128 wc
1abbc     18 00 90 3D |  if_ae	jmp	#LR__3060
1abc0     01 16 16 F2 | 	cmp	arg03, #1 wc
1abc4     00 FA 05 C6 |  if_b	mov	result1, #0
1abc8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1abcc     0A 13 42 FC | 	wrbyte	arg01, arg02
1abd0                 | ' 		*buf = (TCHAR)chr;
1abd0                 | ' 		return 1;
1abd0     01 FA 05 F6 | 	mov	result1, #1
1abd4     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1abd8                 | LR__3060
1abd8     04 00 00 FF 
1abdc     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1abe0     40 00 90 3D |  if_ae	jmp	#LR__3061
1abe4     02 16 16 F2 | 	cmp	arg03, #2 wc
1abe8     00 FA 05 C6 |  if_b	mov	result1, #0
1abec     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1abf0     09 FB 01 F6 | 	mov	result1, arg01
1abf4     06 FA 45 F0 | 	shr	result1, #6
1abf8     1F FA 05 F5 | 	and	result1, #31
1abfc     C0 16 06 F6 | 	mov	arg03, #192
1ac00     FD 16 42 F5 | 	or	arg03, result1
1ac04     0A 17 42 FC | 	wrbyte	arg03, arg02
1ac08     01 14 06 F1 | 	add	arg02, #1
1ac0c     3F 12 06 F5 | 	and	arg01, #63
1ac10     80 FA 05 F6 | 	mov	result1, #128
1ac14     09 FB 41 F5 | 	or	result1, arg01
1ac18     0A FB 41 FC | 	wrbyte	result1, arg02
1ac1c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1ac1c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ac1c                 | ' 		return 2;
1ac1c     02 FA 05 F6 | 	mov	result1, #2
1ac20     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ac24                 | LR__3061
1ac24     80 00 00 FF 
1ac28     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1ac2c     70 00 90 3D |  if_ae	jmp	#LR__3064
1ac30     03 16 16 F2 | 	cmp	arg03, #3 wc
1ac34     18 00 90 CD |  if_b	jmp	#LR__3062
1ac38     6C 00 00 FF 
1ac3c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1ac40     14 00 90 CD |  if_b	jmp	#LR__3063
1ac44     70 00 00 FF 
1ac48     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1ac4c     08 00 90 3D |  if_ae	jmp	#LR__3063
1ac50                 | LR__3062
1ac50     00 FA 05 F6 | 	mov	result1, #0
1ac54     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ac58                 | LR__3063
1ac58     09 FB 59 F8 | 	getnib	result1, arg01, #3
1ac5c     E0 16 06 F6 | 	mov	arg03, #224
1ac60     FD 16 42 F5 | 	or	arg03, result1
1ac64     0A 17 42 FC | 	wrbyte	arg03, arg02
1ac68     01 14 06 F1 | 	add	arg02, #1
1ac6c     09 FB 01 F6 | 	mov	result1, arg01
1ac70     06 FA 45 F0 | 	shr	result1, #6
1ac74     3F FA 05 F5 | 	and	result1, #63
1ac78     80 16 06 F6 | 	mov	arg03, #128
1ac7c     FD 16 42 F5 | 	or	arg03, result1
1ac80     0A 17 42 FC | 	wrbyte	arg03, arg02
1ac84     01 14 06 F1 | 	add	arg02, #1
1ac88     3F 12 06 F5 | 	and	arg01, #63
1ac8c     80 FA 05 F6 | 	mov	result1, #128
1ac90     09 FB 41 F5 | 	or	result1, arg01
1ac94     0A FB 41 FC | 	wrbyte	result1, arg02
1ac98                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1ac98                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1ac98                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ac98                 | ' 		return 3;
1ac98     03 FA 05 F6 | 	mov	result1, #3
1ac9c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1aca0                 | LR__3064
1aca0     04 16 16 F2 | 	cmp	arg03, #4 wc
1aca4     00 FA 05 C6 |  if_b	mov	result1, #0
1aca8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1acac     09 01 02 F6 | 	mov	_var01, arg01
1acb0     E0 01 06 F4 | 	bitl	_var01, #480
1acb4     00 00 6C FF 
1acb8     00 00 86 F1 | 	sub	_var01, ##-671088640
1acbc     06 00 46 F0 | 	shr	_var01, #6
1acc0     09 13 32 F9 | 	getword	arg01, arg01, #0
1acc4     6E 00 00 FF 
1acc8     00 12 86 F1 | 	sub	arg01, ##56320
1accc     00 08 00 FF 
1acd0     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1acd4     02 00 00 CF 
1acd8     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1acdc     00 FA 05 36 |  if_ae	mov	result1, #0
1ace0     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1ace4     09 01 42 F5 | 	or	_var01, arg01
1ace8     80 00 00 FF 
1acec     00 00 06 F1 | 	add	_var01, ##65536
1acf0     00 FB 01 F6 | 	mov	result1, _var01
1acf4     12 FA 45 F0 | 	shr	result1, #18
1acf8     07 FA 05 F5 | 	and	result1, #7
1acfc     F0 16 06 F6 | 	mov	arg03, #240
1ad00     FD 16 42 F5 | 	or	arg03, result1
1ad04     0A 17 42 FC | 	wrbyte	arg03, arg02
1ad08     01 14 06 F1 | 	add	arg02, #1
1ad0c     00 FB 01 F6 | 	mov	result1, _var01
1ad10     0C FA 45 F0 | 	shr	result1, #12
1ad14     3F FA 05 F5 | 	and	result1, #63
1ad18     80 16 06 F6 | 	mov	arg03, #128
1ad1c     FD 16 42 F5 | 	or	arg03, result1
1ad20     0A 17 42 FC | 	wrbyte	arg03, arg02
1ad24     01 14 06 F1 | 	add	arg02, #1
1ad28     00 FB 01 F6 | 	mov	result1, _var01
1ad2c     06 FA 45 F0 | 	shr	result1, #6
1ad30     3F FA 05 F5 | 	and	result1, #63
1ad34     80 16 06 F6 | 	mov	arg03, #128
1ad38     FD 16 42 F5 | 	or	arg03, result1
1ad3c     0A 17 42 FC | 	wrbyte	arg03, arg02
1ad40     01 14 06 F1 | 	add	arg02, #1
1ad44     3F 00 06 F5 | 	and	_var01, #63
1ad48     80 FA 05 F6 | 	mov	result1, #128
1ad4c     00 FB 41 F5 | 	or	result1, _var01
1ad50     0A FB 41 FC | 	wrbyte	result1, arg02
1ad54                 | ' 	chr = (hc | chr) + 0x10000;
1ad54                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1ad54                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1ad54                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1ad54                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ad54                 | ' 	return 4;
1ad54     04 FA 05 F6 | 	mov	result1, #4
1ad58                 | _fatfs_cc_put_utf_ret
1ad58     2D 00 64 FD | 	ret
1ad5c                 | 
1ad5c                 | _fatfs_cc_sync_window
1ad5c     02 4A 05 F6 | 	mov	COUNT_, #2
1ad60     A8 00 A0 FD | 	call	#pushregs_
1ad64     09 1F 02 F6 | 	mov	local01, arg01
1ad68     00 20 06 F6 | 	mov	local02, #0
1ad6c     03 1E 06 F1 | 	add	local01, #3
1ad70     0F FB C9 FA | 	rdbyte	result1, local01 wz
1ad74     03 1E 86 F1 | 	sub	local01, #3
1ad78     A4 00 90 AD |  if_e	jmp	#LR__3072
1ad7c     01 1E 06 F1 | 	add	local01, #1
1ad80     0F 13 C2 FA | 	rdbyte	arg01, local01
1ad84     33 1E 06 F1 | 	add	local01, #51
1ad88     0F 15 02 F6 | 	mov	arg02, local01
1ad8c     04 1E 86 F1 | 	sub	local01, #4
1ad90     0F 17 02 FB | 	rdlong	arg03, local01
1ad94     30 1E 86 F1 | 	sub	local01, #48
1ad98     01 18 06 F6 | 	mov	arg04, #1
1ad9c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1ada0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ada4     74 00 90 5D |  if_ne	jmp	#LR__3070
1ada8     03 1E 06 F1 | 	add	local01, #3
1adac     0F 01 48 FC | 	wrbyte	#0, local01
1adb0     2D 1E 06 F1 | 	add	local01, #45
1adb4     0F FB 01 FB | 	rdlong	result1, local01
1adb8     0C 1E 86 F1 | 	sub	local01, #12
1adbc     0F 19 02 FB | 	rdlong	arg04, local01
1adc0     0C FB 81 F1 | 	sub	result1, arg04
1adc4     08 1E 86 F1 | 	sub	local01, #8
1adc8     0F 19 02 FB | 	rdlong	arg04, local01
1adcc     1C 1E 86 F1 | 	sub	local01, #28
1add0     0C FB 11 F2 | 	cmp	result1, arg04 wc
1add4     48 00 90 3D |  if_ae	jmp	#LR__3071
1add8     02 1E 06 F1 | 	add	local01, #2
1addc     0F 19 C2 FA | 	rdbyte	arg04, local01
1ade0     02 1E 86 F1 | 	sub	local01, #2
1ade4     02 18 0E F2 | 	cmp	arg04, #2 wz
1ade8     34 00 90 5D |  if_ne	jmp	#LR__3071
1adec     01 1E 06 F1 | 	add	local01, #1
1adf0     0F 13 C2 FA | 	rdbyte	arg01, local01
1adf4     33 1E 06 F1 | 	add	local01, #51
1adf8     0F 15 02 F6 | 	mov	arg02, local01
1adfc     04 1E 86 F1 | 	sub	local01, #4
1ae00     0F 17 02 FB | 	rdlong	arg03, local01
1ae04     14 1E 86 F1 | 	sub	local01, #20
1ae08     0F 1F 02 FB | 	rdlong	local01, local01
1ae0c     0F 17 02 F1 | 	add	arg03, local01
1ae10     01 18 06 F6 | 	mov	arg04, #1
1ae14     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1ae18     04 00 90 FD | 	jmp	#LR__3071
1ae1c                 | LR__3070
1ae1c     01 20 06 F6 | 	mov	local02, #1
1ae20                 | LR__3071
1ae20                 | LR__3072
1ae20                 | ' 			res = FR_DISK_ERR;
1ae20                 | ' 		}
1ae20                 | ' 	}
1ae20                 | ' 	return res;
1ae20     10 FB 01 F6 | 	mov	result1, local02
1ae24     A7 F0 03 F6 | 	mov	ptra, fp
1ae28     B2 00 A0 FD | 	call	#popregs_
1ae2c                 | _fatfs_cc_sync_window_ret
1ae2c     2D 00 64 FD | 	ret
1ae30                 | 
1ae30                 | _fatfs_cc_move_window
1ae30     03 4A 05 F6 | 	mov	COUNT_, #3
1ae34     A8 00 A0 FD | 	call	#pushregs_
1ae38     09 1F 02 F6 | 	mov	local01, arg01
1ae3c     0A 21 02 F6 | 	mov	local02, arg02
1ae40     00 22 06 F6 | 	mov	local03, #0
1ae44     30 1E 06 F1 | 	add	local01, #48
1ae48     0F 19 02 FB | 	rdlong	arg04, local01
1ae4c     30 1E 86 F1 | 	sub	local01, #48
1ae50     0C 21 0A F2 | 	cmp	local02, arg04 wz
1ae54     40 00 90 AD |  if_e	jmp	#LR__3081
1ae58     0F 13 02 F6 | 	mov	arg01, local01
1ae5c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1ae60     FD 22 0A F6 | 	mov	local03, result1 wz
1ae64     30 00 90 5D |  if_ne	jmp	#LR__3080
1ae68     01 1E 06 F1 | 	add	local01, #1
1ae6c     0F 13 C2 FA | 	rdbyte	arg01, local01
1ae70     33 1E 06 F1 | 	add	local01, #51
1ae74     0F 15 02 F6 | 	mov	arg02, local01
1ae78     10 17 02 F6 | 	mov	arg03, local02
1ae7c     01 18 06 F6 | 	mov	arg04, #1
1ae80     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1ae84     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae88     01 20 66 56 |  if_ne	neg	local02, #1
1ae8c     01 22 06 56 |  if_ne	mov	local03, #1
1ae90     04 1E 86 F1 | 	sub	local01, #4
1ae94     0F 21 62 FC | 	wrlong	local02, local01
1ae98                 | LR__3080
1ae98                 | LR__3081
1ae98                 | ' 				sect = (LBA_t)0 - 1;
1ae98                 | ' 				res = FR_DISK_ERR;
1ae98                 | ' 			}
1ae98                 | ' 			fs->winsect = sect;
1ae98                 | ' 		}
1ae98                 | ' 	}
1ae98                 | ' 	return res;
1ae98     11 FB 01 F6 | 	mov	result1, local03
1ae9c     A7 F0 03 F6 | 	mov	ptra, fp
1aea0     B2 00 A0 FD | 	call	#popregs_
1aea4                 | _fatfs_cc_move_window_ret
1aea4     2D 00 64 FD | 	ret
1aea8                 | 
1aea8                 | _fatfs_cc_sync_fs
1aea8     02 4A 05 F6 | 	mov	COUNT_, #2
1aeac     A8 00 A0 FD | 	call	#pushregs_
1aeb0     09 1F 02 F6 | 	mov	local01, arg01
1aeb4     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1aeb8     FD 20 0A F6 | 	mov	local02, result1 wz
1aebc     D8 00 90 5D |  if_ne	jmp	#LR__3091
1aec0     0F 19 C2 FA | 	rdbyte	arg04, local01
1aec4     03 18 0E F2 | 	cmp	arg04, #3 wz
1aec8     04 1E 06 A1 |  if_e	add	local01, #4
1aecc     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1aed0     04 1E 86 A1 |  if_e	sub	local01, #4
1aed4     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1aed8     A0 00 90 5D |  if_ne	jmp	#LR__3090
1aedc     34 1E 06 F1 | 	add	local01, #52
1aee0     0F 13 02 F6 | 	mov	arg01, local01
1aee4     00 14 06 F6 | 	mov	arg02, #0
1aee8     09 16 C6 F9 | 	decod	arg03, #9
1aeec     98 00 A0 FD | 	call	#\builtin_bytefill_
1aef0     0F 13 02 F6 | 	mov	arg01, local01
1aef4     FE 13 06 F1 | 	add	arg01, #510
1aef8     55 00 80 FF 
1aefc     09 AB 58 FC | 	wrword	##43605, arg01
1af00     A9 B0 A0 FF 
1af04     0F A5 68 FC | 	wrlong	##1096897106, local01
1af08     0F 13 02 F6 | 	mov	arg01, local01
1af0c     E4 13 06 F1 | 	add	arg01, #484
1af10     B9 A0 B0 FF 
1af14     09 E5 68 FC | 	wrlong	##1631679090, arg01
1af18     0F 13 02 F6 | 	mov	arg01, local01
1af1c     E8 13 06 F1 | 	add	arg01, #488
1af20     20 1E 86 F1 | 	sub	local01, #32
1af24     0F 15 02 FB | 	rdlong	arg02, local01
1af28     09 15 62 FC | 	wrlong	arg02, arg01
1af2c     20 1E 06 F1 | 	add	local01, #32
1af30     0F 13 02 F6 | 	mov	arg01, local01
1af34     EC 13 06 F1 | 	add	arg01, #492
1af38     24 1E 86 F1 | 	sub	local01, #36
1af3c     0F 15 02 FB | 	rdlong	arg02, local01
1af40     09 15 62 FC | 	wrlong	arg02, arg01
1af44     10 1E 06 F1 | 	add	local01, #16
1af48     0F 17 02 FB | 	rdlong	arg03, local01
1af4c     01 16 06 F1 | 	add	arg03, #1
1af50     10 1E 06 F1 | 	add	local01, #16
1af54     0F 17 62 FC | 	wrlong	arg03, local01
1af58     2F 1E 86 F1 | 	sub	local01, #47
1af5c     0F 13 C2 FA | 	rdbyte	arg01, local01
1af60     33 1E 06 F1 | 	add	local01, #51
1af64     0F 15 02 F6 | 	mov	arg02, local01
1af68     01 18 06 F6 | 	mov	arg04, #1
1af6c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1af70     30 1E 86 F1 | 	sub	local01, #48
1af74     0F 01 48 FC | 	wrbyte	#0, local01
1af78     04 1E 86 F1 | 	sub	local01, #4
1af7c                 | LR__3090
1af7c     01 1E 06 F1 | 	add	local01, #1
1af80     0F 13 C2 FA | 	rdbyte	arg01, local01
1af84     00 14 06 F6 | 	mov	arg02, #0
1af88     00 16 06 F6 | 	mov	arg03, #0
1af8c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1af90     00 FA 0D F2 | 	cmp	result1, #0 wz
1af94     01 20 06 56 |  if_ne	mov	local02, #1
1af98                 | LR__3091
1af98                 | ' 	}
1af98                 | ' 
1af98                 | ' 	return res;
1af98     10 FB 01 F6 | 	mov	result1, local02
1af9c     A7 F0 03 F6 | 	mov	ptra, fp
1afa0     B2 00 A0 FD | 	call	#popregs_
1afa4                 | _fatfs_cc_sync_fs_ret
1afa4     2D 00 64 FD | 	ret
1afa8                 | 
1afa8                 | _fatfs_cc_clst2sect
1afa8     02 14 86 F1 | 	sub	arg02, #2
1afac     18 12 06 F1 | 	add	arg01, #24
1afb0     09 01 02 FB | 	rdlong	_var01, arg01
1afb4     18 12 86 F1 | 	sub	arg01, #24
1afb8     02 00 86 F1 | 	sub	_var01, #2
1afbc     00 15 12 F2 | 	cmp	arg02, _var01 wc
1afc0     00 FA 05 36 |  if_ae	mov	result1, #0
1afc4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1afc8     0A 12 06 F1 | 	add	arg01, #10
1afcc     09 01 E2 FA | 	rdword	_var01, arg01
1afd0     0A 01 02 FD | 	qmul	_var01, arg02
1afd4                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1afd4     22 12 06 F1 | 	add	arg01, #34
1afd8     09 FB 01 FB | 	rdlong	result1, arg01
1afdc     18 00 62 FD | 	getqx	_var01
1afe0     00 FB 01 F1 | 	add	result1, _var01
1afe4                 | _fatfs_cc_clst2sect_ret
1afe4     2D 00 64 FD | 	ret
1afe8                 | 
1afe8                 | _fatfs_cc_get_fat
1afe8     07 4A 05 F6 | 	mov	COUNT_, #7
1afec     A8 00 A0 FD | 	call	#pushregs_
1aff0     0A 1F 02 F6 | 	mov	local01, arg02
1aff4     09 21 02 FB | 	rdlong	local02, arg01
1aff8     02 1E 16 F2 | 	cmp	local01, #2 wc
1affc     14 00 90 CD |  if_b	jmp	#LR__3100
1b000     18 20 06 F1 | 	add	local02, #24
1b004     10 23 02 FB | 	rdlong	local03, local02
1b008     18 20 86 F1 | 	sub	local02, #24
1b00c     11 1F 12 F2 | 	cmp	local01, local03 wc
1b010     08 00 90 CD |  if_b	jmp	#LR__3101
1b014                 | LR__3100
1b014     01 24 06 F6 | 	mov	local04, #1
1b018     60 01 90 FD | 	jmp	#LR__3108
1b01c                 | LR__3101
1b01c     01 24 66 F6 | 	neg	local04, #1
1b020                 | ' 		val = 0xFFFFFFFF;
1b020                 | ' 
1b020                 | ' 		switch (fs->fs_type) {
1b020     10 27 C2 FA | 	rdbyte	local05, local02
1b024     01 26 86 F1 | 	sub	local05, #1
1b028     03 26 26 F3 | 	fle	local05, #3
1b02c     30 26 62 FD | 	jmprel	local05
1b030                 | LR__3102
1b030     0C 00 90 FD | 	jmp	#LR__3103
1b034     B8 00 90 FD | 	jmp	#LR__3104
1b038     F8 00 90 FD | 	jmp	#LR__3105
1b03c     38 01 90 FD | 	jmp	#LR__3106
1b040                 | LR__3103
1b040     0F 27 02 F6 | 	mov	local05, local01
1b044     0F 13 02 F6 | 	mov	arg01, local01
1b048     01 12 46 F0 | 	shr	arg01, #1
1b04c     09 27 02 F1 | 	add	local05, arg01
1b050     10 13 02 F6 | 	mov	arg01, local02
1b054     13 29 02 F6 | 	mov	local06, local05
1b058     09 28 46 F0 | 	shr	local06, #9
1b05c     24 20 06 F1 | 	add	local02, #36
1b060     10 15 02 FB | 	rdlong	arg02, local02
1b064     24 20 86 F1 | 	sub	local02, #36
1b068     14 15 02 F1 | 	add	arg02, local06
1b06c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1b070     00 FA 0D F2 | 	cmp	result1, #0 wz
1b074     04 01 90 5D |  if_ne	jmp	#LR__3107
1b078     13 29 02 F6 | 	mov	local06, local05
1b07c     FF 29 06 F5 | 	and	local06, #511
1b080     34 20 06 F1 | 	add	local02, #52
1b084     10 29 02 F1 | 	add	local06, local02
1b088     14 2B C2 FA | 	rdbyte	local07, local06
1b08c     34 20 86 F1 | 	sub	local02, #52
1b090     10 13 02 F6 | 	mov	arg01, local02
1b094     01 26 06 F1 | 	add	local05, #1
1b098     13 29 02 F6 | 	mov	local06, local05
1b09c     09 28 46 F0 | 	shr	local06, #9
1b0a0     24 20 06 F1 | 	add	local02, #36
1b0a4     10 15 02 FB | 	rdlong	arg02, local02
1b0a8     24 20 86 F1 | 	sub	local02, #36
1b0ac     14 15 02 F1 | 	add	arg02, local06
1b0b0     7C FD BF FD | 	call	#_fatfs_cc_move_window
1b0b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0b8     C0 00 90 5D |  if_ne	jmp	#LR__3107
1b0bc     FF 27 06 F5 | 	and	local05, #511
1b0c0     34 20 06 F1 | 	add	local02, #52
1b0c4     10 27 02 F1 | 	add	local05, local02
1b0c8     13 29 C2 FA | 	rdbyte	local06, local05
1b0cc     08 28 66 F0 | 	shl	local06, #8
1b0d0     14 2B 42 F5 | 	or	local07, local06
1b0d4     01 1E CE F7 | 	test	local01, #1 wz
1b0d8     04 2A 46 50 |  if_ne	shr	local07, #4
1b0dc     15 23 02 56 |  if_ne	mov	local03, local07
1b0e0     0B 2A 46 A7 |  if_e	zerox	local07, #11
1b0e4     15 23 02 A6 |  if_e	mov	local03, local07
1b0e8     11 25 02 F6 | 	mov	local04, local03
1b0ec                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1b0ec                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1b0ec                 | ' 			break;
1b0ec     8C 00 90 FD | 	jmp	#LR__3107
1b0f0                 | LR__3104
1b0f0     10 13 02 F6 | 	mov	arg01, local02
1b0f4     0F 29 02 F6 | 	mov	local06, local01
1b0f8     08 28 46 F0 | 	shr	local06, #8
1b0fc     24 20 06 F1 | 	add	local02, #36
1b100     10 15 02 FB | 	rdlong	arg02, local02
1b104     24 20 86 F1 | 	sub	local02, #36
1b108     14 15 02 F1 | 	add	arg02, local06
1b10c     20 FD BF FD | 	call	#_fatfs_cc_move_window
1b110     00 FA 0D F2 | 	cmp	result1, #0 wz
1b114     64 00 90 5D |  if_ne	jmp	#LR__3107
1b118     34 20 06 F1 | 	add	local02, #52
1b11c     01 1E 66 F0 | 	shl	local01, #1
1b120     FF 1F 06 F5 | 	and	local01, #511
1b124     0F 21 02 F1 | 	add	local02, local01
1b128                 | ' {
1b128                 | ' 
1b128                 | ' 	return *((WORD*)ptr);
1b128     10 FB E1 FA | 	rdword	result1, local02
1b12c     FD 24 32 F9 | 	getword	local04, result1, #0
1b130                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1b130                 | ' 			break;
1b130     48 00 90 FD | 	jmp	#LR__3107
1b134                 | LR__3105
1b134     10 13 02 F6 | 	mov	arg01, local02
1b138     0F 29 02 F6 | 	mov	local06, local01
1b13c     07 28 46 F0 | 	shr	local06, #7
1b140     24 20 06 F1 | 	add	local02, #36
1b144     10 15 02 FB | 	rdlong	arg02, local02
1b148     24 20 86 F1 | 	sub	local02, #36
1b14c     14 15 02 F1 | 	add	arg02, local06
1b150     DC FC BF FD | 	call	#_fatfs_cc_move_window
1b154     00 FA 0D F2 | 	cmp	result1, #0 wz
1b158     20 00 90 5D |  if_ne	jmp	#LR__3107
1b15c     34 20 06 F1 | 	add	local02, #52
1b160     02 1E 66 F0 | 	shl	local01, #2
1b164     FF 1F 06 F5 | 	and	local01, #511
1b168     0F 21 02 F1 | 	add	local02, local01
1b16c                 | ' {
1b16c                 | ' 
1b16c                 | ' 	return *((DWORD*)ptr);
1b16c     10 25 02 FB | 	rdlong	local04, local02
1b170     7C 24 06 F4 | 	bitl	local04, #124
1b174                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1b174                 | ' 			break;
1b174     04 00 90 FD | 	jmp	#LR__3107
1b178                 | LR__3106
1b178     01 24 06 F6 | 	mov	local04, #1
1b17c                 | LR__3107
1b17c                 | LR__3108
1b17c                 | ' 			val = 1;
1b17c                 | ' 		}
1b17c                 | ' 	}
1b17c                 | ' 
1b17c                 | ' 	return val;
1b17c     12 FB 01 F6 | 	mov	result1, local04
1b180     A7 F0 03 F6 | 	mov	ptra, fp
1b184     B2 00 A0 FD | 	call	#popregs_
1b188                 | _fatfs_cc_get_fat_ret
1b188     2D 00 64 FD | 	ret
1b18c                 | 
1b18c                 | _fatfs_cc_put_fat
1b18c     08 4A 05 F6 | 	mov	COUNT_, #8
1b190     A8 00 A0 FD | 	call	#pushregs_
1b194     09 1F 02 F6 | 	mov	local01, arg01
1b198     0A 21 02 F6 | 	mov	local02, arg02
1b19c     0B 23 02 F6 | 	mov	local03, arg03
1b1a0     02 24 06 F6 | 	mov	local04, #2
1b1a4     02 20 16 F2 | 	cmp	local02, #2 wc
1b1a8     E0 01 90 CD |  if_b	jmp	#LR__3117
1b1ac     18 1E 06 F1 | 	add	local01, #24
1b1b0     0F 27 02 FB | 	rdlong	local05, local01
1b1b4     18 1E 86 F1 | 	sub	local01, #24
1b1b8     13 21 12 F2 | 	cmp	local02, local05 wc
1b1bc     CC 01 90 3D |  if_ae	jmp	#LR__3117
1b1c0                 | ' 		switch (fs->fs_type) {
1b1c0     0F 29 C2 FA | 	rdbyte	local06, local01
1b1c4     01 28 86 F1 | 	sub	local06, #1
1b1c8     03 28 26 F3 | 	fle	local06, #3
1b1cc     30 28 62 FD | 	jmprel	local06
1b1d0                 | LR__3110
1b1d0     0C 00 90 FD | 	jmp	#LR__3111
1b1d4     F8 00 90 FD | 	jmp	#LR__3114
1b1d8     40 01 90 FD | 	jmp	#LR__3115
1b1dc     AC 01 90 FD | 	jmp	#LR__3116
1b1e0                 | LR__3111
1b1e0     10 2B 02 F6 | 	mov	local07, local02
1b1e4     10 27 02 F6 | 	mov	local05, local02
1b1e8     01 26 46 F0 | 	shr	local05, #1
1b1ec     13 2B 02 F1 | 	add	local07, local05
1b1f0     0F 13 02 F6 | 	mov	arg01, local01
1b1f4     15 29 02 F6 | 	mov	local06, local07
1b1f8     09 28 46 F0 | 	shr	local06, #9
1b1fc     24 1E 06 F1 | 	add	local01, #36
1b200     0F 15 02 FB | 	rdlong	arg02, local01
1b204     24 1E 86 F1 | 	sub	local01, #36
1b208     14 15 02 F1 | 	add	arg02, local06
1b20c     20 FC BF FD | 	call	#_fatfs_cc_move_window
1b210     FD 24 0A F6 | 	mov	local04, result1 wz
1b214     74 01 90 5D |  if_ne	jmp	#LR__3116
1b218     34 1E 06 F1 | 	add	local01, #52
1b21c     0F 2D 02 F6 | 	mov	local08, local01
1b220     15 27 02 F6 | 	mov	local05, local07
1b224     FF 27 06 F5 | 	and	local05, #511
1b228     13 2D 02 F1 | 	add	local08, local05
1b22c     01 20 CE F7 | 	test	local02, #1 wz
1b230     34 1E 86 F1 | 	sub	local01, #52
1b234     01 2A 06 F1 | 	add	local07, #1
1b238     18 00 90 AD |  if_e	jmp	#LR__3112
1b23c     16 27 C2 FA | 	rdbyte	local05, local08
1b240     13 27 42 F8 | 	getnib	local05, local05, #0
1b244     11 29 E2 F8 | 	getbyte	local06, local03, #0
1b248     04 28 66 F0 | 	shl	local06, #4
1b24c     14 27 42 F5 | 	or	local05, local06
1b250     04 00 90 FD | 	jmp	#LR__3113
1b254                 | LR__3112
1b254     11 27 02 F6 | 	mov	local05, local03
1b258                 | LR__3113
1b258     16 27 42 FC | 	wrbyte	local05, local08
1b25c     03 1E 06 F1 | 	add	local01, #3
1b260     0F 03 48 FC | 	wrbyte	#1, local01
1b264     03 1E 86 F1 | 	sub	local01, #3
1b268     0F 13 02 F6 | 	mov	arg01, local01
1b26c     15 2D 02 F6 | 	mov	local08, local07
1b270     09 2C 46 F0 | 	shr	local08, #9
1b274     24 1E 06 F1 | 	add	local01, #36
1b278     0F 15 02 FB | 	rdlong	arg02, local01
1b27c     24 1E 86 F1 | 	sub	local01, #36
1b280     16 15 02 F1 | 	add	arg02, local08
1b284     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1b288     FD 24 0A F6 | 	mov	local04, result1 wz
1b28c     FC 00 90 5D |  if_ne	jmp	#LR__3116
1b290     34 1E 06 F1 | 	add	local01, #52
1b294     0F 2D 02 F6 | 	mov	local08, local01
1b298     FF 2B 06 F5 | 	and	local07, #511
1b29c     15 2D 02 F1 | 	add	local08, local07
1b2a0     01 20 CE F7 | 	test	local02, #1 wz
1b2a4     04 22 46 50 |  if_ne	shr	local03, #4
1b2a8     11 27 02 56 |  if_ne	mov	local05, local03
1b2ac     16 27 C2 AA |  if_e	rdbyte	local05, local08
1b2b0     F0 26 06 A5 |  if_e	and	local05, #240
1b2b4     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1b2b8     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1b2bc     11 27 42 A5 |  if_e	or	local05, local03
1b2c0     16 27 42 FC | 	wrbyte	local05, local08
1b2c4     31 1E 86 F1 | 	sub	local01, #49
1b2c8     0F 03 48 FC | 	wrbyte	#1, local01
1b2cc                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1b2cc                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1b2cc                 | ' 			fs->wflag = 1;
1b2cc                 | ' 			break;
1b2cc     BC 00 90 FD | 	jmp	#LR__3116
1b2d0                 | LR__3114
1b2d0     0F 13 02 F6 | 	mov	arg01, local01
1b2d4     10 2D 02 F6 | 	mov	local08, local02
1b2d8     08 2C 46 F0 | 	shr	local08, #8
1b2dc     24 1E 06 F1 | 	add	local01, #36
1b2e0     0F 15 02 FB | 	rdlong	arg02, local01
1b2e4     24 1E 86 F1 | 	sub	local01, #36
1b2e8     16 15 02 F1 | 	add	arg02, local08
1b2ec     40 FB BF FD | 	call	#_fatfs_cc_move_window
1b2f0     FD 24 0A F6 | 	mov	local04, result1 wz
1b2f4     94 00 90 5D |  if_ne	jmp	#LR__3116
1b2f8     34 1E 06 F1 | 	add	local01, #52
1b2fc     0F 13 02 F6 | 	mov	arg01, local01
1b300     01 20 66 F0 | 	shl	local02, #1
1b304     FF 21 06 F5 | 	and	local02, #511
1b308     10 13 02 F1 | 	add	arg01, local02
1b30c     09 23 52 FC | 	wrword	local03, arg01
1b310     31 1E 86 F1 | 	sub	local01, #49
1b314     0F 03 48 FC | 	wrbyte	#1, local01
1b318                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1b318                 | ' 			fs->wflag = 1;
1b318                 | ' 			break;
1b318     70 00 90 FD | 	jmp	#LR__3116
1b31c                 | LR__3115
1b31c     0F 13 02 F6 | 	mov	arg01, local01
1b320     10 2D 02 F6 | 	mov	local08, local02
1b324     07 2C 46 F0 | 	shr	local08, #7
1b328     24 1E 06 F1 | 	add	local01, #36
1b32c     0F 15 02 FB | 	rdlong	arg02, local01
1b330     24 1E 86 F1 | 	sub	local01, #36
1b334     16 15 02 F1 | 	add	arg02, local08
1b338     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1b33c     FD 24 0A F6 | 	mov	local04, result1 wz
1b340     48 00 90 5D |  if_ne	jmp	#LR__3116
1b344     7C 22 06 F4 | 	bitl	local03, #124
1b348     34 1E 06 F1 | 	add	local01, #52
1b34c     10 2D 02 F6 | 	mov	local08, local02
1b350     02 2C 66 F0 | 	shl	local08, #2
1b354     FF 2D 06 F5 | 	and	local08, #511
1b358     0F 13 02 F6 | 	mov	arg01, local01
1b35c     16 13 02 F1 | 	add	arg01, local08
1b360                 | ' {
1b360                 | ' 
1b360                 | ' 	return *((DWORD*)ptr);
1b360     09 2D 02 FB | 	rdlong	local08, arg01
1b364     00 00 78 FF 
1b368     00 2C 06 F5 | 	and	local08, ##-268435456
1b36c     16 23 42 F5 | 	or	local03, local08
1b370     0F 13 02 F6 | 	mov	arg01, local01
1b374     02 20 66 F0 | 	shl	local02, #2
1b378     FF 21 06 F5 | 	and	local02, #511
1b37c     10 13 02 F1 | 	add	arg01, local02
1b380     09 23 62 FC | 	wrlong	local03, arg01
1b384     31 1E 86 F1 | 	sub	local01, #49
1b388     0F 03 48 FC | 	wrbyte	#1, local01
1b38c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1b38c                 | ' 			}
1b38c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1b38c                 | ' 			fs->wflag = 1;
1b38c                 | ' 			break;
1b38c                 | LR__3116
1b38c                 | LR__3117
1b38c                 | ' 		}
1b38c                 | ' 	}
1b38c                 | ' 	return res;
1b38c     12 FB 01 F6 | 	mov	result1, local04
1b390     A7 F0 03 F6 | 	mov	ptra, fp
1b394     B2 00 A0 FD | 	call	#popregs_
1b398                 | _fatfs_cc_put_fat_ret
1b398     2D 00 64 FD | 	ret
1b39c                 | 
1b39c                 | _fatfs_cc_remove_chain
1b39c     05 4A 05 F6 | 	mov	COUNT_, #5
1b3a0     A8 00 A0 FD | 	call	#pushregs_
1b3a4     09 1F 02 F6 | 	mov	local01, arg01
1b3a8     0A 21 02 F6 | 	mov	local02, arg02
1b3ac     0B 23 02 F6 | 	mov	local03, arg03
1b3b0     0F 25 02 FB | 	rdlong	local04, local01
1b3b4     02 20 16 F2 | 	cmp	local02, #2 wc
1b3b8     14 00 90 CD |  if_b	jmp	#LR__3120
1b3bc     18 24 06 F1 | 	add	local04, #24
1b3c0     12 FB 01 FB | 	rdlong	result1, local04
1b3c4     18 24 86 F1 | 	sub	local04, #24
1b3c8     FD 20 12 F2 | 	cmp	local02, result1 wc
1b3cc     08 00 90 CD |  if_b	jmp	#LR__3121
1b3d0                 | LR__3120
1b3d0     02 FA 05 F6 | 	mov	result1, #2
1b3d4     CC 00 90 FD | 	jmp	#LR__3126
1b3d8                 | LR__3121
1b3d8     00 22 0E F2 | 	cmp	local03, #0 wz
1b3dc     18 00 90 AD |  if_e	jmp	#LR__3122
1b3e0     11 15 02 F6 | 	mov	arg02, local03
1b3e4     12 13 02 F6 | 	mov	arg01, local04
1b3e8     01 16 66 F6 | 	neg	arg03, #1
1b3ec     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1b3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3f4     AC 00 90 5D |  if_ne	jmp	#LR__3126
1b3f8                 | LR__3122
1b3f8                 | ' 	}
1b3f8                 | ' 
1b3f8                 | ' 
1b3f8                 | ' 	do {
1b3f8                 | LR__3123
1b3f8     10 15 02 F6 | 	mov	arg02, local02
1b3fc     0F 13 02 F6 | 	mov	arg01, local01
1b400     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1b404     FD 26 0A F6 | 	mov	local05, result1 wz
1b408     94 00 90 AD |  if_e	jmp	#LR__3125
1b40c     01 26 0E F2 | 	cmp	local05, #1 wz
1b410     02 FA 05 A6 |  if_e	mov	result1, #2
1b414     8C 00 90 AD |  if_e	jmp	#LR__3126
1b418     FF FF 7F FF 
1b41c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1b420     01 FA 05 A6 |  if_e	mov	result1, #1
1b424     7C 00 90 AD |  if_e	jmp	#LR__3126
1b428     10 15 02 F6 | 	mov	arg02, local02
1b42c     12 13 02 F6 | 	mov	arg01, local04
1b430     00 16 06 F6 | 	mov	arg03, #0
1b434     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1b438     FD 22 0A F6 | 	mov	local03, result1 wz
1b43c     11 FB 01 56 |  if_ne	mov	result1, local03
1b440     60 00 90 5D |  if_ne	jmp	#LR__3126
1b444     18 24 06 F1 | 	add	local04, #24
1b448     12 23 02 FB | 	rdlong	local03, local04
1b44c     02 22 86 F1 | 	sub	local03, #2
1b450     04 24 86 F1 | 	sub	local04, #4
1b454     12 21 02 FB | 	rdlong	local02, local04
1b458     14 24 86 F1 | 	sub	local04, #20
1b45c     11 21 12 F2 | 	cmp	local02, local03 wc
1b460     24 00 90 3D |  if_ae	jmp	#LR__3124
1b464     14 24 06 F1 | 	add	local04, #20
1b468     12 23 02 FB | 	rdlong	local03, local04
1b46c     01 22 06 F1 | 	add	local03, #1
1b470     12 23 62 FC | 	wrlong	local03, local04
1b474     10 24 86 F1 | 	sub	local04, #16
1b478     12 23 C2 FA | 	rdbyte	local03, local04
1b47c     01 22 46 F5 | 	or	local03, #1
1b480     12 23 42 FC | 	wrbyte	local03, local04
1b484     04 24 86 F1 | 	sub	local04, #4
1b488                 | LR__3124
1b488     13 21 02 F6 | 	mov	local02, local05
1b48c     18 24 06 F1 | 	add	local04, #24
1b490     12 27 02 FB | 	rdlong	local05, local04
1b494     18 24 86 F1 | 	sub	local04, #24
1b498     13 21 12 F2 | 	cmp	local02, local05 wc
1b49c     58 FF 9F CD |  if_b	jmp	#LR__3123
1b4a0                 | LR__3125
1b4a0                 | ' #line 1500 "ff.c"
1b4a0                 | ' 	return FR_OK;
1b4a0     00 FA 05 F6 | 	mov	result1, #0
1b4a4                 | LR__3126
1b4a4     A7 F0 03 F6 | 	mov	ptra, fp
1b4a8     B2 00 A0 FD | 	call	#popregs_
1b4ac                 | _fatfs_cc_remove_chain_ret
1b4ac     2D 00 64 FD | 	ret
1b4b0                 | 
1b4b0                 | _fatfs_cc_create_chain
1b4b0     09 4A 05 F6 | 	mov	COUNT_, #9
1b4b4     A8 00 A0 FD | 	call	#pushregs_
1b4b8     09 1F 02 F6 | 	mov	local01, arg01
1b4bc     0A 21 0A F6 | 	mov	local02, arg02 wz
1b4c0     0F 23 02 FB | 	rdlong	local03, local01
1b4c4     28 00 90 5D |  if_ne	jmp	#LR__3130
1b4c8     10 22 06 F1 | 	add	local03, #16
1b4cc     11 25 0A FB | 	rdlong	local04, local03 wz
1b4d0     10 22 86 F1 | 	sub	local03, #16
1b4d4     18 22 06 51 |  if_ne	add	local03, #24
1b4d8     11 27 02 5B |  if_ne	rdlong	local05, local03
1b4dc     18 22 86 51 |  if_ne	sub	local03, #24
1b4e0     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1b4e4     50 00 90 4D |  if_c_and_nz	jmp	#LR__3131
1b4e8     01 24 06 F6 | 	mov	local04, #1
1b4ec     48 00 90 FD | 	jmp	#LR__3131
1b4f0                 | LR__3130
1b4f0     10 15 02 F6 | 	mov	arg02, local02
1b4f4     0F 13 02 F6 | 	mov	arg01, local01
1b4f8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1b4fc     FD 24 02 F6 | 	mov	local04, result1
1b500     02 24 16 F2 | 	cmp	local04, #2 wc
1b504     01 FA 05 C6 |  if_b	mov	result1, #1
1b508     BC 01 90 CD |  if_b	jmp	#LR__3141
1b50c     FF FF 7F FF 
1b510     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1b514     12 FB 01 A6 |  if_e	mov	result1, local04
1b518     AC 01 90 AD |  if_e	jmp	#LR__3141
1b51c     18 22 06 F1 | 	add	local03, #24
1b520     11 27 02 FB | 	rdlong	local05, local03
1b524     18 22 86 F1 | 	sub	local03, #24
1b528     13 25 12 F2 | 	cmp	local04, local05 wc
1b52c     12 FB 01 C6 |  if_b	mov	result1, local04
1b530     94 01 90 CD |  if_b	jmp	#LR__3141
1b534     10 25 02 F6 | 	mov	local04, local02
1b538                 | LR__3131
1b538     14 22 06 F1 | 	add	local03, #20
1b53c     11 27 0A FB | 	rdlong	local05, local03 wz
1b540     14 22 86 F1 | 	sub	local03, #20
1b544     00 FA 05 A6 |  if_e	mov	result1, #0
1b548     7C 01 90 AD |  if_e	jmp	#LR__3141
1b54c     00 28 06 F6 | 	mov	local06, #0
1b550     10 25 0A F2 | 	cmp	local04, local02 wz
1b554     74 00 90 5D |  if_ne	jmp	#LR__3134
1b558     12 29 02 F6 | 	mov	local06, local04
1b55c     01 28 06 F1 | 	add	local06, #1
1b560     18 22 06 F1 | 	add	local03, #24
1b564     11 27 02 FB | 	rdlong	local05, local03
1b568     18 22 86 F1 | 	sub	local03, #24
1b56c     13 29 12 F2 | 	cmp	local06, local05 wc
1b570     02 28 06 36 |  if_ae	mov	local06, #2
1b574     14 15 02 F6 | 	mov	arg02, local06
1b578     0F 13 02 F6 | 	mov	arg01, local01
1b57c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1b580     FD 26 02 F6 | 	mov	local05, result1
1b584     01 26 0E F2 | 	cmp	local05, #1 wz
1b588     FF FF 7F 5F 
1b58c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1b590     13 FB 01 A6 |  if_e	mov	result1, local05
1b594     30 01 90 AD |  if_e	jmp	#LR__3141
1b598     00 26 0E F2 | 	cmp	local05, #0 wz
1b59c     2C 00 90 AD |  if_e	jmp	#LR__3133
1b5a0     10 22 06 F1 | 	add	local03, #16
1b5a4     11 2B 02 FB | 	rdlong	local07, local03
1b5a8     10 22 86 F1 | 	sub	local03, #16
1b5ac     02 2A 16 F2 | 	cmp	local07, #2 wc
1b5b0     14 00 90 CD |  if_b	jmp	#LR__3132
1b5b4     18 22 06 F1 | 	add	local03, #24
1b5b8     11 27 02 FB | 	rdlong	local05, local03
1b5bc     18 22 86 F1 | 	sub	local03, #24
1b5c0     13 2B 12 F2 | 	cmp	local07, local05 wc
1b5c4     15 25 02 C6 |  if_b	mov	local04, local07
1b5c8                 | LR__3132
1b5c8     00 28 06 F6 | 	mov	local06, #0
1b5cc                 | LR__3133
1b5cc                 | LR__3134
1b5cc     00 28 0E F2 | 	cmp	local06, #0 wz
1b5d0     60 00 90 5D |  if_ne	jmp	#LR__3137
1b5d4     12 29 02 F6 | 	mov	local06, local04
1b5d8                 | ' 			ncl = scl;
1b5d8                 | ' 			for (;;) {
1b5d8                 | LR__3135
1b5d8     01 28 06 F1 | 	add	local06, #1
1b5dc     18 22 06 F1 | 	add	local03, #24
1b5e0     11 27 02 FB | 	rdlong	local05, local03
1b5e4     18 22 86 F1 | 	sub	local03, #24
1b5e8     13 29 12 F2 | 	cmp	local06, local05 wc
1b5ec     02 28 06 36 |  if_ae	mov	local06, #2
1b5f0     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1b5f4     00 FA 05 16 |  if_a	mov	result1, #0
1b5f8     CC 00 90 1D |  if_a	jmp	#LR__3141
1b5fc     14 15 02 F6 | 	mov	arg02, local06
1b600     0F 13 02 F6 | 	mov	arg01, local01
1b604     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1b608     FD 2A 0A F6 | 	mov	local07, result1 wz
1b60c     24 00 90 AD |  if_e	jmp	#LR__3136
1b610     01 2A 0E F2 | 	cmp	local07, #1 wz
1b614     FF FF 7F 5F 
1b618     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1b61c     15 FB 01 A6 |  if_e	mov	result1, local07
1b620     A4 00 90 AD |  if_e	jmp	#LR__3141
1b624     12 29 0A F2 | 	cmp	local06, local04 wz
1b628     00 FA 05 A6 |  if_e	mov	result1, #0
1b62c     98 00 90 AD |  if_e	jmp	#LR__3141
1b630     A4 FF 9F FD | 	jmp	#LR__3135
1b634                 | LR__3136
1b634                 | LR__3137
1b634     11 13 02 F6 | 	mov	arg01, local03
1b638     14 15 02 F6 | 	mov	arg02, local06
1b63c     01 16 66 F6 | 	neg	arg03, #1
1b640     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1b644     FD 2C 0A F6 | 	mov	local08, result1 wz
1b648     1C 00 90 5D |  if_ne	jmp	#LR__3138
1b64c     00 20 0E F2 | 	cmp	local02, #0 wz
1b650     14 00 90 AD |  if_e	jmp	#LR__3138
1b654     11 13 02 F6 | 	mov	arg01, local03
1b658     10 15 02 F6 | 	mov	arg02, local02
1b65c     14 17 02 F6 | 	mov	arg03, local06
1b660     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1b664     FD 2C 02 F6 | 	mov	local08, result1
1b668                 | LR__3138
1b668     00 2C 0E F2 | 	cmp	local08, #0 wz
1b66c     4C 00 90 5D |  if_ne	jmp	#LR__3139
1b670     10 22 06 F1 | 	add	local03, #16
1b674     11 29 62 FC | 	wrlong	local06, local03
1b678     08 22 06 F1 | 	add	local03, #8
1b67c     11 27 02 FB | 	rdlong	local05, local03
1b680     02 26 86 F1 | 	sub	local05, #2
1b684     04 22 86 F1 | 	sub	local03, #4
1b688     11 2F 02 FB | 	rdlong	local09, local03
1b68c     14 22 86 F1 | 	sub	local03, #20
1b690     13 2F 1A F2 | 	cmp	local09, local05 wcz
1b694     14 22 06 E1 |  if_be	add	local03, #20
1b698     11 2F 02 EB |  if_be	rdlong	local09, local03
1b69c     01 2E 86 E1 |  if_be	sub	local09, #1
1b6a0     11 2F 62 EC |  if_be	wrlong	local09, local03
1b6a4     14 22 86 E1 |  if_be	sub	local03, #20
1b6a8     04 22 06 F1 | 	add	local03, #4
1b6ac     11 27 C2 FA | 	rdbyte	local05, local03
1b6b0     01 26 46 F5 | 	or	local05, #1
1b6b4     11 27 42 FC | 	wrbyte	local05, local03
1b6b8     08 00 90 FD | 	jmp	#LR__3140
1b6bc                 | LR__3139
1b6bc     01 2C 0E F2 | 	cmp	local08, #1 wz
1b6c0     01 28 C6 F6 | 	negz	local06, #1
1b6c4                 | LR__3140
1b6c4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1b6c4                 | ' 	}
1b6c4                 | ' 
1b6c4                 | ' 	return ncl;
1b6c4     14 FB 01 F6 | 	mov	result1, local06
1b6c8                 | LR__3141
1b6c8     A7 F0 03 F6 | 	mov	ptra, fp
1b6cc     B2 00 A0 FD | 	call	#popregs_
1b6d0                 | _fatfs_cc_create_chain_ret
1b6d0     2D 00 64 FD | 	ret
1b6d4                 | 
1b6d4                 | _fatfs_cc_dir_clear
1b6d4     06 4A 05 F6 | 	mov	COUNT_, #6
1b6d8     A8 00 A0 FD | 	call	#pushregs_
1b6dc     09 1F 02 F6 | 	mov	local01, arg01
1b6e0     0A 21 02 F6 | 	mov	local02, arg02
1b6e4     0F 13 02 F6 | 	mov	arg01, local01
1b6e8     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1b6ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6f0     01 FA 05 56 |  if_ne	mov	result1, #1
1b6f4     90 00 90 5D |  if_ne	jmp	#LR__3152
1b6f8     0F 13 02 F6 | 	mov	arg01, local01
1b6fc     10 15 02 F6 | 	mov	arg02, local02
1b700     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1b704     FD 22 02 F6 | 	mov	local03, result1
1b708     30 1E 06 F1 | 	add	local01, #48
1b70c     0F 23 62 FC | 	wrlong	local03, local01
1b710     04 1E 06 F1 | 	add	local01, #4
1b714     0F 13 02 F6 | 	mov	arg01, local01
1b718     00 14 06 F6 | 	mov	arg02, #0
1b71c     09 16 C6 F9 | 	decod	arg03, #9
1b720     98 00 A0 FD | 	call	#\builtin_bytefill_
1b724     0F 25 02 F6 | 	mov	local04, local01
1b728                 | ' #line 1667 "ff.c"
1b728                 | ' 	{
1b728                 | ' 		ibuf = fs->win; szb = 1;
1b728                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1b728     00 26 06 F6 | 	mov	local05, #0
1b72c     34 1E 86 F1 | 	sub	local01, #52
1b730                 | LR__3150
1b730     0A 1E 06 F1 | 	add	local01, #10
1b734     0F 29 E2 FA | 	rdword	local06, local01
1b738     0A 1E 86 F1 | 	sub	local01, #10
1b73c     14 27 12 F2 | 	cmp	local05, local06 wc
1b740     2C 00 90 3D |  if_ae	jmp	#LR__3151
1b744     01 1E 06 F1 | 	add	local01, #1
1b748     0F 13 C2 FA | 	rdbyte	arg01, local01
1b74c     01 1E 86 F1 | 	sub	local01, #1
1b750     12 15 02 F6 | 	mov	arg02, local04
1b754     11 17 02 F6 | 	mov	arg03, local03
1b758     13 17 02 F1 | 	add	arg03, local05
1b75c     01 18 06 F6 | 	mov	arg04, #1
1b760     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1b764     00 FA 0D F2 | 	cmp	result1, #0 wz
1b768     01 26 06 A1 |  if_e	add	local05, #1
1b76c     C0 FF 9F AD |  if_e	jmp	#LR__3150
1b770                 | LR__3151
1b770                 | ' 	}
1b770                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1b770     0A 1E 06 F1 | 	add	local01, #10
1b774     0F 25 E2 FA | 	rdword	local04, local01
1b778     12 27 0A F2 | 	cmp	local05, local04 wz
1b77c     00 28 06 A6 |  if_e	mov	local06, #0
1b780     01 28 06 56 |  if_ne	mov	local06, #1
1b784     14 FB 01 F6 | 	mov	result1, local06
1b788                 | LR__3152
1b788     A7 F0 03 F6 | 	mov	ptra, fp
1b78c     B2 00 A0 FD | 	call	#popregs_
1b790                 | _fatfs_cc_dir_clear_ret
1b790     2D 00 64 FD | 	ret
1b794                 | 
1b794                 | _fatfs_cc_dir_sdi
1b794     06 4A 05 F6 | 	mov	COUNT_, #6
1b798     A8 00 A0 FD | 	call	#pushregs_
1b79c     09 1F 02 F6 | 	mov	local01, arg01
1b7a0     0A 21 02 F6 | 	mov	local02, arg02
1b7a4     0F 23 02 FB | 	rdlong	local03, local01
1b7a8     00 10 00 FF 
1b7ac     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1b7b0     1F 20 CE C7 |  if_b	test	local02, #31 wz
1b7b4                 | ' 		return FR_INT_ERR;
1b7b4     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1b7b8     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3166
1b7bc     10 1E 06 F1 | 	add	local01, #16
1b7c0     0F 21 62 FC | 	wrlong	local02, local01
1b7c4     08 1E 86 F1 | 	sub	local01, #8
1b7c8     0F 25 0A FB | 	rdlong	local04, local01 wz
1b7cc     08 1E 86 F1 | 	sub	local01, #8
1b7d0     11 27 C2 AA |  if_e	rdbyte	local05, local03
1b7d4     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1b7d8     28 22 06 21 |  if_nc_and_z	add	local03, #40
1b7dc     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1b7e0     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1b7e4     00 24 0E F2 | 	cmp	local04, #0 wz
1b7e8     3C 00 90 5D |  if_ne	jmp	#LR__3160
1b7ec     10 27 02 F6 | 	mov	local05, local02
1b7f0     05 26 46 F0 | 	shr	local05, #5
1b7f4     08 22 06 F1 | 	add	local03, #8
1b7f8     11 15 E2 FA | 	rdword	arg02, local03
1b7fc     08 22 86 F1 | 	sub	local03, #8
1b800     0A 27 12 F2 | 	cmp	local05, arg02 wc
1b804     02 FA 05 36 |  if_ae	mov	result1, #2
1b808     E4 00 90 3D |  if_ae	jmp	#LR__3166
1b80c     28 22 06 F1 | 	add	local03, #40
1b810     11 27 02 FB | 	rdlong	local05, local03
1b814     28 22 86 F1 | 	sub	local03, #40
1b818     18 1E 06 F1 | 	add	local01, #24
1b81c     0F 27 62 FC | 	wrlong	local05, local01
1b820     18 1E 86 F1 | 	sub	local01, #24
1b824     7C 00 90 FD | 	jmp	#LR__3165
1b828                 | LR__3160
1b828     0A 22 06 F1 | 	add	local03, #10
1b82c     11 29 E2 FA | 	rdword	local06, local03
1b830     0A 22 86 F1 | 	sub	local03, #10
1b834     09 28 66 F0 | 	shl	local06, #9
1b838                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1b838                 | ' 		while (ofs >= csz) {
1b838                 | LR__3161
1b838     14 21 12 F2 | 	cmp	local02, local06 wc
1b83c     4C 00 90 CD |  if_b	jmp	#LR__3164
1b840     0F 13 02 F6 | 	mov	arg01, local01
1b844     12 15 02 F6 | 	mov	arg02, local04
1b848     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1b84c     FD 24 02 F6 | 	mov	local04, result1
1b850     FF FF 7F FF 
1b854     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1b858     01 FA 05 A6 |  if_e	mov	result1, #1
1b85c     90 00 90 AD |  if_e	jmp	#LR__3166
1b860     02 24 16 F2 | 	cmp	local04, #2 wc
1b864     14 00 90 CD |  if_b	jmp	#LR__3162
1b868     18 22 06 F1 | 	add	local03, #24
1b86c     11 27 02 FB | 	rdlong	local05, local03
1b870     18 22 86 F1 | 	sub	local03, #24
1b874     13 25 12 F2 | 	cmp	local04, local05 wc
1b878     08 00 90 CD |  if_b	jmp	#LR__3163
1b87c                 | LR__3162
1b87c     02 FA 05 F6 | 	mov	result1, #2
1b880     6C 00 90 FD | 	jmp	#LR__3166
1b884                 | LR__3163
1b884     14 21 82 F1 | 	sub	local02, local06
1b888     AC FF 9F FD | 	jmp	#LR__3161
1b88c                 | LR__3164
1b88c     11 13 02 F6 | 	mov	arg01, local03
1b890     12 15 02 F6 | 	mov	arg02, local04
1b894     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1b898     18 1E 06 F1 | 	add	local01, #24
1b89c     0F FB 61 FC | 	wrlong	result1, local01
1b8a0     18 1E 86 F1 | 	sub	local01, #24
1b8a4                 | LR__3165
1b8a4     14 1E 06 F1 | 	add	local01, #20
1b8a8     0F 25 62 FC | 	wrlong	local04, local01
1b8ac     04 1E 06 F1 | 	add	local01, #4
1b8b0     0F 27 0A FB | 	rdlong	local05, local01 wz
1b8b4     18 1E 86 F1 | 	sub	local01, #24
1b8b8     02 FA 05 A6 |  if_e	mov	result1, #2
1b8bc     30 00 90 AD |  if_e	jmp	#LR__3166
1b8c0     10 29 02 F6 | 	mov	local06, local02
1b8c4     09 28 46 F0 | 	shr	local06, #9
1b8c8     18 1E 06 F1 | 	add	local01, #24
1b8cc     0F 27 02 FB | 	rdlong	local05, local01
1b8d0     14 27 02 F1 | 	add	local05, local06
1b8d4     0F 27 62 FC | 	wrlong	local05, local01
1b8d8     34 22 06 F1 | 	add	local03, #52
1b8dc     FF 21 06 F5 | 	and	local02, #511
1b8e0     10 23 02 F1 | 	add	local03, local02
1b8e4     04 1E 06 F1 | 	add	local01, #4
1b8e8     0F 23 62 FC | 	wrlong	local03, local01
1b8ec                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1b8ec                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1b8ec                 | ' 
1b8ec                 | ' 	return FR_OK;
1b8ec     00 FA 05 F6 | 	mov	result1, #0
1b8f0                 | LR__3166
1b8f0     A7 F0 03 F6 | 	mov	ptra, fp
1b8f4     B2 00 A0 FD | 	call	#popregs_
1b8f8                 | _fatfs_cc_dir_sdi_ret
1b8f8     2D 00 64 FD | 	ret
1b8fc                 | 
1b8fc                 | _fatfs_cc_dir_next
1b8fc     05 4A 05 F6 | 	mov	COUNT_, #5
1b900     A8 00 A0 FD | 	call	#pushregs_
1b904     09 1F 02 F6 | 	mov	local01, arg01
1b908     0A 21 02 F6 | 	mov	local02, arg02
1b90c     0F 23 02 FB | 	rdlong	local03, local01
1b910     10 1E 06 F1 | 	add	local01, #16
1b914     0F 25 02 FB | 	rdlong	local04, local01
1b918     10 1E 86 F1 | 	sub	local01, #16
1b91c     20 24 06 F1 | 	add	local04, #32
1b920     00 10 00 FF 
1b924     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1b928     18 1E 06 31 |  if_ae	add	local01, #24
1b92c     0F 01 68 3C |  if_ae	wrlong	#0, local01
1b930     18 1E 86 31 |  if_ae	sub	local01, #24
1b934     18 1E 06 F1 | 	add	local01, #24
1b938     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b93c     18 1E 86 F1 | 	sub	local01, #24
1b940     04 FA 05 A6 |  if_e	mov	result1, #4
1b944     64 01 90 AD |  if_e	jmp	#LR__3175
1b948     FF 25 CE F7 | 	test	local04, #511 wz
1b94c     3C 01 90 5D |  if_ne	jmp	#LR__3174
1b950     18 1E 06 F1 | 	add	local01, #24
1b954     0F 15 02 FB | 	rdlong	arg02, local01
1b958     01 14 06 F1 | 	add	arg02, #1
1b95c     0F 15 62 FC | 	wrlong	arg02, local01
1b960     04 1E 86 F1 | 	sub	local01, #4
1b964     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b968     14 1E 86 F1 | 	sub	local01, #20
1b96c     2C 00 90 5D |  if_ne	jmp	#LR__3170
1b970     12 15 02 F6 | 	mov	arg02, local04
1b974     05 14 46 F0 | 	shr	arg02, #5
1b978     08 22 06 F1 | 	add	local03, #8
1b97c     11 21 E2 FA | 	rdword	local02, local03
1b980     08 22 86 F1 | 	sub	local03, #8
1b984     10 15 12 F2 | 	cmp	arg02, local02 wc
1b988     18 1E 06 31 |  if_ae	add	local01, #24
1b98c     0F 01 68 3C |  if_ae	wrlong	#0, local01
1b990                 | ' 				dp->sect = 0; return FR_NO_FILE;
1b990     04 FA 05 36 |  if_ae	mov	result1, #4
1b994     14 01 90 3D |  if_ae	jmp	#LR__3175
1b998     F0 00 90 FD | 	jmp	#LR__3173
1b99c                 | LR__3170
1b99c     12 13 02 F6 | 	mov	arg01, local04
1b9a0     09 12 46 F0 | 	shr	arg01, #9
1b9a4     0A 22 06 F1 | 	add	local03, #10
1b9a8     11 15 E2 FA | 	rdword	arg02, local03
1b9ac     0A 22 86 F1 | 	sub	local03, #10
1b9b0     01 14 86 F1 | 	sub	arg02, #1
1b9b4     0A 13 CA F7 | 	test	arg01, arg02 wz
1b9b8     D0 00 90 5D |  if_ne	jmp	#LR__3172
1b9bc     0F 13 02 F6 | 	mov	arg01, local01
1b9c0     14 1E 06 F1 | 	add	local01, #20
1b9c4     0F 15 02 FB | 	rdlong	arg02, local01
1b9c8     14 1E 86 F1 | 	sub	local01, #20
1b9cc     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1b9d0     FD 26 02 F6 | 	mov	local05, result1
1b9d4     02 26 16 F2 | 	cmp	local05, #2 wc
1b9d8     02 FA 05 C6 |  if_b	mov	result1, #2
1b9dc     CC 00 90 CD |  if_b	jmp	#LR__3175
1b9e0     FF FF 7F FF 
1b9e4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1b9e8     01 FA 05 A6 |  if_e	mov	result1, #1
1b9ec     BC 00 90 AD |  if_e	jmp	#LR__3175
1b9f0     18 22 06 F1 | 	add	local03, #24
1b9f4     11 15 02 FB | 	rdlong	arg02, local03
1b9f8     18 22 86 F1 | 	sub	local03, #24
1b9fc     0A 27 12 F2 | 	cmp	local05, arg02 wc
1ba00     68 00 90 CD |  if_b	jmp	#LR__3171
1ba04     00 20 0E F2 | 	cmp	local02, #0 wz
1ba08     18 1E 06 A1 |  if_e	add	local01, #24
1ba0c     0F 01 68 AC |  if_e	wrlong	#0, local01
1ba10                 | ' 						dp->sect = 0; return FR_NO_FILE;
1ba10     04 FA 05 A6 |  if_e	mov	result1, #4
1ba14     94 00 90 AD |  if_e	jmp	#LR__3175
1ba18     0F 13 02 F6 | 	mov	arg01, local01
1ba1c     14 1E 06 F1 | 	add	local01, #20
1ba20     0F 15 02 FB | 	rdlong	arg02, local01
1ba24     14 1E 86 F1 | 	sub	local01, #20
1ba28     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1ba2c     FD 26 0A F6 | 	mov	local05, result1 wz
1ba30     07 FA 05 A6 |  if_e	mov	result1, #7
1ba34     74 00 90 AD |  if_e	jmp	#LR__3175
1ba38     01 26 0E F2 | 	cmp	local05, #1 wz
1ba3c     02 FA 05 A6 |  if_e	mov	result1, #2
1ba40     68 00 90 AD |  if_e	jmp	#LR__3175
1ba44     FF FF 7F FF 
1ba48     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1ba4c     01 FA 05 A6 |  if_e	mov	result1, #1
1ba50     58 00 90 AD |  if_e	jmp	#LR__3175
1ba54     13 15 02 F6 | 	mov	arg02, local05
1ba58     11 13 02 F6 | 	mov	arg01, local03
1ba5c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1ba60     00 FA 0D F2 | 	cmp	result1, #0 wz
1ba64     01 FA 05 56 |  if_ne	mov	result1, #1
1ba68     40 00 90 5D |  if_ne	jmp	#LR__3175
1ba6c                 | LR__3171
1ba6c     14 1E 06 F1 | 	add	local01, #20
1ba70     0F 27 62 FC | 	wrlong	local05, local01
1ba74     11 13 02 F6 | 	mov	arg01, local03
1ba78     13 15 02 F6 | 	mov	arg02, local05
1ba7c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1ba80     04 1E 06 F1 | 	add	local01, #4
1ba84     0F FB 61 FC | 	wrlong	result1, local01
1ba88     18 1E 86 F1 | 	sub	local01, #24
1ba8c                 | LR__3172
1ba8c                 | LR__3173
1ba8c                 | LR__3174
1ba8c     10 1E 06 F1 | 	add	local01, #16
1ba90     0F 25 62 FC | 	wrlong	local04, local01
1ba94     34 22 06 F1 | 	add	local03, #52
1ba98     FF 25 06 F5 | 	and	local04, #511
1ba9c     12 23 02 F1 | 	add	local03, local04
1baa0     0C 1E 06 F1 | 	add	local01, #12
1baa4     0F 23 62 FC | 	wrlong	local03, local01
1baa8                 | ' #line 1771 "ff.c"
1baa8                 | ' 				}
1baa8                 | ' 				dp->clust = clst;
1baa8                 | ' 				dp->sect = clst2sect(fs, clst);
1baa8                 | ' 			}
1baa8                 | ' 		}
1baa8                 | ' 	}
1baa8                 | ' 	dp->dptr = ofs;
1baa8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1baa8                 | ' 
1baa8                 | ' 	return FR_OK;
1baa8     00 FA 05 F6 | 	mov	result1, #0
1baac                 | LR__3175
1baac     A7 F0 03 F6 | 	mov	ptra, fp
1bab0     B2 00 A0 FD | 	call	#popregs_
1bab4                 | _fatfs_cc_dir_next_ret
1bab4     2D 00 64 FD | 	ret
1bab8                 | 
1bab8                 | _fatfs_cc_dir_alloc
1bab8     08 4A 05 F6 | 	mov	COUNT_, #8
1babc     A8 00 A0 FD | 	call	#pushregs_
1bac0     09 1F 02 F6 | 	mov	local01, arg01
1bac4     0A 21 02 F6 | 	mov	local02, arg02
1bac8     0F 23 02 FB | 	rdlong	local03, local01
1bacc     0F 13 02 F6 | 	mov	arg01, local01
1bad0     00 14 06 F6 | 	mov	arg02, #0
1bad4     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1bad8     FD 24 0A F6 | 	mov	local04, result1 wz
1badc     70 00 90 5D |  if_ne	jmp	#LR__3184
1bae0     00 26 06 F6 | 	mov	local05, #0
1bae4                 | ' 		n = 0;
1bae4                 | ' 		do {
1bae4                 | LR__3180
1bae4     18 1E 06 F1 | 	add	local01, #24
1bae8     0F 15 02 FB | 	rdlong	arg02, local01
1baec     18 1E 86 F1 | 	sub	local01, #24
1baf0     11 13 02 F6 | 	mov	arg01, local03
1baf4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1baf8     FD 24 0A F6 | 	mov	local04, result1 wz
1bafc     50 00 90 5D |  if_ne	jmp	#LR__3183
1bb00     1C 1E 06 F1 | 	add	local01, #28
1bb04     0F 29 02 FB | 	rdlong	local06, local01
1bb08     1C 1E 86 F1 | 	sub	local01, #28
1bb0c     14 29 C2 FA | 	rdbyte	local06, local06
1bb10     E5 28 0E F2 | 	cmp	local06, #229 wz
1bb14     1C 1E 06 51 |  if_ne	add	local01, #28
1bb18     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1bb1c     1C 1E 86 51 |  if_ne	sub	local01, #28
1bb20     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1bb24     10 00 90 5D |  if_ne	jmp	#LR__3181
1bb28     01 26 06 F1 | 	add	local05, #1
1bb2c     10 27 0A F2 | 	cmp	local05, local02 wz
1bb30     1C 00 90 AD |  if_e	jmp	#LR__3183
1bb34     04 00 90 FD | 	jmp	#LR__3182
1bb38                 | LR__3181
1bb38     00 26 06 F6 | 	mov	local05, #0
1bb3c                 | LR__3182
1bb3c     0F 13 02 F6 | 	mov	arg01, local01
1bb40     01 14 06 F6 | 	mov	arg02, #1
1bb44     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1bb48     FD 24 0A F6 | 	mov	local04, result1 wz
1bb4c     94 FF 9F AD |  if_e	jmp	#LR__3180
1bb50                 | LR__3183
1bb50                 | LR__3184
1bb50     04 24 0E F2 | 	cmp	local04, #4 wz
1bb54     07 24 06 A6 |  if_e	mov	local04, #7
1bb58                 | ' 	return res;
1bb58     12 FB 01 F6 | 	mov	result1, local04
1bb5c     A7 F0 03 F6 | 	mov	ptra, fp
1bb60     B2 00 A0 FD | 	call	#popregs_
1bb64                 | _fatfs_cc_dir_alloc_ret
1bb64     2D 00 64 FD | 	ret
1bb68                 | 
1bb68                 | _fatfs_cc_ld_clust
1bb68     09 01 02 F6 | 	mov	_var01, arg01
1bb6c     0A 13 02 F6 | 	mov	arg01, arg02
1bb70     1A 12 06 F1 | 	add	arg01, #26
1bb74                 | ' {
1bb74                 | ' 
1bb74                 | ' 	return *((WORD*)ptr);
1bb74     09 FB E1 FA | 	rdword	result1, arg01
1bb78     FD 12 32 F9 | 	getword	arg01, result1, #0
1bb7c     00 01 C2 FA | 	rdbyte	_var01, _var01
1bb80     03 00 0E F2 | 	cmp	_var01, #3 wz
1bb84     14 14 06 A1 |  if_e	add	arg02, #20
1bb88                 | ' {
1bb88                 | ' 
1bb88                 | ' 	return *((WORD*)ptr);
1bb88     0A FB E1 AA |  if_e	rdword	result1, arg02
1bb8c     10 FA 65 A0 |  if_e	shl	result1, #16
1bb90     FD 12 42 A5 |  if_e	or	arg01, result1
1bb94                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1bb94                 | ' 	}
1bb94                 | ' 
1bb94                 | ' 	return cl;
1bb94     09 FB 01 F6 | 	mov	result1, arg01
1bb98                 | _fatfs_cc_ld_clust_ret
1bb98     2D 00 64 FD | 	ret
1bb9c                 | 
1bb9c                 | _fatfs_cc_st_clust
1bb9c     09 01 02 F6 | 	mov	_var01, arg01
1bba0     0A 13 02 F6 | 	mov	arg01, arg02
1bba4     1A 12 06 F1 | 	add	arg01, #26
1bba8     09 17 52 FC | 	wrword	arg03, arg01
1bbac     00 01 C2 FA | 	rdbyte	_var01, _var01
1bbb0     03 00 0E F2 | 	cmp	_var01, #3 wz
1bbb4     14 14 06 A1 |  if_e	add	arg02, #20
1bbb8     10 16 46 A0 |  if_e	shr	arg03, #16
1bbbc     0A 17 52 AC |  if_e	wrword	arg03, arg02
1bbc0                 | _fatfs_cc_st_clust_ret
1bbc0     2D 00 64 FD | 	ret
1bbc4                 | 
1bbc4                 | _fatfs_cc_cmp_lfn
1bbc4     07 4A 05 F6 | 	mov	COUNT_, #7
1bbc8     A8 00 A0 FD | 	call	#pushregs_
1bbcc     09 1F 02 F6 | 	mov	local01, arg01
1bbd0     0A 13 02 F6 | 	mov	arg01, arg02
1bbd4     1A 12 06 F1 | 	add	arg01, #26
1bbd8                 | ' {
1bbd8                 | ' 
1bbd8                 | ' 	return *((WORD*)ptr);
1bbd8     09 FB E9 FA | 	rdword	result1, arg01 wz
1bbdc     00 FA 05 56 |  if_ne	mov	result1, #0
1bbe0     E0 00 90 5D |  if_ne	jmp	#LR__3196
1bbe4     0A 21 C2 FA | 	rdbyte	local02, arg02
1bbe8     3F 20 06 F5 | 	and	local02, #63
1bbec     01 20 86 F1 | 	sub	local02, #1
1bbf0     0D 20 06 FD | 	qmul	local02, #13
1bbf4                 | ' 
1bbf4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1bbf4                 | ' 
1bbf4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1bbf4     01 22 06 F6 | 	mov	local03, #1
1bbf8     00 24 06 F6 | 	mov	local04, #0
1bbfc     18 26 62 FD | 	getqx	local05
1bc00                 | LR__3190
1bc00     0D 24 16 F2 | 	cmp	local04, #13 wc
1bc04     9C 00 90 3D |  if_ae	jmp	#LR__3195
1bc08     0A 13 02 F6 | 	mov	arg01, arg02
1bc0c     12 21 02 F6 | 	mov	local02, local04
1bc10     01 00 00 FF 
1bc14     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1bc18     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1bc1c     10 21 C2 FA | 	rdbyte	local02, local02
1bc20     01 20 06 FA | 	mul	local02, #1
1bc24     10 13 02 F1 | 	add	arg01, local02
1bc28     01 00 00 FF 
1bc2c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1bc30                 | ' {
1bc30                 | ' 
1bc30                 | ' 	return *((WORD*)ptr);
1bc30     09 FB E1 FA | 	rdword	result1, arg01
1bc34     FD 28 02 F6 | 	mov	local06, result1
1bc38     11 21 02 F6 | 	mov	local02, local03
1bc3c     0F 20 4E F7 | 	zerox	local02, #15 wz
1bc40     44 00 90 AD |  if_e	jmp	#LR__3193
1bc44     00 27 16 F2 | 	cmp	local05, #256 wc
1bc48     2C 00 90 3D |  if_ae	jmp	#LR__3191
1bc4c     14 13 32 F9 | 	getword	arg01, local06, #0
1bc50     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1bc54     FD 20 02 F6 | 	mov	local02, result1
1bc58     13 23 02 F6 | 	mov	local03, local05
1bc5c     01 22 66 F0 | 	shl	local03, #1
1bc60     0F 23 02 F1 | 	add	local03, local01
1bc64     11 13 E2 FA | 	rdword	arg01, local03
1bc68     01 26 06 F1 | 	add	local05, #1
1bc6c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1bc70     FD 20 0A F2 | 	cmp	local02, result1 wz
1bc74     08 00 90 AD |  if_e	jmp	#LR__3192
1bc78                 | LR__3191
1bc78                 | ' 				return 0;
1bc78     00 FA 05 F6 | 	mov	result1, #0
1bc7c     44 00 90 FD | 	jmp	#LR__3196
1bc80                 | LR__3192
1bc80     14 23 02 F6 | 	mov	local03, local06
1bc84     14 00 90 FD | 	jmp	#LR__3194
1bc88                 | LR__3193
1bc88     14 29 32 F9 | 	getword	local06, local06, #0
1bc8c     7F 00 00 FF 
1bc90     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1bc94     00 FA 05 56 |  if_ne	mov	result1, #0
1bc98     28 00 90 5D |  if_ne	jmp	#LR__3196
1bc9c                 | LR__3194
1bc9c     01 24 06 F1 | 	add	local04, #1
1bca0     5C FF 9F FD | 	jmp	#LR__3190
1bca4                 | LR__3195
1bca4     0A 21 C2 FA | 	rdbyte	local02, arg02
1bca8     40 20 CE F7 | 	test	local02, #64 wz
1bcac     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1bcb0     01 26 66 50 |  if_ne	shl	local05, #1
1bcb4     0F 27 02 51 |  if_ne	add	local05, local01
1bcb8     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1bcbc     00 FA 05 56 |  if_ne	mov	result1, #0
1bcc0                 | ' 
1bcc0                 | ' 	return 1;
1bcc0     01 FA 05 A6 |  if_e	mov	result1, #1
1bcc4                 | LR__3196
1bcc4     A7 F0 03 F6 | 	mov	ptra, fp
1bcc8     B2 00 A0 FD | 	call	#popregs_
1bccc                 | _fatfs_cc_cmp_lfn_ret
1bccc     2D 00 64 FD | 	ret
1bcd0                 | 
1bcd0                 | _fatfs_cc_pick_lfn
1bcd0     09 01 02 F6 | 	mov	_var01, arg01
1bcd4     0A 13 02 F6 | 	mov	arg01, arg02
1bcd8     1A 12 06 F1 | 	add	arg01, #26
1bcdc                 | ' {
1bcdc                 | ' 
1bcdc                 | ' 	return *((WORD*)ptr);
1bcdc     09 FB E9 FA | 	rdword	result1, arg01 wz
1bce0     00 FA 05 56 |  if_ne	mov	result1, #0
1bce4     D4 00 90 5D |  if_ne	jmp	#LR__3205
1bce8     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bcec     40 02 26 F5 | 	andn	_var02, #64
1bcf0     01 02 86 F1 | 	sub	_var02, #1
1bcf4     0D 02 06 FD | 	qmul	_var02, #13
1bcf8                 | ' 
1bcf8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1bcf8                 | ' 
1bcf8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1bcf8     01 04 06 F6 | 	mov	_var03, #1
1bcfc     00 06 06 F6 | 	mov	_var04, #0
1bd00     18 08 62 FD | 	getqx	_var05
1bd04                 | LR__3200
1bd04     0D 06 16 F2 | 	cmp	_var04, #13 wc
1bd08     80 00 90 3D |  if_ae	jmp	#LR__3203
1bd0c     0A 13 02 F6 | 	mov	arg01, arg02
1bd10     03 03 02 F6 | 	mov	_var02, _var04
1bd14     01 00 00 FF 
1bd18     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1bd1c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1bd20     01 03 C2 FA | 	rdbyte	_var02, _var02
1bd24     01 02 06 FA | 	mul	_var02, #1
1bd28     01 13 02 F1 | 	add	arg01, _var02
1bd2c     01 00 00 FF 
1bd30     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1bd34                 | ' {
1bd34                 | ' 
1bd34                 | ' 	return *((WORD*)ptr);
1bd34     09 FB E1 FA | 	rdword	result1, arg01
1bd38     FD 0A 02 F6 | 	mov	_var06, result1
1bd3c     02 03 02 F6 | 	mov	_var02, _var03
1bd40     0F 02 4E F7 | 	zerox	_var02, #15 wz
1bd44     28 00 90 AD |  if_e	jmp	#LR__3201
1bd48     00 09 16 F2 | 	cmp	_var05, #256 wc
1bd4c     00 FA 05 36 |  if_ae	mov	result1, #0
1bd50     68 00 90 3D |  if_ae	jmp	#LR__3205
1bd54     04 03 02 F6 | 	mov	_var02, _var05
1bd58     01 02 66 F0 | 	shl	_var02, #1
1bd5c     00 03 02 F1 | 	add	_var02, _var01
1bd60     05 05 02 F6 | 	mov	_var03, _var06
1bd64     01 05 52 FC | 	wrword	_var03, _var02
1bd68     01 08 06 F1 | 	add	_var05, #1
1bd6c     14 00 90 FD | 	jmp	#LR__3202
1bd70                 | LR__3201
1bd70     05 0B 32 F9 | 	getword	_var06, _var06, #0
1bd74     7F 00 00 FF 
1bd78     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1bd7c     00 FA 05 56 |  if_ne	mov	result1, #0
1bd80     38 00 90 5D |  if_ne	jmp	#LR__3205
1bd84                 | LR__3202
1bd84     01 06 06 F1 | 	add	_var04, #1
1bd88     78 FF 9F FD | 	jmp	#LR__3200
1bd8c                 | LR__3203
1bd8c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bd90     40 02 CE F7 | 	test	_var02, #64 wz
1bd94     02 0D 02 56 |  if_ne	mov	_var07, _var03
1bd98     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1bd9c     18 00 90 AD |  if_e	jmp	#LR__3204
1bda0     00 09 16 F2 | 	cmp	_var05, #256 wc
1bda4     00 FA 05 36 |  if_ae	mov	result1, #0
1bda8     10 00 90 3D |  if_ae	jmp	#LR__3205
1bdac     01 08 66 F0 | 	shl	_var05, #1
1bdb0     00 09 02 F1 | 	add	_var05, _var01
1bdb4     04 01 58 FC | 	wrword	#0, _var05
1bdb8                 | LR__3204
1bdb8                 | ' 		lfnbuf[i] = 0;
1bdb8                 | ' 	}
1bdb8                 | ' 
1bdb8                 | ' 	return 1;
1bdb8     01 FA 05 F6 | 	mov	result1, #1
1bdbc                 | LR__3205
1bdbc                 | _fatfs_cc_pick_lfn_ret
1bdbc     2D 00 64 FD | 	ret
1bdc0                 | 
1bdc0                 | _fatfs_cc_put_lfn
1bdc0     0D 14 06 F1 | 	add	arg02, #13
1bdc4     0A 19 42 FC | 	wrbyte	arg04, arg02
1bdc8     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1bdcc     01 18 86 F1 | 	sub	arg04, #1
1bdd0     0D 18 06 FD | 	qmul	arg04, #13
1bdd4     09 01 02 F6 | 	mov	_var01, arg01
1bdd8     02 14 86 F1 | 	sub	arg02, #2
1bddc     0A 1F 48 FC | 	wrbyte	#15, arg02
1bde0     01 14 06 F1 | 	add	arg02, #1
1bde4     0A 01 48 FC | 	wrbyte	#0, arg02
1bde8     0C 14 86 F1 | 	sub	arg02, #12
1bdec     0A 13 02 F6 | 	mov	arg01, arg02
1bdf0     1A 12 06 F1 | 	add	arg01, #26
1bdf4     09 01 58 FC | 	wrword	#0, arg01
1bdf8     00 02 06 F6 | 	mov	_var02, #0
1bdfc     00 04 06 F6 | 	mov	_var03, #0
1be00                 | ' 	BYTE* dir,
1be00                 | ' 	BYTE ord,
1be00                 | ' 	BYTE sum
1be00                 | ' )
1be00                 | ' {
1be00                 | ' 	UINT i, s;
1be00                 | ' 	WCHAR wc;
1be00                 | ' 
1be00                 | ' 
1be00                 | ' 	dir[ 13 ] = sum;
1be00                 | ' 	dir[ 11 ] =  0x0F ;
1be00                 | ' 	dir[ 12 ] = 0;
1be00                 | ' 	st_word(dir +  26 , 0);
1be00                 | ' 
1be00                 | ' 	i = (ord - 1) * 13;
1be00                 | ' 	s = wc = 0;
1be00                 | ' 	do {
1be00     01 00 00 FF 
1be04     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1be08     18 06 62 FD | 	getqx	_var04
1be0c     97 2A 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
1be10                 | LR__3210
1be10     01 19 32 F9 | 	getword	arg04, _var02, #0
1be14     7F 00 00 FF 
1be18     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1be1c     03 13 02 56 |  if_ne	mov	arg01, _var04
1be20     01 06 06 51 |  if_ne	add	_var04, #1
1be24     01 12 66 50 |  if_ne	shl	arg01, #1
1be28     00 13 02 51 |  if_ne	add	arg01, _var01
1be2c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1be30     0A 13 02 F6 | 	mov	arg01, arg02
1be34     02 19 02 F6 | 	mov	arg04, _var03
1be38     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1be3c     0C 19 C2 FA | 	rdbyte	arg04, arg04
1be40     01 18 06 FA | 	mul	arg04, #1
1be44     0C 13 02 F1 | 	add	arg01, arg04
1be48     09 03 52 FC | 	wrword	_var02, arg01
1be4c     01 19 02 F6 | 	mov	arg04, _var02
1be50     0F 18 4E F7 | 	zerox	arg04, #15 wz
1be54     0F 02 CE A9 |  if_e	bmask	_var02, #15
1be58     01 04 06 F1 | 	add	_var03, #1
1be5c     0D 04 16 F2 | 	cmp	_var03, #13 wc
1be60     AC FF 9F CD |  if_b	jmp	#LR__3210
1be64                 | LR__3211
1be64     01 00 00 FF 
1be68     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1be6c     01 03 32 F9 | 	getword	_var02, _var02, #0
1be70     7F 00 00 FF 
1be74     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1be78     01 06 66 50 |  if_ne	shl	_var04, #1
1be7c     00 07 02 51 |  if_ne	add	_var04, _var01
1be80     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1be84     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1be88     40 16 46 A5 |  if_e	or	arg03, #64
1be8c     0A 17 42 FC | 	wrbyte	arg03, arg02
1be90                 | _fatfs_cc_put_lfn_ret
1be90     2D 00 64 FD | 	ret
1be94                 | 
1be94                 | _fatfs_cc_gen_numname
1be94     08 4A 05 F6 | 	mov	COUNT_, #8
1be98     A8 00 A0 FD | 	call	#pushregs_
1be9c     2C F0 07 F1 | 	add	ptra, #44
1bea0     09 1F 02 F6 | 	mov	local01, arg01
1bea4     0A 21 02 F6 | 	mov	local02, arg02
1bea8     0B 23 02 F6 | 	mov	local03, arg03
1beac     0C 25 02 F6 | 	mov	local04, arg04
1beb0     0F 13 02 F6 | 	mov	arg01, local01
1beb4     10 15 02 F6 | 	mov	arg02, local02
1beb8     0B 16 06 F6 | 	mov	arg03, #11
1bebc     E0 7A BF FD | 	call	#__system____builtin_memmove
1bec0     06 24 16 F2 | 	cmp	local04, #6 wc
1bec4     48 00 90 CD |  if_b	jmp	#LR__3225
1bec8     12 27 02 F6 | 	mov	local05, local04
1becc     97 1E 48 FB | 	callpa	#(@LR__3223-@LR__3220)>>2,fcache_load_ptr_
1bed0                 | ' 		sreg = seq;
1bed0                 | ' 		while (*lfn) {
1bed0                 | LR__3220
1bed0     11 29 EA FA | 	rdword	local06, local03 wz
1bed4     34 00 90 AD |  if_e	jmp	#LR__3224
1bed8     11 2B E2 FA | 	rdword	local07, local03
1bedc                 | ' 			wc = *lfn++;
1bedc                 | ' 			for (i = 0; i < 16; i++) {
1bedc     02 22 06 F1 | 	add	local03, #2
1bee0     10 12 DC FC | 	rep	@LR__3222, #16
1bee4                 | LR__3221
1bee4     01 26 66 F0 | 	shl	local05, #1
1bee8     15 29 32 F9 | 	getword	local06, local07, #0
1beec     01 28 06 F5 | 	and	local06, #1
1bef0     14 27 02 F1 | 	add	local05, local06
1bef4     15 2B 32 F9 | 	getword	local07, local07, #0
1bef8     01 2A 46 F0 | 	shr	local07, #1
1befc     10 26 2E F4 | 	testbn	local05, #16 wz
1bf00     88 00 00 5F 
1bf04     21 26 66 55 |  if_ne	xor	local05, ##69665
1bf08                 | LR__3222
1bf08     C4 FF 9F FD | 	jmp	#LR__3220
1bf0c                 | LR__3223
1bf0c                 | LR__3224
1bf0c     13 25 02 F6 | 	mov	local04, local05
1bf10                 | LR__3225
1bf10     07 2A 06 F6 | 	mov	local07, #7
1bf14                 | ' 			}
1bf14                 | ' 		}
1bf14                 | ' 		seq = (UINT)sreg;
1bf14                 | ' 	}
1bf14                 | ' 
1bf14                 | ' 
1bf14                 | ' 	i = 7;
1bf14                 | ' 	do {
1bf14     10 4E 05 F1 | 	add	fp, #16
1bf18     97 1A 48 FB | 	callpa	#(@LR__3227-@LR__3226)>>2,fcache_load_ptr_
1bf1c                 | LR__3226
1bf1c     12 27 42 F8 | 	getnib	local05, local04, #0
1bf20     30 26 06 F1 | 	add	local05, #48
1bf24     04 24 46 F0 | 	shr	local04, #4
1bf28     13 29 E2 F8 | 	getbyte	local06, local05, #0
1bf2c     3A 28 16 F2 | 	cmp	local06, #58 wc
1bf30     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1bf34     07 26 06 31 |  if_ae	add	local05, #7
1bf38     15 29 02 F6 | 	mov	local06, local07
1bf3c     01 2A 8E F1 | 	sub	local07, #1 wz
1bf40     A7 28 02 F1 | 	add	local06, fp
1bf44     14 27 42 FC | 	wrbyte	local05, local06
1bf48     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1bf4c     CC FF 9F 5D |  if_ne	jmp	#LR__3226
1bf50                 | LR__3227
1bf50     15 29 02 F6 | 	mov	local06, local07
1bf54     A7 28 02 F1 | 	add	local06, fp
1bf58     14 FD 48 FC | 	wrbyte	#126, local06
1bf5c                 | ' 	ns[i] = '~';
1bf5c                 | ' 
1bf5c                 | ' 
1bf5c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1bf5c     00 26 06 F6 | 	mov	local05, #0
1bf60     10 4E 85 F1 | 	sub	fp, #16
1bf64     97 2A 48 FB | 	callpa	#(@LR__3230-@LR__3228)>>2,fcache_load_ptr_
1bf68                 | LR__3228
1bf68     15 27 12 F2 | 	cmp	local05, local07 wc
1bf6c     4C 00 90 3D |  if_ae	jmp	#LR__3231
1bf70     13 29 02 F6 | 	mov	local06, local05
1bf74     0F 29 02 F1 | 	add	local06, local01
1bf78     14 29 C2 FA | 	rdbyte	local06, local06
1bf7c     20 28 0E F2 | 	cmp	local06, #32 wz
1bf80     38 00 90 AD |  if_e	jmp	#LR__3231
1bf84     13 13 02 F6 | 	mov	arg01, local05
1bf88     0F 13 02 F1 | 	add	arg01, local01
1bf8c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1bf90     00 FA 05 56 |  if_ne	mov	result1, #0
1bf94                 | ' 
1bf94                 | ' 	return 0;
1bf94     00 FA 05 A6 |  if_e	mov	result1, #0
1bf98     00 FA 0D F2 | 	cmp	result1, #0 wz
1bf9c     14 00 90 AD |  if_e	jmp	#LR__3229
1bfa0     15 29 02 F6 | 	mov	local06, local07
1bfa4     01 28 86 F1 | 	sub	local06, #1
1bfa8     14 27 0A F2 | 	cmp	local05, local06 wz
1bfac     0C 00 90 AD |  if_e	jmp	#LR__3231
1bfb0     01 26 06 F1 | 	add	local05, #1
1bfb4                 | LR__3229
1bfb4     01 26 06 F1 | 	add	local05, #1
1bfb8     AC FF 9F FD | 	jmp	#LR__3228
1bfbc                 | LR__3230
1bfbc                 | LR__3231
1bfbc     97 20 48 FB | 	callpa	#(@LR__3235-@LR__3232)>>2,fcache_load_ptr_
1bfc0                 | ' 			j++;
1bfc0                 | ' 		}
1bfc0                 | ' 	}
1bfc0                 | ' 	do {
1bfc0                 | LR__3232
1bfc0     13 29 02 F6 | 	mov	local06, local05
1bfc4     0F 29 02 F1 | 	add	local06, local01
1bfc8     08 2A 16 F2 | 	cmp	local07, #8 wc
1bfcc     01 26 06 F1 | 	add	local05, #1
1bfd0     1C 00 90 3D |  if_ae	jmp	#LR__3233
1bfd4     15 25 02 F6 | 	mov	local04, local07
1bfd8     10 4E 05 F1 | 	add	fp, #16
1bfdc     A7 24 02 F1 | 	add	local04, fp
1bfe0     12 2D C2 FA | 	rdbyte	local08, local04
1bfe4     01 2A 06 F1 | 	add	local07, #1
1bfe8     10 4E 85 F1 | 	sub	fp, #16
1bfec     04 00 90 FD | 	jmp	#LR__3234
1bff0                 | LR__3233
1bff0     20 2C 06 F6 | 	mov	local08, #32
1bff4                 | LR__3234
1bff4     14 2D 42 FC | 	wrbyte	local08, local06
1bff8     08 26 16 F2 | 	cmp	local05, #8 wc
1bffc     C0 FF 9F CD |  if_b	jmp	#LR__3232
1c000                 | LR__3235
1c000     A7 F0 03 F6 | 	mov	ptra, fp
1c004     B2 00 A0 FD | 	call	#popregs_
1c008                 | _fatfs_cc_gen_numname_ret
1c008     2D 00 64 FD | 	ret
1c00c                 | 
1c00c                 | _fatfs_cc_sum_sfn
1c00c     00 00 06 F6 | 	mov	_var01, #0
1c010                 | ' )
1c010                 | ' {
1c010                 | ' 	BYTE sum = 0;
1c010                 | ' 	UINT n = 11;
1c010                 | ' 
1c010                 | ' 	do {
1c010     97 12 48 FB | 	callpa	#(@LR__3242-@LR__3240)>>2,fcache_load_ptr_
1c014                 | LR__3240
1c014     0B 10 DC FC | 	rep	@LR__3243, #11
1c018                 | LR__3241
1c018     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1c01c     01 FA 45 F0 | 	shr	result1, #1
1c020     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1c024     07 00 66 F0 | 	shl	_var01, #7
1c028     00 FB 01 F1 | 	add	result1, _var01
1c02c     09 01 C2 FA | 	rdbyte	_var01, arg01
1c030     FD 00 02 F1 | 	add	_var01, result1
1c034     01 12 06 F1 | 	add	arg01, #1
1c038                 | LR__3242
1c038                 | LR__3243
1c038                 | ' 	return sum;
1c038     00 FB 01 F6 | 	mov	result1, _var01
1c03c                 | _fatfs_cc_sum_sfn_ret
1c03c     2D 00 64 FD | 	ret
1c040                 | 
1c040                 | _fatfs_cc_dir_read
1c040     0C 4A 05 F6 | 	mov	COUNT_, #12
1c044     A8 00 A0 FD | 	call	#pushregs_
1c048     09 1F 02 F6 | 	mov	local01, arg01
1c04c     0A 21 02 F6 | 	mov	local02, arg02
1c050     04 22 06 F6 | 	mov	local03, #4
1c054     0F 25 02 FB | 	rdlong	local04, local01
1c058     FF 26 06 F6 | 	mov	local05, #255
1c05c     FF 28 06 F6 | 	mov	local06, #255
1c060                 | ' )
1c060                 | ' {
1c060                 | ' 	FRESULT res = FR_NO_FILE;
1c060                 | ' 	FATFS *fs = dp->obj.fs;
1c060                 | ' 	BYTE attr, b;
1c060                 | ' 
1c060                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1c060                 | ' 
1c060                 | ' 
1c060                 | ' 	while (dp->sect) {
1c060                 | LR__3250
1c060     18 1E 06 F1 | 	add	local01, #24
1c064     0F FB 09 FB | 	rdlong	result1, local01 wz
1c068     18 1E 86 F1 | 	sub	local01, #24
1c06c     AC 01 90 AD |  if_e	jmp	#LR__3260
1c070     18 1E 06 F1 | 	add	local01, #24
1c074     0F 15 02 FB | 	rdlong	arg02, local01
1c078     18 1E 86 F1 | 	sub	local01, #24
1c07c     12 13 02 F6 | 	mov	arg01, local04
1c080     AC ED BF FD | 	call	#_fatfs_cc_move_window
1c084     FD 22 0A F6 | 	mov	local03, result1 wz
1c088     90 01 90 5D |  if_ne	jmp	#LR__3260
1c08c     1C 1E 06 F1 | 	add	local01, #28
1c090     0F FB 01 FB | 	rdlong	result1, local01
1c094     1C 1E 86 F1 | 	sub	local01, #28
1c098     FD 2A C2 FA | 	rdbyte	local07, result1
1c09c     15 FB 01 F6 | 	mov	result1, local07
1c0a0     07 FA 4D F7 | 	zerox	result1, #7 wz
1c0a4     04 22 06 A6 |  if_e	mov	local03, #4
1c0a8                 | ' 			res = FR_NO_FILE; break;
1c0a8     70 01 90 AD |  if_e	jmp	#LR__3260
1c0ac     1C 1E 06 F1 | 	add	local01, #28
1c0b0     0F 2D 02 FB | 	rdlong	local08, local01
1c0b4     0B 2C 06 F1 | 	add	local08, #11
1c0b8     16 2F C2 FA | 	rdbyte	local09, local08
1c0bc     3F 2E 06 F5 | 	and	local09, #63
1c0c0     16 1E 86 F1 | 	sub	local01, #22
1c0c4     0F 2F 42 FC | 	wrbyte	local09, local01
1c0c8     06 1E 86 F1 | 	sub	local01, #6
1c0cc     15 FB E1 F8 | 	getbyte	result1, local07, #0
1c0d0     E5 FA 0D F2 | 	cmp	result1, #229 wz
1c0d4     15 2D 02 56 |  if_ne	mov	local08, local07
1c0d8     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1c0dc     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1c0e0     1C 00 90 AD |  if_e	jmp	#LR__3251
1c0e4     00 30 06 F6 | 	mov	local10, #0
1c0e8     17 2D E2 F8 | 	getbyte	local08, local09, #0
1c0ec     20 2C 26 F5 | 	andn	local08, #32
1c0f0     08 2C 0E F2 | 	cmp	local08, #8 wz
1c0f4     01 30 06 A6 |  if_e	mov	local10, #1
1c0f8     10 31 0A F2 | 	cmp	local10, local02 wz
1c0fc     08 00 90 AD |  if_e	jmp	#LR__3252
1c100                 | LR__3251
1c100     FF 26 06 F6 | 	mov	local05, #255
1c104     00 01 90 FD | 	jmp	#LR__3259
1c108                 | LR__3252
1c108     17 2F E2 F8 | 	getbyte	local09, local09, #0
1c10c     0F 2E 0E F2 | 	cmp	local09, #15 wz
1c110     B4 00 90 5D |  if_ne	jmp	#LR__3256
1c114     15 33 E2 F8 | 	getbyte	local11, local07, #0
1c118     40 32 CE F7 | 	test	local11, #64 wz
1c11c     30 00 90 AD |  if_e	jmp	#LR__3253
1c120     1C 1E 06 F1 | 	add	local01, #28
1c124     0F 33 02 FB | 	rdlong	local11, local01
1c128     0D 32 06 F1 | 	add	local11, #13
1c12c     19 29 C2 FA | 	rdbyte	local06, local11
1c130     15 2B E2 F8 | 	getbyte	local07, local07, #0
1c134     BF 2A 06 F5 | 	and	local07, #191
1c138     15 27 02 F6 | 	mov	local05, local07
1c13c     0C 1E 86 F1 | 	sub	local01, #12
1c140     0F 33 02 FB | 	rdlong	local11, local01
1c144     1C 1E 06 F1 | 	add	local01, #28
1c148     0F 33 62 FC | 	wrlong	local11, local01
1c14c     2C 1E 86 F1 | 	sub	local01, #44
1c150                 | LR__3253
1c150     15 2D E2 F8 | 	getbyte	local08, local07, #0
1c154     13 31 E2 F8 | 	getbyte	local10, local05, #0
1c158     18 2D 0A F2 | 	cmp	local08, local10 wz
1c15c     5C 00 90 5D |  if_ne	jmp	#LR__3254
1c160     14 31 E2 F8 | 	getbyte	local10, local06, #0
1c164     1C 1E 06 F1 | 	add	local01, #28
1c168     0F 2F 02 FB | 	rdlong	local09, local01
1c16c     1C 1E 86 F1 | 	sub	local01, #28
1c170     0D 2E 06 F1 | 	add	local09, #13
1c174     17 2D C2 FA | 	rdbyte	local08, local09
1c178     16 2F E2 F8 | 	getbyte	local09, local08, #0
1c17c     17 31 0A F2 | 	cmp	local10, local09 wz
1c180     38 00 90 5D |  if_ne	jmp	#LR__3254
1c184     0C 24 06 F1 | 	add	local04, #12
1c188     12 13 02 FB | 	rdlong	arg01, local04
1c18c     0C 24 86 F1 | 	sub	local04, #12
1c190     1C 1E 06 F1 | 	add	local01, #28
1c194     0F 35 02 FB | 	rdlong	local12, local01
1c198     1C 1E 86 F1 | 	sub	local01, #28
1c19c     1A 15 02 F6 | 	mov	arg02, local12
1c1a0     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1c1a4     00 FA 4D F2 | 	cmps	result1, #0 wz
1c1a8     13 35 02 56 |  if_ne	mov	local12, local05
1c1ac     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1c1b0     01 34 86 51 |  if_ne	sub	local12, #1
1c1b4     1A 33 02 56 |  if_ne	mov	local11, local12
1c1b8     04 00 90 5D |  if_ne	jmp	#LR__3255
1c1bc                 | LR__3254
1c1bc     FF 32 06 F6 | 	mov	local11, #255
1c1c0                 | LR__3255
1c1c0     19 27 02 F6 | 	mov	local05, local11
1c1c4     40 00 90 FD | 	jmp	#LR__3258
1c1c8                 | LR__3256
1c1c8     13 33 02 F6 | 	mov	local11, local05
1c1cc     07 32 4E F7 | 	zerox	local11, #7 wz
1c1d0     20 00 90 5D |  if_ne	jmp	#LR__3257
1c1d4     14 29 E2 F8 | 	getbyte	local06, local06, #0
1c1d8     1C 1E 06 F1 | 	add	local01, #28
1c1dc     0F 13 02 FB | 	rdlong	arg01, local01
1c1e0     1C 1E 86 F1 | 	sub	local01, #28
1c1e4     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1c1e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c1ec     FD 28 0A F2 | 	cmp	local06, result1 wz
1c1f0     28 00 90 AD |  if_e	jmp	#LR__3260
1c1f4                 | LR__3257
1c1f4     2C 1E 06 F1 | 	add	local01, #44
1c1f8     FF FF FF FF 
1c1fc     0F FF 6B FC | 	wrlong	##-1, local01
1c200     2C 1E 86 F1 | 	sub	local01, #44
1c204                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1c204                 | ' 					}
1c204                 | ' 					break;
1c204     14 00 90 FD | 	jmp	#LR__3260
1c208                 | LR__3258
1c208                 | LR__3259
1c208     0F 13 02 F6 | 	mov	arg01, local01
1c20c     00 14 06 F6 | 	mov	arg02, #0
1c210     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1c214     FD 22 0A F6 | 	mov	local03, result1 wz
1c218     44 FE 9F AD |  if_e	jmp	#LR__3250
1c21c                 | LR__3260
1c21c     00 22 0E F2 | 	cmp	local03, #0 wz
1c220     18 1E 06 51 |  if_ne	add	local01, #24
1c224     0F 01 68 5C |  if_ne	wrlong	#0, local01
1c228                 | ' 	return res;
1c228     11 FB 01 F6 | 	mov	result1, local03
1c22c     A7 F0 03 F6 | 	mov	ptra, fp
1c230     B2 00 A0 FD | 	call	#popregs_
1c234                 | _fatfs_cc_dir_read_ret
1c234     2D 00 64 FD | 	ret
1c238                 | 
1c238                 | _fatfs_cc_dir_find
1c238     0B 4A 05 F6 | 	mov	COUNT_, #11
1c23c     A8 00 A0 FD | 	call	#pushregs_
1c240     09 1F 02 F6 | 	mov	local01, arg01
1c244     0F 21 02 FB | 	rdlong	local02, local01
1c248     0F 13 02 F6 | 	mov	arg01, local01
1c24c     00 14 06 F6 | 	mov	arg02, #0
1c250     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1c254     00 FA 0D F2 | 	cmp	result1, #0 wz
1c258     18 02 90 5D |  if_ne	jmp	#LR__3282
1c25c     FF 22 06 F6 | 	mov	local03, #255
1c260     FF 24 06 F6 | 	mov	local04, #255
1c264     2C 1E 06 F1 | 	add	local01, #44
1c268     FF FF FF FF 
1c26c     0F FF 6B FC | 	wrlong	##-1, local01
1c270     2C 1E 86 F1 | 	sub	local01, #44
1c274                 | ' #line 2404 "ff.c"
1c274                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1c274                 | ' 
1c274                 | ' 	do {
1c274                 | LR__3270
1c274     18 1E 06 F1 | 	add	local01, #24
1c278     0F 15 02 FB | 	rdlong	arg02, local01
1c27c     18 1E 86 F1 | 	sub	local01, #24
1c280     10 13 02 F6 | 	mov	arg01, local02
1c284     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1c288     FD 26 0A F6 | 	mov	local05, result1 wz
1c28c     E0 01 90 5D |  if_ne	jmp	#LR__3281
1c290     1C 1E 06 F1 | 	add	local01, #28
1c294     0F 17 02 FB | 	rdlong	arg03, local01
1c298     1C 1E 86 F1 | 	sub	local01, #28
1c29c     0B 29 C2 FA | 	rdbyte	local06, arg03
1c2a0     14 17 02 F6 | 	mov	arg03, local06
1c2a4     07 16 4E F7 | 	zerox	arg03, #7 wz
1c2a8     04 26 06 A6 |  if_e	mov	local05, #4
1c2ac     C0 01 90 AD |  if_e	jmp	#LR__3281
1c2b0     1C 1E 06 F1 | 	add	local01, #28
1c2b4     0F 2B 02 FB | 	rdlong	local07, local01
1c2b8     15 17 02 F6 | 	mov	arg03, local07
1c2bc     0B 16 06 F1 | 	add	arg03, #11
1c2c0     0B 2D C2 FA | 	rdbyte	local08, arg03
1c2c4     3F 2C 06 F5 | 	and	local08, #63
1c2c8     16 1E 86 F1 | 	sub	local01, #22
1c2cc     0F 2D 42 FC | 	wrbyte	local08, local01
1c2d0     06 1E 86 F1 | 	sub	local01, #6
1c2d4     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1c2d8     E5 16 0E F2 | 	cmp	arg03, #229 wz
1c2dc     18 00 90 AD |  if_e	jmp	#LR__3271
1c2e0     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1c2e4     08 16 CE F7 | 	test	arg03, #8 wz
1c2e8     16 2B 02 56 |  if_ne	mov	local07, local08
1c2ec     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1c2f0     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1c2f4     18 00 90 AD |  if_e	jmp	#LR__3272
1c2f8                 | LR__3271
1c2f8     FF 24 06 F6 | 	mov	local04, #255
1c2fc     2C 1E 06 F1 | 	add	local01, #44
1c300     FF FF FF FF 
1c304     0F FF 6B FC | 	wrlong	##-1, local01
1c308     2C 1E 86 F1 | 	sub	local01, #44
1c30c     4C 01 90 FD | 	jmp	#LR__3280
1c310                 | LR__3272
1c310     16 2D E2 F8 | 	getbyte	local08, local08, #0
1c314     0F 2C 0E F2 | 	cmp	local08, #15 wz
1c318     C8 00 90 5D |  if_ne	jmp	#LR__3276
1c31c     2B 1E 06 F1 | 	add	local01, #43
1c320     0F 2D C2 FA | 	rdbyte	local08, local01
1c324     2B 1E 86 F1 | 	sub	local01, #43
1c328     40 2C CE F7 | 	test	local08, #64 wz
1c32c     2C 01 90 5D |  if_ne	jmp	#LR__3279
1c330     14 2F E2 F8 | 	getbyte	local09, local06, #0
1c334     40 2E CE F7 | 	test	local09, #64 wz
1c338     30 00 90 AD |  if_e	jmp	#LR__3273
1c33c     1C 1E 06 F1 | 	add	local01, #28
1c340     0F 2F 02 FB | 	rdlong	local09, local01
1c344     0D 2E 06 F1 | 	add	local09, #13
1c348     17 23 C2 FA | 	rdbyte	local03, local09
1c34c     14 29 E2 F8 | 	getbyte	local06, local06, #0
1c350     BF 28 06 F5 | 	and	local06, #191
1c354     14 25 02 F6 | 	mov	local04, local06
1c358     0C 1E 86 F1 | 	sub	local01, #12
1c35c     0F 2F 02 FB | 	rdlong	local09, local01
1c360     1C 1E 06 F1 | 	add	local01, #28
1c364     0F 2F 62 FC | 	wrlong	local09, local01
1c368     2C 1E 86 F1 | 	sub	local01, #44
1c36c                 | LR__3273
1c36c     14 31 E2 F8 | 	getbyte	local10, local06, #0
1c370     12 2B E2 F8 | 	getbyte	local07, local04, #0
1c374     15 31 0A F2 | 	cmp	local10, local07 wz
1c378     5C 00 90 5D |  if_ne	jmp	#LR__3274
1c37c     11 2D E2 F8 | 	getbyte	local08, local03, #0
1c380     1C 1E 06 F1 | 	add	local01, #28
1c384     0F 2B 02 FB | 	rdlong	local07, local01
1c388     1C 1E 86 F1 | 	sub	local01, #28
1c38c     0D 2A 06 F1 | 	add	local07, #13
1c390     15 29 C2 FA | 	rdbyte	local06, local07
1c394     14 2B E2 F8 | 	getbyte	local07, local06, #0
1c398     15 2D 0A F2 | 	cmp	local08, local07 wz
1c39c     38 00 90 5D |  if_ne	jmp	#LR__3274
1c3a0     0C 20 06 F1 | 	add	local02, #12
1c3a4     10 13 02 FB | 	rdlong	arg01, local02
1c3a8     0C 20 86 F1 | 	sub	local02, #12
1c3ac     1C 1E 06 F1 | 	add	local01, #28
1c3b0     0F 33 02 FB | 	rdlong	local11, local01
1c3b4     1C 1E 86 F1 | 	sub	local01, #28
1c3b8     19 15 02 F6 | 	mov	arg02, local11
1c3bc     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1c3c0     00 FA 4D F2 | 	cmps	result1, #0 wz
1c3c4     12 33 02 56 |  if_ne	mov	local11, local04
1c3c8     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1c3cc     01 32 86 51 |  if_ne	sub	local11, #1
1c3d0     19 2F 02 56 |  if_ne	mov	local09, local11
1c3d4     04 00 90 5D |  if_ne	jmp	#LR__3275
1c3d8                 | LR__3274
1c3d8     FF 2E 06 F6 | 	mov	local09, #255
1c3dc                 | LR__3275
1c3dc     17 25 02 F6 | 	mov	local04, local09
1c3e0     78 00 90 FD | 	jmp	#LR__3279
1c3e4                 | LR__3276
1c3e4     12 2F 02 F6 | 	mov	local09, local04
1c3e8     07 2E 4E F7 | 	zerox	local09, #7 wz
1c3ec     20 00 90 5D |  if_ne	jmp	#LR__3277
1c3f0     11 31 E2 F8 | 	getbyte	local10, local03, #0
1c3f4     1C 1E 06 F1 | 	add	local01, #28
1c3f8     0F 13 02 FB | 	rdlong	arg01, local01
1c3fc     1C 1E 86 F1 | 	sub	local01, #28
1c400     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1c404     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c408     FD 30 0A F2 | 	cmp	local10, result1 wz
1c40c     60 00 90 AD |  if_e	jmp	#LR__3281
1c410                 | LR__3277
1c410     2B 1E 06 F1 | 	add	local01, #43
1c414     0F 2F C2 FA | 	rdbyte	local09, local01
1c418     2B 1E 86 F1 | 	sub	local01, #43
1c41c     01 2E CE F7 | 	test	local09, #1 wz
1c420     24 00 90 5D |  if_ne	jmp	#LR__3278
1c424     1C 1E 06 F1 | 	add	local01, #28
1c428     0F 13 02 FB | 	rdlong	arg01, local01
1c42c     04 1E 06 F1 | 	add	local01, #4
1c430     0F 15 02 F6 | 	mov	arg02, local01
1c434     20 1E 86 F1 | 	sub	local01, #32
1c438     0B 16 06 F6 | 	mov	arg03, #11
1c43c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1c440     00 FA 0D F2 | 	cmp	result1, #0 wz
1c444     28 00 90 AD |  if_e	jmp	#LR__3281
1c448                 | LR__3278
1c448     FF 24 06 F6 | 	mov	local04, #255
1c44c     2C 1E 06 F1 | 	add	local01, #44
1c450     FF FF FF FF 
1c454     0F FF 6B FC | 	wrlong	##-1, local01
1c458     2C 1E 86 F1 | 	sub	local01, #44
1c45c                 | LR__3279
1c45c                 | LR__3280
1c45c     0F 13 02 F6 | 	mov	arg01, local01
1c460     00 14 06 F6 | 	mov	arg02, #0
1c464     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1c468     FD 26 0A F6 | 	mov	local05, result1 wz
1c46c     04 FE 9F AD |  if_e	jmp	#LR__3270
1c470                 | LR__3281
1c470                 | ' 
1c470                 | ' 	return res;
1c470     13 FB 01 F6 | 	mov	result1, local05
1c474                 | LR__3282
1c474     A7 F0 03 F6 | 	mov	ptra, fp
1c478     B2 00 A0 FD | 	call	#popregs_
1c47c                 | _fatfs_cc_dir_find_ret
1c47c     2D 00 64 FD | 	ret
1c480                 | 
1c480                 | _fatfs_cc_dir_register
1c480     0A 4A 05 F6 | 	mov	COUNT_, #10
1c484     A8 00 A0 FD | 	call	#pushregs_
1c488     2C F0 07 F1 | 	add	ptra, #44
1c48c     04 4E 05 F1 | 	add	fp, #4
1c490     A7 12 62 FC | 	wrlong	arg01, fp
1c494     09 1F 02 FB | 	rdlong	local01, arg01
1c498     08 4E 05 F1 | 	add	fp, #8
1c49c     A7 1E 62 FC | 	wrlong	local01, fp
1c4a0     08 4E 85 F1 | 	sub	fp, #8
1c4a4     A7 20 02 FB | 	rdlong	local02, fp
1c4a8     04 4E 85 F1 | 	sub	fp, #4
1c4ac     2B 20 06 F1 | 	add	local02, #43
1c4b0     10 21 C2 FA | 	rdbyte	local02, local02
1c4b4     A0 20 CE F7 | 	test	local02, #160 wz
1c4b8     06 FA 05 56 |  if_ne	mov	result1, #6
1c4bc     F8 03 90 5D |  if_ne	jmp	#LR__3305
1c4c0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1c4c0     14 4E 05 F1 | 	add	fp, #20
1c4c4     A7 00 68 FC | 	wrlong	#0, fp
1c4c8     14 4E 85 F1 | 	sub	fp, #20
1c4cc     97 28 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
1c4d0                 | LR__3290
1c4d0     0C 4E 05 F1 | 	add	fp, #12
1c4d4     A7 20 02 FB | 	rdlong	local02, fp
1c4d8     0C 20 06 F1 | 	add	local02, #12
1c4dc     10 23 02 FB | 	rdlong	local03, local02
1c4e0     08 4E 05 F1 | 	add	fp, #8
1c4e4     A7 24 02 FB | 	rdlong	local04, fp
1c4e8     14 4E 85 F1 | 	sub	fp, #20
1c4ec     01 24 66 F0 | 	shl	local04, #1
1c4f0     11 25 02 F1 | 	add	local04, local03
1c4f4     12 21 EA FA | 	rdword	local02, local04 wz
1c4f8     24 00 90 AD |  if_e	jmp	#LR__3292
1c4fc     14 4E 05 F1 | 	add	fp, #20
1c500     A7 26 02 FB | 	rdlong	local05, fp
1c504     13 29 02 F6 | 	mov	local06, local05
1c508     13 2B 02 F6 | 	mov	local07, local05
1c50c     15 2D 02 F6 | 	mov	local08, local07
1c510     01 2C 06 F1 | 	add	local08, #1
1c514     A7 2C 62 FC | 	wrlong	local08, fp
1c518     14 4E 85 F1 | 	sub	fp, #20
1c51c     B0 FF 9F FD | 	jmp	#LR__3290
1c520                 | LR__3291
1c520                 | LR__3292
1c520     1C 4E 05 F1 | 	add	fp, #28
1c524     A7 12 02 F6 | 	mov	arg01, fp
1c528     18 4E 85 F1 | 	sub	fp, #24
1c52c     A7 14 02 FB | 	rdlong	arg02, fp
1c530     04 4E 85 F1 | 	sub	fp, #4
1c534     20 14 06 F1 | 	add	arg02, #32
1c538     0C 16 06 F6 | 	mov	arg03, #12
1c53c     60 74 BF FD | 	call	#__system____builtin_memmove
1c540     27 4E 05 F1 | 	add	fp, #39
1c544     A7 2E C2 FA | 	rdbyte	local09, fp
1c548     27 4E 85 F1 | 	sub	fp, #39
1c54c     01 2E CE F7 | 	test	local09, #1 wz
1c550     F4 00 90 AD |  if_e	jmp	#LR__3295
1c554     04 4E 05 F1 | 	add	fp, #4
1c558     A7 30 02 FB | 	rdlong	local10, fp
1c55c     2B 30 06 F1 | 	add	local10, #43
1c560     18 81 48 FC | 	wrbyte	#64, local10
1c564                 | ' 		dp->fn[ 11 ] =  0x40 ;
1c564                 | ' 		for (n = 1; n < 100; n++) {
1c564     0C 4E 05 F1 | 	add	fp, #12
1c568     A7 02 68 FC | 	wrlong	#1, fp
1c56c     10 4E 85 F1 | 	sub	fp, #16
1c570                 | LR__3293
1c570     10 4E 05 F1 | 	add	fp, #16
1c574     A7 20 02 FB | 	rdlong	local02, fp
1c578     10 4E 85 F1 | 	sub	fp, #16
1c57c     64 20 16 F2 | 	cmp	local02, #100 wc
1c580     70 00 90 3D |  if_ae	jmp	#LR__3294
1c584     04 4E 05 F1 | 	add	fp, #4
1c588     A7 12 02 FB | 	rdlong	arg01, fp
1c58c     20 12 06 F1 | 	add	arg01, #32
1c590     18 4E 05 F1 | 	add	fp, #24
1c594     A7 14 02 F6 | 	mov	arg02, fp
1c598     10 4E 85 F1 | 	sub	fp, #16
1c59c     A7 30 02 FB | 	rdlong	local10, fp
1c5a0     0C 30 06 F1 | 	add	local10, #12
1c5a4     18 17 02 FB | 	rdlong	arg03, local10
1c5a8     04 4E 05 F1 | 	add	fp, #4
1c5ac     A7 18 02 FB | 	rdlong	arg04, fp
1c5b0     10 4E 85 F1 | 	sub	fp, #16
1c5b4     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1c5b8     04 4E 05 F1 | 	add	fp, #4
1c5bc     A7 12 02 FB | 	rdlong	arg01, fp
1c5c0     04 4E 85 F1 | 	sub	fp, #4
1c5c4     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1c5c8     08 4E 05 F1 | 	add	fp, #8
1c5cc     A7 FA 61 FC | 	wrlong	result1, fp
1c5d0     00 FA 4D F2 | 	cmps	result1, #0 wz
1c5d4     08 4E 85 F1 | 	sub	fp, #8
1c5d8     18 00 90 5D |  if_ne	jmp	#LR__3294
1c5dc     10 4E 05 F1 | 	add	fp, #16
1c5e0     A7 30 02 FB | 	rdlong	local10, fp
1c5e4     01 30 06 F1 | 	add	local10, #1
1c5e8     A7 30 62 FC | 	wrlong	local10, fp
1c5ec     10 4E 85 F1 | 	sub	fp, #16
1c5f0     7C FF 9F FD | 	jmp	#LR__3293
1c5f4                 | LR__3294
1c5f4     10 4E 05 F1 | 	add	fp, #16
1c5f8     A7 30 02 FB | 	rdlong	local10, fp
1c5fc     10 4E 85 F1 | 	sub	fp, #16
1c600     64 30 0E F2 | 	cmp	local10, #100 wz
1c604     07 FA 05 A6 |  if_e	mov	result1, #7
1c608     AC 02 90 AD |  if_e	jmp	#LR__3305
1c60c     08 4E 05 F1 | 	add	fp, #8
1c610     A7 30 02 FB | 	rdlong	local10, fp
1c614     08 4E 85 F1 | 	sub	fp, #8
1c618     04 30 0E F2 | 	cmp	local10, #4 wz
1c61c     08 4E 05 51 |  if_ne	add	fp, #8
1c620     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1c624     08 4E 85 51 |  if_ne	sub	fp, #8
1c628     8C 02 90 5D |  if_ne	jmp	#LR__3305
1c62c     04 4E 05 F1 | 	add	fp, #4
1c630     A7 30 02 FB | 	rdlong	local10, fp
1c634     23 4E 05 F1 | 	add	fp, #35
1c638     A7 1E C2 FA | 	rdbyte	local01, fp
1c63c     27 4E 85 F1 | 	sub	fp, #39
1c640     2B 30 06 F1 | 	add	local10, #43
1c644     18 1F 42 FC | 	wrbyte	local01, local10
1c648                 | LR__3295
1c648     27 4E 05 F1 | 	add	fp, #39
1c64c     A7 20 C2 FA | 	rdbyte	local02, fp
1c650     27 4E 85 F1 | 	sub	fp, #39
1c654     02 20 CE F7 | 	test	local02, #2 wz
1c658     20 00 90 AD |  if_e	jmp	#LR__3296
1c65c     14 4E 05 F1 | 	add	fp, #20
1c660     A7 30 02 FB | 	rdlong	local10, fp
1c664     0C 30 06 F1 | 	add	local10, #12
1c668     0D 30 16 FD | 	qdiv	local10, #13
1c66c     14 4E 85 F1 | 	sub	fp, #20
1c670     18 30 62 FD | 	getqx	local10
1c674     01 30 06 F1 | 	add	local10, #1
1c678     04 00 90 FD | 	jmp	#LR__3297
1c67c                 | LR__3296
1c67c     01 30 06 F6 | 	mov	local10, #1
1c680                 | LR__3297
1c680     18 4E 05 F1 | 	add	fp, #24
1c684     A7 30 62 FC | 	wrlong	local10, fp
1c688     14 4E 85 F1 | 	sub	fp, #20
1c68c     A7 12 02 FB | 	rdlong	arg01, fp
1c690     18 15 02 F6 | 	mov	arg02, local10
1c694     04 4E 85 F1 | 	sub	fp, #4
1c698     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1c69c     08 4E 05 F1 | 	add	fp, #8
1c6a0     A7 FA 61 FC | 	wrlong	result1, fp
1c6a4     08 4E 85 F1 | 	sub	fp, #8
1c6a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6ac     38 01 90 5D |  if_ne	jmp	#LR__3302
1c6b0     18 4E 05 F1 | 	add	fp, #24
1c6b4     A7 30 02 FB | 	rdlong	local10, fp
1c6b8     01 30 8E F1 | 	sub	local10, #1 wz
1c6bc     A7 30 62 FC | 	wrlong	local10, fp
1c6c0     18 4E 85 F1 | 	sub	fp, #24
1c6c4     20 01 90 AD |  if_e	jmp	#LR__3302
1c6c8     04 4E 05 F1 | 	add	fp, #4
1c6cc     A7 30 02 FB | 	rdlong	local10, fp
1c6d0     18 13 02 F6 | 	mov	arg01, local10
1c6d4     14 4E 05 F1 | 	add	fp, #20
1c6d8     A7 18 02 FB | 	rdlong	arg04, fp
1c6dc     18 4E 85 F1 | 	sub	fp, #24
1c6e0     05 18 66 F0 | 	shl	arg04, #5
1c6e4     10 30 06 F1 | 	add	local10, #16
1c6e8     18 15 02 FB | 	rdlong	arg02, local10
1c6ec     0C 15 82 F1 | 	sub	arg02, arg04
1c6f0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1c6f4     08 4E 05 F1 | 	add	fp, #8
1c6f8     A7 FA 61 FC | 	wrlong	result1, fp
1c6fc     08 4E 85 F1 | 	sub	fp, #8
1c700     00 FA 0D F2 | 	cmp	result1, #0 wz
1c704     E0 00 90 5D |  if_ne	jmp	#LR__3301
1c708     04 4E 05 F1 | 	add	fp, #4
1c70c     A7 12 02 FB | 	rdlong	arg01, fp
1c710     04 4E 85 F1 | 	sub	fp, #4
1c714     20 12 06 F1 | 	add	arg01, #32
1c718     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1c71c     FD 30 02 F6 | 	mov	local10, result1
1c720     28 4E 05 F1 | 	add	fp, #40
1c724     A7 30 42 FC | 	wrbyte	local10, fp
1c728     28 4E 85 F1 | 	sub	fp, #40
1c72c                 | ' 			sum = sum_sfn(dp->fn);
1c72c                 | ' 			do {
1c72c                 | LR__3298
1c72c     0C 4E 05 F1 | 	add	fp, #12
1c730     A7 12 02 FB | 	rdlong	arg01, fp
1c734     08 4E 85 F1 | 	sub	fp, #8
1c738     A7 1E 02 FB | 	rdlong	local01, fp
1c73c     04 4E 85 F1 | 	sub	fp, #4
1c740     18 1E 06 F1 | 	add	local01, #24
1c744     0F 15 02 FB | 	rdlong	arg02, local01
1c748     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1c74c     08 4E 05 F1 | 	add	fp, #8
1c750     A7 FA 61 FC | 	wrlong	result1, fp
1c754     00 FA 4D F2 | 	cmps	result1, #0 wz
1c758     08 4E 85 F1 | 	sub	fp, #8
1c75c     88 00 90 5D |  if_ne	jmp	#LR__3300
1c760     0C 4E 05 F1 | 	add	fp, #12
1c764     A7 20 02 FB | 	rdlong	local02, fp
1c768     0C 20 06 F1 | 	add	local02, #12
1c76c     10 13 02 FB | 	rdlong	arg01, local02
1c770     08 4E 85 F1 | 	sub	fp, #8
1c774     A7 1E 02 FB | 	rdlong	local01, fp
1c778     1C 1E 06 F1 | 	add	local01, #28
1c77c     0F 15 02 FB | 	rdlong	arg02, local01
1c780     14 4E 05 F1 | 	add	fp, #20
1c784     A7 16 02 FB | 	rdlong	arg03, fp
1c788     10 4E 05 F1 | 	add	fp, #16
1c78c     A7 18 C2 FA | 	rdbyte	arg04, fp
1c790     28 4E 85 F1 | 	sub	fp, #40
1c794     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1c798     0C 4E 05 F1 | 	add	fp, #12
1c79c     A7 30 02 FB | 	rdlong	local10, fp
1c7a0     03 30 06 F1 | 	add	local10, #3
1c7a4     18 03 48 FC | 	wrbyte	#1, local10
1c7a8     08 4E 85 F1 | 	sub	fp, #8
1c7ac     A7 12 02 FB | 	rdlong	arg01, fp
1c7b0     04 4E 85 F1 | 	sub	fp, #4
1c7b4     00 14 06 F6 | 	mov	arg02, #0
1c7b8     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1c7bc     08 4E 05 F1 | 	add	fp, #8
1c7c0     A7 FA 61 FC | 	wrlong	result1, fp
1c7c4     00 FA 4D F2 | 	cmps	result1, #0 wz
1c7c8     08 4E 85 F1 | 	sub	fp, #8
1c7cc     18 00 90 5D |  if_ne	jmp	#LR__3299
1c7d0     18 4E 05 F1 | 	add	fp, #24
1c7d4     A7 30 02 FB | 	rdlong	local10, fp
1c7d8     01 30 8E F1 | 	sub	local10, #1 wz
1c7dc     A7 30 62 FC | 	wrlong	local10, fp
1c7e0     18 4E 85 F1 | 	sub	fp, #24
1c7e4     44 FF 9F 5D |  if_ne	jmp	#LR__3298
1c7e8                 | LR__3299
1c7e8                 | LR__3300
1c7e8                 | LR__3301
1c7e8                 | LR__3302
1c7e8     08 4E 05 F1 | 	add	fp, #8
1c7ec     A7 30 0A FB | 	rdlong	local10, fp wz
1c7f0     08 4E 85 F1 | 	sub	fp, #8
1c7f4     B4 00 90 5D |  if_ne	jmp	#LR__3304
1c7f8     0C 4E 05 F1 | 	add	fp, #12
1c7fc     A7 12 02 FB | 	rdlong	arg01, fp
1c800     08 4E 85 F1 | 	sub	fp, #8
1c804     A7 1E 02 FB | 	rdlong	local01, fp
1c808     04 4E 85 F1 | 	sub	fp, #4
1c80c     18 1E 06 F1 | 	add	local01, #24
1c810     0F 15 02 FB | 	rdlong	arg02, local01
1c814     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1c818     08 4E 05 F1 | 	add	fp, #8
1c81c     A7 FA 61 FC | 	wrlong	result1, fp
1c820     08 4E 85 F1 | 	sub	fp, #8
1c824     00 FA 0D F2 | 	cmp	result1, #0 wz
1c828     80 00 90 5D |  if_ne	jmp	#LR__3303
1c82c     04 4E 05 F1 | 	add	fp, #4
1c830     A7 20 02 FB | 	rdlong	local02, fp
1c834     04 4E 85 F1 | 	sub	fp, #4
1c838     1C 20 06 F1 | 	add	local02, #28
1c83c     10 13 02 FB | 	rdlong	arg01, local02
1c840     00 14 06 F6 | 	mov	arg02, #0
1c844     20 16 06 F6 | 	mov	arg03, #32
1c848     98 00 A0 FD | 	call	#\builtin_bytefill_
1c84c     04 4E 05 F1 | 	add	fp, #4
1c850     A7 14 02 FB | 	rdlong	arg02, fp
1c854     0A 1F 02 F6 | 	mov	local01, arg02
1c858     1C 1E 06 F1 | 	add	local01, #28
1c85c     0F 13 02 FB | 	rdlong	arg01, local01
1c860     04 4E 85 F1 | 	sub	fp, #4
1c864     20 14 06 F1 | 	add	arg02, #32
1c868     0B 16 06 F6 | 	mov	arg03, #11
1c86c     30 71 BF FD | 	call	#__system____builtin_memmove
1c870     04 4E 05 F1 | 	add	fp, #4
1c874     A7 2E 02 FB | 	rdlong	local09, fp
1c878     17 31 02 F6 | 	mov	local10, local09
1c87c     1C 30 06 F1 | 	add	local10, #28
1c880     18 1F 02 FB | 	rdlong	local01, local10
1c884     2B 2E 06 F1 | 	add	local09, #43
1c888     17 31 C2 FA | 	rdbyte	local10, local09
1c88c     18 30 06 F5 | 	and	local10, #24
1c890     0C 1E 06 F1 | 	add	local01, #12
1c894     0F 31 42 FC | 	wrbyte	local10, local01
1c898     08 4E 05 F1 | 	add	fp, #8
1c89c     A7 30 02 FB | 	rdlong	local10, fp
1c8a0     0C 4E 85 F1 | 	sub	fp, #12
1c8a4     03 30 06 F1 | 	add	local10, #3
1c8a8     18 03 48 FC | 	wrbyte	#1, local10
1c8ac                 | LR__3303
1c8ac                 | LR__3304
1c8ac                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1c8ac                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1c8ac                 | ' 
1c8ac                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1c8ac                 | ' 
1c8ac                 | ' 			fs->wflag = 1;
1c8ac                 | ' 		}
1c8ac                 | ' 	}
1c8ac                 | ' 
1c8ac                 | ' 	return res;
1c8ac     08 4E 05 F1 | 	add	fp, #8
1c8b0     A7 FA 01 FB | 	rdlong	result1, fp
1c8b4     08 4E 85 F1 | 	sub	fp, #8
1c8b8                 | LR__3305
1c8b8     A7 F0 03 F6 | 	mov	ptra, fp
1c8bc     B2 00 A0 FD | 	call	#popregs_
1c8c0                 | _fatfs_cc_dir_register_ret
1c8c0     2D 00 64 FD | 	ret
1c8c4                 | 
1c8c4                 | _fatfs_cc_dir_remove
1c8c4     05 4A 05 F6 | 	mov	COUNT_, #5
1c8c8     A8 00 A0 FD | 	call	#pushregs_
1c8cc     09 1F 02 F6 | 	mov	local01, arg01
1c8d0     0F 21 02 FB | 	rdlong	local02, local01
1c8d4     10 1E 06 F1 | 	add	local01, #16
1c8d8     0F 23 02 FB | 	rdlong	local03, local01
1c8dc     1C 1E 06 F1 | 	add	local01, #28
1c8e0     0F 15 02 FB | 	rdlong	arg02, local01
1c8e4     2C 1E 86 F1 | 	sub	local01, #44
1c8e8     FF FF 7F FF 
1c8ec     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1c8f0     00 24 06 A6 |  if_e	mov	local04, #0
1c8f4     18 00 90 AD |  if_e	jmp	#LR__3310
1c8f8     0F 13 02 F6 | 	mov	arg01, local01
1c8fc     2C 1E 06 F1 | 	add	local01, #44
1c900     0F 15 02 FB | 	rdlong	arg02, local01
1c904     2C 1E 86 F1 | 	sub	local01, #44
1c908     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1c90c     FD 24 02 F6 | 	mov	local04, result1
1c910                 | LR__3310
1c910     12 27 0A F6 | 	mov	local05, local04 wz
1c914     64 00 90 5D |  if_ne	jmp	#LR__3313
1c918                 | ' 		do {
1c918                 | LR__3311
1c918     18 1E 06 F1 | 	add	local01, #24
1c91c     0F 15 02 FB | 	rdlong	arg02, local01
1c920     18 1E 86 F1 | 	sub	local01, #24
1c924     10 13 02 F6 | 	mov	arg01, local02
1c928     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1c92c     FD 26 0A F6 | 	mov	local05, result1 wz
1c930     40 00 90 5D |  if_ne	jmp	#LR__3312
1c934     1C 1E 06 F1 | 	add	local01, #28
1c938     0F 25 02 FB | 	rdlong	local04, local01
1c93c     12 CB 49 FC | 	wrbyte	#229, local04
1c940     03 20 06 F1 | 	add	local02, #3
1c944     10 03 48 FC | 	wrbyte	#1, local02
1c948     03 20 86 F1 | 	sub	local02, #3
1c94c     0C 1E 86 F1 | 	sub	local01, #12
1c950     0F 25 02 FB | 	rdlong	local04, local01
1c954     10 1E 86 F1 | 	sub	local01, #16
1c958     11 25 12 F2 | 	cmp	local04, local03 wc
1c95c     14 00 90 3D |  if_ae	jmp	#LR__3312
1c960     0F 13 02 F6 | 	mov	arg01, local01
1c964     00 14 06 F6 | 	mov	arg02, #0
1c968     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1c96c     FD 26 0A F6 | 	mov	local05, result1 wz
1c970     A4 FF 9F AD |  if_e	jmp	#LR__3311
1c974                 | LR__3312
1c974     04 26 0E F2 | 	cmp	local05, #4 wz
1c978     02 26 06 A6 |  if_e	mov	local05, #2
1c97c                 | LR__3313
1c97c                 | ' 	}
1c97c                 | ' #line 2590 "ff.c"
1c97c                 | ' 	return res;
1c97c     13 FB 01 F6 | 	mov	result1, local05
1c980     A7 F0 03 F6 | 	mov	ptra, fp
1c984     B2 00 A0 FD | 	call	#popregs_
1c988                 | _fatfs_cc_dir_remove_ret
1c988     2D 00 64 FD | 	ret
1c98c                 | 
1c98c                 | _fatfs_cc_get_fileinfo
1c98c     0F 4A 05 F6 | 	mov	COUNT_, #15
1c990     A8 00 A0 FD | 	call	#pushregs_
1c994     09 1F 02 F6 | 	mov	local01, arg01
1c998     0A 21 02 F6 | 	mov	local02, arg02
1c99c     0F 23 02 FB | 	rdlong	local03, local01
1c9a0     1C 20 06 F1 | 	add	local02, #28
1c9a4     10 01 48 FC | 	wrbyte	#0, local02
1c9a8     1C 20 86 F1 | 	sub	local02, #28
1c9ac     18 1E 06 F1 | 	add	local01, #24
1c9b0     0F 25 0A FB | 	rdlong	local04, local01 wz
1c9b4     18 1E 86 F1 | 	sub	local01, #24
1c9b8     90 03 90 AD |  if_e	jmp	#LR__3334
1c9bc     2C 1E 06 F1 | 	add	local01, #44
1c9c0     0F 25 02 FB | 	rdlong	local04, local01
1c9c4     2C 1E 86 F1 | 	sub	local01, #44
1c9c8     FF FF 7F FF 
1c9cc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1c9d0     D8 00 90 AD |  if_e	jmp	#LR__3323
1c9d4     00 26 06 F6 | 	mov	local05, #0
1c9d8     00 28 06 F6 | 	mov	local06, #0
1c9dc     00 2A 06 F6 | 	mov	local07, #0
1c9e0                 | ' 			si = di = 0;
1c9e0                 | ' 			hs = 0;
1c9e0                 | ' 			while (fs->lfnbuf[si] != 0) {
1c9e0                 | LR__3320
1c9e0     0C 22 06 F1 | 	add	local03, #12
1c9e4     11 25 02 FB | 	rdlong	local04, local03
1c9e8     0C 22 86 F1 | 	sub	local03, #12
1c9ec     14 2D 02 F6 | 	mov	local08, local06
1c9f0     01 2C 66 F0 | 	shl	local08, #1
1c9f4     12 2D 02 F1 | 	add	local08, local04
1c9f8     16 25 EA FA | 	rdword	local04, local08 wz
1c9fc     90 00 90 AD |  if_e	jmp	#LR__3322
1ca00     0C 22 06 F1 | 	add	local03, #12
1ca04     11 2F 02 FB | 	rdlong	local09, local03
1ca08     0C 22 86 F1 | 	sub	local03, #12
1ca0c     14 31 02 F6 | 	mov	local10, local06
1ca10     01 30 66 F0 | 	shl	local10, #1
1ca14     17 31 02 F1 | 	add	local10, local09
1ca18     18 33 E2 FA | 	rdword	local11, local10
1ca1c     15 25 02 F6 | 	mov	local04, local07
1ca20     0F 24 4E F7 | 	zerox	local04, #15 wz
1ca24     01 28 06 F1 | 	add	local06, #1
1ca28     24 00 90 5D |  if_ne	jmp	#LR__3321
1ca2c     19 35 32 F9 | 	getword	local12, local11, #0
1ca30     6C 00 00 FF 
1ca34     00 34 16 F2 | 	cmp	local12, ##55296 wc
1ca38     14 00 90 CD |  if_b	jmp	#LR__3321
1ca3c     19 37 32 F9 | 	getword	local13, local11, #0
1ca40     70 00 00 FF 
1ca44     00 36 16 F2 | 	cmp	local13, ##57344 wc
1ca48     19 2B 02 C6 |  if_b	mov	local07, local11
1ca4c                 | ' 					hs = wc; continue;
1ca4c     90 FF 9F CD |  if_b	jmp	#LR__3320
1ca50                 | LR__3321
1ca50     15 13 32 F9 | 	getword	arg01, local07, #0
1ca54     10 12 66 F0 | 	shl	arg01, #16
1ca58     19 33 32 F9 | 	getword	local11, local11, #0
1ca5c     19 13 42 F5 | 	or	arg01, local11
1ca60     13 15 02 F6 | 	mov	arg02, local05
1ca64     1C 20 06 F1 | 	add	local02, #28
1ca68     10 15 02 F1 | 	add	arg02, local02
1ca6c     FF 16 06 F6 | 	mov	arg03, #255
1ca70     13 17 82 F1 | 	sub	arg03, local05
1ca74     1C 20 86 F1 | 	sub	local02, #28
1ca78     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1ca7c     FD 38 0A F6 | 	mov	local14, result1 wz
1ca80     00 26 06 A6 |  if_e	mov	local05, #0
1ca84     1C 27 02 51 |  if_ne	add	local05, local14
1ca88     00 2A 06 56 |  if_ne	mov	local07, #0
1ca8c     50 FF 9F 5D |  if_ne	jmp	#LR__3320
1ca90                 | LR__3322
1ca90     15 25 02 F6 | 	mov	local04, local07
1ca94     0F 24 4E F7 | 	zerox	local04, #15 wz
1ca98     00 26 06 56 |  if_ne	mov	local05, #0
1ca9c     1C 20 06 F1 | 	add	local02, #28
1caa0     10 27 02 F1 | 	add	local05, local02
1caa4     13 01 48 FC | 	wrbyte	#0, local05
1caa8     1C 20 86 F1 | 	sub	local02, #28
1caac                 | LR__3323
1caac     00 26 06 F6 | 	mov	local05, #0
1cab0     00 28 06 F6 | 	mov	local06, #0
1cab4                 | ' 			fno->fname[di] = 0;
1cab4                 | ' 		}
1cab4                 | ' 	}
1cab4                 | ' 
1cab4                 | ' 	si = di = 0;
1cab4                 | ' 	while (si < 11) {
1cab4                 | LR__3324
1cab4     0B 28 16 F2 | 	cmp	local06, #11 wc
1cab8     20 01 90 3D |  if_ae	jmp	#LR__3327
1cabc     1C 1E 06 F1 | 	add	local01, #28
1cac0     0F 2F 02 FB | 	rdlong	local09, local01
1cac4     1C 1E 86 F1 | 	sub	local01, #28
1cac8     14 31 02 F6 | 	mov	local10, local06
1cacc     17 31 02 F1 | 	add	local10, local09
1cad0     18 33 C2 FA | 	rdbyte	local11, local10
1cad4     19 25 32 F9 | 	getword	local04, local11, #0
1cad8     20 24 0E F2 | 	cmp	local04, #32 wz
1cadc     01 28 06 F1 | 	add	local06, #1
1cae0     D0 FF 9F AD |  if_e	jmp	#LR__3324
1cae4     19 25 32 F9 | 	getword	local04, local11, #0
1cae8     05 24 0E F2 | 	cmp	local04, #5 wz
1caec     E5 32 06 A6 |  if_e	mov	local11, #229
1caf0     09 28 0E F2 | 	cmp	local06, #9 wz
1caf4     20 00 90 5D |  if_ne	jmp	#LR__3325
1caf8     0C 26 16 F2 | 	cmp	local05, #12 wc
1cafc     18 00 90 3D |  if_ae	jmp	#LR__3325
1cb00     13 37 02 F6 | 	mov	local13, local05
1cb04     0C 20 06 F1 | 	add	local02, #12
1cb08     10 37 02 F1 | 	add	local13, local02
1cb0c     1B 5D 48 FC | 	wrbyte	#46, local13
1cb10     01 26 06 F1 | 	add	local05, #1
1cb14     0C 20 86 F1 | 	sub	local02, #12
1cb18                 | LR__3325
1cb18     19 13 32 F9 | 	getword	arg01, local11, #0
1cb1c     07 12 4E F7 | 	zerox	arg01, #7 wz
1cb20     00 FA 05 56 |  if_ne	mov	result1, #0
1cb24                 | ' 
1cb24                 | ' 	return 0;
1cb24     00 FA 05 A6 |  if_e	mov	result1, #0
1cb28     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb2c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1cb30     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1cb34     50 00 90 AD |  if_e	jmp	#LR__3326
1cb38     1C 1E 06 F1 | 	add	local01, #28
1cb3c     0F 31 02 FB | 	rdlong	local10, local01
1cb40     1C 1E 86 F1 | 	sub	local01, #28
1cb44     14 2D 02 F6 | 	mov	local08, local06
1cb48     18 2D 02 F1 | 	add	local08, local10
1cb4c     16 13 CA FA | 	rdbyte	arg01, local08 wz
1cb50     00 FA 05 56 |  if_ne	mov	result1, #0
1cb54                 | ' 
1cb54                 | ' 	return 0;
1cb54     00 FA 05 A6 |  if_e	mov	result1, #0
1cb58     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb5c     28 00 90 AD |  if_e	jmp	#LR__3326
1cb60     19 33 32 F9 | 	getword	local11, local11, #0
1cb64     08 32 66 F0 | 	shl	local11, #8
1cb68     1C 1E 06 F1 | 	add	local01, #28
1cb6c     0F 39 02 FB | 	rdlong	local14, local01
1cb70     1C 1E 86 F1 | 	sub	local01, #28
1cb74     14 2F 02 F6 | 	mov	local09, local06
1cb78     1C 2F 02 F1 | 	add	local09, local14
1cb7c     17 35 C2 FA | 	rdbyte	local12, local09
1cb80     1A 33 42 F5 | 	or	local11, local12
1cb84     01 28 06 F1 | 	add	local06, #1
1cb88                 | LR__3326
1cb88     19 13 02 F6 | 	mov	arg01, local11
1cb8c     01 00 00 FF 
1cb90     52 15 06 F6 | 	mov	arg02, ##850
1cb94     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1cb98     FD 32 02 F6 | 	mov	local11, result1
1cb9c     19 25 02 F6 | 	mov	local04, local11
1cba0     0F 24 4E F7 | 	zerox	local04, #15 wz
1cba4     00 26 06 A6 |  if_e	mov	local05, #0
1cba8     30 00 90 AD |  if_e	jmp	#LR__3327
1cbac     19 13 32 F9 | 	getword	arg01, local11, #0
1cbb0     13 15 02 F6 | 	mov	arg02, local05
1cbb4     0C 20 06 F1 | 	add	local02, #12
1cbb8     10 15 02 F1 | 	add	arg02, local02
1cbbc     0C 16 06 F6 | 	mov	arg03, #12
1cbc0     13 17 82 F1 | 	sub	arg03, local05
1cbc4     0C 20 86 F1 | 	sub	local02, #12
1cbc8     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1cbcc     FD 38 0A F6 | 	mov	local14, result1 wz
1cbd0     00 26 06 A6 |  if_e	mov	local05, #0
1cbd4     1C 27 02 51 |  if_ne	add	local05, local14
1cbd8     D8 FE 9F 5D |  if_ne	jmp	#LR__3324
1cbdc                 | LR__3327
1cbdc     13 25 02 F6 | 	mov	local04, local05
1cbe0     0C 20 06 F1 | 	add	local02, #12
1cbe4     10 25 02 F1 | 	add	local04, local02
1cbe8     12 01 48 FC | 	wrbyte	#0, local04
1cbec     10 20 06 F1 | 	add	local02, #16
1cbf0     10 25 CA FA | 	rdbyte	local04, local02 wz
1cbf4     1C 20 86 F1 | 	sub	local02, #28
1cbf8     F8 00 90 5D |  if_ne	jmp	#LR__3333
1cbfc     00 26 0E F2 | 	cmp	local05, #0 wz
1cc00     1C 00 90 5D |  if_ne	jmp	#LR__3328
1cc04     13 37 02 F6 | 	mov	local13, local05
1cc08     1C 20 06 F1 | 	add	local02, #28
1cc0c     10 37 02 F1 | 	add	local13, local02
1cc10     1B 7F 48 FC | 	wrbyte	#63, local13
1cc14     01 26 06 F1 | 	add	local05, #1
1cc18     1C 20 86 F1 | 	sub	local02, #28
1cc1c     A4 00 90 FD | 	jmp	#LR__3332
1cc20                 | LR__3328
1cc20                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1cc20     00 26 06 F6 | 	mov	local05, #0
1cc24     00 28 06 F6 | 	mov	local06, #0
1cc28     08 3A 06 F6 | 	mov	local15, #8
1cc2c                 | LR__3329
1cc2c     14 25 02 F6 | 	mov	local04, local06
1cc30     0C 20 06 F1 | 	add	local02, #12
1cc34     10 25 02 F1 | 	add	local04, local02
1cc38     12 37 CA FA | 	rdbyte	local13, local04 wz
1cc3c     0C 20 86 F1 | 	sub	local02, #12
1cc40     80 00 90 AD |  if_e	jmp	#LR__3331
1cc44     14 2D 02 F6 | 	mov	local08, local06
1cc48     0C 20 06 F1 | 	add	local02, #12
1cc4c     10 2D 02 F1 | 	add	local08, local02
1cc50     16 33 C2 FA | 	rdbyte	local11, local08
1cc54     19 39 32 F9 | 	getword	local14, local11, #0
1cc58     2E 38 0E F2 | 	cmp	local14, #46 wz
1cc5c     0C 20 86 F1 | 	sub	local02, #12
1cc60     10 3A 06 A6 |  if_e	mov	local15, #16
1cc64     19 39 32 F9 | 	getword	local14, local11, #0
1cc68     41 38 16 F2 | 	cmp	local14, #65 wc
1cc6c     30 00 90 CD |  if_b	jmp	#LR__3330
1cc70     19 2D 32 F9 | 	getword	local08, local11, #0
1cc74     5B 2C 16 F2 | 	cmp	local08, #91 wc
1cc78     24 00 90 3D |  if_ae	jmp	#LR__3330
1cc7c     1C 1E 06 F1 | 	add	local01, #28
1cc80     0F 2F 02 FB | 	rdlong	local09, local01
1cc84     1C 1E 86 F1 | 	sub	local01, #28
1cc88     0C 2E 06 F1 | 	add	local09, #12
1cc8c     17 31 C2 FA | 	rdbyte	local10, local09
1cc90     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1cc94     1C 31 CA F7 | 	test	local10, local14 wz
1cc98     19 33 32 59 |  if_ne	getword	local11, local11, #0
1cc9c     20 32 06 51 |  if_ne	add	local11, #32
1cca0                 | LR__3330
1cca0     13 39 02 F6 | 	mov	local14, local05
1cca4     1C 20 06 F1 | 	add	local02, #28
1cca8     10 39 02 F1 | 	add	local14, local02
1ccac     19 33 32 F9 | 	getword	local11, local11, #0
1ccb0     1C 33 42 FC | 	wrbyte	local11, local14
1ccb4     01 28 06 F1 | 	add	local06, #1
1ccb8     01 26 06 F1 | 	add	local05, #1
1ccbc     1C 20 86 F1 | 	sub	local02, #28
1ccc0     68 FF 9F FD | 	jmp	#LR__3329
1ccc4                 | LR__3331
1ccc4                 | LR__3332
1ccc4     1C 20 06 F1 | 	add	local02, #28
1ccc8     10 27 02 F1 | 	add	local05, local02
1cccc     13 01 48 FC | 	wrbyte	#0, local05
1ccd0     1C 1E 06 F1 | 	add	local01, #28
1ccd4     0F 25 02 FB | 	rdlong	local04, local01
1ccd8     1C 1E 86 F1 | 	sub	local01, #28
1ccdc     0C 24 06 F1 | 	add	local04, #12
1cce0     12 37 CA FA | 	rdbyte	local13, local04 wz
1cce4     1C 20 86 F1 | 	sub	local02, #28
1cce8     0C 20 06 A1 |  if_e	add	local02, #12
1ccec     10 01 48 AC |  if_e	wrbyte	#0, local02
1ccf0     0C 20 86 A1 |  if_e	sub	local02, #12
1ccf4                 | LR__3333
1ccf4     1C 1E 06 F1 | 	add	local01, #28
1ccf8     0F 35 02 FB | 	rdlong	local12, local01
1ccfc     0B 34 06 F1 | 	add	local12, #11
1cd00     1A 25 C2 FA | 	rdbyte	local04, local12
1cd04     3F 24 06 F5 | 	and	local04, #63
1cd08     08 20 06 F1 | 	add	local02, #8
1cd0c     10 25 42 FC | 	wrbyte	local04, local02
1cd10     08 20 86 F1 | 	sub	local02, #8
1cd14     0F 13 02 FB | 	rdlong	arg01, local01
1cd18     1C 12 06 F1 | 	add	arg01, #28
1cd1c                 | ' {
1cd1c                 | ' 
1cd1c                 | ' 	return *((DWORD*)ptr);
1cd1c     09 FB 01 FB | 	rdlong	result1, arg01
1cd20     10 FB 61 FC | 	wrlong	result1, local02
1cd24     0F 13 02 FB | 	rdlong	arg01, local01
1cd28     16 12 06 F1 | 	add	arg01, #22
1cd2c                 | ' {
1cd2c                 | ' 
1cd2c                 | ' 	return *((WORD*)ptr);
1cd2c     09 FB E1 FA | 	rdword	result1, arg01
1cd30     06 20 06 F1 | 	add	local02, #6
1cd34     10 FB 51 FC | 	wrword	result1, local02
1cd38     0F 13 02 FB | 	rdlong	arg01, local01
1cd3c     18 12 06 F1 | 	add	arg01, #24
1cd40                 | ' {
1cd40                 | ' 
1cd40                 | ' 	return *((WORD*)ptr);
1cd40     09 FB E1 FA | 	rdword	result1, arg01
1cd44     02 20 86 F1 | 	sub	local02, #2
1cd48     10 FB 51 FC | 	wrword	result1, local02
1cd4c                 | LR__3334
1cd4c     A7 F0 03 F6 | 	mov	ptra, fp
1cd50     B2 00 A0 FD | 	call	#popregs_
1cd54                 | _fatfs_cc_get_fileinfo_ret
1cd54     2D 00 64 FD | 	ret
1cd58                 | 
1cd58                 | _fatfs_cc_create_name
1cd58     0D 4A 05 F6 | 	mov	COUNT_, #13
1cd5c     A8 00 A0 FD | 	call	#pushregs_
1cd60     34 F0 07 F1 | 	add	ptra, #52
1cd64     04 4E 05 F1 | 	add	fp, #4
1cd68     A7 12 62 FC | 	wrlong	arg01, fp
1cd6c     04 4E 05 F1 | 	add	fp, #4
1cd70     A7 14 62 FC | 	wrlong	arg02, fp
1cd74     0A FB 01 FB | 	rdlong	result1, arg02
1cd78     28 4E 05 F1 | 	add	fp, #40
1cd7c     A7 FA 61 FC | 	wrlong	result1, fp
1cd80     2C 4E 85 F1 | 	sub	fp, #44
1cd84     A7 FA 01 FB | 	rdlong	result1, fp
1cd88     FD 1E 02 FB | 	rdlong	local01, result1
1cd8c     0C 1E 06 F1 | 	add	local01, #12
1cd90     0F 21 02 FB | 	rdlong	local02, local01
1cd94     14 4E 05 F1 | 	add	fp, #20
1cd98     A7 20 62 FC | 	wrlong	local02, fp
1cd9c     14 4E 05 F1 | 	add	fp, #20
1cda0     A7 00 68 FC | 	wrlong	#0, fp
1cda4     2C 4E 85 F1 | 	sub	fp, #44
1cda8                 | ' 
1cda8                 | ' 
1cda8                 | ' 
1cda8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1cda8                 | ' 	for (;;) {
1cda8                 | LR__3340
1cda8     30 4E 05 F1 | 	add	fp, #48
1cdac     A7 12 02 F6 | 	mov	arg01, fp
1cdb0     30 4E 85 F1 | 	sub	fp, #48
1cdb4     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1cdb8     1C 4E 05 F1 | 	add	fp, #28
1cdbc     A7 FA 61 FC | 	wrlong	result1, fp
1cdc0     1C 4E 85 F1 | 	sub	fp, #28
1cdc4     FF FF 7F FF 
1cdc8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1cdcc     06 FA 05 A6 |  if_e	mov	result1, #6
1cdd0     74 08 90 AD |  if_e	jmp	#LR__3380
1cdd4     1C 4E 05 F1 | 	add	fp, #28
1cdd8     A7 1E 02 FB | 	rdlong	local01, fp
1cddc     1C 4E 85 F1 | 	sub	fp, #28
1cde0     80 00 00 FF 
1cde4     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1cde8     3C 00 90 CD |  if_b	jmp	#LR__3341
1cdec     18 4E 05 F1 | 	add	fp, #24
1cdf0     A7 22 02 FB | 	rdlong	local03, fp
1cdf4     14 4E 05 F1 | 	add	fp, #20
1cdf8     A7 1E 02 FB | 	rdlong	local01, fp
1cdfc     0F 25 02 F6 | 	mov	local04, local01
1ce00     01 24 06 F1 | 	add	local04, #1
1ce04     A7 24 62 FC | 	wrlong	local04, fp
1ce08     01 1E 66 F0 | 	shl	local01, #1
1ce0c     11 1F 02 F1 | 	add	local01, local03
1ce10     10 4E 85 F1 | 	sub	fp, #16
1ce14     A7 26 02 FB | 	rdlong	local05, fp
1ce18     1C 4E 85 F1 | 	sub	fp, #28
1ce1c     13 29 02 F6 | 	mov	local06, local05
1ce20     10 28 46 F0 | 	shr	local06, #16
1ce24     0F 29 52 FC | 	wrword	local06, local01
1ce28                 | LR__3341
1ce28     1C 4E 05 F1 | 	add	fp, #28
1ce2c     A7 1E 02 FB | 	rdlong	local01, fp
1ce30     08 4E 85 F1 | 	sub	fp, #8
1ce34     A7 1E 52 FC | 	wrword	local01, fp
1ce38     A7 1E E2 FA | 	rdword	local01, fp
1ce3c     14 4E 85 F1 | 	sub	fp, #20
1ce40     20 1E 16 F2 | 	cmp	local01, #32 wc
1ce44     B0 00 90 CD |  if_b	jmp	#LR__3343
1ce48     14 4E 05 F1 | 	add	fp, #20
1ce4c     A7 1E E2 FA | 	rdword	local01, fp
1ce50     14 4E 85 F1 | 	sub	fp, #20
1ce54     2F 1E 0E F2 | 	cmp	local01, #47 wz
1ce58     14 4E 05 51 |  if_ne	add	fp, #20
1ce5c     A7 24 E2 5A |  if_ne	rdword	local04, fp
1ce60     14 4E 85 51 |  if_ne	sub	fp, #20
1ce64     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1ce68     8C 00 90 AD |  if_e	jmp	#LR__3343
1ce6c     14 4E 05 F1 | 	add	fp, #20
1ce70     A7 12 E2 FA | 	rdword	arg01, fp
1ce74     14 4E 85 F1 | 	sub	fp, #20
1ce78     80 12 16 F2 | 	cmp	arg01, #128 wc
1ce7c     24 00 90 3D |  if_ae	jmp	#LR__3342
1ce80     16 01 00 FF 
1ce84     B8 13 06 F6 | 	mov	arg01, ##@LR__4002
1ce88     14 4E 05 F1 | 	add	fp, #20
1ce8c     A7 14 E2 FA | 	rdword	arg02, fp
1ce90     14 4E 85 F1 | 	sub	fp, #20
1ce94     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1ce98     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce9c     06 FA 05 56 |  if_ne	mov	result1, #6
1cea0     A4 07 90 5D |  if_ne	jmp	#LR__3380
1cea4                 | LR__3342
1cea4     2C 4E 05 F1 | 	add	fp, #44
1cea8     A7 28 02 FB | 	rdlong	local06, fp
1ceac     2C 4E 85 F1 | 	sub	fp, #44
1ceb0     FF 28 16 F2 | 	cmp	local06, #255 wc
1ceb4     06 FA 05 36 |  if_ae	mov	result1, #6
1ceb8     8C 07 90 3D |  if_ae	jmp	#LR__3380
1cebc     18 4E 05 F1 | 	add	fp, #24
1cec0     A7 22 02 FB | 	rdlong	local03, fp
1cec4     14 4E 05 F1 | 	add	fp, #20
1cec8     A7 20 02 FB | 	rdlong	local02, fp
1cecc     10 25 02 F6 | 	mov	local04, local02
1ced0     01 24 06 F1 | 	add	local04, #1
1ced4     A7 24 62 FC | 	wrlong	local04, fp
1ced8     10 1F 02 F6 | 	mov	local01, local02
1cedc     01 1E 66 F0 | 	shl	local01, #1
1cee0     11 1F 02 F1 | 	add	local01, local03
1cee4     18 4E 85 F1 | 	sub	fp, #24
1cee8     A7 28 E2 FA | 	rdword	local06, fp
1ceec     14 4E 85 F1 | 	sub	fp, #20
1cef0     0F 29 52 FC | 	wrword	local06, local01
1cef4     B0 FE 9F FD | 	jmp	#LR__3340
1cef8                 | LR__3343
1cef8     14 4E 05 F1 | 	add	fp, #20
1cefc     A7 2A E2 FA | 	rdword	local07, fp
1cf00     14 4E 85 F1 | 	sub	fp, #20
1cf04     20 2A 16 F2 | 	cmp	local07, #32 wc
1cf08     10 4E 05 C1 |  if_b	add	fp, #16
1cf0c     A7 08 48 CC |  if_b	wrbyte	#4, fp
1cf10     10 4E 85 C1 |  if_b	sub	fp, #16
1cf14     74 00 90 CD |  if_b	jmp	#LR__3348
1cf18     97 24 48 FB | 	callpa	#(@LR__3346-@LR__3344)>>2,fcache_load_ptr_
1cf1c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1cf1c                 | LR__3344
1cf1c     30 4E 05 F1 | 	add	fp, #48
1cf20     A7 24 02 FB | 	rdlong	local04, fp
1cf24     30 4E 85 F1 | 	sub	fp, #48
1cf28     12 2B C2 FA | 	rdbyte	local07, local04
1cf2c     2F 2A 0E F2 | 	cmp	local07, #47 wz
1cf30     18 00 90 AD |  if_e	jmp	#LR__3345
1cf34     30 4E 05 F1 | 	add	fp, #48
1cf38     A7 24 02 FB | 	rdlong	local04, fp
1cf3c     30 4E 85 F1 | 	sub	fp, #48
1cf40     12 21 C2 FA | 	rdbyte	local02, local04
1cf44     5C 20 0E F2 | 	cmp	local02, #92 wz
1cf48     18 00 90 5D |  if_ne	jmp	#LR__3347
1cf4c                 | LR__3345
1cf4c     30 4E 05 F1 | 	add	fp, #48
1cf50     A7 1E 02 FB | 	rdlong	local01, fp
1cf54     01 1E 06 F1 | 	add	local01, #1
1cf58     A7 1E 62 FC | 	wrlong	local01, fp
1cf5c     30 4E 85 F1 | 	sub	fp, #48
1cf60     B8 FF 9F FD | 	jmp	#LR__3344
1cf64                 | LR__3346
1cf64                 | LR__3347
1cf64     10 4E 05 F1 | 	add	fp, #16
1cf68     A7 00 48 FC | 	wrbyte	#0, fp
1cf6c     20 4E 05 F1 | 	add	fp, #32
1cf70     A7 28 02 FB | 	rdlong	local06, fp
1cf74     30 4E 85 F1 | 	sub	fp, #48
1cf78     14 2B C2 FA | 	rdbyte	local07, local06
1cf7c     20 2A 16 F2 | 	cmp	local07, #32 wc
1cf80     10 4E 05 C1 |  if_b	add	fp, #16
1cf84     A7 08 48 CC |  if_b	wrbyte	#4, fp
1cf88     10 4E 85 C1 |  if_b	sub	fp, #16
1cf8c                 | LR__3348
1cf8c     08 4E 05 F1 | 	add	fp, #8
1cf90     A7 2A 02 FB | 	rdlong	local07, fp
1cf94     28 4E 05 F1 | 	add	fp, #40
1cf98     A7 1E 02 FB | 	rdlong	local01, fp
1cf9c     30 4E 85 F1 | 	sub	fp, #48
1cfa0     15 1F 62 FC | 	wrlong	local01, local07
1cfa4     97 38 48 FB | 	callpa	#(@LR__3350-@LR__3349)>>2,fcache_load_ptr_
1cfa8                 | ' 	}
1cfa8                 | ' 	*path = p;
1cfa8                 | ' #line 2862 "ff.c"
1cfa8                 | ' 	while (di) {
1cfa8                 | LR__3349
1cfa8     2C 4E 05 F1 | 	add	fp, #44
1cfac     A7 2A 0A FB | 	rdlong	local07, fp wz
1cfb0     2C 4E 85 F1 | 	sub	fp, #44
1cfb4     60 00 90 AD |  if_e	jmp	#LR__3351
1cfb8     18 4E 05 F1 | 	add	fp, #24
1cfbc     A7 28 02 FB | 	rdlong	local06, fp
1cfc0     14 4E 05 F1 | 	add	fp, #20
1cfc4     A7 24 02 FB | 	rdlong	local04, fp
1cfc8     01 24 86 F1 | 	sub	local04, #1
1cfcc     01 24 66 F0 | 	shl	local04, #1
1cfd0     14 25 02 F1 | 	add	local04, local06
1cfd4     12 29 E2 FA | 	rdword	local06, local04
1cfd8     18 4E 85 F1 | 	sub	fp, #24
1cfdc     A7 28 52 FC | 	wrword	local06, fp
1cfe0     A7 2A E2 FA | 	rdword	local07, fp
1cfe4     14 4E 85 F1 | 	sub	fp, #20
1cfe8     20 2A 0E F2 | 	cmp	local07, #32 wz
1cfec     14 4E 05 51 |  if_ne	add	fp, #20
1cff0     A7 1E E2 5A |  if_ne	rdword	local01, fp
1cff4     14 4E 85 51 |  if_ne	sub	fp, #20
1cff8     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1cffc     18 00 90 5D |  if_ne	jmp	#LR__3351
1d000     2C 4E 05 F1 | 	add	fp, #44
1d004     A7 1E 02 FB | 	rdlong	local01, fp
1d008     01 1E 86 F1 | 	sub	local01, #1
1d00c     A7 1E 62 FC | 	wrlong	local01, fp
1d010     2C 4E 85 F1 | 	sub	fp, #44
1d014     90 FF 9F FD | 	jmp	#LR__3349
1d018                 | LR__3350
1d018                 | LR__3351
1d018     18 4E 05 F1 | 	add	fp, #24
1d01c     A7 2C 02 FB | 	rdlong	local08, fp
1d020     14 4E 05 F1 | 	add	fp, #20
1d024     A7 24 02 FB | 	rdlong	local04, fp
1d028     01 24 66 F0 | 	shl	local04, #1
1d02c     16 25 02 F1 | 	add	local04, local08
1d030     12 01 58 FC | 	wrword	#0, local04
1d034     A7 2A 0A FB | 	rdlong	local07, fp wz
1d038     2C 4E 85 F1 | 	sub	fp, #44
1d03c     06 FA 05 A6 |  if_e	mov	result1, #6
1d040     04 06 90 AD |  if_e	jmp	#LR__3380
1d044                 | ' 
1d044                 | ' 
1d044                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1d044     28 4E 05 F1 | 	add	fp, #40
1d048     A7 00 68 FC | 	wrlong	#0, fp
1d04c     28 4E 85 F1 | 	sub	fp, #40
1d050     97 22 48 FB | 	callpa	#(@LR__3353-@LR__3352)>>2,fcache_load_ptr_
1d054                 | LR__3352
1d054     18 4E 05 F1 | 	add	fp, #24
1d058     A7 2E 02 FB | 	rdlong	local09, fp
1d05c     10 4E 05 F1 | 	add	fp, #16
1d060     A7 30 02 FB | 	rdlong	local10, fp
1d064     28 4E 85 F1 | 	sub	fp, #40
1d068     01 30 66 F0 | 	shl	local10, #1
1d06c     17 31 02 F1 | 	add	local10, local09
1d070     18 33 E2 FA | 	rdword	local11, local10
1d074     20 32 0E F2 | 	cmp	local11, #32 wz
1d078     1C 00 90 5D |  if_ne	jmp	#LR__3354
1d07c     28 4E 05 F1 | 	add	fp, #40
1d080     A7 34 02 FB | 	rdlong	local12, fp
1d084     1A 27 02 F6 | 	mov	local05, local12
1d088     01 26 06 F1 | 	add	local05, #1
1d08c     A7 26 62 FC | 	wrlong	local05, fp
1d090     28 4E 85 F1 | 	sub	fp, #40
1d094     BC FF 9F FD | 	jmp	#LR__3352
1d098                 | LR__3353
1d098                 | LR__3354
1d098     28 4E 05 F1 | 	add	fp, #40
1d09c     A7 2A 02 FB | 	rdlong	local07, fp
1d0a0     28 4E 85 F1 | 	sub	fp, #40
1d0a4     01 2A 16 F2 | 	cmp	local07, #1 wc
1d0a8     28 00 90 3D |  if_ae	jmp	#LR__3355
1d0ac     18 4E 05 F1 | 	add	fp, #24
1d0b0     A7 22 02 FB | 	rdlong	local03, fp
1d0b4     10 4E 05 F1 | 	add	fp, #16
1d0b8     A7 2E 02 FB | 	rdlong	local09, fp
1d0bc     28 4E 85 F1 | 	sub	fp, #40
1d0c0     01 2E 66 F0 | 	shl	local09, #1
1d0c4     11 2F 02 F1 | 	add	local09, local03
1d0c8     17 1F E2 FA | 	rdword	local01, local09
1d0cc     2E 1E 0E F2 | 	cmp	local01, #46 wz
1d0d0     14 00 90 5D |  if_ne	jmp	#LR__3356
1d0d4                 | LR__3355
1d0d4     10 4E 05 F1 | 	add	fp, #16
1d0d8     A7 2A C2 FA | 	rdbyte	local07, fp
1d0dc     03 2A 46 F5 | 	or	local07, #3
1d0e0     A7 2A 42 FC | 	wrbyte	local07, fp
1d0e4     10 4E 85 F1 | 	sub	fp, #16
1d0e8                 | LR__3356
1d0e8     97 2C 48 FB | 	callpa	#(@LR__3358-@LR__3357)>>2,fcache_load_ptr_
1d0ec                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1d0ec                 | LR__3357
1d0ec     2C 4E 05 F1 | 	add	fp, #44
1d0f0     A7 2A 02 FB | 	rdlong	local07, fp
1d0f4     2C 4E 85 F1 | 	sub	fp, #44
1d0f8     01 2A 16 F2 | 	cmp	local07, #1 wc
1d0fc     44 00 90 CD |  if_b	jmp	#LR__3359
1d100     18 4E 05 F1 | 	add	fp, #24
1d104     A7 28 02 FB | 	rdlong	local06, fp
1d108     14 4E 05 F1 | 	add	fp, #20
1d10c     A7 22 02 FB | 	rdlong	local03, fp
1d110     2C 4E 85 F1 | 	sub	fp, #44
1d114     01 22 86 F1 | 	sub	local03, #1
1d118     01 22 66 F0 | 	shl	local03, #1
1d11c     14 23 02 F1 | 	add	local03, local06
1d120     11 1F E2 FA | 	rdword	local01, local03
1d124     2E 1E 0E F2 | 	cmp	local01, #46 wz
1d128     18 00 90 AD |  if_e	jmp	#LR__3359
1d12c     2C 4E 05 F1 | 	add	fp, #44
1d130     A7 1E 02 FB | 	rdlong	local01, fp
1d134     01 1E 86 F1 | 	sub	local01, #1
1d138     A7 1E 62 FC | 	wrlong	local01, fp
1d13c     2C 4E 85 F1 | 	sub	fp, #44
1d140     A8 FF 9F FD | 	jmp	#LR__3357
1d144                 | LR__3358
1d144                 | LR__3359
1d144     04 4E 05 F1 | 	add	fp, #4
1d148     A7 12 02 FB | 	rdlong	arg01, fp
1d14c     04 4E 85 F1 | 	sub	fp, #4
1d150     20 12 06 F1 | 	add	arg01, #32
1d154     20 14 06 F6 | 	mov	arg02, #32
1d158     0B 16 06 F6 | 	mov	arg03, #11
1d15c     09 37 02 F6 | 	mov	local13, arg01
1d160     98 00 A0 FD | 	call	#\builtin_bytefill_
1d164     1B FB 01 F6 | 	mov	result1, local13
1d168     0C 4E 05 F1 | 	add	fp, #12
1d16c     A7 00 48 FC | 	wrbyte	#0, fp
1d170     A7 2A C2 FA | 	rdbyte	local07, fp
1d174     14 4E 05 F1 | 	add	fp, #20
1d178     A7 2A 62 FC | 	wrlong	local07, fp
1d17c     04 4E 05 F1 | 	add	fp, #4
1d180     A7 10 68 FC | 	wrlong	#8, fp
1d184     24 4E 85 F1 | 	sub	fp, #36
1d188                 | ' 
1d188                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1d188                 | ' 	i = b = 0; ni = 8;
1d188                 | ' 	for (;;) {
1d188                 | LR__3360
1d188     18 4E 05 F1 | 	add	fp, #24
1d18c     A7 22 02 FB | 	rdlong	local03, fp
1d190     10 4E 05 F1 | 	add	fp, #16
1d194     A7 2E 02 FB | 	rdlong	local09, fp
1d198     17 25 02 F6 | 	mov	local04, local09
1d19c     01 24 06 F1 | 	add	local04, #1
1d1a0     A7 24 62 FC | 	wrlong	local04, fp
1d1a4     01 2E 66 F0 | 	shl	local09, #1
1d1a8     11 2F 02 F1 | 	add	local09, local03
1d1ac     17 29 E2 FA | 	rdword	local06, local09
1d1b0     14 4E 85 F1 | 	sub	fp, #20
1d1b4     A7 28 52 FC | 	wrword	local06, fp
1d1b8     A7 2A EA FA | 	rdword	local07, fp wz
1d1bc     14 4E 85 F1 | 	sub	fp, #20
1d1c0     74 03 90 AD |  if_e	jmp	#LR__3376
1d1c4     14 4E 05 F1 | 	add	fp, #20
1d1c8     A7 2A E2 FA | 	rdword	local07, fp
1d1cc     14 4E 85 F1 | 	sub	fp, #20
1d1d0     20 2A 0E F2 | 	cmp	local07, #32 wz
1d1d4     30 00 90 AD |  if_e	jmp	#LR__3361
1d1d8     14 4E 05 F1 | 	add	fp, #20
1d1dc     A7 1E E2 FA | 	rdword	local01, fp
1d1e0     14 4E 85 F1 | 	sub	fp, #20
1d1e4     2E 1E 0E F2 | 	cmp	local01, #46 wz
1d1e8     34 00 90 5D |  if_ne	jmp	#LR__3362
1d1ec     28 4E 05 F1 | 	add	fp, #40
1d1f0     A7 24 02 FB | 	rdlong	local04, fp
1d1f4     04 4E 05 F1 | 	add	fp, #4
1d1f8     A7 30 02 FB | 	rdlong	local10, fp
1d1fc     2C 4E 85 F1 | 	sub	fp, #44
1d200     18 25 0A F2 | 	cmp	local04, local10 wz
1d204     18 00 90 AD |  if_e	jmp	#LR__3362
1d208                 | LR__3361
1d208     10 4E 05 F1 | 	add	fp, #16
1d20c     A7 2A C2 FA | 	rdbyte	local07, fp
1d210     03 2A 46 F5 | 	or	local07, #3
1d214     A7 2A 42 FC | 	wrbyte	local07, fp
1d218     10 4E 85 F1 | 	sub	fp, #16
1d21c                 | ' 			cf |=  0x01  |  0x02 ;
1d21c                 | ' 			continue;
1d21c     68 FF 9F FD | 	jmp	#LR__3360
1d220                 | LR__3362
1d220     20 4E 05 F1 | 	add	fp, #32
1d224     A7 2A 02 FB | 	rdlong	local07, fp
1d228     04 4E 05 F1 | 	add	fp, #4
1d22c     A7 1E 02 FB | 	rdlong	local01, fp
1d230     24 4E 85 F1 | 	sub	fp, #36
1d234     0F 2B 12 F2 | 	cmp	local07, local01 wc
1d238     1C 00 90 3D |  if_ae	jmp	#LR__3363
1d23c     28 4E 05 F1 | 	add	fp, #40
1d240     A7 2C 02 FB | 	rdlong	local08, fp
1d244     04 4E 05 F1 | 	add	fp, #4
1d248     A7 30 02 FB | 	rdlong	local10, fp
1d24c     2C 4E 85 F1 | 	sub	fp, #44
1d250     18 2D 0A F2 | 	cmp	local08, local10 wz
1d254     B0 00 90 5D |  if_ne	jmp	#LR__3365
1d258                 | LR__3363
1d258     24 4E 05 F1 | 	add	fp, #36
1d25c     A7 2A 02 FB | 	rdlong	local07, fp
1d260     24 4E 85 F1 | 	sub	fp, #36
1d264     0B 2A 0E F2 | 	cmp	local07, #11 wz
1d268     18 00 90 5D |  if_ne	jmp	#LR__3364
1d26c     10 4E 05 F1 | 	add	fp, #16
1d270     A7 2A C2 FA | 	rdbyte	local07, fp
1d274     03 2A 46 F5 | 	or	local07, #3
1d278     A7 2A 42 FC | 	wrbyte	local07, fp
1d27c     10 4E 85 F1 | 	sub	fp, #16
1d280                 | ' 				cf |=  0x01  |  0x02 ;
1d280                 | ' 				break;
1d280     B4 02 90 FD | 	jmp	#LR__3376
1d284                 | LR__3364
1d284     28 4E 05 F1 | 	add	fp, #40
1d288     A7 2A 02 FB | 	rdlong	local07, fp
1d28c     04 4E 05 F1 | 	add	fp, #4
1d290     A7 1E 02 FB | 	rdlong	local01, fp
1d294     2C 4E 85 F1 | 	sub	fp, #44
1d298     0F 2B 0A F2 | 	cmp	local07, local01 wz
1d29c     10 4E 05 51 |  if_ne	add	fp, #16
1d2a0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1d2a4     03 2A 46 55 |  if_ne	or	local07, #3
1d2a8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1d2ac     10 4E 85 51 |  if_ne	sub	fp, #16
1d2b0     28 4E 05 F1 | 	add	fp, #40
1d2b4     A7 2A 02 FB | 	rdlong	local07, fp
1d2b8     04 4E 05 F1 | 	add	fp, #4
1d2bc     A7 20 02 FB | 	rdlong	local02, fp
1d2c0     2C 4E 85 F1 | 	sub	fp, #44
1d2c4     10 2B 1A F2 | 	cmp	local07, local02 wcz
1d2c8     6C 02 90 1D |  if_a	jmp	#LR__3376
1d2cc     2C 4E 05 F1 | 	add	fp, #44
1d2d0     A7 2A 02 FB | 	rdlong	local07, fp
1d2d4     04 4E 85 F1 | 	sub	fp, #4
1d2d8     A7 2A 62 FC | 	wrlong	local07, fp
1d2dc     08 4E 85 F1 | 	sub	fp, #8
1d2e0     A7 10 68 FC | 	wrlong	#8, fp
1d2e4     04 4E 05 F1 | 	add	fp, #4
1d2e8     A7 16 68 FC | 	wrlong	#11, fp
1d2ec     18 4E 85 F1 | 	sub	fp, #24
1d2f0     A7 32 C2 FA | 	rdbyte	local11, fp
1d2f4     19 2B E2 F8 | 	getbyte	local07, local11, #0
1d2f8     02 2A 66 F0 | 	shl	local07, #2
1d2fc     A7 2A 42 FC | 	wrbyte	local07, fp
1d300     0C 4E 85 F1 | 	sub	fp, #12
1d304                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1d304                 | ' 			continue;
1d304     80 FE 9F FD | 	jmp	#LR__3360
1d308                 | LR__3365
1d308     14 4E 05 F1 | 	add	fp, #20
1d30c     A7 2A E2 FA | 	rdword	local07, fp
1d310     14 4E 85 F1 | 	sub	fp, #20
1d314     80 2A 16 F2 | 	cmp	local07, #128 wc
1d318     6C 00 90 CD |  if_b	jmp	#LR__3367
1d31c     10 4E 05 F1 | 	add	fp, #16
1d320     A7 2A C2 FA | 	rdbyte	local07, fp
1d324     02 2A 46 F5 | 	or	local07, #2
1d328     A7 2A 42 FC | 	wrbyte	local07, fp
1d32c     04 4E 05 F1 | 	add	fp, #4
1d330     A7 12 E2 FA | 	rdword	arg01, fp
1d334     14 4E 85 F1 | 	sub	fp, #20
1d338     01 00 00 FF 
1d33c     52 15 06 F6 | 	mov	arg02, ##850
1d340     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1d344     14 4E 05 F1 | 	add	fp, #20
1d348     A7 FA 51 FC | 	wrword	result1, fp
1d34c     A7 2A E2 FA | 	rdword	local07, fp
1d350     14 4E 85 F1 | 	sub	fp, #20
1d354     80 2A CE F7 | 	test	local07, #128 wz
1d358     2C 00 90 AD |  if_e	jmp	#LR__3366
1d35c     14 4E 05 F1 | 	add	fp, #20
1d360     A7 20 E2 FA | 	rdword	local02, fp
1d364     7F 20 06 F5 | 	and	local02, #127
1d368     01 00 00 FF 
1d36c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1d370     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1d374     10 2B C2 FA | 	rdbyte	local07, local02
1d378     A7 2A 52 FC | 	wrword	local07, fp
1d37c     14 4E 85 F1 | 	sub	fp, #20
1d380     01 00 00 FF 
1d384     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1d388                 | LR__3366
1d388                 | LR__3367
1d388     14 4E 05 F1 | 	add	fp, #20
1d38c     A7 2A E2 FA | 	rdword	local07, fp
1d390     14 4E 85 F1 | 	sub	fp, #20
1d394     00 2B 16 F2 | 	cmp	local07, #256 wc
1d398     88 00 90 CD |  if_b	jmp	#LR__3369
1d39c     24 4E 05 F1 | 	add	fp, #36
1d3a0     A7 2A 02 FB | 	rdlong	local07, fp
1d3a4     01 2A 86 F1 | 	sub	local07, #1
1d3a8     04 4E 85 F1 | 	sub	fp, #4
1d3ac     A7 20 02 FB | 	rdlong	local02, fp
1d3b0     20 4E 85 F1 | 	sub	fp, #32
1d3b4     15 21 12 F2 | 	cmp	local02, local07 wc
1d3b8     2C 00 90 CD |  if_b	jmp	#LR__3368
1d3bc     10 4E 05 F1 | 	add	fp, #16
1d3c0     A7 32 C2 FA | 	rdbyte	local11, fp
1d3c4     19 2B E2 F8 | 	getbyte	local07, local11, #0
1d3c8     03 2A 46 F5 | 	or	local07, #3
1d3cc     A7 2A 42 FC | 	wrbyte	local07, fp
1d3d0     14 4E 05 F1 | 	add	fp, #20
1d3d4     A7 2A 02 FB | 	rdlong	local07, fp
1d3d8     04 4E 85 F1 | 	sub	fp, #4
1d3dc     A7 2A 62 FC | 	wrlong	local07, fp
1d3e0     20 4E 85 F1 | 	sub	fp, #32
1d3e4                 | ' 				cf |=  0x01  |  0x02 ;
1d3e4                 | ' 				i = ni; continue;
1d3e4     A0 FD 9F FD | 	jmp	#LR__3360
1d3e8                 | LR__3368
1d3e8     04 4E 05 F1 | 	add	fp, #4
1d3ec     A7 2E 02 FB | 	rdlong	local09, fp
1d3f0     1C 4E 05 F1 | 	add	fp, #28
1d3f4     A7 30 02 FB | 	rdlong	local10, fp
1d3f8     18 25 02 F6 | 	mov	local04, local10
1d3fc     01 24 06 F1 | 	add	local04, #1
1d400     A7 24 62 FC | 	wrlong	local04, fp
1d404     20 2E 06 F1 | 	add	local09, #32
1d408     17 31 02 F1 | 	add	local10, local09
1d40c     0C 4E 85 F1 | 	sub	fp, #12
1d410     A7 22 E2 FA | 	rdword	local03, fp
1d414     14 4E 85 F1 | 	sub	fp, #20
1d418     08 22 46 F0 | 	shr	local03, #8
1d41c     18 23 42 FC | 	wrbyte	local03, local10
1d420     D4 00 90 FD | 	jmp	#LR__3375
1d424                 | LR__3369
1d424     14 4E 05 F1 | 	add	fp, #20
1d428     A7 2A EA FA | 	rdword	local07, fp wz
1d42c     14 4E 85 F1 | 	sub	fp, #20
1d430     20 00 90 AD |  if_e	jmp	#LR__3370
1d434     16 01 00 FF 
1d438     C1 13 06 F6 | 	mov	arg01, ##@LR__4003
1d43c     14 4E 05 F1 | 	add	fp, #20
1d440     A7 14 E2 FA | 	rdword	arg02, fp
1d444     14 4E 85 F1 | 	sub	fp, #20
1d448     48 CB BF FD | 	call	#_fatfs_cc_strchr
1d44c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d450     20 00 90 AD |  if_e	jmp	#LR__3371
1d454                 | LR__3370
1d454     14 4E 05 F1 | 	add	fp, #20
1d458     A7 BE 58 FC | 	wrword	#95, fp
1d45c     04 4E 85 F1 | 	sub	fp, #4
1d460     A7 2A C2 FA | 	rdbyte	local07, fp
1d464     03 2A 46 F5 | 	or	local07, #3
1d468     A7 2A 42 FC | 	wrbyte	local07, fp
1d46c     10 4E 85 F1 | 	sub	fp, #16
1d470     84 00 90 FD | 	jmp	#LR__3374
1d474                 | LR__3371
1d474     14 4E 05 F1 | 	add	fp, #20
1d478     A7 2A E2 FA | 	rdword	local07, fp
1d47c     14 4E 85 F1 | 	sub	fp, #20
1d480     41 2A 16 F2 | 	cmp	local07, #65 wc
1d484     24 00 90 CD |  if_b	jmp	#LR__3372
1d488     14 4E 05 F1 | 	add	fp, #20
1d48c     A7 1E E2 FA | 	rdword	local01, fp
1d490     14 4E 85 F1 | 	sub	fp, #20
1d494     5B 1E 16 F2 | 	cmp	local01, #91 wc
1d498     0C 4E 05 C1 |  if_b	add	fp, #12
1d49c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1d4a0     02 2A 46 C5 |  if_b	or	local07, #2
1d4a4     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1d4a8     0C 4E 85 C1 |  if_b	sub	fp, #12
1d4ac                 | LR__3372
1d4ac     14 4E 05 F1 | 	add	fp, #20
1d4b0     A7 2A E2 FA | 	rdword	local07, fp
1d4b4     14 4E 85 F1 | 	sub	fp, #20
1d4b8     61 2A 16 F2 | 	cmp	local07, #97 wc
1d4bc     38 00 90 CD |  if_b	jmp	#LR__3373
1d4c0     14 4E 05 F1 | 	add	fp, #20
1d4c4     A7 1E E2 FA | 	rdword	local01, fp
1d4c8     14 4E 85 F1 | 	sub	fp, #20
1d4cc     7B 1E 16 F2 | 	cmp	local01, #123 wc
1d4d0     24 00 90 3D |  if_ae	jmp	#LR__3373
1d4d4     0C 4E 05 F1 | 	add	fp, #12
1d4d8     A7 2A C2 FA | 	rdbyte	local07, fp
1d4dc     01 2A 46 F5 | 	or	local07, #1
1d4e0     A7 2A 42 FC | 	wrbyte	local07, fp
1d4e4     08 4E 05 F1 | 	add	fp, #8
1d4e8     A7 2A E2 FA | 	rdword	local07, fp
1d4ec     20 2A 86 F1 | 	sub	local07, #32
1d4f0     A7 2A 52 FC | 	wrword	local07, fp
1d4f4     14 4E 85 F1 | 	sub	fp, #20
1d4f8                 | LR__3373
1d4f8                 | LR__3374
1d4f8                 | LR__3375
1d4f8     04 4E 05 F1 | 	add	fp, #4
1d4fc     A7 32 02 FB | 	rdlong	local11, fp
1d500     19 2F 02 F6 | 	mov	local09, local11
1d504     1C 4E 05 F1 | 	add	fp, #28
1d508     A7 20 02 FB | 	rdlong	local02, fp
1d50c     10 25 02 F6 | 	mov	local04, local02
1d510     01 24 06 F1 | 	add	local04, #1
1d514     A7 24 62 FC | 	wrlong	local04, fp
1d518     10 31 02 F6 | 	mov	local10, local02
1d51c     20 2E 06 F1 | 	add	local09, #32
1d520     17 31 02 F1 | 	add	local10, local09
1d524     0C 4E 85 F1 | 	sub	fp, #12
1d528     A7 22 E2 FA | 	rdword	local03, fp
1d52c     14 4E 85 F1 | 	sub	fp, #20
1d530     18 23 42 FC | 	wrbyte	local03, local10
1d534     50 FC 9F FD | 	jmp	#LR__3360
1d538                 | LR__3376
1d538     04 4E 05 F1 | 	add	fp, #4
1d53c     A7 32 02 FB | 	rdlong	local11, fp
1d540     04 4E 85 F1 | 	sub	fp, #4
1d544     20 32 06 F1 | 	add	local11, #32
1d548     19 2B C2 FA | 	rdbyte	local07, local11
1d54c     E5 2A 0E F2 | 	cmp	local07, #229 wz
1d550     04 4E 05 A1 |  if_e	add	fp, #4
1d554     A7 2A 02 AB |  if_e	rdlong	local07, fp
1d558     04 4E 85 A1 |  if_e	sub	fp, #4
1d55c     20 2A 06 A1 |  if_e	add	local07, #32
1d560     15 0B 48 AC |  if_e	wrbyte	#5, local07
1d564     24 4E 05 F1 | 	add	fp, #36
1d568     A7 2A 02 FB | 	rdlong	local07, fp
1d56c     24 4E 85 F1 | 	sub	fp, #36
1d570     08 2A 0E F2 | 	cmp	local07, #8 wz
1d574     0C 4E 05 A1 |  if_e	add	fp, #12
1d578     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1d57c     02 2A 66 A0 |  if_e	shl	local07, #2
1d580     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1d584     0C 4E 85 A1 |  if_e	sub	fp, #12
1d588     0C 4E 05 F1 | 	add	fp, #12
1d58c     A7 2A C2 FA | 	rdbyte	local07, fp
1d590     0C 4E 85 F1 | 	sub	fp, #12
1d594     0C 2A 06 F5 | 	and	local07, #12
1d598     0C 2A 0E F2 | 	cmp	local07, #12 wz
1d59c     18 00 90 AD |  if_e	jmp	#LR__3377
1d5a0     0C 4E 05 F1 | 	add	fp, #12
1d5a4     A7 1E C2 FA | 	rdbyte	local01, fp
1d5a8     0C 4E 85 F1 | 	sub	fp, #12
1d5ac     03 1E 06 F5 | 	and	local01, #3
1d5b0     03 1E 0E F2 | 	cmp	local01, #3 wz
1d5b4     14 00 90 5D |  if_ne	jmp	#LR__3378
1d5b8                 | LR__3377
1d5b8     10 4E 05 F1 | 	add	fp, #16
1d5bc     A7 2A C2 FA | 	rdbyte	local07, fp
1d5c0     02 2A 46 F5 | 	or	local07, #2
1d5c4     A7 2A 42 FC | 	wrbyte	local07, fp
1d5c8     10 4E 85 F1 | 	sub	fp, #16
1d5cc                 | LR__3378
1d5cc     10 4E 05 F1 | 	add	fp, #16
1d5d0     A7 2A C2 FA | 	rdbyte	local07, fp
1d5d4     10 4E 85 F1 | 	sub	fp, #16
1d5d8     02 2A CE F7 | 	test	local07, #2 wz
1d5dc     48 00 90 5D |  if_ne	jmp	#LR__3379
1d5e0     0C 4E 05 F1 | 	add	fp, #12
1d5e4     A7 2A C2 FA | 	rdbyte	local07, fp
1d5e8     0C 4E 85 F1 | 	sub	fp, #12
1d5ec     01 2A CE F7 | 	test	local07, #1 wz
1d5f0     10 4E 05 51 |  if_ne	add	fp, #16
1d5f4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1d5f8     10 2A 46 55 |  if_ne	or	local07, #16
1d5fc     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1d600     10 4E 85 51 |  if_ne	sub	fp, #16
1d604     0C 4E 05 F1 | 	add	fp, #12
1d608     A7 2A C2 FA | 	rdbyte	local07, fp
1d60c     0C 4E 85 F1 | 	sub	fp, #12
1d610     04 2A CE F7 | 	test	local07, #4 wz
1d614     10 4E 05 51 |  if_ne	add	fp, #16
1d618     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1d61c     08 2A 46 55 |  if_ne	or	local07, #8
1d620     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1d624     10 4E 85 51 |  if_ne	sub	fp, #16
1d628                 | LR__3379
1d628     04 4E 05 F1 | 	add	fp, #4
1d62c     A7 2A 02 FB | 	rdlong	local07, fp
1d630     0C 4E 05 F1 | 	add	fp, #12
1d634     A7 1E C2 FA | 	rdbyte	local01, fp
1d638     10 4E 85 F1 | 	sub	fp, #16
1d63c     2B 2A 06 F1 | 	add	local07, #43
1d640     15 1F 42 FC | 	wrbyte	local01, local07
1d644                 | ' 	}
1d644                 | ' 
1d644                 | ' 	dp->fn[ 11 ] = cf;
1d644                 | ' 
1d644                 | ' 	return FR_OK;
1d644     00 FA 05 F6 | 	mov	result1, #0
1d648                 | LR__3380
1d648     A7 F0 03 F6 | 	mov	ptra, fp
1d64c     B2 00 A0 FD | 	call	#popregs_
1d650                 | _fatfs_cc_create_name_ret
1d650     2D 00 64 FD | 	ret
1d654                 | 
1d654                 | _fatfs_cc_follow_path
1d654     02 4A 05 F6 | 	mov	COUNT_, #2
1d658     A8 00 A0 FD | 	call	#pushregs_
1d65c     18 F0 07 F1 | 	add	ptra, #24
1d660     04 4E 05 F1 | 	add	fp, #4
1d664     A7 12 62 FC | 	wrlong	arg01, fp
1d668     04 4E 05 F1 | 	add	fp, #4
1d66c     A7 14 62 FC | 	wrlong	arg02, fp
1d670     04 4E 85 F1 | 	sub	fp, #4
1d674     A7 FA 01 FB | 	rdlong	result1, fp
1d678     FD 1E 02 FB | 	rdlong	local01, result1
1d67c     10 4E 05 F1 | 	add	fp, #16
1d680     A7 1E 62 FC | 	wrlong	local01, fp
1d684     14 4E 85 F1 | 	sub	fp, #20
1d688     97 24 48 FB | 	callpa	#(@LR__3392-@LR__3390)>>2,fcache_load_ptr_
1d68c                 | ' )
1d68c                 | ' {
1d68c                 | ' 	FRESULT res;
1d68c                 | ' 	BYTE ns;
1d68c                 | ' 	FATFS *fs = dp->obj.fs;
1d68c                 | ' #line 3034 "ff.c"
1d68c                 | ' 	{
1d68c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1d68c                 | LR__3390
1d68c     08 4E 05 F1 | 	add	fp, #8
1d690     A7 1E 02 FB | 	rdlong	local01, fp
1d694     08 4E 85 F1 | 	sub	fp, #8
1d698     0F 1F C2 FA | 	rdbyte	local01, local01
1d69c     2F 1E 0E F2 | 	cmp	local01, #47 wz
1d6a0     18 00 90 AD |  if_e	jmp	#LR__3391
1d6a4     08 4E 05 F1 | 	add	fp, #8
1d6a8     A7 1E 02 FB | 	rdlong	local01, fp
1d6ac     08 4E 85 F1 | 	sub	fp, #8
1d6b0     0F 1F C2 FA | 	rdbyte	local01, local01
1d6b4     5C 1E 0E F2 | 	cmp	local01, #92 wz
1d6b8     18 00 90 5D |  if_ne	jmp	#LR__3393
1d6bc                 | LR__3391
1d6bc     08 4E 05 F1 | 	add	fp, #8
1d6c0     A7 1E 02 FB | 	rdlong	local01, fp
1d6c4     01 1E 06 F1 | 	add	local01, #1
1d6c8     A7 1E 62 FC | 	wrlong	local01, fp
1d6cc     08 4E 85 F1 | 	sub	fp, #8
1d6d0     B8 FF 9F FD | 	jmp	#LR__3390
1d6d4                 | LR__3392
1d6d4                 | LR__3393
1d6d4     04 4E 05 F1 | 	add	fp, #4
1d6d8     A7 1E 02 FB | 	rdlong	local01, fp
1d6dc     08 1E 06 F1 | 	add	local01, #8
1d6e0     0F 01 68 FC | 	wrlong	#0, local01
1d6e4     04 4E 05 F1 | 	add	fp, #4
1d6e8     A7 1E 02 FB | 	rdlong	local01, fp
1d6ec     08 4E 85 F1 | 	sub	fp, #8
1d6f0     0F 1F C2 FA | 	rdbyte	local01, local01
1d6f4     20 1E 16 F2 | 	cmp	local01, #32 wc
1d6f8     30 00 90 3D |  if_ae	jmp	#LR__3394
1d6fc     04 4E 05 F1 | 	add	fp, #4
1d700     A7 1E 02 FB | 	rdlong	local01, fp
1d704     2B 1E 06 F1 | 	add	local01, #43
1d708     0F 01 49 FC | 	wrbyte	#128, local01
1d70c     A7 12 02 FB | 	rdlong	arg01, fp
1d710     04 4E 85 F1 | 	sub	fp, #4
1d714     00 14 06 F6 | 	mov	arg02, #0
1d718     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1d71c     0C 4E 05 F1 | 	add	fp, #12
1d720     A7 FA 61 FC | 	wrlong	result1, fp
1d724     0C 4E 85 F1 | 	sub	fp, #12
1d728     1C 01 90 FD | 	jmp	#LR__3398
1d72c                 | LR__3394
1d72c                 | ' 		for (;;) {
1d72c                 | LR__3395
1d72c     04 4E 05 F1 | 	add	fp, #4
1d730     A7 12 02 FB | 	rdlong	arg01, fp
1d734     04 4E 05 F1 | 	add	fp, #4
1d738     A7 14 02 F6 | 	mov	arg02, fp
1d73c     08 4E 85 F1 | 	sub	fp, #8
1d740     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1d744     0C 4E 05 F1 | 	add	fp, #12
1d748     A7 FA 61 FC | 	wrlong	result1, fp
1d74c     00 FA 4D F2 | 	cmps	result1, #0 wz
1d750     0C 4E 85 F1 | 	sub	fp, #12
1d754     F0 00 90 5D |  if_ne	jmp	#LR__3397
1d758     04 4E 05 F1 | 	add	fp, #4
1d75c     A7 12 02 FB | 	rdlong	arg01, fp
1d760     04 4E 85 F1 | 	sub	fp, #4
1d764     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1d768     0C 4E 05 F1 | 	add	fp, #12
1d76c     A7 FA 61 FC | 	wrlong	result1, fp
1d770     08 4E 85 F1 | 	sub	fp, #8
1d774     A7 1E 02 FB | 	rdlong	local01, fp
1d778     2B 1E 06 F1 | 	add	local01, #43
1d77c     0F 1F C2 FA | 	rdbyte	local01, local01
1d780     0C 4E 05 F1 | 	add	fp, #12
1d784     A7 1E 42 FC | 	wrbyte	local01, fp
1d788     04 4E 85 F1 | 	sub	fp, #4
1d78c     A7 1E 0A FB | 	rdlong	local01, fp wz
1d790     0C 4E 85 F1 | 	sub	fp, #12
1d794     34 00 90 AD |  if_e	jmp	#LR__3396
1d798     0C 4E 05 F1 | 	add	fp, #12
1d79c     A7 1E 02 FB | 	rdlong	local01, fp
1d7a0     0C 4E 85 F1 | 	sub	fp, #12
1d7a4     04 1E 0E F2 | 	cmp	local01, #4 wz
1d7a8     9C 00 90 5D |  if_ne	jmp	#LR__3397
1d7ac     10 4E 05 F1 | 	add	fp, #16
1d7b0     A7 1E C2 FA | 	rdbyte	local01, fp
1d7b4     10 4E 85 F1 | 	sub	fp, #16
1d7b8     04 1E CE F7 | 	test	local01, #4 wz
1d7bc     0C 4E 05 A1 |  if_e	add	fp, #12
1d7c0     A7 0A 68 AC |  if_e	wrlong	#5, fp
1d7c4     0C 4E 85 A1 |  if_e	sub	fp, #12
1d7c8                 | ' 					}
1d7c8                 | ' 				}
1d7c8                 | ' 				break;
1d7c8     7C 00 90 FD | 	jmp	#LR__3397
1d7cc                 | LR__3396
1d7cc     10 4E 05 F1 | 	add	fp, #16
1d7d0     A7 1E C2 FA | 	rdbyte	local01, fp
1d7d4     10 4E 85 F1 | 	sub	fp, #16
1d7d8     04 1E CE F7 | 	test	local01, #4 wz
1d7dc     68 00 90 5D |  if_ne	jmp	#LR__3397
1d7e0     04 4E 05 F1 | 	add	fp, #4
1d7e4     A7 1E 02 FB | 	rdlong	local01, fp
1d7e8     04 4E 85 F1 | 	sub	fp, #4
1d7ec     06 1E 06 F1 | 	add	local01, #6
1d7f0     0F 1F C2 FA | 	rdbyte	local01, local01
1d7f4     10 1E CE F7 | 	test	local01, #16 wz
1d7f8     0C 4E 05 A1 |  if_e	add	fp, #12
1d7fc     A7 0A 68 AC |  if_e	wrlong	#5, fp
1d800     0C 4E 85 A1 |  if_e	sub	fp, #12
1d804                 | ' 				res = FR_NO_PATH; break;
1d804     40 00 90 AD |  if_e	jmp	#LR__3397
1d808     04 4E 05 F1 | 	add	fp, #4
1d80c     A7 20 02 FB | 	rdlong	local02, fp
1d810     10 1F 02 F6 | 	mov	local01, local02
1d814     10 4E 05 F1 | 	add	fp, #16
1d818     A7 14 02 FB | 	rdlong	arg02, fp
1d81c     0A 13 02 F6 | 	mov	arg01, arg02
1d820     34 14 06 F1 | 	add	arg02, #52
1d824     14 4E 85 F1 | 	sub	fp, #20
1d828     10 20 06 F1 | 	add	local02, #16
1d82c     10 21 02 FB | 	rdlong	local02, local02
1d830     FF 21 06 F5 | 	and	local02, #511
1d834     10 15 02 F1 | 	add	arg02, local02
1d838     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1d83c     08 1E 06 F1 | 	add	local01, #8
1d840     0F FB 61 FC | 	wrlong	result1, local01
1d844     E4 FE 9F FD | 	jmp	#LR__3395
1d848                 | LR__3397
1d848                 | LR__3398
1d848                 | ' 			}
1d848                 | ' #line 3090 "ff.c"
1d848                 | ' 			{
1d848                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1d848                 | ' 			}
1d848                 | ' 		}
1d848                 | ' 	}
1d848                 | ' 
1d848                 | ' 	return res;
1d848     0C 4E 05 F1 | 	add	fp, #12
1d84c     A7 FA 01 FB | 	rdlong	result1, fp
1d850     0C 4E 85 F1 | 	sub	fp, #12
1d854     A7 F0 03 F6 | 	mov	ptra, fp
1d858     B2 00 A0 FD | 	call	#popregs_
1d85c                 | _fatfs_cc_follow_path_ret
1d85c     2D 00 64 FD | 	ret
1d860                 | 
1d860                 | _fatfs_cc_get_ldnumber
1d860     01 00 66 F6 | 	neg	_var01, #1
1d864     09 03 0A FB | 	rdlong	_var02, arg01 wz
1d868     01 05 02 F6 | 	mov	_var03, _var02
1d86c     01 FA 65 A6 |  if_e	neg	result1, #1
1d870     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1d874     97 10 48 FB | 	callpa	#(@LR__3401-@LR__3400)>>2,fcache_load_ptr_
1d878                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1d878                 | LR__3400
1d878     02 07 C2 FA | 	rdbyte	_var04, _var03
1d87c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1d880     20 FA 15 F2 | 	cmp	result1, #32 wc
1d884     01 04 06 F1 | 	add	_var03, #1
1d888     03 09 02 36 |  if_ae	mov	_var05, _var04
1d88c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1d890     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1d894     E0 FF 9F 1D |  if_a	jmp	#LR__3400
1d898                 | LR__3401
1d898     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1d89c     3A 06 0E F2 | 	cmp	_var04, #58 wz
1d8a0     40 00 90 5D |  if_ne	jmp	#LR__3403
1d8a4     01 0A 06 F6 | 	mov	_var06, #1
1d8a8     01 09 C2 FA | 	rdbyte	_var05, _var02
1d8ac     30 08 16 F2 | 	cmp	_var05, #48 wc
1d8b0     1C 00 90 CD |  if_b	jmp	#LR__3402
1d8b4     01 09 C2 FA | 	rdbyte	_var05, _var02
1d8b8     3A 08 16 F2 | 	cmp	_var05, #58 wc
1d8bc     01 0D 02 C6 |  if_b	mov	_var07, _var02
1d8c0     02 0C 06 C1 |  if_b	add	_var07, #2
1d8c4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1d8c8     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1d8cc     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1d8d0                 | LR__3402
1d8d0     01 0A 56 F2 | 	cmps	_var06, #1 wc
1d8d4     05 01 02 C6 |  if_b	mov	_var01, _var06
1d8d8     09 05 62 CC |  if_b	wrlong	_var03, arg01
1d8dc                 | ' 			vol = i;
1d8dc                 | ' 			*path = tt;
1d8dc                 | ' 		}
1d8dc                 | ' 		return vol;
1d8dc     00 FB 01 F6 | 	mov	result1, _var01
1d8e0     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1d8e4                 | LR__3403
1d8e4                 | ' 	}
1d8e4                 | ' #line 3170 "ff.c"
1d8e4                 | ' 	vol = 0;
1d8e4                 | ' 
1d8e4                 | ' 	return vol;
1d8e4     00 FA 05 F6 | 	mov	result1, #0
1d8e8                 | _fatfs_cc_get_ldnumber_ret
1d8e8     2D 00 64 FD | 	ret
1d8ec                 | 
1d8ec                 | _fatfs_cc_check_fs
1d8ec     04 4A 05 F6 | 	mov	COUNT_, #4
1d8f0     A8 00 A0 FD | 	call	#pushregs_
1d8f4     09 1F 02 F6 | 	mov	local01, arg01
1d8f8     03 1E 06 F1 | 	add	local01, #3
1d8fc     0F 01 48 FC | 	wrbyte	#0, local01
1d900     2D 1E 06 F1 | 	add	local01, #45
1d904     FF FF FF FF 
1d908     0F FF 6B FC | 	wrlong	##-1, local01
1d90c     30 1E 86 F1 | 	sub	local01, #48
1d910     0F 13 02 F6 | 	mov	arg01, local01
1d914     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1d918     00 FA 0D F2 | 	cmp	result1, #0 wz
1d91c     04 FA 05 56 |  if_ne	mov	result1, #4
1d920     94 01 90 5D |  if_ne	jmp	#LR__3414
1d924     34 1E 06 F1 | 	add	local01, #52
1d928     0F 13 02 F6 | 	mov	arg01, local01
1d92c     FE 13 06 F1 | 	add	arg01, #510
1d930                 | ' {
1d930                 | ' 
1d930                 | ' 	return *((WORD*)ptr);
1d930     09 21 E2 FA | 	rdword	local02, arg01
1d934     0F 23 C2 FA | 	rdbyte	local03, local01
1d938     34 1E 86 F1 | 	sub	local01, #52
1d93c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1d940     EB 24 0E F2 | 	cmp	local04, #235 wz
1d944     11 17 02 56 |  if_ne	mov	arg03, local03
1d948     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1d94c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1d950     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1d954     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1d958     44 01 90 5D |  if_ne	jmp	#LR__3413
1d95c     10 25 32 F9 | 	getword	local04, local02, #0
1d960     55 00 00 FF 
1d964     55 24 0E F2 | 	cmp	local04, ##43605 wz
1d968     2C 00 90 5D |  if_ne	jmp	#LR__3410
1d96c     34 1E 06 F1 | 	add	local01, #52
1d970     0F 13 02 F6 | 	mov	arg01, local01
1d974     34 1E 86 F1 | 	sub	local01, #52
1d978     52 12 06 F1 | 	add	arg01, #82
1d97c     16 01 00 FF 
1d980     C8 15 06 F6 | 	mov	arg02, ##@LR__4004
1d984     08 16 06 F6 | 	mov	arg03, #8
1d988     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1d98c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d990                 | ' 			return 0;
1d990     00 FA 05 A6 |  if_e	mov	result1, #0
1d994     20 01 90 AD |  if_e	jmp	#LR__3414
1d998                 | LR__3410
1d998     34 1E 06 F1 | 	add	local01, #52
1d99c     0F 13 02 F6 | 	mov	arg01, local01
1d9a0     0B 12 06 F1 | 	add	arg01, #11
1d9a4                 | ' {
1d9a4                 | ' 
1d9a4                 | ' 	return *((WORD*)ptr);
1d9a4     09 FB E1 FA | 	rdword	result1, arg01
1d9a8     0D 1E 06 F1 | 	add	local01, #13
1d9ac     0F 23 C2 FA | 	rdbyte	local03, local01
1d9b0     41 1E 86 F1 | 	sub	local01, #65
1d9b4     FD 24 32 F9 | 	getword	local04, result1, #0
1d9b8     FD 14 32 F9 | 	getword	arg02, result1, #0
1d9bc     01 14 86 F1 | 	sub	arg02, #1
1d9c0     0A 25 CA F7 | 	test	local04, arg02 wz
1d9c4     D8 00 90 5D |  if_ne	jmp	#LR__3412
1d9c8     FD 14 32 F9 | 	getword	arg02, result1, #0
1d9cc     01 00 00 FF 
1d9d0     00 14 16 F2 | 	cmp	arg02, ##512 wc
1d9d4     C8 00 90 CD |  if_b	jmp	#LR__3412
1d9d8     FD 14 32 F9 | 	getword	arg02, result1, #0
1d9dc     01 00 00 FF 
1d9e0     01 14 16 F2 | 	cmp	arg02, ##513 wc
1d9e4     B8 00 90 3D |  if_ae	jmp	#LR__3412
1d9e8     11 13 02 F6 | 	mov	arg01, local03
1d9ec     07 12 4E F7 | 	zerox	arg01, #7 wz
1d9f0     AC 00 90 AD |  if_e	jmp	#LR__3412
1d9f4     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1d9f8     11 23 E2 F8 | 	getbyte	local03, local03, #0
1d9fc     01 22 86 F1 | 	sub	local03, #1
1da00     11 13 CA F7 | 	test	arg01, local03 wz
1da04     98 00 90 5D |  if_ne	jmp	#LR__3412
1da08     34 1E 06 F1 | 	add	local01, #52
1da0c     0F 13 02 F6 | 	mov	arg01, local01
1da10     34 1E 86 F1 | 	sub	local01, #52
1da14     0E 12 06 F1 | 	add	arg01, #14
1da18                 | ' {
1da18                 | ' 
1da18                 | ' 	return *((WORD*)ptr);
1da18     09 FB E9 FA | 	rdword	result1, arg01 wz
1da1c     80 00 90 AD |  if_e	jmp	#LR__3412
1da20     44 1E 06 F1 | 	add	local01, #68
1da24     0F 13 C2 FA | 	rdbyte	arg01, local01
1da28     44 1E 86 F1 | 	sub	local01, #68
1da2c     01 12 86 F1 | 	sub	arg01, #1
1da30     02 12 16 F2 | 	cmp	arg01, #2 wc
1da34     68 00 90 3D |  if_ae	jmp	#LR__3412
1da38     34 1E 06 F1 | 	add	local01, #52
1da3c     0F 13 02 F6 | 	mov	arg01, local01
1da40     34 1E 86 F1 | 	sub	local01, #52
1da44     11 12 06 F1 | 	add	arg01, #17
1da48                 | ' {
1da48                 | ' 
1da48                 | ' 	return *((WORD*)ptr);
1da48     09 FB E9 FA | 	rdword	result1, arg01 wz
1da4c     50 00 90 AD |  if_e	jmp	#LR__3412
1da50     34 1E 06 F1 | 	add	local01, #52
1da54     0F 13 02 F6 | 	mov	arg01, local01
1da58     34 1E 86 F1 | 	sub	local01, #52
1da5c     13 12 06 F1 | 	add	arg01, #19
1da60                 | ' {
1da60                 | ' 
1da60                 | ' 	return *((WORD*)ptr);
1da60     09 FB E1 FA | 	rdword	result1, arg01
1da64     FD 22 32 F9 | 	getword	local03, result1, #0
1da68     80 22 16 F2 | 	cmp	local03, #128 wc
1da6c     20 00 90 3D |  if_ae	jmp	#LR__3411
1da70     34 1E 06 F1 | 	add	local01, #52
1da74     0F 13 02 F6 | 	mov	arg01, local01
1da78     34 1E 86 F1 | 	sub	local01, #52
1da7c     20 12 06 F1 | 	add	arg01, #32
1da80                 | ' {
1da80                 | ' 
1da80                 | ' 	return *((DWORD*)ptr);
1da80     09 FB 01 FB | 	rdlong	result1, arg01
1da84     80 00 00 FF 
1da88     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1da8c     10 00 90 CD |  if_b	jmp	#LR__3412
1da90                 | LR__3411
1da90     4A 1E 06 F1 | 	add	local01, #74
1da94                 | ' {
1da94                 | ' 
1da94                 | ' 	return *((WORD*)ptr);
1da94     0F FB E9 FA | 	rdword	result1, local01 wz
1da98                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1da98                 | ' 			&& ld_word(fs->win +  14 ) != 0
1da98                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1da98                 | ' 			&& ld_word(fs->win +  17 ) != 0
1da98                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1da98                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1da98                 | ' 				return 0;
1da98     00 FA 05 56 |  if_ne	mov	result1, #0
1da9c     18 00 90 5D |  if_ne	jmp	#LR__3414
1daa0                 | LR__3412
1daa0                 | LR__3413
1daa0                 | ' 		}
1daa0                 | ' 	}
1daa0                 | ' 	return sign == 0xAA55 ? 2 : 3;
1daa0     10 23 32 F9 | 	getword	local03, local02, #0
1daa4     55 00 00 FF 
1daa8     55 22 0E F2 | 	cmp	local03, ##43605 wz
1daac     02 24 06 A6 |  if_e	mov	local04, #2
1dab0     03 24 06 56 |  if_ne	mov	local04, #3
1dab4     12 FB 01 F6 | 	mov	result1, local04
1dab8                 | LR__3414
1dab8     A7 F0 03 F6 | 	mov	ptra, fp
1dabc     B2 00 A0 FD | 	call	#popregs_
1dac0                 | _fatfs_cc_check_fs_ret
1dac0     2D 00 64 FD | 	ret
1dac4                 | 
1dac4                 | _fatfs_cc_find_volume
1dac4     05 4A 05 F6 | 	mov	COUNT_, #5
1dac8     A8 00 A0 FD | 	call	#pushregs_
1dacc     24 F0 07 F1 | 	add	ptra, #36
1dad0     09 1F 02 F6 | 	mov	local01, arg01
1dad4     0A 21 02 F6 | 	mov	local02, arg02
1dad8     0F 13 02 F6 | 	mov	arg01, local01
1dadc     00 14 06 F6 | 	mov	arg02, #0
1dae0     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1dae4     02 FA 0D F2 | 	cmp	result1, #2 wz
1dae8     0C 00 90 AD |  if_e	jmp	#LR__3420
1daec     03 FA 15 F2 | 	cmp	result1, #3 wc
1daf0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1daf4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3428
1daf8                 | LR__3420
1daf8                 | ' 	for (i = 0; i < 4; i++) {
1daf8     00 22 06 F6 | 	mov	local03, #0
1dafc     97 26 48 FB | 	callpa	#(@LR__3422-@LR__3421)>>2,fcache_load_ptr_
1db00                 | LR__3421
1db00     04 22 16 F2 | 	cmp	local03, #4 wc
1db04     44 00 90 3D |  if_ae	jmp	#LR__3423
1db08     11 25 02 F6 | 	mov	local04, local03
1db0c     02 24 66 F0 | 	shl	local04, #2
1db10     14 4E 05 F1 | 	add	fp, #20
1db14     A7 24 02 F1 | 	add	local04, fp
1db18     34 1E 06 F1 | 	add	local01, #52
1db1c     0F 13 02 F6 | 	mov	arg01, local01
1db20     34 1E 86 F1 | 	sub	local01, #52
1db24     BE 13 06 F1 | 	add	arg01, #446
1db28     11 15 02 F6 | 	mov	arg02, local03
1db2c     04 14 66 F0 | 	shl	arg02, #4
1db30     0A 13 02 F1 | 	add	arg01, arg02
1db34     08 12 06 F1 | 	add	arg01, #8
1db38                 | ' {
1db38                 | ' 
1db38                 | ' 	return *((DWORD*)ptr);
1db38     09 FB 01 FB | 	rdlong	result1, arg01
1db3c     14 4E 85 F1 | 	sub	fp, #20
1db40     12 FB 61 FC | 	wrlong	result1, local04
1db44     01 22 06 F1 | 	add	local03, #1
1db48     B4 FF 9F FD | 	jmp	#LR__3421
1db4c                 | LR__3422
1db4c                 | LR__3423
1db4c     00 20 0E F2 | 	cmp	local02, #0 wz
1db50     10 25 02 56 |  if_ne	mov	local04, local02
1db54     01 24 86 51 |  if_ne	sub	local04, #1
1db58     00 24 06 A6 |  if_e	mov	local04, #0
1db5c     12 23 02 F6 | 	mov	local03, local04
1db60                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1db60                 | ' 	}
1db60                 | ' 	i = part ? part - 1 : 0;
1db60                 | ' 	do {
1db60                 | LR__3424
1db60     11 25 02 F6 | 	mov	local04, local03
1db64     02 24 66 F0 | 	shl	local04, #2
1db68     14 4E 05 F1 | 	add	fp, #20
1db6c     A7 24 02 F1 | 	add	local04, fp
1db70     12 25 0A FB | 	rdlong	local04, local04 wz
1db74     14 4E 85 F1 | 	sub	fp, #20
1db78     28 00 90 AD |  if_e	jmp	#LR__3425
1db7c     11 25 02 F6 | 	mov	local04, local03
1db80     02 24 66 F0 | 	shl	local04, #2
1db84     14 4E 05 F1 | 	add	fp, #20
1db88     A7 24 02 F1 | 	add	local04, fp
1db8c     12 15 02 FB | 	rdlong	arg02, local04
1db90     0F 13 02 F6 | 	mov	arg01, local01
1db94     14 4E 85 F1 | 	sub	fp, #20
1db98     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1db9c     FD 24 02 F6 | 	mov	local04, result1
1dba0     04 00 90 FD | 	jmp	#LR__3426
1dba4                 | LR__3425
1dba4     03 24 06 F6 | 	mov	local04, #3
1dba8                 | LR__3426
1dba8     12 27 02 F6 | 	mov	local05, local04
1dbac     00 20 0E F2 | 	cmp	local02, #0 wz
1dbb0     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1dbb4     0C 00 90 8D |  if_c_and_z	jmp	#LR__3427
1dbb8     01 22 06 A1 |  if_e	add	local03, #1
1dbbc     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1dbc0     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3424
1dbc4                 | LR__3427
1dbc4                 | ' 	return fmt;
1dbc4     13 FB 01 F6 | 	mov	result1, local05
1dbc8                 | LR__3428
1dbc8     A7 F0 03 F6 | 	mov	ptra, fp
1dbcc     B2 00 A0 FD | 	call	#popregs_
1dbd0                 | _fatfs_cc_find_volume_ret
1dbd0     2D 00 64 FD | 	ret
1dbd4                 | 
1dbd4                 | _fatfs_cc_mount_volume
1dbd4     0B 4A 05 F6 | 	mov	COUNT_, #11
1dbd8     A8 00 A0 FD | 	call	#pushregs_
1dbdc     0A 1F 02 F6 | 	mov	local01, arg02
1dbe0     0B 21 02 F6 | 	mov	local02, arg03
1dbe4     0F 01 68 FC | 	wrlong	#0, local01
1dbe8     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1dbec     FD 22 02 F6 | 	mov	local03, result1
1dbf0     00 22 56 F2 | 	cmps	local03, #0 wc
1dbf4     0B FA 05 C6 |  if_b	mov	result1, #11
1dbf8     3C 05 90 CD |  if_b	jmp	#LR__3440
1dbfc     11 17 02 F6 | 	mov	arg03, local03
1dc00     02 16 66 F0 | 	shl	arg03, #2
1dc04     F2 16 02 F1 | 	add	arg03, objptr
1dc08     0B 25 0A FB | 	rdlong	local04, arg03 wz
1dc0c     0C FA 05 A6 |  if_e	mov	result1, #12
1dc10     24 05 90 AD |  if_e	jmp	#LR__3440
1dc14     0F 25 62 FC | 	wrlong	local04, local01
1dc18     10 21 E2 F8 | 	getbyte	local02, local02, #0
1dc1c     FE 20 06 F5 | 	and	local02, #254
1dc20     12 17 CA FA | 	rdbyte	arg03, local04 wz
1dc24     4C 00 90 AD |  if_e	jmp	#LR__3431
1dc28     01 24 06 F1 | 	add	local04, #1
1dc2c     12 13 CA FA | 	rdbyte	arg01, local04 wz
1dc30     01 24 86 F1 | 	sub	local04, #1
1dc34     01 FA 05 56 |  if_ne	mov	result1, #1
1dc38                 | ' 
1dc38                 | ' 	return Stat;
1dc38     01 00 00 AF 
1dc3c     20 E4 05 A1 |  if_e	add	objptr, ##544
1dc40     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1dc44     01 00 00 AF 
1dc48     20 E4 85 A1 |  if_e	sub	objptr, ##544
1dc4c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1dc50     01 16 CE F7 | 	test	arg03, #1 wz
1dc54     1C 00 90 5D |  if_ne	jmp	#LR__3430
1dc58     00 20 0E F2 | 	cmp	local02, #0 wz
1dc5c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1dc60     04 FA CD 57 |  if_ne	test	result1, #4 wz
1dc64                 | ' 				return FR_WRITE_PROTECTED;
1dc64     0A FA 05 56 |  if_ne	mov	result1, #10
1dc68     CC 04 90 5D |  if_ne	jmp	#LR__3440
1dc6c                 | ' 			}
1dc6c                 | ' 			return FR_OK;
1dc6c     00 FA 05 F6 | 	mov	result1, #0
1dc70     C4 04 90 FD | 	jmp	#LR__3440
1dc74                 | LR__3430
1dc74                 | LR__3431
1dc74     12 01 48 FC | 	wrbyte	#0, local04
1dc78     01 24 06 F1 | 	add	local04, #1
1dc7c     12 23 42 FC | 	wrbyte	local03, local04
1dc80     12 13 C2 FA | 	rdbyte	arg01, local04
1dc84     01 24 86 F1 | 	sub	local04, #1
1dc88     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1dc8c     FD 16 02 F6 | 	mov	arg03, result1
1dc90     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1dc94     01 26 CE F7 | 	test	local05, #1 wz
1dc98                 | ' 		return FR_NOT_READY;
1dc98     03 FA 05 56 |  if_ne	mov	result1, #3
1dc9c     98 04 90 5D |  if_ne	jmp	#LR__3440
1dca0     00 20 0E F2 | 	cmp	local02, #0 wz
1dca4     0B 27 02 56 |  if_ne	mov	local05, arg03
1dca8     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1dcac     04 26 CE 57 |  if_ne	test	local05, #4 wz
1dcb0                 | ' 		return FR_WRITE_PROTECTED;
1dcb0     0A FA 05 56 |  if_ne	mov	result1, #10
1dcb4     80 04 90 5D |  if_ne	jmp	#LR__3440
1dcb8     12 13 02 F6 | 	mov	arg01, local04
1dcbc     00 14 06 F6 | 	mov	arg02, #0
1dcc0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1dcc4     FD 12 02 F6 | 	mov	arg01, result1
1dcc8     04 12 0E F2 | 	cmp	arg01, #4 wz
1dccc     01 FA 05 A6 |  if_e	mov	result1, #1
1dcd0     64 04 90 AD |  if_e	jmp	#LR__3440
1dcd4     02 12 16 F2 | 	cmp	arg01, #2 wc
1dcd8     0D FA 05 36 |  if_ae	mov	result1, #13
1dcdc     58 04 90 3D |  if_ae	jmp	#LR__3440
1dce0     30 24 06 F1 | 	add	local04, #48
1dce4     12 29 02 FB | 	rdlong	local06, local04
1dce8     04 24 06 F1 | 	add	local04, #4
1dcec     12 13 02 F6 | 	mov	arg01, local04
1dcf0     34 24 86 F1 | 	sub	local04, #52
1dcf4     0B 12 06 F1 | 	add	arg01, #11
1dcf8                 | ' {
1dcf8                 | ' 
1dcf8                 | ' 	return *((WORD*)ptr);
1dcf8     09 FB E1 FA | 	rdword	result1, arg01
1dcfc     01 00 00 FF 
1dd00     00 FA 0D F2 | 	cmp	result1, ##512 wz
1dd04     0D FA 05 56 |  if_ne	mov	result1, #13
1dd08     2C 04 90 5D |  if_ne	jmp	#LR__3440
1dd0c     34 24 06 F1 | 	add	local04, #52
1dd10     12 13 02 F6 | 	mov	arg01, local04
1dd14     34 24 86 F1 | 	sub	local04, #52
1dd18     16 12 06 F1 | 	add	arg01, #22
1dd1c                 | ' {
1dd1c                 | ' 
1dd1c                 | ' 	return *((WORD*)ptr);
1dd1c     09 FB E1 FA | 	rdword	result1, arg01
1dd20     FD 2A 0A F6 | 	mov	local07, result1 wz
1dd24     18 00 90 5D |  if_ne	jmp	#LR__3432
1dd28     34 24 06 F1 | 	add	local04, #52
1dd2c     12 13 02 F6 | 	mov	arg01, local04
1dd30     34 24 86 F1 | 	sub	local04, #52
1dd34     24 12 06 F1 | 	add	arg01, #36
1dd38                 | ' {
1dd38                 | ' 
1dd38                 | ' 	return *((DWORD*)ptr);
1dd38     09 FB 01 FB | 	rdlong	result1, arg01
1dd3c     FD 2A 02 F6 | 	mov	local07, result1
1dd40                 | LR__3432
1dd40     1C 24 06 F1 | 	add	local04, #28
1dd44     12 2B 62 FC | 	wrlong	local07, local04
1dd48     28 24 06 F1 | 	add	local04, #40
1dd4c     12 27 C2 FA | 	rdbyte	local05, local04
1dd50     42 24 86 F1 | 	sub	local04, #66
1dd54     12 27 42 FC | 	wrbyte	local05, local04
1dd58     12 27 C2 FA | 	rdbyte	local05, local04
1dd5c     02 24 86 F1 | 	sub	local04, #2
1dd60     01 26 0E F2 | 	cmp	local05, #1 wz
1dd64     02 24 06 51 |  if_ne	add	local04, #2
1dd68     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1dd6c     02 24 86 51 |  if_ne	sub	local04, #2
1dd70     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1dd74     0D FA 05 56 |  if_ne	mov	result1, #13
1dd78     BC 03 90 5D |  if_ne	jmp	#LR__3440
1dd7c     02 24 06 F1 | 	add	local04, #2
1dd80     12 27 C2 FA | 	rdbyte	local05, local04
1dd84     13 2B 02 FD | 	qmul	local07, local05
1dd88     3F 24 06 F1 | 	add	local04, #63
1dd8c     12 27 C2 FA | 	rdbyte	local05, local04
1dd90     37 24 86 F1 | 	sub	local04, #55
1dd94     12 27 52 FC | 	wrword	local05, local04
1dd98     12 27 EA FA | 	rdword	local05, local04 wz
1dd9c     0A 24 86 F1 | 	sub	local04, #10
1dda0     18 2A 62 FD | 	getqx	local07
1dda4     20 00 90 AD |  if_e	jmp	#LR__3433
1dda8     0A 24 06 F1 | 	add	local04, #10
1ddac     12 27 E2 FA | 	rdword	local05, local04
1ddb0     13 23 32 F9 | 	getword	local03, local05, #0
1ddb4     0A 24 86 F1 | 	sub	local04, #10
1ddb8     13 27 32 F9 | 	getword	local05, local05, #0
1ddbc     01 26 86 F1 | 	sub	local05, #1
1ddc0     13 23 CA F7 | 	test	local03, local05 wz
1ddc4     08 00 90 AD |  if_e	jmp	#LR__3434
1ddc8                 | LR__3433
1ddc8     0D FA 05 F6 | 	mov	result1, #13
1ddcc     68 03 90 FD | 	jmp	#LR__3440
1ddd0                 | LR__3434
1ddd0     34 24 06 F1 | 	add	local04, #52
1ddd4     12 13 02 F6 | 	mov	arg01, local04
1ddd8     11 12 06 F1 | 	add	arg01, #17
1dddc                 | ' {
1dddc                 | ' 
1dddc                 | ' 	return *((WORD*)ptr);
1dddc     09 FB E1 FA | 	rdword	result1, arg01
1dde0     2C 24 86 F1 | 	sub	local04, #44
1dde4     12 FB 51 FC | 	wrword	result1, local04
1dde8     12 27 E2 FA | 	rdword	local05, local04
1ddec     08 24 86 F1 | 	sub	local04, #8
1ddf0     13 13 52 F6 | 	abs	arg01, local05 wc
1ddf4     09 13 42 F8 | 	getnib	arg01, arg01, #0
1ddf8     09 13 8A F6 | 	negc	arg01, arg01 wz
1ddfc     0D FA 05 56 |  if_ne	mov	result1, #13
1de00     34 03 90 5D |  if_ne	jmp	#LR__3440
1de04     34 24 06 F1 | 	add	local04, #52
1de08     12 13 02 F6 | 	mov	arg01, local04
1de0c     34 24 86 F1 | 	sub	local04, #52
1de10     13 12 06 F1 | 	add	arg01, #19
1de14                 | ' {
1de14                 | ' 
1de14                 | ' 	return *((WORD*)ptr);
1de14     09 FB E1 FA | 	rdword	result1, arg01
1de18     FD 2C 0A F6 | 	mov	local08, result1 wz
1de1c     34 24 06 A1 |  if_e	add	local04, #52
1de20     12 13 02 A6 |  if_e	mov	arg01, local04
1de24     34 24 86 A1 |  if_e	sub	local04, #52
1de28     20 12 06 A1 |  if_e	add	arg01, #32
1de2c                 | ' {
1de2c                 | ' 
1de2c                 | ' 	return *((DWORD*)ptr);
1de2c     09 2D 02 AB |  if_e	rdlong	local08, arg01
1de30     34 24 06 F1 | 	add	local04, #52
1de34     12 13 02 F6 | 	mov	arg01, local04
1de38     34 24 86 F1 | 	sub	local04, #52
1de3c     0E 12 06 F1 | 	add	arg01, #14
1de40                 | ' {
1de40                 | ' 
1de40                 | ' 	return *((WORD*)ptr);
1de40     09 FB E1 FA | 	rdword	result1, arg01
1de44     FD 12 02 F6 | 	mov	arg01, result1
1de48     09 27 02 F6 | 	mov	local05, arg01
1de4c     0F 26 4E F7 | 	zerox	local05, #15 wz
1de50     0D FA 05 A6 |  if_e	mov	result1, #13
1de54     E0 02 90 AD |  if_e	jmp	#LR__3440
1de58     09 2F 32 F9 | 	getword	local09, arg01, #0
1de5c     15 2F 02 F1 | 	add	local09, local07
1de60     08 24 06 F1 | 	add	local04, #8
1de64     12 27 E2 FA | 	rdword	local05, local04
1de68     08 24 86 F1 | 	sub	local04, #8
1de6c     13 27 52 F6 | 	abs	local05, local05 wc
1de70     04 26 46 F0 | 	shr	local05, #4
1de74     13 2F 82 F3 | 	sumc	local09, local05
1de78     17 2D 12 F2 | 	cmp	local08, local09 wc
1de7c     0D FA 05 C6 |  if_b	mov	result1, #13
1de80     B4 02 90 CD |  if_b	jmp	#LR__3440
1de84     17 2D 82 F1 | 	sub	local08, local09
1de88     0A 24 06 F1 | 	add	local04, #10
1de8c     12 27 E2 FA | 	rdword	local05, local04
1de90     13 2D 12 FD | 	qdiv	local08, local05
1de94     0A 24 86 F1 | 	sub	local04, #10
1de98     18 26 62 FD | 	getqx	local05
1de9c     00 26 0E F2 | 	cmp	local05, #0 wz
1dea0     0D FA 05 A6 |  if_e	mov	result1, #13
1dea4     90 02 90 AD |  if_e	jmp	#LR__3440
1dea8     00 30 06 F6 | 	mov	local10, #0
1deac     FF FF 07 FF 
1deb0     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1deb4     03 30 06 C6 |  if_b	mov	local10, #3
1deb8     7F 00 00 FF 
1debc     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1dec0     02 30 06 C6 |  if_b	mov	local10, #2
1dec4     07 00 00 FF 
1dec8     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1decc     01 30 06 C6 |  if_b	mov	local10, #1
1ded0     00 30 0E F2 | 	cmp	local10, #0 wz
1ded4     0D FA 05 A6 |  if_e	mov	result1, #13
1ded8     5C 02 90 AD |  if_e	jmp	#LR__3440
1dedc     02 26 06 F1 | 	add	local05, #2
1dee0     18 24 06 F1 | 	add	local04, #24
1dee4     12 27 62 FC | 	wrlong	local05, local04
1dee8     08 24 06 F1 | 	add	local04, #8
1deec     12 29 62 FC | 	wrlong	local06, local04
1def0     14 27 02 F6 | 	mov	local05, local06
1def4     09 13 32 F9 | 	getword	arg01, arg01, #0
1def8     09 27 02 F1 | 	add	local05, arg01
1defc     04 24 06 F1 | 	add	local04, #4
1df00     12 27 62 FC | 	wrlong	local05, local04
1df04     14 27 02 F6 | 	mov	local05, local06
1df08     17 27 02 F1 | 	add	local05, local09
1df0c     08 24 06 F1 | 	add	local04, #8
1df10     12 27 62 FC | 	wrlong	local05, local04
1df14     2C 24 86 F1 | 	sub	local04, #44
1df18     03 30 0E F2 | 	cmp	local10, #3 wz
1df1c     5C 00 90 5D |  if_ne	jmp	#LR__3435
1df20     34 24 06 F1 | 	add	local04, #52
1df24     12 13 02 F6 | 	mov	arg01, local04
1df28     34 24 86 F1 | 	sub	local04, #52
1df2c     2A 12 06 F1 | 	add	arg01, #42
1df30                 | ' {
1df30                 | ' 
1df30                 | ' 	return *((WORD*)ptr);
1df30     09 FB E9 FA | 	rdword	result1, arg01 wz
1df34     0D FA 05 56 |  if_ne	mov	result1, #13
1df38     FC 01 90 5D |  if_ne	jmp	#LR__3440
1df3c     08 24 06 F1 | 	add	local04, #8
1df40     12 27 EA FA | 	rdword	local05, local04 wz
1df44     08 24 86 F1 | 	sub	local04, #8
1df48     0D FA 05 56 |  if_ne	mov	result1, #13
1df4c     E8 01 90 5D |  if_ne	jmp	#LR__3440
1df50     34 24 06 F1 | 	add	local04, #52
1df54     12 13 02 F6 | 	mov	arg01, local04
1df58     2C 12 06 F1 | 	add	arg01, #44
1df5c                 | ' {
1df5c                 | ' 
1df5c                 | ' 	return *((DWORD*)ptr);
1df5c     09 FB 01 FB | 	rdlong	result1, arg01
1df60     0C 24 86 F1 | 	sub	local04, #12
1df64     12 FB 61 FC | 	wrlong	result1, local04
1df68     10 24 86 F1 | 	sub	local04, #16
1df6c     12 33 02 FB | 	rdlong	local11, local04
1df70     18 24 86 F1 | 	sub	local04, #24
1df74     02 32 66 F0 | 	shl	local11, #2
1df78     6C 00 90 FD | 	jmp	#LR__3437
1df7c                 | LR__3435
1df7c     08 24 06 F1 | 	add	local04, #8
1df80     12 27 EA FA | 	rdword	local05, local04 wz
1df84     08 24 86 F1 | 	sub	local04, #8
1df88     0D FA 05 A6 |  if_e	mov	result1, #13
1df8c     A8 01 90 AD |  if_e	jmp	#LR__3440
1df90     24 24 06 F1 | 	add	local04, #36
1df94     12 27 02 FB | 	rdlong	local05, local04
1df98     15 27 02 F1 | 	add	local05, local07
1df9c     04 24 06 F1 | 	add	local04, #4
1dfa0     12 27 62 FC | 	wrlong	local05, local04
1dfa4     28 24 86 F1 | 	sub	local04, #40
1dfa8     02 30 0E F2 | 	cmp	local10, #2 wz
1dfac     18 24 06 A1 |  if_e	add	local04, #24
1dfb0     12 27 02 AB |  if_e	rdlong	local05, local04
1dfb4     18 24 86 A1 |  if_e	sub	local04, #24
1dfb8     01 26 66 A0 |  if_e	shl	local05, #1
1dfbc     24 00 90 AD |  if_e	jmp	#LR__3436
1dfc0     18 24 06 F1 | 	add	local04, #24
1dfc4     12 33 02 FB | 	rdlong	local11, local04
1dfc8     19 27 02 F6 | 	mov	local05, local11
1dfcc     01 26 66 F0 | 	shl	local05, #1
1dfd0     19 27 02 F1 | 	add	local05, local11
1dfd4     01 26 46 F0 | 	shr	local05, #1
1dfd8     18 24 86 F1 | 	sub	local04, #24
1dfdc     01 32 06 F5 | 	and	local11, #1
1dfe0     19 27 02 F1 | 	add	local05, local11
1dfe4                 | LR__3436
1dfe4     13 33 02 F6 | 	mov	local11, local05
1dfe8                 | LR__3437
1dfe8     FF 33 06 F1 | 	add	local11, #511
1dfec     09 32 46 F0 | 	shr	local11, #9
1dff0     1C 24 06 F1 | 	add	local04, #28
1dff4     12 17 02 FB | 	rdlong	arg03, local04
1dff8     1C 24 86 F1 | 	sub	local04, #28
1dffc     19 17 12 F2 | 	cmp	arg03, local11 wc
1e000     0D FA 05 C6 |  if_b	mov	result1, #13
1e004     30 01 90 CD |  if_b	jmp	#LR__3440
1e008     14 24 06 F1 | 	add	local04, #20
1e00c     FF FF FF FF 
1e010     12 FF 6B FC | 	wrlong	##-1, local04
1e014     04 24 86 F1 | 	sub	local04, #4
1e018     FF FF FF FF 
1e01c     12 FF 6B FC | 	wrlong	##-1, local04
1e020     0C 24 86 F1 | 	sub	local04, #12
1e024     12 01 49 FC | 	wrbyte	#128, local04
1e028     04 24 86 F1 | 	sub	local04, #4
1e02c     03 30 0E F2 | 	cmp	local10, #3 wz
1e030     D0 00 90 5D |  if_ne	jmp	#LR__3439
1e034     34 24 06 F1 | 	add	local04, #52
1e038     12 13 02 F6 | 	mov	arg01, local04
1e03c     34 24 86 F1 | 	sub	local04, #52
1e040     30 12 06 F1 | 	add	arg01, #48
1e044                 | ' {
1e044                 | ' 
1e044                 | ' 	return *((WORD*)ptr);
1e044     09 FB E1 FA | 	rdword	result1, arg01
1e048     FD 26 32 F9 | 	getword	local05, result1, #0
1e04c     01 26 0E F2 | 	cmp	local05, #1 wz
1e050     B0 00 90 5D |  if_ne	jmp	#LR__3439
1e054     01 28 06 F1 | 	add	local06, #1
1e058     12 13 02 F6 | 	mov	arg01, local04
1e05c     14 15 02 F6 | 	mov	arg02, local06
1e060     CC CD BF FD | 	call	#_fatfs_cc_move_window
1e064     00 FA 0D F2 | 	cmp	result1, #0 wz
1e068     98 00 90 5D |  if_ne	jmp	#LR__3439
1e06c     04 24 06 F1 | 	add	local04, #4
1e070     12 01 48 FC | 	wrbyte	#0, local04
1e074     30 24 06 F1 | 	add	local04, #48
1e078     12 13 02 F6 | 	mov	arg01, local04
1e07c     34 24 86 F1 | 	sub	local04, #52
1e080     FE 13 06 F1 | 	add	arg01, #510
1e084                 | ' {
1e084                 | ' 
1e084                 | ' 	return *((WORD*)ptr);
1e084     09 FB E1 FA | 	rdword	result1, arg01
1e088     FD 26 32 F9 | 	getword	local05, result1, #0
1e08c     55 00 00 FF 
1e090     55 26 0E F2 | 	cmp	local05, ##43605 wz
1e094     34 24 06 A1 |  if_e	add	local04, #52
1e098     12 13 02 A6 |  if_e	mov	arg01, local04
1e09c     34 24 86 A1 |  if_e	sub	local04, #52
1e0a0                 | ' {
1e0a0                 | ' 
1e0a0                 | ' 	return *((DWORD*)ptr);
1e0a0     09 FB 01 AB |  if_e	rdlong	result1, arg01
1e0a4     A9 B0 20 AF 
1e0a8     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1e0ac     54 00 90 5D |  if_ne	jmp	#LR__3438
1e0b0     34 24 06 F1 | 	add	local04, #52
1e0b4     12 13 02 F6 | 	mov	arg01, local04
1e0b8     34 24 86 F1 | 	sub	local04, #52
1e0bc     E4 13 06 F1 | 	add	arg01, #484
1e0c0                 | ' {
1e0c0                 | ' 
1e0c0                 | ' 	return *((DWORD*)ptr);
1e0c0     09 FB 01 FB | 	rdlong	result1, arg01
1e0c4     B9 A0 30 FF 
1e0c8     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1e0cc     34 00 90 5D |  if_ne	jmp	#LR__3438
1e0d0     34 24 06 F1 | 	add	local04, #52
1e0d4     12 13 02 F6 | 	mov	arg01, local04
1e0d8     E8 13 06 F1 | 	add	arg01, #488
1e0dc                 | ' {
1e0dc                 | ' 
1e0dc                 | ' 	return *((DWORD*)ptr);
1e0dc     09 FB 01 FB | 	rdlong	result1, arg01
1e0e0     20 24 86 F1 | 	sub	local04, #32
1e0e4     12 FB 61 FC | 	wrlong	result1, local04
1e0e8     20 24 06 F1 | 	add	local04, #32
1e0ec     12 13 02 F6 | 	mov	arg01, local04
1e0f0     EC 13 06 F1 | 	add	arg01, #492
1e0f4                 | ' {
1e0f4                 | ' 
1e0f4                 | ' 	return *((DWORD*)ptr);
1e0f4     09 FB 01 FB | 	rdlong	result1, arg01
1e0f8     24 24 86 F1 | 	sub	local04, #36
1e0fc     12 FB 61 FC | 	wrlong	result1, local04
1e100     10 24 86 F1 | 	sub	local04, #16
1e104                 | LR__3438
1e104                 | LR__3439
1e104     12 31 42 FC | 	wrbyte	local10, local04
1e108     04 E4 05 F1 | 	add	objptr, #4
1e10c     F2 26 E2 FA | 	rdword	local05, objptr
1e110     01 26 06 F1 | 	add	local05, #1
1e114     F2 26 52 FC | 	wrword	local05, objptr
1e118     F2 32 E2 FA | 	rdword	local11, objptr
1e11c     06 24 06 F1 | 	add	local04, #6
1e120     12 33 52 FC | 	wrword	local11, local04
1e124     04 E4 05 F1 | 	add	objptr, #4
1e128     06 24 06 F1 | 	add	local04, #6
1e12c     12 E5 61 FC | 	wrlong	objptr, local04
1e130                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1e130                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1e130                 | ' 			{
1e130                 | ' 
1e130                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1e130                 | ' 
1e130                 | ' 
1e130                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1e130                 | ' 
1e130                 | ' 			}
1e130                 | ' 		}
1e130                 | ' 
1e130                 | ' 
1e130                 | ' 	}
1e130                 | ' 
1e130                 | ' 	fs->fs_type = (BYTE)fmt;
1e130                 | ' 	fs->id = ++Fsid;
1e130                 | ' 
1e130                 | ' 	fs->lfnbuf = LfnBuf;
1e130                 | ' #line 3567 "ff.c"
1e130                 | ' 	return FR_OK;
1e130     00 FA 05 F6 | 	mov	result1, #0
1e134     08 E4 85 F1 | 	sub	objptr, #8
1e138                 | LR__3440
1e138     A7 F0 03 F6 | 	mov	ptra, fp
1e13c     B2 00 A0 FD | 	call	#popregs_
1e140                 | _fatfs_cc_mount_volume_ret
1e140     2D 00 64 FD | 	ret
1e144                 | 
1e144                 | _fatfs_cc_validate
1e144     09 01 0A F6 | 	mov	_var01, arg01 wz
1e148     09 02 06 F6 | 	mov	_var02, #9
1e14c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1e150     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1e154     50 00 90 AD |  if_e	jmp	#LR__3450
1e158     04 00 06 F1 | 	add	_var01, #4
1e15c     00 07 E2 FA | 	rdword	_var04, _var01
1e160     04 00 86 F1 | 	sub	_var01, #4
1e164     00 13 02 FB | 	rdlong	arg01, _var01
1e168     06 12 06 F1 | 	add	arg01, #6
1e16c     09 FB E1 FA | 	rdword	result1, arg01
1e170     FD 06 0A F2 | 	cmp	_var04, result1 wz
1e174     30 00 90 5D |  if_ne	jmp	#LR__3450
1e178     00 07 02 FB | 	rdlong	_var04, _var01
1e17c     01 06 06 F1 | 	add	_var04, #1
1e180     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1e184     01 FA 05 56 |  if_ne	mov	result1, #1
1e188                 | ' 
1e188                 | ' 	return Stat;
1e188     01 00 00 AF 
1e18c     20 E4 05 A1 |  if_e	add	objptr, ##544
1e190     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1e194     01 00 00 AF 
1e198     20 E4 85 A1 |  if_e	sub	objptr, ##544
1e19c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1e1a0     01 04 CE F7 | 	test	_var03, #1 wz
1e1a4     00 02 06 A6 |  if_e	mov	_var02, #0
1e1a8                 | LR__3450
1e1a8     00 02 0E F2 | 	cmp	_var02, #0 wz
1e1ac     00 05 02 AB |  if_e	rdlong	_var03, _var01
1e1b0     00 04 06 56 |  if_ne	mov	_var03, #0
1e1b4     0A 05 62 FC | 	wrlong	_var03, arg02
1e1b8                 | ' 			res = FR_OK;
1e1b8                 | ' 		}
1e1b8                 | ' 
1e1b8                 | ' 	}
1e1b8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1e1b8                 | ' 	return res;
1e1b8     01 FB 01 F6 | 	mov	result1, _var02
1e1bc                 | _fatfs_cc_validate_ret
1e1bc     2D 00 64 FD | 	ret
1e1c0                 | 
1e1c0                 | _fatfs_cc_f_mount
1e1c0     01 4A 05 F6 | 	mov	COUNT_, #1
1e1c4     A8 00 A0 FD | 	call	#pushregs_
1e1c8     20 F0 07 F1 | 	add	ptra, #32
1e1cc     04 4E 05 F1 | 	add	fp, #4
1e1d0     A7 12 62 FC | 	wrlong	arg01, fp
1e1d4     04 4E 05 F1 | 	add	fp, #4
1e1d8     A7 14 62 FC | 	wrlong	arg02, fp
1e1dc     04 4E 05 F1 | 	add	fp, #4
1e1e0     A7 16 42 FC | 	wrbyte	arg03, fp
1e1e4     04 4E 85 F1 | 	sub	fp, #4
1e1e8     A7 16 02 FB | 	rdlong	arg03, fp
1e1ec     14 4E 05 F1 | 	add	fp, #20
1e1f0     A7 16 62 FC | 	wrlong	arg03, fp
1e1f4     A7 12 02 F6 | 	mov	arg01, fp
1e1f8     1C 4E 85 F1 | 	sub	fp, #28
1e1fc     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1e200     14 4E 05 F1 | 	add	fp, #20
1e204     A7 FA 61 FC | 	wrlong	result1, fp
1e208     14 4E 85 F1 | 	sub	fp, #20
1e20c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e210     0B FA 05 C6 |  if_b	mov	result1, #11
1e214     C0 00 90 CD |  if_b	jmp	#LR__3461
1e218     14 4E 05 F1 | 	add	fp, #20
1e21c     A7 16 02 FB | 	rdlong	arg03, fp
1e220     02 16 66 F0 | 	shl	arg03, #2
1e224     F2 16 02 F1 | 	add	arg03, objptr
1e228     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1e22c     04 4E 85 F1 | 	sub	fp, #4
1e230     A7 16 62 FC | 	wrlong	arg03, fp
1e234     10 4E 85 F1 | 	sub	fp, #16
1e238     28 00 90 AD |  if_e	jmp	#LR__3460
1e23c     10 4E 05 F1 | 	add	fp, #16
1e240     A7 16 02 FB | 	rdlong	arg03, fp
1e244     10 4E 85 F1 | 	sub	fp, #16
1e248     01 16 06 F1 | 	add	arg03, #1
1e24c     0B 13 C2 FA | 	rdbyte	arg01, arg03
1e250     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1e254     10 4E 05 F1 | 	add	fp, #16
1e258     A7 16 02 FB | 	rdlong	arg03, fp
1e25c     10 4E 85 F1 | 	sub	fp, #16
1e260     0B 01 48 FC | 	wrbyte	#0, arg03
1e264                 | LR__3460
1e264     04 4E 05 F1 | 	add	fp, #4
1e268     A7 1E 0A FB | 	rdlong	local01, fp wz
1e26c     04 4E 85 F1 | 	sub	fp, #4
1e270     04 4E 05 51 |  if_ne	add	fp, #4
1e274     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e278     04 4E 85 51 |  if_ne	sub	fp, #4
1e27c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1e280     14 4E 05 F1 | 	add	fp, #20
1e284     A7 1E 02 FB | 	rdlong	local01, fp
1e288     02 1E 66 F0 | 	shl	local01, #2
1e28c     F2 1E 02 F1 | 	add	local01, objptr
1e290     10 4E 85 F1 | 	sub	fp, #16
1e294     A7 16 02 FB | 	rdlong	arg03, fp
1e298     0F 17 62 FC | 	wrlong	arg03, local01
1e29c     08 4E 05 F1 | 	add	fp, #8
1e2a0     A7 1E CA FA | 	rdbyte	local01, fp wz
1e2a4     0C 4E 85 F1 | 	sub	fp, #12
1e2a8     00 FA 05 A6 |  if_e	mov	result1, #0
1e2ac     28 00 90 AD |  if_e	jmp	#LR__3461
1e2b0     08 4E 05 F1 | 	add	fp, #8
1e2b4     A7 12 02 F6 | 	mov	arg01, fp
1e2b8     04 4E 85 F1 | 	sub	fp, #4
1e2bc     A7 14 02 F6 | 	mov	arg02, fp
1e2c0     04 4E 85 F1 | 	sub	fp, #4
1e2c4     00 16 06 F6 | 	mov	arg03, #0
1e2c8     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1e2cc     18 4E 05 F1 | 	add	fp, #24
1e2d0     A7 FA 61 FC | 	wrlong	result1, fp
1e2d4                 | ' 
1e2d4                 | ' 	res = mount_volume(&path, &fs, 0);
1e2d4                 | ' 	return res ;
1e2d4     18 4E 85 F1 | 	sub	fp, #24
1e2d8                 | LR__3461
1e2d8     A7 F0 03 F6 | 	mov	ptra, fp
1e2dc     B2 00 A0 FD | 	call	#popregs_
1e2e0                 | _fatfs_cc_f_mount_ret
1e2e0     2D 00 64 FD | 	ret
1e2e4                 | 
1e2e4                 | _fatfs_cc_f_open
1e2e4     02 4A 05 F6 | 	mov	COUNT_, #2
1e2e8     A8 00 A0 FD | 	call	#pushregs_
1e2ec     60 F0 07 F1 | 	add	ptra, #96
1e2f0     04 4E 05 F1 | 	add	fp, #4
1e2f4     A7 12 62 FC | 	wrlong	arg01, fp
1e2f8     04 4E 05 F1 | 	add	fp, #4
1e2fc     A7 14 62 FC | 	wrlong	arg02, fp
1e300     04 4E 05 F1 | 	add	fp, #4
1e304     A7 16 42 FC | 	wrbyte	arg03, fp
1e308     08 4E 85 F1 | 	sub	fp, #8
1e30c     A7 18 0A FB | 	rdlong	arg04, fp wz
1e310     04 4E 85 F1 | 	sub	fp, #4
1e314     09 FA 05 A6 |  if_e	mov	result1, #9
1e318     98 06 90 AD |  if_e	jmp	#LR__3487
1e31c     0C 4E 05 F1 | 	add	fp, #12
1e320     A7 18 C2 FA | 	rdbyte	arg04, fp
1e324     3F 18 06 F5 | 	and	arg04, #63
1e328     A7 18 42 FC | 	wrbyte	arg04, fp
1e32c     04 4E 85 F1 | 	sub	fp, #4
1e330     A7 12 02 F6 | 	mov	arg01, fp
1e334     3C 4E 05 F1 | 	add	fp, #60
1e338     A7 14 02 F6 | 	mov	arg02, fp
1e33c     38 4E 85 F1 | 	sub	fp, #56
1e340     A7 16 C2 FA | 	rdbyte	arg03, fp
1e344     0C 4E 85 F1 | 	sub	fp, #12
1e348     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1e34c     10 4E 05 F1 | 	add	fp, #16
1e350     A7 FA 61 FC | 	wrlong	result1, fp
1e354     10 4E 85 F1 | 	sub	fp, #16
1e358     00 FA 0D F2 | 	cmp	result1, #0 wz
1e35c     2C 06 90 5D |  if_ne	jmp	#LR__3486
1e360     44 4E 05 F1 | 	add	fp, #68
1e364     A7 18 02 FB | 	rdlong	arg04, fp
1e368     30 4E 85 F1 | 	sub	fp, #48
1e36c     A7 18 62 FC | 	wrlong	arg04, fp
1e370     A7 12 02 F6 | 	mov	arg01, fp
1e374     0C 4E 85 F1 | 	sub	fp, #12
1e378     A7 1E 02 FB | 	rdlong	local01, fp
1e37c     08 4E 85 F1 | 	sub	fp, #8
1e380     0F 15 02 F6 | 	mov	arg02, local01
1e384     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
1e388     10 4E 05 F1 | 	add	fp, #16
1e38c     A7 FA 61 FC | 	wrlong	result1, fp
1e390     10 4E 85 F1 | 	sub	fp, #16
1e394     00 FA 0D F2 | 	cmp	result1, #0 wz
1e398     1C 00 90 5D |  if_ne	jmp	#LR__3470
1e39c     3F 4E 05 F1 | 	add	fp, #63
1e3a0     A7 18 C2 FA | 	rdbyte	arg04, fp
1e3a4     3F 4E 85 F1 | 	sub	fp, #63
1e3a8     80 18 CE F7 | 	test	arg04, #128 wz
1e3ac     10 4E 05 51 |  if_ne	add	fp, #16
1e3b0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
1e3b4     10 4E 85 51 |  if_ne	sub	fp, #16
1e3b8                 | LR__3470
1e3b8     0C 4E 05 F1 | 	add	fp, #12
1e3bc     A7 18 C2 FA | 	rdbyte	arg04, fp
1e3c0     0C 4E 85 F1 | 	sub	fp, #12
1e3c4     1C 18 CE F7 | 	test	arg04, #28 wz
1e3c8     F0 01 90 AD |  if_e	jmp	#LR__3475
1e3cc     10 4E 05 F1 | 	add	fp, #16
1e3d0     A7 1E 0A FB | 	rdlong	local01, fp wz
1e3d4     10 4E 85 F1 | 	sub	fp, #16
1e3d8     48 00 90 AD |  if_e	jmp	#LR__3472
1e3dc     10 4E 05 F1 | 	add	fp, #16
1e3e0     A7 18 02 FB | 	rdlong	arg04, fp
1e3e4     10 4E 85 F1 | 	sub	fp, #16
1e3e8     04 18 0E F2 | 	cmp	arg04, #4 wz
1e3ec     1C 00 90 5D |  if_ne	jmp	#LR__3471
1e3f0     14 4E 05 F1 | 	add	fp, #20
1e3f4     A7 12 02 F6 | 	mov	arg01, fp
1e3f8     14 4E 85 F1 | 	sub	fp, #20
1e3fc     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
1e400     10 4E 05 F1 | 	add	fp, #16
1e404     A7 FA 61 FC | 	wrlong	result1, fp
1e408     10 4E 85 F1 | 	sub	fp, #16
1e40c                 | LR__3471
1e40c     0C 4E 05 F1 | 	add	fp, #12
1e410     A7 1E C2 FA | 	rdbyte	local01, fp
1e414     08 1E 46 F5 | 	or	local01, #8
1e418     A7 1E 42 FC | 	wrbyte	local01, fp
1e41c     0C 4E 85 F1 | 	sub	fp, #12
1e420     3C 00 90 FD | 	jmp	#LR__3474
1e424                 | LR__3472
1e424     1A 4E 05 F1 | 	add	fp, #26
1e428     A7 1E C2 FA | 	rdbyte	local01, fp
1e42c     1A 4E 85 F1 | 	sub	fp, #26
1e430     11 1E CE F7 | 	test	local01, #17 wz
1e434     10 4E 05 51 |  if_ne	add	fp, #16
1e438     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1e43c     10 4E 85 51 |  if_ne	sub	fp, #16
1e440     1C 00 90 5D |  if_ne	jmp	#LR__3473
1e444     0C 4E 05 F1 | 	add	fp, #12
1e448     A7 1E C2 FA | 	rdbyte	local01, fp
1e44c     0C 4E 85 F1 | 	sub	fp, #12
1e450     04 1E CE F7 | 	test	local01, #4 wz
1e454     10 4E 05 51 |  if_ne	add	fp, #16
1e458     A7 10 68 5C |  if_ne	wrlong	#8, fp
1e45c     10 4E 85 51 |  if_ne	sub	fp, #16
1e460                 | LR__3473
1e460                 | LR__3474
1e460     10 4E 05 F1 | 	add	fp, #16
1e464     A7 1E 0A FB | 	rdlong	local01, fp wz
1e468     10 4E 85 F1 | 	sub	fp, #16
1e46c     A8 01 90 5D |  if_ne	jmp	#LR__3478
1e470     0C 4E 05 F1 | 	add	fp, #12
1e474     A7 1E C2 FA | 	rdbyte	local01, fp
1e478     0C 4E 85 F1 | 	sub	fp, #12
1e47c     08 1E CE F7 | 	test	local01, #8 wz
1e480     94 01 90 AD |  if_e	jmp	#LR__3478
1e484     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
1e488     54 4E 05 F1 | 	add	fp, #84
1e48c     A7 FA 61 FC | 	wrlong	result1, fp
1e490     24 4E 85 F1 | 	sub	fp, #36
1e494     A7 12 02 FB | 	rdlong	arg01, fp
1e498     0E 12 06 F1 | 	add	arg01, #14
1e49c     09 FB 61 FC | 	wrlong	result1, arg01
1e4a0     A7 12 02 FB | 	rdlong	arg01, fp
1e4a4     16 12 06 F1 | 	add	arg01, #22
1e4a8     24 4E 05 F1 | 	add	fp, #36
1e4ac     A7 14 02 FB | 	rdlong	arg02, fp
1e4b0     09 15 62 FC | 	wrlong	arg02, arg01
1e4b4     10 4E 85 F1 | 	sub	fp, #16
1e4b8     A7 12 02 FB | 	rdlong	arg01, fp
1e4bc     14 4E 85 F1 | 	sub	fp, #20
1e4c0     A7 14 02 FB | 	rdlong	arg02, fp
1e4c4     30 4E 85 F1 | 	sub	fp, #48
1e4c8     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
1e4cc     48 4E 05 F1 | 	add	fp, #72
1e4d0     A7 FA 61 FC | 	wrlong	result1, fp
1e4d4     18 4E 85 F1 | 	sub	fp, #24
1e4d8     A7 1E 02 FB | 	rdlong	local01, fp
1e4dc     0B 1E 06 F1 | 	add	local01, #11
1e4e0     0F 41 48 FC | 	wrbyte	#32, local01
1e4e4     14 4E 05 F1 | 	add	fp, #20
1e4e8     A7 12 02 FB | 	rdlong	arg01, fp
1e4ec     14 4E 85 F1 | 	sub	fp, #20
1e4f0     A7 14 02 FB | 	rdlong	arg02, fp
1e4f4     30 4E 85 F1 | 	sub	fp, #48
1e4f8     00 16 06 F6 | 	mov	arg03, #0
1e4fc     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
1e500     30 4E 05 F1 | 	add	fp, #48
1e504     A7 12 02 FB | 	rdlong	arg01, fp
1e508     1C 12 06 F1 | 	add	arg01, #28
1e50c     09 01 68 FC | 	wrlong	#0, arg01
1e510     14 4E 05 F1 | 	add	fp, #20
1e514     A7 1E 02 FB | 	rdlong	local01, fp
1e518     03 1E 06 F1 | 	add	local01, #3
1e51c     0F 03 48 FC | 	wrbyte	#1, local01
1e520     04 4E 05 F1 | 	add	fp, #4
1e524     A7 1E 0A FB | 	rdlong	local01, fp wz
1e528     48 4E 85 F1 | 	sub	fp, #72
1e52c     E8 00 90 AD |  if_e	jmp	#LR__3478
1e530     44 4E 05 F1 | 	add	fp, #68
1e534     A7 1E 02 FB | 	rdlong	local01, fp
1e538     30 1E 06 F1 | 	add	local01, #48
1e53c     0F 1F 02 FB | 	rdlong	local01, local01
1e540     14 4E 05 F1 | 	add	fp, #20
1e544     A7 1E 62 FC | 	wrlong	local01, fp
1e548     44 4E 85 F1 | 	sub	fp, #68
1e54c     A7 12 02 F6 | 	mov	arg01, fp
1e550     34 4E 05 F1 | 	add	fp, #52
1e554     A7 14 02 FB | 	rdlong	arg02, fp
1e558     48 4E 85 F1 | 	sub	fp, #72
1e55c     00 16 06 F6 | 	mov	arg03, #0
1e560     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
1e564     10 4E 05 F1 | 	add	fp, #16
1e568     A7 FA 61 FC | 	wrlong	result1, fp
1e56c     10 4E 85 F1 | 	sub	fp, #16
1e570     00 FA 0D F2 | 	cmp	result1, #0 wz
1e574     A0 00 90 5D |  if_ne	jmp	#LR__3478
1e578     44 4E 05 F1 | 	add	fp, #68
1e57c     A7 12 02 FB | 	rdlong	arg01, fp
1e580     14 4E 05 F1 | 	add	fp, #20
1e584     A7 14 02 FB | 	rdlong	arg02, fp
1e588     58 4E 85 F1 | 	sub	fp, #88
1e58c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
1e590     10 4E 05 F1 | 	add	fp, #16
1e594     A7 FA 61 FC | 	wrlong	result1, fp
1e598     34 4E 05 F1 | 	add	fp, #52
1e59c     A7 18 02 FB | 	rdlong	arg04, fp
1e5a0     04 4E 05 F1 | 	add	fp, #4
1e5a4     A7 1E 02 FB | 	rdlong	local01, fp
1e5a8     48 4E 85 F1 | 	sub	fp, #72
1e5ac     01 1E 86 F1 | 	sub	local01, #1
1e5b0     10 18 06 F1 | 	add	arg04, #16
1e5b4     0C 1F 62 FC | 	wrlong	local01, arg04
1e5b8     5C 00 90 FD | 	jmp	#LR__3478
1e5bc                 | LR__3475
1e5bc     10 4E 05 F1 | 	add	fp, #16
1e5c0     A7 18 0A FB | 	rdlong	arg04, fp wz
1e5c4     10 4E 85 F1 | 	sub	fp, #16
1e5c8     4C 00 90 5D |  if_ne	jmp	#LR__3477
1e5cc     1A 4E 05 F1 | 	add	fp, #26
1e5d0     A7 18 C2 FA | 	rdbyte	arg04, fp
1e5d4     1A 4E 85 F1 | 	sub	fp, #26
1e5d8     10 18 CE F7 | 	test	arg04, #16 wz
1e5dc     10 4E 05 51 |  if_ne	add	fp, #16
1e5e0     A7 08 68 5C |  if_ne	wrlong	#4, fp
1e5e4     10 4E 85 51 |  if_ne	sub	fp, #16
1e5e8     2C 00 90 5D |  if_ne	jmp	#LR__3476
1e5ec     0C 4E 05 F1 | 	add	fp, #12
1e5f0     A7 18 C2 FA | 	rdbyte	arg04, fp
1e5f4     0C 4E 85 F1 | 	sub	fp, #12
1e5f8     02 18 CE F7 | 	test	arg04, #2 wz
1e5fc     1A 4E 05 51 |  if_ne	add	fp, #26
1e600     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
1e604     1A 4E 85 51 |  if_ne	sub	fp, #26
1e608     01 1E CE 57 |  if_ne	test	local01, #1 wz
1e60c     10 4E 05 51 |  if_ne	add	fp, #16
1e610     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1e614     10 4E 85 51 |  if_ne	sub	fp, #16
1e618                 | LR__3476
1e618                 | LR__3477
1e618                 | LR__3478
1e618     10 4E 05 F1 | 	add	fp, #16
1e61c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e620     10 4E 85 F1 | 	sub	fp, #16
1e624     60 00 90 5D |  if_ne	jmp	#LR__3479
1e628     0C 4E 05 F1 | 	add	fp, #12
1e62c     A7 20 C2 FA | 	rdbyte	local02, fp
1e630     0C 4E 85 F1 | 	sub	fp, #12
1e634     08 20 CE F7 | 	test	local02, #8 wz
1e638     0C 4E 05 51 |  if_ne	add	fp, #12
1e63c     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
1e640     40 20 46 55 |  if_ne	or	local02, #64
1e644     A7 20 42 5C |  if_ne	wrbyte	local02, fp
1e648     0C 4E 85 51 |  if_ne	sub	fp, #12
1e64c     04 4E 05 F1 | 	add	fp, #4
1e650     A7 20 02 FB | 	rdlong	local02, fp
1e654     40 4E 05 F1 | 	add	fp, #64
1e658     A7 1E 02 FB | 	rdlong	local01, fp
1e65c     30 1E 06 F1 | 	add	local01, #48
1e660     0F 1F 02 FB | 	rdlong	local01, local01
1e664     20 20 06 F1 | 	add	local02, #32
1e668     10 1F 62 FC | 	wrlong	local01, local02
1e66c     40 4E 85 F1 | 	sub	fp, #64
1e670     A7 20 02 FB | 	rdlong	local02, fp
1e674     2C 4E 05 F1 | 	add	fp, #44
1e678     A7 1E 02 FB | 	rdlong	local01, fp
1e67c     30 4E 85 F1 | 	sub	fp, #48
1e680     24 20 06 F1 | 	add	local02, #36
1e684     10 1F 62 FC | 	wrlong	local01, local02
1e688                 | LR__3479
1e688     10 4E 05 F1 | 	add	fp, #16
1e68c     A7 20 0A FB | 	rdlong	local02, fp wz
1e690     10 4E 85 F1 | 	sub	fp, #16
1e694     F4 02 90 5D |  if_ne	jmp	#LR__3485
1e698     04 4E 05 F1 | 	add	fp, #4
1e69c     A7 20 02 FB | 	rdlong	local02, fp
1e6a0     40 4E 05 F1 | 	add	fp, #64
1e6a4     A7 12 02 FB | 	rdlong	arg01, fp
1e6a8     14 4E 85 F1 | 	sub	fp, #20
1e6ac     A7 14 02 FB | 	rdlong	arg02, fp
1e6b0     30 4E 85 F1 | 	sub	fp, #48
1e6b4     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
1e6b8     08 20 06 F1 | 	add	local02, #8
1e6bc     10 FB 61 FC | 	wrlong	result1, local02
1e6c0     04 4E 05 F1 | 	add	fp, #4
1e6c4     A7 20 02 FB | 	rdlong	local02, fp
1e6c8     2C 4E 05 F1 | 	add	fp, #44
1e6cc     A7 12 02 FB | 	rdlong	arg01, fp
1e6d0     1C 12 06 F1 | 	add	arg01, #28
1e6d4                 | ' {
1e6d4                 | ' 
1e6d4                 | ' 	return *((DWORD*)ptr);
1e6d4     09 FB 01 FB | 	rdlong	result1, arg01
1e6d8     0C 20 06 F1 | 	add	local02, #12
1e6dc     10 FB 61 FC | 	wrlong	result1, local02
1e6e0     2C 4E 85 F1 | 	sub	fp, #44
1e6e4     A7 20 02 FB | 	rdlong	local02, fp
1e6e8     40 4E 05 F1 | 	add	fp, #64
1e6ec     A7 1E 02 FB | 	rdlong	local01, fp
1e6f0     10 1F 62 FC | 	wrlong	local01, local02
1e6f4     40 4E 85 F1 | 	sub	fp, #64
1e6f8     A7 20 02 FB | 	rdlong	local02, fp
1e6fc     40 4E 05 F1 | 	add	fp, #64
1e700     A7 1E 02 FB | 	rdlong	local01, fp
1e704     06 1E 06 F1 | 	add	local01, #6
1e708     0F 1F E2 FA | 	rdword	local01, local01
1e70c     04 20 06 F1 | 	add	local02, #4
1e710     10 1F 52 FC | 	wrword	local01, local02
1e714     40 4E 85 F1 | 	sub	fp, #64
1e718     A7 20 02 FB | 	rdlong	local02, fp
1e71c     08 4E 05 F1 | 	add	fp, #8
1e720     A7 1E C2 FA | 	rdbyte	local01, fp
1e724     10 20 06 F1 | 	add	local02, #16
1e728     10 1F 42 FC | 	wrbyte	local01, local02
1e72c     08 4E 85 F1 | 	sub	fp, #8
1e730     A7 20 02 FB | 	rdlong	local02, fp
1e734     11 20 06 F1 | 	add	local02, #17
1e738     10 01 48 FC | 	wrbyte	#0, local02
1e73c     A7 20 02 FB | 	rdlong	local02, fp
1e740     1C 20 06 F1 | 	add	local02, #28
1e744     10 01 68 FC | 	wrlong	#0, local02
1e748     A7 20 02 FB | 	rdlong	local02, fp
1e74c     14 20 06 F1 | 	add	local02, #20
1e750     10 01 68 FC | 	wrlong	#0, local02
1e754     A7 12 02 FB | 	rdlong	arg01, fp
1e758     04 4E 85 F1 | 	sub	fp, #4
1e75c     28 12 06 F1 | 	add	arg01, #40
1e760     00 14 06 F6 | 	mov	arg02, #0
1e764     09 16 C6 F9 | 	decod	arg03, #9
1e768     98 00 A0 FD | 	call	#\builtin_bytefill_
1e76c     0C 4E 05 F1 | 	add	fp, #12
1e770     A7 20 C2 FA | 	rdbyte	local02, fp
1e774     0C 4E 85 F1 | 	sub	fp, #12
1e778     20 20 CE F7 | 	test	local02, #32 wz
1e77c     0C 02 90 AD |  if_e	jmp	#LR__3484
1e780     04 4E 05 F1 | 	add	fp, #4
1e784     A7 1E 02 FB | 	rdlong	local01, fp
1e788     04 4E 85 F1 | 	sub	fp, #4
1e78c     0C 1E 06 F1 | 	add	local01, #12
1e790     0F 21 02 FB | 	rdlong	local02, local01
1e794     01 20 16 F2 | 	cmp	local02, #1 wc
1e798     F0 01 90 CD |  if_b	jmp	#LR__3484
1e79c     04 4E 05 F1 | 	add	fp, #4
1e7a0     A7 1E 02 FB | 	rdlong	local01, fp
1e7a4     0F 21 02 F6 | 	mov	local02, local01
1e7a8     0C 1E 06 F1 | 	add	local01, #12
1e7ac     0F 1F 02 FB | 	rdlong	local01, local01
1e7b0     14 20 06 F1 | 	add	local02, #20
1e7b4     10 1F 62 FC | 	wrlong	local01, local02
1e7b8     40 4E 05 F1 | 	add	fp, #64
1e7bc     A7 20 02 FB | 	rdlong	local02, fp
1e7c0     0A 20 06 F1 | 	add	local02, #10
1e7c4     10 21 E2 FA | 	rdword	local02, local02
1e7c8     09 20 66 F0 | 	shl	local02, #9
1e7cc     08 4E 05 F1 | 	add	fp, #8
1e7d0     A7 20 62 FC | 	wrlong	local02, fp
1e7d4     48 4E 85 F1 | 	sub	fp, #72
1e7d8     A7 20 02 FB | 	rdlong	local02, fp
1e7dc     08 20 06 F1 | 	add	local02, #8
1e7e0     10 1F 02 FB | 	rdlong	local01, local02
1e7e4     4C 4E 05 F1 | 	add	fp, #76
1e7e8     A7 1E 62 FC | 	wrlong	local01, fp
1e7ec                 | ' 				fp->fptr = fp->obj.objsize;
1e7ec                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
1e7ec                 | ' 				clst = fp->obj.sclust;
1e7ec                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1e7ec     4C 4E 85 F1 | 	sub	fp, #76
1e7f0     A7 20 02 FB | 	rdlong	local02, fp
1e7f4     0C 20 06 F1 | 	add	local02, #12
1e7f8     10 1F 02 FB | 	rdlong	local01, local02
1e7fc     58 4E 05 F1 | 	add	fp, #88
1e800     A7 1E 62 FC | 	wrlong	local01, fp
1e804     5C 4E 85 F1 | 	sub	fp, #92
1e808                 | LR__3480
1e808     10 4E 05 F1 | 	add	fp, #16
1e80c     A7 20 0A FB | 	rdlong	local02, fp wz
1e810     10 4E 85 F1 | 	sub	fp, #16
1e814     94 00 90 5D |  if_ne	jmp	#LR__3481
1e818     5C 4E 05 F1 | 	add	fp, #92
1e81c     A7 20 02 FB | 	rdlong	local02, fp
1e820     10 4E 85 F1 | 	sub	fp, #16
1e824     A7 1E 02 FB | 	rdlong	local01, fp
1e828     4C 4E 85 F1 | 	sub	fp, #76
1e82c     0F 21 1A F2 | 	cmp	local02, local01 wcz
1e830     78 00 90 ED |  if_be	jmp	#LR__3481
1e834     04 4E 05 F1 | 	add	fp, #4
1e838     A7 12 02 FB | 	rdlong	arg01, fp
1e83c     4C 4E 05 F1 | 	add	fp, #76
1e840     A7 14 02 FB | 	rdlong	arg02, fp
1e844     50 4E 85 F1 | 	sub	fp, #80
1e848     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
1e84c     50 4E 05 F1 | 	add	fp, #80
1e850     A7 FA 61 FC | 	wrlong	result1, fp
1e854     50 4E 85 F1 | 	sub	fp, #80
1e858     02 FA 15 F2 | 	cmp	result1, #2 wc
1e85c     10 4E 05 C1 |  if_b	add	fp, #16
1e860     A7 04 68 CC |  if_b	wrlong	#2, fp
1e864     10 4E 85 C1 |  if_b	sub	fp, #16
1e868     50 4E 05 F1 | 	add	fp, #80
1e86c     A7 20 02 FB | 	rdlong	local02, fp
1e870     50 4E 85 F1 | 	sub	fp, #80
1e874     FF FF 7F FF 
1e878     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1e87c     10 4E 05 A1 |  if_e	add	fp, #16
1e880     A7 02 68 AC |  if_e	wrlong	#1, fp
1e884     10 4E 85 A1 |  if_e	sub	fp, #16
1e888     5C 4E 05 F1 | 	add	fp, #92
1e88c     A7 20 02 FB | 	rdlong	local02, fp
1e890     10 4E 85 F1 | 	sub	fp, #16
1e894     A7 1E 02 FB | 	rdlong	local01, fp
1e898     0F 21 82 F1 | 	sub	local02, local01
1e89c     10 4E 05 F1 | 	add	fp, #16
1e8a0     A7 20 62 FC | 	wrlong	local02, fp
1e8a4     5C 4E 85 F1 | 	sub	fp, #92
1e8a8     5C FF 9F FD | 	jmp	#LR__3480
1e8ac                 | LR__3481
1e8ac     04 4E 05 F1 | 	add	fp, #4
1e8b0     A7 20 02 FB | 	rdlong	local02, fp
1e8b4     4C 4E 05 F1 | 	add	fp, #76
1e8b8     A7 1E 02 FB | 	rdlong	local01, fp
1e8bc     18 20 06 F1 | 	add	local02, #24
1e8c0     10 1F 62 FC | 	wrlong	local01, local02
1e8c4     40 4E 85 F1 | 	sub	fp, #64
1e8c8     A7 20 0A FB | 	rdlong	local02, fp wz
1e8cc     10 4E 85 F1 | 	sub	fp, #16
1e8d0     B8 00 90 5D |  if_ne	jmp	#LR__3483
1e8d4     5C 4E 05 F1 | 	add	fp, #92
1e8d8     A7 1E 02 FB | 	rdlong	local01, fp
1e8dc     5C 4E 85 F1 | 	sub	fp, #92
1e8e0     FF 1F CE F7 | 	test	local01, #511 wz
1e8e4     A4 00 90 AD |  if_e	jmp	#LR__3483
1e8e8     44 4E 05 F1 | 	add	fp, #68
1e8ec     A7 12 02 FB | 	rdlong	arg01, fp
1e8f0     0C 4E 05 F1 | 	add	fp, #12
1e8f4     A7 14 02 FB | 	rdlong	arg02, fp
1e8f8     50 4E 85 F1 | 	sub	fp, #80
1e8fc     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
1e900     58 4E 05 F1 | 	add	fp, #88
1e904     A7 FA 61 FC | 	wrlong	result1, fp
1e908     00 FA 4D F2 | 	cmps	result1, #0 wz
1e90c     58 4E 85 F1 | 	sub	fp, #88
1e910     10 4E 05 A1 |  if_e	add	fp, #16
1e914     A7 04 68 AC |  if_e	wrlong	#2, fp
1e918     10 4E 85 A1 |  if_e	sub	fp, #16
1e91c     6C 00 90 AD |  if_e	jmp	#LR__3482
1e920     04 4E 05 F1 | 	add	fp, #4
1e924     A7 20 02 FB | 	rdlong	local02, fp
1e928     54 4E 05 F1 | 	add	fp, #84
1e92c     A7 1E 02 FB | 	rdlong	local01, fp
1e930     04 4E 05 F1 | 	add	fp, #4
1e934     A7 18 02 FB | 	rdlong	arg04, fp
1e938     09 18 46 F0 | 	shr	arg04, #9
1e93c     0C 1F 02 F1 | 	add	local01, arg04
1e940     1C 20 06 F1 | 	add	local02, #28
1e944     10 1F 62 FC | 	wrlong	local01, local02
1e948     18 4E 85 F1 | 	sub	fp, #24
1e94c     A7 20 02 FB | 	rdlong	local02, fp
1e950     01 20 06 F1 | 	add	local02, #1
1e954     10 13 C2 FA | 	rdbyte	arg01, local02
1e958     40 4E 85 F1 | 	sub	fp, #64
1e95c     A7 20 02 FB | 	rdlong	local02, fp
1e960     10 15 02 F6 | 	mov	arg02, local02
1e964     28 14 06 F1 | 	add	arg02, #40
1e968     04 4E 85 F1 | 	sub	fp, #4
1e96c     1C 20 06 F1 | 	add	local02, #28
1e970     10 17 02 FB | 	rdlong	arg03, local02
1e974     01 18 06 F6 | 	mov	arg04, #1
1e978     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
1e97c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e980     10 4E 05 51 |  if_ne	add	fp, #16
1e984     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e988     10 4E 85 51 |  if_ne	sub	fp, #16
1e98c                 | LR__3482
1e98c                 | LR__3483
1e98c                 | LR__3484
1e98c                 | LR__3485
1e98c                 | LR__3486
1e98c     10 4E 05 F1 | 	add	fp, #16
1e990     A7 20 0A FB | 	rdlong	local02, fp wz
1e994     10 4E 85 F1 | 	sub	fp, #16
1e998     04 4E 05 51 |  if_ne	add	fp, #4
1e99c     A7 20 02 5B |  if_ne	rdlong	local02, fp
1e9a0     04 4E 85 51 |  if_ne	sub	fp, #4
1e9a4     10 01 68 5C |  if_ne	wrlong	#0, local02
1e9a8                 | ' 
1e9a8                 | ' 	return res ;
1e9a8     10 4E 05 F1 | 	add	fp, #16
1e9ac     A7 FA 01 FB | 	rdlong	result1, fp
1e9b0     10 4E 85 F1 | 	sub	fp, #16
1e9b4                 | LR__3487
1e9b4     A7 F0 03 F6 | 	mov	ptra, fp
1e9b8     B2 00 A0 FD | 	call	#popregs_
1e9bc                 | _fatfs_cc_f_open_ret
1e9bc     2D 00 64 FD | 	ret
1e9c0                 | 
1e9c0                 | _fatfs_cc_f_read
1e9c0     0E 4A 05 F6 | 	mov	COUNT_, #14
1e9c4     A8 00 A0 FD | 	call	#pushregs_
1e9c8     38 F0 07 F1 | 	add	ptra, #56
1e9cc     04 4E 05 F1 | 	add	fp, #4
1e9d0     A7 12 62 FC | 	wrlong	arg01, fp
1e9d4     04 4E 05 F1 | 	add	fp, #4
1e9d8     A7 14 62 FC | 	wrlong	arg02, fp
1e9dc     04 4E 05 F1 | 	add	fp, #4
1e9e0     A7 16 62 FC | 	wrlong	arg03, fp
1e9e4     04 4E 05 F1 | 	add	fp, #4
1e9e8     A7 18 62 FC | 	wrlong	arg04, fp
1e9ec     08 4E 85 F1 | 	sub	fp, #8
1e9f0     A7 FA 01 FB | 	rdlong	result1, fp
1e9f4     2C 4E 05 F1 | 	add	fp, #44
1e9f8     A7 FA 61 FC | 	wrlong	result1, fp
1e9fc     24 4E 85 F1 | 	sub	fp, #36
1ea00     A7 FA 01 FB | 	rdlong	result1, fp
1ea04     FD 00 68 FC | 	wrlong	#0, result1
1ea08     0C 4E 85 F1 | 	sub	fp, #12
1ea0c     A7 12 02 FB | 	rdlong	arg01, fp
1ea10     14 4E 05 F1 | 	add	fp, #20
1ea14     A7 14 02 F6 | 	mov	arg02, fp
1ea18     18 4E 85 F1 | 	sub	fp, #24
1ea1c     24 F7 BF FD | 	call	#_fatfs_cc_validate
1ea20     14 4E 05 F1 | 	add	fp, #20
1ea24     A7 FA 61 FC | 	wrlong	result1, fp
1ea28     00 FA 4D F2 | 	cmps	result1, #0 wz
1ea2c     14 4E 85 F1 | 	sub	fp, #20
1ea30     20 00 90 5D |  if_ne	jmp	#LR__3490
1ea34     04 4E 05 F1 | 	add	fp, #4
1ea38     A7 14 02 FB | 	rdlong	arg02, fp
1ea3c     11 14 06 F1 | 	add	arg02, #17
1ea40     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
1ea44     10 4E 05 F1 | 	add	fp, #16
1ea48     A7 14 62 FC | 	wrlong	arg02, fp
1ea4c     14 4E 85 F1 | 	sub	fp, #20
1ea50     10 00 90 AD |  if_e	jmp	#LR__3491
1ea54                 | LR__3490
1ea54     14 4E 05 F1 | 	add	fp, #20
1ea58     A7 FA 01 FB | 	rdlong	result1, fp
1ea5c     14 4E 85 F1 | 	sub	fp, #20
1ea60     EC 05 90 FD | 	jmp	#LR__3510
1ea64                 | LR__3491
1ea64     04 4E 05 F1 | 	add	fp, #4
1ea68     A7 18 02 FB | 	rdlong	arg04, fp
1ea6c     04 4E 85 F1 | 	sub	fp, #4
1ea70     10 18 06 F1 | 	add	arg04, #16
1ea74     0C 19 C2 FA | 	rdbyte	arg04, arg04
1ea78     01 18 CE F7 | 	test	arg04, #1 wz
1ea7c     07 FA 05 A6 |  if_e	mov	result1, #7
1ea80     CC 05 90 AD |  if_e	jmp	#LR__3510
1ea84     04 4E 05 F1 | 	add	fp, #4
1ea88     A7 1E 02 FB | 	rdlong	local01, fp
1ea8c     0F 21 02 F6 | 	mov	local02, local01
1ea90     0C 20 06 F1 | 	add	local02, #12
1ea94     10 23 02 FB | 	rdlong	local03, local02
1ea98     14 1E 06 F1 | 	add	local01, #20
1ea9c     0F 1F 02 FB | 	rdlong	local01, local01
1eaa0     0F 23 82 F1 | 	sub	local03, local01
1eaa4     20 4E 05 F1 | 	add	fp, #32
1eaa8     A7 22 62 FC | 	wrlong	local03, fp
1eaac     18 4E 85 F1 | 	sub	fp, #24
1eab0     A7 24 02 FB | 	rdlong	local04, fp
1eab4     0C 4E 85 F1 | 	sub	fp, #12
1eab8     11 25 1A F2 | 	cmp	local04, local03 wcz
1eabc     24 4E 05 11 |  if_a	add	fp, #36
1eac0     A7 24 02 1B |  if_a	rdlong	local04, fp
1eac4     18 4E 85 11 |  if_a	sub	fp, #24
1eac8     A7 24 62 1C |  if_a	wrlong	local04, fp
1eacc     0C 4E 85 11 |  if_a	sub	fp, #12
1ead0                 | ' 
1ead0                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
1ead0                 | LR__3492
1ead0     0C 4E 05 F1 | 	add	fp, #12
1ead4     A7 20 02 FB | 	rdlong	local02, fp
1ead8     0C 4E 85 F1 | 	sub	fp, #12
1eadc     10 25 02 F6 | 	mov	local04, local02
1eae0     01 24 16 F2 | 	cmp	local04, #1 wc
1eae4     64 05 90 CD |  if_b	jmp	#LR__3509
1eae8     04 4E 05 F1 | 	add	fp, #4
1eaec     A7 22 02 FB | 	rdlong	local03, fp
1eaf0     04 4E 85 F1 | 	sub	fp, #4
1eaf4     14 22 06 F1 | 	add	local03, #20
1eaf8     11 23 02 FB | 	rdlong	local03, local03
1eafc     FF 23 CE F7 | 	test	local03, #511 wz
1eb00     3C 04 90 5D |  if_ne	jmp	#LR__3507
1eb04     04 4E 05 F1 | 	add	fp, #4
1eb08     A7 1E 02 FB | 	rdlong	local01, fp
1eb0c     14 1E 06 F1 | 	add	local01, #20
1eb10     0F 23 02 FB | 	rdlong	local03, local01
1eb14     09 22 46 F0 | 	shr	local03, #9
1eb18     14 4E 05 F1 | 	add	fp, #20
1eb1c     A7 26 02 FB | 	rdlong	local05, fp
1eb20     13 29 02 F6 | 	mov	local06, local05
1eb24     0A 28 06 F1 | 	add	local06, #10
1eb28     14 2B E2 FA | 	rdword	local07, local06
1eb2c     0A 28 86 F1 | 	sub	local06, #10
1eb30     15 2D 32 F9 | 	getword	local08, local07, #0
1eb34     01 2C 86 F1 | 	sub	local08, #1
1eb38     16 23 0A F5 | 	and	local03, local08 wz
1eb3c     18 4E 05 F1 | 	add	fp, #24
1eb40     A7 22 62 FC | 	wrlong	local03, fp
1eb44     30 4E 85 F1 | 	sub	fp, #48
1eb48     E0 00 90 5D |  if_ne	jmp	#LR__3497
1eb4c     04 4E 05 F1 | 	add	fp, #4
1eb50     A7 22 02 FB | 	rdlong	local03, fp
1eb54     04 4E 85 F1 | 	sub	fp, #4
1eb58     14 22 06 F1 | 	add	local03, #20
1eb5c     11 23 0A FB | 	rdlong	local03, local03 wz
1eb60     20 00 90 5D |  if_ne	jmp	#LR__3493
1eb64     04 4E 05 F1 | 	add	fp, #4
1eb68     A7 22 02 FB | 	rdlong	local03, fp
1eb6c     08 22 06 F1 | 	add	local03, #8
1eb70     11 23 02 FB | 	rdlong	local03, local03
1eb74     18 4E 05 F1 | 	add	fp, #24
1eb78     A7 22 62 FC | 	wrlong	local03, fp
1eb7c     1C 4E 85 F1 | 	sub	fp, #28
1eb80     28 00 90 FD | 	jmp	#LR__3494
1eb84                 | LR__3493
1eb84     04 4E 05 F1 | 	add	fp, #4
1eb88     A7 2C 02 FB | 	rdlong	local08, fp
1eb8c     16 13 02 F6 | 	mov	arg01, local08
1eb90     04 4E 85 F1 | 	sub	fp, #4
1eb94     18 2C 06 F1 | 	add	local08, #24
1eb98     16 15 02 FB | 	rdlong	arg02, local08
1eb9c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
1eba0     1C 4E 05 F1 | 	add	fp, #28
1eba4     A7 FA 61 FC | 	wrlong	result1, fp
1eba8     1C 4E 85 F1 | 	sub	fp, #28
1ebac                 | LR__3494
1ebac     1C 4E 05 F1 | 	add	fp, #28
1ebb0     A7 22 02 FB | 	rdlong	local03, fp
1ebb4     1C 4E 85 F1 | 	sub	fp, #28
1ebb8     02 22 16 F2 | 	cmp	local03, #2 wc
1ebbc     1C 00 90 3D |  if_ae	jmp	#LR__3495
1ebc0     04 4E 05 F1 | 	add	fp, #4
1ebc4     A7 22 02 FB | 	rdlong	local03, fp
1ebc8     04 4E 85 F1 | 	sub	fp, #4
1ebcc     11 22 06 F1 | 	add	local03, #17
1ebd0     11 05 48 FC | 	wrbyte	#2, local03
1ebd4     02 FA 05 F6 | 	mov	result1, #2
1ebd8     74 04 90 FD | 	jmp	#LR__3510
1ebdc                 | LR__3495
1ebdc     1C 4E 05 F1 | 	add	fp, #28
1ebe0     A7 22 02 FB | 	rdlong	local03, fp
1ebe4     1C 4E 85 F1 | 	sub	fp, #28
1ebe8     FF FF 7F FF 
1ebec     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1ebf0     1C 00 90 5D |  if_ne	jmp	#LR__3496
1ebf4     04 4E 05 F1 | 	add	fp, #4
1ebf8     A7 22 02 FB | 	rdlong	local03, fp
1ebfc     04 4E 85 F1 | 	sub	fp, #4
1ec00     11 22 06 F1 | 	add	local03, #17
1ec04     11 03 48 FC | 	wrbyte	#1, local03
1ec08     01 FA 05 F6 | 	mov	result1, #1
1ec0c     40 04 90 FD | 	jmp	#LR__3510
1ec10                 | LR__3496
1ec10     04 4E 05 F1 | 	add	fp, #4
1ec14     A7 22 02 FB | 	rdlong	local03, fp
1ec18     18 4E 05 F1 | 	add	fp, #24
1ec1c     A7 2C 02 FB | 	rdlong	local08, fp
1ec20     1C 4E 85 F1 | 	sub	fp, #28
1ec24     18 22 06 F1 | 	add	local03, #24
1ec28     11 2D 62 FC | 	wrlong	local08, local03
1ec2c                 | LR__3497
1ec2c     18 4E 05 F1 | 	add	fp, #24
1ec30     A7 12 02 FB | 	rdlong	arg01, fp
1ec34     14 4E 85 F1 | 	sub	fp, #20
1ec38     A7 22 02 FB | 	rdlong	local03, fp
1ec3c     04 4E 85 F1 | 	sub	fp, #4
1ec40     18 22 06 F1 | 	add	local03, #24
1ec44     11 15 02 FB | 	rdlong	arg02, local03
1ec48     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
1ec4c     20 4E 05 F1 | 	add	fp, #32
1ec50     A7 FA 61 FC | 	wrlong	result1, fp
1ec54     20 4E 85 F1 | 	sub	fp, #32
1ec58     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec5c     1C 00 90 5D |  if_ne	jmp	#LR__3498
1ec60     04 4E 05 F1 | 	add	fp, #4
1ec64     A7 22 02 FB | 	rdlong	local03, fp
1ec68     04 4E 85 F1 | 	sub	fp, #4
1ec6c     11 22 06 F1 | 	add	local03, #17
1ec70     11 05 48 FC | 	wrbyte	#2, local03
1ec74     02 FA 05 F6 | 	mov	result1, #2
1ec78     D4 03 90 FD | 	jmp	#LR__3510
1ec7c                 | LR__3498
1ec7c     20 4E 05 F1 | 	add	fp, #32
1ec80     A7 22 02 FB | 	rdlong	local03, fp
1ec84     10 4E 05 F1 | 	add	fp, #16
1ec88     A7 2C 02 FB | 	rdlong	local08, fp
1ec8c     16 23 02 F1 | 	add	local03, local08
1ec90     10 4E 85 F1 | 	sub	fp, #16
1ec94     A7 22 62 FC | 	wrlong	local03, fp
1ec98     14 4E 85 F1 | 	sub	fp, #20
1ec9c     A7 22 02 FB | 	rdlong	local03, fp
1eca0     09 22 46 F0 | 	shr	local03, #9
1eca4     20 4E 05 F1 | 	add	fp, #32
1eca8     A7 22 62 FC | 	wrlong	local03, fp
1ecac     2C 4E 85 F1 | 	sub	fp, #44
1ecb0     01 22 16 F2 | 	cmp	local03, #1 wc
1ecb4     5C 01 90 CD |  if_b	jmp	#LR__3502
1ecb8     30 4E 05 F1 | 	add	fp, #48
1ecbc     A7 22 02 FB | 	rdlong	local03, fp
1ecc0     04 4E 85 F1 | 	sub	fp, #4
1ecc4     A7 2C 02 FB | 	rdlong	local08, fp
1ecc8     16 23 02 F1 | 	add	local03, local08
1eccc     14 4E 85 F1 | 	sub	fp, #20
1ecd0     A7 2C 02 FB | 	rdlong	local08, fp
1ecd4     18 4E 85 F1 | 	sub	fp, #24
1ecd8     0A 2C 06 F1 | 	add	local08, #10
1ecdc     16 2D E2 FA | 	rdword	local08, local08
1ece0     16 23 1A F2 | 	cmp	local03, local08 wcz
1ece4     28 00 90 ED |  if_be	jmp	#LR__3499
1ece8     18 4E 05 F1 | 	add	fp, #24
1ecec     A7 1E 02 FB | 	rdlong	local01, fp
1ecf0     0A 1E 06 F1 | 	add	local01, #10
1ecf4     0F 23 E2 FA | 	rdword	local03, local01
1ecf8     18 4E 05 F1 | 	add	fp, #24
1ecfc     A7 2C 02 FB | 	rdlong	local08, fp
1ed00     16 23 82 F1 | 	sub	local03, local08
1ed04     04 4E 85 F1 | 	sub	fp, #4
1ed08     A7 22 62 FC | 	wrlong	local03, fp
1ed0c     2C 4E 85 F1 | 	sub	fp, #44
1ed10                 | LR__3499
1ed10     18 4E 05 F1 | 	add	fp, #24
1ed14     A7 1E 02 FB | 	rdlong	local01, fp
1ed18     01 1E 06 F1 | 	add	local01, #1
1ed1c     0F 13 C2 FA | 	rdbyte	arg01, local01
1ed20     1C 4E 05 F1 | 	add	fp, #28
1ed24     A7 14 02 FB | 	rdlong	arg02, fp
1ed28     14 4E 85 F1 | 	sub	fp, #20
1ed2c     A7 16 02 FB | 	rdlong	arg03, fp
1ed30     0C 4E 05 F1 | 	add	fp, #12
1ed34     A7 18 02 FB | 	rdlong	arg04, fp
1ed38     2C 4E 85 F1 | 	sub	fp, #44
1ed3c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
1ed40     00 FA 0D F2 | 	cmp	result1, #0 wz
1ed44     1C 00 90 AD |  if_e	jmp	#LR__3500
1ed48     04 4E 05 F1 | 	add	fp, #4
1ed4c     A7 22 02 FB | 	rdlong	local03, fp
1ed50     04 4E 85 F1 | 	sub	fp, #4
1ed54     11 22 06 F1 | 	add	local03, #17
1ed58     11 03 48 FC | 	wrbyte	#1, local03
1ed5c     01 FA 05 F6 | 	mov	result1, #1
1ed60     EC 02 90 FD | 	jmp	#LR__3510
1ed64                 | LR__3500
1ed64     04 4E 05 F1 | 	add	fp, #4
1ed68     A7 1E 02 FB | 	rdlong	local01, fp
1ed6c     04 4E 85 F1 | 	sub	fp, #4
1ed70     10 1E 06 F1 | 	add	local01, #16
1ed74     0F 23 C2 FA | 	rdbyte	local03, local01
1ed78     80 22 CE F7 | 	test	local03, #128 wz
1ed7c     78 00 90 AD |  if_e	jmp	#LR__3501
1ed80     04 4E 05 F1 | 	add	fp, #4
1ed84     A7 2C 02 FB | 	rdlong	local08, fp
1ed88     1C 2C 06 F1 | 	add	local08, #28
1ed8c     16 2D 02 FB | 	rdlong	local08, local08
1ed90     1C 4E 05 F1 | 	add	fp, #28
1ed94     A7 2E 02 FB | 	rdlong	local09, fp
1ed98     17 2D 82 F1 | 	sub	local08, local09
1ed9c     0C 4E 05 F1 | 	add	fp, #12
1eda0     A7 30 02 FB | 	rdlong	local10, fp
1eda4     2C 4E 85 F1 | 	sub	fp, #44
1eda8     18 33 02 F6 | 	mov	local11, local10
1edac     19 2D 12 F2 | 	cmp	local08, local11 wc
1edb0     44 00 90 3D |  if_ae	jmp	#LR__3501
1edb4     34 4E 05 F1 | 	add	fp, #52
1edb8     A7 12 02 FB | 	rdlong	arg01, fp
1edbc     30 4E 85 F1 | 	sub	fp, #48
1edc0     A7 14 02 FB | 	rdlong	arg02, fp
1edc4     0A 33 02 F6 | 	mov	local11, arg02
1edc8     1C 32 06 F1 | 	add	local11, #28
1edcc     19 2F 02 FB | 	rdlong	local09, local11
1edd0     1C 4E 05 F1 | 	add	fp, #28
1edd4     A7 26 02 FB | 	rdlong	local05, fp
1edd8     13 2F 82 F1 | 	sub	local09, local05
1eddc     09 2E 66 F0 | 	shl	local09, #9
1ede0     17 33 02 F6 | 	mov	local11, local09
1ede4     17 13 02 F1 | 	add	arg01, local09
1ede8     20 4E 85 F1 | 	sub	fp, #32
1edec     28 14 06 F1 | 	add	arg02, #40
1edf0     09 16 C6 F9 | 	decod	arg03, #9
1edf4     A8 4B BF FD | 	call	#__system____builtin_memmove
1edf8                 | LR__3501
1edf8     2C 4E 05 F1 | 	add	fp, #44
1edfc     A7 22 02 FB | 	rdlong	local03, fp
1ee00     09 22 66 F0 | 	shl	local03, #9
1ee04     04 4E 85 F1 | 	sub	fp, #4
1ee08     A7 22 62 FC | 	wrlong	local03, fp
1ee0c     28 4E 85 F1 | 	sub	fp, #40
1ee10                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
1ee10                 | ' 				}
1ee10                 | ' 
1ee10                 | ' 
1ee10                 | ' 				rcnt =  ((UINT) 512 )  * cc;
1ee10                 | ' 				continue;
1ee10     B4 01 90 FD | 	jmp	#LR__3508
1ee14                 | LR__3502
1ee14     04 4E 05 F1 | 	add	fp, #4
1ee18     A7 22 02 FB | 	rdlong	local03, fp
1ee1c     1C 22 06 F1 | 	add	local03, #28
1ee20     11 23 02 FB | 	rdlong	local03, local03
1ee24     1C 4E 05 F1 | 	add	fp, #28
1ee28     A7 1E 02 FB | 	rdlong	local01, fp
1ee2c     20 4E 85 F1 | 	sub	fp, #32
1ee30     0F 23 0A F2 | 	cmp	local03, local01 wz
1ee34     EC 00 90 AD |  if_e	jmp	#LR__3506
1ee38     04 4E 05 F1 | 	add	fp, #4
1ee3c     A7 1E 02 FB | 	rdlong	local01, fp
1ee40     04 4E 85 F1 | 	sub	fp, #4
1ee44     10 1E 06 F1 | 	add	local01, #16
1ee48     0F 23 C2 FA | 	rdbyte	local03, local01
1ee4c     80 22 CE F7 | 	test	local03, #128 wz
1ee50     7C 00 90 AD |  if_e	jmp	#LR__3504
1ee54     18 4E 05 F1 | 	add	fp, #24
1ee58     A7 1E 02 FB | 	rdlong	local01, fp
1ee5c     01 1E 06 F1 | 	add	local01, #1
1ee60     0F 13 C2 FA | 	rdbyte	arg01, local01
1ee64     14 4E 85 F1 | 	sub	fp, #20
1ee68     A7 22 02 FB | 	rdlong	local03, fp
1ee6c     11 15 02 F6 | 	mov	arg02, local03
1ee70     28 14 06 F1 | 	add	arg02, #40
1ee74     04 4E 85 F1 | 	sub	fp, #4
1ee78     1C 22 06 F1 | 	add	local03, #28
1ee7c     11 17 02 FB | 	rdlong	arg03, local03
1ee80     01 18 06 F6 | 	mov	arg04, #1
1ee84     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
1ee88     00 FA 0D F2 | 	cmp	result1, #0 wz
1ee8c     1C 00 90 AD |  if_e	jmp	#LR__3503
1ee90     04 4E 05 F1 | 	add	fp, #4
1ee94     A7 22 02 FB | 	rdlong	local03, fp
1ee98     04 4E 85 F1 | 	sub	fp, #4
1ee9c     11 22 06 F1 | 	add	local03, #17
1eea0     11 03 48 FC | 	wrbyte	#1, local03
1eea4     01 FA 05 F6 | 	mov	result1, #1
1eea8     A4 01 90 FD | 	jmp	#LR__3510
1eeac                 | LR__3503
1eeac     04 4E 05 F1 | 	add	fp, #4
1eeb0     A7 32 02 FB | 	rdlong	local11, fp
1eeb4     19 23 02 F6 | 	mov	local03, local11
1eeb8     04 4E 85 F1 | 	sub	fp, #4
1eebc     10 32 06 F1 | 	add	local11, #16
1eec0     19 33 C2 FA | 	rdbyte	local11, local11
1eec4     7F 32 06 F5 | 	and	local11, #127
1eec8     10 22 06 F1 | 	add	local03, #16
1eecc     11 33 42 FC | 	wrbyte	local11, local03
1eed0                 | LR__3504
1eed0     18 4E 05 F1 | 	add	fp, #24
1eed4     A7 1E 02 FB | 	rdlong	local01, fp
1eed8     01 1E 06 F1 | 	add	local01, #1
1eedc     0F 13 C2 FA | 	rdbyte	arg01, local01
1eee0     14 4E 85 F1 | 	sub	fp, #20
1eee4     A7 14 02 FB | 	rdlong	arg02, fp
1eee8     28 14 06 F1 | 	add	arg02, #40
1eeec     1C 4E 05 F1 | 	add	fp, #28
1eef0     A7 16 02 FB | 	rdlong	arg03, fp
1eef4     20 4E 85 F1 | 	sub	fp, #32
1eef8     01 18 06 F6 | 	mov	arg04, #1
1eefc     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
1ef00     00 FA 0D F2 | 	cmp	result1, #0 wz
1ef04     1C 00 90 AD |  if_e	jmp	#LR__3505
1ef08     04 4E 05 F1 | 	add	fp, #4
1ef0c     A7 22 02 FB | 	rdlong	local03, fp
1ef10     04 4E 85 F1 | 	sub	fp, #4
1ef14     11 22 06 F1 | 	add	local03, #17
1ef18     11 03 48 FC | 	wrbyte	#1, local03
1ef1c     01 FA 05 F6 | 	mov	result1, #1
1ef20     2C 01 90 FD | 	jmp	#LR__3510
1ef24                 | LR__3505
1ef24                 | LR__3506
1ef24     04 4E 05 F1 | 	add	fp, #4
1ef28     A7 22 02 FB | 	rdlong	local03, fp
1ef2c     1C 4E 05 F1 | 	add	fp, #28
1ef30     A7 32 02 FB | 	rdlong	local11, fp
1ef34     20 4E 85 F1 | 	sub	fp, #32
1ef38     1C 22 06 F1 | 	add	local03, #28
1ef3c     11 33 62 FC | 	wrlong	local11, local03
1ef40                 | LR__3507
1ef40     04 4E 05 F1 | 	add	fp, #4
1ef44     A7 1E 02 FB | 	rdlong	local01, fp
1ef48     14 1E 06 F1 | 	add	local01, #20
1ef4c     0F 33 02 FB | 	rdlong	local11, local01
1ef50     FF 33 06 F5 | 	and	local11, #511
1ef54     09 22 C6 F9 | 	decod	local03, #9
1ef58     19 23 82 F1 | 	sub	local03, local11
1ef5c     24 4E 05 F1 | 	add	fp, #36
1ef60     A7 22 62 FC | 	wrlong	local03, fp
1ef64     1C 4E 85 F1 | 	sub	fp, #28
1ef68     A7 32 02 FB | 	rdlong	local11, fp
1ef6c     0C 4E 85 F1 | 	sub	fp, #12
1ef70     19 23 1A F2 | 	cmp	local03, local11 wcz
1ef74     0C 4E 05 11 |  if_a	add	fp, #12
1ef78     A7 22 02 1B |  if_a	rdlong	local03, fp
1ef7c     1C 4E 05 11 |  if_a	add	fp, #28
1ef80     A7 22 62 1C |  if_a	wrlong	local03, fp
1ef84     28 4E 85 11 |  if_a	sub	fp, #40
1ef88     34 4E 05 F1 | 	add	fp, #52
1ef8c     A7 12 02 FB | 	rdlong	arg01, fp
1ef90     30 4E 85 F1 | 	sub	fp, #48
1ef94     A7 28 02 FB | 	rdlong	local06, fp
1ef98     14 15 02 F6 | 	mov	arg02, local06
1ef9c     28 14 06 F1 | 	add	arg02, #40
1efa0     14 28 06 F1 | 	add	local06, #20
1efa4     14 33 02 FB | 	rdlong	local11, local06
1efa8     19 2F 02 F6 | 	mov	local09, local11
1efac     17 31 02 F6 | 	mov	local10, local09
1efb0     FF 31 06 F5 | 	and	local10, #511
1efb4     18 15 02 F1 | 	add	arg02, local10
1efb8     24 4E 05 F1 | 	add	fp, #36
1efbc     A7 16 02 FB | 	rdlong	arg03, fp
1efc0     28 4E 85 F1 | 	sub	fp, #40
1efc4     D8 49 BF FD | 	call	#__system____builtin_memmove
1efc8                 | LR__3508
1efc8     0C 4E 05 F1 | 	add	fp, #12
1efcc     A7 22 02 FB | 	rdlong	local03, fp
1efd0     1C 4E 05 F1 | 	add	fp, #28
1efd4     A7 2C 02 FB | 	rdlong	local08, fp
1efd8     16 23 82 F1 | 	sub	local03, local08
1efdc     1C 4E 85 F1 | 	sub	fp, #28
1efe0     A7 22 62 FC | 	wrlong	local03, fp
1efe4     04 4E 05 F1 | 	add	fp, #4
1efe8     A7 1E 02 FB | 	rdlong	local01, fp
1efec     0F 2B 02 FB | 	rdlong	local07, local01
1eff0     18 4E 05 F1 | 	add	fp, #24
1eff4     A7 2C 02 FB | 	rdlong	local08, fp
1eff8     16 2B 02 F1 | 	add	local07, local08
1effc     0F 2B 62 FC | 	wrlong	local07, local01
1f000     0C 4E 05 F1 | 	add	fp, #12
1f004     A7 22 02 FB | 	rdlong	local03, fp
1f008     0C 4E 85 F1 | 	sub	fp, #12
1f00c     A7 34 02 FB | 	rdlong	local12, fp
1f010     1A 23 02 F1 | 	add	local03, local12
1f014     0C 4E 05 F1 | 	add	fp, #12
1f018     A7 22 62 FC | 	wrlong	local03, fp
1f01c     30 4E 85 F1 | 	sub	fp, #48
1f020     A7 36 02 FB | 	rdlong	local13, fp
1f024     1B 23 02 F6 | 	mov	local03, local13
1f028     14 36 06 F1 | 	add	local13, #20
1f02c     1B 39 02 FB | 	rdlong	local14, local13
1f030     24 4E 05 F1 | 	add	fp, #36
1f034     A7 28 02 FB | 	rdlong	local06, fp
1f038     28 4E 85 F1 | 	sub	fp, #40
1f03c     14 39 02 F1 | 	add	local14, local06
1f040     14 22 06 F1 | 	add	local03, #20
1f044     11 39 62 FC | 	wrlong	local14, local03
1f048     84 FA 9F FD | 	jmp	#LR__3492
1f04c                 | LR__3509
1f04c                 | ' 
1f04c                 | ' 
1f04c                 | ' 
1f04c                 | ' 
1f04c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
1f04c                 | ' 
1f04c                 | ' 	}
1f04c                 | ' 
1f04c                 | ' 	return FR_OK ;
1f04c     00 FA 05 F6 | 	mov	result1, #0
1f050                 | LR__3510
1f050     A7 F0 03 F6 | 	mov	ptra, fp
1f054     B2 00 A0 FD | 	call	#popregs_
1f058                 | _fatfs_cc_f_read_ret
1f058     2D 00 64 FD | 	ret
1f05c                 | 
1f05c                 | _fatfs_cc_f_write
1f05c     15 4A 05 F6 | 	mov	COUNT_, #21
1f060     A8 00 A0 FD | 	call	#pushregs_
1f064     34 F0 07 F1 | 	add	ptra, #52
1f068     04 4E 05 F1 | 	add	fp, #4
1f06c     A7 12 62 FC | 	wrlong	arg01, fp
1f070     04 4E 05 F1 | 	add	fp, #4
1f074     A7 14 62 FC | 	wrlong	arg02, fp
1f078     04 4E 05 F1 | 	add	fp, #4
1f07c     A7 16 62 FC | 	wrlong	arg03, fp
1f080     04 4E 05 F1 | 	add	fp, #4
1f084     A7 18 62 FC | 	wrlong	arg04, fp
1f088     08 4E 85 F1 | 	sub	fp, #8
1f08c     A7 FA 01 FB | 	rdlong	result1, fp
1f090     28 4E 05 F1 | 	add	fp, #40
1f094     A7 FA 61 FC | 	wrlong	result1, fp
1f098     20 4E 85 F1 | 	sub	fp, #32
1f09c     A7 FA 01 FB | 	rdlong	result1, fp
1f0a0     FD 00 68 FC | 	wrlong	#0, result1
1f0a4     0C 4E 85 F1 | 	sub	fp, #12
1f0a8     A7 12 02 FB | 	rdlong	arg01, fp
1f0ac     14 4E 05 F1 | 	add	fp, #20
1f0b0     A7 14 02 F6 | 	mov	arg02, fp
1f0b4     18 4E 85 F1 | 	sub	fp, #24
1f0b8     88 F0 BF FD | 	call	#_fatfs_cc_validate
1f0bc     14 4E 05 F1 | 	add	fp, #20
1f0c0     A7 FA 61 FC | 	wrlong	result1, fp
1f0c4     00 FA 4D F2 | 	cmps	result1, #0 wz
1f0c8     14 4E 85 F1 | 	sub	fp, #20
1f0cc     20 00 90 5D |  if_ne	jmp	#LR__3520
1f0d0     04 4E 05 F1 | 	add	fp, #4
1f0d4     A7 14 02 FB | 	rdlong	arg02, fp
1f0d8     11 14 06 F1 | 	add	arg02, #17
1f0dc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
1f0e0     10 4E 05 F1 | 	add	fp, #16
1f0e4     A7 14 62 FC | 	wrlong	arg02, fp
1f0e8     14 4E 85 F1 | 	sub	fp, #20
1f0ec     10 00 90 AD |  if_e	jmp	#LR__3521
1f0f0                 | LR__3520
1f0f0     14 4E 05 F1 | 	add	fp, #20
1f0f4     A7 FA 01 FB | 	rdlong	result1, fp
1f0f8     14 4E 85 F1 | 	sub	fp, #20
1f0fc     44 07 90 FD | 	jmp	#LR__3543
1f100                 | LR__3521
1f100     04 4E 05 F1 | 	add	fp, #4
1f104     A7 14 02 FB | 	rdlong	arg02, fp
1f108     04 4E 85 F1 | 	sub	fp, #4
1f10c     10 14 06 F1 | 	add	arg02, #16
1f110     0A 15 C2 FA | 	rdbyte	arg02, arg02
1f114     02 14 CE F7 | 	test	arg02, #2 wz
1f118     07 FA 05 A6 |  if_e	mov	result1, #7
1f11c     24 07 90 AD |  if_e	jmp	#LR__3543
1f120     04 4E 05 F1 | 	add	fp, #4
1f124     A7 14 02 FB | 	rdlong	arg02, fp
1f128     0A 13 02 F6 | 	mov	arg01, arg02
1f12c     14 12 06 F1 | 	add	arg01, #20
1f130     09 13 02 FB | 	rdlong	arg01, arg01
1f134     08 4E 05 F1 | 	add	fp, #8
1f138     A7 FA 01 FB | 	rdlong	result1, fp
1f13c     FD 12 02 F1 | 	add	arg01, result1
1f140     0C 4E 85 F1 | 	sub	fp, #12
1f144     14 14 06 F1 | 	add	arg02, #20
1f148     0A FB 01 FB | 	rdlong	result1, arg02
1f14c     FD 12 12 F2 | 	cmp	arg01, result1 wc
1f150     24 00 90 3D |  if_ae	jmp	#LR__3522
1f154     04 4E 05 F1 | 	add	fp, #4
1f158     A7 14 02 FB | 	rdlong	arg02, fp
1f15c     01 FA 65 F6 | 	neg	result1, #1
1f160     14 14 06 F1 | 	add	arg02, #20
1f164     0A 15 02 FB | 	rdlong	arg02, arg02
1f168     0A FB 81 F1 | 	sub	result1, arg02
1f16c     08 4E 05 F1 | 	add	fp, #8
1f170     A7 FA 61 FC | 	wrlong	result1, fp
1f174     0C 4E 85 F1 | 	sub	fp, #12
1f178                 | LR__3522
1f178                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1f178                 | ' 	}
1f178                 | ' 
1f178                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1f178                 | LR__3523
1f178     0C 4E 05 F1 | 	add	fp, #12
1f17c     A7 FA 01 FB | 	rdlong	result1, fp
1f180     0C 4E 85 F1 | 	sub	fp, #12
1f184     01 FA 15 F2 | 	cmp	result1, #1 wc
1f188     90 06 90 CD |  if_b	jmp	#LR__3542
1f18c     04 4E 05 F1 | 	add	fp, #4
1f190     A7 FA 01 FB | 	rdlong	result1, fp
1f194     04 4E 85 F1 | 	sub	fp, #4
1f198     14 FA 05 F1 | 	add	result1, #20
1f19c     FD FA 01 FB | 	rdlong	result1, result1
1f1a0     FF FB CD F7 | 	test	result1, #511 wz
1f1a4     D8 04 90 5D |  if_ne	jmp	#LR__3538
1f1a8     04 4E 05 F1 | 	add	fp, #4
1f1ac     A7 FA 01 FB | 	rdlong	result1, fp
1f1b0     14 FA 05 F1 | 	add	result1, #20
1f1b4     FD FA 01 FB | 	rdlong	result1, result1
1f1b8     09 FA 45 F0 | 	shr	result1, #9
1f1bc     14 4E 05 F1 | 	add	fp, #20
1f1c0     A7 14 02 FB | 	rdlong	arg02, fp
1f1c4     0A 14 06 F1 | 	add	arg02, #10
1f1c8     0A 19 E2 FA | 	rdword	arg04, arg02
1f1cc     0C 15 32 F9 | 	getword	arg02, arg04, #0
1f1d0     01 14 86 F1 | 	sub	arg02, #1
1f1d4     0A FB 09 F5 | 	and	result1, arg02 wz
1f1d8     14 4E 05 F1 | 	add	fp, #20
1f1dc     A7 FA 61 FC | 	wrlong	result1, fp
1f1e0     2C 4E 85 F1 | 	sub	fp, #44
1f1e4     44 01 90 5D |  if_ne	jmp	#LR__3529
1f1e8     04 4E 05 F1 | 	add	fp, #4
1f1ec     A7 FA 01 FB | 	rdlong	result1, fp
1f1f0     04 4E 85 F1 | 	sub	fp, #4
1f1f4     14 FA 05 F1 | 	add	result1, #20
1f1f8     FD 14 0A FB | 	rdlong	arg02, result1 wz
1f1fc     44 00 90 5D |  if_ne	jmp	#LR__3524
1f200     04 4E 05 F1 | 	add	fp, #4
1f204     A7 14 02 FB | 	rdlong	arg02, fp
1f208     08 14 06 F1 | 	add	arg02, #8
1f20c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
1f210     18 4E 05 F1 | 	add	fp, #24
1f214     A7 14 62 FC | 	wrlong	arg02, fp
1f218     1C 4E 85 F1 | 	sub	fp, #28
1f21c     4C 00 90 5D |  if_ne	jmp	#LR__3525
1f220     04 4E 05 F1 | 	add	fp, #4
1f224     A7 12 02 FB | 	rdlong	arg01, fp
1f228     04 4E 85 F1 | 	sub	fp, #4
1f22c     00 14 06 F6 | 	mov	arg02, #0
1f230     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
1f234     1C 4E 05 F1 | 	add	fp, #28
1f238     A7 FA 61 FC | 	wrlong	result1, fp
1f23c     1C 4E 85 F1 | 	sub	fp, #28
1f240     28 00 90 FD | 	jmp	#LR__3525
1f244                 | LR__3524
1f244     04 4E 05 F1 | 	add	fp, #4
1f248     A7 18 02 FB | 	rdlong	arg04, fp
1f24c     0C 13 02 F6 | 	mov	arg01, arg04
1f250     04 4E 85 F1 | 	sub	fp, #4
1f254     18 18 06 F1 | 	add	arg04, #24
1f258     0C 15 02 FB | 	rdlong	arg02, arg04
1f25c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
1f260     1C 4E 05 F1 | 	add	fp, #28
1f264     A7 FA 61 FC | 	wrlong	result1, fp
1f268     1C 4E 85 F1 | 	sub	fp, #28
1f26c                 | LR__3525
1f26c     1C 4E 05 F1 | 	add	fp, #28
1f270     A7 FA 09 FB | 	rdlong	result1, fp wz
1f274     1C 4E 85 F1 | 	sub	fp, #28
1f278     A0 05 90 AD |  if_e	jmp	#LR__3542
1f27c     1C 4E 05 F1 | 	add	fp, #28
1f280     A7 FA 01 FB | 	rdlong	result1, fp
1f284     1C 4E 85 F1 | 	sub	fp, #28
1f288     01 FA 0D F2 | 	cmp	result1, #1 wz
1f28c     1C 00 90 5D |  if_ne	jmp	#LR__3526
1f290     04 4E 05 F1 | 	add	fp, #4
1f294     A7 FA 01 FB | 	rdlong	result1, fp
1f298     04 4E 85 F1 | 	sub	fp, #4
1f29c     11 FA 05 F1 | 	add	result1, #17
1f2a0     FD 04 48 FC | 	wrbyte	#2, result1
1f2a4     02 FA 05 F6 | 	mov	result1, #2
1f2a8     98 05 90 FD | 	jmp	#LR__3543
1f2ac                 | LR__3526
1f2ac     1C 4E 05 F1 | 	add	fp, #28
1f2b0     A7 FA 01 FB | 	rdlong	result1, fp
1f2b4     1C 4E 85 F1 | 	sub	fp, #28
1f2b8     FF FF 7F FF 
1f2bc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1f2c0     1C 00 90 5D |  if_ne	jmp	#LR__3527
1f2c4     04 4E 05 F1 | 	add	fp, #4
1f2c8     A7 FA 01 FB | 	rdlong	result1, fp
1f2cc     04 4E 85 F1 | 	sub	fp, #4
1f2d0     11 FA 05 F1 | 	add	result1, #17
1f2d4     FD 02 48 FC | 	wrbyte	#1, result1
1f2d8     01 FA 05 F6 | 	mov	result1, #1
1f2dc     64 05 90 FD | 	jmp	#LR__3543
1f2e0                 | LR__3527
1f2e0     04 4E 05 F1 | 	add	fp, #4
1f2e4     A7 FA 01 FB | 	rdlong	result1, fp
1f2e8     18 4E 05 F1 | 	add	fp, #24
1f2ec     A7 18 02 FB | 	rdlong	arg04, fp
1f2f0     18 FA 05 F1 | 	add	result1, #24
1f2f4     FD 18 62 FC | 	wrlong	arg04, result1
1f2f8     18 4E 85 F1 | 	sub	fp, #24
1f2fc     A7 FA 01 FB | 	rdlong	result1, fp
1f300     04 4E 85 F1 | 	sub	fp, #4
1f304     08 FA 05 F1 | 	add	result1, #8
1f308     FD FA 09 FB | 	rdlong	result1, result1 wz
1f30c     1C 00 90 5D |  if_ne	jmp	#LR__3528
1f310     04 4E 05 F1 | 	add	fp, #4
1f314     A7 18 02 FB | 	rdlong	arg04, fp
1f318     18 4E 05 F1 | 	add	fp, #24
1f31c     A7 FA 01 FB | 	rdlong	result1, fp
1f320     1C 4E 85 F1 | 	sub	fp, #28
1f324     08 18 06 F1 | 	add	arg04, #8
1f328     0C FB 61 FC | 	wrlong	result1, arg04
1f32c                 | LR__3528
1f32c                 | LR__3529
1f32c     04 4E 05 F1 | 	add	fp, #4
1f330     A7 18 02 FB | 	rdlong	arg04, fp
1f334     04 4E 85 F1 | 	sub	fp, #4
1f338     10 18 06 F1 | 	add	arg04, #16
1f33c     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f340     80 18 CE F7 | 	test	arg04, #128 wz
1f344     7C 00 90 AD |  if_e	jmp	#LR__3531
1f348     18 4E 05 F1 | 	add	fp, #24
1f34c     A7 18 02 FB | 	rdlong	arg04, fp
1f350     01 18 06 F1 | 	add	arg04, #1
1f354     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f358     14 4E 85 F1 | 	sub	fp, #20
1f35c     A7 18 02 FB | 	rdlong	arg04, fp
1f360     0C 15 02 F6 | 	mov	arg02, arg04
1f364     28 14 06 F1 | 	add	arg02, #40
1f368     04 4E 85 F1 | 	sub	fp, #4
1f36c     1C 18 06 F1 | 	add	arg04, #28
1f370     0C 17 02 FB | 	rdlong	arg03, arg04
1f374     01 18 06 F6 | 	mov	arg04, #1
1f378     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
1f37c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f380     1C 00 90 AD |  if_e	jmp	#LR__3530
1f384     04 4E 05 F1 | 	add	fp, #4
1f388     A7 FA 01 FB | 	rdlong	result1, fp
1f38c     04 4E 85 F1 | 	sub	fp, #4
1f390     11 FA 05 F1 | 	add	result1, #17
1f394     FD 02 48 FC | 	wrbyte	#1, result1
1f398     01 FA 05 F6 | 	mov	result1, #1
1f39c     A4 04 90 FD | 	jmp	#LR__3543
1f3a0                 | LR__3530
1f3a0     04 4E 05 F1 | 	add	fp, #4
1f3a4     A7 18 02 FB | 	rdlong	arg04, fp
1f3a8     0C FB 01 F6 | 	mov	result1, arg04
1f3ac     04 4E 85 F1 | 	sub	fp, #4
1f3b0     10 18 06 F1 | 	add	arg04, #16
1f3b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f3b8     7F 18 06 F5 | 	and	arg04, #127
1f3bc     10 FA 05 F1 | 	add	result1, #16
1f3c0     FD 18 42 FC | 	wrbyte	arg04, result1
1f3c4                 | LR__3531
1f3c4     18 4E 05 F1 | 	add	fp, #24
1f3c8     A7 12 02 FB | 	rdlong	arg01, fp
1f3cc     14 4E 85 F1 | 	sub	fp, #20
1f3d0     A7 14 02 FB | 	rdlong	arg02, fp
1f3d4     04 4E 85 F1 | 	sub	fp, #4
1f3d8     18 14 06 F1 | 	add	arg02, #24
1f3dc     0A 15 02 FB | 	rdlong	arg02, arg02
1f3e0     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
1f3e4     20 4E 05 F1 | 	add	fp, #32
1f3e8     A7 FA 61 FC | 	wrlong	result1, fp
1f3ec     20 4E 85 F1 | 	sub	fp, #32
1f3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f3f4     1C 00 90 5D |  if_ne	jmp	#LR__3532
1f3f8     04 4E 05 F1 | 	add	fp, #4
1f3fc     A7 FA 01 FB | 	rdlong	result1, fp
1f400     04 4E 85 F1 | 	sub	fp, #4
1f404     11 FA 05 F1 | 	add	result1, #17
1f408     FD 04 48 FC | 	wrbyte	#2, result1
1f40c     02 FA 05 F6 | 	mov	result1, #2
1f410     30 04 90 FD | 	jmp	#LR__3543
1f414                 | LR__3532
1f414     20 4E 05 F1 | 	add	fp, #32
1f418     A7 FA 01 FB | 	rdlong	result1, fp
1f41c     0C 4E 05 F1 | 	add	fp, #12
1f420     A7 1E 02 FB | 	rdlong	local01, fp
1f424     0F FB 01 F1 | 	add	result1, local01
1f428     0C 4E 85 F1 | 	sub	fp, #12
1f42c     A7 FA 61 FC | 	wrlong	result1, fp
1f430     14 4E 85 F1 | 	sub	fp, #20
1f434     A7 FA 01 FB | 	rdlong	result1, fp
1f438     09 FA 45 F0 | 	shr	result1, #9
1f43c     1C 4E 05 F1 | 	add	fp, #28
1f440     A7 FA 61 FC | 	wrlong	result1, fp
1f444     28 4E 85 F1 | 	sub	fp, #40
1f448     01 FA 15 F2 | 	cmp	result1, #1 wc
1f44c     60 01 90 CD |  if_b	jmp	#LR__3536
1f450     2C 4E 05 F1 | 	add	fp, #44
1f454     A7 FA 01 FB | 	rdlong	result1, fp
1f458     04 4E 85 F1 | 	sub	fp, #4
1f45c     A7 18 02 FB | 	rdlong	arg04, fp
1f460     0C FB 01 F1 | 	add	result1, arg04
1f464     10 4E 85 F1 | 	sub	fp, #16
1f468     A7 18 02 FB | 	rdlong	arg04, fp
1f46c     18 4E 85 F1 | 	sub	fp, #24
1f470     0A 18 06 F1 | 	add	arg04, #10
1f474     0C 19 E2 FA | 	rdword	arg04, arg04
1f478     0C FB 19 F2 | 	cmp	result1, arg04 wcz
1f47c     28 00 90 ED |  if_be	jmp	#LR__3533
1f480     18 4E 05 F1 | 	add	fp, #24
1f484     A7 FA 01 FB | 	rdlong	result1, fp
1f488     0A FA 05 F1 | 	add	result1, #10
1f48c     FD FA E1 FA | 	rdword	result1, result1
1f490     14 4E 05 F1 | 	add	fp, #20
1f494     A7 18 02 FB | 	rdlong	arg04, fp
1f498     0C FB 81 F1 | 	sub	result1, arg04
1f49c     04 4E 85 F1 | 	sub	fp, #4
1f4a0     A7 FA 61 FC | 	wrlong	result1, fp
1f4a4     28 4E 85 F1 | 	sub	fp, #40
1f4a8                 | LR__3533
1f4a8     18 4E 05 F1 | 	add	fp, #24
1f4ac     A7 18 02 FB | 	rdlong	arg04, fp
1f4b0     01 18 06 F1 | 	add	arg04, #1
1f4b4     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f4b8     18 4E 05 F1 | 	add	fp, #24
1f4bc     A7 14 02 FB | 	rdlong	arg02, fp
1f4c0     10 4E 85 F1 | 	sub	fp, #16
1f4c4     A7 16 02 FB | 	rdlong	arg03, fp
1f4c8     08 4E 05 F1 | 	add	fp, #8
1f4cc     A7 18 02 FB | 	rdlong	arg04, fp
1f4d0     28 4E 85 F1 | 	sub	fp, #40
1f4d4     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
1f4d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f4dc     1C 00 90 AD |  if_e	jmp	#LR__3534
1f4e0     04 4E 05 F1 | 	add	fp, #4
1f4e4     A7 1E 02 FB | 	rdlong	local01, fp
1f4e8     04 4E 85 F1 | 	sub	fp, #4
1f4ec     11 1E 06 F1 | 	add	local01, #17
1f4f0     0F 03 48 FC | 	wrbyte	#1, local01
1f4f4     01 FA 05 F6 | 	mov	result1, #1
1f4f8     48 03 90 FD | 	jmp	#LR__3543
1f4fc                 | LR__3534
1f4fc     04 4E 05 F1 | 	add	fp, #4
1f500     A7 FA 01 FB | 	rdlong	result1, fp
1f504     1C FA 05 F1 | 	add	result1, #28
1f508     FD FA 01 FB | 	rdlong	result1, result1
1f50c     1C 4E 05 F1 | 	add	fp, #28
1f510     A7 20 02 FB | 	rdlong	local02, fp
1f514     10 FB 81 F1 | 	sub	result1, local02
1f518     08 4E 05 F1 | 	add	fp, #8
1f51c     A7 18 02 FB | 	rdlong	arg04, fp
1f520     28 4E 85 F1 | 	sub	fp, #40
1f524     0C FB 11 F2 | 	cmp	result1, arg04 wc
1f528     68 00 90 3D |  if_ae	jmp	#LR__3535
1f52c     04 4E 05 F1 | 	add	fp, #4
1f530     A7 12 02 FB | 	rdlong	arg01, fp
1f534     28 12 06 F1 | 	add	arg01, #40
1f538     2C 4E 05 F1 | 	add	fp, #44
1f53c     A7 14 02 FB | 	rdlong	arg02, fp
1f540     2C 4E 85 F1 | 	sub	fp, #44
1f544     A7 FA 01 FB | 	rdlong	result1, fp
1f548     1C FA 05 F1 | 	add	result1, #28
1f54c     FD 22 02 FB | 	rdlong	local03, result1
1f550     1C 4E 05 F1 | 	add	fp, #28
1f554     A7 18 02 FB | 	rdlong	arg04, fp
1f558     20 4E 85 F1 | 	sub	fp, #32
1f55c     0C 23 82 F1 | 	sub	local03, arg04
1f560     09 22 66 F0 | 	shl	local03, #9
1f564     11 15 02 F1 | 	add	arg02, local03
1f568     09 16 C6 F9 | 	decod	arg03, #9
1f56c     30 44 BF FD | 	call	#__system____builtin_memmove
1f570     04 4E 05 F1 | 	add	fp, #4
1f574     A7 18 02 FB | 	rdlong	arg04, fp
1f578     0C FB 01 F6 | 	mov	result1, arg04
1f57c     04 4E 85 F1 | 	sub	fp, #4
1f580     10 18 06 F1 | 	add	arg04, #16
1f584     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f588     7F 18 06 F5 | 	and	arg04, #127
1f58c     10 FA 05 F1 | 	add	result1, #16
1f590     FD 18 42 FC | 	wrbyte	arg04, result1
1f594                 | LR__3535
1f594     28 4E 05 F1 | 	add	fp, #40
1f598     A7 FA 01 FB | 	rdlong	result1, fp
1f59c     09 FA 65 F0 | 	shl	result1, #9
1f5a0     04 4E 85 F1 | 	sub	fp, #4
1f5a4     A7 FA 61 FC | 	wrlong	result1, fp
1f5a8     24 4E 85 F1 | 	sub	fp, #36
1f5ac                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
1f5ac                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
1f5ac                 | ' 				}
1f5ac                 | ' 
1f5ac                 | ' 
1f5ac                 | ' 				wcnt =  ((UINT) 512 )  * cc;
1f5ac                 | ' 				continue;
1f5ac     74 01 90 FD | 	jmp	#LR__3539
1f5b0                 | LR__3536
1f5b0     04 4E 05 F1 | 	add	fp, #4
1f5b4     A7 20 02 FB | 	rdlong	local02, fp
1f5b8     1C 20 06 F1 | 	add	local02, #28
1f5bc     10 FB 01 FB | 	rdlong	result1, local02
1f5c0     1C 4E 05 F1 | 	add	fp, #28
1f5c4     A7 20 02 FB | 	rdlong	local02, fp
1f5c8     20 4E 85 F1 | 	sub	fp, #32
1f5cc     10 FB 09 F2 | 	cmp	result1, local02 wz
1f5d0     90 00 90 AD |  if_e	jmp	#LR__3537
1f5d4     04 4E 05 F1 | 	add	fp, #4
1f5d8     A7 FA 01 FB | 	rdlong	result1, fp
1f5dc     FD 22 02 F6 | 	mov	local03, result1
1f5e0     04 4E 85 F1 | 	sub	fp, #4
1f5e4     14 22 06 F1 | 	add	local03, #20
1f5e8     11 23 02 FB | 	rdlong	local03, local03
1f5ec     0C FA 05 F1 | 	add	result1, #12
1f5f0     FD 24 02 FB | 	rdlong	local04, result1
1f5f4     12 27 02 F6 | 	mov	local05, local04
1f5f8     13 23 12 F2 | 	cmp	local03, local05 wc
1f5fc     64 00 90 3D |  if_ae	jmp	#LR__3537
1f600     18 4E 05 F1 | 	add	fp, #24
1f604     A7 18 02 FB | 	rdlong	arg04, fp
1f608     01 18 06 F1 | 	add	arg04, #1
1f60c     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f610     14 4E 85 F1 | 	sub	fp, #20
1f614     A7 28 02 FB | 	rdlong	local06, fp
1f618     28 28 06 F1 | 	add	local06, #40
1f61c     14 2B 02 F6 | 	mov	local07, local06
1f620     1C 4E 05 F1 | 	add	fp, #28
1f624     A7 2C 02 FB | 	rdlong	local08, fp
1f628     20 4E 85 F1 | 	sub	fp, #32
1f62c     01 2E 06 F6 | 	mov	local09, #1
1f630     15 15 02 F6 | 	mov	arg02, local07
1f634     16 17 02 F6 | 	mov	arg03, local08
1f638     01 18 06 F6 | 	mov	arg04, #1
1f63c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
1f640     FD 30 0A F6 | 	mov	local10, result1 wz
1f644     1C 00 90 AD |  if_e	jmp	#LR__3537
1f648     04 4E 05 F1 | 	add	fp, #4
1f64c     A7 30 02 FB | 	rdlong	local10, fp
1f650     04 4E 85 F1 | 	sub	fp, #4
1f654     11 30 06 F1 | 	add	local10, #17
1f658     18 03 48 FC | 	wrbyte	#1, local10
1f65c                 | ' 				fp->fptr < fp->obj.objsize &&
1f65c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
1f65c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
1f65c     01 FA 05 F6 | 	mov	result1, #1
1f660     E0 01 90 FD | 	jmp	#LR__3543
1f664                 | LR__3537
1f664     04 4E 05 F1 | 	add	fp, #4
1f668     A7 18 02 FB | 	rdlong	arg04, fp
1f66c     1C 4E 05 F1 | 	add	fp, #28
1f670     A7 FA 01 FB | 	rdlong	result1, fp
1f674     20 4E 85 F1 | 	sub	fp, #32
1f678     1C 18 06 F1 | 	add	arg04, #28
1f67c     0C FB 61 FC | 	wrlong	result1, arg04
1f680                 | LR__3538
1f680     04 4E 05 F1 | 	add	fp, #4
1f684     A7 FA 01 FB | 	rdlong	result1, fp
1f688     14 FA 05 F1 | 	add	result1, #20
1f68c     FD FA 01 FB | 	rdlong	result1, result1
1f690     FF FB 05 F5 | 	and	result1, #511
1f694     09 32 C6 F9 | 	decod	local11, #9
1f698     FD 32 82 F1 | 	sub	local11, result1
1f69c     20 4E 05 F1 | 	add	fp, #32
1f6a0     A7 32 62 FC | 	wrlong	local11, fp
1f6a4     18 4E 85 F1 | 	sub	fp, #24
1f6a8     A7 FA 01 FB | 	rdlong	result1, fp
1f6ac     0C 4E 85 F1 | 	sub	fp, #12
1f6b0     FD 32 1A F2 | 	cmp	local11, result1 wcz
1f6b4     0C 4E 05 11 |  if_a	add	fp, #12
1f6b8     A7 32 02 1B |  if_a	rdlong	local11, fp
1f6bc     18 4E 05 11 |  if_a	add	fp, #24
1f6c0     A7 32 62 1C |  if_a	wrlong	local11, fp
1f6c4     24 4E 85 11 |  if_a	sub	fp, #36
1f6c8     04 4E 05 F1 | 	add	fp, #4
1f6cc     A7 32 02 FB | 	rdlong	local11, fp
1f6d0     19 13 02 F6 | 	mov	arg01, local11
1f6d4     28 12 06 F1 | 	add	arg01, #40
1f6d8     14 32 06 F1 | 	add	local11, #20
1f6dc     19 33 02 FB | 	rdlong	local11, local11
1f6e0     FF 33 06 F5 | 	and	local11, #511
1f6e4     19 13 02 F1 | 	add	arg01, local11
1f6e8     2C 4E 05 F1 | 	add	fp, #44
1f6ec     A7 14 02 FB | 	rdlong	arg02, fp
1f6f0     0C 4E 85 F1 | 	sub	fp, #12
1f6f4     A7 16 02 FB | 	rdlong	arg03, fp
1f6f8     24 4E 85 F1 | 	sub	fp, #36
1f6fc     A0 42 BF FD | 	call	#__system____builtin_memmove
1f700     04 4E 05 F1 | 	add	fp, #4
1f704     A7 FA 01 FB | 	rdlong	result1, fp
1f708     FD 32 02 F6 | 	mov	local11, result1
1f70c     04 4E 85 F1 | 	sub	fp, #4
1f710     10 FA 05 F1 | 	add	result1, #16
1f714     FD FA C1 FA | 	rdbyte	result1, result1
1f718     80 FA 45 F5 | 	or	result1, #128
1f71c     10 32 06 F1 | 	add	local11, #16
1f720     19 FB 41 FC | 	wrbyte	result1, local11
1f724                 | LR__3539
1f724     0C 4E 05 F1 | 	add	fp, #12
1f728     A7 32 02 FB | 	rdlong	local11, fp
1f72c     18 4E 05 F1 | 	add	fp, #24
1f730     A7 FA 01 FB | 	rdlong	result1, fp
1f734     FD 32 82 F1 | 	sub	local11, result1
1f738     18 4E 85 F1 | 	sub	fp, #24
1f73c     A7 32 62 FC | 	wrlong	local11, fp
1f740     04 4E 05 F1 | 	add	fp, #4
1f744     A7 34 02 FB | 	rdlong	local12, fp
1f748     1A 33 02 FB | 	rdlong	local11, local12
1f74c     14 4E 05 F1 | 	add	fp, #20
1f750     A7 36 02 FB | 	rdlong	local13, fp
1f754     1B 33 02 F1 | 	add	local11, local13
1f758     1A 33 62 FC | 	wrlong	local11, local12
1f75c     0C 4E 05 F1 | 	add	fp, #12
1f760     A7 32 02 FB | 	rdlong	local11, fp
1f764     0C 4E 85 F1 | 	sub	fp, #12
1f768     A7 38 02 FB | 	rdlong	local14, fp
1f76c     1C 33 02 F1 | 	add	local11, local14
1f770     0C 4E 05 F1 | 	add	fp, #12
1f774     A7 32 62 FC | 	wrlong	local11, fp
1f778     2C 4E 85 F1 | 	sub	fp, #44
1f77c     A7 3A 02 FB | 	rdlong	local15, fp
1f780     1D 33 02 F6 | 	mov	local11, local15
1f784     14 3A 06 F1 | 	add	local15, #20
1f788     1D 3B 02 FB | 	rdlong	local15, local15
1f78c     20 4E 05 F1 | 	add	fp, #32
1f790     A7 3C 02 FB | 	rdlong	local16, fp
1f794     1E 3B 02 F1 | 	add	local15, local16
1f798     14 32 06 F1 | 	add	local11, #20
1f79c     19 3B 62 FC | 	wrlong	local15, local11
1f7a0     20 4E 85 F1 | 	sub	fp, #32
1f7a4     A7 3E 02 FB | 	rdlong	local17, fp
1f7a8     1F 33 02 F6 | 	mov	local11, local17
1f7ac     1F 41 02 F6 | 	mov	local18, local17
1f7b0     04 4E 85 F1 | 	sub	fp, #4
1f7b4     14 3E 06 F1 | 	add	local17, #20
1f7b8     1F 43 02 FB | 	rdlong	local19, local17
1f7bc     0C 40 06 F1 | 	add	local18, #12
1f7c0     20 45 02 FB | 	rdlong	local20, local18
1f7c4     22 43 1A F2 | 	cmp	local19, local20 wcz
1f7c8     24 00 90 ED |  if_be	jmp	#LR__3540
1f7cc     04 4E 05 F1 | 	add	fp, #4
1f7d0     A7 26 02 FB | 	rdlong	local05, fp
1f7d4     04 4E 85 F1 | 	sub	fp, #4
1f7d8     13 23 02 F6 | 	mov	local03, local05
1f7dc     14 22 06 F1 | 	add	local03, #20
1f7e0     11 25 02 FB | 	rdlong	local04, local03
1f7e4     14 22 86 F1 | 	sub	local03, #20
1f7e8     12 47 02 F6 | 	mov	local21, local04
1f7ec     20 00 90 FD | 	jmp	#LR__3541
1f7f0                 | LR__3540
1f7f0     04 4E 05 F1 | 	add	fp, #4
1f7f4     A7 2A 02 FB | 	rdlong	local07, fp
1f7f8     04 4E 85 F1 | 	sub	fp, #4
1f7fc     15 31 02 F6 | 	mov	local10, local07
1f800     0C 30 06 F1 | 	add	local10, #12
1f804     18 2D 02 FB | 	rdlong	local08, local10
1f808     0C 30 86 F1 | 	sub	local10, #12
1f80c     16 47 02 F6 | 	mov	local21, local08
1f810                 | LR__3541
1f810     0C 32 06 F1 | 	add	local11, #12
1f814     19 47 62 FC | 	wrlong	local21, local11
1f818     5C F9 9F FD | 	jmp	#LR__3523
1f81c                 | LR__3542
1f81c     04 4E 05 F1 | 	add	fp, #4
1f820     A7 34 02 FB | 	rdlong	local12, fp
1f824     1A 1F 02 F6 | 	mov	local01, local12
1f828     04 4E 85 F1 | 	sub	fp, #4
1f82c     10 34 06 F1 | 	add	local12, #16
1f830     1A 33 C2 FA | 	rdbyte	local11, local12
1f834     40 32 46 F5 | 	or	local11, #64
1f838     10 1E 06 F1 | 	add	local01, #16
1f83c     0F 33 42 FC | 	wrbyte	local11, local01
1f840                 | ' 
1f840                 | ' 
1f840                 | ' 
1f840                 | ' 
1f840                 | ' 
1f840                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
1f840                 | ' 		fp->flag |=  0x80 ;
1f840                 | ' 
1f840                 | ' 	}
1f840                 | ' 
1f840                 | ' 	fp->flag |=  0x40 ;
1f840                 | ' 
1f840                 | ' 	return FR_OK ;
1f840     00 FA 05 F6 | 	mov	result1, #0
1f844                 | LR__3543
1f844     A7 F0 03 F6 | 	mov	ptra, fp
1f848     B2 00 A0 FD | 	call	#popregs_
1f84c                 | _fatfs_cc_f_write_ret
1f84c     2D 00 64 FD | 	ret
1f850                 | 
1f850                 | _fatfs_cc_f_sync
1f850     00 4A 05 F6 | 	mov	COUNT_, #0
1f854     A8 00 A0 FD | 	call	#pushregs_
1f858     18 F0 07 F1 | 	add	ptra, #24
1f85c     04 4E 05 F1 | 	add	fp, #4
1f860     A7 12 62 FC | 	wrlong	arg01, fp
1f864     08 4E 05 F1 | 	add	fp, #8
1f868     A7 14 02 F6 | 	mov	arg02, fp
1f86c     0C 4E 85 F1 | 	sub	fp, #12
1f870     D0 E8 BF FD | 	call	#_fatfs_cc_validate
1f874     08 4E 05 F1 | 	add	fp, #8
1f878     A7 FA 61 FC | 	wrlong	result1, fp
1f87c     08 4E 85 F1 | 	sub	fp, #8
1f880     00 FA 0D F2 | 	cmp	result1, #0 wz
1f884     C0 01 90 5D |  if_ne	jmp	#LR__3553
1f888     04 4E 05 F1 | 	add	fp, #4
1f88c     A7 18 02 FB | 	rdlong	arg04, fp
1f890     04 4E 85 F1 | 	sub	fp, #4
1f894     10 18 06 F1 | 	add	arg04, #16
1f898     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f89c     40 18 CE F7 | 	test	arg04, #64 wz
1f8a0     A4 01 90 AD |  if_e	jmp	#LR__3552
1f8a4     04 4E 05 F1 | 	add	fp, #4
1f8a8     A7 18 02 FB | 	rdlong	arg04, fp
1f8ac     04 4E 85 F1 | 	sub	fp, #4
1f8b0     10 18 06 F1 | 	add	arg04, #16
1f8b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f8b8     80 18 CE F7 | 	test	arg04, #128 wz
1f8bc     64 00 90 AD |  if_e	jmp	#LR__3550
1f8c0     0C 4E 05 F1 | 	add	fp, #12
1f8c4     A7 18 02 FB | 	rdlong	arg04, fp
1f8c8     01 18 06 F1 | 	add	arg04, #1
1f8cc     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f8d0     08 4E 85 F1 | 	sub	fp, #8
1f8d4     A7 18 02 FB | 	rdlong	arg04, fp
1f8d8     0C 15 02 F6 | 	mov	arg02, arg04
1f8dc     28 14 06 F1 | 	add	arg02, #40
1f8e0     04 4E 85 F1 | 	sub	fp, #4
1f8e4     1C 18 06 F1 | 	add	arg04, #28
1f8e8     0C 17 02 FB | 	rdlong	arg03, arg04
1f8ec     01 18 06 F6 | 	mov	arg04, #1
1f8f0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
1f8f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f8f8     01 FA 05 56 |  if_ne	mov	result1, #1
1f8fc     54 01 90 5D |  if_ne	jmp	#LR__3554
1f900     04 4E 05 F1 | 	add	fp, #4
1f904     A7 18 02 FB | 	rdlong	arg04, fp
1f908     0C 17 02 F6 | 	mov	arg03, arg04
1f90c     04 4E 85 F1 | 	sub	fp, #4
1f910     10 18 06 F1 | 	add	arg04, #16
1f914     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f918     7F 18 06 F5 | 	and	arg04, #127
1f91c     10 16 06 F1 | 	add	arg03, #16
1f920     0B 19 42 FC | 	wrbyte	arg04, arg03
1f924                 | LR__3550
1f924     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
1f928     10 4E 05 F1 | 	add	fp, #16
1f92c     A7 FA 61 FC | 	wrlong	result1, fp
1f930     04 4E 85 F1 | 	sub	fp, #4
1f934     A7 12 02 FB | 	rdlong	arg01, fp
1f938     08 4E 85 F1 | 	sub	fp, #8
1f93c     A7 18 02 FB | 	rdlong	arg04, fp
1f940     04 4E 85 F1 | 	sub	fp, #4
1f944     20 18 06 F1 | 	add	arg04, #32
1f948     0C 15 02 FB | 	rdlong	arg02, arg04
1f94c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
1f950     08 4E 05 F1 | 	add	fp, #8
1f954     A7 FA 61 FC | 	wrlong	result1, fp
1f958     08 4E 85 F1 | 	sub	fp, #8
1f95c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f960     E4 00 90 5D |  if_ne	jmp	#LR__3551
1f964     04 4E 05 F1 | 	add	fp, #4
1f968     A7 18 02 FB | 	rdlong	arg04, fp
1f96c     24 18 06 F1 | 	add	arg04, #36
1f970     0C 19 02 FB | 	rdlong	arg04, arg04
1f974     10 4E 05 F1 | 	add	fp, #16
1f978     A7 18 62 FC | 	wrlong	arg04, fp
1f97c     0C 17 02 F6 | 	mov	arg03, arg04
1f980     0B 16 06 F1 | 	add	arg03, #11
1f984     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f988     20 16 46 F5 | 	or	arg03, #32
1f98c     0B 18 06 F1 | 	add	arg04, #11
1f990     0C 17 42 FC | 	wrbyte	arg03, arg04
1f994     10 4E 85 F1 | 	sub	fp, #16
1f998     A7 18 02 FB | 	rdlong	arg04, fp
1f99c     0C 13 02 FB | 	rdlong	arg01, arg04
1f9a0     10 4E 05 F1 | 	add	fp, #16
1f9a4     A7 14 02 FB | 	rdlong	arg02, fp
1f9a8     14 4E 85 F1 | 	sub	fp, #20
1f9ac     08 18 06 F1 | 	add	arg04, #8
1f9b0     0C 17 02 FB | 	rdlong	arg03, arg04
1f9b4     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
1f9b8     14 4E 05 F1 | 	add	fp, #20
1f9bc     A7 12 02 FB | 	rdlong	arg01, fp
1f9c0     1C 12 06 F1 | 	add	arg01, #28
1f9c4     10 4E 85 F1 | 	sub	fp, #16
1f9c8     A7 18 02 FB | 	rdlong	arg04, fp
1f9cc     0C 18 06 F1 | 	add	arg04, #12
1f9d0     0C 15 02 FB | 	rdlong	arg02, arg04
1f9d4     09 15 62 FC | 	wrlong	arg02, arg01
1f9d8     10 4E 05 F1 | 	add	fp, #16
1f9dc     A7 12 02 FB | 	rdlong	arg01, fp
1f9e0     16 12 06 F1 | 	add	arg01, #22
1f9e4     04 4E 85 F1 | 	sub	fp, #4
1f9e8     A7 14 02 FB | 	rdlong	arg02, fp
1f9ec     09 15 62 FC | 	wrlong	arg02, arg01
1f9f0     04 4E 05 F1 | 	add	fp, #4
1f9f4     A7 12 02 FB | 	rdlong	arg01, fp
1f9f8     12 12 06 F1 | 	add	arg01, #18
1f9fc     09 01 58 FC | 	wrword	#0, arg01
1fa00     08 4E 85 F1 | 	sub	fp, #8
1fa04     A7 18 02 FB | 	rdlong	arg04, fp
1fa08     03 18 06 F1 | 	add	arg04, #3
1fa0c     0C 03 48 FC | 	wrbyte	#1, arg04
1fa10     A7 12 02 FB | 	rdlong	arg01, fp
1fa14     0C 4E 85 F1 | 	sub	fp, #12
1fa18     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
1fa1c     08 4E 05 F1 | 	add	fp, #8
1fa20     A7 FA 61 FC | 	wrlong	result1, fp
1fa24     04 4E 85 F1 | 	sub	fp, #4
1fa28     A7 18 02 FB | 	rdlong	arg04, fp
1fa2c     0C 17 02 F6 | 	mov	arg03, arg04
1fa30     04 4E 85 F1 | 	sub	fp, #4
1fa34     10 18 06 F1 | 	add	arg04, #16
1fa38     0C 19 C2 FA | 	rdbyte	arg04, arg04
1fa3c     BF 18 06 F5 | 	and	arg04, #191
1fa40     10 16 06 F1 | 	add	arg03, #16
1fa44     0B 19 42 FC | 	wrbyte	arg04, arg03
1fa48                 | LR__3551
1fa48                 | LR__3552
1fa48                 | LR__3553
1fa48                 | ' 					dir = fp->dir_ptr;
1fa48                 | ' 					dir[ 11 ] |=  0x20 ;
1fa48                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
1fa48                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
1fa48                 | ' 					st_dword(dir +  22 , tm);
1fa48                 | ' 					st_word(dir +  18 , 0);
1fa48                 | ' 					fs->wflag = 1;
1fa48                 | ' 					res = sync_fs(fs);
1fa48                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
1fa48                 | ' 				}
1fa48                 | ' 			}
1fa48                 | ' 		}
1fa48                 | ' 	}
1fa48                 | ' 
1fa48                 | ' 	return res ;
1fa48     08 4E 05 F1 | 	add	fp, #8
1fa4c     A7 FA 01 FB | 	rdlong	result1, fp
1fa50     08 4E 85 F1 | 	sub	fp, #8
1fa54                 | LR__3554
1fa54     A7 F0 03 F6 | 	mov	ptra, fp
1fa58     B2 00 A0 FD | 	call	#popregs_
1fa5c                 | _fatfs_cc_f_sync_ret
1fa5c     2D 00 64 FD | 	ret
1fa60                 | 
1fa60                 | _fatfs_cc_f_close
1fa60     01 4A 05 F6 | 	mov	COUNT_, #1
1fa64     A8 00 A0 FD | 	call	#pushregs_
1fa68     10 F0 07 F1 | 	add	ptra, #16
1fa6c     04 4E 05 F1 | 	add	fp, #4
1fa70     A7 12 62 FC | 	wrlong	arg01, fp
1fa74     04 4E 85 F1 | 	sub	fp, #4
1fa78     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
1fa7c     08 4E 05 F1 | 	add	fp, #8
1fa80     A7 FA 61 FC | 	wrlong	result1, fp
1fa84     08 4E 85 F1 | 	sub	fp, #8
1fa88     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa8c     38 00 90 5D |  if_ne	jmp	#LR__3560
1fa90     04 4E 05 F1 | 	add	fp, #4
1fa94     A7 12 02 FB | 	rdlong	arg01, fp
1fa98     08 4E 05 F1 | 	add	fp, #8
1fa9c     A7 14 02 F6 | 	mov	arg02, fp
1faa0     0C 4E 85 F1 | 	sub	fp, #12
1faa4     9C E6 BF FD | 	call	#_fatfs_cc_validate
1faa8     08 4E 05 F1 | 	add	fp, #8
1faac     A7 FA 61 FC | 	wrlong	result1, fp
1fab0     08 4E 85 F1 | 	sub	fp, #8
1fab4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fab8     04 4E 05 A1 |  if_e	add	fp, #4
1fabc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1fac0     04 4E 85 A1 |  if_e	sub	fp, #4
1fac4     0F 01 68 AC |  if_e	wrlong	#0, local01
1fac8                 | LR__3560
1fac8                 | ' 
1fac8                 | ' 
1fac8                 | ' 
1fac8                 | ' 
1fac8                 | ' 			fp->obj.fs = 0;
1fac8                 | ' #line 4192 "ff.c"
1fac8                 | ' 		}
1fac8                 | ' 	}
1fac8                 | ' 	return res;
1fac8     08 4E 05 F1 | 	add	fp, #8
1facc     A7 FA 01 FB | 	rdlong	result1, fp
1fad0     08 4E 85 F1 | 	sub	fp, #8
1fad4     A7 F0 03 F6 | 	mov	ptra, fp
1fad8     B2 00 A0 FD | 	call	#popregs_
1fadc                 | _fatfs_cc_f_close_ret
1fadc     2D 00 64 FD | 	ret
1fae0                 | 
1fae0                 | _fatfs_cc_f_lseek
1fae0     00 4A 05 F6 | 	mov	COUNT_, #0
1fae4     A8 00 A0 FD | 	call	#pushregs_
1fae8     24 F0 07 F1 | 	add	ptra, #36
1faec     04 4E 05 F1 | 	add	fp, #4
1faf0     A7 12 62 FC | 	wrlong	arg01, fp
1faf4     04 4E 05 F1 | 	add	fp, #4
1faf8     A7 14 62 FC | 	wrlong	arg02, fp
1fafc     04 4E 85 F1 | 	sub	fp, #4
1fb00     A7 12 02 FB | 	rdlong	arg01, fp
1fb04     0C 4E 05 F1 | 	add	fp, #12
1fb08     A7 14 02 F6 | 	mov	arg02, fp
1fb0c     10 4E 85 F1 | 	sub	fp, #16
1fb10     30 E6 BF FD | 	call	#_fatfs_cc_validate
1fb14     0C 4E 05 F1 | 	add	fp, #12
1fb18     A7 FA 61 FC | 	wrlong	result1, fp
1fb1c     0C 4E 85 F1 | 	sub	fp, #12
1fb20     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb24     1C 00 90 5D |  if_ne	jmp	#LR__3570
1fb28     04 4E 05 F1 | 	add	fp, #4
1fb2c     A7 18 02 FB | 	rdlong	arg04, fp
1fb30     11 18 06 F1 | 	add	arg04, #17
1fb34     0C 19 C2 FA | 	rdbyte	arg04, arg04
1fb38     08 4E 05 F1 | 	add	fp, #8
1fb3c     A7 18 62 FC | 	wrlong	arg04, fp
1fb40     0C 4E 85 F1 | 	sub	fp, #12
1fb44                 | LR__3570
1fb44     0C 4E 05 F1 | 	add	fp, #12
1fb48     A7 18 0A FB | 	rdlong	arg04, fp wz
1fb4c     0C 4E 85 F1 | 	sub	fp, #12
1fb50     0C 4E 05 51 |  if_ne	add	fp, #12
1fb54     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1fb58     0C 4E 85 51 |  if_ne	sub	fp, #12
1fb5c     40 06 90 5D |  if_ne	jmp	#LR__3593
1fb60     04 4E 05 F1 | 	add	fp, #4
1fb64     A7 18 02 FB | 	rdlong	arg04, fp
1fb68     04 4E 05 F1 | 	add	fp, #4
1fb6c     A7 16 02 FB | 	rdlong	arg03, fp
1fb70     08 4E 85 F1 | 	sub	fp, #8
1fb74     0C 18 06 F1 | 	add	arg04, #12
1fb78     0C 19 02 FB | 	rdlong	arg04, arg04
1fb7c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
1fb80     3C 00 90 ED |  if_be	jmp	#LR__3571
1fb84     04 4E 05 F1 | 	add	fp, #4
1fb88     A7 16 02 FB | 	rdlong	arg03, fp
1fb8c     04 4E 85 F1 | 	sub	fp, #4
1fb90     10 16 06 F1 | 	add	arg03, #16
1fb94     0B 17 C2 FA | 	rdbyte	arg03, arg03
1fb98     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1fb9c     02 16 CE F7 | 	test	arg03, #2 wz
1fba0     1C 00 90 5D |  if_ne	jmp	#LR__3571
1fba4     04 4E 05 F1 | 	add	fp, #4
1fba8     A7 16 02 FB | 	rdlong	arg03, fp
1fbac     0C 16 06 F1 | 	add	arg03, #12
1fbb0     0B 17 02 FB | 	rdlong	arg03, arg03
1fbb4     04 4E 05 F1 | 	add	fp, #4
1fbb8     A7 16 62 FC | 	wrlong	arg03, fp
1fbbc     08 4E 85 F1 | 	sub	fp, #8
1fbc0                 | LR__3571
1fbc0     04 4E 05 F1 | 	add	fp, #4
1fbc4     A7 16 02 FB | 	rdlong	arg03, fp
1fbc8     14 16 06 F1 | 	add	arg03, #20
1fbcc     0B 17 02 FB | 	rdlong	arg03, arg03
1fbd0     1C 4E 05 F1 | 	add	fp, #28
1fbd4     A7 16 62 FC | 	wrlong	arg03, fp
1fbd8     1C 4E 85 F1 | 	sub	fp, #28
1fbdc     A7 16 02 FB | 	rdlong	arg03, fp
1fbe0     18 4E 05 F1 | 	add	fp, #24
1fbe4     A7 00 68 FC | 	wrlong	#0, fp
1fbe8     14 16 06 F1 | 	add	arg03, #20
1fbec     0B 01 68 FC | 	wrlong	#0, arg03
1fbf0     14 4E 85 F1 | 	sub	fp, #20
1fbf4     A7 16 02 FB | 	rdlong	arg03, fp
1fbf8     08 4E 85 F1 | 	sub	fp, #8
1fbfc     01 16 16 F2 | 	cmp	arg03, #1 wc
1fc00     E4 03 90 CD |  if_b	jmp	#LR__3587
1fc04     10 4E 05 F1 | 	add	fp, #16
1fc08     A7 16 02 FB | 	rdlong	arg03, fp
1fc0c     0A 16 06 F1 | 	add	arg03, #10
1fc10     0B 19 E2 FA | 	rdword	arg04, arg03
1fc14     09 18 66 F0 | 	shl	arg04, #9
1fc18     08 4E 05 F1 | 	add	fp, #8
1fc1c     A7 18 62 FC | 	wrlong	arg04, fp
1fc20     08 4E 05 F1 | 	add	fp, #8
1fc24     A7 18 02 FB | 	rdlong	arg04, fp
1fc28     20 4E 85 F1 | 	sub	fp, #32
1fc2c     01 18 16 F2 | 	cmp	arg04, #1 wc
1fc30     AC 00 90 CD |  if_b	jmp	#LR__3572
1fc34     08 4E 05 F1 | 	add	fp, #8
1fc38     A7 18 02 FB | 	rdlong	arg04, fp
1fc3c     01 18 86 F1 | 	sub	arg04, #1
1fc40     10 4E 05 F1 | 	add	fp, #16
1fc44     A7 16 02 FB | 	rdlong	arg03, fp
1fc48     0B 19 12 FD | 	qdiv	arg04, arg03
1fc4c     08 4E 05 F1 | 	add	fp, #8
1fc50     A7 FA 01 FB | 	rdlong	result1, fp
1fc54     01 FA 85 F1 | 	sub	result1, #1
1fc58     18 18 62 FD | 	getqx	arg04
1fc5c     0B FB 11 FD | 	qdiv	result1, arg03
1fc60     20 4E 85 F1 | 	sub	fp, #32
1fc64     18 16 62 FD | 	getqx	arg03
1fc68     0B 19 12 F2 | 	cmp	arg04, arg03 wc
1fc6c     70 00 90 CD |  if_b	jmp	#LR__3572
1fc70     04 4E 05 F1 | 	add	fp, #4
1fc74     A7 16 02 FB | 	rdlong	arg03, fp
1fc78     1C 4E 05 F1 | 	add	fp, #28
1fc7c     A7 FA 01 FB | 	rdlong	result1, fp
1fc80     01 FA 85 F1 | 	sub	result1, #1
1fc84     08 4E 85 F1 | 	sub	fp, #8
1fc88     A7 18 02 FB | 	rdlong	arg04, fp
1fc8c     01 18 86 F1 | 	sub	arg04, #1
1fc90     0C FB 21 F5 | 	andn	result1, arg04
1fc94     14 16 06 F1 | 	add	arg03, #20
1fc98     0B FB 61 FC | 	wrlong	result1, arg03
1fc9c     10 4E 85 F1 | 	sub	fp, #16
1fca0     A7 16 02 FB | 	rdlong	arg03, fp
1fca4     04 4E 85 F1 | 	sub	fp, #4
1fca8     A7 18 02 FB | 	rdlong	arg04, fp
1fcac     14 18 06 F1 | 	add	arg04, #20
1fcb0     0C 19 02 FB | 	rdlong	arg04, arg04
1fcb4     0C 17 82 F1 | 	sub	arg03, arg04
1fcb8     04 4E 05 F1 | 	add	fp, #4
1fcbc     A7 16 62 FC | 	wrlong	arg03, fp
1fcc0     04 4E 85 F1 | 	sub	fp, #4
1fcc4     A7 16 02 FB | 	rdlong	arg03, fp
1fcc8     18 16 06 F1 | 	add	arg03, #24
1fccc     0B 17 02 FB | 	rdlong	arg03, arg03
1fcd0     10 4E 05 F1 | 	add	fp, #16
1fcd4     A7 16 62 FC | 	wrlong	arg03, fp
1fcd8     14 4E 85 F1 | 	sub	fp, #20
1fcdc     D0 00 90 FD | 	jmp	#LR__3576
1fce0                 | LR__3572
1fce0     04 4E 05 F1 | 	add	fp, #4
1fce4     A7 16 02 FB | 	rdlong	arg03, fp
1fce8     08 16 06 F1 | 	add	arg03, #8
1fcec     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1fcf0     10 4E 05 F1 | 	add	fp, #16
1fcf4     A7 16 62 FC | 	wrlong	arg03, fp
1fcf8     14 4E 85 F1 | 	sub	fp, #20
1fcfc     94 00 90 5D |  if_ne	jmp	#LR__3575
1fd00     04 4E 05 F1 | 	add	fp, #4
1fd04     A7 12 02 FB | 	rdlong	arg01, fp
1fd08     04 4E 85 F1 | 	sub	fp, #4
1fd0c     00 14 06 F6 | 	mov	arg02, #0
1fd10     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
1fd14     14 4E 05 F1 | 	add	fp, #20
1fd18     A7 FA 61 FC | 	wrlong	result1, fp
1fd1c     14 4E 85 F1 | 	sub	fp, #20
1fd20     01 FA 0D F2 | 	cmp	result1, #1 wz
1fd24     1C 00 90 5D |  if_ne	jmp	#LR__3573
1fd28     04 4E 05 F1 | 	add	fp, #4
1fd2c     A7 16 02 FB | 	rdlong	arg03, fp
1fd30     04 4E 85 F1 | 	sub	fp, #4
1fd34     11 16 06 F1 | 	add	arg03, #17
1fd38     0B 05 48 FC | 	wrbyte	#2, arg03
1fd3c     02 FA 05 F6 | 	mov	result1, #2
1fd40     5C 04 90 FD | 	jmp	#LR__3593
1fd44                 | LR__3573
1fd44     14 4E 05 F1 | 	add	fp, #20
1fd48     A7 FA 01 FB | 	rdlong	result1, fp
1fd4c     14 4E 85 F1 | 	sub	fp, #20
1fd50     FF FF 7F FF 
1fd54     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fd58     1C 00 90 5D |  if_ne	jmp	#LR__3574
1fd5c     04 4E 05 F1 | 	add	fp, #4
1fd60     A7 16 02 FB | 	rdlong	arg03, fp
1fd64     04 4E 85 F1 | 	sub	fp, #4
1fd68     11 16 06 F1 | 	add	arg03, #17
1fd6c     0B 03 48 FC | 	wrbyte	#1, arg03
1fd70     01 FA 05 F6 | 	mov	result1, #1
1fd74     28 04 90 FD | 	jmp	#LR__3593
1fd78                 | LR__3574
1fd78     04 4E 05 F1 | 	add	fp, #4
1fd7c     A7 16 02 FB | 	rdlong	arg03, fp
1fd80     10 4E 05 F1 | 	add	fp, #16
1fd84     A7 18 02 FB | 	rdlong	arg04, fp
1fd88     14 4E 85 F1 | 	sub	fp, #20
1fd8c     08 16 06 F1 | 	add	arg03, #8
1fd90     0B 19 62 FC | 	wrlong	arg04, arg03
1fd94                 | LR__3575
1fd94     04 4E 05 F1 | 	add	fp, #4
1fd98     A7 16 02 FB | 	rdlong	arg03, fp
1fd9c     10 4E 05 F1 | 	add	fp, #16
1fda0     A7 18 02 FB | 	rdlong	arg04, fp
1fda4     14 4E 85 F1 | 	sub	fp, #20
1fda8     18 16 06 F1 | 	add	arg03, #24
1fdac     0B 19 62 FC | 	wrlong	arg04, arg03
1fdb0                 | LR__3576
1fdb0     14 4E 05 F1 | 	add	fp, #20
1fdb4     A7 16 0A FB | 	rdlong	arg03, fp wz
1fdb8     14 4E 85 F1 | 	sub	fp, #20
1fdbc     28 02 90 AD |  if_e	jmp	#LR__3586
1fdc0                 | ' 				while (ofs > bcs) {
1fdc0                 | LR__3577
1fdc0     08 4E 05 F1 | 	add	fp, #8
1fdc4     A7 18 02 FB | 	rdlong	arg04, fp
1fdc8     10 4E 05 F1 | 	add	fp, #16
1fdcc     A7 16 02 FB | 	rdlong	arg03, fp
1fdd0     18 4E 85 F1 | 	sub	fp, #24
1fdd4     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
1fdd8     68 01 90 ED |  if_be	jmp	#LR__3583
1fddc     08 4E 05 F1 | 	add	fp, #8
1fde0     A7 18 02 FB | 	rdlong	arg04, fp
1fde4     10 4E 05 F1 | 	add	fp, #16
1fde8     A7 16 02 FB | 	rdlong	arg03, fp
1fdec     0B 19 82 F1 | 	sub	arg04, arg03
1fdf0     10 4E 85 F1 | 	sub	fp, #16
1fdf4     A7 18 62 FC | 	wrlong	arg04, fp
1fdf8     04 4E 85 F1 | 	sub	fp, #4
1fdfc     A7 18 02 FB | 	rdlong	arg04, fp
1fe00     0C FB 01 F6 | 	mov	result1, arg04
1fe04     14 18 06 F1 | 	add	arg04, #20
1fe08     0C 19 02 FB | 	rdlong	arg04, arg04
1fe0c     14 4E 05 F1 | 	add	fp, #20
1fe10     A7 16 02 FB | 	rdlong	arg03, fp
1fe14     0B 19 02 F1 | 	add	arg04, arg03
1fe18     14 FA 05 F1 | 	add	result1, #20
1fe1c     FD 18 62 FC | 	wrlong	arg04, result1
1fe20     14 4E 85 F1 | 	sub	fp, #20
1fe24     A7 16 02 FB | 	rdlong	arg03, fp
1fe28     04 4E 85 F1 | 	sub	fp, #4
1fe2c     10 16 06 F1 | 	add	arg03, #16
1fe30     0B 17 C2 FA | 	rdbyte	arg03, arg03
1fe34     02 16 CE F7 | 	test	arg03, #2 wz
1fe38     3C 00 90 AD |  if_e	jmp	#LR__3578
1fe3c     04 4E 05 F1 | 	add	fp, #4
1fe40     A7 12 02 FB | 	rdlong	arg01, fp
1fe44     10 4E 05 F1 | 	add	fp, #16
1fe48     A7 14 02 FB | 	rdlong	arg02, fp
1fe4c     14 4E 85 F1 | 	sub	fp, #20
1fe50     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
1fe54     14 4E 05 F1 | 	add	fp, #20
1fe58     A7 FA 61 FC | 	wrlong	result1, fp
1fe5c     00 FA 4D F2 | 	cmps	result1, #0 wz
1fe60     14 4E 85 F1 | 	sub	fp, #20
1fe64     08 4E 05 A1 |  if_e	add	fp, #8
1fe68     A7 00 68 AC |  if_e	wrlong	#0, fp
1fe6c     08 4E 85 A1 |  if_e	sub	fp, #8
1fe70                 | ' 							ofs = 0; break;
1fe70     D0 00 90 AD |  if_e	jmp	#LR__3583
1fe74     24 00 90 FD | 	jmp	#LR__3579
1fe78                 | LR__3578
1fe78     04 4E 05 F1 | 	add	fp, #4
1fe7c     A7 12 02 FB | 	rdlong	arg01, fp
1fe80     10 4E 05 F1 | 	add	fp, #16
1fe84     A7 14 02 FB | 	rdlong	arg02, fp
1fe88     14 4E 85 F1 | 	sub	fp, #20
1fe8c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
1fe90     14 4E 05 F1 | 	add	fp, #20
1fe94     A7 FA 61 FC | 	wrlong	result1, fp
1fe98     14 4E 85 F1 | 	sub	fp, #20
1fe9c                 | LR__3579
1fe9c     14 4E 05 F1 | 	add	fp, #20
1fea0     A7 16 02 FB | 	rdlong	arg03, fp
1fea4     14 4E 85 F1 | 	sub	fp, #20
1fea8     FF FF 7F FF 
1feac     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
1feb0     1C 00 90 5D |  if_ne	jmp	#LR__3580
1feb4     04 4E 05 F1 | 	add	fp, #4
1feb8     A7 16 02 FB | 	rdlong	arg03, fp
1febc     04 4E 85 F1 | 	sub	fp, #4
1fec0     11 16 06 F1 | 	add	arg03, #17
1fec4     0B 03 48 FC | 	wrbyte	#1, arg03
1fec8     01 FA 05 F6 | 	mov	result1, #1
1fecc     D0 02 90 FD | 	jmp	#LR__3593
1fed0                 | LR__3580
1fed0     14 4E 05 F1 | 	add	fp, #20
1fed4     A7 16 02 FB | 	rdlong	arg03, fp
1fed8     14 4E 85 F1 | 	sub	fp, #20
1fedc     02 16 16 F2 | 	cmp	arg03, #2 wc
1fee0     24 00 90 CD |  if_b	jmp	#LR__3581
1fee4     10 4E 05 F1 | 	add	fp, #16
1fee8     A7 18 02 FB | 	rdlong	arg04, fp
1feec     04 4E 05 F1 | 	add	fp, #4
1fef0     A7 16 02 FB | 	rdlong	arg03, fp
1fef4     14 4E 85 F1 | 	sub	fp, #20
1fef8     18 18 06 F1 | 	add	arg04, #24
1fefc     0C 19 02 FB | 	rdlong	arg04, arg04
1ff00     0C 17 12 F2 | 	cmp	arg03, arg04 wc
1ff04     1C 00 90 CD |  if_b	jmp	#LR__3582
1ff08                 | LR__3581
1ff08     04 4E 05 F1 | 	add	fp, #4
1ff0c     A7 16 02 FB | 	rdlong	arg03, fp
1ff10     04 4E 85 F1 | 	sub	fp, #4
1ff14     11 16 06 F1 | 	add	arg03, #17
1ff18     0B 05 48 FC | 	wrbyte	#2, arg03
1ff1c     02 FA 05 F6 | 	mov	result1, #2
1ff20     7C 02 90 FD | 	jmp	#LR__3593
1ff24                 | LR__3582
1ff24     04 4E 05 F1 | 	add	fp, #4
1ff28     A7 18 02 FB | 	rdlong	arg04, fp
1ff2c     10 4E 05 F1 | 	add	fp, #16
1ff30     A7 16 02 FB | 	rdlong	arg03, fp
1ff34     14 4E 85 F1 | 	sub	fp, #20
1ff38     18 18 06 F1 | 	add	arg04, #24
1ff3c     0C 17 62 FC | 	wrlong	arg03, arg04
1ff40     7C FE 9F FD | 	jmp	#LR__3577
1ff44                 | LR__3583
1ff44     04 4E 05 F1 | 	add	fp, #4
1ff48     A7 16 02 FB | 	rdlong	arg03, fp
1ff4c     0B 13 02 F6 | 	mov	arg01, arg03
1ff50     14 16 06 F1 | 	add	arg03, #20
1ff54     0B 15 02 FB | 	rdlong	arg02, arg03
1ff58     04 4E 05 F1 | 	add	fp, #4
1ff5c     A7 16 02 FB | 	rdlong	arg03, fp
1ff60     0B 15 02 F1 | 	add	arg02, arg03
1ff64     14 12 06 F1 | 	add	arg01, #20
1ff68     09 15 62 FC | 	wrlong	arg02, arg01
1ff6c     A7 16 02 FB | 	rdlong	arg03, fp
1ff70     08 4E 85 F1 | 	sub	fp, #8
1ff74     FF 17 CE F7 | 	test	arg03, #511 wz
1ff78     6C 00 90 AD |  if_e	jmp	#LR__3585
1ff7c     10 4E 05 F1 | 	add	fp, #16
1ff80     A7 12 02 FB | 	rdlong	arg01, fp
1ff84     04 4E 05 F1 | 	add	fp, #4
1ff88     A7 14 02 FB | 	rdlong	arg02, fp
1ff8c     14 4E 85 F1 | 	sub	fp, #20
1ff90     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
1ff94     1C 4E 05 F1 | 	add	fp, #28
1ff98     A7 FA 61 FC | 	wrlong	result1, fp
1ff9c     1C 4E 85 F1 | 	sub	fp, #28
1ffa0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffa4     1C 00 90 5D |  if_ne	jmp	#LR__3584
1ffa8     04 4E 05 F1 | 	add	fp, #4
1ffac     A7 16 02 FB | 	rdlong	arg03, fp
1ffb0     04 4E 85 F1 | 	sub	fp, #4
1ffb4     11 16 06 F1 | 	add	arg03, #17
1ffb8     0B 05 48 FC | 	wrbyte	#2, arg03
1ffbc     02 FA 05 F6 | 	mov	result1, #2
1ffc0     DC 01 90 FD | 	jmp	#LR__3593
1ffc4                 | LR__3584
1ffc4     1C 4E 05 F1 | 	add	fp, #28
1ffc8     A7 18 02 FB | 	rdlong	arg04, fp
1ffcc     14 4E 85 F1 | 	sub	fp, #20
1ffd0     A7 16 02 FB | 	rdlong	arg03, fp
1ffd4     09 16 46 F0 | 	shr	arg03, #9
1ffd8     0B 19 02 F1 | 	add	arg04, arg03
1ffdc     14 4E 05 F1 | 	add	fp, #20
1ffe0     A7 18 62 FC | 	wrlong	arg04, fp
1ffe4     1C 4E 85 F1 | 	sub	fp, #28
1ffe8                 | LR__3585
1ffe8                 | LR__3586
1ffe8                 | LR__3587
1ffe8     04 4E 05 F1 | 	add	fp, #4
1ffec     A7 18 02 FB | 	rdlong	arg04, fp
1fff0     0C 17 02 F6 | 	mov	arg03, arg04
1fff4     04 4E 85 F1 | 	sub	fp, #4
1fff8     14 16 06 F1 | 	add	arg03, #20
1fffc     0B 17 02 FB | 	rdlong	arg03, arg03
20000     0C 18 06 F1 | 	add	arg04, #12
20004     0C 19 02 FB | 	rdlong	arg04, arg04
20008     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2000c     3C 00 90 ED |  if_be	jmp	#LR__3588
20010     04 4E 05 F1 | 	add	fp, #4
20014     A7 18 02 FB | 	rdlong	arg04, fp
20018     0C 17 02 F6 | 	mov	arg03, arg04
2001c     14 18 06 F1 | 	add	arg04, #20
20020     0C 19 02 FB | 	rdlong	arg04, arg04
20024     0C 16 06 F1 | 	add	arg03, #12
20028     0B 19 62 FC | 	wrlong	arg04, arg03
2002c     A7 18 02 FB | 	rdlong	arg04, fp
20030     0C 17 02 F6 | 	mov	arg03, arg04
20034     04 4E 85 F1 | 	sub	fp, #4
20038     10 18 06 F1 | 	add	arg04, #16
2003c     0C 19 C2 FA | 	rdbyte	arg04, arg04
20040     40 18 46 F5 | 	or	arg04, #64
20044     10 16 06 F1 | 	add	arg03, #16
20048     0B 19 42 FC | 	wrbyte	arg04, arg03
2004c                 | LR__3588
2004c     04 4E 05 F1 | 	add	fp, #4
20050     A7 16 02 FB | 	rdlong	arg03, fp
20054     04 4E 85 F1 | 	sub	fp, #4
20058     14 16 06 F1 | 	add	arg03, #20
2005c     0B 17 02 FB | 	rdlong	arg03, arg03
20060     FF 17 CE F7 | 	test	arg03, #511 wz
20064     2C 01 90 AD |  if_e	jmp	#LR__3592
20068     04 4E 05 F1 | 	add	fp, #4
2006c     A7 18 02 FB | 	rdlong	arg04, fp
20070     18 4E 05 F1 | 	add	fp, #24
20074     A7 16 02 FB | 	rdlong	arg03, fp
20078     1C 4E 85 F1 | 	sub	fp, #28
2007c     1C 18 06 F1 | 	add	arg04, #28
20080     0C 19 02 FB | 	rdlong	arg04, arg04
20084     0C 17 0A F2 | 	cmp	arg03, arg04 wz
20088     08 01 90 AD |  if_e	jmp	#LR__3592
2008c     04 4E 05 F1 | 	add	fp, #4
20090     A7 16 02 FB | 	rdlong	arg03, fp
20094     04 4E 85 F1 | 	sub	fp, #4
20098     10 16 06 F1 | 	add	arg03, #16
2009c     0B 17 C2 FA | 	rdbyte	arg03, arg03
200a0     80 16 CE F7 | 	test	arg03, #128 wz
200a4     7C 00 90 AD |  if_e	jmp	#LR__3590
200a8     10 4E 05 F1 | 	add	fp, #16
200ac     A7 16 02 FB | 	rdlong	arg03, fp
200b0     01 16 06 F1 | 	add	arg03, #1
200b4     0B 13 C2 FA | 	rdbyte	arg01, arg03
200b8     0C 4E 85 F1 | 	sub	fp, #12
200bc     A7 16 02 FB | 	rdlong	arg03, fp
200c0     0B 15 02 F6 | 	mov	arg02, arg03
200c4     28 14 06 F1 | 	add	arg02, #40
200c8     04 4E 85 F1 | 	sub	fp, #4
200cc     1C 16 06 F1 | 	add	arg03, #28
200d0     0B 17 02 FB | 	rdlong	arg03, arg03
200d4     01 18 06 F6 | 	mov	arg04, #1
200d8     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
200dc     00 FA 0D F2 | 	cmp	result1, #0 wz
200e0     1C 00 90 AD |  if_e	jmp	#LR__3589
200e4     04 4E 05 F1 | 	add	fp, #4
200e8     A7 16 02 FB | 	rdlong	arg03, fp
200ec     04 4E 85 F1 | 	sub	fp, #4
200f0     11 16 06 F1 | 	add	arg03, #17
200f4     0B 03 48 FC | 	wrbyte	#1, arg03
200f8     01 FA 05 F6 | 	mov	result1, #1
200fc     A0 00 90 FD | 	jmp	#LR__3593
20100                 | LR__3589
20100     04 4E 05 F1 | 	add	fp, #4
20104     A7 18 02 FB | 	rdlong	arg04, fp
20108     0C 17 02 F6 | 	mov	arg03, arg04
2010c     04 4E 85 F1 | 	sub	fp, #4
20110     10 18 06 F1 | 	add	arg04, #16
20114     0C 19 C2 FA | 	rdbyte	arg04, arg04
20118     7F 18 06 F5 | 	and	arg04, #127
2011c     10 16 06 F1 | 	add	arg03, #16
20120     0B 19 42 FC | 	wrbyte	arg04, arg03
20124                 | LR__3590
20124     10 4E 05 F1 | 	add	fp, #16
20128     A7 16 02 FB | 	rdlong	arg03, fp
2012c     01 16 06 F1 | 	add	arg03, #1
20130     0B 13 C2 FA | 	rdbyte	arg01, arg03
20134     0C 4E 85 F1 | 	sub	fp, #12
20138     A7 14 02 FB | 	rdlong	arg02, fp
2013c     28 14 06 F1 | 	add	arg02, #40
20140     18 4E 05 F1 | 	add	fp, #24
20144     A7 16 02 FB | 	rdlong	arg03, fp
20148     1C 4E 85 F1 | 	sub	fp, #28
2014c     01 18 06 F6 | 	mov	arg04, #1
20150     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
20154     00 FA 0D F2 | 	cmp	result1, #0 wz
20158     1C 00 90 AD |  if_e	jmp	#LR__3591
2015c     04 4E 05 F1 | 	add	fp, #4
20160     A7 16 02 FB | 	rdlong	arg03, fp
20164     04 4E 85 F1 | 	sub	fp, #4
20168     11 16 06 F1 | 	add	arg03, #17
2016c     0B 03 48 FC | 	wrbyte	#1, arg03
20170     01 FA 05 F6 | 	mov	result1, #1
20174     28 00 90 FD | 	jmp	#LR__3593
20178                 | LR__3591
20178     04 4E 05 F1 | 	add	fp, #4
2017c     A7 18 02 FB | 	rdlong	arg04, fp
20180     18 4E 05 F1 | 	add	fp, #24
20184     A7 16 02 FB | 	rdlong	arg03, fp
20188     1C 4E 85 F1 | 	sub	fp, #28
2018c     1C 18 06 F1 | 	add	arg04, #28
20190     0C 17 62 FC | 	wrlong	arg03, arg04
20194                 | LR__3592
20194                 | ' 
20194                 | ' 			fp->sect = nsect;
20194                 | ' 		}
20194                 | ' 	}
20194                 | ' 
20194                 | ' 	return res ;
20194     0C 4E 05 F1 | 	add	fp, #12
20198     A7 FA 01 FB | 	rdlong	result1, fp
2019c     0C 4E 85 F1 | 	sub	fp, #12
201a0                 | LR__3593
201a0     A7 F0 03 F6 | 	mov	ptra, fp
201a4     B2 00 A0 FD | 	call	#popregs_
201a8                 | _fatfs_cc_f_lseek_ret
201a8     2D 00 64 FD | 	ret
201ac                 | 
201ac                 | _fatfs_cc_f_opendir
201ac     01 4A 05 F6 | 	mov	COUNT_, #1
201b0     A8 00 A0 FD | 	call	#pushregs_
201b4     14 F0 07 F1 | 	add	ptra, #20
201b8     04 4E 05 F1 | 	add	fp, #4
201bc     A7 12 62 FC | 	wrlong	arg01, fp
201c0     04 4E 05 F1 | 	add	fp, #4
201c4     A7 14 62 FC | 	wrlong	arg02, fp
201c8     04 4E 85 F1 | 	sub	fp, #4
201cc     A7 16 0A FB | 	rdlong	arg03, fp wz
201d0     04 4E 85 F1 | 	sub	fp, #4
201d4     09 FA 05 A6 |  if_e	mov	result1, #9
201d8     78 01 90 AD |  if_e	jmp	#LR__3606
201dc     08 4E 05 F1 | 	add	fp, #8
201e0     A7 12 02 F6 | 	mov	arg01, fp
201e4     08 4E 05 F1 | 	add	fp, #8
201e8     A7 14 02 F6 | 	mov	arg02, fp
201ec     10 4E 85 F1 | 	sub	fp, #16
201f0     00 16 06 F6 | 	mov	arg03, #0
201f4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
201f8     0C 4E 05 F1 | 	add	fp, #12
201fc     A7 FA 61 FC | 	wrlong	result1, fp
20200     0C 4E 85 F1 | 	sub	fp, #12
20204     00 FA 0D F2 | 	cmp	result1, #0 wz
20208     20 01 90 5D |  if_ne	jmp	#LR__3605
2020c     04 4E 05 F1 | 	add	fp, #4
20210     A7 16 02 FB | 	rdlong	arg03, fp
20214     0C 4E 05 F1 | 	add	fp, #12
20218     A7 FA 01 FB | 	rdlong	result1, fp
2021c     0B FB 61 FC | 	wrlong	result1, arg03
20220     0C 4E 85 F1 | 	sub	fp, #12
20224     A7 12 02 FB | 	rdlong	arg01, fp
20228     04 4E 05 F1 | 	add	fp, #4
2022c     A7 14 02 FB | 	rdlong	arg02, fp
20230     08 4E 85 F1 | 	sub	fp, #8
20234     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
20238     0C 4E 05 F1 | 	add	fp, #12
2023c     A7 FA 61 FC | 	wrlong	result1, fp
20240     0C 4E 85 F1 | 	sub	fp, #12
20244     00 FA 0D F2 | 	cmp	result1, #0 wz
20248     C4 00 90 5D |  if_ne	jmp	#LR__3604
2024c     04 4E 05 F1 | 	add	fp, #4
20250     A7 16 02 FB | 	rdlong	arg03, fp
20254     04 4E 85 F1 | 	sub	fp, #4
20258     2B 16 06 F1 | 	add	arg03, #43
2025c     0B 17 C2 FA | 	rdbyte	arg03, arg03
20260     80 16 CE F7 | 	test	arg03, #128 wz
20264     58 00 90 5D |  if_ne	jmp	#LR__3602
20268     04 4E 05 F1 | 	add	fp, #4
2026c     A7 16 02 FB | 	rdlong	arg03, fp
20270     04 4E 85 F1 | 	sub	fp, #4
20274     06 16 06 F1 | 	add	arg03, #6
20278     0B 17 C2 FA | 	rdbyte	arg03, arg03
2027c     10 16 CE F7 | 	test	arg03, #16 wz
20280     30 00 90 AD |  if_e	jmp	#LR__3600
20284     04 4E 05 F1 | 	add	fp, #4
20288     A7 16 02 FB | 	rdlong	arg03, fp
2028c     0B 1F 02 F6 | 	mov	local01, arg03
20290     0C 4E 05 F1 | 	add	fp, #12
20294     A7 12 02 FB | 	rdlong	arg01, fp
20298     10 4E 85 F1 | 	sub	fp, #16
2029c     1C 16 06 F1 | 	add	arg03, #28
202a0     0B 15 02 FB | 	rdlong	arg02, arg03
202a4     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
202a8     08 1E 06 F1 | 	add	local01, #8
202ac     0F FB 61 FC | 	wrlong	result1, local01
202b0     0C 00 90 FD | 	jmp	#LR__3601
202b4                 | LR__3600
202b4     0C 4E 05 F1 | 	add	fp, #12
202b8     A7 0A 68 FC | 	wrlong	#5, fp
202bc     0C 4E 85 F1 | 	sub	fp, #12
202c0                 | LR__3601
202c0                 | LR__3602
202c0     0C 4E 05 F1 | 	add	fp, #12
202c4     A7 1E 0A FB | 	rdlong	local01, fp wz
202c8     0C 4E 85 F1 | 	sub	fp, #12
202cc     40 00 90 5D |  if_ne	jmp	#LR__3603
202d0     04 4E 05 F1 | 	add	fp, #4
202d4     A7 1E 02 FB | 	rdlong	local01, fp
202d8     0C 4E 05 F1 | 	add	fp, #12
202dc     A7 16 02 FB | 	rdlong	arg03, fp
202e0     06 16 06 F1 | 	add	arg03, #6
202e4     0B 17 E2 FA | 	rdword	arg03, arg03
202e8     04 1E 06 F1 | 	add	local01, #4
202ec     0F 17 52 FC | 	wrword	arg03, local01
202f0     0C 4E 85 F1 | 	sub	fp, #12
202f4     A7 12 02 FB | 	rdlong	arg01, fp
202f8     04 4E 85 F1 | 	sub	fp, #4
202fc     00 14 06 F6 | 	mov	arg02, #0
20300     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
20304     0C 4E 05 F1 | 	add	fp, #12
20308     A7 FA 61 FC | 	wrlong	result1, fp
2030c     0C 4E 85 F1 | 	sub	fp, #12
20310                 | LR__3603
20310                 | LR__3604
20310     0C 4E 05 F1 | 	add	fp, #12
20314     A7 1E 02 FB | 	rdlong	local01, fp
20318     0C 4E 85 F1 | 	sub	fp, #12
2031c     04 1E 0E F2 | 	cmp	local01, #4 wz
20320     0C 4E 05 A1 |  if_e	add	fp, #12
20324     A7 0A 68 AC |  if_e	wrlong	#5, fp
20328     0C 4E 85 A1 |  if_e	sub	fp, #12
2032c                 | LR__3605
2032c     0C 4E 05 F1 | 	add	fp, #12
20330     A7 1E 0A FB | 	rdlong	local01, fp wz
20334     0C 4E 85 F1 | 	sub	fp, #12
20338     04 4E 05 51 |  if_ne	add	fp, #4
2033c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
20340     04 4E 85 51 |  if_ne	sub	fp, #4
20344     0F 01 68 5C |  if_ne	wrlong	#0, local01
20348                 | ' 
20348                 | ' 	return res ;
20348     0C 4E 05 F1 | 	add	fp, #12
2034c     A7 FA 01 FB | 	rdlong	result1, fp
20350     0C 4E 85 F1 | 	sub	fp, #12
20354                 | LR__3606
20354     A7 F0 03 F6 | 	mov	ptra, fp
20358     B2 00 A0 FD | 	call	#popregs_
2035c                 | _fatfs_cc_f_opendir_ret
2035c     2D 00 64 FD | 	ret
20360                 | 
20360                 | _fatfs_cc_f_closedir
20360     00 4A 05 F6 | 	mov	COUNT_, #0
20364     A8 00 A0 FD | 	call	#pushregs_
20368     10 F0 07 F1 | 	add	ptra, #16
2036c     04 4E 05 F1 | 	add	fp, #4
20370     A7 12 62 FC | 	wrlong	arg01, fp
20374     08 4E 05 F1 | 	add	fp, #8
20378     A7 14 02 F6 | 	mov	arg02, fp
2037c     0C 4E 85 F1 | 	sub	fp, #12
20380     C0 DD BF FD | 	call	#_fatfs_cc_validate
20384     08 4E 05 F1 | 	add	fp, #8
20388     A7 FA 61 FC | 	wrlong	result1, fp
2038c     08 4E 85 F1 | 	sub	fp, #8
20390     00 FA 0D F2 | 	cmp	result1, #0 wz
20394     04 4E 05 A1 |  if_e	add	fp, #4
20398     A7 FA 01 AB |  if_e	rdlong	result1, fp
2039c     04 4E 85 A1 |  if_e	sub	fp, #4
203a0     FD 00 68 AC |  if_e	wrlong	#0, result1
203a4                 | ' 
203a4                 | ' 
203a4                 | ' 
203a4                 | ' 
203a4                 | ' 		dp->obj.fs = 0;
203a4                 | ' #line 4633 "ff.c"
203a4                 | ' 	}
203a4                 | ' 	return res;
203a4     08 4E 05 F1 | 	add	fp, #8
203a8     A7 FA 01 FB | 	rdlong	result1, fp
203ac     08 4E 85 F1 | 	sub	fp, #8
203b0     A7 F0 03 F6 | 	mov	ptra, fp
203b4     B2 00 A0 FD | 	call	#popregs_
203b8                 | _fatfs_cc_f_closedir_ret
203b8     2D 00 64 FD | 	ret
203bc                 | 
203bc                 | _fatfs_cc_f_readdir
203bc     00 4A 05 F6 | 	mov	COUNT_, #0
203c0     A8 00 A0 FD | 	call	#pushregs_
203c4     14 F0 07 F1 | 	add	ptra, #20
203c8     04 4E 05 F1 | 	add	fp, #4
203cc     A7 12 62 FC | 	wrlong	arg01, fp
203d0     04 4E 05 F1 | 	add	fp, #4
203d4     A7 14 62 FC | 	wrlong	arg02, fp
203d8     04 4E 85 F1 | 	sub	fp, #4
203dc     A7 12 02 FB | 	rdlong	arg01, fp
203e0     0C 4E 05 F1 | 	add	fp, #12
203e4     A7 14 02 F6 | 	mov	arg02, fp
203e8     10 4E 85 F1 | 	sub	fp, #16
203ec     54 DD BF FD | 	call	#_fatfs_cc_validate
203f0     0C 4E 05 F1 | 	add	fp, #12
203f4     A7 FA 61 FC | 	wrlong	result1, fp
203f8     0C 4E 85 F1 | 	sub	fp, #12
203fc     00 FA 0D F2 | 	cmp	result1, #0 wz
20400     BC 00 90 5D |  if_ne	jmp	#LR__3613
20404     08 4E 05 F1 | 	add	fp, #8
20408     A7 FA 09 FB | 	rdlong	result1, fp wz
2040c     08 4E 85 F1 | 	sub	fp, #8
20410     24 00 90 5D |  if_ne	jmp	#LR__3610
20414     04 4E 05 F1 | 	add	fp, #4
20418     A7 12 02 FB | 	rdlong	arg01, fp
2041c     04 4E 85 F1 | 	sub	fp, #4
20420     00 14 06 F6 | 	mov	arg02, #0
20424     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
20428     0C 4E 05 F1 | 	add	fp, #12
2042c     A7 FA 61 FC | 	wrlong	result1, fp
20430     0C 4E 85 F1 | 	sub	fp, #12
20434     88 00 90 FD | 	jmp	#LR__3612
20438                 | LR__3610
20438     04 4E 05 F1 | 	add	fp, #4
2043c     A7 12 02 FB | 	rdlong	arg01, fp
20440     04 4E 85 F1 | 	sub	fp, #4
20444     00 14 06 F6 | 	mov	arg02, #0
20448     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2044c     0C 4E 05 F1 | 	add	fp, #12
20450     A7 FA 61 FC | 	wrlong	result1, fp
20454     0C 4E 85 F1 | 	sub	fp, #12
20458     04 FA 0D F2 | 	cmp	result1, #4 wz
2045c     0C 4E 05 A1 |  if_e	add	fp, #12
20460     A7 00 68 AC |  if_e	wrlong	#0, fp
20464     0C 4E 85 A1 |  if_e	sub	fp, #12
20468     0C 4E 05 F1 | 	add	fp, #12
2046c     A7 FA 09 FB | 	rdlong	result1, fp wz
20470     0C 4E 85 F1 | 	sub	fp, #12
20474     48 00 90 5D |  if_ne	jmp	#LR__3611
20478     04 4E 05 F1 | 	add	fp, #4
2047c     A7 12 02 FB | 	rdlong	arg01, fp
20480     04 4E 05 F1 | 	add	fp, #4
20484     A7 14 02 FB | 	rdlong	arg02, fp
20488     08 4E 85 F1 | 	sub	fp, #8
2048c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
20490     04 4E 05 F1 | 	add	fp, #4
20494     A7 12 02 FB | 	rdlong	arg01, fp
20498     04 4E 85 F1 | 	sub	fp, #4
2049c     00 14 06 F6 | 	mov	arg02, #0
204a0     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
204a4     0C 4E 05 F1 | 	add	fp, #12
204a8     A7 FA 61 FC | 	wrlong	result1, fp
204ac     0C 4E 85 F1 | 	sub	fp, #12
204b0     04 FA 0D F2 | 	cmp	result1, #4 wz
204b4     0C 4E 05 A1 |  if_e	add	fp, #12
204b8     A7 00 68 AC |  if_e	wrlong	#0, fp
204bc     0C 4E 85 A1 |  if_e	sub	fp, #12
204c0                 | LR__3611
204c0                 | LR__3612
204c0                 | LR__3613
204c0                 | ' 			}
204c0                 | ' 			;
204c0                 | ' 		}
204c0                 | ' 	}
204c0                 | ' 	return res ;
204c0     0C 4E 05 F1 | 	add	fp, #12
204c4     A7 FA 01 FB | 	rdlong	result1, fp
204c8     0C 4E 85 F1 | 	sub	fp, #12
204cc     A7 F0 03 F6 | 	mov	ptra, fp
204d0     B2 00 A0 FD | 	call	#popregs_
204d4                 | _fatfs_cc_f_readdir_ret
204d4     2D 00 64 FD | 	ret
204d8                 | 
204d8                 | _fatfs_cc_f_stat
204d8     00 4A 05 F6 | 	mov	COUNT_, #0
204dc     A8 00 A0 FD | 	call	#pushregs_
204e0     40 F0 07 F1 | 	add	ptra, #64
204e4     04 4E 05 F1 | 	add	fp, #4
204e8     A7 12 62 FC | 	wrlong	arg01, fp
204ec     04 4E 05 F1 | 	add	fp, #4
204f0     A7 14 62 FC | 	wrlong	arg02, fp
204f4     04 4E 85 F1 | 	sub	fp, #4
204f8     A7 12 02 F6 | 	mov	arg01, fp
204fc     0C 4E 05 F1 | 	add	fp, #12
20500     A7 14 02 F6 | 	mov	arg02, fp
20504     10 4E 85 F1 | 	sub	fp, #16
20508     00 16 06 F6 | 	mov	arg03, #0
2050c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
20510     0C 4E 05 F1 | 	add	fp, #12
20514     A7 FA 61 FC | 	wrlong	result1, fp
20518     0C 4E 85 F1 | 	sub	fp, #12
2051c     00 FA 0D F2 | 	cmp	result1, #0 wz
20520     74 00 90 5D |  if_ne	jmp	#LR__3623
20524     10 4E 05 F1 | 	add	fp, #16
20528     A7 12 02 F6 | 	mov	arg01, fp
2052c     0C 4E 85 F1 | 	sub	fp, #12
20530     A7 14 02 FB | 	rdlong	arg02, fp
20534     04 4E 85 F1 | 	sub	fp, #4
20538     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2053c     0C 4E 05 F1 | 	add	fp, #12
20540     A7 FA 61 FC | 	wrlong	result1, fp
20544     0C 4E 85 F1 | 	sub	fp, #12
20548     00 FA 0D F2 | 	cmp	result1, #0 wz
2054c     48 00 90 5D |  if_ne	jmp	#LR__3622
20550     3B 4E 05 F1 | 	add	fp, #59
20554     A7 FA C1 FA | 	rdbyte	result1, fp
20558     3B 4E 85 F1 | 	sub	fp, #59
2055c     80 FA CD F7 | 	test	result1, #128 wz
20560     0C 4E 05 51 |  if_ne	add	fp, #12
20564     A7 0C 68 5C |  if_ne	wrlong	#6, fp
20568     0C 4E 85 51 |  if_ne	sub	fp, #12
2056c     28 00 90 5D |  if_ne	jmp	#LR__3621
20570     08 4E 05 F1 | 	add	fp, #8
20574     A7 FA 09 FB | 	rdlong	result1, fp wz
20578     08 4E 85 F1 | 	sub	fp, #8
2057c     18 00 90 AD |  if_e	jmp	#LR__3620
20580     10 4E 05 F1 | 	add	fp, #16
20584     A7 12 02 F6 | 	mov	arg01, fp
20588     08 4E 85 F1 | 	sub	fp, #8
2058c     A7 14 02 FB | 	rdlong	arg02, fp
20590     08 4E 85 F1 | 	sub	fp, #8
20594     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
20598                 | LR__3620
20598                 | LR__3621
20598                 | LR__3622
20598                 | LR__3623
20598                 | ' 			}
20598                 | ' 		}
20598                 | ' 		;
20598                 | ' 	}
20598                 | ' 
20598                 | ' 	return res ;
20598     0C 4E 05 F1 | 	add	fp, #12
2059c     A7 FA 01 FB | 	rdlong	result1, fp
205a0     0C 4E 85 F1 | 	sub	fp, #12
205a4     A7 F0 03 F6 | 	mov	ptra, fp
205a8     B2 00 A0 FD | 	call	#popregs_
205ac                 | _fatfs_cc_f_stat_ret
205ac     2D 00 64 FD | 	ret
205b0                 | 
205b0                 | _fatfs_cc_f_unlink
205b0     00 4A 05 F6 | 	mov	COUNT_, #0
205b4     A8 00 A0 FD | 	call	#pushregs_
205b8     74 F0 07 F1 | 	add	ptra, #116
205bc     04 4E 05 F1 | 	add	fp, #4
205c0     A7 12 62 FC | 	wrlong	arg01, fp
205c4     68 4E 05 F1 | 	add	fp, #104
205c8     A7 00 68 FC | 	wrlong	#0, fp
205cc     68 4E 85 F1 | 	sub	fp, #104
205d0     A7 12 02 F6 | 	mov	arg01, fp
205d4     6C 4E 05 F1 | 	add	fp, #108
205d8     A7 14 02 F6 | 	mov	arg02, fp
205dc     70 4E 85 F1 | 	sub	fp, #112
205e0     02 16 06 F6 | 	mov	arg03, #2
205e4     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
205e8     08 4E 05 F1 | 	add	fp, #8
205ec     A7 FA 61 FC | 	wrlong	result1, fp
205f0     08 4E 85 F1 | 	sub	fp, #8
205f4     00 FA 0D F2 | 	cmp	result1, #0 wz
205f8     E4 01 90 5D |  if_ne	jmp	#LR__3638
205fc     70 4E 05 F1 | 	add	fp, #112
20600     A7 16 02 FB | 	rdlong	arg03, fp
20604     64 4E 85 F1 | 	sub	fp, #100
20608     A7 16 62 FC | 	wrlong	arg03, fp
2060c     A7 12 02 F6 | 	mov	arg01, fp
20610     08 4E 85 F1 | 	sub	fp, #8
20614     A7 14 02 FB | 	rdlong	arg02, fp
20618     04 4E 85 F1 | 	sub	fp, #4
2061c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
20620     08 4E 05 F1 | 	add	fp, #8
20624     A7 FA 61 FC | 	wrlong	result1, fp
20628     00 FA 4D F2 | 	cmps	result1, #0 wz
2062c     08 4E 85 F1 | 	sub	fp, #8
20630     AC 01 90 5D |  if_ne	jmp	#LR__3637
20634     37 4E 05 F1 | 	add	fp, #55
20638     A7 FA C1 FA | 	rdbyte	result1, fp
2063c     37 4E 85 F1 | 	sub	fp, #55
20640     80 FA CD F7 | 	test	result1, #128 wz
20644     08 4E 05 51 |  if_ne	add	fp, #8
20648     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2064c     08 4E 85 51 |  if_ne	sub	fp, #8
20650     1C 00 90 5D |  if_ne	jmp	#LR__3630
20654     12 4E 05 F1 | 	add	fp, #18
20658     A7 FA C1 FA | 	rdbyte	result1, fp
2065c     12 4E 85 F1 | 	sub	fp, #18
20660     01 FA CD F7 | 	test	result1, #1 wz
20664     08 4E 05 51 |  if_ne	add	fp, #8
20668     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2066c     08 4E 85 51 |  if_ne	sub	fp, #8
20670                 | LR__3630
20670     08 4E 05 F1 | 	add	fp, #8
20674     A7 FA 09 FB | 	rdlong	result1, fp wz
20678     08 4E 85 F1 | 	sub	fp, #8
2067c     C8 00 90 5D |  if_ne	jmp	#LR__3633
20680     70 4E 05 F1 | 	add	fp, #112
20684     A7 12 02 FB | 	rdlong	arg01, fp
20688     48 4E 85 F1 | 	sub	fp, #72
2068c     A7 14 02 FB | 	rdlong	arg02, fp
20690     28 4E 85 F1 | 	sub	fp, #40
20694     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
20698     6C 4E 05 F1 | 	add	fp, #108
2069c     A7 FA 61 FC | 	wrlong	result1, fp
206a0     5A 4E 85 F1 | 	sub	fp, #90
206a4     A7 FA C1 FA | 	rdbyte	result1, fp
206a8     12 4E 85 F1 | 	sub	fp, #18
206ac     10 FA CD F7 | 	test	result1, #16 wz
206b0     94 00 90 AD |  if_e	jmp	#LR__3632
206b4     70 4E 05 F1 | 	add	fp, #112
206b8     A7 FA 01 FB | 	rdlong	result1, fp
206bc     34 4E 85 F1 | 	sub	fp, #52
206c0     A7 FA 61 FC | 	wrlong	result1, fp
206c4     30 4E 05 F1 | 	add	fp, #48
206c8     A7 16 02 FB | 	rdlong	arg03, fp
206cc     28 4E 85 F1 | 	sub	fp, #40
206d0     A7 16 62 FC | 	wrlong	arg03, fp
206d4     08 4E 85 F1 | 	sub	fp, #8
206d8     A7 12 02 F6 | 	mov	arg01, fp
206dc     3C 4E 85 F1 | 	sub	fp, #60
206e0     00 14 06 F6 | 	mov	arg02, #0
206e4     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
206e8     08 4E 05 F1 | 	add	fp, #8
206ec     A7 FA 61 FC | 	wrlong	result1, fp
206f0     08 4E 85 F1 | 	sub	fp, #8
206f4     00 FA 0D F2 | 	cmp	result1, #0 wz
206f8     4C 00 90 5D |  if_ne	jmp	#LR__3631
206fc     3C 4E 05 F1 | 	add	fp, #60
20700     A7 12 02 F6 | 	mov	arg01, fp
20704     3C 4E 85 F1 | 	sub	fp, #60
20708     00 14 06 F6 | 	mov	arg02, #0
2070c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
20710     08 4E 05 F1 | 	add	fp, #8
20714     A7 FA 61 FC | 	wrlong	result1, fp
20718     00 FA 4D F2 | 	cmps	result1, #0 wz
2071c     08 4E 85 F1 | 	sub	fp, #8
20720     08 4E 05 A1 |  if_e	add	fp, #8
20724     A7 0E 68 AC |  if_e	wrlong	#7, fp
20728     08 4E 85 A1 |  if_e	sub	fp, #8
2072c     08 4E 05 F1 | 	add	fp, #8
20730     A7 FA 01 FB | 	rdlong	result1, fp
20734     08 4E 85 F1 | 	sub	fp, #8
20738     04 FA 0D F2 | 	cmp	result1, #4 wz
2073c     08 4E 05 A1 |  if_e	add	fp, #8
20740     A7 00 68 AC |  if_e	wrlong	#0, fp
20744     08 4E 85 A1 |  if_e	sub	fp, #8
20748                 | LR__3631
20748                 | LR__3632
20748                 | LR__3633
20748     08 4E 05 F1 | 	add	fp, #8
2074c     A7 FA 09 FB | 	rdlong	result1, fp wz
20750     08 4E 85 F1 | 	sub	fp, #8
20754     88 00 90 5D |  if_ne	jmp	#LR__3636
20758     0C 4E 05 F1 | 	add	fp, #12
2075c     A7 12 02 F6 | 	mov	arg01, fp
20760     0C 4E 85 F1 | 	sub	fp, #12
20764     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
20768     08 4E 05 F1 | 	add	fp, #8
2076c     A7 FA 61 FC | 	wrlong	result1, fp
20770     08 4E 85 F1 | 	sub	fp, #8
20774     00 FA 0D F2 | 	cmp	result1, #0 wz
20778     38 00 90 5D |  if_ne	jmp	#LR__3634
2077c     6C 4E 05 F1 | 	add	fp, #108
20780     A7 FA 09 FB | 	rdlong	result1, fp wz
20784     6C 4E 85 F1 | 	sub	fp, #108
20788     28 00 90 AD |  if_e	jmp	#LR__3634
2078c     0C 4E 05 F1 | 	add	fp, #12
20790     A7 12 02 F6 | 	mov	arg01, fp
20794     60 4E 05 F1 | 	add	fp, #96
20798     A7 14 02 FB | 	rdlong	arg02, fp
2079c     6C 4E 85 F1 | 	sub	fp, #108
207a0     00 16 06 F6 | 	mov	arg03, #0
207a4     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
207a8     08 4E 05 F1 | 	add	fp, #8
207ac     A7 FA 61 FC | 	wrlong	result1, fp
207b0     08 4E 85 F1 | 	sub	fp, #8
207b4                 | LR__3634
207b4     08 4E 05 F1 | 	add	fp, #8
207b8     A7 FA 09 FB | 	rdlong	result1, fp wz
207bc     08 4E 85 F1 | 	sub	fp, #8
207c0     1C 00 90 5D |  if_ne	jmp	#LR__3635
207c4     70 4E 05 F1 | 	add	fp, #112
207c8     A7 12 02 FB | 	rdlong	arg01, fp
207cc     70 4E 85 F1 | 	sub	fp, #112
207d0     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
207d4     08 4E 05 F1 | 	add	fp, #8
207d8     A7 FA 61 FC | 	wrlong	result1, fp
207dc     08 4E 85 F1 | 	sub	fp, #8
207e0                 | LR__3635
207e0                 | LR__3636
207e0                 | LR__3637
207e0                 | LR__3638
207e0                 | ' 			}
207e0                 | ' 		}
207e0                 | ' 		;
207e0                 | ' 	}
207e0                 | ' 
207e0                 | ' 	return res ;
207e0     08 4E 05 F1 | 	add	fp, #8
207e4     A7 FA 01 FB | 	rdlong	result1, fp
207e8     08 4E 85 F1 | 	sub	fp, #8
207ec     A7 F0 03 F6 | 	mov	ptra, fp
207f0     B2 00 A0 FD | 	call	#popregs_
207f4                 | _fatfs_cc_f_unlink_ret
207f4     2D 00 64 FD | 	ret
207f8                 | 
207f8                 | _fatfs_cc_f_mkdir
207f8     00 4A 05 F6 | 	mov	COUNT_, #0
207fc     A8 00 A0 FD | 	call	#pushregs_
20800     5C F0 07 F1 | 	add	ptra, #92
20804     04 4E 05 F1 | 	add	fp, #4
20808     A7 12 62 FC | 	wrlong	arg01, fp
2080c     A7 12 02 F6 | 	mov	arg01, fp
20810     48 4E 05 F1 | 	add	fp, #72
20814     A7 14 02 F6 | 	mov	arg02, fp
20818     4C 4E 85 F1 | 	sub	fp, #76
2081c     02 16 06 F6 | 	mov	arg03, #2
20820     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
20824     08 4E 05 F1 | 	add	fp, #8
20828     A7 FA 61 FC | 	wrlong	result1, fp
2082c     08 4E 85 F1 | 	sub	fp, #8
20830     00 FA 0D F2 | 	cmp	result1, #0 wz
20834     C4 02 90 5D |  if_ne	jmp	#LR__3645
20838     4C 4E 05 F1 | 	add	fp, #76
2083c     A7 16 02 FB | 	rdlong	arg03, fp
20840     40 4E 85 F1 | 	sub	fp, #64
20844     A7 16 62 FC | 	wrlong	arg03, fp
20848     A7 12 02 F6 | 	mov	arg01, fp
2084c     08 4E 85 F1 | 	sub	fp, #8
20850     A7 14 02 FB | 	rdlong	arg02, fp
20854     04 4E 85 F1 | 	sub	fp, #4
20858     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2085c     08 4E 05 F1 | 	add	fp, #8
20860     A7 FA 61 FC | 	wrlong	result1, fp
20864     00 FA 4D F2 | 	cmps	result1, #0 wz
20868     08 4E 85 F1 | 	sub	fp, #8
2086c     08 4E 05 A1 |  if_e	add	fp, #8
20870     A7 10 68 AC |  if_e	wrlong	#8, fp
20874     08 4E 85 A1 |  if_e	sub	fp, #8
20878     08 4E 05 F1 | 	add	fp, #8
2087c     A7 FA 01 FB | 	rdlong	result1, fp
20880     08 4E 85 F1 | 	sub	fp, #8
20884     04 FA 0D F2 | 	cmp	result1, #4 wz
20888     70 02 90 5D |  if_ne	jmp	#LR__3644
2088c     4C 4E 05 F1 | 	add	fp, #76
20890     A7 16 02 FB | 	rdlong	arg03, fp
20894     10 4E 85 F1 | 	sub	fp, #16
20898     A7 16 62 FC | 	wrlong	arg03, fp
2089c     A7 12 02 F6 | 	mov	arg01, fp
208a0     3C 4E 85 F1 | 	sub	fp, #60
208a4     00 14 06 F6 | 	mov	arg02, #0
208a8     04 AC BF FD | 	call	#_fatfs_cc_create_chain
208ac     50 4E 05 F1 | 	add	fp, #80
208b0     A7 FA 61 FC | 	wrlong	result1, fp
208b4     48 4E 85 F1 | 	sub	fp, #72
208b8     A7 00 68 FC | 	wrlong	#0, fp
208bc     48 4E 05 F1 | 	add	fp, #72
208c0     A7 FA 09 FB | 	rdlong	result1, fp wz
208c4     50 4E 85 F1 | 	sub	fp, #80
208c8     08 4E 05 A1 |  if_e	add	fp, #8
208cc     A7 0E 68 AC |  if_e	wrlong	#7, fp
208d0     08 4E 85 A1 |  if_e	sub	fp, #8
208d4     50 4E 05 F1 | 	add	fp, #80
208d8     A7 FA 01 FB | 	rdlong	result1, fp
208dc     50 4E 85 F1 | 	sub	fp, #80
208e0     01 FA 0D F2 | 	cmp	result1, #1 wz
208e4     08 4E 05 A1 |  if_e	add	fp, #8
208e8     A7 04 68 AC |  if_e	wrlong	#2, fp
208ec     08 4E 85 A1 |  if_e	sub	fp, #8
208f0     50 4E 05 F1 | 	add	fp, #80
208f4     A7 16 02 FB | 	rdlong	arg03, fp
208f8     50 4E 85 F1 | 	sub	fp, #80
208fc     FF FF 7F FF 
20900     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
20904     08 4E 05 A1 |  if_e	add	fp, #8
20908     A7 02 68 AC |  if_e	wrlong	#1, fp
2090c     08 4E 85 A1 |  if_e	sub	fp, #8
20910     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
20914     58 4E 05 F1 | 	add	fp, #88
20918     A7 FA 61 FC | 	wrlong	result1, fp
2091c     50 4E 85 F1 | 	sub	fp, #80
20920     A7 FA 09 FB | 	rdlong	result1, fp wz
20924     08 4E 85 F1 | 	sub	fp, #8
20928     1C 01 90 5D |  if_ne	jmp	#LR__3641
2092c     4C 4E 05 F1 | 	add	fp, #76
20930     A7 12 02 FB | 	rdlong	arg01, fp
20934     04 4E 05 F1 | 	add	fp, #4
20938     A7 14 02 FB | 	rdlong	arg02, fp
2093c     50 4E 85 F1 | 	sub	fp, #80
20940     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
20944     08 4E 05 F1 | 	add	fp, #8
20948     A7 FA 61 FC | 	wrlong	result1, fp
2094c     00 FA 4D F2 | 	cmps	result1, #0 wz
20950     08 4E 85 F1 | 	sub	fp, #8
20954     F0 00 90 5D |  if_ne	jmp	#LR__3640
20958     4C 4E 05 F1 | 	add	fp, #76
2095c     A7 12 02 FB | 	rdlong	arg01, fp
20960     4C 4E 85 F1 | 	sub	fp, #76
20964     34 12 06 F1 | 	add	arg01, #52
20968     20 14 06 F6 | 	mov	arg02, #32
2096c     0B 16 06 F6 | 	mov	arg03, #11
20970     98 00 A0 FD | 	call	#\builtin_bytefill_
20974     4C 4E 05 F1 | 	add	fp, #76
20978     A7 FA 01 FB | 	rdlong	result1, fp
2097c     34 FA 05 F1 | 	add	result1, #52
20980     FD 5C 48 FC | 	wrbyte	#46, result1
20984     A7 16 02 FB | 	rdlong	arg03, fp
20988     3F 16 06 F1 | 	add	arg03, #63
2098c     0B 21 48 FC | 	wrbyte	#16, arg03
20990     A7 12 02 FB | 	rdlong	arg01, fp
20994     4A 12 06 F1 | 	add	arg01, #74
20998     0C 4E 05 F1 | 	add	fp, #12
2099c     A7 14 02 FB | 	rdlong	arg02, fp
209a0     09 15 62 FC | 	wrlong	arg02, arg01
209a4     0C 4E 85 F1 | 	sub	fp, #12
209a8     A7 14 02 FB | 	rdlong	arg02, fp
209ac     0A 13 02 F6 | 	mov	arg01, arg02
209b0     34 14 06 F1 | 	add	arg02, #52
209b4     04 4E 05 F1 | 	add	fp, #4
209b8     A7 16 02 FB | 	rdlong	arg03, fp
209bc     50 4E 85 F1 | 	sub	fp, #80
209c0     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
209c4     4C 4E 05 F1 | 	add	fp, #76
209c8     A7 14 02 FB | 	rdlong	arg02, fp
209cc     0A 13 02 F6 | 	mov	arg01, arg02
209d0     54 12 06 F1 | 	add	arg01, #84
209d4     4C 4E 85 F1 | 	sub	fp, #76
209d8     34 14 06 F1 | 	add	arg02, #52
209dc     20 16 06 F6 | 	mov	arg03, #32
209e0     BC 2F BF FD | 	call	#__system____builtin_memmove
209e4     4C 4E 05 F1 | 	add	fp, #76
209e8     A7 16 02 FB | 	rdlong	arg03, fp
209ec     55 16 06 F1 | 	add	arg03, #85
209f0     0B 5D 48 FC | 	wrbyte	#46, arg03
209f4     38 4E 85 F1 | 	sub	fp, #56
209f8     A7 16 02 FB | 	rdlong	arg03, fp
209fc     40 4E 05 F1 | 	add	fp, #64
20a00     A7 16 62 FC | 	wrlong	arg03, fp
20a04     08 4E 85 F1 | 	sub	fp, #8
20a08     A7 14 02 FB | 	rdlong	arg02, fp
20a0c     0A 13 02 F6 | 	mov	arg01, arg02
20a10     54 14 06 F1 | 	add	arg02, #84
20a14     4C 4E 85 F1 | 	sub	fp, #76
20a18     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
20a1c     4C 4E 05 F1 | 	add	fp, #76
20a20     A7 16 02 FB | 	rdlong	arg03, fp
20a24     03 16 06 F1 | 	add	arg03, #3
20a28     0B 03 48 FC | 	wrbyte	#1, arg03
20a2c     40 4E 85 F1 | 	sub	fp, #64
20a30     A7 12 02 F6 | 	mov	arg01, fp
20a34     0C 4E 85 F1 | 	sub	fp, #12
20a38     44 BA BF FD | 	call	#_fatfs_cc_dir_register
20a3c     08 4E 05 F1 | 	add	fp, #8
20a40     A7 FA 61 FC | 	wrlong	result1, fp
20a44     08 4E 85 F1 | 	sub	fp, #8
20a48                 | LR__3640
20a48                 | LR__3641
20a48     08 4E 05 F1 | 	add	fp, #8
20a4c     A7 FA 09 FB | 	rdlong	result1, fp wz
20a50     08 4E 85 F1 | 	sub	fp, #8
20a54     88 00 90 5D |  if_ne	jmp	#LR__3642
20a58     28 4E 05 F1 | 	add	fp, #40
20a5c     A7 12 02 FB | 	rdlong	arg01, fp
20a60     16 12 06 F1 | 	add	arg01, #22
20a64     30 4E 05 F1 | 	add	fp, #48
20a68     A7 14 02 FB | 	rdlong	arg02, fp
20a6c     09 15 62 FC | 	wrlong	arg02, arg01
20a70     0C 4E 85 F1 | 	sub	fp, #12
20a74     A7 12 02 FB | 	rdlong	arg01, fp
20a78     24 4E 85 F1 | 	sub	fp, #36
20a7c     A7 14 02 FB | 	rdlong	arg02, fp
20a80     28 4E 05 F1 | 	add	fp, #40
20a84     A7 16 02 FB | 	rdlong	arg03, fp
20a88     50 4E 85 F1 | 	sub	fp, #80
20a8c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
20a90     28 4E 05 F1 | 	add	fp, #40
20a94     A7 FA 01 FB | 	rdlong	result1, fp
20a98     0B FA 05 F1 | 	add	result1, #11
20a9c     FD 20 48 FC | 	wrbyte	#16, result1
20aa0     24 4E 05 F1 | 	add	fp, #36
20aa4     A7 FA 01 FB | 	rdlong	result1, fp
20aa8     03 FA 05 F1 | 	add	result1, #3
20aac     FD 02 48 FC | 	wrbyte	#1, result1
20ab0     44 4E 85 F1 | 	sub	fp, #68
20ab4     A7 FA 09 FB | 	rdlong	result1, fp wz
20ab8     08 4E 85 F1 | 	sub	fp, #8
20abc     3C 00 90 5D |  if_ne	jmp	#LR__3643
20ac0     4C 4E 05 F1 | 	add	fp, #76
20ac4     A7 12 02 FB | 	rdlong	arg01, fp
20ac8     4C 4E 85 F1 | 	sub	fp, #76
20acc     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
20ad0     08 4E 05 F1 | 	add	fp, #8
20ad4     A7 FA 61 FC | 	wrlong	result1, fp
20ad8     08 4E 85 F1 | 	sub	fp, #8
20adc     1C 00 90 FD | 	jmp	#LR__3643
20ae0                 | LR__3642
20ae0     3C 4E 05 F1 | 	add	fp, #60
20ae4     A7 12 02 F6 | 	mov	arg01, fp
20ae8     14 4E 05 F1 | 	add	fp, #20
20aec     A7 14 02 FB | 	rdlong	arg02, fp
20af0     50 4E 85 F1 | 	sub	fp, #80
20af4     00 16 06 F6 | 	mov	arg03, #0
20af8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
20afc                 | LR__3643
20afc                 | LR__3644
20afc                 | LR__3645
20afc                 | ' 				remove_chain(&sobj, dcl, 0);
20afc                 | ' 			}
20afc                 | ' 		}
20afc                 | ' 		;
20afc                 | ' 	}
20afc                 | ' 
20afc                 | ' 	return res ;
20afc     08 4E 05 F1 | 	add	fp, #8
20b00     A7 FA 01 FB | 	rdlong	result1, fp
20b04     08 4E 85 F1 | 	sub	fp, #8
20b08     A7 F0 03 F6 | 	mov	ptra, fp
20b0c     B2 00 A0 FD | 	call	#popregs_
20b10                 | _fatfs_cc_f_mkdir_ret
20b10     2D 00 64 FD | 	ret
20b14                 | 
20b14                 | _fatfs_cc_f_rename
20b14     01 4A 05 F6 | 	mov	COUNT_, #1
20b18     A8 00 A0 FD | 	call	#pushregs_
20b1c     9C F0 07 F1 | 	add	ptra, #156
20b20     04 4E 05 F1 | 	add	fp, #4
20b24     A7 12 62 FC | 	wrlong	arg01, fp
20b28     04 4E 05 F1 | 	add	fp, #4
20b2c     A7 14 62 FC | 	wrlong	arg02, fp
20b30     A7 12 02 F6 | 	mov	arg01, fp
20b34     08 4E 85 F1 | 	sub	fp, #8
20b38     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
20b3c     04 4E 05 F1 | 	add	fp, #4
20b40     A7 12 02 F6 | 	mov	arg01, fp
20b44     6C 4E 05 F1 | 	add	fp, #108
20b48     A7 14 02 F6 | 	mov	arg02, fp
20b4c     70 4E 85 F1 | 	sub	fp, #112
20b50     02 16 06 F6 | 	mov	arg03, #2
20b54     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
20b58     0C 4E 05 F1 | 	add	fp, #12
20b5c     A7 FA 61 FC | 	wrlong	result1, fp
20b60     0C 4E 85 F1 | 	sub	fp, #12
20b64     00 FA 0D F2 | 	cmp	result1, #0 wz
20b68     44 03 90 5D |  if_ne	jmp	#LR__3663
20b6c     70 4E 05 F1 | 	add	fp, #112
20b70     A7 16 02 FB | 	rdlong	arg03, fp
20b74     60 4E 85 F1 | 	sub	fp, #96
20b78     A7 16 62 FC | 	wrlong	arg03, fp
20b7c     A7 12 02 F6 | 	mov	arg01, fp
20b80     0C 4E 85 F1 | 	sub	fp, #12
20b84     A7 14 02 FB | 	rdlong	arg02, fp
20b88     04 4E 85 F1 | 	sub	fp, #4
20b8c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
20b90     0C 4E 05 F1 | 	add	fp, #12
20b94     A7 FA 61 FC | 	wrlong	result1, fp
20b98     00 FA 4D F2 | 	cmps	result1, #0 wz
20b9c     0C 4E 85 F1 | 	sub	fp, #12
20ba0     1C 00 90 5D |  if_ne	jmp	#LR__3650
20ba4     3B 4E 05 F1 | 	add	fp, #59
20ba8     A7 FA C1 FA | 	rdbyte	result1, fp
20bac     3B 4E 85 F1 | 	sub	fp, #59
20bb0     A0 FA CD F7 | 	test	result1, #160 wz
20bb4     0C 4E 05 51 |  if_ne	add	fp, #12
20bb8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
20bbc     0C 4E 85 51 |  if_ne	sub	fp, #12
20bc0                 | LR__3650
20bc0     0C 4E 05 F1 | 	add	fp, #12
20bc4     A7 1E 0A FB | 	rdlong	local01, fp wz
20bc8     0C 4E 85 F1 | 	sub	fp, #12
20bcc     E0 02 90 5D |  if_ne	jmp	#LR__3662
20bd0     74 4E 05 F1 | 	add	fp, #116
20bd4     A7 12 02 F6 | 	mov	arg01, fp
20bd8     48 4E 85 F1 | 	sub	fp, #72
20bdc     A7 14 02 FB | 	rdlong	arg02, fp
20be0     2C 4E 85 F1 | 	sub	fp, #44
20be4     20 16 06 F6 | 	mov	arg03, #32
20be8     B4 2D BF FD | 	call	#__system____builtin_memmove
20bec     40 4E 05 F1 | 	add	fp, #64
20bf0     A7 12 02 F6 | 	mov	arg01, fp
20bf4     30 4E 85 F1 | 	sub	fp, #48
20bf8     A7 14 02 F6 | 	mov	arg02, fp
20bfc     10 4E 85 F1 | 	sub	fp, #16
20c00     30 16 06 F6 | 	mov	arg03, #48
20c04     98 2D BF FD | 	call	#__system____builtin_memmove
20c08     40 4E 05 F1 | 	add	fp, #64
20c0c     A7 12 02 F6 | 	mov	arg01, fp
20c10     38 4E 85 F1 | 	sub	fp, #56
20c14     A7 14 02 FB | 	rdlong	arg02, fp
20c18     08 4E 85 F1 | 	sub	fp, #8
20c1c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
20c20     0C 4E 05 F1 | 	add	fp, #12
20c24     A7 FA 61 FC | 	wrlong	result1, fp
20c28     0C 4E 85 F1 | 	sub	fp, #12
20c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
20c30     4C 00 90 5D |  if_ne	jmp	#LR__3653
20c34     48 4E 05 F1 | 	add	fp, #72
20c38     A7 FA 01 FB | 	rdlong	result1, fp
20c3c     30 4E 85 F1 | 	sub	fp, #48
20c40     A7 16 02 FB | 	rdlong	arg03, fp
20c44     18 4E 85 F1 | 	sub	fp, #24
20c48     0B FB 09 F2 | 	cmp	result1, arg03 wz
20c4c     20 00 90 5D |  if_ne	jmp	#LR__3651
20c50     50 4E 05 F1 | 	add	fp, #80
20c54     A7 FA 01 FB | 	rdlong	result1, fp
20c58     30 4E 85 F1 | 	sub	fp, #48
20c5c     A7 16 02 FB | 	rdlong	arg03, fp
20c60     20 4E 85 F1 | 	sub	fp, #32
20c64     0B FB 09 F2 | 	cmp	result1, arg03 wz
20c68     04 1E 06 A6 |  if_e	mov	local01, #4
20c6c     04 00 90 AD |  if_e	jmp	#LR__3652
20c70                 | LR__3651
20c70     08 1E 06 F6 | 	mov	local01, #8
20c74                 | LR__3652
20c74     0C 4E 05 F1 | 	add	fp, #12
20c78     A7 1E 62 FC | 	wrlong	local01, fp
20c7c     0C 4E 85 F1 | 	sub	fp, #12
20c80                 | LR__3653
20c80     0C 4E 05 F1 | 	add	fp, #12
20c84     A7 1E 02 FB | 	rdlong	local01, fp
20c88     0C 4E 85 F1 | 	sub	fp, #12
20c8c     04 1E 0E F2 | 	cmp	local01, #4 wz
20c90     CC 01 90 5D |  if_ne	jmp	#LR__3659
20c94     40 4E 05 F1 | 	add	fp, #64
20c98     A7 12 02 F6 | 	mov	arg01, fp
20c9c     40 4E 85 F1 | 	sub	fp, #64
20ca0     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
20ca4     0C 4E 05 F1 | 	add	fp, #12
20ca8     A7 FA 61 FC | 	wrlong	result1, fp
20cac     0C 4E 85 F1 | 	sub	fp, #12
20cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
20cb4     A8 01 90 5D |  if_ne	jmp	#LR__3658
20cb8     5C 4E 05 F1 | 	add	fp, #92
20cbc     A7 12 02 FB | 	rdlong	arg01, fp
20cc0     38 4E 05 F1 | 	add	fp, #56
20cc4     A7 12 62 FC | 	wrlong	arg01, fp
20cc8     0D 12 06 F1 | 	add	arg01, #13
20ccc     20 4E 85 F1 | 	sub	fp, #32
20cd0     A7 14 02 F6 | 	mov	arg02, fp
20cd4     74 4E 85 F1 | 	sub	fp, #116
20cd8     0D 14 06 F1 | 	add	arg02, #13
20cdc     13 16 06 F6 | 	mov	arg03, #19
20ce0     BC 2C BF FD | 	call	#__system____builtin_memmove
20ce4     94 4E 05 F1 | 	add	fp, #148
20ce8     A7 1E 02 FB | 	rdlong	local01, fp
20cec     15 4E 85 F1 | 	sub	fp, #21
20cf0     A7 FA C1 FA | 	rdbyte	result1, fp
20cf4     0B 1E 06 F1 | 	add	local01, #11
20cf8     0F FB 41 FC | 	wrbyte	result1, local01
20cfc     15 4E 05 F1 | 	add	fp, #21
20d00     A7 1E 02 FB | 	rdlong	local01, fp
20d04     94 4E 85 F1 | 	sub	fp, #148
20d08     0B 1E 06 F1 | 	add	local01, #11
20d0c     0F 1F C2 FA | 	rdbyte	local01, local01
20d10     10 1E CE F7 | 	test	local01, #16 wz
20d14     24 00 90 5D |  if_ne	jmp	#LR__3654
20d18     94 4E 05 F1 | 	add	fp, #148
20d1c     A7 FA 01 FB | 	rdlong	result1, fp
20d20     FD 1E 02 F6 | 	mov	local01, result1
20d24     94 4E 85 F1 | 	sub	fp, #148
20d28     0B FA 05 F1 | 	add	result1, #11
20d2c     FD FA C1 FA | 	rdbyte	result1, result1
20d30     20 FA 45 F5 | 	or	result1, #32
20d34     0B 1E 06 F1 | 	add	local01, #11
20d38     0F FB 41 FC | 	wrbyte	result1, local01
20d3c                 | LR__3654
20d3c     70 4E 05 F1 | 	add	fp, #112
20d40     A7 1E 02 FB | 	rdlong	local01, fp
20d44     03 1E 06 F1 | 	add	local01, #3
20d48     0F 03 48 FC | 	wrbyte	#1, local01
20d4c     24 4E 05 F1 | 	add	fp, #36
20d50     A7 1E 02 FB | 	rdlong	local01, fp
20d54     94 4E 85 F1 | 	sub	fp, #148
20d58     0B 1E 06 F1 | 	add	local01, #11
20d5c     0F 1F C2 FA | 	rdbyte	local01, local01
20d60     10 1E CE F7 | 	test	local01, #16 wz
20d64     F8 00 90 AD |  if_e	jmp	#LR__3657
20d68     18 4E 05 F1 | 	add	fp, #24
20d6c     A7 16 02 FB | 	rdlong	arg03, fp
20d70     30 4E 05 F1 | 	add	fp, #48
20d74     A7 1E 02 FB | 	rdlong	local01, fp
20d78     48 4E 85 F1 | 	sub	fp, #72
20d7c     0F 17 0A F2 | 	cmp	arg03, local01 wz
20d80     DC 00 90 AD |  if_e	jmp	#LR__3657
20d84     70 4E 05 F1 | 	add	fp, #112
20d88     A7 12 02 FB | 	rdlong	arg01, fp
20d8c     09 1F 02 F6 | 	mov	local01, arg01
20d90     24 4E 05 F1 | 	add	fp, #36
20d94     A7 14 02 FB | 	rdlong	arg02, fp
20d98     94 4E 85 F1 | 	sub	fp, #148
20d9c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
20da0     FD 14 02 F6 | 	mov	arg02, result1
20da4     0F 13 02 F6 | 	mov	arg01, local01
20da8     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
20dac     98 4E 05 F1 | 	add	fp, #152
20db0     A7 FA 61 FC | 	wrlong	result1, fp
20db4     00 FA 4D F2 | 	cmps	result1, #0 wz
20db8     98 4E 85 F1 | 	sub	fp, #152
20dbc     0C 4E 05 A1 |  if_e	add	fp, #12
20dc0     A7 04 68 AC |  if_e	wrlong	#2, fp
20dc4     0C 4E 85 A1 |  if_e	sub	fp, #12
20dc8     94 00 90 AD |  if_e	jmp	#LR__3656
20dcc     70 4E 05 F1 | 	add	fp, #112
20dd0     A7 12 02 FB | 	rdlong	arg01, fp
20dd4     28 4E 05 F1 | 	add	fp, #40
20dd8     A7 14 02 FB | 	rdlong	arg02, fp
20ddc     98 4E 85 F1 | 	sub	fp, #152
20de0     4C A0 BF FD | 	call	#_fatfs_cc_move_window
20de4     0C 4E 05 F1 | 	add	fp, #12
20de8     A7 FA 61 FC | 	wrlong	result1, fp
20dec     64 4E 05 F1 | 	add	fp, #100
20df0     A7 1E 02 FB | 	rdlong	local01, fp
20df4     54 1E 06 F1 | 	add	local01, #84
20df8     24 4E 05 F1 | 	add	fp, #36
20dfc     A7 1E 62 FC | 	wrlong	local01, fp
20e00     88 4E 85 F1 | 	sub	fp, #136
20e04     A7 1E 0A FB | 	rdlong	local01, fp wz
20e08     0C 4E 85 F1 | 	sub	fp, #12
20e0c     50 00 90 5D |  if_ne	jmp	#LR__3655
20e10     94 4E 05 F1 | 	add	fp, #148
20e14     A7 1E 02 FB | 	rdlong	local01, fp
20e18     94 4E 85 F1 | 	sub	fp, #148
20e1c     01 1E 06 F1 | 	add	local01, #1
20e20     0F 1F C2 FA | 	rdbyte	local01, local01
20e24     2E 1E 0E F2 | 	cmp	local01, #46 wz
20e28     34 00 90 5D |  if_ne	jmp	#LR__3655
20e2c     70 4E 05 F1 | 	add	fp, #112
20e30     A7 12 02 FB | 	rdlong	arg01, fp
20e34     24 4E 05 F1 | 	add	fp, #36
20e38     A7 14 02 FB | 	rdlong	arg02, fp
20e3c     4C 4E 85 F1 | 	sub	fp, #76
20e40     A7 16 02 FB | 	rdlong	arg03, fp
20e44     48 4E 85 F1 | 	sub	fp, #72
20e48     50 AD BF FD | 	call	#_fatfs_cc_st_clust
20e4c     70 4E 05 F1 | 	add	fp, #112
20e50     A7 1E 02 FB | 	rdlong	local01, fp
20e54     70 4E 85 F1 | 	sub	fp, #112
20e58     03 1E 06 F1 | 	add	local01, #3
20e5c     0F 03 48 FC | 	wrbyte	#1, local01
20e60                 | LR__3655
20e60                 | LR__3656
20e60                 | LR__3657
20e60                 | LR__3658
20e60                 | LR__3659
20e60     0C 4E 05 F1 | 	add	fp, #12
20e64     A7 1E 0A FB | 	rdlong	local01, fp wz
20e68     0C 4E 85 F1 | 	sub	fp, #12
20e6c     40 00 90 5D |  if_ne	jmp	#LR__3661
20e70     10 4E 05 F1 | 	add	fp, #16
20e74     A7 12 02 F6 | 	mov	arg01, fp
20e78     10 4E 85 F1 | 	sub	fp, #16
20e7c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
20e80     0C 4E 05 F1 | 	add	fp, #12
20e84     A7 FA 61 FC | 	wrlong	result1, fp
20e88     0C 4E 85 F1 | 	sub	fp, #12
20e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
20e90     1C 00 90 5D |  if_ne	jmp	#LR__3660
20e94     70 4E 05 F1 | 	add	fp, #112
20e98     A7 12 02 FB | 	rdlong	arg01, fp
20e9c     70 4E 85 F1 | 	sub	fp, #112
20ea0     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
20ea4     0C 4E 05 F1 | 	add	fp, #12
20ea8     A7 FA 61 FC | 	wrlong	result1, fp
20eac     0C 4E 85 F1 | 	sub	fp, #12
20eb0                 | LR__3660
20eb0                 | LR__3661
20eb0                 | LR__3662
20eb0                 | LR__3663
20eb0                 | ' 					res = sync_fs(fs);
20eb0                 | ' 				}
20eb0                 | ' 			}
20eb0                 | ' 
20eb0                 | ' 		}
20eb0                 | ' 		;
20eb0                 | ' 	}
20eb0                 | ' 
20eb0                 | ' 	return res ;
20eb0     0C 4E 05 F1 | 	add	fp, #12
20eb4     A7 FA 01 FB | 	rdlong	result1, fp
20eb8     0C 4E 85 F1 | 	sub	fp, #12
20ebc     A7 F0 03 F6 | 	mov	ptra, fp
20ec0     B2 00 A0 FD | 	call	#popregs_
20ec4                 | _fatfs_cc_f_rename_ret
20ec4     2D 00 64 FD | 	ret
20ec8                 | 
20ec8                 | _fatfs_cc_time
20ec8     00 4A 05 F6 | 	mov	COUNT_, #0
20ecc     A8 00 A0 FD | 	call	#pushregs_
20ed0     14 F0 07 F1 | 	add	ptra, #20
20ed4     04 4E 05 F1 | 	add	fp, #4
20ed8     A7 12 62 FC | 	wrlong	arg01, fp
20edc     04 4E 05 F1 | 	add	fp, #4
20ee0     A7 12 02 F6 | 	mov	arg01, fp
20ee4     08 4E 85 F1 | 	sub	fp, #8
20ee8     00 14 06 F6 | 	mov	arg02, #0
20eec     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
20ef0     08 4E 05 F1 | 	add	fp, #8
20ef4     A7 FA 01 FB | 	rdlong	result1, fp
20ef8     08 4E 05 F1 | 	add	fp, #8
20efc     A7 FA 61 FC | 	wrlong	result1, fp
20f00     0C 4E 85 F1 | 	sub	fp, #12
20f04     A7 FA 09 FB | 	rdlong	result1, fp wz
20f08     04 4E 85 F1 | 	sub	fp, #4
20f0c     18 00 90 AD |  if_e	jmp	#LR__3670
20f10     04 4E 05 F1 | 	add	fp, #4
20f14     A7 FA 01 FB | 	rdlong	result1, fp
20f18     0C 4E 05 F1 | 	add	fp, #12
20f1c     A7 14 02 FB | 	rdlong	arg02, fp
20f20     10 4E 85 F1 | 	sub	fp, #16
20f24     FD 14 62 FC | 	wrlong	arg02, result1
20f28                 | LR__3670
20f28                 | '         *tp = now;
20f28                 | '     return now;
20f28     10 4E 05 F1 | 	add	fp, #16
20f2c     A7 FA 01 FB | 	rdlong	result1, fp
20f30     10 4E 85 F1 | 	sub	fp, #16
20f34     A7 F0 03 F6 | 	mov	ptra, fp
20f38     B2 00 A0 FD | 	call	#popregs_
20f3c                 | _fatfs_cc_time_ret
20f3c     2D 00 64 FD | 	ret
20f40                 | 
20f40                 | _fatfs_cc_mktime
20f40     06 4A 05 F6 | 	mov	COUNT_, #6
20f44     A8 00 A0 FD | 	call	#pushregs_
20f48     09 1F 02 F6 | 	mov	local01, arg01
20f4c     14 1E 06 F1 | 	add	local01, #20
20f50     0F 13 02 FB | 	rdlong	arg01, local01
20f54     14 1E 86 F1 | 	sub	local01, #20
20f58     46 12 56 F2 | 	cmps	arg01, #70 wc
20f5c                 | '                 return (time_t) -1;
20f5c     01 FA 65 C6 |  if_b	neg	result1, #1
20f60     7C 01 90 CD |  if_b	jmp	#LR__3684
20f64     03 00 00 FF 
20f68     6C 21 06 F6 | 	mov	local02, ##1900
20f6c     14 1E 06 F1 | 	add	local01, #20
20f70     0F FB 01 FB | 	rdlong	result1, local01
20f74     FD 20 02 F1 | 	add	local02, result1
20f78     08 1E 86 F1 | 	sub	local01, #8
20f7c     0F 23 02 FB | 	rdlong	local03, local01
20f80     01 22 86 F1 | 	sub	local03, #1
20f84     04 1E 06 F1 | 	add	local01, #4
20f88     0F 13 02 FB | 	rdlong	arg01, local01
20f8c     10 1E 86 F1 | 	sub	local01, #16
20f90     02 12 66 F0 | 	shl	arg01, #2
20f94     02 00 00 FF 
20f98     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
20f9c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
20fa0     09 FB 01 FB | 	rdlong	result1, arg01
20fa4     FD 22 02 F1 | 	add	local03, result1
20fa8     10 13 02 F6 | 	mov	arg01, local02
20fac     02 00 00 FF 
20fb0     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
20fb4     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
20fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
20fbc     1C 00 90 AD |  if_e	jmp	#LR__3680
20fc0     00 24 06 F6 | 	mov	local04, #0
20fc4     10 1E 06 F1 | 	add	local01, #16
20fc8     0F FB 01 FB | 	rdlong	result1, local01
20fcc     10 1E 86 F1 | 	sub	local01, #16
20fd0     02 FA 55 F2 | 	cmps	result1, #2 wc
20fd4     01 24 06 36 |  if_ae	mov	local04, #1
20fd8     04 00 90 FD | 	jmp	#LR__3681
20fdc                 | LR__3680
20fdc     00 24 06 F6 | 	mov	local04, #0
20fe0                 | LR__3681
20fe0     04 1E 06 F1 | 	add	local01, #4
20fe4     0F FB 01 FB | 	rdlong	result1, local01
20fe8     04 1E 86 F1 | 	sub	local01, #4
20fec     0F 27 02 FB | 	rdlong	local05, local01
20ff0     08 1E 06 F1 | 	add	local01, #8
20ff4     0F 13 02 FB | 	rdlong	arg01, local01
20ff8     07 00 00 FF 
20ffc     10 12 06 FD | 	qmul	arg01, ##3600
21000     12 23 02 F1 | 	add	local03, local04
21004     FD 24 02 F6 | 	mov	local04, result1
21008     04 24 66 F0 | 	shl	local04, #4
2100c     FD 24 82 F1 | 	sub	local04, result1
21010     02 24 66 F0 | 	shl	local04, #2
21014     12 27 02 F1 | 	add	local05, local04
21018     08 1E 86 F1 | 	sub	local01, #8
2101c     18 24 62 FD | 	getqx	local04
21020     A8 00 00 FF 
21024     80 23 06 FD | 	qmul	local03, ##86400
21028     12 27 02 F1 | 	add	local05, local04
2102c     10 23 02 F6 | 	mov	local03, local02
21030     03 00 00 FF 
21034     B2 23 86 F1 | 	sub	local03, ##1970
21038     18 24 62 FD | 	getqx	local04
2103c     99 F0 00 FF 
21040     80 23 06 FD | 	qmul	local03, ##31536000
21044     12 27 02 F1 | 	add	local05, local04
21048     10 23 02 F6 | 	mov	local03, local02
2104c     03 00 00 FF 
21050     B1 23 86 F1 | 	sub	local03, ##1969
21054     11 29 52 F6 | 	abs	local06, local03 wc
21058     02 28 46 F0 | 	shr	local06, #2
2105c     14 29 82 F6 | 	negc	local06, local06
21060     03 00 00 FF 
21064     D1 21 56 F2 | 	cmps	local02, ##2001 wc
21068     18 24 62 FD | 	getqx	local04
2106c     12 27 02 F1 | 	add	local05, local04
21070     18 00 90 CD |  if_b	jmp	#LR__3682
21074     03 00 00 FF 
21078     D0 21 86 F1 | 	sub	local02, ##2000
2107c     10 25 52 F6 | 	abs	local04, local02 wc
21080     64 24 16 FD | 	qdiv	local04, #100
21084     18 24 62 FD | 	getqx	local04
21088     12 29 A2 F3 | 	sumnc	local06, local04
2108c                 | LR__3682
2108c     A8 00 00 FF 
21090     80 29 06 FD | 	qmul	local06, ##86400
21094     18 28 62 FD | 	getqx	local06
21098     14 27 02 F1 | 	add	local05, local06
2109c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
210a0     02 00 00 FF 
210a4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
210a8     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
210ac     14 27 02 F1 | 	add	local05, local06
210b0     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
210b4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
210b8     02 00 00 FF 
210bc     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
210c0     01 22 0E F2 | 	cmp	local03, #1 wz
210c4     14 00 90 5D |  if_ne	jmp	#LR__3683
210c8     0F 13 02 F6 | 	mov	arg01, local01
210cc     D8 19 B0 FD | 	call	#_fatfs_cc___indst
210d0     00 FA 0D F2 | 	cmp	result1, #0 wz
210d4     07 00 00 5F 
210d8     10 26 86 51 |  if_ne	sub	local05, ##3600
210dc                 | LR__3683
210dc                 | '                 s -=  (3600L) ;
210dc                 | ' 
210dc                 | '         return s;
210dc     13 FB 01 F6 | 	mov	result1, local05
210e0                 | LR__3684
210e0     A7 F0 03 F6 | 	mov	ptra, fp
210e4     B2 00 A0 FD | 	call	#popregs_
210e8                 | _fatfs_cc_mktime_ret
210e8     2D 00 64 FD | 	ret
210ec                 | 
210ec                 | _fatfs_cc__gmtime_r
210ec     03 4A 05 F6 | 	mov	COUNT_, #3
210f0     A8 00 A0 FD | 	call	#pushregs_
210f4     09 1F 02 FB | 	rdlong	local01, arg01
210f8     A8 00 00 FF 
210fc     80 1F 16 FD | 	qdiv	local01, ##86400
21100     18 FA 61 FD | 	getqx	result1
21104     04 FA 05 F1 | 	add	result1, #4
21108     07 FA 15 FD | 	qdiv	result1, #7
2110c     18 14 06 F1 | 	add	arg02, #24
21110     D1 7F 27 FF 
21114     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
21118     D1 7F 27 3F 
2111c     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
21120     03 00 00 3F 
21124     DC 21 06 36 |  if_ae	mov	local02, ##2012
21128     03 00 00 CF 
2112c     B2 21 06 C6 |  if_b	mov	local02, ##1970
21130                 | ' 	  year = 1970;
21130                 | ' 	}
21130                 | ' 
21130                 | ' 	for(;;) {
21130     19 FA 61 FD | 	getqy	result1
21134     0A FB 61 FC | 	wrlong	result1, arg02
21138     18 14 86 F1 | 	sub	arg02, #24
2113c                 | LR__3690
2113c     10 13 02 F6 | 	mov	arg01, local02
21140     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
21144     00 FA 0D F2 | 	cmp	result1, #0 wz
21148     42 F1 00 5F 
2114c     00 23 06 56 |  if_ne	mov	local03, ##31622400
21150     99 F0 00 AF 
21154     80 23 06 A6 |  if_e	mov	local03, ##31536000
21158     11 1F 12 F2 | 	cmp	local01, local03 wc
2115c                 | ' 	    break;
2115c     01 20 06 31 |  if_ae	add	local02, #1
21160     11 1F 82 31 |  if_ae	sub	local01, local03
21164     D4 FF 9F 3D |  if_ae	jmp	#LR__3690
21168     A8 00 00 FF 
2116c     80 1F 16 FD | 	qdiv	local01, ##86400
21170     10 23 02 F6 | 	mov	local03, local02
21174     03 00 00 FF 
21178     6C 23 86 F1 | 	sub	local03, ##1900
2117c     14 14 06 F1 | 	add	arg02, #20
21180     0A 23 62 FC | 	wrlong	local03, arg02
21184     08 14 06 F1 | 	add	arg02, #8
21188     10 13 02 F6 | 	mov	arg01, local02
2118c     18 20 62 FD | 	getqx	local02
21190     0A 21 62 FC | 	wrlong	local02, arg02
21194     1C 14 86 F1 | 	sub	arg02, #28
21198     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2119c     00 FA 0D F2 | 	cmp	result1, #0 wz
211a0     1D 22 06 56 |  if_ne	mov	local03, #29
211a4     1C 22 06 A6 |  if_e	mov	local03, #28
211a8     02 00 00 FF 
211ac     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
211b0     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
211b4     02 00 00 FF 
211b8     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
211bc                 | ' 
211bc                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
211bc                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
211bc     00 12 06 F6 | 	mov	arg01, #0
211c0     97 2A 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
211c4                 | LR__3691
211c4     09 23 02 F6 | 	mov	local03, arg01
211c8     02 22 66 F0 | 	shl	local03, #2
211cc     02 00 00 FF 
211d0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
211d4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
211d8     11 23 02 FB | 	rdlong	local03, local03
211dc     11 21 52 F2 | 	cmps	local02, local03 wc
211e0     02 00 00 FF 
211e4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
211e8     2C 00 90 CD |  if_b	jmp	#LR__3693
211ec     09 23 02 F6 | 	mov	local03, arg01
211f0     02 22 66 F0 | 	shl	local03, #2
211f4     02 00 00 FF 
211f8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
211fc     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
21200     11 23 02 FB | 	rdlong	local03, local03
21204     11 21 82 F1 | 	sub	local02, local03
21208     01 12 06 F1 | 	add	arg01, #1
2120c     02 00 00 FF 
21210     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
21214     AC FF 9F FD | 	jmp	#LR__3691
21218                 | LR__3692
21218                 | LR__3693
21218     A8 00 00 FF 
2121c     80 1F 16 FD | 	qdiv	local01, ##86400
21220     10 14 06 F1 | 	add	arg02, #16
21224     0A 13 62 FC | 	wrlong	arg01, arg02
21228     01 20 06 F1 | 	add	local02, #1
2122c     04 14 86 F1 | 	sub	arg02, #4
21230     0A 21 62 FC | 	wrlong	local02, arg02
21234     19 1E 62 FD | 	getqy	local01
21238     07 00 00 FF 
2123c     10 1E 16 FD | 	qdiv	local01, ##3600
21240     18 22 62 FD | 	getqx	local03
21244     07 00 00 FF 
21248     10 1E 16 FD | 	qdiv	local01, ##3600
2124c     04 14 86 F1 | 	sub	arg02, #4
21250     0A 23 62 FC | 	wrlong	local03, arg02
21254     19 1E 62 FD | 	getqy	local01
21258     3C 1E 16 FD | 	qdiv	local01, #60
2125c     18 22 62 FD | 	getqx	local03
21260     3C 1E 16 FD | 	qdiv	local01, #60
21264     04 14 86 F1 | 	sub	arg02, #4
21268     0A 23 62 FC | 	wrlong	local03, arg02
2126c     04 14 86 F1 | 	sub	arg02, #4
21270                 | '         stm->tm_isdst = 0;
21270                 | ' 
21270                 | ' ;
21270                 | '         return stm;
21270     0A FB 01 F6 | 	mov	result1, arg02
21274     19 22 62 FD | 	getqy	local03
21278     0A 23 62 FC | 	wrlong	local03, arg02
2127c     20 14 06 F1 | 	add	arg02, #32
21280     0A 01 68 FC | 	wrlong	#0, arg02
21284     A7 F0 03 F6 | 	mov	ptra, fp
21288     B2 00 A0 FD | 	call	#popregs_
2128c                 | _fatfs_cc__gmtime_r_ret
2128c     2D 00 64 FD | 	ret
21290                 | 
21290                 | _fatfs_cc__tzset
21290     16 01 00 FF 
21294     D1 13 06 F6 | 	mov	arg01, ##@LR__4005
21298     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2129c     FD 12 02 F6 | 	mov	arg01, result1
212a0     02 00 00 FF 
212a4     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
212a8     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
212ac     02 00 00 FF 
212b0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
212b4     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
212b8     02 00 00 FF 
212bc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
212c0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
212c4     02 00 00 FF 
212c8     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
212cc                 | _fatfs_cc__tzset_ret
212cc     2D 00 64 FD | 	ret
212d0                 | 
212d0                 | _fatfs_cc_getenv
212d0     06 4A 05 F6 | 	mov	COUNT_, #6
212d4     A8 00 A0 FD | 	call	#pushregs_
212d8     09 1F 02 F6 | 	mov	local01, arg01
212dc     09 21 02 F6 | 	mov	local02, arg01
212e0     97 06 48 FB | 	callpa	#(@LR__3701-@LR__3700)>>2,fcache_load_ptr_
212e4                 | LR__3700
212e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
212e8     01 20 06 51 |  if_ne	add	local02, #1
212ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3700
212f0                 | LR__3701
212f0     09 21 82 F1 | 	sub	local02, arg01
212f4     10 FB 01 F6 | 	mov	result1, local02
212f8     02 00 00 FF 
212fc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
21300     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
21304     02 00 00 FF 
21308     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2130c                 | '             return 0;
2130c     00 FA 05 A6 |  if_e	mov	result1, #0
21310     5C 00 90 AD |  if_e	jmp	#LR__3704
21314                 | ' 
21314                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
21314     02 00 00 FF 
21318     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2131c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
21320     02 00 00 FF 
21324     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
21328                 | LR__3702
21328     11 25 0A FB | 	rdlong	local04, local03 wz
2132c     3C 00 90 AD |  if_e	jmp	#LR__3703
21330     12 13 02 F6 | 	mov	arg01, local04
21334     0F 15 02 F6 | 	mov	arg02, local01
21338     10 17 02 F6 | 	mov	arg03, local02
2133c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
21340     00 FA 0D F2 | 	cmp	result1, #0 wz
21344     10 27 02 A6 |  if_e	mov	local05, local02
21348     12 27 02 A1 |  if_e	add	local05, local04
2134c     13 29 C2 AA |  if_e	rdbyte	local06, local05
21350     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
21354                 | ' 			return name+len+1;
21354     10 25 02 A1 |  if_e	add	local04, local02
21358     01 24 06 A1 |  if_e	add	local04, #1
2135c     12 FB 01 A6 |  if_e	mov	result1, local04
21360     0C 00 90 AD |  if_e	jmp	#LR__3704
21364     04 22 06 F1 | 	add	local03, #4
21368     BC FF 9F FD | 	jmp	#LR__3702
2136c                 | LR__3703
2136c                 | ' 	}
2136c                 | ' 	return 0;
2136c     00 FA 05 F6 | 	mov	result1, #0
21370                 | LR__3704
21370     A7 F0 03 F6 | 	mov	ptra, fp
21374     B2 00 A0 FD | 	call	#popregs_
21378                 | _fatfs_cc_getenv_ret
21378     2D 00 64 FD | 	ret
2137c                 | 
2137c                 | _fatfs_cc__get_fattime
2137c     00 4A 05 F6 | 	mov	COUNT_, #0
21380     A8 00 A0 FD | 	call	#pushregs_
21384     34 F0 07 F1 | 	add	ptra, #52
21388     00 12 06 F6 | 	mov	arg01, #0
2138c     38 FB BF FD | 	call	#_fatfs_cc_time
21390     04 4E 05 F1 | 	add	fp, #4
21394     A7 FA 61 FC | 	wrlong	result1, fp
21398     A7 12 02 F6 | 	mov	arg01, fp
2139c     0C 4E 05 F1 | 	add	fp, #12
213a0     A7 14 02 F6 | 	mov	arg02, fp
213a4     10 4E 85 F1 | 	sub	fp, #16
213a8     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
213ac     24 4E 05 F1 | 	add	fp, #36
213b0     A7 14 02 FB | 	rdlong	arg02, fp
213b4     50 14 86 F1 | 	sub	arg02, #80
213b8     09 14 66 F0 | 	shl	arg02, #9
213bc     04 4E 85 F1 | 	sub	fp, #4
213c0     A7 FA 01 FB | 	rdlong	result1, fp
213c4     01 FA 05 F1 | 	add	result1, #1
213c8     05 FA 65 F0 | 	shl	result1, #5
213cc     FD 14 42 F5 | 	or	arg02, result1
213d0     04 4E 85 F1 | 	sub	fp, #4
213d4     A7 FA 01 FB | 	rdlong	result1, fp
213d8     FD 14 42 F5 | 	or	arg02, result1
213dc     14 4E 85 F1 | 	sub	fp, #20
213e0     A7 14 62 FC | 	wrlong	arg02, fp
213e4     10 4E 05 F1 | 	add	fp, #16
213e8     A7 14 02 FB | 	rdlong	arg02, fp
213ec     0B 14 66 F0 | 	shl	arg02, #11
213f0     04 4E 85 F1 | 	sub	fp, #4
213f4     A7 FA 01 FB | 	rdlong	result1, fp
213f8     05 FA 65 F0 | 	shl	result1, #5
213fc     FD 14 42 F5 | 	or	arg02, result1
21400     04 4E 85 F1 | 	sub	fp, #4
21404     A7 FA 01 FB | 	rdlong	result1, fp
21408     FD 14 42 F5 | 	or	arg02, result1
2140c     04 4E 85 F1 | 	sub	fp, #4
21410     A7 14 62 FC | 	wrlong	arg02, fp
21414                 | ' 
21414                 | '     now = time(0);
21414                 | '     _gmtime_r (&now, &date);
21414                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
21414                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
21414                 | '     return (ffdate << 16) | fftime;
21414     04 4E 85 F1 | 	sub	fp, #4
21418     A7 FA 01 FB | 	rdlong	result1, fp
2141c     10 FA 65 F0 | 	shl	result1, #16
21420     08 4E 85 F1 | 	sub	fp, #8
21424     0A FB 41 F5 | 	or	result1, arg02
21428     A7 F0 03 F6 | 	mov	ptra, fp
2142c     B2 00 A0 FD | 	call	#popregs_
21430                 | _fatfs_cc__get_fattime_ret
21430     2D 00 64 FD | 	ret
21434                 | 
21434                 | _fatfs_cc_unixtime_0725
21434     00 4A 05 F6 | 	mov	COUNT_, #0
21438     A8 00 A0 FD | 	call	#pushregs_
2143c     34 F0 07 F1 | 	add	ptra, #52
21440     04 4E 05 F1 | 	add	fp, #4
21444     A7 12 62 FC | 	wrlong	arg01, fp
21448     04 4E 05 F1 | 	add	fp, #4
2144c     A7 14 62 FC | 	wrlong	arg02, fp
21450     04 4E 85 F1 | 	sub	fp, #4
21454     A7 14 02 FB | 	rdlong	arg02, fp
21458     09 14 46 F0 | 	shr	arg02, #9
2145c     7F 14 06 F5 | 	and	arg02, #127
21460     50 FA 05 F6 | 	mov	result1, #80
21464     0A FB 01 F1 | 	add	result1, arg02
21468     20 4E 05 F1 | 	add	fp, #32
2146c     A7 FA 61 FC | 	wrlong	result1, fp
21470     20 4E 85 F1 | 	sub	fp, #32
21474     A7 FA 01 FB | 	rdlong	result1, fp
21478     05 FA 45 F0 | 	shr	result1, #5
2147c     FD FA 41 F8 | 	getnib	result1, result1, #0
21480     01 FA 85 F1 | 	sub	result1, #1
21484     1C 4E 05 F1 | 	add	fp, #28
21488     A7 FA 61 FC | 	wrlong	result1, fp
2148c     1C 4E 85 F1 | 	sub	fp, #28
21490     A7 FA 01 FB | 	rdlong	result1, fp
21494     1F FA 05 F5 | 	and	result1, #31
21498     18 4E 05 F1 | 	add	fp, #24
2149c     A7 FA 61 FC | 	wrlong	result1, fp
214a0     14 4E 85 F1 | 	sub	fp, #20
214a4     A7 FA 01 FB | 	rdlong	result1, fp
214a8     0B FA 45 F0 | 	shr	result1, #11
214ac     1F FA 05 F5 | 	and	result1, #31
214b0     10 4E 05 F1 | 	add	fp, #16
214b4     A7 FA 61 FC | 	wrlong	result1, fp
214b8     10 4E 85 F1 | 	sub	fp, #16
214bc     A7 FA 01 FB | 	rdlong	result1, fp
214c0     05 FA 45 F0 | 	shr	result1, #5
214c4     3F FA 05 F5 | 	and	result1, #63
214c8     0C 4E 05 F1 | 	add	fp, #12
214cc     A7 FA 61 FC | 	wrlong	result1, fp
214d0     0C 4E 85 F1 | 	sub	fp, #12
214d4     A7 14 02 FB | 	rdlong	arg02, fp
214d8     1F 14 06 F5 | 	and	arg02, #31
214dc     01 14 66 F0 | 	shl	arg02, #1
214e0     08 4E 05 F1 | 	add	fp, #8
214e4     A7 14 62 FC | 	wrlong	arg02, fp
214e8     A7 12 02 F6 | 	mov	arg01, fp
214ec     10 4E 85 F1 | 	sub	fp, #16
214f0     4C FA BF FD | 	call	#_fatfs_cc_mktime
214f4     0C 4E 05 F1 | 	add	fp, #12
214f8     A7 FA 61 FC | 	wrlong	result1, fp
214fc                 | ' 
214fc                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
214fc                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
214fc                 | '     date.tm_mday = (dosdate & 0x1f);
214fc                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
214fc                 | '     date.tm_min = (dostime >> 5) & 0x3f;
214fc                 | '     date.tm_sec = (dostime & 0x1f) << 1;
214fc                 | ' 
214fc                 | '     t = mktime(&date);
214fc                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
214fc                 | '     return t;
214fc     0C 4E 85 F1 | 	sub	fp, #12
21500     A7 F0 03 F6 | 	mov	ptra, fp
21504     B2 00 A0 FD | 	call	#popregs_
21508                 | _fatfs_cc_unixtime_0725_ret
21508     2D 00 64 FD | 	ret
2150c                 | 
2150c                 | _fatfs_cc__set_dos_error_0727
2150c     09 01 02 F6 | 	mov	_var01, arg01
21510                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21510                 | '     switch (derr) {
21510     14 00 26 F3 | 	fle	_var01, #20
21514     30 00 62 FD | 	jmprel	_var01
21518                 | LR__3710
21518     50 00 90 FD | 	jmp	#LR__3711
2151c     84 00 90 FD | 	jmp	#LR__3725
21520     80 00 90 FD | 	jmp	#LR__3726
21524     7C 00 90 FD | 	jmp	#LR__3727
21528     48 00 90 FD | 	jmp	#LR__3712
2152c     44 00 90 FD | 	jmp	#LR__3713
21530     40 00 90 FD | 	jmp	#LR__3714
21534     44 00 90 FD | 	jmp	#LR__3715
21538     48 00 90 FD | 	jmp	#LR__3717
2153c     54 00 90 FD | 	jmp	#LR__3720
21540     38 00 90 FD | 	jmp	#LR__3716
21544     4C 00 90 FD | 	jmp	#LR__3721
21548     48 00 90 FD | 	jmp	#LR__3722
2154c     44 00 90 FD | 	jmp	#LR__3723
21550     50 00 90 FD | 	jmp	#LR__3728
21554     4C 00 90 FD | 	jmp	#LR__3728
21558     48 00 90 FD | 	jmp	#LR__3728
2155c     2C 00 90 FD | 	jmp	#LR__3718
21560     38 00 90 FD | 	jmp	#LR__3724
21564     2C 00 90 FD | 	jmp	#LR__3719
21568     38 00 90 FD | 	jmp	#LR__3728
2156c                 | LR__3711
2156c     00 02 06 F6 | 	mov	_var02, #0
21570                 | '         r = 0;
21570                 | '         break;
21570     34 00 90 FD | 	jmp	#LR__3729
21574                 | LR__3712
21574                 | LR__3713
21574                 | LR__3714
21574     04 02 06 F6 | 	mov	_var02, #4
21578                 | '         r =  4 ;
21578                 | '         break;
21578     2C 00 90 FD | 	jmp	#LR__3729
2157c                 | LR__3715
2157c                 | LR__3716
2157c     06 02 06 F6 | 	mov	_var02, #6
21580                 | '         r =  6 ;
21580                 | '         break;
21580     24 00 90 FD | 	jmp	#LR__3729
21584                 | LR__3717
21584     09 02 06 F6 | 	mov	_var02, #9
21588                 | '         r =  9 ;
21588                 | '         break;
21588     1C 00 90 FD | 	jmp	#LR__3729
2158c                 | LR__3718
2158c     07 02 06 F6 | 	mov	_var02, #7
21590                 | '         r =  7 ;
21590                 | '         break;
21590     14 00 90 FD | 	jmp	#LR__3729
21594                 | LR__3719
21594                 | LR__3720
21594                 | LR__3721
21594                 | LR__3722
21594                 | LR__3723
21594     0A 02 06 F6 | 	mov	_var02, #10
21598                 | '         r =  10 ;
21598                 | '         break;
21598     0C 00 90 FD | 	jmp	#LR__3729
2159c                 | LR__3724
2159c     0B 02 06 F6 | 	mov	_var02, #11
215a0                 | '         r =  11 ;
215a0                 | '         break;
215a0     04 00 90 FD | 	jmp	#LR__3729
215a4                 | LR__3725
215a4                 | LR__3726
215a4                 | LR__3727
215a4                 | LR__3728
215a4     0C 02 06 F6 | 	mov	_var02, #12
215a8                 | '         r =  12 ;
215a8                 | '         break;
215a8                 | LR__3729
215a8                 | '     }
215a8                 | '     return _seterror(r);
215a8     00 02 4E F2 | 	cmps	_var02, #0 wz
215ac     20 E8 05 F1 | 	add	ptr___system__dat__, #32
215b0     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
215b4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
215b8     01 FA 65 56 |  if_ne	neg	result1, #1
215bc     00 FA 05 A6 |  if_e	mov	result1, #0
215c0                 | _fatfs_cc__set_dos_error_0727_ret
215c0     2D 00 64 FD | 	ret
215c4                 | 
215c4                 | _fatfs_cc_v_creat
215c4     04 4A 05 F6 | 	mov	COUNT_, #4
215c8     A8 00 A0 FD | 	call	#pushregs_
215cc     09 1F 02 F6 | 	mov	local01, arg01
215d0     0A 21 02 F6 | 	mov	local02, arg02
215d4     03 00 00 FF 
215d8     3C 12 06 F6 | 	mov	arg01, ##1596
215dc                 | '     return _gc_alloc(size);
215dc     10 14 06 F6 | 	mov	arg02, #16
215e0     6C 5E BF FD | 	call	#__system___gc_doalloc
215e4     FD 22 0A F6 | 	mov	local03, result1 wz
215e8                 | '       return _seterror( 7 );
215e8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
215ec     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
215f0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
215f4     01 FA 65 A6 |  if_e	neg	result1, #1
215f8     58 00 90 AD |  if_e	jmp	#LR__3731
215fc     11 13 02 F6 | 	mov	arg01, local03
21600     00 14 06 F6 | 	mov	arg02, #0
21604     03 00 00 FF 
21608     3C 16 06 F6 | 	mov	arg03, ##1596
2160c     98 00 A0 FD | 	call	#\builtin_bytefill_
21610     02 00 00 FF 
21614     14 22 06 F1 | 	add	local03, ##1044
21618     11 13 02 F6 | 	mov	arg01, local03
2161c     02 00 00 FF 
21620     14 22 86 F1 | 	sub	local03, ##1044
21624     10 15 02 F6 | 	mov	arg02, local02
21628     07 16 06 F6 | 	mov	arg03, #7
2162c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
21630     FD 24 0A F6 | 	mov	local04, result1 wz
21634     14 00 90 AD |  if_e	jmp	#LR__3730
21638     11 13 02 F6 | 	mov	arg01, local03
2163c                 | '     return _gc_free(ptr);
2163c     1C 5F BF FD | 	call	#__system___gc_free
21640                 | '     free(f);
21640                 | '     return _set_dos_error(r);
21640     12 13 02 F6 | 	mov	arg01, local04
21644     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21648     08 00 90 FD | 	jmp	#LR__3731
2164c                 | LR__3730
2164c     0F 23 62 FC | 	wrlong	local03, local01
21650                 | '   }
21650                 | '   fil->vfsdata = f;
21650                 | '   return 0;
21650     00 FA 05 F6 | 	mov	result1, #0
21654                 | LR__3731
21654     A7 F0 03 F6 | 	mov	ptra, fp
21658     B2 00 A0 FD | 	call	#popregs_
2165c                 | _fatfs_cc_v_creat_ret
2165c     2D 00 64 FD | 	ret
21660                 | 
21660                 | _fatfs_cc_v_close
21660     02 4A 05 F6 | 	mov	COUNT_, #2
21664     A8 00 A0 FD | 	call	#pushregs_
21668     09 1F 02 FB | 	rdlong	local01, arg01
2166c     02 00 00 FF 
21670     14 1E 06 F1 | 	add	local01, ##1044
21674     0F 13 02 F6 | 	mov	arg01, local01
21678     02 00 00 FF 
2167c     14 1E 86 F1 | 	sub	local01, ##1044
21680     DC E3 BF FD | 	call	#_fatfs_cc_f_close
21684     FD 20 02 F6 | 	mov	local02, result1
21688     0F 13 02 F6 | 	mov	arg01, local01
2168c                 | '     return _gc_free(ptr);
2168c     CC 5E BF FD | 	call	#__system___gc_free
21690                 | '     FAT_FIL *f = fil->vfsdata;
21690                 | '     r=f_close(&f->fil);
21690                 | '     free(f);
21690                 | '     return _set_dos_error(r);
21690     10 13 02 F6 | 	mov	arg01, local02
21694     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21698     A7 F0 03 F6 | 	mov	ptra, fp
2169c     B2 00 A0 FD | 	call	#popregs_
216a0                 | _fatfs_cc_v_close_ret
216a0     2D 00 64 FD | 	ret
216a4                 | 
216a4                 | _fatfs_cc_v_opendir
216a4     04 4A 05 F6 | 	mov	COUNT_, #4
216a8     A8 00 A0 FD | 	call	#pushregs_
216ac     09 1F 02 F6 | 	mov	local01, arg01
216b0     0A 21 02 F6 | 	mov	local02, arg02
216b4     30 12 06 F6 | 	mov	arg01, #48
216b8                 | '     return _gc_alloc(size);
216b8     10 14 06 F6 | 	mov	arg02, #16
216bc     90 5D BF FD | 	call	#__system___gc_doalloc
216c0     FD 22 0A F6 | 	mov	local03, result1 wz
216c4                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
216c4                 | '       return _seterror( 7 );
216c4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
216c8     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
216cc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
216d0     01 FA 65 A6 |  if_e	neg	result1, #1
216d4     34 00 90 AD |  if_e	jmp	#LR__3741
216d8     10 15 02 F6 | 	mov	arg02, local02
216dc     11 13 02 F6 | 	mov	arg01, local03
216e0     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
216e4     FD 24 0A F6 | 	mov	local04, result1 wz
216e8     14 00 90 AD |  if_e	jmp	#LR__3740
216ec     11 13 02 F6 | 	mov	arg01, local03
216f0                 | '     return _gc_free(ptr);
216f0     68 5E BF FD | 	call	#__system___gc_free
216f4                 | '         free(f);
216f4                 | '         return _set_dos_error(r);
216f4     12 13 02 F6 | 	mov	arg01, local04
216f8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0727
216fc     0C 00 90 FD | 	jmp	#LR__3741
21700                 | LR__3740
21700     04 1E 06 F1 | 	add	local01, #4
21704     0F 23 62 FC | 	wrlong	local03, local01
21708                 | '     }
21708                 | '     dir->vfsdata = f;
21708                 | '     return 0;
21708     00 FA 05 F6 | 	mov	result1, #0
2170c                 | LR__3741
2170c     A7 F0 03 F6 | 	mov	ptra, fp
21710     B2 00 A0 FD | 	call	#popregs_
21714                 | _fatfs_cc_v_opendir_ret
21714     2D 00 64 FD | 	ret
21718                 | 
21718                 | _fatfs_cc_v_closedir
21718     02 4A 05 F6 | 	mov	COUNT_, #2
2171c     A8 00 A0 FD | 	call	#pushregs_
21720     04 12 06 F1 | 	add	arg01, #4
21724     09 1F 02 FB | 	rdlong	local01, arg01
21728     0F 13 02 F6 | 	mov	arg01, local01
2172c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
21730     FD 20 02 F6 | 	mov	local02, result1
21734     0F 13 02 F6 | 	mov	arg01, local01
21738                 | '     return _gc_free(ptr);
21738     20 5E BF FD | 	call	#__system___gc_free
2173c     00 20 0E F2 | 	cmp	local02, #0 wz
21740     10 13 02 56 |  if_ne	mov	arg01, local02
21744     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0727
21748                 | '     return r;
21748     10 FB 01 F6 | 	mov	result1, local02
2174c     A7 F0 03 F6 | 	mov	ptra, fp
21750     B2 00 A0 FD | 	call	#popregs_
21754                 | _fatfs_cc_v_closedir_ret
21754     2D 00 64 FD | 	ret
21758                 | 
21758                 | _fatfs_cc_v_readdir
21758     01 4A 05 F6 | 	mov	COUNT_, #1
2175c     A8 00 A0 FD | 	call	#pushregs_
21760     2C F1 07 F1 | 	add	ptra, #300
21764     04 4E 05 F1 | 	add	fp, #4
21768     A7 12 62 FC | 	wrlong	arg01, fp
2176c     04 4E 05 F1 | 	add	fp, #4
21770     A7 14 62 FC | 	wrlong	arg02, fp
21774     04 4E 85 F1 | 	sub	fp, #4
21778     A7 16 02 FB | 	rdlong	arg03, fp
2177c     04 16 06 F1 | 	add	arg03, #4
21780     0B 13 02 FB | 	rdlong	arg01, arg03
21784     08 4E 05 F1 | 	add	fp, #8
21788     A7 14 02 F6 | 	mov	arg02, fp
2178c     0C 4E 85 F1 | 	sub	fp, #12
21790     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
21794     28 4F 05 F1 | 	add	fp, #296
21798     A7 FA 61 FC | 	wrlong	result1, fp
2179c     28 4F 85 F1 | 	sub	fp, #296
217a0     00 FA 0D F2 | 	cmp	result1, #0 wz
217a4     14 00 90 AD |  if_e	jmp	#LR__3750
217a8                 | '         return _set_dos_error(r);
217a8     28 4F 05 F1 | 	add	fp, #296
217ac     A7 12 02 FB | 	rdlong	arg01, fp
217b0     28 4F 85 F1 | 	sub	fp, #296
217b4     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0727
217b8     C4 00 90 FD | 	jmp	#LR__3753
217bc                 | LR__3750
217bc     28 4E 05 F1 | 	add	fp, #40
217c0     A7 16 CA FA | 	rdbyte	arg03, fp wz
217c4     28 4E 85 F1 | 	sub	fp, #40
217c8                 | '         return -1;
217c8     01 FA 65 A6 |  if_e	neg	result1, #1
217cc     B0 00 90 AD |  if_e	jmp	#LR__3753
217d0     08 4E 05 F1 | 	add	fp, #8
217d4     A7 12 02 FB | 	rdlong	arg01, fp
217d8     20 4E 05 F1 | 	add	fp, #32
217dc     A7 14 02 F6 | 	mov	arg02, fp
217e0     28 4E 85 F1 | 	sub	fp, #40
217e4     3F 16 06 F6 | 	mov	arg03, #63
217e8     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
217ec     08 4E 05 F1 | 	add	fp, #8
217f0     A7 16 02 FB | 	rdlong	arg03, fp
217f4     3F 16 06 F1 | 	add	arg03, #63
217f8     0B 01 48 FC | 	wrbyte	#0, arg03
217fc     0C 4E 05 F1 | 	add	fp, #12
21800     A7 16 C2 FA | 	rdbyte	arg03, fp
21804     14 4E 85 F1 | 	sub	fp, #20
21808     10 16 CE F7 | 	test	arg03, #16 wz
2180c     18 00 90 AD |  if_e	jmp	#LR__3751
21810     08 4E 05 F1 | 	add	fp, #8
21814     A7 16 02 FB | 	rdlong	arg03, fp
21818     08 4E 85 F1 | 	sub	fp, #8
2181c     50 16 06 F1 | 	add	arg03, #80
21820     0B 03 48 FC | 	wrbyte	#1, arg03
21824     14 00 90 FD | 	jmp	#LR__3752
21828                 | LR__3751
21828     08 4E 05 F1 | 	add	fp, #8
2182c     A7 16 02 FB | 	rdlong	arg03, fp
21830     08 4E 85 F1 | 	sub	fp, #8
21834     50 16 06 F1 | 	add	arg03, #80
21838     0B 01 48 FC | 	wrbyte	#0, arg03
2183c                 | LR__3752
2183c     08 4E 05 F1 | 	add	fp, #8
21840     A7 16 02 FB | 	rdlong	arg03, fp
21844     04 4E 05 F1 | 	add	fp, #4
21848     A7 14 02 FB | 	rdlong	arg02, fp
2184c     48 16 06 F1 | 	add	arg03, #72
21850     0B 15 62 FC | 	wrlong	arg02, arg03
21854     04 4E 85 F1 | 	sub	fp, #4
21858     A7 1E 02 FB | 	rdlong	local01, fp
2185c     08 4E 05 F1 | 	add	fp, #8
21860     A7 12 E2 FA | 	rdword	arg01, fp
21864     02 4E 05 F1 | 	add	fp, #2
21868     A7 14 E2 FA | 	rdword	arg02, fp
2186c     12 4E 85 F1 | 	sub	fp, #18
21870     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0725
21874     4C 1E 06 F1 | 	add	local01, #76
21878     0F FB 61 FC | 	wrlong	result1, local01
2187c                 | '         ent->d_type =  (0) ;
2187c                 | '     }
2187c                 | '     ent->d_size = finfo.fsize;
2187c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2187c                 | '     return 0;
2187c     00 FA 05 F6 | 	mov	result1, #0
21880                 | LR__3753
21880     A7 F0 03 F6 | 	mov	ptra, fp
21884     B2 00 A0 FD | 	call	#popregs_
21888                 | _fatfs_cc_v_readdir_ret
21888     2D 00 64 FD | 	ret
2188c                 | 
2188c                 | _fatfs_cc_v_stat
2188c     03 4A 05 F6 | 	mov	COUNT_, #3
21890     A8 00 A0 FD | 	call	#pushregs_
21894     30 F1 07 F1 | 	add	ptra, #304
21898     04 4E 05 F1 | 	add	fp, #4
2189c     A7 12 62 FC | 	wrlong	arg01, fp
218a0     04 4E 05 F1 | 	add	fp, #4
218a4     A7 14 62 FC | 	wrlong	arg02, fp
218a8     08 4E 85 F1 | 	sub	fp, #8
218ac     0A 13 02 F6 | 	mov	arg01, arg02
218b0     00 14 06 F6 | 	mov	arg02, #0
218b4     30 16 06 F6 | 	mov	arg03, #48
218b8     98 00 A0 FD | 	call	#\builtin_bytefill_
218bc     04 4E 05 F1 | 	add	fp, #4
218c0     A7 FA 01 FB | 	rdlong	result1, fp
218c4     04 4E 85 F1 | 	sub	fp, #4
218c8     FD FA C9 FA | 	rdbyte	result1, result1 wz
218cc     2C 00 90 AD |  if_e	jmp	#LR__3760
218d0     04 4E 05 F1 | 	add	fp, #4
218d4     A7 FA 01 FB | 	rdlong	result1, fp
218d8     04 4E 85 F1 | 	sub	fp, #4
218dc     FD FA C1 FA | 	rdbyte	result1, result1
218e0     2E FA 0D F2 | 	cmp	result1, #46 wz
218e4     04 4E 05 A1 |  if_e	add	fp, #4
218e8     A7 1E 02 AB |  if_e	rdlong	local01, fp
218ec     04 4E 85 A1 |  if_e	sub	fp, #4
218f0     01 1E 06 A1 |  if_e	add	local01, #1
218f4     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
218f8     18 00 90 5D |  if_ne	jmp	#LR__3761
218fc                 | LR__3760
218fc     18 4E 05 F1 | 	add	fp, #24
21900     A7 20 48 FC | 	wrbyte	#16, fp
21904     0C 4E 85 F1 | 	sub	fp, #12
21908     A7 00 68 FC | 	wrlong	#0, fp
2190c     0C 4E 85 F1 | 	sub	fp, #12
21910     24 00 90 FD | 	jmp	#LR__3762
21914                 | LR__3761
21914     04 4E 05 F1 | 	add	fp, #4
21918     A7 12 02 FB | 	rdlong	arg01, fp
2191c     0C 4E 05 F1 | 	add	fp, #12
21920     A7 14 02 F6 | 	mov	arg02, fp
21924     10 4E 85 F1 | 	sub	fp, #16
21928     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2192c     0C 4E 05 F1 | 	add	fp, #12
21930     A7 FA 61 FC | 	wrlong	result1, fp
21934     0C 4E 85 F1 | 	sub	fp, #12
21938                 | LR__3762
21938     0C 4E 05 F1 | 	add	fp, #12
2193c     A7 20 0A FB | 	rdlong	local02, fp wz
21940     0C 4E 85 F1 | 	sub	fp, #12
21944     14 00 90 AD |  if_e	jmp	#LR__3763
21948                 | '         return _set_dos_error(r);
21948     0C 4E 05 F1 | 	add	fp, #12
2194c     A7 12 02 FB | 	rdlong	arg01, fp
21950     0C 4E 85 F1 | 	sub	fp, #12
21954     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21958     14 01 90 FD | 	jmp	#LR__3764
2195c                 | LR__3763
2195c     2C 4F 05 F1 | 	add	fp, #300
21960     A7 48 6A FC | 	wrlong	#292, fp
21964     14 4F 85 F1 | 	sub	fp, #276
21968     A7 22 C2 FA | 	rdbyte	local03, fp
2196c     18 4E 85 F1 | 	sub	fp, #24
21970     01 22 CE F7 | 	test	local03, #1 wz
21974     2C 4F 05 51 |  if_ne	add	fp, #300
21978     A7 22 02 5B |  if_ne	rdlong	local03, fp
2197c     92 22 46 55 |  if_ne	or	local03, #146
21980     A7 22 62 5C |  if_ne	wrlong	local03, fp
21984     2C 4F 85 51 |  if_ne	sub	fp, #300
21988     18 4E 05 F1 | 	add	fp, #24
2198c     A7 22 C2 FA | 	rdbyte	local03, fp
21990     18 4E 85 F1 | 	sub	fp, #24
21994     10 22 CE F7 | 	test	local03, #16 wz
21998     2C 4F 05 51 |  if_ne	add	fp, #300
2199c     A7 22 02 5B |  if_ne	rdlong	local03, fp
219a0     08 00 00 5F 
219a4     49 22 46 55 |  if_ne	or	local03, ##4169
219a8     A7 22 62 5C |  if_ne	wrlong	local03, fp
219ac     2C 4F 85 51 |  if_ne	sub	fp, #300
219b0     08 4E 05 F1 | 	add	fp, #8
219b4     A7 22 02 FB | 	rdlong	local03, fp
219b8     24 4F 05 F1 | 	add	fp, #292
219bc     A7 20 02 FB | 	rdlong	local02, fp
219c0     08 22 06 F1 | 	add	local03, #8
219c4     11 21 62 FC | 	wrlong	local02, local03
219c8     24 4F 85 F1 | 	sub	fp, #292
219cc     A7 22 02 FB | 	rdlong	local03, fp
219d0     0C 22 06 F1 | 	add	local03, #12
219d4     11 03 68 FC | 	wrlong	#1, local03
219d8     A7 22 02 FB | 	rdlong	local03, fp
219dc     08 4E 05 F1 | 	add	fp, #8
219e0     A7 20 02 FB | 	rdlong	local02, fp
219e4     18 22 06 F1 | 	add	local03, #24
219e8     11 21 62 FC | 	wrlong	local02, local03
219ec     08 4E 85 F1 | 	sub	fp, #8
219f0     A7 22 02 FB | 	rdlong	local03, fp
219f4     1C 22 06 F1 | 	add	local03, #28
219f8     01 00 80 FF 
219fc     11 01 68 FC | 	wrlong	##512, local03
21a00     A7 20 02 FB | 	rdlong	local02, fp
21a04     10 23 02 F6 | 	mov	local03, local02
21a08     18 20 06 F1 | 	add	local02, #24
21a0c     10 21 02 FB | 	rdlong	local02, local02
21a10     FF 21 06 F1 | 	add	local02, #511
21a14     10 21 52 F6 | 	abs	local02, local02 wc
21a18     09 20 46 F0 | 	shr	local02, #9
21a1c     10 21 82 F6 | 	negc	local02, local02
21a20     20 22 06 F1 | 	add	local03, #32
21a24     11 21 62 FC | 	wrlong	local02, local03
21a28     A7 20 02 FB | 	rdlong	local02, fp
21a2c     10 23 02 F6 | 	mov	local03, local02
21a30     10 1F 02 F6 | 	mov	local01, local02
21a34     0C 4E 05 F1 | 	add	fp, #12
21a38     A7 12 E2 FA | 	rdword	arg01, fp
21a3c     02 4E 05 F1 | 	add	fp, #2
21a40     A7 14 E2 FA | 	rdword	arg02, fp
21a44     16 4E 85 F1 | 	sub	fp, #22
21a48     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0725
21a4c     2C 1E 06 F1 | 	add	local01, #44
21a50     0F FB 61 FC | 	wrlong	result1, local01
21a54     28 20 06 F1 | 	add	local02, #40
21a58     10 FB 61 FC | 	wrlong	result1, local02
21a5c     24 22 06 F1 | 	add	local03, #36
21a60     11 FB 61 FC | 	wrlong	result1, local03
21a64                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
21a64                 | '     }
21a64                 | '     buf->st_mode = mode;
21a64                 | '     buf->st_nlink = 1;
21a64                 | '     buf->st_size = finfo.fsize;
21a64                 | '     buf->st_blksize = 512;
21a64                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
21a64                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
21a64                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21a64                 | '     return r;
21a64     0C 4E 05 F1 | 	add	fp, #12
21a68     A7 FA 01 FB | 	rdlong	result1, fp
21a6c     0C 4E 85 F1 | 	sub	fp, #12
21a70                 | LR__3764
21a70     A7 F0 03 F6 | 	mov	ptra, fp
21a74     B2 00 A0 FD | 	call	#popregs_
21a78                 | _fatfs_cc_v_stat_ret
21a78     2D 00 64 FD | 	ret
21a7c                 | 
21a7c                 | _fatfs_cc_v_read
21a7c     00 4A 05 F6 | 	mov	COUNT_, #0
21a80     A8 00 A0 FD | 	call	#pushregs_
21a84     1C F0 07 F1 | 	add	ptra, #28
21a88     04 4E 05 F1 | 	add	fp, #4
21a8c     A7 12 62 FC | 	wrlong	arg01, fp
21a90     04 4E 05 F1 | 	add	fp, #4
21a94     A7 14 62 FC | 	wrlong	arg02, fp
21a98     04 4E 05 F1 | 	add	fp, #4
21a9c     A7 16 62 FC | 	wrlong	arg03, fp
21aa0     08 4E 85 F1 | 	sub	fp, #8
21aa4     A7 12 02 FB | 	rdlong	arg01, fp
21aa8     09 13 0A FB | 	rdlong	arg01, arg01 wz
21aac     0C 4E 05 F1 | 	add	fp, #12
21ab0     A7 12 62 FC | 	wrlong	arg01, fp
21ab4     10 4E 85 F1 | 	sub	fp, #16
21ab8                 | '         return _seterror( 5 );
21ab8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21abc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21ac0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21ac4     01 FA 65 A6 |  if_e	neg	result1, #1
21ac8     B8 00 90 AD |  if_e	jmp	#LR__3772
21acc     10 4E 05 F1 | 	add	fp, #16
21ad0     A7 12 02 FB | 	rdlong	arg01, fp
21ad4     02 00 00 FF 
21ad8     14 12 06 F1 | 	add	arg01, ##1044
21adc     08 4E 85 F1 | 	sub	fp, #8
21ae0     A7 14 02 FB | 	rdlong	arg02, fp
21ae4     04 4E 05 F1 | 	add	fp, #4
21ae8     A7 16 02 FB | 	rdlong	arg03, fp
21aec     0C 4E 05 F1 | 	add	fp, #12
21af0     A7 18 02 F6 | 	mov	arg04, fp
21af4     18 4E 85 F1 | 	sub	fp, #24
21af8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
21afc     14 4E 05 F1 | 	add	fp, #20
21b00     A7 FA 61 FC | 	wrlong	result1, fp
21b04     14 4E 85 F1 | 	sub	fp, #20
21b08     00 FA 0D F2 | 	cmp	result1, #0 wz
21b0c     34 00 90 AD |  if_e	jmp	#LR__3770
21b10     04 4E 05 F1 | 	add	fp, #4
21b14     A7 18 02 FB | 	rdlong	arg04, fp
21b18     0C 17 02 F6 | 	mov	arg03, arg04
21b1c     08 18 06 F1 | 	add	arg04, #8
21b20     0C 19 02 FB | 	rdlong	arg04, arg04
21b24     20 18 46 F5 | 	or	arg04, #32
21b28     08 16 06 F1 | 	add	arg03, #8
21b2c     0B 19 62 FC | 	wrlong	arg04, arg03
21b30                 | '         fil->state |=  (0x20) ;
21b30                 | '         return _set_dos_error(r);
21b30     10 4E 05 F1 | 	add	fp, #16
21b34     A7 12 02 FB | 	rdlong	arg01, fp
21b38     14 4E 85 F1 | 	sub	fp, #20
21b3c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21b40     40 00 90 FD | 	jmp	#LR__3772
21b44                 | LR__3770
21b44     18 4E 05 F1 | 	add	fp, #24
21b48     A7 FA 09 FB | 	rdlong	result1, fp wz
21b4c     18 4E 85 F1 | 	sub	fp, #24
21b50     24 00 90 5D |  if_ne	jmp	#LR__3771
21b54     04 4E 05 F1 | 	add	fp, #4
21b58     A7 FA 01 FB | 	rdlong	result1, fp
21b5c     FD 18 02 F6 | 	mov	arg04, result1
21b60     04 4E 85 F1 | 	sub	fp, #4
21b64     08 FA 05 F1 | 	add	result1, #8
21b68     FD FA 01 FB | 	rdlong	result1, result1
21b6c     10 FA 45 F5 | 	or	result1, #16
21b70     08 18 06 F1 | 	add	arg04, #8
21b74     0C FB 61 FC | 	wrlong	result1, arg04
21b78                 | LR__3771
21b78                 | '         fil->state |=  (0x10) ;
21b78                 | '     }
21b78                 | '     return x;
21b78     18 4E 05 F1 | 	add	fp, #24
21b7c     A7 FA 01 FB | 	rdlong	result1, fp
21b80     18 4E 85 F1 | 	sub	fp, #24
21b84                 | LR__3772
21b84     A7 F0 03 F6 | 	mov	ptra, fp
21b88     B2 00 A0 FD | 	call	#popregs_
21b8c                 | _fatfs_cc_v_read_ret
21b8c     2D 00 64 FD | 	ret
21b90                 | 
21b90                 | _fatfs_cc_v_write
21b90     00 4A 05 F6 | 	mov	COUNT_, #0
21b94     A8 00 A0 FD | 	call	#pushregs_
21b98     1C F0 07 F1 | 	add	ptra, #28
21b9c     04 4E 05 F1 | 	add	fp, #4
21ba0     A7 12 62 FC | 	wrlong	arg01, fp
21ba4     04 4E 05 F1 | 	add	fp, #4
21ba8     A7 14 62 FC | 	wrlong	arg02, fp
21bac     04 4E 05 F1 | 	add	fp, #4
21bb0     A7 16 62 FC | 	wrlong	arg03, fp
21bb4     08 4E 85 F1 | 	sub	fp, #8
21bb8     A7 12 02 FB | 	rdlong	arg01, fp
21bbc     09 13 0A FB | 	rdlong	arg01, arg01 wz
21bc0     0C 4E 05 F1 | 	add	fp, #12
21bc4     A7 12 62 FC | 	wrlong	arg01, fp
21bc8     10 4E 85 F1 | 	sub	fp, #16
21bcc                 | '         return _seterror( 5 );
21bcc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21bd0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21bd4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21bd8     01 FA 65 A6 |  if_e	neg	result1, #1
21bdc     84 00 90 AD |  if_e	jmp	#LR__3781
21be0     10 4E 05 F1 | 	add	fp, #16
21be4     A7 12 02 FB | 	rdlong	arg01, fp
21be8     02 00 00 FF 
21bec     14 12 06 F1 | 	add	arg01, ##1044
21bf0     08 4E 85 F1 | 	sub	fp, #8
21bf4     A7 14 02 FB | 	rdlong	arg02, fp
21bf8     04 4E 05 F1 | 	add	fp, #4
21bfc     A7 16 02 FB | 	rdlong	arg03, fp
21c00     0C 4E 05 F1 | 	add	fp, #12
21c04     A7 18 02 F6 | 	mov	arg04, fp
21c08     18 4E 85 F1 | 	sub	fp, #24
21c0c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
21c10     14 4E 05 F1 | 	add	fp, #20
21c14     A7 FA 61 FC | 	wrlong	result1, fp
21c18     14 4E 85 F1 | 	sub	fp, #20
21c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
21c20     34 00 90 AD |  if_e	jmp	#LR__3780
21c24     04 4E 05 F1 | 	add	fp, #4
21c28     A7 18 02 FB | 	rdlong	arg04, fp
21c2c     0C 17 02 F6 | 	mov	arg03, arg04
21c30     08 18 06 F1 | 	add	arg04, #8
21c34     0C 19 02 FB | 	rdlong	arg04, arg04
21c38     20 18 46 F5 | 	or	arg04, #32
21c3c     08 16 06 F1 | 	add	arg03, #8
21c40     0B 19 62 FC | 	wrlong	arg04, arg03
21c44                 | '         fil->state |=  (0x20) ;
21c44                 | '         return _set_dos_error(r);
21c44     10 4E 05 F1 | 	add	fp, #16
21c48     A7 12 02 FB | 	rdlong	arg01, fp
21c4c     14 4E 85 F1 | 	sub	fp, #20
21c50     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21c54     0C 00 90 FD | 	jmp	#LR__3781
21c58                 | LR__3780
21c58                 | '     }
21c58                 | '     return x;
21c58     18 4E 05 F1 | 	add	fp, #24
21c5c     A7 FA 01 FB | 	rdlong	result1, fp
21c60     18 4E 85 F1 | 	sub	fp, #24
21c64                 | LR__3781
21c64     A7 F0 03 F6 | 	mov	ptra, fp
21c68     B2 00 A0 FD | 	call	#popregs_
21c6c                 | _fatfs_cc_v_write_ret
21c6c     2D 00 64 FD | 	ret
21c70                 | 
21c70                 | _fatfs_cc_v_lseek
21c70     04 4A 05 F6 | 	mov	COUNT_, #4
21c74     A8 00 A0 FD | 	call	#pushregs_
21c78     0A 1F 02 F6 | 	mov	local01, arg02
21c7c     0B 21 02 F6 | 	mov	local02, arg03
21c80     09 23 02 FB | 	rdlong	local03, arg01
21c84     02 00 00 FF 
21c88     14 22 0E F1 | 	add	local03, ##1044 wz
21c8c                 | '         return _seterror( 5 );
21c8c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21c90     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21c94     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21c98     01 FA 65 A6 |  if_e	neg	result1, #1
21c9c     4C 00 90 AD |  if_e	jmp	#LR__3792
21ca0     00 20 0E F2 | 	cmp	local02, #0 wz
21ca4     24 00 90 AD |  if_e	jmp	#LR__3790
21ca8     01 20 0E F2 | 	cmp	local02, #1 wz
21cac     14 22 06 A1 |  if_e	add	local03, #20
21cb0     11 25 02 AB |  if_e	rdlong	local04, local03
21cb4     14 22 86 A1 |  if_e	sub	local03, #20
21cb8     12 1F 02 A1 |  if_e	add	local01, local04
21cbc     0C 22 06 51 |  if_ne	add	local03, #12
21cc0     11 25 02 5B |  if_ne	rdlong	local04, local03
21cc4     0C 22 86 51 |  if_ne	sub	local03, #12
21cc8     12 1F 02 51 |  if_ne	add	local01, local04
21ccc                 | LR__3790
21ccc     0F 15 02 F6 | 	mov	arg02, local01
21cd0     11 13 02 F6 | 	mov	arg01, local03
21cd4     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
21cd8     FD 12 0A F6 | 	mov	arg01, result1 wz
21cdc     08 00 90 AD |  if_e	jmp	#LR__3791
21ce0                 | '         return _set_dos_error(result);
21ce0     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21ce4     04 00 90 FD | 	jmp	#LR__3792
21ce8                 | LR__3791
21ce8                 | '     }
21ce8                 | '     return offset;
21ce8     0F FB 01 F6 | 	mov	result1, local01
21cec                 | LR__3792
21cec     A7 F0 03 F6 | 	mov	ptra, fp
21cf0     B2 00 A0 FD | 	call	#popregs_
21cf4                 | _fatfs_cc_v_lseek_ret
21cf4     2D 00 64 FD | 	ret
21cf8                 | 
21cf8                 | _fatfs_cc_v_ioctl
21cf8                 | ' {
21cf8                 | '     return _seterror( 10 );
21cf8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
21cfc     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
21d00     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
21d04     01 FA 65 F6 | 	neg	result1, #1
21d08                 | _fatfs_cc_v_ioctl_ret
21d08     2D 00 64 FD | 	ret
21d0c                 | 
21d0c                 | _fatfs_cc_v_mkdir
21d0c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
21d10     FD 12 02 F6 | 	mov	arg01, result1
21d14                 | ' 
21d14                 | '     r = f_mkdir(name);
21d14                 | '     return _set_dos_error(r);
21d14     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21d18                 | _fatfs_cc_v_mkdir_ret
21d18     2D 00 64 FD | 	ret
21d1c                 | 
21d1c                 | _fatfs_cc_v_remove
21d1c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
21d20     FD 12 02 F6 | 	mov	arg01, result1
21d24                 | ' 
21d24                 | '     r = f_unlink(name);
21d24                 | '     return _set_dos_error(r);
21d24     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21d28                 | _fatfs_cc_v_remove_ret
21d28     2D 00 64 FD | 	ret
21d2c                 | 
21d2c                 | _fatfs_cc_v_rmdir
21d2c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
21d30     FD 12 02 F6 | 	mov	arg01, result1
21d34                 | ' 
21d34                 | '     r = f_unlink(name);
21d34                 | '     return _set_dos_error(r);
21d34     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21d38                 | _fatfs_cc_v_rmdir_ret
21d38     2D 00 64 FD | 	ret
21d3c                 | 
21d3c                 | _fatfs_cc_v_rename
21d3c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
21d40     FD 12 02 F6 | 	mov	arg01, result1
21d44                 | '     return _set_dos_error(r);
21d44     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21d48                 | _fatfs_cc_v_rename_ret
21d48     2D 00 64 FD | 	ret
21d4c                 | 
21d4c                 | _fatfs_cc_v_open
21d4c     07 4A 05 F6 | 	mov	COUNT_, #7
21d50     A8 00 A0 FD | 	call	#pushregs_
21d54     09 1F 02 F6 | 	mov	local01, arg01
21d58     0A 21 02 F6 | 	mov	local02, arg02
21d5c     0B 23 02 F6 | 	mov	local03, arg03
21d60     03 00 00 FF 
21d64     3C 12 06 F6 | 	mov	arg01, ##1596
21d68                 | '     return _gc_alloc(size);
21d68     10 14 06 F6 | 	mov	arg02, #16
21d6c     E0 56 BF FD | 	call	#__system___gc_doalloc
21d70     FD 24 0A F6 | 	mov	local04, result1 wz
21d74                 | '       return _seterror( 7 );
21d74     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21d78     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
21d7c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21d80     01 FA 65 A6 |  if_e	neg	result1, #1
21d84     98 00 90 AD |  if_e	jmp	#LR__3806
21d88     12 13 02 F6 | 	mov	arg01, local04
21d8c     00 14 06 F6 | 	mov	arg02, #0
21d90     03 00 00 FF 
21d94     3C 16 06 F6 | 	mov	arg03, ##1596
21d98     98 00 A0 FD | 	call	#\builtin_bytefill_
21d9c                 | '   switch (flags & 3) {
21d9c     11 27 02 F6 | 	mov	local05, local03
21da0     03 26 0E F5 | 	and	local05, #3 wz
21da4     0C 00 90 AD |  if_e	jmp	#LR__3800
21da8     01 26 0E F2 | 	cmp	local05, #1 wz
21dac     0C 00 90 AD |  if_e	jmp	#LR__3801
21db0     10 00 90 FD | 	jmp	#LR__3802
21db4                 | LR__3800
21db4     01 28 06 F6 | 	mov	local06, #1
21db8                 | '       fs_flags =  0x01 ;
21db8                 | '       break;
21db8     0C 00 90 FD | 	jmp	#LR__3803
21dbc                 | LR__3801
21dbc     02 28 06 F6 | 	mov	local06, #2
21dc0                 | '       fs_flags =  0x02 ;
21dc0                 | '       break;
21dc0     04 00 90 FD | 	jmp	#LR__3803
21dc4                 | LR__3802
21dc4     03 28 06 F6 | 	mov	local06, #3
21dc8                 | '       fs_flags =  0x01  |  0x02 ;
21dc8                 | '       break;
21dc8                 | LR__3803
21dc8     08 22 CE F7 | 	test	local03, #8 wz
21dcc     18 28 46 55 |  if_ne	or	local06, #24
21dd0     08 00 90 5D |  if_ne	jmp	#LR__3804
21dd4     20 22 CE F7 | 	test	local03, #32 wz
21dd8     30 28 46 55 |  if_ne	or	local06, #48
21ddc                 | LR__3804
21ddc     02 00 00 FF 
21de0     14 24 06 F1 | 	add	local04, ##1044
21de4     12 13 02 F6 | 	mov	arg01, local04
21de8     02 00 00 FF 
21dec     14 24 86 F1 | 	sub	local04, ##1044
21df0     10 15 02 F6 | 	mov	arg02, local02
21df4     14 17 02 F6 | 	mov	arg03, local06
21df8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
21dfc     FD 2A 0A F6 | 	mov	local07, result1 wz
21e00     14 00 90 AD |  if_e	jmp	#LR__3805
21e04     12 13 02 F6 | 	mov	arg01, local04
21e08                 | '     return _gc_free(ptr);
21e08     50 57 BF FD | 	call	#__system___gc_free
21e0c                 | '     free(f);
21e0c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21e0c                 | '     return _set_dos_error(r);
21e0c     15 13 02 F6 | 	mov	arg01, local07
21e10     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21e14     08 00 90 FD | 	jmp	#LR__3806
21e18                 | LR__3805
21e18     0F 25 62 FC | 	wrlong	local04, local01
21e1c                 | '   }
21e1c                 | '   fil->vfsdata = f;
21e1c                 | '   return 0;
21e1c     00 FA 05 F6 | 	mov	result1, #0
21e20                 | LR__3806
21e20     A7 F0 03 F6 | 	mov	ptra, fp
21e24     B2 00 A0 FD | 	call	#popregs_
21e28                 | _fatfs_cc_v_open_ret
21e28     2D 00 64 FD | 	ret
21e2c                 | 
21e2c                 | _fatfs_cc_v_flush
21e2c     09 13 02 FB | 	rdlong	arg01, arg01
21e30     02 00 00 FF 
21e34     14 12 0E F1 | 	add	arg01, ##1044 wz
21e38                 | '         return _seterror( 5 );
21e38     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21e3c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21e40     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21e44     01 FA 65 A6 |  if_e	neg	result1, #1
21e48     0C 00 90 AD |  if_e	jmp	#LR__3810
21e4c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
21e50     FD 12 02 F6 | 	mov	arg01, result1
21e54                 | '     }
21e54                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21e54                 | '     result = f_sync(f);
21e54                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21e54                 | '     return _set_dos_error(result);
21e54     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21e58                 | LR__3810
21e58                 | _fatfs_cc_v_flush_ret
21e58     2D 00 64 FD | 	ret
21e5c                 | 
21e5c                 | _fatfs_cc_v_init
21e5c                 | ' {
21e5c                 | '     return 0;
21e5c     00 FA 05 F6 | 	mov	result1, #0
21e60                 | _fatfs_cc_v_init_ret
21e60     2D 00 64 FD | 	ret
21e64                 | 
21e64                 | _fatfs_cc_v_deinit
21e64     16 01 00 FF 
21e68     D4 15 06 F6 | 	mov	arg02, ##@LR__4006
21e6c     00 12 06 F6 | 	mov	arg01, #0
21e70     00 16 06 F6 | 	mov	arg03, #0
21e74     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
21e78     01 00 00 FF 
21e7c     08 E4 05 F1 | 	add	objptr, ##520
21e80     F2 12 02 FB | 	rdlong	arg01, objptr
21e84     04 E4 05 F1 | 	add	objptr, #4
21e88     F2 14 02 FB | 	rdlong	arg02, objptr
21e8c     01 00 00 FF 
21e90     0C E4 85 F1 | 	sub	objptr, ##524
21e94     E0 41 BF FD | 	call	#__system___freepins
21e98                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21e98                 | '     _freepins(f_pinmask);
21e98                 | '     return 0;
21e98     00 FA 05 F6 | 	mov	result1, #0
21e9c                 | _fatfs_cc_v_deinit_ret
21e9c     2D 00 64 FD | 	ret
21ea0                 | 
21ea0                 | _fatfs_cc_get_vfs
21ea0     01 4A 05 F6 | 	mov	COUNT_, #1
21ea4     A8 00 A0 FD | 	call	#pushregs_
21ea8     09 1F 02 F6 | 	mov	local01, arg01
21eac     50 12 06 F6 | 	mov	arg01, #80
21eb0     6C 55 BF FD | 	call	#__system___gc_alloc_managed
21eb4     FD 12 02 F6 | 	mov	arg01, result1
21eb8     F2 FA 01 F6 | 	mov	result1, objptr
21ebc     00 C0 02 FF 
21ec0     00 FA 45 F5 | 	or	result1, ##92274688
21ec4     09 FB 61 FC | 	wrlong	result1, arg01
21ec8     F2 FA 01 F6 | 	mov	result1, objptr
21ecc     00 C8 02 FF 
21ed0     00 FA 45 F5 | 	or	result1, ##93323264
21ed4     04 12 06 F1 | 	add	arg01, #4
21ed8     09 FB 61 FC | 	wrlong	result1, arg01
21edc     F2 FA 01 F6 | 	mov	result1, objptr
21ee0     00 D0 02 FF 
21ee4     00 FA 45 F5 | 	or	result1, ##94371840
21ee8     04 12 06 F1 | 	add	arg01, #4
21eec     09 FB 61 FC | 	wrlong	result1, arg01
21ef0     F2 FA 01 F6 | 	mov	result1, objptr
21ef4     00 D8 02 FF 
21ef8     00 FA 45 F5 | 	or	result1, ##95420416
21efc     04 12 06 F1 | 	add	arg01, #4
21f00     09 FB 61 FC | 	wrlong	result1, arg01
21f04     F2 FA 01 F6 | 	mov	result1, objptr
21f08     00 E0 02 FF 
21f0c     00 FA 45 F5 | 	or	result1, ##96468992
21f10     04 12 06 F1 | 	add	arg01, #4
21f14     09 FB 61 FC | 	wrlong	result1, arg01
21f18     04 12 06 F1 | 	add	arg01, #4
21f1c     09 01 68 FC | 	wrlong	#0, arg01
21f20     04 12 06 F1 | 	add	arg01, #4
21f24     09 1F 62 FC | 	wrlong	local01, arg01
21f28     04 12 06 F1 | 	add	arg01, #4
21f2c     09 01 68 FC | 	wrlong	#0, arg01
21f30     F2 FA 01 F6 | 	mov	result1, objptr
21f34     00 E8 02 FF 
21f38     00 FA 45 F5 | 	or	result1, ##97517568
21f3c     04 12 06 F1 | 	add	arg01, #4
21f40     09 FB 61 FC | 	wrlong	result1, arg01
21f44     F2 FA 01 F6 | 	mov	result1, objptr
21f48     00 F0 02 FF 
21f4c     00 FA 45 F5 | 	or	result1, ##98566144
21f50     04 12 06 F1 | 	add	arg01, #4
21f54     09 FB 61 FC | 	wrlong	result1, arg01
21f58     F2 FA 01 F6 | 	mov	result1, objptr
21f5c     00 F8 02 FF 
21f60     00 FA 45 F5 | 	or	result1, ##99614720
21f64     04 12 06 F1 | 	add	arg01, #4
21f68     09 FB 61 FC | 	wrlong	result1, arg01
21f6c     F2 FA 01 F6 | 	mov	result1, objptr
21f70     39 FA 25 F4 | 	bith	result1, #57
21f74     04 12 06 F1 | 	add	arg01, #4
21f78     09 FB 61 FC | 	wrlong	result1, arg01
21f7c     F2 FA 01 F6 | 	mov	result1, objptr
21f80     00 08 03 FF 
21f84     00 FA 45 F5 | 	or	result1, ##101711872
21f88     04 12 06 F1 | 	add	arg01, #4
21f8c     09 FB 61 FC | 	wrlong	result1, arg01
21f90     F2 FA 01 F6 | 	mov	result1, objptr
21f94     00 10 03 FF 
21f98     00 FA 45 F5 | 	or	result1, ##102760448
21f9c     04 12 06 F1 | 	add	arg01, #4
21fa0     09 FB 61 FC | 	wrlong	result1, arg01
21fa4     F2 FA 01 F6 | 	mov	result1, objptr
21fa8     00 18 03 FF 
21fac     00 FA 45 F5 | 	or	result1, ##103809024
21fb0     04 12 06 F1 | 	add	arg01, #4
21fb4     09 FB 61 FC | 	wrlong	result1, arg01
21fb8     F2 FA 01 F6 | 	mov	result1, objptr
21fbc     00 20 03 FF 
21fc0     00 FA 45 F5 | 	or	result1, ##104857600
21fc4     04 12 06 F1 | 	add	arg01, #4
21fc8     09 FB 61 FC | 	wrlong	result1, arg01
21fcc     F2 FA 01 F6 | 	mov	result1, objptr
21fd0     00 28 03 FF 
21fd4     00 FA 45 F5 | 	or	result1, ##105906176
21fd8     04 12 06 F1 | 	add	arg01, #4
21fdc     09 FB 61 FC | 	wrlong	result1, arg01
21fe0     F2 FA 01 F6 | 	mov	result1, objptr
21fe4     00 30 03 FF 
21fe8     00 FA 45 F5 | 	or	result1, ##106954752
21fec     04 12 06 F1 | 	add	arg01, #4
21ff0     09 FB 61 FC | 	wrlong	result1, arg01
21ff4     F2 FA 01 F6 | 	mov	result1, objptr
21ff8     00 38 03 FF 
21ffc     00 FA 45 F5 | 	or	result1, ##108003328
22000     04 12 06 F1 | 	add	arg01, #4
22004     09 FB 61 FC | 	wrlong	result1, arg01
22008     F2 FA 01 F6 | 	mov	result1, objptr
2200c     00 40 03 FF 
22010     00 FA 45 F5 | 	or	result1, ##109051904
22014     04 12 06 F1 | 	add	arg01, #4
22018     09 FB 61 FC | 	wrlong	result1, arg01
2201c     4C 12 86 F1 | 	sub	arg01, #76
22020                 | ' 
22020                 | '     v->close = &v_close;
22020                 | '     v->read = &v_read;
22020                 | '     v->write = &v_write;
22020                 | '     v->lseek = &v_lseek;
22020                 | '     v->ioctl = &v_ioctl;
22020                 | '     v->flush = 0;
22020                 | '     v->vfs_data = ptr;
22020                 | '     v->reserved = 0;
22020                 | ' 
22020                 | '     v->open = &v_open;
22020                 | '     v->creat = &v_creat;
22020                 | '     v->opendir = &v_opendir;
22020                 | '     v->closedir = &v_closedir;
22020                 | '     v->readdir = &v_readdir;
22020                 | '     v->stat = &v_stat;
22020                 | ' 
22020                 | '     v->mkdir = &v_mkdir;
22020                 | '     v->rmdir = &v_rmdir;
22020                 | ' 
22020                 | '     v->remove = &v_remove;
22020                 | '     v->rename = &v_rename;
22020                 | ' 
22020                 | '     v->init = &v_init;
22020                 | '     v->deinit = &v_deinit;
22020                 | ' 
22020                 | '     return v;
22020     09 FB 01 F6 | 	mov	result1, arg01
22024     A7 F0 03 F6 | 	mov	ptra, fp
22028     B2 00 A0 FD | 	call	#popregs_
2202c                 | _fatfs_cc_get_vfs_ret
2202c     2D 00 64 FD | 	ret
22030                 | 
22030                 | _fatfs_cc_xmit_mmc_0874
22030     01 00 00 FF 
22034     10 E4 05 F1 | 	add	objptr, ##528
22038     F2 00 02 FB | 	rdlong	_var01, objptr
2203c     08 E4 05 F1 | 	add	objptr, #8
22040     F2 02 02 FB | 	rdlong	_var02, objptr
22044     01 00 00 FF 
22048     18 E4 85 F1 | 	sub	objptr, ##536
2204c     40 02 62 FD | 	dirl	_var02
22050     28 02 64 FD | 	setq	#1
22054     09 05 02 FB | 	rdlong	_var03, arg01
22058     69 04 62 FD | 	rev	_var03
2205c     1B 04 FE F9 | 	movbyts	_var03, #27
22060     01 05 22 FC | 	wypin	_var03, _var02
22064     0A 05 02 F6 | 	mov	_var03, arg02
22068     02 14 4E F0 | 	shr	arg02, #2 wz
2206c     03 04 66 F0 | 	shl	_var03, #3
22070     00 05 22 FC | 	wypin	_var03, _var01
22074     41 02 62 FD | 	dirh	_var02
22078     08 12 06 F1 | 	add	arg01, #8
2207c     69 06 62 FD | 	rev	_var04
22080     1B 06 FE F9 | 	movbyts	_var04, #27
22084                 | LR__3820
22084     01 07 22 5C |  if_ne	wypin	_var04, _var02
22088     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2208c     04 12 06 51 |  if_ne	add	arg01, #4
22090     69 06 62 5D |  if_ne	rev	_var04
22094     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
22098                 | LR__3821
22098     40 02 72 5D |  if_ne	testp	_var02 wc
2209c     F8 FF 9F 1D |  if_a	jmp	#LR__3821
220a0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3820
220a4                 | LR__3822
220a4     40 00 72 FD | 	testp	_var01 wc
220a8     F8 FF 9F 3D |  if_ae	jmp	#LR__3822
220ac     40 02 62 FD | 	dirl	_var02
220b0     FF FF FF FF 
220b4     01 FF 2B FC | 	wypin	##-1, _var02
220b8     41 02 62 FD | 	dirh	_var02
220bc                 | _fatfs_cc_xmit_mmc_0874_ret
220bc     2D 00 64 FD | 	ret
220c0                 | 
220c0                 | _fatfs_cc_rcvr_mmc_0881
220c0     01 00 00 FF 
220c4     10 E4 05 F1 | 	add	objptr, ##528
220c8     F2 00 02 FB | 	rdlong	_var01, objptr
220cc     0C E4 05 F1 | 	add	objptr, #12
220d0     F2 02 02 FB | 	rdlong	_var02, objptr
220d4     01 00 00 FF 
220d8     1C E4 85 F1 | 	sub	objptr, ##540
220dc     01 03 08 FC | 	akpin	_var02
220e0     0A 05 0A F6 | 	mov	_var03, arg02 wz
220e4     02 04 4E F0 | 	shr	_var03, #2 wz
220e8     30 00 90 AD |  if_e	jmp	#LR__3832
220ec     02 07 02 F6 | 	mov	_var04, _var03
220f0     05 06 66 F0 | 	shl	_var04, #5
220f4     00 07 22 FC | 	wypin	_var04, _var01
220f8     01 7F 18 FC | 	wxpin	#63, _var02
220fc                 | LR__3830
220fc                 | LR__3831
220fc     40 02 72 FD | 	testp	_var02 wc
22100     F8 FF 9F 3D |  if_ae	jmp	#LR__3831
22104     01 07 8A FA | 	rdpin	_var04, _var02
22108     69 06 62 FD | 	rev	_var04
2210c     1B 06 FE F9 | 	movbyts	_var04, #27
22110     09 07 62 FC | 	wrlong	_var04, arg01
22114     04 12 06 F1 | 	add	arg01, #4
22118     F8 05 6E FB | 	djnz	_var03, #LR__3830
2211c                 | LR__3832
2211c     03 14 0E F5 | 	and	arg02, #3 wz
22120     24 00 90 AD |  if_e	jmp	#LR__3835
22124     01 4F 18 FC | 	wxpin	#39, _var02
22128                 | LR__3833
22128     00 11 28 FC | 	wypin	#8, _var01
2212c                 | LR__3834
2212c     40 02 72 FD | 	testp	_var02 wc
22130     F8 FF 9F 3D |  if_ae	jmp	#LR__3834
22134     01 07 8A FA | 	rdpin	_var04, _var02
22138     69 06 62 FD | 	rev	_var04
2213c     09 07 42 FC | 	wrbyte	_var04, arg01
22140     01 12 06 F1 | 	add	arg01, #1
22144     F8 15 6E FB | 	djnz	arg02, #LR__3833
22148                 | LR__3835
22148                 | _fatfs_cc_rcvr_mmc_0881_ret
22148     2D 00 64 FD | 	ret
2214c                 | 
2214c                 | _fatfs_cc_wait_ready_0885
2214c     01 4A 05 F6 | 	mov	COUNT_, #1
22150     A8 00 A0 FD | 	call	#pushregs_
22154     10 F0 07 F1 | 	add	ptra, #16
22158     1A FA 61 FD | 	getct	result1
2215c     08 4E 05 F1 | 	add	fp, #8
22160     A7 FA 61 FC | 	wrlong	result1, fp
22164     14 1E 06 FB | 	rdlong	local01, #20
22168     01 1E 46 F0 | 	shr	local01, #1
2216c     04 4E 05 F1 | 	add	fp, #4
22170     A7 1E 62 FC | 	wrlong	local01, fp
22174     0C 4E 85 F1 | 	sub	fp, #12
22178                 | ' {
22178                 | ' 	BYTE d;
22178                 | ' 	UINT tmr, tmout;
22178                 | ' 
22178                 | ' 	tmr = _cnt();
22178                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
22178                 | ' 	for(;;) {
22178                 | LR__3840
22178     04 4E 05 F1 | 	add	fp, #4
2217c     A7 12 02 F6 | 	mov	arg01, fp
22180     04 4E 85 F1 | 	sub	fp, #4
22184     01 14 06 F6 | 	mov	arg02, #1
22188     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
2218c     04 4E 05 F1 | 	add	fp, #4
22190     A7 1E C2 FA | 	rdbyte	local01, fp
22194     04 4E 85 F1 | 	sub	fp, #4
22198     FF 1E 0E F2 | 	cmp	local01, #255 wz
2219c     01 FA 05 A6 |  if_e	mov	result1, #1
221a0     28 00 90 AD |  if_e	jmp	#LR__3841
221a4     1A FA 61 FD | 	getct	result1
221a8     08 4E 05 F1 | 	add	fp, #8
221ac     A7 1E 02 FB | 	rdlong	local01, fp
221b0     0F FB 81 F1 | 	sub	result1, local01
221b4     04 4E 05 F1 | 	add	fp, #4
221b8     A7 1E 02 FB | 	rdlong	local01, fp
221bc     0C 4E 85 F1 | 	sub	fp, #12
221c0     0F FB 11 F2 | 	cmp	result1, local01 wc
221c4     00 FA 05 36 |  if_ae	mov	result1, #0
221c8     AC FF 9F CD |  if_b	jmp	#LR__3840
221cc                 | LR__3841
221cc     A7 F0 03 F6 | 	mov	ptra, fp
221d0     B2 00 A0 FD | 	call	#popregs_
221d4                 | _fatfs_cc_wait_ready_0885_ret
221d4     2D 00 64 FD | 	ret
221d8                 | 
221d8                 | _fatfs_cc_deselect_0891
221d8     00 4A 05 F6 | 	mov	COUNT_, #0
221dc     A8 00 A0 FD | 	call	#pushregs_
221e0     14 F0 07 F1 | 	add	ptra, #20
221e4     01 00 00 FF 
221e8     14 E4 05 F1 | 	add	objptr, ##532
221ec     F2 14 02 FB | 	rdlong	arg02, objptr
221f0     04 4E 05 F1 | 	add	fp, #4
221f4     A7 14 62 FC | 	wrlong	arg02, fp
221f8     04 E4 85 F1 | 	sub	objptr, #4
221fc     F2 14 02 FB | 	rdlong	arg02, objptr
22200     04 4E 05 F1 | 	add	fp, #4
22204     A7 14 62 FC | 	wrlong	arg02, fp
22208     08 E4 05 F1 | 	add	objptr, #8
2220c     F2 14 02 FB | 	rdlong	arg02, objptr
22210     04 4E 05 F1 | 	add	fp, #4
22214     A7 14 62 FC | 	wrlong	arg02, fp
22218     04 E4 05 F1 | 	add	objptr, #4
2221c     F2 14 02 FB | 	rdlong	arg02, objptr
22220     01 00 00 FF 
22224     1C E4 85 F1 | 	sub	objptr, ##540
22228     04 4E 05 F1 | 	add	fp, #4
2222c     A7 14 62 FC | 	wrlong	arg02, fp
22230     0C 4E 85 F1 | 	sub	fp, #12
22234     A7 12 02 FB | 	rdlong	arg01, fp
22238     04 4E 85 F1 | 	sub	fp, #4
2223c     59 12 62 FD | 	drvh	arg01
22240     1F 20 64 FD | 	waitx	#16
22244     A7 12 02 F6 | 	mov	arg01, fp
22248     01 14 06 F6 | 	mov	arg02, #1
2224c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
22250     A7 F0 03 F6 | 	mov	ptra, fp
22254     B2 00 A0 FD | 	call	#popregs_
22258                 | _fatfs_cc_deselect_0891_ret
22258     2D 00 64 FD | 	ret
2225c                 | 
2225c                 | _fatfs_cc_select_0895
2225c     00 4A 05 F6 | 	mov	COUNT_, #0
22260     A8 00 A0 FD | 	call	#pushregs_
22264     10 F0 07 F1 | 	add	ptra, #16
22268     01 00 00 FF 
2226c     14 E4 05 F1 | 	add	objptr, ##532
22270     F2 14 02 FB | 	rdlong	arg02, objptr
22274     08 4E 05 F1 | 	add	fp, #8
22278     A7 14 62 FC | 	wrlong	arg02, fp
2227c     08 E4 05 F1 | 	add	objptr, #8
22280     F2 12 02 FB | 	rdlong	arg01, objptr
22284     01 00 00 FF 
22288     1C E4 85 F1 | 	sub	objptr, ##540
2228c     04 4E 05 F1 | 	add	fp, #4
22290     A7 12 62 FC | 	wrlong	arg01, fp
22294     50 12 62 FD | 	fltl	arg01
22298     04 4E 85 F1 | 	sub	fp, #4
2229c     A7 12 02 FB | 	rdlong	arg01, fp
222a0     58 12 62 FD | 	drvl	arg01
222a4     1F 20 64 FD | 	waitx	#16
222a8     04 4E 05 F1 | 	add	fp, #4
222ac     A7 12 02 FB | 	rdlong	arg01, fp
222b0     41 12 62 FD | 	dirh	arg01
222b4     08 4E 85 F1 | 	sub	fp, #8
222b8     A7 12 02 F6 | 	mov	arg01, fp
222bc     04 4E 85 F1 | 	sub	fp, #4
222c0     01 14 06 F6 | 	mov	arg02, #1
222c4     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
222c8     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0885
222cc     00 FA 0D F2 | 	cmp	result1, #0 wz
222d0     01 FA 05 56 |  if_ne	mov	result1, #1
222d4     08 00 90 5D |  if_ne	jmp	#LR__3850
222d8     FC FE BF FD | 	call	#_fatfs_cc_deselect_0891
222dc                 | ' 
222dc                 | ' 	deselect();
222dc                 | ' 	return 0;
222dc     00 FA 05 F6 | 	mov	result1, #0
222e0                 | LR__3850
222e0     A7 F0 03 F6 | 	mov	ptra, fp
222e4     B2 00 A0 FD | 	call	#popregs_
222e8                 | _fatfs_cc_select_0895_ret
222e8     2D 00 64 FD | 	ret
222ec                 | 
222ec                 | _fatfs_cc_rcvr_datablock_0899
222ec     01 4A 05 F6 | 	mov	COUNT_, #1
222f0     A8 00 A0 FD | 	call	#pushregs_
222f4     18 F0 07 F1 | 	add	ptra, #24
222f8     04 4E 05 F1 | 	add	fp, #4
222fc     A7 12 62 FC | 	wrlong	arg01, fp
22300     04 4E 05 F1 | 	add	fp, #4
22304     A7 14 62 FC | 	wrlong	arg02, fp
22308     1A FA 61 FD | 	getct	result1
2230c     08 4E 05 F1 | 	add	fp, #8
22310     A7 FA 61 FC | 	wrlong	result1, fp
22314     14 1E 06 FB | 	rdlong	local01, #20
22318     03 1E 46 F0 | 	shr	local01, #3
2231c     04 4E 05 F1 | 	add	fp, #4
22320     A7 1E 62 FC | 	wrlong	local01, fp
22324     14 4E 85 F1 | 	sub	fp, #20
22328                 | ' 	BYTE *buff,
22328                 | ' 	UINT btr
22328                 | ' )
22328                 | ' {
22328                 | ' 	BYTE d[2];
22328                 | ' 	UINT tmr, tmout;
22328                 | ' 
22328                 | ' 	tmr = _cnt();
22328                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
22328                 | ' 	for(;;) {
22328                 | LR__3860
22328     0C 4E 05 F1 | 	add	fp, #12
2232c     A7 12 02 F6 | 	mov	arg01, fp
22330     0C 4E 85 F1 | 	sub	fp, #12
22334     01 14 06 F6 | 	mov	arg02, #1
22338     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
2233c     0C 4E 05 F1 | 	add	fp, #12
22340     A7 1E C2 FA | 	rdbyte	local01, fp
22344     0C 4E 85 F1 | 	sub	fp, #12
22348     FF 1E 0E F2 | 	cmp	local01, #255 wz
2234c     28 00 90 5D |  if_ne	jmp	#LR__3861
22350     1A FA 61 FD | 	getct	result1
22354     FD 1E 02 F6 | 	mov	local01, result1
22358     10 4E 05 F1 | 	add	fp, #16
2235c     A7 14 02 FB | 	rdlong	arg02, fp
22360     0A 1F 82 F1 | 	sub	local01, arg02
22364     04 4E 05 F1 | 	add	fp, #4
22368     A7 14 02 FB | 	rdlong	arg02, fp
2236c     14 4E 85 F1 | 	sub	fp, #20
22370     0A 1F 12 F2 | 	cmp	local01, arg02 wc
22374     B0 FF 9F CD |  if_b	jmp	#LR__3860
22378                 | LR__3861
22378     0C 4E 05 F1 | 	add	fp, #12
2237c     A7 1E C2 FA | 	rdbyte	local01, fp
22380     0C 4E 85 F1 | 	sub	fp, #12
22384     FE 1E 0E F2 | 	cmp	local01, #254 wz
22388     00 FA 05 56 |  if_ne	mov	result1, #0
2238c     30 00 90 5D |  if_ne	jmp	#LR__3862
22390     04 4E 05 F1 | 	add	fp, #4
22394     A7 12 02 FB | 	rdlong	arg01, fp
22398     04 4E 05 F1 | 	add	fp, #4
2239c     A7 14 02 FB | 	rdlong	arg02, fp
223a0     08 4E 85 F1 | 	sub	fp, #8
223a4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
223a8     0C 4E 05 F1 | 	add	fp, #12
223ac     A7 12 02 F6 | 	mov	arg01, fp
223b0     0C 4E 85 F1 | 	sub	fp, #12
223b4     02 14 06 F6 | 	mov	arg02, #2
223b8     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
223bc                 | ' 
223bc                 | ' 	rcvr_mmc(buff, btr);
223bc                 | ' 	rcvr_mmc(d, 2);
223bc                 | ' 
223bc                 | ' 	return 1;
223bc     01 FA 05 F6 | 	mov	result1, #1
223c0                 | LR__3862
223c0     A7 F0 03 F6 | 	mov	ptra, fp
223c4     B2 00 A0 FD | 	call	#popregs_
223c8                 | _fatfs_cc_rcvr_datablock_0899_ret
223c8     2D 00 64 FD | 	ret
223cc                 | 
223cc                 | _fatfs_cc_xmit_datablock_0901
223cc     00 4A 05 F6 | 	mov	COUNT_, #0
223d0     A8 00 A0 FD | 	call	#pushregs_
223d4     10 F0 07 F1 | 	add	ptra, #16
223d8     04 4E 05 F1 | 	add	fp, #4
223dc     A7 12 62 FC | 	wrlong	arg01, fp
223e0     04 4E 05 F1 | 	add	fp, #4
223e4     A7 14 42 FC | 	wrbyte	arg02, fp
223e8     08 4E 85 F1 | 	sub	fp, #8
223ec     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0885
223f0     00 FA 0D F2 | 	cmp	result1, #0 wz
223f4     00 FA 05 A6 |  if_e	mov	result1, #0
223f8     90 00 90 AD |  if_e	jmp	#LR__3871
223fc     08 4E 05 F1 | 	add	fp, #8
22400     A7 14 C2 FA | 	rdbyte	arg02, fp
22404     04 4E 05 F1 | 	add	fp, #4
22408     A7 14 42 FC | 	wrbyte	arg02, fp
2240c     A7 12 02 F6 | 	mov	arg01, fp
22410     0C 4E 85 F1 | 	sub	fp, #12
22414     01 14 06 F6 | 	mov	arg02, #1
22418     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0874
2241c     08 4E 05 F1 | 	add	fp, #8
22420     A7 14 C2 FA | 	rdbyte	arg02, fp
22424     08 4E 85 F1 | 	sub	fp, #8
22428     FD 14 0E F2 | 	cmp	arg02, #253 wz
2242c     58 00 90 AD |  if_e	jmp	#LR__3870
22430     04 4E 05 F1 | 	add	fp, #4
22434     A7 12 02 FB | 	rdlong	arg01, fp
22438     04 4E 85 F1 | 	sub	fp, #4
2243c     09 14 C6 F9 | 	decod	arg02, #9
22440     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0874
22444     0C 4E 05 F1 | 	add	fp, #12
22448     A7 12 02 F6 | 	mov	arg01, fp
2244c     0C 4E 85 F1 | 	sub	fp, #12
22450     02 14 06 F6 | 	mov	arg02, #2
22454     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
22458     0C 4E 05 F1 | 	add	fp, #12
2245c     A7 12 02 F6 | 	mov	arg01, fp
22460     0C 4E 85 F1 | 	sub	fp, #12
22464     01 14 06 F6 | 	mov	arg02, #1
22468     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
2246c     0C 4E 05 F1 | 	add	fp, #12
22470     A7 14 C2 FA | 	rdbyte	arg02, fp
22474     0C 4E 85 F1 | 	sub	fp, #12
22478     1F 14 06 F5 | 	and	arg02, #31
2247c     05 14 0E F2 | 	cmp	arg02, #5 wz
22480                 | ' 			return 0;
22480     00 FA 05 56 |  if_ne	mov	result1, #0
22484     04 00 90 5D |  if_ne	jmp	#LR__3871
22488                 | LR__3870
22488                 | ' 	}
22488                 | ' 
22488                 | ' 	return 1;
22488     01 FA 05 F6 | 	mov	result1, #1
2248c                 | LR__3871
2248c     A7 F0 03 F6 | 	mov	ptra, fp
22490     B2 00 A0 FD | 	call	#popregs_
22494                 | _fatfs_cc_xmit_datablock_0901_ret
22494     2D 00 64 FD | 	ret
22498                 | 
22498                 | _fatfs_cc_send_cmd_0905
22498     01 4A 05 F6 | 	mov	COUNT_, #1
2249c     A8 00 A0 FD | 	call	#pushregs_
224a0     1C F0 07 F1 | 	add	ptra, #28
224a4                 | _fatfs_cc_send_cmd_0905_enter
224a4     04 4E 05 F1 | 	add	fp, #4
224a8     A7 12 42 FC | 	wrbyte	arg01, fp
224ac     04 4E 05 F1 | 	add	fp, #4
224b0     A7 14 62 FC | 	wrlong	arg02, fp
224b4     04 4E 85 F1 | 	sub	fp, #4
224b8     A7 FA C1 FA | 	rdbyte	result1, fp
224bc     04 4E 85 F1 | 	sub	fp, #4
224c0     80 FA CD F7 | 	test	result1, #128 wz
224c4     44 00 90 AD |  if_e	jmp	#LR__3880
224c8     04 4E 05 F1 | 	add	fp, #4
224cc     A7 14 C2 FA | 	rdbyte	arg02, fp
224d0     7F 14 06 F5 | 	and	arg02, #127
224d4     A7 14 42 FC | 	wrbyte	arg02, fp
224d8     04 4E 85 F1 | 	sub	fp, #4
224dc     37 12 06 F6 | 	mov	arg01, #55
224e0     00 14 06 F6 | 	mov	arg02, #0
224e4     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0905
224e8     0C 4E 05 F1 | 	add	fp, #12
224ec     A7 FA 41 FC | 	wrbyte	result1, fp
224f0     A7 14 C2 FA | 	rdbyte	arg02, fp
224f4     0C 4E 85 F1 | 	sub	fp, #12
224f8     02 14 16 F2 | 	cmp	arg02, #2 wc
224fc     0C 4E 05 31 |  if_ae	add	fp, #12
22500     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
22504     0C 4E 85 31 |  if_ae	sub	fp, #12
22508     6C 01 90 3D |  if_ae	jmp	#LR__3884
2250c                 | LR__3880
2250c     04 4E 05 F1 | 	add	fp, #4
22510     A7 14 C2 FA | 	rdbyte	arg02, fp
22514     04 4E 85 F1 | 	sub	fp, #4
22518     0C 14 0E F2 | 	cmp	arg02, #12 wz
2251c     14 00 90 AD |  if_e	jmp	#LR__3881
22520     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0891
22524     34 FD BF FD | 	call	#_fatfs_cc_select_0895
22528     00 FA 0D F2 | 	cmp	result1, #0 wz
2252c     FF FA 05 A6 |  if_e	mov	result1, #255
22530     44 01 90 AD |  if_e	jmp	#LR__3884
22534                 | LR__3881
22534     04 4E 05 F1 | 	add	fp, #4
22538     A7 14 C2 FA | 	rdbyte	arg02, fp
2253c     40 FA 05 F6 | 	mov	result1, #64
22540     0A FB 41 F5 | 	or	result1, arg02
22544     10 4E 05 F1 | 	add	fp, #16
22548     A7 FA 41 FC | 	wrbyte	result1, fp
2254c     0C 4E 85 F1 | 	sub	fp, #12
22550     A7 FA 01 FB | 	rdlong	result1, fp
22554     18 FA 45 F0 | 	shr	result1, #24
22558     0D 4E 05 F1 | 	add	fp, #13
2255c     A7 FA 41 FC | 	wrbyte	result1, fp
22560     0D 4E 85 F1 | 	sub	fp, #13
22564     A7 FA 01 FB | 	rdlong	result1, fp
22568     10 FA 45 F0 | 	shr	result1, #16
2256c     0E 4E 05 F1 | 	add	fp, #14
22570     A7 FA 41 FC | 	wrbyte	result1, fp
22574     0E 4E 85 F1 | 	sub	fp, #14
22578     A7 FA 01 FB | 	rdlong	result1, fp
2257c     08 FA 45 F0 | 	shr	result1, #8
22580     0F 4E 05 F1 | 	add	fp, #15
22584     A7 FA 41 FC | 	wrbyte	result1, fp
22588     0F 4E 85 F1 | 	sub	fp, #15
2258c     A7 FA 01 FB | 	rdlong	result1, fp
22590     10 4E 05 F1 | 	add	fp, #16
22594     A7 FA 41 FC | 	wrbyte	result1, fp
22598     0C 4E 85 F1 | 	sub	fp, #12
2259c     A7 02 48 FC | 	wrbyte	#1, fp
225a0     08 4E 85 F1 | 	sub	fp, #8
225a4     A7 FA C9 FA | 	rdbyte	result1, fp wz
225a8     04 4E 85 F1 | 	sub	fp, #4
225ac     0C 4E 05 A1 |  if_e	add	fp, #12
225b0     A7 2A 49 AC |  if_e	wrbyte	#149, fp
225b4     0C 4E 85 A1 |  if_e	sub	fp, #12
225b8     04 4E 05 F1 | 	add	fp, #4
225bc     A7 FA C1 FA | 	rdbyte	result1, fp
225c0     04 4E 85 F1 | 	sub	fp, #4
225c4     08 FA 0D F2 | 	cmp	result1, #8 wz
225c8     0C 4E 05 A1 |  if_e	add	fp, #12
225cc     A7 0E 49 AC |  if_e	wrbyte	#135, fp
225d0     0C 4E 85 A1 |  if_e	sub	fp, #12
225d4     0C 4E 05 F1 | 	add	fp, #12
225d8     A7 14 C2 FA | 	rdbyte	arg02, fp
225dc     0D 4E 05 F1 | 	add	fp, #13
225e0     A7 14 42 FC | 	wrbyte	arg02, fp
225e4     05 4E 85 F1 | 	sub	fp, #5
225e8     A7 12 02 F6 | 	mov	arg01, fp
225ec     14 4E 85 F1 | 	sub	fp, #20
225f0     06 14 06 F6 | 	mov	arg02, #6
225f4     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0874
225f8     04 4E 05 F1 | 	add	fp, #4
225fc     A7 1E C2 FA | 	rdbyte	local01, fp
22600     04 4E 85 F1 | 	sub	fp, #4
22604     0C 1E 0E F2 | 	cmp	local01, #12 wz
22608     10 4E 05 A1 |  if_e	add	fp, #16
2260c     A7 12 02 A6 |  if_e	mov	arg01, fp
22610     10 4E 85 A1 |  if_e	sub	fp, #16
22614     01 14 06 A6 |  if_e	mov	arg02, #1
22618     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0881
2261c     0C 4E 05 F1 | 	add	fp, #12
22620     A7 14 48 FC | 	wrbyte	#10, fp
22624     0C 4E 85 F1 | 	sub	fp, #12
22628                 | ' 	n = 10;
22628                 | ' 	do
22628                 | LR__3882
22628     10 4E 05 F1 | 	add	fp, #16
2262c     A7 12 02 F6 | 	mov	arg01, fp
22630     10 4E 85 F1 | 	sub	fp, #16
22634     01 14 06 F6 | 	mov	arg02, #1
22638     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
2263c     10 4E 05 F1 | 	add	fp, #16
22640     A7 1E C2 FA | 	rdbyte	local01, fp
22644     10 4E 85 F1 | 	sub	fp, #16
22648     80 1E CE F7 | 	test	local01, #128 wz
2264c     1C 00 90 AD |  if_e	jmp	#LR__3883
22650     0C 4E 05 F1 | 	add	fp, #12
22654     A7 1E C2 FA | 	rdbyte	local01, fp
22658     01 1E 86 F1 | 	sub	local01, #1
2265c     A7 1E 42 FC | 	wrbyte	local01, fp
22660     A7 1E CA FA | 	rdbyte	local01, fp wz
22664     0C 4E 85 F1 | 	sub	fp, #12
22668     BC FF 9F 5D |  if_ne	jmp	#LR__3882
2266c                 | LR__3883
2266c                 | ' 
2266c                 | ' 	return d;
2266c     10 4E 05 F1 | 	add	fp, #16
22670     A7 FA C1 FA | 	rdbyte	result1, fp
22674     10 4E 85 F1 | 	sub	fp, #16
22678                 | LR__3884
22678     A7 F0 03 F6 | 	mov	ptra, fp
2267c     B2 00 A0 FD | 	call	#popregs_
22680                 | _fatfs_cc_send_cmd_0905_ret
22680     2D 00 64 FD | 	ret
22684                 | 
22684                 | _fatfs_cc_disk_deinitialize
22684     03 4A 05 F6 | 	mov	COUNT_, #3
22688     A8 00 A0 FD | 	call	#pushregs_
2268c     00 12 4E F2 | 	cmps	arg01, #0 wz
22690     01 00 00 FF 
22694     14 E4 05 F1 | 	add	objptr, ##532
22698     F2 12 02 FB | 	rdlong	arg01, objptr
2269c     04 E4 85 F1 | 	sub	objptr, #4
226a0     F2 1E 02 FB | 	rdlong	local01, objptr
226a4     08 E4 05 F1 | 	add	objptr, #8
226a8     F2 20 02 FB | 	rdlong	local02, objptr
226ac     04 E4 05 F1 | 	add	objptr, #4
226b0     F2 22 02 FB | 	rdlong	local03, objptr
226b4     01 00 00 FF 
226b8     1C E4 85 F1 | 	sub	objptr, ##540
226bc                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
226bc                 | '         return RES_NOTRDY;
226bc     03 FA 05 56 |  if_ne	mov	result1, #3
226c0     2C 00 90 5D |  if_ne	jmp	#LR__3890
226c4     50 12 62 FD | 	fltl	arg01
226c8     09 01 08 FC | 	wrpin	#0, arg01
226cc     50 1E 62 FD | 	fltl	local01
226d0     0F 01 08 FC | 	wrpin	#0, local01
226d4     50 20 62 FD | 	fltl	local02
226d8     10 01 08 FC | 	wrpin	#0, local02
226dc     50 22 62 FD | 	fltl	local03
226e0     11 01 08 FC | 	wrpin	#0, local03
226e4     0A 12 06 F6 | 	mov	arg01, #10
226e8     A0 15 BF FD | 	call	#__system___waitms
226ec                 | '     }
226ec                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
226ec                 | '     _pinclear(PIN_SS);
226ec                 | '     _pinclear(PIN_CLK);
226ec                 | '     _pinclear(PIN_DI);
226ec                 | '     _pinclear(PIN_DO);
226ec                 | ' 
226ec                 | '     _waitms(10);
226ec                 | ' 
226ec                 | '     return 0;
226ec     00 FA 05 F6 | 	mov	result1, #0
226f0                 | LR__3890
226f0     A7 F0 03 F6 | 	mov	ptra, fp
226f4     B2 00 A0 FD | 	call	#popregs_
226f8                 | _fatfs_cc_disk_deinitialize_ret
226f8     2D 00 64 FD | 	ret
226fc                 | 
226fc                 | _fatfs_cc_gettimeofday
226fc     04 4A 05 F6 | 	mov	COUNT_, #4
22700     A8 00 A0 FD | 	call	#pushregs_
22704     09 1F 02 F6 | 	mov	local01, arg01
22708     44 12 BF FD | 	call	#__system___getus
2270c     FD 12 02 F6 | 	mov	arg01, result1
22710     02 00 00 FF 
22714     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
22718     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2271c     09 FB 01 F6 | 	mov	result1, arg01
22720     10 FB 81 F1 | 	sub	result1, local02
22724     A1 07 00 FF 
22728     40 FA 15 FD | 	qdiv	result1, ##1000000
2272c     02 00 00 FF 
22730     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
22734     18 20 62 FD | 	getqx	local02
22738     A1 07 00 FF 
2273c     40 FA 15 FD | 	qdiv	result1, ##1000000
22740     00 20 0E F2 | 	cmp	local02, #0 wz
22744     19 22 62 FD | 	getqy	local03
22748     28 00 90 AD |  if_e	jmp	#LR__3900
2274c     02 00 00 FF 
22750     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
22754     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
22758     10 25 02 F1 | 	add	local04, local02
2275c     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
22760     11 13 82 F1 | 	sub	arg01, local03
22764     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
22768     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2276c     02 00 00 FF 
22770     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
22774                 | LR__3900
22774     02 00 00 FF 
22778     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2277c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
22780     02 00 00 FF 
22784     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
22788     0F 25 62 FC | 	wrlong	local04, local01
2278c     04 1E 06 F1 | 	add	local01, #4
22790     0F 23 62 FC | 	wrlong	local03, local01
22794                 | '         lastsec += secs;
22794                 | '         lastus = now - leftover;
22794                 | '     }
22794                 | '     tv->tv_sec = lastsec;
22794                 | '     tv->tv_usec = leftover;
22794                 | '     return 0;
22794     00 FA 05 F6 | 	mov	result1, #0
22798     A7 F0 03 F6 | 	mov	ptra, fp
2279c     B2 00 A0 FD | 	call	#popregs_
227a0                 | _fatfs_cc_gettimeofday_ret
227a0     2D 00 64 FD | 	ret
227a4                 | 
227a4                 | _fatfs_cc__is_leap_year
227a4     09 FB 51 F6 | 	abs	result1, arg01 wc
227a8     03 FA 05 F5 | 	and	result1, #3
227ac     FD FA 89 F6 | 	negc	result1, result1 wz
227b0     38 00 90 5D |  if_ne	jmp	#LR__3911
227b4     09 FB 51 F6 | 	abs	result1, arg01 wc
227b8     64 FA 15 FD | 	qdiv	result1, #100
227bc     19 FA 61 FD | 	getqy	result1
227c0     FD FA 89 F6 | 	negc	result1, result1 wz
227c4     1C 00 90 5D |  if_ne	jmp	#LR__3910
227c8     09 FB 51 F6 | 	abs	result1, arg01 wc
227cc     90 FB 15 FD | 	qdiv	result1, #400
227d0                 | '       return (0 == y % 400);
227d0     00 FA 05 F6 | 	mov	result1, #0
227d4     19 00 62 FD | 	getqy	_var01
227d8     00 01 8A F6 | 	negc	_var01, _var01 wz
227dc     01 FA 05 A6 |  if_e	mov	result1, #1
227e0     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
227e4                 | LR__3910
227e4                 | '     return 1;
227e4     01 FA 05 F6 | 	mov	result1, #1
227e8     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
227ec                 | LR__3911
227ec                 | '   }
227ec                 | '   return 0;
227ec     00 FA 05 F6 | 	mov	result1, #0
227f0                 | _fatfs_cc__is_leap_year_ret
227f0     2D 00 64 FD | 	ret
227f4                 | 
227f4                 | _fatfs_cc___tzoffset
227f4     09 01 0A F6 | 	mov	_var01, arg01 wz
227f8     FF FF FF FF 
227fc     0A FF 6B FC | 	wrlong	##-1, arg02
22800     01 02 06 F6 | 	mov	_var02, #1
22804     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
22808                 | '                 return 0;
22808     00 FA 05 A6 |  if_e	mov	result1, #0
2280c     94 02 90 AD |  if_e	jmp	#LR__3937
22810     0A 01 68 FC | 	wrlong	#0, arg02
22814     02 00 00 FF 
22818     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2281c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
22820                 | ' 
22820                 | '        *hasdst = 0;
22820                 | ' 
22820                 | ' 	n = stdname;
22820                 | '         while (*s && isalpha(*s)) {
22820     02 00 00 FF 
22824     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
22828     97 28 48 FB | 	callpa	#(@LR__3921-@LR__3920)>>2,fcache_load_ptr_
2282c                 | LR__3920
2282c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
22830     48 00 90 AD |  if_e	jmp	#LR__3922
22834     00 13 C2 FA | 	rdbyte	arg01, _var01
22838                 | ' {
22838                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
22838     80 12 36 F3 | 	fle	arg01, #128 wc
2283c                 | '     return __ctype[c];
2283c     02 00 00 FF 
22840     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
22844     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22848     09 FB C1 FA | 	rdbyte	result1, arg01
2284c     02 00 00 FF 
22850     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
22854     0C FA CD F7 | 	test	result1, #12 wz
22858     20 00 90 AD |  if_e	jmp	#LR__3922
2285c     00 09 02 F6 | 	mov	_var05, _var01
22860     00 0B 02 F6 | 	mov	_var06, _var01
22864     01 0A 06 F1 | 	add	_var06, #1
22868     04 0D C2 FA | 	rdbyte	_var07, _var05
2286c     05 01 02 F6 | 	mov	_var01, _var06
22870     03 0D 42 FC | 	wrbyte	_var07, _var04
22874     01 06 06 F1 | 	add	_var04, #1
22878     B0 FF 9F FD | 	jmp	#LR__3920
2287c                 | LR__3921
2287c                 | LR__3922
2287c     03 01 48 FC | 	wrbyte	#0, _var04
22880     00 0E 06 F6 | 	mov	_var08, #0
22884     00 05 C2 FA | 	rdbyte	_var03, _var01
22888     2D 04 0E F2 | 	cmp	_var03, #45 wz
2288c     01 02 66 A6 |  if_e	neg	_var02, #1
22890     01 00 06 A1 |  if_e	add	_var01, #1
22894     97 28 48 FB | 	callpa	#(@LR__3924-@LR__3923)>>2,fcache_load_ptr_
22898                 | '                 sgn = -1;
22898                 | '                 s++;
22898                 | '         }
22898                 | '         while (isdigit(*s)) {
22898                 | LR__3923
22898     00 13 C2 FA | 	rdbyte	arg01, _var01
2289c                 | ' {
2289c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2289c     80 12 36 F3 | 	fle	arg01, #128 wc
228a0                 | '     return __ctype[c];
228a0     02 00 00 FF 
228a4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
228a8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
228ac     09 FB C1 FA | 	rdbyte	result1, arg01
228b0     02 00 00 FF 
228b4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
228b8     02 FA CD F7 | 	test	result1, #2 wz
228bc     28 00 90 AD |  if_e	jmp	#LR__3925
228c0     07 05 02 F6 | 	mov	_var03, _var08
228c4     02 04 66 F0 | 	shl	_var03, #2
228c8     07 05 02 F1 | 	add	_var03, _var08
228cc     01 04 66 F0 | 	shl	_var03, #1
228d0     00 09 C2 FA | 	rdbyte	_var05, _var01
228d4     30 08 86 F1 | 	sub	_var05, #48
228d8     04 05 02 F1 | 	add	_var03, _var05
228dc     02 0F 02 F6 | 	mov	_var08, _var03
228e0     01 00 06 F1 | 	add	_var01, #1
228e4     B0 FF 9F FD | 	jmp	#LR__3923
228e8                 | LR__3924
228e8                 | LR__3925
228e8     07 00 00 FF 
228ec     10 0E 06 FD | 	qmul	_var08, ##3600
228f0     00 05 C2 FA | 	rdbyte	_var03, _var01
228f4     3A 04 0E F2 | 	cmp	_var03, #58 wz
228f8     18 10 62 FD | 	getqx	_var09
228fc     70 00 90 5D |  if_ne	jmp	#LR__3929
22900     00 0E 06 F6 | 	mov	_var08, #0
22904     01 00 06 F1 | 	add	_var01, #1
22908     97 28 48 FB | 	callpa	#(@LR__3927-@LR__3926)>>2,fcache_load_ptr_
2290c                 | '                 x = 0;
2290c                 | '                 s++;
2290c                 | '                 while (isdigit(*s)) {
2290c                 | LR__3926
2290c     00 13 C2 FA | 	rdbyte	arg01, _var01
22910                 | ' {
22910                 | '   return  (__ctype_get(c) & 0x02 ) ;
22910     80 12 36 F3 | 	fle	arg01, #128 wc
22914                 | '     return __ctype[c];
22914     02 00 00 FF 
22918     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2291c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22920     09 FB C1 FA | 	rdbyte	result1, arg01
22924     02 00 00 FF 
22928     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2292c     02 FA CD F7 | 	test	result1, #2 wz
22930     28 00 90 AD |  if_e	jmp	#LR__3928
22934     07 05 02 F6 | 	mov	_var03, _var08
22938     02 04 66 F0 | 	shl	_var03, #2
2293c     07 05 02 F1 | 	add	_var03, _var08
22940     01 04 66 F0 | 	shl	_var03, #1
22944     00 09 C2 FA | 	rdbyte	_var05, _var01
22948     30 08 86 F1 | 	sub	_var05, #48
2294c     04 05 02 F1 | 	add	_var03, _var05
22950     02 0F 02 F6 | 	mov	_var08, _var03
22954     01 00 06 F1 | 	add	_var01, #1
22958     B0 FF 9F FD | 	jmp	#LR__3926
2295c                 | LR__3927
2295c                 | LR__3928
2295c     07 0D 02 F6 | 	mov	_var07, _var08
22960     04 0C 66 F0 | 	shl	_var07, #4
22964     07 0D 82 F1 | 	sub	_var07, _var08
22968     02 0C 66 F0 | 	shl	_var07, #2
2296c     06 11 02 F1 | 	add	_var09, _var07
22970                 | LR__3929
22970     02 00 00 FF 
22974     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
22978     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2297c     00 13 C2 FA | 	rdbyte	arg01, _var01
22980                 | ' {
22980                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
22980     80 12 36 F3 | 	fle	arg01, #128 wc
22984                 | '     return __ctype[c];
22984     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
22988     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2298c     09 FB C1 FA | 	rdbyte	result1, arg01
22990     02 00 00 FF 
22994     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
22998     0C FA CD F7 | 	test	result1, #12 wz
2299c     50 00 90 AD |  if_e	jmp	#LR__3932
229a0     0A 03 68 FC | 	wrlong	#1, arg02
229a4                 | '                 *hasdst = 1;
229a4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
229a4                 | LR__3930
229a4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
229a8     44 00 90 AD |  if_e	jmp	#LR__3931
229ac     00 13 C2 FA | 	rdbyte	arg01, _var01
229b0                 | ' {
229b0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
229b0     80 12 36 F3 | 	fle	arg01, #128 wc
229b4                 | '     return __ctype[c];
229b4     02 00 00 FF 
229b8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
229bc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
229c0     09 FB C1 FA | 	rdbyte	result1, arg01
229c4     02 00 00 FF 
229c8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
229cc     0C FA CD F7 | 	test	result1, #12 wz
229d0     1C 00 90 AD |  if_e	jmp	#LR__3931
229d4     00 0B 02 F6 | 	mov	_var06, _var01
229d8     01 0A 06 F1 | 	add	_var06, #1
229dc     00 0D C2 FA | 	rdbyte	_var07, _var01
229e0     05 01 02 F6 | 	mov	_var01, _var06
229e4     03 0D 42 FC | 	wrbyte	_var07, _var04
229e8     01 06 06 F1 | 	add	_var04, #1
229ec     B4 FF 9F FD | 	jmp	#LR__3930
229f0                 | LR__3931
229f0                 | LR__3932
229f0     03 01 48 FC | 	wrbyte	#0, _var04
229f4     02 00 00 FF 
229f8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
229fc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
22a00     02 00 00 FF 
22a04     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
22a08     20 00 90 AD |  if_e	jmp	#LR__3933
22a0c     02 00 00 FF 
22a10     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
22a14     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22a18     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
22a1c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22a20     02 00 00 FF 
22a24     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
22a28     1C 00 90 FD | 	jmp	#LR__3934
22a2c                 | LR__3933
22a2c     02 00 00 FF 
22a30     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
22a34     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22a38     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
22a3c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22a40     02 00 00 FF 
22a44     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
22a48                 | LR__3934
22a48     02 00 00 FF 
22a4c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
22a50     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
22a54     02 00 00 FF 
22a58     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
22a5c     20 00 90 AD |  if_e	jmp	#LR__3935
22a60     02 00 00 FF 
22a64     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
22a68     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22a6c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
22a70     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22a74     02 00 00 FF 
22a78     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
22a7c     1C 00 90 FD | 	jmp	#LR__3936
22a80                 | LR__3935
22a80     02 00 00 FF 
22a84     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
22a88     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22a8c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
22a90     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22a94     02 00 00 FF 
22a98     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
22a9c                 | LR__3936
22a9c     08 03 02 FD | 	qmul	_var02, _var09
22aa0                 | ' 		_tzname[1] = stdname;
22aa0                 | ' 
22aa0                 | '         return sgn * off;
22aa0     18 FA 61 FD | 	getqx	result1
22aa4                 | LR__3937
22aa4                 | _fatfs_cc___tzoffset_ret
22aa4     2D 00 64 FD | 	ret
22aa8                 | 
22aa8                 | _fatfs_cc___indst
22aa8     10 12 06 F1 | 	add	arg01, #16
22aac     09 01 02 FB | 	rdlong	_var01, arg01
22ab0     10 12 86 F1 | 	sub	arg01, #16
22ab4     02 00 0E F2 | 	cmp	_var01, #2 wz
22ab8     30 00 90 5D |  if_ne	jmp	#LR__3940
22abc     07 00 06 F6 | 	mov	_var01, #7
22ac0     18 12 06 F1 | 	add	arg01, #24
22ac4     09 03 02 FB | 	rdlong	_var02, arg01
22ac8     01 01 02 F1 | 	add	_var01, _var02
22acc     0C 12 86 F1 | 	sub	arg01, #12
22ad0     09 05 02 FB | 	rdlong	_var03, arg01
22ad4     02 01 82 F1 | 	sub	_var01, _var03
22ad8     00 00 56 F2 | 	cmps	_var01, #0 wc
22adc                 | '                         return 1;
22adc     01 FA 05 C6 |  if_b	mov	result1, #1
22ae0     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
22ae4                 | '                 return 0;
22ae4     00 FA 05 F6 | 	mov	result1, #0
22ae8     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
22aec                 | LR__3940
22aec     10 12 06 F1 | 	add	arg01, #16
22af0     09 01 02 FB | 	rdlong	_var01, arg01
22af4     10 12 86 F1 | 	sub	arg01, #16
22af8     0A 00 0E F2 | 	cmp	_var01, #10 wz
22afc     28 00 90 5D |  if_ne	jmp	#LR__3941
22b00     18 12 06 F1 | 	add	arg01, #24
22b04     09 01 02 FB | 	rdlong	_var01, arg01
22b08     0C 12 86 F1 | 	sub	arg01, #12
22b0c     09 07 02 FB | 	rdlong	_var04, arg01
22b10     03 01 82 F1 | 	sub	_var01, _var04
22b14     00 00 56 F2 | 	cmps	_var01, #0 wc
22b18                 | '                         return 0;
22b18     00 FA 05 C6 |  if_b	mov	result1, #0
22b1c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
22b20                 | '                 return 1;
22b20     01 FA 05 F6 | 	mov	result1, #1
22b24     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
22b28                 | LR__3941
22b28                 | '         }
22b28                 | ' 
22b28                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
22b28     00 00 06 F6 | 	mov	_var01, #0
22b2c     10 12 06 F1 | 	add	arg01, #16
22b30     09 03 02 FB | 	rdlong	_var02, arg01
22b34     10 12 86 F1 | 	sub	arg01, #16
22b38     03 02 56 F2 | 	cmps	_var02, #3 wc
22b3c     10 00 90 CD |  if_b	jmp	#LR__3942
22b40     10 12 06 F1 | 	add	arg01, #16
22b44     09 05 02 FB | 	rdlong	_var03, arg01
22b48     0A 04 56 F2 | 	cmps	_var03, #10 wc
22b4c     01 00 06 C6 |  if_b	mov	_var01, #1
22b50                 | LR__3942
22b50     00 FB 01 F6 | 	mov	result1, _var01
22b54                 | _fatfs_cc___indst_ret
22b54     2D 00 64 FD | 	ret
22b58                 | 
22b58                 | ' 	
22b58                 | ' 	FUNCTION pfunc(c as integer) as integer
22b58                 | ___strs_cl_pfunc
22b58                 | ' 		if (i < 16) then
22b58     04 E4 05 F1 | 	add	objptr, #4
22b5c     F2 FA 01 FB | 	rdlong	result1, objptr
22b60     04 E4 85 F1 | 	sub	objptr, #4
22b64     10 FA 55 F2 | 	cmps	result1, #16 wc
22b68     2C 00 90 3D |  if_ae	jmp	#LR__3950
22b6c     F2 FA 01 FB | 	rdlong	result1, objptr
22b70     04 E4 05 F1 | 	add	objptr, #4
22b74     F2 00 02 FB | 	rdlong	_var01, objptr
22b78     FD 00 02 F1 | 	add	_var01, result1
22b7c     00 13 42 FC | 	wrbyte	arg01, _var01
22b80     F2 FA 01 FB | 	rdlong	result1, objptr
22b84     01 FA 05 F1 | 	add	result1, #1
22b88     F2 FA 61 FC | 	wrlong	result1, objptr
22b8c     04 E4 85 F1 | 	sub	objptr, #4
22b90                 | ' 			p(i) = c
22b90                 | ' 			i = i+1
22b90                 | ' 			return 1
22b90     01 FA 05 F6 | 	mov	result1, #1
22b94     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
22b98                 | LR__3950
22b98                 | ' 			return -1
22b98     01 FA 65 F6 | 	neg	result1, #1
22b9c                 | ___strs_cl_pfunc_ret
22b9c     2D 00 64 FD | 	ret
22ba0                 | 
22ba0                 | __struct__s_vfs_file_t_putchar
22ba0     04 4A 05 F6 | 	mov	COUNT_, #4
22ba4     A8 00 A0 FD | 	call	#pushregs_
22ba8     1C E4 05 F1 | 	add	objptr, #28
22bac     F2 1E 0A FB | 	rdlong	local01, objptr wz
22bb0     1C E4 85 F1 | 	sub	objptr, #28
22bb4     00 FA 05 A6 |  if_e	mov	result1, #0
22bb8     48 00 90 AD |  if_e	jmp	#LR__3960
22bbc     1C E4 05 F1 | 	add	objptr, #28
22bc0     F2 20 02 FB | 	rdlong	local02, objptr
22bc4     10 23 02 F6 | 	mov	local03, local02
22bc8     1C E4 85 F1 | 	sub	objptr, #28
22bcc     13 22 46 F7 | 	zerox	local03, #19
22bd0     14 20 46 F0 | 	shr	local02, #20
22bd4     02 20 66 F0 | 	shl	local02, #2
22bd8     ED 20 02 F1 | 	add	local02, __methods__
22bdc     10 21 02 FB | 	rdlong	local02, local02
22be0     F2 14 02 F6 | 	mov	arg02, objptr
22be4     F2 24 02 F6 | 	mov	local04, objptr
22be8     11 E5 01 F6 | 	mov	objptr, local03
22bec     2D 20 62 FD | 	call	local02
22bf0     12 E5 01 F6 | 	mov	objptr, local04
22bf4                 | '     return (i < 0) ? 0 : 1;
22bf4     00 FA 55 F2 | 	cmps	result1, #0 wc
22bf8     00 1E 06 C6 |  if_b	mov	local01, #0
22bfc     01 1E 06 36 |  if_ae	mov	local01, #1
22c00     0F FB 01 F6 | 	mov	result1, local01
22c04                 | LR__3960
22c04     A7 F0 03 F6 | 	mov	ptra, fp
22c08     B2 00 A0 FD | 	call	#popregs_
22c0c                 | __struct__s_vfs_file_t_putchar_ret
22c0c     2D 00 64 FD | 	ret
22c10                 | 
22c10                 | __struct__s_vfs_file_t_getchar
22c10     03 4A 05 F6 | 	mov	COUNT_, #3
22c14     A8 00 A0 FD | 	call	#pushregs_
22c18     20 E4 05 F1 | 	add	objptr, #32
22c1c     F2 12 0A FB | 	rdlong	arg01, objptr wz
22c20     20 E4 85 F1 | 	sub	objptr, #32
22c24     01 FA 65 A6 |  if_e	neg	result1, #1
22c28     38 00 90 AD |  if_e	jmp	#LR__3970
22c2c                 | '     return getcf(__this);
22c2c     20 E4 05 F1 | 	add	objptr, #32
22c30     F2 1E 02 FB | 	rdlong	local01, objptr
22c34     0F 21 02 F6 | 	mov	local02, local01
22c38     20 E4 85 F1 | 	sub	objptr, #32
22c3c     13 20 46 F7 | 	zerox	local02, #19
22c40     14 1E 46 F0 | 	shr	local01, #20
22c44     02 1E 66 F0 | 	shl	local01, #2
22c48     ED 1E 02 F1 | 	add	local01, __methods__
22c4c     0F 1F 02 FB | 	rdlong	local01, local01
22c50     F2 12 02 F6 | 	mov	arg01, objptr
22c54     F2 22 02 F6 | 	mov	local03, objptr
22c58     10 E5 01 F6 | 	mov	objptr, local02
22c5c     2D 1E 62 FD | 	call	local01
22c60     11 E5 01 F6 | 	mov	objptr, local03
22c64                 | LR__3970
22c64     A7 F0 03 F6 | 	mov	ptra, fp
22c68     B2 00 A0 FD | 	call	#popregs_
22c6c                 | __struct__s_vfs_file_t_getchar_ret
22c6c     2D 00 64 FD | 	ret
22c70                 | 
22c70                 | __struct___bas_wrap_sender_tx
22c70     03 4A 05 F6 | 	mov	COUNT_, #3
22c74     A8 00 A0 FD | 	call	#pushregs_
22c78     F2 1E 02 FB | 	rdlong	local01, objptr
22c7c     0F 21 02 F6 | 	mov	local02, local01
22c80     13 1E 46 F7 | 	zerox	local01, #19
22c84     14 20 46 F0 | 	shr	local02, #20
22c88     02 20 66 F0 | 	shl	local02, #2
22c8c     ED 20 02 F1 | 	add	local02, __methods__
22c90     10 21 02 FB | 	rdlong	local02, local02
22c94     F2 22 02 F6 | 	mov	local03, objptr
22c98     0F E5 01 F6 | 	mov	objptr, local01
22c9c     2D 20 62 FD | 	call	local02
22ca0     11 E5 01 F6 | 	mov	objptr, local03
22ca4     01 FA 05 F6 | 	mov	result1, #1
22ca8     A7 F0 03 F6 | 	mov	ptra, fp
22cac     B2 00 A0 FD | 	call	#popregs_
22cb0                 | __struct___bas_wrap_sender_tx_ret
22cb0     2D 00 64 FD | 	ret
22cb4                 | 
22cb4                 | __struct___bas_wrap_sender_rx
22cb4     03 4A 05 F6 | 	mov	COUNT_, #3
22cb8     A8 00 A0 FD | 	call	#pushregs_
22cbc     04 E4 05 F1 | 	add	objptr, #4
22cc0     F2 1E 02 FB | 	rdlong	local01, objptr
22cc4     0F 21 02 F6 | 	mov	local02, local01
22cc8     04 E4 85 F1 | 	sub	objptr, #4
22ccc     13 20 46 F7 | 	zerox	local02, #19
22cd0     14 1E 46 F0 | 	shr	local01, #20
22cd4     02 1E 66 F0 | 	shl	local01, #2
22cd8     ED 1E 02 F1 | 	add	local01, __methods__
22cdc     0F 1F 02 FB | 	rdlong	local01, local01
22ce0     F2 22 02 F6 | 	mov	local03, objptr
22ce4     10 E5 01 F6 | 	mov	objptr, local02
22ce8     2D 1E 62 FD | 	call	local01
22cec     11 E5 01 F6 | 	mov	objptr, local03
22cf0     A7 F0 03 F6 | 	mov	ptra, fp
22cf4     B2 00 A0 FD | 	call	#popregs_
22cf8                 | __struct___bas_wrap_sender_rx_ret
22cf8     2D 00 64 FD | 	ret
22cfc                 | 
22cfc                 | __struct___bas_wrap_sender_close
22cfc     03 4A 05 F6 | 	mov	COUNT_, #3
22d00     A8 00 A0 FD | 	call	#pushregs_
22d04     08 E4 05 F1 | 	add	objptr, #8
22d08     F2 1E 02 FB | 	rdlong	local01, objptr
22d0c     0F 21 02 F6 | 	mov	local02, local01
22d10     08 E4 85 F1 | 	sub	objptr, #8
22d14     13 20 46 F7 | 	zerox	local02, #19
22d18     14 1E 46 F0 | 	shr	local01, #20
22d1c     02 1E 66 F0 | 	shl	local01, #2
22d20     ED 1E 02 F1 | 	add	local01, __methods__
22d24     0F 1F 02 FB | 	rdlong	local01, local01
22d28     F2 22 02 F6 | 	mov	local03, objptr
22d2c     10 E5 01 F6 | 	mov	objptr, local02
22d30     2D 1E 62 FD | 	call	local01
22d34     11 E5 01 F6 | 	mov	objptr, local03
22d38     A7 F0 03 F6 | 	mov	ptra, fp
22d3c     B2 00 A0 FD | 	call	#popregs_
22d40                 | __struct___bas_wrap_sender_close_ret
22d40     2D 00 64 FD | 	ret
22d44                 | 
22d44                 | LR__3980
22d44     2F          | 	byte	"/"
22d45     00          | 	byte	0
22d46                 | LR__3981
22d46     69 6E 66    | 	byte	"inf"
22d49     00          | 	byte	0
22d4a                 | LR__3982
22d4a     6E 61 6E    | 	byte	"nan"
22d4d     00          | 	byte	0
22d4e                 | LR__3983
22d4e                 | 	byte	
22d4e     00          | 	byte	0
22d4f                 | LR__3984
22d4f                 | 	byte	
22d4f     00          | 	byte	0
22d50                 | LR__3985
22d50                 | 	byte	
22d50     00          | 	byte	0
22d51                 | LR__3986
22d51                 | 	byte	
22d51     00          | 	byte	0
22d52                 | LR__3987
22d52                 | 	byte	
22d52     00          | 	byte	0
22d53                 | LR__3988
22d53                 | 	byte	
22d53     00          | 	byte	0
22d54                 | LR__3989
22d54                 | 	byte	
22d54     00          | 	byte	0
22d55                 | LR__3990
22d55                 | 	byte	
22d55     00          | 	byte	0
22d56                 | LR__3991
22d56     00          | 	byte	0
22d57     00          | 	byte	0
22d58                 | LR__3992
22d58     00          | 	byte	0
22d59     00          | 	byte	0
22d5a                 | LR__3993
22d5a     00          | 	byte	0
22d5b     00          | 	byte	0
22d5c                 | LR__3994
22d5c     20 21 21 21 
22d60     20 63 6F 72 
22d64     72 75 70 74 
22d68     65 64 20 68 
22d6c     65 61 70 3F 
22d70     3F 3F 20 21 
22d74     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
22d77     00          | 	byte	0
22d78                 | LR__3995
22d78     20 21 21 21 
22d7c     20 6F 75 74 
22d80     20 6F 66 20 
22d84     68 65 61 70 
22d88     20 6D 65 6D 
22d8c     6F 72 79 20 
22d90     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
22d94     00          | 	byte	0
22d95                 | LR__3996
22d95     20 21 21 21 
22d99     20 63 6F 72 
22d9d     72 75 70 74 
22da1     65 64 20 68 
22da5     65 61 70 20 
22da9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
22dad     00          | 	byte	0
22dae                 | LR__3997
22dae     00          | 	byte	0
22daf     00          | 	byte	0
22db0                 | LR__3998
22db0     2E          | 	byte	"."
22db1     00          | 	byte	0
22db2                 | LR__3999
22db2     00          | 	byte	0
22db3     00          | 	byte	0
22db4                 | LR__4000
22db4     00          | 	byte	0
22db5     00          | 	byte	0
22db6                 | LR__4001
22db6     00          | 	byte	0
22db7     00          | 	byte	0
22db8                 | LR__4002
22db8     2A 3A 3C 3E 
22dbc     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
22dc0     00          | 	byte	0
22dc1                 | LR__4003
22dc1     2B 2C 3B 3D 
22dc5     5B 5D       | 	byte	"+,;=[]"
22dc7     00          | 	byte	0
22dc8                 | LR__4004
22dc8     46 41 54 33 
22dcc     32 20 20 20 | 	byte	"FAT32   "
22dd0     00          | 	byte	0
22dd1                 | LR__4005
22dd1     54 5A       | 	byte	"TZ"
22dd3     00          | 	byte	0
22dd4                 | LR__4006
22dd4     00          | 	byte	0
22dd5     00          | 	byte	0
22dd6                 | LR__4007
22dd6                 | 	byte	
22dd6     00          | 	byte	0
22dd7                 | LR__4008
22dd7                 | 	byte	
22dd7     00          | 	byte	0
22dd8                 | LR__4009
22dd8     3A          | 	byte	":"
22dd9     00          | 	byte	0
22dda                 | LR__4010
22dda                 | 	byte	
22dda     00          | 	byte	0
22ddb                 | LR__4011
22ddb                 | 	byte	
22ddb     00          | 	byte	0
22ddc                 | LR__4012
22ddc                 | 	byte	
22ddc     00          | 	byte	0
22ddd                 | LR__4013
22ddd                 | 	byte	
22ddd     00          | 	byte	0
22dde                 | LR__4014
22dde                 | 	byte	
22dde     00          | 	byte	0
22ddf                 | LR__4015
22ddf                 | 	byte	
22ddf     00          | 	byte	0
22de0                 | LR__4016
22de0                 | 	byte	
22de0     00          | 	byte	0
22de1                 | LR__4017
22de1     22          | 	byte	34
22de2     00          | 	byte	0
22de3                 | LR__4018
22de3     22          | 	byte	34
22de4     00          | 	byte	0
22de5                 | LR__4019
22de5     22          | 	byte	34
22de6     00          | 	byte	0
22de7                 | LR__4020
22de7     22          | 	byte	34
22de8     00          | 	byte	0
22de9                 | LR__4021
22de9     22          | 	byte	34
22dea     00          | 	byte	0
22deb                 | LR__4022
22deb     3E          | 	byte	">"
22dec     00          | 	byte	0
22ded                 | LR__4023
22ded     3E          | 	byte	">"
22dee     00          | 	byte	0
22def                 | LR__4024
22def     2B          | 	byte	"+"
22df0     00          | 	byte	0
22df1                 | LR__4025
22df1     2D          | 	byte	"-"
22df2     00          | 	byte	0
22df3                 | LR__4026
22df3     2A          | 	byte	"*"
22df4     00          | 	byte	0
22df5                 | LR__4027
22df5     2F          | 	byte	"/"
22df6     00          | 	byte	0
22df7                 | LR__4028
22df7     5E          | 	byte	"^"
22df8     00          | 	byte	0
22df9                 | LR__4029
22df9     3D          | 	byte	"="
22dfa     00          | 	byte	0
22dfb                 | LR__4030
22dfb     2B          | 	byte	"+"
22dfc     00          | 	byte	0
22dfd                 | LR__4031
22dfd     2B          | 	byte	"+"
22dfe     00          | 	byte	0
22dff                 | LR__4032
22dff     2D          | 	byte	"-"
22e00     00          | 	byte	0
22e01                 | LR__4033
22e01     2D          | 	byte	"-"
22e02     00          | 	byte	0
22e03                 | LR__4034
22e03     3C          | 	byte	"<"
22e04     00          | 	byte	0
22e05                 | LR__4035
22e05     3E          | 	byte	">"
22e06     00          | 	byte	0
22e07                 | LR__4036
22e07     22          | 	byte	34
22e08     00          | 	byte	0
22e09                 | LR__4037
22e09     22          | 	byte	34
22e0a     00          | 	byte	0
22e0b                 | LR__4038
22e0b                 | 	byte	
22e0b     00          | 	byte	0
22e0c                 | LR__4039
22e0c     6C 6F 61 64 | 	byte	"load"
22e10     00          | 	byte	0
22e11                 | LR__4040
22e11     73 61 76 65 | 	byte	"save"
22e15     00          | 	byte	0
22e16                 | LR__4041
22e16     62 72 75 6E | 	byte	"brun"
22e1a     00          | 	byte	0
22e1b                 | LR__4042
22e1b     6D 6F 75 73 
22e1f     65          | 	byte	"mouse"
22e20     00          | 	byte	0
22e21                 | LR__4043
22e21     63 75 72 73 
22e25     6F 72       | 	byte	"cursor"
22e27     00          | 	byte	0
22e28                 | LR__4044
22e28     63 6C 69 63 
22e2c     6B          | 	byte	"click"
22e2d     00          | 	byte	0
22e2e                 | LR__4045
22e2e     6F 6E       | 	byte	"on"
22e30     00          | 	byte	0
22e31                 | LR__4046
22e31     31          | 	byte	"1"
22e32     00          | 	byte	0
22e33                 | LR__4047
22e33     6F 66 66    | 	byte	"off"
22e36     00          | 	byte	0
22e37                 | LR__4048
22e37     30          | 	byte	"0"
22e38     00          | 	byte	0
22e39                 | LR__4049
22e39                 | 	byte	
22e39     00          | 	byte	0
22e3a                 | LR__4050
22e3a                 | 	byte	
22e3a     00          | 	byte	0
22e3b                 | LR__4051
22e3b                 | 	byte	
22e3b     00          | 	byte	0
22e3c                 | LR__4052
22e3c                 | 	byte	
22e3c     00          | 	byte	0
22e3d                 | LR__4053
22e3d     20 55 73 65 
22e41     72 20 66 75 
22e45     6E 63 74 69 
22e49     6F 6E 73 20 
22e4d     61 6E 64 20 
22e51     61 72 72 61 
22e55     79 73 20 6E 
22e59     6F 74 20 79 
22e5d     65 74 20 69 
22e61     6D 70 6C 65 
22e65     6D 65 6E 74 
22e69     65 64       | 	byte	" User functions and arrays not yet implemented"
22e6b     00          | 	byte	0
22e6c                 | LR__4054
22e6c                 | 	byte	
22e6c     00          | 	byte	0
22e6d                 | LR__4055
22e6d                 | 	byte	
22e6d     00          | 	byte	0
22e6e                 | LR__4056
22e6e     52 65 61 64 
22e72     79          | 	byte	"Ready"
22e73     00          | 	byte	0
22e74                 | LR__4057
22e74     2B          | 	byte	"+"
22e75     00          | 	byte	0
22e76                 | LR__4058
22e76     2D          | 	byte	"-"
22e77     00          | 	byte	0
22e78                 | LR__4059
22e78     6F 72       | 	byte	"or"
22e7a     00          | 	byte	0
22e7b                 | LR__4060
22e7b     78 6F 72    | 	byte	"xor"
22e7e     00          | 	byte	0
22e7f                 | LR__4061
22e7f     2A          | 	byte	"*"
22e80     00          | 	byte	0
22e81                 | LR__4062
22e81     2F          | 	byte	"/"
22e82     00          | 	byte	0
22e83                 | LR__4063
22e83     61 6E 64    | 	byte	"and"
22e86     00          | 	byte	0
22e87                 | LR__4064
22e87     64 69 76    | 	byte	"div"
22e8a     00          | 	byte	0
22e8b                 | LR__4065
22e8b     6D 6F 64    | 	byte	"mod"
22e8e     00          | 	byte	0
22e8f                 | LR__4066
22e8f     73 68 6C    | 	byte	"shl"
22e92     00          | 	byte	0
22e93                 | LR__4067
22e93     73 68 72    | 	byte	"shr"
22e96     00          | 	byte	0
22e97                 | LR__4068
22e97     5E          | 	byte	"^"
22e98     00          | 	byte	0
22e99                 | LR__4069
22e99     6E 6F 74    | 	byte	"not"
22e9c     00          | 	byte	0
22e9d                 | LR__4070
22e9d     40          | 	byte	"@"
22e9e     00          | 	byte	0
22e9f                 | LR__4071
22e9f     3D          | 	byte	"="
22ea0     00          | 	byte	0
22ea1                 | LR__4072
22ea1     3E 3D       | 	byte	">="
22ea3     00          | 	byte	0
22ea4                 | LR__4073
22ea4     3C 3D       | 	byte	"<="
22ea6     00          | 	byte	0
22ea7                 | LR__4074
22ea7     3C          | 	byte	"<"
22ea8     00          | 	byte	0
22ea9                 | LR__4075
22ea9     3E          | 	byte	">"
22eaa     00          | 	byte	0
22eab                 | LR__4076
22eab     3C 3E       | 	byte	"<>"
22ead     00          | 	byte	0
22eae                 | LR__4077
22eae     2B 2B       | 	byte	"++"
22eb0     00          | 	byte	0
22eb1                 | LR__4078
22eb1     2D 2D       | 	byte	"--"
22eb3     00          | 	byte	0
22eb4                 | LR__4079
22eb4     2B          | 	byte	"+"
22eb5     00          | 	byte	0
22eb6                 | LR__4080
22eb6     2D          | 	byte	"-"
22eb7     00          | 	byte	0
22eb8                 | LR__4081
22eb8     3D          | 	byte	"="
22eb9     00          | 	byte	0
22eba                 | LR__4082
22eba     2C          | 	byte	","
22ebb     00          | 	byte	0
22ebc                 | LR__4083
22ebc     2A          | 	byte	"*"
22ebd     00          | 	byte	0
22ebe                 | LR__4084
22ebe     2F          | 	byte	"/"
22ebf     00          | 	byte	0
22ec0                 | LR__4085
22ec0     3B          | 	byte	";"
22ec1     00          | 	byte	0
22ec2                 | LR__4086
22ec2     22          | 	byte	34
22ec3     00          | 	byte	0
22ec4                 | LR__4087
22ec4     5E          | 	byte	"^"
22ec5     00          | 	byte	0
22ec6                 | LR__4088
22ec6     29          | 	byte	")"
22ec7     00          | 	byte	0
22ec8                 | LR__4089
22ec8     28          | 	byte	"("
22ec9     00          | 	byte	0
22eca                 | LR__4090
22eca     3A          | 	byte	":"
22ecb     00          | 	byte	0
22ecc                 | LR__4091
22ecc     20          | 	byte	" "
22ecd     00          | 	byte	0
22ece                 | LR__4092
22ece     3E          | 	byte	">"
22ecf     00          | 	byte	0
22ed0                 | LR__4093
22ed0     3C          | 	byte	"<"
22ed1     00          | 	byte	0
22ed2                 | LR__4094
22ed2     3D          | 	byte	"="
22ed3     00          | 	byte	0
22ed4                 | LR__4095
22ed4     63 6C 73    | 	byte	"cls"
22ed7     00          | 	byte	0
22ed8                 | LR__4096
22ed8     6E 65 77    | 	byte	"new"
22edb     00          | 	byte	0
22edc                 | LR__4097
22edc     70 6C 6F 74 | 	byte	"plot"
22ee0     00          | 	byte	0
22ee1                 | LR__4098
22ee1     64 72 61 77 | 	byte	"draw"
22ee5     00          | 	byte	0
22ee6                 | LR__4099
22ee6     70 72 69 6E 
22eea     74          | 	byte	"print"
22eeb     00          | 	byte	0
22eec                 | LR__4100
22eec     63 69 72 63 
22ef0     6C 65       | 	byte	"circle"
22ef2     00          | 	byte	0
22ef3                 | LR__4101
22ef3     66 63 69 72 
22ef7     63 6C 65    | 	byte	"fcircle"
22efa     00          | 	byte	0
22efb                 | LR__4102
22efb     62 6F 78    | 	byte	"box"
22efe     00          | 	byte	0
22eff                 | LR__4103
22eff     66 72 61 6D 
22f03     65          | 	byte	"frame"
22f04     00          | 	byte	0
22f05                 | LR__4104
22f05     63 6F 6C 6F 
22f09     72          | 	byte	"color"
22f0a     00          | 	byte	0
22f0b                 | LR__4105
22f0b     70 72 69 6E 
22f0f     74          | 	byte	"print"
22f10     00          | 	byte	0
22f11                 | LR__4106
22f11     6C 69 73 74 | 	byte	"list"
22f15     00          | 	byte	0
22f16                 | LR__4107
22f16     72 75 6E    | 	byte	"run"
22f19     00          | 	byte	0
22f1a                 | LR__4108
22f1a     67 6F 74 6F | 	byte	"goto"
22f1e     00          | 	byte	0
22f1f                 | LR__4109
22f1f     63 73 61 76 
22f23     65          | 	byte	"csave"
22f24     00          | 	byte	0
22f25                 | LR__4110
22f25     73 61 76 65 | 	byte	"save"
22f29     00          | 	byte	0
22f2a                 | LR__4111
22f2a     6C 6F 61 64 | 	byte	"load"
22f2e     00          | 	byte	0
22f2f                 | LR__4112
22f2f     62 72 75 6E | 	byte	"brun"
22f33     00          | 	byte	0
22f34                 | LR__4113
22f34     70 69 6E 77 
22f38     72 69 74 65 | 	byte	"pinwrite"
22f3c     00          | 	byte	0
22f3d                 | LR__4114
22f3d     77 61 69 74 
22f41     6D 73       | 	byte	"waitms"
22f43     00          | 	byte	0
22f44                 | LR__4115
22f44     77 61 69 74 
22f48     76 62 6C    | 	byte	"waitvbl"
22f4b     00          | 	byte	0
22f4c                 | LR__4116
22f4c     69 66       | 	byte	"if"
22f4e     00          | 	byte	0
22f4f                 | LR__4117
22f4f     65 6C 73 65 | 	byte	"else"
22f53     00          | 	byte	0
22f54                 | LR__4118
22f54     74 68 65 6E | 	byte	"then"
22f58     00          | 	byte	0
22f59                 | LR__4119
22f59     62 65 65 70 | 	byte	"beep"
22f5d     00          | 	byte	0
22f5e                 | LR__4120
22f5e     64 69 72    | 	byte	"dir"
22f61     00          | 	byte	0
22f62                 | LR__4121
22f62     66 6F 72    | 	byte	"for"
22f65     00          | 	byte	0
22f66                 | LR__4122
22f66     6E 65 78 74 | 	byte	"next"
22f6a     00          | 	byte	0
22f6b                 | LR__4123
22f6b     70 61 70 65 
22f6f     72          | 	byte	"paper"
22f70     00          | 	byte	0
22f71                 | LR__4124
22f71     69 6E 6B    | 	byte	"ink"
22f74     00          | 	byte	0
22f75                 | LR__4125
22f75     66 6F 6E 74 | 	byte	"font"
22f79     00          | 	byte	0
22f7a                 | LR__4126
22f7a     6D 6F 64 65 | 	byte	"mode"
22f7e     00          | 	byte	0
22f7f                 | LR__4127
22f7f     6D 6F 75 73 
22f83     65          | 	byte	"mouse"
22f84     00          | 	byte	0
22f85                 | LR__4128
22f85     63 75 72 73 
22f89     6F 72       | 	byte	"cursor"
22f8b     00          | 	byte	0
22f8c                 | LR__4129
22f8c     63 6C 69 63 
22f90     6B          | 	byte	"click"
22f91     00          | 	byte	0
22f92                 | LR__4130
22f92     64 65 66 73 
22f96     70 72 69 74 
22f9a     65          | 	byte	"defsprite"
22f9b     00          | 	byte	0
22f9c                 | LR__4131
22f9c     73 70 72 69 
22fa0     74 65       | 	byte	"sprite"
22fa2     00          | 	byte	0
22fa3                 | LR__4132
22fa3     77 61 69 74 
22fa7     63 6C 6F 63 
22fab     6B          | 	byte	"waitclock"
22fac     00          | 	byte	0
22fad                 | LR__4133
22fad     66 69 6C 6C | 	byte	"fill"
22fb1     00          | 	byte	0
22fb2                 | LR__4134
22fb2     64 69 6D    | 	byte	"dim"
22fb5     00          | 	byte	0
22fb6                 | LR__4135
22fb6     72 6E 64    | 	byte	"rnd"
22fb9     00          | 	byte	0
22fba                 | LR__4136
22fba     6D 6F 75 73 
22fbe     65 78       | 	byte	"mousex"
22fc0     00          | 	byte	0
22fc1                 | LR__4137
22fc1     6D 6F 75 73 
22fc5     65 79       | 	byte	"mousey"
22fc7     00          | 	byte	0
22fc8                 | LR__4138
22fc8     6D 6F 75 73 
22fcc     65 6B       | 	byte	"mousek"
22fce     00          | 	byte	0
22fcf                 | LR__4139
22fcf     6D 6F 75 73 
22fd3     65 77       | 	byte	"mousew"
22fd5     00          | 	byte	0
22fd6                 | LR__4140
22fd6     67 65 74 74 
22fda     69 6D 65    | 	byte	"gettime"
22fdd     00          | 	byte	0
22fde                 | LR__4141
22fde     73 69 6E    | 	byte	"sin"
22fe1     00          | 	byte	0
22fe2                 | LR__4142
22fe2     73 74 69 63 
22fe6     6B          | 	byte	"stick"
22fe7     00          | 	byte	0
22fe8                 | LR__4143
22fe8     73 74 72 69 
22fec     67          | 	byte	"strig"
22fed     00          | 	byte	0
22fee                 | LR__4144
22fee     67 65 74 70 
22ff2     69 78 65 6C | 	byte	"getpixel"
22ff6     00          | 	byte	0
22ff7                 | LR__4145
22ff7     61          | 	byte	"a"
22ff8     00          | 	byte	0
22ff9                 | LR__4146
22ff9     7A          | 	byte	"z"
22ffa     00          | 	byte	0
22ffb                 | LR__4147
22ffb     5F          | 	byte	"_"
22ffc     00          | 	byte	0
22ffd                 | LR__4148
22ffd     61          | 	byte	"a"
22ffe     00          | 	byte	0
22fff                 | LR__4149
22fff     7A          | 	byte	"z"
23000     00          | 	byte	0
23001                 | LR__4150
23001     30          | 	byte	"0"
23002     00          | 	byte	0
23003                 | LR__4151
23003     39          | 	byte	"9"
23004     00          | 	byte	0
23005                 | LR__4152
23005     5F          | 	byte	"_"
23006     00          | 	byte	0
23007                 | LR__4153
23007     2E          | 	byte	"."
23008     00          | 	byte	0
23009                 | LR__4154
23009     61          | 	byte	"a"
2300a     00          | 	byte	0
2300b                 | LR__4155
2300b     7A          | 	byte	"z"
2300c     00          | 	byte	0
2300d                 | LR__4156
2300d     30          | 	byte	"0"
2300e     00          | 	byte	0
2300f                 | LR__4157
2300f     39          | 	byte	"9"
23010     00          | 	byte	0
23011                 | LR__4158
23011     5F          | 	byte	"_"
23012     00          | 	byte	0
23013                 | LR__4159
23013     24          | 	byte	"$"
23014     00          | 	byte	0
23015                 | LR__4160
23015     25          | 	byte	"%"
23016     00          | 	byte	0
23017                 | LR__4161
23017     21          | 	byte	"!"
23018     00          | 	byte	0
23019                 | LR__4162
23019     30          | 	byte	"0"
2301a     00          | 	byte	0
2301b                 | LR__4163
2301b     39          | 	byte	"9"
2301c     00          | 	byte	0
2301d                 | LR__4164
2301d     2E          | 	byte	"."
2301e     00          | 	byte	0
2301f                 | LR__4165
2301f     24          | 	byte	"$"
23020     00          | 	byte	0
23021                 | LR__4166
23021     25          | 	byte	"%"
23022     00          | 	byte	0
23023                 | LR__4167
23023     2D          | 	byte	"-"
23024     00          | 	byte	0
23025                 | LR__4168
23025     2E          | 	byte	"."
23026     00          | 	byte	0
23027                 | LR__4169
23027     30          | 	byte	"0"
23028     00          | 	byte	0
23029                 | LR__4170
23029     39          | 	byte	"9"
2302a     00          | 	byte	0
2302b                 | LR__4171
2302b     5F          | 	byte	"_"
2302c     00          | 	byte	0
2302d                 | LR__4172
2302d     2E          | 	byte	"."
2302e     00          | 	byte	0
2302f                 | LR__4173
2302f     45          | 	byte	"E"
23030     00          | 	byte	0
23031                 | LR__4174
23031     65          | 	byte	"e"
23032     00          | 	byte	0
23033                 | LR__4175
23033     2D          | 	byte	"-"
23034     00          | 	byte	0
23035                 | LR__4176
23035     2D          | 	byte	"-"
23036     00          | 	byte	0
23037                 | LR__4177
23037     65          | 	byte	"e"
23038     00          | 	byte	0
23039                 | LR__4178
23039     2E          | 	byte	"."
2303a     00          | 	byte	0
2303b                 | LR__4179
2303b     45          | 	byte	"E"
2303c     00          | 	byte	0
2303d                 | LR__4180
2303d     65          | 	byte	"e"
2303e     00          | 	byte	0
2303f                 | LR__4181
2303f     30          | 	byte	"0"
23040     00          | 	byte	0
23041                 | LR__4182
23041     39          | 	byte	"9"
23042     00          | 	byte	0
23043                 | LR__4183
23043     24          | 	byte	"$"
23044     00          | 	byte	0
23045                 | LR__4184
23045     25          | 	byte	"%"
23046     00          | 	byte	0
23047                 | LR__4185
23047     2D          | 	byte	"-"
23048     00          | 	byte	0
23049                 | LR__4186
23049     30          | 	byte	"0"
2304a     00          | 	byte	0
2304b                 | LR__4187
2304b     39          | 	byte	"9"
2304c     00          | 	byte	0
2304d                 | LR__4188
2304d     5F          | 	byte	"_"
2304e     00          | 	byte	0
2304f                 | LR__4189
2304f     30          | 	byte	"0"
23050     00          | 	byte	0
23051                 | LR__4190
23051     39          | 	byte	"9"
23052     00          | 	byte	0
23053                 | LR__4191
23053     5F          | 	byte	"_"
23054     00          | 	byte	0
23055                 | LR__4192
23055     22          | 	byte	34
23056     00          | 	byte	0
23057                 | LR__4193
23057     22          | 	byte	34
23058     00          | 	byte	0
23059                 | LR__4194
23059     28          | 	byte	"("
2305a     00          | 	byte	0
2305b                 | LR__4195
2305b     2C          | 	byte	","
2305c     00          | 	byte	0
2305d                 | LR__4196
2305d     29          | 	byte	")"
2305e     00          | 	byte	0
2305f                 | LR__4197
2305f     29          | 	byte	")"
23060     00          | 	byte	0
23061                 | LR__4198
23061     74 6F       | 	byte	"to"
23063     00          | 	byte	0
23064                 | LR__4199
23064     73 74 65 70 | 	byte	"step"
23068     00          | 	byte	0
23069                 | LR__4200
23069     57 65 20 68 
2306d     61 76 65 20 
23071     61 20 73 6C 
23075     6F 77 20 67 
23079     6F 74 6F 2C 
2307d     20 74 6F 64 
23081     6F 20 20    | 	byte	"We have a slow goto, todo  "
23084     00          | 	byte	0
23085                 | LR__4201
23085     6E 6F 6E 61 
23089     6D 65 2E 62 
2308d     61 73       | 	byte	"noname.bas"
2308f     00          | 	byte	0
23090                 | LR__4202
23090                 | 	byte	
23090     00          | 	byte	0
23091                 | LR__4203
23091     6E 6F 6E 61 
23095     6D 65 2E 62 
23099     61 73       | 	byte	"noname.bas"
2309b     00          | 	byte	0
2309c                 | LR__4204
2309c     2F          | 	byte	"/"
2309d     00          | 	byte	0
2309e                 | LR__4205
2309e                 | 	byte	
2309e     00          | 	byte	0
2309f                 | LR__4206
2309f     6E 6F 6E 61 
230a3     6D 65 2E 62 
230a7     61 73       | 	byte	"noname.bas"
230a9     00          | 	byte	0
230aa                 | LR__4207
230aa     2F          | 	byte	"/"
230ab     00          | 	byte	0
230ac                 | LR__4208
230ac     53 79 73 74 
230b0     65 6D 20 65 
230b4     72 72 6F 72 
230b8     20          | 	byte	"System error "
230b9     00          | 	byte	0
230ba                 | LR__4209
230ba     3A 20       | 	byte	": "
230bc     00          | 	byte	0
230bd                 | LR__4210
230bd     53 74 6F 70 
230c1     70 65 64 20 
230c5     61 74 20 6C 
230c9     69 6E 65 20 | 	byte	"Stopped at line "
230cd     00          | 	byte	0
230ce                 | LR__4211
230ce     45 72 72 6F 
230d2     72 20       | 	byte	"Error "
230d4     00          | 	byte	0
230d5                 | LR__4212
230d5     3A 20       | 	byte	": "
230d7     00          | 	byte	0
230d8                 | LR__4213
230d8     72 6E 64 3A 
230dc     20          | 	byte	"rnd: "
230dd     00          | 	byte	0
230de                 | LR__4214
230de     72 6E 64 3A 
230e2     20          | 	byte	"rnd: "
230e3     00          | 	byte	0
230e4                 | LR__4215
230e4     73 69 6E 3A 
230e8     20          | 	byte	"sin: "
230e9     00          | 	byte	0
230ea                 | LR__4216
230ea     73 69 6E 3A 
230ee     20          | 	byte	"sin: "
230ef     00          | 	byte	0
230f0                 | LR__4217
230f0     73 74 69 63 
230f4     6B 3A 20    | 	byte	"stick: "
230f7     00          | 	byte	0
230f8                 | LR__4218
230f8     73 74 72 69 
230fc     67 3A 20    | 	byte	"strig: "
230ff     00          | 	byte	0
23100                 | LR__4219
23100     67 65 74 70 
23104     69 78 65 6C 
23108     3A 20       | 	byte	"getpixel: "
2310a     00          | 	byte	0
2310b                 | LR__4220
2310b                 | 	byte	
2310b     00          | 	byte	0
2310c                 | LR__4221
2310c     2F 73 64 2F 
23110     62 61 73    | 	byte	"/sd/bas"
23113     00          | 	byte	0
23114                 | LR__4222
23114     57 6F 72 6B 
23118     69 6E 67 20 
2311c     64 69 72 65 
23120     63 74 6F 72 
23124     79 3A 20    | 	byte	"Working directory: "
23127     00          | 	byte	0
23128                 | LR__4223
23128     2A          | 	byte	"*"
23129     00          | 	byte	0
2312a                 | LR__4224
2312a                 | 	byte	
2312a     00          | 	byte	0
2312b                 | LR__4225
2312b     5B 64 69 72 
2312f     5D 20       | 	byte	"[dir] "
23131     00          | 	byte	0
23132                 | LR__4226
23132     2A          | 	byte	"*"
23133     00          | 	byte	0
23134                 | LR__4227
23134                 | 	byte	
23134     00          | 	byte	0
23135                 | LR__4228
23135     2D 2D 2D 2D 
23139     2D 6D 6F 72 
2313d     65 2C 20 70 
23141     72 65 73 73 
23145     20 61 6E 79 
23149     20 6B 65 79 | 	byte	"-----more, press any key"
2314d     00          | 	byte	0
2314e                 | LR__4229
2314e     20 20 20 20 
      ...             
23166     20 20 20 20 
2316a     20          | 	byte	"                             "
2316b     00          | 	byte	0
2316c                 | LR__4230
2316c     2F          | 	byte	"/"
2316d     00          | 	byte	0
2316e                 | LR__4231
2316e     2F 73 64 2F 
23172     62 69 6E 2F | 	byte	"/sd/bin/"
23176     00          | 	byte	0
23177                 | LR__4232
23177     53 79 73 74 
2317b     65 6D 20 65 
2317f     72 72 6F 72 
23183     20          | 	byte	"System error "
23184     00          | 	byte	0
23185                 | LR__4233
23185     3A 20       | 	byte	": "
23187     00          | 	byte	0
23188                 | LR__4234
23188                 | 	byte	
23188     00          | 	byte	0
23189                 | LR__4235
23189     45 78 70 65 
2318d     63 74 65 64 
23191     20 6E 75 6D 
23195     62 65 72 2C 
23199     20 67 6F 74 
2319d     20 73 6F 6D 
231a1     65 74 68 69 
231a5     6E 67 20 65 
231a9     6C 73 65 2E | 	byte	"Expected number, got something else."
231ad     00          | 	byte	0
231ae                 | LR__4236
231ae     43 61 6E 6E 
231b2     6F 74 20 61 
231b6     64 64 20 61 
231ba     20 6E 75 6D 
231be     62 65 72 20 
231c2     74 6F 20 61 
231c6     20 73 74 72 
231ca     69 6E 67 2E | 	byte	"Cannot add a number to a string."
231ce     00          | 	byte	0
231cf                 | LR__4237
231cf     43 61 6E 6E 
231d3     6F 74 20 73 
231d7     75 62 73 74 
231db     72 61 63 74 
231df     20 73 74 72 
231e3     69 6E 67 73 
231e7     2E          | 	byte	"Cannot substract strings."
231e8     00          | 	byte	0
231e9                 | LR__4238
231e9     55 6E 6B 6E 
231ed     6F 77 6E 20 
231f1     65 72 72 6F 
231f5     72 20 77 68 
231f9     69 6C 65 20 
231fd     61 64 64 69 
23201     6E 67 2E    | 	byte	"Unknown error while adding."
23204     00          | 	byte	0
23205                 | LR__4239
23205     55 6E 6B 6E 
23209     6F 77 6E 20 
2320d     65 72 72 6F 
23211     72 20 77 68 
23215     69 6C 65 20 
23219     73 75 62 73 
2321d     74 72 61 63 
23221     74 69 6E 67 
23225     2E          | 	byte	"Unknown error while substracting."
23226     00          | 	byte	0
23227                 | LR__4240
23227     43 61 6E 6E 
2322b     6F 74 20 64 
2322f     6F 20 6C 6F 
23233     67 69 63 20 
23237     6F 70 65 72 
2323b     61 74 69 6F 
2323f     6E 20 6F 6E 
23243     20 73 74 72 
23247     69 6E 67 20 
2324b     6F 72 20 66 
2324f     6C 6F 61 74 
23253     2E          | 	byte	"Cannot do logic operation on string or float."
23254     00          | 	byte	0
23255                 | LR__4241
23255     55 6E 6B 6E 
23259     6F 77 6E 20 
2325d     65 72 72 6F 
23261     72 20 77 68 
23265     69 6C 65 20 
23269     64 6F 69 6E 
2326d     67 20 6C 6F 
23271     67 69 63 20 
23275     6F 70 65 72 
23279     61 74 69 6F 
2327d     6E 2E       | 	byte	"Unknown error while doing logic operation."
2327f     00          | 	byte	0
23280                 | LR__4242
23280     43 61 6E 6E 
23284     6F 74 20 6D 
23288     75 6C 74 69 
2328c     70 6C 79 20 
23290     73 74 72 69 
23294     6E 67 73 2E | 	byte	"Cannot multiply strings."
23298     00          | 	byte	0
23299                 | LR__4243
23299     55 6E 6B 6E 
2329d     6F 77 6E 20 
232a1     65 72 72 6F 
232a5     72 20 77 68 
232a9     69 6C 65 20 
232ad     6D 75 6C 74 
232b1     69 70 6C 79 
232b5     69 6E 67 2E | 	byte	"Unknown error while multiplying."
232b9     00          | 	byte	0
232ba                 | LR__4244
232ba     43 61 6E 6E 
232be     6F 74 20 64 
232c2     69 76 69 64 
232c6     65 20 73 74 
232ca     72 69 6E 67 
232ce     73 2E       | 	byte	"Cannot divide strings."
232d0     00          | 	byte	0
232d1                 | LR__4245
232d1     55 6E 6B 6E 
232d5     6F 77 6E 20 
232d9     65 72 72 6F 
232dd     72 20 77 68 
232e1     69 6C 65 20 
232e5     64 69 76 69 
232e9     64 69 6E 67 
232ed     2E          | 	byte	"Unknown error while dividing."
232ee     00          | 	byte	0
232ef                 | LR__4246
232ef     43 61 6E 6E 
232f3     6F 74 20 63 
232f7     6F 6D 70 75 
232fb     74 65 20 61 
232ff     20 70 6F 77 
23303     65 72 20 6F 
23307     66 20 61 20 
2330b     73 74 72 69 
2330f     6E 67 2E    | 	byte	"Cannot compute a power of a string."
23312     00          | 	byte	0
23313                 | LR__4247
23313     55 6E 6B 6E 
23317     6F 77 6E 20 
2331b     65 72 72 6F 
2331f     72 20 77 68 
23323     69 6C 65 20 
23327     63 6F 6D 70 
2332b     75 74 69 6E 
2332f     67 20 61 20 
23333     70 6F 77 65 
23337     72 2E       | 	byte	"Unknown error while computing a power."
23339     00          | 	byte	0
2333a                 | LR__4248
2333a     52 69 67 68 
2333e     74 20 70 61 
23342     72 65 6E 74 
23346     68 65 73 69 
2334a     73 20 65 78 
2334e     70 65 63 74 
23352     65 64 2E    | 	byte	"Right parenthesis expected."
23355     00          | 	byte	0
23356                 | LR__4249
23356     45 78 70 65 
2335a     63 74 65 64 
2335e     20 73 74 72 
23362     69 6E 67 2E | 	byte	"Expected string."
23366     00          | 	byte	0
23367                 | LR__4250
23367     45 78 70 65 
2336b     63 74 65 64 
2336f     20 66 6C 6F 
23373     61 74 2E    | 	byte	"Expected float."
23376     00          | 	byte	0
23377                 | LR__4251
23377     45 78 70 65 
2337b     63 74 65 64 
2337f     20 75 6E 73 
23383     69 67 6E 65 
23387     64 20 69 6E 
2338b     74 65 67 65 
2338f     72 2E       | 	byte	"Expected unsigned integer."
23391     00          | 	byte	0
23392                 | LR__4252
23392     45 78 70 65 
23396     63 74 65 64 
2339a     20 69 6E 74 
2339e     65 67 65 72 
233a2     2E          | 	byte	"Expected integer."
233a3     00          | 	byte	0
233a4                 | LR__4253
233a4     4E 6F 20 6D 
233a8     6F 72 65 20 
233ac     76 61 72 69 
233b0     61 62 6C 65 
233b4     20 73 6C 6F 
233b8     74 73 2E    | 	byte	"No more variable slots."
233bb     00          | 	byte	0
233bc                 | LR__4254
233bc     56 61 72 69 
233c0     61 62 6C 65 
233c4     20 6E 6F 74 
233c8     20 66 6F 75 
233cc     6E 64 2E    | 	byte	"Variable not found."
233cf     00          | 	byte	0
233d0                 | LR__4255
233d0     43 6F 6D 6D 
233d4     61 20 65 78 
233d8     70 65 63 74 
233dc     65 64 2E    | 	byte	"Comma expected."
233df     00          | 	byte	0
233e0                 | LR__4256
233e0     43 6F 6D 6D 
233e4     61 20 6F 72 
233e8     20 73 65 6D 
233ec     69 63 6F 6C 
233f0     6F 6E 20 65 
233f4     78 70 65 63 
233f8     74 65 64 2E | 	byte	"Comma or semicolon expected."
233fc     00          | 	byte	0
233fd                 | LR__4257
233fd     55 6E 6B 6E 
23401     6F 77 6E 20 
23405     63 6F 6D 6D 
23409     61 6E 64 2E | 	byte	"Unknown command."
2340d     00          | 	byte	0
2340e                 | LR__4258
2340e     53 74 61 63 
23412     6B 20 75 6E 
23416     64 65 72 66 
2341a     6C 6F 77 2E | 	byte	"Stack underflow."
2341e     00          | 	byte	0
2341f                 | LR__4259
2341f     43 61 6E 6E 
23423     6F 74 20 65 
23427     78 65 63 75 
2342b     74 65 20 67 
2342f     6F 74 6F 20 
23433     69 6E 20 74 
23437     68 65 20 69 
2343b     6D 6D 65 64 
2343f     69 61 74 65 
23443     20 6D 6F 64 
23447     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
23449     00          | 	byte	0
2344a                 | LR__4260
2344a     43 61 6E 6E 
2344e     6F 74 20 6C 
23452     6F 61 64 20 
23456     66 72 6F 6D 
2345a     20 74 68 69 
2345e     73 20 66 69 
23462     6C 65 2E    | 	byte	"Cannot load from this file."
23465     00          | 	byte	0
23466                 | LR__4261
23466     54 68 65 20 
2346a     70 72 6F 67 
2346e     72 61 6D 20 
23472     69 73 20 65 
23476     6D 70 74 79 
2347a     2E          | 	byte	"The program is empty."
2347b     00          | 	byte	0
2347c                 | LR__4262
2347c     49 66 20 61 
23480     66 74 65 72 
23484     20 69 66 2E | 	byte	"If after if."
23488     00          | 	byte	0
23489                 | LR__4263
23489     45 6D 70 74 
2348d     79 20 65 78 
23491     70 72 65 73 
23495     73 69 6F 6E 
23499     2E          | 	byte	"Empty expression."
2349a     00          | 	byte	0
2349b                 | LR__4264
2349b     53 74 72 69 
2349f     6E 67 20 65 
234a3     78 70 65 63 
234a7     74 65 64 2E | 	byte	"String expected."
234ab     00          | 	byte	0
234ac                 | LR__4265
234ac     49 6E 74 65 
234b0     72 70 72 65 
234b4     74 65 72 20 
234b8     69 6E 74 65 
234bc     72 6E 61 6C 
234c0     20 65 72 72 
234c4     6F 72 2E    | 	byte	"Interpreter internal error."
234c7     00          | 	byte	0
234c8                 | LR__4266
234c8     45 78 70 65 
234cc     63 74 65 64 
234d0     20 61 73 73 
234d4     69 67 6E 2E | 	byte	"Expected assign."
234d8     00          | 	byte	0
234d9                 | LR__4267
234d9     45 78 70 65 
234dd     63 74 65 64 
234e1     20 27 74 6F 
234e5     27 2E       | 	byte	"Expected 'to'."
234e7     00          | 	byte	0
234e8                 | LR__4268
234e8     45 78 70 65 
234ec     63 74 65 64 
234f0     20 69 6E 74 
234f4     65 67 65 72 
234f8     20 76 61 72 
234fc     69 61 62 6C 
23500     65 2E       | 	byte	"Expected integer variable."
23502     00          | 	byte	0
23503                 | LR__4269
23503     55 6E 69 6E 
23507     69 74 69 61 
2350b     6C 69 7A 65 
2350f     64 20 76 61 
23513     72 69 61 62 
23517     6C 65 20 69 
2351b     6E 20 27 6E 
2351f     65 78 74 27 
23523     2C 20 75 73 
23527     65 20 27 66 
2352b     6F 72 27 20 
2352f     62 65 66 6F 
23533     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
23536     00          | 	byte	0
23537                 | LR__4270
23537     4E 6F 20 6D 
2353b     6F 72 65 20 
2353f     73 6C 6F 74 
23543     73 20 66 6F 
23547     72 20 27 66 
2354b     6F 72 27 2E | 	byte	"No more slots for 'for'."
2354f     00          | 	byte	0
23550                 | LR__4271
23550     27 4E 65 78 
23554     74 27 20 64 
23558     6F 65 73 6E 
2355c     27 74 20 6D 
23560     61 74 63 68 
23564     20 27 66 6F 
23568     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2356b     00          | 	byte	0
2356c                 | LR__4272
2356c     27 47 6F 74 
23570     6F 27 20 74 
23574     61 72 67 65 
23578     74 20 6C 69 
2357c     6E 65 20 6E 
23580     6F 74 20 66 
23584     6F 75 6E 64 
23588     2E          | 	byte	"'Goto' target line not found."
23589     00          | 	byte	0
2358a                 | LR__4273
2358a     42 61 64 20 
2358e     6E 75 6D 62 
23592     65 72 20 6F 
23596     66 20 70 61 
2359a     72 61 6D 65 
2359e     74 65 72 73 | 	byte	"Bad number of parameters"
235a2     00          | 	byte	0
235a3                 | LR__4274
235a3     46 75 6E 63 
235a7     74 69 6F 6E 
235ab     20 75 6E 64 
235af     65 66 69 6E 
235b3     65 64 20 66 
235b7     6F 72 20 73 
235bb     74 72 69 6E 
235bf     67 73       | 	byte	"Function undefined for strings"
235c1     00          | 	byte	0
235c2                 | LR__4275
235c2     42 61 64 20 
235c6     70 61 72 61 
235ca     6D 65 74 65 
235ce     72 2E       | 	byte	"Bad parameter."
235d0     00          | 	byte	0
235d1                 | LR__4276
235d1     43 61 6E 6E 
235d5     6F 74 20 64 
235d9     65 63 6C 61 
235dd     72 65 20 61 
235e1     6E 20 61 72 
235e5     72 61 79 3A 
235e9     20 74 68 65 
235ed     20 76 61 72 
235f1     69 61 62 6C 
235f5     65 20 65 78 
235f9     69 73 74 73 
235fd     2E          | 	byte	"Cannot declare an array: the variable exists."
235fe     00          | 	byte	0
235ff                 | LR__4277
235ff     45 78 70 65 
23603     63 74 65 64 
23607     20 27 28 27 
2360b     2E          | 	byte	"Expected '('."
2360c     00          | 	byte	0
2360d                 | LR__4278
2360d     45 78 70 65 
23611     63 74 65 64 
23615     20 27 29 27 
23619     20 6F 72 20 
2361d     27 2C 27 2E | 	byte	"Expected ')' or ','."
23621     00          | 	byte	0
23622                 | LR__4279
23622     4E 6F 20 6D 
23626     6F 72 65 20 
2362a     74 68 61 6E 
2362e     20 33 20 64 
23632     69 6D 65 6E 
23636     73 69 6F 6E 
2363a     73 20 73 75 
2363e     70 70 6F 72 
23642     74 65 64    | 	byte	"No more than 3 dimensions supported"
23645     00          | 	byte	0
23646                 | LR__4280
23646     56 61 72 69 
2364a     61 62 6C 65 
2364e     20 6E 61 6D 
23652     65 20 65 78 
23656     70 65 63 74 
2365a     65 64       | 	byte	"Variable name expected"
2365c     00          | 	byte	0
2365d                 | LR__4281
2365d     45 72 72 6F 
23661     72 20       | 	byte	"Error "
23663     00          | 	byte	0
23664                 | LR__4282
23664     3A 20       | 	byte	": "
23666     00          | 	byte	0
23667                 | LR__4283
23667     2F 73 64    | 	byte	"/sd"
2366a     00          | 	byte	0
2366b                 | LR__4284
2366b     2F 73 64 2F 
2366f     62 61 73    | 	byte	"/sd/bas"
23672     00          | 	byte	0
23673                 | LR__4285
23673     2F 73 64 2F 
23677     62 61 73    | 	byte	"/sd/bas"
2367a     00          | 	byte	0
2367b                 | LR__4286
2367b     20 42 41 53 
2367f     49 43 20 62 
23683     79 74 65 73 
23687     20 66 72 65 
2368b     65          | 	byte	" BASIC bytes free"
2368c     00          | 	byte	0
2368d                 | LR__4287
2368d     52 65 61 64 
23691     79          | 	byte	"Ready"
23692     00          | 	byte	0
23693                 | LR__4288
23693     20          | 	byte	" "
23694     00          | 	byte	0
23695                 | LR__4289
23695     20          | 	byte	" "
23696     00          | 	byte	0
23697                 | LR__4290
23697                 | 	byte	
23697     00          | 	byte	0
23698                 | LR__4291
23698                 | 	byte	
23698     00          | 	byte	0
23699     00 00 00    | 	alignl
2369c                 | _dat_
2369c     00 00 00 00 
236a0     00 00 00 00 
236a4     00 00 00 00 
236a8     00 00 00 00 | 	byte	$00[16]
236ac     61 41 17 0E 
236b0     62 42 00 00 
236b4     63 43 19 10 
236b8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
236bc     65 45 18 0F 
236c0     66 46 00 00 
236c4     67 47 00 00 
236c8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
236cc     69 49 00 00 
236d0     6A 4A 00 00 
236d4     6B 4B 00 00 
236d8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
236dc     6D 4D 00 00 
236e0     6E 4E 1A 11 
236e4     6F 4F 1E 15 
236e8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
236ec     71 51 00 00 
236f0     72 52 00 00 
236f4     73 53 1B 12 
236f8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
236fc     75 55 00 00 
23700     76 56 00 00 
23704     77 57 00 00 
23708     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2370c     79 59 00 00 
23710     7A 5A 1D 14 
23714     31 21 04 00 
23718     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2371c     33 23 06 00 
23720     34 24 07 00 
23724     35 25 08 00 
23728     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2372c     37 26 0A 00 
23730     38 2A 0B 00 
23734     39 28 0C 00 
23738     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2373c     8D 8D 00 00 
23740     9B 9B 00 00 
23744     88 88 00 00 
23748     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2374c     20 20 00 00 
23750     2D 5F 00 00 
23754     3D 2B 00 00 
23758     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2375c     5D 7D 00 00 
23760     5C 7C 00 00 
23764     23 7E 00 00 
23768     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2376c     27 22 00 00 
23770     60 7E 03 00 
23774     2C 3C 00 00 
23778     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2377c     2F 3F 00 00 
23780     B9 B9 00 00 
23784     BA 00 00 00 
23788     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2378c     BC 00 00 00 
23790     BD 00 00 00 
23794     BE 00 00 00 
23798     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2379c     C0 00 00 00 
237a0     C1 00 00 00 
237a4     C2 00 00 00 
237a8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
237ac     C4 00 00 00 
237b0     C5 00 00 00 
237b4     C6 00 00 00 
237b8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
237bc     C8 00 00 00 
237c0     C9 00 00 00 
237c4     CA 00 00 00 
237c8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
237cc     7F 7F 00 00 
237d0     CC 00 00 00 
237d4     CD 00 00 00 
237d8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
237dc     CF 00 00 00 
237e0     D0 00 00 00 
237e4     D1 00 00 00 
237e8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
237ec     2F 2F 00 00 
237f0     2A 2A 00 00 
237f4     2D 2D 00 00 
237f8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
237fc     8D 8D 00 00 
23800     31 31 00 00 
23804     32 32 00 00 
23808     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2380c     34 34 00 00 
23810     35 35 00 00 
23814     36 36 00 00 
23818     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2381c     38 38 00 00 
23820     39 39 00 00 
23824     30 30 00 00 
23828     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2382c     5C 7C 00 00 
23830     00 00 00 00 
23834     00 00 00 00 
23838     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2383c     00 00 00 00 
      ...             
23894     00 00 00 00 
23898     00 00 00 00 | 	byte	$00[96]
2389c     2B 00 A6 F2 
238a0     24 A7 09 80 
238a4     5B 88 4D 89 
238a8     80 88 A5 88 | atari_spl file "atari.spl"
238ac     6D 88 B8 88 
238b0     80 88 CB 88 
238b4     92 88 A5 88 
238b8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
238bc     A5 88 CA 88 
238c0     A6 88 DD 88 
238c4     B8 88 AB 89 
238c8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
238cc     C8 AD C6 F1 
238d0     91 06 B6 FF 
238d4     13 00 4A 00 
238d8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
238dc     5D 00 5E 00 
238e0     5D 00 5E 00 
238e4     5E 00 5D 00 
238e8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
238ec     38 00 83 00 
238f0     25 00 83 00 
238f4     C3 FE D1 04 
238f8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
238fc     48 88 38 85 
23900     41 8A CB 88 
23904     28 89 B8 88 
23908     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2390c     15 89 03 89 
23910     02 89 15 89 
23914     16 89 15 89 
23918     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2391c     15 89 3A 89 
23920     72 89 E3 89 
23924     52 83 AD 97 
23928     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2392c     0C 02 B6 FF 
23930     E1 00 A8 00 
23934     F3 00 A8 00 
23938     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2393c     CE 00 CD 00 
23940     CD 00 BA 00 
23944     E1 00 BB 00 
23948     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2394c     DF 00 C9 FF 
23950     E6 01 B6 06 
23954     EE DD 8D 98 
23958     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2395c     97 89 73 89 
23960     3B 89 60 89 
23964     60 89 60 89 
23968     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2396c     73 89 72 89 
23970     85 89 73 89 
23974     AA 89 60 89 
23978     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2397c     E8 8A 18 86 
23980     92 88 A5 C2 
23984     E0 00 C3 05 
23988     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2398c     F2 00 64 01 
23990     06 01 3E 01 
23994     2B 01 2B 01 
23998     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2399c     2B 01 2A 01 
239a0     2B 01 2B 01 
239a4     2B 01 18 01 
239a8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
239ac     39 07 61 F3 
239b0     C0 AF 37 85 
239b4     0F 88 8B 8A 
239b8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
239bc     AB 89 D0 89 
239c0     AB 89 D0 89 
239c4     D0 89 CF 89 
239c8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
239cc     D0 89 F5 89 
239d0     BD 89 08 8A 
239d4     CF 89 E8 8A 
239d8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
239dc     53 B3 0D F8 
239e0     F4 07 38 00 
239e4     63 01 63 01 
239e8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
239ec     88 01 88 01 
239f0     76 01 88 01 
239f4     88 01 89 01 
239f8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
239fc     75 01 AE 01 
23a00     76 01 88 01 
23a04     4A 00 46 06 
23a08     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
23a0c     08 8A 9A 86 
23a10     33 8B 08 8A 
23a14     2D 8A F5 89 
23a18     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
23a1c     2D 8A 2D 8A 
23a20     2E 8A 1B 8A 
23a24     40 8A 2D 8A 
23a28     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
23a2c     2E 8A 79 8A 
23a30     66 8A C8 8B 
23a34     72 82 2B 97 
23a38     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
23a3c     1D 02 05 01 
23a40     F8 01 C0 01 
23a44     0B 02 C0 01 
23a48     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
23a4c     F9 01 D3 01 
23a50     F8 01 D3 01 
23a54     F8 01 D2 01 
23a58     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
23a5c     E6 01 2B 01 
23a60     8E 02 5F 07 
23a64     F7 E2 ED 9C 
23a68     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
23a6c     E8 8A 78 8A 
23a70     78 8A 65 8A 
23a74     8B 8A 78 8A 
23a78     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
23a7c     8B 8A 9D 8A 
23a80     9D 8A 8B 8A 
23a84     C2 8A 78 8A 
23a88     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
23a8c     70 8C 18 86 
23a90     8B 8A 23 C9 
23a94     CB 03 C4 05 
23a98     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
23a9c     0B 02 7B 02 
23aa0     1E 02 55 02 
23aa4     30 02 43 02 
23aa8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
23aac     43 02 44 02 
23ab0     43 02 30 02 
23ab4     68 02 31 02 
23ab8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
23abc     07 08 3F F7 
23ac0     73 B2 13 85 
23ac4     15 89 ED 8B 
23ac8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
23acc     B0 8A FB 8A 
23ad0     D5 8A FA 8A 
23ad4     E8 8A FB 8A 
23ad8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
23adc     E8 8A 21 8B 
23ae0     E7 8A 33 8B 
23ae4     E8 8A 26 8C 
23ae8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
23aec     8D B0 27 F6 
23af0     9C 08 AD 01 
23af4     7B 02 8D 02 
23af8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
23afc     A1 02 A0 02 
23b00     A1 02 A0 02 
23b04     A0 02 A0 02 
23b08     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
23b0c     7B 02 D8 02 
23b10     7B 02 C6 02 
23b14     3E 01 C3 05 
23b18     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
23b1c     00 8C 2A 86 
23b20     E0 8C FA 8A 
23b24     6A 8B FB 8A 
23b28     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
23b2c     45 8B 45 8B 
23b30     45 8B 6B 8B 
23b34     46 8B 59 8B 
23b38     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
23b3c     6B 8B 6B 8B 
23b40     6B 8B 6B 8B 
23b44     7D 8B 7D 8B 
23b48     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
23b4c     90 8B 91 8B 
23b50     90 8B 90 8B 
23b54     A3 8B A3 8B 
23b58     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
23b5c     B5 8B B6 8B 
23b60     B5 8B B5 8B 
23b64     B6 8B C8 8B 
23b68     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
23b6c     C8 8B DA 8B 
23b70     DB 8B DB 8B 
23b74     DB 8B DC 8B 
23b78     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
23b7c     EE 8B EE 8B 
23b80     00 8C 01 8C 
23b84     00 8C 01 8C 
23b88     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
23b8c     12 8C 13 8C 
23b90     13 8C 26 8C 
23b94     26 8C 26 8C 
23b98     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
23b9c     38 8C 38 8C 
23ba0     38 8C 38 8C 
23ba4     4B 8C 4B 8C 
23ba8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
23bac     5E 8C 5E 8C 
23bb0     5E 8C 5E 8C 
23bb4     70 8C 70 8C 
23bb8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
23bbc     70 8C 83 8C 
23bc0     83 8C 83 8C 
23bc4     83 8C 96 8C 
23bc8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
23bcc     95 8C A9 8C 
23bd0     A9 8C A8 8C 
23bd4     A8 8C A8 8C 
23bd8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
23bdc     BB 8C BB 8C 
23be0     BB 8C CE 8C 
23be4     CE 8C CE 8C 
23be8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
23bec     E0 8C E1 8C 
23bf0     E1 8C E0 8C 
23bf4     F4 8C F2 8C 
23bf8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
23bfc     05 8D 05 8D 
23c00     06 8D 06 8D 
23c04     19 8D 19 8D 
23c08     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
23c0c     18 8D 2B 8D 
23c10     2B 8D 2B 8D 
23c14     2A 8D 3E 8D 
23c18     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
23c1c     3E 8D 51 8D 
23c20     50 8D 50 8D 
23c24     50 8D 51 8D 
23c28     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
23c2c     63 8D 64 8D 
23c30     76 8D 75 8D 
23c34     75 8D 76 8D 
23c38     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
23c3c     88 8D 88 8D 
23c40     89 8D 9B 8D 
23c44     9A 8D 9B 8D 
23c48     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
23c4c     AD 8D AE 8D 
23c50     AD 8D AE 8D 
23c54     C1 8D C1 8D 
23c58     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
23c5c     D3 8D D3 8D 
23c60     D3 8D D3 8D 
23c64     D3 8D E6 8D 
23c68     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
23c6c     E6 8D E6 8D 
23c70     F9 8D F9 8D 
23c74     F9 8D F8 8D 
23c78     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
23c7c     0B 8E 0B 8E 
23c80     1D 8E 1D 8E 
23c84     1E 8E 1E 8E 
23c88     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
23c8c     31 8E 31 8E 
23c90     31 8E 42 8E 
23c94     43 8E 43 8E 
23c98     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
23c9c     56 8E 56 8E 
23ca0     55 8E 56 8E 
23ca4     68 8E 69 8E 
23ca8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
23cac     69 8E 7B 8E 
23cb0     7C 8E 7B 8E 
23cb4     7B 8E 8D 8E 
23cb8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
23cbc     8D 8E A1 8E 
23cc0     A0 8E A1 8E 
23cc4     A1 8E A0 8E 
23cc8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
23ccc     B3 8E B3 8E 
23cd0     C6 8E C5 8E 
23cd4     C6 8E C6 8E 
23cd8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
23cdc     D8 8E D9 8E 
23ce0     D8 8E EC 8E 
23ce4     EB 8E EC 8E 
23ce8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
23cec     FE 8E FE 8E 
23cf0     FE 8E FE 8E 
23cf4     10 8F 10 8F 
23cf8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
23cfc     11 8F 23 8F 
23d00     24 8F 23 8F 
23d04     24 8F 37 8F 
23d08     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
23d0c     36 8F 36 8F 
23d10     48 8F 49 8F 
23d14     49 8F 49 8F 
23d18     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
23d1c     5B 8F 5C 8F 
23d20     5B 8F 6E 8F 
23d24     6E 8F 6E 8F 
23d28     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
23d2c     81 8F 81 8F 
23d30     81 8F 81 8F 
23d34     93 8F 93 8F 
23d38     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
23d3c     93 8F A6 8F 
23d40     A6 8F A6 8F 
23d44     A6 8F B9 8F 
23d48     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
23d4c     B9 8F B9 8F 
23d50     CC 8F CB 8F 
23d54     CB 8F CC 8F 
23d58     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
23d5c     DF 8F DE 8F 
23d60     DE 8F F1 8F 
23d64     F1 8F F1 8F 
23d68     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
23d6c     03 90 04 90 
23d70     04 90 04 90 
23d74     16 90 17 90 
23d78     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
23d7c     29 90 28 90 
23d80     29 90 28 90 
23d84     29 90 3C 90 
23d88     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
23d8c     3C 90 4F 90 
23d90     4E 90 4E 90 
23d94     4E 90 4E 90 
23d98     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
23d9c     61 90 61 90 
23da0     73 90 74 90 
23da4     74 90 74 90 
23da8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
23dac     87 90 86 90 
23db0     87 90 86 90 
23db4     99 90 99 90 
23db8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
23dbc     AB 90 AB 90 
23dc0     AC 90 AB 90 
23dc4     AB 90 BF 90 
23dc8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
23dcc     BE 90 D1 90 
23dd0     D0 90 D1 90 
23dd4     D1 90 D1 90 
23dd8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
23ddc     E3 90 E4 90 
23de0     F6 90 F6 90 
23de4     F6 90 F6 90 
23de8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
23dec     09 91 0A 91 
23df0     0A 91 1C 91 
23df4     1C 91 1C 91 
23df8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
23dfc     2F 91 2E 91 
23e00     2F 91 2F 91 
23e04     2E 91 41 91 
23e08     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
23e0c     41 91 53 91 
23e10     54 91 54 91 
23e14     53 91 54 91 
23e18     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
23e1c     67 91 67 91 
23e20     79 91 7A 91 
23e24     79 91 78 91 
23e28     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
23e2c     8C 91 8B 91 
23e30     8C 91 8C 91 
23e34     9E 91 9E 91 
23e38     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
23e3c     B1 91 B1 91 
23e40     B2 91 B1 91 
23e44     B1 91 C4 91 
23e48     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
23e4c     C4 91 D6 91 
23e50     D7 91 D7 91 
23e54     D7 91 D6 91 
23e58     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
23e5c     EA 91 EA 91 
23e60     EA 91 FC 91 
23e64     FC 91 FB 91 
23e68     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
23e6c     0E 92 0F 92 
23e70     0F 92 0E 92 
23e74     21 92 21 92 
23e78     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
23e7c     21 92 34 92 
23e80     33 92 34 92 
23e84     34 92 47 92 
23e88     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
23e8c     46 92 47 92 
23e90     59 92 59 92 
23e94     59 92 59 92 
23e98     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
23e9c     6C 92 6C 92 
23ea0     6B 92 7E 92 
23ea4     7E 92 7E 92 
23ea8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
23eac     92 92 91 92 
23eb0     91 92 90 92 
23eb4     91 92 A4 92 
23eb8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
23ebc     A3 92 B6 92 
23ec0     B6 92 B7 92 
23ec4     B7 92 B6 92 
23ec8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
23ecc     CA 92 C9 92 
23ed0     CA 92 DC 92 
23ed4     DC 92 DC 92 
23ed8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
23edc     EF 92 EF 92 
23ee0     EF 92 EF 92 
23ee4     01 93 01 93 
23ee8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
23eec     15 93 14 93 
23ef0     14 93 14 93 
23ef4     14 93 27 93 
23ef8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
23efc     27 93 39 93 
23f00     3A 93 39 93 
23f04     39 93 39 93 
23f08     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
23f0c     4B 93 4C 93 
23f10     5F 93 5F 93 
23f14     5F 93 5E 93 
23f18     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
23f1c     5F 93 84 93 
23f20     4C 93 96 93 
23f24     5F 93 AE 94 
23f28     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
23f2c     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
23f30     7A D7 00 80 
23f34     87 8A 48 8F 
23f38     EC 8C 76 8D 
23f3c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
23f40     3C 8D 82 8D 
23f44     42 8D 88 8D 
23f48     8C 8D 8E 8D 
23f4c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
23f50     97 8D DE 8D 
23f54     E1 8D F1 8E 
23f58     D8 8C A3 83 
23f5c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
23f60     65 71 C9 65 
23f64     FC 64 C4 65 
23f68     C1 65 BF 65 
23f6c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
23f70     B6 65 B4 65 
23f74     B2 65 AE 65 
23f78     AC 65 ED 65 
23f7c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
23f80     5E 65 25 66 
23f84     FA 62 23 6B 
23f88     B5 6C 61 0A 
23f8c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
23f90     5D 90 BE 8D 
23f94     47 8E C3 8D 
23f98     09 8E C9 8D 
23f9c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
23fa0     15 8E 19 8E 
23fa4     1B 8E 62 8E 
23fa8     64 8E 68 8E 
23fac     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
23fb0     B5 8E 4C 90 
23fb4     FA 84 3C 9D 
23fb8     98 13 79 6D 
23fbc     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
23fc0     D9 66 50 66 
23fc4     D4 66 4B 66 
23fc8     8C 66 46 66 
23fcc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
23fd0     81 66 3A 66 
23fd4     7C 66 36 66 
23fd8     76 66 30 66 
23fdc     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
23fe0     6B 66 88 72 
23fe4     BF 37 E7 B7 
23fe8     75 83 8B 8E 
23fec     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
23ff0     94 8E 96 8E 
23ff4     DD 8E 9C 8E 
23ff8     E2 8E A2 8E 
23ffc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
24000     EE 8E AE 8E 
24004     38 8F B5 8E 
24008     3F 8F FD 8E 
2400c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
24010     A5 87 1E E3 
24014     6D 5D FA 71 
24018     41 64 25 67 
2401c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
24020     D9 66 1A 67 
24024     18 67 15 67 
24028     12 67 0F 67 
2402c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
24030     07 67 C0 66 
24034     01 67 BC 66 
24038     B8 66 DE 64 
2403c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
24040     43 E5 1F 8B 
24044     14 8A F1 90 
24048     1C 8F 63 8F 
2404c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
24050     29 8F 6E 8F 
24054     72 8F 75 8F 
24058     34 8F BE 8F 
2405c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
24060     84 8F 87 8F 
24064     CC 8F 56 90 
24068     67 91 49 80 
2406c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
24070     46 77 A6 66 
24074     E8 66 B0 67 
24078     AD 67 ED 67 
2407c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
24080     A2 67 E3 67 
24084     9D 67 9A 67 
24088     98 67 94 67 
2408c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
24090     49 67 CD 67 
24094     28 65 5F 6E 
24098     82 67 3A 01 
2409c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
240a0     C2 91 A9 8F 
240a4     EF 8F AE 8F 
240a8     F4 8F B5 8F 
240ac     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
240b0     01 90 03 90 
240b4     07 90 09 90 
240b8     0C 90 53 90 
240bc     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
240c0     18 90 44 93 
240c4     85 84 D6 9D 
240c8     87 1F 2F 75 
240cc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
240d0     C4 68 F6 67 
240d4     BE 68 F1 67 
240d8     76 68 2E 68 
240dc     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
240e0     27 68 24 68 
240e4     64 68 1E 68 
240e8     5F 68 19 68 
240ec     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
240f0     DC 68 56 72 
240f4     7E 36 C2 B8 
240f8     D7 84 73 90 
240fc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
24100     7B 90 7F 90 
24104     82 90 84 90 
24108     CB 90 8B 90 
2410c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
24110     D7 90 96 90 
24114     20 91 59 90 
24118     25 91 A2 90 
2411c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
24120     D0 89 40 EE 
24124     12 64 C4 71 
24128     29 66 0C 69 
2412c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
24130     C0 68 02 69 
24134     FE 68 FB 68 
24138     F9 68 F6 68 
2413c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
24140     EE 68 A8 68 
24144     2C 69 5F 68 
24148     E2 68 81 66 
2414c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
24150     1E EB A6 8A 
24154     73 8B 5E 93 
24158     7B 90 48 91 
2415c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
24160     0D 91 11 91 
24164     14 91 16 91 
24168     5C 91 1C 91 
2416c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
24170     68 91 AF 91 
24174     2A 91 B5 91 
24178     75 91 1A 94 
2417c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
24180     70 0E CB 6C 
24184     5D 6E C4 67 
24188     99 69 54 69 
2418c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
24190     D2 69 49 69 
24194     89 69 86 69 
24198     40 69 C4 69 
2419c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
241a0     35 69 76 69 
241a4     58 67 EB 6D 
241a8     E9 6D 89 0F 
241ac     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
241b0     33 94 94 91 
241b4     D9 91 56 91 
241b8     E0 91 9F 91 
241bc     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
241c0     EC 91 EE 91 
241c4     F1 91 F4 91 
241c8     F7 91 3D 92 
241cc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
241d0     46 92 21 94 
241d4     11 89 A4 9D 
241d8     FD 0E 8F 6C 
241dc     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
241e0     28 6A E1 69 
241e4     65 6A 1F 6A 
241e8     5F 6A 1A 6A 
241ec     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
241f0     54 6A 0F 6A 
241f4     4F 6A 09 6A 
241f8     06 6A 03 6A 
241fc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
24200     23 68 69 77 
24204     3A 4D 38 CA 
24208     38 86 4E 91 
2420c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
24210     64 92 24 92 
24214     6A 92 2A 92 
24218     70 92 30 92 
2421c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
24220     7B 92 7E 92 
24224     C5 92 84 92 
24228     CB 92 8A 92 
2422c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
24230     4D 8D F9 E2 
24234     97 59 FE 74 
24238     DB 68 6D 6A 
2423c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
24240     A8 6A A5 6A 
24244     A3 6A 9F 6A 
24248     9D 6A 9B 6A 
2424c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
24250     D6 6A 8F 6A 
24254     CF 6A 46 6A 
24258     CA 6A E1 67 
2425c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
24260     D3 F7 15 92 
24264     90 8C BF 94 
24268     A6 92 EB 92 
2426c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
24270     B1 92 F7 92 
24274     FA 92 FD 92 
24278     00 93 02 93 
2427c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
24280     4F 93 52 93 
24284     54 93 22 94 
24288     5A 93 8F 88 
2428c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
24290     1C 77 07 6C 
24294     E8 69 7A 6B 
24298     34 6B 75 6B 
2429c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
242a0     29 6B 26 6B 
242a4     24 6B 21 6B 
242a8     1D 6B 5E 6B 
242ac     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
242b0     12 6B 52 6B 
242b4     34 69 34 6E 
242b8     BA 73 A4 24 
242bc     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
242c0     7A 94 B3 93 
242c4     72 93 31 93 
242c8     78 93 7A 93 
242cc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
242d0     83 93 86 93 
242d4     89 93 D0 93 
242d8     D2 93 D5 93 
242dc     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
242e0     DD 93 40 96 
242e4     30 8B 99 9C 
242e8     52 10 94 71 
242ec     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
242f0     46 6C 79 6B 
242f4     40 6C B7 6B 
242f8     F7 6B B1 6B 
242fc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
24300     EC 6B A5 6B 
24304     A2 6B 9F 6B 
24308     9D 6B 9A 6B 
2430c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
24310     C8 6A E4 76 
24314     20 4B F9 CE 
24318     2E 8A 1A 92 
2431c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
24320     FB 93 BA 93 
24324     01 94 03 94 
24328     4A 94 09 94 
2432c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
24330     55 94 14 94 
24334     9E 94 1A 94 
24338     61 94 20 94 
2433c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
24340     3E 87 E5 CD 
24344     5F 50 6C 78 
24348     B5 6A 04 6C 
2434c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
24350     83 6C 7F 6C 
24354     7C 6C 36 6C 
24358     76 6C 74 6C 
2435c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
24360     6B 6C 25 6C 
24364     66 6C 1F 6C 
24368     1D 6C 41 6A 
2436c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
24370     BA FA FC 94 
24374     5B 8D 97 96 
24378     3B 94 C5 94 
2437c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
24380     89 94 8C 94 
24384     8F 94 92 94 
24388     94 94 DB 94 
2438c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
24390     E4 94 E7 94 
24394     2D 95 74 95 
24398     C8 96 15 89 
2439c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
243a0     CB 75 31 6F 
243a4     7E 6B 10 6D 
243a8     C9 6C 0A 6D 
243ac     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
243b0     BD 6C FF 6C 
243b4     FB 6C F9 6C 
243b8     B2 6C F3 6C 
243bc     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
243c0     A7 6C E8 6C 
243c4     0D 6B 85 6F 
243c8     C7 74 10 28 
243cc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
243d0     96 96 47 95 
243d4     06 95 0A 95 
243d8     0C 95 0F 95 
243dc     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
243e0     17 95 5E 95 
243e4     61 95 63 95 
243e8     22 95 AC 95 
243ec     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
243f0     72 95 17 98 
243f4     59 8E 01 96 
243f8     CF FC 5A 68 
243fc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
24400     96 6D 50 6D 
24404     D5 6D 4A 6D 
24408     8C 6D 89 6D 
2440c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
24410     80 6D 3A 6D 
24414     7A 6D 77 6D 
24418     75 6D 71 6D 
2441c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
24420     18 6C BC 78 
24424     9A 4F 7E CF 
24428     1F 89 F1 93 
2442c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
24430     D2 95 4E 95 
24434     D7 95 53 95 
24438     DD 95 E0 95 
2443c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
24440     A5 95 EB 95 
24444     EE 95 F0 95 
24448     37 96 B3 95 
2444c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
24450     1A 98 D5 8D 
24454     C5 9F CD 0F 
24458     0F 71 F3 73 
2445c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
24460     D9 6D 5E 6E 
24464     D3 6D 58 6E 
24468     12 6E 0F 6E 
2446c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
24470     49 6E BF 6D 
24474     87 6E 76 6D 
24478     81 6E 11 6B 
2447c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
24480     3F 09 44 95 
24484     E5 8D 3F 99 
24488     D4 95 A2 96 
2448c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
24490     23 96 69 96 
24494     6B 96 6E 96 
24498     71 96 74 96 
2449c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
244a0     BF 96 3C 96 
244a4     C6 96 C8 96 
244a8     A3 98 51 8D 
244ac     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
244b0     CF 75 29 73 
244b4     90 6C EC 6E 
244b8     62 6E E7 6E 
244bc     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
244c0     9A 6E 98 6E 
244c4     95 6E 91 6E 
244c8     8E 6E CF 6E 
244cc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
244d0     40 6E C3 6E 
244d4     E8 6C 45 6F 
244d8     A5 7B C9 35 
244dc     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
244e0     2D 98 23 97 
244e4     E1 96 A0 96 
244e8     A4 96 EA 96 
244ec     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
244f0     AF 96 F4 96 
244f4     F8 96 3E 97 
244f8     FD 96 43 97 
244fc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
24500     08 97 6B 99 
24504     D6 92 88 91 
24508     D8 EE 84 66 
2450c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
24510     2E 6F E7 6E 
24514     6C 6F 24 6F 
24518     21 6F 1F 6F 
2451c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
24520     17 6F 13 6F 
24524     54 6F 0E 6F 
24528     0B 6F 4B 6F 
2452c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
24530     27 6D 1C 7B 
24534     19 59 9F DB 
24538     66 8E BC 94 
2453c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
24540     67 97 26 97 
24544     6D 97 2B 97 
24548     72 97 32 97 
2454c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
24550     C1 97 7F 97 
24554     C6 97 85 97 
24558     CB 97 CE 97 
2455c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
24560     EC 8A C4 C6 
24564     68 4C F4 7D 
24568     63 6E E8 6E 
2456c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
24570     ED 6F A7 6F 
24574     E7 6F A0 6F 
24578     E1 6F 9B 6F 
2457c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
24580     D5 6F 8F 6F 
24584     CE 6F 45 6F 
24588     86 6F 68 6D 
2458c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
24590     C0 13 AD A2 
24594     A7 8E 79 99 
24598     E6 97 E8 97 
2459c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
245a0     F1 97 F3 97 
245a4     F6 97 F9 97 
245a8     FB 97 FE 97 
245ac     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
245b0     4A 98 0A 98 
245b4     93 98 0F 98 
245b8     7F 9B BF 8C 
245bc     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
245c0     91 7B 62 73 
245c4     1A 6E B9 70 
245c8     EB 6F B3 70 
245cc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
245d0     25 70 20 70 
245d4     1E 70 1B 70 
245d8     18 70 15 70 
245dc     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
245e0     0D 70 09 70 
245e4     07 70 03 70 
245e8     01 70 FD 6F 
245ec     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
245f0     F6 6F F2 6F 
245f4     EF 6F EC 6F 
245f8     2C 70 E6 6F 
245fc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
24600     DD 6F 97 6F 
24604     D7 6F 84 6E 
24608     8F 6F 3F 7D 
2460c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2460e     01 00 00 00 
24612     00 00 00 00 
24616     00 00 00 00 
2461a     00 00 00 00 | mouse  file "mouse.def"
2461e     00 00 00 00 
24622     00 00 00 00 
24626     00 00 00 00 
2462a     00 00 00 00 | 	byte	$00[16]
2462e     01 01 00 00 
24632     00 00 00 00 
24636     00 00 00 00 
2463a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2463e     00 00 00 00 
24642     00 00 00 00 
24646     00 00 00 00 
2464a     00 00 00 00 | 	byte	$00[16]
2464e     01 0D 01 00 
24652     00 00 00 00 
24656     00 00 00 00 
2465a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2465e     00 00 00 00 
24662     00 00 00 00 
24666     00 00 00 00 
2466a     00 00 00 00 | 	byte	$00[16]
2466e     01 0D 0D 01 
24672     00 00 00 00 
24676     00 00 00 00 
2467a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2467e     00 00 00 00 
24682     00 00 00 00 
24686     00 00 00 00 
2468a     00 00 00 00 | 	byte	$00[16]
2468e     01 0D 0D 0D 
24692     01 00 00 00 
24696     00 00 00 00 
2469a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2469e     00 00 00 00 
246a2     00 00 00 00 
246a6     00 00 00 00 
246aa     00 00 00 00 | 	byte	$00[16]
246ae     01 0D 0D 0D 
246b2     0D 01 00 00 
246b6     00 00 00 00 
246ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
246be     00 00 00 00 
246c2     00 00 00 00 
246c6     00 00 00 00 
246ca     00 00 00 00 | 	byte	$00[16]
246ce     01 0D 0D 0D 
246d2     0D 0D 01 00 
246d6     00 00 00 00 
246da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
246de     00 00 00 00 
246e2     00 00 00 00 
246e6     00 00 00 00 
246ea     00 00 00 00 | 	byte	$00[16]
246ee     01 0D 0D 0D 
246f2     0D 0D 0D 01 
246f6     00 00 00 00 
246fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
246fe     00 00 00 00 
24702     00 00 00 00 
24706     00 00 00 00 
2470a     00 00 00 00 | 	byte	$00[16]
2470e     01 0D 0D 0D 
24712     0D 0D 0D 0C 
24716     01 00 00 00 
2471a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2471e     00 00 00 00 
24722     00 00 00 00 
24726     00 00 00 00 
2472a     00 00 00 00 | 	byte	$00[16]
2472e     01 0D 0D 0D 
24732     0D 0D 0D 0D 
24736     0C 01 00 00 
2473a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2473e     00 00 00 00 
24742     00 00 00 00 
24746     00 00 00 00 
2474a     00 00 00 00 | 	byte	$00[16]
2474e     01 0D 0D 0D 
24752     0D 0D 0D 0D 
24756     0D 0C 01 00 
2475a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2475e     00 00 00 00 
24762     00 00 00 00 
24766     00 00 00 00 
2476a     00 00 00 00 | 	byte	$00[16]
2476e     01 0D 0D 0D 
24772     0D 0D 0D 0D 
24776     0D 0D 0B 01 
2477a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2477e     00 00 00 00 
24782     00 00 00 00 
24786     00 00 00 00 
2478a     00 00 00 00 | 	byte	$00[16]
2478e     01 0D 0D 0D 
24792     0C 0D 0D 03 
24796     01 01 01 01 
2479a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2479e     00 00 00 00 
247a2     00 00 00 00 
247a6     00 00 00 00 
247aa     00 00 00 00 | 	byte	$00[16]
247ae     01 0D 0D 0C 
247b2     01 09 0D 03 
247b6     00 00 00 00 
247ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
247be     00 00 00 00 
247c2     00 00 00 00 
247c6     00 00 00 00 
247ca     00 00 00 00 | 	byte	$00[16]
247ce     01 0D 0C 00 
247d2     00 01 0D 0B 
247d6     01 00 00 00 
247da     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
247de     00 00 00 00 
247e2     00 00 00 00 
247e6     00 00 00 00 
247ea     00 00 00 00 | 	byte	$00[16]
247ee     01 0C 00 00 
247f2     00 01 0A 0D 
247f6     01 00 00 00 
247fa     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
247fe     00 00 00 00 
24802     00 00 00 00 
24806     00 00 00 00 
2480a     00 00 00 00 | 	byte	$00[16]
2480e     01 00 00 00 
24812     00 00 01 0D 
24816     0B 01 00 00 
2481a     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2481e     00 00 00 00 
24822     00 00 00 00 
24826     00 00 00 00 
2482a     00 00 00 00 
2482e     00 00 00 00 
24832     00 00       | 	byte	$00[22]
24834     01 0B 0D 01 
24838     00 00 00 00 
2483c     00 00 00 00 
24840     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24844     00 00 00 00 
24848     00 00 00 00 
2484c     00 00 00 00 
24850     00 00 00 00 
24854     00          | 	byte	$00[17]
24855     01 00 00 00 
24859     00 00 00 00 
2485d     00 00 00 00 
24861     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24865     00 00 00 00 
      ...             
24a09     00 00 00 00 
24a0d     00          | 	byte	$00[425]
24a0e                 | 
24a0e     00 00       |              	org
24a10 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
24a14 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
24a18 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
24a1c 003             | 
24a1c 003 00 30 04 F6 |                 mov     psramaddr,#0
24a20 004             | 
24a20 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
24a24 005 20 00 00 FF 
24a28 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
24a2c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
24a30 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
24a34 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
24a38 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
24a3c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
24a40 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
24a44 00d             | 
24a44 00d 20 00 00 FF 
24a48 00e 00 30 04 F1 |                 add 	psramaddr,##16384
24a4c 00f E0 03 00 FF 
24a50 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
24a54 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
24a58 012             | 
24a58 012             |                 
24a58 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
24a5c 013             |     
24a5c 013 01 2C 60 FD |                 cogid 	t11				' get id
24a60 014 00 00 EC FC |                 coginit #0,#0				' start the new program
24a64 015 03 2C 60 FD |                 cogstop t11				' stop the loader
24a68 016             | 
24a68 016 00 00 00 00 | t11 		long 	0
24a6c 017 00 FF 07 00 | mailbox 	long 	$7FF00
24a70 018 00 00 00 00 | psramaddr 	long 	0
24a74 019 00 00 00 00 | pslockval	long 	0
24a78 01a 00 00 00 00 | cmd             long    0
24a7c 01b 00 00 00 00 | buf1            long    0
24a80 01c 00 40 00 00 | buf2            long    16384
24a84 01d 88 4A 02 00 | 	long	@@@_dat_ + 5100
24a88 01e 50 32 20 52 
24a8c 01f 65 74 72 6F 
24a90 020 6D 61 63 68 
24a94 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
24a98 022 42 41 53 49 
24a9c 023 43 20 76 65 
24aa0 024 72 73 69 6F 
24aa4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
24aa8 026 32 30 00 00 | 	byte	$32, $30, $00, $00
24aac 027             | 	alignl
24aac 027             | _hg010b_spin2_dat_
24aac 027             | 
24aac 027 00 00 00 00 
24ab0 028 00 00 00 00 
24ab4 029 00 00 00 00 
24ab8 02a 00 00 00 00 
24abc 02b 00 00 00    | vga_font       file "vgafont.def"
24abf 02b 7E 81 A5 81 
24ac3 02c 81 BD 99 81 
24ac7 02d 81 7E 00 00 
24acb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
24acf 02f 7E FF DB FF 
24ad3 030 FF C3 E7 FF 
24ad7 031 FF 7E 00 00 
24adb 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
24adf 033 00 36 7F 7F 
24ae3 034 7F 7F 3E 1C 
24ae7 035 08 00 00 00 
24aeb 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
24aef 037 00 08 1C 3E 
24af3 038 7F 3E 1C 08 
24af7 039 00 00 00 00 
24afb 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
24aff 03b 18 3C 3C E7 
24b03 03c E7 E7 18 18 
24b07 03d 3C 00 00 00 
24b0b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
24b0f 03f 18 3C 7E FF 
24b13 040 FF 7E 18 18 
24b17 041 3C 00 00 00 
24b1b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
24b1f 043 00 00 00 18 
24b23 044 3C 3C 18 00 
24b27 045 00 00 00 00 
24b2b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
24b2f 047 FF FF FF E7 
24b33 048 C3 C3 E7 FF 
24b37 049 FF FF FF FF 
24b3b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
24b3f 04b 00 00 3C 66 
24b43 04c 42 42 66 3C 
24b47 04d 00 00 00 00 
24b4b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
24b4f 04f FF FF C3 99 
24b53 050 BD BD 99 C3 
24b57 051 FF FF FF FF 
24b5b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
24b5f 053 78 70 58 4C 
24b63 054 1E 33 33 33 
24b67 055 33 1E 00 00 
24b6b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
24b6f 057 3C 66 66 66 
24b73 058 66 3C 18 7E 
24b77 059 18 18 00 00 
24b7b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
24b7f 05b FC CC FC 0C 
24b83 05c 0C 0C 0C 0E 
24b87 05d 0F 07 00 00 
24b8b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
24b8f 05f FE C6 FE C6 
24b93 060 C6 C6 C6 E6 
24b97 061 E7 67 03 00 
24b9b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
24b9f 063 18 18 DB 3C 
24ba3 064 E7 3C DB 18 
24ba7 065 18 00 00 00 
24bab 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
24baf 067 03 07 0F 1F 
24bb3 068 7F 1F 0F 07 
24bb7 069 03 01 00 00 
24bbb 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
24bbf 06b 60 70 78 7C 
24bc3 06c 7F 7C 78 70 
24bc7 06d 60 40 00 00 
24bcb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
24bcf 06f 18 3C 7E 18 
24bd3 070 18 18 7E 3C 
24bd7 071 18 00 00 00 
24bdb 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
24bdf 073 66 66 66 66 
24be3 074 66 66 66    | 	byte	$66[7]
24be6 075 00 66 66 00 
24bea 076 00 00 00 00 
24bee 077 00 FE DB DB 
24bf2 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
24bf6 079 D8 D8 D8 00 
24bfa 07a 00 00 00 3E 
24bfe 07b 63 06 1C 36 
24c02 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
24c06 07d 30 63 3E 00 
24c0a 07e 00 00 00 00 
24c0e 07f 00 00 00 00 
24c12 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
24c16 081 7F 7F 7F 00 
24c1a 082 00 00 00 00 
24c1e 083 00 18 3C 7E 
24c22 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
24c26 085 3C 18 7E 00 
24c2a 086 00 00 00 00 
24c2e 087 00 18 3C 7E 
24c32 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
24c36 089 18 18 18 00 
24c3a 08a 00 00 00 00 
24c3e 08b 00 18 18 18 
24c42 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
24c46 08d 7E 3C 18 00 
24c4a 08e 00 00 00 00 
24c4e 08f 00 00 00 18 
24c52 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
24c56 091 00 00 00 00 
24c5a 092 00 00 00 00 
24c5e 093 00 00 00    | 	byte	$00[11]
24c61 094 0C 06 7F 06 
24c65 095 0C 00 00 00 
24c69 096 00 00 00 00 
24c6d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24c71 098 00 03 03 03 
24c75 099 7F 00 00 00 
24c79 09a 00 00 00 00 
24c7d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24c81 09c 14 36 7F 36 
24c85 09d 14 00 00 00 
24c89 09e 00 00 00 00 
24c8d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
24c91 0a0 1C 1C 3E 3E 
24c95 0a1 7F 7F 00 00 
24c99 0a2 00 00 00 00 
24c9d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
24ca1 0a4 7F 3E 3E 1C 
24ca5 0a5 1C 08 00 00 
24ca9 0a6 00 00 00 00 
24cad 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24cb1 0a8 00 00 00 00 
24cb5 0a9 00 00 00 00 
24cb9 0aa 00 00 00 00 
24cbd 0ab 00 00       | 	byte	$00[14]
24cbf 0ab 18 3C 3C 3C 
24cc3 0ac 18 18 18 00 
24cc7 0ad 18 18 00 00 
24ccb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
24ccf 0af 66 24 00 00 
24cd3 0b0 00 00 00 00 
24cd7 0b1 00 00 00 00 
24cdb 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24cdf 0b3 00 36 36 7F 
24ce3 0b4 36 36 36 7F 
24ce7 0b5 36 36 00 00 
24ceb 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
24cef 0b7 3E 63 43 03 
24cf3 0b8 3E 60 60 61 
24cf7 0b9 63 3E 18 18 
24cfb 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
24cff 0bb 00 00 43 63 
24d03 0bc 30 18 0C 06 
24d07 0bd 63 61 00 00 
24d0b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
24d0f 0bf 1C 36 36 1C 
24d13 0c0 6E 3B 33 33 
24d17 0c1 33 6E 00 00 
24d1b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
24d1f 0c3 0C 0C 0C 06 
24d23 0c4 00 00 00 00 
24d27 0c5 00 00 00 00 
24d2b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24d2f 0c7 30 18 0C 0C 
24d33 0c8 0C 0C 0C 0C 
24d37 0c9 18 30 00 00 
24d3b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
24d3f 0cb 0C 18 30 30 
24d43 0cc 30 30 30 30 
24d47 0cd 18 0C 00 00 
24d4b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
24d4f 0cf 00 00 00 66 
24d53 0d0 3C FF 3C 66 
24d57 0d1 00 00 00 00 
24d5b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
24d5f 0d3 00 00 00 18 
24d63 0d4 18 7E 18 18 
24d67 0d5 00 00 00 00 
24d6b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
24d6f 0d7 00 00 00 00 
24d73 0d8 00 00 00 00 | 	byte	$00[8]
24d77 0d9 18 18 18 0C 
24d7b 0da 00 00 00 00 
24d7f 0db 00 00 00 00 
24d83 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
24d87 0dd 00 00 00 00 
24d8b 0de 00 00 00 00 
24d8f 0df 00 00 00 00 
24d93 0e0 00 00 00 00 | 	byte	$00[16]
24d97 0e1 18 18 00 00 
24d9b 0e2 00 00 00 00 
24d9f 0e3 00 00 40 60 
24da3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
24da7 0e5 03 01 00 00 
24dab 0e6 00 00 00 00 
24daf 0e7 1C 36 63 63 
24db3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
24db7 0e9 36 1C 00 00 
24dbb 0ea 00 00 00 00 
24dbf 0eb 18 1C 1E 18 
24dc3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
24dc7 0ed 18 7E 00 00 
24dcb 0ee 00 00 00 00 
24dcf 0ef 3E 63 60 30 
24dd3 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
24dd7 0f1 63 7F 00 00 
24ddb 0f2 00 00 00 00 
24ddf 0f3 3E 63 60 60 
24de3 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
24de7 0f5 63 3E 00 00 
24deb 0f6 00 00 00 00 
24def 0f7 30 38 3C 36 
24df3 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
24df7 0f9 30 78 00 00 
24dfb 0fa 00 00 00 00 
24dff 0fb 7F 03 03 03 
24e03 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
24e07 0fd 63 3E 00 00 
24e0b 0fe 00 00 00 00 
24e0f 0ff 1C 06 03 03 
24e13 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
24e17 101 63 3E 00 00 
24e1b 102 00 00 00 00 
24e1f 103 7F 63 60 60 
24e23 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
24e27 105 0C 0C 00 00 
24e2b 106 00 00 00 00 
24e2f 107 3E 63 63 63 
24e33 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
24e37 109 63 3E 00 00 
24e3b 10a 00 00 00 00 
24e3f 10b 3E 63 63 63 
24e43 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
24e47 10d 30 1E 00 00 
24e4b 10e 00 00 00 00 
24e4f 10f 00 00 00 18 
24e53 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
24e57 111 18 18 00 00 
24e5b 112 00 00 00 00 
24e5f 113 00 00 00 18 
24e63 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
24e67 115 18 18 0C 00 
24e6b 116 00 00 00 00 
24e6f 117 00 60 30 18 
24e73 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
24e77 119 30 60 00 00 
24e7b 11a 00 00 00 00 
24e7f 11b 00 00 00 7E 
24e83 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
24e87 11d 00 00 00 00 
24e8b 11e 00 00 00 00 
24e8f 11f 00          | 	byte	$00[9]
24e90 120 06 0C 18 30 
24e94 121 60 30 18 0C 
24e98 122 06 00 00 00 
24e9c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
24ea0 124 63 63 30 18 
24ea4 125 18 18 00 18 
24ea8 126 18 00 00 00 
24eac 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
24eb0 128 3E 63 63 7B 
24eb4 129 7B 7B 3B 03 
24eb8 12a 3E 00 00 00 
24ebc 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
24ec0 12c 1C 36 63 63 
24ec4 12d 7F 63 63 63 
24ec8 12e 63 00 00 00 
24ecc 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
24ed0 130 66 66 66 3E 
24ed4 131 66 66 66 66 
24ed8 132 3F 00 00 00 
24edc 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
24ee0 134 66 43 03 03 
24ee4 135 03 03 43 66 
24ee8 136 3C 00 00 00 
24eec 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
24ef0 138 36 66 66 66 
24ef4 139 66 66 66 36 
24ef8 13a 1F 00 00 00 
24efc 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
24f00 13c 66 46 16 1E 
24f04 13d 16 06 46 66 
24f08 13e 7F 00 00 00 
24f0c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
24f10 140 66 46 16 1E 
24f14 141 16 06 06 06 
24f18 142 0F 00 00 00 
24f1c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
24f20 144 66 43 03 03 
24f24 145 7B 63 63 66 
24f28 146 5C 00 00 00 
24f2c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
24f30 148 63 63 63 7F 
24f34 149 63 63 63 63 
24f38 14a 63 00 00 00 
24f3c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
24f40 14c 18 18 18 18 
24f44 14d 18 18 18 18 | 	byte	$18[8]
24f48 14e 3C 00 00 00 
24f4c 14f 00 00 00 78 
24f50 150 30 30 30 30 
24f54 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
24f58 152 1E 00 00 00 
24f5c 153 00 00 00 67 
24f60 154 66 66 36 1E 
24f64 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
24f68 156 67 00 00 00 
24f6c 157 00 00 00 0F 
24f70 158 06 06 06 06 
24f74 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
24f78 15a 7F 00 00 00 
24f7c 15b 00 00 00 63 
24f80 15c 77 7F 7F 6B 
24f84 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
24f88 15e 63 00 00 00 
24f8c 15f 00 00 00 63 
24f90 160 67 6F 7F 7B 
24f94 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
24f98 162 63 00 00 00 
24f9c 163 00 00 00 3E 
24fa0 164 63 63 63 63 
24fa4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
24fa8 166 3E 00 00 00 
24fac 167 00 00 00 3F 
24fb0 168 66 66 66 3E 
24fb4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
24fb8 16a 0F 00 00 00 
24fbc 16b 00 00 00 3E 
24fc0 16c 63 63 63 63 
24fc4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
24fc8 16e 3E 30 70 00 
24fcc 16f 00 00 00 3F 
24fd0 170 66 66 66 3E 
24fd4 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
24fd8 172 67 00 00 00 
24fdc 173 00 00 00 3E 
24fe0 174 63 63 06 1C 
24fe4 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
24fe8 176 3E 00 00 00 
24fec 177 00 00 00 7E 
24ff0 178 7E 5A 18 18 
24ff4 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
24ff8 17a 3C 00 00 00 
24ffc 17b 00 00 00 63 
25000 17c 63 63 63 63 
25004 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
25008 17e 3E 00 00 00 
2500c 17f 00 00 00 63 
25010 180 63 63 63 63 
25014 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
25018 182 08 00 00 00 
2501c 183 00 00 00 63 
25020 184 63 63 63 6B 
25024 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
25028 186 36 00 00 00 
2502c 187 00 00 00 63 
25030 188 63 36 3E 1C 
25034 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
25038 18a 63 00 00 00 
2503c 18b 00 00 00 66 
25040 18c 66 66 66 3C 
25044 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
25048 18e 3C 00 00 00 
2504c 18f 00 00 00 7F 
25050 190 63 61 30 18 
25054 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
25058 192 7F 00 00 00 
2505c 193 00 00 00 3C 
25060 194 0C 0C 0C 0C 
25064 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
25068 196 3C 00 00 00 
2506c 197 00 00 00 00 
25070 198 01 03 07 0E 
25074 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
25078 19a 40 00 00 00 
2507c 19b 00 00 00 3C 
25080 19c 30 30 30 30 
25084 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
25088 19e 3C 00 00 00 
2508c 19f 1C 36 00 00 
25090 1a0 00 00 00 00 
25094 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25098 1a2 00 00 00 00 
2509c 1a3 00 00 00 00 
250a0 1a4 00 00 00 00 
250a4 1a5 00 00 00 00 
250a8 1a6 00          | 	byte	$00[17]
250a9 1a6 FF 00 00 0C 
250ad 1a7 18 00 00 00 
250b1 1a8 00 00 00 00 
250b5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
250b9 1aa 00 00 00 00 
250bd 1ab 00 00 00 00 
250c1 1ac 00          | 	byte	$00[9]
250c2 1ac 1E 30 3E 33 
250c6 1ad 33 33 6E 00 
250ca 1ae 00 00 00 00 
250ce 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
250d2 1b0 1E 36 66 66 
250d6 1b1 66 66 3E 00 
250da 1b2 00 00 00 00 
250de 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
250e2 1b4 3E 63 03 03 
250e6 1b5 03 63 3E 00 
250ea 1b6 00 00 00 00 
250ee 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
250f2 1b8 3C 36 33 33 
250f6 1b9 33 33 6E 00 
250fa 1ba 00 00 00 00 
250fe 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
25102 1bc 3E 63 7F 03 
25106 1bd 03 63 3E 00 
2510a 1be 00 00 00 00 
2510e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
25112 1c0 0C 1E 0C 0C 
25116 1c1 0C 0C 1E 00 
2511a 1c2 00 00 00 00 
2511e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
25122 1c4 6E 33 33 33 
25126 1c5 33 33 3E 30 
2512a 1c6 33 1E 00 00 
2512e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
25132 1c8 36 6E 66 66 
25136 1c9 66 66 67 00 
2513a 1ca 00 00 00 00 
2513e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
25142 1cc 1C 18 18 18 
25146 1cd 18 18 3C 00 
2514a 1ce 00 00 00 00 
2514e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
25152 1d0 70 60 60 60 
25156 1d1 60 60 60 66 
2515a 1d2 66 3C 00 00 
2515e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
25162 1d4 66 36 1E 1E 
25166 1d5 36 66 67 00 
2516a 1d6 00 00 00 00 
2516e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
25172 1d8 18 18 18 18 
25176 1d9 18 18       | 	byte	$18[6]
25178 1da 3C 00 00 00 
2517c 1db 00 00 00 00 
25180 1dc 00 00 37 7F 
25184 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
25188 1de 63 00 00 00 
2518c 1df 00 00 00 00 
25190 1e0 00 00 3B 66 
25194 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
25198 1e2 66 00 00 00 
2519c 1e3 00 00 00 00 
251a0 1e4 00 00 3E 63 
251a4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
251a8 1e6 3E 00 00 00 
251ac 1e7 00 00 00 00 
251b0 1e8 00 00 3B 66 
251b4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
251b8 1ea 3E 06 06 0F 
251bc 1eb 00 00 00 00 
251c0 1ec 00 00 6E 33 
251c4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
251c8 1ee 3E 30 30 78 
251cc 1ef 00 00 00 00 
251d0 1f0 00 00 3B 6E 
251d4 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
251d8 1f2 0F 00 00 00 
251dc 1f3 00 00 00 00 
251e0 1f4 00 00 3E 63 
251e4 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
251e8 1f6 3E 00 00 00 
251ec 1f7 00 00 00 08 
251f0 1f8 0C 0C 3F 0C 
251f4 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
251f8 1fa 38 00 00 00 
251fc 1fb 00 00 00 00 
25200 1fc 00 00 33 33 
25204 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
25208 1fe 6E 00 00 00 
2520c 1ff 00 00 00 00 
25210 200 00 00 63 63 
25214 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
25218 202 1C 00 00 00 
2521c 203 00 00 00 00 
25220 204 00 00 63 63 
25224 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
25228 206 36 00 00 00 
2522c 207 00 00 00 00 
25230 208 00 00 63 36 
25234 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
25238 20a 63 00 00 00 
2523c 20b 00 00 00 00 
25240 20c 00 00 63 63 
25244 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
25248 20e 7E 60 30 1F 
2524c 20f 00 00 00 00 
25250 210 00 00 7F 33 
25254 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
25258 212 7F 00 00 00 
2525c 213 00 00 00 70 
25260 214 18 18 18 0E 
25264 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
25268 216 70 00 00 00 
2526c 217 00 00 00 18 
25270 218 18 18 18 18 
25274 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
25278 21a 18 00 00 00 
2527c 21b 00 00 00 0E 
25280 21c 18 18 18 70 
25284 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
25288 21e 0E 00 00 00 
2528c 21f 6E 3B 00 00 
25290 220 00 00 00 00 
25294 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25298 222 00 00 00 00 
2529c 223 00 00 00 00 
252a0 224 00 00       | 	byte	$00[10]
252a2 224 08 1C 36 63 
252a6 225 63 63 7F 00 
252aa 226 00 00 00 00 
252ae 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
252b2 228 03 03 03 03 
252b6 229 43 66 3C 18 
252ba 22a 30 1E 00 00 
252be 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
252c2 22c 33 33 33 33 
252c6 22d 33 33       | 	byte	$33[6]
252c8 22e 6E 00 00 00 
252cc 22f 00 00 60 30 
252d0 230 18 00 3E 63 
252d4 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
252d8 232 3E 00 00 00 
252dc 233 00 00 08 1C 
252e0 234 36 00 1E 30 
252e4 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
252e8 236 6E 00 00 00 
252ec 237 00 00 00 00 
252f0 238 33 00 1E 30 
252f4 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
252f8 23a 6E 00 00 00 
252fc 23b 00 00 1C 36 
25300 23c 1C 00 33 33 
25304 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
25308 23e 6E 00 00 00 
2530c 23f 00 00 60 30 
25310 240 18 00 3E 63 
25314 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
25318 242 3E 00 00 00 
2531c 243 00 00 00 00 
25320 244 00 00 3E 63 
25324 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
25328 246 3E 18 30 1E 
2532c 247 00 00 00 1C 
25330 248 58 78 38 18 
25334 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
25338 24a 3C 00 00 00 
2533c 24b 00 00 00 00 
25340 24c 63 00 3E 63 
25344 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
25348 24e 3E 00 00 00 
2534c 24f 66 33 00 3E 
25350 250 63 63 63 63 
25354 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
25358 252 3E 00 00 00 
2535c 253 00 00 CC 66 
25360 254 33 00 3E 63 
25364 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
25368 256 3E 00 00 00 
2536c 257 00 00 18 3C 
25370 258 66 00 1C 18 
25374 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
25378 25a 3C 00 00 00 
2537c 25b 30 18 00 7F 
25380 25c 63 61 30 18 
25384 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
25388 25e 7F 00 00 00 
2538c 25f 00 63 00 08 
25390 260 1C 36 63 63 
25394 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
25398 262 63 00 00 00 
2539c 263 30 18 00 3C 
253a0 264 66 43 03 03 
253a4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
253a8 266 3C 00 00 00 
253ac 267 30 18 00 7F 
253b0 268 66 46 16 1E 
253b4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
253b8 26a 7F 00 00 00 
253bc 26b 0C 06 00 0F 
253c0 26c 06 06 06 06 
253c4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
253c8 26e 7F 00 00 00 
253cc 26f 30 18 00 1C 
253d0 270 18 18 18 18 
253d4 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
253d8 272 3C 00 00 00 
253dc 273 00 00 08 1C 
253e0 274 36 00 3E 63 
253e4 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
253e8 276 3E 00 00 00 
253ec 277 00 00 00 00 
253f0 278 63 00 3E 63 
253f4 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
253f8 27a 3E 00 00 00 
253fc 27b 00 00 00 6F 
25400 27c 46 26 06 06 
25404 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
25408 27e 7F 00 00 00 
2540c 27f 00 00 00 6E 
25410 280 4C 2C 0C 0C 
25414 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
25418 282 1E 00 00 00 
2541c 283 30 18 00 3E 
25420 284 63 63 06 1C 
25424 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
25428 286 3E 00 00 00 
2542c 287 00 00 60 30 
25430 288 18 00 3E 63 
25434 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
25438 28a 3E 00 00 00 
2543c 28b 00 63 00 3E 
25440 28c 63 63 63 63 
25444 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
25448 28e 3E 00 00 00 
2544c 28f 00 63 00 63 
25450 290 63 63 63 63 
25454 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
25458 292 3E 00 00 00 
2545c 293 6C 38 00 7E 
25460 294 7E 5A 18 18 
25464 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
25468 296 3C 00 00 00 
2546c 297 00 00 60 48 
25470 298 2C 0C 3F 0C 
25474 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
25478 29a 38 00 00 00 
2547c 29b 00 00 00 0F 
25480 29c 26 36 1E 0E 
25484 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
25488 29e 7F 00 00 00 
2548c 29f 00 00 00 00 
25490 2a0 00 63 36 1C 
25494 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
25498 2a2 00 00 00 00 
2549c 2a3 00 00       | 	byte	$00[6]
2549e 2a3 36 1C 08 00 
254a2 2a4 3E 63 03 03 
254a6 2a5 03 63 3E 00 
254aa 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
254ae 2a7 30 18 0C 00 
254b2 2a8 1E 30 3E 33 
254b6 2a9 33 33 6E 00 
254ba 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
254be 2ab 60 30 18 00 
254c2 2ac 1C 18 18 18 
254c6 2ad 18 18 3C 00 
254ca 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
254ce 2af 60 30 18 00 
254d2 2b0 3E 63 63 63 
254d6 2b1 63 63 3E 00 
254da 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
254de 2b3 30 18 0C 00 
254e2 2b4 33 33 33 33 
254e6 2b5 33 33 6E 00 
254ea 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
254ee 2b7 00 08 1C 36 
254f2 2b8 63 63 7F 63 
254f6 2b9 63 63 63 18 
254fa 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
254fe 2bb 00 00 00 00 
25502 2bc 1E 30 3E 33 
25506 2bd 33 33 6E 18 
2550a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2550e 2bf 00 7F 63 61 
25512 2c0 30 18 0C 06 
25516 2c1 43 63 7F 00 
2551a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2551e 2c3 36 1C 08 00 
25522 2c4 7F 33 18 0C 
25526 2c5 06 63 7F 00 
2552a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2552e 2c7 00 7F 66 46 
25532 2c8 16 1E 16 06 
25536 2c9 46 66 7F 18 
2553a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2553e 2cb 00 00 00 00 
25542 2cc 3E 63 7F 03 
25546 2cd 03 63 3E 18 
2554a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2554e 2cf 00 3C 66 03 
25552 2d0 1F 03 0F 03 
25556 2d1 03 66 3C 00 
2555a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2555e 2d3 60 30 18 00 
25562 2d4 7F 33 18 0C 
25566 2d5 06 63 7F 00 
2556a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2556e 2d7 00 3C 66 43 
25572 2d8 03 03 03 03 
25576 2d9 43 66 3C 00 
2557a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2557e 2db 00 00 00 00 
25582 2dc 3E 63 06 1C 
25586 2dd 30 63 3E 18 
2558a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2558e 2df 00 00 00 00 
25592 2e0 00 00       | 	byte	$00[6]
25594 2e1 6C 36 1B 36 
25598 2e2 6C 00 00 00 
2559c 2e3 00 00 00 00 
255a0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
255a4 2e5 1B 36 6C 36 
255a8 2e6 1B 00 00 00 
255ac 2e7 88 22 88 22 
255b0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
255b4 2e9 88 22 88 22 
255b8 2ea 88 22 88 22 
255bc 2eb AA 55 AA 55 
255c0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
255c4 2ed AA 55 AA 55 
255c8 2ee AA 55 AA 55 
255cc 2ef BB EE BB EE 
255d0 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
255d4 2f1 BB EE BB EE 
255d8 2f2 BB EE BB EE 
255dc 2f3 18 18 18 18 
255e0 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
255e4 2f5 18 18 18 18 
255e8 2f6 18 18 18 18 
255ec 2f7 18 18 18 18 
255f0 2f8 18 18 18    | 	byte	$18[15]
255f3 2f8 1F 18 18 18 
255f7 2f9 18 18 18 18 
255fb 2fa 18 30 18 00 
255ff 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
25603 2fc 63 7F 63 63 
25607 2fd 63 63 00 00 
2560b 2fe 00 1C 36 00 
2560f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
25613 300 63 7F 63 63 
25617 301 63 63 00 00 
2561b 302 00 36 1C 00 
2561f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
25623 304 1E 16 06 46 
25627 305 66 7F 00 00 
2562b 306 00 00 00 00 
2562f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
25633 308 1C 30 60 63 
25637 309 63 3E 18 30 
2563b 30a 1E 6C 6C 6C 
2563f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
25643 30c 6F 6C 6C 6C 
25647 30d 6C 6C 6C 6C 
2564b 30e 6C 6C 6C 6C 
2564f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
25653 310 6C 6C 6C 6C 
25657 311 6C 6C 6C 6C 
2565b 312 6C          | 	byte	$6c[9]
2565c 313 00 00 00 00 
25660 314 00          | 	byte	$00[5]
25661 314 7F 60 6F 6C 
25665 315 6C 6C 6C 6C 
25669 316 6C 6C 6C 6C 
2566d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
25671 318 6F 60 7F 00 
25675 319 00 00 00 00 
25679 31a 00 00 00 18 
2567d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
25681 31c 61 30 18 0C 
25685 31d 06 43 63 7F 
25689 31e 00 00 00 00 
2568d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
25691 320 00 7F 33 18 
25695 321 0C 06 63 7F 
25699 322 00 00 00 00 
2569d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
256a1 324 00 00 1F 18 
256a5 325 18 18 18 18 
256a9 326 18 18 18 18 
256ad 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
256b1 328 18 18 F8 00 
256b5 329 00 00 00 00 
256b9 32a 00 00 00 18 
256bd 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
256c1 32c 18 18 FF 00 
256c5 32d 00 00 00 00 
256c9 32e 00 00 00 00 
256cd 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
256d1 330 00 00 FF 18 
256d5 331 18 18 18 18 
256d9 332 18 18 18 18 
256dd 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
256e1 334 18 18 F8 18 
256e5 335 18 18 18 18 
256e9 336 18 18 18 00 
256ed 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
256f1 338 00 00 FF 00 
256f5 339 00 00 00 00 
256f9 33a 00 00 00 18 
256fd 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
25701 33c 18 18 FF 18 
25705 33d 18 18 18 18 
25709 33e 18 18 18 63 
2570d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
25711 340 36 63 63 7F 
25715 341 63 63 63 63 
25719 342 00 00 00 00 
2571d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
25721 344 00 1E 30 3E 
25725 345 33 33 33 6E 
25729 346 00 00 00 6C 
2572d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
25731 348 EC 0C FC 00 
25735 349 00 00 00 00 
25739 34a 00 00 00 00 
2573d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25741 34c FC 0C EC 6C 
25745 34d 6C 6C 6C 6C 
25749 34e 6C 6C 6C 6C 
2574d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
25751 350 EF 00 FF 00 
25755 351 00 00 00 00 
25759 352 00 00 00 00 
2575d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25761 354 FF 00 EF 6C 
25765 355 6C 6C 6C 6C 
25769 356 6C 6C 6C 6C 
2576d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
25771 358 EC 0C EC 6C 
25775 359 6C 6C 6C 6C 
25779 35a 6C 6C 6C 00 
2577d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
25781 35c FF 00 FF 00 
25785 35d 00 00 00 00 
25789 35e 00 00 00 6C 
2578d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
25791 360 EF 00 EF 6C 
25795 361 6C 6C 6C 6C 
25799 362 6C 6C 6C 00 
2579d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
257a1 364 63 3E 63 63 
257a5 365 63 63 3E 63 
257a9 366 00 00 00 00 
257ad 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
257b1 368 30 3C 36 33 
257b5 369 33 33 33 6E 
257b9 36a 00 00 00 00 
257bd 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
257c1 36c 66 66 6F 66 
257c5 36d 66 66 36 1F 
257c9 36e 00 00 00 36 
257cd 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
257d1 370 66 66 66 66 
257d5 371 66 66       | 	byte	$66[6]
257d7 371 36 1F 00 00 
257db 372 00 00 63 00 
257df 373 7F 66 46 16 
257e3 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
257e7 375 66 7F 00 00 
257eb 376 00 6C 38 00 
257ef 377 38 30 30 3C 
257f3 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
257f7 379 33 6E 00 00 
257fb 37a 00 36 1C 00 
257ff 37b 63 67 6F 7F 
25803 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
25807 37d 63 63 00 00 
2580b 37e 00 30 18 00 
2580f 37f 3C 18 18 18 
25813 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
25817 381 18 3C 00 00 
2581b 382 00 3C 66 00 
2581f 383 3C 18 18 18 
25823 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
25827 385 18 3C 00 00 
2582b 386 00 00 00 36 
2582f 387 1C 08 00 3E 
25833 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
25837 389 63 3E 00 00 
2583b 38a 00 18 18 18 
2583f 38b 18 18 18 18 
25843 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
25847 38d 00 00 00 00 
2584b 38e 00 00 00 00 
2584f 38f 00 00 00 00 | 	byte	$00[12]
25853 390 F8 18 18 18 
25857 391 18 18 18 18 
2585b 392 18 FF FF FF 
2585f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
25863 394 FF FF FF FF 
25867 395 FF FF FF FF 
2586b 396 FF          | 	byte	$ff[9]
2586c 397 00 00 00 00 
25870 398 00 00 00    | 	byte	$00[7]
25873 398 FF FF FF FF 
25877 399 FF FF FF FF 
2587b 39a FF          | 	byte	$ff[9]
2587c 39b 00 00 00 7E 
25880 39c 7E 5A 18 18 
25884 39d 18 18 18 18 
25888 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2588c 39f 1C 36 1C 63 
25890 3a0 63 63 63 63 
25894 3a1 63 63 63 63 
25898 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2589c 3a3 FF FF FF FF 
258a0 3a4 FF FF FF    | 	byte	$ff[7]
258a3 3a4 00 00 00 00 
258a7 3a5 00 00 00 00 
258ab 3a6 00          | 	byte	$00[9]
258ac 3a7 30 18 00 3E 
258b0 3a8 63 63 63 63 
258b4 3a9 63 63 63 63 
258b8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
258bc 3ab 00 00 00 1E 
258c0 3ac 33 33 33 1B 
258c4 3ad 33 63 63 63 
258c8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
258cc 3af 1C 36 00 3E 
258d0 3b0 63 63 63 63 
258d4 3b1 63 63 63 63 
258d8 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
258dc 3b3 30 18 00 63 
258e0 3b4 67 6F 7F 7B 
258e4 3b5 73 63 63 63 
258e8 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
258ec 3b7 00 00 60 30 
258f0 3b8 18 00 3B 66 
258f4 3b9 66 66 66 66 
258f8 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
258fc 3bb 00 00 36 1C 
25900 3bc 08 00 3B 66 
25904 3bd 66 66 66 66 
25908 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2590c 3bf 36 1C 00 3E 
25910 3c0 63 63 06 1C 
25914 3c1 30 60 63 63 
25918 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2591c 3c3 00 00 36 1C 
25920 3c4 08 00 3E 63 
25924 3c5 06 1C 30 63 
25928 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2592c 3c7 30 18 00 3F 
25930 3c8 66 66 66 3E 
25934 3c9 36 66 66 66 
25938 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2593c 3cb 30 18 00 63 
25940 3cc 63 63 63 63 
25944 3cd 63 63 63 63 
25948 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2594c 3cf 00 00 60 30 
25950 3d0 18 00 3B 6E 
25954 3d1 66 06 06 06 
25958 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2595c 3d3 66 33 00 63 
25960 3d4 63 63 63 63 
25964 3d5 63 63 63 63 
25968 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2596c 3d7 00 00 60 30 
25970 3d8 18 00 63 63 
25974 3d9 63 63 63 63 
25978 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2597c 3db 30 18 00 66 
25980 3dc 66 66 66 3C 
25984 3dd 18 18 18 18 
25988 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2598c 3df 00 00 00 08 
25990 3e0 0C 0C 3F 0C 
25994 3e1 0C 0C 0C 6C 
25998 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2599c 3e3 30 18 00 00 
259a0 3e4 00 00 00 00 
259a4 3e5 00 00 00 00 
259a8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
259ac 3e7 00 00 00 00 
259b0 3e8 00 00 00 00 | 	byte	$00[8]
259b4 3e9 7F 00 00 00 
259b8 3ea 00 00 00 00 
259bc 3eb 66 33 00 00 
259c0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
259c4 3ed 00 00 00 00 
259c8 3ee 00 00 00 00 
259cc 3ef 00 00 00 00 
259d0 3f0 00 00 00 00 
259d4 3f1 00 00 00 00 
259d8 3f2 00          | 	byte	$00[21]
259d9 3f2 0C 06 3C 36 
259dd 3f3 1C 00 00 00 
259e1 3f4 00 00 00 00 
259e5 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
259e9 3f6 00 00 00 63 
259ed 3f7 3E 00 00 00 
259f1 3f8 00 00 00 00 
259f5 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
259f9 3fa 00 00 00 00 
259fd 3fb 3E 63 06 1C 
25a01 3fc 36 63 63 36 
25a05 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
25a09 3fe 00 00 00 00 
25a0d 3ff 00 00 00 00 | 	byte	$00[8]
25a11 400 18 00 7E 00 
25a15 401 18 00 00 00 
25a19 402 00 00 00 00 
25a1d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a21 404 00 00 00 00 
25a25 405 00 00 00 00 | 	byte	$00[8]
25a29 406 18 30 1E 00 
25a2d 407 00 00 1C 36 
25a31 408 36 1C 00 00 
25a35 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
25a39 40a 00 00 00 00 
25a3d 40b 63 00 00 00 
25a41 40c 00 00 00 00 
25a45 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a49 40e 00 00 00 18 
25a4d 40f 18 00 00 00 
25a51 410 00 00 00 00 
25a55 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a59 412 00 00 00 00 
25a5d 413 00          | 	byte	$00[5]
25a5e 413 CC 66 33 00 
25a62 414 33 33 33 33 
25a66 415 33 33 6E 00 
25a6a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
25a6e 417 00 3F 66 66 
25a72 418 66 3E 36 66 
25a76 419 66 66 6F 00 
25a7a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
25a7e 41b 36 1C 08 00 
25a82 41c 3B 6E 66 06 
25a86 41d 06 06 0F 00 
25a8a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
25a8e 41f 00 00 00 7E 
25a92 420 7E 7E 7E 7E 
25a96 421 7E 7E 00 00 
25a9a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
25a9e 423 00 00 00 00 
25aa2 424 00 00 00 00 
25aa6 425 00 00 00 00 
25aaa 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25aac 427             | 'vga_font       file "vgafont.def"
25aac 427 00 00 00 00 
      ...             
25adc 433 00 00 00 00 
25ae0 434 00 00 00    | st_font        file "st4font.def"
25ae3 434 FF FF 00 00 
25ae7 435 00 00 00 00 
25aeb 436 00 18 18 18 
25aef 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25af3 438 18 18 18 18 
25af7 439 18 18 18 18 
25afb 43a 18          | 	byte	$18[9]
25afc 43b 00 00 00 00 
25b00 43c 00 00 00    | 	byte	$00[7]
25b03 43c FF FF 18 18 
25b07 43d 18 18 18 18 
25b0b 43e 18 18 18 18 
25b0f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25b13 440 FF FF 00 00 
25b17 441 00 00 00 00 
25b1b 442 00 18 18 18 
25b1f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25b23 444 1F 1F 18 18 
25b27 445 18 18 18 18 
25b2b 446 18 18 18 18 
25b2f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25b33 448 F8 F8 18 18 
25b37 449 18 18 18 18 
25b3b 44a 18 00 00 00 
25b3f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
25b43 44c 1F 1F 18 18 
25b47 44d 18 18 18 18 
25b4b 44e 18 00 00 00 
25b4f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
25b53 450 F8 F8 18 18 
25b57 451 18 18 18 18 
25b5b 452 18 18 18 18 
25b5f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25b63 454 1F 1F 00 00 
25b67 455 00 00 00 00 
25b6b 456 00 18 18 18 
25b6f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25b73 458 F8 F8 00 00 
25b77 459 00 00 00 00 
25b7b 45a 00 18 18 18 
25b7f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25b83 45c FF FF 18 18 
25b87 45d 18 18 18 18 
25b8b 45e 18 00 00 18 
25b8f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
25b93 460 66 7E 7E 66 
25b97 461 66 66 66 30 
25b9b 462 18 00 00 7E 
25b9f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
25ba3 464 3E 06 06 06 
25ba7 465 06 7E 7E 18 
25bab 466 0C 30 18 3C 
25baf 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
25bb3 468 06 06 06 66 
25bb7 469 66 7E 3C 00 
25bbb 46a 00 30 18 66 
25bbf 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
25bc3 46c 7E 7E 76 76 
25bc7 46d 66 66 66 00 
25bcb 46e 00 30 18 7C 
25bcf 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
25bd3 470 1C 38 70 60 
25bd7 471 60 7E 3E 00 
25bdb 472 00 30 18 7E 
25bdf 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
25be3 474 18 0C 0C 06 
25be7 475 06 7E 7E 00 
25beb 476 00 18 18 00 
25bef 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
25bf3 478 18 18 0C 0C 
25bf7 479 06 7E 7E 00 
25bfb 47a 00 30 18 3C 
25bff 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
25c03 47c 66 66 66 66 
25c07 47d 66          | 	byte	$66[5]
25c08 47e 7E 3C 00 00 
25c0c 47f 00 00 06 06 
25c10 480 06 06 16 1E 
25c14 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
25c18 482 7E 7E 00 00 
25c1c 483 00 00 00 00 
25c20 484 00 3C 7C 60 
25c24 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
25c28 486 7E 7C 30 18 
25c2c 487 00 00 00 00 
25c30 488 00 3C 7E 66 
25c34 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
25c38 48a 7E 7C 18 0C 
25c3c 48b 00 00 30 18 
25c40 48c 00 3C 3E 06 
25c44 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
25c48 48e 7E 7C 00 00 
25c4c 48f 00 00 30 18 
25c50 490 00 3E 7E 66 
25c54 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
25c58 492 66 66 00 00 
25c5c 493 00 00 30 18 
25c60 494 00 7C 7E 06 
25c64 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
25c68 496 7E 3E 00 00 
25c6c 497 00 00 30 18 
25c70 498 00 7E 7E 30 
25c74 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
25c78 49a 7E 7E 00 00 
25c7c 49b 00 00 18 18 
25c80 49c 00 7E 7E 30 
25c84 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
25c88 49e 7E 7E 00 00 
25c8c 49f 00 00 30 18 
25c90 4a0 00 3C 7E 66 
25c94 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
25c98 4a2 7E 3C 00 00 
25c9c 4a3 00 00 1C 1C 
25ca0 4a4 18 18 38 3C 
25ca4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
25ca8 4a6 3C 3C 00 00 
25cac 4a7 00 00 00 00 
25cb0 4a8 00 00 00 00 
25cb4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25cb8 4aa 00 00 00 00 
25cbc 4ab 00 00       | 	byte	$00[6]
25cbe 4ab 18 18 18 18 
25cc2 4ac 18 18 18 18 | 	byte	$18[8]
25cc6 4ad 00 00 18 18 
25cca 4ae 00 00 00 00 
25cce 4af 66 66 66 66 
25cd2 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
25cd6 4b1 00 00 00 00 
25cda 4b2 00 00 00 00 
25cde 4b3 00          | 	byte	$00[9]
25cdf 4b3 66 66 FF FF 
25ce3 4b4 66 66 FF FF 
25ce7 4b5 66 66 00 00 
25ceb 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
25cef 4b7 7C 7E 06 06 
25cf3 4b8 3E 7C 60 60 
25cf7 4b9 7E 3E 18 18 
25cfb 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
25cff 4bb 66 30 30 18 
25d03 4bc 18 0C 0C 66 
25d07 4bd 66 00 00 00 
25d0b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
25d0f 4bf 66 66 3C 1C 
25d13 4c0 1C FC FE 66 
25d17 4c1 66 FE FC 00 
25d1b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
25d1f 4c3 18 18 18 18 
25d23 4c4 00 00 00 00 
25d27 4c5 00 00 00 00 
25d2b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
25d2f 4c7 18 1C 0C 0C 
25d33 4c8 0C 0C 0C 0C 
25d37 4c9 1C 18 30 00 
25d3b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
25d3f 4cb 18 38 30 30 
25d43 4cc 30 30 30 30 
25d47 4cd 38 18 0C 00 
25d4b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
25d4f 4cf 66 66 3C 3C 
25d53 4d0 FF FF 3C 3C 
25d57 4d1 66 66 00 00 
25d5b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
25d5f 4d3 00 18 18 18 
25d63 4d4 7E 7E 18 18 
25d67 4d5 18 00 00 00 
25d6b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
25d6f 4d7 00 00 00 00 
25d73 4d8 00 00       | 	byte	$00[6]
25d75 4d9 18 18 18 18 
25d79 4da 18          | 	byte	$18[5]
25d7a 4da 0C 04 00 00 
25d7e 4db 00 00 00 00 
25d82 4dc 7E 7E 00 00 
25d86 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
25d8a 4de 00 00 00 00 
25d8e 4df 00 00 00 00 
25d92 4e0 00 00 00 00 
25d96 4e1 00          | 	byte	$00[13]
25d97 4e1 18 18 18 00 
25d9b 4e2 00 00 00 60 
25d9f 4e3 60 60 30 30 
25da3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
25da7 4e5 06 06 06 00 
25dab 4e6 00 00 00 3C 
25daf 4e7 7E 66 66 66 
25db3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
25db7 4e9 66 7E 3C 00 
25dbb 4ea 00 00 00 18 
25dbf 4eb 18 1C 1C 18 
25dc3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
25dc7 4ed 18 7E 7E 00 
25dcb 4ee 00 00 00 3C 
25dcf 4ef 7E 66 66 30 
25dd3 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
25dd7 4f1 0C 7E 7E 00 
25ddb 4f2 00 00 00 7E 
25ddf 4f3 7E 30 30 18 
25de3 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
25de7 4f5 66 7E 3C 00 
25deb 4f6 00 00 00 30 
25def 4f7 30 38 38 3C 
25df3 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
25df7 4f9 7E 30 30 00 
25dfb 4fa 00 00 00 7E 
25dff 4fb 7E 06 06 3E 
25e03 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
25e07 4fd 66 7E 3C 00 
25e0b 4fe 00 00 00 38 
25e0f 4ff 3C 0E 06 06 
25e13 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
25e17 501 66 7E 3C 00 
25e1b 502 00 00 00 7E 
25e1f 503 7E 60 60 30 
25e23 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
25e27 505 0C 0C 0C 00 
25e2b 506 00 00 00 3C 
25e2f 507 7E 66 66 3C 
25e33 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
25e37 509 66 7E 3C 00 
25e3b 50a 00 00 00 3C 
25e3f 50b 7E 66 66 7E 
25e43 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
25e47 50d 70 3C 1C 00 
25e4b 50e 00 00 00 00 
25e4f 50f 00 00 18 18 
25e53 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
25e57 511 18 18 18 00 
25e5b 512 00 00 00 00 
25e5f 513 00 00 18 18 
25e63 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
25e67 515 18 18 18 0C 
25e6b 516 04 00 00 00 
25e6f 517 70 38 1C 0E 
25e73 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
25e77 519 70 00 00 00 
25e7b 51a 00 00 00 00 
25e7f 51b 00 00 7E 7E 
25e83 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
25e87 51d 00 00 00 00 
25e8b 51e 00 00 00 00 | 	byte	$00[8]
25e8f 51f 0E 1C 38 70 
25e93 520 E0 70 38 1C 
25e97 521 0E 00 00 00 
25e9b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
25e9f 523 7E 66 66 30 
25ea3 524 30 18 18 18 
25ea7 525 00 18 18 00 
25eab 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
25eaf 527 7E 66 66 66 
25eb3 528 66 36 06 66 
25eb7 529 66 7E 3C 00 
25ebb 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
25ebf 52b 3C 7E 66 66 
25ec3 52c 66 7E 7E 66 
25ec7 52d 66 66 66 00 
25ecb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
25ecf 52f 7E 66 66 7E 
25ed3 530 3E 66 66 66 
25ed7 531 66 7E 3E 00 
25edb 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
25edf 533 7E 66 66 06 
25ee3 534 06 06 06 66 
25ee7 535 66 7E 3C 00 
25eeb 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
25eef 537 7E 66 66 66 
25ef3 538 66 66 66 66 
25ef7 539 66 7E 3E 00 
25efb 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
25eff 53b 7E 06 06 3E 
25f03 53c 3E 06 06 06 
25f07 53d 06 7E 7E 00 
25f0b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
25f0f 53f 7E 06 06 3E 
25f13 540 3E 06 06 06 
25f17 541 06 06 06 00 
25f1b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
25f1f 543 7E 06 06 76 
25f23 544 76 66 66 66 
25f27 545 66 7E 3C 00 
25f2b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
25f2f 547 66 66 66 7E 
25f33 548 7E 66 66 66 
25f37 549 66 66 66 00 
25f3b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
25f3f 54b 7E 18 18 18 
25f43 54c 18 18 18 18 
25f47 54d 18 7E 7E 00 
25f4b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
25f4f 54f 60 60 60 60 
25f53 550 60 60 60    | 	byte	$60[7]
25f56 551 66 66 7E 3C 
25f5a 552 00 00 00 00 
25f5e 553 66 66 36 36 
25f62 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
25f66 555 66 66 C6 C6 
25f6a 556 00 00 00 00 
25f6e 557 06 06 06 06 
25f72 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
25f76 559 06 06 7E 7E 
25f7a 55a 00 00 00 00 
25f7e 55b C6 C6 EE EE 
25f82 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
25f86 55d C6 C6 C6 C6 
25f8a 55e 00 00 00 00 
25f8e 55f 66 66 66 6E 
25f92 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
25f96 561 76 66 66 66 
25f9a 562 00 00 00 00 
25f9e 563 3C 7E 66 66 
25fa2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
25fa6 565 66 66 7E 3C 
25faa 566 00 00 00 00 
25fae 567 3E 7E 66 66 
25fb2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
25fb6 569 06 06 06 06 
25fba 56a 00 00 00 00 
25fbe 56b 3C 7E 66 66 
25fc2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
25fc6 56d 66 56 3E 6C 
25fca 56e 00 00 00 00 
25fce 56f 3E 7E 66 66 
25fd2 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
25fd6 571 66 66 C6 C6 
25fda 572 00 00 00 00 
25fde 573 7C 7E 06 06 
25fe2 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
25fe6 575 60 60 7E 3E 
25fea 576 00 00 00 00 
25fee 577 7E 7E 18 18 
25ff2 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
25ff6 579 18 18 18 18 
25ffa 57a 00 00 00 00 
25ffe 57b 66 66 66 66 
26002 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
26006 57d 66 66 7E 3C 
2600a 57e 00 00 00 00 
2600e 57f 66 66 66 66 
26012 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
26016 581 3C 3C 18 18 
2601a 582 00 00 00 00 
2601e 583 C6 C6 C6 C6 
26022 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
26026 585 FE EE C6 82 
2602a 586 00 00 00 00 
2602e 587 66 66 66 3C 
26032 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
26036 589 3C 66 66 66 
2603a 58a 00 00 00 00 
2603e 58b 66 66 66 66 
26042 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
26046 58d 18 18 18 18 
2604a 58e 00 00 00 00 
2604e 58f 7E 7E 30 30 
26052 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
26056 591 06 06 7E 7E 
2605a 592 00 00 00 00 
2605e 593 3C 3C 0C 0C 
26062 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
26066 595 0C 0C 3C 3C 
2606a 596 00 00 00 00 
2606e 597 06 06 0C 0C 
26072 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
26076 599 60 60 C0 C0 
2607a 59a 00 00 00 00 
2607e 59b 3C 3C 30 30 
26082 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
26086 59d 30 30 3C 3C 
2608a 59e 00 00 00 00 
2608e 59f 18 18 3C 3C 
26092 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
26096 5a1 00 00 00 00 
2609a 5a2 00 00 00 00 
2609e 5a3 00 00 00 00 
260a2 5a4 00 00 00 00 
260a6 5a5 00 00       | 	byte	$00[18]
260a8 5a6 FE FE 00 00 
260ac 5a7 00 00 0C 0C 
260b0 5a8 18 18 00 00 
260b4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
260b8 5aa 00 00 00 00 
260bc 5ab 00 00 00 00 
260c0 5ac 00          | 	byte	$00[9]
260c1 5ac 3C 7C 60 7C 
260c5 5ad 7E 66 66 7E 
260c9 5ae 7C 00 00 00 
260cd 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
260d1 5b0 3E 7E 66 66 
260d5 5b1 66 66 66 7E 
260d9 5b2 3E 00 00 00 
260dd 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
260e1 5b4 3C 3E 06 06 
260e5 5b5 06 06 06 7E 
260e9 5b6 7C 00 00 00 
260ed 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
260f1 5b8 7C 7E 66 66 
260f5 5b9 66 66 66 7E 
260f9 5ba 7C 00 00 00 
260fd 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
26101 5bc 3C 7E 66 66 
26105 5bd 7E 06 06 7E 
26109 5be 7C 00 00 00 
2610d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
26111 5c0 18 7E 7E 18 
26115 5c1 18 18 18 18 
26119 5c2 18 00 00 00 
2611d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
26121 5c4 7C 7E 66 66 
26125 5c5 66 66 7E 7C 
26129 5c6 60 7E 3E 00 
2612d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
26131 5c8 3E 7E 66 66 
26135 5c9 66 66 66 66 
26139 5ca 66 00 00 00 
2613d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
26141 5cc 1C 1C 18 18 
26145 5cd 18 18 18 3C 
26149 5ce 3C 00 00 00 
2614d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
26151 5d0 30 30 30 30 
26155 5d1 30 30 30 30 
26159 5d2 30          | 	byte	$30[9]
2615a 5d2 3E 1E 00 00 
2615e 5d3 06 06 06 36 
26162 5d4 36 1E 1E 1E 
26166 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2616a 5d6 00 00 00 00 
2616e 5d7 1C 1C 18 18 
26172 5d8 18 18 18 18 
26176 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2617a 5da 00 00 00 00 
2617e 5db 00 00 00    | 	byte	$00[7]
26181 5dc 6C FE FE D6 
26185 5dd D6 C6 C6 C6 
26189 5de C6 00 00 00 
2618d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
26191 5e0 3E 7E 66 66 
26195 5e1 66 66 66 66 
26199 5e2 66 00 00 00 
2619d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
261a1 5e4 3C 7E 66 66 
261a5 5e5 66 66 66 7E 
261a9 5e6 3C 00 00 00 
261ad 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
261b1 5e8 3E 7E 66 66 
261b5 5e9 66 66 66 7E 
261b9 5ea 3E 06 06 00 
261bd 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
261c1 5ec 7C 7E 66 66 
261c5 5ed 66 66 66 7E 
261c9 5ee 7C 60 60 00 
261cd 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
261d1 5f0 3E 7E 66 06 
261d5 5f1 06 06 06 06 
261d9 5f2 06 00 00 00 
261dd 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
261e1 5f4 7C 7E 06 0E 
261e5 5f5 3C 70 60 7E 
261e9 5f6 3E 00 00 00 
261ed 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
261f1 5f8 7E 7E 18 18 
261f5 5f9 18 18 18 78 
261f9 5fa 70 00 00 00 
261fd 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
26201 5fc 66 66 66 66 
26205 5fd 66 66 66    | 	byte	$66[7]
26208 5fe 7E 7C 00 00 
2620c 5ff 00 00 00 00 
26210 600 00 66 66 66 
26214 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
26218 602 18 18 00 00 
2621c 603 00 00 00 00 
26220 604 00 C6 C6 D6 
26224 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
26228 606 C6 82 00 00 
2622c 607 00 00 00 00 
26230 608 00 66 66 3C 
26234 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
26238 60a 66 66 00 00 
2623c 60b 00 00 00 00 
26240 60c 00 66 66 66 
26244 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
26248 60e 7C 60 7E 3E 
2624c 60f 00 00 00 00 
26250 610 00 7E 7E 30 
26254 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
26258 612 7E 7E 00 00 
2625c 613 00 00 30 18 
26260 614 18 18 18 0C 
26264 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
26268 616 18 30 00 00 
2626c 617 00 00 18 18 
26270 618 18 18 18 18 
26274 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26278 61a 18 18 00 00 
2627c 61b 00 00 0C 18 
26280 61c 18 18 18 30 
26284 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
26288 61e 18 0C 00 00 
2628c 61f 00 00 6C 7E 
26290 620 36 00 00 00 
26294 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
26298 622 00 00 00 00 
2629c 623 00 00 00 00 
262a0 624 00          | 	byte	$00[9]
262a1 624 18 18 18 18 
262a5 625 18 18 00 00 
262a9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
262ac 627             | 'amiga_font     file "amigafont.def"
262ac 627 00 6C FE FE 
262b0 628 7C 38 10 00 
262b4 629 18 18 18 F8 
262b8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
262bc 62b C0 C0 C0 C0 
262c0 62c C0 C0 C0 C0 | 	byte	$c0[8]
262c4 62d 18 18 18 1F 
262c8 62e 1F 00 00 00 
262cc 62f 18 18 18 1F 
262d0 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
262d4 631 00 00 00 1F 
262d8 632 1F 18 18 18 
262dc 633 C0 E0 70 38 
262e0 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
262e4 635 03 07 0E 1C 
262e8 636 38 70 E0 C0 
262ec 637 80 C0 E0 F0 
262f0 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
262f4 639 00 00 00 00 
262f8 63a F0 F0 F0 F0 
262fc 63b 01 03 07 0F 
26300 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
26304 63d F0 F0 F0 F0 
26308 63e 00 00 00 00 
2630c 63f 0F 0F 0F 0F 
26310 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
26314 641 FF FF 00 00 
26318 642 00 00 00 00 
2631c 643 00 00 00 00 
26320 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
26324 645 00 00 00 00 
26328 646 0F 0F 0F 0F 
2632c 647 00 38 38 EE 
26330 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
26334 649 00 00 00 F8 
26338 64a F8 18 18 18 
2633c 64b 00 00 00 FF 
26340 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
26344 64d 18 18 18 FF 
26348 64e FF 18 18 18 
2634c 64f 00 00 3C 7E 
26350 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
26354 651 00 00 00 00 
26358 652 FF FF FF FF 
2635c 653 03 03 03 03 
26360 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
26364 655 00 00 00 FF 
26368 656 FF 18 18 18 
2636c 657 18 18 18 FF 
26370 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
26374 659 0F 0F 0F 0F 
26378 65a 0F 0F 0F 0F | 	byte	$0f[8]
2637c 65b 18 18 18 F8 
26380 65c F8 00 00 00 
26384 65d 1E 06 1E 06 
26388 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2638c 65f 00 18 3C 7E 
26390 660 18 18 18 00 
26394 661 00 18 18 18 
26398 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2639c 663 00 18 0C 7E 
263a0 664 0C 18 00 00 
263a4 665 00 18 30 7E 
263a8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
263ac 667 00 00 00 00 
263b0 668 00 00 00 00 
263b4 669 00          | 	byte	$00[9]
263b5 669 18 18 18 18 
263b9 66a 00 18 00 00 
263bd 66b 66 66 66 00 
263c1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
263c5 66d 66 FF 66 66 
263c9 66e FF 66 00 18 
263cd 66f 7C 06 3C 60 
263d1 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
263d5 671 66 36 18 0C 
263d9 672 66 62 00 38 
263dd 673 6C 38 1C F6 
263e1 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
263e5 675 18 18 18 00 
263e9 676 00 00 00 00 
263ed 677 70 38 18 18 
263f1 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
263f5 679 0E 1C 18 18 
263f9 67a 1C 0E 00 00 
263fd 67b 66 3C FF 3C 
26401 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
26405 67d 18 18 7E 18 
26409 67e 18 00 00 00 
2640d 67f 00 00 00 00 
26411 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
26415 681 00 00 7E 00 
26419 682 00 00 00 00 
2641d 683 00 00 00 00 
26421 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
26425 685 60 30 18 0C 
26429 686 06 02 00 00 
2642d 687 3C 66 76 6E 
26431 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
26435 689 18 1C 18 18 
26439 68a 18 7E 00 00 
2643d 68b 3C 66 30 18 
26441 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
26445 68d 7E 30 18 30 
26449 68e 66 3C 00 00 
2644d 68f 30 38 3C 36 
26451 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
26455 691 7E 06 3E 60 
26459 692 66 3C 00 00 
2645d 693 3C 06 3E 66 
26461 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
26465 695 7E 60 30 18 
26469 696 0C 0C 00 00 
2646d 697 3C 66 3C 66 
26471 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
26475 699 3C 66 7C 60 
26479 69a 30 1C 00 00 
2647d 69b 00 18 18 00 
26481 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
26485 69d 00 18 18 00 
26489 69e 18 18 0C 60 
2648d 69f 30 18 0C 18 
26491 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
26495 6a1 00 7E 00 00 
26499 6a2 7E 00 00 06 
2649d 6a3 0C 18 30 18 
264a1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
264a5 6a5 3C 66 30 18 
264a9 6a6 00 18 00 00 
264ad 6a7 3C 66 76 76 
264b1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
264b5 6a9 18 3C 66 66 
264b9 6aa 7E 66 00 00 
264bd 6ab 3E 66 3E 66 
264c1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
264c5 6ad 3C 66 06 06 
264c9 6ae 66 3C 00 00 
264cd 6af 1E 36 66 66 
264d1 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
264d5 6b1 7E 06 3E 06 
264d9 6b2 06 7E 00 00 
264dd 6b3 7E 06 3E 06 
264e1 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
264e5 6b5 7C 06 06 76 
264e9 6b6 66 7C 00 00 
264ed 6b7 66 66 7E 66 
264f1 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
264f5 6b9 7E 18 18 18 
264f9 6ba 18 7E 00 00 
264fd 6bb 60 60 60 60 
26501 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
26505 6bd 66 36 1E 1E 
26509 6be 36 66 00 00 
2650d 6bf 06 06 06 06 
26511 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
26515 6c1 C6 EE FE D6 
26519 6c2 C6 C6 00 00 
2651d 6c3 66 6E 7E 7E 
26521 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
26525 6c5 3C 66 66 66 
26529 6c6 66 3C 00 00 
2652d 6c7 3E 66 66 3E 
26531 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
26535 6c9 3C 66 66 66 
26539 6ca 36 6C 00 00 
2653d 6cb 3E 66 66 3E 
26541 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
26545 6cd 3C 06 3C 60 
26549 6ce 60 3C 00 00 
2654d 6cf 7E 18 18 18 
26551 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
26555 6d1 66 66 66 66 
26559 6d2 66          | 	byte	$66[5]
2655a 6d2 7E 00 00 66 
2655e 6d3 66 66 66 3C 
26562 6d4 18 00 00 C6 
26566 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2656a 6d6 C6 00 00 66 
2656e 6d7 66 3C 3C 66 
26572 6d8 66 00 00 66 
26576 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2657a 6da 18 00 00 7E 
2657e 6db 30 18 0C 06 
26582 6dc 7E 00 00 78 
26586 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2658a 6de 78 00 00 02 
2658e 6df 06 0C 18 30 
26592 6e0 60 00 00 1E 
26596 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2659a 6e2 1E 00 00 10 
2659e 6e3 38 6C C6 00 
265a2 6e4 00 00 00 00 
265a6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
265aa 6e6 FF 00 00 18 
265ae 6e7 3C 7E 7E 3C 
265b2 6e8 18 00 00 00 
265b6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
265ba 6ea 7C 00 00 06 
265be 6eb 06 3E 66 66 
265c2 6ec 3E 00 00 00 
265c6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
265ca 6ee 3C 00 00 60 
265ce 6ef 60 7C 66 66 
265d2 6f0 7C 00 00 00 
265d6 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
265da 6f2 3C 00 00 70 
265de 6f3 18 7C 18 18 
265e2 6f4 18 00 00 00 
265e6 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
265ea 6f6 60 3E 00 06 
265ee 6f7 06 3E 66 66 
265f2 6f8 66 00 00 18 
265f6 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
265fa 6fa 3C 00 00 60 
265fe 6fb 00 60 60 60 
26602 6fc 60 3C 00 06 
26606 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2660a 6fe 66 00 00 1C 
2660e 6ff 18 18 18 18 
26612 700 3C 00 00 00 
26616 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2661a 702 C6 00 00 00 
2661e 703 3E 66 66 66 
26622 704 66 00 00 00 
26626 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2662a 706 3C 00 00 00 
2662e 707 3E 66 66 3E 
26632 708 06 06 00 00 
26636 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2663a 70a 60 60 00 00 
2663e 70b 3E 66 06 06 
26642 70c 06 00 00 00 
26646 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2664a 70e 3E 00 00 18 
2664e 70f 7E 18 18 18 
26652 710 70 00 00 00 
26656 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2665a 712 7C 00 00 00 
2665e 713 66 66 66 3C 
26662 714 18 00 00 00 
26666 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2666a 716 6C 00 00 00 
2666e 717 66 3C 18 3C 
26672 718 66 00 00 00 
26676 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2667a 71a 30 1E 00 00 
2667e 71b 7E 30 18 0C 
26682 71c 7E 00 00 18 
26686 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2668a 71e 3C 00 18 18 
2668e 71f 18 18 18 18 
26692 720 18 18 00 7E 
26696 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2669a 722 60 00 10 18 
2669e 723 1C 1E 1C 18 
266a2 724 10 00 08 18 
266a6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
266aa 726 08 00       | 	byte	$08, $00
266ac 727 00 00 00 00 
266b0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
266b1 728 80 00 00 00 
266b5 729 00 80 00 00 
266b9 72a 80 80 00 00 
266bd 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
266c1 72c 80 00 80 00 
266c5 72d 00 40 80 00 
266c9 72e AA AA AA 00 
266cd 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
266d1 730 FF 00 00 00 
266d5 731 00 FF 00 00 
266d9 732 FF FF 00 00 
266dd 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
266e1 734 FF 00 FF 00 
266e5 735 00 FF FF 00 
266e9 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
266ec 737 00 00 00 00 
266f0 738 00          | ataripalette   file "ataripalettep2.def"
266f1 738 11 11 11 00 
266f5 739 22 22 22 00 
266f9 73a 33 33 33 00 
266fd 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
26701 73c 55 55 55 00 
26705 73d 66 66 66 00 
26709 73e 77 77 77 00 
2670d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
26711 740 99 99 99 00 
26715 741 AA AA AA 00 
26719 742 BB BB BB 00 
2671d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
26721 744 DD DD DD 00 
26725 745 EE EE EE 00 
26729 746 FF FF FF 00 
2672d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
26731 748 00 14 40 00 
26735 749 00 1E 60 00 
26739 74a 00 28 80 00 
2673d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
26741 74c 00 3C BF 00 
26745 74d 00 46 DF 00 
26749 74e 00 50 FF 00 
2674d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
26751 750 39 77 FF 00 
26755 751 55 8A FF 00 
26759 752 71 9E FF 00 
2675d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
26761 754 AA C5 FF 00 
26765 755 C6 D8 FF 00 
26769 756 E3 EC FF 00 
2676d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
26771 758 00 00 40 00 
26775 759 00 00 60 00 
26779 75a 00 00 80 00 
2677d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
26781 75c 00 00 BF 00 
26785 75d 00 00 DF 00 
26789 75e 00 00 FF 00 
2678d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
26791 760 39 39 FF 00 
26795 761 55 55 FF 00 
26799 762 71 71 FF 00 
2679d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
267a1 764 AA AA FF 00 
267a5 765 C6 C6 FF 00 
267a9 766 E3 E3 FF 00 
267ad 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
267b1 768 20 00 40 00 
267b5 769 30 00 60 00 
267b9 76a 40 00 80 00 
267bd 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
267c1 76c 60 00 BF 00 
267c5 76d 70 00 DF 00 
267c9 76e 80 00 FF 00 
267cd 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
267d1 770 9C 39 FF 00 
267d5 771 AA 55 FF 00 
267d9 772 B8 71 FF 00 
267dd 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
267e1 774 D5 AA FF 00 
267e5 775 E3 C6 FF 00 
267e9 776 F1 E3 FF 00 
267ed 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
267f1 778 40 00 40 00 
267f5 779 60 00 60 00 
267f9 77a 80 00 80 00 
267fd 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
26801 77c BF 00 BF 00 
26805 77d DF 00 DF 00 
26809 77e FF 00 FF 00 
2680d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
26811 780 FF 39 FF 00 
26815 781 FF 55 FF 00 
26819 782 FF 71 FF 00 
2681d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
26821 784 FF AA FF 00 
26825 785 FF C6 FF 00 
26829 786 FF E3 FF 00 
2682d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
26831 788 40 00 20 00 
26835 789 60 00 30 00 
26839 78a 80 00 40 00 
2683d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
26841 78c BF 00 60 00 
26845 78d DF 00 70 00 
26849 78e FF 00 80 00 
2684d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
26851 790 FF 39 9C 00 
26855 791 FF 55 AA 00 
26859 792 FF 71 B8 00 
2685d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
26861 794 FF AA D5 00 
26865 795 FF C6 E3 00 
26869 796 FF E3 F1 00 
2686d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
26871 798 40 00 00 00 
26875 799 60 00 00 00 
26879 79a 80 00 00 00 
2687d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
26881 79c BF 00 00 00 
26885 79d DF 00 00 00 
26889 79e FF 00 00 00 
2688d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
26891 7a0 FF 39 39 00 
26895 7a1 FF 55 55 00 
26899 7a2 FF 71 71 00 
2689d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
268a1 7a4 FF AA AA 00 
268a5 7a5 FF C6 C6 00 
268a9 7a6 FF E3 E3 00 
268ad 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
268b1 7a8 40 10 00 00 
268b5 7a9 60 18 00 00 
268b9 7aa 80 20 00 00 
268bd 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
268c1 7ac BF 30 00 00 
268c5 7ad DF 38 00 00 
268c9 7ae FF 40 00 00 
268cd 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
268d1 7b0 FF 6A 39 00 
268d5 7b1 FF 80 55 00 
268d9 7b2 FF 95 71 00 
268dd 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
268e1 7b4 FF BF AA 00 
268e5 7b5 FF D5 C6 00 
268e9 7b6 FF EA E3 00 
268ed 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
268f1 7b8 40 20 00 00 
268f5 7b9 60 30 00 00 
268f9 7ba 80 40 00 00 
268fd 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
26901 7bc BF 60 00 00 
26905 7bd DF 70 00 00 
26909 7be FF 80 00 00 
2690d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
26911 7c0 FF 9C 39 00 
26915 7c1 FF AA 55 00 
26919 7c2 FF B8 71 00 
2691d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
26921 7c4 FF D5 AA 00 
26925 7c5 FF E3 C6 00 
26929 7c6 FF F1 E3 00 
2692d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
26931 7c8 40 30 00 00 
26935 7c9 60 48 00 00 
26939 7ca 80 60 00 00 
2693d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
26941 7cc BF 90 00 00 
26945 7cd DF A8 00 00 
26949 7ce FF C0 00 00 
2694d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
26951 7d0 FF CE 39 00 
26955 7d1 FF D5 55 00 
26959 7d2 FF DC 71 00 
2695d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
26961 7d4 FF EA AA 00 
26965 7d5 FF F1 C6 00 
26969 7d6 FF F8 E3 00 
2696d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
26971 7d8 30 40 00 00 
26975 7d9 48 60 00 00 
26979 7da 60 80 00 00 
2697d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
26981 7dc 90 BF 00 00 
26985 7dd A8 DF 00 00 
26989 7de C0 FF 00 00 
2698d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
26991 7e0 CE FF 39 00 
26995 7e1 D5 FF 55 00 
26999 7e2 DC FF 71 00 
2699d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
269a1 7e4 EA FF AA 00 
269a5 7e5 F1 FF C6 00 
269a9 7e6 F8 FF E3 00 
269ad 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
269b1 7e8 00 40 00 00 
269b5 7e9 00 60 00 00 
269b9 7ea 00 80 00 00 
269bd 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
269c1 7ec 00 BF 00 00 
269c5 7ed 00 DF 00 00 
269c9 7ee 00 FF 00 00 
269cd 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
269d1 7f0 39 FF 39 00 
269d5 7f1 55 FF 55 00 
269d9 7f2 71 FF 71 00 
269dd 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
269e1 7f4 AA FF AA 00 
269e5 7f5 C6 FF C6 00 
269e9 7f6 E3 FF E3 00 
269ed 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
269f1 7f8 00 40 14 00 
269f5 7f9 00 60 1E 00 
269f9 7fa 00 80 28 00 
269fd 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
26a01 7fc 00 BF 3C 00 
26a05 7fd 00 DF 46 00 
26a09 7fe 00 FF 50 00 
26a0d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
26a11 800 39 FF 77 00 
26a15 801 55 FF 8A 00 
26a19 802 71 FF 9E 00 
26a1d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
26a21 804 AA FF C5 00 
26a25 805 C6 FF D8 00 
26a29 806 E3 FF EC 00 
26a2d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
26a31 808 00 40 28 00 
26a35 809 00 60 3C 00 
26a39 80a 00 80 50 00 
26a3d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
26a41 80c 00 BF 78 00 
26a45 80d 00 DF 8C 00 
26a49 80e 00 FF A0 00 
26a4d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
26a51 810 39 FF B5 00 
26a55 811 55 FF C0 00 
26a59 812 71 FF CA 00 
26a5d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
26a61 814 AA FF DF 00 
26a65 815 C6 FF EA 00 
26a69 816 E3 FF F4 00 
26a6d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
26a71 818 00 40 40 00 
26a75 819 00 60 60 00 
26a79 81a 00 80 80 00 
26a7d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
26a81 81c 00 BF BF 00 
26a85 81d 00 DF DF 00 
26a89 81e 00 FF FF 00 
26a8d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
26a91 820 39 FF FF 00 
26a95 821 55 FF FF 00 
26a99 822 71 FF FF 00 
26a9d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
26aa1 824 AA FF FF 00 
26aa5 825 C6 FF FF 00 
26aa9 826 E3 FF FF 00 
26aad 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
26ab1 828 00 28 40 00 
26ab5 829 00 3C 60 00 
26ab9 82a 00 50 80 00 
26abd 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
26ac1 82c 00 78 BF 00 
26ac5 82d 00 8C DF 00 
26ac9 82e 00 A0 FF 00 
26acd 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
26ad1 830 39 B5 FF 00 
26ad5 831 55 C0 FF 00 
26ad9 832 71 CA FF 00 
26add 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
26ae1 834 AA DF FF 00 
26ae5 835 C6 EA FF 00 
26ae9 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
26aec 837             | 
26aec 837             | '**********************************************************************************
26aec 837             | '
26aec 837             | '        Timings and colors definitions
26aec 837             | '
26aec 837             | '**********************************************************************************
26aec 837             | 
26aec 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
26aec 837 10 00 00 00 
26af0 838 50 00 00 00 
26af4 839 0C 00 00 00 
26af8 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
26afc 83b 08 00 00 00 
26b00 83c 04 00 00 00 
26b04 83d 08 00 00 00 
26b08 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
26b0c 83f 40 02 00 00 
26b10 840 6A 8C 15 14 
26b14 841 FB 06 B7 01 
26b18 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
26b1c 843 00 00 00 00 
26b20 844 C0 00 00 00 
26b24 845 00 00 00 00 
26b28 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b2c 847 00 75 C7 97 
26b30 848 27 47 F6 0A 
26b34 849 05 79 CB 9B 
26b38 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
26b3c 84b             | 
26b3c 84b             | ''--------  Initialization  ----------------------------------------------------------------
26b3c 84b             | 
26b3c 84b 28 0C 64 FD | hdmi            setq    #6
26b40 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
26b44 84d 28 10 64 FD |                 setq    #8
26b48 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
26b4c 84f             | 
26b4c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
26b50 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
26b54 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
26b58 852 D6 C6 01 F1 |                 add     t1,hbase
26b5c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
26b60 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
26b64 855 7B 0B 80 5F 
26b68 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
26b6c 857 66 66 86 FF 
26b70 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
26b74 859             | '
26b74 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
26b78 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
26b7c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
26b80 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
26b84 85d             | 
26b84 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
26b88 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
26b8c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
26b90 860             | 
26b90 860             | ''--------  frame rendering main loop  ---------------------------------------------------
26b90 860             | 
26b90 860 28 06 64 FD | p101            setq 	#3
26b94 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
26b98 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
26b9c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
26ba0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
26ba4 865 00 A0 05 F6 |                 mov     dlinum, #0
26ba8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
26bac 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
26bb0 868             | 
26bb0 868             | 
26bb0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
26bb4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
26bb8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
26bbc 86b             |                 
26bbc 86b             | 
26bbc 86b             | 
26bbc 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
26bbc 86b             |   
26bbc 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
26bc0 86c 29 FE 65 3D |          if_nc  setq2   #255
26bc4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
26bc8 86e             | 
26bc8 86e             | '' -----   up porch (before the picture)
26bc8 86e             | 
26bc8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
26bcc 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
26bd0 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
26bd4 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
26bd8 872             |  
26bd8 872             |    
26bd8 872             |  
26bd8 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
26bdc 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
26be0 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
26be4 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
26be8 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
26bec 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
26bf0 878             | 
26bf0 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
26bf4 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
26bf8 87a 48 00 B0 FD | 		call    #dli
26bfc 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
26c00 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
26c04 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
26c08 87e             |                 	
26c08 87e             |                 
26c08 87e             | 
26c08 87e             |  
26c08 87e             | '' ------- the main screen drawing starts here
26c08 87e             | 
26c08 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
26c0c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
26c10 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
26c14 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
26c18 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
26c1c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
26c20 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
26c24 885             |               
26c24 885             | 
26c24 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
26c28 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
26c2c 887             | 
26c2c 887             | ' ---------------- All visible lines displayed now, start vblank  
26c2c 887             | 
26c2c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
26c30 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
26c34 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
26c38 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
26c3c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
26c40 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
26c44 88d             | 
26c44 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
26c44 88d             | 
26c44 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
26c44 88d             | 
26c44 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
26c48 88e             | 
26c48 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
26c4c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
26c50 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
26c54 891             | 
26c54 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
26c58 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
26c5c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
26c60 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
26c64 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
26c68 896             | 
26c68 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
26c6c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
26c70 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
26c74 899 70 00 90 AD |     if_z        jmp     #preload
26c78 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
26c7c 89b 94 00 90 AD |     if_z        jmp     #preload2
26c80 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
26c84 89d 0C 00 90 AD |     if_z        jmp     #p390
26c88 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
26c8c 89f 28 00 90 AD |     if_z        jmp     #p391  
26c90 8a0             | 
26c90 8a0 2D 00 64 FD | p308            ret
26c94 8a1             |    
26c94 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
26c98 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
26c9c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
26ca0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
26ca4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
26ca8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
26cac 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
26cb0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
26cb4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
26cb8 8aa             |  
26cb8 8aa             | '' --------  Reload palette. To do 
26cb8 8aa             | 
26cb8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
26cbc 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
26cc0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
26cc4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
26cc8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
26ccc 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
26cd0 8b0 70 FF 9F FD |         	jmp     #dli                
26cd4 8b1             |       
26cd4 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
26cd4 8b1             | 
26cd4 8b1             | 
26cd4 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
26cd4 8b1             | 
26cd4 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
26cd8 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
26cdc 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
26ce0 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
26ce4 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
26ce8 8b6             |         
26ce8 8b6             | '' -------------- Preload a line from PSRAM        
26ce8 8b6             |         
26ce8 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
26cec 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
26cf0 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
26cf4 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
26cf8 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
26cfc 8bb             | 
26cfc 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
26d00 8bc 32 B7 01 F6 |                 mov     buf2,a1024
26d04 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
26d08 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
26d0c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
26d10 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
26d14 8c1             |  
26d14 8c1             |  
26d14 8c1             | preload2      '  incmod  dlinum,#3
26d14 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
26d18 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
26d1c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
26d20 8c4 28 02 64 FD |                 setq	#1
26d24 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
26d28 8c6             |                 
26d28 8c6             | 
26d28 8c6             | '' -------------- Draw sprites
26d28 8c6             | 
26d28 8c6 CF 5C 02 F6 | sprite          mov t8,frames
26d2c 8c7 10 5C 0E F5 | 		and t8,#16 wz
26d30 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
26d34 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
26d38 8ca             | 		
26d38 8ca             | 
26d38 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
26d3c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
26d40 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
26d44 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
26d48 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
26d4c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
26d50 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
26d54 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
26d58 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
26d5c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
26d60 8d4 01 52 86 F1 |                 sub     sprite_h,#1
26d64 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
26d68 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
26d6c 8d7             | 
26d6c 8d7             | 
26d6c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
26d70 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
26d74 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
26d78 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
26d7c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
26d80 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
26d84 8dd 00 5E 06 F6 |                 mov 	t9,#0
26d88 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
26d8c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
26d90 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
26d94 8e1             |      
26d94 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
26d98 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
26d9c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
26da0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
26da4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
26da8 8e6             |                 
26da8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
26dac 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
26db0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
26db4 8e9             |   		
26db4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
26db8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
26dbc 8eb             | 
26dbc 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
26dc0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
26dc4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
26dc8 8ee             |  
26dc8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
26dcc 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
26dd0 8f0 10 00 90 CD |      if_c 	jmp     #p899		
26dd4 8f1             | 	
26dd4 8f1             | 	
26dd4 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
26dd8 8f2 28 CD 01 F1 | 		add	t4,sprite_w
26ddc 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
26de0 8f4             | 
26de0 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
26de4 8f5             | 
26de4 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
26de8 8f6 01 58 86 F1 | 	 	sub     t6,#1
26dec 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
26df0 8f8             | 
26df0 8f8 28 58 62 FD |                 setq   	t6
26df4 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
26df8 8fa 28 5D 02 F6 |                 mov t8,sprite_w
26dfc 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
26e00 8fc 24 00 90 AD |         if_z    jmp #p898
26e04 8fd             |          
26e04 8fd             |         
26e04 8fd 70 5F 06 F6 |                 mov  t9,#368
26e08 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
26e0c 8ff             | 
26e0c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
26e10 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
26e14 901 FF FF 7F FF 
26e18 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
26e1c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
26e20 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
26e24 905 2D 01 00 F5 |                 and 0-0, t7
26e28 906             |                
26e28 906             | 
26e28 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
26e2c 907 E5 E0 7A FA |                 wmlong 368,t3				
26e30 908             |                 
26e30 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
26e34 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
26e38 90a 2D 00 64 FD |                 ret
26e3c 90b             | 	
26e3c 90b             | 	
26e3c 90b             |                
26e3c 90b             |  
26e3c 90b             | '' -------------- Graphics line ------------------------------------------------------------
26e3c 90b             |  
26e3c 90b             | 
26e3c 90b             | '' consts and vars
26e3c 90b             | 
26e3c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
26e40 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
26e44 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
26e48 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
26e4c 90f             | 
26e4c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
26e50 910             | 
26e50 910             | '------ these longs will be set by setmode function
26e50 910             | 
26e50 910 00 00 00 00 | m_bs            long    0        'blanks before sync
26e54 911 00 00 00 00 | m_sn            long    0        'sync
26e58 912 00 00 00 00 | m_bv            long    0        'blanks before visible
26e5c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
26e60 914             | 'm_border        long    0        'left/right borders
26e60 914 00 00 00 00 | i_upporch       long    0        'up porch lines
26e64 915 00 00 00 00 | i_vsync         long    0        'vsync lines
26e68 916 00 00 00 00 | i_downporch     long    0        'down porch lines
26e6c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
26e70 918 00 00 00 00 | i_totalvis      long    0
26e74 919             | 
26e74 919             | '-------------------------------------
26e74 919             |  
26e74 919 00 00 00 00 | linenum         long    0
26e78 91a 00 00 00 00 | frames          long    0
26e7c 91b 00 00 00 00 | dlinum long 0
26e80 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
26e84 91d             | 
26e84 91d 00 00 00 00 | vblankptr       long    0
26e88 91e 00 00 00 00 | modeptr         long    0
26e8c 91f 00 00 00 00 | paletteptr      long    0
26e90 920 00 00 00 00 | dlptr           long    0
26e94 921 01 00 00 00 | hbase           long    1
26e98 922 00 00 00 00 | mailbox         long    0
26e9c 923 00 00 00 00 | spriteptr          long 0
26ea0 924             | 
26ea0 924 00 00 00 00 | cmd             long    0
26ea4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
26ea8 926 00 04 00 00 | buf2            long    1024
26eac 927 01 00 00 00 | dlptr2          long    1
26eb0 928 01 00 00 00 | dl              long    1
26eb4 929             | 
26eb4 929 00 00 00 00 | buf1c long 0
26eb8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
26ebc 92b 01 00 00 00 | framebuf2       long    1
26ec0 92c 01 00 00 00 | hsync0          long    1
26ec4 92d 01 00 00 00 | hsync1          long    1
26ec8 92e             | 
26ec8 92e 01 00 00 00 | t1              long    1
26ecc 92f 00 00 00 00 | t2 long 0
26ed0 930 00 00 00 00 | t3 long 0
26ed4 931 00 00 00 00 | t4 long 0
26ed8 932             | 
26ed8 932 00 00 00 00 | rcnt            long    0  'dl repeat count
26edc 933 00 00 00 00 | rcnt2           long    0
26ee0 934 00 00 00 00 | rcnt2a          long    0
26ee4 935 00 00 00 00 | roffset         long    0
26ee8 936 00 00 00 00 | rdl             long    0  'dl repeat line
26eec 937 00 00 00 00 | dlc             long    0  'dl command
26ef0 938             | 
26ef0 938 FF FF FF FF | affffffff       long    $ffffffff
26ef4 939 00 00 00 00 | sprite1pointer long 0
26ef8 93a 00 00 00 00 | sprite1xy      long 0
26efc 93b 00 00 00 00 | sprite1wh      long 0
26f00 93c 00 00 00 00 | sprite2pointer long 0
26f04 93d 00 00 00 00 | sprite2xy      long 0
26f08 93e 00 00 00 00 | sprite2wh      long 0
26f0c 93f 00 00 00 00 | sprite3pointer long 0
26f10 940 00 00 00 00 | sprite3xy      long 0
26f14 941 00 00 00 00 | sprite3wh      long 0
26f18 942 00 00 00 00 | sprite4pointer long 0
26f1c 943 00 00 00 00 | sprite4xy      long 0
26f20 944 00 00 00 00 | sprite4wh      long 0
26f24 945 00 00 00 00 | sprite5pointer long 0
26f28 946 00 00 00 00 | sprite5xy      long 0
26f2c 947 00 00 00 00 | sprite5wh      long 0
26f30 948 00 00 00 00 | sprite6pointer long 0
26f34 949 00 00 00 00 | sprite6xy      long 0
26f38 94a 00 00 00 00 | sprite6wh      long 0
26f3c 94b 00 00 00 00 | sprite7pointer long 0
26f40 94c 00 00 00 00 | sprite7xy      long 0
26f44 94d 00 00 00 00 | sprite7wh      long 0
26f48 94e 00 00 00 00 | sprite8pointer long 0
26f4c 94f 00 00 00 00 | sprite8xy      long 0
26f50 950 00 00 00 00 | sprite8wh      long 0
26f54 951 00 00 00 00 | sprite9pointer long 0
26f58 952 00 00 00 00 | sprite9xy      long 0
26f5c 953 00 00 00 00 | sprite9wh      long 0
26f60 954 00 00 00 00 | sprite10pointer long 0
26f64 955 00 00 00 00 | sprite10xy      long 0
26f68 956 00 00 00 00 | sprite10wh      long 0
26f6c 957 00 00 00 00 | sprite11pointer long 0
26f70 958 00 00 00 00 | sprite11xy      long 0
26f74 959 00 00 00 00 | sprite11wh      long 0
26f78 95a 00 00 00 00 | sprite12pointer long 0
26f7c 95b 00 00 00 00 | sprite12xy      long 0
26f80 95c 00 00 00 00 | sprite12wh      long 0
26f84 95d 00 00 00 00 | sprite13pointer long 0
26f88 95e 00 00 00 00 | sprite13xy      long 0
26f8c 95f 00 00 00 00 | sprite13wh      long 0
26f90 960 00 00 00 00 | sprite14pointer long 0
26f94 961 00 00 00 00 | sprite14xy      long 0
26f98 962 00 00 00 00 | sprite14wh      long 0
26f9c 963 00 00 00 00 | sprite15pointer long 0
26fa0 964 00 00 00 00 | sprite15xy      long 0
26fa4 965 00 00 00 00 | sprite15wh      long 0
26fa8 966 00 00 00 00 | sprite16pointer long 0
26fac 967 00 00 00 00 | sprite16xy      long 0
26fb0 968 00 00 00 00 | sprite16wh      long 0
26fb4 969 00 00 00 00 | sprite17pointer long 0
26fb8 96a 00 00 00 00 | sprite17xy      long 0
26fbc 96b 00 00 00 00 | sprite17wh      long 0
26fc0 96c 00 00 00 00 | sprite18pointer long 0
26fc4 96d 00 00 00 00 | sprite18xy      long 0
26fc8 96e 00 00 00 00 | sprite18wh      long 0
26fcc 96f 00 00 00 00 | spritenum long 0
26fd0 970             | 
26fd0 970 00 00 00 00 | spriteline long 0
26fd4 971 84 03 00 00 | sprite_x long 900
26fd8 972 00 00 00 00 | sprite_y long 0
26fdc 973 10 00 00 00 | sprite_w long 16
26fe0 974 40 00 00 00 | sprite_h long 64
26fe4 975 00 00 00 00 | l2 long 0
26fe8 976 00 00 00 00 | t5 long 0
26fec 977 00 00 00 00 | t6 long 0
26ff0 978 00 00 00 00 | t7 long 0
26ff4 979 00 00 00 00 | t8 long 0
26ff8 97a 00 00 00 00 | t9 long 0
26ffc 97b 00 00 00 00 | preloadaddr long 0
27000 97c 00 00 00 00 | preloadlineaddr long 0
27004 97d 00 04 00 00 | a1024 long 1024
27008 97e             | 
27008 97e E0 03 00 00 | aa long 992
2700c 97f FF 03 00 00 | a1023 long 1023
27010 980 00 10 00 00 | a4096 long 4096
27014 981             |  fit 368
27014 981             | _psram_spin2_dat_
27014 981 00 00 00 00 
      ...             
2710c 9bf 00 00 00 00 
27110 9c0 00 00 00 00 |     listdata long 0[8*8]
27114 9c1             |             orgh
27114                 | 
27114                 | ' driver state
27114     FF FF FF FF | drivercog   long    -1  ' COG id of driver
27118     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2711c                 | 
2711c                 | ' delay profile
2711c     07 00 00 00 
27120     00 CF 7B 05 
27124     80 D1 F0 08 
27128     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2712c     80 C4 60 0F 
27130     80 39 7A 12 
27134     40 2D D9 13 
27138     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2713c                 | 
2713c                 | ' data to be passed to driver when starting it
2713c                 | startupData
2713c     00 00 00 00 |     long    0           ' current frequency
27140     00 00 00 00 |     long    FLAGS       ' optional flags for driver
27144     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
27148     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2714c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
27150     5C 71 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
27154     DC 71 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
27158     FC 71 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2715c                 | 
2715c                 | ' data for memory
2715c                 | deviceData
2715c                 |     ' 16 bank parameters follow (16MB per bank)
2715c     00 00 00 00 
      ...             
27194     00 00 00 00 
27198     00 00 00 00 |     long    0[16]                               ' banks 0-15
2719c                 |     ' 16 banks of pin parameters follow
2719c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
271a0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
271a4     FF FF FF FF 
      ...             
271d4     FF FF FF FF 
271d8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
271dc                 | 
271dc                 | ' data for COG polling
271dc                 | qosData 
271dc     00 00 FF FF 
271e0     00 00 FF FF 
271e4     00 00 FF FF 
271e8     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
271ec     00 00 FF FF 
271f0     00 00 FF FF 
271f4     00 00 FF FF 
271f8     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
271fc                 |     
271fc                 | ' mailbox storage
271fc                 | 
271fc                 | mailboxes
271fc     00 00 00 00 
      ...             
27254     00 00 00 00 
27258     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2725c                 | 	alignl
2725c                 | _psram16drv_spin2_dat_
2725c                 |                             orgh
2725c     00 00 00 00 
      ...             
27274     00 00 00 00 
27278     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2727c                 | 
2727c                 | driver_start
2727c                 |                             org
2727c 000             | '..................................................................................................
2727c 000             | ' Memory layout for COG RAM once operational:
2727c 000             | '
2727c 000             | '  COG RAM address      Usage
2727c 000             | '  ---------------      ----
2727c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2727c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2727c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2727c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2727c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2727c 000             | '  ~$198-$1F3           State and register variables
2727c 000             | '
2727c 000             | ' Also during driver COG startup:
2727c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2727c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2727c 000             | '..................................................................................................
2727c 000             |                             
2727c 000             | ' Mailbox storage after vector initialization
2727c 000             | 
2727c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
27280 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
27284 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
27288 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2728c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
27290 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
27294 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
27298 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2729c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
272a0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
272a4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
272a8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
272ac 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
272b0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
272b4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
272b8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
272bc 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
272c0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
272c4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
272c8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
272cc 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
272d0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
272d4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
272d8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
272dc 018             | 
272dc 018             | ' Mailbox parameter addresses per COG once patched
272dc 018             |                             
272dc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
272e0 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
272e4 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
272e8 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
272ec 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
272f0 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
272f4 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
272f8 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
272fc 020             | 
272fc 020             | '..................................................................................................
272fc 020             | ' Per COG request and state setup and service branching
272fc 020             |         
272fc 020             | cog0                 
272fc 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
27300 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
27304 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
27308 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2730c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27310 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
27314 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
27318 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2731c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
27320 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
27324 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27328 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2732c 02c             | cog1                        
2732c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
27330 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
27334 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
27338 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2733c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27340 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
27344 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
27348 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2734c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
27350 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
27354 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27358 037 33 CA 63 FD |                             execf   request-0               'jump to service
2735c 038             | cog2                         
2735c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
27360 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
27364 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
27368 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2736c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27370 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
27374 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
27378 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2737c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
27380 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
27384 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27388 043 33 CA 63 FD |                             execf   request-0               'jump to service
2738c 044             | cog3                        
2738c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
27390 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
27394 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
27398 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2739c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
273a0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
273a4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
273a8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
273ac 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
273b0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
273b4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
273b8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
273bc 050             | cog4                        
273bc 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
273c0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
273c4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
273c8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
273cc 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
273d0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
273d4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
273d8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
273dc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
273e0 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
273e4 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
273e8 05b 33 CA 63 FD |                             execf   request-0               'jump to service
273ec 05c             | cog5                        
273ec 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
273f0 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
273f4 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
273f8 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
273fc 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27400 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
27404 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
27408 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2740c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
27410 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
27414 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27418 067 33 CA 63 FD |                             execf   request-0               'jump to service
2741c 068             | cog6                        
2741c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
27420 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
27424 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
27428 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2742c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27430 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
27434 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
27438 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2743c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
27440 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
27444 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27448 073 33 CA 63 FD |                             execf   request-0               'jump to service
2744c 074             | cog7                        
2744c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
27450 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
27454 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
27458 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2745c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27460 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
27464 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
27468 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2746c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
27470 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
27474 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27478 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2747c 080             |                             fit     128
2747c 080             | 
2747c 080             |                             fit     128
2747c 080             | pad                         long    0[128-$]                'align init code to $80
2747c 080             | 
2747c 080             | '..................................................................................................
2747c 080             | 
2747c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2747c 080             | 
2747c 080             | init                        
2747c 080             |                             ' get driver scratch long address in hub
2747c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
27480 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
27484 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
27488 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2748c 084             |                     
2748c 084             |                             ' read in the additional LUT RAM code
2748c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
27490 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
27494 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
27498 087             | 
27498 087             |                             ' read the startup parameters
27498 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2749c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
274a0 089             | 
274a0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
274a0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
274a4 08a             | 
274a4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
274a8 08b 01 00 00 5F 
274ac 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
274b0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
274b4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
274b8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
274bc 090             | 
274bc 090             |                             ' setup data pin modes and data bus pin group in streamer commands
274bc 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
274c0 091 01 00 00 FF 
274c4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
274c8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
274cc 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
274d0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
274d4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
274d8 097 08 DE 47 F5 |                             or      a, #8
274dc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
274e0 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
274e4 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
274e8 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
274ec 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
274f0 09d 01 DE 07 F1 |                             add     a, #1
274f4 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
274f8 09f             |  
274f8 09f             |                             ' setup device control pin states
274f8 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
274fc 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
27500 0a1 01 00 00 FF 
27504 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
27508 0a3             | 
27508 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2750c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
27510 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
27514 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
27518 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2751c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
27520 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
27524 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
27528 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2752c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
27530 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
27534 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
27538 0af             | pinloop
27538 0af             |                             ' generate minimum CE high time before access
27538 0af A1 07 00 FF 
2753c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
27540 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
27544 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
27548 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2754c 0b4 1F DE 63 FD |                             waitx   a                       'delay
27550 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
27554 0b6             | 
27554 0b6             |                             ' setup the COG mailboxes and addresses 
27554 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
27558 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2755c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
27560 0b9             | 
27560 0b9 28 2E 64 FD |                             setq    #24-1
27564 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
27568 0bb             | 
27568 0bb             |                             ' setup the polling loop for active COGs 
27568 0bb 01 C2 63 FD |                             cogid   id
2756c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
27570 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
27574 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
27578 0bf 0A F0 07 F6 |                             mov     ptra, #10
2757c 0c0 E1 F1 03 FA |                             mul     ptra, id
27580 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
27584 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
27588 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2758c 0c4 03 C2 07 FA |                             mul     id, #3
27590 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
27594 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
27598 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2759c 0c8 D8 01 B0 FD |                             call    #reloadcogs
275a0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
275a4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
275a8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
275a8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
275ac 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
275b0 0cd 08 04 DC FC |                             rep     #2, #8
275b4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
275b8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
275bc 0d0             | 
275bc 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
275bc 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
275bc 0d0 01 C2 63 FD |                             cogid   id
275c0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
275c4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
275c8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
275cc 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
275d0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
275d4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
275d8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
275dc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
275e0 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
275e4 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
275e8 0db 3F E4 A7 F9 |                             alti    d, #%111_111
275ec 0dc 00 00 00 F6 |                             mov     0-0, 0-0
275f0 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
275f4 0de A5 E5 03 F1 |                             add     d, const512
275f8 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
275fc 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
27600 0e1 00 00 00 F6 |                             mov     0-0, 0-0
27604 0e2             |                             
27604 0e2             |                             ' setup register values for control vector loop setup after we return
27604 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
27608 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2760c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
27610 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
27614 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
27618 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2761c 0e8 D0 C3 8F F9 |                             altd    id, #id0
27620 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
27624 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
27628 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2762c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
27630 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
27634 0ee             |  
27634 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
27638 0ef 07 CA 07 F5 |                             and     request, #7
2763c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
27640 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
27644 0f2             |                             fit     $100                    'ensure all init code fits this space
27644 0f2             | 
27644 0f2             |                             fit     $100                    'ensure all init code fits this space
27644 0f2             | 
27644 0f2 00 00 00 00 
      ...             
27674 0fe 00 00 00 00 
27678 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2767c 100             | 
2767c 100             | '..................................................................................................
2767c 100             | ' Error result handling and COG notification of request completion
2767c 100             | 
2767c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
27680 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
27684 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
27688 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2768c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
27690 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
27694 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
27698 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2769c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
276a0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
276a4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
276a8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
276ac 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
276b0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
276b4 10e             | ' Poller re-starts here after a COG is serviced
276b4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
276b8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
276bc 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
276c0 111             | ' Main dynamic polling loop repeats until a request arrives
276c0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
276c4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
276c8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
276cc 114             | 
276cc 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
276d0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
276d4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
276d8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
276dc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
276e0 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
276e4 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
276e8 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
276ec 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
276f0 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
276f4 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
276f8 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
276fc 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
27700 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
27704 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
27708 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2770c 124             | 
2770c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
27710 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
27714 126             |  
27714 126             | '..................................................................................................
27714 126             | ' List handler                               
27714 126             | 
27714 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
27718 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2771c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
27720 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
27724 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
27728 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2772c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
27730 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
27734 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
27738 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2773c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
27740 131 33 00 60 FD |                             execf   0-0                     'process the request 
27744 132             | 
27744 132             | '..................................................................................................
27744 132             | ' Restoring per COG state and resuming where we left off
27744 132             | 
27744 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
27748 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2774c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
27750 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
27754 136 D8 CB FB F8 |                             getbyte request, addr1, #3
27758 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2775c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
27760 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
27764 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
27768 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2776c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
27770 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
27774 13e             |                    
27774 13e             | '..................................................................................................
27774 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
27774 13e             | 
27774 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
27778 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2777c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
27780 141 D0 DF B7 F9 |                             setd    a, #id0
27784 142 D8 DF BF F9 |                             sets    a, #addr1
27788 143 FE FF FF FF 
2778c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
27790 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
27794 146 3F DE A7 F9 |                             alti    a, #%111_111 
27798 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2779c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
277a0 149 01 E2 63 FD |                             cogid   c
277a4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
277a8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
277ac 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
277b0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
277b4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
277b8 14f 00 E0 03 F6 |                             mov     b, 0-0
277bc 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
277c0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
277c4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
277c8 153 0C 00 90 AD |             if_z            jmp     #excluded               
277cc 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
277d0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
277d4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
277d8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
277dc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
277e0 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
277e4 15a             | 
277e4 15a             | 'determine priority cogs and build instructions for the polling sequence
277e4 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
277e8 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
277ec 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
277f0 15d             | 
277f0 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
277f4 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
277f8 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
277fc 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
27800 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
27804 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
27808 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2780c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
27810 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
27814 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
27818 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2781c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
27820 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
27824 16a             | endprioloop
27824 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
27828 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2782c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
27830 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
27834 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
27838 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2783c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
27840 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
27844 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
27848 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2784c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
27850 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
27854 176             | 
27854 176             | ' populate the round robin COG polling instructions
27854 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
27858 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2785c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
27860 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
27864 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
27868 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2786c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
27870 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
27874 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
27878 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2787c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
27880 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
27884 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
27888 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2788c 184             | '..................................................................................................
2788c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2788c 184             | 
2788c 184             | set_latency                                                 '            (a) set latency
2788c 184             | get_latency                                                 '            (b) get latency
2788c 184             | set_burst                                                   '            (c) set burst size of bank
2788c 184             | get_burst                                                   '            (d) get burst size of bank
2788c 184             |                                                             '            (e) dump state
2788c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
27890 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
27894 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
27898 187             |                                                             ' | | | | e  account for following AUGS
27898 187 04 00 00 FF 
2789c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
278a0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
278a4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
278a8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
278ac 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
278b0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
278b4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
278b8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
278bc 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
278c0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
278c4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
278c8 193             | 
278c8 193             | '..................................................................................................
278c8 193             | ' Misc EXECF code
278c8 193             | 
278c8 193 33 72 63 FD | start_read_exec             execf   newburstr
278cc 194 33 7C 63 FD | start_write_exec            execf   resumewrites
278d0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
278d4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
278d8 197             | 
278d8 197             | '..................................................................................................
278d8 197             | ' Variables
278d8 197             | 
278d8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
278dc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
278e0 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
278e4 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
278e8 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
278ec 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
278f0 19d             | 
278f0 19d 00 00 00 80 | xfreq1          long    $80000000
278f4 19e 00 00 00 40 | xfreq2          long    $40000000
278f8 19f 03 00 00 00 | delay           long    3
278fc 1a0             | 
278fc 1a0             | lutcodeaddr                 
278fc 1a0             | startupparams
278fc 1a0             | excludedcogs                                    'careful: shared register use!
278fc 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
27900 1a1 00 00 00 00 | flags           long    0
27904 1a2             | mask                                            'careful: shared register use!
27904 1a2 00 00 00 00 | resetmaskA      long    0
27908 1a3             | limit                                           'careful: shared register use!
27908 1a3 00 00 00 00 | resetmaskB      long    0
2790c 1a4 00 00 00 00 | datapins        long    0
27910 1a5             | const512                                        'careful: shared register use!
27910 1a5 00 00 00 00 | devicelist      long    0
27914 1a6 00 00 00 00 | coglist         long    0
27918 1a7 00 00 00 00 | mbox            long    0 
2791c 1a8             | 
2791c 1a8             | clkpin                                          'shared with code patched during init
2791c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
27920 1a9             | cspin                                           'shared with code patched during init
27920 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
27924 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
27928 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2792c 1ac 01 00 00 00 | clkdelay        long    1
27930 1ad 00 00 00 00 | regdatabus      long    0
27934 1ae             | 
27934 1ae 10 00 00 00 | deviceaddr      long    $10
27938 1af             | rrcounter
27938 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2793c 1b0             | 
2793c 1b0             | ' jump addresses for the per COG handlers
2793c 1b0 20 00 00 00 | cog0_handler    long    cog0
27940 1b1 2C 00 00 00 | cog1_handler    long    cog1
27944 1b2 38 00 00 00 | cog2_handler    long    cog2
27948 1b3 44 00 00 00 | cog3_handler    long    cog3
2794c 1b4 50 00 00 00 | cog4_handler    long    cog4
27950 1b5 5C 00 00 00 | cog5_handler    long    cog5
27954 1b6 68 00 00 00 | cog6_handler    long    cog6
27958 1b7 74 00 00 00 | cog7_handler    long    cog7
2795c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
27960 1b9             | 
27960 1b9             | ' EXECF sequences
27960 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
27964 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
27968 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2796c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
27970 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
27974 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
27978 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2797c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2797c 1c0             | 
2797c 1c0             | 
2797c 1c0             | ' SKIPF sequences
2797c 1c0             | skiptable
2797c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
27980 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
27984 1c2 00 00 00 00 |                 long    0                      ' read modify write long
27988 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2798c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
27990 1c5 00 00 00 00 | pattern2        long    0
27994 1c6 00 00 00 00 | pattern3        long    0
27998 1c7 77 02 00 00 | singlelong      long    %1001110111  
2799c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
279a0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
279a4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
279a8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
279ac 1cc             | 
279ac 1cc             | ' LUT RAM address values
279ac 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
279b0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
279b4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
279b8 1cf F6 02 00 00 | noread          long    noread_lut
279bc 1d0             | 
279bc 1d0 00 00 00 00 | id0             long    0
279c0 1d1 01 00 00 00 | id1             long    1
279c4 1d2 02 00 00 00 | id2             long    2
279c8 1d3 03 00 00 00 | id3             long    3
279cc 1d4 04 00 00 00 | id4             long    4
279d0 1d5 05 00 00 00 | id5             long    5
279d4 1d6 06 00 00 00 | id6             long    6
279d8 1d7 07 00 00 00 | id7             long    7
279dc 1d8             | 
279dc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
279dc 1d8             | 'and COG updates and need to follow immediately after id0-id7
279dc 1d8 00 00 00 00 | addr1           long    0
279e0 1d9 00 00 00 00 | hubdata         long    0
279e4 1da 00 00 00 00 | count           long    0
279e8 1db 00 00 00 00 | addr2           long    0
279ec 1dc 00 00 00 00 | total           long    0
279f0 1dd 00 00 00 00 | offset1         long    0
279f4 1de 00 00 00 00 | offset2         long    0
279f8 1df 00 00 00 00 | link            long    0
279fc 1e0             | 
279fc 1e0             | burstwrite                                      'note shared register use during init
279fc 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
27a00 1e1 00 00 00 00 | id              long    0
27a04 1e2             | 
27a04 1e2 00 00 00 00 | header          long    0
27a08 1e3 00 00 00 00 | trailer         long    0
27a0c 1e4 00 00 00 00 | cmdaddr         long    0
27a10 1e5 00 00 00 00 | request         long    0
27a14 1e6 00 00 00 00 | rrlimit         long    0
27a18 1e7 00 00 00 00 | pinconfig       long    0
27a1c 1e8 00 00 00 00 | clks            long    0
27a20 1e9 00 00 00 00 | resume          long    0
27a24 1ea 00 00 00 00 | orighubsize     long    0
27a28 1eb 00 00 00 00 | wrclks          long    0
27a2c 1ec             | 
27a2c 1ec 00 00 00 00 | pattern         long    0
27a30 1ed 00 00 00 00 | hubscratch      long    0
27a34 1ee 00 10 00 00 | val4k           long    4096
27a38 1ef             | 
27a38 1ef             | ' temporary general purpose regs
27a38 1ef 00 00 00 00 | a               long    0
27a3c 1f0 00 00 00 00 | b               long    0
27a40 1f1 00 00 00 00 | c               long    0
27a44 1f2 00 00 00 00 | d               long    0
27a48 1f3             |                 fit     502
27a48 1f3             | 
27a48 1f3             |                 fit     502
27a48 1f3             | 
27a48 1f3             | '..................................................................................................
27a48 1f3             | 
27a48 1f3             |             orgh
27a48                 | 
27a48                 | lut_code
27a48                 | 'HW init code up to 80 longs
27a48                 | 
27a48                 | '..................................................................................................
27a48                 | ' Memory layout for LUT RAM once operational:
27a48                 | '
27a48                 | '  LUT RAM address      Usage
27a48                 | '  ---------------      ----
27a48                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
27a48                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
27a48                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
27a48                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
27a48                 | '
27a48                 | ' Also during driver COG startup:
27a48                 | ' $230-$24F is used for HW init setup
27a48                 | ' $250-$26F is used as temporary vector storage 
27a48                 | '..................................................................................................
27a48                 | 
27a48                 |                 org $230    
27a48 230             | 
27a48 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
27a48 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
27a4c 231 24 16 60 FD |                             pollxfi
27a50 232 FF AA 2A FF 
27a54 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
27a58 234 28 00 B0 FD |                             call    #sendqspi
27a5c 235 07 F8 07 FF 
27a60 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
27a64 237 28 00 B0 FD |                             call    #sendspi
27a68 238 F8 07 78 FF 
27a6c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
27a70 23a 1C 00 B0 FD |                             call    #sendspi
27a74 23b 7F 78 78 FF 
27a78 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
27a7c 23d 10 00 B0 FD |                             call    #sendspi 
27a80 23e 2D 00 64 FD |                             ret
27a84 23f             | 
27a84 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
27a88 240 32 0C 64 FD |                             skipf   #%110
27a8c 241 9C EF 03 F6 |                             mov     pb, xsendimm
27a90 242             | 
27a90 242 10 D0 07 F6 | sendspi                     mov     clks, #16
27a94 243 97 EF 03 F6 |                             mov     pb, ximm8lut
27a98 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
27a9c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
27aa0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
27aa4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
27aa8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
27aac 249 50 48 63 FD |                             fltl    datapins                'float data bus
27ab0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
27ab4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
27ab8 24c             | 
27ab8 24c 00 00 00 00 
27abc 24d 00 00 00 00 
27ac0 24e 00 00 00 00 
27ac4 24f 00 00 00 00 |                 long    0[$270-32-$]
27ac8 250             |                 fit     $270-32  ' keep room for 32 vector longs
27ac8 250             |     
27ac8 250             |                 fit     $270-32  ' keep room for 32 vector longs
27ac8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
27ac8 250             | rw_vect ' PSRAM jump vectors
27ac8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27acc 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27ad0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
27ad4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
27ad8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
27adc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
27ae0 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
27ae4 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
27ae8 258             | ro_vect ' R/O PSRAM jump vectors
27ae8 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27aec 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27af0 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
27af4 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
27af8 25c 00 01 00 00 |                 long    unsupported
27afc 25d 00 01 00 00 |                 long    unsupported
27b00 25e 00 01 00 00 |                 long    unsupported
27b04 25f 00 01 00 00 |                 long    unsupported
27b08 260             | ctrl_vect ' Control jump vectors
27b08 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
27b0c 261 00 01 00 00 |                 long    unsupported
27b10 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
27b14 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
27b18 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
27b1c 265 00 01 00 00 |                 long    unsupported
27b20 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
27b24 267 3E 01 00 00 |                 long    reconfig 
27b28 268             | no_vect ' Invalid bank jump vectors
27b28 268 01 01 00 00 |                 long    invalidbank
27b2c 269 01 01 00 00 |                 long    invalidbank
27b30 26a 01 01 00 00 |                 long    invalidbank
27b34 26b 01 01 00 00 |                 long    invalidbank
27b38 26c 01 01 00 00 |                 long    invalidbank
27b3c 26d 01 01 00 00 |                 long    invalidbank
27b40 26e 01 01 00 00 |                 long    invalidbank
27b44 26f 01 01 00 00 |                 long    invalidbank
27b48 270             |                 fit     $270
27b48 270             | 
27b48 270             |                 fit     $270
27b48 270             | '..................................................................................................
27b48 270             | ' PSRAM READS
27b48 270             |                                                             ' a b c d e f
27b48 270             |                                                             ' B W L B R L  (a) byte read
27b48 270             |                                                             ' Y O O U E O  (b) word read
27b48 270             |                                                             ' T R N R S C  (c) long read
27b48 270             |                                                             ' E D G S U K  (d) new burst read
27b48 270             |                                                             '       T M E  (e) resumed sub-burst
27b48 270             |                                                             '         E D  (f) locked sub-burst
27b48 270             | 
27b48 270             | 
27b48 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
27b4c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
27b50 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
27b54 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
27b58 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
27b5c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
27b60 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
27b64 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
27b68 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
27b6c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
27b70 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
27b74 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
27b78 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
27b7c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
27b80 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
27b84 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
27b88 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
27b8c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
27b90 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
27b94 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
27b98 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
27b9c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
27ba0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
27ba4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
27ba8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
27bac 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
27bb0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
27bb4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
27bb8 28c             | 
27bb8 28c             |                             ' fall through to read bursts
27bb8 28c             |                         
27bb8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
27bb8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
27bbc 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
27bc0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
27bc4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
27bc8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
27bcc 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
27bd0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
27bd4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
27bd8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
27bdc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
27be0 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
27be4 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
27be8 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
27bec 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
27bf0 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
27bf4 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
27bf8 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
27bfc 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
27c00 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
27c04 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
27c08 2a0 E8 D1 03 F1 |                             add     clks, clks
27c0c 2a1             | readcommon
27c0c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
27c10 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
27c14 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
27c18 2a4             | 
27c18 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
27c1c 2a5 69 C8 63 FD |                             rev     cmdaddr
27c20 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
27c24 2a7 61 C8 63 FD |                             mergeb  cmdaddr
27c28 2a8             | 
27c28 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
27c2c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
27c30 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
27c30 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
27c34 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
27c38 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
27c3c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
27c40 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
27c40 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
27c44 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
27c48 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
27c4c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
27c50 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
27c54 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
27c58 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
27c58 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
27c5c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
27c60 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
27c64 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
27c68 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
27c6c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
27c70 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
27c74 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
27c78 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
27c7c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
27c80 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
27c84 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
27c88 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
27c8c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
27c90 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
27c90 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
27c94 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
27c98 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
27c9c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
27ca0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
27ca4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
27ca8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
27cac 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
27cb0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
27cb4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
27cb8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
27cbc 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
27cc0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
27cc4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
27cc8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
27ccc 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
27cd0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
27cd4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
27cd8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
27cdc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
27ce0 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
27ce4 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
27ce8 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
27cec 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
27cf0 2da 10 03 90 FD |                             jmp     #writecommon
27cf4 2db             | 
27cf4 2db             | '..................................................................................................
27cf4 2db             | ' Burst continuation testing
27cf4 2db             | 
27cf4 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
27cf8 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
27cfc 2dd             | continue_read_lut          
27cfc 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
27d00 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
27d04 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
27d08 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
27d0c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
27d10 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
27d14 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
27d18 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
27d1c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
27d20 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
27d24 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
27d28 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
27d2c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
27d30 2ea             | 
27d30 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
27d34 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
27d38 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
27d3c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
27d40 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
27d44 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
27d48 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
27d4c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
27d50 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
27d54 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
27d58 2f4 2A 1C 66 0D |             _ret_           push    #poller
27d5c 2f5             | 
27d5c 2f5             | 
27d5c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
27d60 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
27d60 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
27d64 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
27d68 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
27d6c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
27d70 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
27d74 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
27d78 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
27d7c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
27d80 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
27d84 2ff             | '..................................................................................................
27d84 2ff             | ' Completion of requests
27d84 2ff             | 
27d84 2ff             | complete_rw_lut             
27d84 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
27d88 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
27d8c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
27d90 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
27d94 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
27d98 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
27d9c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
27da0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
27da4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
27da8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
27dac 309 32 62 64 AD |             if_z            skipf   #%110001
27db0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
27db4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
27db8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
27dbc 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
27dc0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
27dc4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
27dc8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
27dcc 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
27dd0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
27dd4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
27dd8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
27ddc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
27de0 316             |                                                             ' skipcase (a) gfx copy to/from hub
27de0 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
27de0 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
27de0 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
27de4 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
27de8 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
27dec 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
27df0 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
27df4 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
27df8 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
27dfc 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
27e00 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
27e04 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
27e08 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
27e0c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
27e10 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
27e14 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
27e18 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
27e1c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
27e20 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
27e24 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
27e28 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
27e2c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
27e30 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
27e34 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
27e38 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
27e3c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
27e40 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
27e44 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
27e48 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
27e4c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
27e50 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
27e54 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
27e58 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
27e5c 335 DF B7 03 A6 |             if_z            mov     addr2, link
27e60 336 34 FF 9F AD |             if_z            jmp     #checknext
27e64 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
27e68 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
27e6c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
27e70 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
27e74 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
27e78 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
27e7c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
27e80 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
27e84 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
27e88 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
27e8c 341             | 
27e8c 341             | '..................................................................................................
27e8c 341             | ' PSRAM WRITES
27e8c 341             |                                                             '  a b c d e f g h
27e8c 341             | 
27e8c 341             |                                                             '  B W L F B R L L (a) byte write(s)
27e8c 341             |                                                             '  Y O O I U E O O (b) word write(s)
27e8c 341             |                                                             '  T R N L R S C C (c) long write(s)
27e8c 341             |                                                             '  E D G L S U K K (d) resumed fill
27e8c 341             |                                                             '          T M E E (e) new burst write
27e8c 341             |                                                             '            E D D (f) resumed burst
27e8c 341             |                                                             '              F B (g) locked fill
27e8c 341             |                                                             '              I U (h) locked burst write
27e8c 341             |                                                             '              L R 
27e8c 341             |                                                             '              L S 
27e8c 341             |                                                             '                T 
27e8c 341             | 
27e8c 341             | w_single                   
27e8c 341             | w_fill_cont           
27e8c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
27e90 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
27e94 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
27e98 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
27e9c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
27ea0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
27ea4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
27ea8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
27eac 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
27eb0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
27eb4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
27eb8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
27ebc 34d             |                ' disable call to r_resume_burst for single longs when z=0
27ebc 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
27ec0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
27ec4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
27ec8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
27ecc 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
27ed0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
27ed4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
27ed8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
27edc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
27ee0 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
27ee4 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
27ee8 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
27eec 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
27ef0 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
27ef4 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
27ef8 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
27efc 35d             |         
27efc 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
27efc 35d             |             '
27efc 35d             |             '  At least one of these 3 optional components will be sent
27efc 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
27efc 35d             |             '     body - N x full longs of data
27efc 35d             |             '     trailer - last partial long of data
27efc 35d             |             '
27efc 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
27efc 35d             |             '
27efc 35d             |             'Case    Type                           Sends
27efc 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
27efc 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
27efc 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
27efc 35d             |             ' 4)     Multiple long fill             body only
27efc 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
27efc 35d             | 
27efc 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
27efc 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
27f00 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
27f04 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
27f08 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
27f0c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
27f10 362 13 8C 07 F6 |                             mov     pattern3, #%10011
27f14 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
27f18 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
27f1c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
27f20 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
27f24 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
27f28 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
27f2c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
27f30 36a             |                             
27f30 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
27f34 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
27f38 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
27f3c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
27f40 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
27f44 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
27f48 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
27f4c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
27f50 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
27f54 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
27f58 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
27f5c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
27f60 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
27f64 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
27f68 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
27f6c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
27f70 37a             | 
27f70 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
27f74 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
27f78 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
27f7c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
27f80 37e             |                  
27f80 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
27f84 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
27f88 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
27f8c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
27f90 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
27f94 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
27f98 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
27f9c 385             | 
27f9c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
27fa0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
27fa4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
27fa8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
27fac 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
27fb0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
27fb4 38b             | 
27fb4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
27fb4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
27fb8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
27fbc 38d 2A B0 63 FD |                             push    addr1                   'save address
27fc0 38e             | 
27fc0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
27fc0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
27fc4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
27fc8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
27fcc 391             |             
27fcc 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
27fd0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
27fd4 393 2B B0 63 FD |                             pop     addr1                   'restore address
27fd8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
27fdc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
27fe0 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
27fe4 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
27fe8 398             | 
27fe8 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
27fec 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
27ff0 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
27ff4 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
27ff8 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
27ffc 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
28000 39e             | 
28000 39e             |                             'trailer is done
28000 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
28004 39f             | 
28004 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
28008 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2800c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
28010 3a2             | 
28010 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
28014 3a3 69 C8 63 FD |                             rev     cmdaddr                 
28018 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2801c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
28020 3a6             |                             
28020 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
28024 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
28028 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2802c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
28030 3aa             |                                                          
28030 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
28034 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
28038 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2803c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
28040 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
28044 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
28048 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2804c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
28050 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
28054 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
28058 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2805c 3b5             |  
2805c 3b5 59 52 63 FD |                             drvh    cspin
28060 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
28064 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
28068 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2806c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
28070 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
28074 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
28078 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2807c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
28080 3be EA E5 03 F6 |                             mov     d, orighubsize
28084 3bf EF E5 63 F0 |                             shl     d, a
28088 3c0 F2 E3 83 F1 |                             sub     c, d
2808c 3c1 DD E3 03 F1 |                             add     c, offset1
28090 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
28094 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
28098 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2809c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
280a0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
280a4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
280a8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
280ac 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
280b0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
280b4 3cb BB D3 03 F6 |                             mov     resume, restorefill
280b8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
280bc 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
280c0 3ce 6C FC BF CD |             if_c            call    #yield
280c4 3cf 2D 00 64 FD |                             ret
280c8 3d0             |                            
280c8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
280c8 3d0             |                       '     rczl    pa                      'rotate left into address offset
280c8 3d0             |                       '     rczl    c wcz                   'restore count and flags
280c8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
280cc 3d1 02 EC 67 F0 |                             shl     pa, #2
280d0 3d2 28 06 64 AD |             if_z            setq    #3
280d4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
280d8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
280dc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
280e0 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
280e4 3d7             | 
280e4 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
280e8 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
280ec 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
280f0 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
280f4 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
280f8 3dc             |                 fit 1024-32
280f8 3dc             |         
280f8 3dc             | 
280f8 3dc             | '..................................................................................................
280f8 3dc             | 
280f8 3dc             |                 fit 1024-32
280f8 3dc 00 00 00 00 
280fc 3dd 00 00 00 00 
28100 3de 00 00 00 00 
28104 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
28108 3e0             |                 org 1024-32
28108 000             | 
28108 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
28108 000 00 00 00 00 |                 long $0000
2810c 001 11 11 00 00 |                 long $1111
28110 002 22 22 00 00 |                 long $2222
28114 003 33 33 00 00 |                 long $3333
28118 004 44 44 00 00 |                 long $4444
2811c 005 55 55 00 00 |                 long $5555
28120 006 66 66 00 00 |                 long $6666
28124 007 77 77 00 00 |                 long $7777
28128 008 88 88 00 00 |                 long $8888
2812c 009 99 99 00 00 |                 long $9999
28130 00a AA AA 00 00 |                 long $aaaa
28134 00b BB BB 00 00 |                 long $bbbb
28138 00c CC CC 00 00 |                 long $cccc
2813c 00d DD DD 00 00 |                 long $dddd
28140 00e EE EE 00 00 |                 long $eeee
28144 00f FF FF 00 00 |                 long $ffff
28148 010             | 
28148 010             | 'masks
28148 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2814c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
28150 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
28154 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
28158 014             | 
28158 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2815c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
28160 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
28164 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
28168 018             | 
28168 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2816c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
28170 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
28174 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
28178 01c             | 
28178 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2817c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
28180 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
28184 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
28188 020             |         fit 1024
28188 020             | 
28188 020             |         fit 1024
28188 020             | 
28188 020             | '--------------------------------------------------------------------------------------------------
28188 020             |         orgh
28188                 | 
28188                 | gfxexpansion
28188                 |                             'simple line drawing graphics expansion of memory driver
28188                 |                             'jmp     #donerepeats                'just return for now
28188                 | 
28188     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2818c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
28190     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
28194     DD E1 03 F6 |                             mov     b, offset1              'get error term
28198     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2819c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
281a0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
281a4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
281a8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
281ac     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
281b0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
281b4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
281b8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
281bc     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
281c0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
281c4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
281c8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
281cc     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
281d0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
281d4     DC E5 33 F9 |                             getword d, total, #0            'get line width
281d8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
281dc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
281e0     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
281e4     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
281e8     C3 03 80 FD |                             jmp     #readmask               'continue filling
281ec                 | 	alignl
281ec                 | _usbnew_spin2_dat_
281ec                 |                 org     $000
281ec 000             | 
281ec 000             | usb_host_start
281ec 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
281f0 001             | 
281f0 001 03 00 00 FF 
281f4 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
281f8 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
281fc 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
28200 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
28204 006 29 70 63 FD |                 setq2   htmp
28208 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2820c 008             | 
2820c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
28210 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
28214 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
28218 00b             | 
28218 00b             | '------------------------------------------------------------------------------
28218 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
28218 00b             | ' special because the receiving function must not respond with either STALL or
28218 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
28218 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
28218 00b             | ' corrupt packet, it must ignore the transaction
28218 00b             | '------------------------------------------------------------------------------
28218 00b             | ' On entry:
28218 00b             | '   PTRA - start address of the SETUP data struct.
28218 00b             | ' On exit:
28218 00b             | '   retval - PID_ACK on success, otherwise error code.
28218 00b             | '------------------------------------------------------------------------------
28218 00b             | txn_setup
28218 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2821c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
28220 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
28224 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
28228 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2822c 010             | .setup
2822c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
28230 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28234 012 2D 00 64 AD |         if_z    ret
28238 013 7C 0B B0 FD |                 call    #retry_wait
2823c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
28240 015 2D 00 64 AD |         if_z    ret
28244 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
28248 017 E0 FF 9F FD |                 jmp     #.setup
2824c 018             | 
2824c 018             | '------------------------------------------------------------------------------
2824c 018             | ' IN/INTERRUPT transaction.
2824c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2824c 018             | '------------------------------------------------------------------------------
2824c 018             | ' On entry:
2824c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2824c 018             | '     CRC(b19..23).
2824c 018             | ' On exit:
2824c 018             | '------------------------------------------------------------------------------
2824c 018             | txn_in
2824c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
28250 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
28254 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
28258 01b             | 
28258 01b             |                 ' Fall through to urx_packet
28258 01b             | 
28258 01b             | '------------------------------------------------------------------------------
28258 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
28258 01b             | ' received are handshakes and IN DATAx.
28258 01b             | '------------------------------------------------------------------------------
28258 01b             | ' On entry:
28258 01b             | ' On exit:
28258 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
28258 01b             | '     returned.
28258 01b             | '------------------------------------------------------------------------------
28258 01b             | urx_packet
28258 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2825c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
28260 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
28264 01e 1A 92 63 FD |                 getct   hct2
28268 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2826c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
28270 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
28274 022             | .wait_sop
28274 022 22 A7 8A FA |                 rdpin   urx, dm
28278 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2827c 024 08 00 90 CD |         if_c    jmp     #.get_pid
28280 025 FC 25 CC FB |                 jnct2   #.wait_sop
28284 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
28288 027             | .get_pid
28288 027 28 02 B0 FD |                 call    #urx_next
2828c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
28290 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
28294 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
28298 02b             | .chk_pid
28298 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2829c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
282a0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
282a4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
282a8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
282ac 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
282b0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
282b4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
282b8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
282bc 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
282c0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
282c4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
282c8 037             | .ack_resend
282c8 037 22 A7 82 FA |                 rqpin   urx, dm
282cc 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
282d0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
282d4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
282d8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
282dc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
282e0 03d             | .chk_eop
282e0 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
282e4 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
282e8 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
282ec 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
282f0 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
282f4 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
282f8 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
282fc 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
28300 045 2D 00 64 FD |                 ret
28304 046             | .idle
28304 046 22 A7 82 FA |                 rqpin   urx, dm
28308 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2830c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
28310 049 2D 00 64 FD |                 ret
28314 04a             | 
28314 04a             | '------------------------------------------------------------------------------
28314 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
28314 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
28314 04a             | ' if one is required.
28314 04a             | '------------------------------------------------------------------------------
28314 04a             | ' On entry:
28314 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
28314 04a             | ' On exit:
28314 04a             | '------------------------------------------------------------------------------
28314 04a             | utx_token
28314 04a 22 A7 82 FA |                 rqpin   urx, dm
28318 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2831c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
28320 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
28324 04e 34 0D B0 CD |         if_c    call    #utx_pre
28328 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2832c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
28330 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
28334 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
28338 053             | .next_byte
28338 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2833c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
28340 055             | .wait
28340 055 40 46 72 FD |                 testp   dp                      wc
28344 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
28348 057 23 03 08 FC |                 akpin   dp
2834c 058 22 A5 22 FC |                 wypin   utx, dm
28350 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
28354 05a             | 
28354 05a             | '------------------------------------------------------------------------------
28354 05a             | ' SETUP/OUT/INTERRUPT transaction.
28354 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
28354 05a             | '------------------------------------------------------------------------------
28354 05a             | ' On entry:
28354 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
28354 05a             | '     CRC(b19..23).
28354 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
28354 05a             | '   pkt_data - count of DATAx payload bytes to send.
28354 05a             | ' On exit:
28354 05a             | '------------------------------------------------------------------------------
28354 05a             | txn_out
28354 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
28358 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2835c 05c 00 00 C0 FF 
28360 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
28364 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
28368 05f             | 
28368 05f             |                 ' Fall through to utx_data
28368 05f             | 
28368 05f             | '------------------------------------------------------------------------------
28368 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
28368 05f             | ' calculated while the data byte is being shifted out. Since data stage
28368 05f             | ' success/fail is not determined until the status stage of the transaction,
28368 05f             | ' this routine is only concerned about the current DATAx packet.
28368 05f             | '------------------------------------------------------------------------------
28368 05f             | ' On entry:
28368 05f             | '   PTRA - hub start address of the data to read.
28368 05f             | '   pkt_cnt - data payload size.
28368 05f             | ' On exit:
28368 05f             | '------------------------------------------------------------------------------
28368 05f             | utx_data
28368 05f 22 A7 82 FA |                 rqpin   urx, dm
2836c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
28370 061 F4 FF 9F CD |         if_c    jmp     #utx_data
28374 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
28378 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2837c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
28380 065 D8 0C B0 CD |         if_c    call    #utx_pre
28384 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
28388 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2838c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
28390 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
28394 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
28398 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2839c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
283a0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
283a4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
283a8 06f             | .read_byte
283a8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
283ac 070 F0 00 B0 FD |                 call    #utx_byte
283b0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
283b4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
283b8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
283bc 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
283c0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
283c4 076             | .send_crc
283c4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
283c8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
283cc 078 D0 00 B0 FD |                 call    #utx_byte
283d0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
283d4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
283d8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
283dc 07c             | 
283dc 07c             | '------------------------------------------------------------------------------
283dc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
283dc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
283dc 07c             | ' expects that the packet includes at least the CRC word.
283dc 07c             | '
283dc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
283dc 07c             | ' was requested, which makes it difficult to determine where the data stops
283dc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
283dc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
283dc 07c             | ' USB-16 expected residual value of 0xB001.
283dc 07c             | '
283dc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
283dc 07c             | ' so the caller can verify IN success before writing the data to its final
283dc 07c             | ' destination.
283dc 07c             | '------------------------------------------------------------------------------
283dc 07c             | ' On entry:
283dc 07c             | '   pkt_data - max byte count expected to be in the packet.
283dc 07c             | '   newb_flg - signals new byte ready when toggled.
283dc 07c             | ' On exit:
283dc 07c             | '   pkt_cnt - actual number of bytes read.
283dc 07c             | '------------------------------------------------------------------------------
283dc 07c             | urx_data
283dc 07c F7 75 03 F6 |                 mov     htmp2, pb
283e0 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
283e4 07e 00 00 C0 FF 
283e8 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
283ec 080 BA EF 03 F6 |                 mov     pb, htmp2
283f0 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
283f4 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
283f8 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
283fc 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
28400 085             | .wait_byte
28400 085             | ' In-line rx for max speed
28400 085 22 A7 82 FA |                 rqpin   urx, dm
28404 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
28408 087 53 A5 02 F5 |                 and     utx, urx
2840c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
28410 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
28414 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
28418 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2841c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
28420 08d DC FF 9F FD |                 jmp     #.wait_byte
28424 08e             | .get_byte
28424 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
28428 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2842c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
28430 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
28434 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
28438 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2843c 094             | .end_crc
2843c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
28440 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
28444 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
28448 097 2D 00 64 1D |         if_a    ret
2844c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2844c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2844c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2844c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2844c 098 22 A7 82 FA |                 rqpin   urx, dm
28450 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
28454 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
28458 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
28458 09b             | .chk_crc
28458 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2845c 09c 58 00 00 FF 
28460 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
28464 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
28468 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2846c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
28470 0a1 34 09 B0 FD |                 call    #poll_waitx
28474 0a2             | 
28474 0a2             |                 ' Fall through to utx_handshake
28474 0a2             | 
28474 0a2             | '------------------------------------------------------------------------------
28474 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
28474 0a2             | ' the appropriate IP delay has been inserted.
28474 0a2             | '------------------------------------------------------------------------------
28474 0a2             | ' On entry:
28474 0a2             | '   retval - handshake PID to send.
28474 0a2             | ' On exit:
28474 0a2             | '   retval unchanged.
28474 0a2             | '------------------------------------------------------------------------------
28474 0a2             | utx_handshake
28474 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
28478 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2847c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
28480 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
28484 0a6 5F A5 02 F6 |                 mov     utx, retval
28488 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2848c 0a8             | .idle
2848c 0a8 22 A7 82 FA |                 rqpin   urx, dm
28490 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
28494 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
28498 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2849c 0ac 08 09 90 FD |                 jmp     #poll_waitx
284a0 0ad             | 
284a0 0ad             | '------------------------------------------------------------------------------
284a0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
284a0 0ad             | '------------------------------------------------------------------------------
284a0 0ad             | ' On entry:
284a0 0ad             | '   utx - byte to transmit.
284a0 0ad             | ' On exit:
284a0 0ad             | '------------------------------------------------------------------------------
284a0 0ad             | utx_byte
284a0 0ad 40 46 72 FD |                 testp   dp                      wc
284a4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
284a8 0af 23 03 08 FC |                 akpin   dp
284ac 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
284b0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
284b4 0b2             | 
284b4 0b2             | '------------------------------------------------------------------------------
284b4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
284b4 0b2             | '------------------------------------------------------------------------------
284b4 0b2             | ' On entry:
284b4 0b2             | ' On exit:
284b4 0b2             | '   retval - the byte read.
284b4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
284b4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
284b4 0b2             | '     received.
284b4 0b2             | '------------------------------------------------------------------------------
284b4 0b2             | urx_next
284b4 0b2 22 A7 8A FA |                 rdpin   urx, dm
284b8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
284bc 0b4 53 A5 02 F5 |                 and     utx, urx
284c0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
284c4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
284c8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
284cc 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
284d0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
284d4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
284d8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
284dc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
284e0 0bd 2D 00 64 FD |                 ret
284e4 0be             | 
284e4 0be             | '------------------------------------------------------------------------------
284e4 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
284e4 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
284e4 0be             | ' length, and the PID is not included in the CRC calculation:
284e4 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
284e4 0be             | '  CRC5  ENDP ADDRESS PID
284e4 0be             | ' %00000_1111_1111111_xxxxxxxx
284e4 0be             | '------------------------------------------------------------------------------
284e4 0be             | ' On entry:
284e4 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
284e4 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
284e4 0be             | ' On exit:
284e4 0be             | '   ep_addr_pid - CRC value appended to the packet.
284e4 0be             | '------------------------------------------------------------------------------
284e4 0be             | calc_crc5
284e4 0be FF 03 00 FF 
284e8 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
284ec 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
284f0 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
284f4 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
284f8 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
284fc 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
28500 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
28504 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
28508 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2850c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
28510 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
28514 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
28518 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2851c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
28520 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
28524 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
28528 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2852c 0d0             | 
2852c 0d0             | '------------------------------------------------------------------------------
2852c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2852c 0d0             | '------------------------------------------------------------------------------
2852c 0d0             | isr1_fsframe
2852c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
28530 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
28534 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
28538 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2853c 0d4             | .wait
2853c 0d4 40 46 72 FD |                 testp   dp                      wc
28540 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
28544 0d6 23 03 08 FC |                 akpin   dp
28548 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2854c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
28550 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
28554 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
28558 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2855c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
28560 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
28564 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
28568 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2856c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
28570 0e1 2C FF BF FD |                 call    #utx_byte
28574 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
28578 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2857c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
28580 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
28584 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
28588 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2858c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
28590 0e9 5B A5 42 F5 |                 or      utx, icrc
28594 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
28598 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2859c 0ec 20 00 90 FD |                 jmp     #isr1_wait
285a0 0ed             | isr1_lsframe
285a0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
285a4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
285a8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
285ac 0f0             | .wait
285ac 0f0 40 46 72 FD |                 testp   dp                      wc
285b0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
285b4 0f2 23 03 08 FC |                 akpin   dp
285b8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
285bc 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
285c0 0f5             | isr1_wait
285c0 0f5 22 A5 82 FA |                 rqpin   utx, dm
285c4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
285c8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
285cc 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
285d0 0f9 03 00 00 FF 
285d4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
285d8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
285dc 0fc F5 FF 3B FB |                 reti1
285e0 0fd             | 
285e0 0fd             | '------------------------------------------------------------------------------
285e0 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
285e0 0fd             | ' transaction will complete before the next frame is triggered.
285e0 0fd             | '------------------------------------------------------------------------------
285e0 0fd             | ' On entry:
285e0 0fd             | ' On exit:
285e0 0fd             | '------------------------------------------------------------------------------
285e0 0fd             | wait_txn_ok
285e0 0fd 1A 74 63 FD |                 getct   htmp2
285e4 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
285e8 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
285ec 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
285f0 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
285f4 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
285f8 103 2D 00 64 FD |                 ret
285fc 104             | 
285fc 104             | '------------------------------------------------------------------------------
285fc 104             | ' A device connection was detected, or a bus reset was requested by the USB
285fc 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
285fc 104             | ' and perform a reset sequence prior to device enumeration.
285fc 104             | '------------------------------------------------------------------------------
285fc 104             | dev_reset
285fc 104 22 A7 82 FA |                 rqpin   urx, dm
28600 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
28604 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
28608 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2860c 108             | reset
2860c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
28610 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
28614 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
28618 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2861c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
28620 10d 1A 92 62 FD |                 getct   iframe_ct_base
28624 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
28628 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2862c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
28630 111 24 70 07 F1 |                 add     htmp, #36
28634 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
28638 113             | .framewait
28638 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2863c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
28640 115 2D 00 64 FD |                 ret
28644 116             | 
28644 116             | '------------------------------------------------------------------------------
28644 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
28644 116             | '------------------------------------------------------------------------------
28644 116             | ' On entry:
28644 116             | '   PTRA - source address.
28644 116             | '   PB - destination address.
28644 116             | '   hr0 - length of copy, in bytes.
28644 116             | ' On exit:
28644 116             | '------------------------------------------------------------------------------
28644 116             | hmemcpy
28644 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
28648 117 F7 71 43 FC |                 wrbyte  htmp, pb
2864c 118 01 EE 07 F1 |                 add     pb, #1
28650 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
28654 11a             | 
28654 11a             | '------------------------------------------------------------------------------
28654 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
28654 11a             | ' loop until the errant device is disconnected.
28654 11a             | '------------------------------------------------------------------------------
28654 11a             | ' On entry:
28654 11a             | ' On exit:
28654 11a             | '------------------------------------------------------------------------------
28654 11a             | host_error
28654 11a             |           if ERROR_LED >= 0
28654 11a             |           end
28654 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
28658 11b             | 
28658 11b             | '------------------------------------------------------------------------------
28658 11b             | ' Get HID descriptor buffer for current port
28658 11b             | '------------------------------------------------------------------------------
28658 11b             | ' On entry:
28658 11b             | ' On exit:
28658 11b             | '   PB - HID descriptor buffer pointer
28658 11b             | '------------------------------------------------------------------------------
28658 11b             | get_hid_descr_buffer
28658 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2865c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
28660 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
28664 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
28668 11f             | 
28668 11f             | 
28668 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2866c 120             | 
2866c 120             | ' USB commands and error codes
2866c 120 00 00 00 00 | cmd_data        long    0
28670 121 00 00 00 00 | usb_err_code    long    ERR_NONE
28674 122             | 
28674 122             | ' Parameters block assigned at cog startup
28674 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
28678 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2867c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
28680 125             | if ACTIVITY_LED >= 0
28680 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
28680 125             | end
28680 125             | if ERROR_LED >= 0
28680 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
28680 125             | end
28680 125 00 00 00 00 | hid_descr_p     long    0
28684 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
28684 126             | 'hkbd_report_p   long    0
28684 126 00 00 00 00 | hub_descr_p     long    0
28688 127 00 00 00 00 | urx_buff_p      long    0
2868c 128 00 00 00 00 | dev_desc_buff_p long    0
28690 129 00 00 00 00 | con_desc_buff_p long    0
28694 12a 00 00 00 00 | cache_start_p   long    0
28698 12b 00 00 00 00 | cache_end_p     long    0
2869c 12c             | if EMUPAD_MAX_PLAYER > 0
2869c 12c             | emupad_out_ptr  long    0
2869c 12c             | end
2869c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
286a0 12d             | 
286a0 12d             | hdev_init_start
286a0 12d             | hdev_port       res     1
286a0 12d             | hdev_port       res     1
286a0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
286a0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
286a0 12d             | kbm_next_datax  res     1
286a0 12d             | kbm_next_datax  res     1
286a0 12d             | hub_intf_num    res     1
286a0 12d             | hub_intf_num    res     1
286a0 12d             | hub_next_datax  res     1
286a0 12d             | hub_next_datax  res     1
286a0 12d             | hub_status_chg  res     1
286a0 12d             | hub_status_chg  res     1
286a0 12d             | hub_port_status res     1
286a0 12d             | hub_port_status res     1
286a0 12d             | if HAVE_MOUSE
286a0 12d             | ms_intf_num     res     1
286a0 12d             | ms_intf_num     res     1
286a0 12d             | ms_in_max_pkt   res     1
286a0 12d             | ms_in_max_pkt   res     1
286a0 12d             | end
286a0 12d             | kb_intf_num     res     1
286a0 12d             | kb_intf_num     res     1
286a0 12d             | kb_interval     res     1
286a0 12d             | kb_interval     res     1
286a0 12d             | kb_in_max_pkt   res     1
286a0 12d             | kb_in_max_pkt   res     1
286a0 12d             | kb_max_index    res     1
286a0 12d             | kb_max_index    res     1
286a0 12d             | kb_led_states   res     1
286a0 12d             | kb_led_states   res     1
286a0 12d             | gp_intf_num     res     1
286a0 12d             | gp_intf_num     res     1
286a0 12d             | gp_interval     res     1
286a0 12d             | gp_interval     res     1
286a0 12d             | gp_max_index    res     1
286a0 12d             | gp_max_index    res     1
286a0 12d             | gp_descr_len    res     1+MAX_DEVICES
286a0 12d             | gp_descr_len    res     1+MAX_DEVICES
286a0 12d             | hdev_init_end
286a0 12d             | 
286a0 12d             | ' Initialized at cog startup:
286a0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
286a0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
286a0 12d             | iframe_ct_new   res     1
286a0 12d             | iframe_ct_new   res     1
286a0 12d             | iframe_ct_base  res     1
286a0 12d             | iframe_ct_base  res     1
286a0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
286a0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
286a0 12d             | 
286a0 12d             | ' This register block is reset to zero when a USB device connects
286a0 12d             | hreg_init_start
286a0 12d             | hstatus         res     1         ' Host status flags
286a0 12d             | hstatus         res     1         ' Host status flags
286a0 12d             | hctwait         res     1         ' Poll-based wait clocks
286a0 12d             | hctwait         res     1         ' Poll-based wait clocks
286a0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
286a0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
286a0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
286a0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
286a0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
286a0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
286a0 12d             | xfer_retry      res     1         ' Control transfer retry count
286a0 12d             | xfer_retry      res     1         ' Control transfer retry count
286a0 12d             | retry           res     1         ' Transaction retry count
286a0 12d             | retry           res     1         ' Transaction retry count
286a0 12d             | utx             res     1         ' Byte to transmit on USB
286a0 12d             | utx             res     1         ' Byte to transmit on USB
286a0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
286a0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
286a0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
286a0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
286a0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
286a0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
286a0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
286a0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
286a0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
286a0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
286a0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
286a0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
286a0 12d             | frame           res     1         ' USB 1ms frame counter value
286a0 12d             | frame           res     1         ' USB 1ms frame counter value
286a0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
286a0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
286a0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
286a0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
286a0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
286a0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
286a0 12d             | crc             res     1         ' Used for CRC16 calculation
286a0 12d             | crc             res     1         ' Used for CRC16 calculation
286a0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
286a0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
286a0 12d             | retval          res     1         ' Global success/fail return parameter
286a0 12d             | retval          res     1         ' Global success/fail return parameter
286a0 12d             | context_retval  res     1         ' Operation contextual return parameter
286a0 12d             | context_retval  res     1         ' Operation contextual return parameter
286a0 12d             | ' Device stuff
286a0 12d             | hdev_id         res     1+MAX_DEVICES
286a0 12d             | hdev_id         res     1+MAX_DEVICES
286a0 12d             | hdev_bcd        res     1
286a0 12d             | hdev_bcd        res     1
286a0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
286a0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
286a0 12d             | ' Keyboard/mouse stuff
286a0 12d             | hctrl_ep_addr   res     1
286a0 12d             | hctrl_ep_addr   res     1
286a0 12d             | hctrl_max_pkt   res     1
286a0 12d             | hctrl_max_pkt   res     1
286a0 12d             | hconfig_base    res     1
286a0 12d             | hconfig_base    res     1
286a0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
286a0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
286a0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
286a0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
286a0 12d             | hdev_class      res     1
286a0 12d             | hdev_class      res     1
286a0 12d             | hdev_subclass   res     1
286a0 12d             | hdev_subclass   res     1
286a0 12d             | hdev_protocol   res     1
286a0 12d             | hdev_protocol   res     1
286a0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
286a0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
286a0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
286a0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
286a0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
286a0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
286a0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
286a0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
286a0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
286a0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
286a0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
286a0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
286a0 12d             | if HAVE_MOUSE
286a0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
286a0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
286a0 12d             | end
286a0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
286a0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
286a0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
286a0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
286a0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
286a0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
286a0 12d             | hdev_out_addr   res     1
286a0 12d             | hdev_out_addr   res     1
286a0 12d             | 
286a0 12d             | if EMUPAD_MAX_PLAYER > 0
286a0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
286a0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
286a0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
286a0 12d             | end
286a0 12d             | 
286a0 12d             | hreg_init_end
286a0 12d             | 
286a0 12d             | hidr_start
286a0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
286a0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
286a0 12d             | hidr_flags      res     1
286a0 12d             | hidr_flags      res     1
286a0 12d             | hidr_axis       res     3
286a0 12d             | hidr_axis       res     3
286a0 12d             | hidr_buttons    res     1
286a0 12d             | hidr_buttons    res     1
286a0 12d             | hidr_hats       res     1
286a0 12d             | hidr_hats       res     1
286a0 12d             | '' Above are actually useful values, 6 longs
286a0 12d             | hidr_id         res     1
286a0 12d             | hidr_id         res     1
286a0 12d             | hidr_state      res     1
286a0 12d             | hidr_state      res     1
286a0 12d             | hidr_size       res     1
286a0 12d             | hidr_size       res     1
286a0 12d             | hidr_count      res     1
286a0 12d             | hidr_count      res     1
286a0 12d             | hidr_offset     res     1
286a0 12d             | hidr_offset     res     1
286a0 12d             | hidr_usage_idx  res     1
286a0 12d             | hidr_usage_idx  res     1
286a0 12d             | hidr_lminmax    res     1
286a0 12d             | hidr_lminmax    res     1
286a0 12d             | hidr_pminmax    res     1
286a0 12d             | hidr_pminmax    res     1
286a0 12d             | hidr_type       res     1
286a0 12d             | hidr_type       res     1
286a0 12d             | hidr_end
286a0 12d             | 
286a0 12d             | ' Variables dependent on the system freqency
286a0 12d             | _var_64_lower_  res     1
286a0 12d             | _var_64_lower_  res     1
286a0 12d             | _var_64_upper_  res     1
286a0 12d             | _var_64_upper_  res     1
286a0 12d             | _12Mbps_        res     1
286a0 12d             | _12Mbps_        res     1
286a0 12d             | _1_5Mbps_       res     1
286a0 12d             | _1_5Mbps_       res     1
286a0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
286a0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
286a0 12d             | _1us_           res     1         ' 1us
286a0 12d             | _1us_           res     1         ' 1us
286a0 12d             | _10us_          res     1         ' 10us
286a0 12d             | _10us_          res     1         ' 10us
286a0 12d             | _33us_          res     1         ' 33us
286a0 12d             | _33us_          res     1         ' 33us
286a0 12d             | _txn_err_       res     1         ' 250us
286a0 12d             | _txn_err_       res     1         ' 250us
286a0 12d             | _500us_         res     1         ' 500us
286a0 12d             | _500us_         res     1         ' 500us
286a0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
286a0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
286a0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
286a0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
286a0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
286a0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
286a0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
286a0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
286a0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
286a0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
286a0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
286a0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
286a0 12d             | _preamble_wait_ res     1
286a0 12d             | _preamble_wait_ res     1
286a0 12d             | _1ms_           res     1         ' 1ms
286a0 12d             | _1ms_           res     1         ' 1ms
286a0 12d             | _2ms_           res     1         ' 2ms
286a0 12d             | _2ms_           res     1         ' 2ms
286a0 12d             | _suspend_wait_  res     1         ' 3ms
286a0 12d             | _suspend_wait_  res     1         ' 3ms
286a0 12d             | _4ms_           res     1         ' 4ms
286a0 12d             | _4ms_           res     1         ' 4ms
286a0 12d             | _xfer_wait_     res     1         ' 5ms
286a0 12d             | _xfer_wait_     res     1         ' 5ms
286a0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
286a0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
286a0 12d             | _reset_hold_    res     1         ' 15ms
286a0 12d             | _reset_hold_    res     1         ' 15ms
286a0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
286a0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
286a0 12d             | _21ms_          res     1         ' 21ms
286a0 12d             | _21ms_          res     1         ' 21ms
286a0 12d             | _100ms_         res     1         ' 100ms
286a0 12d             | _100ms_         res     1         ' 100ms
286a0 12d             | _500ms_         res     1         ' 500ms
286a0 12d             | _500ms_         res     1         ' 500ms
286a0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
286a0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
286a0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
286a0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
286a0 12d             | '------------------------------------------------------------------------------
286a0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
286a0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
286a0 12d             | _usb_d_ls_nco_  res     1
286a0 12d             | _usb_d_ls_nco_  res     1
286a0 12d             | _usb_h_fs_nco_  res     1
286a0 12d             | _usb_h_fs_nco_  res     1
286a0 12d             | _usb_d_fs_nco_  res     1
286a0 12d             | _usb_d_fs_nco_  res     1
286a0 12d             | '------------------------------------------------------------------------------
286a0 12d             | ' Scratch registers
286a0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
286a0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
286a0 12d             | htmp1           res     1
286a0 12d             | htmp1           res     1
286a0 12d             | htmp2           res     1
286a0 12d             | htmp2           res     1
286a0 12d             | htmp3           res     1
286a0 12d             | htmp3           res     1
286a0 12d             | hrep            res     1         ' Repeat count
286a0 12d             | hrep            res     1         ' Repeat count
286a0 12d             | hsave0          res     1         ' Subroutine parameter saves
286a0 12d             | hsave0          res     1         ' Subroutine parameter saves
286a0 12d             | hsave1          res     1
286a0 12d             | hsave1          res     1
286a0 12d             | hsave2          res     1
286a0 12d             | hsave2          res     1
286a0 12d             | isrtmp1         res     1
286a0 12d             | isrtmp1         res     1
286a0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
286a0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
286a0 12d             | hr0             res     1         ' Multi-purpose registers
286a0 12d             | hr0             res     1         ' Multi-purpose registers
286a0 12d             | hr1             res     1
286a0 12d             | hr1             res     1
286a0 12d             | hr2             res     1
286a0 12d             | hr2             res     1
286a0 12d             | hr3             res     1
286a0 12d             | hr3             res     1
286a0 12d             | hpar1           res     1         ' Routine entry/exit parameters
286a0 12d             | hpar1           res     1         ' Routine entry/exit parameters
286a0 12d             | hpar2           res     1
286a0 12d             | hpar2           res     1
286a0 12d             | hpar3           res     1
286a0 12d             | hpar3           res     1
286a0 12d             | hct2            res     1         ' Function response bus turn-around timer
286a0 12d             | hct2            res     1         ' Function response bus turn-around timer
286a0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
286a0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
286a0 12d             | mod_cnt         res     1         ' Used in idle loops
286a0 12d             | mod_cnt         res     1         ' Used in idle loops
286a0 12d             |                 fit     $1F0
286a0 12d             |                 org     $200
286a0 200             | hlut_start
286a0 200             | 
286a0 200             | '------------------------------------------------------------------------------
286a0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
286a0 200             | ' settings to startup defaults.
286a0 200             | '------------------------------------------------------------------------------
286a0 200             | ' On entry:
286a0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
286a0 200             | '------------------------------------------------------------------------------
286a0 200             | set_speed_full
286a0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
286a4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
286a8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
286ac 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
286b0 204             | '                ret                             wcz     ' Restore caller flags on exit
286b0 204             | 
286b0 204             | '------------------------------------------------------------------------------
286b0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
286b0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
286b0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
286b0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
286b0 204             | ' putting the smart pins into reset.
286b0 204             | '------------------------------------------------------------------------------
286b0 204             | ' On entry:
286b0 204             | ' On exit: CZ flags restored to caller states
286b0 204             | '------------------------------------------------------------------------------
286b0 204             | set_speed_low
286b0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
286b4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
286b8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
286bc 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
286c0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
286c4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
286c8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
286cc 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
286d0 20c             | 
286d0 20c             | '------------------------------------------------------------------------------
286d0 20c             | ' Perform configuration stuff required when a device intitially connects.
286d0 20c             | '------------------------------------------------------------------------------
286d0 20c             | ' On entry:
286d0 20c             | ' On exit:
286d0 20c             | '------------------------------------------------------------------------------
286d0 20c             | on_connect
286d0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
286d4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
286d8 20e             | .retry
286d8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
286dc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
286e0 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
286e4 211 00 08 00 FF 
286e8 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
286ec 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
286f0 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
286f4 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
286f8 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
286fc 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
28700 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28704 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
28708 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2870c 21b 4C 03 B0 FD |                 call    #poll_waitx
28710 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
28714 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
28718 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2871c 21f B8 FF 9F FD |                 jmp     #.retry
28720 220             | .get_dev_desc
28720 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
28724 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
28728 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2872c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
28730 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
28734 225 88 FB BF FD |                 call    #reset
28738 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2873c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
28740 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
28744 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
28748 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2874c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
28750 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
28754 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
28758 22e 04 00 00 FF 
2875c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
28760 230 34 FA BF FD |                 call    #calc_crc5
28764 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
28768 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2876c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
28770 234 F7 AD C2 FA |                 rdbyte  total_data, pb
28774 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
28778 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2877c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28780 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
28784 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
28788 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2878c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
28790 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
28794 23d C4 02 B0 FD |                 call    #poll_waitx
28798 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2879c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
287a0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
287a4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
287a8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
287ac 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
287b0 244 2D 00 64 5D |         if_nz   ret
287b4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
287b8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
287bc 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
287c0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
287c4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
287c8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
287cc 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
287d0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
287d4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
287d8 24e 2C FB 9F CD |         if_b    jmp     #host_error
287dc 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
287e0 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
287e4 251 2D EC 63 FD |                 call    pa
287e8 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
287ec 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
287f0 254 2C EC 63 FD |                 jmp     pa
287f4 255             | 
287f4 255             | '------------------------------------------------------------------------------
287f4 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
287f4 255             | ' Status reporting is always in the function-to-host direction.
287f4 255             | '------------------------------------------------------------------------------
287f4 255             | ' On entry:
287f4 255             | '   PTRA - start address of the SETUP data in hub.
287f4 255             | '   PB - start address of the buffer/struct to be written to during the IN data
287f4 255             | '     stage.
287f4 255             | '   ep_addr_pid - device address, endpoint and CRC5.
287f4 255             | ' On exit:
287f4 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
287f4 255             | '     contains the count of data stage bytes actually received, which must
287f4 255             | '     always be <= the count requested.
287f4 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
287f4 255             | '     more specific USB operation error code.
287f4 255             | '------------------------------------------------------------------------------
287f4 255             | control_read
287f4 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
287f8 256 F8 8F 03 F6 |                 mov     hpar2, ptra
287fc 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
28800 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
28804 259             | .xfer_start
28804 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
28808 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2880c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28810 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
28814 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
28818 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2881c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
28820 260 61 00 00 FF 
28824 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
28828 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2882c 263             | .data
2882c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
28830 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
28834 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
28838 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2883c 267             | .nak_retry
2883c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
28840 268             | .in_retry
28840 268 BC F6 BF FD |                 call    #txn_in
28844 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
28848 26a 28 00 90 AD |         if_z    jmp     #.commit
2884c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
28850 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
28854 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
28858 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2885c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
28860 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
28864 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
28868 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2886c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
28870 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
28874 275             | .commit
28874 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
28878 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2887c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
28880 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
28884 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
28888 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2888c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
28890 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
28894 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
28898 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2889c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
288a0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
288a4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
288a8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
288ac 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
288b0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
288b4 285             | .pre_status
288b4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
288b8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
288bc 287 00 B0 06 F6 |                 mov     pkt_data, #0
288c0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
288c4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
288c8 28a 61 00 00 FF 
288cc 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
288d0 28c             | .out_retry
288d0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
288d4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
288d8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
288dc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
288e0 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
288e4 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
288e8 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
288ec 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
288f0 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
288f4 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
288f8 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
288fc 297             | ' I've encountered transfer STALL, even though the data looks correct, and
288fc 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
288fc 297             | ' ControlRead() transfer gets things unstuck most of the time...
288fc 297             | .xfer_retry
288fc 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
28900 298 58 01 B0 FD |                 call    #poll_waitx
28904 299 8C F9 BF FD |                 call    #wait_txn_ok
28908 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2890c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
28910 29c C8 EF 03 F6 |                 mov     pb, hpar3
28914 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
28918 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2891c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
28920 2a0             | 
28920 2a0             | '------------------------------------------------------------------------------
28920 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
28920 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
28920 2a0             | ' the SETUP data struct is filled with the required values.
28920 2a0             | '------------------------------------------------------------------------------
28920 2a0             | ' On entry:
28920 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
28920 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
28920 2a0             | '     stage.
28920 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
28920 2a0             | ' On exit:
28920 2a0             | '   retval - used to convey the success/failure of each stage.
28920 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
28920 2a0             | '     more specific USB operation error code.
28920 2a0             | '------------------------------------------------------------------------------
28920 2a0             | control_write
28920 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
28924 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
28928 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2892c 2a3             | 
2892c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
28930 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
28934 2a5 F7 91 03 F6 |                 mov     hpar3, pb
28938 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2893c 2a7             | .xfer_start
2893c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
28940 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
28944 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
28948 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2894c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
28950 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
28954 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
28958 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2895c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
28960 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
28964 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
28968 2b2             | .data
28968 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2896c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
28970 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
28974 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
28978 2b6             | .out_retry
28978 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2897c 2b7 88 F6 BF FD |                 call    #txn_out
28980 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28984 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
28988 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2898c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
28990 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
28994 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
28998 2be             | .commit
28998 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2899c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
289a0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
289a4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
289a8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
289ac 2c3             | pre_status_in
289ac 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
289b0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
289b4 2c5             | .status_retry
289b4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
289b8 2c6 44 F5 BF FD |                 call    #txn_in
289bc 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
289c0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
289c4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
289c8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
289cc 2cb 2D 00 64 AD |         if_z    ret
289d0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
289d4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
289d8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
289dc 2cf             | '               ret                                     ' Caller must handle transfer retirement
289dc 2cf             | 
289dc 2cf             | '------------------------------------------------------------------------------
289dc 2cf             | ' Execute an IN interrupt transaction.
289dc 2cf             | '------------------------------------------------------------------------------
289dc 2cf             | ' On entry:
289dc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
289dc 2cf             | '   hpar2 - Address of the IN data buffer
289dc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
289dc 2cf             | ' On exit:
289dc 2cf             | '   retval - the result of the operation.
289dc 2cf             | '   hpar3 - the count of IN data bytes actually received.
289dc 2cf             | '------------------------------------------------------------------------------
289dc 2cf             | do_int_in
289dc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
289e0 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
289e4 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
289e8 2d2             | 
289e8 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
289ec 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
289f0 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
289f4 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
289f8 2d6             | .retry
289f8 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
289fc 2d7 00 F5 BF FD |                 call    #txn_in
28a00 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
28a04 2d9 1C 00 90 AD |         if_z    jmp     #.commit
28a08 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
28a0c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
28a10 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
28a14 2dd 54 00 B0 FD |                 call    #retry_wait
28a18 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
28a1c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
28a20 2e0 D4 FF 9F FD |                 jmp     #.retry
28a24 2e1             | .commit
28a24 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
28a28 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
28a2c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
28a30 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
28a34 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
28a38 2e6             | .post_ret
28a38 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
28a3c 2e7             | 
28a3c 2e7             | 
28a3c 2e7             | '------------------------------------------------------------------------------
28a3c 2e7             | ' Resets the downstream hub port to FS
28a3c 2e7             | '------------------------------------------------------------------------------
28a3c 2e7             | dwnstream_reset
28a3c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
28a40 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
28a44 2e9             | 
28a44 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
28a48 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
28a4c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
28a50 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
28a54 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
28a58 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
28a5c 2ef             | 
28a5c 2ef             | '------------------------------------------------------------------------------
28a5c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
28a5c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
28a5c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
28a5c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
28a5c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
28a5c 2ef             | '------------------------------------------------------------------------------
28a5c 2ef             | ' On entry:
28a5c 2ef             | '   hctwait - wait interval in sysclocks.
28a5c 2ef             | ' On exit:
28a5c 2ef             | '------------------------------------------------------------------------------
28a5c 2ef             | poll_waitx
28a5c 2ef 1A 92 63 FD |                 getct   hct2
28a60 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
28a64 2f1             | .wait
28a64 2f1 FF 25 CC FB |                 jnct2   #.wait
28a68 2f2 2D 00 64 FD |                 ret
28a6c 2f3             | 
28a6c 2f3             | '------------------------------------------------------------------------------
28a6c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
28a6c 2f3             | '------------------------------------------------------------------------------
28a6c 2f3             | ' On entry:
28a6c 2f3             | '   retval - transaction response PID or error code.
28a6c 2f3             | ' On exit:
28a6c 2f3             | '------------------------------------------------------------------------------
28a6c 2f3             | retry_wait
28a6c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
28a70 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
28a74 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
28a78 2f6 14 00 90 AD |         if_z    jmp     #.nak
28a7c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
28a80 2f8 D8 FF BF FD |                 call    #poll_waitx
28a84 2f9             | .dec
28a84 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
28a88 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
28a8c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
28a90 2fc             | .nak
28a90 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
28a94 2fd C4 FF BF FD |                 call    #poll_waitx
28a98 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
28a9c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
28aa0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
28aa4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
28aa8 302 2D 00 64 FD |                 ret
28aac 303             | 
28aac 303             | host_reset
28aac 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
28ab0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
28ab4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
28ab4 305 BD 01 05 FF 
28ab8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
28abc 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
28ac0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
28ac4 309             | ' Check to see if the system clock has been changed.
28ac4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
28ac8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
28acc 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
28ad0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
28ad4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
28ad8 30e 40 46 62 FD |                 dirl    dp
28adc 30f             | 
28adc 30f 28 02 64 FD |                 setq    #1
28ae0 310 80 00 80 FF 
28ae4 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
28ae8 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
28aec 313             | .enable
28aec 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
28af0 314 41 46 62 FD |                 dirh    dp
28af4 315 1F 36 63 FD |                 waitx   _1us_
28af8 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
28afc 317             | 
28afc 317             |                 ' Handle Port protection enable and startup delay
28afc 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
28b00 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
28b04 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
28b08 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
28b0c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
28b10 31c             | 
28b10 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
28b14 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
28b18 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
28b1c 31f 00 00 04 F6 |                 mov     0-0, #0
28b20 320             | .regloop
28b20 320             | 
28b20 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
28b20 320             | 
28b20 320             | discon_entry
28b20 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
28b24 321             | 
28b24 321             |               
28b24 321             |         if HAVE_HIDPAD
28b24 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
28b28 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
28b2c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
28b30 324 F7 01 68 FC |                 wrlong  #0,pb
28b34 325             |         end
28b34 325             |         if EMUPAD_MAX_PLAYER > 0
28b34 325             |         end
28b34 325             | 
28b34 325             |                 ' Fall through to disconnected loop
28b34 325             | 
28b34 325             | '-----------------------------------------------------------------------------------------------------------------
28b34 325             | ' Device connect handling (Section 7.1.7.3).
28b34 325             | '-----------------------------------------------------------------------------------------------------------------
28b34 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
28b34 325             | ' device to connect (Section 7.1.7.3).
28b34 325             | '-----------------------------------------------------------------------------------------------------------------
28b34 325             | disconnected
28b34 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
28b38 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
28b3c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
28b40 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
28b44 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
28b48 32a             |         if ACTIVITY_LED >= 0
28b48 32a             |         end
28b48 32a 22 A7 82 FA |                 rqpin   urx, dm
28b4c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
28b50 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
28b54 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
28b58 32e             | .se1_test
28b58 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
28b5c 32f FC FE BF FD |                 call    #poll_waitx
28b60 330 22 A7 82 FA |                 rqpin   urx, dm
28b64 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
28b68 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
28b6c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
28b70 334             | .se1            'SE1 is a fatal error condition
28b70 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
28b74 335 E4 FE BF FD |                 call    #poll_waitx
28b78 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
28b7c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
28b80 338             | .connect_test                                           ' Test lines until stable J/K state seen
28b80 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
28b84 339 22 A7 82 FA |                 rqpin   urx, dm
28b88 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
28b8c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
28b90 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
28b94 33d             | connected
28b94 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
28b98 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
28b9c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
28ba0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
28ba4 341             | .set_pulse
28ba4 341 1A 64 63 FD |                 getct   _pulse_time_
28ba8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
28bac 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
28bac 343             | ' of 1ms and make a correction, if necessary.
28bac 343             | '                mov     htmp, _1ms_
28bac 343             | '                subs    htmp, iframe_delta
28bac 343             | '                adds    _frame1ms_clks_, htmp
28bac 343             | '                debug(udec(_frame1ms_clks_))
28bac 343             | 
28bac 343             |                 ' Fall through to idle/processing loop
28bac 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
28bb0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
28bb4 345             | 
28bb4 345             | hidle
28bb4 345 22 A7 82 FA |                 rqpin   urx, dm
28bb8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
28bbc 347 98 00 90 CD |         if_c    jmp     #.se0_test
28bc0 348 24 06 70 FD |                 pollct3                         wc
28bc4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
28bc8 34a 1A 94 63 FD |                 getct   hct3
28bcc 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
28bd0 34c             | 
28bd0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
28bd4 34d 00 70 E3 F8 |                 getbyte htmp
28bd8 34e             | 
28bd8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
28bdc 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
28be0 350 40 00 90 AD |         if_z    jmp     #.poll
28be4 351             | 
28be4 351             |         if _HAVE_GAMEPAD
28be4 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
28be8 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
28bec 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
28bf0 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
28bf4 355 2C 00 90 AD |         if_z    jmp     #.poll
28bf8 356             |         end
28bf8 356             | 
28bf8 356             |         if HAVE_MOUSE
28bf8 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
28bfc 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
28c00 358 20 00 90 AD |         if_z    jmp     #.poll
28c04 359             |         end
28c04 359             | 
28c04 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
28c08 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
28c0c 35b 14 00 90 AD |         if_z    jmp     #.poll
28c10 35c             | 
28c10 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
28c14 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
28c18 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
28c1c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
28c20 360             |         if HAVE_MOUSE
28c20 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
28c24 361             |         else
28c24 361             |         end
28c24 361             | 
28c24 361             | .poll
28c24 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
28c28 362 2D EC 63 FD |                 call    pa
28c2c 363             | .skip_poll
28c2c 363             | 
28c2c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
28c30 364             | 
28c30 364             | .nopoll
28c30 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
28c34 365 44 00 90 AD |         if_z    jmp     #hsuspend
28c38 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
28c3c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
28c40 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
28c44 369 1A 84 63 FD |                 getct   hr0
28c48 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
28c4c 36b             |         if ACTIVITY_LED >= 0
28c4c 36b             |         end
28c4c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
28c50 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
28c54 36d 5C FF 9F FD |                 jmp     #hidle
28c58 36e             | ' Check for extended SE0 state on the bus
28c58 36e             | .se0_test
28c58 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
28c5c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
28c60 370 22 A7 82 FA |                 rqpin   urx, dm
28c64 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
28c68 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
28c6c 373 24 F6 BF FD |                 call    #wait_txn_ok
28c70 374 00 00 80 FF 
28c74 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
28c78 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
28c78 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
28c7c 377             | 
28c7c 377             | hsuspend
28c7c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
28c80 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
28c84 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
28c88 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
28c8c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
28c90 37c 00 96 07 F6 |                 mov     mod_cnt, #0
28c94 37d             | 
28c94 37d             |                 ' Fall through to resume wait loop
28c94 37d             | 
28c94 37d             | hwait_resume
28c94 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
28c98 37e 02 86 47 F0 |                 shr     hr1, #2
28c9c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
28ca0 380             |         if ACTIVITY_LED >= 0
28ca0 380             |         end
28ca0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
28ca4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
28ca8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
28cac 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
28cb0 384 18 00 90 AD |         if_z    jmp     #.resume
28cb4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
28cb8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
28cbc 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
28cc0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
28cc4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
28cc8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
28ccc 38b             | .resume
28ccc 38b 22 05 28 FC |                 wypin   #OUT_K, dm
28cd0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
28cd4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
28cd8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
28cdc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
28ce0 390 1F 70 63 FD |                 waitx   htmp
28ce4 391 22 07 28 FC |                 wypin   #OUT_J, dm
28ce8 392 01 70 47 F0 |                 shr     htmp, #1
28cec 393 1F 70 63 FD |                 waitx   htmp
28cf0 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
28cf4 395 1A 92 62 FD |                 getct   iframe_ct_base
28cf8 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
28cfc 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
28d00 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
28d04 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
28d08 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
28d0c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
28d10 39c             | 
28d10 39c             | '------------------------------------------------------------------------------
28d10 39c             | ' Send preamble to enable low-speed HUB ports
28d10 39c             | '------------------------------------------------------------------------------
28d10 39c             | ' On entry:
28d10 39c             | ' On exit:
28d10 39c             | '   USB baud rate set to low-speed
28d10 39c             | '------------------------------------------------------------------------------
28d10 39c             | utx_pre
28d10 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
28d14 39d 40 46 62 FD |                 dirl    dp
28d18 39e 28 02 64 FD |                 setq    #1
28d1c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
28d20 3a0 58 44 62 FD |                 drvl    dm
28d24 3a1 59 46 62 FD |                 drvh    dp
28d28 3a2             | 
28d28 3a2 1E 00 00 FF 
28d2c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
28d30 3a4             | 
28d30 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
28d34 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
28d38 3a6 28 02 64 3D |         if_nc   setq    #1
28d3c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
28d40 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
28d44 3a9             | .l1
28d44 3a9             | 
28d44 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
28d48 3aa 40 46 62 FD |                 dirl    dp
28d4c 3ab 28 02 64 FD |                 setq    #1
28d50 3ac 80 00 80 FF 
28d54 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
28d58 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
28d5c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
28d60 3b0 41 46 62 FD |                 dirh    dp
28d64 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
28d68 3b2             | 
28d68 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
28d6c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
28d70 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
28d74 3b5             | 
28d74 3b5             | hlut_end
28d74 3b5             |                 fit     $400
28d74 3b5             |                 orgh
28d74                 | if OVERLAP_MEMORY
28d74                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
28d74                 | end
28d74                 | '------------------------------------------------------------------------------
28d74                 | ' Routines called from cog space.
28d74                 | '------------------------------------------------------------------------------
28d74                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
28d74                 | '------------------------------------------------------------------------------
28d74                 | 
28d74                 | '------------------------------------------------------------------------------
28d74                 | ' USB host cog initialization.
28d74                 | '------------------------------------------------------------------------------
28d74                 | usb_host_init
28d74                 |                 ' Initialize buffer pointers
28d74                 |         if OVERLAP_MEMORY
28d74                 |         else
28d74     40 15 B0 FE |                 loc     pb, #hid_descr
28d78                 |         end
28d78     F7 4B 02 F6 |                 mov     hid_descr_p, pb
28d7c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
28d7c                 |                 {
28d7c                 |                 }
28d7c                 |         
28d7c                 |                 {
28d7c                 |                 }
28d7c                 |                 'loc     pb,#hkbd_report
28d7c                 |                 'mov     hkbd_report_p,pb
28d7c                 | 
28d7c     08 1D B0 FE |                 loc     pb, #hub_descr
28d80     F7 4D 02 F6 |                 mov     hub_descr_p, pb
28d84     1D 1D B0 FE |                 loc     pb, #urx_buff
28d88     F7 4F 02 F6 |                 mov     urx_buff_p, pb
28d8c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
28d90     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
28d94     9F 1D B0 FE |                 loc     pb, #con_desc_buff
28d98     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
28d9c     18 15 B0 FE |                 loc     pb, #usb_cache_start
28da0     F7 55 02 F6 |                 mov     cache_start_p, pb
28da4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
28da8     F7 57 02 F6 |                 mov     cache_end_p, pb
28dac                 | 
28dac                 |         if ERROR_LED >= 0
28dac                 |         end
28dac                 | 
28dac                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
28dac                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
28dac                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
28dac                 | ' Configure and enable the Serial Host USB port.
28dac     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
28db0                 | 
28db0                 | '------------------------------------------------------------------------------
28db0                 | ' Timing calculations happen before any interrupt(s) are enabled.
28db0                 | '------------------------------------------------------------------------------
28db0                 | ' On entry:
28db0                 | '   htmp - current CLKFREQ value.
28db0                 | '------------------------------------------------------------------------------
28db0                 | hinit_usb_timings
28db0                 | '                getct   htmp2
28db0     B8 59 02 F6 |                 mov     save_sysclk, htmp
28db4     8D 5B 80 FF 
28db8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
28dbc     18 30 63 FD |                 getqx   _12Mbps_
28dc0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
28dc4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
28dc8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
28dcc     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
28dd0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
28dd4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
28dd8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
28ddc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
28de0     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
28de4     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
28de8     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
28dec     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
28df0     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
28df4     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
28df8     80 00 00 FF 
28dfc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
28e00     18 2C 63 FD |                 getqx   _var_64_lower_
28e04     19 2E 63 FD |                 getqy   _var_64_upper_
28e08     28 2C 63 FD |                 setq    _var_64_lower_
28e0c     65 CD 1D FF 
28e10     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
28e14     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
28e18     01 00 00 FF 
28e1c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
28e20     18 2C 63 FD |                 getqx   _var_64_lower_
28e24     19 2E 63 FD |                 getqy   _var_64_upper_
28e28     28 2C 63 FD |                 setq    _var_64_lower_
28e2c     A1 07 00 FF 
28e30     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
28e34     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
28e38     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
28e3c     09 36 57 F0 |                 shr     _1us_, #9               wc
28e40     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
28e44     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
28e48     18 38 63 FD |                 getqx   _10us_
28e4c     09 38 57 F0 |                 shr     _10us_, #9              wc
28e50     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
28e54     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
28e58     18 3A 63 FD |                 getqx   _33us_
28e5c     09 3A 57 F0 |                 shr     _33us_, #9              wc
28e60     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
28e64     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
28e68     18 3C 63 FD |                 getqx   _txn_err_
28e6c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
28e70     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
28e74     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
28e78     18 3E 63 FD |                 getqx   _500us_
28e7c     09 3E 57 F0 |                 shr     _500us_, #9             wc
28e80     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
28e84     01 00 00 FF 
28e88     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
28e8c     18 40 63 FD |                 getqx   _txn_ok_ls_
28e90     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
28e94     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
28e98     01 00 00 FF 
28e9c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
28ea0     18 42 63 FD |                 getqx   _txn_ok_fs_
28ea4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
28ea8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
28eac     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
28eb0     05 00 00 FF 
28eb4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
28eb8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
28ebc     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
28ec0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
28ec4     1C 00 00 FF 
28ec8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
28ecc     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
28ed0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
28ed4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
28ed8     00 00 00 FF 
28edc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
28ee0     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
28ee4     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
28ee8     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
28eec     04 00 00 FF 
28ef0     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
28ef4     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
28ef8     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
28efc     8D 5B 00 FF 
28f00     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
28f04     18 4C 63 FD |                 getqx   _preamble_wait_
28f08     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
28f0c     01 00 00 FF 
28f10     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
28f14     18 2C 63 FD |                 getqx   _var_64_lower_
28f18     19 2E 63 FD |                 getqy   _var_64_upper_
28f1c     28 2C 63 FD |                 setq    _var_64_lower_
28f20     01 00 00 FF 
28f24     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
28f28     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
28f2c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
28f30     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
28f34     FF FF 7F FF 
28f38     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
28f3c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
28f40     A7 51 03 F6 |                 mov     _2ms_, _1ms_
28f44     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
28f48     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
28f4c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
28f50     A7 55 03 F6 |                 mov     _4ms_, _1ms_
28f54     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
28f58     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
28f5c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
28f60     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
28f64     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
28f68     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
28f6c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
28f70     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
28f74     A7 59 03 F6 |                 mov     _8ms_, _1ms_
28f78     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
28f7c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
28f80     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
28f84     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
28f88     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
28f8c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
28f90     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
28f94     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
28f98     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
28f9c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
28fa0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
28fa4                 | '        _ret_   mov     _1sec_, save_sysclk
28fa4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
28fa4                 | '                ret
28fa4                 | {
28fa4                 | }
28fa4                 | 
28fa4                 | '------------------------------------------------------------------------------
28fa4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
28fa4                 | ' one. If it is, start the task progression that will configure the device for
28fa4                 | ' use.
28fa4                 | '------------------------------------------------------------------------------
28fa4                 | ' On entry:
28fa4                 | '   hconfig_base - start address of the cached config descriptor chain.
28fa4                 | ' On exit:
28fa4                 | '------------------------------------------------------------------------------
28fa4                 | hparse_con_desc
28fa4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
28fa8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
28fac     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
28fb0     4E 70 FF F9 |                 movbyts htmp,#%%1032
28fb4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
28fb8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
28fb8                 | 
28fb8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
28fbc     6E ED 03 F1 |                 add     pa, hconfig_base
28fc0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
28fc4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
28fc4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
28fc4                 | ' that defines a keyboard and/or mouse.
28fc4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
28fc8                 | .next_intf
28fc8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
28fcc     BC 01 90 3D |         if_ae   jmp     #hset_config
28fd0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
28fd4     75 F3 03 F1 |                 add     ptrb, hnext_desc
28fd8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
28fdc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
28fe0     0C 00 90 AD |         if_z    jmp     #.intf
28fe4     80 71 C7 FA |                 rdbyte  htmp, ptrb
28fe8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
28fec     D8 FF 9F FD |                 jmp     #.next_intf
28ff0                 | .intf
28ff0     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
28ff4     00 90 07 F6 |                 mov     hpar3, #0
28ff8     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
28ffc     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
29000     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
29004     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
29008                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
29008                 | 
29008                 | .endp
29008     80 71 C7 FA |                 rdbyte  htmp, ptrb
2900c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
29010     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
29014     78 00 90 3D |         if_ae   jmp     #.get_device
29018     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2901c     75 F3 03 F1 |                 add     ptrb, hnext_desc
29020     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
29024     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
29028     64 00 90 AD |         if_z    jmp     #.get_device
2902c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
29030     04 00 90 AD |         if_z    jmp     #.get_ep
29034     D0 FF 9F FD |                 jmp     #.endp
29038                 | .get_ep
29038     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2903c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
29040     0F 86 67 F0 |                 shl     hr1, #8 + 7
29044     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
29048     3F 00 00 FF 
2904c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
29050     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
29054     00 8E 0F F2 |                 cmp     hpar2, #0               wz
29058     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2905c     00 90 0F F2 |                 cmp     hpar3, #0               wz
29060     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
29064     A0 FF 9F FD |                 jmp     #.endp
29068                 | .in_ep
29068     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2906c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
29070                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
29070     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
29074     C2 89 DB F8 |                 setbyte hr2, hr0, #3
29078     8C FF 9F FD |                 jmp     #.endp
2907c                 | .out_ep
2907c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
29080     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
29084                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
29084     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
29088     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2908c     78 FF 9F FD |                 jmp     #.endp
29090                 | 
29090                 | .get_device
29090     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
29094     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
29098     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2909c     68 00 90 AD |         if_z    jmp     #.gamepad
290a0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
290a4     AC 00 90 AD |         if_z    jmp     #.hub
290a8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
290ac     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
290b0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
290b4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
290b8     4C 00 90 AD |         if_z    jmp     #.gamepad
290bc     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
290c0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
290c4                 | .keyboard
290c4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
290c8                 |         if HAVE_MOUSE
290c8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
290cc                 |         else
290cc                 |         end
290cc     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
290d0     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
290d4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
290d8     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
290dc     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
290e0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
290e4                 |                 'debug(udec(kb_intf_num))
290e4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
290e4     E0 FE 9F FD |                 jmp     #.next_intf
290e8                 | if HAVE_MOUSE
290e8                 | .mouse
290e8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
290ec     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
290f0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
290f4     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
290f8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
290fc                 |                 'getbyte ms_interval, hr2, #3
290fc     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
29100     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
29104                 |                 'debug(udec(kb_intf_num))
29104                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
29104     C0 FE 9F FD |                 jmp     #.next_intf
29108                 | end
29108                 | .gamepad
29108     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2910c     C7 71 63 F5 |                 xor     htmp, hpar2
29110     3F 00 00 FF 
29114     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
29118     AC FE 9F AD |         if_z    jmp     #.next_intf
2911c                 |         if HAVE_MOUSE
2911c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
29120     C7 71 63 F5 |                 xor     htmp, hpar2
29124     3F 00 00 FF 
29128     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2912c     98 FE 9F AD |         if_z    jmp     #.next_intf
29130                 |         end
29130     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
29134     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
29138     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2913c                 | 
2913c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
29140     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
29144     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
29148     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2914c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
29150                 |                 'debug(udec(gp_intf_num))
29150                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
29150     74 FE 9F FD |                 jmp     #.next_intf
29154                 | .hub
29154     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
29158     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2915c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
29160     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
29164     60 FE 9F 5D |         if_nz   jmp     #.next_intf
29168     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2916c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
29170     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
29174     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
29178     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2917c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
29180     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
29184     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
29188                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
29188     3C FE 9F FD |                 jmp     #.next_intf
2918c                 | 
2918c                 | '------------------------------------------------------------------------------
2918c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2918c                 | ' it according to its function, or functions. In the case of this boot protocol
2918c                 | ' keyboard/mouse class driver:
2918c                 | ' - SetConfiguration(config_num)
2918c                 | ' - SetProtocol(boot)
2918c                 | ' - SetIdle(indefinite)
2918c                 | ' - Enter the device interrupt IN polling task stage.
2918c                 | '------------------------------------------------------------------------------
2918c                 | ' On entry:
2918c                 | ' On exit:
2918c                 | '------------------------------------------------------------------------------
2918c                 | hset_config
2918c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2918c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2918c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
29190     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
29194     00 00 0C F2 |                 cmp     0-0, #0                 wz
29198     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2919c                 |         if HAVE_MOUSE
2919c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
291a0                 |         end
291a0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
291a4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
291a8                 | .set_config
291a8     6C 0E D0 FE |                 loc     ptra, #set_config
291ac     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
291b0     6E ED 03 F1 |                 add     pa, hconfig_base
291b4     F6 8D C3 FA |                 rdbyte  hpar1, pa
291b8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
291bc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
291c0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
291c4     A0 02 A0 FD |                 call    #control_write
291c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
291cc     2D 00 64 5D |         if_nz   ret
291d0                 | .kbd_config
291d0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
291d4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
291d8                 | 
291d8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
291dc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
291e0     3F 00 00 FF 
291e4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
291e8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
291ec                 | 
291ec     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
291f0     34 0E D0 FE |                 loc     ptra, #set_protocol
291f4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
291f8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
291fc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
29200     A0 02 A0 FD |                 call    #control_write
29204     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29208     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2920c     E4 02 90 5D |         if_nz   jmp     #.notify_client
29210     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
29214     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
29218     30 03 B0 FD |                 call    #hset_idle
2921c                 |                 'cmp     retval, #PID_ACK        wz
2921c                 |         'if_nz   mov     hkbd_ep_addr, #0
2921c                 |         'if_nz   jmp     #.notify_client
2921c     A8 99 02 F6 |                 mov     hctwait, _2ms_
29220     EF 02 A0 FD |                 call    #poll_waitx
29224     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
29228     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2922c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
29230     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
29234     2C 03 B0 FD |                 call    #hset_kbdled_report
29238     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2923c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
29240     B0 02 90 5D |         if_nz   jmp     #.notify_client
29244     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
29248     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2924c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
29250     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
29254     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
29258     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2925c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
29260     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
29264     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
29268     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2926c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
29270                 |         if !!HAVE_MOUSE
29270                 |         end
29270                 | 
29270                 | .mouse_config
29270                 | if HAVE_MOUSE
29270     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
29274     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
29278     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2927c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
29280     3F 00 00 FF 
29284     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
29288     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2928c                 | 
2928c                 |                 debug("mouse passed addr check")
2928c                 | 
2928c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
29290     00 00 80 FF 
29294     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
29298     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2929c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
292a0     55 02 A0 FD |                 call    #control_read
292a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
292a8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
292ac     44 02 90 5D |         if_nz   jmp     #.notify_client
292b0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
292b4     56 01 00 F6 |                 mov     0-0, total_data
292b8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
292bc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
292bc                 | 
292bc     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
292c0     64 0D D0 FE |                 loc     ptra, #set_protocol
292c4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
292c8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
292cc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
292d0     A0 02 A0 FD |                 call    #control_write
292d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
292d8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
292dc     14 02 90 5D |         if_nz   jmp     #.notify_client
292e0                 |                 debug("mouse passed SetProtocol")
292e0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
292e4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
292e8     60 02 B0 FD |                 call    #hset_idle
292ec                 |                 'cmp     retval, #PID_ACK        wz
292ec                 |         'if_nz   mov     hmouse_ep_addr, #0
292ec                 |         'if_nz   jmp     #.notify_client
292ec                 |                 debug("mouse passed SetIdle")
292ec     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
292f0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
292f4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
292f8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
292fc     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
29300     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
29304     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
29308     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2930c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
29310     3F 00 00 FF 
29314     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
29318     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2931c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
29320     D0 01 90 FD |                 jmp     #.notify_client
29324                 | end
29324                 | .gamepad_config
29324                 | if _HAVE_GAMEPAD
29324     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
29328     00 00 0C F2 |                 cmp     0-0, #0                 wz
2932c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
29330     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
29334     00 70 03 F6 |                 mov     htmp, 0-0
29338     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2933c     3F 00 00 FF 
29340     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
29344     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
29348                 | 
29348     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2934c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
29350     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
29354     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
29358     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2935c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
29360     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
29364     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
29368     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2936c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
29370     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
29374     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
29378     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2937c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
29380                 | 
29380                 |                 if EMUPAD_MAX_PLAYER > 0
29380                 |                 
29380                 | .rule_loop           
29380                 |                 end
29380                 | 
29380     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
29384     5C 00 90 AD |         if_e    jmp     #.xinput
29388     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2938c     00 70 03 F6 |                 mov     htmp,0-0
29390     01 A6 02 FF 
29394     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
29398     7C 00 90 AD |         if_e    jmp     #.ps3
2939c                 | 
2939c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
293a0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
293a4     00 00 80 5F 
293a8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
293ac     03 00 80 AF 
293b0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
293b4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
293b8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
293bc     55 02 A0 FD |                 call    #control_read
293c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
293c4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
293c8     00 00 04 56 |         if_nz   mov     0-0, #0
293cc     24 01 90 5D |         if_nz   jmp     #.notify_client
293d0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
293d4     56 01 00 F6 |                 mov     0-0, total_data
293d8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
293dc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
293dc                 | 
293dc     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
293e0     10 01 90 FD |                 jmp     #.notify_client
293e4                 | .xinput
293e4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
293e8     2D EF 03 F6 |                 mov     pb,hdev_port
293ec     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
293f0     03 EE 27 F3 |                 fle     pb,#3
293f4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
293f8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
293fc                 | 
293fc     03 B0 06 F6 |                 mov     pkt_data, #3
29400     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
29404     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
29408     5A 00 A0 FD |                 call    #txn_out
2940c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
29410                 | 
29410     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
29414     DC 00 90 FD |                 jmp     #.notify_client
29418                 | .ps3
29418     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2941c     2D EF 03 F6 |                 mov     pb,hdev_port
29420     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
29424     04 EE 27 F3 |                 fle     pb,#4
29428     F7 EF C3 F9 |                 decod   pb
2942c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
29430                 | 
29430     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
29434     00 0C D0 FE |                 loc     ptra, #set_report
29438     01 00 80 FF 
2943c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
29440     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
29444     03 61 5C FC |                 wrword  #48, ptra[wLength]
29448     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2944c     A0 02 A0 FD |                 call    #control_write
29450                 | 
29450     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
29454     E0 0B D0 FE |                 loc     ptra, #set_report
29458     01 00 80 FF 
2945c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
29460     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
29464     03 09 5C FC |                 wrword  #4, ptra[wLength]
29468     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2946c     A0 02 A0 FD |                 call    #control_write
29470     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
29474     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
29478     00 00 04 56 |         if_nz   mov     0-0, #0
2947c     74 00 90 5D |         if_nz   jmp     #.notify_client
29480                 | 
29480     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
29484     6C 00 90 FD |                 jmp     #.notify_client
29488                 | end
29488                 | 
29488                 | .hub_config
29488     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2948c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
29490     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
29494     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
29498     3F 00 00 FF 
2949c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
294a0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
294a4                 | 
294a4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
294a8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
294ac     26 EF 03 F6 |                 mov     pb, hub_descr_p
294b0     55 02 A0 FD |                 call    #control_read
294b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
294b8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
294bc     34 00 90 5D |         if_nz   jmp     #.notify_client
294c0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
294c0                 | 
294c0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
294c4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
294c8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
294cc                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
294cc                 | .pwr_loop
294cc     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
294d0     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
294d4     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
294d8     A0 02 A0 FD |                 call    #control_write
294dc     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
294e0                 | 
294e0     B1 99 02 F6 |                 mov     hctwait, _500ms_
294e4     B0 99 02 F1 |                 add     hctwait, _100ms_
294e8     EF 02 A0 FD |                 call    #poll_waitx
294ec                 | 
294ec     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
294f0     00 00 90 FD |                 jmp     #.notify_client
294f4                 | 
294f4                 | .notify_client
294f4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
294f8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
294fc                 |                 debug(uhex_long(hdev_type,hdev_type+1))
294fc                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
294fc     2D 00 64 FD |                 ret
29500                 | 
29500                 | '------------------------------------------------------------------------------
29500                 | ' Initialize the keyboard/mouse data area to start-up values.
29500                 | '------------------------------------------------------------------------------
29500                 | ' On entry:
29500                 | ' On exit:
29500                 | '------------------------------------------------------------------------------
29500                 | init_kbdm_data
29500     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
29504     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
29508                 | 
29508     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2950c     2B ED 03 F6 |                 mov     pa, cache_end_p
29510                 | .loop
29510     61 01 4C FC |                 wrbyte  #0, ptra++
29514     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
29518     F4 FF 9F CD |         if_b    jmp     #.loop
2951c                 |         
2951c                 |         if EMUPAD_MAX_PLAYER > 0
2951c                 |         end
2951c                 | 
2951c                 | 
2951c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
29520                 | .regloop
29520     00 EC 8F F9 |                 altd    pa
29524     00 00 04 F6 |                 mov     0-0, #0
29528     01 EC 07 F1 |                 add     pa, #1
2952c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
29530     EC FF 9F 5D |         if_nz   jmp     #.regloop
29534                 | 
29534     E1 E1 61 FF 
29538     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2953c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
29540     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
29544     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
29548                 | 
29548     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2954c                 | 
2954c                 | '------------------------------------------------------------------------------
2954c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2954c                 | ' function.
2954c                 | '------------------------------------------------------------------------------
2954c                 | ' On entry:
2954c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2954c                 | '   hpar2 - index number of the target interface.
2954c                 | ' On exit:
2954c                 | '------------------------------------------------------------------------------
2954c                 | hset_idle
2954c     A8 99 02 F6 |                 mov     hctwait, _2ms_
29550     EF 02 A0 FD |                 call    #poll_waitx
29554     D8 0A D0 FE |                 loc     ptra, #set_idle
29558     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2955c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
29560     A0 02 80 FD |                 jmp     #control_write
29564                 | 
29564                 | '------------------------------------------------------------------------------
29564                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
29564                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
29564                 | '------------------------------------------------------------------------------
29564                 | ' On entry:
29564                 | '   ep_addr_pid - device address and enpoint for the request.
29564                 | ' On exit:
29564                 | '   retval - transaction result.
29564                 | '------------------------------------------------------------------------------
29564                 | hset_kbdled_report
29564     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
29568     CC 0A D0 FE |                 loc     ptra, #set_report
2956c     01 00 80 FF 
29570     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
29574     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
29578     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2957c     27 EF 03 F6 |                 mov     pb, urx_buff_p
29580     F7 77 42 FC |                 wrbyte  kb_led_states, pb
29584     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
29588                 | 
29588                 | '------------------------------------------------------------------------------
29588                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
29588                 | '------------------------------------------------------------------------------
29588                 | ' On entry:
29588                 | ' On exit:
29588                 | '------------------------------------------------------------------------------
29588                 | hget_kbd_in_report
29588     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2958c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
29590     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
29594     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
29598     CF 02 A0 FD |                 call    #do_int_in
2959c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
295a0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
295a4                 | 
295a4     00 90 0F F2 |                 cmp     hpar3, #0               wz
295a8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
295ac                 | 
295ac     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
295b0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
295b4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
295b8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
295bc                 | 
295bc     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
295c0     18 00 B0 FD |                 call    #hkbd_compare
295c4                 |         if EMUPAD_MAX_PLAYER > 0
295c4                 |         end
295c4                 | 
295c4                 | .led_check
295c4     3B 71 03 F6 |                 mov     htmp, kb_led_states
295c8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
295cc     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
295d0     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
295d4     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
295d8     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
295dc                 | 
295dc                 | '------------------------------------------------------------------------------
295dc                 | ' Compare current and previous keyboard data buffers for keypress changes.
295dc                 | '------------------------------------------------------------------------------
295dc                 | hkbd_compare
295dc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
295e0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
295e4     61 73 07 FB |                 rdlong  htmp1, ptra++
295e8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
295ec     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
295f0     61 73 07 FB |                 rdlong  htmp1, ptra++
295f4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
295f8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
295fc     2D 00 64 AD |         if_z    ret
29600                 | 
29600     B4 13 D0 FE |                 loc     ptra, #hkbd_report
29604                 | 
29604                 |                 ' Handle modifiers
29604     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
29608     00 87 C7 FA |                 rdbyte  hr1, ptra
2960c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
29610     63 86 63 FD |                 mergew  hr1
29614     08 EC 07 F6 |                 mov     pa,#8
29618                 | .modloop
29618     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2961c     E8 8C 07 F6 |                 mov     hpar1,#$E8
29620     F6 8D 83 F1 |                 sub     hpar1,pa
29624     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
29628     FB ED 6F FB |                 djnz    pa,#.modloop
2962c                 | 
2962c     6F E0 75 FD | .release        modc    _set    wc
29630                 |                 'alts    hdev_port, #hid_report_p
29630                 |                 'mov     ptra, hid_report_p
29630     02 F0 07 F1 |                 add     ptra, #2
29634     06 EC 07 F6 |                 mov     pa, #6
29638     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2963c     20 00 90 AD |         if_z    jmp     #.rl3
29640     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
29644     02 F2 07 F1 |                 add     ptrb, #2
29648     06 EE 07 F6 |                 mov     pb, #6
2964c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
29650     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
29654     08 00 90 AD |         if_z    jmp     #.rl3
29658     FC EF 6F FB |                 djnz    pb, #.rl2
2965c     68 00 B0 FD |                 call    #hkbd_translate
29660     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
29664                 | 
29664     00 90 07 F6 |                 mov     hpar3, #0
29668     1F 90 27 F4 |                 bith    hpar3, #31
2966c                 | 
2966c     6F 00 74 FD | .press          modc    _clr    wc
29670     27 F1 03 F6 |                 mov     ptra, urx_buff_p
29674     02 F0 07 F1 |                 add     ptra, #2
29678     06 EC 07 F6 |                 mov     pa, #6
2967c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
29680     20 00 90 AD |         if_z    jmp     #.pl3
29684     30 13 F0 FE |                 loc     ptrb, #hkbd_report
29688     02 F2 07 F1 |                 add     ptrb, #2
2968c     06 EE 07 F6 |                 mov     pb, #6
29690     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
29694     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
29698     08 00 90 AD |         if_z    jmp     #.pl3
2969c     FC EF 6F FB |                 djnz    pb, #.pl2
296a0     24 00 B0 FD |                 call    #hkbd_translate
296a4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
296a8                 | 
296a8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
296ac     08 13 F0 FE |                 loc     ptrb, #hkbd_report
296b0     28 02 64 FD |                 setq #1
296b4     61 73 07 FB |                 rdlong  htmp1, ptra++
296b8     28 02 64 FD |                 setq #1
296bc     E1 73 67 FC |                 wrlong  htmp1, ptrb++
296c0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
296c4                 | 
296c4     2D 00 64 FD |                 ret
296c8                 | 
296c8                 | '------------------------------------------------------------------------------
296c8                 | ' Translate keyboard scancode to ASCII
296c8                 | '------------------------------------------------------------------------------
296c8                 | ' On entry:
296c8                 | '   hpar1 - scancode
296c8                 | '   hpar2 - key modifiers state
296c8                 | '       c - pressed (0) or released (1) flag
296c8                 | ' On exit:
296c8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
296c8                 | '               30..17 = unused
296c8                 | '                   18 = scroll-lock state 
296c8                 | '                   17 = caps-lock state
296c8                 | '                   16 = num-lock state 
296c8                 | '                15..8 = key modifiers state
296c8                 | '                 7..0 = scancode
296c8                 | '------------------------------------------------------------------------------
296c8                 | hkbd_translate
296c8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
296cc     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
296d0     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
296d4     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
296d8     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
296dc     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
296e0                 | 
296e0                 |         if EMUPAD_MAX_PLAYER > 0
296e0                 | 
296e0                 |         if EMUPAD_BT0_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT1_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT2_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT3_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT4_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT5_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT6_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT7_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT8_BIT >= 0
296e0                 |         end
296e0                 |         if EMUPAD_BT9_BIT >= 0
296e0                 |         end
296e0                 | 
296e0                 |         end
296e0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
296e4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
296e8     1F 8C 47 F4 |                 bitc    hpar1, #31
296ec                 |         if KEYQUEUE_SIZE > 0
296ec     C4 09 B0 FE |                 loc pb,#keyq_head
296f0     F7 71 E3 FA |                 rdword htmp,pb
296f4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
296f8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
296fc     B8 75 03 F6 |                 mov htmp2,htmp
29700     04 74 07 FA |                 mul htmp2,#4
29704     F7 75 03 F1 |                 add htmp2,pb
29708     02 74 07 F1 |                 add htmp2,#2
2970c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
29710     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
29714     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
29718     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2971c                 |         end
2971c     2D 00 7C FD |                 ret wcz
29720                 | 
29720                 | if HAVE_MOUSE
29720                 | '------------------------------------------------------------------------------
29720                 | ' Execute an IN interrupt transaction to poll for mouse activity.
29720                 | '------------------------------------------------------------------------------
29720                 | ' On entry:
29720                 | ' On exit:
29720                 | '------------------------------------------------------------------------------
29720                 | hget_mouse_in_report
29720     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
29724     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
29728     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2972c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
29730     CF 02 A0 FD |                 call    #do_int_in
29734     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29738     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2973c                 | 
2973c     00 90 0F F2 |                 cmp     hpar3, #0               wz
29740     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
29744                 | 
29744     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
29748     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2974c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
29750     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
29754                 | 
29754     27 F1 03 F6 |                 mov     ptra, urx_buff_p
29758     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2975c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
29760     01 90 87 31 |         if_ae   sub     hpar3, #1
29764                 | 
29764     40 09 90 FE |                 loc     pa, #mouse_limits
29768     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2976c                 | 
2976c                 |                 ' load xacc,yacc,zacc
2976c     28 04 64 FD |                 setq    #3-1
29770     80 87 07 FB |                 rdlong  hr1,ptrb
29774                 |                 ' load limits and outptr
29774     28 04 64 FD |                 setq    #3-1
29778     F6 73 03 FB |                 rdlong  htmp1,pa
2977c                 | 
2977c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
29780     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
29784     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
29788     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2978c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
29790     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
29794     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
29798     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2979c                 |               
2979c                 | 
2979c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
297a0     07 70 67 F7 |                 signx   htmp, #7
297a4     B8 87 03 F1 |                 add     hr1,htmp
297a8     00 72 0F F2 |                 cmp     htmp1,#0 wz
297ac     B9 87 63 53 |         if_ne   fles    hr1,htmp1
297b0     00 86 47 53 |         if_ne   fges    hr1,#0
297b4                 | 
297b4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
297b8     07 70 67 F7 |                 signx   htmp, #7
297bc     B8 89 03 F1 |                 add     hr2,htmp
297c0     00 74 0F F2 |                 cmp     htmp2,#0 wz
297c4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
297c8     00 88 47 53 |         if_ne   fges    hr2,#0
297cc                 |                 
297cc                 | 
297cc     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
297d0     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
297d4     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
297d8     B8 8B 03 A1 |         if_z    add     hr3,htmp
297dc                 | 
297dc     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
297e0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
297e4                 | 
297e4                 |                 ' write back accumulators
297e4     28 04 64 FD |                 setq    #3-1
297e8     80 87 67 FC |                 wrlong  hr1,ptrb
297ec                 |                 ' if outptr set, write X/Y words
297ec     00 76 0F F2 |                 cmp htmp3,#0                    wz
297f0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
297f4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
297f8     2D 00 64 FD |                 ret
297fc                 | end
297fc                 | 
297fc                 | '------------------------------------------------------------------------------
297fc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
297fc                 | '------------------------------------------------------------------------------
297fc                 | ' On entry:
297fc                 | ' On exit:
297fc                 | '------------------------------------------------------------------------------
297fc                 | if _HAVE_GAMEPAD
297fc                 | hget_gp_in_report
297fc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
29800     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
29804                 | 
29804     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
29808     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2980c     00 90 E3 F8 |                 getbyte hpar3
29810     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
29814     CF 02 A0 FD |                 call    #do_int_in
29818     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2981c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
29820                 | 
29820     00 90 0F F2 |                 cmp     hpar3, #0               wz
29824     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
29828                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
29828                 | 
29828     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2982c     00 70 E3 F8 |                 getbyte htmp                            ' |
29830     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
29834     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
29838     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2983c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
29840     B8 01 C0 F8 |                 setbyte htmp                            ' |
29844                 | 
29844                 | ' Note: the following code compares the current and previous reports
29844                 | ' and process the data if there are changes to ease the debug output.
29844                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
29844                 | ' gpPreReport buffer.
29844                 | 
29844                 |                 ' ----- start of block to remove
29844                 |                 {
29844                 |                 }
29844                 |                 ' ----- end of block to remove
29844     F4 04 90 FE |                 loc pa,#hpad_translate
29848     2A EC 63 FD |                 push pa
2984c                 | 
2984c                 |                 ' FALL THROUGH !!!!
2984c                 | 
2984c                 | '------------------------------------------------------------------------------
2984c                 | ' Decode controller report
2984c                 | '------------------------------------------------------------------------------
2984c                 | hid_decode
2984c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2984c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
29850     00 04 00 FF 
29854     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
29858                 | 
29858     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2985c                 | 
2985c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
29860     00 2A E3 F8 |                 getbyte hidr_type
29864     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
29868     34 02 90 AD |         if_z    jmp     #hpad_xinput
2986c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
29870     1C 03 90 AD |         if_z    jmp     #hpad_ps3
29874     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
29878     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2987c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
29880                 |                 
29880                 | 
29880                 | '------------------------------------------------------------------------------
29880                 | ' Handle HID controller (or mouse now
29880                 | ' On entry:
29880                 | '   ptrb - controller report
29880                 | '------------------------------------------------------------------------------
29880                 | hpad_hid
29880     1B 01 A0 FD |                 call    #get_hid_descr_buffer
29884     F7 F1 03 F6 |                 mov     ptra, pb
29888     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2988c     00 EC 03 F6 |                 mov     pa, 0-0
29890                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
29890     19 2A 3B FF 
29894     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
29898                 | 
29898                 | .next
29898     00 EC 5F F2 |                 cmps    pa, #0      wcz
2989c     2D 00 7C ED |         if_be   ret     wcz
298a0                 | 
298a0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
298a4     01 EC 87 F1 |                 sub     pa, #1
298a8     00 8E 07 F6 |                 mov     hpar2, #0
298ac                 | 
298ac     C6 71 03 F6 |                 mov     htmp, hpar1
298b0     03 70 07 F5 |                 and     htmp, #$03
298b4     01 70 0F F2 |                 cmp     htmp, #1    wz
298b8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
298bc     07 8E 67 A7 |         if_z    signx   hpar2,#7
298c0     01 EC 87 A1 |         if_z    sub     pa, #1
298c4     02 70 0F F2 |                 cmp     htmp, #2    wz
298c8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
298cc     0F 8E 67 A7 |         if_z    signx   hpar2,#15
298d0     02 EC 87 A1 |         if_z    sub     pa, #2
298d4     03 70 0F F2 |                 cmp     htmp, #3    wz
298d8     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
298dc     04 EC 87 A1 |         if_z    sub     pa, #4
298e0                 | 
298e0     FC 8C 07 F5 |                 and     hpar1, #$FC
298e4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
298e4                 | 
298e4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
298e8     0C 01 90 AD |         if_z    jmp     #.report_id
298ec     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
298f0     24 01 90 AD |         if_z    jmp     #.usage_page
298f4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
298f8     2C 01 90 AD |         if_z    jmp     #.usage
298fc     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
29900     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
29904     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
29908     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2990c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
29910     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
29914     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
29918     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2991c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
29920     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
29924     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
29928     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2992c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
29930     64 FF 9F 5D |         if_nz   jmp     #.next
29934                 | 
29934     D8 1D A7 FB |                 tjf     hidr_state,#.next
29938                 | 
29938     03 8E 07 F5 |                 and     hpar2, #$03
2993c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
29940     18 00 90 5D |         if_nz   jmp     #.skip
29944                 | 
29944     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
29948     20 00 90 AD |         if_z    jmp     #.axes
2994c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
29950     5C 00 90 AD |         if_z    jmp     #.hats
29954     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
29958     70 00 90 AD |         if_z    jmp     #.buttons
2995c                 | .skip
2995c     8F 71 03 F6 |                 mov     htmp, hidr_size
29960     90 71 03 FA |                 mul     htmp, hidr_count
29964     B8 23 03 F1 |                 add     hidr_offset, htmp
29968     2C FF 9F FD |                 jmp     #.next
2996c                 | .axes
2996c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2996c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
29970     90 87 03 F6 |                 mov     hr1, hidr_count
29974                 | .l1
29974     91 8D 03 F6 |                 mov     hpar1, hidr_offset
29978     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2997c     04 03 B0 FD |                 call    #hpad_getbits
29980     64 03 B0 FD |                 call    #hpad_normalize
29984     06 84 1F F2 |                 cmp     hr0, #6         wcz
29988     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2998c     00 88 43 C8 |         if_b    getnib  hr2
29990     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
29994     5F 01 20 C9 |         if_b    setword retval
29998     01 84 07 C1 |         if_b    add     hr0, #1
2999c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
299a0     F4 87 6F FB |                 djnz    hr1, #.l1
299a4                 | 
299a4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
299a8     01 1C 07 F6 |                 mov     hidr_state, #1
299ac     E8 FE 9F FD |                 jmp     #.next
299b0                 | .hats
299b0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
299b0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
299b4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
299b8     C8 02 B0 FD |                 call    #hpad_getbits
299bc     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
299c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
299c4     01 1C 07 F6 |                 mov     hidr_state, #1
299c8     90 FF 9F FD |                 jmp     #.skip
299cc                 | .buttons
299cc                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
299cc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
299d0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
299d4     90 8F 03 FA |                 mul     hpar2, hidr_count
299d8     A8 02 B0 FD |                 call    #hpad_getbits
299dc     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
299e0     B8 BF 62 F0 |                 shl     retval, htmp
299e4     5F 17 43 F5 |                 or      hidr_buttons, retval
299e8     90 71 03 F1 |                 add     htmp, hidr_count
299ec     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
299f0     01 1C 07 F6 |                 mov     hidr_state, #1
299f4     64 FF 9F FD |                 jmp     #.skip
299f8                 | .report_id
299f8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
299fc     2D 00 7C 5D |         if_nz   ret     wcz
29a00     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
29a04     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
29a08     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
29a0c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
29a10     01 F2 87 51 |         if_nz   sub     ptrb,#1
29a14     80 FE 9F FD |                 jmp     #.next
29a18                 | .usage_page
29a18     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
29a1c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
29a20     04 1C 07 A6 |         if_z    mov     hidr_state, #4
29a24     70 FE 9F FD |                 jmp     #.next
29a28                 | .usage
29a28     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
29a2c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
29a30     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
29a34     01 1C 07 A6 |         if_z    mov     hidr_state, #1
29a38     5C FE 9F AD |         if_z    jmp     #.next
29a3c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
29a40     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
29a44     01 1C 07 A6 |         if_z    mov     hidr_state, #1
29a48     4C FE 9F AD |         if_z    jmp     #.next
29a4c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
29a50     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
29a54     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
29a58     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
29a5c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
29a60     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
29a64     10 00 90 AD |         if_z    jmp     #.usage_axis
29a68     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
29a6c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
29a70     03 1C 07 A6 |         if_z    mov     hidr_state, #3
29a74     20 FE 9F FD |                 jmp     #.next
29a78                 | .usage_axis
29a78     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
29a7c     18 FE 9F CD |         if_b    jmp     #.next
29a80     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
29a84     C7 01 00 F8 |                 setnib  hpar2
29a88                 | 
29a88     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
29a8c     C7 8F C3 F9 |                 decod   hpar2
29a90     C7 0F 43 F5 |                 or      hidr_flags, hpar2
29a94                 | 
29a94     01 24 07 F1 |                 add     hidr_usage_idx, #1
29a98     02 1C 07 F6 |                 mov     hidr_state, #2
29a9c     F8 FD 9F FD |                 jmp     #.next
29aa0                 | 
29aa0                 | '------------------------------------------------------------------------------
29aa0                 | ' Handle XInput controller
29aa0                 | ' On entry:
29aa0                 | '   ptrb - controller report
29aa0                 | '------------------------------------------------------------------------------
29aa0                 | '   Default implementation translates the report to a pseudo-defacto hid
29aa0                 | '   standard and jumps to hpad_translate for actions.
29aa0                 | '   Implementors may take specific actions for this kind of controller.
29aa0                 | '------------------------------------------------------------------------------
29aa0                 | hpad_xinput
29aa0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
29aa4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
29aa8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
29aac     14 70 0F F2 |                 cmp     htmp, #$14      wz
29ab0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
29ab4                 | 
29ab4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
29ab4                 | 
29ab4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
29ab8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
29abc                 | 
29abc     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
29ac0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
29ac4     5F BF 22 F6 |                 not     retval
29ac8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
29acc     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
29ad0     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
29ad4     5F BF 22 F6 |                 not     retval
29ad8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
29adc                 | 
29adc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
29ae0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
29ae4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
29ae8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
29aec     F8 01 B0 FD |                 call    #hpad_normalize
29af0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
29af4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
29af8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
29afc     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
29b00     E4 01 B0 FD |                 call    #hpad_normalize
29b04     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
29b08                 | 
29b08     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
29b0c     81 BF E6 FA |                 rdword  retval, ptrb[1]
29b10     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
29b14     00 16 47 F4 |                 bitc    hidr_buttons, #0
29b18     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
29b1c     01 16 47 F4 |                 bitc    hidr_buttons, #1
29b20     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
29b24     02 16 47 F4 |                 bitc    hidr_buttons, #2
29b28     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
29b2c     03 16 47 F4 |                 bitc    hidr_buttons, #3
29b30     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
29b34     04 16 47 F4 |                 bitc    hidr_buttons, #4
29b38     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
29b3c     05 16 47 F4 |                 bitc    hidr_buttons, #5
29b40     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
29b44     08 16 47 F4 |                 bitc    hidr_buttons, #8
29b48     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
29b4c     09 16 47 F4 |                 bitc    hidr_buttons, #9
29b50     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
29b54     0A 16 47 F4 |                 bitc    hidr_buttons, #10
29b58     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
29b5c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
29b60     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
29b64     0C 16 47 F4 |                 bitc    hidr_buttons, #12
29b68                 | 
29b68     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
29b6c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
29b70     7A BB 7A FF 
29b74     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
29b78     F9 FF 7F FF 
29b7c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
29b80     B9 71 5F F9 |                 altgn   htmp, #htmp1
29b84     00 70 43 F8 |                 getnib  htmp
29b88     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
29b8c                 | 
29b8c     AC 01 90 FD |                 jmp     #hpad_translate
29b90                 | 
29b90                 | '------------------------------------------------------------------------------
29b90                 | ' Handle PS3 controller
29b90                 | ' On entry:
29b90                 | '   ptrb - controller report
29b90                 | '------------------------------------------------------------------------------
29b90                 | '   Default implementation translates the report to a pseudo-defacto hid
29b90                 | '   standard and jumps to hpad_translate for actions.
29b90                 | '   Implementors may take specific actions for this kind of controller.
29b90                 | '------------------------------------------------------------------------------
29b90                 | hpad_ps3
29b90     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
29b94     01 70 0F F2 |                 cmp     htmp, #$01      wz
29b98     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
29b9c                 | 
29b9c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
29b9c                 | 
29b9c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
29ba0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
29ba4     40 01 B0 FD |                 call    #hpad_normalize
29ba8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
29bac     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
29bb0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
29bb4     30 01 B0 FD |                 call    #hpad_normalize
29bb8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
29bbc     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
29bc0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
29bc4     20 01 B0 FD |                 call    #hpad_normalize
29bc8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
29bcc     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
29bd0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
29bd4     10 01 B0 FD |                 call    #hpad_normalize
29bd8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
29bdc     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
29be0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
29be4                 | 
29be4     08 8C 07 F6 |                 mov     hpar1, #8
29be8     13 8E 07 F6 |                 mov     hpar2, #19
29bec     94 00 B0 FD |                 call    #hpad_getbits
29bf0                 | 
29bf0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
29bf4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
29bf8     00 16 47 F4 |                 bitc    hidr_buttons, #0
29bfc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
29c00     01 16 47 F4 |                 bitc    hidr_buttons, #1
29c04     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
29c08     02 16 47 F4 |                 bitc    hidr_buttons, #2
29c0c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
29c10     03 16 47 F4 |                 bitc    hidr_buttons, #3
29c14     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
29c18     04 16 47 F4 |                 bitc    hidr_buttons, #4
29c1c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
29c20     05 16 47 F4 |                 bitc    hidr_buttons, #5
29c24     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
29c28     06 16 47 F4 |                 bitc    hidr_buttons, #6
29c2c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
29c30     07 16 47 F4 |                 bitc    hidr_buttons, #7
29c34     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
29c38     08 16 47 F4 |                 bitc    hidr_buttons, #8
29c3c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
29c40     09 16 47 F4 |                 bitc    hidr_buttons, #9
29c44     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
29c48     0A 16 47 F4 |                 bitc    hidr_buttons, #10
29c4c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
29c50     0B 16 47 F4 |                 bitc    hidr_buttons, #11
29c54     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
29c58     0C 16 47 F4 |                 bitc    hidr_buttons, #12
29c5c                 | 
29c5c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
29c60     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
29c64     09 FA 79 FF 
29c68     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
29c6c     FF FA 7F FF 
29c70     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
29c74     B9 71 5F F9 |                 altgn   htmp, #htmp1
29c78     00 70 43 F8 |                 getnib  htmp
29c7c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
29c80                 | 
29c80     B8 00 90 FD |                 jmp     #hpad_translate
29c84                 | 
29c84                 | '------------------------------------------------------------------------------
29c84                 | ' Read bits from report data buffer
29c84                 | '------------------------------------------------------------------------------
29c84                 | ' On entry:
29c84                 | '   PTRB - report buffer
29c84                 | '   hpar1 - start bit
29c84                 | '   hpar2 - number of bits
29c84                 | ' On exit:
29c84                 | '   retval - bits
29c84                 | '------------------------------------------------------------------------------
29c84                 | hpad_getbits
29c84     C6 71 03 F6 |                 mov     htmp, hpar1
29c88     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
29c8c     F9 71 03 F1 |                 add     htmp, ptrb
29c90     B8 BF 02 FB |                 rdlong  retval, htmp
29c94                 | 
29c94     C6 73 03 F6 |                 mov     htmp1, hpar1
29c98     07 72 07 F5 |                 and     htmp1, #$07     ' shift
29c9c     B9 BF 42 F0 |                 shr     retval, htmp1
29ca0                 | 
29ca0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
29ca4     10 00 90 1D |         if_a    jmp     #.l1
29ca8                 | 
29ca8     C7 8F C3 F9 |                 decod   hpar2
29cac     01 8E 87 F1 |                 sub     hpar2, #1
29cb0     C7 BF 02 F5 |                 and     retval, hpar2
29cb4     2D 00 64 FD |                 ret
29cb8                 | .l1
29cb8     FF 7F 00 FF 
29cbc     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
29cc0     03 70 07 F1 |                 add     htmp, #3
29cc4     B8 75 03 FB |                 rdlong  htmp2, htmp
29cc8     18 8E 87 F1 |                 sub     hpar2, #24
29ccc     C7 8F C3 F9 |                 decod   hpar2
29cd0     01 8E 87 F1 |                 sub     hpar2, #1
29cd4     B9 75 43 F0 |                 shr     htmp2, htmp1
29cd8     C7 75 03 F5 |                 and     htmp2, hpar2
29cdc     18 74 67 F0 |                 shl     htmp2, #24
29ce0     BA BF 42 F5 |                 or      retval, htmp2
29ce4     2D 00 64 FD |                 ret
29ce8                 | 
29ce8                 | '------------------------------------------------------------------------------
29ce8                 | ' Normalize value to signed word (-32768 / 32767)
29ce8                 | '------------------------------------------------------------------------------
29ce8                 | ' On entry:
29ce8                 | '   retval - value to normalize
29ce8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
29ce8                 | '   - or -
29ce8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
29ce8                 | '   hidr_size - value bits length
29ce8                 | ' On exit:
29ce8                 | '   retval - normalized value
29ce8                 | '------------------------------------------------------------------------------
29ce8                 | hpad_normalize
29ce8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
29cec     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
29cf0     2D 00 64 AD |         if_z    ret
29cf4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
29cf8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
29cfc     0F 72 77 F7 |                 signx   htmp1, #15      wc
29d00     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
29d04     00 BE 66 C7 |         if_c    signx   retval, #0-0
29d08     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
29d0c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
29d10     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
29d14     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
29d18     B8 71 53 F6 |                 abs     htmp            wc
29d1c     1F BE 0E F4 |                 testb   retval, #31     wz
29d20     5F BF 42 F6 |                 abs     retval
29d24     B8 BF 12 FD |                 qdiv    retval, htmp
29d28     18 BE 62 FD |                 getqx   retval
29d2c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
29d30     C0 FF 7F FF 
29d34     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
29d38     2D 00 64 FD |                 ret
29d3c                 | 
29d3c                 | '------------------------------------------------------------------------------
29d3c                 | ' Perform controller actions
29d3c                 | ' On entry:
29d3c                 | '    hidr_id        report id
29d3c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
29d3c                 | '                      X = hidr_axis+0, #0
29d3c                 | '                      Y = hidr_axis+0, #1
29d3c                 | '                      Z = hidr_axis+1, #0
29d3c                 | '                     RX = hidr_axis+1, #1
29d3c                 | '                     RY = hidr_axis+2, #0
29d3c                 | '                     RZ = hidr_axis+2, #1
29d3c                 | '    hidr_buttons   buttons state (bits 0 to 31)
29d3c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
29d3c                 | '
29d3c                 | '                     -------3 -------2 -------1 -------0 byte
29d3c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
29d3c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
29d3c                 | '                                zyx||| |||||||| ++++++++ n. buttons
29d3c                 | '                                |||||| ||||++++--------- n. axes
29d3c                 | '                                |||||| ++++------------- n. hats
29d3c                 | '                                ++++++------------------ valid axes
29d3c                 | '------------------------------------------------------------------------------
29d3c                 | hpad_translate
29d3c                 | 
29d3c                 | 
29d3c                 |         if HAVE_HIDPAD
29d3c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
29d40     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
29d44     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
29d48     01 70 E7 F2 |                 cmpsub  htmp,#1
29d4c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
29d50     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
29d54     2D 00 7C 3D |         if_ae   ret     wcz
29d58     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
29d5c     B8 F3 03 F1 |                 add     ptrb,htmp
29d60     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
29d64     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
29d68     28 0C 64 FD |                 setq    #7-1
29d6c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
29d70                 |         end
29d70                 | 
29d70                 | 
29d70                 |         if EMUPAD_MAX_PLAYER > 0
29d70                 | .emupad_no_hat
29d70                 |         if EMUPAD_BT0_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT1_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT2_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT3_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT4_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT5_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT6_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT7_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT8_BIT >= 0
29d70                 |         end
29d70                 |         if EMUPAD_BT9_BIT >= 0
29d70                 |         end
29d70                 | .emupad_slot_over
29d70                 |         end
29d70                 | 
29d70                 |         if 0
29d70                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
29d70                 | 
29d70                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
29d70                 | 
29d70                 |         end
29d70     2D 00 64 FD |                 ret
29d74                 | end
29d74                 | 
29d74                 | if EMUPAD_MAX_PLAYER > 0
29d74                 | '------------------------------------------------------------------------------
29d74                 | ' Clear EmuPad state
29d74                 | '------------------------------------------------------------------------------
29d74                 | emupad_reset
29d74                 | 
29d74                 | '------------------------------------------------------------------------------
29d74                 | ' Get EmuPad Player number for current device (into retval)
29d74                 | ' Z flag is also set if current device is valid
29d74                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
29d74                 | '------------------------------------------------------------------------------
29d74                 | emupad_getnum
29d74                 | .loop
29d74                 | '------------------------------------------------------------------------------
29d74                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
29d74                 | '------------------------------------------------------------------------------
29d74                 | emupad_discon
29d74                 | .loop         
29d74                 |         
29d74                 |         ' FALL THROUGH!!!
29d74                 | 
29d74                 | '------------------------------------------------------------------------------
29d74                 | ' Update EmuPad reports (all of them...)
29d74                 | '------------------------------------------------------------------------------
29d74                 | emupad_write_reports
29d74                 | .devloop
29d74                 | 
29d74                 | end
29d74                 | 
29d74                 | 
29d74                 | '------------------------------------------------------------------------------
29d74                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
29d74                 | '------------------------------------------------------------------------------
29d74                 | ' On entry:
29d74                 | ' On exit:
29d74                 | '------------------------------------------------------------------------------
29d74                 | hget_hub_status
29d74     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
29d78     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
29d7c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
29d80     01 90 2F F9 |                 setword hpar3, #1, #1
29d84     CF 02 A0 FD |                 call    #do_int_in
29d88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29d8c     0C 00 90 AD |         if_z    jmp     #.data
29d90     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
29d94     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
29d98     2D 00 64 FD |                 ret
29d9c                 | .data
29d9c     00 90 0F F2 |                 cmp     hpar3, #0               wz
29da0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
29da4                 | 
29da4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
29da8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
29dac     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
29db0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
29db4                 |                 debug(ubin_long(hub_status_chg))
29db4                 | 
29db4     01 5A 06 F6 |                 mov     hdev_port, #1
29db8                 | .loop
29db8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
29dbc     0C 00 B0 AD |         if_x1   call    #hub_port_handler
29dc0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
29dc4     F0 FF 9F 3D |         if_nc   jmp     #.loop
29dc8     2D 00 64 FD |                 ret
29dcc                 | 
29dcc                 | hub_port_handler
29dcc     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
29dd0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
29dd4     27 EF 03 F6 |                 mov     pb, urx_buff_p
29dd8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29ddc     55 02 A0 FD |                 call    #control_read
29de0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
29de4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
29de4                 | 
29de4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
29de8     50 01 90 5D |         if_x0   jmp     #.other
29dec     68 02 D0 FE |                 loc     ptra, #clr_port_feat
29df0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
29df4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29df8     A0 02 A0 FD |                 call    #control_write
29dfc     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
29e00     7C 01 90 5D |         if_x0   jmp     #.disconnect
29e04     B0 99 02 F6 |                 mov     hctwait, _100ms_
29e08     EF 02 A0 FD |                 call    #poll_waitx
29e0c                 | 
29e0c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
29e10     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
29e14     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29e18     A0 02 A0 FD |                 call    #control_write
29e1c                 | 
29e1c     02 76 07 F6 |                 mov     htmp3, #2
29e20                 | .wait_reset
29e20     AC 99 02 F6 |                 mov     hctwait, _8ms_
29e24     EF 02 A0 FD |                 call    #poll_waitx
29e28     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
29e2c     27 EF 03 F6 |                 mov     pb, urx_buff_p
29e30     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29e34     55 02 A0 FD |                 call    #control_read
29e38     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
29e3c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
29e40     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
29e44                 | 
29e44     10 02 D0 FE |                 loc     ptra, #clr_port_feat
29e48     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
29e4c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29e50     A0 02 A0 FD |                 call    #control_write
29e54                 | 
29e54     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
29e58                 | .wait_recover
29e58     A7 99 02 F6 |                 mov     hctwait, _1ms_
29e5c     EF 02 A0 FD |                 call    #poll_waitx
29e60     FD 71 6F FB |                 djnz    htmp,#.wait_recover
29e64                 | 
29e64     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
29e68     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
29e6c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
29e70                 | 
29e70     00 08 00 FF 
29e74     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
29e78     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
29e7c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
29e80     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
29e84     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
29e88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29e8c     48 01 90 5D |         if_nz   jmp     #.done
29e90                 | .get_dev_desc
29e90     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
29e94     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
29e98     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
29e9c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
29ea0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
29ea4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
29ea8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
29eac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29eb0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
29eb4     AC 99 02 F6 |                 mov     hctwait, _8ms_
29eb8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
29ebc     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
29ec0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
29ec4     BE 00 A0 FD |                 call    #calc_crc5
29ec8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
29ecc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
29ed0     F7 AD C2 FA |                 rdbyte  total_data, pb
29ed4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
29ed8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
29edc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29ee0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
29ee4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
29ee8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
29eec                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
29eec     9F 99 02 F6 |                 mov     hctwait, _500us_
29ef0     EF 02 A0 FD |                 call    #poll_waitx
29ef4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
29ef8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
29efc     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
29f00     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
29f04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29f08     CC 00 90 5D |         if_nz   jmp     #.done
29f0c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
29f10     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
29f14     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
29f18     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
29f1c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
29f20     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
29f24     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
29f28     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
29f2c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
29f30     A4 00 90 CD |         if_b    jmp     #.done
29f34     6C F0 BF FD |                 call    #hparse_con_desc
29f38     9C 00 90 FD |                 jmp     #.done
29f3c                 | 
29f3c                 | .other
29f3c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
29f40     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
29f44     28 00 90 AD |         if_x1   jmp     #.reset_feature
29f48     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
29f4c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
29f50     1C 00 90 AD |         if_x1   jmp     #.reset_feature
29f54     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
29f58     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
29f5c     10 00 90 AD |         if_x1   jmp     #.reset_feature
29f60     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
29f64     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
29f68     04 00 90 AD |         if_x1   jmp     #.reset_feature
29f6c     68 00 90 FD |                 jmp     #.done
29f70                 | .reset_feature
29f70     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
29f74     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29f78     A0 02 A0 FD |                 call    #control_write
29f7c     58 00 90 FD |                 jmp     #.done
29f80                 | .disconnect
29f80                 | 
29f80     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
29f84     00 70 E3 F8 |                 getbyte htmp
29f88     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
29f8c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
29f90     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
29f94     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
29f98     00 76 06 A6 |         if_z    mov     kb_led_states, #0
29f9c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
29fa0                 |         if EMUPAD_MAX_PLAYER > 0
29fa0                 |         end
29fa0                 |         if HAVE_MOUSE
29fa0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
29fa4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
29fa8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
29fac                 |         end
29fac                 |         if HAVE_HIDPAD
29fac     14 0A F0 FE |                 loc ptrb,#hidpad_report
29fb0     2D 71 03 F6 |                 mov htmp,hdev_port
29fb4     01 70 E7 F2 |                 cmpsub htmp,#1
29fb8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
29fbc     B8 F3 03 F1 |                 add ptrb,htmp
29fc0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
29fc4     80 01 6C FC |                 wrlong #0,ptrb
29fc8                 |         end
29fc8                 | 
29fc8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
29fcc     00 00 C4 F8 |                 setbyte #0
29fd0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
29fd4     00 00 04 F6 |                 mov     0-0, #0
29fd8                 | 
29fd8                 | .done
29fd8     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
29fdc     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
29fe0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
29fe4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
29fe8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
29fec     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
29ff0                 | 
29ff0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
29ff4     27 EF 03 F6 |                 mov     pb, urx_buff_p
29ff8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29ffc     55 02 A0 FD |                 call    #control_read
2a000     00 69 06 FB |                 rdlong  hub_port_status, ptra
2a004                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2a004     2D 00 64 FD |                 ret
2a008                 | 
2a008                 | '------------------------------------------------------------------------------
2a008                 | ' Partially populated SETUP packets
2a008                 | '------------------------------------------------------------------------------
2a008     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2a009     06          |                 byte    REQ_GET_DESC
2a00a     00 01       |                 word    TYPE_DEVICE << 8
2a00c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a00e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a010     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2a011     06          |                 byte    REQ_GET_DESC
2a012     00 02       |                 word    TYPE_CONFIG << 8
2a014     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a016     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a018     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2a019     09          |                 byte    REQ_SET_CONFIG
2a01a     00 00       |                 word    0       ' Configuration value
2a01c     00 00       |                 word    0       ' Zero
2a01e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2a020     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2a021     05          |                 byte    REQ_SET_ADDR
2a022     00 00       |                 word    0       ' Zero
2a024     00 00       |                 word    0       ' Zero
2a026     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2a028                 | '------------------------------------------------------------------------------
2a028                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2a028                 | ' wValue field dictates which protocol should be used.
2a028                 | '
2a028                 | ' When initialized, all devices default to report protocol. However the host
2a028                 | ' should not make any assumptions about the device state and should set the
2a028                 | ' desired protocol whenever initializing a device.
2a028                 | '------------------------------------------------------------------------------
2a028     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2a029     0B          |                 byte    HID_SET_PROTO
2a02a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2a02c                 |                                                 ' (HID 1.11 Section 7.2.6).
2a02c     00 00       |                 word    0               ' Interface index number.
2a02e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2a030                 | '------------------------------------------------------------------------------
2a030     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2a031     0A          |                 byte    HID_SET_IDLE
2a032     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2a034                 |                                         ' reporting until a change is detected in the report data
2a034                 | 
2a034                 |                                         ' (HID 1.11 Section 7.2.4).
2a034     00 00       |                 word    0       ' Interface index number.
2a036     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2a038     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2a039     09          |                 byte    HID_SET_REPORT
2a03a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2a03c                 |                                         ' (HID 1.11 Section 7.2.2).
2a03c     00 00       |                 word    0       ' Interface index number.
2a03e     00 00       |                 word    0       ' Size of the report, in bytes.
2a040     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2a041     06          |                 byte    REQ_GET_DESC
2a042     00 22       |                 word    TYPE_REPORT << 8
2a044     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a046     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a048                 | '------------------------------------------------------------------------------
2a048     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2a049     06          |                 byte    REQ_GET_DESC
2a04a     00 29       |                 word    TYPE_HUB << 8
2a04c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a04e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a050     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2a051     03          |                 byte    REQ_SET_FEATURE
2a052     00 00       |                 word    0       ' port power
2a054     01 00       |                 word    1       ' Port index number (1+)
2a056     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a058     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2a059     01          |                 byte    REQ_CLEAR_FEATURE
2a05a     00 00       |                 word    0       ' port power
2a05c     01 00       |                 word    1       ' Port index number (1+)
2a05e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a060     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2a061     00          |                 byte    REQ_GET_STATUS
2a062     00 00       |                 word    0
2a064     01 00       |                 word    1       ' Port index number (1+)
2a066     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2a068                 | '------------------------------------------------------------------------------
2a068                 | if _HAVE_GAMEPAD
2a068     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2a06c                 | ps3_command_buff
2a06c     00 00 00 00 
2a070     00          |                 byte    $00, $00, $00, $00, $00
2a071     00 00 00 00 
2a075     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2a076     FF 27 10 00 
2a07a     32          |                 byte    $FF, $27, $10, $00, $32
2a07b     FF 27 10 00 
2a07f     32          |                 byte    $FF, $27, $10, $00, $32
2a080     FF 27 10 00 
2a084     32          |                 byte    $FF, $27, $10, $00, $32
2a085     FF 27 10 00 
2a089     32          |                 byte    $FF, $27, $10, $00, $32
2a08a     00 00 00 00 
2a08e     00          |                 byte    $00, $00, $00, $00, $00
2a08f     00 00 00 00 
2a093     00          |                 byte    $00, $00, $00, $00, $00
2a094     00 00 00 00 
2a098     00          |                 byte    $00, $00, $00, $00, $00
2a099     00 00 00    |                 byte    $00, $00, $00
2a09c                 | '------------------------------------------------------------------------------
2a09c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2a09f                 |                                         ' 0x01 All blinking
2a09f                 |                                         ' 0x02 1 flashes, then on
2a09f                 |                                         ' 0x03 2 flashes, then on
2a09f                 |                                         ' 0x04 3 flashes, then on
2a09f                 |                                         ' 0x05 4 flashes, then on
2a09f                 |                                         ' 0x06 1 on
2a09f                 |                                         ' 0x07 2 on
2a09f                 |                                         ' 0x08 3 on
2a09f                 |                                         ' 0x09 4 on
2a09f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2a09f                 |                                         ' 0x0B Blinking*
2a09f                 |                                         ' 0x0C Slow blinking*
2a09f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2a09f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2a0a2     00          |                 byte    $00             ' Left rumble
2a0a3     00          |                 byte    $00             ' Right rumble
2a0a4     00 00 00    |                 byte    $00, $00, $00
2a0a7     00          | end
2a0a8                 | alignl
2a0a8                 | 
2a0a8                 | if HAVE_MOUSE
2a0a8     00 00 00 00 
2a0ac     00 00 00 00 | mouse_limits long 0[2]
2a0b0     00 00 00 00 | mouse_outptr long 0
2a0b4                 | end
2a0b4                 | 
2a0b4                 | if KEYQUEUE_SIZE > 0
2a0b4     00          | keyq_head byte 0
2a0b5     00          | keyq_tail byte 0
2a0b6     00 00 00 00 
      ...             
2a2b2     00 00 00 00 
2a2b6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2a2b8                 | alignl
2a2b8                 | end
2a2b8                 | 
2a2b8                 | if EMUPAD_MAX_PLAYER > 0
2a2b8                 | emupad_rule_buffer
2a2b8                 | if EMUPAD_BUILTIN_RULES
2a2b8                 | file "padmap_builtin.dat"
2a2b8                 | end
2a2b8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2a2b8                 | '' Default rule directly follows!
2a2b8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2a2b8                 | end
2a2b8                 | 
2a2b8                 | '------------------------------------------------------------------------------
2a2b8                 | ' The USB data cache area gets zero-filled at every device disconnect
2a2b8                 | '------------------------------------------------------------------------------
2a2b8                 | usb_cache_start
2a2b8                 | 
2a2b8                 | ' HID descriptor and report buffers
2a2b8                 | if !!OVERLAP_MEMORY
2a2b8     00 00 00 00 
      ...             
2a9b0     00 00 00 00 
2a9b4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2a9b8                 | end
2a9b8     00 00 00 00 
2a9bc     00 00 00 00 | hkbd_report     byte    0[8]
2a9c0     00 00 00 00 | hkbd_led_rep    byte    0
2a9c4                 | alignl
2a9c4                 | 
2a9c4                 | if HAVE_HIDPAD
2a9c4     00 00 00 00 
      ...             
2aa80     00 00 00 00 
2aa84     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2aa88                 | end
2aa88                 | 
2aa88                 | ' HUB descriptor
2aa88     00          | hub_descr       byte    0   ' bDescLength
2aa89     00          |                 byte    0   ' bDescriptorType
2aa8a     00          |                 byte    0   ' bNbrPorts
2aa8b     00 00       |                 word    0   ' wHubCharacteristics
2aa8d     00          |                 byte    0   ' bPwrOn2PwrGood
2aa8e     00          |                 byte    0   ' bHubContrCurrent
2aa8f     00          |                 byte    0   ' DeviceRemoveable
2aa90     00          |                 byte    0   ' PortPwrCtrlMask
2aa91                 | 
2aa91                 | usb_cache_end
2aa91                 | 
2aa91                 | if HAVE_MOUSE
2aa91     00 00 00 00 | mouse_xacc      long 0
2aa95     00 00 00 00 | mouse_yacc      long 0
2aa99     00 00 00 00 | mouse_zacc      long 0
2aa9d     00          | mouse_bstate    byte 0
2aa9e     00          | mouse_lpending  byte 0
2aa9f     00          | mouse_rpending  byte 0
2aaa0     00          | mouse_mpending  byte 0
2aaa1     00          | mouse_lock      byte 0
2aaa2     00 00 00    |                 byte 0[3] ' padding
2aaa5                 | end
2aaa5                 | 
2aaa5     00 00 00 00 
      ...             
2ab1d     00 00 00 00 
2ab21     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2ab25     00 00 00 00 
2ab29     00 00 00 00 
2ab2d     00 00 00 00 
2ab31     00 00 00 00 
2ab35     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2ab37     00 00 00 00 
      ...             
2ac2f     00 00 00 00 
2ac33     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2ac37                 | 
2ac37     00          | driver_cog      byte    0                       ' Current driver cog + 1
2ac38                 | 	alignl
2ac38                 | _Audio093b_8_sc_spin2_dat_
2ac38                 | 
2ac38                 | audio       org     0
2ac38                 | 
2ac38     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2ac3c     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2ac40     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2ac44                 | 
2ac44     01 EC 63 FD |             cogid   pa                   ' compute cogid
2ac48     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2ac4c     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2ac50     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2ac54                 | 
2ac54     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2ac58     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2ac5c     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2ac60     0F CA 05 FC |             wrpin   dac,#right
2ac64     0F BE 1C FC |             wxpin   #95,#right    
2ac68     41 9C 64 FD |             dirh    #left addpins 1
2ac6c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2ac70     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2ac74     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2ac78                 |             
2ac78                 | '---------------------------------------------------------------------------------        
2ac78                 | '----------------- The main loop -------------------------------------------------
2ac78                 | '---------------------------------------------------------------------------------
2ac78                 | 
2ac78     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2ac7c     10 00 90 CD |       if_c  jmp     #loop1
2ac80                 |   
2ac80     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2ac84     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2ac88     B1 00 80 F1 |             sub     0-0,a40000000
2ac8c     FD A9 6D FB |             djnz    cn,#p402
2ac90                 |     
2ac90     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2ac94     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2ac98     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2ac9c     01 A8 05 C6 |     if_c    mov     cn,#1
2aca0     B6 AA 39 F3 |             fle     ct,time3 wcz
2aca4     02 A8 05 C6 |     if_c    mov     cn,#2     
2aca8     B7 AA 39 F3 |             fle     ct,time4 wcz
2acac     03 A8 05 C6 |     if_c    mov     cn,#3
2acb0     B8 AA 39 F3 |             fle     ct,time5 wcz
2acb4     04 A8 05 C6 |     if_c    mov     cn,#4
2acb8     B9 AA 39 F3 |             fle     ct,time6 wcz
2acbc     05 A8 05 C6 |     if_c    mov     cn,#5
2acc0     BA AA 39 F3 |             fle     ct,time7 wcz
2acc4     06 A8 05 C6 |     if_c    mov     cn,#6
2acc8     BB AA 39 F3 |             fle     ct,time8 wcz
2accc     07 A8 05 C6 |     if_c    mov     cn,#7
2acd0                 | 
2acd0                 | 
2acd0                 | '----------------------------------------------------------------------------------
2acd0                 | '------------- Compute channel samples --------------------------------------------
2acd0                 | '----------------------------------------------------------------------------------
2acd0                 | 
2acd0                 | 
2acd0     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2acd4     05 78 65 F0 |             shl     channeladd,#5
2acd8     BC F0 03 F1 |             add     ptra,channeladd
2acdc                 | 
2acdc     28 0E 64 FD |             setq    #7                        ' read parameters
2ace0     00 8F 05 FB |             rdlong  pointer0,ptra
2ace4                 | '            testb   command0,#29 wz
2ace4                 | '    if_nz   jmp     #p408
2ace4                 | '    	    getword envptr,command0,#0
2ace4                 | '    	    getbyte envspeed,command0,#2
2ace4                 | '    	    jmp     #p404                     'if envelope then no sample rate
2ace4                 |     	    
2ace4     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2ace8     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2acec     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2acf0     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2acf4     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2acf8     00 7C 0D F2 |             cmp     qq,#0 wz                         
2acfc     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2ad00     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2ad04                 |             
2ad04     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2ad08     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2ad0c     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2ad10                 | 
2ad10                 | 
2ad10     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2ad14     C8 B0 39 F9 |             getword oldrs,sample0,#1
2ad18     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2ad1c     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2ad20     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2ad24     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2ad28                 | 
2ad28     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2ad2c     00 AC 01 F6 |             mov     dt0,0-0    
2ad30     B3 AC 81 F1 |             sub     dt0,time0
2ad34                 |             
2ad34     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2ad38     CF 00 00 F1 |             add     0-0,afreq0  	
2ad3c                 | 
2ad3c     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2ad40     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2ad44     08 8E 45 F0 |             shr     pointer0,#8
2ad48                 |          
2ad48     1F 92 0D F4 |             testb   sstart0,#31 wz            
2ad4c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2ad50     1C 92 0D F4 |             testb   sstart0,#28 wz            
2ad54     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2ad58                 |             
2ad58     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2ad5c     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2ad60     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2ad64                 |             
2ad64     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2ad68     C9 7C 01 F1 |             add     qq,sstart0            
2ad6c                 | 
2ad6c                 | 
2ad6c                 | 
2ad6c     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2ad70     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2ad74     04 01 B0 1D |     if_gt   call    #cache_read
2ad78                 |          
2ad78                 |          
2ad78                 |  
2ad78                 |          
2ad78     1F 92 0D F4 |             testb   sstart0,#31 wz 
2ad7c     08 7E 65 50 |     if_nz   shl     spl,#8
2ad80     08 8E 65 50 |     if_nz   shl     pointer0,#8
2ad84     07 8E 65 A0 |     if_z    shl     pointer0,#7
2ad88     1C 92 0D F4 |             testb   sstart0,#28 wz            
2ad8c     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2ad90     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2ad94                 |     
2ad94                 | 
2ad94     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2ad98     00 7E 01 F6 |             mov     spl,0-0
2ad9c                 |  
2ad9c     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2ada0     00 B2 01 F6 |             mov     ls0,0-0
2ada4     20 00 00 FF 
2ada8     00 7C 05 F6 |             mov     qq,##16384
2adac     D2 7C 81 F1 |             sub     qq,apan0
2adb0     BE 7E 31 FA |             scas    spl,qq
2adb4     00 B4 01 F6 |             mov     rs0, 0-0
2adb8                 | 
2adb8     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2adbc     DA B8 01 F1 |             add     rs,rs0
2adc0     D7 B6 81 F1 |             sub     ls,oldls
2adc4     D9 B6 01 F1 |             add     ls,ls0
2adc8                 |    
2adc8     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2adcc     D9 90 21 F9 |             setword sample0,ls0,#0
2add0                 |             
2add0     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2add4     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2add8     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2addc     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2ade0     04 00 00 AF 
2ade4     00 68 05 A1 |     if_z    add     time1,##2048
2ade8     B4 6A 01 A6 |     if_z    mov     time2,time1
2adec     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2adf0                 |             
2adf0     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2adf4     00 8F 65 FC |             wrlong  pointer0,ptra
2adf8     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2adfc                 |                       
2adfc     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2ae00     FF 7B 25 A7 |     if_z    decmod  front, #511          
2ae04                 |          
2ae04     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2ae08     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2ae0c     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2ae10     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2ae14                 | 	    
2ae14                 | 		    
2ae14     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2ae18     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2ae1c     D8 BC 01 F6 |             mov     newsample, oldrs       
2ae20                 | 
2ae20     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2ae24     D6 66 01 F1 |             add     time0,dt0    
2ae28                 |                                      
2ae28     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2ae2c     60 FE 9F AD |     if_z    jmp     #loop1
2ae30     D6 7C 01 F6 |             mov     qq,dt0
2ae34                 |   
2ae34     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2ae38     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2ae3c     F4 FF 9F AD |     if_e    jmp     #p301    
2ae40                 | 		
2ae40     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2ae44     20 00 90 AD |     if_z    jmp #p302	   
2ae48                 |  
2ae48                 |  
2ae48     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2ae4c     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2ae50     02 C6 65 C0 |     if_c    shl scptr2,#2
2ae54     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2ae58     60 C6 65 FC |             wrlong scptr2,#$60
2ae5c     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2ae60     01 00 00 CF 
2ae64     7F C4 05 C7 |     if_c    incmod scptr,##639
2ae68                 | 			    
2ae68     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2ae6c     00 00 00 FF 
2ae70     FF 7B 05 F7 |             incmod  front, ##511
2ae74     EF 7D 6D FB |             djnz    qq,#p301
2ae78                 |             
2ae78     FC FD 9F FD |             jmp     #loop            'loop
2ae7c                 | 
2ae7c                 | '----------------------------------------------------------------------------------
2ae7c                 | '------------- This is the end of the main loop -----------------------------------
2ae7c                 | '----------------------------------------------------------------------------------
2ae7c                 | 
2ae7c                 | '----------------------------------------------------------------------------------
2ae7c                 | '------------- PSRAM cache ----------- --------------------------------------------
2ae7c                 | '----------------------------------------------------------------------------------
2ae7c                 | 
2ae7c                 | ' There are 8 cache pointers for 8 channels
2ae7c                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2ae7c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2ae7c                 | 
2ae7c                 | 
2ae7c     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2ae80                 |             
2ae80     BE E8 01 F6 | 	    mov     addrhi,qq		
2ae84     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2ae88     E8 A8 95 F9 | 	    alts    cn,#cache1            
2ae8c     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2ae90     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2ae94                 | 	
2ae94     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2ae98     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2ae9c     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2aea0     08 E0 65 F0 | 	    shl     cmd,#8
2aea4     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2aea8     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2aeac     08 E2 65 F0 |             shl     hubaddr,#8                  '
2aeb0     E7 E2 01 F1 |             add     hubaddr,hubptr 
2aeb4     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2aeb8     28 04 64 FD |             setq    #2                          ' write 3 longs
2aebc     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2aec0     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2aec4     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2aec8                 |             
2aec8                 | 	
2aec8     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2aecc     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2aed0     E7 7C 01 F1 | 	    add     qq,hubptr
2aed4     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2aed8     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2aedc                 |           
2aedc                 | 
2aedc                 | '--------------------------------------------------------------------------
2aedc                 | '------ Interrupt service -------------------------------------------------
2aedc                 | '------ Output the sample, get the next one if exists ---------------------
2aedc                 | '--------------------------------------------------------------------------
2aedc                 | 
2aedc     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2aee0     0F 88 25 FC |             wypin   rsample,#right       '4
2aee4     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2aee8     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2aeec     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2aef0     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2aef4     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2aef8                 |     
2aef8     F5 FF 3B FB |             reti1                        '17/19 
2aefc                 |           
2aefc                 | '---------------------------------------------------------------------------
2aefc                 | '-------- End of interrupt -------------------------------------------------
2aefc                 | '---------------------------------------------------------------------------    
2aefc                 | 
2aefc                 | 
2aefc                 | '---------------------------------------------------------------------------
2aefc                 | '------- Variables ---------------------------------------------------------
2aefc                 | '---------------------------------------------------------------------------
2aefc                 | 
2aefc                 | ' constants
2aefc                 | 
2aefc     00 00 00 40 | a40000000   long $40000000
2af00     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2af04                 | 
2af04                 | ' Time variables
2af04                 | 
2af04     00 00 00 00 | time0       long 0    ' Global sample computing time
2af08     01 00 00 00 | time1       long 1    ' Local channels time
2af0c     02 00 00 00 | time2       long 2
2af10     03 00 00 00 | time3       long 3
2af14     04 00 00 00 | time4       long 4
2af18     05 00 00 00 | time5       long 5
2af1c     06 00 00 00 | time6       long 6
2af20     07 00 00 00 | time7       long 7
2af24     08 00 00 00 | time8       long 8
2af28                 | 
2af28     00 00 00 00 | channeladd long 0
2af2c                 | 
2af2c     00 00 00 00 | front       long 0
2af30                 | 
2af30                 | ' temporary variables 
2af30     00 00 00 00 | qq          long 0
2af34     00 00 00 00 | spl         long 0
2af38     00 00 00 00 | zero        long 0
2af3c     00 00 00 00 | mailbox     long 0
2af40     00 00 00 00 | mailbox2 long 0
2af44                 | 
2af44                 | ' Interrupt ISR variables
2af44                 | 
2af44     00 00 00 00 | lsample     long 0
2af48     00 00 00 00 | rsample     long 0
2af4c     00 00 00 00 | lsnext      long 0
2af50     00 00 00 00 | rsnext      long 0 
2af54                 | 
2af54                 | ' channel parameter block
2af54                 | 
2af54     00 00 00 00 | pointer0    long 0     
2af58     00 00 00 00 | sample0     long 0
2af5c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2af60     00 00 00 00 | lstart0     long 0
2af64     00 00 00 00 | lend0       long 0
2af68     00 00 00 00 | volpan0     long 0
2af6c     00 00 00 00 | freqskip0   long 0
2af70     00 00 00 00 | command0    long 0
2af74                 | 
2af74     00 00 00 00 | afreq0      long 0
2af78     00 00 00 00 | askip0      long 0
2af7c     00 00 00 00 | avol0       long 0
2af80     00 00 00 00 | apan0       long 0
2af84                 | 
2af84     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2af88     00 00 00 00 | cn          long 0
2af8c     00 00 00 00 | ct          long 0
2af90     00 00 00 00 | dt0         long 0
2af94                 | 
2af94                 | ' Samples
2af94     00 00 00 00 | oldls       long 0
2af98     00 00 00 00 | oldrs       long 0
2af9c                 | 
2af9c     00 00 00 00 | ls0         long 0
2afa0     00 00 00 00 | rs0         long 0
2afa4                 | 
2afa4     00 00 00 00 | ls          long 0    
2afa8     00 00 00 00 | rs          long 0
2afac                 | 
2afac     00 00 00 00 | oldsample   long 0
2afb0     00 00 00 00 | newsample   long 0
2afb4                 | 
2afb4     00 00 00 00 | nrsample    long 0
2afb8     00 00 00 00 | nlsample    long 0
2afbc                 | 
2afbc     00 00 00 00 | scbase long 0
2afc0     00 00 00 00 | scptr long 0
2afc4     00 00 00 00 | scptr2 long 0
2afc8     00 00 00 00 | scope long 0
2afcc                 | 
2afcc     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2afd0     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2afd4                 | 
2afd4     00 18 07 00 | hubptr      long $71800
2afd8     00 00 00 00 | cache1      long 0
2afdc     00 00 00 00 | cache2      long 0
2afe0     00 00 00 00 | cache3      long 0
2afe4     00 00 00 00 | cache4      long 0
2afe8     00 00 00 00 | cache5      long 0
2afec     00 00 00 00 | cache6      long 0
2aff0     00 00 00 00 | cache7      long 0
2aff4     00 00 00 00 | cache8      long 0
2aff8                 | 
2aff8                 | 
2aff8     00 00 00 00 | cmd         long 0
2affc     00 00 00 00 | hubaddr     long 0
2b000     00 01 00 00 | count       long 256
2b004     00 00 00 00 | addrlo long 0
2b008     00 00 00 00 | addrhi long 0
2b00c     00 00 00 00 | pointer00 long 0
2b010     00 00 00 00 
2b014     00 00 00 00 | null  			long 	0,0           ' for channel reset
2b018                 | 	alignl
2b018                 | __system__dat_
2b018     00 00 00 00 
2b01c     00 00 00 00 | 	byte	$00[8]
2b020     03 00 00 00 
2b024     00 00 00 00 
2b028     00 00 00 00 
2b02c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b030     00 00 00 00 
      ...             
2b2bc     00 00 00 00 
2b2c0     00 00 00 00 | 	byte	$00[660]
2b2c4     00 00 10 05 | 	long	(81 {__system____root_opendir})<<20
2b2c8     00 00 20 05 | 	long	(82 {__system____root_closedir})<<20
2b2cc     00 00 30 05 | 	long	(83 {__system____root_readdir})<<20
2b2d0     00 00 40 05 | 	long	(84 {__system____root_stat})<<20
2b2d4     00 00 00 00 
2b2d8     00 00 00 00 
2b2dc     00 00 00 00 
2b2e0     00 00 00 00 
2b2e4     00 00 00 00 
2b2e8     00 00 00 00 
2b2ec     00 00 00 00 | 	byte	$00[28]
2b2f0     58 B3 02 00 | 	long	@@@__system__dat_ + 832
2b2f4     5B B3 02 00 | 	long	@@@__system__dat_ + 835
2b2f8     7C B3 02 00 | 	long	@@@__system__dat_ + 868
2b2fc     95 B3 02 00 | 	long	@@@__system__dat_ + 893
2b300     B0 B3 02 00 | 	long	@@@__system__dat_ + 920
2b304     CA B3 02 00 | 	long	@@@__system__dat_ + 946
2b308     DA B3 02 00 | 	long	@@@__system__dat_ + 962
2b30c     EC B3 02 00 | 	long	@@@__system__dat_ + 980
2b310     FE B3 02 00 | 	long	@@@__system__dat_ + 998
2b314     10 B4 02 00 | 	long	@@@__system__dat_ + 1016
2b318     1C B4 02 00 | 	long	@@@__system__dat_ + 1028
2b31c     2D B4 02 00 | 	long	@@@__system__dat_ + 1045
2b320     41 B4 02 00 | 	long	@@@__system__dat_ + 1065
2b324     4B B4 02 00 | 	long	@@@__system__dat_ + 1075
2b328     5B B4 02 00 | 	long	@@@__system__dat_ + 1091
2b32c     6A B4 02 00 | 	long	@@@__system__dat_ + 1106
2b330     80 B4 02 00 | 	long	@@@__system__dat_ + 1128
2b334     99 B4 02 00 | 	long	@@@__system__dat_ + 1153
2b338     AD B4 02 00 | 	long	@@@__system__dat_ + 1173
2b33c     BB B4 02 00 | 	long	@@@__system__dat_ + 1187
2b340     CF B4 02 00 | 	long	@@@__system__dat_ + 1207
2b344     DB B4 02 00 | 	long	@@@__system__dat_ + 1219
2b348     ED B4 02 00 | 	long	@@@__system__dat_ + 1237
2b34c     05 B5 02 00 | 	long	@@@__system__dat_ + 1261
2b350     17 B5 02 00 | 	long	@@@__system__dat_ + 1279
2b354     2A B5 02 00 | 	long	@@@__system__dat_ + 1298
2b358     4F 4B 00 4E 
2b35c     75 6D 65 72 
2b360     69 63 61 6C 
2b364     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2b368     75 6D 65 6E 
2b36c     74 20 6F 75 
2b370     74 20 6F 66 
2b374     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2b378     61 69 6E 00 
2b37c     52 65 73 75 
2b380     6C 74 20 6E 
2b384     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2b388     65 70 72 65 
2b38c     73 65 6E 74 
2b390     61 62 6C 65 
2b394     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2b398     65 67 61 6C 
2b39c     20 6D 75 6C 
2b3a0     74 69 62 79 
2b3a4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2b3a8     65 71 75 65 
2b3ac     6E 63 65 00 
2b3b0     4E 6F 20 73 
2b3b4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2b3b8     66 69 6C 65 
2b3bc     20 6F 72 20 
2b3c0     64 69 72 65 
2b3c4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2b3c8     79 00 42 61 
2b3cc     64 20 66 69 
2b3d0     6C 65 20 6E 
2b3d4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2b3d8     72 00 50 65 
2b3dc     72 6D 69 73 
2b3e0     73 69 6F 6E 
2b3e4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2b3e8     69 65 64 00 
2b3ec     4E 6F 74 20 
2b3f0     65 6E 6F 75 
2b3f4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2b3f8     65 6D 6F 72 
2b3fc     79 00 54 65 
2b400     6D 70 6F 72 
2b404     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2b408     66 61 69 6C 
2b40c     75 72 65 00 
2b410     46 69 6C 65 
2b414     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2b418     73 74 73 00 
2b41c     49 6E 76 61 
2b420     6C 69 64 20 
2b424     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2b428     6D 65 6E 74 
2b42c     00 54 6F 6F 
2b430     20 6D 61 6E 
2b434     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2b438     65 6E 20 66 
2b43c     69 6C 65 73 
2b440     00 49 2F 4F 
2b444     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2b448     6F 72 00 4E 
2b44c     6F 74 20 61 
2b450     20 64 69 72 
2b454     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2b458     72 79 00 49 
2b45c     73 20 61 20 
2b460     64 69 72 65 
2b464     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2b468     79 00 52 65 
2b46c     61 64 20 6F 
2b470     6E 6C 79 20 
2b474     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2b478     20 73 79 73 
2b47c     74 65 6D 00 
2b480     46 75 6E 63 
2b484     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2b488     20 6E 6F 74 
2b48c     20 69 6D 70 
2b490     6C 65 6D 65 
2b494     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2b498     00 44 69 72 
2b49c     65 63 74 6F 
2b4a0     72 79 20 6E 
2b4a4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2b4a8     6D 70 74 79 
2b4ac     00 4E 61 6D 
2b4b0     65 20 74 6F 
2b4b4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2b4b8     6E 67 00 44 
2b4bc     65 76 69 63 
2b4c0     65 20 6E 6F 
2b4c4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2b4c8     65 6B 61 62 
2b4cc     6C 65 00 42 
2b4d0     61 64 20 61 
2b4d4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2b4d8     73 73 00 42 
2b4dc     72 6F 6B 65 
2b4e0     6E 20 63 6F 
2b4e4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2b4e8     74 69 6F 6E 
2b4ec     00 44 65 76 
2b4f0     69 63 65 20 
2b4f4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2b4f8     65 73 6F 75 
2b4fc     72 63 65 20 
2b500     62 75 73 79 
2b504     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2b508     73 73 20 64 
2b50c     65 76 69 63 
2b510     65 20 6C 69 
2b514     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2b518     6F 20 73 70 
2b51c     61 63 65 20 
2b520     6F 6E 20 64 
2b524     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2b528     65 00 55 6E 
2b52c     6B 6E 6F 77 
2b530     6E 20 65 72 
2b534     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2b538     00 00 00 00 
2b53c     00 00 00 00 | 	byte	$00[8]
2b540     05 00 00 00 
2b544     00 00 00 00 
2b548     00 00 00 00 
2b54c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b550     00 00 00 00 | 	byte	$00, $00, $00, $00
2b554     00 00 90 06 | 	long	(105 {__system___tx})<<20
2b558     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2b55c     00 00 00 00 | 	byte	$00, $00, $00, $00
2b560     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0461})<<20
2b564     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0462})<<20
2b568     00 00 00 00 
2b56c     00 00 00 00 | 	byte	$00[8]
2b570     01 00 00 00 
2b574     06 00 00 00 
2b578     00 00 00 00 
2b57c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b580     00 00 00 00 
2b584     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2b588     00 00 90 06 | 	long	(105 {__system___tx})<<20
2b58c     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2b590     00 00 00 00 | 	byte	$00, $00, $00, $00
2b594     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0461})<<20
2b598     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0462})<<20
2b59c     00 00 00 00 
2b5a0     00 00 00 00 | 	byte	$00[8]
2b5a4     01 00 00 00 
2b5a8     06 00 00 00 
2b5ac     00 00 00 00 
2b5b0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5b4     00 00 00 00 
2b5b8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2b5bc     00 00 90 06 | 	long	(105 {__system___tx})<<20
2b5c0     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2b5c4     00 00 00 00 | 	byte	$00, $00, $00, $00
2b5c8     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0461})<<20
2b5cc     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0462})<<20
2b5d0     00 00 00 00 
      ...             
2b740     00 00 00 00 
2b744     00 00 00 00 | 	byte	$00[376]
2b748     4C B7 02 00 | 	long	@@@__system__dat_ + 1844
2b74c     00 00 00 00 
2b750     00 00 00 00 
2b754     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b758                 | 	alignl
2b758                 | _fatfs_cc_dat_
2b758     C7 00 FC 00 
2b75c     E9 00 E2 00 
2b760     E4 00 E0 00 
2b764     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2b768     EA 00 EB 00 
2b76c     E8 00 EF 00 
2b770     EE 00 EC 00 
2b774     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2b778     C9 00 E6 00 
2b77c     C6 00 F4 00 
2b780     F6 00 F2 00 
2b784     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2b788     FF 00 D6 00 
2b78c     DC 00 F8 00 
2b790     A3 00 D8 00 
2b794     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2b798     E1 00 ED 00 
2b79c     F3 00 FA 00 
2b7a0     F1 00 D1 00 
2b7a4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2b7a8     BF 00 AE 00 
2b7ac     AC 00 BD 00 
2b7b0     BC 00 A1 00 
2b7b4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2b7b8     91 25 92 25 
2b7bc     93 25 02 25 
2b7c0     24 25 C1 00 
2b7c4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2b7c8     A9 00 63 25 
2b7cc     51 25 57 25 
2b7d0     5D 25 A2 00 
2b7d4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2b7d8     14 25 34 25 
2b7dc     2C 25 1C 25 
2b7e0     00 25 3C 25 
2b7e4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2b7e8     5A 25 54 25 
2b7ec     69 25 66 25 
2b7f0     60 25 50 25 
2b7f4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2b7f8     F0 00 D0 00 
2b7fc     CA 00 CB 00 
2b800     C8 00 31 01 
2b804     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2b808     CF 00 18 25 
2b80c     0C 25 88 25 
2b810     84 25 A6 00 
2b814     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2b818     D3 00 DF 00 
2b81c     D4 00 D2 00 
2b820     F5 00 D5 00 
2b824     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2b828     DE 00 DA 00 
2b82c     DB 00 D9 00 
2b830     FD 00 DD 00 
2b834     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2b838     AD 00 B1 00 
2b83c     17 20 BE 00 
2b840     B6 00 A7 00 
2b844     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2b848     B0 00 A8 00 
2b84c     B7 00 B9 00 
2b850     B3 00 B2 00 
2b854     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2b858     61 00 1A 03 
2b85c     E0 00 17 03 
2b860     F8 00 07 03 
2b864     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2b868     78 01 00 01 
2b86c     30 01 32 01 
2b870     06 01 39 01 
2b874     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2b878     2E 01 79 01 
2b87c     06 01 80 01 
2b880     4D 00 43 02 
2b884     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2b888     82 01 84 01 
2b88c     84 01 86 01 
2b890     87 01 87 01 
2b894     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2b898     8B 01 8B 01 
2b89c     8D 01 8E 01 
2b8a0     8F 01 90 01 
2b8a4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2b8a8     93 01 94 01 
2b8ac     F6 01 96 01 
2b8b0     97 01 98 01 
2b8b4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2b8b8     9B 01 9C 01 
2b8bc     9D 01 20 02 
2b8c0     9F 01 A0 01 
2b8c4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2b8c8     A2 01 A4 01 
2b8cc     A4 01 A6 01 
2b8d0     A7 01 A7 01 
2b8d4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2b8d8     AB 01 AC 01 
2b8dc     AC 01 AE 01 
2b8e0     AF 01 AF 01 
2b8e4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2b8e8     B3 01 B3 01 
2b8ec     B5 01 B5 01 
2b8f0     B7 01 B8 01 
2b8f4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2b8f8     BB 01 BC 01 
2b8fc     BC 01 BE 01 
2b900     F7 01 C0 01 
2b904     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2b908     C3 01 C4 01 
2b90c     C5 01 C4 01 
2b910     C7 01 C8 01 
2b914     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2b918     CB 01 CA 01 
2b91c     CD 01 10 01 
2b920     DD 01 01 00 
2b924     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2b928     12 01 F3 01 
2b92c     03 00 F1 01 
2b930     F4 01 F4 01 
2b934     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2b938     22 02 12 01 
2b93c     3A 02 09 00 
2b940     65 2C 3B 02 
2b944     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2b948     66 2C 3F 02 
2b94c     40 02 41 02 
2b950     41 02 46 02 
2b954     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2b958     40 00 81 01 
2b95c     86 01 55 02 
2b960     89 01 8A 01 
2b964     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2b968     5A 02 90 01 
2b96c     5C 02 5D 02 
2b970     5E 02 5F 02 
2b974     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2b978     62 02 94 01 
2b97c     64 02 65 02 
2b980     66 02 67 02 
2b984     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2b988     6A 02 62 2C 
2b98c     6C 02 6D 02 
2b990     6E 02 9C 01 
2b994     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2b998     9D 01 73 02 
2b99c     74 02 9F 01 
2b9a0     76 02 77 02 
2b9a4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2b9a8     7A 02 7B 02 
2b9ac     7C 02 64 2C 
2b9b0     7E 02 7F 02 
2b9b4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2b9b8     82 02 A9 01 
2b9bc     84 02 85 02 
2b9c0     86 02 87 02 
2b9c4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2b9c8     B1 01 B2 01 
2b9cc     45 02 8D 02 
2b9d0     8E 02 8F 02 
2b9d4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2b9d8     B7 01 7B 03 
2b9dc     03 00 FD 03 
2b9e0     FE 03 FF 03 
2b9e4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2b9e8     86 03 88 03 
2b9ec     89 03 8A 03 
2b9f0     B1 03 11 03 
2b9f4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2b9f8     A3 03 A3 03 
2b9fc     C4 03 08 03 
2ba00     CC 03 03 00 
2ba04     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2ba08     8F 03 D8 03 
2ba0c     18 01 F2 03 
2ba10     0A 00 F9 03 
2ba14     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2ba18     F5 03 F6 03 
2ba1c     F7 03 F7 03 
2ba20     F9 03 FA 03 
2ba24     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2ba28     20 03 50 04 
2ba2c     10 07 60 04 
2ba30     22 01 8A 04 
2ba34     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2ba38     0E 01 CF 04 
2ba3c     01 00 C0 04 
2ba40     D0 04 44 01 
2ba44     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2ba48     00 00 7D 1D 
2ba4c     01 00 63 2C 
2ba50     00 1E 96 01 
2ba54     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2ba58     00 1F 08 06 
2ba5c     10 1F 06 06 
2ba60     20 1F 08 06 
2ba64     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2ba68     40 1F 06 06 
2ba6c     51 1F 07 00 
2ba70     59 1F 52 1F 
2ba74     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2ba78     5D 1F 56 1F 
2ba7c     5F 1F 60 1F 
2ba80     08 06 70 1F 
2ba84     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2ba88     BB 1F C8 1F 
2ba8c     C9 1F CA 1F 
2ba90     CB 1F DA 1F 
2ba94     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2ba98     F9 1F EA 1F 
2ba9c     EB 1F FA 1F 
2baa0     FB 1F 80 1F 
2baa4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2baa8     08 06 A0 1F 
2baac     08 06 B0 1F 
2bab0     04 00 B8 1F 
2bab4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2bab8     BC 1F CC 1F 
2babc     01 00 C3 1F 
2bac0     D0 1F 02 06 
2bac4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2bac8     E5 1F 01 00 
2bacc     EC 1F F3 1F 
2bad0     01 00 FC 1F 
2bad4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2bad8     32 21 70 21 
2badc     10 02 84 21 
2bae0     01 00 83 21 
2bae4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2bae8     30 2C 2F 04 
2baec     60 2C 02 01 
2baf0     67 2C 06 01 
2baf4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2baf8     80 2C 64 01 
2bafc     00 2D 26 08 
2bb00     41 FF 1A 03 
2bb04     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2bb08     05 07 09 0E 
2bb0c     10 12 14 16 
2bb10     18 1C 1E 43 
2bb14     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2bb18     41 41 43 45 
2bb1c     45 45 49 49 
2bb20     49 41 41 45 
2bb24     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2bb28     4F 55 55 59 
2bb2c     4F 55 4F 9C 
2bb30     4F 9E 9F 41 
2bb34     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2bb38     A5 A6 A7 A8 
2bb3c     A9 AA AB AC 
2bb40     AD AE AF B0 
2bb44     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2bb48     41 41 41 B8 
2bb4c     B9 BA BB BC 
2bb50     BD BE BF C0 
2bb54     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2bb58     C5 41 41 C8 
2bb5c     C9 CA CB CC 
2bb60     CD CE CF D1 
2bb64     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2bb68     49 49 49 49 
2bb6c     D9 DA DB DC 
2bb70     DD 49 DF 4F 
2bb74     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2bb78     4F E6 E8 E8 
2bb7c     55 55 55 59 
2bb80     59 EE EF F0 
2bb84     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2bb88     F5 F6 F7 F8 
2bb8c     F9 FA FB FC 
2bb90     FD FE FF 00 
2bb94     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2bb98     00 00 00 00 | 	byte	$00, $00, $00, $00
2bb9c     00 00 80 05 | 	long	(88 {_fatfs_cc_v_close})<<20
2bba0     00 00 90 05 | 	long	(89 {_fatfs_cc_v_read})<<20
2bba4     00 00 A0 05 | 	long	(90 {_fatfs_cc_v_write})<<20
2bba8     00 00 B0 05 | 	long	(91 {_fatfs_cc_v_lseek})<<20
2bbac     00 00 C0 05 | 	long	(92 {_fatfs_cc_v_ioctl})<<20
2bbb0     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_flush})<<20
2bbb4     00 00 00 00 
2bbb8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2bbbc     00 00 D0 05 | 	long	(93 {_fatfs_cc_v_open})<<20
2bbc0     00 00 E0 05 | 	long	(94 {_fatfs_cc_v_creat})<<20
2bbc4     00 00 F0 05 | 	long	(95 {_fatfs_cc_v_opendir})<<20
2bbc8     00 00 00 06 | 	long	(96 {_fatfs_cc_v_closedir})<<20
2bbcc     00 00 10 06 | 	long	(97 {_fatfs_cc_v_readdir})<<20
2bbd0     00 00 20 06 | 	long	(98 {_fatfs_cc_v_stat})<<20
2bbd4     00 00 30 06 | 	long	(99 {_fatfs_cc_v_mkdir})<<20
2bbd8     00 00 40 06 | 	long	(100 {_fatfs_cc_v_rmdir})<<20
2bbdc     00 00 50 06 | 	long	(101 {_fatfs_cc_v_remove})<<20
2bbe0     00 00 60 06 | 	long	(102 {_fatfs_cc_v_rename})<<20
2bbe4     00 00 70 06 | 	long	(103 {_fatfs_cc_v_init})<<20
2bbe8     00 00 80 06 | 	long	(104 {_fatfs_cc_v_deinit})<<20
2bbec     FF FF FF FF 
2bbf0     1F 00 00 00 
2bbf4     1C 00 00 00 
2bbf8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2bbfc     1E 00 00 00 
2bc00     1F 00 00 00 
2bc04     1E 00 00 00 
2bc08     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2bc0c     1F 00 00 00 
2bc10     1E 00 00 00 
2bc14     1F 00 00 00 
2bc18     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2bc1c     1F 00 00 00 
2bc20     00 00 00 00 
2bc24     1F 00 00 00 
2bc28     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2bc2c     5A 00 00 00 
2bc30     78 00 00 00 
2bc34     97 00 00 00 
2bc38     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2bc3c     D4 00 00 00 
2bc40     F3 00 00 00 
2bc44     11 01 00 00 
2bc48     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2bc4c     4E 01 00 00 
2bc50     6D 01 00 00 
2bc54     FF FF FF FF 
2bc58     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2bc5c     00 00 00 00 
      ...             
2bc74     00 00 00 00 
2bc78     00 00 00 00 | 	byte	$00[32]
2bc7c     9A BC 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2bc80     9E BC 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2bc84     00 00 00 00 
2bc88     00 00 00 00 
2bc8c     00 00 00 00 
2bc90     00 00 00 00 
2bc94     00 00       | 	byte	$00[18]
2bc96     3F 3F 3F 00 
2bc9a     55 43 54 00 
2bc9e     55 43 54 00 
2bca2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2bca6     00 00 00 00 
2bcaa     00 00 00    | 	byte	$00[7]
2bcad     CA 9A 3B 00 
2bcb1     00 00 00 01 
2bcb5     01 01 01 01 
2bcb9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2bcbd     91 11 11 11 
2bcc1     11 01 01 01 
2bcc5     01 01 01 01 
2bcc9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2bccd     01 01 01 01 
2bcd1     01 01 01    | 	byte	$01[7]
2bcd4     90 20 20 20 
2bcd8     20 20 20 20 
2bcdc     20 20 20 20 
2bce0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2bce4     42 42 42 42 
2bce8     42 42 42 42 
2bcec     42 42       | 	byte	$42[10]
2bcee     20 20 20 20 
2bcf2     20 20 20    | 	byte	$20[7]
2bcf5     44 44 44 44 
2bcf9     44 44       | 	byte	$44[6]
2bcfb     04 04 04 04 
2bcff     04 04 04 04 
2bd03     04 04 04 04 
2bd07     04 04 04 04 
2bd0b     04 04 04 04 | 	byte	$04[20]
2bd0f     20 20 20 20 
2bd13     20 20       | 	byte	$20[6]
2bd15     48 48 48 48 
2bd19     48 48       | 	byte	$48[6]
2bd1b     08 08 08 08 
2bd1f     08 08 08 08 
2bd23     08 08 08 08 
2bd27     08 08 08 08 
2bd2b     08 08 08 08 | 	byte	$08[20]
2bd2f     20 20 20 20 
2bd33     01 00 00 00 
2bd37     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2bd38                 | __methodtable__
2bd38     F4 F7 00 00 | 	long	@_do_no_command
2bd3c     00 9D 00 00 | 	long	@_do_plus
2bd40     E0 A0 00 00 | 	long	@_do_minus
2bd44     A8 A5 00 00 | 	long	@_do_or
2bd48     C0 A6 00 00 | 	long	@_do_mul
2bd4c     4C AC 00 00 | 	long	@_do_fdiv
2bd50     90 A4 00 00 | 	long	@_do_and
2bd54     2C AA 00 00 | 	long	@_do_div
2bd58     14 AE 00 00 | 	long	@_do_mod
2bd5c     34 B0 00 00 | 	long	@_do_shl
2bd60     4C B1 00 00 | 	long	@_do_shr
2bd64     64 B2 00 00 | 	long	@_do_power
2bd68     30 9C 00 00 | 	long	@_do_getvar
2bd6c     98 81 00 00 | 	long	@_do_push
2bd70     88 9B 00 00 | 	long	@_do_assign
2bd74     68 DA 00 00 | 	long	@_do_cls
2bd78     24 96 00 00 | 	long	@_do_new
2bd7c     0C DB 00 00 | 	long	@_do_plot
2bd80     44 DC 00 00 | 	long	@_do_draw
2bd84     2C E6 00 00 | 	long	@_do_print
2bd88     24 DF 00 00 | 	long	@_do_circle
2bd8c     AC DD 00 00 | 	long	@_do_fcircle
2bd90     9C E0 00 00 | 	long	@_do_box
2bd94     44 E4 00 00 | 	long	@_do_frame
2bd98     D4 DA 00 00 | 	long	@_do_color
2bd9c     FC 63 00 00 | 	long	@_do_for
2bda0     28 66 00 00 | 	long	@_do_next
2bda4     88 93 00 00 | 	long	@_do_list
2bda8     5C 90 00 00 | 	long	@_do_run
2bdac     B0 9A 00 00 | 	long	@_do_error
2bdb0     AC 97 00 00 | 	long	@_do_fast_goto
2bdb4     9C 98 00 00 | 	long	@_do_find_goto
2bdb8     AC 9A 00 00 | 	long	@_do_slow_goto
2bdbc     9C CA 00 00 | 	long	@_do_converttoint
2bdc0     DC 87 00 00 | 	long	@_test_csave
2bdc4     30 8B 00 00 | 	long	@_do_save
2bdc8     98 8D 00 00 | 	long	@_do_load
2bdcc     C8 EE 00 00 | 	long	@_do_pinwrite
2bdd0     E0 EE 00 00 | 	long	@_do_waitms
2bdd4     1C F0 00 00 | 	long	@_do_waitvbl
2bdd8     24 F3 00 00 | 	long	@_do_if
2bddc     08 F4 00 00 | 	long	@_do_else
2bde0     2C F4 00 00 | 	long	@_do_nothing
2bde4     2C B4 00 00 | 	long	@_do_eq
2bde8     5C BF 00 00 | 	long	@_do_ge
2bdec     1C C3 00 00 | 	long	@_do_le
2bdf0     EC B7 00 00 | 	long	@_do_gt
2bdf4     AC BB 00 00 | 	long	@_do_lt
2bdf8     DC C6 00 00 | 	long	@_do_ne
2bdfc     6C CC 00 00 | 	long	@_do_rnd
2be00     30 F4 00 00 | 	long	@_do_brun
2be04     E0 F6 00 00 | 	long	@_do_beep
2be08     4C F0 00 00 | 	long	@_do_dir
2be0c     D8 EA 00 00 | 	long	@_do_paper
2be10     60 EB 00 00 | 	long	@_do_ink
2be14     FC EB 00 00 | 	long	@_do_font
2be18     78 EC 00 00 | 	long	@_do_mode
2be1c     4C F6 00 00 | 	long	@_do_mouse
2be20     00 DA 00 00 | 	long	@_do_gettime
2be24     80 F6 00 00 | 	long	@_do_cursor
2be28     B4 F6 00 00 | 	long	@_do_click
2be2c     F0 D8 00 00 | 	long	@_do_mousex
2be30     34 D9 00 00 | 	long	@_do_mousey
2be34     BC D9 00 00 | 	long	@_do_mousek
2be38     78 D9 00 00 | 	long	@_do_mousew
2be3c     34 CE 00 00 | 	long	@_do_sin
2be40     1C D0 00 00 | 	long	@_do_stick
2be44     A0 D1 00 00 | 	long	@_do_strig
2be48     04 D8 00 00 | 	long	@_do_sprite
2be4c     74 D4 00 00 | 	long	@_do_defsprite
2be50     24 D3 00 00 | 	long	@_do_getpixel
2be54     28 F0 00 00 | 	long	@_do_waitclock
2be58     00 F8 00 00 | 	long	@_do_negative
2be5c     84 E2 00 00 | 	long	@_do_fill
2be60     40 28 01 00 | 	long	@_hg010b_spin2_putchar
2be64     70 2C 02 00 | 	long	@__struct___bas_wrap_sender_tx
2be68     B4 2C 02 00 | 	long	@__struct___bas_wrap_sender_rx
2be6c     FC 2C 02 00 | 	long	@__struct___bas_wrap_sender_close
2be70     A0 2B 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2be74     10 2C 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2be78     58 2B 02 00 | 	long	@___strs_cl_pfunc
2be7c     34 89 01 00 | 	long	@__system____root_opendir
2be80     D0 89 01 00 | 	long	@__system____root_closedir
2be84     4C 89 01 00 | 	long	@__system____root_readdir
2be88     D8 89 01 00 | 	long	@__system____root_stat
2be8c     24 82 01 00 | 	long	@__system____default_putc
2be90     A8 81 01 00 | 	long	@__system____default_getc
2be94     CC 82 01 00 | 	long	@__system____default_flush
2be98     60 16 02 00 | 	long	@_fatfs_cc_v_close
2be9c     7C 1A 02 00 | 	long	@_fatfs_cc_v_read
2bea0     90 1B 02 00 | 	long	@_fatfs_cc_v_write
2bea4     70 1C 02 00 | 	long	@_fatfs_cc_v_lseek
2bea8     F8 1C 02 00 | 	long	@_fatfs_cc_v_ioctl
2beac     4C 1D 02 00 | 	long	@_fatfs_cc_v_open
2beb0     C4 15 02 00 | 	long	@_fatfs_cc_v_creat
2beb4     A4 16 02 00 | 	long	@_fatfs_cc_v_opendir
2beb8     18 17 02 00 | 	long	@_fatfs_cc_v_closedir
2bebc     58 17 02 00 | 	long	@_fatfs_cc_v_readdir
2bec0     8C 18 02 00 | 	long	@_fatfs_cc_v_stat
2bec4     0C 1D 02 00 | 	long	@_fatfs_cc_v_mkdir
2bec8     2C 1D 02 00 | 	long	@_fatfs_cc_v_rmdir
2becc     1C 1D 02 00 | 	long	@_fatfs_cc_v_remove
2bed0     3C 1D 02 00 | 	long	@_fatfs_cc_v_rename
2bed4     5C 1E 02 00 | 	long	@_fatfs_cc_v_init
2bed8     64 1E 02 00 | 	long	@_fatfs_cc_v_deinit
2bedc     78 3B 01 00 | 	long	@__system___tx
2bee0     B8 3B 01 00 | 	long	@__system___rx
2bee4     00 95 01 00 | 	long	@__system___rxtxioctl_0461
2bee8     58 95 01 00 | 	long	@__system____dummy_flush_0462
2beec     2C 1E 02 00 | 	long	@_fatfs_cc_v_flush
2bef0                 | __heap_base
2bef0     00 00 00 00 
      ...             
6a6f0     00 00 00 00 
6a6f4     00 00 00 00 | 	long	0[64002]
6a6f8                 | objmem
6a6f8     00 00 00 00 
      ...             
74ba0     00 00 00 00 
74ba4     00 00 00 00 | 	long	0[10540]
74ba8                 | stackspace
74ba8     00 00 00 00 | 	long	0[1]
74bac 100             | 	org	COG_BSS_START
74bac 100             | _var01
74bac 100             | 	res	1
74bac 101             | _var02
74bac 101             | 	res	1
74bac 102             | _var03
74bac 102             | 	res	1
74bac 103             | _var04
74bac 103             | 	res	1
74bac 104             | _var05
74bac 104             | 	res	1
74bac 105             | _var06
74bac 105             | 	res	1
74bac 106             | _var07
74bac 106             | 	res	1
74bac 107             | _var08
74bac 107             | 	res	1
74bac 108             | _var09
74bac 108             | 	res	1
74bac 109             | arg01
74bac 109             | 	res	1
74bac 10a             | arg02
74bac 10a             | 	res	1
74bac 10b             | arg03
74bac 10b             | 	res	1
74bac 10c             | arg04
74bac 10c             | 	res	1
74bac 10d             | arg05
74bac 10d             | 	res	1
74bac 10e             | arg06
74bac 10e             | 	res	1
74bac 10f             | local01
74bac 10f             | 	res	1
74bac 110             | local02
74bac 110             | 	res	1
74bac 111             | local03
74bac 111             | 	res	1
74bac 112             | local04
74bac 112             | 	res	1
74bac 113             | local05
74bac 113             | 	res	1
74bac 114             | local06
74bac 114             | 	res	1
74bac 115             | local07
74bac 115             | 	res	1
74bac 116             | local08
74bac 116             | 	res	1
74bac 117             | local09
74bac 117             | 	res	1
74bac 118             | local10
74bac 118             | 	res	1
74bac 119             | local11
74bac 119             | 	res	1
74bac 11a             | local12
74bac 11a             | 	res	1
74bac 11b             | local13
74bac 11b             | 	res	1
74bac 11c             | local14
74bac 11c             | 	res	1
74bac 11d             | local15
74bac 11d             | 	res	1
74bac 11e             | local16
74bac 11e             | 	res	1
74bac 11f             | local17
74bac 11f             | 	res	1
74bac 120             | local18
74bac 120             | 	res	1
74bac 121             | local19
74bac 121             | 	res	1
74bac 122             | local20
74bac 122             | 	res	1
74bac 123             | local21
74bac 123             | 	res	1
74bac 124             | local22
74bac 124             | 	res	1
74bac 125             | local23
74bac 125             | 	res	1
74bac 126             | local24
74bac 126             | 	res	1
74bac 127             | local25
74bac 127             | 	res	1
74bac 128             | local26
74bac 128             | 	res	1
74bac 129             | local27
74bac 129             | 	res	1
74bac 12a             | local28
74bac 12a             | 	res	1
74bac 12b             | local29
74bac 12b             | 	res	1
74bac 12c             | local30
74bac 12c             | 	res	1
74bac 12d             | local31
74bac 12d             | 	res	1
74bac 12e             | local32
74bac 12e             | 	res	1
74bac 12f             | muldiva_
74bac 12f             | 	res	1
74bac 130             | muldivb_
74bac 130             | 	res	1
74bac 131             | 	fit	480
74bac 131             | 
