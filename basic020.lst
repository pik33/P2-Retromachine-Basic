00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic020.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 20
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 18 20 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec D4 D7 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 1C D6 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 DC BF 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 1C C5 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 FC C8 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 80 4F 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 3C D0 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 90 63 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 40 8B 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa F8 88 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb D0 9A 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 8C 64 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     0C 4D B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     E4 4C B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     BC 4C B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     CC 42 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     1C 43 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     0C 43 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     70 42 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     22 01 00 FF 
00ab4     B2 2A 06 F6 | 	mov	local07, ##@LR__4057
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     2D 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##23520
00adc     B8 6B B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     F0 6A B1 FD | 	call	#__system__LTrim_S
00ae8     2D 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##23520
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     22 01 00 FF 
00af8     B3 1E 06 F6 | 	mov	local01, ##@LR__4058
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     2D 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##23520
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     52 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##42080
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     52 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##42080
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     2D 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##23520
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     2D 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##23520
00b64     22 01 00 FF 
00b68     B4 16 06 F6 | 	mov	arg03, ##@LR__4059
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     DC 6B B1 FD | 	call	#__system__Instr
00b74     52 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##42084
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     52 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##42084
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     2D 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##23520
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     2D 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##23520
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     52 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##42084
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     52 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##42084
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     2D 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##23520
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     2D 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     52 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##42084
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     52 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##42084
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     B8 66 B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     5C 6A B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     94 69 B1 FD | 	call	#__system__LTrim_S
00c44     52 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##42088
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     52 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##42084
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     EC 65 B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     18 6A B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     50 69 B1 FD | 	call	#__system__LTrim_S
00c88     2D 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##23520
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     2D 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##23520
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     22 01 00 FF 
00ca4     B6 1E 06 F6 | 	mov	local01, ##@LR__4060
00ca8     52 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##42088
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     52 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##42088
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     2D 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##23528
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     2D 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##23528
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     52 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##42088
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     52 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##42088
00cf0     22 01 00 FF 
00cf4     B7 14 06 F6 | 	mov	arg02, ##@LR__4061
00cf8     80 45 B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     2D 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     2D 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     2D 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##23528
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     2D 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##23528
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     52 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##42088
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     52 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##42088
00d4c     22 01 00 FF 
00d50     B8 14 06 F6 | 	mov	arg02, ##@LR__4062
00d54     24 45 B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     2D 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     2D 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     2D 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##23528
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     2D 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##23528
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     52 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##42088
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     52 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##42088
00da4     22 01 00 FF 
00da8     B9 14 06 F6 | 	mov	arg02, ##@LR__4063
00dac     CC 44 B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     2D 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     2D 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     2D 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##23528
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     2D 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##23528
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     52 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##42088
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     52 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##42088
00dfc     22 01 00 FF 
00e00     BA 14 06 F6 | 	mov	arg02, ##@LR__4064
00e04     74 44 B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     2D 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     2D 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     2D 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##23520
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     2D 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##23520
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     24 65 B1 FD | 	call	#__system__Mid_S
00e58     52 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##42092
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     52 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##42092
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     52 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##42080
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     52 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##42080
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     52 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##42100
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     52 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##42100
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     2D 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##23520
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     52 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##42100
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     18 64 B1 FD | 	call	#__system__Mid_S
00f64     52 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##42108
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     52 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##42108
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     22 01 00 FF 
00f80     BB 14 06 F6 | 	mov	arg02, ##@LR__4065
00f84     F4 42 B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     2B 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##22480
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     52 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##42108
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     2D 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##23520
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     52 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##42100
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     78 63 B1 FD | 	call	#__system__Mid_S
01004     52 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##42108
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     52 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##42108
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     22 01 00 FF 
01020     BC 14 06 F6 | 	mov	arg02, ##@LR__4066
01024     54 42 B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     2B 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##22480
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     52 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##42108
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     2B 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##22480
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     22 01 00 FF 
01088     BD 14 06 F6 | 	mov	arg02, ##@LR__4067
0108c     2B 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##22480
01094     E4 41 B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     2B 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##22480
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     2B 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##22480
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     A8 41 B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     2B 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##22480
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     2B 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##22480
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     52 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##42108
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     52 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##42108
011b0     22 01 00 FF 
011b4     BF 14 06 F6 | 	mov	arg02, ##@LR__4068
011b8     C0 40 B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     52 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##42108
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     52 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##42108
011dc     22 01 00 FF 
011e0     C1 14 06 F6 | 	mov	arg02, ##@LR__4069
011e4     94 40 B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     2B 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##22480
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     2B 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##22480
01224     C4 60 B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     22 01 00 FF 
01230     C3 14 06 F6 | 	mov	arg02, ##@LR__4070
01234     44 40 B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     2B 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##22480
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     2B 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##22480
0126c     F4 5F B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     22 01 00 FF 
01278     C5 14 06 F6 | 	mov	arg02, ##@LR__4071
0127c     FC 3F B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     2B 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##22480
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     2B 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##22480
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     DC 5F B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     90 3F B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     2B 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##22480
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     2B 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##22480
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     2B 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##22480
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     52 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##42116
01424     22 01 00 FF 
01428     C7 14 06 F6 | 	mov	arg02, ##@LR__4072
0142c     4C 3E B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     52 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##42116
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     52 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##42116
0144c     22 01 00 FF 
01450     C9 14 06 F6 | 	mov	arg02, ##@LR__4073
01454     24 3E B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     52 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##42116
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     52 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##42116
01474     22 01 00 FF 
01478     CB 14 06 F6 | 	mov	arg02, ##@LR__4074
0147c     FC 3D B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     52 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##42116
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     52 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##42116
0149c     22 01 00 FF 
014a0     CD 2E 06 F6 | 	mov	local09, ##@LR__4075
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     D0 3D B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     52 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##42116
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     52 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##42116
014c8     22 01 00 FF 
014cc     CF 36 06 F6 | 	mov	local13, ##@LR__4076
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     A0 3D B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     52 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##42116
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     52 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##42116
014f8     22 01 00 FF 
014fc     D1 36 06 F6 | 	mov	local13, ##@LR__4077
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     74 3D B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     52 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##42116
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     52 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##42116
01524     22 01 00 FF 
01528     D3 46 06 F6 | 	mov	local21, ##@LR__4078
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     48 3D B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     52 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##42120
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     52 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##42120
01550     22 01 00 FF 
01554     D5 48 06 F6 | 	mov	local22, ##@LR__4079
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     18 3D B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     52 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##42116
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     52 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##42116
01580     22 01 00 FF 
01584     D7 48 06 F6 | 	mov	local22, ##@LR__4080
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     EC 3C B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     52 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##42120
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     52 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##42120
015ac     22 01 00 FF 
015b0     D9 40 06 F6 | 	mov	local18, ##@LR__4081
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     BC 3C B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     52 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##42116
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     52 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##42116
015dc     22 01 00 FF 
015e0     DB 40 06 F6 | 	mov	local18, ##@LR__4082
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     90 3C B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     52 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##42120
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##42120
01608     22 01 00 FF 
0160c     DD 4C 06 F6 | 	mov	local24, ##@LR__4083
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     60 3C B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     52 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##42116
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     52 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##42116
01638     22 01 00 FF 
0163c     DF 4E 06 F6 | 	mov	local25, ##@LR__4084
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     30 3C B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     52 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##42120
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     52 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##42120
01668     22 01 00 FF 
0166c     E1 50 06 F6 | 	mov	local26, ##@LR__4085
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     00 3C B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     2B 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##22480
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     52 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##42120
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     F0 3B B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     2B 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##22480
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     2B 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##22480
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     2B 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##22480
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     2B 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##22480
017bc     D8 5E B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     10 5E B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     2B 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##22480
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     2B 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     2B 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##22480
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     2B 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##22480
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     2B 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##22480
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     38 59 B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     22 01 00 FF 
01934     E3 14 06 F6 | 	mov	arg02, ##@LR__4086
01938     40 39 B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     2B 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##22480
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     7C 59 B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     22 01 00 FF 
01978     E5 14 06 F6 | 	mov	arg02, ##@LR__4087
0197c     FC 38 B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     2B 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##22480
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     2B 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##22480
019c0     54 5B B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     2B 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##22480
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     2B 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##22480
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     2B 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##22480
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     2B 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##22480
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     2B 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##22480
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     2B 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##22480
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     2B 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##22480
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     2B 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     2B 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##22480
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     2B 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##22480
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     2B 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##22480
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     2B 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##22480
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     2B 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##22480
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     2B 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##22480
01b78                 | ' 
01b78                 | ' select case s
01b78     22 01 00 FF 
01b7c     AE 15 06 F6 | 	mov	arg02, ##@LR__4144
01b80     F8 36 B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     2B 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##22480
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     2B 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##22480
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     2B 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##22480
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     2B 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##22480
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     2B 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##22480
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     2B 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##22480
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     2B 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##22480
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     2B 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##22480
01c74     38 15 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     2B 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##22480
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     2B 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##22480
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     2B 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##22480
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     2B 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
01cd0     B0 18 B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     52 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##42124
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     2B 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##22480
01d04     54 1B B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     52 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##42128
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     2B 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##22480
01d3c     74 1C B0 FD | 	call	#_isdec
01d40     52 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##42132
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     52 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##42124
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     52 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##42128
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     52 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##42128
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     52 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##42132
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     52 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##42132
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     2B 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##22480
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     2B 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##22480
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     52 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##42124
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     52 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##42124
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     52 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##42128
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     52 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##42128
01dec     52 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##42132
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     52 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     2B 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##22480
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     2B 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##22480
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     52 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##42124
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     52 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##42124
01e50     52 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##42128
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     52 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##42128
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     52 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##42132
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     52 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     2B 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##22480
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     2B 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##22480
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     2B 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##22480
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     2B 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##22480
01edc     94 1B B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     2B 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##22480
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     2B 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##22480
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     F4 53 B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     2B 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##22480
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     2B 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fb4     58 13 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     2B 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##22480
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     2B 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##22480
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     2B 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##22480
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     22 01 00 FF 
02020     E7 2A 06 F6 | 	mov	local07, ##@LR__4088
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     22 01 00 FF 
0204c     E8 14 06 F6 | 	mov	arg02, ##@LR__4089
02050     28 32 B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     2B 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##22480
02070     22 01 00 FF 
02074     ED 14 06 F6 | 	mov	arg02, ##@LR__4090
02078     00 32 B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     2B 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##22480
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     2B 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##22480
02098     22 01 00 FF 
0209c     F2 14 06 F6 | 	mov	arg02, ##@LR__4091
020a0     D8 31 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     2B 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##22492
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     2B 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##22492
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     2B 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##22500
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     2B 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     2B 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##22492
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     2B 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     2B 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##22480
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     2B 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##22480
02110     22 01 00 FF 
02114     F7 28 06 F6 | 	mov	local06, ##@LR__4092
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     5C 31 B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     2B 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##22480
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     2B 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##22480
0213c     22 01 00 FF 
02140     FD 28 06 F6 | 	mov	local06, ##@LR__4093
02144     14 15 02 F6 | 	mov	arg02, local06
02148     30 31 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     2B 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##22480
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     2B 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##22480
02168     22 01 00 FF 
0216c     04 2B 06 F6 | 	mov	local07, ##@LR__4094
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     00 31 B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     2B 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##22492
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     2B 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##22492
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     2B 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     2B 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     2B 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##22488
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     2B 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##22488
021d8     22 01 00 FF 
021dc     0A 15 06 F6 | 	mov	arg02, ##@LR__4095
021e0     98 30 B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     22 01 00 FF 
021f0     0D 1F 06 F6 | 	mov	local01, ##@LR__4096
021f4     2B 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##22488
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     2B 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##22492
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     2B 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##22488
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     2B 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##22488
02228     22 01 00 FF 
0222c     0F 29 06 F6 | 	mov	local06, ##@LR__4097
02230     14 15 02 F6 | 	mov	arg02, local06
02234     44 30 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     22 01 00 FF 
02244     13 1F 06 F6 | 	mov	local01, ##@LR__4098
02248     2B 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##22488
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     2B 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##22492
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     34 17 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     2B 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##22480
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     2B 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##22480
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     3C 60 B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     2D 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##23528
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     2D 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     00 18 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     2D 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##23528
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     2D 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##23528
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     2D 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##23528
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     2D 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##23528
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     2B 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##22500
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     2B 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##22500
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     2D 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##23528
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     2D 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##23528
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     D8 2E B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     F4 F9 B0 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     52 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##42088
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     52 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##42088
02384     22 01 00 FF 
02388     15 15 06 F6 | 	mov	arg02, ##@LR__4099
0238c     EC 2E B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     52 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##42088
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     2D 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##23528
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     2D 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##23528
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     2D 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##23528
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     2D 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##23528
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     2D 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##23528
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     2B 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##22492
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     2B 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##22492
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     2D 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##23528
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     2D 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##23528
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     EC 2D B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     08 F9 B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     52 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##42088
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     52 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##42088
02470     22 01 00 FF 
02474     16 15 06 F6 | 	mov	arg02, ##@LR__4100
02478     00 2E B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     52 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##42088
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     2D 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##23528
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     2D 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##23528
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     2D 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##23528
024cc     2D 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##23528
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     2D 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     2B 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     2B 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     2D 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##23528
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     2D 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##23528
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     E0 2D B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     52 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##42088
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     52 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##42088
02538     22 01 00 FF 
0253c     17 15 06 F6 | 	mov	arg02, ##@LR__4101
02540     38 2D B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     52 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##42088
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     2D 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##23528
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     2D 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##23528
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     2D 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##23528
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     2D 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     2D 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     2B 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##22492
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     2B 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##22492
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     2D 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##23528
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     2D 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##23528
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     18 2D B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     52 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##42088
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     52 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##42088
02600     22 01 00 FF 
02604     18 15 06 F6 | 	mov	arg02, ##@LR__4102
02608     70 2C B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     52 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##42088
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     2D 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##23528
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     2B 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##22484
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     2B 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##22484
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     2B 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##22492
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     2B 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     7C 2C B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     2B 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##22484
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     2B 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##22484
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     2B 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##22492
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     2B 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     3C 81 B1 FD | 	call	#__system___getiolock_0334
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     80 2B B1 FD | 	call	#__system___lockmem
026d4     22 01 00 FF 
026d8     19 15 06 F6 | 	mov	arg02, ##@LR__4103
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     60 38 B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     F8 37 B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     08 81 B1 FD | 	call	#__system___getiolock_0334
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     1C 2B B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     08 66 B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     28 F6 B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     52 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##42088
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     52 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##42088
0274c     22 01 00 FF 
02750     48 15 06 F6 | 	mov	arg02, ##@LR__4104
02754     24 2B B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     52 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##42088
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     2D 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##23520
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     22 01 00 FF 
02788     49 13 06 F6 | 	mov	arg01, ##@LR__4105
0278c                 | ' 
0278c                 | ' write(text)
0278c     A0 1A B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     FC 1B B1 FD | 	call	#_hg010b_spin2_crlf
02794     22 01 00 FF 
02798     4A 13 06 F6 | 	mov	arg01, ##@LR__4106
0279c                 | ' 
0279c                 | ' write(text)
0279c     90 1A B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     EC 1B B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     22 01 00 FF 
027c0     50 15 06 F6 | 	mov	arg02, ##@LR__4107
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     B0 2A B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     22 01 00 FF 
027d8     52 15 06 F6 | 	mov	arg02, ##@LR__4108
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     98 2A B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     22 01 00 FF 
027f0     54 15 06 F6 | 	mov	arg02, ##@LR__4109
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     80 2A B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     22 01 00 FF 
02808     57 15 06 F6 | 	mov	arg02, ##@LR__4110
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     68 2A B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     22 01 00 FF 
02820     5B 15 06 F6 | 	mov	arg02, ##@LR__4111
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     50 2A B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     22 01 00 FF 
02838     5D 15 06 F6 | 	mov	arg02, ##@LR__4112
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     38 2A B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     22 01 00 FF 
02850     5F 15 06 F6 | 	mov	arg02, ##@LR__4113
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     20 2A B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     22 01 00 FF 
02868     63 15 06 F6 | 	mov	arg02, ##@LR__4114
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     08 2A B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     22 01 00 FF 
02880     67 15 06 F6 | 	mov	arg02, ##@LR__4115
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     F0 29 B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     22 01 00 FF 
02898     6B 15 06 F6 | 	mov	arg02, ##@LR__4116
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     D8 29 B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     22 01 00 FF 
028b0     6F 15 06 F6 | 	mov	arg02, ##@LR__4117
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     C0 29 B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     22 01 00 FF 
028c8     73 15 06 F6 | 	mov	arg02, ##@LR__4118
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     A8 29 B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     22 01 00 FF 
028e0     75 15 06 F6 | 	mov	arg02, ##@LR__4119
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     90 29 B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     22 01 00 FF 
028f8     79 15 06 F6 | 	mov	arg02, ##@LR__4120
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     78 29 B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     22 01 00 FF 
02910     7B 15 06 F6 | 	mov	arg02, ##@LR__4121
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     60 29 B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     22 01 00 FF 
02928     7D 15 06 F6 | 	mov	arg02, ##@LR__4122
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     48 29 B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     22 01 00 FF 
02940     80 15 06 F6 | 	mov	arg02, ##@LR__4123
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     30 29 B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     22 01 00 FF 
02958     83 15 06 F6 | 	mov	arg02, ##@LR__4124
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     18 29 B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     22 01 00 FF 
02970     85 15 06 F6 | 	mov	arg02, ##@LR__4125
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     00 29 B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     22 01 00 FF 
02988     87 15 06 F6 | 	mov	arg02, ##@LR__4126
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     E8 28 B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     22 01 00 FF 
029a0     8A 15 06 F6 | 	mov	arg02, ##@LR__4127
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     D0 28 B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     22 01 00 FF 
029b8     8D 15 06 F6 | 	mov	arg02, ##@LR__4128
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     B8 28 B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     22 01 00 FF 
02aa0     90 15 06 F6 | 	mov	arg02, ##@LR__4129
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     D0 27 B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     22 01 00 FF 
02ab8     92 15 06 F6 | 	mov	arg02, ##@LR__4130
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     B8 27 B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     22 01 00 FF 
02ad0     94 15 06 F6 | 	mov	arg02, ##@LR__4131
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     A0 27 B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     22 01 00 FF 
02ae8     96 15 06 F6 | 	mov	arg02, ##@LR__4132
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     88 27 B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     22 01 00 FF 
02b00     98 15 06 F6 | 	mov	arg02, ##@LR__4133
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     70 27 B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     22 01 00 FF 
02b18     9A 15 06 F6 | 	mov	arg02, ##@LR__4134
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     58 27 B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     22 01 00 FF 
02b30     9C 15 06 F6 | 	mov	arg02, ##@LR__4135
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     40 27 B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     22 01 00 FF 
02b48     9E 15 06 F6 | 	mov	arg02, ##@LR__4136
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     28 27 B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     22 01 00 FF 
02b60     A0 15 06 F6 | 	mov	arg02, ##@LR__4137
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     10 27 B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     22 01 00 FF 
02b78     A2 15 06 F6 | 	mov	arg02, ##@LR__4138
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     F8 26 B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     22 01 00 FF 
02b90     A4 15 06 F6 | 	mov	arg02, ##@LR__4139
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     E0 26 B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     22 01 00 FF 
02ba8     A6 15 06 F6 | 	mov	arg02, ##@LR__4140
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     C8 26 B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     22 01 00 FF 
02bc0     A8 15 06 F6 | 	mov	arg02, ##@LR__4141
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     B0 26 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     22 01 00 FF 
02bd8     AA 15 06 F6 | 	mov	arg02, ##@LR__4142
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     98 26 B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     22 01 00 FF 
02bf0     AC 15 06 F6 | 	mov	arg02, ##@LR__4143
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     80 26 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     22 01 00 FF 
02ca0     B0 15 06 F6 | 	mov	arg02, ##@LR__4145
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     D0 25 B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     AC 03 90 AD |  if_e	jmp	#LR__0180
02cb4     22 01 00 FF 
02cb8     B4 15 06 F6 | 	mov	arg02, ##@LR__4146
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     B8 25 B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     9C 03 90 AD |  if_e	jmp	#LR__0181
02ccc     22 01 00 FF 
02cd0     B8 15 06 F6 | 	mov	arg02, ##@LR__4147
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     A0 25 B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     8C 03 90 AD |  if_e	jmp	#LR__0182
02ce4     22 01 00 FF 
02ce8     BD 15 06 F6 | 	mov	arg02, ##@LR__4148
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     88 25 B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     7C 03 90 AD |  if_e	jmp	#LR__0183
02cfc     22 01 00 FF 
02d00     C2 15 06 F6 | 	mov	arg02, ##@LR__4149
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     70 25 B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     6C 03 90 AD |  if_e	jmp	#LR__0184
02d14     22 01 00 FF 
02d18     C8 15 06 F6 | 	mov	arg02, ##@LR__4150
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     58 25 B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     5C 03 90 AD |  if_e	jmp	#LR__0185
02d2c     22 01 00 FF 
02d30     CF 15 06 F6 | 	mov	arg02, ##@LR__4151
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     40 25 B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     4C 03 90 AD |  if_e	jmp	#LR__0186
02d44     22 01 00 FF 
02d48     D7 15 06 F6 | 	mov	arg02, ##@LR__4152
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     28 25 B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     3C 03 90 AD |  if_e	jmp	#LR__0187
02d5c     22 01 00 FF 
02d60     DB 15 06 F6 | 	mov	arg02, ##@LR__4153
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     10 25 B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     2C 03 90 AD |  if_e	jmp	#LR__0188
02d74     22 01 00 FF 
02d78     E1 15 06 F6 | 	mov	arg02, ##@LR__4154
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     F8 24 B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     1C 03 90 AD |  if_e	jmp	#LR__0189
02d8c     22 01 00 FF 
02d90     E7 15 06 F6 | 	mov	arg02, ##@LR__4155
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     E0 24 B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     0C 03 90 AD |  if_e	jmp	#LR__0190
02da4     22 01 00 FF 
02da8     ED 15 06 F6 | 	mov	arg02, ##@LR__4156
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     C8 24 B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     FC 02 90 AD |  if_e	jmp	#LR__0191
02dbc     22 01 00 FF 
02dc0     F2 15 06 F6 | 	mov	arg02, ##@LR__4157
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     B0 24 B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     EC 02 90 AD |  if_e	jmp	#LR__0192
02dd4     22 01 00 FF 
02dd8     F6 15 06 F6 | 	mov	arg02, ##@LR__4158
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     98 24 B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     DC 02 90 AD |  if_e	jmp	#LR__0193
02dec     22 01 00 FF 
02df0     FB 15 06 F6 | 	mov	arg02, ##@LR__4159
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     80 24 B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     CC 02 90 AD |  if_e	jmp	#LR__0194
02e04     23 01 00 FF 
02e08     01 14 06 F6 | 	mov	arg02, ##@LR__4160
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     68 24 B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     BC 02 90 AD |  if_e	jmp	#LR__0195
02e1c     23 01 00 FF 
02e20     06 14 06 F6 | 	mov	arg02, ##@LR__4161
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     50 24 B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     AC 02 90 AD |  if_e	jmp	#LR__0196
02e34     23 01 00 FF 
02e38     0B 14 06 F6 | 	mov	arg02, ##@LR__4162
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     38 24 B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     9C 02 90 AD |  if_e	jmp	#LR__0197
02e4c     23 01 00 FF 
02e50     10 14 06 F6 | 	mov	arg02, ##@LR__4163
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     20 24 B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     8C 02 90 AD |  if_e	jmp	#LR__0198
02e64     23 01 00 FF 
02e68     19 14 06 F6 | 	mov	arg02, ##@LR__4164
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     08 24 B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     7C 02 90 AD |  if_e	jmp	#LR__0199
02e7c     23 01 00 FF 
02e80     20 14 06 F6 | 	mov	arg02, ##@LR__4165
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     F0 23 B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     6C 02 90 AD |  if_e	jmp	#LR__0200
02e94     23 01 00 FF 
02e98     28 14 06 F6 | 	mov	arg02, ##@LR__4166
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     D8 23 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     5C 02 90 AD |  if_e	jmp	#LR__0201
02eac     23 01 00 FF 
02eb0     2B 14 06 F6 | 	mov	arg02, ##@LR__4167
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     C0 23 B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     4C 02 90 AD |  if_e	jmp	#LR__0202
02ec4     23 01 00 FF 
02ec8     30 14 06 F6 | 	mov	arg02, ##@LR__4168
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     A8 23 B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     3C 02 90 AD |  if_e	jmp	#LR__0203
02edc     23 01 00 FF 
02ee0     35 14 06 F6 | 	mov	arg02, ##@LR__4169
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     90 23 B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     2C 02 90 AD |  if_e	jmp	#LR__0204
02ef4     23 01 00 FF 
02ef8     3A 14 06 F6 | 	mov	arg02, ##@LR__4170
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     78 23 B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     1C 02 90 AD |  if_e	jmp	#LR__0205
02f0c     23 01 00 FF 
02f10     3E 14 06 F6 | 	mov	arg02, ##@LR__4171
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     60 23 B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     0C 02 90 AD |  if_e	jmp	#LR__0206
02f24     23 01 00 FF 
02f28     42 14 06 F6 | 	mov	arg02, ##@LR__4172
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     48 23 B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     FC 01 90 AD |  if_e	jmp	#LR__0207
02f3c     23 01 00 FF 
02f40     47 14 06 F6 | 	mov	arg02, ##@LR__4173
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     30 23 B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     EC 01 90 AD |  if_e	jmp	#LR__0208
02f54     23 01 00 FF 
02f58     4D 14 06 F6 | 	mov	arg02, ##@LR__4174
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     18 23 B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     DC 01 90 AD |  if_e	jmp	#LR__0209
02f6c     23 01 00 FF 
02f70     51 14 06 F6 | 	mov	arg02, ##@LR__4175
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     00 23 B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     CC 01 90 AD |  if_e	jmp	#LR__0210
02f84     23 01 00 FF 
02f88     56 14 06 F6 | 	mov	arg02, ##@LR__4176
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     E8 22 B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     BC 01 90 AD |  if_e	jmp	#LR__0211
02f9c     23 01 00 FF 
02fa0     5B 14 06 F6 | 	mov	arg02, ##@LR__4177
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     D0 22 B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     AC 01 90 AD |  if_e	jmp	#LR__0212
02fb4     23 01 00 FF 
02fb8     61 14 06 F6 | 	mov	arg02, ##@LR__4178
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     B8 22 B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     9C 01 90 AD |  if_e	jmp	#LR__0213
02fcc     23 01 00 FF 
02fd0     68 14 06 F6 | 	mov	arg02, ##@LR__4179
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     A0 22 B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     8C 01 90 AD |  if_e	jmp	#LR__0214
02fe4     23 01 00 FF 
02fe8     6E 14 06 F6 | 	mov	arg02, ##@LR__4180
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     88 22 B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     7C 01 90 AD |  if_e	jmp	#LR__0215
02ffc     23 01 00 FF 
03000     78 14 06 F6 | 	mov	arg02, ##@LR__4181
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     70 22 B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     6C 01 90 AD |  if_e	jmp	#LR__0216
03014     23 01 00 FF 
03018     7F 14 06 F6 | 	mov	arg02, ##@LR__4182
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     58 22 B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     5C 01 90 AD |  if_e	jmp	#LR__0217
0302c     23 01 00 FF 
03030     89 14 06 F6 | 	mov	arg02, ##@LR__4183
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     40 22 B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     4C 01 90 AD |  if_e	jmp	#LR__0218
03044     23 01 00 FF 
03048     8E 14 06 F6 | 	mov	arg02, ##@LR__4184
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     28 22 B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     3C 01 90 AD |  if_e	jmp	#LR__0219
0305c     40 01 90 FD | 	jmp	#LR__0220
03060                 | LR__0180
03060     40 FA 05 F6 | 	mov	result1, #64
03064     3C 01 90 FD | 	jmp	#LR__0221
03068                 | LR__0181
03068     41 FA 05 F6 | 	mov	result1, #65
0306c     34 01 90 FD | 	jmp	#LR__0221
03070                 | LR__0182
03070     42 FA 05 F6 | 	mov	result1, #66
03074     2C 01 90 FD | 	jmp	#LR__0221
03078                 | LR__0183
03078     43 FA 05 F6 | 	mov	result1, #67
0307c     24 01 90 FD | 	jmp	#LR__0221
03080                 | LR__0184
03080     44 FA 05 F6 | 	mov	result1, #68
03084     1C 01 90 FD | 	jmp	#LR__0221
03088                 | LR__0185
03088     45 FA 05 F6 | 	mov	result1, #69
0308c     14 01 90 FD | 	jmp	#LR__0221
03090                 | LR__0186
03090     46 FA 05 F6 | 	mov	result1, #70
03094     0C 01 90 FD | 	jmp	#LR__0221
03098                 | LR__0187
03098     47 FA 05 F6 | 	mov	result1, #71
0309c     04 01 90 FD | 	jmp	#LR__0221
030a0                 | LR__0188
030a0     48 FA 05 F6 | 	mov	result1, #72
030a4     FC 00 90 FD | 	jmp	#LR__0221
030a8                 | LR__0189
030a8     49 FA 05 F6 | 	mov	result1, #73
030ac     F4 00 90 FD | 	jmp	#LR__0221
030b0                 | LR__0190
030b0     44 FA 05 F6 | 	mov	result1, #68
030b4     EC 00 90 FD | 	jmp	#LR__0221
030b8                 | LR__0191
030b8     4C FA 05 F6 | 	mov	result1, #76
030bc     E4 00 90 FD | 	jmp	#LR__0221
030c0                 | LR__0192
030c0     4D FA 05 F6 | 	mov	result1, #77
030c4     DC 00 90 FD | 	jmp	#LR__0221
030c8                 | LR__0193
030c8     4E FA 05 F6 | 	mov	result1, #78
030cc     D4 00 90 FD | 	jmp	#LR__0221
030d0                 | LR__0194
030d0     50 FA 05 F6 | 	mov	result1, #80
030d4     CC 00 90 FD | 	jmp	#LR__0221
030d8                 | LR__0195
030d8     51 FA 05 F6 | 	mov	result1, #81
030dc     C4 00 90 FD | 	jmp	#LR__0221
030e0                 | LR__0196
030e0     52 FA 05 F6 | 	mov	result1, #82
030e4     BC 00 90 FD | 	jmp	#LR__0221
030e8                 | LR__0197
030e8     59 FA 05 F6 | 	mov	result1, #89
030ec     B4 00 90 FD | 	jmp	#LR__0221
030f0                 | LR__0198
030f0     55 FA 05 F6 | 	mov	result1, #85
030f4     AC 00 90 FD | 	jmp	#LR__0221
030f8                 | LR__0199
030f8     56 FA 05 F6 | 	mov	result1, #86
030fc     A4 00 90 FD | 	jmp	#LR__0221
03100                 | LR__0200
03100     57 FA 05 F6 | 	mov	result1, #87
03104     9C 00 90 FD | 	jmp	#LR__0221
03108                 | LR__0201
03108     58 FA 05 F6 | 	mov	result1, #88
0310c     94 00 90 FD | 	jmp	#LR__0221
03110                 | LR__0202
03110     5A FA 05 F6 | 	mov	result1, #90
03114     8C 00 90 FD | 	jmp	#LR__0221
03118                 | LR__0203
03118     5B FA 05 F6 | 	mov	result1, #91
0311c     84 00 90 FD | 	jmp	#LR__0221
03120                 | LR__0204
03120     5C FA 05 F6 | 	mov	result1, #92
03124     7C 00 90 FD | 	jmp	#LR__0221
03128                 | LR__0205
03128     5D FA 05 F6 | 	mov	result1, #93
0312c     74 00 90 FD | 	jmp	#LR__0221
03130                 | LR__0206
03130     4A FA 05 F6 | 	mov	result1, #74
03134     6C 00 90 FD | 	jmp	#LR__0221
03138                 | LR__0207
03138     4B FA 05 F6 | 	mov	result1, #75
0313c     64 00 90 FD | 	jmp	#LR__0221
03140                 | LR__0208
03140     5E FA 05 F6 | 	mov	result1, #94
03144     5C 00 90 FD | 	jmp	#LR__0221
03148                 | LR__0209
03148     5F FA 05 F6 | 	mov	result1, #95
0314c     54 00 90 FD | 	jmp	#LR__0221
03150                 | LR__0210
03150     60 FA 05 F6 | 	mov	result1, #96
03154     4C 00 90 FD | 	jmp	#LR__0221
03158                 | LR__0211
03158     61 FA 05 F6 | 	mov	result1, #97
0315c     44 00 90 FD | 	jmp	#LR__0221
03160                 | LR__0212
03160     63 FA 05 F6 | 	mov	result1, #99
03164     3C 00 90 FD | 	jmp	#LR__0221
03168                 | LR__0213
03168     68 FA 05 F6 | 	mov	result1, #104
0316c     34 00 90 FD | 	jmp	#LR__0221
03170                 | LR__0214
03170     69 FA 05 F6 | 	mov	result1, #105
03174     2C 00 90 FD | 	jmp	#LR__0221
03178                 | LR__0215
03178     6C FA 05 F6 | 	mov	result1, #108
0317c     24 00 90 FD | 	jmp	#LR__0221
03180                 | LR__0216
03180     6D FA 05 F6 | 	mov	result1, #109
03184     1C 00 90 FD | 	jmp	#LR__0221
03188                 | LR__0217
03188     70 FA 05 F6 | 	mov	result1, #112
0318c     14 00 90 FD | 	jmp	#LR__0221
03190                 | LR__0218
03190     71 FA 05 F6 | 	mov	result1, #113
03194     0C 00 90 FD | 	jmp	#LR__0221
03198                 | LR__0219
03198     72 FA 05 F6 | 	mov	result1, #114
0319c     04 00 90 FD | 	jmp	#LR__0221
031a0                 | LR__0220
031a0     00 FA 05 F6 | 	mov	result1, #0
031a4                 | LR__0221
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _iscommand_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' function isfunction(s as string) as ubyte
031b0                 | _isfunction
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     23 01 00 FF 
031c0     92 14 06 F6 | 	mov	arg02, ##@LR__4185
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     B0 20 B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     DC 00 90 AD |  if_e	jmp	#LR__0230
031d4     23 01 00 FF 
031d8     96 14 06 F6 | 	mov	arg02, ##@LR__4186
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     98 20 B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     CC 00 90 AD |  if_e	jmp	#LR__0231
031ec     23 01 00 FF 
031f0     9D 14 06 F6 | 	mov	arg02, ##@LR__4187
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     80 20 B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     BC 00 90 AD |  if_e	jmp	#LR__0232
03204     23 01 00 FF 
03208     A4 14 06 F6 | 	mov	arg02, ##@LR__4188
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     68 20 B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     AC 00 90 AD |  if_e	jmp	#LR__0233
0321c     23 01 00 FF 
03220     AB 14 06 F6 | 	mov	arg02, ##@LR__4189
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     50 20 B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     9C 00 90 AD |  if_e	jmp	#LR__0234
03234     23 01 00 FF 
03238     B2 14 06 F6 | 	mov	arg02, ##@LR__4190
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     38 20 B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     8C 00 90 AD |  if_e	jmp	#LR__0235
0324c     23 01 00 FF 
03250     BA 14 06 F6 | 	mov	arg02, ##@LR__4191
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     20 20 B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     7C 00 90 AD |  if_e	jmp	#LR__0236
03264     23 01 00 FF 
03268     BE 14 06 F6 | 	mov	arg02, ##@LR__4192
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     08 20 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     6C 00 90 AD |  if_e	jmp	#LR__0237
0327c     23 01 00 FF 
03280     C4 14 06 F6 | 	mov	arg02, ##@LR__4193
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     F0 1F B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     5C 00 90 AD |  if_e	jmp	#LR__0238
03294     23 01 00 FF 
03298     CA 14 06 F6 | 	mov	arg02, ##@LR__4194
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     D8 1F B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     4C 00 90 AD |  if_e	jmp	#LR__0239
032ac     50 00 90 FD | 	jmp	#LR__0240
032b0                 | LR__0230
032b0     54 FA 05 F6 | 	mov	result1, #84
032b4     4C 00 90 FD | 	jmp	#LR__0241
032b8                 | LR__0231
032b8     64 FA 05 F6 | 	mov	result1, #100
032bc     44 00 90 FD | 	jmp	#LR__0241
032c0                 | LR__0232
032c0     65 FA 05 F6 | 	mov	result1, #101
032c4     3C 00 90 FD | 	jmp	#LR__0241
032c8                 | LR__0233
032c8     66 FA 05 F6 | 	mov	result1, #102
032cc     34 00 90 FD | 	jmp	#LR__0241
032d0                 | LR__0234
032d0     67 FA 05 F6 | 	mov	result1, #103
032d4     2C 00 90 FD | 	jmp	#LR__0241
032d8                 | LR__0235
032d8     62 FA 05 F6 | 	mov	result1, #98
032dc     24 00 90 FD | 	jmp	#LR__0241
032e0                 | LR__0236
032e0     6B FA 05 F6 | 	mov	result1, #107
032e4     1C 00 90 FD | 	jmp	#LR__0241
032e8                 | LR__0237
032e8     6A FA 05 F6 | 	mov	result1, #106
032ec     14 00 90 FD | 	jmp	#LR__0241
032f0                 | LR__0238
032f0     6E FA 05 F6 | 	mov	result1, #110
032f4     0C 00 90 FD | 	jmp	#LR__0241
032f8                 | LR__0239
032f8     6F FA 05 F6 | 	mov	result1, #111
032fc     04 00 90 FD | 	jmp	#LR__0241
03300                 | LR__0240
03300     00 FA 05 F6 | 	mov	result1, #0
03304                 | LR__0241
03304     A7 F0 03 F6 | 	mov	ptra, fp
03308     B2 00 A0 FD | 	call	#popregs_
0330c                 | _isfunction_ret
0330c     2D 00 64 FD | 	ret
03310                 | 
03310                 | ' 
03310                 | ' function isname(s as string) as boolean
03310                 | _isname
03310     0D 4A 05 F6 | 	mov	COUNT_, #13
03314     A8 00 A0 FD | 	call	#pushregs_
03318     09 1F 02 F6 | 	mov	local01, arg01
0331c     09 21 02 F6 | 	mov	local02, arg01
03320     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03324                 | LR__0250
03324     10 FB C9 FA | 	rdbyte	result1, local02 wz
03328     01 20 06 51 |  if_ne	add	local02, #1
0332c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03330                 | LR__0251
03330     09 21 82 F1 | 	sub	local02, arg01
03334     10 FB 01 F6 | 	mov	result1, local02
03338     FD 22 0A F6 | 	mov	local03, result1 wz
0333c     00 FA 05 A6 |  if_e	mov	result1, #0
03340     34 02 90 AD |  if_e	jmp	#LR__0263
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     01 14 06 F6 | 	mov	arg02, #1
0334c     01 16 06 F6 | 	mov	arg03, #1
03350     28 40 B1 FD | 	call	#__system__Mid_S
03354     FD 24 02 F6 | 	mov	local04, result1
03358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03358     23 01 00 FF 
0335c     D3 14 06 F6 | 	mov	arg02, ##@LR__4195
03360     12 13 02 F6 | 	mov	arg01, local04
03364     14 1F B1 FD | 	call	#__system___string_cmp
03368     00 FA 55 F2 | 	cmps	result1, #0 wc
0336c     18 00 90 CD |  if_b	jmp	#LR__0252
03370     23 01 00 FF 
03374     D5 14 06 F6 | 	mov	arg02, ##@LR__4196
03378     12 13 02 F6 | 	mov	arg01, local04
0337c     FC 1E B1 FD | 	call	#__system___string_cmp
03380     01 FA 55 F2 | 	cmps	result1, #1 wc
03384     1C 00 90 CD |  if_b	jmp	#LR__0253
03388                 | LR__0252
03388     23 01 00 FF 
0338c     D7 14 06 F6 | 	mov	arg02, ##@LR__4197
03390     12 13 02 F6 | 	mov	arg01, local04
03394     E4 1E B1 FD | 	call	#__system___string_cmp
03398     00 FA 0D F2 | 	cmp	result1, #0 wz
0339c     00 FA 05 56 |  if_ne	mov	result1, #0
033a0     D4 01 90 5D |  if_ne	jmp	#LR__0263
033a4                 | LR__0253
033a4                 | ' if l>2 then 
033a4     03 22 56 F2 | 	cmps	local03, #3 wc
033a8     C8 01 90 CD |  if_b	jmp	#LR__0262
033ac                 | '   for i=2 to l
033ac     02 26 06 F6 | 	mov	local05, #2
033b0     11 29 02 F6 | 	mov	local06, local03
033b4     01 28 06 F1 | 	add	local06, #1
033b8                 | LR__0254
033b8     14 27 52 F2 | 	cmps	local05, local06 wc
033bc     B4 01 90 3D |  if_ae	jmp	#LR__0261
033c0     0F 13 02 F6 | 	mov	arg01, local01
033c4     13 15 02 F6 | 	mov	arg02, local05
033c8     01 16 06 F6 | 	mov	arg03, #1
033cc     AC 3F B1 FD | 	call	#__system__Mid_S
033d0     FD 24 02 F6 | 	mov	local04, result1
033d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
033d4     11 27 52 F2 | 	cmps	local05, local03 wc
033d8     9C 00 90 3D |  if_ae	jmp	#LR__0257
033dc     23 01 00 FF 
033e0     D9 14 06 F6 | 	mov	arg02, ##@LR__4198
033e4     12 13 02 F6 | 	mov	arg01, local04
033e8     90 1E B1 FD | 	call	#__system___string_cmp
033ec     00 FA 55 F2 | 	cmps	result1, #0 wc
033f0     18 00 90 CD |  if_b	jmp	#LR__0255
033f4     23 01 00 FF 
033f8     DB 14 06 F6 | 	mov	arg02, ##@LR__4199
033fc     12 13 02 F6 | 	mov	arg01, local04
03400     78 1E B1 FD | 	call	#__system___string_cmp
03404     01 FA 55 F2 | 	cmps	result1, #1 wc
03408     6C 00 90 CD |  if_b	jmp	#LR__0257
0340c                 | LR__0255
0340c     23 01 00 FF 
03410     DD 14 06 F6 | 	mov	arg02, ##@LR__4200
03414     12 13 02 F6 | 	mov	arg01, local04
03418     60 1E B1 FD | 	call	#__system___string_cmp
0341c     00 FA 55 F2 | 	cmps	result1, #0 wc
03420     18 00 90 CD |  if_b	jmp	#LR__0256
03424     23 01 00 FF 
03428     DF 14 06 F6 | 	mov	arg02, ##@LR__4201
0342c     12 13 02 F6 | 	mov	arg01, local04
03430     48 1E B1 FD | 	call	#__system___string_cmp
03434     01 FA 55 F2 | 	cmps	result1, #1 wc
03438     3C 00 90 CD |  if_b	jmp	#LR__0257
0343c                 | LR__0256
0343c     23 01 00 FF 
03440     E1 2A 06 F6 | 	mov	local07, ##@LR__4202
03444     12 13 02 F6 | 	mov	arg01, local04
03448     15 15 02 F6 | 	mov	arg02, local07
0344c     2C 1E B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     20 00 90 AD |  if_e	jmp	#LR__0257
03458     23 01 00 FF 
0345c     E3 2C 06 F6 | 	mov	local08, ##@LR__4203
03460     12 13 02 F6 | 	mov	arg01, local04
03464     16 15 02 F6 | 	mov	arg02, local08
03468     10 1E B1 FD | 	call	#__system___string_cmp
0346c     FD 2E 0A F6 | 	mov	local09, result1 wz
03470     00 FA 05 56 |  if_ne	mov	result1, #0
03474     00 01 90 5D |  if_ne	jmp	#LR__0263
03478                 | LR__0257
03478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03478     11 27 0A F2 | 	cmp	local05, local03 wz
0347c     EC 00 90 5D |  if_ne	jmp	#LR__0260
03480     23 01 00 FF 
03484     E5 30 06 F6 | 	mov	local10, ##@LR__4204
03488     12 13 02 F6 | 	mov	arg01, local04
0348c     18 15 02 F6 | 	mov	arg02, local10
03490     E8 1D B1 FD | 	call	#__system___string_cmp
03494     FD 32 02 F6 | 	mov	local11, result1
03498     00 32 56 F2 | 	cmps	local11, #0 wc
0349c     1C 00 90 CD |  if_b	jmp	#LR__0258
034a0     23 01 00 FF 
034a4     E7 14 06 F6 | 	mov	arg02, ##@LR__4205
034a8     12 13 02 F6 | 	mov	arg01, local04
034ac     CC 1D B1 FD | 	call	#__system___string_cmp
034b0     FD 30 02 F6 | 	mov	local10, result1
034b4     01 30 56 F2 | 	cmps	local10, #1 wc
034b8     B0 00 90 CD |  if_b	jmp	#LR__0260
034bc                 | LR__0258
034bc     23 01 00 FF 
034c0     E9 14 06 F6 | 	mov	arg02, ##@LR__4206
034c4     12 13 02 F6 | 	mov	arg01, local04
034c8     B0 1D B1 FD | 	call	#__system___string_cmp
034cc     00 FA 55 F2 | 	cmps	result1, #0 wc
034d0     1C 00 90 CD |  if_b	jmp	#LR__0259
034d4     23 01 00 FF 
034d8     EB 2E 06 F6 | 	mov	local09, ##@LR__4207
034dc     12 13 02 F6 | 	mov	arg01, local04
034e0     17 15 02 F6 | 	mov	arg02, local09
034e4     94 1D B1 FD | 	call	#__system___string_cmp
034e8     01 FA 55 F2 | 	cmps	result1, #1 wc
034ec     7C 00 90 CD |  if_b	jmp	#LR__0260
034f0                 | LR__0259
034f0     23 01 00 FF 
034f4     ED 2E 06 F6 | 	mov	local09, ##@LR__4208
034f8     12 13 02 F6 | 	mov	arg01, local04
034fc     17 15 02 F6 | 	mov	arg02, local09
03500     78 1D B1 FD | 	call	#__system___string_cmp
03504     00 FA 4D F2 | 	cmps	result1, #0 wz
03508     60 00 90 AD |  if_e	jmp	#LR__0260
0350c     23 01 00 FF 
03510     EF 2C 06 F6 | 	mov	local08, ##@LR__4209
03514     12 13 02 F6 | 	mov	arg01, local04
03518     16 15 02 F6 | 	mov	arg02, local08
0351c     5C 1D B1 FD | 	call	#__system___string_cmp
03520     FD 2E 0A F6 | 	mov	local09, result1 wz
03524     44 00 90 AD |  if_e	jmp	#LR__0260
03528     23 01 00 FF 
0352c     F1 34 06 F6 | 	mov	local12, ##@LR__4210
03530     1A 2D 02 F6 | 	mov	local08, local12
03534     12 13 02 F6 | 	mov	arg01, local04
03538     16 15 02 F6 | 	mov	arg02, local08
0353c     3C 1D B1 FD | 	call	#__system___string_cmp
03540     FD 2A 0A F6 | 	mov	local07, result1 wz
03544     24 00 90 AD |  if_e	jmp	#LR__0260
03548     23 01 00 FF 
0354c     F3 36 06 F6 | 	mov	local13, ##@LR__4211
03550     1B 35 02 F6 | 	mov	local12, local13
03554     12 13 02 F6 | 	mov	arg01, local04
03558     1A 15 02 F6 | 	mov	arg02, local12
0355c     1C 1D B1 FD | 	call	#__system___string_cmp
03560     FD 2C 0A F6 | 	mov	local08, result1 wz
03564     00 FA 05 56 |  if_ne	mov	result1, #0
03568     0C 00 90 5D |  if_ne	jmp	#LR__0263
0356c                 | LR__0260
0356c     01 26 06 F1 | 	add	local05, #1
03570     44 FE 9F FD | 	jmp	#LR__0254
03574                 | LR__0261
03574                 | LR__0262
03574                 | ' return true
03574     01 FA 65 F6 | 	neg	result1, #1
03578                 | LR__0263
03578     A7 F0 03 F6 | 	mov	ptra, fp
0357c     B2 00 A0 FD | 	call	#popregs_
03580                 | _isname_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | ' 
03584                 | ' function isnum(s as string) as boolean
03584                 | _isnum
03584     0D 4A 05 F6 | 	mov	COUNT_, #13
03588     A8 00 A0 FD | 	call	#pushregs_
0358c     09 1F 02 F6 | 	mov	local01, arg01
03590     00 20 06 F6 | 	mov	local02, #0
03594     00 22 06 F6 | 	mov	local03, #0
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     09 25 02 F6 | 	mov	local04, arg01
035a0     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
035a4                 | LR__0270
035a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
035a8     01 24 06 51 |  if_ne	add	local04, #1
035ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
035b0                 | LR__0271
035b0     09 25 82 F1 | 	sub	local04, arg01
035b4     12 FB 01 F6 | 	mov	result1, local04
035b8     FD 26 0A F6 | 	mov	local05, result1 wz
035bc     00 FA 05 A6 |  if_e	mov	result1, #0
035c0     8C 02 90 AD |  if_e	jmp	#LR__0282
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     01 14 06 F6 | 	mov	arg02, #1
035cc     01 16 06 F6 | 	mov	arg03, #1
035d0     A8 3D B1 FD | 	call	#__system__Mid_S
035d4     FD 28 02 F6 | 	mov	local06, result1
035d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
035d8     23 01 00 FF 
035dc     F5 14 06 F6 | 	mov	arg02, ##@LR__4212
035e0     14 13 02 F6 | 	mov	arg01, local06
035e4     94 1C B1 FD | 	call	#__system___string_cmp
035e8     00 FA 55 F2 | 	cmps	result1, #0 wc
035ec     18 00 90 CD |  if_b	jmp	#LR__0272
035f0     23 01 00 FF 
035f4     F7 14 06 F6 | 	mov	arg02, ##@LR__4213
035f8     14 13 02 F6 | 	mov	arg01, local06
035fc     7C 1C B1 FD | 	call	#__system___string_cmp
03600     01 FA 55 F2 | 	cmps	result1, #1 wc
03604     78 00 90 CD |  if_b	jmp	#LR__0273
03608                 | LR__0272
03608     23 01 00 FF 
0360c     F9 14 06 F6 | 	mov	arg02, ##@LR__4214
03610     14 13 02 F6 | 	mov	arg01, local06
03614     64 1C B1 FD | 	call	#__system___string_cmp
03618     00 FA 0D F2 | 	cmp	result1, #0 wz
0361c     60 00 90 AD |  if_e	jmp	#LR__0273
03620     23 01 00 FF 
03624     FB 2A 06 F6 | 	mov	local07, ##@LR__4215
03628     14 13 02 F6 | 	mov	arg01, local06
0362c     15 15 02 F6 | 	mov	arg02, local07
03630     48 1C B1 FD | 	call	#__system___string_cmp
03634     00 FA 0D F2 | 	cmp	result1, #0 wz
03638     44 00 90 AD |  if_e	jmp	#LR__0273
0363c     23 01 00 FF 
03640     FD 2C 06 F6 | 	mov	local08, ##@LR__4216
03644     16 2B 02 F6 | 	mov	local07, local08
03648     14 13 02 F6 | 	mov	arg01, local06
0364c     15 15 02 F6 | 	mov	arg02, local07
03650     28 1C B1 FD | 	call	#__system___string_cmp
03654     00 FA 4D F2 | 	cmps	result1, #0 wz
03658     24 00 90 AD |  if_e	jmp	#LR__0273
0365c     23 01 00 FF 
03660     FF 2E 06 F6 | 	mov	local09, ##@LR__4217
03664     17 2D 02 F6 | 	mov	local08, local09
03668     14 13 02 F6 | 	mov	arg01, local06
0366c     16 15 02 F6 | 	mov	arg02, local08
03670     08 1C B1 FD | 	call	#__system___string_cmp
03674     FD 2A 0A F6 | 	mov	local07, result1 wz
03678     00 FA 05 56 |  if_ne	mov	result1, #0
0367c     D0 01 90 5D |  if_ne	jmp	#LR__0282
03680                 | LR__0273
03680                 | ' if m$="." then ds=1
03680     23 01 00 FF 
03684     01 15 06 F6 | 	mov	arg02, ##@LR__4218
03688     14 13 02 F6 | 	mov	arg01, local06
0368c     EC 1B B1 FD | 	call	#__system___string_cmp
03690     00 FA 0D F2 | 	cmp	result1, #0 wz
03694     01 20 06 A6 |  if_e	mov	local02, #1
03698                 | ' if l>1 then 
03698     02 26 56 F2 | 	cmps	local05, #2 wc
0369c     AC 01 90 CD |  if_b	jmp	#LR__0281
036a0                 | '   for i=2 to l
036a0     02 30 06 F6 | 	mov	local10, #2
036a4     13 33 02 F6 | 	mov	local11, local05
036a8     01 32 06 F1 | 	add	local11, #1
036ac                 | LR__0274
036ac     19 31 52 F2 | 	cmps	local10, local11 wc
036b0     98 01 90 3D |  if_ae	jmp	#LR__0280
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     18 15 02 F6 | 	mov	arg02, local10
036bc     01 16 06 F6 | 	mov	arg03, #1
036c0     B8 3C B1 FD | 	call	#__system__Mid_S
036c4     FD 28 02 F6 | 	mov	local06, result1
036c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
036c8     23 01 00 FF 
036cc     03 15 06 F6 | 	mov	arg02, ##@LR__4219
036d0     14 13 02 F6 | 	mov	arg01, local06
036d4     A4 1B B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0275
036e0     23 01 00 FF 
036e4     05 15 06 F6 | 	mov	arg02, ##@LR__4220
036e8     14 13 02 F6 | 	mov	arg01, local06
036ec     8C 1B B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     98 00 90 CD |  if_b	jmp	#LR__0276
036f8                 | LR__0275
036f8     23 01 00 FF 
036fc     07 15 06 F6 | 	mov	arg02, ##@LR__4221
03700     14 13 02 F6 | 	mov	arg01, local06
03704     74 1B B1 FD | 	call	#__system___string_cmp
03708     00 FA 0D F2 | 	cmp	result1, #0 wz
0370c     80 00 90 AD |  if_e	jmp	#LR__0276
03710     23 01 00 FF 
03714     09 2B 06 F6 | 	mov	local07, ##@LR__4222
03718     14 13 02 F6 | 	mov	arg01, local06
0371c     15 15 02 F6 | 	mov	arg02, local07
03720     58 1B B1 FD | 	call	#__system___string_cmp
03724     00 FA 4D F2 | 	cmps	result1, #0 wz
03728     64 00 90 AD |  if_e	jmp	#LR__0276
0372c     23 01 00 FF 
03730     0B 2D 06 F6 | 	mov	local08, ##@LR__4223
03734     16 2B 02 F6 | 	mov	local07, local08
03738     14 13 02 F6 | 	mov	arg01, local06
0373c     15 15 02 F6 | 	mov	arg02, local07
03740     38 1B B1 FD | 	call	#__system___string_cmp
03744     FD 34 0A F6 | 	mov	local12, result1 wz
03748     44 00 90 AD |  if_e	jmp	#LR__0276
0374c     23 01 00 FF 
03750     0D 2F 06 F6 | 	mov	local09, ##@LR__4224
03754     17 2D 02 F6 | 	mov	local08, local09
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     16 15 02 F6 | 	mov	arg02, local08
03760     18 1B B1 FD | 	call	#__system___string_cmp
03764     FD 2A 0A F6 | 	mov	local07, result1 wz
03768     24 00 90 AD |  if_e	jmp	#LR__0276
0376c     23 01 00 FF 
03770     0F 37 06 F6 | 	mov	local13, ##@LR__4225
03774     1B 2F 02 F6 | 	mov	local09, local13
03778     14 13 02 F6 | 	mov	arg01, local06
0377c     17 15 02 F6 | 	mov	arg02, local09
03780     F8 1A B1 FD | 	call	#__system___string_cmp
03784     FD 2C 0A F6 | 	mov	local08, result1 wz
03788     00 FA 05 56 |  if_ne	mov	result1, #0
0378c     C0 00 90 5D |  if_ne	jmp	#LR__0282
03790                 | LR__0276
03790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03790     23 01 00 FF 
03794     11 15 06 F6 | 	mov	arg02, ##@LR__4226
03798     14 13 02 F6 | 	mov	arg01, local06
0379c     DC 1A B1 FD | 	call	#__system___string_cmp
037a0     00 FA 0D F2 | 	cmp	result1, #0 wz
037a4     38 00 90 5D |  if_ne	jmp	#LR__0277
037a8     18 15 02 F6 | 	mov	arg02, local10
037ac     01 14 86 F1 | 	sub	arg02, #1
037b0     0F 13 02 F6 | 	mov	arg01, local01
037b4     01 16 06 F6 | 	mov	arg03, #1
037b8     C0 3B B1 FD | 	call	#__system__Mid_S
037bc     FD 12 02 F6 | 	mov	arg01, result1
037c0     54 3D B1 FD | 	call	#__system__LCase_S
037c4     FD 12 02 F6 | 	mov	arg01, result1
037c8     23 01 00 FF 
037cc     13 15 06 F6 | 	mov	arg02, ##@LR__4227
037d0     A8 1A B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     70 00 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0277
037e0                 | '     if m$="." then ds+=1: if ds>1 then return false
037e0     23 01 00 FF 
037e4     15 15 06 F6 | 	mov	arg02, ##@LR__4228
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     8C 1A B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A1 |  if_e	add	local02, #1
037f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
037fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03804     23 01 00 FF 
03808     17 15 06 F6 | 	mov	arg02, ##@LR__4229
0380c     14 13 02 F6 | 	mov	arg01, local06
03810     68 1A B1 FD | 	call	#__system___string_cmp
03814     00 FA 4D F2 | 	cmps	result1, #0 wz
03818     18 00 90 AD |  if_e	jmp	#LR__0278
0381c     23 01 00 FF 
03820     19 15 06 F6 | 	mov	arg02, ##@LR__4230
03824     14 13 02 F6 | 	mov	arg01, local06
03828     50 1A B1 FD | 	call	#__system___string_cmp
0382c     00 FA 4D F2 | 	cmps	result1, #0 wz
03830     10 00 90 5D |  if_ne	jmp	#LR__0279
03834                 | LR__0278
03834     01 22 06 F1 | 	add	local03, #1
03838     02 22 56 F2 | 	cmps	local03, #2 wc
0383c     00 FA 05 36 |  if_ae	mov	result1, #0
03840     0C 00 90 3D |  if_ae	jmp	#LR__0282
03844                 | LR__0279
03844     01 30 06 F1 | 	add	local10, #1
03848     60 FE 9F FD | 	jmp	#LR__0274
0384c                 | LR__0280
0384c                 | LR__0281
0384c                 | ' return true
0384c     01 FA 65 F6 | 	neg	result1, #1
03850                 | LR__0282
03850     A7 F0 03 F6 | 	mov	ptra, fp
03854     B2 00 A0 FD | 	call	#popregs_
03858                 | _isnum_ret
03858     2D 00 64 FD | 	ret
0385c                 | 
0385c                 | '   
0385c                 | ' function isint(s as string) as boolean
0385c                 | _isint
0385c     05 4A 05 F6 | 	mov	COUNT_, #5
03860     A8 00 A0 FD | 	call	#pushregs_
03864     09 1F 02 F6 | 	mov	local01, arg01
03868     09 21 02 F6 | 	mov	local02, arg01
0386c     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
03870                 | LR__0290
03870     10 FB C9 FA | 	rdbyte	result1, local02 wz
03874     01 20 06 51 |  if_ne	add	local02, #1
03878     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
0387c                 | LR__0291
0387c     09 21 82 F1 | 	sub	local02, arg01
03880     10 FB 01 F6 | 	mov	result1, local02
03884     FD 20 0A F6 | 	mov	local02, result1 wz
03888     00 FA 05 A6 |  if_e	mov	result1, #0
0388c     18 01 90 AD |  if_e	jmp	#LR__0299
03890     0F 13 02 F6 | 	mov	arg01, local01
03894     01 14 06 F6 | 	mov	arg02, #1
03898     01 16 06 F6 | 	mov	arg03, #1
0389c     DC 3A B1 FD | 	call	#__system__Mid_S
038a0     FD 22 02 F6 | 	mov	local03, result1
038a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038a4     23 01 00 FF 
038a8     1B 15 06 F6 | 	mov	arg02, ##@LR__4231
038ac     11 13 02 F6 | 	mov	arg01, local03
038b0     C8 19 B1 FD | 	call	#__system___string_cmp
038b4     00 FA 55 F2 | 	cmps	result1, #0 wc
038b8     18 00 90 CD |  if_b	jmp	#LR__0292
038bc     23 01 00 FF 
038c0     1D 15 06 F6 | 	mov	arg02, ##@LR__4232
038c4     11 13 02 F6 | 	mov	arg01, local03
038c8     B0 19 B1 FD | 	call	#__system___string_cmp
038cc     01 FA 55 F2 | 	cmps	result1, #1 wc
038d0     4C 00 90 CD |  if_b	jmp	#LR__0293
038d4                 | LR__0292
038d4     23 01 00 FF 
038d8     1F 15 06 F6 | 	mov	arg02, ##@LR__4233
038dc     11 13 02 F6 | 	mov	arg01, local03
038e0     98 19 B1 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     34 00 90 AD |  if_e	jmp	#LR__0293
038ec     23 01 00 FF 
038f0     21 15 06 F6 | 	mov	arg02, ##@LR__4234
038f4     11 13 02 F6 | 	mov	arg01, local03
038f8     80 19 B1 FD | 	call	#__system___string_cmp
038fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03900     1C 00 90 AD |  if_e	jmp	#LR__0293
03904     23 01 00 FF 
03908     23 15 06 F6 | 	mov	arg02, ##@LR__4235
0390c     11 13 02 F6 | 	mov	arg01, local03
03910     68 19 B1 FD | 	call	#__system___string_cmp
03914     00 FA 0D F2 | 	cmp	result1, #0 wz
03918     00 FA 05 56 |  if_ne	mov	result1, #0
0391c     88 00 90 5D |  if_ne	jmp	#LR__0299
03920                 | LR__0293
03920                 | ' 
03920                 | ' if l>1 then 
03920     02 20 56 F2 | 	cmps	local02, #2 wc
03924     7C 00 90 CD |  if_b	jmp	#LR__0298
03928                 | '   for i=2 to l
03928     02 24 06 F6 | 	mov	local04, #2
0392c     10 27 02 F6 | 	mov	local05, local02
03930     01 26 06 F1 | 	add	local05, #1
03934                 | LR__0294
03934     13 25 52 F2 | 	cmps	local04, local05 wc
03938     68 00 90 3D |  if_ae	jmp	#LR__0297
0393c     0F 13 02 F6 | 	mov	arg01, local01
03940     12 15 02 F6 | 	mov	arg02, local04
03944     01 16 06 F6 | 	mov	arg03, #1
03948     30 3A B1 FD | 	call	#__system__Mid_S
0394c     FD 22 02 F6 | 	mov	local03, result1
03950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03950     23 01 00 FF 
03954     25 15 06 F6 | 	mov	arg02, ##@LR__4236
03958     11 13 02 F6 | 	mov	arg01, local03
0395c     1C 19 B1 FD | 	call	#__system___string_cmp
03960     00 FA 55 F2 | 	cmps	result1, #0 wc
03964     18 00 90 CD |  if_b	jmp	#LR__0295
03968     23 01 00 FF 
0396c     27 15 06 F6 | 	mov	arg02, ##@LR__4237
03970     11 13 02 F6 | 	mov	arg01, local03
03974     04 19 B1 FD | 	call	#__system___string_cmp
03978     01 FA 55 F2 | 	cmps	result1, #1 wc
0397c     1C 00 90 CD |  if_b	jmp	#LR__0296
03980                 | LR__0295
03980     23 01 00 FF 
03984     29 15 06 F6 | 	mov	arg02, ##@LR__4238
03988     11 13 02 F6 | 	mov	arg01, local03
0398c     EC 18 B1 FD | 	call	#__system___string_cmp
03990     00 FA 0D F2 | 	cmp	result1, #0 wz
03994     00 FA 05 56 |  if_ne	mov	result1, #0
03998     0C 00 90 5D |  if_ne	jmp	#LR__0299
0399c                 | LR__0296
0399c     01 24 06 F1 | 	add	local04, #1
039a0     90 FF 9F FD | 	jmp	#LR__0294
039a4                 | LR__0297
039a4                 | LR__0298
039a4                 | ' return true
039a4     01 FA 65 F6 | 	neg	result1, #1
039a8                 | LR__0299
039a8     A7 F0 03 F6 | 	mov	ptra, fp
039ac     B2 00 A0 FD | 	call	#popregs_
039b0                 | _isint_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | ' 
039b4                 | ' function isdec(s as string) as boolean
039b4                 | _isdec
039b4     05 4A 05 F6 | 	mov	COUNT_, #5
039b8     A8 00 A0 FD | 	call	#pushregs_
039bc     09 1F 02 F6 | 	mov	local01, arg01
039c0     09 21 02 F6 | 	mov	local02, arg01
039c4     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
039c8                 | LR__0300
039c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
039cc     01 20 06 51 |  if_ne	add	local02, #1
039d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
039d4                 | LR__0301
039d4     09 21 82 F1 | 	sub	local02, arg01
039d8     10 FB 01 F6 | 	mov	result1, local02
039dc     FD 20 0A F6 | 	mov	local02, result1 wz
039e0     00 FA 05 A6 |  if_e	mov	result1, #0
039e4     80 00 90 AD |  if_e	jmp	#LR__0306
039e8                 | ' for i=1 to l
039e8     01 22 06 F6 | 	mov	local03, #1
039ec     10 25 02 F6 | 	mov	local04, local02
039f0     01 24 06 F1 | 	add	local04, #1
039f4                 | LR__0302
039f4     12 23 52 F2 | 	cmps	local03, local04 wc
039f8     68 00 90 3D |  if_ae	jmp	#LR__0305
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     11 15 02 F6 | 	mov	arg02, local03
03a04     01 16 06 F6 | 	mov	arg03, #1
03a08     70 39 B1 FD | 	call	#__system__Mid_S
03a0c     FD 26 02 F6 | 	mov	local05, result1
03a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03a10     23 01 00 FF 
03a14     2B 15 06 F6 | 	mov	arg02, ##@LR__4239
03a18     13 13 02 F6 | 	mov	arg01, local05
03a1c     5C 18 B1 FD | 	call	#__system___string_cmp
03a20     00 FA 55 F2 | 	cmps	result1, #0 wc
03a24     18 00 90 CD |  if_b	jmp	#LR__0303
03a28     23 01 00 FF 
03a2c     2D 15 06 F6 | 	mov	arg02, ##@LR__4240
03a30     13 13 02 F6 | 	mov	arg01, local05
03a34     44 18 B1 FD | 	call	#__system___string_cmp
03a38     01 FA 55 F2 | 	cmps	result1, #1 wc
03a3c     1C 00 90 CD |  if_b	jmp	#LR__0304
03a40                 | LR__0303
03a40     23 01 00 FF 
03a44     2F 15 06 F6 | 	mov	arg02, ##@LR__4241
03a48     13 13 02 F6 | 	mov	arg01, local05
03a4c     2C 18 B1 FD | 	call	#__system___string_cmp
03a50     00 FA 0D F2 | 	cmp	result1, #0 wz
03a54     00 FA 05 56 |  if_ne	mov	result1, #0
03a58     0C 00 90 5D |  if_ne	jmp	#LR__0306
03a5c                 | LR__0304
03a5c     01 22 06 F1 | 	add	local03, #1
03a60     90 FF 9F FD | 	jmp	#LR__0302
03a64                 | LR__0305
03a64                 | ' return true
03a64     01 FA 65 F6 | 	neg	result1, #1
03a68                 | LR__0306
03a68     A7 F0 03 F6 | 	mov	ptra, fp
03a6c     B2 00 A0 FD | 	call	#popregs_
03a70                 | _isdec_ret
03a70     2D 00 64 FD | 	ret
03a74                 | 
03a74                 | ' 
03a74                 | ' function isstring(s as string) as boolean
03a74                 | _isstring
03a74     01 4A 05 F6 | 	mov	COUNT_, #1
03a78     A8 00 A0 FD | 	call	#pushregs_
03a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03a7c     09 1F 02 F6 | 	mov	local01, arg01
03a80     01 14 06 F6 | 	mov	arg02, #1
03a84     DC 37 B1 FD | 	call	#__system__Left_S
03a88     FD 12 02 F6 | 	mov	arg01, result1
03a8c     23 01 00 FF 
03a90     31 15 06 F6 | 	mov	arg02, ##@LR__4242
03a94     E4 17 B1 FD | 	call	#__system___string_cmp
03a98     00 FA 4D F2 | 	cmps	result1, #0 wz
03a9c     28 00 90 5D |  if_ne	jmp	#LR__0310
03aa0     0F 13 02 F6 | 	mov	arg01, local01
03aa4     01 14 06 F6 | 	mov	arg02, #1
03aa8     40 38 B1 FD | 	call	#__system__Right_S
03aac     FD 12 02 F6 | 	mov	arg01, result1
03ab0     23 01 00 FF 
03ab4     33 15 06 F6 | 	mov	arg02, ##@LR__4243
03ab8     C0 17 B1 FD | 	call	#__system___string_cmp
03abc     00 FA 4D F2 | 	cmps	result1, #0 wz
03ac0     01 FA 65 A6 |  if_e	neg	result1, #1
03ac4     04 00 90 AD |  if_e	jmp	#LR__0311
03ac8                 | LR__0310
03ac8     00 FA 05 F6 | 	mov	result1, #0
03acc                 | LR__0311
03acc     A7 F0 03 F6 | 	mov	ptra, fp
03ad0     B2 00 A0 FD | 	call	#popregs_
03ad4                 | _isstring_ret
03ad4     2D 00 64 FD | 	ret
03ad8                 | 
03ad8                 | ' 
03ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '----- delete a line from a program
03ad8                 | ' 
03ad8                 | ' function deleteline(aline as ulong) as integer
03ad8                 | _deleteline
03ad8     03 4A 05 F6 | 	mov	COUNT_, #3
03adc     A8 00 A0 FD | 	call	#pushregs_
03ae0     2C F0 07 F1 | 	add	ptra, #44
03ae4     04 4E 05 F1 | 	add	fp, #4
03ae8     A7 12 62 FC | 	wrlong	arg01, fp
03aec     41 00 00 FF 
03af0     48 E4 05 F1 | 	add	objptr, ##33352
03af4     F2 1E 02 FB | 	rdlong	local01, objptr
03af8     0C 4E 05 F1 | 	add	fp, #12
03afc     A7 1E 62 FC | 	wrlong	local01, fp
03b00     10 4E 85 F1 | 	sub	fp, #16
03b04                 | ' 
03b04                 | ' 
03b04                 | ' searchptr=programstart
03b04                 | ' 
03b04                 | ' do
03b04     35 00 00 FF 
03b08     88 E5 85 F1 | 	sub	objptr, ##27528
03b0c                 | LR__0320
03b0c     14 4E 05 F1 | 	add	fp, #20
03b10     A7 12 02 F6 | 	mov	arg01, fp
03b14     04 4E 85 F1 | 	sub	fp, #4
03b18     A7 14 02 FB | 	rdlong	arg02, fp
03b1c     10 4E 85 F1 | 	sub	fp, #16
03b20     18 16 06 F6 | 	mov	arg03, #24
03b24     40 0C B1 FD | 	call	#_psram_spin2_read1
03b28     10 4E 05 F1 | 	add	fp, #16
03b2c     A7 1E 02 FB | 	rdlong	local01, fp
03b30     08 4E 85 F1 | 	sub	fp, #8
03b34     A7 1E 62 FC | 	wrlong	local01, fp
03b38     20 4E 05 F1 | 	add	fp, #32
03b3c     A7 1E 02 FB | 	rdlong	local01, fp
03b40     18 4E 85 F1 | 	sub	fp, #24
03b44     A7 1E 62 FC | 	wrlong	local01, fp
03b48     04 4E 05 F1 | 	add	fp, #4
03b4c     A7 1E 02 FB | 	rdlong	local01, fp
03b50     10 4E 85 F1 | 	sub	fp, #16
03b54     A7 16 02 FB | 	rdlong	arg03, fp
03b58     04 4E 85 F1 | 	sub	fp, #4
03b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03b60     28 4E 05 C1 |  if_b	add	fp, #40
03b64     A7 20 02 CB |  if_b	rdlong	local02, fp
03b68     28 4E 85 C1 |  if_b	sub	fp, #40
03b6c     FF FF 3F CF 
03b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03b78     0B 00 00 FF 
03b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
03b80                 | ' 
03b80                 | ' 
03b80                 | ' if header(0)<>aline then return -1
03b80     14 4E 05 F1 | 	add	fp, #20
03b84     A7 1E 02 FB | 	rdlong	local01, fp
03b88     10 4E 85 F1 | 	sub	fp, #16
03b8c     A7 22 02 FB | 	rdlong	local03, fp
03b90     04 4E 85 F1 | 	sub	fp, #4
03b94     11 1F 0A F2 | 	cmp	local01, local03 wz
03b98     01 FA 65 56 |  if_ne	neg	result1, #1
03b9c     4C 03 90 5D |  if_ne	jmp	#LR__0326
03ba0     08 4E 05 F1 | 	add	fp, #8
03ba4     A7 12 02 FB | 	rdlong	arg01, fp
03ba8     08 4E 85 F1 | 	sub	fp, #8
03bac     01 14 66 F6 | 	neg	arg02, #1
03bb0     01 16 06 F6 | 	mov	arg03, #1
03bb4     00 18 06 F6 | 	mov	arg04, #0
03bb8     0B 00 00 FF 
03bbc     C0 E4 05 F1 | 	add	objptr, ##5824
03bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
03bc0     04 1A 06 F6 | 	mov	arg05, #4
03bc4     D8 0C B1 FD | 	call	#_psram_spin2_fill
03bc8     0B 00 00 FF 
03bcc     C0 E4 85 F1 | 	sub	objptr, ##5824
03bd0                 | ' 
03bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03bd0                 | ' 
03bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03bd0     28 4E 05 F1 | 	add	fp, #40
03bd4     A7 1E 02 FB | 	rdlong	local01, fp
03bd8     28 4E 85 F1 | 	sub	fp, #40
03bdc     FF FF 3F FF 
03be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03be4     24 4E 05 A1 |  if_e	add	fp, #36
03be8     A7 22 02 AB |  if_e	rdlong	local03, fp
03bec     24 4E 85 A1 |  if_e	sub	fp, #36
03bf0     FF FF 7F AF 
03bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03bf8     90 00 90 5D |  if_ne	jmp	#LR__0321
03bfc     41 00 00 FF 
03c00     48 E4 05 F1 | 	add	objptr, ##33352
03c04     F2 00 68 FC | 	wrlong	#0, objptr
03c08     07 00 00 FF 
03c0c     28 E4 85 F1 | 	sub	objptr, ##3624
03c10     F2 00 68 FC | 	wrlong	#0, objptr
03c14     07 00 00 FF 
03c18     2C E4 05 F1 | 	add	objptr, ##3628
03c1c     F2 00 68 FC | 	wrlong	#0, objptr
03c20     04 E4 05 F1 | 	add	objptr, #4
03c24     FF FF FF FF 
03c28     F2 FE 6B FC | 	wrlong	##-1, objptr
03c2c     00 12 06 F6 | 	mov	arg01, #0
03c30     10 E4 85 F1 | 	sub	objptr, #16
03c34     F2 00 68 FC | 	wrlong	#0, objptr
03c38     01 14 66 F6 | 	neg	arg02, #1
03c3c     01 16 06 F6 | 	mov	arg03, #1
03c40     00 18 06 F6 | 	mov	arg04, #0
03c44     35 00 00 FF 
03c48     80 E5 85 F1 | 	sub	objptr, ##27520
03c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c4c     04 1A 06 F6 | 	mov	arg05, #4
03c50     4C 0C B1 FD | 	call	#_psram_spin2_fill
03c54     10 12 06 F6 | 	mov	arg01, #16
03c58     01 14 66 F6 | 	neg	arg02, #1
03c5c     01 16 06 F6 | 	mov	arg03, #1
03c60     00 18 06 F6 | 	mov	arg04, #0
03c64                 | '     return fill(addr, pattern, count, listPtr, 4)
03c64     04 1A 06 F6 | 	mov	arg05, #4
03c68     34 0C B1 FD | 	call	#_psram_spin2_fill
03c6c     14 12 06 F6 | 	mov	arg01, #20
03c70     1E 14 CE F9 | 	bmask	arg02, #30
03c74     01 16 06 F6 | 	mov	arg03, #1
03c78     00 18 06 F6 | 	mov	arg04, #0
03c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c7c     04 1A 06 F6 | 	mov	arg05, #4
03c80     1C 0C B1 FD | 	call	#_psram_spin2_fill
03c84     0B 00 00 FF 
03c88     C0 E4 85 F1 | 	sub	objptr, ##5824
03c8c                 | LR__0321
03c8c                 | ' 
03c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03c8c     28 4E 05 F1 | 	add	fp, #40
03c90     A7 1E 02 FB | 	rdlong	local01, fp
03c94     28 4E 85 F1 | 	sub	fp, #40
03c98     FF FF 3F FF 
03c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ca0     88 00 90 5D |  if_ne	jmp	#LR__0322
03ca4     24 4E 05 F1 | 	add	fp, #36
03ca8     A7 22 02 FB | 	rdlong	local03, fp
03cac     24 4E 85 F1 | 	sub	fp, #36
03cb0     FF FF 7F FF 
03cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03cb8     70 00 90 AD |  if_e	jmp	#LR__0322
03cbc     24 4E 05 F1 | 	add	fp, #36
03cc0     A7 12 02 FB | 	rdlong	arg01, fp
03cc4     24 4E 85 F1 | 	sub	fp, #36
03cc8     14 12 06 F1 | 	add	arg01, #20
03ccc     1E 14 CE F9 | 	bmask	arg02, #30
03cd0     01 16 06 F6 | 	mov	arg03, #1
03cd4     00 18 06 F6 | 	mov	arg04, #0
03cd8     0B 00 00 FF 
03cdc     C0 E4 05 F1 | 	add	objptr, ##5824
03ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ce0     04 1A 06 F6 | 	mov	arg05, #4
03ce4     B8 0B B1 FD | 	call	#_psram_spin2_fill
03ce8     24 4E 05 F1 | 	add	fp, #36
03cec     A7 1E 02 FB | 	rdlong	local01, fp
03cf0     35 00 00 FF 
03cf4     90 E5 05 F1 | 	add	objptr, ##27536
03cf8     F2 1E 62 FC | 	wrlong	local01, objptr
03cfc     41 00 00 FF 
03d00     50 E4 85 F1 | 	sub	objptr, ##33360
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     24 4E 85 F1 | 	sub	fp, #36
03d0c     0C E2 B0 FD | 	call	#_pslpeek
03d10     41 00 00 FF 
03d14     4C E4 05 F1 | 	add	objptr, ##33356
03d18     F2 FA 61 FC | 	wrlong	result1, objptr
03d1c     41 00 00 FF 
03d20     4C E4 85 F1 | 	sub	objptr, ##33356
03d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03d24                 | '   lastline=pslpeek(header(4))
03d24                 | '   return 0
03d24     00 FA 05 F6 | 	mov	result1, #0
03d28     C0 01 90 FD | 	jmp	#LR__0326
03d2c                 | LR__0322
03d2c                 | ' 
03d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03d2c     28 4E 05 F1 | 	add	fp, #40
03d30     A7 1E 02 FB | 	rdlong	local01, fp
03d34     28 4E 85 F1 | 	sub	fp, #40
03d38     FF FF 3F FF 
03d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d40     6C 00 90 AD |  if_e	jmp	#LR__0323
03d44     24 4E 05 F1 | 	add	fp, #36
03d48     A7 22 02 FB | 	rdlong	local03, fp
03d4c     24 4E 85 F1 | 	sub	fp, #36
03d50     FF FF 7F FF 
03d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03d58     54 00 90 5D |  if_ne	jmp	#LR__0323
03d5c     28 4E 05 F1 | 	add	fp, #40
03d60     A7 12 02 FB | 	rdlong	arg01, fp
03d64     28 4E 85 F1 | 	sub	fp, #40
03d68     10 12 06 F1 | 	add	arg01, #16
03d6c     01 14 66 F6 | 	neg	arg02, #1
03d70     01 16 06 F6 | 	mov	arg03, #1
03d74     00 18 06 F6 | 	mov	arg04, #0
03d78     0B 00 00 FF 
03d7c     C0 E4 05 F1 | 	add	objptr, ##5824
03d80                 | '     return fill(addr, pattern, count, listPtr, 4)
03d80     04 1A 06 F6 | 	mov	arg05, #4
03d84     18 0B B1 FD | 	call	#_psram_spin2_fill
03d88     28 4E 05 F1 | 	add	fp, #40
03d8c     A7 1E 02 FB | 	rdlong	local01, fp
03d90     28 4E 85 F1 | 	sub	fp, #40
03d94     35 00 00 FF 
03d98     88 E5 05 F1 | 	add	objptr, ##27528
03d9c     F2 1E 62 FC | 	wrlong	local01, objptr
03da0     41 00 00 FF 
03da4     48 E4 85 F1 | 	sub	objptr, ##33352
03da8                 | ' '   print "deleted first line"
03da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03da8                 | '   return 0
03da8     00 FA 05 F6 | 	mov	result1, #0
03dac     3C 01 90 FD | 	jmp	#LR__0326
03db0                 | LR__0323
03db0                 | ' 
03db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03db0     28 4E 05 F1 | 	add	fp, #40
03db4     A7 1E 02 FB | 	rdlong	local01, fp
03db8     28 4E 85 F1 | 	sub	fp, #40
03dbc     FF FF 3F FF 
03dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03dc4     24 4E 05 51 |  if_ne	add	fp, #36
03dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
03dcc     24 4E 85 51 |  if_ne	sub	fp, #36
03dd0     FF FF 7F 5F 
03dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03dd8     68 00 90 AD |  if_e	jmp	#LR__0324
03ddc     28 4E 05 F1 | 	add	fp, #40
03de0     A7 12 02 FB | 	rdlong	arg01, fp
03de4     10 12 06 F1 | 	add	arg01, #16
03de8     04 4E 85 F1 | 	sub	fp, #4
03dec     A7 14 02 FB | 	rdlong	arg02, fp
03df0     24 4E 85 F1 | 	sub	fp, #36
03df4     01 16 06 F6 | 	mov	arg03, #1
03df8     00 18 06 F6 | 	mov	arg04, #0
03dfc     0B 00 00 FF 
03e00     C0 E4 05 F1 | 	add	objptr, ##5824
03e04                 | '     return fill(addr, pattern, count, listPtr, 4)
03e04     04 1A 06 F6 | 	mov	arg05, #4
03e08     94 0A B1 FD | 	call	#_psram_spin2_fill
03e0c     24 4E 05 F1 | 	add	fp, #36
03e10     A7 12 02 FB | 	rdlong	arg01, fp
03e14     14 12 06 F1 | 	add	arg01, #20
03e18     04 4E 05 F1 | 	add	fp, #4
03e1c     A7 14 02 FB | 	rdlong	arg02, fp
03e20     28 4E 85 F1 | 	sub	fp, #40
03e24     01 16 06 F6 | 	mov	arg03, #1
03e28     00 18 06 F6 | 	mov	arg04, #0
03e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
03e2c     04 1A 06 F6 | 	mov	arg05, #4
03e30     6C 0A B1 FD | 	call	#_psram_spin2_fill
03e34     0B 00 00 FF 
03e38     C0 E4 85 F1 | 	sub	objptr, ##5824
03e3c                 | '    pslpoke(header(5)+16,header(4))  
03e3c                 | '    pslpoke(header(4)+20, header(5))
03e3c                 | '    return 0
03e3c     00 FA 05 F6 | 	mov	result1, #0
03e40     A8 00 90 FD | 	jmp	#LR__0326
03e44                 | LR__0324
03e44     10 4E 05 F1 | 	add	fp, #16
03e48     A7 1E 02 FB | 	rdlong	local01, fp
03e4c     08 4E 85 F1 | 	sub	fp, #8
03e50     A7 1E 62 FC | 	wrlong	local01, fp
03e54     41 00 00 FF 
03e58     48 E4 05 F1 | 	add	objptr, ##33352
03e5c     F2 1E 02 FB | 	rdlong	local01, objptr
03e60     08 4E 05 F1 | 	add	fp, #8
03e64     A7 1E 62 FC | 	wrlong	local01, fp
03e68     10 4E 85 F1 | 	sub	fp, #16
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03e6c                 | ' 
03e6c                 | ' lineptr2=searchptr
03e6c                 | ' searchptr=programstart
03e6c                 | ' 
03e6c                 | ' do
03e6c     35 00 00 FF 
03e70     88 E5 85 F1 | 	sub	objptr, ##27528
03e74                 | LR__0325
03e74     14 4E 05 F1 | 	add	fp, #20
03e78     A7 12 02 F6 | 	mov	arg01, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     A7 14 02 FB | 	rdlong	arg02, fp
03e84     10 4E 85 F1 | 	sub	fp, #16
03e88     18 16 06 F6 | 	mov	arg03, #24
03e8c     D8 08 B1 FD | 	call	#_psram_spin2_read1
03e90     10 4E 05 F1 | 	add	fp, #16
03e94     A7 1E 02 FB | 	rdlong	local01, fp
03e98     08 4E 85 F1 | 	sub	fp, #8
03e9c     A7 1E 62 FC | 	wrlong	local01, fp
03ea0     20 4E 05 F1 | 	add	fp, #32
03ea4     A7 1E 02 FB | 	rdlong	local01, fp
03ea8     18 4E 85 F1 | 	sub	fp, #24
03eac     A7 1E 62 FC | 	wrlong	local01, fp
03eb0     04 4E 05 F1 | 	add	fp, #4
03eb4     A7 1E 02 FB | 	rdlong	local01, fp
03eb8     10 4E 85 F1 | 	sub	fp, #16
03ebc     A7 22 02 FB | 	rdlong	local03, fp
03ec0     04 4E 85 F1 | 	sub	fp, #4
03ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
03ec8     28 4E 05 C1 |  if_b	add	fp, #40
03ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
03ed0     28 4E 85 C1 |  if_b	sub	fp, #40
03ed4     FF FF 3F CF 
03ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
03ee0     0B 00 00 FF 
03ee4     C0 E4 85 F1 | 	sub	objptr, ##5824
03ee8     00 FA 05 F6 | 	mov	result1, #0
03eec                 | LR__0326
03eec     A7 F0 03 F6 | 	mov	ptra, fp
03ef0     B2 00 A0 FD | 	call	#popregs_
03ef4                 | _deleteline_ret
03ef4     2D 00 64 FD | 	ret
03ef8                 | 
03ef8                 | ' 
03ef8                 | ' sub save_line
03ef8                 | _save_line
03ef8     03 4A 05 F6 | 	mov	COUNT_, #3
03efc     A8 00 A0 FD | 	call	#pushregs_
03f00     41 00 00 FF 
03f04     40 E4 05 F1 | 	add	objptr, ##33344
03f08     F2 16 02 FB | 	rdlong	arg03, objptr
03f0c     01 16 06 F1 | 	add	arg03, #1
03f10     05 00 00 FF 
03f14     18 E4 85 F1 | 	sub	objptr, ##2584
03f18     F2 14 02 FB | 	rdlong	arg02, objptr
03f1c     0B 15 02 FD | 	qmul	arg02, arg03
03f20     0E 00 00 FF 
03f24     44 E4 85 F1 | 	sub	objptr, ##7236
03f28     F2 12 02 FB | 	rdlong	arg01, objptr
03f2c     2D 00 00 FF 
03f30     E4 E5 85 F1 | 	sub	objptr, ##23524
03f34     09 1F 02 F6 | 	mov	local01, arg01
03f38     18 20 62 FD | 	getqx	local02
03f3c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
03f40                 | LR__0330
03f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
03f44     01 1E 06 51 |  if_ne	add	local01, #1
03f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
03f4c                 | LR__0331
03f4c     09 1F 82 F1 | 	sub	local01, arg01
03f50     03 1E CE F7 | 	test	local01, #3 wz
03f54     02 1E 46 50 |  if_ne	shr	local01, #2
03f58     01 1E 06 51 |  if_ne	add	local01, #1
03f5c     02 1E 66 50 |  if_ne	shl	local01, #2
03f60     10 23 02 F6 | 	mov	local03, local02
03f64     0F 23 02 F1 | 	add	local03, local01
03f68     3A 00 00 FF 
03f6c     20 E4 05 F1 | 	add	objptr, ##29728
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     10 17 02 F1 | 	add	arg03, local02
03f78     04 00 00 FF 
03f7c     28 E4 05 F1 | 	add	objptr, ##2088
03f80     F2 16 62 FC | 	wrlong	arg03, objptr
03f84     04 E4 05 F1 | 	add	objptr, #4
03f88     F2 1E 62 FC | 	wrlong	local01, objptr
03f8c     0C E4 85 F1 | 	sub	objptr, #12
03f90     F2 12 02 F6 | 	mov	arg01, objptr
03f94     04 00 00 FF 
03f98     20 E4 85 F1 | 	sub	objptr, ##2080
03f9c     F2 14 02 FB | 	rdlong	arg02, objptr
03fa0     10 17 02 F6 | 	mov	arg03, local02
03fa4     2E 00 00 FF 
03fa8     60 E5 85 F1 | 	sub	objptr, ##23904
03fac     54 08 B1 FD | 	call	#_psram_spin2_write
03fb0     22 00 00 FF 
03fb4     24 E5 05 F1 | 	add	objptr, ##17700
03fb8     F2 12 02 FB | 	rdlong	arg01, objptr
03fbc     0C 00 00 FF 
03fc0     3C E4 05 F1 | 	add	objptr, ##6204
03fc4     F2 14 02 FB | 	rdlong	arg02, objptr
03fc8     10 15 02 F1 | 	add	arg02, local02
03fcc     0F 17 02 F6 | 	mov	arg03, local01
03fd0     2E 00 00 FF 
03fd4     60 E5 85 F1 | 	sub	objptr, ##23904
03fd8     28 08 B1 FD | 	call	#_psram_spin2_write
03fdc     2E 00 00 FF 
03fe0     60 E5 05 F1 | 	add	objptr, ##23904
03fe4     F2 1E 02 FB | 	rdlong	local01, objptr
03fe8     11 1F 02 F1 | 	add	local01, local03
03fec     F2 1E 62 FC | 	wrlong	local01, objptr
03ff0     3A 00 00 FF 
03ff4     20 E4 85 F1 | 	sub	objptr, ##29728
03ff8     A7 F0 03 F6 | 	mov	ptra, fp
03ffc     B2 00 A0 FD | 	call	#popregs_
04000                 | _save_line_ret
04000     2D 00 64 FD | 	ret
04004                 | 
04004                 | ' 
04004                 | ' 
04004                 | ' function insertline(aline as ulong) as integer
04004                 | _insertline
04004     02 4A 05 F6 | 	mov	COUNT_, #2
04008     A8 00 A0 FD | 	call	#pushregs_
0400c     28 F0 07 F1 | 	add	ptra, #40
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 12 62 FC | 	wrlong	arg01, fp
04018     41 00 00 FF 
0401c     48 E4 05 F1 | 	add	objptr, ##33352
04020     F2 1E 02 FB | 	rdlong	local01, objptr
04024     04 4E 05 F1 | 	add	fp, #4
04028     A7 1E 62 FC | 	wrlong	local01, fp
0402c     08 4E 85 F1 | 	sub	fp, #8
04030                 | ' 
04030                 | ' do
04030     35 00 00 FF 
04034     88 E5 85 F1 | 	sub	objptr, ##27528
04038                 | LR__0340
04038     10 4E 05 F1 | 	add	fp, #16
0403c     A7 12 02 F6 | 	mov	arg01, fp
04040     08 4E 85 F1 | 	sub	fp, #8
04044     A7 14 02 FB | 	rdlong	arg02, fp
04048     08 4E 85 F1 | 	sub	fp, #8
0404c     18 16 06 F6 | 	mov	arg03, #24
04050     14 07 B1 FD | 	call	#_psram_spin2_read1
04054     08 4E 05 F1 | 	add	fp, #8
04058     A7 1E 02 FB | 	rdlong	local01, fp
0405c     04 4E 05 F1 | 	add	fp, #4
04060     A7 1E 62 FC | 	wrlong	local01, fp
04064     18 4E 05 F1 | 	add	fp, #24
04068     A7 1E 02 FB | 	rdlong	local01, fp
0406c     1C 4E 85 F1 | 	sub	fp, #28
04070     A7 1E 62 FC | 	wrlong	local01, fp
04074     08 4E 05 F1 | 	add	fp, #8
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     0C 4E 85 F1 | 	sub	fp, #12
04080     A7 16 02 FB | 	rdlong	arg03, fp
04084     04 4E 85 F1 | 	sub	fp, #4
04088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0408c     24 4E 05 C1 |  if_b	add	fp, #36
04090     A7 20 02 CB |  if_b	rdlong	local02, fp
04094     24 4E 85 C1 |  if_b	sub	fp, #36
04098     FF FF 3F CF 
0409c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
040a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
040a4     0B 00 00 FF 
040a8     C0 E4 85 F1 | 	sub	objptr, ##5824
040ac                 | ' 
040ac                 | ' if header(0)=aline then return -1 ' delete it first
040ac     10 4E 05 F1 | 	add	fp, #16
040b0     A7 1E 02 FB | 	rdlong	local01, fp
040b4     0C 4E 85 F1 | 	sub	fp, #12
040b8     A7 20 02 FB | 	rdlong	local02, fp
040bc     04 4E 85 F1 | 	sub	fp, #4
040c0     10 1F 0A F2 | 	cmp	local01, local02 wz
040c4     01 FA 65 A6 |  if_e	neg	result1, #1
040c8     74 01 90 AD |  if_e	jmp	#LR__0343
040cc                 | ' if header(0)<aline then return -2 ' end of program reached
040cc     10 4E 05 F1 | 	add	fp, #16
040d0     A7 1E 02 FB | 	rdlong	local01, fp
040d4     0C 4E 85 F1 | 	sub	fp, #12
040d8     A7 16 02 FB | 	rdlong	arg03, fp
040dc     04 4E 85 F1 | 	sub	fp, #4
040e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
040e4     02 FA 65 C6 |  if_b	neg	result1, #2
040e8     54 01 90 CD |  if_b	jmp	#LR__0343
040ec                 | ' 
040ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
040ec     20 4E 05 F1 | 	add	fp, #32
040f0     A7 1E 02 FB | 	rdlong	local01, fp
040f4     20 4E 85 F1 | 	sub	fp, #32
040f8     FF FF 7F FF 
040fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04100     84 00 90 5D |  if_ne	jmp	#LR__0341
04104     3A 00 00 FF 
04108     20 E4 05 F1 | 	add	objptr, ##29728
0410c     F2 1E 02 FB | 	rdlong	local01, objptr
04110     07 00 00 FF 
04114     28 E4 05 F1 | 	add	objptr, ##3624
04118     F2 1E 62 FC | 	wrlong	local01, objptr
0411c     0C 4E 05 F1 | 	add	fp, #12
04120     A7 12 02 FB | 	rdlong	arg01, fp
04124     0C 4E 85 F1 | 	sub	fp, #12
04128     10 12 06 F1 | 	add	arg01, #16
0412c     07 00 00 FF 
04130     28 E4 85 F1 | 	sub	objptr, ##3624
04134     F2 14 02 FB | 	rdlong	arg02, objptr
04138     01 16 06 F6 | 	mov	arg03, #1
0413c     00 18 06 F6 | 	mov	arg04, #0
04140     2E 00 00 FF 
04144     60 E5 85 F1 | 	sub	objptr, ##23904
04148                 | '     return fill(addr, pattern, count, listPtr, 4)
04148     04 1A 06 F6 | 	mov	arg05, #4
0414c     50 07 B1 FD | 	call	#_psram_spin2_fill
04150     32 00 00 FF 
04154     90 E5 05 F1 | 	add	objptr, ##26000
04158     FF FF FF FF 
0415c     F2 FE 6B FC | 	wrlong	##-1, objptr
04160     0C 4E 05 F1 | 	add	fp, #12
04164     A7 1E 02 FB | 	rdlong	local01, fp
04168     0C 4E 85 F1 | 	sub	fp, #12
0416c     04 E4 05 F1 | 	add	objptr, #4
04170     F2 1E 62 FC | 	wrlong	local01, objptr
04174     3E 00 00 FF 
04178     54 E4 85 F1 | 	sub	objptr, ##31828
0417c     78 FD BF FD | 	call	#_save_line
04180                 | '   programstart=programptr
04180                 | '   pslpoke(lineptr2+16,programptr)
04180                 | '   ucompiledline(4)=$FFFF_FFFF
04180                 | '   ucompiledline(5)=lineptr2
04180                 | '   save_line
04180                 | '   return 0
04180     00 FA 05 F6 | 	mov	result1, #0
04184     B8 00 90 FD | 	jmp	#LR__0343
04188                 | LR__0341
04188                 | ' 
04188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04188     20 4E 05 F1 | 	add	fp, #32
0418c     A7 1E 02 FB | 	rdlong	local01, fp
04190     20 4E 85 F1 | 	sub	fp, #32
04194     FF FF 7F FF 
04198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0419c     9C 00 90 AD |  if_e	jmp	#LR__0342
041a0     20 4E 05 F1 | 	add	fp, #32
041a4     A7 1E 02 FB | 	rdlong	local01, fp
041a8     3E 00 00 FF 
041ac     50 E4 05 F1 | 	add	objptr, ##31824
041b0     F2 1E 62 FC | 	wrlong	local01, objptr
041b4     14 4E 85 F1 | 	sub	fp, #20
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 E4 05 F1 | 	add	objptr, #4
041c0     F2 1E 62 FC | 	wrlong	local01, objptr
041c4     A7 12 02 FB | 	rdlong	arg01, fp
041c8     0C 4E 85 F1 | 	sub	fp, #12
041cc     10 12 06 F1 | 	add	arg01, #16
041d0     04 00 00 FF 
041d4     34 E4 85 F1 | 	sub	objptr, ##2100
041d8     F2 14 02 FB | 	rdlong	arg02, objptr
041dc     01 16 06 F6 | 	mov	arg03, #1
041e0     00 18 06 F6 | 	mov	arg04, #0
041e4     2E 00 00 FF 
041e8     60 E5 85 F1 | 	sub	objptr, ##23904
041ec                 | '     return fill(addr, pattern, count, listPtr, 4)
041ec     04 1A 06 F6 | 	mov	arg05, #4
041f0     AC 06 B1 FD | 	call	#_psram_spin2_fill
041f4     20 4E 05 F1 | 	add	fp, #32
041f8     A7 12 02 FB | 	rdlong	arg01, fp
041fc     20 4E 85 F1 | 	sub	fp, #32
04200     14 12 06 F1 | 	add	arg01, #20
04204     2E 00 00 FF 
04208     60 E5 05 F1 | 	add	objptr, ##23904
0420c     F2 14 02 FB | 	rdlong	arg02, objptr
04210     01 16 06 F6 | 	mov	arg03, #1
04214     00 18 06 F6 | 	mov	arg04, #0
04218     2E 00 00 FF 
0421c     60 E5 85 F1 | 	sub	objptr, ##23904
04220                 | '     return fill(addr, pattern, count, listPtr, 4)
04220     04 1A 06 F6 | 	mov	arg05, #4
04224     78 06 B1 FD | 	call	#_psram_spin2_fill
04228     0B 00 00 FF 
0422c     C0 E4 85 F1 | 	sub	objptr, ##5824
04230     C4 FC BF FD | 	call	#_save_line
04234                 | '   ucompiledline(4)=header(4)
04234                 | '   ucompiledline(5)=lineptr2
04234                 | '   pslpoke(lineptr2+16,programptr)
04234                 | '   pslpoke(header(4)+20,programptr)
04234                 | '   save_line
04234                 | '   return 0
04234     00 FA 05 F6 | 	mov	result1, #0
04238     04 00 90 FD | 	jmp	#LR__0343
0423c                 | LR__0342
0423c     00 FA 05 F6 | 	mov	result1, #0
04240                 | LR__0343
04240     A7 F0 03 F6 | 	mov	ptra, fp
04244     B2 00 A0 FD | 	call	#popregs_
04248                 | _insertline_ret
04248     2D 00 64 FD | 	ret
0424c                 | 
0424c                 | ' 
0424c                 | ' sub add_line_at_end(aline) 
0424c                 | _add_line_at_end
0424c     41 00 00 FF 
04250     4C E4 05 F1 | 	add	objptr, ##33356
04254     F2 12 62 FC | 	wrlong	arg01, objptr
04258     04 E4 05 F1 | 	add	objptr, #4
0425c     F2 14 02 FB | 	rdlong	arg02, objptr
04260     03 00 00 FF 
04264     00 E4 85 F1 | 	sub	objptr, ##1536
04268     F2 14 62 FC | 	wrlong	arg02, objptr
0426c     03 00 00 FF 
04270     00 E4 05 F1 | 	add	objptr, ##1536
04274     F2 12 02 FB | 	rdlong	arg01, objptr
04278     14 12 06 F1 | 	add	arg01, #20
0427c     07 00 00 FF 
04280     30 E4 85 F1 | 	sub	objptr, ##3632
04284     F2 14 02 FB | 	rdlong	arg02, objptr
04288     01 16 06 F6 | 	mov	arg03, #1
0428c     00 18 06 F6 | 	mov	arg04, #0
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298                 | '     return fill(addr, pattern, count, listPtr, 4)
04298     04 1A 06 F6 | 	mov	arg05, #4
0429c     00 06 B1 FD | 	call	#_psram_spin2_fill
042a0     2E 00 00 FF 
042a4     60 E5 05 F1 | 	add	objptr, ##23904
042a8     F2 14 02 FB | 	rdlong	arg02, objptr
042ac     07 00 00 FF 
042b0     30 E4 05 F1 | 	add	objptr, ##3632
042b4     F2 14 62 FC | 	wrlong	arg02, objptr
042b8     02 00 00 FF 
042bc     FC E5 85 F1 | 	sub	objptr, ##1532
042c0     FF FF BF FF 
042c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
042c8                 | ' 
042c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
042c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
042c8     04 00 00 FF 
042cc     34 E4 85 F1 | 	sub	objptr, ##2100
042d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
042d4     3A 00 00 FF 
042d8     20 E4 85 F1 | 	sub	objptr, ##29728
042dc     3E 00 00 AF 
042e0     50 E4 05 A1 |  if_e	add	objptr, ##31824
042e4     FF FF FF AF 
042e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
042ec     3E 00 00 AF 
042f0     50 E4 85 A1 |  if_e	sub	objptr, ##31824
042f4     00 FC BF FD | 	call	#_save_line
042f8     3A 00 00 FF 
042fc     20 E4 05 F1 | 	add	objptr, ##29728
04300     F2 12 02 FB | 	rdlong	arg01, objptr
04304     01 14 66 F6 | 	neg	arg02, #1
04308     01 16 06 F6 | 	mov	arg03, #1
0430c     00 18 06 F6 | 	mov	arg04, #0
04310     2E 00 00 FF 
04314     60 E5 85 F1 | 	sub	objptr, ##23904
04318                 | '     return fill(addr, pattern, count, listPtr, 4)
04318     04 1A 06 F6 | 	mov	arg05, #4
0431c     80 05 B1 FD | 	call	#_psram_spin2_fill
04320     0B 00 00 FF 
04324     C0 E4 85 F1 | 	sub	objptr, ##5824
04328                 | _add_line_at_end_ret
04328     2D 00 64 FD | 	ret
0432c                 | 
0432c                 | ' 
0432c                 | ' function compile_immediate(linetype as ulong) as integer
0432c                 | _compile_immediate
0432c     09 4A 05 F6 | 	mov	COUNT_, #9
04330     A8 00 A0 FD | 	call	#pushregs_
04334                 | _compile_immediate_enter
04334     09 25 0A F6 | 	mov	local04, arg01 wz
04338     00 26 06 F6 | 	mov	local05, #0
0433c     00 28 06 F6 | 	mov	local06, #0
04340                 | ' 
04340                 | ' ' linetype=cont+1, linetype=0 immediate
04340                 | ' '  : 1: this is the first part of the line that will continue
04340                 | ' ' 2 - this is the continuation of the line
04340                 | ' ' 3 - this is the last continued line
04340                 | ' ' 4 - this is the one and only part
04340                 | ' 
04340                 | ' err=0
04340                 | ' cmd=0
04340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04340     2C 00 90 5D |  if_ne	jmp	#LR__0350
04344     2B 00 00 FF 
04348     D4 E5 05 F1 | 	add	objptr, ##22484
0434c     F2 28 02 FB | 	rdlong	local06, objptr
04350     02 00 00 FF 
04354     34 E4 05 F1 | 	add	objptr, ##1076
04358     F2 02 68 FC | 	wrlong	#1, objptr
0435c     13 00 00 FF 
04360     38 E4 05 F1 | 	add	objptr, ##9784
04364     F2 00 68 FC | 	wrlong	#0, objptr
04368     41 00 00 FF 
0436c     40 E4 85 F1 | 	sub	objptr, ##33344
04370                 | LR__0350
04370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
04370     02 24 0E F2 | 	cmp	local04, #2 wz
04374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04378     2B 00 00 AF 
0437c     D4 E5 05 A1 |  if_e	add	objptr, ##22484
04380     F2 28 02 AB |  if_e	rdlong	local06, objptr
04384     02 00 00 AF 
04388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0438c     F2 02 68 AC |  if_e	wrlong	#1, objptr
04390     2E 00 00 AF 
04394     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04398     04 24 0E F2 | 	cmp	local04, #4 wz
0439c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
043a0     30 00 90 5D |  if_ne	jmp	#LR__0351
043a4     2B 00 00 FF 
043a8     DC E5 05 F1 | 	add	objptr, ##22492
043ac     F2 28 02 FB | 	rdlong	local06, objptr
043b0     02 2A 06 F6 | 	mov	local07, #2
043b4     02 00 00 FF 
043b8     2C E4 05 F1 | 	add	objptr, ##1068
043bc     F2 04 68 FC | 	wrlong	#2, objptr
043c0     13 00 00 FF 
043c4     38 E4 05 F1 | 	add	objptr, ##9784
043c8     F2 04 68 FC | 	wrlong	#2, objptr
043cc     41 00 00 FF 
043d0     40 E4 85 F1 | 	sub	objptr, ##33344
043d4                 | LR__0351
043d4                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
043d4     05 24 0E F2 | 	cmp	local04, #5 wz
043d8     40 00 90 5D |  if_ne	jmp	#LR__0352
043dc     2E 00 00 FF 
043e0     08 E4 05 F1 | 	add	objptr, ##23560
043e4     F2 2A 02 FB | 	rdlong	local07, objptr
043e8     15 29 02 F6 | 	mov	local06, local07
043ec     03 28 66 F0 | 	shl	local06, #3
043f0     02 00 00 FF 
043f4     38 E4 85 F1 | 	sub	objptr, ##1080
043f8     F2 28 02 F1 | 	add	local06, objptr
043fc     04 28 06 F1 | 	add	local06, #4
04400     14 29 02 FB | 	rdlong	local06, local06
04404     01 2A 06 F1 | 	add	local07, #1
04408     02 00 00 FF 
0440c     38 E4 05 F1 | 	add	objptr, ##1080
04410     F2 2A 62 FC | 	wrlong	local07, objptr
04414     2E 00 00 FF 
04418     08 E4 85 F1 | 	sub	objptr, ##23560
0441c                 | LR__0352
0441c     00 2C 06 F6 | 	mov	local08, #0
04420                 | ' vars=0
04420                 | ' print  "In compile_immediate cmd=:", cmd
04420     00 12 06 F6 | 	mov	arg01, #0
04424     E0 63 B1 FD | 	call	#__system___getiolock_0334
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     24 0E B1 FD | 	call	#__system___lockmem
04430     23 01 00 FF 
04434     35 15 06 F6 | 	mov	arg02, ##@LR__4244
04438     00 12 06 F6 | 	mov	arg01, #0
0443c     00 16 06 F6 | 	mov	arg03, #0
04440     04 1B B1 FD | 	call	#__system___basic_print_string
04444     00 12 06 F6 | 	mov	arg01, #0
04448     09 14 06 F6 | 	mov	arg02, #9
0444c     00 16 06 F6 | 	mov	arg03, #0
04450     9C 1A B1 FD | 	call	#__system___basic_print_char
04454     00 12 06 F6 | 	mov	arg01, #0
04458     14 15 02 F6 | 	mov	arg02, local06
0445c     00 16 06 F6 | 	mov	arg03, #0
04460     0A 18 06 F6 | 	mov	arg04, #10
04464     64 1B B1 FD | 	call	#__system___basic_print_unsigned
04468     00 12 06 F6 | 	mov	arg01, #0
0446c     0A 14 06 F6 | 	mov	arg02, #10
04470     00 16 06 F6 | 	mov	arg03, #0
04474     78 1A B1 FD | 	call	#__system___basic_print_char
04478     00 12 06 F6 | 	mov	arg01, #0
0447c     88 63 B1 FD | 	call	#__system___getiolock_0334
04480     FD 00 68 FC | 	wrlong	#0, result1
04484                 | ' 451 select case cmd
04484     40 28 0E F2 | 	cmp	local06, #64 wz
04488     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
0448c     78 02 90 AD |  if_e	jmp	#LR__0388
04490     4C 28 0E F2 | 	cmp	local06, #76 wz
04494     24 01 90 AD |  if_e	jmp	#LR__0353
04498     4D 28 0E F2 | 	cmp	local06, #77 wz
0449c     68 02 90 AD |  if_e	jmp	#LR__0388
044a0     42 28 0E F2 | 	cmp	local06, #66 wz
044a4     20 01 90 AD |  if_e	jmp	#LR__0354
044a8     43 28 0E F2 | 	cmp	local06, #67 wz
044ac     24 01 90 AD |  if_e	jmp	#LR__0355
044b0     45 28 0E F2 | 	cmp	local06, #69 wz
044b4     28 01 90 AD |  if_e	jmp	#LR__0356
044b8     46 28 0E F2 | 	cmp	local06, #70 wz
044bc     2C 01 90 AD |  if_e	jmp	#LR__0357
044c0     47 28 0E F2 | 	cmp	local06, #71 wz
044c4     30 01 90 AD |  if_e	jmp	#LR__0358
044c8     48 28 0E F2 | 	cmp	local06, #72 wz
044cc     34 01 90 AD |  if_e	jmp	#LR__0359
044d0     49 28 0E F2 | 	cmp	local06, #73 wz
044d4     38 01 90 AD |  if_e	jmp	#LR__0360
044d8     44 28 0E F2 | 	cmp	local06, #68 wz
044dc     3C 01 90 AD |  if_e	jmp	#LR__0361
044e0     4E 28 0E F2 | 	cmp	local06, #78 wz
044e4     40 01 90 AD |  if_e	jmp	#LR__0362
044e8     50 28 0E F2 | 	cmp	local06, #80 wz
044ec     54 01 90 AD |  if_e	jmp	#LR__0364
044f0     51 28 0E F2 | 	cmp	local06, #81 wz
044f4     54 01 90 AD |  if_e	jmp	#LR__0365
044f8     52 28 0E F2 | 	cmp	local06, #82 wz
044fc     54 01 90 AD |  if_e	jmp	#LR__0366
04500     59 28 0E F2 | 	cmp	local06, #89 wz
04504     54 01 90 AD |  if_e	jmp	#LR__0367
04508     55 28 0E F2 | 	cmp	local06, #85 wz
0450c     54 01 90 AD |  if_e	jmp	#LR__0368
04510     56 28 0E F2 | 	cmp	local06, #86 wz
04514     54 01 90 AD |  if_e	jmp	#LR__0369
04518     57 28 0E F2 | 	cmp	local06, #87 wz
0451c     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
04520     E4 01 90 AD |  if_e	jmp	#LR__0388
04524     58 28 0E F2 | 	cmp	local06, #88 wz
04528     48 01 90 AD |  if_e	jmp	#LR__0370
0452c     4A 28 0E F2 | 	cmp	local06, #74 wz
04530     48 01 90 AD |  if_e	jmp	#LR__0371
04534     4B 28 0E F2 | 	cmp	local06, #75 wz
04538     48 01 90 AD |  if_e	jmp	#LR__0372
0453c     5A 28 0E F2 | 	cmp	local06, #90 wz
04540     48 01 90 AD |  if_e	jmp	#LR__0373
04544     5C 28 0E F2 | 	cmp	local06, #92 wz
04548     48 01 90 AD |  if_e	jmp	#LR__0374
0454c     5D 28 0E F2 | 	cmp	local06, #93 wz
04550     B4 01 90 AD |  if_e	jmp	#LR__0388
04554     5E 28 0E F2 | 	cmp	local06, #94 wz
04558     44 01 90 AD |  if_e	jmp	#LR__0375
0455c     5F 28 0E F2 | 	cmp	local06, #95 wz
04560     44 01 90 AD |  if_e	jmp	#LR__0376
04564     60 28 0E F2 | 	cmp	local06, #96 wz
04568     44 01 90 AD |  if_e	jmp	#LR__0377
0456c     61 28 0E F2 | 	cmp	local06, #97 wz
04570     44 01 90 AD |  if_e	jmp	#LR__0378
04574     63 28 0E F2 | 	cmp	local06, #99 wz
04578     44 01 90 AD |  if_e	jmp	#LR__0379
0457c     68 28 0E F2 | 	cmp	local06, #104 wz
04580     44 01 90 AD |  if_e	jmp	#LR__0380
04584     69 28 0E F2 | 	cmp	local06, #105 wz
04588     44 01 90 AD |  if_e	jmp	#LR__0381
0458c     6D 28 0E F2 | 	cmp	local06, #109 wz
04590     44 01 90 AD |  if_e	jmp	#LR__0382
04594     6C 28 0E F2 | 	cmp	local06, #108 wz
04598     44 01 90 AD |  if_e	jmp	#LR__0383
0459c     71 28 0E F2 | 	cmp	local06, #113 wz
045a0     44 01 90 AD |  if_e	jmp	#LR__0384
045a4     72 28 0E F2 | 	cmp	local06, #114 wz
045a8     44 01 90 AD |  if_e	jmp	#LR__0385
045ac     01 00 00 FF 
045b0     04 28 0E F2 | 	cmp	local06, ##516 wz
045b4     40 01 90 AD |  if_e	jmp	#LR__0386
045b8     44 01 90 FD | 	jmp	#LR__0387
045bc                 | LR__0353
045bc     44 14 B0 FD | 	call	#_compile_fun_varp
045c0     FD 2C 02 F6 | 	mov	local08, result1
045c4     40 01 90 FD | 	jmp	#LR__0388
045c8                 | LR__0354
045c8     58 10 B0 FD | 	call	#_compile_fun_2p
045cc     FD 26 02 F6 | 	mov	local05, result1
045d0     34 01 90 FD | 	jmp	#LR__0388
045d4                 | LR__0355
045d4     4C 10 B0 FD | 	call	#_compile_fun_2p
045d8     FD 26 02 F6 | 	mov	local05, result1
045dc     28 01 90 FD | 	jmp	#LR__0388
045e0                 | LR__0356
045e0     B4 10 B0 FD | 	call	#_compile_fun_3p
045e4     FD 26 02 F6 | 	mov	local05, result1
045e8     1C 01 90 FD | 	jmp	#LR__0388
045ec                 | LR__0357
045ec     A8 10 B0 FD | 	call	#_compile_fun_3p
045f0     FD 26 02 F6 | 	mov	local05, result1
045f4     10 01 90 FD | 	jmp	#LR__0388
045f8                 | LR__0358
045f8     68 11 B0 FD | 	call	#_compile_fun_4p
045fc     FD 26 02 F6 | 	mov	local05, result1
04600     04 01 90 FD | 	jmp	#LR__0388
04604                 | LR__0359
04604     5C 11 B0 FD | 	call	#_compile_fun_4p
04608     FD 26 02 F6 | 	mov	local05, result1
0460c     F8 00 90 FD | 	jmp	#LR__0388
04610                 | LR__0360
04610     88 34 B0 FD | 	call	#_expr
04614                 | ' 
04614                 | ' 
04614                 | ' expr()
04614                 | ' return 0
04614     00 26 06 F6 | 	mov	local05, #0
04618     EC 00 90 FD | 	jmp	#LR__0388
0461c                 | LR__0361
0461c     10 15 B0 FD | 	call	#_compile_print
04620     FD 26 02 F6 | 	mov	local05, result1
04624     9C 01 90 FD | 	jmp	#LR__0389
04628                 | LR__0362
04628     01 24 16 F2 | 	cmp	local04, #1 wc
0462c     08 00 90 CD |  if_b	jmp	#LR__0363
04630     08 31 B0 FD | 	call	#_compile_goto
04634     8C 01 90 FD | 	jmp	#LR__0389
04638                 | LR__0363
04638     19 12 06 F6 | 	mov	arg01, #25
0463c     20 D7 B0 FD | 	call	#_printerror
04640     80 01 90 FD | 	jmp	#LR__0389
04644                 | LR__0364
04644     54 34 B0 FD | 	call	#_expr
04648                 | ' 
04648                 | ' 
04648                 | ' expr()
04648                 | ' return 0
04648     BC 00 90 FD | 	jmp	#LR__0388
0464c                 | LR__0365
0464c     4C 34 B0 FD | 	call	#_expr
04650                 | ' 
04650                 | ' 
04650                 | ' expr()
04650                 | ' return 0
04650     B4 00 90 FD | 	jmp	#LR__0388
04654                 | LR__0366
04654     44 34 B0 FD | 	call	#_expr
04658                 | ' 
04658                 | ' 
04658                 | ' expr()
04658                 | ' return 0
04658     AC 00 90 FD | 	jmp	#LR__0388
0465c                 | LR__0367
0465c     3C 34 B0 FD | 	call	#_expr
04660                 | ' 
04660                 | ' 
04660                 | ' expr()
04660                 | ' return 0
04660     A4 00 90 FD | 	jmp	#LR__0388
04664                 | LR__0368
04664     48 14 B0 FD | 	call	#_compile_int_fun_2p
04668     9C 00 90 FD | 	jmp	#LR__0388
0466c                 | LR__0369
0466c     CC 0E B0 FD | 	call	#_compile_converttoint
04670                 | ' return err
04670     94 00 90 FD | 	jmp	#LR__0388
04674                 | LR__0370
04674     90 1B B0 FD | 	call	#_compile_if
04678     48 01 90 FD | 	jmp	#LR__0389
0467c                 | LR__0371
0467c     20 27 B0 FD | 	call	#_compile_for
04680     40 01 90 FD | 	jmp	#LR__0389
04684                 | LR__0372
04684     04 2F B0 FD | 	call	#_compile_next
04688     38 01 90 FD | 	jmp	#LR__0389
0468c                 | LR__0373
0468c     B8 1C B0 FD | 	call	#_compile_else
04690     30 01 90 FD | 	jmp	#LR__0389
04694                 | LR__0374
04694     8C 0F B0 FD | 	call	#_compile_fun_2p
04698     FD 26 02 F6 | 	mov	local05, result1
0469c     68 00 90 FD | 	jmp	#LR__0388
046a0                 | LR__0375
046a0     F8 33 B0 FD | 	call	#_expr
046a4                 | ' 
046a4                 | ' 
046a4                 | ' expr()
046a4                 | ' return 0
046a4     60 00 90 FD | 	jmp	#LR__0388
046a8                 | LR__0376
046a8     F0 33 B0 FD | 	call	#_expr
046ac                 | ' 
046ac                 | ' 
046ac                 | ' expr()
046ac                 | ' return 0
046ac     58 00 90 FD | 	jmp	#LR__0388
046b0                 | LR__0377
046b0     E8 33 B0 FD | 	call	#_expr
046b4                 | ' 
046b4                 | ' 
046b4                 | ' expr()
046b4                 | ' return 0
046b4     50 00 90 FD | 	jmp	#LR__0388
046b8                 | LR__0378
046b8     E0 33 B0 FD | 	call	#_expr
046bc                 | ' 
046bc                 | ' 
046bc                 | ' expr()
046bc                 | ' return 0
046bc     48 00 90 FD | 	jmp	#LR__0388
046c0                 | LR__0379
046c0     D8 33 B0 FD | 	call	#_expr
046c4                 | ' 
046c4                 | ' 
046c4                 | ' expr()
046c4                 | ' return 0
046c4     40 00 90 FD | 	jmp	#LR__0388
046c8                 | LR__0380
046c8     D0 33 B0 FD | 	call	#_expr
046cc                 | ' 
046cc                 | ' 
046cc                 | ' expr()
046cc                 | ' return 0
046cc     38 00 90 FD | 	jmp	#LR__0388
046d0                 | LR__0381
046d0     C8 33 B0 FD | 	call	#_expr
046d4                 | ' 
046d4                 | ' 
046d4                 | ' expr()
046d4                 | ' return 0
046d4     30 00 90 FD | 	jmp	#LR__0388
046d8                 | LR__0382
046d8     BC 0F B0 FD | 	call	#_compile_fun_3p
046dc     28 00 90 FD | 	jmp	#LR__0388
046e0                 | LR__0383
046e0     A4 11 B0 FD | 	call	#_compile_fun_5p
046e4     20 00 90 FD | 	jmp	#LR__0388
046e8                 | LR__0384
046e8     78 10 B0 FD | 	call	#_compile_fun_4p
046ec     18 00 90 FD | 	jmp	#LR__0388
046f0                 | LR__0385
046f0     7C 1D B0 FD | 	call	#_compile_dim
046f4     CC 00 90 FD | 	jmp	#LR__0389
046f8                 | LR__0386
046f8     8C 02 B0 FD | 	call	#_compile_array_assign
046fc     C4 00 90 FD | 	jmp	#LR__0389
04700                 | LR__0387
04700     7C 0D B0 FD | 	call	#_compile_unknown
04704     BC 00 90 FD | 	jmp	#LR__0389
04708                 | LR__0388
04708     14 23 02 F6 | 	mov	local03, local06
0470c     16 1F 02 F6 | 	mov	local01, local08
04710     0F 2B 02 F6 | 	mov	local07, local01
04714     10 2F 02 F6 | 	mov	local09, local02
04718     11 1F 02 F6 | 	mov	local01, local03
0471c     41 00 00 FF 
04720     40 E4 05 F1 | 	add	objptr, ##33344
04724     F2 2C 02 FB | 	rdlong	local08, objptr
04728     16 29 02 F6 | 	mov	local06, local08
0472c     01 28 66 F0 | 	shl	local06, #1
04730     16 29 02 F1 | 	add	local06, local08
04734     02 28 66 F0 | 	shl	local06, #2
04738     03 00 00 FF 
0473c     00 E4 85 F1 | 	sub	objptr, ##1536
04740     F2 28 02 F1 | 	add	local06, objptr
04744     14 2B 62 FC | 	wrlong	local07, local06
04748     03 00 00 FF 
0474c     00 E4 05 F1 | 	add	objptr, ##1536
04750     F2 2C 02 FB | 	rdlong	local08, objptr
04754     16 2B 02 F6 | 	mov	local07, local08
04758     01 2A 66 F0 | 	shl	local07, #1
0475c     16 2B 02 F1 | 	add	local07, local08
04760     02 2A 66 F0 | 	shl	local07, #2
04764     03 00 00 FF 
04768     00 E4 85 F1 | 	sub	objptr, ##1536
0476c     F2 2A 02 F1 | 	add	local07, objptr
04770     04 2A 06 F1 | 	add	local07, #4
04774     15 2F 62 FC | 	wrlong	local09, local07
04778     03 00 00 FF 
0477c     00 E4 05 F1 | 	add	objptr, ##1536
04780     F2 2E 02 FB | 	rdlong	local09, objptr
04784     17 2D 02 F6 | 	mov	local08, local09
04788     01 2C 66 F0 | 	shl	local08, #1
0478c     17 2D 02 F1 | 	add	local08, local09
04790     02 2C 66 F0 | 	shl	local08, #2
04794     03 00 00 FF 
04798     00 E4 85 F1 | 	sub	objptr, ##1536
0479c     F2 2C 02 F1 | 	add	local08, objptr
047a0     08 2C 06 F1 | 	add	local08, #8
047a4     16 1F 62 FC | 	wrlong	local01, local08
047a8     03 00 00 FF 
047ac     00 E4 05 F1 | 	add	objptr, ##1536
047b0     F2 2A 02 FB | 	rdlong	local07, objptr
047b4     01 2A 06 F1 | 	add	local07, #1
047b8     F2 2A 62 FC | 	wrlong	local07, objptr
047bc     41 00 00 FF 
047c0     40 E4 85 F1 | 	sub	objptr, ##33344
047c4                 | LR__0389
047c4                 | ' 
047c4                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
047c4                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
047c4     00 24 0E F2 | 	cmp	local04, #0 wz
047c8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
047cc     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
047d0     38 00 90 5D |  if_ne	jmp	#LR__0390
047d4     41 00 00 FF 
047d8     40 E4 05 F1 | 	add	objptr, ##33344
047dc     F2 2E 02 FB | 	rdlong	local09, objptr
047e0     17 1F 02 F6 | 	mov	local01, local09
047e4     01 1E 66 F0 | 	shl	local01, #1
047e8     17 1F 02 F1 | 	add	local01, local09
047ec     02 1E 66 F0 | 	shl	local01, #2
047f0     03 00 00 FF 
047f4     00 E4 85 F1 | 	sub	objptr, ##1536
047f8     F2 1E 02 F1 | 	add	local01, objptr
047fc     08 1E 06 F1 | 	add	local01, #8
04800     0F FD 6B FC | 	wrlong	#510, local01
04804     3E 00 00 FF 
04808     40 E4 85 F1 | 	sub	objptr, ##31808
0480c                 | LR__0390
0480c                 | ' 
0480c                 | '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0480c     00 12 06 F6 | 	mov	arg01, #0
04810     F4 5F B1 FD | 	call	#__system___getiolock_0334
04814     FD 12 02 F6 | 	mov	arg01, result1
04818     38 0A B1 FD | 	call	#__system___lockmem
0481c     23 01 00 FF 
04820     50 15 06 F6 | 	mov	arg02, ##@LR__4245
04824     00 12 06 F6 | 	mov	arg01, #0
04828     00 16 06 F6 | 	mov	arg03, #0
0482c     18 17 B1 FD | 	call	#__system___basic_print_string
04830     00 12 06 F6 | 	mov	arg01, #0
04834     0A 14 06 F6 | 	mov	arg02, #10
04838     00 16 06 F6 | 	mov	arg03, #0
0483c     B0 16 B1 FD | 	call	#__system___basic_print_char
04840     00 12 06 F6 | 	mov	arg01, #0
04844     C0 5F B1 FD | 	call	#__system___getiolock_0334
04848     FD 00 68 FC | 	wrlong	#0, result1
0484c     00 2E 06 F6 | 	mov	local09, #0
04850     41 00 00 FF 
04854     40 E4 05 F1 | 	add	objptr, ##33344
04858     F2 1E 02 FB | 	rdlong	local01, objptr
0485c     41 00 00 FF 
04860     40 E4 85 F1 | 	sub	objptr, ##33344
04864     01 1E 06 F1 | 	add	local01, #1
04868                 | LR__0391
04868     0F 2F 52 F2 | 	cmps	local09, local01 wc
0486c     08 01 90 3D |  if_ae	jmp	#LR__0392
04870     00 12 06 F6 | 	mov	arg01, #0
04874     90 5F B1 FD | 	call	#__system___getiolock_0334
04878     FD 12 02 F6 | 	mov	arg01, result1
0487c     D4 09 B1 FD | 	call	#__system___lockmem
04880     17 2D 02 F6 | 	mov	local08, local09
04884     01 2C 66 F0 | 	shl	local08, #1
04888     17 2D 02 F1 | 	add	local08, local09
0488c     02 2C 66 F0 | 	shl	local08, #2
04890     3E 00 00 FF 
04894     40 E4 05 F1 | 	add	objptr, ##31808
04898     F2 2C 02 F1 | 	add	local08, objptr
0489c     08 2C 06 F1 | 	add	local08, #8
048a0     16 15 02 FB | 	rdlong	arg02, local08
048a4     00 12 06 F6 | 	mov	arg01, #0
048a8     00 16 06 F6 | 	mov	arg03, #0
048ac     0A 18 06 F6 | 	mov	arg04, #10
048b0     3E 00 00 FF 
048b4     40 E4 85 F1 | 	sub	objptr, ##31808
048b8     10 17 B1 FD | 	call	#__system___basic_print_unsigned
048bc     23 01 00 FF 
048c0     66 15 06 F6 | 	mov	arg02, ##@LR__4246
048c4     00 12 06 F6 | 	mov	arg01, #0
048c8     00 16 06 F6 | 	mov	arg03, #0
048cc     78 16 B1 FD | 	call	#__system___basic_print_string
048d0     17 2D 02 F6 | 	mov	local08, local09
048d4     01 2C 66 F0 | 	shl	local08, #1
048d8     17 2D 02 F1 | 	add	local08, local09
048dc     02 2C 66 F0 | 	shl	local08, #2
048e0     3E 00 00 FF 
048e4     40 E4 05 F1 | 	add	objptr, ##31808
048e8     F2 2C 02 F1 | 	add	local08, objptr
048ec     16 15 02 FB | 	rdlong	arg02, local08
048f0     00 12 06 F6 | 	mov	arg01, #0
048f4     00 16 06 F6 | 	mov	arg03, #0
048f8     0A 18 06 F6 | 	mov	arg04, #10
048fc     3E 00 00 FF 
04900     40 E4 85 F1 | 	sub	objptr, ##31808
04904     C4 16 B1 FD | 	call	#__system___basic_print_unsigned
04908     00 12 06 F6 | 	mov	arg01, #0
0490c     09 14 06 F6 | 	mov	arg02, #9
04910     00 16 06 F6 | 	mov	arg03, #0
04914     D8 15 B1 FD | 	call	#__system___basic_print_char
04918     17 2D 02 F6 | 	mov	local08, local09
0491c     01 2C 66 F0 | 	shl	local08, #1
04920     17 2D 02 F1 | 	add	local08, local09
04924     02 2C 66 F0 | 	shl	local08, #2
04928     3E 00 00 FF 
0492c     40 E4 05 F1 | 	add	objptr, ##31808
04930     F2 2C 02 F1 | 	add	local08, objptr
04934     04 2C 06 F1 | 	add	local08, #4
04938     16 15 02 FB | 	rdlong	arg02, local08
0493c     00 12 06 F6 | 	mov	arg01, #0
04940     00 16 06 F6 | 	mov	arg03, #0
04944     0A 18 06 F6 | 	mov	arg04, #10
04948     3E 00 00 FF 
0494c     40 E4 85 F1 | 	sub	objptr, ##31808
04950     78 16 B1 FD | 	call	#__system___basic_print_unsigned
04954     00 12 06 F6 | 	mov	arg01, #0
04958     0A 14 06 F6 | 	mov	arg02, #10
0495c     00 16 06 F6 | 	mov	arg03, #0
04960     8C 15 B1 FD | 	call	#__system___basic_print_char
04964     00 12 06 F6 | 	mov	arg01, #0
04968     9C 5E B1 FD | 	call	#__system___getiolock_0334
0496c     FD 00 68 FC | 	wrlong	#0, result1
04970     01 2E 06 F1 | 	add	local09, #1
04974     F0 FE 9F FD | 	jmp	#LR__0391
04978                 | LR__0392
04978                 | ' return err
04978     13 FB 01 F6 | 	mov	result1, local05
0497c     A7 F0 03 F6 | 	mov	ptra, fp
04980     B2 00 A0 FD | 	call	#popregs_
04984                 | _compile_immediate_ret
04984     2D 00 64 FD | 	ret
04988                 | 
04988                 | ' 
04988                 | ' sub compile_array_assign
04988                 | _compile_array_assign
04988     0A 4A 05 F6 | 	mov	COUNT_, #10
0498c     A8 00 A0 FD | 	call	#pushregs_
04990     00 24 06 F6 | 	mov	local04, #0
04994                 | ' numpar=0
04994                 | ' print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
04994     00 12 06 F6 | 	mov	arg01, #0
04998     6C 5E B1 FD | 	call	#__system___getiolock_0334
0499c     FD 12 02 F6 | 	mov	arg01, result1
049a0     B0 08 B1 FD | 	call	#__system___lockmem
049a4     23 01 00 FF 
049a8     68 15 06 F6 | 	mov	arg02, ##@LR__4247
049ac     00 12 06 F6 | 	mov	arg01, #0
049b0     00 16 06 F6 | 	mov	arg03, #0
049b4     90 15 B1 FD | 	call	#__system___basic_print_string
049b8     00 12 06 F6 | 	mov	arg01, #0
049bc     09 14 06 F6 | 	mov	arg02, #9
049c0     00 16 06 F6 | 	mov	arg03, #0
049c4     28 15 B1 FD | 	call	#__system___basic_print_char
049c8     2E 00 00 FF 
049cc     08 E4 05 F1 | 	add	objptr, ##23560
049d0     F2 18 02 FB | 	rdlong	arg04, objptr
049d4     03 18 66 F0 | 	shl	arg04, #3
049d8     02 00 00 FF 
049dc     38 E4 85 F1 | 	sub	objptr, ##1080
049e0     F2 18 02 F1 | 	add	arg04, objptr
049e4     04 18 06 F1 | 	add	arg04, #4
049e8     0C 15 02 FB | 	rdlong	arg02, arg04
049ec     00 12 06 F6 | 	mov	arg01, #0
049f0     00 16 06 F6 | 	mov	arg03, #0
049f4     0A 18 06 F6 | 	mov	arg04, #10
049f8     2B 00 00 FF 
049fc     D0 E5 85 F1 | 	sub	objptr, ##22480
04a00     88 15 B1 FD | 	call	#__system___basic_print_integer
04a04     00 12 06 F6 | 	mov	arg01, #0
04a08     09 14 06 F6 | 	mov	arg02, #9
04a0c     00 16 06 F6 | 	mov	arg03, #0
04a10     DC 14 B1 FD | 	call	#__system___basic_print_char
04a14     2E 00 00 FF 
04a18     08 E4 05 F1 | 	add	objptr, ##23560
04a1c     F2 18 02 FB | 	rdlong	arg04, objptr
04a20     03 18 66 F0 | 	shl	arg04, #3
04a24     02 00 00 FF 
04a28     38 E4 85 F1 | 	sub	objptr, ##1080
04a2c     F2 18 02 F1 | 	add	arg04, objptr
04a30     0C 15 02 FB | 	rdlong	arg02, arg04
04a34     00 12 06 F6 | 	mov	arg01, #0
04a38     00 16 06 F6 | 	mov	arg03, #0
04a3c     2B 00 00 FF 
04a40     D0 E5 85 F1 | 	sub	objptr, ##22480
04a44     00 15 B1 FD | 	call	#__system___basic_print_string
04a48     00 12 06 F6 | 	mov	arg01, #0
04a4c     0A 14 06 F6 | 	mov	arg02, #10
04a50     00 16 06 F6 | 	mov	arg03, #0
04a54     98 14 B1 FD | 	call	#__system___basic_print_char
04a58     00 12 06 F6 | 	mov	arg01, #0
04a5c     A8 5D B1 FD | 	call	#__system___getiolock_0334
04a60     FD 00 68 FC | 	wrlong	#0, result1
04a64     2E 00 00 FF 
04a68     08 E4 05 F1 | 	add	objptr, ##23560
04a6c     F2 18 02 FB | 	rdlong	arg04, objptr
04a70     01 18 86 F1 | 	sub	arg04, #1
04a74     03 18 66 F0 | 	shl	arg04, #3
04a78     02 00 00 FF 
04a7c     38 E4 85 F1 | 	sub	objptr, ##1080
04a80     F2 18 02 F1 | 	add	arg04, objptr
04a84     0C 27 02 FB | 	rdlong	local05, arg04
04a88                 | ' ' todo here: recognize params and t1.result.twowords=numpar
04a88                 | ' varname$=lparts(ct-1).part$ : print "In array_assign, varname$=";varname$
04a88     00 12 06 F6 | 	mov	arg01, #0
04a8c     2B 00 00 FF 
04a90     D0 E5 85 F1 | 	sub	objptr, ##22480
04a94     70 5D B1 FD | 	call	#__system___getiolock_0334
04a98     FD 12 02 F6 | 	mov	arg01, result1
04a9c     B4 07 B1 FD | 	call	#__system___lockmem
04aa0     23 01 00 FF 
04aa4     8B 15 06 F6 | 	mov	arg02, ##@LR__4248
04aa8     00 12 06 F6 | 	mov	arg01, #0
04aac     00 16 06 F6 | 	mov	arg03, #0
04ab0     94 14 B1 FD | 	call	#__system___basic_print_string
04ab4     00 12 06 F6 | 	mov	arg01, #0
04ab8     13 15 02 F6 | 	mov	arg02, local05
04abc     00 16 06 F6 | 	mov	arg03, #0
04ac0     84 14 B1 FD | 	call	#__system___basic_print_string
04ac4     00 12 06 F6 | 	mov	arg01, #0
04ac8     0A 14 06 F6 | 	mov	arg02, #10
04acc     00 16 06 F6 | 	mov	arg03, #0
04ad0     1C 14 B1 FD | 	call	#__system___basic_print_char
04ad4     00 12 06 F6 | 	mov	arg01, #0
04ad8     2C 5D B1 FD | 	call	#__system___getiolock_0334
04adc     FD 00 68 FC | 	wrlong	#0, result1
04ae0                 | ' if lparts(ct).token=token_lpar then
04ae0     2E 00 00 FF 
04ae4     08 E4 05 F1 | 	add	objptr, ##23560
04ae8     F2 28 02 FB | 	rdlong	local06, objptr
04aec     03 28 66 F0 | 	shl	local06, #3
04af0     02 00 00 FF 
04af4     38 E4 85 F1 | 	sub	objptr, ##1080
04af8     F2 28 02 F1 | 	add	local06, objptr
04afc     04 28 06 F1 | 	add	local06, #4
04b00     14 29 02 FB | 	rdlong	local06, local06
04b04     15 28 0E F2 | 	cmp	local06, #21 wz
04b08     2B 00 00 FF 
04b0c     D0 E5 85 F1 | 	sub	objptr, ##22480
04b10     2C 04 90 5D |  if_ne	jmp	#LR__0408
04b14     2E 00 00 FF 
04b18     08 E4 05 F1 | 	add	objptr, ##23560
04b1c     F2 2A 02 FB | 	rdlong	local07, objptr
04b20     01 2A 06 F1 | 	add	local07, #1
04b24     F2 2A 62 FC | 	wrlong	local07, objptr
04b28     2E 00 00 FF 
04b2c     08 E4 85 F1 | 	sub	objptr, ##23560
04b30                 | '   ct+=1 											' omit this lpar, this is for expr list
04b30                 | '   do
04b30                 | LR__0400
04b30     68 2F B0 FD | 	call	#_expr
04b34     2E 00 00 FF 
04b38     08 E4 05 F1 | 	add	objptr, ##23560
04b3c     F2 28 02 FB | 	rdlong	local06, objptr
04b40     01 28 06 F1 | 	add	local06, #1
04b44     F2 28 62 FC | 	wrlong	local06, objptr
04b48     01 24 06 F1 | 	add	local04, #1
04b4c     01 28 86 F1 | 	sub	local06, #1
04b50     03 28 66 F0 | 	shl	local06, #3
04b54     02 00 00 FF 
04b58     38 E4 85 F1 | 	sub	objptr, ##1080
04b5c     F2 28 02 F1 | 	add	local06, objptr
04b60     04 28 06 F1 | 	add	local06, #4
04b64     14 2B 02 FB | 	rdlong	local07, local06
04b68     14 2A 0E F2 | 	cmp	local07, #20 wz
04b6c     2B 00 00 FF 
04b70     D0 E5 85 F1 | 	sub	objptr, ##22480
04b74     34 00 90 AD |  if_e	jmp	#LR__0401
04b78     2E 00 00 FF 
04b7c     08 E4 05 F1 | 	add	objptr, ##23560
04b80     F2 2A 02 FB | 	rdlong	local07, objptr
04b84     03 2A 66 F0 | 	shl	local07, #3
04b88     02 00 00 FF 
04b8c     38 E4 85 F1 | 	sub	objptr, ##1080
04b90     F2 2A 02 F1 | 	add	local07, objptr
04b94     04 2A 06 F1 | 	add	local07, #4
04b98     15 2B 02 FB | 	rdlong	local07, local07
04b9c     FE 2B 0E F2 | 	cmp	local07, #510 wz
04ba0     2B 00 00 FF 
04ba4     D0 E5 85 F1 | 	sub	objptr, ##22480
04ba8     84 FF 9F 5D |  if_ne	jmp	#LR__0400
04bac                 | LR__0401
04bac                 | '    print "in array_assign, rpar found, numpar=",numpar
04bac     00 12 06 F6 | 	mov	arg01, #0
04bb0     54 5C B1 FD | 	call	#__system___getiolock_0334
04bb4     FD 12 02 F6 | 	mov	arg01, result1
04bb8     98 06 B1 FD | 	call	#__system___lockmem
04bbc     23 01 00 FF 
04bc0     A6 15 06 F6 | 	mov	arg02, ##@LR__4249
04bc4     00 12 06 F6 | 	mov	arg01, #0
04bc8     00 16 06 F6 | 	mov	arg03, #0
04bcc     78 13 B1 FD | 	call	#__system___basic_print_string
04bd0     00 12 06 F6 | 	mov	arg01, #0
04bd4     09 14 06 F6 | 	mov	arg02, #9
04bd8     00 16 06 F6 | 	mov	arg03, #0
04bdc     10 13 B1 FD | 	call	#__system___basic_print_char
04be0     00 12 06 F6 | 	mov	arg01, #0
04be4     12 15 02 F6 | 	mov	arg02, local04
04be8     00 16 06 F6 | 	mov	arg03, #0
04bec     0A 18 06 F6 | 	mov	arg04, #10
04bf0     D8 13 B1 FD | 	call	#__system___basic_print_unsigned
04bf4     00 12 06 F6 | 	mov	arg01, #0
04bf8     0A 14 06 F6 | 	mov	arg02, #10
04bfc     00 16 06 F6 | 	mov	arg03, #0
04c00     EC 12 B1 FD | 	call	#__system___basic_print_char
04c04     00 12 06 F6 | 	mov	arg01, #0
04c08     FC 5B B1 FD | 	call	#__system___getiolock_0334
04c0c     FD 00 68 FC | 	wrlong	#0, result1
04c10                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
04c10                 | ' if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
04c10     2E 00 00 FF 
04c14     08 E4 05 F1 | 	add	objptr, ##23560
04c18     F2 28 02 FB | 	rdlong	local06, objptr
04c1c     03 28 66 F0 | 	shl	local06, #3
04c20     02 00 00 FF 
04c24     38 E4 85 F1 | 	sub	objptr, ##1080
04c28     F2 28 02 F1 | 	add	local06, objptr
04c2c     04 28 06 F1 | 	add	local06, #4
04c30     14 2B 02 FB | 	rdlong	local07, local06
04c34     1B 2A 0E F2 | 	cmp	local07, #27 wz
04c38     2B 00 00 FF 
04c3c     D0 E5 85 F1 | 	sub	objptr, ##22480
04c40     44 00 90 AD |  if_e	jmp	#LR__0402
04c44     00 12 06 F6 | 	mov	arg01, #0
04c48     BC 5B B1 FD | 	call	#__system___getiolock_0334
04c4c     FD 12 02 F6 | 	mov	arg01, result1
04c50     00 06 B1 FD | 	call	#__system___lockmem
04c54     23 01 00 FF 
04c58     CB 15 06 F6 | 	mov	arg02, ##@LR__4250
04c5c     00 12 06 F6 | 	mov	arg01, #0
04c60     00 16 06 F6 | 	mov	arg03, #0
04c64     E0 12 B1 FD | 	call	#__system___basic_print_string
04c68     00 12 06 F6 | 	mov	arg01, #0
04c6c     0A 14 06 F6 | 	mov	arg02, #10
04c70     00 16 06 F6 | 	mov	arg03, #0
04c74     78 12 B1 FD | 	call	#__system___basic_print_char
04c78     00 12 06 F6 | 	mov	arg01, #0
04c7c     88 5B B1 FD | 	call	#__system___getiolock_0334
04c80     FD 00 68 FC | 	wrlong	#0, result1
04c84     40 00 90 FD | 	jmp	#LR__0403
04c88                 | LR__0402
04c88     00 12 06 F6 | 	mov	arg01, #0
04c8c     78 5B B1 FD | 	call	#__system___getiolock_0334
04c90     FD 12 02 F6 | 	mov	arg01, result1
04c94     BC 05 B1 FD | 	call	#__system___lockmem
04c98     23 01 00 FF 
04c9c     E6 15 06 F6 | 	mov	arg02, ##@LR__4251
04ca0     00 12 06 F6 | 	mov	arg01, #0
04ca4     00 16 06 F6 | 	mov	arg03, #0
04ca8     9C 12 B1 FD | 	call	#__system___basic_print_string
04cac     00 12 06 F6 | 	mov	arg01, #0
04cb0     0A 14 06 F6 | 	mov	arg02, #10
04cb4     00 16 06 F6 | 	mov	arg03, #0
04cb8     34 12 B1 FD | 	call	#__system___basic_print_char
04cbc     00 12 06 F6 | 	mov	arg01, #0
04cc0     44 5B B1 FD | 	call	#__system___getiolock_0334
04cc4     FD 00 68 FC | 	wrlong	#0, result1
04cc8                 | LR__0403
04cc8     2E 00 00 FF 
04ccc     08 E4 05 F1 | 	add	objptr, ##23560
04cd0     F2 2A 02 FB | 	rdlong	local07, objptr
04cd4     01 2A 06 F1 | 	add	local07, #1
04cd8     F2 2A 62 FC | 	wrlong	local07, objptr
04cdc     2E 00 00 FF 
04ce0     08 E4 85 F1 | 	sub	objptr, ##23560
04ce4     B4 2D B0 FD | 	call	#_expr
04ce8     01 2C 66 F6 | 	neg	local08, #1
04cec     00 2E 06 F6 | 	mov	local09, #0
04cf0                 | ' ct+=1 : expr()
04cf0                 | ' ' now find the vae
04cf0                 | ' 
04cf0                 | ' j=-1 : i=0 : do : 
04cf0                 | LR__0404
04cf0                 | '   if variables(i).name=varname$ then j=i: exit loop
04cf0     17 29 02 F6 | 	mov	local06, local09
04cf4     04 28 66 F0 | 	shl	local06, #4
04cf8     0B 00 00 FF 
04cfc     CC E5 05 F1 | 	add	objptr, ##6092
04d00     F2 28 02 F1 | 	add	local06, objptr
04d04     14 13 02 FB | 	rdlong	arg01, local06
04d08     13 15 02 F6 | 	mov	arg02, local05
04d0c     0B 00 00 FF 
04d10     CC E5 85 F1 | 	sub	objptr, ##6092
04d14     64 05 B1 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     17 2D 02 A6 |  if_e	mov	local08, local09
04d20     20 00 90 AD |  if_e	jmp	#LR__0405
04d24     01 2E 06 F1 | 	add	local09, #1
04d28     2B 00 00 FF 
04d2c     CC E5 05 F1 | 	add	objptr, ##22476
04d30     F2 2A 02 FB | 	rdlong	local07, objptr
04d34     2B 00 00 FF 
04d38     CC E5 85 F1 | 	sub	objptr, ##22476
04d3c     15 2F 5A F2 | 	cmps	local09, local07 wcz
04d40     AC FF 9F ED |  if_be	jmp	#LR__0404
04d44                 | LR__0405
04d44                 | ' if j>-1 then print   "in array_assign, variable found, id=";j else print ("in array_assign, var has to be dimmed")
04d44     00 2C 56 F2 | 	cmps	local08, #0 wc
04d48     58 00 90 CD |  if_b	jmp	#LR__0406
04d4c     00 12 06 F6 | 	mov	arg01, #0
04d50     B4 5A B1 FD | 	call	#__system___getiolock_0334
04d54     FD 12 02 F6 | 	mov	arg01, result1
04d58     F8 04 B1 FD | 	call	#__system___lockmem
04d5c     23 01 00 FF 
04d60     FE 15 06 F6 | 	mov	arg02, ##@LR__4252
04d64     00 12 06 F6 | 	mov	arg01, #0
04d68     00 16 06 F6 | 	mov	arg03, #0
04d6c     D8 11 B1 FD | 	call	#__system___basic_print_string
04d70     00 12 06 F6 | 	mov	arg01, #0
04d74     16 15 02 F6 | 	mov	arg02, local08
04d78     00 16 06 F6 | 	mov	arg03, #0
04d7c     0A 18 06 F6 | 	mov	arg04, #10
04d80     48 12 B1 FD | 	call	#__system___basic_print_unsigned
04d84     00 12 06 F6 | 	mov	arg01, #0
04d88     0A 14 06 F6 | 	mov	arg02, #10
04d8c     00 16 06 F6 | 	mov	arg03, #0
04d90     5C 11 B1 FD | 	call	#__system___basic_print_char
04d94     00 12 06 F6 | 	mov	arg01, #0
04d98     6C 5A B1 FD | 	call	#__system___getiolock_0334
04d9c     FD 00 68 FC | 	wrlong	#0, result1
04da0     40 00 90 FD | 	jmp	#LR__0407
04da4                 | LR__0406
04da4     00 12 06 F6 | 	mov	arg01, #0
04da8     5C 5A B1 FD | 	call	#__system___getiolock_0334
04dac     FD 12 02 F6 | 	mov	arg01, result1
04db0     A0 04 B1 FD | 	call	#__system___lockmem
04db4     24 01 00 FF 
04db8     23 14 06 F6 | 	mov	arg02, ##@LR__4253
04dbc     00 12 06 F6 | 	mov	arg01, #0
04dc0     00 16 06 F6 | 	mov	arg03, #0
04dc4     80 11 B1 FD | 	call	#__system___basic_print_string
04dc8     00 12 06 F6 | 	mov	arg01, #0
04dcc     0A 14 06 F6 | 	mov	arg02, #10
04dd0     00 16 06 F6 | 	mov	arg03, #0
04dd4     18 11 B1 FD | 	call	#__system___basic_print_char
04dd8     00 12 06 F6 | 	mov	arg01, #0
04ddc     28 5A B1 FD | 	call	#__system___getiolock_0334
04de0     FD 00 68 FC | 	wrlong	#0, result1
04de4                 | LR__0407
04de4     16 1F 02 F6 | 	mov	local01, local08
04de8     12 21 02 F6 | 	mov	local02, local04
04dec     17 22 06 F6 | 	mov	local03, #23
04df0     0F 2B 02 F6 | 	mov	local07, local01
04df4     10 31 02 F6 | 	mov	local10, local02
04df8     11 19 02 F6 | 	mov	arg04, local03
04dfc     41 00 00 FF 
04e00     40 E4 05 F1 | 	add	objptr, ##33344
04e04     F2 16 02 FB | 	rdlong	arg03, objptr
04e08     0B 15 02 F6 | 	mov	arg02, arg03
04e0c     01 14 66 F0 | 	shl	arg02, #1
04e10     0B 15 02 F1 | 	add	arg02, arg03
04e14     02 14 66 F0 | 	shl	arg02, #2
04e18     03 00 00 FF 
04e1c     00 E4 85 F1 | 	sub	objptr, ##1536
04e20     F2 14 02 F1 | 	add	arg02, objptr
04e24     0A 2B 62 FC | 	wrlong	local07, arg02
04e28     03 00 00 FF 
04e2c     00 E4 05 F1 | 	add	objptr, ##1536
04e30     F2 2A 02 FB | 	rdlong	local07, objptr
04e34     15 17 02 F6 | 	mov	arg03, local07
04e38     01 16 66 F0 | 	shl	arg03, #1
04e3c     15 17 02 F1 | 	add	arg03, local07
04e40     02 16 66 F0 | 	shl	arg03, #2
04e44     03 00 00 FF 
04e48     00 E4 85 F1 | 	sub	objptr, ##1536
04e4c     F2 16 02 F1 | 	add	arg03, objptr
04e50     04 16 06 F1 | 	add	arg03, #4
04e54     0B 31 62 FC | 	wrlong	local10, arg03
04e58     03 00 00 FF 
04e5c     00 E4 05 F1 | 	add	objptr, ##1536
04e60     F2 2A 02 FB | 	rdlong	local07, objptr
04e64     15 17 02 F6 | 	mov	arg03, local07
04e68     01 16 66 F0 | 	shl	arg03, #1
04e6c     15 17 02 F1 | 	add	arg03, local07
04e70     02 16 66 F0 | 	shl	arg03, #2
04e74     03 00 00 FF 
04e78     00 E4 85 F1 | 	sub	objptr, ##1536
04e7c     F2 16 02 F1 | 	add	arg03, objptr
04e80     08 16 06 F1 | 	add	arg03, #8
04e84     0B 19 62 FC | 	wrlong	arg04, arg03
04e88     03 00 00 FF 
04e8c     00 E4 05 F1 | 	add	objptr, ##1536
04e90     F2 2A 02 FB | 	rdlong	local07, objptr
04e94     01 2A 06 F1 | 	add	local07, #1
04e98     F2 2A 62 FC | 	wrlong	local07, objptr
04e9c     41 00 00 FF 
04ea0     40 E4 85 F1 | 	sub	objptr, ##33344
04ea4                 | ' 
04ea4                 | ' t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
04ea4                 | ' print "in array_assign,t1.result.twowords(1)=";t1.result.twowords(1),"numpar=",numpar
04ea4     00 12 06 F6 | 	mov	arg01, #0
04ea8     5C 59 B1 FD | 	call	#__system___getiolock_0334
04eac     FD 12 02 F6 | 	mov	arg01, result1
04eb0     A0 03 B1 FD | 	call	#__system___lockmem
04eb4     24 01 00 FF 
04eb8     49 14 06 F6 | 	mov	arg02, ##@LR__4254
04ebc     00 12 06 F6 | 	mov	arg01, #0
04ec0     00 16 06 F6 | 	mov	arg03, #0
04ec4     80 10 B1 FD | 	call	#__system___basic_print_string
04ec8     10 15 02 F6 | 	mov	arg02, local02
04ecc     00 12 06 F6 | 	mov	arg01, #0
04ed0     00 16 06 F6 | 	mov	arg03, #0
04ed4     0A 18 06 F6 | 	mov	arg04, #10
04ed8     F0 10 B1 FD | 	call	#__system___basic_print_unsigned
04edc     00 12 06 F6 | 	mov	arg01, #0
04ee0     09 14 06 F6 | 	mov	arg02, #9
04ee4     00 16 06 F6 | 	mov	arg03, #0
04ee8     04 10 B1 FD | 	call	#__system___basic_print_char
04eec     24 01 00 FF 
04ef0     70 14 06 F6 | 	mov	arg02, ##@LR__4255
04ef4     00 12 06 F6 | 	mov	arg01, #0
04ef8     00 16 06 F6 | 	mov	arg03, #0
04efc     48 10 B1 FD | 	call	#__system___basic_print_string
04f00     00 12 06 F6 | 	mov	arg01, #0
04f04     09 14 06 F6 | 	mov	arg02, #9
04f08     00 16 06 F6 | 	mov	arg03, #0
04f0c     E0 0F B1 FD | 	call	#__system___basic_print_char
04f10     00 12 06 F6 | 	mov	arg01, #0
04f14     12 15 02 F6 | 	mov	arg02, local04
04f18     00 16 06 F6 | 	mov	arg03, #0
04f1c     0A 18 06 F6 | 	mov	arg04, #10
04f20     A8 10 B1 FD | 	call	#__system___basic_print_unsigned
04f24     00 12 06 F6 | 	mov	arg01, #0
04f28     0A 14 06 F6 | 	mov	arg02, #10
04f2c     00 16 06 F6 | 	mov	arg03, #0
04f30     BC 0F B1 FD | 	call	#__system___basic_print_char
04f34     00 12 06 F6 | 	mov	arg01, #0
04f38     CC 58 B1 FD | 	call	#__system___getiolock_0334
04f3c     FD 00 68 FC | 	wrlong	#0, result1
04f40                 | LR__0408
04f40     A7 F0 03 F6 | 	mov	ptra, fp
04f44     B2 00 A0 FD | 	call	#popregs_
04f48                 | _compile_array_assign_ret
04f48     2D 00 64 FD | 	ret
04f4c                 | 
04f4c                 | ' 
04f4c                 | ' 
04f4c                 | ' sub compile_immediate_assign(linetype as ulong)
04f4c                 | _compile_immediate_assign
04f4c     09 4A 05 F6 | 	mov	COUNT_, #9
04f50     A8 00 A0 FD | 	call	#pushregs_
04f54     09 25 0A F6 | 	mov	local04, arg01 wz
04f58     FF 22 06 F6 | 	mov	local03, #255
04f5c     01 26 66 F6 | 	neg	local05, #1
04f60                 | ' 
04f60                 | ' t1.result_type=result_error : t1.result.uresult=0
04f60                 | ' i=-1: j=-1
04f60                 | ' 
04f60                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
04f60     2C 00 90 5D |  if_ne	jmp	#LR__0410
04f64     2B 00 00 FF 
04f68     D0 E5 05 F1 | 	add	objptr, ##22480
04f6c     F2 28 02 FB | 	rdlong	local06, objptr
04f70     02 00 00 FF 
04f74     38 E4 05 F1 | 	add	objptr, ##1080
04f78     F2 04 68 FC | 	wrlong	#2, objptr
04f7c     13 00 00 FF 
04f80     38 E4 05 F1 | 	add	objptr, ##9784
04f84     F2 00 68 FC | 	wrlong	#0, objptr
04f88     41 00 00 FF 
04f8c     40 E4 85 F1 | 	sub	objptr, ##33344
04f90                 | LR__0410
04f90                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04f90     02 24 0E F2 | 	cmp	local04, #2 wz
04f94     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04f98     2B 00 00 AF 
04f9c     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04fa0     F2 28 02 AB |  if_e	rdlong	local06, objptr
04fa4     02 00 00 AF 
04fa8     38 E4 05 A1 |  if_e	add	objptr, ##1080
04fac     F2 04 68 AC |  if_e	wrlong	#2, objptr
04fb0     2E 00 00 AF 
04fb4     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04fb8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04fb8     04 24 0E F2 | 	cmp	local04, #4 wz
04fbc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04fc0     2C 00 90 5D |  if_ne	jmp	#LR__0411
04fc4     2B 00 00 FF 
04fc8     D8 E5 05 F1 | 	add	objptr, ##22488
04fcc     F2 28 02 FB | 	rdlong	local06, objptr
04fd0     02 00 00 FF 
04fd4     30 E4 05 F1 | 	add	objptr, ##1072
04fd8     F2 06 68 FC | 	wrlong	#3, objptr
04fdc     13 00 00 FF 
04fe0     38 E4 05 F1 | 	add	objptr, ##9784
04fe4     F2 04 68 FC | 	wrlong	#2, objptr
04fe8     41 00 00 FF 
04fec     40 E4 85 F1 | 	sub	objptr, ##33344
04ff0                 | LR__0411
04ff0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04ff0     05 24 0E F2 | 	cmp	local04, #5 wz
04ff4     3C 00 90 5D |  if_ne	jmp	#LR__0412
04ff8     2E 00 00 FF 
04ffc     08 E4 05 F1 | 	add	objptr, ##23560
05000     F2 FA 01 FB | 	rdlong	result1, objptr
05004     FD 28 02 F6 | 	mov	local06, result1
05008     03 28 66 F0 | 	shl	local06, #3
0500c     02 00 00 FF 
05010     38 E4 85 F1 | 	sub	objptr, ##1080
05014     F2 28 02 F1 | 	add	local06, objptr
05018     14 29 02 FB | 	rdlong	local06, local06
0501c     02 FA 05 F1 | 	add	result1, #2
05020     02 00 00 FF 
05024     38 E4 05 F1 | 	add	objptr, ##1080
05028     F2 FA 61 FC | 	wrlong	result1, objptr
0502c     2E 00 00 FF 
05030     08 E4 85 F1 | 	sub	objptr, ##23560
05034                 | LR__0412
05034     14 13 02 F6 | 	mov	arg01, local06
05038     01 14 06 F6 | 	mov	arg02, #1
0503c     AC 22 B1 FD | 	call	#__system__Right_S
05040     58 2A B0 FD | 	call	#_expr
05044                 | '  
05044                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05044                 | ' 
05044                 | ' suffix2$=right$(varname2$,1)
05044                 | ' expr()
05044                 | ' 
05044                 | ' 
05044                 | ' if varnum>0 then
05044     2B 00 00 FF 
05048     CC E5 05 F1 | 	add	objptr, ##22476
0504c     F2 2A 02 FB | 	rdlong	local07, objptr
05050     2B 00 00 FF 
05054     CC E5 85 F1 | 	sub	objptr, ##22476
05058     01 2A 56 F2 | 	cmps	local07, #1 wc
0505c     58 00 90 CD |  if_b	jmp	#LR__0415
05060                 | '   for i=0 to varnum-1
05060     00 2C 06 F6 | 	mov	local08, #0
05064     2B 00 00 FF 
05068     CC E5 05 F1 | 	add	objptr, ##22476
0506c     F2 2E 02 FB | 	rdlong	local09, objptr
05070     2B 00 00 FF 
05074     CC E5 85 F1 | 	sub	objptr, ##22476
05078                 | LR__0413
05078     17 2D 52 F2 | 	cmps	local08, local09 wc
0507c     38 00 90 3D |  if_ae	jmp	#LR__0414
05080                 | '     if variables(i).name=varname2$ then j=i : exit
05080     16 2B 02 F6 | 	mov	local07, local08
05084     04 2A 66 F0 | 	shl	local07, #4
05088     0B 00 00 FF 
0508c     CC E5 05 F1 | 	add	objptr, ##6092
05090     F2 2A 02 F1 | 	add	local07, objptr
05094     15 13 02 FB | 	rdlong	arg01, local07
05098     14 15 02 F6 | 	mov	arg02, local06
0509c     0B 00 00 FF 
050a0     CC E5 85 F1 | 	sub	objptr, ##6092
050a4     D4 01 B1 FD | 	call	#__system___string_cmp
050a8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ac     16 27 02 A6 |  if_e	mov	local05, local08
050b0     01 2C 06 51 |  if_ne	add	local08, #1
050b4     C0 FF 9F 5D |  if_ne	jmp	#LR__0413
050b8                 | LR__0414
050b8                 | LR__0415
050b8                 | ' if  j=-1 andalso varnum<maxvars then   
050b8     FF FF 7F FF 
050bc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
050c0     60 00 90 5D |  if_ne	jmp	#LR__0416
050c4     2B 00 00 FF 
050c8     CC E5 05 F1 | 	add	objptr, ##22476
050cc     F2 2A 02 FB | 	rdlong	local07, objptr
050d0     2B 00 00 FF 
050d4     CC E5 85 F1 | 	sub	objptr, ##22476
050d8     01 00 00 FF 
050dc     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
050e0     40 00 90 3D |  if_ae	jmp	#LR__0416
050e4     2B 00 00 FF 
050e8     CC E5 05 F1 | 	add	objptr, ##22476
050ec     F2 2E 02 FB | 	rdlong	local09, objptr
050f0     04 2E 66 F0 | 	shl	local09, #4
050f4     20 00 00 FF 
050f8     00 E4 85 F1 | 	sub	objptr, ##16384
050fc     F2 2E 02 F1 | 	add	local09, objptr
05100     17 29 62 FC | 	wrlong	local06, local09
05104     20 00 00 FF 
05108     00 E4 05 F1 | 	add	objptr, ##16384
0510c     F2 2A 02 FB | 	rdlong	local07, objptr
05110     15 27 02 F6 | 	mov	local05, local07
05114     01 2A 06 F1 | 	add	local07, #1
05118     F2 2A 62 FC | 	wrlong	local07, objptr
0511c     2B 00 00 FF 
05120     CC E5 85 F1 | 	sub	objptr, ##22476
05124                 | LR__0416
05124     13 1F 02 F6 | 	mov	local01, local05
05128     17 22 06 F6 | 	mov	local03, #23
0512c     0F 2B 02 F6 | 	mov	local07, local01
05130     10 2F 02 F6 | 	mov	local09, local02
05134     11 1F 02 F6 | 	mov	local01, local03
05138     41 00 00 FF 
0513c     40 E4 05 F1 | 	add	objptr, ##33344
05140     F2 2C 02 FB | 	rdlong	local08, objptr
05144     16 29 02 F6 | 	mov	local06, local08
05148     01 28 66 F0 | 	shl	local06, #1
0514c     16 29 02 F1 | 	add	local06, local08
05150     02 28 66 F0 | 	shl	local06, #2
05154     03 00 00 FF 
05158     00 E4 85 F1 | 	sub	objptr, ##1536
0515c     F2 28 02 F1 | 	add	local06, objptr
05160     14 2B 62 FC | 	wrlong	local07, local06
05164     03 00 00 FF 
05168     00 E4 05 F1 | 	add	objptr, ##1536
0516c     F2 2C 02 FB | 	rdlong	local08, objptr
05170     16 2B 02 F6 | 	mov	local07, local08
05174     01 2A 66 F0 | 	shl	local07, #1
05178     16 2B 02 F1 | 	add	local07, local08
0517c     02 2A 66 F0 | 	shl	local07, #2
05180     03 00 00 FF 
05184     00 E4 85 F1 | 	sub	objptr, ##1536
05188     F2 2A 02 F1 | 	add	local07, objptr
0518c     04 2A 06 F1 | 	add	local07, #4
05190     15 2F 62 FC | 	wrlong	local09, local07
05194     03 00 00 FF 
05198     00 E4 05 F1 | 	add	objptr, ##1536
0519c     F2 2E 02 FB | 	rdlong	local09, objptr
051a0     17 2D 02 F6 | 	mov	local08, local09
051a4     01 2C 66 F0 | 	shl	local08, #1
051a8     17 2D 02 F1 | 	add	local08, local09
051ac     02 2C 66 F0 | 	shl	local08, #2
051b0     03 00 00 FF 
051b4     00 E4 85 F1 | 	sub	objptr, ##1536
051b8     F2 2C 02 F1 | 	add	local08, objptr
051bc     08 2C 06 F1 | 	add	local08, #8
051c0     16 1F 62 FC | 	wrlong	local01, local08
051c4     03 00 00 FF 
051c8     00 E4 05 F1 | 	add	objptr, ##1536
051cc     F2 2A 02 FB | 	rdlong	local07, objptr
051d0     01 2A 06 F1 | 	add	local07, #1
051d4     F2 2A 62 FC | 	wrlong	local07, objptr
051d8     41 00 00 FF 
051dc     40 E4 85 F1 | 	sub	objptr, ##33344
051e0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
051e0                 | ' 
051e0                 | ' 
051e0                 | ' 
051e0                 | ' 
051e0                 | ' 
051e0                 | ' 
051e0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
051e0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
051e0     00 24 0E F2 | 	cmp	local04, #0 wz
051e4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
051e8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
051ec     38 00 90 5D |  if_ne	jmp	#LR__0417
051f0     41 00 00 FF 
051f4     40 E4 05 F1 | 	add	objptr, ##33344
051f8     F2 1E 02 FB | 	rdlong	local01, objptr
051fc     0F 2F 02 F6 | 	mov	local09, local01
05200     01 2E 66 F0 | 	shl	local09, #1
05204     0F 2F 02 F1 | 	add	local09, local01
05208     02 2E 66 F0 | 	shl	local09, #2
0520c     03 00 00 FF 
05210     00 E4 85 F1 | 	sub	objptr, ##1536
05214     F2 2E 02 F1 | 	add	local09, objptr
05218     08 2E 06 F1 | 	add	local09, #8
0521c     17 FD 6B FC | 	wrlong	#510, local09
05220     3E 00 00 FF 
05224     40 E4 85 F1 | 	sub	objptr, ##31808
05228                 | LR__0417
05228     A7 F0 03 F6 | 	mov	ptra, fp
0522c     B2 00 A0 FD | 	call	#popregs_
05230                 | _compile_immediate_assign_ret
05230     2D 00 64 FD | 	ret
05234                 | 
05234                 | ' 
05234                 | ' ' ------------------ compile the line that is calling a command 
05234                 | ' 
05234                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05234                 | _compile
05234     04 4A 05 F6 | 	mov	COUNT_, #4
05238     A8 00 A0 FD | 	call	#pushregs_
0523c     09 1F 0A F6 | 	mov	local01, arg01 wz
05240     0A 21 02 F6 | 	mov	local02, arg02
05244     0B 23 02 F6 | 	mov	local03, arg03
05248                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05248                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05248                 | '  
05248                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05248                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05248     0C 00 90 5D |  if_ne	jmp	#LR__0420
0524c     00 12 06 F6 | 	mov	arg01, #0
05250     D8 F0 BF FD | 	call	#_compile_immediate
05254     A0 00 90 FD | 	jmp	#LR__0427
05258                 | LR__0420
05258     3E 00 00 FF 
0525c     40 E4 05 F1 | 	add	objptr, ##31808
05260     F2 1E 62 FC | 	wrlong	local01, objptr
05264     04 E4 05 F1 | 	add	objptr, #4
05268     F2 20 62 FC | 	wrlong	local02, objptr
0526c     3E 00 00 FF 
05270     44 E4 85 F1 | 	sub	objptr, ##31812
05274     11 13 02 F6 | 	mov	arg01, local03
05278     01 12 06 F1 | 	add	arg01, #1
0527c     AC F0 BF FD | 	call	#_compile_immediate
05280     FD 24 0A F6 | 	mov	local04, result1 wz
05284                 | ' 
05284                 | ' ucompiledline(0)=alinemajor
05284                 | ' ucompiledline(1)=alineminor
05284                 | ' 
05284                 | ' 
05284                 | ' ' cont: 0: this is the first part of the line that will continue
05284                 | ' ' 1 - this is the continuation of the line
05284                 | ' ' 2 - this is the last continued line
05284                 | ' ' 3 - this is the ome and only part
05284                 | ' 
05284                 | ' 
05284                 | ' err=compile_immediate(cont+1) 
05284                 | ' if err=0 then
05284     6C 00 90 5D |  if_ne	jmp	#LR__0426
05288                 | '   if cont=3 orelse cont=2 then 
05288     03 22 0E F2 | 	cmp	local03, #3 wz
0528c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05290     60 00 90 5D |  if_ne	jmp	#LR__0425
05294                 | '     if alinemajor >lastline then 
05294     41 00 00 FF 
05298     4C E4 05 F1 | 	add	objptr, ##33356
0529c     F2 16 02 FB | 	rdlong	arg03, objptr
052a0     41 00 00 FF 
052a4     4C E4 85 F1 | 	sub	objptr, ##33356
052a8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
052ac     0C 00 90 ED |  if_be	jmp	#LR__0421
052b0     0F 13 02 F6 | 	mov	arg01, local01
052b4     94 EF BF FD | 	call	#_add_line_at_end
052b8     38 00 90 FD | 	jmp	#LR__0424
052bc                 | LR__0421
052bc     0F 13 02 F6 | 	mov	arg01, local01
052c0     14 E8 BF FD | 	call	#_deleteline
052c4                 | '       deleteline(alinemajor)  
052c4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
052c4     41 00 00 FF 
052c8     4C E4 05 F1 | 	add	objptr, ##33356
052cc     F2 16 02 FB | 	rdlong	arg03, objptr
052d0     41 00 00 FF 
052d4     4C E4 85 F1 | 	sub	objptr, ##33356
052d8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
052dc     0C 00 90 ED |  if_be	jmp	#LR__0422
052e0     0F 13 02 F6 | 	mov	arg01, local01
052e4     64 EF BF FD | 	call	#_add_line_at_end
052e8     08 00 90 FD | 	jmp	#LR__0423
052ec                 | LR__0422
052ec     0F 13 02 F6 | 	mov	arg01, local01
052f0     10 ED BF FD | 	call	#_insertline
052f4                 | LR__0423
052f4                 | LR__0424
052f4                 | LR__0425
052f4                 | LR__0426
052f4                 | ' return err
052f4     12 FB 01 F6 | 	mov	result1, local04
052f8                 | LR__0427
052f8     A7 F0 03 F6 | 	mov	ptra, fp
052fc     B2 00 A0 FD | 	call	#popregs_
05300                 | _compile_ret
05300     2D 00 64 FD | 	ret
05304                 | 
05304                 | ' 
05304                 | ' ' ------------------ compile the line that is assigning to a variable
05304                 | ' 
05304                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05304                 | _compile_assign
05304     03 4A 05 F6 | 	mov	COUNT_, #3
05308     A8 00 A0 FD | 	call	#pushregs_
0530c     09 1F 0A F6 | 	mov	local01, arg01 wz
05310     0A 21 02 F6 | 	mov	local02, arg02
05314     0B 23 02 F6 | 	mov	local03, arg03
05318                 | ' 
05318                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05318                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05318     0C 00 90 5D |  if_ne	jmp	#LR__0430
0531c     00 12 06 F6 | 	mov	arg01, #0
05320     28 FC BF FD | 	call	#_compile_immediate_assign
05324     94 00 90 FD | 	jmp	#LR__0436
05328                 | LR__0430
05328     3E 00 00 FF 
0532c     40 E4 05 F1 | 	add	objptr, ##31808
05330     F2 1E 62 FC | 	wrlong	local01, objptr
05334     04 E4 05 F1 | 	add	objptr, #4
05338     F2 20 62 FC | 	wrlong	local02, objptr
0533c     3E 00 00 FF 
05340     44 E4 85 F1 | 	sub	objptr, ##31812
05344     11 13 02 F6 | 	mov	arg01, local03
05348     01 12 06 F1 | 	add	arg01, #1
0534c     FC FB BF FD | 	call	#_compile_immediate_assign
05350                 | ' 
05350                 | ' ucompiledline(0)=alinemajor
05350                 | ' ucompiledline(1)=alineminor
05350                 | ' 
05350                 | ' compile_immediate_assign(cont+1) 
05350                 | ' 
05350                 | ' if cont=3 orelse cont=2 then 
05350     03 22 0E F2 | 	cmp	local03, #3 wz
05354     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05358     60 00 90 5D |  if_ne	jmp	#LR__0435
0535c                 | '   if alinemajor >lastline then 
0535c     41 00 00 FF 
05360     4C E4 05 F1 | 	add	objptr, ##33356
05364     F2 16 02 FB | 	rdlong	arg03, objptr
05368     41 00 00 FF 
0536c     4C E4 85 F1 | 	sub	objptr, ##33356
05370     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05374     0C 00 90 ED |  if_be	jmp	#LR__0431
05378     0F 13 02 F6 | 	mov	arg01, local01
0537c     CC EE BF FD | 	call	#_add_line_at_end
05380     38 00 90 FD | 	jmp	#LR__0434
05384                 | LR__0431
05384     0F 13 02 F6 | 	mov	arg01, local01
05388     4C E7 BF FD | 	call	#_deleteline
0538c                 | '     deleteline(alinemajor)  
0538c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0538c     41 00 00 FF 
05390     4C E4 05 F1 | 	add	objptr, ##33356
05394     F2 16 02 FB | 	rdlong	arg03, objptr
05398     41 00 00 FF 
0539c     4C E4 85 F1 | 	sub	objptr, ##33356
053a0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
053a4     0C 00 90 ED |  if_be	jmp	#LR__0432
053a8     0F 13 02 F6 | 	mov	arg01, local01
053ac     9C EE BF FD | 	call	#_add_line_at_end
053b0     08 00 90 FD | 	jmp	#LR__0433
053b4                 | LR__0432
053b4     0F 13 02 F6 | 	mov	arg01, local01
053b8     48 EC BF FD | 	call	#_insertline
053bc                 | LR__0433
053bc                 | LR__0434
053bc                 | LR__0435
053bc                 | LR__0436
053bc     A7 F0 03 F6 | 	mov	ptra, fp
053c0     B2 00 A0 FD | 	call	#popregs_
053c4                 | _compile_assign_ret
053c4     2D 00 64 FD | 	ret
053c8                 | 
053c8                 | ' 
053c8                 | ' sub compile_error(errno)
053c8                 | _compile_error
053c8     FF 04 06 F6 | 	mov	_var03, #255
053cc     01 07 02 F6 | 	mov	_var04, _var02
053d0     02 09 02 F6 | 	mov	_var05, _var03
053d4     41 00 00 FF 
053d8     40 E4 05 F1 | 	add	objptr, ##33344
053dc     F2 0A 02 FB | 	rdlong	_var06, objptr
053e0     05 0D 02 F6 | 	mov	_var07, _var06
053e4     01 0C 66 F0 | 	shl	_var07, #1
053e8     05 0D 02 F1 | 	add	_var07, _var06
053ec     02 0C 66 F0 | 	shl	_var07, #2
053f0     03 00 00 FF 
053f4     00 E4 85 F1 | 	sub	objptr, ##1536
053f8     F2 0C 02 F1 | 	add	_var07, objptr
053fc     06 13 62 FC | 	wrlong	arg01, _var07
05400     03 00 00 FF 
05404     00 E4 05 F1 | 	add	objptr, ##1536
05408     F2 0C 02 FB | 	rdlong	_var07, objptr
0540c     06 0B 02 F6 | 	mov	_var06, _var07
05410     01 0A 66 F0 | 	shl	_var06, #1
05414     06 0B 02 F1 | 	add	_var06, _var07
05418     02 0A 66 F0 | 	shl	_var06, #2
0541c     03 00 00 FF 
05420     00 E4 85 F1 | 	sub	objptr, ##1536
05424     F2 0A 02 F1 | 	add	_var06, objptr
05428     04 0A 06 F1 | 	add	_var06, #4
0542c     05 07 62 FC | 	wrlong	_var04, _var06
05430     03 00 00 FF 
05434     00 E4 05 F1 | 	add	objptr, ##1536
05438     F2 0C 02 FB | 	rdlong	_var07, objptr
0543c     06 0B 02 F6 | 	mov	_var06, _var07
05440     01 0A 66 F0 | 	shl	_var06, #1
05444     06 0B 02 F1 | 	add	_var06, _var07
05448     02 0A 66 F0 | 	shl	_var06, #2
0544c     03 00 00 FF 
05450     00 E4 85 F1 | 	sub	objptr, ##1536
05454     F2 0A 02 F1 | 	add	_var06, objptr
05458     08 0A 06 F1 | 	add	_var06, #8
0545c     05 09 62 FC | 	wrlong	_var05, _var06
05460     03 00 00 FF 
05464     00 E4 05 F1 | 	add	objptr, ##1536
05468     F2 12 02 FB | 	rdlong	arg01, objptr
0546c     01 12 06 F1 | 	add	arg01, #1
05470     F2 12 62 FC | 	wrlong	arg01, objptr
05474     41 00 00 FF 
05478     40 E4 85 F1 | 	sub	objptr, ##33344
0547c                 | _compile_error_ret
0547c     2D 00 64 FD | 	ret
05480                 | 
05480                 | ' 
05480                 | ' 
05480                 | ' sub compile_unknown() 
05480                 | _compile_unknown
05480     FF 04 06 F6 | 	mov	_var03, #255
05484     17 00 06 F6 | 	mov	_var01, #23
05488     01 07 02 F6 | 	mov	_var04, _var02
0548c     02 01 02 F6 | 	mov	_var01, _var03
05490     41 00 00 FF 
05494     40 E4 05 F1 | 	add	objptr, ##33344
05498     F2 08 02 FB | 	rdlong	_var05, objptr
0549c     04 0B 02 F6 | 	mov	_var06, _var05
054a0     01 0A 66 F0 | 	shl	_var06, #1
054a4     04 0B 02 F1 | 	add	_var06, _var05
054a8     02 0A 66 F0 | 	shl	_var06, #2
054ac     03 00 00 FF 
054b0     00 E4 85 F1 | 	sub	objptr, ##1536
054b4     F2 0A 02 F1 | 	add	_var06, objptr
054b8     05 2F 68 FC | 	wrlong	#23, _var06
054bc     03 00 00 FF 
054c0     00 E4 05 F1 | 	add	objptr, ##1536
054c4     F2 0A 02 FB | 	rdlong	_var06, objptr
054c8     05 09 02 F6 | 	mov	_var05, _var06
054cc     01 08 66 F0 | 	shl	_var05, #1
054d0     05 09 02 F1 | 	add	_var05, _var06
054d4     02 08 66 F0 | 	shl	_var05, #2
054d8     03 00 00 FF 
054dc     00 E4 85 F1 | 	sub	objptr, ##1536
054e0     F2 08 02 F1 | 	add	_var05, objptr
054e4     04 08 06 F1 | 	add	_var05, #4
054e8     04 07 62 FC | 	wrlong	_var04, _var05
054ec     03 00 00 FF 
054f0     00 E4 05 F1 | 	add	objptr, ##1536
054f4     F2 0A 02 FB | 	rdlong	_var06, objptr
054f8     05 09 02 F6 | 	mov	_var05, _var06
054fc     01 08 66 F0 | 	shl	_var05, #1
05500     05 09 02 F1 | 	add	_var05, _var06
05504     02 08 66 F0 | 	shl	_var05, #2
05508     03 00 00 FF 
0550c     00 E4 85 F1 | 	sub	objptr, ##1536
05510     F2 08 02 F1 | 	add	_var05, objptr
05514     08 08 06 F1 | 	add	_var05, #8
05518     04 01 62 FC | 	wrlong	_var01, _var05
0551c     03 00 00 FF 
05520     00 E4 05 F1 | 	add	objptr, ##1536
05524     F2 0A 02 FB | 	rdlong	_var06, objptr
05528     01 0A 06 F1 | 	add	_var06, #1
0552c     F2 0A 62 FC | 	wrlong	_var06, objptr
05530     41 00 00 FF 
05534     40 E4 85 F1 | 	sub	objptr, ##33344
05538                 | _compile_unknown_ret
05538     2D 00 64 FD | 	ret
0553c                 | 
0553c                 | ' 
0553c                 | ' function compile_converttoint() as integer
0553c                 | _compile_converttoint
0553c     06 4A 05 F6 | 	mov	COUNT_, #6
05540     A8 00 A0 FD | 	call	#pushregs_
05544     00 1E 06 F6 | 	mov	local01, #0
05548     50 25 B0 FD | 	call	#_expr
0554c     FD 24 0A F6 | 	mov	local04, result1 wz
05550                 | ' err=0
05550                 | ' t1.result.uresult=0
05550                 | ' err=expr()
05550                 | ' if err=0 then
05550     C0 00 90 5D |  if_ne	jmp	#LR__0440
05554     16 22 06 F6 | 	mov	local03, #22
05558     0F 27 02 F6 | 	mov	local05, local01
0555c     10 29 02 F6 | 	mov	local06, local02
05560     11 25 02 F6 | 	mov	local04, local03
05564     41 00 00 FF 
05568     40 E4 05 F1 | 	add	objptr, ##33344
0556c     F2 1E 02 FB | 	rdlong	local01, objptr
05570     0F FB 01 F6 | 	mov	result1, local01
05574     01 FA 65 F0 | 	shl	result1, #1
05578     0F FB 01 F1 | 	add	result1, local01
0557c     02 FA 65 F0 | 	shl	result1, #2
05580     03 00 00 FF 
05584     00 E4 85 F1 | 	sub	objptr, ##1536
05588     F2 FA 01 F1 | 	add	result1, objptr
0558c     FD 26 62 FC | 	wrlong	local05, result1
05590     03 00 00 FF 
05594     00 E4 05 F1 | 	add	objptr, ##1536
05598     F2 26 02 FB | 	rdlong	local05, objptr
0559c     13 1F 02 F6 | 	mov	local01, local05
055a0     01 1E 66 F0 | 	shl	local01, #1
055a4     13 1F 02 F1 | 	add	local01, local05
055a8     02 1E 66 F0 | 	shl	local01, #2
055ac     03 00 00 FF 
055b0     00 E4 85 F1 | 	sub	objptr, ##1536
055b4     F2 1E 02 F1 | 	add	local01, objptr
055b8     04 1E 06 F1 | 	add	local01, #4
055bc     0F 29 62 FC | 	wrlong	local06, local01
055c0     03 00 00 FF 
055c4     00 E4 05 F1 | 	add	objptr, ##1536
055c8     F2 28 02 FB | 	rdlong	local06, objptr
055cc     14 27 02 F6 | 	mov	local05, local06
055d0     01 26 66 F0 | 	shl	local05, #1
055d4     14 27 02 F1 | 	add	local05, local06
055d8     02 26 66 F0 | 	shl	local05, #2
055dc     03 00 00 FF 
055e0     00 E4 85 F1 | 	sub	objptr, ##1536
055e4     F2 26 02 F1 | 	add	local05, objptr
055e8     08 26 06 F1 | 	add	local05, #8
055ec     13 25 62 FC | 	wrlong	local04, local05
055f0     03 00 00 FF 
055f4     00 E4 05 F1 | 	add	objptr, ##1536
055f8     F2 26 02 FB | 	rdlong	local05, objptr
055fc     01 26 06 F1 | 	add	local05, #1
05600     F2 26 62 FC | 	wrlong	local05, objptr
05604     41 00 00 FF 
05608     40 E4 85 F1 | 	sub	objptr, ##33344
0560c                 | '   t1.result_type=fun_converttoint
0560c                 | '   compiledline(lineptr)=t1: lineptr+=1 
0560c                 | '   return 0
0560c     00 FA 05 F6 | 	mov	result1, #0
05610     04 00 90 FD | 	jmp	#LR__0441
05614                 | LR__0440
05614                 | '   return err
05614     12 FB 01 F6 | 	mov	result1, local04
05618                 | LR__0441
05618     A7 F0 03 F6 | 	mov	ptra, fp
0561c     B2 00 A0 FD | 	call	#popregs_
05620                 | _compile_converttoint_ret
05620     2D 00 64 FD | 	ret
05624                 | 
05624                 | ' 
05624                 | ' 
05624                 | ' function compile_fun_2p() as ulong
05624                 | _compile_fun_2p
05624     01 4A 05 F6 | 	mov	COUNT_, #1
05628     A8 00 A0 FD | 	call	#pushregs_
0562c     6C 24 B0 FD | 	call	#_expr
05630                 | ' 
05630                 | ' expr()
05630                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05630     2E 00 00 FF 
05634     08 E4 05 F1 | 	add	objptr, ##23560
05638     F2 1E 02 FB | 	rdlong	local01, objptr
0563c     03 1E 66 F0 | 	shl	local01, #3
05640     02 00 00 FF 
05644     38 E4 85 F1 | 	sub	objptr, ##1080
05648     F2 1E 02 F1 | 	add	local01, objptr
0564c     04 1E 06 F1 | 	add	local01, #4
05650     0F 1F 02 FB | 	rdlong	local01, local01
05654     11 1E 0E F2 | 	cmp	local01, #17 wz
05658     2B 00 00 FF 
0565c     D0 E5 85 F1 | 	sub	objptr, ##22480
05660     15 FA 05 56 |  if_ne	mov	result1, #21
05664     24 00 90 5D |  if_ne	jmp	#LR__0450
05668     2E 00 00 FF 
0566c     08 E4 05 F1 | 	add	objptr, ##23560
05670     F2 1E 02 FB | 	rdlong	local01, objptr
05674     01 1E 06 F1 | 	add	local01, #1
05678     F2 1E 62 FC | 	wrlong	local01, objptr
0567c     2E 00 00 FF 
05680     08 E4 85 F1 | 	sub	objptr, ##23560
05684     14 24 B0 FD | 	call	#_expr
05688     00 FA 05 F6 | 	mov	result1, #0
0568c                 | LR__0450
0568c     A7 F0 03 F6 | 	mov	ptra, fp
05690     B2 00 A0 FD | 	call	#popregs_
05694                 | _compile_fun_2p_ret
05694     2D 00 64 FD | 	ret
05698                 | 
05698                 | ' 
05698                 | ' function compile_fun_3p() as ulong
05698                 | _compile_fun_3p
05698     01 4A 05 F6 | 	mov	COUNT_, #1
0569c     A8 00 A0 FD | 	call	#pushregs_
056a0     F8 23 B0 FD | 	call	#_expr
056a4                 | ' 
056a4                 | ' expr()
056a4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
056a4     2E 00 00 FF 
056a8     08 E4 05 F1 | 	add	objptr, ##23560
056ac     F2 1E 02 FB | 	rdlong	local01, objptr
056b0     03 1E 66 F0 | 	shl	local01, #3
056b4     02 00 00 FF 
056b8     38 E4 85 F1 | 	sub	objptr, ##1080
056bc     F2 1E 02 F1 | 	add	local01, objptr
056c0     04 1E 06 F1 | 	add	local01, #4
056c4     0F 1F 02 FB | 	rdlong	local01, local01
056c8     11 1E 0E F2 | 	cmp	local01, #17 wz
056cc     2B 00 00 FF 
056d0     D0 E5 85 F1 | 	sub	objptr, ##22480
056d4     15 FA 05 56 |  if_ne	mov	result1, #21
056d8     7C 00 90 5D |  if_ne	jmp	#LR__0460
056dc     2E 00 00 FF 
056e0     08 E4 05 F1 | 	add	objptr, ##23560
056e4     F2 1E 02 FB | 	rdlong	local01, objptr
056e8     01 1E 06 F1 | 	add	local01, #1
056ec     F2 1E 62 FC | 	wrlong	local01, objptr
056f0     2E 00 00 FF 
056f4     08 E4 85 F1 | 	sub	objptr, ##23560
056f8     A0 23 B0 FD | 	call	#_expr
056fc                 | ' expr()
056fc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
056fc     2E 00 00 FF 
05700     08 E4 05 F1 | 	add	objptr, ##23560
05704     F2 1E 02 FB | 	rdlong	local01, objptr
05708     03 1E 66 F0 | 	shl	local01, #3
0570c     02 00 00 FF 
05710     38 E4 85 F1 | 	sub	objptr, ##1080
05714     F2 1E 02 F1 | 	add	local01, objptr
05718     04 1E 06 F1 | 	add	local01, #4
0571c     0F 1F 02 FB | 	rdlong	local01, local01
05720     11 1E 0E F2 | 	cmp	local01, #17 wz
05724     2B 00 00 FF 
05728     D0 E5 85 F1 | 	sub	objptr, ##22480
0572c     15 FA 05 56 |  if_ne	mov	result1, #21
05730     24 00 90 5D |  if_ne	jmp	#LR__0460
05734     2E 00 00 FF 
05738     08 E4 05 F1 | 	add	objptr, ##23560
0573c     F2 1E 02 FB | 	rdlong	local01, objptr
05740     01 1E 06 F1 | 	add	local01, #1
05744     F2 1E 62 FC | 	wrlong	local01, objptr
05748     2E 00 00 FF 
0574c     08 E4 85 F1 | 	sub	objptr, ##23560
05750     48 23 B0 FD | 	call	#_expr
05754     00 FA 05 F6 | 	mov	result1, #0
05758                 | LR__0460
05758     A7 F0 03 F6 | 	mov	ptra, fp
0575c     B2 00 A0 FD | 	call	#popregs_
05760                 | _compile_fun_3p_ret
05760     2D 00 64 FD | 	ret
05764                 | 
05764                 | ' 
05764                 | ' function compile_fun_4p() as ulong
05764                 | _compile_fun_4p
05764     01 4A 05 F6 | 	mov	COUNT_, #1
05768     A8 00 A0 FD | 	call	#pushregs_
0576c     2C 23 B0 FD | 	call	#_expr
05770                 | ' 
05770                 | ' expr()
05770                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05770     2E 00 00 FF 
05774     08 E4 05 F1 | 	add	objptr, ##23560
05778     F2 1E 02 FB | 	rdlong	local01, objptr
0577c     03 1E 66 F0 | 	shl	local01, #3
05780     02 00 00 FF 
05784     38 E4 85 F1 | 	sub	objptr, ##1080
05788     F2 1E 02 F1 | 	add	local01, objptr
0578c     04 1E 06 F1 | 	add	local01, #4
05790     0F 1F 02 FB | 	rdlong	local01, local01
05794     11 1E 0E F2 | 	cmp	local01, #17 wz
05798     2B 00 00 FF 
0579c     D0 E5 85 F1 | 	sub	objptr, ##22480
057a0     15 FA 05 56 |  if_ne	mov	result1, #21
057a4     D4 00 90 5D |  if_ne	jmp	#LR__0470
057a8     2E 00 00 FF 
057ac     08 E4 05 F1 | 	add	objptr, ##23560
057b0     F2 1E 02 FB | 	rdlong	local01, objptr
057b4     01 1E 06 F1 | 	add	local01, #1
057b8     F2 1E 62 FC | 	wrlong	local01, objptr
057bc     2E 00 00 FF 
057c0     08 E4 85 F1 | 	sub	objptr, ##23560
057c4     D4 22 B0 FD | 	call	#_expr
057c8                 | ' expr()
057c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
057c8     2E 00 00 FF 
057cc     08 E4 05 F1 | 	add	objptr, ##23560
057d0     F2 1E 02 FB | 	rdlong	local01, objptr
057d4     03 1E 66 F0 | 	shl	local01, #3
057d8     02 00 00 FF 
057dc     38 E4 85 F1 | 	sub	objptr, ##1080
057e0     F2 1E 02 F1 | 	add	local01, objptr
057e4     04 1E 06 F1 | 	add	local01, #4
057e8     0F 1F 02 FB | 	rdlong	local01, local01
057ec     11 1E 0E F2 | 	cmp	local01, #17 wz
057f0     2B 00 00 FF 
057f4     D0 E5 85 F1 | 	sub	objptr, ##22480
057f8     15 FA 05 56 |  if_ne	mov	result1, #21
057fc     7C 00 90 5D |  if_ne	jmp	#LR__0470
05800     2E 00 00 FF 
05804     08 E4 05 F1 | 	add	objptr, ##23560
05808     F2 1E 02 FB | 	rdlong	local01, objptr
0580c     01 1E 06 F1 | 	add	local01, #1
05810     F2 1E 62 FC | 	wrlong	local01, objptr
05814     2E 00 00 FF 
05818     08 E4 85 F1 | 	sub	objptr, ##23560
0581c     7C 22 B0 FD | 	call	#_expr
05820                 | ' expr()
05820                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05820     2E 00 00 FF 
05824     08 E4 05 F1 | 	add	objptr, ##23560
05828     F2 1E 02 FB | 	rdlong	local01, objptr
0582c     03 1E 66 F0 | 	shl	local01, #3
05830     02 00 00 FF 
05834     38 E4 85 F1 | 	sub	objptr, ##1080
05838     F2 1E 02 F1 | 	add	local01, objptr
0583c     04 1E 06 F1 | 	add	local01, #4
05840     0F 1F 02 FB | 	rdlong	local01, local01
05844     11 1E 0E F2 | 	cmp	local01, #17 wz
05848     2B 00 00 FF 
0584c     D0 E5 85 F1 | 	sub	objptr, ##22480
05850     15 FA 05 56 |  if_ne	mov	result1, #21
05854     24 00 90 5D |  if_ne	jmp	#LR__0470
05858     2E 00 00 FF 
0585c     08 E4 05 F1 | 	add	objptr, ##23560
05860     F2 1E 02 FB | 	rdlong	local01, objptr
05864     01 1E 06 F1 | 	add	local01, #1
05868     F2 1E 62 FC | 	wrlong	local01, objptr
0586c     2E 00 00 FF 
05870     08 E4 85 F1 | 	sub	objptr, ##23560
05874     24 22 B0 FD | 	call	#_expr
05878     00 FA 05 F6 | 	mov	result1, #0
0587c                 | LR__0470
0587c     A7 F0 03 F6 | 	mov	ptra, fp
05880     B2 00 A0 FD | 	call	#popregs_
05884                 | _compile_fun_4p_ret
05884     2D 00 64 FD | 	ret
05888                 | 
05888                 | ' 
05888                 | ' 
05888                 | ' function compile_fun_5p() as ulong
05888                 | _compile_fun_5p
05888     01 4A 05 F6 | 	mov	COUNT_, #1
0588c     A8 00 A0 FD | 	call	#pushregs_
05890     08 22 B0 FD | 	call	#_expr
05894                 | ' 
05894                 | ' expr()
05894                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05894     2E 00 00 FF 
05898     08 E4 05 F1 | 	add	objptr, ##23560
0589c     F2 1E 02 FB | 	rdlong	local01, objptr
058a0     03 1E 66 F0 | 	shl	local01, #3
058a4     02 00 00 FF 
058a8     38 E4 85 F1 | 	sub	objptr, ##1080
058ac     F2 1E 02 F1 | 	add	local01, objptr
058b0     04 1E 06 F1 | 	add	local01, #4
058b4     0F 1F 02 FB | 	rdlong	local01, local01
058b8     11 1E 0E F2 | 	cmp	local01, #17 wz
058bc     2B 00 00 FF 
058c0     D0 E5 85 F1 | 	sub	objptr, ##22480
058c4     15 FA 05 56 |  if_ne	mov	result1, #21
058c8     2C 01 90 5D |  if_ne	jmp	#LR__0480
058cc     2E 00 00 FF 
058d0     08 E4 05 F1 | 	add	objptr, ##23560
058d4     F2 1E 02 FB | 	rdlong	local01, objptr
058d8     01 1E 06 F1 | 	add	local01, #1
058dc     F2 1E 62 FC | 	wrlong	local01, objptr
058e0     2E 00 00 FF 
058e4     08 E4 85 F1 | 	sub	objptr, ##23560
058e8     B0 21 B0 FD | 	call	#_expr
058ec                 | ' expr()
058ec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
058ec     2E 00 00 FF 
058f0     08 E4 05 F1 | 	add	objptr, ##23560
058f4     F2 1E 02 FB | 	rdlong	local01, objptr
058f8     03 1E 66 F0 | 	shl	local01, #3
058fc     02 00 00 FF 
05900     38 E4 85 F1 | 	sub	objptr, ##1080
05904     F2 1E 02 F1 | 	add	local01, objptr
05908     04 1E 06 F1 | 	add	local01, #4
0590c     0F 1F 02 FB | 	rdlong	local01, local01
05910     11 1E 0E F2 | 	cmp	local01, #17 wz
05914     2B 00 00 FF 
05918     D0 E5 85 F1 | 	sub	objptr, ##22480
0591c     15 FA 05 56 |  if_ne	mov	result1, #21
05920     D4 00 90 5D |  if_ne	jmp	#LR__0480
05924     2E 00 00 FF 
05928     08 E4 05 F1 | 	add	objptr, ##23560
0592c     F2 1E 02 FB | 	rdlong	local01, objptr
05930     01 1E 06 F1 | 	add	local01, #1
05934     F2 1E 62 FC | 	wrlong	local01, objptr
05938     2E 00 00 FF 
0593c     08 E4 85 F1 | 	sub	objptr, ##23560
05940     58 21 B0 FD | 	call	#_expr
05944                 | ' expr()
05944                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05944     2E 00 00 FF 
05948     08 E4 05 F1 | 	add	objptr, ##23560
0594c     F2 1E 02 FB | 	rdlong	local01, objptr
05950     03 1E 66 F0 | 	shl	local01, #3
05954     02 00 00 FF 
05958     38 E4 85 F1 | 	sub	objptr, ##1080
0595c     F2 1E 02 F1 | 	add	local01, objptr
05960     04 1E 06 F1 | 	add	local01, #4
05964     0F 1F 02 FB | 	rdlong	local01, local01
05968     11 1E 0E F2 | 	cmp	local01, #17 wz
0596c     2B 00 00 FF 
05970     D0 E5 85 F1 | 	sub	objptr, ##22480
05974     15 FA 05 56 |  if_ne	mov	result1, #21
05978     7C 00 90 5D |  if_ne	jmp	#LR__0480
0597c     2E 00 00 FF 
05980     08 E4 05 F1 | 	add	objptr, ##23560
05984     F2 1E 02 FB | 	rdlong	local01, objptr
05988     01 1E 06 F1 | 	add	local01, #1
0598c     F2 1E 62 FC | 	wrlong	local01, objptr
05990     2E 00 00 FF 
05994     08 E4 85 F1 | 	sub	objptr, ##23560
05998     00 21 B0 FD | 	call	#_expr
0599c                 | ' expr()
0599c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0599c     2E 00 00 FF 
059a0     08 E4 05 F1 | 	add	objptr, ##23560
059a4     F2 1E 02 FB | 	rdlong	local01, objptr
059a8     03 1E 66 F0 | 	shl	local01, #3
059ac     02 00 00 FF 
059b0     38 E4 85 F1 | 	sub	objptr, ##1080
059b4     F2 1E 02 F1 | 	add	local01, objptr
059b8     04 1E 06 F1 | 	add	local01, #4
059bc     0F 1F 02 FB | 	rdlong	local01, local01
059c0     11 1E 0E F2 | 	cmp	local01, #17 wz
059c4     2B 00 00 FF 
059c8     D0 E5 85 F1 | 	sub	objptr, ##22480
059cc     15 FA 05 56 |  if_ne	mov	result1, #21
059d0     24 00 90 5D |  if_ne	jmp	#LR__0480
059d4     2E 00 00 FF 
059d8     08 E4 05 F1 | 	add	objptr, ##23560
059dc     F2 1E 02 FB | 	rdlong	local01, objptr
059e0     01 1E 06 F1 | 	add	local01, #1
059e4     F2 1E 62 FC | 	wrlong	local01, objptr
059e8     2E 00 00 FF 
059ec     08 E4 85 F1 | 	sub	objptr, ##23560
059f0     A8 20 B0 FD | 	call	#_expr
059f4     00 FA 05 F6 | 	mov	result1, #0
059f8                 | LR__0480
059f8     A7 F0 03 F6 | 	mov	ptra, fp
059fc     B2 00 A0 FD | 	call	#popregs_
05a00                 | _compile_fun_5p_ret
05a00     2D 00 64 FD | 	ret
05a04                 | 
05a04                 | ' 
05a04                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
05a04                 | _compile_fun_varp
05a04     02 4A 05 F6 | 	mov	COUNT_, #2
05a08     A8 00 A0 FD | 	call	#pushregs_
05a0c     00 1E 06 F6 | 	mov	local01, #0
05a10                 | ' i=0
05a10                 | ' if lparts(ct).token<>token_end then
05a10     2E 00 00 FF 
05a14     08 E4 05 F1 | 	add	objptr, ##23560
05a18     F2 20 02 FB | 	rdlong	local02, objptr
05a1c     03 20 66 F0 | 	shl	local02, #3
05a20     02 00 00 FF 
05a24     38 E4 85 F1 | 	sub	objptr, ##1080
05a28     F2 20 02 F1 | 	add	local02, objptr
05a2c     04 20 06 F1 | 	add	local02, #4
05a30     10 21 02 FB | 	rdlong	local02, local02
05a34     FE 21 0E F2 | 	cmp	local02, #510 wz
05a38     2B 00 00 FF 
05a3c     D0 E5 85 F1 | 	sub	objptr, ##22480
05a40     5C 00 90 AD |  if_e	jmp	#LR__0492
05a44                 | '   do
05a44                 | LR__0490
05a44     54 20 B0 FD | 	call	#_expr
05a48     01 1E 06 F1 | 	add	local01, #1
05a4c                 | '   expr()
05a4c                 | '    i+=1
05a4c                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
05a4c     2E 00 00 FF 
05a50     08 E4 05 F1 | 	add	objptr, ##23560
05a54     F2 20 02 FB | 	rdlong	local02, objptr
05a58     03 20 66 F0 | 	shl	local02, #3
05a5c     02 00 00 FF 
05a60     38 E4 85 F1 | 	sub	objptr, ##1080
05a64     F2 20 02 F1 | 	add	local02, objptr
05a68     04 20 06 F1 | 	add	local02, #4
05a6c     10 21 02 FB | 	rdlong	local02, local02
05a70     11 20 0E F2 | 	cmp	local02, #17 wz
05a74     2B 00 00 FF 
05a78     D0 E5 85 F1 | 	sub	objptr, ##22480
05a7c     20 00 90 5D |  if_ne	jmp	#LR__0491
05a80     2E 00 00 FF 
05a84     08 E4 05 F1 | 	add	objptr, ##23560
05a88     F2 20 02 FB | 	rdlong	local02, objptr
05a8c     01 20 06 F1 | 	add	local02, #1
05a90     F2 20 62 FC | 	wrlong	local02, objptr
05a94     2E 00 00 FF 
05a98     08 E4 85 F1 | 	sub	objptr, ##23560
05a9c     A4 FF 9F FD | 	jmp	#LR__0490
05aa0                 | LR__0491
05aa0                 | LR__0492
05aa0                 | ' return i
05aa0     0F FB 01 F6 | 	mov	result1, local01
05aa4     A7 F0 03 F6 | 	mov	ptra, fp
05aa8     B2 00 A0 FD | 	call	#popregs_
05aac                 | _compile_fun_varp_ret
05aac     2D 00 64 FD | 	ret
05ab0                 | 
05ab0                 | ' 
05ab0                 | ' 
05ab0                 | ' function compile_int_fun_2p() as ulong
05ab0                 | _compile_int_fun_2p
05ab0     01 4A 05 F6 | 	mov	COUNT_, #1
05ab4     A8 00 A0 FD | 	call	#pushregs_
05ab8     80 FA BF FD | 	call	#_compile_converttoint
05abc     FD 1E 02 F6 | 	mov	local01, result1
05ac0                 | ' err=compile_converttoint() : if err>0 then return err
05ac0     01 1E 56 F2 | 	cmps	local01, #1 wc
05ac4     0F FB 01 36 |  if_ae	mov	result1, local01
05ac8     58 00 90 3D |  if_ae	jmp	#LR__0500
05acc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05acc     2E 00 00 FF 
05ad0     08 E4 05 F1 | 	add	objptr, ##23560
05ad4     F2 1E 02 FB | 	rdlong	local01, objptr
05ad8     03 1E 66 F0 | 	shl	local01, #3
05adc     02 00 00 FF 
05ae0     38 E4 85 F1 | 	sub	objptr, ##1080
05ae4     F2 1E 02 F1 | 	add	local01, objptr
05ae8     04 1E 06 F1 | 	add	local01, #4
05aec     0F 1F 02 FB | 	rdlong	local01, local01
05af0     11 1E 0E F2 | 	cmp	local01, #17 wz
05af4     2B 00 00 FF 
05af8     D0 E5 85 F1 | 	sub	objptr, ##22480
05afc     15 FA 05 56 |  if_ne	mov	result1, #21
05b00     20 00 90 5D |  if_ne	jmp	#LR__0500
05b04     2E 00 00 FF 
05b08     08 E4 05 F1 | 	add	objptr, ##23560
05b0c     F2 1E 02 FB | 	rdlong	local01, objptr
05b10     01 1E 06 F1 | 	add	local01, #1
05b14     F2 1E 62 FC | 	wrlong	local01, objptr
05b18     2E 00 00 FF 
05b1c     08 E4 85 F1 | 	sub	objptr, ##23560
05b20     18 FA BF FD | 	call	#_compile_converttoint
05b24                 | ' err=compile_converttoint() 
05b24                 | ' return err
05b24                 | LR__0500
05b24     A7 F0 03 F6 | 	mov	ptra, fp
05b28     B2 00 A0 FD | 	call	#popregs_
05b2c                 | _compile_int_fun_2p_ret
05b2c     2D 00 64 FD | 	ret
05b30                 | 
05b30                 | ' 
05b30                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
05b30                 | _compile_print
05b30     0B 4A 05 F6 | 	mov	COUNT_, #11
05b34     A8 00 A0 FD | 	call	#pushregs_
05b38     00 1E 06 F6 | 	mov	local01, #0
05b3c     1D 22 06 F6 | 	mov	local03, #29
05b40                 | ' t1.result.uresult=0 : t1.result_type=result_uint
05b40                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
05b40     2E 00 00 FF 
05b44     08 E4 05 F1 | 	add	objptr, ##23560
05b48     F2 24 02 FB | 	rdlong	local04, objptr
05b4c     03 24 66 F0 | 	shl	local04, #3
05b50     02 00 00 FF 
05b54     38 E4 85 F1 | 	sub	objptr, ##1080
05b58     F2 24 02 F1 | 	add	local04, objptr
05b5c     04 24 06 F1 | 	add	local04, #4
05b60     12 25 02 FB | 	rdlong	local04, local04
05b64     FE 25 0E F2 | 	cmp	local04, #510 wz
05b68     2B 00 00 FF 
05b6c     D0 E5 85 F1 | 	sub	objptr, ##22480
05b70     68 01 90 5D |  if_ne	jmp	#LR__0510
05b74     20 22 06 F6 | 	mov	local03, #32
05b78     0F 27 02 F6 | 	mov	local05, local01
05b7c     10 29 02 F6 | 	mov	local06, local02
05b80     11 2B 02 F6 | 	mov	local07, local03
05b84     41 00 00 FF 
05b88     40 E4 05 F1 | 	add	objptr, ##33344
05b8c     F2 2C 02 FB | 	rdlong	local08, objptr
05b90     16 2F 02 F6 | 	mov	local09, local08
05b94     01 2E 66 F0 | 	shl	local09, #1
05b98     16 2F 02 F1 | 	add	local09, local08
05b9c     02 2E 66 F0 | 	shl	local09, #2
05ba0     03 00 00 FF 
05ba4     00 E4 85 F1 | 	sub	objptr, ##1536
05ba8     F2 2E 02 F1 | 	add	local09, objptr
05bac     17 27 62 FC | 	wrlong	local05, local09
05bb0     03 00 00 FF 
05bb4     00 E4 05 F1 | 	add	objptr, ##1536
05bb8     F2 26 02 FB | 	rdlong	local05, objptr
05bbc     13 31 02 F6 | 	mov	local10, local05
05bc0     01 30 66 F0 | 	shl	local10, #1
05bc4     13 31 02 F1 | 	add	local10, local05
05bc8     02 30 66 F0 | 	shl	local10, #2
05bcc     03 00 00 FF 
05bd0     00 E4 85 F1 | 	sub	objptr, ##1536
05bd4     F2 30 02 F1 | 	add	local10, objptr
05bd8     04 30 06 F1 | 	add	local10, #4
05bdc     18 29 62 FC | 	wrlong	local06, local10
05be0     03 00 00 FF 
05be4     00 E4 05 F1 | 	add	objptr, ##1536
05be8     F2 26 02 FB | 	rdlong	local05, objptr
05bec     13 33 02 F6 | 	mov	local11, local05
05bf0     01 32 66 F0 | 	shl	local11, #1
05bf4     13 33 02 F1 | 	add	local11, local05
05bf8     02 32 66 F0 | 	shl	local11, #2
05bfc     03 00 00 FF 
05c00     00 E4 85 F1 | 	sub	objptr, ##1536
05c04     F2 32 02 F1 | 	add	local11, objptr
05c08     08 32 06 F1 | 	add	local11, #8
05c0c     19 2B 62 FC | 	wrlong	local07, local11
05c10     03 00 00 FF 
05c14     00 E4 05 F1 | 	add	objptr, ##1536
05c18     F2 26 02 FB | 	rdlong	local05, objptr
05c1c     01 26 06 F1 | 	add	local05, #1
05c20     F2 26 62 FC | 	wrlong	local05, objptr
05c24     44 22 06 F6 | 	mov	local03, #68
05c28     0F 27 02 F6 | 	mov	local05, local01
05c2c     10 29 02 F6 | 	mov	local06, local02
05c30     11 2B 02 F6 | 	mov	local07, local03
05c34     F2 2C 02 FB | 	rdlong	local08, objptr
05c38     16 2F 02 F6 | 	mov	local09, local08
05c3c     01 2E 66 F0 | 	shl	local09, #1
05c40     16 2F 02 F1 | 	add	local09, local08
05c44     02 2E 66 F0 | 	shl	local09, #2
05c48     03 00 00 FF 
05c4c     00 E4 85 F1 | 	sub	objptr, ##1536
05c50     F2 2E 02 F1 | 	add	local09, objptr
05c54     17 27 62 FC | 	wrlong	local05, local09
05c58     03 00 00 FF 
05c5c     00 E4 05 F1 | 	add	objptr, ##1536
05c60     F2 32 02 FB | 	rdlong	local11, objptr
05c64     19 31 02 F6 | 	mov	local10, local11
05c68     01 30 66 F0 | 	shl	local10, #1
05c6c     19 31 02 F1 | 	add	local10, local11
05c70     02 30 66 F0 | 	shl	local10, #2
05c74     03 00 00 FF 
05c78     00 E4 85 F1 | 	sub	objptr, ##1536
05c7c     F2 30 02 F1 | 	add	local10, objptr
05c80     04 30 06 F1 | 	add	local10, #4
05c84     18 29 62 FC | 	wrlong	local06, local10
05c88     03 00 00 FF 
05c8c     00 E4 05 F1 | 	add	objptr, ##1536
05c90     F2 30 02 FB | 	rdlong	local10, objptr
05c94     18 33 02 F6 | 	mov	local11, local10
05c98     01 32 66 F0 | 	shl	local11, #1
05c9c     18 33 02 F1 | 	add	local11, local10
05ca0     02 32 66 F0 | 	shl	local11, #2
05ca4     03 00 00 FF 
05ca8     00 E4 85 F1 | 	sub	objptr, ##1536
05cac     F2 32 02 F1 | 	add	local11, objptr
05cb0     08 32 06 F1 | 	add	local11, #8
05cb4     19 2B 62 FC | 	wrlong	local07, local11
05cb8     03 00 00 FF 
05cbc     00 E4 05 F1 | 	add	objptr, ##1536
05cc0     F2 26 02 FB | 	rdlong	local05, objptr
05cc4     01 26 06 F1 | 	add	local05, #1
05cc8     F2 26 62 FC | 	wrlong	local05, objptr
05ccc     41 00 00 FF 
05cd0     40 E4 85 F1 | 	sub	objptr, ##33344
05cd4     00 FA 05 F6 | 	mov	result1, #0
05cd8     20 05 90 FD | 	jmp	#LR__0517
05cdc                 | LR__0510
05cdc                 | ' do
05cdc                 | LR__0511
05cdc     BC 1D B0 FD | 	call	#_expr
05ce0                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
05ce0                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05ce0     2E 00 00 FF 
05ce4     08 E4 05 F1 | 	add	objptr, ##23560
05ce8     F2 24 02 FB | 	rdlong	local04, objptr
05cec     03 24 66 F0 | 	shl	local04, #3
05cf0     02 00 00 FF 
05cf4     38 E4 85 F1 | 	sub	objptr, ##1080
05cf8     F2 24 02 F1 | 	add	local04, objptr
05cfc     04 24 06 F1 | 	add	local04, #4
05d00     12 2D 02 FB | 	rdlong	local08, local04
05d04     11 2C 0E F2 | 	cmp	local08, #17 wz
05d08     2B 00 00 FF 
05d0c     D0 E5 85 F1 | 	sub	objptr, ##22480
05d10     60 01 90 5D |  if_ne	jmp	#LR__0512
05d14     21 22 06 F6 | 	mov	local03, #33
05d18     0F 27 02 F6 | 	mov	local05, local01
05d1c     10 29 02 F6 | 	mov	local06, local02
05d20     11 2B 02 F6 | 	mov	local07, local03
05d24     41 00 00 FF 
05d28     40 E4 05 F1 | 	add	objptr, ##33344
05d2c     F2 2C 02 FB | 	rdlong	local08, objptr
05d30     16 2F 02 F6 | 	mov	local09, local08
05d34     01 2E 66 F0 | 	shl	local09, #1
05d38     16 2F 02 F1 | 	add	local09, local08
05d3c     02 2E 66 F0 | 	shl	local09, #2
05d40     03 00 00 FF 
05d44     00 E4 85 F1 | 	sub	objptr, ##1536
05d48     F2 2E 02 F1 | 	add	local09, objptr
05d4c     17 27 62 FC | 	wrlong	local05, local09
05d50     03 00 00 FF 
05d54     00 E4 05 F1 | 	add	objptr, ##1536
05d58     F2 32 02 FB | 	rdlong	local11, objptr
05d5c     19 31 02 F6 | 	mov	local10, local11
05d60     01 30 66 F0 | 	shl	local10, #1
05d64     19 31 02 F1 | 	add	local10, local11
05d68     02 30 66 F0 | 	shl	local10, #2
05d6c     03 00 00 FF 
05d70     00 E4 85 F1 | 	sub	objptr, ##1536
05d74     F2 30 02 F1 | 	add	local10, objptr
05d78     04 30 06 F1 | 	add	local10, #4
05d7c     18 29 62 FC | 	wrlong	local06, local10
05d80     03 00 00 FF 
05d84     00 E4 05 F1 | 	add	objptr, ##1536
05d88     F2 26 02 FB | 	rdlong	local05, objptr
05d8c     13 33 02 F6 | 	mov	local11, local05
05d90     01 32 66 F0 | 	shl	local11, #1
05d94     13 33 02 F1 | 	add	local11, local05
05d98     02 32 66 F0 | 	shl	local11, #2
05d9c     03 00 00 FF 
05da0     00 E4 85 F1 | 	sub	objptr, ##1536
05da4     F2 32 02 F1 | 	add	local11, objptr
05da8     08 32 06 F1 | 	add	local11, #8
05dac     19 2B 62 FC | 	wrlong	local07, local11
05db0     03 00 00 FF 
05db4     00 E4 05 F1 | 	add	objptr, ##1536
05db8     F2 26 02 FB | 	rdlong	local05, objptr
05dbc     01 26 06 F1 | 	add	local05, #1
05dc0     F2 26 62 FC | 	wrlong	local05, objptr
05dc4     44 22 06 F6 | 	mov	local03, #68
05dc8     0F 27 02 F6 | 	mov	local05, local01
05dcc     10 29 02 F6 | 	mov	local06, local02
05dd0     11 2B 02 F6 | 	mov	local07, local03
05dd4     F2 2C 02 FB | 	rdlong	local08, objptr
05dd8     16 2F 02 F6 | 	mov	local09, local08
05ddc     01 2E 66 F0 | 	shl	local09, #1
05de0     16 2F 02 F1 | 	add	local09, local08
05de4     02 2E 66 F0 | 	shl	local09, #2
05de8     03 00 00 FF 
05dec     00 E4 85 F1 | 	sub	objptr, ##1536
05df0     F2 2E 02 F1 | 	add	local09, objptr
05df4     17 27 62 FC | 	wrlong	local05, local09
05df8     03 00 00 FF 
05dfc     00 E4 05 F1 | 	add	objptr, ##1536
05e00     F2 32 02 FB | 	rdlong	local11, objptr
05e04     19 31 02 F6 | 	mov	local10, local11
05e08     01 30 66 F0 | 	shl	local10, #1
05e0c     19 31 02 F1 | 	add	local10, local11
05e10     02 30 66 F0 | 	shl	local10, #2
05e14     03 00 00 FF 
05e18     00 E4 85 F1 | 	sub	objptr, ##1536
05e1c     F2 30 02 F1 | 	add	local10, objptr
05e20     04 30 06 F1 | 	add	local10, #4
05e24     18 29 62 FC | 	wrlong	local06, local10
05e28     03 00 00 FF 
05e2c     00 E4 05 F1 | 	add	objptr, ##1536
05e30     F2 30 02 FB | 	rdlong	local10, objptr
05e34     18 33 02 F6 | 	mov	local11, local10
05e38     01 32 66 F0 | 	shl	local11, #1
05e3c     18 33 02 F1 | 	add	local11, local10
05e40     02 32 66 F0 | 	shl	local11, #2
05e44     03 00 00 FF 
05e48     00 E4 85 F1 | 	sub	objptr, ##1536
05e4c     F2 32 02 F1 | 	add	local11, objptr
05e50     08 32 06 F1 | 	add	local11, #8
05e54     19 2B 62 FC | 	wrlong	local07, local11
05e58     03 00 00 FF 
05e5c     00 E4 05 F1 | 	add	objptr, ##1536
05e60     F2 26 02 FB | 	rdlong	local05, objptr
05e64     01 26 06 F1 | 	add	local05, #1
05e68     F2 26 62 FC | 	wrlong	local05, objptr
05e6c     41 00 00 FF 
05e70     40 E4 85 F1 | 	sub	objptr, ##33344
05e74                 | LR__0512
05e74                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05e74     2E 00 00 FF 
05e78     08 E4 05 F1 | 	add	objptr, ##23560
05e7c     F2 24 02 FB | 	rdlong	local04, objptr
05e80     03 24 66 F0 | 	shl	local04, #3
05e84     02 00 00 FF 
05e88     38 E4 85 F1 | 	sub	objptr, ##1080
05e8c     F2 24 02 F1 | 	add	local04, objptr
05e90     04 24 06 F1 | 	add	local04, #4
05e94     12 2D 02 FB | 	rdlong	local08, local04
05e98     12 2C 0E F2 | 	cmp	local08, #18 wz
05e9c     2B 00 00 FF 
05ea0     D0 E5 85 F1 | 	sub	objptr, ##22480
05ea4     60 01 90 5D |  if_ne	jmp	#LR__0513
05ea8     22 22 06 F6 | 	mov	local03, #34
05eac     0F 27 02 F6 | 	mov	local05, local01
05eb0     10 29 02 F6 | 	mov	local06, local02
05eb4     11 2B 02 F6 | 	mov	local07, local03
05eb8     41 00 00 FF 
05ebc     40 E4 05 F1 | 	add	objptr, ##33344
05ec0     F2 2C 02 FB | 	rdlong	local08, objptr
05ec4     16 2F 02 F6 | 	mov	local09, local08
05ec8     01 2E 66 F0 | 	shl	local09, #1
05ecc     16 2F 02 F1 | 	add	local09, local08
05ed0     02 2E 66 F0 | 	shl	local09, #2
05ed4     03 00 00 FF 
05ed8     00 E4 85 F1 | 	sub	objptr, ##1536
05edc     F2 2E 02 F1 | 	add	local09, objptr
05ee0     17 27 62 FC | 	wrlong	local05, local09
05ee4     03 00 00 FF 
05ee8     00 E4 05 F1 | 	add	objptr, ##1536
05eec     F2 32 02 FB | 	rdlong	local11, objptr
05ef0     19 31 02 F6 | 	mov	local10, local11
05ef4     01 30 66 F0 | 	shl	local10, #1
05ef8     19 31 02 F1 | 	add	local10, local11
05efc     02 30 66 F0 | 	shl	local10, #2
05f00     03 00 00 FF 
05f04     00 E4 85 F1 | 	sub	objptr, ##1536
05f08     F2 30 02 F1 | 	add	local10, objptr
05f0c     04 30 06 F1 | 	add	local10, #4
05f10     18 29 62 FC | 	wrlong	local06, local10
05f14     03 00 00 FF 
05f18     00 E4 05 F1 | 	add	objptr, ##1536
05f1c     F2 26 02 FB | 	rdlong	local05, objptr
05f20     13 33 02 F6 | 	mov	local11, local05
05f24     01 32 66 F0 | 	shl	local11, #1
05f28     13 33 02 F1 | 	add	local11, local05
05f2c     02 32 66 F0 | 	shl	local11, #2
05f30     03 00 00 FF 
05f34     00 E4 85 F1 | 	sub	objptr, ##1536
05f38     F2 32 02 F1 | 	add	local11, objptr
05f3c     08 32 06 F1 | 	add	local11, #8
05f40     19 2B 62 FC | 	wrlong	local07, local11
05f44     03 00 00 FF 
05f48     00 E4 05 F1 | 	add	objptr, ##1536
05f4c     F2 26 02 FB | 	rdlong	local05, objptr
05f50     01 26 06 F1 | 	add	local05, #1
05f54     F2 26 62 FC | 	wrlong	local05, objptr
05f58     44 22 06 F6 | 	mov	local03, #68
05f5c     0F 27 02 F6 | 	mov	local05, local01
05f60     10 29 02 F6 | 	mov	local06, local02
05f64     11 2B 02 F6 | 	mov	local07, local03
05f68     F2 2C 02 FB | 	rdlong	local08, objptr
05f6c     16 2F 02 F6 | 	mov	local09, local08
05f70     01 2E 66 F0 | 	shl	local09, #1
05f74     16 2F 02 F1 | 	add	local09, local08
05f78     02 2E 66 F0 | 	shl	local09, #2
05f7c     03 00 00 FF 
05f80     00 E4 85 F1 | 	sub	objptr, ##1536
05f84     F2 2E 02 F1 | 	add	local09, objptr
05f88     17 27 62 FC | 	wrlong	local05, local09
05f8c     03 00 00 FF 
05f90     00 E4 05 F1 | 	add	objptr, ##1536
05f94     F2 32 02 FB | 	rdlong	local11, objptr
05f98     19 31 02 F6 | 	mov	local10, local11
05f9c     01 30 66 F0 | 	shl	local10, #1
05fa0     19 31 02 F1 | 	add	local10, local11
05fa4     02 30 66 F0 | 	shl	local10, #2
05fa8     03 00 00 FF 
05fac     00 E4 85 F1 | 	sub	objptr, ##1536
05fb0     F2 30 02 F1 | 	add	local10, objptr
05fb4     04 30 06 F1 | 	add	local10, #4
05fb8     18 29 62 FC | 	wrlong	local06, local10
05fbc     03 00 00 FF 
05fc0     00 E4 05 F1 | 	add	objptr, ##1536
05fc4     F2 30 02 FB | 	rdlong	local10, objptr
05fc8     18 33 02 F6 | 	mov	local11, local10
05fcc     01 32 66 F0 | 	shl	local11, #1
05fd0     18 33 02 F1 | 	add	local11, local10
05fd4     02 32 66 F0 | 	shl	local11, #2
05fd8     03 00 00 FF 
05fdc     00 E4 85 F1 | 	sub	objptr, ##1536
05fe0     F2 32 02 F1 | 	add	local11, objptr
05fe4     08 32 06 F1 | 	add	local11, #8
05fe8     19 2B 62 FC | 	wrlong	local07, local11
05fec     03 00 00 FF 
05ff0     00 E4 05 F1 | 	add	objptr, ##1536
05ff4     F2 26 02 FB | 	rdlong	local05, objptr
05ff8     01 26 06 F1 | 	add	local05, #1
05ffc     F2 26 62 FC | 	wrlong	local05, objptr
06000     41 00 00 FF 
06004     40 E4 85 F1 | 	sub	objptr, ##33344
06008                 | LR__0513
06008                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06008     2E 00 00 FF 
0600c     08 E4 05 F1 | 	add	objptr, ##23560
06010     F2 24 02 FB | 	rdlong	local04, objptr
06014     03 24 66 F0 | 	shl	local04, #3
06018     02 00 00 FF 
0601c     38 E4 85 F1 | 	sub	objptr, ##1080
06020     F2 24 02 F1 | 	add	local04, objptr
06024     04 24 06 F1 | 	add	local04, #4
06028     12 2D 02 FB | 	rdlong	local08, local04
0602c     FE 2D 0E F2 | 	cmp	local08, #510 wz
06030     2B 00 00 FF 
06034     D0 E5 85 F1 | 	sub	objptr, ##22480
06038     B8 00 90 5D |  if_ne	jmp	#LR__0514
0603c     44 22 06 F6 | 	mov	local03, #68
06040     0F 27 02 F6 | 	mov	local05, local01
06044     10 29 02 F6 | 	mov	local06, local02
06048     11 2B 02 F6 | 	mov	local07, local03
0604c     41 00 00 FF 
06050     40 E4 05 F1 | 	add	objptr, ##33344
06054     F2 2C 02 FB | 	rdlong	local08, objptr
06058     16 2F 02 F6 | 	mov	local09, local08
0605c     01 2E 66 F0 | 	shl	local09, #1
06060     16 2F 02 F1 | 	add	local09, local08
06064     02 2E 66 F0 | 	shl	local09, #2
06068     03 00 00 FF 
0606c     00 E4 85 F1 | 	sub	objptr, ##1536
06070     F2 2E 02 F1 | 	add	local09, objptr
06074     17 27 62 FC | 	wrlong	local05, local09
06078     03 00 00 FF 
0607c     00 E4 05 F1 | 	add	objptr, ##1536
06080     F2 32 02 FB | 	rdlong	local11, objptr
06084     19 31 02 F6 | 	mov	local10, local11
06088     01 30 66 F0 | 	shl	local10, #1
0608c     19 31 02 F1 | 	add	local10, local11
06090     02 30 66 F0 | 	shl	local10, #2
06094     03 00 00 FF 
06098     00 E4 85 F1 | 	sub	objptr, ##1536
0609c     F2 30 02 F1 | 	add	local10, objptr
060a0     04 30 06 F1 | 	add	local10, #4
060a4     18 29 62 FC | 	wrlong	local06, local10
060a8     03 00 00 FF 
060ac     00 E4 05 F1 | 	add	objptr, ##1536
060b0     F2 30 02 FB | 	rdlong	local10, objptr
060b4     18 33 02 F6 | 	mov	local11, local10
060b8     01 32 66 F0 | 	shl	local11, #1
060bc     18 33 02 F1 | 	add	local11, local10
060c0     02 32 66 F0 | 	shl	local11, #2
060c4     03 00 00 FF 
060c8     00 E4 85 F1 | 	sub	objptr, ##1536
060cc     F2 32 02 F1 | 	add	local11, objptr
060d0     08 32 06 F1 | 	add	local11, #8
060d4     19 2B 62 FC | 	wrlong	local07, local11
060d8     03 00 00 FF 
060dc     00 E4 05 F1 | 	add	objptr, ##1536
060e0     F2 26 02 FB | 	rdlong	local05, objptr
060e4     01 26 06 F1 | 	add	local05, #1
060e8     F2 26 62 FC | 	wrlong	local05, objptr
060ec     41 00 00 FF 
060f0     40 E4 85 F1 | 	sub	objptr, ##33344
060f4                 | LR__0514
060f4                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
060f4     2E 00 00 FF 
060f8     08 E4 05 F1 | 	add	objptr, ##23560
060fc     F2 24 02 FB | 	rdlong	local04, objptr
06100     03 24 66 F0 | 	shl	local04, #3
06104     02 00 00 FF 
06108     38 E4 85 F1 | 	sub	objptr, ##1080
0610c     F2 24 02 F1 | 	add	local04, objptr
06110     04 24 06 F1 | 	add	local04, #4
06114     12 2D 02 FB | 	rdlong	local08, local04
06118     11 2C 0E F2 | 	cmp	local08, #17 wz
0611c     2B 00 00 FF 
06120     D0 E5 85 F1 | 	sub	objptr, ##22480
06124     6C 00 90 AD |  if_e	jmp	#LR__0515
06128     2E 00 00 FF 
0612c     08 E4 05 F1 | 	add	objptr, ##23560
06130     F2 2C 02 FB | 	rdlong	local08, objptr
06134     03 2C 66 F0 | 	shl	local08, #3
06138     02 00 00 FF 
0613c     38 E4 85 F1 | 	sub	objptr, ##1080
06140     F2 2C 02 F1 | 	add	local08, objptr
06144     04 2C 06 F1 | 	add	local08, #4
06148     16 2D 02 FB | 	rdlong	local08, local08
0614c     12 2C 0E F2 | 	cmp	local08, #18 wz
06150     2B 00 00 FF 
06154     D0 E5 85 F1 | 	sub	objptr, ##22480
06158     38 00 90 AD |  if_e	jmp	#LR__0515
0615c     2E 00 00 FF 
06160     08 E4 05 F1 | 	add	objptr, ##23560
06164     F2 32 02 FB | 	rdlong	local11, objptr
06168     03 32 66 F0 | 	shl	local11, #3
0616c     02 00 00 FF 
06170     38 E4 85 F1 | 	sub	objptr, ##1080
06174     F2 32 02 F1 | 	add	local11, objptr
06178     04 32 06 F1 | 	add	local11, #4
0617c     19 33 02 FB | 	rdlong	local11, local11
06180     FE 33 0E F2 | 	cmp	local11, #510 wz
06184     2B 00 00 FF 
06188     D0 E5 85 F1 | 	sub	objptr, ##22480
0618c     16 FA 05 56 |  if_ne	mov	result1, #22
06190     68 00 90 5D |  if_ne	jmp	#LR__0517
06194                 | LR__0515
06194     2E 00 00 FF 
06198     08 E4 05 F1 | 	add	objptr, ##23560
0619c     F2 24 02 FB | 	rdlong	local04, objptr
061a0     01 24 06 F1 | 	add	local04, #1
061a4     F2 24 62 FC | 	wrlong	local04, objptr
061a8     03 24 66 F0 | 	shl	local04, #3
061ac     02 00 00 FF 
061b0     38 E4 85 F1 | 	sub	objptr, ##1080
061b4     F2 24 02 F1 | 	add	local04, objptr
061b8     04 24 06 F1 | 	add	local04, #4
061bc     12 2D 02 FB | 	rdlong	local08, local04
061c0     FE 2D 0E F2 | 	cmp	local08, #510 wz
061c4     2B 00 00 FF 
061c8     D0 E5 85 F1 | 	sub	objptr, ##22480
061cc     28 00 90 AD |  if_e	jmp	#LR__0516
061d0     2E 00 00 FF 
061d4     08 E4 05 F1 | 	add	objptr, ##23560
061d8     F2 32 02 FB | 	rdlong	local11, objptr
061dc     0E 00 00 FF 
061e0     1C E4 05 F1 | 	add	objptr, ##7196
061e4     F2 30 02 FB | 	rdlong	local10, objptr
061e8     3C 00 00 FF 
061ec     24 E4 85 F1 | 	sub	objptr, ##30756
061f0     18 33 52 F2 | 	cmps	local11, local10 wc
061f4     E4 FA 9F CD |  if_b	jmp	#LR__0511
061f8                 | LR__0516
061f8                 | ' return 0
061f8     00 FA 05 F6 | 	mov	result1, #0
061fc                 | LR__0517
061fc     A7 F0 03 F6 | 	mov	ptra, fp
06200     B2 00 A0 FD | 	call	#popregs_
06204                 | _compile_print_ret
06204     2D 00 64 FD | 	ret
06208                 | 
06208                 | ' 
06208                 | ' function compile_if() as ulong  
06208                 | _compile_if
06208     05 4A 05 F6 | 	mov	COUNT_, #5
0620c     A8 00 A0 FD | 	call	#pushregs_
06210                 | _compile_if_enter
06210     28 F3 BF FD | 	call	#_compile_converttoint
06214                 | ' return err
06214     2E 00 00 FF 
06218     08 E4 05 F1 | 	add	objptr, ##23560
0621c     F2 FA 01 FB | 	rdlong	result1, objptr
06220     01 FA 05 F1 | 	add	result1, #1
06224     F2 FA 61 FC | 	wrlong	result1, objptr
06228     58 22 06 F6 | 	mov	local03, #88
0622c     0F 25 02 F6 | 	mov	local04, local01
06230     10 27 02 F6 | 	mov	local05, local02
06234     11 1F 02 F6 | 	mov	local01, local03
06238     13 00 00 FF 
0623c     38 E4 05 F1 | 	add	objptr, ##9784
06240     F2 12 02 FB | 	rdlong	arg01, objptr
06244     09 FB 01 F6 | 	mov	result1, arg01
06248     01 FA 65 F0 | 	shl	result1, #1
0624c     09 FB 01 F1 | 	add	result1, arg01
06250     02 FA 65 F0 | 	shl	result1, #2
06254     03 00 00 FF 
06258     00 E4 85 F1 | 	sub	objptr, ##1536
0625c     F2 FA 01 F1 | 	add	result1, objptr
06260     FD 24 62 FC | 	wrlong	local04, result1
06264     03 00 00 FF 
06268     00 E4 05 F1 | 	add	objptr, ##1536
0626c     F2 12 02 FB | 	rdlong	arg01, objptr
06270     09 25 02 F6 | 	mov	local04, arg01
06274     01 24 66 F0 | 	shl	local04, #1
06278     09 25 02 F1 | 	add	local04, arg01
0627c     02 24 66 F0 | 	shl	local04, #2
06280     03 00 00 FF 
06284     00 E4 85 F1 | 	sub	objptr, ##1536
06288     F2 24 02 F1 | 	add	local04, objptr
0628c     04 24 06 F1 | 	add	local04, #4
06290     12 27 62 FC | 	wrlong	local05, local04
06294     03 00 00 FF 
06298     00 E4 05 F1 | 	add	objptr, ##1536
0629c     F2 24 02 FB | 	rdlong	local04, objptr
062a0     12 27 02 F6 | 	mov	local05, local04
062a4     01 26 66 F0 | 	shl	local05, #1
062a8     12 27 02 F1 | 	add	local05, local04
062ac     02 26 66 F0 | 	shl	local05, #2
062b0     03 00 00 FF 
062b4     00 E4 85 F1 | 	sub	objptr, ##1536
062b8     F2 26 02 F1 | 	add	local05, objptr
062bc     08 26 06 F1 | 	add	local05, #8
062c0     13 1F 62 FC | 	wrlong	local01, local05
062c4     03 00 00 FF 
062c8     00 E4 05 F1 | 	add	objptr, ##1536
062cc     F2 24 02 FB | 	rdlong	local04, objptr
062d0     01 24 06 F1 | 	add	local04, #1
062d4     F2 24 62 FC | 	wrlong	local04, objptr
062d8                 | ' 
062d8                 | ' 'print "In compile_if"
062d8                 | ' compile_int_fun_1p()
062d8                 | ' cmd=lparts(ct).token : ct+=1
062d8                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
062d8                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
062d8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
062d8     13 00 00 FF 
062dc     38 E4 85 F1 | 	sub	objptr, ##9784
062e0     F2 26 02 FB | 	rdlong	local05, objptr
062e4     01 26 06 F1 | 	add	local05, #1
062e8     03 26 66 F0 | 	shl	local05, #3
062ec     02 00 00 FF 
062f0     38 E4 85 F1 | 	sub	objptr, ##1080
062f4     F2 26 02 F1 | 	add	local05, objptr
062f8     13 13 02 FB | 	rdlong	arg01, local05
062fc     2B 00 00 FF 
06300     D0 E5 85 F1 | 	sub	objptr, ##22480
06304                 | ' 
06304                 | ' select case s
06304     22 01 00 FF 
06308     AE 15 06 F6 | 	mov	arg02, ##@LR__4144
0630c     6C EF B0 FD | 	call	#__system___string_cmp
06310     00 FA 0D F2 | 	cmp	result1, #0 wz
06314     1B FA 05 A6 |  if_e	mov	result1, #27
06318     00 FA 05 56 |  if_ne	mov	result1, #0
0631c     00 FA 0D F2 | 	cmp	result1, #0 wz
06320     0C 00 90 AD |  if_e	jmp	#LR__0520
06324     05 12 06 F6 | 	mov	arg01, #5
06328     20 EC BF FD | 	call	#_compile_immediate_assign
0632c     08 00 90 FD | 	jmp	#LR__0521
06330                 | LR__0520
06330     05 12 06 F6 | 	mov	arg01, #5
06334     F4 DF BF FD | 	call	#_compile_immediate
06338                 | LR__0521
06338                 | ' 
06338                 | ' 
06338                 | ' return 0
06338     00 FA 05 F6 | 	mov	result1, #0
0633c     A7 F0 03 F6 | 	mov	ptra, fp
06340     B2 00 A0 FD | 	call	#popregs_
06344                 | _compile_if_ret
06344     2D 00 64 FD | 	ret
06348                 | 
06348                 | ' 
06348                 | ' function compile_else() as ulong  
06348                 | _compile_else
06348     05 4A 05 F6 | 	mov	COUNT_, #5
0634c     A8 00 A0 FD | 	call	#pushregs_
06350                 | _compile_else_enter
06350     5A 22 06 F6 | 	mov	local03, #90
06354     0F 25 02 F6 | 	mov	local04, local01
06358     10 27 02 F6 | 	mov	local05, local02
0635c     11 1F 02 F6 | 	mov	local01, local03
06360     41 00 00 FF 
06364     40 E4 05 F1 | 	add	objptr, ##33344
06368     F2 12 02 FB | 	rdlong	arg01, objptr
0636c     09 FB 01 F6 | 	mov	result1, arg01
06370     01 FA 65 F0 | 	shl	result1, #1
06374     09 FB 01 F1 | 	add	result1, arg01
06378     02 FA 65 F0 | 	shl	result1, #2
0637c     03 00 00 FF 
06380     00 E4 85 F1 | 	sub	objptr, ##1536
06384     F2 FA 01 F1 | 	add	result1, objptr
06388     FD 24 62 FC | 	wrlong	local04, result1
0638c     03 00 00 FF 
06390     00 E4 05 F1 | 	add	objptr, ##1536
06394     F2 FA 01 FB | 	rdlong	result1, objptr
06398     FD 24 02 F6 | 	mov	local04, result1
0639c     01 24 66 F0 | 	shl	local04, #1
063a0     FD 24 02 F1 | 	add	local04, result1
063a4     02 24 66 F0 | 	shl	local04, #2
063a8     03 00 00 FF 
063ac     00 E4 85 F1 | 	sub	objptr, ##1536
063b0     F2 24 02 F1 | 	add	local04, objptr
063b4     04 24 06 F1 | 	add	local04, #4
063b8     12 27 62 FC | 	wrlong	local05, local04
063bc     03 00 00 FF 
063c0     00 E4 05 F1 | 	add	objptr, ##1536
063c4     F2 24 02 FB | 	rdlong	local04, objptr
063c8     12 27 02 F6 | 	mov	local05, local04
063cc     01 26 66 F0 | 	shl	local05, #1
063d0     12 27 02 F1 | 	add	local05, local04
063d4     02 26 66 F0 | 	shl	local05, #2
063d8     03 00 00 FF 
063dc     00 E4 85 F1 | 	sub	objptr, ##1536
063e0     F2 26 02 F1 | 	add	local05, objptr
063e4     08 26 06 F1 | 	add	local05, #8
063e8     13 1F 62 FC | 	wrlong	local01, local05
063ec     03 00 00 FF 
063f0     00 E4 05 F1 | 	add	objptr, ##1536
063f4     F2 24 02 FB | 	rdlong	local04, objptr
063f8     01 24 06 F1 | 	add	local04, #1
063fc     F2 24 62 FC | 	wrlong	local04, objptr
06400                 | ' 
06400                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06400                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06400     13 00 00 FF 
06404     38 E4 85 F1 | 	sub	objptr, ##9784
06408     F2 26 02 FB | 	rdlong	local05, objptr
0640c     01 26 06 F1 | 	add	local05, #1
06410     03 26 66 F0 | 	shl	local05, #3
06414     02 00 00 FF 
06418     38 E4 85 F1 | 	sub	objptr, ##1080
0641c     F2 26 02 F1 | 	add	local05, objptr
06420     13 13 02 FB | 	rdlong	arg01, local05
06424     2B 00 00 FF 
06428     D0 E5 85 F1 | 	sub	objptr, ##22480
0642c                 | ' 
0642c                 | ' select case s
0642c     22 01 00 FF 
06430     AE 15 06 F6 | 	mov	arg02, ##@LR__4144
06434     44 EE B0 FD | 	call	#__system___string_cmp
06438     00 FA 0D F2 | 	cmp	result1, #0 wz
0643c     1B FA 05 A6 |  if_e	mov	result1, #27
06440     00 FA 05 56 |  if_ne	mov	result1, #0
06444     00 FA 0D F2 | 	cmp	result1, #0 wz
06448     0C 00 90 AD |  if_e	jmp	#LR__0530
0644c     05 12 06 F6 | 	mov	arg01, #5
06450     F8 EA BF FD | 	call	#_compile_immediate_assign
06454     08 00 90 FD | 	jmp	#LR__0531
06458                 | LR__0530
06458     05 12 06 F6 | 	mov	arg01, #5
0645c     CC DE BF FD | 	call	#_compile_immediate
06460                 | LR__0531
06460                 | ' 
06460                 | ' 
06460                 | ' return 0
06460     00 FA 05 F6 | 	mov	result1, #0
06464     A7 F0 03 F6 | 	mov	ptra, fp
06468     B2 00 A0 FD | 	call	#popregs_
0646c                 | _compile_else_ret
0646c     2D 00 64 FD | 	ret
06470                 | 
06470                 | ' 
06470                 | ' 
06470                 | ' function compile_dim() as ulong  
06470                 | _compile_dim
06470     10 4A 05 F6 | 	mov	COUNT_, #16
06474     A8 00 A0 FD | 	call	#pushregs_
06478     01 1E 06 F6 | 	mov	local01, #1
0647c     01 20 06 F6 | 	mov	local02, #1
06480     01 22 06 F6 | 	mov	local03, #1
06484                 | ' 
06484                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06484                 | ' 
06484                 | ' if isname(lparts(ct).part$) then 
06484     2E 00 00 FF 
06488     08 E4 05 F1 | 	add	objptr, ##23560
0648c     F2 18 02 FB | 	rdlong	arg04, objptr
06490     03 18 66 F0 | 	shl	arg04, #3
06494     02 00 00 FF 
06498     38 E4 85 F1 | 	sub	objptr, ##1080
0649c     F2 18 02 F1 | 	add	arg04, objptr
064a0     0C 13 02 FB | 	rdlong	arg01, arg04
064a4     2B 00 00 FF 
064a8     D0 E5 85 F1 | 	sub	objptr, ##22480
064ac     60 CE BF FD | 	call	#_isname
064b0     00 FA 0D F2 | 	cmp	result1, #0 wz
064b4     D8 06 90 AD |  if_e	jmp	#LR__0563
064b8     2E 00 00 FF 
064bc     08 E4 05 F1 | 	add	objptr, ##23560
064c0     F2 18 02 FB | 	rdlong	arg04, objptr
064c4     03 18 66 F0 | 	shl	arg04, #3
064c8     02 00 00 FF 
064cc     38 E4 85 F1 | 	sub	objptr, ##1080
064d0     F2 18 02 F1 | 	add	arg04, objptr
064d4     0C 25 02 FB | 	rdlong	local04, arg04
064d8     01 26 66 F6 | 	neg	local05, #1
064dc                 | '   varname2$=lparts(ct).part$ 
064dc                 | '   j=-1
064dc                 | '   if varnum>0 then
064dc     04 E4 85 F1 | 	sub	objptr, #4
064e0     F2 28 02 FB | 	rdlong	local06, objptr
064e4     2B 00 00 FF 
064e8     CC E5 85 F1 | 	sub	objptr, ##22476
064ec     01 28 56 F2 | 	cmps	local06, #1 wc
064f0     A8 00 90 CD |  if_b	jmp	#LR__0542
064f4                 | '     print varnum
064f4     00 12 06 F6 | 	mov	arg01, #0
064f8     0C 43 B1 FD | 	call	#__system___getiolock_0334
064fc     FD 12 02 F6 | 	mov	arg01, result1
06500     50 ED B0 FD | 	call	#__system___lockmem
06504     2B 00 00 FF 
06508     CC E5 05 F1 | 	add	objptr, ##22476
0650c     F2 14 02 FB | 	rdlong	arg02, objptr
06510     2B 00 00 FF 
06514     CC E5 85 F1 | 	sub	objptr, ##22476
06518     00 12 06 F6 | 	mov	arg01, #0
0651c     00 16 06 F6 | 	mov	arg03, #0
06520     0A 18 06 F6 | 	mov	arg04, #10
06524     64 FA B0 FD | 	call	#__system___basic_print_integer
06528     00 12 06 F6 | 	mov	arg01, #0
0652c     0A 14 06 F6 | 	mov	arg02, #10
06530     00 16 06 F6 | 	mov	arg03, #0
06534     B8 F9 B0 FD | 	call	#__system___basic_print_char
06538     00 12 06 F6 | 	mov	arg01, #0
0653c     C8 42 B1 FD | 	call	#__system___getiolock_0334
06540     FD 00 68 FC | 	wrlong	#0, result1
06544                 | '     for i=0 to varnum-1
06544     00 2A 06 F6 | 	mov	local07, #0
06548     2B 00 00 FF 
0654c     CC E5 05 F1 | 	add	objptr, ##22476
06550     F2 2C 02 FB | 	rdlong	local08, objptr
06554     2B 00 00 FF 
06558     CC E5 85 F1 | 	sub	objptr, ##22476
0655c                 | LR__0540
0655c     16 2B 52 F2 | 	cmps	local07, local08 wc
06560     38 00 90 3D |  if_ae	jmp	#LR__0541
06564                 | '       if variables(i).name=varname2$ then j=i : exit
06564     15 15 02 F6 | 	mov	arg02, local07
06568     04 14 66 F0 | 	shl	arg02, #4
0656c     0B 00 00 FF 
06570     CC E5 05 F1 | 	add	objptr, ##6092
06574     F2 14 02 F1 | 	add	arg02, objptr
06578     0A 13 02 FB | 	rdlong	arg01, arg02
0657c     12 15 02 F6 | 	mov	arg02, local04
06580     0B 00 00 FF 
06584     CC E5 85 F1 | 	sub	objptr, ##6092
06588     F0 EC B0 FD | 	call	#__system___string_cmp
0658c     00 FA 0D F2 | 	cmp	result1, #0 wz
06590     15 27 02 A6 |  if_e	mov	local05, local07
06594     01 2A 06 51 |  if_ne	add	local07, #1
06598     C0 FF 9F 5D |  if_ne	jmp	#LR__0540
0659c                 | LR__0541
0659c                 | LR__0542
0659c                 | '   if j<>-1 then printerror (42) : return 42
0659c     FF FF 7F FF 
065a0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
065a4     10 00 90 AD |  if_e	jmp	#LR__0543
065a8     2A 12 06 F6 | 	mov	arg01, #42
065ac     B0 B7 B0 FD | 	call	#_printerror
065b0     2A FA 05 F6 | 	mov	result1, #42
065b4     DC 07 90 FD | 	jmp	#LR__0565
065b8                 | LR__0543
065b8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
065b8     2E 00 00 FF 
065bc     08 E4 05 F1 | 	add	objptr, ##23560
065c0     F2 18 02 FB | 	rdlong	arg04, objptr
065c4     01 18 06 F1 | 	add	arg04, #1
065c8     03 18 66 F0 | 	shl	arg04, #3
065cc     02 00 00 FF 
065d0     38 E4 85 F1 | 	sub	objptr, ##1080
065d4     F2 18 02 F1 | 	add	arg04, objptr
065d8     0C 13 02 FB | 	rdlong	arg01, arg04
065dc     24 01 00 FF 
065e0     78 14 06 F6 | 	mov	arg02, ##@LR__4256
065e4     2B 00 00 FF 
065e8     D0 E5 85 F1 | 	sub	objptr, ##22480
065ec     8C EC B0 FD | 	call	#__system___string_cmp
065f0     00 FA 0D F2 | 	cmp	result1, #0 wz
065f4     50 00 90 AD |  if_e	jmp	#LR__0544
065f8     2E 00 00 FF 
065fc     08 E4 05 F1 | 	add	objptr, ##23560
06600     F2 2C 02 FB | 	rdlong	local08, objptr
06604     01 2C 06 F1 | 	add	local08, #1
06608     03 2C 66 F0 | 	shl	local08, #3
0660c     02 00 00 FF 
06610     38 E4 85 F1 | 	sub	objptr, ##1080
06614     F2 2C 02 F1 | 	add	local08, objptr
06618     16 13 02 FB | 	rdlong	arg01, local08
0661c     24 01 00 FF 
06620     7A 14 06 F6 | 	mov	arg02, ##@LR__4257
06624     2B 00 00 FF 
06628     D0 E5 85 F1 | 	sub	objptr, ##22480
0662c     4C EC B0 FD | 	call	#__system___string_cmp
06630     00 FA 0D F2 | 	cmp	result1, #0 wz
06634     10 00 90 AD |  if_e	jmp	#LR__0544
06638     2B 12 06 F6 | 	mov	arg01, #43
0663c     20 B7 B0 FD | 	call	#_printerror
06640     2B FA 05 F6 | 	mov	result1, #43
06644     4C 07 90 FD | 	jmp	#LR__0565
06648                 | LR__0544
06648                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06648     2E 00 00 FF 
0664c     08 E4 05 F1 | 	add	objptr, ##23560
06650     F2 14 02 FB | 	rdlong	arg02, objptr
06654     01 14 06 F1 | 	add	arg02, #1
06658     03 14 66 F0 | 	shl	arg02, #3
0665c     02 00 00 FF 
06660     38 E4 85 F1 | 	sub	objptr, ##1080
06664     F2 14 02 F1 | 	add	arg02, objptr
06668     0A 13 02 FB | 	rdlong	arg01, arg02
0666c     24 01 00 FF 
06670     7D 14 06 F6 | 	mov	arg02, ##@LR__4258
06674     2B 00 00 FF 
06678     D0 E5 85 F1 | 	sub	objptr, ##22480
0667c     FC EB B0 FD | 	call	#__system___string_cmp
06680     00 FA 0D F2 | 	cmp	result1, #0 wz
06684     2E 00 00 AF 
06688     08 E4 05 A1 |  if_e	add	objptr, ##23560
0668c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
06690     2E 00 00 AF 
06694     08 E4 85 A1 |  if_e	sub	objptr, ##23560
06698     01 2E 06 A1 |  if_e	add	local09, #1
0669c     F8 02 90 AD |  if_e	jmp	#LR__0550
066a0     2E 00 00 FF 
066a4     08 E4 05 F1 | 	add	objptr, ##23560
066a8     F2 2E 02 FB | 	rdlong	local09, objptr
066ac     2E 00 00 FF 
066b0     08 E4 85 F1 | 	sub	objptr, ##23560
066b4     02 2E 06 F1 | 	add	local09, #2
066b8     00 30 06 F6 | 	mov	local10, #0
066bc                 | '   l=ct+2 : m=0 : do
066bc                 | LR__0545
066bc                 | '     print lparts(l).part$, isdec(lparts(l).part$)
066bc     00 12 06 F6 | 	mov	arg01, #0
066c0     44 41 B1 FD | 	call	#__system___getiolock_0334
066c4     FD 12 02 F6 | 	mov	arg01, result1
066c8     88 EB B0 FD | 	call	#__system___lockmem
066cc     17 19 02 F6 | 	mov	arg04, local09
066d0     03 18 66 F0 | 	shl	arg04, #3
066d4     2B 00 00 FF 
066d8     D0 E5 05 F1 | 	add	objptr, ##22480
066dc     F2 18 02 F1 | 	add	arg04, objptr
066e0     0C 15 02 FB | 	rdlong	arg02, arg04
066e4     00 12 06 F6 | 	mov	arg01, #0
066e8     00 16 06 F6 | 	mov	arg03, #0
066ec     2B 00 00 FF 
066f0     D0 E5 85 F1 | 	sub	objptr, ##22480
066f4     50 F8 B0 FD | 	call	#__system___basic_print_string
066f8     00 12 06 F6 | 	mov	arg01, #0
066fc     09 14 06 F6 | 	mov	arg02, #9
06700     00 16 06 F6 | 	mov	arg03, #0
06704     E8 F7 B0 FD | 	call	#__system___basic_print_char
06708     00 2C 06 F6 | 	mov	local08, #0
0670c     17 19 02 F6 | 	mov	arg04, local09
06710     03 18 66 F0 | 	shl	arg04, #3
06714     2B 00 00 FF 
06718     D0 E5 05 F1 | 	add	objptr, ##22480
0671c     F2 18 02 F1 | 	add	arg04, objptr
06720     0C 13 02 FB | 	rdlong	arg01, arg04
06724     2B 00 00 FF 
06728     D0 E5 85 F1 | 	sub	objptr, ##22480
0672c     84 D2 BF FD | 	call	#_isdec
06730     FD 14 02 F6 | 	mov	arg02, result1
06734     16 13 02 F6 | 	mov	arg01, local08
06738     00 16 06 F6 | 	mov	arg03, #0
0673c     0A 18 06 F6 | 	mov	arg04, #10
06740     48 F8 B0 FD | 	call	#__system___basic_print_integer
06744     00 12 06 F6 | 	mov	arg01, #0
06748     0A 14 06 F6 | 	mov	arg02, #10
0674c     00 16 06 F6 | 	mov	arg03, #0
06750     9C F7 B0 FD | 	call	#__system___basic_print_char
06754     00 12 06 F6 | 	mov	arg01, #0
06758     AC 40 B1 FD | 	call	#__system___getiolock_0334
0675c     FD 00 68 FC | 	wrlong	#0, result1
06760                 | '     if isdec(lparts(l).part$) then 
06760     17 19 02 F6 | 	mov	arg04, local09
06764     03 18 66 F0 | 	shl	arg04, #3
06768     2B 00 00 FF 
0676c     D0 E5 05 F1 | 	add	objptr, ##22480
06770     F2 18 02 F1 | 	add	arg04, objptr
06774     0C 13 02 FB | 	rdlong	arg01, arg04
06778     2B 00 00 FF 
0677c     D0 E5 85 F1 | 	sub	objptr, ##22480
06780     30 D2 BF FD | 	call	#_isdec
06784     00 FA 0D F2 | 	cmp	result1, #0 wz
06788     44 00 90 AD |  if_e	jmp	#LR__0546
0678c     18 33 02 F6 | 	mov	local11, local10
06790     0F 33 06 F1 | 	add	local11, #local01
06794     17 2D 02 F6 | 	mov	local08, local09
06798     03 2C 66 F0 | 	shl	local08, #3
0679c     2B 00 00 FF 
067a0     D0 E5 05 F1 | 	add	objptr, ##22480
067a4     F2 2C 02 F1 | 	add	local08, objptr
067a8     16 13 02 FB | 	rdlong	arg01, local08
067ac     00 14 06 F6 | 	mov	arg02, #0
067b0     2B 00 00 FF 
067b4     D0 E5 85 F1 | 	sub	objptr, ##22480
067b8     24 1B B1 FD | 	call	#__system____builtin_atoi
067bc     FD 34 02 F6 | 	mov	local12, result1
067c0                 | 	'.live	local12
067c0                 | 	'.live	local11
067c0     00 32 8E F9 | 	altd	local11, #0
067c4     1A 33 02 F6 | 	mov	local11, local12
067c8     01 30 06 F1 | 	add	local10, #1
067cc     10 00 90 FD | 	jmp	#LR__0547
067d0                 | LR__0546
067d0     11 12 06 F6 | 	mov	arg01, #17
067d4     88 B5 B0 FD | 	call	#_printerror
067d8                 | '       printerror (17)  : return(17)
067d8     11 FA 05 F6 | 	mov	result1, #17
067dc     B4 05 90 FD | 	jmp	#LR__0565
067e0                 | LR__0547
067e0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
067e0     17 35 02 F6 | 	mov	local12, local09
067e4     01 34 06 F1 | 	add	local12, #1
067e8     03 34 66 F0 | 	shl	local12, #3
067ec     2B 00 00 FF 
067f0     D0 E5 05 F1 | 	add	objptr, ##22480
067f4     F2 34 02 F1 | 	add	local12, objptr
067f8     1A 13 02 FB | 	rdlong	arg01, local12
067fc     24 01 00 FF 
06800     80 14 06 F6 | 	mov	arg02, ##@LR__4259
06804     2B 00 00 FF 
06808     D0 E5 85 F1 | 	sub	objptr, ##22480
0680c     6C EA B0 FD | 	call	#__system___string_cmp
06810     00 FA 0D F2 | 	cmp	result1, #0 wz
06814     48 00 90 AD |  if_e	jmp	#LR__0548
06818     17 35 02 F6 | 	mov	local12, local09
0681c     01 34 06 F1 | 	add	local12, #1
06820     03 34 66 F0 | 	shl	local12, #3
06824     2B 00 00 FF 
06828     D0 E5 05 F1 | 	add	objptr, ##22480
0682c     F2 34 02 F1 | 	add	local12, objptr
06830     1A 13 02 FB | 	rdlong	arg01, local12
06834     24 01 00 FF 
06838     82 14 06 F6 | 	mov	arg02, ##@LR__4260
0683c     2B 00 00 FF 
06840     D0 E5 85 F1 | 	sub	objptr, ##22480
06844     34 EA B0 FD | 	call	#__system___string_cmp
06848     00 FA 0D F2 | 	cmp	result1, #0 wz
0684c     10 00 90 AD |  if_e	jmp	#LR__0548
06850     2C 12 06 F6 | 	mov	arg01, #44
06854     08 B5 B0 FD | 	call	#_printerror
06858     2C FA 05 F6 | 	mov	result1, #44
0685c     34 05 90 FD | 	jmp	#LR__0565
06860                 | LR__0548
06860     02 2E 06 F1 | 	add	local09, #2
06864     17 19 02 F6 | 	mov	arg04, local09
06868     01 18 86 F1 | 	sub	arg04, #1
0686c     03 18 66 F0 | 	shl	arg04, #3
06870     2B 00 00 FF 
06874     D0 E5 05 F1 | 	add	objptr, ##22480
06878     F2 18 02 F1 | 	add	arg04, objptr
0687c     0C 13 02 FB | 	rdlong	arg01, arg04
06880     24 01 00 FF 
06884     84 14 06 F6 | 	mov	arg02, ##@LR__4261
06888     2B 00 00 FF 
0688c     D0 E5 85 F1 | 	sub	objptr, ##22480
06890     E8 E9 B0 FD | 	call	#__system___string_cmp
06894     00 FA 0D F2 | 	cmp	result1, #0 wz
06898     03 30 56 52 |  if_ne	cmps	local10, #3 wc
0689c     1C FE 9F 4D |  if_c_and_nz	jmp	#LR__0545
068a0                 | '   if m>3 then printerror(45): return(45)
068a0     04 30 56 F2 | 	cmps	local10, #4 wc
068a4     10 00 90 CD |  if_b	jmp	#LR__0549
068a8     2D 12 06 F6 | 	mov	arg01, #45
068ac     B0 B4 B0 FD | 	call	#_printerror
068b0     2D FA 05 F6 | 	mov	result1, #45
068b4     DC 04 90 FD | 	jmp	#LR__0565
068b8                 | LR__0549
068b8                 | '   print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
068b8     00 12 06 F6 | 	mov	arg01, #0
068bc     48 3F B1 FD | 	call	#__system___getiolock_0334
068c0     FD 12 02 F6 | 	mov	arg01, result1
068c4     8C E9 B0 FD | 	call	#__system___lockmem
068c8     17 35 02 F6 | 	mov	local12, local09
068cc     01 34 86 F1 | 	sub	local12, #1
068d0     03 34 66 F0 | 	shl	local12, #3
068d4     2B 00 00 FF 
068d8     D0 E5 05 F1 | 	add	objptr, ##22480
068dc     F2 34 02 F1 | 	add	local12, objptr
068e0     1A 15 02 FB | 	rdlong	arg02, local12
068e4     00 12 06 F6 | 	mov	arg01, #0
068e8     00 16 06 F6 | 	mov	arg03, #0
068ec     2B 00 00 FF 
068f0     D0 E5 85 F1 | 	sub	objptr, ##22480
068f4     50 F6 B0 FD | 	call	#__system___basic_print_string
068f8     00 12 06 F6 | 	mov	arg01, #0
068fc     09 14 06 F6 | 	mov	arg02, #9
06900     00 16 06 F6 | 	mov	arg03, #0
06904     E8 F5 B0 FD | 	call	#__system___basic_print_char
06908     17 35 02 F6 | 	mov	local12, local09
0690c     03 34 66 F0 | 	shl	local12, #3
06910     2B 00 00 FF 
06914     D0 E5 05 F1 | 	add	objptr, ##22480
06918     F2 34 02 F1 | 	add	local12, objptr
0691c     1A 15 02 FB | 	rdlong	arg02, local12
06920     00 12 06 F6 | 	mov	arg01, #0
06924     00 16 06 F6 | 	mov	arg03, #0
06928     2B 00 00 FF 
0692c     D0 E5 85 F1 | 	sub	objptr, ##22480
06930     14 F6 B0 FD | 	call	#__system___basic_print_string
06934     00 12 06 F6 | 	mov	arg01, #0
06938     09 14 06 F6 | 	mov	arg02, #9
0693c     00 16 06 F6 | 	mov	arg03, #0
06940     AC F5 B0 FD | 	call	#__system___basic_print_char
06944     17 35 02 F6 | 	mov	local12, local09
06948     01 34 06 F1 | 	add	local12, #1
0694c     03 34 66 F0 | 	shl	local12, #3
06950     2B 00 00 FF 
06954     D0 E5 05 F1 | 	add	objptr, ##22480
06958     F2 34 02 F1 | 	add	local12, objptr
0695c     1A 15 02 FB | 	rdlong	arg02, local12
06960     00 12 06 F6 | 	mov	arg01, #0
06964     00 16 06 F6 | 	mov	arg03, #0
06968     2B 00 00 FF 
0696c     D0 E5 85 F1 | 	sub	objptr, ##22480
06970     D4 F5 B0 FD | 	call	#__system___basic_print_string
06974     00 12 06 F6 | 	mov	arg01, #0
06978     0A 14 06 F6 | 	mov	arg02, #10
0697c     00 16 06 F6 | 	mov	arg03, #0
06980     6C F5 B0 FD | 	call	#__system___basic_print_char
06984     00 12 06 F6 | 	mov	arg01, #0
06988     7C 3E B1 FD | 	call	#__system___getiolock_0334
0698c     FD 00 68 FC | 	wrlong	#0, result1
06990     00 37 06 F6 | 	mov	local13, #256
06994     0C 38 06 F6 | 	mov	local14, #12
06998                 | LR__0550
06998                 | '   arraytype=array_no_type : esize=12
06998                 | ' 1350 
06998                 | '   if lparts(l).part$="as" then
06998     17 33 02 F6 | 	mov	local11, local09
0699c     03 32 66 F0 | 	shl	local11, #3
069a0     2B 00 00 FF 
069a4     D0 E5 05 F1 | 	add	objptr, ##22480
069a8     F2 32 02 F1 | 	add	local11, objptr
069ac     19 13 02 FB | 	rdlong	arg01, local11
069b0     24 01 00 FF 
069b4     86 14 06 F6 | 	mov	arg02, ##@LR__4262
069b8     2B 00 00 FF 
069bc     D0 E5 85 F1 | 	sub	objptr, ##22480
069c0     B8 E8 B0 FD | 	call	#__system___string_cmp
069c4     00 FA 0D F2 | 	cmp	result1, #0 wz
069c8     D4 01 90 5D |  if_ne	jmp	#LR__0564
069cc                 | '     select case lparts(l+1).part$
069cc     17 33 02 F6 | 	mov	local11, local09
069d0     01 32 06 F1 | 	add	local11, #1
069d4     03 32 66 F0 | 	shl	local11, #3
069d8     2B 00 00 FF 
069dc     D0 E5 05 F1 | 	add	objptr, ##22480
069e0     F2 32 02 F1 | 	add	local11, objptr
069e4     19 3B 02 FB | 	rdlong	local15, local11
069e8     24 01 00 FF 
069ec     89 14 06 F6 | 	mov	arg02, ##@LR__4263
069f0     1D 13 02 F6 | 	mov	arg01, local15
069f4     2B 00 00 FF 
069f8     D0 E5 85 F1 | 	sub	objptr, ##22480
069fc     7C E8 B0 FD | 	call	#__system___string_cmp
06a00     00 FA 0D F2 | 	cmp	result1, #0 wz
06a04     F4 00 90 AD |  if_e	jmp	#LR__0551
06a08     24 01 00 FF 
06a0c     8E 14 06 F6 | 	mov	arg02, ##@LR__4264
06a10     1D 13 02 F6 | 	mov	arg01, local15
06a14     64 E8 B0 FD | 	call	#__system___string_cmp
06a18     00 FA 0D F2 | 	cmp	result1, #0 wz
06a1c     E8 00 90 AD |  if_e	jmp	#LR__0552
06a20     24 01 00 FF 
06a24     94 14 06 F6 | 	mov	arg02, ##@LR__4265
06a28     1D 13 02 F6 | 	mov	arg01, local15
06a2c     4C E8 B0 FD | 	call	#__system___string_cmp
06a30     00 FA 0D F2 | 	cmp	result1, #0 wz
06a34     DC 00 90 AD |  if_e	jmp	#LR__0553
06a38     24 01 00 FF 
06a3c     9A 14 06 F6 | 	mov	arg02, ##@LR__4266
06a40     1D 13 02 F6 | 	mov	arg01, local15
06a44     34 E8 B0 FD | 	call	#__system___string_cmp
06a48     00 FA 0D F2 | 	cmp	result1, #0 wz
06a4c     D0 00 90 AD |  if_e	jmp	#LR__0554
06a50     24 01 00 FF 
06a54     A1 14 06 F6 | 	mov	arg02, ##@LR__4267
06a58     1D 13 02 F6 | 	mov	arg01, local15
06a5c     1C E8 B0 FD | 	call	#__system___string_cmp
06a60     00 FA 0D F2 | 	cmp	result1, #0 wz
06a64     C4 00 90 AD |  if_e	jmp	#LR__0555
06a68     24 01 00 FF 
06a6c     A6 14 06 F6 | 	mov	arg02, ##@LR__4268
06a70     1D 13 02 F6 | 	mov	arg01, local15
06a74     04 E8 B0 FD | 	call	#__system___string_cmp
06a78     00 FA 0D F2 | 	cmp	result1, #0 wz
06a7c     B8 00 90 AD |  if_e	jmp	#LR__0556
06a80     24 01 00 FF 
06a84     AC 14 06 F6 | 	mov	arg02, ##@LR__4269
06a88     1D 13 02 F6 | 	mov	arg01, local15
06a8c     EC E7 B0 FD | 	call	#__system___string_cmp
06a90     00 FA 0D F2 | 	cmp	result1, #0 wz
06a94     AC 00 90 AD |  if_e	jmp	#LR__0557
06a98     24 01 00 FF 
06a9c     B2 14 06 F6 | 	mov	arg02, ##@LR__4270
06aa0     1D 13 02 F6 | 	mov	arg01, local15
06aa4     D4 E7 B0 FD | 	call	#__system___string_cmp
06aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
06aac     A0 00 90 AD |  if_e	jmp	#LR__0558
06ab0     24 01 00 FF 
06ab4     B9 14 06 F6 | 	mov	arg02, ##@LR__4271
06ab8     1D 13 02 F6 | 	mov	arg01, local15
06abc     BC E7 B0 FD | 	call	#__system___string_cmp
06ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
06ac4     94 00 90 AD |  if_e	jmp	#LR__0559
06ac8     24 01 00 FF 
06acc     C0 14 06 F6 | 	mov	arg02, ##@LR__4272
06ad0     1D 13 02 F6 | 	mov	arg01, local15
06ad4     A4 E7 B0 FD | 	call	#__system___string_cmp
06ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
06adc     88 00 90 AD |  if_e	jmp	#LR__0560
06ae0     24 01 00 FF 
06ae4     C7 14 06 F6 | 	mov	arg02, ##@LR__4273
06ae8     1D 13 02 F6 | 	mov	arg01, local15
06aec     8C E7 B0 FD | 	call	#__system___string_cmp
06af0     00 FA 0D F2 | 	cmp	result1, #0 wz
06af4     7C 00 90 AD |  if_e	jmp	#LR__0561
06af8     84 00 90 FD | 	jmp	#LR__0562
06afc                 | LR__0551
06afc     01 37 06 F6 | 	mov	local13, #257
06b00     01 38 06 F6 | 	mov	local14, #1
06b04     98 00 90 FD | 	jmp	#LR__0564
06b08                 | LR__0552
06b08     02 37 06 F6 | 	mov	local13, #258
06b0c     01 38 06 F6 | 	mov	local14, #1
06b10     8C 00 90 FD | 	jmp	#LR__0564
06b14                 | LR__0553
06b14     03 37 06 F6 | 	mov	local13, #259
06b18     02 38 06 F6 | 	mov	local14, #2
06b1c     80 00 90 FD | 	jmp	#LR__0564
06b20                 | LR__0554
06b20     04 37 06 F6 | 	mov	local13, #260
06b24     02 38 06 F6 | 	mov	local14, #2
06b28     74 00 90 FD | 	jmp	#LR__0564
06b2c                 | LR__0555
06b2c     05 37 06 F6 | 	mov	local13, #261
06b30     04 38 06 F6 | 	mov	local14, #4
06b34     68 00 90 FD | 	jmp	#LR__0564
06b38                 | LR__0556
06b38     06 37 06 F6 | 	mov	local13, #262
06b3c     04 38 06 F6 | 	mov	local14, #4
06b40     5C 00 90 FD | 	jmp	#LR__0564
06b44                 | LR__0557
06b44     07 37 06 F6 | 	mov	local13, #263
06b48     08 38 06 F6 | 	mov	local14, #8
06b4c     50 00 90 FD | 	jmp	#LR__0564
06b50                 | LR__0558
06b50     08 37 06 F6 | 	mov	local13, #264
06b54     08 38 06 F6 | 	mov	local14, #8
06b58     44 00 90 FD | 	jmp	#LR__0564
06b5c                 | LR__0559
06b5c     09 37 06 F6 | 	mov	local13, #265
06b60     04 38 06 F6 | 	mov	local14, #4
06b64     38 00 90 FD | 	jmp	#LR__0564
06b68                 | LR__0560
06b68     0A 37 06 F6 | 	mov	local13, #266
06b6c     08 38 06 F6 | 	mov	local14, #8
06b70     2C 00 90 FD | 	jmp	#LR__0564
06b74                 | LR__0561
06b74     0B 37 06 F6 | 	mov	local13, #267
06b78     04 38 06 F6 | 	mov	local14, #4
06b7c     20 00 90 FD | 	jmp	#LR__0564
06b80                 | LR__0562
06b80     2F 12 06 F6 | 	mov	arg01, #47
06b84     D8 B1 B0 FD | 	call	#_printerror
06b88     2F FA 05 F6 | 	mov	result1, #47
06b8c     04 02 90 FD | 	jmp	#LR__0565
06b90                 | LR__0563
06b90     2E 12 06 F6 | 	mov	arg01, #46
06b94     C8 B1 B0 FD | 	call	#_printerror
06b98                 | '   printerror(46): return 46
06b98     2E FA 05 F6 | 	mov	result1, #46
06b9c     F4 01 90 FD | 	jmp	#LR__0565
06ba0                 | LR__0564
06ba0                 | ' print dims(0),dims(1),dims(2),arraytype
06ba0     00 12 06 F6 | 	mov	arg01, #0
06ba4     60 3C B1 FD | 	call	#__system___getiolock_0334
06ba8     FD 12 02 F6 | 	mov	arg01, result1
06bac     A4 E6 B0 FD | 	call	#__system___lockmem
06bb0     00 12 06 F6 | 	mov	arg01, #0
06bb4     0F 15 02 F6 | 	mov	arg02, local01
06bb8     00 16 06 F6 | 	mov	arg03, #0
06bbc     0A 18 06 F6 | 	mov	arg04, #10
06bc0     08 F4 B0 FD | 	call	#__system___basic_print_unsigned
06bc4     00 12 06 F6 | 	mov	arg01, #0
06bc8     09 14 06 F6 | 	mov	arg02, #9
06bcc     00 16 06 F6 | 	mov	arg03, #0
06bd0     1C F3 B0 FD | 	call	#__system___basic_print_char
06bd4     10 15 02 F6 | 	mov	arg02, local02
06bd8     00 12 06 F6 | 	mov	arg01, #0
06bdc     00 16 06 F6 | 	mov	arg03, #0
06be0     0A 18 06 F6 | 	mov	arg04, #10
06be4     E4 F3 B0 FD | 	call	#__system___basic_print_unsigned
06be8     00 12 06 F6 | 	mov	arg01, #0
06bec     09 14 06 F6 | 	mov	arg02, #9
06bf0     00 16 06 F6 | 	mov	arg03, #0
06bf4     F8 F2 B0 FD | 	call	#__system___basic_print_char
06bf8     11 15 02 F6 | 	mov	arg02, local03
06bfc     00 12 06 F6 | 	mov	arg01, #0
06c00     00 16 06 F6 | 	mov	arg03, #0
06c04     0A 18 06 F6 | 	mov	arg04, #10
06c08     C0 F3 B0 FD | 	call	#__system___basic_print_unsigned
06c0c     00 12 06 F6 | 	mov	arg01, #0
06c10     09 14 06 F6 | 	mov	arg02, #9
06c14     00 16 06 F6 | 	mov	arg03, #0
06c18     D4 F2 B0 FD | 	call	#__system___basic_print_char
06c1c     00 12 06 F6 | 	mov	arg01, #0
06c20     1B 15 02 F6 | 	mov	arg02, local13
06c24     00 16 06 F6 | 	mov	arg03, #0
06c28     0A 18 06 F6 | 	mov	arg04, #10
06c2c     9C F3 B0 FD | 	call	#__system___basic_print_unsigned
06c30     00 12 06 F6 | 	mov	arg01, #0
06c34     0A 14 06 F6 | 	mov	arg02, #10
06c38     00 16 06 F6 | 	mov	arg03, #0
06c3c     B0 F2 B0 FD | 	call	#__system___basic_print_char
06c40     00 12 06 F6 | 	mov	arg01, #0
06c44     C0 3B B1 FD | 	call	#__system___getiolock_0334
06c48     0F 39 02 FD | 	qmul	local14, local01
06c4c     FD 00 68 FC | 	wrlong	#0, result1
06c50     18 28 62 FD | 	getqx	local06
06c54     10 29 02 FD | 	qmul	local06, local02
06c58     18 3A 62 FD | 	getqx	local15
06c5c     11 3B 02 FD | 	qmul	local15, local03
06c60     52 00 00 FF 
06c64     3C E4 05 F1 | 	add	objptr, ##42044
06c68     F2 3C 02 FB | 	rdlong	local16, objptr
06c6c     1B 15 02 F6 | 	mov	arg02, local13
06c70     01 16 06 F6 | 	mov	arg03, #1
06c74     00 18 06 F6 | 	mov	arg04, #0
06c78                 | '     return fill(addr, pattern, count, listPtr, 4)
06c78     04 1A 06 F6 | 	mov	arg05, #4
06c7c     18 3A 62 FD | 	getqx	local15
06c80     1D 3D 82 F1 | 	sub	local16, local15
06c84     10 3C 86 F1 | 	sub	local16, #16
06c88     F2 3C 62 FC | 	wrlong	local16, objptr
06c8c     1E 13 02 F6 | 	mov	arg01, local16
06c90     46 00 00 FF 
06c94     7C E5 85 F1 | 	sub	objptr, ##36220
06c98     04 DC B0 FD | 	call	#_psram_spin2_fill
06c9c     1E 13 02 F6 | 	mov	arg01, local16
06ca0     02 12 06 F1 | 	add	arg01, #2
06ca4     1C 15 02 F6 | 	mov	arg02, local14
06ca8     01 16 06 F6 | 	mov	arg03, #1
06cac     00 18 06 F6 | 	mov	arg04, #0
06cb0                 | '     return fill(addr, pattern, count, listPtr, 1)
06cb0     01 1A 06 F6 | 	mov	arg05, #1
06cb4     E8 DB B0 FD | 	call	#_psram_spin2_fill
06cb8     1E 13 02 F6 | 	mov	arg01, local16
06cbc     04 12 06 F1 | 	add	arg01, #4
06cc0     0F 15 02 F6 | 	mov	arg02, local01
06cc4     01 16 06 F6 | 	mov	arg03, #1
06cc8     00 18 06 F6 | 	mov	arg04, #0
06ccc                 | '     return fill(addr, pattern, count, listPtr, 4)
06ccc     04 1A 06 F6 | 	mov	arg05, #4
06cd0     CC DB B0 FD | 	call	#_psram_spin2_fill
06cd4     1E 13 02 F6 | 	mov	arg01, local16
06cd8     08 12 06 F1 | 	add	arg01, #8
06cdc     10 15 02 F6 | 	mov	arg02, local02
06ce0     01 16 06 F6 | 	mov	arg03, #1
06ce4     00 18 06 F6 | 	mov	arg04, #0
06ce8                 | '     return fill(addr, pattern, count, listPtr, 4)
06ce8     04 1A 06 F6 | 	mov	arg05, #4
06cec     B0 DB B0 FD | 	call	#_psram_spin2_fill
06cf0     1E 13 02 F6 | 	mov	arg01, local16
06cf4     0C 12 06 F1 | 	add	arg01, #12
06cf8     11 15 02 F6 | 	mov	arg02, local03
06cfc     01 16 06 F6 | 	mov	arg03, #1
06d00     00 18 06 F6 | 	mov	arg04, #0
06d04                 | '     return fill(addr, pattern, count, listPtr, 4)
06d04     04 1A 06 F6 | 	mov	arg05, #4
06d08     94 DB B0 FD | 	call	#_psram_spin2_fill
06d0c     20 00 00 FF 
06d10     0C E5 05 F1 | 	add	objptr, ##16652
06d14     F2 3A 02 FB | 	rdlong	local15, objptr
06d18     04 3A 66 F0 | 	shl	local15, #4
06d1c     20 00 00 FF 
06d20     00 E4 85 F1 | 	sub	objptr, ##16384
06d24     F2 3A 02 F1 | 	add	local15, objptr
06d28     1D 25 62 FC | 	wrlong	local04, local15
06d2c     20 00 00 FF 
06d30     00 E4 05 F1 | 	add	objptr, ##16384
06d34     F2 3A 02 FB | 	rdlong	local15, objptr
06d38     04 3A 66 F0 | 	shl	local15, #4
06d3c     20 00 00 FF 
06d40     00 E4 85 F1 | 	sub	objptr, ##16384
06d44     F2 3A 02 F1 | 	add	local15, objptr
06d48     04 3A 06 F1 | 	add	local15, #4
06d4c     1D 3D 62 FC | 	wrlong	local16, local15
06d50     20 00 00 FF 
06d54     00 E4 05 F1 | 	add	objptr, ##16384
06d58     F2 3C 02 FB | 	rdlong	local16, objptr
06d5c     04 3C 66 F0 | 	shl	local16, #4
06d60     20 00 00 FF 
06d64     00 E4 85 F1 | 	sub	objptr, ##16384
06d68     F2 3C 02 F1 | 	add	local16, objptr
06d6c     0C 3C 06 F1 | 	add	local16, #12
06d70     1E 37 62 FC | 	wrlong	local13, local16
06d74     20 00 00 FF 
06d78     00 E4 05 F1 | 	add	objptr, ##16384
06d7c     F2 28 02 FB | 	rdlong	local06, objptr
06d80     01 28 06 F1 | 	add	local06, #1
06d84     F2 28 62 FC | 	wrlong	local06, objptr
06d88     2B 00 00 FF 
06d8c     CC E5 85 F1 | 	sub	objptr, ##22476
06d90                 | ' 
06d90                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
06d90                 | ' arrayptr=memtop-arraysize-16
06d90                 | ' memtop=arrayptr
06d90                 | ' 
06d90                 | ' pslpoke arrayptr,arraytype
06d90                 | ' pspoke arrayptr+2,esize
06d90                 | ' pslpoke arrayptr+4,dims(0)
06d90                 | ' pslpoke arrayptr+8,dims(1)
06d90                 | ' pslpoke arrayptr+12,dims(2)
06d90                 | ' 
06d90                 | ' variables(varnum).name=varname2$
06d90                 | ' variables(varnum).value.uresult=arrayptr
06d90                 | ' variables(varnum).vartype=arraytype
06d90                 | ' varnum+=1
06d90                 | ' 
06d90                 | ' return 0
06d90     00 FA 05 F6 | 	mov	result1, #0
06d94                 | LR__0565
06d94     A7 F0 03 F6 | 	mov	ptra, fp
06d98     B2 00 A0 FD | 	call	#popregs_
06d9c                 | _compile_dim_ret
06d9c     2D 00 64 FD | 	ret
06da0                 | 
06da0                 | ' 
06da0                 | ' 
06da0                 | ' function compile_for() as ulong  
06da0                 | _compile_for
06da0     07 4A 05 F6 | 	mov	COUNT_, #7
06da4     A8 00 A0 FD | 	call	#pushregs_
06da8                 | ' 
06da8                 | ' 
06da8                 | ' 
06da8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
06da8     2E 00 00 FF 
06dac     08 E4 05 F1 | 	add	objptr, ##23560
06db0     F2 14 02 FB | 	rdlong	arg02, objptr
06db4     01 14 06 F1 | 	add	arg02, #1
06db8     03 14 66 F0 | 	shl	arg02, #3
06dbc     02 00 00 FF 
06dc0     38 E4 85 F1 | 	sub	objptr, ##1080
06dc4     F2 14 02 F1 | 	add	arg02, objptr
06dc8     0A 13 02 FB | 	rdlong	arg01, arg02
06dcc     2B 00 00 FF 
06dd0     D0 E5 85 F1 | 	sub	objptr, ##22480
06dd4                 | ' 
06dd4                 | ' select case s
06dd4     22 01 00 FF 
06dd8     AE 15 06 F6 | 	mov	arg02, ##@LR__4144
06ddc     9C E4 B0 FD | 	call	#__system___string_cmp
06de0     00 FA 0D F2 | 	cmp	result1, #0 wz
06de4     1B FA 05 A6 |  if_e	mov	result1, #27
06de8     00 FA 05 56 |  if_ne	mov	result1, #0
06dec     00 FA 0D F2 | 	cmp	result1, #0 wz
06df0     0C 00 90 AD |  if_e	jmp	#LR__0570
06df4     05 12 06 F6 | 	mov	arg01, #5
06df8     50 E1 BF FD | 	call	#_compile_immediate_assign
06dfc     10 00 90 FD | 	jmp	#LR__0571
06e00                 | LR__0570
06e00     20 12 06 F6 | 	mov	arg01, #32
06e04     C0 E5 BF FD | 	call	#_compile_error
06e08     20 FA 05 F6 | 	mov	result1, #32
06e0c     AC 02 90 FD | 	jmp	#LR__0576
06e10                 | LR__0571
06e10     41 00 00 FF 
06e14     40 E4 05 F1 | 	add	objptr, ##33344
06e18     F2 12 02 FB | 	rdlong	arg01, objptr
06e1c     09 25 02 F6 | 	mov	local04, arg01
06e20     01 24 86 F1 | 	sub	local04, #1
06e24     12 15 02 F6 | 	mov	arg02, local04
06e28     01 14 66 F0 | 	shl	arg02, #1
06e2c     12 15 02 F1 | 	add	arg02, local04
06e30     02 14 66 F0 | 	shl	arg02, #2
06e34     03 00 00 FF 
06e38     00 E4 85 F1 | 	sub	objptr, ##1536
06e3c     F2 14 02 F1 | 	add	arg02, objptr
06e40     0A 1F 02 FB | 	rdlong	local01, arg02
06e44     04 14 06 F1 | 	add	arg02, #4
06e48     0A 27 02 FB | 	rdlong	local05, arg02
06e4c     01 12 86 F1 | 	sub	arg01, #1
06e50     09 29 02 F6 | 	mov	local06, arg01
06e54     01 28 66 F0 | 	shl	local06, #1
06e58     09 29 02 F1 | 	add	local06, arg01
06e5c     02 28 66 F0 | 	shl	local06, #2
06e60     F2 28 02 F1 | 	add	local06, objptr
06e64     08 28 06 F1 | 	add	local06, #8
06e68     14 13 02 FB | 	rdlong	arg01, local06
06e6c     13 21 02 F6 | 	mov	local02, local05
06e70     09 23 02 F6 | 	mov	local03, arg01
06e74                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
06e74                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
06e74     17 22 0E F2 | 	cmp	local03, #23 wz
06e78     3E 00 00 FF 
06e7c     40 E4 85 F1 | 	sub	objptr, ##31808
06e80     10 00 90 AD |  if_e	jmp	#LR__0572
06e84     22 12 06 F6 | 	mov	arg01, #34
06e88     3C E5 BF FD | 	call	#_compile_error
06e8c     22 FA 05 F6 | 	mov	result1, #34
06e90     28 02 90 FD | 	jmp	#LR__0576
06e94                 | LR__0572
06e94     0F 2B 02 F6 | 	mov	local07, local01
06e98                 | ' varnum=t1.result.uresult
06e98                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
06e98     2E 00 00 FF 
06e9c     08 E4 05 F1 | 	add	objptr, ##23560
06ea0     F2 24 02 FB | 	rdlong	local04, objptr
06ea4     03 24 66 F0 | 	shl	local04, #3
06ea8     02 00 00 FF 
06eac     38 E4 85 F1 | 	sub	objptr, ##1080
06eb0     F2 24 02 F1 | 	add	local04, objptr
06eb4     12 13 02 FB | 	rdlong	arg01, local04
06eb8     24 01 00 FF 
06ebc     CE 14 06 F6 | 	mov	arg02, ##@LR__4274
06ec0     2B 00 00 FF 
06ec4     D0 E5 85 F1 | 	sub	objptr, ##22480
06ec8     B0 E3 B0 FD | 	call	#__system___string_cmp
06ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
06ed0     10 00 90 AD |  if_e	jmp	#LR__0573
06ed4     21 12 06 F6 | 	mov	arg01, #33
06ed8     EC E4 BF FD | 	call	#_compile_error
06edc     21 FA 05 F6 | 	mov	result1, #33
06ee0     D8 01 90 FD | 	jmp	#LR__0576
06ee4                 | LR__0573
06ee4     2E 00 00 FF 
06ee8     08 E4 05 F1 | 	add	objptr, ##23560
06eec     F2 28 02 FB | 	rdlong	local06, objptr
06ef0     01 28 06 F1 | 	add	local06, #1
06ef4     F2 28 62 FC | 	wrlong	local06, objptr
06ef8     2E 00 00 FF 
06efc     08 E4 85 F1 | 	sub	objptr, ##23560
06f00     98 0B B0 FD | 	call	#_expr
06f04                 | ' ct+=1
06f04                 | ' expr()  ' there is "to" value pushed on the stack
06f04                 | ' if lparts(ct).part$="step" then 
06f04     2E 00 00 FF 
06f08     08 E4 05 F1 | 	add	objptr, ##23560
06f0c     F2 24 02 FB | 	rdlong	local04, objptr
06f10     03 24 66 F0 | 	shl	local04, #3
06f14     02 00 00 FF 
06f18     38 E4 85 F1 | 	sub	objptr, ##1080
06f1c     F2 24 02 F1 | 	add	local04, objptr
06f20     12 13 02 FB | 	rdlong	arg01, local04
06f24     24 01 00 FF 
06f28     D1 14 06 F6 | 	mov	arg02, ##@LR__4275
06f2c     2B 00 00 FF 
06f30     D0 E5 85 F1 | 	sub	objptr, ##22480
06f34     44 E3 B0 FD | 	call	#__system___string_cmp
06f38     00 FA 0D F2 | 	cmp	result1, #0 wz
06f3c     24 00 90 5D |  if_ne	jmp	#LR__0574
06f40     2E 00 00 FF 
06f44     08 E4 05 F1 | 	add	objptr, ##23560
06f48     F2 28 02 FB | 	rdlong	local06, objptr
06f4c     01 28 06 F1 | 	add	local06, #1
06f50     F2 28 62 FC | 	wrlong	local06, objptr
06f54     2E 00 00 FF 
06f58     08 E4 85 F1 | 	sub	objptr, ##23560
06f5c     3C 0B B0 FD | 	call	#_expr
06f60     78 00 90 FD | 	jmp	#LR__0575
06f64                 | LR__0574
06f64     41 00 00 FF 
06f68     40 E4 05 F1 | 	add	objptr, ##33344
06f6c     F2 28 02 FB | 	rdlong	local06, objptr
06f70     14 27 02 F6 | 	mov	local05, local06
06f74     01 26 66 F0 | 	shl	local05, #1
06f78     14 27 02 F1 | 	add	local05, local06
06f7c     02 26 66 F0 | 	shl	local05, #2
06f80     03 00 00 FF 
06f84     00 E4 85 F1 | 	sub	objptr, ##1536
06f88     F2 26 02 F1 | 	add	local05, objptr
06f8c     08 26 06 F1 | 	add	local05, #8
06f90     13 39 68 FC | 	wrlong	#28, local05
06f94     03 00 00 FF 
06f98     00 E4 05 F1 | 	add	objptr, ##1536
06f9c     F2 28 02 FB | 	rdlong	local06, objptr
06fa0     14 27 02 F6 | 	mov	local05, local06
06fa4     01 26 66 F0 | 	shl	local05, #1
06fa8     14 27 02 F1 | 	add	local05, local06
06fac     02 26 66 F0 | 	shl	local05, #2
06fb0     03 00 00 FF 
06fb4     00 E4 85 F1 | 	sub	objptr, ##1536
06fb8     F2 26 02 F1 | 	add	local05, objptr
06fbc     13 03 68 FC | 	wrlong	#1, local05
06fc0     03 00 00 FF 
06fc4     00 E4 05 F1 | 	add	objptr, ##1536
06fc8     F2 28 02 FB | 	rdlong	local06, objptr
06fcc     01 28 06 F1 | 	add	local06, #1
06fd0     F2 28 62 FC | 	wrlong	local06, objptr
06fd4     41 00 00 FF 
06fd8     40 E4 85 F1 | 	sub	objptr, ##33344
06fdc                 | LR__0575
06fdc     41 00 00 FF 
06fe0     40 E4 05 F1 | 	add	objptr, ##33344
06fe4     F2 28 02 FB | 	rdlong	local06, objptr
06fe8     14 27 02 F6 | 	mov	local05, local06
06fec     01 26 66 F0 | 	shl	local05, #1
06ff0     14 27 02 F1 | 	add	local05, local06
06ff4     02 26 66 F0 | 	shl	local05, #2
06ff8     03 00 00 FF 
06ffc     00 E4 85 F1 | 	sub	objptr, ##1536
07000     F2 26 02 F1 | 	add	local05, objptr
07004     08 26 06 F1 | 	add	local05, #8
07008     13 39 68 FC | 	wrlong	#28, local05
0700c     03 00 00 FF 
07010     00 E4 05 F1 | 	add	objptr, ##1536
07014     F2 28 02 FB | 	rdlong	local06, objptr
07018     14 27 02 F6 | 	mov	local05, local06
0701c     01 26 66 F0 | 	shl	local05, #1
07020     14 27 02 F1 | 	add	local05, local06
07024     02 26 66 F0 | 	shl	local05, #2
07028     03 00 00 FF 
0702c     00 E4 85 F1 | 	sub	objptr, ##1536
07030     F2 26 02 F1 | 	add	local05, objptr
07034     13 2B 62 FC | 	wrlong	local07, local05
07038     03 00 00 FF 
0703c     00 E4 05 F1 | 	add	objptr, ##1536
07040     F2 2A 02 FB | 	rdlong	local07, objptr
07044     01 2A 06 F1 | 	add	local07, #1
07048     F2 2A 62 FC | 	wrlong	local07, objptr
0704c     15 29 02 F6 | 	mov	local06, local07
07050     01 28 66 F0 | 	shl	local06, #1
07054     15 29 02 F1 | 	add	local06, local07
07058     02 28 66 F0 | 	shl	local06, #2
0705c     03 00 00 FF 
07060     00 E4 85 F1 | 	sub	objptr, ##1536
07064     F2 28 02 F1 | 	add	local06, objptr
07068     08 28 06 F1 | 	add	local06, #8
0706c     14 95 68 FC | 	wrlong	#74, local06
07070     03 00 00 FF 
07074     00 E4 05 F1 | 	add	objptr, ##1536
07078     F2 2A 02 FB | 	rdlong	local07, objptr
0707c     15 29 02 F6 | 	mov	local06, local07
07080     01 28 66 F0 | 	shl	local06, #1
07084     15 29 02 F1 | 	add	local06, local07
07088     02 28 66 F0 | 	shl	local06, #2
0708c     03 00 00 FF 
07090     00 E4 85 F1 | 	sub	objptr, ##1536
07094     F2 28 02 F1 | 	add	local06, objptr
07098     14 01 68 FC | 	wrlong	#0, local06
0709c     03 00 00 FF 
070a0     00 E4 05 F1 | 	add	objptr, ##1536
070a4     F2 2A 02 FB | 	rdlong	local07, objptr
070a8     01 2A 06 F1 | 	add	local07, #1
070ac     F2 2A 62 FC | 	wrlong	local07, objptr
070b0     41 00 00 FF 
070b4     40 E4 85 F1 | 	sub	objptr, ##33344
070b8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
070b8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
070b8                 | ' 
070b8                 | ' 
070b8                 | ' return 0
070b8     00 FA 05 F6 | 	mov	result1, #0
070bc                 | LR__0576
070bc     A7 F0 03 F6 | 	mov	ptra, fp
070c0     B2 00 A0 FD | 	call	#popregs_
070c4                 | _compile_for_ret
070c4     2D 00 64 FD | 	ret
070c8                 | 
070c8                 | ' 
070c8                 | ' 
070c8                 | ' sub do_for()
070c8                 | _do_for
070c8     05 4A 05 F6 | 	mov	COUNT_, #5
070cc     A8 00 A0 FD | 	call	#pushregs_
070d0     50 00 00 FF 
070d4     9C E5 05 F1 | 	add	objptr, ##41372
070d8     F2 24 02 FB | 	rdlong	local04, objptr
070dc     01 24 06 F1 | 	add	local04, #1
070e0     F2 24 62 FC | 	wrlong	local04, objptr
070e4     50 00 00 FF 
070e8     9C E5 85 F1 | 	sub	objptr, ##41372
070ec     48 1D B0 FD | 	call	#_pop
070f0     FD 1E 02 F6 | 	mov	local01, result1
070f4     FE 20 02 F6 | 	mov	local02, result2
070f8     FF 22 02 F6 | 	mov	local03, result3
070fc     50 00 00 FF 
07100     9C E5 05 F1 | 	add	objptr, ##41372
07104     F2 24 02 FB | 	rdlong	local04, objptr
07108     12 27 02 F6 | 	mov	local05, local04
0710c     02 26 66 F0 | 	shl	local05, #2
07110     12 27 02 F1 | 	add	local05, local04
07114     02 26 66 F0 | 	shl	local05, #2
07118     07 00 00 FF 
0711c     40 E5 85 F1 | 	sub	objptr, ##3904
07120     F2 26 02 F1 | 	add	local05, objptr
07124     08 26 06 F1 | 	add	local05, #8
07128     13 1F 62 FC | 	wrlong	local01, local05
0712c     49 00 00 FF 
07130     5C E4 85 F1 | 	sub	objptr, ##37468
07134     00 1D B0 FD | 	call	#_pop
07138     FD 1E 02 F6 | 	mov	local01, result1
0713c     FE 20 02 F6 | 	mov	local02, result2
07140     FF 22 02 F6 | 	mov	local03, result3
07144     50 00 00 FF 
07148     9C E5 05 F1 | 	add	objptr, ##41372
0714c     F2 24 02 FB | 	rdlong	local04, objptr
07150     12 27 02 F6 | 	mov	local05, local04
07154     02 26 66 F0 | 	shl	local05, #2
07158     12 27 02 F1 | 	add	local05, local04
0715c     02 26 66 F0 | 	shl	local05, #2
07160     07 00 00 FF 
07164     40 E5 85 F1 | 	sub	objptr, ##3904
07168     F2 26 02 F1 | 	add	local05, objptr
0716c     0C 26 06 F1 | 	add	local05, #12
07170     13 1F 62 FC | 	wrlong	local01, local05
07174     49 00 00 FF 
07178     5C E4 85 F1 | 	sub	objptr, ##37468
0717c     B8 1C B0 FD | 	call	#_pop
07180     FD 1E 02 F6 | 	mov	local01, result1
07184     FE 20 02 F6 | 	mov	local02, result2
07188     FF 22 02 F6 | 	mov	local03, result3
0718c     50 00 00 FF 
07190     9C E5 05 F1 | 	add	objptr, ##41372
07194     F2 24 02 FB | 	rdlong	local04, objptr
07198     12 27 02 F6 | 	mov	local05, local04
0719c     02 26 66 F0 | 	shl	local05, #2
071a0     12 27 02 F1 | 	add	local05, local04
071a4     02 26 66 F0 | 	shl	local05, #2
071a8     07 00 00 FF 
071ac     40 E5 85 F1 | 	sub	objptr, ##3904
071b0     F2 26 02 F1 | 	add	local05, objptr
071b4     10 26 06 F1 | 	add	local05, #16
071b8     13 1F 62 FC | 	wrlong	local01, local05
071bc                 | ' fortop+=1
071bc                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
071bc                 | ' 'if i> maxfor then printerror(36) : return
071bc                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
071bc                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
071bc                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
071bc                 | ' if compiledline(lineptr_e).result_type=token_end then
071bc     08 00 00 FF 
071c0     18 E4 85 F1 | 	sub	objptr, ##4120
071c4     F2 1E 02 FB | 	rdlong	local01, objptr
071c8     0F 27 02 F6 | 	mov	local05, local01
071cc     01 26 66 F0 | 	shl	local05, #1
071d0     0F 27 02 F1 | 	add	local05, local01
071d4     02 26 66 F0 | 	shl	local05, #2
071d8     03 00 00 FF 
071dc     04 E4 85 F1 | 	sub	objptr, ##1540
071e0     F2 26 02 F1 | 	add	local05, objptr
071e4     08 26 06 F1 | 	add	local05, #8
071e8     13 27 02 FB | 	rdlong	local05, local05
071ec     FE 27 0E F2 | 	cmp	local05, #510 wz
071f0     3E 00 00 FF 
071f4     40 E4 85 F1 | 	sub	objptr, ##31808
071f8     70 00 90 5D |  if_ne	jmp	#LR__0580
071fc     50 00 00 FF 
07200     9C E5 05 F1 | 	add	objptr, ##41372
07204     F2 1E 02 FB | 	rdlong	local01, objptr
07208     0F 27 02 F6 | 	mov	local05, local01
0720c     02 26 66 F0 | 	shl	local05, #2
07210     0F 27 02 F1 | 	add	local05, local01
07214     02 26 66 F0 | 	shl	local05, #2
07218     07 00 00 FF 
0721c     40 E5 85 F1 | 	sub	objptr, ##3904
07220     F2 26 02 F1 | 	add	local05, objptr
07224     07 00 00 FF 
07228     18 E5 05 F1 | 	add	objptr, ##3864
0722c     F2 1E 02 FB | 	rdlong	local01, objptr
07230     13 1F 62 FC | 	wrlong	local01, local05
07234     28 E4 05 F1 | 	add	objptr, #40
07238     F2 1E 02 FB | 	rdlong	local01, objptr
0723c     0F 27 02 F6 | 	mov	local05, local01
07240     02 26 66 F0 | 	shl	local05, #2
07244     0F 27 02 F1 | 	add	local05, local01
07248     02 26 66 F0 | 	shl	local05, #2
0724c     07 00 00 FF 
07250     40 E5 85 F1 | 	sub	objptr, ##3904
07254     F2 26 02 F1 | 	add	local05, objptr
07258     04 26 06 F1 | 	add	local05, #4
0725c     13 01 68 FC | 	wrlong	#0, local05
07260     49 00 00 FF 
07264     5C E4 85 F1 | 	sub	objptr, ##37468
07268     7C 00 90 FD | 	jmp	#LR__0581
0726c                 | LR__0580
0726c     50 00 00 FF 
07270     9C E5 05 F1 | 	add	objptr, ##41372
07274     F2 1E 02 FB | 	rdlong	local01, objptr
07278     0F 27 02 F6 | 	mov	local05, local01
0727c     02 26 66 F0 | 	shl	local05, #2
07280     0F 27 02 F1 | 	add	local05, local01
07284     02 26 66 F0 | 	shl	local05, #2
07288     07 00 00 FF 
0728c     40 E5 85 F1 | 	sub	objptr, ##3904
07290     F2 26 02 F1 | 	add	local05, objptr
07294     07 00 00 FF 
07298     20 E5 05 F1 | 	add	objptr, ##3872
0729c     F2 1E 02 FB | 	rdlong	local01, objptr
072a0     13 1F 62 FC | 	wrlong	local01, local05
072a4     20 E4 05 F1 | 	add	objptr, #32
072a8     F2 1E 02 FB | 	rdlong	local01, objptr
072ac     0F 27 02 F6 | 	mov	local05, local01
072b0     02 26 66 F0 | 	shl	local05, #2
072b4     0F 27 02 F1 | 	add	local05, local01
072b8     02 26 66 F0 | 	shl	local05, #2
072bc     07 00 00 FF 
072c0     40 E5 85 F1 | 	sub	objptr, ##3904
072c4     F2 26 02 F1 | 	add	local05, objptr
072c8     08 00 00 FF 
072cc     18 E4 85 F1 | 	sub	objptr, ##4120
072d0     F2 1E 02 FB | 	rdlong	local01, objptr
072d4     41 00 00 FF 
072d8     44 E4 85 F1 | 	sub	objptr, ##33348
072dc     01 1E 06 F1 | 	add	local01, #1
072e0     04 26 06 F1 | 	add	local05, #4
072e4     13 1F 62 FC | 	wrlong	local01, local05
072e8                 | LR__0581
072e8     A7 F0 03 F6 | 	mov	ptra, fp
072ec     B2 00 A0 FD | 	call	#popregs_
072f0                 | _do_for_ret
072f0     2D 00 64 FD | 	ret
072f4                 | 
072f4                 | ' 
072f4                 | ' ' now do_next todo
072f4                 | ' 
072f4                 | ' sub do_next()
072f4                 | _do_next
072f4     04 4A 05 F6 | 	mov	COUNT_, #4
072f8     A8 00 A0 FD | 	call	#pushregs_
072fc     38 1B B0 FD | 	call	#_pop
07300     FD 1E 02 F6 | 	mov	local01, result1
07304     FE 20 02 F6 | 	mov	local02, result2
07308     FF 22 02 F6 | 	mov	local03, result3
0730c                 | ' 
0730c                 | ' t1=pop() :varnum=t1.result.uresult
0730c                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
0730c     50 00 00 FF 
07310     9C E5 05 F1 | 	add	objptr, ##41372
07314     F2 12 02 FB | 	rdlong	arg01, objptr
07318     09 25 02 F6 | 	mov	local04, arg01
0731c     02 24 66 F0 | 	shl	local04, #2
07320     09 25 02 F1 | 	add	local04, arg01
07324     02 24 66 F0 | 	shl	local04, #2
07328     07 00 00 FF 
0732c     40 E5 85 F1 | 	sub	objptr, ##3904
07330     F2 24 02 F1 | 	add	local04, objptr
07334     08 24 06 F1 | 	add	local04, #8
07338     12 25 02 FB | 	rdlong	local04, local04
0733c     0F 25 0A F2 | 	cmp	local04, local01 wz
07340     49 00 00 FF 
07344     5C E4 85 F1 | 	sub	objptr, ##37468
07348     0C 00 90 AD |  if_e	jmp	#LR__0590
0734c     25 12 06 F6 | 	mov	arg01, #37
07350     0C AA B0 FD | 	call	#_printerror
07354     28 02 90 FD | 	jmp	#LR__0594
07358                 | LR__0590
07358     50 00 00 FF 
0735c     9C E5 05 F1 | 	add	objptr, ##41372
07360     F2 12 02 FB | 	rdlong	arg01, objptr
07364     09 25 02 F6 | 	mov	local04, arg01
07368     02 24 66 F0 | 	shl	local04, #2
0736c     09 25 02 F1 | 	add	local04, arg01
07370     02 24 66 F0 | 	shl	local04, #2
07374     07 00 00 FF 
07378     40 E5 85 F1 | 	sub	objptr, ##3904
0737c     F2 24 02 F1 | 	add	local04, objptr
07380     0C 24 06 F1 | 	add	local04, #12
07384     12 25 02 FB | 	rdlong	local04, local04
07388     0F 13 02 F6 | 	mov	arg01, local01
0738c     04 12 66 F0 | 	shl	arg01, #4
07390     3D 00 00 FF 
07394     90 E4 85 F1 | 	sub	objptr, ##31376
07398     F2 12 02 F1 | 	add	arg01, objptr
0739c     0F FF 01 F6 | 	mov	result3, local01
073a0     04 FE 65 F0 | 	shl	result3, #4
073a4     F2 FE 01 F1 | 	add	result3, objptr
073a8     04 FE 05 F1 | 	add	result3, #4
073ac     FF FE 01 FB | 	rdlong	result3, result3
073b0     12 FF 01 F1 | 	add	result3, local04
073b4     04 12 06 F1 | 	add	arg01, #4
073b8     09 FF 61 FC | 	wrlong	result3, arg01
073bc                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
073bc                 | ' if fortable(fortop).stepval>0 then
073bc     44 00 00 FF 
073c0     D0 E5 05 F1 | 	add	objptr, ##35280
073c4     F2 12 02 FB | 	rdlong	arg01, objptr
073c8     09 25 02 F6 | 	mov	local04, arg01
073cc     02 24 66 F0 | 	shl	local04, #2
073d0     09 25 02 F1 | 	add	local04, arg01
073d4     02 24 66 F0 | 	shl	local04, #2
073d8     07 00 00 FF 
073dc     40 E5 85 F1 | 	sub	objptr, ##3904
073e0     F2 24 02 F1 | 	add	local04, objptr
073e4     0C 24 06 F1 | 	add	local04, #12
073e8     12 25 02 FB | 	rdlong	local04, local04
073ec     01 24 56 F2 | 	cmps	local04, #1 wc
073f0     49 00 00 FF 
073f4     5C E4 85 F1 | 	sub	objptr, ##37468
073f8     78 00 90 CD |  if_b	jmp	#LR__0591
073fc                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
073fc     04 1E 66 F0 | 	shl	local01, #4
07400     0B 00 00 FF 
07404     CC E5 05 F1 | 	add	objptr, ##6092
07408     F2 1E 02 F1 | 	add	local01, objptr
0740c     44 00 00 FF 
07410     D0 E5 05 F1 | 	add	objptr, ##35280
07414     F2 24 02 FB | 	rdlong	local04, objptr
07418     12 13 02 F6 | 	mov	arg01, local04
0741c     02 12 66 F0 | 	shl	arg01, #2
07420     12 13 02 F1 | 	add	arg01, local04
07424     02 12 66 F0 | 	shl	arg01, #2
07428     07 00 00 FF 
0742c     40 E5 85 F1 | 	sub	objptr, ##3904
07430     F2 12 02 F1 | 	add	arg01, objptr
07434     04 1E 06 F1 | 	add	local01, #4
07438     0F 25 02 FB | 	rdlong	local04, local01
0743c     10 12 06 F1 | 	add	arg01, #16
07440     09 13 02 FB | 	rdlong	arg01, arg01
07444     09 25 5A F2 | 	cmps	local04, arg01 wcz
07448     49 00 00 FF 
0744c     5C E4 85 F1 | 	sub	objptr, ##37468
07450     9C 00 90 ED |  if_be	jmp	#LR__0593
07454     50 00 00 FF 
07458     9C E5 05 F1 | 	add	objptr, ##41372
0745c     F2 24 02 FB | 	rdlong	local04, objptr
07460     01 24 86 F1 | 	sub	local04, #1
07464     F2 24 62 FC | 	wrlong	local04, objptr
07468     50 00 00 FF 
0746c     9C E5 85 F1 | 	sub	objptr, ##41372
07470     0C 01 90 FD | 	jmp	#LR__0594
07474                 | LR__0591
07474                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07474     0F 13 02 F6 | 	mov	arg01, local01
07478     04 12 66 F0 | 	shl	arg01, #4
0747c     0B 00 00 FF 
07480     CC E5 05 F1 | 	add	objptr, ##6092
07484     F2 12 02 F1 | 	add	arg01, objptr
07488     44 00 00 FF 
0748c     D0 E5 05 F1 | 	add	objptr, ##35280
07490     F2 24 02 FB | 	rdlong	local04, objptr
07494     12 1F 02 F6 | 	mov	local01, local04
07498     02 1E 66 F0 | 	shl	local01, #2
0749c     12 1F 02 F1 | 	add	local01, local04
074a0     02 1E 66 F0 | 	shl	local01, #2
074a4     07 00 00 FF 
074a8     40 E5 85 F1 | 	sub	objptr, ##3904
074ac     F2 1E 02 F1 | 	add	local01, objptr
074b0     04 12 06 F1 | 	add	arg01, #4
074b4     09 13 02 FB | 	rdlong	arg01, arg01
074b8     10 1E 06 F1 | 	add	local01, #16
074bc     0F 1F 02 FB | 	rdlong	local01, local01
074c0     0F 13 52 F2 | 	cmps	arg01, local01 wc
074c4     49 00 00 FF 
074c8     5C E4 85 F1 | 	sub	objptr, ##37468
074cc     20 00 90 3D |  if_ae	jmp	#LR__0592
074d0     50 00 00 FF 
074d4     9C E5 05 F1 | 	add	objptr, ##41372
074d8     F2 24 02 FB | 	rdlong	local04, objptr
074dc     01 24 86 F1 | 	sub	local04, #1
074e0     F2 24 62 FC | 	wrlong	local04, objptr
074e4     50 00 00 FF 
074e8     9C E5 85 F1 | 	sub	objptr, ##41372
074ec     90 00 90 FD | 	jmp	#LR__0594
074f0                 | LR__0592
074f0                 | LR__0593
074f0     50 00 00 FF 
074f4     9C E5 05 F1 | 	add	objptr, ##41372
074f8     F2 1E 02 FB | 	rdlong	local01, objptr
074fc     0F 25 02 F6 | 	mov	local04, local01
07500     02 24 66 F0 | 	shl	local04, #2
07504     0F 25 02 F1 | 	add	local04, local01
07508     02 24 66 F0 | 	shl	local04, #2
0750c     07 00 00 FF 
07510     40 E5 85 F1 | 	sub	objptr, ##3904
07514     F2 24 02 F1 | 	add	local04, objptr
07518     12 25 02 FB | 	rdlong	local04, local04
0751c     07 00 00 FF 
07520     18 E5 05 F1 | 	add	objptr, ##3864
07524     F2 24 62 FC | 	wrlong	local04, objptr
07528     28 E4 05 F1 | 	add	objptr, #40
0752c     F2 1E 02 FB | 	rdlong	local01, objptr
07530     0F 25 02 F6 | 	mov	local04, local01
07534     02 24 66 F0 | 	shl	local04, #2
07538     0F 25 02 F1 | 	add	local04, local01
0753c     02 24 66 F0 | 	shl	local04, #2
07540     07 00 00 FF 
07544     40 E5 85 F1 | 	sub	objptr, ##3904
07548     F2 24 02 F1 | 	add	local04, objptr
0754c     04 24 06 F1 | 	add	local04, #4
07550     12 25 02 FB | 	rdlong	local04, local04
07554     07 00 00 FF 
07558     1C E5 05 F1 | 	add	objptr, ##3868
0755c     F2 24 62 FC | 	wrlong	local04, objptr
07560     0F 00 00 FF 
07564     38 E5 85 F1 | 	sub	objptr, ##7992
07568     F2 24 02 FB | 	rdlong	local04, objptr
0756c     01 24 86 F1 | 	sub	local04, #1
07570     04 E4 05 F1 | 	add	objptr, #4
07574     F2 24 62 FC | 	wrlong	local04, objptr
07578     41 00 00 FF 
0757c     44 E4 85 F1 | 	sub	objptr, ##33348
07580                 | LR__0594
07580     A7 F0 03 F6 | 	mov	ptra, fp
07584     B2 00 A0 FD | 	call	#popregs_
07588                 | _do_next_ret
07588     2D 00 64 FD | 	ret
0758c                 | 
0758c                 | ' 
0758c                 | ' 
0758c                 | ' function compile_next() as ulong
0758c                 | _compile_next
0758c     04 4A 05 F6 | 	mov	COUNT_, #4
07590     A8 00 A0 FD | 	call	#pushregs_
07594     2E 00 00 FF 
07598     08 E4 05 F1 | 	add	objptr, ##23560
0759c     F2 12 02 FB | 	rdlong	arg01, objptr
075a0     03 12 66 F0 | 	shl	arg01, #3
075a4     02 00 00 FF 
075a8     38 E4 85 F1 | 	sub	objptr, ##1080
075ac     F2 12 02 F1 | 	add	arg01, objptr
075b0     09 1F 02 FB | 	rdlong	local01, arg01
075b4                 | ' 
075b4                 | ' varname$=lparts(ct).part$ 
075b4                 | ' 'suffix$=right$(varname$,1)
075b4                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
075b4                 | ' if varnum=0 then compile_error(35)  : return 35
075b4     04 E4 85 F1 | 	sub	objptr, #4
075b8     F2 14 0A FB | 	rdlong	arg02, objptr wz
075bc     2B 00 00 FF 
075c0     CC E5 85 F1 | 	sub	objptr, ##22476
075c4     10 00 90 5D |  if_ne	jmp	#LR__0600
075c8     23 12 06 F6 | 	mov	arg01, #35
075cc     F8 DD BF FD | 	call	#_compile_error
075d0     23 FA 05 F6 | 	mov	result1, #35
075d4     58 01 90 FD | 	jmp	#LR__0604
075d8                 | LR__0600
075d8     01 20 66 F6 | 	neg	local02, #1
075dc                 | ' j=-1
075dc                 | ' for i=0 to varnum-1
075dc     00 22 06 F6 | 	mov	local03, #0
075e0     2B 00 00 FF 
075e4     CC E5 05 F1 | 	add	objptr, ##22476
075e8     F2 24 02 FB | 	rdlong	local04, objptr
075ec     2B 00 00 FF 
075f0     CC E5 85 F1 | 	sub	objptr, ##22476
075f4                 | LR__0601
075f4     12 23 12 F2 | 	cmp	local03, local04 wc
075f8     38 00 90 3D |  if_ae	jmp	#LR__0602
075fc                 | '   if variables(i).name=varname$ then j=i : exit
075fc     11 15 02 F6 | 	mov	arg02, local03
07600     04 14 66 F0 | 	shl	arg02, #4
07604     0B 00 00 FF 
07608     CC E5 05 F1 | 	add	objptr, ##6092
0760c     F2 14 02 F1 | 	add	arg02, objptr
07610     0A 13 02 FB | 	rdlong	arg01, arg02
07614     0F 15 02 F6 | 	mov	arg02, local01
07618     0B 00 00 FF 
0761c     CC E5 85 F1 | 	sub	objptr, ##6092
07620     58 DC B0 FD | 	call	#__system___string_cmp
07624     00 FA 0D F2 | 	cmp	result1, #0 wz
07628     11 21 02 A6 |  if_e	mov	local02, local03
0762c     01 22 06 51 |  if_ne	add	local03, #1
07630     C0 FF 9F 5D |  if_ne	jmp	#LR__0601
07634                 | LR__0602
07634                 | ' if j=-1 then compile_error(35) : return 35
07634     FF FF 7F FF 
07638     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0763c     10 00 90 5D |  if_ne	jmp	#LR__0603
07640     23 12 06 F6 | 	mov	arg01, #35
07644     80 DD BF FD | 	call	#_compile_error
07648     23 FA 05 F6 | 	mov	result1, #35
0764c     E0 00 90 FD | 	jmp	#LR__0604
07650                 | LR__0603
07650     41 00 00 FF 
07654     40 E4 05 F1 | 	add	objptr, ##33344
07658     F2 24 02 FB | 	rdlong	local04, objptr
0765c     12 23 02 F6 | 	mov	local03, local04
07660     01 22 66 F0 | 	shl	local03, #1
07664     12 23 02 F1 | 	add	local03, local04
07668     02 22 66 F0 | 	shl	local03, #2
0766c     03 00 00 FF 
07670     00 E4 85 F1 | 	sub	objptr, ##1536
07674     F2 22 02 F1 | 	add	local03, objptr
07678     08 22 06 F1 | 	add	local03, #8
0767c     11 39 68 FC | 	wrlong	#28, local03
07680     03 00 00 FF 
07684     00 E4 05 F1 | 	add	objptr, ##1536
07688     F2 24 02 FB | 	rdlong	local04, objptr
0768c     12 23 02 F6 | 	mov	local03, local04
07690     01 22 66 F0 | 	shl	local03, #1
07694     12 23 02 F1 | 	add	local03, local04
07698     02 22 66 F0 | 	shl	local03, #2
0769c     03 00 00 FF 
076a0     00 E4 85 F1 | 	sub	objptr, ##1536
076a4     F2 22 02 F1 | 	add	local03, objptr
076a8     11 21 62 FC | 	wrlong	local02, local03
076ac     03 00 00 FF 
076b0     00 E4 05 F1 | 	add	objptr, ##1536
076b4     F2 24 02 FB | 	rdlong	local04, objptr
076b8     01 24 06 F1 | 	add	local04, #1
076bc     F2 24 62 FC | 	wrlong	local04, objptr
076c0     12 23 02 F6 | 	mov	local03, local04
076c4     01 22 66 F0 | 	shl	local03, #1
076c8     12 23 02 F1 | 	add	local03, local04
076cc     02 22 66 F0 | 	shl	local03, #2
076d0     03 00 00 FF 
076d4     00 E4 85 F1 | 	sub	objptr, ##1536
076d8     F2 22 02 F1 | 	add	local03, objptr
076dc     08 22 06 F1 | 	add	local03, #8
076e0     11 97 68 FC | 	wrlong	#75, local03
076e4     03 00 00 FF 
076e8     00 E4 05 F1 | 	add	objptr, ##1536
076ec     F2 24 02 FB | 	rdlong	local04, objptr
076f0     12 23 02 F6 | 	mov	local03, local04
076f4     01 22 66 F0 | 	shl	local03, #1
076f8     12 23 02 F1 | 	add	local03, local04
076fc     02 22 66 F0 | 	shl	local03, #2
07700     03 00 00 FF 
07704     00 E4 85 F1 | 	sub	objptr, ##1536
07708     F2 22 02 F1 | 	add	local03, objptr
0770c     11 01 68 FC | 	wrlong	#0, local03
07710     03 00 00 FF 
07714     00 E4 05 F1 | 	add	objptr, ##1536
07718     F2 24 02 FB | 	rdlong	local04, objptr
0771c     01 24 06 F1 | 	add	local04, #1
07720     F2 24 62 FC | 	wrlong	local04, objptr
07724     41 00 00 FF 
07728     40 E4 85 F1 | 	sub	objptr, ##33344
0772c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0772c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0772c                 | ' return 0
0772c     00 FA 05 F6 | 	mov	result1, #0
07730                 | LR__0604
07730     A7 F0 03 F6 | 	mov	ptra, fp
07734     B2 00 A0 FD | 	call	#popregs_
07738                 | _compile_next_ret
07738     2D 00 64 FD | 	ret
0773c                 | 
0773c                 | ' 
0773c                 | ' 
0773c                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
0773c                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
0773c                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
0773c                 | ' 
0773c                 | ' 
0773c                 | ' function compile_goto( ) as ulong
0773c                 | _compile_goto
0773c     03 4A 05 F6 | 	mov	COUNT_, #3
07740     A8 00 A0 FD | 	call	#pushregs_
07744     28 F0 07 F1 | 	add	ptra, #40
07748                 | ' 
07748                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
07748     2E 00 00 FF 
0774c     08 E4 05 F1 | 	add	objptr, ##23560
07750     F2 16 02 FB | 	rdlong	arg03, objptr
07754     03 16 66 F0 | 	shl	arg03, #3
07758     02 00 00 FF 
0775c     38 E4 85 F1 | 	sub	objptr, ##1080
07760     F2 16 02 F1 | 	add	arg03, objptr
07764     04 16 06 F1 | 	add	arg03, #4
07768     0B 17 02 FB | 	rdlong	arg03, arg03
0776c     01 00 00 FF 
07770     00 16 0E F2 | 	cmp	arg03, ##512 wz
07774     2B 00 00 FF 
07778     D0 E5 85 F1 | 	sub	objptr, ##22480
0777c     CC 02 90 5D |  if_ne	jmp	#LR__0615
07780     2E 00 00 FF 
07784     08 E4 05 F1 | 	add	objptr, ##23560
07788     F2 16 02 FB | 	rdlong	arg03, objptr
0778c     01 16 06 F1 | 	add	arg03, #1
07790     03 16 66 F0 | 	shl	arg03, #3
07794     02 00 00 FF 
07798     38 E4 85 F1 | 	sub	objptr, ##1080
0779c     F2 16 02 F1 | 	add	arg03, objptr
077a0     04 16 06 F1 | 	add	arg03, #4
077a4     0B 17 02 FB | 	rdlong	arg03, arg03
077a8     FE 17 0E F2 | 	cmp	arg03, #510 wz
077ac     2B 00 00 FF 
077b0     D0 E5 85 F1 | 	sub	objptr, ##22480
077b4     94 02 90 5D |  if_ne	jmp	#LR__0615
077b8     2E 00 00 FF 
077bc     08 E4 05 F1 | 	add	objptr, ##23560
077c0     F2 16 02 FB | 	rdlong	arg03, objptr
077c4     03 16 66 F0 | 	shl	arg03, #3
077c8     02 00 00 FF 
077cc     38 E4 85 F1 | 	sub	objptr, ##1080
077d0     F2 16 02 F1 | 	add	arg03, objptr
077d4     0B 13 02 FB | 	rdlong	arg01, arg03
077d8     00 14 06 F6 | 	mov	arg02, #0
077dc     2B 00 00 FF 
077e0     D0 E5 85 F1 | 	sub	objptr, ##22480
077e4     F8 0A B1 FD | 	call	#__system____builtin_atoi
077e8     04 4E 05 F1 | 	add	fp, #4
077ec     A7 FA 61 FC | 	wrlong	result1, fp
077f0     41 00 00 FF 
077f4     40 E4 05 F1 | 	add	objptr, ##33344
077f8     F2 1E 02 FB | 	rdlong	local01, objptr
077fc     0F 21 02 F6 | 	mov	local02, local01
07800     01 20 66 F0 | 	shl	local02, #1
07804     0F 21 02 F1 | 	add	local02, local01
07808     02 20 66 F0 | 	shl	local02, #2
0780c     03 00 00 FF 
07810     00 E4 85 F1 | 	sub	objptr, ##1536
07814     F2 20 02 F1 | 	add	local02, objptr
07818     08 20 06 F1 | 	add	local02, #8
0781c     10 9D 68 FC | 	wrlong	#78, local02
07820     03 00 00 FF 
07824     08 E4 05 F1 | 	add	objptr, ##1544
07828     F2 22 02 FB | 	rdlong	local03, objptr
0782c     41 00 00 FF 
07830     48 E4 85 F1 | 	sub	objptr, ##33352
07834     04 4E 05 F1 | 	add	fp, #4
07838     A7 22 62 FC | 	wrlong	local03, fp
0783c     08 4E 85 F1 | 	sub	fp, #8
07840                 | ' 
07840                 | '   gotoline=val%(lparts(ct).part$) 
07840                 | '   compiledline(lineptr).result_type=token_fast_goto
07840                 | ' ' now find a pointer to goto
07840                 | '   gotoptr=programstart
07840                 | '   do
07840                 | LR__0610
07840     10 4E 05 F1 | 	add	fp, #16
07844     A7 12 02 F6 | 	mov	arg01, fp
07848     08 4E 85 F1 | 	sub	fp, #8
0784c     A7 14 02 FB | 	rdlong	arg02, fp
07850     08 4E 85 F1 | 	sub	fp, #8
07854     18 16 06 F6 | 	mov	arg03, #24
07858     0B 00 00 FF 
0785c     C0 E4 05 F1 | 	add	objptr, ##5824
07860     04 CF B0 FD | 	call	#_psram_spin2_read1
07864     0B 00 00 FF 
07868     C0 E4 85 F1 | 	sub	objptr, ##5824
0786c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0786c                 | '     if gotoheader(0)<>$FFFFFFFF then
0786c     10 4E 05 F1 | 	add	fp, #16
07870     A7 22 02 FB | 	rdlong	local03, fp
07874     10 4E 85 F1 | 	sub	fp, #16
07878     FF FF 7F FF 
0787c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
07880     24 00 90 AD |  if_e	jmp	#LR__0611
07884     08 4E 05 F1 | 	add	fp, #8
07888     A7 22 02 FB | 	rdlong	local03, fp
0788c     04 4E 05 F1 | 	add	fp, #4
07890     A7 22 62 FC | 	wrlong	local03, fp
07894     18 4E 05 F1 | 	add	fp, #24
07898     A7 22 02 FB | 	rdlong	local03, fp
0789c     1C 4E 85 F1 | 	sub	fp, #28
078a0     A7 22 62 FC | 	wrlong	local03, fp
078a4     08 4E 85 F1 | 	sub	fp, #8
078a8                 | LR__0611
078a8     24 4E 05 F1 | 	add	fp, #36
078ac     A7 22 02 FB | 	rdlong	local03, fp
078b0     24 4E 85 F1 | 	sub	fp, #36
078b4     FF FF 3F FF 
078b8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
078bc     10 4E 05 51 |  if_ne	add	fp, #16
078c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
078c4     10 4E 85 51 |  if_ne	sub	fp, #16
078c8     FF FF 7F 5F 
078cc     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
078d0     1C 00 90 AD |  if_e	jmp	#LR__0612
078d4     10 4E 05 F1 | 	add	fp, #16
078d8     A7 22 02 FB | 	rdlong	local03, fp
078dc     0C 4E 85 F1 | 	sub	fp, #12
078e0     A7 20 02 FB | 	rdlong	local02, fp
078e4     04 4E 85 F1 | 	sub	fp, #4
078e8     10 23 0A F2 | 	cmp	local03, local02 wz
078ec     50 FF 9F 5D |  if_ne	jmp	#LR__0610
078f0                 | LR__0612
078f0                 | '   if gotoheader(0)=gotoline then
078f0     10 4E 05 F1 | 	add	fp, #16
078f4     A7 22 02 FB | 	rdlong	local03, fp
078f8     0C 4E 85 F1 | 	sub	fp, #12
078fc     A7 1E 02 FB | 	rdlong	local01, fp
07900     04 4E 85 F1 | 	sub	fp, #4
07904     0F 23 0A F2 | 	cmp	local03, local01 wz
07908     7C 00 90 5D |  if_ne	jmp	#LR__0613
0790c     41 00 00 FF 
07910     40 E4 05 F1 | 	add	objptr, ##33344
07914     F2 1E 02 FB | 	rdlong	local01, objptr
07918     0F 21 02 F6 | 	mov	local02, local01
0791c     01 20 66 F0 | 	shl	local02, #1
07920     0F 21 02 F1 | 	add	local02, local01
07924     02 20 66 F0 | 	shl	local02, #2
07928     03 00 00 FF 
0792c     00 E4 85 F1 | 	sub	objptr, ##1536
07930     F2 20 02 F1 | 	add	local02, objptr
07934     0C 4E 05 F1 | 	add	fp, #12
07938     A7 22 02 FB | 	rdlong	local03, fp
0793c     10 23 62 FC | 	wrlong	local03, local02
07940     03 00 00 FF 
07944     00 E4 05 F1 | 	add	objptr, ##1536
07948     F2 1E 02 FB | 	rdlong	local01, objptr
0794c     0F 21 02 F6 | 	mov	local02, local01
07950     01 20 66 F0 | 	shl	local02, #1
07954     0F 21 02 F1 | 	add	local02, local01
07958     02 20 66 F0 | 	shl	local02, #2
0795c     03 00 00 FF 
07960     00 E4 85 F1 | 	sub	objptr, ##1536
07964     F2 20 02 F1 | 	add	local02, objptr
07968     08 4E 85 F1 | 	sub	fp, #8
0796c     A7 22 02 FB | 	rdlong	local03, fp
07970     04 4E 85 F1 | 	sub	fp, #4
07974     04 20 06 F1 | 	add	local02, #4
07978     10 23 62 FC | 	wrlong	local03, local02
0797c     3E 00 00 FF 
07980     40 E4 85 F1 | 	sub	objptr, ##31808
07984     A4 00 90 FD | 	jmp	#LR__0614
07988                 | LR__0613
07988     41 00 00 FF 
0798c     40 E4 05 F1 | 	add	objptr, ##33344
07990     F2 1E 02 FB | 	rdlong	local01, objptr
07994     0F 21 02 F6 | 	mov	local02, local01
07998     01 20 66 F0 | 	shl	local02, #1
0799c     0F 21 02 F1 | 	add	local02, local01
079a0     02 20 66 F0 | 	shl	local02, #2
079a4     03 00 00 FF 
079a8     00 E4 85 F1 | 	sub	objptr, ##1536
079ac     F2 20 02 F1 | 	add	local02, objptr
079b0     00 00 C0 FF 
079b4     10 01 68 FC | 	wrlong	##-2147483648, local02
079b8     03 00 00 FF 
079bc     00 E4 05 F1 | 	add	objptr, ##1536
079c0     F2 1E 02 FB | 	rdlong	local01, objptr
079c4     0F 21 02 F6 | 	mov	local02, local01
079c8     01 20 66 F0 | 	shl	local02, #1
079cc     0F 21 02 F1 | 	add	local02, local01
079d0     02 20 66 F0 | 	shl	local02, #2
079d4     03 00 00 FF 
079d8     00 E4 85 F1 | 	sub	objptr, ##1536
079dc     F2 20 02 F1 | 	add	local02, objptr
079e0     04 4E 05 F1 | 	add	fp, #4
079e4     A7 22 02 FB | 	rdlong	local03, fp
079e8     04 4E 85 F1 | 	sub	fp, #4
079ec     04 20 06 F1 | 	add	local02, #4
079f0     10 23 62 FC | 	wrlong	local03, local02
079f4     03 00 00 FF 
079f8     00 E4 05 F1 | 	add	objptr, ##1536
079fc     F2 1E 02 FB | 	rdlong	local01, objptr
07a00     0F 21 02 F6 | 	mov	local02, local01
07a04     01 20 66 F0 | 	shl	local02, #1
07a08     0F 21 02 F1 | 	add	local02, local01
07a0c     02 20 66 F0 | 	shl	local02, #2
07a10     03 00 00 FF 
07a14     00 E4 85 F1 | 	sub	objptr, ##1536
07a18     F2 20 02 F1 | 	add	local02, objptr
07a1c     08 20 06 F1 | 	add	local02, #8
07a20     10 A7 68 FC | 	wrlong	#83, local02
07a24     3E 00 00 FF 
07a28     40 E4 85 F1 | 	sub	objptr, ##31808
07a2c                 | LR__0614
07a2c     41 00 00 FF 
07a30     40 E4 05 F1 | 	add	objptr, ##33344
07a34     F2 22 02 FB | 	rdlong	local03, objptr
07a38     01 22 06 F1 | 	add	local03, #1
07a3c     F2 22 62 FC | 	wrlong	local03, objptr
07a40     41 00 00 FF 
07a44     40 E4 85 F1 | 	sub	objptr, ##33344
07a48     40 00 90 FD | 	jmp	#LR__0616
07a4c                 | LR__0615
07a4c                 | '    print "We have a slow goto, todo  "
07a4c     00 12 06 F6 | 	mov	arg01, #0
07a50     B4 2D B1 FD | 	call	#__system___getiolock_0334
07a54     FD 12 02 F6 | 	mov	arg01, result1
07a58     F8 D7 B0 FD | 	call	#__system___lockmem
07a5c     24 01 00 FF 
07a60     D6 14 06 F6 | 	mov	arg02, ##@LR__4276
07a64     00 12 06 F6 | 	mov	arg01, #0
07a68     00 16 06 F6 | 	mov	arg03, #0
07a6c     D8 E4 B0 FD | 	call	#__system___basic_print_string
07a70     00 12 06 F6 | 	mov	arg01, #0
07a74     0A 14 06 F6 | 	mov	arg02, #10
07a78     00 16 06 F6 | 	mov	arg03, #0
07a7c     70 E4 B0 FD | 	call	#__system___basic_print_char
07a80     00 12 06 F6 | 	mov	arg01, #0
07a84     80 2D B1 FD | 	call	#__system___getiolock_0334
07a88     FD 00 68 FC | 	wrlong	#0, result1
07a8c                 | LR__0616
07a8c                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
07a8c                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
07a8c                 | ' return 0
07a8c     00 FA 05 F6 | 	mov	result1, #0
07a90     A7 F0 03 F6 | 	mov	ptra, fp
07a94     B2 00 A0 FD | 	call	#popregs_
07a98                 | _compile_goto_ret
07a98     2D 00 64 FD | 	ret
07a9c                 | 
07a9c                 | ' 
07a9c                 | ' 
07a9c                 | ' 
07a9c                 | ' 
07a9c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07a9c                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
07a9c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07a9c                 | ' 
07a9c                 | ' 
07a9c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07a9c                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
07a9c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07a9c                 | ' 
07a9c                 | ' 
07a9c                 | ' function expr() as integer 
07a9c                 | _expr
07a9c     07 4A 05 F6 | 	mov	COUNT_, #7
07aa0     A8 00 A0 FD | 	call	#pushregs_
07aa4                 | _expr_enter
07aa4     2E 00 00 FF 
07aa8     08 E4 05 F1 | 	add	objptr, ##23560
07aac     F2 24 02 FB | 	rdlong	local04, objptr
07ab0     03 24 66 F0 | 	shl	local04, #3
07ab4     02 00 00 FF 
07ab8     38 E4 85 F1 | 	sub	objptr, ##1080
07abc     F2 24 02 F1 | 	add	local04, objptr
07ac0     04 24 06 F1 | 	add	local04, #4
07ac4     12 27 02 FB | 	rdlong	local05, local04
07ac8                 | ' 
07ac8                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
07ac8     FE 27 0E F2 | 	cmp	local05, #510 wz
07acc     2B 00 00 FF 
07ad0     D0 E5 85 F1 | 	sub	objptr, ##22480
07ad4     C4 00 90 5D |  if_ne	jmp	#LR__0620
07ad8     1D 1E 06 F6 | 	mov	local01, #29
07adc     FF 22 06 F6 | 	mov	local03, #255
07ae0     0F 29 02 F6 | 	mov	local06, local01
07ae4     10 2B 02 F6 | 	mov	local07, local02
07ae8     11 1F 02 F6 | 	mov	local01, local03
07aec     41 00 00 FF 
07af0     40 E4 05 F1 | 	add	objptr, ##33344
07af4     F2 26 02 FB | 	rdlong	local05, objptr
07af8     13 25 02 F6 | 	mov	local04, local05
07afc     01 24 66 F0 | 	shl	local04, #1
07b00     13 25 02 F1 | 	add	local04, local05
07b04     02 24 66 F0 | 	shl	local04, #2
07b08     03 00 00 FF 
07b0c     00 E4 85 F1 | 	sub	objptr, ##1536
07b10     F2 24 02 F1 | 	add	local04, objptr
07b14     12 29 62 FC | 	wrlong	local06, local04
07b18     03 00 00 FF 
07b1c     00 E4 05 F1 | 	add	objptr, ##1536
07b20     F2 28 02 FB | 	rdlong	local06, objptr
07b24     14 27 02 F6 | 	mov	local05, local06
07b28     01 26 66 F0 | 	shl	local05, #1
07b2c     14 27 02 F1 | 	add	local05, local06
07b30     02 26 66 F0 | 	shl	local05, #2
07b34     03 00 00 FF 
07b38     00 E4 85 F1 | 	sub	objptr, ##1536
07b3c     F2 26 02 F1 | 	add	local05, objptr
07b40     04 26 06 F1 | 	add	local05, #4
07b44     13 2B 62 FC | 	wrlong	local07, local05
07b48     03 00 00 FF 
07b4c     00 E4 05 F1 | 	add	objptr, ##1536
07b50     F2 2A 02 FB | 	rdlong	local07, objptr
07b54     15 29 02 F6 | 	mov	local06, local07
07b58     01 28 66 F0 | 	shl	local06, #1
07b5c     15 29 02 F1 | 	add	local06, local07
07b60     02 28 66 F0 | 	shl	local06, #2
07b64     03 00 00 FF 
07b68     00 E4 85 F1 | 	sub	objptr, ##1536
07b6c     F2 28 02 F1 | 	add	local06, objptr
07b70     08 28 06 F1 | 	add	local06, #8
07b74     14 1F 62 FC | 	wrlong	local01, local06
07b78     03 00 00 FF 
07b7c     00 E4 05 F1 | 	add	objptr, ##1536
07b80     F2 28 02 FB | 	rdlong	local06, objptr
07b84     01 28 06 F1 | 	add	local06, #1
07b88     F2 28 62 FC | 	wrlong	local06, objptr
07b8c     41 00 00 FF 
07b90     40 E4 85 F1 | 	sub	objptr, ##33344
07b94     1D FA 05 F6 | 	mov	result1, #29
07b98     54 01 90 FD | 	jmp	#LR__0623
07b9c                 | LR__0620
07b9c     00 1E 06 F6 | 	mov	local01, #0
07ba0     58 01 B0 FD | 	call	#_addsub
07ba4     2E 00 00 FF 
07ba8     08 E4 05 F1 | 	add	objptr, ##23560
07bac     F2 24 02 FB | 	rdlong	local04, objptr
07bb0     03 24 66 F0 | 	shl	local04, #3
07bb4     02 00 00 FF 
07bb8     38 E4 85 F1 | 	sub	objptr, ##1080
07bbc     F2 24 02 F1 | 	add	local04, objptr
07bc0     04 24 06 F1 | 	add	local04, #4
07bc4     12 27 02 FB | 	rdlong	local05, local04
07bc8                 | ' t3.result.uresult=0
07bc8                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07bc8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07bc8                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
07bc8     2B 00 00 FF 
07bcc     D0 E5 85 F1 | 	sub	objptr, ##22480
07bd0                 | LR__0621
07bd0     1B 26 0E F2 | 	cmp	local05, #27 wz
07bd4     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07bd8     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
07bdc     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07be0     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
07be4     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07be8     00 01 90 5D |  if_ne	jmp	#LR__0622
07bec     2E 00 00 FF 
07bf0     08 E4 05 F1 | 	add	objptr, ##23560
07bf4     F2 28 02 FB | 	rdlong	local06, objptr
07bf8     01 28 06 F1 | 	add	local06, #1
07bfc     F2 28 62 FC | 	wrlong	local06, objptr
07c00     2E 00 00 FF 
07c04     08 E4 85 F1 | 	sub	objptr, ##23560
07c08     F0 00 B0 FD | 	call	#_addsub
07c0c     13 23 02 F6 | 	mov	local03, local05
07c10     0F 29 02 F6 | 	mov	local06, local01
07c14     10 2B 02 F6 | 	mov	local07, local02
07c18     11 27 02 F6 | 	mov	local05, local03
07c1c     41 00 00 FF 
07c20     40 E4 05 F1 | 	add	objptr, ##33344
07c24     F2 24 02 FB | 	rdlong	local04, objptr
07c28     12 FB 01 F6 | 	mov	result1, local04
07c2c     01 FA 65 F0 | 	shl	result1, #1
07c30     12 FB 01 F1 | 	add	result1, local04
07c34     02 FA 65 F0 | 	shl	result1, #2
07c38     03 00 00 FF 
07c3c     00 E4 85 F1 | 	sub	objptr, ##1536
07c40     F2 FA 01 F1 | 	add	result1, objptr
07c44     FD 28 62 FC | 	wrlong	local06, result1
07c48     03 00 00 FF 
07c4c     00 E4 05 F1 | 	add	objptr, ##1536
07c50     F2 28 02 FB | 	rdlong	local06, objptr
07c54     14 25 02 F6 | 	mov	local04, local06
07c58     01 24 66 F0 | 	shl	local04, #1
07c5c     14 25 02 F1 | 	add	local04, local06
07c60     02 24 66 F0 | 	shl	local04, #2
07c64     03 00 00 FF 
07c68     00 E4 85 F1 | 	sub	objptr, ##1536
07c6c     F2 24 02 F1 | 	add	local04, objptr
07c70     04 24 06 F1 | 	add	local04, #4
07c74     12 2B 62 FC | 	wrlong	local07, local04
07c78     03 00 00 FF 
07c7c     00 E4 05 F1 | 	add	objptr, ##1536
07c80     F2 2A 02 FB | 	rdlong	local07, objptr
07c84     15 29 02 F6 | 	mov	local06, local07
07c88     01 28 66 F0 | 	shl	local06, #1
07c8c     15 29 02 F1 | 	add	local06, local07
07c90     02 28 66 F0 | 	shl	local06, #2
07c94     03 00 00 FF 
07c98     00 E4 85 F1 | 	sub	objptr, ##1536
07c9c     F2 28 02 F1 | 	add	local06, objptr
07ca0     08 28 06 F1 | 	add	local06, #8
07ca4     14 27 62 FC | 	wrlong	local05, local06
07ca8     03 00 00 FF 
07cac     00 E4 05 F1 | 	add	objptr, ##1536
07cb0     F2 28 02 FB | 	rdlong	local06, objptr
07cb4     01 28 06 F1 | 	add	local06, #1
07cb8     F2 28 62 FC | 	wrlong	local06, objptr
07cbc     13 00 00 FF 
07cc0     38 E4 85 F1 | 	sub	objptr, ##9784
07cc4     F2 24 02 FB | 	rdlong	local04, objptr
07cc8     03 24 66 F0 | 	shl	local04, #3
07ccc     02 00 00 FF 
07cd0     38 E4 85 F1 | 	sub	objptr, ##1080
07cd4     F2 24 02 F1 | 	add	local04, objptr
07cd8     04 24 06 F1 | 	add	local04, #4
07cdc     12 27 02 FB | 	rdlong	local05, local04
07ce0     2B 00 00 FF 
07ce4     D0 E5 85 F1 | 	sub	objptr, ##22480
07ce8     E4 FE 9F FD | 	jmp	#LR__0621
07cec                 | LR__0622
07cec                 | ' return 0  
07cec     00 FA 05 F6 | 	mov	result1, #0
07cf0                 | LR__0623
07cf0     A7 F0 03 F6 | 	mov	ptra, fp
07cf4     B2 00 A0 FD | 	call	#popregs_
07cf8                 | _expr_ret
07cf8     2D 00 64 FD | 	ret
07cfc                 | 
07cfc                 | ' 
07cfc                 | ' 
07cfc                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07cfc                 | ' 
07cfc                 | ' function addsub() as integer 
07cfc                 | _addsub
07cfc     07 4A 05 F6 | 	mov	COUNT_, #7
07d00     A8 00 A0 FD | 	call	#pushregs_
07d04                 | _addsub_enter
07d04     00 1E 06 F6 | 	mov	local01, #0
07d08     50 01 B0 FD | 	call	#_muldiv
07d0c     2E 00 00 FF 
07d10     08 E4 05 F1 | 	add	objptr, ##23560
07d14     F2 24 02 FB | 	rdlong	local04, objptr
07d18     03 24 66 F0 | 	shl	local04, #3
07d1c     02 00 00 FF 
07d20     38 E4 85 F1 | 	sub	objptr, ##1080
07d24     F2 24 02 F1 | 	add	local04, objptr
07d28     04 24 06 F1 | 	add	local04, #4
07d2c     12 27 02 FB | 	rdlong	local05, local04
07d30                 | ' t3.result.uresult=0
07d30                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07d30                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07d30                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07d30     2B 00 00 FF 
07d34     D0 E5 85 F1 | 	sub	objptr, ##22480
07d38                 | LR__0630
07d38     01 26 0E F2 | 	cmp	local05, #1 wz
07d3c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07d40     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07d44     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07d48     00 01 90 5D |  if_ne	jmp	#LR__0631
07d4c     2E 00 00 FF 
07d50     08 E4 05 F1 | 	add	objptr, ##23560
07d54     F2 24 02 FB | 	rdlong	local04, objptr
07d58     01 24 06 F1 | 	add	local04, #1
07d5c     F2 24 62 FC | 	wrlong	local04, objptr
07d60     2E 00 00 FF 
07d64     08 E4 85 F1 | 	sub	objptr, ##23560
07d68     F0 00 B0 FD | 	call	#_muldiv
07d6c     13 23 02 F6 | 	mov	local03, local05
07d70     0F 29 02 F6 | 	mov	local06, local01
07d74     10 2B 02 F6 | 	mov	local07, local02
07d78     11 27 02 F6 | 	mov	local05, local03
07d7c     41 00 00 FF 
07d80     40 E4 05 F1 | 	add	objptr, ##33344
07d84     F2 24 02 FB | 	rdlong	local04, objptr
07d88     12 FB 01 F6 | 	mov	result1, local04
07d8c     01 FA 65 F0 | 	shl	result1, #1
07d90     12 FB 01 F1 | 	add	result1, local04
07d94     02 FA 65 F0 | 	shl	result1, #2
07d98     03 00 00 FF 
07d9c     00 E4 85 F1 | 	sub	objptr, ##1536
07da0     F2 FA 01 F1 | 	add	result1, objptr
07da4     FD 28 62 FC | 	wrlong	local06, result1
07da8     03 00 00 FF 
07dac     00 E4 05 F1 | 	add	objptr, ##1536
07db0     F2 28 02 FB | 	rdlong	local06, objptr
07db4     14 25 02 F6 | 	mov	local04, local06
07db8     01 24 66 F0 | 	shl	local04, #1
07dbc     14 25 02 F1 | 	add	local04, local06
07dc0     02 24 66 F0 | 	shl	local04, #2
07dc4     03 00 00 FF 
07dc8     00 E4 85 F1 | 	sub	objptr, ##1536
07dcc     F2 24 02 F1 | 	add	local04, objptr
07dd0     04 24 06 F1 | 	add	local04, #4
07dd4     12 2B 62 FC | 	wrlong	local07, local04
07dd8     03 00 00 FF 
07ddc     00 E4 05 F1 | 	add	objptr, ##1536
07de0     F2 2A 02 FB | 	rdlong	local07, objptr
07de4     15 29 02 F6 | 	mov	local06, local07
07de8     01 28 66 F0 | 	shl	local06, #1
07dec     15 29 02 F1 | 	add	local06, local07
07df0     02 28 66 F0 | 	shl	local06, #2
07df4     03 00 00 FF 
07df8     00 E4 85 F1 | 	sub	objptr, ##1536
07dfc     F2 28 02 F1 | 	add	local06, objptr
07e00     08 28 06 F1 | 	add	local06, #8
07e04     14 27 62 FC | 	wrlong	local05, local06
07e08     03 00 00 FF 
07e0c     00 E4 05 F1 | 	add	objptr, ##1536
07e10     F2 28 02 FB | 	rdlong	local06, objptr
07e14     01 28 06 F1 | 	add	local06, #1
07e18     F2 28 62 FC | 	wrlong	local06, objptr
07e1c     13 00 00 FF 
07e20     38 E4 85 F1 | 	sub	objptr, ##9784
07e24     F2 24 02 FB | 	rdlong	local04, objptr
07e28     03 24 66 F0 | 	shl	local04, #3
07e2c     02 00 00 FF 
07e30     38 E4 85 F1 | 	sub	objptr, ##1080
07e34     F2 24 02 F1 | 	add	local04, objptr
07e38     04 24 06 F1 | 	add	local04, #4
07e3c     12 27 02 FB | 	rdlong	local05, local04
07e40     2B 00 00 FF 
07e44     D0 E5 85 F1 | 	sub	objptr, ##22480
07e48     EC FE 9F FD | 	jmp	#LR__0630
07e4c                 | LR__0631
07e4c                 | '   return 0
07e4c     00 FA 05 F6 | 	mov	result1, #0
07e50     A7 F0 03 F6 | 	mov	ptra, fp
07e54     B2 00 A0 FD | 	call	#popregs_
07e58                 | _addsub_ret
07e58     2D 00 64 FD | 	ret
07e5c                 | 
07e5c                 | ' 
07e5c                 | ' sub muldiv()
07e5c                 | _muldiv
07e5c     08 4A 05 F6 | 	mov	COUNT_, #8
07e60     A8 00 A0 FD | 	call	#pushregs_
07e64                 | _muldiv_enter
07e64     00 1E 06 F6 | 	mov	local01, #0
07e68     58 01 B0 FD | 	call	#_getvalue
07e6c     2E 00 00 FF 
07e70     08 E4 05 F1 | 	add	objptr, ##23560
07e74     F2 24 02 FB | 	rdlong	local04, objptr
07e78     03 24 66 F0 | 	shl	local04, #3
07e7c     02 00 00 FF 
07e80     38 E4 85 F1 | 	sub	objptr, ##1080
07e84     F2 24 02 F1 | 	add	local04, objptr
07e88     04 24 06 F1 | 	add	local04, #4
07e8c     12 27 02 FB | 	rdlong	local05, local04
07e90                 | ' t3.result.uresult=0
07e90                 | ' getvalue()    
07e90                 | ' op = lparts(ct).token
07e90                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
07e90     2B 00 00 FF 
07e94     D0 E5 85 F1 | 	sub	objptr, ##22480
07e98                 | LR__0640
07e98     05 26 0E F2 | 	cmp	local05, #5 wz
07e9c     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
07ea0     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
07ea4     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
07ea8     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
07eac     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
07eb0     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
07eb4     00 01 90 5D |  if_ne	jmp	#LR__0641
07eb8     2E 00 00 FF 
07ebc     08 E4 05 F1 | 	add	objptr, ##23560
07ec0     F2 24 02 FB | 	rdlong	local04, objptr
07ec4     01 24 06 F1 | 	add	local04, #1
07ec8     F2 24 62 FC | 	wrlong	local04, objptr
07ecc     2E 00 00 FF 
07ed0     08 E4 85 F1 | 	sub	objptr, ##23560
07ed4     EC 00 B0 FD | 	call	#_getvalue
07ed8     13 23 02 F6 | 	mov	local03, local05
07edc     0F 29 02 F6 | 	mov	local06, local01
07ee0     10 2B 02 F6 | 	mov	local07, local02
07ee4     11 27 02 F6 | 	mov	local05, local03
07ee8     41 00 00 FF 
07eec     40 E4 05 F1 | 	add	objptr, ##33344
07ef0     F2 24 02 FB | 	rdlong	local04, objptr
07ef4     12 2D 02 F6 | 	mov	local08, local04
07ef8     01 2C 66 F0 | 	shl	local08, #1
07efc     12 2D 02 F1 | 	add	local08, local04
07f00     02 2C 66 F0 | 	shl	local08, #2
07f04     03 00 00 FF 
07f08     00 E4 85 F1 | 	sub	objptr, ##1536
07f0c     F2 2C 02 F1 | 	add	local08, objptr
07f10     16 29 62 FC | 	wrlong	local06, local08
07f14     03 00 00 FF 
07f18     00 E4 05 F1 | 	add	objptr, ##1536
07f1c     F2 2C 02 FB | 	rdlong	local08, objptr
07f20     16 29 02 F6 | 	mov	local06, local08
07f24     01 28 66 F0 | 	shl	local06, #1
07f28     16 29 02 F1 | 	add	local06, local08
07f2c     02 28 66 F0 | 	shl	local06, #2
07f30     03 00 00 FF 
07f34     00 E4 85 F1 | 	sub	objptr, ##1536
07f38     F2 28 02 F1 | 	add	local06, objptr
07f3c     04 28 06 F1 | 	add	local06, #4
07f40     14 2B 62 FC | 	wrlong	local07, local06
07f44     03 00 00 FF 
07f48     00 E4 05 F1 | 	add	objptr, ##1536
07f4c     F2 2C 02 FB | 	rdlong	local08, objptr
07f50     16 2B 02 F6 | 	mov	local07, local08
07f54     01 2A 66 F0 | 	shl	local07, #1
07f58     16 2B 02 F1 | 	add	local07, local08
07f5c     02 2A 66 F0 | 	shl	local07, #2
07f60     03 00 00 FF 
07f64     00 E4 85 F1 | 	sub	objptr, ##1536
07f68     F2 2A 02 F1 | 	add	local07, objptr
07f6c     08 2A 06 F1 | 	add	local07, #8
07f70     15 27 62 FC | 	wrlong	local05, local07
07f74     03 00 00 FF 
07f78     00 E4 05 F1 | 	add	objptr, ##1536
07f7c     F2 28 02 FB | 	rdlong	local06, objptr
07f80     01 28 06 F1 | 	add	local06, #1
07f84     F2 28 62 FC | 	wrlong	local06, objptr
07f88     13 00 00 FF 
07f8c     38 E4 85 F1 | 	sub	objptr, ##9784
07f90     F2 24 02 FB | 	rdlong	local04, objptr
07f94     03 24 66 F0 | 	shl	local04, #3
07f98     02 00 00 FF 
07f9c     38 E4 85 F1 | 	sub	objptr, ##1080
07fa0     F2 24 02 F1 | 	add	local04, objptr
07fa4     04 24 06 F1 | 	add	local04, #4
07fa8     12 27 02 FB | 	rdlong	local05, local04
07fac     2B 00 00 FF 
07fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
07fb4     E0 FE 9F FD | 	jmp	#LR__0640
07fb8                 | LR__0641
07fb8     A7 F0 03 F6 | 	mov	ptra, fp
07fbc     B2 00 A0 FD | 	call	#popregs_
07fc0                 | _muldiv_ret
07fc0     2D 00 64 FD | 	ret
07fc4                 | 
07fc4                 | ' 
07fc4                 | ' sub getvalue() 
07fc4                 | _getvalue
07fc4     08 4A 05 F6 | 	mov	COUNT_, #8
07fc8     A8 00 A0 FD | 	call	#pushregs_
07fcc                 | _getvalue_enter
07fcc     01 24 06 F6 | 	mov	local04, #1
07fd0     00 1E 06 F6 | 	mov	local01, #0
07fd4     1D 22 06 F6 | 	mov	local03, #29
07fd8     2E 00 00 FF 
07fdc     08 E4 05 F1 | 	add	objptr, ##23560
07fe0     F2 FA 01 FB | 	rdlong	result1, objptr
07fe4     03 FA 65 F0 | 	shl	result1, #3
07fe8     02 00 00 FF 
07fec     38 E4 85 F1 | 	sub	objptr, ##1080
07ff0     F2 FA 01 F1 | 	add	result1, objptr
07ff4     04 FA 05 F1 | 	add	result1, #4
07ff8     FD 26 02 FB | 	rdlong	local05, result1
07ffc                 | ' m=1
07ffc                 | ' t1.result.uresult=0: t1.result_type=result_uint
07ffc                 | ' op=lparts(ct).token
07ffc                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07ffc     02 26 0E F2 | 	cmp	local05, #2 wz
08000     2B 00 00 FF 
08004     D0 E5 85 F1 | 	sub	objptr, ##22480
08008     38 00 90 5D |  if_ne	jmp	#LR__0650
0800c     01 24 66 F6 | 	neg	local04, #1
08010     2E 00 00 FF 
08014     08 E4 05 F1 | 	add	objptr, ##23560
08018     F2 26 02 FB | 	rdlong	local05, objptr
0801c     01 26 06 F1 | 	add	local05, #1
08020     F2 26 62 FC | 	wrlong	local05, objptr
08024     03 26 66 F0 | 	shl	local05, #3
08028     02 00 00 FF 
0802c     38 E4 85 F1 | 	sub	objptr, ##1080
08030     F2 26 02 F1 | 	add	local05, objptr
08034     04 26 06 F1 | 	add	local05, #4
08038     13 27 02 FB | 	rdlong	local05, local05
0803c     2B 00 00 FF 
08040     D0 E5 85 F1 | 	sub	objptr, ##22480
08044                 | LR__0650
08044                 | ' select case op
08044     01 00 00 FF 
08048     00 26 0E F2 | 	cmp	local05, ##512 wz
0804c     3C 00 90 AD |  if_e	jmp	#LR__0651
08050     01 00 00 FF 
08054     01 26 0E F2 | 	cmp	local05, ##513 wz
08058     88 01 90 AD |  if_e	jmp	#LR__0654
0805c     01 00 00 FF 
08060     02 26 0E F2 | 	cmp	local05, ##514 wz
08064     84 02 90 AD |  if_e	jmp	#LR__0655
08068     01 00 00 FF 
0806c     03 26 0E F2 | 	cmp	local05, ##515 wz
08070     E8 03 90 AD |  if_e	jmp	#LR__0658
08074     01 00 00 FF 
08078     04 26 0E F2 | 	cmp	local05, ##516 wz
0807c     CC 04 90 AD |  if_e	jmp	#LR__0659
08080     15 26 0E F2 | 	cmp	local05, #21 wz
08084     EC 04 90 AD |  if_e	jmp	#LR__0660
08088     5C 05 90 FD | 	jmp	#LR__0661
0808c                 | LR__0651
0808c                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
0808c     01 24 0E F2 | 	cmp	local04, #1 wz
08090     3C 00 90 5D |  if_ne	jmp	#LR__0652
08094     2E 00 00 FF 
08098     08 E4 05 F1 | 	add	objptr, ##23560
0809c     F2 26 02 FB | 	rdlong	local05, objptr
080a0     03 26 66 F0 | 	shl	local05, #3
080a4     02 00 00 FF 
080a8     38 E4 85 F1 | 	sub	objptr, ##1080
080ac     F2 26 02 F1 | 	add	local05, objptr
080b0     13 13 02 FB | 	rdlong	arg01, local05
080b4     00 14 06 F6 | 	mov	arg02, #0
080b8     2B 00 00 FF 
080bc     D0 E5 85 F1 | 	sub	objptr, ##22480
080c0     1C 02 B1 FD | 	call	#__system____builtin_atoi
080c4     FD 24 02 FD | 	qmul	local04, result1
080c8     18 1E 62 FD | 	getqx	local01
080cc     1D 22 06 F6 | 	mov	local03, #29
080d0                 | LR__0652
080d0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
080d0     FF FF 7F FF 
080d4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
080d8     3C 00 90 5D |  if_ne	jmp	#LR__0653
080dc     2E 00 00 FF 
080e0     08 E4 05 F1 | 	add	objptr, ##23560
080e4     F2 26 02 FB | 	rdlong	local05, objptr
080e8     03 26 66 F0 | 	shl	local05, #3
080ec     02 00 00 FF 
080f0     38 E4 85 F1 | 	sub	objptr, ##1080
080f4     F2 26 02 F1 | 	add	local05, objptr
080f8     13 13 02 FB | 	rdlong	arg01, local05
080fc     00 14 06 F6 | 	mov	arg02, #0
08100     2B 00 00 FF 
08104     D0 E5 85 F1 | 	sub	objptr, ##22480
08108     D4 01 B1 FD | 	call	#__system____builtin_atoi
0810c     FD 24 02 FD | 	qmul	local04, result1
08110     18 1E 62 FD | 	getqx	local01
08114     1C 22 06 F6 | 	mov	local03, #28
08118                 | LR__0653
08118     0F 29 02 F6 | 	mov	local06, local01
0811c     10 2B 02 F6 | 	mov	local07, local02
08120     11 27 02 F6 | 	mov	local05, local03
08124     41 00 00 FF 
08128     40 E4 05 F1 | 	add	objptr, ##33344
0812c     F2 1E 02 FB | 	rdlong	local01, objptr
08130     0F 25 02 F6 | 	mov	local04, local01
08134     01 24 66 F0 | 	shl	local04, #1
08138     0F 25 02 F1 | 	add	local04, local01
0813c     02 24 66 F0 | 	shl	local04, #2
08140     03 00 00 FF 
08144     00 E4 85 F1 | 	sub	objptr, ##1536
08148     F2 24 02 F1 | 	add	local04, objptr
0814c     12 29 62 FC | 	wrlong	local06, local04
08150     03 00 00 FF 
08154     00 E4 05 F1 | 	add	objptr, ##1536
08158     F2 28 02 FB | 	rdlong	local06, objptr
0815c     14 1F 02 F6 | 	mov	local01, local06
08160     01 1E 66 F0 | 	shl	local01, #1
08164     14 1F 02 F1 | 	add	local01, local06
08168     02 1E 66 F0 | 	shl	local01, #2
0816c     03 00 00 FF 
08170     00 E4 85 F1 | 	sub	objptr, ##1536
08174     F2 1E 02 F1 | 	add	local01, objptr
08178     04 1E 06 F1 | 	add	local01, #4
0817c     0F 2B 62 FC | 	wrlong	local07, local01
08180     03 00 00 FF 
08184     00 E4 05 F1 | 	add	objptr, ##1536
08188     F2 2A 02 FB | 	rdlong	local07, objptr
0818c     15 29 02 F6 | 	mov	local06, local07
08190     01 28 66 F0 | 	shl	local06, #1
08194     15 29 02 F1 | 	add	local06, local07
08198     02 28 66 F0 | 	shl	local06, #2
0819c     03 00 00 FF 
081a0     00 E4 85 F1 | 	sub	objptr, ##1536
081a4     F2 28 02 F1 | 	add	local06, objptr
081a8     08 28 06 F1 | 	add	local06, #8
081ac     14 27 62 FC | 	wrlong	local05, local06
081b0     03 00 00 FF 
081b4     00 E4 05 F1 | 	add	objptr, ##1536
081b8     F2 28 02 FB | 	rdlong	local06, objptr
081bc     01 28 06 F1 | 	add	local06, #1
081c0     F2 28 62 FC | 	wrlong	local06, objptr
081c4     13 00 00 FF 
081c8     38 E4 85 F1 | 	sub	objptr, ##9784
081cc     F2 28 02 FB | 	rdlong	local06, objptr
081d0     01 28 06 F1 | 	add	local06, #1
081d4     F2 28 62 FC | 	wrlong	local06, objptr
081d8     2E 00 00 FF 
081dc     08 E4 85 F1 | 	sub	objptr, ##23560
081e0     28 04 90 FD | 	jmp	#LR__0662
081e4                 | LR__0654
081e4     2E 00 00 FF 
081e8     08 E4 05 F1 | 	add	objptr, ##23560
081ec     F2 28 02 FB | 	rdlong	local06, objptr
081f0     03 28 66 F0 | 	shl	local06, #3
081f4     02 00 00 FF 
081f8     38 E4 85 F1 | 	sub	objptr, ##1080
081fc     F2 28 02 F1 | 	add	local06, objptr
08200     14 13 02 FB | 	rdlong	arg01, local06
08204     00 14 06 F6 | 	mov	arg02, #0
08208     2B 00 00 FF 
0820c     D0 E5 85 F1 | 	sub	objptr, ##22480
08210     CC 00 B1 FD | 	call	#__system____builtin_atoi
08214     FD 24 02 FD | 	qmul	local04, result1
08218     41 00 00 FF 
0821c     40 E4 05 F1 | 	add	objptr, ##33344
08220     F2 28 02 FB | 	rdlong	local06, objptr
08224     14 2D 02 F6 | 	mov	local08, local06
08228     01 2C 66 F0 | 	shl	local08, #1
0822c     14 2D 02 F1 | 	add	local08, local06
08230     02 2C 66 F0 | 	shl	local08, #2
08234     03 00 00 FF 
08238     00 E4 85 F1 | 	sub	objptr, ##1536
0823c     F2 2C 02 F1 | 	add	local08, objptr
08240     03 00 00 FF 
08244     00 E4 05 F1 | 	add	objptr, ##1536
08248     18 1E 62 FD | 	getqx	local01
0824c     1C 22 06 F6 | 	mov	local03, #28
08250     0F 29 02 F6 | 	mov	local06, local01
08254     10 2B 02 F6 | 	mov	local07, local02
08258     16 29 62 FC | 	wrlong	local06, local08
0825c     11 2D 02 F6 | 	mov	local08, local03
08260     F2 28 02 FB | 	rdlong	local06, objptr
08264     14 27 02 F6 | 	mov	local05, local06
08268     01 26 66 F0 | 	shl	local05, #1
0826c     14 27 02 F1 | 	add	local05, local06
08270     02 26 66 F0 | 	shl	local05, #2
08274     03 00 00 FF 
08278     00 E4 85 F1 | 	sub	objptr, ##1536
0827c     F2 26 02 F1 | 	add	local05, objptr
08280     04 26 06 F1 | 	add	local05, #4
08284     13 2B 62 FC | 	wrlong	local07, local05
08288     03 00 00 FF 
0828c     00 E4 05 F1 | 	add	objptr, ##1536
08290     F2 2A 02 FB | 	rdlong	local07, objptr
08294     15 29 02 F6 | 	mov	local06, local07
08298     01 28 66 F0 | 	shl	local06, #1
0829c     15 29 02 F1 | 	add	local06, local07
082a0     02 28 66 F0 | 	shl	local06, #2
082a4     03 00 00 FF 
082a8     00 E4 85 F1 | 	sub	objptr, ##1536
082ac     F2 28 02 F1 | 	add	local06, objptr
082b0     08 28 06 F1 | 	add	local06, #8
082b4     14 2D 62 FC | 	wrlong	local08, local06
082b8     03 00 00 FF 
082bc     00 E4 05 F1 | 	add	objptr, ##1536
082c0     F2 28 02 FB | 	rdlong	local06, objptr
082c4     01 28 06 F1 | 	add	local06, #1
082c8     F2 28 62 FC | 	wrlong	local06, objptr
082cc     13 00 00 FF 
082d0     38 E4 85 F1 | 	sub	objptr, ##9784
082d4     F2 28 02 FB | 	rdlong	local06, objptr
082d8     01 28 06 F1 | 	add	local06, #1
082dc     F2 28 62 FC | 	wrlong	local06, objptr
082e0     2E 00 00 FF 
082e4     08 E4 85 F1 | 	sub	objptr, ##23560
082e8     20 03 90 FD | 	jmp	#LR__0662
082ec                 | LR__0655
082ec                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
082ec     01 24 0E F2 | 	cmp	local04, #1 wz
082f0     48 00 90 5D |  if_ne	jmp	#LR__0656
082f4     00 C0 1F FF 
082f8     00 28 06 F6 | 	mov	local06, ##1065353216
082fc     2E 00 00 FF 
08300     08 E4 05 F1 | 	add	objptr, ##23560
08304     F2 2C 02 FB | 	rdlong	local08, objptr
08308     03 2C 66 F0 | 	shl	local08, #3
0830c     02 00 00 FF 
08310     38 E4 85 F1 | 	sub	objptr, ##1080
08314     F2 2C 02 F1 | 	add	local08, objptr
08318     16 13 02 FB | 	rdlong	arg01, local08
0831c     2B 00 00 FF 
08320     D0 E5 85 F1 | 	sub	objptr, ##22480
08324     28 01 B1 FD | 	call	#__system____builtin_atof
08328     FD 14 02 F6 | 	mov	arg02, result1
0832c     14 13 02 F6 | 	mov	arg01, local06
08330     34 F9 B0 FD | 	call	#__system___float_mul
08334     FD 1E 02 F6 | 	mov	local01, result1
08338     1E 22 06 F6 | 	mov	local03, #30
0833c                 | LR__0656
0833c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0833c     FF FF 7F FF 
08340     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08344     48 00 90 5D |  if_ne	jmp	#LR__0657
08348     00 C0 5F FF 
0834c     00 28 06 F6 | 	mov	local06, ##-1082130432
08350     2E 00 00 FF 
08354     08 E4 05 F1 | 	add	objptr, ##23560
08358     F2 2C 02 FB | 	rdlong	local08, objptr
0835c     03 2C 66 F0 | 	shl	local08, #3
08360     02 00 00 FF 
08364     38 E4 85 F1 | 	sub	objptr, ##1080
08368     F2 2C 02 F1 | 	add	local08, objptr
0836c     16 13 02 FB | 	rdlong	arg01, local08
08370     2B 00 00 FF 
08374     D0 E5 85 F1 | 	sub	objptr, ##22480
08378     D4 00 B1 FD | 	call	#__system____builtin_atof
0837c     FD 14 02 F6 | 	mov	arg02, result1
08380     14 13 02 F6 | 	mov	arg01, local06
08384     E0 F8 B0 FD | 	call	#__system___float_mul
08388     FD 1E 02 F6 | 	mov	local01, result1
0838c     1E 22 06 F6 | 	mov	local03, #30
08390                 | LR__0657
08390     0F 29 02 F6 | 	mov	local06, local01
08394     10 2B 02 F6 | 	mov	local07, local02
08398     11 27 02 F6 | 	mov	local05, local03
0839c     41 00 00 FF 
083a0     40 E4 05 F1 | 	add	objptr, ##33344
083a4     F2 1E 02 FB | 	rdlong	local01, objptr
083a8     0F 2D 02 F6 | 	mov	local08, local01
083ac     01 2C 66 F0 | 	shl	local08, #1
083b0     0F 2D 02 F1 | 	add	local08, local01
083b4     02 2C 66 F0 | 	shl	local08, #2
083b8     03 00 00 FF 
083bc     00 E4 85 F1 | 	sub	objptr, ##1536
083c0     F2 2C 02 F1 | 	add	local08, objptr
083c4     16 29 62 FC | 	wrlong	local06, local08
083c8     03 00 00 FF 
083cc     00 E4 05 F1 | 	add	objptr, ##1536
083d0     F2 2C 02 FB | 	rdlong	local08, objptr
083d4     16 29 02 F6 | 	mov	local06, local08
083d8     01 28 66 F0 | 	shl	local06, #1
083dc     16 29 02 F1 | 	add	local06, local08
083e0     02 28 66 F0 | 	shl	local06, #2
083e4     03 00 00 FF 
083e8     00 E4 85 F1 | 	sub	objptr, ##1536
083ec     F2 28 02 F1 | 	add	local06, objptr
083f0     04 28 06 F1 | 	add	local06, #4
083f4     14 2B 62 FC | 	wrlong	local07, local06
083f8     03 00 00 FF 
083fc     00 E4 05 F1 | 	add	objptr, ##1536
08400     F2 2C 02 FB | 	rdlong	local08, objptr
08404     16 2B 02 F6 | 	mov	local07, local08
08408     01 2A 66 F0 | 	shl	local07, #1
0840c     16 2B 02 F1 | 	add	local07, local08
08410     02 2A 66 F0 | 	shl	local07, #2
08414     03 00 00 FF 
08418     00 E4 85 F1 | 	sub	objptr, ##1536
0841c     F2 2A 02 F1 | 	add	local07, objptr
08420     08 2A 06 F1 | 	add	local07, #8
08424     15 27 62 FC | 	wrlong	local05, local07
08428     03 00 00 FF 
0842c     00 E4 05 F1 | 	add	objptr, ##1536
08430     F2 28 02 FB | 	rdlong	local06, objptr
08434     01 28 06 F1 | 	add	local06, #1
08438     F2 28 62 FC | 	wrlong	local06, objptr
0843c     13 00 00 FF 
08440     38 E4 85 F1 | 	sub	objptr, ##9784
08444     F2 28 02 FB | 	rdlong	local06, objptr
08448     01 28 06 F1 | 	add	local06, #1
0844c     F2 28 62 FC | 	wrlong	local06, objptr
08450     2E 00 00 FF 
08454     08 E4 85 F1 | 	sub	objptr, ##23560
08458     B0 01 90 FD | 	jmp	#LR__0662
0845c                 | LR__0658
0845c     2E 00 00 FF 
08460     08 E4 05 F1 | 	add	objptr, ##23560
08464     F2 28 02 FB | 	rdlong	local06, objptr
08468     03 28 66 F0 | 	shl	local06, #3
0846c     02 00 00 FF 
08470     38 E4 85 F1 | 	sub	objptr, ##1080
08474     F2 28 02 F1 | 	add	local06, objptr
08478     14 1F 02 FB | 	rdlong	local01, local06
0847c     1F 22 06 F6 | 	mov	local03, #31
08480     0F 29 02 F6 | 	mov	local06, local01
08484     10 2B 02 F6 | 	mov	local07, local02
08488     11 27 02 F6 | 	mov	local05, local03
0848c     15 00 00 FF 
08490     70 E4 05 F1 | 	add	objptr, ##10864
08494     F2 1E 02 FB | 	rdlong	local01, objptr
08498     0F 2D 02 F6 | 	mov	local08, local01
0849c     01 2C 66 F0 | 	shl	local08, #1
084a0     0F 2D 02 F1 | 	add	local08, local01
084a4     02 2C 66 F0 | 	shl	local08, #2
084a8     03 00 00 FF 
084ac     00 E4 85 F1 | 	sub	objptr, ##1536
084b0     F2 2C 02 F1 | 	add	local08, objptr
084b4     16 29 62 FC | 	wrlong	local06, local08
084b8     03 00 00 FF 
084bc     00 E4 05 F1 | 	add	objptr, ##1536
084c0     F2 2C 02 FB | 	rdlong	local08, objptr
084c4     16 29 02 F6 | 	mov	local06, local08
084c8     01 28 66 F0 | 	shl	local06, #1
084cc     16 29 02 F1 | 	add	local06, local08
084d0     02 28 66 F0 | 	shl	local06, #2
084d4     03 00 00 FF 
084d8     00 E4 85 F1 | 	sub	objptr, ##1536
084dc     F2 28 02 F1 | 	add	local06, objptr
084e0     04 28 06 F1 | 	add	local06, #4
084e4     14 2B 62 FC | 	wrlong	local07, local06
084e8     03 00 00 FF 
084ec     00 E4 05 F1 | 	add	objptr, ##1536
084f0     F2 2C 02 FB | 	rdlong	local08, objptr
084f4     16 2B 02 F6 | 	mov	local07, local08
084f8     01 2A 66 F0 | 	shl	local07, #1
084fc     16 2B 02 F1 | 	add	local07, local08
08500     02 2A 66 F0 | 	shl	local07, #2
08504     03 00 00 FF 
08508     00 E4 85 F1 | 	sub	objptr, ##1536
0850c     F2 2A 02 F1 | 	add	local07, objptr
08510     08 2A 06 F1 | 	add	local07, #8
08514     15 27 62 FC | 	wrlong	local05, local07
08518     03 00 00 FF 
0851c     00 E4 05 F1 | 	add	objptr, ##1536
08520     F2 28 02 FB | 	rdlong	local06, objptr
08524     01 28 06 F1 | 	add	local06, #1
08528     F2 28 62 FC | 	wrlong	local06, objptr
0852c     13 00 00 FF 
08530     38 E4 85 F1 | 	sub	objptr, ##9784
08534     F2 28 02 FB | 	rdlong	local06, objptr
08538     01 28 06 F1 | 	add	local06, #1
0853c     F2 28 62 FC | 	wrlong	local06, objptr
08540     2E 00 00 FF 
08544     08 E4 85 F1 | 	sub	objptr, ##23560
08548     C0 00 90 FD | 	jmp	#LR__0662
0854c                 | LR__0659
0854c     12 13 02 F6 | 	mov	arg01, local04
08550     B8 03 B0 FD | 	call	#_getvar
08554     2E 00 00 FF 
08558     08 E4 05 F1 | 	add	objptr, ##23560
0855c     F2 28 02 FB | 	rdlong	local06, objptr
08560     01 28 06 F1 | 	add	local06, #1
08564     F2 28 62 FC | 	wrlong	local06, objptr
08568     2E 00 00 FF 
0856c     08 E4 85 F1 | 	sub	objptr, ##23560
08570     98 00 90 FD | 	jmp	#LR__0662
08574                 | LR__0660
08574     2E 00 00 FF 
08578     08 E4 05 F1 | 	add	objptr, ##23560
0857c     F2 28 02 FB | 	rdlong	local06, objptr
08580     01 28 06 F1 | 	add	local06, #1
08584     F2 28 62 FC | 	wrlong	local06, objptr
08588     2E 00 00 FF 
0858c     08 E4 85 F1 | 	sub	objptr, ##23560
08590     08 F5 BF FD | 	call	#_expr
08594                 | '     ct+=1
08594                 | '     expr() 
08594                 | '     if lparts(ct).token=token_rpar then ct+=1
08594     2E 00 00 FF 
08598     08 E4 05 F1 | 	add	objptr, ##23560
0859c     F2 2C 02 FB | 	rdlong	local08, objptr
085a0     03 2C 66 F0 | 	shl	local08, #3
085a4     02 00 00 FF 
085a8     38 E4 85 F1 | 	sub	objptr, ##1080
085ac     F2 2C 02 F1 | 	add	local08, objptr
085b0     04 2C 06 F1 | 	add	local08, #4
085b4     16 2D 02 FB | 	rdlong	local08, local08
085b8     14 2C 0E F2 | 	cmp	local08, #20 wz
085bc     2B 00 00 FF 
085c0     D0 E5 85 F1 | 	sub	objptr, ##22480
085c4     44 00 90 5D |  if_ne	jmp	#LR__0662
085c8     2E 00 00 FF 
085cc     08 E4 05 F1 | 	add	objptr, ##23560
085d0     F2 28 02 FB | 	rdlong	local06, objptr
085d4     01 28 06 F1 | 	add	local06, #1
085d8     F2 28 62 FC | 	wrlong	local06, objptr
085dc     2E 00 00 FF 
085e0     08 E4 85 F1 | 	sub	objptr, ##23560
085e4     24 00 90 FD | 	jmp	#LR__0662
085e8                 | LR__0661
085e8     12 13 02 F6 | 	mov	arg01, local04
085ec     28 00 B0 FD | 	call	#_getfun
085f0     2E 00 00 FF 
085f4     08 E4 05 F1 | 	add	objptr, ##23560
085f8     F2 28 02 FB | 	rdlong	local06, objptr
085fc     01 28 06 F1 | 	add	local06, #1
08600     F2 28 62 FC | 	wrlong	local06, objptr
08604     2E 00 00 FF 
08608     08 E4 85 F1 | 	sub	objptr, ##23560
0860c                 | LR__0662
0860c     A7 F0 03 F6 | 	mov	ptra, fp
08610     B2 00 A0 FD | 	call	#popregs_
08614                 | _getvalue_ret
08614     2D 00 64 FD | 	ret
08618                 | 
08618                 | ' 
08618                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
08618                 | _getfun
08618     0A 4A 05 F6 | 	mov	COUNT_, #10
0861c     A8 00 A0 FD | 	call	#pushregs_
08620                 | _getfun_enter
08620     09 25 02 F6 | 	mov	local04, arg01
08624     2E 00 00 FF 
08628     08 E4 05 F1 | 	add	objptr, ##23560
0862c     F2 26 02 FB | 	rdlong	local05, objptr
08630     13 29 02 F6 | 	mov	local06, local05
08634     00 2A 06 F6 | 	mov	local07, #0
08638                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
08638                 | ' oldct=ct
08638                 | ' numpar=0
08638                 | '   
08638                 | ' if lparts(ct+1).token=token_lpar then
08638     01 26 06 F1 | 	add	local05, #1
0863c     03 26 66 F0 | 	shl	local05, #3
08640     02 00 00 FF 
08644     38 E4 85 F1 | 	sub	objptr, ##1080
08648     F2 26 02 F1 | 	add	local05, objptr
0864c     04 26 06 F1 | 	add	local05, #4
08650     13 27 02 FB | 	rdlong	local05, local05
08654     15 26 0E F2 | 	cmp	local05, #21 wz
08658     2B 00 00 FF 
0865c     D0 E5 85 F1 | 	sub	objptr, ##22480
08660     08 01 90 5D |  if_ne	jmp	#LR__0674
08664     2E 00 00 FF 
08668     08 E4 05 F1 | 	add	objptr, ##23560
0866c     F2 2C 02 FB | 	rdlong	local08, objptr
08670     01 2C 06 F1 | 	add	local08, #1
08674     F2 2C 62 FC | 	wrlong	local08, objptr
08678     2E 00 00 FF 
0867c     08 E4 85 F1 | 	sub	objptr, ##23560
08680                 | '   ct+=1 											' omit this lpar, this is for expr list
08680                 | '   do
08680                 | LR__0670
08680     2E 00 00 FF 
08684     08 E4 05 F1 | 	add	objptr, ##23560
08688     F2 26 02 FB | 	rdlong	local05, objptr
0868c     01 26 06 F1 | 	add	local05, #1
08690     F2 26 62 FC | 	wrlong	local05, objptr
08694                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08694                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08694     03 26 66 F0 | 	shl	local05, #3
08698     02 00 00 FF 
0869c     38 E4 85 F1 | 	sub	objptr, ##1080
086a0     F2 26 02 F1 | 	add	local05, objptr
086a4     04 26 06 F1 | 	add	local05, #4
086a8     13 2D 02 FB | 	rdlong	local08, local05
086ac     15 2C 0E F2 | 	cmp	local08, #21 wz
086b0     2B 00 00 FF 
086b4     D0 E5 85 F1 | 	sub	objptr, ##22480
086b8     40 00 90 5D |  if_ne	jmp	#LR__0671
086bc     2E 00 00 FF 
086c0     08 E4 05 F1 | 	add	objptr, ##23560
086c4     F2 2C 02 FB | 	rdlong	local08, objptr
086c8     01 2C 06 F1 | 	add	local08, #1
086cc     F2 2C 62 FC | 	wrlong	local08, objptr
086d0     2E 00 00 FF 
086d4     08 E4 85 F1 | 	sub	objptr, ##23560
086d8     C0 F3 BF FD | 	call	#_expr
086dc     2E 00 00 FF 
086e0     08 E4 05 F1 | 	add	objptr, ##23560
086e4     F2 2C 02 FB | 	rdlong	local08, objptr
086e8     01 2C 06 F1 | 	add	local08, #1
086ec     F2 2C 62 FC | 	wrlong	local08, objptr
086f0     2E 00 00 FF 
086f4     08 E4 85 F1 | 	sub	objptr, ##23560
086f8     04 00 90 FD | 	jmp	#LR__0672
086fc                 | LR__0671
086fc     9C F3 BF FD | 	call	#_expr
08700                 | LR__0672
08700     01 2A 06 F1 | 	add	local07, #1
08704     2E 00 00 FF 
08708     08 E4 05 F1 | 	add	objptr, ##23560
0870c     F2 26 02 FB | 	rdlong	local05, objptr
08710     03 26 66 F0 | 	shl	local05, #3
08714     02 00 00 FF 
08718     38 E4 85 F1 | 	sub	objptr, ##1080
0871c     F2 26 02 F1 | 	add	local05, objptr
08720     04 26 06 F1 | 	add	local05, #4
08724     13 2D 02 FB | 	rdlong	local08, local05
08728     14 2C 0E F2 | 	cmp	local08, #20 wz
0872c     2B 00 00 FF 
08730     D0 E5 85 F1 | 	sub	objptr, ##22480
08734     34 00 90 AD |  if_e	jmp	#LR__0673
08738     2E 00 00 FF 
0873c     08 E4 05 F1 | 	add	objptr, ##23560
08740     F2 2C 02 FB | 	rdlong	local08, objptr
08744     03 2C 66 F0 | 	shl	local08, #3
08748     02 00 00 FF 
0874c     38 E4 85 F1 | 	sub	objptr, ##1080
08750     F2 2C 02 F1 | 	add	local08, objptr
08754     04 2C 06 F1 | 	add	local08, #4
08758     16 2D 02 FB | 	rdlong	local08, local08
0875c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08760     2B 00 00 FF 
08764     D0 E5 85 F1 | 	sub	objptr, ##22480
08768     14 FF 9F 5D |  if_ne	jmp	#LR__0670
0876c                 | LR__0673
0876c                 | LR__0674
0876c     15 1F 02 F6 | 	mov	local01, local07
08770     03 28 66 F0 | 	shl	local06, #3
08774     2B 00 00 FF 
08778     D0 E5 05 F1 | 	add	objptr, ##22480
0877c     F2 28 02 F1 | 	add	local06, objptr
08780     04 28 06 F1 | 	add	local06, #4
08784     14 23 02 FB | 	rdlong	local03, local06
08788     0F 2D 02 F6 | 	mov	local08, local01
0878c     10 2B 02 F6 | 	mov	local07, local02
08790     11 29 02 F6 | 	mov	local06, local03
08794     15 00 00 FF 
08798     70 E4 05 F1 | 	add	objptr, ##10864
0879c     F2 26 02 FB | 	rdlong	local05, objptr
087a0     13 13 02 F6 | 	mov	arg01, local05
087a4     01 12 66 F0 | 	shl	arg01, #1
087a8     13 13 02 F1 | 	add	arg01, local05
087ac     02 12 66 F0 | 	shl	arg01, #2
087b0     03 00 00 FF 
087b4     00 E4 85 F1 | 	sub	objptr, ##1536
087b8     F2 12 02 F1 | 	add	arg01, objptr
087bc     09 2D 62 FC | 	wrlong	local08, arg01
087c0     03 00 00 FF 
087c4     00 E4 05 F1 | 	add	objptr, ##1536
087c8     F2 2C 02 FB | 	rdlong	local08, objptr
087cc     16 2F 02 F6 | 	mov	local09, local08
087d0     01 2E 66 F0 | 	shl	local09, #1
087d4     16 2F 02 F1 | 	add	local09, local08
087d8     02 2E 66 F0 | 	shl	local09, #2
087dc     03 00 00 FF 
087e0     00 E4 85 F1 | 	sub	objptr, ##1536
087e4     F2 2E 02 F1 | 	add	local09, objptr
087e8     04 2E 06 F1 | 	add	local09, #4
087ec     17 2B 62 FC | 	wrlong	local07, local09
087f0     03 00 00 FF 
087f4     00 E4 05 F1 | 	add	objptr, ##1536
087f8     F2 2C 02 FB | 	rdlong	local08, objptr
087fc     16 31 02 F6 | 	mov	local10, local08
08800     01 30 66 F0 | 	shl	local10, #1
08804     16 31 02 F1 | 	add	local10, local08
08808     02 30 66 F0 | 	shl	local10, #2
0880c     03 00 00 FF 
08810     00 E4 85 F1 | 	sub	objptr, ##1536
08814     F2 30 02 F1 | 	add	local10, objptr
08818     08 30 06 F1 | 	add	local10, #8
0881c     18 29 62 FC | 	wrlong	local06, local10
08820     03 00 00 FF 
08824     00 E4 05 F1 | 	add	objptr, ##1536
08828     F2 2C 02 FB | 	rdlong	local08, objptr
0882c     01 2C 06 F1 | 	add	local08, #1
08830     F2 2C 62 FC | 	wrlong	local08, objptr
08834     41 00 00 FF 
08838     40 E4 85 F1 | 	sub	objptr, ##33344
0883c                 | ' 
0883c                 | ' t2.result.uresult=numpar
0883c                 | ' 
0883c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0883c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0883c                 | ' 
0883c                 | '   
0883c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0883c     FF FF 7F FF 
08840     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08844     B8 00 90 5D |  if_ne	jmp	#LR__0675
08848     15 22 06 F6 | 	mov	local03, #21
0884c     0F 2D 02 F6 | 	mov	local08, local01
08850     10 2B 02 F6 | 	mov	local07, local02
08854     11 29 02 F6 | 	mov	local06, local03
08858     41 00 00 FF 
0885c     40 E4 05 F1 | 	add	objptr, ##33344
08860     F2 26 02 FB | 	rdlong	local05, objptr
08864     13 13 02 F6 | 	mov	arg01, local05
08868     01 12 66 F0 | 	shl	arg01, #1
0886c     13 13 02 F1 | 	add	arg01, local05
08870     02 12 66 F0 | 	shl	arg01, #2
08874     03 00 00 FF 
08878     00 E4 85 F1 | 	sub	objptr, ##1536
0887c     F2 12 02 F1 | 	add	arg01, objptr
08880     09 2D 62 FC | 	wrlong	local08, arg01
08884     03 00 00 FF 
08888     00 E4 05 F1 | 	add	objptr, ##1536
0888c     F2 30 02 FB | 	rdlong	local10, objptr
08890     18 2F 02 F6 | 	mov	local09, local10
08894     01 2E 66 F0 | 	shl	local09, #1
08898     18 2F 02 F1 | 	add	local09, local10
0889c     02 2E 66 F0 | 	shl	local09, #2
088a0     03 00 00 FF 
088a4     00 E4 85 F1 | 	sub	objptr, ##1536
088a8     F2 2E 02 F1 | 	add	local09, objptr
088ac     04 2E 06 F1 | 	add	local09, #4
088b0     17 2B 62 FC | 	wrlong	local07, local09
088b4     03 00 00 FF 
088b8     00 E4 05 F1 | 	add	objptr, ##1536
088bc     F2 2E 02 FB | 	rdlong	local09, objptr
088c0     17 31 02 F6 | 	mov	local10, local09
088c4     01 30 66 F0 | 	shl	local10, #1
088c8     17 31 02 F1 | 	add	local10, local09
088cc     02 30 66 F0 | 	shl	local10, #2
088d0     03 00 00 FF 
088d4     00 E4 85 F1 | 	sub	objptr, ##1536
088d8     F2 30 02 F1 | 	add	local10, objptr
088dc     08 30 06 F1 | 	add	local10, #8
088e0     18 29 62 FC | 	wrlong	local06, local10
088e4     03 00 00 FF 
088e8     00 E4 05 F1 | 	add	objptr, ##1536
088ec     F2 2C 02 FB | 	rdlong	local08, objptr
088f0     01 2C 06 F1 | 	add	local08, #1
088f4     F2 2C 62 FC | 	wrlong	local08, objptr
088f8     41 00 00 FF 
088fc     40 E4 85 F1 | 	sub	objptr, ##33344
08900                 | LR__0675
08900     A7 F0 03 F6 | 	mov	ptra, fp
08904     B2 00 A0 FD | 	call	#popregs_
08908                 | _getfun_ret
08908     2D 00 64 FD | 	ret
0890c                 | 
0890c                 | '   
0890c                 | '   
0890c                 | ' sub getvar(m as integer) 
0890c                 | _getvar
0890c     0A 4A 05 F6 | 	mov	COUNT_, #10
08910     A8 00 A0 FD | 	call	#pushregs_
08914                 | _getvar_enter
08914     09 25 02 F6 | 	mov	local04, arg01
08918     2E 00 00 FF 
0891c     08 E4 05 F1 | 	add	objptr, ##23560
08920     F2 14 02 FB | 	rdlong	arg02, objptr
08924     03 14 66 F0 | 	shl	arg02, #3
08928     02 00 00 FF 
0892c     38 E4 85 F1 | 	sub	objptr, ##1080
08930     F2 14 02 F1 | 	add	arg02, objptr
08934     0A 27 02 FB | 	rdlong	local05, arg02
08938     13 13 02 F6 | 	mov	arg01, local05
0893c     01 14 06 F6 | 	mov	arg02, #1
08940     2B 00 00 FF 
08944     D0 E5 85 F1 | 	sub	objptr, ##22480
08948     A0 E9 B0 FD | 	call	#__system__Right_S
0894c     FD 28 02 F6 | 	mov	local06, result1
08950     01 2A 66 F6 | 	neg	local07, #1
08954                 | ' 
08954                 | ' varname$=lparts(ct).part$
08954                 | ' suffix$=right$(varname$,1)
08954                 | ' j=-1
08954                 | ' 
08954                 | ' for i=0 to varnum-1
08954     00 2C 06 F6 | 	mov	local08, #0
08958     2B 00 00 FF 
0895c     CC E5 05 F1 | 	add	objptr, ##22476
08960     F2 2E 02 FB | 	rdlong	local09, objptr
08964     2B 00 00 FF 
08968     CC E5 85 F1 | 	sub	objptr, ##22476
0896c                 | LR__0680
0896c     17 2D 52 F2 | 	cmps	local08, local09 wc
08970     38 00 90 3D |  if_ae	jmp	#LR__0681
08974                 | '   if variables(i).name=varname$ then j=i : exit
08974     16 15 02 F6 | 	mov	arg02, local08
08978     04 14 66 F0 | 	shl	arg02, #4
0897c     0B 00 00 FF 
08980     CC E5 05 F1 | 	add	objptr, ##6092
08984     F2 14 02 F1 | 	add	arg02, objptr
08988     0A 13 02 FB | 	rdlong	arg01, arg02
0898c     13 15 02 F6 | 	mov	arg02, local05
08990     0B 00 00 FF 
08994     CC E5 85 F1 | 	sub	objptr, ##6092
08998     E0 C8 B0 FD | 	call	#__system___string_cmp
0899c     00 FA 0D F2 | 	cmp	result1, #0 wz
089a0     16 2B 02 A6 |  if_e	mov	local07, local08
089a4     01 2C 06 51 |  if_ne	add	local08, #1
089a8     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
089ac                 | LR__0681
089ac                 | ' if  j=-1 andalso varnum<maxvars then   
089ac     FF FF 7F FF 
089b0     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
089b4     A8 00 90 5D |  if_ne	jmp	#LR__0682
089b8     2B 00 00 FF 
089bc     CC E5 05 F1 | 	add	objptr, ##22476
089c0     F2 2E 02 FB | 	rdlong	local09, objptr
089c4     2B 00 00 FF 
089c8     CC E5 85 F1 | 	sub	objptr, ##22476
089cc     01 00 00 FF 
089d0     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
089d4     88 00 90 3D |  if_ae	jmp	#LR__0682
089d8     2B 00 00 FF 
089dc     CC E5 05 F1 | 	add	objptr, ##22476
089e0     F2 2E 02 FB | 	rdlong	local09, objptr
089e4     04 2E 66 F0 | 	shl	local09, #4
089e8     20 00 00 FF 
089ec     00 E4 85 F1 | 	sub	objptr, ##16384
089f0     F2 2E 02 F1 | 	add	local09, objptr
089f4     17 27 62 FC | 	wrlong	local05, local09
089f8     20 00 00 FF 
089fc     00 E4 05 F1 | 	add	objptr, ##16384
08a00     F2 2E 02 FB | 	rdlong	local09, objptr
08a04     04 2E 66 F0 | 	shl	local09, #4
08a08     20 00 00 FF 
08a0c     00 E4 85 F1 | 	sub	objptr, ##16384
08a10     F2 2E 02 F1 | 	add	local09, objptr
08a14     04 2E 06 F1 | 	add	local09, #4
08a18     17 01 68 FC | 	wrlong	#0, local09
08a1c     20 00 00 FF 
08a20     00 E4 05 F1 | 	add	objptr, ##16384
08a24     F2 2E 02 FB | 	rdlong	local09, objptr
08a28     04 2E 66 F0 | 	shl	local09, #4
08a2c     20 00 00 FF 
08a30     00 E4 85 F1 | 	sub	objptr, ##16384
08a34     F2 2E 02 F1 | 	add	local09, objptr
08a38     0C 2E 06 F1 | 	add	local09, #12
08a3c     17 39 68 FC | 	wrlong	#28, local09
08a40     20 00 00 FF 
08a44     00 E4 05 F1 | 	add	objptr, ##16384
08a48     F2 2E 02 FB | 	rdlong	local09, objptr
08a4c     17 2B 02 F6 | 	mov	local07, local09
08a50     01 2E 06 F1 | 	add	local09, #1
08a54     F2 2E 62 FC | 	wrlong	local09, objptr
08a58     2B 00 00 FF 
08a5c     CC E5 85 F1 | 	sub	objptr, ##22476
08a60                 | LR__0682
08a60     00 2E 06 F6 | 	mov	local09, #0
08a64                 | ' numpar=0
08a64                 | ' ' check if it is an array
08a64                 | ' 
08a64                 | ' if lparts(ct+1).token=token_lpar then
08a64     2E 00 00 FF 
08a68     08 E4 05 F1 | 	add	objptr, ##23560
08a6c     F2 2C 02 FB | 	rdlong	local08, objptr
08a70     01 2C 06 F1 | 	add	local08, #1
08a74     03 2C 66 F0 | 	shl	local08, #3
08a78     02 00 00 FF 
08a7c     38 E4 85 F1 | 	sub	objptr, ##1080
08a80     F2 2C 02 F1 | 	add	local08, objptr
08a84     04 2C 06 F1 | 	add	local08, #4
08a88     16 2D 02 FB | 	rdlong	local08, local08
08a8c     15 2C 0E F2 | 	cmp	local08, #21 wz
08a90     2B 00 00 FF 
08a94     D0 E5 85 F1 | 	sub	objptr, ##22480
08a98     08 01 90 5D |  if_ne	jmp	#LR__0687
08a9c     2E 00 00 FF 
08aa0     08 E4 05 F1 | 	add	objptr, ##23560
08aa4     F2 30 02 FB | 	rdlong	local10, objptr
08aa8     01 30 06 F1 | 	add	local10, #1
08aac     F2 30 62 FC | 	wrlong	local10, objptr
08ab0     2E 00 00 FF 
08ab4     08 E4 85 F1 | 	sub	objptr, ##23560
08ab8                 | '   ct+=1 											' omit this lpar, this is for expr list
08ab8                 | '   do
08ab8                 | LR__0683
08ab8     2E 00 00 FF 
08abc     08 E4 05 F1 | 	add	objptr, ##23560
08ac0     F2 2C 02 FB | 	rdlong	local08, objptr
08ac4     01 2C 06 F1 | 	add	local08, #1
08ac8     F2 2C 62 FC | 	wrlong	local08, objptr
08acc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08acc                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08acc     03 2C 66 F0 | 	shl	local08, #3
08ad0     02 00 00 FF 
08ad4     38 E4 85 F1 | 	sub	objptr, ##1080
08ad8     F2 2C 02 F1 | 	add	local08, objptr
08adc     04 2C 06 F1 | 	add	local08, #4
08ae0     16 31 02 FB | 	rdlong	local10, local08
08ae4     15 30 0E F2 | 	cmp	local10, #21 wz
08ae8     2B 00 00 FF 
08aec     D0 E5 85 F1 | 	sub	objptr, ##22480
08af0     40 00 90 5D |  if_ne	jmp	#LR__0684
08af4     2E 00 00 FF 
08af8     08 E4 05 F1 | 	add	objptr, ##23560
08afc     F2 30 02 FB | 	rdlong	local10, objptr
08b00     01 30 06 F1 | 	add	local10, #1
08b04     F2 30 62 FC | 	wrlong	local10, objptr
08b08     2E 00 00 FF 
08b0c     08 E4 85 F1 | 	sub	objptr, ##23560
08b10     88 EF BF FD | 	call	#_expr
08b14     2E 00 00 FF 
08b18     08 E4 05 F1 | 	add	objptr, ##23560
08b1c     F2 30 02 FB | 	rdlong	local10, objptr
08b20     01 30 06 F1 | 	add	local10, #1
08b24     F2 30 62 FC | 	wrlong	local10, objptr
08b28     2E 00 00 FF 
08b2c     08 E4 85 F1 | 	sub	objptr, ##23560
08b30     04 00 90 FD | 	jmp	#LR__0685
08b34                 | LR__0684
08b34     64 EF BF FD | 	call	#_expr
08b38                 | LR__0685
08b38     01 2E 06 F1 | 	add	local09, #1
08b3c     2E 00 00 FF 
08b40     08 E4 05 F1 | 	add	objptr, ##23560
08b44     F2 2C 02 FB | 	rdlong	local08, objptr
08b48     03 2C 66 F0 | 	shl	local08, #3
08b4c     02 00 00 FF 
08b50     38 E4 85 F1 | 	sub	objptr, ##1080
08b54     F2 2C 02 F1 | 	add	local08, objptr
08b58     04 2C 06 F1 | 	add	local08, #4
08b5c     16 31 02 FB | 	rdlong	local10, local08
08b60     14 30 0E F2 | 	cmp	local10, #20 wz
08b64     2B 00 00 FF 
08b68     D0 E5 85 F1 | 	sub	objptr, ##22480
08b6c     34 00 90 AD |  if_e	jmp	#LR__0686
08b70     2E 00 00 FF 
08b74     08 E4 05 F1 | 	add	objptr, ##23560
08b78     F2 30 02 FB | 	rdlong	local10, objptr
08b7c     03 30 66 F0 | 	shl	local10, #3
08b80     02 00 00 FF 
08b84     38 E4 85 F1 | 	sub	objptr, ##1080
08b88     F2 30 02 F1 | 	add	local10, objptr
08b8c     04 30 06 F1 | 	add	local10, #4
08b90     18 31 02 FB | 	rdlong	local10, local10
08b94     FE 31 0E F2 | 	cmp	local10, #510 wz
08b98     2B 00 00 FF 
08b9c     D0 E5 85 F1 | 	sub	objptr, ##22480
08ba0     14 FF 9F 5D |  if_ne	jmp	#LR__0683
08ba4                 | LR__0686
08ba4                 | LR__0687
08ba4     17 21 02 F6 | 	mov	local02, local09
08ba8     11 22 06 F6 | 	mov	local03, #17
08bac     15 1F 02 F6 | 	mov	local01, local07
08bb0     0F 31 02 F6 | 	mov	local10, local01
08bb4     10 2F 02 F6 | 	mov	local09, local02
08bb8     11 2D 02 F6 | 	mov	local08, local03
08bbc     41 00 00 FF 
08bc0     40 E4 05 F1 | 	add	objptr, ##33344
08bc4     F2 2A 02 FB | 	rdlong	local07, objptr
08bc8     15 29 02 F6 | 	mov	local06, local07
08bcc     01 28 66 F0 | 	shl	local06, #1
08bd0     15 29 02 F1 | 	add	local06, local07
08bd4     02 28 66 F0 | 	shl	local06, #2
08bd8     03 00 00 FF 
08bdc     00 E4 85 F1 | 	sub	objptr, ##1536
08be0     F2 28 02 F1 | 	add	local06, objptr
08be4     14 31 62 FC | 	wrlong	local10, local06
08be8     03 00 00 FF 
08bec     00 E4 05 F1 | 	add	objptr, ##1536
08bf0     F2 30 02 FB | 	rdlong	local10, objptr
08bf4     18 27 02 F6 | 	mov	local05, local10
08bf8     01 26 66 F0 | 	shl	local05, #1
08bfc     18 27 02 F1 | 	add	local05, local10
08c00     02 26 66 F0 | 	shl	local05, #2
08c04     03 00 00 FF 
08c08     00 E4 85 F1 | 	sub	objptr, ##1536
08c0c     F2 26 02 F1 | 	add	local05, objptr
08c10     04 26 06 F1 | 	add	local05, #4
08c14     13 2F 62 FC | 	wrlong	local09, local05
08c18     03 00 00 FF 
08c1c     00 E4 05 F1 | 	add	objptr, ##1536
08c20     F2 30 02 FB | 	rdlong	local10, objptr
08c24     18 FB 01 F6 | 	mov	result1, local10
08c28     01 FA 65 F0 | 	shl	result1, #1
08c2c     18 FB 01 F1 | 	add	result1, local10
08c30     02 FA 65 F0 | 	shl	result1, #2
08c34     03 00 00 FF 
08c38     00 E4 85 F1 | 	sub	objptr, ##1536
08c3c     F2 FA 01 F1 | 	add	result1, objptr
08c40     08 FA 05 F1 | 	add	result1, #8
08c44     FD 2C 62 FC | 	wrlong	local08, result1
08c48     03 00 00 FF 
08c4c     00 E4 05 F1 | 	add	objptr, ##1536
08c50     F2 30 02 FB | 	rdlong	local10, objptr
08c54     01 30 06 F1 | 	add	local10, #1
08c58     F2 30 62 FC | 	wrlong	local10, objptr
08c5c     41 00 00 FF 
08c60     40 E4 85 F1 | 	sub	objptr, ##33344
08c64                 | ' 
08c64                 | ' t2.result.twowords(1)=numpar
08c64                 | ' 
08c64                 | ' 
08c64                 | ' 
08c64                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
08c64                 | ' 
08c64                 | ' 
08c64                 | '  
08c64                 | ' 
08c64                 | ' 701 
08c64                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08c64                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08c64     FF FF 7F FF 
08c68     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08c6c     B8 00 90 5D |  if_ne	jmp	#LR__0688
08c70     15 22 06 F6 | 	mov	local03, #21
08c74     0F 31 02 F6 | 	mov	local10, local01
08c78     10 2F 02 F6 | 	mov	local09, local02
08c7c     11 2D 02 F6 | 	mov	local08, local03
08c80     41 00 00 FF 
08c84     40 E4 05 F1 | 	add	objptr, ##33344
08c88     F2 2A 02 FB | 	rdlong	local07, objptr
08c8c     15 29 02 F6 | 	mov	local06, local07
08c90     01 28 66 F0 | 	shl	local06, #1
08c94     15 29 02 F1 | 	add	local06, local07
08c98     02 28 66 F0 | 	shl	local06, #2
08c9c     03 00 00 FF 
08ca0     00 E4 85 F1 | 	sub	objptr, ##1536
08ca4     F2 28 02 F1 | 	add	local06, objptr
08ca8     14 31 62 FC | 	wrlong	local10, local06
08cac     03 00 00 FF 
08cb0     00 E4 05 F1 | 	add	objptr, ##1536
08cb4     F2 1E 02 FB | 	rdlong	local01, objptr
08cb8     0F 27 02 F6 | 	mov	local05, local01
08cbc     01 26 66 F0 | 	shl	local05, #1
08cc0     0F 27 02 F1 | 	add	local05, local01
08cc4     02 26 66 F0 | 	shl	local05, #2
08cc8     03 00 00 FF 
08ccc     00 E4 85 F1 | 	sub	objptr, ##1536
08cd0     F2 26 02 F1 | 	add	local05, objptr
08cd4     04 26 06 F1 | 	add	local05, #4
08cd8     13 2F 62 FC | 	wrlong	local09, local05
08cdc     03 00 00 FF 
08ce0     00 E4 05 F1 | 	add	objptr, ##1536
08ce4     F2 1E 02 FB | 	rdlong	local01, objptr
08ce8     0F FB 01 F6 | 	mov	result1, local01
08cec     01 FA 65 F0 | 	shl	result1, #1
08cf0     0F FB 01 F1 | 	add	result1, local01
08cf4     02 FA 65 F0 | 	shl	result1, #2
08cf8     03 00 00 FF 
08cfc     00 E4 85 F1 | 	sub	objptr, ##1536
08d00     F2 FA 01 F1 | 	add	result1, objptr
08d04     08 FA 05 F1 | 	add	result1, #8
08d08     FD 2C 62 FC | 	wrlong	local08, result1
08d0c     03 00 00 FF 
08d10     00 E4 05 F1 | 	add	objptr, ##1536
08d14     F2 30 02 FB | 	rdlong	local10, objptr
08d18     01 30 06 F1 | 	add	local10, #1
08d1c     F2 30 62 FC | 	wrlong	local10, objptr
08d20     41 00 00 FF 
08d24     40 E4 85 F1 | 	sub	objptr, ##33344
08d28                 | LR__0688
08d28     A7 F0 03 F6 | 	mov	ptra, fp
08d2c     B2 00 A0 FD | 	call	#popregs_
08d30                 | _getvar_ret
08d30     2D 00 64 FD | 	ret
08d34                 | 
08d34                 | ' 
08d34                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08d34                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08d34                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08d34                 | ' 
08d34                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08d34                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08d34                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08d34                 | ' 
08d34                 | ' function execute_line (astart=0 as integer) as integer
08d34                 | _execute_line
08d34     04 4A 05 F6 | 	mov	COUNT_, #4
08d38     A8 00 A0 FD | 	call	#pushregs_
08d3c     50 00 00 FF 
08d40     78 E5 05 F1 | 	add	objptr, ##41336
08d44     F2 00 68 FC | 	wrlong	#0, objptr
08d48                 | ' runptr2=0
08d48                 | ' for lineptr_e=astart to lineptr-1
08d48     0F 00 00 FF 
08d4c     34 E5 85 F1 | 	sub	objptr, ##7988
08d50     F2 12 62 FC | 	wrlong	arg01, objptr
08d54     04 E4 85 F1 | 	sub	objptr, #4
08d58     F2 1E 02 FB | 	rdlong	local01, objptr
08d5c     41 00 00 FF 
08d60     40 E4 85 F1 | 	sub	objptr, ##33344
08d64                 | LR__0690
08d64     41 00 00 FF 
08d68     44 E4 05 F1 | 	add	objptr, ##33348
08d6c     F2 FA 01 FB | 	rdlong	result1, objptr
08d70     41 00 00 FF 
08d74     44 E4 85 F1 | 	sub	objptr, ##33348
08d78     0F FB 51 F2 | 	cmps	result1, local01 wc
08d7c     98 00 90 3D |  if_ae	jmp	#LR__0691
08d80     41 00 00 FF 
08d84     44 E4 05 F1 | 	add	objptr, ##33348
08d88     F2 FA 01 FB | 	rdlong	result1, objptr
08d8c     FD 20 02 F6 | 	mov	local02, result1
08d90     01 20 66 F0 | 	shl	local02, #1
08d94     FD 20 02 F1 | 	add	local02, result1
08d98     02 20 66 F0 | 	shl	local02, #2
08d9c     03 00 00 FF 
08da0     04 E4 85 F1 | 	sub	objptr, ##1540
08da4     F2 20 02 F1 | 	add	local02, objptr
08da8     08 20 06 F1 | 	add	local02, #8
08dac     10 21 02 FB | 	rdlong	local02, local02
08db0     10 21 E2 F8 | 	getbyte	local02, local02, #0
08db4     02 20 66 F0 | 	shl	local02, #2
08db8     04 00 00 FF 
08dbc     1C E4 85 F1 | 	sub	objptr, ##2076
08dc0     F2 20 02 F1 | 	add	local02, objptr
08dc4     10 21 02 FB | 	rdlong	local02, local02
08dc8     10 23 02 F6 | 	mov	local03, local02
08dcc     13 20 46 F7 | 	zerox	local02, #19
08dd0     14 22 46 F0 | 	shr	local03, #20
08dd4     02 22 66 F0 | 	shl	local03, #2
08dd8     ED 22 02 F1 | 	add	local03, __methods__
08ddc     11 23 02 FB | 	rdlong	local03, local03
08de0     3A 00 00 FF 
08de4     24 E4 85 F1 | 	sub	objptr, ##29732
08de8     F2 24 02 F6 | 	mov	local04, objptr
08dec     10 E5 01 F6 | 	mov	objptr, local02
08df0     2D 22 62 FD | 	call	local03
08df4     12 E5 01 F6 | 	mov	objptr, local04
08df8     41 00 00 FF 
08dfc     44 E4 05 F1 | 	add	objptr, ##33348
08e00     F2 24 02 FB | 	rdlong	local04, objptr
08e04     01 24 06 F1 | 	add	local04, #1
08e08     F2 24 62 FC | 	wrlong	local04, objptr
08e0c     41 00 00 FF 
08e10     44 E4 85 F1 | 	sub	objptr, ##33348
08e14     4C FF 9F FD | 	jmp	#LR__0690
08e18                 | LR__0691
08e18                 | ' return runptr2
08e18     50 00 00 FF 
08e1c     78 E5 05 F1 | 	add	objptr, ##41336
08e20     F2 FA 01 FB | 	rdlong	result1, objptr
08e24     50 00 00 FF 
08e28     78 E5 85 F1 | 	sub	objptr, ##41336
08e2c     A7 F0 03 F6 | 	mov	ptra, fp
08e30     B2 00 A0 FD | 	call	#popregs_
08e34                 | _execute_line_ret
08e34     2D 00 64 FD | 	ret
08e38                 | 
08e38                 | ' 
08e38                 | ' 
08e38                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08e38                 | ' 
08e38                 | ' function pop() as expr_result
08e38                 | _pop
08e38                 | ' 
08e38                 | ' if stackpointer=0 then
08e38     3A 00 00 FF 
08e3c     1C E4 05 F1 | 	add	objptr, ##29724
08e40     F2 FA 09 FB | 	rdlong	result1, objptr wz
08e44     3A 00 00 FF 
08e48     1C E4 85 F1 | 	sub	objptr, ##29724
08e4c     FF 04 06 A6 |  if_e	mov	_var03, #255
08e50     18 00 06 A6 |  if_e	mov	_var01, #24
08e54     68 00 90 AD |  if_e	jmp	#LR__0700
08e58     3A 00 00 FF 
08e5c     1C E4 05 F1 | 	add	objptr, ##29724
08e60     F2 FA 01 FB | 	rdlong	result1, objptr
08e64     01 FA 85 F1 | 	sub	result1, #1
08e68     F2 FA 61 FC | 	wrlong	result1, objptr
08e6c     FD FE 01 F6 | 	mov	result3, result1
08e70     01 FE 65 F0 | 	shl	result3, #1
08e74     FD FE 01 F1 | 	add	result3, result1
08e78     02 FE 65 F0 | 	shl	result3, #2
08e7c     0C 00 00 FF 
08e80     0C E4 85 F1 | 	sub	objptr, ##6156
08e84     F2 FE 01 F1 | 	add	result3, objptr
08e88     FF 00 02 FB | 	rdlong	_var01, result3
08e8c     04 FE 05 F1 | 	add	result3, #4
08e90     FF FE 01 FB | 	rdlong	result3, result3
08e94     FD FC 01 F6 | 	mov	result2, result1
08e98     01 FC 65 F0 | 	shl	result2, #1
08e9c     FD FC 01 F1 | 	add	result2, result1
08ea0     02 FC 65 F0 | 	shl	result2, #2
08ea4     F2 FC 01 F1 | 	add	result2, objptr
08ea8     08 FC 05 F1 | 	add	result2, #8
08eac     FE FA 01 FB | 	rdlong	result1, result2
08eb0     FF 02 02 F6 | 	mov	_var02, result3
08eb4     FD 04 02 F6 | 	mov	_var03, result1
08eb8     2E 00 00 FF 
08ebc     10 E4 85 F1 | 	sub	objptr, ##23568
08ec0                 | LR__0700
08ec0                 | ' return t1
08ec0     01 FD 01 F6 | 	mov	result2, _var02
08ec4     02 FF 01 F6 | 	mov	result3, _var03
08ec8     00 FB 01 F6 | 	mov	result1, _var01
08ecc                 | _pop_ret
08ecc     2D 00 64 FD | 	ret
08ed0                 | 
08ed0                 | ' 
08ed0                 | ' sub push(t1 as expr_result )
08ed0                 | _push
08ed0                 | ' 
08ed0                 | ' 'print "In push: "; t1.result_type
08ed0                 | ' 'print "In push: "; t1.result.uresult
08ed0                 | ' 
08ed0                 | ' if stackpointer<maxstack then 
08ed0     3A 00 00 FF 
08ed4     1C E4 05 F1 | 	add	objptr, ##29724
08ed8     F2 00 02 FB | 	rdlong	_var01, objptr
08edc     3A 00 00 FF 
08ee0     1C E4 85 F1 | 	sub	objptr, ##29724
08ee4     01 00 00 FF 
08ee8     00 00 56 F2 | 	cmps	_var01, ##512 wc
08eec     BC 00 90 3D |  if_ae	jmp	#LR__0710
08ef0     09 01 02 FB | 	rdlong	_var01, arg01
08ef4     04 12 06 F1 | 	add	arg01, #4
08ef8     09 03 02 FB | 	rdlong	_var02, arg01
08efc     04 12 06 F1 | 	add	arg01, #4
08f00     09 13 02 FB | 	rdlong	arg01, arg01
08f04     3A 00 00 FF 
08f08     1C E4 05 F1 | 	add	objptr, ##29724
08f0c     F2 04 02 FB | 	rdlong	_var03, objptr
08f10     02 07 02 F6 | 	mov	_var04, _var03
08f14     01 06 66 F0 | 	shl	_var04, #1
08f18     02 07 02 F1 | 	add	_var04, _var03
08f1c     02 06 66 F0 | 	shl	_var04, #2
08f20     0C 00 00 FF 
08f24     0C E4 85 F1 | 	sub	objptr, ##6156
08f28     F2 06 02 F1 | 	add	_var04, objptr
08f2c     03 01 62 FC | 	wrlong	_var01, _var04
08f30     0C 00 00 FF 
08f34     0C E4 05 F1 | 	add	objptr, ##6156
08f38     F2 06 02 FB | 	rdlong	_var04, objptr
08f3c     03 05 02 F6 | 	mov	_var03, _var04
08f40     01 04 66 F0 | 	shl	_var03, #1
08f44     03 05 02 F1 | 	add	_var03, _var04
08f48     02 04 66 F0 | 	shl	_var03, #2
08f4c     0C 00 00 FF 
08f50     0C E4 85 F1 | 	sub	objptr, ##6156
08f54     F2 04 02 F1 | 	add	_var03, objptr
08f58     04 04 06 F1 | 	add	_var03, #4
08f5c     02 03 62 FC | 	wrlong	_var02, _var03
08f60     0C 00 00 FF 
08f64     0C E4 05 F1 | 	add	objptr, ##6156
08f68     F2 06 02 FB | 	rdlong	_var04, objptr
08f6c     03 05 02 F6 | 	mov	_var03, _var04
08f70     01 04 66 F0 | 	shl	_var03, #1
08f74     03 05 02 F1 | 	add	_var03, _var04
08f78     02 04 66 F0 | 	shl	_var03, #2
08f7c     0C 00 00 FF 
08f80     0C E4 85 F1 | 	sub	objptr, ##6156
08f84     F2 04 02 F1 | 	add	_var03, objptr
08f88     08 04 06 F1 | 	add	_var03, #8
08f8c     02 13 62 FC | 	wrlong	arg01, _var03
08f90     0C 00 00 FF 
08f94     0C E4 05 F1 | 	add	objptr, ##6156
08f98     F2 00 02 FB | 	rdlong	_var01, objptr
08f9c     01 00 06 F1 | 	add	_var01, #1
08fa0     F2 00 62 FC | 	wrlong	_var01, objptr
08fa4     3A 00 00 FF 
08fa8     1C E4 85 F1 | 	sub	objptr, ##29724
08fac                 | LR__0710
08fac                 | _push_ret
08fac     2D 00 64 FD | 	ret
08fb0                 | 
08fb0                 | ' 
08fb0                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08fb0                 | ' 
08fb0                 | ' sub do_push
08fb0                 | _do_push
08fb0                 | ' if stackpointer<maxstack then 
08fb0     3A 00 00 FF 
08fb4     1C E4 05 F1 | 	add	objptr, ##29724
08fb8     F2 00 02 FB | 	rdlong	_var01, objptr
08fbc     3A 00 00 FF 
08fc0     1C E4 85 F1 | 	sub	objptr, ##29724
08fc4     01 00 00 FF 
08fc8     00 00 56 F2 | 	cmps	_var01, ##512 wc
08fcc     F8 00 90 3D |  if_ae	jmp	#LR__0720
08fd0     41 00 00 FF 
08fd4     44 E4 05 F1 | 	add	objptr, ##33348
08fd8     F2 02 02 FB | 	rdlong	_var02, objptr
08fdc     01 05 02 F6 | 	mov	_var03, _var02
08fe0     01 04 66 F0 | 	shl	_var03, #1
08fe4     01 05 02 F1 | 	add	_var03, _var02
08fe8     02 04 66 F0 | 	shl	_var03, #2
08fec     03 00 00 FF 
08ff0     04 E4 85 F1 | 	sub	objptr, ##1540
08ff4     F2 04 02 F1 | 	add	_var03, objptr
08ff8     02 01 02 FB | 	rdlong	_var01, _var03
08ffc     04 04 06 F1 | 	add	_var03, #4
09000     02 07 02 FB | 	rdlong	_var04, _var03
09004     01 05 02 F6 | 	mov	_var03, _var02
09008     01 04 66 F0 | 	shl	_var03, #1
0900c     01 05 02 F1 | 	add	_var03, _var02
09010     02 04 66 F0 | 	shl	_var03, #2
09014     F2 04 02 F1 | 	add	_var03, objptr
09018     08 04 06 F1 | 	add	_var03, #8
0901c     02 03 02 FB | 	rdlong	_var02, _var03
09020     04 00 00 FF 
09024     24 E4 85 F1 | 	sub	objptr, ##2084
09028     F2 04 02 FB | 	rdlong	_var03, objptr
0902c     02 09 02 F6 | 	mov	_var05, _var03
09030     01 08 66 F0 | 	shl	_var05, #1
09034     02 09 02 F1 | 	add	_var05, _var03
09038     02 08 66 F0 | 	shl	_var05, #2
0903c     0C 00 00 FF 
09040     0C E4 85 F1 | 	sub	objptr, ##6156
09044     F2 08 02 F1 | 	add	_var05, objptr
09048     04 01 62 FC | 	wrlong	_var01, _var05
0904c     0C 00 00 FF 
09050     0C E4 05 F1 | 	add	objptr, ##6156
09054     F2 08 02 FB | 	rdlong	_var05, objptr
09058     04 05 02 F6 | 	mov	_var03, _var05
0905c     01 04 66 F0 | 	shl	_var03, #1
09060     04 05 02 F1 | 	add	_var03, _var05
09064     02 04 66 F0 | 	shl	_var03, #2
09068     0C 00 00 FF 
0906c     0C E4 85 F1 | 	sub	objptr, ##6156
09070     F2 04 02 F1 | 	add	_var03, objptr
09074     04 04 06 F1 | 	add	_var03, #4
09078     02 07 62 FC | 	wrlong	_var04, _var03
0907c     0C 00 00 FF 
09080     0C E4 05 F1 | 	add	objptr, ##6156
09084     F2 08 02 FB | 	rdlong	_var05, objptr
09088     04 07 02 F6 | 	mov	_var04, _var05
0908c     01 06 66 F0 | 	shl	_var04, #1
09090     04 07 02 F1 | 	add	_var04, _var05
09094     02 06 66 F0 | 	shl	_var04, #2
09098     0C 00 00 FF 
0909c     0C E4 85 F1 | 	sub	objptr, ##6156
090a0     F2 06 02 F1 | 	add	_var04, objptr
090a4     08 06 06 F1 | 	add	_var04, #8
090a8     03 03 62 FC | 	wrlong	_var02, _var04
090ac     0C 00 00 FF 
090b0     0C E4 05 F1 | 	add	objptr, ##6156
090b4     F2 00 02 FB | 	rdlong	_var01, objptr
090b8     01 00 06 F1 | 	add	_var01, #1
090bc     F2 00 62 FC | 	wrlong	_var01, objptr
090c0     3A 00 00 FF 
090c4     1C E4 85 F1 | 	sub	objptr, ##29724
090c8                 | LR__0720
090c8                 | _do_push_ret
090c8     2D 00 64 FD | 	ret
090cc                 | 
090cc                 | ' 
090cc                 | '   
090cc                 | ' sub csave_block(address as ulong)
090cc                 | _csave_block
090cc     09 01 02 F6 | 	mov	_var01, arg01
090d0                 | ' 
090d0                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
090d0                 | ' ' we enter it at the state of playing 1 kHz header tone
090d0                 | ' 
090d0                 | ' for i=0 to 63 step 2
090d0     00 02 06 F6 | 	mov	_var02, #0
090d4                 | LR__0730
090d4                 | '   do: loop until lpeek(base+32*7)>32768
090d4     2D 00 00 FF 
090d8     D4 E5 05 F1 | 	add	objptr, ##23508
090dc     97 0C 48 FB | 	callpa	#(@LR__0732-@LR__0731)>>2,fcache_load_ptr_
090e0                 | LR__0731
090e0     F2 12 02 FB | 	rdlong	arg01, objptr
090e4     E0 12 06 F1 | 	add	arg01, #224
090e8     09 FB 01 FB | 	rdlong	result1, arg01
090ec     40 00 00 FF 
090f0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
090f4     E8 FF 9F CD |  if_b	jmp	#LR__0731
090f8                 | LR__0732
090f8     00 13 02 F6 | 	mov	arg01, _var01
090fc     01 05 02 F6 | 	mov	_var03, _var02
09100     02 04 66 F0 | 	shl	_var03, #2
09104     02 13 02 F1 | 	add	arg01, _var03
09108     09 07 02 FB | 	rdlong	_var04, arg01
0910c     24 00 00 FF 
09110     AC E4 05 F1 | 	add	objptr, ##18604
09114     F2 06 62 FC | 	wrlong	_var04, objptr
09118     52 00 00 FF 
0911c     80 E4 85 F1 | 	sub	objptr, ##42112
09120                 | '   q=lpeek(address+4*i)
09120                 | '      for bit=0 to 31
09120     00 08 06 F6 | 	mov	_var05, #0
09124     97 84 48 FB | 	callpa	#(@LR__0737-@LR__0733)>>2,fcache_load_ptr_
09128                 | LR__0733
09128                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09128     52 00 00 FF 
0912c     80 E4 05 F1 | 	add	objptr, ##42112
09130     F2 06 02 FB | 	rdlong	_var04, objptr
09134     52 00 00 FF 
09138     80 E4 85 F1 | 	sub	objptr, ##42112
0913c     04 05 C2 F9 | 	decod	_var03, _var05
09140     02 07 CA F7 | 	test	_var04, _var03 wz
09144     60 00 90 AD |  if_e	jmp	#LR__0734
09148     04 05 02 F6 | 	mov	_var03, _var05
0914c     02 04 66 F0 | 	shl	_var03, #2
09150     4E 00 00 FF 
09154     70 E4 05 F1 | 	add	objptr, ##40048
09158     F2 04 02 F1 | 	add	_var03, objptr
0915c     02 FF 48 FC | 	wrbyte	#127, _var03
09160     04 05 02 F6 | 	mov	_var03, _var05
09164     02 04 66 F0 | 	shl	_var03, #2
09168     01 04 06 F1 | 	add	_var03, #1
0916c     F2 04 02 F1 | 	add	_var03, objptr
09170     02 01 49 FC | 	wrbyte	#128, _var03
09174     04 05 02 F6 | 	mov	_var03, _var05
09178     02 04 66 F0 | 	shl	_var03, #2
0917c     02 04 06 F1 | 	add	_var03, #2
09180     F2 04 02 F1 | 	add	_var03, objptr
09184     02 FF 48 FC | 	wrbyte	#127, _var03
09188     04 05 02 F6 | 	mov	_var03, _var05
0918c     02 04 66 F0 | 	shl	_var03, #2
09190     03 04 06 F1 | 	add	_var03, #3
09194     F2 04 02 F1 | 	add	_var03, objptr
09198     02 01 49 FC | 	wrbyte	#128, _var03
0919c     4E 00 00 FF 
091a0     70 E4 85 F1 | 	sub	objptr, ##40048
091a4     5C 00 90 FD | 	jmp	#LR__0735
091a8                 | LR__0734
091a8     04 05 02 F6 | 	mov	_var03, _var05
091ac     02 04 66 F0 | 	shl	_var03, #2
091b0     4E 00 00 FF 
091b4     70 E4 05 F1 | 	add	objptr, ##40048
091b8     F2 04 02 F1 | 	add	_var03, objptr
091bc     02 01 49 FC | 	wrbyte	#128, _var03
091c0     04 05 02 F6 | 	mov	_var03, _var05
091c4     02 04 66 F0 | 	shl	_var03, #2
091c8     01 04 06 F1 | 	add	_var03, #1
091cc     F2 04 02 F1 | 	add	_var03, objptr
091d0     02 01 49 FC | 	wrbyte	#128, _var03
091d4     04 05 02 F6 | 	mov	_var03, _var05
091d8     02 04 66 F0 | 	shl	_var03, #2
091dc     02 04 06 F1 | 	add	_var03, #2
091e0     F2 04 02 F1 | 	add	_var03, objptr
091e4     02 FF 48 FC | 	wrbyte	#127, _var03
091e8     04 05 02 F6 | 	mov	_var03, _var05
091ec     02 04 66 F0 | 	shl	_var03, #2
091f0     03 04 06 F1 | 	add	_var03, #3
091f4     F2 04 02 F1 | 	add	_var03, objptr
091f8     02 FF 48 FC | 	wrbyte	#127, _var03
091fc     4E 00 00 FF 
09200     70 E4 85 F1 | 	sub	objptr, ##40048
09204                 | LR__0735
09204     01 08 06 F1 | 	add	_var05, #1
09208     20 08 56 F2 | 	cmps	_var05, #32 wc
0920c     18 FF 9F CD |  if_b	jmp	#LR__0733
09210                 | '   do: loop until lpeek(base+32*7)<32768
09210     2D 00 00 FF 
09214     D4 E5 05 F1 | 	add	objptr, ##23508
09218                 | LR__0736
09218     F2 12 02 FB | 	rdlong	arg01, objptr
0921c     E0 12 06 F1 | 	add	arg01, #224
09220     09 FB 01 FB | 	rdlong	result1, arg01
09224     40 00 00 FF 
09228     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0922c     E8 FF 9F 3D |  if_ae	jmp	#LR__0736
09230                 | LR__0737
09230     00 13 02 F6 | 	mov	arg01, _var01
09234     04 12 06 F1 | 	add	arg01, #4
09238     01 05 02 F6 | 	mov	_var03, _var02
0923c     02 04 66 F0 | 	shl	_var03, #2
09240     02 13 02 F1 | 	add	arg01, _var03
09244     09 07 02 FB | 	rdlong	_var04, arg01
09248     24 00 00 FF 
0924c     AC E4 05 F1 | 	add	objptr, ##18604
09250     F2 06 62 FC | 	wrlong	_var04, objptr
09254     52 00 00 FF 
09258     80 E4 85 F1 | 	sub	objptr, ##42112
0925c                 | '   q=lpeek(address+4+4*i)
0925c                 | '      for bit=0 to 31
0925c     00 08 06 F6 | 	mov	_var05, #0
09260     97 94 48 FB | 	callpa	#(@LR__0741-@LR__0738)>>2,fcache_load_ptr_
09264                 | LR__0738
09264                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09264     52 00 00 FF 
09268     80 E4 05 F1 | 	add	objptr, ##42112
0926c     F2 06 02 FB | 	rdlong	_var04, objptr
09270     52 00 00 FF 
09274     80 E4 85 F1 | 	sub	objptr, ##42112
09278     04 05 C2 F9 | 	decod	_var03, _var05
0927c     02 07 CA F7 | 	test	_var04, _var03 wz
09280     80 00 90 AD |  if_e	jmp	#LR__0739
09284     04 0B 02 F6 | 	mov	_var06, _var05
09288     02 0A 66 F0 | 	shl	_var06, #2
0928c     80 04 06 F6 | 	mov	_var03, #128
09290     05 05 02 F1 | 	add	_var03, _var06
09294     4E 00 00 FF 
09298     70 E4 05 F1 | 	add	objptr, ##40048
0929c     F2 04 02 F1 | 	add	_var03, objptr
092a0     02 FF 48 FC | 	wrbyte	#127, _var03
092a4     04 0B 02 F6 | 	mov	_var06, _var05
092a8     02 0A 66 F0 | 	shl	_var06, #2
092ac     80 04 06 F6 | 	mov	_var03, #128
092b0     05 05 02 F1 | 	add	_var03, _var06
092b4     01 04 06 F1 | 	add	_var03, #1
092b8     F2 04 02 F1 | 	add	_var03, objptr
092bc     02 01 49 FC | 	wrbyte	#128, _var03
092c0     04 0B 02 F6 | 	mov	_var06, _var05
092c4     02 0A 66 F0 | 	shl	_var06, #2
092c8     80 04 06 F6 | 	mov	_var03, #128
092cc     05 05 02 F1 | 	add	_var03, _var06
092d0     02 04 06 F1 | 	add	_var03, #2
092d4     F2 04 02 F1 | 	add	_var03, objptr
092d8     02 FF 48 FC | 	wrbyte	#127, _var03
092dc     04 0B 02 F6 | 	mov	_var06, _var05
092e0     02 0A 66 F0 | 	shl	_var06, #2
092e4     80 04 06 F6 | 	mov	_var03, #128
092e8     05 05 02 F1 | 	add	_var03, _var06
092ec     03 04 06 F1 | 	add	_var03, #3
092f0     F2 04 02 F1 | 	add	_var03, objptr
092f4     02 01 49 FC | 	wrbyte	#128, _var03
092f8     4E 00 00 FF 
092fc     70 E4 85 F1 | 	sub	objptr, ##40048
09300     7C 00 90 FD | 	jmp	#LR__0740
09304                 | LR__0739
09304     04 0B 02 F6 | 	mov	_var06, _var05
09308     02 0A 66 F0 | 	shl	_var06, #2
0930c     80 04 06 F6 | 	mov	_var03, #128
09310     05 05 02 F1 | 	add	_var03, _var06
09314     4E 00 00 FF 
09318     70 E4 05 F1 | 	add	objptr, ##40048
0931c     F2 04 02 F1 | 	add	_var03, objptr
09320     02 01 49 FC | 	wrbyte	#128, _var03
09324     04 0B 02 F6 | 	mov	_var06, _var05
09328     02 0A 66 F0 | 	shl	_var06, #2
0932c     80 04 06 F6 | 	mov	_var03, #128
09330     05 05 02 F1 | 	add	_var03, _var06
09334     01 04 06 F1 | 	add	_var03, #1
09338     F2 04 02 F1 | 	add	_var03, objptr
0933c     02 01 49 FC | 	wrbyte	#128, _var03
09340     04 0B 02 F6 | 	mov	_var06, _var05
09344     02 0A 66 F0 | 	shl	_var06, #2
09348     80 04 06 F6 | 	mov	_var03, #128
0934c     05 05 02 F1 | 	add	_var03, _var06
09350     02 04 06 F1 | 	add	_var03, #2
09354     F2 04 02 F1 | 	add	_var03, objptr
09358     02 FF 48 FC | 	wrbyte	#127, _var03
0935c     04 0B 02 F6 | 	mov	_var06, _var05
09360     02 0A 66 F0 | 	shl	_var06, #2
09364     80 04 06 F6 | 	mov	_var03, #128
09368     05 05 02 F1 | 	add	_var03, _var06
0936c     03 04 06 F1 | 	add	_var03, #3
09370     F2 04 02 F1 | 	add	_var03, objptr
09374     02 FF 48 FC | 	wrbyte	#127, _var03
09378     4E 00 00 FF 
0937c     70 E4 85 F1 | 	sub	objptr, ##40048
09380                 | LR__0740
09380     01 08 06 F1 | 	add	_var05, #1
09384     20 08 56 F2 | 	cmps	_var05, #32 wc
09388     D8 FE 9F CD |  if_b	jmp	#LR__0738
0938c                 | LR__0741
0938c     02 02 06 F1 | 	add	_var02, #2
09390     40 02 56 F2 | 	cmps	_var02, #64 wc
09394     3C FD 9F CD |  if_b	jmp	#LR__0730
09398                 | ' do: loop until lpeek(base+32*7)>32768
09398     2D 00 00 FF 
0939c     D4 E5 05 F1 | 	add	objptr, ##23508
093a0     97 84 48 FB | 	callpa	#(@LR__0750-@LR__0742)>>2,fcache_load_ptr_
093a4                 | LR__0742
093a4     F2 12 02 FB | 	rdlong	arg01, objptr
093a8     E0 12 06 F1 | 	add	arg01, #224
093ac     09 FB 01 FB | 	rdlong	result1, arg01
093b0     40 00 00 FF 
093b4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
093b8     E8 FF 9F CD |  if_b	jmp	#LR__0742
093bc     2D 00 00 FF 
093c0     D4 E5 85 F1 | 	sub	objptr, ##23508
093c4                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
093c4     00 02 06 F6 | 	mov	_var02, #0
093c8                 | LR__0743
093c8     01 07 52 F6 | 	abs	_var04, _var02 wc
093cc     07 06 06 F5 | 	and	_var04, #7
093d0     03 07 82 F6 | 	negc	_var04, _var04
093d4     04 06 56 F2 | 	cmps	_var04, #4 wc
093d8     20 00 90 3D |  if_ae	jmp	#LR__0744
093dc     01 0B 02 F6 | 	mov	_var06, _var02
093e0     4E 00 00 FF 
093e4     70 E4 05 F1 | 	add	objptr, ##40048
093e8     F2 0A 02 F1 | 	add	_var06, objptr
093ec     05 FF 48 FC | 	wrbyte	#127, _var06
093f0     4E 00 00 FF 
093f4     70 E4 85 F1 | 	sub	objptr, ##40048
093f8     1C 00 90 FD | 	jmp	#LR__0745
093fc                 | LR__0744
093fc     01 0B 02 F6 | 	mov	_var06, _var02
09400     4E 00 00 FF 
09404     70 E4 05 F1 | 	add	objptr, ##40048
09408     F2 0A 02 F1 | 	add	_var06, objptr
0940c     05 01 49 FC | 	wrbyte	#128, _var06
09410     4E 00 00 FF 
09414     70 E4 85 F1 | 	sub	objptr, ##40048
09418                 | LR__0745
09418     01 02 06 F1 | 	add	_var02, #1
0941c     80 02 56 F2 | 	cmps	_var02, #128 wc
09420     A4 FF 9F CD |  if_b	jmp	#LR__0743
09424                 | ' 
09424                 | ' do: loop until lpeek(base+32*7)<32768
09424     2D 00 00 FF 
09428     D4 E5 05 F1 | 	add	objptr, ##23508
0942c                 | LR__0746
0942c     F2 12 02 FB | 	rdlong	arg01, objptr
09430     E0 12 06 F1 | 	add	arg01, #224
09434     09 FB 01 FB | 	rdlong	result1, arg01
09438     40 00 00 FF 
0943c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09440     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
09444     2D 00 00 FF 
09448     D4 E5 85 F1 | 	sub	objptr, ##23508
0944c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0944c     80 02 06 F6 | 	mov	_var02, #128
09450                 | LR__0747
09450     01 07 52 F6 | 	abs	_var04, _var02 wc
09454     07 06 06 F5 | 	and	_var04, #7
09458     03 07 82 F6 | 	negc	_var04, _var04
0945c     04 06 56 F2 | 	cmps	_var04, #4 wc
09460     20 00 90 3D |  if_ae	jmp	#LR__0748
09464     01 0B 02 F6 | 	mov	_var06, _var02
09468     4E 00 00 FF 
0946c     70 E4 05 F1 | 	add	objptr, ##40048
09470     F2 0A 02 F1 | 	add	_var06, objptr
09474     05 FF 48 FC | 	wrbyte	#127, _var06
09478     4E 00 00 FF 
0947c     70 E4 85 F1 | 	sub	objptr, ##40048
09480     1C 00 90 FD | 	jmp	#LR__0749
09484                 | LR__0748
09484     01 0B 02 F6 | 	mov	_var06, _var02
09488     4E 00 00 FF 
0948c     70 E4 05 F1 | 	add	objptr, ##40048
09490     F2 0A 02 F1 | 	add	_var06, objptr
09494     05 01 49 FC | 	wrbyte	#128, _var06
09498     4E 00 00 FF 
0949c     70 E4 85 F1 | 	sub	objptr, ##40048
094a0                 | LR__0749
094a0     01 02 06 F1 | 	add	_var02, #1
094a4     00 03 16 F2 | 	cmp	_var02, #256 wc
094a8     A4 FF 9F CD |  if_b	jmp	#LR__0747
094ac                 | LR__0750
094ac                 | _csave_block_ret
094ac     2D 00 64 FD | 	ret
094b0                 | 
094b0                 | ' 
094b0                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
094b0                 | _csave_addtoblock
094b0     04 4A 05 F6 | 	mov	COUNT_, #4
094b4     A8 00 A0 FD | 	call	#pushregs_
094b8     09 1F 02 F6 | 	mov	local01, arg01
094bc                 | ' 
094bc                 | ' 
094bc                 | ' if force=0 then
094bc     07 14 4E F7 | 	zerox	arg02, #7 wz
094c0     78 00 90 5D |  if_ne	jmp	#LR__0760
094c4     50 00 00 FF 
094c8     70 E5 05 F1 | 	add	objptr, ##41328
094cc     F2 14 02 FB | 	rdlong	arg02, objptr
094d0     02 00 00 FF 
094d4     00 E4 85 F1 | 	sub	objptr, ##1024
094d8     F2 14 02 F1 | 	add	arg02, objptr
094dc     0A 1F 42 FC | 	wrbyte	local01, arg02
094e0     02 00 00 FF 
094e4     00 E4 05 F1 | 	add	objptr, ##1024
094e8     F2 1E 02 FB | 	rdlong	local01, objptr
094ec     01 1E 06 F1 | 	add	local01, #1
094f0     F2 1E 62 FC | 	wrlong	local01, objptr
094f4                 | '   block(blockptr)=d
094f4                 | '   blockptr+=1
094f4                 | '   if blockptr>=255 then
094f4     50 00 00 FF 
094f8     70 E5 85 F1 | 	sub	objptr, ##41328
094fc     FF 1E 16 F2 | 	cmp	local01, #255 wc
09500     E4 00 90 CD |  if_b	jmp	#LR__0764
09504     4E 00 00 FF 
09508     70 E5 05 F1 | 	add	objptr, ##40304
0950c     F2 12 02 F6 | 	mov	arg01, objptr
09510     4E 00 00 FF 
09514     70 E5 85 F1 | 	sub	objptr, ##40304
09518     B0 FB BF FD | 	call	#_csave_block
0951c     50 00 00 FF 
09520     70 E5 05 F1 | 	add	objptr, ##41328
09524     F2 00 68 FC | 	wrlong	#0, objptr
09528     50 00 00 FF 
0952c     70 E5 85 F1 | 	sub	objptr, ##41328
09530     2C 13 06 F6 | 	mov	arg01, #300
09534     10 C0 B0 FD | 	call	#__system___waitms
09538     AC 00 90 FD | 	jmp	#LR__0764
0953c                 | LR__0760
0953c     50 00 00 FF 
09540     70 E5 05 F1 | 	add	objptr, ##41328
09544     F2 20 02 FB | 	rdlong	local02, objptr
09548     02 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1024
09550     F2 20 02 F1 | 	add	local02, objptr
09554     10 1F 42 FC | 	wrbyte	local01, local02
09558                 | '   block(blockptr)=d
09558                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09558     02 00 00 FF 
0955c     00 E4 05 F1 | 	add	objptr, ##1024
09560     F2 22 02 FB | 	rdlong	local03, objptr
09564     50 00 00 FF 
09568     70 E5 85 F1 | 	sub	objptr, ##41328
0956c     FF 22 16 F2 | 	cmp	local03, #255 wc
09570     40 00 90 3D |  if_ae	jmp	#LR__0763
09574     50 00 00 FF 
09578     70 E5 05 F1 | 	add	objptr, ##41328
0957c     F2 24 02 FB | 	rdlong	local04, objptr
09580     50 00 00 FF 
09584     70 E5 85 F1 | 	sub	objptr, ##41328
09588                 | LR__0761
09588     00 25 56 F2 | 	cmps	local04, #256 wc
0958c     24 00 90 3D |  if_ae	jmp	#LR__0762
09590     12 21 02 F6 | 	mov	local02, local04
09594     4E 00 00 FF 
09598     70 E5 05 F1 | 	add	objptr, ##40304
0959c     F2 20 02 F1 | 	add	local02, objptr
095a0     10 01 48 FC | 	wrbyte	#0, local02
095a4     01 24 06 F1 | 	add	local04, #1
095a8     4E 00 00 FF 
095ac     70 E5 85 F1 | 	sub	objptr, ##40304
095b0     D4 FF 9F FD | 	jmp	#LR__0761
095b4                 | LR__0762
095b4                 | LR__0763
095b4     4E 00 00 FF 
095b8     70 E5 05 F1 | 	add	objptr, ##40304
095bc     F2 12 02 F6 | 	mov	arg01, objptr
095c0     4E 00 00 FF 
095c4     70 E5 85 F1 | 	sub	objptr, ##40304
095c8     00 FB BF FD | 	call	#_csave_block
095cc     50 00 00 FF 
095d0     70 E5 05 F1 | 	add	objptr, ##41328
095d4     F2 00 68 FC | 	wrlong	#0, objptr
095d8     50 00 00 FF 
095dc     70 E5 85 F1 | 	sub	objptr, ##41328
095e0     2C 13 06 F6 | 	mov	arg01, #300
095e4     60 BF B0 FD | 	call	#__system___waitms
095e8                 | LR__0764
095e8     A7 F0 03 F6 | 	mov	ptra, fp
095ec     B2 00 A0 FD | 	call	#popregs_
095f0                 | _csave_addtoblock_ret
095f0     2D 00 64 FD | 	ret
095f4                 | 
095f4                 | ' 
095f4                 | ' sub test_csave
095f4                 | _test_csave
095f4     04 4A 05 F6 | 	mov	COUNT_, #4
095f8     A8 00 A0 FD | 	call	#pushregs_
095fc     C0 F0 07 F1 | 	add	ptra, #192
09600                 | ' 'dim fileheader,savestart, saveptr as ulong
09600                 | ' 
09600                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09600     41 00 00 FF 
09604     48 E4 05 F1 | 	add	objptr, ##33352
09608     F2 12 02 FB | 	rdlong	arg01, objptr
0960c     41 00 00 FF 
09610     48 E4 85 F1 | 	sub	objptr, ##33352
09614     04 89 B0 FD | 	call	#_pslpeek
09618     FF FF 7F FF 
0961c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09620     0C 00 90 5D |  if_ne	jmp	#LR__0770
09624     1B 12 06 F6 | 	mov	arg01, #27
09628     34 87 B0 FD | 	call	#_printerror
0962c     0C 03 90 FD | 	jmp	#LR__0782
09630                 | LR__0770
09630     04 F8 BF FD | 	call	#_pop
09634     FF 1E 02 F6 | 	mov	local01, result3
09638     90 4E 05 F1 | 	add	fp, #144
0963c     A7 FA 61 FC | 	wrlong	result1, fp
09640     04 4E 05 F1 | 	add	fp, #4
09644     A7 FC 61 FC | 	wrlong	result2, fp
09648     04 4E 05 F1 | 	add	fp, #4
0964c     A7 1E 62 FC | 	wrlong	local01, fp
09650                 | ' t1=pop()
09650                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
09650     98 4E 85 F1 | 	sub	fp, #152
09654     1F 1E 0E F2 | 	cmp	local01, #31 wz
09658     24 01 00 5F 
0965c     F2 1E 06 56 |  if_ne	mov	local01, ##@LR__4277
09660     8C 4E 05 51 |  if_ne	add	fp, #140
09664     A7 1E 62 5C |  if_ne	wrlong	local01, fp
09668     8C 4E 85 51 |  if_ne	sub	fp, #140
0966c     90 4E 05 A1 |  if_e	add	fp, #144
09670     A7 1E 02 AB |  if_e	rdlong	local01, fp
09674     04 4E 85 A1 |  if_e	sub	fp, #4
09678     A7 1E 62 AC |  if_e	wrlong	local01, fp
0967c     8C 4E 85 A1 |  if_e	sub	fp, #140
09680                 | ' 
09680                 | ' ' prepare 1 kHz header wave
09680                 | ' 
09680                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09680     A7 00 68 FC | 	wrlong	#0, fp
09684     97 34 48 FB | 	callpa	#(@LR__0774-@LR__0771)>>2,fcache_load_ptr_
09688                 | LR__0771
09688     A7 1E 02 FB | 	rdlong	local01, fp
0968c     0F 1F 52 F6 | 	abs	local01, local01 wc
09690     07 1E 06 F5 | 	and	local01, #7
09694     0F 1F 82 F6 | 	negc	local01, local01
09698     04 1E 56 F2 | 	cmps	local01, #4 wc
0969c     20 00 90 3D |  if_ae	jmp	#LR__0772
096a0     A7 1E 02 FB | 	rdlong	local01, fp
096a4     4E 00 00 FF 
096a8     70 E4 05 F1 | 	add	objptr, ##40048
096ac     F2 1E 02 F1 | 	add	local01, objptr
096b0     0F FF 48 FC | 	wrbyte	#127, local01
096b4     4E 00 00 FF 
096b8     70 E4 85 F1 | 	sub	objptr, ##40048
096bc     1C 00 90 FD | 	jmp	#LR__0773
096c0                 | LR__0772
096c0     A7 1E 02 FB | 	rdlong	local01, fp
096c4     4E 00 00 FF 
096c8     70 E4 05 F1 | 	add	objptr, ##40048
096cc     F2 1E 02 F1 | 	add	local01, objptr
096d0     0F 01 49 FC | 	wrbyte	#128, local01
096d4     4E 00 00 FF 
096d8     70 E4 85 F1 | 	sub	objptr, ##40048
096dc                 | LR__0773
096dc     A7 1E 02 FB | 	rdlong	local01, fp
096e0     01 1E 06 F1 | 	add	local01, #1
096e4     A7 1E 62 FC | 	wrlong	local01, fp
096e8     00 1F 56 F2 | 	cmps	local01, #256 wc
096ec     98 FF 9F CD |  if_b	jmp	#LR__0771
096f0                 | LR__0774
096f0     4E 00 00 FF 
096f4     70 E4 05 F1 | 	add	objptr, ##40048
096f8     F2 14 02 F6 | 	mov	arg02, objptr
096fc     07 12 06 F6 | 	mov	arg01, #7
09700     0F 00 00 FF 
09704     40 17 06 F6 | 	mov	arg03, ##8000
09708     0E 18 C6 F9 | 	decod	arg04, #14
0970c     00 1B 06 F6 | 	mov	arg05, #256
09710     00 1C 06 F6 | 	mov	arg06, #0
09714     42 00 00 FF 
09718     B0 E5 85 F1 | 	sub	objptr, ##34224
0971c     9C B7 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
09720     0B 00 00 FF 
09724     C0 E4 85 F1 | 	sub	objptr, ##5824
09728     05 00 00 FF 
0972c     B8 13 06 F6 | 	mov	arg01, ##3000
09730     14 BE B0 FD | 	call	#__system___waitms
09734     50 00 00 FF 
09738     70 E5 05 F1 | 	add	objptr, ##41328
0973c     F2 00 68 FC | 	wrlong	#0, objptr
09740     50 00 00 FF 
09744     70 E5 85 F1 | 	sub	objptr, ##41328
09748     72 12 06 F6 | 	mov	arg01, #114
0974c     00 14 06 F6 | 	mov	arg02, #0
09750     5C FD BF FD | 	call	#_csave_addtoblock
09754     62 12 06 F6 | 	mov	arg01, #98
09758     00 14 06 F6 | 	mov	arg02, #0
0975c     50 FD BF FD | 	call	#_csave_addtoblock
09760     61 12 06 F6 | 	mov	arg01, #97
09764     00 14 06 F6 | 	mov	arg02, #0
09768     44 FD BF FD | 	call	#_csave_addtoblock
0976c     0D 12 06 F6 | 	mov	arg01, #13
09770     00 14 06 F6 | 	mov	arg02, #0
09774     38 FD BF FD | 	call	#_csave_addtoblock
09778                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
09778                 | ' waitms 3000 
09778                 | ' 
09778                 | ' blockptr=0
09778                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
09778                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
09778     A7 02 68 FC | 	wrlong	#1, fp
0977c     8C 4E 05 F1 | 	add	fp, #140
09780     A7 12 02 FB | 	rdlong	arg01, fp
09784     8C 4E 85 F1 | 	sub	fp, #140
09788     09 21 02 F6 | 	mov	local02, arg01
0978c     97 06 48 FB | 	callpa	#(@LR__0776-@LR__0775)>>2,fcache_load_ptr_
09790                 | LR__0775
09790     10 FB C9 FA | 	rdbyte	result1, local02 wz
09794     01 20 06 51 |  if_ne	add	local02, #1
09798     F4 FF 9F 5D |  if_ne	jmp	#LR__0775
0979c                 | LR__0776
0979c     09 21 82 F1 | 	sub	local02, arg01
097a0     10 23 02 F6 | 	mov	local03, local02
097a4     01 22 06 F1 | 	add	local03, #1
097a8                 | LR__0777
097a8     A7 1E 02 FB | 	rdlong	local01, fp
097ac     11 1F 52 F2 | 	cmps	local01, local03 wc
097b0     34 00 90 3D |  if_ae	jmp	#LR__0778
097b4     8C 4E 05 F1 | 	add	fp, #140
097b8     A7 12 02 FB | 	rdlong	arg01, fp
097bc     8C 4E 85 F1 | 	sub	fp, #140
097c0     A7 14 02 FB | 	rdlong	arg02, fp
097c4     01 16 06 F6 | 	mov	arg03, #1
097c8     B0 DB B0 FD | 	call	#__system__Mid_S
097cc     FD 12 C2 FA | 	rdbyte	arg01, result1
097d0     00 14 06 F6 | 	mov	arg02, #0
097d4     D8 FC BF FD | 	call	#_csave_addtoblock
097d8     A7 1E 02 FB | 	rdlong	local01, fp
097dc     01 1E 06 F1 | 	add	local01, #1
097e0     A7 1E 62 FC | 	wrlong	local01, fp
097e4     C0 FF 9F FD | 	jmp	#LR__0777
097e8                 | LR__0778
097e8     00 12 06 F6 | 	mov	arg01, #0
097ec     00 14 06 F6 | 	mov	arg02, #0
097f0     BC FC BF FD | 	call	#_csave_addtoblock
097f4     72 12 06 F6 | 	mov	arg01, #114
097f8     00 14 06 F6 | 	mov	arg02, #0
097fc     B0 FC BF FD | 	call	#_csave_addtoblock
09800     62 12 06 F6 | 	mov	arg01, #98
09804     00 14 06 F6 | 	mov	arg02, #0
09808     A4 FC BF FD | 	call	#_csave_addtoblock
0980c     73 12 06 F6 | 	mov	arg01, #115
09810     00 14 06 F6 | 	mov	arg02, #0
09814     98 FC BF FD | 	call	#_csave_addtoblock
09818     0D 12 06 F6 | 	mov	arg01, #13
0981c     00 14 06 F6 | 	mov	arg02, #0
09820     8C FC BF FD | 	call	#_csave_addtoblock
09824     41 00 00 FF 
09828     48 E4 05 F1 | 	add	objptr, ##33352
0982c     F2 1E 02 FB | 	rdlong	local01, objptr
09830     41 00 00 FF 
09834     48 E4 85 F1 | 	sub	objptr, ##33352
09838     9C 4E 05 F1 | 	add	fp, #156
0983c     A7 1E 62 FC | 	wrlong	local01, fp
09840     9C 4E 85 F1 | 	sub	fp, #156
09844                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
09844                 | ' 
09844                 | ' saveptr=programstart
09844                 | ' do
09844                 | LR__0779
09844     A0 4E 05 F1 | 	add	fp, #160
09848     A7 12 02 F6 | 	mov	arg01, fp
0984c     04 4E 85 F1 | 	sub	fp, #4
09850     A7 14 02 FB | 	rdlong	arg02, fp
09854     9C 4E 85 F1 | 	sub	fp, #156
09858     18 16 06 F6 | 	mov	arg03, #24
0985c     0B 00 00 FF 
09860     C0 E4 05 F1 | 	add	objptr, ##5824
09864     00 AF B0 FD | 	call	#_psram_spin2_read1
09868     0C 4E 05 F1 | 	add	fp, #12
0986c     A7 12 02 F6 | 	mov	arg01, fp
09870     9C 4E 05 F1 | 	add	fp, #156
09874     A7 14 02 FB | 	rdlong	arg02, fp
09878     04 4E 05 F1 | 	add	fp, #4
0987c     A7 16 02 FB | 	rdlong	arg03, fp
09880     AC 4E 85 F1 | 	sub	fp, #172
09884     E0 AE B0 FD | 	call	#_psram_spin2_read1
09888     0B 00 00 FF 
0988c     C0 E4 85 F1 | 	sub	objptr, ##5824
09890     AC 4E 05 F1 | 	add	fp, #172
09894     A7 12 02 FB | 	rdlong	arg01, fp
09898     AC 4E 85 F1 | 	sub	fp, #172
0989c     00 14 06 F6 | 	mov	arg02, #0
098a0     0C FC BF FD | 	call	#_csave_addtoblock
098a4                 | '   psram.read1(varptr(header(0)),saveptr,24)
098a4                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
098a4                 | '   csave_addtoblock(header(3),0) ' that's always <255
098a4                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
098a4     A7 00 68 FC | 	wrlong	#0, fp
098a8     AC 4E 05 F1 | 	add	fp, #172
098ac     A7 24 02 FB | 	rdlong	local04, fp
098b0     AC 4E 85 F1 | 	sub	fp, #172
098b4                 | LR__0780
098b4     A7 1E 02 FB | 	rdlong	local01, fp
098b8     12 1F 52 F2 | 	cmps	local01, local04 wc
098bc     2C 00 90 3D |  if_ae	jmp	#LR__0781
098c0     A7 22 02 FB | 	rdlong	local03, fp
098c4     0C 4E 05 F1 | 	add	fp, #12
098c8     A7 22 02 F1 | 	add	local03, fp
098cc     11 13 C2 FA | 	rdbyte	arg01, local03
098d0     00 14 06 F6 | 	mov	arg02, #0
098d4     0C 4E 85 F1 | 	sub	fp, #12
098d8     D4 FB BF FD | 	call	#_csave_addtoblock
098dc     A7 22 02 FB | 	rdlong	local03, fp
098e0     01 22 06 F1 | 	add	local03, #1
098e4     A7 22 62 FC | 	wrlong	local03, fp
098e8     C8 FF 9F FD | 	jmp	#LR__0780
098ec                 | LR__0781
098ec     B4 4E 05 F1 | 	add	fp, #180
098f0     A7 1E 02 FB | 	rdlong	local01, fp
098f4     18 4E 85 F1 | 	sub	fp, #24
098f8     A7 1E 62 FC | 	wrlong	local01, fp
098fc     18 4E 05 F1 | 	add	fp, #24
09900     A7 1E 02 FB | 	rdlong	local01, fp
09904     B4 4E 85 F1 | 	sub	fp, #180
09908     FF FF 3F FF 
0990c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09910     30 FF 9F 5D |  if_ne	jmp	#LR__0779
09914     00 12 06 F6 | 	mov	arg01, #0
09918     01 14 06 F6 | 	mov	arg02, #1
0991c     90 FB BF FD | 	call	#_csave_addtoblock
09920     2D 00 00 FF 
09924     D4 E5 05 F1 | 	add	objptr, ##23508
09928     F2 12 02 FB | 	rdlong	arg01, objptr
0992c     2D 00 00 FF 
09930     D4 E5 85 F1 | 	sub	objptr, ##23508
09934     F4 12 06 F1 | 	add	arg01, #244
09938     09 01 58 FC | 	wrword	#0, arg01
0993c                 | LR__0782
0993c     A7 F0 03 F6 | 	mov	ptra, fp
09940     B2 00 A0 FD | 	call	#popregs_
09944                 | _test_csave_ret
09944     2D 00 64 FD | 	ret
09948                 | 
09948                 | ' 
09948                 | ' ' ----------------- Save the program
09948                 | ' 
09948                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09948                 | _do_save
09948     02 4A 05 F6 | 	mov	COUNT_, #2
0994c     A8 00 A0 FD | 	call	#pushregs_
09950     01 00 00 FF 
09954     BC F0 07 F1 | 	add	ptra, ##700
09958     01 00 00 FF 
0995c     10 4E 05 F1 | 	add	fp, ##528
09960     B1 B0 86 FF 
09964     A7 E4 68 FC | 	wrlong	##224486002, fp
09968     01 00 00 FF 
0996c     10 4E 85 F1 | 	sub	fp, ##528
09970     C4 F4 BF FD | 	call	#_pop
09974     FF 16 02 F6 | 	mov	arg03, result3
09978     A7 FA 61 FC | 	wrlong	result1, fp
0997c     04 4E 05 F1 | 	add	fp, #4
09980     A7 FC 61 FC | 	wrlong	result2, fp
09984     04 4E 05 F1 | 	add	fp, #4
09988     A7 16 62 FC | 	wrlong	arg03, fp
0998c     08 4E 85 F1 | 	sub	fp, #8
09990                 | ' 
09990                 | ' fileheader=$0D616272' rba+ver'
09990                 | ' 
09990                 | ' t1=pop() 
09990                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09990     41 00 00 FF 
09994     48 E4 05 F1 | 	add	objptr, ##33352
09998     F2 12 02 FB | 	rdlong	arg01, objptr
0999c     41 00 00 FF 
099a0     48 E4 85 F1 | 	sub	objptr, ##33352
099a4     74 85 B0 FD | 	call	#_pslpeek
099a8     FF FF 7F FF 
099ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
099b0     0C 00 90 5D |  if_ne	jmp	#LR__0790
099b4     1B 12 06 F6 | 	mov	arg01, #27
099b8     A4 83 B0 FD | 	call	#_printerror
099bc     3C 02 90 FD | 	jmp	#LR__0795
099c0                 | LR__0790
099c0                 | ' if t1.result_type=result_string then
099c0     08 4E 05 F1 | 	add	fp, #8
099c4     A7 1E 02 FB | 	rdlong	local01, fp
099c8     08 4E 85 F1 | 	sub	fp, #8
099cc     1F 1E 0E F2 | 	cmp	local01, #31 wz
099d0     28 02 90 5D |  if_ne	jmp	#LR__0794
099d4                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
099d4     A7 12 02 FB | 	rdlong	arg01, fp
099d8     24 01 00 FF 
099dc     FD 14 06 F6 | 	mov	arg02, ##@LR__4278
099e0     98 B8 B0 FD | 	call	#__system___string_cmp
099e4     00 FA 0D F2 | 	cmp	result1, #0 wz
099e8     24 01 00 AF 
099ec     FE 1E 06 A6 |  if_e	mov	local01, ##@LR__4279
099f0     A7 1E 62 AC |  if_e	wrlong	local01, fp
099f4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
099f4     09 12 06 F6 | 	mov	arg01, #9
099f8     3C 04 B1 FD | 	call	#__system__close
099fc     09 1E 06 F6 | 	mov	local01, #9
09a00     49 00 00 FF 
09a04     58 E4 05 F1 | 	add	objptr, ##37464
09a08     F2 12 02 FB | 	rdlong	arg01, objptr
09a0c     49 00 00 FF 
09a10     58 E4 85 F1 | 	sub	objptr, ##37464
09a14     24 01 00 FF 
09a18     09 15 06 F6 | 	mov	arg02, ##@LR__4280
09a1c     90 B8 B0 FD | 	call	#__system___string_concat
09a20     FD 12 02 F6 | 	mov	arg01, result1
09a24     A7 14 02 FB | 	rdlong	arg02, fp
09a28     84 B8 B0 FD | 	call	#__system___string_concat
09a2c     FD 14 02 F6 | 	mov	arg02, result1
09a30     0F 13 02 F6 | 	mov	arg01, local01
09a34     0D 16 06 F6 | 	mov	arg03, #13
09a38     1C C4 B0 FD | 	call	#__system___basic_open_string
09a3c     01 00 00 FF 
09a40     0C 4E 05 F1 | 	add	fp, ##524
09a44     A7 0A 68 FC | 	wrlong	#5, fp
09a48     41 00 00 FF 
09a4c     48 E4 05 F1 | 	add	objptr, ##33352
09a50     F2 1E 02 FB | 	rdlong	local01, objptr
09a54     41 00 00 FF 
09a58     48 E4 85 F1 | 	sub	objptr, ##33352
09a5c     0C 4E 05 F1 | 	add	fp, #12
09a60     A7 1E 62 FC | 	wrlong	local01, fp
09a64     01 00 00 FF 
09a68     18 4E 85 F1 | 	sub	fp, ##536
09a6c                 | ' '  put #9,1,fileheader,1
09a6c                 | '   i=5
09a6c                 | '   saveptr=programstart
09a6c                 | '   do
09a6c                 | LR__0791
09a6c     01 00 00 FF 
09a70     1C 4E 05 F1 | 	add	fp, ##540
09a74     A7 12 02 F6 | 	mov	arg01, fp
09a78     04 4E 85 F1 | 	sub	fp, #4
09a7c     A7 14 02 FB | 	rdlong	arg02, fp
09a80     01 00 00 FF 
09a84     18 4E 85 F1 | 	sub	fp, ##536
09a88     18 16 06 F6 | 	mov	arg03, #24
09a8c     0B 00 00 FF 
09a90     C0 E4 05 F1 | 	add	objptr, ##5824
09a94     D0 AC B0 FD | 	call	#_psram_spin2_read1
09a98     01 00 00 FF 
09a9c     34 4E 05 F1 | 	add	fp, ##564
09aa0     A7 12 02 F6 | 	mov	arg01, fp
09aa4     10 4E 85 F1 | 	sub	fp, #16
09aa8     A7 14 02 FB | 	rdlong	arg02, fp
09aac     04 4E 05 F1 | 	add	fp, #4
09ab0     A7 16 02 FB | 	rdlong	arg03, fp
09ab4     01 00 00 FF 
09ab8     28 4E 85 F1 | 	sub	fp, ##552
09abc     A8 AC B0 FD | 	call	#_psram_spin2_read1
09ac0     0B 00 00 FF 
09ac4     C0 E4 85 F1 | 	sub	objptr, ##5824
09ac8     24 01 00 FF 
09acc     0B 1F 06 F6 | 	mov	local01, ##@LR__4281
09ad0     01 00 00 FF 
09ad4     B4 4E 05 F1 | 	add	fp, ##692
09ad8     A7 1E 62 FC | 	wrlong	local01, fp
09adc                 | '     psram.read1(varptr(header(0)),saveptr,24)
09adc                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
09adc                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
09adc     A8 4E 85 F1 | 	sub	fp, #168
09ae0     A7 02 68 FC | 	wrlong	#1, fp
09ae4     1C 4E 05 F1 | 	add	fp, #28
09ae8     A7 20 02 FB | 	rdlong	local02, fp
09aec     01 00 00 FF 
09af0     28 4E 85 F1 | 	sub	fp, ##552
09af4     01 20 06 F1 | 	add	local02, #1
09af8                 | LR__0792
09af8     01 00 00 FF 
09afc     0C 4E 05 F1 | 	add	fp, ##524
09b00     A7 1E 02 FB | 	rdlong	local01, fp
09b04     01 00 00 FF 
09b08     0C 4E 85 F1 | 	sub	fp, ##524
09b0c     10 1F 52 F2 | 	cmps	local01, local02 wc
09b10     64 00 90 3D |  if_ae	jmp	#LR__0793
09b14     01 00 00 FF 
09b18     B4 4E 05 F1 | 	add	fp, ##692
09b1c     A7 1E 02 FB | 	rdlong	local01, fp
09b20     A8 4E 85 F1 | 	sub	fp, #168
09b24     A7 16 02 FB | 	rdlong	arg03, fp
09b28     01 16 86 F1 | 	sub	arg03, #1
09b2c     28 4E 05 F1 | 	add	fp, #40
09b30     A7 16 02 F1 | 	add	arg03, fp
09b34     0B 13 C2 FA | 	rdbyte	arg01, arg03
09b38     01 00 00 FF 
09b3c     34 4E 85 F1 | 	sub	fp, ##564
09b40     E4 D8 B0 FD | 	call	#__system__Chr_S
09b44     FD 14 02 F6 | 	mov	arg02, result1
09b48     0F 13 02 F6 | 	mov	arg01, local01
09b4c     60 B7 B0 FD | 	call	#__system___string_concat
09b50     01 00 00 FF 
09b54     B4 4E 05 F1 | 	add	fp, ##692
09b58     A7 FA 61 FC | 	wrlong	result1, fp
09b5c     A8 4E 85 F1 | 	sub	fp, #168
09b60     A7 1E 02 FB | 	rdlong	local01, fp
09b64     01 1E 06 F1 | 	add	local01, #1
09b68     A7 1E 62 FC | 	wrlong	local01, fp
09b6c     01 00 00 FF 
09b70     0C 4E 85 F1 | 	sub	fp, ##524
09b74     80 FF 9F FD | 	jmp	#LR__0792
09b78                 | LR__0793
09b78                 | '  '   put #9,i,header(3),1 : i+=4
09b78                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
09b78                 | '      print #9, saveline$
09b78     09 12 06 F6 | 	mov	arg01, #9
09b7c     88 0C B1 FD | 	call	#__system___getiolock_0334
09b80     FD 12 02 F6 | 	mov	arg01, result1
09b84     CC B6 B0 FD | 	call	#__system___lockmem
09b88     01 00 00 FF 
09b8c     B4 4E 05 F1 | 	add	fp, ##692
09b90     A7 14 02 FB | 	rdlong	arg02, fp
09b94     01 00 00 FF 
09b98     B4 4E 85 F1 | 	sub	fp, ##692
09b9c     09 12 06 F6 | 	mov	arg01, #9
09ba0     00 16 06 F6 | 	mov	arg03, #0
09ba4     A0 C3 B0 FD | 	call	#__system___basic_print_string
09ba8     09 12 06 F6 | 	mov	arg01, #9
09bac     0A 14 06 F6 | 	mov	arg02, #10
09bb0     00 16 06 F6 | 	mov	arg03, #0
09bb4     38 C3 B0 FD | 	call	#__system___basic_print_char
09bb8     09 12 06 F6 | 	mov	arg01, #9
09bbc     48 0C B1 FD | 	call	#__system___getiolock_0334
09bc0     FD 00 68 FC | 	wrlong	#0, result1
09bc4     01 00 00 FF 
09bc8     30 4E 05 F1 | 	add	fp, ##560
09bcc     A7 1E 02 FB | 	rdlong	local01, fp
09bd0     18 4E 85 F1 | 	sub	fp, #24
09bd4     A7 1E 62 FC | 	wrlong	local01, fp
09bd8     18 4E 05 F1 | 	add	fp, #24
09bdc     A7 1E 02 FB | 	rdlong	local01, fp
09be0     01 00 00 FF 
09be4     30 4E 85 F1 | 	sub	fp, ##560
09be8     FF FF 3F FF 
09bec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09bf0     78 FE 9F 5D |  if_ne	jmp	#LR__0791
09bf4                 | '   close #9  
09bf4     09 12 06 F6 | 	mov	arg01, #9
09bf8     3C 02 B1 FD | 	call	#__system__close
09bfc                 | LR__0794
09bfc                 | LR__0795
09bfc     A7 F0 03 F6 | 	mov	ptra, fp
09c00     B2 00 A0 FD | 	call	#popregs_
09c04                 | _do_save_ret
09c04     2D 00 64 FD | 	ret
09c08                 | 
09c08                 | ' 
09c08                 | ' '----------------- Load the program
09c08                 | ' 'lo todo: errors while loading
09c08                 | ' sub do_load
09c08                 | _do_load
09c08     01 4A 05 F6 | 	mov	COUNT_, #1
09c0c     A8 00 A0 FD | 	call	#pushregs_
09c10     A4 F0 07 F1 | 	add	ptra, #164
09c14     A0 4E 05 F1 | 	add	fp, #160
09c18     A7 12 02 F6 | 	mov	arg01, fp
09c1c     80 4E 85 F1 | 	sub	fp, #128
09c20     A7 14 02 F6 | 	mov	arg02, fp
09c24     20 4E 85 F1 | 	sub	fp, #32
09c28     09 15 62 FC | 	wrlong	arg02, arg01
09c2c     08 F2 BF FD | 	call	#_pop
09c30     FF 1E 02 F6 | 	mov	local01, result3
09c34     A7 FA 61 FC | 	wrlong	result1, fp
09c38     04 4E 05 F1 | 	add	fp, #4
09c3c     A7 FC 61 FC | 	wrlong	result2, fp
09c40     04 4E 05 F1 | 	add	fp, #4
09c44     A7 1E 62 FC | 	wrlong	local01, fp
09c48                 | ' 
09c48                 | ' lpoke varptr(line2$),varptr(line2)
09c48                 | ' t1=pop() 
09c48                 | ' if t1.result_type=result_string then
09c48     08 4E 85 F1 | 	sub	fp, #8
09c4c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09c50     40 03 90 5D |  if_ne	jmp	#LR__0806
09c54     18 09 B0 FD | 	call	#_do_new
09c58                 | '   do_new
09c58                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
09c58     A7 12 02 FB | 	rdlong	arg01, fp
09c5c     24 01 00 FF 
09c60     0C 15 06 F6 | 	mov	arg02, ##@LR__4282
09c64     14 B6 B0 FD | 	call	#__system___string_cmp
09c68     00 FA 0D F2 | 	cmp	result1, #0 wz
09c6c     24 01 00 AF 
09c70     0D 1F 06 A6 |  if_e	mov	local01, ##@LR__4283
09c74     A7 1E 62 AC |  if_e	wrlong	local01, fp
09c78                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09c78     09 12 06 F6 | 	mov	arg01, #9
09c7c     B8 01 B1 FD | 	call	#__system__close
09c80     09 1E 06 F6 | 	mov	local01, #9
09c84     49 00 00 FF 
09c88     58 E4 05 F1 | 	add	objptr, ##37464
09c8c     F2 12 02 FB | 	rdlong	arg01, objptr
09c90     49 00 00 FF 
09c94     58 E4 85 F1 | 	sub	objptr, ##37464
09c98     24 01 00 FF 
09c9c     18 15 06 F6 | 	mov	arg02, ##@LR__4284
09ca0     0C B6 B0 FD | 	call	#__system___string_concat
09ca4     FD 12 02 F6 | 	mov	arg01, result1
09ca8     A7 14 02 FB | 	rdlong	arg02, fp
09cac     00 B6 B0 FD | 	call	#__system___string_concat
09cb0     FD 14 02 F6 | 	mov	arg02, result1
09cb4     0F 13 02 F6 | 	mov	arg01, local01
09cb8     00 16 06 F6 | 	mov	arg03, #0
09cbc     98 C1 B0 FD | 	call	#__system___basic_open_string
09cc0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
09cc4     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
09cc8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
09ccc     10 4E 05 F1 | 	add	fp, #16
09cd0     A7 FA 61 FC | 	wrlong	result1, fp
09cd4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
09cd4     10 4E 85 F1 | 	sub	fp, #16
09cd8     9C 00 90 AD |  if_e	jmp	#LR__0800
09cdc     00 12 06 F6 | 	mov	arg01, #0
09ce0     24 0B B1 FD | 	call	#__system___getiolock_0334
09ce4     FD 12 02 F6 | 	mov	arg01, result1
09ce8     68 B5 B0 FD | 	call	#__system___lockmem
09cec     24 01 00 FF 
09cf0     1A 15 06 F6 | 	mov	arg02, ##@LR__4285
09cf4     00 12 06 F6 | 	mov	arg01, #0
09cf8     00 16 06 F6 | 	mov	arg03, #0
09cfc     48 C2 B0 FD | 	call	#__system___basic_print_string
09d00     10 4E 05 F1 | 	add	fp, #16
09d04     A7 14 02 FB | 	rdlong	arg02, fp
09d08     10 4E 85 F1 | 	sub	fp, #16
09d0c     00 12 06 F6 | 	mov	arg01, #0
09d10     00 16 06 F6 | 	mov	arg03, #0
09d14     0A 18 06 F6 | 	mov	arg04, #10
09d18     70 C2 B0 FD | 	call	#__system___basic_print_integer
09d1c     24 01 00 FF 
09d20     28 15 06 F6 | 	mov	arg02, ##@LR__4286
09d24     00 12 06 F6 | 	mov	arg01, #0
09d28     00 16 06 F6 | 	mov	arg03, #0
09d2c     18 C2 B0 FD | 	call	#__system___basic_print_string
09d30     10 4E 05 F1 | 	add	fp, #16
09d34     A7 12 02 FB | 	rdlong	arg01, fp
09d38     10 4E 85 F1 | 	sub	fp, #16
09d3c     14 DB B0 FD | 	call	#__system___strerror
09d40     FD 14 02 F6 | 	mov	arg02, result1
09d44     00 12 06 F6 | 	mov	arg01, #0
09d48     00 16 06 F6 | 	mov	arg03, #0
09d4c     F8 C1 B0 FD | 	call	#__system___basic_print_string
09d50     00 12 06 F6 | 	mov	arg01, #0
09d54     0A 14 06 F6 | 	mov	arg02, #10
09d58     00 16 06 F6 | 	mov	arg03, #0
09d5c     90 C1 B0 FD | 	call	#__system___basic_print_char
09d60     00 12 06 F6 | 	mov	arg01, #0
09d64     A0 0A B1 FD | 	call	#__system___getiolock_0334
09d68     FD 00 68 FC | 	wrlong	#0, result1
09d6c     09 12 06 F6 | 	mov	arg01, #9
09d70     C4 00 B1 FD | 	call	#__system__close
09d74     24 02 90 FD | 	jmp	#LR__0808
09d78                 | LR__0800
09d78     0C 4E 05 F1 | 	add	fp, #12
09d7c     A7 0A 68 FC | 	wrlong	#5, fp
09d80                 | '   i=5
09d80                 | '   get #9,1,header,1
09d80     0C 4E 05 F1 | 	add	fp, #12
09d84     A7 16 02 F6 | 	mov	arg03, fp
09d88     18 4E 85 F1 | 	sub	fp, #24
09d8c     09 12 06 F6 | 	mov	arg01, #9
09d90     01 14 06 F6 | 	mov	arg02, #1
09d94     01 18 06 F6 | 	mov	arg04, #1
09d98     04 1A 06 F6 | 	mov	arg05, #4
09d9c     B8 C2 B0 FD | 	call	#__system___basic_get
09da0                 | '   
09da0                 | '   if header<>$0D616272 then 
09da0     18 4E 05 F1 | 	add	fp, #24
09da4     A7 1E 02 FB | 	rdlong	local01, fp
09da8     18 4E 85 F1 | 	sub	fp, #24
09dac     B1 B0 06 FF 
09db0     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09db4     F0 00 90 AD |  if_e	jmp	#LR__0803
09db8                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09db8     09 12 06 F6 | 	mov	arg01, #9
09dbc     78 00 B1 FD | 	call	#__system__close
09dc0     09 1E 06 F6 | 	mov	local01, #9
09dc4     49 00 00 FF 
09dc8     58 E4 05 F1 | 	add	objptr, ##37464
09dcc     F2 12 02 FB | 	rdlong	arg01, objptr
09dd0     49 00 00 FF 
09dd4     58 E4 85 F1 | 	sub	objptr, ##37464
09dd8     24 01 00 FF 
09ddc     2B 15 06 F6 | 	mov	arg02, ##@LR__4287
09de0     CC B4 B0 FD | 	call	#__system___string_concat
09de4     FD 12 02 F6 | 	mov	arg01, result1
09de8     A7 14 02 FB | 	rdlong	arg02, fp
09dec     C0 B4 B0 FD | 	call	#__system___string_concat
09df0     FD 14 02 F6 | 	mov	arg02, result1
09df4     0F 13 02 F6 | 	mov	arg01, local01
09df8     00 16 06 F6 | 	mov	arg03, #0
09dfc     58 C0 B0 FD | 	call	#__system___basic_open_string
09e00                 | '     do
09e00                 | LR__0801
09e00     09 12 06 F6 | 	mov	arg01, #9
09e04     58 B6 B0 FD | 	call	#__system___basic_read_line
09e08     2D 00 00 FF 
09e0c     E0 E5 05 F1 | 	add	objptr, ##23520
09e10     F2 FA 61 FC | 	wrlong	result1, objptr
09e14                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
09e14     2D 00 00 FF 
09e18     E0 E5 85 F1 | 	sub	objptr, ##23520
09e1c     FD 12 02 F6 | 	mov	arg01, result1
09e20     01 14 06 F6 | 	mov	arg02, #1
09e24     3C D4 B0 FD | 	call	#__system__Left_S
09e28     FD 12 02 F6 | 	mov	arg01, result1
09e2c     24 01 00 FF 
09e30     2D 15 06 F6 | 	mov	arg02, ##@LR__4288
09e34     44 B4 B0 FD | 	call	#__system___string_cmp
09e38     00 FA 55 F2 | 	cmps	result1, #0 wc
09e3c     34 00 90 CD |  if_b	jmp	#LR__0802
09e40     2D 00 00 FF 
09e44     E0 E5 05 F1 | 	add	objptr, ##23520
09e48     F2 12 02 FB | 	rdlong	arg01, objptr
09e4c     2D 00 00 FF 
09e50     E0 E5 85 F1 | 	sub	objptr, ##23520
09e54     01 14 06 F6 | 	mov	arg02, #1
09e58     08 D4 B0 FD | 	call	#__system__Left_S
09e5c     FD 12 02 F6 | 	mov	arg01, result1
09e60     24 01 00 FF 
09e64     2F 15 06 F6 | 	mov	arg02, ##@LR__4289
09e68     10 B4 B0 FD | 	call	#__system___string_cmp
09e6c     01 FA 55 F2 | 	cmps	result1, #1 wc
09e70     A8 6B BF CD |  if_b	call	#_interpret
09e74                 | LR__0802
09e74     2D 00 00 FF 
09e78     E0 E5 05 F1 | 	add	objptr, ##23520
09e7c     F2 12 02 FB | 	rdlong	arg01, objptr
09e80     2D 00 00 FF 
09e84     E0 E5 85 F1 | 	sub	objptr, ##23520
09e88     24 01 00 FF 
09e8c     31 15 06 F6 | 	mov	arg02, ##@LR__4290
09e90     E8 B3 B0 FD | 	call	#__system___string_cmp
09e94     00 FA 0D F2 | 	cmp	result1, #0 wz
09e98     64 FF 9F 5D |  if_ne	jmp	#LR__0801
09e9c                 | '     close #9
09e9c     09 12 06 F6 | 	mov	arg01, #9
09ea0     94 FF B0 FD | 	call	#__system__close
09ea4     F4 00 90 FD | 	jmp	#LR__0807
09ea8                 | LR__0803
09ea8                 | '   'printerror(26) : close #9 : return
09ea8                 | '     do
09ea8                 | LR__0804
09ea8                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
09ea8     0C 4E 05 F1 | 	add	fp, #12
09eac     A7 14 02 FB | 	rdlong	arg02, fp
09eb0     10 4E 05 F1 | 	add	fp, #16
09eb4     A7 16 02 F6 | 	mov	arg03, fp
09eb8     1C 4E 85 F1 | 	sub	fp, #28
09ebc     09 12 06 F6 | 	mov	arg01, #9
09ec0     01 18 06 F6 | 	mov	arg04, #1
09ec4     04 1A 06 F6 | 	mov	arg05, #4
09ec8     8C C1 B0 FD | 	call	#__system___basic_get
09ecc     14 4E 05 F1 | 	add	fp, #20
09ed0     A7 FA 61 FC | 	wrlong	result1, fp
09ed4     08 4E 85 F1 | 	sub	fp, #8
09ed8     A7 1E 02 FB | 	rdlong	local01, fp
09edc     04 1E 06 F1 | 	add	local01, #4
09ee0     A7 1E 62 FC | 	wrlong	local01, fp
09ee4     10 4E 05 F1 | 	add	fp, #16
09ee8     A7 1E 02 FB | 	rdlong	local01, fp
09eec     04 4E 05 F1 | 	add	fp, #4
09ef0     A7 1E 02 F1 | 	add	local01, fp
09ef4     0F 01 48 FC | 	wrbyte	#0, local01
09ef8                 | '       if amount=1 then  
09ef8     0C 4E 85 F1 | 	sub	fp, #12
09efc     A7 1E 02 FB | 	rdlong	local01, fp
09f00     14 4E 85 F1 | 	sub	fp, #20
09f04     01 1E 0E F2 | 	cmp	local01, #1 wz
09f08     68 00 90 5D |  if_ne	jmp	#LR__0805
09f0c                 | '         get #9,i,line2(0),linelength : i+=linelength
09f0c     0C 4E 05 F1 | 	add	fp, #12
09f10     A7 14 02 FB | 	rdlong	arg02, fp
09f14     14 4E 05 F1 | 	add	fp, #20
09f18     A7 16 02 F6 | 	mov	arg03, fp
09f1c     04 4E 85 F1 | 	sub	fp, #4
09f20     A7 18 02 FB | 	rdlong	arg04, fp
09f24     1C 4E 85 F1 | 	sub	fp, #28
09f28     09 12 06 F6 | 	mov	arg01, #9
09f2c     01 1A 06 F6 | 	mov	arg05, #1
09f30     24 C1 B0 FD | 	call	#__system___basic_get
09f34     0C 4E 05 F1 | 	add	fp, #12
09f38     A7 1E 02 FB | 	rdlong	local01, fp
09f3c     10 4E 05 F1 | 	add	fp, #16
09f40     A7 1A 02 FB | 	rdlong	arg05, fp
09f44     0D 1F 02 F1 | 	add	local01, arg05
09f48     10 4E 85 F1 | 	sub	fp, #16
09f4c     A7 1E 62 FC | 	wrlong	local01, fp
09f50     94 4E 05 F1 | 	add	fp, #148
09f54     A7 1E 02 FB | 	rdlong	local01, fp
09f58     A0 4E 85 F1 | 	sub	fp, #160
09f5c     2D 00 00 FF 
09f60     E0 E5 05 F1 | 	add	objptr, ##23520
09f64     F2 1E 62 FC | 	wrlong	local01, objptr
09f68     2D 00 00 FF 
09f6c     E0 E5 85 F1 | 	sub	objptr, ##23520
09f70     A8 6A BF FD | 	call	#_interpret
09f74                 | LR__0805
09f74     14 4E 05 F1 | 	add	fp, #20
09f78     A7 1E 02 FB | 	rdlong	local01, fp
09f7c     14 4E 85 F1 | 	sub	fp, #20
09f80     01 1E 56 F2 | 	cmps	local01, #1 wc
09f84     20 FF 9F 3D |  if_ae	jmp	#LR__0804
09f88                 | '     close #9 
09f88     09 12 06 F6 | 	mov	arg01, #9
09f8c     A8 FE B0 FD | 	call	#__system__close
09f90     08 00 90 FD | 	jmp	#LR__0807
09f94                 | LR__0806
09f94     1E 12 06 F6 | 	mov	arg01, #30
09f98     C4 7D B0 FD | 	call	#_printerror
09f9c                 | LR__0807
09f9c                 | LR__0808
09f9c     A7 F0 03 F6 | 	mov	ptra, fp
09fa0     B2 00 A0 FD | 	call	#popregs_
09fa4                 | _do_load_ret
09fa4     2D 00 64 FD | 	ret
09fa8                 | 
09fa8                 | ' 
09fa8                 | ' '----------------- Run the program 
09fa8                 | ' 
09fa8                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
09fa8                 | ' 
09fa8                 | ' sub do_run
09fa8                 | _do_run
09fa8     01 4A 05 F6 | 	mov	COUNT_, #1
09fac     A8 00 A0 FD | 	call	#pushregs_
09fb0     41 00 00 FF 
09fb4     48 E4 05 F1 | 	add	objptr, ##33352
09fb8     F2 1C 02 FB | 	rdlong	arg06, objptr
09fbc     0F 00 00 FF 
09fc0     2C E5 05 F1 | 	add	objptr, ##7980
09fc4     F2 1C 62 FC | 	wrlong	arg06, objptr
09fc8     04 E4 05 F1 | 	add	objptr, #4
09fcc     F2 00 68 FC | 	wrlong	#0, objptr
09fd0     04 E4 05 F1 | 	add	objptr, #4
09fd4     FF FF FF FF 
09fd8     F2 FE 6B FC | 	wrlong	##-1, objptr
09fdc                 | ' if inrun>0 then 
09fdc     04 E4 05 F1 | 	add	objptr, #4
09fe0     F2 1C 02 FB | 	rdlong	arg06, objptr
09fe4     50 00 00 FF 
09fe8     80 E5 85 F1 | 	sub	objptr, ##41344
09fec     01 1C 16 F2 | 	cmp	arg06, #1 wc
09ff0     30 00 90 CD |  if_b	jmp	#LR__0810
09ff4     50 00 00 FF 
09ff8     84 E5 05 F1 | 	add	objptr, ##41348
09ffc     F2 12 02 F6 | 	mov	arg01, objptr
0a000     10 E4 85 F1 | 	sub	objptr, #16
0a004     F2 14 02 FB | 	rdlong	arg02, objptr
0a008     18 16 06 F6 | 	mov	arg03, #24
0a00c     45 00 00 FF 
0a010     B4 E4 85 F1 | 	sub	objptr, ##35508
0a014     50 A7 B0 FD | 	call	#_psram_spin2_read1
0a018     0B 00 00 FF 
0a01c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a020                 | '   psram.read1(varptr(runheader),runptr,24)  
0a020                 | '   return
0a020     A4 02 90 FD | 	jmp	#LR__0816
0a024                 | LR__0810
0a024     50 00 00 FF 
0a028     80 E5 05 F1 | 	add	objptr, ##41344
0a02c     F2 02 68 FC | 	wrlong	#1, objptr
0a030     04 E4 05 F1 | 	add	objptr, #4
0a034     F2 12 02 F6 | 	mov	arg01, objptr
0a038     10 E4 85 F1 | 	sub	objptr, #16
0a03c     F2 14 02 FB | 	rdlong	arg02, objptr
0a040     18 16 06 F6 | 	mov	arg03, #24
0a044     45 00 00 FF 
0a048     B4 E4 85 F1 | 	sub	objptr, ##35508
0a04c     18 A7 B0 FD | 	call	#_psram_spin2_read1
0a050                 | ' inrun=1
0a050                 | ' psram.read1(varptr(runheader),runptr,24) 
0a050                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0a050     45 00 00 FF 
0a054     C4 E4 05 F1 | 	add	objptr, ##35524
0a058     F2 1E 02 FB | 	rdlong	local01, objptr
0a05c     50 00 00 FF 
0a060     84 E5 85 F1 | 	sub	objptr, ##41348
0a064     FF FF 7F FF 
0a068     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0a06c     50 00 00 AF 
0a070     80 E5 05 A1 |  if_e	add	objptr, ##41344
0a074     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a078     50 00 00 AF 
0a07c     80 E5 85 A1 |  if_e	sub	objptr, ##41344
0a080     44 02 90 AD |  if_e	jmp	#LR__0816
0a084                 | ' do 
0a084                 | LR__0811
0a084                 | '   if runptr<>oldrunptr then
0a084     50 00 00 FF 
0a088     74 E5 05 F1 | 	add	objptr, ##41332
0a08c     F2 1E 02 FB | 	rdlong	local01, objptr
0a090     08 E4 05 F1 | 	add	objptr, #8
0a094     F2 1C 02 FB | 	rdlong	arg06, objptr
0a098     50 00 00 FF 
0a09c     7C E5 85 F1 | 	sub	objptr, ##41340
0a0a0     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0a0a4     CC 00 90 AD |  if_e	jmp	#LR__0812
0a0a8     50 00 00 FF 
0a0ac     84 E5 05 F1 | 	add	objptr, ##41348
0a0b0     F2 12 02 F6 | 	mov	arg01, objptr
0a0b4     10 E4 85 F1 | 	sub	objptr, #16
0a0b8     F2 14 02 FB | 	rdlong	arg02, objptr
0a0bc     18 16 06 F6 | 	mov	arg03, #24
0a0c0     45 00 00 FF 
0a0c4     B4 E4 85 F1 | 	sub	objptr, ##35508
0a0c8     9C A6 B0 FD | 	call	#_psram_spin2_read1
0a0cc     32 00 00 FF 
0a0d0     80 E5 05 F1 | 	add	objptr, ##25984
0a0d4     F2 12 02 F6 | 	mov	arg01, objptr
0a0d8     12 00 00 FF 
0a0dc     34 E5 05 F1 | 	add	objptr, ##9524
0a0e0     F2 14 02 FB | 	rdlong	arg02, objptr
0a0e4     14 00 00 FF 
0a0e8     4C E5 85 F1 | 	sub	objptr, ##10572
0a0ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a0f0     01 1E 66 F0 | 	shl	local01, #1
0a0f4     0F 15 02 F1 | 	add	arg02, local01
0a0f8     14 00 00 FF 
0a0fc     64 E5 05 F1 | 	add	objptr, ##10596
0a100     F2 16 02 FB | 	rdlong	arg03, objptr
0a104     18 E4 85 F1 | 	sub	objptr, #24
0a108     F2 1E 02 FB | 	rdlong	local01, objptr
0a10c     0F 17 82 F1 | 	sub	arg03, local01
0a110     45 00 00 FF 
0a114     B4 E4 85 F1 | 	sub	objptr, ##35508
0a118     4C A6 B0 FD | 	call	#_psram_spin2_read1
0a11c     45 00 00 FF 
0a120     CC E4 05 F1 | 	add	objptr, ##35532
0a124     F2 1E 02 FB | 	rdlong	local01, objptr
0a128     18 E4 85 F1 | 	sub	objptr, #24
0a12c     F2 1C 02 FB | 	rdlong	arg06, objptr
0a130     0E 1F 82 F1 | 	sub	local01, arg06
0a134     14 00 00 FF 
0a138     4C E5 85 F1 | 	sub	objptr, ##10572
0a13c     F2 1C 02 FB | 	rdlong	arg06, objptr
0a140     0E 1F 12 FD | 	qdiv	local01, arg06
0a144     05 00 00 FF 
0a148     18 E4 05 F1 | 	add	objptr, ##2584
0a14c     18 1E 62 FD | 	getqx	local01
0a150     03 1E 86 F1 | 	sub	local01, #3
0a154     F2 1E 62 FC | 	wrlong	local01, objptr
0a158     0F 00 00 FF 
0a15c     34 E5 05 F1 | 	add	objptr, ##7988
0a160     F2 1E 02 FB | 	rdlong	local01, objptr
0a164     08 E4 05 F1 | 	add	objptr, #8
0a168     F2 1E 62 FC | 	wrlong	local01, objptr
0a16c     50 00 00 FF 
0a170     7C E5 85 F1 | 	sub	objptr, ##41340
0a174                 | LR__0812
0a174     50 00 00 FF 
0a178     98 E5 05 F1 | 	add	objptr, ##41368
0a17c     F2 1E 02 FB | 	rdlong	local01, objptr
0a180     24 E4 85 F1 | 	sub	objptr, #36
0a184     F2 1E 62 FC | 	wrlong	local01, objptr
0a188     04 E4 05 F1 | 	add	objptr, #4
0a18c     F2 12 02 FB | 	rdlong	arg01, objptr
0a190     50 00 00 FF 
0a194     78 E5 85 F1 | 	sub	objptr, ##41336
0a198     98 EB BF FD | 	call	#_execute_line
0a19c     50 00 00 FF 
0a1a0     78 E5 05 F1 | 	add	objptr, ##41336
0a1a4     F2 FA 61 FC | 	wrlong	result1, objptr
0a1a8     04 E4 85 F1 | 	sub	objptr, #4
0a1ac     F2 1E 02 FB | 	rdlong	local01, objptr
0a1b0     50 00 00 FF 
0a1b4     74 E5 85 F1 | 	sub	objptr, ##41332
0a1b8     FF FF 3F FF 
0a1bc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a1c0     0C 00 90 AD |  if_e	jmp	#LR__0813
0a1c4     30 A9 B0 FD | 	call	#_usbnew_spin2_get_key
0a1c8     06 FB 0D F2 | 	cmp	result1, #262 wz
0a1cc     B4 FE 9F 5D |  if_ne	jmp	#LR__0811
0a1d0                 | LR__0813
0a1d0                 | ' if runheader(5)<>$7FFF_FFFF then 
0a1d0     50 00 00 FF 
0a1d4     98 E5 05 F1 | 	add	objptr, ##41368
0a1d8     F2 1E 02 FB | 	rdlong	local01, objptr
0a1dc     50 00 00 FF 
0a1e0     98 E5 85 F1 | 	sub	objptr, ##41368
0a1e4     FF FF 3F FF 
0a1e8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a1ec     C4 00 90 AD |  if_e	jmp	#LR__0815
0a1f0                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
0a1f0     50 00 00 FF 
0a1f4     A4 E5 05 F1 | 	add	objptr, ##41380
0a1f8     F2 1E 02 FB | 	rdlong	local01, objptr
0a1fc     50 00 00 FF 
0a200     A4 E5 85 F1 | 	sub	objptr, ##41380
0a204     01 1E 0E F2 | 	cmp	local01, #1 wz
0a208     44 00 90 5D |  if_ne	jmp	#LR__0814
0a20c     01 00 00 FF 
0a210     00 EA 05 F1 | 	add	ptr__dat__, ##512
0a214     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0a218     01 00 00 FF 
0a21c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
0a220     07 12 06 F6 | 	mov	arg01, #7
0a224     56 00 00 FF 
0a228     44 16 06 F6 | 	mov	arg03, ##44100
0a22c     0E 18 C6 F9 | 	decod	arg04, #14
0a230     03 00 00 FF 
0a234     94 1A 06 F6 | 	mov	arg05, ##1684
0a238     01 1C 66 F6 | 	neg	arg06, #1
0a23c     0B 00 00 FF 
0a240     C0 E4 05 F1 | 	add	objptr, ##5824
0a244     D8 AB B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0a248     0B 00 00 FF 
0a24c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a250                 | LR__0814
0a250                 | '   print "Stopped at line ";runheader(0)
0a250     00 12 06 F6 | 	mov	arg01, #0
0a254     B0 05 B1 FD | 	call	#__system___getiolock_0334
0a258     FD 12 02 F6 | 	mov	arg01, result1
0a25c     F4 AF B0 FD | 	call	#__system___lockmem
0a260     24 01 00 FF 
0a264     32 15 06 F6 | 	mov	arg02, ##@LR__4291
0a268     00 12 06 F6 | 	mov	arg01, #0
0a26c     00 16 06 F6 | 	mov	arg03, #0
0a270     D4 BC B0 FD | 	call	#__system___basic_print_string
0a274     50 00 00 FF 
0a278     84 E5 05 F1 | 	add	objptr, ##41348
0a27c     F2 14 02 FB | 	rdlong	arg02, objptr
0a280     50 00 00 FF 
0a284     84 E5 85 F1 | 	sub	objptr, ##41348
0a288     00 12 06 F6 | 	mov	arg01, #0
0a28c     00 16 06 F6 | 	mov	arg03, #0
0a290     0A 18 06 F6 | 	mov	arg04, #10
0a294     34 BD B0 FD | 	call	#__system___basic_print_unsigned
0a298     00 12 06 F6 | 	mov	arg01, #0
0a29c     0A 14 06 F6 | 	mov	arg02, #10
0a2a0     00 16 06 F6 | 	mov	arg03, #0
0a2a4     48 BC B0 FD | 	call	#__system___basic_print_char
0a2a8     00 12 06 F6 | 	mov	arg01, #0
0a2ac     58 05 B1 FD | 	call	#__system___getiolock_0334
0a2b0     FD 00 68 FC | 	wrlong	#0, result1
0a2b4                 | LR__0815
0a2b4     50 00 00 FF 
0a2b8     80 E5 05 F1 | 	add	objptr, ##41344
0a2bc     F2 00 68 FC | 	wrlong	#0, objptr
0a2c0     50 00 00 FF 
0a2c4     80 E5 85 F1 | 	sub	objptr, ##41344
0a2c8                 | LR__0816
0a2c8     A7 F0 03 F6 | 	mov	ptra, fp
0a2cc     B2 00 A0 FD | 	call	#popregs_
0a2d0                 | _do_run_ret
0a2d0     2D 00 64 FD | 	ret
0a2d4                 | 
0a2d4                 | ' 
0a2d4                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
0a2d4                 | ' 
0a2d4                 | ' sub do_list
0a2d4                 | _do_list
0a2d4     02 4A 05 F6 | 	mov	COUNT_, #2
0a2d8     A8 00 A0 FD | 	call	#pushregs_
0a2dc     B8 F0 07 F1 | 	add	ptra, #184
0a2e0     04 4E 05 F1 | 	add	fp, #4
0a2e4     A7 00 68 FC | 	wrlong	#0, fp
0a2e8     04 4E 05 F1 | 	add	fp, #4
0a2ec     FF FF BF FF 
0a2f0     A7 FE 6B FC | 	wrlong	##2147483647, fp
0a2f4     08 4E 85 F1 | 	sub	fp, #8
0a2f8     41 00 00 FF 
0a2fc     44 E4 05 F1 | 	add	objptr, ##33348
0a300     F2 1E 02 FB | 	rdlong	local01, objptr
0a304     0F 17 02 F6 | 	mov	arg03, local01
0a308     01 16 66 F0 | 	shl	arg03, #1
0a30c     0F 17 02 F1 | 	add	arg03, local01
0a310     02 16 66 F0 | 	shl	arg03, #2
0a314     03 00 00 FF 
0a318     04 E4 85 F1 | 	sub	objptr, ##1540
0a31c     F2 16 02 F1 | 	add	arg03, objptr
0a320     0B 17 02 FB | 	rdlong	arg03, arg03
0a324     A7 16 62 FC | 	wrlong	arg03, fp
0a328                 | ' 
0a328                 | ' startline=0 : endline=$7FFFFFFF
0a328                 | ' numpar=compiledline(lineptr_e).result.uresult
0a328                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0a328     01 16 0E F2 | 	cmp	arg03, #1 wz
0a32c     3E 00 00 FF 
0a330     40 E4 85 F1 | 	sub	objptr, ##31808
0a334     3C 00 90 5D |  if_ne	jmp	#LR__0820
0a338     FC EA BF FD | 	call	#_pop
0a33c     FF 1E 02 F6 | 	mov	local01, result3
0a340     0C 4E 05 F1 | 	add	fp, #12
0a344     A7 FA 61 FC | 	wrlong	result1, fp
0a348     04 4E 05 F1 | 	add	fp, #4
0a34c     A7 FC 61 FC | 	wrlong	result2, fp
0a350     04 4E 05 F1 | 	add	fp, #4
0a354     A7 1E 62 FC | 	wrlong	local01, fp
0a358     08 4E 85 F1 | 	sub	fp, #8
0a35c     A7 12 02 F6 | 	mov	arg01, fp
0a360     0C 4E 85 F1 | 	sub	fp, #12
0a364     38 40 B0 FD | 	call	#_converttoint
0a368     04 4E 05 F1 | 	add	fp, #4
0a36c     A7 FA 61 FC | 	wrlong	result1, fp
0a370     04 4E 85 F1 | 	sub	fp, #4
0a374                 | LR__0820
0a374                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0a374     A7 16 02 FB | 	rdlong	arg03, fp
0a378     02 16 0E F2 | 	cmp	arg03, #2 wz
0a37c     7C 00 90 5D |  if_ne	jmp	#LR__0821
0a380     B4 EA BF FD | 	call	#_pop
0a384     FF 1E 02 F6 | 	mov	local01, result3
0a388     0C 4E 05 F1 | 	add	fp, #12
0a38c     A7 FA 61 FC | 	wrlong	result1, fp
0a390     04 4E 05 F1 | 	add	fp, #4
0a394     A7 FC 61 FC | 	wrlong	result2, fp
0a398     04 4E 05 F1 | 	add	fp, #4
0a39c     A7 1E 62 FC | 	wrlong	local01, fp
0a3a0     08 4E 85 F1 | 	sub	fp, #8
0a3a4     A7 12 02 F6 | 	mov	arg01, fp
0a3a8     0C 4E 85 F1 | 	sub	fp, #12
0a3ac     F0 3F B0 FD | 	call	#_converttoint
0a3b0     FD 1E 02 F6 | 	mov	local01, result1
0a3b4     08 4E 05 F1 | 	add	fp, #8
0a3b8     A7 1E 62 FC | 	wrlong	local01, fp
0a3bc     08 4E 85 F1 | 	sub	fp, #8
0a3c0     74 EA BF FD | 	call	#_pop
0a3c4     FF 1E 02 F6 | 	mov	local01, result3
0a3c8     0C 4E 05 F1 | 	add	fp, #12
0a3cc     A7 FA 61 FC | 	wrlong	result1, fp
0a3d0     04 4E 05 F1 | 	add	fp, #4
0a3d4     A7 FC 61 FC | 	wrlong	result2, fp
0a3d8     04 4E 05 F1 | 	add	fp, #4
0a3dc     A7 1E 62 FC | 	wrlong	local01, fp
0a3e0     08 4E 85 F1 | 	sub	fp, #8
0a3e4     A7 12 02 F6 | 	mov	arg01, fp
0a3e8     0C 4E 85 F1 | 	sub	fp, #12
0a3ec     B0 3F B0 FD | 	call	#_converttoint
0a3f0     04 4E 05 F1 | 	add	fp, #4
0a3f4     A7 FA 61 FC | 	wrlong	result1, fp
0a3f8     04 4E 85 F1 | 	sub	fp, #4
0a3fc                 | LR__0821
0a3fc                 | ' 
0a3fc                 | ' 
0a3fc                 | ' print
0a3fc     00 12 06 F6 | 	mov	arg01, #0
0a400     04 04 B1 FD | 	call	#__system___getiolock_0334
0a404     FD 12 02 F6 | 	mov	arg01, result1
0a408     48 AE B0 FD | 	call	#__system___lockmem
0a40c     00 12 06 F6 | 	mov	arg01, #0
0a410     0A 14 06 F6 | 	mov	arg02, #10
0a414     00 16 06 F6 | 	mov	arg03, #0
0a418     D4 BA B0 FD | 	call	#__system___basic_print_char
0a41c     00 12 06 F6 | 	mov	arg01, #0
0a420     E4 03 B1 FD | 	call	#__system___getiolock_0334
0a424     FD 00 68 FC | 	wrlong	#0, result1
0a428     41 00 00 FF 
0a42c     48 E4 05 F1 | 	add	objptr, ##33352
0a430     F2 20 02 FB | 	rdlong	local02, objptr
0a434     11 00 00 FF 
0a438     54 E4 05 F1 | 	add	objptr, ##8788
0a43c     F2 20 62 FC | 	wrlong	local02, objptr
0a440     52 00 00 FF 
0a444     9C E4 85 F1 | 	sub	objptr, ##42140
0a448                 | ' do 
0a448                 | LR__0822
0a448     20 4E 05 F1 | 	add	fp, #32
0a44c     A7 12 02 F6 | 	mov	arg01, fp
0a450     20 4E 85 F1 | 	sub	fp, #32
0a454     52 00 00 FF 
0a458     9C E4 05 F1 | 	add	objptr, ##42140
0a45c     F2 14 02 FB | 	rdlong	arg02, objptr
0a460     18 16 06 F6 | 	mov	arg03, #24
0a464     46 00 00 FF 
0a468     DC E5 85 F1 | 	sub	objptr, ##36316
0a46c     F8 A2 B0 FD | 	call	#_psram_spin2_read1
0a470     0B 00 00 FF 
0a474     C0 E4 85 F1 | 	sub	objptr, ##5824
0a478                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0a478                 | '   if header(0)<> $FFFFFFFF then
0a478     20 4E 05 F1 | 	add	fp, #32
0a47c     A7 20 02 FB | 	rdlong	local02, fp
0a480     20 4E 85 F1 | 	sub	fp, #32
0a484     FF FF 7F FF 
0a488     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0a48c     A8 00 90 AD |  if_e	jmp	#LR__0824
0a490     38 4E 05 F1 | 	add	fp, #56
0a494     3F 16 06 F6 | 	mov	arg03, #63
0a498     28 16 62 FD | 	setq	arg03
0a49c     A7 00 68 FC | 	wrlong	#0, fp
0a4a0     A7 12 02 F6 | 	mov	arg01, fp
0a4a4     10 4E 85 F1 | 	sub	fp, #16
0a4a8     A7 14 02 FB | 	rdlong	arg02, fp
0a4ac     04 4E 05 F1 | 	add	fp, #4
0a4b0     A7 16 02 FB | 	rdlong	arg03, fp
0a4b4     2C 4E 85 F1 | 	sub	fp, #44
0a4b8     0B 00 00 FF 
0a4bc     C0 E4 05 F1 | 	add	objptr, ##5824
0a4c0     A4 A2 B0 FD | 	call	#_psram_spin2_read1
0a4c4     0B 00 00 FF 
0a4c8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a4cc                 | '     longfill(linebuf,0,64)
0a4cc                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0a4cc                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0a4cc     20 4E 05 F1 | 	add	fp, #32
0a4d0     A7 20 02 FB | 	rdlong	local02, fp
0a4d4     1C 4E 85 F1 | 	sub	fp, #28
0a4d8     A7 1E 02 FB | 	rdlong	local01, fp
0a4dc     04 4E 85 F1 | 	sub	fp, #4
0a4e0     0F 21 52 F2 | 	cmps	local02, local01 wc
0a4e4     30 00 90 CD |  if_b	jmp	#LR__0823
0a4e8     20 4E 05 F1 | 	add	fp, #32
0a4ec     A7 20 02 FB | 	rdlong	local02, fp
0a4f0     18 4E 85 F1 | 	sub	fp, #24
0a4f4     A7 16 02 FB | 	rdlong	arg03, fp
0a4f8     08 4E 85 F1 | 	sub	fp, #8
0a4fc     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0a500     14 00 90 1D |  if_a	jmp	#LR__0823
0a504     38 4E 05 F1 | 	add	fp, #56
0a508     A7 12 02 F6 | 	mov	arg01, fp
0a50c     38 4E 85 F1 | 	sub	fp, #56
0a510                 | ' 
0a510                 | ' write(text)
0a510     1C 9D B0 FD | 	call	#_hg010b_spin2_write
0a514                 | ' crlf
0a514     78 9E B0 FD | 	call	#_hg010b_spin2_crlf
0a518                 | LR__0823
0a518     34 4E 05 F1 | 	add	fp, #52
0a51c     A7 20 02 FB | 	rdlong	local02, fp
0a520     34 4E 85 F1 | 	sub	fp, #52
0a524     52 00 00 FF 
0a528     9C E4 05 F1 | 	add	objptr, ##42140
0a52c     F2 20 62 FC | 	wrlong	local02, objptr
0a530     52 00 00 FF 
0a534     9C E4 85 F1 | 	sub	objptr, ##42140
0a538                 | LR__0824
0a538     34 4E 05 F1 | 	add	fp, #52
0a53c     A7 20 02 FB | 	rdlong	local02, fp
0a540     34 4E 85 F1 | 	sub	fp, #52
0a544     FF FF 3F FF 
0a548     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a54c     20 4E 05 51 |  if_ne	add	fp, #32
0a550     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a554     20 4E 85 51 |  if_ne	sub	fp, #32
0a558     FF FF 7F 5F 
0a55c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a560     E4 FE 9F 5D |  if_ne	jmp	#LR__0822
0a564     A7 F0 03 F6 | 	mov	ptra, fp
0a568     B2 00 A0 FD | 	call	#popregs_
0a56c                 | _do_list_ret
0a56c     2D 00 64 FD | 	ret
0a570                 | 
0a570                 | ' 
0a570                 | ' '---------------- Clear the program
0a570                 | ' 
0a570                 | ' sub do_new
0a570                 | _do_new
0a570     03 4A 05 F6 | 	mov	COUNT_, #3
0a574     A8 00 A0 FD | 	call	#pushregs_
0a578     00 12 06 F6 | 	mov	arg01, #0
0a57c     01 14 66 F6 | 	neg	arg02, #1
0a580     01 16 06 F6 | 	mov	arg03, #1
0a584     00 18 06 F6 | 	mov	arg04, #0
0a588     0B 00 00 FF 
0a58c     C0 E4 05 F1 | 	add	objptr, ##5824
0a590                 | '     return fill(addr, pattern, count, listPtr, 4)
0a590     04 1A 06 F6 | 	mov	arg05, #4
0a594     08 A3 B0 FD | 	call	#_psram_spin2_fill
0a598     20 00 00 FF 
0a59c     0C E5 05 F1 | 	add	objptr, ##16652
0a5a0     F2 00 68 FC | 	wrlong	#0, objptr
0a5a4     15 00 00 FF 
0a5a8     7C E4 05 F1 | 	add	objptr, ##10876
0a5ac     F2 00 68 FC | 	wrlong	#0, objptr
0a5b0     0F 00 00 FF 
0a5b4     2C E5 05 F1 | 	add	objptr, ##7980
0a5b8     F2 00 68 FC | 	wrlong	#0, objptr
0a5bc     04 E4 05 F1 | 	add	objptr, #4
0a5c0     F2 00 68 FC | 	wrlong	#0, objptr
0a5c4     16 00 00 FF 
0a5c8     5C E5 85 F1 | 	sub	objptr, ##11612
0a5cc     F2 00 68 FC | 	wrlong	#0, objptr
0a5d0     07 00 00 FF 
0a5d4     24 E4 05 F1 | 	add	objptr, ##3620
0a5d8     F2 00 68 FC | 	wrlong	#0, objptr
0a5dc     07 00 00 FF 
0a5e0     20 E4 85 F1 | 	sub	objptr, ##3616
0a5e4     F2 00 68 FC | 	wrlong	#0, objptr
0a5e8     0F 00 00 FF 
0a5ec     34 E4 05 F1 | 	add	objptr, ##7732
0a5f0     F2 00 68 FC | 	wrlong	#0, objptr
0a5f4     08 00 00 FF 
0a5f8     08 E4 85 F1 | 	sub	objptr, ##4104
0a5fc     F2 00 68 FC | 	wrlong	#0, objptr
0a600     04 E4 05 F1 | 	add	objptr, #4
0a604     FF FF FF FF 
0a608     F2 FE 6B FC | 	wrlong	##-1, objptr
0a60c     0F 00 00 FF 
0a610     4C E5 05 F1 | 	add	objptr, ##8012
0a614     F2 00 68 FC | 	wrlong	#0, objptr
0a618                 | ' 
0a618                 | ' pslpoke(0,$FFFFFFFF)
0a618                 | ' varnum=0
0a618                 | ' programstart=0 :runptr=0 : runptr2=0
0a618                 | ' stackpointer=0
0a618                 | ' lineptr=0 
0a618                 | ' programptr=0 : stringptr=0
0a618                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0a618                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0a618     00 1E 06 F6 | 	mov	local01, #0
0a61c     07 00 00 FF 
0a620     40 E5 85 F1 | 	sub	objptr, ##3904
0a624     97 16 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
0a628                 | LR__0830
0a628     0F 21 02 F6 | 	mov	local02, local01
0a62c     02 20 66 F0 | 	shl	local02, #2
0a630     0F 21 02 F1 | 	add	local02, local01
0a634     02 20 66 F0 | 	shl	local02, #2
0a638     F2 20 02 F1 | 	add	local02, objptr
0a63c     08 20 06 F1 | 	add	local02, #8
0a640     FF FF FF FF 
0a644     10 FF 6B FC | 	wrlong	##-1, local02
0a648     01 1E 06 F1 | 	add	local01, #1
0a64c     81 1E 56 F2 | 	cmps	local01, #129 wc
0a650     D4 FF 9F CD |  if_b	jmp	#LR__0830
0a654                 | LR__0831
0a654     49 00 00 FF 
0a658     5C E4 85 F1 | 	sub	objptr, ##37468
0a65c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0a65c     00 1E 06 F6 | 	mov	local01, #0
0a660                 | LR__0832
0a660     0F 21 02 F6 | 	mov	local02, local01
0a664     02 20 66 F0 | 	shl	local02, #2
0a668     51 00 00 FF 
0a66c     F8 E5 05 F1 | 	add	objptr, ##41976
0a670     F2 20 02 F1 | 	add	local02, objptr
0a674     10 21 0A FB | 	rdlong	local02, local02 wz
0a678     51 00 00 FF 
0a67c     F8 E5 85 F1 | 	sub	objptr, ##41976
0a680     34 00 90 AD |  if_e	jmp	#LR__0833
0a684     0F 13 02 F6 | 	mov	arg01, local01
0a688     00 14 06 F6 | 	mov	arg02, #0
0a68c     00 16 06 F6 | 	mov	arg03, #0
0a690     1C 8C B0 FD | 	call	#_hg010b_spin2_setspritesize
0a694     0F 21 02 F6 | 	mov	local02, local01
0a698     02 20 66 F0 | 	shl	local02, #2
0a69c     51 00 00 FF 
0a6a0     F8 E5 05 F1 | 	add	objptr, ##41976
0a6a4     F2 20 02 F1 | 	add	local02, objptr
0a6a8     10 13 02 FB | 	rdlong	arg01, local02
0a6ac     51 00 00 FF 
0a6b0     F8 E5 85 F1 | 	sub	objptr, ##41976
0a6b4     40 E7 B0 FD | 	call	#__system___gc_free
0a6b8                 | LR__0833
0a6b8     F2 22 02 FB | 	rdlong	local03, objptr
0a6bc     52 00 00 FF 
0a6c0     3C E4 05 F1 | 	add	objptr, ##42044
0a6c4     F2 22 62 FC | 	wrlong	local03, objptr
0a6c8     52 00 00 FF 
0a6cc     3C E4 85 F1 | 	sub	objptr, ##42044
0a6d0     11 12 06 F6 | 	mov	arg01, #17
0a6d4     08 14 06 F6 | 	mov	arg02, #8
0a6d8     10 16 06 F6 | 	mov	arg03, #16
0a6dc     D0 8B B0 FD | 	call	#_hg010b_spin2_setspritesize
0a6e0     01 1E 06 F1 | 	add	local01, #1
0a6e4     10 1E 56 F2 | 	cmps	local01, #16 wc
0a6e8     74 FF 9F CD |  if_b	jmp	#LR__0832
0a6ec     A7 F0 03 F6 | 	mov	ptra, fp
0a6f0     B2 00 A0 FD | 	call	#popregs_
0a6f4                 | _do_new_ret
0a6f4     2D 00 64 FD | 	ret
0a6f8                 | 
0a6f8                 | ' 
0a6f8                 | ' '----------------------- goto
0a6f8                 | ' sub do_fast_goto
0a6f8                 | _do_fast_goto
0a6f8     02 4A 05 F6 | 	mov	COUNT_, #2
0a6fc     A8 00 A0 FD | 	call	#pushregs_
0a700                 | _do_fast_goto_enter
0a700     41 00 00 FF 
0a704     44 E4 05 F1 | 	add	objptr, ##33348
0a708     F2 12 02 FB | 	rdlong	arg01, objptr
0a70c     09 1F 02 F6 | 	mov	local01, arg01
0a710     01 1E 66 F0 | 	shl	local01, #1
0a714     09 1F 02 F1 | 	add	local01, arg01
0a718     02 1E 66 F0 | 	shl	local01, #2
0a71c     03 00 00 FF 
0a720     04 E4 85 F1 | 	sub	objptr, ##1540
0a724     F2 1E 02 F1 | 	add	local01, objptr
0a728     0F 21 02 FB | 	rdlong	local02, local01
0a72c     10 13 02 F6 | 	mov	arg01, local02
0a730     3E 00 00 FF 
0a734     40 E4 85 F1 | 	sub	objptr, ##31808
0a738     E0 77 B0 FD | 	call	#_pslpeek
0a73c     FD 12 02 F6 | 	mov	arg01, result1
0a740                 | ' 
0a740                 | ' testptr=compiledline(lineptr_e).result.uresult
0a740                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0a740                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0a740     41 00 00 FF 
0a744     44 E4 05 F1 | 	add	objptr, ##33348
0a748     F2 FA 01 FB | 	rdlong	result1, objptr
0a74c     FD 1E 02 F6 | 	mov	local01, result1
0a750     01 1E 66 F0 | 	shl	local01, #1
0a754     FD 1E 02 F1 | 	add	local01, result1
0a758     02 1E 66 F0 | 	shl	local01, #2
0a75c     03 00 00 FF 
0a760     04 E4 85 F1 | 	sub	objptr, ##1540
0a764     F2 1E 02 F1 | 	add	local01, objptr
0a768     04 1E 06 F1 | 	add	local01, #4
0a76c     0F 1F 02 FB | 	rdlong	local01, local01
0a770     0F 13 0A F2 | 	cmp	arg01, local01 wz
0a774     3E 00 00 FF 
0a778     40 E4 85 F1 | 	sub	objptr, ##31808
0a77c     58 00 90 5D |  if_ne	jmp	#LR__0840
0a780     50 00 00 FF 
0a784     74 E5 05 F1 | 	add	objptr, ##41332
0a788     F2 20 62 FC | 	wrlong	local02, objptr
0a78c     0F 00 00 FF 
0a790     34 E5 85 F1 | 	sub	objptr, ##7988
0a794     F2 20 02 FB | 	rdlong	local02, objptr
0a798     01 20 86 F1 | 	sub	local02, #1
0a79c     04 E4 05 F1 | 	add	objptr, #4
0a7a0     F2 20 62 FC | 	wrlong	local02, objptr
0a7a4                 | '   runptr=testptr
0a7a4                 | '   lineptr_e=lineptr-1
0a7a4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0a7a4     0F 00 00 FF 
0a7a8     54 E5 05 F1 | 	add	objptr, ##8020
0a7ac     F2 20 02 FB | 	rdlong	local02, objptr
0a7b0     50 00 00 FF 
0a7b4     98 E5 85 F1 | 	sub	objptr, ##41368
0a7b8     FF FF 3F FF 
0a7bc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a7c0     50 00 00 AF 
0a7c4     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a7c8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a7cc     50 00 00 AF 
0a7d0     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a7d4     04 00 90 FD | 	jmp	#LR__0841
0a7d8                 | LR__0840
0a7d8     0C 00 B0 FD | 	call	#_do_find_goto
0a7dc                 | LR__0841
0a7dc     A7 F0 03 F6 | 	mov	ptra, fp
0a7e0     B2 00 A0 FD | 	call	#popregs_
0a7e4                 | _do_fast_goto_ret
0a7e4     2D 00 64 FD | 	ret
0a7e8                 | 
0a7e8                 | ' 
0a7e8                 | ' 
0a7e8                 | ' 
0a7e8                 | ' 
0a7e8                 | ' sub do_find_goto
0a7e8                 | _do_find_goto
0a7e8     03 4A 05 F6 | 	mov	COUNT_, #3
0a7ec     A8 00 A0 FD | 	call	#pushregs_
0a7f0     24 F0 07 F1 | 	add	ptra, #36
0a7f4                 | _do_find_goto_enter
0a7f4     41 00 00 FF 
0a7f8     44 E4 05 F1 | 	add	objptr, ##33348
0a7fc     F2 1E 02 FB | 	rdlong	local01, objptr
0a800     0F 21 02 F6 | 	mov	local02, local01
0a804     01 20 66 F0 | 	shl	local02, #1
0a808     0F 21 02 F1 | 	add	local02, local01
0a80c     02 20 66 F0 | 	shl	local02, #2
0a810     03 00 00 FF 
0a814     04 E4 85 F1 | 	sub	objptr, ##1540
0a818     F2 20 02 F1 | 	add	local02, objptr
0a81c     04 20 06 F1 | 	add	local02, #4
0a820     10 21 02 FB | 	rdlong	local02, local02
0a824     A7 20 62 FC | 	wrlong	local02, fp
0a828     03 00 00 FF 
0a82c     08 E4 05 F1 | 	add	objptr, ##1544
0a830     F2 22 02 FB | 	rdlong	local03, objptr
0a834     41 00 00 FF 
0a838     48 E4 85 F1 | 	sub	objptr, ##33352
0a83c     04 4E 05 F1 | 	add	fp, #4
0a840     A7 22 62 FC | 	wrlong	local03, fp
0a844     04 4E 85 F1 | 	sub	fp, #4
0a848                 | ' 
0a848                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a848                 | '  ' print "find goto"                                                                     'print gotoline 
0a848                 | ' gotoptr=programstart
0a848                 | ' do
0a848                 | LR__0850
0a848     0C 4E 05 F1 | 	add	fp, #12
0a84c     A7 12 02 F6 | 	mov	arg01, fp
0a850     08 4E 85 F1 | 	sub	fp, #8
0a854     A7 14 02 FB | 	rdlong	arg02, fp
0a858     04 4E 85 F1 | 	sub	fp, #4
0a85c     18 16 06 F6 | 	mov	arg03, #24
0a860     0B 00 00 FF 
0a864     C0 E4 05 F1 | 	add	objptr, ##5824
0a868     FC 9E B0 FD | 	call	#_psram_spin2_read1
0a86c     0B 00 00 FF 
0a870     C0 E4 85 F1 | 	sub	objptr, ##5824
0a874                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a874                 | '   if gotoheader(0)<>$FFFFFFFF then
0a874     0C 4E 05 F1 | 	add	fp, #12
0a878     A7 22 02 FB | 	rdlong	local03, fp
0a87c     0C 4E 85 F1 | 	sub	fp, #12
0a880     FF FF 7F FF 
0a884     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a888     24 00 90 AD |  if_e	jmp	#LR__0851
0a88c     04 4E 05 F1 | 	add	fp, #4
0a890     A7 22 02 FB | 	rdlong	local03, fp
0a894     04 4E 05 F1 | 	add	fp, #4
0a898     A7 22 62 FC | 	wrlong	local03, fp
0a89c     18 4E 05 F1 | 	add	fp, #24
0a8a0     A7 22 02 FB | 	rdlong	local03, fp
0a8a4     1C 4E 85 F1 | 	sub	fp, #28
0a8a8     A7 22 62 FC | 	wrlong	local03, fp
0a8ac     04 4E 85 F1 | 	sub	fp, #4
0a8b0                 | LR__0851
0a8b0     20 4E 05 F1 | 	add	fp, #32
0a8b4     A7 22 02 FB | 	rdlong	local03, fp
0a8b8     20 4E 85 F1 | 	sub	fp, #32
0a8bc     FF FF 3F FF 
0a8c0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a8c4     0C 4E 05 51 |  if_ne	add	fp, #12
0a8c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a8cc     0C 4E 85 51 |  if_ne	sub	fp, #12
0a8d0     FF FF 7F 5F 
0a8d4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a8d8     18 00 90 AD |  if_e	jmp	#LR__0852
0a8dc     0C 4E 05 F1 | 	add	fp, #12
0a8e0     A7 22 02 FB | 	rdlong	local03, fp
0a8e4     0C 4E 85 F1 | 	sub	fp, #12
0a8e8     A7 20 02 FB | 	rdlong	local02, fp
0a8ec     10 23 0A F2 | 	cmp	local03, local02 wz
0a8f0     54 FF 9F 5D |  if_ne	jmp	#LR__0850
0a8f4                 | LR__0852
0a8f4                 | ' 
0a8f4                 | ' if gotoheader(0)=gotoline then
0a8f4     0C 4E 05 F1 | 	add	fp, #12
0a8f8     A7 22 02 FB | 	rdlong	local03, fp
0a8fc     0C 4E 85 F1 | 	sub	fp, #12
0a900     A7 1E 02 FB | 	rdlong	local01, fp
0a904     0F 23 0A F2 | 	cmp	local03, local01 wz
0a908     D8 00 90 5D |  if_ne	jmp	#LR__0853
0a90c     41 00 00 FF 
0a910     44 E4 05 F1 | 	add	objptr, ##33348
0a914     F2 1E 02 FB | 	rdlong	local01, objptr
0a918     0F 21 02 F6 | 	mov	local02, local01
0a91c     01 20 66 F0 | 	shl	local02, #1
0a920     0F 21 02 F1 | 	add	local02, local01
0a924     02 20 66 F0 | 	shl	local02, #2
0a928     03 00 00 FF 
0a92c     04 E4 85 F1 | 	sub	objptr, ##1540
0a930     F2 20 02 F1 | 	add	local02, objptr
0a934     08 4E 05 F1 | 	add	fp, #8
0a938     A7 22 02 FB | 	rdlong	local03, fp
0a93c     10 23 62 FC | 	wrlong	local03, local02
0a940     03 00 00 FF 
0a944     04 E4 05 F1 | 	add	objptr, ##1540
0a948     F2 1E 02 FB | 	rdlong	local01, objptr
0a94c     0F 21 02 F6 | 	mov	local02, local01
0a950     01 20 66 F0 | 	shl	local02, #1
0a954     0F 21 02 F1 | 	add	local02, local01
0a958     02 20 66 F0 | 	shl	local02, #2
0a95c     03 00 00 FF 
0a960     04 E4 85 F1 | 	sub	objptr, ##1540
0a964     F2 20 02 F1 | 	add	local02, objptr
0a968     08 20 06 F1 | 	add	local02, #8
0a96c     10 9D 68 FC | 	wrlong	#78, local02
0a970     03 00 00 FF 
0a974     04 E4 05 F1 | 	add	objptr, ##1540
0a978     F2 20 02 FB | 	rdlong	local02, objptr
0a97c     10 13 02 F6 | 	mov	arg01, local02
0a980     01 12 66 F0 | 	shl	arg01, #1
0a984     10 13 02 F1 | 	add	arg01, local02
0a988     02 12 66 F0 | 	shl	arg01, #2
0a98c     03 00 00 FF 
0a990     04 E4 85 F1 | 	sub	objptr, ##1540
0a994     F2 12 02 F1 | 	add	arg01, objptr
0a998     12 00 00 FF 
0a99c     3C E5 05 F1 | 	add	objptr, ##9532
0a9a0     F2 14 02 FB | 	rdlong	arg02, objptr
0a9a4     02 22 06 F6 | 	mov	local03, #2
0a9a8     10 23 02 F1 | 	add	local03, local02
0a9ac     14 00 00 FF 
0a9b0     54 E5 85 F1 | 	sub	objptr, ##10580
0a9b4     F2 16 02 FB | 	rdlong	arg03, objptr
0a9b8     0B 23 02 FD | 	qmul	local03, arg03
0a9bc     08 4E 85 F1 | 	sub	fp, #8
0a9c0     30 00 00 FF 
0a9c4     68 E5 85 F1 | 	sub	objptr, ##24936
0a9c8     18 22 62 FD | 	getqx	local03
0a9cc     11 15 02 F1 | 	add	arg02, local03
0a9d0     30 9E B0 FD | 	call	#_psram_spin2_write
0a9d4     0B 00 00 FF 
0a9d8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9dc     18 FD BF FD | 	call	#_do_fast_goto
0a9e0     08 00 90 FD | 	jmp	#LR__0854
0a9e4                 | LR__0853
0a9e4     26 12 06 F6 | 	mov	arg01, #38
0a9e8     74 73 B0 FD | 	call	#_printerror
0a9ec                 | LR__0854
0a9ec     A7 F0 03 F6 | 	mov	ptra, fp
0a9f0     B2 00 A0 FD | 	call	#popregs_
0a9f4                 | _do_find_goto_ret
0a9f4     2D 00 64 FD | 	ret
0a9f8                 | 
0a9f8                 | ' 
0a9f8                 | ' sub do_slow_goto
0a9f8                 | _do_slow_goto
0a9f8                 | _do_slow_goto_ret
0a9f8     2D 00 64 FD | 	ret
0a9fc                 | 
0a9fc                 | ' 
0a9fc                 | ' '----------------------- Error processing
0a9fc                 | ' 
0a9fc                 | ' sub do_error
0a9fc                 | _do_error
0a9fc     01 4A 05 F6 | 	mov	COUNT_, #1
0aa00     A8 00 A0 FD | 	call	#pushregs_
0aa04     41 00 00 FF 
0aa08     44 E4 05 F1 | 	add	objptr, ##33348
0aa0c     F2 18 02 FB | 	rdlong	arg04, objptr
0aa10     0C 17 02 F6 | 	mov	arg03, arg04
0aa14     01 16 66 F0 | 	shl	arg03, #1
0aa18     0C 17 02 F1 | 	add	arg03, arg04
0aa1c     02 16 66 F0 | 	shl	arg03, #2
0aa20     03 00 00 FF 
0aa24     04 E4 85 F1 | 	sub	objptr, ##1540
0aa28     F2 16 02 F1 | 	add	arg03, objptr
0aa2c     0B 1F 02 FB | 	rdlong	local01, arg03
0aa30                 | ' r=compiledline(lineptr_e).result.uresult
0aa30                 | ' print "Error ";r;": ";errors$(r)
0aa30     00 12 06 F6 | 	mov	arg01, #0
0aa34     3E 00 00 FF 
0aa38     40 E4 85 F1 | 	sub	objptr, ##31808
0aa3c     C8 FD B0 FD | 	call	#__system___getiolock_0334
0aa40     FD 12 02 F6 | 	mov	arg01, result1
0aa44     0C A8 B0 FD | 	call	#__system___lockmem
0aa48     24 01 00 FF 
0aa4c     43 15 06 F6 | 	mov	arg02, ##@LR__4292
0aa50     00 12 06 F6 | 	mov	arg01, #0
0aa54     00 16 06 F6 | 	mov	arg03, #0
0aa58     EC B4 B0 FD | 	call	#__system___basic_print_string
0aa5c     00 12 06 F6 | 	mov	arg01, #0
0aa60     0F 15 02 F6 | 	mov	arg02, local01
0aa64     00 16 06 F6 | 	mov	arg03, #0
0aa68     0A 18 06 F6 | 	mov	arg04, #10
0aa6c     5C B5 B0 FD | 	call	#__system___basic_print_unsigned
0aa70     24 01 00 FF 
0aa74     4A 15 06 F6 | 	mov	arg02, ##@LR__4293
0aa78     00 12 06 F6 | 	mov	arg01, #0
0aa7c     00 16 06 F6 | 	mov	arg03, #0
0aa80     C4 B4 B0 FD | 	call	#__system___basic_print_string
0aa84     02 1E 66 F0 | 	shl	local01, #2
0aa88     3C 00 00 FF 
0aa8c     40 E4 05 F1 | 	add	objptr, ##30784
0aa90     F2 1E 02 F1 | 	add	local01, objptr
0aa94     0F 15 02 FB | 	rdlong	arg02, local01
0aa98     00 12 06 F6 | 	mov	arg01, #0
0aa9c     00 16 06 F6 | 	mov	arg03, #0
0aaa0     3C 00 00 FF 
0aaa4     40 E4 85 F1 | 	sub	objptr, ##30784
0aaa8     9C B4 B0 FD | 	call	#__system___basic_print_string
0aaac     00 12 06 F6 | 	mov	arg01, #0
0aab0     0A 14 06 F6 | 	mov	arg02, #10
0aab4     00 16 06 F6 | 	mov	arg03, #0
0aab8     34 B4 B0 FD | 	call	#__system___basic_print_char
0aabc     00 12 06 F6 | 	mov	arg01, #0
0aac0     44 FD B0 FD | 	call	#__system___getiolock_0334
0aac4     FD 00 68 FC | 	wrlong	#0, result1
0aac8     A7 F0 03 F6 | 	mov	ptra, fp
0aacc     B2 00 A0 FD | 	call	#popregs_
0aad0                 | _do_error_ret
0aad0     2D 00 64 FD | 	ret
0aad4                 | 
0aad4                 | ' 
0aad4                 | ' 
0aad4                 | ' '------------------ Assigning to a variable  
0aad4                 | ' 
0aad4                 | ' 
0aad4                 | ' sub do_assign
0aad4                 | _do_assign
0aad4     05 4A 05 F6 | 	mov	COUNT_, #5
0aad8     A8 00 A0 FD | 	call	#pushregs_
0aadc     41 00 00 FF 
0aae0     44 E4 05 F1 | 	add	objptr, ##33348
0aae4     F2 24 02 FB | 	rdlong	local04, objptr
0aae8     12 27 02 F6 | 	mov	local05, local04
0aaec     01 26 66 F0 | 	shl	local05, #1
0aaf0     12 27 02 F1 | 	add	local05, local04
0aaf4     02 26 66 F0 | 	shl	local05, #2
0aaf8     03 00 00 FF 
0aafc     04 E4 85 F1 | 	sub	objptr, ##1540
0ab00     F2 26 02 F1 | 	add	local05, objptr
0ab04     13 27 02 FB | 	rdlong	local05, local05
0ab08     3E 00 00 FF 
0ab0c     40 E4 85 F1 | 	sub	objptr, ##31808
0ab10     24 E3 BF FD | 	call	#_pop
0ab14     FD 1E 02 F6 | 	mov	local01, result1
0ab18     FE 20 02 F6 | 	mov	local02, result2
0ab1c     FF 22 02 F6 | 	mov	local03, result3
0ab20     10 FD 01 F6 | 	mov	result2, local02
0ab24     13 25 02 F6 | 	mov	local04, local05
0ab28     04 24 66 F0 | 	shl	local04, #4
0ab2c     0B 00 00 FF 
0ab30     CC E5 05 F1 | 	add	objptr, ##6092
0ab34     F2 24 02 F1 | 	add	local04, objptr
0ab38     04 24 06 F1 | 	add	local04, #4
0ab3c     12 1F 62 FC | 	wrlong	local01, local04
0ab40     13 25 02 F6 | 	mov	local04, local05
0ab44     04 24 66 F0 | 	shl	local04, #4
0ab48     F2 24 02 F1 | 	add	local04, objptr
0ab4c     08 24 06 F1 | 	add	local04, #8
0ab50     12 FD 61 FC | 	wrlong	result2, local04
0ab54     13 FF 01 F6 | 	mov	result3, local05
0ab58     04 FE 65 F0 | 	shl	result3, #4
0ab5c     F2 FE 01 F1 | 	add	result3, objptr
0ab60     0C FE 05 F1 | 	add	result3, #12
0ab64     FF 22 62 FC | 	wrlong	local03, result3
0ab68     0B 00 00 FF 
0ab6c     CC E5 85 F1 | 	sub	objptr, ##6092
0ab70     A7 F0 03 F6 | 	mov	ptra, fp
0ab74     B2 00 A0 FD | 	call	#popregs_
0ab78                 | _do_assign_ret
0ab78     2D 00 64 FD | 	ret
0ab7c                 | 
0ab7c                 | ' 
0ab7c                 | ' 
0ab7c                 | ' ' --------------------- Read a variable and push to the stack
0ab7c                 | ' 
0ab7c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0ab7c                 | ' 
0ab7c                 | ' sub do_getvar
0ab7c                 | _do_getvar
0ab7c     03 4A 05 F6 | 	mov	COUNT_, #3
0ab80     A8 00 A0 FD | 	call	#pushregs_
0ab84     3C F0 07 F1 | 	add	ptra, #60
0ab88                 | ' 
0ab88                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0ab88     41 00 00 FF 
0ab8c     44 E4 05 F1 | 	add	objptr, ##33348
0ab90     F2 1E 02 FB | 	rdlong	local01, objptr
0ab94     0F 19 02 F6 | 	mov	arg04, local01
0ab98     01 18 66 F0 | 	shl	arg04, #1
0ab9c     0F 19 02 F1 | 	add	arg04, local01
0aba0     02 18 66 F0 | 	shl	arg04, #2
0aba4     03 00 00 FF 
0aba8     04 E4 85 F1 | 	sub	objptr, ##1540
0abac     F2 18 02 F1 | 	add	arg04, objptr
0abb0     04 18 06 F1 | 	add	arg04, #4
0abb4     0C 19 0A FB | 	rdlong	arg04, arg04 wz
0abb8     3E 00 00 FF 
0abbc     40 E4 85 F1 | 	sub	objptr, ##31808
0abc0     C4 00 90 5D |  if_ne	jmp	#LR__0861
0abc4     41 00 00 FF 
0abc8     44 E4 05 F1 | 	add	objptr, ##33348
0abcc     F2 1E 02 FB | 	rdlong	local01, objptr
0abd0     0F 13 02 F6 | 	mov	arg01, local01
0abd4     01 12 66 F0 | 	shl	arg01, #1
0abd8     0F 13 02 F1 | 	add	arg01, local01
0abdc     02 12 66 F0 | 	shl	arg01, #2
0abe0     03 00 00 FF 
0abe4     04 E4 85 F1 | 	sub	objptr, ##1540
0abe8     F2 12 02 F1 | 	add	arg01, objptr
0abec     09 1F 02 FB | 	rdlong	local01, arg01
0abf0     04 1E 66 F0 | 	shl	local01, #4
0abf4     32 00 00 FF 
0abf8     74 E4 85 F1 | 	sub	objptr, ##25716
0abfc     F2 1E 02 F1 | 	add	local01, objptr
0ac00     04 1E 06 F1 | 	add	local01, #4
0ac04     0F 13 02 FB | 	rdlong	arg01, local01
0ac08     04 1E 06 F1 | 	add	local01, #4
0ac0c     0F 1F 02 FB | 	rdlong	local01, local01
0ac10     A7 12 62 FC | 	wrlong	arg01, fp
0ac14     04 4E 05 F1 | 	add	fp, #4
0ac18     A7 1E 62 FC | 	wrlong	local01, fp
0ac1c     35 00 00 FF 
0ac20     78 E4 05 F1 | 	add	objptr, ##27256
0ac24     F2 1E 02 FB | 	rdlong	local01, objptr
0ac28     0F 13 02 F6 | 	mov	arg01, local01
0ac2c     01 12 66 F0 | 	shl	arg01, #1
0ac30     0F 13 02 F1 | 	add	arg01, local01
0ac34     02 12 66 F0 | 	shl	arg01, #2
0ac38     03 00 00 FF 
0ac3c     04 E4 85 F1 | 	sub	objptr, ##1540
0ac40     F2 12 02 F1 | 	add	arg01, objptr
0ac44     09 1F 02 FB | 	rdlong	local01, arg01
0ac48     04 1E 66 F0 | 	shl	local01, #4
0ac4c     32 00 00 FF 
0ac50     74 E4 85 F1 | 	sub	objptr, ##25716
0ac54     F2 1E 02 F1 | 	add	local01, objptr
0ac58     0C 1E 06 F1 | 	add	local01, #12
0ac5c     0F 1F 02 FB | 	rdlong	local01, local01
0ac60     04 4E 05 F1 | 	add	fp, #4
0ac64     A7 1E 62 FC | 	wrlong	local01, fp
0ac68                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ac68                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ac68                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ac68     08 4E 85 F1 | 	sub	fp, #8
0ac6c     00 1F 16 F2 | 	cmp	local01, #256 wc
0ac70     0B 00 00 FF 
0ac74     CC E5 85 F1 | 	sub	objptr, ##6092
0ac78     0C 00 90 3D |  if_ae	jmp	#LR__0860
0ac7c     A7 12 02 F6 | 	mov	arg01, fp
0ac80     4C E2 BF FD | 	call	#_push
0ac84     20 08 90 FD | 	jmp	#LR__0882
0ac88                 | LR__0860
0ac88                 | LR__0861
0ac88     41 00 00 FF 
0ac8c     44 E4 05 F1 | 	add	objptr, ##33348
0ac90     F2 18 02 FB | 	rdlong	arg04, objptr
0ac94     0C 17 02 F6 | 	mov	arg03, arg04
0ac98     01 16 66 F0 | 	shl	arg03, #1
0ac9c     0C 17 02 F1 | 	add	arg03, arg04
0aca0     02 16 66 F0 | 	shl	arg03, #2
0aca4     03 00 00 FF 
0aca8     04 E4 85 F1 | 	sub	objptr, ##1540
0acac     F2 16 02 F1 | 	add	arg03, objptr
0acb0     0B 19 02 FB | 	rdlong	arg04, arg03
0acb4     04 18 66 F0 | 	shl	arg04, #4
0acb8     32 00 00 FF 
0acbc     74 E4 85 F1 | 	sub	objptr, ##25716
0acc0     F2 18 02 F1 | 	add	arg04, objptr
0acc4     04 18 06 F1 | 	add	arg04, #4
0acc8     0C 13 02 FB | 	rdlong	arg01, arg04
0accc     0C 4E 05 F1 | 	add	fp, #12
0acd0     A7 12 62 FC | 	wrlong	arg01, fp
0acd4     0C 4E 85 F1 | 	sub	fp, #12
0acd8     0B 00 00 FF 
0acdc     CC E5 85 F1 | 	sub	objptr, ##6092
0ace0     38 72 B0 FD | 	call	#_pslpeek
0ace4     FD FA 31 F9 | 	getword	result1, result1, #0
0ace8     10 4E 05 F1 | 	add	fp, #16
0acec     A7 FA 61 FC | 	wrlong	result1, fp
0acf0     41 00 00 FF 
0acf4     44 E4 05 F1 | 	add	objptr, ##33348
0acf8     F2 18 02 FB | 	rdlong	arg04, objptr
0acfc     0C 17 02 F6 | 	mov	arg03, arg04
0ad00     01 16 66 F0 | 	shl	arg03, #1
0ad04     0C 17 02 F1 | 	add	arg03, arg04
0ad08     02 16 66 F0 | 	shl	arg03, #2
0ad0c     03 00 00 FF 
0ad10     04 E4 85 F1 | 	sub	objptr, ##1540
0ad14     F2 16 02 F1 | 	add	arg03, objptr
0ad18     04 16 06 F1 | 	add	arg03, #4
0ad1c     0B 19 02 FB | 	rdlong	arg04, arg03
0ad20     04 4E 05 F1 | 	add	fp, #4
0ad24     A7 18 62 FC | 	wrlong	arg04, fp
0ad28     08 4E 85 F1 | 	sub	fp, #8
0ad2c     A7 12 02 FB | 	rdlong	arg01, fp
0ad30     0C 4E 85 F1 | 	sub	fp, #12
0ad34     02 12 06 F1 | 	add	arg01, #2
0ad38     3E 00 00 FF 
0ad3c     40 E4 85 F1 | 	sub	objptr, ##31808
0ad40     80 71 B0 FD | 	call	#_pspeek
0ad44     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ad48     18 4E 05 F1 | 	add	fp, #24
0ad4c     A7 FA 61 FC | 	wrlong	result1, fp
0ad50     0C 4E 85 F1 | 	sub	fp, #12
0ad54     A7 12 02 FB | 	rdlong	arg01, fp
0ad58     0C 4E 85 F1 | 	sub	fp, #12
0ad5c     04 12 06 F1 | 	add	arg01, #4
0ad60     B8 71 B0 FD | 	call	#_pslpeek
0ad64     1C 4E 05 F1 | 	add	fp, #28
0ad68     A7 FA 61 FC | 	wrlong	result1, fp
0ad6c     10 4E 85 F1 | 	sub	fp, #16
0ad70     A7 12 02 FB | 	rdlong	arg01, fp
0ad74     0C 4E 85 F1 | 	sub	fp, #12
0ad78     08 12 06 F1 | 	add	arg01, #8
0ad7c     9C 71 B0 FD | 	call	#_pslpeek
0ad80     20 4E 05 F1 | 	add	fp, #32
0ad84     A7 FA 61 FC | 	wrlong	result1, fp
0ad88     14 4E 85 F1 | 	sub	fp, #20
0ad8c     A7 12 02 FB | 	rdlong	arg01, fp
0ad90     0C 4E 85 F1 | 	sub	fp, #12
0ad94     0C 12 06 F1 | 	add	arg01, #12
0ad98     80 71 B0 FD | 	call	#_pslpeek
0ad9c     24 4E 05 F1 | 	add	fp, #36
0ada0     A7 FA 61 FC | 	wrlong	result1, fp
0ada4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0ada4                 | ' esize=pspeek(arrptr+2)
0ada4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ada4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ada4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ada4                 | ' if numpar=3 then t1=pop() : i3=t1.result.uresult else i3=0
0ada4     10 4E 85 F1 | 	sub	fp, #16
0ada8     A7 18 02 FB | 	rdlong	arg04, fp
0adac     14 4E 85 F1 | 	sub	fp, #20
0adb0     03 18 0E F2 | 	cmp	arg04, #3 wz
0adb4     30 00 90 5D |  if_ne	jmp	#LR__0862
0adb8     7C E0 BF FD | 	call	#_pop
0adbc     A7 FA 61 FC | 	wrlong	result1, fp
0adc0     04 4E 05 F1 | 	add	fp, #4
0adc4     A7 FC 61 FC | 	wrlong	result2, fp
0adc8     04 4E 05 F1 | 	add	fp, #4
0adcc     A7 FE 61 FC | 	wrlong	result3, fp
0add0     08 4E 85 F1 | 	sub	fp, #8
0add4     A7 18 02 FB | 	rdlong	arg04, fp
0add8     30 4E 05 F1 | 	add	fp, #48
0addc     A7 18 62 FC | 	wrlong	arg04, fp
0ade0     30 4E 85 F1 | 	sub	fp, #48
0ade4     0C 00 90 FD | 	jmp	#LR__0863
0ade8                 | LR__0862
0ade8     30 4E 05 F1 | 	add	fp, #48
0adec     A7 00 68 FC | 	wrlong	#0, fp
0adf0     30 4E 85 F1 | 	sub	fp, #48
0adf4                 | LR__0863
0adf4                 | ' if numpar=2 then t1=pop() : i2=t1.result.uresult else i2=0
0adf4     14 4E 05 F1 | 	add	fp, #20
0adf8     A7 18 02 FB | 	rdlong	arg04, fp
0adfc     14 4E 85 F1 | 	sub	fp, #20
0ae00     02 18 0E F2 | 	cmp	arg04, #2 wz
0ae04     30 00 90 5D |  if_ne	jmp	#LR__0864
0ae08     2C E0 BF FD | 	call	#_pop
0ae0c     A7 FA 61 FC | 	wrlong	result1, fp
0ae10     04 4E 05 F1 | 	add	fp, #4
0ae14     A7 FC 61 FC | 	wrlong	result2, fp
0ae18     04 4E 05 F1 | 	add	fp, #4
0ae1c     A7 FE 61 FC | 	wrlong	result3, fp
0ae20     08 4E 85 F1 | 	sub	fp, #8
0ae24     A7 18 02 FB | 	rdlong	arg04, fp
0ae28     2C 4E 05 F1 | 	add	fp, #44
0ae2c     A7 18 62 FC | 	wrlong	arg04, fp
0ae30     2C 4E 85 F1 | 	sub	fp, #44
0ae34     0C 00 90 FD | 	jmp	#LR__0865
0ae38                 | LR__0864
0ae38     2C 4E 05 F1 | 	add	fp, #44
0ae3c     A7 00 68 FC | 	wrlong	#0, fp
0ae40     2C 4E 85 F1 | 	sub	fp, #44
0ae44                 | LR__0865
0ae44                 | ' if numpar=1 then t1=pop() : i1=t1.result.uresult else i1=0
0ae44     14 4E 05 F1 | 	add	fp, #20
0ae48     A7 18 02 FB | 	rdlong	arg04, fp
0ae4c     14 4E 85 F1 | 	sub	fp, #20
0ae50     01 18 0E F2 | 	cmp	arg04, #1 wz
0ae54     30 00 90 5D |  if_ne	jmp	#LR__0866
0ae58     DC DF BF FD | 	call	#_pop
0ae5c     A7 FA 61 FC | 	wrlong	result1, fp
0ae60     04 4E 05 F1 | 	add	fp, #4
0ae64     A7 FC 61 FC | 	wrlong	result2, fp
0ae68     04 4E 05 F1 | 	add	fp, #4
0ae6c     A7 FE 61 FC | 	wrlong	result3, fp
0ae70     08 4E 85 F1 | 	sub	fp, #8
0ae74     A7 18 02 FB | 	rdlong	arg04, fp
0ae78     28 4E 05 F1 | 	add	fp, #40
0ae7c     A7 18 62 FC | 	wrlong	arg04, fp
0ae80     28 4E 85 F1 | 	sub	fp, #40
0ae84     0C 00 90 FD | 	jmp	#LR__0867
0ae88                 | LR__0866
0ae88     28 4E 05 F1 | 	add	fp, #40
0ae8c     A7 00 68 FC | 	wrlong	#0, fp
0ae90     28 4E 85 F1 | 	sub	fp, #40
0ae94                 | LR__0867
0ae94                 | ' print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ae94     00 12 06 F6 | 	mov	arg01, #0
0ae98     6C F9 B0 FD | 	call	#__system___getiolock_0334
0ae9c     FD 12 02 F6 | 	mov	arg01, result1
0aea0     B0 A3 B0 FD | 	call	#__system___lockmem
0aea4     24 01 00 FF 
0aea8     4D 15 06 F6 | 	mov	arg02, ##@LR__4294
0aeac     00 12 06 F6 | 	mov	arg01, #0
0aeb0     00 16 06 F6 | 	mov	arg03, #0
0aeb4     90 B0 B0 FD | 	call	#__system___basic_print_string
0aeb8     00 12 06 F6 | 	mov	arg01, #0
0aebc     09 14 06 F6 | 	mov	arg02, #9
0aec0     00 16 06 F6 | 	mov	arg03, #0
0aec4     28 B0 B0 FD | 	call	#__system___basic_print_char
0aec8     1C 4E 05 F1 | 	add	fp, #28
0aecc     A7 14 02 FB | 	rdlong	arg02, fp
0aed0     1C 4E 85 F1 | 	sub	fp, #28
0aed4     00 12 06 F6 | 	mov	arg01, #0
0aed8     00 16 06 F6 | 	mov	arg03, #0
0aedc     0A 18 06 F6 | 	mov	arg04, #10
0aee0     E8 B0 B0 FD | 	call	#__system___basic_print_unsigned
0aee4     00 12 06 F6 | 	mov	arg01, #0
0aee8     09 14 06 F6 | 	mov	arg02, #9
0aeec     00 16 06 F6 | 	mov	arg03, #0
0aef0     FC AF B0 FD | 	call	#__system___basic_print_char
0aef4     24 01 00 FF 
0aef8     53 15 06 F6 | 	mov	arg02, ##@LR__4295
0aefc     00 12 06 F6 | 	mov	arg01, #0
0af00     00 16 06 F6 | 	mov	arg03, #0
0af04     40 B0 B0 FD | 	call	#__system___basic_print_string
0af08     00 12 06 F6 | 	mov	arg01, #0
0af0c     09 14 06 F6 | 	mov	arg02, #9
0af10     00 16 06 F6 | 	mov	arg03, #0
0af14     D8 AF B0 FD | 	call	#__system___basic_print_char
0af18     20 4E 05 F1 | 	add	fp, #32
0af1c     A7 14 02 FB | 	rdlong	arg02, fp
0af20     20 4E 85 F1 | 	sub	fp, #32
0af24     00 12 06 F6 | 	mov	arg01, #0
0af28     00 16 06 F6 | 	mov	arg03, #0
0af2c     0A 18 06 F6 | 	mov	arg04, #10
0af30     98 B0 B0 FD | 	call	#__system___basic_print_unsigned
0af34     00 12 06 F6 | 	mov	arg01, #0
0af38     09 14 06 F6 | 	mov	arg02, #9
0af3c     00 16 06 F6 | 	mov	arg03, #0
0af40     AC AF B0 FD | 	call	#__system___basic_print_char
0af44     24 01 00 FF 
0af48     59 15 06 F6 | 	mov	arg02, ##@LR__4296
0af4c     00 12 06 F6 | 	mov	arg01, #0
0af50     00 16 06 F6 | 	mov	arg03, #0
0af54     F0 AF B0 FD | 	call	#__system___basic_print_string
0af58     00 12 06 F6 | 	mov	arg01, #0
0af5c     09 14 06 F6 | 	mov	arg02, #9
0af60     00 16 06 F6 | 	mov	arg03, #0
0af64     88 AF B0 FD | 	call	#__system___basic_print_char
0af68     24 4E 05 F1 | 	add	fp, #36
0af6c     A7 14 02 FB | 	rdlong	arg02, fp
0af70     24 4E 85 F1 | 	sub	fp, #36
0af74     00 12 06 F6 | 	mov	arg01, #0
0af78     00 16 06 F6 | 	mov	arg03, #0
0af7c     0A 18 06 F6 | 	mov	arg04, #10
0af80     48 B0 B0 FD | 	call	#__system___basic_print_unsigned
0af84     00 12 06 F6 | 	mov	arg01, #0
0af88     09 14 06 F6 | 	mov	arg02, #9
0af8c     00 16 06 F6 | 	mov	arg03, #0
0af90     5C AF B0 FD | 	call	#__system___basic_print_char
0af94     24 01 00 FF 
0af98     5F 15 06 F6 | 	mov	arg02, ##@LR__4297
0af9c     00 12 06 F6 | 	mov	arg01, #0
0afa0     00 16 06 F6 | 	mov	arg03, #0
0afa4     A0 AF B0 FD | 	call	#__system___basic_print_string
0afa8     00 12 06 F6 | 	mov	arg01, #0
0afac     09 14 06 F6 | 	mov	arg02, #9
0afb0     00 16 06 F6 | 	mov	arg03, #0
0afb4     38 AF B0 FD | 	call	#__system___basic_print_char
0afb8     18 4E 05 F1 | 	add	fp, #24
0afbc     A7 14 02 FB | 	rdlong	arg02, fp
0afc0     18 4E 85 F1 | 	sub	fp, #24
0afc4     00 12 06 F6 | 	mov	arg01, #0
0afc8     00 16 06 F6 | 	mov	arg03, #0
0afcc     0A 18 06 F6 | 	mov	arg04, #10
0afd0     F8 AF B0 FD | 	call	#__system___basic_print_unsigned
0afd4     00 12 06 F6 | 	mov	arg01, #0
0afd8     09 14 06 F6 | 	mov	arg02, #9
0afdc     00 16 06 F6 | 	mov	arg03, #0
0afe0     0C AF B0 FD | 	call	#__system___basic_print_char
0afe4     24 01 00 FF 
0afe8     66 15 06 F6 | 	mov	arg02, ##@LR__4298
0afec     00 12 06 F6 | 	mov	arg01, #0
0aff0     00 16 06 F6 | 	mov	arg03, #0
0aff4     50 AF B0 FD | 	call	#__system___basic_print_string
0aff8     00 12 06 F6 | 	mov	arg01, #0
0affc     09 14 06 F6 | 	mov	arg02, #9
0b000     00 16 06 F6 | 	mov	arg03, #0
0b004     E8 AE B0 FD | 	call	#__system___basic_print_char
0b008     28 4E 05 F1 | 	add	fp, #40
0b00c     A7 14 02 FB | 	rdlong	arg02, fp
0b010     28 4E 85 F1 | 	sub	fp, #40
0b014     00 12 06 F6 | 	mov	arg01, #0
0b018     00 16 06 F6 | 	mov	arg03, #0
0b01c     0A 18 06 F6 | 	mov	arg04, #10
0b020     A8 AF B0 FD | 	call	#__system___basic_print_unsigned
0b024     00 12 06 F6 | 	mov	arg01, #0
0b028     09 14 06 F6 | 	mov	arg02, #9
0b02c     00 16 06 F6 | 	mov	arg03, #0
0b030     BC AE B0 FD | 	call	#__system___basic_print_char
0b034     24 01 00 FF 
0b038     6A 15 06 F6 | 	mov	arg02, ##@LR__4299
0b03c     00 12 06 F6 | 	mov	arg01, #0
0b040     00 16 06 F6 | 	mov	arg03, #0
0b044     00 AF B0 FD | 	call	#__system___basic_print_string
0b048     00 12 06 F6 | 	mov	arg01, #0
0b04c     09 14 06 F6 | 	mov	arg02, #9
0b050     00 16 06 F6 | 	mov	arg03, #0
0b054     98 AE B0 FD | 	call	#__system___basic_print_char
0b058     2C 4E 05 F1 | 	add	fp, #44
0b05c     A7 14 02 FB | 	rdlong	arg02, fp
0b060     2C 4E 85 F1 | 	sub	fp, #44
0b064     00 12 06 F6 | 	mov	arg01, #0
0b068     00 16 06 F6 | 	mov	arg03, #0
0b06c     0A 18 06 F6 | 	mov	arg04, #10
0b070     58 AF B0 FD | 	call	#__system___basic_print_unsigned
0b074     00 12 06 F6 | 	mov	arg01, #0
0b078     09 14 06 F6 | 	mov	arg02, #9
0b07c     00 16 06 F6 | 	mov	arg03, #0
0b080     6C AE B0 FD | 	call	#__system___basic_print_char
0b084     24 01 00 FF 
0b088     6E 15 06 F6 | 	mov	arg02, ##@LR__4300
0b08c     00 12 06 F6 | 	mov	arg01, #0
0b090     00 16 06 F6 | 	mov	arg03, #0
0b094     B0 AE B0 FD | 	call	#__system___basic_print_string
0b098     00 12 06 F6 | 	mov	arg01, #0
0b09c     09 14 06 F6 | 	mov	arg02, #9
0b0a0     00 16 06 F6 | 	mov	arg03, #0
0b0a4     48 AE B0 FD | 	call	#__system___basic_print_char
0b0a8     30 4E 05 F1 | 	add	fp, #48
0b0ac     A7 14 02 FB | 	rdlong	arg02, fp
0b0b0     30 4E 85 F1 | 	sub	fp, #48
0b0b4     00 12 06 F6 | 	mov	arg01, #0
0b0b8     00 16 06 F6 | 	mov	arg03, #0
0b0bc     0A 18 06 F6 | 	mov	arg04, #10
0b0c0     08 AF B0 FD | 	call	#__system___basic_print_unsigned
0b0c4     00 12 06 F6 | 	mov	arg01, #0
0b0c8     0A 14 06 F6 | 	mov	arg02, #10
0b0cc     00 16 06 F6 | 	mov	arg03, #0
0b0d0     1C AE B0 FD | 	call	#__system___basic_print_char
0b0d4     00 12 06 F6 | 	mov	arg01, #0
0b0d8     2C F7 B0 FD | 	call	#__system___getiolock_0334
0b0dc     FD 00 68 FC | 	wrlong	#0, result1
0b0e0     0C 4E 05 F1 | 	add	fp, #12
0b0e4     A7 18 02 FB | 	rdlong	arg04, fp
0b0e8     1C 4E 05 F1 | 	add	fp, #28
0b0ec     A7 20 02 FB | 	rdlong	local02, fp
0b0f0     04 4E 05 F1 | 	add	fp, #4
0b0f4     A7 16 02 FB | 	rdlong	arg03, fp
0b0f8     10 4E 85 F1 | 	sub	fp, #16
0b0fc     A7 14 02 FB | 	rdlong	arg02, fp
0b100     0A 17 02 FD | 	qmul	arg03, arg02
0b104     10 18 06 F1 | 	add	arg04, #16
0b108     14 4E 05 F1 | 	add	fp, #20
0b10c     A7 16 02 FB | 	rdlong	arg03, fp
0b110     18 12 62 FD | 	getqx	arg01
0b114     0A 17 02 FD | 	qmul	arg03, arg02
0b118     09 21 02 F1 | 	add	local02, arg01
0b11c     10 4E 85 F1 | 	sub	fp, #16
0b120     A7 16 02 FB | 	rdlong	arg03, fp
0b124     18 14 62 FD | 	getqx	arg02
0b128     0B 15 02 FD | 	qmul	arg02, arg03
0b12c     08 4E 85 F1 | 	sub	fp, #8
0b130     A7 16 02 FB | 	rdlong	arg03, fp
0b134     18 14 62 FD | 	getqx	arg02
0b138     0A 21 02 F1 | 	add	local02, arg02
0b13c     0B 21 02 FD | 	qmul	local02, arg03
0b140     1C 4E 05 F1 | 	add	fp, #28
0b144                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize : print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0b144     00 12 06 F6 | 	mov	arg01, #0
0b148     18 16 62 FD | 	getqx	arg03
0b14c     0B 19 02 F1 | 	add	arg04, arg03
0b150     A7 18 62 FC | 	wrlong	arg04, fp
0b154     34 4E 85 F1 | 	sub	fp, #52
0b158     AC F6 B0 FD | 	call	#__system___getiolock_0334
0b15c     FD 12 02 F6 | 	mov	arg01, result1
0b160     F0 A0 B0 FD | 	call	#__system___lockmem
0b164     24 01 00 FF 
0b168     72 15 06 F6 | 	mov	arg02, ##@LR__4301
0b16c     00 12 06 F6 | 	mov	arg01, #0
0b170     00 16 06 F6 | 	mov	arg03, #0
0b174     D0 AD B0 FD | 	call	#__system___basic_print_string
0b178     00 12 06 F6 | 	mov	arg01, #0
0b17c     09 14 06 F6 | 	mov	arg02, #9
0b180     00 16 06 F6 | 	mov	arg03, #0
0b184     68 AD B0 FD | 	call	#__system___basic_print_char
0b188     0C 4E 05 F1 | 	add	fp, #12
0b18c     A7 14 02 FB | 	rdlong	arg02, fp
0b190     0C 4E 85 F1 | 	sub	fp, #12
0b194     00 12 06 F6 | 	mov	arg01, #0
0b198     00 16 06 F6 | 	mov	arg03, #0
0b19c     0A 18 06 F6 | 	mov	arg04, #10
0b1a0     28 AE B0 FD | 	call	#__system___basic_print_unsigned
0b1a4     00 12 06 F6 | 	mov	arg01, #0
0b1a8     09 14 06 F6 | 	mov	arg02, #9
0b1ac     00 16 06 F6 | 	mov	arg03, #0
0b1b0     3C AD B0 FD | 	call	#__system___basic_print_char
0b1b4     24 01 00 FF 
0b1b8     7A 15 06 F6 | 	mov	arg02, ##@LR__4302
0b1bc     00 12 06 F6 | 	mov	arg01, #0
0b1c0     00 16 06 F6 | 	mov	arg03, #0
0b1c4     80 AD B0 FD | 	call	#__system___basic_print_string
0b1c8     00 12 06 F6 | 	mov	arg01, #0
0b1cc     09 14 06 F6 | 	mov	arg02, #9
0b1d0     00 16 06 F6 | 	mov	arg03, #0
0b1d4     18 AD B0 FD | 	call	#__system___basic_print_char
0b1d8     34 4E 05 F1 | 	add	fp, #52
0b1dc     A7 14 02 FB | 	rdlong	arg02, fp
0b1e0     34 4E 85 F1 | 	sub	fp, #52
0b1e4     00 12 06 F6 | 	mov	arg01, #0
0b1e8     00 16 06 F6 | 	mov	arg03, #0
0b1ec     0A 18 06 F6 | 	mov	arg04, #10
0b1f0     D8 AD B0 FD | 	call	#__system___basic_print_unsigned
0b1f4     00 12 06 F6 | 	mov	arg01, #0
0b1f8     09 14 06 F6 | 	mov	arg02, #9
0b1fc     00 16 06 F6 | 	mov	arg03, #0
0b200     EC AC B0 FD | 	call	#__system___basic_print_char
0b204     24 01 00 FF 
0b208     82 15 06 F6 | 	mov	arg02, ##@LR__4303
0b20c     00 12 06 F6 | 	mov	arg01, #0
0b210     00 16 06 F6 | 	mov	arg03, #0
0b214     30 AD B0 FD | 	call	#__system___basic_print_string
0b218     00 12 06 F6 | 	mov	arg01, #0
0b21c     09 14 06 F6 | 	mov	arg02, #9
0b220     00 16 06 F6 | 	mov	arg03, #0
0b224     C8 AC B0 FD | 	call	#__system___basic_print_char
0b228     52 00 00 FF 
0b22c     3C E4 05 F1 | 	add	objptr, ##42044
0b230     F2 14 02 FB | 	rdlong	arg02, objptr
0b234     52 00 00 FF 
0b238     3C E4 85 F1 | 	sub	objptr, ##42044
0b23c     00 12 06 F6 | 	mov	arg01, #0
0b240     00 16 06 F6 | 	mov	arg03, #0
0b244     0A 18 06 F6 | 	mov	arg04, #10
0b248     80 AD B0 FD | 	call	#__system___basic_print_unsigned
0b24c     00 12 06 F6 | 	mov	arg01, #0
0b250     09 14 06 F6 | 	mov	arg02, #9
0b254     00 16 06 F6 | 	mov	arg03, #0
0b258     94 AC B0 FD | 	call	#__system___basic_print_char
0b25c     24 01 00 FF 
0b260     8A 15 06 F6 | 	mov	arg02, ##@LR__4304
0b264     00 12 06 F6 | 	mov	arg01, #0
0b268     00 16 06 F6 | 	mov	arg03, #0
0b26c     D8 AC B0 FD | 	call	#__system___basic_print_string
0b270     00 12 06 F6 | 	mov	arg01, #0
0b274     09 14 06 F6 | 	mov	arg02, #9
0b278     00 16 06 F6 | 	mov	arg03, #0
0b27c     70 AC B0 FD | 	call	#__system___basic_print_char
0b280     F2 14 02 FB | 	rdlong	arg02, objptr
0b284     00 12 06 F6 | 	mov	arg01, #0
0b288     00 16 06 F6 | 	mov	arg03, #0
0b28c     0A 18 06 F6 | 	mov	arg04, #10
0b290     F8 AC B0 FD | 	call	#__system___basic_print_integer
0b294     00 12 06 F6 | 	mov	arg01, #0
0b298     0A 14 06 F6 | 	mov	arg02, #10
0b29c     00 16 06 F6 | 	mov	arg03, #0
0b2a0     4C AC B0 FD | 	call	#__system___basic_print_char
0b2a4     00 12 06 F6 | 	mov	arg01, #0
0b2a8     5C F5 B0 FD | 	call	#__system___getiolock_0334
0b2ac     FD 00 68 FC | 	wrlong	#0, result1
0b2b0                 | ' 
0b2b0                 | ' select case vartype
0b2b0     10 4E 05 F1 | 	add	fp, #16
0b2b4     A7 22 02 FB | 	rdlong	local03, fp
0b2b8     10 4E 85 F1 | 	sub	fp, #16
0b2bc     00 23 86 F1 | 	sub	local03, #256
0b2c0     0C 22 26 F3 | 	fle	local03, #12
0b2c4     30 22 62 FD | 	jmprel	local03
0b2c8                 | LR__0868
0b2c8     30 00 90 FD | 	jmp	#LR__0869
0b2cc     58 00 90 FD | 	jmp	#LR__0870
0b2d0     8C 00 90 FD | 	jmp	#LR__0871
0b2d4     AC 00 90 FD | 	jmp	#LR__0872
0b2d8     E8 00 90 FD | 	jmp	#LR__0873
0b2dc     08 01 90 FD | 	jmp	#LR__0874
0b2e0     24 01 90 FD | 	jmp	#LR__0875
0b2e4     40 01 90 FD | 	jmp	#LR__0876
0b2e8     50 01 90 FD | 	jmp	#LR__0877
0b2ec     60 01 90 FD | 	jmp	#LR__0878
0b2f0     7C 01 90 FD | 	jmp	#LR__0879
0b2f4     8C 01 90 FD | 	jmp	#LR__0880
0b2f8     A4 01 90 FD | 	jmp	#LR__0881
0b2fc                 | LR__0869
0b2fc     A7 12 02 F6 | 	mov	arg01, fp
0b300     34 4E 05 F1 | 	add	fp, #52
0b304     A7 14 02 FB | 	rdlong	arg02, fp
0b308     34 4E 85 F1 | 	sub	fp, #52
0b30c     0C 16 06 F6 | 	mov	arg03, #12
0b310     0B 00 00 FF 
0b314     C0 E4 05 F1 | 	add	objptr, ##5824
0b318     4C 94 B0 FD | 	call	#_psram_spin2_read1
0b31c     0B 00 00 FF 
0b320     C0 E4 85 F1 | 	sub	objptr, ##5824
0b324     78 01 90 FD | 	jmp	#LR__0881
0b328                 | LR__0870
0b328     08 4E 05 F1 | 	add	fp, #8
0b32c     A7 38 68 FC | 	wrlong	#28, fp
0b330     2C 4E 05 F1 | 	add	fp, #44
0b334     A7 12 02 FB | 	rdlong	arg01, fp
0b338     34 4E 85 F1 | 	sub	fp, #52
0b33c     84 6B B0 FD | 	call	#_pspeek
0b340     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b344     A7 FA 61 FC | 	wrlong	result1, fp
0b348     80 FA 15 F2 | 	cmp	result1, #128 wc
0b34c     00 1F 66 36 |  if_ae	neg	local01, #256
0b350     A7 20 02 3B |  if_ae	rdlong	local02, fp
0b354     10 1F 42 35 |  if_ae	or	local01, local02
0b358     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b35c     40 01 90 FD | 	jmp	#LR__0881
0b360                 | LR__0871
0b360     08 4E 05 F1 | 	add	fp, #8
0b364     A7 3A 68 FC | 	wrlong	#29, fp
0b368     2C 4E 05 F1 | 	add	fp, #44
0b36c     A7 12 02 FB | 	rdlong	arg01, fp
0b370     34 4E 85 F1 | 	sub	fp, #52
0b374     4C 6B B0 FD | 	call	#_pspeek
0b378     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b37c     A7 FA 61 FC | 	wrlong	result1, fp
0b380     1C 01 90 FD | 	jmp	#LR__0881
0b384                 | LR__0872
0b384     08 4E 05 F1 | 	add	fp, #8
0b388     A7 38 68 FC | 	wrlong	#28, fp
0b38c     2C 4E 05 F1 | 	add	fp, #44
0b390     A7 12 02 FB | 	rdlong	arg01, fp
0b394     34 4E 85 F1 | 	sub	fp, #52
0b398     80 6B B0 FD | 	call	#_pslpeek
0b39c     FD FA 31 F9 | 	getword	result1, result1, #0
0b3a0     A7 FA 61 FC | 	wrlong	result1, fp
0b3a4     40 00 00 FF 
0b3a8     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0b3ac     FF 7F 00 3F 
0b3b0     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0b3b4     A7 20 02 3B |  if_ae	rdlong	local02, fp
0b3b8     10 1F 42 35 |  if_ae	or	local01, local02
0b3bc     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b3c0     DC 00 90 FD | 	jmp	#LR__0881
0b3c4                 | LR__0873
0b3c4     08 4E 05 F1 | 	add	fp, #8
0b3c8     A7 3A 68 FC | 	wrlong	#29, fp
0b3cc     2C 4E 05 F1 | 	add	fp, #44
0b3d0     A7 12 02 FB | 	rdlong	arg01, fp
0b3d4     34 4E 85 F1 | 	sub	fp, #52
0b3d8     40 6B B0 FD | 	call	#_pslpeek
0b3dc     FD FA 31 F9 | 	getword	result1, result1, #0
0b3e0     A7 FA 61 FC | 	wrlong	result1, fp
0b3e4     B8 00 90 FD | 	jmp	#LR__0881
0b3e8                 | LR__0874
0b3e8     08 4E 05 F1 | 	add	fp, #8
0b3ec     A7 38 68 FC | 	wrlong	#28, fp
0b3f0     2C 4E 05 F1 | 	add	fp, #44
0b3f4     A7 12 02 FB | 	rdlong	arg01, fp
0b3f8     34 4E 85 F1 | 	sub	fp, #52
0b3fc     1C 6B B0 FD | 	call	#_pslpeek
0b400     A7 FA 61 FC | 	wrlong	result1, fp
0b404     98 00 90 FD | 	jmp	#LR__0881
0b408                 | LR__0875
0b408     08 4E 05 F1 | 	add	fp, #8
0b40c     A7 3A 68 FC | 	wrlong	#29, fp
0b410     2C 4E 05 F1 | 	add	fp, #44
0b414     A7 12 02 FB | 	rdlong	arg01, fp
0b418     34 4E 85 F1 | 	sub	fp, #52
0b41c     FC 6A B0 FD | 	call	#_pslpeek
0b420     A7 FA 61 FC | 	wrlong	result1, fp
0b424     78 00 90 FD | 	jmp	#LR__0881
0b428                 | LR__0876
0b428     08 4E 05 F1 | 	add	fp, #8
0b42c     A7 FE 69 FC | 	wrlong	#255, fp
0b430     08 4E 85 F1 | 	sub	fp, #8
0b434     A7 60 68 FC | 	wrlong	#48, fp
0b438     64 00 90 FD | 	jmp	#LR__0881
0b43c                 | LR__0877
0b43c     08 4E 05 F1 | 	add	fp, #8
0b440     A7 FE 69 FC | 	wrlong	#255, fp
0b444     08 4E 85 F1 | 	sub	fp, #8
0b448     A7 60 68 FC | 	wrlong	#48, fp
0b44c     50 00 90 FD | 	jmp	#LR__0881
0b450                 | LR__0878
0b450     08 4E 05 F1 | 	add	fp, #8
0b454     A7 3C 68 FC | 	wrlong	#30, fp
0b458     2C 4E 05 F1 | 	add	fp, #44
0b45c     A7 12 02 FB | 	rdlong	arg01, fp
0b460     34 4E 85 F1 | 	sub	fp, #52
0b464     B4 6A B0 FD | 	call	#_pslpeek
0b468     A7 FA 61 FC | 	wrlong	result1, fp
0b46c     30 00 90 FD | 	jmp	#LR__0881
0b470                 | LR__0879
0b470     08 4E 05 F1 | 	add	fp, #8
0b474     A7 FE 69 FC | 	wrlong	#255, fp
0b478     08 4E 85 F1 | 	sub	fp, #8
0b47c     A7 60 68 FC | 	wrlong	#48, fp
0b480     1C 00 90 FD | 	jmp	#LR__0881
0b484                 | LR__0880
0b484     08 4E 05 F1 | 	add	fp, #8
0b488     A7 3E 68 FC | 	wrlong	#31, fp
0b48c     2C 4E 05 F1 | 	add	fp, #44
0b490     A7 12 02 FB | 	rdlong	arg01, fp
0b494     34 4E 85 F1 | 	sub	fp, #52
0b498     80 6A B0 FD | 	call	#_pslpeek
0b49c     A7 FA 61 FC | 	wrlong	result1, fp
0b4a0                 | LR__0881
0b4a0     A7 12 02 F6 | 	mov	arg01, fp
0b4a4     28 DA BF FD | 	call	#_push
0b4a8                 | LR__0882
0b4a8     A7 F0 03 F6 | 	mov	ptra, fp
0b4ac     B2 00 A0 FD | 	call	#popregs_
0b4b0                 | _do_getvar_ret
0b4b0     2D 00 64 FD | 	ret
0b4b4                 | 
0b4b4                 | ' 
0b4b4                 | ' '------------------------ Operators 
0b4b4                 | ' 
0b4b4                 | ' sub do_plus 
0b4b4                 | _do_plus
0b4b4     05 4A 05 F6 | 	mov	COUNT_, #5
0b4b8     A8 00 A0 FD | 	call	#pushregs_
0b4bc     18 F0 07 F1 | 	add	ptra, #24
0b4c0     74 D9 BF FD | 	call	#_pop
0b4c4     FD 1E 02 F6 | 	mov	local01, result1
0b4c8     FE 20 02 F6 | 	mov	local02, result2
0b4cc     FF 22 02 F6 | 	mov	local03, result3
0b4d0     0C 4E 05 F1 | 	add	fp, #12
0b4d4     A7 1E 62 FC | 	wrlong	local01, fp
0b4d8     04 4E 05 F1 | 	add	fp, #4
0b4dc     A7 20 62 FC | 	wrlong	local02, fp
0b4e0     04 4E 05 F1 | 	add	fp, #4
0b4e4     A7 22 62 FC | 	wrlong	local03, fp
0b4e8     14 4E 85 F1 | 	sub	fp, #20
0b4ec     48 D9 BF FD | 	call	#_pop
0b4f0     FF 22 02 F6 | 	mov	local03, result3
0b4f4     A7 FA 61 FC | 	wrlong	result1, fp
0b4f8     04 4E 05 F1 | 	add	fp, #4
0b4fc     A7 FC 61 FC | 	wrlong	result2, fp
0b500     04 4E 05 F1 | 	add	fp, #4
0b504     A7 22 62 FC | 	wrlong	local03, fp
0b508                 | ' 
0b508                 | ' t2=pop()
0b508                 | ' t1=pop()
0b508                 | ' 
0b508                 | ' 
0b508                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0b508     08 4E 85 F1 | 	sub	fp, #8
0b50c     1D 22 0E F2 | 	cmp	local03, #29 wz
0b510     14 4E 05 A1 |  if_e	add	fp, #20
0b514     A7 24 02 AB |  if_e	rdlong	local04, fp
0b518     14 4E 85 A1 |  if_e	sub	fp, #20
0b51c     12 23 02 A6 |  if_e	mov	local03, local04
0b520     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b524     1C 00 90 5D |  if_ne	jmp	#LR__0890
0b528     A7 1E 02 FB | 	rdlong	local01, fp
0b52c     0C 4E 05 F1 | 	add	fp, #12
0b530     A7 20 02 FB | 	rdlong	local02, fp
0b534     0C 4E 85 F1 | 	sub	fp, #12
0b538     10 1F 02 F1 | 	add	local01, local02
0b53c     A7 1E 62 FC | 	wrlong	local01, fp
0b540     3C 03 90 FD | 	jmp	#LR__0902
0b544                 | LR__0890
0b544                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0b544     08 4E 05 F1 | 	add	fp, #8
0b548     A7 1E 02 FB | 	rdlong	local01, fp
0b54c     08 4E 85 F1 | 	sub	fp, #8
0b550     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b554     14 4E 05 A1 |  if_e	add	fp, #20
0b558     A7 24 02 AB |  if_e	rdlong	local04, fp
0b55c     14 4E 85 A1 |  if_e	sub	fp, #20
0b560     12 23 02 A6 |  if_e	mov	local03, local04
0b564     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b568     28 00 90 5D |  if_ne	jmp	#LR__0891
0b56c     A7 1E 02 FB | 	rdlong	local01, fp
0b570     0C 4E 05 F1 | 	add	fp, #12
0b574     A7 20 02 FB | 	rdlong	local02, fp
0b578     0C 4E 85 F1 | 	sub	fp, #12
0b57c     10 1F 02 F1 | 	add	local01, local02
0b580     A7 1E 62 FC | 	wrlong	local01, fp
0b584     08 4E 05 F1 | 	add	fp, #8
0b588     A7 38 68 FC | 	wrlong	#28, fp
0b58c     08 4E 85 F1 | 	sub	fp, #8
0b590     EC 02 90 FD | 	jmp	#LR__0902
0b594                 | LR__0891
0b594                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b594     08 4E 05 F1 | 	add	fp, #8
0b598     A7 1E 02 FB | 	rdlong	local01, fp
0b59c     08 4E 85 F1 | 	sub	fp, #8
0b5a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b5a4     14 4E 05 A1 |  if_e	add	fp, #20
0b5a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0b5ac     14 4E 85 A1 |  if_e	sub	fp, #20
0b5b0     12 23 02 A6 |  if_e	mov	local03, local04
0b5b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b5b8     30 00 90 5D |  if_ne	jmp	#LR__0892
0b5bc     A7 12 02 FB | 	rdlong	arg01, fp
0b5c0     78 C3 B0 FD | 	call	#__system___float_fromuns
0b5c4     FD 12 02 F6 | 	mov	arg01, result1
0b5c8     0C 4E 05 F1 | 	add	fp, #12
0b5cc     A7 14 02 FB | 	rdlong	arg02, fp
0b5d0     0C 4E 85 F1 | 	sub	fp, #12
0b5d4     98 C3 B0 FD | 	call	#__system___float_add
0b5d8     A7 FA 61 FC | 	wrlong	result1, fp
0b5dc     08 4E 05 F1 | 	add	fp, #8
0b5e0     A7 3C 68 FC | 	wrlong	#30, fp
0b5e4     08 4E 85 F1 | 	sub	fp, #8
0b5e8     94 02 90 FD | 	jmp	#LR__0902
0b5ec                 | LR__0892
0b5ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0b5ec     08 4E 05 F1 | 	add	fp, #8
0b5f0     A7 1E 02 FB | 	rdlong	local01, fp
0b5f4     08 4E 85 F1 | 	sub	fp, #8
0b5f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b5fc     14 4E 05 A1 |  if_e	add	fp, #20
0b600     A7 24 02 AB |  if_e	rdlong	local04, fp
0b604     14 4E 85 A1 |  if_e	sub	fp, #20
0b608     12 23 02 A6 |  if_e	mov	local03, local04
0b60c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b610     1C 00 90 5D |  if_ne	jmp	#LR__0893
0b614     A7 1E 02 FB | 	rdlong	local01, fp
0b618     0C 4E 05 F1 | 	add	fp, #12
0b61c     A7 20 02 FB | 	rdlong	local02, fp
0b620     0C 4E 85 F1 | 	sub	fp, #12
0b624     10 1F 02 F1 | 	add	local01, local02
0b628     A7 1E 62 FC | 	wrlong	local01, fp
0b62c     50 02 90 FD | 	jmp	#LR__0902
0b630                 | LR__0893
0b630                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b630     08 4E 05 F1 | 	add	fp, #8
0b634     A7 1E 02 FB | 	rdlong	local01, fp
0b638     08 4E 85 F1 | 	sub	fp, #8
0b63c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b640     14 4E 05 A1 |  if_e	add	fp, #20
0b644     A7 24 02 AB |  if_e	rdlong	local04, fp
0b648     14 4E 85 A1 |  if_e	sub	fp, #20
0b64c     12 23 02 A6 |  if_e	mov	local03, local04
0b650     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b654     1C 00 90 5D |  if_ne	jmp	#LR__0894
0b658     A7 1E 02 FB | 	rdlong	local01, fp
0b65c     0C 4E 05 F1 | 	add	fp, #12
0b660     A7 20 02 FB | 	rdlong	local02, fp
0b664     0C 4E 85 F1 | 	sub	fp, #12
0b668     10 1F 02 F1 | 	add	local01, local02
0b66c     A7 1E 62 FC | 	wrlong	local01, fp
0b670     0C 02 90 FD | 	jmp	#LR__0902
0b674                 | LR__0894
0b674                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b674     08 4E 05 F1 | 	add	fp, #8
0b678     A7 1E 02 FB | 	rdlong	local01, fp
0b67c     08 4E 85 F1 | 	sub	fp, #8
0b680     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b684     14 4E 05 A1 |  if_e	add	fp, #20
0b688     A7 24 02 AB |  if_e	rdlong	local04, fp
0b68c     14 4E 85 A1 |  if_e	sub	fp, #20
0b690     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b694     40 00 90 5D |  if_ne	jmp	#LR__0895
0b698     A7 12 02 FB | 	rdlong	arg01, fp
0b69c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b6a0     1F 26 C6 C9 |  if_b	decod	local05, #31
0b6a4     00 26 06 36 |  if_ae	mov	local05, #0
0b6a8     90 C2 B0 FD | 	call	#__system___float_fromuns
0b6ac     13 FB 61 F5 | 	xor	result1, local05
0b6b0     FD 12 02 F6 | 	mov	arg01, result1
0b6b4     0C 4E 05 F1 | 	add	fp, #12
0b6b8     A7 14 02 FB | 	rdlong	arg02, fp
0b6bc     0C 4E 85 F1 | 	sub	fp, #12
0b6c0     AC C2 B0 FD | 	call	#__system___float_add
0b6c4     A7 FA 61 FC | 	wrlong	result1, fp
0b6c8     08 4E 05 F1 | 	add	fp, #8
0b6cc     A7 3C 68 FC | 	wrlong	#30, fp
0b6d0     08 4E 85 F1 | 	sub	fp, #8
0b6d4     A8 01 90 FD | 	jmp	#LR__0902
0b6d8                 | LR__0895
0b6d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b6d8     08 4E 05 F1 | 	add	fp, #8
0b6dc     A7 1E 02 FB | 	rdlong	local01, fp
0b6e0     08 4E 85 F1 | 	sub	fp, #8
0b6e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b6e8     14 4E 05 A1 |  if_e	add	fp, #20
0b6ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6f0     14 4E 85 A1 |  if_e	sub	fp, #20
0b6f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b6f8     28 00 90 5D |  if_ne	jmp	#LR__0896
0b6fc     A7 1E 02 FB | 	rdlong	local01, fp
0b700     0C 4E 05 F1 | 	add	fp, #12
0b704     A7 12 02 FB | 	rdlong	arg01, fp
0b708     0C 4E 85 F1 | 	sub	fp, #12
0b70c     2C C2 B0 FD | 	call	#__system___float_fromuns
0b710     FD 14 02 F6 | 	mov	arg02, result1
0b714     0F 13 02 F6 | 	mov	arg01, local01
0b718     54 C2 B0 FD | 	call	#__system___float_add
0b71c     A7 FA 61 FC | 	wrlong	result1, fp
0b720     5C 01 90 FD | 	jmp	#LR__0902
0b724                 | LR__0896
0b724                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b724     08 4E 05 F1 | 	add	fp, #8
0b728     A7 1E 02 FB | 	rdlong	local01, fp
0b72c     08 4E 85 F1 | 	sub	fp, #8
0b730     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b734     14 4E 05 A1 |  if_e	add	fp, #20
0b738     A7 22 02 AB |  if_e	rdlong	local03, fp
0b73c     14 4E 85 A1 |  if_e	sub	fp, #20
0b740     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b744     38 00 90 5D |  if_ne	jmp	#LR__0897
0b748     A7 1E 02 FB | 	rdlong	local01, fp
0b74c     0C 4E 05 F1 | 	add	fp, #12
0b750     A7 12 02 FB | 	rdlong	arg01, fp
0b754     0C 4E 85 F1 | 	sub	fp, #12
0b758     09 13 52 F6 | 	abs	arg01, arg01 wc
0b75c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b760     00 26 06 36 |  if_ae	mov	local05, #0
0b764     D4 C1 B0 FD | 	call	#__system___float_fromuns
0b768     13 FB 61 F5 | 	xor	result1, local05
0b76c     FD 14 02 F6 | 	mov	arg02, result1
0b770     0F 13 02 F6 | 	mov	arg01, local01
0b774     F8 C1 B0 FD | 	call	#__system___float_add
0b778     A7 FA 61 FC | 	wrlong	result1, fp
0b77c     00 01 90 FD | 	jmp	#LR__0902
0b780                 | LR__0897
0b780                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b780     08 4E 05 F1 | 	add	fp, #8
0b784     A7 1E 02 FB | 	rdlong	local01, fp
0b788     08 4E 85 F1 | 	sub	fp, #8
0b78c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b790     14 4E 05 A1 |  if_e	add	fp, #20
0b794     A7 22 02 AB |  if_e	rdlong	local03, fp
0b798     14 4E 85 A1 |  if_e	sub	fp, #20
0b79c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b7a0     1C 00 90 5D |  if_ne	jmp	#LR__0898
0b7a4     A7 12 02 FB | 	rdlong	arg01, fp
0b7a8     0C 4E 05 F1 | 	add	fp, #12
0b7ac     A7 14 02 FB | 	rdlong	arg02, fp
0b7b0     0C 4E 85 F1 | 	sub	fp, #12
0b7b4     B8 C1 B0 FD | 	call	#__system___float_add
0b7b8     A7 FA 61 FC | 	wrlong	result1, fp
0b7bc     C0 00 90 FD | 	jmp	#LR__0902
0b7c0                 | LR__0898
0b7c0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b7c0     08 4E 05 F1 | 	add	fp, #8
0b7c4     A7 1E 02 FB | 	rdlong	local01, fp
0b7c8     08 4E 85 F1 | 	sub	fp, #8
0b7cc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b7d0     24 00 90 5D |  if_ne	jmp	#LR__0899
0b7d4     14 4E 05 F1 | 	add	fp, #20
0b7d8     A7 22 02 FB | 	rdlong	local03, fp
0b7dc     14 4E 85 F1 | 	sub	fp, #20
0b7e0     1F 22 0E F2 | 	cmp	local03, #31 wz
0b7e4     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b7e8     08 4E 05 51 |  if_ne	add	fp, #8
0b7ec     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b7f0     08 4E 85 51 |  if_ne	sub	fp, #8
0b7f4     88 00 90 5D |  if_ne	jmp	#LR__0902
0b7f8                 | LR__0899
0b7f8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b7f8     14 4E 05 F1 | 	add	fp, #20
0b7fc     A7 1E 02 FB | 	rdlong	local01, fp
0b800     14 4E 85 F1 | 	sub	fp, #20
0b804     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b808     24 00 90 5D |  if_ne	jmp	#LR__0900
0b80c     08 4E 05 F1 | 	add	fp, #8
0b810     A7 22 02 FB | 	rdlong	local03, fp
0b814     08 4E 85 F1 | 	sub	fp, #8
0b818     1F 22 0E F2 | 	cmp	local03, #31 wz
0b81c     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b820     08 4E 05 51 |  if_ne	add	fp, #8
0b824     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b828     08 4E 85 51 |  if_ne	sub	fp, #8
0b82c     50 00 90 5D |  if_ne	jmp	#LR__0902
0b830                 | LR__0900
0b830                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0b830     08 4E 05 F1 | 	add	fp, #8
0b834     A7 1E 02 FB | 	rdlong	local01, fp
0b838     08 4E 85 F1 | 	sub	fp, #8
0b83c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b840     14 4E 05 A1 |  if_e	add	fp, #20
0b844     A7 22 02 AB |  if_e	rdlong	local03, fp
0b848     14 4E 85 A1 |  if_e	sub	fp, #20
0b84c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b850     1C 00 90 5D |  if_ne	jmp	#LR__0901
0b854     A7 12 02 FB | 	rdlong	arg01, fp
0b858     0C 4E 05 F1 | 	add	fp, #12
0b85c     A7 14 02 FB | 	rdlong	arg02, fp
0b860     0C 4E 85 F1 | 	sub	fp, #12
0b864     48 9A B0 FD | 	call	#__system___string_concat
0b868     A7 FA 61 FC | 	wrlong	result1, fp
0b86c     10 00 90 FD | 	jmp	#LR__0902
0b870                 | LR__0901
0b870     A7 08 68 FC | 	wrlong	#4, fp
0b874     08 4E 05 F1 | 	add	fp, #8
0b878     A7 FE 69 FC | 	wrlong	#255, fp
0b87c     08 4E 85 F1 | 	sub	fp, #8
0b880                 | LR__0902
0b880     A7 12 02 F6 | 	mov	arg01, fp
0b884     48 D6 BF FD | 	call	#_push
0b888     A7 F0 03 F6 | 	mov	ptra, fp
0b88c     B2 00 A0 FD | 	call	#popregs_
0b890                 | _do_plus_ret
0b890     2D 00 64 FD | 	ret
0b894                 | 
0b894                 | ' 
0b894                 | ' sub do_minus
0b894                 | _do_minus
0b894     05 4A 05 F6 | 	mov	COUNT_, #5
0b898     A8 00 A0 FD | 	call	#pushregs_
0b89c     18 F0 07 F1 | 	add	ptra, #24
0b8a0     94 D5 BF FD | 	call	#_pop
0b8a4     FD 1E 02 F6 | 	mov	local01, result1
0b8a8     FE 20 02 F6 | 	mov	local02, result2
0b8ac     FF 22 02 F6 | 	mov	local03, result3
0b8b0     0C 4E 05 F1 | 	add	fp, #12
0b8b4     A7 1E 62 FC | 	wrlong	local01, fp
0b8b8     04 4E 05 F1 | 	add	fp, #4
0b8bc     A7 20 62 FC | 	wrlong	local02, fp
0b8c0     04 4E 05 F1 | 	add	fp, #4
0b8c4     A7 22 62 FC | 	wrlong	local03, fp
0b8c8     14 4E 85 F1 | 	sub	fp, #20
0b8cc     68 D5 BF FD | 	call	#_pop
0b8d0     FF 22 02 F6 | 	mov	local03, result3
0b8d4     A7 FA 61 FC | 	wrlong	result1, fp
0b8d8     04 4E 05 F1 | 	add	fp, #4
0b8dc     A7 FC 61 FC | 	wrlong	result2, fp
0b8e0     04 4E 05 F1 | 	add	fp, #4
0b8e4     A7 22 62 FC | 	wrlong	local03, fp
0b8e8                 | ' 
0b8e8                 | ' t2=pop()
0b8e8                 | ' t1=pop()
0b8e8                 | ' 
0b8e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0b8e8     08 4E 85 F1 | 	sub	fp, #8
0b8ec     1D 22 0E F2 | 	cmp	local03, #29 wz
0b8f0     14 4E 05 A1 |  if_e	add	fp, #20
0b8f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8f8     14 4E 85 A1 |  if_e	sub	fp, #20
0b8fc     12 23 02 A6 |  if_e	mov	local03, local04
0b900     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b904     5C 00 90 5D |  if_ne	jmp	#LR__0911
0b908                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0b908     0C 4E 05 F1 | 	add	fp, #12
0b90c     A7 1E 02 FB | 	rdlong	local01, fp
0b910     0C 4E 85 F1 | 	sub	fp, #12
0b914     A7 22 02 FB | 	rdlong	local03, fp
0b918     11 1F 12 F2 | 	cmp	local01, local03 wc
0b91c     1C 00 90 3D |  if_ae	jmp	#LR__0910
0b920     A7 1E 02 FB | 	rdlong	local01, fp
0b924     0C 4E 05 F1 | 	add	fp, #12
0b928     A7 20 02 FB | 	rdlong	local02, fp
0b92c     0C 4E 85 F1 | 	sub	fp, #12
0b930     10 1F 82 F1 | 	sub	local01, local02
0b934     A7 1E 62 FC | 	wrlong	local01, fp
0b938     F4 02 90 FD | 	jmp	#LR__0920
0b93c                 | LR__0910
0b93c     A7 1E 02 FB | 	rdlong	local01, fp
0b940     0C 4E 05 F1 | 	add	fp, #12
0b944     A7 20 02 FB | 	rdlong	local02, fp
0b948     0C 4E 85 F1 | 	sub	fp, #12
0b94c     10 1F 82 F1 | 	sub	local01, local02
0b950     A7 1E 62 FC | 	wrlong	local01, fp
0b954     08 4E 05 F1 | 	add	fp, #8
0b958     A7 38 68 FC | 	wrlong	#28, fp
0b95c     08 4E 85 F1 | 	sub	fp, #8
0b960     CC 02 90 FD | 	jmp	#LR__0920
0b964                 | LR__0911
0b964                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0b964     08 4E 05 F1 | 	add	fp, #8
0b968     A7 1E 02 FB | 	rdlong	local01, fp
0b96c     08 4E 85 F1 | 	sub	fp, #8
0b970     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b974     14 4E 05 A1 |  if_e	add	fp, #20
0b978     A7 24 02 AB |  if_e	rdlong	local04, fp
0b97c     14 4E 85 A1 |  if_e	sub	fp, #20
0b980     12 23 02 A6 |  if_e	mov	local03, local04
0b984     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b988     28 00 90 5D |  if_ne	jmp	#LR__0912
0b98c     A7 1E 02 FB | 	rdlong	local01, fp
0b990     0C 4E 05 F1 | 	add	fp, #12
0b994     A7 20 02 FB | 	rdlong	local02, fp
0b998     0C 4E 85 F1 | 	sub	fp, #12
0b99c     10 1F 82 F1 | 	sub	local01, local02
0b9a0     A7 1E 62 FC | 	wrlong	local01, fp
0b9a4     08 4E 05 F1 | 	add	fp, #8
0b9a8     A7 38 68 FC | 	wrlong	#28, fp
0b9ac     08 4E 85 F1 | 	sub	fp, #8
0b9b0     7C 02 90 FD | 	jmp	#LR__0920
0b9b4                 | LR__0912
0b9b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b9b4     08 4E 05 F1 | 	add	fp, #8
0b9b8     A7 1E 02 FB | 	rdlong	local01, fp
0b9bc     08 4E 85 F1 | 	sub	fp, #8
0b9c0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b9c4     14 4E 05 A1 |  if_e	add	fp, #20
0b9c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0b9cc     14 4E 85 A1 |  if_e	sub	fp, #20
0b9d0     12 23 02 A6 |  if_e	mov	local03, local04
0b9d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b9d8     34 00 90 5D |  if_ne	jmp	#LR__0913
0b9dc     A7 12 02 FB | 	rdlong	arg01, fp
0b9e0     58 BF B0 FD | 	call	#__system___float_fromuns
0b9e4     FD 12 02 F6 | 	mov	arg01, result1
0b9e8     0C 4E 05 F1 | 	add	fp, #12
0b9ec     A7 14 02 FB | 	rdlong	arg02, fp
0b9f0     0C 4E 85 F1 | 	sub	fp, #12
0b9f4     1F 14 E6 F4 | 	bitnot	arg02, #31
0b9f8     74 BF B0 FD | 	call	#__system___float_add
0b9fc     A7 FA 61 FC | 	wrlong	result1, fp
0ba00     08 4E 05 F1 | 	add	fp, #8
0ba04     A7 3C 68 FC | 	wrlong	#30, fp
0ba08     08 4E 85 F1 | 	sub	fp, #8
0ba0c     20 02 90 FD | 	jmp	#LR__0920
0ba10                 | LR__0913
0ba10                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0ba10     08 4E 05 F1 | 	add	fp, #8
0ba14     A7 1E 02 FB | 	rdlong	local01, fp
0ba18     08 4E 85 F1 | 	sub	fp, #8
0ba1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba20     14 4E 05 A1 |  if_e	add	fp, #20
0ba24     A7 24 02 AB |  if_e	rdlong	local04, fp
0ba28     14 4E 85 A1 |  if_e	sub	fp, #20
0ba2c     12 23 02 A6 |  if_e	mov	local03, local04
0ba30     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ba34     1C 00 90 5D |  if_ne	jmp	#LR__0914
0ba38     A7 1E 02 FB | 	rdlong	local01, fp
0ba3c     0C 4E 05 F1 | 	add	fp, #12
0ba40     A7 20 02 FB | 	rdlong	local02, fp
0ba44     0C 4E 85 F1 | 	sub	fp, #12
0ba48     10 1F 82 F1 | 	sub	local01, local02
0ba4c     A7 1E 62 FC | 	wrlong	local01, fp
0ba50     DC 01 90 FD | 	jmp	#LR__0920
0ba54                 | LR__0914
0ba54                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0ba54     08 4E 05 F1 | 	add	fp, #8
0ba58     A7 1E 02 FB | 	rdlong	local01, fp
0ba5c     08 4E 85 F1 | 	sub	fp, #8
0ba60     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba64     14 4E 05 A1 |  if_e	add	fp, #20
0ba68     A7 24 02 AB |  if_e	rdlong	local04, fp
0ba6c     14 4E 85 A1 |  if_e	sub	fp, #20
0ba70     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0ba74     1C 00 90 5D |  if_ne	jmp	#LR__0915
0ba78     A7 1E 02 FB | 	rdlong	local01, fp
0ba7c     0C 4E 05 F1 | 	add	fp, #12
0ba80     A7 20 02 FB | 	rdlong	local02, fp
0ba84     0C 4E 85 F1 | 	sub	fp, #12
0ba88     10 1F 82 F1 | 	sub	local01, local02
0ba8c     A7 1E 62 FC | 	wrlong	local01, fp
0ba90     9C 01 90 FD | 	jmp	#LR__0920
0ba94                 | LR__0915
0ba94                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0ba94     08 4E 05 F1 | 	add	fp, #8
0ba98     A7 1E 02 FB | 	rdlong	local01, fp
0ba9c     08 4E 85 F1 | 	sub	fp, #8
0baa0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0baa4     14 4E 05 A1 |  if_e	add	fp, #20
0baa8     A7 22 02 AB |  if_e	rdlong	local03, fp
0baac     14 4E 85 A1 |  if_e	sub	fp, #20
0bab0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bab4     44 00 90 5D |  if_ne	jmp	#LR__0916
0bab8     A7 12 02 FB | 	rdlong	arg01, fp
0babc     09 13 52 F6 | 	abs	arg01, arg01 wc
0bac0     1F 26 C6 C9 |  if_b	decod	local05, #31
0bac4     00 26 06 36 |  if_ae	mov	local05, #0
0bac8     70 BE B0 FD | 	call	#__system___float_fromuns
0bacc     13 FB 61 F5 | 	xor	result1, local05
0bad0     FD 12 02 F6 | 	mov	arg01, result1
0bad4     0C 4E 05 F1 | 	add	fp, #12
0bad8     A7 14 02 FB | 	rdlong	arg02, fp
0badc     0C 4E 85 F1 | 	sub	fp, #12
0bae0     1F 14 E6 F4 | 	bitnot	arg02, #31
0bae4     88 BE B0 FD | 	call	#__system___float_add
0bae8     A7 FA 61 FC | 	wrlong	result1, fp
0baec     08 4E 05 F1 | 	add	fp, #8
0baf0     A7 3C 68 FC | 	wrlong	#30, fp
0baf4     08 4E 85 F1 | 	sub	fp, #8
0baf8     34 01 90 FD | 	jmp	#LR__0920
0bafc                 | LR__0916
0bafc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0bafc     08 4E 05 F1 | 	add	fp, #8
0bb00     A7 1E 02 FB | 	rdlong	local01, fp
0bb04     08 4E 85 F1 | 	sub	fp, #8
0bb08     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bb0c     14 4E 05 A1 |  if_e	add	fp, #20
0bb10     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb14     14 4E 85 A1 |  if_e	sub	fp, #20
0bb18     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bb1c     2C 00 90 5D |  if_ne	jmp	#LR__0917
0bb20     A7 1E 02 FB | 	rdlong	local01, fp
0bb24     0C 4E 05 F1 | 	add	fp, #12
0bb28     A7 12 02 FB | 	rdlong	arg01, fp
0bb2c     0C 4E 85 F1 | 	sub	fp, #12
0bb30     08 BE B0 FD | 	call	#__system___float_fromuns
0bb34     FD 14 02 F6 | 	mov	arg02, result1
0bb38     0F 13 02 F6 | 	mov	arg01, local01
0bb3c     1F 14 E6 F4 | 	bitnot	arg02, #31
0bb40     2C BE B0 FD | 	call	#__system___float_add
0bb44     A7 FA 61 FC | 	wrlong	result1, fp
0bb48     E4 00 90 FD | 	jmp	#LR__0920
0bb4c                 | LR__0917
0bb4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0bb4c     08 4E 05 F1 | 	add	fp, #8
0bb50     A7 1E 02 FB | 	rdlong	local01, fp
0bb54     08 4E 85 F1 | 	sub	fp, #8
0bb58     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bb5c     14 4E 05 A1 |  if_e	add	fp, #20
0bb60     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb64     14 4E 85 A1 |  if_e	sub	fp, #20
0bb68     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bb6c     3C 00 90 5D |  if_ne	jmp	#LR__0918
0bb70     A7 1E 02 FB | 	rdlong	local01, fp
0bb74     0C 4E 05 F1 | 	add	fp, #12
0bb78     A7 12 02 FB | 	rdlong	arg01, fp
0bb7c     0C 4E 85 F1 | 	sub	fp, #12
0bb80     09 13 52 F6 | 	abs	arg01, arg01 wc
0bb84     1F 26 C6 C9 |  if_b	decod	local05, #31
0bb88     00 26 06 36 |  if_ae	mov	local05, #0
0bb8c     AC BD B0 FD | 	call	#__system___float_fromuns
0bb90     13 FB 61 F5 | 	xor	result1, local05
0bb94     FD 14 02 F6 | 	mov	arg02, result1
0bb98     0F 13 02 F6 | 	mov	arg01, local01
0bb9c     1F 14 E6 F4 | 	bitnot	arg02, #31
0bba0     CC BD B0 FD | 	call	#__system___float_add
0bba4     A7 FA 61 FC | 	wrlong	result1, fp
0bba8     84 00 90 FD | 	jmp	#LR__0920
0bbac                 | LR__0918
0bbac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0bbac     08 4E 05 F1 | 	add	fp, #8
0bbb0     A7 1E 02 FB | 	rdlong	local01, fp
0bbb4     08 4E 85 F1 | 	sub	fp, #8
0bbb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bbbc     14 4E 05 A1 |  if_e	add	fp, #20
0bbc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0bbc4     14 4E 85 A1 |  if_e	sub	fp, #20
0bbc8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bbcc     20 00 90 5D |  if_ne	jmp	#LR__0919
0bbd0     A7 12 02 FB | 	rdlong	arg01, fp
0bbd4     0C 4E 05 F1 | 	add	fp, #12
0bbd8     A7 14 02 FB | 	rdlong	arg02, fp
0bbdc     0C 4E 85 F1 | 	sub	fp, #12
0bbe0     1F 14 E6 F4 | 	bitnot	arg02, #31
0bbe4     88 BD B0 FD | 	call	#__system___float_add
0bbe8     A7 FA 61 FC | 	wrlong	result1, fp
0bbec     40 00 90 FD | 	jmp	#LR__0920
0bbf0                 | LR__0919
0bbf0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0bbf0     08 4E 05 F1 | 	add	fp, #8
0bbf4     A7 1E 02 FB | 	rdlong	local01, fp
0bbf8     08 4E 85 F1 | 	sub	fp, #8
0bbfc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0bc00     14 4E 05 51 |  if_ne	add	fp, #20
0bc04     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bc08     14 4E 85 51 |  if_ne	sub	fp, #20
0bc0c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0bc10     A7 06 68 AC |  if_e	wrlong	#3, fp
0bc14     08 4E 05 A1 |  if_e	add	fp, #8
0bc18     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bc1c     08 4E 85 A1 |  if_e	sub	fp, #8
0bc20     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0bc24     08 4E 05 51 |  if_ne	add	fp, #8
0bc28     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bc2c     08 4E 85 51 |  if_ne	sub	fp, #8
0bc30                 | LR__0920
0bc30     A7 12 02 F6 | 	mov	arg01, fp
0bc34     98 D2 BF FD | 	call	#_push
0bc38     A7 F0 03 F6 | 	mov	ptra, fp
0bc3c     B2 00 A0 FD | 	call	#popregs_
0bc40                 | _do_minus_ret
0bc40     2D 00 64 FD | 	ret
0bc44                 | 
0bc44                 | ' 
0bc44                 | ' sub do_and 
0bc44                 | _do_and
0bc44     03 4A 05 F6 | 	mov	COUNT_, #3
0bc48     A8 00 A0 FD | 	call	#pushregs_
0bc4c     18 F0 07 F1 | 	add	ptra, #24
0bc50     E4 D1 BF FD | 	call	#_pop
0bc54     FD 12 02 F6 | 	mov	arg01, result1
0bc58     FE 1E 02 F6 | 	mov	local01, result2
0bc5c     FF 20 02 F6 | 	mov	local02, result3
0bc60     0C 4E 05 F1 | 	add	fp, #12
0bc64     A7 12 62 FC | 	wrlong	arg01, fp
0bc68     04 4E 05 F1 | 	add	fp, #4
0bc6c     A7 1E 62 FC | 	wrlong	local01, fp
0bc70     04 4E 05 F1 | 	add	fp, #4
0bc74     A7 20 62 FC | 	wrlong	local02, fp
0bc78     14 4E 85 F1 | 	sub	fp, #20
0bc7c     B8 D1 BF FD | 	call	#_pop
0bc80     FF 22 02 F6 | 	mov	local03, result3
0bc84     A7 FA 61 FC | 	wrlong	result1, fp
0bc88     04 4E 05 F1 | 	add	fp, #4
0bc8c     A7 FC 61 FC | 	wrlong	result2, fp
0bc90     04 4E 05 F1 | 	add	fp, #4
0bc94     A7 22 62 FC | 	wrlong	local03, fp
0bc98                 | ' 
0bc98                 | ' t2=pop()
0bc98                 | ' t1=pop()
0bc98                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bc98     08 4E 85 F1 | 	sub	fp, #8
0bc9c     1C 22 0E F2 | 	cmp	local03, #28 wz
0bca0     A7 22 02 AB |  if_e	rdlong	local03, fp
0bca4     A7 22 62 AC |  if_e	wrlong	local03, fp
0bca8     08 4E 05 A1 |  if_e	add	fp, #8
0bcac     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bcb0     08 4E 85 A1 |  if_e	sub	fp, #8
0bcb4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bcb4     14 4E 05 F1 | 	add	fp, #20
0bcb8     A7 22 02 FB | 	rdlong	local03, fp
0bcbc     14 4E 85 F1 | 	sub	fp, #20
0bcc0     1C 22 0E F2 | 	cmp	local03, #28 wz
0bcc4     18 00 90 5D |  if_ne	jmp	#LR__0930
0bcc8     0C 4E 05 F1 | 	add	fp, #12
0bccc     A7 22 02 FB | 	rdlong	local03, fp
0bcd0     A7 22 62 FC | 	wrlong	local03, fp
0bcd4     08 4E 05 F1 | 	add	fp, #8
0bcd8     A7 3A 68 FC | 	wrlong	#29, fp
0bcdc     14 4E 85 F1 | 	sub	fp, #20
0bce0                 | LR__0930
0bce0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0bce0     08 4E 05 F1 | 	add	fp, #8
0bce4     A7 22 02 FB | 	rdlong	local03, fp
0bce8     08 4E 85 F1 | 	sub	fp, #8
0bcec     1F 22 0E F2 | 	cmp	local03, #31 wz
0bcf0     14 4E 05 51 |  if_ne	add	fp, #20
0bcf4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bcf8     14 4E 85 51 |  if_ne	sub	fp, #20
0bcfc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bd00     08 4E 05 51 |  if_ne	add	fp, #8
0bd04     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bd08     08 4E 85 51 |  if_ne	sub	fp, #8
0bd0c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bd10     14 4E 05 51 |  if_ne	add	fp, #20
0bd14     14 4E 85 51 |  if_ne	sub	fp, #20
0bd18     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bd1c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bd20     08 4E 05 A1 |  if_e	add	fp, #8
0bd24     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bd28     08 4E 85 A1 |  if_e	sub	fp, #8
0bd2c     18 00 90 AD |  if_e	jmp	#LR__0931
0bd30     A7 22 02 FB | 	rdlong	local03, fp
0bd34     0C 4E 05 F1 | 	add	fp, #12
0bd38     A7 1E 02 FB | 	rdlong	local01, fp
0bd3c     0C 4E 85 F1 | 	sub	fp, #12
0bd40     0F 23 02 F5 | 	and	local03, local01
0bd44     A7 22 62 FC | 	wrlong	local03, fp
0bd48                 | LR__0931
0bd48     A7 12 02 F6 | 	mov	arg01, fp
0bd4c     80 D1 BF FD | 	call	#_push
0bd50     A7 F0 03 F6 | 	mov	ptra, fp
0bd54     B2 00 A0 FD | 	call	#popregs_
0bd58                 | _do_and_ret
0bd58     2D 00 64 FD | 	ret
0bd5c                 | 
0bd5c                 | ' 
0bd5c                 | ' sub do_or 
0bd5c                 | _do_or
0bd5c     03 4A 05 F6 | 	mov	COUNT_, #3
0bd60     A8 00 A0 FD | 	call	#pushregs_
0bd64     18 F0 07 F1 | 	add	ptra, #24
0bd68     CC D0 BF FD | 	call	#_pop
0bd6c     FD 12 02 F6 | 	mov	arg01, result1
0bd70     FE 1E 02 F6 | 	mov	local01, result2
0bd74     FF 20 02 F6 | 	mov	local02, result3
0bd78     0C 4E 05 F1 | 	add	fp, #12
0bd7c     A7 12 62 FC | 	wrlong	arg01, fp
0bd80     04 4E 05 F1 | 	add	fp, #4
0bd84     A7 1E 62 FC | 	wrlong	local01, fp
0bd88     04 4E 05 F1 | 	add	fp, #4
0bd8c     A7 20 62 FC | 	wrlong	local02, fp
0bd90     14 4E 85 F1 | 	sub	fp, #20
0bd94     A0 D0 BF FD | 	call	#_pop
0bd98     FF 22 02 F6 | 	mov	local03, result3
0bd9c     A7 FA 61 FC | 	wrlong	result1, fp
0bda0     04 4E 05 F1 | 	add	fp, #4
0bda4     A7 FC 61 FC | 	wrlong	result2, fp
0bda8     04 4E 05 F1 | 	add	fp, #4
0bdac     A7 22 62 FC | 	wrlong	local03, fp
0bdb0                 | ' 
0bdb0                 | ' t2=pop()
0bdb0                 | ' t1=pop()
0bdb0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bdb0     08 4E 85 F1 | 	sub	fp, #8
0bdb4     1C 22 0E F2 | 	cmp	local03, #28 wz
0bdb8     A7 22 02 AB |  if_e	rdlong	local03, fp
0bdbc     A7 22 62 AC |  if_e	wrlong	local03, fp
0bdc0     08 4E 05 A1 |  if_e	add	fp, #8
0bdc4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bdc8     08 4E 85 A1 |  if_e	sub	fp, #8
0bdcc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bdcc     14 4E 05 F1 | 	add	fp, #20
0bdd0     A7 22 02 FB | 	rdlong	local03, fp
0bdd4     14 4E 85 F1 | 	sub	fp, #20
0bdd8     1C 22 0E F2 | 	cmp	local03, #28 wz
0bddc     18 00 90 5D |  if_ne	jmp	#LR__0940
0bde0     0C 4E 05 F1 | 	add	fp, #12
0bde4     A7 22 02 FB | 	rdlong	local03, fp
0bde8     A7 22 62 FC | 	wrlong	local03, fp
0bdec     08 4E 05 F1 | 	add	fp, #8
0bdf0     A7 3A 68 FC | 	wrlong	#29, fp
0bdf4     14 4E 85 F1 | 	sub	fp, #20
0bdf8                 | LR__0940
0bdf8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0bdf8     08 4E 05 F1 | 	add	fp, #8
0bdfc     A7 22 02 FB | 	rdlong	local03, fp
0be00     08 4E 85 F1 | 	sub	fp, #8
0be04     1F 22 0E F2 | 	cmp	local03, #31 wz
0be08     14 4E 05 51 |  if_ne	add	fp, #20
0be0c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0be10     14 4E 85 51 |  if_ne	sub	fp, #20
0be14     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0be18     08 4E 05 51 |  if_ne	add	fp, #8
0be1c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0be20     08 4E 85 51 |  if_ne	sub	fp, #8
0be24     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0be28     14 4E 05 51 |  if_ne	add	fp, #20
0be2c     14 4E 85 51 |  if_ne	sub	fp, #20
0be30     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0be34     A7 0C 68 AC |  if_e	wrlong	#6, fp
0be38     08 4E 05 A1 |  if_e	add	fp, #8
0be3c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0be40     08 4E 85 A1 |  if_e	sub	fp, #8
0be44     18 00 90 AD |  if_e	jmp	#LR__0941
0be48     A7 22 02 FB | 	rdlong	local03, fp
0be4c     0C 4E 05 F1 | 	add	fp, #12
0be50     A7 1E 02 FB | 	rdlong	local01, fp
0be54     0C 4E 85 F1 | 	sub	fp, #12
0be58     0F 23 42 F5 | 	or	local03, local01
0be5c     A7 22 62 FC | 	wrlong	local03, fp
0be60                 | LR__0941
0be60     A7 12 02 F6 | 	mov	arg01, fp
0be64     68 D0 BF FD | 	call	#_push
0be68     A7 F0 03 F6 | 	mov	ptra, fp
0be6c     B2 00 A0 FD | 	call	#popregs_
0be70                 | _do_or_ret
0be70     2D 00 64 FD | 	ret
0be74                 | 
0be74                 | ' 
0be74                 | ' sub do_mul
0be74                 | _do_mul
0be74     05 4A 05 F6 | 	mov	COUNT_, #5
0be78     A8 00 A0 FD | 	call	#pushregs_
0be7c     18 F0 07 F1 | 	add	ptra, #24
0be80     B4 CF BF FD | 	call	#_pop
0be84     FD 1E 02 F6 | 	mov	local01, result1
0be88     FE 20 02 F6 | 	mov	local02, result2
0be8c     FF 22 02 F6 | 	mov	local03, result3
0be90     0C 4E 05 F1 | 	add	fp, #12
0be94     A7 1E 62 FC | 	wrlong	local01, fp
0be98     04 4E 05 F1 | 	add	fp, #4
0be9c     A7 20 62 FC | 	wrlong	local02, fp
0bea0     04 4E 05 F1 | 	add	fp, #4
0bea4     A7 22 62 FC | 	wrlong	local03, fp
0bea8     14 4E 85 F1 | 	sub	fp, #20
0beac     88 CF BF FD | 	call	#_pop
0beb0     FF 22 02 F6 | 	mov	local03, result3
0beb4     A7 FA 61 FC | 	wrlong	result1, fp
0beb8     04 4E 05 F1 | 	add	fp, #4
0bebc     A7 FC 61 FC | 	wrlong	result2, fp
0bec0     04 4E 05 F1 | 	add	fp, #4
0bec4     A7 22 62 FC | 	wrlong	local03, fp
0bec8                 | ' 
0bec8                 | ' t2=pop()
0bec8                 | ' t1=pop()
0bec8                 | ' 
0bec8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0bec8     08 4E 85 F1 | 	sub	fp, #8
0becc     1D 22 0E F2 | 	cmp	local03, #29 wz
0bed0     14 4E 05 A1 |  if_e	add	fp, #20
0bed4     A7 24 02 AB |  if_e	rdlong	local04, fp
0bed8     14 4E 85 A1 |  if_e	sub	fp, #20
0bedc     12 23 02 A6 |  if_e	mov	local03, local04
0bee0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bee4     20 00 90 5D |  if_ne	jmp	#LR__0950
0bee8     A7 20 02 FB | 	rdlong	local02, fp
0beec     0C 4E 05 F1 | 	add	fp, #12
0bef0     A7 22 02 FB | 	rdlong	local03, fp
0bef4     11 21 02 FD | 	qmul	local02, local03
0bef8     0C 4E 85 F1 | 	sub	fp, #12
0befc     18 1E 62 FD | 	getqx	local01
0bf00     A7 1E 62 FC | 	wrlong	local01, fp
0bf04     C4 02 90 FD | 	jmp	#LR__0959
0bf08                 | LR__0950
0bf08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0bf08     08 4E 05 F1 | 	add	fp, #8
0bf0c     A7 1E 02 FB | 	rdlong	local01, fp
0bf10     08 4E 85 F1 | 	sub	fp, #8
0bf14     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bf18     14 4E 05 A1 |  if_e	add	fp, #20
0bf1c     A7 24 02 AB |  if_e	rdlong	local04, fp
0bf20     14 4E 85 A1 |  if_e	sub	fp, #20
0bf24     12 23 02 A6 |  if_e	mov	local03, local04
0bf28     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bf2c     2C 00 90 5D |  if_ne	jmp	#LR__0951
0bf30     A7 20 02 FB | 	rdlong	local02, fp
0bf34     0C 4E 05 F1 | 	add	fp, #12
0bf38     A7 22 02 FB | 	rdlong	local03, fp
0bf3c     11 21 02 FD | 	qmul	local02, local03
0bf40     0C 4E 85 F1 | 	sub	fp, #12
0bf44     18 1E 62 FD | 	getqx	local01
0bf48     A7 1E 62 FC | 	wrlong	local01, fp
0bf4c     08 4E 05 F1 | 	add	fp, #8
0bf50     A7 38 68 FC | 	wrlong	#28, fp
0bf54     08 4E 85 F1 | 	sub	fp, #8
0bf58     70 02 90 FD | 	jmp	#LR__0959
0bf5c                 | LR__0951
0bf5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bf5c     08 4E 05 F1 | 	add	fp, #8
0bf60     A7 1E 02 FB | 	rdlong	local01, fp
0bf64     08 4E 85 F1 | 	sub	fp, #8
0bf68     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bf6c     14 4E 05 A1 |  if_e	add	fp, #20
0bf70     A7 24 02 AB |  if_e	rdlong	local04, fp
0bf74     14 4E 85 A1 |  if_e	sub	fp, #20
0bf78     12 23 02 A6 |  if_e	mov	local03, local04
0bf7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bf80     30 00 90 5D |  if_ne	jmp	#LR__0952
0bf84     A7 12 02 FB | 	rdlong	arg01, fp
0bf88     B0 B9 B0 FD | 	call	#__system___float_fromuns
0bf8c     FD 12 02 F6 | 	mov	arg01, result1
0bf90     0C 4E 05 F1 | 	add	fp, #12
0bf94     A7 14 02 FB | 	rdlong	arg02, fp
0bf98     0C 4E 85 F1 | 	sub	fp, #12
0bf9c     C8 BC B0 FD | 	call	#__system___float_mul
0bfa0     A7 FA 61 FC | 	wrlong	result1, fp
0bfa4     08 4E 05 F1 | 	add	fp, #8
0bfa8     A7 3C 68 FC | 	wrlong	#30, fp
0bfac     08 4E 85 F1 | 	sub	fp, #8
0bfb0     18 02 90 FD | 	jmp	#LR__0959
0bfb4                 | LR__0952
0bfb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0bfb4     08 4E 05 F1 | 	add	fp, #8
0bfb8     A7 1E 02 FB | 	rdlong	local01, fp
0bfbc     08 4E 85 F1 | 	sub	fp, #8
0bfc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bfc4     14 4E 05 A1 |  if_e	add	fp, #20
0bfc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0bfcc     14 4E 85 A1 |  if_e	sub	fp, #20
0bfd0     12 23 02 A6 |  if_e	mov	local03, local04
0bfd4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bfd8     20 00 90 5D |  if_ne	jmp	#LR__0953
0bfdc     A7 20 02 FB | 	rdlong	local02, fp
0bfe0     0C 4E 05 F1 | 	add	fp, #12
0bfe4     A7 22 02 FB | 	rdlong	local03, fp
0bfe8     11 21 02 FD | 	qmul	local02, local03
0bfec     0C 4E 85 F1 | 	sub	fp, #12
0bff0     18 1E 62 FD | 	getqx	local01
0bff4     A7 1E 62 FC | 	wrlong	local01, fp
0bff8     D0 01 90 FD | 	jmp	#LR__0959
0bffc                 | LR__0953
0bffc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0bffc     08 4E 05 F1 | 	add	fp, #8
0c000     A7 1E 02 FB | 	rdlong	local01, fp
0c004     08 4E 85 F1 | 	sub	fp, #8
0c008     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c00c     14 4E 05 A1 |  if_e	add	fp, #20
0c010     A7 24 02 AB |  if_e	rdlong	local04, fp
0c014     14 4E 85 A1 |  if_e	sub	fp, #20
0c018     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0c01c     20 00 90 5D |  if_ne	jmp	#LR__0954
0c020     A7 20 02 FB | 	rdlong	local02, fp
0c024     0C 4E 05 F1 | 	add	fp, #12
0c028     A7 22 02 FB | 	rdlong	local03, fp
0c02c     11 21 02 FD | 	qmul	local02, local03
0c030     0C 4E 85 F1 | 	sub	fp, #12
0c034     18 1E 62 FD | 	getqx	local01
0c038     A7 1E 62 FC | 	wrlong	local01, fp
0c03c     8C 01 90 FD | 	jmp	#LR__0959
0c040                 | LR__0954
0c040                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c040     08 4E 05 F1 | 	add	fp, #8
0c044     A7 1E 02 FB | 	rdlong	local01, fp
0c048     08 4E 85 F1 | 	sub	fp, #8
0c04c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c050     14 4E 05 A1 |  if_e	add	fp, #20
0c054     A7 22 02 AB |  if_e	rdlong	local03, fp
0c058     14 4E 85 A1 |  if_e	sub	fp, #20
0c05c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c060     40 00 90 5D |  if_ne	jmp	#LR__0955
0c064     A7 12 02 FB | 	rdlong	arg01, fp
0c068     09 13 52 F6 | 	abs	arg01, arg01 wc
0c06c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c070     00 26 06 36 |  if_ae	mov	local05, #0
0c074     C4 B8 B0 FD | 	call	#__system___float_fromuns
0c078     13 FB 61 F5 | 	xor	result1, local05
0c07c     FD 12 02 F6 | 	mov	arg01, result1
0c080     0C 4E 05 F1 | 	add	fp, #12
0c084     A7 14 02 FB | 	rdlong	arg02, fp
0c088     0C 4E 85 F1 | 	sub	fp, #12
0c08c     D8 BB B0 FD | 	call	#__system___float_mul
0c090     A7 FA 61 FC | 	wrlong	result1, fp
0c094     08 4E 05 F1 | 	add	fp, #8
0c098     A7 3C 68 FC | 	wrlong	#30, fp
0c09c     08 4E 85 F1 | 	sub	fp, #8
0c0a0     28 01 90 FD | 	jmp	#LR__0959
0c0a4                 | LR__0955
0c0a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0c0a4     08 4E 05 F1 | 	add	fp, #8
0c0a8     A7 1E 02 FB | 	rdlong	local01, fp
0c0ac     08 4E 85 F1 | 	sub	fp, #8
0c0b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c0b4     14 4E 05 A1 |  if_e	add	fp, #20
0c0b8     A7 22 02 AB |  if_e	rdlong	local03, fp
0c0bc     14 4E 85 A1 |  if_e	sub	fp, #20
0c0c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c0c4     28 00 90 5D |  if_ne	jmp	#LR__0956
0c0c8     A7 1E 02 FB | 	rdlong	local01, fp
0c0cc     0C 4E 05 F1 | 	add	fp, #12
0c0d0     A7 12 02 FB | 	rdlong	arg01, fp
0c0d4     0C 4E 85 F1 | 	sub	fp, #12
0c0d8     60 B8 B0 FD | 	call	#__system___float_fromuns
0c0dc     FD 14 02 F6 | 	mov	arg02, result1
0c0e0     0F 13 02 F6 | 	mov	arg01, local01
0c0e4     80 BB B0 FD | 	call	#__system___float_mul
0c0e8     A7 FA 61 FC | 	wrlong	result1, fp
0c0ec     DC 00 90 FD | 	jmp	#LR__0959
0c0f0                 | LR__0956
0c0f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0c0f0     08 4E 05 F1 | 	add	fp, #8
0c0f4     A7 1E 02 FB | 	rdlong	local01, fp
0c0f8     08 4E 85 F1 | 	sub	fp, #8
0c0fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c100     14 4E 05 A1 |  if_e	add	fp, #20
0c104     A7 22 02 AB |  if_e	rdlong	local03, fp
0c108     14 4E 85 A1 |  if_e	sub	fp, #20
0c10c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c110     38 00 90 5D |  if_ne	jmp	#LR__0957
0c114     A7 1E 02 FB | 	rdlong	local01, fp
0c118     0C 4E 05 F1 | 	add	fp, #12
0c11c     A7 12 02 FB | 	rdlong	arg01, fp
0c120     0C 4E 85 F1 | 	sub	fp, #12
0c124     09 13 52 F6 | 	abs	arg01, arg01 wc
0c128     1F 26 C6 C9 |  if_b	decod	local05, #31
0c12c     00 26 06 36 |  if_ae	mov	local05, #0
0c130     08 B8 B0 FD | 	call	#__system___float_fromuns
0c134     13 FB 61 F5 | 	xor	result1, local05
0c138     FD 14 02 F6 | 	mov	arg02, result1
0c13c     0F 13 02 F6 | 	mov	arg01, local01
0c140     24 BB B0 FD | 	call	#__system___float_mul
0c144     A7 FA 61 FC | 	wrlong	result1, fp
0c148     80 00 90 FD | 	jmp	#LR__0959
0c14c                 | LR__0957
0c14c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0c14c     08 4E 05 F1 | 	add	fp, #8
0c150     A7 1E 02 FB | 	rdlong	local01, fp
0c154     08 4E 85 F1 | 	sub	fp, #8
0c158     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c15c     14 4E 05 A1 |  if_e	add	fp, #20
0c160     A7 22 02 AB |  if_e	rdlong	local03, fp
0c164     14 4E 85 A1 |  if_e	sub	fp, #20
0c168     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c16c     1C 00 90 5D |  if_ne	jmp	#LR__0958
0c170     A7 12 02 FB | 	rdlong	arg01, fp
0c174     0C 4E 05 F1 | 	add	fp, #12
0c178     A7 14 02 FB | 	rdlong	arg02, fp
0c17c     0C 4E 85 F1 | 	sub	fp, #12
0c180     E4 BA B0 FD | 	call	#__system___float_mul
0c184     A7 FA 61 FC | 	wrlong	result1, fp
0c188     40 00 90 FD | 	jmp	#LR__0959
0c18c                 | LR__0958
0c18c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0c18c     08 4E 05 F1 | 	add	fp, #8
0c190     A7 1E 02 FB | 	rdlong	local01, fp
0c194     08 4E 85 F1 | 	sub	fp, #8
0c198     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c19c     14 4E 05 51 |  if_ne	add	fp, #20
0c1a0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c1a4     14 4E 85 51 |  if_ne	sub	fp, #20
0c1a8     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c1ac     A7 10 68 AC |  if_e	wrlong	#8, fp
0c1b0     08 4E 05 A1 |  if_e	add	fp, #8
0c1b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c1b8     08 4E 85 A1 |  if_e	sub	fp, #8
0c1bc     A7 12 68 5C |  if_ne	wrlong	#9, fp
0c1c0     08 4E 05 51 |  if_ne	add	fp, #8
0c1c4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c1c8     08 4E 85 51 |  if_ne	sub	fp, #8
0c1cc                 | LR__0959
0c1cc     A7 12 02 F6 | 	mov	arg01, fp
0c1d0     FC CC BF FD | 	call	#_push
0c1d4     A7 F0 03 F6 | 	mov	ptra, fp
0c1d8     B2 00 A0 FD | 	call	#popregs_
0c1dc                 | _do_mul_ret
0c1dc     2D 00 64 FD | 	ret
0c1e0                 | 
0c1e0                 | ' 
0c1e0                 | ' sub do_div 
0c1e0                 | _do_div
0c1e0     01 4A 05 F6 | 	mov	COUNT_, #1
0c1e4     A8 00 A0 FD | 	call	#pushregs_
0c1e8     18 F0 07 F1 | 	add	ptra, #24
0c1ec     48 CC BF FD | 	call	#_pop
0c1f0     FD 60 02 F6 | 	mov	muldivb_, result1
0c1f4     FE 5E 02 F6 | 	mov	muldiva_, result2
0c1f8     FF 1E 02 F6 | 	mov	local01, result3
0c1fc     0C 4E 05 F1 | 	add	fp, #12
0c200     A7 60 62 FC | 	wrlong	muldivb_, fp
0c204     04 4E 05 F1 | 	add	fp, #4
0c208     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c20c     04 4E 05 F1 | 	add	fp, #4
0c210     A7 1E 62 FC | 	wrlong	local01, fp
0c214     14 4E 85 F1 | 	sub	fp, #20
0c218     1C CC BF FD | 	call	#_pop
0c21c     A7 FA 61 FC | 	wrlong	result1, fp
0c220     04 4E 05 F1 | 	add	fp, #4
0c224     A7 FC 61 FC | 	wrlong	result2, fp
0c228     04 4E 05 F1 | 	add	fp, #4
0c22c     A7 FE 61 FC | 	wrlong	result3, fp
0c230                 | ' 
0c230                 | ' t2=pop()
0c230                 | ' t1=pop()
0c230                 | ' 
0c230                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0c230     08 4E 85 F1 | 	sub	fp, #8
0c234     1F FE 0D F2 | 	cmp	result3, #31 wz
0c238     14 4E 05 51 |  if_ne	add	fp, #20
0c23c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c240     14 4E 85 51 |  if_ne	sub	fp, #20
0c244     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c248     A7 14 68 AC |  if_e	wrlong	#10, fp
0c24c     08 4E 05 A1 |  if_e	add	fp, #8
0c250     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c254     08 4E 85 A1 |  if_e	sub	fp, #8
0c258     90 01 90 AD |  if_e	jmp	#LR__0966
0c25c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c25c     08 4E 05 F1 | 	add	fp, #8
0c260     A7 60 02 FB | 	rdlong	muldivb_, fp
0c264     08 4E 85 F1 | 	sub	fp, #8
0c268     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c26c     1C 00 90 5D |  if_ne	jmp	#LR__0960
0c270     08 4E 05 F1 | 	add	fp, #8
0c274     A7 38 68 FC | 	wrlong	#28, fp
0c278     08 4E 85 F1 | 	sub	fp, #8
0c27c     A7 12 02 FB | 	rdlong	arg01, fp
0c280     00 14 06 F6 | 	mov	arg02, #0
0c284     A8 BE B0 FD | 	call	#__system___float_tointeger
0c288     A7 FA 61 FC | 	wrlong	result1, fp
0c28c                 | LR__0960
0c28c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c28c     14 4E 05 F1 | 	add	fp, #20
0c290     A7 60 02 FB | 	rdlong	muldivb_, fp
0c294     14 4E 85 F1 | 	sub	fp, #20
0c298     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c29c     28 00 90 5D |  if_ne	jmp	#LR__0961
0c2a0     14 4E 05 F1 | 	add	fp, #20
0c2a4     A7 38 68 FC | 	wrlong	#28, fp
0c2a8     08 4E 85 F1 | 	sub	fp, #8
0c2ac     A7 12 02 FB | 	rdlong	arg01, fp
0c2b0     0C 4E 85 F1 | 	sub	fp, #12
0c2b4     00 14 06 F6 | 	mov	arg02, #0
0c2b8     74 BE B0 FD | 	call	#__system___float_tointeger
0c2bc     0C 4E 05 F1 | 	add	fp, #12
0c2c0     A7 FA 61 FC | 	wrlong	result1, fp
0c2c4     0C 4E 85 F1 | 	sub	fp, #12
0c2c8                 | LR__0961
0c2c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0c2c8     08 4E 05 F1 | 	add	fp, #8
0c2cc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c2d0     08 4E 85 F1 | 	sub	fp, #8
0c2d4     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c2d8     14 4E 05 A1 |  if_e	add	fp, #20
0c2dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c2e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c2e4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c2e8     20 00 90 5D |  if_ne	jmp	#LR__0962
0c2ec     0C 4E 05 F1 | 	add	fp, #12
0c2f0     A7 1E 02 FB | 	rdlong	local01, fp
0c2f4     0C 4E 85 F1 | 	sub	fp, #12
0c2f8     A7 60 02 FB | 	rdlong	muldivb_, fp
0c2fc     0F 61 12 FD | 	qdiv	muldivb_, local01
0c300     18 1E 62 FD | 	getqx	local01
0c304     A7 1E 62 FC | 	wrlong	local01, fp
0c308     E0 00 90 FD | 	jmp	#LR__0966
0c30c                 | LR__0962
0c30c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0c30c     08 4E 05 F1 | 	add	fp, #8
0c310     A7 60 02 FB | 	rdlong	muldivb_, fp
0c314     08 4E 85 F1 | 	sub	fp, #8
0c318     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c31c     14 4E 05 A1 |  if_e	add	fp, #20
0c320     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c324     14 4E 85 A1 |  if_e	sub	fp, #20
0c328     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c32c     2C 00 90 5D |  if_ne	jmp	#LR__0963
0c330     0C 4E 05 F1 | 	add	fp, #12
0c334     A7 1E 02 FB | 	rdlong	local01, fp
0c338     0C 4E 85 F1 | 	sub	fp, #12
0c33c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c340     0F 61 12 FD | 	qdiv	muldivb_, local01
0c344     18 1E 62 FD | 	getqx	local01
0c348     A7 1E 62 FC | 	wrlong	local01, fp
0c34c     08 4E 05 F1 | 	add	fp, #8
0c350     A7 38 68 FC | 	wrlong	#28, fp
0c354     08 4E 85 F1 | 	sub	fp, #8
0c358     90 00 90 FD | 	jmp	#LR__0966
0c35c                 | LR__0963
0c35c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0c35c     08 4E 05 F1 | 	add	fp, #8
0c360     A7 60 02 FB | 	rdlong	muldivb_, fp
0c364     08 4E 85 F1 | 	sub	fp, #8
0c368     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c36c     14 4E 05 A1 |  if_e	add	fp, #20
0c370     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c374     14 4E 85 A1 |  if_e	sub	fp, #20
0c378     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c37c     1C 00 90 5D |  if_ne	jmp	#LR__0964
0c380     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c384     0C 4E 05 F1 | 	add	fp, #12
0c388     A7 60 02 FB | 	rdlong	muldivb_, fp
0c38c     0C 4E 85 F1 | 	sub	fp, #12
0c390     BA 00 A0 FD | 	call	#divide_
0c394     A7 60 62 FC | 	wrlong	muldivb_, fp
0c398     50 00 90 FD | 	jmp	#LR__0966
0c39c                 | LR__0964
0c39c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0c39c     08 4E 05 F1 | 	add	fp, #8
0c3a0     A7 60 02 FB | 	rdlong	muldivb_, fp
0c3a4     08 4E 85 F1 | 	sub	fp, #8
0c3a8     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c3ac     14 4E 05 A1 |  if_e	add	fp, #20
0c3b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c3b4     14 4E 85 A1 |  if_e	sub	fp, #20
0c3b8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c3bc     1C 00 90 5D |  if_ne	jmp	#LR__0965
0c3c0     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c3c4     0C 4E 05 F1 | 	add	fp, #12
0c3c8     A7 60 02 FB | 	rdlong	muldivb_, fp
0c3cc     0C 4E 85 F1 | 	sub	fp, #12
0c3d0     BA 00 A0 FD | 	call	#divide_
0c3d4     A7 60 62 FC | 	wrlong	muldivb_, fp
0c3d8     10 00 90 FD | 	jmp	#LR__0966
0c3dc                 | LR__0965
0c3dc     A7 16 68 FC | 	wrlong	#11, fp
0c3e0     08 4E 05 F1 | 	add	fp, #8
0c3e4     A7 FE 69 FC | 	wrlong	#255, fp
0c3e8     08 4E 85 F1 | 	sub	fp, #8
0c3ec                 | LR__0966
0c3ec     A7 12 02 F6 | 	mov	arg01, fp
0c3f0     DC CA BF FD | 	call	#_push
0c3f4     A7 F0 03 F6 | 	mov	ptra, fp
0c3f8     B2 00 A0 FD | 	call	#popregs_
0c3fc                 | _do_div_ret
0c3fc     2D 00 64 FD | 	ret
0c400                 | 
0c400                 | ' 
0c400                 | ' sub do_fdiv 
0c400                 | _do_fdiv
0c400     02 4A 05 F6 | 	mov	COUNT_, #2
0c404     A8 00 A0 FD | 	call	#pushregs_
0c408     18 F0 07 F1 | 	add	ptra, #24
0c40c     28 CA BF FD | 	call	#_pop
0c410     FD 14 02 F6 | 	mov	arg02, result1
0c414     FE 12 02 F6 | 	mov	arg01, result2
0c418     FF 1E 02 F6 | 	mov	local01, result3
0c41c     0C 4E 05 F1 | 	add	fp, #12
0c420     A7 14 62 FC | 	wrlong	arg02, fp
0c424     04 4E 05 F1 | 	add	fp, #4
0c428     A7 12 62 FC | 	wrlong	arg01, fp
0c42c     04 4E 05 F1 | 	add	fp, #4
0c430     A7 1E 62 FC | 	wrlong	local01, fp
0c434     14 4E 85 F1 | 	sub	fp, #20
0c438     FC C9 BF FD | 	call	#_pop
0c43c     A7 FA 61 FC | 	wrlong	result1, fp
0c440     04 4E 05 F1 | 	add	fp, #4
0c444     A7 FC 61 FC | 	wrlong	result2, fp
0c448     04 4E 05 F1 | 	add	fp, #4
0c44c     A7 FE 61 FC | 	wrlong	result3, fp
0c450                 | ' 
0c450                 | ' t2=pop()
0c450                 | ' t1=pop()
0c450                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0c450     08 4E 85 F1 | 	sub	fp, #8
0c454     1F FE 0D F2 | 	cmp	result3, #31 wz
0c458     14 4E 05 51 |  if_ne	add	fp, #20
0c45c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c460     14 4E 85 51 |  if_ne	sub	fp, #20
0c464     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c468     A7 14 68 AC |  if_e	wrlong	#10, fp
0c46c     08 4E 05 A1 |  if_e	add	fp, #8
0c470     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c474     08 4E 85 A1 |  if_e	sub	fp, #8
0c478     38 01 90 AD |  if_e	jmp	#LR__0975
0c47c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c47c     08 4E 05 F1 | 	add	fp, #8
0c480     A7 14 02 FB | 	rdlong	arg02, fp
0c484     08 4E 85 F1 | 	sub	fp, #8
0c488     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c48c     28 00 90 5D |  if_ne	jmp	#LR__0970
0c490     08 4E 05 F1 | 	add	fp, #8
0c494     A7 3C 68 FC | 	wrlong	#30, fp
0c498     08 4E 85 F1 | 	sub	fp, #8
0c49c     A7 12 02 FB | 	rdlong	arg01, fp
0c4a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0c4a4     1F 20 C6 C9 |  if_b	decod	local02, #31
0c4a8     00 20 06 36 |  if_ae	mov	local02, #0
0c4ac     8C B4 B0 FD | 	call	#__system___float_fromuns
0c4b0     10 FB 61 F5 | 	xor	result1, local02
0c4b4     A7 FA 61 FC | 	wrlong	result1, fp
0c4b8                 | LR__0970
0c4b8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0c4b8     08 4E 05 F1 | 	add	fp, #8
0c4bc     A7 14 02 FB | 	rdlong	arg02, fp
0c4c0     08 4E 85 F1 | 	sub	fp, #8
0c4c4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c4c8     18 00 90 5D |  if_ne	jmp	#LR__0971
0c4cc     08 4E 05 F1 | 	add	fp, #8
0c4d0     A7 3C 68 FC | 	wrlong	#30, fp
0c4d4     08 4E 85 F1 | 	sub	fp, #8
0c4d8     A7 12 02 FB | 	rdlong	arg01, fp
0c4dc     5C B4 B0 FD | 	call	#__system___float_fromuns
0c4e0     A7 FA 61 FC | 	wrlong	result1, fp
0c4e4                 | LR__0971
0c4e4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c4e4     14 4E 05 F1 | 	add	fp, #20
0c4e8     A7 14 02 FB | 	rdlong	arg02, fp
0c4ec     14 4E 85 F1 | 	sub	fp, #20
0c4f0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c4f4     34 00 90 5D |  if_ne	jmp	#LR__0972
0c4f8     14 4E 05 F1 | 	add	fp, #20
0c4fc     A7 3C 68 FC | 	wrlong	#30, fp
0c500     08 4E 85 F1 | 	sub	fp, #8
0c504     A7 12 02 FB | 	rdlong	arg01, fp
0c508     0C 4E 85 F1 | 	sub	fp, #12
0c50c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c510     1F 20 C6 C9 |  if_b	decod	local02, #31
0c514     00 20 06 36 |  if_ae	mov	local02, #0
0c518     20 B4 B0 FD | 	call	#__system___float_fromuns
0c51c     10 FB 61 F5 | 	xor	result1, local02
0c520     0C 4E 05 F1 | 	add	fp, #12
0c524     A7 FA 61 FC | 	wrlong	result1, fp
0c528     0C 4E 85 F1 | 	sub	fp, #12
0c52c                 | LR__0972
0c52c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c52c     14 4E 05 F1 | 	add	fp, #20
0c530     A7 14 02 FB | 	rdlong	arg02, fp
0c534     14 4E 85 F1 | 	sub	fp, #20
0c538     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c53c     24 00 90 5D |  if_ne	jmp	#LR__0973
0c540     14 4E 05 F1 | 	add	fp, #20
0c544     A7 3C 68 FC | 	wrlong	#30, fp
0c548     08 4E 85 F1 | 	sub	fp, #8
0c54c     A7 12 02 FB | 	rdlong	arg01, fp
0c550     0C 4E 85 F1 | 	sub	fp, #12
0c554     E4 B3 B0 FD | 	call	#__system___float_fromuns
0c558     0C 4E 05 F1 | 	add	fp, #12
0c55c     A7 FA 61 FC | 	wrlong	result1, fp
0c560     0C 4E 85 F1 | 	sub	fp, #12
0c564                 | LR__0973
0c564                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0c564     08 4E 05 F1 | 	add	fp, #8
0c568     A7 14 02 FB | 	rdlong	arg02, fp
0c56c     08 4E 85 F1 | 	sub	fp, #8
0c570     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c574     14 4E 05 A1 |  if_e	add	fp, #20
0c578     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c57c     14 4E 85 A1 |  if_e	sub	fp, #20
0c580     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c584     1C 00 90 5D |  if_ne	jmp	#LR__0974
0c588     A7 12 02 FB | 	rdlong	arg01, fp
0c58c     0C 4E 05 F1 | 	add	fp, #12
0c590     A7 14 02 FB | 	rdlong	arg02, fp
0c594     0C 4E 85 F1 | 	sub	fp, #12
0c598     D0 B8 B0 FD | 	call	#__system___float_div
0c59c     A7 FA 61 FC | 	wrlong	result1, fp
0c5a0     10 00 90 FD | 	jmp	#LR__0975
0c5a4                 | LR__0974
0c5a4     A7 16 68 FC | 	wrlong	#11, fp
0c5a8     08 4E 05 F1 | 	add	fp, #8
0c5ac     A7 FE 69 FC | 	wrlong	#255, fp
0c5b0     08 4E 85 F1 | 	sub	fp, #8
0c5b4                 | LR__0975
0c5b4     A7 12 02 F6 | 	mov	arg01, fp
0c5b8     14 C9 BF FD | 	call	#_push
0c5bc     A7 F0 03 F6 | 	mov	ptra, fp
0c5c0     B2 00 A0 FD | 	call	#popregs_
0c5c4                 | _do_fdiv_ret
0c5c4     2D 00 64 FD | 	ret
0c5c8                 | 
0c5c8                 | ' 
0c5c8                 | ' 
0c5c8                 | ' sub do_mod 
0c5c8                 | _do_mod
0c5c8     01 4A 05 F6 | 	mov	COUNT_, #1
0c5cc     A8 00 A0 FD | 	call	#pushregs_
0c5d0     18 F0 07 F1 | 	add	ptra, #24
0c5d4     60 C8 BF FD | 	call	#_pop
0c5d8     FD 60 02 F6 | 	mov	muldivb_, result1
0c5dc     FE 5E 02 F6 | 	mov	muldiva_, result2
0c5e0     FF 1E 02 F6 | 	mov	local01, result3
0c5e4     0C 4E 05 F1 | 	add	fp, #12
0c5e8     A7 60 62 FC | 	wrlong	muldivb_, fp
0c5ec     04 4E 05 F1 | 	add	fp, #4
0c5f0     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c5f4     04 4E 05 F1 | 	add	fp, #4
0c5f8     A7 1E 62 FC | 	wrlong	local01, fp
0c5fc     14 4E 85 F1 | 	sub	fp, #20
0c600     34 C8 BF FD | 	call	#_pop
0c604     A7 FA 61 FC | 	wrlong	result1, fp
0c608     04 4E 05 F1 | 	add	fp, #4
0c60c     A7 FC 61 FC | 	wrlong	result2, fp
0c610     04 4E 05 F1 | 	add	fp, #4
0c614     A7 FE 61 FC | 	wrlong	result3, fp
0c618                 | ' 
0c618                 | ' t2=pop()
0c618                 | ' t1=pop()
0c618                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c618     08 4E 85 F1 | 	sub	fp, #8
0c61c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c620     14 4E 05 51 |  if_ne	add	fp, #20
0c624     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c628     14 4E 85 51 |  if_ne	sub	fp, #20
0c62c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c630     A7 14 68 AC |  if_e	wrlong	#10, fp
0c634     08 4E 05 A1 |  if_e	add	fp, #8
0c638     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c63c     08 4E 85 A1 |  if_e	sub	fp, #8
0c640     90 01 90 AD |  if_e	jmp	#LR__0986
0c644                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c644     08 4E 05 F1 | 	add	fp, #8
0c648     A7 60 02 FB | 	rdlong	muldivb_, fp
0c64c     08 4E 85 F1 | 	sub	fp, #8
0c650     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c654     1C 00 90 5D |  if_ne	jmp	#LR__0980
0c658     08 4E 05 F1 | 	add	fp, #8
0c65c     A7 38 68 FC | 	wrlong	#28, fp
0c660     08 4E 85 F1 | 	sub	fp, #8
0c664     A7 12 02 FB | 	rdlong	arg01, fp
0c668     00 14 06 F6 | 	mov	arg02, #0
0c66c     C0 BA B0 FD | 	call	#__system___float_tointeger
0c670     A7 FA 61 FC | 	wrlong	result1, fp
0c674                 | LR__0980
0c674                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c674     14 4E 05 F1 | 	add	fp, #20
0c678     A7 60 02 FB | 	rdlong	muldivb_, fp
0c67c     14 4E 85 F1 | 	sub	fp, #20
0c680     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c684     28 00 90 5D |  if_ne	jmp	#LR__0981
0c688     14 4E 05 F1 | 	add	fp, #20
0c68c     A7 38 68 FC | 	wrlong	#28, fp
0c690     08 4E 85 F1 | 	sub	fp, #8
0c694     A7 12 02 FB | 	rdlong	arg01, fp
0c698     0C 4E 85 F1 | 	sub	fp, #12
0c69c     00 14 06 F6 | 	mov	arg02, #0
0c6a0     8C BA B0 FD | 	call	#__system___float_tointeger
0c6a4     0C 4E 05 F1 | 	add	fp, #12
0c6a8     A7 FA 61 FC | 	wrlong	result1, fp
0c6ac     0C 4E 85 F1 | 	sub	fp, #12
0c6b0                 | LR__0981
0c6b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c6b0     08 4E 05 F1 | 	add	fp, #8
0c6b4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c6b8     08 4E 85 F1 | 	sub	fp, #8
0c6bc     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c6c0     14 4E 05 A1 |  if_e	add	fp, #20
0c6c4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c6c8     14 4E 85 A1 |  if_e	sub	fp, #20
0c6cc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c6d0     20 00 90 5D |  if_ne	jmp	#LR__0982
0c6d4     0C 4E 05 F1 | 	add	fp, #12
0c6d8     A7 1E 02 FB | 	rdlong	local01, fp
0c6dc     0C 4E 85 F1 | 	sub	fp, #12
0c6e0     A7 60 02 FB | 	rdlong	muldivb_, fp
0c6e4     0F 61 12 FD | 	qdiv	muldivb_, local01
0c6e8     19 1E 62 FD | 	getqy	local01
0c6ec     A7 1E 62 FC | 	wrlong	local01, fp
0c6f0     E0 00 90 FD | 	jmp	#LR__0986
0c6f4                 | LR__0982
0c6f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c6f4     08 4E 05 F1 | 	add	fp, #8
0c6f8     A7 60 02 FB | 	rdlong	muldivb_, fp
0c6fc     08 4E 85 F1 | 	sub	fp, #8
0c700     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c704     14 4E 05 A1 |  if_e	add	fp, #20
0c708     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c70c     14 4E 85 A1 |  if_e	sub	fp, #20
0c710     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c714     2C 00 90 5D |  if_ne	jmp	#LR__0983
0c718     0C 4E 05 F1 | 	add	fp, #12
0c71c     A7 1E 02 FB | 	rdlong	local01, fp
0c720     0C 4E 85 F1 | 	sub	fp, #12
0c724     A7 60 02 FB | 	rdlong	muldivb_, fp
0c728     0F 61 12 FD | 	qdiv	muldivb_, local01
0c72c     19 1E 62 FD | 	getqy	local01
0c730     A7 1E 62 FC | 	wrlong	local01, fp
0c734     08 4E 05 F1 | 	add	fp, #8
0c738     A7 38 68 FC | 	wrlong	#28, fp
0c73c     08 4E 85 F1 | 	sub	fp, #8
0c740     90 00 90 FD | 	jmp	#LR__0986
0c744                 | LR__0983
0c744                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c744     08 4E 05 F1 | 	add	fp, #8
0c748     A7 60 02 FB | 	rdlong	muldivb_, fp
0c74c     08 4E 85 F1 | 	sub	fp, #8
0c750     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c754     14 4E 05 A1 |  if_e	add	fp, #20
0c758     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c75c     14 4E 85 A1 |  if_e	sub	fp, #20
0c760     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c764     1C 00 90 5D |  if_ne	jmp	#LR__0984
0c768     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c76c     0C 4E 05 F1 | 	add	fp, #12
0c770     A7 60 02 FB | 	rdlong	muldivb_, fp
0c774     0C 4E 85 F1 | 	sub	fp, #12
0c778     BA 00 A0 FD | 	call	#divide_
0c77c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c780     50 00 90 FD | 	jmp	#LR__0986
0c784                 | LR__0984
0c784                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c784     08 4E 05 F1 | 	add	fp, #8
0c788     A7 60 02 FB | 	rdlong	muldivb_, fp
0c78c     08 4E 85 F1 | 	sub	fp, #8
0c790     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c794     14 4E 05 A1 |  if_e	add	fp, #20
0c798     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c79c     14 4E 85 A1 |  if_e	sub	fp, #20
0c7a0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c7a4     1C 00 90 5D |  if_ne	jmp	#LR__0985
0c7a8     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c7ac     0C 4E 05 F1 | 	add	fp, #12
0c7b0     A7 60 02 FB | 	rdlong	muldivb_, fp
0c7b4     0C 4E 85 F1 | 	sub	fp, #12
0c7b8     BA 00 A0 FD | 	call	#divide_
0c7bc     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c7c0     10 00 90 FD | 	jmp	#LR__0986
0c7c4                 | LR__0985
0c7c4     A7 16 68 FC | 	wrlong	#11, fp
0c7c8     08 4E 05 F1 | 	add	fp, #8
0c7cc     A7 FE 69 FC | 	wrlong	#255, fp
0c7d0     08 4E 85 F1 | 	sub	fp, #8
0c7d4                 | LR__0986
0c7d4     A7 12 02 F6 | 	mov	arg01, fp
0c7d8     F4 C6 BF FD | 	call	#_push
0c7dc     A7 F0 03 F6 | 	mov	ptra, fp
0c7e0     B2 00 A0 FD | 	call	#popregs_
0c7e4                 | _do_mod_ret
0c7e4     2D 00 64 FD | 	ret
0c7e8                 | 
0c7e8                 | ' 
0c7e8                 | ' sub do_shl 
0c7e8                 | _do_shl
0c7e8     03 4A 05 F6 | 	mov	COUNT_, #3
0c7ec     A8 00 A0 FD | 	call	#pushregs_
0c7f0     18 F0 07 F1 | 	add	ptra, #24
0c7f4     40 C6 BF FD | 	call	#_pop
0c7f8     FD 12 02 F6 | 	mov	arg01, result1
0c7fc     FE 1E 02 F6 | 	mov	local01, result2
0c800     FF 20 02 F6 | 	mov	local02, result3
0c804     0C 4E 05 F1 | 	add	fp, #12
0c808     A7 12 62 FC | 	wrlong	arg01, fp
0c80c     04 4E 05 F1 | 	add	fp, #4
0c810     A7 1E 62 FC | 	wrlong	local01, fp
0c814     04 4E 05 F1 | 	add	fp, #4
0c818     A7 20 62 FC | 	wrlong	local02, fp
0c81c     14 4E 85 F1 | 	sub	fp, #20
0c820     14 C6 BF FD | 	call	#_pop
0c824     FF 22 02 F6 | 	mov	local03, result3
0c828     A7 FA 61 FC | 	wrlong	result1, fp
0c82c     04 4E 05 F1 | 	add	fp, #4
0c830     A7 FC 61 FC | 	wrlong	result2, fp
0c834     04 4E 05 F1 | 	add	fp, #4
0c838     A7 22 62 FC | 	wrlong	local03, fp
0c83c                 | ' 
0c83c                 | ' t2=pop()
0c83c                 | ' t1=pop()
0c83c                 | ' 
0c83c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c83c     08 4E 85 F1 | 	sub	fp, #8
0c840     1C 22 0E F2 | 	cmp	local03, #28 wz
0c844     A7 22 02 AB |  if_e	rdlong	local03, fp
0c848     A7 22 62 AC |  if_e	wrlong	local03, fp
0c84c     08 4E 05 A1 |  if_e	add	fp, #8
0c850     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c854     08 4E 85 A1 |  if_e	sub	fp, #8
0c858                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c858     14 4E 05 F1 | 	add	fp, #20
0c85c     A7 22 02 FB | 	rdlong	local03, fp
0c860     14 4E 85 F1 | 	sub	fp, #20
0c864     1C 22 0E F2 | 	cmp	local03, #28 wz
0c868     18 00 90 5D |  if_ne	jmp	#LR__0990
0c86c     0C 4E 05 F1 | 	add	fp, #12
0c870     A7 22 02 FB | 	rdlong	local03, fp
0c874     A7 22 62 FC | 	wrlong	local03, fp
0c878     08 4E 05 F1 | 	add	fp, #8
0c87c     A7 3A 68 FC | 	wrlong	#29, fp
0c880     14 4E 85 F1 | 	sub	fp, #20
0c884                 | LR__0990
0c884                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0c884     08 4E 05 F1 | 	add	fp, #8
0c888     A7 22 02 FB | 	rdlong	local03, fp
0c88c     08 4E 85 F1 | 	sub	fp, #8
0c890     1F 22 0E F2 | 	cmp	local03, #31 wz
0c894     14 4E 05 51 |  if_ne	add	fp, #20
0c898     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c89c     14 4E 85 51 |  if_ne	sub	fp, #20
0c8a0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c8a4     08 4E 05 51 |  if_ne	add	fp, #8
0c8a8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c8ac     08 4E 85 51 |  if_ne	sub	fp, #8
0c8b0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c8b4     14 4E 05 51 |  if_ne	add	fp, #20
0c8b8     14 4E 85 51 |  if_ne	sub	fp, #20
0c8bc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c8c0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c8c4     08 4E 05 A1 |  if_e	add	fp, #8
0c8c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c8cc     08 4E 85 A1 |  if_e	sub	fp, #8
0c8d0     18 00 90 AD |  if_e	jmp	#LR__0991
0c8d4     A7 22 02 FB | 	rdlong	local03, fp
0c8d8     0C 4E 05 F1 | 	add	fp, #12
0c8dc     A7 1E 02 FB | 	rdlong	local01, fp
0c8e0     0C 4E 85 F1 | 	sub	fp, #12
0c8e4     0F 23 62 F0 | 	shl	local03, local01
0c8e8     A7 22 62 FC | 	wrlong	local03, fp
0c8ec                 | LR__0991
0c8ec     A7 12 02 F6 | 	mov	arg01, fp
0c8f0     DC C5 BF FD | 	call	#_push
0c8f4     A7 F0 03 F6 | 	mov	ptra, fp
0c8f8     B2 00 A0 FD | 	call	#popregs_
0c8fc                 | _do_shl_ret
0c8fc     2D 00 64 FD | 	ret
0c900                 | 
0c900                 | ' 
0c900                 | ' sub do_shr 
0c900                 | _do_shr
0c900     03 4A 05 F6 | 	mov	COUNT_, #3
0c904     A8 00 A0 FD | 	call	#pushregs_
0c908     18 F0 07 F1 | 	add	ptra, #24
0c90c     28 C5 BF FD | 	call	#_pop
0c910     FD 12 02 F6 | 	mov	arg01, result1
0c914     FE 1E 02 F6 | 	mov	local01, result2
0c918     FF 20 02 F6 | 	mov	local02, result3
0c91c     0C 4E 05 F1 | 	add	fp, #12
0c920     A7 12 62 FC | 	wrlong	arg01, fp
0c924     04 4E 05 F1 | 	add	fp, #4
0c928     A7 1E 62 FC | 	wrlong	local01, fp
0c92c     04 4E 05 F1 | 	add	fp, #4
0c930     A7 20 62 FC | 	wrlong	local02, fp
0c934     14 4E 85 F1 | 	sub	fp, #20
0c938     FC C4 BF FD | 	call	#_pop
0c93c     FF 22 02 F6 | 	mov	local03, result3
0c940     A7 FA 61 FC | 	wrlong	result1, fp
0c944     04 4E 05 F1 | 	add	fp, #4
0c948     A7 FC 61 FC | 	wrlong	result2, fp
0c94c     04 4E 05 F1 | 	add	fp, #4
0c950     A7 22 62 FC | 	wrlong	local03, fp
0c954                 | ' t2=pop()
0c954                 | ' t1=pop()
0c954                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c954     08 4E 85 F1 | 	sub	fp, #8
0c958     1C 22 0E F2 | 	cmp	local03, #28 wz
0c95c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c960     A7 22 62 AC |  if_e	wrlong	local03, fp
0c964     08 4E 05 A1 |  if_e	add	fp, #8
0c968     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c96c     08 4E 85 A1 |  if_e	sub	fp, #8
0c970                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c970     14 4E 05 F1 | 	add	fp, #20
0c974     A7 22 02 FB | 	rdlong	local03, fp
0c978     14 4E 85 F1 | 	sub	fp, #20
0c97c     1C 22 0E F2 | 	cmp	local03, #28 wz
0c980     18 00 90 5D |  if_ne	jmp	#LR__1000
0c984     0C 4E 05 F1 | 	add	fp, #12
0c988     A7 22 02 FB | 	rdlong	local03, fp
0c98c     A7 22 62 FC | 	wrlong	local03, fp
0c990     08 4E 05 F1 | 	add	fp, #8
0c994     A7 3A 68 FC | 	wrlong	#29, fp
0c998     14 4E 85 F1 | 	sub	fp, #20
0c99c                 | LR__1000
0c99c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0c99c     08 4E 05 F1 | 	add	fp, #8
0c9a0     A7 22 02 FB | 	rdlong	local03, fp
0c9a4     08 4E 85 F1 | 	sub	fp, #8
0c9a8     1F 22 0E F2 | 	cmp	local03, #31 wz
0c9ac     14 4E 05 51 |  if_ne	add	fp, #20
0c9b0     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c9b4     14 4E 85 51 |  if_ne	sub	fp, #20
0c9b8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c9bc     08 4E 05 51 |  if_ne	add	fp, #8
0c9c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c9c4     08 4E 85 51 |  if_ne	sub	fp, #8
0c9c8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c9cc     14 4E 05 51 |  if_ne	add	fp, #20
0c9d0     14 4E 85 51 |  if_ne	sub	fp, #20
0c9d4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c9d8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c9dc     08 4E 05 A1 |  if_e	add	fp, #8
0c9e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c9e4     08 4E 85 A1 |  if_e	sub	fp, #8
0c9e8     18 00 90 AD |  if_e	jmp	#LR__1001
0c9ec     A7 22 02 FB | 	rdlong	local03, fp
0c9f0     0C 4E 05 F1 | 	add	fp, #12
0c9f4     A7 1E 02 FB | 	rdlong	local01, fp
0c9f8     0C 4E 85 F1 | 	sub	fp, #12
0c9fc     0F 23 42 F0 | 	shr	local03, local01
0ca00     A7 22 62 FC | 	wrlong	local03, fp
0ca04                 | LR__1001
0ca04     A7 12 02 F6 | 	mov	arg01, fp
0ca08     C4 C4 BF FD | 	call	#_push
0ca0c     A7 F0 03 F6 | 	mov	ptra, fp
0ca10     B2 00 A0 FD | 	call	#popregs_
0ca14                 | _do_shr_ret
0ca14     2D 00 64 FD | 	ret
0ca18                 | 
0ca18                 | ' 
0ca18                 | ' sub do_power 
0ca18                 | _do_power
0ca18     02 4A 05 F6 | 	mov	COUNT_, #2
0ca1c     A8 00 A0 FD | 	call	#pushregs_
0ca20     18 F0 07 F1 | 	add	ptra, #24
0ca24     10 C4 BF FD | 	call	#_pop
0ca28     FD 14 02 F6 | 	mov	arg02, result1
0ca2c     FE 12 02 F6 | 	mov	arg01, result2
0ca30     FF 1E 02 F6 | 	mov	local01, result3
0ca34     0C 4E 05 F1 | 	add	fp, #12
0ca38     A7 14 62 FC | 	wrlong	arg02, fp
0ca3c     04 4E 05 F1 | 	add	fp, #4
0ca40     A7 12 62 FC | 	wrlong	arg01, fp
0ca44     04 4E 05 F1 | 	add	fp, #4
0ca48     A7 1E 62 FC | 	wrlong	local01, fp
0ca4c     14 4E 85 F1 | 	sub	fp, #20
0ca50     E4 C3 BF FD | 	call	#_pop
0ca54     A7 FA 61 FC | 	wrlong	result1, fp
0ca58     04 4E 05 F1 | 	add	fp, #4
0ca5c     A7 FC 61 FC | 	wrlong	result2, fp
0ca60     04 4E 05 F1 | 	add	fp, #4
0ca64     A7 FE 61 FC | 	wrlong	result3, fp
0ca68                 | ' t2=pop()
0ca68                 | ' t1=pop()
0ca68                 | ' 
0ca68                 | ' 
0ca68                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ca68     08 4E 85 F1 | 	sub	fp, #8
0ca6c     1F FE 0D F2 | 	cmp	result3, #31 wz
0ca70     14 4E 05 51 |  if_ne	add	fp, #20
0ca74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ca78     14 4E 85 51 |  if_ne	sub	fp, #20
0ca7c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ca80     A7 18 68 AC |  if_e	wrlong	#12, fp
0ca84     08 4E 05 A1 |  if_e	add	fp, #8
0ca88     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ca8c     08 4E 85 A1 |  if_e	sub	fp, #8
0ca90     38 01 90 AD |  if_e	jmp	#LR__1015
0ca94                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ca94     08 4E 05 F1 | 	add	fp, #8
0ca98     A7 14 02 FB | 	rdlong	arg02, fp
0ca9c     08 4E 85 F1 | 	sub	fp, #8
0caa0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0caa4     28 00 90 5D |  if_ne	jmp	#LR__1010
0caa8     08 4E 05 F1 | 	add	fp, #8
0caac     A7 3C 68 FC | 	wrlong	#30, fp
0cab0     08 4E 85 F1 | 	sub	fp, #8
0cab4     A7 12 02 FB | 	rdlong	arg01, fp
0cab8     09 13 52 F6 | 	abs	arg01, arg01 wc
0cabc     1F 20 C6 C9 |  if_b	decod	local02, #31
0cac0     00 20 06 36 |  if_ae	mov	local02, #0
0cac4     74 AE B0 FD | 	call	#__system___float_fromuns
0cac8     10 FB 61 F5 | 	xor	result1, local02
0cacc     A7 FA 61 FC | 	wrlong	result1, fp
0cad0                 | LR__1010
0cad0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0cad0     08 4E 05 F1 | 	add	fp, #8
0cad4     A7 14 02 FB | 	rdlong	arg02, fp
0cad8     08 4E 85 F1 | 	sub	fp, #8
0cadc     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cae0     18 00 90 5D |  if_ne	jmp	#LR__1011
0cae4     08 4E 05 F1 | 	add	fp, #8
0cae8     A7 3C 68 FC | 	wrlong	#30, fp
0caec     08 4E 85 F1 | 	sub	fp, #8
0caf0     A7 12 02 FB | 	rdlong	arg01, fp
0caf4     44 AE B0 FD | 	call	#__system___float_fromuns
0caf8     A7 FA 61 FC | 	wrlong	result1, fp
0cafc                 | LR__1011
0cafc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0cafc     14 4E 05 F1 | 	add	fp, #20
0cb00     A7 14 02 FB | 	rdlong	arg02, fp
0cb04     14 4E 85 F1 | 	sub	fp, #20
0cb08     1C 14 0E F2 | 	cmp	arg02, #28 wz
0cb0c     34 00 90 5D |  if_ne	jmp	#LR__1012
0cb10     14 4E 05 F1 | 	add	fp, #20
0cb14     A7 3C 68 FC | 	wrlong	#30, fp
0cb18     08 4E 85 F1 | 	sub	fp, #8
0cb1c     A7 12 02 FB | 	rdlong	arg01, fp
0cb20     0C 4E 85 F1 | 	sub	fp, #12
0cb24     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb28     1F 20 C6 C9 |  if_b	decod	local02, #31
0cb2c     00 20 06 36 |  if_ae	mov	local02, #0
0cb30     08 AE B0 FD | 	call	#__system___float_fromuns
0cb34     10 FB 61 F5 | 	xor	result1, local02
0cb38     0C 4E 05 F1 | 	add	fp, #12
0cb3c     A7 FA 61 FC | 	wrlong	result1, fp
0cb40     0C 4E 85 F1 | 	sub	fp, #12
0cb44                 | LR__1012
0cb44                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0cb44     14 4E 05 F1 | 	add	fp, #20
0cb48     A7 14 02 FB | 	rdlong	arg02, fp
0cb4c     14 4E 85 F1 | 	sub	fp, #20
0cb50     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cb54     24 00 90 5D |  if_ne	jmp	#LR__1013
0cb58     14 4E 05 F1 | 	add	fp, #20
0cb5c     A7 3C 68 FC | 	wrlong	#30, fp
0cb60     08 4E 85 F1 | 	sub	fp, #8
0cb64     A7 12 02 FB | 	rdlong	arg01, fp
0cb68     0C 4E 85 F1 | 	sub	fp, #12
0cb6c     CC AD B0 FD | 	call	#__system___float_fromuns
0cb70     0C 4E 05 F1 | 	add	fp, #12
0cb74     A7 FA 61 FC | 	wrlong	result1, fp
0cb78     0C 4E 85 F1 | 	sub	fp, #12
0cb7c                 | LR__1013
0cb7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0cb7c     08 4E 05 F1 | 	add	fp, #8
0cb80     A7 14 02 FB | 	rdlong	arg02, fp
0cb84     08 4E 85 F1 | 	sub	fp, #8
0cb88     1E 14 0E F2 | 	cmp	arg02, #30 wz
0cb8c     14 4E 05 A1 |  if_e	add	fp, #20
0cb90     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cb94     14 4E 85 A1 |  if_e	sub	fp, #20
0cb98     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0cb9c     1C 00 90 5D |  if_ne	jmp	#LR__1014
0cba0     A7 12 02 FB | 	rdlong	arg01, fp
0cba4     0C 4E 05 F1 | 	add	fp, #12
0cba8     A7 14 02 FB | 	rdlong	arg02, fp
0cbac     0C 4E 85 F1 | 	sub	fp, #12
0cbb0     20 BD B0 FD | 	call	#__system____builtin_powf
0cbb4     A7 FA 61 FC | 	wrlong	result1, fp
0cbb8     10 00 90 FD | 	jmp	#LR__1015
0cbbc                 | LR__1014
0cbbc     A7 1A 68 FC | 	wrlong	#13, fp
0cbc0     08 4E 05 F1 | 	add	fp, #8
0cbc4     A7 FE 69 FC | 	wrlong	#255, fp
0cbc8     08 4E 85 F1 | 	sub	fp, #8
0cbcc                 | LR__1015
0cbcc     A7 12 02 F6 | 	mov	arg01, fp
0cbd0     FC C2 BF FD | 	call	#_push
0cbd4     A7 F0 03 F6 | 	mov	ptra, fp
0cbd8     B2 00 A0 FD | 	call	#popregs_
0cbdc                 | _do_power_ret
0cbdc     2D 00 64 FD | 	ret
0cbe0                 | 
0cbe0                 | ' 
0cbe0                 | ' 
0cbe0                 | ' sub do_eq
0cbe0                 | _do_eq
0cbe0     05 4A 05 F6 | 	mov	COUNT_, #5
0cbe4     A8 00 A0 FD | 	call	#pushregs_
0cbe8     18 F0 07 F1 | 	add	ptra, #24
0cbec     48 C2 BF FD | 	call	#_pop
0cbf0     FD 1E 02 F6 | 	mov	local01, result1
0cbf4     FE 20 02 F6 | 	mov	local02, result2
0cbf8     FF 22 02 F6 | 	mov	local03, result3
0cbfc     0C 4E 05 F1 | 	add	fp, #12
0cc00     A7 1E 62 FC | 	wrlong	local01, fp
0cc04     04 4E 05 F1 | 	add	fp, #4
0cc08     A7 20 62 FC | 	wrlong	local02, fp
0cc0c     04 4E 05 F1 | 	add	fp, #4
0cc10     A7 22 62 FC | 	wrlong	local03, fp
0cc14     14 4E 85 F1 | 	sub	fp, #20
0cc18     1C C2 BF FD | 	call	#_pop
0cc1c     FF 22 02 F6 | 	mov	local03, result3
0cc20     A7 FA 61 FC | 	wrlong	result1, fp
0cc24     04 4E 05 F1 | 	add	fp, #4
0cc28     A7 FC 61 FC | 	wrlong	result2, fp
0cc2c     04 4E 05 F1 | 	add	fp, #4
0cc30     A7 22 62 FC | 	wrlong	local03, fp
0cc34                 | ' t2=pop()
0cc34                 | ' t1=pop()
0cc34                 | ' 
0cc34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0cc34     08 4E 85 F1 | 	sub	fp, #8
0cc38     1F 22 0E F2 | 	cmp	local03, #31 wz
0cc3c     14 4E 05 A1 |  if_e	add	fp, #20
0cc40     A7 24 02 AB |  if_e	rdlong	local04, fp
0cc44     14 4E 85 A1 |  if_e	sub	fp, #20
0cc48     12 23 02 A6 |  if_e	mov	local03, local04
0cc4c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cc50     28 00 90 5D |  if_ne	jmp	#LR__1020
0cc54     00 1E 06 F6 | 	mov	local01, #0
0cc58     A7 12 02 FB | 	rdlong	arg01, fp
0cc5c     0C 4E 05 F1 | 	add	fp, #12
0cc60     A7 14 02 FB | 	rdlong	arg02, fp
0cc64     0C 4E 85 F1 | 	sub	fp, #12
0cc68     10 86 B0 FD | 	call	#__system___string_cmp
0cc6c     00 FA 0D F2 | 	cmp	result1, #0 wz
0cc70     00 1E 26 A6 |  if_e	not	local01, #0
0cc74     A7 1E 62 FC | 	wrlong	local01, fp
0cc78     04 03 90 FD | 	jmp	#LR__1030
0cc7c                 | LR__1020
0cc7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0cc7c     08 4E 05 F1 | 	add	fp, #8
0cc80     A7 1E 02 FB | 	rdlong	local01, fp
0cc84     08 4E 85 F1 | 	sub	fp, #8
0cc88     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cc8c     14 4E 05 A1 |  if_e	add	fp, #20
0cc90     A7 24 02 AB |  if_e	rdlong	local04, fp
0cc94     14 4E 85 A1 |  if_e	sub	fp, #20
0cc98     12 23 02 A6 |  if_e	mov	local03, local04
0cc9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cca0     2C 00 90 5D |  if_ne	jmp	#LR__1021
0cca4     00 1E 06 F6 | 	mov	local01, #0
0cca8     A7 12 02 FB | 	rdlong	arg01, fp
0ccac     0C 4E 05 F1 | 	add	fp, #12
0ccb0     A7 14 02 FB | 	rdlong	arg02, fp
0ccb4     0C 4E 85 F1 | 	sub	fp, #12
0ccb8     01 16 06 F6 | 	mov	arg03, #1
0ccbc     DC B3 B0 FD | 	call	#__system___float_cmp
0ccc0     00 FA 0D F2 | 	cmp	result1, #0 wz
0ccc4     00 1E 26 A6 |  if_e	not	local01, #0
0ccc8     A7 1E 62 FC | 	wrlong	local01, fp
0cccc     B0 02 90 FD | 	jmp	#LR__1030
0ccd0                 | LR__1021
0ccd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0ccd0     08 4E 05 F1 | 	add	fp, #8
0ccd4     A7 1E 02 FB | 	rdlong	local01, fp
0ccd8     08 4E 85 F1 | 	sub	fp, #8
0ccdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cce0     14 4E 05 A1 |  if_e	add	fp, #20
0cce4     A7 24 02 AB |  if_e	rdlong	local04, fp
0cce8     14 4E 85 A1 |  if_e	sub	fp, #20
0ccec     12 23 02 A6 |  if_e	mov	local03, local04
0ccf0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ccf4     48 00 90 5D |  if_ne	jmp	#LR__1022
0ccf8     00 1E 06 F6 | 	mov	local01, #0
0ccfc     A7 20 02 FB | 	rdlong	local02, fp
0cd00     0C 4E 05 F1 | 	add	fp, #12
0cd04     A7 12 02 FB | 	rdlong	arg01, fp
0cd08     0C 4E 85 F1 | 	sub	fp, #12
0cd0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0cd10     1F 26 C6 C9 |  if_b	decod	local05, #31
0cd14     00 26 06 36 |  if_ae	mov	local05, #0
0cd18     20 AC B0 FD | 	call	#__system___float_fromuns
0cd1c     13 FB 61 F5 | 	xor	result1, local05
0cd20     FD 14 02 F6 | 	mov	arg02, result1
0cd24     10 13 02 F6 | 	mov	arg01, local02
0cd28     01 16 06 F6 | 	mov	arg03, #1
0cd2c     6C B3 B0 FD | 	call	#__system___float_cmp
0cd30     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd34     00 1E 26 A6 |  if_e	not	local01, #0
0cd38     A7 1E 62 FC | 	wrlong	local01, fp
0cd3c     40 02 90 FD | 	jmp	#LR__1030
0cd40                 | LR__1022
0cd40                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0cd40     08 4E 05 F1 | 	add	fp, #8
0cd44     A7 1E 02 FB | 	rdlong	local01, fp
0cd48     08 4E 85 F1 | 	sub	fp, #8
0cd4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cd50     14 4E 05 A1 |  if_e	add	fp, #20
0cd54     A7 24 02 AB |  if_e	rdlong	local04, fp
0cd58     14 4E 85 A1 |  if_e	sub	fp, #20
0cd5c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cd60     38 00 90 5D |  if_ne	jmp	#LR__1023
0cd64     00 1E 06 F6 | 	mov	local01, #0
0cd68     A7 20 02 FB | 	rdlong	local02, fp
0cd6c     0C 4E 05 F1 | 	add	fp, #12
0cd70     A7 12 02 FB | 	rdlong	arg01, fp
0cd74     0C 4E 85 F1 | 	sub	fp, #12
0cd78     C0 AB B0 FD | 	call	#__system___float_fromuns
0cd7c     FD 14 02 F6 | 	mov	arg02, result1
0cd80     10 13 02 F6 | 	mov	arg01, local02
0cd84     01 16 06 F6 | 	mov	arg03, #1
0cd88     10 B3 B0 FD | 	call	#__system___float_cmp
0cd8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd90     00 1E 26 A6 |  if_e	not	local01, #0
0cd94     A7 1E 62 FC | 	wrlong	local01, fp
0cd98     E4 01 90 FD | 	jmp	#LR__1030
0cd9c                 | LR__1023
0cd9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0cd9c     08 4E 05 F1 | 	add	fp, #8
0cda0     A7 1E 02 FB | 	rdlong	local01, fp
0cda4     08 4E 85 F1 | 	sub	fp, #8
0cda8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cdac     14 4E 05 A1 |  if_e	add	fp, #20
0cdb0     A7 22 02 AB |  if_e	rdlong	local03, fp
0cdb4     14 4E 85 A1 |  if_e	sub	fp, #20
0cdb8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cdbc     44 00 90 5D |  if_ne	jmp	#LR__1024
0cdc0     00 1E 06 F6 | 	mov	local01, #0
0cdc4     A7 12 02 FB | 	rdlong	arg01, fp
0cdc8     09 13 52 F6 | 	abs	arg01, arg01 wc
0cdcc     1F 26 C6 C9 |  if_b	decod	local05, #31
0cdd0     00 26 06 36 |  if_ae	mov	local05, #0
0cdd4     64 AB B0 FD | 	call	#__system___float_fromuns
0cdd8     13 FB 61 F5 | 	xor	result1, local05
0cddc     FD 12 02 F6 | 	mov	arg01, result1
0cde0     0C 4E 05 F1 | 	add	fp, #12
0cde4     A7 14 02 FB | 	rdlong	arg02, fp
0cde8     0C 4E 85 F1 | 	sub	fp, #12
0cdec     01 16 06 F6 | 	mov	arg03, #1
0cdf0     A8 B2 B0 FD | 	call	#__system___float_cmp
0cdf4     00 FA 0D F2 | 	cmp	result1, #0 wz
0cdf8     00 1E 26 A6 |  if_e	not	local01, #0
0cdfc     A7 1E 62 FC | 	wrlong	local01, fp
0ce00     7C 01 90 FD | 	jmp	#LR__1030
0ce04                 | LR__1024
0ce04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0ce04     08 4E 05 F1 | 	add	fp, #8
0ce08     A7 1E 02 FB | 	rdlong	local01, fp
0ce0c     08 4E 85 F1 | 	sub	fp, #8
0ce10     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ce14     14 4E 05 A1 |  if_e	add	fp, #20
0ce18     A7 22 02 AB |  if_e	rdlong	local03, fp
0ce1c     14 4E 85 A1 |  if_e	sub	fp, #20
0ce20     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ce24     24 00 90 5D |  if_ne	jmp	#LR__1025
0ce28     00 1E 06 F6 | 	mov	local01, #0
0ce2c     A7 20 02 FB | 	rdlong	local02, fp
0ce30     0C 4E 05 F1 | 	add	fp, #12
0ce34     A7 22 02 FB | 	rdlong	local03, fp
0ce38     0C 4E 85 F1 | 	sub	fp, #12
0ce3c     11 21 0A F2 | 	cmp	local02, local03 wz
0ce40     01 1E 66 A6 |  if_e	neg	local01, #1
0ce44     A7 1E 62 FC | 	wrlong	local01, fp
0ce48     34 01 90 FD | 	jmp	#LR__1030
0ce4c                 | LR__1025
0ce4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0ce4c     08 4E 05 F1 | 	add	fp, #8
0ce50     A7 1E 02 FB | 	rdlong	local01, fp
0ce54     08 4E 85 F1 | 	sub	fp, #8
0ce58     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ce5c     14 4E 05 A1 |  if_e	add	fp, #20
0ce60     A7 22 02 AB |  if_e	rdlong	local03, fp
0ce64     14 4E 85 A1 |  if_e	sub	fp, #20
0ce68     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ce6c     24 00 90 5D |  if_ne	jmp	#LR__1026
0ce70     00 1E 06 F6 | 	mov	local01, #0
0ce74     A7 20 02 FB | 	rdlong	local02, fp
0ce78     0C 4E 05 F1 | 	add	fp, #12
0ce7c     A7 22 02 FB | 	rdlong	local03, fp
0ce80     0C 4E 85 F1 | 	sub	fp, #12
0ce84     11 21 0A F2 | 	cmp	local02, local03 wz
0ce88     01 1E 66 A6 |  if_e	neg	local01, #1
0ce8c     A7 1E 62 FC | 	wrlong	local01, fp
0ce90     EC 00 90 FD | 	jmp	#LR__1030
0ce94                 | LR__1026
0ce94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0ce94     08 4E 05 F1 | 	add	fp, #8
0ce98     A7 1E 02 FB | 	rdlong	local01, fp
0ce9c     08 4E 85 F1 | 	sub	fp, #8
0cea0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cea4     14 4E 05 A1 |  if_e	add	fp, #20
0cea8     A7 22 02 AB |  if_e	rdlong	local03, fp
0ceac     14 4E 85 A1 |  if_e	sub	fp, #20
0ceb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ceb4     34 00 90 5D |  if_ne	jmp	#LR__1027
0ceb8     00 1E 06 F6 | 	mov	local01, #0
0cebc     A7 12 02 FB | 	rdlong	arg01, fp
0cec0     78 AA B0 FD | 	call	#__system___float_fromuns
0cec4     FD 12 02 F6 | 	mov	arg01, result1
0cec8     0C 4E 05 F1 | 	add	fp, #12
0cecc     A7 14 02 FB | 	rdlong	arg02, fp
0ced0     0C 4E 85 F1 | 	sub	fp, #12
0ced4     01 16 06 F6 | 	mov	arg03, #1
0ced8     C0 B1 B0 FD | 	call	#__system___float_cmp
0cedc     00 FA 0D F2 | 	cmp	result1, #0 wz
0cee0     00 1E 26 A6 |  if_e	not	local01, #0
0cee4     A7 1E 62 FC | 	wrlong	local01, fp
0cee8     94 00 90 FD | 	jmp	#LR__1030
0ceec                 | LR__1027
0ceec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0ceec     08 4E 05 F1 | 	add	fp, #8
0cef0     A7 1E 02 FB | 	rdlong	local01, fp
0cef4     08 4E 85 F1 | 	sub	fp, #8
0cef8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cefc     14 4E 05 A1 |  if_e	add	fp, #20
0cf00     A7 22 02 AB |  if_e	rdlong	local03, fp
0cf04     14 4E 85 A1 |  if_e	sub	fp, #20
0cf08     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf0c     24 00 90 5D |  if_ne	jmp	#LR__1028
0cf10     00 1E 06 F6 | 	mov	local01, #0
0cf14     A7 20 02 FB | 	rdlong	local02, fp
0cf18     0C 4E 05 F1 | 	add	fp, #12
0cf1c     A7 22 02 FB | 	rdlong	local03, fp
0cf20     0C 4E 85 F1 | 	sub	fp, #12
0cf24     11 21 0A F2 | 	cmp	local02, local03 wz
0cf28     01 1E 66 A6 |  if_e	neg	local01, #1
0cf2c     A7 1E 62 FC | 	wrlong	local01, fp
0cf30     4C 00 90 FD | 	jmp	#LR__1030
0cf34                 | LR__1028
0cf34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0cf34     08 4E 05 F1 | 	add	fp, #8
0cf38     A7 1E 02 FB | 	rdlong	local01, fp
0cf3c     08 4E 85 F1 | 	sub	fp, #8
0cf40     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cf44     14 4E 05 A1 |  if_e	add	fp, #20
0cf48     A7 22 02 AB |  if_e	rdlong	local03, fp
0cf4c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf50     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cf54     24 00 90 5D |  if_ne	jmp	#LR__1029
0cf58     00 1E 06 F6 | 	mov	local01, #0
0cf5c     A7 20 02 FB | 	rdlong	local02, fp
0cf60     0C 4E 05 F1 | 	add	fp, #12
0cf64     A7 22 02 FB | 	rdlong	local03, fp
0cf68     0C 4E 85 F1 | 	sub	fp, #12
0cf6c     11 21 0A F2 | 	cmp	local02, local03 wz
0cf70     01 1E 66 A6 |  if_e	neg	local01, #1
0cf74     A7 1E 62 FC | 	wrlong	local01, fp
0cf78     04 00 90 FD | 	jmp	#LR__1030
0cf7c                 | LR__1029
0cf7c     A7 00 68 FC | 	wrlong	#0, fp
0cf80                 | LR__1030
0cf80     08 4E 05 F1 | 	add	fp, #8
0cf84     A7 38 68 FC | 	wrlong	#28, fp
0cf88     08 4E 85 F1 | 	sub	fp, #8
0cf8c     A7 12 02 F6 | 	mov	arg01, fp
0cf90     3C BF BF FD | 	call	#_push
0cf94     A7 F0 03 F6 | 	mov	ptra, fp
0cf98     B2 00 A0 FD | 	call	#popregs_
0cf9c                 | _do_eq_ret
0cf9c     2D 00 64 FD | 	ret
0cfa0                 | 
0cfa0                 | ' 
0cfa0                 | ' sub do_gt
0cfa0                 | _do_gt
0cfa0     05 4A 05 F6 | 	mov	COUNT_, #5
0cfa4     A8 00 A0 FD | 	call	#pushregs_
0cfa8     18 F0 07 F1 | 	add	ptra, #24
0cfac     88 BE BF FD | 	call	#_pop
0cfb0     FD 1E 02 F6 | 	mov	local01, result1
0cfb4     FE 20 02 F6 | 	mov	local02, result2
0cfb8     FF 22 02 F6 | 	mov	local03, result3
0cfbc     0C 4E 05 F1 | 	add	fp, #12
0cfc0     A7 1E 62 FC | 	wrlong	local01, fp
0cfc4     04 4E 05 F1 | 	add	fp, #4
0cfc8     A7 20 62 FC | 	wrlong	local02, fp
0cfcc     04 4E 05 F1 | 	add	fp, #4
0cfd0     A7 22 62 FC | 	wrlong	local03, fp
0cfd4     14 4E 85 F1 | 	sub	fp, #20
0cfd8     5C BE BF FD | 	call	#_pop
0cfdc     FF 22 02 F6 | 	mov	local03, result3
0cfe0     A7 FA 61 FC | 	wrlong	result1, fp
0cfe4     04 4E 05 F1 | 	add	fp, #4
0cfe8     A7 FC 61 FC | 	wrlong	result2, fp
0cfec     04 4E 05 F1 | 	add	fp, #4
0cff0     A7 22 62 FC | 	wrlong	local03, fp
0cff4                 | ' t2=pop()
0cff4                 | ' t1=pop()
0cff4                 | ' 
0cff4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0cff4     08 4E 85 F1 | 	sub	fp, #8
0cff8     1F 22 0E F2 | 	cmp	local03, #31 wz
0cffc     14 4E 05 A1 |  if_e	add	fp, #20
0d000     A7 24 02 AB |  if_e	rdlong	local04, fp
0d004     14 4E 85 A1 |  if_e	sub	fp, #20
0d008     12 23 02 A6 |  if_e	mov	local03, local04
0d00c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d010     28 00 90 5D |  if_ne	jmp	#LR__1040
0d014     00 1E 06 F6 | 	mov	local01, #0
0d018     A7 12 02 FB | 	rdlong	arg01, fp
0d01c     0C 4E 05 F1 | 	add	fp, #12
0d020     A7 14 02 FB | 	rdlong	arg02, fp
0d024     0C 4E 85 F1 | 	sub	fp, #12
0d028     50 82 B0 FD | 	call	#__system___string_cmp
0d02c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d030     00 1E 26 36 |  if_ae	not	local01, #0
0d034     A7 1E 62 FC | 	wrlong	local01, fp
0d038     04 03 90 FD | 	jmp	#LR__1050
0d03c                 | LR__1040
0d03c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0d03c     08 4E 05 F1 | 	add	fp, #8
0d040     A7 1E 02 FB | 	rdlong	local01, fp
0d044     08 4E 85 F1 | 	sub	fp, #8
0d048     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d04c     14 4E 05 A1 |  if_e	add	fp, #20
0d050     A7 24 02 AB |  if_e	rdlong	local04, fp
0d054     14 4E 85 A1 |  if_e	sub	fp, #20
0d058     12 23 02 A6 |  if_e	mov	local03, local04
0d05c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d060     2C 00 90 5D |  if_ne	jmp	#LR__1041
0d064     00 1E 06 F6 | 	mov	local01, #0
0d068     A7 12 02 FB | 	rdlong	arg01, fp
0d06c     0C 4E 05 F1 | 	add	fp, #12
0d070     A7 14 02 FB | 	rdlong	arg02, fp
0d074     0C 4E 85 F1 | 	sub	fp, #12
0d078     01 16 66 F6 | 	neg	arg03, #1
0d07c     1C B0 B0 FD | 	call	#__system___float_cmp
0d080     01 FA 55 F2 | 	cmps	result1, #1 wc
0d084     00 1E 26 36 |  if_ae	not	local01, #0
0d088     A7 1E 62 FC | 	wrlong	local01, fp
0d08c     B0 02 90 FD | 	jmp	#LR__1050
0d090                 | LR__1041
0d090                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0d090     08 4E 05 F1 | 	add	fp, #8
0d094     A7 1E 02 FB | 	rdlong	local01, fp
0d098     08 4E 85 F1 | 	sub	fp, #8
0d09c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d0a0     14 4E 05 A1 |  if_e	add	fp, #20
0d0a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d0a8     14 4E 85 A1 |  if_e	sub	fp, #20
0d0ac     12 23 02 A6 |  if_e	mov	local03, local04
0d0b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d0b4     48 00 90 5D |  if_ne	jmp	#LR__1042
0d0b8     00 1E 06 F6 | 	mov	local01, #0
0d0bc     A7 20 02 FB | 	rdlong	local02, fp
0d0c0     0C 4E 05 F1 | 	add	fp, #12
0d0c4     A7 12 02 FB | 	rdlong	arg01, fp
0d0c8     0C 4E 85 F1 | 	sub	fp, #12
0d0cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0d0d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0d0d4     00 26 06 36 |  if_ae	mov	local05, #0
0d0d8     60 A8 B0 FD | 	call	#__system___float_fromuns
0d0dc     13 FB 61 F5 | 	xor	result1, local05
0d0e0     FD 14 02 F6 | 	mov	arg02, result1
0d0e4     10 13 02 F6 | 	mov	arg01, local02
0d0e8     01 16 66 F6 | 	neg	arg03, #1
0d0ec     AC AF B0 FD | 	call	#__system___float_cmp
0d0f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d0f4     00 1E 26 36 |  if_ae	not	local01, #0
0d0f8     A7 1E 62 FC | 	wrlong	local01, fp
0d0fc     40 02 90 FD | 	jmp	#LR__1050
0d100                 | LR__1042
0d100                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0d100     08 4E 05 F1 | 	add	fp, #8
0d104     A7 1E 02 FB | 	rdlong	local01, fp
0d108     08 4E 85 F1 | 	sub	fp, #8
0d10c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d110     14 4E 05 A1 |  if_e	add	fp, #20
0d114     A7 24 02 AB |  if_e	rdlong	local04, fp
0d118     14 4E 85 A1 |  if_e	sub	fp, #20
0d11c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d120     38 00 90 5D |  if_ne	jmp	#LR__1043
0d124     00 1E 06 F6 | 	mov	local01, #0
0d128     A7 20 02 FB | 	rdlong	local02, fp
0d12c     0C 4E 05 F1 | 	add	fp, #12
0d130     A7 12 02 FB | 	rdlong	arg01, fp
0d134     0C 4E 85 F1 | 	sub	fp, #12
0d138     00 A8 B0 FD | 	call	#__system___float_fromuns
0d13c     FD 14 02 F6 | 	mov	arg02, result1
0d140     10 13 02 F6 | 	mov	arg01, local02
0d144     01 16 66 F6 | 	neg	arg03, #1
0d148     50 AF B0 FD | 	call	#__system___float_cmp
0d14c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d150     00 1E 26 36 |  if_ae	not	local01, #0
0d154     A7 1E 62 FC | 	wrlong	local01, fp
0d158     E4 01 90 FD | 	jmp	#LR__1050
0d15c                 | LR__1043
0d15c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0d15c     08 4E 05 F1 | 	add	fp, #8
0d160     A7 1E 02 FB | 	rdlong	local01, fp
0d164     08 4E 85 F1 | 	sub	fp, #8
0d168     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d16c     14 4E 05 A1 |  if_e	add	fp, #20
0d170     A7 22 02 AB |  if_e	rdlong	local03, fp
0d174     14 4E 85 A1 |  if_e	sub	fp, #20
0d178     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d17c     44 00 90 5D |  if_ne	jmp	#LR__1044
0d180     00 1E 06 F6 | 	mov	local01, #0
0d184     A7 12 02 FB | 	rdlong	arg01, fp
0d188     09 13 52 F6 | 	abs	arg01, arg01 wc
0d18c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d190     00 26 06 36 |  if_ae	mov	local05, #0
0d194     A4 A7 B0 FD | 	call	#__system___float_fromuns
0d198     13 FB 61 F5 | 	xor	result1, local05
0d19c     FD 12 02 F6 | 	mov	arg01, result1
0d1a0     0C 4E 05 F1 | 	add	fp, #12
0d1a4     A7 14 02 FB | 	rdlong	arg02, fp
0d1a8     0C 4E 85 F1 | 	sub	fp, #12
0d1ac     01 16 66 F6 | 	neg	arg03, #1
0d1b0     E8 AE B0 FD | 	call	#__system___float_cmp
0d1b4     01 FA 55 F2 | 	cmps	result1, #1 wc
0d1b8     00 1E 26 36 |  if_ae	not	local01, #0
0d1bc     A7 1E 62 FC | 	wrlong	local01, fp
0d1c0     7C 01 90 FD | 	jmp	#LR__1050
0d1c4                 | LR__1044
0d1c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0d1c4     08 4E 05 F1 | 	add	fp, #8
0d1c8     A7 1E 02 FB | 	rdlong	local01, fp
0d1cc     08 4E 85 F1 | 	sub	fp, #8
0d1d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d1d4     14 4E 05 A1 |  if_e	add	fp, #20
0d1d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d1dc     14 4E 85 A1 |  if_e	sub	fp, #20
0d1e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d1e4     24 00 90 5D |  if_ne	jmp	#LR__1045
0d1e8     00 1E 06 F6 | 	mov	local01, #0
0d1ec     A7 20 02 FB | 	rdlong	local02, fp
0d1f0     0C 4E 05 F1 | 	add	fp, #12
0d1f4     A7 22 02 FB | 	rdlong	local03, fp
0d1f8     0C 4E 85 F1 | 	sub	fp, #12
0d1fc     11 21 5A F2 | 	cmps	local02, local03 wcz
0d200     01 1E 66 16 |  if_a	neg	local01, #1
0d204     A7 1E 62 FC | 	wrlong	local01, fp
0d208     34 01 90 FD | 	jmp	#LR__1050
0d20c                 | LR__1045
0d20c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0d20c     08 4E 05 F1 | 	add	fp, #8
0d210     A7 1E 02 FB | 	rdlong	local01, fp
0d214     08 4E 85 F1 | 	sub	fp, #8
0d218     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d21c     14 4E 05 A1 |  if_e	add	fp, #20
0d220     A7 22 02 AB |  if_e	rdlong	local03, fp
0d224     14 4E 85 A1 |  if_e	sub	fp, #20
0d228     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d22c     24 00 90 5D |  if_ne	jmp	#LR__1046
0d230     00 1E 06 F6 | 	mov	local01, #0
0d234     A7 20 02 FB | 	rdlong	local02, fp
0d238     0C 4E 05 F1 | 	add	fp, #12
0d23c     A7 22 02 FB | 	rdlong	local03, fp
0d240     0C 4E 85 F1 | 	sub	fp, #12
0d244     11 21 5A F2 | 	cmps	local02, local03 wcz
0d248     01 1E 66 16 |  if_a	neg	local01, #1
0d24c     A7 1E 62 FC | 	wrlong	local01, fp
0d250     EC 00 90 FD | 	jmp	#LR__1050
0d254                 | LR__1046
0d254                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0d254     08 4E 05 F1 | 	add	fp, #8
0d258     A7 1E 02 FB | 	rdlong	local01, fp
0d25c     08 4E 85 F1 | 	sub	fp, #8
0d260     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d264     14 4E 05 A1 |  if_e	add	fp, #20
0d268     A7 22 02 AB |  if_e	rdlong	local03, fp
0d26c     14 4E 85 A1 |  if_e	sub	fp, #20
0d270     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d274     34 00 90 5D |  if_ne	jmp	#LR__1047
0d278     00 1E 06 F6 | 	mov	local01, #0
0d27c     A7 12 02 FB | 	rdlong	arg01, fp
0d280     B8 A6 B0 FD | 	call	#__system___float_fromuns
0d284     FD 12 02 F6 | 	mov	arg01, result1
0d288     0C 4E 05 F1 | 	add	fp, #12
0d28c     A7 14 02 FB | 	rdlong	arg02, fp
0d290     0C 4E 85 F1 | 	sub	fp, #12
0d294     01 16 66 F6 | 	neg	arg03, #1
0d298     00 AE B0 FD | 	call	#__system___float_cmp
0d29c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d2a0     00 1E 26 36 |  if_ae	not	local01, #0
0d2a4     A7 1E 62 FC | 	wrlong	local01, fp
0d2a8     94 00 90 FD | 	jmp	#LR__1050
0d2ac                 | LR__1047
0d2ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0d2ac     08 4E 05 F1 | 	add	fp, #8
0d2b0     A7 1E 02 FB | 	rdlong	local01, fp
0d2b4     08 4E 85 F1 | 	sub	fp, #8
0d2b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d2bc     14 4E 05 A1 |  if_e	add	fp, #20
0d2c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d2c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d2c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d2cc     24 00 90 5D |  if_ne	jmp	#LR__1048
0d2d0     00 1E 06 F6 | 	mov	local01, #0
0d2d4     A7 20 02 FB | 	rdlong	local02, fp
0d2d8     0C 4E 05 F1 | 	add	fp, #12
0d2dc     A7 22 02 FB | 	rdlong	local03, fp
0d2e0     0C 4E 85 F1 | 	sub	fp, #12
0d2e4     11 21 5A F2 | 	cmps	local02, local03 wcz
0d2e8     01 1E 66 16 |  if_a	neg	local01, #1
0d2ec     A7 1E 62 FC | 	wrlong	local01, fp
0d2f0     4C 00 90 FD | 	jmp	#LR__1050
0d2f4                 | LR__1048
0d2f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0d2f4     08 4E 05 F1 | 	add	fp, #8
0d2f8     A7 1E 02 FB | 	rdlong	local01, fp
0d2fc     08 4E 85 F1 | 	sub	fp, #8
0d300     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d304     14 4E 05 A1 |  if_e	add	fp, #20
0d308     A7 22 02 AB |  if_e	rdlong	local03, fp
0d30c     14 4E 85 A1 |  if_e	sub	fp, #20
0d310     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d314     24 00 90 5D |  if_ne	jmp	#LR__1049
0d318     00 1E 06 F6 | 	mov	local01, #0
0d31c     A7 20 02 FB | 	rdlong	local02, fp
0d320     0C 4E 05 F1 | 	add	fp, #12
0d324     A7 22 02 FB | 	rdlong	local03, fp
0d328     0C 4E 85 F1 | 	sub	fp, #12
0d32c     11 21 1A F2 | 	cmp	local02, local03 wcz
0d330     01 1E 66 16 |  if_a	neg	local01, #1
0d334     A7 1E 62 FC | 	wrlong	local01, fp
0d338     04 00 90 FD | 	jmp	#LR__1050
0d33c                 | LR__1049
0d33c     A7 00 68 FC | 	wrlong	#0, fp
0d340                 | LR__1050
0d340     08 4E 05 F1 | 	add	fp, #8
0d344     A7 38 68 FC | 	wrlong	#28, fp
0d348     08 4E 85 F1 | 	sub	fp, #8
0d34c     A7 12 02 F6 | 	mov	arg01, fp
0d350     7C BB BF FD | 	call	#_push
0d354     A7 F0 03 F6 | 	mov	ptra, fp
0d358     B2 00 A0 FD | 	call	#popregs_
0d35c                 | _do_gt_ret
0d35c     2D 00 64 FD | 	ret
0d360                 | 
0d360                 | ' 
0d360                 | ' sub do_lt
0d360                 | _do_lt
0d360     05 4A 05 F6 | 	mov	COUNT_, #5
0d364     A8 00 A0 FD | 	call	#pushregs_
0d368     18 F0 07 F1 | 	add	ptra, #24
0d36c     C8 BA BF FD | 	call	#_pop
0d370     FD 1E 02 F6 | 	mov	local01, result1
0d374     FE 20 02 F6 | 	mov	local02, result2
0d378     FF 22 02 F6 | 	mov	local03, result3
0d37c     0C 4E 05 F1 | 	add	fp, #12
0d380     A7 1E 62 FC | 	wrlong	local01, fp
0d384     04 4E 05 F1 | 	add	fp, #4
0d388     A7 20 62 FC | 	wrlong	local02, fp
0d38c     04 4E 05 F1 | 	add	fp, #4
0d390     A7 22 62 FC | 	wrlong	local03, fp
0d394     14 4E 85 F1 | 	sub	fp, #20
0d398     9C BA BF FD | 	call	#_pop
0d39c     FF 22 02 F6 | 	mov	local03, result3
0d3a0     A7 FA 61 FC | 	wrlong	result1, fp
0d3a4     04 4E 05 F1 | 	add	fp, #4
0d3a8     A7 FC 61 FC | 	wrlong	result2, fp
0d3ac     04 4E 05 F1 | 	add	fp, #4
0d3b0     A7 22 62 FC | 	wrlong	local03, fp
0d3b4                 | ' t2=pop()
0d3b4                 | ' t1=pop()
0d3b4                 | ' 
0d3b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0d3b4     08 4E 85 F1 | 	sub	fp, #8
0d3b8     1F 22 0E F2 | 	cmp	local03, #31 wz
0d3bc     14 4E 05 A1 |  if_e	add	fp, #20
0d3c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d3c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d3c8     12 23 02 A6 |  if_e	mov	local03, local04
0d3cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d3d0     28 00 90 5D |  if_ne	jmp	#LR__1060
0d3d4     00 1E 06 F6 | 	mov	local01, #0
0d3d8     A7 12 02 FB | 	rdlong	arg01, fp
0d3dc     0C 4E 05 F1 | 	add	fp, #12
0d3e0     A7 14 02 FB | 	rdlong	arg02, fp
0d3e4     0C 4E 85 F1 | 	sub	fp, #12
0d3e8     90 7E B0 FD | 	call	#__system___string_cmp
0d3ec     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3f0     00 1E 26 C6 |  if_b	not	local01, #0
0d3f4     A7 1E 62 FC | 	wrlong	local01, fp
0d3f8     F4 02 90 FD | 	jmp	#LR__1070
0d3fc                 | LR__1060
0d3fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0d3fc     08 4E 05 F1 | 	add	fp, #8
0d400     A7 1E 02 FB | 	rdlong	local01, fp
0d404     08 4E 85 F1 | 	sub	fp, #8
0d408     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d40c     14 4E 05 A1 |  if_e	add	fp, #20
0d410     A7 24 02 AB |  if_e	rdlong	local04, fp
0d414     14 4E 85 A1 |  if_e	sub	fp, #20
0d418     12 23 02 A6 |  if_e	mov	local03, local04
0d41c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d420     2C 00 90 5D |  if_ne	jmp	#LR__1061
0d424     00 1E 06 F6 | 	mov	local01, #0
0d428     A7 12 02 FB | 	rdlong	arg01, fp
0d42c     0C 4E 05 F1 | 	add	fp, #12
0d430     A7 14 02 FB | 	rdlong	arg02, fp
0d434     0C 4E 85 F1 | 	sub	fp, #12
0d438     01 16 06 F6 | 	mov	arg03, #1
0d43c     5C AC B0 FD | 	call	#__system___float_cmp
0d440     00 FA 55 F2 | 	cmps	result1, #0 wc
0d444     00 1E 26 C6 |  if_b	not	local01, #0
0d448     A7 1E 62 FC | 	wrlong	local01, fp
0d44c     A0 02 90 FD | 	jmp	#LR__1070
0d450                 | LR__1061
0d450                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0d450     08 4E 05 F1 | 	add	fp, #8
0d454     A7 1E 02 FB | 	rdlong	local01, fp
0d458     08 4E 85 F1 | 	sub	fp, #8
0d45c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d460     14 4E 05 A1 |  if_e	add	fp, #20
0d464     A7 24 02 AB |  if_e	rdlong	local04, fp
0d468     14 4E 85 A1 |  if_e	sub	fp, #20
0d46c     12 23 02 A6 |  if_e	mov	local03, local04
0d470     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d474     48 00 90 5D |  if_ne	jmp	#LR__1062
0d478     00 1E 06 F6 | 	mov	local01, #0
0d47c     A7 20 02 FB | 	rdlong	local02, fp
0d480     0C 4E 05 F1 | 	add	fp, #12
0d484     A7 12 02 FB | 	rdlong	arg01, fp
0d488     0C 4E 85 F1 | 	sub	fp, #12
0d48c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d490     1F 26 C6 C9 |  if_b	decod	local05, #31
0d494     00 26 06 36 |  if_ae	mov	local05, #0
0d498     A0 A4 B0 FD | 	call	#__system___float_fromuns
0d49c     13 FB 61 F5 | 	xor	result1, local05
0d4a0     FD 14 02 F6 | 	mov	arg02, result1
0d4a4     10 13 02 F6 | 	mov	arg01, local02
0d4a8     01 16 06 F6 | 	mov	arg03, #1
0d4ac     EC AB B0 FD | 	call	#__system___float_cmp
0d4b0     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4b4     00 1E 26 C6 |  if_b	not	local01, #0
0d4b8     A7 1E 62 FC | 	wrlong	local01, fp
0d4bc     30 02 90 FD | 	jmp	#LR__1070
0d4c0                 | LR__1062
0d4c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0d4c0     08 4E 05 F1 | 	add	fp, #8
0d4c4     A7 1E 02 FB | 	rdlong	local01, fp
0d4c8     08 4E 85 F1 | 	sub	fp, #8
0d4cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d4d0     14 4E 05 A1 |  if_e	add	fp, #20
0d4d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d4d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d4dc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d4e0     38 00 90 5D |  if_ne	jmp	#LR__1063
0d4e4     00 1E 06 F6 | 	mov	local01, #0
0d4e8     A7 20 02 FB | 	rdlong	local02, fp
0d4ec     0C 4E 05 F1 | 	add	fp, #12
0d4f0     A7 12 02 FB | 	rdlong	arg01, fp
0d4f4     0C 4E 85 F1 | 	sub	fp, #12
0d4f8     40 A4 B0 FD | 	call	#__system___float_fromuns
0d4fc     FD 14 02 F6 | 	mov	arg02, result1
0d500     10 13 02 F6 | 	mov	arg01, local02
0d504     01 16 06 F6 | 	mov	arg03, #1
0d508     90 AB B0 FD | 	call	#__system___float_cmp
0d50c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d510     00 1E 26 C6 |  if_b	not	local01, #0
0d514     A7 1E 62 FC | 	wrlong	local01, fp
0d518     D4 01 90 FD | 	jmp	#LR__1070
0d51c                 | LR__1063
0d51c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0d51c     08 4E 05 F1 | 	add	fp, #8
0d520     A7 1E 02 FB | 	rdlong	local01, fp
0d524     08 4E 85 F1 | 	sub	fp, #8
0d528     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d52c     14 4E 05 A1 |  if_e	add	fp, #20
0d530     A7 22 02 AB |  if_e	rdlong	local03, fp
0d534     14 4E 85 A1 |  if_e	sub	fp, #20
0d538     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d53c     44 00 90 5D |  if_ne	jmp	#LR__1064
0d540     00 1E 06 F6 | 	mov	local01, #0
0d544     A7 12 02 FB | 	rdlong	arg01, fp
0d548     09 13 52 F6 | 	abs	arg01, arg01 wc
0d54c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d550     00 26 06 36 |  if_ae	mov	local05, #0
0d554     E4 A3 B0 FD | 	call	#__system___float_fromuns
0d558     13 FB 61 F5 | 	xor	result1, local05
0d55c     FD 12 02 F6 | 	mov	arg01, result1
0d560     0C 4E 05 F1 | 	add	fp, #12
0d564     A7 14 02 FB | 	rdlong	arg02, fp
0d568     0C 4E 85 F1 | 	sub	fp, #12
0d56c     01 16 06 F6 | 	mov	arg03, #1
0d570     28 AB B0 FD | 	call	#__system___float_cmp
0d574     00 FA 55 F2 | 	cmps	result1, #0 wc
0d578     00 1E 26 C6 |  if_b	not	local01, #0
0d57c     A7 1E 62 FC | 	wrlong	local01, fp
0d580     6C 01 90 FD | 	jmp	#LR__1070
0d584                 | LR__1064
0d584                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0d584     08 4E 05 F1 | 	add	fp, #8
0d588     A7 1E 02 FB | 	rdlong	local01, fp
0d58c     08 4E 85 F1 | 	sub	fp, #8
0d590     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d594     14 4E 05 A1 |  if_e	add	fp, #20
0d598     A7 22 02 AB |  if_e	rdlong	local03, fp
0d59c     14 4E 85 A1 |  if_e	sub	fp, #20
0d5a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d5a4     20 00 90 5D |  if_ne	jmp	#LR__1065
0d5a8     A7 20 02 FB | 	rdlong	local02, fp
0d5ac     0C 4E 05 F1 | 	add	fp, #12
0d5b0     A7 22 02 FB | 	rdlong	local03, fp
0d5b4     0C 4E 85 F1 | 	sub	fp, #12
0d5b8     11 21 52 F2 | 	cmps	local02, local03 wc
0d5bc     0F 1F A2 F1 | 	subx	local01, local01
0d5c0     A7 1E 62 FC | 	wrlong	local01, fp
0d5c4     28 01 90 FD | 	jmp	#LR__1070
0d5c8                 | LR__1065
0d5c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0d5c8     08 4E 05 F1 | 	add	fp, #8
0d5cc     A7 1E 02 FB | 	rdlong	local01, fp
0d5d0     08 4E 85 F1 | 	sub	fp, #8
0d5d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d5d8     14 4E 05 A1 |  if_e	add	fp, #20
0d5dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d5e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d5e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d5e8     20 00 90 5D |  if_ne	jmp	#LR__1066
0d5ec     A7 20 02 FB | 	rdlong	local02, fp
0d5f0     0C 4E 05 F1 | 	add	fp, #12
0d5f4     A7 22 02 FB | 	rdlong	local03, fp
0d5f8     0C 4E 85 F1 | 	sub	fp, #12
0d5fc     11 21 52 F2 | 	cmps	local02, local03 wc
0d600     0F 1F A2 F1 | 	subx	local01, local01
0d604     A7 1E 62 FC | 	wrlong	local01, fp
0d608     E4 00 90 FD | 	jmp	#LR__1070
0d60c                 | LR__1066
0d60c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0d60c     08 4E 05 F1 | 	add	fp, #8
0d610     A7 1E 02 FB | 	rdlong	local01, fp
0d614     08 4E 85 F1 | 	sub	fp, #8
0d618     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d61c     14 4E 05 A1 |  if_e	add	fp, #20
0d620     A7 22 02 AB |  if_e	rdlong	local03, fp
0d624     14 4E 85 A1 |  if_e	sub	fp, #20
0d628     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d62c     34 00 90 5D |  if_ne	jmp	#LR__1067
0d630     00 1E 06 F6 | 	mov	local01, #0
0d634     A7 12 02 FB | 	rdlong	arg01, fp
0d638     00 A3 B0 FD | 	call	#__system___float_fromuns
0d63c     FD 12 02 F6 | 	mov	arg01, result1
0d640     0C 4E 05 F1 | 	add	fp, #12
0d644     A7 14 02 FB | 	rdlong	arg02, fp
0d648     0C 4E 85 F1 | 	sub	fp, #12
0d64c     01 16 06 F6 | 	mov	arg03, #1
0d650     48 AA B0 FD | 	call	#__system___float_cmp
0d654     00 FA 55 F2 | 	cmps	result1, #0 wc
0d658     00 1E 26 C6 |  if_b	not	local01, #0
0d65c     A7 1E 62 FC | 	wrlong	local01, fp
0d660     8C 00 90 FD | 	jmp	#LR__1070
0d664                 | LR__1067
0d664                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d664     08 4E 05 F1 | 	add	fp, #8
0d668     A7 1E 02 FB | 	rdlong	local01, fp
0d66c     08 4E 85 F1 | 	sub	fp, #8
0d670     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d674     14 4E 05 A1 |  if_e	add	fp, #20
0d678     A7 22 02 AB |  if_e	rdlong	local03, fp
0d67c     14 4E 85 A1 |  if_e	sub	fp, #20
0d680     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d684     20 00 90 5D |  if_ne	jmp	#LR__1068
0d688     A7 20 02 FB | 	rdlong	local02, fp
0d68c     0C 4E 05 F1 | 	add	fp, #12
0d690     A7 22 02 FB | 	rdlong	local03, fp
0d694     0C 4E 85 F1 | 	sub	fp, #12
0d698     11 21 52 F2 | 	cmps	local02, local03 wc
0d69c     0F 1F A2 F1 | 	subx	local01, local01
0d6a0     A7 1E 62 FC | 	wrlong	local01, fp
0d6a4     48 00 90 FD | 	jmp	#LR__1070
0d6a8                 | LR__1068
0d6a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d6a8     08 4E 05 F1 | 	add	fp, #8
0d6ac     A7 1E 02 FB | 	rdlong	local01, fp
0d6b0     08 4E 85 F1 | 	sub	fp, #8
0d6b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6b8     14 4E 05 A1 |  if_e	add	fp, #20
0d6bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6c0     14 4E 85 A1 |  if_e	sub	fp, #20
0d6c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d6c8     20 00 90 5D |  if_ne	jmp	#LR__1069
0d6cc     A7 20 02 FB | 	rdlong	local02, fp
0d6d0     0C 4E 05 F1 | 	add	fp, #12
0d6d4     A7 22 02 FB | 	rdlong	local03, fp
0d6d8     0C 4E 85 F1 | 	sub	fp, #12
0d6dc     11 21 12 F2 | 	cmp	local02, local03 wc
0d6e0     0F 1F A2 F1 | 	subx	local01, local01
0d6e4     A7 1E 62 FC | 	wrlong	local01, fp
0d6e8     04 00 90 FD | 	jmp	#LR__1070
0d6ec                 | LR__1069
0d6ec     A7 00 68 FC | 	wrlong	#0, fp
0d6f0                 | LR__1070
0d6f0     08 4E 05 F1 | 	add	fp, #8
0d6f4     A7 38 68 FC | 	wrlong	#28, fp
0d6f8     08 4E 85 F1 | 	sub	fp, #8
0d6fc     A7 12 02 F6 | 	mov	arg01, fp
0d700     CC B7 BF FD | 	call	#_push
0d704     A7 F0 03 F6 | 	mov	ptra, fp
0d708     B2 00 A0 FD | 	call	#popregs_
0d70c                 | _do_lt_ret
0d70c     2D 00 64 FD | 	ret
0d710                 | 
0d710                 | ' 
0d710                 | ' sub do_ge
0d710                 | _do_ge
0d710     05 4A 05 F6 | 	mov	COUNT_, #5
0d714     A8 00 A0 FD | 	call	#pushregs_
0d718     18 F0 07 F1 | 	add	ptra, #24
0d71c     18 B7 BF FD | 	call	#_pop
0d720     FD 1E 02 F6 | 	mov	local01, result1
0d724     FE 20 02 F6 | 	mov	local02, result2
0d728     FF 22 02 F6 | 	mov	local03, result3
0d72c     0C 4E 05 F1 | 	add	fp, #12
0d730     A7 1E 62 FC | 	wrlong	local01, fp
0d734     04 4E 05 F1 | 	add	fp, #4
0d738     A7 20 62 FC | 	wrlong	local02, fp
0d73c     04 4E 05 F1 | 	add	fp, #4
0d740     A7 22 62 FC | 	wrlong	local03, fp
0d744     14 4E 85 F1 | 	sub	fp, #20
0d748     EC B6 BF FD | 	call	#_pop
0d74c     FF 22 02 F6 | 	mov	local03, result3
0d750     A7 FA 61 FC | 	wrlong	result1, fp
0d754     04 4E 05 F1 | 	add	fp, #4
0d758     A7 FC 61 FC | 	wrlong	result2, fp
0d75c     04 4E 05 F1 | 	add	fp, #4
0d760     A7 22 62 FC | 	wrlong	local03, fp
0d764                 | ' t2=pop()
0d764                 | ' t1=pop()
0d764                 | ' 
0d764                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0d764     08 4E 85 F1 | 	sub	fp, #8
0d768     1F 22 0E F2 | 	cmp	local03, #31 wz
0d76c     14 4E 05 A1 |  if_e	add	fp, #20
0d770     A7 24 02 AB |  if_e	rdlong	local04, fp
0d774     14 4E 85 A1 |  if_e	sub	fp, #20
0d778     12 23 02 A6 |  if_e	mov	local03, local04
0d77c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d780     28 00 90 5D |  if_ne	jmp	#LR__1080
0d784     00 1E 06 F6 | 	mov	local01, #0
0d788     A7 12 02 FB | 	rdlong	arg01, fp
0d78c     0C 4E 05 F1 | 	add	fp, #12
0d790     A7 14 02 FB | 	rdlong	arg02, fp
0d794     0C 4E 85 F1 | 	sub	fp, #12
0d798     E0 7A B0 FD | 	call	#__system___string_cmp
0d79c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7a0     00 1E 26 36 |  if_ae	not	local01, #0
0d7a4     A7 1E 62 FC | 	wrlong	local01, fp
0d7a8     04 03 90 FD | 	jmp	#LR__1090
0d7ac                 | LR__1080
0d7ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0d7ac     08 4E 05 F1 | 	add	fp, #8
0d7b0     A7 1E 02 FB | 	rdlong	local01, fp
0d7b4     08 4E 85 F1 | 	sub	fp, #8
0d7b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d7bc     14 4E 05 A1 |  if_e	add	fp, #20
0d7c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d7c8     12 23 02 A6 |  if_e	mov	local03, local04
0d7cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d7d0     2C 00 90 5D |  if_ne	jmp	#LR__1081
0d7d4     00 1E 06 F6 | 	mov	local01, #0
0d7d8     A7 12 02 FB | 	rdlong	arg01, fp
0d7dc     0C 4E 05 F1 | 	add	fp, #12
0d7e0     A7 14 02 FB | 	rdlong	arg02, fp
0d7e4     0C 4E 85 F1 | 	sub	fp, #12
0d7e8     01 16 66 F6 | 	neg	arg03, #1
0d7ec     AC A8 B0 FD | 	call	#__system___float_cmp
0d7f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7f4     00 1E 26 36 |  if_ae	not	local01, #0
0d7f8     A7 1E 62 FC | 	wrlong	local01, fp
0d7fc     B0 02 90 FD | 	jmp	#LR__1090
0d800                 | LR__1081
0d800                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0d800     08 4E 05 F1 | 	add	fp, #8
0d804     A7 1E 02 FB | 	rdlong	local01, fp
0d808     08 4E 85 F1 | 	sub	fp, #8
0d80c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d810     14 4E 05 A1 |  if_e	add	fp, #20
0d814     A7 24 02 AB |  if_e	rdlong	local04, fp
0d818     14 4E 85 A1 |  if_e	sub	fp, #20
0d81c     12 23 02 A6 |  if_e	mov	local03, local04
0d820     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d824     48 00 90 5D |  if_ne	jmp	#LR__1082
0d828     00 1E 06 F6 | 	mov	local01, #0
0d82c     A7 20 02 FB | 	rdlong	local02, fp
0d830     0C 4E 05 F1 | 	add	fp, #12
0d834     A7 12 02 FB | 	rdlong	arg01, fp
0d838     0C 4E 85 F1 | 	sub	fp, #12
0d83c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d840     1F 26 C6 C9 |  if_b	decod	local05, #31
0d844     00 26 06 36 |  if_ae	mov	local05, #0
0d848     F0 A0 B0 FD | 	call	#__system___float_fromuns
0d84c     13 FB 61 F5 | 	xor	result1, local05
0d850     FD 14 02 F6 | 	mov	arg02, result1
0d854     10 13 02 F6 | 	mov	arg01, local02
0d858     01 16 66 F6 | 	neg	arg03, #1
0d85c     3C A8 B0 FD | 	call	#__system___float_cmp
0d860     00 FA 55 F2 | 	cmps	result1, #0 wc
0d864     00 1E 26 36 |  if_ae	not	local01, #0
0d868     A7 1E 62 FC | 	wrlong	local01, fp
0d86c     40 02 90 FD | 	jmp	#LR__1090
0d870                 | LR__1082
0d870                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0d870     08 4E 05 F1 | 	add	fp, #8
0d874     A7 1E 02 FB | 	rdlong	local01, fp
0d878     08 4E 85 F1 | 	sub	fp, #8
0d87c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d880     14 4E 05 A1 |  if_e	add	fp, #20
0d884     A7 24 02 AB |  if_e	rdlong	local04, fp
0d888     14 4E 85 A1 |  if_e	sub	fp, #20
0d88c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d890     38 00 90 5D |  if_ne	jmp	#LR__1083
0d894     00 1E 06 F6 | 	mov	local01, #0
0d898     A7 20 02 FB | 	rdlong	local02, fp
0d89c     0C 4E 05 F1 | 	add	fp, #12
0d8a0     A7 12 02 FB | 	rdlong	arg01, fp
0d8a4     0C 4E 85 F1 | 	sub	fp, #12
0d8a8     90 A0 B0 FD | 	call	#__system___float_fromuns
0d8ac     FD 14 02 F6 | 	mov	arg02, result1
0d8b0     10 13 02 F6 | 	mov	arg01, local02
0d8b4     01 16 66 F6 | 	neg	arg03, #1
0d8b8     E0 A7 B0 FD | 	call	#__system___float_cmp
0d8bc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d8c0     00 1E 26 36 |  if_ae	not	local01, #0
0d8c4     A7 1E 62 FC | 	wrlong	local01, fp
0d8c8     E4 01 90 FD | 	jmp	#LR__1090
0d8cc                 | LR__1083
0d8cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0d8cc     08 4E 05 F1 | 	add	fp, #8
0d8d0     A7 1E 02 FB | 	rdlong	local01, fp
0d8d4     08 4E 85 F1 | 	sub	fp, #8
0d8d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d8dc     14 4E 05 A1 |  if_e	add	fp, #20
0d8e0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d8e4     14 4E 85 A1 |  if_e	sub	fp, #20
0d8e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d8ec     44 00 90 5D |  if_ne	jmp	#LR__1084
0d8f0     00 1E 06 F6 | 	mov	local01, #0
0d8f4     A7 12 02 FB | 	rdlong	arg01, fp
0d8f8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d8fc     1F 26 C6 C9 |  if_b	decod	local05, #31
0d900     00 26 06 36 |  if_ae	mov	local05, #0
0d904     34 A0 B0 FD | 	call	#__system___float_fromuns
0d908     13 FB 61 F5 | 	xor	result1, local05
0d90c     FD 12 02 F6 | 	mov	arg01, result1
0d910     0C 4E 05 F1 | 	add	fp, #12
0d914     A7 14 02 FB | 	rdlong	arg02, fp
0d918     0C 4E 85 F1 | 	sub	fp, #12
0d91c     01 16 66 F6 | 	neg	arg03, #1
0d920     78 A7 B0 FD | 	call	#__system___float_cmp
0d924     00 FA 55 F2 | 	cmps	result1, #0 wc
0d928     00 1E 26 36 |  if_ae	not	local01, #0
0d92c     A7 1E 62 FC | 	wrlong	local01, fp
0d930     7C 01 90 FD | 	jmp	#LR__1090
0d934                 | LR__1084
0d934                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0d934     08 4E 05 F1 | 	add	fp, #8
0d938     A7 1E 02 FB | 	rdlong	local01, fp
0d93c     08 4E 85 F1 | 	sub	fp, #8
0d940     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d944     14 4E 05 A1 |  if_e	add	fp, #20
0d948     A7 22 02 AB |  if_e	rdlong	local03, fp
0d94c     14 4E 85 A1 |  if_e	sub	fp, #20
0d950     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d954     24 00 90 5D |  if_ne	jmp	#LR__1085
0d958     00 1E 06 F6 | 	mov	local01, #0
0d95c     A7 20 02 FB | 	rdlong	local02, fp
0d960     0C 4E 05 F1 | 	add	fp, #12
0d964     A7 22 02 FB | 	rdlong	local03, fp
0d968     0C 4E 85 F1 | 	sub	fp, #12
0d96c     11 21 52 F2 | 	cmps	local02, local03 wc
0d970     01 1E 66 36 |  if_ae	neg	local01, #1
0d974     A7 1E 62 FC | 	wrlong	local01, fp
0d978     34 01 90 FD | 	jmp	#LR__1090
0d97c                 | LR__1085
0d97c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0d97c     08 4E 05 F1 | 	add	fp, #8
0d980     A7 1E 02 FB | 	rdlong	local01, fp
0d984     08 4E 85 F1 | 	sub	fp, #8
0d988     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d98c     14 4E 05 A1 |  if_e	add	fp, #20
0d990     A7 22 02 AB |  if_e	rdlong	local03, fp
0d994     14 4E 85 A1 |  if_e	sub	fp, #20
0d998     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d99c     24 00 90 5D |  if_ne	jmp	#LR__1086
0d9a0     00 1E 06 F6 | 	mov	local01, #0
0d9a4     A7 20 02 FB | 	rdlong	local02, fp
0d9a8     0C 4E 05 F1 | 	add	fp, #12
0d9ac     A7 22 02 FB | 	rdlong	local03, fp
0d9b0     0C 4E 85 F1 | 	sub	fp, #12
0d9b4     11 21 52 F2 | 	cmps	local02, local03 wc
0d9b8     01 1E 66 36 |  if_ae	neg	local01, #1
0d9bc     A7 1E 62 FC | 	wrlong	local01, fp
0d9c0     EC 00 90 FD | 	jmp	#LR__1090
0d9c4                 | LR__1086
0d9c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 1E 02 FB | 	rdlong	local01, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d9d4     14 4E 05 A1 |  if_e	add	fp, #20
0d9d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9dc     14 4E 85 A1 |  if_e	sub	fp, #20
0d9e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d9e4     34 00 90 5D |  if_ne	jmp	#LR__1087
0d9e8     00 1E 06 F6 | 	mov	local01, #0
0d9ec     A7 12 02 FB | 	rdlong	arg01, fp
0d9f0     48 9F B0 FD | 	call	#__system___float_fromuns
0d9f4     FD 12 02 F6 | 	mov	arg01, result1
0d9f8     0C 4E 05 F1 | 	add	fp, #12
0d9fc     A7 14 02 FB | 	rdlong	arg02, fp
0da00     0C 4E 85 F1 | 	sub	fp, #12
0da04     01 16 66 F6 | 	neg	arg03, #1
0da08     90 A6 B0 FD | 	call	#__system___float_cmp
0da0c     00 FA 55 F2 | 	cmps	result1, #0 wc
0da10     00 1E 26 36 |  if_ae	not	local01, #0
0da14     A7 1E 62 FC | 	wrlong	local01, fp
0da18     94 00 90 FD | 	jmp	#LR__1090
0da1c                 | LR__1087
0da1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0da1c     08 4E 05 F1 | 	add	fp, #8
0da20     A7 1E 02 FB | 	rdlong	local01, fp
0da24     08 4E 85 F1 | 	sub	fp, #8
0da28     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da2c     14 4E 05 A1 |  if_e	add	fp, #20
0da30     A7 22 02 AB |  if_e	rdlong	local03, fp
0da34     14 4E 85 A1 |  if_e	sub	fp, #20
0da38     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da3c     24 00 90 5D |  if_ne	jmp	#LR__1088
0da40     00 1E 06 F6 | 	mov	local01, #0
0da44     A7 20 02 FB | 	rdlong	local02, fp
0da48     0C 4E 05 F1 | 	add	fp, #12
0da4c     A7 22 02 FB | 	rdlong	local03, fp
0da50     0C 4E 85 F1 | 	sub	fp, #12
0da54     11 21 52 F2 | 	cmps	local02, local03 wc
0da58     01 1E 66 36 |  if_ae	neg	local01, #1
0da5c     A7 1E 62 FC | 	wrlong	local01, fp
0da60     4C 00 90 FD | 	jmp	#LR__1090
0da64                 | LR__1088
0da64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0da64     08 4E 05 F1 | 	add	fp, #8
0da68     A7 1E 02 FB | 	rdlong	local01, fp
0da6c     08 4E 85 F1 | 	sub	fp, #8
0da70     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da74     14 4E 05 A1 |  if_e	add	fp, #20
0da78     A7 22 02 AB |  if_e	rdlong	local03, fp
0da7c     14 4E 85 A1 |  if_e	sub	fp, #20
0da80     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0da84     24 00 90 5D |  if_ne	jmp	#LR__1089
0da88     00 1E 06 F6 | 	mov	local01, #0
0da8c     A7 20 02 FB | 	rdlong	local02, fp
0da90     0C 4E 05 F1 | 	add	fp, #12
0da94     A7 22 02 FB | 	rdlong	local03, fp
0da98     0C 4E 85 F1 | 	sub	fp, #12
0da9c     11 21 12 F2 | 	cmp	local02, local03 wc
0daa0     01 1E 66 36 |  if_ae	neg	local01, #1
0daa4     A7 1E 62 FC | 	wrlong	local01, fp
0daa8     04 00 90 FD | 	jmp	#LR__1090
0daac                 | LR__1089
0daac     A7 00 68 FC | 	wrlong	#0, fp
0dab0                 | LR__1090
0dab0     08 4E 05 F1 | 	add	fp, #8
0dab4     A7 38 68 FC | 	wrlong	#28, fp
0dab8     08 4E 85 F1 | 	sub	fp, #8
0dabc     A7 12 02 F6 | 	mov	arg01, fp
0dac0     0C B4 BF FD | 	call	#_push
0dac4     A7 F0 03 F6 | 	mov	ptra, fp
0dac8     B2 00 A0 FD | 	call	#popregs_
0dacc                 | _do_ge_ret
0dacc     2D 00 64 FD | 	ret
0dad0                 | 
0dad0                 | ' 
0dad0                 | ' sub do_le
0dad0                 | _do_le
0dad0     05 4A 05 F6 | 	mov	COUNT_, #5
0dad4     A8 00 A0 FD | 	call	#pushregs_
0dad8     18 F0 07 F1 | 	add	ptra, #24
0dadc     58 B3 BF FD | 	call	#_pop
0dae0     FD 1E 02 F6 | 	mov	local01, result1
0dae4     FE 20 02 F6 | 	mov	local02, result2
0dae8     FF 22 02 F6 | 	mov	local03, result3
0daec     0C 4E 05 F1 | 	add	fp, #12
0daf0     A7 1E 62 FC | 	wrlong	local01, fp
0daf4     04 4E 05 F1 | 	add	fp, #4
0daf8     A7 20 62 FC | 	wrlong	local02, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 22 62 FC | 	wrlong	local03, fp
0db04     14 4E 85 F1 | 	sub	fp, #20
0db08     2C B3 BF FD | 	call	#_pop
0db0c     FF 22 02 F6 | 	mov	local03, result3
0db10     A7 FA 61 FC | 	wrlong	result1, fp
0db14     04 4E 05 F1 | 	add	fp, #4
0db18     A7 FC 61 FC | 	wrlong	result2, fp
0db1c     04 4E 05 F1 | 	add	fp, #4
0db20     A7 22 62 FC | 	wrlong	local03, fp
0db24                 | ' t2=pop()
0db24                 | ' t1=pop()
0db24                 | ' 
0db24                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0db24     08 4E 85 F1 | 	sub	fp, #8
0db28     1F 22 0E F2 | 	cmp	local03, #31 wz
0db2c     14 4E 05 A1 |  if_e	add	fp, #20
0db30     A7 24 02 AB |  if_e	rdlong	local04, fp
0db34     14 4E 85 A1 |  if_e	sub	fp, #20
0db38     12 23 02 A6 |  if_e	mov	local03, local04
0db3c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db40     28 00 90 5D |  if_ne	jmp	#LR__1100
0db44     00 1E 06 F6 | 	mov	local01, #0
0db48     A7 12 02 FB | 	rdlong	arg01, fp
0db4c     0C 4E 05 F1 | 	add	fp, #12
0db50     A7 14 02 FB | 	rdlong	arg02, fp
0db54     0C 4E 85 F1 | 	sub	fp, #12
0db58     20 77 B0 FD | 	call	#__system___string_cmp
0db5c     01 FA 55 F2 | 	cmps	result1, #1 wc
0db60     00 1E 26 C6 |  if_b	not	local01, #0
0db64     A7 1E 62 FC | 	wrlong	local01, fp
0db68     04 03 90 FD | 	jmp	#LR__1110
0db6c                 | LR__1100
0db6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0db6c     08 4E 05 F1 | 	add	fp, #8
0db70     A7 1E 02 FB | 	rdlong	local01, fp
0db74     08 4E 85 F1 | 	sub	fp, #8
0db78     1E 1E 0E F2 | 	cmp	local01, #30 wz
0db7c     14 4E 05 A1 |  if_e	add	fp, #20
0db80     A7 24 02 AB |  if_e	rdlong	local04, fp
0db84     14 4E 85 A1 |  if_e	sub	fp, #20
0db88     12 23 02 A6 |  if_e	mov	local03, local04
0db8c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db90     2C 00 90 5D |  if_ne	jmp	#LR__1101
0db94     00 1E 06 F6 | 	mov	local01, #0
0db98     A7 12 02 FB | 	rdlong	arg01, fp
0db9c     0C 4E 05 F1 | 	add	fp, #12
0dba0     A7 14 02 FB | 	rdlong	arg02, fp
0dba4     0C 4E 85 F1 | 	sub	fp, #12
0dba8     01 16 06 F6 | 	mov	arg03, #1
0dbac     EC A4 B0 FD | 	call	#__system___float_cmp
0dbb0     01 FA 55 F2 | 	cmps	result1, #1 wc
0dbb4     00 1E 26 C6 |  if_b	not	local01, #0
0dbb8     A7 1E 62 FC | 	wrlong	local01, fp
0dbbc     B0 02 90 FD | 	jmp	#LR__1110
0dbc0                 | LR__1101
0dbc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0dbc0     08 4E 05 F1 | 	add	fp, #8
0dbc4     A7 1E 02 FB | 	rdlong	local01, fp
0dbc8     08 4E 85 F1 | 	sub	fp, #8
0dbcc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dbd0     14 4E 05 A1 |  if_e	add	fp, #20
0dbd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbd8     14 4E 85 A1 |  if_e	sub	fp, #20
0dbdc     12 23 02 A6 |  if_e	mov	local03, local04
0dbe0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dbe4     48 00 90 5D |  if_ne	jmp	#LR__1102
0dbe8     00 1E 06 F6 | 	mov	local01, #0
0dbec     A7 20 02 FB | 	rdlong	local02, fp
0dbf0     0C 4E 05 F1 | 	add	fp, #12
0dbf4     A7 12 02 FB | 	rdlong	arg01, fp
0dbf8     0C 4E 85 F1 | 	sub	fp, #12
0dbfc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dc00     1F 26 C6 C9 |  if_b	decod	local05, #31
0dc04     00 26 06 36 |  if_ae	mov	local05, #0
0dc08     30 9D B0 FD | 	call	#__system___float_fromuns
0dc0c     13 FB 61 F5 | 	xor	result1, local05
0dc10     FD 14 02 F6 | 	mov	arg02, result1
0dc14     10 13 02 F6 | 	mov	arg01, local02
0dc18     01 16 06 F6 | 	mov	arg03, #1
0dc1c     7C A4 B0 FD | 	call	#__system___float_cmp
0dc20     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc24     00 1E 26 C6 |  if_b	not	local01, #0
0dc28     A7 1E 62 FC | 	wrlong	local01, fp
0dc2c     40 02 90 FD | 	jmp	#LR__1110
0dc30                 | LR__1102
0dc30                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0dc30     08 4E 05 F1 | 	add	fp, #8
0dc34     A7 1E 02 FB | 	rdlong	local01, fp
0dc38     08 4E 85 F1 | 	sub	fp, #8
0dc3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc40     14 4E 05 A1 |  if_e	add	fp, #20
0dc44     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc48     14 4E 85 A1 |  if_e	sub	fp, #20
0dc4c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0dc50     38 00 90 5D |  if_ne	jmp	#LR__1103
0dc54     00 1E 06 F6 | 	mov	local01, #0
0dc58     A7 20 02 FB | 	rdlong	local02, fp
0dc5c     0C 4E 05 F1 | 	add	fp, #12
0dc60     A7 12 02 FB | 	rdlong	arg01, fp
0dc64     0C 4E 85 F1 | 	sub	fp, #12
0dc68     D0 9C B0 FD | 	call	#__system___float_fromuns
0dc6c     FD 14 02 F6 | 	mov	arg02, result1
0dc70     10 13 02 F6 | 	mov	arg01, local02
0dc74     01 16 06 F6 | 	mov	arg03, #1
0dc78     20 A4 B0 FD | 	call	#__system___float_cmp
0dc7c     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc80     00 1E 26 C6 |  if_b	not	local01, #0
0dc84     A7 1E 62 FC | 	wrlong	local01, fp
0dc88     E4 01 90 FD | 	jmp	#LR__1110
0dc8c                 | LR__1103
0dc8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0dc8c     08 4E 05 F1 | 	add	fp, #8
0dc90     A7 1E 02 FB | 	rdlong	local01, fp
0dc94     08 4E 85 F1 | 	sub	fp, #8
0dc98     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dc9c     14 4E 05 A1 |  if_e	add	fp, #20
0dca0     A7 22 02 AB |  if_e	rdlong	local03, fp
0dca4     14 4E 85 A1 |  if_e	sub	fp, #20
0dca8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dcac     44 00 90 5D |  if_ne	jmp	#LR__1104
0dcb0     00 1E 06 F6 | 	mov	local01, #0
0dcb4     A7 12 02 FB | 	rdlong	arg01, fp
0dcb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcbc     1F 26 C6 C9 |  if_b	decod	local05, #31
0dcc0     00 26 06 36 |  if_ae	mov	local05, #0
0dcc4     74 9C B0 FD | 	call	#__system___float_fromuns
0dcc8     13 FB 61 F5 | 	xor	result1, local05
0dccc     FD 12 02 F6 | 	mov	arg01, result1
0dcd0     0C 4E 05 F1 | 	add	fp, #12
0dcd4     A7 14 02 FB | 	rdlong	arg02, fp
0dcd8     0C 4E 85 F1 | 	sub	fp, #12
0dcdc     01 16 06 F6 | 	mov	arg03, #1
0dce0     B8 A3 B0 FD | 	call	#__system___float_cmp
0dce4     01 FA 55 F2 | 	cmps	result1, #1 wc
0dce8     00 1E 26 C6 |  if_b	not	local01, #0
0dcec     A7 1E 62 FC | 	wrlong	local01, fp
0dcf0     7C 01 90 FD | 	jmp	#LR__1110
0dcf4                 | LR__1104
0dcf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0dcf4     08 4E 05 F1 | 	add	fp, #8
0dcf8     A7 1E 02 FB | 	rdlong	local01, fp
0dcfc     08 4E 85 F1 | 	sub	fp, #8
0dd00     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd04     14 4E 05 A1 |  if_e	add	fp, #20
0dd08     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd0c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd10     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd14     24 00 90 5D |  if_ne	jmp	#LR__1105
0dd18     00 1E 06 F6 | 	mov	local01, #0
0dd1c     A7 20 02 FB | 	rdlong	local02, fp
0dd20     0C 4E 05 F1 | 	add	fp, #12
0dd24     A7 22 02 FB | 	rdlong	local03, fp
0dd28     0C 4E 85 F1 | 	sub	fp, #12
0dd2c     11 21 5A F2 | 	cmps	local02, local03 wcz
0dd30     01 1E 66 E6 |  if_be	neg	local01, #1
0dd34     A7 1E 62 FC | 	wrlong	local01, fp
0dd38     34 01 90 FD | 	jmp	#LR__1110
0dd3c                 | LR__1105
0dd3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0dd3c     08 4E 05 F1 | 	add	fp, #8
0dd40     A7 1E 02 FB | 	rdlong	local01, fp
0dd44     08 4E 85 F1 | 	sub	fp, #8
0dd48     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd4c     14 4E 05 A1 |  if_e	add	fp, #20
0dd50     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd54     14 4E 85 A1 |  if_e	sub	fp, #20
0dd58     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dd5c     24 00 90 5D |  if_ne	jmp	#LR__1106
0dd60     00 1E 06 F6 | 	mov	local01, #0
0dd64     A7 20 02 FB | 	rdlong	local02, fp
0dd68     0C 4E 05 F1 | 	add	fp, #12
0dd6c     A7 22 02 FB | 	rdlong	local03, fp
0dd70     0C 4E 85 F1 | 	sub	fp, #12
0dd74     11 21 5A F2 | 	cmps	local02, local03 wcz
0dd78     01 1E 66 E6 |  if_be	neg	local01, #1
0dd7c     A7 1E 62 FC | 	wrlong	local01, fp
0dd80     EC 00 90 FD | 	jmp	#LR__1110
0dd84                 | LR__1106
0dd84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0dd84     08 4E 05 F1 | 	add	fp, #8
0dd88     A7 1E 02 FB | 	rdlong	local01, fp
0dd8c     08 4E 85 F1 | 	sub	fp, #8
0dd90     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dd94     14 4E 05 A1 |  if_e	add	fp, #20
0dd98     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd9c     14 4E 85 A1 |  if_e	sub	fp, #20
0dda0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dda4     34 00 90 5D |  if_ne	jmp	#LR__1107
0dda8     00 1E 06 F6 | 	mov	local01, #0
0ddac     A7 12 02 FB | 	rdlong	arg01, fp
0ddb0     88 9B B0 FD | 	call	#__system___float_fromuns
0ddb4     FD 12 02 F6 | 	mov	arg01, result1
0ddb8     0C 4E 05 F1 | 	add	fp, #12
0ddbc     A7 14 02 FB | 	rdlong	arg02, fp
0ddc0     0C 4E 85 F1 | 	sub	fp, #12
0ddc4     01 16 06 F6 | 	mov	arg03, #1
0ddc8     D0 A2 B0 FD | 	call	#__system___float_cmp
0ddcc     01 FA 55 F2 | 	cmps	result1, #1 wc
0ddd0     00 1E 26 C6 |  if_b	not	local01, #0
0ddd4     A7 1E 62 FC | 	wrlong	local01, fp
0ddd8     94 00 90 FD | 	jmp	#LR__1110
0dddc                 | LR__1107
0dddc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0dddc     08 4E 05 F1 | 	add	fp, #8
0dde0     A7 1E 02 FB | 	rdlong	local01, fp
0dde4     08 4E 85 F1 | 	sub	fp, #8
0dde8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ddec     14 4E 05 A1 |  if_e	add	fp, #20
0ddf0     A7 22 02 AB |  if_e	rdlong	local03, fp
0ddf4     14 4E 85 A1 |  if_e	sub	fp, #20
0ddf8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ddfc     24 00 90 5D |  if_ne	jmp	#LR__1108
0de00     00 1E 06 F6 | 	mov	local01, #0
0de04     A7 20 02 FB | 	rdlong	local02, fp
0de08     0C 4E 05 F1 | 	add	fp, #12
0de0c     A7 22 02 FB | 	rdlong	local03, fp
0de10     0C 4E 85 F1 | 	sub	fp, #12
0de14     11 21 5A F2 | 	cmps	local02, local03 wcz
0de18     01 1E 66 E6 |  if_be	neg	local01, #1
0de1c     A7 1E 62 FC | 	wrlong	local01, fp
0de20     4C 00 90 FD | 	jmp	#LR__1110
0de24                 | LR__1108
0de24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0de24     08 4E 05 F1 | 	add	fp, #8
0de28     A7 1E 02 FB | 	rdlong	local01, fp
0de2c     08 4E 85 F1 | 	sub	fp, #8
0de30     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de34     14 4E 05 A1 |  if_e	add	fp, #20
0de38     A7 22 02 AB |  if_e	rdlong	local03, fp
0de3c     14 4E 85 A1 |  if_e	sub	fp, #20
0de40     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de44     24 00 90 5D |  if_ne	jmp	#LR__1109
0de48     00 1E 06 F6 | 	mov	local01, #0
0de4c     A7 20 02 FB | 	rdlong	local02, fp
0de50     0C 4E 05 F1 | 	add	fp, #12
0de54     A7 22 02 FB | 	rdlong	local03, fp
0de58     0C 4E 85 F1 | 	sub	fp, #12
0de5c     11 21 1A F2 | 	cmp	local02, local03 wcz
0de60     01 1E 66 E6 |  if_be	neg	local01, #1
0de64     A7 1E 62 FC | 	wrlong	local01, fp
0de68     04 00 90 FD | 	jmp	#LR__1110
0de6c                 | LR__1109
0de6c     A7 00 68 FC | 	wrlong	#0, fp
0de70                 | LR__1110
0de70     08 4E 05 F1 | 	add	fp, #8
0de74     A7 38 68 FC | 	wrlong	#28, fp
0de78     08 4E 85 F1 | 	sub	fp, #8
0de7c     A7 12 02 F6 | 	mov	arg01, fp
0de80     4C B0 BF FD | 	call	#_push
0de84     A7 F0 03 F6 | 	mov	ptra, fp
0de88     B2 00 A0 FD | 	call	#popregs_
0de8c                 | _do_le_ret
0de8c     2D 00 64 FD | 	ret
0de90                 | 
0de90                 | ' 
0de90                 | ' 
0de90                 | ' sub do_ne
0de90                 | _do_ne
0de90     05 4A 05 F6 | 	mov	COUNT_, #5
0de94     A8 00 A0 FD | 	call	#pushregs_
0de98     18 F0 07 F1 | 	add	ptra, #24
0de9c     98 AF BF FD | 	call	#_pop
0dea0     FD 1E 02 F6 | 	mov	local01, result1
0dea4     FE 20 02 F6 | 	mov	local02, result2
0dea8     FF 22 02 F6 | 	mov	local03, result3
0deac     0C 4E 05 F1 | 	add	fp, #12
0deb0     A7 1E 62 FC | 	wrlong	local01, fp
0deb4     04 4E 05 F1 | 	add	fp, #4
0deb8     A7 20 62 FC | 	wrlong	local02, fp
0debc     04 4E 05 F1 | 	add	fp, #4
0dec0     A7 22 62 FC | 	wrlong	local03, fp
0dec4     14 4E 85 F1 | 	sub	fp, #20
0dec8     6C AF BF FD | 	call	#_pop
0decc     FF 22 02 F6 | 	mov	local03, result3
0ded0     A7 FA 61 FC | 	wrlong	result1, fp
0ded4     04 4E 05 F1 | 	add	fp, #4
0ded8     A7 FC 61 FC | 	wrlong	result2, fp
0dedc     04 4E 05 F1 | 	add	fp, #4
0dee0     A7 22 62 FC | 	wrlong	local03, fp
0dee4                 | ' t2=pop()
0dee4                 | ' t1=pop()
0dee4                 | ' 
0dee4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0dee4     08 4E 85 F1 | 	sub	fp, #8
0dee8     1F 22 0E F2 | 	cmp	local03, #31 wz
0deec     14 4E 05 A1 |  if_e	add	fp, #20
0def0     A7 24 02 AB |  if_e	rdlong	local04, fp
0def4     14 4E 85 A1 |  if_e	sub	fp, #20
0def8     12 23 02 A6 |  if_e	mov	local03, local04
0defc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0df00     28 00 90 5D |  if_ne	jmp	#LR__1120
0df04     00 1E 06 F6 | 	mov	local01, #0
0df08     A7 12 02 FB | 	rdlong	arg01, fp
0df0c     0C 4E 05 F1 | 	add	fp, #12
0df10     A7 14 02 FB | 	rdlong	arg02, fp
0df14     0C 4E 85 F1 | 	sub	fp, #12
0df18     60 73 B0 FD | 	call	#__system___string_cmp
0df1c     00 FA 0D F2 | 	cmp	result1, #0 wz
0df20     00 1E 26 56 |  if_ne	not	local01, #0
0df24     A7 1E 62 FC | 	wrlong	local01, fp
0df28     04 03 90 FD | 	jmp	#LR__1130
0df2c                 | LR__1120
0df2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0df2c     08 4E 05 F1 | 	add	fp, #8
0df30     A7 1E 02 FB | 	rdlong	local01, fp
0df34     08 4E 85 F1 | 	sub	fp, #8
0df38     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df3c     14 4E 05 A1 |  if_e	add	fp, #20
0df40     A7 24 02 AB |  if_e	rdlong	local04, fp
0df44     14 4E 85 A1 |  if_e	sub	fp, #20
0df48     12 23 02 A6 |  if_e	mov	local03, local04
0df4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0df50     2C 00 90 5D |  if_ne	jmp	#LR__1121
0df54     00 1E 06 F6 | 	mov	local01, #0
0df58     A7 12 02 FB | 	rdlong	arg01, fp
0df5c     0C 4E 05 F1 | 	add	fp, #12
0df60     A7 14 02 FB | 	rdlong	arg02, fp
0df64     0C 4E 85 F1 | 	sub	fp, #12
0df68     01 16 06 F6 | 	mov	arg03, #1
0df6c     2C A1 B0 FD | 	call	#__system___float_cmp
0df70     00 FA 0D F2 | 	cmp	result1, #0 wz
0df74     00 1E 26 56 |  if_ne	not	local01, #0
0df78     A7 1E 62 FC | 	wrlong	local01, fp
0df7c     B0 02 90 FD | 	jmp	#LR__1130
0df80                 | LR__1121
0df80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0df80     08 4E 05 F1 | 	add	fp, #8
0df84     A7 1E 02 FB | 	rdlong	local01, fp
0df88     08 4E 85 F1 | 	sub	fp, #8
0df8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df90     14 4E 05 A1 |  if_e	add	fp, #20
0df94     A7 24 02 AB |  if_e	rdlong	local04, fp
0df98     14 4E 85 A1 |  if_e	sub	fp, #20
0df9c     12 23 02 A6 |  if_e	mov	local03, local04
0dfa0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dfa4     48 00 90 5D |  if_ne	jmp	#LR__1122
0dfa8     00 1E 06 F6 | 	mov	local01, #0
0dfac     A7 20 02 FB | 	rdlong	local02, fp
0dfb0     0C 4E 05 F1 | 	add	fp, #12
0dfb4     A7 12 02 FB | 	rdlong	arg01, fp
0dfb8     0C 4E 85 F1 | 	sub	fp, #12
0dfbc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dfc0     1F 26 C6 C9 |  if_b	decod	local05, #31
0dfc4     00 26 06 36 |  if_ae	mov	local05, #0
0dfc8     70 99 B0 FD | 	call	#__system___float_fromuns
0dfcc     13 FB 61 F5 | 	xor	result1, local05
0dfd0     FD 14 02 F6 | 	mov	arg02, result1
0dfd4     10 13 02 F6 | 	mov	arg01, local02
0dfd8     01 16 06 F6 | 	mov	arg03, #1
0dfdc     BC A0 B0 FD | 	call	#__system___float_cmp
0dfe0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dfe4     00 1E 26 56 |  if_ne	not	local01, #0
0dfe8     A7 1E 62 FC | 	wrlong	local01, fp
0dfec     40 02 90 FD | 	jmp	#LR__1130
0dff0                 | LR__1122
0dff0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0dff0     08 4E 05 F1 | 	add	fp, #8
0dff4     A7 1E 02 FB | 	rdlong	local01, fp
0dff8     08 4E 85 F1 | 	sub	fp, #8
0dffc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e000     14 4E 05 A1 |  if_e	add	fp, #20
0e004     A7 24 02 AB |  if_e	rdlong	local04, fp
0e008     14 4E 85 A1 |  if_e	sub	fp, #20
0e00c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e010     38 00 90 5D |  if_ne	jmp	#LR__1123
0e014     00 1E 06 F6 | 	mov	local01, #0
0e018     A7 20 02 FB | 	rdlong	local02, fp
0e01c     0C 4E 05 F1 | 	add	fp, #12
0e020     A7 12 02 FB | 	rdlong	arg01, fp
0e024     0C 4E 85 F1 | 	sub	fp, #12
0e028     10 99 B0 FD | 	call	#__system___float_fromuns
0e02c     FD 14 02 F6 | 	mov	arg02, result1
0e030     10 13 02 F6 | 	mov	arg01, local02
0e034     01 16 06 F6 | 	mov	arg03, #1
0e038     60 A0 B0 FD | 	call	#__system___float_cmp
0e03c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e040     00 1E 26 56 |  if_ne	not	local01, #0
0e044     A7 1E 62 FC | 	wrlong	local01, fp
0e048     E4 01 90 FD | 	jmp	#LR__1130
0e04c                 | LR__1123
0e04c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0e04c     08 4E 05 F1 | 	add	fp, #8
0e050     A7 1E 02 FB | 	rdlong	local01, fp
0e054     08 4E 85 F1 | 	sub	fp, #8
0e058     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e05c     14 4E 05 A1 |  if_e	add	fp, #20
0e060     A7 22 02 AB |  if_e	rdlong	local03, fp
0e064     14 4E 85 A1 |  if_e	sub	fp, #20
0e068     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e06c     44 00 90 5D |  if_ne	jmp	#LR__1124
0e070     00 1E 06 F6 | 	mov	local01, #0
0e074     A7 12 02 FB | 	rdlong	arg01, fp
0e078     09 13 52 F6 | 	abs	arg01, arg01 wc
0e07c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e080     00 26 06 36 |  if_ae	mov	local05, #0
0e084     B4 98 B0 FD | 	call	#__system___float_fromuns
0e088     13 FB 61 F5 | 	xor	result1, local05
0e08c     FD 12 02 F6 | 	mov	arg01, result1
0e090     0C 4E 05 F1 | 	add	fp, #12
0e094     A7 14 02 FB | 	rdlong	arg02, fp
0e098     0C 4E 85 F1 | 	sub	fp, #12
0e09c     01 16 06 F6 | 	mov	arg03, #1
0e0a0     F8 9F B0 FD | 	call	#__system___float_cmp
0e0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e0a8     00 1E 26 56 |  if_ne	not	local01, #0
0e0ac     A7 1E 62 FC | 	wrlong	local01, fp
0e0b0     7C 01 90 FD | 	jmp	#LR__1130
0e0b4                 | LR__1124
0e0b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0e0b4     08 4E 05 F1 | 	add	fp, #8
0e0b8     A7 1E 02 FB | 	rdlong	local01, fp
0e0bc     08 4E 85 F1 | 	sub	fp, #8
0e0c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e0c4     14 4E 05 A1 |  if_e	add	fp, #20
0e0c8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e0cc     14 4E 85 A1 |  if_e	sub	fp, #20
0e0d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e0d4     24 00 90 5D |  if_ne	jmp	#LR__1125
0e0d8     00 1E 06 F6 | 	mov	local01, #0
0e0dc     A7 20 02 FB | 	rdlong	local02, fp
0e0e0     0C 4E 05 F1 | 	add	fp, #12
0e0e4     A7 22 02 FB | 	rdlong	local03, fp
0e0e8     0C 4E 85 F1 | 	sub	fp, #12
0e0ec     11 21 0A F2 | 	cmp	local02, local03 wz
0e0f0     01 1E 66 56 |  if_ne	neg	local01, #1
0e0f4     A7 1E 62 FC | 	wrlong	local01, fp
0e0f8     34 01 90 FD | 	jmp	#LR__1130
0e0fc                 | LR__1125
0e0fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0e0fc     08 4E 05 F1 | 	add	fp, #8
0e100     A7 1E 02 FB | 	rdlong	local01, fp
0e104     08 4E 85 F1 | 	sub	fp, #8
0e108     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e10c     14 4E 05 A1 |  if_e	add	fp, #20
0e110     A7 22 02 AB |  if_e	rdlong	local03, fp
0e114     14 4E 85 A1 |  if_e	sub	fp, #20
0e118     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e11c     24 00 90 5D |  if_ne	jmp	#LR__1126
0e120     00 1E 06 F6 | 	mov	local01, #0
0e124     A7 20 02 FB | 	rdlong	local02, fp
0e128     0C 4E 05 F1 | 	add	fp, #12
0e12c     A7 22 02 FB | 	rdlong	local03, fp
0e130     0C 4E 85 F1 | 	sub	fp, #12
0e134     11 21 0A F2 | 	cmp	local02, local03 wz
0e138     01 1E 66 56 |  if_ne	neg	local01, #1
0e13c     A7 1E 62 FC | 	wrlong	local01, fp
0e140     EC 00 90 FD | 	jmp	#LR__1130
0e144                 | LR__1126
0e144                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0e144     08 4E 05 F1 | 	add	fp, #8
0e148     A7 1E 02 FB | 	rdlong	local01, fp
0e14c     08 4E 85 F1 | 	sub	fp, #8
0e150     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e154     14 4E 05 A1 |  if_e	add	fp, #20
0e158     A7 22 02 AB |  if_e	rdlong	local03, fp
0e15c     14 4E 85 A1 |  if_e	sub	fp, #20
0e160     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e164     34 00 90 5D |  if_ne	jmp	#LR__1127
0e168     00 1E 06 F6 | 	mov	local01, #0
0e16c     A7 12 02 FB | 	rdlong	arg01, fp
0e170     C8 97 B0 FD | 	call	#__system___float_fromuns
0e174     FD 12 02 F6 | 	mov	arg01, result1
0e178     0C 4E 05 F1 | 	add	fp, #12
0e17c     A7 14 02 FB | 	rdlong	arg02, fp
0e180     0C 4E 85 F1 | 	sub	fp, #12
0e184     01 16 06 F6 | 	mov	arg03, #1
0e188     10 9F B0 FD | 	call	#__system___float_cmp
0e18c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e190     00 1E 26 56 |  if_ne	not	local01, #0
0e194     A7 1E 62 FC | 	wrlong	local01, fp
0e198     94 00 90 FD | 	jmp	#LR__1130
0e19c                 | LR__1127
0e19c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0e19c     08 4E 05 F1 | 	add	fp, #8
0e1a0     A7 1E 02 FB | 	rdlong	local01, fp
0e1a4     08 4E 85 F1 | 	sub	fp, #8
0e1a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e1ac     14 4E 05 A1 |  if_e	add	fp, #20
0e1b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1b4     14 4E 85 A1 |  if_e	sub	fp, #20
0e1b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e1bc     24 00 90 5D |  if_ne	jmp	#LR__1128
0e1c0     00 1E 06 F6 | 	mov	local01, #0
0e1c4     A7 20 02 FB | 	rdlong	local02, fp
0e1c8     0C 4E 05 F1 | 	add	fp, #12
0e1cc     A7 22 02 FB | 	rdlong	local03, fp
0e1d0     0C 4E 85 F1 | 	sub	fp, #12
0e1d4     11 21 0A F2 | 	cmp	local02, local03 wz
0e1d8     01 1E 66 56 |  if_ne	neg	local01, #1
0e1dc     A7 1E 62 FC | 	wrlong	local01, fp
0e1e0     4C 00 90 FD | 	jmp	#LR__1130
0e1e4                 | LR__1128
0e1e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0e1e4     08 4E 05 F1 | 	add	fp, #8
0e1e8     A7 1E 02 FB | 	rdlong	local01, fp
0e1ec     08 4E 85 F1 | 	sub	fp, #8
0e1f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e1f4     14 4E 05 A1 |  if_e	add	fp, #20
0e1f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e200     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e204     24 00 90 5D |  if_ne	jmp	#LR__1129
0e208     00 1E 06 F6 | 	mov	local01, #0
0e20c     A7 20 02 FB | 	rdlong	local02, fp
0e210     0C 4E 05 F1 | 	add	fp, #12
0e214     A7 22 02 FB | 	rdlong	local03, fp
0e218     0C 4E 85 F1 | 	sub	fp, #12
0e21c     11 21 0A F2 | 	cmp	local02, local03 wz
0e220     01 1E 66 56 |  if_ne	neg	local01, #1
0e224     A7 1E 62 FC | 	wrlong	local01, fp
0e228     04 00 90 FD | 	jmp	#LR__1130
0e22c                 | LR__1129
0e22c     A7 00 68 FC | 	wrlong	#0, fp
0e230                 | LR__1130
0e230     08 4E 05 F1 | 	add	fp, #8
0e234     A7 38 68 FC | 	wrlong	#28, fp
0e238     08 4E 85 F1 | 	sub	fp, #8
0e23c     A7 12 02 F6 | 	mov	arg01, fp
0e240     8C AC BF FD | 	call	#_push
0e244     A7 F0 03 F6 | 	mov	ptra, fp
0e248     B2 00 A0 FD | 	call	#popregs_
0e24c                 | _do_ne_ret
0e24c     2D 00 64 FD | 	ret
0e250                 | 
0e250                 | ' 
0e250                 | ' 
0e250                 | ' 
0e250                 | ' ' -------------------   convert a variable on the top of stack to integer
0e250                 | ' 
0e250                 | ' sub do_converttoint
0e250                 | _do_converttoint
0e250     02 4A 05 F6 | 	mov	COUNT_, #2
0e254     A8 00 A0 FD | 	call	#pushregs_
0e258     18 F0 07 F1 | 	add	ptra, #24
0e25c     D8 AB BF FD | 	call	#_pop
0e260     FE 1E 02 F6 | 	mov	local01, result2
0e264     FF 20 02 F6 | 	mov	local02, result3
0e268     A7 FA 61 FC | 	wrlong	result1, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 1E 62 FC | 	wrlong	local01, fp
0e274     04 4E 05 F1 | 	add	fp, #4
0e278     A7 20 62 FC | 	wrlong	local02, fp
0e27c                 | ' t1=pop() 
0e27c                 | ' select case t1.result_type
0e27c     08 4E 85 F1 | 	sub	fp, #8
0e280     1C 20 0E F2 | 	cmp	local02, #28 wz
0e284     24 00 90 AD |  if_e	jmp	#LR__1140
0e288     1D 20 0E F2 | 	cmp	local02, #29 wz
0e28c     38 00 90 AD |  if_e	jmp	#LR__1141
0e290     1E 20 0E F2 | 	cmp	local02, #30 wz
0e294     4C 00 90 AD |  if_e	jmp	#LR__1142
0e298     1F 20 0E F2 | 	cmp	local02, #31 wz
0e29c     68 00 90 AD |  if_e	jmp	#LR__1143
0e2a0     FF 20 0E F2 | 	cmp	local02, #255 wz
0e2a4     8C 00 90 AD |  if_e	jmp	#LR__1144
0e2a8     A8 00 90 FD | 	jmp	#LR__1145
0e2ac                 | LR__1140
0e2ac     A7 20 02 FB | 	rdlong	local02, fp
0e2b0     0C 4E 05 F1 | 	add	fp, #12
0e2b4     A7 20 62 FC | 	wrlong	local02, fp
0e2b8     04 4E 05 F1 | 	add	fp, #4
0e2bc     A7 38 68 FC | 	wrlong	#28, fp
0e2c0     10 4E 85 F1 | 	sub	fp, #16
0e2c4     A0 00 90 FD | 	jmp	#LR__1146
0e2c8                 | LR__1141
0e2c8     A7 20 02 FB | 	rdlong	local02, fp
0e2cc     0C 4E 05 F1 | 	add	fp, #12
0e2d0     A7 20 62 FC | 	wrlong	local02, fp
0e2d4     04 4E 05 F1 | 	add	fp, #4
0e2d8     A7 38 68 FC | 	wrlong	#28, fp
0e2dc     10 4E 85 F1 | 	sub	fp, #16
0e2e0     84 00 90 FD | 	jmp	#LR__1146
0e2e4                 | LR__1142
0e2e4     A7 12 02 FB | 	rdlong	arg01, fp
0e2e8     01 14 06 F6 | 	mov	arg02, #1
0e2ec     40 9E B0 FD | 	call	#__system___float_tointeger
0e2f0     0C 4E 05 F1 | 	add	fp, #12
0e2f4     A7 FA 61 FC | 	wrlong	result1, fp
0e2f8     04 4E 05 F1 | 	add	fp, #4
0e2fc     A7 38 68 FC | 	wrlong	#28, fp
0e300     10 4E 85 F1 | 	sub	fp, #16
0e304     60 00 90 FD | 	jmp	#LR__1146
0e308                 | LR__1143
0e308     A7 12 02 FB | 	rdlong	arg01, fp
0e30c     40 A1 B0 FD | 	call	#__system____builtin_atof
0e310     FD 12 02 F6 | 	mov	arg01, result1
0e314     00 14 06 F6 | 	mov	arg02, #0
0e318     14 9E B0 FD | 	call	#__system___float_tointeger
0e31c     0C 4E 05 F1 | 	add	fp, #12
0e320     A7 FA 61 FC | 	wrlong	result1, fp
0e324     04 4E 05 F1 | 	add	fp, #4
0e328     A7 38 68 FC | 	wrlong	#28, fp
0e32c     10 4E 85 F1 | 	sub	fp, #16
0e330     34 00 90 FD | 	jmp	#LR__1146
0e334                 | LR__1144
0e334     0C 4E 05 F1 | 	add	fp, #12
0e338     A7 00 68 FC | 	wrlong	#0, fp
0e33c     0C 4E 85 F1 | 	sub	fp, #12
0e340     A7 20 02 FB | 	rdlong	local02, fp
0e344     10 4E 05 F1 | 	add	fp, #16
0e348     A7 20 62 FC | 	wrlong	local02, fp
0e34c     10 4E 85 F1 | 	sub	fp, #16
0e350     14 00 90 FD | 	jmp	#LR__1146
0e354                 | LR__1145
0e354     0C 4E 05 F1 | 	add	fp, #12
0e358     A7 00 68 FC | 	wrlong	#0, fp
0e35c     04 4E 05 F1 | 	add	fp, #4
0e360     A7 02 68 FC | 	wrlong	#1, fp
0e364     10 4E 85 F1 | 	sub	fp, #16
0e368                 | LR__1146
0e368     0C 4E 05 F1 | 	add	fp, #12
0e36c     A7 20 02 FB | 	rdlong	local02, fp
0e370     0C 4E 85 F1 | 	sub	fp, #12
0e374     A7 20 62 FC | 	wrlong	local02, fp
0e378     10 4E 05 F1 | 	add	fp, #16
0e37c     A7 20 02 FB | 	rdlong	local02, fp
0e380     08 4E 85 F1 | 	sub	fp, #8
0e384     A7 20 62 FC | 	wrlong	local02, fp
0e388     08 4E 85 F1 | 	sub	fp, #8
0e38c     A7 12 02 F6 | 	mov	arg01, fp
0e390     3C AB BF FD | 	call	#_push
0e394     A7 F0 03 F6 | 	mov	ptra, fp
0e398     B2 00 A0 FD | 	call	#popregs_
0e39c                 | _do_converttoint_ret
0e39c     2D 00 64 FD | 	ret
0e3a0                 | 
0e3a0                 | ' 
0e3a0                 | ' function converttoint (t1 as expr_result) as integer
0e3a0                 | _converttoint
0e3a0     02 4A 05 F6 | 	mov	COUNT_, #2
0e3a4     A8 00 A0 FD | 	call	#pushregs_
0e3a8     09 1F 02 F6 | 	mov	local01, arg01
0e3ac                 | ' 
0e3ac                 | ' select case t1.result_type
0e3ac     08 1E 06 F1 | 	add	local01, #8
0e3b0     0F 21 02 FB | 	rdlong	local02, local01
0e3b4     08 1E 86 F1 | 	sub	local01, #8
0e3b8     1C 20 86 F1 | 	sub	local02, #28
0e3bc     04 20 26 F3 | 	fle	local02, #4
0e3c0     30 20 62 FD | 	jmprel	local02
0e3c4                 | LR__1150
0e3c4     10 00 90 FD | 	jmp	#LR__1151
0e3c8     14 00 90 FD | 	jmp	#LR__1152
0e3cc     18 00 90 FD | 	jmp	#LR__1153
0e3d0     24 00 90 FD | 	jmp	#LR__1154
0e3d4     38 00 90 FD | 	jmp	#LR__1155
0e3d8                 | LR__1151
0e3d8     0F FB 01 FB | 	rdlong	result1, local01
0e3dc     34 00 90 FD | 	jmp	#LR__1156
0e3e0                 | LR__1152
0e3e0     0F FB 01 FB | 	rdlong	result1, local01
0e3e4     2C 00 90 FD | 	jmp	#LR__1156
0e3e8                 | LR__1153
0e3e8     0F 13 02 FB | 	rdlong	arg01, local01
0e3ec     01 14 06 F6 | 	mov	arg02, #1
0e3f0     3C 9D B0 FD | 	call	#__system___float_tointeger
0e3f4     1C 00 90 FD | 	jmp	#LR__1156
0e3f8                 | LR__1154
0e3f8     0F 13 02 FB | 	rdlong	arg01, local01
0e3fc     50 A0 B0 FD | 	call	#__system____builtin_atof
0e400     FD 12 02 F6 | 	mov	arg01, result1
0e404     00 14 06 F6 | 	mov	arg02, #0
0e408     24 9D B0 FD | 	call	#__system___float_tointeger
0e40c     04 00 90 FD | 	jmp	#LR__1156
0e410                 | LR__1155
0e410     00 FA 05 F6 | 	mov	result1, #0
0e414                 | LR__1156
0e414     A7 F0 03 F6 | 	mov	ptra, fp
0e418     B2 00 A0 FD | 	call	#popregs_
0e41c                 | _converttoint_ret
0e41c     2D 00 64 FD | 	ret
0e420                 | 
0e420                 | ' 
0e420                 | ' sub do_rnd
0e420                 | _do_rnd
0e420     01 4A 05 F6 | 	mov	COUNT_, #1
0e424     A8 00 A0 FD | 	call	#pushregs_
0e428     10 F0 07 F1 | 	add	ptra, #16
0e42c     41 00 00 FF 
0e430     44 E4 05 F1 | 	add	objptr, ##33348
0e434     F2 1E 02 FB | 	rdlong	local01, objptr
0e438     0F 17 02 F6 | 	mov	arg03, local01
0e43c     01 16 66 F0 | 	shl	arg03, #1
0e440     0F 17 02 F1 | 	add	arg03, local01
0e444     02 16 66 F0 | 	shl	arg03, #2
0e448     03 00 00 FF 
0e44c     04 E4 85 F1 | 	sub	objptr, ##1540
0e450     F2 16 02 F1 | 	add	arg03, objptr
0e454     0B 17 02 FB | 	rdlong	arg03, arg03
0e458     0C 4E 05 F1 | 	add	fp, #12
0e45c     A7 16 62 FC | 	wrlong	arg03, fp
0e460                 | ' 
0e460                 | ' numpar=compiledline(lineptr_e).result.uresult
0e460                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0e460     0C 4E 85 F1 | 	sub	fp, #12
0e464     02 16 16 F2 | 	cmp	arg03, #2 wc
0e468     3E 00 00 FF 
0e46c     40 E4 85 F1 | 	sub	objptr, ##31808
0e470     3C 00 90 CD |  if_b	jmp	#LR__1160
0e474     00 12 06 F6 | 	mov	arg01, #0
0e478     8C C3 B0 FD | 	call	#__system___getiolock_0334
0e47c     FD 12 02 F6 | 	mov	arg01, result1
0e480     D0 6D B0 FD | 	call	#__system___lockmem
0e484     24 01 00 FF 
0e488     92 15 06 F6 | 	mov	arg02, ##@LR__4305
0e48c     00 12 06 F6 | 	mov	arg01, #0
0e490     00 16 06 F6 | 	mov	arg03, #0
0e494     B0 7A B0 FD | 	call	#__system___basic_print_string
0e498     00 12 06 F6 | 	mov	arg01, #0
0e49c     68 C3 B0 FD | 	call	#__system___getiolock_0334
0e4a0     FD 00 68 FC | 	wrlong	#0, result1
0e4a4     27 12 06 F6 | 	mov	arg01, #39
0e4a8     B4 38 B0 FD | 	call	#_printerror
0e4ac     2C 01 90 FD | 	jmp	#LR__1167
0e4b0                 | LR__1160
0e4b0                 | ' if numpar=0 then
0e4b0     0C 4E 05 F1 | 	add	fp, #12
0e4b4     A7 FE 09 FB | 	rdlong	result3, fp wz
0e4b8     0C 4E 85 F1 | 	sub	fp, #12
0e4bc     20 00 90 5D |  if_ne	jmp	#LR__1161
0e4c0     08 4E 05 F1 | 	add	fp, #8
0e4c4     A7 3A 68 FC | 	wrlong	#29, fp
0e4c8     08 4E 85 F1 | 	sub	fp, #8
0e4cc     1B FA 61 FD | 	getrnd	result1
0e4d0     A7 FA 61 FC | 	wrlong	result1, fp
0e4d4     A7 12 02 F6 | 	mov	arg01, fp
0e4d8     F4 A9 BF FD | 	call	#_push
0e4dc     FC 00 90 FD | 	jmp	#LR__1166
0e4e0                 | LR__1161
0e4e0     54 A9 BF FD | 	call	#_pop
0e4e4     A7 FA 61 FC | 	wrlong	result1, fp
0e4e8     04 4E 05 F1 | 	add	fp, #4
0e4ec     A7 FC 61 FC | 	wrlong	result2, fp
0e4f0     04 4E 05 F1 | 	add	fp, #4
0e4f4     A7 FE 61 FC | 	wrlong	result3, fp
0e4f8                 | '   t1=pop()
0e4f8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0e4f8     08 4E 85 F1 | 	sub	fp, #8
0e4fc     1C FE 0D F2 | 	cmp	result3, #28 wz
0e500     08 4E 05 51 |  if_ne	add	fp, #8
0e504     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e508     08 4E 85 51 |  if_ne	sub	fp, #8
0e50c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e510     2C 00 90 5D |  if_ne	jmp	#LR__1162
0e514     1B FA 61 FD | 	getrnd	result1
0e518     A7 1E 02 FB | 	rdlong	local01, fp
0e51c     0F FB 11 FD | 	qdiv	result1, local01
0e520     A7 12 02 F6 | 	mov	arg01, fp
0e524     19 1E 62 FD | 	getqy	local01
0e528     A7 1E 62 FC | 	wrlong	local01, fp
0e52c     08 4E 05 F1 | 	add	fp, #8
0e530     A7 3A 68 FC | 	wrlong	#29, fp
0e534     08 4E 85 F1 | 	sub	fp, #8
0e538     94 A9 BF FD | 	call	#_push
0e53c     9C 00 90 FD | 	jmp	#LR__1165
0e540                 | LR__1162
0e540     08 4E 05 F1 | 	add	fp, #8
0e544     A7 1E 02 FB | 	rdlong	local01, fp
0e548     08 4E 85 F1 | 	sub	fp, #8
0e54c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e550     48 00 90 5D |  if_ne	jmp	#LR__1163
0e554     A7 12 02 FB | 	rdlong	arg01, fp
0e558     00 C0 24 FF 
0e55c     00 14 06 F6 | 	mov	arg02, ##1233125376
0e560     08 99 B0 FD | 	call	#__system___float_div
0e564     FD 1E 02 F6 | 	mov	local01, result1
0e568     1B 12 62 FD | 	getrnd	arg01
0e56c     74 13 06 F4 | 	bitl	arg01, #372
0e570     C8 93 B0 FD | 	call	#__system___float_fromuns
0e574     FD 14 02 F6 | 	mov	arg02, result1
0e578     0F 13 02 F6 | 	mov	arg01, local01
0e57c     E8 96 B0 FD | 	call	#__system___float_mul
0e580     A7 FA 61 FC | 	wrlong	result1, fp
0e584     08 4E 05 F1 | 	add	fp, #8
0e588     A7 3C 68 FC | 	wrlong	#30, fp
0e58c     08 4E 85 F1 | 	sub	fp, #8
0e590     A7 12 02 F6 | 	mov	arg01, fp
0e594     38 A9 BF FD | 	call	#_push
0e598     40 00 90 FD | 	jmp	#LR__1164
0e59c                 | LR__1163
0e59c                 | '     print "rnd: "; : printerror(40) 
0e59c     00 12 06 F6 | 	mov	arg01, #0
0e5a0     64 C2 B0 FD | 	call	#__system___getiolock_0334
0e5a4     FD 12 02 F6 | 	mov	arg01, result1
0e5a8     A8 6C B0 FD | 	call	#__system___lockmem
0e5ac     24 01 00 FF 
0e5b0     98 15 06 F6 | 	mov	arg02, ##@LR__4306
0e5b4     00 12 06 F6 | 	mov	arg01, #0
0e5b8     00 16 06 F6 | 	mov	arg03, #0
0e5bc     88 79 B0 FD | 	call	#__system___basic_print_string
0e5c0     00 12 06 F6 | 	mov	arg01, #0
0e5c4     40 C2 B0 FD | 	call	#__system___getiolock_0334
0e5c8     FD 00 68 FC | 	wrlong	#0, result1
0e5cc     28 12 06 F6 | 	mov	arg01, #40
0e5d0     8C 37 B0 FD | 	call	#_printerror
0e5d4     A7 12 02 F6 | 	mov	arg01, fp
0e5d8     F4 A8 BF FD | 	call	#_push
0e5dc                 | LR__1164
0e5dc                 | LR__1165
0e5dc                 | LR__1166
0e5dc                 | LR__1167
0e5dc     A7 F0 03 F6 | 	mov	ptra, fp
0e5e0     B2 00 A0 FD | 	call	#popregs_
0e5e4                 | _do_rnd_ret
0e5e4     2D 00 64 FD | 	ret
0e5e8                 | 
0e5e8                 | ' 
0e5e8                 | ' sub do_sin
0e5e8                 | _do_sin
0e5e8     03 4A 05 F6 | 	mov	COUNT_, #3
0e5ec     A8 00 A0 FD | 	call	#pushregs_
0e5f0     10 F0 07 F1 | 	add	ptra, #16
0e5f4     41 00 00 FF 
0e5f8     44 E4 05 F1 | 	add	objptr, ##33348
0e5fc     F2 1E 02 FB | 	rdlong	local01, objptr
0e600     0F 17 02 F6 | 	mov	arg03, local01
0e604     01 16 66 F0 | 	shl	arg03, #1
0e608     0F 17 02 F1 | 	add	arg03, local01
0e60c     02 16 66 F0 | 	shl	arg03, #2
0e610     03 00 00 FF 
0e614     04 E4 85 F1 | 	sub	objptr, ##1540
0e618     F2 16 02 F1 | 	add	arg03, objptr
0e61c     0B 17 02 FB | 	rdlong	arg03, arg03
0e620     0C 4E 05 F1 | 	add	fp, #12
0e624     A7 16 62 FC | 	wrlong	arg03, fp
0e628                 | ' 
0e628                 | ' numpar=compiledline(lineptr_e).result.uresult
0e628                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0e628     0C 4E 85 F1 | 	sub	fp, #12
0e62c     02 16 16 F2 | 	cmp	arg03, #2 wc
0e630     3E 00 00 FF 
0e634     40 E4 85 F1 | 	sub	objptr, ##31808
0e638     0C 4E 05 C1 |  if_b	add	fp, #12
0e63c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0e640     0C 4E 85 C1 |  if_b	sub	fp, #12
0e644     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0e648     00 12 06 F6 | 	mov	arg01, #0
0e64c     B8 C1 B0 FD | 	call	#__system___getiolock_0334
0e650     FD 12 02 F6 | 	mov	arg01, result1
0e654     FC 6B B0 FD | 	call	#__system___lockmem
0e658     24 01 00 FF 
0e65c     9E 15 06 F6 | 	mov	arg02, ##@LR__4307
0e660     00 12 06 F6 | 	mov	arg01, #0
0e664     00 16 06 F6 | 	mov	arg03, #0
0e668     DC 78 B0 FD | 	call	#__system___basic_print_string
0e66c     00 12 06 F6 | 	mov	arg01, #0
0e670     94 C1 B0 FD | 	call	#__system___getiolock_0334
0e674     FD 00 68 FC | 	wrlong	#0, result1
0e678     27 12 06 F6 | 	mov	arg01, #39
0e67c     E0 36 B0 FD | 	call	#_printerror
0e680     40 01 90 FD | 	jmp	#LR__1175
0e684                 | LR__1170
0e684     B0 A7 BF FD | 	call	#_pop
0e688     A7 FA 61 FC | 	wrlong	result1, fp
0e68c     04 4E 05 F1 | 	add	fp, #4
0e690     A7 FC 61 FC | 	wrlong	result2, fp
0e694     04 4E 05 F1 | 	add	fp, #4
0e698     A7 FE 61 FC | 	wrlong	result3, fp
0e69c                 | ' t1=pop()
0e69c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0e69c     08 4E 85 F1 | 	sub	fp, #8
0e6a0     1C FE 0D F2 | 	cmp	result3, #28 wz
0e6a4     08 4E 05 51 |  if_ne	add	fp, #8
0e6a8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e6ac     08 4E 85 51 |  if_ne	sub	fp, #8
0e6b0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e6b4     70 00 90 5D |  if_ne	jmp	#LR__1171
0e6b8     A7 1E 02 FB | 	rdlong	local01, fp
0e6bc     0F 1F 52 F6 | 	abs	local01, local01 wc
0e6c0     68 1F 16 FD | 	qdiv	local01, #360
0e6c4     87 24 20 FF 
0e6c8     DB 21 06 F6 | 	mov	local02, ##1078530011
0e6cc     19 1E 62 FD | 	getqy	local01
0e6d0     0F 13 82 F6 | 	negc	arg01, local01
0e6d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6d8     1F 22 C6 C9 |  if_b	decod	local03, #31
0e6dc     00 22 06 36 |  if_ae	mov	local03, #0
0e6e0     58 92 B0 FD | 	call	#__system___float_fromuns
0e6e4     11 FB 61 F5 | 	xor	result1, local03
0e6e8     FD 12 02 F6 | 	mov	arg01, result1
0e6ec     00 9A 21 FF 
0e6f0     00 14 06 F6 | 	mov	arg02, ##1127481344
0e6f4     74 97 B0 FD | 	call	#__system___float_div
0e6f8     FD 14 02 F6 | 	mov	arg02, result1
0e6fc     10 13 02 F6 | 	mov	arg01, local02
0e700     64 95 B0 FD | 	call	#__system___float_mul
0e704     FD 12 02 F6 | 	mov	arg01, result1
0e708     98 9E B0 FD | 	call	#__system____builtin_sinf
0e70c     A7 FA 61 FC | 	wrlong	result1, fp
0e710     08 4E 05 F1 | 	add	fp, #8
0e714     A7 3C 68 FC | 	wrlong	#30, fp
0e718     08 4E 85 F1 | 	sub	fp, #8
0e71c     A7 12 02 F6 | 	mov	arg01, fp
0e720     AC A7 BF FD | 	call	#_push
0e724     9C 00 90 FD | 	jmp	#LR__1174
0e728                 | LR__1171
0e728     08 4E 05 F1 | 	add	fp, #8
0e72c     A7 20 02 FB | 	rdlong	local02, fp
0e730     08 4E 85 F1 | 	sub	fp, #8
0e734     1E 20 0E F2 | 	cmp	local02, #30 wz
0e738     48 00 90 5D |  if_ne	jmp	#LR__1172
0e73c     87 24 20 FF 
0e740     DB 21 06 F6 | 	mov	local02, ##1078530011
0e744     A7 12 02 FB | 	rdlong	arg01, fp
0e748     00 9A 21 FF 
0e74c     00 14 06 F6 | 	mov	arg02, ##1127481344
0e750     18 97 B0 FD | 	call	#__system___float_div
0e754     FD 14 02 F6 | 	mov	arg02, result1
0e758     10 13 02 F6 | 	mov	arg01, local02
0e75c     08 95 B0 FD | 	call	#__system___float_mul
0e760     FD 12 02 F6 | 	mov	arg01, result1
0e764     3C 9E B0 FD | 	call	#__system____builtin_sinf
0e768     A7 FA 61 FC | 	wrlong	result1, fp
0e76c     08 4E 05 F1 | 	add	fp, #8
0e770     A7 3C 68 FC | 	wrlong	#30, fp
0e774     08 4E 85 F1 | 	sub	fp, #8
0e778     A7 12 02 F6 | 	mov	arg01, fp
0e77c     50 A7 BF FD | 	call	#_push
0e780     40 00 90 FD | 	jmp	#LR__1173
0e784                 | LR__1172
0e784                 | '   print "sin: "; : printerror(40) 
0e784     00 12 06 F6 | 	mov	arg01, #0
0e788     7C C0 B0 FD | 	call	#__system___getiolock_0334
0e78c     FD 12 02 F6 | 	mov	arg01, result1
0e790     C0 6A B0 FD | 	call	#__system___lockmem
0e794     24 01 00 FF 
0e798     A4 15 06 F6 | 	mov	arg02, ##@LR__4308
0e79c     00 12 06 F6 | 	mov	arg01, #0
0e7a0     00 16 06 F6 | 	mov	arg03, #0
0e7a4     A0 77 B0 FD | 	call	#__system___basic_print_string
0e7a8     00 12 06 F6 | 	mov	arg01, #0
0e7ac     58 C0 B0 FD | 	call	#__system___getiolock_0334
0e7b0     FD 00 68 FC | 	wrlong	#0, result1
0e7b4     28 12 06 F6 | 	mov	arg01, #40
0e7b8     A4 35 B0 FD | 	call	#_printerror
0e7bc     A7 12 02 F6 | 	mov	arg01, fp
0e7c0     0C A7 BF FD | 	call	#_push
0e7c4                 | LR__1173
0e7c4                 | LR__1174
0e7c4                 | LR__1175
0e7c4     A7 F0 03 F6 | 	mov	ptra, fp
0e7c8     B2 00 A0 FD | 	call	#popregs_
0e7cc                 | _do_sin_ret
0e7cc     2D 00 64 FD | 	ret
0e7d0                 | 
0e7d0                 | ' 
0e7d0                 | ' sub do_stick
0e7d0                 | _do_stick
0e7d0     01 4A 05 F6 | 	mov	COUNT_, #1
0e7d4     A8 00 A0 FD | 	call	#pushregs_
0e7d8     10 F0 07 F1 | 	add	ptra, #16
0e7dc     41 00 00 FF 
0e7e0     44 E4 05 F1 | 	add	objptr, ##33348
0e7e4     F2 1E 02 FB | 	rdlong	local01, objptr
0e7e8     0F 17 02 F6 | 	mov	arg03, local01
0e7ec     01 16 66 F0 | 	shl	arg03, #1
0e7f0     0F 17 02 F1 | 	add	arg03, local01
0e7f4     02 16 66 F0 | 	shl	arg03, #2
0e7f8     03 00 00 FF 
0e7fc     04 E4 85 F1 | 	sub	objptr, ##1540
0e800     F2 16 02 F1 | 	add	arg03, objptr
0e804     0B 17 02 FB | 	rdlong	arg03, arg03
0e808     0C 4E 05 F1 | 	add	fp, #12
0e80c     A7 16 62 FC | 	wrlong	arg03, fp
0e810                 | ' 
0e810                 | ' numpar=compiledline(lineptr_e).result.uresult
0e810                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0e810     0C 4E 85 F1 | 	sub	fp, #12
0e814     02 16 16 F2 | 	cmp	arg03, #2 wc
0e818     3E 00 00 FF 
0e81c     40 E4 85 F1 | 	sub	objptr, ##31808
0e820     3C 00 90 CD |  if_b	jmp	#LR__1180
0e824     00 12 06 F6 | 	mov	arg01, #0
0e828     DC BF B0 FD | 	call	#__system___getiolock_0334
0e82c     FD 12 02 F6 | 	mov	arg01, result1
0e830     20 6A B0 FD | 	call	#__system___lockmem
0e834     24 01 00 FF 
0e838     AA 15 06 F6 | 	mov	arg02, ##@LR__4309
0e83c     00 12 06 F6 | 	mov	arg01, #0
0e840     00 16 06 F6 | 	mov	arg03, #0
0e844     00 77 B0 FD | 	call	#__system___basic_print_string
0e848     00 12 06 F6 | 	mov	arg01, #0
0e84c     B8 BF B0 FD | 	call	#__system___getiolock_0334
0e850     FD 00 68 FC | 	wrlong	#0, result1
0e854     27 12 06 F6 | 	mov	arg01, #39
0e858     04 35 B0 FD | 	call	#_printerror
0e85c     E8 00 90 FD | 	jmp	#LR__1184
0e860                 | LR__1180
0e860                 | ' 
0e860                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0e860     0C 4E 05 F1 | 	add	fp, #12
0e864     A7 FE 09 FB | 	rdlong	result3, fp wz
0e868     0C 4E 85 F1 | 	sub	fp, #12
0e86c     30 00 90 5D |  if_ne	jmp	#LR__1181
0e870     51 00 00 FF 
0e874     C0 E5 05 F1 | 	add	objptr, ##41920
0e878     F2 1E 02 FB | 	rdlong	local01, objptr
0e87c     51 00 00 FF 
0e880     C0 E5 85 F1 | 	sub	objptr, ##41920
0e884     A7 1E 62 FC | 	wrlong	local01, fp
0e888     08 4E 05 F1 | 	add	fp, #8
0e88c     A7 3A 68 FC | 	wrlong	#29, fp
0e890     08 4E 85 F1 | 	sub	fp, #8
0e894     A7 12 02 F6 | 	mov	arg01, fp
0e898     34 A6 BF FD | 	call	#_push
0e89c     A8 00 90 FD | 	jmp	#LR__1184
0e8a0                 | LR__1181
0e8a0     94 A5 BF FD | 	call	#_pop
0e8a4     A7 FA 61 FC | 	wrlong	result1, fp
0e8a8     04 4E 05 F1 | 	add	fp, #4
0e8ac     A7 FC 61 FC | 	wrlong	result2, fp
0e8b0     04 4E 05 F1 | 	add	fp, #4
0e8b4     A7 FE 61 FC | 	wrlong	result3, fp
0e8b8                 | ' 
0e8b8                 | ' t1=pop()
0e8b8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e8b8     08 4E 85 F1 | 	sub	fp, #8
0e8bc     1C FE 0D F2 | 	cmp	result3, #28 wz
0e8c0     08 4E 05 51 |  if_ne	add	fp, #8
0e8c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e8c8     08 4E 85 51 |  if_ne	sub	fp, #8
0e8cc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e8d0     6C 00 90 5D |  if_ne	jmp	#LR__1183
0e8d4     A7 1E 02 FB | 	rdlong	local01, fp
0e8d8     52 00 00 FF 
0e8dc     80 E4 05 F1 | 	add	objptr, ##42112
0e8e0     F2 1E 62 FC | 	wrlong	local01, objptr
0e8e4                 | '   q=t1.result.uresult
0e8e4                 | '   if q<7 then 
0e8e4     52 00 00 FF 
0e8e8     80 E4 85 F1 | 	sub	objptr, ##42112
0e8ec     07 1E 56 F2 | 	cmps	local01, #7 wc
0e8f0     40 00 90 3D |  if_ae	jmp	#LR__1182
0e8f4     52 00 00 FF 
0e8f8     80 E4 05 F1 | 	add	objptr, ##42112
0e8fc     F2 1E 02 FB | 	rdlong	local01, objptr
0e900     02 1E 66 F0 | 	shl	local01, #2
0e904     C0 E4 85 F1 | 	sub	objptr, #192
0e908     F2 1E 02 F1 | 	add	local01, objptr
0e90c     0F 1F 02 FB | 	rdlong	local01, local01
0e910     A7 1E 62 FC | 	wrlong	local01, fp
0e914     08 4E 05 F1 | 	add	fp, #8
0e918     A7 3A 68 FC | 	wrlong	#29, fp
0e91c     08 4E 85 F1 | 	sub	fp, #8
0e920     A7 12 02 F6 | 	mov	arg01, fp
0e924     51 00 00 FF 
0e928     C0 E5 85 F1 | 	sub	objptr, ##41920
0e92c     A0 A5 BF FD | 	call	#_push
0e930                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0e930     14 00 90 FD | 	jmp	#LR__1184
0e934                 | LR__1182
0e934     29 12 06 F6 | 	mov	arg01, #41
0e938     24 34 B0 FD | 	call	#_printerror
0e93c                 | '      printerror(41) : return
0e93c     08 00 90 FD | 	jmp	#LR__1184
0e940                 | LR__1183
0e940     29 12 06 F6 | 	mov	arg01, #41
0e944     18 34 B0 FD | 	call	#_printerror
0e948                 | LR__1184
0e948     A7 F0 03 F6 | 	mov	ptra, fp
0e94c     B2 00 A0 FD | 	call	#popregs_
0e950                 | _do_stick_ret
0e950     2D 00 64 FD | 	ret
0e954                 | 
0e954                 | ' 
0e954                 | ' sub do_strig
0e954                 | _do_strig
0e954     01 4A 05 F6 | 	mov	COUNT_, #1
0e958     A8 00 A0 FD | 	call	#pushregs_
0e95c     10 F0 07 F1 | 	add	ptra, #16
0e960     41 00 00 FF 
0e964     44 E4 05 F1 | 	add	objptr, ##33348
0e968     F2 1E 02 FB | 	rdlong	local01, objptr
0e96c     0F 17 02 F6 | 	mov	arg03, local01
0e970     01 16 66 F0 | 	shl	arg03, #1
0e974     0F 17 02 F1 | 	add	arg03, local01
0e978     02 16 66 F0 | 	shl	arg03, #2
0e97c     03 00 00 FF 
0e980     04 E4 85 F1 | 	sub	objptr, ##1540
0e984     F2 16 02 F1 | 	add	arg03, objptr
0e988     0B 17 02 FB | 	rdlong	arg03, arg03
0e98c     0C 4E 05 F1 | 	add	fp, #12
0e990     A7 16 62 FC | 	wrlong	arg03, fp
0e994                 | ' 
0e994                 | ' numpar=compiledline(lineptr_e).result.uresult
0e994                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0e994     0C 4E 85 F1 | 	sub	fp, #12
0e998     02 16 16 F2 | 	cmp	arg03, #2 wc
0e99c     3E 00 00 FF 
0e9a0     40 E4 85 F1 | 	sub	objptr, ##31808
0e9a4     3C 00 90 CD |  if_b	jmp	#LR__1190
0e9a8     00 12 06 F6 | 	mov	arg01, #0
0e9ac     58 BE B0 FD | 	call	#__system___getiolock_0334
0e9b0     FD 12 02 F6 | 	mov	arg01, result1
0e9b4     9C 68 B0 FD | 	call	#__system___lockmem
0e9b8     24 01 00 FF 
0e9bc     B2 15 06 F6 | 	mov	arg02, ##@LR__4310
0e9c0     00 12 06 F6 | 	mov	arg01, #0
0e9c4     00 16 06 F6 | 	mov	arg03, #0
0e9c8     7C 75 B0 FD | 	call	#__system___basic_print_string
0e9cc     00 12 06 F6 | 	mov	arg01, #0
0e9d0     34 BE B0 FD | 	call	#__system___getiolock_0334
0e9d4     FD 00 68 FC | 	wrlong	#0, result1
0e9d8     27 12 06 F6 | 	mov	arg01, #39
0e9dc     80 33 B0 FD | 	call	#_printerror
0e9e0     E8 00 90 FD | 	jmp	#LR__1194
0e9e4                 | LR__1190
0e9e4                 | ' 
0e9e4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0e9e4     0C 4E 05 F1 | 	add	fp, #12
0e9e8     A7 FE 09 FB | 	rdlong	result3, fp wz
0e9ec     0C 4E 85 F1 | 	sub	fp, #12
0e9f0     30 00 90 5D |  if_ne	jmp	#LR__1191
0e9f4     51 00 00 FF 
0e9f8     DC E5 05 F1 | 	add	objptr, ##41948
0e9fc     F2 1E 02 FB | 	rdlong	local01, objptr
0ea00     51 00 00 FF 
0ea04     DC E5 85 F1 | 	sub	objptr, ##41948
0ea08     A7 1E 62 FC | 	wrlong	local01, fp
0ea0c     08 4E 05 F1 | 	add	fp, #8
0ea10     A7 3A 68 FC | 	wrlong	#29, fp
0ea14     08 4E 85 F1 | 	sub	fp, #8
0ea18     A7 12 02 F6 | 	mov	arg01, fp
0ea1c     B0 A4 BF FD | 	call	#_push
0ea20     A8 00 90 FD | 	jmp	#LR__1194
0ea24                 | LR__1191
0ea24     10 A4 BF FD | 	call	#_pop
0ea28     A7 FA 61 FC | 	wrlong	result1, fp
0ea2c     04 4E 05 F1 | 	add	fp, #4
0ea30     A7 FC 61 FC | 	wrlong	result2, fp
0ea34     04 4E 05 F1 | 	add	fp, #4
0ea38     A7 FE 61 FC | 	wrlong	result3, fp
0ea3c                 | ' 
0ea3c                 | ' t1=pop()
0ea3c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0ea3c     08 4E 85 F1 | 	sub	fp, #8
0ea40     1C FE 0D F2 | 	cmp	result3, #28 wz
0ea44     08 4E 05 51 |  if_ne	add	fp, #8
0ea48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ea4c     08 4E 85 51 |  if_ne	sub	fp, #8
0ea50     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ea54     6C 00 90 5D |  if_ne	jmp	#LR__1193
0ea58     A7 1E 02 FB | 	rdlong	local01, fp
0ea5c     52 00 00 FF 
0ea60     80 E4 05 F1 | 	add	objptr, ##42112
0ea64     F2 1E 62 FC | 	wrlong	local01, objptr
0ea68                 | '   q=t1.result.uresult
0ea68                 | '   if q<7 then 
0ea68     52 00 00 FF 
0ea6c     80 E4 85 F1 | 	sub	objptr, ##42112
0ea70     07 1E 56 F2 | 	cmps	local01, #7 wc
0ea74     40 00 90 3D |  if_ae	jmp	#LR__1192
0ea78     52 00 00 FF 
0ea7c     80 E4 05 F1 | 	add	objptr, ##42112
0ea80     F2 1E 02 FB | 	rdlong	local01, objptr
0ea84     02 1E 66 F0 | 	shl	local01, #2
0ea88     A4 E4 85 F1 | 	sub	objptr, #164
0ea8c     F2 1E 02 F1 | 	add	local01, objptr
0ea90     0F 1F 02 FB | 	rdlong	local01, local01
0ea94     A7 1E 62 FC | 	wrlong	local01, fp
0ea98     08 4E 05 F1 | 	add	fp, #8
0ea9c     A7 3A 68 FC | 	wrlong	#29, fp
0eaa0     08 4E 85 F1 | 	sub	fp, #8
0eaa4     A7 12 02 F6 | 	mov	arg01, fp
0eaa8     51 00 00 FF 
0eaac     DC E5 85 F1 | 	sub	objptr, ##41948
0eab0     1C A4 BF FD | 	call	#_push
0eab4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0eab4     14 00 90 FD | 	jmp	#LR__1194
0eab8                 | LR__1192
0eab8     29 12 06 F6 | 	mov	arg01, #41
0eabc     A0 32 B0 FD | 	call	#_printerror
0eac0                 | '      printerror(41) : return
0eac0     08 00 90 FD | 	jmp	#LR__1194
0eac4                 | LR__1193
0eac4     29 12 06 F6 | 	mov	arg01, #41
0eac8     94 32 B0 FD | 	call	#_printerror
0eacc                 | LR__1194
0eacc     A7 F0 03 F6 | 	mov	ptra, fp
0ead0     B2 00 A0 FD | 	call	#popregs_
0ead4                 | _do_strig_ret
0ead4     2D 00 64 FD | 	ret
0ead8                 | 
0ead8                 | ' 
0ead8                 | ' sub do_getpixel
0ead8                 | _do_getpixel
0ead8     00 4A 05 F6 | 	mov	COUNT_, #0
0eadc     A8 00 A0 FD | 	call	#pushregs_
0eae0     24 F0 07 F1 | 	add	ptra, #36
0eae4     41 00 00 FF 
0eae8     44 E4 05 F1 | 	add	objptr, ##33348
0eaec     F2 16 02 FB | 	rdlong	arg03, objptr
0eaf0     0B 15 02 F6 | 	mov	arg02, arg03
0eaf4     01 14 66 F0 | 	shl	arg02, #1
0eaf8     0B 15 02 F1 | 	add	arg02, arg03
0eafc     02 14 66 F0 | 	shl	arg02, #2
0eb00     03 00 00 FF 
0eb04     04 E4 85 F1 | 	sub	objptr, ##1540
0eb08     F2 14 02 F1 | 	add	arg02, objptr
0eb0c     0A 17 02 FB | 	rdlong	arg03, arg02
0eb10     18 4E 05 F1 | 	add	fp, #24
0eb14     A7 16 62 FC | 	wrlong	arg03, fp
0eb18                 | ' 
0eb18                 | ' numpar=compiledline(lineptr_e).result.uresult
0eb18                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0eb18     18 4E 85 F1 | 	sub	fp, #24
0eb1c     02 16 0E F2 | 	cmp	arg03, #2 wz
0eb20     3E 00 00 FF 
0eb24     40 E4 85 F1 | 	sub	objptr, ##31808
0eb28     3C 00 90 AD |  if_e	jmp	#LR__1200
0eb2c     00 12 06 F6 | 	mov	arg01, #0
0eb30     D4 BC B0 FD | 	call	#__system___getiolock_0334
0eb34     FD 12 02 F6 | 	mov	arg01, result1
0eb38     18 67 B0 FD | 	call	#__system___lockmem
0eb3c     24 01 00 FF 
0eb40     BA 15 06 F6 | 	mov	arg02, ##@LR__4311
0eb44     00 12 06 F6 | 	mov	arg01, #0
0eb48     00 16 06 F6 | 	mov	arg03, #0
0eb4c     F8 73 B0 FD | 	call	#__system___basic_print_string
0eb50     00 12 06 F6 | 	mov	arg01, #0
0eb54     B0 BC B0 FD | 	call	#__system___getiolock_0334
0eb58     FD 00 68 FC | 	wrlong	#0, result1
0eb5c     27 12 06 F6 | 	mov	arg01, #39
0eb60     FC 31 B0 FD | 	call	#_printerror
0eb64     B4 00 90 FD | 	jmp	#LR__1201
0eb68                 | LR__1200
0eb68     CC A2 BF FD | 	call	#_pop
0eb6c     FD 16 02 F6 | 	mov	arg03, result1
0eb70     FE 14 02 F6 | 	mov	arg02, result2
0eb74     FF 12 02 F6 | 	mov	arg01, result3
0eb78     0C 4E 05 F1 | 	add	fp, #12
0eb7c     A7 16 62 FC | 	wrlong	arg03, fp
0eb80     04 4E 05 F1 | 	add	fp, #4
0eb84     A7 14 62 FC | 	wrlong	arg02, fp
0eb88     04 4E 05 F1 | 	add	fp, #4
0eb8c     A7 12 62 FC | 	wrlong	arg01, fp
0eb90     14 4E 85 F1 | 	sub	fp, #20
0eb94     A0 A2 BF FD | 	call	#_pop
0eb98     FF 16 02 F6 | 	mov	arg03, result3
0eb9c     A7 FA 61 FC | 	wrlong	result1, fp
0eba0     04 4E 05 F1 | 	add	fp, #4
0eba4     A7 FC 61 FC | 	wrlong	result2, fp
0eba8     04 4E 05 F1 | 	add	fp, #4
0ebac     A7 16 62 FC | 	wrlong	arg03, fp
0ebb0     08 4E 85 F1 | 	sub	fp, #8
0ebb4     A7 12 02 F6 | 	mov	arg01, fp
0ebb8     E4 F7 BF FD | 	call	#_converttoint
0ebbc     1C 4E 05 F1 | 	add	fp, #28
0ebc0     A7 FA 61 FC | 	wrlong	result1, fp
0ebc4     10 4E 85 F1 | 	sub	fp, #16
0ebc8     A7 12 02 F6 | 	mov	arg01, fp
0ebcc     0C 4E 85 F1 | 	sub	fp, #12
0ebd0     CC F7 BF FD | 	call	#_converttoint
0ebd4     FD 16 02 F6 | 	mov	arg03, result1
0ebd8     20 4E 05 F1 | 	add	fp, #32
0ebdc     A7 16 62 FC | 	wrlong	arg03, fp
0ebe0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebe4     04 4E 85 F1 | 	sub	fp, #4
0ebe8     A7 FE 01 FB | 	rdlong	result3, fp
0ebec     FF 12 02 F1 | 	add	arg01, result3
0ebf0     1C 4E 85 F1 | 	sub	fp, #28
0ebf4     0A 16 66 F0 | 	shl	arg03, #10
0ebf8     0B 13 02 F1 | 	add	arg01, arg03
0ebfc     C4 32 B0 FD | 	call	#_pspeek
0ec00     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ec04     A7 FA 61 FC | 	wrlong	result1, fp
0ec08     08 4E 05 F1 | 	add	fp, #8
0ec0c     A7 3A 68 FC | 	wrlong	#29, fp
0ec10     08 4E 85 F1 | 	sub	fp, #8
0ec14     A7 12 02 F6 | 	mov	arg01, fp
0ec18     B4 A2 BF FD | 	call	#_push
0ec1c                 | LR__1201
0ec1c     A7 F0 03 F6 | 	mov	ptra, fp
0ec20     B2 00 A0 FD | 	call	#popregs_
0ec24                 | _do_getpixel_ret
0ec24     2D 00 64 FD | 	ret
0ec28                 | 
0ec28                 | ' 
0ec28                 | ' 
0ec28                 | ' 
0ec28                 | ' sub do_defsprite
0ec28                 | _do_defsprite
0ec28     07 4A 05 F6 | 	mov	COUNT_, #7
0ec2c     A8 00 A0 FD | 	call	#pushregs_
0ec30     5C F0 07 F1 | 	add	ptra, #92
0ec34     00 A2 BF FD | 	call	#_pop
0ec38     FD 16 02 F6 | 	mov	arg03, result1
0ec3c     FE 14 02 F6 | 	mov	arg02, result2
0ec40     FF 12 02 F6 | 	mov	arg01, result3
0ec44     30 4E 05 F1 | 	add	fp, #48
0ec48     A7 16 62 FC | 	wrlong	arg03, fp
0ec4c     04 4E 05 F1 | 	add	fp, #4
0ec50     A7 14 62 FC | 	wrlong	arg02, fp
0ec54     04 4E 05 F1 | 	add	fp, #4
0ec58     A7 12 62 FC | 	wrlong	arg01, fp
0ec5c     38 4E 85 F1 | 	sub	fp, #56
0ec60     D4 A1 BF FD | 	call	#_pop
0ec64     FD 16 02 F6 | 	mov	arg03, result1
0ec68     FE 14 02 F6 | 	mov	arg02, result2
0ec6c     FF 12 02 F6 | 	mov	arg01, result3
0ec70     24 4E 05 F1 | 	add	fp, #36
0ec74     A7 16 62 FC | 	wrlong	arg03, fp
0ec78     04 4E 05 F1 | 	add	fp, #4
0ec7c     A7 14 62 FC | 	wrlong	arg02, fp
0ec80     04 4E 05 F1 | 	add	fp, #4
0ec84     A7 12 62 FC | 	wrlong	arg01, fp
0ec88     2C 4E 85 F1 | 	sub	fp, #44
0ec8c     A8 A1 BF FD | 	call	#_pop
0ec90     FD 16 02 F6 | 	mov	arg03, result1
0ec94     FE 14 02 F6 | 	mov	arg02, result2
0ec98     FF 12 02 F6 | 	mov	arg01, result3
0ec9c     18 4E 05 F1 | 	add	fp, #24
0eca0     A7 16 62 FC | 	wrlong	arg03, fp
0eca4     04 4E 05 F1 | 	add	fp, #4
0eca8     A7 14 62 FC | 	wrlong	arg02, fp
0ecac     04 4E 05 F1 | 	add	fp, #4
0ecb0     A7 12 62 FC | 	wrlong	arg01, fp
0ecb4     20 4E 85 F1 | 	sub	fp, #32
0ecb8     7C A1 BF FD | 	call	#_pop
0ecbc     FD 16 02 F6 | 	mov	arg03, result1
0ecc0     FE 14 02 F6 | 	mov	arg02, result2
0ecc4     FF 12 02 F6 | 	mov	arg01, result3
0ecc8     0C 4E 05 F1 | 	add	fp, #12
0eccc     A7 16 62 FC | 	wrlong	arg03, fp
0ecd0     04 4E 05 F1 | 	add	fp, #4
0ecd4     A7 14 62 FC | 	wrlong	arg02, fp
0ecd8     04 4E 05 F1 | 	add	fp, #4
0ecdc     A7 12 62 FC | 	wrlong	arg01, fp
0ece0     14 4E 85 F1 | 	sub	fp, #20
0ece4     50 A1 BF FD | 	call	#_pop
0ece8     FF 16 02 F6 | 	mov	arg03, result3
0ecec     A7 FA 61 FC | 	wrlong	result1, fp
0ecf0     04 4E 05 F1 | 	add	fp, #4
0ecf4     A7 FC 61 FC | 	wrlong	result2, fp
0ecf8     04 4E 05 F1 | 	add	fp, #4
0ecfc     A7 16 62 FC | 	wrlong	arg03, fp
0ed00     08 4E 85 F1 | 	sub	fp, #8
0ed04     A7 12 02 F6 | 	mov	arg01, fp
0ed08     94 F6 BF FD | 	call	#_converttoint
0ed0c     3C 4E 05 F1 | 	add	fp, #60
0ed10     A7 FA 61 FC | 	wrlong	result1, fp
0ed14     30 4E 85 F1 | 	sub	fp, #48
0ed18     A7 12 02 F6 | 	mov	arg01, fp
0ed1c     0C 4E 85 F1 | 	sub	fp, #12
0ed20     7C F6 BF FD | 	call	#_converttoint
0ed24     40 4E 05 F1 | 	add	fp, #64
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c     28 4E 85 F1 | 	sub	fp, #40
0ed30     A7 12 02 F6 | 	mov	arg01, fp
0ed34     18 4E 85 F1 | 	sub	fp, #24
0ed38     64 F6 BF FD | 	call	#_converttoint
0ed3c     44 4E 05 F1 | 	add	fp, #68
0ed40     A7 FA 61 FC | 	wrlong	result1, fp
0ed44     20 4E 85 F1 | 	sub	fp, #32
0ed48     A7 12 02 F6 | 	mov	arg01, fp
0ed4c     24 4E 85 F1 | 	sub	fp, #36
0ed50     4C F6 BF FD | 	call	#_converttoint
0ed54     48 4E 05 F1 | 	add	fp, #72
0ed58     A7 FA 61 FC | 	wrlong	result1, fp
0ed5c     18 4E 85 F1 | 	sub	fp, #24
0ed60     A7 12 02 F6 | 	mov	arg01, fp
0ed64     30 4E 85 F1 | 	sub	fp, #48
0ed68     34 F6 BF FD | 	call	#_converttoint
0ed6c     4C 4E 05 F1 | 	add	fp, #76
0ed70     A7 FA 61 FC | 	wrlong	result1, fp
0ed74                 | ' 
0ed74                 | ' t5=pop()
0ed74                 | ' t4=pop()
0ed74                 | ' t3=pop()
0ed74                 | ' t2=pop()
0ed74                 | ' t1=pop()
0ed74                 | ' 
0ed74                 | ' ' do convert, defsprite is not a racing command
0ed74                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0ed74                 | '  
0ed74                 | ' ' todo: check parameters for linits
0ed74                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0ed74     10 4E 85 F1 | 	sub	fp, #16
0ed78     A7 16 02 FB | 	rdlong	arg03, fp
0ed7c     3C 4E 85 F1 | 	sub	fp, #60
0ed80     02 16 66 F0 | 	shl	arg03, #2
0ed84     51 00 00 FF 
0ed88     F8 E5 05 F1 | 	add	objptr, ##41976
0ed8c     F2 16 02 F1 | 	add	arg03, objptr
0ed90     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0ed94     51 00 00 FF 
0ed98     F8 E5 85 F1 | 	sub	objptr, ##41976
0ed9c     2C 00 90 AD |  if_e	jmp	#LR__1210
0eda0     3C 4E 05 F1 | 	add	fp, #60
0eda4     A7 16 02 FB | 	rdlong	arg03, fp
0eda8     3C 4E 85 F1 | 	sub	fp, #60
0edac     02 16 66 F0 | 	shl	arg03, #2
0edb0     51 00 00 FF 
0edb4     F8 E5 05 F1 | 	add	objptr, ##41976
0edb8     F2 16 02 F1 | 	add	arg03, objptr
0edbc     0B 13 02 FB | 	rdlong	arg01, arg03
0edc0     51 00 00 FF 
0edc4     F8 E5 85 F1 | 	sub	objptr, ##41976
0edc8     2C A0 B0 FD | 	call	#__system___gc_free
0edcc                 | LR__1210
0edcc     3C 4E 05 F1 | 	add	fp, #60
0edd0     A7 1E 02 FB | 	rdlong	local01, fp
0edd4     0C 4E 05 F1 | 	add	fp, #12
0edd8     A7 16 02 FB | 	rdlong	arg03, fp
0eddc     04 4E 05 F1 | 	add	fp, #4
0ede0     A7 14 02 FB | 	rdlong	arg02, fp
0ede4     0A 17 02 FD | 	qmul	arg03, arg02
0ede8     02 1E 66 F0 | 	shl	local01, #2
0edec     51 00 00 FF 
0edf0     F8 E5 05 F1 | 	add	objptr, ##41976
0edf4     F2 1E 02 F1 | 	add	local01, objptr
0edf8     4C 4E 85 F1 | 	sub	fp, #76
0edfc     51 00 00 FF 
0ee00     F8 E5 85 F1 | 	sub	objptr, ##41976
0ee04     18 12 62 FD | 	getqx	arg01
0ee08     B0 9E B0 FD | 	call	#__system___gc_alloc_managed
0ee0c     0F FB 61 FC | 	wrlong	result1, local01
0ee10                 | ' for y=a3 to a3+a5-1
0ee10     44 4E 05 F1 | 	add	fp, #68
0ee14     A7 20 02 FB | 	rdlong	local02, fp
0ee18     0C 4E 05 F1 | 	add	fp, #12
0ee1c     A7 20 62 FC | 	wrlong	local02, fp
0ee20     0C 4E 85 F1 | 	sub	fp, #12
0ee24     A7 22 02 FB | 	rdlong	local03, fp
0ee28     08 4E 05 F1 | 	add	fp, #8
0ee2c     A7 24 02 FB | 	rdlong	local04, fp
0ee30     4C 4E 85 F1 | 	sub	fp, #76
0ee34     12 23 02 F1 | 	add	local03, local04
0ee38                 | LR__1211
0ee38     50 4E 05 F1 | 	add	fp, #80
0ee3c     A7 20 02 FB | 	rdlong	local02, fp
0ee40     50 4E 85 F1 | 	sub	fp, #80
0ee44     11 21 52 F2 | 	cmps	local02, local03 wc
0ee48     10 01 90 3D |  if_ae	jmp	#LR__1214
0ee4c                 | '   for x=a2 to a4+a2-1
0ee4c     40 4E 05 F1 | 	add	fp, #64
0ee50     A7 1E 02 FB | 	rdlong	local01, fp
0ee54     52 00 00 FF 
0ee58     54 E4 05 F1 | 	add	objptr, ##42068
0ee5c     F2 1E 62 FC | 	wrlong	local01, objptr
0ee60     52 00 00 FF 
0ee64     54 E4 85 F1 | 	sub	objptr, ##42068
0ee68     08 4E 05 F1 | 	add	fp, #8
0ee6c     A7 26 02 FB | 	rdlong	local05, fp
0ee70     08 4E 85 F1 | 	sub	fp, #8
0ee74     A7 28 02 FB | 	rdlong	local06, fp
0ee78     40 4E 85 F1 | 	sub	fp, #64
0ee7c     14 27 02 F1 | 	add	local05, local06
0ee80                 | LR__1212
0ee80     52 00 00 FF 
0ee84     54 E4 05 F1 | 	add	objptr, ##42068
0ee88     F2 1E 02 FB | 	rdlong	local01, objptr
0ee8c     52 00 00 FF 
0ee90     54 E4 85 F1 | 	sub	objptr, ##42068
0ee94     13 1F 52 F2 | 	cmps	local01, local05 wc
0ee98     A8 00 90 3D |  if_ae	jmp	#LR__1213
0ee9c     3C 4E 05 F1 | 	add	fp, #60
0eea0     A7 28 02 FB | 	rdlong	local06, fp
0eea4     04 4E 05 F1 | 	add	fp, #4
0eea8     A7 24 02 FB | 	rdlong	local04, fp
0eeac     10 4E 05 F1 | 	add	fp, #16
0eeb0     A7 20 02 FB | 	rdlong	local02, fp
0eeb4     10 1F 02 F6 | 	mov	local01, local02
0eeb8     0C 4E 85 F1 | 	sub	fp, #12
0eebc     A7 16 02 FB | 	rdlong	arg03, fp
0eec0     0B 1F 82 F1 | 	sub	local01, arg03
0eec4     04 4E 05 F1 | 	add	fp, #4
0eec8     A7 16 02 FB | 	rdlong	arg03, fp
0eecc     0B 1F 02 FD | 	qmul	local01, arg03
0eed0     02 28 66 F0 | 	shl	local06, #2
0eed4     51 00 00 FF 
0eed8     F8 E5 05 F1 | 	add	objptr, ##41976
0eedc     F2 28 02 F1 | 	add	local06, objptr
0eee0     14 29 02 FB | 	rdlong	local06, local06
0eee4     5C E4 05 F1 | 	add	objptr, #92
0eee8     F2 1E 02 FB | 	rdlong	local01, objptr
0eeec     52 00 00 FF 
0eef0     54 E4 85 F1 | 	sub	objptr, ##42068
0eef4     0F 2B 02 F6 | 	mov	local07, local01
0eef8     12 2B 82 F1 | 	sub	local07, local04
0eefc     F2 12 02 FB | 	rdlong	arg01, objptr
0ef00     0F 13 02 F1 | 	add	arg01, local01
0ef04     48 4E 85 F1 | 	sub	fp, #72
0ef08     0A 20 66 F0 | 	shl	local02, #10
0ef0c     10 13 02 F1 | 	add	arg01, local02
0ef10     18 24 62 FD | 	getqx	local04
0ef14     12 2B 02 F1 | 	add	local07, local04
0ef18     14 2B 02 F1 | 	add	local07, local06
0ef1c     A4 2F B0 FD | 	call	#_pspeek
0ef20     15 FB 41 FC | 	wrbyte	result1, local07
0ef24     52 00 00 FF 
0ef28     54 E4 05 F1 | 	add	objptr, ##42068
0ef2c     F2 2A 02 FB | 	rdlong	local07, objptr
0ef30     01 2A 06 F1 | 	add	local07, #1
0ef34     F2 2A 62 FC | 	wrlong	local07, objptr
0ef38     52 00 00 FF 
0ef3c     54 E4 85 F1 | 	sub	objptr, ##42068
0ef40     3C FF 9F FD | 	jmp	#LR__1212
0ef44                 | LR__1213
0ef44     50 4E 05 F1 | 	add	fp, #80
0ef48     A7 2A 02 FB | 	rdlong	local07, fp
0ef4c     01 2A 06 F1 | 	add	local07, #1
0ef50     A7 2A 62 FC | 	wrlong	local07, fp
0ef54     50 4E 85 F1 | 	sub	fp, #80
0ef58     DC FE 9F FD | 	jmp	#LR__1211
0ef5c                 | LR__1214
0ef5c     3C 4E 05 F1 | 	add	fp, #60
0ef60     A7 2A 02 FB | 	rdlong	local07, fp
0ef64     15 13 02 F6 | 	mov	arg01, local07
0ef68     3C 4E 85 F1 | 	sub	fp, #60
0ef6c     02 2A 66 F0 | 	shl	local07, #2
0ef70     51 00 00 FF 
0ef74     F8 E5 05 F1 | 	add	objptr, ##41976
0ef78     F2 2A 02 F1 | 	add	local07, objptr
0ef7c     15 15 02 FB | 	rdlong	arg02, local07
0ef80     51 00 00 FF 
0ef84     F8 E5 85 F1 | 	sub	objptr, ##41976
0ef88     B0 42 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0ef8c     3C 4E 05 F1 | 	add	fp, #60
0ef90     A7 12 02 FB | 	rdlong	arg01, fp
0ef94     0C 4E 05 F1 | 	add	fp, #12
0ef98     A7 14 02 FB | 	rdlong	arg02, fp
0ef9c     04 4E 05 F1 | 	add	fp, #4
0efa0     A7 16 02 FB | 	rdlong	arg03, fp
0efa4     4C 4E 85 F1 | 	sub	fp, #76
0efa8     04 43 B0 FD | 	call	#_hg010b_spin2_setspritesize
0efac     A7 F0 03 F6 | 	mov	ptra, fp
0efb0     B2 00 A0 FD | 	call	#popregs_
0efb4                 | _do_defsprite_ret
0efb4     2D 00 64 FD | 	ret
0efb8                 | 
0efb8                 | ' 
0efb8                 | ' sub do_sprite
0efb8                 | _do_sprite
0efb8     00 4A 05 F6 | 	mov	COUNT_, #0
0efbc     A8 00 A0 FD | 	call	#pushregs_
0efc0     30 F0 07 F1 | 	add	ptra, #48
0efc4     70 9E BF FD | 	call	#_pop
0efc8     FD 16 02 F6 | 	mov	arg03, result1
0efcc     FE 14 02 F6 | 	mov	arg02, result2
0efd0     FF 12 02 F6 | 	mov	arg01, result3
0efd4     18 4E 05 F1 | 	add	fp, #24
0efd8     A7 16 62 FC | 	wrlong	arg03, fp
0efdc     04 4E 05 F1 | 	add	fp, #4
0efe0     A7 14 62 FC | 	wrlong	arg02, fp
0efe4     04 4E 05 F1 | 	add	fp, #4
0efe8     A7 12 62 FC | 	wrlong	arg01, fp
0efec     20 4E 85 F1 | 	sub	fp, #32
0eff0     44 9E BF FD | 	call	#_pop
0eff4     FD 16 02 F6 | 	mov	arg03, result1
0eff8     FE 14 02 F6 | 	mov	arg02, result2
0effc     FF 12 02 F6 | 	mov	arg01, result3
0f000     0C 4E 05 F1 | 	add	fp, #12
0f004     A7 16 62 FC | 	wrlong	arg03, fp
0f008     04 4E 05 F1 | 	add	fp, #4
0f00c     A7 14 62 FC | 	wrlong	arg02, fp
0f010     04 4E 05 F1 | 	add	fp, #4
0f014     A7 12 62 FC | 	wrlong	arg01, fp
0f018     14 4E 85 F1 | 	sub	fp, #20
0f01c     18 9E BF FD | 	call	#_pop
0f020     FF 16 02 F6 | 	mov	arg03, result3
0f024     A7 FA 61 FC | 	wrlong	result1, fp
0f028     04 4E 05 F1 | 	add	fp, #4
0f02c     A7 FC 61 FC | 	wrlong	result2, fp
0f030     04 4E 05 F1 | 	add	fp, #4
0f034     A7 16 62 FC | 	wrlong	arg03, fp
0f038     08 4E 85 F1 | 	sub	fp, #8
0f03c     A7 12 02 F6 | 	mov	arg01, fp
0f040     5C F3 BF FD | 	call	#_converttoint
0f044     24 4E 05 F1 | 	add	fp, #36
0f048     A7 FA 61 FC | 	wrlong	result1, fp
0f04c     18 4E 85 F1 | 	sub	fp, #24
0f050     A7 12 02 F6 | 	mov	arg01, fp
0f054     0C 4E 85 F1 | 	sub	fp, #12
0f058     44 F3 BF FD | 	call	#_converttoint
0f05c     28 4E 05 F1 | 	add	fp, #40
0f060     A7 FA 61 FC | 	wrlong	result1, fp
0f064     10 4E 85 F1 | 	sub	fp, #16
0f068     A7 12 02 F6 | 	mov	arg01, fp
0f06c     18 4E 85 F1 | 	sub	fp, #24
0f070     2C F3 BF FD | 	call	#_converttoint
0f074     2C 4E 05 F1 | 	add	fp, #44
0f078     A7 FA 61 FC | 	wrlong	result1, fp
0f07c     08 4E 85 F1 | 	sub	fp, #8
0f080     A7 12 02 FB | 	rdlong	arg01, fp
0f084     04 4E 05 F1 | 	add	fp, #4
0f088     A7 14 02 FB | 	rdlong	arg02, fp
0f08c     FD 16 02 F6 | 	mov	arg03, result1
0f090     28 4E 85 F1 | 	sub	fp, #40
0f094     CC 41 B0 FD | 	call	#_hg010b_spin2_setspritepos
0f098     A7 F0 03 F6 | 	mov	ptra, fp
0f09c     B2 00 A0 FD | 	call	#popregs_
0f0a0                 | _do_sprite_ret
0f0a0     2D 00 64 FD | 	ret
0f0a4                 | 
0f0a4                 | ' 
0f0a4                 | ' sub do_mousex
0f0a4                 | _do_mousex
0f0a4     00 4A 05 F6 | 	mov	COUNT_, #0
0f0a8     A8 00 A0 FD | 	call	#pushregs_
0f0ac     0C F0 07 F1 | 	add	ptra, #12
0f0b0     08 4E 05 F1 | 	add	fp, #8
0f0b4     A7 3A 68 FC | 	wrlong	#29, fp
0f0b8     08 4E 85 F1 | 	sub	fp, #8
0f0bc     51 00 00 FF 
0f0c0     B0 E5 05 F1 | 	add	objptr, ##41904
0f0c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f0c8     51 00 00 FF 
0f0cc     B0 E5 85 F1 | 	sub	objptr, ##41904
0f0d0     A7 12 62 FC | 	wrlong	arg01, fp
0f0d4     A7 12 02 F6 | 	mov	arg01, fp
0f0d8     F4 9D BF FD | 	call	#_push
0f0dc     A7 F0 03 F6 | 	mov	ptra, fp
0f0e0     B2 00 A0 FD | 	call	#popregs_
0f0e4                 | _do_mousex_ret
0f0e4     2D 00 64 FD | 	ret
0f0e8                 | 
0f0e8                 | ' 
0f0e8                 | ' sub do_mousey
0f0e8                 | _do_mousey
0f0e8     00 4A 05 F6 | 	mov	COUNT_, #0
0f0ec     A8 00 A0 FD | 	call	#pushregs_
0f0f0     0C F0 07 F1 | 	add	ptra, #12
0f0f4     08 4E 05 F1 | 	add	fp, #8
0f0f8     A7 3A 68 FC | 	wrlong	#29, fp
0f0fc     08 4E 85 F1 | 	sub	fp, #8
0f100     51 00 00 FF 
0f104     B4 E5 05 F1 | 	add	objptr, ##41908
0f108     F2 12 02 FB | 	rdlong	arg01, objptr
0f10c     51 00 00 FF 
0f110     B4 E5 85 F1 | 	sub	objptr, ##41908
0f114     A7 12 62 FC | 	wrlong	arg01, fp
0f118     A7 12 02 F6 | 	mov	arg01, fp
0f11c     B0 9D BF FD | 	call	#_push
0f120     A7 F0 03 F6 | 	mov	ptra, fp
0f124     B2 00 A0 FD | 	call	#popregs_
0f128                 | _do_mousey_ret
0f128     2D 00 64 FD | 	ret
0f12c                 | 
0f12c                 | ' 
0f12c                 | ' sub do_mousew
0f12c                 | _do_mousew
0f12c     00 4A 05 F6 | 	mov	COUNT_, #0
0f130     A8 00 A0 FD | 	call	#pushregs_
0f134     0C F0 07 F1 | 	add	ptra, #12
0f138     08 4E 05 F1 | 	add	fp, #8
0f13c     A7 38 68 FC | 	wrlong	#28, fp
0f140     08 4E 85 F1 | 	sub	fp, #8
0f144     51 00 00 FF 
0f148     BC E5 05 F1 | 	add	objptr, ##41916
0f14c     F2 12 02 FB | 	rdlong	arg01, objptr
0f150     51 00 00 FF 
0f154     BC E5 85 F1 | 	sub	objptr, ##41916
0f158     A7 12 62 FC | 	wrlong	arg01, fp
0f15c     A7 12 02 F6 | 	mov	arg01, fp
0f160     6C 9D BF FD | 	call	#_push
0f164     A7 F0 03 F6 | 	mov	ptra, fp
0f168     B2 00 A0 FD | 	call	#popregs_
0f16c                 | _do_mousew_ret
0f16c     2D 00 64 FD | 	ret
0f170                 | 
0f170                 | ' 
0f170                 | ' sub do_mousek
0f170                 | _do_mousek
0f170     00 4A 05 F6 | 	mov	COUNT_, #0
0f174     A8 00 A0 FD | 	call	#pushregs_
0f178     0C F0 07 F1 | 	add	ptra, #12
0f17c     08 4E 05 F1 | 	add	fp, #8
0f180     A7 3A 68 FC | 	wrlong	#29, fp
0f184     08 4E 85 F1 | 	sub	fp, #8
0f188     51 00 00 FF 
0f18c     B8 E5 05 F1 | 	add	objptr, ##41912
0f190     F2 12 02 FB | 	rdlong	arg01, objptr
0f194     51 00 00 FF 
0f198     B8 E5 85 F1 | 	sub	objptr, ##41912
0f19c     A7 12 62 FC | 	wrlong	arg01, fp
0f1a0     A7 12 02 F6 | 	mov	arg01, fp
0f1a4     28 9D BF FD | 	call	#_push
0f1a8     A7 F0 03 F6 | 	mov	ptra, fp
0f1ac     B2 00 A0 FD | 	call	#popregs_
0f1b0                 | _do_mousek_ret
0f1b0     2D 00 64 FD | 	ret
0f1b4                 | 
0f1b4                 | ' sub do_gettime
0f1b4                 | _do_gettime
0f1b4     02 4A 05 F6 | 	mov	COUNT_, #2
0f1b8     A8 00 A0 FD | 	call	#pushregs_
0f1bc     14 F0 07 F1 | 	add	ptra, #20
0f1c0                 | ' 
0f1c0                 | ' const asm 
0f1c0     1A 1E 72 FD | 	getct	local01 wc
0f1c4     1A 20 62 FD | 	getct	local02
0f1c8                 | ' 
0f1c8                 | ' return hi1, lo1
0f1c8     10 FD 01 F6 | 	mov	result2, local02
0f1cc     A7 1E 62 FC | 	wrlong	local01, fp
0f1d0     04 4E 05 F1 | 	add	fp, #4
0f1d4     A7 FC 61 FC | 	wrlong	result2, fp
0f1d8     0C 4E 05 F1 | 	add	fp, #12
0f1dc     A7 3A 68 FC | 	wrlong	#29, fp
0f1e0     0C 4E 85 F1 | 	sub	fp, #12
0f1e4     A7 12 02 FB | 	rdlong	arg01, fp
0f1e8     04 4E 05 F1 | 	add	fp, #4
0f1ec     A7 12 62 FC | 	wrlong	arg01, fp
0f1f0     08 4E 85 F1 | 	sub	fp, #8
0f1f4     A7 12 02 FB | 	rdlong	arg01, fp
0f1f8     0C 4E 05 F1 | 	add	fp, #12
0f1fc     A7 12 62 FC | 	wrlong	arg01, fp
0f200     04 4E 85 F1 | 	sub	fp, #4
0f204     A7 12 02 F6 | 	mov	arg01, fp
0f208     08 4E 85 F1 | 	sub	fp, #8
0f20c     C0 9C BF FD | 	call	#_push
0f210     A7 F0 03 F6 | 	mov	ptra, fp
0f214     B2 00 A0 FD | 	call	#popregs_
0f218                 | _do_gettime_ret
0f218     2D 00 64 FD | 	ret
0f21c                 | 
0f21c                 | '    
0f21c                 | ' 
0f21c                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0f21c                 | ' 
0f21c                 | ' '' ----------------------------- Clear the screen
0f21c                 | ' 
0f21c                 | ' sub do_cls
0f21c                 | _do_cls
0f21c     2E 00 00 FF 
0f220     00 E4 05 F1 | 	add	objptr, ##23552
0f224     F2 12 02 FB | 	rdlong	arg01, objptr
0f228     04 E4 85 F1 | 	sub	objptr, #4
0f22c     F2 14 02 FB | 	rdlong	arg02, objptr
0f230     2D 00 00 FF 
0f234     FC E5 85 F1 | 	sub	objptr, ##23548
0f238     38 4D B0 FD | 	call	#_hg010b_spin2_cls
0f23c     2E 00 00 FF 
0f240     00 E4 05 F1 | 	add	objptr, ##23552
0f244     F2 14 02 FB | 	rdlong	arg02, objptr
0f248     14 E4 85 F1 | 	sub	objptr, #20
0f24c     F2 14 62 FC | 	wrlong	arg02, objptr
0f250     2D 00 00 FF 
0f254     EC E5 85 F1 | 	sub	objptr, ##23532
0f258                 | ' cls(ink,paper): plot_color=ink: print
0f258     00 12 06 F6 | 	mov	arg01, #0
0f25c     A8 B5 B0 FD | 	call	#__system___getiolock_0334
0f260     FD 12 02 F6 | 	mov	arg01, result1
0f264     EC 5F B0 FD | 	call	#__system___lockmem
0f268     00 12 06 F6 | 	mov	arg01, #0
0f26c     0A 14 06 F6 | 	mov	arg02, #10
0f270     00 16 06 F6 | 	mov	arg03, #0
0f274     78 6C B0 FD | 	call	#__system___basic_print_char
0f278     00 12 06 F6 | 	mov	arg01, #0
0f27c     88 B5 B0 FD | 	call	#__system___getiolock_0334
0f280     FD 00 68 FC | 	wrlong	#0, result1
0f284                 | _do_cls_ret
0f284     2D 00 64 FD | 	ret
0f288                 | 
0f288                 | ' 
0f288                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0f288                 | ' 
0f288                 | ' sub do_color
0f288                 | _do_color
0f288     03 4A 05 F6 | 	mov	COUNT_, #3
0f28c     A8 00 A0 FD | 	call	#pushregs_
0f290     A4 9B BF FD | 	call	#_pop
0f294     FD 1E 02 F6 | 	mov	local01, result1
0f298     FE 20 02 F6 | 	mov	local02, result2
0f29c     FF 22 02 F6 | 	mov	local03, result3
0f2a0     2D 00 00 FF 
0f2a4     EC E5 05 F1 | 	add	objptr, ##23532
0f2a8     F2 1E 62 FC | 	wrlong	local01, objptr
0f2ac     2D 00 00 FF 
0f2b0     EC E5 85 F1 | 	sub	objptr, ##23532
0f2b4     A7 F0 03 F6 | 	mov	ptra, fp
0f2b8     B2 00 A0 FD | 	call	#popregs_
0f2bc                 | _do_color_ret
0f2bc     2D 00 64 FD | 	ret
0f2c0                 | 
0f2c0                 | ' 
0f2c0                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0f2c0                 | ' 
0f2c0                 | ' sub do_plot
0f2c0                 | _do_plot
0f2c0     08 4A 05 F6 | 	mov	COUNT_, #8
0f2c4     A8 00 A0 FD | 	call	#pushregs_
0f2c8     6C 9B BF FD | 	call	#_pop
0f2cc     FD 1E 02 F6 | 	mov	local01, result1
0f2d0     FE 14 02 F6 | 	mov	arg02, result2
0f2d4     FF 16 02 F6 | 	mov	arg03, result3
0f2d8     0A 21 02 F6 | 	mov	local02, arg02
0f2dc     0B 23 02 F6 | 	mov	local03, arg03
0f2e0     54 9B BF FD | 	call	#_pop
0f2e4     FD 24 02 F6 | 	mov	local04, result1
0f2e8     FE 26 02 F6 | 	mov	local05, result2
0f2ec     FF 28 02 F6 | 	mov	local06, result3
0f2f0     12 2B 02 F6 | 	mov	local07, local04
0f2f4     0F 2D 02 F6 | 	mov	local08, local01
0f2f8                 | ' t2=pop() 					 
0f2f8                 | ' t1=pop()
0f2f8                 | ' 
0f2f8                 | ' x=t1.result.iresult
0f2f8                 | ' y=t2.result.iresult	
0f2f8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f2f8     1C 28 0E F2 | 	cmp	local06, #28 wz
0f2fc     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f300     44 00 90 5D |  if_ne	jmp	#LR__1220
0f304     1C 22 0E F2 | 	cmp	local03, #28 wz
0f308     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f30c     38 00 90 5D |  if_ne	jmp	#LR__1220
0f310     2D 00 00 FF 
0f314     F0 E5 05 F1 | 	add	objptr, ##23536
0f318     F2 2A 62 FC | 	wrlong	local07, objptr
0f31c     04 E4 05 F1 | 	add	objptr, #4
0f320     F2 2C 62 FC | 	wrlong	local08, objptr
0f324     04 E4 85 F1 | 	sub	objptr, #4
0f328     F2 12 02 FB | 	rdlong	arg01, objptr
0f32c     04 E4 85 F1 | 	sub	objptr, #4
0f330     F2 16 02 FB | 	rdlong	arg03, objptr
0f334     2D 00 00 FF 
0f338     EC E5 85 F1 | 	sub	objptr, ##23532
0f33c     16 15 02 F6 | 	mov	arg02, local08
0f340     B8 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0f344     A4 00 90 FD | 	jmp	#LR__1225
0f348                 | LR__1220
0f348                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f348     1E 28 0E F2 | 	cmp	local06, #30 wz
0f34c     10 00 90 5D |  if_ne	jmp	#LR__1221
0f350     12 13 02 F6 | 	mov	arg01, local04
0f354     01 14 06 F6 | 	mov	arg02, #1
0f358     D4 8D B0 FD | 	call	#__system___float_tointeger
0f35c     FD 2A 02 F6 | 	mov	local07, result1
0f360                 | LR__1221
0f360                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f360     1E 22 0E F2 | 	cmp	local03, #30 wz
0f364     10 00 90 5D |  if_ne	jmp	#LR__1222
0f368     0F 13 02 F6 | 	mov	arg01, local01
0f36c     01 14 06 F6 | 	mov	arg02, #1
0f370     BC 8D B0 FD | 	call	#__system___float_tointeger
0f374     FD 2C 02 F6 | 	mov	local08, result1
0f378                 | LR__1222
0f378                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0f378     1F 28 0E F2 | 	cmp	local06, #31 wz
0f37c     18 00 90 5D |  if_ne	jmp	#LR__1223
0f380     12 13 02 F6 | 	mov	arg01, local04
0f384     C8 90 B0 FD | 	call	#__system____builtin_atof
0f388     FD 12 02 F6 | 	mov	arg01, result1
0f38c     00 14 06 F6 | 	mov	arg02, #0
0f390     9C 8D B0 FD | 	call	#__system___float_tointeger
0f394     FD 2A 02 F6 | 	mov	local07, result1
0f398                 | LR__1223
0f398                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0f398     1F 22 0E F2 | 	cmp	local03, #31 wz
0f39c     18 00 90 5D |  if_ne	jmp	#LR__1224
0f3a0     0F 13 02 F6 | 	mov	arg01, local01
0f3a4     A8 90 B0 FD | 	call	#__system____builtin_atof
0f3a8     FD 12 02 F6 | 	mov	arg01, result1
0f3ac     00 14 06 F6 | 	mov	arg02, #0
0f3b0     7C 8D B0 FD | 	call	#__system___float_tointeger
0f3b4     FD 2C 02 F6 | 	mov	local08, result1
0f3b8                 | LR__1224
0f3b8     2D 00 00 FF 
0f3bc     F0 E5 05 F1 | 	add	objptr, ##23536
0f3c0     F2 2A 62 FC | 	wrlong	local07, objptr
0f3c4     04 E4 05 F1 | 	add	objptr, #4
0f3c8     F2 2C 62 FC | 	wrlong	local08, objptr
0f3cc     04 E4 85 F1 | 	sub	objptr, #4
0f3d0     F2 12 02 FB | 	rdlong	arg01, objptr
0f3d4     04 E4 85 F1 | 	sub	objptr, #4
0f3d8     F2 16 02 FB | 	rdlong	arg03, objptr
0f3dc     2D 00 00 FF 
0f3e0     EC E5 85 F1 | 	sub	objptr, ##23532
0f3e4     16 15 02 F6 | 	mov	arg02, local08
0f3e8     10 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0f3ec                 | LR__1225
0f3ec     A7 F0 03 F6 | 	mov	ptra, fp
0f3f0     B2 00 A0 FD | 	call	#popregs_
0f3f4                 | _do_plot_ret
0f3f4     2D 00 64 FD | 	ret
0f3f8                 | 
0f3f8                 | ' 
0f3f8                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0f3f8                 | ' 
0f3f8                 | ' sub do_draw
0f3f8                 | _do_draw
0f3f8     08 4A 05 F6 | 	mov	COUNT_, #8
0f3fc     A8 00 A0 FD | 	call	#pushregs_
0f400     34 9A BF FD | 	call	#_pop
0f404     FD 1E 02 F6 | 	mov	local01, result1
0f408     FE 18 02 F6 | 	mov	arg04, result2
0f40c     FF 16 02 F6 | 	mov	arg03, result3
0f410     0C 21 02 F6 | 	mov	local02, arg04
0f414     0B 23 02 F6 | 	mov	local03, arg03
0f418     1C 9A BF FD | 	call	#_pop
0f41c     FD 24 02 F6 | 	mov	local04, result1
0f420     FE 26 02 F6 | 	mov	local05, result2
0f424     FF 28 02 F6 | 	mov	local06, result3
0f428     12 2B 02 F6 | 	mov	local07, local04
0f42c     0F 2D 02 F6 | 	mov	local08, local01
0f430                 | ' 
0f430                 | ' t2=pop()
0f430                 | ' t1=pop()
0f430                 | ' x=t1.result.iresult
0f430                 | ' y=t2.result.iresult
0f430                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f430     1C 28 0E F2 | 	cmp	local06, #28 wz
0f434     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f438     5C 00 90 5D |  if_ne	jmp	#LR__1230
0f43c     1C 22 0E F2 | 	cmp	local03, #28 wz
0f440     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f444     50 00 90 5D |  if_ne	jmp	#LR__1230
0f448     2D 00 00 FF 
0f44c     F0 E5 05 F1 | 	add	objptr, ##23536
0f450     F2 12 02 FB | 	rdlong	arg01, objptr
0f454     04 E4 05 F1 | 	add	objptr, #4
0f458     F2 14 02 FB | 	rdlong	arg02, objptr
0f45c     08 E4 85 F1 | 	sub	objptr, #8
0f460     F2 1A 02 FB | 	rdlong	arg05, objptr
0f464     2D 00 00 FF 
0f468     EC E5 85 F1 | 	sub	objptr, ##23532
0f46c     15 17 02 F6 | 	mov	arg03, local07
0f470     16 19 02 F6 | 	mov	arg04, local08
0f474     34 41 B0 FD | 	call	#_hg010b_spin2_draw
0f478     2D 00 00 FF 
0f47c     F0 E5 05 F1 | 	add	objptr, ##23536
0f480     F2 2A 62 FC | 	wrlong	local07, objptr
0f484     04 E4 05 F1 | 	add	objptr, #4
0f488     F2 2C 62 FC | 	wrlong	local08, objptr
0f48c     2D 00 00 FF 
0f490     F4 E5 85 F1 | 	sub	objptr, ##23540
0f494     BC 00 90 FD | 	jmp	#LR__1235
0f498                 | LR__1230
0f498                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f498     1E 28 0E F2 | 	cmp	local06, #30 wz
0f49c     10 00 90 5D |  if_ne	jmp	#LR__1231
0f4a0     12 13 02 F6 | 	mov	arg01, local04
0f4a4     01 14 06 F6 | 	mov	arg02, #1
0f4a8     84 8C B0 FD | 	call	#__system___float_tointeger
0f4ac     FD 2A 02 F6 | 	mov	local07, result1
0f4b0                 | LR__1231
0f4b0                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f4b0     1E 22 0E F2 | 	cmp	local03, #30 wz
0f4b4     10 00 90 5D |  if_ne	jmp	#LR__1232
0f4b8     0F 13 02 F6 | 	mov	arg01, local01
0f4bc     01 14 06 F6 | 	mov	arg02, #1
0f4c0     6C 8C B0 FD | 	call	#__system___float_tointeger
0f4c4     FD 2C 02 F6 | 	mov	local08, result1
0f4c8                 | LR__1232
0f4c8                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0f4c8     1F 28 0E F2 | 	cmp	local06, #31 wz
0f4cc     18 00 90 5D |  if_ne	jmp	#LR__1233
0f4d0     12 13 02 F6 | 	mov	arg01, local04
0f4d4     78 8F B0 FD | 	call	#__system____builtin_atof
0f4d8     FD 12 02 F6 | 	mov	arg01, result1
0f4dc     00 14 06 F6 | 	mov	arg02, #0
0f4e0     4C 8C B0 FD | 	call	#__system___float_tointeger
0f4e4     FD 2A 02 F6 | 	mov	local07, result1
0f4e8                 | LR__1233
0f4e8                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0f4e8     1F 22 0E F2 | 	cmp	local03, #31 wz
0f4ec     18 00 90 5D |  if_ne	jmp	#LR__1234
0f4f0     0F 13 02 F6 | 	mov	arg01, local01
0f4f4     58 8F B0 FD | 	call	#__system____builtin_atof
0f4f8     FD 12 02 F6 | 	mov	arg01, result1
0f4fc     00 14 06 F6 | 	mov	arg02, #0
0f500     2C 8C B0 FD | 	call	#__system___float_tointeger
0f504     FD 2C 02 F6 | 	mov	local08, result1
0f508                 | LR__1234
0f508     2D 00 00 FF 
0f50c     F0 E5 05 F1 | 	add	objptr, ##23536
0f510     F2 12 02 FB | 	rdlong	arg01, objptr
0f514     04 E4 05 F1 | 	add	objptr, #4
0f518     F2 14 02 FB | 	rdlong	arg02, objptr
0f51c     08 E4 85 F1 | 	sub	objptr, #8
0f520     F2 1A 02 FB | 	rdlong	arg05, objptr
0f524     2D 00 00 FF 
0f528     EC E5 85 F1 | 	sub	objptr, ##23532
0f52c     15 17 02 F6 | 	mov	arg03, local07
0f530     16 19 02 F6 | 	mov	arg04, local08
0f534     74 40 B0 FD | 	call	#_hg010b_spin2_draw
0f538     2D 00 00 FF 
0f53c     F0 E5 05 F1 | 	add	objptr, ##23536
0f540     F2 2A 62 FC | 	wrlong	local07, objptr
0f544     04 E4 05 F1 | 	add	objptr, #4
0f548     F2 2C 62 FC | 	wrlong	local08, objptr
0f54c     2D 00 00 FF 
0f550     F4 E5 85 F1 | 	sub	objptr, ##23540
0f554                 | LR__1235
0f554     A7 F0 03 F6 | 	mov	ptra, fp
0f558     B2 00 A0 FD | 	call	#popregs_
0f55c                 | _do_draw_ret
0f55c     2D 00 64 FD | 	ret
0f560                 | 
0f560                 | ' 
0f560                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0f560                 | ' 
0f560                 | ' sub do_fcircle
0f560                 | _do_fcircle
0f560     02 4A 05 F6 | 	mov	COUNT_, #2
0f564     A8 00 A0 FD | 	call	#pushregs_
0f568     24 F0 07 F1 | 	add	ptra, #36
0f56c     C8 98 BF FD | 	call	#_pop
0f570     FD 18 02 F6 | 	mov	arg04, result1
0f574     FE 16 02 F6 | 	mov	arg03, result2
0f578     FF 14 02 F6 | 	mov	arg02, result3
0f57c     18 4E 05 F1 | 	add	fp, #24
0f580     A7 18 62 FC | 	wrlong	arg04, fp
0f584     04 4E 05 F1 | 	add	fp, #4
0f588     A7 16 62 FC | 	wrlong	arg03, fp
0f58c     04 4E 05 F1 | 	add	fp, #4
0f590     A7 14 62 FC | 	wrlong	arg02, fp
0f594     20 4E 85 F1 | 	sub	fp, #32
0f598     9C 98 BF FD | 	call	#_pop
0f59c     FD 18 02 F6 | 	mov	arg04, result1
0f5a0     FE 16 02 F6 | 	mov	arg03, result2
0f5a4     FF 1E 02 F6 | 	mov	local01, result3
0f5a8     0C 4E 05 F1 | 	add	fp, #12
0f5ac     A7 18 62 FC | 	wrlong	arg04, fp
0f5b0     04 4E 05 F1 | 	add	fp, #4
0f5b4     A7 16 62 FC | 	wrlong	arg03, fp
0f5b8     04 4E 05 F1 | 	add	fp, #4
0f5bc     A7 1E 62 FC | 	wrlong	local01, fp
0f5c0     14 4E 85 F1 | 	sub	fp, #20
0f5c4     70 98 BF FD | 	call	#_pop
0f5c8     A7 FA 61 FC | 	wrlong	result1, fp
0f5cc     04 4E 05 F1 | 	add	fp, #4
0f5d0     A7 FC 61 FC | 	wrlong	result2, fp
0f5d4     04 4E 05 F1 | 	add	fp, #4
0f5d8     A7 FE 61 FC | 	wrlong	result3, fp
0f5dc                 | ' 
0f5dc                 | ' t3=pop()
0f5dc                 | ' t2=pop()
0f5dc                 | ' t1=pop()
0f5dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f5dc     FF 18 02 F6 | 	mov	arg04, result3
0f5e0     08 4E 85 F1 | 	sub	fp, #8
0f5e4     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f5e8     08 4E 05 51 |  if_ne	add	fp, #8
0f5ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f5f0     08 4E 85 51 |  if_ne	sub	fp, #8
0f5f4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f5f8     7C 00 90 5D |  if_ne	jmp	#LR__1240
0f5fc     14 4E 05 F1 | 	add	fp, #20
0f600     A7 1E 02 FB | 	rdlong	local01, fp
0f604     14 4E 85 F1 | 	sub	fp, #20
0f608     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f60c     14 4E 05 51 |  if_ne	add	fp, #20
0f610     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f614     14 4E 85 51 |  if_ne	sub	fp, #20
0f618     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f61c     58 00 90 5D |  if_ne	jmp	#LR__1240
0f620     20 4E 05 F1 | 	add	fp, #32
0f624     A7 1E 02 FB | 	rdlong	local01, fp
0f628     20 4E 85 F1 | 	sub	fp, #32
0f62c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f630     20 4E 05 51 |  if_ne	add	fp, #32
0f634     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f638     20 4E 85 51 |  if_ne	sub	fp, #32
0f63c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f640     34 00 90 5D |  if_ne	jmp	#LR__1240
0f644     A7 12 02 FB | 	rdlong	arg01, fp
0f648     0C 4E 05 F1 | 	add	fp, #12
0f64c     A7 14 02 FB | 	rdlong	arg02, fp
0f650     0C 4E 05 F1 | 	add	fp, #12
0f654     A7 16 02 FB | 	rdlong	arg03, fp
0f658     18 4E 85 F1 | 	sub	fp, #24
0f65c     2D 00 00 FF 
0f660     EC E5 05 F1 | 	add	objptr, ##23532
0f664     F2 18 02 FB | 	rdlong	arg04, objptr
0f668     2D 00 00 FF 
0f66c     EC E5 85 F1 | 	sub	objptr, ##23532
0f670     C8 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0f674                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f674     54 00 90 FD | 	jmp	#LR__1241
0f678                 | LR__1240
0f678     A7 12 02 F6 | 	mov	arg01, fp
0f67c     20 ED BF FD | 	call	#_converttoint
0f680     FD 1E 02 F6 | 	mov	local01, result1
0f684     0C 4E 05 F1 | 	add	fp, #12
0f688     A7 12 02 F6 | 	mov	arg01, fp
0f68c     0C 4E 85 F1 | 	sub	fp, #12
0f690     0C ED BF FD | 	call	#_converttoint
0f694     FD 20 02 F6 | 	mov	local02, result1
0f698     18 4E 05 F1 | 	add	fp, #24
0f69c     A7 12 02 F6 | 	mov	arg01, fp
0f6a0     18 4E 85 F1 | 	sub	fp, #24
0f6a4     F8 EC BF FD | 	call	#_converttoint
0f6a8     FD 16 02 F6 | 	mov	arg03, result1
0f6ac     2D 00 00 FF 
0f6b0     EC E5 05 F1 | 	add	objptr, ##23532
0f6b4     F2 18 02 FB | 	rdlong	arg04, objptr
0f6b8     2D 00 00 FF 
0f6bc     EC E5 85 F1 | 	sub	objptr, ##23532
0f6c0     0F 13 02 F6 | 	mov	arg01, local01
0f6c4     10 15 02 F6 | 	mov	arg02, local02
0f6c8     70 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0f6cc                 | LR__1241
0f6cc     A7 F0 03 F6 | 	mov	ptra, fp
0f6d0     B2 00 A0 FD | 	call	#popregs_
0f6d4                 | _do_fcircle_ret
0f6d4     2D 00 64 FD | 	ret
0f6d8                 | 
0f6d8                 | ' 
0f6d8                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0f6d8                 | ' 
0f6d8                 | ' sub do_circle
0f6d8                 | _do_circle
0f6d8     02 4A 05 F6 | 	mov	COUNT_, #2
0f6dc     A8 00 A0 FD | 	call	#pushregs_
0f6e0     24 F0 07 F1 | 	add	ptra, #36
0f6e4     50 97 BF FD | 	call	#_pop
0f6e8     FD 18 02 F6 | 	mov	arg04, result1
0f6ec     FE 16 02 F6 | 	mov	arg03, result2
0f6f0     FF 14 02 F6 | 	mov	arg02, result3
0f6f4     18 4E 05 F1 | 	add	fp, #24
0f6f8     A7 18 62 FC | 	wrlong	arg04, fp
0f6fc     04 4E 05 F1 | 	add	fp, #4
0f700     A7 16 62 FC | 	wrlong	arg03, fp
0f704     04 4E 05 F1 | 	add	fp, #4
0f708     A7 14 62 FC | 	wrlong	arg02, fp
0f70c     20 4E 85 F1 | 	sub	fp, #32
0f710     24 97 BF FD | 	call	#_pop
0f714     FD 18 02 F6 | 	mov	arg04, result1
0f718     FE 16 02 F6 | 	mov	arg03, result2
0f71c     FF 1E 02 F6 | 	mov	local01, result3
0f720     0C 4E 05 F1 | 	add	fp, #12
0f724     A7 18 62 FC | 	wrlong	arg04, fp
0f728     04 4E 05 F1 | 	add	fp, #4
0f72c     A7 16 62 FC | 	wrlong	arg03, fp
0f730     04 4E 05 F1 | 	add	fp, #4
0f734     A7 1E 62 FC | 	wrlong	local01, fp
0f738     14 4E 85 F1 | 	sub	fp, #20
0f73c     F8 96 BF FD | 	call	#_pop
0f740     A7 FA 61 FC | 	wrlong	result1, fp
0f744     04 4E 05 F1 | 	add	fp, #4
0f748     A7 FC 61 FC | 	wrlong	result2, fp
0f74c     04 4E 05 F1 | 	add	fp, #4
0f750     A7 FE 61 FC | 	wrlong	result3, fp
0f754                 | ' 
0f754                 | ' t3=pop()
0f754                 | ' t2=pop()
0f754                 | ' t1=pop()
0f754                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f754     FF 18 02 F6 | 	mov	arg04, result3
0f758     08 4E 85 F1 | 	sub	fp, #8
0f75c     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f760     08 4E 05 51 |  if_ne	add	fp, #8
0f764     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f768     08 4E 85 51 |  if_ne	sub	fp, #8
0f76c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f770     7C 00 90 5D |  if_ne	jmp	#LR__1250
0f774     14 4E 05 F1 | 	add	fp, #20
0f778     A7 1E 02 FB | 	rdlong	local01, fp
0f77c     14 4E 85 F1 | 	sub	fp, #20
0f780     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f784     14 4E 05 51 |  if_ne	add	fp, #20
0f788     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f78c     14 4E 85 51 |  if_ne	sub	fp, #20
0f790     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f794     58 00 90 5D |  if_ne	jmp	#LR__1250
0f798     20 4E 05 F1 | 	add	fp, #32
0f79c     A7 1E 02 FB | 	rdlong	local01, fp
0f7a0     20 4E 85 F1 | 	sub	fp, #32
0f7a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f7a8     20 4E 05 51 |  if_ne	add	fp, #32
0f7ac     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f7b0     20 4E 85 51 |  if_ne	sub	fp, #32
0f7b4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f7b8     34 00 90 5D |  if_ne	jmp	#LR__1250
0f7bc     A7 12 02 FB | 	rdlong	arg01, fp
0f7c0     0C 4E 05 F1 | 	add	fp, #12
0f7c4     A7 14 02 FB | 	rdlong	arg02, fp
0f7c8     0C 4E 05 F1 | 	add	fp, #12
0f7cc     A7 16 02 FB | 	rdlong	arg03, fp
0f7d0     18 4E 85 F1 | 	sub	fp, #24
0f7d4     2D 00 00 FF 
0f7d8     EC E5 05 F1 | 	add	objptr, ##23532
0f7dc     F2 18 02 FB | 	rdlong	arg04, objptr
0f7e0     2D 00 00 FF 
0f7e4     EC E5 85 F1 | 	sub	objptr, ##23532
0f7e8     5C 43 B0 FD | 	call	#_hg010b_spin2_circle
0f7ec                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f7ec     54 00 90 FD | 	jmp	#LR__1251
0f7f0                 | LR__1250
0f7f0     A7 12 02 F6 | 	mov	arg01, fp
0f7f4     A8 EB BF FD | 	call	#_converttoint
0f7f8     FD 1E 02 F6 | 	mov	local01, result1
0f7fc     0C 4E 05 F1 | 	add	fp, #12
0f800     A7 12 02 F6 | 	mov	arg01, fp
0f804     0C 4E 85 F1 | 	sub	fp, #12
0f808     94 EB BF FD | 	call	#_converttoint
0f80c     FD 20 02 F6 | 	mov	local02, result1
0f810     18 4E 05 F1 | 	add	fp, #24
0f814     A7 12 02 F6 | 	mov	arg01, fp
0f818     18 4E 85 F1 | 	sub	fp, #24
0f81c     80 EB BF FD | 	call	#_converttoint
0f820     FD 16 02 F6 | 	mov	arg03, result1
0f824     2D 00 00 FF 
0f828     EC E5 05 F1 | 	add	objptr, ##23532
0f82c     F2 18 02 FB | 	rdlong	arg04, objptr
0f830     2D 00 00 FF 
0f834     EC E5 85 F1 | 	sub	objptr, ##23532
0f838     0F 13 02 F6 | 	mov	arg01, local01
0f83c     10 15 02 F6 | 	mov	arg02, local02
0f840     04 43 B0 FD | 	call	#_hg010b_spin2_circle
0f844                 | LR__1251
0f844     A7 F0 03 F6 | 	mov	ptra, fp
0f848     B2 00 A0 FD | 	call	#popregs_
0f84c                 | _do_circle_ret
0f84c     2D 00 64 FD | 	ret
0f850                 | 
0f850                 | ' 
0f850                 | ' ' -------------------------- Draw a rectangle
0f850                 | ' 
0f850                 | ' sub do_box
0f850                 | _do_box
0f850     03 4A 05 F6 | 	mov	COUNT_, #3
0f854     A8 00 A0 FD | 	call	#pushregs_
0f858     30 F0 07 F1 | 	add	ptra, #48
0f85c     D8 95 BF FD | 	call	#_pop
0f860     FD 1A 02 F6 | 	mov	arg05, result1
0f864     FE 18 02 F6 | 	mov	arg04, result2
0f868     FF 16 02 F6 | 	mov	arg03, result3
0f86c     24 4E 05 F1 | 	add	fp, #36
0f870     A7 1A 62 FC | 	wrlong	arg05, fp
0f874     04 4E 05 F1 | 	add	fp, #4
0f878     A7 18 62 FC | 	wrlong	arg04, fp
0f87c     04 4E 05 F1 | 	add	fp, #4
0f880     A7 16 62 FC | 	wrlong	arg03, fp
0f884     2C 4E 85 F1 | 	sub	fp, #44
0f888     AC 95 BF FD | 	call	#_pop
0f88c     FD 1A 02 F6 | 	mov	arg05, result1
0f890     FE 18 02 F6 | 	mov	arg04, result2
0f894     FF 16 02 F6 | 	mov	arg03, result3
0f898     18 4E 05 F1 | 	add	fp, #24
0f89c     A7 1A 62 FC | 	wrlong	arg05, fp
0f8a0     04 4E 05 F1 | 	add	fp, #4
0f8a4     A7 18 62 FC | 	wrlong	arg04, fp
0f8a8     04 4E 05 F1 | 	add	fp, #4
0f8ac     A7 16 62 FC | 	wrlong	arg03, fp
0f8b0     20 4E 85 F1 | 	sub	fp, #32
0f8b4     80 95 BF FD | 	call	#_pop
0f8b8     FD 1A 02 F6 | 	mov	arg05, result1
0f8bc     FE 18 02 F6 | 	mov	arg04, result2
0f8c0     FF 1E 02 F6 | 	mov	local01, result3
0f8c4     0C 4E 05 F1 | 	add	fp, #12
0f8c8     A7 1A 62 FC | 	wrlong	arg05, fp
0f8cc     04 4E 05 F1 | 	add	fp, #4
0f8d0     A7 18 62 FC | 	wrlong	arg04, fp
0f8d4     04 4E 05 F1 | 	add	fp, #4
0f8d8     A7 1E 62 FC | 	wrlong	local01, fp
0f8dc     14 4E 85 F1 | 	sub	fp, #20
0f8e0     54 95 BF FD | 	call	#_pop
0f8e4     A7 FA 61 FC | 	wrlong	result1, fp
0f8e8     04 4E 05 F1 | 	add	fp, #4
0f8ec     A7 FC 61 FC | 	wrlong	result2, fp
0f8f0     04 4E 05 F1 | 	add	fp, #4
0f8f4     A7 FE 61 FC | 	wrlong	result3, fp
0f8f8                 | ' 
0f8f8                 | ' t4=pop()
0f8f8                 | ' t3=pop()
0f8f8                 | ' t2=pop()
0f8f8                 | ' t1=pop()
0f8f8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f8f8     FF 1A 02 F6 | 	mov	arg05, result3
0f8fc     08 4E 85 F1 | 	sub	fp, #8
0f900     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0f904     08 4E 05 51 |  if_ne	add	fp, #8
0f908     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f90c     08 4E 85 51 |  if_ne	sub	fp, #8
0f910     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f914     A8 00 90 5D |  if_ne	jmp	#LR__1260
0f918     14 4E 05 F1 | 	add	fp, #20
0f91c     A7 1E 02 FB | 	rdlong	local01, fp
0f920     14 4E 85 F1 | 	sub	fp, #20
0f924     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f928     14 4E 05 51 |  if_ne	add	fp, #20
0f92c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f930     14 4E 85 51 |  if_ne	sub	fp, #20
0f934     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f938     84 00 90 5D |  if_ne	jmp	#LR__1260
0f93c     20 4E 05 F1 | 	add	fp, #32
0f940     A7 1E 02 FB | 	rdlong	local01, fp
0f944     20 4E 85 F1 | 	sub	fp, #32
0f948     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f94c     20 4E 05 51 |  if_ne	add	fp, #32
0f950     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f954     20 4E 85 51 |  if_ne	sub	fp, #32
0f958     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f95c     60 00 90 5D |  if_ne	jmp	#LR__1260
0f960     2C 4E 05 F1 | 	add	fp, #44
0f964     A7 1E 02 FB | 	rdlong	local01, fp
0f968     2C 4E 85 F1 | 	sub	fp, #44
0f96c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f970     2C 4E 05 51 |  if_ne	add	fp, #44
0f974     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f978     2C 4E 85 51 |  if_ne	sub	fp, #44
0f97c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f980     3C 00 90 5D |  if_ne	jmp	#LR__1260
0f984     A7 12 02 FB | 	rdlong	arg01, fp
0f988     0C 4E 05 F1 | 	add	fp, #12
0f98c     A7 14 02 FB | 	rdlong	arg02, fp
0f990     0C 4E 05 F1 | 	add	fp, #12
0f994     A7 16 02 FB | 	rdlong	arg03, fp
0f998     0C 4E 05 F1 | 	add	fp, #12
0f99c     A7 18 02 FB | 	rdlong	arg04, fp
0f9a0     24 4E 85 F1 | 	sub	fp, #36
0f9a4     2D 00 00 FF 
0f9a8     EC E5 05 F1 | 	add	objptr, ##23532
0f9ac     F2 1A 02 FB | 	rdlong	arg05, objptr
0f9b0     2D 00 00 FF 
0f9b4     EC E5 85 F1 | 	sub	objptr, ##23532
0f9b8     58 43 B0 FD | 	call	#_hg010b_spin2_box
0f9bc                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0f9bc     6C 00 90 FD | 	jmp	#LR__1261
0f9c0                 | LR__1260
0f9c0     A7 12 02 F6 | 	mov	arg01, fp
0f9c4     D8 E9 BF FD | 	call	#_converttoint
0f9c8     FD 20 02 F6 | 	mov	local02, result1
0f9cc     0C 4E 05 F1 | 	add	fp, #12
0f9d0     A7 12 02 F6 | 	mov	arg01, fp
0f9d4     0C 4E 85 F1 | 	sub	fp, #12
0f9d8     C4 E9 BF FD | 	call	#_converttoint
0f9dc     FD 22 02 F6 | 	mov	local03, result1
0f9e0     18 4E 05 F1 | 	add	fp, #24
0f9e4     A7 12 02 F6 | 	mov	arg01, fp
0f9e8     18 4E 85 F1 | 	sub	fp, #24
0f9ec     B0 E9 BF FD | 	call	#_converttoint
0f9f0     FD 1E 02 F6 | 	mov	local01, result1
0f9f4     24 4E 05 F1 | 	add	fp, #36
0f9f8     A7 12 02 F6 | 	mov	arg01, fp
0f9fc     24 4E 85 F1 | 	sub	fp, #36
0fa00     9C E9 BF FD | 	call	#_converttoint
0fa04     FD 18 02 F6 | 	mov	arg04, result1
0fa08     2D 00 00 FF 
0fa0c     EC E5 05 F1 | 	add	objptr, ##23532
0fa10     F2 1A 02 FB | 	rdlong	arg05, objptr
0fa14     2D 00 00 FF 
0fa18     EC E5 85 F1 | 	sub	objptr, ##23532
0fa1c     10 13 02 F6 | 	mov	arg01, local02
0fa20     11 15 02 F6 | 	mov	arg02, local03
0fa24     0F 17 02 F6 | 	mov	arg03, local01
0fa28     E8 42 B0 FD | 	call	#_hg010b_spin2_box
0fa2c                 | LR__1261
0fa2c     A7 F0 03 F6 | 	mov	ptra, fp
0fa30     B2 00 A0 FD | 	call	#popregs_
0fa34                 | _do_box_ret
0fa34     2D 00 64 FD | 	ret
0fa38                 | 
0fa38                 | ' 
0fa38                 | ' sub do_fill
0fa38                 | _do_fill
0fa38     03 4A 05 F6 | 	mov	COUNT_, #3
0fa3c     A8 00 A0 FD | 	call	#pushregs_
0fa40     30 F0 07 F1 | 	add	ptra, #48
0fa44     F0 93 BF FD | 	call	#_pop
0fa48     FD 18 02 F6 | 	mov	arg04, result1
0fa4c     FE 16 02 F6 | 	mov	arg03, result2
0fa50     FF 14 02 F6 | 	mov	arg02, result3
0fa54     24 4E 05 F1 | 	add	fp, #36
0fa58     A7 18 62 FC | 	wrlong	arg04, fp
0fa5c     04 4E 05 F1 | 	add	fp, #4
0fa60     A7 16 62 FC | 	wrlong	arg03, fp
0fa64     04 4E 05 F1 | 	add	fp, #4
0fa68     A7 14 62 FC | 	wrlong	arg02, fp
0fa6c     2C 4E 85 F1 | 	sub	fp, #44
0fa70     C4 93 BF FD | 	call	#_pop
0fa74     FD 18 02 F6 | 	mov	arg04, result1
0fa78     FE 16 02 F6 | 	mov	arg03, result2
0fa7c     FF 14 02 F6 | 	mov	arg02, result3
0fa80     18 4E 05 F1 | 	add	fp, #24
0fa84     A7 18 62 FC | 	wrlong	arg04, fp
0fa88     04 4E 05 F1 | 	add	fp, #4
0fa8c     A7 16 62 FC | 	wrlong	arg03, fp
0fa90     04 4E 05 F1 | 	add	fp, #4
0fa94     A7 14 62 FC | 	wrlong	arg02, fp
0fa98     20 4E 85 F1 | 	sub	fp, #32
0fa9c     98 93 BF FD | 	call	#_pop
0faa0     FD 18 02 F6 | 	mov	arg04, result1
0faa4     FE 16 02 F6 | 	mov	arg03, result2
0faa8     FF 1E 02 F6 | 	mov	local01, result3
0faac     0C 4E 05 F1 | 	add	fp, #12
0fab0     A7 18 62 FC | 	wrlong	arg04, fp
0fab4     04 4E 05 F1 | 	add	fp, #4
0fab8     A7 16 62 FC | 	wrlong	arg03, fp
0fabc     04 4E 05 F1 | 	add	fp, #4
0fac0     A7 1E 62 FC | 	wrlong	local01, fp
0fac4     14 4E 85 F1 | 	sub	fp, #20
0fac8     6C 93 BF FD | 	call	#_pop
0facc     A7 FA 61 FC | 	wrlong	result1, fp
0fad0     04 4E 05 F1 | 	add	fp, #4
0fad4     A7 FC 61 FC | 	wrlong	result2, fp
0fad8     04 4E 05 F1 | 	add	fp, #4
0fadc     A7 FE 61 FC | 	wrlong	result3, fp
0fae0                 | ' 
0fae0                 | ' t4=pop()
0fae0                 | ' t3=pop()
0fae0                 | ' t2=pop()
0fae0                 | ' t1=pop()
0fae0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fae0     FF 18 02 F6 | 	mov	arg04, result3
0fae4     08 4E 85 F1 | 	sub	fp, #8
0fae8     1C 18 0E F2 | 	cmp	arg04, #28 wz
0faec     08 4E 05 51 |  if_ne	add	fp, #8
0faf0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0faf4     08 4E 85 51 |  if_ne	sub	fp, #8
0faf8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fafc     94 00 90 5D |  if_ne	jmp	#LR__1270
0fb00     14 4E 05 F1 | 	add	fp, #20
0fb04     A7 1E 02 FB | 	rdlong	local01, fp
0fb08     14 4E 85 F1 | 	sub	fp, #20
0fb0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb10     14 4E 05 51 |  if_ne	add	fp, #20
0fb14     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fb18     14 4E 85 51 |  if_ne	sub	fp, #20
0fb1c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fb20     70 00 90 5D |  if_ne	jmp	#LR__1270
0fb24     20 4E 05 F1 | 	add	fp, #32
0fb28     A7 1E 02 FB | 	rdlong	local01, fp
0fb2c     20 4E 85 F1 | 	sub	fp, #32
0fb30     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb34     20 4E 05 51 |  if_ne	add	fp, #32
0fb38     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fb3c     20 4E 85 51 |  if_ne	sub	fp, #32
0fb40     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fb44     4C 00 90 5D |  if_ne	jmp	#LR__1270
0fb48     2C 4E 05 F1 | 	add	fp, #44
0fb4c     A7 1E 02 FB | 	rdlong	local01, fp
0fb50     2C 4E 85 F1 | 	sub	fp, #44
0fb54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb58     2C 4E 05 51 |  if_ne	add	fp, #44
0fb5c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fb60     2C 4E 85 51 |  if_ne	sub	fp, #44
0fb64     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fb68     28 00 90 5D |  if_ne	jmp	#LR__1270
0fb6c     A7 12 02 FB | 	rdlong	arg01, fp
0fb70     0C 4E 05 F1 | 	add	fp, #12
0fb74     A7 14 02 FB | 	rdlong	arg02, fp
0fb78     0C 4E 05 F1 | 	add	fp, #12
0fb7c     A7 16 02 FB | 	rdlong	arg03, fp
0fb80     0C 4E 05 F1 | 	add	fp, #12
0fb84     A7 18 02 FB | 	rdlong	arg04, fp
0fb88     24 4E 85 F1 | 	sub	fp, #36
0fb8c     0C 3C B0 FD | 	call	#_hg010b_spin2_fill
0fb90                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0fb90     58 00 90 FD | 	jmp	#LR__1271
0fb94                 | LR__1270
0fb94     A7 12 02 F6 | 	mov	arg01, fp
0fb98     04 E8 BF FD | 	call	#_converttoint
0fb9c     FD 20 02 F6 | 	mov	local02, result1
0fba0     0C 4E 05 F1 | 	add	fp, #12
0fba4     A7 12 02 F6 | 	mov	arg01, fp
0fba8     0C 4E 85 F1 | 	sub	fp, #12
0fbac     F0 E7 BF FD | 	call	#_converttoint
0fbb0     FD 22 02 F6 | 	mov	local03, result1
0fbb4     18 4E 05 F1 | 	add	fp, #24
0fbb8     A7 12 02 F6 | 	mov	arg01, fp
0fbbc     18 4E 85 F1 | 	sub	fp, #24
0fbc0     DC E7 BF FD | 	call	#_converttoint
0fbc4     FD 1E 02 F6 | 	mov	local01, result1
0fbc8     24 4E 05 F1 | 	add	fp, #36
0fbcc     A7 12 02 F6 | 	mov	arg01, fp
0fbd0     24 4E 85 F1 | 	sub	fp, #36
0fbd4     C8 E7 BF FD | 	call	#_converttoint
0fbd8     FD 18 02 F6 | 	mov	arg04, result1
0fbdc     10 13 02 F6 | 	mov	arg01, local02
0fbe0     11 15 02 F6 | 	mov	arg02, local03
0fbe4     0F 17 02 F6 | 	mov	arg03, local01
0fbe8     B0 3B B0 FD | 	call	#_hg010b_spin2_fill
0fbec                 | LR__1271
0fbec     A7 F0 03 F6 | 	mov	ptra, fp
0fbf0     B2 00 A0 FD | 	call	#popregs_
0fbf4                 | _do_fill_ret
0fbf4     2D 00 64 FD | 	ret
0fbf8                 | 
0fbf8                 | ' 
0fbf8                 | ' ' -------------------------- Draw a frane
0fbf8                 | ' 
0fbf8                 | ' sub do_frame
0fbf8                 | _do_frame
0fbf8     03 4A 05 F6 | 	mov	COUNT_, #3
0fbfc     A8 00 A0 FD | 	call	#pushregs_
0fc00     30 F0 07 F1 | 	add	ptra, #48
0fc04     30 92 BF FD | 	call	#_pop
0fc08     FD 1A 02 F6 | 	mov	arg05, result1
0fc0c     FE 18 02 F6 | 	mov	arg04, result2
0fc10     FF 16 02 F6 | 	mov	arg03, result3
0fc14     24 4E 05 F1 | 	add	fp, #36
0fc18     A7 1A 62 FC | 	wrlong	arg05, fp
0fc1c     04 4E 05 F1 | 	add	fp, #4
0fc20     A7 18 62 FC | 	wrlong	arg04, fp
0fc24     04 4E 05 F1 | 	add	fp, #4
0fc28     A7 16 62 FC | 	wrlong	arg03, fp
0fc2c     2C 4E 85 F1 | 	sub	fp, #44
0fc30     04 92 BF FD | 	call	#_pop
0fc34     FD 1A 02 F6 | 	mov	arg05, result1
0fc38     FE 18 02 F6 | 	mov	arg04, result2
0fc3c     FF 16 02 F6 | 	mov	arg03, result3
0fc40     18 4E 05 F1 | 	add	fp, #24
0fc44     A7 1A 62 FC | 	wrlong	arg05, fp
0fc48     04 4E 05 F1 | 	add	fp, #4
0fc4c     A7 18 62 FC | 	wrlong	arg04, fp
0fc50     04 4E 05 F1 | 	add	fp, #4
0fc54     A7 16 62 FC | 	wrlong	arg03, fp
0fc58     20 4E 85 F1 | 	sub	fp, #32
0fc5c     D8 91 BF FD | 	call	#_pop
0fc60     FD 1A 02 F6 | 	mov	arg05, result1
0fc64     FE 18 02 F6 | 	mov	arg04, result2
0fc68     FF 1E 02 F6 | 	mov	local01, result3
0fc6c     0C 4E 05 F1 | 	add	fp, #12
0fc70     A7 1A 62 FC | 	wrlong	arg05, fp
0fc74     04 4E 05 F1 | 	add	fp, #4
0fc78     A7 18 62 FC | 	wrlong	arg04, fp
0fc7c     04 4E 05 F1 | 	add	fp, #4
0fc80     A7 1E 62 FC | 	wrlong	local01, fp
0fc84     14 4E 85 F1 | 	sub	fp, #20
0fc88     AC 91 BF FD | 	call	#_pop
0fc8c     A7 FA 61 FC | 	wrlong	result1, fp
0fc90     04 4E 05 F1 | 	add	fp, #4
0fc94     A7 FC 61 FC | 	wrlong	result2, fp
0fc98     04 4E 05 F1 | 	add	fp, #4
0fc9c     A7 FE 61 FC | 	wrlong	result3, fp
0fca0                 | ' 
0fca0                 | ' t4=pop()
0fca0                 | ' t3=pop()
0fca0                 | ' t2=pop()
0fca0                 | ' t1=pop()
0fca0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fca0     FF 1A 02 F6 | 	mov	arg05, result3
0fca4     08 4E 85 F1 | 	sub	fp, #8
0fca8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0fcac     08 4E 05 51 |  if_ne	add	fp, #8
0fcb0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fcb4     08 4E 85 51 |  if_ne	sub	fp, #8
0fcb8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fcbc     A8 00 90 5D |  if_ne	jmp	#LR__1280
0fcc0     14 4E 05 F1 | 	add	fp, #20
0fcc4     A7 1E 02 FB | 	rdlong	local01, fp
0fcc8     14 4E 85 F1 | 	sub	fp, #20
0fccc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fcd0     14 4E 05 51 |  if_ne	add	fp, #20
0fcd4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fcd8     14 4E 85 51 |  if_ne	sub	fp, #20
0fcdc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fce0     84 00 90 5D |  if_ne	jmp	#LR__1280
0fce4     20 4E 05 F1 | 	add	fp, #32
0fce8     A7 1E 02 FB | 	rdlong	local01, fp
0fcec     20 4E 85 F1 | 	sub	fp, #32
0fcf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fcf4     20 4E 05 51 |  if_ne	add	fp, #32
0fcf8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fcfc     20 4E 85 51 |  if_ne	sub	fp, #32
0fd00     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fd04     60 00 90 5D |  if_ne	jmp	#LR__1280
0fd08     2C 4E 05 F1 | 	add	fp, #44
0fd0c     A7 1E 02 FB | 	rdlong	local01, fp
0fd10     2C 4E 85 F1 | 	sub	fp, #44
0fd14     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fd18     2C 4E 05 51 |  if_ne	add	fp, #44
0fd1c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fd20     2C 4E 85 51 |  if_ne	sub	fp, #44
0fd24     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fd28     3C 00 90 5D |  if_ne	jmp	#LR__1280
0fd2c     A7 12 02 FB | 	rdlong	arg01, fp
0fd30     0C 4E 05 F1 | 	add	fp, #12
0fd34     A7 14 02 FB | 	rdlong	arg02, fp
0fd38     0C 4E 05 F1 | 	add	fp, #12
0fd3c     A7 16 02 FB | 	rdlong	arg03, fp
0fd40     0C 4E 05 F1 | 	add	fp, #12
0fd44     A7 18 02 FB | 	rdlong	arg04, fp
0fd48     24 4E 85 F1 | 	sub	fp, #36
0fd4c     2D 00 00 FF 
0fd50     EC E5 05 F1 | 	add	objptr, ##23532
0fd54     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd58     2D 00 00 FF 
0fd5c     EC E5 85 F1 | 	sub	objptr, ##23532
0fd60     30 3F B0 FD | 	call	#_hg010b_spin2_frame
0fd64                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0fd64     6C 00 90 FD | 	jmp	#LR__1281
0fd68                 | LR__1280
0fd68     A7 12 02 F6 | 	mov	arg01, fp
0fd6c     30 E6 BF FD | 	call	#_converttoint
0fd70     FD 20 02 F6 | 	mov	local02, result1
0fd74     0C 4E 05 F1 | 	add	fp, #12
0fd78     A7 12 02 F6 | 	mov	arg01, fp
0fd7c     0C 4E 85 F1 | 	sub	fp, #12
0fd80     1C E6 BF FD | 	call	#_converttoint
0fd84     FD 22 02 F6 | 	mov	local03, result1
0fd88     18 4E 05 F1 | 	add	fp, #24
0fd8c     A7 12 02 F6 | 	mov	arg01, fp
0fd90     18 4E 85 F1 | 	sub	fp, #24
0fd94     08 E6 BF FD | 	call	#_converttoint
0fd98     FD 1E 02 F6 | 	mov	local01, result1
0fd9c     24 4E 05 F1 | 	add	fp, #36
0fda0     A7 12 02 F6 | 	mov	arg01, fp
0fda4     24 4E 85 F1 | 	sub	fp, #36
0fda8     F4 E5 BF FD | 	call	#_converttoint
0fdac     FD 18 02 F6 | 	mov	arg04, result1
0fdb0     2D 00 00 FF 
0fdb4     EC E5 05 F1 | 	add	objptr, ##23532
0fdb8     F2 1A 02 FB | 	rdlong	arg05, objptr
0fdbc     2D 00 00 FF 
0fdc0     EC E5 85 F1 | 	sub	objptr, ##23532
0fdc4     10 13 02 F6 | 	mov	arg01, local02
0fdc8     11 15 02 F6 | 	mov	arg02, local03
0fdcc     0F 17 02 F6 | 	mov	arg03, local01
0fdd0     C0 3E B0 FD | 	call	#_hg010b_spin2_frame
0fdd4                 | LR__1281
0fdd4     A7 F0 03 F6 | 	mov	ptra, fp
0fdd8     B2 00 A0 FD | 	call	#popregs_
0fddc                 | _do_frame_ret
0fddc     2D 00 64 FD | 	ret
0fde0                 | 
0fde0                 | ' 
0fde0                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0fde0                 | ' 
0fde0                 | ' ' ------------------------- Print to the screem
0fde0                 | ' 
0fde0                 | ' sub do_print  
0fde0                 | _do_print
0fde0     0A 4A 05 F6 | 	mov	COUNT_, #10
0fde4     A8 00 A0 FD | 	call	#pushregs_
0fde8     00 24 06 F6 | 	mov	local04, #0
0fdec     48 90 BF FD | 	call	#_pop
0fdf0     FD 26 02 F6 | 	mov	local05, result1
0fdf4     FE 28 02 F6 | 	mov	local06, result2
0fdf8     FF 2A 02 F6 | 	mov	local07, result3
0fdfc     13 1F 02 F6 | 	mov	local01, local05
0fe00     14 21 02 F6 | 	mov	local02, local06
0fe04     15 23 02 F6 | 	mov	local03, local07
0fe08                 | '  
0fe08                 | ' r=0
0fe08                 | ' t1=pop() 
0fe08                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0fe08     21 22 0E F2 | 	cmp	local03, #33 wz
0fe0c     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0fe10     20 00 90 5D |  if_ne	jmp	#LR__1290
0fe14     11 25 02 F6 | 	mov	local04, local03
0fe18     1C 90 BF FD | 	call	#_pop
0fe1c     FD 26 02 F6 | 	mov	local05, result1
0fe20     FE 28 02 F6 | 	mov	local06, result2
0fe24     FF 2A 02 F6 | 	mov	local07, result3
0fe28     13 1F 02 F6 | 	mov	local01, local05
0fe2c     14 21 02 F6 | 	mov	local02, local06
0fe30     15 23 02 F6 | 	mov	local03, local07
0fe34                 | LR__1290
0fe34                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0fe34     20 22 0E F2 | 	cmp	local03, #32 wz
0fe38     11 25 02 A6 |  if_e	mov	local04, local03
0fe3c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0fe3c     FF 22 0E F2 | 	cmp	local03, #255 wz
0fe40     0C 00 90 5D |  if_ne	jmp	#LR__1291
0fe44     0F 13 02 F6 | 	mov	arg01, local01
0fe48     14 1F B0 FD | 	call	#_printerror
0fe4c     30 04 90 FD | 	jmp	#LR__1308
0fe50                 | LR__1291
0fe50                 | ' 
0fe50                 | ' if r=print_mod_comma  then
0fe50     21 24 0E F2 | 	cmp	local04, #33 wz
0fe54     AC 01 90 5D |  if_ne	jmp	#LR__1296
0fe58                 | '   if t1.result_type=result_int then print t1.result.iresult,
0fe58     1C 22 0E F2 | 	cmp	local03, #28 wz
0fe5c     64 00 90 5D |  if_ne	jmp	#LR__1292
0fe60     00 12 06 F6 | 	mov	arg01, #0
0fe64     A0 A9 B0 FD | 	call	#__system___getiolock_0334
0fe68     FD 12 02 F6 | 	mov	arg01, result1
0fe6c     E4 53 B0 FD | 	call	#__system___lockmem
0fe70     00 28 06 F6 | 	mov	local06, #0
0fe74     00 12 06 F6 | 	mov	arg01, #0
0fe78     0F 15 02 F6 | 	mov	arg02, local01
0fe7c     00 16 06 F6 | 	mov	arg03, #0
0fe80     0A 18 06 F6 | 	mov	arg04, #10
0fe84     04 61 B0 FD | 	call	#__system___basic_print_integer
0fe88     FD 2A 02 F6 | 	mov	local07, result1
0fe8c     14 27 02 F6 | 	mov	local05, local06
0fe90     15 27 02 F1 | 	add	local05, local07
0fe94     00 2C 06 F6 | 	mov	local08, #0
0fe98     00 12 06 F6 | 	mov	arg01, #0
0fe9c     09 14 06 F6 | 	mov	arg02, #9
0fea0     00 16 06 F6 | 	mov	arg03, #0
0fea4     48 60 B0 FD | 	call	#__system___basic_print_char
0fea8     FD 2E 02 F6 | 	mov	local09, result1
0feac     FD 26 02 F1 | 	add	local05, result1
0feb0     00 12 06 F6 | 	mov	arg01, #0
0feb4     50 A9 B0 FD | 	call	#__system___getiolock_0334
0feb8     FD 00 68 FC | 	wrlong	#0, result1
0febc     00 FA 05 F6 | 	mov	result1, #0
0fec0     00 30 06 F6 | 	mov	local10, #0
0fec4                 | LR__1292
0fec4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
0fec4     1D 22 0E F2 | 	cmp	local03, #29 wz
0fec8     64 00 90 5D |  if_ne	jmp	#LR__1293
0fecc     00 12 06 F6 | 	mov	arg01, #0
0fed0     34 A9 B0 FD | 	call	#__system___getiolock_0334
0fed4     FD 12 02 F6 | 	mov	arg01, result1
0fed8     78 53 B0 FD | 	call	#__system___lockmem
0fedc     00 28 06 F6 | 	mov	local06, #0
0fee0     00 12 06 F6 | 	mov	arg01, #0
0fee4     0F 15 02 F6 | 	mov	arg02, local01
0fee8     00 16 06 F6 | 	mov	arg03, #0
0feec     0A 18 06 F6 | 	mov	arg04, #10
0fef0     D8 60 B0 FD | 	call	#__system___basic_print_unsigned
0fef4     FD 2A 02 F6 | 	mov	local07, result1
0fef8     14 27 02 F6 | 	mov	local05, local06
0fefc     15 27 02 F1 | 	add	local05, local07
0ff00     00 2C 06 F6 | 	mov	local08, #0
0ff04     00 12 06 F6 | 	mov	arg01, #0
0ff08     09 14 06 F6 | 	mov	arg02, #9
0ff0c     00 16 06 F6 | 	mov	arg03, #0
0ff10     DC 5F B0 FD | 	call	#__system___basic_print_char
0ff14     FD 2E 02 F6 | 	mov	local09, result1
0ff18     FD 26 02 F1 | 	add	local05, result1
0ff1c     00 12 06 F6 | 	mov	arg01, #0
0ff20     E4 A8 B0 FD | 	call	#__system___getiolock_0334
0ff24     FD 00 68 FC | 	wrlong	#0, result1
0ff28     00 FA 05 F6 | 	mov	result1, #0
0ff2c     00 30 06 F6 | 	mov	local10, #0
0ff30                 | LR__1293
0ff30                 | '   if t1.result_type=result_float then print t1.result.fresult,
0ff30     1E 22 0E F2 | 	cmp	local03, #30 wz
0ff34     64 00 90 5D |  if_ne	jmp	#LR__1294
0ff38     00 12 06 F6 | 	mov	arg01, #0
0ff3c     C8 A8 B0 FD | 	call	#__system___getiolock_0334
0ff40     FD 12 02 F6 | 	mov	arg01, result1
0ff44     0C 53 B0 FD | 	call	#__system___lockmem
0ff48     00 28 06 F6 | 	mov	local06, #0
0ff4c     00 12 06 F6 | 	mov	arg01, #0
0ff50     0F 15 02 F6 | 	mov	arg02, local01
0ff54     00 16 06 F6 | 	mov	arg03, #0
0ff58     23 18 06 F6 | 	mov	arg04, #35
0ff5c     20 83 B0 FD | 	call	#__system___basic_print_float
0ff60     FD 2A 02 F6 | 	mov	local07, result1
0ff64     14 27 02 F6 | 	mov	local05, local06
0ff68     15 27 02 F1 | 	add	local05, local07
0ff6c     00 2C 06 F6 | 	mov	local08, #0
0ff70     00 12 06 F6 | 	mov	arg01, #0
0ff74     09 14 06 F6 | 	mov	arg02, #9
0ff78     00 16 06 F6 | 	mov	arg03, #0
0ff7c     70 5F B0 FD | 	call	#__system___basic_print_char
0ff80     FD 2E 02 F6 | 	mov	local09, result1
0ff84     FD 26 02 F1 | 	add	local05, result1
0ff88     00 12 06 F6 | 	mov	arg01, #0
0ff8c     78 A8 B0 FD | 	call	#__system___getiolock_0334
0ff90     FD 00 68 FC | 	wrlong	#0, result1
0ff94     00 FA 05 F6 | 	mov	result1, #0
0ff98     00 30 06 F6 | 	mov	local10, #0
0ff9c                 | LR__1294
0ff9c                 | '   if t1.result_type=result_string then print t1.result.sresult,
0ff9c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ffa0     60 00 90 5D |  if_ne	jmp	#LR__1295
0ffa4     00 12 06 F6 | 	mov	arg01, #0
0ffa8     5C A8 B0 FD | 	call	#__system___getiolock_0334
0ffac     FD 12 02 F6 | 	mov	arg01, result1
0ffb0     A0 52 B0 FD | 	call	#__system___lockmem
0ffb4     00 28 06 F6 | 	mov	local06, #0
0ffb8     00 12 06 F6 | 	mov	arg01, #0
0ffbc     0F 15 02 F6 | 	mov	arg02, local01
0ffc0     00 16 06 F6 | 	mov	arg03, #0
0ffc4     80 5F B0 FD | 	call	#__system___basic_print_string
0ffc8     FD 2A 02 F6 | 	mov	local07, result1
0ffcc     14 27 02 F6 | 	mov	local05, local06
0ffd0     15 27 02 F1 | 	add	local05, local07
0ffd4     00 2C 06 F6 | 	mov	local08, #0
0ffd8     00 12 06 F6 | 	mov	arg01, #0
0ffdc     09 14 06 F6 | 	mov	arg02, #9
0ffe0     00 16 06 F6 | 	mov	arg03, #0
0ffe4     08 5F B0 FD | 	call	#__system___basic_print_char
0ffe8     FD 2E 02 F6 | 	mov	local09, result1
0ffec     FD 26 02 F1 | 	add	local05, result1
0fff0     00 12 06 F6 | 	mov	arg01, #0
0fff4     10 A8 B0 FD | 	call	#__system___getiolock_0334
0fff8     FD 00 68 FC | 	wrlong	#0, result1
0fffc     00 FA 05 F6 | 	mov	result1, #0
10000     00 30 06 F6 | 	mov	local10, #0
10004                 | LR__1295
10004                 | LR__1296
10004                 | ' if r=print_mod_semicolon then 
10004     22 24 0E F2 | 	cmp	local04, #34 wz
10008     1C 01 90 5D |  if_ne	jmp	#LR__1301
1000c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1000c     1C 22 0E F2 | 	cmp	local03, #28 wz
10010     50 00 90 5D |  if_ne	jmp	#LR__1297
10014     00 12 06 F6 | 	mov	arg01, #0
10018     EC A7 B0 FD | 	call	#__system___getiolock_0334
1001c     FD 12 02 F6 | 	mov	arg01, result1
10020     30 52 B0 FD | 	call	#__system___lockmem
10024     00 28 06 F6 | 	mov	local06, #0
10028     00 30 06 F6 | 	mov	local10, #0
1002c     0A 2C 06 F6 | 	mov	local08, #10
10030     00 12 06 F6 | 	mov	arg01, #0
10034     0F 15 02 F6 | 	mov	arg02, local01
10038     00 16 06 F6 | 	mov	arg03, #0
1003c     0A 18 06 F6 | 	mov	arg04, #10
10040     48 5F B0 FD | 	call	#__system___basic_print_integer
10044     FD 2A 02 F6 | 	mov	local07, result1
10048     14 27 02 F6 | 	mov	local05, local06
1004c     15 27 02 F1 | 	add	local05, local07
10050     00 12 06 F6 | 	mov	arg01, #0
10054     B0 A7 B0 FD | 	call	#__system___getiolock_0334
10058     FD 00 68 FC | 	wrlong	#0, result1
1005c     00 FA 05 F6 | 	mov	result1, #0
10060     00 2E 06 F6 | 	mov	local09, #0
10064                 | LR__1297
10064                 | '   if t1.result_type=result_uint then print t1.result.uresult;
10064     1D 22 0E F2 | 	cmp	local03, #29 wz
10068     50 00 90 5D |  if_ne	jmp	#LR__1298
1006c     00 12 06 F6 | 	mov	arg01, #0
10070     94 A7 B0 FD | 	call	#__system___getiolock_0334
10074     FD 12 02 F6 | 	mov	arg01, result1
10078     D8 51 B0 FD | 	call	#__system___lockmem
1007c     00 28 06 F6 | 	mov	local06, #0
10080     00 30 06 F6 | 	mov	local10, #0
10084     0A 2C 06 F6 | 	mov	local08, #10
10088     00 12 06 F6 | 	mov	arg01, #0
1008c     0F 15 02 F6 | 	mov	arg02, local01
10090     00 16 06 F6 | 	mov	arg03, #0
10094     0A 18 06 F6 | 	mov	arg04, #10
10098     30 5F B0 FD | 	call	#__system___basic_print_unsigned
1009c     FD 2A 02 F6 | 	mov	local07, result1
100a0     14 27 02 F6 | 	mov	local05, local06
100a4     15 27 02 F1 | 	add	local05, local07
100a8     00 12 06 F6 | 	mov	arg01, #0
100ac     58 A7 B0 FD | 	call	#__system___getiolock_0334
100b0     FD 00 68 FC | 	wrlong	#0, result1
100b4     00 FA 05 F6 | 	mov	result1, #0
100b8     00 2E 06 F6 | 	mov	local09, #0
100bc                 | LR__1298
100bc                 | '   if t1.result_type=result_float then print t1.result.fresult;
100bc     1E 22 0E F2 | 	cmp	local03, #30 wz
100c0     30 00 90 5D |  if_ne	jmp	#LR__1299
100c4     00 12 06 F6 | 	mov	arg01, #0
100c8     3C A7 B0 FD | 	call	#__system___getiolock_0334
100cc     FD 12 02 F6 | 	mov	arg01, result1
100d0     80 51 B0 FD | 	call	#__system___lockmem
100d4     00 12 06 F6 | 	mov	arg01, #0
100d8     0F 15 02 F6 | 	mov	arg02, local01
100dc     00 16 06 F6 | 	mov	arg03, #0
100e0     23 18 06 F6 | 	mov	arg04, #35
100e4     98 81 B0 FD | 	call	#__system___basic_print_float
100e8     00 12 06 F6 | 	mov	arg01, #0
100ec     18 A7 B0 FD | 	call	#__system___getiolock_0334
100f0     FD 00 68 FC | 	wrlong	#0, result1
100f4                 | LR__1299
100f4                 | '   if t1.result_type=result_string then print t1.result.sresult;
100f4     1F 22 0E F2 | 	cmp	local03, #31 wz
100f8     2C 00 90 5D |  if_ne	jmp	#LR__1300
100fc     00 12 06 F6 | 	mov	arg01, #0
10100     04 A7 B0 FD | 	call	#__system___getiolock_0334
10104     FD 12 02 F6 | 	mov	arg01, result1
10108     48 51 B0 FD | 	call	#__system___lockmem
1010c     00 12 06 F6 | 	mov	arg01, #0
10110     0F 15 02 F6 | 	mov	arg02, local01
10114     00 16 06 F6 | 	mov	arg03, #0
10118     2C 5E B0 FD | 	call	#__system___basic_print_string
1011c     00 12 06 F6 | 	mov	arg01, #0
10120     E4 A6 B0 FD | 	call	#__system___getiolock_0334
10124     FD 00 68 FC | 	wrlong	#0, result1
10128                 | LR__1300
10128                 | LR__1301
10128                 | ' if r=0 then 
10128     00 24 0E F2 | 	cmp	local04, #0 wz
1012c     1C 01 90 5D |  if_ne	jmp	#LR__1306
10130                 | '   if t1.result_type=result_int then print t1.result.iresult
10130     1C 22 0E F2 | 	cmp	local03, #28 wz
10134     40 00 90 5D |  if_ne	jmp	#LR__1302
10138     00 12 06 F6 | 	mov	arg01, #0
1013c     C8 A6 B0 FD | 	call	#__system___getiolock_0334
10140     FD 12 02 F6 | 	mov	arg01, result1
10144     0C 51 B0 FD | 	call	#__system___lockmem
10148     00 12 06 F6 | 	mov	arg01, #0
1014c     0F 15 02 F6 | 	mov	arg02, local01
10150     00 16 06 F6 | 	mov	arg03, #0
10154     0A 18 06 F6 | 	mov	arg04, #10
10158     30 5E B0 FD | 	call	#__system___basic_print_integer
1015c     00 12 06 F6 | 	mov	arg01, #0
10160     0A 14 06 F6 | 	mov	arg02, #10
10164     00 16 06 F6 | 	mov	arg03, #0
10168     84 5D B0 FD | 	call	#__system___basic_print_char
1016c     00 12 06 F6 | 	mov	arg01, #0
10170     94 A6 B0 FD | 	call	#__system___getiolock_0334
10174     FD 00 68 FC | 	wrlong	#0, result1
10178                 | LR__1302
10178                 | '   if t1.result_type=result_uint then print t1.result.uresult
10178     1D 22 0E F2 | 	cmp	local03, #29 wz
1017c     40 00 90 5D |  if_ne	jmp	#LR__1303
10180     00 12 06 F6 | 	mov	arg01, #0
10184     80 A6 B0 FD | 	call	#__system___getiolock_0334
10188     FD 12 02 F6 | 	mov	arg01, result1
1018c     C4 50 B0 FD | 	call	#__system___lockmem
10190     00 12 06 F6 | 	mov	arg01, #0
10194     0F 15 02 F6 | 	mov	arg02, local01
10198     00 16 06 F6 | 	mov	arg03, #0
1019c     0A 18 06 F6 | 	mov	arg04, #10
101a0     28 5E B0 FD | 	call	#__system___basic_print_unsigned
101a4     00 12 06 F6 | 	mov	arg01, #0
101a8     0A 14 06 F6 | 	mov	arg02, #10
101ac     00 16 06 F6 | 	mov	arg03, #0
101b0     3C 5D B0 FD | 	call	#__system___basic_print_char
101b4     00 12 06 F6 | 	mov	arg01, #0
101b8     4C A6 B0 FD | 	call	#__system___getiolock_0334
101bc     FD 00 68 FC | 	wrlong	#0, result1
101c0                 | LR__1303
101c0                 | '   if t1.result_type=result_float then print t1.result.fresult
101c0     1E 22 0E F2 | 	cmp	local03, #30 wz
101c4     40 00 90 5D |  if_ne	jmp	#LR__1304
101c8     00 12 06 F6 | 	mov	arg01, #0
101cc     38 A6 B0 FD | 	call	#__system___getiolock_0334
101d0     FD 12 02 F6 | 	mov	arg01, result1
101d4     7C 50 B0 FD | 	call	#__system___lockmem
101d8     00 12 06 F6 | 	mov	arg01, #0
101dc     0F 15 02 F6 | 	mov	arg02, local01
101e0     00 16 06 F6 | 	mov	arg03, #0
101e4     23 18 06 F6 | 	mov	arg04, #35
101e8     94 80 B0 FD | 	call	#__system___basic_print_float
101ec     00 12 06 F6 | 	mov	arg01, #0
101f0     0A 14 06 F6 | 	mov	arg02, #10
101f4     00 16 06 F6 | 	mov	arg03, #0
101f8     F4 5C B0 FD | 	call	#__system___basic_print_char
101fc     00 12 06 F6 | 	mov	arg01, #0
10200     04 A6 B0 FD | 	call	#__system___getiolock_0334
10204     FD 00 68 FC | 	wrlong	#0, result1
10208                 | LR__1304
10208                 | '   if t1.result_type=result_string then print t1.result.sresult
10208     1F 22 0E F2 | 	cmp	local03, #31 wz
1020c     3C 00 90 5D |  if_ne	jmp	#LR__1305
10210     00 12 06 F6 | 	mov	arg01, #0
10214     F0 A5 B0 FD | 	call	#__system___getiolock_0334
10218     FD 12 02 F6 | 	mov	arg01, result1
1021c     34 50 B0 FD | 	call	#__system___lockmem
10220     00 12 06 F6 | 	mov	arg01, #0
10224     0F 15 02 F6 | 	mov	arg02, local01
10228     00 16 06 F6 | 	mov	arg03, #0
1022c     18 5D B0 FD | 	call	#__system___basic_print_string
10230     00 12 06 F6 | 	mov	arg01, #0
10234     0A 14 06 F6 | 	mov	arg02, #10
10238     00 16 06 F6 | 	mov	arg03, #0
1023c     B0 5C B0 FD | 	call	#__system___basic_print_char
10240     00 12 06 F6 | 	mov	arg01, #0
10244     C0 A5 B0 FD | 	call	#__system___getiolock_0334
10248     FD 00 68 FC | 	wrlong	#0, result1
1024c                 | LR__1305
1024c                 | LR__1306
1024c                 | ' if r=print_mod_empty then print
1024c     20 24 0E F2 | 	cmp	local04, #32 wz
10250     2C 00 90 5D |  if_ne	jmp	#LR__1307
10254     00 12 06 F6 | 	mov	arg01, #0
10258     AC A5 B0 FD | 	call	#__system___getiolock_0334
1025c     FD 12 02 F6 | 	mov	arg01, result1
10260     F0 4F B0 FD | 	call	#__system___lockmem
10264     00 12 06 F6 | 	mov	arg01, #0
10268     0A 14 06 F6 | 	mov	arg02, #10
1026c     00 16 06 F6 | 	mov	arg03, #0
10270     7C 5C B0 FD | 	call	#__system___basic_print_char
10274     00 12 06 F6 | 	mov	arg01, #0
10278     8C A5 B0 FD | 	call	#__system___getiolock_0334
1027c     FD 00 68 FC | 	wrlong	#0, result1
10280                 | LR__1307
10280                 | LR__1308
10280     A7 F0 03 F6 | 	mov	ptra, fp
10284     B2 00 A0 FD | 	call	#popregs_
10288                 | _do_print_ret
10288     2D 00 64 FD | 	ret
1028c                 | 
1028c                 | ' 
1028c                 | ' 
1028c                 | ' sub do_paper
1028c                 | _do_paper
1028c     03 4A 05 F6 | 	mov	COUNT_, #3
10290     A8 00 A0 FD | 	call	#pushregs_
10294     A0 8B BF FD | 	call	#_pop
10298     FD 1E 02 F6 | 	mov	local01, result1
1029c     FE 20 02 F6 | 	mov	local02, result2
102a0     FF 22 02 F6 | 	mov	local03, result3
102a4                 | ' t1=pop() 
102a4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
102a4     1E 22 0E F2 | 	cmp	local03, #30 wz
102a8     10 00 90 5D |  if_ne	jmp	#LR__1310
102ac     0F 13 02 F6 | 	mov	arg01, local01
102b0     00 14 06 F6 | 	mov	arg02, #0
102b4     78 7E B0 FD | 	call	#__system___float_tointeger
102b8     FD 1E 02 F6 | 	mov	local01, result1
102bc                 | LR__1310
102bc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
102bc     1F 22 0E F2 | 	cmp	local03, #31 wz
102c0     18 00 90 5D |  if_ne	jmp	#LR__1311
102c4     0F 13 02 F6 | 	mov	arg01, local01
102c8     84 81 B0 FD | 	call	#__system____builtin_atof
102cc     FD 12 02 F6 | 	mov	arg01, result1
102d0     00 14 06 F6 | 	mov	arg02, #0
102d4     58 7E B0 FD | 	call	#__system___float_tointeger
102d8     FD 1E 02 F6 | 	mov	local01, result1
102dc                 | LR__1311
102dc     2D 00 00 FF 
102e0     FC E5 05 F1 | 	add	objptr, ##23548
102e4     F2 1E 62 FC | 	wrlong	local01, objptr
102e8     04 E4 05 F1 | 	add	objptr, #4
102ec     F2 12 02 FB | 	rdlong	arg01, objptr
102f0                 | ' 
102f0                 | ' write_color:=ff
102f0     2D 00 00 FF 
102f4     C3 E5 85 F1 | 	sub	objptr, ##23491
102f8     F2 12 62 FC | 	wrlong	arg01, objptr
102fc                 | ' write_background:=bb
102fc     04 E4 05 F1 | 	add	objptr, #4
10300     F2 1E 62 FC | 	wrlong	local01, objptr
10304     41 E4 85 F1 | 	sub	objptr, #65
10308     A7 F0 03 F6 | 	mov	ptra, fp
1030c     B2 00 A0 FD | 	call	#popregs_
10310                 | _do_paper_ret
10310     2D 00 64 FD | 	ret
10314                 | 
10314                 | ' 
10314                 | ' sub do_ink
10314                 | _do_ink
10314     03 4A 05 F6 | 	mov	COUNT_, #3
10318     A8 00 A0 FD | 	call	#pushregs_
1031c     18 8B BF FD | 	call	#_pop
10320     FD 1E 02 F6 | 	mov	local01, result1
10324     FE 20 02 F6 | 	mov	local02, result2
10328     FF 22 02 F6 | 	mov	local03, result3
1032c                 | ' t1=pop() 
1032c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1032c     1E 22 0E F2 | 	cmp	local03, #30 wz
10330     10 00 90 5D |  if_ne	jmp	#LR__1320
10334     0F 13 02 F6 | 	mov	arg01, local01
10338     00 14 06 F6 | 	mov	arg02, #0
1033c     F0 7D B0 FD | 	call	#__system___float_tointeger
10340     FD 1E 02 F6 | 	mov	local01, result1
10344                 | LR__1320
10344                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10344     1F 22 0E F2 | 	cmp	local03, #31 wz
10348     18 00 90 5D |  if_ne	jmp	#LR__1321
1034c     0F 13 02 F6 | 	mov	arg01, local01
10350     FC 80 B0 FD | 	call	#__system____builtin_atof
10354     FD 12 02 F6 | 	mov	arg01, result1
10358     00 14 06 F6 | 	mov	arg02, #0
1035c     D0 7D B0 FD | 	call	#__system___float_tointeger
10360     FD 1E 02 F6 | 	mov	local01, result1
10364                 | LR__1321
10364     2E 00 00 FF 
10368     00 E4 05 F1 | 	add	objptr, ##23552
1036c     F2 1E 62 FC | 	wrlong	local01, objptr
10370     04 E4 85 F1 | 	sub	objptr, #4
10374     F2 14 02 FB | 	rdlong	arg02, objptr
10378                 | ' 
10378                 | ' write_color:=ff
10378     2D 00 00 FF 
1037c     BF E5 85 F1 | 	sub	objptr, ##23487
10380     F2 1E 62 FC | 	wrlong	local01, objptr
10384                 | ' write_background:=bb
10384     04 E4 05 F1 | 	add	objptr, #4
10388     F2 14 62 FC | 	wrlong	arg02, objptr
1038c     2D 00 00 FF 
10390     BF E5 05 F1 | 	add	objptr, ##23487
10394     F2 12 02 FB | 	rdlong	arg01, objptr
10398     2E 00 00 FF 
1039c     00 E4 85 F1 | 	sub	objptr, ##23552
103a0     7C 2B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
103a4     A7 F0 03 F6 | 	mov	ptra, fp
103a8     B2 00 A0 FD | 	call	#popregs_
103ac                 | _do_ink_ret
103ac     2D 00 64 FD | 	ret
103b0                 | 
103b0                 | ' 
103b0                 | ' 
103b0                 | ' sub do_font
103b0                 | _do_font
103b0     03 4A 05 F6 | 	mov	COUNT_, #3
103b4     A8 00 A0 FD | 	call	#pushregs_
103b8     7C 8A BF FD | 	call	#_pop
103bc     FD 1E 02 F6 | 	mov	local01, result1
103c0     FE 20 02 F6 | 	mov	local02, result2
103c4     FF 22 02 F6 | 	mov	local03, result3
103c8                 | ' t1=pop() 
103c8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
103c8     1E 22 0E F2 | 	cmp	local03, #30 wz
103cc     10 00 90 5D |  if_ne	jmp	#LR__1330
103d0     0F 13 02 F6 | 	mov	arg01, local01
103d4     00 14 06 F6 | 	mov	arg02, #0
103d8     54 7D B0 FD | 	call	#__system___float_tointeger
103dc     FD 1E 02 F6 | 	mov	local01, result1
103e0                 | LR__1330
103e0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
103e0     1F 22 0E F2 | 	cmp	local03, #31 wz
103e4     18 00 90 5D |  if_ne	jmp	#LR__1331
103e8     0F 13 02 F6 | 	mov	arg01, local01
103ec     60 80 B0 FD | 	call	#__system____builtin_atof
103f0     FD 12 02 F6 | 	mov	arg01, result1
103f4     00 14 06 F6 | 	mov	arg02, #0
103f8     34 7D B0 FD | 	call	#__system___float_tointeger
103fc     FD 1E 02 F6 | 	mov	local01, result1
10400                 | LR__1331
10400     2E 00 00 FF 
10404     04 E4 05 F1 | 	add	objptr, ##23556
10408     F2 1E 62 FC | 	wrlong	local01, objptr
1040c     2E 00 00 FF 
10410     04 E4 85 F1 | 	sub	objptr, ##23556
10414     02 1E 66 F0 | 	shl	local01, #2
10418     0F 13 02 F6 | 	mov	arg01, local01
1041c     6C 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
10420     A7 F0 03 F6 | 	mov	ptra, fp
10424     B2 00 A0 FD | 	call	#popregs_
10428                 | _do_font_ret
10428     2D 00 64 FD | 	ret
1042c                 | 
1042c                 | ' 
1042c                 | ' sub do_mode
1042c                 | _do_mode
1042c     04 4A 05 F6 | 	mov	COUNT_, #4
10430     A8 00 A0 FD | 	call	#pushregs_
10434     00 8A BF FD | 	call	#_pop
10438     FD 1E 02 F6 | 	mov	local01, result1
1043c     FE 20 02 F6 | 	mov	local02, result2
10440     FF 22 02 F6 | 	mov	local03, result3
10444                 | ' t1=pop() 
10444                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10444     1E 22 0E F2 | 	cmp	local03, #30 wz
10448     10 00 90 5D |  if_ne	jmp	#LR__1340
1044c     0F 13 02 F6 | 	mov	arg01, local01
10450     00 14 06 F6 | 	mov	arg02, #0
10454     D8 7C B0 FD | 	call	#__system___float_tointeger
10458     FD 1E 02 F6 | 	mov	local01, result1
1045c                 | LR__1340
1045c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1045c     1F 22 0E F2 | 	cmp	local03, #31 wz
10460     18 00 90 5D |  if_ne	jmp	#LR__1341
10464     0F 13 02 F6 | 	mov	arg01, local01
10468     E4 7F B0 FD | 	call	#__system____builtin_atof
1046c     FD 12 02 F6 | 	mov	arg01, result1
10470     00 14 06 F6 | 	mov	arg02, #0
10474     B8 7C B0 FD | 	call	#__system___float_tointeger
10478     FD 1E 02 F6 | 	mov	local01, result1
1047c                 | LR__1341
1047c                 | ' select case t1.result.iresult
1047c     0F 25 02 F6 | 	mov	local04, local01
10480     04 24 26 F3 | 	fle	local04, #4
10484     30 24 62 FD | 	jmprel	local04
10488                 | LR__1342
10488     10 00 90 FD | 	jmp	#LR__1343
1048c     68 00 90 FD | 	jmp	#LR__1344
10490     C0 00 90 FD | 	jmp	#LR__1345
10494     18 01 90 FD | 	jmp	#LR__1346
10498     6C 01 90 FD | 	jmp	#LR__1347
1049c                 | LR__1343
1049c     2E 00 00 FF 
104a0     04 E4 05 F1 | 	add	objptr, ##23556
104a4     F2 02 68 FC | 	wrlong	#1, objptr
104a8     04 E4 85 F1 | 	sub	objptr, #4
104ac     F2 34 69 FC | 	wrlong	#154, objptr
104b0     04 E4 85 F1 | 	sub	objptr, #4
104b4     F2 26 69 FC | 	wrlong	#147, objptr
104b8     2D 00 00 FF 
104bc     FC E5 85 F1 | 	sub	objptr, ##23548
104c0     04 12 06 F6 | 	mov	arg01, #4
104c4     C4 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
104c8     2E 00 00 FF 
104cc     00 E4 05 F1 | 	add	objptr, ##23552
104d0     F2 12 02 FB | 	rdlong	arg01, objptr
104d4     04 E4 85 F1 | 	sub	objptr, #4
104d8     F2 14 02 FB | 	rdlong	arg02, objptr
104dc                 | ' 
104dc                 | ' write_color:=ff
104dc     2D 00 00 FF 
104e0     BF E5 85 F1 | 	sub	objptr, ##23487
104e4     F2 12 62 FC | 	wrlong	arg01, objptr
104e8                 | ' write_background:=bb
104e8     04 E4 05 F1 | 	add	objptr, #4
104ec     F2 14 62 FC | 	wrlong	arg02, objptr
104f0     41 E4 85 F1 | 	sub	objptr, #65
104f4     10 01 90 FD | 	jmp	#LR__1347
104f8                 | LR__1344
104f8     2E 00 00 FF 
104fc     04 E4 05 F1 | 	add	objptr, ##23556
10500     F2 00 68 FC | 	wrlong	#0, objptr
10504     04 E4 85 F1 | 	sub	objptr, #4
10508     F2 2E 68 FC | 	wrlong	#23, objptr
1050c     00 12 06 F6 | 	mov	arg01, #0
10510     04 E4 85 F1 | 	sub	objptr, #4
10514     F2 00 68 FC | 	wrlong	#0, objptr
10518     2D 00 00 FF 
1051c     FC E5 85 F1 | 	sub	objptr, ##23548
10520     68 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10524     2E 00 00 FF 
10528     00 E4 05 F1 | 	add	objptr, ##23552
1052c     F2 12 02 FB | 	rdlong	arg01, objptr
10530     04 E4 85 F1 | 	sub	objptr, #4
10534     F2 14 02 FB | 	rdlong	arg02, objptr
10538                 | ' 
10538                 | ' write_color:=ff
10538     2D 00 00 FF 
1053c     BF E5 85 F1 | 	sub	objptr, ##23487
10540     F2 12 62 FC | 	wrlong	arg01, objptr
10544                 | ' write_background:=bb
10544     04 E4 05 F1 | 	add	objptr, #4
10548     F2 14 62 FC | 	wrlong	arg02, objptr
1054c     41 E4 85 F1 | 	sub	objptr, #65
10550     B4 00 90 FD | 	jmp	#LR__1347
10554                 | LR__1345
10554     2E 00 00 FF 
10558     04 E4 05 F1 | 	add	objptr, ##23556
1055c     F2 00 68 FC | 	wrlong	#0, objptr
10560     04 E4 85 F1 | 	sub	objptr, #4
10564     F2 6A 69 FC | 	wrlong	#181, objptr
10568     00 12 06 F6 | 	mov	arg01, #0
1056c     04 E4 85 F1 | 	sub	objptr, #4
10570     F2 00 68 FC | 	wrlong	#0, objptr
10574     2D 00 00 FF 
10578     FC E5 85 F1 | 	sub	objptr, ##23548
1057c     0C 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10580     2E 00 00 FF 
10584     00 E4 05 F1 | 	add	objptr, ##23552
10588     F2 12 02 FB | 	rdlong	arg01, objptr
1058c     04 E4 85 F1 | 	sub	objptr, #4
10590     F2 14 02 FB | 	rdlong	arg02, objptr
10594                 | ' 
10594                 | ' write_color:=ff
10594     2D 00 00 FF 
10598     BF E5 85 F1 | 	sub	objptr, ##23487
1059c     F2 12 62 FC | 	wrlong	arg01, objptr
105a0                 | ' write_background:=bb
105a0     04 E4 05 F1 | 	add	objptr, #4
105a4     F2 14 62 FC | 	wrlong	arg02, objptr
105a8     41 E4 85 F1 | 	sub	objptr, #65
105ac     58 00 90 FD | 	jmp	#LR__1347
105b0                 | LR__1346
105b0     2E 00 00 FF 
105b4     04 E4 05 F1 | 	add	objptr, ##23556
105b8     F2 00 68 FC | 	wrlong	#0, objptr
105bc     04 E4 85 F1 | 	sub	objptr, #4
105c0     F2 1E 68 FC | 	wrlong	#15, objptr
105c4     00 12 06 F6 | 	mov	arg01, #0
105c8     04 E4 85 F1 | 	sub	objptr, #4
105cc     F2 00 68 FC | 	wrlong	#0, objptr
105d0     2D 00 00 FF 
105d4     FC E5 85 F1 | 	sub	objptr, ##23548
105d8     B0 38 B0 FD | 	call	#_hg010b_spin2_setfontfamily
105dc     2E 00 00 FF 
105e0     00 E4 05 F1 | 	add	objptr, ##23552
105e4     F2 12 02 FB | 	rdlong	arg01, objptr
105e8     04 E4 85 F1 | 	sub	objptr, #4
105ec     F2 14 02 FB | 	rdlong	arg02, objptr
105f0                 | ' 
105f0                 | ' write_color:=ff
105f0     2D 00 00 FF 
105f4     BF E5 85 F1 | 	sub	objptr, ##23487
105f8     F2 12 62 FC | 	wrlong	arg01, objptr
105fc                 | ' write_background:=bb
105fc     04 E4 05 F1 | 	add	objptr, #4
10600     F2 14 62 FC | 	wrlong	arg02, objptr
10604     41 E4 85 F1 | 	sub	objptr, #65
10608                 | LR__1347
10608     2E 00 00 FF 
1060c     00 E4 05 F1 | 	add	objptr, ##23552
10610     F2 12 02 FB | 	rdlong	arg01, objptr
10614     04 E4 85 F1 | 	sub	objptr, #4
10618     F2 14 02 FB | 	rdlong	arg02, objptr
1061c     2D 00 00 FF 
10620     FC E5 85 F1 | 	sub	objptr, ##23548
10624     4C 39 B0 FD | 	call	#_hg010b_spin2_cls
10628     24 01 00 FF 
1062c     C5 13 06 F6 | 	mov	arg01, ##@LR__4312
10630                 | ' 
10630                 | ' write(text)
10630     FC 3B B0 FD | 	call	#_hg010b_spin2_write
10634                 | ' crlf
10634     58 3D B0 FD | 	call	#_hg010b_spin2_crlf
10638     09 00 00 FF 
1063c     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
10640     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
10644     09 00 00 FF 
10648     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
1064c                 | ' 
1064c                 | ' write(text)
1064c     E0 3B B0 FD | 	call	#_hg010b_spin2_write
10650                 | ' crlf
10650     3C 3D B0 FD | 	call	#_hg010b_spin2_crlf
10654     50 00 00 FF 
10658     A0 E5 05 F1 | 	add	objptr, ##41376
1065c     F2 12 02 FB | 	rdlong	arg01, objptr
10660     50 00 00 FF 
10664     A0 E5 85 F1 | 	sub	objptr, ##41376
10668                 | ' 
10668                 | ' write(text)
10668     C4 3B B0 FD | 	call	#_hg010b_spin2_write
1066c                 | ' crlf
1066c     20 3D B0 FD | 	call	#_hg010b_spin2_crlf
10670     A7 F0 03 F6 | 	mov	ptra, fp
10674     B2 00 A0 FD | 	call	#popregs_
10678                 | _do_mode_ret
10678     2D 00 64 FD | 	ret
1067c                 | 
1067c                 | ' 
1067c                 | ' 
1067c                 | ' 
1067c                 | ' sub do_pinwrite
1067c                 | _do_pinwrite
1067c     B8 87 BF FD | 	call	#_pop
10680     FD 14 02 F6 | 	mov	arg02, result1
10684     B0 87 BF FD | 	call	#_pop
10688     FD 12 02 F6 | 	mov	arg01, result1
1068c     78 4D B0 FD | 	call	#__system___pinwrite
10690                 | _do_pinwrite_ret
10690     2D 00 64 FD | 	ret
10694                 | 
10694                 | ' 
10694                 | ' sub do_waitms
10694                 | _do_waitms
10694     01 4A 05 F6 | 	mov	COUNT_, #1
10698     A8 00 A0 FD | 	call	#pushregs_
1069c     18 F0 07 F1 | 	add	ptra, #24
106a0     94 87 BF FD | 	call	#_pop
106a4     A7 FA 61 FC | 	wrlong	result1, fp
106a8     04 4E 05 F1 | 	add	fp, #4
106ac     A7 FC 61 FC | 	wrlong	result2, fp
106b0     04 4E 05 F1 | 	add	fp, #4
106b4     A7 FE 61 FC | 	wrlong	result3, fp
106b8                 | ' 
106b8                 | ' t1=pop() 'value
106b8                 | ' 
106b8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
106b8     08 4E 85 F1 | 	sub	fp, #8
106bc     1C FE 0D F2 | 	cmp	result3, #28 wz
106c0     08 4E 05 51 |  if_ne	add	fp, #8
106c4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
106c8     08 4E 85 51 |  if_ne	sub	fp, #8
106cc     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
106d0     A7 12 02 AB |  if_e	rdlong	arg01, fp
106d4     0C 4E 05 A1 |  if_e	add	fp, #12
106d8     A7 12 62 AC |  if_e	wrlong	arg01, fp
106dc     0C 4E 85 A1 |  if_e	sub	fp, #12
106e0     14 00 90 AD |  if_e	jmp	#LR__1350
106e4     A7 12 02 F6 | 	mov	arg01, fp
106e8     B4 DC BF FD | 	call	#_converttoint
106ec     0C 4E 05 F1 | 	add	fp, #12
106f0     A7 FA 61 FC | 	wrlong	result1, fp
106f4     0C 4E 85 F1 | 	sub	fp, #12
106f8                 | LR__1350
106f8                 | ' if t<0 then return
106f8     0C 4E 05 F1 | 	add	fp, #12
106fc     A7 12 02 FB | 	rdlong	arg01, fp
10700     0C 4E 85 F1 | 	sub	fp, #12
10704     00 12 56 F2 | 	cmps	arg01, #0 wc
10708     B8 00 90 CD |  if_b	jmp	#LR__1355
1070c                 | ' if t < 5000 then 
1070c     0C 4E 05 F1 | 	add	fp, #12
10710     A7 12 02 FB | 	rdlong	arg01, fp
10714     0C 4E 85 F1 | 	sub	fp, #12
10718     09 00 00 FF 
1071c     88 13 56 F2 | 	cmps	arg01, ##5000 wc
10720     14 00 90 3D |  if_ae	jmp	#LR__1351
10724     0C 4E 05 F1 | 	add	fp, #12
10728     A7 12 02 FB | 	rdlong	arg01, fp
1072c     0C 4E 85 F1 | 	sub	fp, #12
10730     14 4E B0 FD | 	call	#__system___waitms
10734     8C 00 90 FD | 	jmp	#LR__1354
10738                 | LR__1351
10738     10 4E 05 F1 | 	add	fp, #16
1073c     A7 02 68 FC | 	wrlong	#1, fp
10740     04 4E 85 F1 | 	sub	fp, #4
10744     A7 12 02 FB | 	rdlong	arg01, fp
10748     09 13 52 F6 | 	abs	arg01, arg01 wc
1074c     09 00 00 FF 
10750     88 13 16 FD | 	qdiv	arg01, ##5000
10754                 | '   for i=1 to t/5000
10754     0C 4E 85 F1 | 	sub	fp, #12
10758     18 1E 62 FD | 	getqx	local01
1075c     0F 1F 82 F6 | 	negc	local01, local01
10760     01 1E 06 F1 | 	add	local01, #1
10764                 | LR__1352
10764     10 4E 05 F1 | 	add	fp, #16
10768     A7 12 02 FB | 	rdlong	arg01, fp
1076c     10 4E 85 F1 | 	sub	fp, #16
10770     0F 13 52 F2 | 	cmps	arg01, local01 wc
10774     28 00 90 3D |  if_ae	jmp	#LR__1353
10778     0C 4E 05 F1 | 	add	fp, #12
1077c     A7 12 02 FB | 	rdlong	arg01, fp
10780     0C 4E 85 F1 | 	sub	fp, #12
10784     C0 4D B0 FD | 	call	#__system___waitms
10788     10 4E 05 F1 | 	add	fp, #16
1078c     A7 12 02 FB | 	rdlong	arg01, fp
10790     01 12 06 F1 | 	add	arg01, #1
10794     A7 12 62 FC | 	wrlong	arg01, fp
10798     10 4E 85 F1 | 	sub	fp, #16
1079c     C4 FF 9F FD | 	jmp	#LR__1352
107a0                 | LR__1353
107a0     0C 4E 05 F1 | 	add	fp, #12
107a4     A7 1E 02 FB | 	rdlong	local01, fp
107a8     0F 1F 52 F6 | 	abs	local01, local01 wc
107ac     09 00 00 FF 
107b0     88 1F 16 FD | 	qdiv	local01, ##5000
107b4     0C 4E 85 F1 | 	sub	fp, #12
107b8     19 1E 62 FD | 	getqy	local01
107bc     0F 13 82 F6 | 	negc	arg01, local01
107c0     84 4D B0 FD | 	call	#__system___waitms
107c4                 | LR__1354
107c4                 | LR__1355
107c4     A7 F0 03 F6 | 	mov	ptra, fp
107c8     B2 00 A0 FD | 	call	#popregs_
107cc                 | _do_waitms_ret
107cc     2D 00 64 FD | 	ret
107d0                 | 
107d0                 | ' 
107d0                 | ' sub do_waitvbl
107d0                 | _do_waitvbl
107d0     01 12 06 F6 | 	mov	arg01, #1
107d4     2C 37 B0 FD | 	call	#_hg010b_spin2_waitvbl
107d8                 | _do_waitvbl_ret
107d8     2D 00 64 FD | 	ret
107dc                 | 
107dc                 | ' 
107dc                 | ' sub do_waitclock
107dc                 | _do_waitclock
107dc     52 00 00 FF 
107e0     38 E4 05 F1 | 	add	objptr, ##42040
107e4     F2 00 02 FB | 	rdlong	_var01, objptr
107e8                 | ' c=hkcnt
107e8                 | ' do: loop until hkcnt<>c
107e8                 | LR__1360
107e8     F2 02 02 FB | 	rdlong	_var02, objptr
107ec     00 03 0A F2 | 	cmp	_var02, _var01 wz
107f0     F4 FF 9F AD |  if_e	jmp	#LR__1360
107f4     52 00 00 FF 
107f8     38 E4 85 F1 | 	sub	objptr, ##42040
107fc                 | _do_waitclock_ret
107fc     2D 00 64 FD | 	ret
10800                 | 
10800                 | ' 
10800                 | ' sub do_dir
10800                 | _do_dir
10800     03 4A 05 F6 | 	mov	COUNT_, #3
10804     A8 00 A0 FD | 	call	#pushregs_
10808     24 01 00 FF 
1080c     C6 13 06 F6 | 	mov	arg01, ##@LR__4313
10810     CC 50 B0 FD | 	call	#__system___chdir
10814                 | ' chdir("/sd/bas")       ' set working directory
10814                 | ' print "Working directory: "; currentdir$ 
10814     00 12 06 F6 | 	mov	arg01, #0
10818     EC 9F B0 FD | 	call	#__system___getiolock_0334
1081c     FD 12 02 F6 | 	mov	arg01, result1
10820     30 4A B0 FD | 	call	#__system___lockmem
10824     24 01 00 FF 
10828     CE 15 06 F6 | 	mov	arg02, ##@LR__4314
1082c     00 12 06 F6 | 	mov	arg01, #0
10830     00 16 06 F6 | 	mov	arg03, #0
10834     10 57 B0 FD | 	call	#__system___basic_print_string
10838     49 00 00 FF 
1083c     58 E4 05 F1 | 	add	objptr, ##37464
10840     F2 14 02 FB | 	rdlong	arg02, objptr
10844     49 00 00 FF 
10848     58 E4 85 F1 | 	sub	objptr, ##37464
1084c     00 12 06 F6 | 	mov	arg01, #0
10850     00 16 06 F6 | 	mov	arg03, #0
10854     F0 56 B0 FD | 	call	#__system___basic_print_string
10858     00 12 06 F6 | 	mov	arg01, #0
1085c     0A 14 06 F6 | 	mov	arg02, #10
10860     00 16 06 F6 | 	mov	arg03, #0
10864     88 56 B0 FD | 	call	#__system___basic_print_char
10868     00 12 06 F6 | 	mov	arg01, #0
1086c     98 9F B0 FD | 	call	#__system___getiolock_0334
10870     FD 00 68 FC | 	wrlong	#0, result1
10874     24 01 00 FF 
10878     E2 13 06 F6 | 	mov	arg01, ##@LR__4315
1087c     10 14 06 F6 | 	mov	arg02, #16
10880     BC A0 B0 FD | 	call	#__system___basic_dir
10884     FD 1E 02 F6 | 	mov	local01, result1
10888                 | ' 
10888                 | ' filename=dir$("*", fbDirectory)
10888                 | ' while filename <> "" and filename <> nil
10888                 | LR__1370
10888     00 20 06 F6 | 	mov	local02, #0
1088c     24 01 00 FF 
10890     E4 15 06 F6 | 	mov	arg02, ##@LR__4316
10894     0F 13 02 F6 | 	mov	arg01, local01
10898     E0 49 B0 FD | 	call	#__system___string_cmp
1089c     00 FA 0D F2 | 	cmp	result1, #0 wz
108a0     00 20 26 56 |  if_ne	not	local02, #0
108a4     00 22 06 F6 | 	mov	local03, #0
108a8     0F 13 02 F6 | 	mov	arg01, local01
108ac     00 14 06 F6 | 	mov	arg02, #0
108b0     C8 49 B0 FD | 	call	#__system___string_cmp
108b4     00 FA 0D F2 | 	cmp	result1, #0 wz
108b8     00 22 26 56 |  if_ne	not	local03, #0
108bc     11 21 CA F7 | 	test	local02, local03 wz
108c0     64 00 90 AD |  if_e	jmp	#LR__1371
108c4                 | '   print "[dir] ";filename
108c4     00 12 06 F6 | 	mov	arg01, #0
108c8     3C 9F B0 FD | 	call	#__system___getiolock_0334
108cc     FD 12 02 F6 | 	mov	arg01, result1
108d0     80 49 B0 FD | 	call	#__system___lockmem
108d4     24 01 00 FF 
108d8     E5 15 06 F6 | 	mov	arg02, ##@LR__4317
108dc     00 12 06 F6 | 	mov	arg01, #0
108e0     00 16 06 F6 | 	mov	arg03, #0
108e4     60 56 B0 FD | 	call	#__system___basic_print_string
108e8     00 12 06 F6 | 	mov	arg01, #0
108ec     0F 15 02 F6 | 	mov	arg02, local01
108f0     00 16 06 F6 | 	mov	arg03, #0
108f4     50 56 B0 FD | 	call	#__system___basic_print_string
108f8     00 12 06 F6 | 	mov	arg01, #0
108fc     0A 14 06 F6 | 	mov	arg02, #10
10900     00 16 06 F6 | 	mov	arg03, #0
10904     E8 55 B0 FD | 	call	#__system___basic_print_char
10908     00 12 06 F6 | 	mov	arg01, #0
1090c     F8 9E B0 FD | 	call	#__system___getiolock_0334
10910     FD 00 68 FC | 	wrlong	#0, result1
10914     00 12 06 F6 | 	mov	arg01, #0
10918     00 14 06 F6 | 	mov	arg02, #0
1091c     20 A0 B0 FD | 	call	#__system___basic_dir
10920     FD 1E 02 F6 | 	mov	local01, result1
10924     60 FF 9F FD | 	jmp	#LR__1370
10928                 | LR__1371
10928     24 01 00 FF 
1092c     EC 13 06 F6 | 	mov	arg01, ##@LR__4318
10930     21 14 06 F6 | 	mov	arg02, #33
10934     08 A0 B0 FD | 	call	#__system___basic_dir
10938     FD 1E 02 F6 | 	mov	local01, result1
1093c                 | ' 
1093c                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1093c                 | ' do while filename <> "" and filename <> nil
1093c                 | LR__1372
1093c     00 20 06 F6 | 	mov	local02, #0
10940     24 01 00 FF 
10944     EE 15 06 F6 | 	mov	arg02, ##@LR__4319
10948     0F 13 02 F6 | 	mov	arg01, local01
1094c     2C 49 B0 FD | 	call	#__system___string_cmp
10950     00 FA 0D F2 | 	cmp	result1, #0 wz
10954     00 20 26 56 |  if_ne	not	local02, #0
10958     00 22 06 F6 | 	mov	local03, #0
1095c     0F 13 02 F6 | 	mov	arg01, local01
10960     00 14 06 F6 | 	mov	arg02, #0
10964     14 49 B0 FD | 	call	#__system___string_cmp
10968     00 FA 0D F2 | 	cmp	result1, #0 wz
1096c     00 22 26 56 |  if_ne	not	local03, #0
10970     11 21 CA F7 | 	test	local02, local03 wz
10974     54 01 90 AD |  if_e	jmp	#LR__1376
10978                 | '   print filename
10978     00 12 06 F6 | 	mov	arg01, #0
1097c     88 9E B0 FD | 	call	#__system___getiolock_0334
10980     FD 12 02 F6 | 	mov	arg01, result1
10984     CC 48 B0 FD | 	call	#__system___lockmem
10988     00 12 06 F6 | 	mov	arg01, #0
1098c     0F 15 02 F6 | 	mov	arg02, local01
10990     00 16 06 F6 | 	mov	arg03, #0
10994     B0 55 B0 FD | 	call	#__system___basic_print_string
10998     00 12 06 F6 | 	mov	arg01, #0
1099c     0A 14 06 F6 | 	mov	arg02, #10
109a0     00 16 06 F6 | 	mov	arg03, #0
109a4     48 55 B0 FD | 	call	#__system___basic_print_char
109a8     00 12 06 F6 | 	mov	arg01, #0
109ac     58 9E B0 FD | 	call	#__system___getiolock_0334
109b0     FD 00 68 FC | 	wrlong	#0, result1
109b4     00 12 06 F6 | 	mov	arg01, #0
109b8     00 14 06 F6 | 	mov	arg02, #0
109bc     80 9F B0 FD | 	call	#__system___basic_dir
109c0     FD 1E 02 F6 | 	mov	local01, result1
109c4                 | '   filename = dir$()      ' continue scan
109c4                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
109c4                 | ' return cursor_y
109c4     3A E4 05 F1 | 	add	objptr, #58
109c8     F2 FA C1 FA | 	rdbyte	result1, objptr
109cc     3A E4 85 F1 | 	sub	objptr, #58
109d0     22 FA 0D F2 | 	cmp	result1, #34 wz
109d4     64 FF 9F 5D |  if_ne	jmp	#LR__1372
109d8                 | '     print "-----more, press any key";
109d8     00 12 06 F6 | 	mov	arg01, #0
109dc     28 9E B0 FD | 	call	#__system___getiolock_0334
109e0     FD 12 02 F6 | 	mov	arg01, result1
109e4     6C 48 B0 FD | 	call	#__system___lockmem
109e8     24 01 00 FF 
109ec     EF 15 06 F6 | 	mov	arg02, ##@LR__4320
109f0     00 12 06 F6 | 	mov	arg01, #0
109f4     00 16 06 F6 | 	mov	arg03, #0
109f8     4C 55 B0 FD | 	call	#__system___basic_print_string
109fc     00 12 06 F6 | 	mov	arg01, #0
10a00     04 9E B0 FD | 	call	#__system___getiolock_0334
10a04     FD 00 68 FC | 	wrlong	#0, result1
10a08                 | '     do 
10a08                 | LR__1373
10a08     EC 40 B0 FD | 	call	#_usbnew_spin2_get_key
10a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
10a10     F4 FF 9F 5D |  if_ne	jmp	#LR__1373
10a14                 | '     do
10a14                 | LR__1374
10a14     E0 40 B0 FD | 	call	#_usbnew_spin2_get_key
10a18     00 FA 0D F2 | 	cmp	result1, #0 wz
10a1c     F4 FF 9F AD |  if_e	jmp	#LR__1374
10a20                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
10a20     50 00 00 FF 
10a24     A4 E5 05 F1 | 	add	objptr, ##41380
10a28     F2 20 02 FB | 	rdlong	local02, objptr
10a2c     50 00 00 FF 
10a30     A4 E5 85 F1 | 	sub	objptr, ##41380
10a34     01 20 0E F2 | 	cmp	local02, #1 wz
10a38     44 00 90 5D |  if_ne	jmp	#LR__1375
10a3c     01 00 00 FF 
10a40     00 EA 05 F1 | 	add	ptr__dat__, ##512
10a44     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10a48     01 00 00 FF 
10a4c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
10a50     07 12 06 F6 | 	mov	arg01, #7
10a54     56 00 00 FF 
10a58     44 16 06 F6 | 	mov	arg03, ##44100
10a5c     0E 18 C6 F9 | 	decod	arg04, #14
10a60     03 00 00 FF 
10a64     94 1A 06 F6 | 	mov	arg05, ##1684
10a68     01 1C 66 F6 | 	neg	arg06, #1
10a6c     0B 00 00 FF 
10a70     C0 E4 05 F1 | 	add	objptr, ##5824
10a74     A8 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10a78     0B 00 00 FF 
10a7c     C0 E4 85 F1 | 	sub	objptr, ##5824
10a80                 | LR__1375
10a80     00 12 06 F6 | 	mov	arg01, #0
10a84     23 14 06 F6 | 	mov	arg02, #35
10a88     40 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10a8c                 | '     position 0,35: print "                             ";: position 4,35  
10a8c     00 12 06 F6 | 	mov	arg01, #0
10a90     74 9D B0 FD | 	call	#__system___getiolock_0334
10a94     FD 12 02 F6 | 	mov	arg01, result1
10a98     B8 47 B0 FD | 	call	#__system___lockmem
10a9c     25 01 00 FF 
10aa0     08 14 06 F6 | 	mov	arg02, ##@LR__4321
10aa4     00 12 06 F6 | 	mov	arg01, #0
10aa8     00 16 06 F6 | 	mov	arg03, #0
10aac     98 54 B0 FD | 	call	#__system___basic_print_string
10ab0     00 12 06 F6 | 	mov	arg01, #0
10ab4     50 9D B0 FD | 	call	#__system___getiolock_0334
10ab8     FD 00 68 FC | 	wrlong	#0, result1
10abc     04 12 06 F6 | 	mov	arg01, #4
10ac0     23 14 06 F6 | 	mov	arg02, #35
10ac4     04 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10ac8     70 FE 9F FD | 	jmp	#LR__1372
10acc                 | LR__1376
10acc     A7 F0 03 F6 | 	mov	ptra, fp
10ad0     B2 00 A0 FD | 	call	#popregs_
10ad4                 | _do_dir_ret
10ad4     2D 00 64 FD | 	ret
10ad8                 | 
10ad8                 | ' 
10ad8                 | ' sub do_if
10ad8                 | _do_if
10ad8     05 4A 05 F6 | 	mov	COUNT_, #5
10adc     A8 00 A0 FD | 	call	#pushregs_
10ae0     54 83 BF FD | 	call	#_pop
10ae4     FD 1E 0A F6 | 	mov	local01, result1 wz
10ae8     FE 20 02 F6 | 	mov	local02, result2
10aec     FF 22 02 F6 | 	mov	local03, result3
10af0                 | ' t1=pop()
10af0                 | ' ' if uresult=0, jump over else
10af0                 | ' if t1.result.uresult = 0 then 
10af0     BC 00 90 5D |  if_ne	jmp	#LR__1382
10af4                 | '   for i=lineptr_e to lineptr-1
10af4     41 00 00 FF 
10af8     44 E4 05 F1 | 	add	objptr, ##33348
10afc     F2 24 02 FB | 	rdlong	local04, objptr
10b00     04 E4 85 F1 | 	sub	objptr, #4
10b04     F2 26 02 FB | 	rdlong	local05, objptr
10b08     41 00 00 FF 
10b0c     40 E4 85 F1 | 	sub	objptr, ##33344
10b10                 | LR__1380
10b10     13 25 52 F2 | 	cmps	local04, local05 wc
10b14     78 00 90 3D |  if_ae	jmp	#LR__1381
10b18     12 FF 01 F6 | 	mov	result3, local04
10b1c     01 FE 65 F0 | 	shl	result3, #1
10b20     12 FF 01 F1 | 	add	result3, local04
10b24     02 FE 65 F0 | 	shl	result3, #2
10b28     3E 00 00 FF 
10b2c     40 E4 05 F1 | 	add	objptr, ##31808
10b30     F2 FE 01 F1 | 	add	result3, objptr
10b34     FF 1E 02 FB | 	rdlong	local01, result3
10b38     04 FE 05 F1 | 	add	result3, #4
10b3c     FF FC 01 FB | 	rdlong	result2, result3
10b40     12 FF 01 F6 | 	mov	result3, local04
10b44     01 FE 65 F0 | 	shl	result3, #1
10b48     12 FF 01 F1 | 	add	result3, local04
10b4c     02 FE 65 F0 | 	shl	result3, #2
10b50     F2 FE 01 F1 | 	add	result3, objptr
10b54     08 FE 05 F1 | 	add	result3, #8
10b58     FF FE 01 FB | 	rdlong	result3, result3
10b5c     FE 20 02 F6 | 	mov	local02, result2
10b60     FF 22 02 F6 | 	mov	local03, result3
10b64                 | '     t1=compiledline(i)
10b64                 | '     if t1.result_type=token_else then lineptr_e=i : return
10b64     5A 22 0E F2 | 	cmp	local03, #90 wz
10b68     3E 00 00 FF 
10b6c     40 E4 85 F1 | 	sub	objptr, ##31808
10b70     41 00 00 AF 
10b74     44 E4 05 A1 |  if_e	add	objptr, ##33348
10b78     F2 24 62 AC |  if_e	wrlong	local04, objptr
10b7c     41 00 00 AF 
10b80     44 E4 85 A1 |  if_e	sub	objptr, ##33348
10b84     28 00 90 AD |  if_e	jmp	#LR__1383
10b88     01 24 06 F1 | 	add	local04, #1
10b8c     80 FF 9F FD | 	jmp	#LR__1380
10b90                 | LR__1381
10b90     41 00 00 FF 
10b94     40 E4 05 F1 | 	add	objptr, ##33344
10b98     F2 26 02 FB | 	rdlong	local05, objptr
10b9c     01 26 86 F1 | 	sub	local05, #1
10ba0     04 E4 05 F1 | 	add	objptr, #4
10ba4     F2 26 62 FC | 	wrlong	local05, objptr
10ba8     41 00 00 FF 
10bac     44 E4 85 F1 | 	sub	objptr, ##33348
10bb0                 | LR__1382
10bb0                 | LR__1383
10bb0     A7 F0 03 F6 | 	mov	ptra, fp
10bb4     B2 00 A0 FD | 	call	#popregs_
10bb8                 | _do_if_ret
10bb8     2D 00 64 FD | 	ret
10bbc                 | 
10bbc                 | ' 
10bbc                 | ' sub do_else
10bbc                 | _do_else
10bbc     41 00 00 FF 
10bc0     40 E4 05 F1 | 	add	objptr, ##33344
10bc4     F2 00 02 FB | 	rdlong	_var01, objptr
10bc8     01 00 86 F1 | 	sub	_var01, #1
10bcc     04 E4 05 F1 | 	add	objptr, #4
10bd0     F2 00 62 FC | 	wrlong	_var01, objptr
10bd4     41 00 00 FF 
10bd8     44 E4 85 F1 | 	sub	objptr, ##33348
10bdc                 | _do_else_ret
10bdc     2D 00 64 FD | 	ret
10be0                 | 
10be0                 | ' 
10be0                 | ' 
10be0                 | ' 
10be0                 | ' sub do_nothing
10be0                 | _do_nothing
10be0                 | _do_nothing_ret
10be0     2D 00 64 FD | 	ret
10be4                 | 
10be4                 | ' 
10be4                 | ' sub do_brun
10be4                 | _do_brun
10be4     08 4A 05 F6 | 	mov	COUNT_, #8
10be8     A8 00 A0 FD | 	call	#pushregs_
10bec     48 82 BF FD | 	call	#_pop
10bf0     FF 1A 02 F6 | 	mov	arg05, result3
10bf4     FD 1E 02 F6 | 	mov	local01, result1
10bf8     FE 20 02 F6 | 	mov	local02, result2
10bfc     0D 23 02 F6 | 	mov	local03, arg05
10c00                 | ' 
10c00                 | ' t1=pop() 
10c00                 | ' if t1.result_type=result_string then
10c00     1F 22 0E F2 | 	cmp	local03, #31 wz
10c04     EC 01 90 5D |  if_ne	jmp	#LR__1393
10c08     0F 25 02 F6 | 	mov	local04, local01
10c0c                 | '   filename=t1.result.sresult
10c0c                 | '   if left$(filename,1)="/" then 
10c0c     12 13 02 F6 | 	mov	arg01, local04
10c10     01 14 06 F6 | 	mov	arg02, #1
10c14     4C 66 B0 FD | 	call	#__system__Left_S
10c18     FD 12 02 F6 | 	mov	arg01, result1
10c1c     25 01 00 FF 
10c20     26 14 06 F6 | 	mov	arg02, ##@LR__4322
10c24     54 46 B0 FD | 	call	#__system___string_cmp
10c28     00 FA 0D F2 | 	cmp	result1, #0 wz
10c2c     12 27 02 A6 |  if_e	mov	local05, local04
10c30     14 00 90 AD |  if_e	jmp	#LR__1390
10c34     25 01 00 FF 
10c38     28 12 06 F6 | 	mov	arg01, ##@LR__4323
10c3c     12 15 02 F6 | 	mov	arg02, local04
10c40     6C 46 B0 FD | 	call	#__system___string_concat
10c44     FD 26 02 F6 | 	mov	local05, result1
10c48                 | LR__1390
10c48                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
10c48                 | '   open fullfilename for input as #9
10c48     09 12 06 F6 | 	mov	arg01, #9
10c4c     13 15 02 F6 | 	mov	arg02, local05
10c50     00 16 06 F6 | 	mov	arg03, #0
10c54     00 52 B0 FD | 	call	#__system___basic_open_string
10c58     20 E8 05 F1 | 	add	ptr___system__dat__, #32
10c5c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10c60     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
10c64     FD 28 0A F6 | 	mov	local06, result1 wz
10c68                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
10c68     8C 00 90 AD |  if_e	jmp	#LR__1391
10c6c     00 12 06 F6 | 	mov	arg01, #0
10c70     94 9B B0 FD | 	call	#__system___getiolock_0334
10c74     FD 12 02 F6 | 	mov	arg01, result1
10c78     D8 45 B0 FD | 	call	#__system___lockmem
10c7c     25 01 00 FF 
10c80     31 14 06 F6 | 	mov	arg02, ##@LR__4324
10c84     00 12 06 F6 | 	mov	arg01, #0
10c88     00 16 06 F6 | 	mov	arg03, #0
10c8c     B8 52 B0 FD | 	call	#__system___basic_print_string
10c90     00 12 06 F6 | 	mov	arg01, #0
10c94     14 15 02 F6 | 	mov	arg02, local06
10c98     00 16 06 F6 | 	mov	arg03, #0
10c9c     0A 18 06 F6 | 	mov	arg04, #10
10ca0     E8 52 B0 FD | 	call	#__system___basic_print_integer
10ca4     25 01 00 FF 
10ca8     3F 14 06 F6 | 	mov	arg02, ##@LR__4325
10cac     00 12 06 F6 | 	mov	arg01, #0
10cb0     00 16 06 F6 | 	mov	arg03, #0
10cb4     90 52 B0 FD | 	call	#__system___basic_print_string
10cb8     14 13 02 F6 | 	mov	arg01, local06
10cbc     94 6B B0 FD | 	call	#__system___strerror
10cc0     FD 14 02 F6 | 	mov	arg02, result1
10cc4     00 12 06 F6 | 	mov	arg01, #0
10cc8     00 16 06 F6 | 	mov	arg03, #0
10ccc     78 52 B0 FD | 	call	#__system___basic_print_string
10cd0     00 12 06 F6 | 	mov	arg01, #0
10cd4     0A 14 06 F6 | 	mov	arg02, #10
10cd8     00 16 06 F6 | 	mov	arg03, #0
10cdc     10 52 B0 FD | 	call	#__system___basic_print_char
10ce0     00 12 06 F6 | 	mov	arg01, #0
10ce4     20 9B B0 FD | 	call	#__system___getiolock_0334
10ce8     FD 00 68 FC | 	wrlong	#0, result1
10cec     09 12 06 F6 | 	mov	arg01, #9
10cf0     44 91 B0 FD | 	call	#__system__close
10cf4     FC 00 90 FD | 	jmp	#LR__1394
10cf8                 | LR__1391
10cf8     01 2A 06 F6 | 	mov	local07, #1
10cfc     00 2C 06 F6 | 	mov	local08, #0
10d00                 | '   do
10d00                 | LR__1392
10d00                 | '     get #9,pos,block(0),1024,r : pos+=r	
10d00     4E 00 00 FF 
10d04     70 E5 05 F1 | 	add	objptr, ##40304
10d08     F2 16 02 F6 | 	mov	arg03, objptr
10d0c     4E 00 00 FF 
10d10     70 E5 85 F1 | 	sub	objptr, ##40304
10d14     09 12 06 F6 | 	mov	arg01, #9
10d18     15 15 02 F6 | 	mov	arg02, local07
10d1c     0A 18 C6 F9 | 	decod	arg04, #10
10d20     01 1A 06 F6 | 	mov	arg05, #1
10d24     30 53 B0 FD | 	call	#__system___basic_get
10d28     FD 28 02 F6 | 	mov	local06, result1
10d2c     FD 2A 02 F1 | 	add	local07, result1
10d30     4E 00 00 FF 
10d34     70 E5 05 F1 | 	add	objptr, ##40304
10d38     F2 12 02 F6 | 	mov	arg01, objptr
10d3c     16 15 02 F6 | 	mov	arg02, local08
10d40     0A 16 C6 F9 | 	decod	arg03, #10
10d44     43 00 00 FF 
10d48     B0 E4 85 F1 | 	sub	objptr, ##34480
10d4c     B4 3A B0 FD | 	call	#_psram_spin2_write
10d50     0B 00 00 FF 
10d54     C0 E4 85 F1 | 	sub	objptr, ##5824
10d58     14 2D 02 F1 | 	add	local08, local06
10d5c     02 00 00 FF 
10d60     00 28 0E F2 | 	cmp	local06, ##1024 wz
10d64     E0 03 00 AF 
10d68     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
10d6c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1392
10d70     2D 00 00 FF 
10d74     C0 E5 05 F1 | 	add	objptr, ##23488
10d78     F2 12 02 FB | 	rdlong	arg01, objptr
10d7c     03 12 62 FD | 	cogstop	arg01
10d80     04 E4 05 F1 | 	add	objptr, #4
10d84     F2 12 02 FB | 	rdlong	arg01, objptr
10d88     03 12 62 FD | 	cogstop	arg01
10d8c     04 E4 05 F1 | 	add	objptr, #4
10d90     F2 12 02 FB | 	rdlong	arg01, objptr
10d94     03 12 62 FD | 	cogstop	arg01
10d98     22 00 00 FF 
10d9c     E0 E5 05 F1 | 	add	objptr, ##17888
10da0     F2 12 02 FB | 	rdlong	arg01, objptr
10da4     03 12 62 FD | 	cogstop	arg01
10da8     09 00 00 FF 
10dac     74 EB 05 F1 | 	add	ptr__dat__, ##4980
10db0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10db4     09 00 00 FF 
10db8     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
10dbc     22 00 00 FF 
10dc0     D8 E5 85 F1 | 	sub	objptr, ##17880
10dc4     1E 2C 06 F6 | 	mov	local08, #30
10dc8     28 E4 61 FD | 	setq	objptr
10dcc     0A 2D F2 FC | 	coginit	local08, arg02 wc
10dd0     01 2C 66 C6 |  if_b	neg	local08, #1
10dd4     24 00 00 FF 
10dd8     DC E4 05 F1 | 	add	objptr, ##18652
10ddc     F2 2C 62 FC | 	wrlong	local08, objptr
10de0     52 00 00 FF 
10de4     AC E4 85 F1 | 	sub	objptr, ##42156
10de8     00 12 06 F6 | 	mov	arg01, #0
10dec     01 12 62 FD | 	cogid	arg01
10df0     03 12 62 FD | 	cogstop	arg01
10df4                 | LR__1393
10df4                 | LR__1394
10df4     A7 F0 03 F6 | 	mov	ptra, fp
10df8     B2 00 A0 FD | 	call	#popregs_
10dfc                 | _do_brun_ret
10dfc     2D 00 64 FD | 	ret
10e00                 | 
10e00                 | ' 
10e00                 | ' 
10e00                 | ' sub do_mouse
10e00                 | _do_mouse
10e00     34 80 BF FD | 	call	#_pop
10e04     00 FA 4D F2 | 	cmps	result1, #0 wz
10e08                 | ' 
10e08                 | ' t1=pop()
10e08                 | ' 
10e08                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
10e08     14 00 90 5D |  if_ne	jmp	#LR__1400
10e0c     10 12 06 F6 | 	mov	arg01, #16
10e10     00 14 06 F6 | 	mov	arg02, #0
10e14     00 16 06 F6 | 	mov	arg03, #0
10e18     94 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10e1c     10 00 90 FD | 	jmp	#LR__1401
10e20                 | LR__1400
10e20     10 12 06 F6 | 	mov	arg01, #16
10e24     20 14 06 F6 | 	mov	arg02, #32
10e28     20 16 06 F6 | 	mov	arg03, #32
10e2c     80 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10e30                 | LR__1401
10e30                 | _do_mouse_ret
10e30     2D 00 64 FD | 	ret
10e34                 | 
10e34                 | ' 
10e34                 | ' sub do_cursor
10e34                 | _do_cursor
10e34     00 80 BF FD | 	call	#_pop
10e38     00 FA 4D F2 | 	cmps	result1, #0 wz
10e3c                 | ' 
10e3c                 | ' t1=pop()
10e3c                 | ' 
10e3c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
10e3c     14 00 90 5D |  if_ne	jmp	#LR__1410
10e40     11 12 06 F6 | 	mov	arg01, #17
10e44     00 14 06 F6 | 	mov	arg02, #0
10e48     00 16 06 F6 | 	mov	arg03, #0
10e4c     60 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10e50     10 00 90 FD | 	jmp	#LR__1411
10e54                 | LR__1410
10e54     11 12 06 F6 | 	mov	arg01, #17
10e58     08 14 06 F6 | 	mov	arg02, #8
10e5c     10 16 06 F6 | 	mov	arg03, #16
10e60     4C 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10e64                 | LR__1411
10e64                 | _do_cursor_ret
10e64     2D 00 64 FD | 	ret
10e68                 | 
10e68                 | ' 
10e68                 | ' 
10e68                 | ' sub do_click
10e68                 | _do_click
10e68     CC 7F BF FD | 	call	#_pop
10e6c     00 FA 4D F2 | 	cmps	result1, #0 wz
10e70                 | ' 
10e70                 | ' t1=pop()
10e70                 | ' 
10e70                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
10e70     50 00 00 AF 
10e74     A4 E5 05 A1 |  if_e	add	objptr, ##41380
10e78     F2 00 68 AC |  if_e	wrlong	#0, objptr
10e7c     50 00 00 FF 
10e80     A4 E5 C5 F3 | 	sumz	objptr, ##41380
10e84     F2 02 68 5C |  if_ne	wrlong	#1, objptr
10e88     50 00 00 5F 
10e8c     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
10e90                 | _do_click_ret
10e90     2D 00 64 FD | 	ret
10e94                 | 
10e94                 | ' 
10e94                 | ' 
10e94                 | ' sub do_beep
10e94                 | _do_beep
10e94     02 4A 05 F6 | 	mov	COUNT_, #2
10e98     A8 00 A0 FD | 	call	#pushregs_
10e9c     20 F0 07 F1 | 	add	ptra, #32
10ea0     94 7F BF FD | 	call	#_pop
10ea4     FD 1E 02 F6 | 	mov	local01, result1
10ea8     FE 1C 02 F6 | 	mov	arg06, result2
10eac     FF 20 02 F6 | 	mov	local02, result3
10eb0     0C 4E 05 F1 | 	add	fp, #12
10eb4     A7 1E 62 FC | 	wrlong	local01, fp
10eb8     04 4E 05 F1 | 	add	fp, #4
10ebc     A7 1C 62 FC | 	wrlong	arg06, fp
10ec0     04 4E 05 F1 | 	add	fp, #4
10ec4     A7 20 62 FC | 	wrlong	local02, fp
10ec8     14 4E 85 F1 | 	sub	fp, #20
10ecc     68 7F BF FD | 	call	#_pop
10ed0     A7 FA 61 FC | 	wrlong	result1, fp
10ed4     04 4E 05 F1 | 	add	fp, #4
10ed8     A7 FC 61 FC | 	wrlong	result2, fp
10edc     04 4E 05 F1 | 	add	fp, #4
10ee0     A7 FE 61 FC | 	wrlong	result3, fp
10ee4                 | ' 
10ee4                 | ' 
10ee4                 | ' 
10ee4                 | ' t2=pop()
10ee4                 | ' t1=pop()
10ee4                 | ' 
10ee4                 | ' 
10ee4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
10ee4     08 4E 85 F1 | 	sub	fp, #8
10ee8     1C FE 0D F2 | 	cmp	result3, #28 wz
10eec     08 4E 05 51 |  if_ne	add	fp, #8
10ef0     A7 20 02 5B |  if_ne	rdlong	local02, fp
10ef4     08 4E 85 51 |  if_ne	sub	fp, #8
10ef8     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
10efc     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f00     18 4E 05 A1 |  if_e	add	fp, #24
10f04     A7 1E 62 AC |  if_e	wrlong	local01, fp
10f08     18 4E 85 A1 |  if_e	sub	fp, #24
10f0c     14 00 90 AD |  if_e	jmp	#LR__1420
10f10     A7 12 02 F6 | 	mov	arg01, fp
10f14     88 D4 BF FD | 	call	#_converttoint
10f18     18 4E 05 F1 | 	add	fp, #24
10f1c     A7 FA 61 FC | 	wrlong	result1, fp
10f20     18 4E 85 F1 | 	sub	fp, #24
10f24                 | LR__1420
10f24     1C 4E 05 F1 | 	add	fp, #28
10f28     A7 FE 48 FC | 	wrbyte	#127, fp
10f2c     01 4E 05 F1 | 	add	fp, #1
10f30     A7 00 49 FC | 	wrbyte	#128, fp
10f34     01 4E 85 F1 | 	sub	fp, #1
10f38     A7 14 02 F6 | 	mov	arg02, fp
10f3c     04 4E 85 F1 | 	sub	fp, #4
10f40     A7 16 02 FB | 	rdlong	arg03, fp
10f44     18 4E 85 F1 | 	sub	fp, #24
10f48     01 16 66 F0 | 	shl	arg03, #1
10f4c     07 12 06 F6 | 	mov	arg01, #7
10f50     0E 18 C6 F9 | 	decod	arg04, #14
10f54     02 1A 06 F6 | 	mov	arg05, #2
10f58     00 1C 06 F6 | 	mov	arg06, #0
10f5c     0B 00 00 FF 
10f60     C0 E4 05 F1 | 	add	objptr, ##5824
10f64     54 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
10f68     0B 00 00 FF 
10f6c     C0 E4 85 F1 | 	sub	objptr, ##5824
10f70     0C 4E 05 F1 | 	add	fp, #12
10f74     A7 12 02 F6 | 	mov	arg01, fp
10f78     0C 4E 85 F1 | 	sub	fp, #12
10f7c     50 7F BF FD | 	call	#_push
10f80     10 F7 BF FD | 	call	#_do_waitms
10f84     07 12 06 F6 | 	mov	arg01, #7
10f88     0B 00 00 FF 
10f8c     C0 E4 05 F1 | 	add	objptr, ##5824
10f90     DC 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
10f94     0B 00 00 FF 
10f98     C0 E4 85 F1 | 	sub	objptr, ##5824
10f9c     A7 F0 03 F6 | 	mov	ptra, fp
10fa0     B2 00 A0 FD | 	call	#popregs_
10fa4                 | _do_beep_ret
10fa4     2D 00 64 FD | 	ret
10fa8                 | 
10fa8                 | ' 
10fa8                 | ' sub do_no_command
10fa8                 | _do_no_command
10fa8     17 12 06 F6 | 	mov	arg01, #23
10fac     B0 0D B0 FD | 	call	#_printerror
10fb0                 | _do_no_command_ret
10fb0     2D 00 64 FD | 	ret
10fb4                 | 
10fb4                 | ' 
10fb4                 | ' sub do_negative
10fb4                 | _do_negative
10fb4     02 4A 05 F6 | 	mov	COUNT_, #2
10fb8     A8 00 A0 FD | 	call	#pushregs_
10fbc     0C F0 07 F1 | 	add	ptra, #12
10fc0     74 7E BF FD | 	call	#_pop
10fc4     FF 1E 02 F6 | 	mov	local01, result3
10fc8     A7 FA 61 FC | 	wrlong	result1, fp
10fcc     04 4E 05 F1 | 	add	fp, #4
10fd0     A7 FC 61 FC | 	wrlong	result2, fp
10fd4     04 4E 05 F1 | 	add	fp, #4
10fd8     A7 1E 62 FC | 	wrlong	local01, fp
10fdc                 | ' t1=pop()
10fdc                 | ' if t1.result_type=result_int then 
10fdc     08 4E 85 F1 | 	sub	fp, #8
10fe0     1C 1E 0E F2 | 	cmp	local01, #28 wz
10fe4     A7 20 02 AB |  if_e	rdlong	local02, fp
10fe8     10 1F 62 A6 |  if_e	neg	local01, local02
10fec     A7 1E 62 AC |  if_e	wrlong	local01, fp
10ff0     5C 00 90 AD |  if_e	jmp	#LR__1432
10ff4     08 4E 05 F1 | 	add	fp, #8
10ff8     A7 1E 02 FB | 	rdlong	local01, fp
10ffc     08 4E 85 F1 | 	sub	fp, #8
11000     1D 1E 0E F2 | 	cmp	local01, #29 wz
11004     1C 00 90 5D |  if_ne	jmp	#LR__1430
11008     A7 20 02 FB | 	rdlong	local02, fp
1100c     10 1F 62 F6 | 	neg	local01, local02
11010     A7 1E 62 FC | 	wrlong	local01, fp
11014     08 4E 05 F1 | 	add	fp, #8
11018     A7 38 68 FC | 	wrlong	#28, fp
1101c     08 4E 85 F1 | 	sub	fp, #8
11020     2C 00 90 FD | 	jmp	#LR__1431
11024                 | LR__1430
11024     08 4E 05 F1 | 	add	fp, #8
11028     A7 1E 02 FB | 	rdlong	local01, fp
1102c     08 4E 85 F1 | 	sub	fp, #8
11030     1E 1E 0E F2 | 	cmp	local01, #30 wz
11034     A7 FA 01 AB |  if_e	rdlong	result1, fp
11038     1F FA E5 A4 |  if_e	bitnot	result1, #31
1103c     A7 FA 61 AC |  if_e	wrlong	result1, fp
11040     08 4E 05 51 |  if_ne	add	fp, #8
11044     A7 FE 69 5C |  if_ne	wrlong	#255, fp
11048     08 4E 85 51 |  if_ne	sub	fp, #8
1104c     A7 50 68 5C |  if_ne	wrlong	#40, fp
11050                 | LR__1431
11050                 | LR__1432
11050     A7 12 02 F6 | 	mov	arg01, fp
11054     78 7E BF FD | 	call	#_push
11058     A7 F0 03 F6 | 	mov	ptra, fp
1105c     B2 00 A0 FD | 	call	#popregs_
11060                 | _do_negative_ret
11060     2D 00 64 FD | 	ret
11064                 | 
11064                 | ' 
11064                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
11064                 | ' 
11064                 | ' ''----------------------------------------------------------------------------------------------------
11064                 | ' ''------------------ Initialization procedures -------------------------------------------------------
11064                 | ' ''----------------------------------------------------------------------------------------------------
11064                 | ' 
11064                 | ' ''--------------------------- Command function pointers
11064                 | ' 
11064                 | ' sub init_commands
11064                 | _init_commands
11064                 | ' 
11064                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
11064     00 00 06 F6 | 	mov	_var01, #0
11068     97 16 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
1106c                 | LR__1440
1106c     00 FB 01 F6 | 	mov	result1, _var01
11070     02 FA 65 F0 | 	shl	result1, #2
11074     3A 00 00 FF 
11078     24 E4 05 F1 | 	add	objptr, ##29732
1107c     F2 FA 01 F1 | 	add	result1, objptr
11080     3A 00 00 FF 
11084     24 E4 85 F1 | 	sub	objptr, ##29732
11088     FD E4 61 FC | 	wrlong	objptr, result1
1108c     01 00 06 F1 | 	add	_var01, #1
11090     00 01 56 F2 | 	cmps	_var01, #256 wc
11094     D4 FF 9F CD |  if_b	jmp	#LR__1440
11098                 | LR__1441
11098     F2 FA 01 F6 | 	mov	result1, objptr
1109c     14 FA 25 F4 | 	bith	result1, #20
110a0     3A 00 00 FF 
110a4     28 E4 05 F1 | 	add	objptr, ##29736
110a8     F2 FA 61 FC | 	wrlong	result1, objptr
110ac     3A 00 00 FF 
110b0     28 E4 85 F1 | 	sub	objptr, ##29736
110b4     F2 FA 01 F6 | 	mov	result1, objptr
110b8     15 FA 25 F4 | 	bith	result1, #21
110bc     3A 00 00 FF 
110c0     2C E4 05 F1 | 	add	objptr, ##29740
110c4     F2 FA 61 FC | 	wrlong	result1, objptr
110c8     3A 00 00 FF 
110cc     2C E4 85 F1 | 	sub	objptr, ##29740
110d0     F2 FA 01 F6 | 	mov	result1, objptr
110d4     34 FA 25 F4 | 	bith	result1, #52
110d8     3A 00 00 FF 
110dc     30 E4 05 F1 | 	add	objptr, ##29744
110e0     F2 FA 61 FC | 	wrlong	result1, objptr
110e4     3A 00 00 FF 
110e8     30 E4 85 F1 | 	sub	objptr, ##29744
110ec     F2 FA 01 F6 | 	mov	result1, objptr
110f0     16 FA 25 F4 | 	bith	result1, #22
110f4     3A 00 00 FF 
110f8     38 E4 05 F1 | 	add	objptr, ##29752
110fc     F2 FA 61 FC | 	wrlong	result1, objptr
11100     3A 00 00 FF 
11104     38 E4 85 F1 | 	sub	objptr, ##29752
11108     F2 FA 01 F6 | 	mov	result1, objptr
1110c     00 28 00 FF 
11110     00 FA 45 F5 | 	or	result1, ##5242880
11114     3A 00 00 FF 
11118     3C E4 05 F1 | 	add	objptr, ##29756
1111c     F2 FA 61 FC | 	wrlong	result1, objptr
11120     3A 00 00 FF 
11124     3C E4 85 F1 | 	sub	objptr, ##29756
11128     F2 FA 01 F6 | 	mov	result1, objptr
1112c     35 FA 25 F4 | 	bith	result1, #53
11130     3A 00 00 FF 
11134     40 E4 05 F1 | 	add	objptr, ##29760
11138     F2 FA 61 FC | 	wrlong	result1, objptr
1113c     3A 00 00 FF 
11140     40 E4 85 F1 | 	sub	objptr, ##29760
11144     F2 FA 01 F6 | 	mov	result1, objptr
11148     54 FA 25 F4 | 	bith	result1, #84
1114c     3A 00 00 FF 
11150     44 E4 05 F1 | 	add	objptr, ##29764
11154     F2 FA 61 FC | 	wrlong	result1, objptr
11158     3A 00 00 FF 
1115c     44 E4 85 F1 | 	sub	objptr, ##29764
11160     F2 FA 01 F6 | 	mov	result1, objptr
11164     17 FA 25 F4 | 	bith	result1, #23
11168     3A 00 00 FF 
1116c     48 E4 05 F1 | 	add	objptr, ##29768
11170     F2 FA 61 FC | 	wrlong	result1, objptr
11174     3A 00 00 FF 
11178     48 E4 85 F1 | 	sub	objptr, ##29768
1117c     F2 FA 01 F6 | 	mov	result1, objptr
11180     00 48 00 FF 
11184     00 FA 45 F5 | 	or	result1, ##9437184
11188     3A 00 00 FF 
1118c     4C E4 05 F1 | 	add	objptr, ##29772
11190     F2 FA 61 FC | 	wrlong	result1, objptr
11194     3A 00 00 FF 
11198     4C E4 85 F1 | 	sub	objptr, ##29772
1119c     F2 FA 01 F6 | 	mov	result1, objptr
111a0     00 50 00 FF 
111a4     00 FA 45 F5 | 	or	result1, ##10485760
111a8     3A 00 00 FF 
111ac     50 E4 05 F1 | 	add	objptr, ##29776
111b0     F2 FA 61 FC | 	wrlong	result1, objptr
111b4     3A 00 00 FF 
111b8     50 E4 85 F1 | 	sub	objptr, ##29776
111bc     F2 FA 01 F6 | 	mov	result1, objptr
111c0     00 58 00 FF 
111c4     00 FA 45 F5 | 	or	result1, ##11534336
111c8     3A 00 00 FF 
111cc     54 E4 05 F1 | 	add	objptr, ##29780
111d0     F2 FA 61 FC | 	wrlong	result1, objptr
111d4     3A 00 00 FF 
111d8     54 E4 85 F1 | 	sub	objptr, ##29780
111dc     F2 FA 01 F6 | 	mov	result1, objptr
111e0     36 FA 25 F4 | 	bith	result1, #54
111e4     3A 00 00 FF 
111e8     68 E4 05 F1 | 	add	objptr, ##29800
111ec     F2 FA 61 FC | 	wrlong	result1, objptr
111f0     3A 00 00 FF 
111f4     68 E4 85 F1 | 	sub	objptr, ##29800
111f8     F2 FA 01 F6 | 	mov	result1, objptr
111fc     00 68 00 FF 
11200     00 FA 45 F5 | 	or	result1, ##13631488
11204     3A 00 00 FF 
11208     98 E4 05 F1 | 	add	objptr, ##29848
1120c     F2 FA 61 FC | 	wrlong	result1, objptr
11210     3A 00 00 FF 
11214     98 E4 85 F1 | 	sub	objptr, ##29848
11218     F2 FA 01 F6 | 	mov	result1, objptr
1121c     00 68 00 FF 
11220     00 FA 45 F5 | 	or	result1, ##13631488
11224     3A 00 00 FF 
11228     94 E4 05 F1 | 	add	objptr, ##29844
1122c     F2 FA 61 FC | 	wrlong	result1, objptr
11230     3A 00 00 FF 
11234     94 E4 85 F1 | 	sub	objptr, ##29844
11238     F2 FA 01 F6 | 	mov	result1, objptr
1123c     00 68 00 FF 
11240     00 FA 45 F5 | 	or	result1, ##13631488
11244     3A 00 00 FF 
11248     9C E4 05 F1 | 	add	objptr, ##29852
1124c     F2 FA 61 FC | 	wrlong	result1, objptr
11250     3A 00 00 FF 
11254     9C E4 85 F1 | 	sub	objptr, ##29852
11258     F2 FA 01 F6 | 	mov	result1, objptr
1125c     00 68 00 FF 
11260     00 FA 45 F5 | 	or	result1, ##13631488
11264     3A 00 00 FF 
11268     A0 E4 05 F1 | 	add	objptr, ##29856
1126c     F2 FA 61 FC | 	wrlong	result1, objptr
11270     3A 00 00 FF 
11274     A0 E4 85 F1 | 	sub	objptr, ##29856
11278     F2 FA 01 F6 | 	mov	result1, objptr
1127c     55 FA 25 F4 | 	bith	result1, #85
11280     3A 00 00 FF 
11284     80 E4 05 F1 | 	add	objptr, ##29824
11288     F2 FA 61 FC | 	wrlong	result1, objptr
1128c     3A 00 00 FF 
11290     80 E4 85 F1 | 	sub	objptr, ##29824
11294     F2 FA 01 F6 | 	mov	result1, objptr
11298     00 68 00 FF 
1129c     00 FA 45 F5 | 	or	result1, ##13631488
112a0     3A 00 00 FF 
112a4     A4 E4 05 F1 | 	add	objptr, ##29860
112a8     F2 FA 61 FC | 	wrlong	result1, objptr
112ac     3A 00 00 FF 
112b0     A4 E4 85 F1 | 	sub	objptr, ##29860
112b4     F2 FA 01 F6 | 	mov	result1, objptr
112b8     00 68 00 FF 
112bc     00 FA 45 F5 | 	or	result1, ##13631488
112c0     3A 00 00 FF 
112c4     A8 E4 05 F1 | 	add	objptr, ##29864
112c8     F2 FA 61 FC | 	wrlong	result1, objptr
112cc     3A 00 00 FF 
112d0     A8 E4 85 F1 | 	sub	objptr, ##29864
112d4     F2 FA 01 F6 | 	mov	result1, objptr
112d8     00 68 00 FF 
112dc     00 FA 45 F5 | 	or	result1, ##13631488
112e0     3A 00 00 FF 
112e4     AC E4 05 F1 | 	add	objptr, ##29868
112e8     F2 FA 61 FC | 	wrlong	result1, objptr
112ec     3A 00 00 FF 
112f0     AC E4 85 F1 | 	sub	objptr, ##29868
112f4     F2 FA 01 F6 | 	mov	result1, objptr
112f8     74 FA 25 F4 | 	bith	result1, #116
112fc     3A 00 00 FF 
11300     24 E5 05 F1 | 	add	objptr, ##29988
11304     F2 FA 61 FC | 	wrlong	result1, objptr
11308     3A 00 00 FF 
1130c     24 E5 85 F1 | 	sub	objptr, ##29988
11310     F2 FA 01 F6 | 	mov	result1, objptr
11314     18 FA 25 F4 | 	bith	result1, #24
11318     3A 00 00 FF 
1131c     28 E5 05 F1 | 	add	objptr, ##29992
11320     F2 FA 61 FC | 	wrlong	result1, objptr
11324     3A 00 00 FF 
11328     28 E5 85 F1 | 	sub	objptr, ##29992
1132c     F2 FA 01 F6 | 	mov	result1, objptr
11330     00 88 00 FF 
11334     00 FA 45 F5 | 	or	result1, ##17825792
11338     3A 00 00 FF 
1133c     2C E5 05 F1 | 	add	objptr, ##29996
11340     F2 FA 61 FC | 	wrlong	result1, objptr
11344     3A 00 00 FF 
11348     2C E5 85 F1 | 	sub	objptr, ##29996
1134c     F2 FA 01 F6 | 	mov	result1, objptr
11350     00 90 00 FF 
11354     00 FA 45 F5 | 	or	result1, ##18874368
11358     3A 00 00 FF 
1135c     30 E5 05 F1 | 	add	objptr, ##30000
11360     F2 FA 61 FC | 	wrlong	result1, objptr
11364     3A 00 00 FF 
11368     30 E5 85 F1 | 	sub	objptr, ##30000
1136c     F2 FA 01 F6 | 	mov	result1, objptr
11370     00 98 00 FF 
11374     00 FA 45 F5 | 	or	result1, ##19922944
11378     3A 00 00 FF 
1137c     34 E5 05 F1 | 	add	objptr, ##30004
11380     F2 FA 61 FC | 	wrlong	result1, objptr
11384     3A 00 00 FF 
11388     34 E5 85 F1 | 	sub	objptr, ##30004
1138c     F2 FA 01 F6 | 	mov	result1, objptr
11390     00 A0 00 FF 
11394     00 FA 45 F5 | 	or	result1, ##20971520
11398     3A 00 00 FF 
1139c     38 E5 05 F1 | 	add	objptr, ##30008
113a0     F2 FA 61 FC | 	wrlong	result1, objptr
113a4     3A 00 00 FF 
113a8     38 E5 85 F1 | 	sub	objptr, ##30008
113ac     F2 FA 01 F6 | 	mov	result1, objptr
113b0     00 A8 00 FF 
113b4     00 FA 45 F5 | 	or	result1, ##22020096
113b8     3A 00 00 FF 
113bc     3C E5 05 F1 | 	add	objptr, ##30012
113c0     F2 FA 61 FC | 	wrlong	result1, objptr
113c4     3A 00 00 FF 
113c8     3C E5 85 F1 | 	sub	objptr, ##30012
113cc     F2 FA 01 F6 | 	mov	result1, objptr
113d0     00 B0 00 FF 
113d4     00 FA 45 F5 | 	or	result1, ##23068672
113d8     3A 00 00 FF 
113dc     40 E5 05 F1 | 	add	objptr, ##30016
113e0     F2 FA 61 FC | 	wrlong	result1, objptr
113e4     3A 00 00 FF 
113e8     40 E5 85 F1 | 	sub	objptr, ##30016
113ec     F2 FA 01 F6 | 	mov	result1, objptr
113f0     00 B8 00 FF 
113f4     00 FA 45 F5 | 	or	result1, ##24117248
113f8     3A 00 00 FF 
113fc     44 E5 05 F1 | 	add	objptr, ##30020
11400     F2 FA 61 FC | 	wrlong	result1, objptr
11404     3A 00 00 FF 
11408     44 E5 85 F1 | 	sub	objptr, ##30020
1140c     F2 FA 01 F6 | 	mov	result1, objptr
11410     37 FA 25 F4 | 	bith	result1, #55
11414     3A 00 00 FF 
11418     48 E5 05 F1 | 	add	objptr, ##30024
1141c     F2 FA 61 FC | 	wrlong	result1, objptr
11420     3A 00 00 FF 
11424     48 E5 85 F1 | 	sub	objptr, ##30024
11428     F2 FA 01 F6 | 	mov	result1, objptr
1142c     00 C8 00 FF 
11430     00 FA 45 F5 | 	or	result1, ##26214400
11434     3A 00 00 FF 
11438     4C E5 05 F1 | 	add	objptr, ##30028
1143c     F2 FA 61 FC | 	wrlong	result1, objptr
11440     3A 00 00 FF 
11444     4C E5 85 F1 | 	sub	objptr, ##30028
11448     F2 FA 01 F6 | 	mov	result1, objptr
1144c     00 D0 00 FF 
11450     00 FA 45 F5 | 	or	result1, ##27262976
11454     3A 00 00 FF 
11458     50 E5 05 F1 | 	add	objptr, ##30032
1145c     F2 FA 61 FC | 	wrlong	result1, objptr
11460     3A 00 00 FF 
11464     50 E5 85 F1 | 	sub	objptr, ##30032
11468     F2 FA 01 F6 | 	mov	result1, objptr
1146c     00 D8 00 FF 
11470     00 FA 45 F5 | 	or	result1, ##28311552
11474     3A 00 00 FF 
11478     54 E5 05 F1 | 	add	objptr, ##30036
1147c     F2 FA 61 FC | 	wrlong	result1, objptr
11480     3A 00 00 FF 
11484     54 E5 85 F1 | 	sub	objptr, ##30036
11488     F2 FA 01 F6 | 	mov	result1, objptr
1148c     56 FA 25 F4 | 	bith	result1, #86
11490     3A 00 00 FF 
11494     58 E5 05 F1 | 	add	objptr, ##30040
11498     F2 FA 61 FC | 	wrlong	result1, objptr
1149c     3A 00 00 FF 
114a0     58 E5 85 F1 | 	sub	objptr, ##30040
114a4     F2 FA 01 F6 | 	mov	result1, objptr
114a8     00 E8 00 FF 
114ac     00 FA 45 F5 | 	or	result1, ##30408704
114b0     3C 00 00 FF 
114b4     20 E4 05 F1 | 	add	objptr, ##30752
114b8     F2 FA 61 FC | 	wrlong	result1, objptr
114bc     3C 00 00 FF 
114c0     20 E4 85 F1 | 	sub	objptr, ##30752
114c4     F2 FA 01 F6 | 	mov	result1, objptr
114c8     75 FA 25 F4 | 	bith	result1, #117
114cc     3A 00 00 FF 
114d0     5C E5 05 F1 | 	add	objptr, ##30044
114d4     F2 FA 61 FC | 	wrlong	result1, objptr
114d8     3A 00 00 FF 
114dc     5C E5 85 F1 | 	sub	objptr, ##30044
114e0     F2 FA 01 F6 | 	mov	result1, objptr
114e4     94 FA 25 F4 | 	bith	result1, #148
114e8     3A 00 00 FF 
114ec     70 E5 05 F1 | 	add	objptr, ##30064
114f0     F2 FA 61 FC | 	wrlong	result1, objptr
114f4     3A 00 00 FF 
114f8     70 E5 85 F1 | 	sub	objptr, ##30064
114fc     F2 FA 01 F6 | 	mov	result1, objptr
11500     19 FA 25 F4 | 	bith	result1, #25
11504     3A 00 00 FF 
11508     60 E5 05 F1 | 	add	objptr, ##30048
1150c     F2 FA 61 FC | 	wrlong	result1, objptr
11510     3A 00 00 FF 
11514     60 E5 85 F1 | 	sub	objptr, ##30048
11518     F2 FA 01 F6 | 	mov	result1, objptr
1151c     00 08 01 FF 
11520     00 FA 45 F5 | 	or	result1, ##34603008
11524     3A 00 00 FF 
11528     7C E4 05 F1 | 	add	objptr, ##29820
1152c     F2 FA 61 FC | 	wrlong	result1, objptr
11530     3A 00 00 FF 
11534     7C E4 85 F1 | 	sub	objptr, ##29820
11538     F2 FA 01 F6 | 	mov	result1, objptr
1153c     00 10 01 FF 
11540     00 FA 45 F5 | 	or	result1, ##35651584
11544     3A 00 00 FF 
11548     64 E5 05 F1 | 	add	objptr, ##30052
1154c     F2 FA 61 FC | 	wrlong	result1, objptr
11550     3A 00 00 FF 
11554     64 E5 85 F1 | 	sub	objptr, ##30052
11558     F2 FA 01 F6 | 	mov	result1, objptr
1155c     00 18 01 FF 
11560     00 FA 45 F5 | 	or	result1, ##36700160
11564     3A 00 00 FF 
11568     68 E5 05 F1 | 	add	objptr, ##30056
1156c     F2 FA 61 FC | 	wrlong	result1, objptr
11570     3A 00 00 FF 
11574     68 E5 85 F1 | 	sub	objptr, ##30056
11578     F2 FA 01 F6 | 	mov	result1, objptr
1157c     00 20 01 FF 
11580     00 FA 45 F5 | 	or	result1, ##37748736
11584     3A 00 00 FF 
11588     6C E5 05 F1 | 	add	objptr, ##30060
1158c     F2 FA 61 FC | 	wrlong	result1, objptr
11590     3A 00 00 FF 
11594     6C E5 85 F1 | 	sub	objptr, ##30060
11598     F2 FA 01 F6 | 	mov	result1, objptr
1159c     00 28 01 FF 
115a0     00 FA 45 F5 | 	or	result1, ##38797312
115a4     3A 00 00 FF 
115a8     78 E5 05 F1 | 	add	objptr, ##30072
115ac     F2 FA 61 FC | 	wrlong	result1, objptr
115b0     3A 00 00 FF 
115b4     78 E5 85 F1 | 	sub	objptr, ##30072
115b8     F2 FA 01 F6 | 	mov	result1, objptr
115bc     00 30 01 FF 
115c0     00 FA 45 F5 | 	or	result1, ##39845888
115c4     3A 00 00 FF 
115c8     7C E5 05 F1 | 	add	objptr, ##30076
115cc     F2 FA 61 FC | 	wrlong	result1, objptr
115d0     3A 00 00 FF 
115d4     7C E5 85 F1 | 	sub	objptr, ##30076
115d8     F2 FA 01 F6 | 	mov	result1, objptr
115dc     00 38 01 FF 
115e0     00 FA 45 F5 | 	or	result1, ##40894464
115e4     3A 00 00 FF 
115e8     80 E5 05 F1 | 	add	objptr, ##30080
115ec     F2 FA 61 FC | 	wrlong	result1, objptr
115f0     3A 00 00 FF 
115f4     80 E5 85 F1 | 	sub	objptr, ##30080
115f8     F2 FA 01 F6 | 	mov	result1, objptr
115fc     00 40 01 FF 
11600     00 FA 45 F5 | 	or	result1, ##41943040
11604     3A 00 00 FF 
11608     84 E5 05 F1 | 	add	objptr, ##30084
1160c     F2 FA 61 FC | 	wrlong	result1, objptr
11610     3A 00 00 FF 
11614     84 E5 85 F1 | 	sub	objptr, ##30084
11618     F2 FA 01 F6 | 	mov	result1, objptr
1161c     00 48 01 FF 
11620     00 FA 45 F5 | 	or	result1, ##42991616
11624     3A 00 00 FF 
11628     8C E5 05 F1 | 	add	objptr, ##30092
1162c     F2 FA 61 FC | 	wrlong	result1, objptr
11630     3A 00 00 FF 
11634     8C E5 85 F1 | 	sub	objptr, ##30092
11638     F2 FA 01 F6 | 	mov	result1, objptr
1163c     00 50 01 FF 
11640     00 FA 45 F5 | 	or	result1, ##44040192
11644     3A 00 00 FF 
11648     90 E5 05 F1 | 	add	objptr, ##30096
1164c     F2 FA 61 FC | 	wrlong	result1, objptr
11650     3A 00 00 FF 
11654     90 E5 85 F1 | 	sub	objptr, ##30096
11658     F2 FA 01 F6 | 	mov	result1, objptr
1165c     00 58 01 FF 
11660     00 FA 45 F5 | 	or	result1, ##45088768
11664     3A 00 00 FF 
11668     90 E4 05 F1 | 	add	objptr, ##29840
1166c     F2 FA 61 FC | 	wrlong	result1, objptr
11670     3A 00 00 FF 
11674     90 E4 85 F1 | 	sub	objptr, ##29840
11678     F2 FA 01 F6 | 	mov	result1, objptr
1167c     00 60 01 FF 
11680     00 FA 45 F5 | 	or	result1, ##46137344
11684     3A 00 00 FF 
11688     C0 E4 05 F1 | 	add	objptr, ##29888
1168c     F2 FA 61 FC | 	wrlong	result1, objptr
11690     3A 00 00 FF 
11694     C0 E4 85 F1 | 	sub	objptr, ##29888
11698     F2 FA 01 F6 | 	mov	result1, objptr
1169c     00 68 01 FF 
116a0     00 FA 45 F5 | 	or	result1, ##47185920
116a4     3A 00 00 FF 
116a8     BC E4 05 F1 | 	add	objptr, ##29884
116ac     F2 FA 61 FC | 	wrlong	result1, objptr
116b0     3A 00 00 FF 
116b4     BC E4 85 F1 | 	sub	objptr, ##29884
116b8     F2 FA 01 F6 | 	mov	result1, objptr
116bc     00 70 01 FF 
116c0     00 FA 45 F5 | 	or	result1, ##48234496
116c4     3A 00 00 FF 
116c8     60 E4 05 F1 | 	add	objptr, ##29792
116cc     F2 FA 61 FC | 	wrlong	result1, objptr
116d0     3A 00 00 FF 
116d4     60 E4 85 F1 | 	sub	objptr, ##29792
116d8     F2 FA 01 F6 | 	mov	result1, objptr
116dc     00 78 01 FF 
116e0     00 FA 45 F5 | 	or	result1, ##49283072
116e4     3A 00 00 FF 
116e8     64 E4 05 F1 | 	add	objptr, ##29796
116ec     F2 FA 61 FC | 	wrlong	result1, objptr
116f0     3A 00 00 FF 
116f4     64 E4 85 F1 | 	sub	objptr, ##29796
116f8     F2 FA 01 F6 | 	mov	result1, objptr
116fc     38 FA 25 F4 | 	bith	result1, #56
11700     3A 00 00 FF 
11704     CC E4 05 F1 | 	add	objptr, ##29900
11708     F2 FA 61 FC | 	wrlong	result1, objptr
1170c     3A 00 00 FF 
11710     CC E4 85 F1 | 	sub	objptr, ##29900
11714     F2 FA 01 F6 | 	mov	result1, objptr
11718     00 88 01 FF 
1171c     00 FA 45 F5 | 	or	result1, ##51380224
11720     3A 00 00 FF 
11724     74 E5 05 F1 | 	add	objptr, ##30068
11728     F2 FA 61 FC | 	wrlong	result1, objptr
1172c     3A 00 00 FF 
11730     74 E5 85 F1 | 	sub	objptr, ##30068
11734     F2 FA 01 F6 | 	mov	result1, objptr
11738     00 90 01 FF 
1173c     00 FA 45 F5 | 	or	result1, ##52428800
11740     3A 00 00 FF 
11744     88 E5 05 F1 | 	add	objptr, ##30088
11748     F2 FA 61 FC | 	wrlong	result1, objptr
1174c     3A 00 00 FF 
11750     88 E5 85 F1 | 	sub	objptr, ##30088
11754     F2 FA 01 F6 | 	mov	result1, objptr
11758     00 98 01 FF 
1175c     00 FA 45 F5 | 	or	result1, ##53477376
11760     3A 00 00 FF 
11764     94 E5 05 F1 | 	add	objptr, ##30100
11768     F2 FA 61 FC | 	wrlong	result1, objptr
1176c     3A 00 00 FF 
11770     94 E5 85 F1 | 	sub	objptr, ##30100
11774     F2 FA 01 F6 | 	mov	result1, objptr
11778     00 A0 01 FF 
1177c     00 FA 45 F5 | 	or	result1, ##54525952
11780     3A 00 00 FF 
11784     98 E5 05 F1 | 	add	objptr, ##30104
11788     F2 FA 61 FC | 	wrlong	result1, objptr
1178c     3A 00 00 FF 
11790     98 E5 85 F1 | 	sub	objptr, ##30104
11794     F2 FA 01 F6 | 	mov	result1, objptr
11798     00 A8 01 FF 
1179c     00 FA 45 F5 | 	or	result1, ##55574528
117a0     3A 00 00 FF 
117a4     9C E5 05 F1 | 	add	objptr, ##30108
117a8     F2 FA 61 FC | 	wrlong	result1, objptr
117ac     3A 00 00 FF 
117b0     9C E5 85 F1 | 	sub	objptr, ##30108
117b4     F2 FA 01 F6 | 	mov	result1, objptr
117b8     00 B0 01 FF 
117bc     00 FA 45 F5 | 	or	result1, ##56623104
117c0     3A 00 00 FF 
117c4     A0 E5 05 F1 | 	add	objptr, ##30112
117c8     F2 FA 61 FC | 	wrlong	result1, objptr
117cc     3A 00 00 FF 
117d0     A0 E5 85 F1 | 	sub	objptr, ##30112
117d4     F2 FA 01 F6 | 	mov	result1, objptr
117d8     00 B8 01 FF 
117dc     00 FA 45 F5 | 	or	result1, ##57671680
117e0     3A 00 00 FF 
117e4     A4 E5 05 F1 | 	add	objptr, ##30116
117e8     F2 FA 61 FC | 	wrlong	result1, objptr
117ec     3A 00 00 FF 
117f0     A4 E5 85 F1 | 	sub	objptr, ##30116
117f4     F2 FA 01 F6 | 	mov	result1, objptr
117f8     57 FA 25 F4 | 	bith	result1, #87
117fc     3A 00 00 FF 
11800     A8 E5 05 F1 | 	add	objptr, ##30120
11804     F2 FA 61 FC | 	wrlong	result1, objptr
11808     3A 00 00 FF 
1180c     A8 E5 85 F1 | 	sub	objptr, ##30120
11810     F2 FA 01 F6 | 	mov	result1, objptr
11814     94 FA 25 F4 | 	bith	result1, #148
11818     3A 00 00 FF 
1181c     70 E5 05 F1 | 	add	objptr, ##30064
11820     F2 FA 61 FC | 	wrlong	result1, objptr
11824     3A 00 00 FF 
11828     70 E5 85 F1 | 	sub	objptr, ##30064
1182c     F2 FA 01 F6 | 	mov	result1, objptr
11830     00 C8 01 FF 
11834     00 FA 45 F5 | 	or	result1, ##59768832
11838     3A 00 00 FF 
1183c     B0 E5 05 F1 | 	add	objptr, ##30128
11840     F2 FA 61 FC | 	wrlong	result1, objptr
11844     3A 00 00 FF 
11848     B0 E5 85 F1 | 	sub	objptr, ##30128
1184c     F2 FA 01 F6 | 	mov	result1, objptr
11850     00 D0 01 FF 
11854     00 FA 45 F5 | 	or	result1, ##60817408
11858     3A 00 00 FF 
1185c     AC E5 05 F1 | 	add	objptr, ##30124
11860     F2 FA 61 FC | 	wrlong	result1, objptr
11864     3A 00 00 FF 
11868     AC E5 85 F1 | 	sub	objptr, ##30124
1186c     F2 FA 01 F6 | 	mov	result1, objptr
11870     00 D8 01 FF 
11874     00 FA 45 F5 | 	or	result1, ##61865984
11878     3A 00 00 FF 
1187c     C4 E5 05 F1 | 	add	objptr, ##30148
11880     F2 FA 61 FC | 	wrlong	result1, objptr
11884     3A 00 00 FF 
11888     C4 E5 85 F1 | 	sub	objptr, ##30148
1188c     F2 FA 01 F6 | 	mov	result1, objptr
11890     76 FA 25 F4 | 	bith	result1, #118
11894     3A 00 00 FF 
11898     C8 E5 05 F1 | 	add	objptr, ##30152
1189c     F2 FA 61 FC | 	wrlong	result1, objptr
118a0     3A 00 00 FF 
118a4     C8 E5 85 F1 | 	sub	objptr, ##30152
118a8     F2 FA 01 F6 | 	mov	result1, objptr
118ac     00 E8 01 FF 
118b0     00 FA 45 F5 | 	or	result1, ##63963136
118b4     3A 00 00 FF 
118b8     B4 E5 05 F1 | 	add	objptr, ##30132
118bc     F2 FA 61 FC | 	wrlong	result1, objptr
118c0     3A 00 00 FF 
118c4     B4 E5 85 F1 | 	sub	objptr, ##30132
118c8     F2 FA 01 F6 | 	mov	result1, objptr
118cc     95 FA 25 F4 | 	bith	result1, #149
118d0     3A 00 00 FF 
118d4     B8 E5 05 F1 | 	add	objptr, ##30136
118d8     F2 FA 61 FC | 	wrlong	result1, objptr
118dc     3A 00 00 FF 
118e0     B8 E5 85 F1 | 	sub	objptr, ##30136
118e4     F2 FA 01 F6 | 	mov	result1, objptr
118e8     B4 FA 25 F4 | 	bith	result1, #180
118ec     3A 00 00 FF 
118f0     BC E5 05 F1 | 	add	objptr, ##30140
118f4     F2 FA 61 FC | 	wrlong	result1, objptr
118f8     3A 00 00 FF 
118fc     BC E5 85 F1 | 	sub	objptr, ##30140
11900     F2 FA 01 F6 | 	mov	result1, objptr
11904     1A FA 25 F4 | 	bith	result1, #26
11908     3A 00 00 FF 
1190c     C0 E5 05 F1 | 	add	objptr, ##30144
11910     F2 FA 61 FC | 	wrlong	result1, objptr
11914     3A 00 00 FF 
11918     C0 E5 85 F1 | 	sub	objptr, ##30144
1191c     F2 FA 01 F6 | 	mov	result1, objptr
11920     00 08 02 FF 
11924     00 FA 45 F5 | 	or	result1, ##68157440
11928     3A 00 00 FF 
1192c     D0 E5 05 F1 | 	add	objptr, ##30160
11930     F2 FA 61 FC | 	wrlong	result1, objptr
11934     3A 00 00 FF 
11938     D0 E5 85 F1 | 	sub	objptr, ##30160
1193c     F2 FA 01 F6 | 	mov	result1, objptr
11940     00 10 02 FF 
11944     00 FA 45 F5 | 	or	result1, ##69206016
11948     3A 00 00 FF 
1194c     CC E5 05 F1 | 	add	objptr, ##30156
11950     F2 FA 61 FC | 	wrlong	result1, objptr
11954     3A 00 00 FF 
11958     CC E5 85 F1 | 	sub	objptr, ##30156
1195c     F2 FA 01 F6 | 	mov	result1, objptr
11960     00 18 02 FF 
11964     00 FA 45 F5 | 	or	result1, ##70254592
11968     3A 00 00 FF 
1196c     DC E5 05 F1 | 	add	objptr, ##30172
11970     F2 FA 61 FC | 	wrlong	result1, objptr
11974     3A 00 00 FF 
11978     DC E5 85 F1 | 	sub	objptr, ##30172
1197c     F2 FA 01 F6 | 	mov	result1, objptr
11980     00 20 02 FF 
11984     00 FA 45 F5 | 	or	result1, ##71303168
11988     3A 00 00 FF 
1198c     D8 E5 05 F1 | 	add	objptr, ##30168
11990     F2 FA 61 FC | 	wrlong	result1, objptr
11994     3A 00 00 FF 
11998     D8 E5 85 F1 | 	sub	objptr, ##30168
1199c     F2 FA 01 F6 | 	mov	result1, objptr
119a0     00 28 02 FF 
119a4     00 FA 45 F5 | 	or	result1, ##72351744
119a8     3A 00 00 FF 
119ac     D4 E5 05 F1 | 	add	objptr, ##30164
119b0     F2 FA 61 FC | 	wrlong	result1, objptr
119b4     3A 00 00 FF 
119b8     D4 E5 85 F1 | 	sub	objptr, ##30164
119bc     F2 FA 01 F6 | 	mov	result1, objptr
119c0     00 30 02 FF 
119c4     00 FA 45 F5 | 	or	result1, ##73400320
119c8     3A 00 00 FF 
119cc     E0 E5 05 F1 | 	add	objptr, ##30176
119d0     F2 FA 61 FC | 	wrlong	result1, objptr
119d4     3A 00 00 FF 
119d8     E0 E5 85 F1 | 	sub	objptr, ##30176
119dc     F2 FA 01 F6 | 	mov	result1, objptr
119e0     00 38 02 FF 
119e4     00 FA 45 F5 | 	or	result1, ##74448896
119e8     3A 00 00 FF 
119ec     E4 E5 05 F1 | 	add	objptr, ##30180
119f0     F2 FA 61 FC | 	wrlong	result1, objptr
119f4     3A 00 00 FF 
119f8     E4 E5 85 F1 | 	sub	objptr, ##30180
119fc     F2 FA 01 F6 | 	mov	result1, objptr
11a00     00 40 02 FF 
11a04     00 FA 45 F5 | 	or	result1, ##75497472
11a08     3A 00 00 FF 
11a0c     78 E4 05 F1 | 	add	objptr, ##29816
11a10     F2 FA 61 FC | 	wrlong	result1, objptr
11a14     3A 00 00 FF 
11a18     78 E4 85 F1 | 	sub	objptr, ##29816
11a1c     F2 FA 01 F6 | 	mov	result1, objptr
11a20     00 48 02 FF 
11a24     00 FA 45 F5 | 	or	result1, ##76546048
11a28     3A 00 00 FF 
11a2c     E8 E5 05 F1 | 	add	objptr, ##30184
11a30     F2 FA 61 FC | 	wrlong	result1, objptr
11a34     3A 00 00 FF 
11a38     E8 E5 85 F1 | 	sub	objptr, ##30184
11a3c                 | _init_commands_ret
11a3c     2D 00 64 FD | 	ret
11a40                 | 
11a40                 | ' 
11a40                 | ' ''--------------------------------Error strings -------------------------------------
11a40                 | ' 
11a40                 | ' sub init_error_strings
11a40                 | _init_error_strings
11a40     25 01 00 FF 
11a44     42 00 06 F6 | 	mov	_var01, ##@LR__4326
11a48     3C 00 00 FF 
11a4c     40 E4 05 F1 | 	add	objptr, ##30784
11a50     F2 00 62 FC | 	wrlong	_var01, objptr
11a54     25 01 00 FF 
11a58     43 00 06 F6 | 	mov	_var01, ##@LR__4327
11a5c     04 E4 05 F1 | 	add	objptr, #4
11a60     F2 00 62 FC | 	wrlong	_var01, objptr
11a64     25 01 00 FF 
11a68     68 00 06 F6 | 	mov	_var01, ##@LR__4328
11a6c     04 E4 05 F1 | 	add	objptr, #4
11a70     F2 00 62 FC | 	wrlong	_var01, objptr
11a74     25 01 00 FF 
11a78     89 00 06 F6 | 	mov	_var01, ##@LR__4329
11a7c     04 E4 05 F1 | 	add	objptr, #4
11a80     F2 00 62 FC | 	wrlong	_var01, objptr
11a84     25 01 00 FF 
11a88     A3 00 06 F6 | 	mov	_var01, ##@LR__4330
11a8c     04 E4 05 F1 | 	add	objptr, #4
11a90     F2 00 62 FC | 	wrlong	_var01, objptr
11a94     25 01 00 FF 
11a98     BF 00 06 F6 | 	mov	_var01, ##@LR__4331
11a9c     04 E4 05 F1 | 	add	objptr, #4
11aa0     F2 00 62 FC | 	wrlong	_var01, objptr
11aa4     25 01 00 FF 
11aa8     E1 00 06 F6 | 	mov	_var01, ##@LR__4332
11aac     04 E4 05 F1 | 	add	objptr, #4
11ab0     F2 00 62 FC | 	wrlong	_var01, objptr
11ab4     25 01 00 FF 
11ab8     0F 01 06 F6 | 	mov	_var01, ##@LR__4333
11abc     04 E4 05 F1 | 	add	objptr, #4
11ac0     F2 00 62 FC | 	wrlong	_var01, objptr
11ac4     25 01 00 FF 
11ac8     3A 01 06 F6 | 	mov	_var01, ##@LR__4334
11acc     04 E4 05 F1 | 	add	objptr, #4
11ad0     F2 00 62 FC | 	wrlong	_var01, objptr
11ad4     25 01 00 FF 
11ad8     53 01 06 F6 | 	mov	_var01, ##@LR__4335
11adc     04 E4 05 F1 | 	add	objptr, #4
11ae0     F2 00 62 FC | 	wrlong	_var01, objptr
11ae4     25 01 00 FF 
11ae8     74 01 06 F6 | 	mov	_var01, ##@LR__4336
11aec     04 E4 05 F1 | 	add	objptr, #4
11af0     F2 00 62 FC | 	wrlong	_var01, objptr
11af4     25 01 00 FF 
11af8     8B 01 06 F6 | 	mov	_var01, ##@LR__4337
11afc     04 E4 05 F1 | 	add	objptr, #4
11b00     F2 00 62 FC | 	wrlong	_var01, objptr
11b04     25 01 00 FF 
11b08     A9 01 06 F6 | 	mov	_var01, ##@LR__4338
11b0c     04 E4 05 F1 | 	add	objptr, #4
11b10     F2 00 62 FC | 	wrlong	_var01, objptr
11b14     25 01 00 FF 
11b18     CD 01 06 F6 | 	mov	_var01, ##@LR__4339
11b1c     04 E4 05 F1 | 	add	objptr, #4
11b20     F2 00 62 FC | 	wrlong	_var01, objptr
11b24     25 01 00 FF 
11b28     F4 01 06 F6 | 	mov	_var01, ##@LR__4340
11b2c     04 E4 05 F1 | 	add	objptr, #4
11b30     F2 00 62 FC | 	wrlong	_var01, objptr
11b34     26 01 00 FF 
11b38     10 00 06 F6 | 	mov	_var01, ##@LR__4341
11b3c     04 E4 05 F1 | 	add	objptr, #4
11b40     F2 00 62 FC | 	wrlong	_var01, objptr
11b44     26 01 00 FF 
11b48     21 00 06 F6 | 	mov	_var01, ##@LR__4342
11b4c     04 E4 05 F1 | 	add	objptr, #4
11b50     F2 00 62 FC | 	wrlong	_var01, objptr
11b54     26 01 00 FF 
11b58     31 00 06 F6 | 	mov	_var01, ##@LR__4343
11b5c     04 E4 05 F1 | 	add	objptr, #4
11b60     F2 00 62 FC | 	wrlong	_var01, objptr
11b64     26 01 00 FF 
11b68     4C 00 06 F6 | 	mov	_var01, ##@LR__4344
11b6c     04 E4 05 F1 | 	add	objptr, #4
11b70     F2 00 62 FC | 	wrlong	_var01, objptr
11b74     26 01 00 FF 
11b78     5E 00 06 F6 | 	mov	_var01, ##@LR__4345
11b7c     04 E4 05 F1 | 	add	objptr, #4
11b80     F2 00 62 FC | 	wrlong	_var01, objptr
11b84     26 01 00 FF 
11b88     76 00 06 F6 | 	mov	_var01, ##@LR__4346
11b8c     04 E4 05 F1 | 	add	objptr, #4
11b90     F2 00 62 FC | 	wrlong	_var01, objptr
11b94     26 01 00 FF 
11b98     8A 00 06 F6 | 	mov	_var01, ##@LR__4347
11b9c     04 E4 05 F1 | 	add	objptr, #4
11ba0     F2 00 62 FC | 	wrlong	_var01, objptr
11ba4     26 01 00 FF 
11ba8     9A 00 06 F6 | 	mov	_var01, ##@LR__4348
11bac     04 E4 05 F1 | 	add	objptr, #4
11bb0     F2 00 62 FC | 	wrlong	_var01, objptr
11bb4     26 01 00 FF 
11bb8     B7 00 06 F6 | 	mov	_var01, ##@LR__4349
11bbc     04 E4 05 F1 | 	add	objptr, #4
11bc0     F2 00 62 FC | 	wrlong	_var01, objptr
11bc4     26 01 00 FF 
11bc8     C8 00 06 F6 | 	mov	_var01, ##@LR__4350
11bcc     04 E4 05 F1 | 	add	objptr, #4
11bd0     F2 00 62 FC | 	wrlong	_var01, objptr
11bd4     26 01 00 FF 
11bd8     D9 00 06 F6 | 	mov	_var01, ##@LR__4351
11bdc     04 E4 05 F1 | 	add	objptr, #4
11be0     F2 00 62 FC | 	wrlong	_var01, objptr
11be4     26 01 00 FF 
11be8     04 01 06 F6 | 	mov	_var01, ##@LR__4352
11bec     04 E4 05 F1 | 	add	objptr, #4
11bf0     F2 00 62 FC | 	wrlong	_var01, objptr
11bf4     26 01 00 FF 
11bf8     20 01 06 F6 | 	mov	_var01, ##@LR__4353
11bfc     04 E4 05 F1 | 	add	objptr, #4
11c00     F2 00 62 FC | 	wrlong	_var01, objptr
11c04     26 01 00 FF 
11c08     36 01 06 F6 | 	mov	_var01, ##@LR__4354
11c0c     04 E4 05 F1 | 	add	objptr, #4
11c10     F2 00 62 FC | 	wrlong	_var01, objptr
11c14     26 01 00 FF 
11c18     43 01 06 F6 | 	mov	_var01, ##@LR__4355
11c1c     04 E4 05 F1 | 	add	objptr, #4
11c20     F2 00 62 FC | 	wrlong	_var01, objptr
11c24     26 01 00 FF 
11c28     55 01 06 F6 | 	mov	_var01, ##@LR__4356
11c2c     04 E4 05 F1 | 	add	objptr, #4
11c30     F2 00 62 FC | 	wrlong	_var01, objptr
11c34     26 01 00 FF 
11c38     66 01 06 F6 | 	mov	_var01, ##@LR__4357
11c3c     04 E4 05 F1 | 	add	objptr, #4
11c40     F2 00 62 FC | 	wrlong	_var01, objptr
11c44     26 01 00 FF 
11c48     82 01 06 F6 | 	mov	_var01, ##@LR__4358
11c4c     04 E4 05 F1 | 	add	objptr, #4
11c50     F2 00 62 FC | 	wrlong	_var01, objptr
11c54     26 01 00 FF 
11c58     93 01 06 F6 | 	mov	_var01, ##@LR__4359
11c5c     04 E4 05 F1 | 	add	objptr, #4
11c60     F2 00 62 FC | 	wrlong	_var01, objptr
11c64     26 01 00 FF 
11c68     A2 01 06 F6 | 	mov	_var01, ##@LR__4360
11c6c     04 E4 05 F1 | 	add	objptr, #4
11c70     F2 00 62 FC | 	wrlong	_var01, objptr
11c74     26 01 00 FF 
11c78     BD 01 06 F6 | 	mov	_var01, ##@LR__4361
11c7c     04 E4 05 F1 | 	add	objptr, #4
11c80     F2 00 62 FC | 	wrlong	_var01, objptr
11c84     26 01 00 FF 
11c88     F1 01 06 F6 | 	mov	_var01, ##@LR__4362
11c8c     04 E4 05 F1 | 	add	objptr, #4
11c90     F2 00 62 FC | 	wrlong	_var01, objptr
11c94     27 01 00 FF 
11c98     0A 00 06 F6 | 	mov	_var01, ##@LR__4363
11c9c     04 E4 05 F1 | 	add	objptr, #4
11ca0     F2 00 62 FC | 	wrlong	_var01, objptr
11ca4     27 01 00 FF 
11ca8     26 00 06 F6 | 	mov	_var01, ##@LR__4364
11cac     04 E4 05 F1 | 	add	objptr, #4
11cb0     F2 00 62 FC | 	wrlong	_var01, objptr
11cb4     27 01 00 FF 
11cb8     44 00 06 F6 | 	mov	_var01, ##@LR__4365
11cbc     04 E4 05 F1 | 	add	objptr, #4
11cc0     F2 00 62 FC | 	wrlong	_var01, objptr
11cc4     27 01 00 FF 
11cc8     5D 00 06 F6 | 	mov	_var01, ##@LR__4366
11ccc     04 E4 05 F1 | 	add	objptr, #4
11cd0     F2 00 62 FC | 	wrlong	_var01, objptr
11cd4     27 01 00 FF 
11cd8     7C 00 06 F6 | 	mov	_var01, ##@LR__4367
11cdc     04 E4 05 F1 | 	add	objptr, #4
11ce0     F2 00 62 FC | 	wrlong	_var01, objptr
11ce4     27 01 00 FF 
11ce8     8B 00 06 F6 | 	mov	_var01, ##@LR__4368
11cec     04 E4 05 F1 | 	add	objptr, #4
11cf0     F2 00 62 FC | 	wrlong	_var01, objptr
11cf4     27 01 00 FF 
11cf8     B9 00 06 F6 | 	mov	_var01, ##@LR__4369
11cfc     04 E4 05 F1 | 	add	objptr, #4
11d00     F2 00 62 FC | 	wrlong	_var01, objptr
11d04     27 01 00 FF 
11d08     C7 00 06 F6 | 	mov	_var01, ##@LR__4370
11d0c     04 E4 05 F1 | 	add	objptr, #4
11d10     F2 00 62 FC | 	wrlong	_var01, objptr
11d14     27 01 00 FF 
11d18     DC 00 06 F6 | 	mov	_var01, ##@LR__4371
11d1c     04 E4 05 F1 | 	add	objptr, #4
11d20     F2 00 62 FC | 	wrlong	_var01, objptr
11d24     27 01 00 FF 
11d28     00 01 06 F6 | 	mov	_var01, ##@LR__4372
11d2c     04 E4 05 F1 | 	add	objptr, #4
11d30     F2 00 62 FC | 	wrlong	_var01, objptr
11d34     27 01 00 FF 
11d38     17 01 06 F6 | 	mov	_var01, ##@LR__4373
11d3c     04 E4 05 F1 | 	add	objptr, #4
11d40     F2 00 62 FC | 	wrlong	_var01, objptr
11d44     27 01 00 FF 
11d48     2A 01 06 F6 | 	mov	_var01, ##@LR__4374
11d4c     04 E4 05 F1 | 	add	objptr, #4
11d50     F2 00 62 FC | 	wrlong	_var01, objptr
11d54     3C 00 00 FF 
11d58     00 E5 85 F1 | 	sub	objptr, ##30976
11d5c                 | _init_error_strings_ret
11d5c     2D 00 64 FD | 	ret
11d60                 | 
11d60                 | '         
11d60                 | ' sub printerror(err as integer)
11d60                 | _printerror
11d60     01 4A 05 F6 | 	mov	COUNT_, #1
11d64     A8 00 A0 FD | 	call	#pushregs_
11d68     09 1F 02 F6 | 	mov	local01, arg01
11d6c     27 01 00 FF 
11d70     41 13 06 F6 | 	mov	arg01, ##@LR__4375
11d74     B8 24 B0 FD | 	call	#_hg010b_spin2_write
11d78     0F 13 02 F6 | 	mov	arg01, local01
11d7c     B0 26 B0 FD | 	call	#_hg010b_spin2_inttostr
11d80     FD 12 02 F6 | 	mov	arg01, result1
11d84     A8 24 B0 FD | 	call	#_hg010b_spin2_write
11d88     27 01 00 FF 
11d8c     48 13 06 F6 | 	mov	arg01, ##@LR__4376
11d90     9C 24 B0 FD | 	call	#_hg010b_spin2_write
11d94     02 1E 66 F0 | 	shl	local01, #2
11d98     3C 00 00 FF 
11d9c     40 E4 05 F1 | 	add	objptr, ##30784
11da0     F2 1E 02 F1 | 	add	local01, objptr
11da4     0F 13 02 FB | 	rdlong	arg01, local01
11da8     3C 00 00 FF 
11dac     40 E4 85 F1 | 	sub	objptr, ##30784
11db0                 | ' 
11db0                 | ' write(text)
11db0     7C 24 B0 FD | 	call	#_hg010b_spin2_write
11db4                 | ' crlf
11db4     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
11db8     A7 F0 03 F6 | 	mov	ptra, fp
11dbc     B2 00 A0 FD | 	call	#popregs_
11dc0                 | _printerror_ret
11dc0     2D 00 64 FD | 	ret
11dc4                 | 
11dc4                 | ' 
11dc4                 | ' '' ------------------------------- Hardware start/stop/initialization 
11dc4                 | ' 
11dc4                 | ' sub startpsram
11dc4                 | _startpsram
11dc4     00 12 06 F6 | 	mov	arg01, #0
11dc8     0A 14 C6 F9 | 	decod	arg02, #10
11dcc     0B 16 06 F6 | 	mov	arg03, #11
11dd0     07 18 06 F6 | 	mov	arg04, #7
11dd4     0B 00 00 FF 
11dd8     C0 E4 05 F1 | 	add	objptr, ##5824
11ddc     5C 27 B0 FD | 	call	#_psram_spin2_startx
11de0     22 00 00 FF 
11de4     0C E5 05 F1 | 	add	objptr, ##17676
11de8     F2 FA 61 FC | 	wrlong	result1, objptr
11dec                 | '     return $7FF00 + cog*12
11dec     0C E4 05 F1 | 	add	objptr, #12
11df0     FF 03 80 FF 
11df4     F2 00 6A FC | 	wrlong	##524032, objptr
11df8     2D 00 00 FF 
11dfc     D8 E5 85 F1 | 	sub	objptr, ##23512
11e00                 | _startpsram_ret
11e00     2D 00 64 FD | 	ret
11e04                 | 
11e04                 | ' 
11e04                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
11e04                 | _startvideo
11e04     01 4A 05 F6 | 	mov	COUNT_, #1
11e08     A8 00 A0 FD | 	call	#pushregs_
11e0c     2D 00 00 FF 
11e10     D8 E5 05 F1 | 	add	objptr, ##23512
11e14     F2 18 02 FB | 	rdlong	arg04, objptr
11e18     2D 00 00 FF 
11e1c     D8 E5 85 F1 | 	sub	objptr, ##23512
11e20     0A 13 02 F6 | 	mov	arg01, arg02
11e24     0C 15 02 F6 | 	mov	arg02, arg04
11e28     18 0F B0 FD | 	call	#_hg010b_spin2_start
11e2c     2D 00 00 FF 
11e30     C4 E5 05 F1 | 	add	objptr, ##23492
11e34     F2 FA 61 FC | 	wrlong	result1, objptr
11e38                 | ' 
11e38                 | ' videocog=v.start(pin,mbox)
11e38                 | ' 
11e38                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
11e38     00 1E 06 F6 | 	mov	local01, #0
11e3c     22 00 00 FF 
11e40     04 E5 85 F1 | 	sub	objptr, ##17668
11e44                 | LR__1450
11e44     0F 13 02 F6 | 	mov	arg01, local01
11e48     00 28 00 FF 
11e4c     00 14 06 F6 | 	mov	arg02, ##5242880
11e50     40 2B B0 FD | 	call	#_psram_spin2_setQos
11e54     01 1E 06 F1 | 	add	local01, #1
11e58     08 1E 56 F2 | 	cmps	local01, #8 wc
11e5c     E4 FF 9F CD |  if_b	jmp	#LR__1450
11e60     22 00 00 FF 
11e64     04 E5 05 F1 | 	add	objptr, ##17668
11e68     F2 12 02 FB | 	rdlong	arg01, objptr
11e6c     7A 00 02 FF 
11e70     00 14 06 F6 | 	mov	arg02, ##67171328
11e74     22 00 00 FF 
11e78     04 E5 85 F1 | 	sub	objptr, ##17668
11e7c     14 2B B0 FD | 	call	#_psram_spin2_setQos
11e80     0B 00 00 FF 
11e84     C0 E4 85 F1 | 	sub	objptr, ##5824
11e88                 | ' psram.setQoS(videocog, $0400f400) 
11e88                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
11e88     F2 14 02 F6 | 	mov	arg02, objptr
11e8c     00 50 02 FF 
11e90     00 14 46 F5 | 	or	arg02, ##77594624
11e94     00 16 06 F6 | 	mov	arg03, #0
11e98     00 18 06 F6 | 	mov	arg04, #0
11e9c     00 12 06 F6 | 	mov	arg01, #0
11ea0     58 3E B0 FD | 	call	#__system___basic_open
11ea4                 | ' return videocog
11ea4     2D 00 00 FF 
11ea8     C4 E5 05 F1 | 	add	objptr, ##23492
11eac     F2 FA 01 FB | 	rdlong	result1, objptr
11eb0     2D 00 00 FF 
11eb4     C4 E5 85 F1 | 	sub	objptr, ##23492
11eb8     A7 F0 03 F6 | 	mov	ptra, fp
11ebc     B2 00 A0 FD | 	call	#popregs_
11ec0                 | _startvideo_ret
11ec0     2D 00 64 FD | 	ret
11ec4                 | 
11ec4                 | ' 
11ec4                 | ' function pspeek(adr as ulong) as ubyte
11ec4                 | _pspeek
11ec4     00 4A 05 F6 | 	mov	COUNT_, #0
11ec8     A8 00 A0 FD | 	call	#pushregs_
11ecc     0C F0 07 F1 | 	add	ptra, #12
11ed0     04 4E 05 F1 | 	add	fp, #4
11ed4     A7 12 62 FC | 	wrlong	arg01, fp
11ed8     04 4E 05 F1 | 	add	fp, #4
11edc     A7 12 02 F6 | 	mov	arg01, fp
11ee0     04 4E 85 F1 | 	sub	fp, #4
11ee4     A7 14 02 FB | 	rdlong	arg02, fp
11ee8     04 4E 85 F1 | 	sub	fp, #4
11eec     01 16 06 F6 | 	mov	arg03, #1
11ef0     0B 00 00 FF 
11ef4     C0 E4 05 F1 | 	add	objptr, ##5824
11ef8     6C 28 B0 FD | 	call	#_psram_spin2_read1
11efc     0B 00 00 FF 
11f00     C0 E4 85 F1 | 	sub	objptr, ##5824
11f04                 | ' psram.read1(varptr(res),adr,1)
11f04                 | ' return res
11f04     08 4E 05 F1 | 	add	fp, #8
11f08     A7 FA C1 FA | 	rdbyte	result1, fp
11f0c     08 4E 85 F1 | 	sub	fp, #8
11f10     A7 F0 03 F6 | 	mov	ptra, fp
11f14     B2 00 A0 FD | 	call	#popregs_
11f18                 | _pspeek_ret
11f18     2D 00 64 FD | 	ret
11f1c                 | 
11f1c                 | ' 
11f1c                 | ' function pslpeek(adr as ulong) as ulong
11f1c                 | _pslpeek
11f1c     00 4A 05 F6 | 	mov	COUNT_, #0
11f20     A8 00 A0 FD | 	call	#pushregs_
11f24     0C F0 07 F1 | 	add	ptra, #12
11f28     04 4E 05 F1 | 	add	fp, #4
11f2c     A7 12 62 FC | 	wrlong	arg01, fp
11f30     04 4E 05 F1 | 	add	fp, #4
11f34     A7 12 02 F6 | 	mov	arg01, fp
11f38     04 4E 85 F1 | 	sub	fp, #4
11f3c     A7 14 02 FB | 	rdlong	arg02, fp
11f40     04 4E 85 F1 | 	sub	fp, #4
11f44     04 16 06 F6 | 	mov	arg03, #4
11f48     0B 00 00 FF 
11f4c     C0 E4 05 F1 | 	add	objptr, ##5824
11f50     14 28 B0 FD | 	call	#_psram_spin2_read1
11f54     0B 00 00 FF 
11f58     C0 E4 85 F1 | 	sub	objptr, ##5824
11f5c                 | ' psram.read1(varptr(res),adr,4)
11f5c                 | ' return res
11f5c     08 4E 05 F1 | 	add	fp, #8
11f60     A7 FA 01 FB | 	rdlong	result1, fp
11f64     08 4E 85 F1 | 	sub	fp, #8
11f68     A7 F0 03 F6 | 	mov	ptra, fp
11f6c     B2 00 A0 FD | 	call	#popregs_
11f70                 | _pslpeek_ret
11f70     2D 00 64 FD | 	ret
11f74                 | 
11f74                 | ' 
11f74                 | ' '' ------------------------------- USB keyboard scan to char translator
11f74                 | ' 
11f74                 | ' function scantochar(key)
11f74                 | _scantochar
11f74                 | ' 
11f74                 | ' select case (key shr 8) and 255
11f74     09 01 02 F6 | 	mov	_var01, arg01
11f78     08 00 C6 F0 | 	sar	_var01, #8
11f7c     FF 00 0E F5 | 	and	_var01, #255 wz
11f80     24 00 90 AD |  if_e	jmp	#LR__1460
11f84     02 00 0E F2 | 	cmp	_var01, #2 wz
11f88     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
11f8c     30 00 90 AD |  if_e	jmp	#LR__1461
11f90     40 00 0E F2 | 	cmp	_var01, #64 wz
11f94     44 00 90 AD |  if_e	jmp	#LR__1462
11f98     42 00 0E F2 | 	cmp	_var01, #66 wz
11f9c     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
11fa0     70 00 90 5D |  if_ne	jmp	#LR__1464
11fa4     50 00 90 FD | 	jmp	#LR__1463
11fa8                 | LR__1460
11fa8     09 FB 01 F6 | 	mov	result1, arg01
11fac     7F FA 05 F5 | 	and	result1, #127
11fb0     02 FA 65 F0 | 	shl	result1, #2
11fb4     F5 FA 01 F1 | 	add	result1, ptr__dat__
11fb8     FD FA C1 FA | 	rdbyte	result1, result1
11fbc     54 00 90 FD | 	jmp	#_scantochar_ret
11fc0                 | LR__1461
11fc0     09 FB 01 F6 | 	mov	result1, arg01
11fc4     7F FA 05 F5 | 	and	result1, #127
11fc8     02 FA 65 F0 | 	shl	result1, #2
11fcc     01 FA 05 F1 | 	add	result1, #1
11fd0     F5 FA 01 F1 | 	add	result1, ptr__dat__
11fd4     FD FA C1 FA | 	rdbyte	result1, result1
11fd8     38 00 90 FD | 	jmp	#_scantochar_ret
11fdc                 | LR__1462
11fdc     09 FB 01 F6 | 	mov	result1, arg01
11fe0     7F FA 05 F5 | 	and	result1, #127
11fe4     02 FA 65 F0 | 	shl	result1, #2
11fe8     02 FA 05 F1 | 	add	result1, #2
11fec     F5 FA 01 F1 | 	add	result1, ptr__dat__
11ff0     FD FA C1 FA | 	rdbyte	result1, result1
11ff4     1C 00 90 FD | 	jmp	#_scantochar_ret
11ff8                 | LR__1463
11ff8     09 FB 01 F6 | 	mov	result1, arg01
11ffc     7F FA 05 F5 | 	and	result1, #127
12000     02 FA 65 F0 | 	shl	result1, #2
12004     03 FA 05 F1 | 	add	result1, #3
12008     F5 FA 01 F1 | 	add	result1, ptr__dat__
1200c     FD FA C1 FA | 	rdbyte	result1, result1
12010     00 00 90 FD | 	jmp	#_scantochar_ret
12014                 | LR__1464
12014                 | _scantochar_ret
12014     2D 00 64 FD | 	ret
12018                 | 
12018                 | _program
12018     0B 4A 05 F6 | 	mov	COUNT_, #11
1201c     A8 00 A0 FD | 	call	#pushregs_
12020     A0 FD BF FD | 	call	#_startpsram
12024     40 12 06 F6 | 	mov	arg01, #64
12028     00 14 06 F6 | 	mov	arg02, #0
1202c     00 16 06 F6 | 	mov	arg03, #0
12030     D0 FD BF FD | 	call	#_startvideo
12034     00 12 06 F6 | 	mov	arg01, #0
12038     00 14 06 F6 | 	mov	arg02, #0
1203c     00 16 06 F6 | 	mov	arg03, #0
12040     0B 00 00 FF 
12044     C0 E4 05 F1 | 	add	objptr, ##5824
12048     5C 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
1204c     FE 1C 02 F6 | 	mov	arg06, result2
12050     22 00 00 FF 
12054     00 E5 05 F1 | 	add	objptr, ##17664
12058     F2 FA 61 FC | 	wrlong	result1, objptr
1205c     14 E4 05 F1 | 	add	objptr, #20
12060     F2 1C 62 FC | 	wrlong	arg06, objptr
12064     2D 00 00 FF 
12068     D4 E5 85 F1 | 	sub	objptr, ##23508
1206c     32 12 06 F6 | 	mov	arg01, #50
12070     D4 34 B0 FD | 	call	#__system___waitms
12074     2D 00 00 FF 
12078     D4 E5 05 F1 | 	add	objptr, ##23508
1207c     F2 12 02 FB | 	rdlong	arg01, objptr
12080     2D 00 00 FF 
12084     D4 E5 85 F1 | 	sub	objptr, ##23508
12088     14 12 06 F1 | 	add	arg01, #20
1208c     20 00 80 FF 
12090     09 01 58 FC | 	wrword	##16384, arg01
12094     04 2A B0 FD | 	call	#_usbnew_spin2_start
12098     2D 00 00 FF 
1209c     C8 E5 05 F1 | 	add	objptr, ##23496
120a0     F2 FA 61 FC | 	wrlong	result1, objptr
120a4                 | '   mouse_limits[0] := xlim
120a4     0F 00 00 FF 
120a8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
120ac     01 00 80 FF 
120b0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
120b4                 | '   mouse_limits[1] := ylim
120b4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
120b8     01 00 80 FF 
120bc     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
120c0     2D 00 00 FF 
120c4     BB E4 85 F1 | 	sub	objptr, ##23227
120c8     F2 12 02 F6 | 	mov	arg01, objptr
120cc     0D E5 85 F1 | 	sub	objptr, #269
120d0     C4 12 06 F1 | 	add	arg01, #196
120d4                 | '   mouse_outptr := ptr
120d4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
120d8     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
120dc     0F 00 00 FF 
120e0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
120e4     07 00 00 FF 
120e8     72 EB 05 F1 | 	add	ptr__dat__, ##3954
120ec     F5 14 02 F6 | 	mov	arg02, ptr__dat__
120f0     07 00 00 FF 
120f4     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
120f8     10 12 06 F6 | 	mov	arg01, #16
120fc     3C 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
12100     10 12 06 F6 | 	mov	arg01, #16
12104     20 14 06 F6 | 	mov	arg02, #32
12108     20 16 06 F6 | 	mov	arg03, #32
1210c     A0 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
12110     09 12 C6 F9 | 	decod	arg01, #9
12114     20 15 06 F6 | 	mov	arg02, #288
12118     3C 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
1211c     F2 1C 02 F6 | 	mov	arg06, objptr
12120     50 00 00 FF 
12124     AC E5 05 F1 | 	add	objptr, ##41388
12128     F2 1A 02 F6 | 	mov	arg05, objptr
1212c     0D 1D 62 FC | 	wrlong	arg06, arg05
12130     04 1A 06 F1 | 	add	arg05, #4
12134     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
12138     EF 14 02 F6 | 	mov	arg02, entryptr__
1213c     F2 1E 02 F6 | 	mov	local01, objptr
12140     1E FA 05 F6 | 	mov	result1, #30
12144     28 1E 62 FD | 	setq	local01
12148     0A FB F1 FC | 	coginit	result1, arg02 wc
1214c     01 FA 65 C6 |  if_b	neg	result1, #1
12150     04 E4 85 F1 | 	sub	objptr, #4
12154     F2 FA 61 FC | 	wrlong	result1, objptr
12158     01 00 00 FF 
1215c     90 E4 05 F1 | 	add	objptr, ##656
12160     F2 00 68 FC | 	wrlong	#0, objptr
12164     24 00 00 FF 
12168     40 E4 85 F1 | 	sub	objptr, ##18496
1216c     F2 04 68 FC | 	wrlong	#2, objptr
12170     04 E4 05 F1 | 	add	objptr, #4
12174     F2 26 69 FC | 	wrlong	#147, objptr
12178     04 E4 05 F1 | 	add	objptr, #4
1217c     F2 34 69 FC | 	wrlong	#154, objptr
12180     04 E4 05 F1 | 	add	objptr, #4
12184     F2 08 68 FC | 	wrlong	#4, objptr
12188     04 E4 85 F1 | 	sub	objptr, #4
1218c     F2 1C 02 FB | 	rdlong	arg06, objptr
12190     14 E4 85 F1 | 	sub	objptr, #20
12194     F2 1C 62 FC | 	wrlong	arg06, objptr
12198     04 E4 05 F1 | 	add	objptr, #4
1219c     F2 00 68 FC | 	wrlong	#0, objptr
121a0     04 E4 05 F1 | 	add	objptr, #4
121a4     F2 00 68 FC | 	wrlong	#0, objptr
121a8     22 00 00 FF 
121ac     B0 E5 05 F1 | 	add	objptr, ##17840
121b0     F2 02 68 FC | 	wrlong	#1, objptr
121b4     14 00 00 FF 
121b8     7C E5 85 F1 | 	sub	objptr, ##10620
121bc     F2 18 68 FC | 	wrlong	#12, objptr
121c0     3C 00 00 FF 
121c4     28 E4 85 F1 | 	sub	objptr, ##30760
121c8     98 EE BF FD | 	call	#_init_commands
121cc     70 F8 BF FD | 	call	#_init_error_strings
121d0     9C 83 BF FD | 	call	#_do_new
121d4     2E 00 00 FF 
121d8     00 E4 05 F1 | 	add	objptr, ##23552
121dc     F2 12 02 FB | 	rdlong	arg01, objptr
121e0     04 E4 85 F1 | 	sub	objptr, #4
121e4     F2 14 02 FB | 	rdlong	arg02, objptr
121e8     2D 00 00 FF 
121ec     FC E5 85 F1 | 	sub	objptr, ##23548
121f0     80 1D B0 FD | 	call	#_hg010b_spin2_cls
121f4     2E 00 00 FF 
121f8     04 E4 05 F1 | 	add	objptr, ##23556
121fc     F2 12 02 FB | 	rdlong	arg01, objptr
12200     2E 00 00 FF 
12204     04 E4 85 F1 | 	sub	objptr, ##23556
12208     80 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
1220c                 | ' 
1220c                 | ' leading_spaces:=amount
1220c     01 00 00 FF 
12210     B2 E4 05 F1 | 	add	objptr, ##690
12214     F2 04 68 FC | 	wrlong	#2, objptr
12218     01 00 00 FF 
1221c     B2 E4 85 F1 | 	sub	objptr, ##690
12220     27 01 00 FF 
12224     4B 21 06 F6 | 	mov	local02, ##@LR__4377
12228     3D 12 06 F6 | 	mov	arg01, #61
1222c     3C 14 06 F6 | 	mov	arg02, #60
12230     3B 16 06 F6 | 	mov	arg03, #59
12234     3A 18 06 F6 | 	mov	arg04, #58
12238     64 76 B0 FD | 	call	#__system___vfs_open_sdcardx
1223c     FD 14 02 F6 | 	mov	arg02, result1
12240     10 13 02 F6 | 	mov	arg01, local02
12244     D8 33 B0 FD | 	call	#__system___mount
12248     27 01 00 FF 
1224c     4F 13 06 F6 | 	mov	arg01, ##@LR__4378
12250     8C 36 B0 FD | 	call	#__system___chdir
12254     27 01 00 FF 
12258     57 21 06 F6 | 	mov	local02, ##@LR__4379
1225c     49 00 00 FF 
12260     58 E4 05 F1 | 	add	objptr, ##37464
12264     F2 20 62 FC | 	wrlong	local02, objptr
12268     1B 00 00 FF 
1226c     60 E4 85 F1 | 	sub	objptr, ##13920
12270     F2 12 02 FB | 	rdlong	arg01, objptr
12274     2D 00 00 FF 
12278     F8 E5 85 F1 | 	sub	objptr, ##23544
1227c     01 12 66 F0 | 	shl	arg01, #1
12280     01 14 06 F6 | 	mov	arg02, #1
12284     44 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
12288                 | ' 
12288                 | ' init_commands
12288                 | ' init_error_strings
12288                 | ' do_new
12288                 | ' 
12288                 | ' 
12288                 | ' cls(ink, paper)
12288                 | ' 'v.setfontfamily(4) 				' use ST Mono font
12288                 | ' v.setfontfamily(font) 				' use ST Mono font
12288                 | ' v.setleadingspaces(2)
12288                 | ' mount "/sd", _vfs_open_sdcard()
12288                 | ' chdir "/sd/bas"
12288                 | ' 
12288                 | ' currentdir$="/sd/bas"
12288                 | ' 
12288                 | ' position 2*editor_spaces,1 : print ver$
12288     00 12 06 F6 | 	mov	arg01, #0
1228c     78 85 B0 FD | 	call	#__system___getiolock_0334
12290     FD 12 02 F6 | 	mov	arg01, result1
12294     BC 2F B0 FD | 	call	#__system___lockmem
12298     09 00 00 FF 
1229c     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
122a0     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
122a4     09 00 00 FF 
122a8     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
122ac     00 12 06 F6 | 	mov	arg01, #0
122b0     00 16 06 F6 | 	mov	arg03, #0
122b4     90 3C B0 FD | 	call	#__system___basic_print_string
122b8     00 12 06 F6 | 	mov	arg01, #0
122bc     0A 14 06 F6 | 	mov	arg02, #10
122c0     00 16 06 F6 | 	mov	arg03, #0
122c4     28 3C B0 FD | 	call	#__system___basic_print_char
122c8     00 12 06 F6 | 	mov	arg01, #0
122cc     38 85 B0 FD | 	call	#__system___getiolock_0334
122d0     FD 00 68 FC | 	wrlong	#0, result1
122d4     F2 12 02 FB | 	rdlong	arg01, objptr
122d8     00 14 06 F6 | 	mov	arg02, #0
122dc     0A 16 06 F6 | 	mov	arg03, #10
122e0     78 51 B0 FD | 	call	#__system__Number_S
122e4     FD 12 02 F6 | 	mov	arg01, result1
122e8     27 01 00 FF 
122ec     5F 15 06 F6 | 	mov	arg02, ##@LR__4380
122f0     BC 2F B0 FD | 	call	#__system___string_concat
122f4     FD 20 02 F6 | 	mov	local02, result1
122f8     50 00 00 FF 
122fc     A0 E5 05 F1 | 	add	objptr, ##41376
12300     F2 20 62 FC | 	wrlong	local02, objptr
12304     50 00 00 FF 
12308     A0 E5 85 F1 | 	sub	objptr, ##41376
1230c                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
1230c     00 12 06 F6 | 	mov	arg01, #0
12310     F4 84 B0 FD | 	call	#__system___getiolock_0334
12314     FD 12 02 F6 | 	mov	arg01, result1
12318     38 2F B0 FD | 	call	#__system___lockmem
1231c     50 00 00 FF 
12320     A0 E5 05 F1 | 	add	objptr, ##41376
12324     F2 14 02 FB | 	rdlong	arg02, objptr
12328     50 00 00 FF 
1232c     A0 E5 85 F1 | 	sub	objptr, ##41376
12330     00 12 06 F6 | 	mov	arg01, #0
12334     00 16 06 F6 | 	mov	arg03, #0
12338     0C 3C B0 FD | 	call	#__system___basic_print_string
1233c     00 12 06 F6 | 	mov	arg01, #0
12340     0A 14 06 F6 | 	mov	arg02, #10
12344     00 16 06 F6 | 	mov	arg03, #0
12348     A4 3B B0 FD | 	call	#__system___basic_print_char
1234c     00 12 06 F6 | 	mov	arg01, #0
12350     B4 84 B0 FD | 	call	#__system___getiolock_0334
12354     FD 00 68 FC | 	wrlong	#0, result1
12358     2D 00 00 FF 
1235c     F8 E5 05 F1 | 	add	objptr, ##23544
12360     F2 12 02 FB | 	rdlong	arg01, objptr
12364     2D 00 00 FF 
12368     F8 E5 85 F1 | 	sub	objptr, ##23544
1236c     01 12 66 F0 | 	shl	arg01, #1
12370     04 14 06 F6 | 	mov	arg02, #4
12374     54 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
12378                 | ' position 2*editor_spaces,4 : print "Ready"
12378     00 12 06 F6 | 	mov	arg01, #0
1237c     88 84 B0 FD | 	call	#__system___getiolock_0334
12380     FD 12 02 F6 | 	mov	arg01, result1
12384     CC 2E B0 FD | 	call	#__system___lockmem
12388     27 01 00 FF 
1238c     71 15 06 F6 | 	mov	arg02, ##@LR__4381
12390     00 12 06 F6 | 	mov	arg01, #0
12394     00 16 06 F6 | 	mov	arg03, #0
12398     AC 3B B0 FD | 	call	#__system___basic_print_string
1239c     FD 22 02 F6 | 	mov	local03, result1
123a0     00 12 06 F6 | 	mov	arg01, #0
123a4     0A 14 06 F6 | 	mov	arg02, #10
123a8     00 16 06 F6 | 	mov	arg03, #0
123ac     40 3B B0 FD | 	call	#__system___basic_print_char
123b0     01 24 06 F6 | 	mov	local04, #1
123b4     00 12 06 F6 | 	mov	arg01, #0
123b8     4C 84 B0 FD | 	call	#__system___getiolock_0334
123bc     FD 00 68 FC | 	wrlong	#0, result1
123c0     00 26 06 F6 | 	mov	local05, #0
123c4                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
123c4                 | ' 
123c4                 | ' 
123c4                 | ' '-------------------------------------------------------------------------------------------------------- 
123c4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
123c4                 | ' '--------------------------------------------------------------------------------------------------------
123c4                 | ' 
123c4                 | ' do
123c4                 | LR__1470
123c4     01 12 06 F6 | 	mov	arg01, #1
123c8     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
123cc     28 27 B0 FD | 	call	#_usbnew_spin2_get_key
123d0     3C 00 00 FF 
123d4     38 E4 05 F1 | 	add	objptr, ##30776
123d8     F2 FA 61 FC | 	wrlong	result1, objptr
123dc                 | '   return hkbd_led_rep
123dc     13 00 00 FF 
123e0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
123e4     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
123e8     13 00 00 FF 
123ec     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
123f0     16 00 00 FF 
123f4     08 E4 05 F1 | 	add	objptr, ##11272
123f8     F2 FA 61 FC | 	wrlong	result1, objptr
123fc                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
123fc     16 00 00 FF 
12400     08 E4 85 F1 | 	sub	objptr, ##11272
12404     F2 20 02 FB | 	rdlong	local02, objptr
12408     3C 00 00 FF 
1240c     38 E4 85 F1 | 	sub	objptr, ##30776
12410     01 20 16 F2 | 	cmp	local02, #1 wc
12414     BC 00 90 CD |  if_b	jmp	#LR__1471
12418     3C 00 00 FF 
1241c     38 E4 05 F1 | 	add	objptr, ##30776
12420     F2 24 02 FB | 	rdlong	local04, objptr
12424     3C 00 00 FF 
12428     38 E4 85 F1 | 	sub	objptr, ##30776
1242c     12 23 02 F6 | 	mov	local03, local04
12430     04 22 16 F2 | 	cmp	local03, #4 wc
12434     9C 00 90 3D |  if_ae	jmp	#LR__1471
12438     50 00 00 FF 
1243c     A4 E5 05 F1 | 	add	objptr, ##41380
12440     F2 1E 02 FB | 	rdlong	local01, objptr
12444     50 00 00 FF 
12448     A4 E5 85 F1 | 	sub	objptr, ##41380
1244c     0F 27 02 F6 | 	mov	local05, local01
12450     01 26 0E F2 | 	cmp	local05, #1 wz
12454     7C 00 90 5D |  if_ne	jmp	#LR__1471
12458     04 00 00 FF 
1245c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12460     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12464     04 00 00 FF 
12468     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
1246c     56 00 00 FF 
12470     44 22 06 F6 | 	mov	local03, ##44100
12474     0E 24 C6 F9 | 	decod	local04, #14
12478     00 26 06 F6 | 	mov	local05, #0
1247c     03 00 00 FF 
12480     DE 1E 06 F6 | 	mov	local01, ##1758
12484     07 12 06 F6 | 	mov	arg01, #7
12488     56 00 00 FF 
1248c     44 16 06 F6 | 	mov	arg03, ##44100
12490     0E 18 C6 F9 | 	decod	arg04, #14
12494     00 1A 06 F6 | 	mov	arg05, #0
12498     03 00 00 FF 
1249c     DE 1C 06 F6 | 	mov	arg06, ##1758
124a0     0B 00 00 FF 
124a4     C0 E4 05 F1 | 	add	objptr, ##5824
124a8     74 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
124ac     0B 00 00 FF 
124b0     C0 E4 85 F1 | 	sub	objptr, ##5824
124b4     0A 12 06 F6 | 	mov	arg01, #10
124b8     8C 30 B0 FD | 	call	#__system___waitms
124bc     07 12 06 F6 | 	mov	arg01, #7
124c0     0B 00 00 FF 
124c4     C0 E4 05 F1 | 	add	objptr, ##5824
124c8     A4 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
124cc     0B 00 00 FF 
124d0     C0 E4 85 F1 | 	sub	objptr, ##5824
124d4                 | LR__1471
124d4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
124d4     3C 00 00 FF 
124d8     38 E4 05 F1 | 	add	objptr, ##30776
124dc     F2 20 02 FB | 	rdlong	local02, objptr
124e0     3C 00 00 FF 
124e4     38 E4 85 F1 | 	sub	objptr, ##30776
124e8     04 20 16 F2 | 	cmp	local02, #4 wc
124ec     80 00 90 CD |  if_b	jmp	#LR__1472
124f0     3C 00 00 FF 
124f4     38 E4 05 F1 | 	add	objptr, ##30776
124f8     F2 24 02 FB | 	rdlong	local04, objptr
124fc     3C 00 00 FF 
12500     38 E4 85 F1 | 	sub	objptr, ##30776
12504     12 23 02 F6 | 	mov	local03, local04
12508     00 00 40 FF 
1250c     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
12510     3C 00 00 CF 
12514     38 E4 05 C1 |  if_b	add	objptr, ##30776
12518     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1251c     3C 00 00 CF 
12520     38 E4 85 C1 |  if_b	sub	objptr, ##30776
12524     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
12528     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1252c     40 00 90 3D |  if_ae	jmp	#LR__1472
12530     3C 00 00 FF 
12534     38 E4 05 F1 | 	add	objptr, ##30776
12538     F2 20 02 FB | 	rdlong	local02, objptr
1253c     04 E4 05 F1 | 	add	objptr, #4
12540     F2 20 62 FC | 	wrlong	local02, objptr
12544     16 00 00 FF 
12548     08 E4 05 F1 | 	add	objptr, ##11272
1254c     F2 02 68 FC | 	wrlong	#1, objptr
12550     16 00 00 FF 
12554     08 E4 85 F1 | 	sub	objptr, ##11272
12558     F2 20 02 FB | 	rdlong	local02, objptr
1255c     16 00 00 FF 
12560     0C E4 05 F1 | 	add	objptr, ##11276
12564     F2 20 62 FC | 	wrlong	local02, objptr
12568     52 00 00 FF 
1256c     48 E4 85 F1 | 	sub	objptr, ##42056
12570                 | LR__1472
12570                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
12570     3C 00 00 FF 
12574     38 E4 05 F1 | 	add	objptr, ##30776
12578     F2 20 02 FB | 	rdlong	local02, objptr
1257c     3C 00 00 FF 
12580     38 E4 85 F1 | 	sub	objptr, ##30776
12584     00 00 40 FF 
12588     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1258c     52 00 00 3F 
12590     4C E4 05 31 |  if_ae	add	objptr, ##42060
12594     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12598     08 E4 85 31 |  if_ae	sub	objptr, #8
1259c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
125a0     52 00 00 3F 
125a4     44 E4 85 31 |  if_ae	sub	objptr, ##42052
125a8                 | ' if key=0 andalso rpt=1 then rptcnt+=1
125a8     3C 00 00 FF 
125ac     38 E4 05 F1 | 	add	objptr, ##30776
125b0     F2 20 0A FB | 	rdlong	local02, objptr wz
125b4     3C 00 00 FF 
125b8     38 E4 85 F1 | 	sub	objptr, ##30776
125bc     52 00 00 AF 
125c0     44 E4 05 A1 |  if_e	add	objptr, ##42052
125c4     F2 24 02 AB |  if_e	rdlong	local04, objptr
125c8     52 00 00 AF 
125cc     44 E4 85 A1 |  if_e	sub	objptr, ##42052
125d0     12 23 02 A6 |  if_e	mov	local03, local04
125d4     01 22 0E A2 |  if_e	cmp	local03, #1 wz
125d8     52 00 00 AF 
125dc     4C E4 05 A1 |  if_e	add	objptr, ##42060
125e0     F2 20 02 AB |  if_e	rdlong	local02, objptr
125e4     01 20 06 A1 |  if_e	add	local02, #1
125e8     F2 20 62 AC |  if_e	wrlong	local02, objptr
125ec     52 00 00 AF 
125f0     4C E4 85 A1 |  if_e	sub	objptr, ##42060
125f4                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
125f4     3C 00 00 FF 
125f8     38 E4 05 F1 | 	add	objptr, ##30776
125fc     F2 20 02 FB | 	rdlong	local02, objptr
12600     3C 00 00 FF 
12604     38 E4 85 F1 | 	sub	objptr, ##30776
12608     00 00 40 FF 
1260c     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
12610     44 00 90 3D |  if_ae	jmp	#LR__1474
12614     52 00 00 FF 
12618     4C E4 05 F1 | 	add	objptr, ##42060
1261c     F2 20 02 FB | 	rdlong	local02, objptr
12620     52 00 00 FF 
12624     4C E4 85 F1 | 	sub	objptr, ##42060
12628     19 20 0E F2 | 	cmp	local02, #25 wz
1262c     28 00 90 5D |  if_ne	jmp	#LR__1473
12630     3C 00 00 FF 
12634     3C E4 05 F1 | 	add	objptr, ##30780
12638     F2 20 02 FB | 	rdlong	local02, objptr
1263c     16 00 00 FF 
12640     0C E4 05 F1 | 	add	objptr, ##11276
12644     F2 20 62 FC | 	wrlong	local02, objptr
12648     04 E4 05 F1 | 	add	objptr, #4
1264c     F2 2A 68 FC | 	wrlong	#21, objptr
12650     52 00 00 FF 
12654     4C E4 85 F1 | 	sub	objptr, ##42060
12658                 | LR__1473
12658                 | LR__1474
12658                 | ' 
12658                 | ' 
12658                 | ' if key3<>0 then
12658     52 00 00 FF 
1265c     48 E4 05 F1 | 	add	objptr, ##42056
12660     F2 28 0A FB | 	rdlong	local06, objptr wz
12664     52 00 00 FF 
12668     48 E4 85 F1 | 	sub	objptr, ##42056
1266c     54 FD 9F AD |  if_e	jmp	#LR__1470
12670                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
12670     50 00 00 FF 
12674     A4 E5 05 F1 | 	add	objptr, ##41380
12678     F2 20 02 FB | 	rdlong	local02, objptr
1267c     50 00 00 FF 
12680     A4 E5 85 F1 | 	sub	objptr, ##41380
12684     01 20 0E F2 | 	cmp	local02, #1 wz
12688     5C 00 90 5D |  if_ne	jmp	#LR__1475
1268c     01 00 00 FF 
12690     00 EA 05 F1 | 	add	ptr__dat__, ##512
12694     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12698     01 00 00 FF 
1269c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
126a0     56 00 00 FF 
126a4     44 22 06 F6 | 	mov	local03, ##44100
126a8     0E 24 C6 F9 | 	decod	local04, #14
126ac     03 00 00 FF 
126b0     94 26 06 F6 | 	mov	local05, ##1684
126b4     01 1E 66 F6 | 	neg	local01, #1
126b8     07 12 06 F6 | 	mov	arg01, #7
126bc     56 00 00 FF 
126c0     44 16 06 F6 | 	mov	arg03, ##44100
126c4     0E 18 C6 F9 | 	decod	arg04, #14
126c8     03 00 00 FF 
126cc     94 1A 06 F6 | 	mov	arg05, ##1684
126d0     01 1C 66 F6 | 	neg	arg06, #1
126d4     0B 00 00 FF 
126d8     C0 E4 05 F1 | 	add	objptr, ##5824
126dc     40 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
126e0     0B 00 00 FF 
126e4     C0 E4 85 F1 | 	sub	objptr, ##5824
126e8                 | LR__1475
126e8     52 00 00 FF 
126ec     48 E4 05 F1 | 	add	objptr, ##42056
126f0     F2 12 02 FB | 	rdlong	arg01, objptr
126f4     52 00 00 FF 
126f8     48 E4 85 F1 | 	sub	objptr, ##42056
126fc     74 F8 BF FD | 	call	#_scantochar
12700     52 00 00 FF 
12704     50 E4 05 F1 | 	add	objptr, ##42064
12708     F2 FA 61 FC | 	wrlong	result1, objptr
1270c                 | '   if leds and 2 = 2 then 
1270c     10 E4 85 F1 | 	sub	objptr, #16
12710     F2 20 0A FB | 	rdlong	local02, objptr wz
12714     52 00 00 FF 
12718     40 E4 85 F1 | 	sub	objptr, ##42048
1271c     68 01 90 AD |  if_e	jmp	#LR__1483
12720                 | '     if key4>96 andalso key4<123 then
12720     52 00 00 FF 
12724     50 E4 05 F1 | 	add	objptr, ##42064
12728     F2 20 02 FB | 	rdlong	local02, objptr
1272c     52 00 00 FF 
12730     50 E4 85 F1 | 	sub	objptr, ##42064
12734     61 20 56 F2 | 	cmps	local02, #97 wc
12738     40 00 90 CD |  if_b	jmp	#LR__1476
1273c     52 00 00 FF 
12740     50 E4 05 F1 | 	add	objptr, ##42064
12744     F2 24 02 FB | 	rdlong	local04, objptr
12748     52 00 00 FF 
1274c     50 E4 85 F1 | 	sub	objptr, ##42064
12750     12 23 02 F6 | 	mov	local03, local04
12754     7B 22 56 F2 | 	cmps	local03, #123 wc
12758     20 00 90 3D |  if_ae	jmp	#LR__1476
1275c     52 00 00 FF 
12760     50 E4 05 F1 | 	add	objptr, ##42064
12764     F2 20 02 FB | 	rdlong	local02, objptr
12768     20 20 86 F1 | 	sub	local02, #32
1276c     F2 20 62 FC | 	wrlong	local02, objptr
12770     52 00 00 FF 
12774     50 E4 85 F1 | 	sub	objptr, ##42064
12778     0C 01 90 FD | 	jmp	#LR__1482
1277c                 | LR__1476
1277c     52 00 00 FF 
12780     50 E4 05 F1 | 	add	objptr, ##42064
12784     F2 20 02 FB | 	rdlong	local02, objptr
12788     52 00 00 FF 
1278c     50 E4 85 F1 | 	sub	objptr, ##42064
12790     41 20 56 F2 | 	cmps	local02, #65 wc
12794     40 00 90 CD |  if_b	jmp	#LR__1477
12798     52 00 00 FF 
1279c     50 E4 05 F1 | 	add	objptr, ##42064
127a0     F2 24 02 FB | 	rdlong	local04, objptr
127a4     52 00 00 FF 
127a8     50 E4 85 F1 | 	sub	objptr, ##42064
127ac     12 23 02 F6 | 	mov	local03, local04
127b0     5B 22 56 F2 | 	cmps	local03, #91 wc
127b4     20 00 90 3D |  if_ae	jmp	#LR__1477
127b8     52 00 00 FF 
127bc     50 E4 05 F1 | 	add	objptr, ##42064
127c0     F2 20 02 FB | 	rdlong	local02, objptr
127c4     20 20 06 F1 | 	add	local02, #32
127c8     F2 20 62 FC | 	wrlong	local02, objptr
127cc     52 00 00 FF 
127d0     50 E4 85 F1 | 	sub	objptr, ##42064
127d4     B0 00 90 FD | 	jmp	#LR__1481
127d8                 | LR__1477
127d8     52 00 00 FF 
127dc     50 E4 05 F1 | 	add	objptr, ##42064
127e0     F2 20 02 FB | 	rdlong	local02, objptr
127e4     52 00 00 FF 
127e8     50 E4 85 F1 | 	sub	objptr, ##42064
127ec     17 20 56 F2 | 	cmps	local02, #23 wc
127f0     40 00 90 CD |  if_b	jmp	#LR__1478
127f4     52 00 00 FF 
127f8     50 E4 05 F1 | 	add	objptr, ##42064
127fc     F2 24 02 FB | 	rdlong	local04, objptr
12800     52 00 00 FF 
12804     50 E4 85 F1 | 	sub	objptr, ##42064
12808     12 23 02 F6 | 	mov	local03, local04
1280c     20 22 56 F2 | 	cmps	local03, #32 wc
12810     20 00 90 3D |  if_ae	jmp	#LR__1478
12814     52 00 00 FF 
12818     50 E4 05 F1 | 	add	objptr, ##42064
1281c     F2 20 02 FB | 	rdlong	local02, objptr
12820     09 20 86 F1 | 	sub	local02, #9
12824     F2 20 62 FC | 	wrlong	local02, objptr
12828     52 00 00 FF 
1282c     50 E4 85 F1 | 	sub	objptr, ##42064
12830     54 00 90 FD | 	jmp	#LR__1480
12834                 | LR__1478
12834     52 00 00 FF 
12838     50 E4 05 F1 | 	add	objptr, ##42064
1283c     F2 20 02 FB | 	rdlong	local02, objptr
12840     52 00 00 FF 
12844     50 E4 85 F1 | 	sub	objptr, ##42064
12848     0E 20 56 F2 | 	cmps	local02, #14 wc
1284c     38 00 90 CD |  if_b	jmp	#LR__1479
12850     52 00 00 FF 
12854     50 E4 05 F1 | 	add	objptr, ##42064
12858     F2 24 02 FB | 	rdlong	local04, objptr
1285c     52 00 00 FF 
12860     50 E4 85 F1 | 	sub	objptr, ##42064
12864     12 23 02 F6 | 	mov	local03, local04
12868     17 22 56 F2 | 	cmps	local03, #23 wc
1286c     52 00 00 CF 
12870     50 E4 05 C1 |  if_b	add	objptr, ##42064
12874     F2 20 02 CB |  if_b	rdlong	local02, objptr
12878     27 20 06 C1 |  if_b	add	local02, #39
1287c     F2 20 62 CC |  if_b	wrlong	local02, objptr
12880     52 00 00 CF 
12884     50 E4 85 C1 |  if_b	sub	objptr, ##42064
12888                 | LR__1479
12888                 | LR__1480
12888                 | LR__1481
12888                 | LR__1482
12888                 | LR__1483
12888                 | '  
12888                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
12888     52 00 00 FF 
1288c     50 E4 05 F1 | 	add	objptr, ##42064
12890     F2 20 02 FB | 	rdlong	local02, objptr
12894     52 00 00 FF 
12898     50 E4 85 F1 | 	sub	objptr, ##42064
1289c     01 20 56 F2 | 	cmps	local02, #1 wc
128a0     90 00 90 CD |  if_b	jmp	#LR__1484
128a4     52 00 00 FF 
128a8     50 E4 05 F1 | 	add	objptr, ##42064
128ac     F2 24 02 FB | 	rdlong	local04, objptr
128b0     52 00 00 FF 
128b4     50 E4 85 F1 | 	sub	objptr, ##42064
128b8     12 23 02 F6 | 	mov	local03, local04
128bc     7F 22 56 F2 | 	cmps	local03, #127 wc
128c0     38 E4 05 C1 |  if_b	add	objptr, #56
128c4     F2 1E E2 CA |  if_b	rdword	local01, objptr
128c8     38 E4 85 C1 |  if_b	sub	objptr, #56
128cc     0F 27 32 C9 |  if_b	getword	local05, local01, #0
128d0     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
128d4     5C 00 90 3D |  if_ae	jmp	#LR__1484
128d8     52 00 00 FF 
128dc     50 E4 05 F1 | 	add	objptr, ##42064
128e0     F2 12 02 FB | 	rdlong	arg01, objptr
128e4     52 00 00 FF 
128e8     50 E4 85 F1 | 	sub	objptr, ##42064
128ec     38 4B B0 FD | 	call	#__system__Chr_S
128f0     FD 2A 02 F6 | 	mov	local07, result1
128f4     2D 00 00 FF 
128f8     E0 E5 05 F1 | 	add	objptr, ##23520
128fc     F2 12 02 FB | 	rdlong	arg01, objptr
12900     2D 00 00 FF 
12904     E0 E5 85 F1 | 	sub	objptr, ##23520
12908     15 15 02 F6 | 	mov	arg02, local07
1290c     A0 29 B0 FD | 	call	#__system___string_concat
12910     2D 00 00 FF 
12914     E0 E5 05 F1 | 	add	objptr, ##23520
12918     F2 FA 61 FC | 	wrlong	result1, objptr
1291c     24 00 00 FF 
12920     70 E4 05 F1 | 	add	objptr, ##18544
12924     F2 12 02 FB | 	rdlong	arg01, objptr
12928     52 00 00 FF 
1292c     50 E4 85 F1 | 	sub	objptr, ##42064
12930     E0 16 B0 FD | 	call	#_hg010b_spin2_putchar
12934                 | LR__1484
12934                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
12934     52 00 00 FF 
12938     50 E4 05 F1 | 	add	objptr, ##42064
1293c     F2 20 02 FB | 	rdlong	local02, objptr
12940     52 00 00 FF 
12944     50 E4 85 F1 | 	sub	objptr, ##42064
12948     01 20 56 F2 | 	cmps	local02, #1 wc
1294c     D0 00 90 CD |  if_b	jmp	#LR__1485
12950     52 00 00 FF 
12954     50 E4 05 F1 | 	add	objptr, ##42064
12958     F2 24 02 FB | 	rdlong	local04, objptr
1295c     52 00 00 FF 
12960     50 E4 85 F1 | 	sub	objptr, ##42064
12964     12 23 02 F6 | 	mov	local03, local04
12968     7F 22 56 F2 | 	cmps	local03, #127 wc
1296c     B0 00 90 3D |  if_ae	jmp	#LR__1485
12970     38 E4 05 F1 | 	add	objptr, #56
12974     F2 1E E2 FA | 	rdword	local01, objptr
12978     38 E4 85 F1 | 	sub	objptr, #56
1297c     0F 27 32 F9 | 	getword	local05, local01, #0
12980     FE 26 0E F2 | 	cmp	local05, #254 wz
12984     50 00 00 AF 
12988     A4 E5 05 A1 |  if_e	add	objptr, ##41380
1298c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
12990     50 00 00 AF 
12994     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
12998     16 2F 02 A6 |  if_e	mov	local09, local08
1299c     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
129a0     7C 00 90 5D |  if_ne	jmp	#LR__1485
129a4     04 00 00 FF 
129a8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
129ac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
129b0     04 00 00 FF 
129b4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
129b8     56 00 00 FF 
129bc     44 22 06 F6 | 	mov	local03, ##44100
129c0     0E 24 C6 F9 | 	decod	local04, #14
129c4     00 26 06 F6 | 	mov	local05, #0
129c8     03 00 00 FF 
129cc     DE 1E 06 F6 | 	mov	local01, ##1758
129d0     07 12 06 F6 | 	mov	arg01, #7
129d4     56 00 00 FF 
129d8     44 16 06 F6 | 	mov	arg03, ##44100
129dc     0E 18 C6 F9 | 	decod	arg04, #14
129e0     00 1A 06 F6 | 	mov	arg05, #0
129e4     03 00 00 FF 
129e8     DE 1C 06 F6 | 	mov	arg06, ##1758
129ec     0B 00 00 FF 
129f0     C0 E4 05 F1 | 	add	objptr, ##5824
129f4     28 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
129f8     0B 00 00 FF 
129fc     C0 E4 85 F1 | 	sub	objptr, ##5824
12a00     2C 13 06 F6 | 	mov	arg01, #300
12a04     40 2B B0 FD | 	call	#__system___waitms
12a08     00 12 06 F6 | 	mov	arg01, #0
12a0c     0B 00 00 FF 
12a10     C0 E4 05 F1 | 	add	objptr, ##5824
12a14     58 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12a18     0B 00 00 FF 
12a1c     C0 E4 85 F1 | 	sub	objptr, ##5824
12a20                 | LR__1485
12a20                 | '  
12a20                 | '   'tab
12a20                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
12a20     52 00 00 FF 
12a24     48 E4 05 F1 | 	add	objptr, ##42056
12a28     F2 20 02 FB | 	rdlong	local02, objptr
12a2c     52 00 00 FF 
12a30     48 E4 85 F1 | 	sub	objptr, ##42056
12a34     10 21 E2 F8 | 	getbyte	local02, local02, #0
12a38     2B 20 0E F2 | 	cmp	local02, #43 wz
12a3c     B4 00 90 5D |  if_ne	jmp	#LR__1486
12a40     38 E4 05 F1 | 	add	objptr, #56
12a44     F2 24 E2 FA | 	rdword	local04, objptr
12a48     38 E4 85 F1 | 	sub	objptr, #56
12a4c     12 23 32 F9 | 	getword	local03, local04, #0
12a50     F0 22 16 F2 | 	cmp	local03, #240 wc
12a54     9C 00 90 CD |  if_b	jmp	#LR__1486
12a58     50 00 00 FF 
12a5c     A4 E5 05 F1 | 	add	objptr, ##41380
12a60     F2 1E 02 FB | 	rdlong	local01, objptr
12a64     50 00 00 FF 
12a68     A4 E5 85 F1 | 	sub	objptr, ##41380
12a6c     0F 27 02 F6 | 	mov	local05, local01
12a70     01 26 0E F2 | 	cmp	local05, #1 wz
12a74     7C 00 90 5D |  if_ne	jmp	#LR__1486
12a78     04 00 00 FF 
12a7c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12a80     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12a84     04 00 00 FF 
12a88     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12a8c     56 00 00 FF 
12a90     44 22 06 F6 | 	mov	local03, ##44100
12a94     0E 24 C6 F9 | 	decod	local04, #14
12a98     00 26 06 F6 | 	mov	local05, #0
12a9c     03 00 00 FF 
12aa0     DE 1E 06 F6 | 	mov	local01, ##1758
12aa4     00 12 06 F6 | 	mov	arg01, #0
12aa8     56 00 00 FF 
12aac     44 16 06 F6 | 	mov	arg03, ##44100
12ab0     0E 18 C6 F9 | 	decod	arg04, #14
12ab4     00 1A 06 F6 | 	mov	arg05, #0
12ab8     03 00 00 FF 
12abc     DE 1C 06 F6 | 	mov	arg06, ##1758
12ac0     0B 00 00 FF 
12ac4     C0 E4 05 F1 | 	add	objptr, ##5824
12ac8     54 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12acc     0B 00 00 FF 
12ad0     C0 E4 85 F1 | 	sub	objptr, ##5824
12ad4     2C 13 06 F6 | 	mov	arg01, #300
12ad8     6C 2A B0 FD | 	call	#__system___waitms
12adc     00 12 06 F6 | 	mov	arg01, #0
12ae0     0B 00 00 FF 
12ae4     C0 E4 05 F1 | 	add	objptr, ##5824
12ae8     84 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12aec     0B 00 00 FF 
12af0     C0 E4 85 F1 | 	sub	objptr, ##5824
12af4                 | LR__1486
12af4                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
12af4     52 00 00 FF 
12af8     48 E4 05 F1 | 	add	objptr, ##42056
12afc     F2 20 02 FB | 	rdlong	local02, objptr
12b00     52 00 00 FF 
12b04     48 E4 85 F1 | 	sub	objptr, ##42056
12b08     10 21 E2 F8 | 	getbyte	local02, local02, #0
12b0c     2B 20 0E F2 | 	cmp	local02, #43 wz
12b10     AC 00 90 5D |  if_ne	jmp	#LR__1489
12b14     38 E4 05 F1 | 	add	objptr, #56
12b18     F2 24 E2 FA | 	rdword	local04, objptr
12b1c     38 E4 85 F1 | 	sub	objptr, #56
12b20     12 23 32 F9 | 	getword	local03, local04, #0
12b24     F0 22 16 F2 | 	cmp	local03, #240 wc
12b28     94 00 90 3D |  if_ae	jmp	#LR__1489
12b2c     38 E4 05 F1 | 	add	objptr, #56
12b30     F2 20 E2 FA | 	rdword	local02, objptr
12b34     10 23 52 F6 | 	abs	local03, local02 wc
12b38     11 23 42 F8 | 	getnib	local03, local03, #0
12b3c     11 23 82 F6 | 	negc	local03, local03
12b40     11 25 52 F6 | 	abs	local04, local03 wc
12b44     01 24 46 F0 | 	shr	local04, #1
12b48     12 25 82 F6 | 	negc	local04, local04
12b4c     52 00 00 FF 
12b50     1C E4 05 F1 | 	add	objptr, ##42012
12b54     F2 24 62 FC | 	wrlong	local04, objptr
12b58     12 31 02 F6 | 	mov	local10, local04
12b5c     52 00 00 FF 
12b60     54 E4 85 F1 | 	sub	objptr, ##42068
12b64                 | LR__1487
12b64     08 30 56 F2 | 	cmps	local10, #8 wc
12b68     54 00 90 3D |  if_ae	jmp	#LR__1488
12b6c     2D 00 00 FF 
12b70     E0 E5 05 F1 | 	add	objptr, ##23520
12b74     F2 12 02 FB | 	rdlong	arg01, objptr
12b78     2D 00 00 FF 
12b7c     E0 E5 85 F1 | 	sub	objptr, ##23520
12b80     27 01 00 FF 
12b84     77 25 06 F6 | 	mov	local04, ##@LR__4382
12b88     12 15 02 F6 | 	mov	arg02, local04
12b8c     20 27 B0 FD | 	call	#__system___string_concat
12b90     2D 00 00 FF 
12b94     E0 E5 05 F1 | 	add	objptr, ##23520
12b98     F2 FA 61 FC | 	wrlong	result1, objptr
12b9c     2D 00 00 FF 
12ba0     E0 E5 85 F1 | 	sub	objptr, ##23520
12ba4     27 01 00 FF 
12ba8     79 13 06 F6 | 	mov	arg01, ##@LR__4383
12bac     80 16 B0 FD | 	call	#_hg010b_spin2_write
12bb0     18 23 02 F6 | 	mov	local03, local10
12bb4     01 22 06 F1 | 	add	local03, #1
12bb8     11 31 02 F6 | 	mov	local10, local03
12bbc     A4 FF 9F FD | 	jmp	#LR__1487
12bc0                 | LR__1488
12bc0                 | LR__1489
12bc0                 | '  
12bc0                 | '   'backspace
12bc0                 | '   if (key3 and 255) = 42 then 
12bc0     52 00 00 FF 
12bc4     48 E4 05 F1 | 	add	objptr, ##42056
12bc8     F2 20 02 FB | 	rdlong	local02, objptr
12bcc     52 00 00 FF 
12bd0     48 E4 85 F1 | 	sub	objptr, ##42056
12bd4     10 21 E2 F8 | 	getbyte	local02, local02, #0
12bd8     2A 20 0E F2 | 	cmp	local02, #42 wz
12bdc     D4 00 90 5D |  if_ne	jmp	#LR__1494
12be0                 | '       if v.cursor_x>4 then 
12be0     38 E4 05 F1 | 	add	objptr, #56
12be4     F2 20 E2 FA | 	rdword	local02, objptr
12be8     38 E4 85 F1 | 	sub	objptr, #56
12bec     05 20 16 F2 | 	cmp	local02, #5 wc
12bf0     9C 00 90 CD |  if_b	jmp	#LR__1492
12bf4     2D 00 00 FF 
12bf8     E0 E5 05 F1 | 	add	objptr, ##23520
12bfc     F2 26 02 FB | 	rdlong	local05, objptr
12c00     2D 00 00 FF 
12c04     E0 E5 85 F1 | 	sub	objptr, ##23520
12c08     13 13 02 F6 | 	mov	arg01, local05
12c0c     09 33 02 F6 | 	mov	local11, arg01
12c10     97 06 48 FB | 	callpa	#(@LR__1491-@LR__1490)>>2,fcache_load_ptr_
12c14                 | LR__1490
12c14     19 FB C9 FA | 	rdbyte	result1, local11 wz
12c18     01 32 06 51 |  if_ne	add	local11, #1
12c1c     F4 FF 9F 5D |  if_ne	jmp	#LR__1490
12c20                 | LR__1491
12c20     09 33 82 F1 | 	sub	local11, arg01
12c24     19 15 02 F6 | 	mov	arg02, local11
12c28     01 14 86 F1 | 	sub	arg02, #1
12c2c     13 13 02 F6 | 	mov	arg01, local05
12c30     30 46 B0 FD | 	call	#__system__Left_S
12c34     2D 00 00 FF 
12c38     E0 E5 05 F1 | 	add	objptr, ##23520
12c3c     F2 FA 61 FC | 	wrlong	result1, objptr
12c40     2D 00 00 FF 
12c44     A8 E5 85 F1 | 	sub	objptr, ##23464
12c48     F2 12 E2 FA | 	rdword	arg01, objptr
12c4c     02 12 86 F1 | 	sub	arg01, #2
12c50     02 E4 05 F1 | 	add	objptr, #2
12c54     F2 14 C2 FA | 	rdbyte	arg02, objptr
12c58     3A E4 85 F1 | 	sub	objptr, #58
12c5c     6C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12c60     20 12 06 F6 | 	mov	arg01, #32
12c64     AC 13 B0 FD | 	call	#_hg010b_spin2_putchar
12c68     38 E4 05 F1 | 	add	objptr, #56
12c6c     F2 12 E2 FA | 	rdword	arg01, objptr
12c70     02 12 86 F1 | 	sub	arg01, #2
12c74     02 E4 05 F1 | 	add	objptr, #2
12c78     F2 24 C2 FA | 	rdbyte	local04, objptr
12c7c     3A E4 85 F1 | 	sub	objptr, #58
12c80     12 23 E2 F8 | 	getbyte	local03, local04, #0
12c84     11 15 02 F6 | 	mov	arg02, local03
12c88     40 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12c8c     24 00 90 FD | 	jmp	#LR__1493
12c90                 | LR__1492
12c90     27 01 00 FF 
12c94     7B 21 06 F6 | 	mov	local02, ##@LR__4384
12c98     2D 00 00 FF 
12c9c     E0 E5 05 F1 | 	add	objptr, ##23520
12ca0     F2 20 62 FC | 	wrlong	local02, objptr
12ca4     2D 00 00 FF 
12ca8     A8 E5 85 F1 | 	sub	objptr, ##23464
12cac     F2 08 58 FC | 	wrword	#4, objptr
12cb0     38 E4 85 F1 | 	sub	objptr, #56
12cb4                 | LR__1493
12cb4                 | LR__1494
12cb4                 | '    
12cb4                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
12cb4                 | '  
12cb4                 | '   if key4=key_enter then 
12cb4     52 00 00 FF 
12cb8     50 E4 05 F1 | 	add	objptr, ##42064
12cbc     F2 28 02 FB | 	rdlong	local06, objptr
12cc0     52 00 00 FF 
12cc4     50 E4 85 F1 | 	sub	objptr, ##42064
12cc8     8D 28 0E F2 | 	cmp	local06, #141 wz
12ccc     50 00 90 5D |  if_ne	jmp	#LR__1495
12cd0     BC 16 B0 FD | 	call	#_hg010b_spin2_crlf
12cd4     44 DD BE FD | 	call	#_interpret
12cd8     27 01 00 FF 
12cdc     7C 21 06 F6 | 	mov	local02, ##@LR__4385
12ce0     2D 00 00 FF 
12ce4     E0 E5 05 F1 | 	add	objptr, ##23520
12ce8     F2 20 62 FC | 	wrlong	local02, objptr
12cec     1A FA 61 FD | 	getct	result1
12cf0     24 00 00 FF 
12cf4     78 E4 05 F1 | 	add	objptr, ##18552
12cf8     F2 24 02 FB | 	rdlong	local04, objptr
12cfc     12 23 02 F6 | 	mov	local03, local04
12d00     11 FB 81 F1 | 	sub	result1, local03
12d04     F2 FA 61 FC | 	wrlong	result1, objptr
12d08     14 E4 85 F1 | 	sub	objptr, #20
12d0c     F2 00 68 FC | 	wrlong	#0, objptr
12d10     08 E4 05 F1 | 	add	objptr, #8
12d14     F2 00 68 FC | 	wrlong	#0, objptr
12d18     52 00 00 FF 
12d1c     4C E4 85 F1 | 	sub	objptr, ##42060
12d20                 | LR__1495
12d20     52 00 00 FF 
12d24     48 E4 05 F1 | 	add	objptr, ##42056
12d28     F2 00 68 FC | 	wrlong	#0, objptr
12d2c     52 00 00 FF 
12d30     48 E4 85 F1 | 	sub	objptr, ##42056
12d34     8C F6 9F FD | 	jmp	#LR__1470
12d38     A7 F0 03 F6 | 	mov	ptra, fp
12d3c     B2 00 A0 FD | 	call	#popregs_
12d40                 | _program_ret
12d40     2D 00 64 FD | 	ret
12d44                 | 
12d44                 | ' '' this is not a main program.
12d44                 | ' 
12d44                 | ' '****************************************************************************************************************
12d44                 | ' '                                                                                                             	*
12d44                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
12d44                 | ' '                                                                                                            	*
12d44                 | ' ' mode - mode #, see below											*
12d44                 | ' ' base - HDMI base pin												*
12d44                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
12d44                 | ' '														*
12d44                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
12d44                 | ' '' set bit #15 for custom timings														*
12d44                 | ' '' p - 1 - psram, 0 - hub											*
12d44                 | ' '' t - 1 - graphics, 0 - text											*
12d44                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
12d44                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
12d44                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
12d44                 | ' '														*
12d44                 | ' '****************************************************************************************************************
12d44                 | ' 
12d44                 | ' pub start(base,mb):result |i
12d44                 | _hg010b_spin2_start
12d44                 | ' 
12d44                 | ' '--------------------------- initialize pointers and variables
12d44                 | ' 
12d44                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
12d44     30 E4 05 F1 | 	add	objptr, #48
12d48     F2 FA 01 F6 | 	mov	result1, objptr
12d4c     28 E4 85 F1 | 	sub	objptr, #40
12d50     F2 FA 61 FC | 	wrlong	result1, objptr
12d54                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
12d54                 | ' hdmibase:=base							' HDMI base pin, 8*n
12d54     18 E4 05 F1 | 	add	objptr, #24
12d58     F2 12 62 FC | 	wrlong	arg01, objptr
12d5c                 | ' mailbox_ptr:=mb		
12d5c     04 E4 05 F1 | 	add	objptr, #4
12d60     F2 14 62 FC | 	wrlong	arg02, objptr
12d64                 | ' mailbox0:=mb				' PSRAM mailbox pointer
12d64     C1 E5 05 F1 | 	add	objptr, #449
12d68     F2 14 62 FC | 	wrlong	arg02, objptr
12d6c                 | ' sprite_ptr:=@spr1ptr
12d6c     D8 E4 85 F1 | 	sub	objptr, #216
12d70     F2 FA 01 F6 | 	mov	result1, objptr
12d74     E5 E4 85 F1 | 	sub	objptr, #229
12d78     F2 FA 61 FC | 	wrlong	result1, objptr
12d7c                 | ' 
12d7c                 | ' 		'
12d7c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
12d7c     E5 E4 05 F1 | 	add	objptr, #229
12d80     F2 FA 01 FB | 	rdlong	result1, objptr
12d84     D0 FA 05 F1 | 	add	result1, #208
12d88     FD 10 58 FC | 	wrword	#8, result1
12d8c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
12d8c     F2 16 02 FB | 	rdlong	arg03, objptr
12d90     D2 16 06 F1 | 	add	arg03, #210
12d94     0B 21 58 FC | 	wrword	#16, arg03
12d98                 | ' leading_spaces:=0				'
12d98     A5 E5 05 F1 | 	add	objptr, #421
12d9c     F2 00 68 FC | 	wrlong	#0, objptr
12da0                 | ' 
12da0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
12da0     99 E4 85 F1 | 	sub	objptr, #153
12da4     00 00 A0 FF 
12da8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
12dac                 | ' emptydl[1]:=0
12dac     04 E4 05 F1 | 	add	objptr, #4
12db0     F2 00 68 FC | 	wrlong	#0, objptr
12db4                 | ' 
12db4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
12db4                 | ' 
12db4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
12db4     28 E5 85 F1 | 	sub	objptr, #296
12db8     F2 02 68 FC | 	wrlong	#1, objptr
12dbc                 | ' if s_debug<>0
12dbc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
12dbc     20 00 80 FF 
12dc0     F2 00 68 FC | 	wrlong	##16384, objptr
12dc4     F5 E4 85 F1 | 	sub	objptr, #245
12dc8                 | ' setmode()							' set the mode, see below
12dc8     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
12dcc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
12dcc     45 E4 05 F1 | 	add	objptr, #69
12dd0     F2 FA 01 F6 | 	mov	result1, objptr
12dd4     35 E4 85 F1 | 	sub	objptr, #53
12dd8     F2 FA 61 FC | 	wrlong	result1, objptr
12ddc                 | ' cursor_ptr:=@cursor_x						
12ddc     28 E4 05 F1 | 	add	objptr, #40
12de0     F2 16 02 F6 | 	mov	arg03, objptr
12de4     2C E4 85 F1 | 	sub	objptr, #44
12de8     F2 16 62 FC | 	wrlong	arg03, objptr
12dec                 | ' fontnum:=0  							' start with a PC type font 
12dec     55 E4 05 F1 | 	add	objptr, #85
12df0     F2 00 68 FC | 	wrlong	#0, objptr
12df4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
12df4     1C E4 05 F1 | 	add	objptr, #28
12df8     F2 12 02 F6 | 	mov	arg01, objptr
12dfc     7D E4 85 F1 | 	sub	objptr, #125
12e00     10 00 00 FF 
12e04     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
12e08     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
12e0c     10 00 00 FF 
12e10     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
12e14     10 16 06 F6 | 	mov	arg03, #16
12e18     58 23 B0 FD | 	call	#__system____builtin_memmove
12e1c                 | ' leading_spaces:=0
12e1c     01 00 00 FF 
12e20     B2 E4 05 F1 | 	add	objptr, ##690
12e24     F2 00 68 FC | 	wrlong	#0, objptr
12e28     01 00 00 FF 
12e2c     B2 E4 85 F1 | 	sub	objptr, ##690
12e30                 | ' '---------------------------- initialize a cursor (MSDOS type)
12e30                 | ' 
12e30                 | ' initcursor(154)
12e30     9A 12 06 F6 | 	mov	arg01, #154
12e34     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
12e38                 | ' 
12e38                 | ' '---------------------------- start the cog
12e38                 | ' 
12e38                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
12e38     10 00 00 FF 
12e3c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
12e40     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
12e44     10 00 00 FF 
12e48     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
12e4c     10 E4 05 F1 | 	add	objptr, #16
12e50     10 FA 05 F6 | 	mov	result1, #16
12e54     28 E4 61 FD | 	setq	objptr
12e58     0A FB F1 FC | 	coginit	result1, arg02 wc
12e5c     01 FA 65 C6 |  if_b	neg	result1, #1
12e60     1C E4 05 F1 | 	add	objptr, #28
12e64     F2 FA 61 FC | 	wrlong	result1, objptr
12e68     2C E4 85 F1 | 	sub	objptr, #44
12e6c                 | ' waitms(40)							' wait for stabilize
12e6c     28 12 06 F6 | 	mov	arg01, #40
12e70     D4 26 B0 FD | 	call	#__system___waitms
12e74                 | ' return cog							' return the driver's cog #
12e74     2C E4 05 F1 | 	add	objptr, #44
12e78     F2 FA 01 FB | 	rdlong	result1, objptr
12e7c     2C E4 85 F1 | 	sub	objptr, #44
12e80                 | _hg010b_spin2_start_ret
12e80     2D 00 64 FD | 	ret
12e84                 | 
12e84                 | ' 
12e84                 | ' 
12e84                 | ' '**************************************************************************************************************** 
12e84                 | ' '                                                                                                             	*
12e84                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
12e84                 | ' '  Mode number - see start() above or bits below								*
12e84                 | ' '                                                                                                             	*
12e84                 | ' '****************************************************************************************************************
12e84                 | ' 
12e84                 | ' '---------------------------- initialize a cursor (MSDOS type)
12e84                 | ' pub initcursor(color) |i
12e84                 | _hg010b_spin2_initcursor
12e84     03 4A 05 F6 | 	mov	COUNT_, #3
12e88     A8 00 A0 FD | 	call	#pushregs_
12e8c     09 1F 02 F6 | 	mov	local01, arg01
12e90                 | ' 
12e90                 | ' cursor_x:=0							' place the cursor at 0:0
12e90     38 E4 05 F1 | 	add	objptr, #56
12e94     F2 00 58 FC | 	wrword	#0, objptr
12e98                 | ' cursor_y:=0
12e98     02 E4 05 F1 | 	add	objptr, #2
12e9c     F2 00 48 FC | 	wrbyte	#0, objptr
12ea0                 | ' repeat i from 0 to 111
12ea0     00 20 06 F6 | 	mov	local02, #0
12ea4     F8 E5 05 F1 | 	add	objptr, #504
12ea8     97 1A 48 FB | 	callpa	#(@LR__1502-@LR__1500)>>2,fcache_load_ptr_
12eac                 | LR__1500
12eac                 | '   cursor[i]:=0
12eac     10 23 02 F6 | 	mov	local03, local02
12eb0     F2 22 02 F1 | 	add	local03, objptr
12eb4     11 01 48 FC | 	wrbyte	#0, local03
12eb8     01 20 06 F1 | 	add	local02, #1
12ebc     70 20 56 F2 | 	cmps	local02, #112 wc
12ec0     E8 FF 9F CD |  if_b	jmp	#LR__1500
12ec4                 | ' repeat i from 112 to 127
12ec4     70 20 06 F6 | 	mov	local02, #112
12ec8                 | LR__1501
12ec8                 | '   cursor[i]:=color  
12ec8     10 23 02 F6 | 	mov	local03, local02
12ecc     F2 22 02 F1 | 	add	local03, objptr
12ed0     11 1F 42 FC | 	wrbyte	local01, local03
12ed4     01 20 06 F1 | 	add	local02, #1
12ed8     80 20 16 F2 | 	cmp	local02, #128 wc
12edc     E8 FF 9F CD |  if_b	jmp	#LR__1501
12ee0                 | LR__1502
12ee0                 | ' 'repeat i from 0 to 127
12ee0                 | ' '  if ((i/8)//2)
12ee0                 | ' '    cursor[i]:=15
12ee0                 | ' '  else
12ee0                 | ' '    cursor[i]:=0
12ee0                 | ' '  if i>=120    
12ee0                 | ' '    cursor[i]:=40
12ee0                 | ' setspriteptr(17,@cursor)
12ee0     F2 14 02 F6 | 	mov	arg02, objptr
12ee4     01 00 00 FF 
12ee8     32 E4 85 F1 | 	sub	objptr, ##562
12eec     11 12 06 F6 | 	mov	arg01, #17
12ef0     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
12ef4                 | ' setspritesize(17,8,16)
12ef4     11 12 06 F6 | 	mov	arg01, #17
12ef8     08 14 06 F6 | 	mov	arg02, #8
12efc     10 16 06 F6 | 	mov	arg03, #16
12f00     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
12f04                 | ' setspritepos(17,0,0)
12f04     11 12 06 F6 | 	mov	arg01, #17
12f08     00 14 06 F6 | 	mov	arg02, #0
12f0c     00 16 06 F6 | 	mov	arg03, #0
12f10     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
12f14     A7 F0 03 F6 | 	mov	ptra, fp
12f18     B2 00 A0 FD | 	call	#popregs_
12f1c                 | _hg010b_spin2_initcursor_ret
12f1c     2D 00 64 FD | 	ret
12f20                 | 
12f20                 | ' 
12f20                 | '  
12f20                 | ' pub setcursorcolor(color) |i
12f20                 | _hg010b_spin2_setcursorcolor
12f20                 | ' 
12f20                 | ' 
12f20                 | ' repeat i from 0 to 111
12f20     00 00 06 F6 | 	mov	_var01, #0
12f24     01 00 00 FF 
12f28     32 E4 05 F1 | 	add	objptr, ##562
12f2c     97 1A 48 FB | 	callpa	#(@LR__1512-@LR__1510)>>2,fcache_load_ptr_
12f30                 | LR__1510
12f30                 | '   cursor[i]:=0
12f30     00 03 02 F6 | 	mov	_var02, _var01
12f34     F2 02 02 F1 | 	add	_var02, objptr
12f38     01 01 48 FC | 	wrbyte	#0, _var02
12f3c     01 00 06 F1 | 	add	_var01, #1
12f40     70 00 56 F2 | 	cmps	_var01, #112 wc
12f44     E8 FF 9F CD |  if_b	jmp	#LR__1510
12f48                 | ' repeat i from 112 to 127
12f48     70 00 06 F6 | 	mov	_var01, #112
12f4c                 | LR__1511
12f4c                 | '   cursor[i]:=color  
12f4c     00 03 02 F6 | 	mov	_var02, _var01
12f50     F2 02 02 F1 | 	add	_var02, objptr
12f54     01 13 42 FC | 	wrbyte	arg01, _var02
12f58     01 00 06 F1 | 	add	_var01, #1
12f5c     80 00 16 F2 | 	cmp	_var01, #128 wc
12f60     E8 FF 9F CD |  if_b	jmp	#LR__1511
12f64                 | LR__1512
12f64     01 00 00 FF 
12f68     32 E4 85 F1 | 	sub	objptr, ##562
12f6c                 | _hg010b_spin2_setcursorcolor_ret
12f6c     2D 00 64 FD | 	ret
12f70                 | 
12f70                 | '  
12f70                 | ' 
12f70                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
12f70                 | _hg010b_spin2_setmode
12f70     02 4A 05 F6 | 	mov	COUNT_, #2
12f74     A8 00 A0 FD | 	call	#pushregs_
12f78                 | ' 
12f78                 | ' 
12f78                 | ' dl_ptr:=@emptydl[0]
12f78     01 00 00 FF 
12f7c     19 E4 05 F1 | 	add	objptr, ##537
12f80     F2 60 02 F6 | 	mov	muldivb_, objptr
12f84     FD E5 85 F1 | 	sub	objptr, #509
12f88     F2 60 62 FC | 	wrlong	muldivb_, objptr
12f8c                 | ' 
12f8c                 | ' if cog>0 
12f8c     10 E4 05 F1 | 	add	objptr, #16
12f90     F2 60 02 FB | 	rdlong	muldivb_, objptr
12f94     2C E4 85 F1 | 	sub	objptr, #44
12f98     01 60 56 F2 | 	cmps	muldivb_, #1 wc
12f9c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
12f9c     01 12 06 36 |  if_ae	mov	arg01, #1
12fa0     60 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
12fa4                 | ' xres:=1024
12fa4     01 00 00 FF 
12fa8     22 E4 05 F1 | 	add	objptr, ##546
12fac     02 00 80 FF 
12fb0     F2 00 68 FC | 	wrlong	##1024, objptr
12fb4                 | ' yres:=576  
12fb4     04 E4 05 F1 | 	add	objptr, #4
12fb8     01 00 80 FF 
12fbc     F2 80 68 FC | 	wrlong	##576, objptr
12fc0                 | ' ppl:=(timings[3])
12fc0     10 00 00 FF 
12fc4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
12fc8     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
12fcc     51 E5 85 F1 | 	sub	objptr, #337
12fd0     F2 60 62 FC | 	wrlong	muldivb_, objptr
12fd4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
12fd4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
12fd8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
12fdc     01 1E 66 F0 | 	shl	local01, #1
12fe0     80 E4 85 F1 | 	sub	objptr, #128
12fe4     F2 1E 62 FC | 	wrlong	local01, objptr
12fe8                 | ' cpl1:=cpl '' todo remove
12fe8     04 E4 05 F1 | 	add	objptr, #4
12fec     F2 1E 62 FC | 	wrlong	local01, objptr
12ff0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
12ff0     02 00 00 FF 
12ff4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
12ff8     41 E4 85 F1 | 	sub	objptr, #65
12ffc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13000                 | ' repeat i from 0 to 3
13000     00 20 06 F6 | 	mov	local02, #0
13004     02 00 00 FF 
13008     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1300c     08 E4 05 F1 | 	add	objptr, #8
13010     97 20 48 FB | 	callpa	#(@LR__1521-@LR__1520)>>2,fcache_load_ptr_
13014                 | LR__1520
13014                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
13014     10 1F 02 F6 | 	mov	local01, local02
13018     02 1E 66 F0 | 	shl	local01, #2
1301c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
13020     F2 60 02 FB | 	rdlong	muldivb_, objptr
13024     11 60 66 F0 | 	shl	muldivb_, #17
13028     0F 1F 02 FB | 	rdlong	local01, local01
1302c     30 1F 02 F1 | 	add	local01, muldivb_
13030     80 40 38 FF 
13034     00 1E 06 F1 | 	add	local01, ##1887502336
13038     10 61 02 F6 | 	mov	muldivb_, local02
1303c     02 60 66 F0 | 	shl	muldivb_, #2
13040     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
13044     30 1F 62 FC | 	wrlong	local01, muldivb_
13048     01 20 06 F1 | 	add	local02, #1
1304c     04 20 56 F2 | 	cmps	local02, #4 wc
13050     C0 FF 9F CD |  if_b	jmp	#LR__1520
13054                 | LR__1521
13054     20 E4 85 F1 | 	sub	objptr, #32
13058                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
13058     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1305c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
13060     14 1E 66 FC | 	wrlong	local01, #20
13064                 | ' hubset(timings[10])
13064     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
13068     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1306c     10 00 00 FF 
13070     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
13074     00 12 62 FD | 	hubset	arg01
13078                 | ' waitms(1)                                                   	' wait for stabilization
13078     01 12 06 F6 | 	mov	arg01, #1
1307c     C8 24 B0 FD | 	call	#__system___waitms
13080     10 00 00 FF 
13084     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
13088     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1308c     5D E4 05 F1 | 	add	objptr, #93
13090     F2 20 62 FC | 	wrlong	local02, objptr
13094     10 1F 52 F6 | 	abs	local01, local02 wc
13098     04 1E 46 F0 | 	shr	local01, #4
1309c     0F 1F 82 F6 | 	negc	local01, local01
130a0     9C E4 05 F1 | 	add	objptr, #156
130a4     F2 1E 62 FC | 	wrlong	local01, objptr
130a8     A4 E4 85 F1 | 	sub	objptr, #164
130ac     F2 20 02 FB | 	rdlong	local02, objptr
130b0     08 E4 05 F1 | 	add	objptr, #8
130b4     F2 1E 02 FB | 	rdlong	local01, objptr
130b8     0F 21 02 FD | 	qmul	local02, local01
130bc                 | ' lines:=timings[11]
130bc                 | ' t_lines:=lines/16
130bc                 | ' buflen:=cpl*lines						' framebuffer length in longs
130bc     29 E4 85 F1 | 	sub	objptr, #41
130c0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
130c0     19 1E C6 F9 | 	decod	local01, #25
130c4                 | ' mode_ptr:=@timings						' set pointers to timings
130c4     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
130c8                 | ' graphmode:=1024+512+192+48							' det global variable
130c8                 | ' makedl(graphmode)							' make a DL for the mode
130c8     03 00 00 FF 
130cc     F0 12 06 F6 | 	mov	arg01, ##1776
130d0     18 20 62 FD | 	getqx	local02
130d4     F2 20 62 FC | 	wrlong	local02, objptr
130d8     34 E4 85 F1 | 	sub	objptr, #52
130dc     02 20 66 F0 | 	shl	local02, #2
130e0     10 1F 82 F1 | 	sub	local01, local02
130e4     F2 1E 62 FC | 	wrlong	local01, objptr
130e8     14 E4 05 F1 | 	add	objptr, #20
130ec     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
130f0     79 E4 05 F1 | 	add	objptr, #121
130f4     03 00 80 FF 
130f8     F2 E0 69 FC | 	wrlong	##1776, objptr
130fc     8D E4 85 F1 | 	sub	objptr, #141
13100     10 00 00 FF 
13104     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
13108     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
1310c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1310c     F2 1E 02 FB | 	rdlong	local01, objptr
13110     D9 E4 05 F1 | 	add	objptr, #217
13114     F2 1E 62 FC | 	wrlong	local01, objptr
13118                 | ' s_font_ptr:=font_ptr
13118     D5 E4 85 F1 | 	sub	objptr, #213
1311c     F2 1E 02 FB | 	rdlong	local01, objptr
13120     D9 E4 05 F1 | 	add	objptr, #217
13124     F2 1E 62 FC | 	wrlong	local01, objptr
13128                 | ' s_lines:=lines
13128     80 E4 85 F1 | 	sub	objptr, #128
1312c     F2 1E 02 FB | 	rdlong	local01, objptr
13130     84 E4 05 F1 | 	add	objptr, #132
13134     F2 1E 62 FC | 	wrlong	local01, objptr
13138                 | ' s_buflen:=buflen
13138     AD E4 85 F1 | 	sub	objptr, #173
1313c     F2 1E 02 FB | 	rdlong	local01, objptr
13140     B5 E4 05 F1 | 	add	objptr, #181
13144     F2 1E 62 FC | 	wrlong	local01, objptr
13148                 | ' s_cpl:=cpl
13148     94 E4 85 F1 | 	sub	objptr, #148
1314c     F2 1E 02 FB | 	rdlong	local01, objptr
13150     90 E4 05 F1 | 	add	objptr, #144
13154     F2 1E 62 FC | 	wrlong	local01, objptr
13158                 | ' s_cpl1:=cpl
13158     90 E4 85 F1 | 	sub	objptr, #144
1315c     F2 1E 02 FB | 	rdlong	local01, objptr
13160     98 E4 05 F1 | 	add	objptr, #152
13164     F2 1E 62 FC | 	wrlong	local01, objptr
13168                 | ' st_lines:=t_lines
13168     0C E4 05 F1 | 	add	objptr, #12
1316c     F2 1E 02 FB | 	rdlong	local01, objptr
13170     04 E4 05 F1 | 	add	objptr, #4
13174     F2 1E 62 FC | 	wrlong	local01, objptr
13178                 | ' ppl:=ppl/xzoom  
13178     28 E4 85 F1 | 	sub	objptr, #40
1317c     F2 5E 02 FB | 	rdlong	muldiva_, objptr
13180     2C E4 05 F1 | 	add	objptr, #44
13184     F2 60 02 FB | 	rdlong	muldivb_, objptr
13188     01 E5 85 F1 | 	sub	objptr, #257
1318c     BA 00 A0 FD | 	call	#divide_
13190     D5 E4 05 F1 | 	add	objptr, #213
13194     F2 60 62 FC | 	wrlong	muldivb_, objptr
13198                 | ' s_ppl:=ppl
13198     1C E4 05 F1 | 	add	objptr, #28
1319c     F2 60 62 FC | 	wrlong	muldivb_, objptr
131a0     F1 E4 85 F1 | 	sub	objptr, #241
131a4                 | ' waitms(20)							' wait 
131a4     14 12 06 F6 | 	mov	arg01, #20
131a8     9C 23 B0 FD | 	call	#__system___waitms
131ac     A7 F0 03 F6 | 	mov	ptra, fp
131b0     B2 00 A0 FD | 	call	#popregs_
131b4                 | _hg010b_spin2_setmode_ret
131b4     2D 00 64 FD | 	ret
131b8                 | 
131b8                 | ' 
131b8                 | ' 
131b8                 | ' '****************************************************************************************************************
131b8                 | ' '                                                                                                             	*
131b8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
131b8                 | ' '                                                                                                             	*
131b8                 | ' '****************************************************************************************************************
131b8                 | ' 
131b8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
131b8                 | _hg010b_spin2_makedl
131b8                 | ' 
131b8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
131b8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
131b8                 | ' repeat i from 0 to 11                                                           ' clear DL
131b8     00 00 06 F6 | 	mov	_var01, #0
131bc     E9 E5 05 F1 | 	add	objptr, #489
131c0     97 0E 48 FB | 	callpa	#(@LR__1531-@LR__1530)>>2,fcache_load_ptr_
131c4                 | LR__1530
131c4                 | '   displaylist[i]:=0 
131c4     00 03 02 F6 | 	mov	_var02, _var01
131c8     02 02 66 F0 | 	shl	_var02, #2
131cc     F2 02 02 F1 | 	add	_var02, objptr
131d0     01 01 68 FC | 	wrlong	#0, _var02
131d4     01 00 06 F1 | 	add	_var01, #1
131d8     0C 00 56 F2 | 	cmps	_var01, #12 wc
131dc     E4 FF 9F CD |  if_b	jmp	#LR__1530
131e0                 | LR__1531
131e0                 | '                         ' 
131e0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
131e0     8C E5 85 F1 | 	sub	objptr, #396
131e4     F2 02 02 FB | 	rdlong	_var02, objptr
131e8     14 02 66 F0 | 	shl	_var02, #20
131ec     01 02 06 F1 | 	add	_var02, #1
131f0     04 E4 85 F1 | 	sub	objptr, #4
131f4     F2 00 02 FB | 	rdlong	_var01, objptr
131f8     02 00 66 F0 | 	shl	_var01, #2
131fc     04 00 66 F0 | 	shl	_var01, #4
13200     00 03 02 F1 | 	add	_var02, _var01
13204     90 E5 05 F1 | 	add	objptr, #400
13208     F2 02 62 FC | 	wrlong	_var02, objptr
1320c     E9 E5 85 F1 | 	sub	objptr, #489
13210                 | ' displaylist[1]:=buf_ptr<<4+%10  
13210     F2 02 02 FB | 	rdlong	_var02, objptr
13214     04 02 66 F0 | 	shl	_var02, #4
13218     02 02 06 F1 | 	add	_var02, #2
1321c     ED E5 05 F1 | 	add	objptr, #493
13220     F2 02 62 FC | 	wrlong	_var02, objptr
13224                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
13224     04 E4 85 F1 | 	sub	objptr, #4
13228     F2 02 02 F6 | 	mov	_var02, objptr
1322c     CD E5 85 F1 | 	sub	objptr, #461
13230     F2 02 62 FC | 	wrlong	_var02, objptr
13234     1C E4 85 F1 | 	sub	objptr, #28
13238                 | _hg010b_spin2_makedl_ret
13238     2D 00 64 FD | 	ret
1323c                 | 
1323c                 | ' 
1323c                 | ' 
1323c                 | ' '****************************************************************************************************************
1323c                 | ' '                                                                        					*
1323c                 | ' '  Graphic primitives                                                    					*
1323c                 | ' '                                                                        					*
1323c                 | ' '****************************************************************************************************************
1323c                 | ' 
1323c                 | ' pub setspriteptr(num,ptr)
1323c                 | _hg010b_spin2_setspriteptr
1323c                 | ' long[@spr1ptr+12*num]:=ptr
1323c     0D E5 05 F1 | 	add	objptr, #269
13240     F2 00 02 F6 | 	mov	_var01, objptr
13244     09 03 02 F6 | 	mov	_var02, arg01
13248     01 02 66 F0 | 	shl	_var02, #1
1324c     09 03 02 F1 | 	add	_var02, arg01
13250     02 02 66 F0 | 	shl	_var02, #2
13254     01 01 02 F1 | 	add	_var01, _var02
13258     00 15 62 FC | 	wrlong	arg02, _var01
1325c     0D E5 85 F1 | 	sub	objptr, #269
13260                 | _hg010b_spin2_setspriteptr_ret
13260     2D 00 64 FD | 	ret
13264                 | 
13264                 | ' 
13264                 | ' pub setspritepos(num,x,y)
13264                 | _hg010b_spin2_setspritepos
13264                 | ' word[@spr1ptr+12*num+4]:=x
13264     0D E5 05 F1 | 	add	objptr, #269
13268     F2 00 02 F6 | 	mov	_var01, objptr
1326c     09 03 02 F6 | 	mov	_var02, arg01
13270     01 02 66 F0 | 	shl	_var02, #1
13274     09 03 02 F1 | 	add	_var02, arg01
13278     02 02 66 F0 | 	shl	_var02, #2
1327c     01 01 02 F1 | 	add	_var01, _var02
13280     04 00 06 F1 | 	add	_var01, #4
13284     00 15 52 FC | 	wrword	arg02, _var01
13288                 | ' word[@spr1ptr+12*num+6]:=y
13288     F2 00 02 F6 | 	mov	_var01, objptr
1328c     09 03 02 F6 | 	mov	_var02, arg01
13290     01 02 66 F0 | 	shl	_var02, #1
13294     09 03 02 F1 | 	add	_var02, arg01
13298     02 02 66 F0 | 	shl	_var02, #2
1329c     01 01 02 F1 | 	add	_var01, _var02
132a0     06 00 06 F1 | 	add	_var01, #6
132a4     00 17 52 FC | 	wrword	arg03, _var01
132a8     0D E5 85 F1 | 	sub	objptr, #269
132ac                 | _hg010b_spin2_setspritepos_ret
132ac     2D 00 64 FD | 	ret
132b0                 | 
132b0                 | ' 
132b0                 | ' pub setspritesize(num,w,h)
132b0                 | _hg010b_spin2_setspritesize
132b0                 | ' word[@spr1ptr+12*num+8]:=w
132b0     0D E5 05 F1 | 	add	objptr, #269
132b4     F2 00 02 F6 | 	mov	_var01, objptr
132b8     09 03 02 F6 | 	mov	_var02, arg01
132bc     01 02 66 F0 | 	shl	_var02, #1
132c0     09 03 02 F1 | 	add	_var02, arg01
132c4     02 02 66 F0 | 	shl	_var02, #2
132c8     01 01 02 F1 | 	add	_var01, _var02
132cc     08 00 06 F1 | 	add	_var01, #8
132d0     00 15 52 FC | 	wrword	arg02, _var01
132d4                 | ' word[@spr1ptr+12*num+10]:=h
132d4     F2 00 02 F6 | 	mov	_var01, objptr
132d8     09 03 02 F6 | 	mov	_var02, arg01
132dc     01 02 66 F0 | 	shl	_var02, #1
132e0     09 03 02 F1 | 	add	_var02, arg01
132e4     02 02 66 F0 | 	shl	_var02, #2
132e8     01 01 02 F1 | 	add	_var01, _var02
132ec     0A 00 06 F1 | 	add	_var01, #10
132f0     00 17 52 FC | 	wrword	arg03, _var01
132f4     0D E5 85 F1 | 	sub	objptr, #269
132f8                 | _hg010b_spin2_setspritesize_ret
132f8     2D 00 64 FD | 	ret
132fc                 | 
132fc                 | ' 
132fc                 | ' 
132fc                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
132fc                 | ' 
132fc                 | ' 
132fc                 | ' pub putpixel(x,y,c)
132fc                 | _hg010b_spin2_putpixel
132fc     04 4A 05 F6 | 	mov	COUNT_, #4
13300     A8 00 A0 FD | 	call	#pushregs_
13304     09 1F 02 F6 | 	mov	local01, arg01
13308                 | ' 
13308                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
13308     00 20 06 F6 | 	mov	local02, #0
1330c     00 1E 56 F2 | 	cmps	local01, #0 wc
13310     01 20 66 36 |  if_ae	neg	local02, #1
13314     E5 E4 05 F1 | 	add	objptr, #229
13318     F2 1A 02 FB | 	rdlong	arg05, objptr
1331c     02 1A 66 F0 | 	shl	arg05, #2
13320     0D 1F 52 F2 | 	cmps	local01, arg05 wc
13324     11 23 A2 F1 | 	subx	local03, local03
13328     11 21 02 F5 | 	and	local02, local03
1332c     00 22 06 F6 | 	mov	local03, #0
13330     00 14 56 F2 | 	cmps	arg02, #0 wc
13334     01 22 66 36 |  if_ae	neg	local03, #1
13338     11 21 02 F5 | 	and	local02, local03
1333c     04 E4 85 F1 | 	sub	objptr, #4
13340     F2 22 02 FB | 	rdlong	local03, objptr
13344     E1 E4 85 F1 | 	sub	objptr, #225
13348     11 15 52 F2 | 	cmps	arg02, local03 wc
1334c     12 25 A2 F1 | 	subx	local04, local04
13350     12 21 CA F7 | 	test	local02, local04 wz
13354     48 00 90 AD |  if_e	jmp	#LR__1540
13358     D9 E4 05 F1 | 	add	objptr, #217
1335c     F2 12 02 FB | 	rdlong	arg01, objptr
13360     14 E4 05 F1 | 	add	objptr, #20
13364     F2 24 02 FB | 	rdlong	local04, objptr
13368     02 24 66 F0 | 	shl	local04, #2
1336c     0A 25 02 FD | 	qmul	local04, arg02
13370                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13370     0B 15 02 F6 | 	mov	arg02, arg03
13374     01 16 06 F6 | 	mov	arg03, #1
13378     00 18 06 F6 | 	mov	arg04, #0
1337c     01 1A 06 F6 | 	mov	arg05, #1
13380     0A 00 00 FF 
13384     D3 E5 05 F1 | 	add	objptr, ##5587
13388     18 24 62 FD | 	getqx	local04
1338c     0F 25 02 F1 | 	add	local04, local01
13390     12 13 02 F1 | 	add	arg01, local04
13394     08 15 B0 FD | 	call	#_psram_spin2_fill
13398     0B 00 00 FF 
1339c     C0 E4 85 F1 | 	sub	objptr, ##5824
133a0                 | LR__1540
133a0     A7 F0 03 F6 | 	mov	ptra, fp
133a4     B2 00 A0 FD | 	call	#popregs_
133a8                 | _hg010b_spin2_putpixel_ret
133a8     2D 00 64 FD | 	ret
133ac                 | 
133ac                 | ' 
133ac                 | ' pub putpixel2(x,y,c)
133ac                 | _hg010b_spin2_putpixel2
133ac     02 4A 05 F6 | 	mov	COUNT_, #2
133b0     A8 00 A0 FD | 	call	#pushregs_
133b4     D9 E4 05 F1 | 	add	objptr, #217
133b8     F2 1E 02 FB | 	rdlong	local01, objptr
133bc     14 E4 05 F1 | 	add	objptr, #20
133c0     F2 1A 02 FB | 	rdlong	arg05, objptr
133c4     02 1A 66 F0 | 	shl	arg05, #2
133c8     0A 1B 02 FD | 	qmul	arg05, arg02
133cc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
133cc     0B 15 02 F6 | 	mov	arg02, arg03
133d0     01 16 06 F6 | 	mov	arg03, #1
133d4     00 18 06 F6 | 	mov	arg04, #0
133d8     01 1A 06 F6 | 	mov	arg05, #1
133dc     0A 00 00 FF 
133e0     D3 E5 05 F1 | 	add	objptr, ##5587
133e4     18 20 62 FD | 	getqx	local02
133e8     09 21 02 F1 | 	add	local02, arg01
133ec     10 1F 02 F1 | 	add	local01, local02
133f0     0F 13 02 F6 | 	mov	arg01, local01
133f4     A8 14 B0 FD | 	call	#_psram_spin2_fill
133f8     0B 00 00 FF 
133fc     C0 E4 85 F1 | 	sub	objptr, ##5824
13400     A7 F0 03 F6 | 	mov	ptra, fp
13404     B2 00 A0 FD | 	call	#popregs_
13408                 | _hg010b_spin2_putpixel2_ret
13408     2D 00 64 FD | 	ret
1340c                 | 
1340c                 | ' 
1340c                 | ' pub getpixel2(x,y): c 
1340c                 | _hg010b_spin2_getpixel2
1340c     02 4A 05 F6 | 	mov	COUNT_, #2
13410     A8 00 A0 FD | 	call	#pushregs_
13414     0C F0 07 F1 | 	add	ptra, #12
13418     04 4E 05 F1 | 	add	fp, #4
1341c     A7 12 62 FC | 	wrlong	arg01, fp
13420     04 4E 05 F1 | 	add	fp, #4
13424     A7 14 62 FC | 	wrlong	arg02, fp
13428     08 4E 85 F1 | 	sub	fp, #8
1342c     A7 00 68 FC | 	wrlong	#0, fp
13430     A7 12 02 F6 | 	mov	arg01, fp
13434     D9 E4 05 F1 | 	add	objptr, #217
13438     F2 14 02 FB | 	rdlong	arg02, objptr
1343c     14 E4 05 F1 | 	add	objptr, #20
13440     F2 16 02 FB | 	rdlong	arg03, objptr
13444     02 16 66 F0 | 	shl	arg03, #2
13448     08 4E 05 F1 | 	add	fp, #8
1344c     A7 FA 01 FB | 	rdlong	result1, fp
13450     FD 16 02 FD | 	qmul	arg03, result1
13454                 | ' 
13454                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
13454     04 4E 85 F1 | 	sub	fp, #4
13458     A7 1E 02 FB | 	rdlong	local01, fp
1345c     04 4E 85 F1 | 	sub	fp, #4
13460     01 16 06 F6 | 	mov	arg03, #1
13464     0A 00 00 FF 
13468     D3 E5 05 F1 | 	add	objptr, ##5587
1346c     18 20 62 FD | 	getqx	local02
13470     0F 21 02 F1 | 	add	local02, local01
13474     10 15 02 F1 | 	add	arg02, local02
13478     EC 12 B0 FD | 	call	#_psram_spin2_read1
1347c     0B 00 00 FF 
13480     C0 E4 85 F1 | 	sub	objptr, ##5824
13484                 | ' return c
13484     A7 FA 01 FB | 	rdlong	result1, fp
13488     A7 F0 03 F6 | 	mov	ptra, fp
1348c     B2 00 A0 FD | 	call	#popregs_
13490                 | _hg010b_spin2_getpixel2_ret
13490     2D 00 64 FD | 	ret
13494                 | 
13494                 | '   
13494                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
13494                 | ' 
13494                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
13494                 | _hg010b_spin2_fastline
13494     02 4A 05 F6 | 	mov	COUNT_, #2
13498     A8 00 A0 FD | 	call	#pushregs_
1349c     09 1F 02 F6 | 	mov	local01, arg01
134a0     0A 21 02 F6 | 	mov	local02, arg02
134a4                 | ' 
134a4                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
134a4     00 16 56 F2 | 	cmps	arg03, #0 wc
134a8     F4 00 90 CD |  if_b	jmp	#LR__1550
134ac     01 00 00 FF 
134b0     26 E4 05 F1 | 	add	objptr, ##550
134b4     F2 1A 02 FB | 	rdlong	arg05, objptr
134b8     01 00 00 FF 
134bc     26 E4 85 F1 | 	sub	objptr, ##550
134c0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
134c4     D8 00 90 3D |  if_ae	jmp	#LR__1550
134c8     00 1E 56 F2 | 	cmps	local01, #0 wc
134cc     00 20 56 C2 |  if_b	cmps	local02, #0 wc
134d0     CC 00 90 CD |  if_b	jmp	#LR__1550
134d4     01 00 00 FF 
134d8     22 E4 05 F1 | 	add	objptr, ##546
134dc     F2 1A 02 FB | 	rdlong	arg05, objptr
134e0     01 00 00 FF 
134e4     22 E4 85 F1 | 	sub	objptr, ##546
134e8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
134ec     01 00 00 1F 
134f0     22 E4 05 11 |  if_a	add	objptr, ##546
134f4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
134f8     01 00 00 1F 
134fc     22 E4 85 11 |  if_a	sub	objptr, ##546
13500     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
13504                 | '   return
13504     98 00 90 1D |  if_a	jmp	#LR__1550
13508     10 1F 5A F2 | 	cmps	local01, local02 wcz
1350c     0F 1B 02 16 |  if_a	mov	arg05, local01
13510     10 1F 02 16 |  if_a	mov	local01, local02
13514     0D 21 02 16 |  if_a	mov	local02, arg05
13518     00 1E 56 F2 | 	cmps	local01, #0 wc
1351c     00 1E 06 C6 |  if_b	mov	local01, #0
13520     01 00 00 FF 
13524     22 E4 05 F1 | 	add	objptr, ##546
13528     F2 1A 02 FB | 	rdlong	arg05, objptr
1352c     01 00 00 FF 
13530     22 E4 85 F1 | 	sub	objptr, ##546
13534     0D 21 52 F2 | 	cmps	local02, arg05 wc
13538     01 00 00 3F 
1353c     22 E4 05 31 |  if_ae	add	objptr, ##546
13540     F2 20 02 3B |  if_ae	rdlong	local02, objptr
13544     01 00 00 3F 
13548     22 E4 85 31 |  if_ae	sub	objptr, ##546
1354c     D9 E4 05 F1 | 	add	objptr, #217
13550     F2 12 02 FB | 	rdlong	arg01, objptr
13554     14 E4 05 F1 | 	add	objptr, #20
13558     F2 1A 02 FB | 	rdlong	arg05, objptr
1355c     02 1A 66 F0 | 	shl	arg05, #2
13560     0B 1B 02 FD | 	qmul	arg05, arg03
13564                 | ' if x1>x2
13564                 | '   x1,x2:=x2,x1
13564                 | ' if x1<0 
13564                 | '   x1:=0
13564                 | ' if x2>=xres
13564                 | '   x2:=xres-1  
13564     01 20 86 31 |  if_ae	sub	local02, #1
13568                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
13568     01 16 06 F6 | 	mov	arg03, #1
1356c     10 17 02 F1 | 	add	arg03, local02
13570     0F 17 82 F1 | 	sub	arg03, local01
13574     0C 15 02 F6 | 	mov	arg02, arg04
13578     00 18 06 F6 | 	mov	arg04, #0
1357c     01 1A 06 F6 | 	mov	arg05, #1
13580     0A 00 00 FF 
13584     D3 E5 05 F1 | 	add	objptr, ##5587
13588     18 20 62 FD | 	getqx	local02
1358c     0F 21 02 F1 | 	add	local02, local01
13590     10 13 02 F1 | 	add	arg01, local02
13594     08 13 B0 FD | 	call	#_psram_spin2_fill
13598     0B 00 00 FF 
1359c     C0 E4 85 F1 | 	sub	objptr, ##5824
135a0                 | LR__1550
135a0     A7 F0 03 F6 | 	mov	ptra, fp
135a4     B2 00 A0 FD | 	call	#popregs_
135a8                 | _hg010b_spin2_fastline_ret
135a8     2D 00 64 FD | 	ret
135ac                 | 
135ac                 | ' 
135ac                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
135ac                 | _hg010b_spin2_draw
135ac     0E 4A 05 F6 | 	mov	COUNT_, #14
135b0     A8 00 A0 FD | 	call	#pushregs_
135b4     09 1F 02 F6 | 	mov	local01, arg01
135b8     0A 21 02 F6 | 	mov	local02, arg02
135bc     0B 23 02 F6 | 	mov	local03, arg03
135c0     0C 25 02 F6 | 	mov	local04, arg04
135c4     0D 27 02 F6 | 	mov	local05, arg05
135c8                 | ' 
135c8                 | ' if (y1==y2)
135c8     12 21 0A F2 | 	cmp	local02, local04 wz
135cc     18 00 90 5D |  if_ne	jmp	#LR__1560
135d0                 | '   fastline(x1,x2,y1,c)
135d0     0F 13 02 F6 | 	mov	arg01, local01
135d4     11 15 02 F6 | 	mov	arg02, local03
135d8     10 17 02 F6 | 	mov	arg03, local02
135dc     13 19 02 F6 | 	mov	arg04, local05
135e0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
135e4     F8 00 90 FD | 	jmp	#LR__1566
135e8                 | LR__1560
135e8                 | ' else  
135e8                 | '   x:=x1
135e8     0F 29 02 F6 | 	mov	local06, local01
135ec                 | '   y:=y1
135ec     10 2B 02 F6 | 	mov	local07, local02
135f0                 | ' 
135f0                 | '   if (x1<x2) 
135f0     11 1F 52 F2 | 	cmps	local01, local03 wc
135f4                 | '     xi:=1
135f4     01 2C 06 C6 |  if_b	mov	local08, #1
135f8                 | '     dx:=x2-x1
135f8     11 2F 02 C6 |  if_b	mov	local09, local03
135fc     0F 2F 82 C1 |  if_b	sub	local09, local01
13600                 | '   else
13600                 | '     xi:=-1
13600     01 2C 66 36 |  if_ae	neg	local08, #1
13604                 | '     dx:=x1-x2
13604     11 1F 82 31 |  if_ae	sub	local01, local03
13608     0F 2F 02 36 |  if_ae	mov	local09, local01
1360c                 | '   
1360c                 | '   if (y1<y2) 
1360c     12 21 52 F2 | 	cmps	local02, local04 wc
13610                 | '     yi:=1
13610     01 30 06 C6 |  if_b	mov	local10, #1
13614                 | '     dy:=y2-y1
13614     12 33 02 C6 |  if_b	mov	local11, local04
13618     10 33 82 C1 |  if_b	sub	local11, local02
1361c                 | '   else
1361c                 | '     yi:=-1
1361c     01 30 66 36 |  if_ae	neg	local10, #1
13620                 | '     dy:=y1-y2
13620     12 21 82 31 |  if_ae	sub	local02, local04
13624     10 33 02 36 |  if_ae	mov	local11, local02
13628                 | ' 
13628                 | '   putpixel(x,y,c)
13628     13 17 02 F6 | 	mov	arg03, local05
1362c     14 13 02 F6 | 	mov	arg01, local06
13630     15 15 02 F6 | 	mov	arg02, local07
13634     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
13638                 | ' 
13638                 | '   if (dx>dy)
13638     19 2F 5A F2 | 	cmps	local09, local11 wcz
1363c     50 00 90 ED |  if_be	jmp	#LR__1562
13640                 | '     ai:=(dy-dx)*2
13640     19 35 02 F6 | 	mov	local12, local11
13644     17 35 82 F1 | 	sub	local12, local09
13648     01 34 66 F0 | 	shl	local12, #1
1364c                 | '     bi:=dy*2
1364c     01 32 66 F0 | 	shl	local11, #1
13650     19 37 02 F6 | 	mov	local13, local11
13654                 | '     d:= bi-dx
13654     1B 39 02 F6 | 	mov	local14, local13
13658     17 39 82 F1 | 	sub	local14, local09
1365c                 | '     repeat while (x<>x2) 
1365c                 | LR__1561
1365c     11 29 0A F2 | 	cmp	local06, local03 wz
13660     7C 00 90 AD |  if_e	jmp	#LR__1565
13664                 | '       if (d>=0) 
13664     00 38 56 F2 | 	cmps	local14, #0 wc
13668                 | '         x+=xi
13668     16 29 02 31 |  if_ae	add	local06, local08
1366c                 | '         y+=yi
1366c     18 2B 02 31 |  if_ae	add	local07, local10
13670                 | '         d+=ai
13670     1A 39 02 31 |  if_ae	add	local14, local12
13674                 | '       else
13674                 | '         d+=bi
13674     1B 39 02 C1 |  if_b	add	local14, local13
13678                 | '         x+=xi
13678     16 29 02 C1 |  if_b	add	local06, local08
1367c                 | '       putpixel(x,y,c)
1367c     14 13 02 F6 | 	mov	arg01, local06
13680     15 15 02 F6 | 	mov	arg02, local07
13684     13 17 02 F6 | 	mov	arg03, local05
13688     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1368c     CC FF 9F FD | 	jmp	#LR__1561
13690                 | LR__1562
13690                 | '   else
13690                 | '     ai:=(dx-dy)*2
13690     17 35 02 F6 | 	mov	local12, local09
13694     19 35 82 F1 | 	sub	local12, local11
13698     01 34 66 F0 | 	shl	local12, #1
1369c                 | '     bi:=dx*2
1369c     01 2E 66 F0 | 	shl	local09, #1
136a0     17 37 02 F6 | 	mov	local13, local09
136a4                 | '     d:=bi-dy
136a4     1B 39 02 F6 | 	mov	local14, local13
136a8     19 39 82 F1 | 	sub	local14, local11
136ac                 | '     repeat while (y<>y2)
136ac                 | LR__1563
136ac     12 2B 0A F2 | 	cmp	local07, local04 wz
136b0     2C 00 90 AD |  if_e	jmp	#LR__1564
136b4                 | '       if (d>=0)
136b4     00 38 56 F2 | 	cmps	local14, #0 wc
136b8                 | '         x+=xi
136b8     16 29 02 31 |  if_ae	add	local06, local08
136bc                 | '         y+=yi
136bc     18 2B 02 31 |  if_ae	add	local07, local10
136c0                 | '         d+=ai
136c0     1A 39 02 31 |  if_ae	add	local14, local12
136c4                 | '       else
136c4                 | '         d+=bi
136c4     1B 39 02 C1 |  if_b	add	local14, local13
136c8                 | '         y+=yi
136c8     18 2B 02 C1 |  if_b	add	local07, local10
136cc                 | '       putpixel(x, y,c)
136cc     14 13 02 F6 | 	mov	arg01, local06
136d0     15 15 02 F6 | 	mov	arg02, local07
136d4     13 17 02 F6 | 	mov	arg03, local05
136d8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
136dc     CC FF 9F FD | 	jmp	#LR__1563
136e0                 | LR__1564
136e0                 | LR__1565
136e0                 | LR__1566
136e0     A7 F0 03 F6 | 	mov	ptra, fp
136e4     B2 00 A0 FD | 	call	#popregs_
136e8                 | _hg010b_spin2_draw_ret
136e8     2D 00 64 FD | 	ret
136ec                 | 
136ec                 | '  
136ec                 | ' pub fillpush(val) 
136ec                 | _hg010b_spin2_fillpush
136ec                 | ' fillstack[fillptr]:=val
136ec     0B 00 00 FF 
136f0     B6 E4 05 F1 | 	add	objptr, ##5814
136f4     F2 00 02 FB | 	rdlong	_var01, objptr
136f8     02 00 66 F0 | 	shl	_var01, #2
136fc     0A 00 00 FF 
13700     00 E4 85 F1 | 	sub	objptr, ##5120
13704     F2 00 02 F1 | 	add	_var01, objptr
13708     00 13 62 FC | 	wrlong	arg01, _var01
1370c                 | ' fillptr+=1   
1370c     0A 00 00 FF 
13710     00 E4 05 F1 | 	add	objptr, ##5120
13714     F2 00 02 FB | 	rdlong	_var01, objptr
13718     01 00 06 F1 | 	add	_var01, #1
1371c     F2 00 62 FC | 	wrlong	_var01, objptr
13720     0B 00 00 FF 
13724     B6 E4 85 F1 | 	sub	objptr, ##5814
13728                 | _hg010b_spin2_fillpush_ret
13728     2D 00 64 FD | 	ret
1372c                 | 
1372c                 | ' 
1372c                 | '     
1372c                 | ' pub fillpop() : val
1372c                 | _hg010b_spin2_fillpop
1372c                 | ' 
1372c                 | ' fillptr-=1
1372c     0B 00 00 FF 
13730     B6 E4 05 F1 | 	add	objptr, ##5814
13734     F2 FA 01 FB | 	rdlong	result1, objptr
13738     01 FA 85 F1 | 	sub	result1, #1
1373c     F2 FA 61 FC | 	wrlong	result1, objptr
13740                 | ' if fillptr<0
13740     0B 00 00 FF 
13744     B6 E4 85 F1 | 	sub	objptr, ##5814
13748     00 FA 55 F2 | 	cmps	result1, #0 wc
1374c                 | '   fillptr:=0
1374c     0B 00 00 CF 
13750     B6 E4 05 C1 |  if_b	add	objptr, ##5814
13754     F2 00 68 CC |  if_b	wrlong	#0, objptr
13758     0B 00 00 CF 
1375c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
13760                 | '   val:=-12345
13760     E7 FF 7F CF 
13764     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
13768     28 00 90 CD |  if_b	jmp	#LR__1570
1376c                 | ' else 
1376c                 | '   val:=fillstack[fillptr]
1376c     0B 00 00 FF 
13770     B6 E4 05 F1 | 	add	objptr, ##5814
13774     F2 00 02 FB | 	rdlong	_var01, objptr
13778     02 00 66 F0 | 	shl	_var01, #2
1377c     0A 00 00 FF 
13780     00 E4 85 F1 | 	sub	objptr, ##5120
13784     F2 00 02 F1 | 	add	_var01, objptr
13788     00 01 02 FB | 	rdlong	_var01, _var01
1378c     01 00 00 FF 
13790     B6 E4 85 F1 | 	sub	objptr, ##694
13794                 | LR__1570
13794                 | ' return val
13794     00 FB 01 F6 | 	mov	result1, _var01
13798                 | _hg010b_spin2_fillpop_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | '       
1379c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1379c                 | _hg010b_spin2_fill
1379c     0B 4A 05 F6 | 	mov	COUNT_, #11
137a0     A8 00 A0 FD | 	call	#pushregs_
137a4                 | ' 
137a4                 | ' newcolor:=newcolor & 255
137a4     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
137a8                 | ' oldcolor:=oldcolor & 255
137a8     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
137ac                 | ' 
137ac                 | ' if (oldcolor == newcolor) 
137ac     0F 21 0A F2 | 	cmp	local02, local01 wz
137b0                 | '   return
137b0     7C 02 90 AD |  if_e	jmp	#LR__1589
137b4                 | ' 
137b4                 | ' fillptr:=0
137b4     0B 00 00 FF 
137b8     B6 E4 05 F1 | 	add	objptr, ##5814
137bc     F2 00 68 FC | 	wrlong	#0, objptr
137c0                 | ' fillmax:=0
137c0     04 E4 05 F1 | 	add	objptr, #4
137c4     F2 00 68 FC | 	wrlong	#0, objptr
137c8     0B 00 00 FF 
137cc     BA E4 85 F1 | 	sub	objptr, ##5818
137d0                 | ' fillpush(x)
137d0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
137d4                 | ' fillpush(y)
137d4     0A 13 02 F6 | 	mov	arg01, arg02
137d8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
137dc                 | ' y:=fillpop()
137dc     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
137e0     FD 22 02 F6 | 	mov	local03, result1
137e4                 | ' x:=fillpop()
137e4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
137e8     FD 24 02 F6 | 	mov	local04, result1
137ec                 | ' pinhigh(38)
137ec     59 4C 64 FD | 	drvh	#38
137f0                 | ' repeat while (x>-1)       
137f0                 | LR__1580
137f0     00 24 56 F2 | 	cmps	local04, #0 wc
137f4     34 02 90 CD |  if_b	jmp	#LR__1588
137f8                 | '   pintoggle(39)
137f8     5F 4E 64 FD | 	drvnot	#39
137fc                 | '   x1 := x
137fc     12 27 02 F6 | 	mov	local05, local04
13800                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
13800                 | LR__1581
13800     00 28 06 F6 | 	mov	local06, #0
13804     00 2A 06 F6 | 	mov	local07, #0
13808     00 26 56 F2 | 	cmps	local05, #0 wc
1380c     01 2A 66 36 |  if_ae	neg	local07, #1
13810     00 2A 0E F2 | 	cmp	local07, #0 wz
13814     00 28 26 56 |  if_ne	not	local06, #0
13818     00 2C 06 F6 | 	mov	local08, #0
1381c     00 2E 06 F6 | 	mov	local09, #0
13820     11 15 02 F6 | 	mov	arg02, local03
13824     13 13 02 F6 | 	mov	arg01, local05
13828     E0 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1382c     10 FB 09 F2 | 	cmp	result1, local02 wz
13830     00 2E 26 A6 |  if_e	not	local09, #0
13834     00 2E 0E F2 | 	cmp	local09, #0 wz
13838     00 2C 26 56 |  if_ne	not	local08, #0
1383c     16 29 CA F7 | 	test	local06, local08 wz
13840                 | '     x1--
13840     01 26 86 51 |  if_ne	sub	local05, #1
13844     B8 FF 9F 5D |  if_ne	jmp	#LR__1581
13848                 | '   x1++
13848     01 26 06 F1 | 	add	local05, #1
1384c                 | '   spanabove := 0
1384c     00 30 06 F6 | 	mov	local10, #0
13850                 | '   spanbelow := 0
13850     00 32 06 F6 | 	mov	local11, #0
13854                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
13854                 | LR__1582
13854     00 28 06 F6 | 	mov	local06, #0
13858     02 00 00 FF 
1385c     00 26 56 F2 | 	cmps	local05, ##1024 wc
13860     00 28 26 C6 |  if_b	not	local06, #0
13864     00 2C 06 F6 | 	mov	local08, #0
13868     00 2E 06 F6 | 	mov	local09, #0
1386c     11 15 02 F6 | 	mov	arg02, local03
13870     13 13 02 F6 | 	mov	arg01, local05
13874     94 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13878     10 FB 09 F2 | 	cmp	result1, local02 wz
1387c     00 2E 26 A6 |  if_e	not	local09, #0
13880     00 2E 0E F2 | 	cmp	local09, #0 wz
13884     00 2C 26 56 |  if_ne	not	local08, #0
13888     16 29 CA F7 | 	test	local06, local08 wz
1388c     88 01 90 AD |  if_e	jmp	#LR__1587
13890                 | '     putpixel2 (x1,y, newcolor & 255)
13890     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
13894     13 13 02 F6 | 	mov	arg01, local05
13898     11 15 02 F6 | 	mov	arg02, local03
1389c     0C FB BF FD | 	call	#_hg010b_spin2_putpixel2
138a0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
138a0     00 28 06 F6 | 	mov	local06, #0
138a4     00 2A 06 F6 | 	mov	local07, #0
138a8     00 30 0E F2 | 	cmp	local10, #0 wz
138ac     01 22 56 A2 |  if_e	cmps	local03, #1 wc
138b0     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
138b4     00 2A 0E F2 | 	cmp	local07, #0 wz
138b8     00 28 26 56 |  if_ne	not	local06, #0
138bc     00 2C 06 F6 | 	mov	local08, #0
138c0     00 2E 06 F6 | 	mov	local09, #0
138c4     11 15 02 F6 | 	mov	arg02, local03
138c8     01 14 86 F1 | 	sub	arg02, #1
138cc     13 13 02 F6 | 	mov	arg01, local05
138d0     38 FB BF FD | 	call	#_hg010b_spin2_getpixel2
138d4     10 FB 09 F2 | 	cmp	result1, local02 wz
138d8     00 2E 26 A6 |  if_e	not	local09, #0
138dc     00 2E 0E F2 | 	cmp	local09, #0 wz
138e0     00 2C 26 56 |  if_ne	not	local08, #0
138e4     16 29 CA F7 | 	test	local06, local08 wz
138e8     1C 00 90 AD |  if_e	jmp	#LR__1583
138ec                 | '       fillpush(x1)
138ec     13 13 02 F6 | 	mov	arg01, local05
138f0     F8 FD BF FD | 	call	#_hg010b_spin2_fillpush
138f4                 | '       fillpush(y-1)
138f4     11 13 02 F6 | 	mov	arg01, local03
138f8     01 12 86 F1 | 	sub	arg01, #1
138fc     EC FD BF FD | 	call	#_hg010b_spin2_fillpush
13900                 | '       spanAbove := 1 
13900     01 30 06 F6 | 	mov	local10, #1
13904     4C 00 90 FD | 	jmp	#LR__1584
13908                 | LR__1583
13908                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
13908     00 28 06 F6 | 	mov	local06, #0
1390c     00 2A 06 F6 | 	mov	local07, #0
13910     00 30 0E F2 | 	cmp	local10, #0 wz
13914     01 22 56 52 |  if_ne	cmps	local03, #1 wc
13918     01 2A 66 16 |  if_a	neg	local07, #1
1391c     00 2A 0E F2 | 	cmp	local07, #0 wz
13920     00 28 26 56 |  if_ne	not	local06, #0
13924     00 2C 06 F6 | 	mov	local08, #0
13928     00 2E 06 F6 | 	mov	local09, #0
1392c     11 15 02 F6 | 	mov	arg02, local03
13930     01 14 86 F1 | 	sub	arg02, #1
13934     13 13 02 F6 | 	mov	arg01, local05
13938     D0 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1393c     10 FB 09 F2 | 	cmp	result1, local02 wz
13940     00 2E 26 56 |  if_ne	not	local09, #0
13944     00 2E 0E F2 | 	cmp	local09, #0 wz
13948     00 2C 26 56 |  if_ne	not	local08, #0
1394c     16 29 CA F7 | 	test	local06, local08 wz
13950                 | '       spanAbove := 0 
13950     00 30 06 56 |  if_ne	mov	local10, #0
13954                 | LR__1584
13954                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
13954     00 28 06 F6 | 	mov	local06, #0
13958     00 2A 06 F6 | 	mov	local07, #0
1395c     00 32 0E F2 | 	cmp	local11, #0 wz
13960     01 00 00 AF 
13964     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
13968     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1396c     00 2A 0E F2 | 	cmp	local07, #0 wz
13970     00 28 26 56 |  if_ne	not	local06, #0
13974     00 2C 06 F6 | 	mov	local08, #0
13978     00 2E 06 F6 | 	mov	local09, #0
1397c     11 15 02 F6 | 	mov	arg02, local03
13980     01 14 06 F1 | 	add	arg02, #1
13984     13 13 02 F6 | 	mov	arg01, local05
13988     80 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1398c     10 FB 09 F2 | 	cmp	result1, local02 wz
13990     00 2E 26 A6 |  if_e	not	local09, #0
13994     00 2E 0E F2 | 	cmp	local09, #0 wz
13998     00 2C 26 56 |  if_ne	not	local08, #0
1399c     16 29 CA F7 | 	test	local06, local08 wz
139a0     1C 00 90 AD |  if_e	jmp	#LR__1585
139a4                 | '       fillpush(x1)
139a4     13 13 02 F6 | 	mov	arg01, local05
139a8     40 FD BF FD | 	call	#_hg010b_spin2_fillpush
139ac                 | '       fillpush(y + 1)
139ac     11 13 02 F6 | 	mov	arg01, local03
139b0     01 12 06 F1 | 	add	arg01, #1
139b4     34 FD BF FD | 	call	#_hg010b_spin2_fillpush
139b8                 | '       spanBelow := 1
139b8     01 32 06 F6 | 	mov	local11, #1
139bc     50 00 90 FD | 	jmp	#LR__1586
139c0                 | LR__1585
139c0                 | '     elseif((spanBelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
139c0     00 28 06 F6 | 	mov	local06, #0
139c4     00 2A 06 F6 | 	mov	local07, #0
139c8     00 32 0E F2 | 	cmp	local11, #0 wz
139cc     01 00 00 5F 
139d0     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
139d4     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
139d8     00 2A 0E F2 | 	cmp	local07, #0 wz
139dc     00 28 26 56 |  if_ne	not	local06, #0
139e0     00 2C 06 F6 | 	mov	local08, #0
139e4     00 2E 06 F6 | 	mov	local09, #0
139e8     11 15 02 F6 | 	mov	arg02, local03
139ec     01 14 06 F1 | 	add	arg02, #1
139f0     13 13 02 F6 | 	mov	arg01, local05
139f4     14 FA BF FD | 	call	#_hg010b_spin2_getpixel2
139f8     10 FB 09 F2 | 	cmp	result1, local02 wz
139fc     00 2E 26 56 |  if_ne	not	local09, #0
13a00     00 2E 0E F2 | 	cmp	local09, #0 wz
13a04     00 2C 26 56 |  if_ne	not	local08, #0
13a08     16 29 CA F7 | 	test	local06, local08 wz
13a0c                 | '       spanBelow := 0
13a0c     00 32 06 56 |  if_ne	mov	local11, #0
13a10                 | LR__1586
13a10                 | '     x1++
13a10     01 26 06 F1 | 	add	local05, #1
13a14     3C FE 9F FD | 	jmp	#LR__1582
13a18                 | LR__1587
13a18                 | '   y:=fillpop()
13a18     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
13a1c     FD 22 02 F6 | 	mov	local03, result1
13a20                 | '   x:=fillpop()
13a20     08 FD BF FD | 	call	#_hg010b_spin2_fillpop
13a24     FD 24 02 F6 | 	mov	local04, result1
13a28     C4 FD 9F FD | 	jmp	#LR__1580
13a2c                 | LR__1588
13a2c                 | ' pinlow(38)    
13a2c     58 4C 64 FD | 	drvl	#38
13a30                 | LR__1589
13a30     A7 F0 03 F6 | 	mov	ptra, fp
13a34     B2 00 A0 FD | 	call	#popregs_
13a38                 | _hg010b_spin2_fill_ret
13a38     2D 00 64 FD | 	ret
13a3c                 | 
13a3c                 | ' 
13a3c                 | ' '-- A filled circle -----------------------------------------------------
13a3c                 | ' 
13a3c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
13a3c                 | _hg010b_spin2_fcircle
13a3c     08 4A 05 F6 | 	mov	COUNT_, #8
13a40     A8 00 A0 FD | 	call	#pushregs_
13a44     0B 1F 02 F6 | 	mov	local01, arg03
13a48     FF FF 7F FF 
13a4c     FE 1F 06 FD | 	qmul	local01, ##-2
13a50     09 21 02 F6 | 	mov	local02, arg01
13a54     0A 23 02 F6 | 	mov	local03, arg02
13a58     0C 25 02 F6 | 	mov	local04, arg04
13a5c                 | ' 
13a5c                 | ' d:=5-4*r
13a5c     0F 19 02 F6 | 	mov	arg04, local01
13a60     02 18 66 F0 | 	shl	arg04, #2
13a64     05 26 06 F6 | 	mov	local05, #5
13a68     0C 27 82 F1 | 	sub	local05, arg04
13a6c                 | ' x:=0
13a6c     00 28 06 F6 | 	mov	local06, #0
13a70                 | ' y:=r
13a70                 | ' da:=(-2*r+5)*4
13a70                 | ' db:=3*4
13a70     0C 2A 06 F6 | 	mov	local07, #12
13a74                 | ' repeat while (x<=y) 
13a74     18 2C 62 FD | 	getqx	local08
13a78     05 2C 06 F1 | 	add	local08, #5
13a7c     02 2C 66 F0 | 	shl	local08, #2
13a80                 | LR__1590
13a80     0F 29 5A F2 | 	cmps	local06, local01 wcz
13a84     B4 00 90 1D |  if_a	jmp	#LR__1592
13a88                 | '   fastline(x0-x,x0+x,y0-y,c)
13a88     10 13 02 F6 | 	mov	arg01, local02
13a8c     14 13 82 F1 | 	sub	arg01, local06
13a90     10 15 02 F6 | 	mov	arg02, local02
13a94     14 15 02 F1 | 	add	arg02, local06
13a98     11 17 02 F6 | 	mov	arg03, local03
13a9c     0F 17 82 F1 | 	sub	arg03, local01
13aa0     12 19 02 F6 | 	mov	arg04, local04
13aa4     EC F9 BF FD | 	call	#_hg010b_spin2_fastline
13aa8                 | '   fastline(x0-x,x0+x,y0+y,c)
13aa8     10 13 02 F6 | 	mov	arg01, local02
13aac     14 13 82 F1 | 	sub	arg01, local06
13ab0     10 15 02 F6 | 	mov	arg02, local02
13ab4     14 15 02 F1 | 	add	arg02, local06
13ab8     11 17 02 F6 | 	mov	arg03, local03
13abc     0F 17 02 F1 | 	add	arg03, local01
13ac0     12 19 02 F6 | 	mov	arg04, local04
13ac4     CC F9 BF FD | 	call	#_hg010b_spin2_fastline
13ac8                 | '   fastline(x0-y,x0+y,y0-x,c)
13ac8     10 13 02 F6 | 	mov	arg01, local02
13acc     0F 13 82 F1 | 	sub	arg01, local01
13ad0     10 15 02 F6 | 	mov	arg02, local02
13ad4     0F 15 02 F1 | 	add	arg02, local01
13ad8     11 17 02 F6 | 	mov	arg03, local03
13adc     14 17 82 F1 | 	sub	arg03, local06
13ae0     12 19 02 F6 | 	mov	arg04, local04
13ae4     AC F9 BF FD | 	call	#_hg010b_spin2_fastline
13ae8                 | '   fastline(x0-y,x0+y,y0+x,c)
13ae8     10 13 02 F6 | 	mov	arg01, local02
13aec     0F 13 82 F1 | 	sub	arg01, local01
13af0     10 15 02 F6 | 	mov	arg02, local02
13af4     0F 15 02 F1 | 	add	arg02, local01
13af8     11 17 02 F6 | 	mov	arg03, local03
13afc     14 17 02 F1 | 	add	arg03, local06
13b00     12 19 02 F6 | 	mov	arg04, local04
13b04     8C F9 BF FD | 	call	#_hg010b_spin2_fastline
13b08                 | '   if d>0 
13b08     01 26 56 F2 | 	cmps	local05, #1 wc
13b0c     18 00 90 CD |  if_b	jmp	#LR__1591
13b10                 | '     d+=da
13b10     16 27 02 F1 | 	add	local05, local08
13b14                 | '     y-=1
13b14     01 1E 86 F1 | 	sub	local01, #1
13b18                 | '     x+=1
13b18     01 28 06 F1 | 	add	local06, #1
13b1c                 | '     da+=4*4
13b1c     10 2C 06 F1 | 	add	local08, #16
13b20                 | '     db+=2*4
13b20     08 2A 06 F1 | 	add	local07, #8
13b24     58 FF 9F FD | 	jmp	#LR__1590
13b28                 | LR__1591
13b28                 | '   else
13b28                 | '     d+=db
13b28     15 27 02 F1 | 	add	local05, local07
13b2c                 | '     x+=1
13b2c     01 28 06 F1 | 	add	local06, #1
13b30                 | '     da+=2*4
13b30     08 2C 06 F1 | 	add	local08, #8
13b34                 | '     db+=2*4
13b34     08 2A 06 F1 | 	add	local07, #8
13b38     44 FF 9F FD | 	jmp	#LR__1590
13b3c                 | LR__1592
13b3c     A7 F0 03 F6 | 	mov	ptra, fp
13b40     B2 00 A0 FD | 	call	#popregs_
13b44                 | _hg010b_spin2_fcircle_ret
13b44     2D 00 64 FD | 	ret
13b48                 | 
13b48                 | '  
13b48                 | ' '-- A circle ------------------------------------------------------------ 
13b48                 | '  
13b48                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
13b48                 | _hg010b_spin2_circle
13b48     08 4A 05 F6 | 	mov	COUNT_, #8
13b4c     A8 00 A0 FD | 	call	#pushregs_
13b50     0B 1F 02 F6 | 	mov	local01, arg03
13b54     FF FF 7F FF 
13b58     FE 1F 06 FD | 	qmul	local01, ##-2
13b5c     09 21 02 F6 | 	mov	local02, arg01
13b60     0A 23 02 F6 | 	mov	local03, arg02
13b64     0C 25 02 F6 | 	mov	local04, arg04
13b68                 | ' 
13b68                 | '  
13b68                 | ' d:=5-4*r
13b68     0F 19 02 F6 | 	mov	arg04, local01
13b6c     02 18 66 F0 | 	shl	arg04, #2
13b70     05 26 06 F6 | 	mov	local05, #5
13b74     0C 27 82 F1 | 	sub	local05, arg04
13b78                 | ' x:=0
13b78     00 28 06 F6 | 	mov	local06, #0
13b7c                 | ' y:=r
13b7c                 | ' da:=(-2*r+5)*4
13b7c                 | ' db:=3*4
13b7c     0C 2A 06 F6 | 	mov	local07, #12
13b80                 | ' repeat while (x<=y) 
13b80     18 2C 62 FD | 	getqx	local08
13b84     05 2C 06 F1 | 	add	local08, #5
13b88     02 2C 66 F0 | 	shl	local08, #2
13b8c                 | LR__1600
13b8c     0F 29 5A F2 | 	cmps	local06, local01 wcz
13b90     F4 00 90 1D |  if_a	jmp	#LR__1602
13b94                 | '   putpixel(x0-x,y0-y,c)
13b94     10 13 02 F6 | 	mov	arg01, local02
13b98     14 13 82 F1 | 	sub	arg01, local06
13b9c     11 15 02 F6 | 	mov	arg02, local03
13ba0     0F 15 82 F1 | 	sub	arg02, local01
13ba4     12 17 02 F6 | 	mov	arg03, local04
13ba8     50 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13bac                 | '   putpixel(x0-x,y0+y,c)
13bac     10 13 02 F6 | 	mov	arg01, local02
13bb0     14 13 82 F1 | 	sub	arg01, local06
13bb4     11 15 02 F6 | 	mov	arg02, local03
13bb8     0F 15 02 F1 | 	add	arg02, local01
13bbc     12 17 02 F6 | 	mov	arg03, local04
13bc0     38 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13bc4                 | '   putpixel(x0+x,y0-y,c)
13bc4     10 13 02 F6 | 	mov	arg01, local02
13bc8     14 13 02 F1 | 	add	arg01, local06
13bcc     11 15 02 F6 | 	mov	arg02, local03
13bd0     0F 15 82 F1 | 	sub	arg02, local01
13bd4     12 17 02 F6 | 	mov	arg03, local04
13bd8     20 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13bdc                 | '   putpixel(x0+x,y0+y,c)
13bdc     10 13 02 F6 | 	mov	arg01, local02
13be0     14 13 02 F1 | 	add	arg01, local06
13be4     11 15 02 F6 | 	mov	arg02, local03
13be8     0F 15 02 F1 | 	add	arg02, local01
13bec     12 17 02 F6 | 	mov	arg03, local04
13bf0     08 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13bf4                 | '   putpixel(x0-y,y0-x,c)
13bf4     10 13 02 F6 | 	mov	arg01, local02
13bf8     0F 13 82 F1 | 	sub	arg01, local01
13bfc     11 15 02 F6 | 	mov	arg02, local03
13c00     14 15 82 F1 | 	sub	arg02, local06
13c04     12 17 02 F6 | 	mov	arg03, local04
13c08     F0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13c0c                 | '   putpixel(x0-y,y0+x,c)
13c0c     10 13 02 F6 | 	mov	arg01, local02
13c10     0F 13 82 F1 | 	sub	arg01, local01
13c14     11 15 02 F6 | 	mov	arg02, local03
13c18     14 15 02 F1 | 	add	arg02, local06
13c1c     12 17 02 F6 | 	mov	arg03, local04
13c20     D8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13c24                 | '   putpixel(x0+y,y0-x,c)
13c24     10 13 02 F6 | 	mov	arg01, local02
13c28     0F 13 02 F1 | 	add	arg01, local01
13c2c     11 15 02 F6 | 	mov	arg02, local03
13c30     14 15 82 F1 | 	sub	arg02, local06
13c34     12 17 02 F6 | 	mov	arg03, local04
13c38     C0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13c3c                 | '   putpixel(x0+y,y0+x,c)
13c3c     10 13 02 F6 | 	mov	arg01, local02
13c40     0F 13 02 F1 | 	add	arg01, local01
13c44     11 15 02 F6 | 	mov	arg02, local03
13c48     14 15 02 F1 | 	add	arg02, local06
13c4c     12 17 02 F6 | 	mov	arg03, local04
13c50     A8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13c54                 | '   if d>0 
13c54     01 26 56 F2 | 	cmps	local05, #1 wc
13c58     18 00 90 CD |  if_b	jmp	#LR__1601
13c5c                 | '     d+=da
13c5c     16 27 02 F1 | 	add	local05, local08
13c60                 | '     y-=1
13c60     01 1E 86 F1 | 	sub	local01, #1
13c64                 | '     x+=1
13c64     01 28 06 F1 | 	add	local06, #1
13c68                 | '     da+=4*4
13c68     10 2C 06 F1 | 	add	local08, #16
13c6c                 | '     db+=2*4
13c6c     08 2A 06 F1 | 	add	local07, #8
13c70     18 FF 9F FD | 	jmp	#LR__1600
13c74                 | LR__1601
13c74                 | '   else
13c74                 | '     d+=db
13c74     15 27 02 F1 | 	add	local05, local07
13c78                 | '     x+=1
13c78     01 28 06 F1 | 	add	local06, #1
13c7c                 | '     da+=2*4
13c7c     08 2C 06 F1 | 	add	local08, #8
13c80                 | '     db+=2*4
13c80     08 2A 06 F1 | 	add	local07, #8
13c84     04 FF 9F FD | 	jmp	#LR__1600
13c88                 | LR__1602
13c88     A7 F0 03 F6 | 	mov	ptra, fp
13c8c     B2 00 A0 FD | 	call	#popregs_
13c90                 | _hg010b_spin2_circle_ret
13c90     2D 00 64 FD | 	ret
13c94                 | 
13c94                 | '     
13c94                 | ' '-- A frame (an empty rectangle) ---------------------------------------
13c94                 | ' 
13c94                 | ' pub frame(x1,y1,x2,y2,c)
13c94                 | _hg010b_spin2_frame
13c94     05 4A 05 F6 | 	mov	COUNT_, #5
13c98     A8 00 A0 FD | 	call	#pushregs_
13c9c     09 1F 02 F6 | 	mov	local01, arg01
13ca0     0A 21 02 F6 | 	mov	local02, arg02
13ca4     0B 23 02 F6 | 	mov	local03, arg03
13ca8     0C 25 02 F6 | 	mov	local04, arg04
13cac     0D 27 02 F6 | 	mov	local05, arg05
13cb0                 | ' 
13cb0                 | ' fastline(x1,x2,y1,c)
13cb0     0F 13 02 F6 | 	mov	arg01, local01
13cb4     11 15 02 F6 | 	mov	arg02, local03
13cb8     10 17 02 F6 | 	mov	arg03, local02
13cbc     13 19 02 F6 | 	mov	arg04, local05
13cc0     D0 F7 BF FD | 	call	#_hg010b_spin2_fastline
13cc4                 | ' fastline(x1,x2,y2,c)
13cc4     0F 13 02 F6 | 	mov	arg01, local01
13cc8     11 15 02 F6 | 	mov	arg02, local03
13ccc     12 17 02 F6 | 	mov	arg03, local04
13cd0     13 19 02 F6 | 	mov	arg04, local05
13cd4     BC F7 BF FD | 	call	#_hg010b_spin2_fastline
13cd8                 | ' line(x1,y1,x1,y2,c)
13cd8     0F 13 02 F6 | 	mov	arg01, local01
13cdc     10 15 02 F6 | 	mov	arg02, local02
13ce0     0F 17 02 F6 | 	mov	arg03, local01
13ce4     12 19 02 F6 | 	mov	arg04, local04
13ce8     13 1B 02 F6 | 	mov	arg05, local05
13cec                 | ' draw(x1,y1,x2,y2,c)
13cec     BC F8 BF FD | 	call	#_hg010b_spin2_draw
13cf0                 | ' line(x2,y1,x2,y2,c)
13cf0     11 13 02 F6 | 	mov	arg01, local03
13cf4     10 15 02 F6 | 	mov	arg02, local02
13cf8     11 17 02 F6 | 	mov	arg03, local03
13cfc     12 19 02 F6 | 	mov	arg04, local04
13d00     13 1B 02 F6 | 	mov	arg05, local05
13d04                 | ' draw(x1,y1,x2,y2,c)
13d04     A4 F8 BF FD | 	call	#_hg010b_spin2_draw
13d08     A7 F0 03 F6 | 	mov	ptra, fp
13d0c     B2 00 A0 FD | 	call	#popregs_
13d10                 | _hg010b_spin2_frame_ret
13d10     2D 00 64 FD | 	ret
13d14                 | 
13d14                 | ' 
13d14                 | ' '-- A box (a filled rectangle) ----------------------------------------
13d14                 | ' 
13d14                 | ' pub box(x1,y1,x2,y2,c) |yy
13d14                 | _hg010b_spin2_box
13d14     06 4A 05 F6 | 	mov	COUNT_, #6
13d18     A8 00 A0 FD | 	call	#pushregs_
13d1c     09 1F 02 F6 | 	mov	local01, arg01
13d20     0A 21 02 F6 | 	mov	local02, arg02
13d24     0B 23 02 F6 | 	mov	local03, arg03
13d28     0C 25 02 F6 | 	mov	local04, arg04
13d2c     0D 27 02 F6 | 	mov	local05, arg05
13d30                 | ' 
13d30                 | ' repeat yy from y1 to y2
13d30     10 25 52 F2 | 	cmps	local04, local02 wc
13d34     01 28 86 F6 | 	negc	local06, #1
13d38     14 25 02 F1 | 	add	local04, local06
13d3c                 | LR__1610
13d3c                 | '   fastline(x1,x2,yy,c)
13d3c     0F 13 02 F6 | 	mov	arg01, local01
13d40     11 15 02 F6 | 	mov	arg02, local03
13d44     13 19 02 F6 | 	mov	arg04, local05
13d48     10 17 02 F6 | 	mov	arg03, local02
13d4c     44 F7 BF FD | 	call	#_hg010b_spin2_fastline
13d50     14 21 02 F1 | 	add	local02, local06
13d54     12 21 0A F2 | 	cmp	local02, local04 wz
13d58     E0 FF 9F 5D |  if_ne	jmp	#LR__1610
13d5c     A7 F0 03 F6 | 	mov	ptra, fp
13d60     B2 00 A0 FD | 	call	#popregs_
13d64                 | _hg010b_spin2_box_ret
13d64     2D 00 64 FD | 	ret
13d68                 | 
13d68                 | '       
13d68                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
13d68                 | _hg010b_spin2_putcharxycgf
13d68                 | ' 
13d68                 | '  
13d68                 | ' repeat yy from 0 to 15
13d68     00 00 06 F6 | 	mov	_var01, #0
13d6c     97 8C 48 FB | 	callpa	#(@LR__1622-@LR__1620)>>2,fcache_load_ptr_
13d70                 | LR__1620
13d70                 | ' 
13d70                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
13d70     91 E4 05 F1 | 	add	objptr, #145
13d74     F2 02 02 FB | 	rdlong	_var02, objptr
13d78     0A 02 66 F0 | 	shl	_var02, #10
13d7c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
13d80     01 05 02 F1 | 	add	_var03, _var02
13d84     0B 03 02 F6 | 	mov	_var02, arg03
13d88     04 02 66 F0 | 	shl	_var02, #4
13d8c     01 05 02 F1 | 	add	_var03, _var02
13d90     00 05 02 F1 | 	add	_var03, _var01
13d94     02 05 C2 FA | 	rdbyte	_var03, _var03
13d98                 | '   asm
13d98     00 04 0E F4 | 	testb	_var03, #0 wz
13d9c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
13da0     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
13da4     01 04 0E F4 | 	testb	_var03, #1 wz
13da8     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
13dac     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
13db0     02 04 0E F4 | 	testb	_var03, #2 wz
13db4     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
13db8     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
13dbc     03 04 0E F4 | 	testb	_var03, #3 wz
13dc0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
13dc4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
13dc8     04 04 0E F4 | 	testb	_var03, #4 wz
13dcc     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
13dd0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
13dd4     05 04 0E F4 | 	testb	_var03, #5 wz
13dd8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
13ddc     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
13de0     06 04 0E F4 | 	testb	_var03, #6 wz
13de4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
13de8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
13dec     07 04 0E F4 | 	testb	_var03, #7 wz
13df0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
13df4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
13df8                 | '   
13df8                 | '   ccc[0]:=c1
13df8     99 E5 05 F1 | 	add	objptr, #409
13dfc     F2 06 62 FC | 	wrlong	_var04, objptr
13e00                 | '   ccc[1]:=c2 
13e00     04 E4 05 F1 | 	add	objptr, #4
13e04     F2 08 62 FC | 	wrlong	_var05, objptr
13e08                 | '   long[mailbox0][2]:=8
13e08     49 E4 85 F1 | 	sub	objptr, #73
13e0c     F2 04 02 FB | 	rdlong	_var03, objptr
13e10     08 04 06 F1 | 	add	_var03, #8
13e14     02 11 68 FC | 	wrlong	#8, _var03
13e18                 | '   long[mailbox0][1]:=@ccc
13e18     45 E4 05 F1 | 	add	objptr, #69
13e1c     F2 04 02 F6 | 	mov	_var03, objptr
13e20     45 E4 85 F1 | 	sub	objptr, #69
13e24     F2 02 02 FB | 	rdlong	_var02, objptr
13e28     04 02 06 F1 | 	add	_var02, #4
13e2c     01 05 62 FC | 	wrlong	_var03, _var02
13e30                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
13e30     0C E5 85 F1 | 	sub	objptr, #268
13e34     F2 04 02 FB | 	rdlong	_var03, objptr
13e38     0A 03 02 F6 | 	mov	_var02, arg02
13e3c     00 03 02 F1 | 	add	_var02, _var01
13e40     0A 02 66 F0 | 	shl	_var02, #10
13e44     09 0B 02 F6 | 	mov	_var06, arg01
13e48     02 0A 66 F0 | 	shl	_var06, #2
13e4c     05 03 02 F1 | 	add	_var02, _var06
13e50     01 05 02 F1 | 	add	_var03, _var02
13e54     00 00 78 FF 
13e58     00 04 06 F1 | 	add	_var03, ##-268435456
13e5c     0C E5 05 F1 | 	add	objptr, #268
13e60     F2 0A 02 FB | 	rdlong	_var06, objptr
13e64     05 05 62 FC | 	wrlong	_var03, _var06
13e68                 | '   repeat
13e68                 | LR__1621
13e68     F2 04 02 FB | 	rdlong	_var03, objptr
13e6c     02 03 02 FB | 	rdlong	_var02, _var03
13e70     00 02 56 F2 | 	cmps	_var02, #0 wc
13e74     F0 FF 9F CD |  if_b	jmp	#LR__1621
13e78     E5 E5 85 F1 | 	sub	objptr, #485
13e7c     01 00 06 F1 | 	add	_var01, #1
13e80     10 00 56 F2 | 	cmps	_var01, #16 wc
13e84     E8 FE 9F CD |  if_b	jmp	#LR__1620
13e88                 | LR__1622
13e88                 | _hg010b_spin2_putcharxycgf_ret
13e88     2D 00 64 FD | 	ret
13e8c                 | 
13e8c                 | ' 
13e8c                 | ' 
13e8c                 | ' '**********************************************************************r***
13e8c                 | ' '                                                                        *
13e8c                 | ' ' Font related functions                                                 *
13e8c                 | ' '                                                                        *
13e8c                 | ' '*************************************************************************
13e8c                 | ' 
13e8c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
13e8c                 | ' 
13e8c                 | ' pub setfontfamily(afontnum)
13e8c                 | _hg010b_spin2_setfontfamily
13e8c                 | ' 
13e8c                 | ' font_family:=afontnum
13e8c     91 E4 05 F1 | 	add	objptr, #145
13e90     F2 12 62 FC | 	wrlong	arg01, objptr
13e94     91 E4 85 F1 | 	sub	objptr, #145
13e98                 | ' 'if afontnum==8
13e98                 | ' '  font_ptr:=@amiga_font
13e98                 | ' 
13e98                 | ' if afontnum==4
13e98     04 12 0E F2 | 	cmp	arg01, #4 wz
13e9c                 | '   font_ptr:=@st_font
13e9c     08 00 00 AF 
13ea0     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
13ea4     04 E4 05 A1 |  if_e	add	objptr, #4
13ea8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
13eac     04 E4 85 A1 |  if_e	sub	objptr, #4
13eb0     08 00 00 AF 
13eb4     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
13eb8                 | ' if afontnum==0
13eb8     00 12 0E F2 | 	cmp	arg01, #0 wz
13ebc                 | '   font_ptr:=@vga_font
13ebc     04 E4 05 A1 |  if_e	add	objptr, #4
13ec0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
13ec4     04 E4 85 A1 |  if_e	sub	objptr, #4
13ec8                 | _hg010b_spin2_setfontfamily_ret
13ec8     2D 00 64 FD | 	ret
13ecc                 | 
13ecc                 | ' 
13ecc                 | ' '*************************************************************************
13ecc                 | ' '                                                                        *
13ecc                 | ' '  Cursor functions                                                      *
13ecc                 | ' '                                                                        *
13ecc                 | ' '*************************************************************************
13ecc                 | ' 
13ecc                 | ' 
13ecc                 | ' pub setcursorpos(x,y)
13ecc                 | _hg010b_spin2_setcursorpos
13ecc                 | ' 
13ecc                 | ' ''---------- Set the (x,y) position of cursor
13ecc                 | ' 
13ecc                 | ' cursor_x:=x
13ecc     38 E4 05 F1 | 	add	objptr, #56
13ed0     F2 12 52 FC | 	wrword	arg01, objptr
13ed4                 | ' cursor_y:=y
13ed4     02 E4 05 F1 | 	add	objptr, #2
13ed8     F2 14 42 FC | 	wrbyte	arg02, objptr
13edc                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
13edc     02 E4 85 F1 | 	sub	objptr, #2
13ee0     F2 14 E2 FA | 	rdword	arg02, objptr
13ee4     02 14 66 F0 | 	shl	arg02, #2
13ee8     02 E4 05 F1 | 	add	objptr, #2
13eec     F2 16 C2 FA | 	rdbyte	arg03, objptr
13ef0     3A E4 85 F1 | 	sub	objptr, #58
13ef4     04 16 66 F0 | 	shl	arg03, #4
13ef8     11 12 06 F6 | 	mov	arg01, #17
13efc     64 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
13f00                 | _hg010b_spin2_setcursorpos_ret
13f00     2D 00 64 FD | 	ret
13f04                 | 
13f04                 | ' 
13f04                 | ' '*************************************************************************
13f04                 | ' '                                                                        *
13f04                 | ' '  VBlank functions                                                      *
13f04                 | ' '                                                                        *
13f04                 | ' '*************************************************************************
13f04                 | ' 
13f04                 | ' pub waitvbl(amount) | i
13f04                 | _hg010b_spin2_waitvbl
13f04     03 4A 05 F6 | 	mov	COUNT_, #3
13f08     A8 00 A0 FD | 	call	#pushregs_
13f0c     09 1F 02 F6 | 	mov	local01, arg01
13f10                 | ' 
13f10                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
13f10                 | ' 
13f10                 | ' repeat i from 1 to amount
13f10     01 20 06 F6 | 	mov	local02, #1
13f14     01 1E 56 F2 | 	cmps	local01, #1 wc
13f18     01 22 86 F6 | 	negc	local03, #1
13f1c     11 1F 02 F1 | 	add	local01, local03
13f20                 | LR__1630
13f20                 | '   repeat until vblank==0
13f20                 | LR__1631
13f20     45 E4 05 F1 | 	add	objptr, #69
13f24     F2 12 0A FB | 	rdlong	arg01, objptr wz
13f28     45 E4 85 F1 | 	sub	objptr, #69
13f2c     0C 00 90 AD |  if_e	jmp	#LR__1632
13f30                 | '     waitus(100)
13f30     64 12 06 F6 | 	mov	arg01, #100
13f34     7C 16 B0 FD | 	call	#__system___waitus
13f38     E4 FF 9F FD | 	jmp	#LR__1631
13f3c                 | LR__1632
13f3c                 | '   repeat until vblank==1
13f3c                 | LR__1633
13f3c     45 E4 05 F1 | 	add	objptr, #69
13f40     F2 12 02 FB | 	rdlong	arg01, objptr
13f44     45 E4 85 F1 | 	sub	objptr, #69
13f48     01 12 0E F2 | 	cmp	arg01, #1 wz
13f4c     0C 00 90 AD |  if_e	jmp	#LR__1634
13f50                 | '     waitus(100)
13f50     64 12 06 F6 | 	mov	arg01, #100
13f54     5C 16 B0 FD | 	call	#__system___waitus
13f58     E0 FF 9F FD | 	jmp	#LR__1633
13f5c                 | LR__1634
13f5c     11 21 02 F1 | 	add	local02, local03
13f60     0F 21 0A F2 | 	cmp	local02, local01 wz
13f64     B8 FF 9F 5D |  if_ne	jmp	#LR__1630
13f68     A7 F0 03 F6 | 	mov	ptra, fp
13f6c     B2 00 A0 FD | 	call	#popregs_
13f70                 | _hg010b_spin2_waitvbl_ret
13f70     2D 00 64 FD | 	ret
13f74                 | 
13f74                 | ' 
13f74                 | ' 
13f74                 | ' pub cls(fc,bc)   :c,i
13f74                 | _hg010b_spin2_cls
13f74     02 4A 05 F6 | 	mov	COUNT_, #2
13f78     A8 00 A0 FD | 	call	#pushregs_
13f7c     09 1F 02 F6 | 	mov	local01, arg01
13f80     0A 21 02 F6 | 	mov	local02, arg02
13f84                 | ' 
13f84                 | ' c:=bc
13f84                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
13f84     D9 E4 05 F1 | 	add	objptr, #217
13f88     F2 12 02 FB | 	rdlong	arg01, objptr
13f8c     A5 E4 85 F1 | 	sub	objptr, #165
13f90     F2 16 02 FB | 	rdlong	arg03, objptr
13f94     02 16 66 F0 | 	shl	arg03, #2
13f98     10 15 02 F6 | 	mov	arg02, local02
13f9c     00 18 06 F6 | 	mov	arg04, #0
13fa0     01 1A 06 F6 | 	mov	arg05, #1
13fa4     0B 00 00 FF 
13fa8     8C E4 05 F1 | 	add	objptr, ##5772
13fac     F0 08 B0 FD | 	call	#_psram_spin2_fill
13fb0                 | ' setwritecolors(fc,bc)
13fb0                 | ' 
13fb0                 | ' write_color:=ff
13fb0     0B 00 00 FF 
13fb4     83 E4 85 F1 | 	sub	objptr, ##5763
13fb8     F2 1E 62 FC | 	wrlong	local01, objptr
13fbc                 | ' write_background:=bb
13fbc     04 E4 05 F1 | 	add	objptr, #4
13fc0     F2 20 62 FC | 	wrlong	local02, objptr
13fc4                 | ' cursor_x:=0
13fc4     09 E4 85 F1 | 	sub	objptr, #9
13fc8     F2 00 58 FC | 	wrword	#0, objptr
13fcc                 | ' cursor_y:=0
13fcc     02 E4 05 F1 | 	add	objptr, #2
13fd0     F2 00 48 FC | 	wrbyte	#0, objptr
13fd4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
13fd4     02 E4 85 F1 | 	sub	objptr, #2
13fd8     F2 14 E2 FA | 	rdword	arg02, objptr
13fdc     02 14 66 F0 | 	shl	arg02, #2
13fe0     02 E4 05 F1 | 	add	objptr, #2
13fe4     F2 16 C2 FA | 	rdbyte	arg03, objptr
13fe8     3A E4 85 F1 | 	sub	objptr, #58
13fec     04 16 66 F0 | 	shl	arg03, #4
13ff0     11 12 06 F6 | 	mov	arg01, #17
13ff4     6C F2 BF FD | 	call	#_hg010b_spin2_setspritepos
13ff8                 | ' setcursorcolor(fc)
13ff8     0F 13 02 F6 | 	mov	arg01, local01
13ffc     20 EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
14000     10 FB 01 F6 | 	mov	result1, local02
14004     00 FC 05 F6 | 	mov	result2, #0
14008     A7 F0 03 F6 | 	mov	ptra, fp
1400c     B2 00 A0 FD | 	call	#popregs_
14010                 | _hg010b_spin2_cls_ret
14010     2D 00 64 FD | 	ret
14014                 | 
14014                 | ' 
14014                 | ' ''---------- Output a char at the cursor position, move the cursor 
14014                 | ' 
14014                 | ' pub putchar(achar) | c,x,y,l,newcpl
14014                 | _hg010b_spin2_putchar
14014     01 4A 05 F6 | 	mov	COUNT_, #1
14018     A8 00 A0 FD | 	call	#pushregs_
1401c     09 1F 02 F6 | 	mov	local01, arg01
14020                 | ' 
14020                 | ' if achar==10
14020     0A 1E 0E F2 | 	cmp	local01, #10 wz
14024                 | '   crlf()
14024     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
14028                 | ' if achar==9
14028     09 1E 0E F2 | 	cmp	local01, #9 wz
1402c     18 00 90 5D |  if_ne	jmp	#LR__1640
14030                 | '   cursor_x:=(cursor_x& %11110000)+16
14030     38 E4 05 F1 | 	add	objptr, #56
14034     F2 16 E2 FA | 	rdword	arg03, objptr
14038     F0 16 06 F5 | 	and	arg03, #240
1403c     10 16 06 F1 | 	add	arg03, #16
14040     F2 16 52 FC | 	wrword	arg03, objptr
14044     38 E4 85 F1 | 	sub	objptr, #56
14048                 | LR__1640
14048                 | '   
14048                 | ' if (achar<>9) && (achar<>10) 
14048     09 1E 0E F2 | 	cmp	local01, #9 wz
1404c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
14050     44 00 90 AD |  if_e	jmp	#LR__1641
14054                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14054     38 E4 05 F1 | 	add	objptr, #56
14058     F2 12 E2 FA | 	rdword	arg01, objptr
1405c     02 E4 05 F1 | 	add	objptr, #2
14060     F2 14 C2 FA | 	rdbyte	arg02, objptr
14064     04 14 66 F0 | 	shl	arg02, #4
14068     03 E4 05 F1 | 	add	objptr, #3
1406c     F2 18 02 FB | 	rdlong	arg04, objptr
14070     04 E4 05 F1 | 	add	objptr, #4
14074     F2 1A 02 FB | 	rdlong	arg05, objptr
14078     41 E4 85 F1 | 	sub	objptr, #65
1407c     0F 17 02 F6 | 	mov	arg03, local01
14080     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
14084                 | '   cursor_x+=2
14084     38 E4 05 F1 | 	add	objptr, #56
14088     F2 1E E2 FA | 	rdword	local01, objptr
1408c     02 1E 06 F1 | 	add	local01, #2
14090     F2 1E 52 FC | 	wrword	local01, objptr
14094     38 E4 85 F1 | 	sub	objptr, #56
14098                 | LR__1641
14098                 | ' 
14098                 | ' if cursor_x>=256
14098     38 E4 05 F1 | 	add	objptr, #56
1409c     F2 1E E2 FA | 	rdword	local01, objptr
140a0     38 E4 85 F1 | 	sub	objptr, #56
140a4     00 1F 56 F2 | 	cmps	local01, #256 wc
140a8     64 00 90 CD |  if_b	jmp	#LR__1643
140ac                 | '   cursor_x:=0
140ac     38 E4 05 F1 | 	add	objptr, #56
140b0     F2 00 58 FC | 	wrword	#0, objptr
140b4                 | '   cursor_y+=1
140b4     02 E4 05 F1 | 	add	objptr, #2
140b8     F2 1E C2 FA | 	rdbyte	local01, objptr
140bc     01 1E 06 F1 | 	add	local01, #1
140c0     F2 1E 42 FC | 	wrbyte	local01, objptr
140c4                 | '   if cursor_y>st_lines-1
140c4     C3 E4 05 F1 | 	add	objptr, #195
140c8     F2 1E 02 FB | 	rdlong	local01, objptr
140cc     01 1E 86 F1 | 	sub	local01, #1
140d0     C3 E4 85 F1 | 	sub	objptr, #195
140d4     F2 16 C2 FA | 	rdbyte	arg03, objptr
140d8     3A E4 85 F1 | 	sub	objptr, #58
140dc     0F 17 5A F2 | 	cmps	arg03, local01 wcz
140e0     2C 00 90 ED |  if_be	jmp	#LR__1642
140e4                 | '     scrollup()
140e4     00 12 06 F6 | 	mov	arg01, #0
140e8     01 00 00 FF 
140ec     40 14 06 F6 | 	mov	arg02, ##576
140f0     10 16 06 F6 | 	mov	arg03, #16
140f4     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
140f8                 | '     cursor_y:=st_lines-1
140f8     FD E4 05 F1 | 	add	objptr, #253
140fc     F2 1E 02 FB | 	rdlong	local01, objptr
14100     01 1E 86 F1 | 	sub	local01, #1
14104     C3 E4 85 F1 | 	sub	objptr, #195
14108     F2 1E 42 FC | 	wrbyte	local01, objptr
1410c     3A E4 85 F1 | 	sub	objptr, #58
14110                 | LR__1642
14110                 | LR__1643
14110                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14110     38 E4 05 F1 | 	add	objptr, #56
14114     F2 14 E2 FA | 	rdword	arg02, objptr
14118     02 14 66 F0 | 	shl	arg02, #2
1411c     02 E4 05 F1 | 	add	objptr, #2
14120     F2 16 C2 FA | 	rdbyte	arg03, objptr
14124     3A E4 85 F1 | 	sub	objptr, #58
14128     04 16 66 F0 | 	shl	arg03, #4
1412c     11 12 06 F6 | 	mov	arg01, #17
14130     30 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
14134     A7 F0 03 F6 | 	mov	ptra, fp
14138     B2 00 A0 FD | 	call	#popregs_
1413c                 | _hg010b_spin2_putchar_ret
1413c     2D 00 64 FD | 	ret
14140                 | 
14140                 | '     
14140                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
14140                 | ' 
14140                 | ' pub putchar2(achar) | c,x,y,l,newcpl
14140                 | _hg010b_spin2_putchar2
14140     01 4A 05 F6 | 	mov	COUNT_, #1
14144     A8 00 A0 FD | 	call	#pushregs_
14148                 | ' 
14148                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14148     38 E4 05 F1 | 	add	objptr, #56
1414c     F2 1E E2 FA | 	rdword	local01, objptr
14150     02 E4 05 F1 | 	add	objptr, #2
14154     F2 14 C2 FA | 	rdbyte	arg02, objptr
14158     04 14 66 F0 | 	shl	arg02, #4
1415c     09 17 02 F6 | 	mov	arg03, arg01
14160     03 E4 05 F1 | 	add	objptr, #3
14164     F2 18 02 FB | 	rdlong	arg04, objptr
14168     04 E4 05 F1 | 	add	objptr, #4
1416c     F2 1A 02 FB | 	rdlong	arg05, objptr
14170     41 E4 85 F1 | 	sub	objptr, #65
14174     0F 13 02 F6 | 	mov	arg01, local01
14178     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
1417c                 | ' cursor_x+=2
1417c     38 E4 05 F1 | 	add	objptr, #56
14180     F2 1E E2 FA | 	rdword	local01, objptr
14184     02 1E 06 F1 | 	add	local01, #2
14188     F2 1E 52 FC | 	wrword	local01, objptr
1418c                 | ' if cursor_x>=256
1418c     F2 1E E2 FA | 	rdword	local01, objptr
14190     38 E4 85 F1 | 	sub	objptr, #56
14194     00 1F 56 F2 | 	cmps	local01, #256 wc
14198     64 00 90 CD |  if_b	jmp	#LR__1651
1419c                 | '   cursor_x:=0
1419c     38 E4 05 F1 | 	add	objptr, #56
141a0     F2 00 58 FC | 	wrword	#0, objptr
141a4                 | '   cursor_y+=1
141a4     02 E4 05 F1 | 	add	objptr, #2
141a8     F2 1E C2 FA | 	rdbyte	local01, objptr
141ac     01 1E 06 F1 | 	add	local01, #1
141b0     F2 1E 42 FC | 	wrbyte	local01, objptr
141b4                 | '   if cursor_y>st_lines-1
141b4     C3 E4 05 F1 | 	add	objptr, #195
141b8     F2 1E 02 FB | 	rdlong	local01, objptr
141bc     01 1E 86 F1 | 	sub	local01, #1
141c0     C3 E4 85 F1 | 	sub	objptr, #195
141c4     F2 1A C2 FA | 	rdbyte	arg05, objptr
141c8     3A E4 85 F1 | 	sub	objptr, #58
141cc     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
141d0     2C 00 90 ED |  if_be	jmp	#LR__1650
141d4                 | '     scrollup()
141d4     00 12 06 F6 | 	mov	arg01, #0
141d8     01 00 00 FF 
141dc     40 14 06 F6 | 	mov	arg02, ##576
141e0     10 16 06 F6 | 	mov	arg03, #16
141e4     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
141e8                 | '     cursor_y:=st_lines-1
141e8     FD E4 05 F1 | 	add	objptr, #253
141ec     F2 1E 02 FB | 	rdlong	local01, objptr
141f0     01 1E 86 F1 | 	sub	local01, #1
141f4     C3 E4 85 F1 | 	sub	objptr, #195
141f8     F2 1E 42 FC | 	wrbyte	local01, objptr
141fc     3A E4 85 F1 | 	sub	objptr, #58
14200                 | LR__1650
14200                 | LR__1651
14200                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
14200     38 E4 05 F1 | 	add	objptr, #56
14204     F2 14 E2 FA | 	rdword	arg02, objptr
14208     02 14 66 F0 | 	shl	arg02, #2
1420c     02 E4 05 F1 | 	add	objptr, #2
14210     F2 16 C2 FA | 	rdbyte	arg03, objptr
14214     3A E4 85 F1 | 	sub	objptr, #58
14218     04 16 66 F0 | 	shl	arg03, #4
1421c     11 12 06 F6 | 	mov	arg01, #17
14220     40 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
14224     A7 F0 03 F6 | 	mov	ptra, fp
14228     B2 00 A0 FD | 	call	#popregs_
1422c                 | _hg010b_spin2_putchar2_ret
1422c     2D 00 64 FD | 	ret
14230                 | 
14230                 | ' ''--------- Output a string at the cursor position, move the cursor  
14230                 | ' 
14230                 | ' pub write(text) | iii,c,ncx,ncy
14230                 | _hg010b_spin2_write
14230     04 4A 05 F6 | 	mov	COUNT_, #4
14234     A8 00 A0 FD | 	call	#pushregs_
14238     09 1F 02 F6 | 	mov	local01, arg01
1423c                 | ' 
1423c                 | ' repeat iii from 0 to strsize(text)-1
1423c     00 20 06 F6 | 	mov	local02, #0
14240     0F 13 02 F6 | 	mov	arg01, local01
14244     09 23 02 F6 | 	mov	local03, arg01
14248     97 06 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
1424c                 | LR__1660
1424c     11 FB C9 FA | 	rdbyte	result1, local03 wz
14250     01 22 06 51 |  if_ne	add	local03, #1
14254     F4 FF 9F 5D |  if_ne	jmp	#LR__1660
14258                 | LR__1661
14258     09 23 82 F1 | 	sub	local03, arg01
1425c     01 22 86 F1 | 	sub	local03, #1
14260     00 22 56 F2 | 	cmps	local03, #0 wc
14264     01 24 86 F6 | 	negc	local04, #1
14268     12 23 02 F1 | 	add	local03, local04
1426c                 | LR__1662
1426c                 | '   putchar2(byte[text+iii])
1426c     0F 13 02 F6 | 	mov	arg01, local01
14270     10 13 02 F1 | 	add	arg01, local02
14274     09 13 C2 FA | 	rdbyte	arg01, arg01
14278     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
1427c     12 21 02 F1 | 	add	local02, local04
14280     11 21 0A F2 | 	cmp	local02, local03 wz
14284     E4 FF 9F 5D |  if_ne	jmp	#LR__1662
14288     A7 F0 03 F6 | 	mov	ptra, fp
1428c     B2 00 A0 FD | 	call	#popregs_
14290                 | _hg010b_spin2_write_ret
14290     2D 00 64 FD | 	ret
14294                 | 
14294                 | ' 
14294                 | ' ''-----------  Scroll the screen one line up
14294                 | ' 
14294                 | ' pub scrollup(start=0, end=576 , amount=16) | i
14294                 | _hg010b_spin2_scrollup
14294     01 4A 05 F6 | 	mov	COUNT_, #1
14298     A8 00 A0 FD | 	call	#pushregs_
1429c                 | ' 	
1429c                 | ' repeat i from 0 to 559 
1429c     00 1E 06 F6 | 	mov	local01, #0
142a0                 | LR__1670
142a0     F5 E4 05 F1 | 	add	objptr, #245
142a4     F2 18 02 FB | 	rdlong	arg04, objptr
142a8     1C E4 85 F1 | 	sub	objptr, #28
142ac     F2 14 02 FB | 	rdlong	arg02, objptr
142b0     0F 13 02 F6 | 	mov	arg01, local01
142b4     10 12 06 F1 | 	add	arg01, #16
142b8     02 12 66 F0 | 	shl	arg01, #2
142bc     14 E4 05 F1 | 	add	objptr, #20
142c0     F2 16 02 FB | 	rdlong	arg03, objptr
142c4     0B 13 02 FD | 	qmul	arg01, arg03
142c8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
142c8     F6 03 00 FF 
142cc     00 12 06 F6 | 	mov	arg01, ##519168
142d0     0C 13 82 F1 | 	sub	arg01, arg04
142d4     02 16 66 F0 | 	shl	arg03, #2
142d8     0A 00 00 FF 
142dc     D3 E5 05 F1 | 	add	objptr, ##5587
142e0     18 18 62 FD | 	getqx	arg04
142e4     0C 15 02 F1 | 	add	arg02, arg04
142e8     7C 04 B0 FD | 	call	#_psram_spin2_read1
142ec     0A 00 00 FF 
142f0     CB E5 85 F1 | 	sub	objptr, ##5579
142f4     F2 18 02 FB | 	rdlong	arg04, objptr
142f8     1C E4 85 F1 | 	sub	objptr, #28
142fc     F2 14 02 FB | 	rdlong	arg02, objptr
14300     0F 13 02 F6 | 	mov	arg01, local01
14304     02 12 66 F0 | 	shl	arg01, #2
14308     14 E4 05 F1 | 	add	objptr, #20
1430c     F2 16 02 FB | 	rdlong	arg03, objptr
14310     0B 13 02 FD | 	qmul	arg01, arg03
14314                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
14314     F6 03 00 FF 
14318     00 12 06 F6 | 	mov	arg01, ##519168
1431c     0C 13 82 F1 | 	sub	arg01, arg04
14320     02 16 66 F0 | 	shl	arg03, #2
14324     0A 00 00 FF 
14328     D3 E5 05 F1 | 	add	objptr, ##5587
1432c     18 18 62 FD | 	getqx	arg04
14330     0C 15 02 F1 | 	add	arg02, arg04
14334     CC 04 B0 FD | 	call	#_psram_spin2_write
14338     0B 00 00 FF 
1433c     C0 E4 85 F1 | 	sub	objptr, ##5824
14340     01 1E 06 F1 | 	add	local01, #1
14344     01 00 00 FF 
14348     30 1E 56 F2 | 	cmps	local01, ##560 wc
1434c     50 FF 9F CD |  if_b	jmp	#LR__1670
14350                 | ' 
14350                 | ' repeat i from 560 to 575
14350     01 00 00 FF 
14354     30 1E 06 F6 | 	mov	local01, ##560
14358                 | LR__1671
14358                 | '    fastline(0,1023,i,write_background)   
14358     41 E4 05 F1 | 	add	objptr, #65
1435c     F2 18 02 FB | 	rdlong	arg04, objptr
14360     41 E4 85 F1 | 	sub	objptr, #65
14364     00 12 06 F6 | 	mov	arg01, #0
14368     09 14 CE F9 | 	bmask	arg02, #9
1436c     0F 17 02 F6 | 	mov	arg03, local01
14370     20 F1 BF FD | 	call	#_hg010b_spin2_fastline
14374     01 1E 06 F1 | 	add	local01, #1
14378     01 00 00 FF 
1437c     40 1E 16 F2 | 	cmp	local01, ##576 wc
14380     D4 FF 9F CD |  if_b	jmp	#LR__1671
14384     A7 F0 03 F6 | 	mov	ptra, fp
14388     B2 00 A0 FD | 	call	#popregs_
1438c                 | _hg010b_spin2_scrollup_ret
1438c     2D 00 64 FD | 	ret
14390                 | 
14390                 | ' 
14390                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
14390                 | ' 
14390                 | ' pub crlf()
14390                 | _hg010b_spin2_crlf
14390                 | ' 
14390                 | ' cursor_x:=leading_spaces*2
14390     01 00 00 FF 
14394     B2 E4 05 F1 | 	add	objptr, ##690
14398     F2 16 02 FB | 	rdlong	arg03, objptr
1439c     01 16 66 F0 | 	shl	arg03, #1
143a0     01 00 00 FF 
143a4     7A E4 85 F1 | 	sub	objptr, ##634
143a8     F2 16 52 FC | 	wrword	arg03, objptr
143ac                 | ' cursor_y+=1
143ac     02 E4 05 F1 | 	add	objptr, #2
143b0     F2 16 C2 FA | 	rdbyte	arg03, objptr
143b4     01 16 06 F1 | 	add	arg03, #1
143b8     F2 16 42 FC | 	wrbyte	arg03, objptr
143bc                 | ' if cursor_y>st_lines-1
143bc     C3 E4 05 F1 | 	add	objptr, #195
143c0     F2 16 02 FB | 	rdlong	arg03, objptr
143c4     01 16 86 F1 | 	sub	arg03, #1
143c8     C3 E4 85 F1 | 	sub	objptr, #195
143cc     F2 14 C2 FA | 	rdbyte	arg02, objptr
143d0     3A E4 85 F1 | 	sub	objptr, #58
143d4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
143d8     2C 00 90 ED |  if_be	jmp	#LR__1680
143dc                 | '   scrollup()
143dc     00 12 06 F6 | 	mov	arg01, #0
143e0     01 00 00 FF 
143e4     40 14 06 F6 | 	mov	arg02, ##576
143e8     10 16 06 F6 | 	mov	arg03, #16
143ec     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
143f0                 | '   cursor_y:=st_lines-1
143f0     FD E4 05 F1 | 	add	objptr, #253
143f4     F2 16 02 FB | 	rdlong	arg03, objptr
143f8     01 16 86 F1 | 	sub	arg03, #1
143fc     C3 E4 85 F1 | 	sub	objptr, #195
14400     F2 16 42 FC | 	wrbyte	arg03, objptr
14404     3A E4 85 F1 | 	sub	objptr, #58
14408                 | LR__1680
14408                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
14408     38 E4 05 F1 | 	add	objptr, #56
1440c     F2 14 E2 FA | 	rdword	arg02, objptr
14410     02 14 66 F0 | 	shl	arg02, #2
14414     02 E4 05 F1 | 	add	objptr, #2
14418     F2 16 C2 FA | 	rdbyte	arg03, objptr
1441c     3A E4 85 F1 | 	sub	objptr, #58
14420     04 16 66 F0 | 	shl	arg03, #4
14424     11 12 06 F6 | 	mov	arg01, #17
14428     38 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1442c                 | _hg010b_spin2_crlf_ret
1442c     2D 00 64 FD | 	ret
14430                 | 
14430                 | ' 
14430                 | ' 
14430                 | ' '*************************************************************************
14430                 | ' '                                                                        *
14430                 | ' '  Conversions                                                           *
14430                 | ' '                                                                        *
14430                 | ' '*************************************************************************
14430                 | ' 
14430                 | ' ''---------- Convert a integer to dec string, return a pointer
14430                 | ' 
14430                 | ' pub inttostr(i):result |q,pos,k,j
14430                 | _hg010b_spin2_inttostr
14430     03 4A 05 F6 | 	mov	COUNT_, #3
14434     A8 00 A0 FD | 	call	#pushregs_
14438     09 1F 0A F6 | 	mov	local01, arg01 wz
1443c                 | ' 
1443c                 | ' j:=i
1443c                 | ' pos:=10
1443c     0A 20 06 F6 | 	mov	local02, #10
14440                 | ' k:=0
14440     00 22 06 F6 | 	mov	local03, #0
14444                 | ' 
14444                 | ' if (j==0)
14444     18 00 90 5D |  if_ne	jmp	#LR__1690
14448                 | '   n_string[0]:=48
14448     49 E4 05 F1 | 	add	objptr, #73
1444c     F2 60 48 FC | 	wrbyte	#48, objptr
14450                 | '   n_string[1]:=0
14450     01 E4 05 F1 | 	add	objptr, #1
14454     F2 00 48 FC | 	wrbyte	#0, objptr
14458     4A E4 85 F1 | 	sub	objptr, #74
1445c     C4 00 90 FD | 	jmp	#LR__1697
14460                 | LR__1690
14460                 | ' 
14460                 | ' else
14460                 | '   if (j<0)
14460     0F 1F 52 F6 | 	abs	local01, local01 wc
14464                 | '     j:=0-j
14464                 | '     k:=45
14464     2D 22 06 C6 |  if_b	mov	local03, #45
14468                 | ' 
14468                 | '   n_string[11]:=0
14468     54 E4 05 F1 | 	add	objptr, #84
1446c     F2 00 48 FC | 	wrbyte	#0, objptr
14470     54 E4 85 F1 | 	sub	objptr, #84
14474     97 24 48 FB | 	callpa	#(@LR__1692-@LR__1691)>>2,fcache_load_ptr_
14478                 | '   repeat while (pos>-1)
14478                 | LR__1691
14478     00 20 56 F2 | 	cmps	local02, #0 wc
1447c     40 00 90 CD |  if_b	jmp	#LR__1693
14480     0F FB 51 F6 | 	abs	result1, local01 wc
14484     0A FA 15 FD | 	qdiv	result1, #10
14488                 | '     q:=j//10
14488     19 FA 61 FD | 	getqy	result1
1448c     FD FA 81 F6 | 	negc	result1, result1
14490     0F 1F 52 F6 | 	abs	local01, local01 wc
14494     0A 1E 16 FD | 	qdiv	local01, #10
14498                 | '     q:=48+q
14498     30 FA 05 F1 | 	add	result1, #48
1449c                 | '     n_string[pos]:=q
1449c     10 1F 02 F6 | 	mov	local01, local02
144a0     49 E4 05 F1 | 	add	objptr, #73
144a4     F2 1E 02 F1 | 	add	local01, objptr
144a8     0F FB 41 FC | 	wrbyte	result1, local01
144ac                 | '     j:=j/10
144ac     49 E4 85 F1 | 	sub	objptr, #73
144b0                 | '     pos-=1
144b0     01 20 86 F1 | 	sub	local02, #1
144b4     18 1E 62 FD | 	getqx	local01
144b8     0F 1F 82 F6 | 	negc	local01, local01
144bc     B8 FF 9F FD | 	jmp	#LR__1691
144c0                 | LR__1692
144c0                 | LR__1693
144c0                 | '   repeat while n_string[0]==48
144c0                 | LR__1694
144c0     49 E4 05 F1 | 	add	objptr, #73
144c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
144c8     49 E4 85 F1 | 	sub	objptr, #73
144cc     30 16 0E F2 | 	cmp	arg03, #48 wz
144d0     20 00 90 5D |  if_ne	jmp	#LR__1695
144d4                 | '     bytemove(@n_string,@n_string+1,12)
144d4     49 E4 05 F1 | 	add	objptr, #73
144d8     F2 12 02 F6 | 	mov	arg01, objptr
144dc     F2 14 02 F6 | 	mov	arg02, objptr
144e0     49 E4 85 F1 | 	sub	objptr, #73
144e4     01 14 06 F1 | 	add	arg02, #1
144e8     0C 16 06 F6 | 	mov	arg03, #12
144ec     84 0C B0 FD | 	call	#__system____builtin_memmove
144f0     CC FF 9F FD | 	jmp	#LR__1694
144f4                 | LR__1695
144f4                 | ' 
144f4                 | '   if k==45
144f4     2D 22 0E F2 | 	cmp	local03, #45 wz
144f8     28 00 90 5D |  if_ne	jmp	#LR__1696
144fc                 | '      bytemove(@n_string+1,@n_string,12)
144fc     49 E4 05 F1 | 	add	objptr, #73
14500     F2 12 02 F6 | 	mov	arg01, objptr
14504     01 12 06 F1 | 	add	arg01, #1
14508     F2 14 02 F6 | 	mov	arg02, objptr
1450c     49 E4 85 F1 | 	sub	objptr, #73
14510     0C 16 06 F6 | 	mov	arg03, #12
14514     5C 0C B0 FD | 	call	#__system____builtin_memmove
14518                 | '      n_string[0]:=k
14518     49 E4 05 F1 | 	add	objptr, #73
1451c     F2 22 42 FC | 	wrbyte	local03, objptr
14520     49 E4 85 F1 | 	sub	objptr, #73
14524                 | LR__1696
14524                 | LR__1697
14524                 | ' 
14524                 | ' q:=@n_string
14524     49 E4 05 F1 | 	add	objptr, #73
14528     F2 FA 01 F6 | 	mov	result1, objptr
1452c     49 E4 85 F1 | 	sub	objptr, #73
14530                 | ' return q
14530     A7 F0 03 F6 | 	mov	ptra, fp
14534     B2 00 A0 FD | 	call	#popregs_
14538                 | _hg010b_spin2_inttostr_ret
14538     2D 00 64 FD | 	ret
1453c                 | 
1453c                 | ' 
1453c                 | ' '..............................................................................
1453c                 | ' 
1453c                 | ' {{
1453c                 | ' }}
1453c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1453c                 | _psram_spin2_startx
1453c     04 4A 05 F6 | 	mov	COUNT_, #4
14540     A8 00 A0 FD | 	call	#pushregs_
14544     09 1F 02 F6 | 	mov	local01, arg01
14548     0B 21 02 F6 | 	mov	local02, arg03
1454c     0C 23 02 F6 | 	mov	local03, arg04
14550                 | '     stop() ' restart driver if required
14550     54 01 B0 FD | 	call	#_psram_spin2_stop
14554     00 1E 0E F2 | 	cmp	local01, #0 wz
14558     14 1E 06 AB |  if_e	rdlong	local01, #20
1455c     0F 15 52 F6 | 	abs	arg02, local01 wc
14560     A1 07 00 FF 
14564     40 14 16 FD | 	qdiv	arg02, ##1000000
14568                 | ' 
14568                 | '     ' use current frequency if none specified
14568                 | ' 
14568                 | '     if freq == 0 
14568                 | '         freq := clkfreq 
14568                 | ' 
14568                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
14568                 | ' 
14568                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
14568                 | '     if burst < 0
14568                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
14568     18 14 62 FD | 	getqx	arg02
1456c     0A 19 82 F6 | 	negc	arg04, arg02
14570     03 18 66 F0 | 	shl	arg04, #3
14574     84 18 86 F1 | 	sub	arg04, #132
14578     04 18 46 F0 | 	shr	arg04, #4
1457c     04 18 66 F0 | 	shl	arg04, #4
14580     00 18 56 F2 | 	cmps	arg04, #0 wc
14584     0E FA 65 C6 |  if_b	neg	result1, #14
14588     10 01 90 CD |  if_b	jmp	#LR__1703
1458c                 | ' 
1458c                 | '     ' compute the input delay
1458c                 | ' 
1458c                 | '     if delay <= 0
1458c     01 20 56 F2 | 	cmps	local02, #1 wc
14590     10 00 90 3D |  if_ae	jmp	#LR__1700
14594                 | '         delay := lookupDelay(freq)
14594     0F 13 02 F6 | 	mov	arg01, local01
14598     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1459c     FD 20 02 F6 | 	mov	local02, result1
145a0     04 00 90 FD | 	jmp	#LR__1701
145a4                 | LR__1700
145a4                 | '     else
145a4                 | '         delay <#= $f ' limit to 15
145a4     0F 20 66 F3 | 	fles	local02, #15
145a8                 | LR__1701
145a8                 | ' 
145a8                 | '     ' create our lock
145a8                 | ' 
145a8                 | '     driverlock := LOCKNEW()  
145a8     00 FA 05 F6 | 	mov	result1, #0
145ac     04 FA 61 FD | 	locknew	result1
145b0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
145b4     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
145b8                 | '     if driverlock == -1
145b8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
145bc     FF FF 7F FF 
145c0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
145c4                 | '         return ERR_NO_LOCK
145c4     1A FA 65 A6 |  if_e	neg	result1, #26
145c8     D0 00 90 AD |  if_e	jmp	#LR__1703
145cc                 | ' 
145cc                 | '     ' patch in the proper data and HUB addresses to the startup structure
145cc                 | ' 
145cc                 | '     long[@startupData][0]:=clkfreq
145cc     14 1E 06 FB | 	rdlong	local01, #20
145d0     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
145d4     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
145d8                 | ' '    long[@startupData][1]:=$1000_0000
145d8                 | '     long[@startupData][5]:=@deviceData
145d8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
145dc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
145e0     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
145e4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
145e8     14 14 06 F1 | 	add	arg02, #20
145ec     0A 1F 62 FC | 	wrlong	local01, arg02
145f0                 | '     long[@startupData][6]:=@qosData
145f0     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
145f4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
145f8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
145fc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14600     18 14 06 F1 | 	add	arg02, #24
14604     0A 1F 62 FC | 	wrlong	local01, arg02
14608                 | '     long[@startupData][7]:=$7FF00
14608     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1460c     1C 1E 06 F1 | 	add	local01, #28
14610     FF 03 80 FF 
14614     0F 01 6A FC | 	wrlong	##524032, local01
14618                 | ' 
14618                 | '     ' setup some default bank and QoS parameter values
14618                 | ' 
14618                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
14618     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1461c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
14620     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
14624     10 18 66 F0 | 	shl	arg04, #16
14628     0C 20 66 F0 | 	shl	local02, #12
1462c     10 19 42 F5 | 	or	arg04, local02
14630     18 18 46 F5 | 	or	arg04, #24
14634     0C 15 02 F6 | 	mov	arg02, arg04
14638     02 16 06 F6 | 	mov	arg03, #2
1463c     A0 00 A0 FD | 	call	#\builtin_longfill_
14640                 | '     longfill(@qosData, $FFFF0000, 8)
14640     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14644     07 16 06 F6 | 	mov	arg03, #7
14648     28 16 62 FD | 	setq	arg03
1464c     80 FF FF FF 
14650     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
14654                 | ' 
14654                 | '     ' get the address of the PSRAM memory driver so we can start it
14654                 | ' 
14654                 | '     driverAddr:= driver.getDriverAddr()
14654                 | '     return @driver_start
14654     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
14658     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1465c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
14660                 | ' 
14660                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
14660                 | ' 
14660                 | '     if desiredcog < 0
14660     00 22 56 F2 | 	cmps	local03, #0 wc
14664                 | '         desiredcog := NEWCOG
14664     10 22 06 C6 |  if_b	mov	local03, #16
14668                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
14668     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1466c     11 25 02 F6 | 	mov	local04, local03
14670     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
14674     0A 25 F2 FC | 	coginit	local04, arg02 wc
14678     01 24 66 C6 |  if_b	neg	local04, #1
1467c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14680     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
14684                 | '     repeat until long[@startupData] == 0 
14684     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
14688                 | LR__1702
14688     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1468c     F8 FF 9F 5D |  if_ne	jmp	#LR__1702
14690                 | ' 
14690                 | '     return drivercog
14690     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14694     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
14698     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1469c                 | LR__1703
1469c     A7 F0 03 F6 | 	mov	ptra, fp
146a0     B2 00 A0 FD | 	call	#popregs_
146a4                 | _psram_spin2_startx_ret
146a4     2D 00 64 FD | 	ret
146a8                 | 
146a8                 | ' 
146a8                 | ' '..............................................................................
146a8                 | ' 
146a8                 | ' {{
146a8                 | ' }}
146a8                 | ' PUB stop() : i
146a8                 | _psram_spin2_stop
146a8     00 00 06 F6 | 	mov	_var01, #0
146ac                 | '     if drivercog <> -1
146ac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
146b0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
146b4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
146b8     FF FF 7F FF 
146bc     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
146c0     70 00 90 AD |  if_e	jmp	#LR__1713
146c4                 | '         cogstop(drivercog) ' a rather brutal stop
146c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
146c8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
146cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
146d0     03 12 62 FD | 	cogstop	arg01
146d4     97 26 48 FB | 	callpa	#(@LR__1712-@LR__1710)>>2,fcache_load_ptr_
146d8                 | '         repeat i from 0 to 7
146d8                 | LR__1710
146d8                 | '             if long[$7FF00][i*3] < 0
146d8     00 FB 01 F6 | 	mov	result1, _var01
146dc     01 FA 65 F0 | 	shl	result1, #1
146e0     00 FB 01 F1 | 	add	result1, _var01
146e4     02 FA 65 F0 | 	shl	result1, #2
146e8     FF 03 00 FF 
146ec     00 FB 05 F1 | 	add	result1, ##524032
146f0     FD FA 01 FB | 	rdlong	result1, result1
146f4     00 FA 55 F2 | 	cmps	result1, #0 wc
146f8     1C 00 90 3D |  if_ae	jmp	#LR__1711
146fc                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
146fc     00 FB 01 F6 | 	mov	result1, _var01
14700     01 FA 65 F0 | 	shl	result1, #1
14704     00 FB 01 F1 | 	add	result1, _var01
14708     02 FA 65 F0 | 	shl	result1, #2
1470c     FF 03 00 FF 
14710     00 FB 05 F1 | 	add	result1, ##524032
14714     FD 20 68 FC | 	wrlong	#16, result1
14718                 | LR__1711
14718     01 00 06 F1 | 	add	_var01, #1
1471c     08 00 56 F2 | 	cmps	_var01, #8 wc
14720     B4 FF 9F CD |  if_b	jmp	#LR__1710
14724                 | LR__1712
14724                 | '         drivercog := -1
14724     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14728     FF FF FF FF 
1472c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
14730     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14734                 | LR__1713
14734                 | '     if driverlock <> -1
14734     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14738     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1473c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14740     FF FF 7F FF 
14744     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14748                 | '         LOCKRET(driverlock)
14748     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1474c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
14750     05 12 62 5D |  if_ne	lockret	arg01
14754                 | '         driverlock := -1
14754     FF FF FF 5F 
14758     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1475c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
14760     00 FB 01 F6 | 	mov	result1, _var01
14764                 | _psram_spin2_stop_ret
14764     2D 00 64 FD | 	ret
14768                 | 
14768                 | ' 
14768                 | ' '..............................................................................
14768                 | ' 
14768                 | ' {{
14768                 | ' }}
14768                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
14768                 | _psram_spin2_read1
14768                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14768                 | '     if drivercog == -1 ' driver must be running
14768     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1476c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
14770     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14774     FF FF 7F FF 
14778     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1477c                 | '         return ERR_INACTIVE
1477c     0F FA 65 A6 |  if_e	neg	result1, #15
14780     7C 00 90 AD |  if_e	jmp	#LR__1721
14784                 | '     if count == 0 ' don't even bother reading
14784     00 16 0E F2 | 	cmp	arg03, #0 wz
14788                 | '         return 0
14788     00 FA 05 A6 |  if_e	mov	result1, #0
1478c     70 00 90 AD |  if_e	jmp	#LR__1721
14790                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14790     00 FA 05 F6 | 	mov	result1, #0
14794     01 FA 61 FD | 	cogid	result1
14798     FD 00 02 F6 | 	mov	_var01, result1
1479c     01 00 66 F0 | 	shl	_var01, #1
147a0     FD 00 02 F1 | 	add	_var01, result1
147a4     02 00 66 F0 | 	shl	_var01, #2
147a8     FF 03 00 FF 
147ac     00 03 06 F6 | 	mov	_var02, ##524032
147b0     00 03 02 F1 | 	add	_var02, _var01
147b4                 | '     if long[mailbox] < 0
147b4     01 01 02 FB | 	rdlong	_var01, _var02
147b8     00 00 56 F2 | 	cmps	_var01, #0 wc
147bc                 | '         return ERR_MAILBOX_BUSY
147bc     1C FA 65 C6 |  if_b	neg	result1, #28
147c0     3C 00 90 CD |  if_b	jmp	#LR__1721
147c4                 | '     long[mailbox][2] := count
147c4     08 02 06 F1 | 	add	_var02, #8
147c8     01 17 62 FC | 	wrlong	arg03, _var02
147cc                 | '     long[mailbox][1] := dstHubAddr
147cc     04 02 86 F1 | 	sub	_var02, #4
147d0     01 13 62 FC | 	wrlong	arg01, _var02
147d4     04 02 86 F1 | 	sub	_var02, #4
147d8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
147d8     0A 05 02 F6 | 	mov	_var03, arg02
147dc     D9 04 06 F4 | 	bitl	_var03, #217
147e0     00 00 58 FF 
147e4     00 00 06 F6 | 	mov	_var01, ##-1342177280
147e8     02 01 02 F1 | 	add	_var01, _var03
147ec     01 01 62 FC | 	wrlong	_var01, _var02
147f0                 | '     repeat
147f0                 | LR__1720
147f0                 | '         result := long[mailbox]    
147f0     01 05 02 FB | 	rdlong	_var03, _var02
147f4     00 04 56 F2 | 	cmps	_var03, #0 wc
147f8     F4 FF 9F CD |  if_b	jmp	#LR__1720
147fc                 | '     while result < 0   
147fc                 | '     return -result                       'return success or error
147fc     02 FB 61 F6 | 	neg	result1, _var03
14800                 | LR__1721
14800                 | _psram_spin2_read1_ret
14800     2D 00 64 FD | 	ret
14804                 | 
14804                 | ' 
14804                 | ' '..............................................................................
14804                 | ' 
14804                 | ' {{
14804                 | ' }}
14804                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
14804                 | _psram_spin2_write
14804                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14804                 | '     if drivercog == -1 ' driver must be running
14804     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14808     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1480c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14810     FF FF 7F FF 
14814     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14818                 | '         return ERR_INACTIVE
14818     0F FA 65 A6 |  if_e	neg	result1, #15
1481c     7C 00 90 AD |  if_e	jmp	#LR__1731
14820                 | '     if count == 0 ' don't even bother writing
14820     00 16 0E F2 | 	cmp	arg03, #0 wz
14824                 | '         return 0
14824     00 FA 05 A6 |  if_e	mov	result1, #0
14828     70 00 90 AD |  if_e	jmp	#LR__1731
1482c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1482c     00 FA 05 F6 | 	mov	result1, #0
14830     01 FA 61 FD | 	cogid	result1
14834     FD 00 02 F6 | 	mov	_var01, result1
14838     01 00 66 F0 | 	shl	_var01, #1
1483c     FD 00 02 F1 | 	add	_var01, result1
14840     02 00 66 F0 | 	shl	_var01, #2
14844     FF 03 00 FF 
14848     00 03 06 F6 | 	mov	_var02, ##524032
1484c     00 03 02 F1 | 	add	_var02, _var01
14850                 | '     if long[mailbox] < 0
14850     01 01 02 FB | 	rdlong	_var01, _var02
14854     00 00 56 F2 | 	cmps	_var01, #0 wc
14858                 | '         return ERR_MAILBOX_BUSY
14858     1C FA 65 C6 |  if_b	neg	result1, #28
1485c     3C 00 90 CD |  if_b	jmp	#LR__1731
14860                 | '     long[mailbox][2] := count
14860     08 02 06 F1 | 	add	_var02, #8
14864     01 17 62 FC | 	wrlong	arg03, _var02
14868                 | '     long[mailbox][1] := srcHubAddr
14868     04 02 86 F1 | 	sub	_var02, #4
1486c     01 13 62 FC | 	wrlong	arg01, _var02
14870     04 02 86 F1 | 	sub	_var02, #4
14874                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
14874     0A 05 02 F6 | 	mov	_var03, arg02
14878     D9 04 06 F4 | 	bitl	_var03, #217
1487c     00 00 78 FF 
14880     00 00 06 F6 | 	mov	_var01, ##-268435456
14884     02 01 02 F1 | 	add	_var01, _var03
14888     01 01 62 FC | 	wrlong	_var01, _var02
1488c                 | '     repeat
1488c                 | LR__1730
1488c                 | '         result := long[mailbox]    
1488c     01 05 02 FB | 	rdlong	_var03, _var02
14890     00 04 56 F2 | 	cmps	_var03, #0 wc
14894     F4 FF 9F CD |  if_b	jmp	#LR__1730
14898                 | '     while result < 0   
14898                 | '     return -result                       'return success or error
14898     02 FB 61 F6 | 	neg	result1, _var03
1489c                 | LR__1731
1489c                 | _psram_spin2_write_ret
1489c     2D 00 64 FD | 	ret
148a0                 | 
148a0                 | ' 
148a0                 | ' ' generalized fill
148a0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
148a0                 | _psram_spin2_fill
148a0     09 01 02 F6 | 	mov	_var01, arg01
148a4     0A 03 02 F6 | 	mov	_var02, arg02
148a8     0B 05 02 F6 | 	mov	_var03, arg03
148ac     0D 07 02 F6 | 	mov	_var04, arg05
148b0                 | '     case datasize 
148b0     01 06 86 F1 | 	sub	_var04, #1
148b4     04 06 26 F3 | 	fle	_var04, #4
148b8     30 06 62 FD | 	jmprel	_var04
148bc                 | LR__1740
148bc     10 00 90 FD | 	jmp	#LR__1741
148c0     18 00 90 FD | 	jmp	#LR__1742
148c4     2C 00 90 FD | 	jmp	#LR__1744
148c8     1C 00 90 FD | 	jmp	#LR__1743
148cc     24 00 90 FD | 	jmp	#LR__1744
148d0                 | LR__1741
148d0                 | '         1: req := driver.R_WRITEBYTE
148d0     00 00 60 FF 
148d4     00 08 06 F6 | 	mov	_var05, ##-1073741824
148d8     20 00 90 FD | 	jmp	#LR__1745
148dc                 | LR__1742
148dc                 | '         2: req := driver.R_WRITEWORD
148dc     00 00 68 FF 
148e0     00 08 06 F6 | 	mov	_var05, ##-805306368
148e4     14 00 90 FD | 	jmp	#LR__1745
148e8                 | LR__1743
148e8                 | '         4: req := driver.R_WRITELONG
148e8     00 00 70 FF 
148ec     00 08 06 F6 | 	mov	_var05, ##-536870912
148f0     08 00 90 FD | 	jmp	#LR__1745
148f4                 | LR__1744
148f4                 | '         other : return ERR_INVALID
148f4     06 FA 65 F6 | 	neg	result1, #6
148f8     94 00 90 FD | 	jmp	#LR__1747
148fc                 | LR__1745
148fc                 | '     if count == 0   ' nothing to do
148fc     00 04 0E F2 | 	cmp	_var03, #0 wz
14900                 | '         return 0
14900     00 FA 05 A6 |  if_e	mov	result1, #0
14904     88 00 90 AD |  if_e	jmp	#LR__1747
14908                 | '     if drivercog == -1
14908     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1490c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
14910     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14914     FF FF 7F FF 
14918     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1491c                 | '         return ERR_INACTIVE
1491c     0F FA 65 A6 |  if_e	neg	result1, #15
14920     6C 00 90 AD |  if_e	jmp	#LR__1747
14924                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
14924     00 FA 05 F6 | 	mov	result1, #0
14928     01 FA 61 FD | 	cogid	result1
1492c     FD 06 02 F6 | 	mov	_var04, result1
14930     01 06 66 F0 | 	shl	_var04, #1
14934     FD 06 02 F1 | 	add	_var04, result1
14938     02 06 66 F0 | 	shl	_var04, #2
1493c     FF 03 00 FF 
14940     00 0B 06 F6 | 	mov	_var06, ##524032
14944     03 0B 02 F1 | 	add	_var06, _var04
14948                 | '     if long[mailbox] < 0
14948     05 07 02 FB | 	rdlong	_var04, _var06
1494c     00 06 56 F2 | 	cmps	_var04, #0 wc
14950                 | '         return ERR_MAILBOX_BUSY
14950     1C FA 65 C6 |  if_b	neg	result1, #28
14954     38 00 90 CD |  if_b	jmp	#LR__1747
14958                 | '     long[mailbox][2] := count
14958     08 0A 06 F1 | 	add	_var06, #8
1495c     05 05 62 FC | 	wrlong	_var03, _var06
14960                 | '     long[mailbox][1] := pattern
14960     04 0A 86 F1 | 	sub	_var06, #4
14964     05 03 62 FC | 	wrlong	_var02, _var06
14968     04 0A 86 F1 | 	sub	_var06, #4
1496c                 | '     long[mailbox] := req + (addr & $fffffff)
1496c     04 0D 02 F6 | 	mov	_var07, _var05
14970     00 0F 02 F6 | 	mov	_var08, _var01
14974     7C 0E 06 F4 | 	bitl	_var08, #124
14978     07 0D 02 F1 | 	add	_var07, _var08
1497c     05 0D 62 FC | 	wrlong	_var07, _var06
14980                 | '     repeat
14980                 | LR__1746
14980                 | '         r := long[mailbox]
14980     05 0F 02 FB | 	rdlong	_var08, _var06
14984     00 0E 56 F2 | 	cmps	_var08, #0 wc
14988     F4 FF 9F CD |  if_b	jmp	#LR__1746
1498c                 | '     while r < 0
1498c                 | '     return -r                  ' return 0 for success or negated error code
1498c     07 FB 61 F6 | 	neg	result1, _var08
14990                 | LR__1747
14990                 | _psram_spin2_fill_ret
14990     2D 00 64 FD | 	ret
14994                 | 
14994                 | ' 
14994                 | ' '..............................................................................
14994                 | ' 
14994                 | ' {{
14994                 | ' }}
14994                 | ' PUB setQos(cog, qos) : result | mailbox
14994                 | _psram_spin2_setQos
14994     09 01 02 F6 | 	mov	_var01, arg01
14998                 | '     if drivercog == -1 ' driver must be running
14998     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1499c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
149a0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
149a4     FF FF 7F FF 
149a8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
149ac                 | '         return ERR_INACTIVE
149ac     0F FA 65 A6 |  if_e	neg	result1, #15
149b0     9C 00 90 AD |  if_e	jmp	#LR__1754
149b4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
149b4     00 00 56 F2 | 	cmps	_var01, #0 wc
149b8     08 00 90 CD |  if_b	jmp	#LR__1750
149bc     08 00 56 F2 | 	cmps	_var01, #8 wc
149c0     08 00 90 CD |  if_b	jmp	#LR__1751
149c4                 | LR__1750
149c4                 | '         return ERR_INVALID
149c4     06 FA 65 F6 | 	neg	result1, #6
149c8     84 00 90 FD | 	jmp	#LR__1754
149cc                 | LR__1751
149cc                 | '     long[@qosData][cog] := qos & !$1ff
149cc     FF 15 26 F5 | 	andn	arg02, #511
149d0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
149d4     02 00 66 F0 | 	shl	_var01, #2
149d8     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
149dc     00 15 62 FC | 	wrlong	arg02, _var01
149e0                 | '     mailbox := $7FF00 + drivercog*12
149e0     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
149e4     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
149e8     02 07 02 F6 | 	mov	_var04, _var03
149ec     01 06 66 F0 | 	shl	_var04, #1
149f0     02 07 02 F1 | 	add	_var04, _var03
149f4     02 06 66 F0 | 	shl	_var04, #2
149f8     FF 03 00 FF 
149fc     00 09 06 F6 | 	mov	_var05, ##524032
14a00     03 09 02 F1 | 	add	_var05, _var04
14a04                 | '     repeat until LOCKTRY(driverlock)
14a04     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
14a08                 | LR__1752
14a08     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14a0c     06 12 72 FD | 	locktry	arg01 wc
14a10     F4 FF 9F 3D |  if_ae	jmp	#LR__1752
14a14     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14a18                 | '     long[mailbox] := driver.R_CONFIG + cogid()
14a18     00 06 06 F6 | 	mov	_var04, #0
14a1c     01 06 62 FD | 	cogid	_var04
14a20     00 00 78 FF 
14a24     00 02 06 F6 | 	mov	_var02, ##-268435456
14a28     03 03 02 F1 | 	add	_var02, _var04
14a2c     04 03 62 FC | 	wrlong	_var02, _var05
14a30                 | '     repeat while long[mailbox] < 0
14a30                 | LR__1753
14a30     04 03 02 FB | 	rdlong	_var02, _var05
14a34     00 02 56 F2 | 	cmps	_var02, #0 wc
14a38     F4 FF 9F CD |  if_b	jmp	#LR__1753
14a3c                 | '     LOCKREL(driverlock)
14a3c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14a40     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14a44     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14a48     07 12 72 FD | 	lockrel	arg01 wc
14a4c     00 FA 05 F6 | 	mov	result1, #0
14a50                 | LR__1754
14a50                 | _psram_spin2_setQos_ret
14a50     2D 00 64 FD | 	ret
14a54                 | 
14a54                 | ' 
14a54                 | ' '..............................................................................
14a54                 | ' 
14a54                 | ' {{
14a54                 | ' }}
14a54                 | ' PRI lookupDelay(freq) : delay | profile
14a54                 | _psram_spin2_lookupDelay
14a54                 | '     profile := @delayTable
14a54     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
14a58     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
14a5c                 | '     delay := long[profile][0]
14a5c     00 03 02 FB | 	rdlong	_var02, _var01
14a60                 | '     repeat while long[profile][1] 
14a60     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
14a64     97 16 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
14a68                 | LR__1760
14a68     04 00 06 F1 | 	add	_var01, #4
14a6c     00 FB 09 FB | 	rdlong	result1, _var01 wz
14a70     04 00 86 F1 | 	sub	_var01, #4
14a74     1C 00 90 AD |  if_e	jmp	#LR__1762
14a78                 | '         if freq +< long[profile][1] 
14a78     04 00 06 F1 | 	add	_var01, #4
14a7c     00 FB 01 FB | 	rdlong	result1, _var01
14a80     04 00 86 F1 | 	sub	_var01, #4
14a84     FD 12 12 F2 | 	cmp	arg01, result1 wc
14a88                 | '             quit
14a88                 | '         profile += 4
14a88     04 00 06 31 |  if_ae	add	_var01, #4
14a8c                 | '         delay++
14a8c     01 02 06 31 |  if_ae	add	_var02, #1
14a90     D4 FF 9F 3D |  if_ae	jmp	#LR__1760
14a94                 | LR__1761
14a94                 | LR__1762
14a94     01 FB 01 F6 | 	mov	result1, _var02
14a98                 | _psram_spin2_lookupDelay_ret
14a98     2D 00 64 FD | 	ret
14a9c                 | 
14a9c                 | ' 
14a9c                 | ' PUB start() : r
14a9c                 | _usbnew_spin2_start
14a9c     00 00 06 F6 | 	mov	_var01, #0
14aa0                 | '   ifnot driver_cog
14aa0     15 00 00 FF 
14aa4     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
14aa8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
14aac     15 00 00 FF 
14ab0     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
14ab4     38 00 90 5D |  if_ne	jmp	#LR__1770
14ab8                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
14ab8     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
14abc     10 00 06 F6 | 	mov	_var01, #16
14ac0     00 16 06 F6 | 	mov	arg03, #0
14ac4     28 16 62 FD | 	setq	arg03
14ac8     0A 01 F2 FC | 	coginit	_var01, arg02 wc
14acc     01 00 66 C6 |  if_b	neg	_var01, #1
14ad0                 | '     if r >= 0
14ad0     00 00 56 F2 | 	cmps	_var01, #0 wc
14ad4                 | '       driver_cog := r+1
14ad4     00 03 02 36 |  if_ae	mov	_var02, _var01
14ad8     01 02 06 31 |  if_ae	add	_var02, #1
14adc     15 00 00 3F 
14ae0     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
14ae4     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
14ae8     15 00 00 3F 
14aec     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
14af0                 | LR__1770
14af0     00 FB 01 F6 | 	mov	result1, _var01
14af4                 | _usbnew_spin2_start_ret
14af4     2D 00 64 FD | 	ret
14af8                 | 
14af8                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
14af8                 | ' 
14af8                 | ' '' Return key event from buffer if there is one
14af8                 | ' PUB get_key() : r | tail
14af8                 | _usbnew_spin2_get_key
14af8                 | '   tail := keyq_tail
14af8     0F 00 00 FF 
14afc     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
14b00     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
14b04                 | '   if keyq_head == tail
14b04     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
14b08     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
14b0c     0F 00 00 FF 
14b10     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
14b14     00 03 0A F2 | 	cmp	_var02, _var01 wz
14b18                 | '     return 0 ' No event
14b18     00 FA 05 A6 |  if_e	mov	result1, #0
14b1c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
14b20                 | '   r := keyq_data[tail]
14b20     00 03 02 F6 | 	mov	_var02, _var01
14b24     02 02 66 F0 | 	shl	_var02, #2
14b28     0F 00 00 FF 
14b2c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
14b30     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
14b34     01 FB 01 FB | 	rdlong	result1, _var02
14b38                 | '   if ++tail == KEYQUEUE_SIZE
14b38     01 00 06 F1 | 	add	_var01, #1
14b3c     80 00 0E F2 | 	cmp	_var01, #128 wz
14b40                 | '     tail := 0
14b40     00 00 06 A6 |  if_e	mov	_var01, #0
14b44                 | '   keyq_tail := tail
14b44     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
14b48     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
14b4c     0F 00 00 FF 
14b50     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
14b54                 | _usbnew_spin2_get_key_ret
14b54     2D 00 64 FD | 	ret
14b58                 | 
14b58                 | ' 
14b58                 | ' '' Emulate mouse movement
14b58                 | ' PUB mouse_move(x,y)
14b58                 | _usbnew_spin2_mouse_move
14b58     02 4A 05 F6 | 	mov	COUNT_, #2
14b5c     A8 00 A0 FD | 	call	#pushregs_
14b60     09 1F 02 F6 | 	mov	local01, arg01
14b64     0A 21 02 F6 | 	mov	local02, arg02
14b68                 | '   mouse_lock := 1
14b68     14 00 00 FF 
14b6c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
14b70     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
14b74     14 00 00 FF 
14b78     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
14b7c                 | '   waitus(2) ' hope driver is now done
14b7c     02 12 06 F6 | 	mov	arg01, #2
14b80     30 0A B0 FD | 	call	#__system___waitus
14b84                 | '   mouse_xacc := x
14b84     14 00 00 FF 
14b88     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
14b8c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
14b90                 | '   mouse_yacc := y
14b90     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
14b94     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
14b98                 | '   if mouse_outptr
14b98     04 00 00 FF 
14b9c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
14ba0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
14ba4     0F 00 00 FF 
14ba8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
14bac     24 00 90 AD |  if_e	jmp	#LR__1780
14bb0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
14bb0     10 20 66 F0 | 	shl	local02, #16
14bb4     0F 1F 32 F9 | 	getword	local01, local01, #0
14bb8     0F 21 42 F5 | 	or	local02, local01
14bbc     0F 00 00 FF 
14bc0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
14bc4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
14bc8     0F 00 00 FF 
14bcc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
14bd0     0F 21 62 FC | 	wrlong	local02, local01
14bd4                 | LR__1780
14bd4                 | '   mouse_lock := 0
14bd4     14 00 00 FF 
14bd8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
14bdc     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
14be0     14 00 00 FF 
14be4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
14be8     A7 F0 03 F6 | 	mov	ptra, fp
14bec     B2 00 A0 FD | 	call	#popregs_
14bf0                 | _usbnew_spin2_mouse_move_ret
14bf0     2D 00 64 FD | 	ret
14bf4                 | 
14bf4                 | '     '' Set HAVE_HIDPAD to enable.
14bf4                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
14bf4                 | ' 
14bf4                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
14bf4                 | ' PUB hidpad_id(dev) : r
14bf4                 | _usbnew_spin2_hidpad_id
14bf4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
14bf4     13 00 00 FF 
14bf8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14bfc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
14c00     09 01 02 F6 | 	mov	_var01, arg01
14c04     03 00 66 F0 | 	shl	_var01, #3
14c08     09 01 82 F1 | 	sub	_var01, arg01
14c0c     02 00 66 F0 | 	shl	_var01, #2
14c10     00 FB 01 F1 | 	add	result1, _var01
14c14     FD FA 01 FB | 	rdlong	result1, result1
14c18     13 00 00 FF 
14c1c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14c20                 | _usbnew_spin2_hidpad_id_ret
14c20     2D 00 64 FD | 	ret
14c24                 | 
14c24                 | ' 
14c24                 | ' '' Get all button states for a device
14c24                 | ' PUB hidpad_buttons(dev) : r 
14c24                 | _usbnew_spin2_hidpad_buttons
14c24                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
14c24     13 00 00 FF 
14c28     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14c2c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
14c30     09 01 02 F6 | 	mov	_var01, arg01
14c34     03 00 66 F0 | 	shl	_var01, #3
14c38     09 01 82 F1 | 	sub	_var01, arg01
14c3c     02 00 66 F0 | 	shl	_var01, #2
14c40     00 FB 01 F1 | 	add	result1, _var01
14c44     14 FA 05 F1 | 	add	result1, #20
14c48     FD FA 01 FB | 	rdlong	result1, result1
14c4c     13 00 00 FF 
14c50     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14c54                 | _usbnew_spin2_hidpad_buttons_ret
14c54     2D 00 64 FD | 	ret
14c58                 | 
14c58                 | ' 
14c58                 | ' '' Get state of an axis (normalized between -32768 and 32767)
14c58                 | ' PUB hidpad_axis(dev,axnum) : r
14c58                 | _usbnew_spin2_hidpad_axis
14c58                 | '   if axnum +>= 6
14c58     06 14 16 F2 | 	cmp	arg02, #6 wc
14c5c                 | '     return 0
14c5c     00 FA 05 36 |  if_ae	mov	result1, #0
14c60     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
14c64                 | '   else 
14c64                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
14c64     13 00 00 FF 
14c68     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14c6c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
14c70     09 01 02 F6 | 	mov	_var01, arg01
14c74     03 00 66 F0 | 	shl	_var01, #3
14c78     09 01 82 F1 | 	sub	_var01, arg01
14c7c     02 00 66 F0 | 	shl	_var01, #2
14c80     00 FB 01 F1 | 	add	result1, _var01
14c84     04 00 06 F6 | 	mov	_var01, #4
14c88     0A 01 02 F1 | 	add	_var01, arg02
14c8c     01 00 66 F0 | 	shl	_var01, #1
14c90     FD 00 02 F1 | 	add	_var01, result1
14c94     00 FB E1 FA | 	rdword	result1, _var01
14c98     0F FA 65 F7 | 	signx	result1, #15
14c9c     13 00 00 FF 
14ca0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14ca4                 | _usbnew_spin2_hidpad_axis_ret
14ca4     2D 00 64 FD | 	ret
14ca8                 | 
14ca8                 | ' 
14ca8                 | ' 
14ca8                 | ' '--------------------------------------------------------------
14ca8                 | ' '---------- Init the variables, start the cog. ----------------
14ca8                 | ' '--------------------------------------------------------------
14ca8                 | ' 
14ca8                 | ' pub start(mbox,scope,cache) :cog,base | iii
14ca8                 | _Audio093b_8_sc_spin2_start
14ca8     04 4A 05 F6 | 	mov	COUNT_, #4
14cac     A8 00 A0 FD | 	call	#pushregs_
14cb0     09 1F 02 F6 | 	mov	local01, arg01
14cb4                 | ' 
14cb4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
14cb4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
14cb4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
14cb4                 | ' 
14cb4                 | ' mailboxaddr:=mbox 
14cb4     F2 1E 62 FC | 	wrlong	local01, objptr
14cb8                 | ' scope_ptr:=scope
14cb8     04 E4 05 F1 | 	add	objptr, #4
14cbc     F2 14 62 FC | 	wrlong	arg02, objptr
14cc0                 | ' cache_ptr:=cache
14cc0     04 E4 05 F1 | 	add	objptr, #4
14cc4     F2 16 62 FC | 	wrlong	arg03, objptr
14cc8                 | ' base:=@channel1[0]
14cc8     04 E4 05 F1 | 	add	objptr, #4
14ccc     F2 20 02 F6 | 	mov	local02, objptr
14cd0                 | ' 
14cd0                 | ' repeat iii from 0 to 7
14cd0     00 22 06 F6 | 	mov	local03, #0
14cd4     01 00 00 FF 
14cd8     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
14cdc     0C E4 85 F1 | 	sub	objptr, #12
14ce0     97 80 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
14ce4                 | LR__1790
14ce4                 | '   long[base+32*iii]:=0
14ce4     10 1F 02 F6 | 	mov	local01, local02
14ce8     11 FD 01 F6 | 	mov	result2, local03
14cec     05 FC 65 F0 | 	shl	result2, #5
14cf0     FE 1E 02 F1 | 	add	local01, result2
14cf4     0F 01 68 FC | 	wrlong	#0, local01
14cf8                 | '   long[base+32*iii+4]:=0
14cf8     10 1F 02 F6 | 	mov	local01, local02
14cfc     11 FD 01 F6 | 	mov	result2, local03
14d00     05 FC 65 F0 | 	shl	result2, #5
14d04     FE 1E 02 F1 | 	add	local01, result2
14d08     04 1E 06 F1 | 	add	local01, #4
14d0c     0F 01 68 FC | 	wrlong	#0, local01
14d10                 | '   long[base+32*iii+12]:=0
14d10     10 25 02 F6 | 	mov	local04, local02
14d14     11 1F 02 F6 | 	mov	local01, local03
14d18     05 1E 66 F0 | 	shl	local01, #5
14d1c     0F 25 02 F1 | 	add	local04, local01
14d20     0C 24 06 F1 | 	add	local04, #12
14d24     12 01 68 FC | 	wrlong	#0, local04
14d28                 | '   long[base+32*iii+16]:=2 
14d28     10 25 02 F6 | 	mov	local04, local02
14d2c     11 1F 02 F6 | 	mov	local01, local03
14d30     05 1E 66 F0 | 	shl	local01, #5
14d34     0F 25 02 F1 | 	add	local04, local01
14d38     10 24 06 F1 | 	add	local04, #16
14d3c     12 05 68 FC | 	wrlong	#2, local04
14d40                 | '   word[base+32*iii+20]:=0
14d40     10 25 02 F6 | 	mov	local04, local02
14d44     11 1F 02 F6 | 	mov	local01, local03
14d48     05 1E 66 F0 | 	shl	local01, #5
14d4c     0F 25 02 F1 | 	add	local04, local01
14d50     14 24 06 F1 | 	add	local04, #20
14d54     12 01 58 FC | 	wrword	#0, local04
14d58                 | '   word[base+32*iii+22]:=8192
14d58     10 25 02 F6 | 	mov	local04, local02
14d5c     11 1F 02 F6 | 	mov	local01, local03
14d60     05 1E 66 F0 | 	shl	local01, #5
14d64     0F 25 02 F1 | 	add	local04, local01
14d68     16 24 06 F1 | 	add	local04, #22
14d6c     10 00 80 FF 
14d70     12 01 58 FC | 	wrword	##8192, local04
14d74                 | '   word[base+32*iii+24]:=4000+2*iii
14d74     11 25 02 F6 | 	mov	local04, local03
14d78     01 24 66 F0 | 	shl	local04, #1
14d7c     07 00 00 FF 
14d80     A0 1F 06 F6 | 	mov	local01, ##4000
14d84     12 1F 02 F1 | 	add	local01, local04
14d88     10 25 02 F6 | 	mov	local04, local02
14d8c     11 FD 01 F6 | 	mov	result2, local03
14d90     05 FC 65 F0 | 	shl	result2, #5
14d94     FE 24 02 F1 | 	add	local04, result2
14d98     18 24 06 F1 | 	add	local04, #24
14d9c     12 1F 52 FC | 	wrword	local01, local04
14da0                 | '   word[base+32*iii+26]:=2
14da0     10 25 02 F6 | 	mov	local04, local02
14da4     11 1F 02 F6 | 	mov	local01, local03
14da8     05 1E 66 F0 | 	shl	local01, #5
14dac     0F 25 02 F1 | 	add	local04, local01
14db0     1A 24 06 F1 | 	add	local04, #26
14db4     12 05 58 FC | 	wrword	#2, local04
14db8                 | '   long [base+32*iii+8]:=@null | $C0000000
14db8     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
14dbc     3E 1E 26 F4 | 	bith	local01, #62
14dc0     10 25 02 F6 | 	mov	local04, local02
14dc4     11 17 02 F6 | 	mov	arg03, local03
14dc8     05 16 66 F0 | 	shl	arg03, #5
14dcc     0B 25 02 F1 | 	add	local04, arg03
14dd0     08 24 06 F1 | 	add	local04, #8
14dd4     12 1F 62 FC | 	wrlong	local01, local04
14dd8     01 22 06 F1 | 	add	local03, #1
14ddc     08 22 56 F2 | 	cmps	local03, #8 wc
14de0     00 FF 9F CD |  if_b	jmp	#LR__1790
14de4                 | LR__1791
14de4     01 00 00 FF 
14de8     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
14dec                 | '   
14dec                 | ' cog:=coginit(16,@audio,@mailboxaddr)
14dec     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
14df0     F2 16 02 F6 | 	mov	arg03, objptr
14df4     10 24 06 F6 | 	mov	local04, #16
14df8     28 16 62 FD | 	setq	arg03
14dfc     0A 25 F2 FC | 	coginit	local04, arg02 wc
14e00     01 24 66 C6 |  if_b	neg	local04, #1
14e04                 | ' waitms(100)
14e04     64 12 06 F6 | 	mov	arg01, #100
14e08     3C 07 B0 FD | 	call	#__system___waitms
14e0c                 | ' return cog,base
14e0c     10 FD 01 F6 | 	mov	result2, local02
14e10     12 FB 01 F6 | 	mov	result1, local04
14e14     A7 F0 03 F6 | 	mov	ptra, fp
14e18     B2 00 A0 FD | 	call	#popregs_
14e1c                 | _Audio093b_8_sc_spin2_start_ret
14e1c     2D 00 64 FD | 	ret
14e20                 | 
14e20                 | ' 
14e20                 | ' ' a simple play procedure to not poke everything. 
14e20                 | ' 
14e20                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
14e20                 | _Audio093b_8_sc_spin2_play
14e20     0C E4 05 F1 | 	add	objptr, #12
14e24     F2 00 02 F6 | 	mov	_var01, objptr
14e28     05 12 66 F0 | 	shl	arg01, #5
14e2c     09 01 02 F1 | 	add	_var01, arg01
14e30     00 00 60 FF 
14e34     00 14 06 F1 | 	add	arg02, ##-1073741824
14e38     00 13 02 F6 | 	mov	arg01, _var01
14e3c     08 12 06 F1 | 	add	arg01, #8
14e40     09 15 62 FC | 	wrlong	arg02, arg01
14e44     00 15 02 F6 | 	mov	arg02, _var01
14e48     0C 14 06 F1 | 	add	arg02, #12
14e4c     0A 1B 62 FC | 	wrlong	arg05, arg02
14e50     00 1C 56 F2 | 	cmps	arg06, #0 wc
14e54     00 15 02 36 |  if_ae	mov	arg02, _var01
14e58     10 14 06 31 |  if_ae	add	arg02, #16
14e5c     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
14e60     02 1A 06 C1 |  if_b	add	arg05, #2
14e64     00 13 02 C6 |  if_b	mov	arg01, _var01
14e68     10 12 06 C1 |  if_b	add	arg01, #16
14e6c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
14e70     0B 15 52 F6 | 	abs	arg02, arg03 wc
14e74     0F 1B 80 FF 
14e78     0A 3F 1A FD | 	qdiv	##3546911, arg02
14e7c                 | ' 
14e7c                 | ' base2:=@channel1[0]+32*channel
14e7c                 | ' long[base2+8]:=sample+$C0000000 
14e7c                 | ' long[base2+12]:= len
14e7c                 | ' if loop >=0 
14e7c                 | '   long[base2+16]:= loop
14e7c     0C E4 85 F1 | 	sub	objptr, #12
14e80                 | ' else
14e80                 | '   long[base2+16]:= len+2
14e80                 | ' word[base2+20]:=vol
14e80     00 15 02 F6 | 	mov	arg02, _var01
14e84     14 14 06 F1 | 	add	arg02, #20
14e88     0A 19 52 FC | 	wrword	arg04, arg02
14e8c                 | ' word[base2+24]:= 3546911/splfreq 
14e8c     00 13 02 F6 | 	mov	arg01, _var01
14e90     18 12 06 F1 | 	add	arg01, #24
14e94                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
14e94                 | ' long[base2+28]:=$40000000
14e94     18 14 62 FD | 	getqx	arg02
14e98     0A 15 82 F6 | 	negc	arg02, arg02
14e9c     09 15 52 FC | 	wrword	arg02, arg01
14ea0     00 15 02 F6 | 	mov	arg02, _var01
14ea4     1A 14 06 F1 | 	add	arg02, #26
14ea8     0A 01 5A FC | 	wrword	#256, arg02
14eac     1C 00 06 F1 | 	add	_var01, #28
14eb0     00 00 A0 FF 
14eb4     00 01 68 FC | 	wrlong	##1073741824, _var01
14eb8                 | _Audio093b_8_sc_spin2_play_ret
14eb8     2D 00 64 FD | 	ret
14ebc                 | 
14ebc                 | ' until (i >>8) >=len
14ebc                 | ' 
14ebc                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
14ebc                 | _Audio093b_8_sc_spin2_play8
14ebc                 | ' 
14ebc                 | ' base2:=@channel1[0]+32*channel
14ebc     0C E4 05 F1 | 	add	objptr, #12
14ec0     F2 00 02 F6 | 	mov	_var01, objptr
14ec4     05 12 66 F0 | 	shl	arg01, #5
14ec8     09 01 02 F1 | 	add	_var01, arg01
14ecc                 | ' long[base2]:=0
14ecc     00 01 68 FC | 	wrlong	#0, _var01
14ed0                 | ' long[base2+8]:=sample+$40000000 
14ed0     00 00 20 FF 
14ed4     00 14 06 F1 | 	add	arg02, ##1073741824
14ed8     00 13 02 F6 | 	mov	arg01, _var01
14edc     08 12 06 F1 | 	add	arg01, #8
14ee0     09 15 62 FC | 	wrlong	arg02, arg01
14ee4                 | ' if loop>=0
14ee4     00 1C 56 F2 | 	cmps	arg06, #0 wc
14ee8     0C E4 85 F1 | 	sub	objptr, #12
14eec     1C 00 90 CD |  if_b	jmp	#LR__1800
14ef0                 | '   long[base2+12]:=loop
14ef0     00 15 02 F6 | 	mov	arg02, _var01
14ef4     0C 14 06 F1 | 	add	arg02, #12
14ef8     0A 1D 62 FC | 	wrlong	arg06, arg02
14efc                 | '   long[base2+16]:= len
14efc     00 1D 02 F6 | 	mov	arg06, _var01
14f00     10 1C 06 F1 | 	add	arg06, #16
14f04     0E 1B 62 FC | 	wrlong	arg05, arg06
14f08     1C 00 90 FD | 	jmp	#LR__1801
14f0c                 | LR__1800
14f0c                 | ' else
14f0c                 | '   long[base2+12]:= len
14f0c     00 1D 02 F6 | 	mov	arg06, _var01
14f10     0C 1C 06 F1 | 	add	arg06, #12
14f14     0E 1B 62 FC | 	wrlong	arg05, arg06
14f18                 | '   long[base2+16]:= len+1
14f18     01 1A 06 F1 | 	add	arg05, #1
14f1c     00 13 02 F6 | 	mov	arg01, _var01
14f20     10 12 06 F1 | 	add	arg01, #16
14f24     09 1B 62 FC | 	wrlong	arg05, arg01
14f28                 | LR__1801
14f28     0B 17 52 F6 | 	abs	arg03, arg03 wc
14f2c     0F 1B 80 FF 
14f30     0B 3F 1A FD | 	qdiv	##3546911, arg03
14f34                 | ' word[base2+20]:=vol
14f34     00 17 02 F6 | 	mov	arg03, _var01
14f38     14 16 06 F1 | 	add	arg03, #20
14f3c     0B 19 52 FC | 	wrword	arg04, arg03
14f40                 | ' word[base2+24]:= 3546911/splfreq 
14f40     00 13 02 F6 | 	mov	arg01, _var01
14f44     18 12 06 F1 | 	add	arg01, #24
14f48                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
14f48                 | ' long[base2+28]:=$40000000
14f48     18 18 62 FD | 	getqx	arg04
14f4c     0C 19 82 F6 | 	negc	arg04, arg04
14f50     09 19 52 FC | 	wrword	arg04, arg01
14f54     00 19 02 F6 | 	mov	arg04, _var01
14f58     1A 18 06 F1 | 	add	arg04, #26
14f5c     0C 01 5A FC | 	wrword	#256, arg04
14f60     1C 00 06 F1 | 	add	_var01, #28
14f64     00 00 A0 FF 
14f68     00 01 68 FC | 	wrlong	##1073741824, _var01
14f6c                 | _Audio093b_8_sc_spin2_play8_ret
14f6c     2D 00 64 FD | 	ret
14f70                 | 
14f70                 | ' 
14f70                 | '     
14f70                 | ' pub stop(channel) 'silence it
14f70                 | _Audio093b_8_sc_spin2_stop
14f70                 | ' 
14f70                 | ' word[@channel1[0]+32*channel+20]:=0
14f70     0C E4 05 F1 | 	add	objptr, #12
14f74     F2 00 02 F6 | 	mov	_var01, objptr
14f78     05 12 66 F0 | 	shl	arg01, #5
14f7c     09 01 02 F1 | 	add	_var01, arg01
14f80     14 00 06 F1 | 	add	_var01, #20
14f84     00 01 58 FC | 	wrword	#0, _var01
14f88     0C E4 85 F1 | 	sub	objptr, #12
14f8c                 | _Audio093b_8_sc_spin2_stop_ret
14f8c     2D 00 64 FD | 	ret
14f90                 | hubexit
14f90     81 00 80 FD | 	jmp	#cogexit
14f94                 | 
14f94                 | __system___setbaud
14f94     14 5E 06 FB | 	rdlong	muldiva_, #20
14f98     09 61 02 F6 | 	mov	muldivb_, arg01
14f9c     BA 00 A0 FD | 	call	#divide_
14fa0     97 06 48 FB | 	callpa	#(@LR__1811-@LR__1810)>>2,fcache_load_ptr_
14fa4                 | LR__1810
14fa4     3E FA 9D FA | 	rdpin	result1, #62 wc
14fa8     FE FC A1 F1 | 	subx	result2, result2
14fac     F4 FF 9F CD |  if_b	jmp	#LR__1810
14fb0                 | LR__1811
14fb0     40 7C 64 FD | 	dirl	#62
14fb4     40 7E 64 FD | 	dirl	#63
14fb8     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
14fbc     10 60 66 F0 | 	shl	muldivb_, #16
14fc0     07 14 06 F6 | 	mov	arg02, #7
14fc4     30 15 02 F1 | 	add	arg02, muldivb_
14fc8     3E F8 0C FC | 	wrpin	#124, #62
14fcc     3E 14 16 FC | 	wxpin	arg02, #62
14fd0     3F 7C 0C FC | 	wrpin	#62, #63
14fd4     14 14 06 F1 | 	add	arg02, #20
14fd8     3F 14 16 FC | 	wxpin	arg02, #63
14fdc     41 7C 64 FD | 	dirh	#62
14fe0     41 7E 64 FD | 	dirh	#63
14fe4                 | __system___setbaud_ret
14fe4     2D 00 64 FD | 	ret
14fe8                 | 
14fe8                 | __system___txraw
14fe8     01 4A 05 F6 | 	mov	COUNT_, #1
14fec     A8 00 A0 FD | 	call	#pushregs_
14ff0     09 1F 02 F6 | 	mov	local01, arg01
14ff4     97 06 48 FB | 	callpa	#(@LR__1821-@LR__1820)>>2,fcache_load_ptr_
14ff8                 | LR__1820
14ff8     3E FA 9D FA | 	rdpin	result1, #62 wc
14ffc     FE FC A1 F1 | 	subx	result2, result2
15000     F4 FF 9F CD |  if_b	jmp	#LR__1820
15004                 | LR__1821
15004     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15008     C2 01 00 AF 
1500c     00 12 06 A6 |  if_e	mov	arg01, ##230400
15010     80 FF BF AD |  if_e	call	#__system___setbaud
15014     3E 1E 26 FC | 	wypin	local01, #62
15018     01 FA 05 F6 | 	mov	result1, #1
1501c     A7 F0 03 F6 | 	mov	ptra, fp
15020     B2 00 A0 FD | 	call	#popregs_
15024                 | __system___txraw_ret
15024     2D 00 64 FD | 	ret
15028                 | 
15028                 | __system___rxraw
15028     0D 4A 05 F6 | 	mov	COUNT_, #13
1502c     A8 00 A0 FD | 	call	#pushregs_
15030     09 1F 02 F6 | 	mov	local01, arg01
15034     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
15038     C2 01 00 AF 
1503c     00 12 06 A6 |  if_e	mov	arg01, ##230400
15040     50 FF BF AD |  if_e	call	#__system___setbaud
15044     00 1E 0E F2 | 	cmp	local01, #0 wz
15048     20 00 90 AD |  if_e	jmp	#LR__1830
1504c     14 22 06 FB | 	rdlong	local03, #20
15050     0A 22 46 F0 | 	shr	local03, #10
15054     11 1F 02 FD | 	qmul	local01, local03
15058     1A FA 61 FD | 	getct	result1
1505c     18 24 62 FD | 	getqx	local04
15060     12 FB 01 F1 | 	add	result1, local04
15064     FD 26 02 F6 | 	mov	local05, result1
15068     04 00 90 FD | 	jmp	#LR__1831
1506c                 | LR__1830
1506c     00 26 06 F6 | 	mov	local05, #0
15070                 | LR__1831
15070     01 28 66 F6 | 	neg	local06, #1
15074     3F 2A 06 F6 | 	mov	local07, #63
15078     00 2C 06 F6 | 	mov	local08, #0
1507c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15080     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
15084     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15088                 | LR__1832
15088     08 2E 16 F4 | 	testb	local09, #8 wc
1508c     09 2E 76 F4 | 	testbn	local09, #9 andc
15090     0A 2E 46 F0 | 	shr	local09, #10
15094     01 2C 06 C6 |  if_b	mov	local08, #1
15098     40 7E 6C 3D |  if_ae	testp	#63 wz
1509c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
150a0     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
150a4     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
150a8                 | LR__1833
150a8     00 20 06 F6 | 	mov	local02, #0
150ac     00 2C 0E F2 | 	cmp	local08, #0 wz
150b0     01 20 66 56 |  if_ne	neg	local02, #1
150b4     00 30 06 F6 | 	mov	local10, #0
150b8     00 22 06 F6 | 	mov	local03, #0
150bc     00 1E 0E F2 | 	cmp	local01, #0 wz
150c0     01 22 66 56 |  if_ne	neg	local03, #1
150c4     00 24 06 F6 | 	mov	local04, #0
150c8     00 32 06 F6 | 	mov	local11, #0
150cc     1A FA 61 FD | 	getct	result1
150d0     FD 34 02 F6 | 	mov	local12, result1
150d4     1A 37 02 F6 | 	mov	local13, local12
150d8     13 37 82 F1 | 	sub	local13, local05
150dc     00 36 56 F2 | 	cmps	local13, #0 wc
150e0     00 32 26 C6 |  if_b	not	local11, #0
150e4     00 32 0E F2 | 	cmp	local11, #0 wz
150e8     00 24 26 56 |  if_ne	not	local04, #0
150ec     12 23 CA F7 | 	test	local03, local04 wz
150f0     00 30 26 56 |  if_ne	not	local10, #0
150f4     18 21 4A F5 | 	or	local02, local10 wz
150f8     8C FF 9F AD |  if_e	jmp	#LR__1832
150fc     00 2C 0E F2 | 	cmp	local08, #0 wz
15100     17 29 02 56 |  if_ne	mov	local06, local09
15104     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
15108     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1510c     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
15110     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15114     14 FB 01 F6 | 	mov	result1, local06
15118     A7 F0 03 F6 | 	mov	ptra, fp
1511c     B2 00 A0 FD | 	call	#popregs_
15120                 | __system___rxraw_ret
15120     2D 00 64 FD | 	ret
15124                 | 
15124                 | __system___getus
15124     1A FC 71 FD | 	getct	result2 wc
15128     1A 00 62 FD | 	getct	_var01
1512c     10 E8 05 F1 | 	add	ptr___system__dat__, #16
15130     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
15134     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15138     20 00 90 5D |  if_ne	jmp	#LR__1840
1513c     14 02 06 FB | 	rdlong	_var02, #20
15140     A1 07 00 FF 
15144     40 02 16 FD | 	qdiv	_var02, ##1000000
15148     10 E8 05 F1 | 	add	ptr___system__dat__, #16
1514c     18 FA 61 FD | 	getqx	result1
15150     FD 02 02 F6 | 	mov	_var02, result1
15154     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
15158     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
1515c                 | LR__1840
1515c     01 FD 11 FD | 	qdiv	result2, _var02
15160     19 FC 61 FD | 	getqy	result2
15164     28 FC 61 FD | 	setq	result2
15168     01 01 12 FD | 	qdiv	_var01, _var02
1516c     18 FA 61 FD | 	getqx	result1
15170                 | __system___getus_ret
15170     2D 00 64 FD | 	ret
15174                 | 
15174                 | __system____builtin_memmove
15174     09 01 02 F6 | 	mov	_var01, arg01
15178     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1517c     10 00 90 CD |  if_b	jmp	#LR__1850
15180     0A 03 02 F6 | 	mov	_var02, arg02
15184     0B 03 02 F1 | 	add	_var02, arg03
15188     01 13 52 F2 | 	cmps	arg01, _var02 wc
1518c     48 00 90 CD |  if_b	jmp	#LR__1856
15190                 | LR__1850
15190     0B 05 02 F6 | 	mov	_var03, arg03
15194     02 04 4E F0 | 	shr	_var03, #2 wz
15198     18 00 90 AD |  if_e	jmp	#LR__1855
1519c     97 0A 48 FB | 	callpa	#(@LR__1853-@LR__1851)>>2,fcache_load_ptr_
151a0                 | LR__1851
151a0     02 09 D8 FC | 	rep	@LR__1854, _var03
151a4                 | LR__1852
151a4     0A 05 02 FB | 	rdlong	_var03, arg02
151a8     09 05 62 FC | 	wrlong	_var03, arg01
151ac     04 12 06 F1 | 	add	arg01, #4
151b0     04 14 06 F1 | 	add	arg02, #4
151b4                 | LR__1853
151b4                 | LR__1854
151b4                 | LR__1855
151b4     02 16 CE F7 | 	test	arg03, #2 wz
151b8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
151bc     09 03 52 5C |  if_ne	wrword	_var02, arg01
151c0     02 12 06 51 |  if_ne	add	arg01, #2
151c4     02 14 06 51 |  if_ne	add	arg02, #2
151c8     01 16 CE F7 | 	test	arg03, #1 wz
151cc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
151d0     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
151d4     28 00 90 FD | 	jmp	#LR__1862
151d8                 | LR__1856
151d8     0B 13 02 F1 | 	add	arg01, arg03
151dc     0B 15 02 F1 | 	add	arg02, arg03
151e0     0B 07 0A F6 | 	mov	_var04, arg03 wz
151e4     18 00 90 AD |  if_e	jmp	#LR__1861
151e8     97 0A 48 FB | 	callpa	#(@LR__1859-@LR__1857)>>2,fcache_load_ptr_
151ec                 | LR__1857
151ec     03 09 D8 FC | 	rep	@LR__1860, _var04
151f0                 | LR__1858
151f0     01 12 86 F1 | 	sub	arg01, #1
151f4     01 14 86 F1 | 	sub	arg02, #1
151f8     0A 03 C2 FA | 	rdbyte	_var02, arg02
151fc     09 03 42 FC | 	wrbyte	_var02, arg01
15200                 | LR__1859
15200                 | LR__1860
15200                 | LR__1861
15200                 | LR__1862
15200     00 FB 01 F6 | 	mov	result1, _var01
15204                 | __system____builtin_memmove_ret
15204     2D 00 64 FD | 	ret
15208                 | 
15208                 | __system____builtin_strcpy
15208     09 01 02 F6 | 	mov	_var01, arg01
1520c     97 0A 48 FB | 	callpa	#(@LR__1871-@LR__1870)>>2,fcache_load_ptr_
15210                 | LR__1870
15210     0A FB C9 FA | 	rdbyte	result1, arg02 wz
15214     09 FB 41 FC | 	wrbyte	result1, arg01
15218     01 14 06 F1 | 	add	arg02, #1
1521c     01 12 06 F1 | 	add	arg01, #1
15220     EC FF 9F 5D |  if_ne	jmp	#LR__1870
15224                 | LR__1871
15224     00 FB 01 F6 | 	mov	result1, _var01
15228                 | __system____builtin_strcpy_ret
15228     2D 00 64 FD | 	ret
1522c                 | 
1522c                 | __system____topofstack
1522c     00 4A 05 F6 | 	mov	COUNT_, #0
15230     A8 00 A0 FD | 	call	#pushregs_
15234     08 F0 07 F1 | 	add	ptra, #8
15238     04 4E 05 F1 | 	add	fp, #4
1523c     A7 12 62 FC | 	wrlong	arg01, fp
15240     A7 FA 01 F6 | 	mov	result1, fp
15244     04 4E 85 F1 | 	sub	fp, #4
15248     A7 F0 03 F6 | 	mov	ptra, fp
1524c     B2 00 A0 FD | 	call	#popregs_
15250                 | __system____topofstack_ret
15250     2D 00 64 FD | 	ret
15254                 | 
15254                 | __system___lockmem
15254     00 FA 05 F6 | 	mov	result1, #0
15258     01 FA 61 FD | 	cogid	result1
1525c     00 FB 05 F1 | 	add	result1, #256
15260                 | LR__1880
15260     09 01 0A FB | 	rdlong	_var01, arg01 wz
15264     09 FB 61 AC |  if_e	wrlong	result1, arg01
15268     09 01 02 AB |  if_e	rdlong	_var01, arg01
1526c     09 01 02 AB |  if_e	rdlong	_var01, arg01
15270     FD 00 0A F2 | 	cmp	_var01, result1 wz
15274     E8 FF 9F 5D |  if_ne	jmp	#LR__1880
15278                 | __system___lockmem_ret
15278     2D 00 64 FD | 	ret
1527c                 | 
1527c                 | __system___string_cmp
1527c     97 14 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
15280                 | LR__1890
15280     09 01 C2 FA | 	rdbyte	_var01, arg01
15284     0A 03 C2 FA | 	rdbyte	_var02, arg02
15288     00 05 02 F6 | 	mov	_var03, _var01
1528c     01 05 8A F1 | 	sub	_var03, _var02 wz
15290     01 12 06 F1 | 	add	arg01, #1
15294     01 14 06 F1 | 	add	arg02, #1
15298     0C 00 90 5D |  if_ne	jmp	#LR__1892
1529c     00 00 0E F2 | 	cmp	_var01, #0 wz
152a0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
152a4     D8 FF 9F 5D |  if_ne	jmp	#LR__1890
152a8                 | LR__1891
152a8                 | LR__1892
152a8     02 FB 01 F6 | 	mov	result1, _var03
152ac                 | __system___string_cmp_ret
152ac     2D 00 64 FD | 	ret
152b0                 | 
152b0                 | __system___string_concat
152b0     05 4A 05 F6 | 	mov	COUNT_, #5
152b4     A8 00 A0 FD | 	call	#pushregs_
152b8     09 1F 02 F6 | 	mov	local01, arg01
152bc     0A 21 02 F6 | 	mov	local02, arg02
152c0     0F 13 02 F6 | 	mov	arg01, local01
152c4     09 23 02 F6 | 	mov	local03, arg01
152c8     97 06 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
152cc                 | LR__1900
152cc     11 FB C9 FA | 	rdbyte	result1, local03 wz
152d0     01 22 06 51 |  if_ne	add	local03, #1
152d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1900
152d8                 | LR__1901
152d8     09 23 82 F1 | 	sub	local03, arg01
152dc     11 25 02 F6 | 	mov	local04, local03
152e0     10 13 02 F6 | 	mov	arg01, local02
152e4     09 23 02 F6 | 	mov	local03, arg01
152e8     97 06 48 FB | 	callpa	#(@LR__1903-@LR__1902)>>2,fcache_load_ptr_
152ec                 | LR__1902
152ec     11 FB C9 FA | 	rdbyte	result1, local03 wz
152f0     01 22 06 51 |  if_ne	add	local03, #1
152f4     F4 FF 9F 5D |  if_ne	jmp	#LR__1902
152f8                 | LR__1903
152f8     09 23 82 F1 | 	sub	local03, arg01
152fc     12 13 02 F6 | 	mov	arg01, local04
15300     11 13 02 F1 | 	add	arg01, local03
15304     01 12 06 F1 | 	add	arg01, #1
15308     B0 39 B0 FD | 	call	#__system___gc_alloc_managed
1530c     FD 26 0A F6 | 	mov	local05, result1 wz
15310     28 00 90 AD |  if_e	jmp	#LR__1904
15314     13 13 02 F6 | 	mov	arg01, local05
15318     0F 15 02 F6 | 	mov	arg02, local01
1531c     12 17 02 F6 | 	mov	arg03, local04
15320     50 FE BF FD | 	call	#__system____builtin_memmove
15324     13 13 02 F6 | 	mov	arg01, local05
15328     12 13 02 F1 | 	add	arg01, local04
1532c     01 22 06 F1 | 	add	local03, #1
15330     10 15 02 F6 | 	mov	arg02, local02
15334     11 17 02 F6 | 	mov	arg03, local03
15338     38 FE BF FD | 	call	#__system____builtin_memmove
1533c                 | LR__1904
1533c     13 FB 01 F6 | 	mov	result1, local05
15340     A7 F0 03 F6 | 	mov	ptra, fp
15344     B2 00 A0 FD | 	call	#popregs_
15348                 | __system___string_concat_ret
15348     2D 00 64 FD | 	ret
1534c                 | 
1534c                 | __system___tx
1534c     02 4A 05 F6 | 	mov	COUNT_, #2
15350     A8 00 A0 FD | 	call	#pushregs_
15354     09 1F 02 F6 | 	mov	local01, arg01
15358     0A 1E 0E F2 | 	cmp	local01, #10 wz
1535c     18 00 90 5D |  if_ne	jmp	#LR__1910
15360     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15364     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
15368     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1536c     02 20 CE F7 | 	test	local02, #2 wz
15370     0D 12 06 56 |  if_ne	mov	arg01, #13
15374     70 FC BF 5D |  if_ne	call	#__system___txraw
15378                 | LR__1910
15378     0F 13 02 F6 | 	mov	arg01, local01
1537c     68 FC BF FD | 	call	#__system___txraw
15380     A7 F0 03 F6 | 	mov	ptra, fp
15384     B2 00 A0 FD | 	call	#popregs_
15388                 | __system___tx_ret
15388     2D 00 64 FD | 	ret
1538c                 | 
1538c                 | __system___rx
1538c     01 4A 05 F6 | 	mov	COUNT_, #1
15390     A8 00 A0 FD | 	call	#pushregs_
15394                 | LR__1920
15394     00 12 06 F6 | 	mov	arg01, #0
15398     8C FC BF FD | 	call	#__system___rxraw
1539c     FD 1E 02 F6 | 	mov	local01, result1
153a0     FF FF 7F FF 
153a4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
153a8     E8 FF 9F AD |  if_e	jmp	#LR__1920
153ac     0D 1E 0E F2 | 	cmp	local01, #13 wz
153b0     14 00 90 5D |  if_ne	jmp	#LR__1921
153b4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
153b8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
153bc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
153c0     02 FA CD F7 | 	test	result1, #2 wz
153c4     0A 1E 06 56 |  if_ne	mov	local01, #10
153c8                 | LR__1921
153c8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
153cc     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
153d0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
153d4     01 12 CE F7 | 	test	arg01, #1 wz
153d8     1C 00 90 AD |  if_e	jmp	#LR__1924
153dc     7F 1E 0E F2 | 	cmp	local01, #127 wz
153e0     0C 00 90 5D |  if_ne	jmp	#LR__1922
153e4     08 12 06 F6 | 	mov	arg01, #8
153e8     60 FF BF FD | 	call	#__system___tx
153ec     08 00 90 FD | 	jmp	#LR__1923
153f0                 | LR__1922
153f0     0F 13 02 F6 | 	mov	arg01, local01
153f4     54 FF BF FD | 	call	#__system___tx
153f8                 | LR__1923
153f8                 | LR__1924
153f8     0F FB 01 F6 | 	mov	result1, local01
153fc     A7 F0 03 F6 | 	mov	ptra, fp
15400     B2 00 A0 FD | 	call	#popregs_
15404                 | __system___rx_ret
15404     2D 00 64 FD | 	ret
15408                 | 
15408                 | __system___pinwrite
15408     09 01 02 F6 | 	mov	_var01, arg01
1540c     1F 00 06 F5 | 	and	_var01, #31
15410     20 12 CE F7 | 	test	arg01, #32 wz
15414     06 12 46 F0 | 	shr	arg01, #6
15418     09 13 CA F9 | 	bmask	arg01, arg01
1541c     00 13 62 F0 | 	shl	arg01, _var01
15420     00 15 62 F0 | 	shl	arg02, _var01
15424     1C 00 90 AD |  if_e	jmp	#LR__1930
15428     09 F7 43 F5 | 	or	dirb, arg01
1542c     FD 01 02 F6 | 	mov	_var01, outb
15430     09 01 22 F5 | 	andn	_var01, arg01
15434     09 15 02 F5 | 	and	arg02, arg01
15438     0A 01 42 F5 | 	or	_var01, arg02
1543c     00 FB 03 F6 | 	mov	outb, _var01
15440     18 00 90 FD | 	jmp	#LR__1931
15444                 | LR__1930
15444     09 F5 43 F5 | 	or	dira, arg01
15448     FC 01 02 F6 | 	mov	_var01, outa
1544c     09 01 22 F5 | 	andn	_var01, arg01
15450     09 15 02 F5 | 	and	arg02, arg01
15454     0A 01 42 F5 | 	or	_var01, arg02
15458     00 F9 03 F6 | 	mov	outa, _var01
1545c                 | LR__1931
1545c                 | __system___pinwrite_ret
1545c     2D 00 64 FD | 	ret
15460                 | 
15460                 | __system___basic_read_line
15460     06 4A 05 F6 | 	mov	COUNT_, #6
15464     A8 00 A0 FD | 	call	#pushregs_
15468     09 1F 02 F6 | 	mov	local01, arg01
1546c     00 20 06 F6 | 	mov	local02, #0
15470     18 22 06 F6 | 	mov	local03, #24
15474     00 24 06 F6 | 	mov	local04, #0
15478     18 12 06 F6 | 	mov	arg01, #24
1547c     3C 38 B0 FD | 	call	#__system___gc_alloc_managed
15480     FD 26 0A F6 | 	mov	local05, result1 wz
15484     13 FB 01 A6 |  if_e	mov	result1, local05
15488     B0 00 90 AD |  if_e	jmp	#LR__1943
1548c                 | LR__1940
1548c     0F 13 02 F6 | 	mov	arg01, local01
15490     78 0B B0 FD | 	call	#__system___basic_get_char
15494     FD 28 02 F6 | 	mov	local06, result1
15498     01 28 56 F2 | 	cmps	local06, #1 wc
1549c     8C 00 90 CD |  if_b	jmp	#LR__1942
154a0     0A 28 0E F2 | 	cmp	local06, #10 wz
154a4     10 00 90 5D |  if_ne	jmp	#LR__1941
154a8     00 24 0E F2 | 	cmp	local04, #0 wz
154ac     01 20 56 52 |  if_ne	cmps	local02, #1 wc
154b0     01 20 86 11 |  if_a	sub	local02, #1
154b4     74 00 90 FD | 	jmp	#LR__1942
154b8                 | LR__1941
154b8     0D 28 0E F2 | 	cmp	local06, #13 wz
154bc     01 24 06 A6 |  if_e	mov	local04, #1
154c0     00 24 06 56 |  if_ne	mov	local04, #0
154c4     08 28 0E F2 | 	cmp	local06, #8 wz
154c8     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
154cc     01 20 56 A2 |  if_e	cmps	local02, #1 wc
154d0     01 20 86 21 |  if_nc_and_z	sub	local02, #1
154d4     B4 FF 9F AD |  if_e	jmp	#LR__1940
154d8     13 17 02 F6 | 	mov	arg03, local05
154dc     10 17 02 F1 | 	add	arg03, local02
154e0     0B 29 42 FC | 	wrbyte	local06, arg03
154e4     01 20 06 F1 | 	add	local02, #1
154e8     11 21 0A F2 | 	cmp	local02, local03 wz
154ec     9C FF 9F 5D |  if_ne	jmp	#LR__1940
154f0     11 13 02 F6 | 	mov	arg01, local03
154f4     20 12 06 F1 | 	add	arg01, #32
154f8     C0 37 B0 FD | 	call	#__system___gc_alloc_managed
154fc     FD 28 0A F6 | 	mov	local06, result1 wz
15500     14 FB 01 A6 |  if_e	mov	result1, local06
15504     34 00 90 AD |  if_e	jmp	#LR__1943
15508     14 13 02 F6 | 	mov	arg01, local06
1550c     13 15 02 F6 | 	mov	arg02, local05
15510     11 17 02 F6 | 	mov	arg03, local03
15514     5C FC BF FD | 	call	#__system____builtin_memmove
15518     20 22 06 F1 | 	add	local03, #32
1551c     13 13 02 F6 | 	mov	arg01, local05
15520     D4 38 B0 FD | 	call	#__system___gc_free
15524     14 27 02 F6 | 	mov	local05, local06
15528     60 FF 9F FD | 	jmp	#LR__1940
1552c                 | LR__1942
1552c     13 29 02 F6 | 	mov	local06, local05
15530     10 29 02 F1 | 	add	local06, local02
15534     14 01 48 FC | 	wrbyte	#0, local06
15538     13 FB 01 F6 | 	mov	result1, local05
1553c                 | LR__1943
1553c     A7 F0 03 F6 | 	mov	ptra, fp
15540     B2 00 A0 FD | 	call	#popregs_
15544                 | __system___basic_read_line_ret
15544     2D 00 64 FD | 	ret
15548                 | 
15548                 | __system___waitms
15548     09 01 02 F6 | 	mov	_var01, arg01
1554c     1A 02 62 FD | 	getct	_var02
15550     14 04 06 FB | 	rdlong	_var03, #20
15554     97 14 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
15558                 | LR__1950
15558     01 00 00 FF 
1555c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
15560     1C 00 90 CD |  if_b	jmp	#LR__1952
15564     02 03 02 F1 | 	add	_var02, _var03
15568     01 13 02 F6 | 	mov	arg01, _var02
1556c     00 12 66 FA | 	addct1	arg01, #0
15570     24 22 60 FD | 	waitct1
15574     01 00 00 FF 
15578     E8 01 86 F1 | 	sub	_var01, ##1000
1557c     D8 FF 9F FD | 	jmp	#LR__1950
15580                 | LR__1951
15580                 | LR__1952
15580     01 00 56 F2 | 	cmps	_var01, #1 wc
15584     28 00 90 CD |  if_b	jmp	#LR__1953
15588     02 01 02 FD | 	qmul	_var01, _var03
1558c     01 00 00 FF 
15590     E8 17 06 F6 | 	mov	arg03, ##1000
15594     19 FA 61 FD | 	getqy	result1
15598     18 12 62 FD | 	getqx	arg01
1559c     28 FA 61 FD | 	setq	result1
155a0     0B 13 12 FD | 	qdiv	arg01, arg03
155a4     18 12 62 FD | 	getqx	arg01
155a8     01 13 62 FA | 	addct1	arg01, _var02
155ac     24 22 60 FD | 	waitct1
155b0                 | LR__1953
155b0                 | __system___waitms_ret
155b0     2D 00 64 FD | 	ret
155b4                 | 
155b4                 | __system___waitus
155b4     09 01 02 F6 | 	mov	_var01, arg01
155b8     1A 02 62 FD | 	getct	_var02
155bc     14 04 06 FB | 	rdlong	_var03, #20
155c0     97 14 48 FB | 	callpa	#(@LR__1961-@LR__1960)>>2,fcache_load_ptr_
155c4                 | LR__1960
155c4     A1 07 00 FF 
155c8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
155cc     1C 00 90 CD |  if_b	jmp	#LR__1962
155d0     02 03 02 F1 | 	add	_var02, _var03
155d4     01 13 02 F6 | 	mov	arg01, _var02
155d8     00 12 66 FA | 	addct1	arg01, #0
155dc     24 22 60 FD | 	waitct1
155e0     A1 07 00 FF 
155e4     40 00 86 F1 | 	sub	_var01, ##1000000
155e8     D8 FF 9F FD | 	jmp	#LR__1960
155ec                 | LR__1961
155ec                 | LR__1962
155ec     01 00 56 F2 | 	cmps	_var01, #1 wc
155f0     28 00 90 CD |  if_b	jmp	#LR__1963
155f4     02 01 02 FD | 	qmul	_var01, _var03
155f8     A1 07 00 FF 
155fc     40 16 06 F6 | 	mov	arg03, ##1000000
15600     19 FA 61 FD | 	getqy	result1
15604     18 12 62 FD | 	getqx	arg01
15608     28 FA 61 FD | 	setq	result1
1560c     0B 13 12 FD | 	qdiv	arg01, arg03
15610     18 FA 61 FD | 	getqx	result1
15614     FD 02 62 FA | 	addct1	_var02, result1
15618     24 22 60 FD | 	waitct1
1561c                 | LR__1963
1561c                 | __system___waitus_ret
1561c     2D 00 64 FD | 	ret
15620                 | 
15620                 | __system___mount
15620     0B 4A 05 F6 | 	mov	COUNT_, #11
15624     A8 00 A0 FD | 	call	#pushregs_
15628     09 1F 02 F6 | 	mov	local01, arg01
1562c     0A 21 0A F6 | 	mov	local02, arg02 wz
15630     01 22 66 F6 | 	neg	local03, #1
15634     01 FA 65 A6 |  if_e	neg	result1, #1
15638     98 02 90 AD |  if_e	jmp	#LR__1985
1563c     0F FB C1 FA | 	rdbyte	result1, local01
15640     2F FA 0D F2 | 	cmp	result1, #47 wz
15644     28 00 90 5D |  if_ne	jmp	#LR__1972
15648     0F 13 02 F6 | 	mov	arg01, local01
1564c     09 25 02 F6 | 	mov	local04, arg01
15650     97 06 48 FB | 	callpa	#(@LR__1971-@LR__1970)>>2,fcache_load_ptr_
15654                 | LR__1970
15654     12 FB C9 FA | 	rdbyte	result1, local04 wz
15658     01 24 06 51 |  if_ne	add	local04, #1
1565c     F4 FF 9F 5D |  if_ne	jmp	#LR__1970
15660                 | LR__1971
15660     09 25 82 F1 | 	sub	local04, arg01
15664     12 FB 01 F6 | 	mov	result1, local04
15668     10 FA 55 F2 | 	cmps	result1, #16 wc
1566c     14 00 90 CD |  if_b	jmp	#LR__1973
15670                 | LR__1972
15670     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15674     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
15678     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1567c     01 FA 65 F6 | 	neg	result1, #1
15680     50 02 90 FD | 	jmp	#LR__1985
15684                 | LR__1973
15684     00 26 06 F6 | 	mov	local05, #0
15688                 | LR__1974
15688     04 26 56 F2 | 	cmps	local05, #4 wc
1568c     B0 00 90 3D |  if_ae	jmp	#LR__1979
15690     13 13 02 F6 | 	mov	arg01, local05
15694     02 12 66 F0 | 	shl	arg01, #2
15698     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1569c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
156a0     09 FB 09 FB | 	rdlong	result1, arg01 wz
156a4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
156a8     00 22 56 A2 |  if_e	cmps	local03, #0 wc
156ac     13 23 02 86 |  if_c_and_z	mov	local03, local05
156b0     84 00 90 8D |  if_c_and_z	jmp	#LR__1978
156b4     13 13 02 F6 | 	mov	arg01, local05
156b8     02 12 66 F0 | 	shl	arg01, #2
156bc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
156c0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
156c4     09 13 02 FB | 	rdlong	arg01, arg01
156c8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
156cc     09 25 02 F6 | 	mov	local04, arg01
156d0     97 06 48 FB | 	callpa	#(@LR__1976-@LR__1975)>>2,fcache_load_ptr_
156d4                 | LR__1975
156d4     12 FB C9 FA | 	rdbyte	result1, local04 wz
156d8     01 24 06 51 |  if_ne	add	local04, #1
156dc     F4 FF 9F 5D |  if_ne	jmp	#LR__1975
156e0                 | LR__1976
156e0     09 25 82 F1 | 	sub	local04, arg01
156e4     12 29 02 F6 | 	mov	local06, local04
156e8     14 13 02 F6 | 	mov	arg01, local06
156ec     0F 13 02 F1 | 	add	arg01, local01
156f0     09 FB C1 FA | 	rdbyte	result1, arg01
156f4     2F FA 0D F2 | 	cmp	result1, #47 wz
156f8     14 2B 02 56 |  if_ne	mov	local07, local06
156fc     0F 2B 02 51 |  if_ne	add	local07, local01
15700     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
15704     30 00 90 5D |  if_ne	jmp	#LR__1977
15708     13 17 02 F6 | 	mov	arg03, local05
1570c     02 16 66 F0 | 	shl	arg03, #2
15710     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15714     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15718     0B 15 02 FB | 	rdlong	arg02, arg03
1571c     0F 13 02 F6 | 	mov	arg01, local01
15720     14 17 02 F6 | 	mov	arg03, local06
15724     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15728     D4 49 B0 FD | 	call	#__system__strncmp
1572c     00 FA 0D F2 | 	cmp	result1, #0 wz
15730     13 23 02 A6 |  if_e	mov	local03, local05
15734     08 00 90 AD |  if_e	jmp	#LR__1979
15738                 | LR__1977
15738                 | LR__1978
15738     01 26 06 F1 | 	add	local05, #1
1573c     48 FF 9F FD | 	jmp	#LR__1974
15740                 | LR__1979
15740     FF FF 7F FF 
15744     FF 23 0E F2 | 	cmp	local03, ##-1 wz
15748     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1574c     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
15750     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
15754     01 FA 65 A6 |  if_e	neg	result1, #1
15758     78 01 90 AD |  if_e	jmp	#LR__1985
1575c     11 27 02 F6 | 	mov	local05, local03
15760     13 2B 02 F6 | 	mov	local07, local05
15764     02 2A 66 F0 | 	shl	local07, #2
15768     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1576c     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
15770     15 29 0A FB | 	rdlong	local06, local07 wz
15774     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15778     58 00 90 AD |  if_e	jmp	#LR__1980
1577c     4C 28 06 F1 | 	add	local06, #76
15780     14 2B 0A FB | 	rdlong	local07, local06 wz
15784     4C 28 86 F1 | 	sub	local06, #76
15788     48 00 90 AD |  if_e	jmp	#LR__1980
1578c     4C 28 06 F1 | 	add	local06, #76
15790     14 2B 02 FB | 	rdlong	local07, local06
15794     15 23 02 F6 | 	mov	local03, local07
15798     13 2A 46 F7 | 	zerox	local07, #19
1579c     14 22 46 F0 | 	shr	local03, #20
157a0     02 22 66 F0 | 	shl	local03, #2
157a4     ED 22 02 F1 | 	add	local03, __methods__
157a8     11 23 02 FB | 	rdlong	local03, local03
157ac     13 29 02 F6 | 	mov	local06, local05
157b0     02 28 66 F0 | 	shl	local06, #2
157b4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
157b8     F4 28 02 F1 | 	add	local06, ptr___system__dat__
157bc     14 13 02 FB | 	rdlong	arg01, local06
157c0     F2 28 02 F6 | 	mov	local06, objptr
157c4     15 E5 01 F6 | 	mov	objptr, local07
157c8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
157cc     2D 22 62 FD | 	call	local03
157d0     14 E5 01 F6 | 	mov	objptr, local06
157d4                 | LR__1980
157d4     13 2D 02 F6 | 	mov	local08, local05
157d8     02 2C 66 F0 | 	shl	local08, #2
157dc     74 E8 05 F1 | 	add	ptr___system__dat__, #116
157e0     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
157e4     16 21 62 FC | 	wrlong	local02, local08
157e8     00 20 0E F2 | 	cmp	local02, #0 wz
157ec     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
157f0     18 00 90 5D |  if_ne	jmp	#LR__1981
157f4     02 26 66 F0 | 	shl	local05, #2
157f8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
157fc     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15800     13 01 68 FC | 	wrlong	#0, local05
15804     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15808     C4 00 90 FD | 	jmp	#LR__1984
1580c                 | LR__1981
1580c     13 2F 02 F6 | 	mov	local09, local05
15810     04 2E 66 F0 | 	shl	local09, #4
15814     24 E8 05 F1 | 	add	ptr___system__dat__, #36
15818     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
1581c     17 13 02 F6 | 	mov	arg01, local09
15820     0F 15 02 F6 | 	mov	arg02, local01
15824     10 16 06 F6 | 	mov	arg03, #16
15828     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
1582c     24 48 B0 FD | 	call	#__system__strncpy
15830     48 20 06 F1 | 	add	local02, #72
15834     10 2D 0A FB | 	rdlong	local08, local02 wz
15838     48 20 86 F1 | 	sub	local02, #72
1583c     7C 00 90 AD |  if_e	jmp	#LR__1983
15840     48 20 06 F1 | 	add	local02, #72
15844     10 2D 02 FB | 	rdlong	local08, local02
15848     16 31 02 F6 | 	mov	local10, local08
1584c     13 2C 46 F7 | 	zerox	local08, #19
15850     14 30 46 F0 | 	shr	local10, #20
15854     02 30 66 F0 | 	shl	local10, #2
15858     ED 30 02 F1 | 	add	local10, __methods__
1585c     18 31 02 FB | 	rdlong	local10, local10
15860     17 13 02 F6 | 	mov	arg01, local09
15864     F2 32 02 F6 | 	mov	local11, objptr
15868     16 E5 01 F6 | 	mov	objptr, local08
1586c     2D 30 62 FD | 	call	local10
15870     19 E5 01 F6 | 	mov	objptr, local11
15874     FD 12 0A F6 | 	mov	arg01, result1 wz
15878     40 00 90 AD |  if_e	jmp	#LR__1982
1587c     13 2D 02 F6 | 	mov	local08, local05
15880     02 2C 66 F0 | 	shl	local08, #2
15884     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15888     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
1588c     16 01 68 FC | 	wrlong	#0, local08
15890     02 26 66 F0 | 	shl	local05, #2
15894     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15898     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1589c     13 01 68 FC | 	wrlong	#0, local05
158a0     09 13 6A F6 | 	neg	arg01, arg01 wz
158a4     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
158a8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
158ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
158b0     01 FA 65 56 |  if_ne	neg	result1, #1
158b4     00 FA 05 A6 |  if_e	mov	result1, #0
158b8     18 00 90 FD | 	jmp	#LR__1985
158bc                 | LR__1982
158bc                 | LR__1983
158bc     02 26 66 F0 | 	shl	local05, #2
158c0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
158c4     F4 26 02 F1 | 	add	local05, ptr___system__dat__
158c8     13 2F 62 FC | 	wrlong	local09, local05
158cc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
158d0                 | LR__1984
158d0     00 FA 05 F6 | 	mov	result1, #0
158d4                 | LR__1985
158d4     A7 F0 03 F6 | 	mov	ptra, fp
158d8     B2 00 A0 FD | 	call	#popregs_
158dc                 | __system___mount_ret
158dc     2D 00 64 FD | 	ret
158e0                 | 
158e0                 | __system___chdir
158e0     00 4A 05 F6 | 	mov	COUNT_, #0
158e4     A8 00 A0 FD | 	call	#pushregs_
158e8     40 F0 07 F1 | 	add	ptra, #64
158ec     04 4E 05 F1 | 	add	fp, #4
158f0     A7 12 62 FC | 	wrlong	arg01, fp
158f4     04 4E 05 F1 | 	add	fp, #4
158f8     A7 14 02 F6 | 	mov	arg02, fp
158fc     08 4E 85 F1 | 	sub	fp, #8
15900     30 44 B0 FD | 	call	#__system__stat
15904     3C 4E 05 F1 | 	add	fp, #60
15908     A7 FA 61 FC | 	wrlong	result1, fp
1590c     3C 4E 85 F1 | 	sub	fp, #60
15910     00 FA 0D F2 | 	cmp	result1, #0 wz
15914     3C 4E 05 51 |  if_ne	add	fp, #60
15918     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1591c     3C 4E 85 51 |  if_ne	sub	fp, #60
15920     BC 00 90 5D |  if_ne	jmp	#LR__1992
15924     10 4E 05 F1 | 	add	fp, #16
15928     A7 12 02 FB | 	rdlong	arg01, fp
1592c     10 4E 85 F1 | 	sub	fp, #16
15930     78 00 00 FF 
15934     00 12 06 F5 | 	and	arg01, ##61440
15938     08 00 00 FF 
1593c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
15940     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
15944     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
15948     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
1594c     01 FA 65 56 |  if_ne	neg	result1, #1
15950     8C 00 90 5D |  if_ne	jmp	#LR__1992
15954     04 4E 05 F1 | 	add	fp, #4
15958     A7 16 02 FB | 	rdlong	arg03, fp
1595c     04 4E 85 F1 | 	sub	fp, #4
15960     0B 17 C2 FA | 	rdbyte	arg03, arg03
15964     2F 16 0E F2 | 	cmp	arg03, #47 wz
15968     24 00 90 5D |  if_ne	jmp	#LR__1990
1596c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15970     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15974     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15978     04 4E 05 F1 | 	add	fp, #4
1597c     A7 14 02 FB | 	rdlong	arg02, fp
15980     04 4E 85 F1 | 	sub	fp, #4
15984     00 17 06 F6 | 	mov	arg03, #256
15988     C8 46 B0 FD | 	call	#__system__strncpy
1598c     4C 00 90 FD | 	jmp	#LR__1991
15990                 | LR__1990
15990     84 E9 05 F1 | 	add	ptr___system__dat__, #388
15994     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15998     38 4E 05 F1 | 	add	fp, #56
1599c     A7 12 62 FC | 	wrlong	arg01, fp
159a0     38 4E 85 F1 | 	sub	fp, #56
159a4     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
159a8     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
159ac     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
159b0     00 17 06 F6 | 	mov	arg03, #256
159b4     9C 46 B0 FD | 	call	#__system__strncpy
159b8     38 4E 05 F1 | 	add	fp, #56
159bc     A7 12 02 FB | 	rdlong	arg01, fp
159c0     34 4E 85 F1 | 	sub	fp, #52
159c4     A7 14 02 FB | 	rdlong	arg02, fp
159c8     04 4E 85 F1 | 	sub	fp, #4
159cc     84 E8 05 F1 | 	add	ptr___system__dat__, #132
159d0     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
159d4     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
159d8     10 00 B0 FD | 	call	#__system____getvfsforfile
159dc                 | LR__1991
159dc     00 FA 05 F6 | 	mov	result1, #0
159e0                 | LR__1992
159e0     A7 F0 03 F6 | 	mov	ptra, fp
159e4     B2 00 A0 FD | 	call	#popregs_
159e8                 | __system___chdir_ret
159e8     2D 00 64 FD | 	ret
159ec                 | 
159ec                 | __system____getvfsforfile
159ec     0E 4A 05 F6 | 	mov	COUNT_, #14
159f0     A8 00 A0 FD | 	call	#pushregs_
159f4     09 1F 02 F6 | 	mov	local01, arg01
159f8     0A 21 02 F6 | 	mov	local02, arg02
159fc     0B 23 02 F6 | 	mov	local03, arg03
15a00     97 10 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
15a04                 | LR__2000
15a04     10 FB C1 FA | 	rdbyte	result1, local02
15a08     2F FA 0D F2 | 	cmp	result1, #47 wz
15a0c     01 20 06 A1 |  if_e	add	local02, #1
15a10     10 25 C2 AA |  if_e	rdbyte	local04, local02
15a14     01 20 86 A1 |  if_e	sub	local02, #1
15a18     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
15a1c     01 20 06 A1 |  if_e	add	local02, #1
15a20     E0 FF 9F AD |  if_e	jmp	#LR__2000
15a24                 | LR__2001
15a24     10 25 C2 FA | 	rdbyte	local04, local02
15a28     2F 24 0E F2 | 	cmp	local04, #47 wz
15a2c     14 00 90 5D |  if_ne	jmp	#LR__2002
15a30     0F 13 02 F6 | 	mov	arg01, local01
15a34     10 15 02 F6 | 	mov	arg02, local02
15a38     00 17 06 F6 | 	mov	arg03, #256
15a3c     14 46 B0 FD | 	call	#__system__strncpy
15a40     7C 00 90 FD | 	jmp	#LR__2004
15a44                 | LR__2002
15a44     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15a48     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15a4c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15a50     0F 13 02 F6 | 	mov	arg01, local01
15a54     00 17 06 F6 | 	mov	arg03, #256
15a58     F8 45 B0 FD | 	call	#__system__strncpy
15a5c     10 25 CA FA | 	rdbyte	local04, local02 wz
15a60     5C 00 90 AD |  if_e	jmp	#LR__2003
15a64     10 25 C2 FA | 	rdbyte	local04, local02
15a68     2E 24 0E F2 | 	cmp	local04, #46 wz
15a6c     01 20 06 A1 |  if_e	add	local02, #1
15a70     10 27 C2 AA |  if_e	rdbyte	local05, local02
15a74     01 20 86 A1 |  if_e	sub	local02, #1
15a78     13 29 02 A6 |  if_e	mov	local06, local05
15a7c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
15a80     3C 00 90 AD |  if_e	jmp	#LR__2003
15a84     0F 27 C2 FA | 	rdbyte	local05, local01
15a88     2F 26 0E F2 | 	cmp	local05, #47 wz
15a8c     01 1E 06 A1 |  if_e	add	local01, #1
15a90     0F 25 C2 AA |  if_e	rdbyte	local04, local01
15a94     01 1E 86 A1 |  if_e	sub	local01, #1
15a98     00 24 4E A2 |  if_e	cmps	local04, #0 wz
15a9c     22 01 00 5F 
15aa0     20 14 06 56 |  if_ne	mov	arg02, ##@LR__4030
15aa4     0F 13 02 56 |  if_ne	mov	arg01, local01
15aa8     00 17 06 56 |  if_ne	mov	arg03, #256
15aac     F0 45 B0 5D |  if_ne	call	#__system__strncat
15ab0     0F 13 02 F6 | 	mov	arg01, local01
15ab4     10 15 02 F6 | 	mov	arg02, local02
15ab8     00 17 06 F6 | 	mov	arg03, #256
15abc     E0 45 B0 FD | 	call	#__system__strncat
15ac0                 | LR__2003
15ac0                 | LR__2004
15ac0     0F 13 02 F6 | 	mov	arg01, local01
15ac4     98 47 B0 FD | 	call	#__system___normalizeName
15ac8     0F 25 CA FA | 	rdbyte	local04, local01 wz
15acc     1C 00 90 AD |  if_e	jmp	#LR__2005
15ad0     0F 25 C2 FA | 	rdbyte	local04, local01
15ad4     2F 24 0E F2 | 	cmp	local04, #47 wz
15ad8     01 1E 06 A1 |  if_e	add	local01, #1
15adc     0F 29 C2 AA |  if_e	rdbyte	local06, local01
15ae0     01 1E 86 A1 |  if_e	sub	local01, #1
15ae4     00 28 4E A2 |  if_e	cmps	local06, #0 wz
15ae8     18 00 90 5D |  if_ne	jmp	#LR__2006
15aec                 | LR__2005
15aec     01 00 00 FF 
15af0     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
15af4     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
15af8     01 00 00 FF 
15afc     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
15b00     EC 01 90 FD | 	jmp	#LR__2020
15b04                 | LR__2006
15b04     00 2A 06 F6 | 	mov	local07, #0
15b08                 | LR__2007
15b08     04 2A 56 F2 | 	cmps	local07, #4 wc
15b0c     CC 01 90 3D |  if_ae	jmp	#LR__2019
15b10     15 29 02 F6 | 	mov	local06, local07
15b14     02 28 66 F0 | 	shl	local06, #2
15b18     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15b1c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
15b20     14 29 0A FB | 	rdlong	local06, local06 wz
15b24     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15b28     A8 01 90 AD |  if_e	jmp	#LR__2018
15b2c     15 25 02 F6 | 	mov	local04, local07
15b30     02 24 66 F0 | 	shl	local04, #2
15b34     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15b38     F4 24 02 F1 | 	add	local04, ptr___system__dat__
15b3c     12 13 02 FB | 	rdlong	arg01, local04
15b40     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15b44     09 2D 02 F6 | 	mov	local08, arg01
15b48     97 06 48 FB | 	callpa	#(@LR__2009-@LR__2008)>>2,fcache_load_ptr_
15b4c                 | LR__2008
15b4c     16 FB C9 FA | 	rdbyte	result1, local08 wz
15b50     01 2C 06 51 |  if_ne	add	local08, #1
15b54     F4 FF 9F 5D |  if_ne	jmp	#LR__2008
15b58                 | LR__2009
15b58     09 2D 82 F1 | 	sub	local08, arg01
15b5c     16 2F 02 F6 | 	mov	local09, local08
15b60     17 25 02 F6 | 	mov	local04, local09
15b64     0F 25 02 F1 | 	add	local04, local01
15b68     12 29 C2 FA | 	rdbyte	local06, local04
15b6c     2F 28 0E F2 | 	cmp	local06, #47 wz
15b70     17 31 02 56 |  if_ne	mov	local10, local09
15b74     0F 31 02 51 |  if_ne	add	local10, local01
15b78     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
15b7c     54 01 90 5D |  if_ne	jmp	#LR__2017
15b80     15 17 02 F6 | 	mov	arg03, local07
15b84     02 16 66 F0 | 	shl	arg03, #2
15b88     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15b8c     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15b90     0B 15 02 FB | 	rdlong	arg02, arg03
15b94     17 17 02 F6 | 	mov	arg03, local09
15b98     0F 13 02 F6 | 	mov	arg01, local01
15b9c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15ba0     5C 45 B0 FD | 	call	#__system__strncmp
15ba4     00 FA 4D F2 | 	cmps	result1, #0 wz
15ba8     28 01 90 5D |  if_ne	jmp	#LR__2017
15bac     15 33 02 F6 | 	mov	local11, local07
15bb0     02 32 66 F0 | 	shl	local11, #2
15bb4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15bb8     F4 32 02 F1 | 	add	local11, ptr___system__dat__
15bbc     19 35 02 FB | 	rdlong	local12, local11
15bc0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15bc4     97 22 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
15bc8                 | LR__2010
15bc8     17 29 02 F6 | 	mov	local06, local09
15bcc     01 28 06 F1 | 	add	local06, #1
15bd0     0F 29 02 F1 | 	add	local06, local01
15bd4     14 33 C2 FA | 	rdbyte	local11, local06
15bd8     2E 32 0E F2 | 	cmp	local11, #46 wz
15bdc     2C 00 90 5D |  if_ne	jmp	#LR__2012
15be0     17 33 02 F6 | 	mov	local11, local09
15be4     02 32 06 F1 | 	add	local11, #2
15be8     0F 33 02 F1 | 	add	local11, local01
15bec     19 31 C2 FA | 	rdbyte	local10, local11
15bf0     2F 30 0E F2 | 	cmp	local10, #47 wz
15bf4     17 37 02 56 |  if_ne	mov	local13, local09
15bf8     02 36 06 51 |  if_ne	add	local13, #2
15bfc     0F 37 02 51 |  if_ne	add	local13, local01
15c00     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
15c04     01 2E 06 A1 |  if_e	add	local09, #1
15c08     BC FF 9F AD |  if_e	jmp	#LR__2010
15c0c                 | LR__2011
15c0c                 | LR__2012
15c0c     00 22 0E F2 | 	cmp	local03, #0 wz
15c10     11 13 02 56 |  if_ne	mov	arg01, local03
15c14     0F 15 02 56 |  if_ne	mov	arg02, local01
15c18     00 17 06 56 |  if_ne	mov	arg03, #256
15c1c     34 44 B0 5D |  if_ne	call	#__system__strncpy
15c20     0F 15 02 F6 | 	mov	arg02, local01
15c24     17 15 02 F1 | 	add	arg02, local09
15c28     01 14 06 F1 | 	add	arg02, #1
15c2c     0F 13 02 F6 | 	mov	arg01, local01
15c30     D4 F5 BF FD | 	call	#__system____builtin_strcpy
15c34     0F 13 02 F6 | 	mov	arg01, local01
15c38     09 2D 02 F6 | 	mov	local08, arg01
15c3c     97 06 48 FB | 	callpa	#(@LR__2014-@LR__2013)>>2,fcache_load_ptr_
15c40                 | LR__2013
15c40     16 FB C9 FA | 	rdbyte	result1, local08 wz
15c44     01 2C 06 51 |  if_ne	add	local08, #1
15c48     F4 FF 9F 5D |  if_ne	jmp	#LR__2013
15c4c                 | LR__2014
15c4c     09 2D 82 F1 | 	sub	local08, arg01
15c50     16 2F 02 F6 | 	mov	local09, local08
15c54                 | LR__2015
15c54     01 2E 56 F2 | 	cmps	local09, #1 wc
15c58     70 00 90 CD |  if_b	jmp	#LR__2016
15c5c     17 25 02 F6 | 	mov	local04, local09
15c60     0F 25 02 F1 | 	add	local04, local01
15c64     12 33 C2 FA | 	rdbyte	local11, local04
15c68     2F 32 0E F2 | 	cmp	local11, #47 wz
15c6c     17 33 02 A6 |  if_e	mov	local11, local09
15c70     0F 33 02 A1 |  if_e	add	local11, local01
15c74     19 01 48 AC |  if_e	wrbyte	#0, local11
15c78     01 2E 86 A1 |  if_e	sub	local09, #1
15c7c     D4 FF 9F AD |  if_e	jmp	#LR__2015
15c80     17 25 02 F6 | 	mov	local04, local09
15c84     0F 25 02 F1 | 	add	local04, local01
15c88     12 33 C2 FA | 	rdbyte	local11, local04
15c8c     2E 32 0E F2 | 	cmp	local11, #46 wz
15c90     38 00 90 5D |  if_ne	jmp	#LR__2016
15c94     02 2E 56 F2 | 	cmps	local09, #2 wc
15c98     30 00 90 CD |  if_b	jmp	#LR__2016
15c9c     17 39 02 F6 | 	mov	local14, local09
15ca0     01 38 86 F1 | 	sub	local14, #1
15ca4     0F 39 02 F1 | 	add	local14, local01
15ca8     1C 27 C2 FA | 	rdbyte	local05, local14
15cac     2F 26 0E F2 | 	cmp	local05, #47 wz
15cb0     18 00 90 5D |  if_ne	jmp	#LR__2016
15cb4     17 25 02 F6 | 	mov	local04, local09
15cb8     01 24 86 F1 | 	sub	local04, #1
15cbc     0F 25 02 F1 | 	add	local04, local01
15cc0     12 01 48 FC | 	wrbyte	#0, local04
15cc4     02 2E 86 F1 | 	sub	local09, #2
15cc8     88 FF 9F FD | 	jmp	#LR__2015
15ccc                 | LR__2016
15ccc     1A FB 01 F6 | 	mov	result1, local12
15cd0     1C 00 90 FD | 	jmp	#LR__2020
15cd4                 | LR__2017
15cd4                 | LR__2018
15cd4     01 2A 06 F1 | 	add	local07, #1
15cd8     2C FE 9F FD | 	jmp	#LR__2007
15cdc                 | LR__2019
15cdc     03 00 00 FF 
15ce0     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
15ce4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
15ce8     03 00 00 FF 
15cec     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
15cf0                 | LR__2020
15cf0     A7 F0 03 F6 | 	mov	ptra, fp
15cf4     B2 00 A0 FD | 	call	#popregs_
15cf8                 | __system____getvfsforfile_ret
15cf8     2D 00 64 FD | 	ret
15cfc                 | 
15cfc                 | __system___basic_open
15cfc     05 4A 05 F6 | 	mov	COUNT_, #5
15d00     A8 00 A0 FD | 	call	#pushregs_
15d04     0A 1F 02 F6 | 	mov	local01, arg02
15d08     0B 21 02 F6 | 	mov	local02, arg03
15d0c     0C 23 02 F6 | 	mov	local03, arg04
15d10     00 24 06 F6 | 	mov	local04, #0
15d14     14 43 B0 FD | 	call	#__system____getftab
15d18     FD 26 0A F6 | 	mov	local05, result1 wz
15d1c     18 00 90 5D |  if_ne	jmp	#LR__2030
15d20     EE 12 02 F6 | 	mov	arg01, abortchain
15d24     0C 14 06 F6 | 	mov	arg02, #12
15d28     01 16 06 F6 | 	mov	arg03, #1
15d2c     DA 00 A0 FD | 	call	#__longjmp
15d30     01 FA 65 F6 | 	neg	result1, #1
15d34     14 01 90 FD | 	jmp	#LR__2039
15d38                 | LR__2030
15d38     08 26 06 F1 | 	add	local05, #8
15d3c     13 FB 09 FB | 	rdlong	result1, local05 wz
15d40     08 26 86 F1 | 	sub	local05, #8
15d44     13 13 02 56 |  if_ne	mov	arg01, local05
15d48     70 3A B0 5D |  if_ne	call	#__system___closeraw
15d4c     00 1E 0E F2 | 	cmp	local01, #0 wz
15d50     00 20 0E A2 |  if_e	cmp	local02, #0 wz
15d54     00 22 0E A2 |  if_e	cmp	local03, #0 wz
15d58     3C 00 90 AD |  if_e	jmp	#LR__2032
15d5c     0C 12 06 F6 | 	mov	arg01, #12
15d60     58 2F B0 FD | 	call	#__system___gc_alloc_managed
15d64     FD 24 0A F6 | 	mov	local04, result1 wz
15d68     18 00 90 5D |  if_ne	jmp	#LR__2031
15d6c     EE 12 02 F6 | 	mov	arg01, abortchain
15d70     07 14 06 F6 | 	mov	arg02, #7
15d74     01 16 06 F6 | 	mov	arg03, #1
15d78     DA 00 A0 FD | 	call	#__longjmp
15d7c     01 FA 65 F6 | 	neg	result1, #1
15d80     C8 00 90 FD | 	jmp	#LR__2039
15d84                 | LR__2031
15d84     12 01 68 FC | 	wrlong	#0, local04
15d88     04 24 06 F1 | 	add	local04, #4
15d8c     12 01 68 FC | 	wrlong	#0, local04
15d90     04 24 86 F1 | 	sub	local04, #4
15d94     13 25 62 FC | 	wrlong	local04, local05
15d98                 | LR__2032
15d98     00 1E 0E F2 | 	cmp	local01, #0 wz
15d9c     20 00 90 AD |  if_e	jmp	#LR__2033
15da0     12 1F 62 FC | 	wrlong	local01, local04
15da4     12 FB 01 F6 | 	mov	result1, local04
15da8     00 58 02 FF 
15dac     00 FA 45 F5 | 	or	result1, ##78643200
15db0     1C 26 06 F1 | 	add	local05, #28
15db4     13 FB 61 FC | 	wrlong	result1, local05
15db8     1C 26 86 F1 | 	sub	local05, #28
15dbc     0C 00 90 FD | 	jmp	#LR__2034
15dc0                 | LR__2033
15dc0     1C 26 06 F1 | 	add	local05, #28
15dc4     13 01 68 FC | 	wrlong	#0, local05
15dc8     1C 26 86 F1 | 	sub	local05, #28
15dcc                 | LR__2034
15dcc     00 20 0E F2 | 	cmp	local02, #0 wz
15dd0     28 00 90 AD |  if_e	jmp	#LR__2035
15dd4     04 24 06 F1 | 	add	local04, #4
15dd8     12 21 62 FC | 	wrlong	local02, local04
15ddc     04 24 86 F1 | 	sub	local04, #4
15de0     12 FB 01 F6 | 	mov	result1, local04
15de4     00 60 02 FF 
15de8     00 FA 45 F5 | 	or	result1, ##79691776
15dec     20 26 06 F1 | 	add	local05, #32
15df0     13 FB 61 FC | 	wrlong	result1, local05
15df4     20 26 86 F1 | 	sub	local05, #32
15df8     0C 00 90 FD | 	jmp	#LR__2036
15dfc                 | LR__2035
15dfc     20 26 06 F1 | 	add	local05, #32
15e00     13 01 68 FC | 	wrlong	#0, local05
15e04     20 26 86 F1 | 	sub	local05, #32
15e08                 | LR__2036
15e08     00 22 0E F2 | 	cmp	local03, #0 wz
15e0c     24 00 90 AD |  if_e	jmp	#LR__2037
15e10     08 24 06 F1 | 	add	local04, #8
15e14     12 23 62 FC | 	wrlong	local03, local04
15e18     08 24 86 F1 | 	sub	local04, #8
15e1c     00 68 02 FF 
15e20     00 24 46 F5 | 	or	local04, ##80740352
15e24     24 26 06 F1 | 	add	local05, #36
15e28     13 25 62 FC | 	wrlong	local04, local05
15e2c     24 26 86 F1 | 	sub	local05, #36
15e30     0C 00 90 FD | 	jmp	#LR__2038
15e34                 | LR__2037
15e34     24 26 06 F1 | 	add	local05, #36
15e38     13 01 68 FC | 	wrlong	#0, local05
15e3c     24 26 86 F1 | 	sub	local05, #36
15e40                 | LR__2038
15e40     08 26 06 F1 | 	add	local05, #8
15e44     13 0F 68 FC | 	wrlong	#7, local05
15e48     00 FA 05 F6 | 	mov	result1, #0
15e4c                 | LR__2039
15e4c     A7 F0 03 F6 | 	mov	ptra, fp
15e50     B2 00 A0 FD | 	call	#popregs_
15e54                 | __system___basic_open_ret
15e54     2D 00 64 FD | 	ret
15e58                 | 
15e58                 | __system___basic_open_string
15e58     04 4A 05 F6 | 	mov	COUNT_, #4
15e5c     A8 00 A0 FD | 	call	#pushregs_
15e60     0A 1F 02 F6 | 	mov	local01, arg02
15e64     0B 21 02 F6 | 	mov	local02, arg03
15e68     C0 41 B0 FD | 	call	#__system____getftab
15e6c     FD 22 0A F6 | 	mov	local03, result1 wz
15e70     18 00 90 5D |  if_ne	jmp	#LR__2040
15e74     EE 12 02 F6 | 	mov	arg01, abortchain
15e78     0C 14 06 F6 | 	mov	arg02, #12
15e7c     01 16 06 F6 | 	mov	arg03, #1
15e80     DA 00 A0 FD | 	call	#__longjmp
15e84     01 FA 65 F6 | 	neg	result1, #1
15e88     58 00 90 FD | 	jmp	#LR__2042
15e8c                 | LR__2040
15e8c     08 22 06 F1 | 	add	local03, #8
15e90     11 19 0A FB | 	rdlong	arg04, local03 wz
15e94     08 22 86 F1 | 	sub	local03, #8
15e98     11 13 02 56 |  if_ne	mov	arg01, local03
15e9c     1C 39 B0 5D |  if_ne	call	#__system___closeraw
15ea0     0F 15 02 F6 | 	mov	arg02, local01
15ea4     10 17 02 F6 | 	mov	arg03, local02
15ea8     11 13 02 F6 | 	mov	arg01, local03
15eac     B6 19 06 F6 | 	mov	arg04, #438
15eb0     04 36 B0 FD | 	call	#__system___openraw
15eb4     FD 24 02 F6 | 	mov	local04, result1
15eb8     00 24 56 F2 | 	cmps	local04, #0 wc
15ebc     20 00 90 3D |  if_ae	jmp	#LR__2041
15ec0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15ec4     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
15ec8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15ecc     EE 12 02 F6 | 	mov	arg01, abortchain
15ed0     01 16 06 F6 | 	mov	arg03, #1
15ed4     DA 00 A0 FD | 	call	#__longjmp
15ed8     01 FA 65 F6 | 	neg	result1, #1
15edc     04 00 90 FD | 	jmp	#LR__2042
15ee0                 | LR__2041
15ee0     12 FB 01 F6 | 	mov	result1, local04
15ee4                 | LR__2042
15ee4     A7 F0 03 F6 | 	mov	ptra, fp
15ee8     B2 00 A0 FD | 	call	#popregs_
15eec                 | __system___basic_open_string_ret
15eec     2D 00 64 FD | 	ret
15ef0                 | 
15ef0                 | __system___basic_print_char
15ef0     03 4A 05 F6 | 	mov	COUNT_, #3
15ef4     A8 00 A0 FD | 	call	#pushregs_
15ef8     0A 1F 02 F6 | 	mov	local01, arg02
15efc     80 48 B0 FD | 	call	#__system___gettxfunc
15f00     FD 20 0A F6 | 	mov	local02, result1 wz
15f04     00 FA 05 A6 |  if_e	mov	result1, #0
15f08     30 00 90 AD |  if_e	jmp	#LR__2050
15f0c     10 23 02 F6 | 	mov	local03, local02
15f10     13 20 46 F7 | 	zerox	local02, #19
15f14     14 22 46 F0 | 	shr	local03, #20
15f18     02 22 66 F0 | 	shl	local03, #2
15f1c     ED 22 02 F1 | 	add	local03, __methods__
15f20     11 23 02 FB | 	rdlong	local03, local03
15f24     0F 13 02 F6 | 	mov	arg01, local01
15f28     F2 1E 02 F6 | 	mov	local01, objptr
15f2c     10 E5 01 F6 | 	mov	objptr, local02
15f30     2D 22 62 FD | 	call	local03
15f34     0F E5 01 F6 | 	mov	objptr, local01
15f38     01 FA 05 F6 | 	mov	result1, #1
15f3c                 | LR__2050
15f3c     A7 F0 03 F6 | 	mov	ptra, fp
15f40     B2 00 A0 FD | 	call	#popregs_
15f44                 | __system___basic_print_char_ret
15f44     2D 00 64 FD | 	ret
15f48                 | 
15f48                 | __system___basic_print_string
15f48     03 4A 05 F6 | 	mov	COUNT_, #3
15f4c     A8 00 A0 FD | 	call	#pushregs_
15f50     0A 1F 02 F6 | 	mov	local01, arg02
15f54     0B 21 02 F6 | 	mov	local02, arg03
15f58     24 48 B0 FD | 	call	#__system___gettxfunc
15f5c     FD 22 0A F6 | 	mov	local03, result1 wz
15f60     00 FA 05 A6 |  if_e	mov	result1, #0
15f64     18 00 90 AD |  if_e	jmp	#LR__2060
15f68     00 1E 0E F2 | 	cmp	local01, #0 wz
15f6c     00 FA 05 A6 |  if_e	mov	result1, #0
15f70     11 13 02 56 |  if_ne	mov	arg01, local03
15f74     10 15 02 56 |  if_ne	mov	arg02, local02
15f78     0F 17 02 56 |  if_ne	mov	arg03, local01
15f7c     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
15f80                 | LR__2060
15f80     A7 F0 03 F6 | 	mov	ptra, fp
15f84     B2 00 A0 FD | 	call	#popregs_
15f88                 | __system___basic_print_string_ret
15f88     2D 00 64 FD | 	ret
15f8c                 | 
15f8c                 | __system___basic_print_integer
15f8c     04 4A 05 F6 | 	mov	COUNT_, #4
15f90     A8 00 A0 FD | 	call	#pushregs_
15f94     0A 1F 02 F6 | 	mov	local01, arg02
15f98     0B 21 02 F6 | 	mov	local02, arg03
15f9c     0C 23 02 F6 | 	mov	local03, arg04
15fa0     DC 47 B0 FD | 	call	#__system___gettxfunc
15fa4     FD 24 0A F6 | 	mov	local04, result1 wz
15fa8     00 FA 05 A6 |  if_e	mov	result1, #0
15fac     12 13 02 56 |  if_ne	mov	arg01, local04
15fb0     10 15 02 56 |  if_ne	mov	arg02, local02
15fb4     0F 17 02 56 |  if_ne	mov	arg03, local01
15fb8     11 19 02 56 |  if_ne	mov	arg04, local03
15fbc     48 02 B0 5D |  if_ne	call	#__system___fmtnum
15fc0     A7 F0 03 F6 | 	mov	ptra, fp
15fc4     B2 00 A0 FD | 	call	#popregs_
15fc8                 | __system___basic_print_integer_ret
15fc8     2D 00 64 FD | 	ret
15fcc                 | 
15fcc                 | __system___basic_print_unsigned
15fcc     03 4A 05 F6 | 	mov	COUNT_, #3
15fd0     A8 00 A0 FD | 	call	#pushregs_
15fd4     0A 1F 02 F6 | 	mov	local01, arg02
15fd8     0B 21 02 F6 | 	mov	local02, arg03
15fdc     0C 23 02 F6 | 	mov	local03, arg04
15fe0     9C 47 B0 FD | 	call	#__system___gettxfunc
15fe4     FD 12 0A F6 | 	mov	arg01, result1 wz
15fe8     00 FA 05 A6 |  if_e	mov	result1, #0
15fec     3A 20 26 54 |  if_ne	bith	local02, #58
15ff0     10 15 02 56 |  if_ne	mov	arg02, local02
15ff4     0F 17 02 56 |  if_ne	mov	arg03, local01
15ff8     11 19 02 56 |  if_ne	mov	arg04, local03
15ffc     08 02 B0 5D |  if_ne	call	#__system___fmtnum
16000     A7 F0 03 F6 | 	mov	ptra, fp
16004     B2 00 A0 FD | 	call	#popregs_
16008                 | __system___basic_print_unsigned_ret
16008     2D 00 64 FD | 	ret
1600c                 | 
1600c                 | __system___basic_get_char
1600c     03 4A 05 F6 | 	mov	COUNT_, #3
16010     A8 00 A0 FD | 	call	#pushregs_
16014     AC 47 B0 FD | 	call	#__system___getrxfunc
16018     FD 1E 0A F6 | 	mov	local01, result1 wz
1601c     01 FA 65 A6 |  if_e	neg	result1, #1
16020     28 00 90 AD |  if_e	jmp	#LR__2070
16024     0F 21 02 F6 | 	mov	local02, local01
16028     13 1E 46 F7 | 	zerox	local01, #19
1602c     14 20 46 F0 | 	shr	local02, #20
16030     02 20 66 F0 | 	shl	local02, #2
16034     ED 20 02 F1 | 	add	local02, __methods__
16038     10 21 02 FB | 	rdlong	local02, local02
1603c     F2 22 02 F6 | 	mov	local03, objptr
16040     0F E5 01 F6 | 	mov	objptr, local01
16044     2D 20 62 FD | 	call	local02
16048     11 E5 01 F6 | 	mov	objptr, local03
1604c                 | LR__2070
1604c     A7 F0 03 F6 | 	mov	ptra, fp
16050     B2 00 A0 FD | 	call	#popregs_
16054                 | __system___basic_get_char_ret
16054     2D 00 64 FD | 	ret
16058                 | 
16058                 | __system___basic_get
16058     04 4A 05 F6 | 	mov	COUNT_, #4
1605c     A8 00 A0 FD | 	call	#pushregs_
16060     0D 1F 02 F6 | 	mov	local01, arg05
16064     0F 19 02 FD | 	qmul	arg04, local01
16068     09 21 02 F6 | 	mov	local02, arg01
1606c     0B 23 02 F6 | 	mov	local03, arg03
16070     00 14 0E F2 | 	cmp	arg02, #0 wz
16074     01 14 86 51 |  if_ne	sub	arg02, #1
16078     10 13 02 56 |  if_ne	mov	arg01, local02
1607c     00 16 06 56 |  if_ne	mov	arg03, #0
16080     18 24 62 FD | 	getqx	local04
16084     EC 3D B0 5D |  if_ne	call	#__system__lseek
16088     11 15 02 F6 | 	mov	arg02, local03
1608c     12 17 02 F6 | 	mov	arg03, local04
16090     10 13 02 F6 | 	mov	arg01, local02
16094     64 3D B0 FD | 	call	#__system__read
16098     FD 24 02 F6 | 	mov	local04, result1
1609c     01 24 56 F2 | 	cmps	local04, #1 wc
160a0     10 00 90 CD |  if_b	jmp	#LR__2080
160a4     12 5F 02 F6 | 	mov	muldiva_, local04
160a8     0F 61 02 F6 | 	mov	muldivb_, local01
160ac     BA 00 A0 FD | 	call	#divide_
160b0     30 25 02 F6 | 	mov	local04, muldivb_
160b4                 | LR__2080
160b4     12 FB 01 F6 | 	mov	result1, local04
160b8     A7 F0 03 F6 | 	mov	ptra, fp
160bc     B2 00 A0 FD | 	call	#popregs_
160c0                 | __system___basic_get_ret
160c0     2D 00 64 FD | 	ret
160c4                 | 
160c4                 | __system___fmtchar
160c4     00 4A 05 F6 | 	mov	COUNT_, #0
160c8     A8 00 A0 FD | 	call	#pushregs_
160cc     10 F0 07 F1 | 	add	ptra, #16
160d0     04 4E 05 F1 | 	add	fp, #4
160d4     A7 12 62 FC | 	wrlong	arg01, fp
160d8     04 4E 05 F1 | 	add	fp, #4
160dc     A7 14 62 FC | 	wrlong	arg02, fp
160e0     04 4E 05 F1 | 	add	fp, #4
160e4     A7 16 62 FC | 	wrlong	arg03, fp
160e8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
160ec     A7 16 62 FC | 	wrlong	arg03, fp
160f0     08 4E 85 F1 | 	sub	fp, #8
160f4     A7 12 02 FB | 	rdlong	arg01, fp
160f8     04 4E 05 F1 | 	add	fp, #4
160fc     A7 14 02 FB | 	rdlong	arg02, fp
16100     04 4E 05 F1 | 	add	fp, #4
16104     A7 16 02 F6 | 	mov	arg03, fp
16108     0C 4E 85 F1 | 	sub	fp, #12
1610c     0C 00 B0 FD | 	call	#__system___fmtstr
16110     A7 F0 03 F6 | 	mov	ptra, fp
16114     B2 00 A0 FD | 	call	#popregs_
16118                 | __system___fmtchar_ret
16118     2D 00 64 FD | 	ret
1611c                 | 
1611c                 | __system___fmtstr
1611c     09 4A 05 F6 | 	mov	COUNT_, #9
16120     A8 00 A0 FD | 	call	#pushregs_
16124     09 1F 02 F6 | 	mov	local01, arg01
16128     0A 21 02 F6 | 	mov	local02, arg02
1612c     0B 23 02 F6 | 	mov	local03, arg03
16130     10 19 E2 F8 | 	getbyte	arg04, local02, #0
16134     11 13 02 F6 | 	mov	arg01, local03
16138     09 25 02 F6 | 	mov	local04, arg01
1613c     97 06 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
16140                 | LR__2090
16140     12 FB C9 FA | 	rdbyte	result1, local04 wz
16144     01 24 06 51 |  if_ne	add	local04, #1
16148     F4 FF 9F 5D |  if_ne	jmp	#LR__2090
1614c                 | LR__2091
1614c     09 25 82 F1 | 	sub	local04, arg01
16150     00 18 0E F2 | 	cmp	arg04, #0 wz
16154     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
16158     10 15 02 F6 | 	mov	arg02, local02
1615c     12 17 02 F6 | 	mov	arg03, local04
16160     0F 13 02 F6 | 	mov	arg01, local01
16164     02 18 06 F6 | 	mov	arg04, #2
16168     B4 42 B0 FD | 	call	#__system___fmtpad
1616c     FD 26 02 F6 | 	mov	local05, result1
16170     00 26 56 F2 | 	cmps	local05, #0 wc
16174     13 FB 01 C6 |  if_b	mov	result1, local05
16178     80 00 90 CD |  if_b	jmp	#LR__2094
1617c     01 24 56 F2 | 	cmps	local04, #1 wc
16180     50 00 90 CD |  if_b	jmp	#LR__2093
16184     12 29 02 F6 | 	mov	local06, local04
16188                 | LR__2092
16188     0F 2B 02 F6 | 	mov	local07, local01
1618c     0F 2D 02 F6 | 	mov	local08, local01
16190     13 2A 46 F7 | 	zerox	local07, #19
16194     14 2C 46 F0 | 	shr	local08, #20
16198     02 2C 66 F0 | 	shl	local08, #2
1619c     ED 2C 02 F1 | 	add	local08, __methods__
161a0     16 2D 02 FB | 	rdlong	local08, local08
161a4     11 13 C2 FA | 	rdbyte	arg01, local03
161a8     F2 2E 02 F6 | 	mov	local09, objptr
161ac     15 E5 01 F6 | 	mov	objptr, local07
161b0     01 22 06 F1 | 	add	local03, #1
161b4     2D 2C 62 FD | 	call	local08
161b8     17 E5 01 F6 | 	mov	objptr, local09
161bc     FD 2E 02 F6 | 	mov	local09, result1
161c0     00 2E 56 F2 | 	cmps	local09, #0 wc
161c4     17 FB 01 C6 |  if_b	mov	result1, local09
161c8     30 00 90 CD |  if_b	jmp	#LR__2094
161cc     17 27 02 F1 | 	add	local05, local09
161d0     ED 29 6E FB | 	djnz	local06, #LR__2092
161d4                 | LR__2093
161d4     10 15 02 F6 | 	mov	arg02, local02
161d8     12 17 02 F6 | 	mov	arg03, local04
161dc     0F 13 02 F6 | 	mov	arg01, local01
161e0     01 18 06 F6 | 	mov	arg04, #1
161e4     38 42 B0 FD | 	call	#__system___fmtpad
161e8     FD 2E 02 F6 | 	mov	local09, result1
161ec     00 2E 56 F2 | 	cmps	local09, #0 wc
161f0     17 FB 01 C6 |  if_b	mov	result1, local09
161f4     17 27 02 31 |  if_ae	add	local05, local09
161f8     13 FB 01 36 |  if_ae	mov	result1, local05
161fc                 | LR__2094
161fc     A7 F0 03 F6 | 	mov	ptra, fp
16200     B2 00 A0 FD | 	call	#popregs_
16204                 | __system___fmtstr_ret
16204     2D 00 64 FD | 	ret
16208                 | 
16208                 | __system___fmtnum
16208     0B 4A 05 F6 | 	mov	COUNT_, #11
1620c     A8 00 A0 FD | 	call	#pushregs_
16210     09 1F 02 F6 | 	mov	local01, arg01
16214     0A 21 02 F6 | 	mov	local02, arg02
16218     0B 23 02 F6 | 	mov	local03, arg03
1621c     0C 25 02 F6 | 	mov	local04, arg04
16220     F8 27 02 F6 | 	mov	local05, ptra
16224     13 29 02 F6 | 	mov	local06, local05
16228     00 2A 06 F6 | 	mov	local07, #0
1622c     10 2D 02 F6 | 	mov	local08, local02
16230     10 2C 46 F0 | 	shr	local08, #16
16234     3F 2C 06 F5 | 	and	local08, #63
16238     10 2F E2 F8 | 	getbyte	local09, local02, #0
1623c     10 31 02 F6 | 	mov	local10, local02
16240     1A 30 46 F0 | 	shr	local10, #26
16244     03 30 06 F5 | 	and	local10, #3
16248     18 33 02 F6 | 	mov	local11, local10
1624c     01 2C 56 F2 | 	cmps	local08, #1 wc
16250     44 F0 07 F1 | 	add	ptra, #68
16254     01 2C 86 31 |  if_ae	sub	local08, #1
16258     41 2E 56 F2 | 	cmps	local09, #65 wc
1625c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
16260     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
16264     03 32 0E F2 | 	cmp	local11, #3 wz
16268     00 32 06 A6 |  if_e	mov	local11, #0
1626c     00 22 56 52 |  if_ne	cmps	local03, #0 wc
16270     04 32 06 46 |  if_c_and_nz	mov	local11, #4
16274     11 23 62 46 |  if_c_and_nz	neg	local03, local03
16278     00 32 0E F2 | 	cmp	local11, #0 wz
1627c     4C 00 90 AD |  if_e	jmp	#LR__2103
16280     01 2A 06 F6 | 	mov	local07, #1
16284     17 2D 0A F2 | 	cmp	local08, local09 wz
16288     18 00 90 5D |  if_ne	jmp	#LR__2101
1628c     05 2C 6E FB | 	djnz	local08, #LR__2100
16290     0F 13 02 F6 | 	mov	arg01, local01
16294     10 15 02 F6 | 	mov	arg02, local02
16298     23 16 06 F6 | 	mov	arg03, #35
1629c     24 FE BF FD | 	call	#__system___fmtchar
162a0     88 00 90 FD | 	jmp	#LR__2107
162a4                 | LR__2100
162a4                 | LR__2101
162a4     02 32 0E F2 | 	cmp	local11, #2 wz
162a8     14 31 02 A6 |  if_e	mov	local10, local06
162ac     01 28 06 A1 |  if_e	add	local06, #1
162b0     18 41 48 AC |  if_e	wrbyte	#32, local10
162b4     14 00 90 AD |  if_e	jmp	#LR__2102
162b8     04 32 0E F2 | 	cmp	local11, #4 wz
162bc     14 5B 48 AC |  if_e	wrbyte	#45, local06
162c0     01 28 06 A1 |  if_e	add	local06, #1
162c4     14 57 48 5C |  if_ne	wrbyte	#43, local06
162c8     01 28 06 51 |  if_ne	add	local06, #1
162cc                 | LR__2102
162cc                 | LR__2103
162cc     14 13 02 F6 | 	mov	arg01, local06
162d0     11 15 02 F6 | 	mov	arg02, local03
162d4     12 17 02 F6 | 	mov	arg03, local04
162d8     16 19 02 F6 | 	mov	arg04, local08
162dc     00 1A 06 F6 | 	mov	arg05, #0
162e0     1D 20 2E F4 | 	testbn	local02, #29 wz
162e4     01 1A 06 56 |  if_ne	mov	arg05, #1
162e8     FC 41 B0 FD | 	call	#__system___uitoa
162ec     FD 2A 02 F1 | 	add	local07, result1
162f0     17 2B 5A F2 | 	cmps	local07, local09 wcz
162f4     24 00 90 ED |  if_be	jmp	#LR__2106
162f8     97 0E 48 FB | 	callpa	#(@LR__2105-@LR__2104)>>2,fcache_load_ptr_
162fc                 | LR__2104
162fc     17 31 02 F6 | 	mov	local10, local09
16300     01 30 56 F2 | 	cmps	local10, #1 wc
16304     01 2E 86 F1 | 	sub	local09, #1
16308     14 31 02 36 |  if_ae	mov	local10, local06
1630c     01 28 06 31 |  if_ae	add	local06, #1
16310     18 47 48 3C |  if_ae	wrbyte	#35, local10
16314     E4 FF 9F 3D |  if_ae	jmp	#LR__2104
16318                 | LR__2105
16318     14 01 48 FC | 	wrbyte	#0, local06
1631c                 | LR__2106
1631c     0F 13 02 F6 | 	mov	arg01, local01
16320     10 15 02 F6 | 	mov	arg02, local02
16324     13 17 02 F6 | 	mov	arg03, local05
16328     F0 FD BF FD | 	call	#__system___fmtstr
1632c                 | LR__2107
1632c     A7 F0 03 F6 | 	mov	ptra, fp
16330     B2 00 A0 FD | 	call	#popregs_
16334                 | __system___fmtnum_ret
16334     2D 00 64 FD | 	ret
16338                 | 
16338                 | __system___fmtfloat
16338     10 4A 05 F6 | 	mov	COUNT_, #16
1633c     A8 00 A0 FD | 	call	#pushregs_
16340     24 F1 07 F1 | 	add	ptra, #292
16344     04 4E 05 F1 | 	add	fp, #4
16348     A7 12 62 FC | 	wrlong	arg01, fp
1634c     04 4E 05 F1 | 	add	fp, #4
16350     A7 14 62 FC | 	wrlong	arg02, fp
16354     04 4E 05 F1 | 	add	fp, #4
16358     A7 16 62 FC | 	wrlong	arg03, fp
1635c     04 4E 05 F1 | 	add	fp, #4
16360     A7 18 62 FC | 	wrlong	arg04, fp
16364     0C 4E 05 F1 | 	add	fp, #12
16368     A7 14 68 FC | 	wrlong	#10, fp
1636c     08 4E 05 F1 | 	add	fp, #8
16370     A7 00 68 FC | 	wrlong	#0, fp
16374     08 4E 05 F1 | 	add	fp, #8
16378     A7 00 68 FC | 	wrlong	#0, fp
1637c     08 4E 05 F1 | 	add	fp, #8
16380     A7 00 68 FC | 	wrlong	#0, fp
16384     04 4E 05 F1 | 	add	fp, #4
16388     A7 04 68 FC | 	wrlong	#2, fp
1638c     04 4E 05 F1 | 	add	fp, #4
16390     A7 00 68 FC | 	wrlong	#0, fp
16394     04 4E 05 F1 | 	add	fp, #4
16398     A7 00 68 FC | 	wrlong	#0, fp
1639c     04 4E 05 F1 | 	add	fp, #4
163a0     A7 00 68 FC | 	wrlong	#0, fp
163a4     04 4E 05 F1 | 	add	fp, #4
163a8     A7 00 68 FC | 	wrlong	#0, fp
163ac     18 4E 05 F1 | 	add	fp, #24
163b0     A7 00 68 FC | 	wrlong	#0, fp
163b4     68 4E 05 F1 | 	add	fp, #104
163b8     A7 1E 02 F6 | 	mov	local01, fp
163bc     08 4E 85 F1 | 	sub	fp, #8
163c0     A7 1E 62 FC | 	wrlong	local01, fp
163c4     04 4E 05 F1 | 	add	fp, #4
163c8     A7 1E 62 FC | 	wrlong	local01, fp
163cc     BC 4E 85 F1 | 	sub	fp, #188
163d0     A7 1E 02 FB | 	rdlong	local01, fp
163d4     10 1E 46 F0 | 	shr	local01, #16
163d8     3F 1E 06 F5 | 	and	local01, #63
163dc     B0 4E 05 F1 | 	add	fp, #176
163e0     A7 1E 62 FC | 	wrlong	local01, fp
163e4     B0 4E 85 F1 | 	sub	fp, #176
163e8     A7 1E 02 FB | 	rdlong	local01, fp
163ec     1C 1E 46 F0 | 	shr	local01, #28
163f0     01 1E 06 F5 | 	and	local01, #1
163f4     08 4F 05 F1 | 	add	fp, #264
163f8     A7 1E 62 FC | 	wrlong	local01, fp
163fc     58 4E 85 F1 | 	sub	fp, #88
16400     A7 1E 0A FB | 	rdlong	local01, fp wz
16404     B8 4E 85 F1 | 	sub	fp, #184
16408     3C 00 90 5D |  if_ne	jmp	#LR__2111
1640c     10 4E 05 F1 | 	add	fp, #16
16410     A7 1E 02 FB | 	rdlong	local01, fp
16414     10 4E 85 F1 | 	sub	fp, #16
16418     61 1E 0E F2 | 	cmp	local01, #97 wz
1641c     18 00 90 5D |  if_ne	jmp	#LR__2110
16420     B8 4E 05 F1 | 	add	fp, #184
16424     A7 1A 68 FC | 	wrlong	#13, fp
16428     84 4E 85 F1 | 	sub	fp, #132
1642c     A7 02 68 FC | 	wrlong	#1, fp
16430     34 4E 85 F1 | 	sub	fp, #52
16434     24 00 90 FD | 	jmp	#LR__2112
16438                 | LR__2110
16438     B8 4E 05 F1 | 	add	fp, #184
1643c     A7 0C 68 FC | 	wrlong	#6, fp
16440     B8 4E 85 F1 | 	sub	fp, #184
16444     14 00 90 FD | 	jmp	#LR__2112
16448                 | LR__2111
16448     B8 4E 05 F1 | 	add	fp, #184
1644c     A7 1E 02 FB | 	rdlong	local01, fp
16450     01 1E 86 F1 | 	sub	local01, #1
16454     A7 1E 62 FC | 	wrlong	local01, fp
16458     B8 4E 85 F1 | 	sub	fp, #184
1645c                 | LR__2112
1645c     08 4E 05 F1 | 	add	fp, #8
16460     A7 1E 02 FB | 	rdlong	local01, fp
16464     16 1E 46 F0 | 	shr	local01, #22
16468     03 1E 06 F5 | 	and	local01, #3
1646c     04 4F 05 F1 | 	add	fp, #260
16470     A7 1E 62 FC | 	wrlong	local01, fp
16474     04 4F 85 F1 | 	sub	fp, #260
16478     A7 1E 02 FB | 	rdlong	local01, fp
1647c     1D 1E 46 F0 | 	shr	local01, #29
16480     01 1E 06 F5 | 	and	local01, #1
16484     B4 4E 05 F1 | 	add	fp, #180
16488     A7 1E 62 FC | 	wrlong	local01, fp
1648c     B4 4E 85 F1 | 	sub	fp, #180
16490     A7 1E 02 FB | 	rdlong	local01, fp
16494     0F 1F EA F8 | 	getbyte	local01, local01, #1
16498     60 4E 05 F1 | 	add	fp, #96
1649c     A7 1E 62 FC | 	wrlong	local01, fp
164a0     60 4E 85 F1 | 	sub	fp, #96
164a4     A7 1E 02 FB | 	rdlong	local01, fp
164a8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
164ac     64 4E 05 F1 | 	add	fp, #100
164b0     A7 1E 62 FC | 	wrlong	local01, fp
164b4     00 1E 06 F6 | 	mov	local01, #0
164b8     5C 4E 85 F1 | 	sub	fp, #92
164bc     A7 1A 02 FB | 	rdlong	arg05, fp
164c0     65 1A 0E F2 | 	cmp	arg05, #101 wz
164c4     01 1E 06 A6 |  if_e	mov	local01, #1
164c8     14 4E 05 F1 | 	add	fp, #20
164cc     A7 1E 62 FC | 	wrlong	local01, fp
164d0     98 4E 05 F1 | 	add	fp, #152
164d4     A7 20 0A FB | 	rdlong	local02, fp wz
164d8     45 1E 06 56 |  if_ne	mov	local01, #69
164dc     65 1E 06 A6 |  if_e	mov	local01, #101
164e0     8C 4E 85 F1 | 	sub	fp, #140
164e4     A7 1E 62 FC | 	wrlong	local01, fp
164e8     20 4E 85 F1 | 	sub	fp, #32
164ec     A7 1E 02 FB | 	rdlong	local01, fp
164f0     10 4E 85 F1 | 	sub	fp, #16
164f4     61 1E 0E F2 | 	cmp	local01, #97 wz
164f8     4C 00 90 5D |  if_ne	jmp	#LR__2113
164fc     24 4E 05 F1 | 	add	fp, #36
16500     A7 02 68 FC | 	wrlong	#1, fp
16504     98 4E 05 F1 | 	add	fp, #152
16508     A7 20 0A FB | 	rdlong	local02, fp wz
1650c     50 1E 06 56 |  if_ne	mov	local01, #80
16510     70 1E 06 A6 |  if_e	mov	local01, #112
16514     8C 4E 85 F1 | 	sub	fp, #140
16518     A7 1E 62 FC | 	wrlong	local01, fp
1651c     14 4E 85 F1 | 	sub	fp, #20
16520     A7 04 68 FC | 	wrlong	#2, fp
16524     1C 4E 05 F1 | 	add	fp, #28
16528     A7 02 68 FC | 	wrlong	#1, fp
1652c     84 4E 05 F1 | 	add	fp, #132
16530     A7 20 0A FB | 	rdlong	local02, fp wz
16534     58 1E 06 56 |  if_ne	mov	local01, #88
16538     78 1E 06 A6 |  if_e	mov	local01, #120
1653c     7C 4E 85 F1 | 	sub	fp, #124
16540     A7 1E 62 FC | 	wrlong	local01, fp
16544     40 4E 85 F1 | 	sub	fp, #64
16548                 | LR__2113
16548     10 4E 05 F1 | 	add	fp, #16
1654c     A7 1E 02 FB | 	rdlong	local01, fp
16550     10 4E 85 F1 | 	sub	fp, #16
16554     23 1E 0E F2 | 	cmp	local01, #35 wz
16558     3C 00 90 5D |  if_ne	jmp	#LR__2116
1655c     48 4E 05 F1 | 	add	fp, #72
16560     A7 02 68 FC | 	wrlong	#1, fp
16564     C8 4E 05 F1 | 	add	fp, #200
16568     A7 1E 0A FB | 	rdlong	local01, fp wz
1656c     10 4F 85 F1 | 	sub	fp, #272
16570     18 00 90 AD |  if_e	jmp	#LR__2114
16574     10 4E 05 F1 | 	add	fp, #16
16578     A7 CC 68 FC | 	wrlong	#102, fp
1657c     00 4F 05 F1 | 	add	fp, #256
16580     A7 00 68 FC | 	wrlong	#0, fp
16584     10 4F 85 F1 | 	sub	fp, #272
16588     0C 00 90 FD | 	jmp	#LR__2115
1658c                 | LR__2114
1658c     10 4F 05 F1 | 	add	fp, #272
16590     A7 02 68 FC | 	wrlong	#1, fp
16594     10 4F 85 F1 | 	sub	fp, #272
16598                 | LR__2115
16598                 | LR__2116
16598     08 4E 05 F1 | 	add	fp, #8
1659c     A7 1E 02 FB | 	rdlong	local01, fp
165a0     1A 1E 46 F0 | 	shr	local01, #26
165a4     03 1E 06 F5 | 	and	local01, #3
165a8     5C 4E 05 F1 | 	add	fp, #92
165ac     A7 1E 62 FC | 	wrlong	local01, fp
165b0     58 4E 85 F1 | 	sub	fp, #88
165b4     A7 FA 01 FB | 	rdlong	result1, fp
165b8     0C 4E 85 F1 | 	sub	fp, #12
165bc     1F FA 4D F0 | 	shr	result1, #31 wz
165c0     20 00 90 AD |  if_e	jmp	#LR__2117
165c4     2C 4E 05 F1 | 	add	fp, #44
165c8     A7 5A 68 FC | 	wrlong	#45, fp
165cc     20 4E 85 F1 | 	sub	fp, #32
165d0     A7 FA 01 FB | 	rdlong	result1, fp
165d4     1F FA E5 F4 | 	bitnot	result1, #31
165d8     A7 FA 61 FC | 	wrlong	result1, fp
165dc     0C 4E 85 F1 | 	sub	fp, #12
165e0     3C 00 90 FD | 	jmp	#LR__2119
165e4                 | LR__2117
165e4     64 4E 05 F1 | 	add	fp, #100
165e8     A7 1E 02 FB | 	rdlong	local01, fp
165ec     64 4E 85 F1 | 	sub	fp, #100
165f0     01 1E 0E F2 | 	cmp	local01, #1 wz
165f4     2C 4E 05 A1 |  if_e	add	fp, #44
165f8     A7 56 68 AC |  if_e	wrlong	#43, fp
165fc     2C 4E 85 A1 |  if_e	sub	fp, #44
16600     1C 00 90 AD |  if_e	jmp	#LR__2118
16604     64 4E 05 F1 | 	add	fp, #100
16608     A7 1E 02 FB | 	rdlong	local01, fp
1660c     64 4E 85 F1 | 	sub	fp, #100
16610     02 1E 0E F2 | 	cmp	local01, #2 wz
16614     2C 4E 05 A1 |  if_e	add	fp, #44
16618     A7 40 68 AC |  if_e	wrlong	#32, fp
1661c     2C 4E 85 A1 |  if_e	sub	fp, #44
16620                 | LR__2118
16620                 | LR__2119
16620     08 4E 05 F1 | 	add	fp, #8
16624     A7 1E 02 FB | 	rdlong	local01, fp
16628     18 1E 46 F0 | 	shr	local01, #24
1662c     03 1E 06 F5 | 	and	local01, #3
16630     3C 4E 05 F1 | 	add	fp, #60
16634     A7 1E 62 FC | 	wrlong	local01, fp
16638     00 1E 06 F6 | 	mov	local01, #0
1663c     18 4E 85 F1 | 	sub	fp, #24
16640     A7 22 0A FB | 	rdlong	local03, fp wz
16644     2C 4E 85 F1 | 	sub	fp, #44
16648     18 00 90 5D |  if_ne	jmp	#LR__2120
1664c     1C 4E 05 F1 | 	add	fp, #28
16650     A7 24 02 FB | 	rdlong	local04, fp
16654     1C 4E 85 F1 | 	sub	fp, #28
16658     12 27 02 F6 | 	mov	local05, local04
1665c     0A 26 0E F2 | 	cmp	local05, #10 wz
16660     04 00 90 AD |  if_e	jmp	#LR__2121
16664                 | LR__2120
16664     01 1E 66 F5 | 	xor	local01, #1
16668                 | LR__2121
16668     3C 4E 05 F1 | 	add	fp, #60
1666c     A7 1E 62 FC | 	wrlong	local01, fp
16670     3C 4E 85 F1 | 	sub	fp, #60
16674     00 1E 0E F2 | 	cmp	local01, #0 wz
16678     0C 01 90 AD |  if_e	jmp	#LR__2123
1667c     44 4E 05 F1 | 	add	fp, #68
16680     A7 26 02 FB | 	rdlong	local05, fp
16684     44 4E 85 F1 | 	sub	fp, #68
16688     13 23 02 F6 | 	mov	local03, local05
1668c     02 22 0E F2 | 	cmp	local03, #2 wz
16690     F4 00 90 5D |  if_ne	jmp	#LR__2123
16694     0C 4F 05 F1 | 	add	fp, #268
16698     A7 28 02 FB | 	rdlong	local06, fp
1669c     0C 4F 85 F1 | 	sub	fp, #268
166a0     14 25 02 F6 | 	mov	local04, local06
166a4     02 24 0E F2 | 	cmp	local04, #2 wz
166a8     DC 00 90 AD |  if_e	jmp	#LR__2123
166ac     C0 4E 05 F1 | 	add	fp, #192
166b0     A7 12 02 FB | 	rdlong	arg01, fp
166b4     94 4E 85 F1 | 	sub	fp, #148
166b8     A7 14 02 FB | 	rdlong	arg02, fp
166bc     14 4E 05 F1 | 	add	fp, #20
166c0     A7 16 02 FB | 	rdlong	arg03, fp
166c4     40 4E 85 F1 | 	sub	fp, #64
166c8     84 40 B0 FD | 	call	#__system__emitsign_0294
166cc     14 4F 05 F1 | 	add	fp, #276
166d0     A7 FA 61 FC | 	wrlong	result1, fp
166d4     14 4F 85 F1 | 	sub	fp, #276
166d8     00 FA 55 F2 | 	cmps	result1, #0 wc
166dc     14 4F 05 C1 |  if_b	add	fp, #276
166e0     A7 FA 01 CB |  if_b	rdlong	result1, fp
166e4     14 4F 85 C1 |  if_b	sub	fp, #276
166e8     6C 0B 90 CD |  if_b	jmp	#LR__2173
166ec     C0 4E 05 F1 | 	add	fp, #192
166f0     A7 1E 02 FB | 	rdlong	local01, fp
166f4     54 4E 05 F1 | 	add	fp, #84
166f8     A7 26 02 FB | 	rdlong	local05, fp
166fc     13 23 02 F6 | 	mov	local03, local05
16700     13 1F 02 F1 | 	add	local01, local05
16704     54 4E 85 F1 | 	sub	fp, #84
16708     A7 1E 62 FC | 	wrlong	local01, fp
1670c     58 4E 85 F1 | 	sub	fp, #88
16710     A7 1E 0A FB | 	rdlong	local01, fp wz
16714     68 4E 85 F1 | 	sub	fp, #104
16718     60 00 90 AD |  if_e	jmp	#LR__2122
1671c     68 4E 05 F1 | 	add	fp, #104
16720     A7 1E 02 FB | 	rdlong	local01, fp
16724     AC 4E 05 F1 | 	add	fp, #172
16728     A7 22 02 FB | 	rdlong	local03, fp
1672c     11 1F 82 F1 | 	sub	local01, local03
16730     AC 4E 85 F1 | 	sub	fp, #172
16734     A7 1E 62 FC | 	wrlong	local01, fp
16738     68 4E 85 F1 | 	sub	fp, #104
1673c     00 1E 56 F2 | 	cmps	local01, #0 wc
16740     68 4E 05 C1 |  if_b	add	fp, #104
16744     A7 00 68 CC |  if_b	wrlong	#0, fp
16748     68 4E 85 C1 |  if_b	sub	fp, #104
1674c     08 4E 05 F1 | 	add	fp, #8
16750     A7 1E 02 FB | 	rdlong	local01, fp
16754     E8 1E 06 F4 | 	bitl	local01, #232
16758     A7 1E 62 FC | 	wrlong	local01, fp
1675c     60 4E 05 F1 | 	add	fp, #96
16760     A7 26 02 FB | 	rdlong	local05, fp
16764     13 23 02 F6 | 	mov	local03, local05
16768     08 22 66 F0 | 	shl	local03, #8
1676c     11 1F 42 F5 | 	or	local01, local03
16770     60 4E 85 F1 | 	sub	fp, #96
16774     A7 1E 62 FC | 	wrlong	local01, fp
16778     08 4E 85 F1 | 	sub	fp, #8
1677c                 | LR__2122
1677c     3C 4E 05 F1 | 	add	fp, #60
16780     A7 00 68 FC | 	wrlong	#0, fp
16784     3C 4E 85 F1 | 	sub	fp, #60
16788                 | LR__2123
16788     0C 4E 05 F1 | 	add	fp, #12
1678c     A7 12 02 FB | 	rdlong	arg01, fp
16790     0C 4E 85 F1 | 	sub	fp, #12
16794     D0 1D B0 FD | 	call	#__system____builtin_ilogb
16798     FF FF 3F FF 
1679c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
167a0     50 00 90 5D |  if_ne	jmp	#LR__2125
167a4     2C 4E 05 F1 | 	add	fp, #44
167a8     A7 1E 0A FB | 	rdlong	local01, fp wz
167ac     2C 4E 85 F1 | 	sub	fp, #44
167b0     24 00 90 AD |  if_e	jmp	#LR__2124
167b4     C0 4E 05 F1 | 	add	fp, #192
167b8     A7 20 02 FB | 	rdlong	local02, fp
167bc     10 23 02 F6 | 	mov	local03, local02
167c0     01 22 06 F1 | 	add	local03, #1
167c4     A7 22 62 FC | 	wrlong	local03, fp
167c8     94 4E 85 F1 | 	sub	fp, #148
167cc     A7 24 02 FB | 	rdlong	local04, fp
167d0     2C 4E 85 F1 | 	sub	fp, #44
167d4     10 25 42 FC | 	wrbyte	local04, local02
167d8                 | LR__2124
167d8     C0 4E 05 F1 | 	add	fp, #192
167dc     A7 12 02 FB | 	rdlong	arg01, fp
167e0     C0 4E 85 F1 | 	sub	fp, #192
167e4     22 01 00 FF 
167e8     22 14 06 F6 | 	mov	arg02, ##@LR__4031
167ec     18 EA BF FD | 	call	#__system____builtin_strcpy
167f0     A4 08 90 FD | 	jmp	#LR__2161
167f4                 | LR__2125
167f4     0C 4E 05 F1 | 	add	fp, #12
167f8     A7 20 02 FB | 	rdlong	local02, fp
167fc     0C 4E 85 F1 | 	sub	fp, #12
16800     10 13 02 F6 | 	mov	arg01, local02
16804     60 1D B0 FD | 	call	#__system____builtin_ilogb
16808     00 00 40 FF 
1680c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
16810     50 00 90 5D |  if_ne	jmp	#LR__2127
16814     2C 4E 05 F1 | 	add	fp, #44
16818     A7 1E 0A FB | 	rdlong	local01, fp wz
1681c     2C 4E 85 F1 | 	sub	fp, #44
16820     24 00 90 AD |  if_e	jmp	#LR__2126
16824     C0 4E 05 F1 | 	add	fp, #192
16828     A7 20 02 FB | 	rdlong	local02, fp
1682c     10 23 02 F6 | 	mov	local03, local02
16830     01 22 06 F1 | 	add	local03, #1
16834     A7 22 62 FC | 	wrlong	local03, fp
16838     94 4E 85 F1 | 	sub	fp, #148
1683c     A7 24 02 FB | 	rdlong	local04, fp
16840     2C 4E 85 F1 | 	sub	fp, #44
16844     10 25 42 FC | 	wrbyte	local04, local02
16848                 | LR__2126
16848     C0 4E 05 F1 | 	add	fp, #192
1684c     A7 12 02 FB | 	rdlong	arg01, fp
16850     C0 4E 85 F1 | 	sub	fp, #192
16854     22 01 00 FF 
16858     26 14 06 F6 | 	mov	arg02, ##@LR__4032
1685c     A8 E9 BF FD | 	call	#__system____builtin_strcpy
16860     34 08 90 FD | 	jmp	#LR__2161
16864                 | LR__2127
16864     10 4E 05 F1 | 	add	fp, #16
16868     A7 1E 02 FB | 	rdlong	local01, fp
1686c     10 4E 85 F1 | 	sub	fp, #16
16870     67 1E 0E F2 | 	cmp	local01, #103 wz
16874     10 4E 05 51 |  if_ne	add	fp, #16
16878     A7 22 02 5B |  if_ne	rdlong	local03, fp
1687c     10 4E 85 51 |  if_ne	sub	fp, #16
16880     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
16884     94 01 90 5D |  if_ne	jmp	#LR__2132
16888     0C 4E 05 F1 | 	add	fp, #12
1688c     A7 12 02 FB | 	rdlong	arg01, fp
16890     08 4E 05 F1 | 	add	fp, #8
16894     A7 14 02 F6 | 	mov	arg02, fp
16898     0C 4E 05 F1 | 	add	fp, #12
1689c     A7 16 02 F6 | 	mov	arg03, fp
168a0     98 4E 05 F1 | 	add	fp, #152
168a4     A7 18 02 FB | 	rdlong	arg04, fp
168a8     9C 4E 85 F1 | 	sub	fp, #156
168ac     A7 1A 02 FB | 	rdlong	arg05, fp
168b0     1C 4E 85 F1 | 	sub	fp, #28
168b4     A4 3C B0 FD | 	call	#__system__disassemble_0292
168b8     10 4E 05 F1 | 	add	fp, #16
168bc     A7 1E 02 FB | 	rdlong	local01, fp
168c0     10 4E 85 F1 | 	sub	fp, #16
168c4     23 1E 0E F2 | 	cmp	local01, #35 wz
168c8     A0 00 90 5D |  if_ne	jmp	#LR__2129
168cc     20 4E 05 F1 | 	add	fp, #32
168d0     A7 1E 02 FB | 	rdlong	local01, fp
168d4     98 4E 05 F1 | 	add	fp, #152
168d8     A7 22 02 FB | 	rdlong	local03, fp
168dc     B8 4E 85 F1 | 	sub	fp, #184
168e0     11 1F 5A F2 | 	cmps	local01, local03 wcz
168e4     24 4E 05 11 |  if_a	add	fp, #36
168e8     A7 02 68 1C |  if_a	wrlong	#1, fp
168ec     24 4E 85 11 |  if_a	sub	fp, #36
168f0     A4 01 90 1D |  if_a	jmp	#LR__2135
168f4     20 4E 05 F1 | 	add	fp, #32
168f8     A7 1E 02 FB | 	rdlong	local01, fp
168fc     20 4E 85 F1 | 	sub	fp, #32
16900     00 1E 56 F2 | 	cmps	local01, #0 wc
16904     2C 00 90 3D |  if_ae	jmp	#LR__2128
16908     B8 4E 05 F1 | 	add	fp, #184
1690c     A7 1E 02 FB | 	rdlong	local01, fp
16910     0F 1F 62 F6 | 	neg	local01, local01
16914     98 4E 85 F1 | 	sub	fp, #152
16918     A7 22 02 FB | 	rdlong	local03, fp
1691c     20 4E 85 F1 | 	sub	fp, #32
16920     0F 23 5A F2 | 	cmps	local03, local01 wcz
16924     24 4E 05 E1 |  if_be	add	fp, #36
16928     A7 02 68 EC |  if_be	wrlong	#1, fp
1692c     24 4E 85 E1 |  if_be	sub	fp, #36
16930     64 01 90 FD | 	jmp	#LR__2135
16934                 | LR__2128
16934     20 4E 05 F1 | 	add	fp, #32
16938     A7 1E 02 FB | 	rdlong	local01, fp
1693c     20 4E 85 F1 | 	sub	fp, #32
16940     01 1E 56 F2 | 	cmps	local01, #1 wc
16944     50 01 90 CD |  if_b	jmp	#LR__2135
16948     B8 4E 05 F1 | 	add	fp, #184
1694c     A7 1E 02 FB | 	rdlong	local01, fp
16950     98 4E 85 F1 | 	sub	fp, #152
16954     A7 22 02 FB | 	rdlong	local03, fp
16958     11 1F 82 F1 | 	sub	local01, local03
1695c     98 4E 05 F1 | 	add	fp, #152
16960     A7 1E 62 FC | 	wrlong	local01, fp
16964     B8 4E 85 F1 | 	sub	fp, #184
16968     2C 01 90 FD | 	jmp	#LR__2135
1696c                 | LR__2129
1696c     00 1E 06 F6 | 	mov	local01, #0
16970     08 4E 05 F1 | 	add	fp, #8
16974     A7 20 02 FB | 	rdlong	local02, fp
16978     1C 20 46 F0 | 	shr	local02, #28
1697c     01 20 0E F5 | 	and	local02, #1 wz
16980     01 1E 06 A6 |  if_e	mov	local01, #1
16984     2C 4E 05 F1 | 	add	fp, #44
16988     A7 1E 62 FC | 	wrlong	local01, fp
1698c     14 4E 85 F1 | 	sub	fp, #20
16990     A7 1E 02 FB | 	rdlong	local01, fp
16994     98 4E 05 F1 | 	add	fp, #152
16998     A7 22 02 FB | 	rdlong	local03, fp
1699c     B8 4E 85 F1 | 	sub	fp, #184
169a0     11 1F 52 F2 | 	cmps	local01, local03 wc
169a4     18 00 90 3D |  if_ae	jmp	#LR__2130
169a8     20 4E 05 F1 | 	add	fp, #32
169ac     A7 24 02 FB | 	rdlong	local04, fp
169b0     20 4E 85 F1 | 	sub	fp, #32
169b4     FF FF 7F FF 
169b8     FC 25 56 F2 | 	cmps	local04, ##-4 wc
169bc     10 00 90 3D |  if_ae	jmp	#LR__2131
169c0                 | LR__2130
169c0     24 4E 05 F1 | 	add	fp, #36
169c4     A7 02 68 FC | 	wrlong	#1, fp
169c8     24 4E 85 F1 | 	sub	fp, #36
169cc     C8 00 90 FD | 	jmp	#LR__2135
169d0                 | LR__2131
169d0     B8 4E 05 F1 | 	add	fp, #184
169d4     A7 24 02 FB | 	rdlong	local04, fp
169d8     98 4E 85 F1 | 	sub	fp, #152
169dc     A7 22 02 FB | 	rdlong	local03, fp
169e0     11 25 82 F1 | 	sub	local04, local03
169e4     98 4E 05 F1 | 	add	fp, #152
169e8     A7 24 62 FC | 	wrlong	local04, fp
169ec     AC 4E 85 F1 | 	sub	fp, #172
169f0     A7 12 02 FB | 	rdlong	arg01, fp
169f4     08 4E 05 F1 | 	add	fp, #8
169f8     A7 14 02 F6 | 	mov	arg02, fp
169fc     0C 4E 05 F1 | 	add	fp, #12
16a00     A7 16 02 F6 | 	mov	arg03, fp
16a04     12 19 62 F6 | 	neg	arg04, local04
16a08     04 4E 85 F1 | 	sub	fp, #4
16a0c     A7 1A 02 FB | 	rdlong	arg05, fp
16a10     1C 4E 85 F1 | 	sub	fp, #28
16a14     44 3B B0 FD | 	call	#__system__disassemble_0292
16a18     7C 00 90 FD | 	jmp	#LR__2135
16a1c                 | LR__2132
16a1c     24 4E 05 F1 | 	add	fp, #36
16a20     A7 1E 0A FB | 	rdlong	local01, fp wz
16a24     24 4E 85 F1 | 	sub	fp, #36
16a28     34 00 90 AD |  if_e	jmp	#LR__2133
16a2c     0C 4E 05 F1 | 	add	fp, #12
16a30     A7 12 02 FB | 	rdlong	arg01, fp
16a34     08 4E 05 F1 | 	add	fp, #8
16a38     A7 14 02 F6 | 	mov	arg02, fp
16a3c     0C 4E 05 F1 | 	add	fp, #12
16a40     A7 16 02 F6 | 	mov	arg03, fp
16a44     98 4E 05 F1 | 	add	fp, #152
16a48     A7 18 02 FB | 	rdlong	arg04, fp
16a4c     9C 4E 85 F1 | 	sub	fp, #156
16a50     A7 1A 02 FB | 	rdlong	arg05, fp
16a54     1C 4E 85 F1 | 	sub	fp, #28
16a58     00 3B B0 FD | 	call	#__system__disassemble_0292
16a5c     38 00 90 FD | 	jmp	#LR__2134
16a60                 | LR__2133
16a60     0C 4E 05 F1 | 	add	fp, #12
16a64     A7 12 02 FB | 	rdlong	arg01, fp
16a68     08 4E 05 F1 | 	add	fp, #8
16a6c     A7 14 02 F6 | 	mov	arg02, fp
16a70     0C 4E 05 F1 | 	add	fp, #12
16a74     A7 16 02 F6 | 	mov	arg03, fp
16a78     98 4E 05 F1 | 	add	fp, #152
16a7c     A7 24 02 FB | 	rdlong	local04, fp
16a80     01 24 06 F1 | 	add	local04, #1
16a84     12 19 62 F6 | 	neg	arg04, local04
16a88     9C 4E 85 F1 | 	sub	fp, #156
16a8c     A7 1A 02 FB | 	rdlong	arg05, fp
16a90     1C 4E 85 F1 | 	sub	fp, #28
16a94     C4 3A B0 FD | 	call	#__system__disassemble_0292
16a98                 | LR__2134
16a98                 | LR__2135
16a98     1C 4E 05 F1 | 	add	fp, #28
16a9c     A7 1E 02 FB | 	rdlong	local01, fp
16aa0     1C 4E 85 F1 | 	sub	fp, #28
16aa4     02 1E 0E F2 | 	cmp	local01, #2 wz
16aa8     4C 00 90 5D |  if_ne	jmp	#LR__2138
16aac     1C 4E 05 F1 | 	add	fp, #28
16ab0     A7 20 68 FC | 	wrlong	#16, fp
16ab4     1C 4E 85 F1 | 	sub	fp, #28
16ab8                 | LR__2136
16ab8     14 4E 05 F1 | 	add	fp, #20
16abc     A7 1E 0A FB | 	rdlong	local01, fp wz
16ac0     14 4E 85 F1 | 	sub	fp, #20
16ac4     30 00 90 AD |  if_e	jmp	#LR__2137
16ac8     14 4E 05 F1 | 	add	fp, #20
16acc     A7 22 02 FB | 	rdlong	local03, fp
16ad0     14 4E 85 F1 | 	sub	fp, #20
16ad4     00 80 00 FF 
16ad8     00 22 16 F2 | 	cmp	local03, ##16777216 wc
16adc     18 00 90 3D |  if_ae	jmp	#LR__2137
16ae0     14 4E 05 F1 | 	add	fp, #20
16ae4     A7 1E 02 FB | 	rdlong	local01, fp
16ae8     01 1E 66 F0 | 	shl	local01, #1
16aec     A7 1E 62 FC | 	wrlong	local01, fp
16af0     14 4E 85 F1 | 	sub	fp, #20
16af4     C0 FF 9F FD | 	jmp	#LR__2136
16af8                 | LR__2137
16af8                 | LR__2138
16af8     70 4E 05 F1 | 	add	fp, #112
16afc     A7 12 02 F6 | 	mov	arg01, fp
16b00     5C 4E 85 F1 | 	sub	fp, #92
16b04     A7 14 02 FB | 	rdlong	arg02, fp
16b08     08 4E 05 F1 | 	add	fp, #8
16b0c     A7 16 02 FB | 	rdlong	arg03, fp
16b10     A0 4E 05 F1 | 	add	fp, #160
16b14     A7 1A 02 FB | 	rdlong	arg05, fp
16b18     BC 4E 85 F1 | 	sub	fp, #188
16b1c     01 18 06 F6 | 	mov	arg04, #1
16b20     C4 39 B0 FD | 	call	#__system___uitoa
16b24     58 4E 05 F1 | 	add	fp, #88
16b28     A7 FA 61 FC | 	wrlong	result1, fp
16b2c     38 4E 85 F1 | 	sub	fp, #56
16b30     A7 1E 02 FB | 	rdlong	local01, fp
16b34     20 4E 85 F1 | 	sub	fp, #32
16b38     00 1E 56 F2 | 	cmps	local01, #0 wc
16b3c     50 00 90 3D |  if_ae	jmp	#LR__2139
16b40     60 4E 05 F1 | 	add	fp, #96
16b44     A7 5A 68 FC | 	wrlong	#45, fp
16b48     50 4E 05 F1 | 	add	fp, #80
16b4c     A7 12 02 F6 | 	mov	arg01, fp
16b50     90 4E 85 F1 | 	sub	fp, #144
16b54     A7 22 02 FB | 	rdlong	local03, fp
16b58     11 15 62 F6 | 	neg	arg02, local03
16b5c     18 4E 05 F1 | 	add	fp, #24
16b60     A7 18 02 FB | 	rdlong	arg04, fp
16b64     84 4E 05 F1 | 	add	fp, #132
16b68     A7 28 02 FB | 	rdlong	local06, fp
16b6c     BC 4E 85 F1 | 	sub	fp, #188
16b70     14 25 02 F6 | 	mov	local04, local06
16b74     0A 16 06 F6 | 	mov	arg03, #10
16b78     12 1B 02 F6 | 	mov	arg05, local04
16b7c     68 39 B0 FD | 	call	#__system___uitoa
16b80     5C 4E 05 F1 | 	add	fp, #92
16b84     A7 FA 61 FC | 	wrlong	result1, fp
16b88     5C 4E 85 F1 | 	sub	fp, #92
16b8c     48 00 90 FD | 	jmp	#LR__2140
16b90                 | LR__2139
16b90     60 4E 05 F1 | 	add	fp, #96
16b94     A7 56 68 FC | 	wrlong	#43, fp
16b98     50 4E 05 F1 | 	add	fp, #80
16b9c     A7 12 02 F6 | 	mov	arg01, fp
16ba0     90 4E 85 F1 | 	sub	fp, #144
16ba4     A7 14 02 FB | 	rdlong	arg02, fp
16ba8     18 4E 05 F1 | 	add	fp, #24
16bac     A7 18 02 FB | 	rdlong	arg04, fp
16bb0     84 4E 05 F1 | 	add	fp, #132
16bb4     A7 28 02 FB | 	rdlong	local06, fp
16bb8     BC 4E 85 F1 | 	sub	fp, #188
16bbc     14 25 02 F6 | 	mov	local04, local06
16bc0     0A 16 06 F6 | 	mov	arg03, #10
16bc4     12 1B 02 F6 | 	mov	arg05, local04
16bc8     1C 39 B0 FD | 	call	#__system___uitoa
16bcc     5C 4E 05 F1 | 	add	fp, #92
16bd0     A7 FA 61 FC | 	wrlong	result1, fp
16bd4     5C 4E 85 F1 | 	sub	fp, #92
16bd8                 | LR__2140
16bd8     24 4E 05 F1 | 	add	fp, #36
16bdc     A7 1E 0A FB | 	rdlong	local01, fp wz
16be0     24 4E 85 F1 | 	sub	fp, #36
16be4     2C 00 90 AD |  if_e	jmp	#LR__2141
16be8     50 4E 05 F1 | 	add	fp, #80
16bec     A7 00 68 FC | 	wrlong	#0, fp
16bf0     04 4E 85 F1 | 	sub	fp, #4
16bf4     A7 00 68 FC | 	wrlong	#0, fp
16bf8     6C 4E 05 F1 | 	add	fp, #108
16bfc     A7 1E 02 FB | 	rdlong	local01, fp
16c00     01 1E 06 F1 | 	add	local01, #1
16c04     64 4E 85 F1 | 	sub	fp, #100
16c08     A7 1E 62 FC | 	wrlong	local01, fp
16c0c     54 4E 85 F1 | 	sub	fp, #84
16c10     88 00 90 FD | 	jmp	#LR__2144
16c14                 | LR__2141
16c14     20 4E 05 F1 | 	add	fp, #32
16c18     A7 1E 02 FB | 	rdlong	local01, fp
16c1c     20 4E 85 F1 | 	sub	fp, #32
16c20     00 1E 56 F2 | 	cmps	local01, #0 wc
16c24     40 00 90 3D |  if_ae	jmp	#LR__2142
16c28     20 4E 05 F1 | 	add	fp, #32
16c2c     A7 20 02 FB | 	rdlong	local02, fp
16c30     30 4E 05 F1 | 	add	fp, #48
16c34     A7 20 62 FC | 	wrlong	local02, fp
16c38     04 4E 85 F1 | 	sub	fp, #4
16c3c     A7 20 62 FC | 	wrlong	local02, fp
16c40     2C 4E 85 F1 | 	sub	fp, #44
16c44     A7 1E 02 FB | 	rdlong	local01, fp
16c48     98 4E 05 F1 | 	add	fp, #152
16c4c     A7 22 02 FB | 	rdlong	local03, fp
16c50     11 1F 02 F1 | 	add	local01, local03
16c54     01 1E 06 F1 | 	add	local01, #1
16c58     64 4E 85 F1 | 	sub	fp, #100
16c5c     A7 1E 62 FC | 	wrlong	local01, fp
16c60     54 4E 85 F1 | 	sub	fp, #84
16c64     34 00 90 FD | 	jmp	#LR__2143
16c68                 | LR__2142
16c68     4C 4E 05 F1 | 	add	fp, #76
16c6c     A7 00 68 FC | 	wrlong	#0, fp
16c70     2C 4E 85 F1 | 	sub	fp, #44
16c74     A7 1E 02 FB | 	rdlong	local01, fp
16c78     30 4E 05 F1 | 	add	fp, #48
16c7c     A7 1E 62 FC | 	wrlong	local01, fp
16c80     68 4E 05 F1 | 	add	fp, #104
16c84     A7 22 02 FB | 	rdlong	local03, fp
16c88     11 1F 02 F1 | 	add	local01, local03
16c8c     01 1E 06 F1 | 	add	local01, #1
16c90     64 4E 85 F1 | 	sub	fp, #100
16c94     A7 1E 62 FC | 	wrlong	local01, fp
16c98     54 4E 85 F1 | 	sub	fp, #84
16c9c                 | LR__2143
16c9c                 | LR__2144
16c9c     54 4E 05 F1 | 	add	fp, #84
16ca0     A7 1E 02 FB | 	rdlong	local01, fp
16ca4     08 4E 85 F1 | 	sub	fp, #8
16ca8     A7 22 02 FB | 	rdlong	local03, fp
16cac     11 1F 82 F1 | 	sub	local01, local03
16cb0     01 1E 06 F1 | 	add	local01, #1
16cb4     24 4E 85 F1 | 	sub	fp, #36
16cb8     A7 1E 62 FC | 	wrlong	local01, fp
16cbc     04 4E 05 F1 | 	add	fp, #4
16cc0     A7 1E 0A FB | 	rdlong	local01, fp wz
16cc4     2C 4E 85 F1 | 	sub	fp, #44
16cc8     28 4E 05 51 |  if_ne	add	fp, #40
16ccc     A7 22 02 5B |  if_ne	rdlong	local03, fp
16cd0     01 22 06 51 |  if_ne	add	local03, #1
16cd4     A7 22 62 5C |  if_ne	wrlong	local03, fp
16cd8     28 4E 85 51 |  if_ne	sub	fp, #40
16cdc     1C 4E 05 F1 | 	add	fp, #28
16ce0     A7 1E 02 FB | 	rdlong	local01, fp
16ce4     1C 4E 85 F1 | 	sub	fp, #28
16ce8     10 1E 0E F2 | 	cmp	local01, #16 wz
16cec     28 4E 05 A1 |  if_e	add	fp, #40
16cf0     A7 1E 02 AB |  if_e	rdlong	local01, fp
16cf4     02 1E 06 A1 |  if_e	add	local01, #2
16cf8     A7 1E 62 AC |  if_e	wrlong	local01, fp
16cfc     28 4E 85 A1 |  if_e	sub	fp, #40
16d00     24 4E 05 F1 | 	add	fp, #36
16d04     A7 1E 0A FB | 	rdlong	local01, fp wz
16d08     24 4E 85 F1 | 	sub	fp, #36
16d0c     28 00 90 AD |  if_e	jmp	#LR__2145
16d10     28 4E 05 F1 | 	add	fp, #40
16d14     A7 1E 02 FB | 	rdlong	local01, fp
16d18     02 22 06 F6 | 	mov	local03, #2
16d1c     34 4E 05 F1 | 	add	fp, #52
16d20     A7 26 02 FB | 	rdlong	local05, fp
16d24     13 23 02 F1 | 	add	local03, local05
16d28     11 1F 02 F1 | 	add	local01, local03
16d2c     34 4E 85 F1 | 	sub	fp, #52
16d30     A7 1E 62 FC | 	wrlong	local01, fp
16d34     28 4E 85 F1 | 	sub	fp, #40
16d38                 | LR__2145
16d38     28 4E 05 F1 | 	add	fp, #40
16d3c     A7 1E 02 FB | 	rdlong	local01, fp
16d40     28 4E 85 F1 | 	sub	fp, #40
16d44     41 1E 56 F2 | 	cmps	local01, #65 wc
16d48     01 FA 65 36 |  if_ae	neg	result1, #1
16d4c     08 05 90 3D |  if_ae	jmp	#LR__2173
16d50     3C 4E 05 F1 | 	add	fp, #60
16d54     A7 1E 0A FB | 	rdlong	local01, fp wz
16d58     3C 4E 85 F1 | 	sub	fp, #60
16d5c     60 00 90 AD |  if_e	jmp	#LR__2146
16d60     C0 4E 05 F1 | 	add	fp, #192
16d64     A7 12 02 FB | 	rdlong	arg01, fp
16d68     94 4E 85 F1 | 	sub	fp, #148
16d6c     A7 14 02 FB | 	rdlong	arg02, fp
16d70     14 4E 05 F1 | 	add	fp, #20
16d74     A7 16 02 FB | 	rdlong	arg03, fp
16d78     40 4E 85 F1 | 	sub	fp, #64
16d7c     D0 39 B0 FD | 	call	#__system__emitsign_0294
16d80     18 4F 05 F1 | 	add	fp, #280
16d84     A7 FA 61 FC | 	wrlong	result1, fp
16d88     18 4F 85 F1 | 	sub	fp, #280
16d8c     00 FA 55 F2 | 	cmps	result1, #0 wc
16d90     18 4F 05 C1 |  if_b	add	fp, #280
16d94     A7 FA 01 CB |  if_b	rdlong	result1, fp
16d98     18 4F 85 C1 |  if_b	sub	fp, #280
16d9c     B8 04 90 CD |  if_b	jmp	#LR__2173
16da0     C0 4E 05 F1 | 	add	fp, #192
16da4     A7 1E 02 FB | 	rdlong	local01, fp
16da8     58 4E 05 F1 | 	add	fp, #88
16dac     A7 22 02 FB | 	rdlong	local03, fp
16db0     11 1F 02 F1 | 	add	local01, local03
16db4     58 4E 85 F1 | 	sub	fp, #88
16db8     A7 1E 62 FC | 	wrlong	local01, fp
16dbc     C0 4E 85 F1 | 	sub	fp, #192
16dc0                 | LR__2146
16dc0     4C 4E 05 F1 | 	add	fp, #76
16dc4     A7 1E 02 FB | 	rdlong	local01, fp
16dc8     34 4E 85 F1 | 	sub	fp, #52
16dcc     A7 1E 62 FC | 	wrlong	local01, fp
16dd0     18 4E 85 F1 | 	sub	fp, #24
16dd4     97 9E 48 FB | 	callpa	#(@LR__2152-@LR__2147)>>2,fcache_load_ptr_
16dd8                 | LR__2147
16dd8     18 4E 05 F1 | 	add	fp, #24
16ddc     A7 20 02 FB | 	rdlong	local02, fp
16de0     3C 4E 05 F1 | 	add	fp, #60
16de4     A7 26 02 FB | 	rdlong	local05, fp
16de8     54 4E 85 F1 | 	sub	fp, #84
16dec     13 21 52 F2 | 	cmps	local02, local05 wc
16df0     20 01 90 3D |  if_ae	jmp	#LR__2153
16df4     18 4E 05 F1 | 	add	fp, #24
16df8     A7 28 02 FB | 	rdlong	local06, fp
16dfc     18 4E 85 F1 | 	sub	fp, #24
16e00     00 28 56 F2 | 	cmps	local06, #0 wc
16e04     58 00 90 CD |  if_b	jmp	#LR__2148
16e08     18 4E 05 F1 | 	add	fp, #24
16e0c     A7 28 02 FB | 	rdlong	local06, fp
16e10     40 4E 05 F1 | 	add	fp, #64
16e14     A7 2A 02 FB | 	rdlong	local07, fp
16e18     58 4E 85 F1 | 	sub	fp, #88
16e1c     15 29 52 F2 | 	cmps	local06, local07 wc
16e20     3C 00 90 3D |  if_ae	jmp	#LR__2148
16e24     C0 4E 05 F1 | 	add	fp, #192
16e28     A7 2C 02 FB | 	rdlong	local08, fp
16e2c     16 2B 02 F6 | 	mov	local07, local08
16e30     01 2A 06 F1 | 	add	local07, #1
16e34     A7 2A 62 FC | 	wrlong	local07, fp
16e38     A8 4E 85 F1 | 	sub	fp, #168
16e3c     A7 2A 02 FB | 	rdlong	local07, fp
16e40     15 2F 02 F6 | 	mov	local09, local07
16e44     58 4E 05 F1 | 	add	fp, #88
16e48     A7 30 02 F6 | 	mov	local10, fp
16e4c     A7 2E 02 F1 | 	add	local09, fp
16e50     17 33 C2 FA | 	rdbyte	local11, local09
16e54     16 33 42 FC | 	wrbyte	local11, local08
16e58     70 4E 85 F1 | 	sub	fp, #112
16e5c     20 00 90 FD | 	jmp	#LR__2149
16e60                 | LR__2148
16e60     C0 4E 05 F1 | 	add	fp, #192
16e64     A7 2C 02 FB | 	rdlong	local08, fp
16e68     16 2F 02 F6 | 	mov	local09, local08
16e6c     01 2E 06 F1 | 	add	local09, #1
16e70     A7 2E 62 FC | 	wrlong	local09, fp
16e74     C0 4E 85 F1 | 	sub	fp, #192
16e78     30 2E 06 F6 | 	mov	local09, #48
16e7c     16 61 48 FC | 	wrbyte	#48, local08
16e80                 | LR__2149
16e80     18 4E 05 F1 | 	add	fp, #24
16e84     A7 28 02 FB | 	rdlong	local06, fp
16e88     38 4E 05 F1 | 	add	fp, #56
16e8c     A7 34 02 FB | 	rdlong	local12, fp
16e90     50 4E 85 F1 | 	sub	fp, #80
16e94     1A 29 0A F2 | 	cmp	local06, local12 wz
16e98     5C 00 90 5D |  if_ne	jmp	#LR__2151
16e9c     10 4F 05 F1 | 	add	fp, #272
16ea0     A7 2A 02 FB | 	rdlong	local07, fp
16ea4     10 4F 85 F1 | 	sub	fp, #272
16ea8     15 2F 0A F6 | 	mov	local09, local07 wz
16eac     28 00 90 5D |  if_ne	jmp	#LR__2150
16eb0     54 4E 05 F1 | 	add	fp, #84
16eb4     A7 32 02 FB | 	rdlong	local11, fp
16eb8     19 31 02 F6 | 	mov	local10, local11
16ebc     01 30 86 F1 | 	sub	local10, #1
16ec0     3C 4E 85 F1 | 	sub	fp, #60
16ec4     A7 36 02 FB | 	rdlong	local13, fp
16ec8     18 4E 85 F1 | 	sub	fp, #24
16ecc     1B 39 02 F6 | 	mov	local14, local13
16ed0     18 39 52 F2 | 	cmps	local14, local10 wc
16ed4     20 00 90 3D |  if_ae	jmp	#LR__2151
16ed8                 | LR__2150
16ed8     C0 4E 05 F1 | 	add	fp, #192
16edc     A7 2C 02 FB | 	rdlong	local08, fp
16ee0     16 35 02 F6 | 	mov	local12, local08
16ee4     01 34 06 F1 | 	add	local12, #1
16ee8     A7 34 62 FC | 	wrlong	local12, fp
16eec     C0 4E 85 F1 | 	sub	fp, #192
16ef0     2E 2E 06 F6 | 	mov	local09, #46
16ef4     16 5D 48 FC | 	wrbyte	#46, local08
16ef8                 | LR__2151
16ef8     18 4E 05 F1 | 	add	fp, #24
16efc     A7 3A 02 FB | 	rdlong	local15, fp
16f00     1D 35 02 F6 | 	mov	local12, local15
16f04     01 34 06 F1 | 	add	local12, #1
16f08     A7 34 62 FC | 	wrlong	local12, fp
16f0c     18 4E 85 F1 | 	sub	fp, #24
16f10     C4 FE 9F FD | 	jmp	#LR__2147
16f14                 | LR__2152
16f14                 | LR__2153
16f14     34 4E 05 F1 | 	add	fp, #52
16f18     A7 1E 0A FB | 	rdlong	local01, fp wz
16f1c     34 4E 85 F1 | 	sub	fp, #52
16f20     A0 00 90 AD |  if_e	jmp	#LR__2157
16f24     C0 4E 05 F1 | 	add	fp, #192
16f28     A7 1E 02 FB | 	rdlong	local01, fp
16f2c     01 1E 86 F1 | 	sub	local01, #1
16f30     A7 1E 62 FC | 	wrlong	local01, fp
16f34     C0 4E 85 F1 | 	sub	fp, #192
16f38     97 26 48 FB | 	callpa	#(@LR__2155-@LR__2154)>>2,fcache_load_ptr_
16f3c                 | LR__2154
16f3c     C0 4E 05 F1 | 	add	fp, #192
16f40     A7 1E 02 FB | 	rdlong	local01, fp
16f44     04 4E 05 F1 | 	add	fp, #4
16f48     A7 22 02 FB | 	rdlong	local03, fp
16f4c     C4 4E 85 F1 | 	sub	fp, #196
16f50     11 1F 5A F2 | 	cmps	local01, local03 wcz
16f54     30 00 90 ED |  if_be	jmp	#LR__2156
16f58     C0 4E 05 F1 | 	add	fp, #192
16f5c     A7 28 02 FB | 	rdlong	local06, fp
16f60     C0 4E 85 F1 | 	sub	fp, #192
16f64     14 25 C2 FA | 	rdbyte	local04, local06
16f68     30 24 0E F2 | 	cmp	local04, #48 wz
16f6c     18 00 90 5D |  if_ne	jmp	#LR__2156
16f70     C0 4E 05 F1 | 	add	fp, #192
16f74     A7 1E 02 FB | 	rdlong	local01, fp
16f78     01 1E 86 F1 | 	sub	local01, #1
16f7c     A7 1E 62 FC | 	wrlong	local01, fp
16f80     C0 4E 85 F1 | 	sub	fp, #192
16f84     B4 FF 9F FD | 	jmp	#LR__2154
16f88                 | LR__2155
16f88                 | LR__2156
16f88     C0 4E 05 F1 | 	add	fp, #192
16f8c     A7 20 02 FB | 	rdlong	local02, fp
16f90     C0 4E 85 F1 | 	sub	fp, #192
16f94     10 1F C2 FA | 	rdbyte	local01, local02
16f98     2E 1E 0E F2 | 	cmp	local01, #46 wz
16f9c     C0 4E 05 A1 |  if_e	add	fp, #192
16fa0     A7 1E 02 AB |  if_e	rdlong	local01, fp
16fa4     01 1E 86 A1 |  if_e	sub	local01, #1
16fa8     A7 1E 62 AC |  if_e	wrlong	local01, fp
16fac     C0 4E 85 A1 |  if_e	sub	fp, #192
16fb0     C0 4E 05 F1 | 	add	fp, #192
16fb4     A7 22 02 FB | 	rdlong	local03, fp
16fb8     01 22 06 F1 | 	add	local03, #1
16fbc     A7 22 62 FC | 	wrlong	local03, fp
16fc0     C0 4E 85 F1 | 	sub	fp, #192
16fc4                 | LR__2157
16fc4     24 4E 05 F1 | 	add	fp, #36
16fc8     A7 1E 0A FB | 	rdlong	local01, fp wz
16fcc     24 4E 85 F1 | 	sub	fp, #36
16fd0     B4 00 90 AD |  if_e	jmp	#LR__2160
16fd4     C0 4E 05 F1 | 	add	fp, #192
16fd8     A7 20 02 FB | 	rdlong	local02, fp
16fdc     10 23 02 F6 | 	mov	local03, local02
16fe0     01 22 06 F1 | 	add	local03, #1
16fe4     A7 22 62 FC | 	wrlong	local03, fp
16fe8     90 4E 85 F1 | 	sub	fp, #144
16fec     A7 24 02 FB | 	rdlong	local04, fp
16ff0     10 25 42 FC | 	wrbyte	local04, local02
16ff4     90 4E 05 F1 | 	add	fp, #144
16ff8     A7 20 02 FB | 	rdlong	local02, fp
16ffc     10 23 02 F6 | 	mov	local03, local02
17000     01 22 06 F1 | 	add	local03, #1
17004     A7 22 62 FC | 	wrlong	local03, fp
17008     60 4E 85 F1 | 	sub	fp, #96
1700c     A7 24 02 FB | 	rdlong	local04, fp
17010     10 25 42 FC | 	wrbyte	local04, local02
17014     48 4E 85 F1 | 	sub	fp, #72
17018     A7 00 68 FC | 	wrlong	#0, fp
1701c     18 4E 85 F1 | 	sub	fp, #24
17020                 | LR__2158
17020     18 4E 05 F1 | 	add	fp, #24
17024     A7 20 02 FB | 	rdlong	local02, fp
17028     44 4E 05 F1 | 	add	fp, #68
1702c     A7 26 02 FB | 	rdlong	local05, fp
17030     5C 4E 85 F1 | 	sub	fp, #92
17034     13 21 52 F2 | 	cmps	local02, local05 wc
17038     4C 00 90 3D |  if_ae	jmp	#LR__2159
1703c     C0 4E 05 F1 | 	add	fp, #192
17040     A7 2C 02 FB | 	rdlong	local08, fp
17044     16 35 02 F6 | 	mov	local12, local08
17048     01 34 06 F1 | 	add	local12, #1
1704c     A7 34 62 FC | 	wrlong	local12, fp
17050     A8 4E 85 F1 | 	sub	fp, #168
17054     A7 2A 02 FB | 	rdlong	local07, fp
17058     15 2F 02 F6 | 	mov	local09, local07
1705c     98 4E 05 F1 | 	add	fp, #152
17060     A7 30 02 F6 | 	mov	local10, fp
17064     A7 2E 02 F1 | 	add	local09, fp
17068     17 33 C2 FA | 	rdbyte	local11, local09
1706c     16 33 42 FC | 	wrbyte	local11, local08
17070     98 4E 85 F1 | 	sub	fp, #152
17074     A7 34 02 FB | 	rdlong	local12, fp
17078     01 34 06 F1 | 	add	local12, #1
1707c     A7 34 62 FC | 	wrlong	local12, fp
17080     18 4E 85 F1 | 	sub	fp, #24
17084     98 FF 9F FD | 	jmp	#LR__2158
17088                 | LR__2159
17088                 | LR__2160
17088     C0 4E 05 F1 | 	add	fp, #192
1708c     A7 1E 02 FB | 	rdlong	local01, fp
17090     C0 4E 85 F1 | 	sub	fp, #192
17094     0F 01 48 FC | 	wrbyte	#0, local01
17098                 | LR__2161
17098     6C 4E 05 F1 | 	add	fp, #108
1709c     A7 1E 0A FB | 	rdlong	local01, fp wz
170a0     6C 4E 85 F1 | 	sub	fp, #108
170a4     90 01 90 AD |  if_e	jmp	#LR__2172
170a8     48 4E 05 F1 | 	add	fp, #72
170ac     A7 22 0A FB | 	rdlong	local03, fp wz
170b0     48 4E 85 F1 | 	sub	fp, #72
170b4     80 01 90 AD |  if_e	jmp	#LR__2172
170b8     C4 4E 05 F1 | 	add	fp, #196
170bc     A7 12 02 FB | 	rdlong	arg01, fp
170c0     C4 4E 85 F1 | 	sub	fp, #196
170c4     09 3D 02 F6 | 	mov	local16, arg01
170c8     97 06 48 FB | 	callpa	#(@LR__2163-@LR__2162)>>2,fcache_load_ptr_
170cc                 | LR__2162
170cc     1E FB C9 FA | 	rdbyte	result1, local16 wz
170d0     01 3C 06 51 |  if_ne	add	local16, #1
170d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2162
170d8                 | LR__2163
170d8     09 3D 82 F1 | 	sub	local16, arg01
170dc     1E 25 02 F6 | 	mov	local04, local16
170e0     6C 4E 05 F1 | 	add	fp, #108
170e4     A7 28 02 FB | 	rdlong	local06, fp
170e8     6C 4E 85 F1 | 	sub	fp, #108
170ec     14 25 5A F2 | 	cmps	local04, local06 wcz
170f0     44 01 90 ED |  if_be	jmp	#LR__2172
170f4     C4 4E 05 F1 | 	add	fp, #196
170f8     A7 1E 02 FB | 	rdlong	local01, fp
170fc     5C 4E 05 F1 | 	add	fp, #92
17100     A7 1E 62 FC | 	wrlong	local01, fp
17104     FC 4E 85 F1 | 	sub	fp, #252
17108     A7 1E 0A FB | 	rdlong	local01, fp wz
1710c     24 4E 85 F1 | 	sub	fp, #36
17110     20 00 90 AD |  if_e	jmp	#LR__2164
17114     B8 4E 05 F1 | 	add	fp, #184
17118     A7 00 68 FC | 	wrlong	#0, fp
1711c     4C 4E 85 F1 | 	sub	fp, #76
17120     A7 1E 02 FB | 	rdlong	local01, fp
17124     B0 4E 05 F1 | 	add	fp, #176
17128     A7 1E 62 FC | 	wrlong	local01, fp
1712c     1C 4F 85 F1 | 	sub	fp, #284
17130     24 00 90 FD | 	jmp	#LR__2165
17134                 | LR__2164
17134     6C 4E 05 F1 | 	add	fp, #108
17138     A7 1E 02 FB | 	rdlong	local01, fp
1713c     01 1E 86 F1 | 	sub	local01, #1
17140     4C 4E 05 F1 | 	add	fp, #76
17144     A7 22 02 FB | 	rdlong	local03, fp
17148     11 1F 82 F1 | 	sub	local01, local03
1714c     64 4E 05 F1 | 	add	fp, #100
17150     A7 1E 62 FC | 	wrlong	local01, fp
17154     1C 4F 85 F1 | 	sub	fp, #284
17158                 | LR__2165
17158     97 20 48 FB | 	callpa	#(@LR__2167-@LR__2166)>>2,fcache_load_ptr_
1715c                 | LR__2166
1715c     1C 4F 05 F1 | 	add	fp, #284
17160     A7 1E 0A FB | 	rdlong	local01, fp wz
17164     1C 4F 85 F1 | 	sub	fp, #284
17168     30 00 90 AD |  if_e	jmp	#LR__2168
1716c     20 4F 05 F1 | 	add	fp, #288
17170     A7 20 02 FB | 	rdlong	local02, fp
17174     10 23 02 F6 | 	mov	local03, local02
17178     01 22 06 F1 | 	add	local03, #1
1717c     A7 22 62 FC | 	wrlong	local03, fp
17180     10 55 48 FC | 	wrbyte	#42, local02
17184     04 4E 85 F1 | 	sub	fp, #4
17188     A7 1E 02 FB | 	rdlong	local01, fp
1718c     01 1E 86 F1 | 	sub	local01, #1
17190     A7 1E 62 FC | 	wrlong	local01, fp
17194     1C 4F 85 F1 | 	sub	fp, #284
17198     C0 FF 9F FD | 	jmp	#LR__2166
1719c                 | LR__2167
1719c                 | LR__2168
1719c     B8 4E 05 F1 | 	add	fp, #184
171a0     A7 1E 0A FB | 	rdlong	local01, fp wz
171a4     B8 4E 85 F1 | 	sub	fp, #184
171a8     70 00 90 AD |  if_e	jmp	#LR__2171
171ac     20 4F 05 F1 | 	add	fp, #288
171b0     A7 20 02 FB | 	rdlong	local02, fp
171b4     10 23 02 F6 | 	mov	local03, local02
171b8     01 22 06 F1 | 	add	local03, #1
171bc     A7 22 62 FC | 	wrlong	local03, fp
171c0     10 5D 48 FC | 	wrbyte	#46, local02
171c4     04 4E 85 F1 | 	sub	fp, #4
171c8     A7 00 68 FC | 	wrlong	#0, fp
171cc     1C 4F 85 F1 | 	sub	fp, #284
171d0                 | LR__2169
171d0     1C 4F 05 F1 | 	add	fp, #284
171d4     A7 20 02 FB | 	rdlong	local02, fp
171d8     64 4E 85 F1 | 	sub	fp, #100
171dc     A7 26 02 FB | 	rdlong	local05, fp
171e0     B8 4E 85 F1 | 	sub	fp, #184
171e4     13 21 52 F2 | 	cmps	local02, local05 wc
171e8     30 00 90 3D |  if_ae	jmp	#LR__2170
171ec     20 4F 05 F1 | 	add	fp, #288
171f0     A7 2C 02 FB | 	rdlong	local08, fp
171f4     16 35 02 F6 | 	mov	local12, local08
171f8     01 34 06 F1 | 	add	local12, #1
171fc     A7 34 62 FC | 	wrlong	local12, fp
17200     16 55 48 FC | 	wrbyte	#42, local08
17204     04 4E 85 F1 | 	sub	fp, #4
17208     A7 34 02 FB | 	rdlong	local12, fp
1720c     01 34 06 F1 | 	add	local12, #1
17210     A7 34 62 FC | 	wrlong	local12, fp
17214     1C 4F 85 F1 | 	sub	fp, #284
17218     B4 FF 9F FD | 	jmp	#LR__2169
1721c                 | LR__2170
1721c                 | LR__2171
1721c     20 4F 05 F1 | 	add	fp, #288
17220     A7 20 02 FB | 	rdlong	local02, fp
17224     10 23 02 F6 | 	mov	local03, local02
17228     01 22 06 F1 | 	add	local03, #1
1722c     A7 22 62 FC | 	wrlong	local03, fp
17230     20 4F 85 F1 | 	sub	fp, #288
17234     10 01 48 FC | 	wrbyte	#0, local02
17238                 | LR__2172
17238     04 4E 05 F1 | 	add	fp, #4
1723c     A7 12 02 FB | 	rdlong	arg01, fp
17240     04 4E 05 F1 | 	add	fp, #4
17244     A7 14 02 FB | 	rdlong	arg02, fp
17248     BC 4E 05 F1 | 	add	fp, #188
1724c     A7 16 02 FB | 	rdlong	arg03, fp
17250     C4 4E 85 F1 | 	sub	fp, #196
17254     C4 EE BF FD | 	call	#__system___fmtstr
17258                 | LR__2173
17258     A7 F0 03 F6 | 	mov	ptra, fp
1725c     B2 00 A0 FD | 	call	#popregs_
17260                 | __system___fmtfloat_ret
17260     2D 00 64 FD | 	ret
17264                 | 
17264                 | __system__Left_S
17264     04 4A 05 F6 | 	mov	COUNT_, #4
17268     A8 00 A0 FD | 	call	#pushregs_
1726c     09 1F 02 F6 | 	mov	local01, arg01
17270     0A 21 02 F6 | 	mov	local02, arg02
17274     01 20 56 F2 | 	cmps	local02, #1 wc
17278     22 01 00 CF 
1727c     2A FA 05 C6 |  if_b	mov	result1, ##@LR__4033
17280     5C 00 90 CD |  if_b	jmp	#LR__2183
17284     0F 13 02 F6 | 	mov	arg01, local01
17288     09 23 02 F6 | 	mov	local03, arg01
1728c     97 06 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
17290                 | LR__2180
17290     11 FB C9 FA | 	rdbyte	result1, local03 wz
17294     01 22 06 51 |  if_ne	add	local03, #1
17298     F4 FF 9F 5D |  if_ne	jmp	#LR__2180
1729c                 | LR__2181
1729c     09 23 82 F1 | 	sub	local03, arg01
172a0     11 FB 01 F6 | 	mov	result1, local03
172a4     10 FB 59 F2 | 	cmps	result1, local02 wcz
172a8     0F FB 01 E6 |  if_be	mov	result1, local01
172ac     30 00 90 ED |  if_be	jmp	#LR__2183
172b0     10 13 02 F6 | 	mov	arg01, local02
172b4     02 12 06 F1 | 	add	arg01, #2
172b8     00 1A B0 FD | 	call	#__system___gc_alloc_managed
172bc     FD 24 0A F6 | 	mov	local04, result1 wz
172c0     18 00 90 AD |  if_e	jmp	#LR__2182
172c4     12 13 02 F6 | 	mov	arg01, local04
172c8     0F 15 02 F6 | 	mov	arg02, local01
172cc     10 17 02 F6 | 	mov	arg03, local02
172d0     A0 DE BF FD | 	call	#__system____builtin_memmove
172d4     12 21 02 F1 | 	add	local02, local04
172d8     10 01 48 FC | 	wrbyte	#0, local02
172dc                 | LR__2182
172dc     12 FB 01 F6 | 	mov	result1, local04
172e0                 | LR__2183
172e0     A7 F0 03 F6 | 	mov	ptra, fp
172e4     B2 00 A0 FD | 	call	#popregs_
172e8                 | __system__Left_S_ret
172e8     2D 00 64 FD | 	ret
172ec                 | 
172ec                 | __system__Right_S
172ec     05 4A 05 F6 | 	mov	COUNT_, #5
172f0     A8 00 A0 FD | 	call	#pushregs_
172f4     09 1F 02 F6 | 	mov	local01, arg01
172f8     0A 21 02 F6 | 	mov	local02, arg02
172fc     01 20 56 F2 | 	cmps	local02, #1 wc
17300     22 01 00 CF 
17304     2B FA 05 C6 |  if_b	mov	result1, ##@LR__4034
17308     64 00 90 CD |  if_b	jmp	#LR__2193
1730c     0F 13 02 F6 | 	mov	arg01, local01
17310     09 23 02 F6 | 	mov	local03, arg01
17314     97 06 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
17318                 | LR__2190
17318     11 FB C9 FA | 	rdbyte	result1, local03 wz
1731c     01 22 06 51 |  if_ne	add	local03, #1
17320     F4 FF 9F 5D |  if_ne	jmp	#LR__2190
17324                 | LR__2191
17324     09 23 82 F1 | 	sub	local03, arg01
17328     11 FB 01 F6 | 	mov	result1, local03
1732c     FD 24 02 F6 | 	mov	local04, result1
17330     10 25 5A F2 | 	cmps	local04, local02 wcz
17334     0F FB 01 E6 |  if_be	mov	result1, local01
17338     34 00 90 ED |  if_be	jmp	#LR__2193
1733c     10 13 02 F6 | 	mov	arg01, local02
17340     02 12 06 F1 | 	add	arg01, #2
17344     74 19 B0 FD | 	call	#__system___gc_alloc_managed
17348     FD 26 0A F6 | 	mov	local05, result1 wz
1734c     1C 00 90 AD |  if_e	jmp	#LR__2192
17350     10 25 82 F1 | 	sub	local04, local02
17354     0F 25 02 F1 | 	add	local04, local01
17358     01 20 06 F1 | 	add	local02, #1
1735c     13 13 02 F6 | 	mov	arg01, local05
17360     12 15 02 F6 | 	mov	arg02, local04
17364     10 17 02 F6 | 	mov	arg03, local02
17368     08 DE BF FD | 	call	#__system____builtin_memmove
1736c                 | LR__2192
1736c     13 FB 01 F6 | 	mov	result1, local05
17370                 | LR__2193
17370     A7 F0 03 F6 | 	mov	ptra, fp
17374     B2 00 A0 FD | 	call	#popregs_
17378                 | __system__Right_S_ret
17378     2D 00 64 FD | 	ret
1737c                 | 
1737c                 | __system__Mid_S
1737c     05 4A 05 F6 | 	mov	COUNT_, #5
17380     A8 00 A0 FD | 	call	#pushregs_
17384     09 1F 02 F6 | 	mov	local01, arg01
17388     0A 21 02 F6 | 	mov	local02, arg02
1738c     01 16 56 F2 | 	cmps	arg03, #1 wc
17390     22 01 00 CF 
17394     2C FA 05 C6 |  if_b	mov	result1, ##@LR__4035
17398     80 00 90 CD |  if_b	jmp	#LR__2203
1739c     01 20 86 F1 | 	sub	local02, #1
173a0     00 20 56 F3 | 	fges	local02, #0 wc
173a4     0F 13 02 F6 | 	mov	arg01, local01
173a8     09 23 02 F6 | 	mov	local03, arg01
173ac     97 06 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
173b0                 | LR__2200
173b0     11 FB C9 FA | 	rdbyte	result1, local03 wz
173b4     01 22 06 51 |  if_ne	add	local03, #1
173b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2200
173bc                 | LR__2201
173bc     09 23 82 F1 | 	sub	local03, arg01
173c0     11 FB 01 F6 | 	mov	result1, local03
173c4     FD 14 02 F6 | 	mov	arg02, result1
173c8     10 15 52 F2 | 	cmps	arg02, local02 wc
173cc     22 01 00 CF 
173d0     2D FA 05 C6 |  if_b	mov	result1, ##@LR__4036
173d4     44 00 90 CD |  if_b	jmp	#LR__2203
173d8     0A 25 02 F6 | 	mov	local04, arg02
173dc     10 25 82 F1 | 	sub	local04, local02
173e0     0B 25 5A F2 | 	cmps	local04, arg03 wcz
173e4     0B 25 02 16 |  if_a	mov	local04, arg03
173e8     12 13 02 F6 | 	mov	arg01, local04
173ec     02 12 06 F1 | 	add	arg01, #2
173f0     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
173f4     FD 26 0A F6 | 	mov	local05, result1 wz
173f8     1C 00 90 AD |  if_e	jmp	#LR__2202
173fc     0F 21 02 F1 | 	add	local02, local01
17400     13 13 02 F6 | 	mov	arg01, local05
17404     10 15 02 F6 | 	mov	arg02, local02
17408     12 17 02 F6 | 	mov	arg03, local04
1740c     64 DD BF FD | 	call	#__system____builtin_memmove
17410     13 25 02 F1 | 	add	local04, local05
17414     12 01 48 FC | 	wrbyte	#0, local04
17418                 | LR__2202
17418     13 FB 01 F6 | 	mov	result1, local05
1741c                 | LR__2203
1741c     A7 F0 03 F6 | 	mov	ptra, fp
17420     B2 00 A0 FD | 	call	#popregs_
17424                 | __system__Mid_S_ret
17424     2D 00 64 FD | 	ret
17428                 | 
17428                 | __system__Chr_S
17428     01 4A 05 F6 | 	mov	COUNT_, #1
1742c     A8 00 A0 FD | 	call	#pushregs_
17430     09 1F 02 F6 | 	mov	local01, arg01
17434     03 12 06 F6 | 	mov	arg01, #3
17438     80 18 B0 FD | 	call	#__system___gc_alloc_managed
1743c     00 FA 4D F2 | 	cmps	result1, #0 wz
17440     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
17444     01 FA 05 51 |  if_ne	add	result1, #1
17448     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1744c     01 FA 85 51 |  if_ne	sub	result1, #1
17450     A7 F0 03 F6 | 	mov	ptra, fp
17454     B2 00 A0 FD | 	call	#popregs_
17458                 | __system__Chr_S_ret
17458     2D 00 64 FD | 	ret
1745c                 | 
1745c                 | __system__Number_S
1745c     08 4A 05 F6 | 	mov	COUNT_, #8
17460     A8 00 A0 FD | 	call	#pushregs_
17464     09 1F 02 F6 | 	mov	local01, arg01
17468     0A 21 0A F6 | 	mov	local02, arg02 wz
1746c     0B 23 02 F6 | 	mov	local03, arg03
17470     3C 00 90 5D |  if_ne	jmp	#LR__2212
17474     01 20 06 F6 | 	mov	local02, #1
17478     11 25 02 F6 | 	mov	local04, local03
1747c     01 26 06 F6 | 	mov	local05, #1
17480     97 16 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
17484                 | LR__2210
17484     00 28 06 F6 | 	mov	local06, #0
17488     0F 25 1A F2 | 	cmp	local04, local01 wcz
1748c     01 28 66 E6 |  if_be	neg	local06, #1
17490     12 27 12 F2 | 	cmp	local05, local04 wc
17494     15 2B A2 F1 | 	subx	local07, local07
17498     15 29 CA F7 | 	test	local06, local07 wz
1749c     11 25 02 5D |  if_ne	qmul	local04, local03
174a0     12 27 02 56 |  if_ne	mov	local05, local04
174a4     01 20 06 51 |  if_ne	add	local02, #1
174a8     18 24 62 5D |  if_ne	getqx	local04
174ac     D4 FF 9F 5D |  if_ne	jmp	#LR__2210
174b0                 | LR__2211
174b0                 | LR__2212
174b0     20 20 36 F3 | 	fle	local02, #32 wc
174b4     10 13 02 F6 | 	mov	arg01, local02
174b8     02 12 06 F1 | 	add	arg01, #2
174bc     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
174c0     FD 28 02 F6 | 	mov	local06, result1
174c4     10 2B 02 F6 | 	mov	local07, local02
174c8     14 2B 02 F1 | 	add	local07, local06
174cc     15 01 48 FC | 	wrbyte	#0, local07
174d0     97 1A 48 FB | 	callpa	#(@LR__2214-@LR__2213)>>2,fcache_load_ptr_
174d4                 | LR__2213
174d4     01 20 16 F2 | 	cmp	local02, #1 wc
174d8     2C 00 90 CD |  if_b	jmp	#LR__2215
174dc     11 1F 12 FD | 	qdiv	local01, local03
174e0     01 20 86 F1 | 	sub	local02, #1
174e4     10 2B 02 F6 | 	mov	local07, local02
174e8     14 2B 02 F1 | 	add	local07, local06
174ec     19 2C 62 FD | 	getqy	local08
174f0     0A 2C 16 F2 | 	cmp	local08, #10 wc
174f4     30 2C 06 C1 |  if_b	add	local08, #48
174f8     37 2C 06 31 |  if_ae	add	local08, #55
174fc     15 2D 42 FC | 	wrbyte	local08, local07
17500     18 1E 62 FD | 	getqx	local01
17504     CC FF 9F FD | 	jmp	#LR__2213
17508                 | LR__2214
17508                 | LR__2215
17508     14 FB 01 F6 | 	mov	result1, local06
1750c     A7 F0 03 F6 | 	mov	ptra, fp
17510     B2 00 A0 FD | 	call	#popregs_
17514                 | __system__Number_S_ret
17514     2D 00 64 FD | 	ret
17518                 | 
17518                 | __system__LCase_S
17518     07 4A 05 F6 | 	mov	COUNT_, #7
1751c     A8 00 A0 FD | 	call	#pushregs_
17520     09 1F 02 F6 | 	mov	local01, arg01
17524     09 21 02 F6 | 	mov	local02, arg01
17528     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
1752c                 | LR__2220
1752c     10 FB C9 FA | 	rdbyte	result1, local02 wz
17530     01 20 06 51 |  if_ne	add	local02, #1
17534     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
17538                 | LR__2221
17538     09 21 82 F1 | 	sub	local02, arg01
1753c     10 FB 01 F6 | 	mov	result1, local02
17540     FD 20 0A F6 | 	mov	local02, result1 wz
17544     22 01 00 AF 
17548     2E FA 05 A6 |  if_e	mov	result1, ##@LR__4037
1754c     7C 00 90 AD |  if_e	jmp	#LR__2227
17550     10 13 02 F6 | 	mov	arg01, local02
17554     02 12 06 F1 | 	add	arg01, #2
17558     60 17 B0 FD | 	call	#__system___gc_alloc_managed
1755c     FD 22 0A F6 | 	mov	local03, result1 wz
17560     64 00 90 AD |  if_e	jmp	#LR__2226
17564     01 24 66 F6 | 	neg	local04, #1
17568     97 26 48 FB | 	callpa	#(@LR__2225-@LR__2222)>>2,fcache_load_ptr_
1756c                 | LR__2222
1756c     01 24 06 F1 | 	add	local04, #1
17570     12 27 02 F6 | 	mov	local05, local04
17574     0F 27 02 F1 | 	add	local05, local01
17578     13 29 C2 FA | 	rdbyte	local06, local05
1757c     41 28 56 F2 | 	cmps	local06, #65 wc
17580     18 00 90 CD |  if_b	jmp	#LR__2223
17584     5B 28 56 F2 | 	cmps	local06, #91 wc
17588     12 2B 02 C6 |  if_b	mov	local07, local04
1758c     11 2B 02 C1 |  if_b	add	local07, local03
17590     20 28 06 C1 |  if_b	add	local06, #32
17594     15 29 42 CC |  if_b	wrbyte	local06, local07
17598     0C 00 90 CD |  if_b	jmp	#LR__2224
1759c                 | LR__2223
1759c     12 2B 02 F6 | 	mov	local07, local04
175a0     11 2B 02 F1 | 	add	local07, local03
175a4     15 29 42 FC | 	wrbyte	local06, local07
175a8                 | LR__2224
175a8     10 29 02 F6 | 	mov	local06, local02
175ac     01 28 86 F1 | 	sub	local06, #1
175b0     14 25 0A F2 | 	cmp	local04, local06 wz
175b4     B4 FF 9F 5D |  if_ne	jmp	#LR__2222
175b8                 | LR__2225
175b8     11 21 02 F1 | 	add	local02, local03
175bc     10 01 48 FC | 	wrbyte	#0, local02
175c0     11 FB 01 F6 | 	mov	result1, local03
175c4     04 00 90 FD | 	jmp	#LR__2227
175c8                 | LR__2226
175c8     11 FB 01 F6 | 	mov	result1, local03
175cc                 | LR__2227
175cc     A7 F0 03 F6 | 	mov	ptra, fp
175d0     B2 00 A0 FD | 	call	#popregs_
175d4                 | __system__LCase_S_ret
175d4     2D 00 64 FD | 	ret
175d8                 | 
175d8                 | __system__LTrim_S
175d8     05 4A 05 F6 | 	mov	COUNT_, #5
175dc     A8 00 A0 FD | 	call	#pushregs_
175e0     09 1F 02 F6 | 	mov	local01, arg01
175e4     09 21 02 F6 | 	mov	local02, arg01
175e8     97 06 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
175ec                 | LR__2230
175ec     10 FB C9 FA | 	rdbyte	result1, local02 wz
175f0     01 20 06 51 |  if_ne	add	local02, #1
175f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2230
175f8                 | LR__2231
175f8     09 21 82 F1 | 	sub	local02, arg01
175fc     10 FB 01 F6 | 	mov	result1, local02
17600     FD 20 0A F6 | 	mov	local02, result1 wz
17604     22 01 00 AF 
17608     2F FA 05 A6 |  if_e	mov	result1, ##@LR__4038
1760c     7C 00 90 AD |  if_e	jmp	#LR__2236
17610     00 22 06 F6 | 	mov	local03, #0
17614     10 25 02 F6 | 	mov	local04, local02
17618                 | LR__2232
17618     12 23 52 F2 | 	cmps	local03, local04 wc
1761c     68 00 90 3D |  if_ae	jmp	#LR__2235
17620     11 17 02 F6 | 	mov	arg03, local03
17624     0F 17 02 F1 | 	add	arg03, local01
17628     0B 17 C2 FA | 	rdbyte	arg03, arg03
1762c     20 16 0E F2 | 	cmp	arg03, #32 wz
17630     4C 00 90 AD |  if_e	jmp	#LR__2234
17634     10 13 02 F6 | 	mov	arg01, local02
17638     11 13 82 F1 | 	sub	arg01, local03
1763c     02 12 06 F1 | 	add	arg01, #2
17640     78 16 B0 FD | 	call	#__system___gc_alloc_managed
17644     FD 26 0A F6 | 	mov	local05, result1 wz
17648     2C 00 90 AD |  if_e	jmp	#LR__2233
1764c     11 15 02 F6 | 	mov	arg02, local03
17650     0F 15 02 F1 | 	add	arg02, local01
17654     10 17 02 F6 | 	mov	arg03, local02
17658     11 17 82 F1 | 	sub	arg03, local03
1765c     13 13 02 F6 | 	mov	arg01, local05
17660     10 DB BF FD | 	call	#__system____builtin_memmove
17664     11 21 82 F1 | 	sub	local02, local03
17668     13 21 02 F1 | 	add	local02, local05
1766c     10 01 48 FC | 	wrbyte	#0, local02
17670     13 FB 01 F6 | 	mov	result1, local05
17674     14 00 90 FD | 	jmp	#LR__2236
17678                 | LR__2233
17678     13 FB 01 F6 | 	mov	result1, local05
1767c     0C 00 90 FD | 	jmp	#LR__2236
17680                 | LR__2234
17680     01 22 06 F1 | 	add	local03, #1
17684     90 FF 9F FD | 	jmp	#LR__2232
17688                 | LR__2235
17688     0F FB 01 F6 | 	mov	result1, local01
1768c                 | LR__2236
1768c     A7 F0 03 F6 | 	mov	ptra, fp
17690     B2 00 A0 FD | 	call	#popregs_
17694                 | __system__LTrim_S_ret
17694     2D 00 64 FD | 	ret
17698                 | 
17698                 | __system__RTrim_S
17698     04 4A 05 F6 | 	mov	COUNT_, #4
1769c     A8 00 A0 FD | 	call	#pushregs_
176a0     09 1F 02 F6 | 	mov	local01, arg01
176a4     09 21 02 F6 | 	mov	local02, arg01
176a8     97 06 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
176ac                 | LR__2240
176ac     10 FB C9 FA | 	rdbyte	result1, local02 wz
176b0     01 20 06 51 |  if_ne	add	local02, #1
176b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2240
176b8                 | LR__2241
176b8     09 21 82 F1 | 	sub	local02, arg01
176bc     10 FB 01 F6 | 	mov	result1, local02
176c0     FD 20 0A F6 | 	mov	local02, result1 wz
176c4     22 01 00 AF 
176c8     30 FA 05 A6 |  if_e	mov	result1, ##@LR__4039
176cc     74 00 90 AD |  if_e	jmp	#LR__2245
176d0     10 23 02 F6 | 	mov	local03, local02
176d4     01 22 86 F1 | 	sub	local03, #1
176d8                 | LR__2242
176d8     11 15 02 F6 | 	mov	arg02, local03
176dc     0F 15 02 F1 | 	add	arg02, local01
176e0     0A 21 C2 FA | 	rdbyte	local02, arg02
176e4     20 20 0E F2 | 	cmp	local02, #32 wz
176e8     44 00 90 AD |  if_e	jmp	#LR__2244
176ec     11 13 02 F6 | 	mov	arg01, local03
176f0     02 12 06 F1 | 	add	arg01, #2
176f4     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
176f8     FD 24 0A F6 | 	mov	local04, result1 wz
176fc     28 00 90 AD |  if_e	jmp	#LR__2243
17700     11 17 02 F6 | 	mov	arg03, local03
17704     01 16 06 F1 | 	add	arg03, #1
17708     12 13 02 F6 | 	mov	arg01, local04
1770c     0F 15 02 F6 | 	mov	arg02, local01
17710     60 DA BF FD | 	call	#__system____builtin_memmove
17714     01 22 06 F1 | 	add	local03, #1
17718     12 23 02 F1 | 	add	local03, local04
1771c     11 01 48 FC | 	wrbyte	#0, local03
17720     12 FB 01 F6 | 	mov	result1, local04
17724     1C 00 90 FD | 	jmp	#LR__2245
17728                 | LR__2243
17728     12 FB 01 F6 | 	mov	result1, local04
1772c     14 00 90 FD | 	jmp	#LR__2245
17730                 | LR__2244
17730     01 22 86 F1 | 	sub	local03, #1
17734     00 22 56 F2 | 	cmps	local03, #0 wc
17738     9C FF 9F 3D |  if_ae	jmp	#LR__2242
1773c     22 01 00 FF 
17740     31 FA 05 F6 | 	mov	result1, ##@LR__4040
17744                 | LR__2245
17744     A7 F0 03 F6 | 	mov	ptra, fp
17748     B2 00 A0 FD | 	call	#popregs_
1774c                 | __system__RTrim_S_ret
1774c     2D 00 64 FD | 	ret
17750                 | 
17750                 | __system__Instr
17750     07 4A 05 F6 | 	mov	COUNT_, #7
17754     A8 00 A0 FD | 	call	#pushregs_
17758     09 1F 02 F6 | 	mov	local01, arg01
1775c     0A 21 02 F6 | 	mov	local02, arg02
17760     0B 23 02 F6 | 	mov	local03, arg03
17764     11 13 02 F6 | 	mov	arg01, local03
17768     09 25 02 F6 | 	mov	local04, arg01
1776c     97 06 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
17770                 | LR__2250
17770     12 FB C9 FA | 	rdbyte	result1, local04 wz
17774     01 24 06 51 |  if_ne	add	local04, #1
17778     F4 FF 9F 5D |  if_ne	jmp	#LR__2250
1777c                 | LR__2251
1777c     09 25 82 F1 | 	sub	local04, arg01
17780     12 27 02 F6 | 	mov	local05, local04
17784     10 13 02 F6 | 	mov	arg01, local02
17788     09 25 02 F6 | 	mov	local04, arg01
1778c     97 06 48 FB | 	callpa	#(@LR__2253-@LR__2252)>>2,fcache_load_ptr_
17790                 | LR__2252
17790     12 FB C9 FA | 	rdbyte	result1, local04 wz
17794     01 24 06 51 |  if_ne	add	local04, #1
17798     F4 FF 9F 5D |  if_ne	jmp	#LR__2252
1779c                 | LR__2253
1779c     09 25 82 F1 | 	sub	local04, arg01
177a0     12 FB 01 F6 | 	mov	result1, local04
177a4     FD 18 0A F6 | 	mov	arg04, result1 wz
177a8     00 FA 05 A6 |  if_e	mov	result1, #0
177ac     98 00 90 AD |  if_e	jmp	#LR__2257
177b0     00 26 0E F2 | 	cmp	local05, #0 wz
177b4     00 FA 05 A6 |  if_e	mov	result1, #0
177b8     8C 00 90 AD |  if_e	jmp	#LR__2257
177bc     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
177c0     00 FA 05 16 |  if_a	mov	result1, #0
177c4     80 00 90 1D |  if_a	jmp	#LR__2257
177c8     01 1E 56 F2 | 	cmps	local01, #1 wc
177cc     01 1E 06 C6 |  if_b	mov	local01, #1
177d0     11 29 C2 FA | 	rdbyte	local06, local03
177d4     01 26 0E F2 | 	cmp	local05, #1 wz
177d8     18 00 90 5D |  if_ne	jmp	#LR__2254
177dc     10 13 02 F6 | 	mov	arg01, local02
177e0     14 15 02 F6 | 	mov	arg02, local06
177e4     0F 17 02 F6 | 	mov	arg03, local01
177e8     00 18 06 F6 | 	mov	arg04, #0
177ec     68 30 B0 FD | 	call	#__system____ScanForChar
177f0     54 00 90 FD | 	jmp	#LR__2257
177f4                 | LR__2254
177f4     0F 2B 02 F6 | 	mov	local07, local01
177f8                 | LR__2255
177f8     10 13 02 F6 | 	mov	arg01, local02
177fc     14 15 02 F6 | 	mov	arg02, local06
17800     15 17 02 F6 | 	mov	arg03, local07
17804     00 18 06 F6 | 	mov	arg04, #0
17808     4C 30 B0 FD | 	call	#__system____ScanForChar
1780c     FD 2A 0A F6 | 	mov	local07, result1 wz
17810     30 00 90 AD |  if_e	jmp	#LR__2256
17814     13 17 02 F6 | 	mov	arg03, local05
17818     10 13 02 F6 | 	mov	arg01, local02
1781c     15 15 02 F6 | 	mov	arg02, local07
17820     58 FB BF FD | 	call	#__system__Mid_S
17824     FD 12 02 F6 | 	mov	arg01, result1
17828     11 15 02 F6 | 	mov	arg02, local03
1782c     4C DA BF FD | 	call	#__system___string_cmp
17830     00 FA 0D F2 | 	cmp	result1, #0 wz
17834     15 FB 01 A6 |  if_e	mov	result1, local07
17838     0C 00 90 AD |  if_e	jmp	#LR__2257
1783c     13 2B 02 F1 | 	add	local07, local05
17840     B4 FF 9F FD | 	jmp	#LR__2255
17844                 | LR__2256
17844     00 FA 05 F6 | 	mov	result1, #0
17848                 | LR__2257
17848     A7 F0 03 F6 | 	mov	ptra, fp
1784c     B2 00 A0 FD | 	call	#popregs_
17850                 | __system__Instr_ret
17850     2D 00 64 FD | 	ret
17854                 | 
17854                 | __system___strerror
17854     00 12 56 F2 | 	cmps	arg01, #0 wc
17858     08 00 90 CD |  if_b	jmp	#LR__2260
1785c     1A 12 56 F2 | 	cmps	arg01, #26 wc
17860     04 00 90 CD |  if_b	jmp	#LR__2261
17864                 | LR__2260
17864     19 12 06 F6 | 	mov	arg01, #25
17868                 | LR__2261
17868     02 12 66 F0 | 	shl	arg01, #2
1786c     01 00 00 FF 
17870     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
17874     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17878     09 FB 01 FB | 	rdlong	result1, arg01
1787c     01 00 00 FF 
17880     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
17884                 | __system___strerror_ret
17884     2D 00 64 FD | 	ret
17888                 | 
17888                 | __system___int64_shl
17888     20 16 CE F7 | 	test	arg03, #32 wz
1788c     09 15 02 56 |  if_ne	mov	arg02, arg01
17890     00 12 06 56 |  if_ne	mov	arg01, #0
17894     1F 16 CE F7 | 	test	arg03, #31 wz
17898     18 00 90 AD |  if_e	jmp	#LR__2270
1789c     0B 15 62 F0 | 	shl	arg02, arg03
178a0     09 FB 01 F6 | 	mov	result1, arg01
178a4     0B FD 61 F6 | 	neg	result2, arg03
178a8     FE FA 41 F0 | 	shr	result1, result2
178ac     FD 14 42 F5 | 	or	arg02, result1
178b0     0B 13 62 F0 | 	shl	arg01, arg03
178b4                 | LR__2270
178b4     0A FD 01 F6 | 	mov	result2, arg02
178b8     09 FB 01 F6 | 	mov	result1, arg01
178bc                 | __system___int64_shl_ret
178bc     2D 00 64 FD | 	ret
178c0                 | 
178c0                 | __system___usepins
178c0     14 E8 05 F1 | 	add	ptr___system__dat__, #20
178c4     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
178c8     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
178cc     00 13 CA F7 | 	test	arg01, _var01 wz
178d0     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
178d4     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
178d8     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
178dc     01 15 CA A7 |  if_e	test	arg02, _var02 wz
178e0     00 FA 05 56 |  if_ne	mov	result1, #0
178e4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
178e8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
178ec     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
178f0     09 03 42 F5 | 	or	_var02, arg01
178f4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
178f8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
178fc     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
17900     0A 03 42 F5 | 	or	_var02, arg02
17904     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
17908     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1790c     01 FA 65 F6 | 	neg	result1, #1
17910                 | __system___usepins_ret
17910     2D 00 64 FD | 	ret
17914                 | 
17914                 | __system___freepins
17914     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17918     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1791c     09 01 22 F5 | 	andn	_var01, arg01
17920     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17924     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17928     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1792c     0A 01 22 F5 | 	andn	_var01, arg02
17930     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17934     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17938                 | __system___freepins_ret
17938     2D 00 64 FD | 	ret
1793c                 | 
1793c                 | __system___float_fromuns
1793c     09 17 0A F6 | 	mov	arg03, arg01 wz
17940     0B FB 01 A6 |  if_e	mov	result1, arg03
17944     24 00 90 AD |  if_e	jmp	#LR__2280
17948     0B 15 92 F7 | 	encod	arg02, arg03 wc
1794c     01 14 06 C1 |  if_b	add	arg02, #1
17950     01 14 86 F1 | 	sub	arg02, #1
17954     1F 12 06 F6 | 	mov	arg01, #31
17958     0A 13 82 F1 | 	sub	arg01, arg02
1795c     09 17 62 F0 | 	shl	arg03, arg01
17960     02 16 46 F0 | 	shr	arg03, #2
17964     00 12 06 F6 | 	mov	arg01, #0
17968     74 08 B0 FD | 	call	#__system___float_Pack
1796c                 | LR__2280
1796c                 | __system___float_fromuns_ret
1796c     2D 00 64 FD | 	ret
17970                 | 
17970                 | __system___float_add
17970     0F 4A 05 F6 | 	mov	COUNT_, #15
17974     A8 00 A0 FD | 	call	#pushregs_
17978     09 1F 02 F6 | 	mov	local01, arg01
1797c     0A 21 02 F6 | 	mov	local02, arg02
17980     00 22 06 F6 | 	mov	local03, #0
17984     0F 25 02 F6 | 	mov	local04, local01
17988     12 27 02 F6 | 	mov	local05, local04
1798c     16 26 46 F7 | 	zerox	local05, #22
17990     12 29 02 F6 | 	mov	local06, local04
17994     01 28 66 F0 | 	shl	local06, #1
17998     18 28 46 F0 | 	shr	local06, #24
1799c     1F 24 46 F0 | 	shr	local04, #31
179a0     10 13 02 F6 | 	mov	arg01, local02
179a4     09 FB 01 F6 | 	mov	result1, arg01
179a8     FD 2A 02 F6 | 	mov	local07, result1
179ac     15 2D 02 F6 | 	mov	local08, local07
179b0     16 2C 46 F7 | 	zerox	local08, #22
179b4     15 2F 02 F6 | 	mov	local09, local07
179b8     01 2E 66 F0 | 	shl	local09, #1
179bc     18 2E 46 F0 | 	shr	local09, #24
179c0     17 31 02 F6 | 	mov	local10, local09
179c4     1F 2A 46 F0 | 	shr	local07, #31
179c8     00 32 06 F6 | 	mov	local11, #0
179cc     00 34 06 F6 | 	mov	local12, #0
179d0     18 29 12 F2 | 	cmp	local06, local10 wc
179d4     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
179d8     2C 00 90 1D |  if_a	jmp	#LR__2290
179dc     16 27 12 32 |  if_ae	cmp	local05, local08 wc
179e0     24 00 90 3D |  if_ae	jmp	#LR__2290
179e4     13 37 02 F6 | 	mov	local13, local05
179e8     16 27 02 F6 | 	mov	local05, local08
179ec     1B 2D 02 F6 | 	mov	local08, local13
179f0     14 37 02 F6 | 	mov	local13, local06
179f4     18 29 02 F6 | 	mov	local06, local10
179f8     1B 31 02 F6 | 	mov	local10, local13
179fc     12 37 02 F6 | 	mov	local13, local04
17a00     15 25 02 F6 | 	mov	local04, local07
17a04     1B 2B 02 F6 | 	mov	local07, local13
17a08                 | LR__2290
17a08     FF 28 0E F2 | 	cmp	local06, #255 wz
17a0c     70 01 90 AD |  if_e	jmp	#LR__2305
17a10     00 28 0E F2 | 	cmp	local06, #0 wz
17a14     AC 01 90 AD |  if_e	jmp	#LR__2307
17a18     17 26 26 F4 | 	bith	local05, #23
17a1c                 | LR__2291
17a1c     00 30 0E F2 | 	cmp	local10, #0 wz
17a20     F0 01 90 AD |  if_e	jmp	#LR__2311
17a24     17 2C 26 F4 | 	bith	local08, #23
17a28                 | LR__2292
17a28     7F 28 86 F1 | 	sub	local06, #127
17a2c     7F 30 86 F1 | 	sub	local10, #127
17a30     14 39 02 F6 | 	mov	local14, local06
17a34     18 39 82 F1 | 	sub	local14, local10
17a38     97 14 48 FB | 	callpa	#(@LR__2294-@LR__2293)>>2,fcache_load_ptr_
17a3c                 | LR__2293
17a3c     20 38 56 F2 | 	cmps	local14, #32 wc
17a40     20 00 90 CD |  if_b	jmp	#LR__2295
17a44     16 2F 02 F6 | 	mov	local09, local08
17a48     00 32 0E F2 | 	cmp	local11, #0 wz
17a4c     6F 32 62 FD | 	wrnz	local11
17a50     19 2F 42 F5 | 	or	local09, local11
17a54     17 33 02 F6 | 	mov	local11, local09
17a58     00 2C 06 F6 | 	mov	local08, #0
17a5c     20 38 86 F1 | 	sub	local14, #32
17a60     D8 FF 9F FD | 	jmp	#LR__2293
17a64                 | LR__2294
17a64                 | LR__2295
17a64     00 38 0E F2 | 	cmp	local14, #0 wz
17a68     38 00 90 AD |  if_e	jmp	#LR__2296
17a6c     16 37 02 F6 | 	mov	local13, local08
17a70     20 30 06 F6 | 	mov	local10, #32
17a74     1C 31 82 F1 | 	sub	local10, local14
17a78     18 37 62 F0 | 	shl	local13, local10
17a7c     19 31 02 F6 | 	mov	local10, local11
17a80     20 2E 06 F6 | 	mov	local09, #32
17a84     1C 2F 82 F1 | 	sub	local09, local14
17a88     17 31 6A F0 | 	shl	local10, local09 wz
17a8c     1C 33 42 F0 | 	shr	local11, local14
17a90     1C 2D 42 F0 | 	shr	local08, local14
17a94     1B 33 42 F5 | 	or	local11, local13
17a98     00 3A 06 F6 | 	mov	local15, #0
17a9c     01 3A 06 56 |  if_ne	mov	local15, #1
17aa0     1D 33 42 F5 | 	or	local11, local15
17aa4                 | LR__2296
17aa4     12 3B 02 F6 | 	mov	local15, local04
17aa8     15 3B 62 F5 | 	xor	local15, local07
17aac     01 3A CE F7 | 	test	local15, #1 wz
17ab0     18 00 90 AD |  if_e	jmp	#LR__2297
17ab4     16 2D 22 F6 | 	not	local08, local08
17ab8     19 33 22 F6 | 	not	local11, local11
17abc     01 32 0E F1 | 	add	local11, #1 wz
17ac0     00 3A 06 F6 | 	mov	local15, #0
17ac4     01 3A 06 A6 |  if_e	mov	local15, #1
17ac8     1D 2D 02 F1 | 	add	local08, local15
17acc                 | LR__2297
17acc     19 35 12 F1 | 	add	local12, local11 wc
17ad0     16 27 22 F1 | 	addx	local05, local08
17ad4     00 26 56 F2 | 	cmps	local05, #0 wc
17ad8     1C 00 90 3D |  if_ae	jmp	#LR__2298
17adc     01 24 66 F5 | 	xor	local04, #1
17ae0     13 27 22 F6 | 	not	local05, local05
17ae4     1A 35 22 F6 | 	not	local12, local12
17ae8     01 34 0E F1 | 	add	local12, #1 wz
17aec     00 3A 06 F6 | 	mov	local15, #0
17af0     01 3A 06 A6 |  if_e	mov	local15, #1
17af4     1D 27 02 F1 | 	add	local05, local15
17af8                 | LR__2298
17af8     00 80 00 FF 
17afc     00 26 16 F2 | 	cmp	local05, ##16777216 wc
17b00     28 00 90 CD |  if_b	jmp	#LR__2299
17b04     01 28 06 F1 | 	add	local06, #1
17b08     1A 39 02 F6 | 	mov	local14, local12
17b0c     01 38 06 F5 | 	and	local14, #1
17b10     01 34 46 F0 | 	shr	local12, #1
17b14     13 3B 02 F6 | 	mov	local15, local05
17b18     1F 3A 66 F0 | 	shl	local15, #31
17b1c     1D 35 42 F5 | 	or	local12, local15
17b20     1C 35 42 F5 | 	or	local12, local14
17b24     01 26 46 F0 | 	shr	local05, #1
17b28     3C 00 90 FD | 	jmp	#LR__2304
17b2c                 | LR__2299
17b2c     00 40 00 FF 
17b30     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17b34     30 00 90 3D |  if_ae	jmp	#LR__2303
17b38     00 26 0E F2 | 	cmp	local05, #0 wz
17b3c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
17b40     08 24 46 A5 |  if_e	or	local04, #8
17b44     01 24 26 A5 |  if_e	andn	local04, #1
17b48     1C 00 90 AD |  if_e	jmp	#LR__2302
17b4c                 | LR__2300
17b4c     00 40 00 FF 
17b50     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17b54     10 00 90 3D |  if_ae	jmp	#LR__2301
17b58     1A 35 12 F1 | 	add	local12, local12 wc
17b5c     13 27 22 F1 | 	addx	local05, local05
17b60     01 28 86 F1 | 	sub	local06, #1
17b64     E4 FF 9F FD | 	jmp	#LR__2300
17b68                 | LR__2301
17b68                 | LR__2302
17b68                 | LR__2303
17b68                 | LR__2304
17b68     13 13 02 F6 | 	mov	arg01, local05
17b6c     1A 15 02 F6 | 	mov	arg02, local12
17b70     14 17 02 F6 | 	mov	arg03, local06
17b74     12 19 02 F6 | 	mov	arg04, local04
17b78     20 31 B0 FD | 	call	#__system__pack_0400
17b7c     DC 00 90 FD | 	jmp	#LR__2315
17b80                 | LR__2305
17b80     FF 30 0E F2 | 	cmp	local10, #255 wz
17b84     10 00 90 5D |  if_ne	jmp	#LR__2306
17b88     12 2B 0A F2 | 	cmp	local07, local04 wz
17b8c     00 F8 3F 5F 
17b90     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17b94     C4 00 90 5D |  if_ne	jmp	#LR__2315
17b98                 | LR__2306
17b98     00 26 0E F2 | 	cmp	local05, #0 wz
17b9c     00 F8 3F 5F 
17ba0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17ba4     B4 00 90 5D |  if_ne	jmp	#LR__2315
17ba8     1A 15 02 F6 | 	mov	arg02, local12
17bac     14 17 02 F6 | 	mov	arg03, local06
17bb0     12 19 02 F6 | 	mov	arg04, local04
17bb4     02 18 46 F5 | 	or	arg04, #2
17bb8     13 13 02 F6 | 	mov	arg01, local05
17bbc     DC 30 B0 FD | 	call	#__system__pack_0400
17bc0     98 00 90 FD | 	jmp	#LR__2315
17bc4                 | LR__2307
17bc4     00 26 0E F2 | 	cmp	local05, #0 wz
17bc8     28 00 90 AD |  if_e	jmp	#LR__2310
17bcc     01 26 66 F0 | 	shl	local05, #1
17bd0     97 0E 48 FB | 	callpa	#(@LR__2309-@LR__2308)>>2,fcache_load_ptr_
17bd4                 | LR__2308
17bd4     00 40 00 FF 
17bd8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17bdc     14 3B 02 C6 |  if_b	mov	local15, local06
17be0     01 3A 86 C1 |  if_b	sub	local15, #1
17be4     1D 29 02 C6 |  if_b	mov	local06, local15
17be8     01 26 66 C0 |  if_b	shl	local05, #1
17bec     E4 FF 9F CD |  if_b	jmp	#LR__2308
17bf0                 | LR__2309
17bf0     28 FE 9F FD | 	jmp	#LR__2291
17bf4                 | LR__2310
17bf4     15 25 02 F5 | 	and	local04, local07
17bf8     12 19 02 F6 | 	mov	arg04, local04
17bfc     08 18 46 F5 | 	or	arg04, #8
17c00     00 12 06 F6 | 	mov	arg01, #0
17c04     00 14 06 F6 | 	mov	arg02, #0
17c08     00 16 06 F6 | 	mov	arg03, #0
17c0c     8C 30 B0 FD | 	call	#__system__pack_0400
17c10     48 00 90 FD | 	jmp	#LR__2315
17c14                 | LR__2311
17c14     00 2C 0E F2 | 	cmp	local08, #0 wz
17c18     28 00 90 AD |  if_e	jmp	#LR__2314
17c1c     01 2C 66 F0 | 	shl	local08, #1
17c20     97 0E 48 FB | 	callpa	#(@LR__2313-@LR__2312)>>2,fcache_load_ptr_
17c24                 | LR__2312
17c24     00 40 00 FF 
17c28     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
17c2c     18 3B 02 C6 |  if_b	mov	local15, local10
17c30     01 3A 86 C1 |  if_b	sub	local15, #1
17c34     1D 31 02 C6 |  if_b	mov	local10, local15
17c38     01 2C 66 C0 |  if_b	shl	local08, #1
17c3c     E4 FF 9F CD |  if_b	jmp	#LR__2312
17c40                 | LR__2313
17c40     E4 FD 9F FD | 	jmp	#LR__2292
17c44                 | LR__2314
17c44     7F 28 86 F1 | 	sub	local06, #127
17c48     13 13 02 F6 | 	mov	arg01, local05
17c4c     1A 15 02 F6 | 	mov	arg02, local12
17c50     14 17 02 F6 | 	mov	arg03, local06
17c54     12 19 02 F6 | 	mov	arg04, local04
17c58     40 30 B0 FD | 	call	#__system__pack_0400
17c5c                 | LR__2315
17c5c     A7 F0 03 F6 | 	mov	ptra, fp
17c60     B2 00 A0 FD | 	call	#popregs_
17c64                 | __system___float_add_ret
17c64     2D 00 64 FD | 	ret
17c68                 | 
17c68                 | __system___float_mul
17c68     0B 4A 05 F6 | 	mov	COUNT_, #11
17c6c     A8 00 A0 FD | 	call	#pushregs_
17c70     09 1F 02 F6 | 	mov	local01, arg01
17c74     0A 21 02 F6 | 	mov	local02, arg02
17c78     0F 23 02 F6 | 	mov	local03, local01
17c7c     11 25 02 F6 | 	mov	local04, local03
17c80     16 24 46 F7 | 	zerox	local04, #22
17c84     11 27 02 F6 | 	mov	local05, local03
17c88     01 26 66 F0 | 	shl	local05, #1
17c8c     18 26 46 F0 | 	shr	local05, #24
17c90     1F 22 46 F0 | 	shr	local03, #31
17c94     10 FB 01 F6 | 	mov	result1, local02
17c98     FD 28 02 F6 | 	mov	local06, result1
17c9c     14 2B 02 F6 | 	mov	local07, local06
17ca0     16 2A 46 F7 | 	zerox	local07, #22
17ca4     14 2D 02 F6 | 	mov	local08, local06
17ca8     01 2C 66 F0 | 	shl	local08, #1
17cac     18 2C 46 F0 | 	shr	local08, #24
17cb0     1F 28 46 F0 | 	shr	local06, #31
17cb4     14 23 62 F5 | 	xor	local03, local06
17cb8     FF 26 0E F2 | 	cmp	local05, #255 wz
17cbc     90 00 90 AD |  if_e	jmp	#LR__2323
17cc0     FF 2C 0E F2 | 	cmp	local08, #255 wz
17cc4     D8 00 90 AD |  if_e	jmp	#LR__2325
17cc8     00 26 0E F2 | 	cmp	local05, #0 wz
17ccc     0C 01 90 AD |  if_e	jmp	#LR__2326
17cd0     17 24 26 F4 | 	bith	local04, #23
17cd4                 | LR__2320
17cd4     00 2C 0E F2 | 	cmp	local08, #0 wz
17cd8     44 01 90 AD |  if_e	jmp	#LR__2330
17cdc     17 2A 26 F4 | 	bith	local07, #23
17ce0                 | LR__2321
17ce0     12 21 02 F6 | 	mov	local02, local04
17ce4     04 20 66 F0 | 	shl	local02, #4
17ce8     15 29 02 F6 | 	mov	local06, local07
17cec     05 28 66 F0 | 	shl	local06, #5
17cf0     14 21 02 FD | 	qmul	local02, local06
17cf4     16 27 02 F1 | 	add	local05, local08
17cf8     FE 26 86 F1 | 	sub	local05, #254
17cfc     13 2F 02 F6 | 	mov	local09, local05
17d00     04 24 66 F0 | 	shl	local04, #4
17d04     05 2A 66 F0 | 	shl	local07, #5
17d08     18 30 62 FD | 	getqx	local10
17d0c     15 25 02 FD | 	qmul	local04, local07
17d10     19 32 62 FD | 	getqy	local11
17d14     00 80 00 FF 
17d18     00 32 16 F2 | 	cmp	local11, ##16777216 wc
17d1c     18 00 90 CD |  if_b	jmp	#LR__2322
17d20     01 2E 06 F1 | 	add	local09, #1
17d24     01 30 46 F0 | 	shr	local10, #1
17d28     19 2D 02 F6 | 	mov	local08, local11
17d2c     1F 2C 66 F0 | 	shl	local08, #31
17d30     16 31 42 F5 | 	or	local10, local08
17d34     01 32 46 F0 | 	shr	local11, #1
17d38                 | LR__2322
17d38     19 13 02 F6 | 	mov	arg01, local11
17d3c     18 15 02 F6 | 	mov	arg02, local10
17d40     17 17 02 F6 | 	mov	arg03, local09
17d44     11 19 02 F6 | 	mov	arg04, local03
17d48     50 2F B0 FD | 	call	#__system__pack_0400
17d4c     10 01 90 FD | 	jmp	#LR__2334
17d50                 | LR__2323
17d50     00 24 0E F2 | 	cmp	local04, #0 wz
17d54     0F FB 01 56 |  if_ne	mov	result1, local01
17d58     04 01 90 5D |  if_ne	jmp	#LR__2334
17d5c     FF 2C 56 F2 | 	cmps	local08, #255 wc
17d60     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
17d64     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
17d68     18 00 90 4D |  if_c_and_nz	jmp	#LR__2324
17d6c     00 F8 3F CF 
17d70     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
17d74     E8 00 90 CD |  if_b	jmp	#LR__2334
17d78     00 2A 0E F2 | 	cmp	local07, #0 wz
17d7c     10 FB 01 56 |  if_ne	mov	result1, local02
17d80     DC 00 90 5D |  if_ne	jmp	#LR__2334
17d84                 | LR__2324
17d84     02 22 46 F5 | 	or	local03, #2
17d88     00 12 06 F6 | 	mov	arg01, #0
17d8c     00 14 06 F6 | 	mov	arg02, #0
17d90     13 17 02 F6 | 	mov	arg03, local05
17d94     11 19 02 F6 | 	mov	arg04, local03
17d98     00 2F B0 FD | 	call	#__system__pack_0400
17d9c     C0 00 90 FD | 	jmp	#LR__2334
17da0                 | LR__2325
17da0     00 26 0E F2 | 	cmp	local05, #0 wz
17da4     00 24 0E A2 |  if_e	cmp	local04, #0 wz
17da8     00 F8 3F AF 
17dac     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
17db0     AC 00 90 AD |  if_e	jmp	#LR__2334
17db4     00 2A 0E F2 | 	cmp	local07, #0 wz
17db8     10 FB 01 56 |  if_ne	mov	result1, local02
17dbc     A0 00 90 5D |  if_ne	jmp	#LR__2334
17dc0     16 17 02 F6 | 	mov	arg03, local08
17dc4     11 19 02 F6 | 	mov	arg04, local03
17dc8     02 18 46 F5 | 	or	arg04, #2
17dcc     00 12 06 F6 | 	mov	arg01, #0
17dd0     00 14 06 F6 | 	mov	arg02, #0
17dd4     C4 2E B0 FD | 	call	#__system__pack_0400
17dd8     84 00 90 FD | 	jmp	#LR__2334
17ddc                 | LR__2326
17ddc     00 24 0E F2 | 	cmp	local04, #0 wz
17de0     20 00 90 AD |  if_e	jmp	#LR__2329
17de4     01 24 66 F0 | 	shl	local04, #1
17de8     97 0A 48 FB | 	callpa	#(@LR__2328-@LR__2327)>>2,fcache_load_ptr_
17dec                 | LR__2327
17dec     00 40 00 FF 
17df0     00 24 16 F2 | 	cmp	local04, ##8388608 wc
17df4     01 26 86 C1 |  if_b	sub	local05, #1
17df8     01 24 66 C0 |  if_b	shl	local04, #1
17dfc     EC FF 9F CD |  if_b	jmp	#LR__2327
17e00                 | LR__2328
17e00     D0 FE 9F FD | 	jmp	#LR__2320
17e04                 | LR__2329
17e04     08 22 46 F5 | 	or	local03, #8
17e08     00 12 06 F6 | 	mov	arg01, #0
17e0c     00 14 06 F6 | 	mov	arg02, #0
17e10     00 16 06 F6 | 	mov	arg03, #0
17e14     11 19 02 F6 | 	mov	arg04, local03
17e18     80 2E B0 FD | 	call	#__system__pack_0400
17e1c     40 00 90 FD | 	jmp	#LR__2334
17e20                 | LR__2330
17e20     00 2A 0E F2 | 	cmp	local07, #0 wz
17e24     20 00 90 AD |  if_e	jmp	#LR__2333
17e28     01 2A 66 F0 | 	shl	local07, #1
17e2c     97 0A 48 FB | 	callpa	#(@LR__2332-@LR__2331)>>2,fcache_load_ptr_
17e30                 | LR__2331
17e30     00 40 00 FF 
17e34     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
17e38     01 2C 86 C1 |  if_b	sub	local08, #1
17e3c     01 2A 66 C0 |  if_b	shl	local07, #1
17e40     EC FF 9F CD |  if_b	jmp	#LR__2331
17e44                 | LR__2332
17e44     98 FE 9F FD | 	jmp	#LR__2321
17e48                 | LR__2333
17e48     08 22 46 F5 | 	or	local03, #8
17e4c     00 12 06 F6 | 	mov	arg01, #0
17e50     00 14 06 F6 | 	mov	arg02, #0
17e54     00 16 06 F6 | 	mov	arg03, #0
17e58     11 19 02 F6 | 	mov	arg04, local03
17e5c     3C 2E B0 FD | 	call	#__system__pack_0400
17e60                 | LR__2334
17e60     A7 F0 03 F6 | 	mov	ptra, fp
17e64     B2 00 A0 FD | 	call	#popregs_
17e68                 | __system___float_mul_ret
17e68     2D 00 64 FD | 	ret
17e6c                 | 
17e6c                 | __system___float_div
17e6c     0E 4A 05 F6 | 	mov	COUNT_, #14
17e70     A8 00 A0 FD | 	call	#pushregs_
17e74     09 23 02 F6 | 	mov	local03, arg01
17e78     0A 25 02 F6 | 	mov	local04, arg02
17e7c     11 27 02 F6 | 	mov	local05, local03
17e80     13 29 02 F6 | 	mov	local06, local05
17e84     16 28 46 F7 | 	zerox	local06, #22
17e88     13 2B 02 F6 | 	mov	local07, local05
17e8c     01 2A 66 F0 | 	shl	local07, #1
17e90     18 2A 46 F0 | 	shr	local07, #24
17e94     1F 26 46 F0 | 	shr	local05, #31
17e98     12 FB 01 F6 | 	mov	result1, local04
17e9c     FD 2C 02 F6 | 	mov	local08, result1
17ea0     16 2F 02 F6 | 	mov	local09, local08
17ea4     16 2E 46 F7 | 	zerox	local09, #22
17ea8     16 31 02 F6 | 	mov	local10, local08
17eac     01 30 66 F0 | 	shl	local10, #1
17eb0     18 30 46 F0 | 	shr	local10, #24
17eb4     1F 2C 46 F0 | 	shr	local08, #31
17eb8     16 27 62 F5 | 	xor	local05, local08
17ebc     FF 2A 0E F2 | 	cmp	local07, #255 wz
17ec0     D4 00 90 AD |  if_e	jmp	#LR__2345
17ec4     FF 30 0E F2 | 	cmp	local10, #255 wz
17ec8     04 01 90 AD |  if_e	jmp	#LR__2346
17ecc     00 2A 0E F2 | 	cmp	local07, #0 wz
17ed0     24 01 90 AD |  if_e	jmp	#LR__2347
17ed4     17 28 26 F4 | 	bith	local06, #23
17ed8                 | LR__2340
17ed8     00 30 0E F2 | 	cmp	local10, #0 wz
17edc     70 01 90 AD |  if_e	jmp	#LR__2351
17ee0     17 2E 26 F4 | 	bith	local09, #23
17ee4                 | LR__2341
17ee4     18 2B 82 F1 | 	sub	local07, local10
17ee8     15 33 02 F6 | 	mov	local11, local07
17eec     14 13 02 F6 | 	mov	arg01, local06
17ef0     02 12 46 F0 | 	shr	arg01, #2
17ef4     1E 28 66 F0 | 	shl	local06, #30
17ef8     14 15 02 F6 | 	mov	arg02, local06
17efc     17 17 02 F6 | 	mov	arg03, local09
17f00     28 12 62 FD | 	setq	arg01
17f04     0B 15 12 FD | 	qdiv	arg02, arg03
17f08     00 34 06 F6 | 	mov	local12, #0
17f0c     18 1E 62 FD | 	getqx	local01
17f10     19 FC 61 FD | 	getqy	result2
17f14     FE 20 02 F6 | 	mov	local02, result2
17f18     0F 37 02 F6 | 	mov	local13, local01
17f1c     00 20 4E F2 | 	cmps	local02, #0 wz
17f20     1B 39 02 F6 | 	mov	local14, local13
17f24     19 38 66 F0 | 	shl	local14, #25
17f28     01 34 06 56 |  if_ne	mov	local12, #1
17f2c     1A 39 42 F5 | 	or	local14, local12
17f30     07 36 46 F0 | 	shr	local13, #7
17f34     00 80 00 FF 
17f38     00 36 16 F2 | 	cmp	local13, ##16777216 wc
17f3c     1C 00 90 CD |  if_b	jmp	#LR__2342
17f40     01 32 06 F1 | 	add	local11, #1
17f44     01 38 46 F0 | 	shr	local14, #1
17f48     1B 35 02 F6 | 	mov	local12, local13
17f4c     1F 34 66 F0 | 	shl	local12, #31
17f50     1A 39 42 F5 | 	or	local14, local12
17f54     01 36 46 F0 | 	shr	local13, #1
17f58     24 00 90 FD | 	jmp	#LR__2344
17f5c                 | LR__2342
17f5c     00 40 00 FF 
17f60     00 36 16 F2 | 	cmp	local13, ##8388608 wc
17f64     18 00 90 3D |  if_ae	jmp	#LR__2343
17f68     01 32 86 F1 | 	sub	local11, #1
17f6c     01 36 66 F0 | 	shl	local13, #1
17f70     1C 35 02 F6 | 	mov	local12, local14
17f74     1F 34 46 F0 | 	shr	local12, #31
17f78     1A 37 42 F5 | 	or	local13, local12
17f7c     01 38 66 F0 | 	shl	local14, #1
17f80                 | LR__2343
17f80                 | LR__2344
17f80     1B 13 02 F6 | 	mov	arg01, local13
17f84     1C 15 02 F6 | 	mov	arg02, local14
17f88     19 17 02 F6 | 	mov	arg03, local11
17f8c     13 19 02 F6 | 	mov	arg04, local05
17f90     08 2D B0 FD | 	call	#__system__pack_0400
17f94     F8 00 90 FD | 	jmp	#LR__2355
17f98                 | LR__2345
17f98     00 28 0E F2 | 	cmp	local06, #0 wz
17f9c     11 FB 01 56 |  if_ne	mov	result1, local03
17fa0     EC 00 90 5D |  if_ne	jmp	#LR__2355
17fa4     FF 30 0E F2 | 	cmp	local10, #255 wz
17fa8     00 F8 3F AF 
17fac     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
17fb0     DC 00 90 AD |  if_e	jmp	#LR__2355
17fb4     02 26 46 F5 | 	or	local05, #2
17fb8     00 12 06 F6 | 	mov	arg01, #0
17fbc     00 14 06 F6 | 	mov	arg02, #0
17fc0     15 17 02 F6 | 	mov	arg03, local07
17fc4     13 19 02 F6 | 	mov	arg04, local05
17fc8     D0 2C B0 FD | 	call	#__system__pack_0400
17fcc     C0 00 90 FD | 	jmp	#LR__2355
17fd0                 | LR__2346
17fd0     00 2E 0E F2 | 	cmp	local09, #0 wz
17fd4     12 FB 01 56 |  if_ne	mov	result1, local04
17fd8     B4 00 90 5D |  if_ne	jmp	#LR__2355
17fdc     13 19 02 F6 | 	mov	arg04, local05
17fe0     08 18 46 F5 | 	or	arg04, #8
17fe4     00 12 06 F6 | 	mov	arg01, #0
17fe8     00 14 06 F6 | 	mov	arg02, #0
17fec     00 16 06 F6 | 	mov	arg03, #0
17ff0     A8 2C B0 FD | 	call	#__system__pack_0400
17ff4     98 00 90 FD | 	jmp	#LR__2355
17ff8                 | LR__2347
17ff8     00 28 0E F2 | 	cmp	local06, #0 wz
17ffc     20 00 90 AD |  if_e	jmp	#LR__2350
18000     01 28 66 F0 | 	shl	local06, #1
18004     97 0A 48 FB | 	callpa	#(@LR__2349-@LR__2348)>>2,fcache_load_ptr_
18008                 | LR__2348
18008     00 40 00 FF 
1800c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
18010     01 2A 86 C1 |  if_b	sub	local07, #1
18014     01 28 66 C0 |  if_b	shl	local06, #1
18018     EC FF 9F CD |  if_b	jmp	#LR__2348
1801c                 | LR__2349
1801c     B8 FE 9F FD | 	jmp	#LR__2340
18020                 | LR__2350
18020     00 30 0E F2 | 	cmp	local10, #0 wz
18024     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
18028     00 F8 3F AF 
1802c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
18030     5C 00 90 AD |  if_e	jmp	#LR__2355
18034     13 19 02 F6 | 	mov	arg04, local05
18038     08 18 46 F5 | 	or	arg04, #8
1803c     00 12 06 F6 | 	mov	arg01, #0
18040     00 14 06 F6 | 	mov	arg02, #0
18044     00 16 06 F6 | 	mov	arg03, #0
18048     50 2C B0 FD | 	call	#__system__pack_0400
1804c     40 00 90 FD | 	jmp	#LR__2355
18050                 | LR__2351
18050     00 2E 0E F2 | 	cmp	local09, #0 wz
18054     20 00 90 AD |  if_e	jmp	#LR__2354
18058     01 2E 66 F0 | 	shl	local09, #1
1805c     97 0A 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
18060                 | LR__2352
18060     00 40 00 FF 
18064     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
18068     01 30 86 C1 |  if_b	sub	local10, #1
1806c     01 2E 66 C0 |  if_b	shl	local09, #1
18070     EC FF 9F CD |  if_b	jmp	#LR__2352
18074                 | LR__2353
18074     6C FE 9F FD | 	jmp	#LR__2341
18078                 | LR__2354
18078     02 26 46 F5 | 	or	local05, #2
1807c     00 12 06 F6 | 	mov	arg01, #0
18080     00 14 06 F6 | 	mov	arg02, #0
18084     00 16 06 F6 | 	mov	arg03, #0
18088     13 19 02 F6 | 	mov	arg04, local05
1808c     0C 2C B0 FD | 	call	#__system__pack_0400
18090                 | LR__2355
18090     A7 F0 03 F6 | 	mov	ptra, fp
18094     B2 00 A0 FD | 	call	#popregs_
18098                 | __system___float_div_ret
18098     2D 00 64 FD | 	ret
1809c                 | 
1809c                 | __system___float_cmp
1809c     00 C0 3F FF 
180a0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
180a4     00 C0 3F CF 
180a8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
180ac     0B FB 01 36 |  if_ae	mov	result1, arg03
180b0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
180b4     00 C0 7F FF 
180b8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
180bc     00 C0 7F CF 
180c0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
180c4     0B FB 01 36 |  if_ae	mov	result1, arg03
180c8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
180cc     00 12 56 F2 | 	cmps	arg01, #0 wc
180d0     2C 00 90 3D |  if_ae	jmp	#LR__2360
180d4     00 14 56 F2 | 	cmps	arg02, #0 wc
180d8     0A FB 01 C6 |  if_b	mov	result1, arg02
180dc     09 FB 81 C1 |  if_b	sub	result1, arg01
180e0     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
180e4     00 14 0E F2 | 	cmp	arg02, #0 wz
180e8     00 00 40 AF 
180ec     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
180f0     00 FA 05 A6 |  if_e	mov	result1, #0
180f4     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
180f8     01 FA 65 F6 | 	neg	result1, #1
180fc     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
18100                 | LR__2360
18100     00 14 56 F2 | 	cmps	arg02, #0 wc
18104     1C 00 90 3D |  if_ae	jmp	#LR__2361
18108     00 12 0E F2 | 	cmp	arg01, #0 wz
1810c     00 00 40 AF 
18110     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
18114     00 FA 05 A6 |  if_e	mov	result1, #0
18118     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1811c     01 FA 05 F6 | 	mov	result1, #1
18120     08 00 90 FD | 	jmp	#__system___float_cmp_ret
18124                 | LR__2361
18124     0A 13 82 F1 | 	sub	arg01, arg02
18128     09 FB 01 F6 | 	mov	result1, arg01
1812c                 | __system___float_cmp_ret
1812c     2D 00 64 FD | 	ret
18130                 | 
18130                 | __system___float_tointeger
18130     02 4A 05 F6 | 	mov	COUNT_, #2
18134     A8 00 A0 FD | 	call	#pushregs_
18138     50 00 B0 FD | 	call	#__system___float_Unpack
1813c     FF FF 7F FF 
18140     FF FD 55 F2 | 	cmps	result2, ##-1 wc
18144     34 00 90 CD |  if_b	jmp	#LR__2370
18148     1F FC 55 F2 | 	cmps	result2, #31 wc
1814c     2C 00 90 3D |  if_ae	jmp	#LR__2370
18150     02 FE 65 F0 | 	shl	result3, #2
18154     1E 1E 06 F6 | 	mov	local01, #30
18158     FE 1E 82 F1 | 	sub	local01, result2
1815c     0F FF 41 F0 | 	shr	result3, local01
18160     FF 20 02 F6 | 	mov	local02, result3
18164     0A 21 02 F1 | 	add	local02, arg02
18168     01 20 46 F0 | 	shr	local02, #1
1816c     00 FA 0D F2 | 	cmp	result1, #0 wz
18170     10 21 62 56 |  if_ne	neg	local02, local02
18174     10 FB 01 F6 | 	mov	result1, local02
18178     04 00 90 FD | 	jmp	#LR__2371
1817c                 | LR__2370
1817c     00 FA 05 F6 | 	mov	result1, #0
18180                 | LR__2371
18180     A7 F0 03 F6 | 	mov	ptra, fp
18184     B2 00 A0 FD | 	call	#popregs_
18188                 | __system___float_tointeger_ret
18188     2D 00 64 FD | 	ret
1818c                 | 
1818c                 | __system___float_Unpack
1818c     09 01 02 F6 | 	mov	_var01, arg01
18190     1F 00 46 F0 | 	shr	_var01, #31
18194     09 03 02 F6 | 	mov	_var02, arg01
18198     01 02 66 F0 | 	shl	_var02, #1
1819c     18 02 4E F0 | 	shr	_var02, #24 wz
181a0     17 13 06 F4 | 	bitl	arg01, #279
181a4     06 12 66 50 |  if_ne	shl	arg01, #6
181a8     1D 12 26 54 |  if_ne	bith	arg01, #29
181ac     1C 00 90 5D |  if_ne	jmp	#LR__2380
181b0     09 05 92 F7 | 	encod	_var03, arg01 wc
181b4     01 04 06 C1 |  if_b	add	_var03, #1
181b8     17 04 86 F1 | 	sub	_var03, #23
181bc     02 03 02 F6 | 	mov	_var02, _var03
181c0     07 FC 05 F6 | 	mov	result2, #7
181c4     02 FD 81 F1 | 	sub	result2, _var03
181c8     FE 12 62 F0 | 	shl	arg01, result2
181cc                 | LR__2380
181cc     7F 02 86 F1 | 	sub	_var02, #127
181d0     09 FF 01 F6 | 	mov	result3, arg01
181d4     00 FB 01 F6 | 	mov	result1, _var01
181d8     01 FD 01 F6 | 	mov	result2, _var02
181dc                 | __system___float_Unpack_ret
181dc     2D 00 64 FD | 	ret
181e0                 | 
181e0                 | __system___float_Pack
181e0     00 00 06 F6 | 	mov	_var01, #0
181e4     00 16 0E F2 | 	cmp	arg03, #0 wz
181e8     8C 00 90 AD |  if_e	jmp	#LR__2391
181ec     0B 03 92 F7 | 	encod	_var02, arg03 wc
181f0     01 02 06 C1 |  if_b	add	_var02, #1
181f4     21 00 06 F6 | 	mov	_var01, #33
181f8     01 01 82 F1 | 	sub	_var01, _var02
181fc     00 17 62 F0 | 	shl	arg03, _var01
18200     03 02 06 F6 | 	mov	_var02, #3
18204     00 03 82 F1 | 	sub	_var02, _var01
18208     01 15 02 F1 | 	add	arg02, _var02
1820c     0A 05 02 F6 | 	mov	_var03, arg02
18210     00 17 06 F1 | 	add	arg03, #256
18214     0B 03 02 F6 | 	mov	_var02, arg03
18218     FF 02 2E F5 | 	andn	_var02, #255 wz
1821c     01 04 06 A1 |  if_e	add	_var03, #1
18220     7F 04 06 F1 | 	add	_var03, #127
18224     FF FF 7F FF 
18228     E9 05 46 F3 | 	fges	_var03, ##-23
1822c     FF 04 66 F3 | 	fles	_var03, #255
18230     01 04 56 F2 | 	cmps	_var03, #1 wc
18234     1C 00 90 3D |  if_ae	jmp	#LR__2390
18238     01 16 46 F0 | 	shr	arg03, #1
1823c     1F 02 C6 F9 | 	decod	_var02, #31
18240     0B 03 02 F1 | 	add	_var02, arg03
18244     02 05 62 F6 | 	neg	_var03, _var03
18248     02 03 42 F0 | 	shr	_var02, _var03
1824c     01 17 02 F6 | 	mov	arg03, _var02
18250     00 04 06 F6 | 	mov	_var03, #0
18254                 | LR__2390
18254     09 FB 01 F6 | 	mov	result1, arg01
18258     1F FA 65 F0 | 	shl	result1, #31
1825c     02 03 02 F6 | 	mov	_var02, _var03
18260     17 02 66 F0 | 	shl	_var02, #23
18264     01 FB 41 F5 | 	or	result1, _var02
18268     0B 07 02 F6 | 	mov	_var04, arg03
1826c     09 06 46 F0 | 	shr	_var04, #9
18270     03 FB 41 F5 | 	or	result1, _var04
18274     04 00 90 FD | 	jmp	#__system___float_Pack_ret
18278                 | LR__2391
18278     00 FB 01 F6 | 	mov	result1, _var01
1827c                 | __system___float_Pack_ret
1827c     2D 00 64 FD | 	ret
18280                 | 
18280                 | __system___basic_print_float
18280     05 4A 05 F6 | 	mov	COUNT_, #5
18284     A8 00 A0 FD | 	call	#pushregs_
18288     09 1F 02 F6 | 	mov	local01, arg01
1828c     0A 21 02 F6 | 	mov	local02, arg02
18290     0B 23 0A F6 | 	mov	local03, arg03 wz
18294     0C 25 02 F6 | 	mov	local04, arg04
18298     14 00 90 5D |  if_ne	jmp	#LR__2400
1829c     23 24 0E F2 | 	cmp	local04, #35 wz
182a0     80 02 10 AF 
182a4     00 26 06 A6 |  if_e	mov	local05, ##537198592
182a8     1D 26 C6 59 |  if_ne	decod	local05, #29
182ac     13 23 02 F6 | 	mov	local03, local05
182b0                 | LR__2400
182b0     0F 13 02 F6 | 	mov	arg01, local01
182b4     C8 24 B0 FD | 	call	#__system___gettxfunc
182b8     FD 26 0A F6 | 	mov	local05, result1 wz
182bc     00 FA 05 A6 |  if_e	mov	result1, #0
182c0     13 13 02 56 |  if_ne	mov	arg01, local05
182c4     11 15 02 56 |  if_ne	mov	arg02, local03
182c8     10 17 02 56 |  if_ne	mov	arg03, local02
182cc     12 19 02 56 |  if_ne	mov	arg04, local04
182d0     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
182d4     A7 F0 03 F6 | 	mov	ptra, fp
182d8     B2 00 A0 FD | 	call	#popregs_
182dc                 | __system___basic_print_float_ret
182dc     2D 00 64 FD | 	ret
182e0                 | 
182e0                 | __system____builtin_atoi
182e0     07 4A 05 F6 | 	mov	COUNT_, #7
182e4     A8 00 A0 FD | 	call	#pushregs_
182e8                 | __system____builtin_atoi_enter
182e8     09 1F 02 F6 | 	mov	local01, arg01
182ec     0A 21 02 F6 | 	mov	local02, arg02
182f0     00 22 06 F6 | 	mov	local03, #0
182f4     00 24 06 F6 | 	mov	local04, #0
182f8     00 26 06 F6 | 	mov	local05, #0
182fc     97 08 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
18300                 | LR__2410
18300     0F 29 C2 FA | 	rdbyte	local06, local01
18304     20 28 0E F2 | 	cmp	local06, #32 wz
18308     01 1E 06 A1 |  if_e	add	local01, #1
1830c     F0 FF 9F AD |  if_e	jmp	#LR__2410
18310                 | LR__2411
18310     0F 2B C2 FA | 	rdbyte	local07, local01
18314                 | LR__2412
18314     2D 2A 0E F2 | 	cmp	local07, #45 wz
18318     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1831c     18 00 90 5D |  if_ne	jmp	#LR__2413
18320     01 1E 06 F1 | 	add	local01, #1
18324     2D 2A 0E F2 | 	cmp	local07, #45 wz
18328     01 28 06 A6 |  if_e	mov	local06, #1
1832c     14 27 C2 A2 |  if_e	subr	local05, local06
18330     0F 2B C2 FA | 	rdbyte	local07, local01
18334     DC FF 9F FD | 	jmp	#LR__2412
18338                 | LR__2413
18338     97 48 48 FB | 	callpa	#(@LR__2421-@LR__2414)>>2,fcache_load_ptr_
1833c                 | LR__2414
1833c                 | LR__2415
1833c     0F 2B C2 FA | 	rdbyte	local07, local01
18340     5F 2A 0E F2 | 	cmp	local07, #95 wz
18344     01 1E 06 F1 | 	add	local01, #1
18348     F0 FF 9F AD |  if_e	jmp	#LR__2415
1834c     30 2A 0E F2 | 	cmp	local07, #48 wz
18350     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
18354     00 24 06 A6 |  if_e	mov	local04, #0
18358     60 00 90 AD |  if_e	jmp	#LR__2420
1835c     31 2A 56 F2 | 	cmps	local07, #49 wc
18360     18 00 90 CD |  if_b	jmp	#LR__2416
18364     3A 2A 56 F2 | 	cmps	local07, #58 wc
18368     15 25 02 C6 |  if_b	mov	local04, local07
1836c     30 24 86 C1 |  if_b	sub	local04, #48
18370     00 20 0E C2 |  if_b	cmp	local02, #0 wz
18374     0A 20 06 86 |  if_c_and_z	mov	local02, #10
18378     40 00 90 CD |  if_b	jmp	#LR__2419
1837c                 | LR__2416
1837c     0B 20 56 F2 | 	cmps	local02, #11 wc
18380     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
18384     14 00 90 CD |  if_b	jmp	#LR__2417
18388     67 2A 56 F2 | 	cmps	local07, #103 wc
1838c     61 2A 86 C1 |  if_b	sub	local07, #97
18390     0A 24 06 C6 |  if_b	mov	local04, #10
18394     15 25 02 C1 |  if_b	add	local04, local07
18398     20 00 90 CD |  if_b	jmp	#LR__2418
1839c                 | LR__2417
1839c     0B 20 56 F2 | 	cmps	local02, #11 wc
183a0     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
183a4     24 00 90 CD |  if_b	jmp	#LR__2422
183a8     47 2A 56 F2 | 	cmps	local07, #71 wc
183ac     41 2A 86 C1 |  if_b	sub	local07, #65
183b0     0A 24 06 C6 |  if_b	mov	local04, #10
183b4     15 25 02 C1 |  if_b	add	local04, local07
183b8     10 00 90 3D |  if_ae	jmp	#LR__2422
183bc                 | LR__2418
183bc                 | LR__2419
183bc                 | LR__2420
183bc     11 21 02 FD | 	qmul	local02, local03
183c0     18 22 62 FD | 	getqx	local03
183c4     12 23 02 F1 | 	add	local03, local04
183c8     70 FF 9F FD | 	jmp	#LR__2414
183cc                 | LR__2421
183cc                 | LR__2422
183cc     00 20 0E F2 | 	cmp	local02, #0 wz
183d0     64 00 90 5D |  if_ne	jmp	#LR__2428
183d4     78 2A 0E F2 | 	cmp	local07, #120 wz
183d8     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
183dc     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
183e0     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
183e4     14 00 90 5D |  if_ne	jmp	#LR__2423
183e8     0F 13 02 F6 | 	mov	arg01, local01
183ec     10 14 06 F6 | 	mov	arg02, #16
183f0     EC FE BF FD | 	call	#__system____builtin_atoi
183f4     FD 22 02 F6 | 	mov	local03, result1
183f8     3C 00 90 FD | 	jmp	#LR__2427
183fc                 | LR__2423
183fc     62 2A 0E F2 | 	cmp	local07, #98 wz
18400     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
18404     14 00 90 5D |  if_ne	jmp	#LR__2424
18408     0F 13 02 F6 | 	mov	arg01, local01
1840c     02 14 06 F6 | 	mov	arg02, #2
18410     CC FE BF FD | 	call	#__system____builtin_atoi
18414     FD 22 02 F6 | 	mov	local03, result1
18418     1C 00 90 FD | 	jmp	#LR__2426
1841c                 | LR__2424
1841c     6F 2A 0E F2 | 	cmp	local07, #111 wz
18420     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
18424     10 00 90 5D |  if_ne	jmp	#LR__2425
18428     0F 13 02 F6 | 	mov	arg01, local01
1842c     08 14 06 F6 | 	mov	arg02, #8
18430     AC FE BF FD | 	call	#__system____builtin_atoi
18434     FD 22 02 F6 | 	mov	local03, result1
18438                 | LR__2425
18438                 | LR__2426
18438                 | LR__2427
18438                 | LR__2428
18438     00 26 0E F2 | 	cmp	local05, #0 wz
1843c     11 23 62 56 |  if_ne	neg	local03, local03
18440     11 FB 01 F6 | 	mov	result1, local03
18444     A7 F0 03 F6 | 	mov	ptra, fp
18448     B2 00 A0 FD | 	call	#popregs_
1844c                 | __system____builtin_atoi_ret
1844c     2D 00 64 FD | 	ret
18450                 | 
18450                 | __system____builtin_atof
18450     07 4A 05 F6 | 	mov	COUNT_, #7
18454     A8 00 A0 FD | 	call	#pushregs_
18458     09 1F 02 F6 | 	mov	local01, arg01
1845c     00 20 06 F6 | 	mov	local02, #0
18460     00 22 06 F6 | 	mov	local03, #0
18464     00 24 06 F6 | 	mov	local04, #0
18468     00 26 06 F6 | 	mov	local05, #0
1846c     97 08 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
18470                 | LR__2430
18470     0F 17 C2 FA | 	rdbyte	arg03, local01
18474     20 16 0E F2 | 	cmp	arg03, #32 wz
18478     01 1E 06 A1 |  if_e	add	local01, #1
1847c     F0 FF 9F AD |  if_e	jmp	#LR__2430
18480                 | LR__2431
18480     0F 29 C2 FA | 	rdbyte	local06, local01
18484                 | LR__2432
18484     2B 28 0E F2 | 	cmp	local06, #43 wz
18488     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1848c     14 00 90 5D |  if_ne	jmp	#LR__2433
18490     2D 28 0E F2 | 	cmp	local06, #45 wz
18494     1F 24 E6 A4 |  if_e	bitnot	local04, #31
18498     01 1E 06 F1 | 	add	local01, #1
1849c     0F 29 C2 FA | 	rdbyte	local06, local01
184a0     E0 FF 9F FD | 	jmp	#LR__2432
184a4                 | LR__2433
184a4                 | LR__2434
184a4     97 08 48 FB | 	callpa	#(@LR__2436-@LR__2435)>>2,fcache_load_ptr_
184a8                 | LR__2435
184a8     0F 29 C2 FA | 	rdbyte	local06, local01
184ac     5F 28 0E F2 | 	cmp	local06, #95 wz
184b0     01 1E 06 F1 | 	add	local01, #1
184b4     F0 FF 9F AD |  if_e	jmp	#LR__2435
184b8                 | LR__2436
184b8     00 28 0E F2 | 	cmp	local06, #0 wz
184bc     5C 00 90 AD |  if_e	jmp	#LR__2438
184c0     30 28 56 F2 | 	cmps	local06, #48 wc
184c4     44 00 90 CD |  if_b	jmp	#LR__2437
184c8     3A 28 56 F2 | 	cmps	local06, #58 wc
184cc     3C 00 90 3D |  if_ae	jmp	#LR__2437
184d0     10 13 02 F6 | 	mov	arg01, local02
184d4     00 90 20 FF 
184d8     00 14 06 F6 | 	mov	arg02, ##1092616192
184dc     88 F7 BF FD | 	call	#__system___float_mul
184e0     FD 20 02 F6 | 	mov	local02, result1
184e4     30 28 86 F1 | 	sub	local06, #48
184e8     14 13 02 F6 | 	mov	arg01, local06
184ec     4C F4 BF FD | 	call	#__system___float_fromuns
184f0     FD 14 02 F6 | 	mov	arg02, result1
184f4     10 13 02 F6 | 	mov	arg01, local02
184f8     74 F4 BF FD | 	call	#__system___float_add
184fc     FD 20 02 F6 | 	mov	local02, result1
18500     00 26 0E F2 | 	cmp	local05, #0 wz
18504     01 22 86 51 |  if_ne	sub	local03, #1
18508     98 FF 9F FD | 	jmp	#LR__2434
1850c                 | LR__2437
1850c     2E 28 0E F2 | 	cmp	local06, #46 wz
18510     00 26 0E A2 |  if_e	cmp	local05, #0 wz
18514     01 26 06 A6 |  if_e	mov	local05, #1
18518     88 FF 9F AD |  if_e	jmp	#LR__2434
1851c                 | LR__2438
1851c     45 28 0E F2 | 	cmp	local06, #69 wz
18520     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
18524     18 00 90 5D |  if_ne	jmp	#LR__2439
18528     0F 13 02 F6 | 	mov	arg01, local01
1852c     00 14 06 F6 | 	mov	arg02, #0
18530     AC FD BF FD | 	call	#__system____builtin_atoi
18534     11 FB 01 F1 | 	add	result1, local03
18538     FD 2A 02 F6 | 	mov	local07, result1
1853c     04 00 90 FD | 	jmp	#LR__2440
18540                 | LR__2439
18540     11 2B 02 F6 | 	mov	local07, local03
18544                 | LR__2440
18544     15 17 02 F6 | 	mov	arg03, local07
18548     10 13 02 F6 | 	mov	arg01, local02
1854c     00 90 20 FF 
18550     00 14 06 F6 | 	mov	arg02, ##1092616192
18554     44 04 B0 FD | 	call	#__system___float_pow_n
18558     12 FB 61 F5 | 	xor	result1, local04
1855c     A7 F0 03 F6 | 	mov	ptra, fp
18560     B2 00 A0 FD | 	call	#popregs_
18564                 | __system____builtin_atof_ret
18564     2D 00 64 FD | 	ret
18568                 | 
18568                 | __system____builtin_ilogb
18568     20 FC BF FD | 	call	#__system___float_Unpack
1856c     00 FE 0D F2 | 	cmp	result3, #0 wz
18570     00 00 40 AF 
18574     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
18578     24 00 90 AD |  if_e	jmp	#LR__2451
1857c     80 FC 0D F2 | 	cmp	result2, #128 wz
18580     18 00 90 5D |  if_ne	jmp	#LR__2450
18584     00 00 10 FF 
18588     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1858c     1E FA CD A9 |  if_e	bmask	result1, #30
18590     0C 00 90 AD |  if_e	jmp	#LR__2451
18594     1F FA C5 F9 | 	decod	result1, #31
18598     04 00 90 FD | 	jmp	#LR__2451
1859c                 | LR__2450
1859c     FE FA 01 F6 | 	mov	result1, result2
185a0                 | LR__2451
185a0                 | __system____builtin_ilogb_ret
185a0     2D 00 64 FD | 	ret
185a4                 | 
185a4                 | __system____builtin_sinf
185a4     03 4A 05 F6 | 	mov	COUNT_, #3
185a8     A8 00 A0 FD | 	call	#pushregs_
185ac     09 1F 02 F6 | 	mov	local01, arg01
185b0     66 E6 1E FF 
185b4     CD 14 06 F6 | 	mov	arg02, ##1036831949
185b8     01 16 06 F6 | 	mov	arg03, #1
185bc     DC FA BF FD | 	call	#__system___float_cmp
185c0     00 FA 55 F2 | 	cmps	result1, #0 wc
185c4     5C 00 90 3D |  if_ae	jmp	#LR__2460
185c8     0F 13 02 F6 | 	mov	arg01, local01
185cc     66 E6 5E FF 
185d0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
185d4     01 16 66 F6 | 	neg	arg03, #1
185d8     C0 FA BF FD | 	call	#__system___float_cmp
185dc     01 FA 55 F2 | 	cmps	result1, #1 wc
185e0     40 00 90 CD |  if_b	jmp	#LR__2460
185e4     0F 13 02 F6 | 	mov	arg01, local01
185e8     0F 15 02 F6 | 	mov	arg02, local01
185ec     78 F6 BF FD | 	call	#__system___float_mul
185f0     FD 12 02 F6 | 	mov	arg01, result1
185f4     0F 15 02 F6 | 	mov	arg02, local01
185f8     6C F6 BF FD | 	call	#__system___float_mul
185fc     FD 12 02 F6 | 	mov	arg01, result1
18600     00 60 20 FF 
18604     00 14 06 F6 | 	mov	arg02, ##1086324736
18608     60 F8 BF FD | 	call	#__system___float_div
1860c     FD 14 02 F6 | 	mov	arg02, result1
18610     0F 13 02 F6 | 	mov	arg01, local01
18614     1F 14 E6 F4 | 	bitnot	arg02, #31
18618     54 F3 BF FD | 	call	#__system___float_add
1861c     FD 20 02 F6 | 	mov	local02, result1
18620     54 00 90 FD | 	jmp	#LR__2461
18624                 | LR__2460
18624     0F 13 02 F6 | 	mov	arg01, local01
18628     7C 91 26 FF 
1862c     83 15 06 F6 | 	mov	arg02, ##1294137731
18630     34 F6 BF FD | 	call	#__system___float_mul
18634     FD 12 02 F6 | 	mov	arg01, result1
18638     00 14 06 F6 | 	mov	arg02, #0
1863c     F0 FA BF FD | 	call	#__system___float_tointeger
18640     02 FA 65 F0 | 	shl	result1, #2
18644     00 00 A0 FF 
18648     FD 00 48 FD | 	qrotate	##1073741824, result1
1864c     19 12 62 FD | 	getqy	arg01
18650     09 13 52 F6 | 	abs	arg01, arg01 wc
18654     1F 22 C6 C9 |  if_b	decod	local03, #31
18658     00 22 06 36 |  if_ae	mov	local03, #0
1865c     DC F2 BF FD | 	call	#__system___float_fromuns
18660     11 FB 61 F5 | 	xor	result1, local03
18664     FD 12 02 F6 | 	mov	arg01, result1
18668     00 40 27 FF 
1866c     00 14 06 F6 | 	mov	arg02, ##1317011456
18670     F8 F7 BF FD | 	call	#__system___float_div
18674     FD 20 02 F6 | 	mov	local02, result1
18678                 | LR__2461
18678     10 FB 01 F6 | 	mov	result1, local02
1867c     A7 F0 03 F6 | 	mov	ptra, fp
18680     B2 00 A0 FD | 	call	#popregs_
18684                 | __system____builtin_sinf_ret
18684     2D 00 64 FD | 	ret
18688                 | 
18688                 | __system____builtin_exp2f
18688     04 4A 05 F6 | 	mov	COUNT_, #4
1868c     A8 00 A0 FD | 	call	#pushregs_
18690     09 1F 02 F6 | 	mov	local01, arg01
18694     00 7F 21 FF 
18698     00 14 06 F6 | 	mov	arg02, ##1123942400
1869c     01 16 66 F6 | 	neg	arg03, #1
186a0     F8 F9 BF FD | 	call	#__system___float_cmp
186a4     00 FA 55 F2 | 	cmps	result1, #0 wc
186a8     00 C0 3F 3F 
186ac     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
186b0     DC 00 90 3D |  if_ae	jmp	#LR__2471
186b4     0F 13 02 F6 | 	mov	arg01, local01
186b8     00 7F 61 FF 
186bc     00 14 06 F6 | 	mov	arg02, ##-1023541248
186c0     01 16 06 F6 | 	mov	arg03, #1
186c4     D4 F9 BF FD | 	call	#__system___float_cmp
186c8     00 FA 55 F2 | 	cmps	result1, #0 wc
186cc     00 FA 05 C6 |  if_b	mov	result1, #0
186d0     BC 00 90 CD |  if_b	jmp	#LR__2471
186d4     0F 13 02 F6 | 	mov	arg01, local01
186d8     00 14 06 F6 | 	mov	arg02, #0
186dc     50 FA BF FD | 	call	#__system___float_tointeger
186e0     FD 20 02 F6 | 	mov	local02, result1
186e4     10 13 52 F6 | 	abs	arg01, local02 wc
186e8     1F 22 C6 C9 |  if_b	decod	local03, #31
186ec     00 22 06 36 |  if_ae	mov	local03, #0
186f0     48 F2 BF FD | 	call	#__system___float_fromuns
186f4     11 FB 61 F5 | 	xor	result1, local03
186f8     FD 14 02 F6 | 	mov	arg02, result1
186fc     0F 13 02 F6 | 	mov	arg01, local01
18700     1F 14 E6 F4 | 	bitnot	arg02, #31
18704     68 F2 BF FD | 	call	#__system___float_add
18708     FD 24 02 F6 | 	mov	local04, result1
1870c     12 13 02 F6 | 	mov	arg01, local04
18710     00 14 06 F6 | 	mov	arg02, #0
18714     01 16 06 F6 | 	mov	arg03, #1
18718     80 F9 BF FD | 	call	#__system___float_cmp
1871c     00 FA 55 F2 | 	cmps	result1, #0 wc
18720     18 00 90 3D |  if_ae	jmp	#LR__2470
18724     12 13 02 F6 | 	mov	arg01, local04
18728     00 C0 1F FF 
1872c     00 14 06 F6 | 	mov	arg02, ##1065353216
18730     3C F2 BF FD | 	call	#__system___float_add
18734     FD 24 02 F6 | 	mov	local04, result1
18738     01 20 86 F1 | 	sub	local02, #1
1873c                 | LR__2470
1873c     7F 20 06 F1 | 	add	local02, #127
18740     17 20 66 F0 | 	shl	local02, #23
18744     12 13 02 F6 | 	mov	arg01, local04
18748     00 80 26 FF 
1874c     00 14 06 F6 | 	mov	arg02, ##1291845632
18750     14 F5 BF FD | 	call	#__system___float_mul
18754     FD 12 02 F6 | 	mov	arg01, result1
18758     00 14 06 F6 | 	mov	arg02, #0
1875c     D0 F9 BF FD | 	call	#__system___float_tointeger
18760     FD 24 0A F6 | 	mov	local04, result1 wz
18764     10 FB 01 A6 |  if_e	mov	result1, local02
18768     24 00 90 AD |  if_e	jmp	#LR__2471
1876c     3E 24 26 F4 | 	bith	local04, #62
18770     0F 24 62 FD | 	qexp	local04
18774     10 13 02 F6 | 	mov	arg01, local02
18778     18 14 62 FD | 	getqx	arg02
1877c     01 14 06 F1 | 	add	arg02, #1
18780     01 14 46 F0 | 	shr	arg02, #1
18784     00 80 1F FF 
18788     00 14 06 F1 | 	add	arg02, ##1056964608
1878c     D8 F4 BF FD | 	call	#__system___float_mul
18790                 | LR__2471
18790     A7 F0 03 F6 | 	mov	ptra, fp
18794     B2 00 A0 FD | 	call	#popregs_
18798                 | __system____builtin_exp2f_ret
18798     2D 00 64 FD | 	ret
1879c                 | 
1879c                 | __system____builtin_log2f
1879c     06 4A 05 F6 | 	mov	COUNT_, #6
187a0     A8 00 A0 FD | 	call	#pushregs_
187a4     09 1F 02 F6 | 	mov	local01, arg01
187a8     09 21 0A F6 | 	mov	local02, arg01 wz
187ac     00 00 40 5F 
187b0     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
187b4     00 40 00 AF 
187b8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
187bc     08 01 90 AD |  if_e	jmp	#LR__2484
187c0     00 20 56 F2 | 	cmps	local02, #0 wc
187c4     00 E0 3F CF 
187c8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
187cc     F8 00 90 CD |  if_b	jmp	#LR__2484
187d0     0F 13 02 F6 | 	mov	arg01, local01
187d4     00 90 20 FF 
187d8     00 14 06 F6 | 	mov	arg02, ##1092616192
187dc     01 16 06 F6 | 	mov	arg03, #1
187e0     B8 F8 BF FD | 	call	#__system___float_cmp
187e4     00 FA 0D F2 | 	cmp	result1, #0 wz
187e8     4D 2A 20 AF 
187ec     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
187f0     D4 00 90 AD |  if_e	jmp	#LR__2484
187f4     0F 13 02 F6 | 	mov	arg01, local01
187f8     FC 16 20 FF 
187fc     54 14 06 F6 | 	mov	arg02, ##1076754516
18800     01 16 06 F6 | 	mov	arg03, #1
18804     94 F8 BF FD | 	call	#__system___float_cmp
18808     00 FA 0D F2 | 	cmp	result1, #0 wz
1880c     55 DC 1F AF 
18810     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
18814     B0 00 90 AD |  if_e	jmp	#LR__2484
18818     10 23 02 F6 | 	mov	local03, local02
1881c     17 22 46 F0 | 	shr	local03, #23
18820     11 23 E2 F8 | 	getbyte	local03, local03, #0
18824     17 21 06 F4 | 	bitl	local02, #279
18828     10 25 02 F6 | 	mov	local04, local02
1882c     FF 22 0E F2 | 	cmp	local03, #255 wz
18830     1C 00 90 5D |  if_ne	jmp	#LR__2480
18834     00 24 0E F2 | 	cmp	local04, #0 wz
18838     00 C0 3F 5F 
1883c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
18840     00 E0 3F AF 
18844     00 26 06 A6 |  if_e	mov	local05, ##2143289344
18848     13 FB 01 F6 | 	mov	result1, local05
1884c     78 00 90 FD | 	jmp	#LR__2484
18850                 | LR__2480
18850     00 22 0E F2 | 	cmp	local03, #0 wz
18854     17 24 26 54 |  if_ne	bith	local04, #23
18858     7F 22 86 51 |  if_ne	sub	local03, #127
1885c     28 00 90 5D |  if_ne	jmp	#LR__2483
18860     00 24 0E F2 | 	cmp	local04, #0 wz
18864     00 40 00 AF 
18868     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1886c     58 00 90 AD |  if_e	jmp	#LR__2484
18870     7E 22 66 F6 | 	neg	local03, #126
18874     97 08 48 FB | 	callpa	#(@LR__2482-@LR__2481)>>2,fcache_load_ptr_
18878                 | LR__2481
18878     17 24 2E F4 | 	testbn	local04, #23 wz
1887c     01 24 66 A0 |  if_e	shl	local04, #1
18880     01 22 06 A1 |  if_e	add	local03, #1
18884     F0 FF 9F AD |  if_e	jmp	#LR__2481
18888                 | LR__2482
18888                 | LR__2483
18888     0E 24 62 FD | 	qlog	local04
1888c     01 22 86 F1 | 	sub	local03, #1
18890     11 13 52 F6 | 	abs	arg01, local03 wc
18894     1F 28 C6 C9 |  if_b	decod	local06, #31
18898     00 28 06 36 |  if_ae	mov	local06, #0
1889c     18 26 62 FD | 	getqx	local05
188a0     9B 26 06 F4 | 	bitl	local05, #155
188a4     08 26 06 F1 | 	add	local05, #8
188a8     04 26 46 F0 | 	shr	local05, #4
188ac     00 C0 1F FF 
188b0     00 26 06 F1 | 	add	local05, ##1065353216
188b4     84 F0 BF FD | 	call	#__system___float_fromuns
188b8     14 FB 61 F5 | 	xor	result1, local06
188bc     FD 14 02 F6 | 	mov	arg02, result1
188c0     13 13 02 F6 | 	mov	arg01, local05
188c4     A8 F0 BF FD | 	call	#__system___float_add
188c8                 | LR__2484
188c8     A7 F0 03 F6 | 	mov	ptra, fp
188cc     B2 00 A0 FD | 	call	#popregs_
188d0                 | __system____builtin_log2f_ret
188d0     2D 00 64 FD | 	ret
188d4                 | 
188d4                 | __system____builtin_powf
188d4     04 4A 05 F6 | 	mov	COUNT_, #4
188d8     A8 00 A0 FD | 	call	#pushregs_
188dc     09 1F 02 F6 | 	mov	local01, arg01
188e0     0A 21 02 F6 | 	mov	local02, arg02
188e4     10 13 02 F6 | 	mov	arg01, local02
188e8     00 14 06 F6 | 	mov	arg02, #0
188ec     40 F8 BF FD | 	call	#__system___float_tointeger
188f0     FD 22 02 F6 | 	mov	local03, result1
188f4     11 13 52 F6 | 	abs	arg01, local03 wc
188f8     1F 24 C6 C9 |  if_b	decod	local04, #31
188fc     00 24 06 36 |  if_ae	mov	local04, #0
18900     38 F0 BF FD | 	call	#__system___float_fromuns
18904     12 FB 61 F5 | 	xor	result1, local04
18908     FD 12 02 F6 | 	mov	arg01, result1
1890c     10 15 02 F6 | 	mov	arg02, local02
18910     01 16 06 F6 | 	mov	arg03, #1
18914     84 F7 BF FD | 	call	#__system___float_cmp
18918     00 FA 0D F2 | 	cmp	result1, #0 wz
1891c     18 00 90 5D |  if_ne	jmp	#LR__2490
18920     00 C0 1F FF 
18924     00 12 06 F6 | 	mov	arg01, ##1065353216
18928     0F 15 02 F6 | 	mov	arg02, local01
1892c     11 17 02 F6 | 	mov	arg03, local03
18930     68 00 B0 FD | 	call	#__system___float_pow_n
18934     58 00 90 FD | 	jmp	#LR__2491
18938                 | LR__2490
18938     0F 13 02 F6 | 	mov	arg01, local01
1893c     00 14 06 F6 | 	mov	arg02, #0
18940     01 16 06 F6 | 	mov	arg03, #1
18944     54 F7 BF FD | 	call	#__system___float_cmp
18948     00 FA 55 F2 | 	cmps	result1, #0 wc
1894c     00 E0 3F CF 
18950     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18954     38 00 90 CD |  if_b	jmp	#LR__2491
18958     0F 13 02 F6 | 	mov	arg01, local01
1895c     00 14 06 F6 | 	mov	arg02, #0
18960     01 16 06 F6 | 	mov	arg03, #1
18964     34 F7 BF FD | 	call	#__system___float_cmp
18968     00 FA 0D F2 | 	cmp	result1, #0 wz
1896c     00 FA 05 A6 |  if_e	mov	result1, #0
18970     1C 00 90 AD |  if_e	jmp	#LR__2491
18974     0F 13 02 F6 | 	mov	arg01, local01
18978     20 FE BF FD | 	call	#__system____builtin_log2f
1897c     FD 12 02 F6 | 	mov	arg01, result1
18980     10 15 02 F6 | 	mov	arg02, local02
18984     E0 F2 BF FD | 	call	#__system___float_mul
18988     FD 12 02 F6 | 	mov	arg01, result1
1898c     F8 FC BF FD | 	call	#__system____builtin_exp2f
18990                 | LR__2491
18990     A7 F0 03 F6 | 	mov	ptra, fp
18994     B2 00 A0 FD | 	call	#popregs_
18998                 | __system____builtin_powf_ret
18998     2D 00 64 FD | 	ret
1899c                 | 
1899c                 | __system___float_pow_n
1899c     05 4A 05 F6 | 	mov	COUNT_, #5
189a0     A8 00 A0 FD | 	call	#pushregs_
189a4     09 1F 02 F6 | 	mov	local01, arg01
189a8     0A 21 02 F6 | 	mov	local02, arg02
189ac     0B 23 02 F6 | 	mov	local03, arg03
189b0     00 22 56 F2 | 	cmps	local03, #0 wc
189b4     18 00 90 3D |  if_ae	jmp	#LR__2500
189b8     01 24 06 F6 | 	mov	local04, #1
189bc     11 23 62 F6 | 	neg	local03, local03
189c0     00 22 56 F2 | 	cmps	local03, #0 wc
189c4     00 FA 05 C6 |  if_b	mov	result1, #0
189c8     94 00 90 CD |  if_b	jmp	#LR__2508
189cc     04 00 90 FD | 	jmp	#LR__2501
189d0                 | LR__2500
189d0     00 24 06 F6 | 	mov	local04, #0
189d4                 | LR__2501
189d4     00 C0 1F FF 
189d8     00 26 06 F6 | 	mov	local05, ##1065353216
189dc                 | LR__2502
189dc     01 22 56 F2 | 	cmps	local03, #1 wc
189e0     30 00 90 CD |  if_b	jmp	#LR__2504
189e4     01 22 CE F7 | 	test	local03, #1 wz
189e8     10 00 90 AD |  if_e	jmp	#LR__2503
189ec     13 13 02 F6 | 	mov	arg01, local05
189f0     10 15 02 F6 | 	mov	arg02, local02
189f4     70 F2 BF FD | 	call	#__system___float_mul
189f8     FD 26 02 F6 | 	mov	local05, result1
189fc                 | LR__2503
189fc     01 22 C6 F0 | 	sar	local03, #1
18a00     10 13 02 F6 | 	mov	arg01, local02
18a04     10 15 02 F6 | 	mov	arg02, local02
18a08     5C F2 BF FD | 	call	#__system___float_mul
18a0c     FD 20 02 F6 | 	mov	local02, result1
18a10     C8 FF 9F FD | 	jmp	#LR__2502
18a14                 | LR__2504
18a14     00 24 0E F2 | 	cmp	local04, #0 wz
18a18     14 00 90 AD |  if_e	jmp	#LR__2505
18a1c     0F 13 02 F6 | 	mov	arg01, local01
18a20     13 15 02 F6 | 	mov	arg02, local05
18a24     44 F4 BF FD | 	call	#__system___float_div
18a28     FD 26 02 F6 | 	mov	local05, result1
18a2c     2C 00 90 FD | 	jmp	#LR__2507
18a30                 | LR__2505
18a30     0F 13 02 F6 | 	mov	arg01, local01
18a34     00 C0 1F FF 
18a38     00 14 06 F6 | 	mov	arg02, ##1065353216
18a3c     01 16 06 F6 | 	mov	arg03, #1
18a40     58 F6 BF FD | 	call	#__system___float_cmp
18a44     00 FA 0D F2 | 	cmp	result1, #0 wz
18a48     10 00 90 AD |  if_e	jmp	#LR__2506
18a4c     0F 13 02 F6 | 	mov	arg01, local01
18a50     13 15 02 F6 | 	mov	arg02, local05
18a54     10 F2 BF FD | 	call	#__system___float_mul
18a58     FD 26 02 F6 | 	mov	local05, result1
18a5c                 | LR__2506
18a5c                 | LR__2507
18a5c     13 FB 01 F6 | 	mov	result1, local05
18a60                 | LR__2508
18a60     A7 F0 03 F6 | 	mov	ptra, fp
18a64     B2 00 A0 FD | 	call	#popregs_
18a68                 | __system___float_pow_n_ret
18a68     2D 00 64 FD | 	ret
18a6c                 | 
18a6c                 | __system___gc_ptrs
18a6c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
18a70     00 03 02 F6 | 	mov	_var02, _var01
18a74     F3 01 00 FF 
18a78     F8 03 06 F1 | 	add	_var02, ##255992
18a7c     00 FD 09 FB | 	rdlong	result2, _var01 wz
18a80     74 00 90 5D |  if_ne	jmp	#LR__2510
18a84     01 FD 01 F6 | 	mov	result2, _var02
18a88     00 FD 81 F1 | 	sub	result2, _var01
18a8c     00 03 58 FC | 	wrword	#1, _var01
18a90     00 FB 01 F6 | 	mov	result1, _var01
18a94     02 FA 05 F1 | 	add	result1, #2
18a98     36 00 80 FF 
18a9c     FD 20 59 FC | 	wrword	##27792, result1
18aa0     00 FB 01 F6 | 	mov	result1, _var01
18aa4     04 FA 05 F1 | 	add	result1, #4
18aa8     FD 00 58 FC | 	wrword	#0, result1
18aac     00 FB 01 F6 | 	mov	result1, _var01
18ab0     06 FA 05 F1 | 	add	result1, #6
18ab4     FD 02 58 FC | 	wrword	#1, result1
18ab8     10 00 06 F1 | 	add	_var01, #16
18abc     FE FC 51 F6 | 	abs	result2, result2 wc
18ac0     04 FC 45 F0 | 	shr	result2, #4
18ac4     FE FC 81 F6 | 	negc	result2, result2
18ac8     00 FD 51 FC | 	wrword	result2, _var01
18acc     00 FD 01 F6 | 	mov	result2, _var01
18ad0     02 FC 05 F1 | 	add	result2, #2
18ad4     36 00 80 FF 
18ad8     FE 1E 59 FC | 	wrword	##27791, result2
18adc     00 FD 01 F6 | 	mov	result2, _var01
18ae0     04 FC 05 F1 | 	add	result2, #4
18ae4     FE 00 58 FC | 	wrword	#0, result2
18ae8     00 FD 01 F6 | 	mov	result2, _var01
18aec     06 FC 05 F1 | 	add	result2, #6
18af0     FE 00 58 FC | 	wrword	#0, result2
18af4     10 00 86 F1 | 	sub	_var01, #16
18af8                 | LR__2510
18af8     00 FB 01 F6 | 	mov	result1, _var01
18afc     01 FD 01 F6 | 	mov	result2, _var02
18b00                 | __system___gc_ptrs_ret
18b00     2D 00 64 FD | 	ret
18b04                 | 
18b04                 | __system___gc_tryalloc
18b04     0B 4A 05 F6 | 	mov	COUNT_, #11
18b08     A8 00 A0 FD | 	call	#pushregs_
18b0c     09 1F 02 F6 | 	mov	local01, arg01
18b10     0A 21 02 F6 | 	mov	local02, arg02
18b14     54 FF BF FD | 	call	#__system___gc_ptrs
18b18     FD 22 02 F6 | 	mov	local03, result1
18b1c     FE 24 02 F6 | 	mov	local04, result2
18b20     11 27 02 F6 | 	mov	local05, local03
18b24     00 28 06 F6 | 	mov	local06, #0
18b28     97 1E 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
18b2c                 | LR__2520
18b2c     13 2B 02 F6 | 	mov	local07, local05
18b30     06 26 06 F1 | 	add	local05, #6
18b34     13 15 EA FA | 	rdword	arg02, local05 wz
18b38     11 13 02 F6 | 	mov	arg01, local03
18b3c     00 FA 05 A6 |  if_e	mov	result1, #0
18b40     04 14 66 50 |  if_ne	shl	arg02, #4
18b44     0A 13 02 51 |  if_ne	add	arg01, arg02
18b48     09 FB 01 56 |  if_ne	mov	result1, arg01
18b4c     FD 26 0A F6 | 	mov	local05, result1 wz
18b50     13 29 E2 5A |  if_ne	rdword	local06, local05
18b54     00 26 0E F2 | 	cmp	local05, #0 wz
18b58     12 27 52 52 |  if_ne	cmps	local05, local04 wc
18b5c     08 00 90 1D |  if_a	jmp	#LR__2522
18b60     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
18b64     C4 FF 9F 1D |  if_a	jmp	#LR__2520
18b68                 | LR__2521
18b68                 | LR__2522
18b68     00 26 0E F2 | 	cmp	local05, #0 wz
18b6c     13 FB 01 A6 |  if_e	mov	result1, local05
18b70     3C 01 90 AD |  if_e	jmp	#LR__2525
18b74     13 FD 01 F6 | 	mov	result2, local05
18b78     06 FC 05 F1 | 	add	result2, #6
18b7c     FE 2C E2 FA | 	rdword	local08, result2
18b80     14 1F 52 F2 | 	cmps	local01, local06 wc
18b84     C0 00 90 3D |  if_ae	jmp	#LR__2524
18b88     13 1F 52 FC | 	wrword	local01, local05
18b8c     13 13 02 F6 | 	mov	arg01, local05
18b90     0F 2D 02 F6 | 	mov	local08, local01
18b94     04 2C 66 F0 | 	shl	local08, #4
18b98     16 13 02 F1 | 	add	arg01, local08
18b9c     0F 29 82 F1 | 	sub	local06, local01
18ba0     09 29 52 FC | 	wrword	local06, arg01
18ba4     09 2D 02 F6 | 	mov	local08, arg01
18ba8     02 2C 06 F1 | 	add	local08, #2
18bac     36 00 80 FF 
18bb0     16 1F 59 FC | 	wrword	##27791, local08
18bb4     13 15 0A F6 | 	mov	arg02, local05 wz
18bb8     00 FA 05 A6 |  if_e	mov	result1, #0
18bbc     11 15 82 51 |  if_ne	sub	arg02, local03
18bc0     04 14 46 50 |  if_ne	shr	arg02, #4
18bc4     0A FB 01 56 |  if_ne	mov	result1, arg02
18bc8     09 2D 02 F6 | 	mov	local08, arg01
18bcc     04 2C 06 F1 | 	add	local08, #4
18bd0     16 FB 51 FC | 	wrword	result1, local08
18bd4     13 2D 02 F6 | 	mov	local08, local05
18bd8     06 2C 06 F1 | 	add	local08, #6
18bdc     09 15 02 F6 | 	mov	arg02, arg01
18be0     16 2D E2 FA | 	rdword	local08, local08
18be4     06 14 06 F1 | 	add	arg02, #6
18be8     0A 2D 52 FC | 	wrword	local08, arg02
18bec     09 2F 02 F6 | 	mov	local09, arg01
18bf0     17 15 0A F6 | 	mov	arg02, local09 wz
18bf4     00 FA 05 A6 |  if_e	mov	result1, #0
18bf8     11 15 82 51 |  if_ne	sub	arg02, local03
18bfc     04 14 46 50 |  if_ne	shr	arg02, #4
18c00     0A FB 01 56 |  if_ne	mov	result1, arg02
18c04     FD 2C 02 F6 | 	mov	local08, result1
18c08     09 31 EA FA | 	rdword	local10, arg01 wz
18c0c     00 FA 05 A6 |  if_e	mov	result1, #0
18c10     04 30 66 50 |  if_ne	shl	local10, #4
18c14     18 13 02 51 |  if_ne	add	arg01, local10
18c18     09 FB 01 56 |  if_ne	mov	result1, arg01
18c1c     FD 32 0A F6 | 	mov	local11, result1 wz
18c20     24 00 90 AD |  if_e	jmp	#LR__2523
18c24     12 33 52 F2 | 	cmps	local11, local04 wc
18c28     1C 00 90 3D |  if_ae	jmp	#LR__2523
18c2c     17 15 0A F6 | 	mov	arg02, local09 wz
18c30     00 FA 05 A6 |  if_e	mov	result1, #0
18c34     11 15 82 51 |  if_ne	sub	arg02, local03
18c38     04 14 46 50 |  if_ne	shr	arg02, #4
18c3c     0A FB 01 56 |  if_ne	mov	result1, arg02
18c40     04 32 06 F1 | 	add	local11, #4
18c44     19 FB 51 FC | 	wrword	result1, local11
18c48                 | LR__2523
18c48                 | LR__2524
18c48     06 2A 06 F1 | 	add	local07, #6
18c4c     15 2D 52 FC | 	wrword	local08, local07
18c50     36 00 00 FF 
18c54     80 2E 06 F6 | 	mov	local09, ##27776
18c58     10 2F 42 F5 | 	or	local09, local02
18c5c     00 FA 05 F6 | 	mov	result1, #0
18c60     01 FA 61 FD | 	cogid	result1
18c64     FD 2E 42 F5 | 	or	local09, result1
18c68     13 33 02 F6 | 	mov	local11, local05
18c6c     02 32 06 F1 | 	add	local11, #2
18c70     19 2F 52 FC | 	wrword	local09, local11
18c74     11 2F 02 F6 | 	mov	local09, local03
18c78     08 2E 06 F1 | 	add	local09, #8
18c7c     13 33 02 F6 | 	mov	local11, local05
18c80     17 2F E2 FA | 	rdword	local09, local09
18c84     06 32 06 F1 | 	add	local11, #6
18c88     19 2F 52 FC | 	wrword	local09, local11
18c8c     13 15 0A F6 | 	mov	arg02, local05 wz
18c90     00 FA 05 A6 |  if_e	mov	result1, #0
18c94     11 15 82 51 |  if_ne	sub	arg02, local03
18c98     04 14 46 50 |  if_ne	shr	arg02, #4
18c9c     0A FB 01 56 |  if_ne	mov	result1, arg02
18ca0     08 22 06 F1 | 	add	local03, #8
18ca4     11 FB 51 FC | 	wrword	result1, local03
18ca8     08 26 06 F1 | 	add	local05, #8
18cac     13 FB 01 F6 | 	mov	result1, local05
18cb0                 | LR__2525
18cb0     A7 F0 03 F6 | 	mov	ptra, fp
18cb4     B2 00 A0 FD | 	call	#popregs_
18cb8                 | __system___gc_tryalloc_ret
18cb8     2D 00 64 FD | 	ret
18cbc                 | 
18cbc                 | __system___gc_alloc_managed
18cbc     01 4A 05 F6 | 	mov	COUNT_, #1
18cc0     A8 00 A0 FD | 	call	#pushregs_
18cc4     09 1F 02 F6 | 	mov	local01, arg01
18cc8     00 14 06 F6 | 	mov	arg02, #0
18ccc     1C 00 B0 FD | 	call	#__system___gc_doalloc
18cd0     FD 14 0A F6 | 	mov	arg02, result1 wz
18cd4     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
18cd8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
18cdc     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
18ce0     A7 F0 03 F6 | 	mov	ptra, fp
18ce4     B2 00 A0 FD | 	call	#popregs_
18ce8                 | __system___gc_alloc_managed_ret
18ce8     2D 00 64 FD | 	ret
18cec                 | 
18cec                 | __system___gc_doalloc
18cec     06 4A 05 F6 | 	mov	COUNT_, #6
18cf0     A8 00 A0 FD | 	call	#pushregs_
18cf4     09 1F 0A F6 | 	mov	local01, arg01 wz
18cf8     0A 21 02 F6 | 	mov	local02, arg02
18cfc     00 FA 05 A6 |  if_e	mov	result1, #0
18d00     8C 00 90 AD |  if_e	jmp	#LR__2537
18d04     17 1E 06 F1 | 	add	local01, #23
18d08     0F 1E 26 F5 | 	andn	local01, #15
18d0c     04 1E 46 F0 | 	shr	local01, #4
18d10     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18d14     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18d18     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18d1c     34 C5 BF FD | 	call	#__system___lockmem
18d20     0F 13 02 F6 | 	mov	arg01, local01
18d24     10 15 02 F6 | 	mov	arg02, local02
18d28     D8 FD BF FD | 	call	#__system___gc_tryalloc
18d2c     FD 22 0A F6 | 	mov	local03, result1 wz
18d30     14 00 90 5D |  if_ne	jmp	#LR__2530
18d34     70 03 B0 FD | 	call	#__system___gc_docollect
18d38     0F 13 02 F6 | 	mov	arg01, local01
18d3c     10 15 02 F6 | 	mov	arg02, local02
18d40     C0 FD BF FD | 	call	#__system___gc_tryalloc
18d44     FD 22 02 F6 | 	mov	local03, result1
18d48                 | LR__2530
18d48     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18d4c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18d50     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18d54     09 01 68 FC | 	wrlong	#0, arg01
18d58     00 22 0E F2 | 	cmp	local03, #0 wz
18d5c     2C 00 90 AD |  if_e	jmp	#LR__2536
18d60     04 1E 66 F0 | 	shl	local01, #4
18d64     08 1E 86 F1 | 	sub	local01, #8
18d68     0F 25 52 F6 | 	abs	local04, local01 wc
18d6c     02 24 46 F0 | 	shr	local04, #2
18d70     12 27 8A F6 | 	negc	local05, local04 wz
18d74     11 29 02 F6 | 	mov	local06, local03
18d78     10 00 90 AD |  if_e	jmp	#LR__2535
18d7c     97 06 48 FB | 	callpa	#(@LR__2533-@LR__2531)>>2,fcache_load_ptr_
18d80                 | LR__2531
18d80     13 05 D8 FC | 	rep	@LR__2534, local05
18d84                 | LR__2532
18d84     14 01 68 FC | 	wrlong	#0, local06
18d88     04 28 06 F1 | 	add	local06, #4
18d8c                 | LR__2533
18d8c                 | LR__2534
18d8c                 | LR__2535
18d8c                 | LR__2536
18d8c     11 FB 01 F6 | 	mov	result1, local03
18d90                 | LR__2537
18d90     A7 F0 03 F6 | 	mov	ptra, fp
18d94     B2 00 A0 FD | 	call	#popregs_
18d98                 | __system___gc_doalloc_ret
18d98     2D 00 64 FD | 	ret
18d9c                 | 
18d9c                 | __system___gc_isvalidptr
18d9c     F8 16 06 F4 | 	bitl	arg03, #248
18da0     08 16 86 F1 | 	sub	arg03, #8
18da4     09 17 52 F2 | 	cmps	arg03, arg01 wc
18da8     08 00 90 CD |  if_b	jmp	#LR__2540
18dac     0A 17 52 F2 | 	cmps	arg03, arg02 wc
18db0     08 00 90 CD |  if_b	jmp	#LR__2541
18db4                 | LR__2540
18db4     00 FA 05 F6 | 	mov	result1, #0
18db8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
18dbc                 | LR__2541
18dbc     0B 01 02 F6 | 	mov	_var01, arg03
18dc0     09 01 62 F5 | 	xor	_var01, arg01
18dc4     0F 00 CE F7 | 	test	_var01, #15 wz
18dc8     00 FA 05 56 |  if_ne	mov	result1, #0
18dcc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
18dd0     0B 01 02 F6 | 	mov	_var01, arg03
18dd4     02 00 06 F1 | 	add	_var01, #2
18dd8     00 01 E2 FA | 	rdword	_var01, _var01
18ddc     7F 00 00 FF 
18de0     C0 01 06 F5 | 	and	_var01, ##65472
18de4     36 00 00 FF 
18de8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
18dec     00 FA 05 56 |  if_ne	mov	result1, #0
18df0     0B FB 01 A6 |  if_e	mov	result1, arg03
18df4                 | __system___gc_isvalidptr_ret
18df4     2D 00 64 FD | 	ret
18df8                 | 
18df8                 | __system___gc_free
18df8     09 17 02 F6 | 	mov	arg03, arg01
18dfc     6C FC BF FD | 	call	#__system___gc_ptrs
18e00     FD 12 02 F6 | 	mov	arg01, result1
18e04     FE 14 02 F6 | 	mov	arg02, result2
18e08     90 FF BF FD | 	call	#__system___gc_isvalidptr
18e0c     FD 14 0A F6 | 	mov	arg02, result1 wz
18e10     28 00 90 AD |  if_e	jmp	#LR__2550
18e14     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18e18     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18e1c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18e20     30 C4 BF FD | 	call	#__system___lockmem
18e24     0A 13 02 F6 | 	mov	arg01, arg02
18e28     14 00 B0 FD | 	call	#__system___gc_dofree
18e2c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18e30     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18e34     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18e38     09 01 68 FC | 	wrlong	#0, arg01
18e3c                 | LR__2550
18e3c                 | __system___gc_free_ret
18e3c     2D 00 64 FD | 	ret
18e40                 | 
18e40                 | __system___gc_dofree
18e40     06 4A 05 F6 | 	mov	COUNT_, #6
18e44     A8 00 A0 FD | 	call	#pushregs_
18e48     09 1F 02 F6 | 	mov	local01, arg01
18e4c     1C FC BF FD | 	call	#__system___gc_ptrs
18e50     FD 20 02 F6 | 	mov	local02, result1
18e54     FE 22 02 F6 | 	mov	local03, result2
18e58     0F 15 02 F6 | 	mov	arg02, local01
18e5c     02 14 06 F1 | 	add	arg02, #2
18e60     36 00 80 FF 
18e64     0A 1F 59 FC | 	wrword	##27791, arg02
18e68     0F 25 02 F6 | 	mov	local04, local01
18e6c     0F 13 02 F6 | 	mov	arg01, local01
18e70     09 27 EA FA | 	rdword	local05, arg01 wz
18e74     00 FA 05 A6 |  if_e	mov	result1, #0
18e78     04 26 66 50 |  if_ne	shl	local05, #4
18e7c     13 13 02 51 |  if_ne	add	arg01, local05
18e80     09 FB 01 56 |  if_ne	mov	result1, arg01
18e84     FD 28 02 F6 | 	mov	local06, result1
18e88     97 24 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
18e8c                 | LR__2560
18e8c     04 24 06 F1 | 	add	local04, #4
18e90     12 15 EA FA | 	rdword	arg02, local04 wz
18e94     10 13 02 F6 | 	mov	arg01, local02
18e98     00 FA 05 A6 |  if_e	mov	result1, #0
18e9c     04 14 66 50 |  if_ne	shl	arg02, #4
18ea0     0A 13 02 51 |  if_ne	add	arg01, arg02
18ea4     09 FB 01 56 |  if_ne	mov	result1, arg01
18ea8     FD 24 0A F6 | 	mov	local04, result1 wz
18eac     24 00 90 AD |  if_e	jmp	#LR__2562
18eb0     12 13 02 F6 | 	mov	arg01, local04
18eb4     00 FA 05 F6 | 	mov	result1, #0
18eb8     02 12 06 F1 | 	add	arg01, #2
18ebc     09 13 E2 FA | 	rdword	arg01, arg01
18ec0     36 00 00 FF 
18ec4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
18ec8     01 FA 65 A6 |  if_e	neg	result1, #1
18ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
18ed0     B8 FF 9F AD |  if_e	jmp	#LR__2560
18ed4                 | LR__2561
18ed4                 | LR__2562
18ed4     00 24 0E F2 | 	cmp	local04, #0 wz
18ed8     10 25 02 A6 |  if_e	mov	local04, local02
18edc     12 15 02 F6 | 	mov	arg02, local04
18ee0     06 14 06 F1 | 	add	arg02, #6
18ee4     0F 13 02 F6 | 	mov	arg01, local01
18ee8     0A 15 E2 FA | 	rdword	arg02, arg02
18eec     06 12 06 F1 | 	add	arg01, #6
18ef0     09 15 52 FC | 	wrword	arg02, arg01
18ef4     0F 15 0A F6 | 	mov	arg02, local01 wz
18ef8     00 FA 05 A6 |  if_e	mov	result1, #0
18efc     10 15 82 51 |  if_ne	sub	arg02, local02
18f00     04 14 46 50 |  if_ne	shr	arg02, #4
18f04     0A FB 01 56 |  if_ne	mov	result1, arg02
18f08     12 15 02 F6 | 	mov	arg02, local04
18f0c     06 14 06 F1 | 	add	arg02, #6
18f10     0A FB 51 FC | 	wrword	result1, arg02
18f14     10 25 0A F2 | 	cmp	local04, local02 wz
18f18     A4 00 90 AD |  if_e	jmp	#LR__2565
18f1c     12 13 02 F6 | 	mov	arg01, local04
18f20     09 27 EA FA | 	rdword	local05, arg01 wz
18f24     00 FA 05 A6 |  if_e	mov	result1, #0
18f28     04 26 66 50 |  if_ne	shl	local05, #4
18f2c     13 13 02 51 |  if_ne	add	arg01, local05
18f30     09 FB 01 56 |  if_ne	mov	result1, arg01
18f34     0F FB 09 F2 | 	cmp	result1, local01 wz
18f38     84 00 90 5D |  if_ne	jmp	#LR__2564
18f3c     12 29 E2 FA | 	rdword	local06, local04
18f40     0F 15 E2 FA | 	rdword	arg02, local01
18f44     0A 29 02 F1 | 	add	local06, arg02
18f48     12 29 52 FC | 	wrword	local06, local04
18f4c     0F 29 02 F6 | 	mov	local06, local01
18f50     02 28 06 F1 | 	add	local06, #2
18f54     14 01 58 FC | 	wrword	#0, local06
18f58     0F 13 02 F6 | 	mov	arg01, local01
18f5c     09 27 EA FA | 	rdword	local05, arg01 wz
18f60     00 FA 05 A6 |  if_e	mov	result1, #0
18f64     04 26 66 50 |  if_ne	shl	local05, #4
18f68     13 13 02 51 |  if_ne	add	arg01, local05
18f6c     09 FB 01 56 |  if_ne	mov	result1, arg01
18f70     FD 28 02 F6 | 	mov	local06, result1
18f74     11 29 52 F2 | 	cmps	local06, local03 wc
18f78     20 00 90 3D |  if_ae	jmp	#LR__2563
18f7c     12 15 0A F6 | 	mov	arg02, local04 wz
18f80     00 FA 05 A6 |  if_e	mov	result1, #0
18f84     10 15 82 51 |  if_ne	sub	arg02, local02
18f88     04 14 46 50 |  if_ne	shr	arg02, #4
18f8c     0A FB 01 56 |  if_ne	mov	result1, arg02
18f90     14 15 02 F6 | 	mov	arg02, local06
18f94     04 14 06 F1 | 	add	arg02, #4
18f98     0A FB 51 FC | 	wrword	result1, arg02
18f9c                 | LR__2563
18f9c     0F 15 02 F6 | 	mov	arg02, local01
18fa0     06 14 06 F1 | 	add	arg02, #6
18fa4     12 FD 01 F6 | 	mov	result2, local04
18fa8     0A 15 E2 FA | 	rdword	arg02, arg02
18fac     06 FC 05 F1 | 	add	result2, #6
18fb0     FE 14 52 FC | 	wrword	arg02, result2
18fb4     06 1E 06 F1 | 	add	local01, #6
18fb8     0F 01 58 FC | 	wrword	#0, local01
18fbc     12 1F 02 F6 | 	mov	local01, local04
18fc0                 | LR__2564
18fc0                 | LR__2565
18fc0     0F 13 02 F6 | 	mov	arg01, local01
18fc4     09 27 EA FA | 	rdword	local05, arg01 wz
18fc8     00 FA 05 A6 |  if_e	mov	result1, #0
18fcc     04 26 66 50 |  if_ne	shl	local05, #4
18fd0     13 13 02 51 |  if_ne	add	arg01, local05
18fd4     09 FB 01 56 |  if_ne	mov	result1, arg01
18fd8     FD 14 0A F6 | 	mov	arg02, result1 wz
18fdc     B8 00 90 AD |  if_e	jmp	#LR__2567
18fe0     11 15 52 F2 | 	cmps	arg02, local03 wc
18fe4     B0 00 90 3D |  if_ae	jmp	#LR__2567
18fe8     0A 13 02 F6 | 	mov	arg01, arg02
18fec     00 FA 05 F6 | 	mov	result1, #0
18ff0     02 12 06 F1 | 	add	arg01, #2
18ff4     09 13 E2 FA | 	rdword	arg01, arg01
18ff8     36 00 00 FF 
18ffc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19000     01 FA 65 A6 |  if_e	neg	result1, #1
19004     00 FA 0D F2 | 	cmp	result1, #0 wz
19008     8C 00 90 AD |  if_e	jmp	#LR__2567
1900c     0F 25 02 F6 | 	mov	local04, local01
19010     12 29 E2 FA | 	rdword	local06, local04
19014     0A 13 02 F6 | 	mov	arg01, arg02
19018     09 1F E2 FA | 	rdword	local01, arg01
1901c     0F 29 02 F1 | 	add	local06, local01
19020     12 29 52 FC | 	wrword	local06, local04
19024     09 29 02 F6 | 	mov	local06, arg01
19028     06 28 06 F1 | 	add	local06, #6
1902c     12 1F 02 F6 | 	mov	local01, local04
19030     14 29 E2 FA | 	rdword	local06, local06
19034     06 1E 06 F1 | 	add	local01, #6
19038     0F 29 52 FC | 	wrword	local06, local01
1903c     09 29 02 F6 | 	mov	local06, arg01
19040     02 28 06 F1 | 	add	local06, #2
19044     14 55 59 FC | 	wrword	#170, local06
19048     09 29 02 F6 | 	mov	local06, arg01
1904c     06 28 06 F1 | 	add	local06, #6
19050     14 01 58 FC | 	wrword	#0, local06
19054     09 27 EA FA | 	rdword	local05, arg01 wz
19058     00 FA 05 A6 |  if_e	mov	result1, #0
1905c     04 26 66 50 |  if_ne	shl	local05, #4
19060     13 13 02 51 |  if_ne	add	arg01, local05
19064     09 FB 01 56 |  if_ne	mov	result1, arg01
19068     FD 28 0A F6 | 	mov	local06, result1 wz
1906c     28 00 90 AD |  if_e	jmp	#LR__2566
19070     11 29 52 F2 | 	cmps	local06, local03 wc
19074     20 00 90 3D |  if_ae	jmp	#LR__2566
19078     12 15 0A F6 | 	mov	arg02, local04 wz
1907c     00 FA 05 A6 |  if_e	mov	result1, #0
19080     10 15 82 51 |  if_ne	sub	arg02, local02
19084     04 14 46 50 |  if_ne	shr	arg02, #4
19088     0A FB 01 56 |  if_ne	mov	result1, arg02
1908c     14 25 02 F6 | 	mov	local04, local06
19090     04 24 06 F1 | 	add	local04, #4
19094     12 FB 51 FC | 	wrword	result1, local04
19098                 | LR__2566
19098                 | LR__2567
19098     14 FB 01 F6 | 	mov	result1, local06
1909c     A7 F0 03 F6 | 	mov	ptra, fp
190a0     B2 00 A0 FD | 	call	#popregs_
190a4                 | __system___gc_dofree_ret
190a4     2D 00 64 FD | 	ret
190a8                 | 
190a8                 | __system___gc_docollect
190a8     05 4A 05 F6 | 	mov	COUNT_, #5
190ac     A8 00 A0 FD | 	call	#pushregs_
190b0     B8 F9 BF FD | 	call	#__system___gc_ptrs
190b4     FE 1E 02 F6 | 	mov	local01, result2
190b8     FD 20 02 F6 | 	mov	local02, result1
190bc     10 13 02 F6 | 	mov	arg01, local02
190c0     09 23 EA FA | 	rdword	local03, arg01 wz
190c4     00 FA 05 A6 |  if_e	mov	result1, #0
190c8     04 22 66 50 |  if_ne	shl	local03, #4
190cc     11 13 02 51 |  if_ne	add	arg01, local03
190d0     09 FB 01 56 |  if_ne	mov	result1, arg01
190d4     FD 24 0A F6 | 	mov	local04, result1 wz
190d8     00 FA 05 F6 | 	mov	result1, #0
190dc     01 FA 61 FD | 	cogid	result1
190e0     FD 26 02 F6 | 	mov	local05, result1
190e4     48 00 90 AD |  if_e	jmp	#LR__2572
190e8     97 22 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
190ec                 | LR__2570
190ec     0F 25 52 F2 | 	cmps	local04, local01 wc
190f0     3C 00 90 3D |  if_ae	jmp	#LR__2572
190f4     12 15 02 F6 | 	mov	arg02, local04
190f8     02 14 06 F1 | 	add	arg02, #2
190fc     0A 15 E2 FA | 	rdword	arg02, arg02
19100     20 14 26 F5 | 	andn	arg02, #32
19104     12 13 02 F6 | 	mov	arg01, local04
19108     02 12 06 F1 | 	add	arg01, #2
1910c     09 15 52 FC | 	wrword	arg02, arg01
19110     12 13 02 F6 | 	mov	arg01, local04
19114     09 23 EA FA | 	rdword	local03, arg01 wz
19118     00 FA 05 A6 |  if_e	mov	result1, #0
1911c     04 22 66 50 |  if_ne	shl	local03, #4
19120     11 13 02 51 |  if_ne	add	arg01, local03
19124     09 FB 01 56 |  if_ne	mov	result1, arg01
19128     FD 24 0A F6 | 	mov	local04, result1 wz
1912c     BC FF 9F 5D |  if_ne	jmp	#LR__2570
19130                 | LR__2571
19130                 | LR__2572
19130     00 22 06 F6 | 	mov	local03, #0
19134     00 12 06 F6 | 	mov	arg01, #0
19138     F0 C0 BF FD | 	call	#__system____topofstack
1913c     FD 14 02 F6 | 	mov	arg02, result1
19140     11 13 02 F6 | 	mov	arg01, local03
19144     90 00 B0 FD | 	call	#__system___gc_markhub
19148     1C 01 B0 FD | 	call	#__system___gc_markcog
1914c     10 13 02 F6 | 	mov	arg01, local02
19150     09 23 EA FA | 	rdword	local03, arg01 wz
19154     00 FA 05 A6 |  if_e	mov	result1, #0
19158     04 22 66 50 |  if_ne	shl	local03, #4
1915c     11 13 02 51 |  if_ne	add	arg01, local03
19160     09 FB 01 56 |  if_ne	mov	result1, arg01
19164     FD 20 0A F6 | 	mov	local02, result1 wz
19168     60 00 90 AD |  if_e	jmp	#LR__2576
1916c                 | LR__2573
1916c     10 25 02 F6 | 	mov	local04, local02
19170     12 13 02 F6 | 	mov	arg01, local04
19174     09 23 EA FA | 	rdword	local03, arg01 wz
19178     00 FA 05 A6 |  if_e	mov	result1, #0
1917c     04 22 66 50 |  if_ne	shl	local03, #4
19180     11 13 02 51 |  if_ne	add	arg01, local03
19184     09 FB 01 56 |  if_ne	mov	result1, arg01
19188     FD 20 02 F6 | 	mov	local02, result1
1918c     12 15 02 F6 | 	mov	arg02, local04
19190     02 14 06 F1 | 	add	arg02, #2
19194     0A 15 E2 FA | 	rdword	arg02, arg02
19198     20 14 CE F7 | 	test	arg02, #32 wz
1919c     10 14 CE A7 |  if_e	test	arg02, #16 wz
191a0     1C 00 90 5D |  if_ne	jmp	#LR__2575
191a4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
191a8     13 15 0A F2 | 	cmp	arg02, local05 wz
191ac     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
191b0     0C 00 90 5D |  if_ne	jmp	#LR__2574
191b4     12 13 02 F6 | 	mov	arg01, local04
191b8     84 FC BF FD | 	call	#__system___gc_dofree
191bc     FD 20 02 F6 | 	mov	local02, result1
191c0                 | LR__2574
191c0                 | LR__2575
191c0     00 20 0E F2 | 	cmp	local02, #0 wz
191c4     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
191c8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2573
191cc                 | LR__2576
191cc     A7 F0 03 F6 | 	mov	ptra, fp
191d0     B2 00 A0 FD | 	call	#popregs_
191d4                 | __system___gc_docollect_ret
191d4     2D 00 64 FD | 	ret
191d8                 | 
191d8                 | __system___gc_markhub
191d8     04 4A 05 F6 | 	mov	COUNT_, #4
191dc     A8 00 A0 FD | 	call	#pushregs_
191e0     09 1F 02 F6 | 	mov	local01, arg01
191e4     0A 21 02 F6 | 	mov	local02, arg02
191e8     80 F8 BF FD | 	call	#__system___gc_ptrs
191ec     FD 22 02 F6 | 	mov	local03, result1
191f0     FE 24 02 F6 | 	mov	local04, result2
191f4                 | LR__2580
191f4     10 1F 52 F2 | 	cmps	local01, local02 wc
191f8     60 00 90 3D |  if_ae	jmp	#LR__2581
191fc     0F 17 02 FB | 	rdlong	arg03, local01
19200     04 1E 06 F1 | 	add	local01, #4
19204     12 15 02 F6 | 	mov	arg02, local04
19208     11 13 02 F6 | 	mov	arg01, local03
1920c     8C FB BF FD | 	call	#__system___gc_isvalidptr
19210     FD 16 0A F6 | 	mov	arg03, result1 wz
19214     DC FF 9F AD |  if_e	jmp	#LR__2580
19218     0B 13 02 F6 | 	mov	arg01, arg03
1921c     00 FA 05 F6 | 	mov	result1, #0
19220     02 12 06 F1 | 	add	arg01, #2
19224     09 13 E2 FA | 	rdword	arg01, arg01
19228     36 00 00 FF 
1922c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19230     01 FA 65 A6 |  if_e	neg	result1, #1
19234     00 FA 0D F2 | 	cmp	result1, #0 wz
19238     B8 FF 9F 5D |  if_ne	jmp	#LR__2580
1923c     0B FD 01 F6 | 	mov	result2, arg03
19240     02 FC 05 F1 | 	add	result2, #2
19244     FE FC E1 FA | 	rdword	result2, result2
19248     0F FC 25 F5 | 	andn	result2, #15
1924c     2E FC 45 F5 | 	or	result2, #46
19250     02 16 06 F1 | 	add	arg03, #2
19254     0B FD 51 FC | 	wrword	result2, arg03
19258     98 FF 9F FD | 	jmp	#LR__2580
1925c                 | LR__2581
1925c     A7 F0 03 F6 | 	mov	ptra, fp
19260     B2 00 A0 FD | 	call	#popregs_
19264                 | __system___gc_markhub_ret
19264     2D 00 64 FD | 	ret
19268                 | 
19268                 | __system___gc_markcog
19268     04 4A 05 F6 | 	mov	COUNT_, #4
1926c     A8 00 A0 FD | 	call	#pushregs_
19270     F8 F7 BF FD | 	call	#__system___gc_ptrs
19274     FD 1E 02 F6 | 	mov	local01, result1
19278     FE 20 02 F6 | 	mov	local02, result2
1927c     EF 23 06 F6 | 	mov	local03, #495
19280                 | LR__2590
19280                 | 	'.live	local03
19280     00 22 96 F9 | 	alts	local03, #0
19284     11 25 02 F6 | 	mov	local04, local03
19288     0F 13 02 F6 | 	mov	arg01, local01
1928c     10 15 02 F6 | 	mov	arg02, local02
19290     12 17 02 F6 | 	mov	arg03, local04
19294     04 FB BF FD | 	call	#__system___gc_isvalidptr
19298     00 FA 0D F2 | 	cmp	result1, #0 wz
1929c     18 00 90 AD |  if_e	jmp	#LR__2591
192a0     FD 24 02 F6 | 	mov	local04, result1
192a4     02 24 06 F1 | 	add	local04, #2
192a8     12 25 E2 FA | 	rdword	local04, local04
192ac     20 24 46 F5 | 	or	local04, #32
192b0     02 FA 05 F1 | 	add	result1, #2
192b4     FD 24 52 FC | 	wrword	local04, result1
192b8                 | LR__2591
192b8     01 22 86 F1 | 	sub	local03, #1
192bc     00 22 56 F2 | 	cmps	local03, #0 wc
192c0     BC FF 9F 3D |  if_ae	jmp	#LR__2590
192c4     A7 F0 03 F6 | 	mov	ptra, fp
192c8     B2 00 A0 FD | 	call	#popregs_
192cc                 | __system___gc_markcog_ret
192cc     2D 00 64 FD | 	ret
192d0                 | 
192d0                 | __system__opendir
192d0     06 4A 05 F6 | 	mov	COUNT_, #6
192d4     A8 00 A0 FD | 	call	#pushregs_
192d8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
192dc     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
192e0     09 15 02 F6 | 	mov	arg02, arg01
192e4     0F 13 02 F6 | 	mov	arg01, local01
192e8     00 16 06 F6 | 	mov	arg03, #0
192ec     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
192f0     F8 C6 BF FD | 	call	#__system____getvfsforfile
192f4     FD 20 0A F6 | 	mov	local02, result1 wz
192f8     10 00 90 AD |  if_e	jmp	#LR__2600
192fc     28 20 06 F1 | 	add	local02, #40
19300     10 17 0A FB | 	rdlong	arg03, local02 wz
19304     28 20 86 F1 | 	sub	local02, #40
19308     14 00 90 5D |  if_ne	jmp	#LR__2601
1930c                 | LR__2600
1930c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19310     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19314     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19318     00 FA 05 F6 | 	mov	result1, #0
1931c     90 00 90 FD | 	jmp	#LR__2603
19320                 | LR__2601
19320     5C 12 06 F6 | 	mov	arg01, #92
19324     10 14 06 F6 | 	mov	arg02, #16
19328     C0 F9 BF FD | 	call	#__system___gc_doalloc
1932c     FD 22 0A F6 | 	mov	local03, result1 wz
19330     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19334     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
19338     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1933c     00 FA 05 A6 |  if_e	mov	result1, #0
19340     6C 00 90 AD |  if_e	jmp	#LR__2603
19344     28 20 06 F1 | 	add	local02, #40
19348     10 25 02 FB | 	rdlong	local04, local02
1934c     12 27 02 F6 | 	mov	local05, local04
19350     28 20 86 F1 | 	sub	local02, #40
19354     13 26 46 F7 | 	zerox	local05, #19
19358     14 24 46 F0 | 	shr	local04, #20
1935c     02 24 66 F0 | 	shl	local04, #2
19360     ED 24 02 F1 | 	add	local04, __methods__
19364     12 25 02 FB | 	rdlong	local04, local04
19368     11 13 02 F6 | 	mov	arg01, local03
1936c     0F 15 02 F6 | 	mov	arg02, local01
19370     F2 28 02 F6 | 	mov	local06, objptr
19374     13 E5 01 F6 | 	mov	objptr, local05
19378     2D 24 62 FD | 	call	local04
1937c     14 E5 01 F6 | 	mov	objptr, local06
19380     FD 16 0A F6 | 	mov	arg03, result1 wz
19384     20 00 90 AD |  if_e	jmp	#LR__2602
19388     00 16 4E F2 | 	cmps	arg03, #0 wz
1938c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19390     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
19394     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19398     11 13 02 F6 | 	mov	arg01, local03
1939c     58 FA BF FD | 	call	#__system___gc_free
193a0     00 FA 05 F6 | 	mov	result1, #0
193a4     08 00 90 FD | 	jmp	#LR__2603
193a8                 | LR__2602
193a8     11 21 62 FC | 	wrlong	local02, local03
193ac     11 FB 01 F6 | 	mov	result1, local03
193b0                 | LR__2603
193b0     A7 F0 03 F6 | 	mov	ptra, fp
193b4     B2 00 A0 FD | 	call	#popregs_
193b8                 | __system__opendir_ret
193b8     2D 00 64 FD | 	ret
193bc                 | 
193bc                 | __system__closedir
193bc     04 4A 05 F6 | 	mov	COUNT_, #4
193c0     A8 00 A0 FD | 	call	#pushregs_
193c4     09 1F 02 F6 | 	mov	local01, arg01
193c8     0F 13 02 FB | 	rdlong	arg01, local01
193cc     2C 12 06 F1 | 	add	arg01, #44
193d0     09 21 02 FB | 	rdlong	local02, arg01
193d4     10 23 02 F6 | 	mov	local03, local02
193d8     13 22 46 F7 | 	zerox	local03, #19
193dc     14 20 46 F0 | 	shr	local02, #20
193e0     02 20 66 F0 | 	shl	local02, #2
193e4     ED 20 02 F1 | 	add	local02, __methods__
193e8     10 21 02 FB | 	rdlong	local02, local02
193ec     0F 13 02 F6 | 	mov	arg01, local01
193f0     F2 24 02 F6 | 	mov	local04, objptr
193f4     11 E5 01 F6 | 	mov	objptr, local03
193f8     2D 20 62 FD | 	call	local02
193fc     12 E5 01 F6 | 	mov	objptr, local04
19400     FD 24 02 F6 | 	mov	local04, result1
19404     0F 13 02 F6 | 	mov	arg01, local01
19408     EC F9 BF FD | 	call	#__system___gc_free
1940c     00 24 4E F2 | 	cmps	local04, #0 wz
19410     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19414     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
19418     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1941c     01 FA 65 56 |  if_ne	neg	result1, #1
19420     00 FA 05 A6 |  if_e	mov	result1, #0
19424     A7 F0 03 F6 | 	mov	ptra, fp
19428     B2 00 A0 FD | 	call	#popregs_
1942c                 | __system__closedir_ret
1942c     2D 00 64 FD | 	ret
19430                 | 
19430                 | __system__readdir
19430     04 4A 05 F6 | 	mov	COUNT_, #4
19434     A8 00 A0 FD | 	call	#pushregs_
19438     09 15 0A FB | 	rdlong	arg02, arg01 wz
1943c     08 12 06 F1 | 	add	arg01, #8
19440     09 1F 02 F6 | 	mov	local01, arg01
19444     08 12 86 F1 | 	sub	arg01, #8
19448     00 FA 05 A6 |  if_e	mov	result1, #0
1944c     5C 00 90 AD |  if_e	jmp	#LR__2611
19450     30 14 06 F1 | 	add	arg02, #48
19454     0A 21 02 FB | 	rdlong	local02, arg02
19458     10 23 02 F6 | 	mov	local03, local02
1945c     13 22 46 F7 | 	zerox	local03, #19
19460     14 20 46 F0 | 	shr	local02, #20
19464     02 20 66 F0 | 	shl	local02, #2
19468     ED 20 02 F1 | 	add	local02, __methods__
1946c     10 21 02 FB | 	rdlong	local02, local02
19470     0F 15 02 F6 | 	mov	arg02, local01
19474     F2 24 02 F6 | 	mov	local04, objptr
19478     11 E5 01 F6 | 	mov	objptr, local03
1947c     2D 20 62 FD | 	call	local02
19480     12 E5 01 F6 | 	mov	objptr, local04
19484     00 FA 4D F2 | 	cmps	result1, #0 wz
19488     1C 00 90 AD |  if_e	jmp	#LR__2610
1948c     01 FA 55 F2 | 	cmps	result1, #1 wc
19490     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
19494     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19498     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1949c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
194a0     00 FA 05 F6 | 	mov	result1, #0
194a4     04 00 90 FD | 	jmp	#LR__2611
194a8                 | LR__2610
194a8     0F FB 01 F6 | 	mov	result1, local01
194ac                 | LR__2611
194ac     A7 F0 03 F6 | 	mov	ptra, fp
194b0     B2 00 A0 FD | 	call	#popregs_
194b4                 | __system__readdir_ret
194b4     2D 00 64 FD | 	ret
194b8                 | 
194b8                 | __system___openraw
194b8     15 4A 05 F6 | 	mov	COUNT_, #21
194bc     A8 00 A0 FD | 	call	#pushregs_
194c0     09 1F 02 F6 | 	mov	local01, arg01
194c4     0A 21 02 F6 | 	mov	local02, arg02
194c8     0B 23 02 F6 | 	mov	local03, arg03
194cc     0C 25 02 F6 | 	mov	local04, arg04
194d0     04 26 06 F6 | 	mov	local05, #4
194d4     0F 29 02 F6 | 	mov	local06, local01
194d8     00 2A 06 F6 | 	mov	local07, #0
194dc     84 E9 05 F1 | 	add	ptr___system__dat__, #388
194e0     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
194e4     16 13 02 F6 | 	mov	arg01, local08
194e8     10 15 02 F6 | 	mov	arg02, local02
194ec     00 16 06 F6 | 	mov	arg03, #0
194f0     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
194f4     F4 C4 BF FD | 	call	#__system____getvfsforfile
194f8     FD 2E 0A F6 | 	mov	local09, result1 wz
194fc     10 00 90 AD |  if_e	jmp	#LR__2620
19500     20 2E 06 F1 | 	add	local09, #32
19504     17 FB 09 FB | 	rdlong	result1, local09 wz
19508     20 2E 86 F1 | 	sub	local09, #32
1950c     14 00 90 5D |  if_ne	jmp	#LR__2621
19510                 | LR__2620
19510     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19514     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19518     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1951c     01 FA 65 F6 | 	neg	result1, #1
19520     8C 02 90 FD | 	jmp	#LR__2634
19524                 | LR__2621
19524     14 13 02 F6 | 	mov	arg01, local06
19528     00 14 06 F6 | 	mov	arg02, #0
1952c     34 16 06 F6 | 	mov	arg03, #52
19530     09 31 02 F6 | 	mov	local10, arg01
19534     98 00 A0 FD | 	call	#\builtin_bytefill_
19538     20 2E 06 F1 | 	add	local09, #32
1953c     17 33 02 FB | 	rdlong	local11, local09
19540     19 35 02 F6 | 	mov	local12, local11
19544     19 37 02 F6 | 	mov	local13, local11
19548     20 2E 86 F1 | 	sub	local09, #32
1954c     1B 39 02 F6 | 	mov	local14, local13
19550     13 34 46 F7 | 	zerox	local12, #19
19554     14 38 46 F0 | 	shr	local14, #20
19558     02 38 66 F0 | 	shl	local14, #2
1955c     ED 38 02 F1 | 	add	local14, __methods__
19560     1C 39 02 FB | 	rdlong	local14, local14
19564     14 3B 02 F6 | 	mov	local15, local06
19568     16 3D 02 F6 | 	mov	local16, local08
1956c     11 3F 02 F6 | 	mov	local17, local03
19570     1D 13 02 F6 | 	mov	arg01, local15
19574     1E 15 02 F6 | 	mov	arg02, local16
19578     1F 17 02 F6 | 	mov	arg03, local17
1957c     F2 40 02 F6 | 	mov	local18, objptr
19580     1A E5 01 F6 | 	mov	objptr, local12
19584     2D 38 62 FD | 	call	local14
19588     20 E5 01 F6 | 	mov	objptr, local18
1958c     FD 42 0A F6 | 	mov	local19, result1 wz
19590     04 22 CE 57 |  if_ne	test	local03, #4 wz
19594     58 00 90 AD |  if_e	jmp	#LR__2622
19598     24 2E 06 F1 | 	add	local09, #36
1959c     17 33 02 FB | 	rdlong	local11, local09
195a0     19 35 02 F6 | 	mov	local12, local11
195a4     19 37 02 F6 | 	mov	local13, local11
195a8     24 2E 86 F1 | 	sub	local09, #36
195ac     1B 39 02 F6 | 	mov	local14, local13
195b0     13 34 46 F7 | 	zerox	local12, #19
195b4     14 38 46 F0 | 	shr	local14, #20
195b8     02 38 66 F0 | 	shl	local14, #2
195bc     ED 38 02 F1 | 	add	local14, __methods__
195c0     1C 39 02 FB | 	rdlong	local14, local14
195c4     14 3B 02 F6 | 	mov	local15, local06
195c8     16 3D 02 F6 | 	mov	local16, local08
195cc     12 3F 02 F6 | 	mov	local17, local04
195d0     1D 13 02 F6 | 	mov	arg01, local15
195d4     1E 15 02 F6 | 	mov	arg02, local16
195d8     1F 17 02 F6 | 	mov	arg03, local17
195dc     F2 40 02 F6 | 	mov	local18, objptr
195e0     1A E5 01 F6 | 	mov	objptr, local12
195e4     2D 38 62 FD | 	call	local14
195e8     20 E5 01 F6 | 	mov	objptr, local18
195ec     FD 42 02 F6 | 	mov	local19, result1
195f0                 | LR__2622
195f0     00 42 0E F2 | 	cmp	local19, #0 wz
195f4     8C 01 90 5D |  if_ne	jmp	#LR__2632
195f8     11 45 02 F6 | 	mov	local20, local03
195fc     03 44 0E F5 | 	and	local20, #3 wz
19600     02 26 46 55 |  if_ne	or	local05, #2
19604     01 44 0E F2 | 	cmp	local20, #1 wz
19608     01 26 46 55 |  if_ne	or	local05, #1
1960c     20 22 CE F7 | 	test	local03, #32 wz
19610     C0 26 46 55 |  if_ne	or	local05, #192
19614     08 28 06 F1 | 	add	local06, #8
19618     14 27 62 FC | 	wrlong	local05, local06
1961c     0C 28 06 F1 | 	add	local06, #12
19620     14 47 0A FB | 	rdlong	local21, local06 wz
19624     14 28 86 F1 | 	sub	local06, #20
19628     18 00 90 5D |  if_ne	jmp	#LR__2623
1962c     04 2E 06 F1 | 	add	local09, #4
19630     17 47 02 FB | 	rdlong	local21, local09
19634     04 2E 86 F1 | 	sub	local09, #4
19638     14 28 06 F1 | 	add	local06, #20
1963c     14 47 62 FC | 	wrlong	local21, local06
19640     14 28 86 F1 | 	sub	local06, #20
19644                 | LR__2623
19644     18 28 06 F1 | 	add	local06, #24
19648     14 47 0A FB | 	rdlong	local21, local06 wz
1964c     18 28 86 F1 | 	sub	local06, #24
19650     18 00 90 5D |  if_ne	jmp	#LR__2624
19654     08 2E 06 F1 | 	add	local09, #8
19658     17 47 02 FB | 	rdlong	local21, local09
1965c     08 2E 86 F1 | 	sub	local09, #8
19660     18 28 06 F1 | 	add	local06, #24
19664     14 47 62 FC | 	wrlong	local21, local06
19668     18 28 86 F1 | 	sub	local06, #24
1966c                 | LR__2624
1966c     24 28 06 F1 | 	add	local06, #36
19670     14 47 0A FB | 	rdlong	local21, local06 wz
19674     24 28 86 F1 | 	sub	local06, #36
19678     17 47 02 AB |  if_e	rdlong	local21, local09
1967c     24 28 06 A1 |  if_e	add	local06, #36
19680     14 47 62 AC |  if_e	wrlong	local21, local06
19684     24 28 86 A1 |  if_e	sub	local06, #36
19688     28 28 06 F1 | 	add	local06, #40
1968c     14 47 0A FB | 	rdlong	local21, local06 wz
19690     28 28 86 F1 | 	sub	local06, #40
19694     18 00 90 5D |  if_ne	jmp	#LR__2625
19698     10 2E 06 F1 | 	add	local09, #16
1969c     17 47 02 FB | 	rdlong	local21, local09
196a0     10 2E 86 F1 | 	sub	local09, #16
196a4     28 28 06 F1 | 	add	local06, #40
196a8     14 47 62 FC | 	wrlong	local21, local06
196ac     28 28 86 F1 | 	sub	local06, #40
196b0                 | LR__2625
196b0     30 28 06 F1 | 	add	local06, #48
196b4     14 47 0A FB | 	rdlong	local21, local06 wz
196b8     30 28 86 F1 | 	sub	local06, #48
196bc     18 00 90 5D |  if_ne	jmp	#LR__2626
196c0     0C 2E 06 F1 | 	add	local09, #12
196c4     17 47 02 FB | 	rdlong	local21, local09
196c8     0C 2E 86 F1 | 	sub	local09, #12
196cc     30 28 06 F1 | 	add	local06, #48
196d0     14 47 62 FC | 	wrlong	local21, local06
196d4     30 28 86 F1 | 	sub	local06, #48
196d8                 | LR__2626
196d8     1C 28 06 F1 | 	add	local06, #28
196dc     14 47 0A FB | 	rdlong	local21, local06 wz
196e0     1C 28 86 F1 | 	sub	local06, #28
196e4     1C 00 90 5D |  if_ne	jmp	#LR__2627
196e8     01 2A 06 F6 | 	mov	local07, #1
196ec     F2 12 02 F6 | 	mov	arg01, objptr
196f0     00 A8 02 FF 
196f4     00 12 46 F5 | 	or	arg01, ##89128960
196f8     1C 28 06 F1 | 	add	local06, #28
196fc     14 13 62 FC | 	wrlong	arg01, local06
19700     1C 28 86 F1 | 	sub	local06, #28
19704                 | LR__2627
19704     20 28 06 F1 | 	add	local06, #32
19708     14 47 0A FB | 	rdlong	local21, local06 wz
1970c     20 28 86 F1 | 	sub	local06, #32
19710     1C 00 90 5D |  if_ne	jmp	#LR__2628
19714     01 2A 06 F6 | 	mov	local07, #1
19718     F2 12 02 F6 | 	mov	arg01, objptr
1971c     00 B0 02 FF 
19720     00 12 46 F5 | 	or	arg01, ##90177536
19724     20 28 06 F1 | 	add	local06, #32
19728     14 13 62 FC | 	wrlong	arg01, local06
1972c     20 28 86 F1 | 	sub	local06, #32
19730                 | LR__2628
19730     2C 28 06 F1 | 	add	local06, #44
19734     14 47 0A FB | 	rdlong	local21, local06 wz
19738     2C 28 86 F1 | 	sub	local06, #44
1973c     44 00 90 5D |  if_ne	jmp	#LR__2631
19740     14 2E 06 F1 | 	add	local09, #20
19744     17 47 0A FB | 	rdlong	local21, local09 wz
19748     14 2E 86 F1 | 	sub	local09, #20
1974c     18 00 90 AD |  if_e	jmp	#LR__2629
19750     14 2E 06 F1 | 	add	local09, #20
19754     17 47 02 FB | 	rdlong	local21, local09
19758     2C 28 06 F1 | 	add	local06, #44
1975c     14 47 62 FC | 	wrlong	local21, local06
19760     2C 28 86 F1 | 	sub	local06, #44
19764     1C 00 90 FD | 	jmp	#LR__2630
19768                 | LR__2629
19768     01 2A 06 F6 | 	mov	local07, #1
1976c     F2 12 02 F6 | 	mov	arg01, objptr
19770     00 B8 02 FF 
19774     00 12 46 F5 | 	or	arg01, ##91226112
19778     2C 28 06 F1 | 	add	local06, #44
1977c     14 13 62 FC | 	wrlong	arg01, local06
19780     2C 28 86 F1 | 	sub	local06, #44
19784                 | LR__2630
19784                 | LR__2631
19784                 | LR__2632
19784     00 2A 0E F2 | 	cmp	local07, #0 wz
19788     14 13 02 56 |  if_ne	mov	arg01, local06
1978c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
19790     00 42 0E F2 | 	cmp	local19, #0 wz
19794     00 12 06 A6 |  if_e	mov	arg01, #0
19798     10 00 90 5D |  if_ne	jmp	#LR__2633
1979c     00 12 4E F2 | 	cmps	arg01, #0 wz
197a0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
197a4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
197a8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
197ac                 | LR__2633
197ac     21 FB 01 F6 | 	mov	result1, local19
197b0                 | LR__2634
197b0     A7 F0 03 F6 | 	mov	ptra, fp
197b4     B2 00 A0 FD | 	call	#popregs_
197b8                 | __system___openraw_ret
197b8     2D 00 64 FD | 	ret
197bc                 | 
197bc                 | __system___closeraw
197bc     05 4A 05 F6 | 	mov	COUNT_, #5
197c0     A8 00 A0 FD | 	call	#pushregs_
197c4     09 1F 02 F6 | 	mov	local01, arg01
197c8     00 20 06 F6 | 	mov	local02, #0
197cc     08 1E 06 F1 | 	add	local01, #8
197d0     0F FB 09 FB | 	rdlong	result1, local01 wz
197d4     08 1E 86 F1 | 	sub	local01, #8
197d8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
197dc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
197e0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
197e4     01 FA 65 A6 |  if_e	neg	result1, #1
197e8     A8 00 90 AD |  if_e	jmp	#LR__2642
197ec     2C 1E 06 F1 | 	add	local01, #44
197f0     0F FB 09 FB | 	rdlong	result1, local01 wz
197f4     2C 1E 86 F1 | 	sub	local01, #44
197f8     38 00 90 AD |  if_e	jmp	#LR__2640
197fc     2C 1E 06 F1 | 	add	local01, #44
19800     0F 23 02 FB | 	rdlong	local03, local01
19804     11 25 02 F6 | 	mov	local04, local03
19808     2C 1E 86 F1 | 	sub	local01, #44
1980c     13 24 46 F7 | 	zerox	local04, #19
19810     14 22 46 F0 | 	shr	local03, #20
19814     02 22 66 F0 | 	shl	local03, #2
19818     ED 22 02 F1 | 	add	local03, __methods__
1981c     11 23 02 FB | 	rdlong	local03, local03
19820     0F 13 02 F6 | 	mov	arg01, local01
19824     F2 26 02 F6 | 	mov	local05, objptr
19828     12 E5 01 F6 | 	mov	objptr, local04
1982c     2D 22 62 FD | 	call	local03
19830     13 E5 01 F6 | 	mov	objptr, local05
19834                 | LR__2640
19834     24 1E 06 F1 | 	add	local01, #36
19838     0F 27 0A FB | 	rdlong	local05, local01 wz
1983c     24 1E 86 F1 | 	sub	local01, #36
19840     3C 00 90 AD |  if_e	jmp	#LR__2641
19844     24 1E 06 F1 | 	add	local01, #36
19848     0F 23 02 FB | 	rdlong	local03, local01
1984c     11 25 02 F6 | 	mov	local04, local03
19850     24 1E 86 F1 | 	sub	local01, #36
19854     13 24 46 F7 | 	zerox	local04, #19
19858     14 22 46 F0 | 	shr	local03, #20
1985c     02 22 66 F0 | 	shl	local03, #2
19860     ED 22 02 F1 | 	add	local03, __methods__
19864     11 23 02 FB | 	rdlong	local03, local03
19868     0F 13 02 F6 | 	mov	arg01, local01
1986c     F2 26 02 F6 | 	mov	local05, objptr
19870     12 E5 01 F6 | 	mov	objptr, local04
19874     2D 22 62 FD | 	call	local03
19878     13 E5 01 F6 | 	mov	objptr, local05
1987c     FD 20 02 F6 | 	mov	local02, result1
19880                 | LR__2641
19880     0F 13 02 F6 | 	mov	arg01, local01
19884     00 14 06 F6 | 	mov	arg02, #0
19888     34 16 06 F6 | 	mov	arg03, #52
1988c     98 00 A0 FD | 	call	#\builtin_bytefill_
19890     10 FB 01 F6 | 	mov	result1, local02
19894                 | LR__2642
19894     A7 F0 03 F6 | 	mov	ptra, fp
19898     B2 00 A0 FD | 	call	#popregs_
1989c                 | __system___closeraw_ret
1989c     2D 00 64 FD | 	ret
198a0                 | 
198a0                 | __system___vfs_open_sdcardx
198a0     0B 4A 05 F6 | 	mov	COUNT_, #11
198a4     A8 00 A0 FD | 	call	#pushregs_
198a8     09 23 02 F6 | 	mov	local03, arg01
198ac     0A 25 02 F6 | 	mov	local04, arg02
198b0     0B 27 02 F6 | 	mov	local05, arg03
198b4     0C 29 02 F6 | 	mov	local06, arg04
198b8     01 00 00 FF 
198bc     24 12 06 F6 | 	mov	arg01, ##548
198c0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
198c4     FD 2A 02 F6 | 	mov	local07, result1
198c8     01 00 00 FF 
198cc     34 12 06 F6 | 	mov	arg01, ##564
198d0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
198d4     FD 2C 02 F6 | 	mov	local08, result1
198d8     11 19 02 F6 | 	mov	arg04, local03
198dc     1F 18 C6 F0 | 	sar	arg04, #31
198e0     11 17 02 F6 | 	mov	arg03, local03
198e4     01 12 06 F6 | 	mov	arg01, #1
198e8     00 14 06 F6 | 	mov	arg02, #0
198ec     98 DF BF FD | 	call	#__system___int64_shl
198f0     FD 1E 02 F6 | 	mov	local01, result1
198f4     FE 2E 02 F6 | 	mov	local09, result2
198f8     12 19 02 F6 | 	mov	arg04, local04
198fc     1F 18 C6 F0 | 	sar	arg04, #31
19900     12 17 02 F6 | 	mov	arg03, local04
19904     01 12 06 F6 | 	mov	arg01, #1
19908     00 14 06 F6 | 	mov	arg02, #0
1990c     78 DF BF FD | 	call	#__system___int64_shl
19910     FD 1E 42 F5 | 	or	local01, result1
19914     FE 2E 42 F5 | 	or	local09, result2
19918     13 19 02 F6 | 	mov	arg04, local05
1991c     1F 18 C6 F0 | 	sar	arg04, #31
19920     13 17 02 F6 | 	mov	arg03, local05
19924     01 12 06 F6 | 	mov	arg01, #1
19928     00 14 06 F6 | 	mov	arg02, #0
1992c     58 DF BF FD | 	call	#__system___int64_shl
19930     FD 1E 42 F5 | 	or	local01, result1
19934     FE 2E 42 F5 | 	or	local09, result2
19938     14 19 02 F6 | 	mov	arg04, local06
1993c     1F 18 C6 F0 | 	sar	arg04, #31
19940     14 17 02 F6 | 	mov	arg03, local06
19944     01 12 06 F6 | 	mov	arg01, #1
19948     00 14 06 F6 | 	mov	arg02, #0
1994c     38 DF BF FD | 	call	#__system___int64_shl
19950     17 15 02 F6 | 	mov	arg02, local09
19954     FD 1E 42 F5 | 	or	local01, result1
19958     0A FD 41 F5 | 	or	result2, arg02
1995c     FE 20 02 F6 | 	mov	local02, result2
19960     0F 13 02 F6 | 	mov	arg01, local01
19964     10 15 02 F6 | 	mov	arg02, local02
19968     54 DF BF FD | 	call	#__system___usepins
1996c     00 FA 0D F2 | 	cmp	result1, #0 wz
19970     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19974     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
19978     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1997c     00 FA 05 A6 |  if_e	mov	result1, #0
19980     B4 00 90 AD |  if_e	jmp	#LR__2652
19984     0F 31 02 F6 | 	mov	local10, local01
19988     10 2F 02 F6 | 	mov	local09, local02
1998c     01 00 00 FF 
19990     08 2A 06 F1 | 	add	local07, ##520
19994     15 31 62 FC | 	wrlong	local10, local07
19998     04 2A 06 F1 | 	add	local07, #4
1999c     15 2F 62 FC | 	wrlong	local09, local07
199a0     01 00 00 FF 
199a4     0C 2A 86 F1 | 	sub	local07, ##524
199a8     14 1B 02 F6 | 	mov	arg05, local06
199ac     00 12 06 F6 | 	mov	arg01, #0
199b0     11 15 02 F6 | 	mov	arg02, local03
199b4     12 17 02 F6 | 	mov	arg03, local04
199b8     13 19 02 F6 | 	mov	arg04, local05
199bc     F2 30 02 F6 | 	mov	local10, objptr
199c0     15 E5 01 F6 | 	mov	objptr, local07
199c4     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
199c8     18 E5 01 F6 | 	mov	objptr, local10
199cc     FD 32 0A F6 | 	mov	local11, result1 wz
199d0     24 00 90 5D |  if_ne	jmp	#LR__2650
199d4     22 01 00 FF 
199d8     8A 14 06 F6 | 	mov	arg02, ##@LR__4047
199dc     16 13 02 F6 | 	mov	arg01, local08
199e0     00 16 06 F6 | 	mov	arg03, #0
199e4     F2 32 02 F6 | 	mov	local11, objptr
199e8     15 E5 01 F6 | 	mov	objptr, local07
199ec     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
199f0     19 E5 01 F6 | 	mov	objptr, local11
199f4     FD 32 02 F6 | 	mov	local11, result1
199f8                 | LR__2650
199f8     00 32 0E F2 | 	cmp	local11, #0 wz
199fc     24 00 90 AD |  if_e	jmp	#LR__2651
19a00     0F 13 02 F6 | 	mov	arg01, local01
19a04     10 15 02 F6 | 	mov	arg02, local02
19a08     08 DF BF FD | 	call	#__system___freepins
19a0c     19 13 6A F6 | 	neg	arg01, local11 wz
19a10     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19a14     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19a18     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a1c     00 FA 05 F6 | 	mov	result1, #0
19a20     14 00 90 FD | 	jmp	#LR__2652
19a24                 | LR__2651
19a24     15 13 02 F6 | 	mov	arg01, local07
19a28     F2 32 02 F6 | 	mov	local11, objptr
19a2c     15 E5 01 F6 | 	mov	objptr, local07
19a30     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
19a34     19 E5 01 F6 | 	mov	objptr, local11
19a38                 | LR__2652
19a38     A7 F0 03 F6 | 	mov	ptra, fp
19a3c     B2 00 A0 FD | 	call	#popregs_
19a40                 | __system___vfs_open_sdcardx_ret
19a40     2D 00 64 FD | 	ret
19a44                 | 
19a44                 | __system____default_getc
19a44     03 4A 05 F6 | 	mov	COUNT_, #3
19a48     A8 00 A0 FD | 	call	#pushregs_
19a4c     09 1F 02 F6 | 	mov	local01, arg01
19a50     0F 21 02 FB | 	rdlong	local02, local01
19a54     08 20 06 F1 | 	add	local02, #8
19a58     10 23 02 FB | 	rdlong	local03, local02
19a5c     02 22 CE F7 | 	test	local03, #2 wz
19a60     0F 13 02 56 |  if_ne	mov	arg01, local01
19a64     00 01 B0 5D |  if_ne	call	#__system____default_flush
19a68     10 23 02 FB | 	rdlong	local03, local02
19a6c     01 22 46 F5 | 	or	local03, #1
19a70     10 23 62 FC | 	wrlong	local03, local02
19a74     08 20 86 F1 | 	sub	local02, #8
19a78     10 23 0A FB | 	rdlong	local03, local02 wz
19a7c     0C 00 90 5D |  if_ne	jmp	#LR__2660
19a80     0F 13 02 F6 | 	mov	arg01, local01
19a84     64 16 B0 FD | 	call	#__system____default_filbuf
19a88     FD 22 02 F6 | 	mov	local03, result1
19a8c                 | LR__2660
19a8c     01 22 56 F2 | 	cmps	local03, #1 wc
19a90     01 FA 65 C6 |  if_b	neg	result1, #1
19a94     1C 00 90 CD |  if_b	jmp	#LR__2661
19a98     01 22 86 F1 | 	sub	local03, #1
19a9c     10 23 62 FC | 	wrlong	local03, local02
19aa0     04 20 06 F1 | 	add	local02, #4
19aa4     10 23 02 FB | 	rdlong	local03, local02
19aa8     11 FB C1 FA | 	rdbyte	result1, local03
19aac     01 22 06 F1 | 	add	local03, #1
19ab0     10 23 62 FC | 	wrlong	local03, local02
19ab4                 | LR__2661
19ab4     A7 F0 03 F6 | 	mov	ptra, fp
19ab8     B2 00 A0 FD | 	call	#popregs_
19abc                 | __system____default_getc_ret
19abc     2D 00 64 FD | 	ret
19ac0                 | 
19ac0                 | __system____default_putc
19ac0     06 4A 05 F6 | 	mov	COUNT_, #6
19ac4     A8 00 A0 FD | 	call	#pushregs_
19ac8     09 1F 02 F6 | 	mov	local01, arg01
19acc     0A 21 02 F6 | 	mov	local02, arg02
19ad0     10 23 02 FB | 	rdlong	local03, local02
19ad4     08 22 06 F1 | 	add	local03, #8
19ad8     11 FB 01 FB | 	rdlong	result1, local03
19adc     01 FA CD F7 | 	test	result1, #1 wz
19ae0     10 13 02 56 |  if_ne	mov	arg01, local02
19ae4     80 00 B0 5D |  if_ne	call	#__system____default_flush
19ae8     11 25 02 FB | 	rdlong	local04, local03
19aec     02 24 46 F5 | 	or	local04, #2
19af0     11 25 62 FC | 	wrlong	local04, local03
19af4     08 22 86 F1 | 	sub	local03, #8
19af8     11 27 02 FB | 	rdlong	local05, local03
19afc     10 22 06 F1 | 	add	local03, #16
19b00     11 15 02 FB | 	rdlong	arg02, local03
19b04     10 22 86 F1 | 	sub	local03, #16
19b08     13 FB 01 F6 | 	mov	result1, local05
19b0c     0A FB 01 F1 | 	add	result1, arg02
19b10     FD 1E 42 FC | 	wrbyte	local01, result1
19b14     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19b18     01 26 06 F1 | 	add	local05, #1
19b1c     11 27 62 FC | 	wrlong	local05, local03
19b20     06 20 06 F1 | 	add	local02, #6
19b24     10 29 EA FA | 	rdword	local06, local02 wz
19b28     06 20 86 F1 | 	sub	local02, #6
19b2c     0C 22 06 51 |  if_ne	add	local03, #12
19b30     11 25 02 5B |  if_ne	rdlong	local04, local03
19b34     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
19b38     0C 00 90 AD |  if_e	jmp	#LR__2670
19b3c     0A 1E 0E F2 | 	cmp	local01, #10 wz
19b40     01 28 0E A2 |  if_e	cmp	local06, #1 wz
19b44     10 00 90 5D |  if_ne	jmp	#LR__2671
19b48                 | LR__2670
19b48     10 13 02 F6 | 	mov	arg01, local02
19b4c     18 00 B0 FD | 	call	#__system____default_flush
19b50     00 FA 0D F2 | 	cmp	result1, #0 wz
19b54     01 1E 66 56 |  if_ne	neg	local01, #1
19b58                 | LR__2671
19b58     0F FB 01 F6 | 	mov	result1, local01
19b5c     A7 F0 03 F6 | 	mov	ptra, fp
19b60     B2 00 A0 FD | 	call	#popregs_
19b64                 | __system____default_putc_ret
19b64     2D 00 64 FD | 	ret
19b68                 | 
19b68                 | __system____default_flush
19b68     06 4A 05 F6 | 	mov	COUNT_, #6
19b6c     A8 00 A0 FD | 	call	#pushregs_
19b70     09 1F 02 F6 | 	mov	local01, arg01
19b74     0F 21 02 FB | 	rdlong	local02, local01
19b78     10 23 02 FB | 	rdlong	local03, local02
19b7c     08 20 06 F1 | 	add	local02, #8
19b80     10 FB 01 FB | 	rdlong	result1, local02
19b84     08 20 86 F1 | 	sub	local02, #8
19b88     02 FA CD F7 | 	test	result1, #2 wz
19b8c     D0 00 90 AD |  if_e	jmp	#LR__2682
19b90     01 22 56 F2 | 	cmps	local03, #1 wc
19b94     20 01 90 CD |  if_b	jmp	#LR__2684
19b98     08 1E 06 F1 | 	add	local01, #8
19b9c     0F FB 01 FB | 	rdlong	result1, local01
19ba0     08 1E 86 F1 | 	sub	local01, #8
19ba4     40 FA CD F7 | 	test	result1, #64 wz
19ba8     68 00 90 AD |  if_e	jmp	#LR__2681
19bac     08 1E 06 F1 | 	add	local01, #8
19bb0     0F 17 02 FB | 	rdlong	arg03, local01
19bb4     08 1E 86 F1 | 	sub	local01, #8
19bb8     80 16 CE F7 | 	test	arg03, #128 wz
19bbc     54 00 90 AD |  if_e	jmp	#LR__2680
19bc0     30 1E 06 F1 | 	add	local01, #48
19bc4     0F 25 02 FB | 	rdlong	local04, local01
19bc8     12 27 02 F6 | 	mov	local05, local04
19bcc     30 1E 86 F1 | 	sub	local01, #48
19bd0     13 26 46 F7 | 	zerox	local05, #19
19bd4     14 24 46 F0 | 	shr	local04, #20
19bd8     02 24 66 F0 | 	shl	local04, #2
19bdc     ED 24 02 F1 | 	add	local04, __methods__
19be0     12 25 02 FB | 	rdlong	local04, local04
19be4     0F 13 02 F6 | 	mov	arg01, local01
19be8     00 14 06 F6 | 	mov	arg02, #0
19bec     02 16 06 F6 | 	mov	arg03, #2
19bf0     F2 28 02 F6 | 	mov	local06, objptr
19bf4     13 E5 01 F6 | 	mov	objptr, local05
19bf8     2D 24 62 FD | 	call	local04
19bfc     14 E5 01 F6 | 	mov	objptr, local06
19c00     08 1E 06 F1 | 	add	local01, #8
19c04     0F 29 02 FB | 	rdlong	local06, local01
19c08     80 28 26 F5 | 	andn	local06, #128
19c0c     0F 29 62 FC | 	wrlong	local06, local01
19c10     08 1E 86 F1 | 	sub	local01, #8
19c14                 | LR__2680
19c14                 | LR__2681
19c14     18 1E 06 F1 | 	add	local01, #24
19c18     0F 25 02 FB | 	rdlong	local04, local01
19c1c     12 27 02 F6 | 	mov	local05, local04
19c20     18 1E 86 F1 | 	sub	local01, #24
19c24     13 26 46 F7 | 	zerox	local05, #19
19c28     14 24 46 F0 | 	shr	local04, #20
19c2c     02 24 66 F0 | 	shl	local04, #2
19c30     ED 24 02 F1 | 	add	local04, __methods__
19c34     12 25 02 FB | 	rdlong	local04, local04
19c38     10 20 06 F1 | 	add	local02, #16
19c3c     10 15 02 FB | 	rdlong	arg02, local02
19c40     10 20 86 F1 | 	sub	local02, #16
19c44     0F 13 02 F6 | 	mov	arg01, local01
19c48     11 17 02 F6 | 	mov	arg03, local03
19c4c     F2 28 02 F6 | 	mov	local06, objptr
19c50     13 E5 01 F6 | 	mov	objptr, local05
19c54     2D 24 62 FD | 	call	local04
19c58     14 E5 01 F6 | 	mov	objptr, local06
19c5c     58 00 90 FD | 	jmp	#LR__2684
19c60                 | LR__2682
19c60     08 20 06 F1 | 	add	local02, #8
19c64     10 29 02 FB | 	rdlong	local06, local02
19c68     08 20 86 F1 | 	sub	local02, #8
19c6c     01 28 CE F7 | 	test	local06, #1 wz
19c70     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
19c74     40 00 90 AD |  if_e	jmp	#LR__2683
19c78     30 1E 06 F1 | 	add	local01, #48
19c7c     0F 25 02 FB | 	rdlong	local04, local01
19c80     12 27 02 F6 | 	mov	local05, local04
19c84     30 1E 86 F1 | 	sub	local01, #48
19c88     13 26 46 F7 | 	zerox	local05, #19
19c8c     14 24 46 F0 | 	shr	local04, #20
19c90     02 24 66 F0 | 	shl	local04, #2
19c94     ED 24 02 F1 | 	add	local04, __methods__
19c98     12 25 02 FB | 	rdlong	local04, local04
19c9c     0F 13 02 F6 | 	mov	arg01, local01
19ca0     11 15 62 F6 | 	neg	arg02, local03
19ca4     01 16 06 F6 | 	mov	arg03, #1
19ca8     F2 28 02 F6 | 	mov	local06, objptr
19cac     13 E5 01 F6 | 	mov	objptr, local05
19cb0     2D 24 62 FD | 	call	local04
19cb4     14 E5 01 F6 | 	mov	objptr, local06
19cb8                 | LR__2683
19cb8                 | LR__2684
19cb8     10 01 68 FC | 	wrlong	#0, local02
19cbc     04 20 06 F1 | 	add	local02, #4
19cc0     10 01 68 FC | 	wrlong	#0, local02
19cc4     04 20 06 F1 | 	add	local02, #4
19cc8     10 01 68 FC | 	wrlong	#0, local02
19ccc     00 FA 05 F6 | 	mov	result1, #0
19cd0     A7 F0 03 F6 | 	mov	ptra, fp
19cd4     B2 00 A0 FD | 	call	#popregs_
19cd8                 | __system____default_flush_ret
19cd8     2D 00 64 FD | 	ret
19cdc                 | 
19cdc                 | __system____default_buffer_init
19cdc     02 4A 05 F6 | 	mov	COUNT_, #2
19ce0     A8 00 A0 FD | 	call	#pushregs_
19ce4     09 1F 02 F6 | 	mov	local01, arg01
19ce8     0F 21 02 FB | 	rdlong	local02, local01
19cec     0F 13 02 F6 | 	mov	arg01, local01
19cf0     F8 02 B0 FD | 	call	#__system___isatty
19cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
19cf8     06 1E 06 51 |  if_ne	add	local01, #6
19cfc     0F 0B 58 5C |  if_ne	wrword	#5, local01
19d00     06 1E 06 A1 |  if_e	add	local01, #6
19d04     0F 0D 58 AC |  if_e	wrword	#6, local01
19d08     14 20 06 F1 | 	add	local02, #20
19d0c     10 1F 02 F6 | 	mov	local01, local02
19d10     04 20 86 F1 | 	sub	local02, #4
19d14     10 1F 62 FC | 	wrlong	local01, local02
19d18     04 20 86 F1 | 	sub	local02, #4
19d1c     02 00 80 FF 
19d20     10 01 68 FC | 	wrlong	##1024, local02
19d24     00 FA 05 F6 | 	mov	result1, #0
19d28     A7 F0 03 F6 | 	mov	ptra, fp
19d2c     B2 00 A0 FD | 	call	#popregs_
19d30                 | __system____default_buffer_init_ret
19d30     2D 00 64 FD | 	ret
19d34                 | 
19d34                 | __system__stat
19d34     04 4A 05 F6 | 	mov	COUNT_, #4
19d38     A8 00 A0 FD | 	call	#pushregs_
19d3c     0A 1F 02 F6 | 	mov	local01, arg02
19d40     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19d44     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
19d48     09 15 02 F6 | 	mov	arg02, arg01
19d4c     10 13 02 F6 | 	mov	arg01, local02
19d50     00 16 06 F6 | 	mov	arg03, #0
19d54     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19d58     90 BC BF FD | 	call	#__system____getvfsforfile
19d5c     FD 22 0A F6 | 	mov	local03, result1 wz
19d60     10 00 90 AD |  if_e	jmp	#LR__2690
19d64     34 22 06 F1 | 	add	local03, #52
19d68     11 17 0A FB | 	rdlong	arg03, local03 wz
19d6c     34 22 86 F1 | 	sub	local03, #52
19d70     14 00 90 5D |  if_ne	jmp	#LR__2691
19d74                 | LR__2690
19d74     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19d78     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19d7c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19d80     01 FA 65 F6 | 	neg	result1, #1
19d84     68 00 90 FD | 	jmp	#LR__2692
19d88                 | LR__2691
19d88     0F 13 02 F6 | 	mov	arg01, local01
19d8c     00 14 06 F6 | 	mov	arg02, #0
19d90     30 16 06 F6 | 	mov	arg03, #48
19d94     09 25 02 F6 | 	mov	local04, arg01
19d98     98 00 A0 FD | 	call	#\builtin_bytefill_
19d9c     12 FB 01 F6 | 	mov	result1, local04
19da0     10 13 CA FA | 	rdbyte	arg01, local02 wz
19da4     08 1E 06 A1 |  if_e	add	local01, #8
19da8     08 00 80 AF 
19dac     0F FF 6B AC |  if_e	wrlong	##4607, local01
19db0     00 FA 05 A6 |  if_e	mov	result1, #0
19db4     38 00 90 AD |  if_e	jmp	#LR__2692
19db8     34 22 06 F1 | 	add	local03, #52
19dbc     11 23 02 FB | 	rdlong	local03, local03
19dc0     11 25 02 F6 | 	mov	local04, local03
19dc4     13 22 46 F7 | 	zerox	local03, #19
19dc8     14 24 46 F0 | 	shr	local04, #20
19dcc     02 24 66 F0 | 	shl	local04, #2
19dd0     ED 24 02 F1 | 	add	local04, __methods__
19dd4     12 25 02 FB | 	rdlong	local04, local04
19dd8     10 13 02 F6 | 	mov	arg01, local02
19ddc     0F 15 02 F6 | 	mov	arg02, local01
19de0     F2 20 02 F6 | 	mov	local02, objptr
19de4     11 E5 01 F6 | 	mov	objptr, local03
19de8     2D 24 62 FD | 	call	local04
19dec     10 E5 01 F6 | 	mov	objptr, local02
19df0                 | LR__2692
19df0     A7 F0 03 F6 | 	mov	ptra, fp
19df4     B2 00 A0 FD | 	call	#popregs_
19df8                 | __system__stat_ret
19df8     2D 00 64 FD | 	ret
19dfc                 | 
19dfc                 | __system__read
19dfc     0A 12 16 F2 | 	cmp	arg01, #10 wc
19e00     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19e04     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19e08     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19e0c     01 FA 65 36 |  if_ae	neg	result1, #1
19e10     20 00 90 3D |  if_ae	jmp	#LR__2700
19e14     34 12 06 FD | 	qmul	arg01, #52
19e18     02 00 00 FF 
19e1c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
19e20     18 12 62 FD | 	getqx	arg01
19e24     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19e28     02 00 00 FF 
19e2c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
19e30     D0 0F B0 FD | 	call	#__system___vfsread
19e34                 | LR__2700
19e34                 | __system__read_ret
19e34     2D 00 64 FD | 	ret
19e38                 | 
19e38                 | __system__close
19e38     0A 12 16 F2 | 	cmp	arg01, #10 wc
19e3c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19e40     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19e44     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19e48     01 FA 65 36 |  if_ae	neg	result1, #1
19e4c     20 00 90 3D |  if_ae	jmp	#LR__2710
19e50     34 12 06 FD | 	qmul	arg01, #52
19e54     02 00 00 FF 
19e58     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
19e5c     18 12 62 FD | 	getqx	arg01
19e60     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19e64     02 00 00 FF 
19e68     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
19e6c     4C F9 BF FD | 	call	#__system___closeraw
19e70                 | LR__2710
19e70                 | __system__close_ret
19e70     2D 00 64 FD | 	ret
19e74                 | 
19e74                 | __system__lseek
19e74     06 4A 05 F6 | 	mov	COUNT_, #6
19e78     A8 00 A0 FD | 	call	#pushregs_
19e7c     0A 12 16 F2 | 	cmp	arg01, #10 wc
19e80     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19e84     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19e88     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19e8c     01 FA 65 36 |  if_ae	neg	result1, #1
19e90     C4 00 90 3D |  if_ae	jmp	#LR__2721
19e94     34 12 06 FD | 	qmul	arg01, #52
19e98     02 00 00 FF 
19e9c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
19ea0     18 1E 62 FD | 	getqx	local01
19ea4     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
19ea8     30 1E 06 F1 | 	add	local01, #48
19eac     0F 13 0A FB | 	rdlong	arg01, local01 wz
19eb0     30 1E 86 F1 | 	sub	local01, #48
19eb4     02 00 00 FF 
19eb8     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
19ebc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19ec0     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
19ec4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19ec8     01 FA 65 A6 |  if_e	neg	result1, #1
19ecc     88 00 90 AD |  if_e	jmp	#LR__2721
19ed0     08 1E 06 F1 | 	add	local01, #8
19ed4     0F 21 02 FB | 	rdlong	local02, local01
19ed8     08 1E 86 F1 | 	sub	local01, #8
19edc     40 20 CE F7 | 	test	local02, #64 wz
19ee0     08 1E 06 51 |  if_ne	add	local01, #8
19ee4     0F 21 02 5B |  if_ne	rdlong	local02, local01
19ee8     80 20 46 55 |  if_ne	or	local02, #128
19eec     0F 21 62 5C |  if_ne	wrlong	local02, local01
19ef0     08 1E 86 51 |  if_ne	sub	local01, #8
19ef4     30 1E 06 F1 | 	add	local01, #48
19ef8     0F 23 02 FB | 	rdlong	local03, local01
19efc     11 25 02 F6 | 	mov	local04, local03
19f00     30 1E 86 F1 | 	sub	local01, #48
19f04     13 24 46 F7 | 	zerox	local04, #19
19f08     14 22 46 F0 | 	shr	local03, #20
19f0c     02 22 66 F0 | 	shl	local03, #2
19f10     ED 22 02 F1 | 	add	local03, __methods__
19f14     11 23 02 FB | 	rdlong	local03, local03
19f18     0F 13 02 F6 | 	mov	arg01, local01
19f1c     F2 26 02 F6 | 	mov	local05, objptr
19f20     12 E5 01 F6 | 	mov	objptr, local04
19f24     2D 22 62 FD | 	call	local03
19f28     13 E5 01 F6 | 	mov	objptr, local05
19f2c     FD 28 02 F6 | 	mov	local06, result1
19f30     00 28 56 F2 | 	cmps	local06, #0 wc
19f34     1C 00 90 3D |  if_ae	jmp	#LR__2720
19f38     14 13 6A F6 | 	neg	arg01, local06 wz
19f3c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19f40     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19f44     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19f48     01 FA 65 56 |  if_ne	neg	result1, #1
19f4c     00 FA 05 A6 |  if_e	mov	result1, #0
19f50     04 00 90 FD | 	jmp	#LR__2721
19f54                 | LR__2720
19f54     14 FB 01 F6 | 	mov	result1, local06
19f58                 | LR__2721
19f58     A7 F0 03 F6 | 	mov	ptra, fp
19f5c     B2 00 A0 FD | 	call	#popregs_
19f60                 | __system__lseek_ret
19f60     2D 00 64 FD | 	ret
19f64                 | 
19f64                 | __system___ioctl
19f64     03 4A 05 F6 | 	mov	COUNT_, #3
19f68     A8 00 A0 FD | 	call	#pushregs_
19f6c     00 12 4E F2 | 	cmps	arg01, #0 wz
19f70     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19f74     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
19f78     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19f7c     01 FA 65 A6 |  if_e	neg	result1, #1
19f80     5C 00 90 AD |  if_e	jmp	#LR__2731
19f84     28 12 06 F1 | 	add	arg01, #40
19f88     09 1F 02 FB | 	rdlong	local01, arg01
19f8c     0F 21 02 F6 | 	mov	local02, local01
19f90     28 12 86 F1 | 	sub	arg01, #40
19f94     13 20 46 F7 | 	zerox	local02, #19
19f98     14 1E 46 F0 | 	shr	local01, #20
19f9c     02 1E 66 F0 | 	shl	local01, #2
19fa0     ED 1E 02 F1 | 	add	local01, __methods__
19fa4     0F 1F 02 FB | 	rdlong	local01, local01
19fa8     F2 22 02 F6 | 	mov	local03, objptr
19fac     10 E5 01 F6 | 	mov	objptr, local02
19fb0     2D 1E 62 FD | 	call	local01
19fb4     11 E5 01 F6 | 	mov	objptr, local03
19fb8     FD 12 0A F6 | 	mov	arg01, result1 wz
19fbc     1C 00 90 AD |  if_e	jmp	#LR__2730
19fc0     00 12 4E F2 | 	cmps	arg01, #0 wz
19fc4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19fc8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19fcc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19fd0     01 FA 65 56 |  if_ne	neg	result1, #1
19fd4     00 FA 05 A6 |  if_e	mov	result1, #0
19fd8     04 00 90 FD | 	jmp	#LR__2731
19fdc                 | LR__2730
19fdc     00 FA 05 F6 | 	mov	result1, #0
19fe0                 | LR__2731
19fe0     A7 F0 03 F6 | 	mov	ptra, fp
19fe4     B2 00 A0 FD | 	call	#popregs_
19fe8                 | __system___ioctl_ret
19fe8     2D 00 64 FD | 	ret
19fec                 | 
19fec                 | __system___isatty
19fec     00 4A 05 F6 | 	mov	COUNT_, #0
19ff0     A8 00 A0 FD | 	call	#pushregs_
19ff4     0C F0 07 F1 | 	add	ptra, #12
19ff8     04 4E 05 F1 | 	add	fp, #4
19ffc     A7 12 62 FC | 	wrlong	arg01, fp
1a000     04 4E 05 F1 | 	add	fp, #4
1a004     A7 16 02 F6 | 	mov	arg03, fp
1a008     08 4E 85 F1 | 	sub	fp, #8
1a00c     00 15 06 F6 | 	mov	arg02, #256
1a010     50 FF BF FD | 	call	#__system___ioctl
1a014     00 FA 0D F2 | 	cmp	result1, #0 wz
1a018     01 FA 05 A6 |  if_e	mov	result1, #1
1a01c     00 FA 05 56 |  if_ne	mov	result1, #0
1a020     A7 F0 03 F6 | 	mov	ptra, fp
1a024     B2 00 A0 FD | 	call	#popregs_
1a028                 | __system___isatty_ret
1a028     2D 00 64 FD | 	ret
1a02c                 | 
1a02c                 | __system____getftab
1a02c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a030     34 12 06 CD |  if_b	qmul	arg01, #52
1a034     00 FA 05 36 |  if_ae	mov	result1, #0
1a038     02 00 00 CF 
1a03c     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1a040     18 FA 61 CD |  if_b	getqx	result1
1a044     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1a048     02 00 00 CF 
1a04c     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1a050                 | __system____getftab_ret
1a050     2D 00 64 FD | 	ret
1a054                 | 
1a054                 | __system__strncpy
1a054     09 01 02 F6 | 	mov	_var01, arg01
1a058                 | LR__2740
1a058     01 16 86 F1 | 	sub	arg03, #1
1a05c     00 16 56 F2 | 	cmps	arg03, #0 wc
1a060     18 00 90 CD |  if_b	jmp	#LR__2741
1a064     0A FB C1 FA | 	rdbyte	result1, arg02
1a068     00 FB 41 FC | 	wrbyte	result1, _var01
1a06c     01 14 06 F1 | 	add	arg02, #1
1a070     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a074     01 00 06 F1 | 	add	_var01, #1
1a078     DC FF 9F 5D |  if_ne	jmp	#LR__2740
1a07c                 | LR__2741
1a07c     97 0C 48 FB | 	callpa	#(@LR__2743-@LR__2742)>>2,fcache_load_ptr_
1a080                 | LR__2742
1a080     01 16 86 F1 | 	sub	arg03, #1
1a084     00 16 56 F2 | 	cmps	arg03, #0 wc
1a088     00 03 02 36 |  if_ae	mov	_var02, _var01
1a08c     01 00 06 31 |  if_ae	add	_var01, #1
1a090     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1a094     E8 FF 9F 3D |  if_ae	jmp	#LR__2742
1a098                 | LR__2743
1a098     09 FB 01 F6 | 	mov	result1, arg01
1a09c                 | __system__strncpy_ret
1a09c     2D 00 64 FD | 	ret
1a0a0                 | 
1a0a0                 | __system__strncat
1a0a0     00 14 4E F2 | 	cmps	arg02, #0 wz
1a0a4     50 00 90 AD |  if_e	jmp	#LR__2754
1a0a8     01 16 16 F2 | 	cmp	arg03, #1 wc
1a0ac     48 00 90 CD |  if_b	jmp	#LR__2754
1a0b0     09 01 02 F6 | 	mov	_var01, arg01
1a0b4     97 1E 48 FB | 	callpa	#(@LR__2752-@LR__2750)>>2,fcache_load_ptr_
1a0b8                 | LR__2750
1a0b8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a0bc     01 00 06 51 |  if_ne	add	_var01, #1
1a0c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2750
1a0c4     0B 03 02 F6 | 	mov	_var02, arg03
1a0c8                 | LR__2751
1a0c8     0A 05 C2 FA | 	rdbyte	_var03, arg02
1a0cc     02 07 02 F6 | 	mov	_var04, _var03
1a0d0     07 06 4E F7 | 	zerox	_var04, #7 wz
1a0d4     01 14 06 F1 | 	add	arg02, #1
1a0d8     18 00 90 AD |  if_e	jmp	#LR__2753
1a0dc     01 02 86 F1 | 	sub	_var02, #1
1a0e0     00 02 56 F2 | 	cmps	_var02, #0 wc
1a0e4     00 07 02 36 |  if_ae	mov	_var04, _var01
1a0e8     01 00 06 31 |  if_ae	add	_var01, #1
1a0ec     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1a0f0     D4 FF 9F 3D |  if_ae	jmp	#LR__2751
1a0f4                 | LR__2752
1a0f4                 | LR__2753
1a0f4     00 01 48 FC | 	wrbyte	#0, _var01
1a0f8                 | LR__2754
1a0f8     09 FB 01 F6 | 	mov	result1, arg01
1a0fc                 | __system__strncat_ret
1a0fc     2D 00 64 FD | 	ret
1a100                 | 
1a100                 | __system__strncmp
1a100     09 01 0A F6 | 	mov	_var01, arg01 wz
1a104     14 00 90 5D |  if_ne	jmp	#LR__2760
1a108     00 14 0E F2 | 	cmp	arg02, #0 wz
1a10c     01 02 66 56 |  if_ne	neg	_var02, #1
1a110     00 02 06 A6 |  if_e	mov	_var02, #0
1a114     01 FB 01 F6 | 	mov	result1, _var02
1a118     74 00 90 FD | 	jmp	#__system__strncmp_ret
1a11c                 | LR__2760
1a11c     00 14 0E F2 | 	cmp	arg02, #0 wz
1a120     01 FA 05 A6 |  if_e	mov	result1, #1
1a124     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a128     0B 05 02 F6 | 	mov	_var03, arg03
1a12c     97 16 48 FB | 	callpa	#(@LR__2762-@LR__2761)>>2,fcache_load_ptr_
1a130                 | LR__2761
1a130     00 07 C2 FA | 	rdbyte	_var04, _var01
1a134     0A 09 02 F6 | 	mov	_var05, arg02
1a138     04 0B C2 FA | 	rdbyte	_var06, _var05
1a13c     01 04 86 F1 | 	sub	_var03, #1
1a140     00 04 56 F2 | 	cmps	_var03, #0 wc
1a144     01 00 06 F1 | 	add	_var01, #1
1a148     01 14 06 F1 | 	add	arg02, #1
1a14c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1a150     08 00 90 2D |  if_nc_and_z	jmp	#LR__2763
1a154     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1a158     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2761
1a15c                 | LR__2762
1a15c                 | LR__2763
1a15c     00 04 56 F2 | 	cmps	_var03, #0 wc
1a160     00 FA 05 C6 |  if_b	mov	result1, #0
1a164     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1a168     05 07 0A F2 | 	cmp	_var04, _var06 wz
1a16c     00 FA 05 A6 |  if_e	mov	result1, #0
1a170     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a174     00 06 0E F2 | 	cmp	_var04, #0 wz
1a178     01 FA 65 A6 |  if_e	neg	result1, #1
1a17c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a180     00 0A 0E F2 | 	cmp	_var06, #0 wz
1a184     01 FA 05 A6 |  if_e	mov	result1, #1
1a188     03 FB 01 56 |  if_ne	mov	result1, _var04
1a18c     05 FB 81 51 |  if_ne	sub	result1, _var06
1a190                 | __system__strncmp_ret
1a190     2D 00 64 FD | 	ret
1a194                 | 
1a194                 | __system____root_opendir
1a194     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1a198     04 12 06 F1 | 	add	arg01, #4
1a19c     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1a1a0     00 FA 05 F6 | 	mov	result1, #0
1a1a4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1a1a8                 | __system____root_opendir_ret
1a1a8     2D 00 64 FD | 	ret
1a1ac                 | 
1a1ac                 | __system____root_readdir
1a1ac     03 4A 05 F6 | 	mov	COUNT_, #3
1a1b0     A8 00 A0 FD | 	call	#pushregs_
1a1b4     09 1F 02 F6 | 	mov	local01, arg01
1a1b8     0A 21 02 F6 | 	mov	local02, arg02
1a1bc     04 1E 06 F1 | 	add	local01, #4
1a1c0     0F 23 02 FB | 	rdlong	local03, local01
1a1c4     04 1E 86 F1 | 	sub	local01, #4
1a1c8                 | LR__2770
1a1c8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1a1cc     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1a1d0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1a1d4     01 FA 65 A6 |  if_e	neg	result1, #1
1a1d8     48 00 90 AD |  if_e	jmp	#LR__2771
1a1dc     11 17 0A FB | 	rdlong	arg03, local03 wz
1a1e0     04 22 06 A1 |  if_e	add	local03, #4
1a1e4     E0 FF 9F AD |  if_e	jmp	#LR__2770
1a1e8     11 15 02 FB | 	rdlong	arg02, local03
1a1ec     01 14 06 F1 | 	add	arg02, #1
1a1f0     10 13 02 F6 | 	mov	arg01, local02
1a1f4     40 16 06 F6 | 	mov	arg03, #64
1a1f8     58 FE BF FD | 	call	#__system__strncpy
1a1fc     50 20 06 F1 | 	add	local02, #80
1a200     10 03 48 FC | 	wrbyte	#1, local02
1a204     08 20 86 F1 | 	sub	local02, #8
1a208     10 01 68 FC | 	wrlong	#0, local02
1a20c     04 20 06 F1 | 	add	local02, #4
1a210     10 01 68 FC | 	wrlong	#0, local02
1a214     04 22 06 F1 | 	add	local03, #4
1a218     04 1E 06 F1 | 	add	local01, #4
1a21c     0F 23 62 FC | 	wrlong	local03, local01
1a220     00 FA 05 F6 | 	mov	result1, #0
1a224                 | LR__2771
1a224     A7 F0 03 F6 | 	mov	ptra, fp
1a228     B2 00 A0 FD | 	call	#popregs_
1a22c                 | __system____root_readdir_ret
1a22c     2D 00 64 FD | 	ret
1a230                 | 
1a230                 | __system____root_closedir
1a230     00 FA 05 F6 | 	mov	result1, #0
1a234                 | __system____root_closedir_ret
1a234     2D 00 64 FD | 	ret
1a238                 | 
1a238                 | __system____root_stat
1a238     0A 01 02 F6 | 	mov	_var01, arg02
1a23c     00 13 02 F6 | 	mov	arg01, _var01
1a240     00 14 06 F6 | 	mov	arg02, #0
1a244     30 16 06 F6 | 	mov	arg03, #48
1a248     98 00 A0 FD | 	call	#\builtin_bytefill_
1a24c     08 00 06 F1 | 	add	_var01, #8
1a250     08 00 80 FF 
1a254     00 FF 6B FC | 	wrlong	##4607, _var01
1a258     00 FA 05 F6 | 	mov	result1, #0
1a25c                 | __system____root_stat_ret
1a25c     2D 00 64 FD | 	ret
1a260                 | 
1a260                 | __system___normalizeName
1a260     00 00 06 F6 | 	mov	_var01, #0
1a264     09 03 02 F6 | 	mov	_var02, arg01
1a268     01 05 02 F6 | 	mov	_var03, _var02
1a26c                 | LR__2780
1a26c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a270     5C 01 90 AD |  if_e	jmp	#LR__2799
1a274     00 00 0E F2 | 	cmp	_var01, #0 wz
1a278     02 07 02 56 |  if_ne	mov	_var04, _var03
1a27c     01 04 06 51 |  if_ne	add	_var03, #1
1a280     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1a284     00 00 06 56 |  if_ne	mov	_var01, #0
1a288     01 07 C2 FA | 	rdbyte	_var04, _var02
1a28c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a290     D8 00 90 5D |  if_ne	jmp	#LR__2792
1a294     01 02 06 F1 | 	add	_var02, #1
1a298     01 07 C2 FA | 	rdbyte	_var04, _var02
1a29c     01 02 86 F1 | 	sub	_var02, #1
1a2a0     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a2a4     18 00 90 AD |  if_e	jmp	#LR__2781
1a2a8     01 02 06 F1 | 	add	_var02, #1
1a2ac     01 09 C2 FA | 	rdbyte	_var05, _var02
1a2b0     01 02 86 F1 | 	sub	_var02, #1
1a2b4     04 0B 02 F6 | 	mov	_var06, _var05
1a2b8     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a2bc     10 00 90 5D |  if_ne	jmp	#LR__2782
1a2c0                 | LR__2781
1a2c0     01 0D 02 F6 | 	mov	_var07, _var02
1a2c4     01 0C 06 F1 | 	add	_var07, #1
1a2c8     06 03 02 F6 | 	mov	_var02, _var07
1a2cc     E0 00 90 FD | 	jmp	#LR__2796
1a2d0                 | LR__2782
1a2d0     01 02 06 F1 | 	add	_var02, #1
1a2d4     01 0D C2 FA | 	rdbyte	_var07, _var02
1a2d8     01 02 86 F1 | 	sub	_var02, #1
1a2dc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a2e0     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a2e4     84 00 90 5D |  if_ne	jmp	#LR__2791
1a2e8     02 02 06 F1 | 	add	_var02, #2
1a2ec     01 0D C2 FA | 	rdbyte	_var07, _var02
1a2f0     02 02 86 F1 | 	sub	_var02, #2
1a2f4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a2f8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a2fc     18 00 90 AD |  if_e	jmp	#LR__2783
1a300     02 02 06 F1 | 	add	_var02, #2
1a304     01 09 C2 FA | 	rdbyte	_var05, _var02
1a308     02 02 86 F1 | 	sub	_var02, #2
1a30c     04 0B 02 F6 | 	mov	_var06, _var05
1a310     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a314     54 00 90 5D |  if_ne	jmp	#LR__2790
1a318                 | LR__2783
1a318     02 02 06 F1 | 	add	_var02, #2
1a31c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1a320     40 00 90 ED |  if_be	jmp	#LR__2789
1a324     02 0F 02 F6 | 	mov	_var08, _var03
1a328     01 0E 86 F1 | 	sub	_var08, #1
1a32c                 | LR__2784
1a32c     07 07 C2 FA | 	rdbyte	_var04, _var08
1a330     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a334     0C 00 90 5D |  if_ne	jmp	#LR__2785
1a338     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a33c     01 0E 86 11 |  if_a	sub	_var08, #1
1a340     E8 FF 9F 1D |  if_a	jmp	#LR__2784
1a344                 | LR__2785
1a344     97 0C 48 FB | 	callpa	#(@LR__2787-@LR__2786)>>2,fcache_load_ptr_
1a348                 | LR__2786
1a348     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a34c     10 00 90 ED |  if_be	jmp	#LR__2788
1a350     07 07 C2 FA | 	rdbyte	_var04, _var08
1a354     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a358     01 0E 86 51 |  if_ne	sub	_var08, #1
1a35c     E8 FF 9F 5D |  if_ne	jmp	#LR__2786
1a360                 | LR__2787
1a360                 | LR__2788
1a360     07 05 02 F6 | 	mov	_var03, _var08
1a364                 | LR__2789
1a364     01 00 06 F6 | 	mov	_var01, #1
1a368     44 00 90 FD | 	jmp	#LR__2796
1a36c                 | LR__2790
1a36c                 | LR__2791
1a36c                 | LR__2792
1a36c     97 18 48 FB | 	callpa	#(@LR__2794-@LR__2793)>>2,fcache_load_ptr_
1a370                 | LR__2793
1a370     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a374     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1a378     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1a37c     20 00 90 AD |  if_e	jmp	#LR__2795
1a380     01 0B 02 F6 | 	mov	_var06, _var02
1a384     01 09 02 F6 | 	mov	_var05, _var02
1a388     01 08 06 F1 | 	add	_var05, #1
1a38c     05 11 C2 FA | 	rdbyte	_var09, _var06
1a390     04 03 02 F6 | 	mov	_var02, _var05
1a394     02 11 42 FC | 	wrbyte	_var09, _var03
1a398     01 04 06 F1 | 	add	_var03, #1
1a39c     D0 FF 9F FD | 	jmp	#LR__2793
1a3a0                 | LR__2794
1a3a0                 | LR__2795
1a3a0     01 07 C2 FA | 	rdbyte	_var04, _var02
1a3a4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a3a8     C0 FE 9F 5D |  if_ne	jmp	#LR__2780
1a3ac     01 00 06 F6 | 	mov	_var01, #1
1a3b0                 | LR__2796
1a3b0     97 0C 48 FB | 	callpa	#(@LR__2798-@LR__2797)>>2,fcache_load_ptr_
1a3b4                 | LR__2797
1a3b4     01 07 C2 FA | 	rdbyte	_var04, _var02
1a3b8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a3bc     01 0D 02 A6 |  if_e	mov	_var07, _var02
1a3c0     01 0C 06 A1 |  if_e	add	_var07, #1
1a3c4     06 03 02 A6 |  if_e	mov	_var02, _var07
1a3c8     E8 FF 9F AD |  if_e	jmp	#LR__2797
1a3cc                 | LR__2798
1a3cc     9C FE 9F FD | 	jmp	#LR__2780
1a3d0                 | LR__2799
1a3d0     02 01 48 FC | 	wrbyte	#0, _var03
1a3d4                 | __system___normalizeName_ret
1a3d4     2D 00 64 FD | 	ret
1a3d8                 | 
1a3d8                 | __system___strrev
1a3d8     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1a3dc     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1a3e0     09 03 02 F6 | 	mov	_var02, arg01
1a3e4     97 1A 48 FB | 	callpa	#(@LR__2802-@LR__2800)>>2,fcache_load_ptr_
1a3e8                 | LR__2800
1a3e8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1a3ec     01 02 06 51 |  if_ne	add	_var02, #1
1a3f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2800
1a3f4     01 02 86 F1 | 	sub	_var02, #1
1a3f8                 | LR__2801
1a3f8     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1a3fc     1C 00 90 ED |  if_be	jmp	#LR__2803
1a400     09 01 C2 FA | 	rdbyte	_var01, arg01
1a404     01 05 C2 FA | 	rdbyte	_var03, _var02
1a408     09 05 42 FC | 	wrbyte	_var03, arg01
1a40c     01 01 42 FC | 	wrbyte	_var01, _var02
1a410     01 12 06 F1 | 	add	arg01, #1
1a414     01 02 86 F1 | 	sub	_var02, #1
1a418     DC FF 9F FD | 	jmp	#LR__2801
1a41c                 | LR__2802
1a41c                 | LR__2803
1a41c                 | __system___strrev_ret
1a41c     2D 00 64 FD | 	ret
1a420                 | 
1a420                 | __system___fmtpad
1a420     06 4A 05 F6 | 	mov	COUNT_, #6
1a424     A8 00 A0 FD | 	call	#pushregs_
1a428     09 1F 02 F6 | 	mov	local01, arg01
1a42c     0A 21 02 F6 | 	mov	local02, arg02
1a430     0B 23 02 F6 | 	mov	local03, arg03
1a434     10 13 EA F8 | 	getbyte	arg01, local02, #1
1a438     16 20 46 F0 | 	shr	local02, #22
1a43c     03 20 0E F5 | 	and	local02, #3 wz
1a440     00 24 06 F6 | 	mov	local04, #0
1a444     01 20 06 A6 |  if_e	mov	local02, #1
1a448     0C 21 CA F7 | 	test	local02, arg04 wz
1a44c     00 FA 05 A6 |  if_e	mov	result1, #0
1a450     88 00 90 AD |  if_e	jmp	#LR__2813
1a454     09 23 C2 F2 | 	subr	local03, arg01
1a458     01 22 56 F2 | 	cmps	local03, #1 wc
1a45c     00 FA 05 C6 |  if_b	mov	result1, #0
1a460     78 00 90 CD |  if_b	jmp	#LR__2813
1a464     03 20 0E F2 | 	cmp	local02, #3 wz
1a468     18 00 90 5D |  if_ne	jmp	#LR__2810
1a46c     01 18 0E F2 | 	cmp	arg04, #1 wz
1a470     6E 20 62 FD | 	wrz	local02
1a474     10 23 02 F1 | 	add	local03, local02
1a478     11 23 52 F6 | 	abs	local03, local03 wc
1a47c     01 22 46 F0 | 	shr	local03, #1
1a480     11 23 82 F6 | 	negc	local03, local03
1a484                 | LR__2810
1a484     01 22 56 F2 | 	cmps	local03, #1 wc
1a488     4C 00 90 CD |  if_b	jmp	#LR__2812
1a48c     11 27 02 F6 | 	mov	local05, local03
1a490                 | LR__2811
1a490     0F 21 02 F6 | 	mov	local02, local01
1a494     0F 29 02 F6 | 	mov	local06, local01
1a498     13 20 46 F7 | 	zerox	local02, #19
1a49c     14 28 46 F0 | 	shr	local06, #20
1a4a0     02 28 66 F0 | 	shl	local06, #2
1a4a4     ED 28 02 F1 | 	add	local06, __methods__
1a4a8     14 29 02 FB | 	rdlong	local06, local06
1a4ac     20 12 06 F6 | 	mov	arg01, #32
1a4b0     F2 22 02 F6 | 	mov	local03, objptr
1a4b4     10 E5 01 F6 | 	mov	objptr, local02
1a4b8     2D 28 62 FD | 	call	local06
1a4bc     11 E5 01 F6 | 	mov	objptr, local03
1a4c0     FD 28 02 F6 | 	mov	local06, result1
1a4c4     00 28 56 F2 | 	cmps	local06, #0 wc
1a4c8     14 FB 01 C6 |  if_b	mov	result1, local06
1a4cc     0C 00 90 CD |  if_b	jmp	#LR__2813
1a4d0     14 25 02 F1 | 	add	local04, local06
1a4d4     EE 27 6E FB | 	djnz	local05, #LR__2811
1a4d8                 | LR__2812
1a4d8     12 FB 01 F6 | 	mov	result1, local04
1a4dc                 | LR__2813
1a4dc     A7 F0 03 F6 | 	mov	ptra, fp
1a4e0     B2 00 A0 FD | 	call	#popregs_
1a4e4                 | __system___fmtpad_ret
1a4e4     2D 00 64 FD | 	ret
1a4e8                 | 
1a4e8                 | __system___uitoa
1a4e8     04 4A 05 F6 | 	mov	COUNT_, #4
1a4ec     A8 00 A0 FD | 	call	#pushregs_
1a4f0     09 1F 02 F6 | 	mov	local01, arg01
1a4f4     00 1A 4E F2 | 	cmps	arg05, #0 wz
1a4f8     0F 1B 02 F6 | 	mov	arg05, local01
1a4fc     00 20 06 F6 | 	mov	local02, #0
1a500     37 22 06 56 |  if_ne	mov	local03, #55
1a504     57 22 06 A6 |  if_e	mov	local03, #87
1a508                 | LR__2820
1a508     0B 15 12 FD | 	qdiv	arg02, arg03
1a50c     19 24 62 FD | 	getqy	local04
1a510     0B 15 12 FD | 	qdiv	arg02, arg03
1a514     0A 24 16 F2 | 	cmp	local04, #10 wc
1a518     30 24 06 C1 |  if_b	add	local04, #48
1a51c     11 25 02 31 |  if_ae	add	local04, local03
1a520     0D 25 42 FC | 	wrbyte	local04, arg05
1a524     01 1A 06 F1 | 	add	arg05, #1
1a528     01 20 06 F1 | 	add	local02, #1
1a52c     18 14 62 FD | 	getqx	arg02
1a530     00 14 0E F2 | 	cmp	arg02, #0 wz
1a534     D0 FF 9F 5D |  if_ne	jmp	#LR__2820
1a538     0C 21 12 F2 | 	cmp	local02, arg04 wc
1a53c     C8 FF 9F CD |  if_b	jmp	#LR__2820
1a540     0D 01 48 FC | 	wrbyte	#0, arg05
1a544     0F 13 02 F6 | 	mov	arg01, local01
1a548     8C FE BF FD | 	call	#__system___strrev
1a54c     10 FB 01 F6 | 	mov	result1, local02
1a550     A7 F0 03 F6 | 	mov	ptra, fp
1a554     B2 00 A0 FD | 	call	#popregs_
1a558                 | __system___uitoa_ret
1a558     2D 00 64 FD | 	ret
1a55c                 | 
1a55c                 | __system__disassemble_0292
1a55c     10 4A 05 F6 | 	mov	COUNT_, #16
1a560     A8 00 A0 FD | 	call	#pushregs_
1a564     09 1F 02 F6 | 	mov	local01, arg01
1a568     0A 21 02 F6 | 	mov	local02, arg02
1a56c     0B 23 02 F6 | 	mov	local03, arg03
1a570     0C 25 02 F6 | 	mov	local04, arg04
1a574     0D 27 02 F6 | 	mov	local05, arg05
1a578     13 13 52 F6 | 	abs	arg01, local05 wc
1a57c     1F 28 C6 C9 |  if_b	decod	local06, #31
1a580     00 28 06 36 |  if_ae	mov	local06, #0
1a584     B4 D3 BF FD | 	call	#__system___float_fromuns
1a588     14 FB 61 F5 | 	xor	result1, local06
1a58c     FD 2A 02 F6 | 	mov	local07, result1
1a590     00 2C 06 F6 | 	mov	local08, #0
1a594     0F 13 02 F6 | 	mov	arg01, local01
1a598     00 14 06 F6 | 	mov	arg02, #0
1a59c     01 16 06 F6 | 	mov	arg03, #1
1a5a0     F8 DA BF FD | 	call	#__system___float_cmp
1a5a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5a8     00 2E 06 A6 |  if_e	mov	local09, #0
1a5ac     10 01 68 AC |  if_e	wrlong	#0, local02
1a5b0     11 2F 62 AC |  if_e	wrlong	local09, local03
1a5b4     8C 01 90 AD |  if_e	jmp	#LR__2842
1a5b8     0F 13 02 F6 | 	mov	arg01, local01
1a5bc     A8 DF BF FD | 	call	#__system____builtin_ilogb
1a5c0     FD 30 02 F6 | 	mov	local10, result1
1a5c4     0A 26 0E F2 | 	cmp	local05, #10 wz
1a5c8     24 00 90 5D |  if_ne	jmp	#LR__2830
1a5cc     18 2F 02 F6 | 	mov	local09, local10
1a5d0     01 2E 66 F0 | 	shl	local09, #1
1a5d4     18 2F 02 F1 | 	add	local09, local10
1a5d8     17 31 52 F6 | 	abs	local10, local09 wc
1a5dc     0A 30 16 FD | 	qdiv	local10, #10
1a5e0     09 32 06 F6 | 	mov	local11, #9
1a5e4     18 30 62 FD | 	getqx	local10
1a5e8     18 31 82 F6 | 	negc	local10, local10
1a5ec     04 00 90 FD | 	jmp	#LR__2831
1a5f0                 | LR__2830
1a5f0     18 32 06 F6 | 	mov	local11, #24
1a5f4                 | LR__2831
1a5f4                 | LR__2832
1a5f4     08 2C 56 F2 | 	cmps	local08, #8 wc
1a5f8     01 2C 06 F1 | 	add	local08, #1
1a5fc     60 00 90 3D |  if_ae	jmp	#LR__2833
1a600     00 C0 1F FF 
1a604     00 12 06 F6 | 	mov	arg01, ##1065353216
1a608     15 15 02 F6 | 	mov	arg02, local07
1a60c     18 17 02 F6 | 	mov	arg03, local10
1a610     88 E3 BF FD | 	call	#__system___float_pow_n
1a614     FD 14 02 F6 | 	mov	arg02, result1
1a618     0F 13 02 F6 | 	mov	arg01, local01
1a61c     4C D8 BF FD | 	call	#__system___float_div
1a620     FD 34 02 F6 | 	mov	local12, result1
1a624     1A 13 02 F6 | 	mov	arg01, local12
1a628     00 C0 1F FF 
1a62c     00 14 06 F6 | 	mov	arg02, ##1065353216
1a630     01 16 06 F6 | 	mov	arg03, #1
1a634     64 DA BF FD | 	call	#__system___float_cmp
1a638     00 FA 55 F2 | 	cmps	result1, #0 wc
1a63c     01 30 86 C1 |  if_b	sub	local10, #1
1a640     B0 FF 9F CD |  if_b	jmp	#LR__2832
1a644     15 15 02 F6 | 	mov	arg02, local07
1a648     1A 13 02 F6 | 	mov	arg01, local12
1a64c     01 16 66 F6 | 	neg	arg03, #1
1a650     48 DA BF FD | 	call	#__system___float_cmp
1a654     00 FA 55 F2 | 	cmps	result1, #0 wc
1a658     01 30 06 31 |  if_ae	add	local10, #1
1a65c     94 FF 9F 3D |  if_ae	jmp	#LR__2832
1a660                 | LR__2833
1a660     1A 13 02 F6 | 	mov	arg01, local12
1a664     00 DF BF FD | 	call	#__system____builtin_ilogb
1a668     FD 36 02 F6 | 	mov	local13, result1
1a66c     1A 39 02 F6 | 	mov	local14, local12
1a670     17 39 06 F4 | 	bitl	local14, #279
1a674     17 38 26 F4 | 	bith	local14, #23
1a678     1B 39 62 F0 | 	shl	local14, local13
1a67c     02 26 0E F2 | 	cmp	local05, #2 wz
1a680     02 24 66 A0 |  if_e	shl	local04, #2
1a684     00 3A 06 F6 | 	mov	local15, #0
1a688     00 24 56 F2 | 	cmps	local04, #0 wc
1a68c     10 00 90 3D |  if_ae	jmp	#LR__2834
1a690     18 25 C2 F2 | 	subr	local04, local10
1a694     00 24 56 F2 | 	cmps	local04, #0 wc
1a698     A0 00 90 CD |  if_b	jmp	#LR__2841
1a69c     04 00 90 FD | 	jmp	#LR__2835
1a6a0                 | LR__2834
1a6a0     01 24 06 F1 | 	add	local04, #1
1a6a4                 | LR__2835
1a6a4     19 25 7A F3 | 	fles	local04, local11 wcz
1a6a8     01 3C 06 F6 | 	mov	local16, #1
1a6ac     97 22 48 FB | 	callpa	#(@LR__2837-@LR__2836)>>2,fcache_load_ptr_
1a6b0                 | LR__2836
1a6b0     00 40 00 FF 
1a6b4     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1a6b8     38 00 90 3D |  if_ae	jmp	#LR__2838
1a6bc     01 24 56 F2 | 	cmps	local04, #1 wc
1a6c0     01 24 86 F1 | 	sub	local04, #1
1a6c4     2C 00 90 CD |  if_b	jmp	#LR__2838
1a6c8     13 3B 02 FD | 	qmul	local15, local05
1a6cc     1C 37 02 F6 | 	mov	local13, local14
1a6d0     17 36 46 F0 | 	shr	local13, #23
1a6d4     17 39 06 F4 | 	bitl	local14, #279
1a6d8     18 3A 62 FD | 	getqx	local15
1a6dc     13 3D 02 FD | 	qmul	local16, local05
1a6e0     18 3C 62 FD | 	getqx	local16
1a6e4     13 39 02 FD | 	qmul	local14, local05
1a6e8     1B 3B 02 F1 | 	add	local15, local13
1a6ec     18 38 62 FD | 	getqx	local14
1a6f0     BC FF 9F FD | 	jmp	#LR__2836
1a6f4                 | LR__2837
1a6f4                 | LR__2838
1a6f4     13 2F 02 F6 | 	mov	local09, local05
1a6f8     17 2E 66 F0 | 	shl	local09, #23
1a6fc     17 37 52 F6 | 	abs	local13, local09 wc
1a700     01 36 46 F0 | 	shr	local13, #1
1a704     1B 37 82 F6 | 	negc	local13, local13
1a708     1B 39 1A F2 | 	cmp	local14, local13 wcz
1a70c     20 00 90 1D |  if_a	jmp	#LR__2839
1a710     17 26 66 F0 | 	shl	local05, #23
1a714     13 37 52 F6 | 	abs	local13, local05 wc
1a718     01 36 46 F0 | 	shr	local13, #1
1a71c     1B 37 82 F6 | 	negc	local13, local13
1a720     1B 39 0A F2 | 	cmp	local14, local13 wz
1a724     14 00 90 5D |  if_ne	jmp	#LR__2840
1a728     01 3A CE F7 | 	test	local15, #1 wz
1a72c     0C 00 90 AD |  if_e	jmp	#LR__2840
1a730                 | LR__2839
1a730     01 3A 06 F1 | 	add	local15, #1
1a734     1E 3B 0A F2 | 	cmp	local15, local16 wz
1a738     01 30 06 A1 |  if_e	add	local10, #1
1a73c                 | LR__2840
1a73c                 | LR__2841
1a73c     10 3B 62 FC | 	wrlong	local15, local02
1a740     11 31 62 FC | 	wrlong	local10, local03
1a744                 | LR__2842
1a744     A7 F0 03 F6 | 	mov	ptra, fp
1a748     B2 00 A0 FD | 	call	#popregs_
1a74c                 | __system__disassemble_0292_ret
1a74c     2D 00 64 FD | 	ret
1a750                 | 
1a750                 | __system__emitsign_0294
1a750     00 FA 05 F6 | 	mov	result1, #0
1a754     00 14 0E F2 | 	cmp	arg02, #0 wz
1a758     09 01 02 56 |  if_ne	mov	_var01, arg01
1a75c     01 12 06 51 |  if_ne	add	arg01, #1
1a760     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1a764     01 FA 05 56 |  if_ne	mov	result1, #1
1a768     00 16 0E F2 | 	cmp	arg03, #0 wz
1a76c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1a770     01 12 06 51 |  if_ne	add	arg01, #1
1a774     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1a778     02 FA 05 51 |  if_ne	add	result1, #2
1a77c                 | __system__emitsign_0294_ret
1a77c     2D 00 64 FD | 	ret
1a780                 | 
1a780                 | __system___gettxfunc
1a780     01 4A 05 F6 | 	mov	COUNT_, #1
1a784     A8 00 A0 FD | 	call	#pushregs_
1a788     A0 F8 BF FD | 	call	#__system____getftab
1a78c     FD 1E 0A F6 | 	mov	local01, result1 wz
1a790     10 00 90 AD |  if_e	jmp	#LR__2850
1a794     08 1E 06 F1 | 	add	local01, #8
1a798     0F 15 0A FB | 	rdlong	arg02, local01 wz
1a79c     08 1E 86 F1 | 	sub	local01, #8
1a7a0     08 00 90 5D |  if_ne	jmp	#LR__2851
1a7a4                 | LR__2850
1a7a4     00 FA 05 F6 | 	mov	result1, #0
1a7a8     0C 00 90 FD | 	jmp	#LR__2852
1a7ac                 | LR__2851
1a7ac     00 70 02 FF 
1a7b0     00 1E 46 F5 | 	or	local01, ##81788928
1a7b4     0F FB 01 F6 | 	mov	result1, local01
1a7b8                 | LR__2852
1a7b8     A7 F0 03 F6 | 	mov	ptra, fp
1a7bc     B2 00 A0 FD | 	call	#popregs_
1a7c0                 | __system___gettxfunc_ret
1a7c0     2D 00 64 FD | 	ret
1a7c4                 | 
1a7c4                 | __system___getrxfunc
1a7c4     01 4A 05 F6 | 	mov	COUNT_, #1
1a7c8     A8 00 A0 FD | 	call	#pushregs_
1a7cc     5C F8 BF FD | 	call	#__system____getftab
1a7d0     FD 1E 0A F6 | 	mov	local01, result1 wz
1a7d4     10 00 90 AD |  if_e	jmp	#LR__2860
1a7d8     08 1E 06 F1 | 	add	local01, #8
1a7dc     0F 15 0A FB | 	rdlong	arg02, local01 wz
1a7e0     08 1E 86 F1 | 	sub	local01, #8
1a7e4     08 00 90 5D |  if_ne	jmp	#LR__2861
1a7e8                 | LR__2860
1a7e8     00 FA 05 F6 | 	mov	result1, #0
1a7ec     0C 00 90 FD | 	jmp	#LR__2862
1a7f0                 | LR__2861
1a7f0     00 78 02 FF 
1a7f4     00 1E 46 F5 | 	or	local01, ##82837504
1a7f8     0F FB 01 F6 | 	mov	result1, local01
1a7fc                 | LR__2862
1a7fc     A7 F0 03 F6 | 	mov	ptra, fp
1a800     B2 00 A0 FD | 	call	#popregs_
1a804                 | __system___getrxfunc_ret
1a804     2D 00 64 FD | 	ret
1a808                 | 
1a808                 | __system___getiolock_0334
1a808     01 4A 05 F6 | 	mov	COUNT_, #1
1a80c     A8 00 A0 FD | 	call	#pushregs_
1a810     18 F8 BF FD | 	call	#__system____getftab
1a814     FD 1E 0A F6 | 	mov	local01, result1 wz
1a818     10 00 90 AD |  if_e	jmp	#LR__2870
1a81c     08 1E 06 F1 | 	add	local01, #8
1a820     0F FB 09 FB | 	rdlong	result1, local01 wz
1a824     08 1E 86 F1 | 	sub	local01, #8
1a828     18 00 90 5D |  if_ne	jmp	#LR__2871
1a82c                 | LR__2870
1a82c     01 00 00 FF 
1a830     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1a834     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1a838     01 00 00 FF 
1a83c     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1a840     08 00 90 FD | 	jmp	#LR__2872
1a844                 | LR__2871
1a844     0C 1E 06 F1 | 	add	local01, #12
1a848     0F FB 01 F6 | 	mov	result1, local01
1a84c                 | LR__2872
1a84c     A7 F0 03 F6 | 	mov	ptra, fp
1a850     B2 00 A0 FD | 	call	#popregs_
1a854                 | __system___getiolock_0334_ret
1a854     2D 00 64 FD | 	ret
1a858                 | 
1a858                 | __system____ScanForChar
1a858     09 01 02 F6 | 	mov	_var01, arg01
1a85c     09 03 02 F6 | 	mov	_var02, arg01
1a860     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
1a864                 | LR__2880
1a864     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1a868     01 02 06 51 |  if_ne	add	_var02, #1
1a86c     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
1a870                 | LR__2881
1a870     09 03 82 F1 | 	sub	_var02, arg01
1a874     01 FB 01 F6 | 	mov	result1, _var02
1a878     FD 12 0A F6 | 	mov	arg01, result1 wz
1a87c     00 FA 05 A6 |  if_e	mov	result1, #0
1a880     B8 00 90 AD |  if_e	jmp	#LR__2888
1a884     0A 05 02 F6 | 	mov	_var03, arg02
1a888     07 04 4E F7 | 	zerox	_var03, #7 wz
1a88c     00 FA 05 A6 |  if_e	mov	result1, #0
1a890     A8 00 90 AD |  if_e	jmp	#LR__2888
1a894     01 16 16 F2 | 	cmp	arg03, #1 wc
1a898     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1a89c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1a8a0     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1a8a4     94 00 90 4D |  if_c_and_nz	jmp	#LR__2888
1a8a8     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1a8ac     10 00 90 ED |  if_be	jmp	#LR__2882
1a8b0     00 18 0E F2 | 	cmp	arg04, #0 wz
1a8b4     00 FA 05 A6 |  if_e	mov	result1, #0
1a8b8     80 00 90 AD |  if_e	jmp	#LR__2888
1a8bc     09 17 02 F6 | 	mov	arg03, arg01
1a8c0                 | LR__2882
1a8c0     01 16 86 F1 | 	sub	arg03, #1
1a8c4     00 18 0E F2 | 	cmp	arg04, #0 wz
1a8c8     38 00 90 5D |  if_ne	jmp	#LR__2884
1a8cc     0B 07 02 F6 | 	mov	_var04, arg03
1a8d0     09 09 02 F6 | 	mov	_var05, arg01
1a8d4                 | LR__2883
1a8d4     04 07 12 F2 | 	cmp	_var04, _var05 wc
1a8d8     5C 00 90 3D |  if_ae	jmp	#LR__2887
1a8dc     03 05 02 F6 | 	mov	_var03, _var04
1a8e0     00 05 02 F1 | 	add	_var03, _var01
1a8e4     02 05 C2 FA | 	rdbyte	_var03, _var03
1a8e8     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1a8ec     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1a8f0     01 06 06 A1 |  if_e	add	_var04, #1
1a8f4     03 FB 01 A6 |  if_e	mov	result1, _var04
1a8f8     40 00 90 AD |  if_e	jmp	#LR__2888
1a8fc     01 06 06 F1 | 	add	_var04, #1
1a900     D0 FF 9F FD | 	jmp	#LR__2883
1a904                 | LR__2884
1a904     0B 07 02 F6 | 	mov	_var04, arg03
1a908                 | LR__2885
1a908     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1a90c     28 00 90 1D |  if_a	jmp	#LR__2886
1a910     03 09 02 F6 | 	mov	_var05, _var04
1a914     00 09 02 F1 | 	add	_var05, _var01
1a918     04 05 C2 FA | 	rdbyte	_var03, _var05
1a91c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1a920     04 05 0A F2 | 	cmp	_var03, _var05 wz
1a924     01 06 06 A1 |  if_e	add	_var04, #1
1a928     03 FB 01 A6 |  if_e	mov	result1, _var04
1a92c     0C 00 90 AD |  if_e	jmp	#LR__2888
1a930     01 06 86 F1 | 	sub	_var04, #1
1a934     D0 FF 9F FD | 	jmp	#LR__2885
1a938                 | LR__2886
1a938                 | LR__2887
1a938     00 FA 05 F6 | 	mov	result1, #0
1a93c                 | LR__2888
1a93c                 | __system____ScanForChar_ret
1a93c     2D 00 64 FD | 	ret
1a940                 | 
1a940                 | __system___basic_dir
1a940     05 4A 05 F6 | 	mov	COUNT_, #5
1a944     A8 00 A0 FD | 	call	#pushregs_
1a948     4C F0 07 F1 | 	add	ptra, #76
1a94c     04 4E 05 F1 | 	add	fp, #4
1a950     A7 12 62 FC | 	wrlong	arg01, fp
1a954     04 4E 05 F1 | 	add	fp, #4
1a958     A7 14 62 FC | 	wrlong	arg02, fp
1a95c     04 4E 85 F1 | 	sub	fp, #4
1a960     A7 14 0A FB | 	rdlong	arg02, fp wz
1a964     04 4E 85 F1 | 	sub	fp, #4
1a968     04 4E 05 51 |  if_ne	add	fp, #4
1a96c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a970     04 4E 85 51 |  if_ne	sub	fp, #4
1a974     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1a978     70 00 90 AD |  if_e	jmp	#LR__2890
1a97c     03 00 00 FF 
1a980     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a984     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a988     03 00 00 FF 
1a98c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a990     03 00 00 5F 
1a994     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1a998     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1a99c     03 00 00 5F 
1a9a0     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1a9a4     14 EA BF 5D |  if_ne	call	#__system__closedir
1a9a8     22 01 00 FF 
1a9ac     8C 12 06 F6 | 	mov	arg01, ##@LR__4048
1a9b0     1C E9 BF FD | 	call	#__system__opendir
1a9b4     03 00 00 FF 
1a9b8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a9bc     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1a9c0     08 4E 05 F1 | 	add	fp, #8
1a9c4     A7 20 02 FB | 	rdlong	local02, fp
1a9c8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1a9cc     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1a9d0     04 4E 85 F1 | 	sub	fp, #4
1a9d4     A7 20 02 FB | 	rdlong	local02, fp
1a9d8     04 4E 85 F1 | 	sub	fp, #4
1a9dc     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1a9e0     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1a9e4     03 00 00 FF 
1a9e8     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1a9ec                 | LR__2890
1a9ec     03 00 00 FF 
1a9f0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a9f4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a9f8     03 00 00 FF 
1a9fc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1aa00     22 01 00 AF 
1aa04     8E FA 05 A6 |  if_e	mov	result1, ##@LR__4049
1aa08     84 02 90 AD |  if_e	jmp	#LR__2903
1aa0c                 | LR__2891
1aa0c     03 00 00 FF 
1aa10     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1aa14     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1aa18     03 00 00 FF 
1aa1c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1aa20     0C EA BF FD | 	call	#__system__readdir
1aa24     0C 4E 05 F1 | 	add	fp, #12
1aa28     A7 FA 61 FC | 	wrlong	result1, fp
1aa2c     0C 4E 85 F1 | 	sub	fp, #12
1aa30     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa34     38 00 90 5D |  if_ne	jmp	#LR__2892
1aa38     03 00 00 FF 
1aa3c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1aa40     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1aa44     03 00 00 FF 
1aa48     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1aa4c     6C E9 BF FD | 	call	#__system__closedir
1aa50     03 00 00 FF 
1aa54     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1aa58     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1aa5c     03 00 00 FF 
1aa60     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1aa64     22 01 00 FF 
1aa68     90 FA 05 F6 | 	mov	result1, ##@LR__4050
1aa6c     20 02 90 FD | 	jmp	#LR__2903
1aa70                 | LR__2892
1aa70     0C 4E 05 F1 | 	add	fp, #12
1aa74     A7 12 02 FB | 	rdlong	arg01, fp
1aa78     0C 4E 85 F1 | 	sub	fp, #12
1aa7c     03 00 00 FF 
1aa80     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1aa84     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1aa88     03 00 00 FF 
1aa8c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1aa90     48 07 B0 FD | 	call	#__system___pat_match
1aa94     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa98     70 FF 9F AD |  if_e	jmp	#LR__2891
1aa9c     03 00 00 FF 
1aaa0     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1aaa4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1aaa8     03 00 00 FF 
1aaac     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1aab0     78 01 90 AD |  if_e	jmp	#LR__2899
1aab4     0C 4E 05 F1 | 	add	fp, #12
1aab8     A7 12 02 FB | 	rdlong	arg01, fp
1aabc     04 4E 05 F1 | 	add	fp, #4
1aac0     A7 14 02 F6 | 	mov	arg02, fp
1aac4     10 4E 85 F1 | 	sub	fp, #16
1aac8     68 F2 BF FD | 	call	#__system__stat
1aacc     40 4E 05 F1 | 	add	fp, #64
1aad0     A7 FA 61 FC | 	wrlong	result1, fp
1aad4     40 4E 85 F1 | 	sub	fp, #64
1aad8     00 FA 0D F2 | 	cmp	result1, #0 wz
1aadc     22 01 00 5F 
1aae0     92 FA 05 56 |  if_ne	mov	result1, ##@LR__4051
1aae4     A8 01 90 5D |  if_ne	jmp	#LR__2903
1aae8     18 4E 05 F1 | 	add	fp, #24
1aaec     A7 20 02 FB | 	rdlong	local02, fp
1aaf0     78 00 00 FF 
1aaf4     00 20 06 F5 | 	and	local02, ##61440
1aaf8     2C 4E 05 F1 | 	add	fp, #44
1aafc     A7 20 62 FC | 	wrlong	local02, fp
1ab00     38 4E 85 F1 | 	sub	fp, #56
1ab04     A7 20 02 FB | 	rdlong	local02, fp
1ab08     0C 4E 85 F1 | 	sub	fp, #12
1ab0c     10 21 C2 FA | 	rdbyte	local02, local02
1ab10     2E 20 0E F2 | 	cmp	local02, #46 wz
1ab14     08 4E 05 A1 |  if_e	add	fp, #8
1ab18     A7 04 68 AC |  if_e	wrlong	#2, fp
1ab1c     08 4E C5 F3 | 	sumz	fp, #8
1ab20     A7 00 68 5C |  if_ne	wrlong	#0, fp
1ab24     08 4E 85 51 |  if_ne	sub	fp, #8
1ab28     44 4E 05 F1 | 	add	fp, #68
1ab2c     A7 20 02 FB | 	rdlong	local02, fp
1ab30     44 4E 85 F1 | 	sub	fp, #68
1ab34     08 00 00 FF 
1ab38     00 20 0E F2 | 	cmp	local02, ##4096 wz
1ab3c     18 00 90 5D |  if_ne	jmp	#LR__2893
1ab40     08 4E 05 F1 | 	add	fp, #8
1ab44     A7 20 02 FB | 	rdlong	local02, fp
1ab48     10 20 46 F5 | 	or	local02, #16
1ab4c     A7 20 62 FC | 	wrlong	local02, fp
1ab50     08 4E 85 F1 | 	sub	fp, #8
1ab54     AC 00 90 FD | 	jmp	#LR__2898
1ab58                 | LR__2893
1ab58     44 4E 05 F1 | 	add	fp, #68
1ab5c     A7 20 02 FB | 	rdlong	local02, fp
1ab60     44 4E 85 F1 | 	sub	fp, #68
1ab64     10 00 00 FF 
1ab68     00 20 0E F2 | 	cmp	local02, ##8192 wz
1ab6c     44 4E 05 51 |  if_ne	add	fp, #68
1ab70     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ab74     44 4E 85 51 |  if_ne	sub	fp, #68
1ab78     18 00 00 5F 
1ab7c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1ab80     44 4E 05 51 |  if_ne	add	fp, #68
1ab84     0F 23 02 56 |  if_ne	mov	local03, local01
1ab88     44 4E 85 51 |  if_ne	sub	fp, #68
1ab8c     20 00 00 5F 
1ab90     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1ab94     18 00 90 5D |  if_ne	jmp	#LR__2894
1ab98     08 4E 05 F1 | 	add	fp, #8
1ab9c     A7 20 02 FB | 	rdlong	local02, fp
1aba0     04 20 46 F5 | 	or	local02, #4
1aba4     A7 20 62 FC | 	wrlong	local02, fp
1aba8     08 4E 85 F1 | 	sub	fp, #8
1abac     54 00 90 FD | 	jmp	#LR__2897
1abb0                 | LR__2894
1abb0     18 4E 05 F1 | 	add	fp, #24
1abb4     A7 20 02 FB | 	rdlong	local02, fp
1abb8     18 4E 85 F1 | 	sub	fp, #24
1abbc     92 20 CE F7 | 	test	local02, #146 wz
1abc0     18 00 90 5D |  if_ne	jmp	#LR__2895
1abc4     08 4E 05 F1 | 	add	fp, #8
1abc8     A7 20 02 FB | 	rdlong	local02, fp
1abcc     01 20 46 F5 | 	or	local02, #1
1abd0     A7 20 62 FC | 	wrlong	local02, fp
1abd4     08 4E 85 F1 | 	sub	fp, #8
1abd8     28 00 90 FD | 	jmp	#LR__2896
1abdc                 | LR__2895
1abdc     44 4E 05 F1 | 	add	fp, #68
1abe0     A7 24 02 FB | 	rdlong	local04, fp
1abe4     44 4E 85 F1 | 	sub	fp, #68
1abe8     08 00 00 FF 
1abec     00 24 0E F2 | 	cmp	local04, ##4096 wz
1abf0     08 4E 05 51 |  if_ne	add	fp, #8
1abf4     A7 24 02 5B |  if_ne	rdlong	local04, fp
1abf8     20 24 46 55 |  if_ne	or	local04, #32
1abfc     A7 24 62 5C |  if_ne	wrlong	local04, fp
1ac00     08 4E 85 51 |  if_ne	sub	fp, #8
1ac04                 | LR__2896
1ac04                 | LR__2897
1ac04                 | LR__2898
1ac04     08 4E 05 F1 | 	add	fp, #8
1ac08     A7 24 02 FB | 	rdlong	local04, fp
1ac0c     08 4E 85 F1 | 	sub	fp, #8
1ac10     03 00 00 FF 
1ac14     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1ac18     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1ac1c     03 00 00 FF 
1ac20     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1ac24     0F 25 CA F7 | 	test	local04, local01 wz
1ac28     E0 FD 9F AD |  if_e	jmp	#LR__2891
1ac2c                 | LR__2899
1ac2c     0C 4E 05 F1 | 	add	fp, #12
1ac30     A7 12 02 FB | 	rdlong	arg01, fp
1ac34     0C 4E 85 F1 | 	sub	fp, #12
1ac38     09 27 02 F6 | 	mov	local05, arg01
1ac3c     97 06 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
1ac40                 | LR__2900
1ac40     13 FB C9 FA | 	rdbyte	result1, local05 wz
1ac44     01 26 06 51 |  if_ne	add	local05, #1
1ac48     F4 FF 9F 5D |  if_ne	jmp	#LR__2900
1ac4c                 | LR__2901
1ac4c     13 13 C2 F2 | 	subr	arg01, local05
1ac50     01 12 06 F1 | 	add	arg01, #1
1ac54     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1ac58     48 4E 05 F1 | 	add	fp, #72
1ac5c     A7 FA 61 FC | 	wrlong	result1, fp
1ac60     48 4E 85 F1 | 	sub	fp, #72
1ac64     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac68     18 00 90 AD |  if_e	jmp	#LR__2902
1ac6c     48 4E 05 F1 | 	add	fp, #72
1ac70     A7 12 02 FB | 	rdlong	arg01, fp
1ac74     3C 4E 85 F1 | 	sub	fp, #60
1ac78     A7 14 02 FB | 	rdlong	arg02, fp
1ac7c     0C 4E 85 F1 | 	sub	fp, #12
1ac80     84 A5 BF FD | 	call	#__system____builtin_strcpy
1ac84                 | LR__2902
1ac84     48 4E 05 F1 | 	add	fp, #72
1ac88     A7 FA 01 FB | 	rdlong	result1, fp
1ac8c     48 4E 85 F1 | 	sub	fp, #72
1ac90                 | LR__2903
1ac90     A7 F0 03 F6 | 	mov	ptra, fp
1ac94     B2 00 A0 FD | 	call	#popregs_
1ac98                 | __system___basic_dir_ret
1ac98     2D 00 64 FD | 	ret
1ac9c                 | 
1ac9c                 | __system__pack_0400
1ac9c     09 01 02 F6 | 	mov	_var01, arg01
1aca0     7F 16 06 F1 | 	add	arg03, #127
1aca4     04 18 CE F7 | 	test	arg04, #4 wz
1aca8     10 00 90 AD |  if_e	jmp	#LR__2910
1acac     00 00 0E F2 | 	cmp	_var01, #0 wz
1acb0     16 00 C6 A9 |  if_e	decod	_var01, #22
1acb4     F7 00 26 F4 | 	bith	_var01, #247
1acb8     B4 00 90 FD | 	jmp	#LR__2919
1acbc                 | LR__2910
1acbc     02 18 CE F7 | 	test	arg04, #2 wz
1acc0     00 C0 3F 5F 
1acc4     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1acc8     00 14 06 56 |  if_ne	mov	arg02, #0
1accc     A0 00 90 5D |  if_ne	jmp	#LR__2918
1acd0     08 18 CE F7 | 	test	arg04, #8 wz
1acd4     00 00 06 56 |  if_ne	mov	_var01, #0
1acd8     94 00 90 5D |  if_ne	jmp	#LR__2917
1acdc     FF 16 56 F2 | 	cmps	arg03, #255 wc
1ace0     00 C0 3F 3F 
1ace4     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1ace8     00 14 06 36 |  if_ae	mov	arg02, #0
1acec     80 00 90 3D |  if_ae	jmp	#LR__2916
1acf0     01 16 56 F2 | 	cmps	arg03, #1 wc
1acf4     6C 00 90 3D |  if_ae	jmp	#LR__2914
1acf8     01 14 46 F0 | 	shr	arg02, #1
1acfc     00 03 02 F6 | 	mov	_var02, _var01
1ad00     01 02 06 F5 | 	and	_var02, #1
1ad04     1F 02 66 F0 | 	shl	_var02, #31
1ad08     01 15 42 F5 | 	or	arg02, _var02
1ad0c     01 00 46 F0 | 	shr	_var01, #1
1ad10     97 1E 48 FB | 	callpa	#(@LR__2912-@LR__2911)>>2,fcache_load_ptr_
1ad14                 | LR__2911
1ad14     00 16 56 F2 | 	cmps	arg03, #0 wc
1ad18     34 00 90 3D |  if_ae	jmp	#LR__2913
1ad1c     00 00 0E F2 | 	cmp	_var01, #0 wz
1ad20     2C 00 90 AD |  if_e	jmp	#LR__2913
1ad24     0A 13 02 F6 | 	mov	arg01, arg02
1ad28     01 12 06 F5 | 	and	arg01, #1
1ad2c     01 16 06 F1 | 	add	arg03, #1
1ad30     01 14 46 F0 | 	shr	arg02, #1
1ad34     00 03 02 F6 | 	mov	_var02, _var01
1ad38     01 02 06 F5 | 	and	_var02, #1
1ad3c     1F 02 66 F0 | 	shl	_var02, #31
1ad40     01 15 42 F5 | 	or	arg02, _var02
1ad44     09 15 42 F5 | 	or	arg02, arg01
1ad48     01 00 46 F0 | 	shr	_var01, #1
1ad4c     C4 FF 9F FD | 	jmp	#LR__2911
1ad50                 | LR__2912
1ad50                 | LR__2913
1ad50     00 16 56 F2 | 	cmps	arg03, #0 wc
1ad54     18 00 90 3D |  if_ae	jmp	#LR__2915
1ad58     00 14 0E F2 | 	cmp	arg02, #0 wz
1ad5c     6F 14 62 FD | 	wrnz	arg02
1ad60     0C 00 90 FD | 	jmp	#LR__2915
1ad64                 | LR__2914
1ad64     17 01 06 F4 | 	bitl	_var01, #279
1ad68     17 16 66 F0 | 	shl	arg03, #23
1ad6c     0B 01 42 F5 | 	or	_var01, arg03
1ad70                 | LR__2915
1ad70                 | LR__2916
1ad70                 | LR__2917
1ad70                 | LR__2918
1ad70                 | LR__2919
1ad70     01 00 CE F7 | 	test	_var01, #1 wz
1ad74     01 14 46 55 |  if_ne	or	arg02, #1
1ad78     0A 17 02 F6 | 	mov	arg03, arg02
1ad7c     00 02 06 F6 | 	mov	_var02, #0
1ad80     FF FF 3F FF 
1ad84     FF 15 06 F1 | 	add	arg02, ##2147483647
1ad88     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1ad8c     01 02 06 C6 |  if_b	mov	_var02, #1
1ad90     01 01 02 F1 | 	add	_var01, _var02
1ad94     01 18 CE F7 | 	test	arg04, #1 wz
1ad98     1F 00 26 54 |  if_ne	bith	_var01, #31
1ad9c     00 FB 01 F6 | 	mov	result1, _var01
1ada0                 | __system__pack_0400_ret
1ada0     2D 00 64 FD | 	ret
1ada4                 | 
1ada4                 | __system___rxtxioctl_0489
1ada4     00 15 0E F2 | 	cmp	arg02, #256 wz
1ada8     0C 00 90 AD |  if_e	jmp	#LR__2920
1adac     01 15 0E F2 | 	cmp	arg02, #257 wz
1adb0     1C 00 90 AD |  if_e	jmp	#LR__2921
1adb4     30 00 90 FD | 	jmp	#LR__2922
1adb8                 | LR__2920
1adb8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1adbc     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1adc0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1adc4     0B FB 61 FC | 	wrlong	result1, arg03
1adc8     00 FA 05 F6 | 	mov	result1, #0
1adcc     28 00 90 FD | 	jmp	#LR__2923
1add0                 | LR__2921
1add0     0B 13 02 FB | 	rdlong	arg01, arg03
1add4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1add8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1addc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ade0     00 FA 05 F6 | 	mov	result1, #0
1ade4     10 00 90 FD | 	jmp	#LR__2923
1ade8                 | LR__2922
1ade8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1adec     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1adf0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1adf4     01 FA 65 F6 | 	neg	result1, #1
1adf8                 | LR__2923
1adf8                 | __system___rxtxioctl_0489_ret
1adf8     2D 00 64 FD | 	ret
1adfc                 | 
1adfc                 | __system____dummy_flush_0490
1adfc     00 FA 05 F6 | 	mov	result1, #0
1ae00                 | __system____dummy_flush_0490_ret
1ae00     2D 00 64 FD | 	ret
1ae04                 | 
1ae04                 | __system___vfsread
1ae04     03 4A 05 F6 | 	mov	COUNT_, #3
1ae08     A8 00 A0 FD | 	call	#pushregs_
1ae0c     28 F0 07 F1 | 	add	ptra, #40
1ae10     04 4E 05 F1 | 	add	fp, #4
1ae14     A7 12 62 FC | 	wrlong	arg01, fp
1ae18     04 4E 05 F1 | 	add	fp, #4
1ae1c     A7 14 62 FC | 	wrlong	arg02, fp
1ae20     04 4E 05 F1 | 	add	fp, #4
1ae24     A7 16 62 FC | 	wrlong	arg03, fp
1ae28     04 4E 85 F1 | 	sub	fp, #4
1ae2c     A7 FA 01 FB | 	rdlong	result1, fp
1ae30     14 4E 05 F1 | 	add	fp, #20
1ae34     A7 FA 61 FC | 	wrlong	result1, fp
1ae38     04 4E 05 F1 | 	add	fp, #4
1ae3c     A7 00 68 FC | 	wrlong	#0, fp
1ae40     1C 4E 85 F1 | 	sub	fp, #28
1ae44     A7 12 02 FB | 	rdlong	arg01, fp
1ae48     04 4E 85 F1 | 	sub	fp, #4
1ae4c     08 12 06 F1 | 	add	arg01, #8
1ae50     09 FB 01 FB | 	rdlong	result1, arg01
1ae54     01 FA CD F7 | 	test	result1, #1 wz
1ae58     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ae5c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ae60     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ae64     01 FA 65 A6 |  if_e	neg	result1, #1
1ae68     74 02 90 AD |  if_e	jmp	#LR__2936
1ae6c     04 4E 05 F1 | 	add	fp, #4
1ae70     A7 12 02 FB | 	rdlong	arg01, fp
1ae74     04 4E 85 F1 | 	sub	fp, #4
1ae78     14 12 06 F1 | 	add	arg01, #20
1ae7c     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ae80     B8 00 90 AD |  if_e	jmp	#LR__2931
1ae84     04 4E 05 F1 | 	add	fp, #4
1ae88     A7 12 02 FB | 	rdlong	arg01, fp
1ae8c     09 17 02 F6 | 	mov	arg03, arg01
1ae90     14 16 06 F1 | 	add	arg03, #20
1ae94     0B 1F 02 FB | 	rdlong	local01, arg03
1ae98     0F 21 02 F6 | 	mov	local02, local01
1ae9c     13 1E 46 F7 | 	zerox	local01, #19
1aea0     14 20 46 F0 | 	shr	local02, #20
1aea4     02 20 66 F0 | 	shl	local02, #2
1aea8     ED 20 02 F1 | 	add	local02, __methods__
1aeac     10 21 02 FB | 	rdlong	local02, local02
1aeb0     04 4E 05 F1 | 	add	fp, #4
1aeb4     A7 14 02 FB | 	rdlong	arg02, fp
1aeb8     04 4E 05 F1 | 	add	fp, #4
1aebc     A7 16 02 FB | 	rdlong	arg03, fp
1aec0     0C 4E 85 F1 | 	sub	fp, #12
1aec4     F2 22 02 F6 | 	mov	local03, objptr
1aec8     0F E5 01 F6 | 	mov	objptr, local01
1aecc     2D 20 62 FD | 	call	local02
1aed0     11 E5 01 F6 | 	mov	objptr, local03
1aed4     10 4E 05 F1 | 	add	fp, #16
1aed8     A7 FA 61 FC | 	wrlong	result1, fp
1aedc     10 4E 85 F1 | 	sub	fp, #16
1aee0     00 FA 55 F2 | 	cmps	result1, #0 wc
1aee4     44 00 90 3D |  if_ae	jmp	#LR__2930
1aee8     04 4E 05 F1 | 	add	fp, #4
1aeec     A7 22 02 FB | 	rdlong	local03, fp
1aef0     11 1F 02 F6 | 	mov	local01, local03
1aef4     08 22 06 F1 | 	add	local03, #8
1aef8     11 21 02 FB | 	rdlong	local02, local03
1aefc     20 20 46 F5 | 	or	local02, #32
1af00     08 1E 06 F1 | 	add	local01, #8
1af04     0F 21 62 FC | 	wrlong	local02, local01
1af08     0C 4E 05 F1 | 	add	fp, #12
1af0c     A7 12 0A FB | 	rdlong	arg01, fp wz
1af10     10 4E 85 F1 | 	sub	fp, #16
1af14     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1af18     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1af1c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1af20     01 FA 65 56 |  if_ne	neg	result1, #1
1af24     00 FA 05 A6 |  if_e	mov	result1, #0
1af28     B4 01 90 FD | 	jmp	#LR__2936
1af2c                 | LR__2930
1af2c     10 4E 05 F1 | 	add	fp, #16
1af30     A7 FA 01 FB | 	rdlong	result1, fp
1af34     10 4E 85 F1 | 	sub	fp, #16
1af38     A4 01 90 FD | 	jmp	#LR__2936
1af3c                 | LR__2931
1af3c     04 4E 05 F1 | 	add	fp, #4
1af40     A7 12 02 FB | 	rdlong	arg01, fp
1af44     20 12 06 F1 | 	add	arg01, #32
1af48     09 13 0A FB | 	rdlong	arg01, arg01 wz
1af4c     14 4E 05 F1 | 	add	fp, #20
1af50     A7 12 62 FC | 	wrlong	arg01, fp
1af54     18 4E 85 F1 | 	sub	fp, #24
1af58     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1af5c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1af60     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1af64     01 FA 65 A6 |  if_e	neg	result1, #1
1af68     74 01 90 AD |  if_e	jmp	#LR__2936
1af6c     04 4E 05 F1 | 	add	fp, #4
1af70     A7 22 02 FB | 	rdlong	local03, fp
1af74     04 4E 85 F1 | 	sub	fp, #4
1af78     28 22 06 F1 | 	add	local03, #40
1af7c     11 21 0A FB | 	rdlong	local02, local03 wz
1af80     7C 00 90 AD |  if_e	jmp	#LR__2933
1af84     04 4E 05 F1 | 	add	fp, #4
1af88     A7 12 02 FB | 	rdlong	arg01, fp
1af8c     09 23 02 F6 | 	mov	local03, arg01
1af90     28 22 06 F1 | 	add	local03, #40
1af94     11 1F 02 FB | 	rdlong	local01, local03
1af98     0F 21 02 F6 | 	mov	local02, local01
1af9c     13 1E 46 F7 | 	zerox	local01, #19
1afa0     14 20 46 F0 | 	shr	local02, #20
1afa4     02 20 66 F0 | 	shl	local02, #2
1afa8     ED 20 02 F1 | 	add	local02, __methods__
1afac     10 21 02 FB | 	rdlong	local02, local02
1afb0     20 4E 05 F1 | 	add	fp, #32
1afb4     A7 16 02 F6 | 	mov	arg03, fp
1afb8     24 4E 85 F1 | 	sub	fp, #36
1afbc     00 15 06 F6 | 	mov	arg02, #256
1afc0     F2 22 02 F6 | 	mov	local03, objptr
1afc4     0F E5 01 F6 | 	mov	objptr, local01
1afc8     2D 20 62 FD | 	call	local02
1afcc     11 E5 01 F6 | 	mov	objptr, local03
1afd0     10 4E 05 F1 | 	add	fp, #16
1afd4     A7 FA 61 FC | 	wrlong	result1, fp
1afd8     00 FA 4D F2 | 	cmps	result1, #0 wz
1afdc     10 4E 85 F1 | 	sub	fp, #16
1afe0     1C 00 90 5D |  if_ne	jmp	#LR__2932
1afe4     24 4E 05 F1 | 	add	fp, #36
1afe8     A7 20 02 FB | 	rdlong	local02, fp
1afec     24 4E 85 F1 | 	sub	fp, #36
1aff0     02 20 CE F7 | 	test	local02, #2 wz
1aff4     20 4E 05 51 |  if_ne	add	fp, #32
1aff8     A7 02 68 5C |  if_ne	wrlong	#1, fp
1affc     20 4E 85 51 |  if_ne	sub	fp, #32
1b000                 | LR__2932
1b000                 | LR__2933
1b000     10 4E 05 F1 | 	add	fp, #16
1b004     A7 00 68 FC | 	wrlong	#0, fp
1b008     10 4E 85 F1 | 	sub	fp, #16
1b00c                 | LR__2934
1b00c     0C 4E 05 F1 | 	add	fp, #12
1b010     A7 22 02 FB | 	rdlong	local03, fp
1b014     0C 4E 85 F1 | 	sub	fp, #12
1b018     01 22 16 F2 | 	cmp	local03, #1 wc
1b01c     B4 00 90 CD |  if_b	jmp	#LR__2935
1b020     18 4E 05 F1 | 	add	fp, #24
1b024     A7 20 02 FB | 	rdlong	local02, fp
1b028     10 23 02 F6 | 	mov	local03, local02
1b02c     13 22 46 F7 | 	zerox	local03, #19
1b030     14 20 46 F0 | 	shr	local02, #20
1b034     02 20 66 F0 | 	shl	local02, #2
1b038     ED 20 02 F1 | 	add	local02, __methods__
1b03c     10 21 02 FB | 	rdlong	local02, local02
1b040     14 4E 85 F1 | 	sub	fp, #20
1b044     A7 12 02 FB | 	rdlong	arg01, fp
1b048     04 4E 85 F1 | 	sub	fp, #4
1b04c     F2 1E 02 F6 | 	mov	local01, objptr
1b050     11 E5 01 F6 | 	mov	objptr, local03
1b054     2D 20 62 FD | 	call	local02
1b058     0F E5 01 F6 | 	mov	objptr, local01
1b05c     14 4E 05 F1 | 	add	fp, #20
1b060     A7 FA 61 FC | 	wrlong	result1, fp
1b064     14 4E 85 F1 | 	sub	fp, #20
1b068     00 FA 55 F2 | 	cmps	result1, #0 wc
1b06c     64 00 90 CD |  if_b	jmp	#LR__2935
1b070     1C 4E 05 F1 | 	add	fp, #28
1b074     A7 22 02 FB | 	rdlong	local03, fp
1b078     11 21 02 F6 | 	mov	local02, local03
1b07c     01 20 06 F1 | 	add	local02, #1
1b080     A7 20 62 FC | 	wrlong	local02, fp
1b084     08 4E 85 F1 | 	sub	fp, #8
1b088     A7 20 02 FB | 	rdlong	local02, fp
1b08c     11 21 42 FC | 	wrbyte	local02, local03
1b090     04 4E 85 F1 | 	sub	fp, #4
1b094     A7 22 02 FB | 	rdlong	local03, fp
1b098     01 22 06 F1 | 	add	local03, #1
1b09c     A7 22 62 FC | 	wrlong	local03, fp
1b0a0     04 4E 85 F1 | 	sub	fp, #4
1b0a4     A7 22 02 FB | 	rdlong	local03, fp
1b0a8     01 22 86 F1 | 	sub	local03, #1
1b0ac     A7 22 62 FC | 	wrlong	local03, fp
1b0b0     14 4E 05 F1 | 	add	fp, #20
1b0b4     A7 22 0A FB | 	rdlong	local03, fp wz
1b0b8     20 4E 85 F1 | 	sub	fp, #32
1b0bc     4C FF 9F AD |  if_e	jmp	#LR__2934
1b0c0     14 4E 05 F1 | 	add	fp, #20
1b0c4     A7 20 02 FB | 	rdlong	local02, fp
1b0c8     14 4E 85 F1 | 	sub	fp, #20
1b0cc     0A 20 0E F2 | 	cmp	local02, #10 wz
1b0d0     38 FF 9F 5D |  if_ne	jmp	#LR__2934
1b0d4                 | LR__2935
1b0d4     10 4E 05 F1 | 	add	fp, #16
1b0d8     A7 FA 01 FB | 	rdlong	result1, fp
1b0dc     10 4E 85 F1 | 	sub	fp, #16
1b0e0                 | LR__2936
1b0e0     A7 F0 03 F6 | 	mov	ptra, fp
1b0e4     B2 00 A0 FD | 	call	#popregs_
1b0e8                 | __system___vfsread_ret
1b0e8     2D 00 64 FD | 	ret
1b0ec                 | 
1b0ec                 | __system____default_filbuf
1b0ec     04 4A 05 F6 | 	mov	COUNT_, #4
1b0f0     A8 00 A0 FD | 	call	#pushregs_
1b0f4     09 1F 02 F6 | 	mov	local01, arg01
1b0f8     0F 21 02 FB | 	rdlong	local02, local01
1b0fc     0C 20 06 F1 | 	add	local02, #12
1b100     10 FB 09 FB | 	rdlong	result1, local02 wz
1b104     0C 20 86 F1 | 	sub	local02, #12
1b108     20 00 90 5D |  if_ne	jmp	#LR__2940
1b10c     14 20 06 F1 | 	add	local02, #20
1b110     10 FB 01 F6 | 	mov	result1, local02
1b114     04 20 86 F1 | 	sub	local02, #4
1b118     10 FB 61 FC | 	wrlong	result1, local02
1b11c     04 20 86 F1 | 	sub	local02, #4
1b120     02 00 80 FF 
1b124     10 01 68 FC | 	wrlong	##1024, local02
1b128     0C 20 86 F1 | 	sub	local02, #12
1b12c                 | LR__2940
1b12c     14 1E 06 F1 | 	add	local01, #20
1b130     0F 23 02 FB | 	rdlong	local03, local01
1b134     11 25 02 F6 | 	mov	local04, local03
1b138     14 1E 86 F1 | 	sub	local01, #20
1b13c     13 24 46 F7 | 	zerox	local04, #19
1b140     14 22 46 F0 | 	shr	local03, #20
1b144     02 22 66 F0 | 	shl	local03, #2
1b148     ED 22 02 F1 | 	add	local03, __methods__
1b14c     11 23 02 FB | 	rdlong	local03, local03
1b150     10 20 06 F1 | 	add	local02, #16
1b154     10 15 02 FB | 	rdlong	arg02, local02
1b158     04 20 86 F1 | 	sub	local02, #4
1b15c     10 17 02 FB | 	rdlong	arg03, local02
1b160     0C 20 86 F1 | 	sub	local02, #12
1b164     0F 13 02 F6 | 	mov	arg01, local01
1b168     F2 1E 02 F6 | 	mov	local01, objptr
1b16c     12 E5 01 F6 | 	mov	objptr, local04
1b170     2D 22 62 FD | 	call	local03
1b174     0F E5 01 F6 | 	mov	objptr, local01
1b178     FD 24 02 F6 | 	mov	local04, result1
1b17c     00 24 56 F2 | 	cmps	local04, #0 wc
1b180     01 FA 65 C6 |  if_b	neg	result1, #1
1b184     28 00 90 CD |  if_b	jmp	#LR__2941
1b188     10 25 62 FC | 	wrlong	local04, local02
1b18c     10 20 06 F1 | 	add	local02, #16
1b190     10 23 02 FB | 	rdlong	local03, local02
1b194     0C 20 86 F1 | 	sub	local02, #12
1b198     10 23 62 FC | 	wrlong	local03, local02
1b19c     04 20 06 F1 | 	add	local02, #4
1b1a0     10 23 02 FB | 	rdlong	local03, local02
1b1a4     01 22 46 F5 | 	or	local03, #1
1b1a8     10 23 62 FC | 	wrlong	local03, local02
1b1ac     12 FB 01 F6 | 	mov	result1, local04
1b1b0                 | LR__2941
1b1b0     A7 F0 03 F6 | 	mov	ptra, fp
1b1b4     B2 00 A0 FD | 	call	#popregs_
1b1b8                 | __system____default_filbuf_ret
1b1b8     2D 00 64 FD | 	ret
1b1bc                 | 
1b1bc                 | __system__getlower_0875
1b1bc     41 12 56 F2 | 	cmps	arg01, #65 wc
1b1c0     10 00 90 CD |  if_b	jmp	#LR__2950
1b1c4     5B 12 56 F2 | 	cmps	arg01, #91 wc
1b1c8     09 FB 01 C6 |  if_b	mov	result1, arg01
1b1cc     20 FA 05 C1 |  if_b	add	result1, #32
1b1d0     04 00 90 CD |  if_b	jmp	#__system__getlower_0875_ret
1b1d4                 | LR__2950
1b1d4     09 FB 01 F6 | 	mov	result1, arg01
1b1d8                 | __system__getlower_0875_ret
1b1d8     2D 00 64 FD | 	ret
1b1dc                 | 
1b1dc                 | __system___pat_match
1b1dc     08 4A 05 F6 | 	mov	COUNT_, #8
1b1e0     A8 00 A0 FD | 	call	#pushregs_
1b1e4     09 1F 02 F6 | 	mov	local01, arg01
1b1e8                 | LR__2960
1b1e8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1b1ec     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1b1f0     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1b1f4     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1b1f8     2C 00 90 AD |  if_e	jmp	#LR__2961
1b1fc     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b200     B8 FF BF FD | 	call	#__system__getlower_0875
1b204     FD 22 02 F6 | 	mov	local03, result1
1b208     0F 13 C2 FA | 	rdbyte	arg01, local01
1b20c     AC FF BF FD | 	call	#__system__getlower_0875
1b210     11 FB 09 F2 | 	cmp	result1, local03 wz
1b214     00 FA 05 56 |  if_ne	mov	result1, #0
1b218     FC 00 90 5D |  if_ne	jmp	#LR__2969
1b21c     01 1E 06 F1 | 	add	local01, #1
1b220     01 14 06 F1 | 	add	arg02, #1
1b224     C0 FF 9F FD | 	jmp	#LR__2960
1b228                 | LR__2961
1b228     0A 23 C2 FA | 	rdbyte	local03, arg02
1b22c     2A 22 0E F2 | 	cmp	local03, #42 wz
1b230     D4 00 90 5D |  if_ne	jmp	#LR__2968
1b234     01 14 06 F1 | 	add	arg02, #1
1b238     0A 21 C2 FA | 	rdbyte	local02, arg02
1b23c     01 14 86 F1 | 	sub	arg02, #1
1b240     2E 20 0E F2 | 	cmp	local02, #46 wz
1b244     28 00 90 5D |  if_ne	jmp	#LR__2962
1b248     02 14 06 F1 | 	add	arg02, #2
1b24c     0A 21 C2 FA | 	rdbyte	local02, arg02
1b250     02 14 86 F1 | 	sub	arg02, #2
1b254     2A 20 0E F2 | 	cmp	local02, #42 wz
1b258     03 14 06 A1 |  if_e	add	arg02, #3
1b25c     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1b260     03 14 86 A1 |  if_e	sub	arg02, #3
1b264     12 27 0A A6 |  if_e	mov	local05, local04 wz
1b268     01 FA 05 A6 |  if_e	mov	result1, #1
1b26c     A8 00 90 AD |  if_e	jmp	#LR__2969
1b270                 | LR__2962
1b270     01 14 06 F1 | 	add	arg02, #1
1b274     00 28 06 F6 | 	mov	local06, #0
1b278     97 1E 48 FB | 	callpa	#(@LR__2965-@LR__2963)>>2,fcache_load_ptr_
1b27c                 | LR__2963
1b27c     14 2B 02 F6 | 	mov	local07, local06
1b280     0A 2B 02 F1 | 	add	local07, arg02
1b284     15 2B CA FA | 	rdbyte	local07, local07 wz
1b288     14 27 02 56 |  if_ne	mov	local05, local06
1b28c     01 26 06 51 |  if_ne	add	local05, #1
1b290     13 29 02 56 |  if_ne	mov	local06, local05
1b294     E4 FF 9F 5D |  if_ne	jmp	#LR__2963
1b298     00 2C 06 F6 | 	mov	local08, #0
1b29c                 | LR__2964
1b29c     16 2B 02 F6 | 	mov	local07, local08
1b2a0     0F 2B 02 F1 | 	add	local07, local01
1b2a4     15 2B CA FA | 	rdbyte	local07, local07 wz
1b2a8     16 27 02 56 |  if_ne	mov	local05, local08
1b2ac     01 26 06 51 |  if_ne	add	local05, #1
1b2b0     13 2D 02 56 |  if_ne	mov	local08, local05
1b2b4     E4 FF 9F 5D |  if_ne	jmp	#LR__2964
1b2b8                 | LR__2965
1b2b8     14 2D 52 F2 | 	cmps	local08, local06 wc
1b2bc     00 FA 05 C6 |  if_b	mov	result1, #0
1b2c0     54 00 90 CD |  if_b	jmp	#LR__2969
1b2c4     16 21 02 F6 | 	mov	local02, local08
1b2c8     14 21 82 F1 | 	sub	local02, local06
1b2cc     10 1F 02 F1 | 	add	local01, local02
1b2d0                 | LR__2966
1b2d0     01 28 56 F2 | 	cmps	local06, #1 wc
1b2d4     30 00 90 CD |  if_b	jmp	#LR__2967
1b2d8     0F 13 C2 FA | 	rdbyte	arg01, local01
1b2dc     DC FE BF FD | 	call	#__system__getlower_0875
1b2e0     FD 2C 02 F6 | 	mov	local08, result1
1b2e4     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b2e8     D0 FE BF FD | 	call	#__system__getlower_0875
1b2ec     FD 2C 0A F2 | 	cmp	local08, result1 wz
1b2f0     00 FA 05 56 |  if_ne	mov	result1, #0
1b2f4     20 00 90 5D |  if_ne	jmp	#LR__2969
1b2f8     01 1E 06 F1 | 	add	local01, #1
1b2fc     01 14 06 F1 | 	add	arg02, #1
1b300     01 28 86 F1 | 	sub	local06, #1
1b304     C8 FF 9F FD | 	jmp	#LR__2966
1b308                 | LR__2967
1b308                 | LR__2968
1b308     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1b30c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1b310     01 FA 05 A6 |  if_e	mov	result1, #1
1b314     00 FA 05 56 |  if_ne	mov	result1, #0
1b318                 | LR__2969
1b318     A7 F0 03 F6 | 	mov	ptra, fp
1b31c     B2 00 A0 FD | 	call	#popregs_
1b320                 | __system___pat_match_ret
1b320     2D 00 64 FD | 	ret
1b324                 | 
1b324                 | _fatfs_cc_ff_uni2oem
1b324     00 00 06 F6 | 	mov	_var01, #0
1b328     80 12 16 F2 | 	cmp	arg01, #128 wc
1b32c     09 01 02 C6 |  if_b	mov	_var01, arg01
1b330     58 00 90 CD |  if_b	jmp	#LR__2974
1b334     80 00 00 FF 
1b338     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1b33c     4C 00 90 3D |  if_ae	jmp	#LR__2973
1b340     0A FB 31 F9 | 	getword	result1, arg02, #0
1b344     01 00 00 FF 
1b348     52 FB 0D F2 | 	cmp	result1, ##850 wz
1b34c     3C 00 90 5D |  if_ne	jmp	#LR__2973
1b350                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1b350     00 00 06 F6 | 	mov	_var01, #0
1b354     97 14 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
1b358                 | LR__2970
1b358     00 FB 31 F9 | 	getword	result1, _var01, #0
1b35c     80 FA 15 F2 | 	cmp	result1, #128 wc
1b360     1C 00 90 3D |  if_ae	jmp	#LR__2972
1b364     00 FB 31 F9 | 	getword	result1, _var01, #0
1b368     01 FA 65 F0 | 	shl	result1, #1
1b36c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1b370     FD FA E1 FA | 	rdword	result1, result1
1b374     FD 12 0A F2 | 	cmp	arg01, result1 wz
1b378     01 00 06 51 |  if_ne	add	_var01, #1
1b37c     D8 FF 9F 5D |  if_ne	jmp	#LR__2970
1b380                 | LR__2971
1b380                 | LR__2972
1b380     00 01 32 F9 | 	getword	_var01, _var01, #0
1b384     80 00 06 F1 | 	add	_var01, #128
1b388     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1b38c                 | LR__2973
1b38c                 | LR__2974
1b38c                 | ' 			c = (c + 0x80) & 0xFF;
1b38c                 | ' 		}
1b38c                 | ' 	}
1b38c                 | ' 
1b38c                 | ' 	return c;
1b38c     00 FB 01 F6 | 	mov	result1, _var01
1b390                 | _fatfs_cc_ff_uni2oem_ret
1b390     2D 00 64 FD | 	ret
1b394                 | 
1b394                 | _fatfs_cc_ff_oem2uni
1b394     00 00 06 F6 | 	mov	_var01, #0
1b398     09 FB 31 F9 | 	getword	result1, arg01, #0
1b39c     80 FA 15 F2 | 	cmp	result1, #128 wc
1b3a0     09 01 02 C6 |  if_b	mov	_var01, arg01
1b3a4     2C 00 90 CD |  if_b	jmp	#LR__2981
1b3a8     0A 15 32 F9 | 	getword	arg02, arg02, #0
1b3ac     01 00 00 FF 
1b3b0     52 15 0E F2 | 	cmp	arg02, ##850 wz
1b3b4     1C 00 90 5D |  if_ne	jmp	#LR__2980
1b3b8     09 FB 31 F9 | 	getword	result1, arg01, #0
1b3bc     00 FB 15 F2 | 	cmp	result1, #256 wc
1b3c0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1b3c4     80 12 86 C1 |  if_b	sub	arg01, #128
1b3c8     01 12 66 C0 |  if_b	shl	arg01, #1
1b3cc     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1b3d0     09 01 E2 CA |  if_b	rdword	_var01, arg01
1b3d4                 | LR__2980
1b3d4                 | LR__2981
1b3d4                 | ' 		}
1b3d4                 | ' 	}
1b3d4                 | ' 
1b3d4                 | ' 	return c;
1b3d4     00 FB 01 F6 | 	mov	result1, _var01
1b3d8                 | _fatfs_cc_ff_oem2uni_ret
1b3d8     2D 00 64 FD | 	ret
1b3dc                 | 
1b3dc                 | _fatfs_cc_ff_wtoupper
1b3dc     09 01 02 F6 | 	mov	_var01, arg01
1b3e0     80 00 00 FF 
1b3e4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1b3e8     60 01 90 3D |  if_ae	jmp	#LR__3003
1b3ec     00 03 02 F6 | 	mov	_var02, _var01
1b3f0     01 01 32 F9 | 	getword	_var01, _var02, #0
1b3f4     08 00 00 FF 
1b3f8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1b3fc     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1b400     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1b404     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1b408     01 00 00 3F 
1b40c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1b410     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1b414     01 00 00 3F 
1b418     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1b41c     02 07 02 F6 | 	mov	_var04, _var03
1b420                 | ' 		uc = (WORD)uni;
1b420                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1b420                 | ' 		for (;;) {
1b420                 | LR__2990
1b420     03 09 E2 FA | 	rdword	_var05, _var04
1b424     04 05 02 F6 | 	mov	_var03, _var05
1b428     0F 04 4E F7 | 	zerox	_var03, #15 wz
1b42c     02 06 06 F1 | 	add	_var04, #2
1b430     14 01 90 AD |  if_e	jmp	#LR__3002
1b434     01 05 32 F9 | 	getword	_var03, _var02, #0
1b438     04 01 32 F9 | 	getword	_var01, _var05, #0
1b43c     00 05 12 F2 | 	cmp	_var03, _var01 wc
1b440     04 01 90 CD |  if_b	jmp	#LR__3002
1b444     03 0B E2 FA | 	rdword	_var06, _var04
1b448     05 0D 32 F9 | 	getword	_var07, _var06, #0
1b44c     08 0C 46 F0 | 	shr	_var07, #8
1b450     05 0B 32 F9 | 	getword	_var06, _var06, #0
1b454     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1b458     01 05 32 F9 | 	getword	_var03, _var02, #0
1b45c     04 0F 32 F9 | 	getword	_var08, _var05, #0
1b460     05 01 32 F9 | 	getword	_var01, _var06, #0
1b464     00 0F 02 F1 | 	add	_var08, _var01
1b468     07 05 52 F2 | 	cmps	_var03, _var08 wc
1b46c     02 06 06 F1 | 	add	_var04, #2
1b470     C4 00 90 3D |  if_ae	jmp	#LR__3001
1b474                 | ' 				switch (cmd) {
1b474     06 11 32 F9 | 	getword	_var09, _var07, #0
1b478     09 10 26 F3 | 	fle	_var09, #9
1b47c     30 10 62 FD | 	jmprel	_var09
1b480                 | LR__2991
1b480     24 00 90 FD | 	jmp	#LR__2992
1b484     3C 00 90 FD | 	jmp	#LR__2993
1b488     54 00 90 FD | 	jmp	#LR__2994
1b48c     5C 00 90 FD | 	jmp	#LR__2995
1b490     64 00 90 FD | 	jmp	#LR__2996
1b494     6C 00 90 FD | 	jmp	#LR__2997
1b498     74 00 90 FD | 	jmp	#LR__2998
1b49c     7C 00 90 FD | 	jmp	#LR__2999
1b4a0     84 00 90 FD | 	jmp	#LR__3000
1b4a4     A0 00 90 FD | 	jmp	#LR__3002
1b4a8                 | LR__2992
1b4a8     01 03 32 F9 | 	getword	_var02, _var02, #0
1b4ac     04 09 32 F9 | 	getword	_var05, _var05, #0
1b4b0     04 03 82 F1 | 	sub	_var02, _var05
1b4b4     01 02 66 F0 | 	shl	_var02, #1
1b4b8     03 03 02 F1 | 	add	_var02, _var04
1b4bc     01 03 E2 FA | 	rdword	_var02, _var02
1b4c0     84 00 90 FD | 	jmp	#LR__3002
1b4c4                 | LR__2993
1b4c4     01 05 32 F9 | 	getword	_var03, _var02, #0
1b4c8     01 03 32 F9 | 	getword	_var02, _var02, #0
1b4cc     04 09 32 F9 | 	getword	_var05, _var05, #0
1b4d0     04 03 82 F1 | 	sub	_var02, _var05
1b4d4     01 02 06 F5 | 	and	_var02, #1
1b4d8     02 03 C2 F2 | 	subr	_var02, _var03
1b4dc     68 00 90 FD | 	jmp	#LR__3002
1b4e0                 | LR__2994
1b4e0     01 03 32 F9 | 	getword	_var02, _var02, #0
1b4e4     10 02 86 F1 | 	sub	_var02, #16
1b4e8     5C 00 90 FD | 	jmp	#LR__3002
1b4ec                 | LR__2995
1b4ec     01 03 32 F9 | 	getword	_var02, _var02, #0
1b4f0     20 02 86 F1 | 	sub	_var02, #32
1b4f4     50 00 90 FD | 	jmp	#LR__3002
1b4f8                 | LR__2996
1b4f8     01 03 32 F9 | 	getword	_var02, _var02, #0
1b4fc     30 02 86 F1 | 	sub	_var02, #48
1b500     44 00 90 FD | 	jmp	#LR__3002
1b504                 | LR__2997
1b504     01 03 32 F9 | 	getword	_var02, _var02, #0
1b508     1A 02 86 F1 | 	sub	_var02, #26
1b50c     38 00 90 FD | 	jmp	#LR__3002
1b510                 | LR__2998
1b510     01 03 32 F9 | 	getword	_var02, _var02, #0
1b514     08 02 06 F1 | 	add	_var02, #8
1b518     2C 00 90 FD | 	jmp	#LR__3002
1b51c                 | LR__2999
1b51c     01 03 32 F9 | 	getword	_var02, _var02, #0
1b520     50 02 86 F1 | 	sub	_var02, #80
1b524     20 00 90 FD | 	jmp	#LR__3002
1b528                 | LR__3000
1b528     01 03 32 F9 | 	getword	_var02, _var02, #0
1b52c     0E 00 00 FF 
1b530     60 02 86 F1 | 	sub	_var02, ##7264
1b534                 | ' 				}
1b534                 | ' 				break;
1b534     10 00 90 FD | 	jmp	#LR__3002
1b538                 | LR__3001
1b538     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1b53c     02 0A 06 AA |  if_e	mul	_var06, #2
1b540     05 07 02 A1 |  if_e	add	_var04, _var06
1b544     D8 FE 9F FD | 	jmp	#LR__2990
1b548                 | LR__3002
1b548     01 01 32 F9 | 	getword	_var01, _var02, #0
1b54c                 | LR__3003
1b54c                 | ' 		}
1b54c                 | ' 		uni = uc;
1b54c                 | ' 	}
1b54c                 | ' 
1b54c                 | ' 	return uni;
1b54c     00 FB 01 F6 | 	mov	result1, _var01
1b550                 | _fatfs_cc_ff_wtoupper_ret
1b550     2D 00 64 FD | 	ret
1b554                 | 
1b554                 | _fatfs_cc_strncpy
1b554     09 01 02 F6 | 	mov	_var01, arg01
1b558     97 12 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
1b55c                 | ' 
1b55c                 | ' 	dscan = dst;
1b55c                 | ' 	sscan = src;
1b55c                 | ' 	count = n;
1b55c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1b55c                 | LR__3010
1b55c     01 16 86 F1 | 	sub	arg03, #1
1b560     00 16 56 F2 | 	cmps	arg03, #0 wc
1b564     18 00 90 CD |  if_b	jmp	#LR__3012
1b568     0A FB C1 FA | 	rdbyte	result1, arg02
1b56c     00 FB 41 FC | 	wrbyte	result1, _var01
1b570     01 14 06 F1 | 	add	arg02, #1
1b574     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1b578                 | ' 		continue;
1b578     01 00 06 F1 | 	add	_var01, #1
1b57c     DC FF 9F 5D |  if_ne	jmp	#LR__3010
1b580                 | LR__3011
1b580                 | LR__3012
1b580     97 0C 48 FB | 	callpa	#(@LR__3014-@LR__3013)>>2,fcache_load_ptr_
1b584                 | ' 	while (--count >= 0)
1b584                 | LR__3013
1b584     01 16 86 F1 | 	sub	arg03, #1
1b588     00 16 56 F2 | 	cmps	arg03, #0 wc
1b58c     00 03 02 36 |  if_ae	mov	_var02, _var01
1b590     01 00 06 31 |  if_ae	add	_var01, #1
1b594     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1b598     E8 FF 9F 3D |  if_ae	jmp	#LR__3013
1b59c                 | LR__3014
1b59c                 | ' 		*dscan++ = '\0';
1b59c                 | ' 	return(dst);
1b59c     09 FB 01 F6 | 	mov	result1, arg01
1b5a0                 | _fatfs_cc_strncpy_ret
1b5a0     2D 00 64 FD | 	ret
1b5a4                 | 
1b5a4                 | _fatfs_cc_memcmp
1b5a4                 | ' 	for (n = size; n > 0; n--)
1b5a4     00 16 0E F2 | 	cmp	arg03, #0 wz
1b5a8     28 00 90 AD |  if_e	jmp	#LR__3021
1b5ac                 | LR__3020
1b5ac     09 01 C2 FA | 	rdbyte	_var01, arg01
1b5b0     0A 03 C2 FA | 	rdbyte	_var02, arg02
1b5b4     01 01 0A F2 | 	cmp	_var01, _var02 wz
1b5b8     01 12 06 A1 |  if_e	add	arg01, #1
1b5bc     01 14 06 A1 |  if_e	add	arg02, #1
1b5c0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1b5c0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1b5c4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1b5c8     01 FB 81 51 |  if_ne	sub	result1, _var02
1b5cc     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1b5d0     F6 17 6E FB | 	djnz	arg03, #LR__3020
1b5d4                 | LR__3021
1b5d4                 | ' 
1b5d4                 | ' 	return(0);
1b5d4     00 FA 05 F6 | 	mov	result1, #0
1b5d8                 | _fatfs_cc_memcmp_ret
1b5d8     2D 00 64 FD | 	ret
1b5dc                 | 
1b5dc                 | _fatfs_cc_strncmp
1b5dc     09 01 0A F6 | 	mov	_var01, arg01 wz
1b5e0     14 00 90 5D |  if_ne	jmp	#LR__3030
1b5e4                 | ' 		return scan2 ? -1 : 0;
1b5e4     00 14 0E F2 | 	cmp	arg02, #0 wz
1b5e8     01 02 66 56 |  if_ne	neg	_var02, #1
1b5ec     00 02 06 A6 |  if_e	mov	_var02, #0
1b5f0     01 FB 01 F6 | 	mov	result1, _var02
1b5f4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1b5f8                 | LR__3030
1b5f8     00 14 0E F2 | 	cmp	arg02, #0 wz
1b5fc     01 FA 05 A6 |  if_e	mov	result1, #1
1b600     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b604     0B 05 02 F6 | 	mov	_var03, arg03
1b608     97 16 48 FB | 	callpa	#(@LR__3032-@LR__3031)>>2,fcache_load_ptr_
1b60c                 | ' 	count = n;
1b60c                 | ' 	do {
1b60c                 | LR__3031
1b60c     00 07 C2 FA | 	rdbyte	_var04, _var01
1b610     0A 09 02 F6 | 	mov	_var05, arg02
1b614     04 0B C2 FA | 	rdbyte	_var06, _var05
1b618     01 04 86 F1 | 	sub	_var03, #1
1b61c     00 04 56 F2 | 	cmps	_var03, #0 wc
1b620     01 00 06 F1 | 	add	_var01, #1
1b624     01 14 06 F1 | 	add	arg02, #1
1b628     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1b62c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3033
1b630     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1b634     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3031
1b638                 | LR__3032
1b638                 | LR__3033
1b638     00 04 56 F2 | 	cmps	_var03, #0 wc
1b63c                 | ' 		return(0);
1b63c     00 FA 05 C6 |  if_b	mov	result1, #0
1b640     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1b644     05 07 0A F2 | 	cmp	_var04, _var06 wz
1b648                 | ' 		return(0);
1b648     00 FA 05 A6 |  if_e	mov	result1, #0
1b64c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b650     00 06 0E F2 | 	cmp	_var04, #0 wz
1b654                 | ' 		return(-1);
1b654     01 FA 65 A6 |  if_e	neg	result1, #1
1b658     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b65c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1b660                 | ' 		return(1);
1b660     01 FA 05 A6 |  if_e	mov	result1, #1
1b664                 | ' 		return(c1 - c2);
1b664     03 FB 01 56 |  if_ne	mov	result1, _var04
1b668     05 FB 81 51 |  if_ne	sub	result1, _var06
1b66c                 | _fatfs_cc_strncmp_ret
1b66c     2D 00 64 FD | 	ret
1b670                 | 
1b670                 | _fatfs_cc_strchr
1b670                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
1b670                 | ' 	while ((c = *s++) != (char) charwanted)
1b670                 | LR__3040
1b670     09 01 02 F6 | 	mov	_var01, arg01
1b674     00 03 C2 FA | 	rdbyte	_var02, _var01
1b678     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1b67c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1b680     03 05 0A F2 | 	cmp	_var03, _var04 wz
1b684     01 12 06 F1 | 	add	arg01, #1
1b688     14 00 90 AD |  if_e	jmp	#LR__3041
1b68c     01 05 02 F6 | 	mov	_var03, _var02
1b690     07 04 4E F7 | 	zerox	_var03, #7 wz
1b694     00 FA 05 A6 |  if_e	mov	result1, #0
1b698     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1b69c     D0 FF 9F FD | 	jmp	#LR__3040
1b6a0                 | LR__3041
1b6a0                 | ' 	return((char *)--s);
1b6a0     01 12 86 F1 | 	sub	arg01, #1
1b6a4     09 FB 01 F6 | 	mov	result1, arg01
1b6a8                 | _fatfs_cc_strchr_ret
1b6a8     2D 00 64 FD | 	ret
1b6ac                 | 
1b6ac                 | _fatfs_cc_disk_initialize
1b6ac     04 4A 05 F6 | 	mov	COUNT_, #4
1b6b0     A8 00 A0 FD | 	call	#pushregs_
1b6b4     40 F0 07 F1 | 	add	ptra, #64
1b6b8     04 4E 05 F1 | 	add	fp, #4
1b6bc     A7 12 42 FC | 	wrbyte	arg01, fp
1b6c0     01 00 00 FF 
1b6c4     14 E4 05 F1 | 	add	objptr, ##532
1b6c8     F2 18 02 FB | 	rdlong	arg04, objptr
1b6cc     2C 4E 05 F1 | 	add	fp, #44
1b6d0     A7 18 62 FC | 	wrlong	arg04, fp
1b6d4     04 E4 85 F1 | 	sub	objptr, #4
1b6d8     F2 18 02 FB | 	rdlong	arg04, objptr
1b6dc     04 4E 05 F1 | 	add	fp, #4
1b6e0     A7 18 62 FC | 	wrlong	arg04, fp
1b6e4     08 E4 05 F1 | 	add	objptr, #8
1b6e8     F2 18 02 FB | 	rdlong	arg04, objptr
1b6ec     04 4E 05 F1 | 	add	fp, #4
1b6f0     A7 18 62 FC | 	wrlong	arg04, fp
1b6f4     04 E4 05 F1 | 	add	objptr, #4
1b6f8     F2 18 02 FB | 	rdlong	arg04, objptr
1b6fc     04 4E 05 F1 | 	add	fp, #4
1b700     A7 18 62 FC | 	wrlong	arg04, fp
1b704     04 E4 05 F1 | 	add	objptr, #4
1b708     F2 02 48 FC | 	wrbyte	#1, objptr
1b70c     01 00 00 FF 
1b710     20 E4 85 F1 | 	sub	objptr, ##544
1b714     38 4E 85 F1 | 	sub	fp, #56
1b718     A7 18 CA FA | 	rdbyte	arg04, fp wz
1b71c     04 4E 85 F1 | 	sub	fp, #4
1b720                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b720                 | '             return RES_NOTRDY;
1b720     03 FA 05 56 |  if_ne	mov	result1, #3
1b724     D8 05 90 5D |  if_ne	jmp	#LR__3068
1b728     13 00 00 FF 
1b72c     10 13 06 F6 | 	mov	arg01, ##10000
1b730     80 9E BF FD | 	call	#__system___waitus
1b734     30 4E 05 F1 | 	add	fp, #48
1b738     A7 12 02 FB | 	rdlong	arg01, fp
1b73c     09 01 08 FC | 	wrpin	#0, arg01
1b740     04 4E 05 F1 | 	add	fp, #4
1b744     A7 12 02 FB | 	rdlong	arg01, fp
1b748     09 01 08 FC | 	wrpin	#0, arg01
1b74c     04 4E 05 F1 | 	add	fp, #4
1b750     A7 12 02 FB | 	rdlong	arg01, fp
1b754     09 01 08 FC | 	wrpin	#0, arg01
1b758     04 4E 05 F1 | 	add	fp, #4
1b75c     A7 12 02 FB | 	rdlong	arg01, fp
1b760     09 00 80 FF 
1b764     09 01 08 FC | 	wrpin	##4608, arg01
1b768     0C 4E 85 F1 | 	sub	fp, #12
1b76c     A7 12 02 FB | 	rdlong	arg01, fp
1b770     59 12 62 FD | 	drvh	arg01
1b774     04 4E 05 F1 | 	add	fp, #4
1b778     A7 12 02 FB | 	rdlong	arg01, fp
1b77c     59 12 62 FD | 	drvh	arg01
1b780     04 4E 05 F1 | 	add	fp, #4
1b784     A7 12 02 FB | 	rdlong	arg01, fp
1b788     59 12 62 FD | 	drvh	arg01
1b78c     04 4E 05 F1 | 	add	fp, #4
1b790     A7 12 02 FB | 	rdlong	arg01, fp
1b794     59 12 62 FD | 	drvh	arg01
1b798     20 4E 85 F1 | 	sub	fp, #32
1b79c     00 04 80 FF 
1b7a0     A7 20 68 FC | 	wrlong	##524304, fp
1b7a4     04 4E 05 F1 | 	add	fp, #4
1b7a8     20 03 80 FF 
1b7ac     A7 90 68 FC | 	wrlong	##409672, fp
1b7b0     14 4E 05 F1 | 	add	fp, #20
1b7b4     A7 1E 02 FB | 	rdlong	local01, fp
1b7b8     18 4E 85 F1 | 	sub	fp, #24
1b7bc     A7 16 02 FB | 	rdlong	arg03, fp
1b7c0     40 1E 62 FD | 	dirl	local01
1b7c4     A0 03 80 FF 
1b7c8     0F 91 08 FC | 	wrpin	##475208, local01
1b7cc     0F 17 12 FC | 	wxpin	arg03, local01
1b7d0     0F 01 28 FC | 	wypin	#0, local01
1b7d4     41 1E 62 FD | 	dirh	local01
1b7d8     1C 4E 05 F1 | 	add	fp, #28
1b7dc     A7 20 02 FB | 	rdlong	local02, fp
1b7e0     10 1F 82 F1 | 	sub	local01, local02
1b7e4     07 1E 06 F5 | 	and	local01, #7
1b7e8     18 1E 66 F0 | 	shl	local01, #24
1b7ec     78 14 06 F6 | 	mov	arg02, #120
1b7f0     0F 15 42 F5 | 	or	arg02, local01
1b7f4     14 4E 85 F1 | 	sub	fp, #20
1b7f8     A7 14 62 FC | 	wrlong	arg02, fp
1b7fc     14 4E 05 F1 | 	add	fp, #20
1b800     A7 12 02 FB | 	rdlong	arg01, fp
1b804     10 14 26 F4 | 	bith	arg02, #16
1b808     40 12 62 FD | 	dirl	arg01
1b80c     09 15 02 FC | 	wrpin	arg02, arg01
1b810     09 3F 18 FC | 	wxpin	#31, arg01
1b814     FF FF FF FF 
1b818     09 FF 2B FC | 	wypin	##-1, arg01
1b81c     41 12 62 FD | 	dirh	arg01
1b820     04 4E 85 F1 | 	sub	fp, #4
1b824     A7 14 02 FB | 	rdlong	arg02, fp
1b828     08 4E 05 F1 | 	add	fp, #8
1b82c     A7 22 02 FB | 	rdlong	local03, fp
1b830     11 15 82 F1 | 	sub	arg02, local03
1b834     07 14 06 F5 | 	and	arg02, #7
1b838     18 14 66 F0 | 	shl	arg02, #24
1b83c     14 4E 85 F1 | 	sub	fp, #20
1b840     A7 14 62 FC | 	wrlong	arg02, fp
1b844     29 00 00 FF 
1b848     7A 14 46 F5 | 	or	arg02, ##21114
1b84c     A7 14 62 FC | 	wrlong	arg02, fp
1b850     14 4E 05 F1 | 	add	fp, #20
1b854     A7 12 02 FB | 	rdlong	arg01, fp
1b858     40 12 62 FD | 	dirl	arg01
1b85c     09 15 02 FC | 	wrpin	arg02, arg01
1b860     09 4F 18 FC | 	wxpin	#39, arg01
1b864     09 01 28 FC | 	wypin	#0, arg01
1b868     41 12 62 FD | 	dirh	arg01
1b86c     28 4E 85 F1 | 	sub	fp, #40
1b870     A7 12 02 F6 | 	mov	arg01, fp
1b874     14 4E 85 F1 | 	sub	fp, #20
1b878     0A 14 06 F6 | 	mov	arg02, #10
1b87c     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0909
1b880     00 12 06 F6 | 	mov	arg01, #0
1b884     00 14 06 F6 | 	mov	arg02, #0
1b888     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1b88c     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0919
1b890     64 12 06 F6 | 	mov	arg01, #100
1b894     1C 9D BF FD | 	call	#__system___waitus
1b898     14 4E 05 F1 | 	add	fp, #20
1b89c     A7 12 02 F6 | 	mov	arg01, fp
1b8a0     14 4E 85 F1 | 	sub	fp, #20
1b8a4     0A 14 06 F6 | 	mov	arg02, #10
1b8a8     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0909
1b8ac     0C 4E 05 F1 | 	add	fp, #12
1b8b0     A7 00 48 FC | 	wrbyte	#0, fp
1b8b4     0C 4E 85 F1 | 	sub	fp, #12
1b8b8     00 12 06 F6 | 	mov	arg01, #0
1b8bc     00 14 06 F6 | 	mov	arg02, #0
1b8c0     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1b8c4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1b8c8     01 18 0E F2 | 	cmp	arg04, #1 wz
1b8cc     B8 03 90 5D |  if_ne	jmp	#LR__3067
1b8d0     08 12 06 F6 | 	mov	arg01, #8
1b8d4     AA 15 06 F6 | 	mov	arg02, #426
1b8d8     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1b8dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b8e0     01 FA 0D F2 | 	cmp	result1, #1 wz
1b8e4     98 01 90 5D |  if_ne	jmp	#LR__3053
1b8e8     14 4E 05 F1 | 	add	fp, #20
1b8ec     A7 12 02 F6 | 	mov	arg01, fp
1b8f0     14 4E 85 F1 | 	sub	fp, #20
1b8f4     04 14 06 F6 | 	mov	arg02, #4
1b8f8     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0909
1b8fc     16 4E 05 F1 | 	add	fp, #22
1b900     A7 24 C2 FA | 	rdbyte	local04, fp
1b904     16 4E 85 F1 | 	sub	fp, #22
1b908     01 24 0E F2 | 	cmp	local04, #1 wz
1b90c     17 4E 05 A1 |  if_e	add	fp, #23
1b910     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1b914     17 4E 85 A1 |  if_e	sub	fp, #23
1b918     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1b91c     68 03 90 5D |  if_ne	jmp	#LR__3066
1b920                 | ' 				for (tmr = 1000; tmr; tmr--) {
1b920     18 4E 05 F1 | 	add	fp, #24
1b924     01 00 80 FF 
1b928     A7 D0 6B FC | 	wrlong	##1000, fp
1b92c     18 4E 85 F1 | 	sub	fp, #24
1b930                 | LR__3050
1b930     18 4E 05 F1 | 	add	fp, #24
1b934     A7 1E 0A FB | 	rdlong	local01, fp wz
1b938     18 4E 85 F1 | 	sub	fp, #24
1b93c     3C 00 90 AD |  if_e	jmp	#LR__3051
1b940     A9 12 06 F6 | 	mov	arg01, #169
1b944     1E 14 C6 F9 | 	decod	arg02, #30
1b948     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1b94c     FD 24 02 F6 | 	mov	local04, result1
1b950     07 24 4E F7 | 	zerox	local04, #7 wz
1b954     24 00 90 AD |  if_e	jmp	#LR__3051
1b958     01 00 00 FF 
1b95c     E8 13 06 F6 | 	mov	arg01, ##1000
1b960     50 9C BF FD | 	call	#__system___waitus
1b964     18 4E 05 F1 | 	add	fp, #24
1b968     A7 24 02 FB | 	rdlong	local04, fp
1b96c     01 24 86 F1 | 	sub	local04, #1
1b970     A7 24 62 FC | 	wrlong	local04, fp
1b974     18 4E 85 F1 | 	sub	fp, #24
1b978     B4 FF 9F FD | 	jmp	#LR__3050
1b97c                 | LR__3051
1b97c     18 4E 05 F1 | 	add	fp, #24
1b980     A7 24 0A FB | 	rdlong	local04, fp wz
1b984     18 4E 85 F1 | 	sub	fp, #24
1b988     4C 00 90 AD |  if_e	jmp	#LR__3052
1b98c     3A 12 06 F6 | 	mov	arg01, #58
1b990     00 14 06 F6 | 	mov	arg02, #0
1b994     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1b998     FD 22 02 F6 | 	mov	local03, result1
1b99c     07 22 4E F7 | 	zerox	local03, #7 wz
1b9a0     34 00 90 5D |  if_ne	jmp	#LR__3052
1b9a4     14 4E 05 F1 | 	add	fp, #20
1b9a8     A7 12 02 F6 | 	mov	arg01, fp
1b9ac     14 4E 85 F1 | 	sub	fp, #20
1b9b0     04 14 06 F6 | 	mov	arg02, #4
1b9b4     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0909
1b9b8     14 4E 05 F1 | 	add	fp, #20
1b9bc     A7 1E C2 FA | 	rdbyte	local01, fp
1b9c0     40 1E CE F7 | 	test	local01, #64 wz
1b9c4     0C 24 06 56 |  if_ne	mov	local04, #12
1b9c8     04 24 06 A6 |  if_e	mov	local04, #4
1b9cc     08 4E 85 F1 | 	sub	fp, #8
1b9d0     A7 24 42 FC | 	wrbyte	local04, fp
1b9d4     0C 4E 85 F1 | 	sub	fp, #12
1b9d8                 | LR__3052
1b9d8     14 24 06 FB | 	rdlong	local04, #20
1b9dc     18 4E 05 F1 | 	add	fp, #24
1b9e0     A7 24 62 FC | 	wrlong	local04, fp
1b9e4     0C 4E 05 F1 | 	add	fp, #12
1b9e8     A7 24 02 FB | 	rdlong	local04, fp
1b9ec     1B 24 26 F4 | 	bith	local04, #27
1b9f0     A7 24 62 FC | 	wrlong	local04, fp
1b9f4     0C 4E 85 F1 | 	sub	fp, #12
1b9f8     A7 24 02 FB | 	rdlong	local04, fp
1b9fc     18 4E 85 F1 | 	sub	fp, #24
1ba00     68 78 04 FF 
1ba04     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1ba08     1C 4E 05 C1 |  if_b	add	fp, #28
1ba0c     00 01 80 CF 
1ba10     A7 08 68 CC |  if_b	wrlong	##131076, fp
1ba14     1C 4E 85 C1 |  if_b	sub	fp, #28
1ba18     6C 02 90 CD |  if_b	jmp	#LR__3066
1ba1c     18 4E 05 F1 | 	add	fp, #24
1ba20     A7 24 02 FB | 	rdlong	local04, fp
1ba24     18 4E 85 F1 | 	sub	fp, #24
1ba28     E1 F5 05 FF 
1ba2c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1ba30     1C 4E 05 C1 |  if_b	add	fp, #28
1ba34     00 01 80 CF 
1ba38     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1ba3c     1C 4E 85 C1 |  if_b	sub	fp, #28
1ba40     44 02 90 CD |  if_b	jmp	#LR__3066
1ba44     18 4E 05 F1 | 	add	fp, #24
1ba48     A7 24 02 FB | 	rdlong	local04, fp
1ba4c     18 4E 85 F1 | 	sub	fp, #24
1ba50     3B 58 08 FF 
1ba54     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1ba58     1C 4E 05 C1 |  if_b	add	fp, #28
1ba5c     00 01 80 CF 
1ba60     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1ba64     1C 4E 85 C1 |  if_b	sub	fp, #28
1ba68     1C 02 90 CD |  if_b	jmp	#LR__3066
1ba6c     1C 4E 05 F1 | 	add	fp, #28
1ba70     80 01 80 FF 
1ba74     A7 10 68 FC | 	wrlong	##196616, fp
1ba78     1C 4E 85 F1 | 	sub	fp, #28
1ba7c     08 02 90 FD | 	jmp	#LR__3066
1ba80                 | LR__3053
1ba80     A9 12 06 F6 | 	mov	arg01, #169
1ba84     00 14 06 F6 | 	mov	arg02, #0
1ba88     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1ba8c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1ba90     02 24 16 F2 | 	cmp	local04, #2 wc
1ba94     18 00 90 3D |  if_ae	jmp	#LR__3054
1ba98     0C 4E 05 F1 | 	add	fp, #12
1ba9c     A7 04 48 FC | 	wrbyte	#2, fp
1baa0     04 4E 05 F1 | 	add	fp, #4
1baa4     A7 52 49 FC | 	wrbyte	#169, fp
1baa8     10 4E 85 F1 | 	sub	fp, #16
1baac     14 00 90 FD | 	jmp	#LR__3055
1bab0                 | LR__3054
1bab0     0C 4E 05 F1 | 	add	fp, #12
1bab4     A7 02 48 FC | 	wrbyte	#1, fp
1bab8     04 4E 05 F1 | 	add	fp, #4
1babc     A7 02 48 FC | 	wrbyte	#1, fp
1bac0     10 4E 85 F1 | 	sub	fp, #16
1bac4                 | LR__3055
1bac4                 | ' 				ty =  0x01 ; cmd =  (1) ;
1bac4                 | ' 			}
1bac4                 | ' 			for (tmr = 1000; tmr; tmr--) {
1bac4     18 4E 05 F1 | 	add	fp, #24
1bac8     01 00 80 FF 
1bacc     A7 D0 6B FC | 	wrlong	##1000, fp
1bad0     18 4E 85 F1 | 	sub	fp, #24
1bad4                 | LR__3056
1bad4     18 4E 05 F1 | 	add	fp, #24
1bad8     A7 22 0A FB | 	rdlong	local03, fp wz
1badc     18 4E 85 F1 | 	sub	fp, #24
1bae0     44 00 90 AD |  if_e	jmp	#LR__3057
1bae4     10 4E 05 F1 | 	add	fp, #16
1bae8     A7 12 C2 FA | 	rdbyte	arg01, fp
1baec     10 4E 85 F1 | 	sub	fp, #16
1baf0     00 14 06 F6 | 	mov	arg02, #0
1baf4     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1baf8     FD 24 02 F6 | 	mov	local04, result1
1bafc     07 24 4E F7 | 	zerox	local04, #7 wz
1bb00     24 00 90 AD |  if_e	jmp	#LR__3057
1bb04     01 00 00 FF 
1bb08     E8 13 06 F6 | 	mov	arg01, ##1000
1bb0c     A4 9A BF FD | 	call	#__system___waitus
1bb10     18 4E 05 F1 | 	add	fp, #24
1bb14     A7 24 02 FB | 	rdlong	local04, fp
1bb18     01 24 86 F1 | 	sub	local04, #1
1bb1c     A7 24 62 FC | 	wrlong	local04, fp
1bb20     18 4E 85 F1 | 	sub	fp, #24
1bb24     AC FF 9F FD | 	jmp	#LR__3056
1bb28                 | LR__3057
1bb28     18 4E 05 F1 | 	add	fp, #24
1bb2c     A7 24 0A FB | 	rdlong	local04, fp wz
1bb30     18 4E 85 F1 | 	sub	fp, #24
1bb34     14 00 90 AD |  if_e	jmp	#LR__3058
1bb38     10 12 06 F6 | 	mov	arg01, #16
1bb3c     09 14 C6 F9 | 	decod	arg02, #9
1bb40     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1bb44     07 FA 4D F7 | 	zerox	result1, #7 wz
1bb48     0C 00 90 AD |  if_e	jmp	#LR__3059
1bb4c                 | LR__3058
1bb4c     0C 4E 05 F1 | 	add	fp, #12
1bb50     A7 00 48 FC | 	wrbyte	#0, fp
1bb54     0C 4E 85 F1 | 	sub	fp, #12
1bb58                 | LR__3059
1bb58     14 24 06 FB | 	rdlong	local04, #20
1bb5c     18 4E 05 F1 | 	add	fp, #24
1bb60     A7 24 62 FC | 	wrlong	local04, fp
1bb64     18 4E 85 F1 | 	sub	fp, #24
1bb68     F0 FA 02 FF 
1bb6c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1bb70     18 00 90 3D |  if_ae	jmp	#LR__3060
1bb74     24 4E 05 F1 | 	add	fp, #36
1bb78     A7 24 02 FB | 	rdlong	local04, fp
1bb7c     1B 24 26 F4 | 	bith	local04, #27
1bb80     A7 24 62 FC | 	wrlong	local04, fp
1bb84     24 4E 85 F1 | 	sub	fp, #36
1bb88     2C 00 90 FD | 	jmp	#LR__3061
1bb8c                 | LR__3060
1bb8c     18 4E 05 F1 | 	add	fp, #24
1bb90     A7 24 02 FB | 	rdlong	local04, fp
1bb94     18 4E 85 F1 | 	sub	fp, #24
1bb98     E1 F5 05 FF 
1bb9c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1bba0     24 4E 05 C1 |  if_b	add	fp, #36
1bba4     A7 24 02 CB |  if_b	rdlong	local04, fp
1bba8     80 00 04 CF 
1bbac     00 24 46 C5 |  if_b	or	local04, ##134283264
1bbb0     A7 24 62 CC |  if_b	wrlong	local04, fp
1bbb4     24 4E 85 C1 |  if_b	sub	fp, #36
1bbb8                 | LR__3061
1bbb8     18 4E 05 F1 | 	add	fp, #24
1bbbc     A7 24 02 FB | 	rdlong	local04, fp
1bbc0     18 4E 85 F1 | 	sub	fp, #24
1bbc4     F0 FA 02 FF 
1bbc8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1bbcc     1C 4E 05 C1 |  if_b	add	fp, #28
1bbd0     00 01 80 CF 
1bbd4     A7 08 68 CC |  if_b	wrlong	##131076, fp
1bbd8     1C 4E 85 C1 |  if_b	sub	fp, #28
1bbdc     A8 00 90 CD |  if_b	jmp	#LR__3065
1bbe0     18 4E 05 F1 | 	add	fp, #24
1bbe4     A7 24 02 FB | 	rdlong	local04, fp
1bbe8     18 4E 85 F1 | 	sub	fp, #24
1bbec     68 78 04 FF 
1bbf0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1bbf4     1C 4E 05 C1 |  if_b	add	fp, #28
1bbf8     80 01 80 CF 
1bbfc     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1bc00     1C 4E 85 C1 |  if_b	sub	fp, #28
1bc04     80 00 90 CD |  if_b	jmp	#LR__3064
1bc08     18 4E 05 F1 | 	add	fp, #24
1bc0c     A7 24 02 FB | 	rdlong	local04, fp
1bc10     18 4E 85 F1 | 	sub	fp, #24
1bc14     E1 F5 05 FF 
1bc18     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1bc1c     1C 4E 05 C1 |  if_b	add	fp, #28
1bc20     00 02 80 CF 
1bc24     A7 10 68 CC |  if_b	wrlong	##262152, fp
1bc28     1C 4E 85 C1 |  if_b	sub	fp, #28
1bc2c     58 00 90 CD |  if_b	jmp	#LR__3063
1bc30     18 4E 05 F1 | 	add	fp, #24
1bc34     A7 24 02 FB | 	rdlong	local04, fp
1bc38     18 4E 85 F1 | 	sub	fp, #24
1bc3c     59 73 07 FF 
1bc40     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1bc44     1C 4E 05 C1 |  if_b	add	fp, #28
1bc48     80 02 80 CF 
1bc4c     A7 14 68 CC |  if_b	wrlong	##327690, fp
1bc50     1C 4E 85 C1 |  if_b	sub	fp, #28
1bc54     30 00 90 CD |  if_b	jmp	#LR__3062
1bc58     18 4E 05 F1 | 	add	fp, #24
1bc5c     A7 24 02 FB | 	rdlong	local04, fp
1bc60     18 4E 85 F1 | 	sub	fp, #24
1bc64     D1 F0 08 FF 
1bc68     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1bc6c     1C 4E 05 C1 |  if_b	add	fp, #28
1bc70     00 03 80 CF 
1bc74     A7 18 68 CC |  if_b	wrlong	##393228, fp
1bc78     1C 4E 85 F3 | 	sumc	fp, #28
1bc7c     80 03 80 3F 
1bc80     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1bc84     1C 4E 85 31 |  if_ae	sub	fp, #28
1bc88                 | LR__3062
1bc88                 | LR__3063
1bc88                 | LR__3064
1bc88                 | LR__3065
1bc88                 | LR__3066
1bc88                 | LR__3067
1bc88     0C 4E 05 F1 | 	add	fp, #12
1bc8c     A7 24 C2 FA | 	rdbyte	local04, fp
1bc90     01 00 00 FF 
1bc94     21 E4 05 F1 | 	add	objptr, ##545
1bc98     F2 24 42 FC | 	wrbyte	local04, objptr
1bc9c     A7 1E CA FA | 	rdbyte	local01, fp wz
1bca0     00 24 06 56 |  if_ne	mov	local04, #0
1bca4     01 24 06 A6 |  if_e	mov	local04, #1
1bca8     20 4E 05 F1 | 	add	fp, #32
1bcac     A7 24 42 FC | 	wrbyte	local04, fp
1bcb0     A7 24 C2 FA | 	rdbyte	local04, fp
1bcb4     2C 4E 85 F1 | 	sub	fp, #44
1bcb8     01 E4 85 F1 | 	sub	objptr, #1
1bcbc     F2 24 42 FC | 	wrbyte	local04, objptr
1bcc0     01 00 00 FF 
1bcc4     20 E4 85 F1 | 	sub	objptr, ##544
1bcc8     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0919
1bccc     34 4E 05 F1 | 	add	fp, #52
1bcd0     A7 12 02 FB | 	rdlong	arg01, fp
1bcd4     18 4E 85 F1 | 	sub	fp, #24
1bcd8     A7 14 02 FB | 	rdlong	arg02, fp
1bcdc     09 15 12 FC | 	wxpin	arg02, arg01
1bce0     1C 4E 05 F1 | 	add	fp, #28
1bce4     A7 12 02 FB | 	rdlong	arg01, fp
1bce8     14 4E 85 F1 | 	sub	fp, #20
1bcec     A7 14 02 FB | 	rdlong	arg02, fp
1bcf0     09 15 02 FC | 	wrpin	arg02, arg01
1bcf4                 | ' 
1bcf4                 | ' 		}
1bcf4                 | ' 	}
1bcf4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1bcf4                 | ' 	CardType = ty;
1bcf4                 | ' 	s = ty ? 0 :  0x01 ;
1bcf4                 | ' 	Stat = s;
1bcf4                 | ' 
1bcf4                 | ' 	deselect();
1bcf4                 | ' 
1bcf4                 | ' 
1bcf4                 | ' 	_wxpin( PIN_CLK, ck_div );
1bcf4                 | ' 	_wrpin( PIN_DI, spm_tx );
1bcf4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1bcf4                 | ' 	return s;
1bcf4     08 4E 05 F1 | 	add	fp, #8
1bcf8     A7 FA C1 FA | 	rdbyte	result1, fp
1bcfc     2C 4E 85 F1 | 	sub	fp, #44
1bd00                 | LR__3068
1bd00     A7 F0 03 F6 | 	mov	ptra, fp
1bd04     B2 00 A0 FD | 	call	#popregs_
1bd08                 | _fatfs_cc_disk_initialize_ret
1bd08     2D 00 64 FD | 	ret
1bd0c                 | 
1bd0c                 | _fatfs_cc_disk_read
1bd0c     05 4A 05 F6 | 	mov	COUNT_, #5
1bd10     A8 00 A0 FD | 	call	#pushregs_
1bd14     0A 1F 02 F6 | 	mov	local01, arg02
1bd18     0B 21 02 F6 | 	mov	local02, arg03
1bd1c     0C 23 02 F6 | 	mov	local03, arg04
1bd20     00 12 0E F2 | 	cmp	arg01, #0 wz
1bd24     01 FA 05 56 |  if_ne	mov	result1, #1
1bd28                 | ' 
1bd28                 | ' 	return Stat;
1bd28     01 00 00 AF 
1bd2c     20 E4 05 A1 |  if_e	add	objptr, ##544
1bd30     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1bd34     01 00 00 AF 
1bd38     20 E4 85 A1 |  if_e	sub	objptr, ##544
1bd3c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bd40     01 FA CD F7 | 	test	result1, #1 wz
1bd44     03 FA 05 56 |  if_ne	mov	result1, #3
1bd48     84 00 90 5D |  if_ne	jmp	#LR__3072
1bd4c     01 00 00 FF 
1bd50     21 E4 05 F1 | 	add	objptr, ##545
1bd54     F2 24 C2 FA | 	rdbyte	local04, objptr
1bd58     01 00 00 FF 
1bd5c     21 E4 85 F1 | 	sub	objptr, ##545
1bd60     08 24 CE F7 | 	test	local04, #8 wz
1bd64     09 20 66 A0 |  if_e	shl	local02, #9
1bd68     02 22 16 F2 | 	cmp	local03, #2 wc
1bd6c     12 24 06 36 |  if_ae	mov	local04, #18
1bd70     11 24 06 C6 |  if_b	mov	local04, #17
1bd74     10 15 02 F6 | 	mov	arg02, local02
1bd78     12 13 02 F6 | 	mov	arg01, local04
1bd7c     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1bd80     FD 26 02 F6 | 	mov	local05, result1
1bd84     07 26 4E F7 | 	zerox	local05, #7 wz
1bd88     30 00 90 5D |  if_ne	jmp	#LR__3071
1bd8c                 | ' 		do {
1bd8c                 | LR__3070
1bd8c     0F 13 02 F6 | 	mov	arg01, local01
1bd90     09 14 C6 F9 | 	decod	arg02, #9
1bd94     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0927
1bd98     00 FA 0D F2 | 	cmp	result1, #0 wz
1bd9c     01 00 00 5F 
1bda0     00 1E 06 51 |  if_ne	add	local01, ##512
1bda4     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3070
1bda8     12 25 E2 F8 | 	getbyte	local04, local04, #0
1bdac     12 24 0E F2 | 	cmp	local04, #18 wz
1bdb0     0C 12 06 A6 |  if_e	mov	arg01, #12
1bdb4     00 14 06 A6 |  if_e	mov	arg02, #0
1bdb8     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0933
1bdbc                 | LR__3071
1bdbc     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0919
1bdc0                 | ' 	}
1bdc0                 | ' 	deselect();
1bdc0                 | ' 
1bdc0                 | ' 	return count ? RES_ERROR : RES_OK;
1bdc0     00 22 0E F2 | 	cmp	local03, #0 wz
1bdc4     01 26 06 56 |  if_ne	mov	local05, #1
1bdc8     00 26 06 A6 |  if_e	mov	local05, #0
1bdcc     13 FB 01 F6 | 	mov	result1, local05
1bdd0                 | LR__3072
1bdd0     A7 F0 03 F6 | 	mov	ptra, fp
1bdd4     B2 00 A0 FD | 	call	#popregs_
1bdd8                 | _fatfs_cc_disk_read_ret
1bdd8     2D 00 64 FD | 	ret
1bddc                 | 
1bddc                 | _fatfs_cc_disk_write
1bddc     04 4A 05 F6 | 	mov	COUNT_, #4
1bde0     A8 00 A0 FD | 	call	#pushregs_
1bde4     0A 1F 02 F6 | 	mov	local01, arg02
1bde8     0C 21 02 F6 | 	mov	local02, arg04
1bdec     0B 23 02 F6 | 	mov	local03, arg03
1bdf0     00 12 0E F2 | 	cmp	arg01, #0 wz
1bdf4     01 FA 05 56 |  if_ne	mov	result1, #1
1bdf8                 | ' 
1bdf8                 | ' 	return Stat;
1bdf8     01 00 00 AF 
1bdfc     20 E4 05 A1 |  if_e	add	objptr, ##544
1be00     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1be04     01 00 00 AF 
1be08     20 E4 85 A1 |  if_e	sub	objptr, ##544
1be0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1be10     01 FA CD F7 | 	test	result1, #1 wz
1be14     03 FA 05 56 |  if_ne	mov	result1, #3
1be18     D4 00 90 5D |  if_ne	jmp	#LR__3084
1be1c     01 00 00 FF 
1be20     21 E4 05 F1 | 	add	objptr, ##545
1be24     F2 16 C2 FA | 	rdbyte	arg03, objptr
1be28     01 00 00 FF 
1be2c     21 E4 85 F1 | 	sub	objptr, ##545
1be30     08 16 CE F7 | 	test	arg03, #8 wz
1be34     09 22 66 A0 |  if_e	shl	local03, #9
1be38     01 20 0E F2 | 	cmp	local02, #1 wz
1be3c     30 00 90 5D |  if_ne	jmp	#LR__3080
1be40     18 12 06 F6 | 	mov	arg01, #24
1be44     11 15 02 F6 | 	mov	arg02, local03
1be48     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1be4c     FD 24 02 F6 | 	mov	local04, result1
1be50     07 24 4E F7 | 	zerox	local04, #7 wz
1be54     84 00 90 5D |  if_ne	jmp	#LR__3083
1be58     0F 13 02 F6 | 	mov	arg01, local01
1be5c     FE 14 06 F6 | 	mov	arg02, #254
1be60     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0929
1be64     00 FA 0D F2 | 	cmp	result1, #0 wz
1be68     00 20 06 56 |  if_ne	mov	local02, #0
1be6c     6C 00 90 FD | 	jmp	#LR__3083
1be70                 | LR__3080
1be70     01 00 00 FF 
1be74     21 E4 05 F1 | 	add	objptr, ##545
1be78     F2 24 C2 FA | 	rdbyte	local04, objptr
1be7c     01 00 00 FF 
1be80     21 E4 85 F1 | 	sub	objptr, ##545
1be84     06 24 CE F7 | 	test	local04, #6 wz
1be88     97 12 06 56 |  if_ne	mov	arg01, #151
1be8c     10 15 02 56 |  if_ne	mov	arg02, local02
1be90     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0933
1be94     11 15 02 F6 | 	mov	arg02, local03
1be98     19 12 06 F6 | 	mov	arg01, #25
1be9c     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1bea0     FD 24 02 F6 | 	mov	local04, result1
1bea4     07 24 4E F7 | 	zerox	local04, #7 wz
1bea8     30 00 90 5D |  if_ne	jmp	#LR__3082
1beac                 | ' 			do {
1beac                 | LR__3081
1beac     0F 13 02 F6 | 	mov	arg01, local01
1beb0     FC 14 06 F6 | 	mov	arg02, #252
1beb4     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0929
1beb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1bebc     01 00 00 5F 
1bec0     00 1E 06 51 |  if_ne	add	local01, ##512
1bec4     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3081
1bec8     00 12 06 F6 | 	mov	arg01, #0
1becc     FD 14 06 F6 | 	mov	arg02, #253
1bed0     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0929
1bed4     00 FA 0D F2 | 	cmp	result1, #0 wz
1bed8     01 20 06 A6 |  if_e	mov	local02, #1
1bedc                 | LR__3082
1bedc                 | LR__3083
1bedc     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0919
1bee0                 | ' 				count = 1;
1bee0                 | ' 		}
1bee0                 | ' 	}
1bee0                 | ' 	deselect();
1bee0                 | ' 
1bee0                 | ' 	return count ? RES_ERROR : RES_OK;
1bee0     00 20 0E F2 | 	cmp	local02, #0 wz
1bee4     01 24 06 56 |  if_ne	mov	local04, #1
1bee8     00 24 06 A6 |  if_e	mov	local04, #0
1beec     12 FB 01 F6 | 	mov	result1, local04
1bef0                 | LR__3084
1bef0     A7 F0 03 F6 | 	mov	ptra, fp
1bef4     B2 00 A0 FD | 	call	#popregs_
1bef8                 | _fatfs_cc_disk_write_ret
1bef8     2D 00 64 FD | 	ret
1befc                 | 
1befc                 | _fatfs_cc_disk_ioctl
1befc     01 4A 05 F6 | 	mov	COUNT_, #1
1bf00     A8 00 A0 FD | 	call	#pushregs_
1bf04     30 F0 07 F1 | 	add	ptra, #48
1bf08     04 4E 05 F1 | 	add	fp, #4
1bf0c     A7 12 42 FC | 	wrbyte	arg01, fp
1bf10     04 4E 05 F1 | 	add	fp, #4
1bf14     A7 14 42 FC | 	wrbyte	arg02, fp
1bf18     04 4E 05 F1 | 	add	fp, #4
1bf1c     A7 16 62 FC | 	wrlong	arg03, fp
1bf20     08 4E 85 F1 | 	sub	fp, #8
1bf24     A7 12 CA FA | 	rdbyte	arg01, fp wz
1bf28     04 4E 85 F1 | 	sub	fp, #4
1bf2c     01 FA 05 56 |  if_ne	mov	result1, #1
1bf30                 | ' 
1bf30                 | ' 	return Stat;
1bf30     01 00 00 AF 
1bf34     20 E4 05 A1 |  if_e	add	objptr, ##544
1bf38     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1bf3c     01 00 00 AF 
1bf40     20 E4 85 A1 |  if_e	sub	objptr, ##544
1bf44     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bf48     01 FA CD F7 | 	test	result1, #1 wz
1bf4c     03 FA 05 56 |  if_ne	mov	result1, #3
1bf50     E4 01 90 5D |  if_ne	jmp	#LR__3098
1bf54     10 4E 05 F1 | 	add	fp, #16
1bf58     A7 02 68 FC | 	wrlong	#1, fp
1bf5c                 | ' 
1bf5c                 | ' 	res = RES_ERROR;
1bf5c                 | ' 	switch (ctrl) {
1bf5c     08 4E 85 F1 | 	sub	fp, #8
1bf60     A7 1E C2 FA | 	rdbyte	local01, fp
1bf64     08 4E 85 F1 | 	sub	fp, #8
1bf68     04 1E 26 F3 | 	fle	local01, #4
1bf6c     30 1E 62 FD | 	jmprel	local01
1bf70                 | LR__3090
1bf70     10 00 90 FD | 	jmp	#LR__3091
1bf74     24 00 90 FD | 	jmp	#LR__3092
1bf78     A0 01 90 FD | 	jmp	#LR__3096
1bf7c     80 01 90 FD | 	jmp	#LR__3095
1bf80     98 01 90 FD | 	jmp	#LR__3096
1bf84                 | LR__3091
1bf84     B0 79 B0 FD | 	call	#_fatfs_cc_select_0923
1bf88     00 FA 0D F2 | 	cmp	result1, #0 wz
1bf8c     10 4E 05 51 |  if_ne	add	fp, #16
1bf90     A7 00 68 5C |  if_ne	wrlong	#0, fp
1bf94     10 4E 85 51 |  if_ne	sub	fp, #16
1bf98                 | ' 			break;
1bf98     8C 01 90 FD | 	jmp	#LR__3097
1bf9c                 | LR__3092
1bf9c     09 12 06 F6 | 	mov	arg01, #9
1bfa0     00 14 06 F6 | 	mov	arg02, #0
1bfa4     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0933
1bfa8     FD 1E 02 F6 | 	mov	local01, result1
1bfac     07 1E 4E F7 | 	zerox	local01, #7 wz
1bfb0     74 01 90 5D |  if_ne	jmp	#LR__3097
1bfb4     18 4E 05 F1 | 	add	fp, #24
1bfb8     A7 12 02 F6 | 	mov	arg01, fp
1bfbc     18 4E 85 F1 | 	sub	fp, #24
1bfc0     10 14 06 F6 | 	mov	arg02, #16
1bfc4     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0927
1bfc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1bfcc     58 01 90 AD |  if_e	jmp	#LR__3097
1bfd0     18 4E 05 F1 | 	add	fp, #24
1bfd4     A7 1E C2 FA | 	rdbyte	local01, fp
1bfd8     18 4E 85 F1 | 	sub	fp, #24
1bfdc     06 1E 46 F0 | 	shr	local01, #6
1bfe0     01 1E 0E F2 | 	cmp	local01, #1 wz
1bfe4     5C 00 90 5D |  if_ne	jmp	#LR__3093
1bfe8     21 4E 05 F1 | 	add	fp, #33
1bfec     A7 1E C2 FA | 	rdbyte	local01, fp
1bff0     01 4E 85 F1 | 	sub	fp, #1
1bff4     A7 FA C1 FA | 	rdbyte	result1, fp
1bff8     FD FA 31 F9 | 	getword	result1, result1, #0
1bffc     08 FA 65 F0 | 	shl	result1, #8
1c000     FD 1E 02 F1 | 	add	local01, result1
1c004     01 4E 85 F1 | 	sub	fp, #1
1c008     A7 FA C1 FA | 	rdbyte	result1, fp
1c00c     3F FA 05 F5 | 	and	result1, #63
1c010     10 FA 65 F0 | 	shl	result1, #16
1c014     FD 1E 02 F1 | 	add	local01, result1
1c018     01 1E 06 F1 | 	add	local01, #1
1c01c     09 4E 05 F1 | 	add	fp, #9
1c020     A7 1E 62 FC | 	wrlong	local01, fp
1c024     1C 4E 85 F1 | 	sub	fp, #28
1c028     A7 1E 02 FB | 	rdlong	local01, fp
1c02c     1C 4E 05 F1 | 	add	fp, #28
1c030     A7 FA 01 FB | 	rdlong	result1, fp
1c034     28 4E 85 F1 | 	sub	fp, #40
1c038     0A FA 65 F0 | 	shl	result1, #10
1c03c     0F FB 61 FC | 	wrlong	result1, local01
1c040     AC 00 90 FD | 	jmp	#LR__3094
1c044                 | LR__3093
1c044     1D 4E 05 F1 | 	add	fp, #29
1c048     A7 1E C2 FA | 	rdbyte	local01, fp
1c04c     0F 1F 42 F8 | 	getnib	local01, local01, #0
1c050     05 4E 05 F1 | 	add	fp, #5
1c054     A7 FA C1 FA | 	rdbyte	result1, fp
1c058     80 FA 05 F5 | 	and	result1, #128
1c05c     07 FA C5 F0 | 	sar	result1, #7
1c060     FD 1E 02 F1 | 	add	local01, result1
1c064     01 4E 85 F1 | 	sub	fp, #1
1c068     A7 FA C1 FA | 	rdbyte	result1, fp
1c06c     03 FA 05 F5 | 	and	result1, #3
1c070     01 FA 65 F0 | 	shl	result1, #1
1c074     FD 1E 02 F1 | 	add	local01, result1
1c078     02 1E 06 F1 | 	add	local01, #2
1c07c     0D 4E 85 F1 | 	sub	fp, #13
1c080     A7 1E 42 FC | 	wrbyte	local01, fp
1c084     0C 4E 05 F1 | 	add	fp, #12
1c088     A7 1E C2 FA | 	rdbyte	local01, fp
1c08c     06 1E 46 F0 | 	shr	local01, #6
1c090     01 4E 85 F1 | 	sub	fp, #1
1c094     A7 FA C1 FA | 	rdbyte	result1, fp
1c098     FD FA 31 F9 | 	getword	result1, result1, #0
1c09c     02 FA 65 F0 | 	shl	result1, #2
1c0a0     FD 1E 02 F1 | 	add	local01, result1
1c0a4     01 4E 85 F1 | 	sub	fp, #1
1c0a8     A7 FA C1 FA | 	rdbyte	result1, fp
1c0ac     03 FA 05 F5 | 	and	result1, #3
1c0b0     FD FA 31 F9 | 	getword	result1, result1, #0
1c0b4     0A FA 65 F0 | 	shl	result1, #10
1c0b8     FD 1E 02 F1 | 	add	local01, result1
1c0bc     01 1E 06 F1 | 	add	local01, #1
1c0c0     0A 4E 05 F1 | 	add	fp, #10
1c0c4     A7 1E 62 FC | 	wrlong	local01, fp
1c0c8     1C 4E 85 F1 | 	sub	fp, #28
1c0cc     A7 1E 02 FB | 	rdlong	local01, fp
1c0d0     1C 4E 05 F1 | 	add	fp, #28
1c0d4     A7 FA 01 FB | 	rdlong	result1, fp
1c0d8     14 4E 85 F1 | 	sub	fp, #20
1c0dc     A7 16 C2 FA | 	rdbyte	arg03, fp
1c0e0     14 4E 85 F1 | 	sub	fp, #20
1c0e4     09 16 86 F1 | 	sub	arg03, #9
1c0e8     0B FB 61 F0 | 	shl	result1, arg03
1c0ec     0F FB 61 FC | 	wrlong	result1, local01
1c0f0                 | LR__3094
1c0f0     10 4E 05 F1 | 	add	fp, #16
1c0f4     A7 00 68 FC | 	wrlong	#0, fp
1c0f8     10 4E 85 F1 | 	sub	fp, #16
1c0fc                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1c0fc                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1c0fc                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1c0fc                 | ' 				}
1c0fc                 | ' 				res = RES_OK;
1c0fc                 | ' 			}
1c0fc                 | ' 			break;
1c0fc     28 00 90 FD | 	jmp	#LR__3097
1c100                 | LR__3095
1c100     0C 4E 05 F1 | 	add	fp, #12
1c104     A7 1E 02 FB | 	rdlong	local01, fp
1c108     0F 01 69 FC | 	wrlong	#128, local01
1c10c     04 4E 05 F1 | 	add	fp, #4
1c110     A7 00 68 FC | 	wrlong	#0, fp
1c114     10 4E 85 F1 | 	sub	fp, #16
1c118                 | ' 			*(DWORD*)buff = 128;
1c118                 | ' 			res = RES_OK;
1c118                 | ' 			break;
1c118     0C 00 90 FD | 	jmp	#LR__3097
1c11c                 | LR__3096
1c11c     10 4E 05 F1 | 	add	fp, #16
1c120     A7 08 68 FC | 	wrlong	#4, fp
1c124     10 4E 85 F1 | 	sub	fp, #16
1c128                 | LR__3097
1c128     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0919
1c12c                 | ' 			res = RES_PARERR;
1c12c                 | ' 	}
1c12c                 | ' 
1c12c                 | ' 	deselect();
1c12c                 | ' 
1c12c                 | ' 	return res;
1c12c     10 4E 05 F1 | 	add	fp, #16
1c130     A7 FA 01 FB | 	rdlong	result1, fp
1c134     10 4E 85 F1 | 	sub	fp, #16
1c138                 | LR__3098
1c138     A7 F0 03 F6 | 	mov	ptra, fp
1c13c     B2 00 A0 FD | 	call	#popregs_
1c140                 | _fatfs_cc_disk_ioctl_ret
1c140     2D 00 64 FD | 	ret
1c144                 | 
1c144                 | _fatfs_cc_disk_setpins
1c144     00 12 0E F2 | 	cmp	arg01, #0 wz
1c148     01 FA 65 56 |  if_ne	neg	result1, #1
1c14c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1c150     01 00 00 FF 
1c154     10 E4 05 F1 | 	add	objptr, ##528
1c158     F2 14 62 FC | 	wrlong	arg02, objptr
1c15c     04 E4 05 F1 | 	add	objptr, #4
1c160     F2 16 62 FC | 	wrlong	arg03, objptr
1c164     04 E4 05 F1 | 	add	objptr, #4
1c168     F2 18 62 FC | 	wrlong	arg04, objptr
1c16c     04 E4 05 F1 | 	add	objptr, #4
1c170     F2 1A 62 FC | 	wrlong	arg05, objptr
1c174     01 00 00 FF 
1c178     1C E4 85 F1 | 	sub	objptr, ##540
1c17c     00 FA 05 F6 | 	mov	result1, #0
1c180                 | _fatfs_cc_disk_setpins_ret
1c180     2D 00 64 FD | 	ret
1c184                 | 
1c184                 | _fatfs_cc_tchar2uni
1c184     09 01 02 FB | 	rdlong	_var01, arg01
1c188     00 03 02 F6 | 	mov	_var02, _var01
1c18c     01 00 06 F1 | 	add	_var01, #1
1c190     00 05 02 F6 | 	mov	_var03, _var01
1c194     01 07 C2 FA | 	rdbyte	_var04, _var02
1c198     80 06 CE F7 | 	test	_var04, #128 wz
1c19c     E8 00 90 AD |  if_e	jmp	#LR__3107
1c1a0     03 09 02 F6 | 	mov	_var05, _var04
1c1a4     E0 08 06 F5 | 	and	_var05, #224
1c1a8     C0 08 0E F2 | 	cmp	_var05, #192 wz
1c1ac     1F 06 06 A5 |  if_e	and	_var04, #31
1c1b0     01 0A 06 A6 |  if_e	mov	_var06, #1
1c1b4     34 00 90 AD |  if_e	jmp	#LR__3101
1c1b8     03 09 02 F6 | 	mov	_var05, _var04
1c1bc     F0 08 06 F5 | 	and	_var05, #240
1c1c0     E0 08 0E F2 | 	cmp	_var05, #224 wz
1c1c4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1c1c8     02 0A 06 A6 |  if_e	mov	_var06, #2
1c1cc     1C 00 90 AD |  if_e	jmp	#LR__3100
1c1d0     03 09 02 F6 | 	mov	_var05, _var04
1c1d4     F8 08 06 F5 | 	and	_var05, #248
1c1d8     F0 08 0E F2 | 	cmp	_var05, #240 wz
1c1dc     07 06 06 A5 |  if_e	and	_var04, #7
1c1e0     03 0A 06 A6 |  if_e	mov	_var06, #3
1c1e4                 | ' 			return 0xFFFFFFFF;
1c1e4     01 FA 65 56 |  if_ne	neg	result1, #1
1c1e8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c1ec                 | LR__3100
1c1ec                 | LR__3101
1c1ec                 | ' 		}
1c1ec                 | ' 		do {
1c1ec                 | LR__3102
1c1ec     02 0D C2 FA | 	rdbyte	_var07, _var03
1c1f0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1c1f4     C0 08 06 F5 | 	and	_var05, #192
1c1f8     80 08 0E F2 | 	cmp	_var05, #128 wz
1c1fc     01 04 06 F1 | 	add	_var03, #1
1c200     01 FA 65 56 |  if_ne	neg	result1, #1
1c204     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c208     06 06 66 F0 | 	shl	_var04, #6
1c20c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1c210     3F 02 06 F5 | 	and	_var02, #63
1c214     01 07 42 F5 | 	or	_var04, _var02
1c218     F4 0B 6E FB | 	djnz	_var06, #LR__3102
1c21c     80 06 16 F2 | 	cmp	_var04, #128 wc
1c220     24 00 90 CD |  if_b	jmp	#LR__3104
1c224     6C 00 00 FF 
1c228     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1c22c     0C 00 90 CD |  if_b	jmp	#LR__3103
1c230     70 00 00 FF 
1c234     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1c238     0C 00 90 CD |  if_b	jmp	#LR__3104
1c23c                 | LR__3103
1c23c     80 08 00 FF 
1c240     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1c244     08 00 90 CD |  if_b	jmp	#LR__3105
1c248                 | LR__3104
1c248     01 FA 65 F6 | 	neg	result1, #1
1c24c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1c250                 | LR__3105
1c250     80 00 00 FF 
1c254     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1c258     2C 00 90 CD |  if_b	jmp	#LR__3106
1c25c     03 03 02 F6 | 	mov	_var02, _var04
1c260     80 00 00 FF 
1c264     00 02 86 F1 | 	sub	_var02, ##65536
1c268     06 02 66 F0 | 	shl	_var02, #6
1c26c     80 FF 01 FF 
1c270     00 02 06 F5 | 	and	_var02, ##67043328
1c274     6E 00 6C FF 
1c278     00 08 06 F6 | 	mov	_var05, ##-671032320
1c27c     01 09 42 F5 | 	or	_var05, _var02
1c280     09 06 46 F7 | 	zerox	_var04, #9
1c284     04 07 42 F5 | 	or	_var04, _var05
1c288                 | LR__3106
1c288                 | LR__3107
1c288     09 05 62 FC | 	wrlong	_var03, arg01
1c28c                 | ' 	}
1c28c                 | ' #line 811 "ff.c"
1c28c                 | ' 	*str = p;
1c28c                 | ' 	return uc;
1c28c     03 FB 01 F6 | 	mov	result1, _var04
1c290                 | _fatfs_cc_tchar2uni_ret
1c290     2D 00 64 FD | 	ret
1c294                 | 
1c294                 | _fatfs_cc_put_utf
1c294     80 12 16 F2 | 	cmp	arg01, #128 wc
1c298     18 00 90 3D |  if_ae	jmp	#LR__3110
1c29c     01 16 16 F2 | 	cmp	arg03, #1 wc
1c2a0     00 FA 05 C6 |  if_b	mov	result1, #0
1c2a4     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c2a8     0A 13 42 FC | 	wrbyte	arg01, arg02
1c2ac                 | ' 		*buf = (TCHAR)chr;
1c2ac                 | ' 		return 1;
1c2ac     01 FA 05 F6 | 	mov	result1, #1
1c2b0     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c2b4                 | LR__3110
1c2b4     04 00 00 FF 
1c2b8     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1c2bc     40 00 90 3D |  if_ae	jmp	#LR__3111
1c2c0     02 16 16 F2 | 	cmp	arg03, #2 wc
1c2c4     00 FA 05 C6 |  if_b	mov	result1, #0
1c2c8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c2cc     09 FB 01 F6 | 	mov	result1, arg01
1c2d0     06 FA 45 F0 | 	shr	result1, #6
1c2d4     1F FA 05 F5 | 	and	result1, #31
1c2d8     C0 16 06 F6 | 	mov	arg03, #192
1c2dc     FD 16 42 F5 | 	or	arg03, result1
1c2e0     0A 17 42 FC | 	wrbyte	arg03, arg02
1c2e4     01 14 06 F1 | 	add	arg02, #1
1c2e8     3F 12 06 F5 | 	and	arg01, #63
1c2ec     80 FA 05 F6 | 	mov	result1, #128
1c2f0     09 FB 41 F5 | 	or	result1, arg01
1c2f4     0A FB 41 FC | 	wrbyte	result1, arg02
1c2f8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1c2f8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c2f8                 | ' 		return 2;
1c2f8     02 FA 05 F6 | 	mov	result1, #2
1c2fc     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c300                 | LR__3111
1c300     80 00 00 FF 
1c304     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1c308     70 00 90 3D |  if_ae	jmp	#LR__3114
1c30c     03 16 16 F2 | 	cmp	arg03, #3 wc
1c310     18 00 90 CD |  if_b	jmp	#LR__3112
1c314     6C 00 00 FF 
1c318     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1c31c     14 00 90 CD |  if_b	jmp	#LR__3113
1c320     70 00 00 FF 
1c324     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1c328     08 00 90 3D |  if_ae	jmp	#LR__3113
1c32c                 | LR__3112
1c32c     00 FA 05 F6 | 	mov	result1, #0
1c330     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c334                 | LR__3113
1c334     09 FB 59 F8 | 	getnib	result1, arg01, #3
1c338     E0 16 06 F6 | 	mov	arg03, #224
1c33c     FD 16 42 F5 | 	or	arg03, result1
1c340     0A 17 42 FC | 	wrbyte	arg03, arg02
1c344     01 14 06 F1 | 	add	arg02, #1
1c348     09 FB 01 F6 | 	mov	result1, arg01
1c34c     06 FA 45 F0 | 	shr	result1, #6
1c350     3F FA 05 F5 | 	and	result1, #63
1c354     80 16 06 F6 | 	mov	arg03, #128
1c358     FD 16 42 F5 | 	or	arg03, result1
1c35c     0A 17 42 FC | 	wrbyte	arg03, arg02
1c360     01 14 06 F1 | 	add	arg02, #1
1c364     3F 12 06 F5 | 	and	arg01, #63
1c368     80 FA 05 F6 | 	mov	result1, #128
1c36c     09 FB 41 F5 | 	or	result1, arg01
1c370     0A FB 41 FC | 	wrbyte	result1, arg02
1c374                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1c374                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c374                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c374                 | ' 		return 3;
1c374     03 FA 05 F6 | 	mov	result1, #3
1c378     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c37c                 | LR__3114
1c37c     04 16 16 F2 | 	cmp	arg03, #4 wc
1c380     00 FA 05 C6 |  if_b	mov	result1, #0
1c384     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c388     09 01 02 F6 | 	mov	_var01, arg01
1c38c     E0 01 06 F4 | 	bitl	_var01, #480
1c390     00 00 6C FF 
1c394     00 00 86 F1 | 	sub	_var01, ##-671088640
1c398     06 00 46 F0 | 	shr	_var01, #6
1c39c     09 13 32 F9 | 	getword	arg01, arg01, #0
1c3a0     6E 00 00 FF 
1c3a4     00 12 86 F1 | 	sub	arg01, ##56320
1c3a8     00 08 00 FF 
1c3ac     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1c3b0     02 00 00 CF 
1c3b4     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1c3b8     00 FA 05 36 |  if_ae	mov	result1, #0
1c3bc     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1c3c0     09 01 42 F5 | 	or	_var01, arg01
1c3c4     80 00 00 FF 
1c3c8     00 00 06 F1 | 	add	_var01, ##65536
1c3cc     00 FB 01 F6 | 	mov	result1, _var01
1c3d0     12 FA 45 F0 | 	shr	result1, #18
1c3d4     07 FA 05 F5 | 	and	result1, #7
1c3d8     F0 16 06 F6 | 	mov	arg03, #240
1c3dc     FD 16 42 F5 | 	or	arg03, result1
1c3e0     0A 17 42 FC | 	wrbyte	arg03, arg02
1c3e4     01 14 06 F1 | 	add	arg02, #1
1c3e8     00 FB 01 F6 | 	mov	result1, _var01
1c3ec     0C FA 45 F0 | 	shr	result1, #12
1c3f0     3F FA 05 F5 | 	and	result1, #63
1c3f4     80 16 06 F6 | 	mov	arg03, #128
1c3f8     FD 16 42 F5 | 	or	arg03, result1
1c3fc     0A 17 42 FC | 	wrbyte	arg03, arg02
1c400     01 14 06 F1 | 	add	arg02, #1
1c404     00 FB 01 F6 | 	mov	result1, _var01
1c408     06 FA 45 F0 | 	shr	result1, #6
1c40c     3F FA 05 F5 | 	and	result1, #63
1c410     80 16 06 F6 | 	mov	arg03, #128
1c414     FD 16 42 F5 | 	or	arg03, result1
1c418     0A 17 42 FC | 	wrbyte	arg03, arg02
1c41c     01 14 06 F1 | 	add	arg02, #1
1c420     3F 00 06 F5 | 	and	_var01, #63
1c424     80 FA 05 F6 | 	mov	result1, #128
1c428     00 FB 41 F5 | 	or	result1, _var01
1c42c     0A FB 41 FC | 	wrbyte	result1, arg02
1c430                 | ' 	chr = (hc | chr) + 0x10000;
1c430                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1c430                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1c430                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c430                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c430                 | ' 	return 4;
1c430     04 FA 05 F6 | 	mov	result1, #4
1c434                 | _fatfs_cc_put_utf_ret
1c434     2D 00 64 FD | 	ret
1c438                 | 
1c438                 | _fatfs_cc_sync_window
1c438     02 4A 05 F6 | 	mov	COUNT_, #2
1c43c     A8 00 A0 FD | 	call	#pushregs_
1c440     09 1F 02 F6 | 	mov	local01, arg01
1c444     00 20 06 F6 | 	mov	local02, #0
1c448     03 1E 06 F1 | 	add	local01, #3
1c44c     0F FB C9 FA | 	rdbyte	result1, local01 wz
1c450     03 1E 86 F1 | 	sub	local01, #3
1c454     A4 00 90 AD |  if_e	jmp	#LR__3122
1c458     01 1E 06 F1 | 	add	local01, #1
1c45c     0F 13 C2 FA | 	rdbyte	arg01, local01
1c460     33 1E 06 F1 | 	add	local01, #51
1c464     0F 15 02 F6 | 	mov	arg02, local01
1c468     04 1E 86 F1 | 	sub	local01, #4
1c46c     0F 17 02 FB | 	rdlong	arg03, local01
1c470     30 1E 86 F1 | 	sub	local01, #48
1c474     01 18 06 F6 | 	mov	arg04, #1
1c478     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1c47c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c480     74 00 90 5D |  if_ne	jmp	#LR__3120
1c484     03 1E 06 F1 | 	add	local01, #3
1c488     0F 01 48 FC | 	wrbyte	#0, local01
1c48c     2D 1E 06 F1 | 	add	local01, #45
1c490     0F FB 01 FB | 	rdlong	result1, local01
1c494     0C 1E 86 F1 | 	sub	local01, #12
1c498     0F 19 02 FB | 	rdlong	arg04, local01
1c49c     0C FB 81 F1 | 	sub	result1, arg04
1c4a0     08 1E 86 F1 | 	sub	local01, #8
1c4a4     0F 19 02 FB | 	rdlong	arg04, local01
1c4a8     1C 1E 86 F1 | 	sub	local01, #28
1c4ac     0C FB 11 F2 | 	cmp	result1, arg04 wc
1c4b0     48 00 90 3D |  if_ae	jmp	#LR__3121
1c4b4     02 1E 06 F1 | 	add	local01, #2
1c4b8     0F 19 C2 FA | 	rdbyte	arg04, local01
1c4bc     02 1E 86 F1 | 	sub	local01, #2
1c4c0     02 18 0E F2 | 	cmp	arg04, #2 wz
1c4c4     34 00 90 5D |  if_ne	jmp	#LR__3121
1c4c8     01 1E 06 F1 | 	add	local01, #1
1c4cc     0F 13 C2 FA | 	rdbyte	arg01, local01
1c4d0     33 1E 06 F1 | 	add	local01, #51
1c4d4     0F 15 02 F6 | 	mov	arg02, local01
1c4d8     04 1E 86 F1 | 	sub	local01, #4
1c4dc     0F 17 02 FB | 	rdlong	arg03, local01
1c4e0     14 1E 86 F1 | 	sub	local01, #20
1c4e4     0F 1F 02 FB | 	rdlong	local01, local01
1c4e8     0F 17 02 F1 | 	add	arg03, local01
1c4ec     01 18 06 F6 | 	mov	arg04, #1
1c4f0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1c4f4     04 00 90 FD | 	jmp	#LR__3121
1c4f8                 | LR__3120
1c4f8     01 20 06 F6 | 	mov	local02, #1
1c4fc                 | LR__3121
1c4fc                 | LR__3122
1c4fc                 | ' 			res = FR_DISK_ERR;
1c4fc                 | ' 		}
1c4fc                 | ' 	}
1c4fc                 | ' 	return res;
1c4fc     10 FB 01 F6 | 	mov	result1, local02
1c500     A7 F0 03 F6 | 	mov	ptra, fp
1c504     B2 00 A0 FD | 	call	#popregs_
1c508                 | _fatfs_cc_sync_window_ret
1c508     2D 00 64 FD | 	ret
1c50c                 | 
1c50c                 | _fatfs_cc_move_window
1c50c     03 4A 05 F6 | 	mov	COUNT_, #3
1c510     A8 00 A0 FD | 	call	#pushregs_
1c514     09 1F 02 F6 | 	mov	local01, arg01
1c518     0A 21 02 F6 | 	mov	local02, arg02
1c51c     00 22 06 F6 | 	mov	local03, #0
1c520     30 1E 06 F1 | 	add	local01, #48
1c524     0F 19 02 FB | 	rdlong	arg04, local01
1c528     30 1E 86 F1 | 	sub	local01, #48
1c52c     0C 21 0A F2 | 	cmp	local02, arg04 wz
1c530     40 00 90 AD |  if_e	jmp	#LR__3131
1c534     0F 13 02 F6 | 	mov	arg01, local01
1c538     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1c53c     FD 22 0A F6 | 	mov	local03, result1 wz
1c540     30 00 90 5D |  if_ne	jmp	#LR__3130
1c544     01 1E 06 F1 | 	add	local01, #1
1c548     0F 13 C2 FA | 	rdbyte	arg01, local01
1c54c     33 1E 06 F1 | 	add	local01, #51
1c550     0F 15 02 F6 | 	mov	arg02, local01
1c554     10 17 02 F6 | 	mov	arg03, local02
1c558     01 18 06 F6 | 	mov	arg04, #1
1c55c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1c560     00 FA 0D F2 | 	cmp	result1, #0 wz
1c564     01 20 66 56 |  if_ne	neg	local02, #1
1c568     01 22 06 56 |  if_ne	mov	local03, #1
1c56c     04 1E 86 F1 | 	sub	local01, #4
1c570     0F 21 62 FC | 	wrlong	local02, local01
1c574                 | LR__3130
1c574                 | LR__3131
1c574                 | ' 				sect = (LBA_t)0 - 1;
1c574                 | ' 				res = FR_DISK_ERR;
1c574                 | ' 			}
1c574                 | ' 			fs->winsect = sect;
1c574                 | ' 		}
1c574                 | ' 	}
1c574                 | ' 	return res;
1c574     11 FB 01 F6 | 	mov	result1, local03
1c578     A7 F0 03 F6 | 	mov	ptra, fp
1c57c     B2 00 A0 FD | 	call	#popregs_
1c580                 | _fatfs_cc_move_window_ret
1c580     2D 00 64 FD | 	ret
1c584                 | 
1c584                 | _fatfs_cc_sync_fs
1c584     02 4A 05 F6 | 	mov	COUNT_, #2
1c588     A8 00 A0 FD | 	call	#pushregs_
1c58c     09 1F 02 F6 | 	mov	local01, arg01
1c590     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1c594     FD 20 0A F6 | 	mov	local02, result1 wz
1c598     D8 00 90 5D |  if_ne	jmp	#LR__3141
1c59c     0F 19 C2 FA | 	rdbyte	arg04, local01
1c5a0     03 18 0E F2 | 	cmp	arg04, #3 wz
1c5a4     04 1E 06 A1 |  if_e	add	local01, #4
1c5a8     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1c5ac     04 1E 86 A1 |  if_e	sub	local01, #4
1c5b0     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1c5b4     A0 00 90 5D |  if_ne	jmp	#LR__3140
1c5b8     34 1E 06 F1 | 	add	local01, #52
1c5bc     0F 13 02 F6 | 	mov	arg01, local01
1c5c0     00 14 06 F6 | 	mov	arg02, #0
1c5c4     09 16 C6 F9 | 	decod	arg03, #9
1c5c8     98 00 A0 FD | 	call	#\builtin_bytefill_
1c5cc     0F 13 02 F6 | 	mov	arg01, local01
1c5d0     FE 13 06 F1 | 	add	arg01, #510
1c5d4     55 00 80 FF 
1c5d8     09 AB 58 FC | 	wrword	##43605, arg01
1c5dc     A9 B0 A0 FF 
1c5e0     0F A5 68 FC | 	wrlong	##1096897106, local01
1c5e4     0F 13 02 F6 | 	mov	arg01, local01
1c5e8     E4 13 06 F1 | 	add	arg01, #484
1c5ec     B9 A0 B0 FF 
1c5f0     09 E5 68 FC | 	wrlong	##1631679090, arg01
1c5f4     0F 13 02 F6 | 	mov	arg01, local01
1c5f8     E8 13 06 F1 | 	add	arg01, #488
1c5fc     20 1E 86 F1 | 	sub	local01, #32
1c600     0F 15 02 FB | 	rdlong	arg02, local01
1c604     09 15 62 FC | 	wrlong	arg02, arg01
1c608     20 1E 06 F1 | 	add	local01, #32
1c60c     0F 13 02 F6 | 	mov	arg01, local01
1c610     EC 13 06 F1 | 	add	arg01, #492
1c614     24 1E 86 F1 | 	sub	local01, #36
1c618     0F 15 02 FB | 	rdlong	arg02, local01
1c61c     09 15 62 FC | 	wrlong	arg02, arg01
1c620     10 1E 06 F1 | 	add	local01, #16
1c624     0F 17 02 FB | 	rdlong	arg03, local01
1c628     01 16 06 F1 | 	add	arg03, #1
1c62c     10 1E 06 F1 | 	add	local01, #16
1c630     0F 17 62 FC | 	wrlong	arg03, local01
1c634     2F 1E 86 F1 | 	sub	local01, #47
1c638     0F 13 C2 FA | 	rdbyte	arg01, local01
1c63c     33 1E 06 F1 | 	add	local01, #51
1c640     0F 15 02 F6 | 	mov	arg02, local01
1c644     01 18 06 F6 | 	mov	arg04, #1
1c648     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1c64c     30 1E 86 F1 | 	sub	local01, #48
1c650     0F 01 48 FC | 	wrbyte	#0, local01
1c654     04 1E 86 F1 | 	sub	local01, #4
1c658                 | LR__3140
1c658     01 1E 06 F1 | 	add	local01, #1
1c65c     0F 13 C2 FA | 	rdbyte	arg01, local01
1c660     00 14 06 F6 | 	mov	arg02, #0
1c664     00 16 06 F6 | 	mov	arg03, #0
1c668     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1c66c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c670     01 20 06 56 |  if_ne	mov	local02, #1
1c674                 | LR__3141
1c674                 | ' 	}
1c674                 | ' 
1c674                 | ' 	return res;
1c674     10 FB 01 F6 | 	mov	result1, local02
1c678     A7 F0 03 F6 | 	mov	ptra, fp
1c67c     B2 00 A0 FD | 	call	#popregs_
1c680                 | _fatfs_cc_sync_fs_ret
1c680     2D 00 64 FD | 	ret
1c684                 | 
1c684                 | _fatfs_cc_clst2sect
1c684     02 14 86 F1 | 	sub	arg02, #2
1c688     18 12 06 F1 | 	add	arg01, #24
1c68c     09 01 02 FB | 	rdlong	_var01, arg01
1c690     18 12 86 F1 | 	sub	arg01, #24
1c694     02 00 86 F1 | 	sub	_var01, #2
1c698     00 15 12 F2 | 	cmp	arg02, _var01 wc
1c69c     00 FA 05 36 |  if_ae	mov	result1, #0
1c6a0     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1c6a4     0A 12 06 F1 | 	add	arg01, #10
1c6a8     09 01 E2 FA | 	rdword	_var01, arg01
1c6ac     0A 01 02 FD | 	qmul	_var01, arg02
1c6b0                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1c6b0     22 12 06 F1 | 	add	arg01, #34
1c6b4     09 FB 01 FB | 	rdlong	result1, arg01
1c6b8     18 00 62 FD | 	getqx	_var01
1c6bc     00 FB 01 F1 | 	add	result1, _var01
1c6c0                 | _fatfs_cc_clst2sect_ret
1c6c0     2D 00 64 FD | 	ret
1c6c4                 | 
1c6c4                 | _fatfs_cc_get_fat
1c6c4     07 4A 05 F6 | 	mov	COUNT_, #7
1c6c8     A8 00 A0 FD | 	call	#pushregs_
1c6cc     0A 1F 02 F6 | 	mov	local01, arg02
1c6d0     09 21 02 FB | 	rdlong	local02, arg01
1c6d4     02 1E 16 F2 | 	cmp	local01, #2 wc
1c6d8     14 00 90 CD |  if_b	jmp	#LR__3150
1c6dc     18 20 06 F1 | 	add	local02, #24
1c6e0     10 23 02 FB | 	rdlong	local03, local02
1c6e4     18 20 86 F1 | 	sub	local02, #24
1c6e8     11 1F 12 F2 | 	cmp	local01, local03 wc
1c6ec     08 00 90 CD |  if_b	jmp	#LR__3151
1c6f0                 | LR__3150
1c6f0     01 24 06 F6 | 	mov	local04, #1
1c6f4     60 01 90 FD | 	jmp	#LR__3158
1c6f8                 | LR__3151
1c6f8     01 24 66 F6 | 	neg	local04, #1
1c6fc                 | ' 		val = 0xFFFFFFFF;
1c6fc                 | ' 
1c6fc                 | ' 		switch (fs->fs_type) {
1c6fc     10 27 C2 FA | 	rdbyte	local05, local02
1c700     01 26 86 F1 | 	sub	local05, #1
1c704     03 26 26 F3 | 	fle	local05, #3
1c708     30 26 62 FD | 	jmprel	local05
1c70c                 | LR__3152
1c70c     0C 00 90 FD | 	jmp	#LR__3153
1c710     B8 00 90 FD | 	jmp	#LR__3154
1c714     F8 00 90 FD | 	jmp	#LR__3155
1c718     38 01 90 FD | 	jmp	#LR__3156
1c71c                 | LR__3153
1c71c     0F 27 02 F6 | 	mov	local05, local01
1c720     0F 13 02 F6 | 	mov	arg01, local01
1c724     01 12 46 F0 | 	shr	arg01, #1
1c728     09 27 02 F1 | 	add	local05, arg01
1c72c     10 13 02 F6 | 	mov	arg01, local02
1c730     13 29 02 F6 | 	mov	local06, local05
1c734     09 28 46 F0 | 	shr	local06, #9
1c738     24 20 06 F1 | 	add	local02, #36
1c73c     10 15 02 FB | 	rdlong	arg02, local02
1c740     24 20 86 F1 | 	sub	local02, #36
1c744     14 15 02 F1 | 	add	arg02, local06
1c748     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1c74c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c750     04 01 90 5D |  if_ne	jmp	#LR__3157
1c754     13 29 02 F6 | 	mov	local06, local05
1c758     FF 29 06 F5 | 	and	local06, #511
1c75c     34 20 06 F1 | 	add	local02, #52
1c760     10 29 02 F1 | 	add	local06, local02
1c764     14 2B C2 FA | 	rdbyte	local07, local06
1c768     34 20 86 F1 | 	sub	local02, #52
1c76c     10 13 02 F6 | 	mov	arg01, local02
1c770     01 26 06 F1 | 	add	local05, #1
1c774     13 29 02 F6 | 	mov	local06, local05
1c778     09 28 46 F0 | 	shr	local06, #9
1c77c     24 20 06 F1 | 	add	local02, #36
1c780     10 15 02 FB | 	rdlong	arg02, local02
1c784     24 20 86 F1 | 	sub	local02, #36
1c788     14 15 02 F1 | 	add	arg02, local06
1c78c     7C FD BF FD | 	call	#_fatfs_cc_move_window
1c790     00 FA 0D F2 | 	cmp	result1, #0 wz
1c794     C0 00 90 5D |  if_ne	jmp	#LR__3157
1c798     FF 27 06 F5 | 	and	local05, #511
1c79c     34 20 06 F1 | 	add	local02, #52
1c7a0     10 27 02 F1 | 	add	local05, local02
1c7a4     13 29 C2 FA | 	rdbyte	local06, local05
1c7a8     08 28 66 F0 | 	shl	local06, #8
1c7ac     14 2B 42 F5 | 	or	local07, local06
1c7b0     01 1E CE F7 | 	test	local01, #1 wz
1c7b4     04 2A 46 50 |  if_ne	shr	local07, #4
1c7b8     15 23 02 56 |  if_ne	mov	local03, local07
1c7bc     0B 2A 46 A7 |  if_e	zerox	local07, #11
1c7c0     15 23 02 A6 |  if_e	mov	local03, local07
1c7c4     11 25 02 F6 | 	mov	local04, local03
1c7c8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1c7c8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1c7c8                 | ' 			break;
1c7c8     8C 00 90 FD | 	jmp	#LR__3157
1c7cc                 | LR__3154
1c7cc     10 13 02 F6 | 	mov	arg01, local02
1c7d0     0F 29 02 F6 | 	mov	local06, local01
1c7d4     08 28 46 F0 | 	shr	local06, #8
1c7d8     24 20 06 F1 | 	add	local02, #36
1c7dc     10 15 02 FB | 	rdlong	arg02, local02
1c7e0     24 20 86 F1 | 	sub	local02, #36
1c7e4     14 15 02 F1 | 	add	arg02, local06
1c7e8     20 FD BF FD | 	call	#_fatfs_cc_move_window
1c7ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7f0     64 00 90 5D |  if_ne	jmp	#LR__3157
1c7f4     34 20 06 F1 | 	add	local02, #52
1c7f8     01 1E 66 F0 | 	shl	local01, #1
1c7fc     FF 1F 06 F5 | 	and	local01, #511
1c800     0F 21 02 F1 | 	add	local02, local01
1c804                 | ' {
1c804                 | ' 
1c804                 | ' 	return *((WORD*)ptr);
1c804     10 FB E1 FA | 	rdword	result1, local02
1c808     FD 24 32 F9 | 	getword	local04, result1, #0
1c80c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1c80c                 | ' 			break;
1c80c     48 00 90 FD | 	jmp	#LR__3157
1c810                 | LR__3155
1c810     10 13 02 F6 | 	mov	arg01, local02
1c814     0F 29 02 F6 | 	mov	local06, local01
1c818     07 28 46 F0 | 	shr	local06, #7
1c81c     24 20 06 F1 | 	add	local02, #36
1c820     10 15 02 FB | 	rdlong	arg02, local02
1c824     24 20 86 F1 | 	sub	local02, #36
1c828     14 15 02 F1 | 	add	arg02, local06
1c82c     DC FC BF FD | 	call	#_fatfs_cc_move_window
1c830     00 FA 0D F2 | 	cmp	result1, #0 wz
1c834     20 00 90 5D |  if_ne	jmp	#LR__3157
1c838     34 20 06 F1 | 	add	local02, #52
1c83c     02 1E 66 F0 | 	shl	local01, #2
1c840     FF 1F 06 F5 | 	and	local01, #511
1c844     0F 21 02 F1 | 	add	local02, local01
1c848                 | ' {
1c848                 | ' 
1c848                 | ' 	return *((DWORD*)ptr);
1c848     10 25 02 FB | 	rdlong	local04, local02
1c84c     7C 24 06 F4 | 	bitl	local04, #124
1c850                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1c850                 | ' 			break;
1c850     04 00 90 FD | 	jmp	#LR__3157
1c854                 | LR__3156
1c854     01 24 06 F6 | 	mov	local04, #1
1c858                 | LR__3157
1c858                 | LR__3158
1c858                 | ' 			val = 1;
1c858                 | ' 		}
1c858                 | ' 	}
1c858                 | ' 
1c858                 | ' 	return val;
1c858     12 FB 01 F6 | 	mov	result1, local04
1c85c     A7 F0 03 F6 | 	mov	ptra, fp
1c860     B2 00 A0 FD | 	call	#popregs_
1c864                 | _fatfs_cc_get_fat_ret
1c864     2D 00 64 FD | 	ret
1c868                 | 
1c868                 | _fatfs_cc_put_fat
1c868     08 4A 05 F6 | 	mov	COUNT_, #8
1c86c     A8 00 A0 FD | 	call	#pushregs_
1c870     09 1F 02 F6 | 	mov	local01, arg01
1c874     0A 21 02 F6 | 	mov	local02, arg02
1c878     0B 23 02 F6 | 	mov	local03, arg03
1c87c     02 24 06 F6 | 	mov	local04, #2
1c880     02 20 16 F2 | 	cmp	local02, #2 wc
1c884     E0 01 90 CD |  if_b	jmp	#LR__3167
1c888     18 1E 06 F1 | 	add	local01, #24
1c88c     0F 27 02 FB | 	rdlong	local05, local01
1c890     18 1E 86 F1 | 	sub	local01, #24
1c894     13 21 12 F2 | 	cmp	local02, local05 wc
1c898     CC 01 90 3D |  if_ae	jmp	#LR__3167
1c89c                 | ' 		switch (fs->fs_type) {
1c89c     0F 29 C2 FA | 	rdbyte	local06, local01
1c8a0     01 28 86 F1 | 	sub	local06, #1
1c8a4     03 28 26 F3 | 	fle	local06, #3
1c8a8     30 28 62 FD | 	jmprel	local06
1c8ac                 | LR__3160
1c8ac     0C 00 90 FD | 	jmp	#LR__3161
1c8b0     F8 00 90 FD | 	jmp	#LR__3164
1c8b4     40 01 90 FD | 	jmp	#LR__3165
1c8b8     AC 01 90 FD | 	jmp	#LR__3166
1c8bc                 | LR__3161
1c8bc     10 2B 02 F6 | 	mov	local07, local02
1c8c0     10 27 02 F6 | 	mov	local05, local02
1c8c4     01 26 46 F0 | 	shr	local05, #1
1c8c8     13 2B 02 F1 | 	add	local07, local05
1c8cc     0F 13 02 F6 | 	mov	arg01, local01
1c8d0     15 29 02 F6 | 	mov	local06, local07
1c8d4     09 28 46 F0 | 	shr	local06, #9
1c8d8     24 1E 06 F1 | 	add	local01, #36
1c8dc     0F 15 02 FB | 	rdlong	arg02, local01
1c8e0     24 1E 86 F1 | 	sub	local01, #36
1c8e4     14 15 02 F1 | 	add	arg02, local06
1c8e8     20 FC BF FD | 	call	#_fatfs_cc_move_window
1c8ec     FD 24 0A F6 | 	mov	local04, result1 wz
1c8f0     74 01 90 5D |  if_ne	jmp	#LR__3166
1c8f4     34 1E 06 F1 | 	add	local01, #52
1c8f8     0F 2D 02 F6 | 	mov	local08, local01
1c8fc     15 27 02 F6 | 	mov	local05, local07
1c900     FF 27 06 F5 | 	and	local05, #511
1c904     13 2D 02 F1 | 	add	local08, local05
1c908     01 20 CE F7 | 	test	local02, #1 wz
1c90c     34 1E 86 F1 | 	sub	local01, #52
1c910     01 2A 06 F1 | 	add	local07, #1
1c914     18 00 90 AD |  if_e	jmp	#LR__3162
1c918     16 27 C2 FA | 	rdbyte	local05, local08
1c91c     13 27 42 F8 | 	getnib	local05, local05, #0
1c920     11 29 E2 F8 | 	getbyte	local06, local03, #0
1c924     04 28 66 F0 | 	shl	local06, #4
1c928     14 27 42 F5 | 	or	local05, local06
1c92c     04 00 90 FD | 	jmp	#LR__3163
1c930                 | LR__3162
1c930     11 27 02 F6 | 	mov	local05, local03
1c934                 | LR__3163
1c934     16 27 42 FC | 	wrbyte	local05, local08
1c938     03 1E 06 F1 | 	add	local01, #3
1c93c     0F 03 48 FC | 	wrbyte	#1, local01
1c940     03 1E 86 F1 | 	sub	local01, #3
1c944     0F 13 02 F6 | 	mov	arg01, local01
1c948     15 2D 02 F6 | 	mov	local08, local07
1c94c     09 2C 46 F0 | 	shr	local08, #9
1c950     24 1E 06 F1 | 	add	local01, #36
1c954     0F 15 02 FB | 	rdlong	arg02, local01
1c958     24 1E 86 F1 | 	sub	local01, #36
1c95c     16 15 02 F1 | 	add	arg02, local08
1c960     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1c964     FD 24 0A F6 | 	mov	local04, result1 wz
1c968     FC 00 90 5D |  if_ne	jmp	#LR__3166
1c96c     34 1E 06 F1 | 	add	local01, #52
1c970     0F 2D 02 F6 | 	mov	local08, local01
1c974     FF 2B 06 F5 | 	and	local07, #511
1c978     15 2D 02 F1 | 	add	local08, local07
1c97c     01 20 CE F7 | 	test	local02, #1 wz
1c980     04 22 46 50 |  if_ne	shr	local03, #4
1c984     11 27 02 56 |  if_ne	mov	local05, local03
1c988     16 27 C2 AA |  if_e	rdbyte	local05, local08
1c98c     F0 26 06 A5 |  if_e	and	local05, #240
1c990     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1c994     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1c998     11 27 42 A5 |  if_e	or	local05, local03
1c99c     16 27 42 FC | 	wrbyte	local05, local08
1c9a0     31 1E 86 F1 | 	sub	local01, #49
1c9a4     0F 03 48 FC | 	wrbyte	#1, local01
1c9a8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1c9a8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1c9a8                 | ' 			fs->wflag = 1;
1c9a8                 | ' 			break;
1c9a8     BC 00 90 FD | 	jmp	#LR__3166
1c9ac                 | LR__3164
1c9ac     0F 13 02 F6 | 	mov	arg01, local01
1c9b0     10 2D 02 F6 | 	mov	local08, local02
1c9b4     08 2C 46 F0 | 	shr	local08, #8
1c9b8     24 1E 06 F1 | 	add	local01, #36
1c9bc     0F 15 02 FB | 	rdlong	arg02, local01
1c9c0     24 1E 86 F1 | 	sub	local01, #36
1c9c4     16 15 02 F1 | 	add	arg02, local08
1c9c8     40 FB BF FD | 	call	#_fatfs_cc_move_window
1c9cc     FD 24 0A F6 | 	mov	local04, result1 wz
1c9d0     94 00 90 5D |  if_ne	jmp	#LR__3166
1c9d4     34 1E 06 F1 | 	add	local01, #52
1c9d8     0F 13 02 F6 | 	mov	arg01, local01
1c9dc     01 20 66 F0 | 	shl	local02, #1
1c9e0     FF 21 06 F5 | 	and	local02, #511
1c9e4     10 13 02 F1 | 	add	arg01, local02
1c9e8     09 23 52 FC | 	wrword	local03, arg01
1c9ec     31 1E 86 F1 | 	sub	local01, #49
1c9f0     0F 03 48 FC | 	wrbyte	#1, local01
1c9f4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1c9f4                 | ' 			fs->wflag = 1;
1c9f4                 | ' 			break;
1c9f4     70 00 90 FD | 	jmp	#LR__3166
1c9f8                 | LR__3165
1c9f8     0F 13 02 F6 | 	mov	arg01, local01
1c9fc     10 2D 02 F6 | 	mov	local08, local02
1ca00     07 2C 46 F0 | 	shr	local08, #7
1ca04     24 1E 06 F1 | 	add	local01, #36
1ca08     0F 15 02 FB | 	rdlong	arg02, local01
1ca0c     24 1E 86 F1 | 	sub	local01, #36
1ca10     16 15 02 F1 | 	add	arg02, local08
1ca14     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1ca18     FD 24 0A F6 | 	mov	local04, result1 wz
1ca1c     48 00 90 5D |  if_ne	jmp	#LR__3166
1ca20     7C 22 06 F4 | 	bitl	local03, #124
1ca24     34 1E 06 F1 | 	add	local01, #52
1ca28     10 2D 02 F6 | 	mov	local08, local02
1ca2c     02 2C 66 F0 | 	shl	local08, #2
1ca30     FF 2D 06 F5 | 	and	local08, #511
1ca34     0F 13 02 F6 | 	mov	arg01, local01
1ca38     16 13 02 F1 | 	add	arg01, local08
1ca3c                 | ' {
1ca3c                 | ' 
1ca3c                 | ' 	return *((DWORD*)ptr);
1ca3c     09 2D 02 FB | 	rdlong	local08, arg01
1ca40     00 00 78 FF 
1ca44     00 2C 06 F5 | 	and	local08, ##-268435456
1ca48     16 23 42 F5 | 	or	local03, local08
1ca4c     0F 13 02 F6 | 	mov	arg01, local01
1ca50     02 20 66 F0 | 	shl	local02, #2
1ca54     FF 21 06 F5 | 	and	local02, #511
1ca58     10 13 02 F1 | 	add	arg01, local02
1ca5c     09 23 62 FC | 	wrlong	local03, arg01
1ca60     31 1E 86 F1 | 	sub	local01, #49
1ca64     0F 03 48 FC | 	wrbyte	#1, local01
1ca68                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1ca68                 | ' 			}
1ca68                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1ca68                 | ' 			fs->wflag = 1;
1ca68                 | ' 			break;
1ca68                 | LR__3166
1ca68                 | LR__3167
1ca68                 | ' 		}
1ca68                 | ' 	}
1ca68                 | ' 	return res;
1ca68     12 FB 01 F6 | 	mov	result1, local04
1ca6c     A7 F0 03 F6 | 	mov	ptra, fp
1ca70     B2 00 A0 FD | 	call	#popregs_
1ca74                 | _fatfs_cc_put_fat_ret
1ca74     2D 00 64 FD | 	ret
1ca78                 | 
1ca78                 | _fatfs_cc_remove_chain
1ca78     05 4A 05 F6 | 	mov	COUNT_, #5
1ca7c     A8 00 A0 FD | 	call	#pushregs_
1ca80     09 1F 02 F6 | 	mov	local01, arg01
1ca84     0A 21 02 F6 | 	mov	local02, arg02
1ca88     0B 23 02 F6 | 	mov	local03, arg03
1ca8c     0F 25 02 FB | 	rdlong	local04, local01
1ca90     02 20 16 F2 | 	cmp	local02, #2 wc
1ca94     14 00 90 CD |  if_b	jmp	#LR__3170
1ca98     18 24 06 F1 | 	add	local04, #24
1ca9c     12 FB 01 FB | 	rdlong	result1, local04
1caa0     18 24 86 F1 | 	sub	local04, #24
1caa4     FD 20 12 F2 | 	cmp	local02, result1 wc
1caa8     08 00 90 CD |  if_b	jmp	#LR__3171
1caac                 | LR__3170
1caac     02 FA 05 F6 | 	mov	result1, #2
1cab0     CC 00 90 FD | 	jmp	#LR__3176
1cab4                 | LR__3171
1cab4     00 22 0E F2 | 	cmp	local03, #0 wz
1cab8     18 00 90 AD |  if_e	jmp	#LR__3172
1cabc     11 15 02 F6 | 	mov	arg02, local03
1cac0     12 13 02 F6 | 	mov	arg01, local04
1cac4     01 16 66 F6 | 	neg	arg03, #1
1cac8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1cacc     00 FA 0D F2 | 	cmp	result1, #0 wz
1cad0     AC 00 90 5D |  if_ne	jmp	#LR__3176
1cad4                 | LR__3172
1cad4                 | ' 	}
1cad4                 | ' 
1cad4                 | ' 
1cad4                 | ' 	do {
1cad4                 | LR__3173
1cad4     10 15 02 F6 | 	mov	arg02, local02
1cad8     0F 13 02 F6 | 	mov	arg01, local01
1cadc     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1cae0     FD 26 0A F6 | 	mov	local05, result1 wz
1cae4     94 00 90 AD |  if_e	jmp	#LR__3175
1cae8     01 26 0E F2 | 	cmp	local05, #1 wz
1caec     02 FA 05 A6 |  if_e	mov	result1, #2
1caf0     8C 00 90 AD |  if_e	jmp	#LR__3176
1caf4     FF FF 7F FF 
1caf8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1cafc     01 FA 05 A6 |  if_e	mov	result1, #1
1cb00     7C 00 90 AD |  if_e	jmp	#LR__3176
1cb04     10 15 02 F6 | 	mov	arg02, local02
1cb08     12 13 02 F6 | 	mov	arg01, local04
1cb0c     00 16 06 F6 | 	mov	arg03, #0
1cb10     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1cb14     FD 22 0A F6 | 	mov	local03, result1 wz
1cb18     11 FB 01 56 |  if_ne	mov	result1, local03
1cb1c     60 00 90 5D |  if_ne	jmp	#LR__3176
1cb20     18 24 06 F1 | 	add	local04, #24
1cb24     12 23 02 FB | 	rdlong	local03, local04
1cb28     02 22 86 F1 | 	sub	local03, #2
1cb2c     04 24 86 F1 | 	sub	local04, #4
1cb30     12 21 02 FB | 	rdlong	local02, local04
1cb34     14 24 86 F1 | 	sub	local04, #20
1cb38     11 21 12 F2 | 	cmp	local02, local03 wc
1cb3c     24 00 90 3D |  if_ae	jmp	#LR__3174
1cb40     14 24 06 F1 | 	add	local04, #20
1cb44     12 23 02 FB | 	rdlong	local03, local04
1cb48     01 22 06 F1 | 	add	local03, #1
1cb4c     12 23 62 FC | 	wrlong	local03, local04
1cb50     10 24 86 F1 | 	sub	local04, #16
1cb54     12 23 C2 FA | 	rdbyte	local03, local04
1cb58     01 22 46 F5 | 	or	local03, #1
1cb5c     12 23 42 FC | 	wrbyte	local03, local04
1cb60     04 24 86 F1 | 	sub	local04, #4
1cb64                 | LR__3174
1cb64     13 21 02 F6 | 	mov	local02, local05
1cb68     18 24 06 F1 | 	add	local04, #24
1cb6c     12 27 02 FB | 	rdlong	local05, local04
1cb70     18 24 86 F1 | 	sub	local04, #24
1cb74     13 21 12 F2 | 	cmp	local02, local05 wc
1cb78     58 FF 9F CD |  if_b	jmp	#LR__3173
1cb7c                 | LR__3175
1cb7c                 | ' #line 1500 "ff.c"
1cb7c                 | ' 	return FR_OK;
1cb7c     00 FA 05 F6 | 	mov	result1, #0
1cb80                 | LR__3176
1cb80     A7 F0 03 F6 | 	mov	ptra, fp
1cb84     B2 00 A0 FD | 	call	#popregs_
1cb88                 | _fatfs_cc_remove_chain_ret
1cb88     2D 00 64 FD | 	ret
1cb8c                 | 
1cb8c                 | _fatfs_cc_create_chain
1cb8c     09 4A 05 F6 | 	mov	COUNT_, #9
1cb90     A8 00 A0 FD | 	call	#pushregs_
1cb94     09 1F 02 F6 | 	mov	local01, arg01
1cb98     0A 21 0A F6 | 	mov	local02, arg02 wz
1cb9c     0F 23 02 FB | 	rdlong	local03, local01
1cba0     28 00 90 5D |  if_ne	jmp	#LR__3180
1cba4     10 22 06 F1 | 	add	local03, #16
1cba8     11 25 0A FB | 	rdlong	local04, local03 wz
1cbac     10 22 86 F1 | 	sub	local03, #16
1cbb0     18 22 06 51 |  if_ne	add	local03, #24
1cbb4     11 27 02 5B |  if_ne	rdlong	local05, local03
1cbb8     18 22 86 51 |  if_ne	sub	local03, #24
1cbbc     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1cbc0     50 00 90 4D |  if_c_and_nz	jmp	#LR__3181
1cbc4     01 24 06 F6 | 	mov	local04, #1
1cbc8     48 00 90 FD | 	jmp	#LR__3181
1cbcc                 | LR__3180
1cbcc     10 15 02 F6 | 	mov	arg02, local02
1cbd0     0F 13 02 F6 | 	mov	arg01, local01
1cbd4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1cbd8     FD 24 02 F6 | 	mov	local04, result1
1cbdc     02 24 16 F2 | 	cmp	local04, #2 wc
1cbe0     01 FA 05 C6 |  if_b	mov	result1, #1
1cbe4     BC 01 90 CD |  if_b	jmp	#LR__3191
1cbe8     FF FF 7F FF 
1cbec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1cbf0     12 FB 01 A6 |  if_e	mov	result1, local04
1cbf4     AC 01 90 AD |  if_e	jmp	#LR__3191
1cbf8     18 22 06 F1 | 	add	local03, #24
1cbfc     11 27 02 FB | 	rdlong	local05, local03
1cc00     18 22 86 F1 | 	sub	local03, #24
1cc04     13 25 12 F2 | 	cmp	local04, local05 wc
1cc08     12 FB 01 C6 |  if_b	mov	result1, local04
1cc0c     94 01 90 CD |  if_b	jmp	#LR__3191
1cc10     10 25 02 F6 | 	mov	local04, local02
1cc14                 | LR__3181
1cc14     14 22 06 F1 | 	add	local03, #20
1cc18     11 27 0A FB | 	rdlong	local05, local03 wz
1cc1c     14 22 86 F1 | 	sub	local03, #20
1cc20     00 FA 05 A6 |  if_e	mov	result1, #0
1cc24     7C 01 90 AD |  if_e	jmp	#LR__3191
1cc28     00 28 06 F6 | 	mov	local06, #0
1cc2c     10 25 0A F2 | 	cmp	local04, local02 wz
1cc30     74 00 90 5D |  if_ne	jmp	#LR__3184
1cc34     12 29 02 F6 | 	mov	local06, local04
1cc38     01 28 06 F1 | 	add	local06, #1
1cc3c     18 22 06 F1 | 	add	local03, #24
1cc40     11 27 02 FB | 	rdlong	local05, local03
1cc44     18 22 86 F1 | 	sub	local03, #24
1cc48     13 29 12 F2 | 	cmp	local06, local05 wc
1cc4c     02 28 06 36 |  if_ae	mov	local06, #2
1cc50     14 15 02 F6 | 	mov	arg02, local06
1cc54     0F 13 02 F6 | 	mov	arg01, local01
1cc58     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1cc5c     FD 26 02 F6 | 	mov	local05, result1
1cc60     01 26 0E F2 | 	cmp	local05, #1 wz
1cc64     FF FF 7F 5F 
1cc68     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1cc6c     13 FB 01 A6 |  if_e	mov	result1, local05
1cc70     30 01 90 AD |  if_e	jmp	#LR__3191
1cc74     00 26 0E F2 | 	cmp	local05, #0 wz
1cc78     2C 00 90 AD |  if_e	jmp	#LR__3183
1cc7c     10 22 06 F1 | 	add	local03, #16
1cc80     11 2B 02 FB | 	rdlong	local07, local03
1cc84     10 22 86 F1 | 	sub	local03, #16
1cc88     02 2A 16 F2 | 	cmp	local07, #2 wc
1cc8c     14 00 90 CD |  if_b	jmp	#LR__3182
1cc90     18 22 06 F1 | 	add	local03, #24
1cc94     11 27 02 FB | 	rdlong	local05, local03
1cc98     18 22 86 F1 | 	sub	local03, #24
1cc9c     13 2B 12 F2 | 	cmp	local07, local05 wc
1cca0     15 25 02 C6 |  if_b	mov	local04, local07
1cca4                 | LR__3182
1cca4     00 28 06 F6 | 	mov	local06, #0
1cca8                 | LR__3183
1cca8                 | LR__3184
1cca8     00 28 0E F2 | 	cmp	local06, #0 wz
1ccac     60 00 90 5D |  if_ne	jmp	#LR__3187
1ccb0     12 29 02 F6 | 	mov	local06, local04
1ccb4                 | ' 			ncl = scl;
1ccb4                 | ' 			for (;;) {
1ccb4                 | LR__3185
1ccb4     01 28 06 F1 | 	add	local06, #1
1ccb8     18 22 06 F1 | 	add	local03, #24
1ccbc     11 27 02 FB | 	rdlong	local05, local03
1ccc0     18 22 86 F1 | 	sub	local03, #24
1ccc4     13 29 12 F2 | 	cmp	local06, local05 wc
1ccc8     02 28 06 36 |  if_ae	mov	local06, #2
1cccc     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1ccd0     00 FA 05 16 |  if_a	mov	result1, #0
1ccd4     CC 00 90 1D |  if_a	jmp	#LR__3191
1ccd8     14 15 02 F6 | 	mov	arg02, local06
1ccdc     0F 13 02 F6 | 	mov	arg01, local01
1cce0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1cce4     FD 2A 0A F6 | 	mov	local07, result1 wz
1cce8     24 00 90 AD |  if_e	jmp	#LR__3186
1ccec     01 2A 0E F2 | 	cmp	local07, #1 wz
1ccf0     FF FF 7F 5F 
1ccf4     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1ccf8     15 FB 01 A6 |  if_e	mov	result1, local07
1ccfc     A4 00 90 AD |  if_e	jmp	#LR__3191
1cd00     12 29 0A F2 | 	cmp	local06, local04 wz
1cd04     00 FA 05 A6 |  if_e	mov	result1, #0
1cd08     98 00 90 AD |  if_e	jmp	#LR__3191
1cd0c     A4 FF 9F FD | 	jmp	#LR__3185
1cd10                 | LR__3186
1cd10                 | LR__3187
1cd10     11 13 02 F6 | 	mov	arg01, local03
1cd14     14 15 02 F6 | 	mov	arg02, local06
1cd18     01 16 66 F6 | 	neg	arg03, #1
1cd1c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1cd20     FD 2C 0A F6 | 	mov	local08, result1 wz
1cd24     1C 00 90 5D |  if_ne	jmp	#LR__3188
1cd28     00 20 0E F2 | 	cmp	local02, #0 wz
1cd2c     14 00 90 AD |  if_e	jmp	#LR__3188
1cd30     11 13 02 F6 | 	mov	arg01, local03
1cd34     10 15 02 F6 | 	mov	arg02, local02
1cd38     14 17 02 F6 | 	mov	arg03, local06
1cd3c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1cd40     FD 2C 02 F6 | 	mov	local08, result1
1cd44                 | LR__3188
1cd44     00 2C 0E F2 | 	cmp	local08, #0 wz
1cd48     4C 00 90 5D |  if_ne	jmp	#LR__3189
1cd4c     10 22 06 F1 | 	add	local03, #16
1cd50     11 29 62 FC | 	wrlong	local06, local03
1cd54     08 22 06 F1 | 	add	local03, #8
1cd58     11 27 02 FB | 	rdlong	local05, local03
1cd5c     02 26 86 F1 | 	sub	local05, #2
1cd60     04 22 86 F1 | 	sub	local03, #4
1cd64     11 2F 02 FB | 	rdlong	local09, local03
1cd68     14 22 86 F1 | 	sub	local03, #20
1cd6c     13 2F 1A F2 | 	cmp	local09, local05 wcz
1cd70     14 22 06 E1 |  if_be	add	local03, #20
1cd74     11 2F 02 EB |  if_be	rdlong	local09, local03
1cd78     01 2E 86 E1 |  if_be	sub	local09, #1
1cd7c     11 2F 62 EC |  if_be	wrlong	local09, local03
1cd80     14 22 86 E1 |  if_be	sub	local03, #20
1cd84     04 22 06 F1 | 	add	local03, #4
1cd88     11 27 C2 FA | 	rdbyte	local05, local03
1cd8c     01 26 46 F5 | 	or	local05, #1
1cd90     11 27 42 FC | 	wrbyte	local05, local03
1cd94     08 00 90 FD | 	jmp	#LR__3190
1cd98                 | LR__3189
1cd98     01 2C 0E F2 | 	cmp	local08, #1 wz
1cd9c     01 28 C6 F6 | 	negz	local06, #1
1cda0                 | LR__3190
1cda0                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1cda0                 | ' 	}
1cda0                 | ' 
1cda0                 | ' 	return ncl;
1cda0     14 FB 01 F6 | 	mov	result1, local06
1cda4                 | LR__3191
1cda4     A7 F0 03 F6 | 	mov	ptra, fp
1cda8     B2 00 A0 FD | 	call	#popregs_
1cdac                 | _fatfs_cc_create_chain_ret
1cdac     2D 00 64 FD | 	ret
1cdb0                 | 
1cdb0                 | _fatfs_cc_dir_clear
1cdb0     06 4A 05 F6 | 	mov	COUNT_, #6
1cdb4     A8 00 A0 FD | 	call	#pushregs_
1cdb8     09 1F 02 F6 | 	mov	local01, arg01
1cdbc     0A 21 02 F6 | 	mov	local02, arg02
1cdc0     0F 13 02 F6 | 	mov	arg01, local01
1cdc4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1cdc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cdcc     01 FA 05 56 |  if_ne	mov	result1, #1
1cdd0     90 00 90 5D |  if_ne	jmp	#LR__3202
1cdd4     0F 13 02 F6 | 	mov	arg01, local01
1cdd8     10 15 02 F6 | 	mov	arg02, local02
1cddc     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1cde0     FD 22 02 F6 | 	mov	local03, result1
1cde4     30 1E 06 F1 | 	add	local01, #48
1cde8     0F 23 62 FC | 	wrlong	local03, local01
1cdec     04 1E 06 F1 | 	add	local01, #4
1cdf0     0F 13 02 F6 | 	mov	arg01, local01
1cdf4     00 14 06 F6 | 	mov	arg02, #0
1cdf8     09 16 C6 F9 | 	decod	arg03, #9
1cdfc     98 00 A0 FD | 	call	#\builtin_bytefill_
1ce00     0F 25 02 F6 | 	mov	local04, local01
1ce04                 | ' #line 1667 "ff.c"
1ce04                 | ' 	{
1ce04                 | ' 		ibuf = fs->win; szb = 1;
1ce04                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1ce04     00 26 06 F6 | 	mov	local05, #0
1ce08     34 1E 86 F1 | 	sub	local01, #52
1ce0c                 | LR__3200
1ce0c     0A 1E 06 F1 | 	add	local01, #10
1ce10     0F 29 E2 FA | 	rdword	local06, local01
1ce14     0A 1E 86 F1 | 	sub	local01, #10
1ce18     14 27 12 F2 | 	cmp	local05, local06 wc
1ce1c     2C 00 90 3D |  if_ae	jmp	#LR__3201
1ce20     01 1E 06 F1 | 	add	local01, #1
1ce24     0F 13 C2 FA | 	rdbyte	arg01, local01
1ce28     01 1E 86 F1 | 	sub	local01, #1
1ce2c     12 15 02 F6 | 	mov	arg02, local04
1ce30     11 17 02 F6 | 	mov	arg03, local03
1ce34     13 17 02 F1 | 	add	arg03, local05
1ce38     01 18 06 F6 | 	mov	arg04, #1
1ce3c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1ce40     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce44     01 26 06 A1 |  if_e	add	local05, #1
1ce48     C0 FF 9F AD |  if_e	jmp	#LR__3200
1ce4c                 | LR__3201
1ce4c                 | ' 	}
1ce4c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1ce4c     0A 1E 06 F1 | 	add	local01, #10
1ce50     0F 25 E2 FA | 	rdword	local04, local01
1ce54     12 27 0A F2 | 	cmp	local05, local04 wz
1ce58     00 28 06 A6 |  if_e	mov	local06, #0
1ce5c     01 28 06 56 |  if_ne	mov	local06, #1
1ce60     14 FB 01 F6 | 	mov	result1, local06
1ce64                 | LR__3202
1ce64     A7 F0 03 F6 | 	mov	ptra, fp
1ce68     B2 00 A0 FD | 	call	#popregs_
1ce6c                 | _fatfs_cc_dir_clear_ret
1ce6c     2D 00 64 FD | 	ret
1ce70                 | 
1ce70                 | _fatfs_cc_dir_sdi
1ce70     06 4A 05 F6 | 	mov	COUNT_, #6
1ce74     A8 00 A0 FD | 	call	#pushregs_
1ce78     09 1F 02 F6 | 	mov	local01, arg01
1ce7c     0A 21 02 F6 | 	mov	local02, arg02
1ce80     0F 23 02 FB | 	rdlong	local03, local01
1ce84     00 10 00 FF 
1ce88     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1ce8c     1F 20 CE C7 |  if_b	test	local02, #31 wz
1ce90                 | ' 		return FR_INT_ERR;
1ce90     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1ce94     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3216
1ce98     10 1E 06 F1 | 	add	local01, #16
1ce9c     0F 21 62 FC | 	wrlong	local02, local01
1cea0     08 1E 86 F1 | 	sub	local01, #8
1cea4     0F 25 0A FB | 	rdlong	local04, local01 wz
1cea8     08 1E 86 F1 | 	sub	local01, #8
1ceac     11 27 C2 AA |  if_e	rdbyte	local05, local03
1ceb0     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1ceb4     28 22 06 21 |  if_nc_and_z	add	local03, #40
1ceb8     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1cebc     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1cec0     00 24 0E F2 | 	cmp	local04, #0 wz
1cec4     3C 00 90 5D |  if_ne	jmp	#LR__3210
1cec8     10 27 02 F6 | 	mov	local05, local02
1cecc     05 26 46 F0 | 	shr	local05, #5
1ced0     08 22 06 F1 | 	add	local03, #8
1ced4     11 15 E2 FA | 	rdword	arg02, local03
1ced8     08 22 86 F1 | 	sub	local03, #8
1cedc     0A 27 12 F2 | 	cmp	local05, arg02 wc
1cee0     02 FA 05 36 |  if_ae	mov	result1, #2
1cee4     E4 00 90 3D |  if_ae	jmp	#LR__3216
1cee8     28 22 06 F1 | 	add	local03, #40
1ceec     11 27 02 FB | 	rdlong	local05, local03
1cef0     28 22 86 F1 | 	sub	local03, #40
1cef4     18 1E 06 F1 | 	add	local01, #24
1cef8     0F 27 62 FC | 	wrlong	local05, local01
1cefc     18 1E 86 F1 | 	sub	local01, #24
1cf00     7C 00 90 FD | 	jmp	#LR__3215
1cf04                 | LR__3210
1cf04     0A 22 06 F1 | 	add	local03, #10
1cf08     11 29 E2 FA | 	rdword	local06, local03
1cf0c     0A 22 86 F1 | 	sub	local03, #10
1cf10     09 28 66 F0 | 	shl	local06, #9
1cf14                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1cf14                 | ' 		while (ofs >= csz) {
1cf14                 | LR__3211
1cf14     14 21 12 F2 | 	cmp	local02, local06 wc
1cf18     4C 00 90 CD |  if_b	jmp	#LR__3214
1cf1c     0F 13 02 F6 | 	mov	arg01, local01
1cf20     12 15 02 F6 | 	mov	arg02, local04
1cf24     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1cf28     FD 24 02 F6 | 	mov	local04, result1
1cf2c     FF FF 7F FF 
1cf30     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1cf34     01 FA 05 A6 |  if_e	mov	result1, #1
1cf38     90 00 90 AD |  if_e	jmp	#LR__3216
1cf3c     02 24 16 F2 | 	cmp	local04, #2 wc
1cf40     14 00 90 CD |  if_b	jmp	#LR__3212
1cf44     18 22 06 F1 | 	add	local03, #24
1cf48     11 27 02 FB | 	rdlong	local05, local03
1cf4c     18 22 86 F1 | 	sub	local03, #24
1cf50     13 25 12 F2 | 	cmp	local04, local05 wc
1cf54     08 00 90 CD |  if_b	jmp	#LR__3213
1cf58                 | LR__3212
1cf58     02 FA 05 F6 | 	mov	result1, #2
1cf5c     6C 00 90 FD | 	jmp	#LR__3216
1cf60                 | LR__3213
1cf60     14 21 82 F1 | 	sub	local02, local06
1cf64     AC FF 9F FD | 	jmp	#LR__3211
1cf68                 | LR__3214
1cf68     11 13 02 F6 | 	mov	arg01, local03
1cf6c     12 15 02 F6 | 	mov	arg02, local04
1cf70     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1cf74     18 1E 06 F1 | 	add	local01, #24
1cf78     0F FB 61 FC | 	wrlong	result1, local01
1cf7c     18 1E 86 F1 | 	sub	local01, #24
1cf80                 | LR__3215
1cf80     14 1E 06 F1 | 	add	local01, #20
1cf84     0F 25 62 FC | 	wrlong	local04, local01
1cf88     04 1E 06 F1 | 	add	local01, #4
1cf8c     0F 27 0A FB | 	rdlong	local05, local01 wz
1cf90     18 1E 86 F1 | 	sub	local01, #24
1cf94     02 FA 05 A6 |  if_e	mov	result1, #2
1cf98     30 00 90 AD |  if_e	jmp	#LR__3216
1cf9c     10 29 02 F6 | 	mov	local06, local02
1cfa0     09 28 46 F0 | 	shr	local06, #9
1cfa4     18 1E 06 F1 | 	add	local01, #24
1cfa8     0F 27 02 FB | 	rdlong	local05, local01
1cfac     14 27 02 F1 | 	add	local05, local06
1cfb0     0F 27 62 FC | 	wrlong	local05, local01
1cfb4     34 22 06 F1 | 	add	local03, #52
1cfb8     FF 21 06 F5 | 	and	local02, #511
1cfbc     10 23 02 F1 | 	add	local03, local02
1cfc0     04 1E 06 F1 | 	add	local01, #4
1cfc4     0F 23 62 FC | 	wrlong	local03, local01
1cfc8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1cfc8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1cfc8                 | ' 
1cfc8                 | ' 	return FR_OK;
1cfc8     00 FA 05 F6 | 	mov	result1, #0
1cfcc                 | LR__3216
1cfcc     A7 F0 03 F6 | 	mov	ptra, fp
1cfd0     B2 00 A0 FD | 	call	#popregs_
1cfd4                 | _fatfs_cc_dir_sdi_ret
1cfd4     2D 00 64 FD | 	ret
1cfd8                 | 
1cfd8                 | _fatfs_cc_dir_next
1cfd8     05 4A 05 F6 | 	mov	COUNT_, #5
1cfdc     A8 00 A0 FD | 	call	#pushregs_
1cfe0     09 1F 02 F6 | 	mov	local01, arg01
1cfe4     0A 21 02 F6 | 	mov	local02, arg02
1cfe8     0F 23 02 FB | 	rdlong	local03, local01
1cfec     10 1E 06 F1 | 	add	local01, #16
1cff0     0F 25 02 FB | 	rdlong	local04, local01
1cff4     10 1E 86 F1 | 	sub	local01, #16
1cff8     20 24 06 F1 | 	add	local04, #32
1cffc     00 10 00 FF 
1d000     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1d004     18 1E 06 31 |  if_ae	add	local01, #24
1d008     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d00c     18 1E 86 31 |  if_ae	sub	local01, #24
1d010     18 1E 06 F1 | 	add	local01, #24
1d014     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d018     18 1E 86 F1 | 	sub	local01, #24
1d01c     04 FA 05 A6 |  if_e	mov	result1, #4
1d020     64 01 90 AD |  if_e	jmp	#LR__3225
1d024     FF 25 CE F7 | 	test	local04, #511 wz
1d028     3C 01 90 5D |  if_ne	jmp	#LR__3224
1d02c     18 1E 06 F1 | 	add	local01, #24
1d030     0F 15 02 FB | 	rdlong	arg02, local01
1d034     01 14 06 F1 | 	add	arg02, #1
1d038     0F 15 62 FC | 	wrlong	arg02, local01
1d03c     04 1E 86 F1 | 	sub	local01, #4
1d040     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d044     14 1E 86 F1 | 	sub	local01, #20
1d048     2C 00 90 5D |  if_ne	jmp	#LR__3220
1d04c     12 15 02 F6 | 	mov	arg02, local04
1d050     05 14 46 F0 | 	shr	arg02, #5
1d054     08 22 06 F1 | 	add	local03, #8
1d058     11 21 E2 FA | 	rdword	local02, local03
1d05c     08 22 86 F1 | 	sub	local03, #8
1d060     10 15 12 F2 | 	cmp	arg02, local02 wc
1d064     18 1E 06 31 |  if_ae	add	local01, #24
1d068     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d06c                 | ' 				dp->sect = 0; return FR_NO_FILE;
1d06c     04 FA 05 36 |  if_ae	mov	result1, #4
1d070     14 01 90 3D |  if_ae	jmp	#LR__3225
1d074     F0 00 90 FD | 	jmp	#LR__3223
1d078                 | LR__3220
1d078     12 13 02 F6 | 	mov	arg01, local04
1d07c     09 12 46 F0 | 	shr	arg01, #9
1d080     0A 22 06 F1 | 	add	local03, #10
1d084     11 15 E2 FA | 	rdword	arg02, local03
1d088     0A 22 86 F1 | 	sub	local03, #10
1d08c     01 14 86 F1 | 	sub	arg02, #1
1d090     0A 13 CA F7 | 	test	arg01, arg02 wz
1d094     D0 00 90 5D |  if_ne	jmp	#LR__3222
1d098     0F 13 02 F6 | 	mov	arg01, local01
1d09c     14 1E 06 F1 | 	add	local01, #20
1d0a0     0F 15 02 FB | 	rdlong	arg02, local01
1d0a4     14 1E 86 F1 | 	sub	local01, #20
1d0a8     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1d0ac     FD 26 02 F6 | 	mov	local05, result1
1d0b0     02 26 16 F2 | 	cmp	local05, #2 wc
1d0b4     02 FA 05 C6 |  if_b	mov	result1, #2
1d0b8     CC 00 90 CD |  if_b	jmp	#LR__3225
1d0bc     FF FF 7F FF 
1d0c0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d0c4     01 FA 05 A6 |  if_e	mov	result1, #1
1d0c8     BC 00 90 AD |  if_e	jmp	#LR__3225
1d0cc     18 22 06 F1 | 	add	local03, #24
1d0d0     11 15 02 FB | 	rdlong	arg02, local03
1d0d4     18 22 86 F1 | 	sub	local03, #24
1d0d8     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d0dc     68 00 90 CD |  if_b	jmp	#LR__3221
1d0e0     00 20 0E F2 | 	cmp	local02, #0 wz
1d0e4     18 1E 06 A1 |  if_e	add	local01, #24
1d0e8     0F 01 68 AC |  if_e	wrlong	#0, local01
1d0ec                 | ' 						dp->sect = 0; return FR_NO_FILE;
1d0ec     04 FA 05 A6 |  if_e	mov	result1, #4
1d0f0     94 00 90 AD |  if_e	jmp	#LR__3225
1d0f4     0F 13 02 F6 | 	mov	arg01, local01
1d0f8     14 1E 06 F1 | 	add	local01, #20
1d0fc     0F 15 02 FB | 	rdlong	arg02, local01
1d100     14 1E 86 F1 | 	sub	local01, #20
1d104     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1d108     FD 26 0A F6 | 	mov	local05, result1 wz
1d10c     07 FA 05 A6 |  if_e	mov	result1, #7
1d110     74 00 90 AD |  if_e	jmp	#LR__3225
1d114     01 26 0E F2 | 	cmp	local05, #1 wz
1d118     02 FA 05 A6 |  if_e	mov	result1, #2
1d11c     68 00 90 AD |  if_e	jmp	#LR__3225
1d120     FF FF 7F FF 
1d124     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d128     01 FA 05 A6 |  if_e	mov	result1, #1
1d12c     58 00 90 AD |  if_e	jmp	#LR__3225
1d130     13 15 02 F6 | 	mov	arg02, local05
1d134     11 13 02 F6 | 	mov	arg01, local03
1d138     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1d13c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d140     01 FA 05 56 |  if_ne	mov	result1, #1
1d144     40 00 90 5D |  if_ne	jmp	#LR__3225
1d148                 | LR__3221
1d148     14 1E 06 F1 | 	add	local01, #20
1d14c     0F 27 62 FC | 	wrlong	local05, local01
1d150     11 13 02 F6 | 	mov	arg01, local03
1d154     13 15 02 F6 | 	mov	arg02, local05
1d158     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1d15c     04 1E 06 F1 | 	add	local01, #4
1d160     0F FB 61 FC | 	wrlong	result1, local01
1d164     18 1E 86 F1 | 	sub	local01, #24
1d168                 | LR__3222
1d168                 | LR__3223
1d168                 | LR__3224
1d168     10 1E 06 F1 | 	add	local01, #16
1d16c     0F 25 62 FC | 	wrlong	local04, local01
1d170     34 22 06 F1 | 	add	local03, #52
1d174     FF 25 06 F5 | 	and	local04, #511
1d178     12 23 02 F1 | 	add	local03, local04
1d17c     0C 1E 06 F1 | 	add	local01, #12
1d180     0F 23 62 FC | 	wrlong	local03, local01
1d184                 | ' #line 1771 "ff.c"
1d184                 | ' 				}
1d184                 | ' 				dp->clust = clst;
1d184                 | ' 				dp->sect = clst2sect(fs, clst);
1d184                 | ' 			}
1d184                 | ' 		}
1d184                 | ' 	}
1d184                 | ' 	dp->dptr = ofs;
1d184                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1d184                 | ' 
1d184                 | ' 	return FR_OK;
1d184     00 FA 05 F6 | 	mov	result1, #0
1d188                 | LR__3225
1d188     A7 F0 03 F6 | 	mov	ptra, fp
1d18c     B2 00 A0 FD | 	call	#popregs_
1d190                 | _fatfs_cc_dir_next_ret
1d190     2D 00 64 FD | 	ret
1d194                 | 
1d194                 | _fatfs_cc_dir_alloc
1d194     08 4A 05 F6 | 	mov	COUNT_, #8
1d198     A8 00 A0 FD | 	call	#pushregs_
1d19c     09 1F 02 F6 | 	mov	local01, arg01
1d1a0     0A 21 02 F6 | 	mov	local02, arg02
1d1a4     0F 23 02 FB | 	rdlong	local03, local01
1d1a8     0F 13 02 F6 | 	mov	arg01, local01
1d1ac     00 14 06 F6 | 	mov	arg02, #0
1d1b0     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1d1b4     FD 24 0A F6 | 	mov	local04, result1 wz
1d1b8     70 00 90 5D |  if_ne	jmp	#LR__3234
1d1bc     00 26 06 F6 | 	mov	local05, #0
1d1c0                 | ' 		n = 0;
1d1c0                 | ' 		do {
1d1c0                 | LR__3230
1d1c0     18 1E 06 F1 | 	add	local01, #24
1d1c4     0F 15 02 FB | 	rdlong	arg02, local01
1d1c8     18 1E 86 F1 | 	sub	local01, #24
1d1cc     11 13 02 F6 | 	mov	arg01, local03
1d1d0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1d1d4     FD 24 0A F6 | 	mov	local04, result1 wz
1d1d8     50 00 90 5D |  if_ne	jmp	#LR__3233
1d1dc     1C 1E 06 F1 | 	add	local01, #28
1d1e0     0F 29 02 FB | 	rdlong	local06, local01
1d1e4     1C 1E 86 F1 | 	sub	local01, #28
1d1e8     14 29 C2 FA | 	rdbyte	local06, local06
1d1ec     E5 28 0E F2 | 	cmp	local06, #229 wz
1d1f0     1C 1E 06 51 |  if_ne	add	local01, #28
1d1f4     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1d1f8     1C 1E 86 51 |  if_ne	sub	local01, #28
1d1fc     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1d200     10 00 90 5D |  if_ne	jmp	#LR__3231
1d204     01 26 06 F1 | 	add	local05, #1
1d208     10 27 0A F2 | 	cmp	local05, local02 wz
1d20c     1C 00 90 AD |  if_e	jmp	#LR__3233
1d210     04 00 90 FD | 	jmp	#LR__3232
1d214                 | LR__3231
1d214     00 26 06 F6 | 	mov	local05, #0
1d218                 | LR__3232
1d218     0F 13 02 F6 | 	mov	arg01, local01
1d21c     01 14 06 F6 | 	mov	arg02, #1
1d220     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1d224     FD 24 0A F6 | 	mov	local04, result1 wz
1d228     94 FF 9F AD |  if_e	jmp	#LR__3230
1d22c                 | LR__3233
1d22c                 | LR__3234
1d22c     04 24 0E F2 | 	cmp	local04, #4 wz
1d230     07 24 06 A6 |  if_e	mov	local04, #7
1d234                 | ' 	return res;
1d234     12 FB 01 F6 | 	mov	result1, local04
1d238     A7 F0 03 F6 | 	mov	ptra, fp
1d23c     B2 00 A0 FD | 	call	#popregs_
1d240                 | _fatfs_cc_dir_alloc_ret
1d240     2D 00 64 FD | 	ret
1d244                 | 
1d244                 | _fatfs_cc_ld_clust
1d244     09 01 02 F6 | 	mov	_var01, arg01
1d248     0A 13 02 F6 | 	mov	arg01, arg02
1d24c     1A 12 06 F1 | 	add	arg01, #26
1d250                 | ' {
1d250                 | ' 
1d250                 | ' 	return *((WORD*)ptr);
1d250     09 FB E1 FA | 	rdword	result1, arg01
1d254     FD 12 32 F9 | 	getword	arg01, result1, #0
1d258     00 01 C2 FA | 	rdbyte	_var01, _var01
1d25c     03 00 0E F2 | 	cmp	_var01, #3 wz
1d260     14 14 06 A1 |  if_e	add	arg02, #20
1d264                 | ' {
1d264                 | ' 
1d264                 | ' 	return *((WORD*)ptr);
1d264     0A FB E1 AA |  if_e	rdword	result1, arg02
1d268     10 FA 65 A0 |  if_e	shl	result1, #16
1d26c     FD 12 42 A5 |  if_e	or	arg01, result1
1d270                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1d270                 | ' 	}
1d270                 | ' 
1d270                 | ' 	return cl;
1d270     09 FB 01 F6 | 	mov	result1, arg01
1d274                 | _fatfs_cc_ld_clust_ret
1d274     2D 00 64 FD | 	ret
1d278                 | 
1d278                 | _fatfs_cc_st_clust
1d278     09 01 02 F6 | 	mov	_var01, arg01
1d27c     0A 13 02 F6 | 	mov	arg01, arg02
1d280     1A 12 06 F1 | 	add	arg01, #26
1d284     09 17 52 FC | 	wrword	arg03, arg01
1d288     00 01 C2 FA | 	rdbyte	_var01, _var01
1d28c     03 00 0E F2 | 	cmp	_var01, #3 wz
1d290     14 14 06 A1 |  if_e	add	arg02, #20
1d294     10 16 46 A0 |  if_e	shr	arg03, #16
1d298     0A 17 52 AC |  if_e	wrword	arg03, arg02
1d29c                 | _fatfs_cc_st_clust_ret
1d29c     2D 00 64 FD | 	ret
1d2a0                 | 
1d2a0                 | _fatfs_cc_cmp_lfn
1d2a0     07 4A 05 F6 | 	mov	COUNT_, #7
1d2a4     A8 00 A0 FD | 	call	#pushregs_
1d2a8     09 1F 02 F6 | 	mov	local01, arg01
1d2ac     0A 13 02 F6 | 	mov	arg01, arg02
1d2b0     1A 12 06 F1 | 	add	arg01, #26
1d2b4                 | ' {
1d2b4                 | ' 
1d2b4                 | ' 	return *((WORD*)ptr);
1d2b4     09 FB E9 FA | 	rdword	result1, arg01 wz
1d2b8     00 FA 05 56 |  if_ne	mov	result1, #0
1d2bc     E0 00 90 5D |  if_ne	jmp	#LR__3246
1d2c0     0A 21 C2 FA | 	rdbyte	local02, arg02
1d2c4     3F 20 06 F5 | 	and	local02, #63
1d2c8     01 20 86 F1 | 	sub	local02, #1
1d2cc     0D 20 06 FD | 	qmul	local02, #13
1d2d0                 | ' 
1d2d0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1d2d0                 | ' 
1d2d0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d2d0     01 22 06 F6 | 	mov	local03, #1
1d2d4     00 24 06 F6 | 	mov	local04, #0
1d2d8     18 26 62 FD | 	getqx	local05
1d2dc                 | LR__3240
1d2dc     0D 24 16 F2 | 	cmp	local04, #13 wc
1d2e0     9C 00 90 3D |  if_ae	jmp	#LR__3245
1d2e4     0A 13 02 F6 | 	mov	arg01, arg02
1d2e8     12 21 02 F6 | 	mov	local02, local04
1d2ec     01 00 00 FF 
1d2f0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d2f4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1d2f8     10 21 C2 FA | 	rdbyte	local02, local02
1d2fc     01 20 06 FA | 	mul	local02, #1
1d300     10 13 02 F1 | 	add	arg01, local02
1d304     01 00 00 FF 
1d308     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d30c                 | ' {
1d30c                 | ' 
1d30c                 | ' 	return *((WORD*)ptr);
1d30c     09 FB E1 FA | 	rdword	result1, arg01
1d310     FD 28 02 F6 | 	mov	local06, result1
1d314     11 21 02 F6 | 	mov	local02, local03
1d318     0F 20 4E F7 | 	zerox	local02, #15 wz
1d31c     44 00 90 AD |  if_e	jmp	#LR__3243
1d320     00 27 16 F2 | 	cmp	local05, #256 wc
1d324     2C 00 90 3D |  if_ae	jmp	#LR__3241
1d328     14 13 32 F9 | 	getword	arg01, local06, #0
1d32c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d330     FD 20 02 F6 | 	mov	local02, result1
1d334     13 23 02 F6 | 	mov	local03, local05
1d338     01 22 66 F0 | 	shl	local03, #1
1d33c     0F 23 02 F1 | 	add	local03, local01
1d340     11 13 E2 FA | 	rdword	arg01, local03
1d344     01 26 06 F1 | 	add	local05, #1
1d348     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d34c     FD 20 0A F2 | 	cmp	local02, result1 wz
1d350     08 00 90 AD |  if_e	jmp	#LR__3242
1d354                 | LR__3241
1d354                 | ' 				return 0;
1d354     00 FA 05 F6 | 	mov	result1, #0
1d358     44 00 90 FD | 	jmp	#LR__3246
1d35c                 | LR__3242
1d35c     14 23 02 F6 | 	mov	local03, local06
1d360     14 00 90 FD | 	jmp	#LR__3244
1d364                 | LR__3243
1d364     14 29 32 F9 | 	getword	local06, local06, #0
1d368     7F 00 00 FF 
1d36c     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1d370     00 FA 05 56 |  if_ne	mov	result1, #0
1d374     28 00 90 5D |  if_ne	jmp	#LR__3246
1d378                 | LR__3244
1d378     01 24 06 F1 | 	add	local04, #1
1d37c     5C FF 9F FD | 	jmp	#LR__3240
1d380                 | LR__3245
1d380     0A 21 C2 FA | 	rdbyte	local02, arg02
1d384     40 20 CE F7 | 	test	local02, #64 wz
1d388     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d38c     01 26 66 50 |  if_ne	shl	local05, #1
1d390     0F 27 02 51 |  if_ne	add	local05, local01
1d394     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1d398     00 FA 05 56 |  if_ne	mov	result1, #0
1d39c                 | ' 
1d39c                 | ' 	return 1;
1d39c     01 FA 05 A6 |  if_e	mov	result1, #1
1d3a0                 | LR__3246
1d3a0     A7 F0 03 F6 | 	mov	ptra, fp
1d3a4     B2 00 A0 FD | 	call	#popregs_
1d3a8                 | _fatfs_cc_cmp_lfn_ret
1d3a8     2D 00 64 FD | 	ret
1d3ac                 | 
1d3ac                 | _fatfs_cc_pick_lfn
1d3ac     09 01 02 F6 | 	mov	_var01, arg01
1d3b0     0A 13 02 F6 | 	mov	arg01, arg02
1d3b4     1A 12 06 F1 | 	add	arg01, #26
1d3b8                 | ' {
1d3b8                 | ' 
1d3b8                 | ' 	return *((WORD*)ptr);
1d3b8     09 FB E9 FA | 	rdword	result1, arg01 wz
1d3bc     00 FA 05 56 |  if_ne	mov	result1, #0
1d3c0     D4 00 90 5D |  if_ne	jmp	#LR__3255
1d3c4     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d3c8     40 02 26 F5 | 	andn	_var02, #64
1d3cc     01 02 86 F1 | 	sub	_var02, #1
1d3d0     0D 02 06 FD | 	qmul	_var02, #13
1d3d4                 | ' 
1d3d4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1d3d4                 | ' 
1d3d4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d3d4     01 04 06 F6 | 	mov	_var03, #1
1d3d8     00 06 06 F6 | 	mov	_var04, #0
1d3dc     18 08 62 FD | 	getqx	_var05
1d3e0                 | LR__3250
1d3e0     0D 06 16 F2 | 	cmp	_var04, #13 wc
1d3e4     80 00 90 3D |  if_ae	jmp	#LR__3253
1d3e8     0A 13 02 F6 | 	mov	arg01, arg02
1d3ec     03 03 02 F6 | 	mov	_var02, _var04
1d3f0     01 00 00 FF 
1d3f4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d3f8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1d3fc     01 03 C2 FA | 	rdbyte	_var02, _var02
1d400     01 02 06 FA | 	mul	_var02, #1
1d404     01 13 02 F1 | 	add	arg01, _var02
1d408     01 00 00 FF 
1d40c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d410                 | ' {
1d410                 | ' 
1d410                 | ' 	return *((WORD*)ptr);
1d410     09 FB E1 FA | 	rdword	result1, arg01
1d414     FD 0A 02 F6 | 	mov	_var06, result1
1d418     02 03 02 F6 | 	mov	_var02, _var03
1d41c     0F 02 4E F7 | 	zerox	_var02, #15 wz
1d420     28 00 90 AD |  if_e	jmp	#LR__3251
1d424     00 09 16 F2 | 	cmp	_var05, #256 wc
1d428     00 FA 05 36 |  if_ae	mov	result1, #0
1d42c     68 00 90 3D |  if_ae	jmp	#LR__3255
1d430     04 03 02 F6 | 	mov	_var02, _var05
1d434     01 02 66 F0 | 	shl	_var02, #1
1d438     00 03 02 F1 | 	add	_var02, _var01
1d43c     05 05 02 F6 | 	mov	_var03, _var06
1d440     01 05 52 FC | 	wrword	_var03, _var02
1d444     01 08 06 F1 | 	add	_var05, #1
1d448     14 00 90 FD | 	jmp	#LR__3252
1d44c                 | LR__3251
1d44c     05 0B 32 F9 | 	getword	_var06, _var06, #0
1d450     7F 00 00 FF 
1d454     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1d458     00 FA 05 56 |  if_ne	mov	result1, #0
1d45c     38 00 90 5D |  if_ne	jmp	#LR__3255
1d460                 | LR__3252
1d460     01 06 06 F1 | 	add	_var04, #1
1d464     78 FF 9F FD | 	jmp	#LR__3250
1d468                 | LR__3253
1d468     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d46c     40 02 CE F7 | 	test	_var02, #64 wz
1d470     02 0D 02 56 |  if_ne	mov	_var07, _var03
1d474     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1d478     18 00 90 AD |  if_e	jmp	#LR__3254
1d47c     00 09 16 F2 | 	cmp	_var05, #256 wc
1d480     00 FA 05 36 |  if_ae	mov	result1, #0
1d484     10 00 90 3D |  if_ae	jmp	#LR__3255
1d488     01 08 66 F0 | 	shl	_var05, #1
1d48c     00 09 02 F1 | 	add	_var05, _var01
1d490     04 01 58 FC | 	wrword	#0, _var05
1d494                 | LR__3254
1d494                 | ' 		lfnbuf[i] = 0;
1d494                 | ' 	}
1d494                 | ' 
1d494                 | ' 	return 1;
1d494     01 FA 05 F6 | 	mov	result1, #1
1d498                 | LR__3255
1d498                 | _fatfs_cc_pick_lfn_ret
1d498     2D 00 64 FD | 	ret
1d49c                 | 
1d49c                 | _fatfs_cc_put_lfn
1d49c     0D 14 06 F1 | 	add	arg02, #13
1d4a0     0A 19 42 FC | 	wrbyte	arg04, arg02
1d4a4     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1d4a8     01 18 86 F1 | 	sub	arg04, #1
1d4ac     0D 18 06 FD | 	qmul	arg04, #13
1d4b0     09 01 02 F6 | 	mov	_var01, arg01
1d4b4     02 14 86 F1 | 	sub	arg02, #2
1d4b8     0A 1F 48 FC | 	wrbyte	#15, arg02
1d4bc     01 14 06 F1 | 	add	arg02, #1
1d4c0     0A 01 48 FC | 	wrbyte	#0, arg02
1d4c4     0C 14 86 F1 | 	sub	arg02, #12
1d4c8     0A 13 02 F6 | 	mov	arg01, arg02
1d4cc     1A 12 06 F1 | 	add	arg01, #26
1d4d0     09 01 58 FC | 	wrword	#0, arg01
1d4d4     00 02 06 F6 | 	mov	_var02, #0
1d4d8     00 04 06 F6 | 	mov	_var03, #0
1d4dc                 | ' 	BYTE* dir,
1d4dc                 | ' 	BYTE ord,
1d4dc                 | ' 	BYTE sum
1d4dc                 | ' )
1d4dc                 | ' {
1d4dc                 | ' 	UINT i, s;
1d4dc                 | ' 	WCHAR wc;
1d4dc                 | ' 
1d4dc                 | ' 
1d4dc                 | ' 	dir[ 13 ] = sum;
1d4dc                 | ' 	dir[ 11 ] =  0x0F ;
1d4dc                 | ' 	dir[ 12 ] = 0;
1d4dc                 | ' 	st_word(dir +  26 , 0);
1d4dc                 | ' 
1d4dc                 | ' 	i = (ord - 1) * 13;
1d4dc                 | ' 	s = wc = 0;
1d4dc                 | ' 	do {
1d4dc     01 00 00 FF 
1d4e0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d4e4     18 06 62 FD | 	getqx	_var04
1d4e8     97 2A 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
1d4ec                 | LR__3260
1d4ec     01 19 32 F9 | 	getword	arg04, _var02, #0
1d4f0     7F 00 00 FF 
1d4f4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1d4f8     03 13 02 56 |  if_ne	mov	arg01, _var04
1d4fc     01 06 06 51 |  if_ne	add	_var04, #1
1d500     01 12 66 50 |  if_ne	shl	arg01, #1
1d504     00 13 02 51 |  if_ne	add	arg01, _var01
1d508     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1d50c     0A 13 02 F6 | 	mov	arg01, arg02
1d510     02 19 02 F6 | 	mov	arg04, _var03
1d514     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1d518     0C 19 C2 FA | 	rdbyte	arg04, arg04
1d51c     01 18 06 FA | 	mul	arg04, #1
1d520     0C 13 02 F1 | 	add	arg01, arg04
1d524     09 03 52 FC | 	wrword	_var02, arg01
1d528     01 19 02 F6 | 	mov	arg04, _var02
1d52c     0F 18 4E F7 | 	zerox	arg04, #15 wz
1d530     0F 02 CE A9 |  if_e	bmask	_var02, #15
1d534     01 04 06 F1 | 	add	_var03, #1
1d538     0D 04 16 F2 | 	cmp	_var03, #13 wc
1d53c     AC FF 9F CD |  if_b	jmp	#LR__3260
1d540                 | LR__3261
1d540     01 00 00 FF 
1d544     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d548     01 03 32 F9 | 	getword	_var02, _var02, #0
1d54c     7F 00 00 FF 
1d550     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1d554     01 06 66 50 |  if_ne	shl	_var04, #1
1d558     00 07 02 51 |  if_ne	add	_var04, _var01
1d55c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1d560     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1d564     40 16 46 A5 |  if_e	or	arg03, #64
1d568     0A 17 42 FC | 	wrbyte	arg03, arg02
1d56c                 | _fatfs_cc_put_lfn_ret
1d56c     2D 00 64 FD | 	ret
1d570                 | 
1d570                 | _fatfs_cc_gen_numname
1d570     08 4A 05 F6 | 	mov	COUNT_, #8
1d574     A8 00 A0 FD | 	call	#pushregs_
1d578     2C F0 07 F1 | 	add	ptra, #44
1d57c     09 1F 02 F6 | 	mov	local01, arg01
1d580     0A 21 02 F6 | 	mov	local02, arg02
1d584     0B 23 02 F6 | 	mov	local03, arg03
1d588     0C 25 02 F6 | 	mov	local04, arg04
1d58c     0F 13 02 F6 | 	mov	arg01, local01
1d590     10 15 02 F6 | 	mov	arg02, local02
1d594     0B 16 06 F6 | 	mov	arg03, #11
1d598     D8 7B BF FD | 	call	#__system____builtin_memmove
1d59c     06 24 16 F2 | 	cmp	local04, #6 wc
1d5a0     48 00 90 CD |  if_b	jmp	#LR__3275
1d5a4     12 27 02 F6 | 	mov	local05, local04
1d5a8     97 1E 48 FB | 	callpa	#(@LR__3273-@LR__3270)>>2,fcache_load_ptr_
1d5ac                 | ' 		sreg = seq;
1d5ac                 | ' 		while (*lfn) {
1d5ac                 | LR__3270
1d5ac     11 29 EA FA | 	rdword	local06, local03 wz
1d5b0     34 00 90 AD |  if_e	jmp	#LR__3274
1d5b4     11 2B E2 FA | 	rdword	local07, local03
1d5b8                 | ' 			wc = *lfn++;
1d5b8                 | ' 			for (i = 0; i < 16; i++) {
1d5b8     02 22 06 F1 | 	add	local03, #2
1d5bc     10 12 DC FC | 	rep	@LR__3272, #16
1d5c0                 | LR__3271
1d5c0     01 26 66 F0 | 	shl	local05, #1
1d5c4     15 29 32 F9 | 	getword	local06, local07, #0
1d5c8     01 28 06 F5 | 	and	local06, #1
1d5cc     14 27 02 F1 | 	add	local05, local06
1d5d0     15 2B 32 F9 | 	getword	local07, local07, #0
1d5d4     01 2A 46 F0 | 	shr	local07, #1
1d5d8     10 26 2E F4 | 	testbn	local05, #16 wz
1d5dc     88 00 00 5F 
1d5e0     21 26 66 55 |  if_ne	xor	local05, ##69665
1d5e4                 | LR__3272
1d5e4     C4 FF 9F FD | 	jmp	#LR__3270
1d5e8                 | LR__3273
1d5e8                 | LR__3274
1d5e8     13 25 02 F6 | 	mov	local04, local05
1d5ec                 | LR__3275
1d5ec     07 2A 06 F6 | 	mov	local07, #7
1d5f0                 | ' 			}
1d5f0                 | ' 		}
1d5f0                 | ' 		seq = (UINT)sreg;
1d5f0                 | ' 	}
1d5f0                 | ' 
1d5f0                 | ' 
1d5f0                 | ' 	i = 7;
1d5f0                 | ' 	do {
1d5f0     10 4E 05 F1 | 	add	fp, #16
1d5f4     97 1A 48 FB | 	callpa	#(@LR__3277-@LR__3276)>>2,fcache_load_ptr_
1d5f8                 | LR__3276
1d5f8     12 27 42 F8 | 	getnib	local05, local04, #0
1d5fc     30 26 06 F1 | 	add	local05, #48
1d600     04 24 46 F0 | 	shr	local04, #4
1d604     13 29 E2 F8 | 	getbyte	local06, local05, #0
1d608     3A 28 16 F2 | 	cmp	local06, #58 wc
1d60c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1d610     07 26 06 31 |  if_ae	add	local05, #7
1d614     15 29 02 F6 | 	mov	local06, local07
1d618     01 2A 8E F1 | 	sub	local07, #1 wz
1d61c     A7 28 02 F1 | 	add	local06, fp
1d620     14 27 42 FC | 	wrbyte	local05, local06
1d624     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1d628     CC FF 9F 5D |  if_ne	jmp	#LR__3276
1d62c                 | LR__3277
1d62c     15 29 02 F6 | 	mov	local06, local07
1d630     A7 28 02 F1 | 	add	local06, fp
1d634     14 FD 48 FC | 	wrbyte	#126, local06
1d638                 | ' 	ns[i] = '~';
1d638                 | ' 
1d638                 | ' 
1d638                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1d638     00 26 06 F6 | 	mov	local05, #0
1d63c     10 4E 85 F1 | 	sub	fp, #16
1d640     97 2A 48 FB | 	callpa	#(@LR__3280-@LR__3278)>>2,fcache_load_ptr_
1d644                 | LR__3278
1d644     15 27 12 F2 | 	cmp	local05, local07 wc
1d648     4C 00 90 3D |  if_ae	jmp	#LR__3281
1d64c     13 29 02 F6 | 	mov	local06, local05
1d650     0F 29 02 F1 | 	add	local06, local01
1d654     14 29 C2 FA | 	rdbyte	local06, local06
1d658     20 28 0E F2 | 	cmp	local06, #32 wz
1d65c     38 00 90 AD |  if_e	jmp	#LR__3281
1d660     13 13 02 F6 | 	mov	arg01, local05
1d664     0F 13 02 F1 | 	add	arg01, local01
1d668     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1d66c     00 FA 05 56 |  if_ne	mov	result1, #0
1d670                 | ' 
1d670                 | ' 	return 0;
1d670     00 FA 05 A6 |  if_e	mov	result1, #0
1d674     00 FA 0D F2 | 	cmp	result1, #0 wz
1d678     14 00 90 AD |  if_e	jmp	#LR__3279
1d67c     15 29 02 F6 | 	mov	local06, local07
1d680     01 28 86 F1 | 	sub	local06, #1
1d684     14 27 0A F2 | 	cmp	local05, local06 wz
1d688     0C 00 90 AD |  if_e	jmp	#LR__3281
1d68c     01 26 06 F1 | 	add	local05, #1
1d690                 | LR__3279
1d690     01 26 06 F1 | 	add	local05, #1
1d694     AC FF 9F FD | 	jmp	#LR__3278
1d698                 | LR__3280
1d698                 | LR__3281
1d698     97 20 48 FB | 	callpa	#(@LR__3285-@LR__3282)>>2,fcache_load_ptr_
1d69c                 | ' 			j++;
1d69c                 | ' 		}
1d69c                 | ' 	}
1d69c                 | ' 	do {
1d69c                 | LR__3282
1d69c     13 29 02 F6 | 	mov	local06, local05
1d6a0     0F 29 02 F1 | 	add	local06, local01
1d6a4     08 2A 16 F2 | 	cmp	local07, #8 wc
1d6a8     01 26 06 F1 | 	add	local05, #1
1d6ac     1C 00 90 3D |  if_ae	jmp	#LR__3283
1d6b0     15 25 02 F6 | 	mov	local04, local07
1d6b4     10 4E 05 F1 | 	add	fp, #16
1d6b8     A7 24 02 F1 | 	add	local04, fp
1d6bc     12 2D C2 FA | 	rdbyte	local08, local04
1d6c0     01 2A 06 F1 | 	add	local07, #1
1d6c4     10 4E 85 F1 | 	sub	fp, #16
1d6c8     04 00 90 FD | 	jmp	#LR__3284
1d6cc                 | LR__3283
1d6cc     20 2C 06 F6 | 	mov	local08, #32
1d6d0                 | LR__3284
1d6d0     14 2D 42 FC | 	wrbyte	local08, local06
1d6d4     08 26 16 F2 | 	cmp	local05, #8 wc
1d6d8     C0 FF 9F CD |  if_b	jmp	#LR__3282
1d6dc                 | LR__3285
1d6dc     A7 F0 03 F6 | 	mov	ptra, fp
1d6e0     B2 00 A0 FD | 	call	#popregs_
1d6e4                 | _fatfs_cc_gen_numname_ret
1d6e4     2D 00 64 FD | 	ret
1d6e8                 | 
1d6e8                 | _fatfs_cc_sum_sfn
1d6e8     00 00 06 F6 | 	mov	_var01, #0
1d6ec                 | ' )
1d6ec                 | ' {
1d6ec                 | ' 	BYTE sum = 0;
1d6ec                 | ' 	UINT n = 11;
1d6ec                 | ' 
1d6ec                 | ' 	do {
1d6ec     97 12 48 FB | 	callpa	#(@LR__3292-@LR__3290)>>2,fcache_load_ptr_
1d6f0                 | LR__3290
1d6f0     0B 10 DC FC | 	rep	@LR__3293, #11
1d6f4                 | LR__3291
1d6f4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1d6f8     01 FA 45 F0 | 	shr	result1, #1
1d6fc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1d700     07 00 66 F0 | 	shl	_var01, #7
1d704     00 FB 01 F1 | 	add	result1, _var01
1d708     09 01 C2 FA | 	rdbyte	_var01, arg01
1d70c     FD 00 02 F1 | 	add	_var01, result1
1d710     01 12 06 F1 | 	add	arg01, #1
1d714                 | LR__3292
1d714                 | LR__3293
1d714                 | ' 	return sum;
1d714     00 FB 01 F6 | 	mov	result1, _var01
1d718                 | _fatfs_cc_sum_sfn_ret
1d718     2D 00 64 FD | 	ret
1d71c                 | 
1d71c                 | _fatfs_cc_dir_read
1d71c     0C 4A 05 F6 | 	mov	COUNT_, #12
1d720     A8 00 A0 FD | 	call	#pushregs_
1d724     09 1F 02 F6 | 	mov	local01, arg01
1d728     0A 21 02 F6 | 	mov	local02, arg02
1d72c     04 22 06 F6 | 	mov	local03, #4
1d730     0F 25 02 FB | 	rdlong	local04, local01
1d734     FF 26 06 F6 | 	mov	local05, #255
1d738     FF 28 06 F6 | 	mov	local06, #255
1d73c                 | ' )
1d73c                 | ' {
1d73c                 | ' 	FRESULT res = FR_NO_FILE;
1d73c                 | ' 	FATFS *fs = dp->obj.fs;
1d73c                 | ' 	BYTE attr, b;
1d73c                 | ' 
1d73c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1d73c                 | ' 
1d73c                 | ' 
1d73c                 | ' 	while (dp->sect) {
1d73c                 | LR__3300
1d73c     18 1E 06 F1 | 	add	local01, #24
1d740     0F FB 09 FB | 	rdlong	result1, local01 wz
1d744     18 1E 86 F1 | 	sub	local01, #24
1d748     AC 01 90 AD |  if_e	jmp	#LR__3310
1d74c     18 1E 06 F1 | 	add	local01, #24
1d750     0F 15 02 FB | 	rdlong	arg02, local01
1d754     18 1E 86 F1 | 	sub	local01, #24
1d758     12 13 02 F6 | 	mov	arg01, local04
1d75c     AC ED BF FD | 	call	#_fatfs_cc_move_window
1d760     FD 22 0A F6 | 	mov	local03, result1 wz
1d764     90 01 90 5D |  if_ne	jmp	#LR__3310
1d768     1C 1E 06 F1 | 	add	local01, #28
1d76c     0F FB 01 FB | 	rdlong	result1, local01
1d770     1C 1E 86 F1 | 	sub	local01, #28
1d774     FD 2A C2 FA | 	rdbyte	local07, result1
1d778     15 FB 01 F6 | 	mov	result1, local07
1d77c     07 FA 4D F7 | 	zerox	result1, #7 wz
1d780     04 22 06 A6 |  if_e	mov	local03, #4
1d784                 | ' 			res = FR_NO_FILE; break;
1d784     70 01 90 AD |  if_e	jmp	#LR__3310
1d788     1C 1E 06 F1 | 	add	local01, #28
1d78c     0F 2D 02 FB | 	rdlong	local08, local01
1d790     0B 2C 06 F1 | 	add	local08, #11
1d794     16 2F C2 FA | 	rdbyte	local09, local08
1d798     3F 2E 06 F5 | 	and	local09, #63
1d79c     16 1E 86 F1 | 	sub	local01, #22
1d7a0     0F 2F 42 FC | 	wrbyte	local09, local01
1d7a4     06 1E 86 F1 | 	sub	local01, #6
1d7a8     15 FB E1 F8 | 	getbyte	result1, local07, #0
1d7ac     E5 FA 0D F2 | 	cmp	result1, #229 wz
1d7b0     15 2D 02 56 |  if_ne	mov	local08, local07
1d7b4     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1d7b8     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1d7bc     1C 00 90 AD |  if_e	jmp	#LR__3301
1d7c0     00 30 06 F6 | 	mov	local10, #0
1d7c4     17 2D E2 F8 | 	getbyte	local08, local09, #0
1d7c8     20 2C 26 F5 | 	andn	local08, #32
1d7cc     08 2C 0E F2 | 	cmp	local08, #8 wz
1d7d0     01 30 06 A6 |  if_e	mov	local10, #1
1d7d4     10 31 0A F2 | 	cmp	local10, local02 wz
1d7d8     08 00 90 AD |  if_e	jmp	#LR__3302
1d7dc                 | LR__3301
1d7dc     FF 26 06 F6 | 	mov	local05, #255
1d7e0     00 01 90 FD | 	jmp	#LR__3309
1d7e4                 | LR__3302
1d7e4     17 2F E2 F8 | 	getbyte	local09, local09, #0
1d7e8     0F 2E 0E F2 | 	cmp	local09, #15 wz
1d7ec     B4 00 90 5D |  if_ne	jmp	#LR__3306
1d7f0     15 33 E2 F8 | 	getbyte	local11, local07, #0
1d7f4     40 32 CE F7 | 	test	local11, #64 wz
1d7f8     30 00 90 AD |  if_e	jmp	#LR__3303
1d7fc     1C 1E 06 F1 | 	add	local01, #28
1d800     0F 33 02 FB | 	rdlong	local11, local01
1d804     0D 32 06 F1 | 	add	local11, #13
1d808     19 29 C2 FA | 	rdbyte	local06, local11
1d80c     15 2B E2 F8 | 	getbyte	local07, local07, #0
1d810     BF 2A 06 F5 | 	and	local07, #191
1d814     15 27 02 F6 | 	mov	local05, local07
1d818     0C 1E 86 F1 | 	sub	local01, #12
1d81c     0F 33 02 FB | 	rdlong	local11, local01
1d820     1C 1E 06 F1 | 	add	local01, #28
1d824     0F 33 62 FC | 	wrlong	local11, local01
1d828     2C 1E 86 F1 | 	sub	local01, #44
1d82c                 | LR__3303
1d82c     15 2D E2 F8 | 	getbyte	local08, local07, #0
1d830     13 31 E2 F8 | 	getbyte	local10, local05, #0
1d834     18 2D 0A F2 | 	cmp	local08, local10 wz
1d838     5C 00 90 5D |  if_ne	jmp	#LR__3304
1d83c     14 31 E2 F8 | 	getbyte	local10, local06, #0
1d840     1C 1E 06 F1 | 	add	local01, #28
1d844     0F 2F 02 FB | 	rdlong	local09, local01
1d848     1C 1E 86 F1 | 	sub	local01, #28
1d84c     0D 2E 06 F1 | 	add	local09, #13
1d850     17 2D C2 FA | 	rdbyte	local08, local09
1d854     16 2F E2 F8 | 	getbyte	local09, local08, #0
1d858     17 31 0A F2 | 	cmp	local10, local09 wz
1d85c     38 00 90 5D |  if_ne	jmp	#LR__3304
1d860     0C 24 06 F1 | 	add	local04, #12
1d864     12 13 02 FB | 	rdlong	arg01, local04
1d868     0C 24 86 F1 | 	sub	local04, #12
1d86c     1C 1E 06 F1 | 	add	local01, #28
1d870     0F 35 02 FB | 	rdlong	local12, local01
1d874     1C 1E 86 F1 | 	sub	local01, #28
1d878     1A 15 02 F6 | 	mov	arg02, local12
1d87c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1d880     00 FA 4D F2 | 	cmps	result1, #0 wz
1d884     13 35 02 56 |  if_ne	mov	local12, local05
1d888     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1d88c     01 34 86 51 |  if_ne	sub	local12, #1
1d890     1A 33 02 56 |  if_ne	mov	local11, local12
1d894     04 00 90 5D |  if_ne	jmp	#LR__3305
1d898                 | LR__3304
1d898     FF 32 06 F6 | 	mov	local11, #255
1d89c                 | LR__3305
1d89c     19 27 02 F6 | 	mov	local05, local11
1d8a0     40 00 90 FD | 	jmp	#LR__3308
1d8a4                 | LR__3306
1d8a4     13 33 02 F6 | 	mov	local11, local05
1d8a8     07 32 4E F7 | 	zerox	local11, #7 wz
1d8ac     20 00 90 5D |  if_ne	jmp	#LR__3307
1d8b0     14 29 E2 F8 | 	getbyte	local06, local06, #0
1d8b4     1C 1E 06 F1 | 	add	local01, #28
1d8b8     0F 13 02 FB | 	rdlong	arg01, local01
1d8bc     1C 1E 86 F1 | 	sub	local01, #28
1d8c0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1d8c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d8c8     FD 28 0A F2 | 	cmp	local06, result1 wz
1d8cc     28 00 90 AD |  if_e	jmp	#LR__3310
1d8d0                 | LR__3307
1d8d0     2C 1E 06 F1 | 	add	local01, #44
1d8d4     FF FF FF FF 
1d8d8     0F FF 6B FC | 	wrlong	##-1, local01
1d8dc     2C 1E 86 F1 | 	sub	local01, #44
1d8e0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1d8e0                 | ' 					}
1d8e0                 | ' 					break;
1d8e0     14 00 90 FD | 	jmp	#LR__3310
1d8e4                 | LR__3308
1d8e4                 | LR__3309
1d8e4     0F 13 02 F6 | 	mov	arg01, local01
1d8e8     00 14 06 F6 | 	mov	arg02, #0
1d8ec     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1d8f0     FD 22 0A F6 | 	mov	local03, result1 wz
1d8f4     44 FE 9F AD |  if_e	jmp	#LR__3300
1d8f8                 | LR__3310
1d8f8     00 22 0E F2 | 	cmp	local03, #0 wz
1d8fc     18 1E 06 51 |  if_ne	add	local01, #24
1d900     0F 01 68 5C |  if_ne	wrlong	#0, local01
1d904                 | ' 	return res;
1d904     11 FB 01 F6 | 	mov	result1, local03
1d908     A7 F0 03 F6 | 	mov	ptra, fp
1d90c     B2 00 A0 FD | 	call	#popregs_
1d910                 | _fatfs_cc_dir_read_ret
1d910     2D 00 64 FD | 	ret
1d914                 | 
1d914                 | _fatfs_cc_dir_find
1d914     0B 4A 05 F6 | 	mov	COUNT_, #11
1d918     A8 00 A0 FD | 	call	#pushregs_
1d91c     09 1F 02 F6 | 	mov	local01, arg01
1d920     0F 21 02 FB | 	rdlong	local02, local01
1d924     0F 13 02 F6 | 	mov	arg01, local01
1d928     00 14 06 F6 | 	mov	arg02, #0
1d92c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1d930     00 FA 0D F2 | 	cmp	result1, #0 wz
1d934     18 02 90 5D |  if_ne	jmp	#LR__3332
1d938     FF 22 06 F6 | 	mov	local03, #255
1d93c     FF 24 06 F6 | 	mov	local04, #255
1d940     2C 1E 06 F1 | 	add	local01, #44
1d944     FF FF FF FF 
1d948     0F FF 6B FC | 	wrlong	##-1, local01
1d94c     2C 1E 86 F1 | 	sub	local01, #44
1d950                 | ' #line 2404 "ff.c"
1d950                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1d950                 | ' 
1d950                 | ' 	do {
1d950                 | LR__3320
1d950     18 1E 06 F1 | 	add	local01, #24
1d954     0F 15 02 FB | 	rdlong	arg02, local01
1d958     18 1E 86 F1 | 	sub	local01, #24
1d95c     10 13 02 F6 | 	mov	arg01, local02
1d960     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1d964     FD 26 0A F6 | 	mov	local05, result1 wz
1d968     E0 01 90 5D |  if_ne	jmp	#LR__3331
1d96c     1C 1E 06 F1 | 	add	local01, #28
1d970     0F 17 02 FB | 	rdlong	arg03, local01
1d974     1C 1E 86 F1 | 	sub	local01, #28
1d978     0B 29 C2 FA | 	rdbyte	local06, arg03
1d97c     14 17 02 F6 | 	mov	arg03, local06
1d980     07 16 4E F7 | 	zerox	arg03, #7 wz
1d984     04 26 06 A6 |  if_e	mov	local05, #4
1d988     C0 01 90 AD |  if_e	jmp	#LR__3331
1d98c     1C 1E 06 F1 | 	add	local01, #28
1d990     0F 2B 02 FB | 	rdlong	local07, local01
1d994     15 17 02 F6 | 	mov	arg03, local07
1d998     0B 16 06 F1 | 	add	arg03, #11
1d99c     0B 2D C2 FA | 	rdbyte	local08, arg03
1d9a0     3F 2C 06 F5 | 	and	local08, #63
1d9a4     16 1E 86 F1 | 	sub	local01, #22
1d9a8     0F 2D 42 FC | 	wrbyte	local08, local01
1d9ac     06 1E 86 F1 | 	sub	local01, #6
1d9b0     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1d9b4     E5 16 0E F2 | 	cmp	arg03, #229 wz
1d9b8     18 00 90 AD |  if_e	jmp	#LR__3321
1d9bc     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1d9c0     08 16 CE F7 | 	test	arg03, #8 wz
1d9c4     16 2B 02 56 |  if_ne	mov	local07, local08
1d9c8     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1d9cc     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1d9d0     18 00 90 AD |  if_e	jmp	#LR__3322
1d9d4                 | LR__3321
1d9d4     FF 24 06 F6 | 	mov	local04, #255
1d9d8     2C 1E 06 F1 | 	add	local01, #44
1d9dc     FF FF FF FF 
1d9e0     0F FF 6B FC | 	wrlong	##-1, local01
1d9e4     2C 1E 86 F1 | 	sub	local01, #44
1d9e8     4C 01 90 FD | 	jmp	#LR__3330
1d9ec                 | LR__3322
1d9ec     16 2D E2 F8 | 	getbyte	local08, local08, #0
1d9f0     0F 2C 0E F2 | 	cmp	local08, #15 wz
1d9f4     C8 00 90 5D |  if_ne	jmp	#LR__3326
1d9f8     2B 1E 06 F1 | 	add	local01, #43
1d9fc     0F 2D C2 FA | 	rdbyte	local08, local01
1da00     2B 1E 86 F1 | 	sub	local01, #43
1da04     40 2C CE F7 | 	test	local08, #64 wz
1da08     2C 01 90 5D |  if_ne	jmp	#LR__3329
1da0c     14 2F E2 F8 | 	getbyte	local09, local06, #0
1da10     40 2E CE F7 | 	test	local09, #64 wz
1da14     30 00 90 AD |  if_e	jmp	#LR__3323
1da18     1C 1E 06 F1 | 	add	local01, #28
1da1c     0F 2F 02 FB | 	rdlong	local09, local01
1da20     0D 2E 06 F1 | 	add	local09, #13
1da24     17 23 C2 FA | 	rdbyte	local03, local09
1da28     14 29 E2 F8 | 	getbyte	local06, local06, #0
1da2c     BF 28 06 F5 | 	and	local06, #191
1da30     14 25 02 F6 | 	mov	local04, local06
1da34     0C 1E 86 F1 | 	sub	local01, #12
1da38     0F 2F 02 FB | 	rdlong	local09, local01
1da3c     1C 1E 06 F1 | 	add	local01, #28
1da40     0F 2F 62 FC | 	wrlong	local09, local01
1da44     2C 1E 86 F1 | 	sub	local01, #44
1da48                 | LR__3323
1da48     14 31 E2 F8 | 	getbyte	local10, local06, #0
1da4c     12 2B E2 F8 | 	getbyte	local07, local04, #0
1da50     15 31 0A F2 | 	cmp	local10, local07 wz
1da54     5C 00 90 5D |  if_ne	jmp	#LR__3324
1da58     11 2D E2 F8 | 	getbyte	local08, local03, #0
1da5c     1C 1E 06 F1 | 	add	local01, #28
1da60     0F 2B 02 FB | 	rdlong	local07, local01
1da64     1C 1E 86 F1 | 	sub	local01, #28
1da68     0D 2A 06 F1 | 	add	local07, #13
1da6c     15 29 C2 FA | 	rdbyte	local06, local07
1da70     14 2B E2 F8 | 	getbyte	local07, local06, #0
1da74     15 2D 0A F2 | 	cmp	local08, local07 wz
1da78     38 00 90 5D |  if_ne	jmp	#LR__3324
1da7c     0C 20 06 F1 | 	add	local02, #12
1da80     10 13 02 FB | 	rdlong	arg01, local02
1da84     0C 20 86 F1 | 	sub	local02, #12
1da88     1C 1E 06 F1 | 	add	local01, #28
1da8c     0F 33 02 FB | 	rdlong	local11, local01
1da90     1C 1E 86 F1 | 	sub	local01, #28
1da94     19 15 02 F6 | 	mov	arg02, local11
1da98     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1da9c     00 FA 4D F2 | 	cmps	result1, #0 wz
1daa0     12 33 02 56 |  if_ne	mov	local11, local04
1daa4     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1daa8     01 32 86 51 |  if_ne	sub	local11, #1
1daac     19 2F 02 56 |  if_ne	mov	local09, local11
1dab0     04 00 90 5D |  if_ne	jmp	#LR__3325
1dab4                 | LR__3324
1dab4     FF 2E 06 F6 | 	mov	local09, #255
1dab8                 | LR__3325
1dab8     17 25 02 F6 | 	mov	local04, local09
1dabc     78 00 90 FD | 	jmp	#LR__3329
1dac0                 | LR__3326
1dac0     12 2F 02 F6 | 	mov	local09, local04
1dac4     07 2E 4E F7 | 	zerox	local09, #7 wz
1dac8     20 00 90 5D |  if_ne	jmp	#LR__3327
1dacc     11 31 E2 F8 | 	getbyte	local10, local03, #0
1dad0     1C 1E 06 F1 | 	add	local01, #28
1dad4     0F 13 02 FB | 	rdlong	arg01, local01
1dad8     1C 1E 86 F1 | 	sub	local01, #28
1dadc     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1dae0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dae4     FD 30 0A F2 | 	cmp	local10, result1 wz
1dae8     60 00 90 AD |  if_e	jmp	#LR__3331
1daec                 | LR__3327
1daec     2B 1E 06 F1 | 	add	local01, #43
1daf0     0F 2F C2 FA | 	rdbyte	local09, local01
1daf4     2B 1E 86 F1 | 	sub	local01, #43
1daf8     01 2E CE F7 | 	test	local09, #1 wz
1dafc     24 00 90 5D |  if_ne	jmp	#LR__3328
1db00     1C 1E 06 F1 | 	add	local01, #28
1db04     0F 13 02 FB | 	rdlong	arg01, local01
1db08     04 1E 06 F1 | 	add	local01, #4
1db0c     0F 15 02 F6 | 	mov	arg02, local01
1db10     20 1E 86 F1 | 	sub	local01, #32
1db14     0B 16 06 F6 | 	mov	arg03, #11
1db18     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1db1c     00 FA 0D F2 | 	cmp	result1, #0 wz
1db20     28 00 90 AD |  if_e	jmp	#LR__3331
1db24                 | LR__3328
1db24     FF 24 06 F6 | 	mov	local04, #255
1db28     2C 1E 06 F1 | 	add	local01, #44
1db2c     FF FF FF FF 
1db30     0F FF 6B FC | 	wrlong	##-1, local01
1db34     2C 1E 86 F1 | 	sub	local01, #44
1db38                 | LR__3329
1db38                 | LR__3330
1db38     0F 13 02 F6 | 	mov	arg01, local01
1db3c     00 14 06 F6 | 	mov	arg02, #0
1db40     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1db44     FD 26 0A F6 | 	mov	local05, result1 wz
1db48     04 FE 9F AD |  if_e	jmp	#LR__3320
1db4c                 | LR__3331
1db4c                 | ' 
1db4c                 | ' 	return res;
1db4c     13 FB 01 F6 | 	mov	result1, local05
1db50                 | LR__3332
1db50     A7 F0 03 F6 | 	mov	ptra, fp
1db54     B2 00 A0 FD | 	call	#popregs_
1db58                 | _fatfs_cc_dir_find_ret
1db58     2D 00 64 FD | 	ret
1db5c                 | 
1db5c                 | _fatfs_cc_dir_register
1db5c     0A 4A 05 F6 | 	mov	COUNT_, #10
1db60     A8 00 A0 FD | 	call	#pushregs_
1db64     2C F0 07 F1 | 	add	ptra, #44
1db68     04 4E 05 F1 | 	add	fp, #4
1db6c     A7 12 62 FC | 	wrlong	arg01, fp
1db70     09 1F 02 FB | 	rdlong	local01, arg01
1db74     08 4E 05 F1 | 	add	fp, #8
1db78     A7 1E 62 FC | 	wrlong	local01, fp
1db7c     08 4E 85 F1 | 	sub	fp, #8
1db80     A7 20 02 FB | 	rdlong	local02, fp
1db84     04 4E 85 F1 | 	sub	fp, #4
1db88     2B 20 06 F1 | 	add	local02, #43
1db8c     10 21 C2 FA | 	rdbyte	local02, local02
1db90     A0 20 CE F7 | 	test	local02, #160 wz
1db94     06 FA 05 56 |  if_ne	mov	result1, #6
1db98     F8 03 90 5D |  if_ne	jmp	#LR__3355
1db9c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1db9c     14 4E 05 F1 | 	add	fp, #20
1dba0     A7 00 68 FC | 	wrlong	#0, fp
1dba4     14 4E 85 F1 | 	sub	fp, #20
1dba8     97 28 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
1dbac                 | LR__3340
1dbac     0C 4E 05 F1 | 	add	fp, #12
1dbb0     A7 20 02 FB | 	rdlong	local02, fp
1dbb4     0C 20 06 F1 | 	add	local02, #12
1dbb8     10 23 02 FB | 	rdlong	local03, local02
1dbbc     08 4E 05 F1 | 	add	fp, #8
1dbc0     A7 24 02 FB | 	rdlong	local04, fp
1dbc4     14 4E 85 F1 | 	sub	fp, #20
1dbc8     01 24 66 F0 | 	shl	local04, #1
1dbcc     11 25 02 F1 | 	add	local04, local03
1dbd0     12 21 EA FA | 	rdword	local02, local04 wz
1dbd4     24 00 90 AD |  if_e	jmp	#LR__3342
1dbd8     14 4E 05 F1 | 	add	fp, #20
1dbdc     A7 26 02 FB | 	rdlong	local05, fp
1dbe0     13 29 02 F6 | 	mov	local06, local05
1dbe4     13 2B 02 F6 | 	mov	local07, local05
1dbe8     15 2D 02 F6 | 	mov	local08, local07
1dbec     01 2C 06 F1 | 	add	local08, #1
1dbf0     A7 2C 62 FC | 	wrlong	local08, fp
1dbf4     14 4E 85 F1 | 	sub	fp, #20
1dbf8     B0 FF 9F FD | 	jmp	#LR__3340
1dbfc                 | LR__3341
1dbfc                 | LR__3342
1dbfc     1C 4E 05 F1 | 	add	fp, #28
1dc00     A7 12 02 F6 | 	mov	arg01, fp
1dc04     18 4E 85 F1 | 	sub	fp, #24
1dc08     A7 14 02 FB | 	rdlong	arg02, fp
1dc0c     04 4E 85 F1 | 	sub	fp, #4
1dc10     20 14 06 F1 | 	add	arg02, #32
1dc14     0C 16 06 F6 | 	mov	arg03, #12
1dc18     58 75 BF FD | 	call	#__system____builtin_memmove
1dc1c     27 4E 05 F1 | 	add	fp, #39
1dc20     A7 2E C2 FA | 	rdbyte	local09, fp
1dc24     27 4E 85 F1 | 	sub	fp, #39
1dc28     01 2E CE F7 | 	test	local09, #1 wz
1dc2c     F4 00 90 AD |  if_e	jmp	#LR__3345
1dc30     04 4E 05 F1 | 	add	fp, #4
1dc34     A7 30 02 FB | 	rdlong	local10, fp
1dc38     2B 30 06 F1 | 	add	local10, #43
1dc3c     18 81 48 FC | 	wrbyte	#64, local10
1dc40                 | ' 		dp->fn[ 11 ] =  0x40 ;
1dc40                 | ' 		for (n = 1; n < 100; n++) {
1dc40     0C 4E 05 F1 | 	add	fp, #12
1dc44     A7 02 68 FC | 	wrlong	#1, fp
1dc48     10 4E 85 F1 | 	sub	fp, #16
1dc4c                 | LR__3343
1dc4c     10 4E 05 F1 | 	add	fp, #16
1dc50     A7 20 02 FB | 	rdlong	local02, fp
1dc54     10 4E 85 F1 | 	sub	fp, #16
1dc58     64 20 16 F2 | 	cmp	local02, #100 wc
1dc5c     70 00 90 3D |  if_ae	jmp	#LR__3344
1dc60     04 4E 05 F1 | 	add	fp, #4
1dc64     A7 12 02 FB | 	rdlong	arg01, fp
1dc68     20 12 06 F1 | 	add	arg01, #32
1dc6c     18 4E 05 F1 | 	add	fp, #24
1dc70     A7 14 02 F6 | 	mov	arg02, fp
1dc74     10 4E 85 F1 | 	sub	fp, #16
1dc78     A7 30 02 FB | 	rdlong	local10, fp
1dc7c     0C 30 06 F1 | 	add	local10, #12
1dc80     18 17 02 FB | 	rdlong	arg03, local10
1dc84     04 4E 05 F1 | 	add	fp, #4
1dc88     A7 18 02 FB | 	rdlong	arg04, fp
1dc8c     10 4E 85 F1 | 	sub	fp, #16
1dc90     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1dc94     04 4E 05 F1 | 	add	fp, #4
1dc98     A7 12 02 FB | 	rdlong	arg01, fp
1dc9c     04 4E 85 F1 | 	sub	fp, #4
1dca0     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1dca4     08 4E 05 F1 | 	add	fp, #8
1dca8     A7 FA 61 FC | 	wrlong	result1, fp
1dcac     00 FA 4D F2 | 	cmps	result1, #0 wz
1dcb0     08 4E 85 F1 | 	sub	fp, #8
1dcb4     18 00 90 5D |  if_ne	jmp	#LR__3344
1dcb8     10 4E 05 F1 | 	add	fp, #16
1dcbc     A7 30 02 FB | 	rdlong	local10, fp
1dcc0     01 30 06 F1 | 	add	local10, #1
1dcc4     A7 30 62 FC | 	wrlong	local10, fp
1dcc8     10 4E 85 F1 | 	sub	fp, #16
1dccc     7C FF 9F FD | 	jmp	#LR__3343
1dcd0                 | LR__3344
1dcd0     10 4E 05 F1 | 	add	fp, #16
1dcd4     A7 30 02 FB | 	rdlong	local10, fp
1dcd8     10 4E 85 F1 | 	sub	fp, #16
1dcdc     64 30 0E F2 | 	cmp	local10, #100 wz
1dce0     07 FA 05 A6 |  if_e	mov	result1, #7
1dce4     AC 02 90 AD |  if_e	jmp	#LR__3355
1dce8     08 4E 05 F1 | 	add	fp, #8
1dcec     A7 30 02 FB | 	rdlong	local10, fp
1dcf0     08 4E 85 F1 | 	sub	fp, #8
1dcf4     04 30 0E F2 | 	cmp	local10, #4 wz
1dcf8     08 4E 05 51 |  if_ne	add	fp, #8
1dcfc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1dd00     08 4E 85 51 |  if_ne	sub	fp, #8
1dd04     8C 02 90 5D |  if_ne	jmp	#LR__3355
1dd08     04 4E 05 F1 | 	add	fp, #4
1dd0c     A7 30 02 FB | 	rdlong	local10, fp
1dd10     23 4E 05 F1 | 	add	fp, #35
1dd14     A7 1E C2 FA | 	rdbyte	local01, fp
1dd18     27 4E 85 F1 | 	sub	fp, #39
1dd1c     2B 30 06 F1 | 	add	local10, #43
1dd20     18 1F 42 FC | 	wrbyte	local01, local10
1dd24                 | LR__3345
1dd24     27 4E 05 F1 | 	add	fp, #39
1dd28     A7 20 C2 FA | 	rdbyte	local02, fp
1dd2c     27 4E 85 F1 | 	sub	fp, #39
1dd30     02 20 CE F7 | 	test	local02, #2 wz
1dd34     20 00 90 AD |  if_e	jmp	#LR__3346
1dd38     14 4E 05 F1 | 	add	fp, #20
1dd3c     A7 30 02 FB | 	rdlong	local10, fp
1dd40     0C 30 06 F1 | 	add	local10, #12
1dd44     0D 30 16 FD | 	qdiv	local10, #13
1dd48     14 4E 85 F1 | 	sub	fp, #20
1dd4c     18 30 62 FD | 	getqx	local10
1dd50     01 30 06 F1 | 	add	local10, #1
1dd54     04 00 90 FD | 	jmp	#LR__3347
1dd58                 | LR__3346
1dd58     01 30 06 F6 | 	mov	local10, #1
1dd5c                 | LR__3347
1dd5c     18 4E 05 F1 | 	add	fp, #24
1dd60     A7 30 62 FC | 	wrlong	local10, fp
1dd64     14 4E 85 F1 | 	sub	fp, #20
1dd68     A7 12 02 FB | 	rdlong	arg01, fp
1dd6c     18 15 02 F6 | 	mov	arg02, local10
1dd70     04 4E 85 F1 | 	sub	fp, #4
1dd74     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1dd78     08 4E 05 F1 | 	add	fp, #8
1dd7c     A7 FA 61 FC | 	wrlong	result1, fp
1dd80     08 4E 85 F1 | 	sub	fp, #8
1dd84     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd88     38 01 90 5D |  if_ne	jmp	#LR__3352
1dd8c     18 4E 05 F1 | 	add	fp, #24
1dd90     A7 30 02 FB | 	rdlong	local10, fp
1dd94     01 30 8E F1 | 	sub	local10, #1 wz
1dd98     A7 30 62 FC | 	wrlong	local10, fp
1dd9c     18 4E 85 F1 | 	sub	fp, #24
1dda0     20 01 90 AD |  if_e	jmp	#LR__3352
1dda4     04 4E 05 F1 | 	add	fp, #4
1dda8     A7 30 02 FB | 	rdlong	local10, fp
1ddac     18 13 02 F6 | 	mov	arg01, local10
1ddb0     14 4E 05 F1 | 	add	fp, #20
1ddb4     A7 18 02 FB | 	rdlong	arg04, fp
1ddb8     18 4E 85 F1 | 	sub	fp, #24
1ddbc     05 18 66 F0 | 	shl	arg04, #5
1ddc0     10 30 06 F1 | 	add	local10, #16
1ddc4     18 15 02 FB | 	rdlong	arg02, local10
1ddc8     0C 15 82 F1 | 	sub	arg02, arg04
1ddcc     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1ddd0     08 4E 05 F1 | 	add	fp, #8
1ddd4     A7 FA 61 FC | 	wrlong	result1, fp
1ddd8     08 4E 85 F1 | 	sub	fp, #8
1dddc     00 FA 0D F2 | 	cmp	result1, #0 wz
1dde0     E0 00 90 5D |  if_ne	jmp	#LR__3351
1dde4     04 4E 05 F1 | 	add	fp, #4
1dde8     A7 12 02 FB | 	rdlong	arg01, fp
1ddec     04 4E 85 F1 | 	sub	fp, #4
1ddf0     20 12 06 F1 | 	add	arg01, #32
1ddf4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1ddf8     FD 30 02 F6 | 	mov	local10, result1
1ddfc     28 4E 05 F1 | 	add	fp, #40
1de00     A7 30 42 FC | 	wrbyte	local10, fp
1de04     28 4E 85 F1 | 	sub	fp, #40
1de08                 | ' 			sum = sum_sfn(dp->fn);
1de08                 | ' 			do {
1de08                 | LR__3348
1de08     0C 4E 05 F1 | 	add	fp, #12
1de0c     A7 12 02 FB | 	rdlong	arg01, fp
1de10     08 4E 85 F1 | 	sub	fp, #8
1de14     A7 1E 02 FB | 	rdlong	local01, fp
1de18     04 4E 85 F1 | 	sub	fp, #4
1de1c     18 1E 06 F1 | 	add	local01, #24
1de20     0F 15 02 FB | 	rdlong	arg02, local01
1de24     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1de28     08 4E 05 F1 | 	add	fp, #8
1de2c     A7 FA 61 FC | 	wrlong	result1, fp
1de30     00 FA 4D F2 | 	cmps	result1, #0 wz
1de34     08 4E 85 F1 | 	sub	fp, #8
1de38     88 00 90 5D |  if_ne	jmp	#LR__3350
1de3c     0C 4E 05 F1 | 	add	fp, #12
1de40     A7 20 02 FB | 	rdlong	local02, fp
1de44     0C 20 06 F1 | 	add	local02, #12
1de48     10 13 02 FB | 	rdlong	arg01, local02
1de4c     08 4E 85 F1 | 	sub	fp, #8
1de50     A7 1E 02 FB | 	rdlong	local01, fp
1de54     1C 1E 06 F1 | 	add	local01, #28
1de58     0F 15 02 FB | 	rdlong	arg02, local01
1de5c     14 4E 05 F1 | 	add	fp, #20
1de60     A7 16 02 FB | 	rdlong	arg03, fp
1de64     10 4E 05 F1 | 	add	fp, #16
1de68     A7 18 C2 FA | 	rdbyte	arg04, fp
1de6c     28 4E 85 F1 | 	sub	fp, #40
1de70     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1de74     0C 4E 05 F1 | 	add	fp, #12
1de78     A7 30 02 FB | 	rdlong	local10, fp
1de7c     03 30 06 F1 | 	add	local10, #3
1de80     18 03 48 FC | 	wrbyte	#1, local10
1de84     08 4E 85 F1 | 	sub	fp, #8
1de88     A7 12 02 FB | 	rdlong	arg01, fp
1de8c     04 4E 85 F1 | 	sub	fp, #4
1de90     00 14 06 F6 | 	mov	arg02, #0
1de94     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1de98     08 4E 05 F1 | 	add	fp, #8
1de9c     A7 FA 61 FC | 	wrlong	result1, fp
1dea0     00 FA 4D F2 | 	cmps	result1, #0 wz
1dea4     08 4E 85 F1 | 	sub	fp, #8
1dea8     18 00 90 5D |  if_ne	jmp	#LR__3349
1deac     18 4E 05 F1 | 	add	fp, #24
1deb0     A7 30 02 FB | 	rdlong	local10, fp
1deb4     01 30 8E F1 | 	sub	local10, #1 wz
1deb8     A7 30 62 FC | 	wrlong	local10, fp
1debc     18 4E 85 F1 | 	sub	fp, #24
1dec0     44 FF 9F 5D |  if_ne	jmp	#LR__3348
1dec4                 | LR__3349
1dec4                 | LR__3350
1dec4                 | LR__3351
1dec4                 | LR__3352
1dec4     08 4E 05 F1 | 	add	fp, #8
1dec8     A7 30 0A FB | 	rdlong	local10, fp wz
1decc     08 4E 85 F1 | 	sub	fp, #8
1ded0     B4 00 90 5D |  if_ne	jmp	#LR__3354
1ded4     0C 4E 05 F1 | 	add	fp, #12
1ded8     A7 12 02 FB | 	rdlong	arg01, fp
1dedc     08 4E 85 F1 | 	sub	fp, #8
1dee0     A7 1E 02 FB | 	rdlong	local01, fp
1dee4     04 4E 85 F1 | 	sub	fp, #4
1dee8     18 1E 06 F1 | 	add	local01, #24
1deec     0F 15 02 FB | 	rdlong	arg02, local01
1def0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1def4     08 4E 05 F1 | 	add	fp, #8
1def8     A7 FA 61 FC | 	wrlong	result1, fp
1defc     08 4E 85 F1 | 	sub	fp, #8
1df00     00 FA 0D F2 | 	cmp	result1, #0 wz
1df04     80 00 90 5D |  if_ne	jmp	#LR__3353
1df08     04 4E 05 F1 | 	add	fp, #4
1df0c     A7 20 02 FB | 	rdlong	local02, fp
1df10     04 4E 85 F1 | 	sub	fp, #4
1df14     1C 20 06 F1 | 	add	local02, #28
1df18     10 13 02 FB | 	rdlong	arg01, local02
1df1c     00 14 06 F6 | 	mov	arg02, #0
1df20     20 16 06 F6 | 	mov	arg03, #32
1df24     98 00 A0 FD | 	call	#\builtin_bytefill_
1df28     04 4E 05 F1 | 	add	fp, #4
1df2c     A7 14 02 FB | 	rdlong	arg02, fp
1df30     0A 1F 02 F6 | 	mov	local01, arg02
1df34     1C 1E 06 F1 | 	add	local01, #28
1df38     0F 13 02 FB | 	rdlong	arg01, local01
1df3c     04 4E 85 F1 | 	sub	fp, #4
1df40     20 14 06 F1 | 	add	arg02, #32
1df44     0B 16 06 F6 | 	mov	arg03, #11
1df48     28 72 BF FD | 	call	#__system____builtin_memmove
1df4c     04 4E 05 F1 | 	add	fp, #4
1df50     A7 2E 02 FB | 	rdlong	local09, fp
1df54     17 31 02 F6 | 	mov	local10, local09
1df58     1C 30 06 F1 | 	add	local10, #28
1df5c     18 1F 02 FB | 	rdlong	local01, local10
1df60     2B 2E 06 F1 | 	add	local09, #43
1df64     17 31 C2 FA | 	rdbyte	local10, local09
1df68     18 30 06 F5 | 	and	local10, #24
1df6c     0C 1E 06 F1 | 	add	local01, #12
1df70     0F 31 42 FC | 	wrbyte	local10, local01
1df74     08 4E 05 F1 | 	add	fp, #8
1df78     A7 30 02 FB | 	rdlong	local10, fp
1df7c     0C 4E 85 F1 | 	sub	fp, #12
1df80     03 30 06 F1 | 	add	local10, #3
1df84     18 03 48 FC | 	wrbyte	#1, local10
1df88                 | LR__3353
1df88                 | LR__3354
1df88                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1df88                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1df88                 | ' 
1df88                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1df88                 | ' 
1df88                 | ' 			fs->wflag = 1;
1df88                 | ' 		}
1df88                 | ' 	}
1df88                 | ' 
1df88                 | ' 	return res;
1df88     08 4E 05 F1 | 	add	fp, #8
1df8c     A7 FA 01 FB | 	rdlong	result1, fp
1df90     08 4E 85 F1 | 	sub	fp, #8
1df94                 | LR__3355
1df94     A7 F0 03 F6 | 	mov	ptra, fp
1df98     B2 00 A0 FD | 	call	#popregs_
1df9c                 | _fatfs_cc_dir_register_ret
1df9c     2D 00 64 FD | 	ret
1dfa0                 | 
1dfa0                 | _fatfs_cc_dir_remove
1dfa0     05 4A 05 F6 | 	mov	COUNT_, #5
1dfa4     A8 00 A0 FD | 	call	#pushregs_
1dfa8     09 1F 02 F6 | 	mov	local01, arg01
1dfac     0F 21 02 FB | 	rdlong	local02, local01
1dfb0     10 1E 06 F1 | 	add	local01, #16
1dfb4     0F 23 02 FB | 	rdlong	local03, local01
1dfb8     1C 1E 06 F1 | 	add	local01, #28
1dfbc     0F 15 02 FB | 	rdlong	arg02, local01
1dfc0     2C 1E 86 F1 | 	sub	local01, #44
1dfc4     FF FF 7F FF 
1dfc8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1dfcc     00 24 06 A6 |  if_e	mov	local04, #0
1dfd0     18 00 90 AD |  if_e	jmp	#LR__3360
1dfd4     0F 13 02 F6 | 	mov	arg01, local01
1dfd8     2C 1E 06 F1 | 	add	local01, #44
1dfdc     0F 15 02 FB | 	rdlong	arg02, local01
1dfe0     2C 1E 86 F1 | 	sub	local01, #44
1dfe4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1dfe8     FD 24 02 F6 | 	mov	local04, result1
1dfec                 | LR__3360
1dfec     12 27 0A F6 | 	mov	local05, local04 wz
1dff0     64 00 90 5D |  if_ne	jmp	#LR__3363
1dff4                 | ' 		do {
1dff4                 | LR__3361
1dff4     18 1E 06 F1 | 	add	local01, #24
1dff8     0F 15 02 FB | 	rdlong	arg02, local01
1dffc     18 1E 86 F1 | 	sub	local01, #24
1e000     10 13 02 F6 | 	mov	arg01, local02
1e004     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1e008     FD 26 0A F6 | 	mov	local05, result1 wz
1e00c     40 00 90 5D |  if_ne	jmp	#LR__3362
1e010     1C 1E 06 F1 | 	add	local01, #28
1e014     0F 25 02 FB | 	rdlong	local04, local01
1e018     12 CB 49 FC | 	wrbyte	#229, local04
1e01c     03 20 06 F1 | 	add	local02, #3
1e020     10 03 48 FC | 	wrbyte	#1, local02
1e024     03 20 86 F1 | 	sub	local02, #3
1e028     0C 1E 86 F1 | 	sub	local01, #12
1e02c     0F 25 02 FB | 	rdlong	local04, local01
1e030     10 1E 86 F1 | 	sub	local01, #16
1e034     11 25 12 F2 | 	cmp	local04, local03 wc
1e038     14 00 90 3D |  if_ae	jmp	#LR__3362
1e03c     0F 13 02 F6 | 	mov	arg01, local01
1e040     00 14 06 F6 | 	mov	arg02, #0
1e044     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1e048     FD 26 0A F6 | 	mov	local05, result1 wz
1e04c     A4 FF 9F AD |  if_e	jmp	#LR__3361
1e050                 | LR__3362
1e050     04 26 0E F2 | 	cmp	local05, #4 wz
1e054     02 26 06 A6 |  if_e	mov	local05, #2
1e058                 | LR__3363
1e058                 | ' 	}
1e058                 | ' #line 2590 "ff.c"
1e058                 | ' 	return res;
1e058     13 FB 01 F6 | 	mov	result1, local05
1e05c     A7 F0 03 F6 | 	mov	ptra, fp
1e060     B2 00 A0 FD | 	call	#popregs_
1e064                 | _fatfs_cc_dir_remove_ret
1e064     2D 00 64 FD | 	ret
1e068                 | 
1e068                 | _fatfs_cc_get_fileinfo
1e068     0F 4A 05 F6 | 	mov	COUNT_, #15
1e06c     A8 00 A0 FD | 	call	#pushregs_
1e070     09 1F 02 F6 | 	mov	local01, arg01
1e074     0A 21 02 F6 | 	mov	local02, arg02
1e078     0F 23 02 FB | 	rdlong	local03, local01
1e07c     1C 20 06 F1 | 	add	local02, #28
1e080     10 01 48 FC | 	wrbyte	#0, local02
1e084     1C 20 86 F1 | 	sub	local02, #28
1e088     18 1E 06 F1 | 	add	local01, #24
1e08c     0F 25 0A FB | 	rdlong	local04, local01 wz
1e090     18 1E 86 F1 | 	sub	local01, #24
1e094     90 03 90 AD |  if_e	jmp	#LR__3384
1e098     2C 1E 06 F1 | 	add	local01, #44
1e09c     0F 25 02 FB | 	rdlong	local04, local01
1e0a0     2C 1E 86 F1 | 	sub	local01, #44
1e0a4     FF FF 7F FF 
1e0a8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1e0ac     D8 00 90 AD |  if_e	jmp	#LR__3373
1e0b0     00 26 06 F6 | 	mov	local05, #0
1e0b4     00 28 06 F6 | 	mov	local06, #0
1e0b8     00 2A 06 F6 | 	mov	local07, #0
1e0bc                 | ' 			si = di = 0;
1e0bc                 | ' 			hs = 0;
1e0bc                 | ' 			while (fs->lfnbuf[si] != 0) {
1e0bc                 | LR__3370
1e0bc     0C 22 06 F1 | 	add	local03, #12
1e0c0     11 25 02 FB | 	rdlong	local04, local03
1e0c4     0C 22 86 F1 | 	sub	local03, #12
1e0c8     14 2D 02 F6 | 	mov	local08, local06
1e0cc     01 2C 66 F0 | 	shl	local08, #1
1e0d0     12 2D 02 F1 | 	add	local08, local04
1e0d4     16 25 EA FA | 	rdword	local04, local08 wz
1e0d8     90 00 90 AD |  if_e	jmp	#LR__3372
1e0dc     0C 22 06 F1 | 	add	local03, #12
1e0e0     11 2F 02 FB | 	rdlong	local09, local03
1e0e4     0C 22 86 F1 | 	sub	local03, #12
1e0e8     14 31 02 F6 | 	mov	local10, local06
1e0ec     01 30 66 F0 | 	shl	local10, #1
1e0f0     17 31 02 F1 | 	add	local10, local09
1e0f4     18 33 E2 FA | 	rdword	local11, local10
1e0f8     15 25 02 F6 | 	mov	local04, local07
1e0fc     0F 24 4E F7 | 	zerox	local04, #15 wz
1e100     01 28 06 F1 | 	add	local06, #1
1e104     24 00 90 5D |  if_ne	jmp	#LR__3371
1e108     19 35 32 F9 | 	getword	local12, local11, #0
1e10c     6C 00 00 FF 
1e110     00 34 16 F2 | 	cmp	local12, ##55296 wc
1e114     14 00 90 CD |  if_b	jmp	#LR__3371
1e118     19 37 32 F9 | 	getword	local13, local11, #0
1e11c     70 00 00 FF 
1e120     00 36 16 F2 | 	cmp	local13, ##57344 wc
1e124     19 2B 02 C6 |  if_b	mov	local07, local11
1e128                 | ' 					hs = wc; continue;
1e128     90 FF 9F CD |  if_b	jmp	#LR__3370
1e12c                 | LR__3371
1e12c     15 13 32 F9 | 	getword	arg01, local07, #0
1e130     10 12 66 F0 | 	shl	arg01, #16
1e134     19 33 32 F9 | 	getword	local11, local11, #0
1e138     19 13 42 F5 | 	or	arg01, local11
1e13c     13 15 02 F6 | 	mov	arg02, local05
1e140     1C 20 06 F1 | 	add	local02, #28
1e144     10 15 02 F1 | 	add	arg02, local02
1e148     FF 16 06 F6 | 	mov	arg03, #255
1e14c     13 17 82 F1 | 	sub	arg03, local05
1e150     1C 20 86 F1 | 	sub	local02, #28
1e154     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1e158     FD 38 0A F6 | 	mov	local14, result1 wz
1e15c     00 26 06 A6 |  if_e	mov	local05, #0
1e160     1C 27 02 51 |  if_ne	add	local05, local14
1e164     00 2A 06 56 |  if_ne	mov	local07, #0
1e168     50 FF 9F 5D |  if_ne	jmp	#LR__3370
1e16c                 | LR__3372
1e16c     15 25 02 F6 | 	mov	local04, local07
1e170     0F 24 4E F7 | 	zerox	local04, #15 wz
1e174     00 26 06 56 |  if_ne	mov	local05, #0
1e178     1C 20 06 F1 | 	add	local02, #28
1e17c     10 27 02 F1 | 	add	local05, local02
1e180     13 01 48 FC | 	wrbyte	#0, local05
1e184     1C 20 86 F1 | 	sub	local02, #28
1e188                 | LR__3373
1e188     00 26 06 F6 | 	mov	local05, #0
1e18c     00 28 06 F6 | 	mov	local06, #0
1e190                 | ' 			fno->fname[di] = 0;
1e190                 | ' 		}
1e190                 | ' 	}
1e190                 | ' 
1e190                 | ' 	si = di = 0;
1e190                 | ' 	while (si < 11) {
1e190                 | LR__3374
1e190     0B 28 16 F2 | 	cmp	local06, #11 wc
1e194     20 01 90 3D |  if_ae	jmp	#LR__3377
1e198     1C 1E 06 F1 | 	add	local01, #28
1e19c     0F 2F 02 FB | 	rdlong	local09, local01
1e1a0     1C 1E 86 F1 | 	sub	local01, #28
1e1a4     14 31 02 F6 | 	mov	local10, local06
1e1a8     17 31 02 F1 | 	add	local10, local09
1e1ac     18 33 C2 FA | 	rdbyte	local11, local10
1e1b0     19 25 32 F9 | 	getword	local04, local11, #0
1e1b4     20 24 0E F2 | 	cmp	local04, #32 wz
1e1b8     01 28 06 F1 | 	add	local06, #1
1e1bc     D0 FF 9F AD |  if_e	jmp	#LR__3374
1e1c0     19 25 32 F9 | 	getword	local04, local11, #0
1e1c4     05 24 0E F2 | 	cmp	local04, #5 wz
1e1c8     E5 32 06 A6 |  if_e	mov	local11, #229
1e1cc     09 28 0E F2 | 	cmp	local06, #9 wz
1e1d0     20 00 90 5D |  if_ne	jmp	#LR__3375
1e1d4     0C 26 16 F2 | 	cmp	local05, #12 wc
1e1d8     18 00 90 3D |  if_ae	jmp	#LR__3375
1e1dc     13 37 02 F6 | 	mov	local13, local05
1e1e0     0C 20 06 F1 | 	add	local02, #12
1e1e4     10 37 02 F1 | 	add	local13, local02
1e1e8     1B 5D 48 FC | 	wrbyte	#46, local13
1e1ec     01 26 06 F1 | 	add	local05, #1
1e1f0     0C 20 86 F1 | 	sub	local02, #12
1e1f4                 | LR__3375
1e1f4     19 13 32 F9 | 	getword	arg01, local11, #0
1e1f8     07 12 4E F7 | 	zerox	arg01, #7 wz
1e1fc     00 FA 05 56 |  if_ne	mov	result1, #0
1e200                 | ' 
1e200                 | ' 	return 0;
1e200     00 FA 05 A6 |  if_e	mov	result1, #0
1e204     00 FA 0D F2 | 	cmp	result1, #0 wz
1e208     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1e20c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1e210     50 00 90 AD |  if_e	jmp	#LR__3376
1e214     1C 1E 06 F1 | 	add	local01, #28
1e218     0F 31 02 FB | 	rdlong	local10, local01
1e21c     1C 1E 86 F1 | 	sub	local01, #28
1e220     14 2D 02 F6 | 	mov	local08, local06
1e224     18 2D 02 F1 | 	add	local08, local10
1e228     16 13 CA FA | 	rdbyte	arg01, local08 wz
1e22c     00 FA 05 56 |  if_ne	mov	result1, #0
1e230                 | ' 
1e230                 | ' 	return 0;
1e230     00 FA 05 A6 |  if_e	mov	result1, #0
1e234     00 FA 0D F2 | 	cmp	result1, #0 wz
1e238     28 00 90 AD |  if_e	jmp	#LR__3376
1e23c     19 33 32 F9 | 	getword	local11, local11, #0
1e240     08 32 66 F0 | 	shl	local11, #8
1e244     1C 1E 06 F1 | 	add	local01, #28
1e248     0F 39 02 FB | 	rdlong	local14, local01
1e24c     1C 1E 86 F1 | 	sub	local01, #28
1e250     14 2F 02 F6 | 	mov	local09, local06
1e254     1C 2F 02 F1 | 	add	local09, local14
1e258     17 35 C2 FA | 	rdbyte	local12, local09
1e25c     1A 33 42 F5 | 	or	local11, local12
1e260     01 28 06 F1 | 	add	local06, #1
1e264                 | LR__3376
1e264     19 13 02 F6 | 	mov	arg01, local11
1e268     01 00 00 FF 
1e26c     52 15 06 F6 | 	mov	arg02, ##850
1e270     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1e274     FD 32 02 F6 | 	mov	local11, result1
1e278     19 25 02 F6 | 	mov	local04, local11
1e27c     0F 24 4E F7 | 	zerox	local04, #15 wz
1e280     00 26 06 A6 |  if_e	mov	local05, #0
1e284     30 00 90 AD |  if_e	jmp	#LR__3377
1e288     19 13 32 F9 | 	getword	arg01, local11, #0
1e28c     13 15 02 F6 | 	mov	arg02, local05
1e290     0C 20 06 F1 | 	add	local02, #12
1e294     10 15 02 F1 | 	add	arg02, local02
1e298     0C 16 06 F6 | 	mov	arg03, #12
1e29c     13 17 82 F1 | 	sub	arg03, local05
1e2a0     0C 20 86 F1 | 	sub	local02, #12
1e2a4     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1e2a8     FD 38 0A F6 | 	mov	local14, result1 wz
1e2ac     00 26 06 A6 |  if_e	mov	local05, #0
1e2b0     1C 27 02 51 |  if_ne	add	local05, local14
1e2b4     D8 FE 9F 5D |  if_ne	jmp	#LR__3374
1e2b8                 | LR__3377
1e2b8     13 25 02 F6 | 	mov	local04, local05
1e2bc     0C 20 06 F1 | 	add	local02, #12
1e2c0     10 25 02 F1 | 	add	local04, local02
1e2c4     12 01 48 FC | 	wrbyte	#0, local04
1e2c8     10 20 06 F1 | 	add	local02, #16
1e2cc     10 25 CA FA | 	rdbyte	local04, local02 wz
1e2d0     1C 20 86 F1 | 	sub	local02, #28
1e2d4     F8 00 90 5D |  if_ne	jmp	#LR__3383
1e2d8     00 26 0E F2 | 	cmp	local05, #0 wz
1e2dc     1C 00 90 5D |  if_ne	jmp	#LR__3378
1e2e0     13 37 02 F6 | 	mov	local13, local05
1e2e4     1C 20 06 F1 | 	add	local02, #28
1e2e8     10 37 02 F1 | 	add	local13, local02
1e2ec     1B 7F 48 FC | 	wrbyte	#63, local13
1e2f0     01 26 06 F1 | 	add	local05, #1
1e2f4     1C 20 86 F1 | 	sub	local02, #28
1e2f8     A4 00 90 FD | 	jmp	#LR__3382
1e2fc                 | LR__3378
1e2fc                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1e2fc     00 26 06 F6 | 	mov	local05, #0
1e300     00 28 06 F6 | 	mov	local06, #0
1e304     08 3A 06 F6 | 	mov	local15, #8
1e308                 | LR__3379
1e308     14 25 02 F6 | 	mov	local04, local06
1e30c     0C 20 06 F1 | 	add	local02, #12
1e310     10 25 02 F1 | 	add	local04, local02
1e314     12 37 CA FA | 	rdbyte	local13, local04 wz
1e318     0C 20 86 F1 | 	sub	local02, #12
1e31c     80 00 90 AD |  if_e	jmp	#LR__3381
1e320     14 2D 02 F6 | 	mov	local08, local06
1e324     0C 20 06 F1 | 	add	local02, #12
1e328     10 2D 02 F1 | 	add	local08, local02
1e32c     16 33 C2 FA | 	rdbyte	local11, local08
1e330     19 39 32 F9 | 	getword	local14, local11, #0
1e334     2E 38 0E F2 | 	cmp	local14, #46 wz
1e338     0C 20 86 F1 | 	sub	local02, #12
1e33c     10 3A 06 A6 |  if_e	mov	local15, #16
1e340     19 39 32 F9 | 	getword	local14, local11, #0
1e344     41 38 16 F2 | 	cmp	local14, #65 wc
1e348     30 00 90 CD |  if_b	jmp	#LR__3380
1e34c     19 2D 32 F9 | 	getword	local08, local11, #0
1e350     5B 2C 16 F2 | 	cmp	local08, #91 wc
1e354     24 00 90 3D |  if_ae	jmp	#LR__3380
1e358     1C 1E 06 F1 | 	add	local01, #28
1e35c     0F 2F 02 FB | 	rdlong	local09, local01
1e360     1C 1E 86 F1 | 	sub	local01, #28
1e364     0C 2E 06 F1 | 	add	local09, #12
1e368     17 31 C2 FA | 	rdbyte	local10, local09
1e36c     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1e370     1C 31 CA F7 | 	test	local10, local14 wz
1e374     19 33 32 59 |  if_ne	getword	local11, local11, #0
1e378     20 32 06 51 |  if_ne	add	local11, #32
1e37c                 | LR__3380
1e37c     13 39 02 F6 | 	mov	local14, local05
1e380     1C 20 06 F1 | 	add	local02, #28
1e384     10 39 02 F1 | 	add	local14, local02
1e388     19 33 32 F9 | 	getword	local11, local11, #0
1e38c     1C 33 42 FC | 	wrbyte	local11, local14
1e390     01 28 06 F1 | 	add	local06, #1
1e394     01 26 06 F1 | 	add	local05, #1
1e398     1C 20 86 F1 | 	sub	local02, #28
1e39c     68 FF 9F FD | 	jmp	#LR__3379
1e3a0                 | LR__3381
1e3a0                 | LR__3382
1e3a0     1C 20 06 F1 | 	add	local02, #28
1e3a4     10 27 02 F1 | 	add	local05, local02
1e3a8     13 01 48 FC | 	wrbyte	#0, local05
1e3ac     1C 1E 06 F1 | 	add	local01, #28
1e3b0     0F 25 02 FB | 	rdlong	local04, local01
1e3b4     1C 1E 86 F1 | 	sub	local01, #28
1e3b8     0C 24 06 F1 | 	add	local04, #12
1e3bc     12 37 CA FA | 	rdbyte	local13, local04 wz
1e3c0     1C 20 86 F1 | 	sub	local02, #28
1e3c4     0C 20 06 A1 |  if_e	add	local02, #12
1e3c8     10 01 48 AC |  if_e	wrbyte	#0, local02
1e3cc     0C 20 86 A1 |  if_e	sub	local02, #12
1e3d0                 | LR__3383
1e3d0     1C 1E 06 F1 | 	add	local01, #28
1e3d4     0F 35 02 FB | 	rdlong	local12, local01
1e3d8     0B 34 06 F1 | 	add	local12, #11
1e3dc     1A 25 C2 FA | 	rdbyte	local04, local12
1e3e0     3F 24 06 F5 | 	and	local04, #63
1e3e4     08 20 06 F1 | 	add	local02, #8
1e3e8     10 25 42 FC | 	wrbyte	local04, local02
1e3ec     08 20 86 F1 | 	sub	local02, #8
1e3f0     0F 13 02 FB | 	rdlong	arg01, local01
1e3f4     1C 12 06 F1 | 	add	arg01, #28
1e3f8                 | ' {
1e3f8                 | ' 
1e3f8                 | ' 	return *((DWORD*)ptr);
1e3f8     09 FB 01 FB | 	rdlong	result1, arg01
1e3fc     10 FB 61 FC | 	wrlong	result1, local02
1e400     0F 13 02 FB | 	rdlong	arg01, local01
1e404     16 12 06 F1 | 	add	arg01, #22
1e408                 | ' {
1e408                 | ' 
1e408                 | ' 	return *((WORD*)ptr);
1e408     09 FB E1 FA | 	rdword	result1, arg01
1e40c     06 20 06 F1 | 	add	local02, #6
1e410     10 FB 51 FC | 	wrword	result1, local02
1e414     0F 13 02 FB | 	rdlong	arg01, local01
1e418     18 12 06 F1 | 	add	arg01, #24
1e41c                 | ' {
1e41c                 | ' 
1e41c                 | ' 	return *((WORD*)ptr);
1e41c     09 FB E1 FA | 	rdword	result1, arg01
1e420     02 20 86 F1 | 	sub	local02, #2
1e424     10 FB 51 FC | 	wrword	result1, local02
1e428                 | LR__3384
1e428     A7 F0 03 F6 | 	mov	ptra, fp
1e42c     B2 00 A0 FD | 	call	#popregs_
1e430                 | _fatfs_cc_get_fileinfo_ret
1e430     2D 00 64 FD | 	ret
1e434                 | 
1e434                 | _fatfs_cc_create_name
1e434     0D 4A 05 F6 | 	mov	COUNT_, #13
1e438     A8 00 A0 FD | 	call	#pushregs_
1e43c     34 F0 07 F1 | 	add	ptra, #52
1e440     04 4E 05 F1 | 	add	fp, #4
1e444     A7 12 62 FC | 	wrlong	arg01, fp
1e448     04 4E 05 F1 | 	add	fp, #4
1e44c     A7 14 62 FC | 	wrlong	arg02, fp
1e450     0A FB 01 FB | 	rdlong	result1, arg02
1e454     28 4E 05 F1 | 	add	fp, #40
1e458     A7 FA 61 FC | 	wrlong	result1, fp
1e45c     2C 4E 85 F1 | 	sub	fp, #44
1e460     A7 FA 01 FB | 	rdlong	result1, fp
1e464     FD 1E 02 FB | 	rdlong	local01, result1
1e468     0C 1E 06 F1 | 	add	local01, #12
1e46c     0F 21 02 FB | 	rdlong	local02, local01
1e470     14 4E 05 F1 | 	add	fp, #20
1e474     A7 20 62 FC | 	wrlong	local02, fp
1e478     14 4E 05 F1 | 	add	fp, #20
1e47c     A7 00 68 FC | 	wrlong	#0, fp
1e480     2C 4E 85 F1 | 	sub	fp, #44
1e484                 | ' 
1e484                 | ' 
1e484                 | ' 
1e484                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1e484                 | ' 	for (;;) {
1e484                 | LR__3390
1e484     30 4E 05 F1 | 	add	fp, #48
1e488     A7 12 02 F6 | 	mov	arg01, fp
1e48c     30 4E 85 F1 | 	sub	fp, #48
1e490     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1e494     1C 4E 05 F1 | 	add	fp, #28
1e498     A7 FA 61 FC | 	wrlong	result1, fp
1e49c     1C 4E 85 F1 | 	sub	fp, #28
1e4a0     FF FF 7F FF 
1e4a4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1e4a8     06 FA 05 A6 |  if_e	mov	result1, #6
1e4ac     74 08 90 AD |  if_e	jmp	#LR__3430
1e4b0     1C 4E 05 F1 | 	add	fp, #28
1e4b4     A7 1E 02 FB | 	rdlong	local01, fp
1e4b8     1C 4E 85 F1 | 	sub	fp, #28
1e4bc     80 00 00 FF 
1e4c0     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1e4c4     3C 00 90 CD |  if_b	jmp	#LR__3391
1e4c8     18 4E 05 F1 | 	add	fp, #24
1e4cc     A7 22 02 FB | 	rdlong	local03, fp
1e4d0     14 4E 05 F1 | 	add	fp, #20
1e4d4     A7 1E 02 FB | 	rdlong	local01, fp
1e4d8     0F 25 02 F6 | 	mov	local04, local01
1e4dc     01 24 06 F1 | 	add	local04, #1
1e4e0     A7 24 62 FC | 	wrlong	local04, fp
1e4e4     01 1E 66 F0 | 	shl	local01, #1
1e4e8     11 1F 02 F1 | 	add	local01, local03
1e4ec     10 4E 85 F1 | 	sub	fp, #16
1e4f0     A7 26 02 FB | 	rdlong	local05, fp
1e4f4     1C 4E 85 F1 | 	sub	fp, #28
1e4f8     13 29 02 F6 | 	mov	local06, local05
1e4fc     10 28 46 F0 | 	shr	local06, #16
1e500     0F 29 52 FC | 	wrword	local06, local01
1e504                 | LR__3391
1e504     1C 4E 05 F1 | 	add	fp, #28
1e508     A7 1E 02 FB | 	rdlong	local01, fp
1e50c     08 4E 85 F1 | 	sub	fp, #8
1e510     A7 1E 52 FC | 	wrword	local01, fp
1e514     A7 1E E2 FA | 	rdword	local01, fp
1e518     14 4E 85 F1 | 	sub	fp, #20
1e51c     20 1E 16 F2 | 	cmp	local01, #32 wc
1e520     B0 00 90 CD |  if_b	jmp	#LR__3393
1e524     14 4E 05 F1 | 	add	fp, #20
1e528     A7 1E E2 FA | 	rdword	local01, fp
1e52c     14 4E 85 F1 | 	sub	fp, #20
1e530     2F 1E 0E F2 | 	cmp	local01, #47 wz
1e534     14 4E 05 51 |  if_ne	add	fp, #20
1e538     A7 24 E2 5A |  if_ne	rdword	local04, fp
1e53c     14 4E 85 51 |  if_ne	sub	fp, #20
1e540     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1e544     8C 00 90 AD |  if_e	jmp	#LR__3393
1e548     14 4E 05 F1 | 	add	fp, #20
1e54c     A7 12 E2 FA | 	rdword	arg01, fp
1e550     14 4E 85 F1 | 	sub	fp, #20
1e554     80 12 16 F2 | 	cmp	arg01, #128 wc
1e558     24 00 90 3D |  if_ae	jmp	#LR__3392
1e55c     22 01 00 FF 
1e560     94 12 06 F6 | 	mov	arg01, ##@LR__4052
1e564     14 4E 05 F1 | 	add	fp, #20
1e568     A7 14 E2 FA | 	rdword	arg02, fp
1e56c     14 4E 85 F1 | 	sub	fp, #20
1e570     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1e574     00 FA 0D F2 | 	cmp	result1, #0 wz
1e578     06 FA 05 56 |  if_ne	mov	result1, #6
1e57c     A4 07 90 5D |  if_ne	jmp	#LR__3430
1e580                 | LR__3392
1e580     2C 4E 05 F1 | 	add	fp, #44
1e584     A7 28 02 FB | 	rdlong	local06, fp
1e588     2C 4E 85 F1 | 	sub	fp, #44
1e58c     FF 28 16 F2 | 	cmp	local06, #255 wc
1e590     06 FA 05 36 |  if_ae	mov	result1, #6
1e594     8C 07 90 3D |  if_ae	jmp	#LR__3430
1e598     18 4E 05 F1 | 	add	fp, #24
1e59c     A7 22 02 FB | 	rdlong	local03, fp
1e5a0     14 4E 05 F1 | 	add	fp, #20
1e5a4     A7 20 02 FB | 	rdlong	local02, fp
1e5a8     10 25 02 F6 | 	mov	local04, local02
1e5ac     01 24 06 F1 | 	add	local04, #1
1e5b0     A7 24 62 FC | 	wrlong	local04, fp
1e5b4     10 1F 02 F6 | 	mov	local01, local02
1e5b8     01 1E 66 F0 | 	shl	local01, #1
1e5bc     11 1F 02 F1 | 	add	local01, local03
1e5c0     18 4E 85 F1 | 	sub	fp, #24
1e5c4     A7 28 E2 FA | 	rdword	local06, fp
1e5c8     14 4E 85 F1 | 	sub	fp, #20
1e5cc     0F 29 52 FC | 	wrword	local06, local01
1e5d0     B0 FE 9F FD | 	jmp	#LR__3390
1e5d4                 | LR__3393
1e5d4     14 4E 05 F1 | 	add	fp, #20
1e5d8     A7 2A E2 FA | 	rdword	local07, fp
1e5dc     14 4E 85 F1 | 	sub	fp, #20
1e5e0     20 2A 16 F2 | 	cmp	local07, #32 wc
1e5e4     10 4E 05 C1 |  if_b	add	fp, #16
1e5e8     A7 08 48 CC |  if_b	wrbyte	#4, fp
1e5ec     10 4E 85 C1 |  if_b	sub	fp, #16
1e5f0     74 00 90 CD |  if_b	jmp	#LR__3398
1e5f4     97 24 48 FB | 	callpa	#(@LR__3396-@LR__3394)>>2,fcache_load_ptr_
1e5f8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1e5f8                 | LR__3394
1e5f8     30 4E 05 F1 | 	add	fp, #48
1e5fc     A7 24 02 FB | 	rdlong	local04, fp
1e600     30 4E 85 F1 | 	sub	fp, #48
1e604     12 2B C2 FA | 	rdbyte	local07, local04
1e608     2F 2A 0E F2 | 	cmp	local07, #47 wz
1e60c     18 00 90 AD |  if_e	jmp	#LR__3395
1e610     30 4E 05 F1 | 	add	fp, #48
1e614     A7 24 02 FB | 	rdlong	local04, fp
1e618     30 4E 85 F1 | 	sub	fp, #48
1e61c     12 21 C2 FA | 	rdbyte	local02, local04
1e620     5C 20 0E F2 | 	cmp	local02, #92 wz
1e624     18 00 90 5D |  if_ne	jmp	#LR__3397
1e628                 | LR__3395
1e628     30 4E 05 F1 | 	add	fp, #48
1e62c     A7 1E 02 FB | 	rdlong	local01, fp
1e630     01 1E 06 F1 | 	add	local01, #1
1e634     A7 1E 62 FC | 	wrlong	local01, fp
1e638     30 4E 85 F1 | 	sub	fp, #48
1e63c     B8 FF 9F FD | 	jmp	#LR__3394
1e640                 | LR__3396
1e640                 | LR__3397
1e640     10 4E 05 F1 | 	add	fp, #16
1e644     A7 00 48 FC | 	wrbyte	#0, fp
1e648     20 4E 05 F1 | 	add	fp, #32
1e64c     A7 28 02 FB | 	rdlong	local06, fp
1e650     30 4E 85 F1 | 	sub	fp, #48
1e654     14 2B C2 FA | 	rdbyte	local07, local06
1e658     20 2A 16 F2 | 	cmp	local07, #32 wc
1e65c     10 4E 05 C1 |  if_b	add	fp, #16
1e660     A7 08 48 CC |  if_b	wrbyte	#4, fp
1e664     10 4E 85 C1 |  if_b	sub	fp, #16
1e668                 | LR__3398
1e668     08 4E 05 F1 | 	add	fp, #8
1e66c     A7 2A 02 FB | 	rdlong	local07, fp
1e670     28 4E 05 F1 | 	add	fp, #40
1e674     A7 1E 02 FB | 	rdlong	local01, fp
1e678     30 4E 85 F1 | 	sub	fp, #48
1e67c     15 1F 62 FC | 	wrlong	local01, local07
1e680     97 38 48 FB | 	callpa	#(@LR__3400-@LR__3399)>>2,fcache_load_ptr_
1e684                 | ' 	}
1e684                 | ' 	*path = p;
1e684                 | ' #line 2862 "ff.c"
1e684                 | ' 	while (di) {
1e684                 | LR__3399
1e684     2C 4E 05 F1 | 	add	fp, #44
1e688     A7 2A 0A FB | 	rdlong	local07, fp wz
1e68c     2C 4E 85 F1 | 	sub	fp, #44
1e690     60 00 90 AD |  if_e	jmp	#LR__3401
1e694     18 4E 05 F1 | 	add	fp, #24
1e698     A7 28 02 FB | 	rdlong	local06, fp
1e69c     14 4E 05 F1 | 	add	fp, #20
1e6a0     A7 24 02 FB | 	rdlong	local04, fp
1e6a4     01 24 86 F1 | 	sub	local04, #1
1e6a8     01 24 66 F0 | 	shl	local04, #1
1e6ac     14 25 02 F1 | 	add	local04, local06
1e6b0     12 29 E2 FA | 	rdword	local06, local04
1e6b4     18 4E 85 F1 | 	sub	fp, #24
1e6b8     A7 28 52 FC | 	wrword	local06, fp
1e6bc     A7 2A E2 FA | 	rdword	local07, fp
1e6c0     14 4E 85 F1 | 	sub	fp, #20
1e6c4     20 2A 0E F2 | 	cmp	local07, #32 wz
1e6c8     14 4E 05 51 |  if_ne	add	fp, #20
1e6cc     A7 1E E2 5A |  if_ne	rdword	local01, fp
1e6d0     14 4E 85 51 |  if_ne	sub	fp, #20
1e6d4     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1e6d8     18 00 90 5D |  if_ne	jmp	#LR__3401
1e6dc     2C 4E 05 F1 | 	add	fp, #44
1e6e0     A7 1E 02 FB | 	rdlong	local01, fp
1e6e4     01 1E 86 F1 | 	sub	local01, #1
1e6e8     A7 1E 62 FC | 	wrlong	local01, fp
1e6ec     2C 4E 85 F1 | 	sub	fp, #44
1e6f0     90 FF 9F FD | 	jmp	#LR__3399
1e6f4                 | LR__3400
1e6f4                 | LR__3401
1e6f4     18 4E 05 F1 | 	add	fp, #24
1e6f8     A7 2C 02 FB | 	rdlong	local08, fp
1e6fc     14 4E 05 F1 | 	add	fp, #20
1e700     A7 24 02 FB | 	rdlong	local04, fp
1e704     01 24 66 F0 | 	shl	local04, #1
1e708     16 25 02 F1 | 	add	local04, local08
1e70c     12 01 58 FC | 	wrword	#0, local04
1e710     A7 2A 0A FB | 	rdlong	local07, fp wz
1e714     2C 4E 85 F1 | 	sub	fp, #44
1e718     06 FA 05 A6 |  if_e	mov	result1, #6
1e71c     04 06 90 AD |  if_e	jmp	#LR__3430
1e720                 | ' 
1e720                 | ' 
1e720                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1e720     28 4E 05 F1 | 	add	fp, #40
1e724     A7 00 68 FC | 	wrlong	#0, fp
1e728     28 4E 85 F1 | 	sub	fp, #40
1e72c     97 22 48 FB | 	callpa	#(@LR__3403-@LR__3402)>>2,fcache_load_ptr_
1e730                 | LR__3402
1e730     18 4E 05 F1 | 	add	fp, #24
1e734     A7 2E 02 FB | 	rdlong	local09, fp
1e738     10 4E 05 F1 | 	add	fp, #16
1e73c     A7 30 02 FB | 	rdlong	local10, fp
1e740     28 4E 85 F1 | 	sub	fp, #40
1e744     01 30 66 F0 | 	shl	local10, #1
1e748     17 31 02 F1 | 	add	local10, local09
1e74c     18 33 E2 FA | 	rdword	local11, local10
1e750     20 32 0E F2 | 	cmp	local11, #32 wz
1e754     1C 00 90 5D |  if_ne	jmp	#LR__3404
1e758     28 4E 05 F1 | 	add	fp, #40
1e75c     A7 34 02 FB | 	rdlong	local12, fp
1e760     1A 27 02 F6 | 	mov	local05, local12
1e764     01 26 06 F1 | 	add	local05, #1
1e768     A7 26 62 FC | 	wrlong	local05, fp
1e76c     28 4E 85 F1 | 	sub	fp, #40
1e770     BC FF 9F FD | 	jmp	#LR__3402
1e774                 | LR__3403
1e774                 | LR__3404
1e774     28 4E 05 F1 | 	add	fp, #40
1e778     A7 2A 02 FB | 	rdlong	local07, fp
1e77c     28 4E 85 F1 | 	sub	fp, #40
1e780     01 2A 16 F2 | 	cmp	local07, #1 wc
1e784     28 00 90 3D |  if_ae	jmp	#LR__3405
1e788     18 4E 05 F1 | 	add	fp, #24
1e78c     A7 22 02 FB | 	rdlong	local03, fp
1e790     10 4E 05 F1 | 	add	fp, #16
1e794     A7 2E 02 FB | 	rdlong	local09, fp
1e798     28 4E 85 F1 | 	sub	fp, #40
1e79c     01 2E 66 F0 | 	shl	local09, #1
1e7a0     11 2F 02 F1 | 	add	local09, local03
1e7a4     17 1F E2 FA | 	rdword	local01, local09
1e7a8     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e7ac     14 00 90 5D |  if_ne	jmp	#LR__3406
1e7b0                 | LR__3405
1e7b0     10 4E 05 F1 | 	add	fp, #16
1e7b4     A7 2A C2 FA | 	rdbyte	local07, fp
1e7b8     03 2A 46 F5 | 	or	local07, #3
1e7bc     A7 2A 42 FC | 	wrbyte	local07, fp
1e7c0     10 4E 85 F1 | 	sub	fp, #16
1e7c4                 | LR__3406
1e7c4     97 2C 48 FB | 	callpa	#(@LR__3408-@LR__3407)>>2,fcache_load_ptr_
1e7c8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1e7c8                 | LR__3407
1e7c8     2C 4E 05 F1 | 	add	fp, #44
1e7cc     A7 2A 02 FB | 	rdlong	local07, fp
1e7d0     2C 4E 85 F1 | 	sub	fp, #44
1e7d4     01 2A 16 F2 | 	cmp	local07, #1 wc
1e7d8     44 00 90 CD |  if_b	jmp	#LR__3409
1e7dc     18 4E 05 F1 | 	add	fp, #24
1e7e0     A7 28 02 FB | 	rdlong	local06, fp
1e7e4     14 4E 05 F1 | 	add	fp, #20
1e7e8     A7 22 02 FB | 	rdlong	local03, fp
1e7ec     2C 4E 85 F1 | 	sub	fp, #44
1e7f0     01 22 86 F1 | 	sub	local03, #1
1e7f4     01 22 66 F0 | 	shl	local03, #1
1e7f8     14 23 02 F1 | 	add	local03, local06
1e7fc     11 1F E2 FA | 	rdword	local01, local03
1e800     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e804     18 00 90 AD |  if_e	jmp	#LR__3409
1e808     2C 4E 05 F1 | 	add	fp, #44
1e80c     A7 1E 02 FB | 	rdlong	local01, fp
1e810     01 1E 86 F1 | 	sub	local01, #1
1e814     A7 1E 62 FC | 	wrlong	local01, fp
1e818     2C 4E 85 F1 | 	sub	fp, #44
1e81c     A8 FF 9F FD | 	jmp	#LR__3407
1e820                 | LR__3408
1e820                 | LR__3409
1e820     04 4E 05 F1 | 	add	fp, #4
1e824     A7 12 02 FB | 	rdlong	arg01, fp
1e828     04 4E 85 F1 | 	sub	fp, #4
1e82c     20 12 06 F1 | 	add	arg01, #32
1e830     20 14 06 F6 | 	mov	arg02, #32
1e834     0B 16 06 F6 | 	mov	arg03, #11
1e838     09 37 02 F6 | 	mov	local13, arg01
1e83c     98 00 A0 FD | 	call	#\builtin_bytefill_
1e840     1B FB 01 F6 | 	mov	result1, local13
1e844     0C 4E 05 F1 | 	add	fp, #12
1e848     A7 00 48 FC | 	wrbyte	#0, fp
1e84c     A7 2A C2 FA | 	rdbyte	local07, fp
1e850     14 4E 05 F1 | 	add	fp, #20
1e854     A7 2A 62 FC | 	wrlong	local07, fp
1e858     04 4E 05 F1 | 	add	fp, #4
1e85c     A7 10 68 FC | 	wrlong	#8, fp
1e860     24 4E 85 F1 | 	sub	fp, #36
1e864                 | ' 
1e864                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1e864                 | ' 	i = b = 0; ni = 8;
1e864                 | ' 	for (;;) {
1e864                 | LR__3410
1e864     18 4E 05 F1 | 	add	fp, #24
1e868     A7 22 02 FB | 	rdlong	local03, fp
1e86c     10 4E 05 F1 | 	add	fp, #16
1e870     A7 2E 02 FB | 	rdlong	local09, fp
1e874     17 25 02 F6 | 	mov	local04, local09
1e878     01 24 06 F1 | 	add	local04, #1
1e87c     A7 24 62 FC | 	wrlong	local04, fp
1e880     01 2E 66 F0 | 	shl	local09, #1
1e884     11 2F 02 F1 | 	add	local09, local03
1e888     17 29 E2 FA | 	rdword	local06, local09
1e88c     14 4E 85 F1 | 	sub	fp, #20
1e890     A7 28 52 FC | 	wrword	local06, fp
1e894     A7 2A EA FA | 	rdword	local07, fp wz
1e898     14 4E 85 F1 | 	sub	fp, #20
1e89c     74 03 90 AD |  if_e	jmp	#LR__3426
1e8a0     14 4E 05 F1 | 	add	fp, #20
1e8a4     A7 2A E2 FA | 	rdword	local07, fp
1e8a8     14 4E 85 F1 | 	sub	fp, #20
1e8ac     20 2A 0E F2 | 	cmp	local07, #32 wz
1e8b0     30 00 90 AD |  if_e	jmp	#LR__3411
1e8b4     14 4E 05 F1 | 	add	fp, #20
1e8b8     A7 1E E2 FA | 	rdword	local01, fp
1e8bc     14 4E 85 F1 | 	sub	fp, #20
1e8c0     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e8c4     34 00 90 5D |  if_ne	jmp	#LR__3412
1e8c8     28 4E 05 F1 | 	add	fp, #40
1e8cc     A7 24 02 FB | 	rdlong	local04, fp
1e8d0     04 4E 05 F1 | 	add	fp, #4
1e8d4     A7 30 02 FB | 	rdlong	local10, fp
1e8d8     2C 4E 85 F1 | 	sub	fp, #44
1e8dc     18 25 0A F2 | 	cmp	local04, local10 wz
1e8e0     18 00 90 AD |  if_e	jmp	#LR__3412
1e8e4                 | LR__3411
1e8e4     10 4E 05 F1 | 	add	fp, #16
1e8e8     A7 2A C2 FA | 	rdbyte	local07, fp
1e8ec     03 2A 46 F5 | 	or	local07, #3
1e8f0     A7 2A 42 FC | 	wrbyte	local07, fp
1e8f4     10 4E 85 F1 | 	sub	fp, #16
1e8f8                 | ' 			cf |=  0x01  |  0x02 ;
1e8f8                 | ' 			continue;
1e8f8     68 FF 9F FD | 	jmp	#LR__3410
1e8fc                 | LR__3412
1e8fc     20 4E 05 F1 | 	add	fp, #32
1e900     A7 2A 02 FB | 	rdlong	local07, fp
1e904     04 4E 05 F1 | 	add	fp, #4
1e908     A7 1E 02 FB | 	rdlong	local01, fp
1e90c     24 4E 85 F1 | 	sub	fp, #36
1e910     0F 2B 12 F2 | 	cmp	local07, local01 wc
1e914     1C 00 90 3D |  if_ae	jmp	#LR__3413
1e918     28 4E 05 F1 | 	add	fp, #40
1e91c     A7 2C 02 FB | 	rdlong	local08, fp
1e920     04 4E 05 F1 | 	add	fp, #4
1e924     A7 30 02 FB | 	rdlong	local10, fp
1e928     2C 4E 85 F1 | 	sub	fp, #44
1e92c     18 2D 0A F2 | 	cmp	local08, local10 wz
1e930     B0 00 90 5D |  if_ne	jmp	#LR__3415
1e934                 | LR__3413
1e934     24 4E 05 F1 | 	add	fp, #36
1e938     A7 2A 02 FB | 	rdlong	local07, fp
1e93c     24 4E 85 F1 | 	sub	fp, #36
1e940     0B 2A 0E F2 | 	cmp	local07, #11 wz
1e944     18 00 90 5D |  if_ne	jmp	#LR__3414
1e948     10 4E 05 F1 | 	add	fp, #16
1e94c     A7 2A C2 FA | 	rdbyte	local07, fp
1e950     03 2A 46 F5 | 	or	local07, #3
1e954     A7 2A 42 FC | 	wrbyte	local07, fp
1e958     10 4E 85 F1 | 	sub	fp, #16
1e95c                 | ' 				cf |=  0x01  |  0x02 ;
1e95c                 | ' 				break;
1e95c     B4 02 90 FD | 	jmp	#LR__3426
1e960                 | LR__3414
1e960     28 4E 05 F1 | 	add	fp, #40
1e964     A7 2A 02 FB | 	rdlong	local07, fp
1e968     04 4E 05 F1 | 	add	fp, #4
1e96c     A7 1E 02 FB | 	rdlong	local01, fp
1e970     2C 4E 85 F1 | 	sub	fp, #44
1e974     0F 2B 0A F2 | 	cmp	local07, local01 wz
1e978     10 4E 05 51 |  if_ne	add	fp, #16
1e97c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1e980     03 2A 46 55 |  if_ne	or	local07, #3
1e984     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1e988     10 4E 85 51 |  if_ne	sub	fp, #16
1e98c     28 4E 05 F1 | 	add	fp, #40
1e990     A7 2A 02 FB | 	rdlong	local07, fp
1e994     04 4E 05 F1 | 	add	fp, #4
1e998     A7 20 02 FB | 	rdlong	local02, fp
1e99c     2C 4E 85 F1 | 	sub	fp, #44
1e9a0     10 2B 1A F2 | 	cmp	local07, local02 wcz
1e9a4     6C 02 90 1D |  if_a	jmp	#LR__3426
1e9a8     2C 4E 05 F1 | 	add	fp, #44
1e9ac     A7 2A 02 FB | 	rdlong	local07, fp
1e9b0     04 4E 85 F1 | 	sub	fp, #4
1e9b4     A7 2A 62 FC | 	wrlong	local07, fp
1e9b8     08 4E 85 F1 | 	sub	fp, #8
1e9bc     A7 10 68 FC | 	wrlong	#8, fp
1e9c0     04 4E 05 F1 | 	add	fp, #4
1e9c4     A7 16 68 FC | 	wrlong	#11, fp
1e9c8     18 4E 85 F1 | 	sub	fp, #24
1e9cc     A7 32 C2 FA | 	rdbyte	local11, fp
1e9d0     19 2B E2 F8 | 	getbyte	local07, local11, #0
1e9d4     02 2A 66 F0 | 	shl	local07, #2
1e9d8     A7 2A 42 FC | 	wrbyte	local07, fp
1e9dc     0C 4E 85 F1 | 	sub	fp, #12
1e9e0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1e9e0                 | ' 			continue;
1e9e0     80 FE 9F FD | 	jmp	#LR__3410
1e9e4                 | LR__3415
1e9e4     14 4E 05 F1 | 	add	fp, #20
1e9e8     A7 2A E2 FA | 	rdword	local07, fp
1e9ec     14 4E 85 F1 | 	sub	fp, #20
1e9f0     80 2A 16 F2 | 	cmp	local07, #128 wc
1e9f4     6C 00 90 CD |  if_b	jmp	#LR__3417
1e9f8     10 4E 05 F1 | 	add	fp, #16
1e9fc     A7 2A C2 FA | 	rdbyte	local07, fp
1ea00     02 2A 46 F5 | 	or	local07, #2
1ea04     A7 2A 42 FC | 	wrbyte	local07, fp
1ea08     04 4E 05 F1 | 	add	fp, #4
1ea0c     A7 12 E2 FA | 	rdword	arg01, fp
1ea10     14 4E 85 F1 | 	sub	fp, #20
1ea14     01 00 00 FF 
1ea18     52 15 06 F6 | 	mov	arg02, ##850
1ea1c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1ea20     14 4E 05 F1 | 	add	fp, #20
1ea24     A7 FA 51 FC | 	wrword	result1, fp
1ea28     A7 2A E2 FA | 	rdword	local07, fp
1ea2c     14 4E 85 F1 | 	sub	fp, #20
1ea30     80 2A CE F7 | 	test	local07, #128 wz
1ea34     2C 00 90 AD |  if_e	jmp	#LR__3416
1ea38     14 4E 05 F1 | 	add	fp, #20
1ea3c     A7 20 E2 FA | 	rdword	local02, fp
1ea40     7F 20 06 F5 | 	and	local02, #127
1ea44     01 00 00 FF 
1ea48     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1ea4c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1ea50     10 2B C2 FA | 	rdbyte	local07, local02
1ea54     A7 2A 52 FC | 	wrword	local07, fp
1ea58     14 4E 85 F1 | 	sub	fp, #20
1ea5c     01 00 00 FF 
1ea60     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1ea64                 | LR__3416
1ea64                 | LR__3417
1ea64     14 4E 05 F1 | 	add	fp, #20
1ea68     A7 2A E2 FA | 	rdword	local07, fp
1ea6c     14 4E 85 F1 | 	sub	fp, #20
1ea70     00 2B 16 F2 | 	cmp	local07, #256 wc
1ea74     88 00 90 CD |  if_b	jmp	#LR__3419
1ea78     24 4E 05 F1 | 	add	fp, #36
1ea7c     A7 2A 02 FB | 	rdlong	local07, fp
1ea80     01 2A 86 F1 | 	sub	local07, #1
1ea84     04 4E 85 F1 | 	sub	fp, #4
1ea88     A7 20 02 FB | 	rdlong	local02, fp
1ea8c     20 4E 85 F1 | 	sub	fp, #32
1ea90     15 21 12 F2 | 	cmp	local02, local07 wc
1ea94     2C 00 90 CD |  if_b	jmp	#LR__3418
1ea98     10 4E 05 F1 | 	add	fp, #16
1ea9c     A7 32 C2 FA | 	rdbyte	local11, fp
1eaa0     19 2B E2 F8 | 	getbyte	local07, local11, #0
1eaa4     03 2A 46 F5 | 	or	local07, #3
1eaa8     A7 2A 42 FC | 	wrbyte	local07, fp
1eaac     14 4E 05 F1 | 	add	fp, #20
1eab0     A7 2A 02 FB | 	rdlong	local07, fp
1eab4     04 4E 85 F1 | 	sub	fp, #4
1eab8     A7 2A 62 FC | 	wrlong	local07, fp
1eabc     20 4E 85 F1 | 	sub	fp, #32
1eac0                 | ' 				cf |=  0x01  |  0x02 ;
1eac0                 | ' 				i = ni; continue;
1eac0     A0 FD 9F FD | 	jmp	#LR__3410
1eac4                 | LR__3418
1eac4     04 4E 05 F1 | 	add	fp, #4
1eac8     A7 2E 02 FB | 	rdlong	local09, fp
1eacc     1C 4E 05 F1 | 	add	fp, #28
1ead0     A7 30 02 FB | 	rdlong	local10, fp
1ead4     18 25 02 F6 | 	mov	local04, local10
1ead8     01 24 06 F1 | 	add	local04, #1
1eadc     A7 24 62 FC | 	wrlong	local04, fp
1eae0     20 2E 06 F1 | 	add	local09, #32
1eae4     17 31 02 F1 | 	add	local10, local09
1eae8     0C 4E 85 F1 | 	sub	fp, #12
1eaec     A7 22 E2 FA | 	rdword	local03, fp
1eaf0     14 4E 85 F1 | 	sub	fp, #20
1eaf4     08 22 46 F0 | 	shr	local03, #8
1eaf8     18 23 42 FC | 	wrbyte	local03, local10
1eafc     D4 00 90 FD | 	jmp	#LR__3425
1eb00                 | LR__3419
1eb00     14 4E 05 F1 | 	add	fp, #20
1eb04     A7 2A EA FA | 	rdword	local07, fp wz
1eb08     14 4E 85 F1 | 	sub	fp, #20
1eb0c     20 00 90 AD |  if_e	jmp	#LR__3420
1eb10     22 01 00 FF 
1eb14     9D 12 06 F6 | 	mov	arg01, ##@LR__4053
1eb18     14 4E 05 F1 | 	add	fp, #20
1eb1c     A7 14 E2 FA | 	rdword	arg02, fp
1eb20     14 4E 85 F1 | 	sub	fp, #20
1eb24     48 CB BF FD | 	call	#_fatfs_cc_strchr
1eb28     00 FA 0D F2 | 	cmp	result1, #0 wz
1eb2c     20 00 90 AD |  if_e	jmp	#LR__3421
1eb30                 | LR__3420
1eb30     14 4E 05 F1 | 	add	fp, #20
1eb34     A7 BE 58 FC | 	wrword	#95, fp
1eb38     04 4E 85 F1 | 	sub	fp, #4
1eb3c     A7 2A C2 FA | 	rdbyte	local07, fp
1eb40     03 2A 46 F5 | 	or	local07, #3
1eb44     A7 2A 42 FC | 	wrbyte	local07, fp
1eb48     10 4E 85 F1 | 	sub	fp, #16
1eb4c     84 00 90 FD | 	jmp	#LR__3424
1eb50                 | LR__3421
1eb50     14 4E 05 F1 | 	add	fp, #20
1eb54     A7 2A E2 FA | 	rdword	local07, fp
1eb58     14 4E 85 F1 | 	sub	fp, #20
1eb5c     41 2A 16 F2 | 	cmp	local07, #65 wc
1eb60     24 00 90 CD |  if_b	jmp	#LR__3422
1eb64     14 4E 05 F1 | 	add	fp, #20
1eb68     A7 1E E2 FA | 	rdword	local01, fp
1eb6c     14 4E 85 F1 | 	sub	fp, #20
1eb70     5B 1E 16 F2 | 	cmp	local01, #91 wc
1eb74     0C 4E 05 C1 |  if_b	add	fp, #12
1eb78     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1eb7c     02 2A 46 C5 |  if_b	or	local07, #2
1eb80     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1eb84     0C 4E 85 C1 |  if_b	sub	fp, #12
1eb88                 | LR__3422
1eb88     14 4E 05 F1 | 	add	fp, #20
1eb8c     A7 2A E2 FA | 	rdword	local07, fp
1eb90     14 4E 85 F1 | 	sub	fp, #20
1eb94     61 2A 16 F2 | 	cmp	local07, #97 wc
1eb98     38 00 90 CD |  if_b	jmp	#LR__3423
1eb9c     14 4E 05 F1 | 	add	fp, #20
1eba0     A7 1E E2 FA | 	rdword	local01, fp
1eba4     14 4E 85 F1 | 	sub	fp, #20
1eba8     7B 1E 16 F2 | 	cmp	local01, #123 wc
1ebac     24 00 90 3D |  if_ae	jmp	#LR__3423
1ebb0     0C 4E 05 F1 | 	add	fp, #12
1ebb4     A7 2A C2 FA | 	rdbyte	local07, fp
1ebb8     01 2A 46 F5 | 	or	local07, #1
1ebbc     A7 2A 42 FC | 	wrbyte	local07, fp
1ebc0     08 4E 05 F1 | 	add	fp, #8
1ebc4     A7 2A E2 FA | 	rdword	local07, fp
1ebc8     20 2A 86 F1 | 	sub	local07, #32
1ebcc     A7 2A 52 FC | 	wrword	local07, fp
1ebd0     14 4E 85 F1 | 	sub	fp, #20
1ebd4                 | LR__3423
1ebd4                 | LR__3424
1ebd4                 | LR__3425
1ebd4     04 4E 05 F1 | 	add	fp, #4
1ebd8     A7 32 02 FB | 	rdlong	local11, fp
1ebdc     19 2F 02 F6 | 	mov	local09, local11
1ebe0     1C 4E 05 F1 | 	add	fp, #28
1ebe4     A7 20 02 FB | 	rdlong	local02, fp
1ebe8     10 25 02 F6 | 	mov	local04, local02
1ebec     01 24 06 F1 | 	add	local04, #1
1ebf0     A7 24 62 FC | 	wrlong	local04, fp
1ebf4     10 31 02 F6 | 	mov	local10, local02
1ebf8     20 2E 06 F1 | 	add	local09, #32
1ebfc     17 31 02 F1 | 	add	local10, local09
1ec00     0C 4E 85 F1 | 	sub	fp, #12
1ec04     A7 22 E2 FA | 	rdword	local03, fp
1ec08     14 4E 85 F1 | 	sub	fp, #20
1ec0c     18 23 42 FC | 	wrbyte	local03, local10
1ec10     50 FC 9F FD | 	jmp	#LR__3410
1ec14                 | LR__3426
1ec14     04 4E 05 F1 | 	add	fp, #4
1ec18     A7 32 02 FB | 	rdlong	local11, fp
1ec1c     04 4E 85 F1 | 	sub	fp, #4
1ec20     20 32 06 F1 | 	add	local11, #32
1ec24     19 2B C2 FA | 	rdbyte	local07, local11
1ec28     E5 2A 0E F2 | 	cmp	local07, #229 wz
1ec2c     04 4E 05 A1 |  if_e	add	fp, #4
1ec30     A7 2A 02 AB |  if_e	rdlong	local07, fp
1ec34     04 4E 85 A1 |  if_e	sub	fp, #4
1ec38     20 2A 06 A1 |  if_e	add	local07, #32
1ec3c     15 0B 48 AC |  if_e	wrbyte	#5, local07
1ec40     24 4E 05 F1 | 	add	fp, #36
1ec44     A7 2A 02 FB | 	rdlong	local07, fp
1ec48     24 4E 85 F1 | 	sub	fp, #36
1ec4c     08 2A 0E F2 | 	cmp	local07, #8 wz
1ec50     0C 4E 05 A1 |  if_e	add	fp, #12
1ec54     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1ec58     02 2A 66 A0 |  if_e	shl	local07, #2
1ec5c     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1ec60     0C 4E 85 A1 |  if_e	sub	fp, #12
1ec64     0C 4E 05 F1 | 	add	fp, #12
1ec68     A7 2A C2 FA | 	rdbyte	local07, fp
1ec6c     0C 4E 85 F1 | 	sub	fp, #12
1ec70     0C 2A 06 F5 | 	and	local07, #12
1ec74     0C 2A 0E F2 | 	cmp	local07, #12 wz
1ec78     18 00 90 AD |  if_e	jmp	#LR__3427
1ec7c     0C 4E 05 F1 | 	add	fp, #12
1ec80     A7 1E C2 FA | 	rdbyte	local01, fp
1ec84     0C 4E 85 F1 | 	sub	fp, #12
1ec88     03 1E 06 F5 | 	and	local01, #3
1ec8c     03 1E 0E F2 | 	cmp	local01, #3 wz
1ec90     14 00 90 5D |  if_ne	jmp	#LR__3428
1ec94                 | LR__3427
1ec94     10 4E 05 F1 | 	add	fp, #16
1ec98     A7 2A C2 FA | 	rdbyte	local07, fp
1ec9c     02 2A 46 F5 | 	or	local07, #2
1eca0     A7 2A 42 FC | 	wrbyte	local07, fp
1eca4     10 4E 85 F1 | 	sub	fp, #16
1eca8                 | LR__3428
1eca8     10 4E 05 F1 | 	add	fp, #16
1ecac     A7 2A C2 FA | 	rdbyte	local07, fp
1ecb0     10 4E 85 F1 | 	sub	fp, #16
1ecb4     02 2A CE F7 | 	test	local07, #2 wz
1ecb8     48 00 90 5D |  if_ne	jmp	#LR__3429
1ecbc     0C 4E 05 F1 | 	add	fp, #12
1ecc0     A7 2A C2 FA | 	rdbyte	local07, fp
1ecc4     0C 4E 85 F1 | 	sub	fp, #12
1ecc8     01 2A CE F7 | 	test	local07, #1 wz
1eccc     10 4E 05 51 |  if_ne	add	fp, #16
1ecd0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1ecd4     10 2A 46 55 |  if_ne	or	local07, #16
1ecd8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1ecdc     10 4E 85 51 |  if_ne	sub	fp, #16
1ece0     0C 4E 05 F1 | 	add	fp, #12
1ece4     A7 2A C2 FA | 	rdbyte	local07, fp
1ece8     0C 4E 85 F1 | 	sub	fp, #12
1ecec     04 2A CE F7 | 	test	local07, #4 wz
1ecf0     10 4E 05 51 |  if_ne	add	fp, #16
1ecf4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1ecf8     08 2A 46 55 |  if_ne	or	local07, #8
1ecfc     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1ed00     10 4E 85 51 |  if_ne	sub	fp, #16
1ed04                 | LR__3429
1ed04     04 4E 05 F1 | 	add	fp, #4
1ed08     A7 2A 02 FB | 	rdlong	local07, fp
1ed0c     0C 4E 05 F1 | 	add	fp, #12
1ed10     A7 1E C2 FA | 	rdbyte	local01, fp
1ed14     10 4E 85 F1 | 	sub	fp, #16
1ed18     2B 2A 06 F1 | 	add	local07, #43
1ed1c     15 1F 42 FC | 	wrbyte	local01, local07
1ed20                 | ' 	}
1ed20                 | ' 
1ed20                 | ' 	dp->fn[ 11 ] = cf;
1ed20                 | ' 
1ed20                 | ' 	return FR_OK;
1ed20     00 FA 05 F6 | 	mov	result1, #0
1ed24                 | LR__3430
1ed24     A7 F0 03 F6 | 	mov	ptra, fp
1ed28     B2 00 A0 FD | 	call	#popregs_
1ed2c                 | _fatfs_cc_create_name_ret
1ed2c     2D 00 64 FD | 	ret
1ed30                 | 
1ed30                 | _fatfs_cc_follow_path
1ed30     02 4A 05 F6 | 	mov	COUNT_, #2
1ed34     A8 00 A0 FD | 	call	#pushregs_
1ed38     18 F0 07 F1 | 	add	ptra, #24
1ed3c     04 4E 05 F1 | 	add	fp, #4
1ed40     A7 12 62 FC | 	wrlong	arg01, fp
1ed44     04 4E 05 F1 | 	add	fp, #4
1ed48     A7 14 62 FC | 	wrlong	arg02, fp
1ed4c     04 4E 85 F1 | 	sub	fp, #4
1ed50     A7 FA 01 FB | 	rdlong	result1, fp
1ed54     FD 1E 02 FB | 	rdlong	local01, result1
1ed58     10 4E 05 F1 | 	add	fp, #16
1ed5c     A7 1E 62 FC | 	wrlong	local01, fp
1ed60     14 4E 85 F1 | 	sub	fp, #20
1ed64     97 24 48 FB | 	callpa	#(@LR__3442-@LR__3440)>>2,fcache_load_ptr_
1ed68                 | ' )
1ed68                 | ' {
1ed68                 | ' 	FRESULT res;
1ed68                 | ' 	BYTE ns;
1ed68                 | ' 	FATFS *fs = dp->obj.fs;
1ed68                 | ' #line 3034 "ff.c"
1ed68                 | ' 	{
1ed68                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1ed68                 | LR__3440
1ed68     08 4E 05 F1 | 	add	fp, #8
1ed6c     A7 1E 02 FB | 	rdlong	local01, fp
1ed70     08 4E 85 F1 | 	sub	fp, #8
1ed74     0F 1F C2 FA | 	rdbyte	local01, local01
1ed78     2F 1E 0E F2 | 	cmp	local01, #47 wz
1ed7c     18 00 90 AD |  if_e	jmp	#LR__3441
1ed80     08 4E 05 F1 | 	add	fp, #8
1ed84     A7 1E 02 FB | 	rdlong	local01, fp
1ed88     08 4E 85 F1 | 	sub	fp, #8
1ed8c     0F 1F C2 FA | 	rdbyte	local01, local01
1ed90     5C 1E 0E F2 | 	cmp	local01, #92 wz
1ed94     18 00 90 5D |  if_ne	jmp	#LR__3443
1ed98                 | LR__3441
1ed98     08 4E 05 F1 | 	add	fp, #8
1ed9c     A7 1E 02 FB | 	rdlong	local01, fp
1eda0     01 1E 06 F1 | 	add	local01, #1
1eda4     A7 1E 62 FC | 	wrlong	local01, fp
1eda8     08 4E 85 F1 | 	sub	fp, #8
1edac     B8 FF 9F FD | 	jmp	#LR__3440
1edb0                 | LR__3442
1edb0                 | LR__3443
1edb0     04 4E 05 F1 | 	add	fp, #4
1edb4     A7 1E 02 FB | 	rdlong	local01, fp
1edb8     08 1E 06 F1 | 	add	local01, #8
1edbc     0F 01 68 FC | 	wrlong	#0, local01
1edc0     04 4E 05 F1 | 	add	fp, #4
1edc4     A7 1E 02 FB | 	rdlong	local01, fp
1edc8     08 4E 85 F1 | 	sub	fp, #8
1edcc     0F 1F C2 FA | 	rdbyte	local01, local01
1edd0     20 1E 16 F2 | 	cmp	local01, #32 wc
1edd4     30 00 90 3D |  if_ae	jmp	#LR__3444
1edd8     04 4E 05 F1 | 	add	fp, #4
1eddc     A7 1E 02 FB | 	rdlong	local01, fp
1ede0     2B 1E 06 F1 | 	add	local01, #43
1ede4     0F 01 49 FC | 	wrbyte	#128, local01
1ede8     A7 12 02 FB | 	rdlong	arg01, fp
1edec     04 4E 85 F1 | 	sub	fp, #4
1edf0     00 14 06 F6 | 	mov	arg02, #0
1edf4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1edf8     0C 4E 05 F1 | 	add	fp, #12
1edfc     A7 FA 61 FC | 	wrlong	result1, fp
1ee00     0C 4E 85 F1 | 	sub	fp, #12
1ee04     1C 01 90 FD | 	jmp	#LR__3448
1ee08                 | LR__3444
1ee08                 | ' 		for (;;) {
1ee08                 | LR__3445
1ee08     04 4E 05 F1 | 	add	fp, #4
1ee0c     A7 12 02 FB | 	rdlong	arg01, fp
1ee10     04 4E 05 F1 | 	add	fp, #4
1ee14     A7 14 02 F6 | 	mov	arg02, fp
1ee18     08 4E 85 F1 | 	sub	fp, #8
1ee1c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1ee20     0C 4E 05 F1 | 	add	fp, #12
1ee24     A7 FA 61 FC | 	wrlong	result1, fp
1ee28     00 FA 4D F2 | 	cmps	result1, #0 wz
1ee2c     0C 4E 85 F1 | 	sub	fp, #12
1ee30     F0 00 90 5D |  if_ne	jmp	#LR__3447
1ee34     04 4E 05 F1 | 	add	fp, #4
1ee38     A7 12 02 FB | 	rdlong	arg01, fp
1ee3c     04 4E 85 F1 | 	sub	fp, #4
1ee40     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1ee44     0C 4E 05 F1 | 	add	fp, #12
1ee48     A7 FA 61 FC | 	wrlong	result1, fp
1ee4c     08 4E 85 F1 | 	sub	fp, #8
1ee50     A7 1E 02 FB | 	rdlong	local01, fp
1ee54     2B 1E 06 F1 | 	add	local01, #43
1ee58     0F 1F C2 FA | 	rdbyte	local01, local01
1ee5c     0C 4E 05 F1 | 	add	fp, #12
1ee60     A7 1E 42 FC | 	wrbyte	local01, fp
1ee64     04 4E 85 F1 | 	sub	fp, #4
1ee68     A7 1E 0A FB | 	rdlong	local01, fp wz
1ee6c     0C 4E 85 F1 | 	sub	fp, #12
1ee70     34 00 90 AD |  if_e	jmp	#LR__3446
1ee74     0C 4E 05 F1 | 	add	fp, #12
1ee78     A7 1E 02 FB | 	rdlong	local01, fp
1ee7c     0C 4E 85 F1 | 	sub	fp, #12
1ee80     04 1E 0E F2 | 	cmp	local01, #4 wz
1ee84     9C 00 90 5D |  if_ne	jmp	#LR__3447
1ee88     10 4E 05 F1 | 	add	fp, #16
1ee8c     A7 1E C2 FA | 	rdbyte	local01, fp
1ee90     10 4E 85 F1 | 	sub	fp, #16
1ee94     04 1E CE F7 | 	test	local01, #4 wz
1ee98     0C 4E 05 A1 |  if_e	add	fp, #12
1ee9c     A7 0A 68 AC |  if_e	wrlong	#5, fp
1eea0     0C 4E 85 A1 |  if_e	sub	fp, #12
1eea4                 | ' 					}
1eea4                 | ' 				}
1eea4                 | ' 				break;
1eea4     7C 00 90 FD | 	jmp	#LR__3447
1eea8                 | LR__3446
1eea8     10 4E 05 F1 | 	add	fp, #16
1eeac     A7 1E C2 FA | 	rdbyte	local01, fp
1eeb0     10 4E 85 F1 | 	sub	fp, #16
1eeb4     04 1E CE F7 | 	test	local01, #4 wz
1eeb8     68 00 90 5D |  if_ne	jmp	#LR__3447
1eebc     04 4E 05 F1 | 	add	fp, #4
1eec0     A7 1E 02 FB | 	rdlong	local01, fp
1eec4     04 4E 85 F1 | 	sub	fp, #4
1eec8     06 1E 06 F1 | 	add	local01, #6
1eecc     0F 1F C2 FA | 	rdbyte	local01, local01
1eed0     10 1E CE F7 | 	test	local01, #16 wz
1eed4     0C 4E 05 A1 |  if_e	add	fp, #12
1eed8     A7 0A 68 AC |  if_e	wrlong	#5, fp
1eedc     0C 4E 85 A1 |  if_e	sub	fp, #12
1eee0                 | ' 				res = FR_NO_PATH; break;
1eee0     40 00 90 AD |  if_e	jmp	#LR__3447
1eee4     04 4E 05 F1 | 	add	fp, #4
1eee8     A7 20 02 FB | 	rdlong	local02, fp
1eeec     10 1F 02 F6 | 	mov	local01, local02
1eef0     10 4E 05 F1 | 	add	fp, #16
1eef4     A7 14 02 FB | 	rdlong	arg02, fp
1eef8     0A 13 02 F6 | 	mov	arg01, arg02
1eefc     34 14 06 F1 | 	add	arg02, #52
1ef00     14 4E 85 F1 | 	sub	fp, #20
1ef04     10 20 06 F1 | 	add	local02, #16
1ef08     10 21 02 FB | 	rdlong	local02, local02
1ef0c     FF 21 06 F5 | 	and	local02, #511
1ef10     10 15 02 F1 | 	add	arg02, local02
1ef14     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1ef18     08 1E 06 F1 | 	add	local01, #8
1ef1c     0F FB 61 FC | 	wrlong	result1, local01
1ef20     E4 FE 9F FD | 	jmp	#LR__3445
1ef24                 | LR__3447
1ef24                 | LR__3448
1ef24                 | ' 			}
1ef24                 | ' #line 3090 "ff.c"
1ef24                 | ' 			{
1ef24                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1ef24                 | ' 			}
1ef24                 | ' 		}
1ef24                 | ' 	}
1ef24                 | ' 
1ef24                 | ' 	return res;
1ef24     0C 4E 05 F1 | 	add	fp, #12
1ef28     A7 FA 01 FB | 	rdlong	result1, fp
1ef2c     0C 4E 85 F1 | 	sub	fp, #12
1ef30     A7 F0 03 F6 | 	mov	ptra, fp
1ef34     B2 00 A0 FD | 	call	#popregs_
1ef38                 | _fatfs_cc_follow_path_ret
1ef38     2D 00 64 FD | 	ret
1ef3c                 | 
1ef3c                 | _fatfs_cc_get_ldnumber
1ef3c     01 00 66 F6 | 	neg	_var01, #1
1ef40     09 03 0A FB | 	rdlong	_var02, arg01 wz
1ef44     01 05 02 F6 | 	mov	_var03, _var02
1ef48     01 FA 65 A6 |  if_e	neg	result1, #1
1ef4c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1ef50     97 10 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
1ef54                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1ef54                 | LR__3450
1ef54     02 07 C2 FA | 	rdbyte	_var04, _var03
1ef58     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1ef5c     20 FA 15 F2 | 	cmp	result1, #32 wc
1ef60     01 04 06 F1 | 	add	_var03, #1
1ef64     03 09 02 36 |  if_ae	mov	_var05, _var04
1ef68     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1ef6c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1ef70     E0 FF 9F 1D |  if_a	jmp	#LR__3450
1ef74                 | LR__3451
1ef74     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1ef78     3A 06 0E F2 | 	cmp	_var04, #58 wz
1ef7c     40 00 90 5D |  if_ne	jmp	#LR__3453
1ef80     01 0A 06 F6 | 	mov	_var06, #1
1ef84     01 09 C2 FA | 	rdbyte	_var05, _var02
1ef88     30 08 16 F2 | 	cmp	_var05, #48 wc
1ef8c     1C 00 90 CD |  if_b	jmp	#LR__3452
1ef90     01 09 C2 FA | 	rdbyte	_var05, _var02
1ef94     3A 08 16 F2 | 	cmp	_var05, #58 wc
1ef98     01 0D 02 C6 |  if_b	mov	_var07, _var02
1ef9c     02 0C 06 C1 |  if_b	add	_var07, #2
1efa0     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1efa4     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1efa8     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1efac                 | LR__3452
1efac     01 0A 56 F2 | 	cmps	_var06, #1 wc
1efb0     05 01 02 C6 |  if_b	mov	_var01, _var06
1efb4     09 05 62 CC |  if_b	wrlong	_var03, arg01
1efb8                 | ' 			vol = i;
1efb8                 | ' 			*path = tt;
1efb8                 | ' 		}
1efb8                 | ' 		return vol;
1efb8     00 FB 01 F6 | 	mov	result1, _var01
1efbc     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1efc0                 | LR__3453
1efc0                 | ' 	}
1efc0                 | ' #line 3170 "ff.c"
1efc0                 | ' 	vol = 0;
1efc0                 | ' 
1efc0                 | ' 	return vol;
1efc0     00 FA 05 F6 | 	mov	result1, #0
1efc4                 | _fatfs_cc_get_ldnumber_ret
1efc4     2D 00 64 FD | 	ret
1efc8                 | 
1efc8                 | _fatfs_cc_check_fs
1efc8     04 4A 05 F6 | 	mov	COUNT_, #4
1efcc     A8 00 A0 FD | 	call	#pushregs_
1efd0     09 1F 02 F6 | 	mov	local01, arg01
1efd4     03 1E 06 F1 | 	add	local01, #3
1efd8     0F 01 48 FC | 	wrbyte	#0, local01
1efdc     2D 1E 06 F1 | 	add	local01, #45
1efe0     FF FF FF FF 
1efe4     0F FF 6B FC | 	wrlong	##-1, local01
1efe8     30 1E 86 F1 | 	sub	local01, #48
1efec     0F 13 02 F6 | 	mov	arg01, local01
1eff0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1eff4     00 FA 0D F2 | 	cmp	result1, #0 wz
1eff8     04 FA 05 56 |  if_ne	mov	result1, #4
1effc     94 01 90 5D |  if_ne	jmp	#LR__3464
1f000     34 1E 06 F1 | 	add	local01, #52
1f004     0F 13 02 F6 | 	mov	arg01, local01
1f008     FE 13 06 F1 | 	add	arg01, #510
1f00c                 | ' {
1f00c                 | ' 
1f00c                 | ' 	return *((WORD*)ptr);
1f00c     09 21 E2 FA | 	rdword	local02, arg01
1f010     0F 23 C2 FA | 	rdbyte	local03, local01
1f014     34 1E 86 F1 | 	sub	local01, #52
1f018     11 25 E2 F8 | 	getbyte	local04, local03, #0
1f01c     EB 24 0E F2 | 	cmp	local04, #235 wz
1f020     11 17 02 56 |  if_ne	mov	arg03, local03
1f024     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1f028     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1f02c     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1f030     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1f034     44 01 90 5D |  if_ne	jmp	#LR__3463
1f038     10 25 32 F9 | 	getword	local04, local02, #0
1f03c     55 00 00 FF 
1f040     55 24 0E F2 | 	cmp	local04, ##43605 wz
1f044     2C 00 90 5D |  if_ne	jmp	#LR__3460
1f048     34 1E 06 F1 | 	add	local01, #52
1f04c     0F 13 02 F6 | 	mov	arg01, local01
1f050     34 1E 86 F1 | 	sub	local01, #52
1f054     52 12 06 F1 | 	add	arg01, #82
1f058     22 01 00 FF 
1f05c     A4 14 06 F6 | 	mov	arg02, ##@LR__4054
1f060     08 16 06 F6 | 	mov	arg03, #8
1f064     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1f068     00 FA 0D F2 | 	cmp	result1, #0 wz
1f06c                 | ' 			return 0;
1f06c     00 FA 05 A6 |  if_e	mov	result1, #0
1f070     20 01 90 AD |  if_e	jmp	#LR__3464
1f074                 | LR__3460
1f074     34 1E 06 F1 | 	add	local01, #52
1f078     0F 13 02 F6 | 	mov	arg01, local01
1f07c     0B 12 06 F1 | 	add	arg01, #11
1f080                 | ' {
1f080                 | ' 
1f080                 | ' 	return *((WORD*)ptr);
1f080     09 FB E1 FA | 	rdword	result1, arg01
1f084     0D 1E 06 F1 | 	add	local01, #13
1f088     0F 23 C2 FA | 	rdbyte	local03, local01
1f08c     41 1E 86 F1 | 	sub	local01, #65
1f090     FD 24 32 F9 | 	getword	local04, result1, #0
1f094     FD 14 32 F9 | 	getword	arg02, result1, #0
1f098     01 14 86 F1 | 	sub	arg02, #1
1f09c     0A 25 CA F7 | 	test	local04, arg02 wz
1f0a0     D8 00 90 5D |  if_ne	jmp	#LR__3462
1f0a4     FD 14 32 F9 | 	getword	arg02, result1, #0
1f0a8     01 00 00 FF 
1f0ac     00 14 16 F2 | 	cmp	arg02, ##512 wc
1f0b0     C8 00 90 CD |  if_b	jmp	#LR__3462
1f0b4     FD 14 32 F9 | 	getword	arg02, result1, #0
1f0b8     01 00 00 FF 
1f0bc     01 14 16 F2 | 	cmp	arg02, ##513 wc
1f0c0     B8 00 90 3D |  if_ae	jmp	#LR__3462
1f0c4     11 13 02 F6 | 	mov	arg01, local03
1f0c8     07 12 4E F7 | 	zerox	arg01, #7 wz
1f0cc     AC 00 90 AD |  if_e	jmp	#LR__3462
1f0d0     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1f0d4     11 23 E2 F8 | 	getbyte	local03, local03, #0
1f0d8     01 22 86 F1 | 	sub	local03, #1
1f0dc     11 13 CA F7 | 	test	arg01, local03 wz
1f0e0     98 00 90 5D |  if_ne	jmp	#LR__3462
1f0e4     34 1E 06 F1 | 	add	local01, #52
1f0e8     0F 13 02 F6 | 	mov	arg01, local01
1f0ec     34 1E 86 F1 | 	sub	local01, #52
1f0f0     0E 12 06 F1 | 	add	arg01, #14
1f0f4                 | ' {
1f0f4                 | ' 
1f0f4                 | ' 	return *((WORD*)ptr);
1f0f4     09 FB E9 FA | 	rdword	result1, arg01 wz
1f0f8     80 00 90 AD |  if_e	jmp	#LR__3462
1f0fc     44 1E 06 F1 | 	add	local01, #68
1f100     0F 13 C2 FA | 	rdbyte	arg01, local01
1f104     44 1E 86 F1 | 	sub	local01, #68
1f108     01 12 86 F1 | 	sub	arg01, #1
1f10c     02 12 16 F2 | 	cmp	arg01, #2 wc
1f110     68 00 90 3D |  if_ae	jmp	#LR__3462
1f114     34 1E 06 F1 | 	add	local01, #52
1f118     0F 13 02 F6 | 	mov	arg01, local01
1f11c     34 1E 86 F1 | 	sub	local01, #52
1f120     11 12 06 F1 | 	add	arg01, #17
1f124                 | ' {
1f124                 | ' 
1f124                 | ' 	return *((WORD*)ptr);
1f124     09 FB E9 FA | 	rdword	result1, arg01 wz
1f128     50 00 90 AD |  if_e	jmp	#LR__3462
1f12c     34 1E 06 F1 | 	add	local01, #52
1f130     0F 13 02 F6 | 	mov	arg01, local01
1f134     34 1E 86 F1 | 	sub	local01, #52
1f138     13 12 06 F1 | 	add	arg01, #19
1f13c                 | ' {
1f13c                 | ' 
1f13c                 | ' 	return *((WORD*)ptr);
1f13c     09 FB E1 FA | 	rdword	result1, arg01
1f140     FD 22 32 F9 | 	getword	local03, result1, #0
1f144     80 22 16 F2 | 	cmp	local03, #128 wc
1f148     20 00 90 3D |  if_ae	jmp	#LR__3461
1f14c     34 1E 06 F1 | 	add	local01, #52
1f150     0F 13 02 F6 | 	mov	arg01, local01
1f154     34 1E 86 F1 | 	sub	local01, #52
1f158     20 12 06 F1 | 	add	arg01, #32
1f15c                 | ' {
1f15c                 | ' 
1f15c                 | ' 	return *((DWORD*)ptr);
1f15c     09 FB 01 FB | 	rdlong	result1, arg01
1f160     80 00 00 FF 
1f164     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1f168     10 00 90 CD |  if_b	jmp	#LR__3462
1f16c                 | LR__3461
1f16c     4A 1E 06 F1 | 	add	local01, #74
1f170                 | ' {
1f170                 | ' 
1f170                 | ' 	return *((WORD*)ptr);
1f170     0F FB E9 FA | 	rdword	result1, local01 wz
1f174                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1f174                 | ' 			&& ld_word(fs->win +  14 ) != 0
1f174                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1f174                 | ' 			&& ld_word(fs->win +  17 ) != 0
1f174                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1f174                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1f174                 | ' 				return 0;
1f174     00 FA 05 56 |  if_ne	mov	result1, #0
1f178     18 00 90 5D |  if_ne	jmp	#LR__3464
1f17c                 | LR__3462
1f17c                 | LR__3463
1f17c                 | ' 		}
1f17c                 | ' 	}
1f17c                 | ' 	return sign == 0xAA55 ? 2 : 3;
1f17c     10 23 32 F9 | 	getword	local03, local02, #0
1f180     55 00 00 FF 
1f184     55 22 0E F2 | 	cmp	local03, ##43605 wz
1f188     02 24 06 A6 |  if_e	mov	local04, #2
1f18c     03 24 06 56 |  if_ne	mov	local04, #3
1f190     12 FB 01 F6 | 	mov	result1, local04
1f194                 | LR__3464
1f194     A7 F0 03 F6 | 	mov	ptra, fp
1f198     B2 00 A0 FD | 	call	#popregs_
1f19c                 | _fatfs_cc_check_fs_ret
1f19c     2D 00 64 FD | 	ret
1f1a0                 | 
1f1a0                 | _fatfs_cc_find_volume
1f1a0     05 4A 05 F6 | 	mov	COUNT_, #5
1f1a4     A8 00 A0 FD | 	call	#pushregs_
1f1a8     24 F0 07 F1 | 	add	ptra, #36
1f1ac     09 1F 02 F6 | 	mov	local01, arg01
1f1b0     0A 21 02 F6 | 	mov	local02, arg02
1f1b4     0F 13 02 F6 | 	mov	arg01, local01
1f1b8     00 14 06 F6 | 	mov	arg02, #0
1f1bc     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1f1c0     02 FA 0D F2 | 	cmp	result1, #2 wz
1f1c4     0C 00 90 AD |  if_e	jmp	#LR__3470
1f1c8     03 FA 15 F2 | 	cmp	result1, #3 wc
1f1cc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f1d0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3478
1f1d4                 | LR__3470
1f1d4                 | ' 	for (i = 0; i < 4; i++) {
1f1d4     00 22 06 F6 | 	mov	local03, #0
1f1d8     97 26 48 FB | 	callpa	#(@LR__3472-@LR__3471)>>2,fcache_load_ptr_
1f1dc                 | LR__3471
1f1dc     04 22 16 F2 | 	cmp	local03, #4 wc
1f1e0     44 00 90 3D |  if_ae	jmp	#LR__3473
1f1e4     11 25 02 F6 | 	mov	local04, local03
1f1e8     02 24 66 F0 | 	shl	local04, #2
1f1ec     14 4E 05 F1 | 	add	fp, #20
1f1f0     A7 24 02 F1 | 	add	local04, fp
1f1f4     34 1E 06 F1 | 	add	local01, #52
1f1f8     0F 13 02 F6 | 	mov	arg01, local01
1f1fc     34 1E 86 F1 | 	sub	local01, #52
1f200     BE 13 06 F1 | 	add	arg01, #446
1f204     11 15 02 F6 | 	mov	arg02, local03
1f208     04 14 66 F0 | 	shl	arg02, #4
1f20c     0A 13 02 F1 | 	add	arg01, arg02
1f210     08 12 06 F1 | 	add	arg01, #8
1f214                 | ' {
1f214                 | ' 
1f214                 | ' 	return *((DWORD*)ptr);
1f214     09 FB 01 FB | 	rdlong	result1, arg01
1f218     14 4E 85 F1 | 	sub	fp, #20
1f21c     12 FB 61 FC | 	wrlong	result1, local04
1f220     01 22 06 F1 | 	add	local03, #1
1f224     B4 FF 9F FD | 	jmp	#LR__3471
1f228                 | LR__3472
1f228                 | LR__3473
1f228     00 20 0E F2 | 	cmp	local02, #0 wz
1f22c     10 25 02 56 |  if_ne	mov	local04, local02
1f230     01 24 86 51 |  if_ne	sub	local04, #1
1f234     00 24 06 A6 |  if_e	mov	local04, #0
1f238     12 23 02 F6 | 	mov	local03, local04
1f23c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1f23c                 | ' 	}
1f23c                 | ' 	i = part ? part - 1 : 0;
1f23c                 | ' 	do {
1f23c                 | LR__3474
1f23c     11 25 02 F6 | 	mov	local04, local03
1f240     02 24 66 F0 | 	shl	local04, #2
1f244     14 4E 05 F1 | 	add	fp, #20
1f248     A7 24 02 F1 | 	add	local04, fp
1f24c     12 25 0A FB | 	rdlong	local04, local04 wz
1f250     14 4E 85 F1 | 	sub	fp, #20
1f254     28 00 90 AD |  if_e	jmp	#LR__3475
1f258     11 25 02 F6 | 	mov	local04, local03
1f25c     02 24 66 F0 | 	shl	local04, #2
1f260     14 4E 05 F1 | 	add	fp, #20
1f264     A7 24 02 F1 | 	add	local04, fp
1f268     12 15 02 FB | 	rdlong	arg02, local04
1f26c     0F 13 02 F6 | 	mov	arg01, local01
1f270     14 4E 85 F1 | 	sub	fp, #20
1f274     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1f278     FD 24 02 F6 | 	mov	local04, result1
1f27c     04 00 90 FD | 	jmp	#LR__3476
1f280                 | LR__3475
1f280     03 24 06 F6 | 	mov	local04, #3
1f284                 | LR__3476
1f284     12 27 02 F6 | 	mov	local05, local04
1f288     00 20 0E F2 | 	cmp	local02, #0 wz
1f28c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1f290     0C 00 90 8D |  if_c_and_z	jmp	#LR__3477
1f294     01 22 06 A1 |  if_e	add	local03, #1
1f298     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1f29c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3474
1f2a0                 | LR__3477
1f2a0                 | ' 	return fmt;
1f2a0     13 FB 01 F6 | 	mov	result1, local05
1f2a4                 | LR__3478
1f2a4     A7 F0 03 F6 | 	mov	ptra, fp
1f2a8     B2 00 A0 FD | 	call	#popregs_
1f2ac                 | _fatfs_cc_find_volume_ret
1f2ac     2D 00 64 FD | 	ret
1f2b0                 | 
1f2b0                 | _fatfs_cc_mount_volume
1f2b0     0B 4A 05 F6 | 	mov	COUNT_, #11
1f2b4     A8 00 A0 FD | 	call	#pushregs_
1f2b8     0A 1F 02 F6 | 	mov	local01, arg02
1f2bc     0B 21 02 F6 | 	mov	local02, arg03
1f2c0     0F 01 68 FC | 	wrlong	#0, local01
1f2c4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1f2c8     FD 22 02 F6 | 	mov	local03, result1
1f2cc     00 22 56 F2 | 	cmps	local03, #0 wc
1f2d0     0B FA 05 C6 |  if_b	mov	result1, #11
1f2d4     3C 05 90 CD |  if_b	jmp	#LR__3490
1f2d8     11 17 02 F6 | 	mov	arg03, local03
1f2dc     02 16 66 F0 | 	shl	arg03, #2
1f2e0     F2 16 02 F1 | 	add	arg03, objptr
1f2e4     0B 25 0A FB | 	rdlong	local04, arg03 wz
1f2e8     0C FA 05 A6 |  if_e	mov	result1, #12
1f2ec     24 05 90 AD |  if_e	jmp	#LR__3490
1f2f0     0F 25 62 FC | 	wrlong	local04, local01
1f2f4     10 21 E2 F8 | 	getbyte	local02, local02, #0
1f2f8     FE 20 06 F5 | 	and	local02, #254
1f2fc     12 17 CA FA | 	rdbyte	arg03, local04 wz
1f300     4C 00 90 AD |  if_e	jmp	#LR__3481
1f304     01 24 06 F1 | 	add	local04, #1
1f308     12 13 CA FA | 	rdbyte	arg01, local04 wz
1f30c     01 24 86 F1 | 	sub	local04, #1
1f310     01 FA 05 56 |  if_ne	mov	result1, #1
1f314                 | ' 
1f314                 | ' 	return Stat;
1f314     01 00 00 AF 
1f318     20 E4 05 A1 |  if_e	add	objptr, ##544
1f31c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f320     01 00 00 AF 
1f324     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f328     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1f32c     01 16 CE F7 | 	test	arg03, #1 wz
1f330     1C 00 90 5D |  if_ne	jmp	#LR__3480
1f334     00 20 0E F2 | 	cmp	local02, #0 wz
1f338     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1f33c     04 FA CD 57 |  if_ne	test	result1, #4 wz
1f340                 | ' 				return FR_WRITE_PROTECTED;
1f340     0A FA 05 56 |  if_ne	mov	result1, #10
1f344     CC 04 90 5D |  if_ne	jmp	#LR__3490
1f348                 | ' 			}
1f348                 | ' 			return FR_OK;
1f348     00 FA 05 F6 | 	mov	result1, #0
1f34c     C4 04 90 FD | 	jmp	#LR__3490
1f350                 | LR__3480
1f350                 | LR__3481
1f350     12 01 48 FC | 	wrbyte	#0, local04
1f354     01 24 06 F1 | 	add	local04, #1
1f358     12 23 42 FC | 	wrbyte	local03, local04
1f35c     12 13 C2 FA | 	rdbyte	arg01, local04
1f360     01 24 86 F1 | 	sub	local04, #1
1f364     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1f368     FD 16 02 F6 | 	mov	arg03, result1
1f36c     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1f370     01 26 CE F7 | 	test	local05, #1 wz
1f374                 | ' 		return FR_NOT_READY;
1f374     03 FA 05 56 |  if_ne	mov	result1, #3
1f378     98 04 90 5D |  if_ne	jmp	#LR__3490
1f37c     00 20 0E F2 | 	cmp	local02, #0 wz
1f380     0B 27 02 56 |  if_ne	mov	local05, arg03
1f384     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1f388     04 26 CE 57 |  if_ne	test	local05, #4 wz
1f38c                 | ' 		return FR_WRITE_PROTECTED;
1f38c     0A FA 05 56 |  if_ne	mov	result1, #10
1f390     80 04 90 5D |  if_ne	jmp	#LR__3490
1f394     12 13 02 F6 | 	mov	arg01, local04
1f398     00 14 06 F6 | 	mov	arg02, #0
1f39c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1f3a0     FD 12 02 F6 | 	mov	arg01, result1
1f3a4     04 12 0E F2 | 	cmp	arg01, #4 wz
1f3a8     01 FA 05 A6 |  if_e	mov	result1, #1
1f3ac     64 04 90 AD |  if_e	jmp	#LR__3490
1f3b0     02 12 16 F2 | 	cmp	arg01, #2 wc
1f3b4     0D FA 05 36 |  if_ae	mov	result1, #13
1f3b8     58 04 90 3D |  if_ae	jmp	#LR__3490
1f3bc     30 24 06 F1 | 	add	local04, #48
1f3c0     12 29 02 FB | 	rdlong	local06, local04
1f3c4     04 24 06 F1 | 	add	local04, #4
1f3c8     12 13 02 F6 | 	mov	arg01, local04
1f3cc     34 24 86 F1 | 	sub	local04, #52
1f3d0     0B 12 06 F1 | 	add	arg01, #11
1f3d4                 | ' {
1f3d4                 | ' 
1f3d4                 | ' 	return *((WORD*)ptr);
1f3d4     09 FB E1 FA | 	rdword	result1, arg01
1f3d8     01 00 00 FF 
1f3dc     00 FA 0D F2 | 	cmp	result1, ##512 wz
1f3e0     0D FA 05 56 |  if_ne	mov	result1, #13
1f3e4     2C 04 90 5D |  if_ne	jmp	#LR__3490
1f3e8     34 24 06 F1 | 	add	local04, #52
1f3ec     12 13 02 F6 | 	mov	arg01, local04
1f3f0     34 24 86 F1 | 	sub	local04, #52
1f3f4     16 12 06 F1 | 	add	arg01, #22
1f3f8                 | ' {
1f3f8                 | ' 
1f3f8                 | ' 	return *((WORD*)ptr);
1f3f8     09 FB E1 FA | 	rdword	result1, arg01
1f3fc     FD 2A 0A F6 | 	mov	local07, result1 wz
1f400     18 00 90 5D |  if_ne	jmp	#LR__3482
1f404     34 24 06 F1 | 	add	local04, #52
1f408     12 13 02 F6 | 	mov	arg01, local04
1f40c     34 24 86 F1 | 	sub	local04, #52
1f410     24 12 06 F1 | 	add	arg01, #36
1f414                 | ' {
1f414                 | ' 
1f414                 | ' 	return *((DWORD*)ptr);
1f414     09 FB 01 FB | 	rdlong	result1, arg01
1f418     FD 2A 02 F6 | 	mov	local07, result1
1f41c                 | LR__3482
1f41c     1C 24 06 F1 | 	add	local04, #28
1f420     12 2B 62 FC | 	wrlong	local07, local04
1f424     28 24 06 F1 | 	add	local04, #40
1f428     12 27 C2 FA | 	rdbyte	local05, local04
1f42c     42 24 86 F1 | 	sub	local04, #66
1f430     12 27 42 FC | 	wrbyte	local05, local04
1f434     12 27 C2 FA | 	rdbyte	local05, local04
1f438     02 24 86 F1 | 	sub	local04, #2
1f43c     01 26 0E F2 | 	cmp	local05, #1 wz
1f440     02 24 06 51 |  if_ne	add	local04, #2
1f444     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1f448     02 24 86 51 |  if_ne	sub	local04, #2
1f44c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1f450     0D FA 05 56 |  if_ne	mov	result1, #13
1f454     BC 03 90 5D |  if_ne	jmp	#LR__3490
1f458     02 24 06 F1 | 	add	local04, #2
1f45c     12 27 C2 FA | 	rdbyte	local05, local04
1f460     13 2B 02 FD | 	qmul	local07, local05
1f464     3F 24 06 F1 | 	add	local04, #63
1f468     12 27 C2 FA | 	rdbyte	local05, local04
1f46c     37 24 86 F1 | 	sub	local04, #55
1f470     12 27 52 FC | 	wrword	local05, local04
1f474     12 27 EA FA | 	rdword	local05, local04 wz
1f478     0A 24 86 F1 | 	sub	local04, #10
1f47c     18 2A 62 FD | 	getqx	local07
1f480     20 00 90 AD |  if_e	jmp	#LR__3483
1f484     0A 24 06 F1 | 	add	local04, #10
1f488     12 27 E2 FA | 	rdword	local05, local04
1f48c     13 23 32 F9 | 	getword	local03, local05, #0
1f490     0A 24 86 F1 | 	sub	local04, #10
1f494     13 27 32 F9 | 	getword	local05, local05, #0
1f498     01 26 86 F1 | 	sub	local05, #1
1f49c     13 23 CA F7 | 	test	local03, local05 wz
1f4a0     08 00 90 AD |  if_e	jmp	#LR__3484
1f4a4                 | LR__3483
1f4a4     0D FA 05 F6 | 	mov	result1, #13
1f4a8     68 03 90 FD | 	jmp	#LR__3490
1f4ac                 | LR__3484
1f4ac     34 24 06 F1 | 	add	local04, #52
1f4b0     12 13 02 F6 | 	mov	arg01, local04
1f4b4     11 12 06 F1 | 	add	arg01, #17
1f4b8                 | ' {
1f4b8                 | ' 
1f4b8                 | ' 	return *((WORD*)ptr);
1f4b8     09 FB E1 FA | 	rdword	result1, arg01
1f4bc     2C 24 86 F1 | 	sub	local04, #44
1f4c0     12 FB 51 FC | 	wrword	result1, local04
1f4c4     12 27 E2 FA | 	rdword	local05, local04
1f4c8     08 24 86 F1 | 	sub	local04, #8
1f4cc     13 13 52 F6 | 	abs	arg01, local05 wc
1f4d0     09 13 42 F8 | 	getnib	arg01, arg01, #0
1f4d4     09 13 8A F6 | 	negc	arg01, arg01 wz
1f4d8     0D FA 05 56 |  if_ne	mov	result1, #13
1f4dc     34 03 90 5D |  if_ne	jmp	#LR__3490
1f4e0     34 24 06 F1 | 	add	local04, #52
1f4e4     12 13 02 F6 | 	mov	arg01, local04
1f4e8     34 24 86 F1 | 	sub	local04, #52
1f4ec     13 12 06 F1 | 	add	arg01, #19
1f4f0                 | ' {
1f4f0                 | ' 
1f4f0                 | ' 	return *((WORD*)ptr);
1f4f0     09 FB E1 FA | 	rdword	result1, arg01
1f4f4     FD 2C 0A F6 | 	mov	local08, result1 wz
1f4f8     34 24 06 A1 |  if_e	add	local04, #52
1f4fc     12 13 02 A6 |  if_e	mov	arg01, local04
1f500     34 24 86 A1 |  if_e	sub	local04, #52
1f504     20 12 06 A1 |  if_e	add	arg01, #32
1f508                 | ' {
1f508                 | ' 
1f508                 | ' 	return *((DWORD*)ptr);
1f508     09 2D 02 AB |  if_e	rdlong	local08, arg01
1f50c     34 24 06 F1 | 	add	local04, #52
1f510     12 13 02 F6 | 	mov	arg01, local04
1f514     34 24 86 F1 | 	sub	local04, #52
1f518     0E 12 06 F1 | 	add	arg01, #14
1f51c                 | ' {
1f51c                 | ' 
1f51c                 | ' 	return *((WORD*)ptr);
1f51c     09 FB E1 FA | 	rdword	result1, arg01
1f520     FD 12 02 F6 | 	mov	arg01, result1
1f524     09 27 02 F6 | 	mov	local05, arg01
1f528     0F 26 4E F7 | 	zerox	local05, #15 wz
1f52c     0D FA 05 A6 |  if_e	mov	result1, #13
1f530     E0 02 90 AD |  if_e	jmp	#LR__3490
1f534     09 2F 32 F9 | 	getword	local09, arg01, #0
1f538     15 2F 02 F1 | 	add	local09, local07
1f53c     08 24 06 F1 | 	add	local04, #8
1f540     12 27 E2 FA | 	rdword	local05, local04
1f544     08 24 86 F1 | 	sub	local04, #8
1f548     13 27 52 F6 | 	abs	local05, local05 wc
1f54c     04 26 46 F0 | 	shr	local05, #4
1f550     13 2F 82 F3 | 	sumc	local09, local05
1f554     17 2D 12 F2 | 	cmp	local08, local09 wc
1f558     0D FA 05 C6 |  if_b	mov	result1, #13
1f55c     B4 02 90 CD |  if_b	jmp	#LR__3490
1f560     17 2D 82 F1 | 	sub	local08, local09
1f564     0A 24 06 F1 | 	add	local04, #10
1f568     12 27 E2 FA | 	rdword	local05, local04
1f56c     13 2D 12 FD | 	qdiv	local08, local05
1f570     0A 24 86 F1 | 	sub	local04, #10
1f574     18 26 62 FD | 	getqx	local05
1f578     00 26 0E F2 | 	cmp	local05, #0 wz
1f57c     0D FA 05 A6 |  if_e	mov	result1, #13
1f580     90 02 90 AD |  if_e	jmp	#LR__3490
1f584     00 30 06 F6 | 	mov	local10, #0
1f588     FF FF 07 FF 
1f58c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1f590     03 30 06 C6 |  if_b	mov	local10, #3
1f594     7F 00 00 FF 
1f598     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1f59c     02 30 06 C6 |  if_b	mov	local10, #2
1f5a0     07 00 00 FF 
1f5a4     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1f5a8     01 30 06 C6 |  if_b	mov	local10, #1
1f5ac     00 30 0E F2 | 	cmp	local10, #0 wz
1f5b0     0D FA 05 A6 |  if_e	mov	result1, #13
1f5b4     5C 02 90 AD |  if_e	jmp	#LR__3490
1f5b8     02 26 06 F1 | 	add	local05, #2
1f5bc     18 24 06 F1 | 	add	local04, #24
1f5c0     12 27 62 FC | 	wrlong	local05, local04
1f5c4     08 24 06 F1 | 	add	local04, #8
1f5c8     12 29 62 FC | 	wrlong	local06, local04
1f5cc     14 27 02 F6 | 	mov	local05, local06
1f5d0     09 13 32 F9 | 	getword	arg01, arg01, #0
1f5d4     09 27 02 F1 | 	add	local05, arg01
1f5d8     04 24 06 F1 | 	add	local04, #4
1f5dc     12 27 62 FC | 	wrlong	local05, local04
1f5e0     14 27 02 F6 | 	mov	local05, local06
1f5e4     17 27 02 F1 | 	add	local05, local09
1f5e8     08 24 06 F1 | 	add	local04, #8
1f5ec     12 27 62 FC | 	wrlong	local05, local04
1f5f0     2C 24 86 F1 | 	sub	local04, #44
1f5f4     03 30 0E F2 | 	cmp	local10, #3 wz
1f5f8     5C 00 90 5D |  if_ne	jmp	#LR__3485
1f5fc     34 24 06 F1 | 	add	local04, #52
1f600     12 13 02 F6 | 	mov	arg01, local04
1f604     34 24 86 F1 | 	sub	local04, #52
1f608     2A 12 06 F1 | 	add	arg01, #42
1f60c                 | ' {
1f60c                 | ' 
1f60c                 | ' 	return *((WORD*)ptr);
1f60c     09 FB E9 FA | 	rdword	result1, arg01 wz
1f610     0D FA 05 56 |  if_ne	mov	result1, #13
1f614     FC 01 90 5D |  if_ne	jmp	#LR__3490
1f618     08 24 06 F1 | 	add	local04, #8
1f61c     12 27 EA FA | 	rdword	local05, local04 wz
1f620     08 24 86 F1 | 	sub	local04, #8
1f624     0D FA 05 56 |  if_ne	mov	result1, #13
1f628     E8 01 90 5D |  if_ne	jmp	#LR__3490
1f62c     34 24 06 F1 | 	add	local04, #52
1f630     12 13 02 F6 | 	mov	arg01, local04
1f634     2C 12 06 F1 | 	add	arg01, #44
1f638                 | ' {
1f638                 | ' 
1f638                 | ' 	return *((DWORD*)ptr);
1f638     09 FB 01 FB | 	rdlong	result1, arg01
1f63c     0C 24 86 F1 | 	sub	local04, #12
1f640     12 FB 61 FC | 	wrlong	result1, local04
1f644     10 24 86 F1 | 	sub	local04, #16
1f648     12 33 02 FB | 	rdlong	local11, local04
1f64c     18 24 86 F1 | 	sub	local04, #24
1f650     02 32 66 F0 | 	shl	local11, #2
1f654     6C 00 90 FD | 	jmp	#LR__3487
1f658                 | LR__3485
1f658     08 24 06 F1 | 	add	local04, #8
1f65c     12 27 EA FA | 	rdword	local05, local04 wz
1f660     08 24 86 F1 | 	sub	local04, #8
1f664     0D FA 05 A6 |  if_e	mov	result1, #13
1f668     A8 01 90 AD |  if_e	jmp	#LR__3490
1f66c     24 24 06 F1 | 	add	local04, #36
1f670     12 27 02 FB | 	rdlong	local05, local04
1f674     15 27 02 F1 | 	add	local05, local07
1f678     04 24 06 F1 | 	add	local04, #4
1f67c     12 27 62 FC | 	wrlong	local05, local04
1f680     28 24 86 F1 | 	sub	local04, #40
1f684     02 30 0E F2 | 	cmp	local10, #2 wz
1f688     18 24 06 A1 |  if_e	add	local04, #24
1f68c     12 27 02 AB |  if_e	rdlong	local05, local04
1f690     18 24 86 A1 |  if_e	sub	local04, #24
1f694     01 26 66 A0 |  if_e	shl	local05, #1
1f698     24 00 90 AD |  if_e	jmp	#LR__3486
1f69c     18 24 06 F1 | 	add	local04, #24
1f6a0     12 33 02 FB | 	rdlong	local11, local04
1f6a4     19 27 02 F6 | 	mov	local05, local11
1f6a8     01 26 66 F0 | 	shl	local05, #1
1f6ac     19 27 02 F1 | 	add	local05, local11
1f6b0     01 26 46 F0 | 	shr	local05, #1
1f6b4     18 24 86 F1 | 	sub	local04, #24
1f6b8     01 32 06 F5 | 	and	local11, #1
1f6bc     19 27 02 F1 | 	add	local05, local11
1f6c0                 | LR__3486
1f6c0     13 33 02 F6 | 	mov	local11, local05
1f6c4                 | LR__3487
1f6c4     FF 33 06 F1 | 	add	local11, #511
1f6c8     09 32 46 F0 | 	shr	local11, #9
1f6cc     1C 24 06 F1 | 	add	local04, #28
1f6d0     12 17 02 FB | 	rdlong	arg03, local04
1f6d4     1C 24 86 F1 | 	sub	local04, #28
1f6d8     19 17 12 F2 | 	cmp	arg03, local11 wc
1f6dc     0D FA 05 C6 |  if_b	mov	result1, #13
1f6e0     30 01 90 CD |  if_b	jmp	#LR__3490
1f6e4     14 24 06 F1 | 	add	local04, #20
1f6e8     FF FF FF FF 
1f6ec     12 FF 6B FC | 	wrlong	##-1, local04
1f6f0     04 24 86 F1 | 	sub	local04, #4
1f6f4     FF FF FF FF 
1f6f8     12 FF 6B FC | 	wrlong	##-1, local04
1f6fc     0C 24 86 F1 | 	sub	local04, #12
1f700     12 01 49 FC | 	wrbyte	#128, local04
1f704     04 24 86 F1 | 	sub	local04, #4
1f708     03 30 0E F2 | 	cmp	local10, #3 wz
1f70c     D0 00 90 5D |  if_ne	jmp	#LR__3489
1f710     34 24 06 F1 | 	add	local04, #52
1f714     12 13 02 F6 | 	mov	arg01, local04
1f718     34 24 86 F1 | 	sub	local04, #52
1f71c     30 12 06 F1 | 	add	arg01, #48
1f720                 | ' {
1f720                 | ' 
1f720                 | ' 	return *((WORD*)ptr);
1f720     09 FB E1 FA | 	rdword	result1, arg01
1f724     FD 26 32 F9 | 	getword	local05, result1, #0
1f728     01 26 0E F2 | 	cmp	local05, #1 wz
1f72c     B0 00 90 5D |  if_ne	jmp	#LR__3489
1f730     01 28 06 F1 | 	add	local06, #1
1f734     12 13 02 F6 | 	mov	arg01, local04
1f738     14 15 02 F6 | 	mov	arg02, local06
1f73c     CC CD BF FD | 	call	#_fatfs_cc_move_window
1f740     00 FA 0D F2 | 	cmp	result1, #0 wz
1f744     98 00 90 5D |  if_ne	jmp	#LR__3489
1f748     04 24 06 F1 | 	add	local04, #4
1f74c     12 01 48 FC | 	wrbyte	#0, local04
1f750     30 24 06 F1 | 	add	local04, #48
1f754     12 13 02 F6 | 	mov	arg01, local04
1f758     34 24 86 F1 | 	sub	local04, #52
1f75c     FE 13 06 F1 | 	add	arg01, #510
1f760                 | ' {
1f760                 | ' 
1f760                 | ' 	return *((WORD*)ptr);
1f760     09 FB E1 FA | 	rdword	result1, arg01
1f764     FD 26 32 F9 | 	getword	local05, result1, #0
1f768     55 00 00 FF 
1f76c     55 26 0E F2 | 	cmp	local05, ##43605 wz
1f770     34 24 06 A1 |  if_e	add	local04, #52
1f774     12 13 02 A6 |  if_e	mov	arg01, local04
1f778     34 24 86 A1 |  if_e	sub	local04, #52
1f77c                 | ' {
1f77c                 | ' 
1f77c                 | ' 	return *((DWORD*)ptr);
1f77c     09 FB 01 AB |  if_e	rdlong	result1, arg01
1f780     A9 B0 20 AF 
1f784     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1f788     54 00 90 5D |  if_ne	jmp	#LR__3488
1f78c     34 24 06 F1 | 	add	local04, #52
1f790     12 13 02 F6 | 	mov	arg01, local04
1f794     34 24 86 F1 | 	sub	local04, #52
1f798     E4 13 06 F1 | 	add	arg01, #484
1f79c                 | ' {
1f79c                 | ' 
1f79c                 | ' 	return *((DWORD*)ptr);
1f79c     09 FB 01 FB | 	rdlong	result1, arg01
1f7a0     B9 A0 30 FF 
1f7a4     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1f7a8     34 00 90 5D |  if_ne	jmp	#LR__3488
1f7ac     34 24 06 F1 | 	add	local04, #52
1f7b0     12 13 02 F6 | 	mov	arg01, local04
1f7b4     E8 13 06 F1 | 	add	arg01, #488
1f7b8                 | ' {
1f7b8                 | ' 
1f7b8                 | ' 	return *((DWORD*)ptr);
1f7b8     09 FB 01 FB | 	rdlong	result1, arg01
1f7bc     20 24 86 F1 | 	sub	local04, #32
1f7c0     12 FB 61 FC | 	wrlong	result1, local04
1f7c4     20 24 06 F1 | 	add	local04, #32
1f7c8     12 13 02 F6 | 	mov	arg01, local04
1f7cc     EC 13 06 F1 | 	add	arg01, #492
1f7d0                 | ' {
1f7d0                 | ' 
1f7d0                 | ' 	return *((DWORD*)ptr);
1f7d0     09 FB 01 FB | 	rdlong	result1, arg01
1f7d4     24 24 86 F1 | 	sub	local04, #36
1f7d8     12 FB 61 FC | 	wrlong	result1, local04
1f7dc     10 24 86 F1 | 	sub	local04, #16
1f7e0                 | LR__3488
1f7e0                 | LR__3489
1f7e0     12 31 42 FC | 	wrbyte	local10, local04
1f7e4     04 E4 05 F1 | 	add	objptr, #4
1f7e8     F2 26 E2 FA | 	rdword	local05, objptr
1f7ec     01 26 06 F1 | 	add	local05, #1
1f7f0     F2 26 52 FC | 	wrword	local05, objptr
1f7f4     F2 32 E2 FA | 	rdword	local11, objptr
1f7f8     06 24 06 F1 | 	add	local04, #6
1f7fc     12 33 52 FC | 	wrword	local11, local04
1f800     04 E4 05 F1 | 	add	objptr, #4
1f804     06 24 06 F1 | 	add	local04, #6
1f808     12 E5 61 FC | 	wrlong	objptr, local04
1f80c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1f80c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1f80c                 | ' 			{
1f80c                 | ' 
1f80c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1f80c                 | ' 
1f80c                 | ' 
1f80c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1f80c                 | ' 
1f80c                 | ' 			}
1f80c                 | ' 		}
1f80c                 | ' 
1f80c                 | ' 
1f80c                 | ' 	}
1f80c                 | ' 
1f80c                 | ' 	fs->fs_type = (BYTE)fmt;
1f80c                 | ' 	fs->id = ++Fsid;
1f80c                 | ' 
1f80c                 | ' 	fs->lfnbuf = LfnBuf;
1f80c                 | ' #line 3567 "ff.c"
1f80c                 | ' 	return FR_OK;
1f80c     00 FA 05 F6 | 	mov	result1, #0
1f810     08 E4 85 F1 | 	sub	objptr, #8
1f814                 | LR__3490
1f814     A7 F0 03 F6 | 	mov	ptra, fp
1f818     B2 00 A0 FD | 	call	#popregs_
1f81c                 | _fatfs_cc_mount_volume_ret
1f81c     2D 00 64 FD | 	ret
1f820                 | 
1f820                 | _fatfs_cc_validate
1f820     09 01 0A F6 | 	mov	_var01, arg01 wz
1f824     09 02 06 F6 | 	mov	_var02, #9
1f828     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1f82c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1f830     50 00 90 AD |  if_e	jmp	#LR__3500
1f834     04 00 06 F1 | 	add	_var01, #4
1f838     00 07 E2 FA | 	rdword	_var04, _var01
1f83c     04 00 86 F1 | 	sub	_var01, #4
1f840     00 13 02 FB | 	rdlong	arg01, _var01
1f844     06 12 06 F1 | 	add	arg01, #6
1f848     09 FB E1 FA | 	rdword	result1, arg01
1f84c     FD 06 0A F2 | 	cmp	_var04, result1 wz
1f850     30 00 90 5D |  if_ne	jmp	#LR__3500
1f854     00 07 02 FB | 	rdlong	_var04, _var01
1f858     01 06 06 F1 | 	add	_var04, #1
1f85c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1f860     01 FA 05 56 |  if_ne	mov	result1, #1
1f864                 | ' 
1f864                 | ' 	return Stat;
1f864     01 00 00 AF 
1f868     20 E4 05 A1 |  if_e	add	objptr, ##544
1f86c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f870     01 00 00 AF 
1f874     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f878     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1f87c     01 04 CE F7 | 	test	_var03, #1 wz
1f880     00 02 06 A6 |  if_e	mov	_var02, #0
1f884                 | LR__3500
1f884     00 02 0E F2 | 	cmp	_var02, #0 wz
1f888     00 05 02 AB |  if_e	rdlong	_var03, _var01
1f88c     00 04 06 56 |  if_ne	mov	_var03, #0
1f890     0A 05 62 FC | 	wrlong	_var03, arg02
1f894                 | ' 			res = FR_OK;
1f894                 | ' 		}
1f894                 | ' 
1f894                 | ' 	}
1f894                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1f894                 | ' 	return res;
1f894     01 FB 01 F6 | 	mov	result1, _var02
1f898                 | _fatfs_cc_validate_ret
1f898     2D 00 64 FD | 	ret
1f89c                 | 
1f89c                 | _fatfs_cc_f_mount
1f89c     01 4A 05 F6 | 	mov	COUNT_, #1
1f8a0     A8 00 A0 FD | 	call	#pushregs_
1f8a4     20 F0 07 F1 | 	add	ptra, #32
1f8a8     04 4E 05 F1 | 	add	fp, #4
1f8ac     A7 12 62 FC | 	wrlong	arg01, fp
1f8b0     04 4E 05 F1 | 	add	fp, #4
1f8b4     A7 14 62 FC | 	wrlong	arg02, fp
1f8b8     04 4E 05 F1 | 	add	fp, #4
1f8bc     A7 16 42 FC | 	wrbyte	arg03, fp
1f8c0     04 4E 85 F1 | 	sub	fp, #4
1f8c4     A7 16 02 FB | 	rdlong	arg03, fp
1f8c8     14 4E 05 F1 | 	add	fp, #20
1f8cc     A7 16 62 FC | 	wrlong	arg03, fp
1f8d0     A7 12 02 F6 | 	mov	arg01, fp
1f8d4     1C 4E 85 F1 | 	sub	fp, #28
1f8d8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1f8dc     14 4E 05 F1 | 	add	fp, #20
1f8e0     A7 FA 61 FC | 	wrlong	result1, fp
1f8e4     14 4E 85 F1 | 	sub	fp, #20
1f8e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f8ec     0B FA 05 C6 |  if_b	mov	result1, #11
1f8f0     C0 00 90 CD |  if_b	jmp	#LR__3511
1f8f4     14 4E 05 F1 | 	add	fp, #20
1f8f8     A7 16 02 FB | 	rdlong	arg03, fp
1f8fc     02 16 66 F0 | 	shl	arg03, #2
1f900     F2 16 02 F1 | 	add	arg03, objptr
1f904     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1f908     04 4E 85 F1 | 	sub	fp, #4
1f90c     A7 16 62 FC | 	wrlong	arg03, fp
1f910     10 4E 85 F1 | 	sub	fp, #16
1f914     28 00 90 AD |  if_e	jmp	#LR__3510
1f918     10 4E 05 F1 | 	add	fp, #16
1f91c     A7 16 02 FB | 	rdlong	arg03, fp
1f920     10 4E 85 F1 | 	sub	fp, #16
1f924     01 16 06 F1 | 	add	arg03, #1
1f928     0B 13 C2 FA | 	rdbyte	arg01, arg03
1f92c     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1f930     10 4E 05 F1 | 	add	fp, #16
1f934     A7 16 02 FB | 	rdlong	arg03, fp
1f938     10 4E 85 F1 | 	sub	fp, #16
1f93c     0B 01 48 FC | 	wrbyte	#0, arg03
1f940                 | LR__3510
1f940     04 4E 05 F1 | 	add	fp, #4
1f944     A7 1E 0A FB | 	rdlong	local01, fp wz
1f948     04 4E 85 F1 | 	sub	fp, #4
1f94c     04 4E 05 51 |  if_ne	add	fp, #4
1f950     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1f954     04 4E 85 51 |  if_ne	sub	fp, #4
1f958     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1f95c     14 4E 05 F1 | 	add	fp, #20
1f960     A7 1E 02 FB | 	rdlong	local01, fp
1f964     02 1E 66 F0 | 	shl	local01, #2
1f968     F2 1E 02 F1 | 	add	local01, objptr
1f96c     10 4E 85 F1 | 	sub	fp, #16
1f970     A7 16 02 FB | 	rdlong	arg03, fp
1f974     0F 17 62 FC | 	wrlong	arg03, local01
1f978     08 4E 05 F1 | 	add	fp, #8
1f97c     A7 1E CA FA | 	rdbyte	local01, fp wz
1f980     0C 4E 85 F1 | 	sub	fp, #12
1f984     00 FA 05 A6 |  if_e	mov	result1, #0
1f988     28 00 90 AD |  if_e	jmp	#LR__3511
1f98c     08 4E 05 F1 | 	add	fp, #8
1f990     A7 12 02 F6 | 	mov	arg01, fp
1f994     04 4E 85 F1 | 	sub	fp, #4
1f998     A7 14 02 F6 | 	mov	arg02, fp
1f99c     04 4E 85 F1 | 	sub	fp, #4
1f9a0     00 16 06 F6 | 	mov	arg03, #0
1f9a4     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1f9a8     18 4E 05 F1 | 	add	fp, #24
1f9ac     A7 FA 61 FC | 	wrlong	result1, fp
1f9b0                 | ' 
1f9b0                 | ' 	res = mount_volume(&path, &fs, 0);
1f9b0                 | ' 	return res ;
1f9b0     18 4E 85 F1 | 	sub	fp, #24
1f9b4                 | LR__3511
1f9b4     A7 F0 03 F6 | 	mov	ptra, fp
1f9b8     B2 00 A0 FD | 	call	#popregs_
1f9bc                 | _fatfs_cc_f_mount_ret
1f9bc     2D 00 64 FD | 	ret
1f9c0                 | 
1f9c0                 | _fatfs_cc_f_open
1f9c0     02 4A 05 F6 | 	mov	COUNT_, #2
1f9c4     A8 00 A0 FD | 	call	#pushregs_
1f9c8     60 F0 07 F1 | 	add	ptra, #96
1f9cc     04 4E 05 F1 | 	add	fp, #4
1f9d0     A7 12 62 FC | 	wrlong	arg01, fp
1f9d4     04 4E 05 F1 | 	add	fp, #4
1f9d8     A7 14 62 FC | 	wrlong	arg02, fp
1f9dc     04 4E 05 F1 | 	add	fp, #4
1f9e0     A7 16 42 FC | 	wrbyte	arg03, fp
1f9e4     08 4E 85 F1 | 	sub	fp, #8
1f9e8     A7 18 0A FB | 	rdlong	arg04, fp wz
1f9ec     04 4E 85 F1 | 	sub	fp, #4
1f9f0     09 FA 05 A6 |  if_e	mov	result1, #9
1f9f4     98 06 90 AD |  if_e	jmp	#LR__3537
1f9f8     0C 4E 05 F1 | 	add	fp, #12
1f9fc     A7 18 C2 FA | 	rdbyte	arg04, fp
1fa00     3F 18 06 F5 | 	and	arg04, #63
1fa04     A7 18 42 FC | 	wrbyte	arg04, fp
1fa08     04 4E 85 F1 | 	sub	fp, #4
1fa0c     A7 12 02 F6 | 	mov	arg01, fp
1fa10     3C 4E 05 F1 | 	add	fp, #60
1fa14     A7 14 02 F6 | 	mov	arg02, fp
1fa18     38 4E 85 F1 | 	sub	fp, #56
1fa1c     A7 16 C2 FA | 	rdbyte	arg03, fp
1fa20     0C 4E 85 F1 | 	sub	fp, #12
1fa24     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1fa28     10 4E 05 F1 | 	add	fp, #16
1fa2c     A7 FA 61 FC | 	wrlong	result1, fp
1fa30     10 4E 85 F1 | 	sub	fp, #16
1fa34     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa38     2C 06 90 5D |  if_ne	jmp	#LR__3536
1fa3c     44 4E 05 F1 | 	add	fp, #68
1fa40     A7 18 02 FB | 	rdlong	arg04, fp
1fa44     30 4E 85 F1 | 	sub	fp, #48
1fa48     A7 18 62 FC | 	wrlong	arg04, fp
1fa4c     A7 12 02 F6 | 	mov	arg01, fp
1fa50     0C 4E 85 F1 | 	sub	fp, #12
1fa54     A7 1E 02 FB | 	rdlong	local01, fp
1fa58     08 4E 85 F1 | 	sub	fp, #8
1fa5c     0F 15 02 F6 | 	mov	arg02, local01
1fa60     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
1fa64     10 4E 05 F1 | 	add	fp, #16
1fa68     A7 FA 61 FC | 	wrlong	result1, fp
1fa6c     10 4E 85 F1 | 	sub	fp, #16
1fa70     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa74     1C 00 90 5D |  if_ne	jmp	#LR__3520
1fa78     3F 4E 05 F1 | 	add	fp, #63
1fa7c     A7 18 C2 FA | 	rdbyte	arg04, fp
1fa80     3F 4E 85 F1 | 	sub	fp, #63
1fa84     80 18 CE F7 | 	test	arg04, #128 wz
1fa88     10 4E 05 51 |  if_ne	add	fp, #16
1fa8c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
1fa90     10 4E 85 51 |  if_ne	sub	fp, #16
1fa94                 | LR__3520
1fa94     0C 4E 05 F1 | 	add	fp, #12
1fa98     A7 18 C2 FA | 	rdbyte	arg04, fp
1fa9c     0C 4E 85 F1 | 	sub	fp, #12
1faa0     1C 18 CE F7 | 	test	arg04, #28 wz
1faa4     F0 01 90 AD |  if_e	jmp	#LR__3525
1faa8     10 4E 05 F1 | 	add	fp, #16
1faac     A7 1E 0A FB | 	rdlong	local01, fp wz
1fab0     10 4E 85 F1 | 	sub	fp, #16
1fab4     48 00 90 AD |  if_e	jmp	#LR__3522
1fab8     10 4E 05 F1 | 	add	fp, #16
1fabc     A7 18 02 FB | 	rdlong	arg04, fp
1fac0     10 4E 85 F1 | 	sub	fp, #16
1fac4     04 18 0E F2 | 	cmp	arg04, #4 wz
1fac8     1C 00 90 5D |  if_ne	jmp	#LR__3521
1facc     14 4E 05 F1 | 	add	fp, #20
1fad0     A7 12 02 F6 | 	mov	arg01, fp
1fad4     14 4E 85 F1 | 	sub	fp, #20
1fad8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
1fadc     10 4E 05 F1 | 	add	fp, #16
1fae0     A7 FA 61 FC | 	wrlong	result1, fp
1fae4     10 4E 85 F1 | 	sub	fp, #16
1fae8                 | LR__3521
1fae8     0C 4E 05 F1 | 	add	fp, #12
1faec     A7 1E C2 FA | 	rdbyte	local01, fp
1faf0     08 1E 46 F5 | 	or	local01, #8
1faf4     A7 1E 42 FC | 	wrbyte	local01, fp
1faf8     0C 4E 85 F1 | 	sub	fp, #12
1fafc     3C 00 90 FD | 	jmp	#LR__3524
1fb00                 | LR__3522
1fb00     1A 4E 05 F1 | 	add	fp, #26
1fb04     A7 1E C2 FA | 	rdbyte	local01, fp
1fb08     1A 4E 85 F1 | 	sub	fp, #26
1fb0c     11 1E CE F7 | 	test	local01, #17 wz
1fb10     10 4E 05 51 |  if_ne	add	fp, #16
1fb14     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1fb18     10 4E 85 51 |  if_ne	sub	fp, #16
1fb1c     1C 00 90 5D |  if_ne	jmp	#LR__3523
1fb20     0C 4E 05 F1 | 	add	fp, #12
1fb24     A7 1E C2 FA | 	rdbyte	local01, fp
1fb28     0C 4E 85 F1 | 	sub	fp, #12
1fb2c     04 1E CE F7 | 	test	local01, #4 wz
1fb30     10 4E 05 51 |  if_ne	add	fp, #16
1fb34     A7 10 68 5C |  if_ne	wrlong	#8, fp
1fb38     10 4E 85 51 |  if_ne	sub	fp, #16
1fb3c                 | LR__3523
1fb3c                 | LR__3524
1fb3c     10 4E 05 F1 | 	add	fp, #16
1fb40     A7 1E 0A FB | 	rdlong	local01, fp wz
1fb44     10 4E 85 F1 | 	sub	fp, #16
1fb48     A8 01 90 5D |  if_ne	jmp	#LR__3528
1fb4c     0C 4E 05 F1 | 	add	fp, #12
1fb50     A7 1E C2 FA | 	rdbyte	local01, fp
1fb54     0C 4E 85 F1 | 	sub	fp, #12
1fb58     08 1E CE F7 | 	test	local01, #8 wz
1fb5c     94 01 90 AD |  if_e	jmp	#LR__3528
1fb60     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
1fb64     54 4E 05 F1 | 	add	fp, #84
1fb68     A7 FA 61 FC | 	wrlong	result1, fp
1fb6c     24 4E 85 F1 | 	sub	fp, #36
1fb70     A7 12 02 FB | 	rdlong	arg01, fp
1fb74     0E 12 06 F1 | 	add	arg01, #14
1fb78     09 FB 61 FC | 	wrlong	result1, arg01
1fb7c     A7 12 02 FB | 	rdlong	arg01, fp
1fb80     16 12 06 F1 | 	add	arg01, #22
1fb84     24 4E 05 F1 | 	add	fp, #36
1fb88     A7 14 02 FB | 	rdlong	arg02, fp
1fb8c     09 15 62 FC | 	wrlong	arg02, arg01
1fb90     10 4E 85 F1 | 	sub	fp, #16
1fb94     A7 12 02 FB | 	rdlong	arg01, fp
1fb98     14 4E 85 F1 | 	sub	fp, #20
1fb9c     A7 14 02 FB | 	rdlong	arg02, fp
1fba0     30 4E 85 F1 | 	sub	fp, #48
1fba4     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
1fba8     48 4E 05 F1 | 	add	fp, #72
1fbac     A7 FA 61 FC | 	wrlong	result1, fp
1fbb0     18 4E 85 F1 | 	sub	fp, #24
1fbb4     A7 1E 02 FB | 	rdlong	local01, fp
1fbb8     0B 1E 06 F1 | 	add	local01, #11
1fbbc     0F 41 48 FC | 	wrbyte	#32, local01
1fbc0     14 4E 05 F1 | 	add	fp, #20
1fbc4     A7 12 02 FB | 	rdlong	arg01, fp
1fbc8     14 4E 85 F1 | 	sub	fp, #20
1fbcc     A7 14 02 FB | 	rdlong	arg02, fp
1fbd0     30 4E 85 F1 | 	sub	fp, #48
1fbd4     00 16 06 F6 | 	mov	arg03, #0
1fbd8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
1fbdc     30 4E 05 F1 | 	add	fp, #48
1fbe0     A7 12 02 FB | 	rdlong	arg01, fp
1fbe4     1C 12 06 F1 | 	add	arg01, #28
1fbe8     09 01 68 FC | 	wrlong	#0, arg01
1fbec     14 4E 05 F1 | 	add	fp, #20
1fbf0     A7 1E 02 FB | 	rdlong	local01, fp
1fbf4     03 1E 06 F1 | 	add	local01, #3
1fbf8     0F 03 48 FC | 	wrbyte	#1, local01
1fbfc     04 4E 05 F1 | 	add	fp, #4
1fc00     A7 1E 0A FB | 	rdlong	local01, fp wz
1fc04     48 4E 85 F1 | 	sub	fp, #72
1fc08     E8 00 90 AD |  if_e	jmp	#LR__3528
1fc0c     44 4E 05 F1 | 	add	fp, #68
1fc10     A7 1E 02 FB | 	rdlong	local01, fp
1fc14     30 1E 06 F1 | 	add	local01, #48
1fc18     0F 1F 02 FB | 	rdlong	local01, local01
1fc1c     14 4E 05 F1 | 	add	fp, #20
1fc20     A7 1E 62 FC | 	wrlong	local01, fp
1fc24     44 4E 85 F1 | 	sub	fp, #68
1fc28     A7 12 02 F6 | 	mov	arg01, fp
1fc2c     34 4E 05 F1 | 	add	fp, #52
1fc30     A7 14 02 FB | 	rdlong	arg02, fp
1fc34     48 4E 85 F1 | 	sub	fp, #72
1fc38     00 16 06 F6 | 	mov	arg03, #0
1fc3c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
1fc40     10 4E 05 F1 | 	add	fp, #16
1fc44     A7 FA 61 FC | 	wrlong	result1, fp
1fc48     10 4E 85 F1 | 	sub	fp, #16
1fc4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc50     A0 00 90 5D |  if_ne	jmp	#LR__3528
1fc54     44 4E 05 F1 | 	add	fp, #68
1fc58     A7 12 02 FB | 	rdlong	arg01, fp
1fc5c     14 4E 05 F1 | 	add	fp, #20
1fc60     A7 14 02 FB | 	rdlong	arg02, fp
1fc64     58 4E 85 F1 | 	sub	fp, #88
1fc68     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
1fc6c     10 4E 05 F1 | 	add	fp, #16
1fc70     A7 FA 61 FC | 	wrlong	result1, fp
1fc74     34 4E 05 F1 | 	add	fp, #52
1fc78     A7 18 02 FB | 	rdlong	arg04, fp
1fc7c     04 4E 05 F1 | 	add	fp, #4
1fc80     A7 1E 02 FB | 	rdlong	local01, fp
1fc84     48 4E 85 F1 | 	sub	fp, #72
1fc88     01 1E 86 F1 | 	sub	local01, #1
1fc8c     10 18 06 F1 | 	add	arg04, #16
1fc90     0C 1F 62 FC | 	wrlong	local01, arg04
1fc94     5C 00 90 FD | 	jmp	#LR__3528
1fc98                 | LR__3525
1fc98     10 4E 05 F1 | 	add	fp, #16
1fc9c     A7 18 0A FB | 	rdlong	arg04, fp wz
1fca0     10 4E 85 F1 | 	sub	fp, #16
1fca4     4C 00 90 5D |  if_ne	jmp	#LR__3527
1fca8     1A 4E 05 F1 | 	add	fp, #26
1fcac     A7 18 C2 FA | 	rdbyte	arg04, fp
1fcb0     1A 4E 85 F1 | 	sub	fp, #26
1fcb4     10 18 CE F7 | 	test	arg04, #16 wz
1fcb8     10 4E 05 51 |  if_ne	add	fp, #16
1fcbc     A7 08 68 5C |  if_ne	wrlong	#4, fp
1fcc0     10 4E 85 51 |  if_ne	sub	fp, #16
1fcc4     2C 00 90 5D |  if_ne	jmp	#LR__3526
1fcc8     0C 4E 05 F1 | 	add	fp, #12
1fccc     A7 18 C2 FA | 	rdbyte	arg04, fp
1fcd0     0C 4E 85 F1 | 	sub	fp, #12
1fcd4     02 18 CE F7 | 	test	arg04, #2 wz
1fcd8     1A 4E 05 51 |  if_ne	add	fp, #26
1fcdc     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
1fce0     1A 4E 85 51 |  if_ne	sub	fp, #26
1fce4     01 1E CE 57 |  if_ne	test	local01, #1 wz
1fce8     10 4E 05 51 |  if_ne	add	fp, #16
1fcec     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1fcf0     10 4E 85 51 |  if_ne	sub	fp, #16
1fcf4                 | LR__3526
1fcf4                 | LR__3527
1fcf4                 | LR__3528
1fcf4     10 4E 05 F1 | 	add	fp, #16
1fcf8     A7 1E 0A FB | 	rdlong	local01, fp wz
1fcfc     10 4E 85 F1 | 	sub	fp, #16
1fd00     60 00 90 5D |  if_ne	jmp	#LR__3529
1fd04     0C 4E 05 F1 | 	add	fp, #12
1fd08     A7 20 C2 FA | 	rdbyte	local02, fp
1fd0c     0C 4E 85 F1 | 	sub	fp, #12
1fd10     08 20 CE F7 | 	test	local02, #8 wz
1fd14     0C 4E 05 51 |  if_ne	add	fp, #12
1fd18     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
1fd1c     40 20 46 55 |  if_ne	or	local02, #64
1fd20     A7 20 42 5C |  if_ne	wrbyte	local02, fp
1fd24     0C 4E 85 51 |  if_ne	sub	fp, #12
1fd28     04 4E 05 F1 | 	add	fp, #4
1fd2c     A7 20 02 FB | 	rdlong	local02, fp
1fd30     40 4E 05 F1 | 	add	fp, #64
1fd34     A7 1E 02 FB | 	rdlong	local01, fp
1fd38     30 1E 06 F1 | 	add	local01, #48
1fd3c     0F 1F 02 FB | 	rdlong	local01, local01
1fd40     20 20 06 F1 | 	add	local02, #32
1fd44     10 1F 62 FC | 	wrlong	local01, local02
1fd48     40 4E 85 F1 | 	sub	fp, #64
1fd4c     A7 20 02 FB | 	rdlong	local02, fp
1fd50     2C 4E 05 F1 | 	add	fp, #44
1fd54     A7 1E 02 FB | 	rdlong	local01, fp
1fd58     30 4E 85 F1 | 	sub	fp, #48
1fd5c     24 20 06 F1 | 	add	local02, #36
1fd60     10 1F 62 FC | 	wrlong	local01, local02
1fd64                 | LR__3529
1fd64     10 4E 05 F1 | 	add	fp, #16
1fd68     A7 20 0A FB | 	rdlong	local02, fp wz
1fd6c     10 4E 85 F1 | 	sub	fp, #16
1fd70     F4 02 90 5D |  if_ne	jmp	#LR__3535
1fd74     04 4E 05 F1 | 	add	fp, #4
1fd78     A7 20 02 FB | 	rdlong	local02, fp
1fd7c     40 4E 05 F1 | 	add	fp, #64
1fd80     A7 12 02 FB | 	rdlong	arg01, fp
1fd84     14 4E 85 F1 | 	sub	fp, #20
1fd88     A7 14 02 FB | 	rdlong	arg02, fp
1fd8c     30 4E 85 F1 | 	sub	fp, #48
1fd90     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
1fd94     08 20 06 F1 | 	add	local02, #8
1fd98     10 FB 61 FC | 	wrlong	result1, local02
1fd9c     04 4E 05 F1 | 	add	fp, #4
1fda0     A7 20 02 FB | 	rdlong	local02, fp
1fda4     2C 4E 05 F1 | 	add	fp, #44
1fda8     A7 12 02 FB | 	rdlong	arg01, fp
1fdac     1C 12 06 F1 | 	add	arg01, #28
1fdb0                 | ' {
1fdb0                 | ' 
1fdb0                 | ' 	return *((DWORD*)ptr);
1fdb0     09 FB 01 FB | 	rdlong	result1, arg01
1fdb4     0C 20 06 F1 | 	add	local02, #12
1fdb8     10 FB 61 FC | 	wrlong	result1, local02
1fdbc     2C 4E 85 F1 | 	sub	fp, #44
1fdc0     A7 20 02 FB | 	rdlong	local02, fp
1fdc4     40 4E 05 F1 | 	add	fp, #64
1fdc8     A7 1E 02 FB | 	rdlong	local01, fp
1fdcc     10 1F 62 FC | 	wrlong	local01, local02
1fdd0     40 4E 85 F1 | 	sub	fp, #64
1fdd4     A7 20 02 FB | 	rdlong	local02, fp
1fdd8     40 4E 05 F1 | 	add	fp, #64
1fddc     A7 1E 02 FB | 	rdlong	local01, fp
1fde0     06 1E 06 F1 | 	add	local01, #6
1fde4     0F 1F E2 FA | 	rdword	local01, local01
1fde8     04 20 06 F1 | 	add	local02, #4
1fdec     10 1F 52 FC | 	wrword	local01, local02
1fdf0     40 4E 85 F1 | 	sub	fp, #64
1fdf4     A7 20 02 FB | 	rdlong	local02, fp
1fdf8     08 4E 05 F1 | 	add	fp, #8
1fdfc     A7 1E C2 FA | 	rdbyte	local01, fp
1fe00     10 20 06 F1 | 	add	local02, #16
1fe04     10 1F 42 FC | 	wrbyte	local01, local02
1fe08     08 4E 85 F1 | 	sub	fp, #8
1fe0c     A7 20 02 FB | 	rdlong	local02, fp
1fe10     11 20 06 F1 | 	add	local02, #17
1fe14     10 01 48 FC | 	wrbyte	#0, local02
1fe18     A7 20 02 FB | 	rdlong	local02, fp
1fe1c     1C 20 06 F1 | 	add	local02, #28
1fe20     10 01 68 FC | 	wrlong	#0, local02
1fe24     A7 20 02 FB | 	rdlong	local02, fp
1fe28     14 20 06 F1 | 	add	local02, #20
1fe2c     10 01 68 FC | 	wrlong	#0, local02
1fe30     A7 12 02 FB | 	rdlong	arg01, fp
1fe34     04 4E 85 F1 | 	sub	fp, #4
1fe38     28 12 06 F1 | 	add	arg01, #40
1fe3c     00 14 06 F6 | 	mov	arg02, #0
1fe40     09 16 C6 F9 | 	decod	arg03, #9
1fe44     98 00 A0 FD | 	call	#\builtin_bytefill_
1fe48     0C 4E 05 F1 | 	add	fp, #12
1fe4c     A7 20 C2 FA | 	rdbyte	local02, fp
1fe50     0C 4E 85 F1 | 	sub	fp, #12
1fe54     20 20 CE F7 | 	test	local02, #32 wz
1fe58     0C 02 90 AD |  if_e	jmp	#LR__3534
1fe5c     04 4E 05 F1 | 	add	fp, #4
1fe60     A7 1E 02 FB | 	rdlong	local01, fp
1fe64     04 4E 85 F1 | 	sub	fp, #4
1fe68     0C 1E 06 F1 | 	add	local01, #12
1fe6c     0F 21 02 FB | 	rdlong	local02, local01
1fe70     01 20 16 F2 | 	cmp	local02, #1 wc
1fe74     F0 01 90 CD |  if_b	jmp	#LR__3534
1fe78     04 4E 05 F1 | 	add	fp, #4
1fe7c     A7 1E 02 FB | 	rdlong	local01, fp
1fe80     0F 21 02 F6 | 	mov	local02, local01
1fe84     0C 1E 06 F1 | 	add	local01, #12
1fe88     0F 1F 02 FB | 	rdlong	local01, local01
1fe8c     14 20 06 F1 | 	add	local02, #20
1fe90     10 1F 62 FC | 	wrlong	local01, local02
1fe94     40 4E 05 F1 | 	add	fp, #64
1fe98     A7 20 02 FB | 	rdlong	local02, fp
1fe9c     0A 20 06 F1 | 	add	local02, #10
1fea0     10 21 E2 FA | 	rdword	local02, local02
1fea4     09 20 66 F0 | 	shl	local02, #9
1fea8     08 4E 05 F1 | 	add	fp, #8
1feac     A7 20 62 FC | 	wrlong	local02, fp
1feb0     48 4E 85 F1 | 	sub	fp, #72
1feb4     A7 20 02 FB | 	rdlong	local02, fp
1feb8     08 20 06 F1 | 	add	local02, #8
1febc     10 1F 02 FB | 	rdlong	local01, local02
1fec0     4C 4E 05 F1 | 	add	fp, #76
1fec4     A7 1E 62 FC | 	wrlong	local01, fp
1fec8                 | ' 				fp->fptr = fp->obj.objsize;
1fec8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
1fec8                 | ' 				clst = fp->obj.sclust;
1fec8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1fec8     4C 4E 85 F1 | 	sub	fp, #76
1fecc     A7 20 02 FB | 	rdlong	local02, fp
1fed0     0C 20 06 F1 | 	add	local02, #12
1fed4     10 1F 02 FB | 	rdlong	local01, local02
1fed8     58 4E 05 F1 | 	add	fp, #88
1fedc     A7 1E 62 FC | 	wrlong	local01, fp
1fee0     5C 4E 85 F1 | 	sub	fp, #92
1fee4                 | LR__3530
1fee4     10 4E 05 F1 | 	add	fp, #16
1fee8     A7 20 0A FB | 	rdlong	local02, fp wz
1feec     10 4E 85 F1 | 	sub	fp, #16
1fef0     94 00 90 5D |  if_ne	jmp	#LR__3531
1fef4     5C 4E 05 F1 | 	add	fp, #92
1fef8     A7 20 02 FB | 	rdlong	local02, fp
1fefc     10 4E 85 F1 | 	sub	fp, #16
1ff00     A7 1E 02 FB | 	rdlong	local01, fp
1ff04     4C 4E 85 F1 | 	sub	fp, #76
1ff08     0F 21 1A F2 | 	cmp	local02, local01 wcz
1ff0c     78 00 90 ED |  if_be	jmp	#LR__3531
1ff10     04 4E 05 F1 | 	add	fp, #4
1ff14     A7 12 02 FB | 	rdlong	arg01, fp
1ff18     4C 4E 05 F1 | 	add	fp, #76
1ff1c     A7 14 02 FB | 	rdlong	arg02, fp
1ff20     50 4E 85 F1 | 	sub	fp, #80
1ff24     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
1ff28     50 4E 05 F1 | 	add	fp, #80
1ff2c     A7 FA 61 FC | 	wrlong	result1, fp
1ff30     50 4E 85 F1 | 	sub	fp, #80
1ff34     02 FA 15 F2 | 	cmp	result1, #2 wc
1ff38     10 4E 05 C1 |  if_b	add	fp, #16
1ff3c     A7 04 68 CC |  if_b	wrlong	#2, fp
1ff40     10 4E 85 C1 |  if_b	sub	fp, #16
1ff44     50 4E 05 F1 | 	add	fp, #80
1ff48     A7 20 02 FB | 	rdlong	local02, fp
1ff4c     50 4E 85 F1 | 	sub	fp, #80
1ff50     FF FF 7F FF 
1ff54     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1ff58     10 4E 05 A1 |  if_e	add	fp, #16
1ff5c     A7 02 68 AC |  if_e	wrlong	#1, fp
1ff60     10 4E 85 A1 |  if_e	sub	fp, #16
1ff64     5C 4E 05 F1 | 	add	fp, #92
1ff68     A7 20 02 FB | 	rdlong	local02, fp
1ff6c     10 4E 85 F1 | 	sub	fp, #16
1ff70     A7 1E 02 FB | 	rdlong	local01, fp
1ff74     0F 21 82 F1 | 	sub	local02, local01
1ff78     10 4E 05 F1 | 	add	fp, #16
1ff7c     A7 20 62 FC | 	wrlong	local02, fp
1ff80     5C 4E 85 F1 | 	sub	fp, #92
1ff84     5C FF 9F FD | 	jmp	#LR__3530
1ff88                 | LR__3531
1ff88     04 4E 05 F1 | 	add	fp, #4
1ff8c     A7 20 02 FB | 	rdlong	local02, fp
1ff90     4C 4E 05 F1 | 	add	fp, #76
1ff94     A7 1E 02 FB | 	rdlong	local01, fp
1ff98     18 20 06 F1 | 	add	local02, #24
1ff9c     10 1F 62 FC | 	wrlong	local01, local02
1ffa0     40 4E 85 F1 | 	sub	fp, #64
1ffa4     A7 20 0A FB | 	rdlong	local02, fp wz
1ffa8     10 4E 85 F1 | 	sub	fp, #16
1ffac     B8 00 90 5D |  if_ne	jmp	#LR__3533
1ffb0     5C 4E 05 F1 | 	add	fp, #92
1ffb4     A7 1E 02 FB | 	rdlong	local01, fp
1ffb8     5C 4E 85 F1 | 	sub	fp, #92
1ffbc     FF 1F CE F7 | 	test	local01, #511 wz
1ffc0     A4 00 90 AD |  if_e	jmp	#LR__3533
1ffc4     44 4E 05 F1 | 	add	fp, #68
1ffc8     A7 12 02 FB | 	rdlong	arg01, fp
1ffcc     0C 4E 05 F1 | 	add	fp, #12
1ffd0     A7 14 02 FB | 	rdlong	arg02, fp
1ffd4     50 4E 85 F1 | 	sub	fp, #80
1ffd8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
1ffdc     58 4E 05 F1 | 	add	fp, #88
1ffe0     A7 FA 61 FC | 	wrlong	result1, fp
1ffe4     00 FA 4D F2 | 	cmps	result1, #0 wz
1ffe8     58 4E 85 F1 | 	sub	fp, #88
1ffec     10 4E 05 A1 |  if_e	add	fp, #16
1fff0     A7 04 68 AC |  if_e	wrlong	#2, fp
1fff4     10 4E 85 A1 |  if_e	sub	fp, #16
1fff8     6C 00 90 AD |  if_e	jmp	#LR__3532
1fffc     04 4E 05 F1 | 	add	fp, #4
20000     A7 20 02 FB | 	rdlong	local02, fp
20004     54 4E 05 F1 | 	add	fp, #84
20008     A7 1E 02 FB | 	rdlong	local01, fp
2000c     04 4E 05 F1 | 	add	fp, #4
20010     A7 18 02 FB | 	rdlong	arg04, fp
20014     09 18 46 F0 | 	shr	arg04, #9
20018     0C 1F 02 F1 | 	add	local01, arg04
2001c     1C 20 06 F1 | 	add	local02, #28
20020     10 1F 62 FC | 	wrlong	local01, local02
20024     18 4E 85 F1 | 	sub	fp, #24
20028     A7 20 02 FB | 	rdlong	local02, fp
2002c     01 20 06 F1 | 	add	local02, #1
20030     10 13 C2 FA | 	rdbyte	arg01, local02
20034     40 4E 85 F1 | 	sub	fp, #64
20038     A7 20 02 FB | 	rdlong	local02, fp
2003c     10 15 02 F6 | 	mov	arg02, local02
20040     28 14 06 F1 | 	add	arg02, #40
20044     04 4E 85 F1 | 	sub	fp, #4
20048     1C 20 06 F1 | 	add	local02, #28
2004c     10 17 02 FB | 	rdlong	arg03, local02
20050     01 18 06 F6 | 	mov	arg04, #1
20054     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
20058     00 FA 0D F2 | 	cmp	result1, #0 wz
2005c     10 4E 05 51 |  if_ne	add	fp, #16
20060     A7 02 68 5C |  if_ne	wrlong	#1, fp
20064     10 4E 85 51 |  if_ne	sub	fp, #16
20068                 | LR__3532
20068                 | LR__3533
20068                 | LR__3534
20068                 | LR__3535
20068                 | LR__3536
20068     10 4E 05 F1 | 	add	fp, #16
2006c     A7 20 0A FB | 	rdlong	local02, fp wz
20070     10 4E 85 F1 | 	sub	fp, #16
20074     04 4E 05 51 |  if_ne	add	fp, #4
20078     A7 20 02 5B |  if_ne	rdlong	local02, fp
2007c     04 4E 85 51 |  if_ne	sub	fp, #4
20080     10 01 68 5C |  if_ne	wrlong	#0, local02
20084                 | ' 
20084                 | ' 	return res ;
20084     10 4E 05 F1 | 	add	fp, #16
20088     A7 FA 01 FB | 	rdlong	result1, fp
2008c     10 4E 85 F1 | 	sub	fp, #16
20090                 | LR__3537
20090     A7 F0 03 F6 | 	mov	ptra, fp
20094     B2 00 A0 FD | 	call	#popregs_
20098                 | _fatfs_cc_f_open_ret
20098     2D 00 64 FD | 	ret
2009c                 | 
2009c                 | _fatfs_cc_f_read
2009c     0E 4A 05 F6 | 	mov	COUNT_, #14
200a0     A8 00 A0 FD | 	call	#pushregs_
200a4     38 F0 07 F1 | 	add	ptra, #56
200a8     04 4E 05 F1 | 	add	fp, #4
200ac     A7 12 62 FC | 	wrlong	arg01, fp
200b0     04 4E 05 F1 | 	add	fp, #4
200b4     A7 14 62 FC | 	wrlong	arg02, fp
200b8     04 4E 05 F1 | 	add	fp, #4
200bc     A7 16 62 FC | 	wrlong	arg03, fp
200c0     04 4E 05 F1 | 	add	fp, #4
200c4     A7 18 62 FC | 	wrlong	arg04, fp
200c8     08 4E 85 F1 | 	sub	fp, #8
200cc     A7 FA 01 FB | 	rdlong	result1, fp
200d0     2C 4E 05 F1 | 	add	fp, #44
200d4     A7 FA 61 FC | 	wrlong	result1, fp
200d8     24 4E 85 F1 | 	sub	fp, #36
200dc     A7 FA 01 FB | 	rdlong	result1, fp
200e0     FD 00 68 FC | 	wrlong	#0, result1
200e4     0C 4E 85 F1 | 	sub	fp, #12
200e8     A7 12 02 FB | 	rdlong	arg01, fp
200ec     14 4E 05 F1 | 	add	fp, #20
200f0     A7 14 02 F6 | 	mov	arg02, fp
200f4     18 4E 85 F1 | 	sub	fp, #24
200f8     24 F7 BF FD | 	call	#_fatfs_cc_validate
200fc     14 4E 05 F1 | 	add	fp, #20
20100     A7 FA 61 FC | 	wrlong	result1, fp
20104     00 FA 4D F2 | 	cmps	result1, #0 wz
20108     14 4E 85 F1 | 	sub	fp, #20
2010c     20 00 90 5D |  if_ne	jmp	#LR__3540
20110     04 4E 05 F1 | 	add	fp, #4
20114     A7 14 02 FB | 	rdlong	arg02, fp
20118     11 14 06 F1 | 	add	arg02, #17
2011c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20120     10 4E 05 F1 | 	add	fp, #16
20124     A7 14 62 FC | 	wrlong	arg02, fp
20128     14 4E 85 F1 | 	sub	fp, #20
2012c     10 00 90 AD |  if_e	jmp	#LR__3541
20130                 | LR__3540
20130     14 4E 05 F1 | 	add	fp, #20
20134     A7 FA 01 FB | 	rdlong	result1, fp
20138     14 4E 85 F1 | 	sub	fp, #20
2013c     EC 05 90 FD | 	jmp	#LR__3560
20140                 | LR__3541
20140     04 4E 05 F1 | 	add	fp, #4
20144     A7 18 02 FB | 	rdlong	arg04, fp
20148     04 4E 85 F1 | 	sub	fp, #4
2014c     10 18 06 F1 | 	add	arg04, #16
20150     0C 19 C2 FA | 	rdbyte	arg04, arg04
20154     01 18 CE F7 | 	test	arg04, #1 wz
20158     07 FA 05 A6 |  if_e	mov	result1, #7
2015c     CC 05 90 AD |  if_e	jmp	#LR__3560
20160     04 4E 05 F1 | 	add	fp, #4
20164     A7 1E 02 FB | 	rdlong	local01, fp
20168     0F 21 02 F6 | 	mov	local02, local01
2016c     0C 20 06 F1 | 	add	local02, #12
20170     10 23 02 FB | 	rdlong	local03, local02
20174     14 1E 06 F1 | 	add	local01, #20
20178     0F 1F 02 FB | 	rdlong	local01, local01
2017c     0F 23 82 F1 | 	sub	local03, local01
20180     20 4E 05 F1 | 	add	fp, #32
20184     A7 22 62 FC | 	wrlong	local03, fp
20188     18 4E 85 F1 | 	sub	fp, #24
2018c     A7 24 02 FB | 	rdlong	local04, fp
20190     0C 4E 85 F1 | 	sub	fp, #12
20194     11 25 1A F2 | 	cmp	local04, local03 wcz
20198     24 4E 05 11 |  if_a	add	fp, #36
2019c     A7 24 02 1B |  if_a	rdlong	local04, fp
201a0     18 4E 85 11 |  if_a	sub	fp, #24
201a4     A7 24 62 1C |  if_a	wrlong	local04, fp
201a8     0C 4E 85 11 |  if_a	sub	fp, #12
201ac                 | ' 
201ac                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
201ac                 | LR__3542
201ac     0C 4E 05 F1 | 	add	fp, #12
201b0     A7 20 02 FB | 	rdlong	local02, fp
201b4     0C 4E 85 F1 | 	sub	fp, #12
201b8     10 25 02 F6 | 	mov	local04, local02
201bc     01 24 16 F2 | 	cmp	local04, #1 wc
201c0     64 05 90 CD |  if_b	jmp	#LR__3559
201c4     04 4E 05 F1 | 	add	fp, #4
201c8     A7 22 02 FB | 	rdlong	local03, fp
201cc     04 4E 85 F1 | 	sub	fp, #4
201d0     14 22 06 F1 | 	add	local03, #20
201d4     11 23 02 FB | 	rdlong	local03, local03
201d8     FF 23 CE F7 | 	test	local03, #511 wz
201dc     3C 04 90 5D |  if_ne	jmp	#LR__3557
201e0     04 4E 05 F1 | 	add	fp, #4
201e4     A7 1E 02 FB | 	rdlong	local01, fp
201e8     14 1E 06 F1 | 	add	local01, #20
201ec     0F 23 02 FB | 	rdlong	local03, local01
201f0     09 22 46 F0 | 	shr	local03, #9
201f4     14 4E 05 F1 | 	add	fp, #20
201f8     A7 26 02 FB | 	rdlong	local05, fp
201fc     13 29 02 F6 | 	mov	local06, local05
20200     0A 28 06 F1 | 	add	local06, #10
20204     14 2B E2 FA | 	rdword	local07, local06
20208     0A 28 86 F1 | 	sub	local06, #10
2020c     15 2D 32 F9 | 	getword	local08, local07, #0
20210     01 2C 86 F1 | 	sub	local08, #1
20214     16 23 0A F5 | 	and	local03, local08 wz
20218     18 4E 05 F1 | 	add	fp, #24
2021c     A7 22 62 FC | 	wrlong	local03, fp
20220     30 4E 85 F1 | 	sub	fp, #48
20224     E0 00 90 5D |  if_ne	jmp	#LR__3547
20228     04 4E 05 F1 | 	add	fp, #4
2022c     A7 22 02 FB | 	rdlong	local03, fp
20230     04 4E 85 F1 | 	sub	fp, #4
20234     14 22 06 F1 | 	add	local03, #20
20238     11 23 0A FB | 	rdlong	local03, local03 wz
2023c     20 00 90 5D |  if_ne	jmp	#LR__3543
20240     04 4E 05 F1 | 	add	fp, #4
20244     A7 22 02 FB | 	rdlong	local03, fp
20248     08 22 06 F1 | 	add	local03, #8
2024c     11 23 02 FB | 	rdlong	local03, local03
20250     18 4E 05 F1 | 	add	fp, #24
20254     A7 22 62 FC | 	wrlong	local03, fp
20258     1C 4E 85 F1 | 	sub	fp, #28
2025c     28 00 90 FD | 	jmp	#LR__3544
20260                 | LR__3543
20260     04 4E 05 F1 | 	add	fp, #4
20264     A7 2C 02 FB | 	rdlong	local08, fp
20268     16 13 02 F6 | 	mov	arg01, local08
2026c     04 4E 85 F1 | 	sub	fp, #4
20270     18 2C 06 F1 | 	add	local08, #24
20274     16 15 02 FB | 	rdlong	arg02, local08
20278     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2027c     1C 4E 05 F1 | 	add	fp, #28
20280     A7 FA 61 FC | 	wrlong	result1, fp
20284     1C 4E 85 F1 | 	sub	fp, #28
20288                 | LR__3544
20288     1C 4E 05 F1 | 	add	fp, #28
2028c     A7 22 02 FB | 	rdlong	local03, fp
20290     1C 4E 85 F1 | 	sub	fp, #28
20294     02 22 16 F2 | 	cmp	local03, #2 wc
20298     1C 00 90 3D |  if_ae	jmp	#LR__3545
2029c     04 4E 05 F1 | 	add	fp, #4
202a0     A7 22 02 FB | 	rdlong	local03, fp
202a4     04 4E 85 F1 | 	sub	fp, #4
202a8     11 22 06 F1 | 	add	local03, #17
202ac     11 05 48 FC | 	wrbyte	#2, local03
202b0     02 FA 05 F6 | 	mov	result1, #2
202b4     74 04 90 FD | 	jmp	#LR__3560
202b8                 | LR__3545
202b8     1C 4E 05 F1 | 	add	fp, #28
202bc     A7 22 02 FB | 	rdlong	local03, fp
202c0     1C 4E 85 F1 | 	sub	fp, #28
202c4     FF FF 7F FF 
202c8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
202cc     1C 00 90 5D |  if_ne	jmp	#LR__3546
202d0     04 4E 05 F1 | 	add	fp, #4
202d4     A7 22 02 FB | 	rdlong	local03, fp
202d8     04 4E 85 F1 | 	sub	fp, #4
202dc     11 22 06 F1 | 	add	local03, #17
202e0     11 03 48 FC | 	wrbyte	#1, local03
202e4     01 FA 05 F6 | 	mov	result1, #1
202e8     40 04 90 FD | 	jmp	#LR__3560
202ec                 | LR__3546
202ec     04 4E 05 F1 | 	add	fp, #4
202f0     A7 22 02 FB | 	rdlong	local03, fp
202f4     18 4E 05 F1 | 	add	fp, #24
202f8     A7 2C 02 FB | 	rdlong	local08, fp
202fc     1C 4E 85 F1 | 	sub	fp, #28
20300     18 22 06 F1 | 	add	local03, #24
20304     11 2D 62 FC | 	wrlong	local08, local03
20308                 | LR__3547
20308     18 4E 05 F1 | 	add	fp, #24
2030c     A7 12 02 FB | 	rdlong	arg01, fp
20310     14 4E 85 F1 | 	sub	fp, #20
20314     A7 22 02 FB | 	rdlong	local03, fp
20318     04 4E 85 F1 | 	sub	fp, #4
2031c     18 22 06 F1 | 	add	local03, #24
20320     11 15 02 FB | 	rdlong	arg02, local03
20324     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
20328     20 4E 05 F1 | 	add	fp, #32
2032c     A7 FA 61 FC | 	wrlong	result1, fp
20330     20 4E 85 F1 | 	sub	fp, #32
20334     00 FA 0D F2 | 	cmp	result1, #0 wz
20338     1C 00 90 5D |  if_ne	jmp	#LR__3548
2033c     04 4E 05 F1 | 	add	fp, #4
20340     A7 22 02 FB | 	rdlong	local03, fp
20344     04 4E 85 F1 | 	sub	fp, #4
20348     11 22 06 F1 | 	add	local03, #17
2034c     11 05 48 FC | 	wrbyte	#2, local03
20350     02 FA 05 F6 | 	mov	result1, #2
20354     D4 03 90 FD | 	jmp	#LR__3560
20358                 | LR__3548
20358     20 4E 05 F1 | 	add	fp, #32
2035c     A7 22 02 FB | 	rdlong	local03, fp
20360     10 4E 05 F1 | 	add	fp, #16
20364     A7 2C 02 FB | 	rdlong	local08, fp
20368     16 23 02 F1 | 	add	local03, local08
2036c     10 4E 85 F1 | 	sub	fp, #16
20370     A7 22 62 FC | 	wrlong	local03, fp
20374     14 4E 85 F1 | 	sub	fp, #20
20378     A7 22 02 FB | 	rdlong	local03, fp
2037c     09 22 46 F0 | 	shr	local03, #9
20380     20 4E 05 F1 | 	add	fp, #32
20384     A7 22 62 FC | 	wrlong	local03, fp
20388     2C 4E 85 F1 | 	sub	fp, #44
2038c     01 22 16 F2 | 	cmp	local03, #1 wc
20390     5C 01 90 CD |  if_b	jmp	#LR__3552
20394     30 4E 05 F1 | 	add	fp, #48
20398     A7 22 02 FB | 	rdlong	local03, fp
2039c     04 4E 85 F1 | 	sub	fp, #4
203a0     A7 2C 02 FB | 	rdlong	local08, fp
203a4     16 23 02 F1 | 	add	local03, local08
203a8     14 4E 85 F1 | 	sub	fp, #20
203ac     A7 2C 02 FB | 	rdlong	local08, fp
203b0     18 4E 85 F1 | 	sub	fp, #24
203b4     0A 2C 06 F1 | 	add	local08, #10
203b8     16 2D E2 FA | 	rdword	local08, local08
203bc     16 23 1A F2 | 	cmp	local03, local08 wcz
203c0     28 00 90 ED |  if_be	jmp	#LR__3549
203c4     18 4E 05 F1 | 	add	fp, #24
203c8     A7 1E 02 FB | 	rdlong	local01, fp
203cc     0A 1E 06 F1 | 	add	local01, #10
203d0     0F 23 E2 FA | 	rdword	local03, local01
203d4     18 4E 05 F1 | 	add	fp, #24
203d8     A7 2C 02 FB | 	rdlong	local08, fp
203dc     16 23 82 F1 | 	sub	local03, local08
203e0     04 4E 85 F1 | 	sub	fp, #4
203e4     A7 22 62 FC | 	wrlong	local03, fp
203e8     2C 4E 85 F1 | 	sub	fp, #44
203ec                 | LR__3549
203ec     18 4E 05 F1 | 	add	fp, #24
203f0     A7 1E 02 FB | 	rdlong	local01, fp
203f4     01 1E 06 F1 | 	add	local01, #1
203f8     0F 13 C2 FA | 	rdbyte	arg01, local01
203fc     1C 4E 05 F1 | 	add	fp, #28
20400     A7 14 02 FB | 	rdlong	arg02, fp
20404     14 4E 85 F1 | 	sub	fp, #20
20408     A7 16 02 FB | 	rdlong	arg03, fp
2040c     0C 4E 05 F1 | 	add	fp, #12
20410     A7 18 02 FB | 	rdlong	arg04, fp
20414     2C 4E 85 F1 | 	sub	fp, #44
20418     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2041c     00 FA 0D F2 | 	cmp	result1, #0 wz
20420     1C 00 90 AD |  if_e	jmp	#LR__3550
20424     04 4E 05 F1 | 	add	fp, #4
20428     A7 22 02 FB | 	rdlong	local03, fp
2042c     04 4E 85 F1 | 	sub	fp, #4
20430     11 22 06 F1 | 	add	local03, #17
20434     11 03 48 FC | 	wrbyte	#1, local03
20438     01 FA 05 F6 | 	mov	result1, #1
2043c     EC 02 90 FD | 	jmp	#LR__3560
20440                 | LR__3550
20440     04 4E 05 F1 | 	add	fp, #4
20444     A7 1E 02 FB | 	rdlong	local01, fp
20448     04 4E 85 F1 | 	sub	fp, #4
2044c     10 1E 06 F1 | 	add	local01, #16
20450     0F 23 C2 FA | 	rdbyte	local03, local01
20454     80 22 CE F7 | 	test	local03, #128 wz
20458     78 00 90 AD |  if_e	jmp	#LR__3551
2045c     04 4E 05 F1 | 	add	fp, #4
20460     A7 2C 02 FB | 	rdlong	local08, fp
20464     1C 2C 06 F1 | 	add	local08, #28
20468     16 2D 02 FB | 	rdlong	local08, local08
2046c     1C 4E 05 F1 | 	add	fp, #28
20470     A7 2E 02 FB | 	rdlong	local09, fp
20474     17 2D 82 F1 | 	sub	local08, local09
20478     0C 4E 05 F1 | 	add	fp, #12
2047c     A7 30 02 FB | 	rdlong	local10, fp
20480     2C 4E 85 F1 | 	sub	fp, #44
20484     18 33 02 F6 | 	mov	local11, local10
20488     19 2D 12 F2 | 	cmp	local08, local11 wc
2048c     44 00 90 3D |  if_ae	jmp	#LR__3551
20490     34 4E 05 F1 | 	add	fp, #52
20494     A7 12 02 FB | 	rdlong	arg01, fp
20498     30 4E 85 F1 | 	sub	fp, #48
2049c     A7 14 02 FB | 	rdlong	arg02, fp
204a0     0A 33 02 F6 | 	mov	local11, arg02
204a4     1C 32 06 F1 | 	add	local11, #28
204a8     19 2F 02 FB | 	rdlong	local09, local11
204ac     1C 4E 05 F1 | 	add	fp, #28
204b0     A7 26 02 FB | 	rdlong	local05, fp
204b4     13 2F 82 F1 | 	sub	local09, local05
204b8     09 2E 66 F0 | 	shl	local09, #9
204bc     17 33 02 F6 | 	mov	local11, local09
204c0     17 13 02 F1 | 	add	arg01, local09
204c4     20 4E 85 F1 | 	sub	fp, #32
204c8     28 14 06 F1 | 	add	arg02, #40
204cc     09 16 C6 F9 | 	decod	arg03, #9
204d0     A0 4C BF FD | 	call	#__system____builtin_memmove
204d4                 | LR__3551
204d4     2C 4E 05 F1 | 	add	fp, #44
204d8     A7 22 02 FB | 	rdlong	local03, fp
204dc     09 22 66 F0 | 	shl	local03, #9
204e0     04 4E 85 F1 | 	sub	fp, #4
204e4     A7 22 62 FC | 	wrlong	local03, fp
204e8     28 4E 85 F1 | 	sub	fp, #40
204ec                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
204ec                 | ' 				}
204ec                 | ' 
204ec                 | ' 
204ec                 | ' 				rcnt =  ((UINT) 512 )  * cc;
204ec                 | ' 				continue;
204ec     B4 01 90 FD | 	jmp	#LR__3558
204f0                 | LR__3552
204f0     04 4E 05 F1 | 	add	fp, #4
204f4     A7 22 02 FB | 	rdlong	local03, fp
204f8     1C 22 06 F1 | 	add	local03, #28
204fc     11 23 02 FB | 	rdlong	local03, local03
20500     1C 4E 05 F1 | 	add	fp, #28
20504     A7 1E 02 FB | 	rdlong	local01, fp
20508     20 4E 85 F1 | 	sub	fp, #32
2050c     0F 23 0A F2 | 	cmp	local03, local01 wz
20510     EC 00 90 AD |  if_e	jmp	#LR__3556
20514     04 4E 05 F1 | 	add	fp, #4
20518     A7 1E 02 FB | 	rdlong	local01, fp
2051c     04 4E 85 F1 | 	sub	fp, #4
20520     10 1E 06 F1 | 	add	local01, #16
20524     0F 23 C2 FA | 	rdbyte	local03, local01
20528     80 22 CE F7 | 	test	local03, #128 wz
2052c     7C 00 90 AD |  if_e	jmp	#LR__3554
20530     18 4E 05 F1 | 	add	fp, #24
20534     A7 1E 02 FB | 	rdlong	local01, fp
20538     01 1E 06 F1 | 	add	local01, #1
2053c     0F 13 C2 FA | 	rdbyte	arg01, local01
20540     14 4E 85 F1 | 	sub	fp, #20
20544     A7 22 02 FB | 	rdlong	local03, fp
20548     11 15 02 F6 | 	mov	arg02, local03
2054c     28 14 06 F1 | 	add	arg02, #40
20550     04 4E 85 F1 | 	sub	fp, #4
20554     1C 22 06 F1 | 	add	local03, #28
20558     11 17 02 FB | 	rdlong	arg03, local03
2055c     01 18 06 F6 | 	mov	arg04, #1
20560     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
20564     00 FA 0D F2 | 	cmp	result1, #0 wz
20568     1C 00 90 AD |  if_e	jmp	#LR__3553
2056c     04 4E 05 F1 | 	add	fp, #4
20570     A7 22 02 FB | 	rdlong	local03, fp
20574     04 4E 85 F1 | 	sub	fp, #4
20578     11 22 06 F1 | 	add	local03, #17
2057c     11 03 48 FC | 	wrbyte	#1, local03
20580     01 FA 05 F6 | 	mov	result1, #1
20584     A4 01 90 FD | 	jmp	#LR__3560
20588                 | LR__3553
20588     04 4E 05 F1 | 	add	fp, #4
2058c     A7 32 02 FB | 	rdlong	local11, fp
20590     19 23 02 F6 | 	mov	local03, local11
20594     04 4E 85 F1 | 	sub	fp, #4
20598     10 32 06 F1 | 	add	local11, #16
2059c     19 33 C2 FA | 	rdbyte	local11, local11
205a0     7F 32 06 F5 | 	and	local11, #127
205a4     10 22 06 F1 | 	add	local03, #16
205a8     11 33 42 FC | 	wrbyte	local11, local03
205ac                 | LR__3554
205ac     18 4E 05 F1 | 	add	fp, #24
205b0     A7 1E 02 FB | 	rdlong	local01, fp
205b4     01 1E 06 F1 | 	add	local01, #1
205b8     0F 13 C2 FA | 	rdbyte	arg01, local01
205bc     14 4E 85 F1 | 	sub	fp, #20
205c0     A7 14 02 FB | 	rdlong	arg02, fp
205c4     28 14 06 F1 | 	add	arg02, #40
205c8     1C 4E 05 F1 | 	add	fp, #28
205cc     A7 16 02 FB | 	rdlong	arg03, fp
205d0     20 4E 85 F1 | 	sub	fp, #32
205d4     01 18 06 F6 | 	mov	arg04, #1
205d8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
205dc     00 FA 0D F2 | 	cmp	result1, #0 wz
205e0     1C 00 90 AD |  if_e	jmp	#LR__3555
205e4     04 4E 05 F1 | 	add	fp, #4
205e8     A7 22 02 FB | 	rdlong	local03, fp
205ec     04 4E 85 F1 | 	sub	fp, #4
205f0     11 22 06 F1 | 	add	local03, #17
205f4     11 03 48 FC | 	wrbyte	#1, local03
205f8     01 FA 05 F6 | 	mov	result1, #1
205fc     2C 01 90 FD | 	jmp	#LR__3560
20600                 | LR__3555
20600                 | LR__3556
20600     04 4E 05 F1 | 	add	fp, #4
20604     A7 22 02 FB | 	rdlong	local03, fp
20608     1C 4E 05 F1 | 	add	fp, #28
2060c     A7 32 02 FB | 	rdlong	local11, fp
20610     20 4E 85 F1 | 	sub	fp, #32
20614     1C 22 06 F1 | 	add	local03, #28
20618     11 33 62 FC | 	wrlong	local11, local03
2061c                 | LR__3557
2061c     04 4E 05 F1 | 	add	fp, #4
20620     A7 1E 02 FB | 	rdlong	local01, fp
20624     14 1E 06 F1 | 	add	local01, #20
20628     0F 33 02 FB | 	rdlong	local11, local01
2062c     FF 33 06 F5 | 	and	local11, #511
20630     09 22 C6 F9 | 	decod	local03, #9
20634     19 23 82 F1 | 	sub	local03, local11
20638     24 4E 05 F1 | 	add	fp, #36
2063c     A7 22 62 FC | 	wrlong	local03, fp
20640     1C 4E 85 F1 | 	sub	fp, #28
20644     A7 32 02 FB | 	rdlong	local11, fp
20648     0C 4E 85 F1 | 	sub	fp, #12
2064c     19 23 1A F2 | 	cmp	local03, local11 wcz
20650     0C 4E 05 11 |  if_a	add	fp, #12
20654     A7 22 02 1B |  if_a	rdlong	local03, fp
20658     1C 4E 05 11 |  if_a	add	fp, #28
2065c     A7 22 62 1C |  if_a	wrlong	local03, fp
20660     28 4E 85 11 |  if_a	sub	fp, #40
20664     34 4E 05 F1 | 	add	fp, #52
20668     A7 12 02 FB | 	rdlong	arg01, fp
2066c     30 4E 85 F1 | 	sub	fp, #48
20670     A7 28 02 FB | 	rdlong	local06, fp
20674     14 15 02 F6 | 	mov	arg02, local06
20678     28 14 06 F1 | 	add	arg02, #40
2067c     14 28 06 F1 | 	add	local06, #20
20680     14 33 02 FB | 	rdlong	local11, local06
20684     19 2F 02 F6 | 	mov	local09, local11
20688     17 31 02 F6 | 	mov	local10, local09
2068c     FF 31 06 F5 | 	and	local10, #511
20690     18 15 02 F1 | 	add	arg02, local10
20694     24 4E 05 F1 | 	add	fp, #36
20698     A7 16 02 FB | 	rdlong	arg03, fp
2069c     28 4E 85 F1 | 	sub	fp, #40
206a0     D0 4A BF FD | 	call	#__system____builtin_memmove
206a4                 | LR__3558
206a4     0C 4E 05 F1 | 	add	fp, #12
206a8     A7 22 02 FB | 	rdlong	local03, fp
206ac     1C 4E 05 F1 | 	add	fp, #28
206b0     A7 2C 02 FB | 	rdlong	local08, fp
206b4     16 23 82 F1 | 	sub	local03, local08
206b8     1C 4E 85 F1 | 	sub	fp, #28
206bc     A7 22 62 FC | 	wrlong	local03, fp
206c0     04 4E 05 F1 | 	add	fp, #4
206c4     A7 1E 02 FB | 	rdlong	local01, fp
206c8     0F 2B 02 FB | 	rdlong	local07, local01
206cc     18 4E 05 F1 | 	add	fp, #24
206d0     A7 2C 02 FB | 	rdlong	local08, fp
206d4     16 2B 02 F1 | 	add	local07, local08
206d8     0F 2B 62 FC | 	wrlong	local07, local01
206dc     0C 4E 05 F1 | 	add	fp, #12
206e0     A7 22 02 FB | 	rdlong	local03, fp
206e4     0C 4E 85 F1 | 	sub	fp, #12
206e8     A7 34 02 FB | 	rdlong	local12, fp
206ec     1A 23 02 F1 | 	add	local03, local12
206f0     0C 4E 05 F1 | 	add	fp, #12
206f4     A7 22 62 FC | 	wrlong	local03, fp
206f8     30 4E 85 F1 | 	sub	fp, #48
206fc     A7 36 02 FB | 	rdlong	local13, fp
20700     1B 23 02 F6 | 	mov	local03, local13
20704     14 36 06 F1 | 	add	local13, #20
20708     1B 39 02 FB | 	rdlong	local14, local13
2070c     24 4E 05 F1 | 	add	fp, #36
20710     A7 28 02 FB | 	rdlong	local06, fp
20714     28 4E 85 F1 | 	sub	fp, #40
20718     14 39 02 F1 | 	add	local14, local06
2071c     14 22 06 F1 | 	add	local03, #20
20720     11 39 62 FC | 	wrlong	local14, local03
20724     84 FA 9F FD | 	jmp	#LR__3542
20728                 | LR__3559
20728                 | ' 
20728                 | ' 
20728                 | ' 
20728                 | ' 
20728                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
20728                 | ' 
20728                 | ' 	}
20728                 | ' 
20728                 | ' 	return FR_OK ;
20728     00 FA 05 F6 | 	mov	result1, #0
2072c                 | LR__3560
2072c     A7 F0 03 F6 | 	mov	ptra, fp
20730     B2 00 A0 FD | 	call	#popregs_
20734                 | _fatfs_cc_f_read_ret
20734     2D 00 64 FD | 	ret
20738                 | 
20738                 | _fatfs_cc_f_write
20738     15 4A 05 F6 | 	mov	COUNT_, #21
2073c     A8 00 A0 FD | 	call	#pushregs_
20740     34 F0 07 F1 | 	add	ptra, #52
20744     04 4E 05 F1 | 	add	fp, #4
20748     A7 12 62 FC | 	wrlong	arg01, fp
2074c     04 4E 05 F1 | 	add	fp, #4
20750     A7 14 62 FC | 	wrlong	arg02, fp
20754     04 4E 05 F1 | 	add	fp, #4
20758     A7 16 62 FC | 	wrlong	arg03, fp
2075c     04 4E 05 F1 | 	add	fp, #4
20760     A7 18 62 FC | 	wrlong	arg04, fp
20764     08 4E 85 F1 | 	sub	fp, #8
20768     A7 FA 01 FB | 	rdlong	result1, fp
2076c     28 4E 05 F1 | 	add	fp, #40
20770     A7 FA 61 FC | 	wrlong	result1, fp
20774     20 4E 85 F1 | 	sub	fp, #32
20778     A7 FA 01 FB | 	rdlong	result1, fp
2077c     FD 00 68 FC | 	wrlong	#0, result1
20780     0C 4E 85 F1 | 	sub	fp, #12
20784     A7 12 02 FB | 	rdlong	arg01, fp
20788     14 4E 05 F1 | 	add	fp, #20
2078c     A7 14 02 F6 | 	mov	arg02, fp
20790     18 4E 85 F1 | 	sub	fp, #24
20794     88 F0 BF FD | 	call	#_fatfs_cc_validate
20798     14 4E 05 F1 | 	add	fp, #20
2079c     A7 FA 61 FC | 	wrlong	result1, fp
207a0     00 FA 4D F2 | 	cmps	result1, #0 wz
207a4     14 4E 85 F1 | 	sub	fp, #20
207a8     20 00 90 5D |  if_ne	jmp	#LR__3570
207ac     04 4E 05 F1 | 	add	fp, #4
207b0     A7 14 02 FB | 	rdlong	arg02, fp
207b4     11 14 06 F1 | 	add	arg02, #17
207b8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
207bc     10 4E 05 F1 | 	add	fp, #16
207c0     A7 14 62 FC | 	wrlong	arg02, fp
207c4     14 4E 85 F1 | 	sub	fp, #20
207c8     10 00 90 AD |  if_e	jmp	#LR__3571
207cc                 | LR__3570
207cc     14 4E 05 F1 | 	add	fp, #20
207d0     A7 FA 01 FB | 	rdlong	result1, fp
207d4     14 4E 85 F1 | 	sub	fp, #20
207d8     44 07 90 FD | 	jmp	#LR__3593
207dc                 | LR__3571
207dc     04 4E 05 F1 | 	add	fp, #4
207e0     A7 14 02 FB | 	rdlong	arg02, fp
207e4     04 4E 85 F1 | 	sub	fp, #4
207e8     10 14 06 F1 | 	add	arg02, #16
207ec     0A 15 C2 FA | 	rdbyte	arg02, arg02
207f0     02 14 CE F7 | 	test	arg02, #2 wz
207f4     07 FA 05 A6 |  if_e	mov	result1, #7
207f8     24 07 90 AD |  if_e	jmp	#LR__3593
207fc     04 4E 05 F1 | 	add	fp, #4
20800     A7 14 02 FB | 	rdlong	arg02, fp
20804     0A 13 02 F6 | 	mov	arg01, arg02
20808     14 12 06 F1 | 	add	arg01, #20
2080c     09 13 02 FB | 	rdlong	arg01, arg01
20810     08 4E 05 F1 | 	add	fp, #8
20814     A7 FA 01 FB | 	rdlong	result1, fp
20818     FD 12 02 F1 | 	add	arg01, result1
2081c     0C 4E 85 F1 | 	sub	fp, #12
20820     14 14 06 F1 | 	add	arg02, #20
20824     0A FB 01 FB | 	rdlong	result1, arg02
20828     FD 12 12 F2 | 	cmp	arg01, result1 wc
2082c     24 00 90 3D |  if_ae	jmp	#LR__3572
20830     04 4E 05 F1 | 	add	fp, #4
20834     A7 14 02 FB | 	rdlong	arg02, fp
20838     01 FA 65 F6 | 	neg	result1, #1
2083c     14 14 06 F1 | 	add	arg02, #20
20840     0A 15 02 FB | 	rdlong	arg02, arg02
20844     0A FB 81 F1 | 	sub	result1, arg02
20848     08 4E 05 F1 | 	add	fp, #8
2084c     A7 FA 61 FC | 	wrlong	result1, fp
20850     0C 4E 85 F1 | 	sub	fp, #12
20854                 | LR__3572
20854                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20854                 | ' 	}
20854                 | ' 
20854                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20854                 | LR__3573
20854     0C 4E 05 F1 | 	add	fp, #12
20858     A7 FA 01 FB | 	rdlong	result1, fp
2085c     0C 4E 85 F1 | 	sub	fp, #12
20860     01 FA 15 F2 | 	cmp	result1, #1 wc
20864     90 06 90 CD |  if_b	jmp	#LR__3592
20868     04 4E 05 F1 | 	add	fp, #4
2086c     A7 FA 01 FB | 	rdlong	result1, fp
20870     04 4E 85 F1 | 	sub	fp, #4
20874     14 FA 05 F1 | 	add	result1, #20
20878     FD FA 01 FB | 	rdlong	result1, result1
2087c     FF FB CD F7 | 	test	result1, #511 wz
20880     D8 04 90 5D |  if_ne	jmp	#LR__3588
20884     04 4E 05 F1 | 	add	fp, #4
20888     A7 FA 01 FB | 	rdlong	result1, fp
2088c     14 FA 05 F1 | 	add	result1, #20
20890     FD FA 01 FB | 	rdlong	result1, result1
20894     09 FA 45 F0 | 	shr	result1, #9
20898     14 4E 05 F1 | 	add	fp, #20
2089c     A7 14 02 FB | 	rdlong	arg02, fp
208a0     0A 14 06 F1 | 	add	arg02, #10
208a4     0A 19 E2 FA | 	rdword	arg04, arg02
208a8     0C 15 32 F9 | 	getword	arg02, arg04, #0
208ac     01 14 86 F1 | 	sub	arg02, #1
208b0     0A FB 09 F5 | 	and	result1, arg02 wz
208b4     14 4E 05 F1 | 	add	fp, #20
208b8     A7 FA 61 FC | 	wrlong	result1, fp
208bc     2C 4E 85 F1 | 	sub	fp, #44
208c0     44 01 90 5D |  if_ne	jmp	#LR__3579
208c4     04 4E 05 F1 | 	add	fp, #4
208c8     A7 FA 01 FB | 	rdlong	result1, fp
208cc     04 4E 85 F1 | 	sub	fp, #4
208d0     14 FA 05 F1 | 	add	result1, #20
208d4     FD 14 0A FB | 	rdlong	arg02, result1 wz
208d8     44 00 90 5D |  if_ne	jmp	#LR__3574
208dc     04 4E 05 F1 | 	add	fp, #4
208e0     A7 14 02 FB | 	rdlong	arg02, fp
208e4     08 14 06 F1 | 	add	arg02, #8
208e8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
208ec     18 4E 05 F1 | 	add	fp, #24
208f0     A7 14 62 FC | 	wrlong	arg02, fp
208f4     1C 4E 85 F1 | 	sub	fp, #28
208f8     4C 00 90 5D |  if_ne	jmp	#LR__3575
208fc     04 4E 05 F1 | 	add	fp, #4
20900     A7 12 02 FB | 	rdlong	arg01, fp
20904     04 4E 85 F1 | 	sub	fp, #4
20908     00 14 06 F6 | 	mov	arg02, #0
2090c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
20910     1C 4E 05 F1 | 	add	fp, #28
20914     A7 FA 61 FC | 	wrlong	result1, fp
20918     1C 4E 85 F1 | 	sub	fp, #28
2091c     28 00 90 FD | 	jmp	#LR__3575
20920                 | LR__3574
20920     04 4E 05 F1 | 	add	fp, #4
20924     A7 18 02 FB | 	rdlong	arg04, fp
20928     0C 13 02 F6 | 	mov	arg01, arg04
2092c     04 4E 85 F1 | 	sub	fp, #4
20930     18 18 06 F1 | 	add	arg04, #24
20934     0C 15 02 FB | 	rdlong	arg02, arg04
20938     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2093c     1C 4E 05 F1 | 	add	fp, #28
20940     A7 FA 61 FC | 	wrlong	result1, fp
20944     1C 4E 85 F1 | 	sub	fp, #28
20948                 | LR__3575
20948     1C 4E 05 F1 | 	add	fp, #28
2094c     A7 FA 09 FB | 	rdlong	result1, fp wz
20950     1C 4E 85 F1 | 	sub	fp, #28
20954     A0 05 90 AD |  if_e	jmp	#LR__3592
20958     1C 4E 05 F1 | 	add	fp, #28
2095c     A7 FA 01 FB | 	rdlong	result1, fp
20960     1C 4E 85 F1 | 	sub	fp, #28
20964     01 FA 0D F2 | 	cmp	result1, #1 wz
20968     1C 00 90 5D |  if_ne	jmp	#LR__3576
2096c     04 4E 05 F1 | 	add	fp, #4
20970     A7 FA 01 FB | 	rdlong	result1, fp
20974     04 4E 85 F1 | 	sub	fp, #4
20978     11 FA 05 F1 | 	add	result1, #17
2097c     FD 04 48 FC | 	wrbyte	#2, result1
20980     02 FA 05 F6 | 	mov	result1, #2
20984     98 05 90 FD | 	jmp	#LR__3593
20988                 | LR__3576
20988     1C 4E 05 F1 | 	add	fp, #28
2098c     A7 FA 01 FB | 	rdlong	result1, fp
20990     1C 4E 85 F1 | 	sub	fp, #28
20994     FF FF 7F FF 
20998     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2099c     1C 00 90 5D |  if_ne	jmp	#LR__3577
209a0     04 4E 05 F1 | 	add	fp, #4
209a4     A7 FA 01 FB | 	rdlong	result1, fp
209a8     04 4E 85 F1 | 	sub	fp, #4
209ac     11 FA 05 F1 | 	add	result1, #17
209b0     FD 02 48 FC | 	wrbyte	#1, result1
209b4     01 FA 05 F6 | 	mov	result1, #1
209b8     64 05 90 FD | 	jmp	#LR__3593
209bc                 | LR__3577
209bc     04 4E 05 F1 | 	add	fp, #4
209c0     A7 FA 01 FB | 	rdlong	result1, fp
209c4     18 4E 05 F1 | 	add	fp, #24
209c8     A7 18 02 FB | 	rdlong	arg04, fp
209cc     18 FA 05 F1 | 	add	result1, #24
209d0     FD 18 62 FC | 	wrlong	arg04, result1
209d4     18 4E 85 F1 | 	sub	fp, #24
209d8     A7 FA 01 FB | 	rdlong	result1, fp
209dc     04 4E 85 F1 | 	sub	fp, #4
209e0     08 FA 05 F1 | 	add	result1, #8
209e4     FD FA 09 FB | 	rdlong	result1, result1 wz
209e8     1C 00 90 5D |  if_ne	jmp	#LR__3578
209ec     04 4E 05 F1 | 	add	fp, #4
209f0     A7 18 02 FB | 	rdlong	arg04, fp
209f4     18 4E 05 F1 | 	add	fp, #24
209f8     A7 FA 01 FB | 	rdlong	result1, fp
209fc     1C 4E 85 F1 | 	sub	fp, #28
20a00     08 18 06 F1 | 	add	arg04, #8
20a04     0C FB 61 FC | 	wrlong	result1, arg04
20a08                 | LR__3578
20a08                 | LR__3579
20a08     04 4E 05 F1 | 	add	fp, #4
20a0c     A7 18 02 FB | 	rdlong	arg04, fp
20a10     04 4E 85 F1 | 	sub	fp, #4
20a14     10 18 06 F1 | 	add	arg04, #16
20a18     0C 19 C2 FA | 	rdbyte	arg04, arg04
20a1c     80 18 CE F7 | 	test	arg04, #128 wz
20a20     7C 00 90 AD |  if_e	jmp	#LR__3581
20a24     18 4E 05 F1 | 	add	fp, #24
20a28     A7 18 02 FB | 	rdlong	arg04, fp
20a2c     01 18 06 F1 | 	add	arg04, #1
20a30     0C 13 C2 FA | 	rdbyte	arg01, arg04
20a34     14 4E 85 F1 | 	sub	fp, #20
20a38     A7 18 02 FB | 	rdlong	arg04, fp
20a3c     0C 15 02 F6 | 	mov	arg02, arg04
20a40     28 14 06 F1 | 	add	arg02, #40
20a44     04 4E 85 F1 | 	sub	fp, #4
20a48     1C 18 06 F1 | 	add	arg04, #28
20a4c     0C 17 02 FB | 	rdlong	arg03, arg04
20a50     01 18 06 F6 | 	mov	arg04, #1
20a54     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
20a58     00 FA 0D F2 | 	cmp	result1, #0 wz
20a5c     1C 00 90 AD |  if_e	jmp	#LR__3580
20a60     04 4E 05 F1 | 	add	fp, #4
20a64     A7 FA 01 FB | 	rdlong	result1, fp
20a68     04 4E 85 F1 | 	sub	fp, #4
20a6c     11 FA 05 F1 | 	add	result1, #17
20a70     FD 02 48 FC | 	wrbyte	#1, result1
20a74     01 FA 05 F6 | 	mov	result1, #1
20a78     A4 04 90 FD | 	jmp	#LR__3593
20a7c                 | LR__3580
20a7c     04 4E 05 F1 | 	add	fp, #4
20a80     A7 18 02 FB | 	rdlong	arg04, fp
20a84     0C FB 01 F6 | 	mov	result1, arg04
20a88     04 4E 85 F1 | 	sub	fp, #4
20a8c     10 18 06 F1 | 	add	arg04, #16
20a90     0C 19 C2 FA | 	rdbyte	arg04, arg04
20a94     7F 18 06 F5 | 	and	arg04, #127
20a98     10 FA 05 F1 | 	add	result1, #16
20a9c     FD 18 42 FC | 	wrbyte	arg04, result1
20aa0                 | LR__3581
20aa0     18 4E 05 F1 | 	add	fp, #24
20aa4     A7 12 02 FB | 	rdlong	arg01, fp
20aa8     14 4E 85 F1 | 	sub	fp, #20
20aac     A7 14 02 FB | 	rdlong	arg02, fp
20ab0     04 4E 85 F1 | 	sub	fp, #4
20ab4     18 14 06 F1 | 	add	arg02, #24
20ab8     0A 15 02 FB | 	rdlong	arg02, arg02
20abc     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
20ac0     20 4E 05 F1 | 	add	fp, #32
20ac4     A7 FA 61 FC | 	wrlong	result1, fp
20ac8     20 4E 85 F1 | 	sub	fp, #32
20acc     00 FA 0D F2 | 	cmp	result1, #0 wz
20ad0     1C 00 90 5D |  if_ne	jmp	#LR__3582
20ad4     04 4E 05 F1 | 	add	fp, #4
20ad8     A7 FA 01 FB | 	rdlong	result1, fp
20adc     04 4E 85 F1 | 	sub	fp, #4
20ae0     11 FA 05 F1 | 	add	result1, #17
20ae4     FD 04 48 FC | 	wrbyte	#2, result1
20ae8     02 FA 05 F6 | 	mov	result1, #2
20aec     30 04 90 FD | 	jmp	#LR__3593
20af0                 | LR__3582
20af0     20 4E 05 F1 | 	add	fp, #32
20af4     A7 FA 01 FB | 	rdlong	result1, fp
20af8     0C 4E 05 F1 | 	add	fp, #12
20afc     A7 1E 02 FB | 	rdlong	local01, fp
20b00     0F FB 01 F1 | 	add	result1, local01
20b04     0C 4E 85 F1 | 	sub	fp, #12
20b08     A7 FA 61 FC | 	wrlong	result1, fp
20b0c     14 4E 85 F1 | 	sub	fp, #20
20b10     A7 FA 01 FB | 	rdlong	result1, fp
20b14     09 FA 45 F0 | 	shr	result1, #9
20b18     1C 4E 05 F1 | 	add	fp, #28
20b1c     A7 FA 61 FC | 	wrlong	result1, fp
20b20     28 4E 85 F1 | 	sub	fp, #40
20b24     01 FA 15 F2 | 	cmp	result1, #1 wc
20b28     60 01 90 CD |  if_b	jmp	#LR__3586
20b2c     2C 4E 05 F1 | 	add	fp, #44
20b30     A7 FA 01 FB | 	rdlong	result1, fp
20b34     04 4E 85 F1 | 	sub	fp, #4
20b38     A7 18 02 FB | 	rdlong	arg04, fp
20b3c     0C FB 01 F1 | 	add	result1, arg04
20b40     10 4E 85 F1 | 	sub	fp, #16
20b44     A7 18 02 FB | 	rdlong	arg04, fp
20b48     18 4E 85 F1 | 	sub	fp, #24
20b4c     0A 18 06 F1 | 	add	arg04, #10
20b50     0C 19 E2 FA | 	rdword	arg04, arg04
20b54     0C FB 19 F2 | 	cmp	result1, arg04 wcz
20b58     28 00 90 ED |  if_be	jmp	#LR__3583
20b5c     18 4E 05 F1 | 	add	fp, #24
20b60     A7 FA 01 FB | 	rdlong	result1, fp
20b64     0A FA 05 F1 | 	add	result1, #10
20b68     FD FA E1 FA | 	rdword	result1, result1
20b6c     14 4E 05 F1 | 	add	fp, #20
20b70     A7 18 02 FB | 	rdlong	arg04, fp
20b74     0C FB 81 F1 | 	sub	result1, arg04
20b78     04 4E 85 F1 | 	sub	fp, #4
20b7c     A7 FA 61 FC | 	wrlong	result1, fp
20b80     28 4E 85 F1 | 	sub	fp, #40
20b84                 | LR__3583
20b84     18 4E 05 F1 | 	add	fp, #24
20b88     A7 18 02 FB | 	rdlong	arg04, fp
20b8c     01 18 06 F1 | 	add	arg04, #1
20b90     0C 13 C2 FA | 	rdbyte	arg01, arg04
20b94     18 4E 05 F1 | 	add	fp, #24
20b98     A7 14 02 FB | 	rdlong	arg02, fp
20b9c     10 4E 85 F1 | 	sub	fp, #16
20ba0     A7 16 02 FB | 	rdlong	arg03, fp
20ba4     08 4E 05 F1 | 	add	fp, #8
20ba8     A7 18 02 FB | 	rdlong	arg04, fp
20bac     28 4E 85 F1 | 	sub	fp, #40
20bb0     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
20bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
20bb8     1C 00 90 AD |  if_e	jmp	#LR__3584
20bbc     04 4E 05 F1 | 	add	fp, #4
20bc0     A7 1E 02 FB | 	rdlong	local01, fp
20bc4     04 4E 85 F1 | 	sub	fp, #4
20bc8     11 1E 06 F1 | 	add	local01, #17
20bcc     0F 03 48 FC | 	wrbyte	#1, local01
20bd0     01 FA 05 F6 | 	mov	result1, #1
20bd4     48 03 90 FD | 	jmp	#LR__3593
20bd8                 | LR__3584
20bd8     04 4E 05 F1 | 	add	fp, #4
20bdc     A7 FA 01 FB | 	rdlong	result1, fp
20be0     1C FA 05 F1 | 	add	result1, #28
20be4     FD FA 01 FB | 	rdlong	result1, result1
20be8     1C 4E 05 F1 | 	add	fp, #28
20bec     A7 20 02 FB | 	rdlong	local02, fp
20bf0     10 FB 81 F1 | 	sub	result1, local02
20bf4     08 4E 05 F1 | 	add	fp, #8
20bf8     A7 18 02 FB | 	rdlong	arg04, fp
20bfc     28 4E 85 F1 | 	sub	fp, #40
20c00     0C FB 11 F2 | 	cmp	result1, arg04 wc
20c04     68 00 90 3D |  if_ae	jmp	#LR__3585
20c08     04 4E 05 F1 | 	add	fp, #4
20c0c     A7 12 02 FB | 	rdlong	arg01, fp
20c10     28 12 06 F1 | 	add	arg01, #40
20c14     2C 4E 05 F1 | 	add	fp, #44
20c18     A7 14 02 FB | 	rdlong	arg02, fp
20c1c     2C 4E 85 F1 | 	sub	fp, #44
20c20     A7 FA 01 FB | 	rdlong	result1, fp
20c24     1C FA 05 F1 | 	add	result1, #28
20c28     FD 22 02 FB | 	rdlong	local03, result1
20c2c     1C 4E 05 F1 | 	add	fp, #28
20c30     A7 18 02 FB | 	rdlong	arg04, fp
20c34     20 4E 85 F1 | 	sub	fp, #32
20c38     0C 23 82 F1 | 	sub	local03, arg04
20c3c     09 22 66 F0 | 	shl	local03, #9
20c40     11 15 02 F1 | 	add	arg02, local03
20c44     09 16 C6 F9 | 	decod	arg03, #9
20c48     28 45 BF FD | 	call	#__system____builtin_memmove
20c4c     04 4E 05 F1 | 	add	fp, #4
20c50     A7 18 02 FB | 	rdlong	arg04, fp
20c54     0C FB 01 F6 | 	mov	result1, arg04
20c58     04 4E 85 F1 | 	sub	fp, #4
20c5c     10 18 06 F1 | 	add	arg04, #16
20c60     0C 19 C2 FA | 	rdbyte	arg04, arg04
20c64     7F 18 06 F5 | 	and	arg04, #127
20c68     10 FA 05 F1 | 	add	result1, #16
20c6c     FD 18 42 FC | 	wrbyte	arg04, result1
20c70                 | LR__3585
20c70     28 4E 05 F1 | 	add	fp, #40
20c74     A7 FA 01 FB | 	rdlong	result1, fp
20c78     09 FA 65 F0 | 	shl	result1, #9
20c7c     04 4E 85 F1 | 	sub	fp, #4
20c80     A7 FA 61 FC | 	wrlong	result1, fp
20c84     24 4E 85 F1 | 	sub	fp, #36
20c88                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
20c88                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
20c88                 | ' 				}
20c88                 | ' 
20c88                 | ' 
20c88                 | ' 				wcnt =  ((UINT) 512 )  * cc;
20c88                 | ' 				continue;
20c88     74 01 90 FD | 	jmp	#LR__3589
20c8c                 | LR__3586
20c8c     04 4E 05 F1 | 	add	fp, #4
20c90     A7 20 02 FB | 	rdlong	local02, fp
20c94     1C 20 06 F1 | 	add	local02, #28
20c98     10 FB 01 FB | 	rdlong	result1, local02
20c9c     1C 4E 05 F1 | 	add	fp, #28
20ca0     A7 20 02 FB | 	rdlong	local02, fp
20ca4     20 4E 85 F1 | 	sub	fp, #32
20ca8     10 FB 09 F2 | 	cmp	result1, local02 wz
20cac     90 00 90 AD |  if_e	jmp	#LR__3587
20cb0     04 4E 05 F1 | 	add	fp, #4
20cb4     A7 FA 01 FB | 	rdlong	result1, fp
20cb8     FD 22 02 F6 | 	mov	local03, result1
20cbc     04 4E 85 F1 | 	sub	fp, #4
20cc0     14 22 06 F1 | 	add	local03, #20
20cc4     11 23 02 FB | 	rdlong	local03, local03
20cc8     0C FA 05 F1 | 	add	result1, #12
20ccc     FD 24 02 FB | 	rdlong	local04, result1
20cd0     12 27 02 F6 | 	mov	local05, local04
20cd4     13 23 12 F2 | 	cmp	local03, local05 wc
20cd8     64 00 90 3D |  if_ae	jmp	#LR__3587
20cdc     18 4E 05 F1 | 	add	fp, #24
20ce0     A7 18 02 FB | 	rdlong	arg04, fp
20ce4     01 18 06 F1 | 	add	arg04, #1
20ce8     0C 13 C2 FA | 	rdbyte	arg01, arg04
20cec     14 4E 85 F1 | 	sub	fp, #20
20cf0     A7 28 02 FB | 	rdlong	local06, fp
20cf4     28 28 06 F1 | 	add	local06, #40
20cf8     14 2B 02 F6 | 	mov	local07, local06
20cfc     1C 4E 05 F1 | 	add	fp, #28
20d00     A7 2C 02 FB | 	rdlong	local08, fp
20d04     20 4E 85 F1 | 	sub	fp, #32
20d08     01 2E 06 F6 | 	mov	local09, #1
20d0c     15 15 02 F6 | 	mov	arg02, local07
20d10     16 17 02 F6 | 	mov	arg03, local08
20d14     01 18 06 F6 | 	mov	arg04, #1
20d18     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
20d1c     FD 30 0A F6 | 	mov	local10, result1 wz
20d20     1C 00 90 AD |  if_e	jmp	#LR__3587
20d24     04 4E 05 F1 | 	add	fp, #4
20d28     A7 30 02 FB | 	rdlong	local10, fp
20d2c     04 4E 85 F1 | 	sub	fp, #4
20d30     11 30 06 F1 | 	add	local10, #17
20d34     18 03 48 FC | 	wrbyte	#1, local10
20d38                 | ' 				fp->fptr < fp->obj.objsize &&
20d38                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
20d38                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
20d38     01 FA 05 F6 | 	mov	result1, #1
20d3c     E0 01 90 FD | 	jmp	#LR__3593
20d40                 | LR__3587
20d40     04 4E 05 F1 | 	add	fp, #4
20d44     A7 18 02 FB | 	rdlong	arg04, fp
20d48     1C 4E 05 F1 | 	add	fp, #28
20d4c     A7 FA 01 FB | 	rdlong	result1, fp
20d50     20 4E 85 F1 | 	sub	fp, #32
20d54     1C 18 06 F1 | 	add	arg04, #28
20d58     0C FB 61 FC | 	wrlong	result1, arg04
20d5c                 | LR__3588
20d5c     04 4E 05 F1 | 	add	fp, #4
20d60     A7 FA 01 FB | 	rdlong	result1, fp
20d64     14 FA 05 F1 | 	add	result1, #20
20d68     FD FA 01 FB | 	rdlong	result1, result1
20d6c     FF FB 05 F5 | 	and	result1, #511
20d70     09 32 C6 F9 | 	decod	local11, #9
20d74     FD 32 82 F1 | 	sub	local11, result1
20d78     20 4E 05 F1 | 	add	fp, #32
20d7c     A7 32 62 FC | 	wrlong	local11, fp
20d80     18 4E 85 F1 | 	sub	fp, #24
20d84     A7 FA 01 FB | 	rdlong	result1, fp
20d88     0C 4E 85 F1 | 	sub	fp, #12
20d8c     FD 32 1A F2 | 	cmp	local11, result1 wcz
20d90     0C 4E 05 11 |  if_a	add	fp, #12
20d94     A7 32 02 1B |  if_a	rdlong	local11, fp
20d98     18 4E 05 11 |  if_a	add	fp, #24
20d9c     A7 32 62 1C |  if_a	wrlong	local11, fp
20da0     24 4E 85 11 |  if_a	sub	fp, #36
20da4     04 4E 05 F1 | 	add	fp, #4
20da8     A7 32 02 FB | 	rdlong	local11, fp
20dac     19 13 02 F6 | 	mov	arg01, local11
20db0     28 12 06 F1 | 	add	arg01, #40
20db4     14 32 06 F1 | 	add	local11, #20
20db8     19 33 02 FB | 	rdlong	local11, local11
20dbc     FF 33 06 F5 | 	and	local11, #511
20dc0     19 13 02 F1 | 	add	arg01, local11
20dc4     2C 4E 05 F1 | 	add	fp, #44
20dc8     A7 14 02 FB | 	rdlong	arg02, fp
20dcc     0C 4E 85 F1 | 	sub	fp, #12
20dd0     A7 16 02 FB | 	rdlong	arg03, fp
20dd4     24 4E 85 F1 | 	sub	fp, #36
20dd8     98 43 BF FD | 	call	#__system____builtin_memmove
20ddc     04 4E 05 F1 | 	add	fp, #4
20de0     A7 FA 01 FB | 	rdlong	result1, fp
20de4     FD 32 02 F6 | 	mov	local11, result1
20de8     04 4E 85 F1 | 	sub	fp, #4
20dec     10 FA 05 F1 | 	add	result1, #16
20df0     FD FA C1 FA | 	rdbyte	result1, result1
20df4     80 FA 45 F5 | 	or	result1, #128
20df8     10 32 06 F1 | 	add	local11, #16
20dfc     19 FB 41 FC | 	wrbyte	result1, local11
20e00                 | LR__3589
20e00     0C 4E 05 F1 | 	add	fp, #12
20e04     A7 32 02 FB | 	rdlong	local11, fp
20e08     18 4E 05 F1 | 	add	fp, #24
20e0c     A7 FA 01 FB | 	rdlong	result1, fp
20e10     FD 32 82 F1 | 	sub	local11, result1
20e14     18 4E 85 F1 | 	sub	fp, #24
20e18     A7 32 62 FC | 	wrlong	local11, fp
20e1c     04 4E 05 F1 | 	add	fp, #4
20e20     A7 34 02 FB | 	rdlong	local12, fp
20e24     1A 33 02 FB | 	rdlong	local11, local12
20e28     14 4E 05 F1 | 	add	fp, #20
20e2c     A7 36 02 FB | 	rdlong	local13, fp
20e30     1B 33 02 F1 | 	add	local11, local13
20e34     1A 33 62 FC | 	wrlong	local11, local12
20e38     0C 4E 05 F1 | 	add	fp, #12
20e3c     A7 32 02 FB | 	rdlong	local11, fp
20e40     0C 4E 85 F1 | 	sub	fp, #12
20e44     A7 38 02 FB | 	rdlong	local14, fp
20e48     1C 33 02 F1 | 	add	local11, local14
20e4c     0C 4E 05 F1 | 	add	fp, #12
20e50     A7 32 62 FC | 	wrlong	local11, fp
20e54     2C 4E 85 F1 | 	sub	fp, #44
20e58     A7 3A 02 FB | 	rdlong	local15, fp
20e5c     1D 33 02 F6 | 	mov	local11, local15
20e60     14 3A 06 F1 | 	add	local15, #20
20e64     1D 3B 02 FB | 	rdlong	local15, local15
20e68     20 4E 05 F1 | 	add	fp, #32
20e6c     A7 3C 02 FB | 	rdlong	local16, fp
20e70     1E 3B 02 F1 | 	add	local15, local16
20e74     14 32 06 F1 | 	add	local11, #20
20e78     19 3B 62 FC | 	wrlong	local15, local11
20e7c     20 4E 85 F1 | 	sub	fp, #32
20e80     A7 3E 02 FB | 	rdlong	local17, fp
20e84     1F 33 02 F6 | 	mov	local11, local17
20e88     1F 41 02 F6 | 	mov	local18, local17
20e8c     04 4E 85 F1 | 	sub	fp, #4
20e90     14 3E 06 F1 | 	add	local17, #20
20e94     1F 43 02 FB | 	rdlong	local19, local17
20e98     0C 40 06 F1 | 	add	local18, #12
20e9c     20 45 02 FB | 	rdlong	local20, local18
20ea0     22 43 1A F2 | 	cmp	local19, local20 wcz
20ea4     24 00 90 ED |  if_be	jmp	#LR__3590
20ea8     04 4E 05 F1 | 	add	fp, #4
20eac     A7 26 02 FB | 	rdlong	local05, fp
20eb0     04 4E 85 F1 | 	sub	fp, #4
20eb4     13 23 02 F6 | 	mov	local03, local05
20eb8     14 22 06 F1 | 	add	local03, #20
20ebc     11 25 02 FB | 	rdlong	local04, local03
20ec0     14 22 86 F1 | 	sub	local03, #20
20ec4     12 47 02 F6 | 	mov	local21, local04
20ec8     20 00 90 FD | 	jmp	#LR__3591
20ecc                 | LR__3590
20ecc     04 4E 05 F1 | 	add	fp, #4
20ed0     A7 2A 02 FB | 	rdlong	local07, fp
20ed4     04 4E 85 F1 | 	sub	fp, #4
20ed8     15 31 02 F6 | 	mov	local10, local07
20edc     0C 30 06 F1 | 	add	local10, #12
20ee0     18 2D 02 FB | 	rdlong	local08, local10
20ee4     0C 30 86 F1 | 	sub	local10, #12
20ee8     16 47 02 F6 | 	mov	local21, local08
20eec                 | LR__3591
20eec     0C 32 06 F1 | 	add	local11, #12
20ef0     19 47 62 FC | 	wrlong	local21, local11
20ef4     5C F9 9F FD | 	jmp	#LR__3573
20ef8                 | LR__3592
20ef8     04 4E 05 F1 | 	add	fp, #4
20efc     A7 34 02 FB | 	rdlong	local12, fp
20f00     1A 1F 02 F6 | 	mov	local01, local12
20f04     04 4E 85 F1 | 	sub	fp, #4
20f08     10 34 06 F1 | 	add	local12, #16
20f0c     1A 33 C2 FA | 	rdbyte	local11, local12
20f10     40 32 46 F5 | 	or	local11, #64
20f14     10 1E 06 F1 | 	add	local01, #16
20f18     0F 33 42 FC | 	wrbyte	local11, local01
20f1c                 | ' 
20f1c                 | ' 
20f1c                 | ' 
20f1c                 | ' 
20f1c                 | ' 
20f1c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
20f1c                 | ' 		fp->flag |=  0x80 ;
20f1c                 | ' 
20f1c                 | ' 	}
20f1c                 | ' 
20f1c                 | ' 	fp->flag |=  0x40 ;
20f1c                 | ' 
20f1c                 | ' 	return FR_OK ;
20f1c     00 FA 05 F6 | 	mov	result1, #0
20f20                 | LR__3593
20f20     A7 F0 03 F6 | 	mov	ptra, fp
20f24     B2 00 A0 FD | 	call	#popregs_
20f28                 | _fatfs_cc_f_write_ret
20f28     2D 00 64 FD | 	ret
20f2c                 | 
20f2c                 | _fatfs_cc_f_sync
20f2c     00 4A 05 F6 | 	mov	COUNT_, #0
20f30     A8 00 A0 FD | 	call	#pushregs_
20f34     18 F0 07 F1 | 	add	ptra, #24
20f38     04 4E 05 F1 | 	add	fp, #4
20f3c     A7 12 62 FC | 	wrlong	arg01, fp
20f40     08 4E 05 F1 | 	add	fp, #8
20f44     A7 14 02 F6 | 	mov	arg02, fp
20f48     0C 4E 85 F1 | 	sub	fp, #12
20f4c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
20f50     08 4E 05 F1 | 	add	fp, #8
20f54     A7 FA 61 FC | 	wrlong	result1, fp
20f58     08 4E 85 F1 | 	sub	fp, #8
20f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
20f60     C0 01 90 5D |  if_ne	jmp	#LR__3603
20f64     04 4E 05 F1 | 	add	fp, #4
20f68     A7 18 02 FB | 	rdlong	arg04, fp
20f6c     04 4E 85 F1 | 	sub	fp, #4
20f70     10 18 06 F1 | 	add	arg04, #16
20f74     0C 19 C2 FA | 	rdbyte	arg04, arg04
20f78     40 18 CE F7 | 	test	arg04, #64 wz
20f7c     A4 01 90 AD |  if_e	jmp	#LR__3602
20f80     04 4E 05 F1 | 	add	fp, #4
20f84     A7 18 02 FB | 	rdlong	arg04, fp
20f88     04 4E 85 F1 | 	sub	fp, #4
20f8c     10 18 06 F1 | 	add	arg04, #16
20f90     0C 19 C2 FA | 	rdbyte	arg04, arg04
20f94     80 18 CE F7 | 	test	arg04, #128 wz
20f98     64 00 90 AD |  if_e	jmp	#LR__3600
20f9c     0C 4E 05 F1 | 	add	fp, #12
20fa0     A7 18 02 FB | 	rdlong	arg04, fp
20fa4     01 18 06 F1 | 	add	arg04, #1
20fa8     0C 13 C2 FA | 	rdbyte	arg01, arg04
20fac     08 4E 85 F1 | 	sub	fp, #8
20fb0     A7 18 02 FB | 	rdlong	arg04, fp
20fb4     0C 15 02 F6 | 	mov	arg02, arg04
20fb8     28 14 06 F1 | 	add	arg02, #40
20fbc     04 4E 85 F1 | 	sub	fp, #4
20fc0     1C 18 06 F1 | 	add	arg04, #28
20fc4     0C 17 02 FB | 	rdlong	arg03, arg04
20fc8     01 18 06 F6 | 	mov	arg04, #1
20fcc     0C AE BF FD | 	call	#_fatfs_cc_disk_write
20fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
20fd4     01 FA 05 56 |  if_ne	mov	result1, #1
20fd8     54 01 90 5D |  if_ne	jmp	#LR__3604
20fdc     04 4E 05 F1 | 	add	fp, #4
20fe0     A7 18 02 FB | 	rdlong	arg04, fp
20fe4     0C 17 02 F6 | 	mov	arg03, arg04
20fe8     04 4E 85 F1 | 	sub	fp, #4
20fec     10 18 06 F1 | 	add	arg04, #16
20ff0     0C 19 C2 FA | 	rdbyte	arg04, arg04
20ff4     7F 18 06 F5 | 	and	arg04, #127
20ff8     10 16 06 F1 | 	add	arg03, #16
20ffc     0B 19 42 FC | 	wrbyte	arg04, arg03
21000                 | LR__3600
21000     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
21004     10 4E 05 F1 | 	add	fp, #16
21008     A7 FA 61 FC | 	wrlong	result1, fp
2100c     04 4E 85 F1 | 	sub	fp, #4
21010     A7 12 02 FB | 	rdlong	arg01, fp
21014     08 4E 85 F1 | 	sub	fp, #8
21018     A7 18 02 FB | 	rdlong	arg04, fp
2101c     04 4E 85 F1 | 	sub	fp, #4
21020     20 18 06 F1 | 	add	arg04, #32
21024     0C 15 02 FB | 	rdlong	arg02, arg04
21028     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2102c     08 4E 05 F1 | 	add	fp, #8
21030     A7 FA 61 FC | 	wrlong	result1, fp
21034     08 4E 85 F1 | 	sub	fp, #8
21038     00 FA 0D F2 | 	cmp	result1, #0 wz
2103c     E4 00 90 5D |  if_ne	jmp	#LR__3601
21040     04 4E 05 F1 | 	add	fp, #4
21044     A7 18 02 FB | 	rdlong	arg04, fp
21048     24 18 06 F1 | 	add	arg04, #36
2104c     0C 19 02 FB | 	rdlong	arg04, arg04
21050     10 4E 05 F1 | 	add	fp, #16
21054     A7 18 62 FC | 	wrlong	arg04, fp
21058     0C 17 02 F6 | 	mov	arg03, arg04
2105c     0B 16 06 F1 | 	add	arg03, #11
21060     0B 17 C2 FA | 	rdbyte	arg03, arg03
21064     20 16 46 F5 | 	or	arg03, #32
21068     0B 18 06 F1 | 	add	arg04, #11
2106c     0C 17 42 FC | 	wrbyte	arg03, arg04
21070     10 4E 85 F1 | 	sub	fp, #16
21074     A7 18 02 FB | 	rdlong	arg04, fp
21078     0C 13 02 FB | 	rdlong	arg01, arg04
2107c     10 4E 05 F1 | 	add	fp, #16
21080     A7 14 02 FB | 	rdlong	arg02, fp
21084     14 4E 85 F1 | 	sub	fp, #20
21088     08 18 06 F1 | 	add	arg04, #8
2108c     0C 17 02 FB | 	rdlong	arg03, arg04
21090     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
21094     14 4E 05 F1 | 	add	fp, #20
21098     A7 12 02 FB | 	rdlong	arg01, fp
2109c     1C 12 06 F1 | 	add	arg01, #28
210a0     10 4E 85 F1 | 	sub	fp, #16
210a4     A7 18 02 FB | 	rdlong	arg04, fp
210a8     0C 18 06 F1 | 	add	arg04, #12
210ac     0C 15 02 FB | 	rdlong	arg02, arg04
210b0     09 15 62 FC | 	wrlong	arg02, arg01
210b4     10 4E 05 F1 | 	add	fp, #16
210b8     A7 12 02 FB | 	rdlong	arg01, fp
210bc     16 12 06 F1 | 	add	arg01, #22
210c0     04 4E 85 F1 | 	sub	fp, #4
210c4     A7 14 02 FB | 	rdlong	arg02, fp
210c8     09 15 62 FC | 	wrlong	arg02, arg01
210cc     04 4E 05 F1 | 	add	fp, #4
210d0     A7 12 02 FB | 	rdlong	arg01, fp
210d4     12 12 06 F1 | 	add	arg01, #18
210d8     09 01 58 FC | 	wrword	#0, arg01
210dc     08 4E 85 F1 | 	sub	fp, #8
210e0     A7 18 02 FB | 	rdlong	arg04, fp
210e4     03 18 06 F1 | 	add	arg04, #3
210e8     0C 03 48 FC | 	wrbyte	#1, arg04
210ec     A7 12 02 FB | 	rdlong	arg01, fp
210f0     0C 4E 85 F1 | 	sub	fp, #12
210f4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
210f8     08 4E 05 F1 | 	add	fp, #8
210fc     A7 FA 61 FC | 	wrlong	result1, fp
21100     04 4E 85 F1 | 	sub	fp, #4
21104     A7 18 02 FB | 	rdlong	arg04, fp
21108     0C 17 02 F6 | 	mov	arg03, arg04
2110c     04 4E 85 F1 | 	sub	fp, #4
21110     10 18 06 F1 | 	add	arg04, #16
21114     0C 19 C2 FA | 	rdbyte	arg04, arg04
21118     BF 18 06 F5 | 	and	arg04, #191
2111c     10 16 06 F1 | 	add	arg03, #16
21120     0B 19 42 FC | 	wrbyte	arg04, arg03
21124                 | LR__3601
21124                 | LR__3602
21124                 | LR__3603
21124                 | ' 					dir = fp->dir_ptr;
21124                 | ' 					dir[ 11 ] |=  0x20 ;
21124                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
21124                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
21124                 | ' 					st_dword(dir +  22 , tm);
21124                 | ' 					st_word(dir +  18 , 0);
21124                 | ' 					fs->wflag = 1;
21124                 | ' 					res = sync_fs(fs);
21124                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
21124                 | ' 				}
21124                 | ' 			}
21124                 | ' 		}
21124                 | ' 	}
21124                 | ' 
21124                 | ' 	return res ;
21124     08 4E 05 F1 | 	add	fp, #8
21128     A7 FA 01 FB | 	rdlong	result1, fp
2112c     08 4E 85 F1 | 	sub	fp, #8
21130                 | LR__3604
21130     A7 F0 03 F6 | 	mov	ptra, fp
21134     B2 00 A0 FD | 	call	#popregs_
21138                 | _fatfs_cc_f_sync_ret
21138     2D 00 64 FD | 	ret
2113c                 | 
2113c                 | _fatfs_cc_f_close
2113c     01 4A 05 F6 | 	mov	COUNT_, #1
21140     A8 00 A0 FD | 	call	#pushregs_
21144     10 F0 07 F1 | 	add	ptra, #16
21148     04 4E 05 F1 | 	add	fp, #4
2114c     A7 12 62 FC | 	wrlong	arg01, fp
21150     04 4E 85 F1 | 	sub	fp, #4
21154     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
21158     08 4E 05 F1 | 	add	fp, #8
2115c     A7 FA 61 FC | 	wrlong	result1, fp
21160     08 4E 85 F1 | 	sub	fp, #8
21164     00 FA 0D F2 | 	cmp	result1, #0 wz
21168     38 00 90 5D |  if_ne	jmp	#LR__3610
2116c     04 4E 05 F1 | 	add	fp, #4
21170     A7 12 02 FB | 	rdlong	arg01, fp
21174     08 4E 05 F1 | 	add	fp, #8
21178     A7 14 02 F6 | 	mov	arg02, fp
2117c     0C 4E 85 F1 | 	sub	fp, #12
21180     9C E6 BF FD | 	call	#_fatfs_cc_validate
21184     08 4E 05 F1 | 	add	fp, #8
21188     A7 FA 61 FC | 	wrlong	result1, fp
2118c     08 4E 85 F1 | 	sub	fp, #8
21190     00 FA 0D F2 | 	cmp	result1, #0 wz
21194     04 4E 05 A1 |  if_e	add	fp, #4
21198     A7 1E 02 AB |  if_e	rdlong	local01, fp
2119c     04 4E 85 A1 |  if_e	sub	fp, #4
211a0     0F 01 68 AC |  if_e	wrlong	#0, local01
211a4                 | LR__3610
211a4                 | ' 
211a4                 | ' 
211a4                 | ' 
211a4                 | ' 
211a4                 | ' 			fp->obj.fs = 0;
211a4                 | ' #line 4192 "ff.c"
211a4                 | ' 		}
211a4                 | ' 	}
211a4                 | ' 	return res;
211a4     08 4E 05 F1 | 	add	fp, #8
211a8     A7 FA 01 FB | 	rdlong	result1, fp
211ac     08 4E 85 F1 | 	sub	fp, #8
211b0     A7 F0 03 F6 | 	mov	ptra, fp
211b4     B2 00 A0 FD | 	call	#popregs_
211b8                 | _fatfs_cc_f_close_ret
211b8     2D 00 64 FD | 	ret
211bc                 | 
211bc                 | _fatfs_cc_f_lseek
211bc     00 4A 05 F6 | 	mov	COUNT_, #0
211c0     A8 00 A0 FD | 	call	#pushregs_
211c4     24 F0 07 F1 | 	add	ptra, #36
211c8     04 4E 05 F1 | 	add	fp, #4
211cc     A7 12 62 FC | 	wrlong	arg01, fp
211d0     04 4E 05 F1 | 	add	fp, #4
211d4     A7 14 62 FC | 	wrlong	arg02, fp
211d8     04 4E 85 F1 | 	sub	fp, #4
211dc     A7 12 02 FB | 	rdlong	arg01, fp
211e0     0C 4E 05 F1 | 	add	fp, #12
211e4     A7 14 02 F6 | 	mov	arg02, fp
211e8     10 4E 85 F1 | 	sub	fp, #16
211ec     30 E6 BF FD | 	call	#_fatfs_cc_validate
211f0     0C 4E 05 F1 | 	add	fp, #12
211f4     A7 FA 61 FC | 	wrlong	result1, fp
211f8     0C 4E 85 F1 | 	sub	fp, #12
211fc     00 FA 0D F2 | 	cmp	result1, #0 wz
21200     1C 00 90 5D |  if_ne	jmp	#LR__3620
21204     04 4E 05 F1 | 	add	fp, #4
21208     A7 18 02 FB | 	rdlong	arg04, fp
2120c     11 18 06 F1 | 	add	arg04, #17
21210     0C 19 C2 FA | 	rdbyte	arg04, arg04
21214     08 4E 05 F1 | 	add	fp, #8
21218     A7 18 62 FC | 	wrlong	arg04, fp
2121c     0C 4E 85 F1 | 	sub	fp, #12
21220                 | LR__3620
21220     0C 4E 05 F1 | 	add	fp, #12
21224     A7 18 0A FB | 	rdlong	arg04, fp wz
21228     0C 4E 85 F1 | 	sub	fp, #12
2122c     0C 4E 05 51 |  if_ne	add	fp, #12
21230     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21234     0C 4E 85 51 |  if_ne	sub	fp, #12
21238     40 06 90 5D |  if_ne	jmp	#LR__3643
2123c     04 4E 05 F1 | 	add	fp, #4
21240     A7 18 02 FB | 	rdlong	arg04, fp
21244     04 4E 05 F1 | 	add	fp, #4
21248     A7 16 02 FB | 	rdlong	arg03, fp
2124c     08 4E 85 F1 | 	sub	fp, #8
21250     0C 18 06 F1 | 	add	arg04, #12
21254     0C 19 02 FB | 	rdlong	arg04, arg04
21258     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2125c     3C 00 90 ED |  if_be	jmp	#LR__3621
21260     04 4E 05 F1 | 	add	fp, #4
21264     A7 16 02 FB | 	rdlong	arg03, fp
21268     04 4E 85 F1 | 	sub	fp, #4
2126c     10 16 06 F1 | 	add	arg03, #16
21270     0B 17 C2 FA | 	rdbyte	arg03, arg03
21274     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21278     02 16 CE F7 | 	test	arg03, #2 wz
2127c     1C 00 90 5D |  if_ne	jmp	#LR__3621
21280     04 4E 05 F1 | 	add	fp, #4
21284     A7 16 02 FB | 	rdlong	arg03, fp
21288     0C 16 06 F1 | 	add	arg03, #12
2128c     0B 17 02 FB | 	rdlong	arg03, arg03
21290     04 4E 05 F1 | 	add	fp, #4
21294     A7 16 62 FC | 	wrlong	arg03, fp
21298     08 4E 85 F1 | 	sub	fp, #8
2129c                 | LR__3621
2129c     04 4E 05 F1 | 	add	fp, #4
212a0     A7 16 02 FB | 	rdlong	arg03, fp
212a4     14 16 06 F1 | 	add	arg03, #20
212a8     0B 17 02 FB | 	rdlong	arg03, arg03
212ac     1C 4E 05 F1 | 	add	fp, #28
212b0     A7 16 62 FC | 	wrlong	arg03, fp
212b4     1C 4E 85 F1 | 	sub	fp, #28
212b8     A7 16 02 FB | 	rdlong	arg03, fp
212bc     18 4E 05 F1 | 	add	fp, #24
212c0     A7 00 68 FC | 	wrlong	#0, fp
212c4     14 16 06 F1 | 	add	arg03, #20
212c8     0B 01 68 FC | 	wrlong	#0, arg03
212cc     14 4E 85 F1 | 	sub	fp, #20
212d0     A7 16 02 FB | 	rdlong	arg03, fp
212d4     08 4E 85 F1 | 	sub	fp, #8
212d8     01 16 16 F2 | 	cmp	arg03, #1 wc
212dc     E4 03 90 CD |  if_b	jmp	#LR__3637
212e0     10 4E 05 F1 | 	add	fp, #16
212e4     A7 16 02 FB | 	rdlong	arg03, fp
212e8     0A 16 06 F1 | 	add	arg03, #10
212ec     0B 19 E2 FA | 	rdword	arg04, arg03
212f0     09 18 66 F0 | 	shl	arg04, #9
212f4     08 4E 05 F1 | 	add	fp, #8
212f8     A7 18 62 FC | 	wrlong	arg04, fp
212fc     08 4E 05 F1 | 	add	fp, #8
21300     A7 18 02 FB | 	rdlong	arg04, fp
21304     20 4E 85 F1 | 	sub	fp, #32
21308     01 18 16 F2 | 	cmp	arg04, #1 wc
2130c     AC 00 90 CD |  if_b	jmp	#LR__3622
21310     08 4E 05 F1 | 	add	fp, #8
21314     A7 18 02 FB | 	rdlong	arg04, fp
21318     01 18 86 F1 | 	sub	arg04, #1
2131c     10 4E 05 F1 | 	add	fp, #16
21320     A7 16 02 FB | 	rdlong	arg03, fp
21324     0B 19 12 FD | 	qdiv	arg04, arg03
21328     08 4E 05 F1 | 	add	fp, #8
2132c     A7 FA 01 FB | 	rdlong	result1, fp
21330     01 FA 85 F1 | 	sub	result1, #1
21334     18 18 62 FD | 	getqx	arg04
21338     0B FB 11 FD | 	qdiv	result1, arg03
2133c     20 4E 85 F1 | 	sub	fp, #32
21340     18 16 62 FD | 	getqx	arg03
21344     0B 19 12 F2 | 	cmp	arg04, arg03 wc
21348     70 00 90 CD |  if_b	jmp	#LR__3622
2134c     04 4E 05 F1 | 	add	fp, #4
21350     A7 16 02 FB | 	rdlong	arg03, fp
21354     1C 4E 05 F1 | 	add	fp, #28
21358     A7 FA 01 FB | 	rdlong	result1, fp
2135c     01 FA 85 F1 | 	sub	result1, #1
21360     08 4E 85 F1 | 	sub	fp, #8
21364     A7 18 02 FB | 	rdlong	arg04, fp
21368     01 18 86 F1 | 	sub	arg04, #1
2136c     0C FB 21 F5 | 	andn	result1, arg04
21370     14 16 06 F1 | 	add	arg03, #20
21374     0B FB 61 FC | 	wrlong	result1, arg03
21378     10 4E 85 F1 | 	sub	fp, #16
2137c     A7 16 02 FB | 	rdlong	arg03, fp
21380     04 4E 85 F1 | 	sub	fp, #4
21384     A7 18 02 FB | 	rdlong	arg04, fp
21388     14 18 06 F1 | 	add	arg04, #20
2138c     0C 19 02 FB | 	rdlong	arg04, arg04
21390     0C 17 82 F1 | 	sub	arg03, arg04
21394     04 4E 05 F1 | 	add	fp, #4
21398     A7 16 62 FC | 	wrlong	arg03, fp
2139c     04 4E 85 F1 | 	sub	fp, #4
213a0     A7 16 02 FB | 	rdlong	arg03, fp
213a4     18 16 06 F1 | 	add	arg03, #24
213a8     0B 17 02 FB | 	rdlong	arg03, arg03
213ac     10 4E 05 F1 | 	add	fp, #16
213b0     A7 16 62 FC | 	wrlong	arg03, fp
213b4     14 4E 85 F1 | 	sub	fp, #20
213b8     D0 00 90 FD | 	jmp	#LR__3626
213bc                 | LR__3622
213bc     04 4E 05 F1 | 	add	fp, #4
213c0     A7 16 02 FB | 	rdlong	arg03, fp
213c4     08 16 06 F1 | 	add	arg03, #8
213c8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
213cc     10 4E 05 F1 | 	add	fp, #16
213d0     A7 16 62 FC | 	wrlong	arg03, fp
213d4     14 4E 85 F1 | 	sub	fp, #20
213d8     94 00 90 5D |  if_ne	jmp	#LR__3625
213dc     04 4E 05 F1 | 	add	fp, #4
213e0     A7 12 02 FB | 	rdlong	arg01, fp
213e4     04 4E 85 F1 | 	sub	fp, #4
213e8     00 14 06 F6 | 	mov	arg02, #0
213ec     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
213f0     14 4E 05 F1 | 	add	fp, #20
213f4     A7 FA 61 FC | 	wrlong	result1, fp
213f8     14 4E 85 F1 | 	sub	fp, #20
213fc     01 FA 0D F2 | 	cmp	result1, #1 wz
21400     1C 00 90 5D |  if_ne	jmp	#LR__3623
21404     04 4E 05 F1 | 	add	fp, #4
21408     A7 16 02 FB | 	rdlong	arg03, fp
2140c     04 4E 85 F1 | 	sub	fp, #4
21410     11 16 06 F1 | 	add	arg03, #17
21414     0B 05 48 FC | 	wrbyte	#2, arg03
21418     02 FA 05 F6 | 	mov	result1, #2
2141c     5C 04 90 FD | 	jmp	#LR__3643
21420                 | LR__3623
21420     14 4E 05 F1 | 	add	fp, #20
21424     A7 FA 01 FB | 	rdlong	result1, fp
21428     14 4E 85 F1 | 	sub	fp, #20
2142c     FF FF 7F FF 
21430     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21434     1C 00 90 5D |  if_ne	jmp	#LR__3624
21438     04 4E 05 F1 | 	add	fp, #4
2143c     A7 16 02 FB | 	rdlong	arg03, fp
21440     04 4E 85 F1 | 	sub	fp, #4
21444     11 16 06 F1 | 	add	arg03, #17
21448     0B 03 48 FC | 	wrbyte	#1, arg03
2144c     01 FA 05 F6 | 	mov	result1, #1
21450     28 04 90 FD | 	jmp	#LR__3643
21454                 | LR__3624
21454     04 4E 05 F1 | 	add	fp, #4
21458     A7 16 02 FB | 	rdlong	arg03, fp
2145c     10 4E 05 F1 | 	add	fp, #16
21460     A7 18 02 FB | 	rdlong	arg04, fp
21464     14 4E 85 F1 | 	sub	fp, #20
21468     08 16 06 F1 | 	add	arg03, #8
2146c     0B 19 62 FC | 	wrlong	arg04, arg03
21470                 | LR__3625
21470     04 4E 05 F1 | 	add	fp, #4
21474     A7 16 02 FB | 	rdlong	arg03, fp
21478     10 4E 05 F1 | 	add	fp, #16
2147c     A7 18 02 FB | 	rdlong	arg04, fp
21480     14 4E 85 F1 | 	sub	fp, #20
21484     18 16 06 F1 | 	add	arg03, #24
21488     0B 19 62 FC | 	wrlong	arg04, arg03
2148c                 | LR__3626
2148c     14 4E 05 F1 | 	add	fp, #20
21490     A7 16 0A FB | 	rdlong	arg03, fp wz
21494     14 4E 85 F1 | 	sub	fp, #20
21498     28 02 90 AD |  if_e	jmp	#LR__3636
2149c                 | ' 				while (ofs > bcs) {
2149c                 | LR__3627
2149c     08 4E 05 F1 | 	add	fp, #8
214a0     A7 18 02 FB | 	rdlong	arg04, fp
214a4     10 4E 05 F1 | 	add	fp, #16
214a8     A7 16 02 FB | 	rdlong	arg03, fp
214ac     18 4E 85 F1 | 	sub	fp, #24
214b0     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
214b4     68 01 90 ED |  if_be	jmp	#LR__3633
214b8     08 4E 05 F1 | 	add	fp, #8
214bc     A7 18 02 FB | 	rdlong	arg04, fp
214c0     10 4E 05 F1 | 	add	fp, #16
214c4     A7 16 02 FB | 	rdlong	arg03, fp
214c8     0B 19 82 F1 | 	sub	arg04, arg03
214cc     10 4E 85 F1 | 	sub	fp, #16
214d0     A7 18 62 FC | 	wrlong	arg04, fp
214d4     04 4E 85 F1 | 	sub	fp, #4
214d8     A7 18 02 FB | 	rdlong	arg04, fp
214dc     0C FB 01 F6 | 	mov	result1, arg04
214e0     14 18 06 F1 | 	add	arg04, #20
214e4     0C 19 02 FB | 	rdlong	arg04, arg04
214e8     14 4E 05 F1 | 	add	fp, #20
214ec     A7 16 02 FB | 	rdlong	arg03, fp
214f0     0B 19 02 F1 | 	add	arg04, arg03
214f4     14 FA 05 F1 | 	add	result1, #20
214f8     FD 18 62 FC | 	wrlong	arg04, result1
214fc     14 4E 85 F1 | 	sub	fp, #20
21500     A7 16 02 FB | 	rdlong	arg03, fp
21504     04 4E 85 F1 | 	sub	fp, #4
21508     10 16 06 F1 | 	add	arg03, #16
2150c     0B 17 C2 FA | 	rdbyte	arg03, arg03
21510     02 16 CE F7 | 	test	arg03, #2 wz
21514     3C 00 90 AD |  if_e	jmp	#LR__3628
21518     04 4E 05 F1 | 	add	fp, #4
2151c     A7 12 02 FB | 	rdlong	arg01, fp
21520     10 4E 05 F1 | 	add	fp, #16
21524     A7 14 02 FB | 	rdlong	arg02, fp
21528     14 4E 85 F1 | 	sub	fp, #20
2152c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
21530     14 4E 05 F1 | 	add	fp, #20
21534     A7 FA 61 FC | 	wrlong	result1, fp
21538     00 FA 4D F2 | 	cmps	result1, #0 wz
2153c     14 4E 85 F1 | 	sub	fp, #20
21540     08 4E 05 A1 |  if_e	add	fp, #8
21544     A7 00 68 AC |  if_e	wrlong	#0, fp
21548     08 4E 85 A1 |  if_e	sub	fp, #8
2154c                 | ' 							ofs = 0; break;
2154c     D0 00 90 AD |  if_e	jmp	#LR__3633
21550     24 00 90 FD | 	jmp	#LR__3629
21554                 | LR__3628
21554     04 4E 05 F1 | 	add	fp, #4
21558     A7 12 02 FB | 	rdlong	arg01, fp
2155c     10 4E 05 F1 | 	add	fp, #16
21560     A7 14 02 FB | 	rdlong	arg02, fp
21564     14 4E 85 F1 | 	sub	fp, #20
21568     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2156c     14 4E 05 F1 | 	add	fp, #20
21570     A7 FA 61 FC | 	wrlong	result1, fp
21574     14 4E 85 F1 | 	sub	fp, #20
21578                 | LR__3629
21578     14 4E 05 F1 | 	add	fp, #20
2157c     A7 16 02 FB | 	rdlong	arg03, fp
21580     14 4E 85 F1 | 	sub	fp, #20
21584     FF FF 7F FF 
21588     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2158c     1C 00 90 5D |  if_ne	jmp	#LR__3630
21590     04 4E 05 F1 | 	add	fp, #4
21594     A7 16 02 FB | 	rdlong	arg03, fp
21598     04 4E 85 F1 | 	sub	fp, #4
2159c     11 16 06 F1 | 	add	arg03, #17
215a0     0B 03 48 FC | 	wrbyte	#1, arg03
215a4     01 FA 05 F6 | 	mov	result1, #1
215a8     D0 02 90 FD | 	jmp	#LR__3643
215ac                 | LR__3630
215ac     14 4E 05 F1 | 	add	fp, #20
215b0     A7 16 02 FB | 	rdlong	arg03, fp
215b4     14 4E 85 F1 | 	sub	fp, #20
215b8     02 16 16 F2 | 	cmp	arg03, #2 wc
215bc     24 00 90 CD |  if_b	jmp	#LR__3631
215c0     10 4E 05 F1 | 	add	fp, #16
215c4     A7 18 02 FB | 	rdlong	arg04, fp
215c8     04 4E 05 F1 | 	add	fp, #4
215cc     A7 16 02 FB | 	rdlong	arg03, fp
215d0     14 4E 85 F1 | 	sub	fp, #20
215d4     18 18 06 F1 | 	add	arg04, #24
215d8     0C 19 02 FB | 	rdlong	arg04, arg04
215dc     0C 17 12 F2 | 	cmp	arg03, arg04 wc
215e0     1C 00 90 CD |  if_b	jmp	#LR__3632
215e4                 | LR__3631
215e4     04 4E 05 F1 | 	add	fp, #4
215e8     A7 16 02 FB | 	rdlong	arg03, fp
215ec     04 4E 85 F1 | 	sub	fp, #4
215f0     11 16 06 F1 | 	add	arg03, #17
215f4     0B 05 48 FC | 	wrbyte	#2, arg03
215f8     02 FA 05 F6 | 	mov	result1, #2
215fc     7C 02 90 FD | 	jmp	#LR__3643
21600                 | LR__3632
21600     04 4E 05 F1 | 	add	fp, #4
21604     A7 18 02 FB | 	rdlong	arg04, fp
21608     10 4E 05 F1 | 	add	fp, #16
2160c     A7 16 02 FB | 	rdlong	arg03, fp
21610     14 4E 85 F1 | 	sub	fp, #20
21614     18 18 06 F1 | 	add	arg04, #24
21618     0C 17 62 FC | 	wrlong	arg03, arg04
2161c     7C FE 9F FD | 	jmp	#LR__3627
21620                 | LR__3633
21620     04 4E 05 F1 | 	add	fp, #4
21624     A7 16 02 FB | 	rdlong	arg03, fp
21628     0B 13 02 F6 | 	mov	arg01, arg03
2162c     14 16 06 F1 | 	add	arg03, #20
21630     0B 15 02 FB | 	rdlong	arg02, arg03
21634     04 4E 05 F1 | 	add	fp, #4
21638     A7 16 02 FB | 	rdlong	arg03, fp
2163c     0B 15 02 F1 | 	add	arg02, arg03
21640     14 12 06 F1 | 	add	arg01, #20
21644     09 15 62 FC | 	wrlong	arg02, arg01
21648     A7 16 02 FB | 	rdlong	arg03, fp
2164c     08 4E 85 F1 | 	sub	fp, #8
21650     FF 17 CE F7 | 	test	arg03, #511 wz
21654     6C 00 90 AD |  if_e	jmp	#LR__3635
21658     10 4E 05 F1 | 	add	fp, #16
2165c     A7 12 02 FB | 	rdlong	arg01, fp
21660     04 4E 05 F1 | 	add	fp, #4
21664     A7 14 02 FB | 	rdlong	arg02, fp
21668     14 4E 85 F1 | 	sub	fp, #20
2166c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
21670     1C 4E 05 F1 | 	add	fp, #28
21674     A7 FA 61 FC | 	wrlong	result1, fp
21678     1C 4E 85 F1 | 	sub	fp, #28
2167c     00 FA 0D F2 | 	cmp	result1, #0 wz
21680     1C 00 90 5D |  if_ne	jmp	#LR__3634
21684     04 4E 05 F1 | 	add	fp, #4
21688     A7 16 02 FB | 	rdlong	arg03, fp
2168c     04 4E 85 F1 | 	sub	fp, #4
21690     11 16 06 F1 | 	add	arg03, #17
21694     0B 05 48 FC | 	wrbyte	#2, arg03
21698     02 FA 05 F6 | 	mov	result1, #2
2169c     DC 01 90 FD | 	jmp	#LR__3643
216a0                 | LR__3634
216a0     1C 4E 05 F1 | 	add	fp, #28
216a4     A7 18 02 FB | 	rdlong	arg04, fp
216a8     14 4E 85 F1 | 	sub	fp, #20
216ac     A7 16 02 FB | 	rdlong	arg03, fp
216b0     09 16 46 F0 | 	shr	arg03, #9
216b4     0B 19 02 F1 | 	add	arg04, arg03
216b8     14 4E 05 F1 | 	add	fp, #20
216bc     A7 18 62 FC | 	wrlong	arg04, fp
216c0     1C 4E 85 F1 | 	sub	fp, #28
216c4                 | LR__3635
216c4                 | LR__3636
216c4                 | LR__3637
216c4     04 4E 05 F1 | 	add	fp, #4
216c8     A7 18 02 FB | 	rdlong	arg04, fp
216cc     0C 17 02 F6 | 	mov	arg03, arg04
216d0     04 4E 85 F1 | 	sub	fp, #4
216d4     14 16 06 F1 | 	add	arg03, #20
216d8     0B 17 02 FB | 	rdlong	arg03, arg03
216dc     0C 18 06 F1 | 	add	arg04, #12
216e0     0C 19 02 FB | 	rdlong	arg04, arg04
216e4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
216e8     3C 00 90 ED |  if_be	jmp	#LR__3638
216ec     04 4E 05 F1 | 	add	fp, #4
216f0     A7 18 02 FB | 	rdlong	arg04, fp
216f4     0C 17 02 F6 | 	mov	arg03, arg04
216f8     14 18 06 F1 | 	add	arg04, #20
216fc     0C 19 02 FB | 	rdlong	arg04, arg04
21700     0C 16 06 F1 | 	add	arg03, #12
21704     0B 19 62 FC | 	wrlong	arg04, arg03
21708     A7 18 02 FB | 	rdlong	arg04, fp
2170c     0C 17 02 F6 | 	mov	arg03, arg04
21710     04 4E 85 F1 | 	sub	fp, #4
21714     10 18 06 F1 | 	add	arg04, #16
21718     0C 19 C2 FA | 	rdbyte	arg04, arg04
2171c     40 18 46 F5 | 	or	arg04, #64
21720     10 16 06 F1 | 	add	arg03, #16
21724     0B 19 42 FC | 	wrbyte	arg04, arg03
21728                 | LR__3638
21728     04 4E 05 F1 | 	add	fp, #4
2172c     A7 16 02 FB | 	rdlong	arg03, fp
21730     04 4E 85 F1 | 	sub	fp, #4
21734     14 16 06 F1 | 	add	arg03, #20
21738     0B 17 02 FB | 	rdlong	arg03, arg03
2173c     FF 17 CE F7 | 	test	arg03, #511 wz
21740     2C 01 90 AD |  if_e	jmp	#LR__3642
21744     04 4E 05 F1 | 	add	fp, #4
21748     A7 18 02 FB | 	rdlong	arg04, fp
2174c     18 4E 05 F1 | 	add	fp, #24
21750     A7 16 02 FB | 	rdlong	arg03, fp
21754     1C 4E 85 F1 | 	sub	fp, #28
21758     1C 18 06 F1 | 	add	arg04, #28
2175c     0C 19 02 FB | 	rdlong	arg04, arg04
21760     0C 17 0A F2 | 	cmp	arg03, arg04 wz
21764     08 01 90 AD |  if_e	jmp	#LR__3642
21768     04 4E 05 F1 | 	add	fp, #4
2176c     A7 16 02 FB | 	rdlong	arg03, fp
21770     04 4E 85 F1 | 	sub	fp, #4
21774     10 16 06 F1 | 	add	arg03, #16
21778     0B 17 C2 FA | 	rdbyte	arg03, arg03
2177c     80 16 CE F7 | 	test	arg03, #128 wz
21780     7C 00 90 AD |  if_e	jmp	#LR__3640
21784     10 4E 05 F1 | 	add	fp, #16
21788     A7 16 02 FB | 	rdlong	arg03, fp
2178c     01 16 06 F1 | 	add	arg03, #1
21790     0B 13 C2 FA | 	rdbyte	arg01, arg03
21794     0C 4E 85 F1 | 	sub	fp, #12
21798     A7 16 02 FB | 	rdlong	arg03, fp
2179c     0B 15 02 F6 | 	mov	arg02, arg03
217a0     28 14 06 F1 | 	add	arg02, #40
217a4     04 4E 85 F1 | 	sub	fp, #4
217a8     1C 16 06 F1 | 	add	arg03, #28
217ac     0B 17 02 FB | 	rdlong	arg03, arg03
217b0     01 18 06 F6 | 	mov	arg04, #1
217b4     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
217b8     00 FA 0D F2 | 	cmp	result1, #0 wz
217bc     1C 00 90 AD |  if_e	jmp	#LR__3639
217c0     04 4E 05 F1 | 	add	fp, #4
217c4     A7 16 02 FB | 	rdlong	arg03, fp
217c8     04 4E 85 F1 | 	sub	fp, #4
217cc     11 16 06 F1 | 	add	arg03, #17
217d0     0B 03 48 FC | 	wrbyte	#1, arg03
217d4     01 FA 05 F6 | 	mov	result1, #1
217d8     A0 00 90 FD | 	jmp	#LR__3643
217dc                 | LR__3639
217dc     04 4E 05 F1 | 	add	fp, #4
217e0     A7 18 02 FB | 	rdlong	arg04, fp
217e4     0C 17 02 F6 | 	mov	arg03, arg04
217e8     04 4E 85 F1 | 	sub	fp, #4
217ec     10 18 06 F1 | 	add	arg04, #16
217f0     0C 19 C2 FA | 	rdbyte	arg04, arg04
217f4     7F 18 06 F5 | 	and	arg04, #127
217f8     10 16 06 F1 | 	add	arg03, #16
217fc     0B 19 42 FC | 	wrbyte	arg04, arg03
21800                 | LR__3640
21800     10 4E 05 F1 | 	add	fp, #16
21804     A7 16 02 FB | 	rdlong	arg03, fp
21808     01 16 06 F1 | 	add	arg03, #1
2180c     0B 13 C2 FA | 	rdbyte	arg01, arg03
21810     0C 4E 85 F1 | 	sub	fp, #12
21814     A7 14 02 FB | 	rdlong	arg02, fp
21818     28 14 06 F1 | 	add	arg02, #40
2181c     18 4E 05 F1 | 	add	fp, #24
21820     A7 16 02 FB | 	rdlong	arg03, fp
21824     1C 4E 85 F1 | 	sub	fp, #28
21828     01 18 06 F6 | 	mov	arg04, #1
2182c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
21830     00 FA 0D F2 | 	cmp	result1, #0 wz
21834     1C 00 90 AD |  if_e	jmp	#LR__3641
21838     04 4E 05 F1 | 	add	fp, #4
2183c     A7 16 02 FB | 	rdlong	arg03, fp
21840     04 4E 85 F1 | 	sub	fp, #4
21844     11 16 06 F1 | 	add	arg03, #17
21848     0B 03 48 FC | 	wrbyte	#1, arg03
2184c     01 FA 05 F6 | 	mov	result1, #1
21850     28 00 90 FD | 	jmp	#LR__3643
21854                 | LR__3641
21854     04 4E 05 F1 | 	add	fp, #4
21858     A7 18 02 FB | 	rdlong	arg04, fp
2185c     18 4E 05 F1 | 	add	fp, #24
21860     A7 16 02 FB | 	rdlong	arg03, fp
21864     1C 4E 85 F1 | 	sub	fp, #28
21868     1C 18 06 F1 | 	add	arg04, #28
2186c     0C 17 62 FC | 	wrlong	arg03, arg04
21870                 | LR__3642
21870                 | ' 
21870                 | ' 			fp->sect = nsect;
21870                 | ' 		}
21870                 | ' 	}
21870                 | ' 
21870                 | ' 	return res ;
21870     0C 4E 05 F1 | 	add	fp, #12
21874     A7 FA 01 FB | 	rdlong	result1, fp
21878     0C 4E 85 F1 | 	sub	fp, #12
2187c                 | LR__3643
2187c     A7 F0 03 F6 | 	mov	ptra, fp
21880     B2 00 A0 FD | 	call	#popregs_
21884                 | _fatfs_cc_f_lseek_ret
21884     2D 00 64 FD | 	ret
21888                 | 
21888                 | _fatfs_cc_f_opendir
21888     01 4A 05 F6 | 	mov	COUNT_, #1
2188c     A8 00 A0 FD | 	call	#pushregs_
21890     14 F0 07 F1 | 	add	ptra, #20
21894     04 4E 05 F1 | 	add	fp, #4
21898     A7 12 62 FC | 	wrlong	arg01, fp
2189c     04 4E 05 F1 | 	add	fp, #4
218a0     A7 14 62 FC | 	wrlong	arg02, fp
218a4     04 4E 85 F1 | 	sub	fp, #4
218a8     A7 16 0A FB | 	rdlong	arg03, fp wz
218ac     04 4E 85 F1 | 	sub	fp, #4
218b0     09 FA 05 A6 |  if_e	mov	result1, #9
218b4     78 01 90 AD |  if_e	jmp	#LR__3656
218b8     08 4E 05 F1 | 	add	fp, #8
218bc     A7 12 02 F6 | 	mov	arg01, fp
218c0     08 4E 05 F1 | 	add	fp, #8
218c4     A7 14 02 F6 | 	mov	arg02, fp
218c8     10 4E 85 F1 | 	sub	fp, #16
218cc     00 16 06 F6 | 	mov	arg03, #0
218d0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
218d4     0C 4E 05 F1 | 	add	fp, #12
218d8     A7 FA 61 FC | 	wrlong	result1, fp
218dc     0C 4E 85 F1 | 	sub	fp, #12
218e0     00 FA 0D F2 | 	cmp	result1, #0 wz
218e4     20 01 90 5D |  if_ne	jmp	#LR__3655
218e8     04 4E 05 F1 | 	add	fp, #4
218ec     A7 16 02 FB | 	rdlong	arg03, fp
218f0     0C 4E 05 F1 | 	add	fp, #12
218f4     A7 FA 01 FB | 	rdlong	result1, fp
218f8     0B FB 61 FC | 	wrlong	result1, arg03
218fc     0C 4E 85 F1 | 	sub	fp, #12
21900     A7 12 02 FB | 	rdlong	arg01, fp
21904     04 4E 05 F1 | 	add	fp, #4
21908     A7 14 02 FB | 	rdlong	arg02, fp
2190c     08 4E 85 F1 | 	sub	fp, #8
21910     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
21914     0C 4E 05 F1 | 	add	fp, #12
21918     A7 FA 61 FC | 	wrlong	result1, fp
2191c     0C 4E 85 F1 | 	sub	fp, #12
21920     00 FA 0D F2 | 	cmp	result1, #0 wz
21924     C4 00 90 5D |  if_ne	jmp	#LR__3654
21928     04 4E 05 F1 | 	add	fp, #4
2192c     A7 16 02 FB | 	rdlong	arg03, fp
21930     04 4E 85 F1 | 	sub	fp, #4
21934     2B 16 06 F1 | 	add	arg03, #43
21938     0B 17 C2 FA | 	rdbyte	arg03, arg03
2193c     80 16 CE F7 | 	test	arg03, #128 wz
21940     58 00 90 5D |  if_ne	jmp	#LR__3652
21944     04 4E 05 F1 | 	add	fp, #4
21948     A7 16 02 FB | 	rdlong	arg03, fp
2194c     04 4E 85 F1 | 	sub	fp, #4
21950     06 16 06 F1 | 	add	arg03, #6
21954     0B 17 C2 FA | 	rdbyte	arg03, arg03
21958     10 16 CE F7 | 	test	arg03, #16 wz
2195c     30 00 90 AD |  if_e	jmp	#LR__3650
21960     04 4E 05 F1 | 	add	fp, #4
21964     A7 16 02 FB | 	rdlong	arg03, fp
21968     0B 1F 02 F6 | 	mov	local01, arg03
2196c     0C 4E 05 F1 | 	add	fp, #12
21970     A7 12 02 FB | 	rdlong	arg01, fp
21974     10 4E 85 F1 | 	sub	fp, #16
21978     1C 16 06 F1 | 	add	arg03, #28
2197c     0B 15 02 FB | 	rdlong	arg02, arg03
21980     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
21984     08 1E 06 F1 | 	add	local01, #8
21988     0F FB 61 FC | 	wrlong	result1, local01
2198c     0C 00 90 FD | 	jmp	#LR__3651
21990                 | LR__3650
21990     0C 4E 05 F1 | 	add	fp, #12
21994     A7 0A 68 FC | 	wrlong	#5, fp
21998     0C 4E 85 F1 | 	sub	fp, #12
2199c                 | LR__3651
2199c                 | LR__3652
2199c     0C 4E 05 F1 | 	add	fp, #12
219a0     A7 1E 0A FB | 	rdlong	local01, fp wz
219a4     0C 4E 85 F1 | 	sub	fp, #12
219a8     40 00 90 5D |  if_ne	jmp	#LR__3653
219ac     04 4E 05 F1 | 	add	fp, #4
219b0     A7 1E 02 FB | 	rdlong	local01, fp
219b4     0C 4E 05 F1 | 	add	fp, #12
219b8     A7 16 02 FB | 	rdlong	arg03, fp
219bc     06 16 06 F1 | 	add	arg03, #6
219c0     0B 17 E2 FA | 	rdword	arg03, arg03
219c4     04 1E 06 F1 | 	add	local01, #4
219c8     0F 17 52 FC | 	wrword	arg03, local01
219cc     0C 4E 85 F1 | 	sub	fp, #12
219d0     A7 12 02 FB | 	rdlong	arg01, fp
219d4     04 4E 85 F1 | 	sub	fp, #4
219d8     00 14 06 F6 | 	mov	arg02, #0
219dc     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
219e0     0C 4E 05 F1 | 	add	fp, #12
219e4     A7 FA 61 FC | 	wrlong	result1, fp
219e8     0C 4E 85 F1 | 	sub	fp, #12
219ec                 | LR__3653
219ec                 | LR__3654
219ec     0C 4E 05 F1 | 	add	fp, #12
219f0     A7 1E 02 FB | 	rdlong	local01, fp
219f4     0C 4E 85 F1 | 	sub	fp, #12
219f8     04 1E 0E F2 | 	cmp	local01, #4 wz
219fc     0C 4E 05 A1 |  if_e	add	fp, #12
21a00     A7 0A 68 AC |  if_e	wrlong	#5, fp
21a04     0C 4E 85 A1 |  if_e	sub	fp, #12
21a08                 | LR__3655
21a08     0C 4E 05 F1 | 	add	fp, #12
21a0c     A7 1E 0A FB | 	rdlong	local01, fp wz
21a10     0C 4E 85 F1 | 	sub	fp, #12
21a14     04 4E 05 51 |  if_ne	add	fp, #4
21a18     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21a1c     04 4E 85 51 |  if_ne	sub	fp, #4
21a20     0F 01 68 5C |  if_ne	wrlong	#0, local01
21a24                 | ' 
21a24                 | ' 	return res ;
21a24     0C 4E 05 F1 | 	add	fp, #12
21a28     A7 FA 01 FB | 	rdlong	result1, fp
21a2c     0C 4E 85 F1 | 	sub	fp, #12
21a30                 | LR__3656
21a30     A7 F0 03 F6 | 	mov	ptra, fp
21a34     B2 00 A0 FD | 	call	#popregs_
21a38                 | _fatfs_cc_f_opendir_ret
21a38     2D 00 64 FD | 	ret
21a3c                 | 
21a3c                 | _fatfs_cc_f_closedir
21a3c     00 4A 05 F6 | 	mov	COUNT_, #0
21a40     A8 00 A0 FD | 	call	#pushregs_
21a44     10 F0 07 F1 | 	add	ptra, #16
21a48     04 4E 05 F1 | 	add	fp, #4
21a4c     A7 12 62 FC | 	wrlong	arg01, fp
21a50     08 4E 05 F1 | 	add	fp, #8
21a54     A7 14 02 F6 | 	mov	arg02, fp
21a58     0C 4E 85 F1 | 	sub	fp, #12
21a5c     C0 DD BF FD | 	call	#_fatfs_cc_validate
21a60     08 4E 05 F1 | 	add	fp, #8
21a64     A7 FA 61 FC | 	wrlong	result1, fp
21a68     08 4E 85 F1 | 	sub	fp, #8
21a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
21a70     04 4E 05 A1 |  if_e	add	fp, #4
21a74     A7 FA 01 AB |  if_e	rdlong	result1, fp
21a78     04 4E 85 A1 |  if_e	sub	fp, #4
21a7c     FD 00 68 AC |  if_e	wrlong	#0, result1
21a80                 | ' 
21a80                 | ' 
21a80                 | ' 
21a80                 | ' 
21a80                 | ' 		dp->obj.fs = 0;
21a80                 | ' #line 4633 "ff.c"
21a80                 | ' 	}
21a80                 | ' 	return res;
21a80     08 4E 05 F1 | 	add	fp, #8
21a84     A7 FA 01 FB | 	rdlong	result1, fp
21a88     08 4E 85 F1 | 	sub	fp, #8
21a8c     A7 F0 03 F6 | 	mov	ptra, fp
21a90     B2 00 A0 FD | 	call	#popregs_
21a94                 | _fatfs_cc_f_closedir_ret
21a94     2D 00 64 FD | 	ret
21a98                 | 
21a98                 | _fatfs_cc_f_readdir
21a98     00 4A 05 F6 | 	mov	COUNT_, #0
21a9c     A8 00 A0 FD | 	call	#pushregs_
21aa0     14 F0 07 F1 | 	add	ptra, #20
21aa4     04 4E 05 F1 | 	add	fp, #4
21aa8     A7 12 62 FC | 	wrlong	arg01, fp
21aac     04 4E 05 F1 | 	add	fp, #4
21ab0     A7 14 62 FC | 	wrlong	arg02, fp
21ab4     04 4E 85 F1 | 	sub	fp, #4
21ab8     A7 12 02 FB | 	rdlong	arg01, fp
21abc     0C 4E 05 F1 | 	add	fp, #12
21ac0     A7 14 02 F6 | 	mov	arg02, fp
21ac4     10 4E 85 F1 | 	sub	fp, #16
21ac8     54 DD BF FD | 	call	#_fatfs_cc_validate
21acc     0C 4E 05 F1 | 	add	fp, #12
21ad0     A7 FA 61 FC | 	wrlong	result1, fp
21ad4     0C 4E 85 F1 | 	sub	fp, #12
21ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
21adc     BC 00 90 5D |  if_ne	jmp	#LR__3663
21ae0     08 4E 05 F1 | 	add	fp, #8
21ae4     A7 FA 09 FB | 	rdlong	result1, fp wz
21ae8     08 4E 85 F1 | 	sub	fp, #8
21aec     24 00 90 5D |  if_ne	jmp	#LR__3660
21af0     04 4E 05 F1 | 	add	fp, #4
21af4     A7 12 02 FB | 	rdlong	arg01, fp
21af8     04 4E 85 F1 | 	sub	fp, #4
21afc     00 14 06 F6 | 	mov	arg02, #0
21b00     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
21b04     0C 4E 05 F1 | 	add	fp, #12
21b08     A7 FA 61 FC | 	wrlong	result1, fp
21b0c     0C 4E 85 F1 | 	sub	fp, #12
21b10     88 00 90 FD | 	jmp	#LR__3662
21b14                 | LR__3660
21b14     04 4E 05 F1 | 	add	fp, #4
21b18     A7 12 02 FB | 	rdlong	arg01, fp
21b1c     04 4E 85 F1 | 	sub	fp, #4
21b20     00 14 06 F6 | 	mov	arg02, #0
21b24     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
21b28     0C 4E 05 F1 | 	add	fp, #12
21b2c     A7 FA 61 FC | 	wrlong	result1, fp
21b30     0C 4E 85 F1 | 	sub	fp, #12
21b34     04 FA 0D F2 | 	cmp	result1, #4 wz
21b38     0C 4E 05 A1 |  if_e	add	fp, #12
21b3c     A7 00 68 AC |  if_e	wrlong	#0, fp
21b40     0C 4E 85 A1 |  if_e	sub	fp, #12
21b44     0C 4E 05 F1 | 	add	fp, #12
21b48     A7 FA 09 FB | 	rdlong	result1, fp wz
21b4c     0C 4E 85 F1 | 	sub	fp, #12
21b50     48 00 90 5D |  if_ne	jmp	#LR__3661
21b54     04 4E 05 F1 | 	add	fp, #4
21b58     A7 12 02 FB | 	rdlong	arg01, fp
21b5c     04 4E 05 F1 | 	add	fp, #4
21b60     A7 14 02 FB | 	rdlong	arg02, fp
21b64     08 4E 85 F1 | 	sub	fp, #8
21b68     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
21b6c     04 4E 05 F1 | 	add	fp, #4
21b70     A7 12 02 FB | 	rdlong	arg01, fp
21b74     04 4E 85 F1 | 	sub	fp, #4
21b78     00 14 06 F6 | 	mov	arg02, #0
21b7c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
21b80     0C 4E 05 F1 | 	add	fp, #12
21b84     A7 FA 61 FC | 	wrlong	result1, fp
21b88     0C 4E 85 F1 | 	sub	fp, #12
21b8c     04 FA 0D F2 | 	cmp	result1, #4 wz
21b90     0C 4E 05 A1 |  if_e	add	fp, #12
21b94     A7 00 68 AC |  if_e	wrlong	#0, fp
21b98     0C 4E 85 A1 |  if_e	sub	fp, #12
21b9c                 | LR__3661
21b9c                 | LR__3662
21b9c                 | LR__3663
21b9c                 | ' 			}
21b9c                 | ' 			;
21b9c                 | ' 		}
21b9c                 | ' 	}
21b9c                 | ' 	return res ;
21b9c     0C 4E 05 F1 | 	add	fp, #12
21ba0     A7 FA 01 FB | 	rdlong	result1, fp
21ba4     0C 4E 85 F1 | 	sub	fp, #12
21ba8     A7 F0 03 F6 | 	mov	ptra, fp
21bac     B2 00 A0 FD | 	call	#popregs_
21bb0                 | _fatfs_cc_f_readdir_ret
21bb0     2D 00 64 FD | 	ret
21bb4                 | 
21bb4                 | _fatfs_cc_f_stat
21bb4     00 4A 05 F6 | 	mov	COUNT_, #0
21bb8     A8 00 A0 FD | 	call	#pushregs_
21bbc     40 F0 07 F1 | 	add	ptra, #64
21bc0     04 4E 05 F1 | 	add	fp, #4
21bc4     A7 12 62 FC | 	wrlong	arg01, fp
21bc8     04 4E 05 F1 | 	add	fp, #4
21bcc     A7 14 62 FC | 	wrlong	arg02, fp
21bd0     04 4E 85 F1 | 	sub	fp, #4
21bd4     A7 12 02 F6 | 	mov	arg01, fp
21bd8     0C 4E 05 F1 | 	add	fp, #12
21bdc     A7 14 02 F6 | 	mov	arg02, fp
21be0     10 4E 85 F1 | 	sub	fp, #16
21be4     00 16 06 F6 | 	mov	arg03, #0
21be8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
21bec     0C 4E 05 F1 | 	add	fp, #12
21bf0     A7 FA 61 FC | 	wrlong	result1, fp
21bf4     0C 4E 85 F1 | 	sub	fp, #12
21bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
21bfc     74 00 90 5D |  if_ne	jmp	#LR__3673
21c00     10 4E 05 F1 | 	add	fp, #16
21c04     A7 12 02 F6 | 	mov	arg01, fp
21c08     0C 4E 85 F1 | 	sub	fp, #12
21c0c     A7 14 02 FB | 	rdlong	arg02, fp
21c10     04 4E 85 F1 | 	sub	fp, #4
21c14     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
21c18     0C 4E 05 F1 | 	add	fp, #12
21c1c     A7 FA 61 FC | 	wrlong	result1, fp
21c20     0C 4E 85 F1 | 	sub	fp, #12
21c24     00 FA 0D F2 | 	cmp	result1, #0 wz
21c28     48 00 90 5D |  if_ne	jmp	#LR__3672
21c2c     3B 4E 05 F1 | 	add	fp, #59
21c30     A7 FA C1 FA | 	rdbyte	result1, fp
21c34     3B 4E 85 F1 | 	sub	fp, #59
21c38     80 FA CD F7 | 	test	result1, #128 wz
21c3c     0C 4E 05 51 |  if_ne	add	fp, #12
21c40     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21c44     0C 4E 85 51 |  if_ne	sub	fp, #12
21c48     28 00 90 5D |  if_ne	jmp	#LR__3671
21c4c     08 4E 05 F1 | 	add	fp, #8
21c50     A7 FA 09 FB | 	rdlong	result1, fp wz
21c54     08 4E 85 F1 | 	sub	fp, #8
21c58     18 00 90 AD |  if_e	jmp	#LR__3670
21c5c     10 4E 05 F1 | 	add	fp, #16
21c60     A7 12 02 F6 | 	mov	arg01, fp
21c64     08 4E 85 F1 | 	sub	fp, #8
21c68     A7 14 02 FB | 	rdlong	arg02, fp
21c6c     08 4E 85 F1 | 	sub	fp, #8
21c70     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
21c74                 | LR__3670
21c74                 | LR__3671
21c74                 | LR__3672
21c74                 | LR__3673
21c74                 | ' 			}
21c74                 | ' 		}
21c74                 | ' 		;
21c74                 | ' 	}
21c74                 | ' 
21c74                 | ' 	return res ;
21c74     0C 4E 05 F1 | 	add	fp, #12
21c78     A7 FA 01 FB | 	rdlong	result1, fp
21c7c     0C 4E 85 F1 | 	sub	fp, #12
21c80     A7 F0 03 F6 | 	mov	ptra, fp
21c84     B2 00 A0 FD | 	call	#popregs_
21c88                 | _fatfs_cc_f_stat_ret
21c88     2D 00 64 FD | 	ret
21c8c                 | 
21c8c                 | _fatfs_cc_f_unlink
21c8c     00 4A 05 F6 | 	mov	COUNT_, #0
21c90     A8 00 A0 FD | 	call	#pushregs_
21c94     74 F0 07 F1 | 	add	ptra, #116
21c98     04 4E 05 F1 | 	add	fp, #4
21c9c     A7 12 62 FC | 	wrlong	arg01, fp
21ca0     68 4E 05 F1 | 	add	fp, #104
21ca4     A7 00 68 FC | 	wrlong	#0, fp
21ca8     68 4E 85 F1 | 	sub	fp, #104
21cac     A7 12 02 F6 | 	mov	arg01, fp
21cb0     6C 4E 05 F1 | 	add	fp, #108
21cb4     A7 14 02 F6 | 	mov	arg02, fp
21cb8     70 4E 85 F1 | 	sub	fp, #112
21cbc     02 16 06 F6 | 	mov	arg03, #2
21cc0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
21cc4     08 4E 05 F1 | 	add	fp, #8
21cc8     A7 FA 61 FC | 	wrlong	result1, fp
21ccc     08 4E 85 F1 | 	sub	fp, #8
21cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
21cd4     E4 01 90 5D |  if_ne	jmp	#LR__3688
21cd8     70 4E 05 F1 | 	add	fp, #112
21cdc     A7 16 02 FB | 	rdlong	arg03, fp
21ce0     64 4E 85 F1 | 	sub	fp, #100
21ce4     A7 16 62 FC | 	wrlong	arg03, fp
21ce8     A7 12 02 F6 | 	mov	arg01, fp
21cec     08 4E 85 F1 | 	sub	fp, #8
21cf0     A7 14 02 FB | 	rdlong	arg02, fp
21cf4     04 4E 85 F1 | 	sub	fp, #4
21cf8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
21cfc     08 4E 05 F1 | 	add	fp, #8
21d00     A7 FA 61 FC | 	wrlong	result1, fp
21d04     00 FA 4D F2 | 	cmps	result1, #0 wz
21d08     08 4E 85 F1 | 	sub	fp, #8
21d0c     AC 01 90 5D |  if_ne	jmp	#LR__3687
21d10     37 4E 05 F1 | 	add	fp, #55
21d14     A7 FA C1 FA | 	rdbyte	result1, fp
21d18     37 4E 85 F1 | 	sub	fp, #55
21d1c     80 FA CD F7 | 	test	result1, #128 wz
21d20     08 4E 05 51 |  if_ne	add	fp, #8
21d24     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21d28     08 4E 85 51 |  if_ne	sub	fp, #8
21d2c     1C 00 90 5D |  if_ne	jmp	#LR__3680
21d30     12 4E 05 F1 | 	add	fp, #18
21d34     A7 FA C1 FA | 	rdbyte	result1, fp
21d38     12 4E 85 F1 | 	sub	fp, #18
21d3c     01 FA CD F7 | 	test	result1, #1 wz
21d40     08 4E 05 51 |  if_ne	add	fp, #8
21d44     A7 0E 68 5C |  if_ne	wrlong	#7, fp
21d48     08 4E 85 51 |  if_ne	sub	fp, #8
21d4c                 | LR__3680
21d4c     08 4E 05 F1 | 	add	fp, #8
21d50     A7 FA 09 FB | 	rdlong	result1, fp wz
21d54     08 4E 85 F1 | 	sub	fp, #8
21d58     C8 00 90 5D |  if_ne	jmp	#LR__3683
21d5c     70 4E 05 F1 | 	add	fp, #112
21d60     A7 12 02 FB | 	rdlong	arg01, fp
21d64     48 4E 85 F1 | 	sub	fp, #72
21d68     A7 14 02 FB | 	rdlong	arg02, fp
21d6c     28 4E 85 F1 | 	sub	fp, #40
21d70     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
21d74     6C 4E 05 F1 | 	add	fp, #108
21d78     A7 FA 61 FC | 	wrlong	result1, fp
21d7c     5A 4E 85 F1 | 	sub	fp, #90
21d80     A7 FA C1 FA | 	rdbyte	result1, fp
21d84     12 4E 85 F1 | 	sub	fp, #18
21d88     10 FA CD F7 | 	test	result1, #16 wz
21d8c     94 00 90 AD |  if_e	jmp	#LR__3682
21d90     70 4E 05 F1 | 	add	fp, #112
21d94     A7 FA 01 FB | 	rdlong	result1, fp
21d98     34 4E 85 F1 | 	sub	fp, #52
21d9c     A7 FA 61 FC | 	wrlong	result1, fp
21da0     30 4E 05 F1 | 	add	fp, #48
21da4     A7 16 02 FB | 	rdlong	arg03, fp
21da8     28 4E 85 F1 | 	sub	fp, #40
21dac     A7 16 62 FC | 	wrlong	arg03, fp
21db0     08 4E 85 F1 | 	sub	fp, #8
21db4     A7 12 02 F6 | 	mov	arg01, fp
21db8     3C 4E 85 F1 | 	sub	fp, #60
21dbc     00 14 06 F6 | 	mov	arg02, #0
21dc0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
21dc4     08 4E 05 F1 | 	add	fp, #8
21dc8     A7 FA 61 FC | 	wrlong	result1, fp
21dcc     08 4E 85 F1 | 	sub	fp, #8
21dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
21dd4     4C 00 90 5D |  if_ne	jmp	#LR__3681
21dd8     3C 4E 05 F1 | 	add	fp, #60
21ddc     A7 12 02 F6 | 	mov	arg01, fp
21de0     3C 4E 85 F1 | 	sub	fp, #60
21de4     00 14 06 F6 | 	mov	arg02, #0
21de8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
21dec     08 4E 05 F1 | 	add	fp, #8
21df0     A7 FA 61 FC | 	wrlong	result1, fp
21df4     00 FA 4D F2 | 	cmps	result1, #0 wz
21df8     08 4E 85 F1 | 	sub	fp, #8
21dfc     08 4E 05 A1 |  if_e	add	fp, #8
21e00     A7 0E 68 AC |  if_e	wrlong	#7, fp
21e04     08 4E 85 A1 |  if_e	sub	fp, #8
21e08     08 4E 05 F1 | 	add	fp, #8
21e0c     A7 FA 01 FB | 	rdlong	result1, fp
21e10     08 4E 85 F1 | 	sub	fp, #8
21e14     04 FA 0D F2 | 	cmp	result1, #4 wz
21e18     08 4E 05 A1 |  if_e	add	fp, #8
21e1c     A7 00 68 AC |  if_e	wrlong	#0, fp
21e20     08 4E 85 A1 |  if_e	sub	fp, #8
21e24                 | LR__3681
21e24                 | LR__3682
21e24                 | LR__3683
21e24     08 4E 05 F1 | 	add	fp, #8
21e28     A7 FA 09 FB | 	rdlong	result1, fp wz
21e2c     08 4E 85 F1 | 	sub	fp, #8
21e30     88 00 90 5D |  if_ne	jmp	#LR__3686
21e34     0C 4E 05 F1 | 	add	fp, #12
21e38     A7 12 02 F6 | 	mov	arg01, fp
21e3c     0C 4E 85 F1 | 	sub	fp, #12
21e40     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
21e44     08 4E 05 F1 | 	add	fp, #8
21e48     A7 FA 61 FC | 	wrlong	result1, fp
21e4c     08 4E 85 F1 | 	sub	fp, #8
21e50     00 FA 0D F2 | 	cmp	result1, #0 wz
21e54     38 00 90 5D |  if_ne	jmp	#LR__3684
21e58     6C 4E 05 F1 | 	add	fp, #108
21e5c     A7 FA 09 FB | 	rdlong	result1, fp wz
21e60     6C 4E 85 F1 | 	sub	fp, #108
21e64     28 00 90 AD |  if_e	jmp	#LR__3684
21e68     0C 4E 05 F1 | 	add	fp, #12
21e6c     A7 12 02 F6 | 	mov	arg01, fp
21e70     60 4E 05 F1 | 	add	fp, #96
21e74     A7 14 02 FB | 	rdlong	arg02, fp
21e78     6C 4E 85 F1 | 	sub	fp, #108
21e7c     00 16 06 F6 | 	mov	arg03, #0
21e80     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
21e84     08 4E 05 F1 | 	add	fp, #8
21e88     A7 FA 61 FC | 	wrlong	result1, fp
21e8c     08 4E 85 F1 | 	sub	fp, #8
21e90                 | LR__3684
21e90     08 4E 05 F1 | 	add	fp, #8
21e94     A7 FA 09 FB | 	rdlong	result1, fp wz
21e98     08 4E 85 F1 | 	sub	fp, #8
21e9c     1C 00 90 5D |  if_ne	jmp	#LR__3685
21ea0     70 4E 05 F1 | 	add	fp, #112
21ea4     A7 12 02 FB | 	rdlong	arg01, fp
21ea8     70 4E 85 F1 | 	sub	fp, #112
21eac     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
21eb0     08 4E 05 F1 | 	add	fp, #8
21eb4     A7 FA 61 FC | 	wrlong	result1, fp
21eb8     08 4E 85 F1 | 	sub	fp, #8
21ebc                 | LR__3685
21ebc                 | LR__3686
21ebc                 | LR__3687
21ebc                 | LR__3688
21ebc                 | ' 			}
21ebc                 | ' 		}
21ebc                 | ' 		;
21ebc                 | ' 	}
21ebc                 | ' 
21ebc                 | ' 	return res ;
21ebc     08 4E 05 F1 | 	add	fp, #8
21ec0     A7 FA 01 FB | 	rdlong	result1, fp
21ec4     08 4E 85 F1 | 	sub	fp, #8
21ec8     A7 F0 03 F6 | 	mov	ptra, fp
21ecc     B2 00 A0 FD | 	call	#popregs_
21ed0                 | _fatfs_cc_f_unlink_ret
21ed0     2D 00 64 FD | 	ret
21ed4                 | 
21ed4                 | _fatfs_cc_f_mkdir
21ed4     00 4A 05 F6 | 	mov	COUNT_, #0
21ed8     A8 00 A0 FD | 	call	#pushregs_
21edc     5C F0 07 F1 | 	add	ptra, #92
21ee0     04 4E 05 F1 | 	add	fp, #4
21ee4     A7 12 62 FC | 	wrlong	arg01, fp
21ee8     A7 12 02 F6 | 	mov	arg01, fp
21eec     48 4E 05 F1 | 	add	fp, #72
21ef0     A7 14 02 F6 | 	mov	arg02, fp
21ef4     4C 4E 85 F1 | 	sub	fp, #76
21ef8     02 16 06 F6 | 	mov	arg03, #2
21efc     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
21f00     08 4E 05 F1 | 	add	fp, #8
21f04     A7 FA 61 FC | 	wrlong	result1, fp
21f08     08 4E 85 F1 | 	sub	fp, #8
21f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
21f10     C4 02 90 5D |  if_ne	jmp	#LR__3695
21f14     4C 4E 05 F1 | 	add	fp, #76
21f18     A7 16 02 FB | 	rdlong	arg03, fp
21f1c     40 4E 85 F1 | 	sub	fp, #64
21f20     A7 16 62 FC | 	wrlong	arg03, fp
21f24     A7 12 02 F6 | 	mov	arg01, fp
21f28     08 4E 85 F1 | 	sub	fp, #8
21f2c     A7 14 02 FB | 	rdlong	arg02, fp
21f30     04 4E 85 F1 | 	sub	fp, #4
21f34     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
21f38     08 4E 05 F1 | 	add	fp, #8
21f3c     A7 FA 61 FC | 	wrlong	result1, fp
21f40     00 FA 4D F2 | 	cmps	result1, #0 wz
21f44     08 4E 85 F1 | 	sub	fp, #8
21f48     08 4E 05 A1 |  if_e	add	fp, #8
21f4c     A7 10 68 AC |  if_e	wrlong	#8, fp
21f50     08 4E 85 A1 |  if_e	sub	fp, #8
21f54     08 4E 05 F1 | 	add	fp, #8
21f58     A7 FA 01 FB | 	rdlong	result1, fp
21f5c     08 4E 85 F1 | 	sub	fp, #8
21f60     04 FA 0D F2 | 	cmp	result1, #4 wz
21f64     70 02 90 5D |  if_ne	jmp	#LR__3694
21f68     4C 4E 05 F1 | 	add	fp, #76
21f6c     A7 16 02 FB | 	rdlong	arg03, fp
21f70     10 4E 85 F1 | 	sub	fp, #16
21f74     A7 16 62 FC | 	wrlong	arg03, fp
21f78     A7 12 02 F6 | 	mov	arg01, fp
21f7c     3C 4E 85 F1 | 	sub	fp, #60
21f80     00 14 06 F6 | 	mov	arg02, #0
21f84     04 AC BF FD | 	call	#_fatfs_cc_create_chain
21f88     50 4E 05 F1 | 	add	fp, #80
21f8c     A7 FA 61 FC | 	wrlong	result1, fp
21f90     48 4E 85 F1 | 	sub	fp, #72
21f94     A7 00 68 FC | 	wrlong	#0, fp
21f98     48 4E 05 F1 | 	add	fp, #72
21f9c     A7 FA 09 FB | 	rdlong	result1, fp wz
21fa0     50 4E 85 F1 | 	sub	fp, #80
21fa4     08 4E 05 A1 |  if_e	add	fp, #8
21fa8     A7 0E 68 AC |  if_e	wrlong	#7, fp
21fac     08 4E 85 A1 |  if_e	sub	fp, #8
21fb0     50 4E 05 F1 | 	add	fp, #80
21fb4     A7 FA 01 FB | 	rdlong	result1, fp
21fb8     50 4E 85 F1 | 	sub	fp, #80
21fbc     01 FA 0D F2 | 	cmp	result1, #1 wz
21fc0     08 4E 05 A1 |  if_e	add	fp, #8
21fc4     A7 04 68 AC |  if_e	wrlong	#2, fp
21fc8     08 4E 85 A1 |  if_e	sub	fp, #8
21fcc     50 4E 05 F1 | 	add	fp, #80
21fd0     A7 16 02 FB | 	rdlong	arg03, fp
21fd4     50 4E 85 F1 | 	sub	fp, #80
21fd8     FF FF 7F FF 
21fdc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
21fe0     08 4E 05 A1 |  if_e	add	fp, #8
21fe4     A7 02 68 AC |  if_e	wrlong	#1, fp
21fe8     08 4E 85 A1 |  if_e	sub	fp, #8
21fec     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
21ff0     58 4E 05 F1 | 	add	fp, #88
21ff4     A7 FA 61 FC | 	wrlong	result1, fp
21ff8     50 4E 85 F1 | 	sub	fp, #80
21ffc     A7 FA 09 FB | 	rdlong	result1, fp wz
22000     08 4E 85 F1 | 	sub	fp, #8
22004     1C 01 90 5D |  if_ne	jmp	#LR__3691
22008     4C 4E 05 F1 | 	add	fp, #76
2200c     A7 12 02 FB | 	rdlong	arg01, fp
22010     04 4E 05 F1 | 	add	fp, #4
22014     A7 14 02 FB | 	rdlong	arg02, fp
22018     50 4E 85 F1 | 	sub	fp, #80
2201c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
22020     08 4E 05 F1 | 	add	fp, #8
22024     A7 FA 61 FC | 	wrlong	result1, fp
22028     00 FA 4D F2 | 	cmps	result1, #0 wz
2202c     08 4E 85 F1 | 	sub	fp, #8
22030     F0 00 90 5D |  if_ne	jmp	#LR__3690
22034     4C 4E 05 F1 | 	add	fp, #76
22038     A7 12 02 FB | 	rdlong	arg01, fp
2203c     4C 4E 85 F1 | 	sub	fp, #76
22040     34 12 06 F1 | 	add	arg01, #52
22044     20 14 06 F6 | 	mov	arg02, #32
22048     0B 16 06 F6 | 	mov	arg03, #11
2204c     98 00 A0 FD | 	call	#\builtin_bytefill_
22050     4C 4E 05 F1 | 	add	fp, #76
22054     A7 FA 01 FB | 	rdlong	result1, fp
22058     34 FA 05 F1 | 	add	result1, #52
2205c     FD 5C 48 FC | 	wrbyte	#46, result1
22060     A7 16 02 FB | 	rdlong	arg03, fp
22064     3F 16 06 F1 | 	add	arg03, #63
22068     0B 21 48 FC | 	wrbyte	#16, arg03
2206c     A7 12 02 FB | 	rdlong	arg01, fp
22070     4A 12 06 F1 | 	add	arg01, #74
22074     0C 4E 05 F1 | 	add	fp, #12
22078     A7 14 02 FB | 	rdlong	arg02, fp
2207c     09 15 62 FC | 	wrlong	arg02, arg01
22080     0C 4E 85 F1 | 	sub	fp, #12
22084     A7 14 02 FB | 	rdlong	arg02, fp
22088     0A 13 02 F6 | 	mov	arg01, arg02
2208c     34 14 06 F1 | 	add	arg02, #52
22090     04 4E 05 F1 | 	add	fp, #4
22094     A7 16 02 FB | 	rdlong	arg03, fp
22098     50 4E 85 F1 | 	sub	fp, #80
2209c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
220a0     4C 4E 05 F1 | 	add	fp, #76
220a4     A7 14 02 FB | 	rdlong	arg02, fp
220a8     0A 13 02 F6 | 	mov	arg01, arg02
220ac     54 12 06 F1 | 	add	arg01, #84
220b0     4C 4E 85 F1 | 	sub	fp, #76
220b4     34 14 06 F1 | 	add	arg02, #52
220b8     20 16 06 F6 | 	mov	arg03, #32
220bc     B4 30 BF FD | 	call	#__system____builtin_memmove
220c0     4C 4E 05 F1 | 	add	fp, #76
220c4     A7 16 02 FB | 	rdlong	arg03, fp
220c8     55 16 06 F1 | 	add	arg03, #85
220cc     0B 5D 48 FC | 	wrbyte	#46, arg03
220d0     38 4E 85 F1 | 	sub	fp, #56
220d4     A7 16 02 FB | 	rdlong	arg03, fp
220d8     40 4E 05 F1 | 	add	fp, #64
220dc     A7 16 62 FC | 	wrlong	arg03, fp
220e0     08 4E 85 F1 | 	sub	fp, #8
220e4     A7 14 02 FB | 	rdlong	arg02, fp
220e8     0A 13 02 F6 | 	mov	arg01, arg02
220ec     54 14 06 F1 | 	add	arg02, #84
220f0     4C 4E 85 F1 | 	sub	fp, #76
220f4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
220f8     4C 4E 05 F1 | 	add	fp, #76
220fc     A7 16 02 FB | 	rdlong	arg03, fp
22100     03 16 06 F1 | 	add	arg03, #3
22104     0B 03 48 FC | 	wrbyte	#1, arg03
22108     40 4E 85 F1 | 	sub	fp, #64
2210c     A7 12 02 F6 | 	mov	arg01, fp
22110     0C 4E 85 F1 | 	sub	fp, #12
22114     44 BA BF FD | 	call	#_fatfs_cc_dir_register
22118     08 4E 05 F1 | 	add	fp, #8
2211c     A7 FA 61 FC | 	wrlong	result1, fp
22120     08 4E 85 F1 | 	sub	fp, #8
22124                 | LR__3690
22124                 | LR__3691
22124     08 4E 05 F1 | 	add	fp, #8
22128     A7 FA 09 FB | 	rdlong	result1, fp wz
2212c     08 4E 85 F1 | 	sub	fp, #8
22130     88 00 90 5D |  if_ne	jmp	#LR__3692
22134     28 4E 05 F1 | 	add	fp, #40
22138     A7 12 02 FB | 	rdlong	arg01, fp
2213c     16 12 06 F1 | 	add	arg01, #22
22140     30 4E 05 F1 | 	add	fp, #48
22144     A7 14 02 FB | 	rdlong	arg02, fp
22148     09 15 62 FC | 	wrlong	arg02, arg01
2214c     0C 4E 85 F1 | 	sub	fp, #12
22150     A7 12 02 FB | 	rdlong	arg01, fp
22154     24 4E 85 F1 | 	sub	fp, #36
22158     A7 14 02 FB | 	rdlong	arg02, fp
2215c     28 4E 05 F1 | 	add	fp, #40
22160     A7 16 02 FB | 	rdlong	arg03, fp
22164     50 4E 85 F1 | 	sub	fp, #80
22168     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2216c     28 4E 05 F1 | 	add	fp, #40
22170     A7 FA 01 FB | 	rdlong	result1, fp
22174     0B FA 05 F1 | 	add	result1, #11
22178     FD 20 48 FC | 	wrbyte	#16, result1
2217c     24 4E 05 F1 | 	add	fp, #36
22180     A7 FA 01 FB | 	rdlong	result1, fp
22184     03 FA 05 F1 | 	add	result1, #3
22188     FD 02 48 FC | 	wrbyte	#1, result1
2218c     44 4E 85 F1 | 	sub	fp, #68
22190     A7 FA 09 FB | 	rdlong	result1, fp wz
22194     08 4E 85 F1 | 	sub	fp, #8
22198     3C 00 90 5D |  if_ne	jmp	#LR__3693
2219c     4C 4E 05 F1 | 	add	fp, #76
221a0     A7 12 02 FB | 	rdlong	arg01, fp
221a4     4C 4E 85 F1 | 	sub	fp, #76
221a8     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
221ac     08 4E 05 F1 | 	add	fp, #8
221b0     A7 FA 61 FC | 	wrlong	result1, fp
221b4     08 4E 85 F1 | 	sub	fp, #8
221b8     1C 00 90 FD | 	jmp	#LR__3693
221bc                 | LR__3692
221bc     3C 4E 05 F1 | 	add	fp, #60
221c0     A7 12 02 F6 | 	mov	arg01, fp
221c4     14 4E 05 F1 | 	add	fp, #20
221c8     A7 14 02 FB | 	rdlong	arg02, fp
221cc     50 4E 85 F1 | 	sub	fp, #80
221d0     00 16 06 F6 | 	mov	arg03, #0
221d4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
221d8                 | LR__3693
221d8                 | LR__3694
221d8                 | LR__3695
221d8                 | ' 				remove_chain(&sobj, dcl, 0);
221d8                 | ' 			}
221d8                 | ' 		}
221d8                 | ' 		;
221d8                 | ' 	}
221d8                 | ' 
221d8                 | ' 	return res ;
221d8     08 4E 05 F1 | 	add	fp, #8
221dc     A7 FA 01 FB | 	rdlong	result1, fp
221e0     08 4E 85 F1 | 	sub	fp, #8
221e4     A7 F0 03 F6 | 	mov	ptra, fp
221e8     B2 00 A0 FD | 	call	#popregs_
221ec                 | _fatfs_cc_f_mkdir_ret
221ec     2D 00 64 FD | 	ret
221f0                 | 
221f0                 | _fatfs_cc_f_rename
221f0     01 4A 05 F6 | 	mov	COUNT_, #1
221f4     A8 00 A0 FD | 	call	#pushregs_
221f8     9C F0 07 F1 | 	add	ptra, #156
221fc     04 4E 05 F1 | 	add	fp, #4
22200     A7 12 62 FC | 	wrlong	arg01, fp
22204     04 4E 05 F1 | 	add	fp, #4
22208     A7 14 62 FC | 	wrlong	arg02, fp
2220c     A7 12 02 F6 | 	mov	arg01, fp
22210     08 4E 85 F1 | 	sub	fp, #8
22214     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
22218     04 4E 05 F1 | 	add	fp, #4
2221c     A7 12 02 F6 | 	mov	arg01, fp
22220     6C 4E 05 F1 | 	add	fp, #108
22224     A7 14 02 F6 | 	mov	arg02, fp
22228     70 4E 85 F1 | 	sub	fp, #112
2222c     02 16 06 F6 | 	mov	arg03, #2
22230     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
22234     0C 4E 05 F1 | 	add	fp, #12
22238     A7 FA 61 FC | 	wrlong	result1, fp
2223c     0C 4E 85 F1 | 	sub	fp, #12
22240     00 FA 0D F2 | 	cmp	result1, #0 wz
22244     44 03 90 5D |  if_ne	jmp	#LR__3713
22248     70 4E 05 F1 | 	add	fp, #112
2224c     A7 16 02 FB | 	rdlong	arg03, fp
22250     60 4E 85 F1 | 	sub	fp, #96
22254     A7 16 62 FC | 	wrlong	arg03, fp
22258     A7 12 02 F6 | 	mov	arg01, fp
2225c     0C 4E 85 F1 | 	sub	fp, #12
22260     A7 14 02 FB | 	rdlong	arg02, fp
22264     04 4E 85 F1 | 	sub	fp, #4
22268     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2226c     0C 4E 05 F1 | 	add	fp, #12
22270     A7 FA 61 FC | 	wrlong	result1, fp
22274     00 FA 4D F2 | 	cmps	result1, #0 wz
22278     0C 4E 85 F1 | 	sub	fp, #12
2227c     1C 00 90 5D |  if_ne	jmp	#LR__3700
22280     3B 4E 05 F1 | 	add	fp, #59
22284     A7 FA C1 FA | 	rdbyte	result1, fp
22288     3B 4E 85 F1 | 	sub	fp, #59
2228c     A0 FA CD F7 | 	test	result1, #160 wz
22290     0C 4E 05 51 |  if_ne	add	fp, #12
22294     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22298     0C 4E 85 51 |  if_ne	sub	fp, #12
2229c                 | LR__3700
2229c     0C 4E 05 F1 | 	add	fp, #12
222a0     A7 1E 0A FB | 	rdlong	local01, fp wz
222a4     0C 4E 85 F1 | 	sub	fp, #12
222a8     E0 02 90 5D |  if_ne	jmp	#LR__3712
222ac     74 4E 05 F1 | 	add	fp, #116
222b0     A7 12 02 F6 | 	mov	arg01, fp
222b4     48 4E 85 F1 | 	sub	fp, #72
222b8     A7 14 02 FB | 	rdlong	arg02, fp
222bc     2C 4E 85 F1 | 	sub	fp, #44
222c0     20 16 06 F6 | 	mov	arg03, #32
222c4     AC 2E BF FD | 	call	#__system____builtin_memmove
222c8     40 4E 05 F1 | 	add	fp, #64
222cc     A7 12 02 F6 | 	mov	arg01, fp
222d0     30 4E 85 F1 | 	sub	fp, #48
222d4     A7 14 02 F6 | 	mov	arg02, fp
222d8     10 4E 85 F1 | 	sub	fp, #16
222dc     30 16 06 F6 | 	mov	arg03, #48
222e0     90 2E BF FD | 	call	#__system____builtin_memmove
222e4     40 4E 05 F1 | 	add	fp, #64
222e8     A7 12 02 F6 | 	mov	arg01, fp
222ec     38 4E 85 F1 | 	sub	fp, #56
222f0     A7 14 02 FB | 	rdlong	arg02, fp
222f4     08 4E 85 F1 | 	sub	fp, #8
222f8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
222fc     0C 4E 05 F1 | 	add	fp, #12
22300     A7 FA 61 FC | 	wrlong	result1, fp
22304     0C 4E 85 F1 | 	sub	fp, #12
22308     00 FA 0D F2 | 	cmp	result1, #0 wz
2230c     4C 00 90 5D |  if_ne	jmp	#LR__3703
22310     48 4E 05 F1 | 	add	fp, #72
22314     A7 FA 01 FB | 	rdlong	result1, fp
22318     30 4E 85 F1 | 	sub	fp, #48
2231c     A7 16 02 FB | 	rdlong	arg03, fp
22320     18 4E 85 F1 | 	sub	fp, #24
22324     0B FB 09 F2 | 	cmp	result1, arg03 wz
22328     20 00 90 5D |  if_ne	jmp	#LR__3701
2232c     50 4E 05 F1 | 	add	fp, #80
22330     A7 FA 01 FB | 	rdlong	result1, fp
22334     30 4E 85 F1 | 	sub	fp, #48
22338     A7 16 02 FB | 	rdlong	arg03, fp
2233c     20 4E 85 F1 | 	sub	fp, #32
22340     0B FB 09 F2 | 	cmp	result1, arg03 wz
22344     04 1E 06 A6 |  if_e	mov	local01, #4
22348     04 00 90 AD |  if_e	jmp	#LR__3702
2234c                 | LR__3701
2234c     08 1E 06 F6 | 	mov	local01, #8
22350                 | LR__3702
22350     0C 4E 05 F1 | 	add	fp, #12
22354     A7 1E 62 FC | 	wrlong	local01, fp
22358     0C 4E 85 F1 | 	sub	fp, #12
2235c                 | LR__3703
2235c     0C 4E 05 F1 | 	add	fp, #12
22360     A7 1E 02 FB | 	rdlong	local01, fp
22364     0C 4E 85 F1 | 	sub	fp, #12
22368     04 1E 0E F2 | 	cmp	local01, #4 wz
2236c     CC 01 90 5D |  if_ne	jmp	#LR__3709
22370     40 4E 05 F1 | 	add	fp, #64
22374     A7 12 02 F6 | 	mov	arg01, fp
22378     40 4E 85 F1 | 	sub	fp, #64
2237c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
22380     0C 4E 05 F1 | 	add	fp, #12
22384     A7 FA 61 FC | 	wrlong	result1, fp
22388     0C 4E 85 F1 | 	sub	fp, #12
2238c     00 FA 0D F2 | 	cmp	result1, #0 wz
22390     A8 01 90 5D |  if_ne	jmp	#LR__3708
22394     5C 4E 05 F1 | 	add	fp, #92
22398     A7 12 02 FB | 	rdlong	arg01, fp
2239c     38 4E 05 F1 | 	add	fp, #56
223a0     A7 12 62 FC | 	wrlong	arg01, fp
223a4     0D 12 06 F1 | 	add	arg01, #13
223a8     20 4E 85 F1 | 	sub	fp, #32
223ac     A7 14 02 F6 | 	mov	arg02, fp
223b0     74 4E 85 F1 | 	sub	fp, #116
223b4     0D 14 06 F1 | 	add	arg02, #13
223b8     13 16 06 F6 | 	mov	arg03, #19
223bc     B4 2D BF FD | 	call	#__system____builtin_memmove
223c0     94 4E 05 F1 | 	add	fp, #148
223c4     A7 1E 02 FB | 	rdlong	local01, fp
223c8     15 4E 85 F1 | 	sub	fp, #21
223cc     A7 FA C1 FA | 	rdbyte	result1, fp
223d0     0B 1E 06 F1 | 	add	local01, #11
223d4     0F FB 41 FC | 	wrbyte	result1, local01
223d8     15 4E 05 F1 | 	add	fp, #21
223dc     A7 1E 02 FB | 	rdlong	local01, fp
223e0     94 4E 85 F1 | 	sub	fp, #148
223e4     0B 1E 06 F1 | 	add	local01, #11
223e8     0F 1F C2 FA | 	rdbyte	local01, local01
223ec     10 1E CE F7 | 	test	local01, #16 wz
223f0     24 00 90 5D |  if_ne	jmp	#LR__3704
223f4     94 4E 05 F1 | 	add	fp, #148
223f8     A7 FA 01 FB | 	rdlong	result1, fp
223fc     FD 1E 02 F6 | 	mov	local01, result1
22400     94 4E 85 F1 | 	sub	fp, #148
22404     0B FA 05 F1 | 	add	result1, #11
22408     FD FA C1 FA | 	rdbyte	result1, result1
2240c     20 FA 45 F5 | 	or	result1, #32
22410     0B 1E 06 F1 | 	add	local01, #11
22414     0F FB 41 FC | 	wrbyte	result1, local01
22418                 | LR__3704
22418     70 4E 05 F1 | 	add	fp, #112
2241c     A7 1E 02 FB | 	rdlong	local01, fp
22420     03 1E 06 F1 | 	add	local01, #3
22424     0F 03 48 FC | 	wrbyte	#1, local01
22428     24 4E 05 F1 | 	add	fp, #36
2242c     A7 1E 02 FB | 	rdlong	local01, fp
22430     94 4E 85 F1 | 	sub	fp, #148
22434     0B 1E 06 F1 | 	add	local01, #11
22438     0F 1F C2 FA | 	rdbyte	local01, local01
2243c     10 1E CE F7 | 	test	local01, #16 wz
22440     F8 00 90 AD |  if_e	jmp	#LR__3707
22444     18 4E 05 F1 | 	add	fp, #24
22448     A7 16 02 FB | 	rdlong	arg03, fp
2244c     30 4E 05 F1 | 	add	fp, #48
22450     A7 1E 02 FB | 	rdlong	local01, fp
22454     48 4E 85 F1 | 	sub	fp, #72
22458     0F 17 0A F2 | 	cmp	arg03, local01 wz
2245c     DC 00 90 AD |  if_e	jmp	#LR__3707
22460     70 4E 05 F1 | 	add	fp, #112
22464     A7 12 02 FB | 	rdlong	arg01, fp
22468     09 1F 02 F6 | 	mov	local01, arg01
2246c     24 4E 05 F1 | 	add	fp, #36
22470     A7 14 02 FB | 	rdlong	arg02, fp
22474     94 4E 85 F1 | 	sub	fp, #148
22478     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2247c     FD 14 02 F6 | 	mov	arg02, result1
22480     0F 13 02 F6 | 	mov	arg01, local01
22484     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
22488     98 4E 05 F1 | 	add	fp, #152
2248c     A7 FA 61 FC | 	wrlong	result1, fp
22490     00 FA 4D F2 | 	cmps	result1, #0 wz
22494     98 4E 85 F1 | 	sub	fp, #152
22498     0C 4E 05 A1 |  if_e	add	fp, #12
2249c     A7 04 68 AC |  if_e	wrlong	#2, fp
224a0     0C 4E 85 A1 |  if_e	sub	fp, #12
224a4     94 00 90 AD |  if_e	jmp	#LR__3706
224a8     70 4E 05 F1 | 	add	fp, #112
224ac     A7 12 02 FB | 	rdlong	arg01, fp
224b0     28 4E 05 F1 | 	add	fp, #40
224b4     A7 14 02 FB | 	rdlong	arg02, fp
224b8     98 4E 85 F1 | 	sub	fp, #152
224bc     4C A0 BF FD | 	call	#_fatfs_cc_move_window
224c0     0C 4E 05 F1 | 	add	fp, #12
224c4     A7 FA 61 FC | 	wrlong	result1, fp
224c8     64 4E 05 F1 | 	add	fp, #100
224cc     A7 1E 02 FB | 	rdlong	local01, fp
224d0     54 1E 06 F1 | 	add	local01, #84
224d4     24 4E 05 F1 | 	add	fp, #36
224d8     A7 1E 62 FC | 	wrlong	local01, fp
224dc     88 4E 85 F1 | 	sub	fp, #136
224e0     A7 1E 0A FB | 	rdlong	local01, fp wz
224e4     0C 4E 85 F1 | 	sub	fp, #12
224e8     50 00 90 5D |  if_ne	jmp	#LR__3705
224ec     94 4E 05 F1 | 	add	fp, #148
224f0     A7 1E 02 FB | 	rdlong	local01, fp
224f4     94 4E 85 F1 | 	sub	fp, #148
224f8     01 1E 06 F1 | 	add	local01, #1
224fc     0F 1F C2 FA | 	rdbyte	local01, local01
22500     2E 1E 0E F2 | 	cmp	local01, #46 wz
22504     34 00 90 5D |  if_ne	jmp	#LR__3705
22508     70 4E 05 F1 | 	add	fp, #112
2250c     A7 12 02 FB | 	rdlong	arg01, fp
22510     24 4E 05 F1 | 	add	fp, #36
22514     A7 14 02 FB | 	rdlong	arg02, fp
22518     4C 4E 85 F1 | 	sub	fp, #76
2251c     A7 16 02 FB | 	rdlong	arg03, fp
22520     48 4E 85 F1 | 	sub	fp, #72
22524     50 AD BF FD | 	call	#_fatfs_cc_st_clust
22528     70 4E 05 F1 | 	add	fp, #112
2252c     A7 1E 02 FB | 	rdlong	local01, fp
22530     70 4E 85 F1 | 	sub	fp, #112
22534     03 1E 06 F1 | 	add	local01, #3
22538     0F 03 48 FC | 	wrbyte	#1, local01
2253c                 | LR__3705
2253c                 | LR__3706
2253c                 | LR__3707
2253c                 | LR__3708
2253c                 | LR__3709
2253c     0C 4E 05 F1 | 	add	fp, #12
22540     A7 1E 0A FB | 	rdlong	local01, fp wz
22544     0C 4E 85 F1 | 	sub	fp, #12
22548     40 00 90 5D |  if_ne	jmp	#LR__3711
2254c     10 4E 05 F1 | 	add	fp, #16
22550     A7 12 02 F6 | 	mov	arg01, fp
22554     10 4E 85 F1 | 	sub	fp, #16
22558     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2255c     0C 4E 05 F1 | 	add	fp, #12
22560     A7 FA 61 FC | 	wrlong	result1, fp
22564     0C 4E 85 F1 | 	sub	fp, #12
22568     00 FA 0D F2 | 	cmp	result1, #0 wz
2256c     1C 00 90 5D |  if_ne	jmp	#LR__3710
22570     70 4E 05 F1 | 	add	fp, #112
22574     A7 12 02 FB | 	rdlong	arg01, fp
22578     70 4E 85 F1 | 	sub	fp, #112
2257c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
22580     0C 4E 05 F1 | 	add	fp, #12
22584     A7 FA 61 FC | 	wrlong	result1, fp
22588     0C 4E 85 F1 | 	sub	fp, #12
2258c                 | LR__3710
2258c                 | LR__3711
2258c                 | LR__3712
2258c                 | LR__3713
2258c                 | ' 					res = sync_fs(fs);
2258c                 | ' 				}
2258c                 | ' 			}
2258c                 | ' 
2258c                 | ' 		}
2258c                 | ' 		;
2258c                 | ' 	}
2258c                 | ' 
2258c                 | ' 	return res ;
2258c     0C 4E 05 F1 | 	add	fp, #12
22590     A7 FA 01 FB | 	rdlong	result1, fp
22594     0C 4E 85 F1 | 	sub	fp, #12
22598     A7 F0 03 F6 | 	mov	ptra, fp
2259c     B2 00 A0 FD | 	call	#popregs_
225a0                 | _fatfs_cc_f_rename_ret
225a0     2D 00 64 FD | 	ret
225a4                 | 
225a4                 | _fatfs_cc_time
225a4     00 4A 05 F6 | 	mov	COUNT_, #0
225a8     A8 00 A0 FD | 	call	#pushregs_
225ac     14 F0 07 F1 | 	add	ptra, #20
225b0     04 4E 05 F1 | 	add	fp, #4
225b4     A7 12 62 FC | 	wrlong	arg01, fp
225b8     04 4E 05 F1 | 	add	fp, #4
225bc     A7 12 02 F6 | 	mov	arg01, fp
225c0     08 4E 85 F1 | 	sub	fp, #8
225c4     00 14 06 F6 | 	mov	arg02, #0
225c8     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
225cc     08 4E 05 F1 | 	add	fp, #8
225d0     A7 FA 01 FB | 	rdlong	result1, fp
225d4     08 4E 05 F1 | 	add	fp, #8
225d8     A7 FA 61 FC | 	wrlong	result1, fp
225dc     0C 4E 85 F1 | 	sub	fp, #12
225e0     A7 FA 09 FB | 	rdlong	result1, fp wz
225e4     04 4E 85 F1 | 	sub	fp, #4
225e8     18 00 90 AD |  if_e	jmp	#LR__3720
225ec     04 4E 05 F1 | 	add	fp, #4
225f0     A7 FA 01 FB | 	rdlong	result1, fp
225f4     0C 4E 05 F1 | 	add	fp, #12
225f8     A7 14 02 FB | 	rdlong	arg02, fp
225fc     10 4E 85 F1 | 	sub	fp, #16
22600     FD 14 62 FC | 	wrlong	arg02, result1
22604                 | LR__3720
22604                 | '         *tp = now;
22604                 | '     return now;
22604     10 4E 05 F1 | 	add	fp, #16
22608     A7 FA 01 FB | 	rdlong	result1, fp
2260c     10 4E 85 F1 | 	sub	fp, #16
22610     A7 F0 03 F6 | 	mov	ptra, fp
22614     B2 00 A0 FD | 	call	#popregs_
22618                 | _fatfs_cc_time_ret
22618     2D 00 64 FD | 	ret
2261c                 | 
2261c                 | _fatfs_cc_mktime
2261c     06 4A 05 F6 | 	mov	COUNT_, #6
22620     A8 00 A0 FD | 	call	#pushregs_
22624     09 1F 02 F6 | 	mov	local01, arg01
22628     14 1E 06 F1 | 	add	local01, #20
2262c     0F 13 02 FB | 	rdlong	arg01, local01
22630     14 1E 86 F1 | 	sub	local01, #20
22634     46 12 56 F2 | 	cmps	arg01, #70 wc
22638                 | '                 return (time_t) -1;
22638     01 FA 65 C6 |  if_b	neg	result1, #1
2263c     7C 01 90 CD |  if_b	jmp	#LR__3734
22640     03 00 00 FF 
22644     6C 21 06 F6 | 	mov	local02, ##1900
22648     14 1E 06 F1 | 	add	local01, #20
2264c     0F FB 01 FB | 	rdlong	result1, local01
22650     FD 20 02 F1 | 	add	local02, result1
22654     08 1E 86 F1 | 	sub	local01, #8
22658     0F 23 02 FB | 	rdlong	local03, local01
2265c     01 22 86 F1 | 	sub	local03, #1
22660     04 1E 06 F1 | 	add	local01, #4
22664     0F 13 02 FB | 	rdlong	arg01, local01
22668     10 1E 86 F1 | 	sub	local01, #16
2266c     02 12 66 F0 | 	shl	arg01, #2
22670     02 00 00 FF 
22674     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
22678     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2267c     09 FB 01 FB | 	rdlong	result1, arg01
22680     FD 22 02 F1 | 	add	local03, result1
22684     10 13 02 F6 | 	mov	arg01, local02
22688     02 00 00 FF 
2268c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
22690     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
22694     00 FA 0D F2 | 	cmp	result1, #0 wz
22698     1C 00 90 AD |  if_e	jmp	#LR__3730
2269c     00 24 06 F6 | 	mov	local04, #0
226a0     10 1E 06 F1 | 	add	local01, #16
226a4     0F FB 01 FB | 	rdlong	result1, local01
226a8     10 1E 86 F1 | 	sub	local01, #16
226ac     02 FA 55 F2 | 	cmps	result1, #2 wc
226b0     01 24 06 36 |  if_ae	mov	local04, #1
226b4     04 00 90 FD | 	jmp	#LR__3731
226b8                 | LR__3730
226b8     00 24 06 F6 | 	mov	local04, #0
226bc                 | LR__3731
226bc     04 1E 06 F1 | 	add	local01, #4
226c0     0F FB 01 FB | 	rdlong	result1, local01
226c4     04 1E 86 F1 | 	sub	local01, #4
226c8     0F 27 02 FB | 	rdlong	local05, local01
226cc     08 1E 06 F1 | 	add	local01, #8
226d0     0F 13 02 FB | 	rdlong	arg01, local01
226d4     07 00 00 FF 
226d8     10 12 06 FD | 	qmul	arg01, ##3600
226dc     12 23 02 F1 | 	add	local03, local04
226e0     FD 24 02 F6 | 	mov	local04, result1
226e4     04 24 66 F0 | 	shl	local04, #4
226e8     FD 24 82 F1 | 	sub	local04, result1
226ec     02 24 66 F0 | 	shl	local04, #2
226f0     12 27 02 F1 | 	add	local05, local04
226f4     08 1E 86 F1 | 	sub	local01, #8
226f8     18 24 62 FD | 	getqx	local04
226fc     A8 00 00 FF 
22700     80 23 06 FD | 	qmul	local03, ##86400
22704     12 27 02 F1 | 	add	local05, local04
22708     10 23 02 F6 | 	mov	local03, local02
2270c     03 00 00 FF 
22710     B2 23 86 F1 | 	sub	local03, ##1970
22714     18 24 62 FD | 	getqx	local04
22718     99 F0 00 FF 
2271c     80 23 06 FD | 	qmul	local03, ##31536000
22720     12 27 02 F1 | 	add	local05, local04
22724     10 23 02 F6 | 	mov	local03, local02
22728     03 00 00 FF 
2272c     B1 23 86 F1 | 	sub	local03, ##1969
22730     11 29 52 F6 | 	abs	local06, local03 wc
22734     02 28 46 F0 | 	shr	local06, #2
22738     14 29 82 F6 | 	negc	local06, local06
2273c     03 00 00 FF 
22740     D1 21 56 F2 | 	cmps	local02, ##2001 wc
22744     18 24 62 FD | 	getqx	local04
22748     12 27 02 F1 | 	add	local05, local04
2274c     18 00 90 CD |  if_b	jmp	#LR__3732
22750     03 00 00 FF 
22754     D0 21 86 F1 | 	sub	local02, ##2000
22758     10 25 52 F6 | 	abs	local04, local02 wc
2275c     64 24 16 FD | 	qdiv	local04, #100
22760     18 24 62 FD | 	getqx	local04
22764     12 29 A2 F3 | 	sumnc	local06, local04
22768                 | LR__3732
22768     A8 00 00 FF 
2276c     80 29 06 FD | 	qmul	local06, ##86400
22770     18 28 62 FD | 	getqx	local06
22774     14 27 02 F1 | 	add	local05, local06
22778     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2277c     02 00 00 FF 
22780     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22784     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
22788     14 27 02 F1 | 	add	local05, local06
2278c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
22790     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22794     02 00 00 FF 
22798     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2279c     01 22 0E F2 | 	cmp	local03, #1 wz
227a0     14 00 90 5D |  if_ne	jmp	#LR__3733
227a4     0F 13 02 F6 | 	mov	arg01, local01
227a8     D8 19 B0 FD | 	call	#_fatfs_cc___indst
227ac     00 FA 0D F2 | 	cmp	result1, #0 wz
227b0     07 00 00 5F 
227b4     10 26 86 51 |  if_ne	sub	local05, ##3600
227b8                 | LR__3733
227b8                 | '                 s -=  (3600L) ;
227b8                 | ' 
227b8                 | '         return s;
227b8     13 FB 01 F6 | 	mov	result1, local05
227bc                 | LR__3734
227bc     A7 F0 03 F6 | 	mov	ptra, fp
227c0     B2 00 A0 FD | 	call	#popregs_
227c4                 | _fatfs_cc_mktime_ret
227c4     2D 00 64 FD | 	ret
227c8                 | 
227c8                 | _fatfs_cc__gmtime_r
227c8     03 4A 05 F6 | 	mov	COUNT_, #3
227cc     A8 00 A0 FD | 	call	#pushregs_
227d0     09 1F 02 FB | 	rdlong	local01, arg01
227d4     A8 00 00 FF 
227d8     80 1F 16 FD | 	qdiv	local01, ##86400
227dc     18 FA 61 FD | 	getqx	result1
227e0     04 FA 05 F1 | 	add	result1, #4
227e4     07 FA 15 FD | 	qdiv	result1, #7
227e8     18 14 06 F1 | 	add	arg02, #24
227ec     D1 7F 27 FF 
227f0     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
227f4     D1 7F 27 3F 
227f8     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
227fc     03 00 00 3F 
22800     DC 21 06 36 |  if_ae	mov	local02, ##2012
22804     03 00 00 CF 
22808     B2 21 06 C6 |  if_b	mov	local02, ##1970
2280c                 | ' 	  year = 1970;
2280c                 | ' 	}
2280c                 | ' 
2280c                 | ' 	for(;;) {
2280c     19 FA 61 FD | 	getqy	result1
22810     0A FB 61 FC | 	wrlong	result1, arg02
22814     18 14 86 F1 | 	sub	arg02, #24
22818                 | LR__3740
22818     10 13 02 F6 | 	mov	arg01, local02
2281c     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22820     00 FA 0D F2 | 	cmp	result1, #0 wz
22824     42 F1 00 5F 
22828     00 23 06 56 |  if_ne	mov	local03, ##31622400
2282c     99 F0 00 AF 
22830     80 23 06 A6 |  if_e	mov	local03, ##31536000
22834     11 1F 12 F2 | 	cmp	local01, local03 wc
22838                 | ' 	    break;
22838     01 20 06 31 |  if_ae	add	local02, #1
2283c     11 1F 82 31 |  if_ae	sub	local01, local03
22840     D4 FF 9F 3D |  if_ae	jmp	#LR__3740
22844     A8 00 00 FF 
22848     80 1F 16 FD | 	qdiv	local01, ##86400
2284c     10 23 02 F6 | 	mov	local03, local02
22850     03 00 00 FF 
22854     6C 23 86 F1 | 	sub	local03, ##1900
22858     14 14 06 F1 | 	add	arg02, #20
2285c     0A 23 62 FC | 	wrlong	local03, arg02
22860     08 14 06 F1 | 	add	arg02, #8
22864     10 13 02 F6 | 	mov	arg01, local02
22868     18 20 62 FD | 	getqx	local02
2286c     0A 21 62 FC | 	wrlong	local02, arg02
22870     1C 14 86 F1 | 	sub	arg02, #28
22874     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22878     00 FA 0D F2 | 	cmp	result1, #0 wz
2287c     1D 22 06 56 |  if_ne	mov	local03, #29
22880     1C 22 06 A6 |  if_e	mov	local03, #28
22884     02 00 00 FF 
22888     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2288c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
22890     02 00 00 FF 
22894     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
22898                 | ' 
22898                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22898                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22898     00 12 06 F6 | 	mov	arg01, #0
2289c     97 2A 48 FB | 	callpa	#(@LR__3742-@LR__3741)>>2,fcache_load_ptr_
228a0                 | LR__3741
228a0     09 23 02 F6 | 	mov	local03, arg01
228a4     02 22 66 F0 | 	shl	local03, #2
228a8     02 00 00 FF 
228ac     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
228b0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
228b4     11 23 02 FB | 	rdlong	local03, local03
228b8     11 21 52 F2 | 	cmps	local02, local03 wc
228bc     02 00 00 FF 
228c0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
228c4     2C 00 90 CD |  if_b	jmp	#LR__3743
228c8     09 23 02 F6 | 	mov	local03, arg01
228cc     02 22 66 F0 | 	shl	local03, #2
228d0     02 00 00 FF 
228d4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
228d8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
228dc     11 23 02 FB | 	rdlong	local03, local03
228e0     11 21 82 F1 | 	sub	local02, local03
228e4     01 12 06 F1 | 	add	arg01, #1
228e8     02 00 00 FF 
228ec     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
228f0     AC FF 9F FD | 	jmp	#LR__3741
228f4                 | LR__3742
228f4                 | LR__3743
228f4     A8 00 00 FF 
228f8     80 1F 16 FD | 	qdiv	local01, ##86400
228fc     10 14 06 F1 | 	add	arg02, #16
22900     0A 13 62 FC | 	wrlong	arg01, arg02
22904     01 20 06 F1 | 	add	local02, #1
22908     04 14 86 F1 | 	sub	arg02, #4
2290c     0A 21 62 FC | 	wrlong	local02, arg02
22910     19 1E 62 FD | 	getqy	local01
22914     07 00 00 FF 
22918     10 1E 16 FD | 	qdiv	local01, ##3600
2291c     18 22 62 FD | 	getqx	local03
22920     07 00 00 FF 
22924     10 1E 16 FD | 	qdiv	local01, ##3600
22928     04 14 86 F1 | 	sub	arg02, #4
2292c     0A 23 62 FC | 	wrlong	local03, arg02
22930     19 1E 62 FD | 	getqy	local01
22934     3C 1E 16 FD | 	qdiv	local01, #60
22938     18 22 62 FD | 	getqx	local03
2293c     3C 1E 16 FD | 	qdiv	local01, #60
22940     04 14 86 F1 | 	sub	arg02, #4
22944     0A 23 62 FC | 	wrlong	local03, arg02
22948     04 14 86 F1 | 	sub	arg02, #4
2294c                 | '         stm->tm_isdst = 0;
2294c                 | ' 
2294c                 | ' ;
2294c                 | '         return stm;
2294c     0A FB 01 F6 | 	mov	result1, arg02
22950     19 22 62 FD | 	getqy	local03
22954     0A 23 62 FC | 	wrlong	local03, arg02
22958     20 14 06 F1 | 	add	arg02, #32
2295c     0A 01 68 FC | 	wrlong	#0, arg02
22960     A7 F0 03 F6 | 	mov	ptra, fp
22964     B2 00 A0 FD | 	call	#popregs_
22968                 | _fatfs_cc__gmtime_r_ret
22968     2D 00 64 FD | 	ret
2296c                 | 
2296c                 | _fatfs_cc__tzset
2296c     22 01 00 FF 
22970     AD 12 06 F6 | 	mov	arg01, ##@LR__4055
22974     34 00 B0 FD | 	call	#_fatfs_cc_getenv
22978     FD 12 02 F6 | 	mov	arg01, result1
2297c     02 00 00 FF 
22980     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
22984     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
22988     02 00 00 FF 
2298c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22990     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
22994     02 00 00 FF 
22998     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2299c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
229a0     02 00 00 FF 
229a4     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
229a8                 | _fatfs_cc__tzset_ret
229a8     2D 00 64 FD | 	ret
229ac                 | 
229ac                 | _fatfs_cc_getenv
229ac     06 4A 05 F6 | 	mov	COUNT_, #6
229b0     A8 00 A0 FD | 	call	#pushregs_
229b4     09 1F 02 F6 | 	mov	local01, arg01
229b8     09 21 02 F6 | 	mov	local02, arg01
229bc     97 06 48 FB | 	callpa	#(@LR__3751-@LR__3750)>>2,fcache_load_ptr_
229c0                 | LR__3750
229c0     10 FB C9 FA | 	rdbyte	result1, local02 wz
229c4     01 20 06 51 |  if_ne	add	local02, #1
229c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3750
229cc                 | LR__3751
229cc     09 21 82 F1 | 	sub	local02, arg01
229d0     10 FB 01 F6 | 	mov	result1, local02
229d4     02 00 00 FF 
229d8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
229dc     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
229e0     02 00 00 FF 
229e4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
229e8                 | '             return 0;
229e8     00 FA 05 A6 |  if_e	mov	result1, #0
229ec     5C 00 90 AD |  if_e	jmp	#LR__3754
229f0                 | ' 
229f0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
229f0     02 00 00 FF 
229f4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
229f8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
229fc     02 00 00 FF 
22a00     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
22a04                 | LR__3752
22a04     11 25 0A FB | 	rdlong	local04, local03 wz
22a08     3C 00 90 AD |  if_e	jmp	#LR__3753
22a0c     12 13 02 F6 | 	mov	arg01, local04
22a10     0F 15 02 F6 | 	mov	arg02, local01
22a14     10 17 02 F6 | 	mov	arg03, local02
22a18     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
22a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
22a20     10 27 02 A6 |  if_e	mov	local05, local02
22a24     12 27 02 A1 |  if_e	add	local05, local04
22a28     13 29 C2 AA |  if_e	rdbyte	local06, local05
22a2c     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
22a30                 | ' 			return name+len+1;
22a30     10 25 02 A1 |  if_e	add	local04, local02
22a34     01 24 06 A1 |  if_e	add	local04, #1
22a38     12 FB 01 A6 |  if_e	mov	result1, local04
22a3c     0C 00 90 AD |  if_e	jmp	#LR__3754
22a40     04 22 06 F1 | 	add	local03, #4
22a44     BC FF 9F FD | 	jmp	#LR__3752
22a48                 | LR__3753
22a48                 | ' 	}
22a48                 | ' 	return 0;
22a48     00 FA 05 F6 | 	mov	result1, #0
22a4c                 | LR__3754
22a4c     A7 F0 03 F6 | 	mov	ptra, fp
22a50     B2 00 A0 FD | 	call	#popregs_
22a54                 | _fatfs_cc_getenv_ret
22a54     2D 00 64 FD | 	ret
22a58                 | 
22a58                 | _fatfs_cc__get_fattime
22a58     00 4A 05 F6 | 	mov	COUNT_, #0
22a5c     A8 00 A0 FD | 	call	#pushregs_
22a60     34 F0 07 F1 | 	add	ptra, #52
22a64     00 12 06 F6 | 	mov	arg01, #0
22a68     38 FB BF FD | 	call	#_fatfs_cc_time
22a6c     04 4E 05 F1 | 	add	fp, #4
22a70     A7 FA 61 FC | 	wrlong	result1, fp
22a74     A7 12 02 F6 | 	mov	arg01, fp
22a78     0C 4E 05 F1 | 	add	fp, #12
22a7c     A7 14 02 F6 | 	mov	arg02, fp
22a80     10 4E 85 F1 | 	sub	fp, #16
22a84     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
22a88     24 4E 05 F1 | 	add	fp, #36
22a8c     A7 14 02 FB | 	rdlong	arg02, fp
22a90     50 14 86 F1 | 	sub	arg02, #80
22a94     09 14 66 F0 | 	shl	arg02, #9
22a98     04 4E 85 F1 | 	sub	fp, #4
22a9c     A7 FA 01 FB | 	rdlong	result1, fp
22aa0     01 FA 05 F1 | 	add	result1, #1
22aa4     05 FA 65 F0 | 	shl	result1, #5
22aa8     FD 14 42 F5 | 	or	arg02, result1
22aac     04 4E 85 F1 | 	sub	fp, #4
22ab0     A7 FA 01 FB | 	rdlong	result1, fp
22ab4     FD 14 42 F5 | 	or	arg02, result1
22ab8     14 4E 85 F1 | 	sub	fp, #20
22abc     A7 14 62 FC | 	wrlong	arg02, fp
22ac0     10 4E 05 F1 | 	add	fp, #16
22ac4     A7 14 02 FB | 	rdlong	arg02, fp
22ac8     0B 14 66 F0 | 	shl	arg02, #11
22acc     04 4E 85 F1 | 	sub	fp, #4
22ad0     A7 FA 01 FB | 	rdlong	result1, fp
22ad4     05 FA 65 F0 | 	shl	result1, #5
22ad8     FD 14 42 F5 | 	or	arg02, result1
22adc     04 4E 85 F1 | 	sub	fp, #4
22ae0     A7 FA 01 FB | 	rdlong	result1, fp
22ae4     FD 14 42 F5 | 	or	arg02, result1
22ae8     04 4E 85 F1 | 	sub	fp, #4
22aec     A7 14 62 FC | 	wrlong	arg02, fp
22af0                 | ' 
22af0                 | '     now = time(0);
22af0                 | '     _gmtime_r (&now, &date);
22af0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
22af0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
22af0                 | '     return (ffdate << 16) | fftime;
22af0     04 4E 85 F1 | 	sub	fp, #4
22af4     A7 FA 01 FB | 	rdlong	result1, fp
22af8     10 FA 65 F0 | 	shl	result1, #16
22afc     08 4E 85 F1 | 	sub	fp, #8
22b00     0A FB 41 F5 | 	or	result1, arg02
22b04     A7 F0 03 F6 | 	mov	ptra, fp
22b08     B2 00 A0 FD | 	call	#popregs_
22b0c                 | _fatfs_cc__get_fattime_ret
22b0c     2D 00 64 FD | 	ret
22b10                 | 
22b10                 | _fatfs_cc_unixtime_0753
22b10     00 4A 05 F6 | 	mov	COUNT_, #0
22b14     A8 00 A0 FD | 	call	#pushregs_
22b18     34 F0 07 F1 | 	add	ptra, #52
22b1c     04 4E 05 F1 | 	add	fp, #4
22b20     A7 12 62 FC | 	wrlong	arg01, fp
22b24     04 4E 05 F1 | 	add	fp, #4
22b28     A7 14 62 FC | 	wrlong	arg02, fp
22b2c     04 4E 85 F1 | 	sub	fp, #4
22b30     A7 14 02 FB | 	rdlong	arg02, fp
22b34     09 14 46 F0 | 	shr	arg02, #9
22b38     7F 14 06 F5 | 	and	arg02, #127
22b3c     50 FA 05 F6 | 	mov	result1, #80
22b40     0A FB 01 F1 | 	add	result1, arg02
22b44     20 4E 05 F1 | 	add	fp, #32
22b48     A7 FA 61 FC | 	wrlong	result1, fp
22b4c     20 4E 85 F1 | 	sub	fp, #32
22b50     A7 FA 01 FB | 	rdlong	result1, fp
22b54     05 FA 45 F0 | 	shr	result1, #5
22b58     FD FA 41 F8 | 	getnib	result1, result1, #0
22b5c     01 FA 85 F1 | 	sub	result1, #1
22b60     1C 4E 05 F1 | 	add	fp, #28
22b64     A7 FA 61 FC | 	wrlong	result1, fp
22b68     1C 4E 85 F1 | 	sub	fp, #28
22b6c     A7 FA 01 FB | 	rdlong	result1, fp
22b70     1F FA 05 F5 | 	and	result1, #31
22b74     18 4E 05 F1 | 	add	fp, #24
22b78     A7 FA 61 FC | 	wrlong	result1, fp
22b7c     14 4E 85 F1 | 	sub	fp, #20
22b80     A7 FA 01 FB | 	rdlong	result1, fp
22b84     0B FA 45 F0 | 	shr	result1, #11
22b88     1F FA 05 F5 | 	and	result1, #31
22b8c     10 4E 05 F1 | 	add	fp, #16
22b90     A7 FA 61 FC | 	wrlong	result1, fp
22b94     10 4E 85 F1 | 	sub	fp, #16
22b98     A7 FA 01 FB | 	rdlong	result1, fp
22b9c     05 FA 45 F0 | 	shr	result1, #5
22ba0     3F FA 05 F5 | 	and	result1, #63
22ba4     0C 4E 05 F1 | 	add	fp, #12
22ba8     A7 FA 61 FC | 	wrlong	result1, fp
22bac     0C 4E 85 F1 | 	sub	fp, #12
22bb0     A7 14 02 FB | 	rdlong	arg02, fp
22bb4     1F 14 06 F5 | 	and	arg02, #31
22bb8     01 14 66 F0 | 	shl	arg02, #1
22bbc     08 4E 05 F1 | 	add	fp, #8
22bc0     A7 14 62 FC | 	wrlong	arg02, fp
22bc4     A7 12 02 F6 | 	mov	arg01, fp
22bc8     10 4E 85 F1 | 	sub	fp, #16
22bcc     4C FA BF FD | 	call	#_fatfs_cc_mktime
22bd0     0C 4E 05 F1 | 	add	fp, #12
22bd4     A7 FA 61 FC | 	wrlong	result1, fp
22bd8                 | ' 
22bd8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
22bd8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
22bd8                 | '     date.tm_mday = (dosdate & 0x1f);
22bd8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
22bd8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
22bd8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
22bd8                 | ' 
22bd8                 | '     t = mktime(&date);
22bd8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22bd8                 | '     return t;
22bd8     0C 4E 85 F1 | 	sub	fp, #12
22bdc     A7 F0 03 F6 | 	mov	ptra, fp
22be0     B2 00 A0 FD | 	call	#popregs_
22be4                 | _fatfs_cc_unixtime_0753_ret
22be4     2D 00 64 FD | 	ret
22be8                 | 
22be8                 | _fatfs_cc__set_dos_error_0755
22be8     09 01 02 F6 | 	mov	_var01, arg01
22bec                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22bec                 | '     switch (derr) {
22bec     14 00 26 F3 | 	fle	_var01, #20
22bf0     30 00 62 FD | 	jmprel	_var01
22bf4                 | LR__3760
22bf4     50 00 90 FD | 	jmp	#LR__3761
22bf8     84 00 90 FD | 	jmp	#LR__3775
22bfc     80 00 90 FD | 	jmp	#LR__3776
22c00     7C 00 90 FD | 	jmp	#LR__3777
22c04     48 00 90 FD | 	jmp	#LR__3762
22c08     44 00 90 FD | 	jmp	#LR__3763
22c0c     40 00 90 FD | 	jmp	#LR__3764
22c10     44 00 90 FD | 	jmp	#LR__3765
22c14     48 00 90 FD | 	jmp	#LR__3767
22c18     54 00 90 FD | 	jmp	#LR__3770
22c1c     38 00 90 FD | 	jmp	#LR__3766
22c20     4C 00 90 FD | 	jmp	#LR__3771
22c24     48 00 90 FD | 	jmp	#LR__3772
22c28     44 00 90 FD | 	jmp	#LR__3773
22c2c     50 00 90 FD | 	jmp	#LR__3778
22c30     4C 00 90 FD | 	jmp	#LR__3778
22c34     48 00 90 FD | 	jmp	#LR__3778
22c38     2C 00 90 FD | 	jmp	#LR__3768
22c3c     38 00 90 FD | 	jmp	#LR__3774
22c40     2C 00 90 FD | 	jmp	#LR__3769
22c44     38 00 90 FD | 	jmp	#LR__3778
22c48                 | LR__3761
22c48     00 02 06 F6 | 	mov	_var02, #0
22c4c                 | '         r = 0;
22c4c                 | '         break;
22c4c     34 00 90 FD | 	jmp	#LR__3779
22c50                 | LR__3762
22c50                 | LR__3763
22c50                 | LR__3764
22c50     04 02 06 F6 | 	mov	_var02, #4
22c54                 | '         r =  4 ;
22c54                 | '         break;
22c54     2C 00 90 FD | 	jmp	#LR__3779
22c58                 | LR__3765
22c58                 | LR__3766
22c58     06 02 06 F6 | 	mov	_var02, #6
22c5c                 | '         r =  6 ;
22c5c                 | '         break;
22c5c     24 00 90 FD | 	jmp	#LR__3779
22c60                 | LR__3767
22c60     09 02 06 F6 | 	mov	_var02, #9
22c64                 | '         r =  9 ;
22c64                 | '         break;
22c64     1C 00 90 FD | 	jmp	#LR__3779
22c68                 | LR__3768
22c68     07 02 06 F6 | 	mov	_var02, #7
22c6c                 | '         r =  7 ;
22c6c                 | '         break;
22c6c     14 00 90 FD | 	jmp	#LR__3779
22c70                 | LR__3769
22c70                 | LR__3770
22c70                 | LR__3771
22c70                 | LR__3772
22c70                 | LR__3773
22c70     0A 02 06 F6 | 	mov	_var02, #10
22c74                 | '         r =  10 ;
22c74                 | '         break;
22c74     0C 00 90 FD | 	jmp	#LR__3779
22c78                 | LR__3774
22c78     0B 02 06 F6 | 	mov	_var02, #11
22c7c                 | '         r =  11 ;
22c7c                 | '         break;
22c7c     04 00 90 FD | 	jmp	#LR__3779
22c80                 | LR__3775
22c80                 | LR__3776
22c80                 | LR__3777
22c80                 | LR__3778
22c80     0C 02 06 F6 | 	mov	_var02, #12
22c84                 | '         r =  12 ;
22c84                 | '         break;
22c84                 | LR__3779
22c84                 | '     }
22c84                 | '     return _seterror(r);
22c84     00 02 4E F2 | 	cmps	_var02, #0 wz
22c88     20 E8 05 F1 | 	add	ptr___system__dat__, #32
22c8c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22c90     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
22c94     01 FA 65 56 |  if_ne	neg	result1, #1
22c98     00 FA 05 A6 |  if_e	mov	result1, #0
22c9c                 | _fatfs_cc__set_dos_error_0755_ret
22c9c     2D 00 64 FD | 	ret
22ca0                 | 
22ca0                 | _fatfs_cc_v_creat
22ca0     04 4A 05 F6 | 	mov	COUNT_, #4
22ca4     A8 00 A0 FD | 	call	#pushregs_
22ca8     09 1F 02 F6 | 	mov	local01, arg01
22cac     0A 21 02 F6 | 	mov	local02, arg02
22cb0     03 00 00 FF 
22cb4     3C 12 06 F6 | 	mov	arg01, ##1596
22cb8                 | '     return _gc_alloc(size);
22cb8     10 14 06 F6 | 	mov	arg02, #16
22cbc     2C 60 BF FD | 	call	#__system___gc_doalloc
22cc0     FD 22 0A F6 | 	mov	local03, result1 wz
22cc4                 | '       return _seterror( 7 );
22cc4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22cc8     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22ccc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22cd0     01 FA 65 A6 |  if_e	neg	result1, #1
22cd4     58 00 90 AD |  if_e	jmp	#LR__3781
22cd8     11 13 02 F6 | 	mov	arg01, local03
22cdc     00 14 06 F6 | 	mov	arg02, #0
22ce0     03 00 00 FF 
22ce4     3C 16 06 F6 | 	mov	arg03, ##1596
22ce8     98 00 A0 FD | 	call	#\builtin_bytefill_
22cec     02 00 00 FF 
22cf0     14 22 06 F1 | 	add	local03, ##1044
22cf4     11 13 02 F6 | 	mov	arg01, local03
22cf8     02 00 00 FF 
22cfc     14 22 86 F1 | 	sub	local03, ##1044
22d00     10 15 02 F6 | 	mov	arg02, local02
22d04     07 16 06 F6 | 	mov	arg03, #7
22d08     B4 CC BF FD | 	call	#_fatfs_cc_f_open
22d0c     FD 24 0A F6 | 	mov	local04, result1 wz
22d10     14 00 90 AD |  if_e	jmp	#LR__3780
22d14     11 13 02 F6 | 	mov	arg01, local03
22d18                 | '     return _gc_free(ptr);
22d18     DC 60 BF FD | 	call	#__system___gc_free
22d1c                 | '     free(f);
22d1c                 | '     return _set_dos_error(r);
22d1c     12 13 02 F6 | 	mov	arg01, local04
22d20     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0755
22d24     08 00 90 FD | 	jmp	#LR__3781
22d28                 | LR__3780
22d28     0F 23 62 FC | 	wrlong	local03, local01
22d2c                 | '   }
22d2c                 | '   fil->vfsdata = f;
22d2c                 | '   return 0;
22d2c     00 FA 05 F6 | 	mov	result1, #0
22d30                 | LR__3781
22d30     A7 F0 03 F6 | 	mov	ptra, fp
22d34     B2 00 A0 FD | 	call	#popregs_
22d38                 | _fatfs_cc_v_creat_ret
22d38     2D 00 64 FD | 	ret
22d3c                 | 
22d3c                 | _fatfs_cc_v_close
22d3c     02 4A 05 F6 | 	mov	COUNT_, #2
22d40     A8 00 A0 FD | 	call	#pushregs_
22d44     09 1F 02 FB | 	rdlong	local01, arg01
22d48     02 00 00 FF 
22d4c     14 1E 06 F1 | 	add	local01, ##1044
22d50     0F 13 02 F6 | 	mov	arg01, local01
22d54     02 00 00 FF 
22d58     14 1E 86 F1 | 	sub	local01, ##1044
22d5c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
22d60     FD 20 02 F6 | 	mov	local02, result1
22d64     0F 13 02 F6 | 	mov	arg01, local01
22d68                 | '     return _gc_free(ptr);
22d68     8C 60 BF FD | 	call	#__system___gc_free
22d6c                 | '     FAT_FIL *f = fil->vfsdata;
22d6c                 | '     r=f_close(&f->fil);
22d6c                 | '     free(f);
22d6c                 | '     return _set_dos_error(r);
22d6c     10 13 02 F6 | 	mov	arg01, local02
22d70     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0755
22d74     A7 F0 03 F6 | 	mov	ptra, fp
22d78     B2 00 A0 FD | 	call	#popregs_
22d7c                 | _fatfs_cc_v_close_ret
22d7c     2D 00 64 FD | 	ret
22d80                 | 
22d80                 | _fatfs_cc_v_opendir
22d80     04 4A 05 F6 | 	mov	COUNT_, #4
22d84     A8 00 A0 FD | 	call	#pushregs_
22d88     09 1F 02 F6 | 	mov	local01, arg01
22d8c     0A 21 02 F6 | 	mov	local02, arg02
22d90     30 12 06 F6 | 	mov	arg01, #48
22d94                 | '     return _gc_alloc(size);
22d94     10 14 06 F6 | 	mov	arg02, #16
22d98     50 5F BF FD | 	call	#__system___gc_doalloc
22d9c     FD 22 0A F6 | 	mov	local03, result1 wz
22da0                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22da0                 | '       return _seterror( 7 );
22da0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22da4     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22da8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22dac     01 FA 65 A6 |  if_e	neg	result1, #1
22db0     34 00 90 AD |  if_e	jmp	#LR__3791
22db4     10 15 02 F6 | 	mov	arg02, local02
22db8     11 13 02 F6 | 	mov	arg01, local03
22dbc     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
22dc0     FD 24 0A F6 | 	mov	local04, result1 wz
22dc4     14 00 90 AD |  if_e	jmp	#LR__3790
22dc8     11 13 02 F6 | 	mov	arg01, local03
22dcc                 | '     return _gc_free(ptr);
22dcc     28 60 BF FD | 	call	#__system___gc_free
22dd0                 | '         free(f);
22dd0                 | '         return _set_dos_error(r);
22dd0     12 13 02 F6 | 	mov	arg01, local04
22dd4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0755
22dd8     0C 00 90 FD | 	jmp	#LR__3791
22ddc                 | LR__3790
22ddc     04 1E 06 F1 | 	add	local01, #4
22de0     0F 23 62 FC | 	wrlong	local03, local01
22de4                 | '     }
22de4                 | '     dir->vfsdata = f;
22de4                 | '     return 0;
22de4     00 FA 05 F6 | 	mov	result1, #0
22de8                 | LR__3791
22de8     A7 F0 03 F6 | 	mov	ptra, fp
22dec     B2 00 A0 FD | 	call	#popregs_
22df0                 | _fatfs_cc_v_opendir_ret
22df0     2D 00 64 FD | 	ret
22df4                 | 
22df4                 | _fatfs_cc_v_closedir
22df4     02 4A 05 F6 | 	mov	COUNT_, #2
22df8     A8 00 A0 FD | 	call	#pushregs_
22dfc     04 12 06 F1 | 	add	arg01, #4
22e00     09 1F 02 FB | 	rdlong	local01, arg01
22e04     0F 13 02 F6 | 	mov	arg01, local01
22e08     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
22e0c     FD 20 02 F6 | 	mov	local02, result1
22e10     0F 13 02 F6 | 	mov	arg01, local01
22e14                 | '     return _gc_free(ptr);
22e14     E0 5F BF FD | 	call	#__system___gc_free
22e18     00 20 0E F2 | 	cmp	local02, #0 wz
22e1c     10 13 02 56 |  if_ne	mov	arg01, local02
22e20     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0755
22e24                 | '     return r;
22e24     10 FB 01 F6 | 	mov	result1, local02
22e28     A7 F0 03 F6 | 	mov	ptra, fp
22e2c     B2 00 A0 FD | 	call	#popregs_
22e30                 | _fatfs_cc_v_closedir_ret
22e30     2D 00 64 FD | 	ret
22e34                 | 
22e34                 | _fatfs_cc_v_readdir
22e34     01 4A 05 F6 | 	mov	COUNT_, #1
22e38     A8 00 A0 FD | 	call	#pushregs_
22e3c     2C F1 07 F1 | 	add	ptra, #300
22e40     04 4E 05 F1 | 	add	fp, #4
22e44     A7 12 62 FC | 	wrlong	arg01, fp
22e48     04 4E 05 F1 | 	add	fp, #4
22e4c     A7 14 62 FC | 	wrlong	arg02, fp
22e50     04 4E 85 F1 | 	sub	fp, #4
22e54     A7 16 02 FB | 	rdlong	arg03, fp
22e58     04 16 06 F1 | 	add	arg03, #4
22e5c     0B 13 02 FB | 	rdlong	arg01, arg03
22e60     08 4E 05 F1 | 	add	fp, #8
22e64     A7 14 02 F6 | 	mov	arg02, fp
22e68     0C 4E 85 F1 | 	sub	fp, #12
22e6c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
22e70     28 4F 05 F1 | 	add	fp, #296
22e74     A7 FA 61 FC | 	wrlong	result1, fp
22e78     28 4F 85 F1 | 	sub	fp, #296
22e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
22e80     14 00 90 AD |  if_e	jmp	#LR__3800
22e84                 | '         return _set_dos_error(r);
22e84     28 4F 05 F1 | 	add	fp, #296
22e88     A7 12 02 FB | 	rdlong	arg01, fp
22e8c     28 4F 85 F1 | 	sub	fp, #296
22e90     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0755
22e94     C4 00 90 FD | 	jmp	#LR__3803
22e98                 | LR__3800
22e98     28 4E 05 F1 | 	add	fp, #40
22e9c     A7 16 CA FA | 	rdbyte	arg03, fp wz
22ea0     28 4E 85 F1 | 	sub	fp, #40
22ea4                 | '         return -1;
22ea4     01 FA 65 A6 |  if_e	neg	result1, #1
22ea8     B0 00 90 AD |  if_e	jmp	#LR__3803
22eac     08 4E 05 F1 | 	add	fp, #8
22eb0     A7 12 02 FB | 	rdlong	arg01, fp
22eb4     20 4E 05 F1 | 	add	fp, #32
22eb8     A7 14 02 F6 | 	mov	arg02, fp
22ebc     28 4E 85 F1 | 	sub	fp, #40
22ec0     3F 16 06 F6 | 	mov	arg03, #63
22ec4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
22ec8     08 4E 05 F1 | 	add	fp, #8
22ecc     A7 16 02 FB | 	rdlong	arg03, fp
22ed0     3F 16 06 F1 | 	add	arg03, #63
22ed4     0B 01 48 FC | 	wrbyte	#0, arg03
22ed8     0C 4E 05 F1 | 	add	fp, #12
22edc     A7 16 C2 FA | 	rdbyte	arg03, fp
22ee0     14 4E 85 F1 | 	sub	fp, #20
22ee4     10 16 CE F7 | 	test	arg03, #16 wz
22ee8     18 00 90 AD |  if_e	jmp	#LR__3801
22eec     08 4E 05 F1 | 	add	fp, #8
22ef0     A7 16 02 FB | 	rdlong	arg03, fp
22ef4     08 4E 85 F1 | 	sub	fp, #8
22ef8     50 16 06 F1 | 	add	arg03, #80
22efc     0B 03 48 FC | 	wrbyte	#1, arg03
22f00     14 00 90 FD | 	jmp	#LR__3802
22f04                 | LR__3801
22f04     08 4E 05 F1 | 	add	fp, #8
22f08     A7 16 02 FB | 	rdlong	arg03, fp
22f0c     08 4E 85 F1 | 	sub	fp, #8
22f10     50 16 06 F1 | 	add	arg03, #80
22f14     0B 01 48 FC | 	wrbyte	#0, arg03
22f18                 | LR__3802
22f18     08 4E 05 F1 | 	add	fp, #8
22f1c     A7 16 02 FB | 	rdlong	arg03, fp
22f20     04 4E 05 F1 | 	add	fp, #4
22f24     A7 14 02 FB | 	rdlong	arg02, fp
22f28     48 16 06 F1 | 	add	arg03, #72
22f2c     0B 15 62 FC | 	wrlong	arg02, arg03
22f30     04 4E 85 F1 | 	sub	fp, #4
22f34     A7 1E 02 FB | 	rdlong	local01, fp
22f38     08 4E 05 F1 | 	add	fp, #8
22f3c     A7 12 E2 FA | 	rdword	arg01, fp
22f40     02 4E 05 F1 | 	add	fp, #2
22f44     A7 14 E2 FA | 	rdword	arg02, fp
22f48     12 4E 85 F1 | 	sub	fp, #18
22f4c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0753
22f50     4C 1E 06 F1 | 	add	local01, #76
22f54     0F FB 61 FC | 	wrlong	result1, local01
22f58                 | '         ent->d_type =  (0) ;
22f58                 | '     }
22f58                 | '     ent->d_size = finfo.fsize;
22f58                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
22f58                 | '     return 0;
22f58     00 FA 05 F6 | 	mov	result1, #0
22f5c                 | LR__3803
22f5c     A7 F0 03 F6 | 	mov	ptra, fp
22f60     B2 00 A0 FD | 	call	#popregs_
22f64                 | _fatfs_cc_v_readdir_ret
22f64     2D 00 64 FD | 	ret
22f68                 | 
22f68                 | _fatfs_cc_v_stat
22f68     03 4A 05 F6 | 	mov	COUNT_, #3
22f6c     A8 00 A0 FD | 	call	#pushregs_
22f70     30 F1 07 F1 | 	add	ptra, #304
22f74     04 4E 05 F1 | 	add	fp, #4
22f78     A7 12 62 FC | 	wrlong	arg01, fp
22f7c     04 4E 05 F1 | 	add	fp, #4
22f80     A7 14 62 FC | 	wrlong	arg02, fp
22f84     08 4E 85 F1 | 	sub	fp, #8
22f88     0A 13 02 F6 | 	mov	arg01, arg02
22f8c     00 14 06 F6 | 	mov	arg02, #0
22f90     30 16 06 F6 | 	mov	arg03, #48
22f94     98 00 A0 FD | 	call	#\builtin_bytefill_
22f98     04 4E 05 F1 | 	add	fp, #4
22f9c     A7 FA 01 FB | 	rdlong	result1, fp
22fa0     04 4E 85 F1 | 	sub	fp, #4
22fa4     FD FA C9 FA | 	rdbyte	result1, result1 wz
22fa8     2C 00 90 AD |  if_e	jmp	#LR__3810
22fac     04 4E 05 F1 | 	add	fp, #4
22fb0     A7 FA 01 FB | 	rdlong	result1, fp
22fb4     04 4E 85 F1 | 	sub	fp, #4
22fb8     FD FA C1 FA | 	rdbyte	result1, result1
22fbc     2E FA 0D F2 | 	cmp	result1, #46 wz
22fc0     04 4E 05 A1 |  if_e	add	fp, #4
22fc4     A7 1E 02 AB |  if_e	rdlong	local01, fp
22fc8     04 4E 85 A1 |  if_e	sub	fp, #4
22fcc     01 1E 06 A1 |  if_e	add	local01, #1
22fd0     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
22fd4     18 00 90 5D |  if_ne	jmp	#LR__3811
22fd8                 | LR__3810
22fd8     18 4E 05 F1 | 	add	fp, #24
22fdc     A7 20 48 FC | 	wrbyte	#16, fp
22fe0     0C 4E 85 F1 | 	sub	fp, #12
22fe4     A7 00 68 FC | 	wrlong	#0, fp
22fe8     0C 4E 85 F1 | 	sub	fp, #12
22fec     24 00 90 FD | 	jmp	#LR__3812
22ff0                 | LR__3811
22ff0     04 4E 05 F1 | 	add	fp, #4
22ff4     A7 12 02 FB | 	rdlong	arg01, fp
22ff8     0C 4E 05 F1 | 	add	fp, #12
22ffc     A7 14 02 F6 | 	mov	arg02, fp
23000     10 4E 85 F1 | 	sub	fp, #16
23004     AC EB BF FD | 	call	#_fatfs_cc_f_stat
23008     0C 4E 05 F1 | 	add	fp, #12
2300c     A7 FA 61 FC | 	wrlong	result1, fp
23010     0C 4E 85 F1 | 	sub	fp, #12
23014                 | LR__3812
23014     0C 4E 05 F1 | 	add	fp, #12
23018     A7 20 0A FB | 	rdlong	local02, fp wz
2301c     0C 4E 85 F1 | 	sub	fp, #12
23020     14 00 90 AD |  if_e	jmp	#LR__3813
23024                 | '         return _set_dos_error(r);
23024     0C 4E 05 F1 | 	add	fp, #12
23028     A7 12 02 FB | 	rdlong	arg01, fp
2302c     0C 4E 85 F1 | 	sub	fp, #12
23030     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0755
23034     14 01 90 FD | 	jmp	#LR__3814
23038                 | LR__3813
23038     2C 4F 05 F1 | 	add	fp, #300
2303c     A7 48 6A FC | 	wrlong	#292, fp
23040     14 4F 85 F1 | 	sub	fp, #276
23044     A7 22 C2 FA | 	rdbyte	local03, fp
23048     18 4E 85 F1 | 	sub	fp, #24
2304c     01 22 CE F7 | 	test	local03, #1 wz
23050     2C 4F 05 51 |  if_ne	add	fp, #300
23054     A7 22 02 5B |  if_ne	rdlong	local03, fp
23058     92 22 46 55 |  if_ne	or	local03, #146
2305c     A7 22 62 5C |  if_ne	wrlong	local03, fp
23060     2C 4F 85 51 |  if_ne	sub	fp, #300
23064     18 4E 05 F1 | 	add	fp, #24
23068     A7 22 C2 FA | 	rdbyte	local03, fp
2306c     18 4E 85 F1 | 	sub	fp, #24
23070     10 22 CE F7 | 	test	local03, #16 wz
23074     2C 4F 05 51 |  if_ne	add	fp, #300
23078     A7 22 02 5B |  if_ne	rdlong	local03, fp
2307c     08 00 00 5F 
23080     49 22 46 55 |  if_ne	or	local03, ##4169
23084     A7 22 62 5C |  if_ne	wrlong	local03, fp
23088     2C 4F 85 51 |  if_ne	sub	fp, #300
2308c     08 4E 05 F1 | 	add	fp, #8
23090     A7 22 02 FB | 	rdlong	local03, fp
23094     24 4F 05 F1 | 	add	fp, #292
23098     A7 20 02 FB | 	rdlong	local02, fp
2309c     08 22 06 F1 | 	add	local03, #8
230a0     11 21 62 FC | 	wrlong	local02, local03
230a4     24 4F 85 F1 | 	sub	fp, #292
230a8     A7 22 02 FB | 	rdlong	local03, fp
230ac     0C 22 06 F1 | 	add	local03, #12
230b0     11 03 68 FC | 	wrlong	#1, local03
230b4     A7 22 02 FB | 	rdlong	local03, fp
230b8     08 4E 05 F1 | 	add	fp, #8
230bc     A7 20 02 FB | 	rdlong	local02, fp
230c0     18 22 06 F1 | 	add	local03, #24
230c4     11 21 62 FC | 	wrlong	local02, local03
230c8     08 4E 85 F1 | 	sub	fp, #8
230cc     A7 22 02 FB | 	rdlong	local03, fp
230d0     1C 22 06 F1 | 	add	local03, #28
230d4     01 00 80 FF 
230d8     11 01 68 FC | 	wrlong	##512, local03
230dc     A7 20 02 FB | 	rdlong	local02, fp
230e0     10 23 02 F6 | 	mov	local03, local02
230e4     18 20 06 F1 | 	add	local02, #24
230e8     10 21 02 FB | 	rdlong	local02, local02
230ec     FF 21 06 F1 | 	add	local02, #511
230f0     10 21 52 F6 | 	abs	local02, local02 wc
230f4     09 20 46 F0 | 	shr	local02, #9
230f8     10 21 82 F6 | 	negc	local02, local02
230fc     20 22 06 F1 | 	add	local03, #32
23100     11 21 62 FC | 	wrlong	local02, local03
23104     A7 20 02 FB | 	rdlong	local02, fp
23108     10 23 02 F6 | 	mov	local03, local02
2310c     10 1F 02 F6 | 	mov	local01, local02
23110     0C 4E 05 F1 | 	add	fp, #12
23114     A7 12 E2 FA | 	rdword	arg01, fp
23118     02 4E 05 F1 | 	add	fp, #2
2311c     A7 14 E2 FA | 	rdword	arg02, fp
23120     16 4E 85 F1 | 	sub	fp, #22
23124     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0753
23128     2C 1E 06 F1 | 	add	local01, #44
2312c     0F FB 61 FC | 	wrlong	result1, local01
23130     28 20 06 F1 | 	add	local02, #40
23134     10 FB 61 FC | 	wrlong	result1, local02
23138     24 22 06 F1 | 	add	local03, #36
2313c     11 FB 61 FC | 	wrlong	result1, local03
23140                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
23140                 | '     }
23140                 | '     buf->st_mode = mode;
23140                 | '     buf->st_nlink = 1;
23140                 | '     buf->st_size = finfo.fsize;
23140                 | '     buf->st_blksize = 512;
23140                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
23140                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
23140                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23140                 | '     return r;
23140     0C 4E 05 F1 | 	add	fp, #12
23144     A7 FA 01 FB | 	rdlong	result1, fp
23148     0C 4E 85 F1 | 	sub	fp, #12
2314c                 | LR__3814
2314c     A7 F0 03 F6 | 	mov	ptra, fp
23150     B2 00 A0 FD | 	call	#popregs_
23154                 | _fatfs_cc_v_stat_ret
23154     2D 00 64 FD | 	ret
23158                 | 
23158                 | _fatfs_cc_v_read
23158     00 4A 05 F6 | 	mov	COUNT_, #0
2315c     A8 00 A0 FD | 	call	#pushregs_
23160     1C F0 07 F1 | 	add	ptra, #28
23164     04 4E 05 F1 | 	add	fp, #4
23168     A7 12 62 FC | 	wrlong	arg01, fp
2316c     04 4E 05 F1 | 	add	fp, #4
23170     A7 14 62 FC | 	wrlong	arg02, fp
23174     04 4E 05 F1 | 	add	fp, #4
23178     A7 16 62 FC | 	wrlong	arg03, fp
2317c     08 4E 85 F1 | 	sub	fp, #8
23180     A7 12 02 FB | 	rdlong	arg01, fp
23184     09 13 0A FB | 	rdlong	arg01, arg01 wz
23188     0C 4E 05 F1 | 	add	fp, #12
2318c     A7 12 62 FC | 	wrlong	arg01, fp
23190     10 4E 85 F1 | 	sub	fp, #16
23194                 | '         return _seterror( 5 );
23194     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23198     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2319c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
231a0     01 FA 65 A6 |  if_e	neg	result1, #1
231a4     B8 00 90 AD |  if_e	jmp	#LR__3822
231a8     10 4E 05 F1 | 	add	fp, #16
231ac     A7 12 02 FB | 	rdlong	arg01, fp
231b0     02 00 00 FF 
231b4     14 12 06 F1 | 	add	arg01, ##1044
231b8     08 4E 85 F1 | 	sub	fp, #8
231bc     A7 14 02 FB | 	rdlong	arg02, fp
231c0     04 4E 05 F1 | 	add	fp, #4
231c4     A7 16 02 FB | 	rdlong	arg03, fp
231c8     0C 4E 05 F1 | 	add	fp, #12
231cc     A7 18 02 F6 | 	mov	arg04, fp
231d0     18 4E 85 F1 | 	sub	fp, #24
231d4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
231d8     14 4E 05 F1 | 	add	fp, #20
231dc     A7 FA 61 FC | 	wrlong	result1, fp
231e0     14 4E 85 F1 | 	sub	fp, #20
231e4     00 FA 0D F2 | 	cmp	result1, #0 wz
231e8     34 00 90 AD |  if_e	jmp	#LR__3820
231ec     04 4E 05 F1 | 	add	fp, #4
231f0     A7 18 02 FB | 	rdlong	arg04, fp
231f4     0C 17 02 F6 | 	mov	arg03, arg04
231f8     08 18 06 F1 | 	add	arg04, #8
231fc     0C 19 02 FB | 	rdlong	arg04, arg04
23200     20 18 46 F5 | 	or	arg04, #32
23204     08 16 06 F1 | 	add	arg03, #8
23208     0B 19 62 FC | 	wrlong	arg04, arg03
2320c                 | '         fil->state |=  (0x20) ;
2320c                 | '         return _set_dos_error(r);
2320c     10 4E 05 F1 | 	add	fp, #16
23210     A7 12 02 FB | 	rdlong	arg01, fp
23214     14 4E 85 F1 | 	sub	fp, #20
23218     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
2321c     40 00 90 FD | 	jmp	#LR__3822
23220                 | LR__3820
23220     18 4E 05 F1 | 	add	fp, #24
23224     A7 FA 09 FB | 	rdlong	result1, fp wz
23228     18 4E 85 F1 | 	sub	fp, #24
2322c     24 00 90 5D |  if_ne	jmp	#LR__3821
23230     04 4E 05 F1 | 	add	fp, #4
23234     A7 FA 01 FB | 	rdlong	result1, fp
23238     FD 18 02 F6 | 	mov	arg04, result1
2323c     04 4E 85 F1 | 	sub	fp, #4
23240     08 FA 05 F1 | 	add	result1, #8
23244     FD FA 01 FB | 	rdlong	result1, result1
23248     10 FA 45 F5 | 	or	result1, #16
2324c     08 18 06 F1 | 	add	arg04, #8
23250     0C FB 61 FC | 	wrlong	result1, arg04
23254                 | LR__3821
23254                 | '         fil->state |=  (0x10) ;
23254                 | '     }
23254                 | '     return x;
23254     18 4E 05 F1 | 	add	fp, #24
23258     A7 FA 01 FB | 	rdlong	result1, fp
2325c     18 4E 85 F1 | 	sub	fp, #24
23260                 | LR__3822
23260     A7 F0 03 F6 | 	mov	ptra, fp
23264     B2 00 A0 FD | 	call	#popregs_
23268                 | _fatfs_cc_v_read_ret
23268     2D 00 64 FD | 	ret
2326c                 | 
2326c                 | _fatfs_cc_v_write
2326c     00 4A 05 F6 | 	mov	COUNT_, #0
23270     A8 00 A0 FD | 	call	#pushregs_
23274     1C F0 07 F1 | 	add	ptra, #28
23278     04 4E 05 F1 | 	add	fp, #4
2327c     A7 12 62 FC | 	wrlong	arg01, fp
23280     04 4E 05 F1 | 	add	fp, #4
23284     A7 14 62 FC | 	wrlong	arg02, fp
23288     04 4E 05 F1 | 	add	fp, #4
2328c     A7 16 62 FC | 	wrlong	arg03, fp
23290     08 4E 85 F1 | 	sub	fp, #8
23294     A7 12 02 FB | 	rdlong	arg01, fp
23298     09 13 0A FB | 	rdlong	arg01, arg01 wz
2329c     0C 4E 05 F1 | 	add	fp, #12
232a0     A7 12 62 FC | 	wrlong	arg01, fp
232a4     10 4E 85 F1 | 	sub	fp, #16
232a8                 | '         return _seterror( 5 );
232a8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
232ac     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
232b0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
232b4     01 FA 65 A6 |  if_e	neg	result1, #1
232b8     84 00 90 AD |  if_e	jmp	#LR__3831
232bc     10 4E 05 F1 | 	add	fp, #16
232c0     A7 12 02 FB | 	rdlong	arg01, fp
232c4     02 00 00 FF 
232c8     14 12 06 F1 | 	add	arg01, ##1044
232cc     08 4E 85 F1 | 	sub	fp, #8
232d0     A7 14 02 FB | 	rdlong	arg02, fp
232d4     04 4E 05 F1 | 	add	fp, #4
232d8     A7 16 02 FB | 	rdlong	arg03, fp
232dc     0C 4E 05 F1 | 	add	fp, #12
232e0     A7 18 02 F6 | 	mov	arg04, fp
232e4     18 4E 85 F1 | 	sub	fp, #24
232e8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
232ec     14 4E 05 F1 | 	add	fp, #20
232f0     A7 FA 61 FC | 	wrlong	result1, fp
232f4     14 4E 85 F1 | 	sub	fp, #20
232f8     00 FA 0D F2 | 	cmp	result1, #0 wz
232fc     34 00 90 AD |  if_e	jmp	#LR__3830
23300     04 4E 05 F1 | 	add	fp, #4
23304     A7 18 02 FB | 	rdlong	arg04, fp
23308     0C 17 02 F6 | 	mov	arg03, arg04
2330c     08 18 06 F1 | 	add	arg04, #8
23310     0C 19 02 FB | 	rdlong	arg04, arg04
23314     20 18 46 F5 | 	or	arg04, #32
23318     08 16 06 F1 | 	add	arg03, #8
2331c     0B 19 62 FC | 	wrlong	arg04, arg03
23320                 | '         fil->state |=  (0x20) ;
23320                 | '         return _set_dos_error(r);
23320     10 4E 05 F1 | 	add	fp, #16
23324     A7 12 02 FB | 	rdlong	arg01, fp
23328     14 4E 85 F1 | 	sub	fp, #20
2332c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
23330     0C 00 90 FD | 	jmp	#LR__3831
23334                 | LR__3830
23334                 | '     }
23334                 | '     return x;
23334     18 4E 05 F1 | 	add	fp, #24
23338     A7 FA 01 FB | 	rdlong	result1, fp
2333c     18 4E 85 F1 | 	sub	fp, #24
23340                 | LR__3831
23340     A7 F0 03 F6 | 	mov	ptra, fp
23344     B2 00 A0 FD | 	call	#popregs_
23348                 | _fatfs_cc_v_write_ret
23348     2D 00 64 FD | 	ret
2334c                 | 
2334c                 | _fatfs_cc_v_lseek
2334c     04 4A 05 F6 | 	mov	COUNT_, #4
23350     A8 00 A0 FD | 	call	#pushregs_
23354     0A 1F 02 F6 | 	mov	local01, arg02
23358     0B 21 02 F6 | 	mov	local02, arg03
2335c     09 23 02 FB | 	rdlong	local03, arg01
23360     02 00 00 FF 
23364     14 22 0E F1 | 	add	local03, ##1044 wz
23368                 | '         return _seterror( 5 );
23368     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2336c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23370     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23374     01 FA 65 A6 |  if_e	neg	result1, #1
23378     4C 00 90 AD |  if_e	jmp	#LR__3842
2337c     00 20 0E F2 | 	cmp	local02, #0 wz
23380     24 00 90 AD |  if_e	jmp	#LR__3840
23384     01 20 0E F2 | 	cmp	local02, #1 wz
23388     14 22 06 A1 |  if_e	add	local03, #20
2338c     11 25 02 AB |  if_e	rdlong	local04, local03
23390     14 22 86 A1 |  if_e	sub	local03, #20
23394     12 1F 02 A1 |  if_e	add	local01, local04
23398     0C 22 06 51 |  if_ne	add	local03, #12
2339c     11 25 02 5B |  if_ne	rdlong	local04, local03
233a0     0C 22 86 51 |  if_ne	sub	local03, #12
233a4     12 1F 02 51 |  if_ne	add	local01, local04
233a8                 | LR__3840
233a8     0F 15 02 F6 | 	mov	arg02, local01
233ac     11 13 02 F6 | 	mov	arg01, local03
233b0     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
233b4     FD 12 0A F6 | 	mov	arg01, result1 wz
233b8     08 00 90 AD |  if_e	jmp	#LR__3841
233bc                 | '         return _set_dos_error(result);
233bc     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
233c0     04 00 90 FD | 	jmp	#LR__3842
233c4                 | LR__3841
233c4                 | '     }
233c4                 | '     return offset;
233c4     0F FB 01 F6 | 	mov	result1, local01
233c8                 | LR__3842
233c8     A7 F0 03 F6 | 	mov	ptra, fp
233cc     B2 00 A0 FD | 	call	#popregs_
233d0                 | _fatfs_cc_v_lseek_ret
233d0     2D 00 64 FD | 	ret
233d4                 | 
233d4                 | _fatfs_cc_v_ioctl
233d4                 | ' {
233d4                 | '     return _seterror( 10 );
233d4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
233d8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
233dc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
233e0     01 FA 65 F6 | 	neg	result1, #1
233e4                 | _fatfs_cc_v_ioctl_ret
233e4     2D 00 64 FD | 	ret
233e8                 | 
233e8                 | _fatfs_cc_v_mkdir
233e8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
233ec     FD 12 02 F6 | 	mov	arg01, result1
233f0                 | ' 
233f0                 | '     r = f_mkdir(name);
233f0                 | '     return _set_dos_error(r);
233f0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
233f4                 | _fatfs_cc_v_mkdir_ret
233f4     2D 00 64 FD | 	ret
233f8                 | 
233f8                 | _fatfs_cc_v_remove
233f8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
233fc     FD 12 02 F6 | 	mov	arg01, result1
23400                 | ' 
23400                 | '     r = f_unlink(name);
23400                 | '     return _set_dos_error(r);
23400     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
23404                 | _fatfs_cc_v_remove_ret
23404     2D 00 64 FD | 	ret
23408                 | 
23408                 | _fatfs_cc_v_rmdir
23408     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2340c     FD 12 02 F6 | 	mov	arg01, result1
23410                 | ' 
23410                 | '     r = f_unlink(name);
23410                 | '     return _set_dos_error(r);
23410     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
23414                 | _fatfs_cc_v_rmdir_ret
23414     2D 00 64 FD | 	ret
23418                 | 
23418                 | _fatfs_cc_v_rename
23418     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2341c     FD 12 02 F6 | 	mov	arg01, result1
23420                 | '     return _set_dos_error(r);
23420     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
23424                 | _fatfs_cc_v_rename_ret
23424     2D 00 64 FD | 	ret
23428                 | 
23428                 | _fatfs_cc_v_open
23428     07 4A 05 F6 | 	mov	COUNT_, #7
2342c     A8 00 A0 FD | 	call	#pushregs_
23430     09 1F 02 F6 | 	mov	local01, arg01
23434     0A 21 02 F6 | 	mov	local02, arg02
23438     0B 23 02 F6 | 	mov	local03, arg03
2343c     03 00 00 FF 
23440     3C 12 06 F6 | 	mov	arg01, ##1596
23444                 | '     return _gc_alloc(size);
23444     10 14 06 F6 | 	mov	arg02, #16
23448     A0 58 BF FD | 	call	#__system___gc_doalloc
2344c     FD 24 0A F6 | 	mov	local04, result1 wz
23450                 | '       return _seterror( 7 );
23450     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23454     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23458     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2345c     01 FA 65 A6 |  if_e	neg	result1, #1
23460     98 00 90 AD |  if_e	jmp	#LR__3856
23464     12 13 02 F6 | 	mov	arg01, local04
23468     00 14 06 F6 | 	mov	arg02, #0
2346c     03 00 00 FF 
23470     3C 16 06 F6 | 	mov	arg03, ##1596
23474     98 00 A0 FD | 	call	#\builtin_bytefill_
23478                 | '   switch (flags & 3) {
23478     11 27 02 F6 | 	mov	local05, local03
2347c     03 26 0E F5 | 	and	local05, #3 wz
23480     0C 00 90 AD |  if_e	jmp	#LR__3850
23484     01 26 0E F2 | 	cmp	local05, #1 wz
23488     0C 00 90 AD |  if_e	jmp	#LR__3851
2348c     10 00 90 FD | 	jmp	#LR__3852
23490                 | LR__3850
23490     01 28 06 F6 | 	mov	local06, #1
23494                 | '       fs_flags =  0x01 ;
23494                 | '       break;
23494     0C 00 90 FD | 	jmp	#LR__3853
23498                 | LR__3851
23498     02 28 06 F6 | 	mov	local06, #2
2349c                 | '       fs_flags =  0x02 ;
2349c                 | '       break;
2349c     04 00 90 FD | 	jmp	#LR__3853
234a0                 | LR__3852
234a0     03 28 06 F6 | 	mov	local06, #3
234a4                 | '       fs_flags =  0x01  |  0x02 ;
234a4                 | '       break;
234a4                 | LR__3853
234a4     08 22 CE F7 | 	test	local03, #8 wz
234a8     18 28 46 55 |  if_ne	or	local06, #24
234ac     08 00 90 5D |  if_ne	jmp	#LR__3854
234b0     20 22 CE F7 | 	test	local03, #32 wz
234b4     30 28 46 55 |  if_ne	or	local06, #48
234b8                 | LR__3854
234b8     02 00 00 FF 
234bc     14 24 06 F1 | 	add	local04, ##1044
234c0     12 13 02 F6 | 	mov	arg01, local04
234c4     02 00 00 FF 
234c8     14 24 86 F1 | 	sub	local04, ##1044
234cc     10 15 02 F6 | 	mov	arg02, local02
234d0     14 17 02 F6 | 	mov	arg03, local06
234d4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
234d8     FD 2A 0A F6 | 	mov	local07, result1 wz
234dc     14 00 90 AD |  if_e	jmp	#LR__3855
234e0     12 13 02 F6 | 	mov	arg01, local04
234e4                 | '     return _gc_free(ptr);
234e4     10 59 BF FD | 	call	#__system___gc_free
234e8                 | '     free(f);
234e8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
234e8                 | '     return _set_dos_error(r);
234e8     15 13 02 F6 | 	mov	arg01, local07
234ec     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
234f0     08 00 90 FD | 	jmp	#LR__3856
234f4                 | LR__3855
234f4     0F 25 62 FC | 	wrlong	local04, local01
234f8                 | '   }
234f8                 | '   fil->vfsdata = f;
234f8                 | '   return 0;
234f8     00 FA 05 F6 | 	mov	result1, #0
234fc                 | LR__3856
234fc     A7 F0 03 F6 | 	mov	ptra, fp
23500     B2 00 A0 FD | 	call	#popregs_
23504                 | _fatfs_cc_v_open_ret
23504     2D 00 64 FD | 	ret
23508                 | 
23508                 | _fatfs_cc_v_flush
23508     09 13 02 FB | 	rdlong	arg01, arg01
2350c     02 00 00 FF 
23510     14 12 0E F1 | 	add	arg01, ##1044 wz
23514                 | '         return _seterror( 5 );
23514     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23518     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2351c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23520     01 FA 65 A6 |  if_e	neg	result1, #1
23524     0C 00 90 AD |  if_e	jmp	#LR__3860
23528     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2352c     FD 12 02 F6 | 	mov	arg01, result1
23530                 | '     }
23530                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23530                 | '     result = f_sync(f);
23530                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23530                 | '     return _set_dos_error(result);
23530     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0755
23534                 | LR__3860
23534                 | _fatfs_cc_v_flush_ret
23534     2D 00 64 FD | 	ret
23538                 | 
23538                 | _fatfs_cc_v_init
23538                 | ' {
23538                 | '     return 0;
23538     00 FA 05 F6 | 	mov	result1, #0
2353c                 | _fatfs_cc_v_init_ret
2353c     2D 00 64 FD | 	ret
23540                 | 
23540                 | _fatfs_cc_v_deinit
23540     22 01 00 FF 
23544     B0 14 06 F6 | 	mov	arg02, ##@LR__4056
23548     00 12 06 F6 | 	mov	arg01, #0
2354c     00 16 06 F6 | 	mov	arg03, #0
23550     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
23554     01 00 00 FF 
23558     08 E4 05 F1 | 	add	objptr, ##520
2355c     F2 12 02 FB | 	rdlong	arg01, objptr
23560     04 E4 05 F1 | 	add	objptr, #4
23564     F2 14 02 FB | 	rdlong	arg02, objptr
23568     01 00 00 FF 
2356c     0C E4 85 F1 | 	sub	objptr, ##524
23570     A0 43 BF FD | 	call	#__system___freepins
23574                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23574                 | '     _freepins(f_pinmask);
23574                 | '     return 0;
23574     00 FA 05 F6 | 	mov	result1, #0
23578                 | _fatfs_cc_v_deinit_ret
23578     2D 00 64 FD | 	ret
2357c                 | 
2357c                 | _fatfs_cc_get_vfs
2357c     01 4A 05 F6 | 	mov	COUNT_, #1
23580     A8 00 A0 FD | 	call	#pushregs_
23584     09 1F 02 F6 | 	mov	local01, arg01
23588     50 12 06 F6 | 	mov	arg01, #80
2358c     2C 57 BF FD | 	call	#__system___gc_alloc_managed
23590     FD 12 02 F6 | 	mov	arg01, result1
23594     F2 FA 01 F6 | 	mov	result1, objptr
23598     00 C0 02 FF 
2359c     00 FA 45 F5 | 	or	result1, ##92274688
235a0     09 FB 61 FC | 	wrlong	result1, arg01
235a4     F2 FA 01 F6 | 	mov	result1, objptr
235a8     00 C8 02 FF 
235ac     00 FA 45 F5 | 	or	result1, ##93323264
235b0     04 12 06 F1 | 	add	arg01, #4
235b4     09 FB 61 FC | 	wrlong	result1, arg01
235b8     F2 FA 01 F6 | 	mov	result1, objptr
235bc     00 D0 02 FF 
235c0     00 FA 45 F5 | 	or	result1, ##94371840
235c4     04 12 06 F1 | 	add	arg01, #4
235c8     09 FB 61 FC | 	wrlong	result1, arg01
235cc     F2 FA 01 F6 | 	mov	result1, objptr
235d0     00 D8 02 FF 
235d4     00 FA 45 F5 | 	or	result1, ##95420416
235d8     04 12 06 F1 | 	add	arg01, #4
235dc     09 FB 61 FC | 	wrlong	result1, arg01
235e0     F2 FA 01 F6 | 	mov	result1, objptr
235e4     00 E0 02 FF 
235e8     00 FA 45 F5 | 	or	result1, ##96468992
235ec     04 12 06 F1 | 	add	arg01, #4
235f0     09 FB 61 FC | 	wrlong	result1, arg01
235f4     04 12 06 F1 | 	add	arg01, #4
235f8     09 01 68 FC | 	wrlong	#0, arg01
235fc     04 12 06 F1 | 	add	arg01, #4
23600     09 1F 62 FC | 	wrlong	local01, arg01
23604     04 12 06 F1 | 	add	arg01, #4
23608     09 01 68 FC | 	wrlong	#0, arg01
2360c     F2 FA 01 F6 | 	mov	result1, objptr
23610     00 E8 02 FF 
23614     00 FA 45 F5 | 	or	result1, ##97517568
23618     04 12 06 F1 | 	add	arg01, #4
2361c     09 FB 61 FC | 	wrlong	result1, arg01
23620     F2 FA 01 F6 | 	mov	result1, objptr
23624     00 F0 02 FF 
23628     00 FA 45 F5 | 	or	result1, ##98566144
2362c     04 12 06 F1 | 	add	arg01, #4
23630     09 FB 61 FC | 	wrlong	result1, arg01
23634     F2 FA 01 F6 | 	mov	result1, objptr
23638     00 F8 02 FF 
2363c     00 FA 45 F5 | 	or	result1, ##99614720
23640     04 12 06 F1 | 	add	arg01, #4
23644     09 FB 61 FC | 	wrlong	result1, arg01
23648     F2 FA 01 F6 | 	mov	result1, objptr
2364c     39 FA 25 F4 | 	bith	result1, #57
23650     04 12 06 F1 | 	add	arg01, #4
23654     09 FB 61 FC | 	wrlong	result1, arg01
23658     F2 FA 01 F6 | 	mov	result1, objptr
2365c     00 08 03 FF 
23660     00 FA 45 F5 | 	or	result1, ##101711872
23664     04 12 06 F1 | 	add	arg01, #4
23668     09 FB 61 FC | 	wrlong	result1, arg01
2366c     F2 FA 01 F6 | 	mov	result1, objptr
23670     00 10 03 FF 
23674     00 FA 45 F5 | 	or	result1, ##102760448
23678     04 12 06 F1 | 	add	arg01, #4
2367c     09 FB 61 FC | 	wrlong	result1, arg01
23680     F2 FA 01 F6 | 	mov	result1, objptr
23684     00 18 03 FF 
23688     00 FA 45 F5 | 	or	result1, ##103809024
2368c     04 12 06 F1 | 	add	arg01, #4
23690     09 FB 61 FC | 	wrlong	result1, arg01
23694     F2 FA 01 F6 | 	mov	result1, objptr
23698     00 20 03 FF 
2369c     00 FA 45 F5 | 	or	result1, ##104857600
236a0     04 12 06 F1 | 	add	arg01, #4
236a4     09 FB 61 FC | 	wrlong	result1, arg01
236a8     F2 FA 01 F6 | 	mov	result1, objptr
236ac     00 28 03 FF 
236b0     00 FA 45 F5 | 	or	result1, ##105906176
236b4     04 12 06 F1 | 	add	arg01, #4
236b8     09 FB 61 FC | 	wrlong	result1, arg01
236bc     F2 FA 01 F6 | 	mov	result1, objptr
236c0     00 30 03 FF 
236c4     00 FA 45 F5 | 	or	result1, ##106954752
236c8     04 12 06 F1 | 	add	arg01, #4
236cc     09 FB 61 FC | 	wrlong	result1, arg01
236d0     F2 FA 01 F6 | 	mov	result1, objptr
236d4     00 38 03 FF 
236d8     00 FA 45 F5 | 	or	result1, ##108003328
236dc     04 12 06 F1 | 	add	arg01, #4
236e0     09 FB 61 FC | 	wrlong	result1, arg01
236e4     F2 FA 01 F6 | 	mov	result1, objptr
236e8     00 40 03 FF 
236ec     00 FA 45 F5 | 	or	result1, ##109051904
236f0     04 12 06 F1 | 	add	arg01, #4
236f4     09 FB 61 FC | 	wrlong	result1, arg01
236f8     4C 12 86 F1 | 	sub	arg01, #76
236fc                 | ' 
236fc                 | '     v->close = &v_close;
236fc                 | '     v->read = &v_read;
236fc                 | '     v->write = &v_write;
236fc                 | '     v->lseek = &v_lseek;
236fc                 | '     v->ioctl = &v_ioctl;
236fc                 | '     v->flush = 0;
236fc                 | '     v->vfs_data = ptr;
236fc                 | '     v->reserved = 0;
236fc                 | ' 
236fc                 | '     v->open = &v_open;
236fc                 | '     v->creat = &v_creat;
236fc                 | '     v->opendir = &v_opendir;
236fc                 | '     v->closedir = &v_closedir;
236fc                 | '     v->readdir = &v_readdir;
236fc                 | '     v->stat = &v_stat;
236fc                 | ' 
236fc                 | '     v->mkdir = &v_mkdir;
236fc                 | '     v->rmdir = &v_rmdir;
236fc                 | ' 
236fc                 | '     v->remove = &v_remove;
236fc                 | '     v->rename = &v_rename;
236fc                 | ' 
236fc                 | '     v->init = &v_init;
236fc                 | '     v->deinit = &v_deinit;
236fc                 | ' 
236fc                 | '     return v;
236fc     09 FB 01 F6 | 	mov	result1, arg01
23700     A7 F0 03 F6 | 	mov	ptra, fp
23704     B2 00 A0 FD | 	call	#popregs_
23708                 | _fatfs_cc_get_vfs_ret
23708     2D 00 64 FD | 	ret
2370c                 | 
2370c                 | _fatfs_cc_xmit_mmc_0902
2370c     01 00 00 FF 
23710     10 E4 05 F1 | 	add	objptr, ##528
23714     F2 00 02 FB | 	rdlong	_var01, objptr
23718     08 E4 05 F1 | 	add	objptr, #8
2371c     F2 02 02 FB | 	rdlong	_var02, objptr
23720     01 00 00 FF 
23724     18 E4 85 F1 | 	sub	objptr, ##536
23728     40 02 62 FD | 	dirl	_var02
2372c     28 02 64 FD | 	setq	#1
23730     09 05 02 FB | 	rdlong	_var03, arg01
23734     69 04 62 FD | 	rev	_var03
23738     1B 04 FE F9 | 	movbyts	_var03, #27
2373c     01 05 22 FC | 	wypin	_var03, _var02
23740     0A 05 02 F6 | 	mov	_var03, arg02
23744     02 14 4E F0 | 	shr	arg02, #2 wz
23748     03 04 66 F0 | 	shl	_var03, #3
2374c     00 05 22 FC | 	wypin	_var03, _var01
23750     41 02 62 FD | 	dirh	_var02
23754     08 12 06 F1 | 	add	arg01, #8
23758     69 06 62 FD | 	rev	_var04
2375c     1B 06 FE F9 | 	movbyts	_var04, #27
23760                 | LR__3870
23760     01 07 22 5C |  if_ne	wypin	_var04, _var02
23764     09 07 02 5B |  if_ne	rdlong	_var04, arg01
23768     04 12 06 51 |  if_ne	add	arg01, #4
2376c     69 06 62 5D |  if_ne	rev	_var04
23770     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
23774                 | LR__3871
23774     40 02 72 5D |  if_ne	testp	_var02 wc
23778     F8 FF 9F 1D |  if_a	jmp	#LR__3871
2377c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3870
23780                 | LR__3872
23780     40 00 72 FD | 	testp	_var01 wc
23784     F8 FF 9F 3D |  if_ae	jmp	#LR__3872
23788     40 02 62 FD | 	dirl	_var02
2378c     FF FF FF FF 
23790     01 FF 2B FC | 	wypin	##-1, _var02
23794     41 02 62 FD | 	dirh	_var02
23798                 | _fatfs_cc_xmit_mmc_0902_ret
23798     2D 00 64 FD | 	ret
2379c                 | 
2379c                 | _fatfs_cc_rcvr_mmc_0909
2379c     01 00 00 FF 
237a0     10 E4 05 F1 | 	add	objptr, ##528
237a4     F2 00 02 FB | 	rdlong	_var01, objptr
237a8     0C E4 05 F1 | 	add	objptr, #12
237ac     F2 02 02 FB | 	rdlong	_var02, objptr
237b0     01 00 00 FF 
237b4     1C E4 85 F1 | 	sub	objptr, ##540
237b8     01 03 08 FC | 	akpin	_var02
237bc     0A 05 0A F6 | 	mov	_var03, arg02 wz
237c0     02 04 4E F0 | 	shr	_var03, #2 wz
237c4     30 00 90 AD |  if_e	jmp	#LR__3882
237c8     02 07 02 F6 | 	mov	_var04, _var03
237cc     05 06 66 F0 | 	shl	_var04, #5
237d0     00 07 22 FC | 	wypin	_var04, _var01
237d4     01 7F 18 FC | 	wxpin	#63, _var02
237d8                 | LR__3880
237d8                 | LR__3881
237d8     40 02 72 FD | 	testp	_var02 wc
237dc     F8 FF 9F 3D |  if_ae	jmp	#LR__3881
237e0     01 07 8A FA | 	rdpin	_var04, _var02
237e4     69 06 62 FD | 	rev	_var04
237e8     1B 06 FE F9 | 	movbyts	_var04, #27
237ec     09 07 62 FC | 	wrlong	_var04, arg01
237f0     04 12 06 F1 | 	add	arg01, #4
237f4     F8 05 6E FB | 	djnz	_var03, #LR__3880
237f8                 | LR__3882
237f8     03 14 0E F5 | 	and	arg02, #3 wz
237fc     24 00 90 AD |  if_e	jmp	#LR__3885
23800     01 4F 18 FC | 	wxpin	#39, _var02
23804                 | LR__3883
23804     00 11 28 FC | 	wypin	#8, _var01
23808                 | LR__3884
23808     40 02 72 FD | 	testp	_var02 wc
2380c     F8 FF 9F 3D |  if_ae	jmp	#LR__3884
23810     01 07 8A FA | 	rdpin	_var04, _var02
23814     69 06 62 FD | 	rev	_var04
23818     09 07 42 FC | 	wrbyte	_var04, arg01
2381c     01 12 06 F1 | 	add	arg01, #1
23820     F8 15 6E FB | 	djnz	arg02, #LR__3883
23824                 | LR__3885
23824                 | _fatfs_cc_rcvr_mmc_0909_ret
23824     2D 00 64 FD | 	ret
23828                 | 
23828                 | _fatfs_cc_wait_ready_0913
23828     01 4A 05 F6 | 	mov	COUNT_, #1
2382c     A8 00 A0 FD | 	call	#pushregs_
23830     10 F0 07 F1 | 	add	ptra, #16
23834     1A FA 61 FD | 	getct	result1
23838     08 4E 05 F1 | 	add	fp, #8
2383c     A7 FA 61 FC | 	wrlong	result1, fp
23840     14 1E 06 FB | 	rdlong	local01, #20
23844     01 1E 46 F0 | 	shr	local01, #1
23848     04 4E 05 F1 | 	add	fp, #4
2384c     A7 1E 62 FC | 	wrlong	local01, fp
23850     0C 4E 85 F1 | 	sub	fp, #12
23854                 | ' {
23854                 | ' 	BYTE d;
23854                 | ' 	UINT tmr, tmout;
23854                 | ' 
23854                 | ' 	tmr = _cnt();
23854                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23854                 | ' 	for(;;) {
23854                 | LR__3890
23854     04 4E 05 F1 | 	add	fp, #4
23858     A7 12 02 F6 | 	mov	arg01, fp
2385c     04 4E 85 F1 | 	sub	fp, #4
23860     01 14 06 F6 | 	mov	arg02, #1
23864     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
23868     04 4E 05 F1 | 	add	fp, #4
2386c     A7 1E C2 FA | 	rdbyte	local01, fp
23870     04 4E 85 F1 | 	sub	fp, #4
23874     FF 1E 0E F2 | 	cmp	local01, #255 wz
23878     01 FA 05 A6 |  if_e	mov	result1, #1
2387c     28 00 90 AD |  if_e	jmp	#LR__3891
23880     1A FA 61 FD | 	getct	result1
23884     08 4E 05 F1 | 	add	fp, #8
23888     A7 1E 02 FB | 	rdlong	local01, fp
2388c     0F FB 81 F1 | 	sub	result1, local01
23890     04 4E 05 F1 | 	add	fp, #4
23894     A7 1E 02 FB | 	rdlong	local01, fp
23898     0C 4E 85 F1 | 	sub	fp, #12
2389c     0F FB 11 F2 | 	cmp	result1, local01 wc
238a0     00 FA 05 36 |  if_ae	mov	result1, #0
238a4     AC FF 9F CD |  if_b	jmp	#LR__3890
238a8                 | LR__3891
238a8     A7 F0 03 F6 | 	mov	ptra, fp
238ac     B2 00 A0 FD | 	call	#popregs_
238b0                 | _fatfs_cc_wait_ready_0913_ret
238b0     2D 00 64 FD | 	ret
238b4                 | 
238b4                 | _fatfs_cc_deselect_0919
238b4     00 4A 05 F6 | 	mov	COUNT_, #0
238b8     A8 00 A0 FD | 	call	#pushregs_
238bc     14 F0 07 F1 | 	add	ptra, #20
238c0     01 00 00 FF 
238c4     14 E4 05 F1 | 	add	objptr, ##532
238c8     F2 14 02 FB | 	rdlong	arg02, objptr
238cc     04 4E 05 F1 | 	add	fp, #4
238d0     A7 14 62 FC | 	wrlong	arg02, fp
238d4     04 E4 85 F1 | 	sub	objptr, #4
238d8     F2 14 02 FB | 	rdlong	arg02, objptr
238dc     04 4E 05 F1 | 	add	fp, #4
238e0     A7 14 62 FC | 	wrlong	arg02, fp
238e4     08 E4 05 F1 | 	add	objptr, #8
238e8     F2 14 02 FB | 	rdlong	arg02, objptr
238ec     04 4E 05 F1 | 	add	fp, #4
238f0     A7 14 62 FC | 	wrlong	arg02, fp
238f4     04 E4 05 F1 | 	add	objptr, #4
238f8     F2 14 02 FB | 	rdlong	arg02, objptr
238fc     01 00 00 FF 
23900     1C E4 85 F1 | 	sub	objptr, ##540
23904     04 4E 05 F1 | 	add	fp, #4
23908     A7 14 62 FC | 	wrlong	arg02, fp
2390c     0C 4E 85 F1 | 	sub	fp, #12
23910     A7 12 02 FB | 	rdlong	arg01, fp
23914     04 4E 85 F1 | 	sub	fp, #4
23918     59 12 62 FD | 	drvh	arg01
2391c     1F 20 64 FD | 	waitx	#16
23920     A7 12 02 F6 | 	mov	arg01, fp
23924     01 14 06 F6 | 	mov	arg02, #1
23928     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
2392c     A7 F0 03 F6 | 	mov	ptra, fp
23930     B2 00 A0 FD | 	call	#popregs_
23934                 | _fatfs_cc_deselect_0919_ret
23934     2D 00 64 FD | 	ret
23938                 | 
23938                 | _fatfs_cc_select_0923
23938     00 4A 05 F6 | 	mov	COUNT_, #0
2393c     A8 00 A0 FD | 	call	#pushregs_
23940     10 F0 07 F1 | 	add	ptra, #16
23944     01 00 00 FF 
23948     14 E4 05 F1 | 	add	objptr, ##532
2394c     F2 14 02 FB | 	rdlong	arg02, objptr
23950     08 4E 05 F1 | 	add	fp, #8
23954     A7 14 62 FC | 	wrlong	arg02, fp
23958     08 E4 05 F1 | 	add	objptr, #8
2395c     F2 12 02 FB | 	rdlong	arg01, objptr
23960     01 00 00 FF 
23964     1C E4 85 F1 | 	sub	objptr, ##540
23968     04 4E 05 F1 | 	add	fp, #4
2396c     A7 12 62 FC | 	wrlong	arg01, fp
23970     50 12 62 FD | 	fltl	arg01
23974     04 4E 85 F1 | 	sub	fp, #4
23978     A7 12 02 FB | 	rdlong	arg01, fp
2397c     58 12 62 FD | 	drvl	arg01
23980     1F 20 64 FD | 	waitx	#16
23984     04 4E 05 F1 | 	add	fp, #4
23988     A7 12 02 FB | 	rdlong	arg01, fp
2398c     41 12 62 FD | 	dirh	arg01
23990     08 4E 85 F1 | 	sub	fp, #8
23994     A7 12 02 F6 | 	mov	arg01, fp
23998     04 4E 85 F1 | 	sub	fp, #4
2399c     01 14 06 F6 | 	mov	arg02, #1
239a0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
239a4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0913
239a8     00 FA 0D F2 | 	cmp	result1, #0 wz
239ac     01 FA 05 56 |  if_ne	mov	result1, #1
239b0     08 00 90 5D |  if_ne	jmp	#LR__3900
239b4     FC FE BF FD | 	call	#_fatfs_cc_deselect_0919
239b8                 | ' 
239b8                 | ' 	deselect();
239b8                 | ' 	return 0;
239b8     00 FA 05 F6 | 	mov	result1, #0
239bc                 | LR__3900
239bc     A7 F0 03 F6 | 	mov	ptra, fp
239c0     B2 00 A0 FD | 	call	#popregs_
239c4                 | _fatfs_cc_select_0923_ret
239c4     2D 00 64 FD | 	ret
239c8                 | 
239c8                 | _fatfs_cc_rcvr_datablock_0927
239c8     01 4A 05 F6 | 	mov	COUNT_, #1
239cc     A8 00 A0 FD | 	call	#pushregs_
239d0     18 F0 07 F1 | 	add	ptra, #24
239d4     04 4E 05 F1 | 	add	fp, #4
239d8     A7 12 62 FC | 	wrlong	arg01, fp
239dc     04 4E 05 F1 | 	add	fp, #4
239e0     A7 14 62 FC | 	wrlong	arg02, fp
239e4     1A FA 61 FD | 	getct	result1
239e8     08 4E 05 F1 | 	add	fp, #8
239ec     A7 FA 61 FC | 	wrlong	result1, fp
239f0     14 1E 06 FB | 	rdlong	local01, #20
239f4     03 1E 46 F0 | 	shr	local01, #3
239f8     04 4E 05 F1 | 	add	fp, #4
239fc     A7 1E 62 FC | 	wrlong	local01, fp
23a00     14 4E 85 F1 | 	sub	fp, #20
23a04                 | ' 	BYTE *buff,
23a04                 | ' 	UINT btr
23a04                 | ' )
23a04                 | ' {
23a04                 | ' 	BYTE d[2];
23a04                 | ' 	UINT tmr, tmout;
23a04                 | ' 
23a04                 | ' 	tmr = _cnt();
23a04                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
23a04                 | ' 	for(;;) {
23a04                 | LR__3910
23a04     0C 4E 05 F1 | 	add	fp, #12
23a08     A7 12 02 F6 | 	mov	arg01, fp
23a0c     0C 4E 85 F1 | 	sub	fp, #12
23a10     01 14 06 F6 | 	mov	arg02, #1
23a14     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
23a18     0C 4E 05 F1 | 	add	fp, #12
23a1c     A7 1E C2 FA | 	rdbyte	local01, fp
23a20     0C 4E 85 F1 | 	sub	fp, #12
23a24     FF 1E 0E F2 | 	cmp	local01, #255 wz
23a28     28 00 90 5D |  if_ne	jmp	#LR__3911
23a2c     1A FA 61 FD | 	getct	result1
23a30     FD 1E 02 F6 | 	mov	local01, result1
23a34     10 4E 05 F1 | 	add	fp, #16
23a38     A7 14 02 FB | 	rdlong	arg02, fp
23a3c     0A 1F 82 F1 | 	sub	local01, arg02
23a40     04 4E 05 F1 | 	add	fp, #4
23a44     A7 14 02 FB | 	rdlong	arg02, fp
23a48     14 4E 85 F1 | 	sub	fp, #20
23a4c     0A 1F 12 F2 | 	cmp	local01, arg02 wc
23a50     B0 FF 9F CD |  if_b	jmp	#LR__3910
23a54                 | LR__3911
23a54     0C 4E 05 F1 | 	add	fp, #12
23a58     A7 1E C2 FA | 	rdbyte	local01, fp
23a5c     0C 4E 85 F1 | 	sub	fp, #12
23a60     FE 1E 0E F2 | 	cmp	local01, #254 wz
23a64     00 FA 05 56 |  if_ne	mov	result1, #0
23a68     30 00 90 5D |  if_ne	jmp	#LR__3912
23a6c     04 4E 05 F1 | 	add	fp, #4
23a70     A7 12 02 FB | 	rdlong	arg01, fp
23a74     04 4E 05 F1 | 	add	fp, #4
23a78     A7 14 02 FB | 	rdlong	arg02, fp
23a7c     08 4E 85 F1 | 	sub	fp, #8
23a80     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
23a84     0C 4E 05 F1 | 	add	fp, #12
23a88     A7 12 02 F6 | 	mov	arg01, fp
23a8c     0C 4E 85 F1 | 	sub	fp, #12
23a90     02 14 06 F6 | 	mov	arg02, #2
23a94     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
23a98                 | ' 
23a98                 | ' 	rcvr_mmc(buff, btr);
23a98                 | ' 	rcvr_mmc(d, 2);
23a98                 | ' 
23a98                 | ' 	return 1;
23a98     01 FA 05 F6 | 	mov	result1, #1
23a9c                 | LR__3912
23a9c     A7 F0 03 F6 | 	mov	ptra, fp
23aa0     B2 00 A0 FD | 	call	#popregs_
23aa4                 | _fatfs_cc_rcvr_datablock_0927_ret
23aa4     2D 00 64 FD | 	ret
23aa8                 | 
23aa8                 | _fatfs_cc_xmit_datablock_0929
23aa8     00 4A 05 F6 | 	mov	COUNT_, #0
23aac     A8 00 A0 FD | 	call	#pushregs_
23ab0     10 F0 07 F1 | 	add	ptra, #16
23ab4     04 4E 05 F1 | 	add	fp, #4
23ab8     A7 12 62 FC | 	wrlong	arg01, fp
23abc     04 4E 05 F1 | 	add	fp, #4
23ac0     A7 14 42 FC | 	wrbyte	arg02, fp
23ac4     08 4E 85 F1 | 	sub	fp, #8
23ac8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0913
23acc     00 FA 0D F2 | 	cmp	result1, #0 wz
23ad0     00 FA 05 A6 |  if_e	mov	result1, #0
23ad4     90 00 90 AD |  if_e	jmp	#LR__3921
23ad8     08 4E 05 F1 | 	add	fp, #8
23adc     A7 14 C2 FA | 	rdbyte	arg02, fp
23ae0     04 4E 05 F1 | 	add	fp, #4
23ae4     A7 14 42 FC | 	wrbyte	arg02, fp
23ae8     A7 12 02 F6 | 	mov	arg01, fp
23aec     0C 4E 85 F1 | 	sub	fp, #12
23af0     01 14 06 F6 | 	mov	arg02, #1
23af4     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0902
23af8     08 4E 05 F1 | 	add	fp, #8
23afc     A7 14 C2 FA | 	rdbyte	arg02, fp
23b00     08 4E 85 F1 | 	sub	fp, #8
23b04     FD 14 0E F2 | 	cmp	arg02, #253 wz
23b08     58 00 90 AD |  if_e	jmp	#LR__3920
23b0c     04 4E 05 F1 | 	add	fp, #4
23b10     A7 12 02 FB | 	rdlong	arg01, fp
23b14     04 4E 85 F1 | 	sub	fp, #4
23b18     09 14 C6 F9 | 	decod	arg02, #9
23b1c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0902
23b20     0C 4E 05 F1 | 	add	fp, #12
23b24     A7 12 02 F6 | 	mov	arg01, fp
23b28     0C 4E 85 F1 | 	sub	fp, #12
23b2c     02 14 06 F6 | 	mov	arg02, #2
23b30     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
23b34     0C 4E 05 F1 | 	add	fp, #12
23b38     A7 12 02 F6 | 	mov	arg01, fp
23b3c     0C 4E 85 F1 | 	sub	fp, #12
23b40     01 14 06 F6 | 	mov	arg02, #1
23b44     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
23b48     0C 4E 05 F1 | 	add	fp, #12
23b4c     A7 14 C2 FA | 	rdbyte	arg02, fp
23b50     0C 4E 85 F1 | 	sub	fp, #12
23b54     1F 14 06 F5 | 	and	arg02, #31
23b58     05 14 0E F2 | 	cmp	arg02, #5 wz
23b5c                 | ' 			return 0;
23b5c     00 FA 05 56 |  if_ne	mov	result1, #0
23b60     04 00 90 5D |  if_ne	jmp	#LR__3921
23b64                 | LR__3920
23b64                 | ' 	}
23b64                 | ' 
23b64                 | ' 	return 1;
23b64     01 FA 05 F6 | 	mov	result1, #1
23b68                 | LR__3921
23b68     A7 F0 03 F6 | 	mov	ptra, fp
23b6c     B2 00 A0 FD | 	call	#popregs_
23b70                 | _fatfs_cc_xmit_datablock_0929_ret
23b70     2D 00 64 FD | 	ret
23b74                 | 
23b74                 | _fatfs_cc_send_cmd_0933
23b74     01 4A 05 F6 | 	mov	COUNT_, #1
23b78     A8 00 A0 FD | 	call	#pushregs_
23b7c     1C F0 07 F1 | 	add	ptra, #28
23b80                 | _fatfs_cc_send_cmd_0933_enter
23b80     04 4E 05 F1 | 	add	fp, #4
23b84     A7 12 42 FC | 	wrbyte	arg01, fp
23b88     04 4E 05 F1 | 	add	fp, #4
23b8c     A7 14 62 FC | 	wrlong	arg02, fp
23b90     04 4E 85 F1 | 	sub	fp, #4
23b94     A7 FA C1 FA | 	rdbyte	result1, fp
23b98     04 4E 85 F1 | 	sub	fp, #4
23b9c     80 FA CD F7 | 	test	result1, #128 wz
23ba0     44 00 90 AD |  if_e	jmp	#LR__3930
23ba4     04 4E 05 F1 | 	add	fp, #4
23ba8     A7 14 C2 FA | 	rdbyte	arg02, fp
23bac     7F 14 06 F5 | 	and	arg02, #127
23bb0     A7 14 42 FC | 	wrbyte	arg02, fp
23bb4     04 4E 85 F1 | 	sub	fp, #4
23bb8     37 12 06 F6 | 	mov	arg01, #55
23bbc     00 14 06 F6 | 	mov	arg02, #0
23bc0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0933
23bc4     0C 4E 05 F1 | 	add	fp, #12
23bc8     A7 FA 41 FC | 	wrbyte	result1, fp
23bcc     A7 14 C2 FA | 	rdbyte	arg02, fp
23bd0     0C 4E 85 F1 | 	sub	fp, #12
23bd4     02 14 16 F2 | 	cmp	arg02, #2 wc
23bd8     0C 4E 05 31 |  if_ae	add	fp, #12
23bdc     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
23be0     0C 4E 85 31 |  if_ae	sub	fp, #12
23be4     6C 01 90 3D |  if_ae	jmp	#LR__3934
23be8                 | LR__3930
23be8     04 4E 05 F1 | 	add	fp, #4
23bec     A7 14 C2 FA | 	rdbyte	arg02, fp
23bf0     04 4E 85 F1 | 	sub	fp, #4
23bf4     0C 14 0E F2 | 	cmp	arg02, #12 wz
23bf8     14 00 90 AD |  if_e	jmp	#LR__3931
23bfc     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0919
23c00     34 FD BF FD | 	call	#_fatfs_cc_select_0923
23c04     00 FA 0D F2 | 	cmp	result1, #0 wz
23c08     FF FA 05 A6 |  if_e	mov	result1, #255
23c0c     44 01 90 AD |  if_e	jmp	#LR__3934
23c10                 | LR__3931
23c10     04 4E 05 F1 | 	add	fp, #4
23c14     A7 14 C2 FA | 	rdbyte	arg02, fp
23c18     40 FA 05 F6 | 	mov	result1, #64
23c1c     0A FB 41 F5 | 	or	result1, arg02
23c20     10 4E 05 F1 | 	add	fp, #16
23c24     A7 FA 41 FC | 	wrbyte	result1, fp
23c28     0C 4E 85 F1 | 	sub	fp, #12
23c2c     A7 FA 01 FB | 	rdlong	result1, fp
23c30     18 FA 45 F0 | 	shr	result1, #24
23c34     0D 4E 05 F1 | 	add	fp, #13
23c38     A7 FA 41 FC | 	wrbyte	result1, fp
23c3c     0D 4E 85 F1 | 	sub	fp, #13
23c40     A7 FA 01 FB | 	rdlong	result1, fp
23c44     10 FA 45 F0 | 	shr	result1, #16
23c48     0E 4E 05 F1 | 	add	fp, #14
23c4c     A7 FA 41 FC | 	wrbyte	result1, fp
23c50     0E 4E 85 F1 | 	sub	fp, #14
23c54     A7 FA 01 FB | 	rdlong	result1, fp
23c58     08 FA 45 F0 | 	shr	result1, #8
23c5c     0F 4E 05 F1 | 	add	fp, #15
23c60     A7 FA 41 FC | 	wrbyte	result1, fp
23c64     0F 4E 85 F1 | 	sub	fp, #15
23c68     A7 FA 01 FB | 	rdlong	result1, fp
23c6c     10 4E 05 F1 | 	add	fp, #16
23c70     A7 FA 41 FC | 	wrbyte	result1, fp
23c74     0C 4E 85 F1 | 	sub	fp, #12
23c78     A7 02 48 FC | 	wrbyte	#1, fp
23c7c     08 4E 85 F1 | 	sub	fp, #8
23c80     A7 FA C9 FA | 	rdbyte	result1, fp wz
23c84     04 4E 85 F1 | 	sub	fp, #4
23c88     0C 4E 05 A1 |  if_e	add	fp, #12
23c8c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
23c90     0C 4E 85 A1 |  if_e	sub	fp, #12
23c94     04 4E 05 F1 | 	add	fp, #4
23c98     A7 FA C1 FA | 	rdbyte	result1, fp
23c9c     04 4E 85 F1 | 	sub	fp, #4
23ca0     08 FA 0D F2 | 	cmp	result1, #8 wz
23ca4     0C 4E 05 A1 |  if_e	add	fp, #12
23ca8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
23cac     0C 4E 85 A1 |  if_e	sub	fp, #12
23cb0     0C 4E 05 F1 | 	add	fp, #12
23cb4     A7 14 C2 FA | 	rdbyte	arg02, fp
23cb8     0D 4E 05 F1 | 	add	fp, #13
23cbc     A7 14 42 FC | 	wrbyte	arg02, fp
23cc0     05 4E 85 F1 | 	sub	fp, #5
23cc4     A7 12 02 F6 | 	mov	arg01, fp
23cc8     14 4E 85 F1 | 	sub	fp, #20
23ccc     06 14 06 F6 | 	mov	arg02, #6
23cd0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0902
23cd4     04 4E 05 F1 | 	add	fp, #4
23cd8     A7 1E C2 FA | 	rdbyte	local01, fp
23cdc     04 4E 85 F1 | 	sub	fp, #4
23ce0     0C 1E 0E F2 | 	cmp	local01, #12 wz
23ce4     10 4E 05 A1 |  if_e	add	fp, #16
23ce8     A7 12 02 A6 |  if_e	mov	arg01, fp
23cec     10 4E 85 A1 |  if_e	sub	fp, #16
23cf0     01 14 06 A6 |  if_e	mov	arg02, #1
23cf4     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0909
23cf8     0C 4E 05 F1 | 	add	fp, #12
23cfc     A7 14 48 FC | 	wrbyte	#10, fp
23d00     0C 4E 85 F1 | 	sub	fp, #12
23d04                 | ' 	n = 10;
23d04                 | ' 	do
23d04                 | LR__3932
23d04     10 4E 05 F1 | 	add	fp, #16
23d08     A7 12 02 F6 | 	mov	arg01, fp
23d0c     10 4E 85 F1 | 	sub	fp, #16
23d10     01 14 06 F6 | 	mov	arg02, #1
23d14     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0909
23d18     10 4E 05 F1 | 	add	fp, #16
23d1c     A7 1E C2 FA | 	rdbyte	local01, fp
23d20     10 4E 85 F1 | 	sub	fp, #16
23d24     80 1E CE F7 | 	test	local01, #128 wz
23d28     1C 00 90 AD |  if_e	jmp	#LR__3933
23d2c     0C 4E 05 F1 | 	add	fp, #12
23d30     A7 1E C2 FA | 	rdbyte	local01, fp
23d34     01 1E 86 F1 | 	sub	local01, #1
23d38     A7 1E 42 FC | 	wrbyte	local01, fp
23d3c     A7 1E CA FA | 	rdbyte	local01, fp wz
23d40     0C 4E 85 F1 | 	sub	fp, #12
23d44     BC FF 9F 5D |  if_ne	jmp	#LR__3932
23d48                 | LR__3933
23d48                 | ' 
23d48                 | ' 	return d;
23d48     10 4E 05 F1 | 	add	fp, #16
23d4c     A7 FA C1 FA | 	rdbyte	result1, fp
23d50     10 4E 85 F1 | 	sub	fp, #16
23d54                 | LR__3934
23d54     A7 F0 03 F6 | 	mov	ptra, fp
23d58     B2 00 A0 FD | 	call	#popregs_
23d5c                 | _fatfs_cc_send_cmd_0933_ret
23d5c     2D 00 64 FD | 	ret
23d60                 | 
23d60                 | _fatfs_cc_disk_deinitialize
23d60     03 4A 05 F6 | 	mov	COUNT_, #3
23d64     A8 00 A0 FD | 	call	#pushregs_
23d68     00 12 4E F2 | 	cmps	arg01, #0 wz
23d6c     01 00 00 FF 
23d70     14 E4 05 F1 | 	add	objptr, ##532
23d74     F2 12 02 FB | 	rdlong	arg01, objptr
23d78     04 E4 85 F1 | 	sub	objptr, #4
23d7c     F2 1E 02 FB | 	rdlong	local01, objptr
23d80     08 E4 05 F1 | 	add	objptr, #8
23d84     F2 20 02 FB | 	rdlong	local02, objptr
23d88     04 E4 05 F1 | 	add	objptr, #4
23d8c     F2 22 02 FB | 	rdlong	local03, objptr
23d90     01 00 00 FF 
23d94     1C E4 85 F1 | 	sub	objptr, ##540
23d98                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
23d98                 | '         return RES_NOTRDY;
23d98     03 FA 05 56 |  if_ne	mov	result1, #3
23d9c     2C 00 90 5D |  if_ne	jmp	#LR__3940
23da0     50 12 62 FD | 	fltl	arg01
23da4     09 01 08 FC | 	wrpin	#0, arg01
23da8     50 1E 62 FD | 	fltl	local01
23dac     0F 01 08 FC | 	wrpin	#0, local01
23db0     50 20 62 FD | 	fltl	local02
23db4     10 01 08 FC | 	wrpin	#0, local02
23db8     50 22 62 FD | 	fltl	local03
23dbc     11 01 08 FC | 	wrpin	#0, local03
23dc0     0A 12 06 F6 | 	mov	arg01, #10
23dc4     80 17 BF FD | 	call	#__system___waitms
23dc8                 | '     }
23dc8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
23dc8                 | '     _pinclear(PIN_SS);
23dc8                 | '     _pinclear(PIN_CLK);
23dc8                 | '     _pinclear(PIN_DI);
23dc8                 | '     _pinclear(PIN_DO);
23dc8                 | ' 
23dc8                 | '     _waitms(10);
23dc8                 | ' 
23dc8                 | '     return 0;
23dc8     00 FA 05 F6 | 	mov	result1, #0
23dcc                 | LR__3940
23dcc     A7 F0 03 F6 | 	mov	ptra, fp
23dd0     B2 00 A0 FD | 	call	#popregs_
23dd4                 | _fatfs_cc_disk_deinitialize_ret
23dd4     2D 00 64 FD | 	ret
23dd8                 | 
23dd8                 | _fatfs_cc_gettimeofday
23dd8     04 4A 05 F6 | 	mov	COUNT_, #4
23ddc     A8 00 A0 FD | 	call	#pushregs_
23de0     09 1F 02 F6 | 	mov	local01, arg01
23de4     3C 13 BF FD | 	call	#__system___getus
23de8     FD 12 02 F6 | 	mov	arg01, result1
23dec     02 00 00 FF 
23df0     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
23df4     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
23df8     09 FB 01 F6 | 	mov	result1, arg01
23dfc     10 FB 81 F1 | 	sub	result1, local02
23e00     A1 07 00 FF 
23e04     40 FA 15 FD | 	qdiv	result1, ##1000000
23e08     02 00 00 FF 
23e0c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
23e10     18 20 62 FD | 	getqx	local02
23e14     A1 07 00 FF 
23e18     40 FA 15 FD | 	qdiv	result1, ##1000000
23e1c     00 20 0E F2 | 	cmp	local02, #0 wz
23e20     19 22 62 FD | 	getqy	local03
23e24     28 00 90 AD |  if_e	jmp	#LR__3950
23e28     02 00 00 FF 
23e2c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
23e30     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23e34     10 25 02 F1 | 	add	local04, local02
23e38     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
23e3c     11 13 82 F1 | 	sub	arg01, local03
23e40     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
23e44     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
23e48     02 00 00 FF 
23e4c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
23e50                 | LR__3950
23e50     02 00 00 FF 
23e54     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
23e58     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23e5c     02 00 00 FF 
23e60     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
23e64     0F 25 62 FC | 	wrlong	local04, local01
23e68     04 1E 06 F1 | 	add	local01, #4
23e6c     0F 23 62 FC | 	wrlong	local03, local01
23e70                 | '         lastsec += secs;
23e70                 | '         lastus = now - leftover;
23e70                 | '     }
23e70                 | '     tv->tv_sec = lastsec;
23e70                 | '     tv->tv_usec = leftover;
23e70                 | '     return 0;
23e70     00 FA 05 F6 | 	mov	result1, #0
23e74     A7 F0 03 F6 | 	mov	ptra, fp
23e78     B2 00 A0 FD | 	call	#popregs_
23e7c                 | _fatfs_cc_gettimeofday_ret
23e7c     2D 00 64 FD | 	ret
23e80                 | 
23e80                 | _fatfs_cc__is_leap_year
23e80     09 FB 51 F6 | 	abs	result1, arg01 wc
23e84     03 FA 05 F5 | 	and	result1, #3
23e88     FD FA 89 F6 | 	negc	result1, result1 wz
23e8c     38 00 90 5D |  if_ne	jmp	#LR__3961
23e90     09 FB 51 F6 | 	abs	result1, arg01 wc
23e94     64 FA 15 FD | 	qdiv	result1, #100
23e98     19 FA 61 FD | 	getqy	result1
23e9c     FD FA 89 F6 | 	negc	result1, result1 wz
23ea0     1C 00 90 5D |  if_ne	jmp	#LR__3960
23ea4     09 FB 51 F6 | 	abs	result1, arg01 wc
23ea8     90 FB 15 FD | 	qdiv	result1, #400
23eac                 | '       return (0 == y % 400);
23eac     00 FA 05 F6 | 	mov	result1, #0
23eb0     19 00 62 FD | 	getqy	_var01
23eb4     00 01 8A F6 | 	negc	_var01, _var01 wz
23eb8     01 FA 05 A6 |  if_e	mov	result1, #1
23ebc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
23ec0                 | LR__3960
23ec0                 | '     return 1;
23ec0     01 FA 05 F6 | 	mov	result1, #1
23ec4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
23ec8                 | LR__3961
23ec8                 | '   }
23ec8                 | '   return 0;
23ec8     00 FA 05 F6 | 	mov	result1, #0
23ecc                 | _fatfs_cc__is_leap_year_ret
23ecc     2D 00 64 FD | 	ret
23ed0                 | 
23ed0                 | _fatfs_cc___tzoffset
23ed0     09 01 0A F6 | 	mov	_var01, arg01 wz
23ed4     FF FF FF FF 
23ed8     0A FF 6B FC | 	wrlong	##-1, arg02
23edc     01 02 06 F6 | 	mov	_var02, #1
23ee0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
23ee4                 | '                 return 0;
23ee4     00 FA 05 A6 |  if_e	mov	result1, #0
23ee8     94 02 90 AD |  if_e	jmp	#LR__3987
23eec     0A 01 68 FC | 	wrlong	#0, arg02
23ef0     02 00 00 FF 
23ef4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23ef8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
23efc                 | ' 
23efc                 | '        *hasdst = 0;
23efc                 | ' 
23efc                 | ' 	n = stdname;
23efc                 | '         while (*s && isalpha(*s)) {
23efc     02 00 00 FF 
23f00     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
23f04     97 28 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
23f08                 | LR__3970
23f08     00 05 CA FA | 	rdbyte	_var03, _var01 wz
23f0c     48 00 90 AD |  if_e	jmp	#LR__3972
23f10     00 13 C2 FA | 	rdbyte	arg01, _var01
23f14                 | ' {
23f14                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
23f14     80 12 36 F3 | 	fle	arg01, #128 wc
23f18                 | '     return __ctype[c];
23f18     02 00 00 FF 
23f1c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23f20     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23f24     09 FB C1 FA | 	rdbyte	result1, arg01
23f28     02 00 00 FF 
23f2c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23f30     0C FA CD F7 | 	test	result1, #12 wz
23f34     20 00 90 AD |  if_e	jmp	#LR__3972
23f38     00 09 02 F6 | 	mov	_var05, _var01
23f3c     00 0B 02 F6 | 	mov	_var06, _var01
23f40     01 0A 06 F1 | 	add	_var06, #1
23f44     04 0D C2 FA | 	rdbyte	_var07, _var05
23f48     05 01 02 F6 | 	mov	_var01, _var06
23f4c     03 0D 42 FC | 	wrbyte	_var07, _var04
23f50     01 06 06 F1 | 	add	_var04, #1
23f54     B0 FF 9F FD | 	jmp	#LR__3970
23f58                 | LR__3971
23f58                 | LR__3972
23f58     03 01 48 FC | 	wrbyte	#0, _var04
23f5c     00 0E 06 F6 | 	mov	_var08, #0
23f60     00 05 C2 FA | 	rdbyte	_var03, _var01
23f64     2D 04 0E F2 | 	cmp	_var03, #45 wz
23f68     01 02 66 A6 |  if_e	neg	_var02, #1
23f6c     01 00 06 A1 |  if_e	add	_var01, #1
23f70     97 28 48 FB | 	callpa	#(@LR__3974-@LR__3973)>>2,fcache_load_ptr_
23f74                 | '                 sgn = -1;
23f74                 | '                 s++;
23f74                 | '         }
23f74                 | '         while (isdigit(*s)) {
23f74                 | LR__3973
23f74     00 13 C2 FA | 	rdbyte	arg01, _var01
23f78                 | ' {
23f78                 | '   return  (__ctype_get(c) & 0x02 ) ;
23f78     80 12 36 F3 | 	fle	arg01, #128 wc
23f7c                 | '     return __ctype[c];
23f7c     02 00 00 FF 
23f80     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23f84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23f88     09 FB C1 FA | 	rdbyte	result1, arg01
23f8c     02 00 00 FF 
23f90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23f94     02 FA CD F7 | 	test	result1, #2 wz
23f98     28 00 90 AD |  if_e	jmp	#LR__3975
23f9c     07 05 02 F6 | 	mov	_var03, _var08
23fa0     02 04 66 F0 | 	shl	_var03, #2
23fa4     07 05 02 F1 | 	add	_var03, _var08
23fa8     01 04 66 F0 | 	shl	_var03, #1
23fac     00 09 C2 FA | 	rdbyte	_var05, _var01
23fb0     30 08 86 F1 | 	sub	_var05, #48
23fb4     04 05 02 F1 | 	add	_var03, _var05
23fb8     02 0F 02 F6 | 	mov	_var08, _var03
23fbc     01 00 06 F1 | 	add	_var01, #1
23fc0     B0 FF 9F FD | 	jmp	#LR__3973
23fc4                 | LR__3974
23fc4                 | LR__3975
23fc4     07 00 00 FF 
23fc8     10 0E 06 FD | 	qmul	_var08, ##3600
23fcc     00 05 C2 FA | 	rdbyte	_var03, _var01
23fd0     3A 04 0E F2 | 	cmp	_var03, #58 wz
23fd4     18 10 62 FD | 	getqx	_var09
23fd8     70 00 90 5D |  if_ne	jmp	#LR__3979
23fdc     00 0E 06 F6 | 	mov	_var08, #0
23fe0     01 00 06 F1 | 	add	_var01, #1
23fe4     97 28 48 FB | 	callpa	#(@LR__3977-@LR__3976)>>2,fcache_load_ptr_
23fe8                 | '                 x = 0;
23fe8                 | '                 s++;
23fe8                 | '                 while (isdigit(*s)) {
23fe8                 | LR__3976
23fe8     00 13 C2 FA | 	rdbyte	arg01, _var01
23fec                 | ' {
23fec                 | '   return  (__ctype_get(c) & 0x02 ) ;
23fec     80 12 36 F3 | 	fle	arg01, #128 wc
23ff0                 | '     return __ctype[c];
23ff0     02 00 00 FF 
23ff4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23ff8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23ffc     09 FB C1 FA | 	rdbyte	result1, arg01
24000     02 00 00 FF 
24004     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24008     02 FA CD F7 | 	test	result1, #2 wz
2400c     28 00 90 AD |  if_e	jmp	#LR__3978
24010     07 05 02 F6 | 	mov	_var03, _var08
24014     02 04 66 F0 | 	shl	_var03, #2
24018     07 05 02 F1 | 	add	_var03, _var08
2401c     01 04 66 F0 | 	shl	_var03, #1
24020     00 09 C2 FA | 	rdbyte	_var05, _var01
24024     30 08 86 F1 | 	sub	_var05, #48
24028     04 05 02 F1 | 	add	_var03, _var05
2402c     02 0F 02 F6 | 	mov	_var08, _var03
24030     01 00 06 F1 | 	add	_var01, #1
24034     B0 FF 9F FD | 	jmp	#LR__3976
24038                 | LR__3977
24038                 | LR__3978
24038     07 0D 02 F6 | 	mov	_var07, _var08
2403c     04 0C 66 F0 | 	shl	_var07, #4
24040     07 0D 82 F1 | 	sub	_var07, _var08
24044     02 0C 66 F0 | 	shl	_var07, #2
24048     06 11 02 F1 | 	add	_var09, _var07
2404c                 | LR__3979
2404c     02 00 00 FF 
24050     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24054     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24058     00 13 C2 FA | 	rdbyte	arg01, _var01
2405c                 | ' {
2405c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2405c     80 12 36 F3 | 	fle	arg01, #128 wc
24060                 | '     return __ctype[c];
24060     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
24064     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24068     09 FB C1 FA | 	rdbyte	result1, arg01
2406c     02 00 00 FF 
24070     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24074     0C FA CD F7 | 	test	result1, #12 wz
24078     50 00 90 AD |  if_e	jmp	#LR__3982
2407c     0A 03 68 FC | 	wrlong	#1, arg02
24080                 | '                 *hasdst = 1;
24080                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
24080                 | LR__3980
24080     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24084     44 00 90 AD |  if_e	jmp	#LR__3981
24088     00 13 C2 FA | 	rdbyte	arg01, _var01
2408c                 | ' {
2408c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2408c     80 12 36 F3 | 	fle	arg01, #128 wc
24090                 | '     return __ctype[c];
24090     02 00 00 FF 
24094     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24098     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2409c     09 FB C1 FA | 	rdbyte	result1, arg01
240a0     02 00 00 FF 
240a4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
240a8     0C FA CD F7 | 	test	result1, #12 wz
240ac     1C 00 90 AD |  if_e	jmp	#LR__3981
240b0     00 0B 02 F6 | 	mov	_var06, _var01
240b4     01 0A 06 F1 | 	add	_var06, #1
240b8     00 0D C2 FA | 	rdbyte	_var07, _var01
240bc     05 01 02 F6 | 	mov	_var01, _var06
240c0     03 0D 42 FC | 	wrbyte	_var07, _var04
240c4     01 06 06 F1 | 	add	_var04, #1
240c8     B4 FF 9F FD | 	jmp	#LR__3980
240cc                 | LR__3981
240cc                 | LR__3982
240cc     03 01 48 FC | 	wrbyte	#0, _var04
240d0     02 00 00 FF 
240d4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
240d8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
240dc     02 00 00 FF 
240e0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
240e4     20 00 90 AD |  if_e	jmp	#LR__3983
240e8     02 00 00 FF 
240ec     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
240f0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
240f4     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
240f8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
240fc     02 00 00 FF 
24100     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24104     1C 00 90 FD | 	jmp	#LR__3984
24108                 | LR__3983
24108     02 00 00 FF 
2410c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
24110     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24114     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
24118     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2411c     02 00 00 FF 
24120     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24124                 | LR__3984
24124     02 00 00 FF 
24128     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2412c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24130     02 00 00 FF 
24134     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
24138     20 00 90 AD |  if_e	jmp	#LR__3985
2413c     02 00 00 FF 
24140     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24144     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24148     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2414c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24150     02 00 00 FF 
24154     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24158     1C 00 90 FD | 	jmp	#LR__3986
2415c                 | LR__3985
2415c     02 00 00 FF 
24160     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24164     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24168     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2416c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24170     02 00 00 FF 
24174     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24178                 | LR__3986
24178     08 03 02 FD | 	qmul	_var02, _var09
2417c                 | ' 		_tzname[1] = stdname;
2417c                 | ' 
2417c                 | '         return sgn * off;
2417c     18 FA 61 FD | 	getqx	result1
24180                 | LR__3987
24180                 | _fatfs_cc___tzoffset_ret
24180     2D 00 64 FD | 	ret
24184                 | 
24184                 | _fatfs_cc___indst
24184     10 12 06 F1 | 	add	arg01, #16
24188     09 01 02 FB | 	rdlong	_var01, arg01
2418c     10 12 86 F1 | 	sub	arg01, #16
24190     02 00 0E F2 | 	cmp	_var01, #2 wz
24194     30 00 90 5D |  if_ne	jmp	#LR__3990
24198     07 00 06 F6 | 	mov	_var01, #7
2419c     18 12 06 F1 | 	add	arg01, #24
241a0     09 03 02 FB | 	rdlong	_var02, arg01
241a4     01 01 02 F1 | 	add	_var01, _var02
241a8     0C 12 86 F1 | 	sub	arg01, #12
241ac     09 05 02 FB | 	rdlong	_var03, arg01
241b0     02 01 82 F1 | 	sub	_var01, _var03
241b4     00 00 56 F2 | 	cmps	_var01, #0 wc
241b8                 | '                         return 1;
241b8     01 FA 05 C6 |  if_b	mov	result1, #1
241bc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
241c0                 | '                 return 0;
241c0     00 FA 05 F6 | 	mov	result1, #0
241c4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
241c8                 | LR__3990
241c8     10 12 06 F1 | 	add	arg01, #16
241cc     09 01 02 FB | 	rdlong	_var01, arg01
241d0     10 12 86 F1 | 	sub	arg01, #16
241d4     0A 00 0E F2 | 	cmp	_var01, #10 wz
241d8     28 00 90 5D |  if_ne	jmp	#LR__3991
241dc     18 12 06 F1 | 	add	arg01, #24
241e0     09 01 02 FB | 	rdlong	_var01, arg01
241e4     0C 12 86 F1 | 	sub	arg01, #12
241e8     09 07 02 FB | 	rdlong	_var04, arg01
241ec     03 01 82 F1 | 	sub	_var01, _var04
241f0     00 00 56 F2 | 	cmps	_var01, #0 wc
241f4                 | '                         return 0;
241f4     00 FA 05 C6 |  if_b	mov	result1, #0
241f8     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
241fc                 | '                 return 1;
241fc     01 FA 05 F6 | 	mov	result1, #1
24200     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
24204                 | LR__3991
24204                 | '         }
24204                 | ' 
24204                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
24204     00 00 06 F6 | 	mov	_var01, #0
24208     10 12 06 F1 | 	add	arg01, #16
2420c     09 03 02 FB | 	rdlong	_var02, arg01
24210     10 12 86 F1 | 	sub	arg01, #16
24214     03 02 56 F2 | 	cmps	_var02, #3 wc
24218     10 00 90 CD |  if_b	jmp	#LR__3992
2421c     10 12 06 F1 | 	add	arg01, #16
24220     09 05 02 FB | 	rdlong	_var03, arg01
24224     0A 04 56 F2 | 	cmps	_var03, #10 wc
24228     01 00 06 C6 |  if_b	mov	_var01, #1
2422c                 | LR__3992
2422c     00 FB 01 F6 | 	mov	result1, _var01
24230                 | _fatfs_cc___indst_ret
24230     2D 00 64 FD | 	ret
24234                 | 
24234                 | ' 	
24234                 | ' 	FUNCTION pfunc(c as integer) as integer
24234                 | ___strs_cl_pfunc
24234                 | ' 		if (i < 16) then
24234     04 E4 05 F1 | 	add	objptr, #4
24238     F2 FA 01 FB | 	rdlong	result1, objptr
2423c     04 E4 85 F1 | 	sub	objptr, #4
24240     10 FA 55 F2 | 	cmps	result1, #16 wc
24244     2C 00 90 3D |  if_ae	jmp	#LR__4000
24248     F2 FA 01 FB | 	rdlong	result1, objptr
2424c     04 E4 05 F1 | 	add	objptr, #4
24250     F2 00 02 FB | 	rdlong	_var01, objptr
24254     FD 00 02 F1 | 	add	_var01, result1
24258     00 13 42 FC | 	wrbyte	arg01, _var01
2425c     F2 FA 01 FB | 	rdlong	result1, objptr
24260     01 FA 05 F1 | 	add	result1, #1
24264     F2 FA 61 FC | 	wrlong	result1, objptr
24268     04 E4 85 F1 | 	sub	objptr, #4
2426c                 | ' 			p(i) = c
2426c                 | ' 			i = i+1
2426c                 | ' 			return 1
2426c     01 FA 05 F6 | 	mov	result1, #1
24270     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
24274                 | LR__4000
24274                 | ' 			return -1
24274     01 FA 65 F6 | 	neg	result1, #1
24278                 | ___strs_cl_pfunc_ret
24278     2D 00 64 FD | 	ret
2427c                 | 
2427c                 | __struct__s_vfs_file_t_putchar
2427c     04 4A 05 F6 | 	mov	COUNT_, #4
24280     A8 00 A0 FD | 	call	#pushregs_
24284     1C E4 05 F1 | 	add	objptr, #28
24288     F2 1E 0A FB | 	rdlong	local01, objptr wz
2428c     1C E4 85 F1 | 	sub	objptr, #28
24290     00 FA 05 A6 |  if_e	mov	result1, #0
24294     48 00 90 AD |  if_e	jmp	#LR__4010
24298     1C E4 05 F1 | 	add	objptr, #28
2429c     F2 20 02 FB | 	rdlong	local02, objptr
242a0     10 23 02 F6 | 	mov	local03, local02
242a4     1C E4 85 F1 | 	sub	objptr, #28
242a8     13 22 46 F7 | 	zerox	local03, #19
242ac     14 20 46 F0 | 	shr	local02, #20
242b0     02 20 66 F0 | 	shl	local02, #2
242b4     ED 20 02 F1 | 	add	local02, __methods__
242b8     10 21 02 FB | 	rdlong	local02, local02
242bc     F2 14 02 F6 | 	mov	arg02, objptr
242c0     F2 24 02 F6 | 	mov	local04, objptr
242c4     11 E5 01 F6 | 	mov	objptr, local03
242c8     2D 20 62 FD | 	call	local02
242cc     12 E5 01 F6 | 	mov	objptr, local04
242d0                 | '     return (i < 0) ? 0 : 1;
242d0     00 FA 55 F2 | 	cmps	result1, #0 wc
242d4     00 1E 06 C6 |  if_b	mov	local01, #0
242d8     01 1E 06 36 |  if_ae	mov	local01, #1
242dc     0F FB 01 F6 | 	mov	result1, local01
242e0                 | LR__4010
242e0     A7 F0 03 F6 | 	mov	ptra, fp
242e4     B2 00 A0 FD | 	call	#popregs_
242e8                 | __struct__s_vfs_file_t_putchar_ret
242e8     2D 00 64 FD | 	ret
242ec                 | 
242ec                 | __struct__s_vfs_file_t_getchar
242ec     03 4A 05 F6 | 	mov	COUNT_, #3
242f0     A8 00 A0 FD | 	call	#pushregs_
242f4     20 E4 05 F1 | 	add	objptr, #32
242f8     F2 12 0A FB | 	rdlong	arg01, objptr wz
242fc     20 E4 85 F1 | 	sub	objptr, #32
24300     01 FA 65 A6 |  if_e	neg	result1, #1
24304     38 00 90 AD |  if_e	jmp	#LR__4020
24308                 | '     return getcf(__this);
24308     20 E4 05 F1 | 	add	objptr, #32
2430c     F2 1E 02 FB | 	rdlong	local01, objptr
24310     0F 21 02 F6 | 	mov	local02, local01
24314     20 E4 85 F1 | 	sub	objptr, #32
24318     13 20 46 F7 | 	zerox	local02, #19
2431c     14 1E 46 F0 | 	shr	local01, #20
24320     02 1E 66 F0 | 	shl	local01, #2
24324     ED 1E 02 F1 | 	add	local01, __methods__
24328     0F 1F 02 FB | 	rdlong	local01, local01
2432c     F2 12 02 F6 | 	mov	arg01, objptr
24330     F2 22 02 F6 | 	mov	local03, objptr
24334     10 E5 01 F6 | 	mov	objptr, local02
24338     2D 1E 62 FD | 	call	local01
2433c     11 E5 01 F6 | 	mov	objptr, local03
24340                 | LR__4020
24340     A7 F0 03 F6 | 	mov	ptra, fp
24344     B2 00 A0 FD | 	call	#popregs_
24348                 | __struct__s_vfs_file_t_getchar_ret
24348     2D 00 64 FD | 	ret
2434c                 | 
2434c                 | __struct___bas_wrap_sender_tx
2434c     03 4A 05 F6 | 	mov	COUNT_, #3
24350     A8 00 A0 FD | 	call	#pushregs_
24354     F2 1E 02 FB | 	rdlong	local01, objptr
24358     0F 21 02 F6 | 	mov	local02, local01
2435c     13 1E 46 F7 | 	zerox	local01, #19
24360     14 20 46 F0 | 	shr	local02, #20
24364     02 20 66 F0 | 	shl	local02, #2
24368     ED 20 02 F1 | 	add	local02, __methods__
2436c     10 21 02 FB | 	rdlong	local02, local02
24370     F2 22 02 F6 | 	mov	local03, objptr
24374     0F E5 01 F6 | 	mov	objptr, local01
24378     2D 20 62 FD | 	call	local02
2437c     11 E5 01 F6 | 	mov	objptr, local03
24380     01 FA 05 F6 | 	mov	result1, #1
24384     A7 F0 03 F6 | 	mov	ptra, fp
24388     B2 00 A0 FD | 	call	#popregs_
2438c                 | __struct___bas_wrap_sender_tx_ret
2438c     2D 00 64 FD | 	ret
24390                 | 
24390                 | __struct___bas_wrap_sender_rx
24390     03 4A 05 F6 | 	mov	COUNT_, #3
24394     A8 00 A0 FD | 	call	#pushregs_
24398     04 E4 05 F1 | 	add	objptr, #4
2439c     F2 1E 02 FB | 	rdlong	local01, objptr
243a0     0F 21 02 F6 | 	mov	local02, local01
243a4     04 E4 85 F1 | 	sub	objptr, #4
243a8     13 20 46 F7 | 	zerox	local02, #19
243ac     14 1E 46 F0 | 	shr	local01, #20
243b0     02 1E 66 F0 | 	shl	local01, #2
243b4     ED 1E 02 F1 | 	add	local01, __methods__
243b8     0F 1F 02 FB | 	rdlong	local01, local01
243bc     F2 22 02 F6 | 	mov	local03, objptr
243c0     10 E5 01 F6 | 	mov	objptr, local02
243c4     2D 1E 62 FD | 	call	local01
243c8     11 E5 01 F6 | 	mov	objptr, local03
243cc     A7 F0 03 F6 | 	mov	ptra, fp
243d0     B2 00 A0 FD | 	call	#popregs_
243d4                 | __struct___bas_wrap_sender_rx_ret
243d4     2D 00 64 FD | 	ret
243d8                 | 
243d8                 | __struct___bas_wrap_sender_close
243d8     03 4A 05 F6 | 	mov	COUNT_, #3
243dc     A8 00 A0 FD | 	call	#pushregs_
243e0     08 E4 05 F1 | 	add	objptr, #8
243e4     F2 1E 02 FB | 	rdlong	local01, objptr
243e8     0F 21 02 F6 | 	mov	local02, local01
243ec     08 E4 85 F1 | 	sub	objptr, #8
243f0     13 20 46 F7 | 	zerox	local02, #19
243f4     14 1E 46 F0 | 	shr	local01, #20
243f8     02 1E 66 F0 | 	shl	local01, #2
243fc     ED 1E 02 F1 | 	add	local01, __methods__
24400     0F 1F 02 FB | 	rdlong	local01, local01
24404     F2 22 02 F6 | 	mov	local03, objptr
24408     10 E5 01 F6 | 	mov	objptr, local02
2440c     2D 1E 62 FD | 	call	local01
24410     11 E5 01 F6 | 	mov	objptr, local03
24414     A7 F0 03 F6 | 	mov	ptra, fp
24418     B2 00 A0 FD | 	call	#popregs_
2441c                 | __struct___bas_wrap_sender_close_ret
2441c     2D 00 64 FD | 	ret
24420                 | 
24420                 | LR__4030
24420     2F          | 	byte	"/"
24421     00          | 	byte	0
24422                 | LR__4031
24422     69 6E 66    | 	byte	"inf"
24425     00          | 	byte	0
24426                 | LR__4032
24426     6E 61 6E    | 	byte	"nan"
24429     00          | 	byte	0
2442a                 | LR__4033
2442a                 | 	byte	
2442a     00          | 	byte	0
2442b                 | LR__4034
2442b                 | 	byte	
2442b     00          | 	byte	0
2442c                 | LR__4035
2442c                 | 	byte	
2442c     00          | 	byte	0
2442d                 | LR__4036
2442d                 | 	byte	
2442d     00          | 	byte	0
2442e                 | LR__4037
2442e                 | 	byte	
2442e     00          | 	byte	0
2442f                 | LR__4038
2442f                 | 	byte	
2442f     00          | 	byte	0
24430                 | LR__4039
24430                 | 	byte	
24430     00          | 	byte	0
24431                 | LR__4040
24431                 | 	byte	
24431     00          | 	byte	0
24432                 | LR__4041
24432     00          | 	byte	0
24433     00          | 	byte	0
24434                 | LR__4042
24434     00          | 	byte	0
24435     00          | 	byte	0
24436                 | LR__4043
24436     00          | 	byte	0
24437     00          | 	byte	0
24438                 | LR__4044
24438     20 21 21 21 
2443c     20 63 6F 72 
24440     72 75 70 74 
24444     65 64 20 68 
24448     65 61 70 3F 
2444c     3F 3F 20 21 
24450     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
24453     00          | 	byte	0
24454                 | LR__4045
24454     20 21 21 21 
24458     20 6F 75 74 
2445c     20 6F 66 20 
24460     68 65 61 70 
24464     20 6D 65 6D 
24468     6F 72 79 20 
2446c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
24470     00          | 	byte	0
24471                 | LR__4046
24471     20 21 21 21 
24475     20 63 6F 72 
24479     72 75 70 74 
2447d     65 64 20 68 
24481     65 61 70 20 
24485     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
24489     00          | 	byte	0
2448a                 | LR__4047
2448a     00          | 	byte	0
2448b     00          | 	byte	0
2448c                 | LR__4048
2448c     2E          | 	byte	"."
2448d     00          | 	byte	0
2448e                 | LR__4049
2448e     00          | 	byte	0
2448f     00          | 	byte	0
24490                 | LR__4050
24490     00          | 	byte	0
24491     00          | 	byte	0
24492                 | LR__4051
24492     00          | 	byte	0
24493     00          | 	byte	0
24494                 | LR__4052
24494     2A 3A 3C 3E 
24498     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2449c     00          | 	byte	0
2449d                 | LR__4053
2449d     2B 2C 3B 3D 
244a1     5B 5D       | 	byte	"+,;=[]"
244a3     00          | 	byte	0
244a4                 | LR__4054
244a4     46 41 54 33 
244a8     32 20 20 20 | 	byte	"FAT32   "
244ac     00          | 	byte	0
244ad                 | LR__4055
244ad     54 5A       | 	byte	"TZ"
244af     00          | 	byte	0
244b0                 | LR__4056
244b0     00          | 	byte	0
244b1     00          | 	byte	0
244b2                 | LR__4057
244b2                 | 	byte	
244b2     00          | 	byte	0
244b3                 | LR__4058
244b3                 | 	byte	
244b3     00          | 	byte	0
244b4                 | LR__4059
244b4     3A          | 	byte	":"
244b5     00          | 	byte	0
244b6                 | LR__4060
244b6                 | 	byte	
244b6     00          | 	byte	0
244b7                 | LR__4061
244b7                 | 	byte	
244b7     00          | 	byte	0
244b8                 | LR__4062
244b8                 | 	byte	
244b8     00          | 	byte	0
244b9                 | LR__4063
244b9                 | 	byte	
244b9     00          | 	byte	0
244ba                 | LR__4064
244ba                 | 	byte	
244ba     00          | 	byte	0
244bb                 | LR__4065
244bb                 | 	byte	
244bb     00          | 	byte	0
244bc                 | LR__4066
244bc                 | 	byte	
244bc     00          | 	byte	0
244bd                 | LR__4067
244bd     22          | 	byte	34
244be     00          | 	byte	0
244bf                 | LR__4068
244bf     22          | 	byte	34
244c0     00          | 	byte	0
244c1                 | LR__4069
244c1     22          | 	byte	34
244c2     00          | 	byte	0
244c3                 | LR__4070
244c3     22          | 	byte	34
244c4     00          | 	byte	0
244c5                 | LR__4071
244c5     22          | 	byte	34
244c6     00          | 	byte	0
244c7                 | LR__4072
244c7     3E          | 	byte	">"
244c8     00          | 	byte	0
244c9                 | LR__4073
244c9     3E          | 	byte	">"
244ca     00          | 	byte	0
244cb                 | LR__4074
244cb     2B          | 	byte	"+"
244cc     00          | 	byte	0
244cd                 | LR__4075
244cd     2D          | 	byte	"-"
244ce     00          | 	byte	0
244cf                 | LR__4076
244cf     2A          | 	byte	"*"
244d0     00          | 	byte	0
244d1                 | LR__4077
244d1     2F          | 	byte	"/"
244d2     00          | 	byte	0
244d3                 | LR__4078
244d3     5E          | 	byte	"^"
244d4     00          | 	byte	0
244d5                 | LR__4079
244d5     3D          | 	byte	"="
244d6     00          | 	byte	0
244d7                 | LR__4080
244d7     2B          | 	byte	"+"
244d8     00          | 	byte	0
244d9                 | LR__4081
244d9     2B          | 	byte	"+"
244da     00          | 	byte	0
244db                 | LR__4082
244db     2D          | 	byte	"-"
244dc     00          | 	byte	0
244dd                 | LR__4083
244dd     2D          | 	byte	"-"
244de     00          | 	byte	0
244df                 | LR__4084
244df     3C          | 	byte	"<"
244e0     00          | 	byte	0
244e1                 | LR__4085
244e1     3E          | 	byte	">"
244e2     00          | 	byte	0
244e3                 | LR__4086
244e3     22          | 	byte	34
244e4     00          | 	byte	0
244e5                 | LR__4087
244e5     22          | 	byte	34
244e6     00          | 	byte	0
244e7                 | LR__4088
244e7                 | 	byte	
244e7     00          | 	byte	0
244e8                 | LR__4089
244e8     6C 6F 61 64 | 	byte	"load"
244ec     00          | 	byte	0
244ed                 | LR__4090
244ed     73 61 76 65 | 	byte	"save"
244f1     00          | 	byte	0
244f2                 | LR__4091
244f2     62 72 75 6E | 	byte	"brun"
244f6     00          | 	byte	0
244f7                 | LR__4092
244f7     6D 6F 75 73 
244fb     65          | 	byte	"mouse"
244fc     00          | 	byte	0
244fd                 | LR__4093
244fd     63 75 72 73 
24501     6F 72       | 	byte	"cursor"
24503     00          | 	byte	0
24504                 | LR__4094
24504     63 6C 69 63 
24508     6B          | 	byte	"click"
24509     00          | 	byte	0
2450a                 | LR__4095
2450a     6F 6E       | 	byte	"on"
2450c     00          | 	byte	0
2450d                 | LR__4096
2450d     31          | 	byte	"1"
2450e     00          | 	byte	0
2450f                 | LR__4097
2450f     6F 66 66    | 	byte	"off"
24512     00          | 	byte	0
24513                 | LR__4098
24513     30          | 	byte	"0"
24514     00          | 	byte	0
24515                 | LR__4099
24515                 | 	byte	
24515     00          | 	byte	0
24516                 | LR__4100
24516                 | 	byte	
24516     00          | 	byte	0
24517                 | LR__4101
24517                 | 	byte	
24517     00          | 	byte	0
24518                 | LR__4102
24518                 | 	byte	
24518     00          | 	byte	0
24519                 | LR__4103
24519     20 55 73 65 
2451d     72 20 66 75 
24521     6E 63 74 69 
24525     6F 6E 73 20 
24529     61 6E 64 20 
2452d     61 72 72 61 
24531     79 73 20 6E 
24535     6F 74 20 79 
24539     65 74 20 69 
2453d     6D 70 6C 65 
24541     6D 65 6E 74 
24545     65 64       | 	byte	" User functions and arrays not yet implemented"
24547     00          | 	byte	0
24548                 | LR__4104
24548                 | 	byte	
24548     00          | 	byte	0
24549                 | LR__4105
24549                 | 	byte	
24549     00          | 	byte	0
2454a                 | LR__4106
2454a     52 65 61 64 
2454e     79          | 	byte	"Ready"
2454f     00          | 	byte	0
24550                 | LR__4107
24550     2B          | 	byte	"+"
24551     00          | 	byte	0
24552                 | LR__4108
24552     2D          | 	byte	"-"
24553     00          | 	byte	0
24554                 | LR__4109
24554     6F 72       | 	byte	"or"
24556     00          | 	byte	0
24557                 | LR__4110
24557     78 6F 72    | 	byte	"xor"
2455a     00          | 	byte	0
2455b                 | LR__4111
2455b     2A          | 	byte	"*"
2455c     00          | 	byte	0
2455d                 | LR__4112
2455d     2F          | 	byte	"/"
2455e     00          | 	byte	0
2455f                 | LR__4113
2455f     61 6E 64    | 	byte	"and"
24562     00          | 	byte	0
24563                 | LR__4114
24563     64 69 76    | 	byte	"div"
24566     00          | 	byte	0
24567                 | LR__4115
24567     6D 6F 64    | 	byte	"mod"
2456a     00          | 	byte	0
2456b                 | LR__4116
2456b     73 68 6C    | 	byte	"shl"
2456e     00          | 	byte	0
2456f                 | LR__4117
2456f     73 68 72    | 	byte	"shr"
24572     00          | 	byte	0
24573                 | LR__4118
24573     5E          | 	byte	"^"
24574     00          | 	byte	0
24575                 | LR__4119
24575     6E 6F 74    | 	byte	"not"
24578     00          | 	byte	0
24579                 | LR__4120
24579     40          | 	byte	"@"
2457a     00          | 	byte	0
2457b                 | LR__4121
2457b     3D          | 	byte	"="
2457c     00          | 	byte	0
2457d                 | LR__4122
2457d     3E 3D       | 	byte	">="
2457f     00          | 	byte	0
24580                 | LR__4123
24580     3C 3D       | 	byte	"<="
24582     00          | 	byte	0
24583                 | LR__4124
24583     3C          | 	byte	"<"
24584     00          | 	byte	0
24585                 | LR__4125
24585     3E          | 	byte	">"
24586     00          | 	byte	0
24587                 | LR__4126
24587     3C 3E       | 	byte	"<>"
24589     00          | 	byte	0
2458a                 | LR__4127
2458a     2B 2B       | 	byte	"++"
2458c     00          | 	byte	0
2458d                 | LR__4128
2458d     2D 2D       | 	byte	"--"
2458f     00          | 	byte	0
24590                 | LR__4129
24590     2B          | 	byte	"+"
24591     00          | 	byte	0
24592                 | LR__4130
24592     2D          | 	byte	"-"
24593     00          | 	byte	0
24594                 | LR__4131
24594     3D          | 	byte	"="
24595     00          | 	byte	0
24596                 | LR__4132
24596     2C          | 	byte	","
24597     00          | 	byte	0
24598                 | LR__4133
24598     2A          | 	byte	"*"
24599     00          | 	byte	0
2459a                 | LR__4134
2459a     2F          | 	byte	"/"
2459b     00          | 	byte	0
2459c                 | LR__4135
2459c     3B          | 	byte	";"
2459d     00          | 	byte	0
2459e                 | LR__4136
2459e     22          | 	byte	34
2459f     00          | 	byte	0
245a0                 | LR__4137
245a0     5E          | 	byte	"^"
245a1     00          | 	byte	0
245a2                 | LR__4138
245a2     29          | 	byte	")"
245a3     00          | 	byte	0
245a4                 | LR__4139
245a4     28          | 	byte	"("
245a5     00          | 	byte	0
245a6                 | LR__4140
245a6     3A          | 	byte	":"
245a7     00          | 	byte	0
245a8                 | LR__4141
245a8     20          | 	byte	" "
245a9     00          | 	byte	0
245aa                 | LR__4142
245aa     3E          | 	byte	">"
245ab     00          | 	byte	0
245ac                 | LR__4143
245ac     3C          | 	byte	"<"
245ad     00          | 	byte	0
245ae                 | LR__4144
245ae     3D          | 	byte	"="
245af     00          | 	byte	0
245b0                 | LR__4145
245b0     63 6C 73    | 	byte	"cls"
245b3     00          | 	byte	0
245b4                 | LR__4146
245b4     6E 65 77    | 	byte	"new"
245b7     00          | 	byte	0
245b8                 | LR__4147
245b8     70 6C 6F 74 | 	byte	"plot"
245bc     00          | 	byte	0
245bd                 | LR__4148
245bd     64 72 61 77 | 	byte	"draw"
245c1     00          | 	byte	0
245c2                 | LR__4149
245c2     70 72 69 6E 
245c6     74          | 	byte	"print"
245c7     00          | 	byte	0
245c8                 | LR__4150
245c8     63 69 72 63 
245cc     6C 65       | 	byte	"circle"
245ce     00          | 	byte	0
245cf                 | LR__4151
245cf     66 63 69 72 
245d3     63 6C 65    | 	byte	"fcircle"
245d6     00          | 	byte	0
245d7                 | LR__4152
245d7     62 6F 78    | 	byte	"box"
245da     00          | 	byte	0
245db                 | LR__4153
245db     66 72 61 6D 
245df     65          | 	byte	"frame"
245e0     00          | 	byte	0
245e1                 | LR__4154
245e1     63 6F 6C 6F 
245e5     72          | 	byte	"color"
245e6     00          | 	byte	0
245e7                 | LR__4155
245e7     70 72 69 6E 
245eb     74          | 	byte	"print"
245ec     00          | 	byte	0
245ed                 | LR__4156
245ed     6C 69 73 74 | 	byte	"list"
245f1     00          | 	byte	0
245f2                 | LR__4157
245f2     72 75 6E    | 	byte	"run"
245f5     00          | 	byte	0
245f6                 | LR__4158
245f6     67 6F 74 6F | 	byte	"goto"
245fa     00          | 	byte	0
245fb                 | LR__4159
245fb     63 73 61 76 
245ff     65          | 	byte	"csave"
24600     00          | 	byte	0
24601                 | LR__4160
24601     73 61 76 65 | 	byte	"save"
24605     00          | 	byte	0
24606                 | LR__4161
24606     6C 6F 61 64 | 	byte	"load"
2460a     00          | 	byte	0
2460b                 | LR__4162
2460b     62 72 75 6E | 	byte	"brun"
2460f     00          | 	byte	0
24610                 | LR__4163
24610     70 69 6E 77 
24614     72 69 74 65 | 	byte	"pinwrite"
24618     00          | 	byte	0
24619                 | LR__4164
24619     77 61 69 74 
2461d     6D 73       | 	byte	"waitms"
2461f     00          | 	byte	0
24620                 | LR__4165
24620     77 61 69 74 
24624     76 62 6C    | 	byte	"waitvbl"
24627     00          | 	byte	0
24628                 | LR__4166
24628     69 66       | 	byte	"if"
2462a     00          | 	byte	0
2462b                 | LR__4167
2462b     65 6C 73 65 | 	byte	"else"
2462f     00          | 	byte	0
24630                 | LR__4168
24630     74 68 65 6E | 	byte	"then"
24634     00          | 	byte	0
24635                 | LR__4169
24635     62 65 65 70 | 	byte	"beep"
24639     00          | 	byte	0
2463a                 | LR__4170
2463a     64 69 72    | 	byte	"dir"
2463d     00          | 	byte	0
2463e                 | LR__4171
2463e     66 6F 72    | 	byte	"for"
24641     00          | 	byte	0
24642                 | LR__4172
24642     6E 65 78 74 | 	byte	"next"
24646     00          | 	byte	0
24647                 | LR__4173
24647     70 61 70 65 
2464b     72          | 	byte	"paper"
2464c     00          | 	byte	0
2464d                 | LR__4174
2464d     69 6E 6B    | 	byte	"ink"
24650     00          | 	byte	0
24651                 | LR__4175
24651     66 6F 6E 74 | 	byte	"font"
24655     00          | 	byte	0
24656                 | LR__4176
24656     6D 6F 64 65 | 	byte	"mode"
2465a     00          | 	byte	0
2465b                 | LR__4177
2465b     6D 6F 75 73 
2465f     65          | 	byte	"mouse"
24660     00          | 	byte	0
24661                 | LR__4178
24661     63 75 72 73 
24665     6F 72       | 	byte	"cursor"
24667     00          | 	byte	0
24668                 | LR__4179
24668     63 6C 69 63 
2466c     6B          | 	byte	"click"
2466d     00          | 	byte	0
2466e                 | LR__4180
2466e     64 65 66 73 
24672     70 72 69 74 
24676     65          | 	byte	"defsprite"
24677     00          | 	byte	0
24678                 | LR__4181
24678     73 70 72 69 
2467c     74 65       | 	byte	"sprite"
2467e     00          | 	byte	0
2467f                 | LR__4182
2467f     77 61 69 74 
24683     63 6C 6F 63 
24687     6B          | 	byte	"waitclock"
24688     00          | 	byte	0
24689                 | LR__4183
24689     66 69 6C 6C | 	byte	"fill"
2468d     00          | 	byte	0
2468e                 | LR__4184
2468e     64 69 6D    | 	byte	"dim"
24691     00          | 	byte	0
24692                 | LR__4185
24692     72 6E 64    | 	byte	"rnd"
24695     00          | 	byte	0
24696                 | LR__4186
24696     6D 6F 75 73 
2469a     65 78       | 	byte	"mousex"
2469c     00          | 	byte	0
2469d                 | LR__4187
2469d     6D 6F 75 73 
246a1     65 79       | 	byte	"mousey"
246a3     00          | 	byte	0
246a4                 | LR__4188
246a4     6D 6F 75 73 
246a8     65 6B       | 	byte	"mousek"
246aa     00          | 	byte	0
246ab                 | LR__4189
246ab     6D 6F 75 73 
246af     65 77       | 	byte	"mousew"
246b1     00          | 	byte	0
246b2                 | LR__4190
246b2     67 65 74 74 
246b6     69 6D 65    | 	byte	"gettime"
246b9     00          | 	byte	0
246ba                 | LR__4191
246ba     73 69 6E    | 	byte	"sin"
246bd     00          | 	byte	0
246be                 | LR__4192
246be     73 74 69 63 
246c2     6B          | 	byte	"stick"
246c3     00          | 	byte	0
246c4                 | LR__4193
246c4     73 74 72 69 
246c8     67          | 	byte	"strig"
246c9     00          | 	byte	0
246ca                 | LR__4194
246ca     67 65 74 70 
246ce     69 78 65 6C | 	byte	"getpixel"
246d2     00          | 	byte	0
246d3                 | LR__4195
246d3     61          | 	byte	"a"
246d4     00          | 	byte	0
246d5                 | LR__4196
246d5     7A          | 	byte	"z"
246d6     00          | 	byte	0
246d7                 | LR__4197
246d7     5F          | 	byte	"_"
246d8     00          | 	byte	0
246d9                 | LR__4198
246d9     61          | 	byte	"a"
246da     00          | 	byte	0
246db                 | LR__4199
246db     7A          | 	byte	"z"
246dc     00          | 	byte	0
246dd                 | LR__4200
246dd     30          | 	byte	"0"
246de     00          | 	byte	0
246df                 | LR__4201
246df     39          | 	byte	"9"
246e0     00          | 	byte	0
246e1                 | LR__4202
246e1     5F          | 	byte	"_"
246e2     00          | 	byte	0
246e3                 | LR__4203
246e3     2E          | 	byte	"."
246e4     00          | 	byte	0
246e5                 | LR__4204
246e5     61          | 	byte	"a"
246e6     00          | 	byte	0
246e7                 | LR__4205
246e7     7A          | 	byte	"z"
246e8     00          | 	byte	0
246e9                 | LR__4206
246e9     30          | 	byte	"0"
246ea     00          | 	byte	0
246eb                 | LR__4207
246eb     39          | 	byte	"9"
246ec     00          | 	byte	0
246ed                 | LR__4208
246ed     5F          | 	byte	"_"
246ee     00          | 	byte	0
246ef                 | LR__4209
246ef     24          | 	byte	"$"
246f0     00          | 	byte	0
246f1                 | LR__4210
246f1     25          | 	byte	"%"
246f2     00          | 	byte	0
246f3                 | LR__4211
246f3     21          | 	byte	"!"
246f4     00          | 	byte	0
246f5                 | LR__4212
246f5     30          | 	byte	"0"
246f6     00          | 	byte	0
246f7                 | LR__4213
246f7     39          | 	byte	"9"
246f8     00          | 	byte	0
246f9                 | LR__4214
246f9     2E          | 	byte	"."
246fa     00          | 	byte	0
246fb                 | LR__4215
246fb     24          | 	byte	"$"
246fc     00          | 	byte	0
246fd                 | LR__4216
246fd     25          | 	byte	"%"
246fe     00          | 	byte	0
246ff                 | LR__4217
246ff     2D          | 	byte	"-"
24700     00          | 	byte	0
24701                 | LR__4218
24701     2E          | 	byte	"."
24702     00          | 	byte	0
24703                 | LR__4219
24703     30          | 	byte	"0"
24704     00          | 	byte	0
24705                 | LR__4220
24705     39          | 	byte	"9"
24706     00          | 	byte	0
24707                 | LR__4221
24707     5F          | 	byte	"_"
24708     00          | 	byte	0
24709                 | LR__4222
24709     2E          | 	byte	"."
2470a     00          | 	byte	0
2470b                 | LR__4223
2470b     45          | 	byte	"E"
2470c     00          | 	byte	0
2470d                 | LR__4224
2470d     65          | 	byte	"e"
2470e     00          | 	byte	0
2470f                 | LR__4225
2470f     2D          | 	byte	"-"
24710     00          | 	byte	0
24711                 | LR__4226
24711     2D          | 	byte	"-"
24712     00          | 	byte	0
24713                 | LR__4227
24713     65          | 	byte	"e"
24714     00          | 	byte	0
24715                 | LR__4228
24715     2E          | 	byte	"."
24716     00          | 	byte	0
24717                 | LR__4229
24717     45          | 	byte	"E"
24718     00          | 	byte	0
24719                 | LR__4230
24719     65          | 	byte	"e"
2471a     00          | 	byte	0
2471b                 | LR__4231
2471b     30          | 	byte	"0"
2471c     00          | 	byte	0
2471d                 | LR__4232
2471d     39          | 	byte	"9"
2471e     00          | 	byte	0
2471f                 | LR__4233
2471f     24          | 	byte	"$"
24720     00          | 	byte	0
24721                 | LR__4234
24721     25          | 	byte	"%"
24722     00          | 	byte	0
24723                 | LR__4235
24723     2D          | 	byte	"-"
24724     00          | 	byte	0
24725                 | LR__4236
24725     30          | 	byte	"0"
24726     00          | 	byte	0
24727                 | LR__4237
24727     39          | 	byte	"9"
24728     00          | 	byte	0
24729                 | LR__4238
24729     5F          | 	byte	"_"
2472a     00          | 	byte	0
2472b                 | LR__4239
2472b     30          | 	byte	"0"
2472c     00          | 	byte	0
2472d                 | LR__4240
2472d     39          | 	byte	"9"
2472e     00          | 	byte	0
2472f                 | LR__4241
2472f     5F          | 	byte	"_"
24730     00          | 	byte	0
24731                 | LR__4242
24731     22          | 	byte	34
24732     00          | 	byte	0
24733                 | LR__4243
24733     22          | 	byte	34
24734     00          | 	byte	0
24735                 | LR__4244
24735     49 6E 20 63 
24739     6F 6D 70 69 
2473d     6C 65 5F 69 
24741     6D 6D 65 64 
24745     69 61 74 65 
24749     20 63 6D 64 
2474d     3D 3A       | 	byte	"In compile_immediate cmd=:"
2474f     00          | 	byte	0
24750                 | LR__4245
24750     49 6E 20 63 
24754     6F 6D 70 69 
24758     6C 65 5F 69 
2475c     6D 6D 65 64 
24760     69 61 74 65 
24764     3A          | 	byte	"In compile_immediate:"
24765     00          | 	byte	0
24766                 | LR__4246
24766     20          | 	byte	" "
24767     00          | 	byte	0
24768                 | LR__4247
24768     49 6E 20 61 
2476c     72 72 61 79 
24770     5F 61 73 73 
24774     69 67 6E 2C 
24778     20 6C 70 61 
2477c     72 74 73 28 
24780     63 74 29 2E 
24784     74 6F 6B 65 
24788     6E 3D       | 	byte	"In array_assign, lparts(ct).token="
2478a     00          | 	byte	0
2478b                 | LR__4248
2478b     49 6E 20 61 
2478f     72 72 61 79 
24793     5F 61 73 73 
24797     69 67 6E 2C 
2479b     20 76 61 72 
2479f     6E 61 6D 65 
247a3     24 3D       | 	byte	"In array_assign, varname$="
247a5     00          | 	byte	0
247a6                 | LR__4249
247a6     69 6E 20 61 
247aa     72 72 61 79 
247ae     5F 61 73 73 
247b2     69 67 6E 2C 
247b6     20 72 70 61 
247ba     72 20 66 6F 
247be     75 6E 64 2C 
247c2     20 6E 75 6D 
247c6     70 61 72 3D | 	byte	"in array_assign, rpar found, numpar="
247ca     00          | 	byte	0
247cb                 | LR__4250
247cb     69 6E 20 61 
247cf     72 72 61 79 
247d3     5F 61 73 73 
247d7     69 67 6E 2C 
247db     3D 20 65 78 
247df     70 65 63 74 
247e3     65 64       | 	byte	"in array_assign,= expected"
247e5     00          | 	byte	0
247e6                 | LR__4251
247e6     69 6E 20 61 
247ea     72 72 61 79 
247ee     5F 61 73 73 
247f2     69 67 6E 2C 
247f6     3D 20 66 6F 
247fa     75 6E 64    | 	byte	"in array_assign,= found"
247fd     00          | 	byte	0
247fe                 | LR__4252
247fe     69 6E 20 61 
24802     72 72 61 79 
24806     5F 61 73 73 
2480a     69 67 6E 2C 
2480e     20 76 61 72 
24812     69 61 62 6C 
24816     65 20 66 6F 
2481a     75 6E 64 2C 
2481e     20 69 64 3D | 	byte	"in array_assign, variable found, id="
24822     00          | 	byte	0
24823                 | LR__4253
24823     69 6E 20 61 
24827     72 72 61 79 
2482b     5F 61 73 73 
2482f     69 67 6E 2C 
24833     20 76 61 72 
24837     20 68 61 73 
2483b     20 74 6F 20 
2483f     62 65 20 64 
24843     69 6D 6D 65 
24847     64          | 	byte	"in array_assign, var has to be dimmed"
24848     00          | 	byte	0
24849                 | LR__4254
24849     69 6E 20 61 
2484d     72 72 61 79 
24851     5F 61 73 73 
24855     69 67 6E 2C 
24859     74 31 2E 72 
2485d     65 73 75 6C 
24861     74 2E 74 77 
24865     6F 77 6F 72 
24869     64 73 28 31 
2486d     29 3D       | 	byte	"in array_assign,t1.result.twowords(1)="
2486f     00          | 	byte	0
24870                 | LR__4255
24870     6E 75 6D 70 
24874     61 72 3D    | 	byte	"numpar="
24877     00          | 	byte	0
24878                 | LR__4256
24878     28          | 	byte	"("
24879     00          | 	byte	0
2487a                 | LR__4257
2487a     61 73       | 	byte	"as"
2487c     00          | 	byte	0
2487d                 | LR__4258
2487d     61 73       | 	byte	"as"
2487f     00          | 	byte	0
24880                 | LR__4259
24880     2C          | 	byte	","
24881     00          | 	byte	0
24882                 | LR__4260
24882     29          | 	byte	")"
24883     00          | 	byte	0
24884                 | LR__4261
24884     29          | 	byte	")"
24885     00          | 	byte	0
24886                 | LR__4262
24886     61 73       | 	byte	"as"
24888     00          | 	byte	0
24889                 | LR__4263
24889     62 79 74 65 | 	byte	"byte"
2488d     00          | 	byte	0
2488e                 | LR__4264
2488e     75 62 79 74 
24892     65          | 	byte	"ubyte"
24893     00          | 	byte	0
24894                 | LR__4265
24894     73 68 6F 72 
24898     74          | 	byte	"short"
24899     00          | 	byte	0
2489a                 | LR__4266
2489a     75 73 68 6F 
2489e     72 74       | 	byte	"ushort"
248a0     00          | 	byte	0
248a1                 | LR__4267
248a1     6C 6F 6E 67 | 	byte	"long"
248a5     00          | 	byte	0
248a6                 | LR__4268
248a6     75 6C 6F 6E 
248aa     67          | 	byte	"ulong"
248ab     00          | 	byte	0
248ac                 | LR__4269
248ac     69 6E 74 36 
248b0     34          | 	byte	"int64"
248b1     00          | 	byte	0
248b2                 | LR__4270
248b2     75 69 6E 74 
248b6     36 34       | 	byte	"uint64"
248b8     00          | 	byte	0
248b9                 | LR__4271
248b9     73 69 6E 67 
248bd     6C 65       | 	byte	"single"
248bf     00          | 	byte	0
248c0                 | LR__4272
248c0     64 6F 75 62 
248c4     6C 65       | 	byte	"double"
248c6     00          | 	byte	0
248c7                 | LR__4273
248c7     73 74 72 69 
248cb     6E 67       | 	byte	"string"
248cd     00          | 	byte	0
248ce                 | LR__4274
248ce     74 6F       | 	byte	"to"
248d0     00          | 	byte	0
248d1                 | LR__4275
248d1     73 74 65 70 | 	byte	"step"
248d5     00          | 	byte	0
248d6                 | LR__4276
248d6     57 65 20 68 
248da     61 76 65 20 
248de     61 20 73 6C 
248e2     6F 77 20 67 
248e6     6F 74 6F 2C 
248ea     20 74 6F 64 
248ee     6F 20 20    | 	byte	"We have a slow goto, todo  "
248f1     00          | 	byte	0
248f2                 | LR__4277
248f2     6E 6F 6E 61 
248f6     6D 65 2E 62 
248fa     61 73       | 	byte	"noname.bas"
248fc     00          | 	byte	0
248fd                 | LR__4278
248fd                 | 	byte	
248fd     00          | 	byte	0
248fe                 | LR__4279
248fe     6E 6F 6E 61 
24902     6D 65 2E 62 
24906     61 73       | 	byte	"noname.bas"
24908     00          | 	byte	0
24909                 | LR__4280
24909     2F          | 	byte	"/"
2490a     00          | 	byte	0
2490b                 | LR__4281
2490b                 | 	byte	
2490b     00          | 	byte	0
2490c                 | LR__4282
2490c                 | 	byte	
2490c     00          | 	byte	0
2490d                 | LR__4283
2490d     6E 6F 6E 61 
24911     6D 65 2E 62 
24915     61 73       | 	byte	"noname.bas"
24917     00          | 	byte	0
24918                 | LR__4284
24918     2F          | 	byte	"/"
24919     00          | 	byte	0
2491a                 | LR__4285
2491a     53 79 73 74 
2491e     65 6D 20 65 
24922     72 72 6F 72 
24926     20          | 	byte	"System error "
24927     00          | 	byte	0
24928                 | LR__4286
24928     3A 20       | 	byte	": "
2492a     00          | 	byte	0
2492b                 | LR__4287
2492b     2F          | 	byte	"/"
2492c     00          | 	byte	0
2492d                 | LR__4288
2492d     30          | 	byte	"0"
2492e     00          | 	byte	0
2492f                 | LR__4289
2492f     39          | 	byte	"9"
24930     00          | 	byte	0
24931                 | LR__4290
24931                 | 	byte	
24931     00          | 	byte	0
24932                 | LR__4291
24932     53 74 6F 70 
24936     70 65 64 20 
2493a     61 74 20 6C 
2493e     69 6E 65 20 | 	byte	"Stopped at line "
24942     00          | 	byte	0
24943                 | LR__4292
24943     45 72 72 6F 
24947     72 20       | 	byte	"Error "
24949     00          | 	byte	0
2494a                 | LR__4293
2494a     3A 20       | 	byte	": "
2494c     00          | 	byte	0
2494d                 | LR__4294
2494d     64 69 6D 31 
24951     3D          | 	byte	"dim1="
24952     00          | 	byte	0
24953                 | LR__4295
24953     64 69 6D 32 
24957     3D          | 	byte	"dim2="
24958     00          | 	byte	0
24959                 | LR__4296
24959     64 69 6D 33 
2495d     3D          | 	byte	"dim3="
2495e     00          | 	byte	0
2495f                 | LR__4297
2495f     65 73 69 7A 
24963     65 3D       | 	byte	"esize="
24965     00          | 	byte	0
24966                 | LR__4298
24966     69 31 3D    | 	byte	"i1="
24969     00          | 	byte	0
2496a                 | LR__4299
2496a     69 32 3D    | 	byte	"i2="
2496d     00          | 	byte	0
2496e                 | LR__4300
2496e     69 33 3D    | 	byte	"i3="
24971     00          | 	byte	0
24972                 | LR__4301
24972     61 72 72 70 
24976     74 72 3D    | 	byte	"arrptr="
24979     00          | 	byte	0
2497a                 | LR__4302
2497a     76 61 72 69 
2497e     64 78 3D    | 	byte	"varidx="
24981     00          | 	byte	0
24982                 | LR__4303
24982     6D 65 6D 74 
24986     6F 70 3D    | 	byte	"memtop="
24989     00          | 	byte	0
2498a                 | LR__4304
2498a     62 75 66 70 
2498e     74 72 3D    | 	byte	"bufptr="
24991     00          | 	byte	0
24992                 | LR__4305
24992     72 6E 64 3A 
24996     20          | 	byte	"rnd: "
24997     00          | 	byte	0
24998                 | LR__4306
24998     72 6E 64 3A 
2499c     20          | 	byte	"rnd: "
2499d     00          | 	byte	0
2499e                 | LR__4307
2499e     73 69 6E 3A 
249a2     20          | 	byte	"sin: "
249a3     00          | 	byte	0
249a4                 | LR__4308
249a4     73 69 6E 3A 
249a8     20          | 	byte	"sin: "
249a9     00          | 	byte	0
249aa                 | LR__4309
249aa     73 74 69 63 
249ae     6B 3A 20    | 	byte	"stick: "
249b1     00          | 	byte	0
249b2                 | LR__4310
249b2     73 74 72 69 
249b6     67 3A 20    | 	byte	"strig: "
249b9     00          | 	byte	0
249ba                 | LR__4311
249ba     67 65 74 70 
249be     69 78 65 6C 
249c2     3A 20       | 	byte	"getpixel: "
249c4     00          | 	byte	0
249c5                 | LR__4312
249c5                 | 	byte	
249c5     00          | 	byte	0
249c6                 | LR__4313
249c6     2F 73 64 2F 
249ca     62 61 73    | 	byte	"/sd/bas"
249cd     00          | 	byte	0
249ce                 | LR__4314
249ce     57 6F 72 6B 
249d2     69 6E 67 20 
249d6     64 69 72 65 
249da     63 74 6F 72 
249de     79 3A 20    | 	byte	"Working directory: "
249e1     00          | 	byte	0
249e2                 | LR__4315
249e2     2A          | 	byte	"*"
249e3     00          | 	byte	0
249e4                 | LR__4316
249e4                 | 	byte	
249e4     00          | 	byte	0
249e5                 | LR__4317
249e5     5B 64 69 72 
249e9     5D 20       | 	byte	"[dir] "
249eb     00          | 	byte	0
249ec                 | LR__4318
249ec     2A          | 	byte	"*"
249ed     00          | 	byte	0
249ee                 | LR__4319
249ee                 | 	byte	
249ee     00          | 	byte	0
249ef                 | LR__4320
249ef     2D 2D 2D 2D 
249f3     2D 6D 6F 72 
249f7     65 2C 20 70 
249fb     72 65 73 73 
249ff     20 61 6E 79 
24a03     20 6B 65 79 | 	byte	"-----more, press any key"
24a07     00          | 	byte	0
24a08                 | LR__4321
24a08     20 20 20 20 
      ...             
24a20     20 20 20 20 
24a24     20          | 	byte	"                             "
24a25     00          | 	byte	0
24a26                 | LR__4322
24a26     2F          | 	byte	"/"
24a27     00          | 	byte	0
24a28                 | LR__4323
24a28     2F 73 64 2F 
24a2c     62 69 6E 2F | 	byte	"/sd/bin/"
24a30     00          | 	byte	0
24a31                 | LR__4324
24a31     53 79 73 74 
24a35     65 6D 20 65 
24a39     72 72 6F 72 
24a3d     20          | 	byte	"System error "
24a3e     00          | 	byte	0
24a3f                 | LR__4325
24a3f     3A 20       | 	byte	": "
24a41     00          | 	byte	0
24a42                 | LR__4326
24a42                 | 	byte	
24a42     00          | 	byte	0
24a43                 | LR__4327
24a43     45 78 70 65 
24a47     63 74 65 64 
24a4b     20 6E 75 6D 
24a4f     62 65 72 2C 
24a53     20 67 6F 74 
24a57     20 73 6F 6D 
24a5b     65 74 68 69 
24a5f     6E 67 20 65 
24a63     6C 73 65 2E | 	byte	"Expected number, got something else."
24a67     00          | 	byte	0
24a68                 | LR__4328
24a68     43 61 6E 6E 
24a6c     6F 74 20 61 
24a70     64 64 20 61 
24a74     20 6E 75 6D 
24a78     62 65 72 20 
24a7c     74 6F 20 61 
24a80     20 73 74 72 
24a84     69 6E 67 2E | 	byte	"Cannot add a number to a string."
24a88     00          | 	byte	0
24a89                 | LR__4329
24a89     43 61 6E 6E 
24a8d     6F 74 20 73 
24a91     75 62 73 74 
24a95     72 61 63 74 
24a99     20 73 74 72 
24a9d     69 6E 67 73 
24aa1     2E          | 	byte	"Cannot substract strings."
24aa2     00          | 	byte	0
24aa3                 | LR__4330
24aa3     55 6E 6B 6E 
24aa7     6F 77 6E 20 
24aab     65 72 72 6F 
24aaf     72 20 77 68 
24ab3     69 6C 65 20 
24ab7     61 64 64 69 
24abb     6E 67 2E    | 	byte	"Unknown error while adding."
24abe     00          | 	byte	0
24abf                 | LR__4331
24abf     55 6E 6B 6E 
24ac3     6F 77 6E 20 
24ac7     65 72 72 6F 
24acb     72 20 77 68 
24acf     69 6C 65 20 
24ad3     73 75 62 73 
24ad7     74 72 61 63 
24adb     74 69 6E 67 
24adf     2E          | 	byte	"Unknown error while substracting."
24ae0     00          | 	byte	0
24ae1                 | LR__4332
24ae1     43 61 6E 6E 
24ae5     6F 74 20 64 
24ae9     6F 20 6C 6F 
24aed     67 69 63 20 
24af1     6F 70 65 72 
24af5     61 74 69 6F 
24af9     6E 20 6F 6E 
24afd     20 73 74 72 
24b01     69 6E 67 20 
24b05     6F 72 20 66 
24b09     6C 6F 61 74 
24b0d     2E          | 	byte	"Cannot do logic operation on string or float."
24b0e     00          | 	byte	0
24b0f                 | LR__4333
24b0f     55 6E 6B 6E 
24b13     6F 77 6E 20 
24b17     65 72 72 6F 
24b1b     72 20 77 68 
24b1f     69 6C 65 20 
24b23     64 6F 69 6E 
24b27     67 20 6C 6F 
24b2b     67 69 63 20 
24b2f     6F 70 65 72 
24b33     61 74 69 6F 
24b37     6E 2E       | 	byte	"Unknown error while doing logic operation."
24b39     00          | 	byte	0
24b3a                 | LR__4334
24b3a     43 61 6E 6E 
24b3e     6F 74 20 6D 
24b42     75 6C 74 69 
24b46     70 6C 79 20 
24b4a     73 74 72 69 
24b4e     6E 67 73 2E | 	byte	"Cannot multiply strings."
24b52     00          | 	byte	0
24b53                 | LR__4335
24b53     55 6E 6B 6E 
24b57     6F 77 6E 20 
24b5b     65 72 72 6F 
24b5f     72 20 77 68 
24b63     69 6C 65 20 
24b67     6D 75 6C 74 
24b6b     69 70 6C 79 
24b6f     69 6E 67 2E | 	byte	"Unknown error while multiplying."
24b73     00          | 	byte	0
24b74                 | LR__4336
24b74     43 61 6E 6E 
24b78     6F 74 20 64 
24b7c     69 76 69 64 
24b80     65 20 73 74 
24b84     72 69 6E 67 
24b88     73 2E       | 	byte	"Cannot divide strings."
24b8a     00          | 	byte	0
24b8b                 | LR__4337
24b8b     55 6E 6B 6E 
24b8f     6F 77 6E 20 
24b93     65 72 72 6F 
24b97     72 20 77 68 
24b9b     69 6C 65 20 
24b9f     64 69 76 69 
24ba3     64 69 6E 67 
24ba7     2E          | 	byte	"Unknown error while dividing."
24ba8     00          | 	byte	0
24ba9                 | LR__4338
24ba9     43 61 6E 6E 
24bad     6F 74 20 63 
24bb1     6F 6D 70 75 
24bb5     74 65 20 61 
24bb9     20 70 6F 77 
24bbd     65 72 20 6F 
24bc1     66 20 61 20 
24bc5     73 74 72 69 
24bc9     6E 67 2E    | 	byte	"Cannot compute a power of a string."
24bcc     00          | 	byte	0
24bcd                 | LR__4339
24bcd     55 6E 6B 6E 
24bd1     6F 77 6E 20 
24bd5     65 72 72 6F 
24bd9     72 20 77 68 
24bdd     69 6C 65 20 
24be1     63 6F 6D 70 
24be5     75 74 69 6E 
24be9     67 20 61 20 
24bed     70 6F 77 65 
24bf1     72 2E       | 	byte	"Unknown error while computing a power."
24bf3     00          | 	byte	0
24bf4                 | LR__4340
24bf4     52 69 67 68 
24bf8     74 20 70 61 
24bfc     72 65 6E 74 
24c00     68 65 73 69 
24c04     73 20 65 78 
24c08     70 65 63 74 
24c0c     65 64 2E    | 	byte	"Right parenthesis expected."
24c0f     00          | 	byte	0
24c10                 | LR__4341
24c10     45 78 70 65 
24c14     63 74 65 64 
24c18     20 73 74 72 
24c1c     69 6E 67 2E | 	byte	"Expected string."
24c20     00          | 	byte	0
24c21                 | LR__4342
24c21     45 78 70 65 
24c25     63 74 65 64 
24c29     20 66 6C 6F 
24c2d     61 74 2E    | 	byte	"Expected float."
24c30     00          | 	byte	0
24c31                 | LR__4343
24c31     45 78 70 65 
24c35     63 74 65 64 
24c39     20 75 6E 73 
24c3d     69 67 6E 65 
24c41     64 20 69 6E 
24c45     74 65 67 65 
24c49     72 2E       | 	byte	"Expected unsigned integer."
24c4b     00          | 	byte	0
24c4c                 | LR__4344
24c4c     45 78 70 65 
24c50     63 74 65 64 
24c54     20 69 6E 74 
24c58     65 67 65 72 
24c5c     2E          | 	byte	"Expected integer."
24c5d     00          | 	byte	0
24c5e                 | LR__4345
24c5e     4E 6F 20 6D 
24c62     6F 72 65 20 
24c66     76 61 72 69 
24c6a     61 62 6C 65 
24c6e     20 73 6C 6F 
24c72     74 73 2E    | 	byte	"No more variable slots."
24c75     00          | 	byte	0
24c76                 | LR__4346
24c76     56 61 72 69 
24c7a     61 62 6C 65 
24c7e     20 6E 6F 74 
24c82     20 66 6F 75 
24c86     6E 64 2E    | 	byte	"Variable not found."
24c89     00          | 	byte	0
24c8a                 | LR__4347
24c8a     43 6F 6D 6D 
24c8e     61 20 65 78 
24c92     70 65 63 74 
24c96     65 64 2E    | 	byte	"Comma expected."
24c99     00          | 	byte	0
24c9a                 | LR__4348
24c9a     43 6F 6D 6D 
24c9e     61 20 6F 72 
24ca2     20 73 65 6D 
24ca6     69 63 6F 6C 
24caa     6F 6E 20 65 
24cae     78 70 65 63 
24cb2     74 65 64 2E | 	byte	"Comma or semicolon expected."
24cb6     00          | 	byte	0
24cb7                 | LR__4349
24cb7     55 6E 6B 6E 
24cbb     6F 77 6E 20 
24cbf     63 6F 6D 6D 
24cc3     61 6E 64 2E | 	byte	"Unknown command."
24cc7     00          | 	byte	0
24cc8                 | LR__4350
24cc8     53 74 61 63 
24ccc     6B 20 75 6E 
24cd0     64 65 72 66 
24cd4     6C 6F 77 2E | 	byte	"Stack underflow."
24cd8     00          | 	byte	0
24cd9                 | LR__4351
24cd9     43 61 6E 6E 
24cdd     6F 74 20 65 
24ce1     78 65 63 75 
24ce5     74 65 20 67 
24ce9     6F 74 6F 20 
24ced     69 6E 20 74 
24cf1     68 65 20 69 
24cf5     6D 6D 65 64 
24cf9     69 61 74 65 
24cfd     20 6D 6F 64 
24d01     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
24d03     00          | 	byte	0
24d04                 | LR__4352
24d04     43 61 6E 6E 
24d08     6F 74 20 6C 
24d0c     6F 61 64 20 
24d10     66 72 6F 6D 
24d14     20 74 68 69 
24d18     73 20 66 69 
24d1c     6C 65 2E    | 	byte	"Cannot load from this file."
24d1f     00          | 	byte	0
24d20                 | LR__4353
24d20     54 68 65 20 
24d24     70 72 6F 67 
24d28     72 61 6D 20 
24d2c     69 73 20 65 
24d30     6D 70 74 79 
24d34     2E          | 	byte	"The program is empty."
24d35     00          | 	byte	0
24d36                 | LR__4354
24d36     49 66 20 61 
24d3a     66 74 65 72 
24d3e     20 69 66 2E | 	byte	"If after if."
24d42     00          | 	byte	0
24d43                 | LR__4355
24d43     45 6D 70 74 
24d47     79 20 65 78 
24d4b     70 72 65 73 
24d4f     73 69 6F 6E 
24d53     2E          | 	byte	"Empty expression."
24d54     00          | 	byte	0
24d55                 | LR__4356
24d55     53 74 72 69 
24d59     6E 67 20 65 
24d5d     78 70 65 63 
24d61     74 65 64 2E | 	byte	"String expected."
24d65     00          | 	byte	0
24d66                 | LR__4357
24d66     49 6E 74 65 
24d6a     72 70 72 65 
24d6e     74 65 72 20 
24d72     69 6E 74 65 
24d76     72 6E 61 6C 
24d7a     20 65 72 72 
24d7e     6F 72 2E    | 	byte	"Interpreter internal error."
24d81     00          | 	byte	0
24d82                 | LR__4358
24d82     45 78 70 65 
24d86     63 74 65 64 
24d8a     20 61 73 73 
24d8e     69 67 6E 2E | 	byte	"Expected assign."
24d92     00          | 	byte	0
24d93                 | LR__4359
24d93     45 78 70 65 
24d97     63 74 65 64 
24d9b     20 27 74 6F 
24d9f     27 2E       | 	byte	"Expected 'to'."
24da1     00          | 	byte	0
24da2                 | LR__4360
24da2     45 78 70 65 
24da6     63 74 65 64 
24daa     20 69 6E 74 
24dae     65 67 65 72 
24db2     20 76 61 72 
24db6     69 61 62 6C 
24dba     65 2E       | 	byte	"Expected integer variable."
24dbc     00          | 	byte	0
24dbd                 | LR__4361
24dbd     55 6E 69 6E 
24dc1     69 74 69 61 
24dc5     6C 69 7A 65 
24dc9     64 20 76 61 
24dcd     72 69 61 62 
24dd1     6C 65 20 69 
24dd5     6E 20 27 6E 
24dd9     65 78 74 27 
24ddd     2C 20 75 73 
24de1     65 20 27 66 
24de5     6F 72 27 20 
24de9     62 65 66 6F 
24ded     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
24df0     00          | 	byte	0
24df1                 | LR__4362
24df1     4E 6F 20 6D 
24df5     6F 72 65 20 
24df9     73 6C 6F 74 
24dfd     73 20 66 6F 
24e01     72 20 27 66 
24e05     6F 72 27 2E | 	byte	"No more slots for 'for'."
24e09     00          | 	byte	0
24e0a                 | LR__4363
24e0a     27 4E 65 78 
24e0e     74 27 20 64 
24e12     6F 65 73 6E 
24e16     27 74 20 6D 
24e1a     61 74 63 68 
24e1e     20 27 66 6F 
24e22     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
24e25     00          | 	byte	0
24e26                 | LR__4364
24e26     27 47 6F 74 
24e2a     6F 27 20 74 
24e2e     61 72 67 65 
24e32     74 20 6C 69 
24e36     6E 65 20 6E 
24e3a     6F 74 20 66 
24e3e     6F 75 6E 64 
24e42     2E          | 	byte	"'Goto' target line not found."
24e43     00          | 	byte	0
24e44                 | LR__4365
24e44     42 61 64 20 
24e48     6E 75 6D 62 
24e4c     65 72 20 6F 
24e50     66 20 70 61 
24e54     72 61 6D 65 
24e58     74 65 72 73 | 	byte	"Bad number of parameters"
24e5c     00          | 	byte	0
24e5d                 | LR__4366
24e5d     46 75 6E 63 
24e61     74 69 6F 6E 
24e65     20 75 6E 64 
24e69     65 66 69 6E 
24e6d     65 64 20 66 
24e71     6F 72 20 73 
24e75     74 72 69 6E 
24e79     67 73       | 	byte	"Function undefined for strings"
24e7b     00          | 	byte	0
24e7c                 | LR__4367
24e7c     42 61 64 20 
24e80     70 61 72 61 
24e84     6D 65 74 65 
24e88     72 2E       | 	byte	"Bad parameter."
24e8a     00          | 	byte	0
24e8b                 | LR__4368
24e8b     43 61 6E 6E 
24e8f     6F 74 20 64 
24e93     65 63 6C 61 
24e97     72 65 20 61 
24e9b     6E 20 61 72 
24e9f     72 61 79 3A 
24ea3     20 74 68 65 
24ea7     20 76 61 72 
24eab     69 61 62 6C 
24eaf     65 20 65 78 
24eb3     69 73 74 73 
24eb7     2E          | 	byte	"Cannot declare an array: the variable exists."
24eb8     00          | 	byte	0
24eb9                 | LR__4369
24eb9     45 78 70 65 
24ebd     63 74 65 64 
24ec1     20 27 28 27 
24ec5     2E          | 	byte	"Expected '('."
24ec6     00          | 	byte	0
24ec7                 | LR__4370
24ec7     45 78 70 65 
24ecb     63 74 65 64 
24ecf     20 27 29 27 
24ed3     20 6F 72 20 
24ed7     27 2C 27 2E | 	byte	"Expected ')' or ','."
24edb     00          | 	byte	0
24edc                 | LR__4371
24edc     4E 6F 20 6D 
24ee0     6F 72 65 20 
24ee4     74 68 61 6E 
24ee8     20 33 20 64 
24eec     69 6D 65 6E 
24ef0     73 69 6F 6E 
24ef4     73 20 73 75 
24ef8     70 70 6F 72 
24efc     74 65 64    | 	byte	"No more than 3 dimensions supported"
24eff     00          | 	byte	0
24f00                 | LR__4372
24f00     56 61 72 69 
24f04     61 62 6C 65 
24f08     20 6E 61 6D 
24f0c     65 20 65 78 
24f10     70 65 63 74 
24f14     65 64       | 	byte	"Variable name expected"
24f16     00          | 	byte	0
24f17                 | LR__4373
24f17     54 79 70 65 
24f1b     20 6E 61 6D 
24f1f     65 20 65 78 
24f23     70 65 63 74 
24f27     65 64       | 	byte	"Type name expected"
24f29     00          | 	byte	0
24f2a                 | LR__4374
24f2a     54 79 70 65 
24f2e     20 6E 6F 74 
24f32     20 73 75 70 
24f36     70 6F 72 74 
24f3a     65 64 20 79 
24f3e     65 74       | 	byte	"Type not supported yet"
24f40     00          | 	byte	0
24f41                 | LR__4375
24f41     45 72 72 6F 
24f45     72 20       | 	byte	"Error "
24f47     00          | 	byte	0
24f48                 | LR__4376
24f48     3A 20       | 	byte	": "
24f4a     00          | 	byte	0
24f4b                 | LR__4377
24f4b     2F 73 64    | 	byte	"/sd"
24f4e     00          | 	byte	0
24f4f                 | LR__4378
24f4f     2F 73 64 2F 
24f53     62 61 73    | 	byte	"/sd/bas"
24f56     00          | 	byte	0
24f57                 | LR__4379
24f57     2F 73 64 2F 
24f5b     62 61 73    | 	byte	"/sd/bas"
24f5e     00          | 	byte	0
24f5f                 | LR__4380
24f5f     20 42 41 53 
24f63     49 43 20 62 
24f67     79 74 65 73 
24f6b     20 66 72 65 
24f6f     65          | 	byte	" BASIC bytes free"
24f70     00          | 	byte	0
24f71                 | LR__4381
24f71     52 65 61 64 
24f75     79          | 	byte	"Ready"
24f76     00          | 	byte	0
24f77                 | LR__4382
24f77     20          | 	byte	" "
24f78     00          | 	byte	0
24f79                 | LR__4383
24f79     20          | 	byte	" "
24f7a     00          | 	byte	0
24f7b                 | LR__4384
24f7b                 | 	byte	
24f7b     00          | 	byte	0
24f7c                 | LR__4385
24f7c                 | 	byte	
24f7c     00          | 	byte	0
24f7d     00 00 00    | 	alignl
24f80                 | _dat_
24f80     00 00 00 00 
24f84     00 00 00 00 
24f88     00 00 00 00 
24f8c     00 00 00 00 | 	byte	$00[16]
24f90     61 41 17 0E 
24f94     62 42 00 00 
24f98     63 43 19 10 
24f9c     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
24fa0     65 45 18 0F 
24fa4     66 46 00 00 
24fa8     67 47 00 00 
24fac     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
24fb0     69 49 00 00 
24fb4     6A 4A 00 00 
24fb8     6B 4B 00 00 
24fbc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
24fc0     6D 4D 00 00 
24fc4     6E 4E 1A 11 
24fc8     6F 4F 1E 15 
24fcc     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
24fd0     71 51 00 00 
24fd4     72 52 00 00 
24fd8     73 53 1B 12 
24fdc     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
24fe0     75 55 00 00 
24fe4     76 56 00 00 
24fe8     77 57 00 00 
24fec     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
24ff0     79 59 00 00 
24ff4     7A 5A 1D 14 
24ff8     31 21 04 00 
24ffc     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
25000     33 23 06 00 
25004     34 24 07 00 
25008     35 25 08 00 
2500c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
25010     37 26 0A 00 
25014     38 2A 0B 00 
25018     39 28 0C 00 
2501c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
25020     8D 8D 00 00 
25024     9B 9B 00 00 
25028     88 88 00 00 
2502c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
25030     20 20 00 00 
25034     2D 5F 00 00 
25038     3D 2B 00 00 
2503c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
25040     5D 7D 00 00 
25044     5C 7C 00 00 
25048     23 7E 00 00 
2504c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
25050     27 22 00 00 
25054     60 7E 03 00 
25058     2C 3C 00 00 
2505c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
25060     2F 3F 00 00 
25064     B9 B9 00 00 
25068     BA 00 00 00 
2506c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
25070     BC 00 00 00 
25074     BD 00 00 00 
25078     BE 00 00 00 
2507c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
25080     C0 00 00 00 
25084     C1 00 00 00 
25088     C2 00 00 00 
2508c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
25090     C4 00 00 00 
25094     C5 00 00 00 
25098     C6 00 00 00 
2509c     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
250a0     C8 00 00 00 
250a4     C9 00 00 00 
250a8     CA 00 00 00 
250ac     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
250b0     7F 7F 00 00 
250b4     CC 00 00 00 
250b8     CD 00 00 00 
250bc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
250c0     CF 00 00 00 
250c4     D0 00 00 00 
250c8     D1 00 00 00 
250cc     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
250d0     2F 2F 00 00 
250d4     2A 2A 00 00 
250d8     2D 2D 00 00 
250dc     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
250e0     8D 8D 00 00 
250e4     31 31 00 00 
250e8     32 32 00 00 
250ec     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
250f0     34 34 00 00 
250f4     35 35 00 00 
250f8     36 36 00 00 
250fc     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
25100     38 38 00 00 
25104     39 39 00 00 
25108     30 30 00 00 
2510c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
25110     5C 7C 00 00 
25114     00 00 00 00 
25118     00 00 00 00 
2511c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
25120     00 00 00 00 
      ...             
25178     00 00 00 00 
2517c     00 00 00 00 | 	byte	$00[96]
25180     2B 00 A6 F2 
25184     24 A7 09 80 
25188     5B 88 4D 89 
2518c     80 88 A5 88 | atari_spl file "atari.spl"
25190     6D 88 B8 88 
25194     80 88 CB 88 
25198     92 88 A5 88 
2519c     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
251a0     A5 88 CA 88 
251a4     A6 88 DD 88 
251a8     B8 88 AB 89 
251ac     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
251b0     C8 AD C6 F1 
251b4     91 06 B6 FF 
251b8     13 00 4A 00 
251bc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
251c0     5D 00 5E 00 
251c4     5D 00 5E 00 
251c8     5E 00 5D 00 
251cc     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
251d0     38 00 83 00 
251d4     25 00 83 00 
251d8     C3 FE D1 04 
251dc     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
251e0     48 88 38 85 
251e4     41 8A CB 88 
251e8     28 89 B8 88 
251ec     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
251f0     15 89 03 89 
251f4     02 89 15 89 
251f8     16 89 15 89 
251fc     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
25200     15 89 3A 89 
25204     72 89 E3 89 
25208     52 83 AD 97 
2520c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
25210     0C 02 B6 FF 
25214     E1 00 A8 00 
25218     F3 00 A8 00 
2521c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
25220     CE 00 CD 00 
25224     CD 00 BA 00 
25228     E1 00 BB 00 
2522c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
25230     DF 00 C9 FF 
25234     E6 01 B6 06 
25238     EE DD 8D 98 
2523c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
25240     97 89 73 89 
25244     3B 89 60 89 
25248     60 89 60 89 
2524c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
25250     73 89 72 89 
25254     85 89 73 89 
25258     AA 89 60 89 
2525c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
25260     E8 8A 18 86 
25264     92 88 A5 C2 
25268     E0 00 C3 05 
2526c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
25270     F2 00 64 01 
25274     06 01 3E 01 
25278     2B 01 2B 01 
2527c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
25280     2B 01 2A 01 
25284     2B 01 2B 01 
25288     2B 01 18 01 
2528c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
25290     39 07 61 F3 
25294     C0 AF 37 85 
25298     0F 88 8B 8A 
2529c     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
252a0     AB 89 D0 89 
252a4     AB 89 D0 89 
252a8     D0 89 CF 89 
252ac     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
252b0     D0 89 F5 89 
252b4     BD 89 08 8A 
252b8     CF 89 E8 8A 
252bc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
252c0     53 B3 0D F8 
252c4     F4 07 38 00 
252c8     63 01 63 01 
252cc     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
252d0     88 01 88 01 
252d4     76 01 88 01 
252d8     88 01 89 01 
252dc     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
252e0     75 01 AE 01 
252e4     76 01 88 01 
252e8     4A 00 46 06 
252ec     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
252f0     08 8A 9A 86 
252f4     33 8B 08 8A 
252f8     2D 8A F5 89 
252fc     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
25300     2D 8A 2D 8A 
25304     2E 8A 1B 8A 
25308     40 8A 2D 8A 
2530c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
25310     2E 8A 79 8A 
25314     66 8A C8 8B 
25318     72 82 2B 97 
2531c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
25320     1D 02 05 01 
25324     F8 01 C0 01 
25328     0B 02 C0 01 
2532c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
25330     F9 01 D3 01 
25334     F8 01 D3 01 
25338     F8 01 D2 01 
2533c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
25340     E6 01 2B 01 
25344     8E 02 5F 07 
25348     F7 E2 ED 9C 
2534c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
25350     E8 8A 78 8A 
25354     78 8A 65 8A 
25358     8B 8A 78 8A 
2535c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
25360     8B 8A 9D 8A 
25364     9D 8A 8B 8A 
25368     C2 8A 78 8A 
2536c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
25370     70 8C 18 86 
25374     8B 8A 23 C9 
25378     CB 03 C4 05 
2537c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
25380     0B 02 7B 02 
25384     1E 02 55 02 
25388     30 02 43 02 
2538c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
25390     43 02 44 02 
25394     43 02 30 02 
25398     68 02 31 02 
2539c     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
253a0     07 08 3F F7 
253a4     73 B2 13 85 
253a8     15 89 ED 8B 
253ac     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
253b0     B0 8A FB 8A 
253b4     D5 8A FA 8A 
253b8     E8 8A FB 8A 
253bc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
253c0     E8 8A 21 8B 
253c4     E7 8A 33 8B 
253c8     E8 8A 26 8C 
253cc     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
253d0     8D B0 27 F6 
253d4     9C 08 AD 01 
253d8     7B 02 8D 02 
253dc     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
253e0     A1 02 A0 02 
253e4     A1 02 A0 02 
253e8     A0 02 A0 02 
253ec     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
253f0     7B 02 D8 02 
253f4     7B 02 C6 02 
253f8     3E 01 C3 05 
253fc     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
25400     00 8C 2A 86 
25404     E0 8C FA 8A 
25408     6A 8B FB 8A 
2540c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
25410     45 8B 45 8B 
25414     45 8B 6B 8B 
25418     46 8B 59 8B 
2541c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
25420     6B 8B 6B 8B 
25424     6B 8B 6B 8B 
25428     7D 8B 7D 8B 
2542c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
25430     90 8B 91 8B 
25434     90 8B 90 8B 
25438     A3 8B A3 8B 
2543c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
25440     B5 8B B6 8B 
25444     B5 8B B5 8B 
25448     B6 8B C8 8B 
2544c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
25450     C8 8B DA 8B 
25454     DB 8B DB 8B 
25458     DB 8B DC 8B 
2545c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
25460     EE 8B EE 8B 
25464     00 8C 01 8C 
25468     00 8C 01 8C 
2546c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
25470     12 8C 13 8C 
25474     13 8C 26 8C 
25478     26 8C 26 8C 
2547c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
25480     38 8C 38 8C 
25484     38 8C 38 8C 
25488     4B 8C 4B 8C 
2548c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
25490     5E 8C 5E 8C 
25494     5E 8C 5E 8C 
25498     70 8C 70 8C 
2549c     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
254a0     70 8C 83 8C 
254a4     83 8C 83 8C 
254a8     83 8C 96 8C 
254ac     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
254b0     95 8C A9 8C 
254b4     A9 8C A8 8C 
254b8     A8 8C A8 8C 
254bc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
254c0     BB 8C BB 8C 
254c4     BB 8C CE 8C 
254c8     CE 8C CE 8C 
254cc     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
254d0     E0 8C E1 8C 
254d4     E1 8C E0 8C 
254d8     F4 8C F2 8C 
254dc     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
254e0     05 8D 05 8D 
254e4     06 8D 06 8D 
254e8     19 8D 19 8D 
254ec     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
254f0     18 8D 2B 8D 
254f4     2B 8D 2B 8D 
254f8     2A 8D 3E 8D 
254fc     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
25500     3E 8D 51 8D 
25504     50 8D 50 8D 
25508     50 8D 51 8D 
2550c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
25510     63 8D 64 8D 
25514     76 8D 75 8D 
25518     75 8D 76 8D 
2551c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
25520     88 8D 88 8D 
25524     89 8D 9B 8D 
25528     9A 8D 9B 8D 
2552c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
25530     AD 8D AE 8D 
25534     AD 8D AE 8D 
25538     C1 8D C1 8D 
2553c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
25540     D3 8D D3 8D 
25544     D3 8D D3 8D 
25548     D3 8D E6 8D 
2554c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
25550     E6 8D E6 8D 
25554     F9 8D F9 8D 
25558     F9 8D F8 8D 
2555c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
25560     0B 8E 0B 8E 
25564     1D 8E 1D 8E 
25568     1E 8E 1E 8E 
2556c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
25570     31 8E 31 8E 
25574     31 8E 42 8E 
25578     43 8E 43 8E 
2557c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
25580     56 8E 56 8E 
25584     55 8E 56 8E 
25588     68 8E 69 8E 
2558c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
25590     69 8E 7B 8E 
25594     7C 8E 7B 8E 
25598     7B 8E 8D 8E 
2559c     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
255a0     8D 8E A1 8E 
255a4     A0 8E A1 8E 
255a8     A1 8E A0 8E 
255ac     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
255b0     B3 8E B3 8E 
255b4     C6 8E C5 8E 
255b8     C6 8E C6 8E 
255bc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
255c0     D8 8E D9 8E 
255c4     D8 8E EC 8E 
255c8     EB 8E EC 8E 
255cc     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
255d0     FE 8E FE 8E 
255d4     FE 8E FE 8E 
255d8     10 8F 10 8F 
255dc     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
255e0     11 8F 23 8F 
255e4     24 8F 23 8F 
255e8     24 8F 37 8F 
255ec     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
255f0     36 8F 36 8F 
255f4     48 8F 49 8F 
255f8     49 8F 49 8F 
255fc     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
25600     5B 8F 5C 8F 
25604     5B 8F 6E 8F 
25608     6E 8F 6E 8F 
2560c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
25610     81 8F 81 8F 
25614     81 8F 81 8F 
25618     93 8F 93 8F 
2561c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
25620     93 8F A6 8F 
25624     A6 8F A6 8F 
25628     A6 8F B9 8F 
2562c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
25630     B9 8F B9 8F 
25634     CC 8F CB 8F 
25638     CB 8F CC 8F 
2563c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
25640     DF 8F DE 8F 
25644     DE 8F F1 8F 
25648     F1 8F F1 8F 
2564c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
25650     03 90 04 90 
25654     04 90 04 90 
25658     16 90 17 90 
2565c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
25660     29 90 28 90 
25664     29 90 28 90 
25668     29 90 3C 90 
2566c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
25670     3C 90 4F 90 
25674     4E 90 4E 90 
25678     4E 90 4E 90 
2567c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
25680     61 90 61 90 
25684     73 90 74 90 
25688     74 90 74 90 
2568c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
25690     87 90 86 90 
25694     87 90 86 90 
25698     99 90 99 90 
2569c     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
256a0     AB 90 AB 90 
256a4     AC 90 AB 90 
256a8     AB 90 BF 90 
256ac     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
256b0     BE 90 D1 90 
256b4     D0 90 D1 90 
256b8     D1 90 D1 90 
256bc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
256c0     E3 90 E4 90 
256c4     F6 90 F6 90 
256c8     F6 90 F6 90 
256cc     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
256d0     09 91 0A 91 
256d4     0A 91 1C 91 
256d8     1C 91 1C 91 
256dc     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
256e0     2F 91 2E 91 
256e4     2F 91 2F 91 
256e8     2E 91 41 91 
256ec     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
256f0     41 91 53 91 
256f4     54 91 54 91 
256f8     53 91 54 91 
256fc     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
25700     67 91 67 91 
25704     79 91 7A 91 
25708     79 91 78 91 
2570c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
25710     8C 91 8B 91 
25714     8C 91 8C 91 
25718     9E 91 9E 91 
2571c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
25720     B1 91 B1 91 
25724     B2 91 B1 91 
25728     B1 91 C4 91 
2572c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
25730     C4 91 D6 91 
25734     D7 91 D7 91 
25738     D7 91 D6 91 
2573c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
25740     EA 91 EA 91 
25744     EA 91 FC 91 
25748     FC 91 FB 91 
2574c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
25750     0E 92 0F 92 
25754     0F 92 0E 92 
25758     21 92 21 92 
2575c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
25760     21 92 34 92 
25764     33 92 34 92 
25768     34 92 47 92 
2576c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
25770     46 92 47 92 
25774     59 92 59 92 
25778     59 92 59 92 
2577c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
25780     6C 92 6C 92 
25784     6B 92 7E 92 
25788     7E 92 7E 92 
2578c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
25790     92 92 91 92 
25794     91 92 90 92 
25798     91 92 A4 92 
2579c     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
257a0     A3 92 B6 92 
257a4     B6 92 B7 92 
257a8     B7 92 B6 92 
257ac     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
257b0     CA 92 C9 92 
257b4     CA 92 DC 92 
257b8     DC 92 DC 92 
257bc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
257c0     EF 92 EF 92 
257c4     EF 92 EF 92 
257c8     01 93 01 93 
257cc     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
257d0     15 93 14 93 
257d4     14 93 14 93 
257d8     14 93 27 93 
257dc     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
257e0     27 93 39 93 
257e4     3A 93 39 93 
257e8     39 93 39 93 
257ec     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
257f0     4B 93 4C 93 
257f4     5F 93 5F 93 
257f8     5F 93 5E 93 
257fc     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
25800     5F 93 84 93 
25804     4C 93 96 93 
25808     5F 93 AE 94 
2580c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
25810     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
25814     7A D7 00 80 
25818     87 8A 48 8F 
2581c     EC 8C 76 8D 
25820     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
25824     3C 8D 82 8D 
25828     42 8D 88 8D 
2582c     8C 8D 8E 8D 
25830     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
25834     97 8D DE 8D 
25838     E1 8D F1 8E 
2583c     D8 8C A3 83 
25840     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
25844     65 71 C9 65 
25848     FC 64 C4 65 
2584c     C1 65 BF 65 
25850     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
25854     B6 65 B4 65 
25858     B2 65 AE 65 
2585c     AC 65 ED 65 
25860     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
25864     5E 65 25 66 
25868     FA 62 23 6B 
2586c     B5 6C 61 0A 
25870     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
25874     5D 90 BE 8D 
25878     47 8E C3 8D 
2587c     09 8E C9 8D 
25880     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
25884     15 8E 19 8E 
25888     1B 8E 62 8E 
2588c     64 8E 68 8E 
25890     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
25894     B5 8E 4C 90 
25898     FA 84 3C 9D 
2589c     98 13 79 6D 
258a0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
258a4     D9 66 50 66 
258a8     D4 66 4B 66 
258ac     8C 66 46 66 
258b0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
258b4     81 66 3A 66 
258b8     7C 66 36 66 
258bc     76 66 30 66 
258c0     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
258c4     6B 66 88 72 
258c8     BF 37 E7 B7 
258cc     75 83 8B 8E 
258d0     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
258d4     94 8E 96 8E 
258d8     DD 8E 9C 8E 
258dc     E2 8E A2 8E 
258e0     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
258e4     EE 8E AE 8E 
258e8     38 8F B5 8E 
258ec     3F 8F FD 8E 
258f0     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
258f4     A5 87 1E E3 
258f8     6D 5D FA 71 
258fc     41 64 25 67 
25900     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
25904     D9 66 1A 67 
25908     18 67 15 67 
2590c     12 67 0F 67 
25910     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
25914     07 67 C0 66 
25918     01 67 BC 66 
2591c     B8 66 DE 64 
25920     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
25924     43 E5 1F 8B 
25928     14 8A F1 90 
2592c     1C 8F 63 8F 
25930     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
25934     29 8F 6E 8F 
25938     72 8F 75 8F 
2593c     34 8F BE 8F 
25940     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
25944     84 8F 87 8F 
25948     CC 8F 56 90 
2594c     67 91 49 80 
25950     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
25954     46 77 A6 66 
25958     E8 66 B0 67 
2595c     AD 67 ED 67 
25960     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
25964     A2 67 E3 67 
25968     9D 67 9A 67 
2596c     98 67 94 67 
25970     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
25974     49 67 CD 67 
25978     28 65 5F 6E 
2597c     82 67 3A 01 
25980     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
25984     C2 91 A9 8F 
25988     EF 8F AE 8F 
2598c     F4 8F B5 8F 
25990     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
25994     01 90 03 90 
25998     07 90 09 90 
2599c     0C 90 53 90 
259a0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
259a4     18 90 44 93 
259a8     85 84 D6 9D 
259ac     87 1F 2F 75 
259b0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
259b4     C4 68 F6 67 
259b8     BE 68 F1 67 
259bc     76 68 2E 68 
259c0     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
259c4     27 68 24 68 
259c8     64 68 1E 68 
259cc     5F 68 19 68 
259d0     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
259d4     DC 68 56 72 
259d8     7E 36 C2 B8 
259dc     D7 84 73 90 
259e0     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
259e4     7B 90 7F 90 
259e8     82 90 84 90 
259ec     CB 90 8B 90 
259f0     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
259f4     D7 90 96 90 
259f8     20 91 59 90 
259fc     25 91 A2 90 
25a00     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
25a04     D0 89 40 EE 
25a08     12 64 C4 71 
25a0c     29 66 0C 69 
25a10     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
25a14     C0 68 02 69 
25a18     FE 68 FB 68 
25a1c     F9 68 F6 68 
25a20     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
25a24     EE 68 A8 68 
25a28     2C 69 5F 68 
25a2c     E2 68 81 66 
25a30     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
25a34     1E EB A6 8A 
25a38     73 8B 5E 93 
25a3c     7B 90 48 91 
25a40     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
25a44     0D 91 11 91 
25a48     14 91 16 91 
25a4c     5C 91 1C 91 
25a50     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
25a54     68 91 AF 91 
25a58     2A 91 B5 91 
25a5c     75 91 1A 94 
25a60     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
25a64     70 0E CB 6C 
25a68     5D 6E C4 67 
25a6c     99 69 54 69 
25a70     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
25a74     D2 69 49 69 
25a78     89 69 86 69 
25a7c     40 69 C4 69 
25a80     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
25a84     35 69 76 69 
25a88     58 67 EB 6D 
25a8c     E9 6D 89 0F 
25a90     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
25a94     33 94 94 91 
25a98     D9 91 56 91 
25a9c     E0 91 9F 91 
25aa0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
25aa4     EC 91 EE 91 
25aa8     F1 91 F4 91 
25aac     F7 91 3D 92 
25ab0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
25ab4     46 92 21 94 
25ab8     11 89 A4 9D 
25abc     FD 0E 8F 6C 
25ac0     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
25ac4     28 6A E1 69 
25ac8     65 6A 1F 6A 
25acc     5F 6A 1A 6A 
25ad0     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
25ad4     54 6A 0F 6A 
25ad8     4F 6A 09 6A 
25adc     06 6A 03 6A 
25ae0     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
25ae4     23 68 69 77 
25ae8     3A 4D 38 CA 
25aec     38 86 4E 91 
25af0     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
25af4     64 92 24 92 
25af8     6A 92 2A 92 
25afc     70 92 30 92 
25b00     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
25b04     7B 92 7E 92 
25b08     C5 92 84 92 
25b0c     CB 92 8A 92 
25b10     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
25b14     4D 8D F9 E2 
25b18     97 59 FE 74 
25b1c     DB 68 6D 6A 
25b20     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
25b24     A8 6A A5 6A 
25b28     A3 6A 9F 6A 
25b2c     9D 6A 9B 6A 
25b30     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
25b34     D6 6A 8F 6A 
25b38     CF 6A 46 6A 
25b3c     CA 6A E1 67 
25b40     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
25b44     D3 F7 15 92 
25b48     90 8C BF 94 
25b4c     A6 92 EB 92 
25b50     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
25b54     B1 92 F7 92 
25b58     FA 92 FD 92 
25b5c     00 93 02 93 
25b60     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
25b64     4F 93 52 93 
25b68     54 93 22 94 
25b6c     5A 93 8F 88 
25b70     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
25b74     1C 77 07 6C 
25b78     E8 69 7A 6B 
25b7c     34 6B 75 6B 
25b80     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
25b84     29 6B 26 6B 
25b88     24 6B 21 6B 
25b8c     1D 6B 5E 6B 
25b90     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
25b94     12 6B 52 6B 
25b98     34 69 34 6E 
25b9c     BA 73 A4 24 
25ba0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
25ba4     7A 94 B3 93 
25ba8     72 93 31 93 
25bac     78 93 7A 93 
25bb0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
25bb4     83 93 86 93 
25bb8     89 93 D0 93 
25bbc     D2 93 D5 93 
25bc0     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
25bc4     DD 93 40 96 
25bc8     30 8B 99 9C 
25bcc     52 10 94 71 
25bd0     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
25bd4     46 6C 79 6B 
25bd8     40 6C B7 6B 
25bdc     F7 6B B1 6B 
25be0     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
25be4     EC 6B A5 6B 
25be8     A2 6B 9F 6B 
25bec     9D 6B 9A 6B 
25bf0     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
25bf4     C8 6A E4 76 
25bf8     20 4B F9 CE 
25bfc     2E 8A 1A 92 
25c00     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
25c04     FB 93 BA 93 
25c08     01 94 03 94 
25c0c     4A 94 09 94 
25c10     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
25c14     55 94 14 94 
25c18     9E 94 1A 94 
25c1c     61 94 20 94 
25c20     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
25c24     3E 87 E5 CD 
25c28     5F 50 6C 78 
25c2c     B5 6A 04 6C 
25c30     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
25c34     83 6C 7F 6C 
25c38     7C 6C 36 6C 
25c3c     76 6C 74 6C 
25c40     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
25c44     6B 6C 25 6C 
25c48     66 6C 1F 6C 
25c4c     1D 6C 41 6A 
25c50     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
25c54     BA FA FC 94 
25c58     5B 8D 97 96 
25c5c     3B 94 C5 94 
25c60     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
25c64     89 94 8C 94 
25c68     8F 94 92 94 
25c6c     94 94 DB 94 
25c70     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
25c74     E4 94 E7 94 
25c78     2D 95 74 95 
25c7c     C8 96 15 89 
25c80     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
25c84     CB 75 31 6F 
25c88     7E 6B 10 6D 
25c8c     C9 6C 0A 6D 
25c90     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
25c94     BD 6C FF 6C 
25c98     FB 6C F9 6C 
25c9c     B2 6C F3 6C 
25ca0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
25ca4     A7 6C E8 6C 
25ca8     0D 6B 85 6F 
25cac     C7 74 10 28 
25cb0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
25cb4     96 96 47 95 
25cb8     06 95 0A 95 
25cbc     0C 95 0F 95 
25cc0     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
25cc4     17 95 5E 95 
25cc8     61 95 63 95 
25ccc     22 95 AC 95 
25cd0     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
25cd4     72 95 17 98 
25cd8     59 8E 01 96 
25cdc     CF FC 5A 68 
25ce0     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
25ce4     96 6D 50 6D 
25ce8     D5 6D 4A 6D 
25cec     8C 6D 89 6D 
25cf0     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
25cf4     80 6D 3A 6D 
25cf8     7A 6D 77 6D 
25cfc     75 6D 71 6D 
25d00     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
25d04     18 6C BC 78 
25d08     9A 4F 7E CF 
25d0c     1F 89 F1 93 
25d10     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
25d14     D2 95 4E 95 
25d18     D7 95 53 95 
25d1c     DD 95 E0 95 
25d20     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
25d24     A5 95 EB 95 
25d28     EE 95 F0 95 
25d2c     37 96 B3 95 
25d30     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
25d34     1A 98 D5 8D 
25d38     C5 9F CD 0F 
25d3c     0F 71 F3 73 
25d40     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
25d44     D9 6D 5E 6E 
25d48     D3 6D 58 6E 
25d4c     12 6E 0F 6E 
25d50     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
25d54     49 6E BF 6D 
25d58     87 6E 76 6D 
25d5c     81 6E 11 6B 
25d60     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
25d64     3F 09 44 95 
25d68     E5 8D 3F 99 
25d6c     D4 95 A2 96 
25d70     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
25d74     23 96 69 96 
25d78     6B 96 6E 96 
25d7c     71 96 74 96 
25d80     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
25d84     BF 96 3C 96 
25d88     C6 96 C8 96 
25d8c     A3 98 51 8D 
25d90     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
25d94     CF 75 29 73 
25d98     90 6C EC 6E 
25d9c     62 6E E7 6E 
25da0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
25da4     9A 6E 98 6E 
25da8     95 6E 91 6E 
25dac     8E 6E CF 6E 
25db0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
25db4     40 6E C3 6E 
25db8     E8 6C 45 6F 
25dbc     A5 7B C9 35 
25dc0     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
25dc4     2D 98 23 97 
25dc8     E1 96 A0 96 
25dcc     A4 96 EA 96 
25dd0     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
25dd4     AF 96 F4 96 
25dd8     F8 96 3E 97 
25ddc     FD 96 43 97 
25de0     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
25de4     08 97 6B 99 
25de8     D6 92 88 91 
25dec     D8 EE 84 66 
25df0     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
25df4     2E 6F E7 6E 
25df8     6C 6F 24 6F 
25dfc     21 6F 1F 6F 
25e00     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
25e04     17 6F 13 6F 
25e08     54 6F 0E 6F 
25e0c     0B 6F 4B 6F 
25e10     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
25e14     27 6D 1C 7B 
25e18     19 59 9F DB 
25e1c     66 8E BC 94 
25e20     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
25e24     67 97 26 97 
25e28     6D 97 2B 97 
25e2c     72 97 32 97 
25e30     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
25e34     C1 97 7F 97 
25e38     C6 97 85 97 
25e3c     CB 97 CE 97 
25e40     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
25e44     EC 8A C4 C6 
25e48     68 4C F4 7D 
25e4c     63 6E E8 6E 
25e50     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
25e54     ED 6F A7 6F 
25e58     E7 6F A0 6F 
25e5c     E1 6F 9B 6F 
25e60     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
25e64     D5 6F 8F 6F 
25e68     CE 6F 45 6F 
25e6c     86 6F 68 6D 
25e70     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
25e74     C0 13 AD A2 
25e78     A7 8E 79 99 
25e7c     E6 97 E8 97 
25e80     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
25e84     F1 97 F3 97 
25e88     F6 97 F9 97 
25e8c     FB 97 FE 97 
25e90     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
25e94     4A 98 0A 98 
25e98     93 98 0F 98 
25e9c     7F 9B BF 8C 
25ea0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
25ea4     91 7B 62 73 
25ea8     1A 6E B9 70 
25eac     EB 6F B3 70 
25eb0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
25eb4     25 70 20 70 
25eb8     1E 70 1B 70 
25ebc     18 70 15 70 
25ec0     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
25ec4     0D 70 09 70 
25ec8     07 70 03 70 
25ecc     01 70 FD 6F 
25ed0     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
25ed4     F6 6F F2 6F 
25ed8     EF 6F EC 6F 
25edc     2C 70 E6 6F 
25ee0     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
25ee4     DD 6F 97 6F 
25ee8     D7 6F 84 6E 
25eec     8F 6F 3F 7D 
25ef0     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
25ef2     01 00 00 00 
25ef6     00 00 00 00 
25efa     00 00 00 00 
25efe     00 00 00 00 | mouse  file "mouse.def"
25f02     00 00 00 00 
25f06     00 00 00 00 
25f0a     00 00 00 00 
25f0e     00 00 00 00 | 	byte	$00[16]
25f12     01 01 00 00 
25f16     00 00 00 00 
25f1a     00 00 00 00 
25f1e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25f22     00 00 00 00 
25f26     00 00 00 00 
25f2a     00 00 00 00 
25f2e     00 00 00 00 | 	byte	$00[16]
25f32     01 0D 01 00 
25f36     00 00 00 00 
25f3a     00 00 00 00 
25f3e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25f42     00 00 00 00 
25f46     00 00 00 00 
25f4a     00 00 00 00 
25f4e     00 00 00 00 | 	byte	$00[16]
25f52     01 0D 0D 01 
25f56     00 00 00 00 
25f5a     00 00 00 00 
25f5e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25f62     00 00 00 00 
25f66     00 00 00 00 
25f6a     00 00 00 00 
25f6e     00 00 00 00 | 	byte	$00[16]
25f72     01 0D 0D 0D 
25f76     01 00 00 00 
25f7a     00 00 00 00 
25f7e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25f82     00 00 00 00 
25f86     00 00 00 00 
25f8a     00 00 00 00 
25f8e     00 00 00 00 | 	byte	$00[16]
25f92     01 0D 0D 0D 
25f96     0D 01 00 00 
25f9a     00 00 00 00 
25f9e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25fa2     00 00 00 00 
25fa6     00 00 00 00 
25faa     00 00 00 00 
25fae     00 00 00 00 | 	byte	$00[16]
25fb2     01 0D 0D 0D 
25fb6     0D 0D 01 00 
25fba     00 00 00 00 
25fbe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
25fc2     00 00 00 00 
25fc6     00 00 00 00 
25fca     00 00 00 00 
25fce     00 00 00 00 | 	byte	$00[16]
25fd2     01 0D 0D 0D 
25fd6     0D 0D 0D 01 
25fda     00 00 00 00 
25fde     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
25fe2     00 00 00 00 
25fe6     00 00 00 00 
25fea     00 00 00 00 
25fee     00 00 00 00 | 	byte	$00[16]
25ff2     01 0D 0D 0D 
25ff6     0D 0D 0D 0C 
25ffa     01 00 00 00 
25ffe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
26002     00 00 00 00 
26006     00 00 00 00 
2600a     00 00 00 00 
2600e     00 00 00 00 | 	byte	$00[16]
26012     01 0D 0D 0D 
26016     0D 0D 0D 0D 
2601a     0C 01 00 00 
2601e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
26022     00 00 00 00 
26026     00 00 00 00 
2602a     00 00 00 00 
2602e     00 00 00 00 | 	byte	$00[16]
26032     01 0D 0D 0D 
26036     0D 0D 0D 0D 
2603a     0D 0C 01 00 
2603e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
26042     00 00 00 00 
26046     00 00 00 00 
2604a     00 00 00 00 
2604e     00 00 00 00 | 	byte	$00[16]
26052     01 0D 0D 0D 
26056     0D 0D 0D 0D 
2605a     0D 0D 0B 01 
2605e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
26062     00 00 00 00 
26066     00 00 00 00 
2606a     00 00 00 00 
2606e     00 00 00 00 | 	byte	$00[16]
26072     01 0D 0D 0D 
26076     0C 0D 0D 03 
2607a     01 01 01 01 
2607e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
26082     00 00 00 00 
26086     00 00 00 00 
2608a     00 00 00 00 
2608e     00 00 00 00 | 	byte	$00[16]
26092     01 0D 0D 0C 
26096     01 09 0D 03 
2609a     00 00 00 00 
2609e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
260a2     00 00 00 00 
260a6     00 00 00 00 
260aa     00 00 00 00 
260ae     00 00 00 00 | 	byte	$00[16]
260b2     01 0D 0C 00 
260b6     00 01 0D 0B 
260ba     01 00 00 00 
260be     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
260c2     00 00 00 00 
260c6     00 00 00 00 
260ca     00 00 00 00 
260ce     00 00 00 00 | 	byte	$00[16]
260d2     01 0C 00 00 
260d6     00 01 0A 0D 
260da     01 00 00 00 
260de     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
260e2     00 00 00 00 
260e6     00 00 00 00 
260ea     00 00 00 00 
260ee     00 00 00 00 | 	byte	$00[16]
260f2     01 00 00 00 
260f6     00 00 01 0D 
260fa     0B 01 00 00 
260fe     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
26102     00 00 00 00 
26106     00 00 00 00 
2610a     00 00 00 00 
2610e     00 00 00 00 
26112     00 00 00 00 
26116     00 00       | 	byte	$00[22]
26118     01 0B 0D 01 
2611c     00 00 00 00 
26120     00 00 00 00 
26124     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26128     00 00 00 00 
2612c     00 00 00 00 
26130     00 00 00 00 
26134     00 00 00 00 
26138     00          | 	byte	$00[17]
26139     01 00 00 00 
2613d     00 00 00 00 
26141     00 00 00 00 
26145     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26149     00 00 00 00 
      ...             
262ed     00 00 00 00 
262f1     00          | 	byte	$00[425]
262f2                 | 
262f2     00 00       |              	org
262f4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
262f8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
262fc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
26300 003             | 
26300 003 00 30 04 F6 |                 mov     psramaddr,#0
26304 004             | 
26304 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
26308 005 20 00 00 FF 
2630c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
26310 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
26314 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
26318 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2631c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
26320 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
26324 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
26328 00d             | 
26328 00d 20 00 00 FF 
2632c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
26330 00f E0 03 00 FF 
26334 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
26338 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2633c 012             | 
2633c 012             |                 
2633c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
26340 013             |     
26340 013 01 2C 60 FD |                 cogid 	t11				' get id
26344 014 00 00 EC FC |                 coginit #0,#0				' start the new program
26348 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2634c 016             | 
2634c 016 00 00 00 00 | t11 		long 	0
26350 017 00 FF 07 00 | mailbox 	long 	$7FF00
26354 018 00 00 00 00 | psramaddr 	long 	0
26358 019 00 00 00 00 | pslockval	long 	0
2635c 01a 00 00 00 00 | cmd             long    0
26360 01b 00 00 00 00 | buf1            long    0
26364 01c 00 40 00 00 | buf2            long    16384
26368 01d 6C 63 02 00 | 	long	@@@_dat_ + 5100
2636c 01e 50 32 20 52 
26370 01f 65 74 72 6F 
26374 020 6D 61 63 68 
26378 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2637c 022 42 41 53 49 
26380 023 43 20 76 65 
26384 024 72 73 69 6F 
26388 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2638c 026 32 30 00 00 | 	byte	$32, $30, $00, $00
26390 027             | 	alignl
26390 027             | _hg010b_spin2_dat_
26390 027             | 
26390 027 00 00 00 00 
26394 028 00 00 00 00 
26398 029 00 00 00 00 
2639c 02a 00 00 00 00 
263a0 02b 00 00 00    | vga_font       file "vgafont.def"
263a3 02b 7E 81 A5 81 
263a7 02c 81 BD 99 81 
263ab 02d 81 7E 00 00 
263af 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
263b3 02f 7E FF DB FF 
263b7 030 FF C3 E7 FF 
263bb 031 FF 7E 00 00 
263bf 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
263c3 033 00 36 7F 7F 
263c7 034 7F 7F 3E 1C 
263cb 035 08 00 00 00 
263cf 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
263d3 037 00 08 1C 3E 
263d7 038 7F 3E 1C 08 
263db 039 00 00 00 00 
263df 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
263e3 03b 18 3C 3C E7 
263e7 03c E7 E7 18 18 
263eb 03d 3C 00 00 00 
263ef 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
263f3 03f 18 3C 7E FF 
263f7 040 FF 7E 18 18 
263fb 041 3C 00 00 00 
263ff 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
26403 043 00 00 00 18 
26407 044 3C 3C 18 00 
2640b 045 00 00 00 00 
2640f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
26413 047 FF FF FF E7 
26417 048 C3 C3 E7 FF 
2641b 049 FF FF FF FF 
2641f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26423 04b 00 00 3C 66 
26427 04c 42 42 66 3C 
2642b 04d 00 00 00 00 
2642f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
26433 04f FF FF C3 99 
26437 050 BD BD 99 C3 
2643b 051 FF FF FF FF 
2643f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26443 053 78 70 58 4C 
26447 054 1E 33 33 33 
2644b 055 33 1E 00 00 
2644f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
26453 057 3C 66 66 66 
26457 058 66 3C 18 7E 
2645b 059 18 18 00 00 
2645f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
26463 05b FC CC FC 0C 
26467 05c 0C 0C 0C 0E 
2646b 05d 0F 07 00 00 
2646f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
26473 05f FE C6 FE C6 
26477 060 C6 C6 C6 E6 
2647b 061 E7 67 03 00 
2647f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
26483 063 18 18 DB 3C 
26487 064 E7 3C DB 18 
2648b 065 18 00 00 00 
2648f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
26493 067 03 07 0F 1F 
26497 068 7F 1F 0F 07 
2649b 069 03 01 00 00 
2649f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
264a3 06b 60 70 78 7C 
264a7 06c 7F 7C 78 70 
264ab 06d 60 40 00 00 
264af 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
264b3 06f 18 3C 7E 18 
264b7 070 18 18 7E 3C 
264bb 071 18 00 00 00 
264bf 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
264c3 073 66 66 66 66 
264c7 074 66 66 66    | 	byte	$66[7]
264ca 075 00 66 66 00 
264ce 076 00 00 00 00 
264d2 077 00 FE DB DB 
264d6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
264da 079 D8 D8 D8 00 
264de 07a 00 00 00 3E 
264e2 07b 63 06 1C 36 
264e6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
264ea 07d 30 63 3E 00 
264ee 07e 00 00 00 00 
264f2 07f 00 00 00 00 
264f6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
264fa 081 7F 7F 7F 00 
264fe 082 00 00 00 00 
26502 083 00 18 3C 7E 
26506 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2650a 085 3C 18 7E 00 
2650e 086 00 00 00 00 
26512 087 00 18 3C 7E 
26516 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2651a 089 18 18 18 00 
2651e 08a 00 00 00 00 
26522 08b 00 18 18 18 
26526 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2652a 08d 7E 3C 18 00 
2652e 08e 00 00 00 00 
26532 08f 00 00 00 18 
26536 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2653a 091 00 00 00 00 
2653e 092 00 00 00 00 
26542 093 00 00 00    | 	byte	$00[11]
26545 094 0C 06 7F 06 
26549 095 0C 00 00 00 
2654d 096 00 00 00 00 
26551 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26555 098 00 03 03 03 
26559 099 7F 00 00 00 
2655d 09a 00 00 00 00 
26561 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26565 09c 14 36 7F 36 
26569 09d 14 00 00 00 
2656d 09e 00 00 00 00 
26571 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
26575 0a0 1C 1C 3E 3E 
26579 0a1 7F 7F 00 00 
2657d 0a2 00 00 00 00 
26581 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
26585 0a4 7F 3E 3E 1C 
26589 0a5 1C 08 00 00 
2658d 0a6 00 00 00 00 
26591 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26595 0a8 00 00 00 00 
26599 0a9 00 00 00 00 
2659d 0aa 00 00 00 00 
265a1 0ab 00 00       | 	byte	$00[14]
265a3 0ab 18 3C 3C 3C 
265a7 0ac 18 18 18 00 
265ab 0ad 18 18 00 00 
265af 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
265b3 0af 66 24 00 00 
265b7 0b0 00 00 00 00 
265bb 0b1 00 00 00 00 
265bf 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
265c3 0b3 00 36 36 7F 
265c7 0b4 36 36 36 7F 
265cb 0b5 36 36 00 00 
265cf 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
265d3 0b7 3E 63 43 03 
265d7 0b8 3E 60 60 61 
265db 0b9 63 3E 18 18 
265df 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
265e3 0bb 00 00 43 63 
265e7 0bc 30 18 0C 06 
265eb 0bd 63 61 00 00 
265ef 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
265f3 0bf 1C 36 36 1C 
265f7 0c0 6E 3B 33 33 
265fb 0c1 33 6E 00 00 
265ff 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
26603 0c3 0C 0C 0C 06 
26607 0c4 00 00 00 00 
2660b 0c5 00 00 00 00 
2660f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26613 0c7 30 18 0C 0C 
26617 0c8 0C 0C 0C 0C 
2661b 0c9 18 30 00 00 
2661f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
26623 0cb 0C 18 30 30 
26627 0cc 30 30 30 30 
2662b 0cd 18 0C 00 00 
2662f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
26633 0cf 00 00 00 66 
26637 0d0 3C FF 3C 66 
2663b 0d1 00 00 00 00 
2663f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
26643 0d3 00 00 00 18 
26647 0d4 18 7E 18 18 
2664b 0d5 00 00 00 00 
2664f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
26653 0d7 00 00 00 00 
26657 0d8 00 00 00 00 | 	byte	$00[8]
2665b 0d9 18 18 18 0C 
2665f 0da 00 00 00 00 
26663 0db 00 00 00 00 
26667 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2666b 0dd 00 00 00 00 
2666f 0de 00 00 00 00 
26673 0df 00 00 00 00 
26677 0e0 00 00 00 00 | 	byte	$00[16]
2667b 0e1 18 18 00 00 
2667f 0e2 00 00 00 00 
26683 0e3 00 00 40 60 
26687 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2668b 0e5 03 01 00 00 
2668f 0e6 00 00 00 00 
26693 0e7 1C 36 63 63 
26697 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2669b 0e9 36 1C 00 00 
2669f 0ea 00 00 00 00 
266a3 0eb 18 1C 1E 18 
266a7 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
266ab 0ed 18 7E 00 00 
266af 0ee 00 00 00 00 
266b3 0ef 3E 63 60 30 
266b7 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
266bb 0f1 63 7F 00 00 
266bf 0f2 00 00 00 00 
266c3 0f3 3E 63 60 60 
266c7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
266cb 0f5 63 3E 00 00 
266cf 0f6 00 00 00 00 
266d3 0f7 30 38 3C 36 
266d7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
266db 0f9 30 78 00 00 
266df 0fa 00 00 00 00 
266e3 0fb 7F 03 03 03 
266e7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
266eb 0fd 63 3E 00 00 
266ef 0fe 00 00 00 00 
266f3 0ff 1C 06 03 03 
266f7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
266fb 101 63 3E 00 00 
266ff 102 00 00 00 00 
26703 103 7F 63 60 60 
26707 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2670b 105 0C 0C 00 00 
2670f 106 00 00 00 00 
26713 107 3E 63 63 63 
26717 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2671b 109 63 3E 00 00 
2671f 10a 00 00 00 00 
26723 10b 3E 63 63 63 
26727 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2672b 10d 30 1E 00 00 
2672f 10e 00 00 00 00 
26733 10f 00 00 00 18 
26737 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2673b 111 18 18 00 00 
2673f 112 00 00 00 00 
26743 113 00 00 00 18 
26747 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2674b 115 18 18 0C 00 
2674f 116 00 00 00 00 
26753 117 00 60 30 18 
26757 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2675b 119 30 60 00 00 
2675f 11a 00 00 00 00 
26763 11b 00 00 00 7E 
26767 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2676b 11d 00 00 00 00 
2676f 11e 00 00 00 00 
26773 11f 00          | 	byte	$00[9]
26774 120 06 0C 18 30 
26778 121 60 30 18 0C 
2677c 122 06 00 00 00 
26780 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
26784 124 63 63 30 18 
26788 125 18 18 00 18 
2678c 126 18 00 00 00 
26790 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
26794 128 3E 63 63 7B 
26798 129 7B 7B 3B 03 
2679c 12a 3E 00 00 00 
267a0 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
267a4 12c 1C 36 63 63 
267a8 12d 7F 63 63 63 
267ac 12e 63 00 00 00 
267b0 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
267b4 130 66 66 66 3E 
267b8 131 66 66 66 66 
267bc 132 3F 00 00 00 
267c0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
267c4 134 66 43 03 03 
267c8 135 03 03 43 66 
267cc 136 3C 00 00 00 
267d0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
267d4 138 36 66 66 66 
267d8 139 66 66 66 36 
267dc 13a 1F 00 00 00 
267e0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
267e4 13c 66 46 16 1E 
267e8 13d 16 06 46 66 
267ec 13e 7F 00 00 00 
267f0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
267f4 140 66 46 16 1E 
267f8 141 16 06 06 06 
267fc 142 0F 00 00 00 
26800 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
26804 144 66 43 03 03 
26808 145 7B 63 63 66 
2680c 146 5C 00 00 00 
26810 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
26814 148 63 63 63 7F 
26818 149 63 63 63 63 
2681c 14a 63 00 00 00 
26820 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
26824 14c 18 18 18 18 
26828 14d 18 18 18 18 | 	byte	$18[8]
2682c 14e 3C 00 00 00 
26830 14f 00 00 00 78 
26834 150 30 30 30 30 
26838 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2683c 152 1E 00 00 00 
26840 153 00 00 00 67 
26844 154 66 66 36 1E 
26848 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2684c 156 67 00 00 00 
26850 157 00 00 00 0F 
26854 158 06 06 06 06 
26858 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2685c 15a 7F 00 00 00 
26860 15b 00 00 00 63 
26864 15c 77 7F 7F 6B 
26868 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2686c 15e 63 00 00 00 
26870 15f 00 00 00 63 
26874 160 67 6F 7F 7B 
26878 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2687c 162 63 00 00 00 
26880 163 00 00 00 3E 
26884 164 63 63 63 63 
26888 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2688c 166 3E 00 00 00 
26890 167 00 00 00 3F 
26894 168 66 66 66 3E 
26898 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2689c 16a 0F 00 00 00 
268a0 16b 00 00 00 3E 
268a4 16c 63 63 63 63 
268a8 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
268ac 16e 3E 30 70 00 
268b0 16f 00 00 00 3F 
268b4 170 66 66 66 3E 
268b8 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
268bc 172 67 00 00 00 
268c0 173 00 00 00 3E 
268c4 174 63 63 06 1C 
268c8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
268cc 176 3E 00 00 00 
268d0 177 00 00 00 7E 
268d4 178 7E 5A 18 18 
268d8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
268dc 17a 3C 00 00 00 
268e0 17b 00 00 00 63 
268e4 17c 63 63 63 63 
268e8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
268ec 17e 3E 00 00 00 
268f0 17f 00 00 00 63 
268f4 180 63 63 63 63 
268f8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
268fc 182 08 00 00 00 
26900 183 00 00 00 63 
26904 184 63 63 63 6B 
26908 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2690c 186 36 00 00 00 
26910 187 00 00 00 63 
26914 188 63 36 3E 1C 
26918 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2691c 18a 63 00 00 00 
26920 18b 00 00 00 66 
26924 18c 66 66 66 3C 
26928 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2692c 18e 3C 00 00 00 
26930 18f 00 00 00 7F 
26934 190 63 61 30 18 
26938 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2693c 192 7F 00 00 00 
26940 193 00 00 00 3C 
26944 194 0C 0C 0C 0C 
26948 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2694c 196 3C 00 00 00 
26950 197 00 00 00 00 
26954 198 01 03 07 0E 
26958 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2695c 19a 40 00 00 00 
26960 19b 00 00 00 3C 
26964 19c 30 30 30 30 
26968 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2696c 19e 3C 00 00 00 
26970 19f 1C 36 00 00 
26974 1a0 00 00 00 00 
26978 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2697c 1a2 00 00 00 00 
26980 1a3 00 00 00 00 
26984 1a4 00 00 00 00 
26988 1a5 00 00 00 00 
2698c 1a6 00          | 	byte	$00[17]
2698d 1a6 FF 00 00 0C 
26991 1a7 18 00 00 00 
26995 1a8 00 00 00 00 
26999 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2699d 1aa 00 00 00 00 
269a1 1ab 00 00 00 00 
269a5 1ac 00          | 	byte	$00[9]
269a6 1ac 1E 30 3E 33 
269aa 1ad 33 33 6E 00 
269ae 1ae 00 00 00 00 
269b2 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
269b6 1b0 1E 36 66 66 
269ba 1b1 66 66 3E 00 
269be 1b2 00 00 00 00 
269c2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
269c6 1b4 3E 63 03 03 
269ca 1b5 03 63 3E 00 
269ce 1b6 00 00 00 00 
269d2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
269d6 1b8 3C 36 33 33 
269da 1b9 33 33 6E 00 
269de 1ba 00 00 00 00 
269e2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
269e6 1bc 3E 63 7F 03 
269ea 1bd 03 63 3E 00 
269ee 1be 00 00 00 00 
269f2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
269f6 1c0 0C 1E 0C 0C 
269fa 1c1 0C 0C 1E 00 
269fe 1c2 00 00 00 00 
26a02 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26a06 1c4 6E 33 33 33 
26a0a 1c5 33 33 3E 30 
26a0e 1c6 33 1E 00 00 
26a12 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
26a16 1c8 36 6E 66 66 
26a1a 1c9 66 66 67 00 
26a1e 1ca 00 00 00 00 
26a22 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
26a26 1cc 1C 18 18 18 
26a2a 1cd 18 18 3C 00 
26a2e 1ce 00 00 00 00 
26a32 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
26a36 1d0 70 60 60 60 
26a3a 1d1 60 60 60 66 
26a3e 1d2 66 3C 00 00 
26a42 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
26a46 1d4 66 36 1E 1E 
26a4a 1d5 36 66 67 00 
26a4e 1d6 00 00 00 00 
26a52 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
26a56 1d8 18 18 18 18 
26a5a 1d9 18 18       | 	byte	$18[6]
26a5c 1da 3C 00 00 00 
26a60 1db 00 00 00 00 
26a64 1dc 00 00 37 7F 
26a68 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
26a6c 1de 63 00 00 00 
26a70 1df 00 00 00 00 
26a74 1e0 00 00 3B 66 
26a78 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26a7c 1e2 66 00 00 00 
26a80 1e3 00 00 00 00 
26a84 1e4 00 00 3E 63 
26a88 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
26a8c 1e6 3E 00 00 00 
26a90 1e7 00 00 00 00 
26a94 1e8 00 00 3B 66 
26a98 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26a9c 1ea 3E 06 06 0F 
26aa0 1eb 00 00 00 00 
26aa4 1ec 00 00 6E 33 
26aa8 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
26aac 1ee 3E 30 30 78 
26ab0 1ef 00 00 00 00 
26ab4 1f0 00 00 3B 6E 
26ab8 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
26abc 1f2 0F 00 00 00 
26ac0 1f3 00 00 00 00 
26ac4 1f4 00 00 3E 63 
26ac8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
26acc 1f6 3E 00 00 00 
26ad0 1f7 00 00 00 08 
26ad4 1f8 0C 0C 3F 0C 
26ad8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
26adc 1fa 38 00 00 00 
26ae0 1fb 00 00 00 00 
26ae4 1fc 00 00 33 33 
26ae8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
26aec 1fe 6E 00 00 00 
26af0 1ff 00 00 00 00 
26af4 200 00 00 63 63 
26af8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
26afc 202 1C 00 00 00 
26b00 203 00 00 00 00 
26b04 204 00 00 63 63 
26b08 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
26b0c 206 36 00 00 00 
26b10 207 00 00 00 00 
26b14 208 00 00 63 36 
26b18 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
26b1c 20a 63 00 00 00 
26b20 20b 00 00 00 00 
26b24 20c 00 00 63 63 
26b28 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
26b2c 20e 7E 60 30 1F 
26b30 20f 00 00 00 00 
26b34 210 00 00 7F 33 
26b38 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
26b3c 212 7F 00 00 00 
26b40 213 00 00 00 70 
26b44 214 18 18 18 0E 
26b48 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
26b4c 216 70 00 00 00 
26b50 217 00 00 00 18 
26b54 218 18 18 18 18 
26b58 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
26b5c 21a 18 00 00 00 
26b60 21b 00 00 00 0E 
26b64 21c 18 18 18 70 
26b68 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
26b6c 21e 0E 00 00 00 
26b70 21f 6E 3B 00 00 
26b74 220 00 00 00 00 
26b78 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b7c 222 00 00 00 00 
26b80 223 00 00 00 00 
26b84 224 00 00       | 	byte	$00[10]
26b86 224 08 1C 36 63 
26b8a 225 63 63 7F 00 
26b8e 226 00 00 00 00 
26b92 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
26b96 228 03 03 03 03 
26b9a 229 43 66 3C 18 
26b9e 22a 30 1E 00 00 
26ba2 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
26ba6 22c 33 33 33 33 
26baa 22d 33 33       | 	byte	$33[6]
26bac 22e 6E 00 00 00 
26bb0 22f 00 00 60 30 
26bb4 230 18 00 3E 63 
26bb8 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
26bbc 232 3E 00 00 00 
26bc0 233 00 00 08 1C 
26bc4 234 36 00 1E 30 
26bc8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
26bcc 236 6E 00 00 00 
26bd0 237 00 00 00 00 
26bd4 238 33 00 1E 30 
26bd8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
26bdc 23a 6E 00 00 00 
26be0 23b 00 00 1C 36 
26be4 23c 1C 00 33 33 
26be8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
26bec 23e 6E 00 00 00 
26bf0 23f 00 00 60 30 
26bf4 240 18 00 3E 63 
26bf8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
26bfc 242 3E 00 00 00 
26c00 243 00 00 00 00 
26c04 244 00 00 3E 63 
26c08 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
26c0c 246 3E 18 30 1E 
26c10 247 00 00 00 1C 
26c14 248 58 78 38 18 
26c18 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
26c1c 24a 3C 00 00 00 
26c20 24b 00 00 00 00 
26c24 24c 63 00 3E 63 
26c28 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
26c2c 24e 3E 00 00 00 
26c30 24f 66 33 00 3E 
26c34 250 63 63 63 63 
26c38 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26c3c 252 3E 00 00 00 
26c40 253 00 00 CC 66 
26c44 254 33 00 3E 63 
26c48 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
26c4c 256 3E 00 00 00 
26c50 257 00 00 18 3C 
26c54 258 66 00 1C 18 
26c58 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
26c5c 25a 3C 00 00 00 
26c60 25b 30 18 00 7F 
26c64 25c 63 61 30 18 
26c68 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
26c6c 25e 7F 00 00 00 
26c70 25f 00 63 00 08 
26c74 260 1C 36 63 63 
26c78 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
26c7c 262 63 00 00 00 
26c80 263 30 18 00 3C 
26c84 264 66 43 03 03 
26c88 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
26c8c 266 3C 00 00 00 
26c90 267 30 18 00 7F 
26c94 268 66 46 16 1E 
26c98 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
26c9c 26a 7F 00 00 00 
26ca0 26b 0C 06 00 0F 
26ca4 26c 06 06 06 06 
26ca8 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
26cac 26e 7F 00 00 00 
26cb0 26f 30 18 00 1C 
26cb4 270 18 18 18 18 
26cb8 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
26cbc 272 3C 00 00 00 
26cc0 273 00 00 08 1C 
26cc4 274 36 00 3E 63 
26cc8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
26ccc 276 3E 00 00 00 
26cd0 277 00 00 00 00 
26cd4 278 63 00 3E 63 
26cd8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
26cdc 27a 3E 00 00 00 
26ce0 27b 00 00 00 6F 
26ce4 27c 46 26 06 06 
26ce8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
26cec 27e 7F 00 00 00 
26cf0 27f 00 00 00 6E 
26cf4 280 4C 2C 0C 0C 
26cf8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
26cfc 282 1E 00 00 00 
26d00 283 30 18 00 3E 
26d04 284 63 63 06 1C 
26d08 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
26d0c 286 3E 00 00 00 
26d10 287 00 00 60 30 
26d14 288 18 00 3E 63 
26d18 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
26d1c 28a 3E 00 00 00 
26d20 28b 00 63 00 3E 
26d24 28c 63 63 63 63 
26d28 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26d2c 28e 3E 00 00 00 
26d30 28f 00 63 00 63 
26d34 290 63 63 63 63 
26d38 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
26d3c 292 3E 00 00 00 
26d40 293 6C 38 00 7E 
26d44 294 7E 5A 18 18 
26d48 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
26d4c 296 3C 00 00 00 
26d50 297 00 00 60 48 
26d54 298 2C 0C 3F 0C 
26d58 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
26d5c 29a 38 00 00 00 
26d60 29b 00 00 00 0F 
26d64 29c 26 36 1E 0E 
26d68 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
26d6c 29e 7F 00 00 00 
26d70 29f 00 00 00 00 
26d74 2a0 00 63 36 1C 
26d78 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
26d7c 2a2 00 00 00 00 
26d80 2a3 00 00       | 	byte	$00[6]
26d82 2a3 36 1C 08 00 
26d86 2a4 3E 63 03 03 
26d8a 2a5 03 63 3E 00 
26d8e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
26d92 2a7 30 18 0C 00 
26d96 2a8 1E 30 3E 33 
26d9a 2a9 33 33 6E 00 
26d9e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
26da2 2ab 60 30 18 00 
26da6 2ac 1C 18 18 18 
26daa 2ad 18 18 3C 00 
26dae 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
26db2 2af 60 30 18 00 
26db6 2b0 3E 63 63 63 
26dba 2b1 63 63 3E 00 
26dbe 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
26dc2 2b3 30 18 0C 00 
26dc6 2b4 33 33 33 33 
26dca 2b5 33 33 6E 00 
26dce 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
26dd2 2b7 00 08 1C 36 
26dd6 2b8 63 63 7F 63 
26dda 2b9 63 63 63 18 
26dde 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
26de2 2bb 00 00 00 00 
26de6 2bc 1E 30 3E 33 
26dea 2bd 33 33 6E 18 
26dee 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
26df2 2bf 00 7F 63 61 
26df6 2c0 30 18 0C 06 
26dfa 2c1 43 63 7F 00 
26dfe 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
26e02 2c3 36 1C 08 00 
26e06 2c4 7F 33 18 0C 
26e0a 2c5 06 63 7F 00 
26e0e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
26e12 2c7 00 7F 66 46 
26e16 2c8 16 1E 16 06 
26e1a 2c9 46 66 7F 18 
26e1e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
26e22 2cb 00 00 00 00 
26e26 2cc 3E 63 7F 03 
26e2a 2cd 03 63 3E 18 
26e2e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
26e32 2cf 00 3C 66 03 
26e36 2d0 1F 03 0F 03 
26e3a 2d1 03 66 3C 00 
26e3e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
26e42 2d3 60 30 18 00 
26e46 2d4 7F 33 18 0C 
26e4a 2d5 06 63 7F 00 
26e4e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
26e52 2d7 00 3C 66 43 
26e56 2d8 03 03 03 03 
26e5a 2d9 43 66 3C 00 
26e5e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
26e62 2db 00 00 00 00 
26e66 2dc 3E 63 06 1C 
26e6a 2dd 30 63 3E 18 
26e6e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
26e72 2df 00 00 00 00 
26e76 2e0 00 00       | 	byte	$00[6]
26e78 2e1 6C 36 1B 36 
26e7c 2e2 6C 00 00 00 
26e80 2e3 00 00 00 00 
26e84 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e88 2e5 1B 36 6C 36 
26e8c 2e6 1B 00 00 00 
26e90 2e7 88 22 88 22 
26e94 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
26e98 2e9 88 22 88 22 
26e9c 2ea 88 22 88 22 
26ea0 2eb AA 55 AA 55 
26ea4 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
26ea8 2ed AA 55 AA 55 
26eac 2ee AA 55 AA 55 
26eb0 2ef BB EE BB EE 
26eb4 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
26eb8 2f1 BB EE BB EE 
26ebc 2f2 BB EE BB EE 
26ec0 2f3 18 18 18 18 
26ec4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
26ec8 2f5 18 18 18 18 
26ecc 2f6 18 18 18 18 
26ed0 2f7 18 18 18 18 
26ed4 2f8 18 18 18    | 	byte	$18[15]
26ed7 2f8 1F 18 18 18 
26edb 2f9 18 18 18 18 
26edf 2fa 18 30 18 00 
26ee3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
26ee7 2fc 63 7F 63 63 
26eeb 2fd 63 63 00 00 
26eef 2fe 00 1C 36 00 
26ef3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
26ef7 300 63 7F 63 63 
26efb 301 63 63 00 00 
26eff 302 00 36 1C 00 
26f03 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
26f07 304 1E 16 06 46 
26f0b 305 66 7F 00 00 
26f0f 306 00 00 00 00 
26f13 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
26f17 308 1C 30 60 63 
26f1b 309 63 3E 18 30 
26f1f 30a 1E 6C 6C 6C 
26f23 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
26f27 30c 6F 6C 6C 6C 
26f2b 30d 6C 6C 6C 6C 
26f2f 30e 6C 6C 6C 6C 
26f33 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
26f37 310 6C 6C 6C 6C 
26f3b 311 6C 6C 6C 6C 
26f3f 312 6C          | 	byte	$6c[9]
26f40 313 00 00 00 00 
26f44 314 00          | 	byte	$00[5]
26f45 314 7F 60 6F 6C 
26f49 315 6C 6C 6C 6C 
26f4d 316 6C 6C 6C 6C 
26f51 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
26f55 318 6F 60 7F 00 
26f59 319 00 00 00 00 
26f5d 31a 00 00 00 18 
26f61 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
26f65 31c 61 30 18 0C 
26f69 31d 06 43 63 7F 
26f6d 31e 00 00 00 00 
26f71 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
26f75 320 00 7F 33 18 
26f79 321 0C 06 63 7F 
26f7d 322 00 00 00 00 
26f81 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
26f85 324 00 00 1F 18 
26f89 325 18 18 18 18 
26f8d 326 18 18 18 18 
26f91 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26f95 328 18 18 F8 00 
26f99 329 00 00 00 00 
26f9d 32a 00 00 00 18 
26fa1 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
26fa5 32c 18 18 FF 00 
26fa9 32d 00 00 00 00 
26fad 32e 00 00 00 00 
26fb1 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26fb5 330 00 00 FF 18 
26fb9 331 18 18 18 18 
26fbd 332 18 18 18 18 
26fc1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26fc5 334 18 18 F8 18 
26fc9 335 18 18 18 18 
26fcd 336 18 18 18 00 
26fd1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
26fd5 338 00 00 FF 00 
26fd9 339 00 00 00 00 
26fdd 33a 00 00 00 18 
26fe1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
26fe5 33c 18 18 FF 18 
26fe9 33d 18 18 18 18 
26fed 33e 18 18 18 63 
26ff1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
26ff5 340 36 63 63 7F 
26ff9 341 63 63 63 63 
26ffd 342 00 00 00 00 
27001 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
27005 344 00 1E 30 3E 
27009 345 33 33 33 6E 
2700d 346 00 00 00 6C 
27011 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
27015 348 EC 0C FC 00 
27019 349 00 00 00 00 
2701d 34a 00 00 00 00 
27021 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27025 34c FC 0C EC 6C 
27029 34d 6C 6C 6C 6C 
2702d 34e 6C 6C 6C 6C 
27031 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27035 350 EF 00 FF 00 
27039 351 00 00 00 00 
2703d 352 00 00 00 00 
27041 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27045 354 FF 00 EF 6C 
27049 355 6C 6C 6C 6C 
2704d 356 6C 6C 6C 6C 
27051 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27055 358 EC 0C EC 6C 
27059 359 6C 6C 6C 6C 
2705d 35a 6C 6C 6C 00 
27061 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27065 35c FF 00 FF 00 
27069 35d 00 00 00 00 
2706d 35e 00 00 00 6C 
27071 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
27075 360 EF 00 EF 6C 
27079 361 6C 6C 6C 6C 
2707d 362 6C 6C 6C 00 
27081 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27085 364 63 3E 63 63 
27089 365 63 63 3E 63 
2708d 366 00 00 00 00 
27091 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
27095 368 30 3C 36 33 
27099 369 33 33 33 6E 
2709d 36a 00 00 00 00 
270a1 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
270a5 36c 66 66 6F 66 
270a9 36d 66 66 36 1F 
270ad 36e 00 00 00 36 
270b1 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
270b5 370 66 66 66 66 
270b9 371 66 66       | 	byte	$66[6]
270bb 371 36 1F 00 00 
270bf 372 00 00 63 00 
270c3 373 7F 66 46 16 
270c7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
270cb 375 66 7F 00 00 
270cf 376 00 6C 38 00 
270d3 377 38 30 30 3C 
270d7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
270db 379 33 6E 00 00 
270df 37a 00 36 1C 00 
270e3 37b 63 67 6F 7F 
270e7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
270eb 37d 63 63 00 00 
270ef 37e 00 30 18 00 
270f3 37f 3C 18 18 18 
270f7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
270fb 381 18 3C 00 00 
270ff 382 00 3C 66 00 
27103 383 3C 18 18 18 
27107 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2710b 385 18 3C 00 00 
2710f 386 00 00 00 36 
27113 387 1C 08 00 3E 
27117 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2711b 389 63 3E 00 00 
2711f 38a 00 18 18 18 
27123 38b 18 18 18 18 
27127 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2712b 38d 00 00 00 00 
2712f 38e 00 00 00 00 
27133 38f 00 00 00 00 | 	byte	$00[12]
27137 390 F8 18 18 18 
2713b 391 18 18 18 18 
2713f 392 18 FF FF FF 
27143 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
27147 394 FF FF FF FF 
2714b 395 FF FF FF FF 
2714f 396 FF          | 	byte	$ff[9]
27150 397 00 00 00 00 
27154 398 00 00 00    | 	byte	$00[7]
27157 398 FF FF FF FF 
2715b 399 FF FF FF FF 
2715f 39a FF          | 	byte	$ff[9]
27160 39b 00 00 00 7E 
27164 39c 7E 5A 18 18 
27168 39d 18 18 18 18 
2716c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
27170 39f 1C 36 1C 63 
27174 3a0 63 63 63 63 
27178 3a1 63 63 63 63 
2717c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27180 3a3 FF FF FF FF 
27184 3a4 FF FF FF    | 	byte	$ff[7]
27187 3a4 00 00 00 00 
2718b 3a5 00 00 00 00 
2718f 3a6 00          | 	byte	$00[9]
27190 3a7 30 18 00 3E 
27194 3a8 63 63 63 63 
27198 3a9 63 63 63 63 
2719c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
271a0 3ab 00 00 00 1E 
271a4 3ac 33 33 33 1B 
271a8 3ad 33 63 63 63 
271ac 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
271b0 3af 1C 36 00 3E 
271b4 3b0 63 63 63 63 
271b8 3b1 63 63 63 63 
271bc 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
271c0 3b3 30 18 00 63 
271c4 3b4 67 6F 7F 7B 
271c8 3b5 73 63 63 63 
271cc 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
271d0 3b7 00 00 60 30 
271d4 3b8 18 00 3B 66 
271d8 3b9 66 66 66 66 
271dc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
271e0 3bb 00 00 36 1C 
271e4 3bc 08 00 3B 66 
271e8 3bd 66 66 66 66 
271ec 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
271f0 3bf 36 1C 00 3E 
271f4 3c0 63 63 06 1C 
271f8 3c1 30 60 63 63 
271fc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
27200 3c3 00 00 36 1C 
27204 3c4 08 00 3E 63 
27208 3c5 06 1C 30 63 
2720c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
27210 3c7 30 18 00 3F 
27214 3c8 66 66 66 3E 
27218 3c9 36 66 66 66 
2721c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
27220 3cb 30 18 00 63 
27224 3cc 63 63 63 63 
27228 3cd 63 63 63 63 
2722c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27230 3cf 00 00 60 30 
27234 3d0 18 00 3B 6E 
27238 3d1 66 06 06 06 
2723c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
27240 3d3 66 33 00 63 
27244 3d4 63 63 63 63 
27248 3d5 63 63 63 63 
2724c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27250 3d7 00 00 60 30 
27254 3d8 18 00 63 63 
27258 3d9 63 63 63 63 
2725c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
27260 3db 30 18 00 66 
27264 3dc 66 66 66 3C 
27268 3dd 18 18 18 18 
2726c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
27270 3df 00 00 00 08 
27274 3e0 0C 0C 3F 0C 
27278 3e1 0C 0C 0C 6C 
2727c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
27280 3e3 30 18 00 00 
27284 3e4 00 00 00 00 
27288 3e5 00 00 00 00 
2728c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27290 3e7 00 00 00 00 
27294 3e8 00 00 00 00 | 	byte	$00[8]
27298 3e9 7F 00 00 00 
2729c 3ea 00 00 00 00 
272a0 3eb 66 33 00 00 
272a4 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
272a8 3ed 00 00 00 00 
272ac 3ee 00 00 00 00 
272b0 3ef 00 00 00 00 
272b4 3f0 00 00 00 00 
272b8 3f1 00 00 00 00 
272bc 3f2 00          | 	byte	$00[21]
272bd 3f2 0C 06 3C 36 
272c1 3f3 1C 00 00 00 
272c5 3f4 00 00 00 00 
272c9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
272cd 3f6 00 00 00 63 
272d1 3f7 3E 00 00 00 
272d5 3f8 00 00 00 00 
272d9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
272dd 3fa 00 00 00 00 
272e1 3fb 3E 63 06 1C 
272e5 3fc 36 63 63 36 
272e9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
272ed 3fe 00 00 00 00 
272f1 3ff 00 00 00 00 | 	byte	$00[8]
272f5 400 18 00 7E 00 
272f9 401 18 00 00 00 
272fd 402 00 00 00 00 
27301 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27305 404 00 00 00 00 
27309 405 00 00 00 00 | 	byte	$00[8]
2730d 406 18 30 1E 00 
27311 407 00 00 1C 36 
27315 408 36 1C 00 00 
27319 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2731d 40a 00 00 00 00 
27321 40b 63 00 00 00 
27325 40c 00 00 00 00 
27329 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2732d 40e 00 00 00 18 
27331 40f 18 00 00 00 
27335 410 00 00 00 00 
27339 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2733d 412 00 00 00 00 
27341 413 00          | 	byte	$00[5]
27342 413 CC 66 33 00 
27346 414 33 33 33 33 
2734a 415 33 33 6E 00 
2734e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
27352 417 00 3F 66 66 
27356 418 66 3E 36 66 
2735a 419 66 66 6F 00 
2735e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
27362 41b 36 1C 08 00 
27366 41c 3B 6E 66 06 
2736a 41d 06 06 0F 00 
2736e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
27372 41f 00 00 00 7E 
27376 420 7E 7E 7E 7E 
2737a 421 7E 7E 00 00 
2737e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
27382 423 00 00 00 00 
27386 424 00 00 00 00 
2738a 425 00 00 00 00 
2738e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27390 427             | 'vga_font       file "vgafont.def"
27390 427 00 00 00 00 
      ...             
273c0 433 00 00 00 00 
273c4 434 00 00 00    | st_font        file "st4font.def"
273c7 434 FF FF 00 00 
273cb 435 00 00 00 00 
273cf 436 00 18 18 18 
273d3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
273d7 438 18 18 18 18 
273db 439 18 18 18 18 
273df 43a 18          | 	byte	$18[9]
273e0 43b 00 00 00 00 
273e4 43c 00 00 00    | 	byte	$00[7]
273e7 43c FF FF 18 18 
273eb 43d 18 18 18 18 
273ef 43e 18 18 18 18 
273f3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
273f7 440 FF FF 00 00 
273fb 441 00 00 00 00 
273ff 442 00 18 18 18 
27403 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27407 444 1F 1F 18 18 
2740b 445 18 18 18 18 
2740f 446 18 18 18 18 
27413 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27417 448 F8 F8 18 18 
2741b 449 18 18 18 18 
2741f 44a 18 00 00 00 
27423 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27427 44c 1F 1F 18 18 
2742b 44d 18 18 18 18 
2742f 44e 18 00 00 00 
27433 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27437 450 F8 F8 18 18 
2743b 451 18 18 18 18 
2743f 452 18 18 18 18 
27443 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27447 454 1F 1F 00 00 
2744b 455 00 00 00 00 
2744f 456 00 18 18 18 
27453 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27457 458 F8 F8 00 00 
2745b 459 00 00 00 00 
2745f 45a 00 18 18 18 
27463 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27467 45c FF FF 18 18 
2746b 45d 18 18 18 18 
2746f 45e 18 00 00 18 
27473 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
27477 460 66 7E 7E 66 
2747b 461 66 66 66 30 
2747f 462 18 00 00 7E 
27483 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
27487 464 3E 06 06 06 
2748b 465 06 7E 7E 18 
2748f 466 0C 30 18 3C 
27493 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
27497 468 06 06 06 66 
2749b 469 66 7E 3C 00 
2749f 46a 00 30 18 66 
274a3 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
274a7 46c 7E 7E 76 76 
274ab 46d 66 66 66 00 
274af 46e 00 30 18 7C 
274b3 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
274b7 470 1C 38 70 60 
274bb 471 60 7E 3E 00 
274bf 472 00 30 18 7E 
274c3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
274c7 474 18 0C 0C 06 
274cb 475 06 7E 7E 00 
274cf 476 00 18 18 00 
274d3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
274d7 478 18 18 0C 0C 
274db 479 06 7E 7E 00 
274df 47a 00 30 18 3C 
274e3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
274e7 47c 66 66 66 66 
274eb 47d 66          | 	byte	$66[5]
274ec 47e 7E 3C 00 00 
274f0 47f 00 00 06 06 
274f4 480 06 06 16 1E 
274f8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
274fc 482 7E 7E 00 00 
27500 483 00 00 00 00 
27504 484 00 3C 7C 60 
27508 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2750c 486 7E 7C 30 18 
27510 487 00 00 00 00 
27514 488 00 3C 7E 66 
27518 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2751c 48a 7E 7C 18 0C 
27520 48b 00 00 30 18 
27524 48c 00 3C 3E 06 
27528 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2752c 48e 7E 7C 00 00 
27530 48f 00 00 30 18 
27534 490 00 3E 7E 66 
27538 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2753c 492 66 66 00 00 
27540 493 00 00 30 18 
27544 494 00 7C 7E 06 
27548 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2754c 496 7E 3E 00 00 
27550 497 00 00 30 18 
27554 498 00 7E 7E 30 
27558 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2755c 49a 7E 7E 00 00 
27560 49b 00 00 18 18 
27564 49c 00 7E 7E 30 
27568 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2756c 49e 7E 7E 00 00 
27570 49f 00 00 30 18 
27574 4a0 00 3C 7E 66 
27578 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2757c 4a2 7E 3C 00 00 
27580 4a3 00 00 1C 1C 
27584 4a4 18 18 38 3C 
27588 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2758c 4a6 3C 3C 00 00 
27590 4a7 00 00 00 00 
27594 4a8 00 00 00 00 
27598 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2759c 4aa 00 00 00 00 
275a0 4ab 00 00       | 	byte	$00[6]
275a2 4ab 18 18 18 18 
275a6 4ac 18 18 18 18 | 	byte	$18[8]
275aa 4ad 00 00 18 18 
275ae 4ae 00 00 00 00 
275b2 4af 66 66 66 66 
275b6 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
275ba 4b1 00 00 00 00 
275be 4b2 00 00 00 00 
275c2 4b3 00          | 	byte	$00[9]
275c3 4b3 66 66 FF FF 
275c7 4b4 66 66 FF FF 
275cb 4b5 66 66 00 00 
275cf 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
275d3 4b7 7C 7E 06 06 
275d7 4b8 3E 7C 60 60 
275db 4b9 7E 3E 18 18 
275df 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
275e3 4bb 66 30 30 18 
275e7 4bc 18 0C 0C 66 
275eb 4bd 66 00 00 00 
275ef 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
275f3 4bf 66 66 3C 1C 
275f7 4c0 1C FC FE 66 
275fb 4c1 66 FE FC 00 
275ff 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
27603 4c3 18 18 18 18 
27607 4c4 00 00 00 00 
2760b 4c5 00 00 00 00 
2760f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
27613 4c7 18 1C 0C 0C 
27617 4c8 0C 0C 0C 0C 
2761b 4c9 1C 18 30 00 
2761f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
27623 4cb 18 38 30 30 
27627 4cc 30 30 30 30 
2762b 4cd 38 18 0C 00 
2762f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
27633 4cf 66 66 3C 3C 
27637 4d0 FF FF 3C 3C 
2763b 4d1 66 66 00 00 
2763f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
27643 4d3 00 18 18 18 
27647 4d4 7E 7E 18 18 
2764b 4d5 18 00 00 00 
2764f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27653 4d7 00 00 00 00 
27657 4d8 00 00       | 	byte	$00[6]
27659 4d9 18 18 18 18 
2765d 4da 18          | 	byte	$18[5]
2765e 4da 0C 04 00 00 
27662 4db 00 00 00 00 
27666 4dc 7E 7E 00 00 
2766a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2766e 4de 00 00 00 00 
27672 4df 00 00 00 00 
27676 4e0 00 00 00 00 
2767a 4e1 00          | 	byte	$00[13]
2767b 4e1 18 18 18 00 
2767f 4e2 00 00 00 60 
27683 4e3 60 60 30 30 
27687 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2768b 4e5 06 06 06 00 
2768f 4e6 00 00 00 3C 
27693 4e7 7E 66 66 66 
27697 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2769b 4e9 66 7E 3C 00 
2769f 4ea 00 00 00 18 
276a3 4eb 18 1C 1C 18 
276a7 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
276ab 4ed 18 7E 7E 00 
276af 4ee 00 00 00 3C 
276b3 4ef 7E 66 66 30 
276b7 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
276bb 4f1 0C 7E 7E 00 
276bf 4f2 00 00 00 7E 
276c3 4f3 7E 30 30 18 
276c7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
276cb 4f5 66 7E 3C 00 
276cf 4f6 00 00 00 30 
276d3 4f7 30 38 38 3C 
276d7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
276db 4f9 7E 30 30 00 
276df 4fa 00 00 00 7E 
276e3 4fb 7E 06 06 3E 
276e7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
276eb 4fd 66 7E 3C 00 
276ef 4fe 00 00 00 38 
276f3 4ff 3C 0E 06 06 
276f7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
276fb 501 66 7E 3C 00 
276ff 502 00 00 00 7E 
27703 503 7E 60 60 30 
27707 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2770b 505 0C 0C 0C 00 
2770f 506 00 00 00 3C 
27713 507 7E 66 66 3C 
27717 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2771b 509 66 7E 3C 00 
2771f 50a 00 00 00 3C 
27723 50b 7E 66 66 7E 
27727 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2772b 50d 70 3C 1C 00 
2772f 50e 00 00 00 00 
27733 50f 00 00 18 18 
27737 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2773b 511 18 18 18 00 
2773f 512 00 00 00 00 
27743 513 00 00 18 18 
27747 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2774b 515 18 18 18 0C 
2774f 516 04 00 00 00 
27753 517 70 38 1C 0E 
27757 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2775b 519 70 00 00 00 
2775f 51a 00 00 00 00 
27763 51b 00 00 7E 7E 
27767 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2776b 51d 00 00 00 00 
2776f 51e 00 00 00 00 | 	byte	$00[8]
27773 51f 0E 1C 38 70 
27777 520 E0 70 38 1C 
2777b 521 0E 00 00 00 
2777f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
27783 523 7E 66 66 30 
27787 524 30 18 18 18 
2778b 525 00 18 18 00 
2778f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
27793 527 7E 66 66 66 
27797 528 66 36 06 66 
2779b 529 66 7E 3C 00 
2779f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
277a3 52b 3C 7E 66 66 
277a7 52c 66 7E 7E 66 
277ab 52d 66 66 66 00 
277af 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
277b3 52f 7E 66 66 7E 
277b7 530 3E 66 66 66 
277bb 531 66 7E 3E 00 
277bf 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
277c3 533 7E 66 66 06 
277c7 534 06 06 06 66 
277cb 535 66 7E 3C 00 
277cf 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
277d3 537 7E 66 66 66 
277d7 538 66 66 66 66 
277db 539 66 7E 3E 00 
277df 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
277e3 53b 7E 06 06 3E 
277e7 53c 3E 06 06 06 
277eb 53d 06 7E 7E 00 
277ef 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
277f3 53f 7E 06 06 3E 
277f7 540 3E 06 06 06 
277fb 541 06 06 06 00 
277ff 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
27803 543 7E 06 06 76 
27807 544 76 66 66 66 
2780b 545 66 7E 3C 00 
2780f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
27813 547 66 66 66 7E 
27817 548 7E 66 66 66 
2781b 549 66 66 66 00 
2781f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
27823 54b 7E 18 18 18 
27827 54c 18 18 18 18 
2782b 54d 18 7E 7E 00 
2782f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
27833 54f 60 60 60 60 
27837 550 60 60 60    | 	byte	$60[7]
2783a 551 66 66 7E 3C 
2783e 552 00 00 00 00 
27842 553 66 66 36 36 
27846 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2784a 555 66 66 C6 C6 
2784e 556 00 00 00 00 
27852 557 06 06 06 06 
27856 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2785a 559 06 06 7E 7E 
2785e 55a 00 00 00 00 
27862 55b C6 C6 EE EE 
27866 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2786a 55d C6 C6 C6 C6 
2786e 55e 00 00 00 00 
27872 55f 66 66 66 6E 
27876 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2787a 561 76 66 66 66 
2787e 562 00 00 00 00 
27882 563 3C 7E 66 66 
27886 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2788a 565 66 66 7E 3C 
2788e 566 00 00 00 00 
27892 567 3E 7E 66 66 
27896 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2789a 569 06 06 06 06 
2789e 56a 00 00 00 00 
278a2 56b 3C 7E 66 66 
278a6 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
278aa 56d 66 56 3E 6C 
278ae 56e 00 00 00 00 
278b2 56f 3E 7E 66 66 
278b6 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
278ba 571 66 66 C6 C6 
278be 572 00 00 00 00 
278c2 573 7C 7E 06 06 
278c6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
278ca 575 60 60 7E 3E 
278ce 576 00 00 00 00 
278d2 577 7E 7E 18 18 
278d6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
278da 579 18 18 18 18 
278de 57a 00 00 00 00 
278e2 57b 66 66 66 66 
278e6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
278ea 57d 66 66 7E 3C 
278ee 57e 00 00 00 00 
278f2 57f 66 66 66 66 
278f6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
278fa 581 3C 3C 18 18 
278fe 582 00 00 00 00 
27902 583 C6 C6 C6 C6 
27906 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2790a 585 FE EE C6 82 
2790e 586 00 00 00 00 
27912 587 66 66 66 3C 
27916 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2791a 589 3C 66 66 66 
2791e 58a 00 00 00 00 
27922 58b 66 66 66 66 
27926 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2792a 58d 18 18 18 18 
2792e 58e 00 00 00 00 
27932 58f 7E 7E 30 30 
27936 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2793a 591 06 06 7E 7E 
2793e 592 00 00 00 00 
27942 593 3C 3C 0C 0C 
27946 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2794a 595 0C 0C 3C 3C 
2794e 596 00 00 00 00 
27952 597 06 06 0C 0C 
27956 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2795a 599 60 60 C0 C0 
2795e 59a 00 00 00 00 
27962 59b 3C 3C 30 30 
27966 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2796a 59d 30 30 3C 3C 
2796e 59e 00 00 00 00 
27972 59f 18 18 3C 3C 
27976 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2797a 5a1 00 00 00 00 
2797e 5a2 00 00 00 00 
27982 5a3 00 00 00 00 
27986 5a4 00 00 00 00 
2798a 5a5 00 00       | 	byte	$00[18]
2798c 5a6 FE FE 00 00 
27990 5a7 00 00 0C 0C 
27994 5a8 18 18 00 00 
27998 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2799c 5aa 00 00 00 00 
279a0 5ab 00 00 00 00 
279a4 5ac 00          | 	byte	$00[9]
279a5 5ac 3C 7C 60 7C 
279a9 5ad 7E 66 66 7E 
279ad 5ae 7C 00 00 00 
279b1 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
279b5 5b0 3E 7E 66 66 
279b9 5b1 66 66 66 7E 
279bd 5b2 3E 00 00 00 
279c1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
279c5 5b4 3C 3E 06 06 
279c9 5b5 06 06 06 7E 
279cd 5b6 7C 00 00 00 
279d1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
279d5 5b8 7C 7E 66 66 
279d9 5b9 66 66 66 7E 
279dd 5ba 7C 00 00 00 
279e1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
279e5 5bc 3C 7E 66 66 
279e9 5bd 7E 06 06 7E 
279ed 5be 7C 00 00 00 
279f1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
279f5 5c0 18 7E 7E 18 
279f9 5c1 18 18 18 18 
279fd 5c2 18 00 00 00 
27a01 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27a05 5c4 7C 7E 66 66 
27a09 5c5 66 66 7E 7C 
27a0d 5c6 60 7E 3E 00 
27a11 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
27a15 5c8 3E 7E 66 66 
27a19 5c9 66 66 66 66 
27a1d 5ca 66 00 00 00 
27a21 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
27a25 5cc 1C 1C 18 18 
27a29 5cd 18 18 18 3C 
27a2d 5ce 3C 00 00 00 
27a31 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
27a35 5d0 30 30 30 30 
27a39 5d1 30 30 30 30 
27a3d 5d2 30          | 	byte	$30[9]
27a3e 5d2 3E 1E 00 00 
27a42 5d3 06 06 06 36 
27a46 5d4 36 1E 1E 1E 
27a4a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
27a4e 5d6 00 00 00 00 
27a52 5d7 1C 1C 18 18 
27a56 5d8 18 18 18 18 
27a5a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
27a5e 5da 00 00 00 00 
27a62 5db 00 00 00    | 	byte	$00[7]
27a65 5dc 6C FE FE D6 
27a69 5dd D6 C6 C6 C6 
27a6d 5de C6 00 00 00 
27a71 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
27a75 5e0 3E 7E 66 66 
27a79 5e1 66 66 66 66 
27a7d 5e2 66 00 00 00 
27a81 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
27a85 5e4 3C 7E 66 66 
27a89 5e5 66 66 66 7E 
27a8d 5e6 3C 00 00 00 
27a91 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
27a95 5e8 3E 7E 66 66 
27a99 5e9 66 66 66 7E 
27a9d 5ea 3E 06 06 00 
27aa1 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
27aa5 5ec 7C 7E 66 66 
27aa9 5ed 66 66 66 7E 
27aad 5ee 7C 60 60 00 
27ab1 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
27ab5 5f0 3E 7E 66 06 
27ab9 5f1 06 06 06 06 
27abd 5f2 06 00 00 00 
27ac1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
27ac5 5f4 7C 7E 06 0E 
27ac9 5f5 3C 70 60 7E 
27acd 5f6 3E 00 00 00 
27ad1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
27ad5 5f8 7E 7E 18 18 
27ad9 5f9 18 18 18 78 
27add 5fa 70 00 00 00 
27ae1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
27ae5 5fc 66 66 66 66 
27ae9 5fd 66 66 66    | 	byte	$66[7]
27aec 5fe 7E 7C 00 00 
27af0 5ff 00 00 00 00 
27af4 600 00 66 66 66 
27af8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
27afc 602 18 18 00 00 
27b00 603 00 00 00 00 
27b04 604 00 C6 C6 D6 
27b08 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
27b0c 606 C6 82 00 00 
27b10 607 00 00 00 00 
27b14 608 00 66 66 3C 
27b18 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
27b1c 60a 66 66 00 00 
27b20 60b 00 00 00 00 
27b24 60c 00 66 66 66 
27b28 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
27b2c 60e 7C 60 7E 3E 
27b30 60f 00 00 00 00 
27b34 610 00 7E 7E 30 
27b38 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27b3c 612 7E 7E 00 00 
27b40 613 00 00 30 18 
27b44 614 18 18 18 0C 
27b48 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
27b4c 616 18 30 00 00 
27b50 617 00 00 18 18 
27b54 618 18 18 18 18 
27b58 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27b5c 61a 18 18 00 00 
27b60 61b 00 00 0C 18 
27b64 61c 18 18 18 30 
27b68 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
27b6c 61e 18 0C 00 00 
27b70 61f 00 00 6C 7E 
27b74 620 36 00 00 00 
27b78 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
27b7c 622 00 00 00 00 
27b80 623 00 00 00 00 
27b84 624 00          | 	byte	$00[9]
27b85 624 18 18 18 18 
27b89 625 18 18 00 00 
27b8d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
27b90 627             | 'amiga_font     file "amigafont.def"
27b90 627 00 6C FE FE 
27b94 628 7C 38 10 00 
27b98 629 18 18 18 F8 
27b9c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
27ba0 62b C0 C0 C0 C0 
27ba4 62c C0 C0 C0 C0 | 	byte	$c0[8]
27ba8 62d 18 18 18 1F 
27bac 62e 1F 00 00 00 
27bb0 62f 18 18 18 1F 
27bb4 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
27bb8 631 00 00 00 1F 
27bbc 632 1F 18 18 18 
27bc0 633 C0 E0 70 38 
27bc4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
27bc8 635 03 07 0E 1C 
27bcc 636 38 70 E0 C0 
27bd0 637 80 C0 E0 F0 
27bd4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
27bd8 639 00 00 00 00 
27bdc 63a F0 F0 F0 F0 
27be0 63b 01 03 07 0F 
27be4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
27be8 63d F0 F0 F0 F0 
27bec 63e 00 00 00 00 
27bf0 63f 0F 0F 0F 0F 
27bf4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
27bf8 641 FF FF 00 00 
27bfc 642 00 00 00 00 
27c00 643 00 00 00 00 
27c04 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
27c08 645 00 00 00 00 
27c0c 646 0F 0F 0F 0F 
27c10 647 00 38 38 EE 
27c14 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
27c18 649 00 00 00 F8 
27c1c 64a F8 18 18 18 
27c20 64b 00 00 00 FF 
27c24 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
27c28 64d 18 18 18 FF 
27c2c 64e FF 18 18 18 
27c30 64f 00 00 3C 7E 
27c34 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
27c38 651 00 00 00 00 
27c3c 652 FF FF FF FF 
27c40 653 03 03 03 03 
27c44 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
27c48 655 00 00 00 FF 
27c4c 656 FF 18 18 18 
27c50 657 18 18 18 FF 
27c54 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
27c58 659 0F 0F 0F 0F 
27c5c 65a 0F 0F 0F 0F | 	byte	$0f[8]
27c60 65b 18 18 18 F8 
27c64 65c F8 00 00 00 
27c68 65d 1E 06 1E 06 
27c6c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
27c70 65f 00 18 3C 7E 
27c74 660 18 18 18 00 
27c78 661 00 18 18 18 
27c7c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
27c80 663 00 18 0C 7E 
27c84 664 0C 18 00 00 
27c88 665 00 18 30 7E 
27c8c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
27c90 667 00 00 00 00 
27c94 668 00 00 00 00 
27c98 669 00          | 	byte	$00[9]
27c99 669 18 18 18 18 
27c9d 66a 00 18 00 00 
27ca1 66b 66 66 66 00 
27ca5 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
27ca9 66d 66 FF 66 66 
27cad 66e FF 66 00 18 
27cb1 66f 7C 06 3C 60 
27cb5 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
27cb9 671 66 36 18 0C 
27cbd 672 66 62 00 38 
27cc1 673 6C 38 1C F6 
27cc5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
27cc9 675 18 18 18 00 
27ccd 676 00 00 00 00 
27cd1 677 70 38 18 18 
27cd5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
27cd9 679 0E 1C 18 18 
27cdd 67a 1C 0E 00 00 
27ce1 67b 66 3C FF 3C 
27ce5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
27ce9 67d 18 18 7E 18 
27ced 67e 18 00 00 00 
27cf1 67f 00 00 00 00 
27cf5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
27cf9 681 00 00 7E 00 
27cfd 682 00 00 00 00 
27d01 683 00 00 00 00 
27d05 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
27d09 685 60 30 18 0C 
27d0d 686 06 02 00 00 
27d11 687 3C 66 76 6E 
27d15 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
27d19 689 18 1C 18 18 
27d1d 68a 18 7E 00 00 
27d21 68b 3C 66 30 18 
27d25 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
27d29 68d 7E 30 18 30 
27d2d 68e 66 3C 00 00 
27d31 68f 30 38 3C 36 
27d35 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
27d39 691 7E 06 3E 60 
27d3d 692 66 3C 00 00 
27d41 693 3C 06 3E 66 
27d45 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
27d49 695 7E 60 30 18 
27d4d 696 0C 0C 00 00 
27d51 697 3C 66 3C 66 
27d55 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
27d59 699 3C 66 7C 60 
27d5d 69a 30 1C 00 00 
27d61 69b 00 18 18 00 
27d65 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
27d69 69d 00 18 18 00 
27d6d 69e 18 18 0C 60 
27d71 69f 30 18 0C 18 
27d75 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
27d79 6a1 00 7E 00 00 
27d7d 6a2 7E 00 00 06 
27d81 6a3 0C 18 30 18 
27d85 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
27d89 6a5 3C 66 30 18 
27d8d 6a6 00 18 00 00 
27d91 6a7 3C 66 76 76 
27d95 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
27d99 6a9 18 3C 66 66 
27d9d 6aa 7E 66 00 00 
27da1 6ab 3E 66 3E 66 
27da5 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
27da9 6ad 3C 66 06 06 
27dad 6ae 66 3C 00 00 
27db1 6af 1E 36 66 66 
27db5 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
27db9 6b1 7E 06 3E 06 
27dbd 6b2 06 7E 00 00 
27dc1 6b3 7E 06 3E 06 
27dc5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
27dc9 6b5 7C 06 06 76 
27dcd 6b6 66 7C 00 00 
27dd1 6b7 66 66 7E 66 
27dd5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
27dd9 6b9 7E 18 18 18 
27ddd 6ba 18 7E 00 00 
27de1 6bb 60 60 60 60 
27de5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
27de9 6bd 66 36 1E 1E 
27ded 6be 36 66 00 00 
27df1 6bf 06 06 06 06 
27df5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
27df9 6c1 C6 EE FE D6 
27dfd 6c2 C6 C6 00 00 
27e01 6c3 66 6E 7E 7E 
27e05 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
27e09 6c5 3C 66 66 66 
27e0d 6c6 66 3C 00 00 
27e11 6c7 3E 66 66 3E 
27e15 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
27e19 6c9 3C 66 66 66 
27e1d 6ca 36 6C 00 00 
27e21 6cb 3E 66 66 3E 
27e25 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
27e29 6cd 3C 06 3C 60 
27e2d 6ce 60 3C 00 00 
27e31 6cf 7E 18 18 18 
27e35 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
27e39 6d1 66 66 66 66 
27e3d 6d2 66          | 	byte	$66[5]
27e3e 6d2 7E 00 00 66 
27e42 6d3 66 66 66 3C 
27e46 6d4 18 00 00 C6 
27e4a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
27e4e 6d6 C6 00 00 66 
27e52 6d7 66 3C 3C 66 
27e56 6d8 66 00 00 66 
27e5a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
27e5e 6da 18 00 00 7E 
27e62 6db 30 18 0C 06 
27e66 6dc 7E 00 00 78 
27e6a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
27e6e 6de 78 00 00 02 
27e72 6df 06 0C 18 30 
27e76 6e0 60 00 00 1E 
27e7a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
27e7e 6e2 1E 00 00 10 
27e82 6e3 38 6C C6 00 
27e86 6e4 00 00 00 00 
27e8a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
27e8e 6e6 FF 00 00 18 
27e92 6e7 3C 7E 7E 3C 
27e96 6e8 18 00 00 00 
27e9a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
27e9e 6ea 7C 00 00 06 
27ea2 6eb 06 3E 66 66 
27ea6 6ec 3E 00 00 00 
27eaa 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
27eae 6ee 3C 00 00 60 
27eb2 6ef 60 7C 66 66 
27eb6 6f0 7C 00 00 00 
27eba 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
27ebe 6f2 3C 00 00 70 
27ec2 6f3 18 7C 18 18 
27ec6 6f4 18 00 00 00 
27eca 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
27ece 6f6 60 3E 00 06 
27ed2 6f7 06 3E 66 66 
27ed6 6f8 66 00 00 18 
27eda 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
27ede 6fa 3C 00 00 60 
27ee2 6fb 00 60 60 60 
27ee6 6fc 60 3C 00 06 
27eea 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
27eee 6fe 66 00 00 1C 
27ef2 6ff 18 18 18 18 
27ef6 700 3C 00 00 00 
27efa 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
27efe 702 C6 00 00 00 
27f02 703 3E 66 66 66 
27f06 704 66 00 00 00 
27f0a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
27f0e 706 3C 00 00 00 
27f12 707 3E 66 66 3E 
27f16 708 06 06 00 00 
27f1a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
27f1e 70a 60 60 00 00 
27f22 70b 3E 66 06 06 
27f26 70c 06 00 00 00 
27f2a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
27f2e 70e 3E 00 00 18 
27f32 70f 7E 18 18 18 
27f36 710 70 00 00 00 
27f3a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
27f3e 712 7C 00 00 00 
27f42 713 66 66 66 3C 
27f46 714 18 00 00 00 
27f4a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
27f4e 716 6C 00 00 00 
27f52 717 66 3C 18 3C 
27f56 718 66 00 00 00 
27f5a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
27f5e 71a 30 1E 00 00 
27f62 71b 7E 30 18 0C 
27f66 71c 7E 00 00 18 
27f6a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
27f6e 71e 3C 00 18 18 
27f72 71f 18 18 18 18 
27f76 720 18 18 00 7E 
27f7a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
27f7e 722 60 00 10 18 
27f82 723 1C 1E 1C 18 
27f86 724 10 00 08 18 
27f8a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
27f8e 726 08 00       | 	byte	$08, $00
27f90 727 00 00 00 00 
27f94 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
27f95 728 80 00 00 00 
27f99 729 00 80 00 00 
27f9d 72a 80 80 00 00 
27fa1 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
27fa5 72c 80 00 80 00 
27fa9 72d 00 40 80 00 
27fad 72e AA AA AA 00 
27fb1 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
27fb5 730 FF 00 00 00 
27fb9 731 00 FF 00 00 
27fbd 732 FF FF 00 00 
27fc1 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
27fc5 734 FF 00 FF 00 
27fc9 735 00 FF FF 00 
27fcd 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
27fd0 737 00 00 00 00 
27fd4 738 00          | ataripalette   file "ataripalettep2.def"
27fd5 738 11 11 11 00 
27fd9 739 22 22 22 00 
27fdd 73a 33 33 33 00 
27fe1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
27fe5 73c 55 55 55 00 
27fe9 73d 66 66 66 00 
27fed 73e 77 77 77 00 
27ff1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
27ff5 740 99 99 99 00 
27ff9 741 AA AA AA 00 
27ffd 742 BB BB BB 00 
28001 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
28005 744 DD DD DD 00 
28009 745 EE EE EE 00 
2800d 746 FF FF FF 00 
28011 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
28015 748 00 14 40 00 
28019 749 00 1E 60 00 
2801d 74a 00 28 80 00 
28021 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
28025 74c 00 3C BF 00 
28029 74d 00 46 DF 00 
2802d 74e 00 50 FF 00 
28031 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
28035 750 39 77 FF 00 
28039 751 55 8A FF 00 
2803d 752 71 9E FF 00 
28041 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
28045 754 AA C5 FF 00 
28049 755 C6 D8 FF 00 
2804d 756 E3 EC FF 00 
28051 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
28055 758 00 00 40 00 
28059 759 00 00 60 00 
2805d 75a 00 00 80 00 
28061 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
28065 75c 00 00 BF 00 
28069 75d 00 00 DF 00 
2806d 75e 00 00 FF 00 
28071 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
28075 760 39 39 FF 00 
28079 761 55 55 FF 00 
2807d 762 71 71 FF 00 
28081 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
28085 764 AA AA FF 00 
28089 765 C6 C6 FF 00 
2808d 766 E3 E3 FF 00 
28091 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
28095 768 20 00 40 00 
28099 769 30 00 60 00 
2809d 76a 40 00 80 00 
280a1 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
280a5 76c 60 00 BF 00 
280a9 76d 70 00 DF 00 
280ad 76e 80 00 FF 00 
280b1 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
280b5 770 9C 39 FF 00 
280b9 771 AA 55 FF 00 
280bd 772 B8 71 FF 00 
280c1 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
280c5 774 D5 AA FF 00 
280c9 775 E3 C6 FF 00 
280cd 776 F1 E3 FF 00 
280d1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
280d5 778 40 00 40 00 
280d9 779 60 00 60 00 
280dd 77a 80 00 80 00 
280e1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
280e5 77c BF 00 BF 00 
280e9 77d DF 00 DF 00 
280ed 77e FF 00 FF 00 
280f1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
280f5 780 FF 39 FF 00 
280f9 781 FF 55 FF 00 
280fd 782 FF 71 FF 00 
28101 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
28105 784 FF AA FF 00 
28109 785 FF C6 FF 00 
2810d 786 FF E3 FF 00 
28111 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
28115 788 40 00 20 00 
28119 789 60 00 30 00 
2811d 78a 80 00 40 00 
28121 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
28125 78c BF 00 60 00 
28129 78d DF 00 70 00 
2812d 78e FF 00 80 00 
28131 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
28135 790 FF 39 9C 00 
28139 791 FF 55 AA 00 
2813d 792 FF 71 B8 00 
28141 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
28145 794 FF AA D5 00 
28149 795 FF C6 E3 00 
2814d 796 FF E3 F1 00 
28151 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
28155 798 40 00 00 00 
28159 799 60 00 00 00 
2815d 79a 80 00 00 00 
28161 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
28165 79c BF 00 00 00 
28169 79d DF 00 00 00 
2816d 79e FF 00 00 00 
28171 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
28175 7a0 FF 39 39 00 
28179 7a1 FF 55 55 00 
2817d 7a2 FF 71 71 00 
28181 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
28185 7a4 FF AA AA 00 
28189 7a5 FF C6 C6 00 
2818d 7a6 FF E3 E3 00 
28191 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
28195 7a8 40 10 00 00 
28199 7a9 60 18 00 00 
2819d 7aa 80 20 00 00 
281a1 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
281a5 7ac BF 30 00 00 
281a9 7ad DF 38 00 00 
281ad 7ae FF 40 00 00 
281b1 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
281b5 7b0 FF 6A 39 00 
281b9 7b1 FF 80 55 00 
281bd 7b2 FF 95 71 00 
281c1 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
281c5 7b4 FF BF AA 00 
281c9 7b5 FF D5 C6 00 
281cd 7b6 FF EA E3 00 
281d1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
281d5 7b8 40 20 00 00 
281d9 7b9 60 30 00 00 
281dd 7ba 80 40 00 00 
281e1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
281e5 7bc BF 60 00 00 
281e9 7bd DF 70 00 00 
281ed 7be FF 80 00 00 
281f1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
281f5 7c0 FF 9C 39 00 
281f9 7c1 FF AA 55 00 
281fd 7c2 FF B8 71 00 
28201 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
28205 7c4 FF D5 AA 00 
28209 7c5 FF E3 C6 00 
2820d 7c6 FF F1 E3 00 
28211 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
28215 7c8 40 30 00 00 
28219 7c9 60 48 00 00 
2821d 7ca 80 60 00 00 
28221 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
28225 7cc BF 90 00 00 
28229 7cd DF A8 00 00 
2822d 7ce FF C0 00 00 
28231 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
28235 7d0 FF CE 39 00 
28239 7d1 FF D5 55 00 
2823d 7d2 FF DC 71 00 
28241 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
28245 7d4 FF EA AA 00 
28249 7d5 FF F1 C6 00 
2824d 7d6 FF F8 E3 00 
28251 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
28255 7d8 30 40 00 00 
28259 7d9 48 60 00 00 
2825d 7da 60 80 00 00 
28261 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
28265 7dc 90 BF 00 00 
28269 7dd A8 DF 00 00 
2826d 7de C0 FF 00 00 
28271 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
28275 7e0 CE FF 39 00 
28279 7e1 D5 FF 55 00 
2827d 7e2 DC FF 71 00 
28281 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
28285 7e4 EA FF AA 00 
28289 7e5 F1 FF C6 00 
2828d 7e6 F8 FF E3 00 
28291 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
28295 7e8 00 40 00 00 
28299 7e9 00 60 00 00 
2829d 7ea 00 80 00 00 
282a1 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
282a5 7ec 00 BF 00 00 
282a9 7ed 00 DF 00 00 
282ad 7ee 00 FF 00 00 
282b1 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
282b5 7f0 39 FF 39 00 
282b9 7f1 55 FF 55 00 
282bd 7f2 71 FF 71 00 
282c1 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
282c5 7f4 AA FF AA 00 
282c9 7f5 C6 FF C6 00 
282cd 7f6 E3 FF E3 00 
282d1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
282d5 7f8 00 40 14 00 
282d9 7f9 00 60 1E 00 
282dd 7fa 00 80 28 00 
282e1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
282e5 7fc 00 BF 3C 00 
282e9 7fd 00 DF 46 00 
282ed 7fe 00 FF 50 00 
282f1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
282f5 800 39 FF 77 00 
282f9 801 55 FF 8A 00 
282fd 802 71 FF 9E 00 
28301 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
28305 804 AA FF C5 00 
28309 805 C6 FF D8 00 
2830d 806 E3 FF EC 00 
28311 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
28315 808 00 40 28 00 
28319 809 00 60 3C 00 
2831d 80a 00 80 50 00 
28321 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
28325 80c 00 BF 78 00 
28329 80d 00 DF 8C 00 
2832d 80e 00 FF A0 00 
28331 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
28335 810 39 FF B5 00 
28339 811 55 FF C0 00 
2833d 812 71 FF CA 00 
28341 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
28345 814 AA FF DF 00 
28349 815 C6 FF EA 00 
2834d 816 E3 FF F4 00 
28351 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
28355 818 00 40 40 00 
28359 819 00 60 60 00 
2835d 81a 00 80 80 00 
28361 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
28365 81c 00 BF BF 00 
28369 81d 00 DF DF 00 
2836d 81e 00 FF FF 00 
28371 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
28375 820 39 FF FF 00 
28379 821 55 FF FF 00 
2837d 822 71 FF FF 00 
28381 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
28385 824 AA FF FF 00 
28389 825 C6 FF FF 00 
2838d 826 E3 FF FF 00 
28391 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
28395 828 00 28 40 00 
28399 829 00 3C 60 00 
2839d 82a 00 50 80 00 
283a1 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
283a5 82c 00 78 BF 00 
283a9 82d 00 8C DF 00 
283ad 82e 00 A0 FF 00 
283b1 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
283b5 830 39 B5 FF 00 
283b9 831 55 C0 FF 00 
283bd 832 71 CA FF 00 
283c1 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
283c5 834 AA DF FF 00 
283c9 835 C6 EA FF 00 
283cd 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
283d0 837             | 
283d0 837             | '**********************************************************************************
283d0 837             | '
283d0 837             | '        Timings and colors definitions
283d0 837             | '
283d0 837             | '**********************************************************************************
283d0 837             | 
283d0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
283d0 837 10 00 00 00 
283d4 838 50 00 00 00 
283d8 839 0C 00 00 00 
283dc 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
283e0 83b 08 00 00 00 
283e4 83c 04 00 00 00 
283e8 83d 08 00 00 00 
283ec 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
283f0 83f 40 02 00 00 
283f4 840 6A 8C 15 14 
283f8 841 FB 06 B7 01 
283fc 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
28400 843 00 00 00 00 
28404 844 C0 00 00 00 
28408 845 00 00 00 00 
2840c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28410 847 00 75 C7 97 
28414 848 27 47 F6 0A 
28418 849 05 79 CB 9B 
2841c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
28420 84b             | 
28420 84b             | ''--------  Initialization  ----------------------------------------------------------------
28420 84b             | 
28420 84b 28 0C 64 FD | hdmi            setq    #6
28424 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
28428 84d 28 10 64 FD |                 setq    #8
2842c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
28430 84f             | 
28430 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
28434 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
28438 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2843c 852 D6 C6 01 F1 |                 add     t1,hbase
28440 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
28444 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
28448 855 7B 0B 80 5F 
2844c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
28450 857 66 66 86 FF 
28454 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
28458 859             | '
28458 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2845c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
28460 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
28464 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
28468 85d             | 
28468 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2846c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
28470 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
28474 860             | 
28474 860             | ''--------  frame rendering main loop  ---------------------------------------------------
28474 860             | 
28474 860 28 06 64 FD | p101            setq 	#3
28478 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2847c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
28480 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
28484 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
28488 865 00 A0 05 F6 |                 mov     dlinum, #0
2848c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
28490 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
28494 868             | 
28494 868             | 
28494 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
28498 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2849c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
284a0 86b             |                 
284a0 86b             | 
284a0 86b             | 
284a0 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
284a0 86b             |   
284a0 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
284a4 86c 29 FE 65 3D |          if_nc  setq2   #255
284a8 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
284ac 86e             | 
284ac 86e             | '' -----   up porch (before the picture)
284ac 86e             | 
284ac 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
284b0 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
284b4 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
284b8 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
284bc 872             |  
284bc 872             |    
284bc 872             |  
284bc 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
284c0 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
284c4 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
284c8 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
284cc 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
284d0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
284d4 878             | 
284d4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
284d8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
284dc 87a 48 00 B0 FD | 		call    #dli
284e0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
284e4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
284e8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
284ec 87e             |                 	
284ec 87e             |                 
284ec 87e             | 
284ec 87e             |  
284ec 87e             | '' ------- the main screen drawing starts here
284ec 87e             | 
284ec 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
284f0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
284f4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
284f8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
284fc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
28500 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
28504 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
28508 885             |               
28508 885             | 
28508 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2850c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
28510 887             | 
28510 887             | ' ---------------- All visible lines displayed now, start vblank  
28510 887             | 
28510 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
28514 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
28518 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2851c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
28520 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
28524 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
28528 88d             | 
28528 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
28528 88d             | 
28528 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
28528 88d             | 
28528 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2852c 88e             | 
2852c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
28530 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
28534 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
28538 891             | 
28538 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2853c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
28540 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
28544 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
28548 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2854c 896             | 
2854c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
28550 897 DD C6 41 F8 |                 getnib  t1,dl,#0
28554 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
28558 899 70 00 90 AD |     if_z        jmp     #preload
2855c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
28560 89b 94 00 90 AD |     if_z        jmp     #preload2
28564 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
28568 89d 0C 00 90 AD |     if_z        jmp     #p390
2856c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
28570 89f 28 00 90 AD |     if_z        jmp     #p391  
28574 8a0             | 
28574 8a0 2D 00 64 FD | p308            ret
28578 8a1             |    
28578 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2857c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
28580 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
28584 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
28588 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2858c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
28590 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
28594 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
28598 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2859c 8aa             |  
2859c 8aa             | '' --------  Reload palette. To do 
2859c 8aa             | 
2859c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
285a0 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
285a4 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
285a8 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
285ac 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
285b0 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
285b4 8b0 70 FF 9F FD |         	jmp     #dli                
285b8 8b1             |       
285b8 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
285b8 8b1             | 
285b8 8b1             | 
285b8 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
285b8 8b1             | 
285b8 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
285bc 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
285c0 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
285c4 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
285c8 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
285cc 8b6             |         
285cc 8b6             | '' -------------- Preload a line from PSRAM        
285cc 8b6             |         
285cc 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
285d0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
285d4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
285d8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
285dc 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
285e0 8bb             | 
285e0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
285e4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
285e8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
285ec 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
285f0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
285f4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
285f8 8c1             |  
285f8 8c1             |  
285f8 8c1             | preload2      '  incmod  dlinum,#3
285f8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
285fc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
28600 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
28604 8c4 28 02 64 FD |                 setq	#1
28608 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2860c 8c6             |                 
2860c 8c6             | 
2860c 8c6             | '' -------------- Draw sprites
2860c 8c6             | 
2860c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
28610 8c7 10 5C 0E F5 | 		and t8,#16 wz
28614 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
28618 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2861c 8ca             | 		
2861c 8ca             | 
2861c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
28620 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
28624 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
28628 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2862c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
28630 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
28634 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
28638 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2863c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
28640 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
28644 8d4 01 52 86 F1 |                 sub     sprite_h,#1
28648 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2864c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
28650 8d7             | 
28650 8d7             | 
28650 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
28654 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
28658 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2865c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
28660 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
28664 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
28668 8dd 00 5E 06 F6 |                 mov 	t9,#0
2866c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
28670 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
28674 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
28678 8e1             |      
28678 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2867c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
28680 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
28684 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
28688 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2868c 8e6             |                 
2868c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
28690 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
28694 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
28698 8e9             |   		
28698 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2869c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
286a0 8eb             | 
286a0 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
286a4 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
286a8 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
286ac 8ee             |  
286ac 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
286b0 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
286b4 8f0 10 00 90 CD |      if_c 	jmp     #p899		
286b8 8f1             | 	
286b8 8f1             | 	
286b8 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
286bc 8f2 28 CD 01 F1 | 		add	t4,sprite_w
286c0 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
286c4 8f4             | 
286c4 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
286c8 8f5             | 
286c8 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
286cc 8f6 01 58 86 F1 | 	 	sub     t6,#1
286d0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
286d4 8f8             | 
286d4 8f8 28 58 62 FD |                 setq   	t6
286d8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
286dc 8fa 28 5D 02 F6 |                 mov t8,sprite_w
286e0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
286e4 8fc 24 00 90 AD |         if_z    jmp #p898
286e8 8fd             |          
286e8 8fd             |         
286e8 8fd 70 5F 06 F6 |                 mov  t9,#368
286ec 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
286f0 8ff             | 
286f0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
286f4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
286f8 901 FF FF 7F FF 
286fc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
28700 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
28704 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
28708 905 2D 01 00 F5 |                 and 0-0, t7
2870c 906             |                
2870c 906             | 
2870c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
28710 907 E5 E0 7A FA |                 wmlong 368,t3				
28714 908             |                 
28714 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
28718 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2871c 90a 2D 00 64 FD |                 ret
28720 90b             | 	
28720 90b             | 	
28720 90b             |                
28720 90b             |  
28720 90b             | '' -------------- Graphics line ------------------------------------------------------------
28720 90b             |  
28720 90b             | 
28720 90b             | '' consts and vars
28720 90b             | 
28720 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
28724 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
28728 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2872c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
28730 90f             | 
28730 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
28734 910             | 
28734 910             | '------ these longs will be set by setmode function
28734 910             | 
28734 910 00 00 00 00 | m_bs            long    0        'blanks before sync
28738 911 00 00 00 00 | m_sn            long    0        'sync
2873c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
28740 913 00 00 00 00 | m_vi            long    0        'visible pixels #
28744 914             | 'm_border        long    0        'left/right borders
28744 914 00 00 00 00 | i_upporch       long    0        'up porch lines
28748 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2874c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
28750 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
28754 918 00 00 00 00 | i_totalvis      long    0
28758 919             | 
28758 919             | '-------------------------------------
28758 919             |  
28758 919 00 00 00 00 | linenum         long    0
2875c 91a 00 00 00 00 | frames          long    0
28760 91b 00 00 00 00 | dlinum long 0
28764 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
28768 91d             | 
28768 91d 00 00 00 00 | vblankptr       long    0
2876c 91e 00 00 00 00 | modeptr         long    0
28770 91f 00 00 00 00 | paletteptr      long    0
28774 920 00 00 00 00 | dlptr           long    0
28778 921 01 00 00 00 | hbase           long    1
2877c 922 00 00 00 00 | mailbox         long    0
28780 923 00 00 00 00 | spriteptr          long 0
28784 924             | 
28784 924 00 00 00 00 | cmd             long    0
28788 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2878c 926 00 04 00 00 | buf2            long    1024
28790 927 01 00 00 00 | dlptr2          long    1
28794 928 01 00 00 00 | dl              long    1
28798 929             | 
28798 929 00 00 00 00 | buf1c long 0
2879c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
287a0 92b 01 00 00 00 | framebuf2       long    1
287a4 92c 01 00 00 00 | hsync0          long    1
287a8 92d 01 00 00 00 | hsync1          long    1
287ac 92e             | 
287ac 92e 01 00 00 00 | t1              long    1
287b0 92f 00 00 00 00 | t2 long 0
287b4 930 00 00 00 00 | t3 long 0
287b8 931 00 00 00 00 | t4 long 0
287bc 932             | 
287bc 932 00 00 00 00 | rcnt            long    0  'dl repeat count
287c0 933 00 00 00 00 | rcnt2           long    0
287c4 934 00 00 00 00 | rcnt2a          long    0
287c8 935 00 00 00 00 | roffset         long    0
287cc 936 00 00 00 00 | rdl             long    0  'dl repeat line
287d0 937 00 00 00 00 | dlc             long    0  'dl command
287d4 938             | 
287d4 938 FF FF FF FF | affffffff       long    $ffffffff
287d8 939 00 00 00 00 | sprite1pointer long 0
287dc 93a 00 00 00 00 | sprite1xy      long 0
287e0 93b 00 00 00 00 | sprite1wh      long 0
287e4 93c 00 00 00 00 | sprite2pointer long 0
287e8 93d 00 00 00 00 | sprite2xy      long 0
287ec 93e 00 00 00 00 | sprite2wh      long 0
287f0 93f 00 00 00 00 | sprite3pointer long 0
287f4 940 00 00 00 00 | sprite3xy      long 0
287f8 941 00 00 00 00 | sprite3wh      long 0
287fc 942 00 00 00 00 | sprite4pointer long 0
28800 943 00 00 00 00 | sprite4xy      long 0
28804 944 00 00 00 00 | sprite4wh      long 0
28808 945 00 00 00 00 | sprite5pointer long 0
2880c 946 00 00 00 00 | sprite5xy      long 0
28810 947 00 00 00 00 | sprite5wh      long 0
28814 948 00 00 00 00 | sprite6pointer long 0
28818 949 00 00 00 00 | sprite6xy      long 0
2881c 94a 00 00 00 00 | sprite6wh      long 0
28820 94b 00 00 00 00 | sprite7pointer long 0
28824 94c 00 00 00 00 | sprite7xy      long 0
28828 94d 00 00 00 00 | sprite7wh      long 0
2882c 94e 00 00 00 00 | sprite8pointer long 0
28830 94f 00 00 00 00 | sprite8xy      long 0
28834 950 00 00 00 00 | sprite8wh      long 0
28838 951 00 00 00 00 | sprite9pointer long 0
2883c 952 00 00 00 00 | sprite9xy      long 0
28840 953 00 00 00 00 | sprite9wh      long 0
28844 954 00 00 00 00 | sprite10pointer long 0
28848 955 00 00 00 00 | sprite10xy      long 0
2884c 956 00 00 00 00 | sprite10wh      long 0
28850 957 00 00 00 00 | sprite11pointer long 0
28854 958 00 00 00 00 | sprite11xy      long 0
28858 959 00 00 00 00 | sprite11wh      long 0
2885c 95a 00 00 00 00 | sprite12pointer long 0
28860 95b 00 00 00 00 | sprite12xy      long 0
28864 95c 00 00 00 00 | sprite12wh      long 0
28868 95d 00 00 00 00 | sprite13pointer long 0
2886c 95e 00 00 00 00 | sprite13xy      long 0
28870 95f 00 00 00 00 | sprite13wh      long 0
28874 960 00 00 00 00 | sprite14pointer long 0
28878 961 00 00 00 00 | sprite14xy      long 0
2887c 962 00 00 00 00 | sprite14wh      long 0
28880 963 00 00 00 00 | sprite15pointer long 0
28884 964 00 00 00 00 | sprite15xy      long 0
28888 965 00 00 00 00 | sprite15wh      long 0
2888c 966 00 00 00 00 | sprite16pointer long 0
28890 967 00 00 00 00 | sprite16xy      long 0
28894 968 00 00 00 00 | sprite16wh      long 0
28898 969 00 00 00 00 | sprite17pointer long 0
2889c 96a 00 00 00 00 | sprite17xy      long 0
288a0 96b 00 00 00 00 | sprite17wh      long 0
288a4 96c 00 00 00 00 | sprite18pointer long 0
288a8 96d 00 00 00 00 | sprite18xy      long 0
288ac 96e 00 00 00 00 | sprite18wh      long 0
288b0 96f 00 00 00 00 | spritenum long 0
288b4 970             | 
288b4 970 00 00 00 00 | spriteline long 0
288b8 971 84 03 00 00 | sprite_x long 900
288bc 972 00 00 00 00 | sprite_y long 0
288c0 973 10 00 00 00 | sprite_w long 16
288c4 974 40 00 00 00 | sprite_h long 64
288c8 975 00 00 00 00 | l2 long 0
288cc 976 00 00 00 00 | t5 long 0
288d0 977 00 00 00 00 | t6 long 0
288d4 978 00 00 00 00 | t7 long 0
288d8 979 00 00 00 00 | t8 long 0
288dc 97a 00 00 00 00 | t9 long 0
288e0 97b 00 00 00 00 | preloadaddr long 0
288e4 97c 00 00 00 00 | preloadlineaddr long 0
288e8 97d 00 04 00 00 | a1024 long 1024
288ec 97e             | 
288ec 97e E0 03 00 00 | aa long 992
288f0 97f FF 03 00 00 | a1023 long 1023
288f4 980 00 10 00 00 | a4096 long 4096
288f8 981             |  fit 368
288f8 981             | _psram_spin2_dat_
288f8 981 00 00 00 00 
      ...             
289f0 9bf 00 00 00 00 
289f4 9c0 00 00 00 00 |     listdata long 0[8*8]
289f8 9c1             |             orgh
289f8                 | 
289f8                 | ' driver state
289f8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
289fc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
28a00                 | 
28a00                 | ' delay profile
28a00     07 00 00 00 
28a04     00 CF 7B 05 
28a08     80 D1 F0 08 
28a0c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
28a10     80 C4 60 0F 
28a14     80 39 7A 12 
28a18     40 2D D9 13 
28a1c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
28a20                 | 
28a20                 | ' data to be passed to driver when starting it
28a20                 | startupData
28a20     00 00 00 00 |     long    0           ' current frequency
28a24     00 00 00 00 |     long    FLAGS       ' optional flags for driver
28a28     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
28a2c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
28a30     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
28a34     40 8A 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
28a38     C0 8A 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
28a3c     E0 8A 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
28a40                 | 
28a40                 | ' data for memory
28a40                 | deviceData
28a40                 |     ' 16 bank parameters follow (16MB per bank)
28a40     00 00 00 00 
      ...             
28a78     00 00 00 00 
28a7c     00 00 00 00 |     long    0[16]                               ' banks 0-15
28a80                 |     ' 16 banks of pin parameters follow
28a80     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
28a84     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
28a88     FF FF FF FF 
      ...             
28ab8     FF FF FF FF 
28abc     FF FF FF FF |     long    -1[14]                              ' banks 2-15
28ac0                 | 
28ac0                 | ' data for COG polling
28ac0                 | qosData 
28ac0     00 00 FF FF 
28ac4     00 00 FF FF 
28ac8     00 00 FF FF 
28acc     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
28ad0     00 00 FF FF 
28ad4     00 00 FF FF 
28ad8     00 00 FF FF 
28adc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
28ae0                 |     
28ae0                 | ' mailbox storage
28ae0                 | 
28ae0                 | mailboxes
28ae0     00 00 00 00 
      ...             
28b38     00 00 00 00 
28b3c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
28b40                 | 	alignl
28b40                 | _psram16drv_spin2_dat_
28b40                 |                             orgh
28b40     00 00 00 00 
      ...             
28b58     00 00 00 00 
28b5c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
28b60                 | 
28b60                 | driver_start
28b60                 |                             org
28b60 000             | '..................................................................................................
28b60 000             | ' Memory layout for COG RAM once operational:
28b60 000             | '
28b60 000             | '  COG RAM address      Usage
28b60 000             | '  ---------------      ----
28b60 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
28b60 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
28b60 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
28b60 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
28b60 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
28b60 000             | '  ~$198-$1F3           State and register variables
28b60 000             | '
28b60 000             | ' Also during driver COG startup:
28b60 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
28b60 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
28b60 000             | '..................................................................................................
28b60 000             |                             
28b60 000             | ' Mailbox storage after vector initialization
28b60 000             | 
28b60 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
28b64 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
28b68 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
28b6c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
28b70 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
28b74 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
28b78 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
28b7c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
28b80 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
28b84 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
28b88 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
28b8c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
28b90 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
28b94 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
28b98 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
28b9c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
28ba0 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
28ba4 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
28ba8 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
28bac 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
28bb0 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
28bb4 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
28bb8 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
28bbc 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
28bc0 018             | 
28bc0 018             | ' Mailbox parameter addresses per COG once patched
28bc0 018             |                             
28bc0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
28bc4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
28bc8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
28bcc 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
28bd0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
28bd4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
28bd8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
28bdc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
28be0 020             | 
28be0 020             | '..................................................................................................
28be0 020             | ' Per COG request and state setup and service branching
28be0 020             |         
28be0 020             | cog0                 
28be0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
28be4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
28be8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
28bec 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
28bf0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28bf4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28bf8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
28bfc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
28c00 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
28c04 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28c08 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28c0c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
28c10 02c             | cog1                        
28c10 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
28c14 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
28c18 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
28c1c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
28c20 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28c24 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28c28 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
28c2c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
28c30 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
28c34 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28c38 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28c3c 037 33 CA 63 FD |                             execf   request-0               'jump to service
28c40 038             | cog2                         
28c40 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
28c44 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
28c48 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
28c4c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
28c50 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28c54 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28c58 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
28c5c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
28c60 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
28c64 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28c68 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28c6c 043 33 CA 63 FD |                             execf   request-0               'jump to service
28c70 044             | cog3                        
28c70 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
28c74 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
28c78 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
28c7c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
28c80 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28c84 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28c88 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
28c8c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
28c90 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
28c94 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28c98 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28c9c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
28ca0 050             | cog4                        
28ca0 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
28ca4 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
28ca8 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
28cac 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
28cb0 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28cb4 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28cb8 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
28cbc 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
28cc0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
28cc4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28cc8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28ccc 05b 33 CA 63 FD |                             execf   request-0               'jump to service
28cd0 05c             | cog5                        
28cd0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
28cd4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
28cd8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
28cdc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
28ce0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28ce4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28ce8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
28cec 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
28cf0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
28cf4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28cf8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28cfc 067 33 CA 63 FD |                             execf   request-0               'jump to service
28d00 068             | cog6                        
28d00 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
28d04 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
28d08 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
28d0c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
28d10 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28d14 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28d18 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
28d1c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
28d20 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
28d24 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28d28 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28d2c 073 33 CA 63 FD |                             execf   request-0               'jump to service
28d30 074             | cog7                        
28d30 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
28d34 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
28d38 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
28d3c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
28d40 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28d44 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28d48 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
28d4c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
28d50 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
28d54 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28d58 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28d5c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
28d60 080             |                             fit     128
28d60 080             | 
28d60 080             |                             fit     128
28d60 080             | pad                         long    0[128-$]                'align init code to $80
28d60 080             | 
28d60 080             | '..................................................................................................
28d60 080             | 
28d60 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
28d60 080             | 
28d60 080             | init                        
28d60 080             |                             ' get driver scratch long address in hub
28d60 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
28d64 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
28d68 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
28d6c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
28d70 084             |                     
28d70 084             |                             ' read in the additional LUT RAM code
28d70 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
28d74 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
28d78 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
28d7c 087             | 
28d7c 087             |                             ' read the startup parameters
28d7c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
28d80 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
28d84 089             | 
28d84 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
28d84 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
28d88 08a             | 
28d88 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
28d8c 08b 01 00 00 5F 
28d90 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
28d94 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
28d98 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
28d9c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
28da0 090             | 
28da0 090             |                             ' setup data pin modes and data bus pin group in streamer commands
28da0 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
28da4 091 01 00 00 FF 
28da8 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
28dac 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
28db0 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
28db4 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
28db8 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
28dbc 097 08 DE 47 F5 |                             or      a, #8
28dc0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
28dc4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
28dc8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
28dcc 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
28dd0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
28dd4 09d 01 DE 07 F1 |                             add     a, #1
28dd8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
28ddc 09f             |  
28ddc 09f             |                             ' setup device control pin states
28ddc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
28de0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
28de4 0a1 01 00 00 FF 
28de8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
28dec 0a3             | 
28dec 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
28df0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
28df4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
28df8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
28dfc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
28e00 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
28e04 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
28e08 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
28e0c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
28e10 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
28e14 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
28e18 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
28e1c 0af             | pinloop
28e1c 0af             |                             ' generate minimum CE high time before access
28e1c 0af A1 07 00 FF 
28e20 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
28e24 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
28e28 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
28e2c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
28e30 0b4 1F DE 63 FD |                             waitx   a                       'delay
28e34 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
28e38 0b6             | 
28e38 0b6             |                             ' setup the COG mailboxes and addresses 
28e38 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
28e3c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
28e40 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
28e44 0b9             | 
28e44 0b9 28 2E 64 FD |                             setq    #24-1
28e48 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
28e4c 0bb             | 
28e4c 0bb             |                             ' setup the polling loop for active COGs 
28e4c 0bb 01 C2 63 FD |                             cogid   id
28e50 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
28e54 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
28e58 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
28e5c 0bf 0A F0 07 F6 |                             mov     ptra, #10
28e60 0c0 E1 F1 03 FA |                             mul     ptra, id
28e64 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
28e68 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
28e6c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
28e70 0c4 03 C2 07 FA |                             mul     id, #3
28e74 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
28e78 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
28e7c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
28e80 0c8 D8 01 B0 FD |                             call    #reloadcogs
28e84 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
28e88 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
28e8c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
28e8c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
28e90 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
28e94 0cd 08 04 DC FC |                             rep     #2, #8
28e98 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
28e9c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
28ea0 0d0             | 
28ea0 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
28ea0 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
28ea0 0d0 01 C2 63 FD |                             cogid   id
28ea4 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
28ea8 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
28eac 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
28eb0 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
28eb4 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
28eb8 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
28ebc 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
28ec0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
28ec4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
28ec8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
28ecc 0db 3F E4 A7 F9 |                             alti    d, #%111_111
28ed0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
28ed4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
28ed8 0de A5 E5 03 F1 |                             add     d, const512
28edc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
28ee0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
28ee4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
28ee8 0e2             |                             
28ee8 0e2             |                             ' setup register values for control vector loop setup after we return
28ee8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
28eec 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
28ef0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
28ef4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
28ef8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
28efc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
28f00 0e8 D0 C3 8F F9 |                             altd    id, #id0
28f04 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
28f08 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
28f0c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
28f10 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
28f14 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
28f18 0ee             |  
28f18 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
28f1c 0ef 07 CA 07 F5 |                             and     request, #7
28f20 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
28f24 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
28f28 0f2             |                             fit     $100                    'ensure all init code fits this space
28f28 0f2             | 
28f28 0f2             |                             fit     $100                    'ensure all init code fits this space
28f28 0f2             | 
28f28 0f2 00 00 00 00 
      ...             
28f58 0fe 00 00 00 00 
28f5c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
28f60 100             | 
28f60 100             | '..................................................................................................
28f60 100             | ' Error result handling and COG notification of request completion
28f60 100             | 
28f60 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
28f64 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
28f68 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
28f6c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
28f70 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
28f74 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
28f78 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
28f7c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
28f80 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
28f84 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
28f88 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
28f8c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
28f90 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
28f94 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
28f98 10e             | ' Poller re-starts here after a COG is serviced
28f98 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
28f9c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
28fa0 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
28fa4 111             | ' Main dynamic polling loop repeats until a request arrives
28fa4 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
28fa8 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
28fac 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
28fb0 114             | 
28fb0 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
28fb4 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
28fb8 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
28fbc 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
28fc0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
28fc4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
28fc8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
28fcc 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
28fd0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
28fd4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
28fd8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
28fdc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
28fe0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
28fe4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
28fe8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
28fec 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
28ff0 124             | 
28ff0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
28ff4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
28ff8 126             |  
28ff8 126             | '..................................................................................................
28ff8 126             | ' List handler                               
28ff8 126             | 
28ff8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
28ffc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
29000 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
29004 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
29008 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2900c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
29010 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
29014 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
29018 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2901c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
29020 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
29024 131 33 00 60 FD |                             execf   0-0                     'process the request 
29028 132             | 
29028 132             | '..................................................................................................
29028 132             | ' Restoring per COG state and resuming where we left off
29028 132             | 
29028 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2902c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
29030 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
29034 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
29038 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2903c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
29040 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
29044 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
29048 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2904c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
29050 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
29054 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
29058 13e             |                    
29058 13e             | '..................................................................................................
29058 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
29058 13e             | 
29058 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2905c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
29060 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
29064 141 D0 DF B7 F9 |                             setd    a, #id0
29068 142 D8 DF BF F9 |                             sets    a, #addr1
2906c 143 FE FF FF FF 
29070 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
29074 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
29078 146 3F DE A7 F9 |                             alti    a, #%111_111 
2907c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
29080 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
29084 149 01 E2 63 FD |                             cogid   c
29088 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2908c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
29090 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
29094 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
29098 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2909c 14f 00 E0 03 F6 |                             mov     b, 0-0
290a0 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
290a4 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
290a8 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
290ac 153 0C 00 90 AD |             if_z            jmp     #excluded               
290b0 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
290b4 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
290b8 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
290bc 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
290c0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
290c4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
290c8 15a             | 
290c8 15a             | 'determine priority cogs and build instructions for the polling sequence
290c8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
290cc 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
290d0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
290d4 15d             | 
290d4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
290d8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
290dc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
290e0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
290e4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
290e8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
290ec 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
290f0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
290f4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
290f8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
290fc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
29100 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
29104 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
29108 16a             | endprioloop
29108 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2910c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
29110 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
29114 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
29118 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2911c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
29120 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
29124 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
29128 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2912c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
29130 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
29134 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
29138 176             | 
29138 176             | ' populate the round robin COG polling instructions
29138 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2913c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
29140 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
29144 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
29148 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2914c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
29150 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
29154 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
29158 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2915c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
29160 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
29164 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
29168 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2916c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
29170 184             | '..................................................................................................
29170 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
29170 184             | 
29170 184             | set_latency                                                 '            (a) set latency
29170 184             | get_latency                                                 '            (b) get latency
29170 184             | set_burst                                                   '            (c) set burst size of bank
29170 184             | get_burst                                                   '            (d) get burst size of bank
29170 184             |                                                             '            (e) dump state
29170 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
29174 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
29178 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2917c 187             |                                                             ' | | | | e  account for following AUGS
2917c 187 04 00 00 FF 
29180 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
29184 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
29188 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2918c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
29190 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
29194 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
29198 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2919c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
291a0 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
291a4 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
291a8 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
291ac 193             | 
291ac 193             | '..................................................................................................
291ac 193             | ' Misc EXECF code
291ac 193             | 
291ac 193 33 72 63 FD | start_read_exec             execf   newburstr
291b0 194 33 7C 63 FD | start_write_exec            execf   resumewrites
291b4 195 33 78 63 FD | continue_read_exec          execf   lockedreads
291b8 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
291bc 197             | 
291bc 197             | '..................................................................................................
291bc 197             | ' Variables
291bc 197             | 
291bc 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
291c0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
291c4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
291c8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
291cc 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
291d0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
291d4 19d             | 
291d4 19d 00 00 00 80 | xfreq1          long    $80000000
291d8 19e 00 00 00 40 | xfreq2          long    $40000000
291dc 19f 03 00 00 00 | delay           long    3
291e0 1a0             | 
291e0 1a0             | lutcodeaddr                 
291e0 1a0             | startupparams
291e0 1a0             | excludedcogs                                    'careful: shared register use!
291e0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
291e4 1a1 00 00 00 00 | flags           long    0
291e8 1a2             | mask                                            'careful: shared register use!
291e8 1a2 00 00 00 00 | resetmaskA      long    0
291ec 1a3             | limit                                           'careful: shared register use!
291ec 1a3 00 00 00 00 | resetmaskB      long    0
291f0 1a4 00 00 00 00 | datapins        long    0
291f4 1a5             | const512                                        'careful: shared register use!
291f4 1a5 00 00 00 00 | devicelist      long    0
291f8 1a6 00 00 00 00 | coglist         long    0
291fc 1a7 00 00 00 00 | mbox            long    0 
29200 1a8             | 
29200 1a8             | clkpin                                          'shared with code patched during init
29200 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
29204 1a9             | cspin                                           'shared with code patched during init
29204 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
29208 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2920c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
29210 1ac 01 00 00 00 | clkdelay        long    1
29214 1ad 00 00 00 00 | regdatabus      long    0
29218 1ae             | 
29218 1ae 10 00 00 00 | deviceaddr      long    $10
2921c 1af             | rrcounter
2921c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
29220 1b0             | 
29220 1b0             | ' jump addresses for the per COG handlers
29220 1b0 20 00 00 00 | cog0_handler    long    cog0
29224 1b1 2C 00 00 00 | cog1_handler    long    cog1
29228 1b2 38 00 00 00 | cog2_handler    long    cog2
2922c 1b3 44 00 00 00 | cog3_handler    long    cog3
29230 1b4 50 00 00 00 | cog4_handler    long    cog4
29234 1b5 5C 00 00 00 | cog5_handler    long    cog5
29238 1b6 68 00 00 00 | cog6_handler    long    cog6
2923c 1b7 74 00 00 00 | cog7_handler    long    cog7
29240 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
29244 1b9             | 
29244 1b9             | ' EXECF sequences
29244 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
29248 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2924c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
29250 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
29254 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
29258 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2925c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
29260 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
29260 1c0             | 
29260 1c0             | 
29260 1c0             | ' SKIPF sequences
29260 1c0             | skiptable
29260 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
29264 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
29268 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2926c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
29270 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
29274 1c5 00 00 00 00 | pattern2        long    0
29278 1c6 00 00 00 00 | pattern3        long    0
2927c 1c7 77 02 00 00 | singlelong      long    %1001110111  
29280 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
29284 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
29288 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2928c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
29290 1cc             | 
29290 1cc             | ' LUT RAM address values
29290 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
29294 1cd DD 02 00 00 | continue_read   long    continue_read_lut
29298 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2929c 1cf F6 02 00 00 | noread          long    noread_lut
292a0 1d0             | 
292a0 1d0 00 00 00 00 | id0             long    0
292a4 1d1 01 00 00 00 | id1             long    1
292a8 1d2 02 00 00 00 | id2             long    2
292ac 1d3 03 00 00 00 | id3             long    3
292b0 1d4 04 00 00 00 | id4             long    4
292b4 1d5 05 00 00 00 | id5             long    5
292b8 1d6 06 00 00 00 | id6             long    6
292bc 1d7 07 00 00 00 | id7             long    7
292c0 1d8             | 
292c0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
292c0 1d8             | 'and COG updates and need to follow immediately after id0-id7
292c0 1d8 00 00 00 00 | addr1           long    0
292c4 1d9 00 00 00 00 | hubdata         long    0
292c8 1da 00 00 00 00 | count           long    0
292cc 1db 00 00 00 00 | addr2           long    0
292d0 1dc 00 00 00 00 | total           long    0
292d4 1dd 00 00 00 00 | offset1         long    0
292d8 1de 00 00 00 00 | offset2         long    0
292dc 1df 00 00 00 00 | link            long    0
292e0 1e0             | 
292e0 1e0             | burstwrite                                      'note shared register use during init
292e0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
292e4 1e1 00 00 00 00 | id              long    0
292e8 1e2             | 
292e8 1e2 00 00 00 00 | header          long    0
292ec 1e3 00 00 00 00 | trailer         long    0
292f0 1e4 00 00 00 00 | cmdaddr         long    0
292f4 1e5 00 00 00 00 | request         long    0
292f8 1e6 00 00 00 00 | rrlimit         long    0
292fc 1e7 00 00 00 00 | pinconfig       long    0
29300 1e8 00 00 00 00 | clks            long    0
29304 1e9 00 00 00 00 | resume          long    0
29308 1ea 00 00 00 00 | orighubsize     long    0
2930c 1eb 00 00 00 00 | wrclks          long    0
29310 1ec             | 
29310 1ec 00 00 00 00 | pattern         long    0
29314 1ed 00 00 00 00 | hubscratch      long    0
29318 1ee 00 10 00 00 | val4k           long    4096
2931c 1ef             | 
2931c 1ef             | ' temporary general purpose regs
2931c 1ef 00 00 00 00 | a               long    0
29320 1f0 00 00 00 00 | b               long    0
29324 1f1 00 00 00 00 | c               long    0
29328 1f2 00 00 00 00 | d               long    0
2932c 1f3             |                 fit     502
2932c 1f3             | 
2932c 1f3             |                 fit     502
2932c 1f3             | 
2932c 1f3             | '..................................................................................................
2932c 1f3             | 
2932c 1f3             |             orgh
2932c                 | 
2932c                 | lut_code
2932c                 | 'HW init code up to 80 longs
2932c                 | 
2932c                 | '..................................................................................................
2932c                 | ' Memory layout for LUT RAM once operational:
2932c                 | '
2932c                 | '  LUT RAM address      Usage
2932c                 | '  ---------------      ----
2932c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2932c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2932c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2932c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2932c                 | '
2932c                 | ' Also during driver COG startup:
2932c                 | ' $230-$24F is used for HW init setup
2932c                 | ' $250-$26F is used as temporary vector storage 
2932c                 | '..................................................................................................
2932c                 | 
2932c                 |                 org $230    
2932c 230             | 
2932c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2932c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
29330 231 24 16 60 FD |                             pollxfi
29334 232 FF AA 2A FF 
29338 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2933c 234 28 00 B0 FD |                             call    #sendqspi
29340 235 07 F8 07 FF 
29344 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
29348 237 28 00 B0 FD |                             call    #sendspi
2934c 238 F8 07 78 FF 
29350 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
29354 23a 1C 00 B0 FD |                             call    #sendspi
29358 23b 7F 78 78 FF 
2935c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
29360 23d 10 00 B0 FD |                             call    #sendspi 
29364 23e 2D 00 64 FD |                             ret
29368 23f             | 
29368 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2936c 240 32 0C 64 FD |                             skipf   #%110
29370 241 9C EF 03 F6 |                             mov     pb, xsendimm
29374 242             | 
29374 242 10 D0 07 F6 | sendspi                     mov     clks, #16
29378 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2937c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
29380 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29384 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
29388 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2938c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
29390 249 50 48 63 FD |                             fltl    datapins                'float data bus
29394 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
29398 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2939c 24c             | 
2939c 24c 00 00 00 00 
293a0 24d 00 00 00 00 
293a4 24e 00 00 00 00 
293a8 24f 00 00 00 00 |                 long    0[$270-32-$]
293ac 250             |                 fit     $270-32  ' keep room for 32 vector longs
293ac 250             |     
293ac 250             |                 fit     $270-32  ' keep room for 32 vector longs
293ac 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
293ac 250             | rw_vect ' PSRAM jump vectors
293ac 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
293b0 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
293b4 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
293b8 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
293bc 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
293c0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
293c4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
293c8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
293cc 258             | ro_vect ' R/O PSRAM jump vectors
293cc 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
293d0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
293d4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
293d8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
293dc 25c 00 01 00 00 |                 long    unsupported
293e0 25d 00 01 00 00 |                 long    unsupported
293e4 25e 00 01 00 00 |                 long    unsupported
293e8 25f 00 01 00 00 |                 long    unsupported
293ec 260             | ctrl_vect ' Control jump vectors
293ec 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
293f0 261 00 01 00 00 |                 long    unsupported
293f4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
293f8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
293fc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
29400 265 00 01 00 00 |                 long    unsupported
29404 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
29408 267 3E 01 00 00 |                 long    reconfig 
2940c 268             | no_vect ' Invalid bank jump vectors
2940c 268 01 01 00 00 |                 long    invalidbank
29410 269 01 01 00 00 |                 long    invalidbank
29414 26a 01 01 00 00 |                 long    invalidbank
29418 26b 01 01 00 00 |                 long    invalidbank
2941c 26c 01 01 00 00 |                 long    invalidbank
29420 26d 01 01 00 00 |                 long    invalidbank
29424 26e 01 01 00 00 |                 long    invalidbank
29428 26f 01 01 00 00 |                 long    invalidbank
2942c 270             |                 fit     $270
2942c 270             | 
2942c 270             |                 fit     $270
2942c 270             | '..................................................................................................
2942c 270             | ' PSRAM READS
2942c 270             |                                                             ' a b c d e f
2942c 270             |                                                             ' B W L B R L  (a) byte read
2942c 270             |                                                             ' Y O O U E O  (b) word read
2942c 270             |                                                             ' T R N R S C  (c) long read
2942c 270             |                                                             ' E D G S U K  (d) new burst read
2942c 270             |                                                             '       T M E  (e) resumed sub-burst
2942c 270             |                                                             '         E D  (f) locked sub-burst
2942c 270             | 
2942c 270             | 
2942c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
29430 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
29434 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
29438 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2943c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
29440 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
29444 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
29448 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2944c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
29450 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
29454 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
29458 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2945c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
29460 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
29464 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
29468 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2946c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
29470 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
29474 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
29478 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2947c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
29480 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
29484 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
29488 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2948c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
29490 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
29494 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
29498 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2949c 28c             | 
2949c 28c             |                             ' fall through to read bursts
2949c 28c             |                         
2949c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2949c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
294a0 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
294a4 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
294a8 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
294ac 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
294b0 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
294b4 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
294b8 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
294bc 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
294c0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
294c4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
294c8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
294cc 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
294d0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
294d4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
294d8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
294dc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
294e0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
294e4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
294e8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
294ec 2a0 E8 D1 03 F1 |                             add     clks, clks
294f0 2a1             | readcommon
294f0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
294f4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
294f8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
294fc 2a4             | 
294fc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29500 2a5 69 C8 63 FD |                             rev     cmdaddr
29504 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29508 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2950c 2a8             | 
2950c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
29510 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
29514 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
29514 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
29518 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2951c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
29520 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
29524 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
29524 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
29528 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2952c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
29530 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
29534 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
29538 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2953c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2953c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
29540 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
29544 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
29548 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2954c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
29550 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
29554 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
29558 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2955c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
29560 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
29564 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
29568 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2956c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
29570 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
29574 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
29574 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
29578 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2957c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
29580 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
29584 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
29588 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2958c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
29590 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
29594 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
29598 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2959c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
295a0 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
295a4 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
295a8 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
295ac 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
295b0 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
295b4 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
295b8 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
295bc 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
295c0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
295c4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
295c8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
295cc 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
295d0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
295d4 2da 10 03 90 FD |                             jmp     #writecommon
295d8 2db             | 
295d8 2db             | '..................................................................................................
295d8 2db             | ' Burst continuation testing
295d8 2db             | 
295d8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
295dc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
295e0 2dd             | continue_read_lut          
295e0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
295e4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
295e8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
295ec 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
295f0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
295f4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
295f8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
295fc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
29600 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
29604 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
29608 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2960c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
29610 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
29614 2ea             | 
29614 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
29618 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2961c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
29620 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
29624 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
29628 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2962c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
29630 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
29634 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
29638 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2963c 2f4 2A 1C 66 0D |             _ret_           push    #poller
29640 2f5             | 
29640 2f5             | 
29640 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
29644 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
29644 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
29648 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2964c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
29650 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
29654 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
29658 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2965c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
29660 2fd 2D 00 64 FD |                             ret                             ' | continue processing
29664 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
29668 2ff             | '..................................................................................................
29668 2ff             | ' Completion of requests
29668 2ff             | 
29668 2ff             | complete_rw_lut             
29668 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2966c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
29670 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
29674 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
29678 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2967c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
29680 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
29684 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
29688 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2968c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
29690 309 32 62 64 AD |             if_z            skipf   #%110001
29694 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
29698 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2969c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
296a0 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
296a4 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
296a8 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
296ac 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
296b0 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
296b4 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
296b8 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
296bc 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
296c0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
296c4 316             |                                                             ' skipcase (a) gfx copy to/from hub
296c4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
296c4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
296c4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
296c8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
296cc 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
296d0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
296d4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
296d8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
296dc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
296e0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
296e4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
296e8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
296ec 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
296f0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
296f4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
296f8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
296fc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
29700 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
29704 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
29708 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2970c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
29710 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
29714 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
29718 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2971c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
29720 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
29724 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
29728 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2972c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
29730 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
29734 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
29738 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2973c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
29740 335 DF B7 03 A6 |             if_z            mov     addr2, link
29744 336 34 FF 9F AD |             if_z            jmp     #checknext
29748 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2974c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29750 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
29754 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
29758 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2975c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
29760 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
29764 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
29768 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2976c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
29770 341             | 
29770 341             | '..................................................................................................
29770 341             | ' PSRAM WRITES
29770 341             |                                                             '  a b c d e f g h
29770 341             | 
29770 341             |                                                             '  B W L F B R L L (a) byte write(s)
29770 341             |                                                             '  Y O O I U E O O (b) word write(s)
29770 341             |                                                             '  T R N L R S C C (c) long write(s)
29770 341             |                                                             '  E D G L S U K K (d) resumed fill
29770 341             |                                                             '          T M E E (e) new burst write
29770 341             |                                                             '            E D D (f) resumed burst
29770 341             |                                                             '              F B (g) locked fill
29770 341             |                                                             '              I U (h) locked burst write
29770 341             |                                                             '              L R 
29770 341             |                                                             '              L S 
29770 341             |                                                             '                T 
29770 341             | 
29770 341             | w_single                   
29770 341             | w_fill_cont           
29770 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
29774 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
29778 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2977c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
29780 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
29784 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
29788 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2978c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
29790 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
29794 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
29798 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2979c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
297a0 34d             |                ' disable call to r_resume_burst for single longs when z=0
297a0 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
297a4 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
297a8 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
297ac 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
297b0 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
297b4 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
297b8 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
297bc 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
297c0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
297c4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
297c8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
297cc 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
297d0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
297d4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
297d8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
297dc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
297e0 35d             |         
297e0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
297e0 35d             |             '
297e0 35d             |             '  At least one of these 3 optional components will be sent
297e0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
297e0 35d             |             '     body - N x full longs of data
297e0 35d             |             '     trailer - last partial long of data
297e0 35d             |             '
297e0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
297e0 35d             |             '
297e0 35d             |             'Case    Type                           Sends
297e0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
297e0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
297e0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
297e0 35d             |             ' 4)     Multiple long fill             body only
297e0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
297e0 35d             | 
297e0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
297e0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
297e4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
297e8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
297ec 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
297f0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
297f4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
297f8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
297fc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
29800 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
29804 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
29808 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2980c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
29810 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
29814 36a             |                             
29814 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29818 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2981c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
29820 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
29824 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
29828 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2982c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
29830 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
29834 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
29838 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2983c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
29840 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
29844 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
29848 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2984c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
29850 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
29854 37a             | 
29854 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29858 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2985c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
29860 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
29864 37e             |                  
29864 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
29868 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2986c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
29870 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
29874 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
29878 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2987c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
29880 385             | 
29880 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
29884 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
29888 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2988c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
29890 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
29894 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
29898 38b             | 
29898 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
29898 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2989c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
298a0 38d 2A B0 63 FD |                             push    addr1                   'save address
298a4 38e             | 
298a4 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
298a4 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
298a8 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
298ac 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
298b0 391             |             
298b0 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
298b4 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
298b8 393 2B B0 63 FD |                             pop     addr1                   'restore address
298bc 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
298c0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
298c4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
298c8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
298cc 398             | 
298cc 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
298d0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
298d4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
298d8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
298dc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
298e0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
298e4 39e             | 
298e4 39e             |                             'trailer is done
298e4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
298e8 39f             | 
298e8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
298ec 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
298f0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
298f4 3a2             | 
298f4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
298f8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
298fc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29900 3a5 61 C8 63 FD |                             mergeb  cmdaddr
29904 3a6             |                             
29904 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
29908 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2990c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
29910 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
29914 3aa             |                                                          
29914 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
29918 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2991c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
29920 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
29924 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
29928 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2992c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
29930 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
29934 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
29938 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2993c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
29940 3b5             |  
29940 3b5 59 52 63 FD |                             drvh    cspin
29944 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
29948 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2994c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
29950 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
29954 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
29958 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2995c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
29960 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
29964 3be EA E5 03 F6 |                             mov     d, orighubsize
29968 3bf EF E5 63 F0 |                             shl     d, a
2996c 3c0 F2 E3 83 F1 |                             sub     c, d
29970 3c1 DD E3 03 F1 |                             add     c, offset1
29974 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
29978 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2997c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
29980 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
29984 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
29988 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2998c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
29990 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29994 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
29998 3cb BB D3 03 F6 |                             mov     resume, restorefill
2999c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
299a0 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
299a4 3ce 6C FC BF CD |             if_c            call    #yield
299a8 3cf 2D 00 64 FD |                             ret
299ac 3d0             |                            
299ac 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
299ac 3d0             |                       '     rczl    pa                      'rotate left into address offset
299ac 3d0             |                       '     rczl    c wcz                   'restore count and flags
299ac 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
299b0 3d1 02 EC 67 F0 |                             shl     pa, #2
299b4 3d2 28 06 64 AD |             if_z            setq    #3
299b8 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
299bc 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
299c0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
299c4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
299c8 3d7             | 
299c8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
299cc 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
299d0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
299d4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
299d8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
299dc 3dc             |                 fit 1024-32
299dc 3dc             |         
299dc 3dc             | 
299dc 3dc             | '..................................................................................................
299dc 3dc             | 
299dc 3dc             |                 fit 1024-32
299dc 3dc 00 00 00 00 
299e0 3dd 00 00 00 00 
299e4 3de 00 00 00 00 
299e8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
299ec 3e0             |                 org 1024-32
299ec 000             | 
299ec 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
299ec 000 00 00 00 00 |                 long $0000
299f0 001 11 11 00 00 |                 long $1111
299f4 002 22 22 00 00 |                 long $2222
299f8 003 33 33 00 00 |                 long $3333
299fc 004 44 44 00 00 |                 long $4444
29a00 005 55 55 00 00 |                 long $5555
29a04 006 66 66 00 00 |                 long $6666
29a08 007 77 77 00 00 |                 long $7777
29a0c 008 88 88 00 00 |                 long $8888
29a10 009 99 99 00 00 |                 long $9999
29a14 00a AA AA 00 00 |                 long $aaaa
29a18 00b BB BB 00 00 |                 long $bbbb
29a1c 00c CC CC 00 00 |                 long $cccc
29a20 00d DD DD 00 00 |                 long $dddd
29a24 00e EE EE 00 00 |                 long $eeee
29a28 00f FF FF 00 00 |                 long $ffff
29a2c 010             | 
29a2c 010             | 'masks
29a2c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
29a30 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
29a34 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
29a38 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
29a3c 014             | 
29a3c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
29a40 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
29a44 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
29a48 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
29a4c 018             | 
29a4c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
29a50 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
29a54 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
29a58 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
29a5c 01c             | 
29a5c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
29a60 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
29a64 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
29a68 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
29a6c 020             |         fit 1024
29a6c 020             | 
29a6c 020             |         fit 1024
29a6c 020             | 
29a6c 020             | '--------------------------------------------------------------------------------------------------
29a6c 020             |         orgh
29a6c                 | 
29a6c                 | gfxexpansion
29a6c                 |                             'simple line drawing graphics expansion of memory driver
29a6c                 |                             'jmp     #donerepeats                'just return for now
29a6c                 | 
29a6c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
29a70     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
29a74     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
29a78     DD E1 03 F6 |                             mov     b, offset1              'get error term
29a7c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
29a80     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
29a84     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
29a88     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
29a8c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
29a90     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
29a94     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
29a98     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
29a9c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
29aa0     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
29aa4     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
29aa8     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
29aac     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
29ab0     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
29ab4     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
29ab8     DC E5 33 F9 |                             getword d, total, #0            'get line width
29abc     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
29ac0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
29ac4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
29ac8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
29acc     C3 03 80 FD |                             jmp     #readmask               'continue filling
29ad0                 | 	alignl
29ad0                 | _usbnew_spin2_dat_
29ad0                 |                 org     $000
29ad0 000             | 
29ad0 000             | usb_host_start
29ad0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
29ad4 001             | 
29ad4 001 03 00 00 FF 
29ad8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
29adc 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
29ae0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
29ae4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
29ae8 006 29 70 63 FD |                 setq2   htmp
29aec 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
29af0 008             | 
29af0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
29af4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
29af8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
29afc 00b             | 
29afc 00b             | '------------------------------------------------------------------------------
29afc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
29afc 00b             | ' special because the receiving function must not respond with either STALL or
29afc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
29afc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
29afc 00b             | ' corrupt packet, it must ignore the transaction
29afc 00b             | '------------------------------------------------------------------------------
29afc 00b             | ' On entry:
29afc 00b             | '   PTRA - start address of the SETUP data struct.
29afc 00b             | ' On exit:
29afc 00b             | '   retval - PID_ACK on success, otherwise error code.
29afc 00b             | '------------------------------------------------------------------------------
29afc 00b             | txn_setup
29afc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
29b00 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
29b04 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
29b08 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
29b0c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
29b10 010             | .setup
29b10 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
29b14 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29b18 012 2D 00 64 AD |         if_z    ret
29b1c 013 7C 0B B0 FD |                 call    #retry_wait
29b20 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29b24 015 2D 00 64 AD |         if_z    ret
29b28 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
29b2c 017 E0 FF 9F FD |                 jmp     #.setup
29b30 018             | 
29b30 018             | '------------------------------------------------------------------------------
29b30 018             | ' IN/INTERRUPT transaction.
29b30 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
29b30 018             | '------------------------------------------------------------------------------
29b30 018             | ' On entry:
29b30 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
29b30 018             | '     CRC(b19..23).
29b30 018             | ' On exit:
29b30 018             | '------------------------------------------------------------------------------
29b30 018             | txn_in
29b30 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
29b34 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
29b38 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
29b3c 01b             | 
29b3c 01b             |                 ' Fall through to urx_packet
29b3c 01b             | 
29b3c 01b             | '------------------------------------------------------------------------------
29b3c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
29b3c 01b             | ' received are handshakes and IN DATAx.
29b3c 01b             | '------------------------------------------------------------------------------
29b3c 01b             | ' On entry:
29b3c 01b             | ' On exit:
29b3c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
29b3c 01b             | '     returned.
29b3c 01b             | '------------------------------------------------------------------------------
29b3c 01b             | urx_packet
29b3c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
29b40 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29b44 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
29b48 01e 1A 92 63 FD |                 getct   hct2
29b4c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
29b50 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
29b54 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
29b58 022             | .wait_sop
29b58 022 22 A7 8A FA |                 rdpin   urx, dm
29b5c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29b60 024 08 00 90 CD |         if_c    jmp     #.get_pid
29b64 025 FC 25 CC FB |                 jnct2   #.wait_sop
29b68 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
29b6c 027             | .get_pid
29b6c 027 28 02 B0 FD |                 call    #urx_next
29b70 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
29b74 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
29b78 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
29b7c 02b             | .chk_pid
29b7c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29b80 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
29b84 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
29b88 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
29b8c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
29b90 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
29b94 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
29b98 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
29b9c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
29ba0 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
29ba4 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
29ba8 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
29bac 037             | .ack_resend
29bac 037 22 A7 82 FA |                 rqpin   urx, dm
29bb0 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
29bb4 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
29bb8 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
29bbc 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
29bc0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
29bc4 03d             | .chk_eop
29bc4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29bc8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
29bcc 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
29bd0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
29bd4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
29bd8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
29bdc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
29be0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
29be4 045 2D 00 64 FD |                 ret
29be8 046             | .idle
29be8 046 22 A7 82 FA |                 rqpin   urx, dm
29bec 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29bf0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
29bf4 049 2D 00 64 FD |                 ret
29bf8 04a             | 
29bf8 04a             | '------------------------------------------------------------------------------
29bf8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
29bf8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
29bf8 04a             | ' if one is required.
29bf8 04a             | '------------------------------------------------------------------------------
29bf8 04a             | ' On entry:
29bf8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
29bf8 04a             | ' On exit:
29bf8 04a             | '------------------------------------------------------------------------------
29bf8 04a             | utx_token
29bf8 04a 22 A7 82 FA |                 rqpin   urx, dm
29bfc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29c00 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
29c04 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29c08 04e 34 0D B0 CD |         if_c    call    #utx_pre
29c0c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
29c10 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
29c14 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
29c18 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
29c1c 053             | .next_byte
29c1c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
29c20 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
29c24 055             | .wait
29c24 055 40 46 72 FD |                 testp   dp                      wc
29c28 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
29c2c 057 23 03 08 FC |                 akpin   dp
29c30 058 22 A5 22 FC |                 wypin   utx, dm
29c34 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
29c38 05a             | 
29c38 05a             | '------------------------------------------------------------------------------
29c38 05a             | ' SETUP/OUT/INTERRUPT transaction.
29c38 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
29c38 05a             | '------------------------------------------------------------------------------
29c38 05a             | ' On entry:
29c38 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
29c38 05a             | '     CRC(b19..23).
29c38 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
29c38 05a             | '   pkt_data - count of DATAx payload bytes to send.
29c38 05a             | ' On exit:
29c38 05a             | '------------------------------------------------------------------------------
29c38 05a             | txn_out
29c38 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
29c3c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
29c40 05c 00 00 C0 FF 
29c44 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
29c48 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
29c4c 05f             | 
29c4c 05f             |                 ' Fall through to utx_data
29c4c 05f             | 
29c4c 05f             | '------------------------------------------------------------------------------
29c4c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
29c4c 05f             | ' calculated while the data byte is being shifted out. Since data stage
29c4c 05f             | ' success/fail is not determined until the status stage of the transaction,
29c4c 05f             | ' this routine is only concerned about the current DATAx packet.
29c4c 05f             | '------------------------------------------------------------------------------
29c4c 05f             | ' On entry:
29c4c 05f             | '   PTRA - hub start address of the data to read.
29c4c 05f             | '   pkt_cnt - data payload size.
29c4c 05f             | ' On exit:
29c4c 05f             | '------------------------------------------------------------------------------
29c4c 05f             | utx_data
29c4c 05f 22 A7 82 FA |                 rqpin   urx, dm
29c50 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29c54 061 F4 FF 9F CD |         if_c    jmp     #utx_data
29c58 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
29c5c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
29c60 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29c64 065 D8 0C B0 CD |         if_c    call    #utx_pre
29c68 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
29c6c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
29c70 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
29c74 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
29c78 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
29c7c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
29c80 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
29c84 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
29c88 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
29c8c 06f             | .read_byte
29c8c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
29c90 070 F0 00 B0 FD |                 call    #utx_byte
29c94 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
29c98 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
29c9c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
29ca0 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
29ca4 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
29ca8 076             | .send_crc
29ca8 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
29cac 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
29cb0 078 D0 00 B0 FD |                 call    #utx_byte
29cb4 079 5D A5 EA F8 |                 getbyte utx, crc, #1
29cb8 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
29cbc 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
29cc0 07c             | 
29cc0 07c             | '------------------------------------------------------------------------------
29cc0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
29cc0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
29cc0 07c             | ' expects that the packet includes at least the CRC word.
29cc0 07c             | '
29cc0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
29cc0 07c             | ' was requested, which makes it difficult to determine where the data stops
29cc0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
29cc0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
29cc0 07c             | ' USB-16 expected residual value of 0xB001.
29cc0 07c             | '
29cc0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
29cc0 07c             | ' so the caller can verify IN success before writing the data to its final
29cc0 07c             | ' destination.
29cc0 07c             | '------------------------------------------------------------------------------
29cc0 07c             | ' On entry:
29cc0 07c             | '   pkt_data - max byte count expected to be in the packet.
29cc0 07c             | '   newb_flg - signals new byte ready when toggled.
29cc0 07c             | ' On exit:
29cc0 07c             | '   pkt_cnt - actual number of bytes read.
29cc0 07c             | '------------------------------------------------------------------------------
29cc0 07c             | urx_data
29cc0 07c F7 75 03 F6 |                 mov     htmp2, pb
29cc4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
29cc8 07e 00 00 C0 FF 
29ccc 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
29cd0 080 BA EF 03 F6 |                 mov     pb, htmp2
29cd4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
29cd8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
29cdc 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
29ce0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
29ce4 085             | .wait_byte
29ce4 085             | ' In-line rx for max speed
29ce4 085 22 A7 82 FA |                 rqpin   urx, dm
29ce8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
29cec 087 53 A5 02 F5 |                 and     utx, urx
29cf0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
29cf4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
29cf8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
29cfc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
29d00 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
29d04 08d DC FF 9F FD |                 jmp     #.wait_byte
29d08 08e             | .get_byte
29d08 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
29d0c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
29d10 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
29d14 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
29d18 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
29d1c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
29d20 094             | .end_crc
29d20 094 01 B8 06 F1 |                 add     pkt_cnt, #1
29d24 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
29d28 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
29d2c 097 2D 00 64 1D |         if_a    ret
29d30 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
29d30 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
29d30 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
29d30 098             | ' to miss it, so cheat a bit and look for SOP clear here.
29d30 098 22 A7 82 FA |                 rqpin   urx, dm
29d34 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
29d38 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
29d3c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
29d3c 09b             | .chk_crc
29d3c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
29d40 09c 58 00 00 FF 
29d44 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
29d48 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
29d4c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
29d50 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
29d54 0a1 34 09 B0 FD |                 call    #poll_waitx
29d58 0a2             | 
29d58 0a2             |                 ' Fall through to utx_handshake
29d58 0a2             | 
29d58 0a2             | '------------------------------------------------------------------------------
29d58 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
29d58 0a2             | ' the appropriate IP delay has been inserted.
29d58 0a2             | '------------------------------------------------------------------------------
29d58 0a2             | ' On entry:
29d58 0a2             | '   retval - handshake PID to send.
29d58 0a2             | ' On exit:
29d58 0a2             | '   retval unchanged.
29d58 0a2             | '------------------------------------------------------------------------------
29d58 0a2             | utx_handshake
29d58 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29d5c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
29d60 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
29d64 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
29d68 0a6 5F A5 02 F6 |                 mov     utx, retval
29d6c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
29d70 0a8             | .idle
29d70 0a8 22 A7 82 FA |                 rqpin   urx, dm
29d74 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29d78 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
29d7c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
29d80 0ac 08 09 90 FD |                 jmp     #poll_waitx
29d84 0ad             | 
29d84 0ad             | '------------------------------------------------------------------------------
29d84 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
29d84 0ad             | '------------------------------------------------------------------------------
29d84 0ad             | ' On entry:
29d84 0ad             | '   utx - byte to transmit.
29d84 0ad             | ' On exit:
29d84 0ad             | '------------------------------------------------------------------------------
29d84 0ad             | utx_byte
29d84 0ad 40 46 72 FD |                 testp   dp                      wc
29d88 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
29d8c 0af 23 03 08 FC |                 akpin   dp
29d90 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
29d94 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
29d98 0b2             | 
29d98 0b2             | '------------------------------------------------------------------------------
29d98 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
29d98 0b2             | '------------------------------------------------------------------------------
29d98 0b2             | ' On entry:
29d98 0b2             | ' On exit:
29d98 0b2             | '   retval - the byte read.
29d98 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
29d98 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
29d98 0b2             | '     received.
29d98 0b2             | '------------------------------------------------------------------------------
29d98 0b2             | urx_next
29d98 0b2 22 A7 8A FA |                 rdpin   urx, dm
29d9c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
29da0 0b4 53 A5 02 F5 |                 and     utx, urx
29da4 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
29da8 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
29dac 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
29db0 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
29db4 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29db8 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
29dbc 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
29dc0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
29dc4 0bd 2D 00 64 FD |                 ret
29dc8 0be             | 
29dc8 0be             | '------------------------------------------------------------------------------
29dc8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
29dc8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
29dc8 0be             | ' length, and the PID is not included in the CRC calculation:
29dc8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
29dc8 0be             | '  CRC5  ENDP ADDRESS PID
29dc8 0be             | ' %00000_1111_1111111_xxxxxxxx
29dc8 0be             | '------------------------------------------------------------------------------
29dc8 0be             | ' On entry:
29dc8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
29dc8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
29dc8 0be             | ' On exit:
29dc8 0be             | '   ep_addr_pid - CRC value appended to the packet.
29dc8 0be             | '------------------------------------------------------------------------------
29dc8 0be             | calc_crc5
29dc8 0be FF 03 00 FF 
29dcc 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
29dd0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
29dd4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
29dd8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
29ddc 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
29de0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
29de4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
29de8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
29dec 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
29df0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
29df4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
29df8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
29dfc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
29e00 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
29e04 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
29e08 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
29e0c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
29e10 0d0             | 
29e10 0d0             | '------------------------------------------------------------------------------
29e10 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
29e10 0d0             | '------------------------------------------------------------------------------
29e10 0d0             | isr1_fsframe
29e10 0d0 1A 92 62 FD |                 getct   iframe_ct_base
29e14 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29e18 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
29e1c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
29e20 0d4             | .wait
29e20 0d4 40 46 72 FD |                 testp   dp                      wc
29e24 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
29e28 0d6 23 03 08 FC |                 akpin   dp
29e2c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
29e30 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
29e34 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
29e38 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
29e3c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
29e40 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
29e44 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
29e48 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
29e4c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
29e50 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
29e54 0e1 2C FF BF FD |                 call    #utx_byte
29e58 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
29e5c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
29e60 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
29e64 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
29e68 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
29e6c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
29e70 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
29e74 0e9 5B A5 42 F5 |                 or      utx, icrc
29e78 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
29e7c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
29e80 0ec 20 00 90 FD |                 jmp     #isr1_wait
29e84 0ed             | isr1_lsframe
29e84 0ed 1A 92 62 FD |                 getct   iframe_ct_base
29e88 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29e8c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
29e90 0f0             | .wait
29e90 0f0 40 46 72 FD |                 testp   dp                      wc
29e94 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
29e98 0f2 23 03 08 FC |                 akpin   dp
29e9c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
29ea0 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
29ea4 0f5             | isr1_wait
29ea4 0f5 22 A5 82 FA |                 rqpin   utx, dm
29ea8 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
29eac 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
29eb0 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
29eb4 0f9 03 00 00 FF 
29eb8 0fa FF B3 06 F5 |                 and     frame, ##$7ff
29ebc 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
29ec0 0fc F5 FF 3B FB |                 reti1
29ec4 0fd             | 
29ec4 0fd             | '------------------------------------------------------------------------------
29ec4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
29ec4 0fd             | ' transaction will complete before the next frame is triggered.
29ec4 0fd             | '------------------------------------------------------------------------------
29ec4 0fd             | ' On entry:
29ec4 0fd             | ' On exit:
29ec4 0fd             | '------------------------------------------------------------------------------
29ec4 0fd             | wait_txn_ok
29ec4 0fd 1A 74 63 FD |                 getct   htmp2
29ec8 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
29ecc 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29ed0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
29ed4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
29ed8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
29edc 103 2D 00 64 FD |                 ret
29ee0 104             | 
29ee0 104             | '------------------------------------------------------------------------------
29ee0 104             | ' A device connection was detected, or a bus reset was requested by the USB
29ee0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
29ee0 104             | ' and perform a reset sequence prior to device enumeration.
29ee0 104             | '------------------------------------------------------------------------------
29ee0 104             | dev_reset
29ee0 104 22 A7 82 FA |                 rqpin   urx, dm
29ee4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
29ee8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
29eec 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
29ef0 108             | reset
29ef0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
29ef4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
29ef8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
29efc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
29f00 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
29f04 10d 1A 92 62 FD |                 getct   iframe_ct_base
29f08 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29f0c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
29f10 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
29f14 111 24 70 07 F1 |                 add     htmp, #36
29f18 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
29f1c 113             | .framewait
29f1c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
29f20 114 F8 FF 9F CD |         if_b    jmp     #.framewait
29f24 115 2D 00 64 FD |                 ret
29f28 116             | 
29f28 116             | '------------------------------------------------------------------------------
29f28 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
29f28 116             | '------------------------------------------------------------------------------
29f28 116             | ' On entry:
29f28 116             | '   PTRA - source address.
29f28 116             | '   PB - destination address.
29f28 116             | '   hr0 - length of copy, in bytes.
29f28 116             | ' On exit:
29f28 116             | '------------------------------------------------------------------------------
29f28 116             | hmemcpy
29f28 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
29f2c 117 F7 71 43 FC |                 wrbyte  htmp, pb
29f30 118 01 EE 07 F1 |                 add     pb, #1
29f34 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
29f38 11a             | 
29f38 11a             | '------------------------------------------------------------------------------
29f38 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
29f38 11a             | ' loop until the errant device is disconnected.
29f38 11a             | '------------------------------------------------------------------------------
29f38 11a             | ' On entry:
29f38 11a             | ' On exit:
29f38 11a             | '------------------------------------------------------------------------------
29f38 11a             | host_error
29f38 11a             |           if ERROR_LED >= 0
29f38 11a             |           end
29f38 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
29f3c 11b             | 
29f3c 11b             | '------------------------------------------------------------------------------
29f3c 11b             | ' Get HID descriptor buffer for current port
29f3c 11b             | '------------------------------------------------------------------------------
29f3c 11b             | ' On entry:
29f3c 11b             | ' On exit:
29f3c 11b             | '   PB - HID descriptor buffer pointer
29f3c 11b             | '------------------------------------------------------------------------------
29f3c 11b             | get_hid_descr_buffer
29f3c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
29f40 11c 01 EE E7 F2 |                 cmpsub  pb, #1
29f44 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
29f48 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
29f4c 11f             | 
29f4c 11f             | 
29f4c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
29f50 120             | 
29f50 120             | ' USB commands and error codes
29f50 120 00 00 00 00 | cmd_data        long    0
29f54 121 00 00 00 00 | usb_err_code    long    ERR_NONE
29f58 122             | 
29f58 122             | ' Parameters block assigned at cog startup
29f58 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
29f5c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
29f60 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
29f64 125             | if ACTIVITY_LED >= 0
29f64 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
29f64 125             | end
29f64 125             | if ERROR_LED >= 0
29f64 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
29f64 125             | end
29f64 125 00 00 00 00 | hid_descr_p     long    0
29f68 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
29f68 126             | 'hkbd_report_p   long    0
29f68 126 00 00 00 00 | hub_descr_p     long    0
29f6c 127 00 00 00 00 | urx_buff_p      long    0
29f70 128 00 00 00 00 | dev_desc_buff_p long    0
29f74 129 00 00 00 00 | con_desc_buff_p long    0
29f78 12a 00 00 00 00 | cache_start_p   long    0
29f7c 12b 00 00 00 00 | cache_end_p     long    0
29f80 12c             | if EMUPAD_MAX_PLAYER > 0
29f80 12c             | emupad_out_ptr  long    0
29f80 12c             | end
29f80 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
29f84 12d             | 
29f84 12d             | hdev_init_start
29f84 12d             | hdev_port       res     1
29f84 12d             | hdev_port       res     1
29f84 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
29f84 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
29f84 12d             | kbm_next_datax  res     1
29f84 12d             | kbm_next_datax  res     1
29f84 12d             | hub_intf_num    res     1
29f84 12d             | hub_intf_num    res     1
29f84 12d             | hub_next_datax  res     1
29f84 12d             | hub_next_datax  res     1
29f84 12d             | hub_status_chg  res     1
29f84 12d             | hub_status_chg  res     1
29f84 12d             | hub_port_status res     1
29f84 12d             | hub_port_status res     1
29f84 12d             | if HAVE_MOUSE
29f84 12d             | ms_intf_num     res     1
29f84 12d             | ms_intf_num     res     1
29f84 12d             | ms_in_max_pkt   res     1
29f84 12d             | ms_in_max_pkt   res     1
29f84 12d             | end
29f84 12d             | kb_intf_num     res     1
29f84 12d             | kb_intf_num     res     1
29f84 12d             | kb_interval     res     1
29f84 12d             | kb_interval     res     1
29f84 12d             | kb_in_max_pkt   res     1
29f84 12d             | kb_in_max_pkt   res     1
29f84 12d             | kb_max_index    res     1
29f84 12d             | kb_max_index    res     1
29f84 12d             | kb_led_states   res     1
29f84 12d             | kb_led_states   res     1
29f84 12d             | gp_intf_num     res     1
29f84 12d             | gp_intf_num     res     1
29f84 12d             | gp_interval     res     1
29f84 12d             | gp_interval     res     1
29f84 12d             | gp_max_index    res     1
29f84 12d             | gp_max_index    res     1
29f84 12d             | gp_descr_len    res     1+MAX_DEVICES
29f84 12d             | gp_descr_len    res     1+MAX_DEVICES
29f84 12d             | hdev_init_end
29f84 12d             | 
29f84 12d             | ' Initialized at cog startup:
29f84 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
29f84 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
29f84 12d             | iframe_ct_new   res     1
29f84 12d             | iframe_ct_new   res     1
29f84 12d             | iframe_ct_base  res     1
29f84 12d             | iframe_ct_base  res     1
29f84 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
29f84 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
29f84 12d             | 
29f84 12d             | ' This register block is reset to zero when a USB device connects
29f84 12d             | hreg_init_start
29f84 12d             | hstatus         res     1         ' Host status flags
29f84 12d             | hstatus         res     1         ' Host status flags
29f84 12d             | hctwait         res     1         ' Poll-based wait clocks
29f84 12d             | hctwait         res     1         ' Poll-based wait clocks
29f84 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
29f84 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
29f84 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
29f84 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
29f84 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
29f84 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
29f84 12d             | xfer_retry      res     1         ' Control transfer retry count
29f84 12d             | xfer_retry      res     1         ' Control transfer retry count
29f84 12d             | retry           res     1         ' Transaction retry count
29f84 12d             | retry           res     1         ' Transaction retry count
29f84 12d             | utx             res     1         ' Byte to transmit on USB
29f84 12d             | utx             res     1         ' Byte to transmit on USB
29f84 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
29f84 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
29f84 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
29f84 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
29f84 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
29f84 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
29f84 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
29f84 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
29f84 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
29f84 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
29f84 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
29f84 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
29f84 12d             | frame           res     1         ' USB 1ms frame counter value
29f84 12d             | frame           res     1         ' USB 1ms frame counter value
29f84 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
29f84 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
29f84 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
29f84 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
29f84 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
29f84 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
29f84 12d             | crc             res     1         ' Used for CRC16 calculation
29f84 12d             | crc             res     1         ' Used for CRC16 calculation
29f84 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
29f84 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
29f84 12d             | retval          res     1         ' Global success/fail return parameter
29f84 12d             | retval          res     1         ' Global success/fail return parameter
29f84 12d             | context_retval  res     1         ' Operation contextual return parameter
29f84 12d             | context_retval  res     1         ' Operation contextual return parameter
29f84 12d             | ' Device stuff
29f84 12d             | hdev_id         res     1+MAX_DEVICES
29f84 12d             | hdev_id         res     1+MAX_DEVICES
29f84 12d             | hdev_bcd        res     1
29f84 12d             | hdev_bcd        res     1
29f84 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
29f84 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
29f84 12d             | ' Keyboard/mouse stuff
29f84 12d             | hctrl_ep_addr   res     1
29f84 12d             | hctrl_ep_addr   res     1
29f84 12d             | hctrl_max_pkt   res     1
29f84 12d             | hctrl_max_pkt   res     1
29f84 12d             | hconfig_base    res     1
29f84 12d             | hconfig_base    res     1
29f84 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
29f84 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
29f84 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
29f84 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
29f84 12d             | hdev_class      res     1
29f84 12d             | hdev_class      res     1
29f84 12d             | hdev_subclass   res     1
29f84 12d             | hdev_subclass   res     1
29f84 12d             | hdev_protocol   res     1
29f84 12d             | hdev_protocol   res     1
29f84 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
29f84 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
29f84 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
29f84 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
29f84 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
29f84 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
29f84 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
29f84 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
29f84 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
29f84 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
29f84 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
29f84 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
29f84 12d             | if HAVE_MOUSE
29f84 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
29f84 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
29f84 12d             | end
29f84 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
29f84 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
29f84 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
29f84 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
29f84 12d             | hdev_ep_addr    res     1+MAX_DEVICES
29f84 12d             | hdev_ep_addr    res     1+MAX_DEVICES
29f84 12d             | hdev_out_addr   res     1
29f84 12d             | hdev_out_addr   res     1
29f84 12d             | 
29f84 12d             | if EMUPAD_MAX_PLAYER > 0
29f84 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
29f84 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
29f84 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
29f84 12d             | end
29f84 12d             | 
29f84 12d             | hreg_init_end
29f84 12d             | 
29f84 12d             | hidr_start
29f84 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
29f84 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
29f84 12d             | hidr_flags      res     1
29f84 12d             | hidr_flags      res     1
29f84 12d             | hidr_axis       res     3
29f84 12d             | hidr_axis       res     3
29f84 12d             | hidr_buttons    res     1
29f84 12d             | hidr_buttons    res     1
29f84 12d             | hidr_hats       res     1
29f84 12d             | hidr_hats       res     1
29f84 12d             | '' Above are actually useful values, 6 longs
29f84 12d             | hidr_id         res     1
29f84 12d             | hidr_id         res     1
29f84 12d             | hidr_state      res     1
29f84 12d             | hidr_state      res     1
29f84 12d             | hidr_size       res     1
29f84 12d             | hidr_size       res     1
29f84 12d             | hidr_count      res     1
29f84 12d             | hidr_count      res     1
29f84 12d             | hidr_offset     res     1
29f84 12d             | hidr_offset     res     1
29f84 12d             | hidr_usage_idx  res     1
29f84 12d             | hidr_usage_idx  res     1
29f84 12d             | hidr_lminmax    res     1
29f84 12d             | hidr_lminmax    res     1
29f84 12d             | hidr_pminmax    res     1
29f84 12d             | hidr_pminmax    res     1
29f84 12d             | hidr_type       res     1
29f84 12d             | hidr_type       res     1
29f84 12d             | hidr_end
29f84 12d             | 
29f84 12d             | ' Variables dependent on the system freqency
29f84 12d             | _var_64_lower_  res     1
29f84 12d             | _var_64_lower_  res     1
29f84 12d             | _var_64_upper_  res     1
29f84 12d             | _var_64_upper_  res     1
29f84 12d             | _12Mbps_        res     1
29f84 12d             | _12Mbps_        res     1
29f84 12d             | _1_5Mbps_       res     1
29f84 12d             | _1_5Mbps_       res     1
29f84 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
29f84 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
29f84 12d             | _1us_           res     1         ' 1us
29f84 12d             | _1us_           res     1         ' 1us
29f84 12d             | _10us_          res     1         ' 10us
29f84 12d             | _10us_          res     1         ' 10us
29f84 12d             | _33us_          res     1         ' 33us
29f84 12d             | _33us_          res     1         ' 33us
29f84 12d             | _txn_err_       res     1         ' 250us
29f84 12d             | _txn_err_       res     1         ' 250us
29f84 12d             | _500us_         res     1         ' 500us
29f84 12d             | _500us_         res     1         ' 500us
29f84 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
29f84 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
29f84 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
29f84 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
29f84 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
29f84 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
29f84 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
29f84 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
29f84 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
29f84 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
29f84 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
29f84 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
29f84 12d             | _preamble_wait_ res     1
29f84 12d             | _preamble_wait_ res     1
29f84 12d             | _1ms_           res     1         ' 1ms
29f84 12d             | _1ms_           res     1         ' 1ms
29f84 12d             | _2ms_           res     1         ' 2ms
29f84 12d             | _2ms_           res     1         ' 2ms
29f84 12d             | _suspend_wait_  res     1         ' 3ms
29f84 12d             | _suspend_wait_  res     1         ' 3ms
29f84 12d             | _4ms_           res     1         ' 4ms
29f84 12d             | _4ms_           res     1         ' 4ms
29f84 12d             | _xfer_wait_     res     1         ' 5ms
29f84 12d             | _xfer_wait_     res     1         ' 5ms
29f84 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
29f84 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
29f84 12d             | _reset_hold_    res     1         ' 15ms
29f84 12d             | _reset_hold_    res     1         ' 15ms
29f84 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
29f84 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
29f84 12d             | _21ms_          res     1         ' 21ms
29f84 12d             | _21ms_          res     1         ' 21ms
29f84 12d             | _100ms_         res     1         ' 100ms
29f84 12d             | _100ms_         res     1         ' 100ms
29f84 12d             | _500ms_         res     1         ' 500ms
29f84 12d             | _500ms_         res     1         ' 500ms
29f84 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
29f84 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
29f84 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
29f84 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
29f84 12d             | '------------------------------------------------------------------------------
29f84 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
29f84 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
29f84 12d             | _usb_d_ls_nco_  res     1
29f84 12d             | _usb_d_ls_nco_  res     1
29f84 12d             | _usb_h_fs_nco_  res     1
29f84 12d             | _usb_h_fs_nco_  res     1
29f84 12d             | _usb_d_fs_nco_  res     1
29f84 12d             | _usb_d_fs_nco_  res     1
29f84 12d             | '------------------------------------------------------------------------------
29f84 12d             | ' Scratch registers
29f84 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
29f84 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
29f84 12d             | htmp1           res     1
29f84 12d             | htmp1           res     1
29f84 12d             | htmp2           res     1
29f84 12d             | htmp2           res     1
29f84 12d             | htmp3           res     1
29f84 12d             | htmp3           res     1
29f84 12d             | hrep            res     1         ' Repeat count
29f84 12d             | hrep            res     1         ' Repeat count
29f84 12d             | hsave0          res     1         ' Subroutine parameter saves
29f84 12d             | hsave0          res     1         ' Subroutine parameter saves
29f84 12d             | hsave1          res     1
29f84 12d             | hsave1          res     1
29f84 12d             | hsave2          res     1
29f84 12d             | hsave2          res     1
29f84 12d             | isrtmp1         res     1
29f84 12d             | isrtmp1         res     1
29f84 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
29f84 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
29f84 12d             | hr0             res     1         ' Multi-purpose registers
29f84 12d             | hr0             res     1         ' Multi-purpose registers
29f84 12d             | hr1             res     1
29f84 12d             | hr1             res     1
29f84 12d             | hr2             res     1
29f84 12d             | hr2             res     1
29f84 12d             | hr3             res     1
29f84 12d             | hr3             res     1
29f84 12d             | hpar1           res     1         ' Routine entry/exit parameters
29f84 12d             | hpar1           res     1         ' Routine entry/exit parameters
29f84 12d             | hpar2           res     1
29f84 12d             | hpar2           res     1
29f84 12d             | hpar3           res     1
29f84 12d             | hpar3           res     1
29f84 12d             | hct2            res     1         ' Function response bus turn-around timer
29f84 12d             | hct2            res     1         ' Function response bus turn-around timer
29f84 12d             | hct3            res     1         ' Keyboard/mouse poll timer
29f84 12d             | hct3            res     1         ' Keyboard/mouse poll timer
29f84 12d             | mod_cnt         res     1         ' Used in idle loops
29f84 12d             | mod_cnt         res     1         ' Used in idle loops
29f84 12d             |                 fit     $1F0
29f84 12d             |                 org     $200
29f84 200             | hlut_start
29f84 200             | 
29f84 200             | '------------------------------------------------------------------------------
29f84 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
29f84 200             | ' settings to startup defaults.
29f84 200             | '------------------------------------------------------------------------------
29f84 200             | ' On entry:
29f84 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
29f84 200             | '------------------------------------------------------------------------------
29f84 200             | set_speed_full
29f84 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
29f88 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
29f8c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
29f90 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
29f94 204             | '                ret                             wcz     ' Restore caller flags on exit
29f94 204             | 
29f94 204             | '------------------------------------------------------------------------------
29f94 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
29f94 204             | ' is a downstream hub connected (not yet implemented), the baud generator
29f94 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
29f94 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
29f94 204             | ' putting the smart pins into reset.
29f94 204             | '------------------------------------------------------------------------------
29f94 204             | ' On entry:
29f94 204             | ' On exit: CZ flags restored to caller states
29f94 204             | '------------------------------------------------------------------------------
29f94 204             | set_speed_low
29f94 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
29f98 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
29f9c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
29fa0 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
29fa4 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
29fa8 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
29fac 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
29fb0 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
29fb4 20c             | 
29fb4 20c             | '------------------------------------------------------------------------------
29fb4 20c             | ' Perform configuration stuff required when a device intitially connects.
29fb4 20c             | '------------------------------------------------------------------------------
29fb4 20c             | ' On entry:
29fb4 20c             | ' On exit:
29fb4 20c             | '------------------------------------------------------------------------------
29fb4 20c             | on_connect
29fb4 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
29fb8 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
29fbc 20e             | .retry
29fbc 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29fc0 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
29fc4 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
29fc8 211 00 08 00 FF 
29fcc 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
29fd0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
29fd4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
29fd8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
29fdc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
29fe0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
29fe4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29fe8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
29fec 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
29ff0 21b 4C 03 B0 FD |                 call    #poll_waitx
29ff4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
29ff8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
29ffc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2a000 21f B8 FF 9F FD |                 jmp     #.retry
2a004 220             | .get_dev_desc
2a004 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2a008 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2a00c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2a010 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2a014 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2a018 225 88 FB BF FD |                 call    #reset
2a01c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2a020 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a024 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2a028 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2a02c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a030 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a034 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2a038 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2a03c 22e 04 00 00 FF 
2a040 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2a044 230 34 FA BF FD |                 call    #calc_crc5
2a048 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2a04c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a050 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2a054 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2a058 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2a05c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2a060 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a064 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a068 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2a06c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2a070 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2a074 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2a078 23d C4 02 B0 FD |                 call    #poll_waitx
2a07c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2a080 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a084 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2a088 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2a08c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2a090 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a094 244 2D 00 64 5D |         if_nz   ret
2a098 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2a09c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2a0a0 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2a0a4 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2a0a8 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2a0ac 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2a0b0 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2a0b4 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2a0b8 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2a0bc 24e 2C FB 9F CD |         if_b    jmp     #host_error
2a0c0 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2a0c4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a0c8 251 2D EC 63 FD |                 call    pa
2a0cc 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2a0d0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a0d4 254 2C EC 63 FD |                 jmp     pa
2a0d8 255             | 
2a0d8 255             | '------------------------------------------------------------------------------
2a0d8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2a0d8 255             | ' Status reporting is always in the function-to-host direction.
2a0d8 255             | '------------------------------------------------------------------------------
2a0d8 255             | ' On entry:
2a0d8 255             | '   PTRA - start address of the SETUP data in hub.
2a0d8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2a0d8 255             | '     stage.
2a0d8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2a0d8 255             | ' On exit:
2a0d8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2a0d8 255             | '     contains the count of data stage bytes actually received, which must
2a0d8 255             | '     always be <= the count requested.
2a0d8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a0d8 255             | '     more specific USB operation error code.
2a0d8 255             | '------------------------------------------------------------------------------
2a0d8 255             | control_read
2a0d8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a0dc 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2a0e0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2a0e4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a0e8 259             | .xfer_start
2a0e8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a0ec 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a0f0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a0f4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2a0f8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a0fc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a100 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a104 260 61 00 00 FF 
2a108 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2a10c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a110 263             | .data
2a110 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2a114 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a118 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a11c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2a120 267             | .nak_retry
2a120 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2a124 268             | .in_retry
2a124 268 BC F6 BF FD |                 call    #txn_in
2a128 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2a12c 26a 28 00 90 AD |         if_z    jmp     #.commit
2a130 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a134 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a138 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a13c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a140 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2a144 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a148 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a14c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a150 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2a154 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2a158 275             | .commit
2a158 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2a15c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2a160 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2a164 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2a168 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2a16c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a170 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2a174 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2a178 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2a17c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2a180 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2a184 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2a188 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2a18c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2a190 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a194 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2a198 285             | .pre_status
2a198 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2a19c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2a1a0 287 00 B0 06 F6 |                 mov     pkt_data, #0
2a1a4 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2a1a8 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a1ac 28a 61 00 00 FF 
2a1b0 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2a1b4 28c             | .out_retry
2a1b4 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2a1b8 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a1bc 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2a1c0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a1c4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a1c8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a1cc 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a1d0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a1d4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a1d8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2a1dc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2a1e0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2a1e0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2a1e0 297             | ' ControlRead() transfer gets things unstuck most of the time...
2a1e0 297             | .xfer_retry
2a1e0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2a1e4 298 58 01 B0 FD |                 call    #poll_waitx
2a1e8 299 8C F9 BF FD |                 call    #wait_txn_ok
2a1ec 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2a1f0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2a1f4 29c C8 EF 03 F6 |                 mov     pb, hpar3
2a1f8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2a1fc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2a200 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2a204 2a0             | 
2a204 2a0             | '------------------------------------------------------------------------------
2a204 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2a204 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2a204 2a0             | ' the SETUP data struct is filled with the required values.
2a204 2a0             | '------------------------------------------------------------------------------
2a204 2a0             | ' On entry:
2a204 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2a204 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2a204 2a0             | '     stage.
2a204 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2a204 2a0             | ' On exit:
2a204 2a0             | '   retval - used to convey the success/failure of each stage.
2a204 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a204 2a0             | '     more specific USB operation error code.
2a204 2a0             | '------------------------------------------------------------------------------
2a204 2a0             | control_write
2a204 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a208 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a20c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a210 2a3             | 
2a210 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a214 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2a218 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2a21c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a220 2a7             | .xfer_start
2a220 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2a224 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a228 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a22c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a230 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2a234 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a238 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a23c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a240 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2a244 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a248 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a24c 2b2             | .data
2a24c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2a250 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a254 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a258 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2a25c 2b6             | .out_retry
2a25c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2a260 2b7 88 F6 BF FD |                 call    #txn_out
2a264 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a268 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2a26c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a270 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2a274 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2a278 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2a27c 2be             | .commit
2a27c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2a280 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2a284 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2a288 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a28c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2a290 2c3             | pre_status_in
2a290 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2a294 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a298 2c5             | .status_retry
2a298 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2a29c 2c6 44 F5 BF FD |                 call    #txn_in
2a2a0 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2a2a4 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2a2a8 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2a2ac 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2a2b0 2cb 2D 00 64 AD |         if_z    ret
2a2b4 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2a2b8 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a2bc 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2a2c0 2cf             | '               ret                                     ' Caller must handle transfer retirement
2a2c0 2cf             | 
2a2c0 2cf             | '------------------------------------------------------------------------------
2a2c0 2cf             | ' Execute an IN interrupt transaction.
2a2c0 2cf             | '------------------------------------------------------------------------------
2a2c0 2cf             | ' On entry:
2a2c0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2a2c0 2cf             | '   hpar2 - Address of the IN data buffer
2a2c0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2a2c0 2cf             | ' On exit:
2a2c0 2cf             | '   retval - the result of the operation.
2a2c0 2cf             | '   hpar3 - the count of IN data bytes actually received.
2a2c0 2cf             | '------------------------------------------------------------------------------
2a2c0 2cf             | do_int_in
2a2c0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a2c4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a2c8 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a2cc 2d2             | 
2a2cc 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2a2d0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2a2d4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2a2d8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2a2dc 2d6             | .retry
2a2dc 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2a2e0 2d7 00 F5 BF FD |                 call    #txn_in
2a2e4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2a2e8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2a2ec 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2a2f0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2a2f4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2a2f8 2dd 54 00 B0 FD |                 call    #retry_wait
2a2fc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a300 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2a304 2e0 D4 FF 9F FD |                 jmp     #.retry
2a308 2e1             | .commit
2a308 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2a30c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2a310 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2a314 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2a318 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a31c 2e6             | .post_ret
2a31c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2a320 2e7             | 
2a320 2e7             | 
2a320 2e7             | '------------------------------------------------------------------------------
2a320 2e7             | ' Resets the downstream hub port to FS
2a320 2e7             | '------------------------------------------------------------------------------
2a320 2e7             | dwnstream_reset
2a320 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a324 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2a328 2e9             | 
2a328 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2a32c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2a330 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a334 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a338 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2a33c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2a340 2ef             | 
2a340 2ef             | '------------------------------------------------------------------------------
2a340 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2a340 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2a340 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2a340 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2a340 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2a340 2ef             | '------------------------------------------------------------------------------
2a340 2ef             | ' On entry:
2a340 2ef             | '   hctwait - wait interval in sysclocks.
2a340 2ef             | ' On exit:
2a340 2ef             | '------------------------------------------------------------------------------
2a340 2ef             | poll_waitx
2a340 2ef 1A 92 63 FD |                 getct   hct2
2a344 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2a348 2f1             | .wait
2a348 2f1 FF 25 CC FB |                 jnct2   #.wait
2a34c 2f2 2D 00 64 FD |                 ret
2a350 2f3             | 
2a350 2f3             | '------------------------------------------------------------------------------
2a350 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2a350 2f3             | '------------------------------------------------------------------------------
2a350 2f3             | ' On entry:
2a350 2f3             | '   retval - transaction response PID or error code.
2a350 2f3             | ' On exit:
2a350 2f3             | '------------------------------------------------------------------------------
2a350 2f3             | retry_wait
2a350 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a354 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2a358 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a35c 2f6 14 00 90 AD |         if_z    jmp     #.nak
2a360 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2a364 2f8 D8 FF BF FD |                 call    #poll_waitx
2a368 2f9             | .dec
2a368 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2a36c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2a370 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2a374 2fc             | .nak
2a374 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2a378 2fd C4 FF BF FD |                 call    #poll_waitx
2a37c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2a380 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2a384 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2a388 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2a38c 302 2D 00 64 FD |                 ret
2a390 303             | 
2a390 303             | host_reset
2a390 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2a394 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2a398 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2a398 305 BD 01 05 FF 
2a39c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2a3a0 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2a3a4 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2a3a8 309             | ' Check to see if the system clock has been changed.
2a3a8 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a3ac 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2a3b0 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2a3b4 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2a3b8 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a3bc 30e 40 46 62 FD |                 dirl    dp
2a3c0 30f             | 
2a3c0 30f 28 02 64 FD |                 setq    #1
2a3c4 310 80 00 80 FF 
2a3c8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2a3cc 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2a3d0 313             | .enable
2a3d0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2a3d4 314 41 46 62 FD |                 dirh    dp
2a3d8 315 1F 36 63 FD |                 waitx   _1us_
2a3dc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a3e0 317             | 
2a3e0 317             |                 ' Handle Port protection enable and startup delay
2a3e0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2a3e4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2a3e8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2a3ec 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2a3f0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2a3f4 31c             | 
2a3f4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2a3f8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2a3fc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2a400 31f 00 00 04 F6 |                 mov     0-0, #0
2a404 320             | .regloop
2a404 320             | 
2a404 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2a404 320             | 
2a404 320             | discon_entry
2a404 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2a408 321             | 
2a408 321             |               
2a408 321             |         if HAVE_HIDPAD
2a408 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2a40c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a410 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2a414 324 F7 01 68 FC |                 wrlong  #0,pb
2a418 325             |         end
2a418 325             |         if EMUPAD_MAX_PLAYER > 0
2a418 325             |         end
2a418 325             | 
2a418 325             |                 ' Fall through to disconnected loop
2a418 325             | 
2a418 325             | '-----------------------------------------------------------------------------------------------------------------
2a418 325             | ' Device connect handling (Section 7.1.7.3).
2a418 325             | '-----------------------------------------------------------------------------------------------------------------
2a418 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2a418 325             | ' device to connect (Section 7.1.7.3).
2a418 325             | '-----------------------------------------------------------------------------------------------------------------
2a418 325             | disconnected
2a418 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2a41c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2a420 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2a424 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2a428 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2a42c 32a             |         if ACTIVITY_LED >= 0
2a42c 32a             |         end
2a42c 32a 22 A7 82 FA |                 rqpin   urx, dm
2a430 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2a434 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2a438 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2a43c 32e             | .se1_test
2a43c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2a440 32f FC FE BF FD |                 call    #poll_waitx
2a444 330 22 A7 82 FA |                 rqpin   urx, dm
2a448 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a44c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2a450 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2a454 334             | .se1            'SE1 is a fatal error condition
2a454 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2a458 335 E4 FE BF FD |                 call    #poll_waitx
2a45c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2a460 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2a464 338             | .connect_test                                           ' Test lines until stable J/K state seen
2a464 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2a468 339 22 A7 82 FA |                 rqpin   urx, dm
2a46c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a470 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2a474 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2a478 33d             | connected
2a478 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2a47c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2a480 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2a484 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2a488 341             | .set_pulse
2a488 341 1A 64 63 FD |                 getct   _pulse_time_
2a48c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2a490 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2a490 343             | ' of 1ms and make a correction, if necessary.
2a490 343             | '                mov     htmp, _1ms_
2a490 343             | '                subs    htmp, iframe_delta
2a490 343             | '                adds    _frame1ms_clks_, htmp
2a490 343             | '                debug(udec(_frame1ms_clks_))
2a490 343             | 
2a490 343             |                 ' Fall through to idle/processing loop
2a490 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2a494 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2a498 345             | 
2a498 345             | hidle
2a498 345 22 A7 82 FA |                 rqpin   urx, dm
2a49c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a4a0 347 98 00 90 CD |         if_c    jmp     #.se0_test
2a4a4 348 24 06 70 FD |                 pollct3                         wc
2a4a8 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2a4ac 34a 1A 94 63 FD |                 getct   hct3
2a4b0 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2a4b4 34c             | 
2a4b4 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2a4b8 34d 00 70 E3 F8 |                 getbyte htmp
2a4bc 34e             | 
2a4bc 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2a4c0 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2a4c4 350 40 00 90 AD |         if_z    jmp     #.poll
2a4c8 351             | 
2a4c8 351             |         if _HAVE_GAMEPAD
2a4c8 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2a4cc 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2a4d0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2a4d4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2a4d8 355 2C 00 90 AD |         if_z    jmp     #.poll
2a4dc 356             |         end
2a4dc 356             | 
2a4dc 356             |         if HAVE_MOUSE
2a4dc 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2a4e0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a4e4 358 20 00 90 AD |         if_z    jmp     #.poll
2a4e8 359             |         end
2a4e8 359             | 
2a4e8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2a4ec 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2a4f0 35b 14 00 90 AD |         if_z    jmp     #.poll
2a4f4 35c             | 
2a4f4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2a4f8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2a4fc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2a500 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2a504 360             |         if HAVE_MOUSE
2a504 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a508 361             |         else
2a508 361             |         end
2a508 361             | 
2a508 361             | .poll
2a508 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a50c 362 2D EC 63 FD |                 call    pa
2a510 363             | .skip_poll
2a510 363             | 
2a510 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2a514 364             | 
2a514 364             | .nopoll
2a514 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2a518 365 44 00 90 AD |         if_z    jmp     #hsuspend
2a51c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2a520 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2a524 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2a528 369 1A 84 63 FD |                 getct   hr0
2a52c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2a530 36b             |         if ACTIVITY_LED >= 0
2a530 36b             |         end
2a530 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2a534 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2a538 36d 5C FF 9F FD |                 jmp     #hidle
2a53c 36e             | ' Check for extended SE0 state on the bus
2a53c 36e             | .se0_test
2a53c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2a540 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2a544 370 22 A7 82 FA |                 rqpin   urx, dm
2a548 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a54c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2a550 373 24 F6 BF FD |                 call    #wait_txn_ok
2a554 374 00 00 80 FF 
2a558 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2a55c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2a55c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2a560 377             | 
2a560 377             | hsuspend
2a560 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2a564 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2a568 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2a56c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2a570 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2a574 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2a578 37d             | 
2a578 37d             |                 ' Fall through to resume wait loop
2a578 37d             | 
2a578 37d             | hwait_resume
2a578 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2a57c 37e 02 86 47 F0 |                 shr     hr1, #2
2a580 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2a584 380             |         if ACTIVITY_LED >= 0
2a584 380             |         end
2a584 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2a588 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2a58c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2a590 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a594 384 18 00 90 AD |         if_z    jmp     #.resume
2a598 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2a59c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a5a0 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2a5a4 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a5a8 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2a5ac 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2a5b0 38b             | .resume
2a5b0 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2a5b4 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2a5b8 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2a5bc 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2a5c0 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2a5c4 390 1F 70 63 FD |                 waitx   htmp
2a5c8 391 22 07 28 FC |                 wypin   #OUT_J, dm
2a5cc 392 01 70 47 F0 |                 shr     htmp, #1
2a5d0 393 1F 70 63 FD |                 waitx   htmp
2a5d4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a5d8 395 1A 92 62 FD |                 getct   iframe_ct_base
2a5dc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a5e0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a5e4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2a5e8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2a5ec 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2a5f0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2a5f4 39c             | 
2a5f4 39c             | '------------------------------------------------------------------------------
2a5f4 39c             | ' Send preamble to enable low-speed HUB ports
2a5f4 39c             | '------------------------------------------------------------------------------
2a5f4 39c             | ' On entry:
2a5f4 39c             | ' On exit:
2a5f4 39c             | '   USB baud rate set to low-speed
2a5f4 39c             | '------------------------------------------------------------------------------
2a5f4 39c             | utx_pre
2a5f4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a5f8 39d 40 46 62 FD |                 dirl    dp
2a5fc 39e 28 02 64 FD |                 setq    #1
2a600 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2a604 3a0 58 44 62 FD |                 drvl    dm
2a608 3a1 59 46 62 FD |                 drvh    dp
2a60c 3a2             | 
2a60c 3a2 1E 00 00 FF 
2a610 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2a614 3a4             | 
2a614 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2a618 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2a61c 3a6 28 02 64 3D |         if_nc   setq    #1
2a620 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2a624 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2a628 3a9             | .l1
2a628 3a9             | 
2a628 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a62c 3aa 40 46 62 FD |                 dirl    dp
2a630 3ab 28 02 64 FD |                 setq    #1
2a634 3ac 80 00 80 FF 
2a638 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2a63c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2a640 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2a644 3b0 41 46 62 FD |                 dirh    dp
2a648 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a64c 3b2             | 
2a64c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2a650 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2a654 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2a658 3b5             | 
2a658 3b5             | hlut_end
2a658 3b5             |                 fit     $400
2a658 3b5             |                 orgh
2a658                 | if OVERLAP_MEMORY
2a658                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2a658                 | end
2a658                 | '------------------------------------------------------------------------------
2a658                 | ' Routines called from cog space.
2a658                 | '------------------------------------------------------------------------------
2a658                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2a658                 | '------------------------------------------------------------------------------
2a658                 | 
2a658                 | '------------------------------------------------------------------------------
2a658                 | ' USB host cog initialization.
2a658                 | '------------------------------------------------------------------------------
2a658                 | usb_host_init
2a658                 |                 ' Initialize buffer pointers
2a658                 |         if OVERLAP_MEMORY
2a658                 |         else
2a658     40 15 B0 FE |                 loc     pb, #hid_descr
2a65c                 |         end
2a65c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2a660                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2a660                 |                 {
2a660                 |                 }
2a660                 |         
2a660                 |                 {
2a660                 |                 }
2a660                 |                 'loc     pb,#hkbd_report
2a660                 |                 'mov     hkbd_report_p,pb
2a660                 | 
2a660     08 1D B0 FE |                 loc     pb, #hub_descr
2a664     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2a668     1D 1D B0 FE |                 loc     pb, #urx_buff
2a66c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2a670     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2a674     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2a678     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2a67c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2a680     18 15 B0 FE |                 loc     pb, #usb_cache_start
2a684     F7 55 02 F6 |                 mov     cache_start_p, pb
2a688     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2a68c     F7 57 02 F6 |                 mov     cache_end_p, pb
2a690                 | 
2a690                 |         if ERROR_LED >= 0
2a690                 |         end
2a690                 | 
2a690                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2a690                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2a690                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2a690                 | ' Configure and enable the Serial Host USB port.
2a690     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2a694                 | 
2a694                 | '------------------------------------------------------------------------------
2a694                 | ' Timing calculations happen before any interrupt(s) are enabled.
2a694                 | '------------------------------------------------------------------------------
2a694                 | ' On entry:
2a694                 | '   htmp - current CLKFREQ value.
2a694                 | '------------------------------------------------------------------------------
2a694                 | hinit_usb_timings
2a694                 | '                getct   htmp2
2a694     B8 59 02 F6 |                 mov     save_sysclk, htmp
2a698     8D 5B 80 FF 
2a69c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2a6a0     18 30 63 FD |                 getqx   _12Mbps_
2a6a4     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2a6a8     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2a6ac     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2a6b0     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2a6b4     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2a6b8     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2a6bc     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2a6c0     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2a6c4     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2a6c8     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2a6cc     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2a6d0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2a6d4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2a6d8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2a6dc     80 00 00 FF 
2a6e0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2a6e4     18 2C 63 FD |                 getqx   _var_64_lower_
2a6e8     19 2E 63 FD |                 getqy   _var_64_upper_
2a6ec     28 2C 63 FD |                 setq    _var_64_lower_
2a6f0     65 CD 1D FF 
2a6f4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2a6f8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2a6fc     01 00 00 FF 
2a700     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2a704     18 2C 63 FD |                 getqx   _var_64_lower_
2a708     19 2E 63 FD |                 getqy   _var_64_upper_
2a70c     28 2C 63 FD |                 setq    _var_64_lower_
2a710     A1 07 00 FF 
2a714     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2a718     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2a71c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2a720     09 36 57 F0 |                 shr     _1us_, #9               wc
2a724     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2a728     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2a72c     18 38 63 FD |                 getqx   _10us_
2a730     09 38 57 F0 |                 shr     _10us_, #9              wc
2a734     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2a738     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2a73c     18 3A 63 FD |                 getqx   _33us_
2a740     09 3A 57 F0 |                 shr     _33us_, #9              wc
2a744     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2a748     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2a74c     18 3C 63 FD |                 getqx   _txn_err_
2a750     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2a754     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2a758     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2a75c     18 3E 63 FD |                 getqx   _500us_
2a760     09 3E 57 F0 |                 shr     _500us_, #9             wc
2a764     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2a768     01 00 00 FF 
2a76c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2a770     18 40 63 FD |                 getqx   _txn_ok_ls_
2a774     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2a778     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2a77c     01 00 00 FF 
2a780     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2a784     18 42 63 FD |                 getqx   _txn_ok_fs_
2a788     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2a78c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2a790     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2a794     05 00 00 FF 
2a798     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2a79c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2a7a0     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2a7a4     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2a7a8     1C 00 00 FF 
2a7ac     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2a7b0     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2a7b4     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2a7b8     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2a7bc     00 00 00 FF 
2a7c0     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2a7c4     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2a7c8     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2a7cc     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2a7d0     04 00 00 FF 
2a7d4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2a7d8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2a7dc     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2a7e0     8D 5B 00 FF 
2a7e4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2a7e8     18 4C 63 FD |                 getqx   _preamble_wait_
2a7ec     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2a7f0     01 00 00 FF 
2a7f4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2a7f8     18 2C 63 FD |                 getqx   _var_64_lower_
2a7fc     19 2E 63 FD |                 getqy   _var_64_upper_
2a800     28 2C 63 FD |                 setq    _var_64_lower_
2a804     01 00 00 FF 
2a808     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2a80c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2a810     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2a814     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2a818     FF FF 7F FF 
2a81c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2a820     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2a824     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2a828     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2a82c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2a830     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2a834     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2a838     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2a83c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2a840     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2a844     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2a848     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2a84c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2a850     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2a854     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2a858     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2a85c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2a860     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2a864     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2a868     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2a86c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2a870     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2a874     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2a878     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2a87c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2a880     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2a884     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2a888                 | '        _ret_   mov     _1sec_, save_sysclk
2a888                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2a888                 | '                ret
2a888                 | {
2a888                 | }
2a888                 | 
2a888                 | '------------------------------------------------------------------------------
2a888                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2a888                 | ' one. If it is, start the task progression that will configure the device for
2a888                 | ' use.
2a888                 | '------------------------------------------------------------------------------
2a888                 | ' On entry:
2a888                 | '   hconfig_base - start address of the cached config descriptor chain.
2a888                 | ' On exit:
2a888                 | '------------------------------------------------------------------------------
2a888                 | hparse_con_desc
2a888     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2a88c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2a890     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2a894     4E 70 FF F9 |                 movbyts htmp,#%%1032
2a898     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2a89c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2a89c                 | 
2a89c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2a8a0     6E ED 03 F1 |                 add     pa, hconfig_base
2a8a4     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2a8a8                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2a8a8                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2a8a8                 | ' that defines a keyboard and/or mouse.
2a8a8     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2a8ac                 | .next_intf
2a8ac     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2a8b0     BC 01 90 3D |         if_ae   jmp     #hset_config
2a8b4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2a8b8     75 F3 03 F1 |                 add     ptrb, hnext_desc
2a8bc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2a8c0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2a8c4     0C 00 90 AD |         if_z    jmp     #.intf
2a8c8     80 71 C7 FA |                 rdbyte  htmp, ptrb
2a8cc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2a8d0     D8 FF 9F FD |                 jmp     #.next_intf
2a8d4                 | .intf
2a8d4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2a8d8     00 90 07 F6 |                 mov     hpar3, #0
2a8dc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2a8e0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2a8e4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2a8e8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2a8ec                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2a8ec                 | 
2a8ec                 | .endp
2a8ec     80 71 C7 FA |                 rdbyte  htmp, ptrb
2a8f0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2a8f4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2a8f8     78 00 90 3D |         if_ae   jmp     #.get_device
2a8fc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2a900     75 F3 03 F1 |                 add     ptrb, hnext_desc
2a904     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2a908     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2a90c     64 00 90 AD |         if_z    jmp     #.get_device
2a910     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2a914     04 00 90 AD |         if_z    jmp     #.get_ep
2a918     D0 FF 9F FD |                 jmp     #.endp
2a91c                 | .get_ep
2a91c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2a920     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2a924     0F 86 67 F0 |                 shl     hr1, #8 + 7
2a928     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2a92c     3F 00 00 FF 
2a930     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2a934     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2a938     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2a93c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2a940     00 90 0F F2 |                 cmp     hpar3, #0               wz
2a944     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2a948     A0 FF 9F FD |                 jmp     #.endp
2a94c                 | .in_ep
2a94c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2a950     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2a954                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2a954     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2a958     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2a95c     8C FF 9F FD |                 jmp     #.endp
2a960                 | .out_ep
2a960     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2a964     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2a968                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2a968     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2a96c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2a970     78 FF 9F FD |                 jmp     #.endp
2a974                 | 
2a974                 | .get_device
2a974     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2a978     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2a97c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2a980     68 00 90 AD |         if_z    jmp     #.gamepad
2a984     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2a988     AC 00 90 AD |         if_z    jmp     #.hub
2a98c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2a990     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2a994     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2a998     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2a99c     4C 00 90 AD |         if_z    jmp     #.gamepad
2a9a0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2a9a4     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2a9a8                 | .keyboard
2a9a8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2a9ac                 |         if HAVE_MOUSE
2a9ac     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2a9b0                 |         else
2a9b0                 |         end
2a9b0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2a9b4     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2a9b8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a9bc     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2a9c0     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2a9c4     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2a9c8                 |                 'debug(udec(kb_intf_num))
2a9c8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2a9c8     E0 FE 9F FD |                 jmp     #.next_intf
2a9cc                 | if HAVE_MOUSE
2a9cc                 | .mouse
2a9cc     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2a9d0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2a9d4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2a9d8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2a9dc     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a9e0                 |                 'getbyte ms_interval, hr2, #3
2a9e0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2a9e4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2a9e8                 |                 'debug(udec(kb_intf_num))
2a9e8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2a9e8     C0 FE 9F FD |                 jmp     #.next_intf
2a9ec                 | end
2a9ec                 | .gamepad
2a9ec     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2a9f0     C7 71 63 F5 |                 xor     htmp, hpar2
2a9f4     3F 00 00 FF 
2a9f8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a9fc     AC FE 9F AD |         if_z    jmp     #.next_intf
2aa00                 |         if HAVE_MOUSE
2aa00     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2aa04     C7 71 63 F5 |                 xor     htmp, hpar2
2aa08     3F 00 00 FF 
2aa0c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2aa10     98 FE 9F AD |         if_z    jmp     #.next_intf
2aa14                 |         end
2aa14     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2aa18     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2aa1c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2aa20                 | 
2aa20     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2aa24     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2aa28     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2aa2c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2aa30     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2aa34                 |                 'debug(udec(gp_intf_num))
2aa34                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2aa34     74 FE 9F FD |                 jmp     #.next_intf
2aa38                 | .hub
2aa38     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2aa3c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2aa40     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2aa44     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2aa48     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2aa4c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2aa50     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2aa54     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2aa58     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2aa5c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2aa60     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2aa64     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2aa68     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2aa6c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2aa6c     3C FE 9F FD |                 jmp     #.next_intf
2aa70                 | 
2aa70                 | '------------------------------------------------------------------------------
2aa70                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2aa70                 | ' it according to its function, or functions. In the case of this boot protocol
2aa70                 | ' keyboard/mouse class driver:
2aa70                 | ' - SetConfiguration(config_num)
2aa70                 | ' - SetProtocol(boot)
2aa70                 | ' - SetIdle(indefinite)
2aa70                 | ' - Enter the device interrupt IN polling task stage.
2aa70                 | '------------------------------------------------------------------------------
2aa70                 | ' On entry:
2aa70                 | ' On exit:
2aa70                 | '------------------------------------------------------------------------------
2aa70                 | hset_config
2aa70                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2aa70                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2aa70     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2aa74     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2aa78     00 00 0C F2 |                 cmp     0-0, #0                 wz
2aa7c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2aa80                 |         if HAVE_MOUSE
2aa80     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2aa84                 |         end
2aa84     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2aa88     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2aa8c                 | .set_config
2aa8c     6C 0E D0 FE |                 loc     ptra, #set_config
2aa90     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2aa94     6E ED 03 F1 |                 add     pa, hconfig_base
2aa98     F6 8D C3 FA |                 rdbyte  hpar1, pa
2aa9c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2aaa0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2aaa4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2aaa8     A0 02 A0 FD |                 call    #control_write
2aaac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aab0     2D 00 64 5D |         if_nz   ret
2aab4                 | .kbd_config
2aab4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2aab8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2aabc                 | 
2aabc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2aac0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2aac4     3F 00 00 FF 
2aac8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2aacc     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2aad0                 | 
2aad0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2aad4     34 0E D0 FE |                 loc     ptra, #set_protocol
2aad8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2aadc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2aae0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2aae4     A0 02 A0 FD |                 call    #control_write
2aae8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aaec     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2aaf0     E4 02 90 5D |         if_nz   jmp     #.notify_client
2aaf4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2aaf8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2aafc     30 03 B0 FD |                 call    #hset_idle
2ab00                 |                 'cmp     retval, #PID_ACK        wz
2ab00                 |         'if_nz   mov     hkbd_ep_addr, #0
2ab00                 |         'if_nz   jmp     #.notify_client
2ab00     A8 99 02 F6 |                 mov     hctwait, _2ms_
2ab04     EF 02 A0 FD |                 call    #poll_waitx
2ab08     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2ab0c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2ab10     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2ab14     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2ab18     2C 03 B0 FD |                 call    #hset_kbdled_report
2ab1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ab20     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2ab24     B0 02 90 5D |         if_nz   jmp     #.notify_client
2ab28     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2ab2c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ab30     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ab34     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2ab38     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2ab3c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2ab40     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2ab44     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ab48     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2ab4c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2ab50     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2ab54                 |         if !!HAVE_MOUSE
2ab54                 |         end
2ab54                 | 
2ab54                 | .mouse_config
2ab54                 | if HAVE_MOUSE
2ab54     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2ab58     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2ab5c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2ab60     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2ab64     3F 00 00 FF 
2ab68     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ab6c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2ab70                 | 
2ab70                 |                 debug("mouse passed addr check")
2ab70                 | 
2ab70     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2ab74     00 00 80 FF 
2ab78     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2ab7c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2ab80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ab84     55 02 A0 FD |                 call    #control_read
2ab88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ab8c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2ab90     44 02 90 5D |         if_nz   jmp     #.notify_client
2ab94     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2ab98     56 01 00 F6 |                 mov     0-0, total_data
2ab9c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2aba0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2aba0                 | 
2aba0     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2aba4     64 0D D0 FE |                 loc     ptra, #set_protocol
2aba8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2abac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2abb0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2abb4     A0 02 A0 FD |                 call    #control_write
2abb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2abbc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2abc0     14 02 90 5D |         if_nz   jmp     #.notify_client
2abc4                 |                 debug("mouse passed SetProtocol")
2abc4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2abc8     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2abcc     60 02 B0 FD |                 call    #hset_idle
2abd0                 |                 'cmp     retval, #PID_ACK        wz
2abd0                 |         'if_nz   mov     hmouse_ep_addr, #0
2abd0                 |         'if_nz   jmp     #.notify_client
2abd0                 |                 debug("mouse passed SetIdle")
2abd0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2abd4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2abd8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2abdc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2abe0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2abe4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2abe8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2abec     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2abf0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2abf4     3F 00 00 FF 
2abf8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2abfc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2ac00     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2ac04     D0 01 90 FD |                 jmp     #.notify_client
2ac08                 | end
2ac08                 | .gamepad_config
2ac08                 | if _HAVE_GAMEPAD
2ac08     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ac0c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2ac10     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2ac14     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2ac18     00 70 03 F6 |                 mov     htmp, 0-0
2ac1c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2ac20     3F 00 00 FF 
2ac24     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ac28     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2ac2c                 | 
2ac2c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2ac30     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2ac34     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ac38     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ac3c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2ac40     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ac44     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2ac48     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2ac4c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2ac50     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ac54     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ac58     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2ac5c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2ac60     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ac64                 | 
2ac64                 |                 if EMUPAD_MAX_PLAYER > 0
2ac64                 |                 
2ac64                 | .rule_loop           
2ac64                 |                 end
2ac64                 | 
2ac64     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2ac68     5C 00 90 AD |         if_e    jmp     #.xinput
2ac6c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2ac70     00 70 03 F6 |                 mov     htmp,0-0
2ac74     01 A6 02 FF 
2ac78     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2ac7c     7C 00 90 AD |         if_e    jmp     #.ps3
2ac80                 | 
2ac80     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2ac84     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2ac88     00 00 80 5F 
2ac8c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2ac90     03 00 80 AF 
2ac94     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2ac98     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2ac9c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2aca0     55 02 A0 FD |                 call    #control_read
2aca4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aca8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2acac     00 00 04 56 |         if_nz   mov     0-0, #0
2acb0     24 01 90 5D |         if_nz   jmp     #.notify_client
2acb4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2acb8     56 01 00 F6 |                 mov     0-0, total_data
2acbc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2acc0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2acc0                 | 
2acc0     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2acc4     10 01 90 FD |                 jmp     #.notify_client
2acc8                 | .xinput
2acc8     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2accc     2D EF 03 F6 |                 mov     pb,hdev_port
2acd0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2acd4     03 EE 27 F3 |                 fle     pb,#3
2acd8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2acdc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2ace0                 | 
2ace0     03 B0 06 F6 |                 mov     pkt_data, #3
2ace4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2ace8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2acec     5A 00 A0 FD |                 call    #txn_out
2acf0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2acf4                 | 
2acf4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2acf8     DC 00 90 FD |                 jmp     #.notify_client
2acfc                 | .ps3
2acfc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2ad00     2D EF 03 F6 |                 mov     pb,hdev_port
2ad04     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2ad08     04 EE 27 F3 |                 fle     pb,#4
2ad0c     F7 EF C3 F9 |                 decod   pb
2ad10     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2ad14                 | 
2ad14     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2ad18     00 0C D0 FE |                 loc     ptra, #set_report
2ad1c     01 00 80 FF 
2ad20     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2ad24     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ad28     03 61 5C FC |                 wrword  #48, ptra[wLength]
2ad2c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2ad30     A0 02 A0 FD |                 call    #control_write
2ad34                 | 
2ad34     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2ad38     E0 0B D0 FE |                 loc     ptra, #set_report
2ad3c     01 00 80 FF 
2ad40     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2ad44     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ad48     03 09 5C FC |                 wrword  #4, ptra[wLength]
2ad4c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2ad50     A0 02 A0 FD |                 call    #control_write
2ad54     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2ad58     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2ad5c     00 00 04 56 |         if_nz   mov     0-0, #0
2ad60     74 00 90 5D |         if_nz   jmp     #.notify_client
2ad64                 | 
2ad64     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2ad68     6C 00 90 FD |                 jmp     #.notify_client
2ad6c                 | end
2ad6c                 | 
2ad6c                 | .hub_config
2ad6c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2ad70     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2ad74     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2ad78     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2ad7c     3F 00 00 FF 
2ad80     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ad84     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2ad88                 | 
2ad88     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2ad8c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2ad90     26 EF 03 F6 |                 mov     pb, hub_descr_p
2ad94     55 02 A0 FD |                 call    #control_read
2ad98     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ad9c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2ada0     34 00 90 5D |         if_nz   jmp     #.notify_client
2ada4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2ada4                 | 
2ada4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2ada8     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2adac     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2adb0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2adb0                 | .pwr_loop
2adb0     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2adb4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2adb8     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2adbc     A0 02 A0 FD |                 call    #control_write
2adc0     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2adc4                 | 
2adc4     B1 99 02 F6 |                 mov     hctwait, _500ms_
2adc8     B0 99 02 F1 |                 add     hctwait, _100ms_
2adcc     EF 02 A0 FD |                 call    #poll_waitx
2add0                 | 
2add0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2add4     00 00 90 FD |                 jmp     #.notify_client
2add8                 | 
2add8                 | .notify_client
2add8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2addc     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2ade0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2ade0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2ade0     2D 00 64 FD |                 ret
2ade4                 | 
2ade4                 | '------------------------------------------------------------------------------
2ade4                 | ' Initialize the keyboard/mouse data area to start-up values.
2ade4                 | '------------------------------------------------------------------------------
2ade4                 | ' On entry:
2ade4                 | ' On exit:
2ade4                 | '------------------------------------------------------------------------------
2ade4                 | init_kbdm_data
2ade4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2ade8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2adec                 | 
2adec     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2adf0     2B ED 03 F6 |                 mov     pa, cache_end_p
2adf4                 | .loop
2adf4     61 01 4C FC |                 wrbyte  #0, ptra++
2adf8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2adfc     F4 FF 9F CD |         if_b    jmp     #.loop
2ae00                 |         
2ae00                 |         if EMUPAD_MAX_PLAYER > 0
2ae00                 |         end
2ae00                 | 
2ae00                 | 
2ae00     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2ae04                 | .regloop
2ae04     00 EC 8F F9 |                 altd    pa
2ae08     00 00 04 F6 |                 mov     0-0, #0
2ae0c     01 EC 07 F1 |                 add     pa, #1
2ae10     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2ae14     EC FF 9F 5D |         if_nz   jmp     #.regloop
2ae18                 | 
2ae18     E1 E1 61 FF 
2ae1c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2ae20     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2ae24     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2ae28     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2ae2c                 | 
2ae2c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2ae30                 | 
2ae30                 | '------------------------------------------------------------------------------
2ae30                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2ae30                 | ' function.
2ae30                 | '------------------------------------------------------------------------------
2ae30                 | ' On entry:
2ae30                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2ae30                 | '   hpar2 - index number of the target interface.
2ae30                 | ' On exit:
2ae30                 | '------------------------------------------------------------------------------
2ae30                 | hset_idle
2ae30     A8 99 02 F6 |                 mov     hctwait, _2ms_
2ae34     EF 02 A0 FD |                 call    #poll_waitx
2ae38     D8 0A D0 FE |                 loc     ptra, #set_idle
2ae3c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2ae40     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2ae44     A0 02 80 FD |                 jmp     #control_write
2ae48                 | 
2ae48                 | '------------------------------------------------------------------------------
2ae48                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2ae48                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2ae48                 | '------------------------------------------------------------------------------
2ae48                 | ' On entry:
2ae48                 | '   ep_addr_pid - device address and enpoint for the request.
2ae48                 | ' On exit:
2ae48                 | '   retval - transaction result.
2ae48                 | '------------------------------------------------------------------------------
2ae48                 | hset_kbdled_report
2ae48     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2ae4c     CC 0A D0 FE |                 loc     ptra, #set_report
2ae50     01 00 80 FF 
2ae54     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2ae58     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ae5c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2ae60     27 EF 03 F6 |                 mov     pb, urx_buff_p
2ae64     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2ae68     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2ae6c                 | 
2ae6c                 | '------------------------------------------------------------------------------
2ae6c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2ae6c                 | '------------------------------------------------------------------------------
2ae6c                 | ' On entry:
2ae6c                 | ' On exit:
2ae6c                 | '------------------------------------------------------------------------------
2ae6c                 | hget_kbd_in_report
2ae6c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2ae70     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2ae74     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2ae78     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2ae7c     CF 02 A0 FD |                 call    #do_int_in
2ae80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ae84     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2ae88                 | 
2ae88     00 90 0F F2 |                 cmp     hpar3, #0               wz
2ae8c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2ae90                 | 
2ae90     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2ae94     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2ae98     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2ae9c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2aea0                 | 
2aea0     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2aea4     18 00 B0 FD |                 call    #hkbd_compare
2aea8                 |         if EMUPAD_MAX_PLAYER > 0
2aea8                 |         end
2aea8                 | 
2aea8                 | .led_check
2aea8     3B 71 03 F6 |                 mov     htmp, kb_led_states
2aeac     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2aeb0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2aeb4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2aeb8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2aebc     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2aec0                 | 
2aec0                 | '------------------------------------------------------------------------------
2aec0                 | ' Compare current and previous keyboard data buffers for keypress changes.
2aec0                 | '------------------------------------------------------------------------------
2aec0                 | hkbd_compare
2aec0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2aec4     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2aec8     61 73 07 FB |                 rdlong  htmp1, ptra++
2aecc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2aed0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2aed4     61 73 07 FB |                 rdlong  htmp1, ptra++
2aed8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2aedc     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2aee0     2D 00 64 AD |         if_z    ret
2aee4                 | 
2aee4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2aee8                 | 
2aee8                 |                 ' Handle modifiers
2aee8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2aeec     00 87 C7 FA |                 rdbyte  hr1, ptra
2aef0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2aef4     63 86 63 FD |                 mergew  hr1
2aef8     08 EC 07 F6 |                 mov     pa,#8
2aefc                 | .modloop
2aefc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2af00     E8 8C 07 F6 |                 mov     hpar1,#$E8
2af04     F6 8D 83 F1 |                 sub     hpar1,pa
2af08     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2af0c     FB ED 6F FB |                 djnz    pa,#.modloop
2af10                 | 
2af10     6F E0 75 FD | .release        modc    _set    wc
2af14                 |                 'alts    hdev_port, #hid_report_p
2af14                 |                 'mov     ptra, hid_report_p
2af14     02 F0 07 F1 |                 add     ptra, #2
2af18     06 EC 07 F6 |                 mov     pa, #6
2af1c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2af20     20 00 90 AD |         if_z    jmp     #.rl3
2af24     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2af28     02 F2 07 F1 |                 add     ptrb, #2
2af2c     06 EE 07 F6 |                 mov     pb, #6
2af30     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2af34     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2af38     08 00 90 AD |         if_z    jmp     #.rl3
2af3c     FC EF 6F FB |                 djnz    pb, #.rl2
2af40     68 00 B0 FD |                 call    #hkbd_translate
2af44     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2af48                 | 
2af48     00 90 07 F6 |                 mov     hpar3, #0
2af4c     1F 90 27 F4 |                 bith    hpar3, #31
2af50                 | 
2af50     6F 00 74 FD | .press          modc    _clr    wc
2af54     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2af58     02 F0 07 F1 |                 add     ptra, #2
2af5c     06 EC 07 F6 |                 mov     pa, #6
2af60     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2af64     20 00 90 AD |         if_z    jmp     #.pl3
2af68     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2af6c     02 F2 07 F1 |                 add     ptrb, #2
2af70     06 EE 07 F6 |                 mov     pb, #6
2af74     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2af78     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2af7c     08 00 90 AD |         if_z    jmp     #.pl3
2af80     FC EF 6F FB |                 djnz    pb, #.pl2
2af84     24 00 B0 FD |                 call    #hkbd_translate
2af88     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2af8c                 | 
2af8c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2af90     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2af94     28 02 64 FD |                 setq #1
2af98     61 73 07 FB |                 rdlong  htmp1, ptra++
2af9c     28 02 64 FD |                 setq #1
2afa0     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2afa4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2afa8                 | 
2afa8     2D 00 64 FD |                 ret
2afac                 | 
2afac                 | '------------------------------------------------------------------------------
2afac                 | ' Translate keyboard scancode to ASCII
2afac                 | '------------------------------------------------------------------------------
2afac                 | ' On entry:
2afac                 | '   hpar1 - scancode
2afac                 | '   hpar2 - key modifiers state
2afac                 | '       c - pressed (0) or released (1) flag
2afac                 | ' On exit:
2afac                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2afac                 | '               30..17 = unused
2afac                 | '                   18 = scroll-lock state 
2afac                 | '                   17 = caps-lock state
2afac                 | '                   16 = num-lock state 
2afac                 | '                15..8 = key modifiers state
2afac                 | '                 7..0 = scancode
2afac                 | '------------------------------------------------------------------------------
2afac                 | hkbd_translate
2afac     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2afb0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2afb4     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2afb8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2afbc     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2afc0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2afc4                 | 
2afc4                 |         if EMUPAD_MAX_PLAYER > 0
2afc4                 | 
2afc4                 |         if EMUPAD_BT0_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT1_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT2_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT3_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT4_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT5_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT6_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT7_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT8_BIT >= 0
2afc4                 |         end
2afc4                 |         if EMUPAD_BT9_BIT >= 0
2afc4                 |         end
2afc4                 | 
2afc4                 |         end
2afc4     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2afc8     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2afcc     1F 8C 47 F4 |                 bitc    hpar1, #31
2afd0                 |         if KEYQUEUE_SIZE > 0
2afd0     C4 09 B0 FE |                 loc pb,#keyq_head
2afd4     F7 71 E3 FA |                 rdword htmp,pb
2afd8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2afdc     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2afe0     B8 75 03 F6 |                 mov htmp2,htmp
2afe4     04 74 07 FA |                 mul htmp2,#4
2afe8     F7 75 03 F1 |                 add htmp2,pb
2afec     02 74 07 F1 |                 add htmp2,#2
2aff0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2aff4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2aff8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2affc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2b000                 |         end
2b000     2D 00 7C FD |                 ret wcz
2b004                 | 
2b004                 | if HAVE_MOUSE
2b004                 | '------------------------------------------------------------------------------
2b004                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2b004                 | '------------------------------------------------------------------------------
2b004                 | ' On entry:
2b004                 | ' On exit:
2b004                 | '------------------------------------------------------------------------------
2b004                 | hget_mouse_in_report
2b004     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b008     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b00c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2b010     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2b014     CF 02 A0 FD |                 call    #do_int_in
2b018     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b01c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b020                 | 
2b020     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b024     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b028                 | 
2b028     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2b02c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b030     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2b034     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2b038                 | 
2b038     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b03c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2b040     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2b044     01 90 87 31 |         if_ae   sub     hpar3, #1
2b048                 | 
2b048     40 09 90 FE |                 loc     pa, #mouse_limits
2b04c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2b050                 | 
2b050                 |                 ' load xacc,yacc,zacc
2b050     28 04 64 FD |                 setq    #3-1
2b054     80 87 07 FB |                 rdlong  hr1,ptrb
2b058                 |                 ' load limits and outptr
2b058     28 04 64 FD |                 setq    #3-1
2b05c     F6 73 03 FB |                 rdlong  htmp1,pa
2b060                 | 
2b060     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2b064     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2b068     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2b06c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2b070     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2b074     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2b078     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2b07c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2b080                 |               
2b080                 | 
2b080     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2b084     07 70 67 F7 |                 signx   htmp, #7
2b088     B8 87 03 F1 |                 add     hr1,htmp
2b08c     00 72 0F F2 |                 cmp     htmp1,#0 wz
2b090     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2b094     00 86 47 53 |         if_ne   fges    hr1,#0
2b098                 | 
2b098     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2b09c     07 70 67 F7 |                 signx   htmp, #7
2b0a0     B8 89 03 F1 |                 add     hr2,htmp
2b0a4     00 74 0F F2 |                 cmp     htmp2,#0 wz
2b0a8     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2b0ac     00 88 47 53 |         if_ne   fges    hr2,#0
2b0b0                 |                 
2b0b0                 | 
2b0b0     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2b0b4     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2b0b8     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2b0bc     B8 8B 03 A1 |         if_z    add     hr3,htmp
2b0c0                 | 
2b0c0     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2b0c4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2b0c8                 | 
2b0c8                 |                 ' write back accumulators
2b0c8     28 04 64 FD |                 setq    #3-1
2b0cc     80 87 67 FC |                 wrlong  hr1,ptrb
2b0d0                 |                 ' if outptr set, write X/Y words
2b0d0     00 76 0F F2 |                 cmp htmp3,#0                    wz
2b0d4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2b0d8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2b0dc     2D 00 64 FD |                 ret
2b0e0                 | end
2b0e0                 | 
2b0e0                 | '------------------------------------------------------------------------------
2b0e0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b0e0                 | '------------------------------------------------------------------------------
2b0e0                 | ' On entry:
2b0e0                 | ' On exit:
2b0e0                 | '------------------------------------------------------------------------------
2b0e0                 | if _HAVE_GAMEPAD
2b0e0                 | hget_gp_in_report
2b0e0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b0e4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b0e8                 | 
2b0e8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b0ec     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2b0f0     00 90 E3 F8 |                 getbyte hpar3
2b0f4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2b0f8     CF 02 A0 FD |                 call    #do_int_in
2b0fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b100     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b104                 | 
2b104     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b108     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b10c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2b10c                 | 
2b10c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2b110     00 70 E3 F8 |                 getbyte htmp                            ' |
2b114     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b118     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2b11c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2b120     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2b124     B8 01 C0 F8 |                 setbyte htmp                            ' |
2b128                 | 
2b128                 | ' Note: the following code compares the current and previous reports
2b128                 | ' and process the data if there are changes to ease the debug output.
2b128                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2b128                 | ' gpPreReport buffer.
2b128                 | 
2b128                 |                 ' ----- start of block to remove
2b128                 |                 {
2b128                 |                 }
2b128                 |                 ' ----- end of block to remove
2b128     F4 04 90 FE |                 loc pa,#hpad_translate
2b12c     2A EC 63 FD |                 push pa
2b130                 | 
2b130                 |                 ' FALL THROUGH !!!!
2b130                 | 
2b130                 | '------------------------------------------------------------------------------
2b130                 | ' Decode controller report
2b130                 | '------------------------------------------------------------------------------
2b130                 | hid_decode
2b130                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2b130     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2b134     00 04 00 FF 
2b138     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2b13c                 | 
2b13c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b140                 | 
2b140     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b144     00 2A E3 F8 |                 getbyte hidr_type
2b148     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2b14c     34 02 90 AD |         if_z    jmp     #hpad_xinput
2b150     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2b154     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2b158     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2b15c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2b160     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2b164                 |                 
2b164                 | 
2b164                 | '------------------------------------------------------------------------------
2b164                 | ' Handle HID controller (or mouse now
2b164                 | ' On entry:
2b164                 | '   ptrb - controller report
2b164                 | '------------------------------------------------------------------------------
2b164                 | hpad_hid
2b164     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b168     F7 F1 03 F6 |                 mov     ptra, pb
2b16c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2b170     00 EC 03 F6 |                 mov     pa, 0-0
2b174                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2b174     19 2A 3B FF 
2b178     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2b17c                 | 
2b17c                 | .next
2b17c     00 EC 5F F2 |                 cmps    pa, #0      wcz
2b180     2D 00 7C ED |         if_be   ret     wcz
2b184                 | 
2b184     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2b188     01 EC 87 F1 |                 sub     pa, #1
2b18c     00 8E 07 F6 |                 mov     hpar2, #0
2b190                 | 
2b190     C6 71 03 F6 |                 mov     htmp, hpar1
2b194     03 70 07 F5 |                 and     htmp, #$03
2b198     01 70 0F F2 |                 cmp     htmp, #1    wz
2b19c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2b1a0     07 8E 67 A7 |         if_z    signx   hpar2,#7
2b1a4     01 EC 87 A1 |         if_z    sub     pa, #1
2b1a8     02 70 0F F2 |                 cmp     htmp, #2    wz
2b1ac     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2b1b0     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2b1b4     02 EC 87 A1 |         if_z    sub     pa, #2
2b1b8     03 70 0F F2 |                 cmp     htmp, #3    wz
2b1bc     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2b1c0     04 EC 87 A1 |         if_z    sub     pa, #4
2b1c4                 | 
2b1c4     FC 8C 07 F5 |                 and     hpar1, #$FC
2b1c8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2b1c8                 | 
2b1c8     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2b1cc     0C 01 90 AD |         if_z    jmp     #.report_id
2b1d0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2b1d4     24 01 90 AD |         if_z    jmp     #.usage_page
2b1d8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2b1dc     2C 01 90 AD |         if_z    jmp     #.usage
2b1e0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2b1e4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2b1e8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2b1ec     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2b1f0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2b1f4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2b1f8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2b1fc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2b200     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2b204     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2b208     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2b20c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2b210     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2b214     64 FF 9F 5D |         if_nz   jmp     #.next
2b218                 | 
2b218     D8 1D A7 FB |                 tjf     hidr_state,#.next
2b21c                 | 
2b21c     03 8E 07 F5 |                 and     hpar2, #$03
2b220     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2b224     18 00 90 5D |         if_nz   jmp     #.skip
2b228                 | 
2b228     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2b22c     20 00 90 AD |         if_z    jmp     #.axes
2b230     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2b234     5C 00 90 AD |         if_z    jmp     #.hats
2b238     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2b23c     70 00 90 AD |         if_z    jmp     #.buttons
2b240                 | .skip
2b240     8F 71 03 F6 |                 mov     htmp, hidr_size
2b244     90 71 03 FA |                 mul     htmp, hidr_count
2b248     B8 23 03 F1 |                 add     hidr_offset, htmp
2b24c     2C FF 9F FD |                 jmp     #.next
2b250                 | .axes
2b250                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2b250     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2b254     90 87 03 F6 |                 mov     hr1, hidr_count
2b258                 | .l1
2b258     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b25c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b260     04 03 B0 FD |                 call    #hpad_getbits
2b264     64 03 B0 FD |                 call    #hpad_normalize
2b268     06 84 1F F2 |                 cmp     hr0, #6         wcz
2b26c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2b270     00 88 43 C8 |         if_b    getnib  hr2
2b274     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2b278     5F 01 20 C9 |         if_b    setword retval
2b27c     01 84 07 C1 |         if_b    add     hr0, #1
2b280     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2b284     F4 87 6F FB |                 djnz    hr1, #.l1
2b288                 | 
2b288     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2b28c     01 1C 07 F6 |                 mov     hidr_state, #1
2b290     E8 FE 9F FD |                 jmp     #.next
2b294                 | .hats
2b294                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2b294     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b298     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b29c     C8 02 B0 FD |                 call    #hpad_getbits
2b2a0     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2b2a4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b2a8     01 1C 07 F6 |                 mov     hidr_state, #1
2b2ac     90 FF 9F FD |                 jmp     #.skip
2b2b0                 | .buttons
2b2b0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2b2b0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b2b4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b2b8     90 8F 03 FA |                 mul     hpar2, hidr_count
2b2bc     A8 02 B0 FD |                 call    #hpad_getbits
2b2c0     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2b2c4     B8 BF 62 F0 |                 shl     retval, htmp
2b2c8     5F 17 43 F5 |                 or      hidr_buttons, retval
2b2cc     90 71 03 F1 |                 add     htmp, hidr_count
2b2d0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2b2d4     01 1C 07 F6 |                 mov     hidr_state, #1
2b2d8     64 FF 9F FD |                 jmp     #.skip
2b2dc                 | .report_id
2b2dc     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2b2e0     2D 00 7C 5D |         if_nz   ret     wcz
2b2e4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b2e8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2b2ec     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2b2f0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2b2f4     01 F2 87 51 |         if_nz   sub     ptrb,#1
2b2f8     80 FE 9F FD |                 jmp     #.next
2b2fc                 | .usage_page
2b2fc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2b300     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2b304     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2b308     70 FE 9F FD |                 jmp     #.next
2b30c                 | .usage
2b30c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2b310     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2b314     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2b318     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b31c     5C FE 9F AD |         if_z    jmp     #.next
2b320     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2b324     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2b328     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b32c     4C FE 9F AD |         if_z    jmp     #.next
2b330     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2b334     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2b338     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2b33c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2b340     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2b344     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2b348     10 00 90 AD |         if_z    jmp     #.usage_axis
2b34c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2b350     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2b354     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2b358     20 FE 9F FD |                 jmp     #.next
2b35c                 | .usage_axis
2b35c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2b360     18 FE 9F CD |         if_b    jmp     #.next
2b364     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2b368     C7 01 00 F8 |                 setnib  hpar2
2b36c                 | 
2b36c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2b370     C7 8F C3 F9 |                 decod   hpar2
2b374     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2b378                 | 
2b378     01 24 07 F1 |                 add     hidr_usage_idx, #1
2b37c     02 1C 07 F6 |                 mov     hidr_state, #2
2b380     F8 FD 9F FD |                 jmp     #.next
2b384                 | 
2b384                 | '------------------------------------------------------------------------------
2b384                 | ' Handle XInput controller
2b384                 | ' On entry:
2b384                 | '   ptrb - controller report
2b384                 | '------------------------------------------------------------------------------
2b384                 | '   Default implementation translates the report to a pseudo-defacto hid
2b384                 | '   standard and jumps to hpad_translate for actions.
2b384                 | '   Implementors may take specific actions for this kind of controller.
2b384                 | '------------------------------------------------------------------------------
2b384                 | hpad_xinput
2b384     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2b388     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2b38c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2b390     14 70 0F F2 |                 cmp     htmp, #$14      wz
2b394     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2b398                 | 
2b398                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b398                 | 
2b398     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2b39c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2b3a0                 | 
2b3a0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2b3a4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2b3a8     5F BF 22 F6 |                 not     retval
2b3ac     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b3b0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2b3b4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2b3b8     5F BF 22 F6 |                 not     retval
2b3bc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b3c0                 | 
2b3c0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b3c4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2b3c8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b3cc     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2b3d0     F8 01 B0 FD |                 call    #hpad_normalize
2b3d4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2b3d8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2b3dc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b3e0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2b3e4     E4 01 B0 FD |                 call    #hpad_normalize
2b3e8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2b3ec                 | 
2b3ec     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b3f0     81 BF E6 FA |                 rdword  retval, ptrb[1]
2b3f4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b3f8     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b3fc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b400     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b404     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b408     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b40c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b410     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b414     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2b418     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b41c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2b420     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b424     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2b428     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b42c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2b430     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b434     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2b438     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b43c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2b440     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b444     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2b448     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b44c                 | 
2b44c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b450     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2b454     7A BB 7A FF 
2b458     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2b45c     F9 FF 7F FF 
2b460     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2b464     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b468     00 70 43 F8 |                 getnib  htmp
2b46c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b470                 | 
2b470     AC 01 90 FD |                 jmp     #hpad_translate
2b474                 | 
2b474                 | '------------------------------------------------------------------------------
2b474                 | ' Handle PS3 controller
2b474                 | ' On entry:
2b474                 | '   ptrb - controller report
2b474                 | '------------------------------------------------------------------------------
2b474                 | '   Default implementation translates the report to a pseudo-defacto hid
2b474                 | '   standard and jumps to hpad_translate for actions.
2b474                 | '   Implementors may take specific actions for this kind of controller.
2b474                 | '------------------------------------------------------------------------------
2b474                 | hpad_ps3
2b474     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b478     01 70 0F F2 |                 cmp     htmp, #$01      wz
2b47c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2b480                 | 
2b480                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b480                 | 
2b480     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b484     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2b488     40 01 B0 FD |                 call    #hpad_normalize
2b48c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2b490     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2b494     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2b498     30 01 B0 FD |                 call    #hpad_normalize
2b49c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b4a0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2b4a4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2b4a8     20 01 B0 FD |                 call    #hpad_normalize
2b4ac     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2b4b0     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2b4b4     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2b4b8     10 01 B0 FD |                 call    #hpad_normalize
2b4bc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b4c0     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2b4c4     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2b4c8                 | 
2b4c8     08 8C 07 F6 |                 mov     hpar1, #8
2b4cc     13 8E 07 F6 |                 mov     hpar2, #19
2b4d0     94 00 B0 FD |                 call    #hpad_getbits
2b4d4                 | 
2b4d4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b4d8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b4dc     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b4e0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b4e4     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b4e8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b4ec     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b4f0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b4f4     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b4f8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2b4fc     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b500     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2b504     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b508     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2b50c     06 16 47 F4 |                 bitc    hidr_buttons, #6
2b510     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2b514     07 16 47 F4 |                 bitc    hidr_buttons, #7
2b518     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2b51c     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b520     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2b524     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b528     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2b52c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b530     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2b534     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b538     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2b53c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b540                 | 
2b540     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b544     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2b548     09 FA 79 FF 
2b54c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2b550     FF FA 7F FF 
2b554     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2b558     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b55c     00 70 43 F8 |                 getnib  htmp
2b560     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b564                 | 
2b564     B8 00 90 FD |                 jmp     #hpad_translate
2b568                 | 
2b568                 | '------------------------------------------------------------------------------
2b568                 | ' Read bits from report data buffer
2b568                 | '------------------------------------------------------------------------------
2b568                 | ' On entry:
2b568                 | '   PTRB - report buffer
2b568                 | '   hpar1 - start bit
2b568                 | '   hpar2 - number of bits
2b568                 | ' On exit:
2b568                 | '   retval - bits
2b568                 | '------------------------------------------------------------------------------
2b568                 | hpad_getbits
2b568     C6 71 03 F6 |                 mov     htmp, hpar1
2b56c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2b570     F9 71 03 F1 |                 add     htmp, ptrb
2b574     B8 BF 02 FB |                 rdlong  retval, htmp
2b578                 | 
2b578     C6 73 03 F6 |                 mov     htmp1, hpar1
2b57c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2b580     B9 BF 42 F0 |                 shr     retval, htmp1
2b584                 | 
2b584     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2b588     10 00 90 1D |         if_a    jmp     #.l1
2b58c                 | 
2b58c     C7 8F C3 F9 |                 decod   hpar2
2b590     01 8E 87 F1 |                 sub     hpar2, #1
2b594     C7 BF 02 F5 |                 and     retval, hpar2
2b598     2D 00 64 FD |                 ret
2b59c                 | .l1
2b59c     FF 7F 00 FF 
2b5a0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2b5a4     03 70 07 F1 |                 add     htmp, #3
2b5a8     B8 75 03 FB |                 rdlong  htmp2, htmp
2b5ac     18 8E 87 F1 |                 sub     hpar2, #24
2b5b0     C7 8F C3 F9 |                 decod   hpar2
2b5b4     01 8E 87 F1 |                 sub     hpar2, #1
2b5b8     B9 75 43 F0 |                 shr     htmp2, htmp1
2b5bc     C7 75 03 F5 |                 and     htmp2, hpar2
2b5c0     18 74 67 F0 |                 shl     htmp2, #24
2b5c4     BA BF 42 F5 |                 or      retval, htmp2
2b5c8     2D 00 64 FD |                 ret
2b5cc                 | 
2b5cc                 | '------------------------------------------------------------------------------
2b5cc                 | ' Normalize value to signed word (-32768 / 32767)
2b5cc                 | '------------------------------------------------------------------------------
2b5cc                 | ' On entry:
2b5cc                 | '   retval - value to normalize
2b5cc                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2b5cc                 | '   - or -
2b5cc                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2b5cc                 | '   hidr_size - value bits length
2b5cc                 | ' On exit:
2b5cc                 | '   retval - normalized value
2b5cc                 | '------------------------------------------------------------------------------
2b5cc                 | hpad_normalize
2b5cc     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2b5d0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2b5d4     2D 00 64 AD |         if_z    ret
2b5d8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2b5dc     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2b5e0     0F 72 77 F7 |                 signx   htmp1, #15      wc
2b5e4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2b5e8     00 BE 66 C7 |         if_c    signx   retval, #0-0
2b5ec     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2b5f0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2b5f4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2b5f8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2b5fc     B8 71 53 F6 |                 abs     htmp            wc
2b600     1F BE 0E F4 |                 testb   retval, #31     wz
2b604     5F BF 42 F6 |                 abs     retval
2b608     B8 BF 12 FD |                 qdiv    retval, htmp
2b60c     18 BE 62 FD |                 getqx   retval
2b610     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2b614     C0 FF 7F FF 
2b618     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2b61c     2D 00 64 FD |                 ret
2b620                 | 
2b620                 | '------------------------------------------------------------------------------
2b620                 | ' Perform controller actions
2b620                 | ' On entry:
2b620                 | '    hidr_id        report id
2b620                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2b620                 | '                      X = hidr_axis+0, #0
2b620                 | '                      Y = hidr_axis+0, #1
2b620                 | '                      Z = hidr_axis+1, #0
2b620                 | '                     RX = hidr_axis+1, #1
2b620                 | '                     RY = hidr_axis+2, #0
2b620                 | '                     RZ = hidr_axis+2, #1
2b620                 | '    hidr_buttons   buttons state (bits 0 to 31)
2b620                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2b620                 | '
2b620                 | '                     -------3 -------2 -------1 -------0 byte
2b620                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2b620                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2b620                 | '                                zyx||| |||||||| ++++++++ n. buttons
2b620                 | '                                |||||| ||||++++--------- n. axes
2b620                 | '                                |||||| ++++------------- n. hats
2b620                 | '                                ++++++------------------ valid axes
2b620                 | '------------------------------------------------------------------------------
2b620                 | hpad_translate
2b620                 | 
2b620                 | 
2b620                 |         if HAVE_HIDPAD
2b620     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2b624     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2b628     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2b62c     01 70 E7 F2 |                 cmpsub  htmp,#1
2b630     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2b634     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2b638     2D 00 7C 3D |         if_ae   ret     wcz
2b63c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2b640     B8 F3 03 F1 |                 add     ptrb,htmp
2b644     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2b648     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2b64c     28 0C 64 FD |                 setq    #7-1
2b650     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2b654                 |         end
2b654                 | 
2b654                 | 
2b654                 |         if EMUPAD_MAX_PLAYER > 0
2b654                 | .emupad_no_hat
2b654                 |         if EMUPAD_BT0_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT1_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT2_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT3_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT4_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT5_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT6_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT7_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT8_BIT >= 0
2b654                 |         end
2b654                 |         if EMUPAD_BT9_BIT >= 0
2b654                 |         end
2b654                 | .emupad_slot_over
2b654                 |         end
2b654                 | 
2b654                 |         if 0
2b654                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2b654                 | 
2b654                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2b654                 | 
2b654                 |         end
2b654     2D 00 64 FD |                 ret
2b658                 | end
2b658                 | 
2b658                 | if EMUPAD_MAX_PLAYER > 0
2b658                 | '------------------------------------------------------------------------------
2b658                 | ' Clear EmuPad state
2b658                 | '------------------------------------------------------------------------------
2b658                 | emupad_reset
2b658                 | 
2b658                 | '------------------------------------------------------------------------------
2b658                 | ' Get EmuPad Player number for current device (into retval)
2b658                 | ' Z flag is also set if current device is valid
2b658                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2b658                 | '------------------------------------------------------------------------------
2b658                 | emupad_getnum
2b658                 | .loop
2b658                 | '------------------------------------------------------------------------------
2b658                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2b658                 | '------------------------------------------------------------------------------
2b658                 | emupad_discon
2b658                 | .loop         
2b658                 |         
2b658                 |         ' FALL THROUGH!!!
2b658                 | 
2b658                 | '------------------------------------------------------------------------------
2b658                 | ' Update EmuPad reports (all of them...)
2b658                 | '------------------------------------------------------------------------------
2b658                 | emupad_write_reports
2b658                 | .devloop
2b658                 | 
2b658                 | end
2b658                 | 
2b658                 | 
2b658                 | '------------------------------------------------------------------------------
2b658                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b658                 | '------------------------------------------------------------------------------
2b658                 | ' On entry:
2b658                 | ' On exit:
2b658                 | '------------------------------------------------------------------------------
2b658                 | hget_hub_status
2b658     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2b65c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b660     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2b664     01 90 2F F9 |                 setword hpar3, #1, #1
2b668     CF 02 A0 FD |                 call    #do_int_in
2b66c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b670     0C 00 90 AD |         if_z    jmp     #.data
2b674     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2b678     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2b67c     2D 00 64 FD |                 ret
2b680                 | .data
2b680     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b684     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b688                 | 
2b688     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2b68c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2b690     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2b694     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2b698                 |                 debug(ubin_long(hub_status_chg))
2b698                 | 
2b698     01 5A 06 F6 |                 mov     hdev_port, #1
2b69c                 | .loop
2b69c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2b6a0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2b6a4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2b6a8     F0 FF 9F 3D |         if_nc   jmp     #.loop
2b6ac     2D 00 64 FD |                 ret
2b6b0                 | 
2b6b0                 | hub_port_handler
2b6b0     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2b6b4     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b6b8     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b6bc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b6c0     55 02 A0 FD |                 call    #control_read
2b6c4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2b6c8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2b6c8                 | 
2b6c8     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2b6cc     50 01 90 5D |         if_x0   jmp     #.other
2b6d0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2b6d4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2b6d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b6dc     A0 02 A0 FD |                 call    #control_write
2b6e0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2b6e4     7C 01 90 5D |         if_x0   jmp     #.disconnect
2b6e8     B0 99 02 F6 |                 mov     hctwait, _100ms_
2b6ec     EF 02 A0 FD |                 call    #poll_waitx
2b6f0                 | 
2b6f0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2b6f4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2b6f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b6fc     A0 02 A0 FD |                 call    #control_write
2b700                 | 
2b700     02 76 07 F6 |                 mov     htmp3, #2
2b704                 | .wait_reset
2b704     AC 99 02 F6 |                 mov     hctwait, _8ms_
2b708     EF 02 A0 FD |                 call    #poll_waitx
2b70c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b710     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b714     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b718     55 02 A0 FD |                 call    #control_read
2b71c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2b720     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2b724     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2b728                 | 
2b728     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2b72c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2b730     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b734     A0 02 A0 FD |                 call    #control_write
2b738                 | 
2b738     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2b73c                 | .wait_recover
2b73c     A7 99 02 F6 |                 mov     hctwait, _1ms_
2b740     EF 02 A0 FD |                 call    #poll_waitx
2b744     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2b748                 | 
2b748     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b74c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2b750     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2b754                 | 
2b754     00 08 00 FF 
2b758     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2b75c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2b760     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2b764     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2b768     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2b76c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b770     48 01 90 5D |         if_nz   jmp     #.done
2b774                 | .get_dev_desc
2b774     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2b778     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2b77c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2b780     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2b784     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2b788     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2b78c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2b790     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b794     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b798     AC 99 02 F6 |                 mov     hctwait, _8ms_
2b79c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2b7a0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2b7a4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2b7a8     BE 00 A0 FD |                 call    #calc_crc5
2b7ac     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2b7b0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2b7b4     F7 AD C2 FA |                 rdbyte  total_data, pb
2b7b8     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2b7bc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2b7c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b7c4     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b7c8     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2b7cc     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2b7d0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2b7d0     9F 99 02 F6 |                 mov     hctwait, _500us_
2b7d4     EF 02 A0 FD |                 call    #poll_waitx
2b7d8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2b7dc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2b7e0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2b7e4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2b7e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b7ec     CC 00 90 5D |         if_nz   jmp     #.done
2b7f0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2b7f4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2b7f8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2b7fc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2b800     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2b804     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2b808     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2b80c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2b810     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2b814     A4 00 90 CD |         if_b    jmp     #.done
2b818     6C F0 BF FD |                 call    #hparse_con_desc
2b81c     9C 00 90 FD |                 jmp     #.done
2b820                 | 
2b820                 | .other
2b820     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2b824     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2b828     28 00 90 AD |         if_x1   jmp     #.reset_feature
2b82c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2b830     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2b834     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2b838     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2b83c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2b840     10 00 90 AD |         if_x1   jmp     #.reset_feature
2b844     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2b848     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2b84c     04 00 90 AD |         if_x1   jmp     #.reset_feature
2b850     68 00 90 FD |                 jmp     #.done
2b854                 | .reset_feature
2b854     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2b858     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b85c     A0 02 A0 FD |                 call    #control_write
2b860     58 00 90 FD |                 jmp     #.done
2b864                 | .disconnect
2b864                 | 
2b864     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b868     00 70 E3 F8 |                 getbyte htmp
2b86c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2b870     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2b874     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2b878     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2b87c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2b880     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2b884                 |         if EMUPAD_MAX_PLAYER > 0
2b884                 |         end
2b884                 |         if HAVE_MOUSE
2b884     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2b888     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2b88c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2b890                 |         end
2b890                 |         if HAVE_HIDPAD
2b890     14 0A F0 FE |                 loc ptrb,#hidpad_report
2b894     2D 71 03 F6 |                 mov htmp,hdev_port
2b898     01 70 E7 F2 |                 cmpsub htmp,#1
2b89c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2b8a0     B8 F3 03 F1 |                 add ptrb,htmp
2b8a4     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2b8a8     80 01 6C FC |                 wrlong #0,ptrb
2b8ac                 |         end
2b8ac                 | 
2b8ac     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2b8b0     00 00 C4 F8 |                 setbyte #0
2b8b4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b8b8     00 00 04 F6 |                 mov     0-0, #0
2b8bc                 | 
2b8bc                 | .done
2b8bc     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2b8c0     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2b8c4     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2b8c8     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2b8cc     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2b8d0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2b8d4                 | 
2b8d4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b8d8     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b8dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b8e0     55 02 A0 FD |                 call    #control_read
2b8e4     00 69 06 FB |                 rdlong  hub_port_status, ptra
2b8e8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2b8e8     2D 00 64 FD |                 ret
2b8ec                 | 
2b8ec                 | '------------------------------------------------------------------------------
2b8ec                 | ' Partially populated SETUP packets
2b8ec                 | '------------------------------------------------------------------------------
2b8ec     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2b8ed     06          |                 byte    REQ_GET_DESC
2b8ee     00 01       |                 word    TYPE_DEVICE << 8
2b8f0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b8f2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b8f4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2b8f5     06          |                 byte    REQ_GET_DESC
2b8f6     00 02       |                 word    TYPE_CONFIG << 8
2b8f8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b8fa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b8fc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2b8fd     09          |                 byte    REQ_SET_CONFIG
2b8fe     00 00       |                 word    0       ' Configuration value
2b900     00 00       |                 word    0       ' Zero
2b902     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2b904     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2b905     05          |                 byte    REQ_SET_ADDR
2b906     00 00       |                 word    0       ' Zero
2b908     00 00       |                 word    0       ' Zero
2b90a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2b90c                 | '------------------------------------------------------------------------------
2b90c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2b90c                 | ' wValue field dictates which protocol should be used.
2b90c                 | '
2b90c                 | ' When initialized, all devices default to report protocol. However the host
2b90c                 | ' should not make any assumptions about the device state and should set the
2b90c                 | ' desired protocol whenever initializing a device.
2b90c                 | '------------------------------------------------------------------------------
2b90c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b90d     0B          |                 byte    HID_SET_PROTO
2b90e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2b910                 |                                                 ' (HID 1.11 Section 7.2.6).
2b910     00 00       |                 word    0               ' Interface index number.
2b912     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2b914                 | '------------------------------------------------------------------------------
2b914     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b915     0A          |                 byte    HID_SET_IDLE
2b916     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2b918                 |                                         ' reporting until a change is detected in the report data
2b918                 | 
2b918                 |                                         ' (HID 1.11 Section 7.2.4).
2b918     00 00       |                 word    0       ' Interface index number.
2b91a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2b91c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b91d     09          |                 byte    HID_SET_REPORT
2b91e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2b920                 |                                         ' (HID 1.11 Section 7.2.2).
2b920     00 00       |                 word    0       ' Interface index number.
2b922     00 00       |                 word    0       ' Size of the report, in bytes.
2b924     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2b925     06          |                 byte    REQ_GET_DESC
2b926     00 22       |                 word    TYPE_REPORT << 8
2b928     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b92a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b92c                 | '------------------------------------------------------------------------------
2b92c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2b92d     06          |                 byte    REQ_GET_DESC
2b92e     00 29       |                 word    TYPE_HUB << 8
2b930     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b932     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b934     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2b935     03          |                 byte    REQ_SET_FEATURE
2b936     00 00       |                 word    0       ' port power
2b938     01 00       |                 word    1       ' Port index number (1+)
2b93a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b93c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2b93d     01          |                 byte    REQ_CLEAR_FEATURE
2b93e     00 00       |                 word    0       ' port power
2b940     01 00       |                 word    1       ' Port index number (1+)
2b942     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b944     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2b945     00          |                 byte    REQ_GET_STATUS
2b946     00 00       |                 word    0
2b948     01 00       |                 word    1       ' Port index number (1+)
2b94a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2b94c                 | '------------------------------------------------------------------------------
2b94c                 | if _HAVE_GAMEPAD
2b94c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2b950                 | ps3_command_buff
2b950     00 00 00 00 
2b954     00          |                 byte    $00, $00, $00, $00, $00
2b955     00 00 00 00 
2b959     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2b95a     FF 27 10 00 
2b95e     32          |                 byte    $FF, $27, $10, $00, $32
2b95f     FF 27 10 00 
2b963     32          |                 byte    $FF, $27, $10, $00, $32
2b964     FF 27 10 00 
2b968     32          |                 byte    $FF, $27, $10, $00, $32
2b969     FF 27 10 00 
2b96d     32          |                 byte    $FF, $27, $10, $00, $32
2b96e     00 00 00 00 
2b972     00          |                 byte    $00, $00, $00, $00, $00
2b973     00 00 00 00 
2b977     00          |                 byte    $00, $00, $00, $00, $00
2b978     00 00 00 00 
2b97c     00          |                 byte    $00, $00, $00, $00, $00
2b97d     00 00 00    |                 byte    $00, $00, $00
2b980                 | '------------------------------------------------------------------------------
2b980     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2b983                 |                                         ' 0x01 All blinking
2b983                 |                                         ' 0x02 1 flashes, then on
2b983                 |                                         ' 0x03 2 flashes, then on
2b983                 |                                         ' 0x04 3 flashes, then on
2b983                 |                                         ' 0x05 4 flashes, then on
2b983                 |                                         ' 0x06 1 on
2b983                 |                                         ' 0x07 2 on
2b983                 |                                         ' 0x08 3 on
2b983                 |                                         ' 0x09 4 on
2b983                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2b983                 |                                         ' 0x0B Blinking*
2b983                 |                                         ' 0x0C Slow blinking*
2b983                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2b983     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2b986     00          |                 byte    $00             ' Left rumble
2b987     00          |                 byte    $00             ' Right rumble
2b988     00 00 00    |                 byte    $00, $00, $00
2b98b     00          | end
2b98c                 | alignl
2b98c                 | 
2b98c                 | if HAVE_MOUSE
2b98c     00 00 00 00 
2b990     00 00 00 00 | mouse_limits long 0[2]
2b994     00 00 00 00 | mouse_outptr long 0
2b998                 | end
2b998                 | 
2b998                 | if KEYQUEUE_SIZE > 0
2b998     00          | keyq_head byte 0
2b999     00          | keyq_tail byte 0
2b99a     00 00 00 00 
      ...             
2bb96     00 00 00 00 
2bb9a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2bb9c                 | alignl
2bb9c                 | end
2bb9c                 | 
2bb9c                 | if EMUPAD_MAX_PLAYER > 0
2bb9c                 | emupad_rule_buffer
2bb9c                 | if EMUPAD_BUILTIN_RULES
2bb9c                 | file "padmap_builtin.dat"
2bb9c                 | end
2bb9c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2bb9c                 | '' Default rule directly follows!
2bb9c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2bb9c                 | end
2bb9c                 | 
2bb9c                 | '------------------------------------------------------------------------------
2bb9c                 | ' The USB data cache area gets zero-filled at every device disconnect
2bb9c                 | '------------------------------------------------------------------------------
2bb9c                 | usb_cache_start
2bb9c                 | 
2bb9c                 | ' HID descriptor and report buffers
2bb9c                 | if !!OVERLAP_MEMORY
2bb9c     00 00 00 00 
      ...             
2c294     00 00 00 00 
2c298     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2c29c                 | end
2c29c     00 00 00 00 
2c2a0     00 00 00 00 | hkbd_report     byte    0[8]
2c2a4     00 00 00 00 | hkbd_led_rep    byte    0
2c2a8                 | alignl
2c2a8                 | 
2c2a8                 | if HAVE_HIDPAD
2c2a8     00 00 00 00 
      ...             
2c364     00 00 00 00 
2c368     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2c36c                 | end
2c36c                 | 
2c36c                 | ' HUB descriptor
2c36c     00          | hub_descr       byte    0   ' bDescLength
2c36d     00          |                 byte    0   ' bDescriptorType
2c36e     00          |                 byte    0   ' bNbrPorts
2c36f     00 00       |                 word    0   ' wHubCharacteristics
2c371     00          |                 byte    0   ' bPwrOn2PwrGood
2c372     00          |                 byte    0   ' bHubContrCurrent
2c373     00          |                 byte    0   ' DeviceRemoveable
2c374     00          |                 byte    0   ' PortPwrCtrlMask
2c375                 | 
2c375                 | usb_cache_end
2c375                 | 
2c375                 | if HAVE_MOUSE
2c375     00 00 00 00 | mouse_xacc      long 0
2c379     00 00 00 00 | mouse_yacc      long 0
2c37d     00 00 00 00 | mouse_zacc      long 0
2c381     00          | mouse_bstate    byte 0
2c382     00          | mouse_lpending  byte 0
2c383     00          | mouse_rpending  byte 0
2c384     00          | mouse_mpending  byte 0
2c385     00          | mouse_lock      byte 0
2c386     00 00 00    |                 byte 0[3] ' padding
2c389                 | end
2c389                 | 
2c389     00 00 00 00 
      ...             
2c401     00 00 00 00 
2c405     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2c409     00 00 00 00 
2c40d     00 00 00 00 
2c411     00 00 00 00 
2c415     00 00 00 00 
2c419     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2c41b     00 00 00 00 
      ...             
2c513     00 00 00 00 
2c517     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2c51b                 | 
2c51b     00          | driver_cog      byte    0                       ' Current driver cog + 1
2c51c                 | 	alignl
2c51c                 | _Audio093b_8_sc_spin2_dat_
2c51c                 | 
2c51c                 | audio       org     0
2c51c                 | 
2c51c     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2c520     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2c524     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2c528                 | 
2c528     01 EC 63 FD |             cogid   pa                   ' compute cogid
2c52c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2c530     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2c534     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2c538                 | 
2c538     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2c53c     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2c540     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2c544     0F CA 05 FC |             wrpin   dac,#right
2c548     0F BE 1C FC |             wxpin   #95,#right    
2c54c     41 9C 64 FD |             dirh    #left addpins 1
2c550     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2c554     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2c558     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2c55c                 |             
2c55c                 | '---------------------------------------------------------------------------------        
2c55c                 | '----------------- The main loop -------------------------------------------------
2c55c                 | '---------------------------------------------------------------------------------
2c55c                 | 
2c55c     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2c560     10 00 90 CD |       if_c  jmp     #loop1
2c564                 |   
2c564     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2c568     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2c56c     B1 00 80 F1 |             sub     0-0,a40000000
2c570     FD A9 6D FB |             djnz    cn,#p402
2c574                 |     
2c574     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2c578     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2c57c     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2c580     01 A8 05 C6 |     if_c    mov     cn,#1
2c584     B6 AA 39 F3 |             fle     ct,time3 wcz
2c588     02 A8 05 C6 |     if_c    mov     cn,#2     
2c58c     B7 AA 39 F3 |             fle     ct,time4 wcz
2c590     03 A8 05 C6 |     if_c    mov     cn,#3
2c594     B8 AA 39 F3 |             fle     ct,time5 wcz
2c598     04 A8 05 C6 |     if_c    mov     cn,#4
2c59c     B9 AA 39 F3 |             fle     ct,time6 wcz
2c5a0     05 A8 05 C6 |     if_c    mov     cn,#5
2c5a4     BA AA 39 F3 |             fle     ct,time7 wcz
2c5a8     06 A8 05 C6 |     if_c    mov     cn,#6
2c5ac     BB AA 39 F3 |             fle     ct,time8 wcz
2c5b0     07 A8 05 C6 |     if_c    mov     cn,#7
2c5b4                 | 
2c5b4                 | 
2c5b4                 | '----------------------------------------------------------------------------------
2c5b4                 | '------------- Compute channel samples --------------------------------------------
2c5b4                 | '----------------------------------------------------------------------------------
2c5b4                 | 
2c5b4                 | 
2c5b4     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2c5b8     05 78 65 F0 |             shl     channeladd,#5
2c5bc     BC F0 03 F1 |             add     ptra,channeladd
2c5c0                 | 
2c5c0     28 0E 64 FD |             setq    #7                        ' read parameters
2c5c4     00 8F 05 FB |             rdlong  pointer0,ptra
2c5c8                 | '            testb   command0,#29 wz
2c5c8                 | '    if_nz   jmp     #p408
2c5c8                 | '    	    getword envptr,command0,#0
2c5c8                 | '    	    getbyte envspeed,command0,#2
2c5c8                 | '    	    jmp     #p404                     'if envelope then no sample rate
2c5c8                 |     	    
2c5c8     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2c5cc     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2c5d0     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2c5d4     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2c5d8     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2c5dc     00 7C 0D F2 |             cmp     qq,#0 wz                         
2c5e0     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2c5e4     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2c5e8                 |             
2c5e8     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2c5ec     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2c5f0     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2c5f4                 | 
2c5f4                 | 
2c5f4     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2c5f8     C8 B0 39 F9 |             getword oldrs,sample0,#1
2c5fc     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2c600     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2c604     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2c608     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2c60c                 | 
2c60c     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2c610     00 AC 01 F6 |             mov     dt0,0-0    
2c614     B3 AC 81 F1 |             sub     dt0,time0
2c618                 |             
2c618     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2c61c     CF 00 00 F1 |             add     0-0,afreq0  	
2c620                 | 
2c620     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2c624     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2c628     08 8E 45 F0 |             shr     pointer0,#8
2c62c                 |          
2c62c     1F 92 0D F4 |             testb   sstart0,#31 wz            
2c630     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2c634     1C 92 0D F4 |             testb   sstart0,#28 wz            
2c638     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2c63c                 |             
2c63c     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2c640     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2c644     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2c648                 |             
2c648     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2c64c     C9 7C 01 F1 |             add     qq,sstart0            
2c650                 | 
2c650                 | 
2c650                 | 
2c650     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2c654     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2c658     04 01 B0 1D |     if_gt   call    #cache_read
2c65c                 |          
2c65c                 |          
2c65c                 |  
2c65c                 |          
2c65c     1F 92 0D F4 |             testb   sstart0,#31 wz 
2c660     08 7E 65 50 |     if_nz   shl     spl,#8
2c664     08 8E 65 50 |     if_nz   shl     pointer0,#8
2c668     07 8E 65 A0 |     if_z    shl     pointer0,#7
2c66c     1C 92 0D F4 |             testb   sstart0,#28 wz            
2c670     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2c674     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2c678                 |     
2c678                 | 
2c678     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2c67c     00 7E 01 F6 |             mov     spl,0-0
2c680                 |  
2c680     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2c684     00 B2 01 F6 |             mov     ls0,0-0
2c688     20 00 00 FF 
2c68c     00 7C 05 F6 |             mov     qq,##16384
2c690     D2 7C 81 F1 |             sub     qq,apan0
2c694     BE 7E 31 FA |             scas    spl,qq
2c698     00 B4 01 F6 |             mov     rs0, 0-0
2c69c                 | 
2c69c     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2c6a0     DA B8 01 F1 |             add     rs,rs0
2c6a4     D7 B6 81 F1 |             sub     ls,oldls
2c6a8     D9 B6 01 F1 |             add     ls,ls0
2c6ac                 |    
2c6ac     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2c6b0     D9 90 21 F9 |             setword sample0,ls0,#0
2c6b4                 |             
2c6b4     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2c6b8     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2c6bc     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2c6c0     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2c6c4     04 00 00 AF 
2c6c8     00 68 05 A1 |     if_z    add     time1,##2048
2c6cc     B4 6A 01 A6 |     if_z    mov     time2,time1
2c6d0     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2c6d4                 |             
2c6d4     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2c6d8     00 8F 65 FC |             wrlong  pointer0,ptra
2c6dc     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2c6e0                 |                       
2c6e0     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2c6e4     FF 7B 25 A7 |     if_z    decmod  front, #511          
2c6e8                 |          
2c6e8     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2c6ec     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2c6f0     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2c6f4     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2c6f8                 | 	    
2c6f8                 | 		    
2c6f8     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2c6fc     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2c700     D8 BC 01 F6 |             mov     newsample, oldrs       
2c704                 | 
2c704     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2c708     D6 66 01 F1 |             add     time0,dt0    
2c70c                 |                                      
2c70c     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2c710     60 FE 9F AD |     if_z    jmp     #loop1
2c714     D6 7C 01 F6 |             mov     qq,dt0
2c718                 |   
2c718     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2c71c     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2c720     F4 FF 9F AD |     if_e    jmp     #p301    
2c724                 | 		
2c724     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2c728     20 00 90 AD |     if_z    jmp #p302	   
2c72c                 |  
2c72c                 |  
2c72c     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2c730     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2c734     02 C6 65 C0 |     if_c    shl scptr2,#2
2c738     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2c73c     60 C6 65 FC |             wrlong scptr2,#$60
2c740     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2c744     01 00 00 CF 
2c748     7F C4 05 C7 |     if_c    incmod scptr,##639
2c74c                 | 			    
2c74c     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2c750     00 00 00 FF 
2c754     FF 7B 05 F7 |             incmod  front, ##511
2c758     EF 7D 6D FB |             djnz    qq,#p301
2c75c                 |             
2c75c     FC FD 9F FD |             jmp     #loop            'loop
2c760                 | 
2c760                 | '----------------------------------------------------------------------------------
2c760                 | '------------- This is the end of the main loop -----------------------------------
2c760                 | '----------------------------------------------------------------------------------
2c760                 | 
2c760                 | '----------------------------------------------------------------------------------
2c760                 | '------------- PSRAM cache ----------- --------------------------------------------
2c760                 | '----------------------------------------------------------------------------------
2c760                 | 
2c760                 | ' There are 8 cache pointers for 8 channels
2c760                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2c760                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2c760                 | 
2c760                 | 
2c760     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2c764                 |             
2c764     BE E8 01 F6 | 	    mov     addrhi,qq		
2c768     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2c76c     E8 A8 95 F9 | 	    alts    cn,#cache1            
2c770     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2c774     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2c778                 | 	
2c778     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2c77c     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2c780     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2c784     08 E0 65 F0 | 	    shl     cmd,#8
2c788     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2c78c     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2c790     08 E2 65 F0 |             shl     hubaddr,#8                  '
2c794     E7 E2 01 F1 |             add     hubaddr,hubptr 
2c798     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2c79c     28 04 64 FD |             setq    #2                          ' write 3 longs
2c7a0     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2c7a4     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2c7a8     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2c7ac                 |             
2c7ac                 | 	
2c7ac     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2c7b0     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2c7b4     E7 7C 01 F1 | 	    add     qq,hubptr
2c7b8     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2c7bc     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2c7c0                 |           
2c7c0                 | 
2c7c0                 | '--------------------------------------------------------------------------
2c7c0                 | '------ Interrupt service -------------------------------------------------
2c7c0                 | '------ Output the sample, get the next one if exists ---------------------
2c7c0                 | '--------------------------------------------------------------------------
2c7c0                 | 
2c7c0     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2c7c4     0F 88 25 FC |             wypin   rsample,#right       '4
2c7c8     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2c7cc     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2c7d0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2c7d4     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2c7d8     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2c7dc                 |     
2c7dc     F5 FF 3B FB |             reti1                        '17/19 
2c7e0                 |           
2c7e0                 | '---------------------------------------------------------------------------
2c7e0                 | '-------- End of interrupt -------------------------------------------------
2c7e0                 | '---------------------------------------------------------------------------    
2c7e0                 | 
2c7e0                 | 
2c7e0                 | '---------------------------------------------------------------------------
2c7e0                 | '------- Variables ---------------------------------------------------------
2c7e0                 | '---------------------------------------------------------------------------
2c7e0                 | 
2c7e0                 | ' constants
2c7e0                 | 
2c7e0     00 00 00 40 | a40000000   long $40000000
2c7e4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2c7e8                 | 
2c7e8                 | ' Time variables
2c7e8                 | 
2c7e8     00 00 00 00 | time0       long 0    ' Global sample computing time
2c7ec     01 00 00 00 | time1       long 1    ' Local channels time
2c7f0     02 00 00 00 | time2       long 2
2c7f4     03 00 00 00 | time3       long 3
2c7f8     04 00 00 00 | time4       long 4
2c7fc     05 00 00 00 | time5       long 5
2c800     06 00 00 00 | time6       long 6
2c804     07 00 00 00 | time7       long 7
2c808     08 00 00 00 | time8       long 8
2c80c                 | 
2c80c     00 00 00 00 | channeladd long 0
2c810                 | 
2c810     00 00 00 00 | front       long 0
2c814                 | 
2c814                 | ' temporary variables 
2c814     00 00 00 00 | qq          long 0
2c818     00 00 00 00 | spl         long 0
2c81c     00 00 00 00 | zero        long 0
2c820     00 00 00 00 | mailbox     long 0
2c824     00 00 00 00 | mailbox2 long 0
2c828                 | 
2c828                 | ' Interrupt ISR variables
2c828                 | 
2c828     00 00 00 00 | lsample     long 0
2c82c     00 00 00 00 | rsample     long 0
2c830     00 00 00 00 | lsnext      long 0
2c834     00 00 00 00 | rsnext      long 0 
2c838                 | 
2c838                 | ' channel parameter block
2c838                 | 
2c838     00 00 00 00 | pointer0    long 0     
2c83c     00 00 00 00 | sample0     long 0
2c840     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2c844     00 00 00 00 | lstart0     long 0
2c848     00 00 00 00 | lend0       long 0
2c84c     00 00 00 00 | volpan0     long 0
2c850     00 00 00 00 | freqskip0   long 0
2c854     00 00 00 00 | command0    long 0
2c858                 | 
2c858     00 00 00 00 | afreq0      long 0
2c85c     00 00 00 00 | askip0      long 0
2c860     00 00 00 00 | avol0       long 0
2c864     00 00 00 00 | apan0       long 0
2c868                 | 
2c868     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2c86c     00 00 00 00 | cn          long 0
2c870     00 00 00 00 | ct          long 0
2c874     00 00 00 00 | dt0         long 0
2c878                 | 
2c878                 | ' Samples
2c878     00 00 00 00 | oldls       long 0
2c87c     00 00 00 00 | oldrs       long 0
2c880                 | 
2c880     00 00 00 00 | ls0         long 0
2c884     00 00 00 00 | rs0         long 0
2c888                 | 
2c888     00 00 00 00 | ls          long 0    
2c88c     00 00 00 00 | rs          long 0
2c890                 | 
2c890     00 00 00 00 | oldsample   long 0
2c894     00 00 00 00 | newsample   long 0
2c898                 | 
2c898     00 00 00 00 | nrsample    long 0
2c89c     00 00 00 00 | nlsample    long 0
2c8a0                 | 
2c8a0     00 00 00 00 | scbase long 0
2c8a4     00 00 00 00 | scptr long 0
2c8a8     00 00 00 00 | scptr2 long 0
2c8ac     00 00 00 00 | scope long 0
2c8b0                 | 
2c8b0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2c8b4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2c8b8                 | 
2c8b8     00 18 07 00 | hubptr      long $71800
2c8bc     00 00 00 00 | cache1      long 0
2c8c0     00 00 00 00 | cache2      long 0
2c8c4     00 00 00 00 | cache3      long 0
2c8c8     00 00 00 00 | cache4      long 0
2c8cc     00 00 00 00 | cache5      long 0
2c8d0     00 00 00 00 | cache6      long 0
2c8d4     00 00 00 00 | cache7      long 0
2c8d8     00 00 00 00 | cache8      long 0
2c8dc                 | 
2c8dc                 | 
2c8dc     00 00 00 00 | cmd         long 0
2c8e0     00 00 00 00 | hubaddr     long 0
2c8e4     00 01 00 00 | count       long 256
2c8e8     00 00 00 00 | addrlo long 0
2c8ec     00 00 00 00 | addrhi long 0
2c8f0     00 00 00 00 | pointer00 long 0
2c8f4     00 00 00 00 
2c8f8     00 00 00 00 | null  			long 	0,0           ' for channel reset
2c8fc                 | 	alignl
2c8fc                 | __system__dat_
2c8fc     00 00 00 00 
2c900     00 00 00 00 | 	byte	$00[8]
2c904     03 00 00 00 
2c908     00 00 00 00 
2c90c     00 00 00 00 
2c910     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c914     00 00 00 00 
      ...             
2cba0     00 00 00 00 
2cba4     00 00 00 00 | 	byte	$00[660]
2cba8     00 00 10 05 | 	long	(81 {__system____root_opendir})<<20
2cbac     00 00 20 05 | 	long	(82 {__system____root_closedir})<<20
2cbb0     00 00 30 05 | 	long	(83 {__system____root_readdir})<<20
2cbb4     00 00 40 05 | 	long	(84 {__system____root_stat})<<20
2cbb8     00 00 00 00 
2cbbc     00 00 00 00 
2cbc0     00 00 00 00 
2cbc4     00 00 00 00 
2cbc8     00 00 00 00 
2cbcc     00 00 00 00 
2cbd0     00 00 00 00 | 	byte	$00[28]
2cbd4     3C CC 02 00 | 	long	@@@__system__dat_ + 832
2cbd8     3F CC 02 00 | 	long	@@@__system__dat_ + 835
2cbdc     60 CC 02 00 | 	long	@@@__system__dat_ + 868
2cbe0     79 CC 02 00 | 	long	@@@__system__dat_ + 893
2cbe4     94 CC 02 00 | 	long	@@@__system__dat_ + 920
2cbe8     AE CC 02 00 | 	long	@@@__system__dat_ + 946
2cbec     BE CC 02 00 | 	long	@@@__system__dat_ + 962
2cbf0     D0 CC 02 00 | 	long	@@@__system__dat_ + 980
2cbf4     E2 CC 02 00 | 	long	@@@__system__dat_ + 998
2cbf8     F4 CC 02 00 | 	long	@@@__system__dat_ + 1016
2cbfc     00 CD 02 00 | 	long	@@@__system__dat_ + 1028
2cc00     11 CD 02 00 | 	long	@@@__system__dat_ + 1045
2cc04     25 CD 02 00 | 	long	@@@__system__dat_ + 1065
2cc08     2F CD 02 00 | 	long	@@@__system__dat_ + 1075
2cc0c     3F CD 02 00 | 	long	@@@__system__dat_ + 1091
2cc10     4E CD 02 00 | 	long	@@@__system__dat_ + 1106
2cc14     64 CD 02 00 | 	long	@@@__system__dat_ + 1128
2cc18     7D CD 02 00 | 	long	@@@__system__dat_ + 1153
2cc1c     91 CD 02 00 | 	long	@@@__system__dat_ + 1173
2cc20     9F CD 02 00 | 	long	@@@__system__dat_ + 1187
2cc24     B3 CD 02 00 | 	long	@@@__system__dat_ + 1207
2cc28     BF CD 02 00 | 	long	@@@__system__dat_ + 1219
2cc2c     D1 CD 02 00 | 	long	@@@__system__dat_ + 1237
2cc30     E9 CD 02 00 | 	long	@@@__system__dat_ + 1261
2cc34     FB CD 02 00 | 	long	@@@__system__dat_ + 1279
2cc38     0E CE 02 00 | 	long	@@@__system__dat_ + 1298
2cc3c     4F 4B 00 4E 
2cc40     75 6D 65 72 
2cc44     69 63 61 6C 
2cc48     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2cc4c     75 6D 65 6E 
2cc50     74 20 6F 75 
2cc54     74 20 6F 66 
2cc58     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2cc5c     61 69 6E 00 
2cc60     52 65 73 75 
2cc64     6C 74 20 6E 
2cc68     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2cc6c     65 70 72 65 
2cc70     73 65 6E 74 
2cc74     61 62 6C 65 
2cc78     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2cc7c     65 67 61 6C 
2cc80     20 6D 75 6C 
2cc84     74 69 62 79 
2cc88     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2cc8c     65 71 75 65 
2cc90     6E 63 65 00 
2cc94     4E 6F 20 73 
2cc98     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2cc9c     66 69 6C 65 
2cca0     20 6F 72 20 
2cca4     64 69 72 65 
2cca8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2ccac     79 00 42 61 
2ccb0     64 20 66 69 
2ccb4     6C 65 20 6E 
2ccb8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2ccbc     72 00 50 65 
2ccc0     72 6D 69 73 
2ccc4     73 69 6F 6E 
2ccc8     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2cccc     69 65 64 00 
2ccd0     4E 6F 74 20 
2ccd4     65 6E 6F 75 
2ccd8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2ccdc     65 6D 6F 72 
2cce0     79 00 54 65 
2cce4     6D 70 6F 72 
2cce8     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2ccec     66 61 69 6C 
2ccf0     75 72 65 00 
2ccf4     46 69 6C 65 
2ccf8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2ccfc     73 74 73 00 
2cd00     49 6E 76 61 
2cd04     6C 69 64 20 
2cd08     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2cd0c     6D 65 6E 74 
2cd10     00 54 6F 6F 
2cd14     20 6D 61 6E 
2cd18     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2cd1c     65 6E 20 66 
2cd20     69 6C 65 73 
2cd24     00 49 2F 4F 
2cd28     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2cd2c     6F 72 00 4E 
2cd30     6F 74 20 61 
2cd34     20 64 69 72 
2cd38     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2cd3c     72 79 00 49 
2cd40     73 20 61 20 
2cd44     64 69 72 65 
2cd48     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2cd4c     79 00 52 65 
2cd50     61 64 20 6F 
2cd54     6E 6C 79 20 
2cd58     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2cd5c     20 73 79 73 
2cd60     74 65 6D 00 
2cd64     46 75 6E 63 
2cd68     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2cd6c     20 6E 6F 74 
2cd70     20 69 6D 70 
2cd74     6C 65 6D 65 
2cd78     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2cd7c     00 44 69 72 
2cd80     65 63 74 6F 
2cd84     72 79 20 6E 
2cd88     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2cd8c     6D 70 74 79 
2cd90     00 4E 61 6D 
2cd94     65 20 74 6F 
2cd98     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2cd9c     6E 67 00 44 
2cda0     65 76 69 63 
2cda4     65 20 6E 6F 
2cda8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2cdac     65 6B 61 62 
2cdb0     6C 65 00 42 
2cdb4     61 64 20 61 
2cdb8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2cdbc     73 73 00 42 
2cdc0     72 6F 6B 65 
2cdc4     6E 20 63 6F 
2cdc8     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2cdcc     74 69 6F 6E 
2cdd0     00 44 65 76 
2cdd4     69 63 65 20 
2cdd8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2cddc     65 73 6F 75 
2cde0     72 63 65 20 
2cde4     62 75 73 79 
2cde8     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2cdec     73 73 20 64 
2cdf0     65 76 69 63 
2cdf4     65 20 6C 69 
2cdf8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2cdfc     6F 20 73 70 
2ce00     61 63 65 20 
2ce04     6F 6E 20 64 
2ce08     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2ce0c     65 00 55 6E 
2ce10     6B 6E 6F 77 
2ce14     6E 20 65 72 
2ce18     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2ce1c     00 00 00 00 
2ce20     00 00 00 00 | 	byte	$00[8]
2ce24     05 00 00 00 
2ce28     00 00 00 00 
2ce2c     00 00 00 00 
2ce30     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ce34     00 00 00 00 | 	byte	$00, $00, $00, $00
2ce38     00 00 90 06 | 	long	(105 {__system___tx})<<20
2ce3c     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2ce40     00 00 00 00 | 	byte	$00, $00, $00, $00
2ce44     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0489})<<20
2ce48     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0490})<<20
2ce4c     00 00 00 00 
2ce50     00 00 00 00 | 	byte	$00[8]
2ce54     01 00 00 00 
2ce58     06 00 00 00 
2ce5c     00 00 00 00 
2ce60     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ce64     00 00 00 00 
2ce68     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2ce6c     00 00 90 06 | 	long	(105 {__system___tx})<<20
2ce70     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2ce74     00 00 00 00 | 	byte	$00, $00, $00, $00
2ce78     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0489})<<20
2ce7c     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0490})<<20
2ce80     00 00 00 00 
2ce84     00 00 00 00 | 	byte	$00[8]
2ce88     01 00 00 00 
2ce8c     06 00 00 00 
2ce90     00 00 00 00 
2ce94     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ce98     00 00 00 00 
2ce9c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2cea0     00 00 90 06 | 	long	(105 {__system___tx})<<20
2cea4     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2cea8     00 00 00 00 | 	byte	$00, $00, $00, $00
2ceac     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0489})<<20
2ceb0     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0490})<<20
2ceb4     00 00 00 00 
      ...             
2d024     00 00 00 00 
2d028     00 00 00 00 | 	byte	$00[376]
2d02c     30 D0 02 00 | 	long	@@@__system__dat_ + 1844
2d030     00 00 00 00 
2d034     00 00 00 00 
2d038     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d03c                 | 	alignl
2d03c                 | _fatfs_cc_dat_
2d03c     C7 00 FC 00 
2d040     E9 00 E2 00 
2d044     E4 00 E0 00 
2d048     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2d04c     EA 00 EB 00 
2d050     E8 00 EF 00 
2d054     EE 00 EC 00 
2d058     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2d05c     C9 00 E6 00 
2d060     C6 00 F4 00 
2d064     F6 00 F2 00 
2d068     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2d06c     FF 00 D6 00 
2d070     DC 00 F8 00 
2d074     A3 00 D8 00 
2d078     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2d07c     E1 00 ED 00 
2d080     F3 00 FA 00 
2d084     F1 00 D1 00 
2d088     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2d08c     BF 00 AE 00 
2d090     AC 00 BD 00 
2d094     BC 00 A1 00 
2d098     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2d09c     91 25 92 25 
2d0a0     93 25 02 25 
2d0a4     24 25 C1 00 
2d0a8     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2d0ac     A9 00 63 25 
2d0b0     51 25 57 25 
2d0b4     5D 25 A2 00 
2d0b8     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2d0bc     14 25 34 25 
2d0c0     2C 25 1C 25 
2d0c4     00 25 3C 25 
2d0c8     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2d0cc     5A 25 54 25 
2d0d0     69 25 66 25 
2d0d4     60 25 50 25 
2d0d8     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2d0dc     F0 00 D0 00 
2d0e0     CA 00 CB 00 
2d0e4     C8 00 31 01 
2d0e8     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2d0ec     CF 00 18 25 
2d0f0     0C 25 88 25 
2d0f4     84 25 A6 00 
2d0f8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2d0fc     D3 00 DF 00 
2d100     D4 00 D2 00 
2d104     F5 00 D5 00 
2d108     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2d10c     DE 00 DA 00 
2d110     DB 00 D9 00 
2d114     FD 00 DD 00 
2d118     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2d11c     AD 00 B1 00 
2d120     17 20 BE 00 
2d124     B6 00 A7 00 
2d128     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2d12c     B0 00 A8 00 
2d130     B7 00 B9 00 
2d134     B3 00 B2 00 
2d138     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2d13c     61 00 1A 03 
2d140     E0 00 17 03 
2d144     F8 00 07 03 
2d148     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2d14c     78 01 00 01 
2d150     30 01 32 01 
2d154     06 01 39 01 
2d158     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2d15c     2E 01 79 01 
2d160     06 01 80 01 
2d164     4D 00 43 02 
2d168     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2d16c     82 01 84 01 
2d170     84 01 86 01 
2d174     87 01 87 01 
2d178     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2d17c     8B 01 8B 01 
2d180     8D 01 8E 01 
2d184     8F 01 90 01 
2d188     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2d18c     93 01 94 01 
2d190     F6 01 96 01 
2d194     97 01 98 01 
2d198     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2d19c     9B 01 9C 01 
2d1a0     9D 01 20 02 
2d1a4     9F 01 A0 01 
2d1a8     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2d1ac     A2 01 A4 01 
2d1b0     A4 01 A6 01 
2d1b4     A7 01 A7 01 
2d1b8     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2d1bc     AB 01 AC 01 
2d1c0     AC 01 AE 01 
2d1c4     AF 01 AF 01 
2d1c8     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2d1cc     B3 01 B3 01 
2d1d0     B5 01 B5 01 
2d1d4     B7 01 B8 01 
2d1d8     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2d1dc     BB 01 BC 01 
2d1e0     BC 01 BE 01 
2d1e4     F7 01 C0 01 
2d1e8     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2d1ec     C3 01 C4 01 
2d1f0     C5 01 C4 01 
2d1f4     C7 01 C8 01 
2d1f8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2d1fc     CB 01 CA 01 
2d200     CD 01 10 01 
2d204     DD 01 01 00 
2d208     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2d20c     12 01 F3 01 
2d210     03 00 F1 01 
2d214     F4 01 F4 01 
2d218     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2d21c     22 02 12 01 
2d220     3A 02 09 00 
2d224     65 2C 3B 02 
2d228     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2d22c     66 2C 3F 02 
2d230     40 02 41 02 
2d234     41 02 46 02 
2d238     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2d23c     40 00 81 01 
2d240     86 01 55 02 
2d244     89 01 8A 01 
2d248     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2d24c     5A 02 90 01 
2d250     5C 02 5D 02 
2d254     5E 02 5F 02 
2d258     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2d25c     62 02 94 01 
2d260     64 02 65 02 
2d264     66 02 67 02 
2d268     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2d26c     6A 02 62 2C 
2d270     6C 02 6D 02 
2d274     6E 02 9C 01 
2d278     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2d27c     9D 01 73 02 
2d280     74 02 9F 01 
2d284     76 02 77 02 
2d288     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2d28c     7A 02 7B 02 
2d290     7C 02 64 2C 
2d294     7E 02 7F 02 
2d298     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2d29c     82 02 A9 01 
2d2a0     84 02 85 02 
2d2a4     86 02 87 02 
2d2a8     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2d2ac     B1 01 B2 01 
2d2b0     45 02 8D 02 
2d2b4     8E 02 8F 02 
2d2b8     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2d2bc     B7 01 7B 03 
2d2c0     03 00 FD 03 
2d2c4     FE 03 FF 03 
2d2c8     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2d2cc     86 03 88 03 
2d2d0     89 03 8A 03 
2d2d4     B1 03 11 03 
2d2d8     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2d2dc     A3 03 A3 03 
2d2e0     C4 03 08 03 
2d2e4     CC 03 03 00 
2d2e8     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2d2ec     8F 03 D8 03 
2d2f0     18 01 F2 03 
2d2f4     0A 00 F9 03 
2d2f8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2d2fc     F5 03 F6 03 
2d300     F7 03 F7 03 
2d304     F9 03 FA 03 
2d308     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2d30c     20 03 50 04 
2d310     10 07 60 04 
2d314     22 01 8A 04 
2d318     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2d31c     0E 01 CF 04 
2d320     01 00 C0 04 
2d324     D0 04 44 01 
2d328     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2d32c     00 00 7D 1D 
2d330     01 00 63 2C 
2d334     00 1E 96 01 
2d338     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2d33c     00 1F 08 06 
2d340     10 1F 06 06 
2d344     20 1F 08 06 
2d348     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2d34c     40 1F 06 06 
2d350     51 1F 07 00 
2d354     59 1F 52 1F 
2d358     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2d35c     5D 1F 56 1F 
2d360     5F 1F 60 1F 
2d364     08 06 70 1F 
2d368     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2d36c     BB 1F C8 1F 
2d370     C9 1F CA 1F 
2d374     CB 1F DA 1F 
2d378     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2d37c     F9 1F EA 1F 
2d380     EB 1F FA 1F 
2d384     FB 1F 80 1F 
2d388     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2d38c     08 06 A0 1F 
2d390     08 06 B0 1F 
2d394     04 00 B8 1F 
2d398     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2d39c     BC 1F CC 1F 
2d3a0     01 00 C3 1F 
2d3a4     D0 1F 02 06 
2d3a8     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2d3ac     E5 1F 01 00 
2d3b0     EC 1F F3 1F 
2d3b4     01 00 FC 1F 
2d3b8     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2d3bc     32 21 70 21 
2d3c0     10 02 84 21 
2d3c4     01 00 83 21 
2d3c8     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2d3cc     30 2C 2F 04 
2d3d0     60 2C 02 01 
2d3d4     67 2C 06 01 
2d3d8     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2d3dc     80 2C 64 01 
2d3e0     00 2D 26 08 
2d3e4     41 FF 1A 03 
2d3e8     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2d3ec     05 07 09 0E 
2d3f0     10 12 14 16 
2d3f4     18 1C 1E 43 
2d3f8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2d3fc     41 41 43 45 
2d400     45 45 49 49 
2d404     49 41 41 45 
2d408     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2d40c     4F 55 55 59 
2d410     4F 55 4F 9C 
2d414     4F 9E 9F 41 
2d418     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2d41c     A5 A6 A7 A8 
2d420     A9 AA AB AC 
2d424     AD AE AF B0 
2d428     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2d42c     41 41 41 B8 
2d430     B9 BA BB BC 
2d434     BD BE BF C0 
2d438     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2d43c     C5 41 41 C8 
2d440     C9 CA CB CC 
2d444     CD CE CF D1 
2d448     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2d44c     49 49 49 49 
2d450     D9 DA DB DC 
2d454     DD 49 DF 4F 
2d458     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2d45c     4F E6 E8 E8 
2d460     55 55 55 59 
2d464     59 EE EF F0 
2d468     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2d46c     F5 F6 F7 F8 
2d470     F9 FA FB FC 
2d474     FD FE FF 00 
2d478     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2d47c     00 00 00 00 | 	byte	$00, $00, $00, $00
2d480     00 00 80 05 | 	long	(88 {_fatfs_cc_v_close})<<20
2d484     00 00 90 05 | 	long	(89 {_fatfs_cc_v_read})<<20
2d488     00 00 A0 05 | 	long	(90 {_fatfs_cc_v_write})<<20
2d48c     00 00 B0 05 | 	long	(91 {_fatfs_cc_v_lseek})<<20
2d490     00 00 C0 05 | 	long	(92 {_fatfs_cc_v_ioctl})<<20
2d494     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_flush})<<20
2d498     00 00 00 00 
2d49c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d4a0     00 00 D0 05 | 	long	(93 {_fatfs_cc_v_open})<<20
2d4a4     00 00 E0 05 | 	long	(94 {_fatfs_cc_v_creat})<<20
2d4a8     00 00 F0 05 | 	long	(95 {_fatfs_cc_v_opendir})<<20
2d4ac     00 00 00 06 | 	long	(96 {_fatfs_cc_v_closedir})<<20
2d4b0     00 00 10 06 | 	long	(97 {_fatfs_cc_v_readdir})<<20
2d4b4     00 00 20 06 | 	long	(98 {_fatfs_cc_v_stat})<<20
2d4b8     00 00 30 06 | 	long	(99 {_fatfs_cc_v_mkdir})<<20
2d4bc     00 00 40 06 | 	long	(100 {_fatfs_cc_v_rmdir})<<20
2d4c0     00 00 50 06 | 	long	(101 {_fatfs_cc_v_remove})<<20
2d4c4     00 00 60 06 | 	long	(102 {_fatfs_cc_v_rename})<<20
2d4c8     00 00 70 06 | 	long	(103 {_fatfs_cc_v_init})<<20
2d4cc     00 00 80 06 | 	long	(104 {_fatfs_cc_v_deinit})<<20
2d4d0     FF FF FF FF 
2d4d4     1F 00 00 00 
2d4d8     1C 00 00 00 
2d4dc     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2d4e0     1E 00 00 00 
2d4e4     1F 00 00 00 
2d4e8     1E 00 00 00 
2d4ec     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2d4f0     1F 00 00 00 
2d4f4     1E 00 00 00 
2d4f8     1F 00 00 00 
2d4fc     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2d500     1F 00 00 00 
2d504     00 00 00 00 
2d508     1F 00 00 00 
2d50c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2d510     5A 00 00 00 
2d514     78 00 00 00 
2d518     97 00 00 00 
2d51c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2d520     D4 00 00 00 
2d524     F3 00 00 00 
2d528     11 01 00 00 
2d52c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2d530     4E 01 00 00 
2d534     6D 01 00 00 
2d538     FF FF FF FF 
2d53c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2d540     00 00 00 00 
      ...             
2d558     00 00 00 00 
2d55c     00 00 00 00 | 	byte	$00[32]
2d560     7E D5 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2d564     82 D5 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2d568     00 00 00 00 
2d56c     00 00 00 00 
2d570     00 00 00 00 
2d574     00 00 00 00 
2d578     00 00       | 	byte	$00[18]
2d57a     3F 3F 3F 00 
2d57e     55 43 54 00 
2d582     55 43 54 00 
2d586     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2d58a     00 00 00 00 
2d58e     00 00 00    | 	byte	$00[7]
2d591     CA 9A 3B 00 
2d595     00 00 00 01 
2d599     01 01 01 01 
2d59d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d5a1     91 11 11 11 
2d5a5     11 01 01 01 
2d5a9     01 01 01 01 
2d5ad     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d5b1     01 01 01 01 
2d5b5     01 01 01    | 	byte	$01[7]
2d5b8     90 20 20 20 
2d5bc     20 20 20 20 
2d5c0     20 20 20 20 
2d5c4     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2d5c8     42 42 42 42 
2d5cc     42 42 42 42 
2d5d0     42 42       | 	byte	$42[10]
2d5d2     20 20 20 20 
2d5d6     20 20 20    | 	byte	$20[7]
2d5d9     44 44 44 44 
2d5dd     44 44       | 	byte	$44[6]
2d5df     04 04 04 04 
2d5e3     04 04 04 04 
2d5e7     04 04 04 04 
2d5eb     04 04 04 04 
2d5ef     04 04 04 04 | 	byte	$04[20]
2d5f3     20 20 20 20 
2d5f7     20 20       | 	byte	$20[6]
2d5f9     48 48 48 48 
2d5fd     48 48       | 	byte	$48[6]
2d5ff     08 08 08 08 
2d603     08 08 08 08 
2d607     08 08 08 08 
2d60b     08 08 08 08 
2d60f     08 08 08 08 | 	byte	$08[20]
2d613     20 20 20 20 
2d617     01 00 00 00 
2d61b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2d61c                 | __methodtable__
2d61c     A8 0F 01 00 | 	long	@_do_no_command
2d620     B4 B4 00 00 | 	long	@_do_plus
2d624     94 B8 00 00 | 	long	@_do_minus
2d628     5C BD 00 00 | 	long	@_do_or
2d62c     74 BE 00 00 | 	long	@_do_mul
2d630     00 C4 00 00 | 	long	@_do_fdiv
2d634     44 BC 00 00 | 	long	@_do_and
2d638     E0 C1 00 00 | 	long	@_do_div
2d63c     C8 C5 00 00 | 	long	@_do_mod
2d640     E8 C7 00 00 | 	long	@_do_shl
2d644     00 C9 00 00 | 	long	@_do_shr
2d648     18 CA 00 00 | 	long	@_do_power
2d64c     7C AB 00 00 | 	long	@_do_getvar
2d650     B0 8F 00 00 | 	long	@_do_push
2d654     D4 AA 00 00 | 	long	@_do_assign
2d658     1C F2 00 00 | 	long	@_do_cls
2d65c     70 A5 00 00 | 	long	@_do_new
2d660     C0 F2 00 00 | 	long	@_do_plot
2d664     F8 F3 00 00 | 	long	@_do_draw
2d668     E0 FD 00 00 | 	long	@_do_print
2d66c     D8 F6 00 00 | 	long	@_do_circle
2d670     60 F5 00 00 | 	long	@_do_fcircle
2d674     50 F8 00 00 | 	long	@_do_box
2d678     F8 FB 00 00 | 	long	@_do_frame
2d67c     88 F2 00 00 | 	long	@_do_color
2d680     C8 70 00 00 | 	long	@_do_for
2d684     F4 72 00 00 | 	long	@_do_next
2d688     D4 A2 00 00 | 	long	@_do_list
2d68c     A8 9F 00 00 | 	long	@_do_run
2d690     FC A9 00 00 | 	long	@_do_error
2d694     F8 A6 00 00 | 	long	@_do_fast_goto
2d698     E8 A7 00 00 | 	long	@_do_find_goto
2d69c     F8 A9 00 00 | 	long	@_do_slow_goto
2d6a0     50 E2 00 00 | 	long	@_do_converttoint
2d6a4     F4 95 00 00 | 	long	@_test_csave
2d6a8     48 99 00 00 | 	long	@_do_save
2d6ac     08 9C 00 00 | 	long	@_do_load
2d6b0     7C 06 01 00 | 	long	@_do_pinwrite
2d6b4     94 06 01 00 | 	long	@_do_waitms
2d6b8     D0 07 01 00 | 	long	@_do_waitvbl
2d6bc     D8 0A 01 00 | 	long	@_do_if
2d6c0     BC 0B 01 00 | 	long	@_do_else
2d6c4     E0 0B 01 00 | 	long	@_do_nothing
2d6c8     E0 CB 00 00 | 	long	@_do_eq
2d6cc     10 D7 00 00 | 	long	@_do_ge
2d6d0     D0 DA 00 00 | 	long	@_do_le
2d6d4     A0 CF 00 00 | 	long	@_do_gt
2d6d8     60 D3 00 00 | 	long	@_do_lt
2d6dc     90 DE 00 00 | 	long	@_do_ne
2d6e0     20 E4 00 00 | 	long	@_do_rnd
2d6e4     E4 0B 01 00 | 	long	@_do_brun
2d6e8     94 0E 01 00 | 	long	@_do_beep
2d6ec     00 08 01 00 | 	long	@_do_dir
2d6f0     8C 02 01 00 | 	long	@_do_paper
2d6f4     14 03 01 00 | 	long	@_do_ink
2d6f8     B0 03 01 00 | 	long	@_do_font
2d6fc     2C 04 01 00 | 	long	@_do_mode
2d700     00 0E 01 00 | 	long	@_do_mouse
2d704     B4 F1 00 00 | 	long	@_do_gettime
2d708     34 0E 01 00 | 	long	@_do_cursor
2d70c     68 0E 01 00 | 	long	@_do_click
2d710     A4 F0 00 00 | 	long	@_do_mousex
2d714     E8 F0 00 00 | 	long	@_do_mousey
2d718     70 F1 00 00 | 	long	@_do_mousek
2d71c     2C F1 00 00 | 	long	@_do_mousew
2d720     E8 E5 00 00 | 	long	@_do_sin
2d724     D0 E7 00 00 | 	long	@_do_stick
2d728     54 E9 00 00 | 	long	@_do_strig
2d72c     B8 EF 00 00 | 	long	@_do_sprite
2d730     28 EC 00 00 | 	long	@_do_defsprite
2d734     D8 EA 00 00 | 	long	@_do_getpixel
2d738     DC 07 01 00 | 	long	@_do_waitclock
2d73c     B4 0F 01 00 | 	long	@_do_negative
2d740     38 FA 00 00 | 	long	@_do_fill
2d744     14 40 01 00 | 	long	@_hg010b_spin2_putchar
2d748     4C 43 02 00 | 	long	@__struct___bas_wrap_sender_tx
2d74c     90 43 02 00 | 	long	@__struct___bas_wrap_sender_rx
2d750     D8 43 02 00 | 	long	@__struct___bas_wrap_sender_close
2d754     7C 42 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2d758     EC 42 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2d75c     34 42 02 00 | 	long	@___strs_cl_pfunc
2d760     94 A1 01 00 | 	long	@__system____root_opendir
2d764     30 A2 01 00 | 	long	@__system____root_closedir
2d768     AC A1 01 00 | 	long	@__system____root_readdir
2d76c     38 A2 01 00 | 	long	@__system____root_stat
2d770     C0 9A 01 00 | 	long	@__system____default_putc
2d774     44 9A 01 00 | 	long	@__system____default_getc
2d778     68 9B 01 00 | 	long	@__system____default_flush
2d77c     3C 2D 02 00 | 	long	@_fatfs_cc_v_close
2d780     58 31 02 00 | 	long	@_fatfs_cc_v_read
2d784     6C 32 02 00 | 	long	@_fatfs_cc_v_write
2d788     4C 33 02 00 | 	long	@_fatfs_cc_v_lseek
2d78c     D4 33 02 00 | 	long	@_fatfs_cc_v_ioctl
2d790     28 34 02 00 | 	long	@_fatfs_cc_v_open
2d794     A0 2C 02 00 | 	long	@_fatfs_cc_v_creat
2d798     80 2D 02 00 | 	long	@_fatfs_cc_v_opendir
2d79c     F4 2D 02 00 | 	long	@_fatfs_cc_v_closedir
2d7a0     34 2E 02 00 | 	long	@_fatfs_cc_v_readdir
2d7a4     68 2F 02 00 | 	long	@_fatfs_cc_v_stat
2d7a8     E8 33 02 00 | 	long	@_fatfs_cc_v_mkdir
2d7ac     08 34 02 00 | 	long	@_fatfs_cc_v_rmdir
2d7b0     F8 33 02 00 | 	long	@_fatfs_cc_v_remove
2d7b4     18 34 02 00 | 	long	@_fatfs_cc_v_rename
2d7b8     38 35 02 00 | 	long	@_fatfs_cc_v_init
2d7bc     40 35 02 00 | 	long	@_fatfs_cc_v_deinit
2d7c0     4C 53 01 00 | 	long	@__system___tx
2d7c4     8C 53 01 00 | 	long	@__system___rx
2d7c8     A4 AD 01 00 | 	long	@__system___rxtxioctl_0489
2d7cc     FC AD 01 00 | 	long	@__system____dummy_flush_0490
2d7d0     08 35 02 00 | 	long	@_fatfs_cc_v_flush
2d7d4                 | __heap_base
2d7d4     00 00 00 00 
      ...             
6bfd4     00 00 00 00 
6bfd8     00 00 00 00 | 	long	0[64002]
6bfdc                 | objmem
6bfdc     00 00 00 00 
      ...             
76484     00 00 00 00 
76488     00 00 00 00 | 	long	0[10540]
7648c                 | stackspace
7648c     00 00 00 00 | 	long	0[1]
76490 100             | 	org	COG_BSS_START
76490 100             | _var01
76490 100             | 	res	1
76490 101             | _var02
76490 101             | 	res	1
76490 102             | _var03
76490 102             | 	res	1
76490 103             | _var04
76490 103             | 	res	1
76490 104             | _var05
76490 104             | 	res	1
76490 105             | _var06
76490 105             | 	res	1
76490 106             | _var07
76490 106             | 	res	1
76490 107             | _var08
76490 107             | 	res	1
76490 108             | _var09
76490 108             | 	res	1
76490 109             | arg01
76490 109             | 	res	1
76490 10a             | arg02
76490 10a             | 	res	1
76490 10b             | arg03
76490 10b             | 	res	1
76490 10c             | arg04
76490 10c             | 	res	1
76490 10d             | arg05
76490 10d             | 	res	1
76490 10e             | arg06
76490 10e             | 	res	1
76490 10f             | local01
76490 10f             | 	res	1
76490 110             | local02
76490 110             | 	res	1
76490 111             | local03
76490 111             | 	res	1
76490 112             | local04
76490 112             | 	res	1
76490 113             | local05
76490 113             | 	res	1
76490 114             | local06
76490 114             | 	res	1
76490 115             | local07
76490 115             | 	res	1
76490 116             | local08
76490 116             | 	res	1
76490 117             | local09
76490 117             | 	res	1
76490 118             | local10
76490 118             | 	res	1
76490 119             | local11
76490 119             | 	res	1
76490 11a             | local12
76490 11a             | 	res	1
76490 11b             | local13
76490 11b             | 	res	1
76490 11c             | local14
76490 11c             | 	res	1
76490 11d             | local15
76490 11d             | 	res	1
76490 11e             | local16
76490 11e             | 	res	1
76490 11f             | local17
76490 11f             | 	res	1
76490 120             | local18
76490 120             | 	res	1
76490 121             | local19
76490 121             | 	res	1
76490 122             | local20
76490 122             | 	res	1
76490 123             | local21
76490 123             | 	res	1
76490 124             | local22
76490 124             | 	res	1
76490 125             | local23
76490 125             | 	res	1
76490 126             | local24
76490 126             | 	res	1
76490 127             | local25
76490 127             | 	res	1
76490 128             | local26
76490 128             | 	res	1
76490 129             | local27
76490 129             | 	res	1
76490 12a             | local28
76490 12a             | 	res	1
76490 12b             | local29
76490 12b             | 	res	1
76490 12c             | local30
76490 12c             | 	res	1
76490 12d             | local31
76490 12d             | 	res	1
76490 12e             | local32
76490 12e             | 	res	1
76490 12f             | muldiva_
76490 12f             | 	res	1
76490 130             | muldivb_
76490 130             | 	res	1
76490 131             | 	fit	480
76490 131             | 
