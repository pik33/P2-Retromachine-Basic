00000                 | 
00000                 | #line 1 "D:/programowanie/p2-retromachine/Propeller/Basic/basic020.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 20
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 44 08 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 68 BF 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed B0 BD 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 70 A7 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 B0 AC 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 90 B0 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 14 37 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 D0 B7 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 24 4B 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 D4 72 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 8C 70 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 64 82 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 20 3A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     48 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##37363
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     49 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##37432
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     C8 34 B1 FD | 	call	#__system___waitms
0083c     49 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##37432
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     49 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##37432
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     A0 34 B1 FD | 	call	#__system___waitms
00864     49 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##37432
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     49 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##37432
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     78 34 B1 FD | 	call	#__system___waitms
0088c     49 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##37432
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     49 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##37432
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     48 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##37296
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     48 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##37304
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     70 2B B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     C0 2B B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     B0 2B B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     48 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##37312
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     48 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##37340
009b0     14 2B B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     48 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##37312
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     48 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##37340
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     24 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##18912
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     38 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##28736
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     22 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##17872
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     17 01 00 FF 
00ab4     4E 2A 06 F6 | 	mov	local07, ##@LR__4027
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     24 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##18912
00adc     94 53 B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     CC 52 B1 FD | 	call	#__system__LTrim_S
00ae8     24 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##18912
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     17 01 00 FF 
00af8     4F 1E 06 F6 | 	mov	local01, ##@LR__4028
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     24 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##18912
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     49 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##37472
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     49 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##37472
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     24 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##18912
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     24 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##18912
00b64     17 01 00 FF 
00b68     50 16 06 F6 | 	mov	arg03, ##@LR__4029
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     B8 53 B1 FD | 	call	#__system__Instr
00b74     49 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##37476
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     49 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##37476
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     24 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##18912
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     24 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##18912
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     49 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##37476
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     49 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##37476
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     24 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##18912
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     24 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##18912
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     49 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##37476
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     49 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##37476
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     94 4E B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     38 52 B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     70 51 B1 FD | 	call	#__system__LTrim_S
00c44     49 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##37480
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     49 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##37476
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     C8 4D B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     F4 51 B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     2C 51 B1 FD | 	call	#__system__LTrim_S
00c88     24 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##18912
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     24 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##18912
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     17 01 00 FF 
00ca4     52 1E 06 F6 | 	mov	local01, ##@LR__4030
00ca8     49 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##37480
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     49 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##37480
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     24 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##18920
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     24 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##18920
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     49 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##37480
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     49 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##37480
00cf0     17 01 00 FF 
00cf4     53 14 06 F6 | 	mov	arg02, ##@LR__4031
00cf8     24 2E B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     24 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##18920
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     24 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##18920
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     24 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##18920
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     24 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##18920
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     49 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##37480
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     49 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##37480
00d4c     17 01 00 FF 
00d50     54 14 06 F6 | 	mov	arg02, ##@LR__4032
00d54     C8 2D B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     24 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##18920
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     24 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##18920
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     24 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##18920
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     24 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##18920
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     49 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##37480
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     49 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##37480
00da4     17 01 00 FF 
00da8     55 14 06 F6 | 	mov	arg02, ##@LR__4033
00dac     70 2D B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     24 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##18920
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     24 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##18920
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     24 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##18920
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     24 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##18920
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     49 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##37480
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     49 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##37480
00dfc     17 01 00 FF 
00e00     56 14 06 F6 | 	mov	arg02, ##@LR__4034
00e04     18 2D B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     24 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##18920
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     24 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##18920
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     24 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##18912
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     24 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##18912
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     00 4D B1 FD | 	call	#__system__Mid_S
00e58     49 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##37484
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     49 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##37484
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     49 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##37472
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     49 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##37472
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     49 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##37492
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     49 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##37492
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     24 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##18912
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     49 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##37492
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     F4 4B B1 FD | 	call	#__system__Mid_S
00f64     49 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##37500
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     49 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##37500
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     17 01 00 FF 
00f80     57 14 06 F6 | 	mov	arg02, ##@LR__4035
00f84     98 2B B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     22 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##17872
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     49 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##37500
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     24 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##18912
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     49 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##37492
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     54 4B B1 FD | 	call	#__system__Mid_S
01004     49 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##37500
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     49 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##37500
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     17 01 00 FF 
01020     58 14 06 F6 | 	mov	arg02, ##@LR__4036
01024     F8 2A B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     22 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##17872
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     49 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##37500
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     22 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##17872
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     17 01 00 FF 
01088     59 14 06 F6 | 	mov	arg02, ##@LR__4037
0108c     22 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##17872
01094     88 2A B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     22 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##17872
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     22 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##17872
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     4C 2A B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     22 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##17872
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     22 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##17872
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     49 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##37500
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     49 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##37500
011b0     17 01 00 FF 
011b4     5B 14 06 F6 | 	mov	arg02, ##@LR__4038
011b8     64 29 B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     49 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##37500
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     49 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##37500
011dc     17 01 00 FF 
011e0     5D 14 06 F6 | 	mov	arg02, ##@LR__4039
011e4     38 29 B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     22 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##17872
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     22 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##17872
01224     A0 48 B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     17 01 00 FF 
01230     5F 14 06 F6 | 	mov	arg02, ##@LR__4040
01234     E8 28 B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     22 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##17872
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     22 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##17872
0126c     D0 47 B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     17 01 00 FF 
01278     61 14 06 F6 | 	mov	arg02, ##@LR__4041
0127c     A0 28 B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     22 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##17872
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     22 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##17872
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     B8 47 B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     34 28 B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     22 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##17872
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     22 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##17872
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     22 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##17872
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     49 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##37508
01424     17 01 00 FF 
01428     63 14 06 F6 | 	mov	arg02, ##@LR__4042
0142c     F0 26 B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     49 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##37508
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     49 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##37508
0144c     17 01 00 FF 
01450     65 14 06 F6 | 	mov	arg02, ##@LR__4043
01454     C8 26 B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     49 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##37508
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     49 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##37508
01474     17 01 00 FF 
01478     67 14 06 F6 | 	mov	arg02, ##@LR__4044
0147c     A0 26 B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     49 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##37508
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     49 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##37508
0149c     17 01 00 FF 
014a0     69 2E 06 F6 | 	mov	local09, ##@LR__4045
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     74 26 B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     49 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##37508
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     49 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##37508
014c8     17 01 00 FF 
014cc     6B 36 06 F6 | 	mov	local13, ##@LR__4046
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     44 26 B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     49 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##37508
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     49 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##37508
014f8     17 01 00 FF 
014fc     6D 36 06 F6 | 	mov	local13, ##@LR__4047
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     18 26 B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     49 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##37508
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     49 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##37508
01524     17 01 00 FF 
01528     6F 46 06 F6 | 	mov	local21, ##@LR__4048
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     EC 25 B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     49 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##37512
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     49 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##37512
01550     17 01 00 FF 
01554     71 48 06 F6 | 	mov	local22, ##@LR__4049
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     BC 25 B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     49 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##37508
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     49 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##37508
01580     17 01 00 FF 
01584     73 48 06 F6 | 	mov	local22, ##@LR__4050
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     90 25 B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     49 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##37512
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     49 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##37512
015ac     17 01 00 FF 
015b0     75 40 06 F6 | 	mov	local18, ##@LR__4051
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     60 25 B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     49 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##37508
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     49 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##37508
015dc     17 01 00 FF 
015e0     77 40 06 F6 | 	mov	local18, ##@LR__4052
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     34 25 B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     49 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##37512
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     49 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##37512
01608     17 01 00 FF 
0160c     79 4C 06 F6 | 	mov	local24, ##@LR__4053
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     04 25 B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     49 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##37508
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     49 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##37508
01638     17 01 00 FF 
0163c     7B 4E 06 F6 | 	mov	local25, ##@LR__4054
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     D4 24 B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     49 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##37512
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     49 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##37512
01668     17 01 00 FF 
0166c     7D 50 06 F6 | 	mov	local26, ##@LR__4055
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     A4 24 B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     22 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##17872
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     49 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##37512
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     94 24 B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     22 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##17872
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     22 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##17872
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     22 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##17872
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     22 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##17872
017bc     B4 46 B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     EC 45 B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     22 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##17872
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     22 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##17872
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     22 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##17872
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     22 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##17872
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     22 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##17872
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     22 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##17872
01928     14 41 B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     17 01 00 FF 
01934     7F 14 06 F6 | 	mov	arg02, ##@LR__4056
01938     E4 21 B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     22 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##17872
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     22 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##17872
0196c     58 41 B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     17 01 00 FF 
01978     81 14 06 F6 | 	mov	arg02, ##@LR__4057
0197c     A0 21 B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     22 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##17872
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     22 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##17872
019c0     30 43 B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     22 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##17872
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     22 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##17872
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     22 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##17872
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     22 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##17872
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     22 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##17872
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     22 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##17872
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     22 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##17872
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     22 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##17872
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     22 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##17872
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     22 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##17872
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     22 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##17872
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     22 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##17872
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     22 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##17872
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     22 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##17872
01b78                 | ' 
01b78                 | ' select case s
01b78     17 01 00 FF 
01b7c     4A 15 06 F6 | 	mov	arg02, ##@LR__4114
01b80     9C 1F B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     22 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##17872
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     22 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##17872
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     22 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##17872
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     22 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##17872
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     22 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##17872
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     22 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##17872
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     22 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##17872
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     22 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##17872
01c74     38 15 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     22 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##17872
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     22 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##17872
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     22 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##17872
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     22 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##17872
01cd0     B0 18 B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     49 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##37516
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     22 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##17872
01d04     54 1B B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     49 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##37520
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     22 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##17872
01d3c     74 1C B0 FD | 	call	#_isdec
01d40     49 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##37524
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     49 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##37516
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     49 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##37520
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     49 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##37520
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     49 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##37524
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     49 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##37524
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     22 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##17872
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     22 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##17872
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     49 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##37516
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     49 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##37516
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     49 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##37520
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     49 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##37520
01dec     49 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##37524
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     49 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##37524
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     22 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##17872
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     22 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##17872
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     49 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##37516
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     49 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##37516
01e50     49 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##37520
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     49 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##37520
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     49 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##37524
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     49 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##37524
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     22 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##17872
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     22 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##17872
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     22 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##17872
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     22 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##17872
01edc     94 1B B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     22 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##17872
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     22 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##17872
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     D0 3B B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     22 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##17872
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     22 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##17872
01fb4     58 13 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     22 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##17872
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     22 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##17872
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     22 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##17872
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     17 01 00 FF 
02020     83 2A 06 F6 | 	mov	local07, ##@LR__4058
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     22 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##17872
02048     17 01 00 FF 
0204c     84 14 06 F6 | 	mov	arg02, ##@LR__4059
02050     CC 1A B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     22 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##17872
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     22 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##17872
02070     17 01 00 FF 
02074     89 14 06 F6 | 	mov	arg02, ##@LR__4060
02078     A4 1A B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     22 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##17872
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     22 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##17872
02098     17 01 00 FF 
0209c     8E 14 06 F6 | 	mov	arg02, ##@LR__4061
020a0     7C 1A B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     22 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##17884
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     22 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##17884
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     22 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##17892
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     22 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##17892
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     22 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##17884
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     22 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##17884
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     22 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##17872
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     22 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##17872
02110     17 01 00 FF 
02114     93 28 06 F6 | 	mov	local06, ##@LR__4062
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     00 1A B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     22 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##17872
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     22 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##17872
0213c     17 01 00 FF 
02140     99 28 06 F6 | 	mov	local06, ##@LR__4063
02144     14 15 02 F6 | 	mov	arg02, local06
02148     D4 19 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     22 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##17872
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     22 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##17872
02168     17 01 00 FF 
0216c     A0 2A 06 F6 | 	mov	local07, ##@LR__4064
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     A4 19 B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     22 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##17884
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     22 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##17884
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     22 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##17892
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     22 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##17892
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     22 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##17880
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     22 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##17880
021d8     17 01 00 FF 
021dc     A6 14 06 F6 | 	mov	arg02, ##@LR__4065
021e0     3C 19 B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     17 01 00 FF 
021f0     A9 1E 06 F6 | 	mov	local01, ##@LR__4066
021f4     22 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##17880
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     22 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##17884
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     22 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##17880
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     22 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##17880
02228     17 01 00 FF 
0222c     AB 28 06 F6 | 	mov	local06, ##@LR__4067
02230     14 15 02 F6 | 	mov	arg02, local06
02234     E8 18 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     17 01 00 FF 
02244     AF 1E 06 F6 | 	mov	local01, ##@LR__4068
02248     22 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##17880
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     22 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##17884
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     22 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##17872
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     22 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##17872
0227c     34 17 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     22 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##17872
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     22 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##17872
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     18 48 B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     24 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##18920
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     24 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##18920
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     00 18 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     24 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##18920
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     24 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##18920
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     24 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##18920
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     24 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##18920
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     22 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##17892
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     22 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##17892
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     24 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##18920
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     24 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##18920
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     E4 26 B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     20 E2 B0 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     49 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##37480
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     49 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##37480
02384     17 01 00 FF 
02388     B1 14 06 F6 | 	mov	arg02, ##@LR__4069
0238c     90 17 B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     49 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##37480
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     24 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##18920
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     24 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##18920
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     24 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##18920
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     24 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##18920
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     24 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##18920
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     22 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##17884
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     22 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##17884
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     24 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##18920
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     24 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##18920
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     F8 25 B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     34 E1 B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     49 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##37480
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     49 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##37480
02470     17 01 00 FF 
02474     B2 14 06 F6 | 	mov	arg02, ##@LR__4070
02478     A4 16 B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     49 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##37480
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     24 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##18920
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     24 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##18920
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     24 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##18920
024cc     24 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##18920
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     24 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##18920
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     22 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##17892
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     22 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##17892
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     24 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##18920
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     24 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##18920
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     EC 25 B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     49 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##37480
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     49 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##37480
02538     17 01 00 FF 
0253c     B3 14 06 F6 | 	mov	arg02, ##@LR__4071
02540     DC 15 B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     49 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##37480
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     24 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##18920
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     24 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##18920
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     24 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##18920
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     24 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##18920
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     24 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##18920
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     22 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##17884
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     22 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##17884
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     24 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##18920
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     24 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##18920
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     24 25 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     49 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##37480
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     49 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##37480
02600     17 01 00 FF 
02604     B4 14 06 F6 | 	mov	arg02, ##@LR__4072
02608     14 15 B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     49 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##37480
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     24 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##18920
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     22 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##17876
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     22 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##17876
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     22 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##17884
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     22 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##17884
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     88 24 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     22 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##17876
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     22 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##17876
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     22 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##17884
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     22 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##17884
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     10 69 B1 FD | 	call	#__system___getiolock_0306
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     24 14 B1 FD | 	call	#__system___lockmem
026d4     17 01 00 FF 
026d8     B5 14 06 F6 | 	mov	arg02, ##@LR__4073
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     1C 20 B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     B4 1F B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     DC 68 B1 FD | 	call	#__system___getiolock_0306
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     28 23 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     F0 57 B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     54 DE B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     49 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##37480
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     49 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##37480
0274c     17 01 00 FF 
02750     E4 14 06 F6 | 	mov	arg02, ##@LR__4074
02754     C8 13 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     49 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##37480
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     24 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##18912
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     17 01 00 FF 
02788     E5 12 06 F6 | 	mov	arg01, ##@LR__4075
0278c                 | ' 
0278c                 | ' write(text)
0278c     44 03 B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     A0 04 B1 FD | 	call	#_hg010b_spin2_crlf
02794     17 01 00 FF 
02798     E6 12 06 F6 | 	mov	arg01, ##@LR__4076
0279c                 | ' 
0279c                 | ' write(text)
0279c     34 03 B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     90 04 B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     17 01 00 FF 
027c0     EC 14 06 F6 | 	mov	arg02, ##@LR__4077
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     54 13 B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     17 01 00 FF 
027d8     EE 14 06 F6 | 	mov	arg02, ##@LR__4078
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     3C 13 B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     17 01 00 FF 
027f0     F0 14 06 F6 | 	mov	arg02, ##@LR__4079
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     24 13 B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     17 01 00 FF 
02808     F3 14 06 F6 | 	mov	arg02, ##@LR__4080
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     0C 13 B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     17 01 00 FF 
02820     F7 14 06 F6 | 	mov	arg02, ##@LR__4081
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     F4 12 B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     17 01 00 FF 
02838     F9 14 06 F6 | 	mov	arg02, ##@LR__4082
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     DC 12 B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     17 01 00 FF 
02850     FB 14 06 F6 | 	mov	arg02, ##@LR__4083
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     C4 12 B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     17 01 00 FF 
02868     FF 14 06 F6 | 	mov	arg02, ##@LR__4084
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     AC 12 B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     17 01 00 FF 
02880     03 15 06 F6 | 	mov	arg02, ##@LR__4085
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     94 12 B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     17 01 00 FF 
02898     07 15 06 F6 | 	mov	arg02, ##@LR__4086
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     7C 12 B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     17 01 00 FF 
028b0     0B 15 06 F6 | 	mov	arg02, ##@LR__4087
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     64 12 B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     17 01 00 FF 
028c8     0F 15 06 F6 | 	mov	arg02, ##@LR__4088
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     4C 12 B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     17 01 00 FF 
028e0     11 15 06 F6 | 	mov	arg02, ##@LR__4089
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     34 12 B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     17 01 00 FF 
028f8     15 15 06 F6 | 	mov	arg02, ##@LR__4090
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     1C 12 B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     17 01 00 FF 
02910     17 15 06 F6 | 	mov	arg02, ##@LR__4091
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     04 12 B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     17 01 00 FF 
02928     19 15 06 F6 | 	mov	arg02, ##@LR__4092
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     EC 11 B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     17 01 00 FF 
02940     1C 15 06 F6 | 	mov	arg02, ##@LR__4093
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     D4 11 B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     17 01 00 FF 
02958     1F 15 06 F6 | 	mov	arg02, ##@LR__4094
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     BC 11 B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     17 01 00 FF 
02970     21 15 06 F6 | 	mov	arg02, ##@LR__4095
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     A4 11 B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     17 01 00 FF 
02988     23 15 06 F6 | 	mov	arg02, ##@LR__4096
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     8C 11 B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     17 01 00 FF 
029a0     26 15 06 F6 | 	mov	arg02, ##@LR__4097
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     74 11 B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     17 01 00 FF 
029b8     29 15 06 F6 | 	mov	arg02, ##@LR__4098
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     5C 11 B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     17 01 00 FF 
02aa0     2C 15 06 F6 | 	mov	arg02, ##@LR__4099
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     74 10 B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     17 01 00 FF 
02ab8     2E 15 06 F6 | 	mov	arg02, ##@LR__4100
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     5C 10 B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     17 01 00 FF 
02ad0     30 15 06 F6 | 	mov	arg02, ##@LR__4101
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     44 10 B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     17 01 00 FF 
02ae8     32 15 06 F6 | 	mov	arg02, ##@LR__4102
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     2C 10 B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     17 01 00 FF 
02b00     34 15 06 F6 | 	mov	arg02, ##@LR__4103
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     14 10 B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     17 01 00 FF 
02b18     36 15 06 F6 | 	mov	arg02, ##@LR__4104
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     FC 0F B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     17 01 00 FF 
02b30     38 15 06 F6 | 	mov	arg02, ##@LR__4105
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     E4 0F B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     17 01 00 FF 
02b48     3A 15 06 F6 | 	mov	arg02, ##@LR__4106
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     CC 0F B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     17 01 00 FF 
02b60     3C 15 06 F6 | 	mov	arg02, ##@LR__4107
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     B4 0F B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     17 01 00 FF 
02b78     3E 15 06 F6 | 	mov	arg02, ##@LR__4108
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     9C 0F B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     17 01 00 FF 
02b90     40 15 06 F6 | 	mov	arg02, ##@LR__4109
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     84 0F B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     17 01 00 FF 
02ba8     42 15 06 F6 | 	mov	arg02, ##@LR__4110
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     6C 0F B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     17 01 00 FF 
02bc0     44 15 06 F6 | 	mov	arg02, ##@LR__4111
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     54 0F B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     17 01 00 FF 
02bd8     46 15 06 F6 | 	mov	arg02, ##@LR__4112
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     3C 0F B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     17 01 00 FF 
02bf0     48 15 06 F6 | 	mov	arg02, ##@LR__4113
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     24 0F B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     17 01 00 FF 
02ca0     4C 15 06 F6 | 	mov	arg02, ##@LR__4115
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     74 0E B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     AC 03 90 AD |  if_e	jmp	#LR__0180
02cb4     17 01 00 FF 
02cb8     50 15 06 F6 | 	mov	arg02, ##@LR__4116
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     5C 0E B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     9C 03 90 AD |  if_e	jmp	#LR__0181
02ccc     17 01 00 FF 
02cd0     54 15 06 F6 | 	mov	arg02, ##@LR__4117
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     44 0E B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     8C 03 90 AD |  if_e	jmp	#LR__0182
02ce4     17 01 00 FF 
02ce8     59 15 06 F6 | 	mov	arg02, ##@LR__4118
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     2C 0E B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     7C 03 90 AD |  if_e	jmp	#LR__0183
02cfc     17 01 00 FF 
02d00     5E 15 06 F6 | 	mov	arg02, ##@LR__4119
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     14 0E B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     6C 03 90 AD |  if_e	jmp	#LR__0184
02d14     17 01 00 FF 
02d18     64 15 06 F6 | 	mov	arg02, ##@LR__4120
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     FC 0D B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     5C 03 90 AD |  if_e	jmp	#LR__0185
02d2c     17 01 00 FF 
02d30     6B 15 06 F6 | 	mov	arg02, ##@LR__4121
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     E4 0D B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     4C 03 90 AD |  if_e	jmp	#LR__0186
02d44     17 01 00 FF 
02d48     73 15 06 F6 | 	mov	arg02, ##@LR__4122
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     CC 0D B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     3C 03 90 AD |  if_e	jmp	#LR__0187
02d5c     17 01 00 FF 
02d60     77 15 06 F6 | 	mov	arg02, ##@LR__4123
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     B4 0D B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     2C 03 90 AD |  if_e	jmp	#LR__0188
02d74     17 01 00 FF 
02d78     7D 15 06 F6 | 	mov	arg02, ##@LR__4124
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     9C 0D B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     1C 03 90 AD |  if_e	jmp	#LR__0189
02d8c     17 01 00 FF 
02d90     83 15 06 F6 | 	mov	arg02, ##@LR__4125
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     84 0D B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     0C 03 90 AD |  if_e	jmp	#LR__0190
02da4     17 01 00 FF 
02da8     89 15 06 F6 | 	mov	arg02, ##@LR__4126
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     6C 0D B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     FC 02 90 AD |  if_e	jmp	#LR__0191
02dbc     17 01 00 FF 
02dc0     8E 15 06 F6 | 	mov	arg02, ##@LR__4127
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     54 0D B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     EC 02 90 AD |  if_e	jmp	#LR__0192
02dd4     17 01 00 FF 
02dd8     92 15 06 F6 | 	mov	arg02, ##@LR__4128
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     3C 0D B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     DC 02 90 AD |  if_e	jmp	#LR__0193
02dec     17 01 00 FF 
02df0     97 15 06 F6 | 	mov	arg02, ##@LR__4129
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     24 0D B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     CC 02 90 AD |  if_e	jmp	#LR__0194
02e04     17 01 00 FF 
02e08     9D 15 06 F6 | 	mov	arg02, ##@LR__4130
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     0C 0D B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     BC 02 90 AD |  if_e	jmp	#LR__0195
02e1c     17 01 00 FF 
02e20     A2 15 06 F6 | 	mov	arg02, ##@LR__4131
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     F4 0C B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     AC 02 90 AD |  if_e	jmp	#LR__0196
02e34     17 01 00 FF 
02e38     A7 15 06 F6 | 	mov	arg02, ##@LR__4132
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     DC 0C B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     9C 02 90 AD |  if_e	jmp	#LR__0197
02e4c     17 01 00 FF 
02e50     AC 15 06 F6 | 	mov	arg02, ##@LR__4133
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     C4 0C B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     8C 02 90 AD |  if_e	jmp	#LR__0198
02e64     17 01 00 FF 
02e68     B5 15 06 F6 | 	mov	arg02, ##@LR__4134
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     AC 0C B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     7C 02 90 AD |  if_e	jmp	#LR__0199
02e7c     17 01 00 FF 
02e80     BC 15 06 F6 | 	mov	arg02, ##@LR__4135
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     94 0C B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     6C 02 90 AD |  if_e	jmp	#LR__0200
02e94     17 01 00 FF 
02e98     C4 15 06 F6 | 	mov	arg02, ##@LR__4136
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     7C 0C B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     5C 02 90 AD |  if_e	jmp	#LR__0201
02eac     17 01 00 FF 
02eb0     C7 15 06 F6 | 	mov	arg02, ##@LR__4137
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     64 0C B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     4C 02 90 AD |  if_e	jmp	#LR__0202
02ec4     17 01 00 FF 
02ec8     CC 15 06 F6 | 	mov	arg02, ##@LR__4138
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     4C 0C B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     3C 02 90 AD |  if_e	jmp	#LR__0203
02edc     17 01 00 FF 
02ee0     D1 15 06 F6 | 	mov	arg02, ##@LR__4139
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     34 0C B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     2C 02 90 AD |  if_e	jmp	#LR__0204
02ef4     17 01 00 FF 
02ef8     D6 15 06 F6 | 	mov	arg02, ##@LR__4140
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     1C 0C B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     1C 02 90 AD |  if_e	jmp	#LR__0205
02f0c     17 01 00 FF 
02f10     DA 15 06 F6 | 	mov	arg02, ##@LR__4141
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     04 0C B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     0C 02 90 AD |  if_e	jmp	#LR__0206
02f24     17 01 00 FF 
02f28     DE 15 06 F6 | 	mov	arg02, ##@LR__4142
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     EC 0B B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     FC 01 90 AD |  if_e	jmp	#LR__0207
02f3c     17 01 00 FF 
02f40     E3 15 06 F6 | 	mov	arg02, ##@LR__4143
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     D4 0B B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     EC 01 90 AD |  if_e	jmp	#LR__0208
02f54     17 01 00 FF 
02f58     E9 15 06 F6 | 	mov	arg02, ##@LR__4144
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     BC 0B B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     DC 01 90 AD |  if_e	jmp	#LR__0209
02f6c     17 01 00 FF 
02f70     ED 15 06 F6 | 	mov	arg02, ##@LR__4145
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     A4 0B B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     CC 01 90 AD |  if_e	jmp	#LR__0210
02f84     17 01 00 FF 
02f88     F2 15 06 F6 | 	mov	arg02, ##@LR__4146
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     8C 0B B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     BC 01 90 AD |  if_e	jmp	#LR__0211
02f9c     17 01 00 FF 
02fa0     F7 15 06 F6 | 	mov	arg02, ##@LR__4147
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     74 0B B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     AC 01 90 AD |  if_e	jmp	#LR__0212
02fb4     17 01 00 FF 
02fb8     FD 15 06 F6 | 	mov	arg02, ##@LR__4148
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     5C 0B B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     9C 01 90 AD |  if_e	jmp	#LR__0213
02fcc     18 01 00 FF 
02fd0     04 14 06 F6 | 	mov	arg02, ##@LR__4149
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     44 0B B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     8C 01 90 AD |  if_e	jmp	#LR__0214
02fe4     18 01 00 FF 
02fe8     0A 14 06 F6 | 	mov	arg02, ##@LR__4150
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     2C 0B B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     7C 01 90 AD |  if_e	jmp	#LR__0215
02ffc     18 01 00 FF 
03000     14 14 06 F6 | 	mov	arg02, ##@LR__4151
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     14 0B B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     6C 01 90 AD |  if_e	jmp	#LR__0216
03014     18 01 00 FF 
03018     1B 14 06 F6 | 	mov	arg02, ##@LR__4152
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     FC 0A B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     5C 01 90 AD |  if_e	jmp	#LR__0217
0302c     18 01 00 FF 
03030     25 14 06 F6 | 	mov	arg02, ##@LR__4153
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     E4 0A B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     4C 01 90 AD |  if_e	jmp	#LR__0218
03044     18 01 00 FF 
03048     2A 14 06 F6 | 	mov	arg02, ##@LR__4154
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     CC 0A B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     3C 01 90 AD |  if_e	jmp	#LR__0219
0305c     40 01 90 FD | 	jmp	#LR__0220
03060                 | LR__0180
03060     40 FA 05 F6 | 	mov	result1, #64
03064     3C 01 90 FD | 	jmp	#LR__0221
03068                 | LR__0181
03068     41 FA 05 F6 | 	mov	result1, #65
0306c     34 01 90 FD | 	jmp	#LR__0221
03070                 | LR__0182
03070     42 FA 05 F6 | 	mov	result1, #66
03074     2C 01 90 FD | 	jmp	#LR__0221
03078                 | LR__0183
03078     43 FA 05 F6 | 	mov	result1, #67
0307c     24 01 90 FD | 	jmp	#LR__0221
03080                 | LR__0184
03080     44 FA 05 F6 | 	mov	result1, #68
03084     1C 01 90 FD | 	jmp	#LR__0221
03088                 | LR__0185
03088     45 FA 05 F6 | 	mov	result1, #69
0308c     14 01 90 FD | 	jmp	#LR__0221
03090                 | LR__0186
03090     46 FA 05 F6 | 	mov	result1, #70
03094     0C 01 90 FD | 	jmp	#LR__0221
03098                 | LR__0187
03098     47 FA 05 F6 | 	mov	result1, #71
0309c     04 01 90 FD | 	jmp	#LR__0221
030a0                 | LR__0188
030a0     48 FA 05 F6 | 	mov	result1, #72
030a4     FC 00 90 FD | 	jmp	#LR__0221
030a8                 | LR__0189
030a8     49 FA 05 F6 | 	mov	result1, #73
030ac     F4 00 90 FD | 	jmp	#LR__0221
030b0                 | LR__0190
030b0     44 FA 05 F6 | 	mov	result1, #68
030b4     EC 00 90 FD | 	jmp	#LR__0221
030b8                 | LR__0191
030b8     4C FA 05 F6 | 	mov	result1, #76
030bc     E4 00 90 FD | 	jmp	#LR__0221
030c0                 | LR__0192
030c0     4D FA 05 F6 | 	mov	result1, #77
030c4     DC 00 90 FD | 	jmp	#LR__0221
030c8                 | LR__0193
030c8     4E FA 05 F6 | 	mov	result1, #78
030cc     D4 00 90 FD | 	jmp	#LR__0221
030d0                 | LR__0194
030d0     50 FA 05 F6 | 	mov	result1, #80
030d4     CC 00 90 FD | 	jmp	#LR__0221
030d8                 | LR__0195
030d8     51 FA 05 F6 | 	mov	result1, #81
030dc     C4 00 90 FD | 	jmp	#LR__0221
030e0                 | LR__0196
030e0     52 FA 05 F6 | 	mov	result1, #82
030e4     BC 00 90 FD | 	jmp	#LR__0221
030e8                 | LR__0197
030e8     59 FA 05 F6 | 	mov	result1, #89
030ec     B4 00 90 FD | 	jmp	#LR__0221
030f0                 | LR__0198
030f0     55 FA 05 F6 | 	mov	result1, #85
030f4     AC 00 90 FD | 	jmp	#LR__0221
030f8                 | LR__0199
030f8     56 FA 05 F6 | 	mov	result1, #86
030fc     A4 00 90 FD | 	jmp	#LR__0221
03100                 | LR__0200
03100     57 FA 05 F6 | 	mov	result1, #87
03104     9C 00 90 FD | 	jmp	#LR__0221
03108                 | LR__0201
03108     58 FA 05 F6 | 	mov	result1, #88
0310c     94 00 90 FD | 	jmp	#LR__0221
03110                 | LR__0202
03110     5A FA 05 F6 | 	mov	result1, #90
03114     8C 00 90 FD | 	jmp	#LR__0221
03118                 | LR__0203
03118     5B FA 05 F6 | 	mov	result1, #91
0311c     84 00 90 FD | 	jmp	#LR__0221
03120                 | LR__0204
03120     5C FA 05 F6 | 	mov	result1, #92
03124     7C 00 90 FD | 	jmp	#LR__0221
03128                 | LR__0205
03128     5D FA 05 F6 | 	mov	result1, #93
0312c     74 00 90 FD | 	jmp	#LR__0221
03130                 | LR__0206
03130     4A FA 05 F6 | 	mov	result1, #74
03134     6C 00 90 FD | 	jmp	#LR__0221
03138                 | LR__0207
03138     4B FA 05 F6 | 	mov	result1, #75
0313c     64 00 90 FD | 	jmp	#LR__0221
03140                 | LR__0208
03140     5E FA 05 F6 | 	mov	result1, #94
03144     5C 00 90 FD | 	jmp	#LR__0221
03148                 | LR__0209
03148     5F FA 05 F6 | 	mov	result1, #95
0314c     54 00 90 FD | 	jmp	#LR__0221
03150                 | LR__0210
03150     60 FA 05 F6 | 	mov	result1, #96
03154     4C 00 90 FD | 	jmp	#LR__0221
03158                 | LR__0211
03158     61 FA 05 F6 | 	mov	result1, #97
0315c     44 00 90 FD | 	jmp	#LR__0221
03160                 | LR__0212
03160     63 FA 05 F6 | 	mov	result1, #99
03164     3C 00 90 FD | 	jmp	#LR__0221
03168                 | LR__0213
03168     68 FA 05 F6 | 	mov	result1, #104
0316c     34 00 90 FD | 	jmp	#LR__0221
03170                 | LR__0214
03170     69 FA 05 F6 | 	mov	result1, #105
03174     2C 00 90 FD | 	jmp	#LR__0221
03178                 | LR__0215
03178     6C FA 05 F6 | 	mov	result1, #108
0317c     24 00 90 FD | 	jmp	#LR__0221
03180                 | LR__0216
03180     6D FA 05 F6 | 	mov	result1, #109
03184     1C 00 90 FD | 	jmp	#LR__0221
03188                 | LR__0217
03188     70 FA 05 F6 | 	mov	result1, #112
0318c     14 00 90 FD | 	jmp	#LR__0221
03190                 | LR__0218
03190     71 FA 05 F6 | 	mov	result1, #113
03194     0C 00 90 FD | 	jmp	#LR__0221
03198                 | LR__0219
03198     72 FA 05 F6 | 	mov	result1, #114
0319c     04 00 90 FD | 	jmp	#LR__0221
031a0                 | LR__0220
031a0     00 FA 05 F6 | 	mov	result1, #0
031a4                 | LR__0221
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _iscommand_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' function isfunction(s as string) as ubyte
031b0                 | _isfunction
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     18 01 00 FF 
031c0     2E 14 06 F6 | 	mov	arg02, ##@LR__4155
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     54 09 B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     DC 00 90 AD |  if_e	jmp	#LR__0230
031d4     18 01 00 FF 
031d8     32 14 06 F6 | 	mov	arg02, ##@LR__4156
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     3C 09 B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     CC 00 90 AD |  if_e	jmp	#LR__0231
031ec     18 01 00 FF 
031f0     39 14 06 F6 | 	mov	arg02, ##@LR__4157
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     24 09 B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     BC 00 90 AD |  if_e	jmp	#LR__0232
03204     18 01 00 FF 
03208     40 14 06 F6 | 	mov	arg02, ##@LR__4158
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     0C 09 B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     AC 00 90 AD |  if_e	jmp	#LR__0233
0321c     18 01 00 FF 
03220     47 14 06 F6 | 	mov	arg02, ##@LR__4159
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     F4 08 B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     9C 00 90 AD |  if_e	jmp	#LR__0234
03234     18 01 00 FF 
03238     4E 14 06 F6 | 	mov	arg02, ##@LR__4160
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     DC 08 B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     8C 00 90 AD |  if_e	jmp	#LR__0235
0324c     18 01 00 FF 
03250     56 14 06 F6 | 	mov	arg02, ##@LR__4161
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     C4 08 B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     7C 00 90 AD |  if_e	jmp	#LR__0236
03264     18 01 00 FF 
03268     5A 14 06 F6 | 	mov	arg02, ##@LR__4162
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     AC 08 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     6C 00 90 AD |  if_e	jmp	#LR__0237
0327c     18 01 00 FF 
03280     60 14 06 F6 | 	mov	arg02, ##@LR__4163
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     94 08 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     5C 00 90 AD |  if_e	jmp	#LR__0238
03294     18 01 00 FF 
03298     66 14 06 F6 | 	mov	arg02, ##@LR__4164
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     7C 08 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     4C 00 90 AD |  if_e	jmp	#LR__0239
032ac     50 00 90 FD | 	jmp	#LR__0240
032b0                 | LR__0230
032b0     54 FA 05 F6 | 	mov	result1, #84
032b4     4C 00 90 FD | 	jmp	#LR__0241
032b8                 | LR__0231
032b8     64 FA 05 F6 | 	mov	result1, #100
032bc     44 00 90 FD | 	jmp	#LR__0241
032c0                 | LR__0232
032c0     65 FA 05 F6 | 	mov	result1, #101
032c4     3C 00 90 FD | 	jmp	#LR__0241
032c8                 | LR__0233
032c8     66 FA 05 F6 | 	mov	result1, #102
032cc     34 00 90 FD | 	jmp	#LR__0241
032d0                 | LR__0234
032d0     67 FA 05 F6 | 	mov	result1, #103
032d4     2C 00 90 FD | 	jmp	#LR__0241
032d8                 | LR__0235
032d8     62 FA 05 F6 | 	mov	result1, #98
032dc     24 00 90 FD | 	jmp	#LR__0241
032e0                 | LR__0236
032e0     6B FA 05 F6 | 	mov	result1, #107
032e4     1C 00 90 FD | 	jmp	#LR__0241
032e8                 | LR__0237
032e8     6A FA 05 F6 | 	mov	result1, #106
032ec     14 00 90 FD | 	jmp	#LR__0241
032f0                 | LR__0238
032f0     6E FA 05 F6 | 	mov	result1, #110
032f4     0C 00 90 FD | 	jmp	#LR__0241
032f8                 | LR__0239
032f8     6F FA 05 F6 | 	mov	result1, #111
032fc     04 00 90 FD | 	jmp	#LR__0241
03300                 | LR__0240
03300     00 FA 05 F6 | 	mov	result1, #0
03304                 | LR__0241
03304     A7 F0 03 F6 | 	mov	ptra, fp
03308     B2 00 A0 FD | 	call	#popregs_
0330c                 | _isfunction_ret
0330c     2D 00 64 FD | 	ret
03310                 | 
03310                 | ' 
03310                 | ' function isname(s as string) as boolean
03310                 | _isname
03310     0D 4A 05 F6 | 	mov	COUNT_, #13
03314     A8 00 A0 FD | 	call	#pushregs_
03318     09 1F 02 F6 | 	mov	local01, arg01
0331c     09 21 02 F6 | 	mov	local02, arg01
03320     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03324                 | LR__0250
03324     10 FB C9 FA | 	rdbyte	result1, local02 wz
03328     01 20 06 51 |  if_ne	add	local02, #1
0332c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03330                 | LR__0251
03330     09 21 82 F1 | 	sub	local02, arg01
03334     10 FB 01 F6 | 	mov	result1, local02
03338     FD 22 0A F6 | 	mov	local03, result1 wz
0333c     00 FA 05 A6 |  if_e	mov	result1, #0
03340     34 02 90 AD |  if_e	jmp	#LR__0263
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     01 14 06 F6 | 	mov	arg02, #1
0334c     01 16 06 F6 | 	mov	arg03, #1
03350     04 28 B1 FD | 	call	#__system__Mid_S
03354     FD 24 02 F6 | 	mov	local04, result1
03358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03358     18 01 00 FF 
0335c     6F 14 06 F6 | 	mov	arg02, ##@LR__4165
03360     12 13 02 F6 | 	mov	arg01, local04
03364     B8 07 B1 FD | 	call	#__system___string_cmp
03368     00 FA 55 F2 | 	cmps	result1, #0 wc
0336c     18 00 90 CD |  if_b	jmp	#LR__0252
03370     18 01 00 FF 
03374     71 14 06 F6 | 	mov	arg02, ##@LR__4166
03378     12 13 02 F6 | 	mov	arg01, local04
0337c     A0 07 B1 FD | 	call	#__system___string_cmp
03380     01 FA 55 F2 | 	cmps	result1, #1 wc
03384     1C 00 90 CD |  if_b	jmp	#LR__0253
03388                 | LR__0252
03388     18 01 00 FF 
0338c     73 14 06 F6 | 	mov	arg02, ##@LR__4167
03390     12 13 02 F6 | 	mov	arg01, local04
03394     88 07 B1 FD | 	call	#__system___string_cmp
03398     00 FA 0D F2 | 	cmp	result1, #0 wz
0339c     00 FA 05 56 |  if_ne	mov	result1, #0
033a0     D4 01 90 5D |  if_ne	jmp	#LR__0263
033a4                 | LR__0253
033a4                 | ' if l>2 then 
033a4     03 22 56 F2 | 	cmps	local03, #3 wc
033a8     C8 01 90 CD |  if_b	jmp	#LR__0262
033ac                 | '   for i=2 to l
033ac     02 26 06 F6 | 	mov	local05, #2
033b0     11 29 02 F6 | 	mov	local06, local03
033b4     01 28 06 F1 | 	add	local06, #1
033b8                 | LR__0254
033b8     14 27 52 F2 | 	cmps	local05, local06 wc
033bc     B4 01 90 3D |  if_ae	jmp	#LR__0261
033c0     0F 13 02 F6 | 	mov	arg01, local01
033c4     13 15 02 F6 | 	mov	arg02, local05
033c8     01 16 06 F6 | 	mov	arg03, #1
033cc     88 27 B1 FD | 	call	#__system__Mid_S
033d0     FD 24 02 F6 | 	mov	local04, result1
033d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
033d4     11 27 52 F2 | 	cmps	local05, local03 wc
033d8     9C 00 90 3D |  if_ae	jmp	#LR__0257
033dc     18 01 00 FF 
033e0     75 14 06 F6 | 	mov	arg02, ##@LR__4168
033e4     12 13 02 F6 | 	mov	arg01, local04
033e8     34 07 B1 FD | 	call	#__system___string_cmp
033ec     00 FA 55 F2 | 	cmps	result1, #0 wc
033f0     18 00 90 CD |  if_b	jmp	#LR__0255
033f4     18 01 00 FF 
033f8     77 14 06 F6 | 	mov	arg02, ##@LR__4169
033fc     12 13 02 F6 | 	mov	arg01, local04
03400     1C 07 B1 FD | 	call	#__system___string_cmp
03404     01 FA 55 F2 | 	cmps	result1, #1 wc
03408     6C 00 90 CD |  if_b	jmp	#LR__0257
0340c                 | LR__0255
0340c     18 01 00 FF 
03410     79 14 06 F6 | 	mov	arg02, ##@LR__4170
03414     12 13 02 F6 | 	mov	arg01, local04
03418     04 07 B1 FD | 	call	#__system___string_cmp
0341c     00 FA 55 F2 | 	cmps	result1, #0 wc
03420     18 00 90 CD |  if_b	jmp	#LR__0256
03424     18 01 00 FF 
03428     7B 14 06 F6 | 	mov	arg02, ##@LR__4171
0342c     12 13 02 F6 | 	mov	arg01, local04
03430     EC 06 B1 FD | 	call	#__system___string_cmp
03434     01 FA 55 F2 | 	cmps	result1, #1 wc
03438     3C 00 90 CD |  if_b	jmp	#LR__0257
0343c                 | LR__0256
0343c     18 01 00 FF 
03440     7D 2A 06 F6 | 	mov	local07, ##@LR__4172
03444     12 13 02 F6 | 	mov	arg01, local04
03448     15 15 02 F6 | 	mov	arg02, local07
0344c     D0 06 B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     20 00 90 AD |  if_e	jmp	#LR__0257
03458     18 01 00 FF 
0345c     7F 2C 06 F6 | 	mov	local08, ##@LR__4173
03460     12 13 02 F6 | 	mov	arg01, local04
03464     16 15 02 F6 | 	mov	arg02, local08
03468     B4 06 B1 FD | 	call	#__system___string_cmp
0346c     FD 2E 0A F6 | 	mov	local09, result1 wz
03470     00 FA 05 56 |  if_ne	mov	result1, #0
03474     00 01 90 5D |  if_ne	jmp	#LR__0263
03478                 | LR__0257
03478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03478     11 27 0A F2 | 	cmp	local05, local03 wz
0347c     EC 00 90 5D |  if_ne	jmp	#LR__0260
03480     18 01 00 FF 
03484     81 30 06 F6 | 	mov	local10, ##@LR__4174
03488     12 13 02 F6 | 	mov	arg01, local04
0348c     18 15 02 F6 | 	mov	arg02, local10
03490     8C 06 B1 FD | 	call	#__system___string_cmp
03494     FD 32 02 F6 | 	mov	local11, result1
03498     00 32 56 F2 | 	cmps	local11, #0 wc
0349c     1C 00 90 CD |  if_b	jmp	#LR__0258
034a0     18 01 00 FF 
034a4     83 14 06 F6 | 	mov	arg02, ##@LR__4175
034a8     12 13 02 F6 | 	mov	arg01, local04
034ac     70 06 B1 FD | 	call	#__system___string_cmp
034b0     FD 30 02 F6 | 	mov	local10, result1
034b4     01 30 56 F2 | 	cmps	local10, #1 wc
034b8     B0 00 90 CD |  if_b	jmp	#LR__0260
034bc                 | LR__0258
034bc     18 01 00 FF 
034c0     85 14 06 F6 | 	mov	arg02, ##@LR__4176
034c4     12 13 02 F6 | 	mov	arg01, local04
034c8     54 06 B1 FD | 	call	#__system___string_cmp
034cc     00 FA 55 F2 | 	cmps	result1, #0 wc
034d0     1C 00 90 CD |  if_b	jmp	#LR__0259
034d4     18 01 00 FF 
034d8     87 2E 06 F6 | 	mov	local09, ##@LR__4177
034dc     12 13 02 F6 | 	mov	arg01, local04
034e0     17 15 02 F6 | 	mov	arg02, local09
034e4     38 06 B1 FD | 	call	#__system___string_cmp
034e8     01 FA 55 F2 | 	cmps	result1, #1 wc
034ec     7C 00 90 CD |  if_b	jmp	#LR__0260
034f0                 | LR__0259
034f0     18 01 00 FF 
034f4     89 2E 06 F6 | 	mov	local09, ##@LR__4178
034f8     12 13 02 F6 | 	mov	arg01, local04
034fc     17 15 02 F6 | 	mov	arg02, local09
03500     1C 06 B1 FD | 	call	#__system___string_cmp
03504     00 FA 4D F2 | 	cmps	result1, #0 wz
03508     60 00 90 AD |  if_e	jmp	#LR__0260
0350c     18 01 00 FF 
03510     8B 2C 06 F6 | 	mov	local08, ##@LR__4179
03514     12 13 02 F6 | 	mov	arg01, local04
03518     16 15 02 F6 | 	mov	arg02, local08
0351c     00 06 B1 FD | 	call	#__system___string_cmp
03520     FD 2E 0A F6 | 	mov	local09, result1 wz
03524     44 00 90 AD |  if_e	jmp	#LR__0260
03528     18 01 00 FF 
0352c     8D 34 06 F6 | 	mov	local12, ##@LR__4180
03530     1A 2D 02 F6 | 	mov	local08, local12
03534     12 13 02 F6 | 	mov	arg01, local04
03538     16 15 02 F6 | 	mov	arg02, local08
0353c     E0 05 B1 FD | 	call	#__system___string_cmp
03540     FD 2A 0A F6 | 	mov	local07, result1 wz
03544     24 00 90 AD |  if_e	jmp	#LR__0260
03548     18 01 00 FF 
0354c     8F 36 06 F6 | 	mov	local13, ##@LR__4181
03550     1B 35 02 F6 | 	mov	local12, local13
03554     12 13 02 F6 | 	mov	arg01, local04
03558     1A 15 02 F6 | 	mov	arg02, local12
0355c     C0 05 B1 FD | 	call	#__system___string_cmp
03560     FD 2C 0A F6 | 	mov	local08, result1 wz
03564     00 FA 05 56 |  if_ne	mov	result1, #0
03568     0C 00 90 5D |  if_ne	jmp	#LR__0263
0356c                 | LR__0260
0356c     01 26 06 F1 | 	add	local05, #1
03570     44 FE 9F FD | 	jmp	#LR__0254
03574                 | LR__0261
03574                 | LR__0262
03574                 | ' return true
03574     01 FA 65 F6 | 	neg	result1, #1
03578                 | LR__0263
03578     A7 F0 03 F6 | 	mov	ptra, fp
0357c     B2 00 A0 FD | 	call	#popregs_
03580                 | _isname_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | ' 
03584                 | ' function isnum(s as string) as boolean
03584                 | _isnum
03584     0D 4A 05 F6 | 	mov	COUNT_, #13
03588     A8 00 A0 FD | 	call	#pushregs_
0358c     09 1F 02 F6 | 	mov	local01, arg01
03590     00 20 06 F6 | 	mov	local02, #0
03594     00 22 06 F6 | 	mov	local03, #0
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     09 25 02 F6 | 	mov	local04, arg01
035a0     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
035a4                 | LR__0270
035a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
035a8     01 24 06 51 |  if_ne	add	local04, #1
035ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
035b0                 | LR__0271
035b0     09 25 82 F1 | 	sub	local04, arg01
035b4     12 FB 01 F6 | 	mov	result1, local04
035b8     FD 26 0A F6 | 	mov	local05, result1 wz
035bc     00 FA 05 A6 |  if_e	mov	result1, #0
035c0     8C 02 90 AD |  if_e	jmp	#LR__0282
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     01 14 06 F6 | 	mov	arg02, #1
035cc     01 16 06 F6 | 	mov	arg03, #1
035d0     84 25 B1 FD | 	call	#__system__Mid_S
035d4     FD 28 02 F6 | 	mov	local06, result1
035d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
035d8     18 01 00 FF 
035dc     91 14 06 F6 | 	mov	arg02, ##@LR__4182
035e0     14 13 02 F6 | 	mov	arg01, local06
035e4     38 05 B1 FD | 	call	#__system___string_cmp
035e8     00 FA 55 F2 | 	cmps	result1, #0 wc
035ec     18 00 90 CD |  if_b	jmp	#LR__0272
035f0     18 01 00 FF 
035f4     93 14 06 F6 | 	mov	arg02, ##@LR__4183
035f8     14 13 02 F6 | 	mov	arg01, local06
035fc     20 05 B1 FD | 	call	#__system___string_cmp
03600     01 FA 55 F2 | 	cmps	result1, #1 wc
03604     78 00 90 CD |  if_b	jmp	#LR__0273
03608                 | LR__0272
03608     18 01 00 FF 
0360c     95 14 06 F6 | 	mov	arg02, ##@LR__4184
03610     14 13 02 F6 | 	mov	arg01, local06
03614     08 05 B1 FD | 	call	#__system___string_cmp
03618     00 FA 0D F2 | 	cmp	result1, #0 wz
0361c     60 00 90 AD |  if_e	jmp	#LR__0273
03620     18 01 00 FF 
03624     97 2A 06 F6 | 	mov	local07, ##@LR__4185
03628     14 13 02 F6 | 	mov	arg01, local06
0362c     15 15 02 F6 | 	mov	arg02, local07
03630     EC 04 B1 FD | 	call	#__system___string_cmp
03634     00 FA 0D F2 | 	cmp	result1, #0 wz
03638     44 00 90 AD |  if_e	jmp	#LR__0273
0363c     18 01 00 FF 
03640     99 2C 06 F6 | 	mov	local08, ##@LR__4186
03644     16 2B 02 F6 | 	mov	local07, local08
03648     14 13 02 F6 | 	mov	arg01, local06
0364c     15 15 02 F6 | 	mov	arg02, local07
03650     CC 04 B1 FD | 	call	#__system___string_cmp
03654     00 FA 4D F2 | 	cmps	result1, #0 wz
03658     24 00 90 AD |  if_e	jmp	#LR__0273
0365c     18 01 00 FF 
03660     9B 2E 06 F6 | 	mov	local09, ##@LR__4187
03664     17 2D 02 F6 | 	mov	local08, local09
03668     14 13 02 F6 | 	mov	arg01, local06
0366c     16 15 02 F6 | 	mov	arg02, local08
03670     AC 04 B1 FD | 	call	#__system___string_cmp
03674     FD 2A 0A F6 | 	mov	local07, result1 wz
03678     00 FA 05 56 |  if_ne	mov	result1, #0
0367c     D0 01 90 5D |  if_ne	jmp	#LR__0282
03680                 | LR__0273
03680                 | ' if m$="." then ds=1
03680     18 01 00 FF 
03684     9D 14 06 F6 | 	mov	arg02, ##@LR__4188
03688     14 13 02 F6 | 	mov	arg01, local06
0368c     90 04 B1 FD | 	call	#__system___string_cmp
03690     00 FA 0D F2 | 	cmp	result1, #0 wz
03694     01 20 06 A6 |  if_e	mov	local02, #1
03698                 | ' if l>1 then 
03698     02 26 56 F2 | 	cmps	local05, #2 wc
0369c     AC 01 90 CD |  if_b	jmp	#LR__0281
036a0                 | '   for i=2 to l
036a0     02 30 06 F6 | 	mov	local10, #2
036a4     13 33 02 F6 | 	mov	local11, local05
036a8     01 32 06 F1 | 	add	local11, #1
036ac                 | LR__0274
036ac     19 31 52 F2 | 	cmps	local10, local11 wc
036b0     98 01 90 3D |  if_ae	jmp	#LR__0280
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     18 15 02 F6 | 	mov	arg02, local10
036bc     01 16 06 F6 | 	mov	arg03, #1
036c0     94 24 B1 FD | 	call	#__system__Mid_S
036c4     FD 28 02 F6 | 	mov	local06, result1
036c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
036c8     18 01 00 FF 
036cc     9F 14 06 F6 | 	mov	arg02, ##@LR__4189
036d0     14 13 02 F6 | 	mov	arg01, local06
036d4     48 04 B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0275
036e0     18 01 00 FF 
036e4     A1 14 06 F6 | 	mov	arg02, ##@LR__4190
036e8     14 13 02 F6 | 	mov	arg01, local06
036ec     30 04 B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     98 00 90 CD |  if_b	jmp	#LR__0276
036f8                 | LR__0275
036f8     18 01 00 FF 
036fc     A3 14 06 F6 | 	mov	arg02, ##@LR__4191
03700     14 13 02 F6 | 	mov	arg01, local06
03704     18 04 B1 FD | 	call	#__system___string_cmp
03708     00 FA 0D F2 | 	cmp	result1, #0 wz
0370c     80 00 90 AD |  if_e	jmp	#LR__0276
03710     18 01 00 FF 
03714     A5 2A 06 F6 | 	mov	local07, ##@LR__4192
03718     14 13 02 F6 | 	mov	arg01, local06
0371c     15 15 02 F6 | 	mov	arg02, local07
03720     FC 03 B1 FD | 	call	#__system___string_cmp
03724     00 FA 4D F2 | 	cmps	result1, #0 wz
03728     64 00 90 AD |  if_e	jmp	#LR__0276
0372c     18 01 00 FF 
03730     A7 2C 06 F6 | 	mov	local08, ##@LR__4193
03734     16 2B 02 F6 | 	mov	local07, local08
03738     14 13 02 F6 | 	mov	arg01, local06
0373c     15 15 02 F6 | 	mov	arg02, local07
03740     DC 03 B1 FD | 	call	#__system___string_cmp
03744     FD 34 0A F6 | 	mov	local12, result1 wz
03748     44 00 90 AD |  if_e	jmp	#LR__0276
0374c     18 01 00 FF 
03750     A9 2E 06 F6 | 	mov	local09, ##@LR__4194
03754     17 2D 02 F6 | 	mov	local08, local09
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     16 15 02 F6 | 	mov	arg02, local08
03760     BC 03 B1 FD | 	call	#__system___string_cmp
03764     FD 2A 0A F6 | 	mov	local07, result1 wz
03768     24 00 90 AD |  if_e	jmp	#LR__0276
0376c     18 01 00 FF 
03770     AB 36 06 F6 | 	mov	local13, ##@LR__4195
03774     1B 2F 02 F6 | 	mov	local09, local13
03778     14 13 02 F6 | 	mov	arg01, local06
0377c     17 15 02 F6 | 	mov	arg02, local09
03780     9C 03 B1 FD | 	call	#__system___string_cmp
03784     FD 2C 0A F6 | 	mov	local08, result1 wz
03788     00 FA 05 56 |  if_ne	mov	result1, #0
0378c     C0 00 90 5D |  if_ne	jmp	#LR__0282
03790                 | LR__0276
03790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03790     18 01 00 FF 
03794     AD 14 06 F6 | 	mov	arg02, ##@LR__4196
03798     14 13 02 F6 | 	mov	arg01, local06
0379c     80 03 B1 FD | 	call	#__system___string_cmp
037a0     00 FA 0D F2 | 	cmp	result1, #0 wz
037a4     38 00 90 5D |  if_ne	jmp	#LR__0277
037a8     18 15 02 F6 | 	mov	arg02, local10
037ac     01 14 86 F1 | 	sub	arg02, #1
037b0     0F 13 02 F6 | 	mov	arg01, local01
037b4     01 16 06 F6 | 	mov	arg03, #1
037b8     9C 23 B1 FD | 	call	#__system__Mid_S
037bc     FD 12 02 F6 | 	mov	arg01, result1
037c0     30 25 B1 FD | 	call	#__system__LCase_S
037c4     FD 12 02 F6 | 	mov	arg01, result1
037c8     18 01 00 FF 
037cc     AF 14 06 F6 | 	mov	arg02, ##@LR__4197
037d0     4C 03 B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     70 00 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0277
037e0                 | '     if m$="." then ds+=1: if ds>1 then return false
037e0     18 01 00 FF 
037e4     B1 14 06 F6 | 	mov	arg02, ##@LR__4198
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     30 03 B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A1 |  if_e	add	local02, #1
037f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
037fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03804     18 01 00 FF 
03808     B3 14 06 F6 | 	mov	arg02, ##@LR__4199
0380c     14 13 02 F6 | 	mov	arg01, local06
03810     0C 03 B1 FD | 	call	#__system___string_cmp
03814     00 FA 4D F2 | 	cmps	result1, #0 wz
03818     18 00 90 AD |  if_e	jmp	#LR__0278
0381c     18 01 00 FF 
03820     B5 14 06 F6 | 	mov	arg02, ##@LR__4200
03824     14 13 02 F6 | 	mov	arg01, local06
03828     F4 02 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 4D F2 | 	cmps	result1, #0 wz
03830     10 00 90 5D |  if_ne	jmp	#LR__0279
03834                 | LR__0278
03834     01 22 06 F1 | 	add	local03, #1
03838     02 22 56 F2 | 	cmps	local03, #2 wc
0383c     00 FA 05 36 |  if_ae	mov	result1, #0
03840     0C 00 90 3D |  if_ae	jmp	#LR__0282
03844                 | LR__0279
03844     01 30 06 F1 | 	add	local10, #1
03848     60 FE 9F FD | 	jmp	#LR__0274
0384c                 | LR__0280
0384c                 | LR__0281
0384c                 | ' return true
0384c     01 FA 65 F6 | 	neg	result1, #1
03850                 | LR__0282
03850     A7 F0 03 F6 | 	mov	ptra, fp
03854     B2 00 A0 FD | 	call	#popregs_
03858                 | _isnum_ret
03858     2D 00 64 FD | 	ret
0385c                 | 
0385c                 | '   
0385c                 | ' function isint(s as string) as boolean
0385c                 | _isint
0385c     05 4A 05 F6 | 	mov	COUNT_, #5
03860     A8 00 A0 FD | 	call	#pushregs_
03864     09 1F 02 F6 | 	mov	local01, arg01
03868     09 21 02 F6 | 	mov	local02, arg01
0386c     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
03870                 | LR__0290
03870     10 FB C9 FA | 	rdbyte	result1, local02 wz
03874     01 20 06 51 |  if_ne	add	local02, #1
03878     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
0387c                 | LR__0291
0387c     09 21 82 F1 | 	sub	local02, arg01
03880     10 FB 01 F6 | 	mov	result1, local02
03884     FD 20 0A F6 | 	mov	local02, result1 wz
03888     00 FA 05 A6 |  if_e	mov	result1, #0
0388c     18 01 90 AD |  if_e	jmp	#LR__0299
03890     0F 13 02 F6 | 	mov	arg01, local01
03894     01 14 06 F6 | 	mov	arg02, #1
03898     01 16 06 F6 | 	mov	arg03, #1
0389c     B8 22 B1 FD | 	call	#__system__Mid_S
038a0     FD 22 02 F6 | 	mov	local03, result1
038a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038a4     18 01 00 FF 
038a8     B7 14 06 F6 | 	mov	arg02, ##@LR__4201
038ac     11 13 02 F6 | 	mov	arg01, local03
038b0     6C 02 B1 FD | 	call	#__system___string_cmp
038b4     00 FA 55 F2 | 	cmps	result1, #0 wc
038b8     18 00 90 CD |  if_b	jmp	#LR__0292
038bc     18 01 00 FF 
038c0     B9 14 06 F6 | 	mov	arg02, ##@LR__4202
038c4     11 13 02 F6 | 	mov	arg01, local03
038c8     54 02 B1 FD | 	call	#__system___string_cmp
038cc     01 FA 55 F2 | 	cmps	result1, #1 wc
038d0     4C 00 90 CD |  if_b	jmp	#LR__0293
038d4                 | LR__0292
038d4     18 01 00 FF 
038d8     BB 14 06 F6 | 	mov	arg02, ##@LR__4203
038dc     11 13 02 F6 | 	mov	arg01, local03
038e0     3C 02 B1 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     34 00 90 AD |  if_e	jmp	#LR__0293
038ec     18 01 00 FF 
038f0     BD 14 06 F6 | 	mov	arg02, ##@LR__4204
038f4     11 13 02 F6 | 	mov	arg01, local03
038f8     24 02 B1 FD | 	call	#__system___string_cmp
038fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03900     1C 00 90 AD |  if_e	jmp	#LR__0293
03904     18 01 00 FF 
03908     BF 14 06 F6 | 	mov	arg02, ##@LR__4205
0390c     11 13 02 F6 | 	mov	arg01, local03
03910     0C 02 B1 FD | 	call	#__system___string_cmp
03914     00 FA 0D F2 | 	cmp	result1, #0 wz
03918     00 FA 05 56 |  if_ne	mov	result1, #0
0391c     88 00 90 5D |  if_ne	jmp	#LR__0299
03920                 | LR__0293
03920                 | ' 
03920                 | ' if l>1 then 
03920     02 20 56 F2 | 	cmps	local02, #2 wc
03924     7C 00 90 CD |  if_b	jmp	#LR__0298
03928                 | '   for i=2 to l
03928     02 24 06 F6 | 	mov	local04, #2
0392c     10 27 02 F6 | 	mov	local05, local02
03930     01 26 06 F1 | 	add	local05, #1
03934                 | LR__0294
03934     13 25 52 F2 | 	cmps	local04, local05 wc
03938     68 00 90 3D |  if_ae	jmp	#LR__0297
0393c     0F 13 02 F6 | 	mov	arg01, local01
03940     12 15 02 F6 | 	mov	arg02, local04
03944     01 16 06 F6 | 	mov	arg03, #1
03948     0C 22 B1 FD | 	call	#__system__Mid_S
0394c     FD 22 02 F6 | 	mov	local03, result1
03950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03950     18 01 00 FF 
03954     C1 14 06 F6 | 	mov	arg02, ##@LR__4206
03958     11 13 02 F6 | 	mov	arg01, local03
0395c     C0 01 B1 FD | 	call	#__system___string_cmp
03960     00 FA 55 F2 | 	cmps	result1, #0 wc
03964     18 00 90 CD |  if_b	jmp	#LR__0295
03968     18 01 00 FF 
0396c     C3 14 06 F6 | 	mov	arg02, ##@LR__4207
03970     11 13 02 F6 | 	mov	arg01, local03
03974     A8 01 B1 FD | 	call	#__system___string_cmp
03978     01 FA 55 F2 | 	cmps	result1, #1 wc
0397c     1C 00 90 CD |  if_b	jmp	#LR__0296
03980                 | LR__0295
03980     18 01 00 FF 
03984     C5 14 06 F6 | 	mov	arg02, ##@LR__4208
03988     11 13 02 F6 | 	mov	arg01, local03
0398c     90 01 B1 FD | 	call	#__system___string_cmp
03990     00 FA 0D F2 | 	cmp	result1, #0 wz
03994     00 FA 05 56 |  if_ne	mov	result1, #0
03998     0C 00 90 5D |  if_ne	jmp	#LR__0299
0399c                 | LR__0296
0399c     01 24 06 F1 | 	add	local04, #1
039a0     90 FF 9F FD | 	jmp	#LR__0294
039a4                 | LR__0297
039a4                 | LR__0298
039a4                 | ' return true
039a4     01 FA 65 F6 | 	neg	result1, #1
039a8                 | LR__0299
039a8     A7 F0 03 F6 | 	mov	ptra, fp
039ac     B2 00 A0 FD | 	call	#popregs_
039b0                 | _isint_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | ' 
039b4                 | ' function isdec(s as string) as boolean
039b4                 | _isdec
039b4     05 4A 05 F6 | 	mov	COUNT_, #5
039b8     A8 00 A0 FD | 	call	#pushregs_
039bc     09 1F 02 F6 | 	mov	local01, arg01
039c0     09 21 02 F6 | 	mov	local02, arg01
039c4     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
039c8                 | LR__0300
039c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
039cc     01 20 06 51 |  if_ne	add	local02, #1
039d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
039d4                 | LR__0301
039d4     09 21 82 F1 | 	sub	local02, arg01
039d8     10 FB 01 F6 | 	mov	result1, local02
039dc     FD 20 0A F6 | 	mov	local02, result1 wz
039e0     00 FA 05 A6 |  if_e	mov	result1, #0
039e4     80 00 90 AD |  if_e	jmp	#LR__0306
039e8                 | ' for i=1 to l
039e8     01 22 06 F6 | 	mov	local03, #1
039ec     10 25 02 F6 | 	mov	local04, local02
039f0     01 24 06 F1 | 	add	local04, #1
039f4                 | LR__0302
039f4     12 23 52 F2 | 	cmps	local03, local04 wc
039f8     68 00 90 3D |  if_ae	jmp	#LR__0305
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     11 15 02 F6 | 	mov	arg02, local03
03a04     01 16 06 F6 | 	mov	arg03, #1
03a08     4C 21 B1 FD | 	call	#__system__Mid_S
03a0c     FD 26 02 F6 | 	mov	local05, result1
03a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03a10     18 01 00 FF 
03a14     C7 14 06 F6 | 	mov	arg02, ##@LR__4209
03a18     13 13 02 F6 | 	mov	arg01, local05
03a1c     00 01 B1 FD | 	call	#__system___string_cmp
03a20     00 FA 55 F2 | 	cmps	result1, #0 wc
03a24     18 00 90 CD |  if_b	jmp	#LR__0303
03a28     18 01 00 FF 
03a2c     C9 14 06 F6 | 	mov	arg02, ##@LR__4210
03a30     13 13 02 F6 | 	mov	arg01, local05
03a34     E8 00 B1 FD | 	call	#__system___string_cmp
03a38     01 FA 55 F2 | 	cmps	result1, #1 wc
03a3c     1C 00 90 CD |  if_b	jmp	#LR__0304
03a40                 | LR__0303
03a40     18 01 00 FF 
03a44     CB 14 06 F6 | 	mov	arg02, ##@LR__4211
03a48     13 13 02 F6 | 	mov	arg01, local05
03a4c     D0 00 B1 FD | 	call	#__system___string_cmp
03a50     00 FA 0D F2 | 	cmp	result1, #0 wz
03a54     00 FA 05 56 |  if_ne	mov	result1, #0
03a58     0C 00 90 5D |  if_ne	jmp	#LR__0306
03a5c                 | LR__0304
03a5c     01 22 06 F1 | 	add	local03, #1
03a60     90 FF 9F FD | 	jmp	#LR__0302
03a64                 | LR__0305
03a64                 | ' return true
03a64     01 FA 65 F6 | 	neg	result1, #1
03a68                 | LR__0306
03a68     A7 F0 03 F6 | 	mov	ptra, fp
03a6c     B2 00 A0 FD | 	call	#popregs_
03a70                 | _isdec_ret
03a70     2D 00 64 FD | 	ret
03a74                 | 
03a74                 | ' 
03a74                 | ' function isstring(s as string) as boolean
03a74                 | _isstring
03a74     01 4A 05 F6 | 	mov	COUNT_, #1
03a78     A8 00 A0 FD | 	call	#pushregs_
03a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03a7c     09 1F 02 F6 | 	mov	local01, arg01
03a80     01 14 06 F6 | 	mov	arg02, #1
03a84     B8 1F B1 FD | 	call	#__system__Left_S
03a88     FD 12 02 F6 | 	mov	arg01, result1
03a8c     18 01 00 FF 
03a90     CD 14 06 F6 | 	mov	arg02, ##@LR__4212
03a94     88 00 B1 FD | 	call	#__system___string_cmp
03a98     00 FA 4D F2 | 	cmps	result1, #0 wz
03a9c     28 00 90 5D |  if_ne	jmp	#LR__0310
03aa0     0F 13 02 F6 | 	mov	arg01, local01
03aa4     01 14 06 F6 | 	mov	arg02, #1
03aa8     1C 20 B1 FD | 	call	#__system__Right_S
03aac     FD 12 02 F6 | 	mov	arg01, result1
03ab0     18 01 00 FF 
03ab4     CF 14 06 F6 | 	mov	arg02, ##@LR__4213
03ab8     64 00 B1 FD | 	call	#__system___string_cmp
03abc     00 FA 4D F2 | 	cmps	result1, #0 wz
03ac0     01 FA 65 A6 |  if_e	neg	result1, #1
03ac4     04 00 90 AD |  if_e	jmp	#LR__0311
03ac8                 | LR__0310
03ac8     00 FA 05 F6 | 	mov	result1, #0
03acc                 | LR__0311
03acc     A7 F0 03 F6 | 	mov	ptra, fp
03ad0     B2 00 A0 FD | 	call	#popregs_
03ad4                 | _isstring_ret
03ad4     2D 00 64 FD | 	ret
03ad8                 | 
03ad8                 | ' 
03ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '----- delete a line from a program
03ad8                 | ' 
03ad8                 | ' function deleteline(aline as ulong) as integer
03ad8                 | _deleteline
03ad8     03 4A 05 F6 | 	mov	COUNT_, #3
03adc     A8 00 A0 FD | 	call	#pushregs_
03ae0     2C F0 07 F1 | 	add	ptra, #44
03ae4     04 4E 05 F1 | 	add	fp, #4
03ae8     A7 12 62 FC | 	wrlong	arg01, fp
03aec     38 00 00 FF 
03af0     48 E4 05 F1 | 	add	objptr, ##28744
03af4     F2 1E 02 FB | 	rdlong	local01, objptr
03af8     0C 4E 05 F1 | 	add	fp, #12
03afc     A7 1E 62 FC | 	wrlong	local01, fp
03b00     10 4E 85 F1 | 	sub	fp, #16
03b04                 | ' 
03b04                 | ' 
03b04                 | ' searchptr=programstart
03b04                 | ' 
03b04                 | ' do
03b04     35 00 00 FF 
03b08     88 E5 85 F1 | 	sub	objptr, ##27528
03b0c                 | LR__0320
03b0c     14 4E 05 F1 | 	add	fp, #20
03b10     A7 12 02 F6 | 	mov	arg01, fp
03b14     04 4E 85 F1 | 	sub	fp, #4
03b18     A7 14 02 FB | 	rdlong	arg02, fp
03b1c     10 4E 85 F1 | 	sub	fp, #16
03b20     18 16 06 F6 | 	mov	arg03, #24
03b24     E4 F4 B0 FD | 	call	#_psram_spin2_read1
03b28     10 4E 05 F1 | 	add	fp, #16
03b2c     A7 1E 02 FB | 	rdlong	local01, fp
03b30     08 4E 85 F1 | 	sub	fp, #8
03b34     A7 1E 62 FC | 	wrlong	local01, fp
03b38     20 4E 05 F1 | 	add	fp, #32
03b3c     A7 1E 02 FB | 	rdlong	local01, fp
03b40     18 4E 85 F1 | 	sub	fp, #24
03b44     A7 1E 62 FC | 	wrlong	local01, fp
03b48     04 4E 05 F1 | 	add	fp, #4
03b4c     A7 1E 02 FB | 	rdlong	local01, fp
03b50     10 4E 85 F1 | 	sub	fp, #16
03b54     A7 16 02 FB | 	rdlong	arg03, fp
03b58     04 4E 85 F1 | 	sub	fp, #4
03b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03b60     28 4E 05 C1 |  if_b	add	fp, #40
03b64     A7 20 02 CB |  if_b	rdlong	local02, fp
03b68     28 4E 85 C1 |  if_b	sub	fp, #40
03b6c     FF FF 3F CF 
03b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03b78     02 00 00 FF 
03b7c     C0 E4 85 F1 | 	sub	objptr, ##1216
03b80                 | ' 
03b80                 | ' 
03b80                 | ' if header(0)<>aline then return -1
03b80     14 4E 05 F1 | 	add	fp, #20
03b84     A7 1E 02 FB | 	rdlong	local01, fp
03b88     10 4E 85 F1 | 	sub	fp, #16
03b8c     A7 22 02 FB | 	rdlong	local03, fp
03b90     04 4E 85 F1 | 	sub	fp, #4
03b94     11 1F 0A F2 | 	cmp	local01, local03 wz
03b98     01 FA 65 56 |  if_ne	neg	result1, #1
03b9c     4C 03 90 5D |  if_ne	jmp	#LR__0326
03ba0     08 4E 05 F1 | 	add	fp, #8
03ba4     A7 12 02 FB | 	rdlong	arg01, fp
03ba8     08 4E 85 F1 | 	sub	fp, #8
03bac     01 14 66 F6 | 	neg	arg02, #1
03bb0     01 16 06 F6 | 	mov	arg03, #1
03bb4     00 18 06 F6 | 	mov	arg04, #0
03bb8     02 00 00 FF 
03bbc     C0 E4 05 F1 | 	add	objptr, ##1216
03bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
03bc0     04 1A 06 F6 | 	mov	arg05, #4
03bc4     7C F5 B0 FD | 	call	#_psram_spin2_fill
03bc8     02 00 00 FF 
03bcc     C0 E4 85 F1 | 	sub	objptr, ##1216
03bd0                 | ' 
03bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03bd0                 | ' 
03bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03bd0     28 4E 05 F1 | 	add	fp, #40
03bd4     A7 1E 02 FB | 	rdlong	local01, fp
03bd8     28 4E 85 F1 | 	sub	fp, #40
03bdc     FF FF 3F FF 
03be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03be4     24 4E 05 A1 |  if_e	add	fp, #36
03be8     A7 22 02 AB |  if_e	rdlong	local03, fp
03bec     24 4E 85 A1 |  if_e	sub	fp, #36
03bf0     FF FF 7F AF 
03bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03bf8     90 00 90 5D |  if_ne	jmp	#LR__0321
03bfc     38 00 00 FF 
03c00     48 E4 05 F1 | 	add	objptr, ##28744
03c04     F2 00 68 FC | 	wrlong	#0, objptr
03c08     07 00 00 FF 
03c0c     28 E4 85 F1 | 	sub	objptr, ##3624
03c10     F2 00 68 FC | 	wrlong	#0, objptr
03c14     07 00 00 FF 
03c18     2C E4 05 F1 | 	add	objptr, ##3628
03c1c     F2 00 68 FC | 	wrlong	#0, objptr
03c20     04 E4 05 F1 | 	add	objptr, #4
03c24     FF FF FF FF 
03c28     F2 FE 6B FC | 	wrlong	##-1, objptr
03c2c     00 12 06 F6 | 	mov	arg01, #0
03c30     10 E4 85 F1 | 	sub	objptr, #16
03c34     F2 00 68 FC | 	wrlong	#0, objptr
03c38     01 14 66 F6 | 	neg	arg02, #1
03c3c     01 16 06 F6 | 	mov	arg03, #1
03c40     00 18 06 F6 | 	mov	arg04, #0
03c44     35 00 00 FF 
03c48     80 E5 85 F1 | 	sub	objptr, ##27520
03c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c4c     04 1A 06 F6 | 	mov	arg05, #4
03c50     F0 F4 B0 FD | 	call	#_psram_spin2_fill
03c54     10 12 06 F6 | 	mov	arg01, #16
03c58     01 14 66 F6 | 	neg	arg02, #1
03c5c     01 16 06 F6 | 	mov	arg03, #1
03c60     00 18 06 F6 | 	mov	arg04, #0
03c64                 | '     return fill(addr, pattern, count, listPtr, 4)
03c64     04 1A 06 F6 | 	mov	arg05, #4
03c68     D8 F4 B0 FD | 	call	#_psram_spin2_fill
03c6c     14 12 06 F6 | 	mov	arg01, #20
03c70     1E 14 CE F9 | 	bmask	arg02, #30
03c74     01 16 06 F6 | 	mov	arg03, #1
03c78     00 18 06 F6 | 	mov	arg04, #0
03c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c7c     04 1A 06 F6 | 	mov	arg05, #4
03c80     C0 F4 B0 FD | 	call	#_psram_spin2_fill
03c84     02 00 00 FF 
03c88     C0 E4 85 F1 | 	sub	objptr, ##1216
03c8c                 | LR__0321
03c8c                 | ' 
03c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03c8c     28 4E 05 F1 | 	add	fp, #40
03c90     A7 1E 02 FB | 	rdlong	local01, fp
03c94     28 4E 85 F1 | 	sub	fp, #40
03c98     FF FF 3F FF 
03c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ca0     88 00 90 5D |  if_ne	jmp	#LR__0322
03ca4     24 4E 05 F1 | 	add	fp, #36
03ca8     A7 22 02 FB | 	rdlong	local03, fp
03cac     24 4E 85 F1 | 	sub	fp, #36
03cb0     FF FF 7F FF 
03cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03cb8     70 00 90 AD |  if_e	jmp	#LR__0322
03cbc     24 4E 05 F1 | 	add	fp, #36
03cc0     A7 12 02 FB | 	rdlong	arg01, fp
03cc4     24 4E 85 F1 | 	sub	fp, #36
03cc8     14 12 06 F1 | 	add	arg01, #20
03ccc     1E 14 CE F9 | 	bmask	arg02, #30
03cd0     01 16 06 F6 | 	mov	arg03, #1
03cd4     00 18 06 F6 | 	mov	arg04, #0
03cd8     02 00 00 FF 
03cdc     C0 E4 05 F1 | 	add	objptr, ##1216
03ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ce0     04 1A 06 F6 | 	mov	arg05, #4
03ce4     5C F4 B0 FD | 	call	#_psram_spin2_fill
03ce8     24 4E 05 F1 | 	add	fp, #36
03cec     A7 1E 02 FB | 	rdlong	local01, fp
03cf0     35 00 00 FF 
03cf4     90 E5 05 F1 | 	add	objptr, ##27536
03cf8     F2 1E 62 FC | 	wrlong	local01, objptr
03cfc     38 00 00 FF 
03d00     50 E4 85 F1 | 	sub	objptr, ##28752
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     24 4E 85 F1 | 	sub	fp, #36
03d0c     38 CA B0 FD | 	call	#_pslpeek
03d10     38 00 00 FF 
03d14     4C E4 05 F1 | 	add	objptr, ##28748
03d18     F2 FA 61 FC | 	wrlong	result1, objptr
03d1c     38 00 00 FF 
03d20     4C E4 85 F1 | 	sub	objptr, ##28748
03d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03d24                 | '   lastline=pslpeek(header(4))
03d24                 | '   return 0
03d24     00 FA 05 F6 | 	mov	result1, #0
03d28     C0 01 90 FD | 	jmp	#LR__0326
03d2c                 | LR__0322
03d2c                 | ' 
03d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03d2c     28 4E 05 F1 | 	add	fp, #40
03d30     A7 1E 02 FB | 	rdlong	local01, fp
03d34     28 4E 85 F1 | 	sub	fp, #40
03d38     FF FF 3F FF 
03d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d40     6C 00 90 AD |  if_e	jmp	#LR__0323
03d44     24 4E 05 F1 | 	add	fp, #36
03d48     A7 22 02 FB | 	rdlong	local03, fp
03d4c     24 4E 85 F1 | 	sub	fp, #36
03d50     FF FF 7F FF 
03d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03d58     54 00 90 5D |  if_ne	jmp	#LR__0323
03d5c     28 4E 05 F1 | 	add	fp, #40
03d60     A7 12 02 FB | 	rdlong	arg01, fp
03d64     28 4E 85 F1 | 	sub	fp, #40
03d68     10 12 06 F1 | 	add	arg01, #16
03d6c     01 14 66 F6 | 	neg	arg02, #1
03d70     01 16 06 F6 | 	mov	arg03, #1
03d74     00 18 06 F6 | 	mov	arg04, #0
03d78     02 00 00 FF 
03d7c     C0 E4 05 F1 | 	add	objptr, ##1216
03d80                 | '     return fill(addr, pattern, count, listPtr, 4)
03d80     04 1A 06 F6 | 	mov	arg05, #4
03d84     BC F3 B0 FD | 	call	#_psram_spin2_fill
03d88     28 4E 05 F1 | 	add	fp, #40
03d8c     A7 1E 02 FB | 	rdlong	local01, fp
03d90     28 4E 85 F1 | 	sub	fp, #40
03d94     35 00 00 FF 
03d98     88 E5 05 F1 | 	add	objptr, ##27528
03d9c     F2 1E 62 FC | 	wrlong	local01, objptr
03da0     38 00 00 FF 
03da4     48 E4 85 F1 | 	sub	objptr, ##28744
03da8                 | ' '   print "deleted first line"
03da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03da8                 | '   return 0
03da8     00 FA 05 F6 | 	mov	result1, #0
03dac     3C 01 90 FD | 	jmp	#LR__0326
03db0                 | LR__0323
03db0                 | ' 
03db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03db0     28 4E 05 F1 | 	add	fp, #40
03db4     A7 1E 02 FB | 	rdlong	local01, fp
03db8     28 4E 85 F1 | 	sub	fp, #40
03dbc     FF FF 3F FF 
03dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03dc4     24 4E 05 51 |  if_ne	add	fp, #36
03dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
03dcc     24 4E 85 51 |  if_ne	sub	fp, #36
03dd0     FF FF 7F 5F 
03dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03dd8     68 00 90 AD |  if_e	jmp	#LR__0324
03ddc     28 4E 05 F1 | 	add	fp, #40
03de0     A7 12 02 FB | 	rdlong	arg01, fp
03de4     10 12 06 F1 | 	add	arg01, #16
03de8     04 4E 85 F1 | 	sub	fp, #4
03dec     A7 14 02 FB | 	rdlong	arg02, fp
03df0     24 4E 85 F1 | 	sub	fp, #36
03df4     01 16 06 F6 | 	mov	arg03, #1
03df8     00 18 06 F6 | 	mov	arg04, #0
03dfc     02 00 00 FF 
03e00     C0 E4 05 F1 | 	add	objptr, ##1216
03e04                 | '     return fill(addr, pattern, count, listPtr, 4)
03e04     04 1A 06 F6 | 	mov	arg05, #4
03e08     38 F3 B0 FD | 	call	#_psram_spin2_fill
03e0c     24 4E 05 F1 | 	add	fp, #36
03e10     A7 12 02 FB | 	rdlong	arg01, fp
03e14     14 12 06 F1 | 	add	arg01, #20
03e18     04 4E 05 F1 | 	add	fp, #4
03e1c     A7 14 02 FB | 	rdlong	arg02, fp
03e20     28 4E 85 F1 | 	sub	fp, #40
03e24     01 16 06 F6 | 	mov	arg03, #1
03e28     00 18 06 F6 | 	mov	arg04, #0
03e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
03e2c     04 1A 06 F6 | 	mov	arg05, #4
03e30     10 F3 B0 FD | 	call	#_psram_spin2_fill
03e34     02 00 00 FF 
03e38     C0 E4 85 F1 | 	sub	objptr, ##1216
03e3c                 | '    pslpoke(header(5)+16,header(4))  
03e3c                 | '    pslpoke(header(4)+20, header(5))
03e3c                 | '    return 0
03e3c     00 FA 05 F6 | 	mov	result1, #0
03e40     A8 00 90 FD | 	jmp	#LR__0326
03e44                 | LR__0324
03e44     10 4E 05 F1 | 	add	fp, #16
03e48     A7 1E 02 FB | 	rdlong	local01, fp
03e4c     08 4E 85 F1 | 	sub	fp, #8
03e50     A7 1E 62 FC | 	wrlong	local01, fp
03e54     38 00 00 FF 
03e58     48 E4 05 F1 | 	add	objptr, ##28744
03e5c     F2 1E 02 FB | 	rdlong	local01, objptr
03e60     08 4E 05 F1 | 	add	fp, #8
03e64     A7 1E 62 FC | 	wrlong	local01, fp
03e68     10 4E 85 F1 | 	sub	fp, #16
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03e6c                 | ' 
03e6c                 | ' lineptr2=searchptr
03e6c                 | ' searchptr=programstart
03e6c                 | ' 
03e6c                 | ' do
03e6c     35 00 00 FF 
03e70     88 E5 85 F1 | 	sub	objptr, ##27528
03e74                 | LR__0325
03e74     14 4E 05 F1 | 	add	fp, #20
03e78     A7 12 02 F6 | 	mov	arg01, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     A7 14 02 FB | 	rdlong	arg02, fp
03e84     10 4E 85 F1 | 	sub	fp, #16
03e88     18 16 06 F6 | 	mov	arg03, #24
03e8c     7C F1 B0 FD | 	call	#_psram_spin2_read1
03e90     10 4E 05 F1 | 	add	fp, #16
03e94     A7 1E 02 FB | 	rdlong	local01, fp
03e98     08 4E 85 F1 | 	sub	fp, #8
03e9c     A7 1E 62 FC | 	wrlong	local01, fp
03ea0     20 4E 05 F1 | 	add	fp, #32
03ea4     A7 1E 02 FB | 	rdlong	local01, fp
03ea8     18 4E 85 F1 | 	sub	fp, #24
03eac     A7 1E 62 FC | 	wrlong	local01, fp
03eb0     04 4E 05 F1 | 	add	fp, #4
03eb4     A7 1E 02 FB | 	rdlong	local01, fp
03eb8     10 4E 85 F1 | 	sub	fp, #16
03ebc     A7 22 02 FB | 	rdlong	local03, fp
03ec0     04 4E 85 F1 | 	sub	fp, #4
03ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
03ec8     28 4E 05 C1 |  if_b	add	fp, #40
03ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
03ed0     28 4E 85 C1 |  if_b	sub	fp, #40
03ed4     FF FF 3F CF 
03ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
03ee0     02 00 00 FF 
03ee4     C0 E4 85 F1 | 	sub	objptr, ##1216
03ee8     00 FA 05 F6 | 	mov	result1, #0
03eec                 | LR__0326
03eec     A7 F0 03 F6 | 	mov	ptra, fp
03ef0     B2 00 A0 FD | 	call	#popregs_
03ef4                 | _deleteline_ret
03ef4     2D 00 64 FD | 	ret
03ef8                 | 
03ef8                 | ' 
03ef8                 | ' sub save_line
03ef8                 | _save_line
03ef8     03 4A 05 F6 | 	mov	COUNT_, #3
03efc     A8 00 A0 FD | 	call	#pushregs_
03f00     38 00 00 FF 
03f04     40 E4 05 F1 | 	add	objptr, ##28736
03f08     F2 16 02 FB | 	rdlong	arg03, objptr
03f0c     01 16 06 F1 | 	add	arg03, #1
03f10     05 00 00 FF 
03f14     18 E4 85 F1 | 	sub	objptr, ##2584
03f18     F2 14 02 FB | 	rdlong	arg02, objptr
03f1c     0B 15 02 FD | 	qmul	arg02, arg03
03f20     0E 00 00 FF 
03f24     44 E4 85 F1 | 	sub	objptr, ##7236
03f28     F2 12 02 FB | 	rdlong	arg01, objptr
03f2c     24 00 00 FF 
03f30     E4 E5 85 F1 | 	sub	objptr, ##18916
03f34     09 1F 02 F6 | 	mov	local01, arg01
03f38     18 20 62 FD | 	getqx	local02
03f3c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
03f40                 | LR__0330
03f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
03f44     01 1E 06 51 |  if_ne	add	local01, #1
03f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
03f4c                 | LR__0331
03f4c     09 1F 82 F1 | 	sub	local01, arg01
03f50     03 1E CE F7 | 	test	local01, #3 wz
03f54     02 1E 46 50 |  if_ne	shr	local01, #2
03f58     01 1E 06 51 |  if_ne	add	local01, #1
03f5c     02 1E 66 50 |  if_ne	shl	local01, #2
03f60     10 23 02 F6 | 	mov	local03, local02
03f64     0F 23 02 F1 | 	add	local03, local01
03f68     31 00 00 FF 
03f6c     20 E4 05 F1 | 	add	objptr, ##25120
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     10 17 02 F1 | 	add	arg03, local02
03f78     04 00 00 FF 
03f7c     28 E4 05 F1 | 	add	objptr, ##2088
03f80     F2 16 62 FC | 	wrlong	arg03, objptr
03f84     04 E4 05 F1 | 	add	objptr, #4
03f88     F2 1E 62 FC | 	wrlong	local01, objptr
03f8c     0C E4 85 F1 | 	sub	objptr, #12
03f90     F2 12 02 F6 | 	mov	arg01, objptr
03f94     04 00 00 FF 
03f98     20 E4 85 F1 | 	sub	objptr, ##2080
03f9c     F2 14 02 FB | 	rdlong	arg02, objptr
03fa0     10 17 02 F6 | 	mov	arg03, local02
03fa4     2E 00 00 FF 
03fa8     60 E5 85 F1 | 	sub	objptr, ##23904
03fac     F8 F0 B0 FD | 	call	#_psram_spin2_write
03fb0     22 00 00 FF 
03fb4     24 E5 05 F1 | 	add	objptr, ##17700
03fb8     F2 12 02 FB | 	rdlong	arg01, objptr
03fbc     0C 00 00 FF 
03fc0     3C E4 05 F1 | 	add	objptr, ##6204
03fc4     F2 14 02 FB | 	rdlong	arg02, objptr
03fc8     10 15 02 F1 | 	add	arg02, local02
03fcc     0F 17 02 F6 | 	mov	arg03, local01
03fd0     2E 00 00 FF 
03fd4     60 E5 85 F1 | 	sub	objptr, ##23904
03fd8     CC F0 B0 FD | 	call	#_psram_spin2_write
03fdc     2E 00 00 FF 
03fe0     60 E5 05 F1 | 	add	objptr, ##23904
03fe4     F2 1E 02 FB | 	rdlong	local01, objptr
03fe8     11 1F 02 F1 | 	add	local01, local03
03fec     F2 1E 62 FC | 	wrlong	local01, objptr
03ff0     31 00 00 FF 
03ff4     20 E4 85 F1 | 	sub	objptr, ##25120
03ff8     A7 F0 03 F6 | 	mov	ptra, fp
03ffc     B2 00 A0 FD | 	call	#popregs_
04000                 | _save_line_ret
04000     2D 00 64 FD | 	ret
04004                 | 
04004                 | ' 
04004                 | ' 
04004                 | ' function insertline(aline as ulong) as integer
04004                 | _insertline
04004     02 4A 05 F6 | 	mov	COUNT_, #2
04008     A8 00 A0 FD | 	call	#pushregs_
0400c     28 F0 07 F1 | 	add	ptra, #40
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 12 62 FC | 	wrlong	arg01, fp
04018     38 00 00 FF 
0401c     48 E4 05 F1 | 	add	objptr, ##28744
04020     F2 1E 02 FB | 	rdlong	local01, objptr
04024     04 4E 05 F1 | 	add	fp, #4
04028     A7 1E 62 FC | 	wrlong	local01, fp
0402c     08 4E 85 F1 | 	sub	fp, #8
04030                 | ' 
04030                 | ' do
04030     35 00 00 FF 
04034     88 E5 85 F1 | 	sub	objptr, ##27528
04038                 | LR__0340
04038     10 4E 05 F1 | 	add	fp, #16
0403c     A7 12 02 F6 | 	mov	arg01, fp
04040     08 4E 85 F1 | 	sub	fp, #8
04044     A7 14 02 FB | 	rdlong	arg02, fp
04048     08 4E 85 F1 | 	sub	fp, #8
0404c     18 16 06 F6 | 	mov	arg03, #24
04050     B8 EF B0 FD | 	call	#_psram_spin2_read1
04054     08 4E 05 F1 | 	add	fp, #8
04058     A7 1E 02 FB | 	rdlong	local01, fp
0405c     04 4E 05 F1 | 	add	fp, #4
04060     A7 1E 62 FC | 	wrlong	local01, fp
04064     18 4E 05 F1 | 	add	fp, #24
04068     A7 1E 02 FB | 	rdlong	local01, fp
0406c     1C 4E 85 F1 | 	sub	fp, #28
04070     A7 1E 62 FC | 	wrlong	local01, fp
04074     08 4E 05 F1 | 	add	fp, #8
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     0C 4E 85 F1 | 	sub	fp, #12
04080     A7 16 02 FB | 	rdlong	arg03, fp
04084     04 4E 85 F1 | 	sub	fp, #4
04088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0408c     24 4E 05 C1 |  if_b	add	fp, #36
04090     A7 20 02 CB |  if_b	rdlong	local02, fp
04094     24 4E 85 C1 |  if_b	sub	fp, #36
04098     FF FF 3F CF 
0409c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
040a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
040a4     02 00 00 FF 
040a8     C0 E4 85 F1 | 	sub	objptr, ##1216
040ac                 | ' 
040ac                 | ' if header(0)=aline then return -1 ' delete it first
040ac     10 4E 05 F1 | 	add	fp, #16
040b0     A7 1E 02 FB | 	rdlong	local01, fp
040b4     0C 4E 85 F1 | 	sub	fp, #12
040b8     A7 20 02 FB | 	rdlong	local02, fp
040bc     04 4E 85 F1 | 	sub	fp, #4
040c0     10 1F 0A F2 | 	cmp	local01, local02 wz
040c4     01 FA 65 A6 |  if_e	neg	result1, #1
040c8     74 01 90 AD |  if_e	jmp	#LR__0343
040cc                 | ' if header(0)<aline then return -2 ' end of program reached
040cc     10 4E 05 F1 | 	add	fp, #16
040d0     A7 1E 02 FB | 	rdlong	local01, fp
040d4     0C 4E 85 F1 | 	sub	fp, #12
040d8     A7 16 02 FB | 	rdlong	arg03, fp
040dc     04 4E 85 F1 | 	sub	fp, #4
040e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
040e4     02 FA 65 C6 |  if_b	neg	result1, #2
040e8     54 01 90 CD |  if_b	jmp	#LR__0343
040ec                 | ' 
040ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
040ec     20 4E 05 F1 | 	add	fp, #32
040f0     A7 1E 02 FB | 	rdlong	local01, fp
040f4     20 4E 85 F1 | 	sub	fp, #32
040f8     FF FF 7F FF 
040fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04100     84 00 90 5D |  if_ne	jmp	#LR__0341
04104     31 00 00 FF 
04108     20 E4 05 F1 | 	add	objptr, ##25120
0410c     F2 1E 02 FB | 	rdlong	local01, objptr
04110     07 00 00 FF 
04114     28 E4 05 F1 | 	add	objptr, ##3624
04118     F2 1E 62 FC | 	wrlong	local01, objptr
0411c     0C 4E 05 F1 | 	add	fp, #12
04120     A7 12 02 FB | 	rdlong	arg01, fp
04124     0C 4E 85 F1 | 	sub	fp, #12
04128     10 12 06 F1 | 	add	arg01, #16
0412c     07 00 00 FF 
04130     28 E4 85 F1 | 	sub	objptr, ##3624
04134     F2 14 02 FB | 	rdlong	arg02, objptr
04138     01 16 06 F6 | 	mov	arg03, #1
0413c     00 18 06 F6 | 	mov	arg04, #0
04140     2E 00 00 FF 
04144     60 E5 85 F1 | 	sub	objptr, ##23904
04148                 | '     return fill(addr, pattern, count, listPtr, 4)
04148     04 1A 06 F6 | 	mov	arg05, #4
0414c     F4 EF B0 FD | 	call	#_psram_spin2_fill
04150     32 00 00 FF 
04154     90 E5 05 F1 | 	add	objptr, ##26000
04158     FF FF FF FF 
0415c     F2 FE 6B FC | 	wrlong	##-1, objptr
04160     0C 4E 05 F1 | 	add	fp, #12
04164     A7 1E 02 FB | 	rdlong	local01, fp
04168     0C 4E 85 F1 | 	sub	fp, #12
0416c     04 E4 05 F1 | 	add	objptr, #4
04170     F2 1E 62 FC | 	wrlong	local01, objptr
04174     35 00 00 FF 
04178     54 E4 85 F1 | 	sub	objptr, ##27220
0417c     78 FD BF FD | 	call	#_save_line
04180                 | '   programstart=programptr
04180                 | '   pslpoke(lineptr2+16,programptr)
04180                 | '   ucompiledline(4)=$FFFF_FFFF
04180                 | '   ucompiledline(5)=lineptr2
04180                 | '   save_line
04180                 | '   return 0
04180     00 FA 05 F6 | 	mov	result1, #0
04184     B8 00 90 FD | 	jmp	#LR__0343
04188                 | LR__0341
04188                 | ' 
04188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04188     20 4E 05 F1 | 	add	fp, #32
0418c     A7 1E 02 FB | 	rdlong	local01, fp
04190     20 4E 85 F1 | 	sub	fp, #32
04194     FF FF 7F FF 
04198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0419c     9C 00 90 AD |  if_e	jmp	#LR__0342
041a0     20 4E 05 F1 | 	add	fp, #32
041a4     A7 1E 02 FB | 	rdlong	local01, fp
041a8     35 00 00 FF 
041ac     50 E4 05 F1 | 	add	objptr, ##27216
041b0     F2 1E 62 FC | 	wrlong	local01, objptr
041b4     14 4E 85 F1 | 	sub	fp, #20
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 E4 05 F1 | 	add	objptr, #4
041c0     F2 1E 62 FC | 	wrlong	local01, objptr
041c4     A7 12 02 FB | 	rdlong	arg01, fp
041c8     0C 4E 85 F1 | 	sub	fp, #12
041cc     10 12 06 F1 | 	add	arg01, #16
041d0     04 00 00 FF 
041d4     34 E4 85 F1 | 	sub	objptr, ##2100
041d8     F2 14 02 FB | 	rdlong	arg02, objptr
041dc     01 16 06 F6 | 	mov	arg03, #1
041e0     00 18 06 F6 | 	mov	arg04, #0
041e4     2E 00 00 FF 
041e8     60 E5 85 F1 | 	sub	objptr, ##23904
041ec                 | '     return fill(addr, pattern, count, listPtr, 4)
041ec     04 1A 06 F6 | 	mov	arg05, #4
041f0     50 EF B0 FD | 	call	#_psram_spin2_fill
041f4     20 4E 05 F1 | 	add	fp, #32
041f8     A7 12 02 FB | 	rdlong	arg01, fp
041fc     20 4E 85 F1 | 	sub	fp, #32
04200     14 12 06 F1 | 	add	arg01, #20
04204     2E 00 00 FF 
04208     60 E5 05 F1 | 	add	objptr, ##23904
0420c     F2 14 02 FB | 	rdlong	arg02, objptr
04210     01 16 06 F6 | 	mov	arg03, #1
04214     00 18 06 F6 | 	mov	arg04, #0
04218     2E 00 00 FF 
0421c     60 E5 85 F1 | 	sub	objptr, ##23904
04220                 | '     return fill(addr, pattern, count, listPtr, 4)
04220     04 1A 06 F6 | 	mov	arg05, #4
04224     1C EF B0 FD | 	call	#_psram_spin2_fill
04228     02 00 00 FF 
0422c     C0 E4 85 F1 | 	sub	objptr, ##1216
04230     C4 FC BF FD | 	call	#_save_line
04234                 | '   ucompiledline(4)=header(4)
04234                 | '   ucompiledline(5)=lineptr2
04234                 | '   pslpoke(lineptr2+16,programptr)
04234                 | '   pslpoke(header(4)+20,programptr)
04234                 | '   save_line
04234                 | '   return 0
04234     00 FA 05 F6 | 	mov	result1, #0
04238     04 00 90 FD | 	jmp	#LR__0343
0423c                 | LR__0342
0423c     00 FA 05 F6 | 	mov	result1, #0
04240                 | LR__0343
04240     A7 F0 03 F6 | 	mov	ptra, fp
04244     B2 00 A0 FD | 	call	#popregs_
04248                 | _insertline_ret
04248     2D 00 64 FD | 	ret
0424c                 | 
0424c                 | ' 
0424c                 | ' sub add_line_at_end(aline) 
0424c                 | _add_line_at_end
0424c     38 00 00 FF 
04250     4C E4 05 F1 | 	add	objptr, ##28748
04254     F2 12 62 FC | 	wrlong	arg01, objptr
04258     04 E4 05 F1 | 	add	objptr, #4
0425c     F2 14 02 FB | 	rdlong	arg02, objptr
04260     03 00 00 FF 
04264     00 E4 85 F1 | 	sub	objptr, ##1536
04268     F2 14 62 FC | 	wrlong	arg02, objptr
0426c     03 00 00 FF 
04270     00 E4 05 F1 | 	add	objptr, ##1536
04274     F2 12 02 FB | 	rdlong	arg01, objptr
04278     14 12 06 F1 | 	add	arg01, #20
0427c     07 00 00 FF 
04280     30 E4 85 F1 | 	sub	objptr, ##3632
04284     F2 14 02 FB | 	rdlong	arg02, objptr
04288     01 16 06 F6 | 	mov	arg03, #1
0428c     00 18 06 F6 | 	mov	arg04, #0
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298                 | '     return fill(addr, pattern, count, listPtr, 4)
04298     04 1A 06 F6 | 	mov	arg05, #4
0429c     A4 EE B0 FD | 	call	#_psram_spin2_fill
042a0     2E 00 00 FF 
042a4     60 E5 05 F1 | 	add	objptr, ##23904
042a8     F2 14 02 FB | 	rdlong	arg02, objptr
042ac     07 00 00 FF 
042b0     30 E4 05 F1 | 	add	objptr, ##3632
042b4     F2 14 62 FC | 	wrlong	arg02, objptr
042b8     02 00 00 FF 
042bc     FC E5 85 F1 | 	sub	objptr, ##1532
042c0     FF FF BF FF 
042c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
042c8                 | ' 
042c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
042c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
042c8     04 00 00 FF 
042cc     34 E4 85 F1 | 	sub	objptr, ##2100
042d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
042d4     31 00 00 FF 
042d8     20 E4 85 F1 | 	sub	objptr, ##25120
042dc     35 00 00 AF 
042e0     50 E4 05 A1 |  if_e	add	objptr, ##27216
042e4     FF FF FF AF 
042e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
042ec     35 00 00 AF 
042f0     50 E4 85 A1 |  if_e	sub	objptr, ##27216
042f4     00 FC BF FD | 	call	#_save_line
042f8     31 00 00 FF 
042fc     20 E4 05 F1 | 	add	objptr, ##25120
04300     F2 12 02 FB | 	rdlong	arg01, objptr
04304     01 14 66 F6 | 	neg	arg02, #1
04308     01 16 06 F6 | 	mov	arg03, #1
0430c     00 18 06 F6 | 	mov	arg04, #0
04310     2E 00 00 FF 
04314     60 E5 85 F1 | 	sub	objptr, ##23904
04318                 | '     return fill(addr, pattern, count, listPtr, 4)
04318     04 1A 06 F6 | 	mov	arg05, #4
0431c     24 EE B0 FD | 	call	#_psram_spin2_fill
04320     02 00 00 FF 
04324     C0 E4 85 F1 | 	sub	objptr, ##1216
04328                 | _add_line_at_end_ret
04328     2D 00 64 FD | 	ret
0432c                 | 
0432c                 | ' 
0432c                 | ' function compile_immediate(linetype as ulong) as integer
0432c                 | _compile_immediate
0432c     0A 4A 05 F6 | 	mov	COUNT_, #10
04330     A8 00 A0 FD | 	call	#pushregs_
04334                 | _compile_immediate_enter
04334     09 25 0A F6 | 	mov	local04, arg01 wz
04338     00 26 06 F6 | 	mov	local05, #0
0433c     00 28 06 F6 | 	mov	local06, #0
04340                 | ' 
04340                 | ' ' linetype=cont+1, linetype=0 immediate
04340                 | ' '  : 1: this is the first part of the line that will continue
04340                 | ' ' 2 - this is the continuation of the line
04340                 | ' ' 3 - this is the last continued line
04340                 | ' ' 4 - this is the one and only part
04340                 | ' 
04340                 | ' err=0
04340                 | ' cmd=0
04340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04340     2C 00 90 5D |  if_ne	jmp	#LR__0350
04344     22 00 00 FF 
04348     D4 E5 05 F1 | 	add	objptr, ##17876
0434c     F2 28 02 FB | 	rdlong	local06, objptr
04350     02 00 00 FF 
04354     34 E4 05 F1 | 	add	objptr, ##1076
04358     F2 02 68 FC | 	wrlong	#1, objptr
0435c     13 00 00 FF 
04360     38 E4 05 F1 | 	add	objptr, ##9784
04364     F2 00 68 FC | 	wrlong	#0, objptr
04368     38 00 00 FF 
0436c     40 E4 85 F1 | 	sub	objptr, ##28736
04370                 | LR__0350
04370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
04370     02 24 0E F2 | 	cmp	local04, #2 wz
04374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04378     22 00 00 AF 
0437c     D4 E5 05 A1 |  if_e	add	objptr, ##17876
04380     F2 28 02 AB |  if_e	rdlong	local06, objptr
04384     02 00 00 AF 
04388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0438c     F2 02 68 AC |  if_e	wrlong	#1, objptr
04390     25 00 00 AF 
04394     08 E4 85 A1 |  if_e	sub	objptr, ##18952
04398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04398     04 24 0E F2 | 	cmp	local04, #4 wz
0439c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
043a0     2C 00 90 5D |  if_ne	jmp	#LR__0351
043a4     22 00 00 FF 
043a8     DC E5 05 F1 | 	add	objptr, ##17884
043ac     F2 28 02 FB | 	rdlong	local06, objptr
043b0     02 00 00 FF 
043b4     2C E4 05 F1 | 	add	objptr, ##1068
043b8     F2 04 68 FC | 	wrlong	#2, objptr
043bc     13 00 00 FF 
043c0     38 E4 05 F1 | 	add	objptr, ##9784
043c4     F2 04 68 FC | 	wrlong	#2, objptr
043c8     38 00 00 FF 
043cc     40 E4 85 F1 | 	sub	objptr, ##28736
043d0                 | LR__0351
043d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
043d0     05 24 0E F2 | 	cmp	local04, #5 wz
043d4     40 00 90 5D |  if_ne	jmp	#LR__0352
043d8     25 00 00 FF 
043dc     08 E4 05 F1 | 	add	objptr, ##18952
043e0     F2 2A 02 FB | 	rdlong	local07, objptr
043e4     15 29 02 F6 | 	mov	local06, local07
043e8     03 28 66 F0 | 	shl	local06, #3
043ec     02 00 00 FF 
043f0     38 E4 85 F1 | 	sub	objptr, ##1080
043f4     F2 28 02 F1 | 	add	local06, objptr
043f8     04 28 06 F1 | 	add	local06, #4
043fc     14 29 02 FB | 	rdlong	local06, local06
04400     01 2A 06 F1 | 	add	local07, #1
04404     02 00 00 FF 
04408     38 E4 05 F1 | 	add	objptr, ##1080
0440c     F2 2A 62 FC | 	wrlong	local07, objptr
04410     25 00 00 FF 
04414     08 E4 85 F1 | 	sub	objptr, ##18952
04418                 | LR__0352
04418     00 2C 06 F6 | 	mov	local08, #0
0441c                 | ' vars=0
0441c                 | ' 'print cmd
0441c                 | ' 451 select case cmd
0441c     14 2F 02 F6 | 	mov	local09, local06
04420     40 2E 86 F1 | 	sub	local09, #64
04424     33 2E 26 F3 | 	fle	local09, #51
04428     30 2E 62 FD | 	jmprel	local09
0442c                 | LR__0353
0442c     14 02 90 FD | 	jmp	#LR__0388
04430     10 02 90 FD | 	jmp	#LR__0388
04434     D4 00 90 FD | 	jmp	#LR__0355
04438     DC 00 90 FD | 	jmp	#LR__0356
0443c     20 01 90 FD | 	jmp	#LR__0362
04440     E0 00 90 FD | 	jmp	#LR__0357
04444     E8 00 90 FD | 	jmp	#LR__0358
04448     F0 00 90 FD | 	jmp	#LR__0359
0444c     F8 00 90 FD | 	jmp	#LR__0360
04450     00 01 90 FD | 	jmp	#LR__0361
04454     68 01 90 FD | 	jmp	#LR__0372
04458     6C 01 90 FD | 	jmp	#LR__0373
0445c     A0 00 90 FD | 	jmp	#LR__0354
04460     E0 01 90 FD | 	jmp	#LR__0388
04464     04 01 90 FD | 	jmp	#LR__0363
04468     D0 01 90 FD | 	jmp	#LR__0387
0446c     18 01 90 FD | 	jmp	#LR__0365
04470     1C 01 90 FD | 	jmp	#LR__0366
04474     20 01 90 FD | 	jmp	#LR__0367
04478     C0 01 90 FD | 	jmp	#LR__0387
0447c     BC 01 90 FD | 	jmp	#LR__0387
04480     24 01 90 FD | 	jmp	#LR__0369
04484     28 01 90 FD | 	jmp	#LR__0370
04488     B8 01 90 FD | 	jmp	#LR__0388
0448c     28 01 90 FD | 	jmp	#LR__0371
04490     0C 01 90 FD | 	jmp	#LR__0368
04494     38 01 90 FD | 	jmp	#LR__0374
04498     A0 01 90 FD | 	jmp	#LR__0387
0449c     38 01 90 FD | 	jmp	#LR__0375
044a0     A0 01 90 FD | 	jmp	#LR__0388
044a4     3C 01 90 FD | 	jmp	#LR__0376
044a8     40 01 90 FD | 	jmp	#LR__0377
044ac     44 01 90 FD | 	jmp	#LR__0378
044b0     48 01 90 FD | 	jmp	#LR__0379
044b4     84 01 90 FD | 	jmp	#LR__0387
044b8     48 01 90 FD | 	jmp	#LR__0380
044bc     7C 01 90 FD | 	jmp	#LR__0387
044c0     78 01 90 FD | 	jmp	#LR__0387
044c4     74 01 90 FD | 	jmp	#LR__0387
044c8     70 01 90 FD | 	jmp	#LR__0387
044cc     3C 01 90 FD | 	jmp	#LR__0381
044d0     40 01 90 FD | 	jmp	#LR__0382
044d4     64 01 90 FD | 	jmp	#LR__0387
044d8     60 01 90 FD | 	jmp	#LR__0387
044dc     44 01 90 FD | 	jmp	#LR__0384
044e0     38 01 90 FD | 	jmp	#LR__0383
044e4     54 01 90 FD | 	jmp	#LR__0387
044e8     50 01 90 FD | 	jmp	#LR__0387
044ec     54 01 90 FD | 	jmp	#LR__0388
044f0     38 01 90 FD | 	jmp	#LR__0385
044f4     3C 01 90 FD | 	jmp	#LR__0386
044f8     40 01 90 FD | 	jmp	#LR__0387
044fc     44 01 90 FD | 	jmp	#LR__0388
04500                 | LR__0354
04500     0C 0D B0 FD | 	call	#_compile_fun_varp
04504     FD 2C 02 F6 | 	mov	local08, result1
04508     38 01 90 FD | 	jmp	#LR__0388
0450c                 | LR__0355
0450c     20 09 B0 FD | 	call	#_compile_fun_2p
04510     FD 26 02 F6 | 	mov	local05, result1
04514     2C 01 90 FD | 	jmp	#LR__0388
04518                 | LR__0356
04518     14 09 B0 FD | 	call	#_compile_fun_2p
0451c     FD 26 02 F6 | 	mov	local05, result1
04520     20 01 90 FD | 	jmp	#LR__0388
04524                 | LR__0357
04524     7C 09 B0 FD | 	call	#_compile_fun_3p
04528     FD 26 02 F6 | 	mov	local05, result1
0452c     14 01 90 FD | 	jmp	#LR__0388
04530                 | LR__0358
04530     70 09 B0 FD | 	call	#_compile_fun_3p
04534     FD 26 02 F6 | 	mov	local05, result1
04538     08 01 90 FD | 	jmp	#LR__0388
0453c                 | LR__0359
0453c     30 0A B0 FD | 	call	#_compile_fun_4p
04540     FD 26 02 F6 | 	mov	local05, result1
04544     FC 00 90 FD | 	jmp	#LR__0388
04548                 | LR__0360
04548     24 0A B0 FD | 	call	#_compile_fun_4p
0454c     FD 26 02 F6 | 	mov	local05, result1
04550     F0 00 90 FD | 	jmp	#LR__0388
04554                 | LR__0361
04554     78 28 B0 FD | 	call	#_expr
04558                 | ' 
04558                 | ' 
04558                 | ' expr()
04558                 | ' return 0
04558     00 26 06 F6 | 	mov	local05, #0
0455c     E4 00 90 FD | 	jmp	#LR__0388
04560                 | LR__0362
04560     D8 0D B0 FD | 	call	#_compile_print
04564     FD 26 02 F6 | 	mov	local05, result1
04568     94 01 90 FD | 	jmp	#LR__0389
0456c                 | LR__0363
0456c     01 24 16 F2 | 	cmp	local04, #1 wc
04570     08 00 90 CD |  if_b	jmp	#LR__0364
04574     F8 24 B0 FD | 	call	#_compile_goto
04578     84 01 90 FD | 	jmp	#LR__0389
0457c                 | LR__0364
0457c     19 12 06 F6 | 	mov	arg01, #25
04580     08 C0 B0 FD | 	call	#_printerror
04584     78 01 90 FD | 	jmp	#LR__0389
04588                 | LR__0365
04588     44 28 B0 FD | 	call	#_expr
0458c                 | ' 
0458c                 | ' 
0458c                 | ' expr()
0458c                 | ' return 0
0458c     B4 00 90 FD | 	jmp	#LR__0388
04590                 | LR__0366
04590     3C 28 B0 FD | 	call	#_expr
04594                 | ' 
04594                 | ' 
04594                 | ' expr()
04594                 | ' return 0
04594     AC 00 90 FD | 	jmp	#LR__0388
04598                 | LR__0367
04598     34 28 B0 FD | 	call	#_expr
0459c                 | ' 
0459c                 | ' 
0459c                 | ' expr()
0459c                 | ' return 0
0459c     A4 00 90 FD | 	jmp	#LR__0388
045a0                 | LR__0368
045a0     2C 28 B0 FD | 	call	#_expr
045a4                 | ' 
045a4                 | ' 
045a4                 | ' expr()
045a4                 | ' return 0
045a4     9C 00 90 FD | 	jmp	#LR__0388
045a8                 | LR__0369
045a8     10 0D B0 FD | 	call	#_compile_int_fun_2p
045ac     94 00 90 FD | 	jmp	#LR__0388
045b0                 | LR__0370
045b0     94 07 B0 FD | 	call	#_compile_converttoint
045b4                 | ' return err
045b4     8C 00 90 FD | 	jmp	#LR__0388
045b8                 | LR__0371
045b8     58 14 B0 FD | 	call	#_compile_if
045bc     40 01 90 FD | 	jmp	#LR__0389
045c0                 | LR__0372
045c0     10 1B B0 FD | 	call	#_compile_for
045c4     38 01 90 FD | 	jmp	#LR__0389
045c8                 | LR__0373
045c8     F4 22 B0 FD | 	call	#_compile_next
045cc     30 01 90 FD | 	jmp	#LR__0389
045d0                 | LR__0374
045d0     80 15 B0 FD | 	call	#_compile_else
045d4     28 01 90 FD | 	jmp	#LR__0389
045d8                 | LR__0375
045d8     54 08 B0 FD | 	call	#_compile_fun_2p
045dc     FD 26 02 F6 | 	mov	local05, result1
045e0     60 00 90 FD | 	jmp	#LR__0388
045e4                 | LR__0376
045e4     E8 27 B0 FD | 	call	#_expr
045e8                 | ' 
045e8                 | ' 
045e8                 | ' expr()
045e8                 | ' return 0
045e8     58 00 90 FD | 	jmp	#LR__0388
045ec                 | LR__0377
045ec     E0 27 B0 FD | 	call	#_expr
045f0                 | ' 
045f0                 | ' 
045f0                 | ' expr()
045f0                 | ' return 0
045f0     50 00 90 FD | 	jmp	#LR__0388
045f4                 | LR__0378
045f4     D8 27 B0 FD | 	call	#_expr
045f8                 | ' 
045f8                 | ' 
045f8                 | ' expr()
045f8                 | ' return 0
045f8     48 00 90 FD | 	jmp	#LR__0388
045fc                 | LR__0379
045fc     D0 27 B0 FD | 	call	#_expr
04600                 | ' 
04600                 | ' 
04600                 | ' expr()
04600                 | ' return 0
04600     40 00 90 FD | 	jmp	#LR__0388
04604                 | LR__0380
04604     C8 27 B0 FD | 	call	#_expr
04608                 | ' 
04608                 | ' 
04608                 | ' expr()
04608                 | ' return 0
04608     38 00 90 FD | 	jmp	#LR__0388
0460c                 | LR__0381
0460c     C0 27 B0 FD | 	call	#_expr
04610                 | ' 
04610                 | ' 
04610                 | ' expr()
04610                 | ' return 0
04610     30 00 90 FD | 	jmp	#LR__0388
04614                 | LR__0382
04614     B8 27 B0 FD | 	call	#_expr
04618                 | ' 
04618                 | ' 
04618                 | ' expr()
04618                 | ' return 0
04618     28 00 90 FD | 	jmp	#LR__0388
0461c                 | LR__0383
0461c     84 08 B0 FD | 	call	#_compile_fun_3p
04620     20 00 90 FD | 	jmp	#LR__0388
04624                 | LR__0384
04624     6C 0A B0 FD | 	call	#_compile_fun_5p
04628     18 00 90 FD | 	jmp	#LR__0388
0462c                 | LR__0385
0462c     40 09 B0 FD | 	call	#_compile_fun_4p
04630     10 00 90 FD | 	jmp	#LR__0388
04634                 | LR__0386
04634     44 16 B0 FD | 	call	#_compile_dim
04638     C4 00 90 FD | 	jmp	#LR__0389
0463c                 | LR__0387
0463c     4C 06 B0 FD | 	call	#_compile_unknown
04640     BC 00 90 FD | 	jmp	#LR__0389
04644                 | LR__0388
04644     14 23 02 F6 | 	mov	local03, local06
04648     16 1F 02 F6 | 	mov	local01, local08
0464c     0F 2B 02 F6 | 	mov	local07, local01
04650     10 31 02 F6 | 	mov	local10, local02
04654     11 1F 02 F6 | 	mov	local01, local03
04658     38 00 00 FF 
0465c     40 E4 05 F1 | 	add	objptr, ##28736
04660     F2 2E 02 FB | 	rdlong	local09, objptr
04664     17 2D 02 F6 | 	mov	local08, local09
04668     01 2C 66 F0 | 	shl	local08, #1
0466c     17 2D 02 F1 | 	add	local08, local09
04670     02 2C 66 F0 | 	shl	local08, #2
04674     03 00 00 FF 
04678     00 E4 85 F1 | 	sub	objptr, ##1536
0467c     F2 2C 02 F1 | 	add	local08, objptr
04680     16 2B 62 FC | 	wrlong	local07, local08
04684     03 00 00 FF 
04688     00 E4 05 F1 | 	add	objptr, ##1536
0468c     F2 2E 02 FB | 	rdlong	local09, objptr
04690     17 2D 02 F6 | 	mov	local08, local09
04694     01 2C 66 F0 | 	shl	local08, #1
04698     17 2D 02 F1 | 	add	local08, local09
0469c     02 2C 66 F0 | 	shl	local08, #2
046a0     03 00 00 FF 
046a4     00 E4 85 F1 | 	sub	objptr, ##1536
046a8     F2 2C 02 F1 | 	add	local08, objptr
046ac     04 2C 06 F1 | 	add	local08, #4
046b0     16 31 62 FC | 	wrlong	local10, local08
046b4     03 00 00 FF 
046b8     00 E4 05 F1 | 	add	objptr, ##1536
046bc     F2 30 02 FB | 	rdlong	local10, objptr
046c0     18 2F 02 F6 | 	mov	local09, local10
046c4     01 2E 66 F0 | 	shl	local09, #1
046c8     18 2F 02 F1 | 	add	local09, local10
046cc     02 2E 66 F0 | 	shl	local09, #2
046d0     03 00 00 FF 
046d4     00 E4 85 F1 | 	sub	objptr, ##1536
046d8     F2 2E 02 F1 | 	add	local09, objptr
046dc     08 2E 06 F1 | 	add	local09, #8
046e0     17 1F 62 FC | 	wrlong	local01, local09
046e4     03 00 00 FF 
046e8     00 E4 05 F1 | 	add	objptr, ##1536
046ec     F2 2A 02 FB | 	rdlong	local07, objptr
046f0     01 2A 06 F1 | 	add	local07, #1
046f4     F2 2A 62 FC | 	wrlong	local07, objptr
046f8     38 00 00 FF 
046fc     40 E4 85 F1 | 	sub	objptr, ##28736
04700                 | LR__0389
04700                 | ' 
04700                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
04700                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
04700     00 24 0E F2 | 	cmp	local04, #0 wz
04704     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04708     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
0470c     38 00 90 5D |  if_ne	jmp	#LR__0390
04710     38 00 00 FF 
04714     40 E4 05 F1 | 	add	objptr, ##28736
04718     F2 30 02 FB | 	rdlong	local10, objptr
0471c     18 1F 02 F6 | 	mov	local01, local10
04720     01 1E 66 F0 | 	shl	local01, #1
04724     18 1F 02 F1 | 	add	local01, local10
04728     02 1E 66 F0 | 	shl	local01, #2
0472c     03 00 00 FF 
04730     00 E4 85 F1 | 	sub	objptr, ##1536
04734     F2 1E 02 F1 | 	add	local01, objptr
04738     08 1E 06 F1 | 	add	local01, #8
0473c     0F FD 6B FC | 	wrlong	#510, local01
04740     35 00 00 FF 
04744     40 E4 85 F1 | 	sub	objptr, ##27200
04748                 | LR__0390
04748                 | ' 
04748                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult : next i
04748                 | ' return err
04748     13 FB 01 F6 | 	mov	result1, local05
0474c     A7 F0 03 F6 | 	mov	ptra, fp
04750     B2 00 A0 FD | 	call	#popregs_
04754                 | _compile_immediate_ret
04754     2D 00 64 FD | 	ret
04758                 | 
04758                 | ' 
04758                 | ' 
04758                 | ' sub compile_immediate_assign(linetype as ulong)
04758                 | _compile_immediate_assign
04758     09 4A 05 F6 | 	mov	COUNT_, #9
0475c     A8 00 A0 FD | 	call	#pushregs_
04760     09 25 0A F6 | 	mov	local04, arg01 wz
04764     FF 22 06 F6 | 	mov	local03, #255
04768     01 26 66 F6 | 	neg	local05, #1
0476c                 | ' 
0476c                 | ' t1.result_type=result_error : t1.result.uresult=0
0476c                 | ' i=-1: j=-1
0476c                 | ' 
0476c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
0476c     2C 00 90 5D |  if_ne	jmp	#LR__0400
04770     22 00 00 FF 
04774     D0 E5 05 F1 | 	add	objptr, ##17872
04778     F2 28 02 FB | 	rdlong	local06, objptr
0477c     02 00 00 FF 
04780     38 E4 05 F1 | 	add	objptr, ##1080
04784     F2 04 68 FC | 	wrlong	#2, objptr
04788     13 00 00 FF 
0478c     38 E4 05 F1 | 	add	objptr, ##9784
04790     F2 00 68 FC | 	wrlong	#0, objptr
04794     38 00 00 FF 
04798     40 E4 85 F1 | 	sub	objptr, ##28736
0479c                 | LR__0400
0479c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0479c     02 24 0E F2 | 	cmp	local04, #2 wz
047a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
047a4     22 00 00 AF 
047a8     D0 E5 05 A1 |  if_e	add	objptr, ##17872
047ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
047b0     02 00 00 AF 
047b4     38 E4 05 A1 |  if_e	add	objptr, ##1080
047b8     F2 04 68 AC |  if_e	wrlong	#2, objptr
047bc     25 00 00 AF 
047c0     08 E4 85 A1 |  if_e	sub	objptr, ##18952
047c4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
047c4     04 24 0E F2 | 	cmp	local04, #4 wz
047c8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
047cc     2C 00 90 5D |  if_ne	jmp	#LR__0401
047d0     22 00 00 FF 
047d4     D8 E5 05 F1 | 	add	objptr, ##17880
047d8     F2 28 02 FB | 	rdlong	local06, objptr
047dc     02 00 00 FF 
047e0     30 E4 05 F1 | 	add	objptr, ##1072
047e4     F2 06 68 FC | 	wrlong	#3, objptr
047e8     13 00 00 FF 
047ec     38 E4 05 F1 | 	add	objptr, ##9784
047f0     F2 04 68 FC | 	wrlong	#2, objptr
047f4     38 00 00 FF 
047f8     40 E4 85 F1 | 	sub	objptr, ##28736
047fc                 | LR__0401
047fc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
047fc     05 24 0E F2 | 	cmp	local04, #5 wz
04800     3C 00 90 5D |  if_ne	jmp	#LR__0402
04804     25 00 00 FF 
04808     08 E4 05 F1 | 	add	objptr, ##18952
0480c     F2 FA 01 FB | 	rdlong	result1, objptr
04810     FD 28 02 F6 | 	mov	local06, result1
04814     03 28 66 F0 | 	shl	local06, #3
04818     02 00 00 FF 
0481c     38 E4 85 F1 | 	sub	objptr, ##1080
04820     F2 28 02 F1 | 	add	local06, objptr
04824     14 29 02 FB | 	rdlong	local06, local06
04828     02 FA 05 F1 | 	add	result1, #2
0482c     02 00 00 FF 
04830     38 E4 05 F1 | 	add	objptr, ##1080
04834     F2 FA 61 FC | 	wrlong	result1, objptr
04838     25 00 00 FF 
0483c     08 E4 85 F1 | 	sub	objptr, ##18952
04840                 | LR__0402
04840     14 13 02 F6 | 	mov	arg01, local06
04844     01 14 06 F6 | 	mov	arg02, #1
04848     7C 12 B1 FD | 	call	#__system__Right_S
0484c     80 25 B0 FD | 	call	#_expr
04850                 | '  
04850                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04850                 | ' 
04850                 | ' suffix2$=right$(varname2$,1)
04850                 | ' expr()
04850                 | ' 
04850                 | ' 
04850                 | ' if varnum>0 then
04850     22 00 00 FF 
04854     CC E5 05 F1 | 	add	objptr, ##17868
04858     F2 2A 02 FB | 	rdlong	local07, objptr
0485c     22 00 00 FF 
04860     CC E5 85 F1 | 	sub	objptr, ##17868
04864     01 2A 56 F2 | 	cmps	local07, #1 wc
04868     58 00 90 CD |  if_b	jmp	#LR__0405
0486c                 | '   for i=0 to varnum-1
0486c     00 2C 06 F6 | 	mov	local08, #0
04870     22 00 00 FF 
04874     CC E5 05 F1 | 	add	objptr, ##17868
04878     F2 2E 02 FB | 	rdlong	local09, objptr
0487c     22 00 00 FF 
04880     CC E5 85 F1 | 	sub	objptr, ##17868
04884                 | LR__0403
04884     17 2D 52 F2 | 	cmps	local08, local09 wc
04888     38 00 90 3D |  if_ae	jmp	#LR__0404
0488c                 | '     if variables(i).name=varname2$ then j=i : exit
0488c     16 2B 02 F6 | 	mov	local07, local08
04890     04 2A 66 F0 | 	shl	local07, #4
04894     02 00 00 FF 
04898     CC E5 05 F1 | 	add	objptr, ##1484
0489c     F2 2A 02 F1 | 	add	local07, objptr
048a0     15 13 02 FB | 	rdlong	arg01, local07
048a4     14 15 02 F6 | 	mov	arg02, local06
048a8     02 00 00 FF 
048ac     CC E5 85 F1 | 	sub	objptr, ##1484
048b0     6C F2 B0 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     16 27 02 A6 |  if_e	mov	local05, local08
048bc     01 2C 06 51 |  if_ne	add	local08, #1
048c0     C0 FF 9F 5D |  if_ne	jmp	#LR__0403
048c4                 | LR__0404
048c4                 | LR__0405
048c4                 | ' if  j=-1 andalso varnum<maxvars then   
048c4     FF FF 7F FF 
048c8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
048cc     60 00 90 5D |  if_ne	jmp	#LR__0406
048d0     22 00 00 FF 
048d4     CC E5 05 F1 | 	add	objptr, ##17868
048d8     F2 2A 02 FB | 	rdlong	local07, objptr
048dc     22 00 00 FF 
048e0     CC E5 85 F1 | 	sub	objptr, ##17868
048e4     01 00 00 FF 
048e8     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
048ec     40 00 90 3D |  if_ae	jmp	#LR__0406
048f0     22 00 00 FF 
048f4     CC E5 05 F1 | 	add	objptr, ##17868
048f8     F2 2E 02 FB | 	rdlong	local09, objptr
048fc     04 2E 66 F0 | 	shl	local09, #4
04900     20 00 00 FF 
04904     00 E4 85 F1 | 	sub	objptr, ##16384
04908     F2 2E 02 F1 | 	add	local09, objptr
0490c     17 29 62 FC | 	wrlong	local06, local09
04910     20 00 00 FF 
04914     00 E4 05 F1 | 	add	objptr, ##16384
04918     F2 2A 02 FB | 	rdlong	local07, objptr
0491c     15 27 02 F6 | 	mov	local05, local07
04920     01 2A 06 F1 | 	add	local07, #1
04924     F2 2A 62 FC | 	wrlong	local07, objptr
04928     22 00 00 FF 
0492c     CC E5 85 F1 | 	sub	objptr, ##17868
04930                 | LR__0406
04930     13 1F 02 F6 | 	mov	local01, local05
04934     17 22 06 F6 | 	mov	local03, #23
04938     0F 2B 02 F6 | 	mov	local07, local01
0493c     10 2F 02 F6 | 	mov	local09, local02
04940     11 1F 02 F6 | 	mov	local01, local03
04944     38 00 00 FF 
04948     40 E4 05 F1 | 	add	objptr, ##28736
0494c     F2 2C 02 FB | 	rdlong	local08, objptr
04950     16 29 02 F6 | 	mov	local06, local08
04954     01 28 66 F0 | 	shl	local06, #1
04958     16 29 02 F1 | 	add	local06, local08
0495c     02 28 66 F0 | 	shl	local06, #2
04960     03 00 00 FF 
04964     00 E4 85 F1 | 	sub	objptr, ##1536
04968     F2 28 02 F1 | 	add	local06, objptr
0496c     14 2B 62 FC | 	wrlong	local07, local06
04970     03 00 00 FF 
04974     00 E4 05 F1 | 	add	objptr, ##1536
04978     F2 2C 02 FB | 	rdlong	local08, objptr
0497c     16 2B 02 F6 | 	mov	local07, local08
04980     01 2A 66 F0 | 	shl	local07, #1
04984     16 2B 02 F1 | 	add	local07, local08
04988     02 2A 66 F0 | 	shl	local07, #2
0498c     03 00 00 FF 
04990     00 E4 85 F1 | 	sub	objptr, ##1536
04994     F2 2A 02 F1 | 	add	local07, objptr
04998     04 2A 06 F1 | 	add	local07, #4
0499c     15 2F 62 FC | 	wrlong	local09, local07
049a0     03 00 00 FF 
049a4     00 E4 05 F1 | 	add	objptr, ##1536
049a8     F2 2E 02 FB | 	rdlong	local09, objptr
049ac     17 2D 02 F6 | 	mov	local08, local09
049b0     01 2C 66 F0 | 	shl	local08, #1
049b4     17 2D 02 F1 | 	add	local08, local09
049b8     02 2C 66 F0 | 	shl	local08, #2
049bc     03 00 00 FF 
049c0     00 E4 85 F1 | 	sub	objptr, ##1536
049c4     F2 2C 02 F1 | 	add	local08, objptr
049c8     08 2C 06 F1 | 	add	local08, #8
049cc     16 1F 62 FC | 	wrlong	local01, local08
049d0     03 00 00 FF 
049d4     00 E4 05 F1 | 	add	objptr, ##1536
049d8     F2 2A 02 FB | 	rdlong	local07, objptr
049dc     01 2A 06 F1 | 	add	local07, #1
049e0     F2 2A 62 FC | 	wrlong	local07, objptr
049e4     38 00 00 FF 
049e8     40 E4 85 F1 | 	sub	objptr, ##28736
049ec                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
049ec                 | ' 
049ec                 | ' 
049ec                 | ' compiledline(lineptr)=t1:  lineptr+=1 
049ec                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
049ec     00 24 0E F2 | 	cmp	local04, #0 wz
049f0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
049f4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
049f8     38 00 90 5D |  if_ne	jmp	#LR__0407
049fc     38 00 00 FF 
04a00     40 E4 05 F1 | 	add	objptr, ##28736
04a04     F2 1E 02 FB | 	rdlong	local01, objptr
04a08     0F 2F 02 F6 | 	mov	local09, local01
04a0c     01 2E 66 F0 | 	shl	local09, #1
04a10     0F 2F 02 F1 | 	add	local09, local01
04a14     02 2E 66 F0 | 	shl	local09, #2
04a18     03 00 00 FF 
04a1c     00 E4 85 F1 | 	sub	objptr, ##1536
04a20     F2 2E 02 F1 | 	add	local09, objptr
04a24     08 2E 06 F1 | 	add	local09, #8
04a28     17 FD 6B FC | 	wrlong	#510, local09
04a2c     35 00 00 FF 
04a30     40 E4 85 F1 | 	sub	objptr, ##27200
04a34                 | LR__0407
04a34     A7 F0 03 F6 | 	mov	ptra, fp
04a38     B2 00 A0 FD | 	call	#popregs_
04a3c                 | _compile_immediate_assign_ret
04a3c     2D 00 64 FD | 	ret
04a40                 | 
04a40                 | ' 
04a40                 | ' ' ------------------ compile the line that is calling a command 
04a40                 | ' 
04a40                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04a40                 | _compile
04a40     04 4A 05 F6 | 	mov	COUNT_, #4
04a44     A8 00 A0 FD | 	call	#pushregs_
04a48     09 1F 0A F6 | 	mov	local01, arg01 wz
04a4c     0A 21 02 F6 | 	mov	local02, arg02
04a50     0B 23 02 F6 | 	mov	local03, arg03
04a54                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04a54                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04a54                 | '  
04a54                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04a54                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04a54     0C 00 90 5D |  if_ne	jmp	#LR__0410
04a58     00 12 06 F6 | 	mov	arg01, #0
04a5c     CC F8 BF FD | 	call	#_compile_immediate
04a60     A0 00 90 FD | 	jmp	#LR__0417
04a64                 | LR__0410
04a64     35 00 00 FF 
04a68     40 E4 05 F1 | 	add	objptr, ##27200
04a6c     F2 1E 62 FC | 	wrlong	local01, objptr
04a70     04 E4 05 F1 | 	add	objptr, #4
04a74     F2 20 62 FC | 	wrlong	local02, objptr
04a78     35 00 00 FF 
04a7c     44 E4 85 F1 | 	sub	objptr, ##27204
04a80     11 13 02 F6 | 	mov	arg01, local03
04a84     01 12 06 F1 | 	add	arg01, #1
04a88     A0 F8 BF FD | 	call	#_compile_immediate
04a8c     FD 24 0A F6 | 	mov	local04, result1 wz
04a90                 | ' 
04a90                 | ' ucompiledline(0)=alinemajor
04a90                 | ' ucompiledline(1)=alineminor
04a90                 | ' 
04a90                 | ' 
04a90                 | ' ' cont: 0: this is the first part of the line that will continue
04a90                 | ' ' 1 - this is the continuation of the line
04a90                 | ' ' 2 - this is the last continued line
04a90                 | ' ' 3 - this is the ome and only part
04a90                 | ' 
04a90                 | ' 
04a90                 | ' err=compile_immediate(cont+1) 
04a90                 | ' if err=0 then
04a90     6C 00 90 5D |  if_ne	jmp	#LR__0416
04a94                 | '   if cont=3 orelse cont=2 then 
04a94     03 22 0E F2 | 	cmp	local03, #3 wz
04a98     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04a9c     60 00 90 5D |  if_ne	jmp	#LR__0415
04aa0                 | '     if alinemajor >lastline then 
04aa0     38 00 00 FF 
04aa4     4C E4 05 F1 | 	add	objptr, ##28748
04aa8     F2 16 02 FB | 	rdlong	arg03, objptr
04aac     38 00 00 FF 
04ab0     4C E4 85 F1 | 	sub	objptr, ##28748
04ab4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04ab8     0C 00 90 ED |  if_be	jmp	#LR__0411
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     88 F7 BF FD | 	call	#_add_line_at_end
04ac4     38 00 90 FD | 	jmp	#LR__0414
04ac8                 | LR__0411
04ac8     0F 13 02 F6 | 	mov	arg01, local01
04acc     08 F0 BF FD | 	call	#_deleteline
04ad0                 | '       deleteline(alinemajor)  
04ad0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04ad0     38 00 00 FF 
04ad4     4C E4 05 F1 | 	add	objptr, ##28748
04ad8     F2 16 02 FB | 	rdlong	arg03, objptr
04adc     38 00 00 FF 
04ae0     4C E4 85 F1 | 	sub	objptr, ##28748
04ae4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04ae8     0C 00 90 ED |  if_be	jmp	#LR__0412
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     58 F7 BF FD | 	call	#_add_line_at_end
04af4     08 00 90 FD | 	jmp	#LR__0413
04af8                 | LR__0412
04af8     0F 13 02 F6 | 	mov	arg01, local01
04afc     04 F5 BF FD | 	call	#_insertline
04b00                 | LR__0413
04b00                 | LR__0414
04b00                 | LR__0415
04b00                 | LR__0416
04b00                 | ' return err
04b00     12 FB 01 F6 | 	mov	result1, local04
04b04                 | LR__0417
04b04     A7 F0 03 F6 | 	mov	ptra, fp
04b08     B2 00 A0 FD | 	call	#popregs_
04b0c                 | _compile_ret
04b0c     2D 00 64 FD | 	ret
04b10                 | 
04b10                 | ' 
04b10                 | ' ' ------------------ compile the line that is assigning to a variable
04b10                 | ' 
04b10                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04b10                 | _compile_assign
04b10     03 4A 05 F6 | 	mov	COUNT_, #3
04b14     A8 00 A0 FD | 	call	#pushregs_
04b18     09 1F 0A F6 | 	mov	local01, arg01 wz
04b1c     0A 21 02 F6 | 	mov	local02, arg02
04b20     0B 23 02 F6 | 	mov	local03, arg03
04b24                 | ' 
04b24                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04b24                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04b24     0C 00 90 5D |  if_ne	jmp	#LR__0420
04b28     00 12 06 F6 | 	mov	arg01, #0
04b2c     28 FC BF FD | 	call	#_compile_immediate_assign
04b30     94 00 90 FD | 	jmp	#LR__0426
04b34                 | LR__0420
04b34     35 00 00 FF 
04b38     40 E4 05 F1 | 	add	objptr, ##27200
04b3c     F2 1E 62 FC | 	wrlong	local01, objptr
04b40     04 E4 05 F1 | 	add	objptr, #4
04b44     F2 20 62 FC | 	wrlong	local02, objptr
04b48     35 00 00 FF 
04b4c     44 E4 85 F1 | 	sub	objptr, ##27204
04b50     11 13 02 F6 | 	mov	arg01, local03
04b54     01 12 06 F1 | 	add	arg01, #1
04b58     FC FB BF FD | 	call	#_compile_immediate_assign
04b5c                 | ' 
04b5c                 | ' ucompiledline(0)=alinemajor
04b5c                 | ' ucompiledline(1)=alineminor
04b5c                 | ' 
04b5c                 | ' compile_immediate_assign(cont+1) 
04b5c                 | ' 
04b5c                 | ' if cont=3 orelse cont=2 then 
04b5c     03 22 0E F2 | 	cmp	local03, #3 wz
04b60     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04b64     60 00 90 5D |  if_ne	jmp	#LR__0425
04b68                 | '   if alinemajor >lastline then 
04b68     38 00 00 FF 
04b6c     4C E4 05 F1 | 	add	objptr, ##28748
04b70     F2 16 02 FB | 	rdlong	arg03, objptr
04b74     38 00 00 FF 
04b78     4C E4 85 F1 | 	sub	objptr, ##28748
04b7c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04b80     0C 00 90 ED |  if_be	jmp	#LR__0421
04b84     0F 13 02 F6 | 	mov	arg01, local01
04b88     C0 F6 BF FD | 	call	#_add_line_at_end
04b8c     38 00 90 FD | 	jmp	#LR__0424
04b90                 | LR__0421
04b90     0F 13 02 F6 | 	mov	arg01, local01
04b94     40 EF BF FD | 	call	#_deleteline
04b98                 | '     deleteline(alinemajor)  
04b98                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
04b98     38 00 00 FF 
04b9c     4C E4 05 F1 | 	add	objptr, ##28748
04ba0     F2 16 02 FB | 	rdlong	arg03, objptr
04ba4     38 00 00 FF 
04ba8     4C E4 85 F1 | 	sub	objptr, ##28748
04bac     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04bb0     0C 00 90 ED |  if_be	jmp	#LR__0422
04bb4     0F 13 02 F6 | 	mov	arg01, local01
04bb8     90 F6 BF FD | 	call	#_add_line_at_end
04bbc     08 00 90 FD | 	jmp	#LR__0423
04bc0                 | LR__0422
04bc0     0F 13 02 F6 | 	mov	arg01, local01
04bc4     3C F4 BF FD | 	call	#_insertline
04bc8                 | LR__0423
04bc8                 | LR__0424
04bc8                 | LR__0425
04bc8                 | LR__0426
04bc8     A7 F0 03 F6 | 	mov	ptra, fp
04bcc     B2 00 A0 FD | 	call	#popregs_
04bd0                 | _compile_assign_ret
04bd0     2D 00 64 FD | 	ret
04bd4                 | 
04bd4                 | ' 
04bd4                 | ' sub compile_error(errno)
04bd4                 | _compile_error
04bd4     FF 04 06 F6 | 	mov	_var03, #255
04bd8     01 07 02 F6 | 	mov	_var04, _var02
04bdc     02 09 02 F6 | 	mov	_var05, _var03
04be0     38 00 00 FF 
04be4     40 E4 05 F1 | 	add	objptr, ##28736
04be8     F2 0A 02 FB | 	rdlong	_var06, objptr
04bec     05 0D 02 F6 | 	mov	_var07, _var06
04bf0     01 0C 66 F0 | 	shl	_var07, #1
04bf4     05 0D 02 F1 | 	add	_var07, _var06
04bf8     02 0C 66 F0 | 	shl	_var07, #2
04bfc     03 00 00 FF 
04c00     00 E4 85 F1 | 	sub	objptr, ##1536
04c04     F2 0C 02 F1 | 	add	_var07, objptr
04c08     06 13 62 FC | 	wrlong	arg01, _var07
04c0c     03 00 00 FF 
04c10     00 E4 05 F1 | 	add	objptr, ##1536
04c14     F2 0C 02 FB | 	rdlong	_var07, objptr
04c18     06 0B 02 F6 | 	mov	_var06, _var07
04c1c     01 0A 66 F0 | 	shl	_var06, #1
04c20     06 0B 02 F1 | 	add	_var06, _var07
04c24     02 0A 66 F0 | 	shl	_var06, #2
04c28     03 00 00 FF 
04c2c     00 E4 85 F1 | 	sub	objptr, ##1536
04c30     F2 0A 02 F1 | 	add	_var06, objptr
04c34     04 0A 06 F1 | 	add	_var06, #4
04c38     05 07 62 FC | 	wrlong	_var04, _var06
04c3c     03 00 00 FF 
04c40     00 E4 05 F1 | 	add	objptr, ##1536
04c44     F2 0C 02 FB | 	rdlong	_var07, objptr
04c48     06 0B 02 F6 | 	mov	_var06, _var07
04c4c     01 0A 66 F0 | 	shl	_var06, #1
04c50     06 0B 02 F1 | 	add	_var06, _var07
04c54     02 0A 66 F0 | 	shl	_var06, #2
04c58     03 00 00 FF 
04c5c     00 E4 85 F1 | 	sub	objptr, ##1536
04c60     F2 0A 02 F1 | 	add	_var06, objptr
04c64     08 0A 06 F1 | 	add	_var06, #8
04c68     05 09 62 FC | 	wrlong	_var05, _var06
04c6c     03 00 00 FF 
04c70     00 E4 05 F1 | 	add	objptr, ##1536
04c74     F2 12 02 FB | 	rdlong	arg01, objptr
04c78     01 12 06 F1 | 	add	arg01, #1
04c7c     F2 12 62 FC | 	wrlong	arg01, objptr
04c80     38 00 00 FF 
04c84     40 E4 85 F1 | 	sub	objptr, ##28736
04c88                 | _compile_error_ret
04c88     2D 00 64 FD | 	ret
04c8c                 | 
04c8c                 | ' 
04c8c                 | ' 
04c8c                 | ' sub compile_unknown() 
04c8c                 | _compile_unknown
04c8c     FF 04 06 F6 | 	mov	_var03, #255
04c90     17 00 06 F6 | 	mov	_var01, #23
04c94     01 07 02 F6 | 	mov	_var04, _var02
04c98     02 01 02 F6 | 	mov	_var01, _var03
04c9c     38 00 00 FF 
04ca0     40 E4 05 F1 | 	add	objptr, ##28736
04ca4     F2 08 02 FB | 	rdlong	_var05, objptr
04ca8     04 0B 02 F6 | 	mov	_var06, _var05
04cac     01 0A 66 F0 | 	shl	_var06, #1
04cb0     04 0B 02 F1 | 	add	_var06, _var05
04cb4     02 0A 66 F0 | 	shl	_var06, #2
04cb8     03 00 00 FF 
04cbc     00 E4 85 F1 | 	sub	objptr, ##1536
04cc0     F2 0A 02 F1 | 	add	_var06, objptr
04cc4     05 2F 68 FC | 	wrlong	#23, _var06
04cc8     03 00 00 FF 
04ccc     00 E4 05 F1 | 	add	objptr, ##1536
04cd0     F2 0A 02 FB | 	rdlong	_var06, objptr
04cd4     05 09 02 F6 | 	mov	_var05, _var06
04cd8     01 08 66 F0 | 	shl	_var05, #1
04cdc     05 09 02 F1 | 	add	_var05, _var06
04ce0     02 08 66 F0 | 	shl	_var05, #2
04ce4     03 00 00 FF 
04ce8     00 E4 85 F1 | 	sub	objptr, ##1536
04cec     F2 08 02 F1 | 	add	_var05, objptr
04cf0     04 08 06 F1 | 	add	_var05, #4
04cf4     04 07 62 FC | 	wrlong	_var04, _var05
04cf8     03 00 00 FF 
04cfc     00 E4 05 F1 | 	add	objptr, ##1536
04d00     F2 0A 02 FB | 	rdlong	_var06, objptr
04d04     05 09 02 F6 | 	mov	_var05, _var06
04d08     01 08 66 F0 | 	shl	_var05, #1
04d0c     05 09 02 F1 | 	add	_var05, _var06
04d10     02 08 66 F0 | 	shl	_var05, #2
04d14     03 00 00 FF 
04d18     00 E4 85 F1 | 	sub	objptr, ##1536
04d1c     F2 08 02 F1 | 	add	_var05, objptr
04d20     08 08 06 F1 | 	add	_var05, #8
04d24     04 01 62 FC | 	wrlong	_var01, _var05
04d28     03 00 00 FF 
04d2c     00 E4 05 F1 | 	add	objptr, ##1536
04d30     F2 0A 02 FB | 	rdlong	_var06, objptr
04d34     01 0A 06 F1 | 	add	_var06, #1
04d38     F2 0A 62 FC | 	wrlong	_var06, objptr
04d3c     38 00 00 FF 
04d40     40 E4 85 F1 | 	sub	objptr, ##28736
04d44                 | _compile_unknown_ret
04d44     2D 00 64 FD | 	ret
04d48                 | 
04d48                 | ' 
04d48                 | ' function compile_converttoint() as integer
04d48                 | _compile_converttoint
04d48     06 4A 05 F6 | 	mov	COUNT_, #6
04d4c     A8 00 A0 FD | 	call	#pushregs_
04d50     00 1E 06 F6 | 	mov	local01, #0
04d54     78 20 B0 FD | 	call	#_expr
04d58     FD 24 0A F6 | 	mov	local04, result1 wz
04d5c                 | ' err=0
04d5c                 | ' t1.result.uresult=0
04d5c                 | ' err=expr()
04d5c                 | ' if err=0 then
04d5c     C0 00 90 5D |  if_ne	jmp	#LR__0430
04d60     16 22 06 F6 | 	mov	local03, #22
04d64     0F 27 02 F6 | 	mov	local05, local01
04d68     10 29 02 F6 | 	mov	local06, local02
04d6c     11 25 02 F6 | 	mov	local04, local03
04d70     38 00 00 FF 
04d74     40 E4 05 F1 | 	add	objptr, ##28736
04d78     F2 1E 02 FB | 	rdlong	local01, objptr
04d7c     0F FB 01 F6 | 	mov	result1, local01
04d80     01 FA 65 F0 | 	shl	result1, #1
04d84     0F FB 01 F1 | 	add	result1, local01
04d88     02 FA 65 F0 | 	shl	result1, #2
04d8c     03 00 00 FF 
04d90     00 E4 85 F1 | 	sub	objptr, ##1536
04d94     F2 FA 01 F1 | 	add	result1, objptr
04d98     FD 26 62 FC | 	wrlong	local05, result1
04d9c     03 00 00 FF 
04da0     00 E4 05 F1 | 	add	objptr, ##1536
04da4     F2 26 02 FB | 	rdlong	local05, objptr
04da8     13 1F 02 F6 | 	mov	local01, local05
04dac     01 1E 66 F0 | 	shl	local01, #1
04db0     13 1F 02 F1 | 	add	local01, local05
04db4     02 1E 66 F0 | 	shl	local01, #2
04db8     03 00 00 FF 
04dbc     00 E4 85 F1 | 	sub	objptr, ##1536
04dc0     F2 1E 02 F1 | 	add	local01, objptr
04dc4     04 1E 06 F1 | 	add	local01, #4
04dc8     0F 29 62 FC | 	wrlong	local06, local01
04dcc     03 00 00 FF 
04dd0     00 E4 05 F1 | 	add	objptr, ##1536
04dd4     F2 28 02 FB | 	rdlong	local06, objptr
04dd8     14 27 02 F6 | 	mov	local05, local06
04ddc     01 26 66 F0 | 	shl	local05, #1
04de0     14 27 02 F1 | 	add	local05, local06
04de4     02 26 66 F0 | 	shl	local05, #2
04de8     03 00 00 FF 
04dec     00 E4 85 F1 | 	sub	objptr, ##1536
04df0     F2 26 02 F1 | 	add	local05, objptr
04df4     08 26 06 F1 | 	add	local05, #8
04df8     13 25 62 FC | 	wrlong	local04, local05
04dfc     03 00 00 FF 
04e00     00 E4 05 F1 | 	add	objptr, ##1536
04e04     F2 26 02 FB | 	rdlong	local05, objptr
04e08     01 26 06 F1 | 	add	local05, #1
04e0c     F2 26 62 FC | 	wrlong	local05, objptr
04e10     38 00 00 FF 
04e14     40 E4 85 F1 | 	sub	objptr, ##28736
04e18                 | '   t1.result_type=fun_converttoint
04e18                 | '   compiledline(lineptr)=t1: lineptr+=1 
04e18                 | '   return 0
04e18     00 FA 05 F6 | 	mov	result1, #0
04e1c     04 00 90 FD | 	jmp	#LR__0431
04e20                 | LR__0430
04e20                 | '   return err
04e20     12 FB 01 F6 | 	mov	result1, local04
04e24                 | LR__0431
04e24     A7 F0 03 F6 | 	mov	ptra, fp
04e28     B2 00 A0 FD | 	call	#popregs_
04e2c                 | _compile_converttoint_ret
04e2c     2D 00 64 FD | 	ret
04e30                 | 
04e30                 | ' 
04e30                 | ' 
04e30                 | ' function compile_fun_2p() as ulong
04e30                 | _compile_fun_2p
04e30     01 4A 05 F6 | 	mov	COUNT_, #1
04e34     A8 00 A0 FD | 	call	#pushregs_
04e38     94 1F B0 FD | 	call	#_expr
04e3c                 | ' 
04e3c                 | ' expr()
04e3c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04e3c     25 00 00 FF 
04e40     08 E4 05 F1 | 	add	objptr, ##18952
04e44     F2 1E 02 FB | 	rdlong	local01, objptr
04e48     03 1E 66 F0 | 	shl	local01, #3
04e4c     02 00 00 FF 
04e50     38 E4 85 F1 | 	sub	objptr, ##1080
04e54     F2 1E 02 F1 | 	add	local01, objptr
04e58     04 1E 06 F1 | 	add	local01, #4
04e5c     0F 1F 02 FB | 	rdlong	local01, local01
04e60     11 1E 0E F2 | 	cmp	local01, #17 wz
04e64     22 00 00 FF 
04e68     D0 E5 85 F1 | 	sub	objptr, ##17872
04e6c     15 FA 05 56 |  if_ne	mov	result1, #21
04e70     24 00 90 5D |  if_ne	jmp	#LR__0440
04e74     25 00 00 FF 
04e78     08 E4 05 F1 | 	add	objptr, ##18952
04e7c     F2 1E 02 FB | 	rdlong	local01, objptr
04e80     01 1E 06 F1 | 	add	local01, #1
04e84     F2 1E 62 FC | 	wrlong	local01, objptr
04e88     25 00 00 FF 
04e8c     08 E4 85 F1 | 	sub	objptr, ##18952
04e90     3C 1F B0 FD | 	call	#_expr
04e94     00 FA 05 F6 | 	mov	result1, #0
04e98                 | LR__0440
04e98     A7 F0 03 F6 | 	mov	ptra, fp
04e9c     B2 00 A0 FD | 	call	#popregs_
04ea0                 | _compile_fun_2p_ret
04ea0     2D 00 64 FD | 	ret
04ea4                 | 
04ea4                 | ' 
04ea4                 | ' function compile_fun_3p() as ulong
04ea4                 | _compile_fun_3p
04ea4     01 4A 05 F6 | 	mov	COUNT_, #1
04ea8     A8 00 A0 FD | 	call	#pushregs_
04eac     20 1F B0 FD | 	call	#_expr
04eb0                 | ' 
04eb0                 | ' expr()
04eb0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04eb0     25 00 00 FF 
04eb4     08 E4 05 F1 | 	add	objptr, ##18952
04eb8     F2 1E 02 FB | 	rdlong	local01, objptr
04ebc     03 1E 66 F0 | 	shl	local01, #3
04ec0     02 00 00 FF 
04ec4     38 E4 85 F1 | 	sub	objptr, ##1080
04ec8     F2 1E 02 F1 | 	add	local01, objptr
04ecc     04 1E 06 F1 | 	add	local01, #4
04ed0     0F 1F 02 FB | 	rdlong	local01, local01
04ed4     11 1E 0E F2 | 	cmp	local01, #17 wz
04ed8     22 00 00 FF 
04edc     D0 E5 85 F1 | 	sub	objptr, ##17872
04ee0     15 FA 05 56 |  if_ne	mov	result1, #21
04ee4     7C 00 90 5D |  if_ne	jmp	#LR__0450
04ee8     25 00 00 FF 
04eec     08 E4 05 F1 | 	add	objptr, ##18952
04ef0     F2 1E 02 FB | 	rdlong	local01, objptr
04ef4     01 1E 06 F1 | 	add	local01, #1
04ef8     F2 1E 62 FC | 	wrlong	local01, objptr
04efc     25 00 00 FF 
04f00     08 E4 85 F1 | 	sub	objptr, ##18952
04f04     C8 1E B0 FD | 	call	#_expr
04f08                 | ' expr()
04f08                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04f08     25 00 00 FF 
04f0c     08 E4 05 F1 | 	add	objptr, ##18952
04f10     F2 1E 02 FB | 	rdlong	local01, objptr
04f14     03 1E 66 F0 | 	shl	local01, #3
04f18     02 00 00 FF 
04f1c     38 E4 85 F1 | 	sub	objptr, ##1080
04f20     F2 1E 02 F1 | 	add	local01, objptr
04f24     04 1E 06 F1 | 	add	local01, #4
04f28     0F 1F 02 FB | 	rdlong	local01, local01
04f2c     11 1E 0E F2 | 	cmp	local01, #17 wz
04f30     22 00 00 FF 
04f34     D0 E5 85 F1 | 	sub	objptr, ##17872
04f38     15 FA 05 56 |  if_ne	mov	result1, #21
04f3c     24 00 90 5D |  if_ne	jmp	#LR__0450
04f40     25 00 00 FF 
04f44     08 E4 05 F1 | 	add	objptr, ##18952
04f48     F2 1E 02 FB | 	rdlong	local01, objptr
04f4c     01 1E 06 F1 | 	add	local01, #1
04f50     F2 1E 62 FC | 	wrlong	local01, objptr
04f54     25 00 00 FF 
04f58     08 E4 85 F1 | 	sub	objptr, ##18952
04f5c     70 1E B0 FD | 	call	#_expr
04f60     00 FA 05 F6 | 	mov	result1, #0
04f64                 | LR__0450
04f64     A7 F0 03 F6 | 	mov	ptra, fp
04f68     B2 00 A0 FD | 	call	#popregs_
04f6c                 | _compile_fun_3p_ret
04f6c     2D 00 64 FD | 	ret
04f70                 | 
04f70                 | ' 
04f70                 | ' function compile_fun_4p() as ulong
04f70                 | _compile_fun_4p
04f70     01 4A 05 F6 | 	mov	COUNT_, #1
04f74     A8 00 A0 FD | 	call	#pushregs_
04f78     54 1E B0 FD | 	call	#_expr
04f7c                 | ' 
04f7c                 | ' expr()
04f7c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04f7c     25 00 00 FF 
04f80     08 E4 05 F1 | 	add	objptr, ##18952
04f84     F2 1E 02 FB | 	rdlong	local01, objptr
04f88     03 1E 66 F0 | 	shl	local01, #3
04f8c     02 00 00 FF 
04f90     38 E4 85 F1 | 	sub	objptr, ##1080
04f94     F2 1E 02 F1 | 	add	local01, objptr
04f98     04 1E 06 F1 | 	add	local01, #4
04f9c     0F 1F 02 FB | 	rdlong	local01, local01
04fa0     11 1E 0E F2 | 	cmp	local01, #17 wz
04fa4     22 00 00 FF 
04fa8     D0 E5 85 F1 | 	sub	objptr, ##17872
04fac     15 FA 05 56 |  if_ne	mov	result1, #21
04fb0     D4 00 90 5D |  if_ne	jmp	#LR__0460
04fb4     25 00 00 FF 
04fb8     08 E4 05 F1 | 	add	objptr, ##18952
04fbc     F2 1E 02 FB | 	rdlong	local01, objptr
04fc0     01 1E 06 F1 | 	add	local01, #1
04fc4     F2 1E 62 FC | 	wrlong	local01, objptr
04fc8     25 00 00 FF 
04fcc     08 E4 85 F1 | 	sub	objptr, ##18952
04fd0     FC 1D B0 FD | 	call	#_expr
04fd4                 | ' expr()
04fd4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
04fd4     25 00 00 FF 
04fd8     08 E4 05 F1 | 	add	objptr, ##18952
04fdc     F2 1E 02 FB | 	rdlong	local01, objptr
04fe0     03 1E 66 F0 | 	shl	local01, #3
04fe4     02 00 00 FF 
04fe8     38 E4 85 F1 | 	sub	objptr, ##1080
04fec     F2 1E 02 F1 | 	add	local01, objptr
04ff0     04 1E 06 F1 | 	add	local01, #4
04ff4     0F 1F 02 FB | 	rdlong	local01, local01
04ff8     11 1E 0E F2 | 	cmp	local01, #17 wz
04ffc     22 00 00 FF 
05000     D0 E5 85 F1 | 	sub	objptr, ##17872
05004     15 FA 05 56 |  if_ne	mov	result1, #21
05008     7C 00 90 5D |  if_ne	jmp	#LR__0460
0500c     25 00 00 FF 
05010     08 E4 05 F1 | 	add	objptr, ##18952
05014     F2 1E 02 FB | 	rdlong	local01, objptr
05018     01 1E 06 F1 | 	add	local01, #1
0501c     F2 1E 62 FC | 	wrlong	local01, objptr
05020     25 00 00 FF 
05024     08 E4 85 F1 | 	sub	objptr, ##18952
05028     A4 1D B0 FD | 	call	#_expr
0502c                 | ' expr()
0502c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0502c     25 00 00 FF 
05030     08 E4 05 F1 | 	add	objptr, ##18952
05034     F2 1E 02 FB | 	rdlong	local01, objptr
05038     03 1E 66 F0 | 	shl	local01, #3
0503c     02 00 00 FF 
05040     38 E4 85 F1 | 	sub	objptr, ##1080
05044     F2 1E 02 F1 | 	add	local01, objptr
05048     04 1E 06 F1 | 	add	local01, #4
0504c     0F 1F 02 FB | 	rdlong	local01, local01
05050     11 1E 0E F2 | 	cmp	local01, #17 wz
05054     22 00 00 FF 
05058     D0 E5 85 F1 | 	sub	objptr, ##17872
0505c     15 FA 05 56 |  if_ne	mov	result1, #21
05060     24 00 90 5D |  if_ne	jmp	#LR__0460
05064     25 00 00 FF 
05068     08 E4 05 F1 | 	add	objptr, ##18952
0506c     F2 1E 02 FB | 	rdlong	local01, objptr
05070     01 1E 06 F1 | 	add	local01, #1
05074     F2 1E 62 FC | 	wrlong	local01, objptr
05078     25 00 00 FF 
0507c     08 E4 85 F1 | 	sub	objptr, ##18952
05080     4C 1D B0 FD | 	call	#_expr
05084     00 FA 05 F6 | 	mov	result1, #0
05088                 | LR__0460
05088     A7 F0 03 F6 | 	mov	ptra, fp
0508c     B2 00 A0 FD | 	call	#popregs_
05090                 | _compile_fun_4p_ret
05090     2D 00 64 FD | 	ret
05094                 | 
05094                 | ' 
05094                 | ' 
05094                 | ' function compile_fun_5p() as ulong
05094                 | _compile_fun_5p
05094     01 4A 05 F6 | 	mov	COUNT_, #1
05098     A8 00 A0 FD | 	call	#pushregs_
0509c     30 1D B0 FD | 	call	#_expr
050a0                 | ' 
050a0                 | ' expr()
050a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
050a0     25 00 00 FF 
050a4     08 E4 05 F1 | 	add	objptr, ##18952
050a8     F2 1E 02 FB | 	rdlong	local01, objptr
050ac     03 1E 66 F0 | 	shl	local01, #3
050b0     02 00 00 FF 
050b4     38 E4 85 F1 | 	sub	objptr, ##1080
050b8     F2 1E 02 F1 | 	add	local01, objptr
050bc     04 1E 06 F1 | 	add	local01, #4
050c0     0F 1F 02 FB | 	rdlong	local01, local01
050c4     11 1E 0E F2 | 	cmp	local01, #17 wz
050c8     22 00 00 FF 
050cc     D0 E5 85 F1 | 	sub	objptr, ##17872
050d0     15 FA 05 56 |  if_ne	mov	result1, #21
050d4     2C 01 90 5D |  if_ne	jmp	#LR__0470
050d8     25 00 00 FF 
050dc     08 E4 05 F1 | 	add	objptr, ##18952
050e0     F2 1E 02 FB | 	rdlong	local01, objptr
050e4     01 1E 06 F1 | 	add	local01, #1
050e8     F2 1E 62 FC | 	wrlong	local01, objptr
050ec     25 00 00 FF 
050f0     08 E4 85 F1 | 	sub	objptr, ##18952
050f4     D8 1C B0 FD | 	call	#_expr
050f8                 | ' expr()
050f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
050f8     25 00 00 FF 
050fc     08 E4 05 F1 | 	add	objptr, ##18952
05100     F2 1E 02 FB | 	rdlong	local01, objptr
05104     03 1E 66 F0 | 	shl	local01, #3
05108     02 00 00 FF 
0510c     38 E4 85 F1 | 	sub	objptr, ##1080
05110     F2 1E 02 F1 | 	add	local01, objptr
05114     04 1E 06 F1 | 	add	local01, #4
05118     0F 1F 02 FB | 	rdlong	local01, local01
0511c     11 1E 0E F2 | 	cmp	local01, #17 wz
05120     22 00 00 FF 
05124     D0 E5 85 F1 | 	sub	objptr, ##17872
05128     15 FA 05 56 |  if_ne	mov	result1, #21
0512c     D4 00 90 5D |  if_ne	jmp	#LR__0470
05130     25 00 00 FF 
05134     08 E4 05 F1 | 	add	objptr, ##18952
05138     F2 1E 02 FB | 	rdlong	local01, objptr
0513c     01 1E 06 F1 | 	add	local01, #1
05140     F2 1E 62 FC | 	wrlong	local01, objptr
05144     25 00 00 FF 
05148     08 E4 85 F1 | 	sub	objptr, ##18952
0514c     80 1C B0 FD | 	call	#_expr
05150                 | ' expr()
05150                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05150     25 00 00 FF 
05154     08 E4 05 F1 | 	add	objptr, ##18952
05158     F2 1E 02 FB | 	rdlong	local01, objptr
0515c     03 1E 66 F0 | 	shl	local01, #3
05160     02 00 00 FF 
05164     38 E4 85 F1 | 	sub	objptr, ##1080
05168     F2 1E 02 F1 | 	add	local01, objptr
0516c     04 1E 06 F1 | 	add	local01, #4
05170     0F 1F 02 FB | 	rdlong	local01, local01
05174     11 1E 0E F2 | 	cmp	local01, #17 wz
05178     22 00 00 FF 
0517c     D0 E5 85 F1 | 	sub	objptr, ##17872
05180     15 FA 05 56 |  if_ne	mov	result1, #21
05184     7C 00 90 5D |  if_ne	jmp	#LR__0470
05188     25 00 00 FF 
0518c     08 E4 05 F1 | 	add	objptr, ##18952
05190     F2 1E 02 FB | 	rdlong	local01, objptr
05194     01 1E 06 F1 | 	add	local01, #1
05198     F2 1E 62 FC | 	wrlong	local01, objptr
0519c     25 00 00 FF 
051a0     08 E4 85 F1 | 	sub	objptr, ##18952
051a4     28 1C B0 FD | 	call	#_expr
051a8                 | ' expr()
051a8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
051a8     25 00 00 FF 
051ac     08 E4 05 F1 | 	add	objptr, ##18952
051b0     F2 1E 02 FB | 	rdlong	local01, objptr
051b4     03 1E 66 F0 | 	shl	local01, #3
051b8     02 00 00 FF 
051bc     38 E4 85 F1 | 	sub	objptr, ##1080
051c0     F2 1E 02 F1 | 	add	local01, objptr
051c4     04 1E 06 F1 | 	add	local01, #4
051c8     0F 1F 02 FB | 	rdlong	local01, local01
051cc     11 1E 0E F2 | 	cmp	local01, #17 wz
051d0     22 00 00 FF 
051d4     D0 E5 85 F1 | 	sub	objptr, ##17872
051d8     15 FA 05 56 |  if_ne	mov	result1, #21
051dc     24 00 90 5D |  if_ne	jmp	#LR__0470
051e0     25 00 00 FF 
051e4     08 E4 05 F1 | 	add	objptr, ##18952
051e8     F2 1E 02 FB | 	rdlong	local01, objptr
051ec     01 1E 06 F1 | 	add	local01, #1
051f0     F2 1E 62 FC | 	wrlong	local01, objptr
051f4     25 00 00 FF 
051f8     08 E4 85 F1 | 	sub	objptr, ##18952
051fc     D0 1B B0 FD | 	call	#_expr
05200     00 FA 05 F6 | 	mov	result1, #0
05204                 | LR__0470
05204     A7 F0 03 F6 | 	mov	ptra, fp
05208     B2 00 A0 FD | 	call	#popregs_
0520c                 | _compile_fun_5p_ret
0520c     2D 00 64 FD | 	ret
05210                 | 
05210                 | ' 
05210                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
05210                 | _compile_fun_varp
05210     02 4A 05 F6 | 	mov	COUNT_, #2
05214     A8 00 A0 FD | 	call	#pushregs_
05218     00 1E 06 F6 | 	mov	local01, #0
0521c                 | ' i=0
0521c                 | ' if lparts(ct).token<>token_end then
0521c     25 00 00 FF 
05220     08 E4 05 F1 | 	add	objptr, ##18952
05224     F2 20 02 FB | 	rdlong	local02, objptr
05228     03 20 66 F0 | 	shl	local02, #3
0522c     02 00 00 FF 
05230     38 E4 85 F1 | 	sub	objptr, ##1080
05234     F2 20 02 F1 | 	add	local02, objptr
05238     04 20 06 F1 | 	add	local02, #4
0523c     10 21 02 FB | 	rdlong	local02, local02
05240     FE 21 0E F2 | 	cmp	local02, #510 wz
05244     22 00 00 FF 
05248     D0 E5 85 F1 | 	sub	objptr, ##17872
0524c     5C 00 90 AD |  if_e	jmp	#LR__0482
05250                 | '   do
05250                 | LR__0480
05250     7C 1B B0 FD | 	call	#_expr
05254     01 1E 06 F1 | 	add	local01, #1
05258                 | '   expr()
05258                 | '    i+=1
05258                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
05258     25 00 00 FF 
0525c     08 E4 05 F1 | 	add	objptr, ##18952
05260     F2 20 02 FB | 	rdlong	local02, objptr
05264     03 20 66 F0 | 	shl	local02, #3
05268     02 00 00 FF 
0526c     38 E4 85 F1 | 	sub	objptr, ##1080
05270     F2 20 02 F1 | 	add	local02, objptr
05274     04 20 06 F1 | 	add	local02, #4
05278     10 21 02 FB | 	rdlong	local02, local02
0527c     11 20 0E F2 | 	cmp	local02, #17 wz
05280     22 00 00 FF 
05284     D0 E5 85 F1 | 	sub	objptr, ##17872
05288     20 00 90 5D |  if_ne	jmp	#LR__0481
0528c     25 00 00 FF 
05290     08 E4 05 F1 | 	add	objptr, ##18952
05294     F2 20 02 FB | 	rdlong	local02, objptr
05298     01 20 06 F1 | 	add	local02, #1
0529c     F2 20 62 FC | 	wrlong	local02, objptr
052a0     25 00 00 FF 
052a4     08 E4 85 F1 | 	sub	objptr, ##18952
052a8     A4 FF 9F FD | 	jmp	#LR__0480
052ac                 | LR__0481
052ac                 | LR__0482
052ac                 | ' return i
052ac     0F FB 01 F6 | 	mov	result1, local01
052b0     A7 F0 03 F6 | 	mov	ptra, fp
052b4     B2 00 A0 FD | 	call	#popregs_
052b8                 | _compile_fun_varp_ret
052b8     2D 00 64 FD | 	ret
052bc                 | 
052bc                 | ' 
052bc                 | ' 
052bc                 | ' function compile_int_fun_2p() as ulong
052bc                 | _compile_int_fun_2p
052bc     01 4A 05 F6 | 	mov	COUNT_, #1
052c0     A8 00 A0 FD | 	call	#pushregs_
052c4     80 FA BF FD | 	call	#_compile_converttoint
052c8     FD 1E 02 F6 | 	mov	local01, result1
052cc                 | ' err=compile_converttoint() : if err>0 then return err
052cc     01 1E 56 F2 | 	cmps	local01, #1 wc
052d0     0F FB 01 36 |  if_ae	mov	result1, local01
052d4     58 00 90 3D |  if_ae	jmp	#LR__0490
052d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052d8     25 00 00 FF 
052dc     08 E4 05 F1 | 	add	objptr, ##18952
052e0     F2 1E 02 FB | 	rdlong	local01, objptr
052e4     03 1E 66 F0 | 	shl	local01, #3
052e8     02 00 00 FF 
052ec     38 E4 85 F1 | 	sub	objptr, ##1080
052f0     F2 1E 02 F1 | 	add	local01, objptr
052f4     04 1E 06 F1 | 	add	local01, #4
052f8     0F 1F 02 FB | 	rdlong	local01, local01
052fc     11 1E 0E F2 | 	cmp	local01, #17 wz
05300     22 00 00 FF 
05304     D0 E5 85 F1 | 	sub	objptr, ##17872
05308     15 FA 05 56 |  if_ne	mov	result1, #21
0530c     20 00 90 5D |  if_ne	jmp	#LR__0490
05310     25 00 00 FF 
05314     08 E4 05 F1 | 	add	objptr, ##18952
05318     F2 1E 02 FB | 	rdlong	local01, objptr
0531c     01 1E 06 F1 | 	add	local01, #1
05320     F2 1E 62 FC | 	wrlong	local01, objptr
05324     25 00 00 FF 
05328     08 E4 85 F1 | 	sub	objptr, ##18952
0532c     18 FA BF FD | 	call	#_compile_converttoint
05330                 | ' err=compile_converttoint() 
05330                 | ' return err
05330                 | LR__0490
05330     A7 F0 03 F6 | 	mov	ptra, fp
05334     B2 00 A0 FD | 	call	#popregs_
05338                 | _compile_int_fun_2p_ret
05338     2D 00 64 FD | 	ret
0533c                 | 
0533c                 | ' 
0533c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0533c                 | _compile_print
0533c     0B 4A 05 F6 | 	mov	COUNT_, #11
05340     A8 00 A0 FD | 	call	#pushregs_
05344     00 1E 06 F6 | 	mov	local01, #0
05348     1D 22 06 F6 | 	mov	local03, #29
0534c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0534c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0534c     25 00 00 FF 
05350     08 E4 05 F1 | 	add	objptr, ##18952
05354     F2 24 02 FB | 	rdlong	local04, objptr
05358     03 24 66 F0 | 	shl	local04, #3
0535c     02 00 00 FF 
05360     38 E4 85 F1 | 	sub	objptr, ##1080
05364     F2 24 02 F1 | 	add	local04, objptr
05368     04 24 06 F1 | 	add	local04, #4
0536c     12 25 02 FB | 	rdlong	local04, local04
05370     FE 25 0E F2 | 	cmp	local04, #510 wz
05374     22 00 00 FF 
05378     D0 E5 85 F1 | 	sub	objptr, ##17872
0537c     68 01 90 5D |  if_ne	jmp	#LR__0500
05380     20 22 06 F6 | 	mov	local03, #32
05384     0F 27 02 F6 | 	mov	local05, local01
05388     10 29 02 F6 | 	mov	local06, local02
0538c     11 2B 02 F6 | 	mov	local07, local03
05390     38 00 00 FF 
05394     40 E4 05 F1 | 	add	objptr, ##28736
05398     F2 2C 02 FB | 	rdlong	local08, objptr
0539c     16 2F 02 F6 | 	mov	local09, local08
053a0     01 2E 66 F0 | 	shl	local09, #1
053a4     16 2F 02 F1 | 	add	local09, local08
053a8     02 2E 66 F0 | 	shl	local09, #2
053ac     03 00 00 FF 
053b0     00 E4 85 F1 | 	sub	objptr, ##1536
053b4     F2 2E 02 F1 | 	add	local09, objptr
053b8     17 27 62 FC | 	wrlong	local05, local09
053bc     03 00 00 FF 
053c0     00 E4 05 F1 | 	add	objptr, ##1536
053c4     F2 26 02 FB | 	rdlong	local05, objptr
053c8     13 31 02 F6 | 	mov	local10, local05
053cc     01 30 66 F0 | 	shl	local10, #1
053d0     13 31 02 F1 | 	add	local10, local05
053d4     02 30 66 F0 | 	shl	local10, #2
053d8     03 00 00 FF 
053dc     00 E4 85 F1 | 	sub	objptr, ##1536
053e0     F2 30 02 F1 | 	add	local10, objptr
053e4     04 30 06 F1 | 	add	local10, #4
053e8     18 29 62 FC | 	wrlong	local06, local10
053ec     03 00 00 FF 
053f0     00 E4 05 F1 | 	add	objptr, ##1536
053f4     F2 26 02 FB | 	rdlong	local05, objptr
053f8     13 33 02 F6 | 	mov	local11, local05
053fc     01 32 66 F0 | 	shl	local11, #1
05400     13 33 02 F1 | 	add	local11, local05
05404     02 32 66 F0 | 	shl	local11, #2
05408     03 00 00 FF 
0540c     00 E4 85 F1 | 	sub	objptr, ##1536
05410     F2 32 02 F1 | 	add	local11, objptr
05414     08 32 06 F1 | 	add	local11, #8
05418     19 2B 62 FC | 	wrlong	local07, local11
0541c     03 00 00 FF 
05420     00 E4 05 F1 | 	add	objptr, ##1536
05424     F2 26 02 FB | 	rdlong	local05, objptr
05428     01 26 06 F1 | 	add	local05, #1
0542c     F2 26 62 FC | 	wrlong	local05, objptr
05430     44 22 06 F6 | 	mov	local03, #68
05434     0F 27 02 F6 | 	mov	local05, local01
05438     10 29 02 F6 | 	mov	local06, local02
0543c     11 2B 02 F6 | 	mov	local07, local03
05440     F2 2C 02 FB | 	rdlong	local08, objptr
05444     16 2F 02 F6 | 	mov	local09, local08
05448     01 2E 66 F0 | 	shl	local09, #1
0544c     16 2F 02 F1 | 	add	local09, local08
05450     02 2E 66 F0 | 	shl	local09, #2
05454     03 00 00 FF 
05458     00 E4 85 F1 | 	sub	objptr, ##1536
0545c     F2 2E 02 F1 | 	add	local09, objptr
05460     17 27 62 FC | 	wrlong	local05, local09
05464     03 00 00 FF 
05468     00 E4 05 F1 | 	add	objptr, ##1536
0546c     F2 32 02 FB | 	rdlong	local11, objptr
05470     19 31 02 F6 | 	mov	local10, local11
05474     01 30 66 F0 | 	shl	local10, #1
05478     19 31 02 F1 | 	add	local10, local11
0547c     02 30 66 F0 | 	shl	local10, #2
05480     03 00 00 FF 
05484     00 E4 85 F1 | 	sub	objptr, ##1536
05488     F2 30 02 F1 | 	add	local10, objptr
0548c     04 30 06 F1 | 	add	local10, #4
05490     18 29 62 FC | 	wrlong	local06, local10
05494     03 00 00 FF 
05498     00 E4 05 F1 | 	add	objptr, ##1536
0549c     F2 30 02 FB | 	rdlong	local10, objptr
054a0     18 33 02 F6 | 	mov	local11, local10
054a4     01 32 66 F0 | 	shl	local11, #1
054a8     18 33 02 F1 | 	add	local11, local10
054ac     02 32 66 F0 | 	shl	local11, #2
054b0     03 00 00 FF 
054b4     00 E4 85 F1 | 	sub	objptr, ##1536
054b8     F2 32 02 F1 | 	add	local11, objptr
054bc     08 32 06 F1 | 	add	local11, #8
054c0     19 2B 62 FC | 	wrlong	local07, local11
054c4     03 00 00 FF 
054c8     00 E4 05 F1 | 	add	objptr, ##1536
054cc     F2 26 02 FB | 	rdlong	local05, objptr
054d0     01 26 06 F1 | 	add	local05, #1
054d4     F2 26 62 FC | 	wrlong	local05, objptr
054d8     38 00 00 FF 
054dc     40 E4 85 F1 | 	sub	objptr, ##28736
054e0     00 FA 05 F6 | 	mov	result1, #0
054e4     20 05 90 FD | 	jmp	#LR__0507
054e8                 | LR__0500
054e8                 | ' do
054e8                 | LR__0501
054e8     E4 18 B0 FD | 	call	#_expr
054ec                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
054ec                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
054ec     25 00 00 FF 
054f0     08 E4 05 F1 | 	add	objptr, ##18952
054f4     F2 24 02 FB | 	rdlong	local04, objptr
054f8     03 24 66 F0 | 	shl	local04, #3
054fc     02 00 00 FF 
05500     38 E4 85 F1 | 	sub	objptr, ##1080
05504     F2 24 02 F1 | 	add	local04, objptr
05508     04 24 06 F1 | 	add	local04, #4
0550c     12 2D 02 FB | 	rdlong	local08, local04
05510     11 2C 0E F2 | 	cmp	local08, #17 wz
05514     22 00 00 FF 
05518     D0 E5 85 F1 | 	sub	objptr, ##17872
0551c     60 01 90 5D |  if_ne	jmp	#LR__0502
05520     21 22 06 F6 | 	mov	local03, #33
05524     0F 27 02 F6 | 	mov	local05, local01
05528     10 29 02 F6 | 	mov	local06, local02
0552c     11 2B 02 F6 | 	mov	local07, local03
05530     38 00 00 FF 
05534     40 E4 05 F1 | 	add	objptr, ##28736
05538     F2 2C 02 FB | 	rdlong	local08, objptr
0553c     16 2F 02 F6 | 	mov	local09, local08
05540     01 2E 66 F0 | 	shl	local09, #1
05544     16 2F 02 F1 | 	add	local09, local08
05548     02 2E 66 F0 | 	shl	local09, #2
0554c     03 00 00 FF 
05550     00 E4 85 F1 | 	sub	objptr, ##1536
05554     F2 2E 02 F1 | 	add	local09, objptr
05558     17 27 62 FC | 	wrlong	local05, local09
0555c     03 00 00 FF 
05560     00 E4 05 F1 | 	add	objptr, ##1536
05564     F2 32 02 FB | 	rdlong	local11, objptr
05568     19 31 02 F6 | 	mov	local10, local11
0556c     01 30 66 F0 | 	shl	local10, #1
05570     19 31 02 F1 | 	add	local10, local11
05574     02 30 66 F0 | 	shl	local10, #2
05578     03 00 00 FF 
0557c     00 E4 85 F1 | 	sub	objptr, ##1536
05580     F2 30 02 F1 | 	add	local10, objptr
05584     04 30 06 F1 | 	add	local10, #4
05588     18 29 62 FC | 	wrlong	local06, local10
0558c     03 00 00 FF 
05590     00 E4 05 F1 | 	add	objptr, ##1536
05594     F2 26 02 FB | 	rdlong	local05, objptr
05598     13 33 02 F6 | 	mov	local11, local05
0559c     01 32 66 F0 | 	shl	local11, #1
055a0     13 33 02 F1 | 	add	local11, local05
055a4     02 32 66 F0 | 	shl	local11, #2
055a8     03 00 00 FF 
055ac     00 E4 85 F1 | 	sub	objptr, ##1536
055b0     F2 32 02 F1 | 	add	local11, objptr
055b4     08 32 06 F1 | 	add	local11, #8
055b8     19 2B 62 FC | 	wrlong	local07, local11
055bc     03 00 00 FF 
055c0     00 E4 05 F1 | 	add	objptr, ##1536
055c4     F2 26 02 FB | 	rdlong	local05, objptr
055c8     01 26 06 F1 | 	add	local05, #1
055cc     F2 26 62 FC | 	wrlong	local05, objptr
055d0     44 22 06 F6 | 	mov	local03, #68
055d4     0F 27 02 F6 | 	mov	local05, local01
055d8     10 29 02 F6 | 	mov	local06, local02
055dc     11 2B 02 F6 | 	mov	local07, local03
055e0     F2 2C 02 FB | 	rdlong	local08, objptr
055e4     16 2F 02 F6 | 	mov	local09, local08
055e8     01 2E 66 F0 | 	shl	local09, #1
055ec     16 2F 02 F1 | 	add	local09, local08
055f0     02 2E 66 F0 | 	shl	local09, #2
055f4     03 00 00 FF 
055f8     00 E4 85 F1 | 	sub	objptr, ##1536
055fc     F2 2E 02 F1 | 	add	local09, objptr
05600     17 27 62 FC | 	wrlong	local05, local09
05604     03 00 00 FF 
05608     00 E4 05 F1 | 	add	objptr, ##1536
0560c     F2 32 02 FB | 	rdlong	local11, objptr
05610     19 31 02 F6 | 	mov	local10, local11
05614     01 30 66 F0 | 	shl	local10, #1
05618     19 31 02 F1 | 	add	local10, local11
0561c     02 30 66 F0 | 	shl	local10, #2
05620     03 00 00 FF 
05624     00 E4 85 F1 | 	sub	objptr, ##1536
05628     F2 30 02 F1 | 	add	local10, objptr
0562c     04 30 06 F1 | 	add	local10, #4
05630     18 29 62 FC | 	wrlong	local06, local10
05634     03 00 00 FF 
05638     00 E4 05 F1 | 	add	objptr, ##1536
0563c     F2 30 02 FB | 	rdlong	local10, objptr
05640     18 33 02 F6 | 	mov	local11, local10
05644     01 32 66 F0 | 	shl	local11, #1
05648     18 33 02 F1 | 	add	local11, local10
0564c     02 32 66 F0 | 	shl	local11, #2
05650     03 00 00 FF 
05654     00 E4 85 F1 | 	sub	objptr, ##1536
05658     F2 32 02 F1 | 	add	local11, objptr
0565c     08 32 06 F1 | 	add	local11, #8
05660     19 2B 62 FC | 	wrlong	local07, local11
05664     03 00 00 FF 
05668     00 E4 05 F1 | 	add	objptr, ##1536
0566c     F2 26 02 FB | 	rdlong	local05, objptr
05670     01 26 06 F1 | 	add	local05, #1
05674     F2 26 62 FC | 	wrlong	local05, objptr
05678     38 00 00 FF 
0567c     40 E4 85 F1 | 	sub	objptr, ##28736
05680                 | LR__0502
05680                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05680     25 00 00 FF 
05684     08 E4 05 F1 | 	add	objptr, ##18952
05688     F2 24 02 FB | 	rdlong	local04, objptr
0568c     03 24 66 F0 | 	shl	local04, #3
05690     02 00 00 FF 
05694     38 E4 85 F1 | 	sub	objptr, ##1080
05698     F2 24 02 F1 | 	add	local04, objptr
0569c     04 24 06 F1 | 	add	local04, #4
056a0     12 2D 02 FB | 	rdlong	local08, local04
056a4     12 2C 0E F2 | 	cmp	local08, #18 wz
056a8     22 00 00 FF 
056ac     D0 E5 85 F1 | 	sub	objptr, ##17872
056b0     60 01 90 5D |  if_ne	jmp	#LR__0503
056b4     22 22 06 F6 | 	mov	local03, #34
056b8     0F 27 02 F6 | 	mov	local05, local01
056bc     10 29 02 F6 | 	mov	local06, local02
056c0     11 2B 02 F6 | 	mov	local07, local03
056c4     38 00 00 FF 
056c8     40 E4 05 F1 | 	add	objptr, ##28736
056cc     F2 2C 02 FB | 	rdlong	local08, objptr
056d0     16 2F 02 F6 | 	mov	local09, local08
056d4     01 2E 66 F0 | 	shl	local09, #1
056d8     16 2F 02 F1 | 	add	local09, local08
056dc     02 2E 66 F0 | 	shl	local09, #2
056e0     03 00 00 FF 
056e4     00 E4 85 F1 | 	sub	objptr, ##1536
056e8     F2 2E 02 F1 | 	add	local09, objptr
056ec     17 27 62 FC | 	wrlong	local05, local09
056f0     03 00 00 FF 
056f4     00 E4 05 F1 | 	add	objptr, ##1536
056f8     F2 32 02 FB | 	rdlong	local11, objptr
056fc     19 31 02 F6 | 	mov	local10, local11
05700     01 30 66 F0 | 	shl	local10, #1
05704     19 31 02 F1 | 	add	local10, local11
05708     02 30 66 F0 | 	shl	local10, #2
0570c     03 00 00 FF 
05710     00 E4 85 F1 | 	sub	objptr, ##1536
05714     F2 30 02 F1 | 	add	local10, objptr
05718     04 30 06 F1 | 	add	local10, #4
0571c     18 29 62 FC | 	wrlong	local06, local10
05720     03 00 00 FF 
05724     00 E4 05 F1 | 	add	objptr, ##1536
05728     F2 26 02 FB | 	rdlong	local05, objptr
0572c     13 33 02 F6 | 	mov	local11, local05
05730     01 32 66 F0 | 	shl	local11, #1
05734     13 33 02 F1 | 	add	local11, local05
05738     02 32 66 F0 | 	shl	local11, #2
0573c     03 00 00 FF 
05740     00 E4 85 F1 | 	sub	objptr, ##1536
05744     F2 32 02 F1 | 	add	local11, objptr
05748     08 32 06 F1 | 	add	local11, #8
0574c     19 2B 62 FC | 	wrlong	local07, local11
05750     03 00 00 FF 
05754     00 E4 05 F1 | 	add	objptr, ##1536
05758     F2 26 02 FB | 	rdlong	local05, objptr
0575c     01 26 06 F1 | 	add	local05, #1
05760     F2 26 62 FC | 	wrlong	local05, objptr
05764     44 22 06 F6 | 	mov	local03, #68
05768     0F 27 02 F6 | 	mov	local05, local01
0576c     10 29 02 F6 | 	mov	local06, local02
05770     11 2B 02 F6 | 	mov	local07, local03
05774     F2 2C 02 FB | 	rdlong	local08, objptr
05778     16 2F 02 F6 | 	mov	local09, local08
0577c     01 2E 66 F0 | 	shl	local09, #1
05780     16 2F 02 F1 | 	add	local09, local08
05784     02 2E 66 F0 | 	shl	local09, #2
05788     03 00 00 FF 
0578c     00 E4 85 F1 | 	sub	objptr, ##1536
05790     F2 2E 02 F1 | 	add	local09, objptr
05794     17 27 62 FC | 	wrlong	local05, local09
05798     03 00 00 FF 
0579c     00 E4 05 F1 | 	add	objptr, ##1536
057a0     F2 32 02 FB | 	rdlong	local11, objptr
057a4     19 31 02 F6 | 	mov	local10, local11
057a8     01 30 66 F0 | 	shl	local10, #1
057ac     19 31 02 F1 | 	add	local10, local11
057b0     02 30 66 F0 | 	shl	local10, #2
057b4     03 00 00 FF 
057b8     00 E4 85 F1 | 	sub	objptr, ##1536
057bc     F2 30 02 F1 | 	add	local10, objptr
057c0     04 30 06 F1 | 	add	local10, #4
057c4     18 29 62 FC | 	wrlong	local06, local10
057c8     03 00 00 FF 
057cc     00 E4 05 F1 | 	add	objptr, ##1536
057d0     F2 30 02 FB | 	rdlong	local10, objptr
057d4     18 33 02 F6 | 	mov	local11, local10
057d8     01 32 66 F0 | 	shl	local11, #1
057dc     18 33 02 F1 | 	add	local11, local10
057e0     02 32 66 F0 | 	shl	local11, #2
057e4     03 00 00 FF 
057e8     00 E4 85 F1 | 	sub	objptr, ##1536
057ec     F2 32 02 F1 | 	add	local11, objptr
057f0     08 32 06 F1 | 	add	local11, #8
057f4     19 2B 62 FC | 	wrlong	local07, local11
057f8     03 00 00 FF 
057fc     00 E4 05 F1 | 	add	objptr, ##1536
05800     F2 26 02 FB | 	rdlong	local05, objptr
05804     01 26 06 F1 | 	add	local05, #1
05808     F2 26 62 FC | 	wrlong	local05, objptr
0580c     38 00 00 FF 
05810     40 E4 85 F1 | 	sub	objptr, ##28736
05814                 | LR__0503
05814                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05814     25 00 00 FF 
05818     08 E4 05 F1 | 	add	objptr, ##18952
0581c     F2 24 02 FB | 	rdlong	local04, objptr
05820     03 24 66 F0 | 	shl	local04, #3
05824     02 00 00 FF 
05828     38 E4 85 F1 | 	sub	objptr, ##1080
0582c     F2 24 02 F1 | 	add	local04, objptr
05830     04 24 06 F1 | 	add	local04, #4
05834     12 2D 02 FB | 	rdlong	local08, local04
05838     FE 2D 0E F2 | 	cmp	local08, #510 wz
0583c     22 00 00 FF 
05840     D0 E5 85 F1 | 	sub	objptr, ##17872
05844     B8 00 90 5D |  if_ne	jmp	#LR__0504
05848     44 22 06 F6 | 	mov	local03, #68
0584c     0F 27 02 F6 | 	mov	local05, local01
05850     10 29 02 F6 | 	mov	local06, local02
05854     11 2B 02 F6 | 	mov	local07, local03
05858     38 00 00 FF 
0585c     40 E4 05 F1 | 	add	objptr, ##28736
05860     F2 2C 02 FB | 	rdlong	local08, objptr
05864     16 2F 02 F6 | 	mov	local09, local08
05868     01 2E 66 F0 | 	shl	local09, #1
0586c     16 2F 02 F1 | 	add	local09, local08
05870     02 2E 66 F0 | 	shl	local09, #2
05874     03 00 00 FF 
05878     00 E4 85 F1 | 	sub	objptr, ##1536
0587c     F2 2E 02 F1 | 	add	local09, objptr
05880     17 27 62 FC | 	wrlong	local05, local09
05884     03 00 00 FF 
05888     00 E4 05 F1 | 	add	objptr, ##1536
0588c     F2 32 02 FB | 	rdlong	local11, objptr
05890     19 31 02 F6 | 	mov	local10, local11
05894     01 30 66 F0 | 	shl	local10, #1
05898     19 31 02 F1 | 	add	local10, local11
0589c     02 30 66 F0 | 	shl	local10, #2
058a0     03 00 00 FF 
058a4     00 E4 85 F1 | 	sub	objptr, ##1536
058a8     F2 30 02 F1 | 	add	local10, objptr
058ac     04 30 06 F1 | 	add	local10, #4
058b0     18 29 62 FC | 	wrlong	local06, local10
058b4     03 00 00 FF 
058b8     00 E4 05 F1 | 	add	objptr, ##1536
058bc     F2 30 02 FB | 	rdlong	local10, objptr
058c0     18 33 02 F6 | 	mov	local11, local10
058c4     01 32 66 F0 | 	shl	local11, #1
058c8     18 33 02 F1 | 	add	local11, local10
058cc     02 32 66 F0 | 	shl	local11, #2
058d0     03 00 00 FF 
058d4     00 E4 85 F1 | 	sub	objptr, ##1536
058d8     F2 32 02 F1 | 	add	local11, objptr
058dc     08 32 06 F1 | 	add	local11, #8
058e0     19 2B 62 FC | 	wrlong	local07, local11
058e4     03 00 00 FF 
058e8     00 E4 05 F1 | 	add	objptr, ##1536
058ec     F2 26 02 FB | 	rdlong	local05, objptr
058f0     01 26 06 F1 | 	add	local05, #1
058f4     F2 26 62 FC | 	wrlong	local05, objptr
058f8     38 00 00 FF 
058fc     40 E4 85 F1 | 	sub	objptr, ##28736
05900                 | LR__0504
05900                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05900     25 00 00 FF 
05904     08 E4 05 F1 | 	add	objptr, ##18952
05908     F2 24 02 FB | 	rdlong	local04, objptr
0590c     03 24 66 F0 | 	shl	local04, #3
05910     02 00 00 FF 
05914     38 E4 85 F1 | 	sub	objptr, ##1080
05918     F2 24 02 F1 | 	add	local04, objptr
0591c     04 24 06 F1 | 	add	local04, #4
05920     12 2D 02 FB | 	rdlong	local08, local04
05924     11 2C 0E F2 | 	cmp	local08, #17 wz
05928     22 00 00 FF 
0592c     D0 E5 85 F1 | 	sub	objptr, ##17872
05930     6C 00 90 AD |  if_e	jmp	#LR__0505
05934     25 00 00 FF 
05938     08 E4 05 F1 | 	add	objptr, ##18952
0593c     F2 2C 02 FB | 	rdlong	local08, objptr
05940     03 2C 66 F0 | 	shl	local08, #3
05944     02 00 00 FF 
05948     38 E4 85 F1 | 	sub	objptr, ##1080
0594c     F2 2C 02 F1 | 	add	local08, objptr
05950     04 2C 06 F1 | 	add	local08, #4
05954     16 2D 02 FB | 	rdlong	local08, local08
05958     12 2C 0E F2 | 	cmp	local08, #18 wz
0595c     22 00 00 FF 
05960     D0 E5 85 F1 | 	sub	objptr, ##17872
05964     38 00 90 AD |  if_e	jmp	#LR__0505
05968     25 00 00 FF 
0596c     08 E4 05 F1 | 	add	objptr, ##18952
05970     F2 32 02 FB | 	rdlong	local11, objptr
05974     03 32 66 F0 | 	shl	local11, #3
05978     02 00 00 FF 
0597c     38 E4 85 F1 | 	sub	objptr, ##1080
05980     F2 32 02 F1 | 	add	local11, objptr
05984     04 32 06 F1 | 	add	local11, #4
05988     19 33 02 FB | 	rdlong	local11, local11
0598c     FE 33 0E F2 | 	cmp	local11, #510 wz
05990     22 00 00 FF 
05994     D0 E5 85 F1 | 	sub	objptr, ##17872
05998     16 FA 05 56 |  if_ne	mov	result1, #22
0599c     68 00 90 5D |  if_ne	jmp	#LR__0507
059a0                 | LR__0505
059a0     25 00 00 FF 
059a4     08 E4 05 F1 | 	add	objptr, ##18952
059a8     F2 24 02 FB | 	rdlong	local04, objptr
059ac     01 24 06 F1 | 	add	local04, #1
059b0     F2 24 62 FC | 	wrlong	local04, objptr
059b4     03 24 66 F0 | 	shl	local04, #3
059b8     02 00 00 FF 
059bc     38 E4 85 F1 | 	sub	objptr, ##1080
059c0     F2 24 02 F1 | 	add	local04, objptr
059c4     04 24 06 F1 | 	add	local04, #4
059c8     12 2D 02 FB | 	rdlong	local08, local04
059cc     FE 2D 0E F2 | 	cmp	local08, #510 wz
059d0     22 00 00 FF 
059d4     D0 E5 85 F1 | 	sub	objptr, ##17872
059d8     28 00 90 AD |  if_e	jmp	#LR__0506
059dc     25 00 00 FF 
059e0     08 E4 05 F1 | 	add	objptr, ##18952
059e4     F2 32 02 FB | 	rdlong	local11, objptr
059e8     0E 00 00 FF 
059ec     1C E4 05 F1 | 	add	objptr, ##7196
059f0     F2 30 02 FB | 	rdlong	local10, objptr
059f4     33 00 00 FF 
059f8     24 E4 85 F1 | 	sub	objptr, ##26148
059fc     18 33 52 F2 | 	cmps	local11, local10 wc
05a00     E4 FA 9F CD |  if_b	jmp	#LR__0501
05a04                 | LR__0506
05a04                 | ' return 0
05a04     00 FA 05 F6 | 	mov	result1, #0
05a08                 | LR__0507
05a08     A7 F0 03 F6 | 	mov	ptra, fp
05a0c     B2 00 A0 FD | 	call	#popregs_
05a10                 | _compile_print_ret
05a10     2D 00 64 FD | 	ret
05a14                 | 
05a14                 | ' 
05a14                 | ' function compile_if() as ulong  
05a14                 | _compile_if
05a14     05 4A 05 F6 | 	mov	COUNT_, #5
05a18     A8 00 A0 FD | 	call	#pushregs_
05a1c                 | _compile_if_enter
05a1c     28 F3 BF FD | 	call	#_compile_converttoint
05a20                 | ' return err
05a20     25 00 00 FF 
05a24     08 E4 05 F1 | 	add	objptr, ##18952
05a28     F2 FA 01 FB | 	rdlong	result1, objptr
05a2c     01 FA 05 F1 | 	add	result1, #1
05a30     F2 FA 61 FC | 	wrlong	result1, objptr
05a34     58 22 06 F6 | 	mov	local03, #88
05a38     0F 25 02 F6 | 	mov	local04, local01
05a3c     10 27 02 F6 | 	mov	local05, local02
05a40     11 1F 02 F6 | 	mov	local01, local03
05a44     13 00 00 FF 
05a48     38 E4 05 F1 | 	add	objptr, ##9784
05a4c     F2 12 02 FB | 	rdlong	arg01, objptr
05a50     09 FB 01 F6 | 	mov	result1, arg01
05a54     01 FA 65 F0 | 	shl	result1, #1
05a58     09 FB 01 F1 | 	add	result1, arg01
05a5c     02 FA 65 F0 | 	shl	result1, #2
05a60     03 00 00 FF 
05a64     00 E4 85 F1 | 	sub	objptr, ##1536
05a68     F2 FA 01 F1 | 	add	result1, objptr
05a6c     FD 24 62 FC | 	wrlong	local04, result1
05a70     03 00 00 FF 
05a74     00 E4 05 F1 | 	add	objptr, ##1536
05a78     F2 12 02 FB | 	rdlong	arg01, objptr
05a7c     09 25 02 F6 | 	mov	local04, arg01
05a80     01 24 66 F0 | 	shl	local04, #1
05a84     09 25 02 F1 | 	add	local04, arg01
05a88     02 24 66 F0 | 	shl	local04, #2
05a8c     03 00 00 FF 
05a90     00 E4 85 F1 | 	sub	objptr, ##1536
05a94     F2 24 02 F1 | 	add	local04, objptr
05a98     04 24 06 F1 | 	add	local04, #4
05a9c     12 27 62 FC | 	wrlong	local05, local04
05aa0     03 00 00 FF 
05aa4     00 E4 05 F1 | 	add	objptr, ##1536
05aa8     F2 24 02 FB | 	rdlong	local04, objptr
05aac     12 27 02 F6 | 	mov	local05, local04
05ab0     01 26 66 F0 | 	shl	local05, #1
05ab4     12 27 02 F1 | 	add	local05, local04
05ab8     02 26 66 F0 | 	shl	local05, #2
05abc     03 00 00 FF 
05ac0     00 E4 85 F1 | 	sub	objptr, ##1536
05ac4     F2 26 02 F1 | 	add	local05, objptr
05ac8     08 26 06 F1 | 	add	local05, #8
05acc     13 1F 62 FC | 	wrlong	local01, local05
05ad0     03 00 00 FF 
05ad4     00 E4 05 F1 | 	add	objptr, ##1536
05ad8     F2 24 02 FB | 	rdlong	local04, objptr
05adc     01 24 06 F1 | 	add	local04, #1
05ae0     F2 24 62 FC | 	wrlong	local04, objptr
05ae4                 | ' 
05ae4                 | ' 'print "In compile_if"
05ae4                 | ' compile_int_fun_1p()
05ae4                 | ' cmd=lparts(ct).token : ct+=1
05ae4                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05ae4                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05ae4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05ae4     13 00 00 FF 
05ae8     38 E4 85 F1 | 	sub	objptr, ##9784
05aec     F2 26 02 FB | 	rdlong	local05, objptr
05af0     01 26 06 F1 | 	add	local05, #1
05af4     03 26 66 F0 | 	shl	local05, #3
05af8     02 00 00 FF 
05afc     38 E4 85 F1 | 	sub	objptr, ##1080
05b00     F2 26 02 F1 | 	add	local05, objptr
05b04     13 13 02 FB | 	rdlong	arg01, local05
05b08     22 00 00 FF 
05b0c     D0 E5 85 F1 | 	sub	objptr, ##17872
05b10                 | ' 
05b10                 | ' select case s
05b10     17 01 00 FF 
05b14     4A 15 06 F6 | 	mov	arg02, ##@LR__4114
05b18     04 E0 B0 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     1B FA 05 A6 |  if_e	mov	result1, #27
05b24     00 FA 05 56 |  if_ne	mov	result1, #0
05b28     00 FA 0D F2 | 	cmp	result1, #0 wz
05b2c     0C 00 90 AD |  if_e	jmp	#LR__0510
05b30     05 12 06 F6 | 	mov	arg01, #5
05b34     20 EC BF FD | 	call	#_compile_immediate_assign
05b38     08 00 90 FD | 	jmp	#LR__0511
05b3c                 | LR__0510
05b3c     05 12 06 F6 | 	mov	arg01, #5
05b40     E8 E7 BF FD | 	call	#_compile_immediate
05b44                 | LR__0511
05b44                 | ' 
05b44                 | ' 
05b44                 | ' return 0
05b44     00 FA 05 F6 | 	mov	result1, #0
05b48     A7 F0 03 F6 | 	mov	ptra, fp
05b4c     B2 00 A0 FD | 	call	#popregs_
05b50                 | _compile_if_ret
05b50     2D 00 64 FD | 	ret
05b54                 | 
05b54                 | ' 
05b54                 | ' function compile_else() as ulong  
05b54                 | _compile_else
05b54     05 4A 05 F6 | 	mov	COUNT_, #5
05b58     A8 00 A0 FD | 	call	#pushregs_
05b5c                 | _compile_else_enter
05b5c     5A 22 06 F6 | 	mov	local03, #90
05b60     0F 25 02 F6 | 	mov	local04, local01
05b64     10 27 02 F6 | 	mov	local05, local02
05b68     11 1F 02 F6 | 	mov	local01, local03
05b6c     38 00 00 FF 
05b70     40 E4 05 F1 | 	add	objptr, ##28736
05b74     F2 12 02 FB | 	rdlong	arg01, objptr
05b78     09 FB 01 F6 | 	mov	result1, arg01
05b7c     01 FA 65 F0 | 	shl	result1, #1
05b80     09 FB 01 F1 | 	add	result1, arg01
05b84     02 FA 65 F0 | 	shl	result1, #2
05b88     03 00 00 FF 
05b8c     00 E4 85 F1 | 	sub	objptr, ##1536
05b90     F2 FA 01 F1 | 	add	result1, objptr
05b94     FD 24 62 FC | 	wrlong	local04, result1
05b98     03 00 00 FF 
05b9c     00 E4 05 F1 | 	add	objptr, ##1536
05ba0     F2 FA 01 FB | 	rdlong	result1, objptr
05ba4     FD 24 02 F6 | 	mov	local04, result1
05ba8     01 24 66 F0 | 	shl	local04, #1
05bac     FD 24 02 F1 | 	add	local04, result1
05bb0     02 24 66 F0 | 	shl	local04, #2
05bb4     03 00 00 FF 
05bb8     00 E4 85 F1 | 	sub	objptr, ##1536
05bbc     F2 24 02 F1 | 	add	local04, objptr
05bc0     04 24 06 F1 | 	add	local04, #4
05bc4     12 27 62 FC | 	wrlong	local05, local04
05bc8     03 00 00 FF 
05bcc     00 E4 05 F1 | 	add	objptr, ##1536
05bd0     F2 24 02 FB | 	rdlong	local04, objptr
05bd4     12 27 02 F6 | 	mov	local05, local04
05bd8     01 26 66 F0 | 	shl	local05, #1
05bdc     12 27 02 F1 | 	add	local05, local04
05be0     02 26 66 F0 | 	shl	local05, #2
05be4     03 00 00 FF 
05be8     00 E4 85 F1 | 	sub	objptr, ##1536
05bec     F2 26 02 F1 | 	add	local05, objptr
05bf0     08 26 06 F1 | 	add	local05, #8
05bf4     13 1F 62 FC | 	wrlong	local01, local05
05bf8     03 00 00 FF 
05bfc     00 E4 05 F1 | 	add	objptr, ##1536
05c00     F2 24 02 FB | 	rdlong	local04, objptr
05c04     01 24 06 F1 | 	add	local04, #1
05c08     F2 24 62 FC | 	wrlong	local04, objptr
05c0c                 | ' 
05c0c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
05c0c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05c0c     13 00 00 FF 
05c10     38 E4 85 F1 | 	sub	objptr, ##9784
05c14     F2 26 02 FB | 	rdlong	local05, objptr
05c18     01 26 06 F1 | 	add	local05, #1
05c1c     03 26 66 F0 | 	shl	local05, #3
05c20     02 00 00 FF 
05c24     38 E4 85 F1 | 	sub	objptr, ##1080
05c28     F2 26 02 F1 | 	add	local05, objptr
05c2c     13 13 02 FB | 	rdlong	arg01, local05
05c30     22 00 00 FF 
05c34     D0 E5 85 F1 | 	sub	objptr, ##17872
05c38                 | ' 
05c38                 | ' select case s
05c38     17 01 00 FF 
05c3c     4A 15 06 F6 | 	mov	arg02, ##@LR__4114
05c40     DC DE B0 FD | 	call	#__system___string_cmp
05c44     00 FA 0D F2 | 	cmp	result1, #0 wz
05c48     1B FA 05 A6 |  if_e	mov	result1, #27
05c4c     00 FA 05 56 |  if_ne	mov	result1, #0
05c50     00 FA 0D F2 | 	cmp	result1, #0 wz
05c54     0C 00 90 AD |  if_e	jmp	#LR__0520
05c58     05 12 06 F6 | 	mov	arg01, #5
05c5c     F8 EA BF FD | 	call	#_compile_immediate_assign
05c60     08 00 90 FD | 	jmp	#LR__0521
05c64                 | LR__0520
05c64     05 12 06 F6 | 	mov	arg01, #5
05c68     C0 E6 BF FD | 	call	#_compile_immediate
05c6c                 | LR__0521
05c6c                 | ' 
05c6c                 | ' 
05c6c                 | ' return 0
05c6c     00 FA 05 F6 | 	mov	result1, #0
05c70     A7 F0 03 F6 | 	mov	ptra, fp
05c74     B2 00 A0 FD | 	call	#popregs_
05c78                 | _compile_else_ret
05c78     2D 00 64 FD | 	ret
05c7c                 | 
05c7c                 | ' 
05c7c                 | ' 
05c7c                 | ' function compile_dim() as ulong  
05c7c                 | _compile_dim
05c7c     0C 4A 05 F6 | 	mov	COUNT_, #12
05c80     A8 00 A0 FD | 	call	#pushregs_
05c84     01 1E 06 F6 | 	mov	local01, #1
05c88     01 20 06 F6 | 	mov	local02, #1
05c8c     01 22 06 F6 | 	mov	local03, #1
05c90                 | ' 
05c90                 | ' dims(0)=1: dims(1)=1: dims(2)=1
05c90                 | ' 
05c90                 | ' if isname(lparts(ct).part$) then 
05c90     25 00 00 FF 
05c94     08 E4 05 F1 | 	add	objptr, ##18952
05c98     F2 18 02 FB | 	rdlong	arg04, objptr
05c9c     03 18 66 F0 | 	shl	arg04, #3
05ca0     02 00 00 FF 
05ca4     38 E4 85 F1 | 	sub	objptr, ##1080
05ca8     F2 18 02 F1 | 	add	arg04, objptr
05cac     0C 13 02 FB | 	rdlong	arg01, arg04
05cb0     22 00 00 FF 
05cb4     D0 E5 85 F1 | 	sub	objptr, ##17872
05cb8     54 D6 BF FD | 	call	#_isname
05cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc0     68 03 90 AD |  if_e	jmp	#LR__0539
05cc4     25 00 00 FF 
05cc8     08 E4 05 F1 | 	add	objptr, ##18952
05ccc     F2 18 02 FB | 	rdlong	arg04, objptr
05cd0     03 18 66 F0 | 	shl	arg04, #3
05cd4     02 00 00 FF 
05cd8     38 E4 85 F1 | 	sub	objptr, ##1080
05cdc     F2 18 02 F1 | 	add	arg04, objptr
05ce0     0C 25 02 FB | 	rdlong	local04, arg04
05ce4     01 26 66 F6 | 	neg	local05, #1
05ce8                 | '   varname2$=lparts(ct).part$ 
05ce8                 | '   j=-1
05ce8                 | '   if varnum>0 then
05ce8     04 E4 85 F1 | 	sub	objptr, #4
05cec     F2 28 02 FB | 	rdlong	local06, objptr
05cf0     22 00 00 FF 
05cf4     CC E5 85 F1 | 	sub	objptr, ##17868
05cf8     01 28 56 F2 | 	cmps	local06, #1 wc
05cfc     A8 00 90 CD |  if_b	jmp	#LR__0532
05d00                 | '     print varnum
05d00     00 12 06 F6 | 	mov	arg01, #0
05d04     D4 32 B1 FD | 	call	#__system___getiolock_0306
05d08     FD 12 02 F6 | 	mov	arg01, result1
05d0c     E8 DD B0 FD | 	call	#__system___lockmem
05d10     22 00 00 FF 
05d14     CC E5 05 F1 | 	add	objptr, ##17868
05d18     F2 14 02 FB | 	rdlong	arg02, objptr
05d1c     22 00 00 FF 
05d20     CC E5 85 F1 | 	sub	objptr, ##17868
05d24     00 12 06 F6 | 	mov	arg01, #0
05d28     00 16 06 F6 | 	mov	arg03, #0
05d2c     0A 18 06 F6 | 	mov	arg04, #10
05d30     14 EA B0 FD | 	call	#__system___basic_print_integer
05d34     00 12 06 F6 | 	mov	arg01, #0
05d38     0A 14 06 F6 | 	mov	arg02, #10
05d3c     00 16 06 F6 | 	mov	arg03, #0
05d40     68 E9 B0 FD | 	call	#__system___basic_print_char
05d44     00 12 06 F6 | 	mov	arg01, #0
05d48     90 32 B1 FD | 	call	#__system___getiolock_0306
05d4c     FD 00 68 FC | 	wrlong	#0, result1
05d50                 | '     for i=0 to varnum-1
05d50     00 2A 06 F6 | 	mov	local07, #0
05d54     22 00 00 FF 
05d58     CC E5 05 F1 | 	add	objptr, ##17868
05d5c     F2 2C 02 FB | 	rdlong	local08, objptr
05d60     22 00 00 FF 
05d64     CC E5 85 F1 | 	sub	objptr, ##17868
05d68                 | LR__0530
05d68     16 2B 52 F2 | 	cmps	local07, local08 wc
05d6c     38 00 90 3D |  if_ae	jmp	#LR__0531
05d70                 | '       if variables(i).name=varname2$ then j=i : exit
05d70     15 19 02 F6 | 	mov	arg04, local07
05d74     04 18 66 F0 | 	shl	arg04, #4
05d78     02 00 00 FF 
05d7c     CC E5 05 F1 | 	add	objptr, ##1484
05d80     F2 18 02 F1 | 	add	arg04, objptr
05d84     0C 13 02 FB | 	rdlong	arg01, arg04
05d88     12 15 02 F6 | 	mov	arg02, local04
05d8c     02 00 00 FF 
05d90     CC E5 85 F1 | 	sub	objptr, ##1484
05d94     88 DD B0 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     15 27 02 A6 |  if_e	mov	local05, local07
05da0     01 2A 06 51 |  if_ne	add	local07, #1
05da4     C0 FF 9F 5D |  if_ne	jmp	#LR__0530
05da8                 | LR__0531
05da8                 | LR__0532
05da8                 | '   if j<>-1 then printerror (42) : return 42
05da8     FF FF 7F FF 
05dac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05db0     10 00 90 AD |  if_e	jmp	#LR__0533
05db4     2A 12 06 F6 | 	mov	arg01, #42
05db8     D0 A7 B0 FD | 	call	#_printerror
05dbc     2A FA 05 F6 | 	mov	result1, #42
05dc0     04 03 90 FD | 	jmp	#LR__0541
05dc4                 | LR__0533
05dc4                 | '   if lparts(ct+1).part$ <>"(" then printerror(43) : return 43
05dc4     25 00 00 FF 
05dc8     08 E4 05 F1 | 	add	objptr, ##18952
05dcc     F2 18 02 FB | 	rdlong	arg04, objptr
05dd0     01 18 06 F1 | 	add	arg04, #1
05dd4     03 18 66 F0 | 	shl	arg04, #3
05dd8     02 00 00 FF 
05ddc     38 E4 85 F1 | 	sub	objptr, ##1080
05de0     F2 18 02 F1 | 	add	arg04, objptr
05de4     0C 13 02 FB | 	rdlong	arg01, arg04
05de8     18 01 00 FF 
05dec     D1 14 06 F6 | 	mov	arg02, ##@LR__4214
05df0     22 00 00 FF 
05df4     D0 E5 85 F1 | 	sub	objptr, ##17872
05df8     24 DD B0 FD | 	call	#__system___string_cmp
05dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
05e00     10 00 90 AD |  if_e	jmp	#LR__0534
05e04     2B 12 06 F6 | 	mov	arg01, #43
05e08     80 A7 B0 FD | 	call	#_printerror
05e0c     2B FA 05 F6 | 	mov	result1, #43
05e10     B4 02 90 FD | 	jmp	#LR__0541
05e14                 | LR__0534
05e14     25 00 00 FF 
05e18     08 E4 05 F1 | 	add	objptr, ##18952
05e1c     F2 2E 02 FB | 	rdlong	local09, objptr
05e20     25 00 00 FF 
05e24     08 E4 85 F1 | 	sub	objptr, ##18952
05e28     02 2E 06 F1 | 	add	local09, #2
05e2c     00 30 06 F6 | 	mov	local10, #0
05e30                 | '   l=ct+2 : m=0 : do
05e30                 | LR__0535
05e30                 | '     print lparts(l).part$, isdec(lparts(l).part$)
05e30     00 12 06 F6 | 	mov	arg01, #0
05e34     A4 31 B1 FD | 	call	#__system___getiolock_0306
05e38     FD 12 02 F6 | 	mov	arg01, result1
05e3c     B8 DC B0 FD | 	call	#__system___lockmem
05e40     17 19 02 F6 | 	mov	arg04, local09
05e44     03 18 66 F0 | 	shl	arg04, #3
05e48     22 00 00 FF 
05e4c     D0 E5 05 F1 | 	add	objptr, ##17872
05e50     F2 18 02 F1 | 	add	arg04, objptr
05e54     0C 15 02 FB | 	rdlong	arg02, arg04
05e58     00 12 06 F6 | 	mov	arg01, #0
05e5c     00 16 06 F6 | 	mov	arg03, #0
05e60     22 00 00 FF 
05e64     D0 E5 85 F1 | 	sub	objptr, ##17872
05e68     98 E8 B0 FD | 	call	#__system___basic_print_string
05e6c     00 12 06 F6 | 	mov	arg01, #0
05e70     09 14 06 F6 | 	mov	arg02, #9
05e74     00 16 06 F6 | 	mov	arg03, #0
05e78     30 E8 B0 FD | 	call	#__system___basic_print_char
05e7c     00 2C 06 F6 | 	mov	local08, #0
05e80     17 19 02 F6 | 	mov	arg04, local09
05e84     03 18 66 F0 | 	shl	arg04, #3
05e88     22 00 00 FF 
05e8c     D0 E5 05 F1 | 	add	objptr, ##17872
05e90     F2 18 02 F1 | 	add	arg04, objptr
05e94     0C 13 02 FB | 	rdlong	arg01, arg04
05e98     22 00 00 FF 
05e9c     D0 E5 85 F1 | 	sub	objptr, ##17872
05ea0     10 DB BF FD | 	call	#_isdec
05ea4     FD 14 02 F6 | 	mov	arg02, result1
05ea8     16 13 02 F6 | 	mov	arg01, local08
05eac     00 16 06 F6 | 	mov	arg03, #0
05eb0     0A 18 06 F6 | 	mov	arg04, #10
05eb4     90 E8 B0 FD | 	call	#__system___basic_print_integer
05eb8     00 12 06 F6 | 	mov	arg01, #0
05ebc     0A 14 06 F6 | 	mov	arg02, #10
05ec0     00 16 06 F6 | 	mov	arg03, #0
05ec4     E4 E7 B0 FD | 	call	#__system___basic_print_char
05ec8     00 12 06 F6 | 	mov	arg01, #0
05ecc     0C 31 B1 FD | 	call	#__system___getiolock_0306
05ed0     FD 00 68 FC | 	wrlong	#0, result1
05ed4                 | '     if isdec(lparts(l).part$) then 
05ed4     17 19 02 F6 | 	mov	arg04, local09
05ed8     03 18 66 F0 | 	shl	arg04, #3
05edc     22 00 00 FF 
05ee0     D0 E5 05 F1 | 	add	objptr, ##17872
05ee4     F2 18 02 F1 | 	add	arg04, objptr
05ee8     0C 13 02 FB | 	rdlong	arg01, arg04
05eec     22 00 00 FF 
05ef0     D0 E5 85 F1 | 	sub	objptr, ##17872
05ef4     BC DA BF FD | 	call	#_isdec
05ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
05efc     44 00 90 AD |  if_e	jmp	#LR__0536
05f00     18 33 02 F6 | 	mov	local11, local10
05f04     0F 33 06 F1 | 	add	local11, #local01
05f08     17 2D 02 F6 | 	mov	local08, local09
05f0c     03 2C 66 F0 | 	shl	local08, #3
05f10     22 00 00 FF 
05f14     D0 E5 05 F1 | 	add	objptr, ##17872
05f18     F2 2C 02 F1 | 	add	local08, objptr
05f1c     16 13 02 FB | 	rdlong	arg01, local08
05f20     00 14 06 F6 | 	mov	arg02, #0
05f24     22 00 00 FF 
05f28     D0 E5 85 F1 | 	sub	objptr, ##17872
05f2c     8C 0B B1 FD | 	call	#__system____builtin_atoi
05f30     FD 34 02 F6 | 	mov	local12, result1
05f34                 | 	'.live	local12
05f34                 | 	'.live	local11
05f34     00 32 8E F9 | 	altd	local11, #0
05f38     1A 33 02 F6 | 	mov	local11, local12
05f3c     01 30 06 F1 | 	add	local10, #1
05f40     10 00 90 FD | 	jmp	#LR__0537
05f44                 | LR__0536
05f44     11 12 06 F6 | 	mov	arg01, #17
05f48     40 A6 B0 FD | 	call	#_printerror
05f4c                 | '       printerror (17)  : return(17)
05f4c     11 FA 05 F6 | 	mov	result1, #17
05f50     74 01 90 FD | 	jmp	#LR__0541
05f54                 | LR__0537
05f54                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
05f54     17 35 02 F6 | 	mov	local12, local09
05f58     01 34 06 F1 | 	add	local12, #1
05f5c     03 34 66 F0 | 	shl	local12, #3
05f60     22 00 00 FF 
05f64     D0 E5 05 F1 | 	add	objptr, ##17872
05f68     F2 34 02 F1 | 	add	local12, objptr
05f6c     1A 13 02 FB | 	rdlong	arg01, local12
05f70     18 01 00 FF 
05f74     D3 14 06 F6 | 	mov	arg02, ##@LR__4215
05f78     22 00 00 FF 
05f7c     D0 E5 85 F1 | 	sub	objptr, ##17872
05f80     9C DB B0 FD | 	call	#__system___string_cmp
05f84     00 FA 0D F2 | 	cmp	result1, #0 wz
05f88     48 00 90 AD |  if_e	jmp	#LR__0538
05f8c     17 35 02 F6 | 	mov	local12, local09
05f90     01 34 06 F1 | 	add	local12, #1
05f94     03 34 66 F0 | 	shl	local12, #3
05f98     22 00 00 FF 
05f9c     D0 E5 05 F1 | 	add	objptr, ##17872
05fa0     F2 34 02 F1 | 	add	local12, objptr
05fa4     1A 13 02 FB | 	rdlong	arg01, local12
05fa8     18 01 00 FF 
05fac     D5 14 06 F6 | 	mov	arg02, ##@LR__4216
05fb0     22 00 00 FF 
05fb4     D0 E5 85 F1 | 	sub	objptr, ##17872
05fb8     64 DB B0 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     10 00 90 AD |  if_e	jmp	#LR__0538
05fc4     2C 12 06 F6 | 	mov	arg01, #44
05fc8     C0 A5 B0 FD | 	call	#_printerror
05fcc     2C FA 05 F6 | 	mov	result1, #44
05fd0     F4 00 90 FD | 	jmp	#LR__0541
05fd4                 | LR__0538
05fd4     02 2E 06 F1 | 	add	local09, #2
05fd8     17 35 02 F6 | 	mov	local12, local09
05fdc     01 34 86 F1 | 	sub	local12, #1
05fe0     03 34 66 F0 | 	shl	local12, #3
05fe4     22 00 00 FF 
05fe8     D0 E5 05 F1 | 	add	objptr, ##17872
05fec     F2 34 02 F1 | 	add	local12, objptr
05ff0     1A 13 02 FB | 	rdlong	arg01, local12
05ff4     18 01 00 FF 
05ff8     D7 14 06 F6 | 	mov	arg02, ##@LR__4217
05ffc     22 00 00 FF 
06000     D0 E5 85 F1 | 	sub	objptr, ##17872
06004     18 DB B0 FD | 	call	#__system___string_cmp
06008     00 FA 0D F2 | 	cmp	result1, #0 wz
0600c     03 30 56 52 |  if_ne	cmps	local10, #3 wc
06010     1C FE 9F 4D |  if_c_and_nz	jmp	#LR__0535
06014                 | '   if m>3 then printerror(45): return(45)
06014     04 30 56 F2 | 	cmps	local10, #4 wc
06018     20 00 90 CD |  if_b	jmp	#LR__0540
0601c     2D 12 06 F6 | 	mov	arg01, #45
06020     68 A5 B0 FD | 	call	#_printerror
06024     2D FA 05 F6 | 	mov	result1, #45
06028     9C 00 90 FD | 	jmp	#LR__0541
0602c                 | LR__0539
0602c     2E 12 06 F6 | 	mov	arg01, #46
06030     58 A5 B0 FD | 	call	#_printerror
06034                 | '   printerror(46): return 46
06034     2E FA 05 F6 | 	mov	result1, #46
06038     8C 00 90 FD | 	jmp	#LR__0541
0603c                 | LR__0540
0603c                 | ' print dims(0),dims(1),dims(2)
0603c     00 12 06 F6 | 	mov	arg01, #0
06040     98 2F B1 FD | 	call	#__system___getiolock_0306
06044     FD 12 02 F6 | 	mov	arg01, result1
06048     AC DA B0 FD | 	call	#__system___lockmem
0604c     00 12 06 F6 | 	mov	arg01, #0
06050     0F 15 02 F6 | 	mov	arg02, local01
06054     00 16 06 F6 | 	mov	arg03, #0
06058     0A 18 06 F6 | 	mov	arg04, #10
0605c     28 E7 B0 FD | 	call	#__system___basic_print_unsigned
06060     00 12 06 F6 | 	mov	arg01, #0
06064     09 14 06 F6 | 	mov	arg02, #9
06068     00 16 06 F6 | 	mov	arg03, #0
0606c     3C E6 B0 FD | 	call	#__system___basic_print_char
06070     10 15 02 F6 | 	mov	arg02, local02
06074     00 12 06 F6 | 	mov	arg01, #0
06078     00 16 06 F6 | 	mov	arg03, #0
0607c     0A 18 06 F6 | 	mov	arg04, #10
06080     04 E7 B0 FD | 	call	#__system___basic_print_unsigned
06084     00 12 06 F6 | 	mov	arg01, #0
06088     09 14 06 F6 | 	mov	arg02, #9
0608c     00 16 06 F6 | 	mov	arg03, #0
06090     18 E6 B0 FD | 	call	#__system___basic_print_char
06094     11 15 02 F6 | 	mov	arg02, local03
06098     00 12 06 F6 | 	mov	arg01, #0
0609c     00 16 06 F6 | 	mov	arg03, #0
060a0     0A 18 06 F6 | 	mov	arg04, #10
060a4     E0 E6 B0 FD | 	call	#__system___basic_print_unsigned
060a8     00 12 06 F6 | 	mov	arg01, #0
060ac     0A 14 06 F6 | 	mov	arg02, #10
060b0     00 16 06 F6 | 	mov	arg03, #0
060b4     F4 E5 B0 FD | 	call	#__system___basic_print_char
060b8     00 12 06 F6 | 	mov	arg01, #0
060bc     1C 2F B1 FD | 	call	#__system___getiolock_0306
060c0     FD 00 68 FC | 	wrlong	#0, result1
060c4                 | ' 
060c4                 | ' ' to do
060c4                 | ' 
060c4                 | ' '- allocate a new variable
060c4                 | ' '- type: result_arraay
060c4                 | ' '- compute size: dim*dim*dim*12 (sizeof expr_result) + header ( size,size, size)
060c4                 | ' ' - lower memtop, var uresult=memtop - pointer to an array
060c4                 | ' 
060c4                 | ' ' getvar - ??? 
060c4                 | ' 
060c4                 | ' 
060c4                 | ' 
060c4                 | ' 
060c4                 | '  ' if  j=-1 andalso varnum<maxvars then   
060c4                 | '   '  variables(varnum).name=varname2$
060c4                 | '   '  variables(varnum).type=result_array
060c4                 | ' ' allocate space on memtop. Todo: check if the space exists
060c4                 | '     
060c4                 | '   '  j=varnum
060c4                 | '  '   varnum+=1
060c4                 | ' 'endif
060c4                 | ' 
060c4                 | ' '
060c4                 | '  '  j=-1 
060c4                 | '  '  do: j=j+1 : loop until variables(j).name=lparts(ct).part$ orelse j>=varnum
060c4                 | '    
060c4                 | ' 
060c4                 | ' 
060c4                 | ' 'compile_immediate_assign(5) else compile_error(32) : return 32
060c4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
060c4                 | ' 't1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
060c4                 | ' 'varnum=t1.result.uresult
060c4                 | ' 'if lparts(ct).part$<>"to" then  compile_error(33) : return 33
060c4                 | ' 'ct+=1
060c4                 | ' 'expr()  ' there is "to" value pushed on the stack
060c4                 | ' 'if lparts(ct).part$="step" then 
060c4                 | ' 'ct+=1
060c4                 | ' 'expr()
060c4                 | ' 'else
060c4                 | ' 'compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=1 : lineptr+=1
060c4                 | ' 'endif
060c4                 | ' 'compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
060c4                 | ' 'compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
060c4                 | ' return 0
060c4     00 FA 05 F6 | 	mov	result1, #0
060c8                 | LR__0541
060c8     A7 F0 03 F6 | 	mov	ptra, fp
060cc     B2 00 A0 FD | 	call	#popregs_
060d0                 | _compile_dim_ret
060d0     2D 00 64 FD | 	ret
060d4                 | 
060d4                 | ' 
060d4                 | ' 
060d4                 | ' function compile_for() as ulong  
060d4                 | _compile_for
060d4     07 4A 05 F6 | 	mov	COUNT_, #7
060d8     A8 00 A0 FD | 	call	#pushregs_
060dc                 | ' 
060dc                 | ' 
060dc                 | ' 
060dc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
060dc     25 00 00 FF 
060e0     08 E4 05 F1 | 	add	objptr, ##18952
060e4     F2 14 02 FB | 	rdlong	arg02, objptr
060e8     01 14 06 F1 | 	add	arg02, #1
060ec     03 14 66 F0 | 	shl	arg02, #3
060f0     02 00 00 FF 
060f4     38 E4 85 F1 | 	sub	objptr, ##1080
060f8     F2 14 02 F1 | 	add	arg02, objptr
060fc     0A 13 02 FB | 	rdlong	arg01, arg02
06100     22 00 00 FF 
06104     D0 E5 85 F1 | 	sub	objptr, ##17872
06108                 | ' 
06108                 | ' select case s
06108     17 01 00 FF 
0610c     4A 15 06 F6 | 	mov	arg02, ##@LR__4114
06110     0C DA B0 FD | 	call	#__system___string_cmp
06114     00 FA 0D F2 | 	cmp	result1, #0 wz
06118     1B FA 05 A6 |  if_e	mov	result1, #27
0611c     00 FA 05 56 |  if_ne	mov	result1, #0
06120     00 FA 0D F2 | 	cmp	result1, #0 wz
06124     0C 00 90 AD |  if_e	jmp	#LR__0550
06128     05 12 06 F6 | 	mov	arg01, #5
0612c     28 E6 BF FD | 	call	#_compile_immediate_assign
06130     10 00 90 FD | 	jmp	#LR__0551
06134                 | LR__0550
06134     20 12 06 F6 | 	mov	arg01, #32
06138     98 EA BF FD | 	call	#_compile_error
0613c     20 FA 05 F6 | 	mov	result1, #32
06140     AC 02 90 FD | 	jmp	#LR__0556
06144                 | LR__0551
06144     38 00 00 FF 
06148     40 E4 05 F1 | 	add	objptr, ##28736
0614c     F2 12 02 FB | 	rdlong	arg01, objptr
06150     09 25 02 F6 | 	mov	local04, arg01
06154     01 24 86 F1 | 	sub	local04, #1
06158     12 15 02 F6 | 	mov	arg02, local04
0615c     01 14 66 F0 | 	shl	arg02, #1
06160     12 15 02 F1 | 	add	arg02, local04
06164     02 14 66 F0 | 	shl	arg02, #2
06168     03 00 00 FF 
0616c     00 E4 85 F1 | 	sub	objptr, ##1536
06170     F2 14 02 F1 | 	add	arg02, objptr
06174     0A 1F 02 FB | 	rdlong	local01, arg02
06178     04 14 06 F1 | 	add	arg02, #4
0617c     0A 27 02 FB | 	rdlong	local05, arg02
06180     01 12 86 F1 | 	sub	arg01, #1
06184     09 29 02 F6 | 	mov	local06, arg01
06188     01 28 66 F0 | 	shl	local06, #1
0618c     09 29 02 F1 | 	add	local06, arg01
06190     02 28 66 F0 | 	shl	local06, #2
06194     F2 28 02 F1 | 	add	local06, objptr
06198     08 28 06 F1 | 	add	local06, #8
0619c     14 13 02 FB | 	rdlong	arg01, local06
061a0     13 21 02 F6 | 	mov	local02, local05
061a4     09 23 02 F6 | 	mov	local03, arg01
061a8                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
061a8                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
061a8     17 22 0E F2 | 	cmp	local03, #23 wz
061ac     35 00 00 FF 
061b0     40 E4 85 F1 | 	sub	objptr, ##27200
061b4     10 00 90 AD |  if_e	jmp	#LR__0552
061b8     22 12 06 F6 | 	mov	arg01, #34
061bc     14 EA BF FD | 	call	#_compile_error
061c0     22 FA 05 F6 | 	mov	result1, #34
061c4     28 02 90 FD | 	jmp	#LR__0556
061c8                 | LR__0552
061c8     0F 2B 02 F6 | 	mov	local07, local01
061cc                 | ' varnum=t1.result.uresult
061cc                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
061cc     25 00 00 FF 
061d0     08 E4 05 F1 | 	add	objptr, ##18952
061d4     F2 24 02 FB | 	rdlong	local04, objptr
061d8     03 24 66 F0 | 	shl	local04, #3
061dc     02 00 00 FF 
061e0     38 E4 85 F1 | 	sub	objptr, ##1080
061e4     F2 24 02 F1 | 	add	local04, objptr
061e8     12 13 02 FB | 	rdlong	arg01, local04
061ec     18 01 00 FF 
061f0     D9 14 06 F6 | 	mov	arg02, ##@LR__4218
061f4     22 00 00 FF 
061f8     D0 E5 85 F1 | 	sub	objptr, ##17872
061fc     20 D9 B0 FD | 	call	#__system___string_cmp
06200     00 FA 0D F2 | 	cmp	result1, #0 wz
06204     10 00 90 AD |  if_e	jmp	#LR__0553
06208     21 12 06 F6 | 	mov	arg01, #33
0620c     C4 E9 BF FD | 	call	#_compile_error
06210     21 FA 05 F6 | 	mov	result1, #33
06214     D8 01 90 FD | 	jmp	#LR__0556
06218                 | LR__0553
06218     25 00 00 FF 
0621c     08 E4 05 F1 | 	add	objptr, ##18952
06220     F2 28 02 FB | 	rdlong	local06, objptr
06224     01 28 06 F1 | 	add	local06, #1
06228     F2 28 62 FC | 	wrlong	local06, objptr
0622c     25 00 00 FF 
06230     08 E4 85 F1 | 	sub	objptr, ##18952
06234     98 0B B0 FD | 	call	#_expr
06238                 | ' ct+=1
06238                 | ' expr()  ' there is "to" value pushed on the stack
06238                 | ' if lparts(ct).part$="step" then 
06238     25 00 00 FF 
0623c     08 E4 05 F1 | 	add	objptr, ##18952
06240     F2 24 02 FB | 	rdlong	local04, objptr
06244     03 24 66 F0 | 	shl	local04, #3
06248     02 00 00 FF 
0624c     38 E4 85 F1 | 	sub	objptr, ##1080
06250     F2 24 02 F1 | 	add	local04, objptr
06254     12 13 02 FB | 	rdlong	arg01, local04
06258     18 01 00 FF 
0625c     DC 14 06 F6 | 	mov	arg02, ##@LR__4219
06260     22 00 00 FF 
06264     D0 E5 85 F1 | 	sub	objptr, ##17872
06268     B4 D8 B0 FD | 	call	#__system___string_cmp
0626c     00 FA 0D F2 | 	cmp	result1, #0 wz
06270     24 00 90 5D |  if_ne	jmp	#LR__0554
06274     25 00 00 FF 
06278     08 E4 05 F1 | 	add	objptr, ##18952
0627c     F2 28 02 FB | 	rdlong	local06, objptr
06280     01 28 06 F1 | 	add	local06, #1
06284     F2 28 62 FC | 	wrlong	local06, objptr
06288     25 00 00 FF 
0628c     08 E4 85 F1 | 	sub	objptr, ##18952
06290     3C 0B B0 FD | 	call	#_expr
06294     78 00 90 FD | 	jmp	#LR__0555
06298                 | LR__0554
06298     38 00 00 FF 
0629c     40 E4 05 F1 | 	add	objptr, ##28736
062a0     F2 28 02 FB | 	rdlong	local06, objptr
062a4     14 27 02 F6 | 	mov	local05, local06
062a8     01 26 66 F0 | 	shl	local05, #1
062ac     14 27 02 F1 | 	add	local05, local06
062b0     02 26 66 F0 | 	shl	local05, #2
062b4     03 00 00 FF 
062b8     00 E4 85 F1 | 	sub	objptr, ##1536
062bc     F2 26 02 F1 | 	add	local05, objptr
062c0     08 26 06 F1 | 	add	local05, #8
062c4     13 39 68 FC | 	wrlong	#28, local05
062c8     03 00 00 FF 
062cc     00 E4 05 F1 | 	add	objptr, ##1536
062d0     F2 28 02 FB | 	rdlong	local06, objptr
062d4     14 27 02 F6 | 	mov	local05, local06
062d8     01 26 66 F0 | 	shl	local05, #1
062dc     14 27 02 F1 | 	add	local05, local06
062e0     02 26 66 F0 | 	shl	local05, #2
062e4     03 00 00 FF 
062e8     00 E4 85 F1 | 	sub	objptr, ##1536
062ec     F2 26 02 F1 | 	add	local05, objptr
062f0     13 03 68 FC | 	wrlong	#1, local05
062f4     03 00 00 FF 
062f8     00 E4 05 F1 | 	add	objptr, ##1536
062fc     F2 28 02 FB | 	rdlong	local06, objptr
06300     01 28 06 F1 | 	add	local06, #1
06304     F2 28 62 FC | 	wrlong	local06, objptr
06308     38 00 00 FF 
0630c     40 E4 85 F1 | 	sub	objptr, ##28736
06310                 | LR__0555
06310     38 00 00 FF 
06314     40 E4 05 F1 | 	add	objptr, ##28736
06318     F2 28 02 FB | 	rdlong	local06, objptr
0631c     14 27 02 F6 | 	mov	local05, local06
06320     01 26 66 F0 | 	shl	local05, #1
06324     14 27 02 F1 | 	add	local05, local06
06328     02 26 66 F0 | 	shl	local05, #2
0632c     03 00 00 FF 
06330     00 E4 85 F1 | 	sub	objptr, ##1536
06334     F2 26 02 F1 | 	add	local05, objptr
06338     08 26 06 F1 | 	add	local05, #8
0633c     13 39 68 FC | 	wrlong	#28, local05
06340     03 00 00 FF 
06344     00 E4 05 F1 | 	add	objptr, ##1536
06348     F2 28 02 FB | 	rdlong	local06, objptr
0634c     14 27 02 F6 | 	mov	local05, local06
06350     01 26 66 F0 | 	shl	local05, #1
06354     14 27 02 F1 | 	add	local05, local06
06358     02 26 66 F0 | 	shl	local05, #2
0635c     03 00 00 FF 
06360     00 E4 85 F1 | 	sub	objptr, ##1536
06364     F2 26 02 F1 | 	add	local05, objptr
06368     13 2B 62 FC | 	wrlong	local07, local05
0636c     03 00 00 FF 
06370     00 E4 05 F1 | 	add	objptr, ##1536
06374     F2 2A 02 FB | 	rdlong	local07, objptr
06378     01 2A 06 F1 | 	add	local07, #1
0637c     F2 2A 62 FC | 	wrlong	local07, objptr
06380     15 29 02 F6 | 	mov	local06, local07
06384     01 28 66 F0 | 	shl	local06, #1
06388     15 29 02 F1 | 	add	local06, local07
0638c     02 28 66 F0 | 	shl	local06, #2
06390     03 00 00 FF 
06394     00 E4 85 F1 | 	sub	objptr, ##1536
06398     F2 28 02 F1 | 	add	local06, objptr
0639c     08 28 06 F1 | 	add	local06, #8
063a0     14 95 68 FC | 	wrlong	#74, local06
063a4     03 00 00 FF 
063a8     00 E4 05 F1 | 	add	objptr, ##1536
063ac     F2 2A 02 FB | 	rdlong	local07, objptr
063b0     15 29 02 F6 | 	mov	local06, local07
063b4     01 28 66 F0 | 	shl	local06, #1
063b8     15 29 02 F1 | 	add	local06, local07
063bc     02 28 66 F0 | 	shl	local06, #2
063c0     03 00 00 FF 
063c4     00 E4 85 F1 | 	sub	objptr, ##1536
063c8     F2 28 02 F1 | 	add	local06, objptr
063cc     14 01 68 FC | 	wrlong	#0, local06
063d0     03 00 00 FF 
063d4     00 E4 05 F1 | 	add	objptr, ##1536
063d8     F2 2A 02 FB | 	rdlong	local07, objptr
063dc     01 2A 06 F1 | 	add	local07, #1
063e0     F2 2A 62 FC | 	wrlong	local07, objptr
063e4     38 00 00 FF 
063e8     40 E4 85 F1 | 	sub	objptr, ##28736
063ec                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
063ec                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
063ec                 | ' 
063ec                 | ' 
063ec                 | ' return 0
063ec     00 FA 05 F6 | 	mov	result1, #0
063f0                 | LR__0556
063f0     A7 F0 03 F6 | 	mov	ptra, fp
063f4     B2 00 A0 FD | 	call	#popregs_
063f8                 | _compile_for_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | ' 
063fc                 | ' 
063fc                 | ' sub do_for()
063fc                 | _do_for
063fc     05 4A 05 F6 | 	mov	COUNT_, #5
06400     A8 00 A0 FD | 	call	#pushregs_
06404     47 00 00 FF 
06408     9C E5 05 F1 | 	add	objptr, ##36764
0640c     F2 24 02 FB | 	rdlong	local04, objptr
06410     01 24 06 F1 | 	add	local04, #1
06414     F2 24 62 FC | 	wrlong	local04, objptr
06418     47 00 00 FF 
0641c     9C E5 85 F1 | 	sub	objptr, ##36764
06420     FC 1B B0 FD | 	call	#_pop
06424     FD 1E 02 F6 | 	mov	local01, result1
06428     FE 20 02 F6 | 	mov	local02, result2
0642c     FF 22 02 F6 | 	mov	local03, result3
06430     47 00 00 FF 
06434     9C E5 05 F1 | 	add	objptr, ##36764
06438     F2 24 02 FB | 	rdlong	local04, objptr
0643c     12 27 02 F6 | 	mov	local05, local04
06440     02 26 66 F0 | 	shl	local05, #2
06444     12 27 02 F1 | 	add	local05, local04
06448     02 26 66 F0 | 	shl	local05, #2
0644c     07 00 00 FF 
06450     40 E5 85 F1 | 	sub	objptr, ##3904
06454     F2 26 02 F1 | 	add	local05, objptr
06458     08 26 06 F1 | 	add	local05, #8
0645c     13 1F 62 FC | 	wrlong	local01, local05
06460     40 00 00 FF 
06464     5C E4 85 F1 | 	sub	objptr, ##32860
06468     B4 1B B0 FD | 	call	#_pop
0646c     FD 1E 02 F6 | 	mov	local01, result1
06470     FE 20 02 F6 | 	mov	local02, result2
06474     FF 22 02 F6 | 	mov	local03, result3
06478     47 00 00 FF 
0647c     9C E5 05 F1 | 	add	objptr, ##36764
06480     F2 24 02 FB | 	rdlong	local04, objptr
06484     12 27 02 F6 | 	mov	local05, local04
06488     02 26 66 F0 | 	shl	local05, #2
0648c     12 27 02 F1 | 	add	local05, local04
06490     02 26 66 F0 | 	shl	local05, #2
06494     07 00 00 FF 
06498     40 E5 85 F1 | 	sub	objptr, ##3904
0649c     F2 26 02 F1 | 	add	local05, objptr
064a0     0C 26 06 F1 | 	add	local05, #12
064a4     13 1F 62 FC | 	wrlong	local01, local05
064a8     40 00 00 FF 
064ac     5C E4 85 F1 | 	sub	objptr, ##32860
064b0     6C 1B B0 FD | 	call	#_pop
064b4     FD 1E 02 F6 | 	mov	local01, result1
064b8     FE 20 02 F6 | 	mov	local02, result2
064bc     FF 22 02 F6 | 	mov	local03, result3
064c0     47 00 00 FF 
064c4     9C E5 05 F1 | 	add	objptr, ##36764
064c8     F2 24 02 FB | 	rdlong	local04, objptr
064cc     12 27 02 F6 | 	mov	local05, local04
064d0     02 26 66 F0 | 	shl	local05, #2
064d4     12 27 02 F1 | 	add	local05, local04
064d8     02 26 66 F0 | 	shl	local05, #2
064dc     07 00 00 FF 
064e0     40 E5 85 F1 | 	sub	objptr, ##3904
064e4     F2 26 02 F1 | 	add	local05, objptr
064e8     10 26 06 F1 | 	add	local05, #16
064ec     13 1F 62 FC | 	wrlong	local01, local05
064f0                 | ' fortop+=1
064f0                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
064f0                 | ' 'if i> maxfor then printerror(36) : return
064f0                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
064f0                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
064f0                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
064f0                 | ' if compiledline(lineptr_e).result_type=token_end then
064f0     08 00 00 FF 
064f4     18 E4 85 F1 | 	sub	objptr, ##4120
064f8     F2 1E 02 FB | 	rdlong	local01, objptr
064fc     0F 27 02 F6 | 	mov	local05, local01
06500     01 26 66 F0 | 	shl	local05, #1
06504     0F 27 02 F1 | 	add	local05, local01
06508     02 26 66 F0 | 	shl	local05, #2
0650c     03 00 00 FF 
06510     04 E4 85 F1 | 	sub	objptr, ##1540
06514     F2 26 02 F1 | 	add	local05, objptr
06518     08 26 06 F1 | 	add	local05, #8
0651c     13 27 02 FB | 	rdlong	local05, local05
06520     FE 27 0E F2 | 	cmp	local05, #510 wz
06524     35 00 00 FF 
06528     40 E4 85 F1 | 	sub	objptr, ##27200
0652c     70 00 90 5D |  if_ne	jmp	#LR__0560
06530     47 00 00 FF 
06534     9C E5 05 F1 | 	add	objptr, ##36764
06538     F2 1E 02 FB | 	rdlong	local01, objptr
0653c     0F 27 02 F6 | 	mov	local05, local01
06540     02 26 66 F0 | 	shl	local05, #2
06544     0F 27 02 F1 | 	add	local05, local01
06548     02 26 66 F0 | 	shl	local05, #2
0654c     07 00 00 FF 
06550     40 E5 85 F1 | 	sub	objptr, ##3904
06554     F2 26 02 F1 | 	add	local05, objptr
06558     07 00 00 FF 
0655c     18 E5 05 F1 | 	add	objptr, ##3864
06560     F2 1E 02 FB | 	rdlong	local01, objptr
06564     13 1F 62 FC | 	wrlong	local01, local05
06568     28 E4 05 F1 | 	add	objptr, #40
0656c     F2 1E 02 FB | 	rdlong	local01, objptr
06570     0F 27 02 F6 | 	mov	local05, local01
06574     02 26 66 F0 | 	shl	local05, #2
06578     0F 27 02 F1 | 	add	local05, local01
0657c     02 26 66 F0 | 	shl	local05, #2
06580     07 00 00 FF 
06584     40 E5 85 F1 | 	sub	objptr, ##3904
06588     F2 26 02 F1 | 	add	local05, objptr
0658c     04 26 06 F1 | 	add	local05, #4
06590     13 01 68 FC | 	wrlong	#0, local05
06594     40 00 00 FF 
06598     5C E4 85 F1 | 	sub	objptr, ##32860
0659c     7C 00 90 FD | 	jmp	#LR__0561
065a0                 | LR__0560
065a0     47 00 00 FF 
065a4     9C E5 05 F1 | 	add	objptr, ##36764
065a8     F2 1E 02 FB | 	rdlong	local01, objptr
065ac     0F 27 02 F6 | 	mov	local05, local01
065b0     02 26 66 F0 | 	shl	local05, #2
065b4     0F 27 02 F1 | 	add	local05, local01
065b8     02 26 66 F0 | 	shl	local05, #2
065bc     07 00 00 FF 
065c0     40 E5 85 F1 | 	sub	objptr, ##3904
065c4     F2 26 02 F1 | 	add	local05, objptr
065c8     07 00 00 FF 
065cc     20 E5 05 F1 | 	add	objptr, ##3872
065d0     F2 1E 02 FB | 	rdlong	local01, objptr
065d4     13 1F 62 FC | 	wrlong	local01, local05
065d8     20 E4 05 F1 | 	add	objptr, #32
065dc     F2 1E 02 FB | 	rdlong	local01, objptr
065e0     0F 27 02 F6 | 	mov	local05, local01
065e4     02 26 66 F0 | 	shl	local05, #2
065e8     0F 27 02 F1 | 	add	local05, local01
065ec     02 26 66 F0 | 	shl	local05, #2
065f0     07 00 00 FF 
065f4     40 E5 85 F1 | 	sub	objptr, ##3904
065f8     F2 26 02 F1 | 	add	local05, objptr
065fc     08 00 00 FF 
06600     18 E4 85 F1 | 	sub	objptr, ##4120
06604     F2 1E 02 FB | 	rdlong	local01, objptr
06608     38 00 00 FF 
0660c     44 E4 85 F1 | 	sub	objptr, ##28740
06610     01 1E 06 F1 | 	add	local01, #1
06614     04 26 06 F1 | 	add	local05, #4
06618     13 1F 62 FC | 	wrlong	local01, local05
0661c                 | LR__0561
0661c     A7 F0 03 F6 | 	mov	ptra, fp
06620     B2 00 A0 FD | 	call	#popregs_
06624                 | _do_for_ret
06624     2D 00 64 FD | 	ret
06628                 | 
06628                 | ' 
06628                 | ' ' now do_next todo
06628                 | ' 
06628                 | ' sub do_next()
06628                 | _do_next
06628     04 4A 05 F6 | 	mov	COUNT_, #4
0662c     A8 00 A0 FD | 	call	#pushregs_
06630     EC 19 B0 FD | 	call	#_pop
06634     FD 1E 02 F6 | 	mov	local01, result1
06638     FE 20 02 F6 | 	mov	local02, result2
0663c     FF 22 02 F6 | 	mov	local03, result3
06640                 | ' 
06640                 | ' t1=pop() :varnum=t1.result.uresult
06640                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06640     47 00 00 FF 
06644     9C E5 05 F1 | 	add	objptr, ##36764
06648     F2 12 02 FB | 	rdlong	arg01, objptr
0664c     09 25 02 F6 | 	mov	local04, arg01
06650     02 24 66 F0 | 	shl	local04, #2
06654     09 25 02 F1 | 	add	local04, arg01
06658     02 24 66 F0 | 	shl	local04, #2
0665c     07 00 00 FF 
06660     40 E5 85 F1 | 	sub	objptr, ##3904
06664     F2 24 02 F1 | 	add	local04, objptr
06668     08 24 06 F1 | 	add	local04, #8
0666c     12 25 02 FB | 	rdlong	local04, local04
06670     0F 25 0A F2 | 	cmp	local04, local01 wz
06674     40 00 00 FF 
06678     5C E4 85 F1 | 	sub	objptr, ##32860
0667c     0C 00 90 AD |  if_e	jmp	#LR__0570
06680     25 12 06 F6 | 	mov	arg01, #37
06684     04 9F B0 FD | 	call	#_printerror
06688     28 02 90 FD | 	jmp	#LR__0574
0668c                 | LR__0570
0668c     47 00 00 FF 
06690     9C E5 05 F1 | 	add	objptr, ##36764
06694     F2 12 02 FB | 	rdlong	arg01, objptr
06698     09 25 02 F6 | 	mov	local04, arg01
0669c     02 24 66 F0 | 	shl	local04, #2
066a0     09 25 02 F1 | 	add	local04, arg01
066a4     02 24 66 F0 | 	shl	local04, #2
066a8     07 00 00 FF 
066ac     40 E5 85 F1 | 	sub	objptr, ##3904
066b0     F2 24 02 F1 | 	add	local04, objptr
066b4     0C 24 06 F1 | 	add	local04, #12
066b8     12 25 02 FB | 	rdlong	local04, local04
066bc     0F 13 02 F6 | 	mov	arg01, local01
066c0     04 12 66 F0 | 	shl	arg01, #4
066c4     3D 00 00 FF 
066c8     90 E4 85 F1 | 	sub	objptr, ##31376
066cc     F2 12 02 F1 | 	add	arg01, objptr
066d0     0F FF 01 F6 | 	mov	result3, local01
066d4     04 FE 65 F0 | 	shl	result3, #4
066d8     F2 FE 01 F1 | 	add	result3, objptr
066dc     04 FE 05 F1 | 	add	result3, #4
066e0     FF FE 01 FB | 	rdlong	result3, result3
066e4     12 FF 01 F1 | 	add	result3, local04
066e8     04 12 06 F1 | 	add	arg01, #4
066ec     09 FF 61 FC | 	wrlong	result3, arg01
066f0                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
066f0                 | ' if fortable(fortop).stepval>0 then
066f0     44 00 00 FF 
066f4     D0 E5 05 F1 | 	add	objptr, ##35280
066f8     F2 12 02 FB | 	rdlong	arg01, objptr
066fc     09 25 02 F6 | 	mov	local04, arg01
06700     02 24 66 F0 | 	shl	local04, #2
06704     09 25 02 F1 | 	add	local04, arg01
06708     02 24 66 F0 | 	shl	local04, #2
0670c     07 00 00 FF 
06710     40 E5 85 F1 | 	sub	objptr, ##3904
06714     F2 24 02 F1 | 	add	local04, objptr
06718     0C 24 06 F1 | 	add	local04, #12
0671c     12 25 02 FB | 	rdlong	local04, local04
06720     01 24 56 F2 | 	cmps	local04, #1 wc
06724     40 00 00 FF 
06728     5C E4 85 F1 | 	sub	objptr, ##32860
0672c     78 00 90 CD |  if_b	jmp	#LR__0571
06730                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06730     04 1E 66 F0 | 	shl	local01, #4
06734     02 00 00 FF 
06738     CC E5 05 F1 | 	add	objptr, ##1484
0673c     F2 1E 02 F1 | 	add	local01, objptr
06740     44 00 00 FF 
06744     D0 E5 05 F1 | 	add	objptr, ##35280
06748     F2 24 02 FB | 	rdlong	local04, objptr
0674c     12 13 02 F6 | 	mov	arg01, local04
06750     02 12 66 F0 | 	shl	arg01, #2
06754     12 13 02 F1 | 	add	arg01, local04
06758     02 12 66 F0 | 	shl	arg01, #2
0675c     07 00 00 FF 
06760     40 E5 85 F1 | 	sub	objptr, ##3904
06764     F2 12 02 F1 | 	add	arg01, objptr
06768     04 1E 06 F1 | 	add	local01, #4
0676c     0F 25 02 FB | 	rdlong	local04, local01
06770     10 12 06 F1 | 	add	arg01, #16
06774     09 13 02 FB | 	rdlong	arg01, arg01
06778     09 25 5A F2 | 	cmps	local04, arg01 wcz
0677c     40 00 00 FF 
06780     5C E4 85 F1 | 	sub	objptr, ##32860
06784     9C 00 90 ED |  if_be	jmp	#LR__0573
06788     47 00 00 FF 
0678c     9C E5 05 F1 | 	add	objptr, ##36764
06790     F2 24 02 FB | 	rdlong	local04, objptr
06794     01 24 86 F1 | 	sub	local04, #1
06798     F2 24 62 FC | 	wrlong	local04, objptr
0679c     47 00 00 FF 
067a0     9C E5 85 F1 | 	sub	objptr, ##36764
067a4     0C 01 90 FD | 	jmp	#LR__0574
067a8                 | LR__0571
067a8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
067a8     0F 13 02 F6 | 	mov	arg01, local01
067ac     04 12 66 F0 | 	shl	arg01, #4
067b0     02 00 00 FF 
067b4     CC E5 05 F1 | 	add	objptr, ##1484
067b8     F2 12 02 F1 | 	add	arg01, objptr
067bc     44 00 00 FF 
067c0     D0 E5 05 F1 | 	add	objptr, ##35280
067c4     F2 24 02 FB | 	rdlong	local04, objptr
067c8     12 1F 02 F6 | 	mov	local01, local04
067cc     02 1E 66 F0 | 	shl	local01, #2
067d0     12 1F 02 F1 | 	add	local01, local04
067d4     02 1E 66 F0 | 	shl	local01, #2
067d8     07 00 00 FF 
067dc     40 E5 85 F1 | 	sub	objptr, ##3904
067e0     F2 1E 02 F1 | 	add	local01, objptr
067e4     04 12 06 F1 | 	add	arg01, #4
067e8     09 13 02 FB | 	rdlong	arg01, arg01
067ec     10 1E 06 F1 | 	add	local01, #16
067f0     0F 1F 02 FB | 	rdlong	local01, local01
067f4     0F 13 52 F2 | 	cmps	arg01, local01 wc
067f8     40 00 00 FF 
067fc     5C E4 85 F1 | 	sub	objptr, ##32860
06800     20 00 90 3D |  if_ae	jmp	#LR__0572
06804     47 00 00 FF 
06808     9C E5 05 F1 | 	add	objptr, ##36764
0680c     F2 24 02 FB | 	rdlong	local04, objptr
06810     01 24 86 F1 | 	sub	local04, #1
06814     F2 24 62 FC | 	wrlong	local04, objptr
06818     47 00 00 FF 
0681c     9C E5 85 F1 | 	sub	objptr, ##36764
06820     90 00 90 FD | 	jmp	#LR__0574
06824                 | LR__0572
06824                 | LR__0573
06824     47 00 00 FF 
06828     9C E5 05 F1 | 	add	objptr, ##36764
0682c     F2 1E 02 FB | 	rdlong	local01, objptr
06830     0F 25 02 F6 | 	mov	local04, local01
06834     02 24 66 F0 | 	shl	local04, #2
06838     0F 25 02 F1 | 	add	local04, local01
0683c     02 24 66 F0 | 	shl	local04, #2
06840     07 00 00 FF 
06844     40 E5 85 F1 | 	sub	objptr, ##3904
06848     F2 24 02 F1 | 	add	local04, objptr
0684c     12 25 02 FB | 	rdlong	local04, local04
06850     07 00 00 FF 
06854     18 E5 05 F1 | 	add	objptr, ##3864
06858     F2 24 62 FC | 	wrlong	local04, objptr
0685c     28 E4 05 F1 | 	add	objptr, #40
06860     F2 1E 02 FB | 	rdlong	local01, objptr
06864     0F 25 02 F6 | 	mov	local04, local01
06868     02 24 66 F0 | 	shl	local04, #2
0686c     0F 25 02 F1 | 	add	local04, local01
06870     02 24 66 F0 | 	shl	local04, #2
06874     07 00 00 FF 
06878     40 E5 85 F1 | 	sub	objptr, ##3904
0687c     F2 24 02 F1 | 	add	local04, objptr
06880     04 24 06 F1 | 	add	local04, #4
06884     12 25 02 FB | 	rdlong	local04, local04
06888     07 00 00 FF 
0688c     1C E5 05 F1 | 	add	objptr, ##3868
06890     F2 24 62 FC | 	wrlong	local04, objptr
06894     0F 00 00 FF 
06898     38 E5 85 F1 | 	sub	objptr, ##7992
0689c     F2 24 02 FB | 	rdlong	local04, objptr
068a0     01 24 86 F1 | 	sub	local04, #1
068a4     04 E4 05 F1 | 	add	objptr, #4
068a8     F2 24 62 FC | 	wrlong	local04, objptr
068ac     38 00 00 FF 
068b0     44 E4 85 F1 | 	sub	objptr, ##28740
068b4                 | LR__0574
068b4     A7 F0 03 F6 | 	mov	ptra, fp
068b8     B2 00 A0 FD | 	call	#popregs_
068bc                 | _do_next_ret
068bc     2D 00 64 FD | 	ret
068c0                 | 
068c0                 | ' 
068c0                 | ' 
068c0                 | ' function compile_next() as ulong
068c0                 | _compile_next
068c0     04 4A 05 F6 | 	mov	COUNT_, #4
068c4     A8 00 A0 FD | 	call	#pushregs_
068c8     25 00 00 FF 
068cc     08 E4 05 F1 | 	add	objptr, ##18952
068d0     F2 12 02 FB | 	rdlong	arg01, objptr
068d4     03 12 66 F0 | 	shl	arg01, #3
068d8     02 00 00 FF 
068dc     38 E4 85 F1 | 	sub	objptr, ##1080
068e0     F2 12 02 F1 | 	add	arg01, objptr
068e4     09 1F 02 FB | 	rdlong	local01, arg01
068e8                 | ' 
068e8                 | ' varname$=lparts(ct).part$ 
068e8                 | ' 'suffix$=right$(varname$,1)
068e8                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
068e8                 | ' if varnum=0 then compile_error(35)  : return 35
068e8     04 E4 85 F1 | 	sub	objptr, #4
068ec     F2 14 0A FB | 	rdlong	arg02, objptr wz
068f0     22 00 00 FF 
068f4     CC E5 85 F1 | 	sub	objptr, ##17868
068f8     10 00 90 5D |  if_ne	jmp	#LR__0580
068fc     23 12 06 F6 | 	mov	arg01, #35
06900     D0 E2 BF FD | 	call	#_compile_error
06904     23 FA 05 F6 | 	mov	result1, #35
06908     58 01 90 FD | 	jmp	#LR__0584
0690c                 | LR__0580
0690c     01 20 66 F6 | 	neg	local02, #1
06910                 | ' j=-1
06910                 | ' for i=0 to varnum-1
06910     00 22 06 F6 | 	mov	local03, #0
06914     22 00 00 FF 
06918     CC E5 05 F1 | 	add	objptr, ##17868
0691c     F2 24 02 FB | 	rdlong	local04, objptr
06920     22 00 00 FF 
06924     CC E5 85 F1 | 	sub	objptr, ##17868
06928                 | LR__0581
06928     12 23 12 F2 | 	cmp	local03, local04 wc
0692c     38 00 90 3D |  if_ae	jmp	#LR__0582
06930                 | '   if variables(i).name=varname$ then j=i : exit
06930     11 15 02 F6 | 	mov	arg02, local03
06934     04 14 66 F0 | 	shl	arg02, #4
06938     02 00 00 FF 
0693c     CC E5 05 F1 | 	add	objptr, ##1484
06940     F2 14 02 F1 | 	add	arg02, objptr
06944     0A 13 02 FB | 	rdlong	arg01, arg02
06948     0F 15 02 F6 | 	mov	arg02, local01
0694c     02 00 00 FF 
06950     CC E5 85 F1 | 	sub	objptr, ##1484
06954     C8 D1 B0 FD | 	call	#__system___string_cmp
06958     00 FA 0D F2 | 	cmp	result1, #0 wz
0695c     11 21 02 A6 |  if_e	mov	local02, local03
06960     01 22 06 51 |  if_ne	add	local03, #1
06964     C0 FF 9F 5D |  if_ne	jmp	#LR__0581
06968                 | LR__0582
06968                 | ' if j=-1 then compile_error(35) : return 35
06968     FF FF 7F FF 
0696c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06970     10 00 90 5D |  if_ne	jmp	#LR__0583
06974     23 12 06 F6 | 	mov	arg01, #35
06978     58 E2 BF FD | 	call	#_compile_error
0697c     23 FA 05 F6 | 	mov	result1, #35
06980     E0 00 90 FD | 	jmp	#LR__0584
06984                 | LR__0583
06984     38 00 00 FF 
06988     40 E4 05 F1 | 	add	objptr, ##28736
0698c     F2 24 02 FB | 	rdlong	local04, objptr
06990     12 23 02 F6 | 	mov	local03, local04
06994     01 22 66 F0 | 	shl	local03, #1
06998     12 23 02 F1 | 	add	local03, local04
0699c     02 22 66 F0 | 	shl	local03, #2
069a0     03 00 00 FF 
069a4     00 E4 85 F1 | 	sub	objptr, ##1536
069a8     F2 22 02 F1 | 	add	local03, objptr
069ac     08 22 06 F1 | 	add	local03, #8
069b0     11 39 68 FC | 	wrlong	#28, local03
069b4     03 00 00 FF 
069b8     00 E4 05 F1 | 	add	objptr, ##1536
069bc     F2 24 02 FB | 	rdlong	local04, objptr
069c0     12 23 02 F6 | 	mov	local03, local04
069c4     01 22 66 F0 | 	shl	local03, #1
069c8     12 23 02 F1 | 	add	local03, local04
069cc     02 22 66 F0 | 	shl	local03, #2
069d0     03 00 00 FF 
069d4     00 E4 85 F1 | 	sub	objptr, ##1536
069d8     F2 22 02 F1 | 	add	local03, objptr
069dc     11 21 62 FC | 	wrlong	local02, local03
069e0     03 00 00 FF 
069e4     00 E4 05 F1 | 	add	objptr, ##1536
069e8     F2 24 02 FB | 	rdlong	local04, objptr
069ec     01 24 06 F1 | 	add	local04, #1
069f0     F2 24 62 FC | 	wrlong	local04, objptr
069f4     12 23 02 F6 | 	mov	local03, local04
069f8     01 22 66 F0 | 	shl	local03, #1
069fc     12 23 02 F1 | 	add	local03, local04
06a00     02 22 66 F0 | 	shl	local03, #2
06a04     03 00 00 FF 
06a08     00 E4 85 F1 | 	sub	objptr, ##1536
06a0c     F2 22 02 F1 | 	add	local03, objptr
06a10     08 22 06 F1 | 	add	local03, #8
06a14     11 97 68 FC | 	wrlong	#75, local03
06a18     03 00 00 FF 
06a1c     00 E4 05 F1 | 	add	objptr, ##1536
06a20     F2 24 02 FB | 	rdlong	local04, objptr
06a24     12 23 02 F6 | 	mov	local03, local04
06a28     01 22 66 F0 | 	shl	local03, #1
06a2c     12 23 02 F1 | 	add	local03, local04
06a30     02 22 66 F0 | 	shl	local03, #2
06a34     03 00 00 FF 
06a38     00 E4 85 F1 | 	sub	objptr, ##1536
06a3c     F2 22 02 F1 | 	add	local03, objptr
06a40     11 01 68 FC | 	wrlong	#0, local03
06a44     03 00 00 FF 
06a48     00 E4 05 F1 | 	add	objptr, ##1536
06a4c     F2 24 02 FB | 	rdlong	local04, objptr
06a50     01 24 06 F1 | 	add	local04, #1
06a54     F2 24 62 FC | 	wrlong	local04, objptr
06a58     38 00 00 FF 
06a5c     40 E4 85 F1 | 	sub	objptr, ##28736
06a60                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
06a60                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
06a60                 | ' return 0
06a60     00 FA 05 F6 | 	mov	result1, #0
06a64                 | LR__0584
06a64     A7 F0 03 F6 | 	mov	ptra, fp
06a68     B2 00 A0 FD | 	call	#popregs_
06a6c                 | _compile_next_ret
06a6c     2D 00 64 FD | 	ret
06a70                 | 
06a70                 | ' 
06a70                 | ' 
06a70                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
06a70                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
06a70                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
06a70                 | ' 
06a70                 | ' 
06a70                 | ' function compile_goto( ) as ulong
06a70                 | _compile_goto
06a70     03 4A 05 F6 | 	mov	COUNT_, #3
06a74     A8 00 A0 FD | 	call	#pushregs_
06a78     28 F0 07 F1 | 	add	ptra, #40
06a7c                 | ' 
06a7c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
06a7c     25 00 00 FF 
06a80     08 E4 05 F1 | 	add	objptr, ##18952
06a84     F2 16 02 FB | 	rdlong	arg03, objptr
06a88     03 16 66 F0 | 	shl	arg03, #3
06a8c     02 00 00 FF 
06a90     38 E4 85 F1 | 	sub	objptr, ##1080
06a94     F2 16 02 F1 | 	add	arg03, objptr
06a98     04 16 06 F1 | 	add	arg03, #4
06a9c     0B 17 02 FB | 	rdlong	arg03, arg03
06aa0     01 00 00 FF 
06aa4     00 16 0E F2 | 	cmp	arg03, ##512 wz
06aa8     22 00 00 FF 
06aac     D0 E5 85 F1 | 	sub	objptr, ##17872
06ab0     CC 02 90 5D |  if_ne	jmp	#LR__0595
06ab4     25 00 00 FF 
06ab8     08 E4 05 F1 | 	add	objptr, ##18952
06abc     F2 16 02 FB | 	rdlong	arg03, objptr
06ac0     01 16 06 F1 | 	add	arg03, #1
06ac4     03 16 66 F0 | 	shl	arg03, #3
06ac8     02 00 00 FF 
06acc     38 E4 85 F1 | 	sub	objptr, ##1080
06ad0     F2 16 02 F1 | 	add	arg03, objptr
06ad4     04 16 06 F1 | 	add	arg03, #4
06ad8     0B 17 02 FB | 	rdlong	arg03, arg03
06adc     FE 17 0E F2 | 	cmp	arg03, #510 wz
06ae0     22 00 00 FF 
06ae4     D0 E5 85 F1 | 	sub	objptr, ##17872
06ae8     94 02 90 5D |  if_ne	jmp	#LR__0595
06aec     25 00 00 FF 
06af0     08 E4 05 F1 | 	add	objptr, ##18952
06af4     F2 16 02 FB | 	rdlong	arg03, objptr
06af8     03 16 66 F0 | 	shl	arg03, #3
06afc     02 00 00 FF 
06b00     38 E4 85 F1 | 	sub	objptr, ##1080
06b04     F2 16 02 F1 | 	add	arg03, objptr
06b08     0B 13 02 FB | 	rdlong	arg01, arg03
06b0c     00 14 06 F6 | 	mov	arg02, #0
06b10     22 00 00 FF 
06b14     D0 E5 85 F1 | 	sub	objptr, ##17872
06b18     A0 FF B0 FD | 	call	#__system____builtin_atoi
06b1c     04 4E 05 F1 | 	add	fp, #4
06b20     A7 FA 61 FC | 	wrlong	result1, fp
06b24     38 00 00 FF 
06b28     40 E4 05 F1 | 	add	objptr, ##28736
06b2c     F2 1E 02 FB | 	rdlong	local01, objptr
06b30     0F 21 02 F6 | 	mov	local02, local01
06b34     01 20 66 F0 | 	shl	local02, #1
06b38     0F 21 02 F1 | 	add	local02, local01
06b3c     02 20 66 F0 | 	shl	local02, #2
06b40     03 00 00 FF 
06b44     00 E4 85 F1 | 	sub	objptr, ##1536
06b48     F2 20 02 F1 | 	add	local02, objptr
06b4c     08 20 06 F1 | 	add	local02, #8
06b50     10 9D 68 FC | 	wrlong	#78, local02
06b54     03 00 00 FF 
06b58     08 E4 05 F1 | 	add	objptr, ##1544
06b5c     F2 22 02 FB | 	rdlong	local03, objptr
06b60     38 00 00 FF 
06b64     48 E4 85 F1 | 	sub	objptr, ##28744
06b68     04 4E 05 F1 | 	add	fp, #4
06b6c     A7 22 62 FC | 	wrlong	local03, fp
06b70     08 4E 85 F1 | 	sub	fp, #8
06b74                 | ' 
06b74                 | '   gotoline=val%(lparts(ct).part$) 
06b74                 | '   compiledline(lineptr).result_type=token_fast_goto
06b74                 | ' ' now find a pointer to goto
06b74                 | '   gotoptr=programstart
06b74                 | '   do
06b74                 | LR__0590
06b74     10 4E 05 F1 | 	add	fp, #16
06b78     A7 12 02 F6 | 	mov	arg01, fp
06b7c     08 4E 85 F1 | 	sub	fp, #8
06b80     A7 14 02 FB | 	rdlong	arg02, fp
06b84     08 4E 85 F1 | 	sub	fp, #8
06b88     18 16 06 F6 | 	mov	arg03, #24
06b8c     02 00 00 FF 
06b90     C0 E4 05 F1 | 	add	objptr, ##1216
06b94     74 C4 B0 FD | 	call	#_psram_spin2_read1
06b98     02 00 00 FF 
06b9c     C0 E4 85 F1 | 	sub	objptr, ##1216
06ba0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
06ba0                 | '     if gotoheader(0)<>$FFFFFFFF then
06ba0     10 4E 05 F1 | 	add	fp, #16
06ba4     A7 22 02 FB | 	rdlong	local03, fp
06ba8     10 4E 85 F1 | 	sub	fp, #16
06bac     FF FF 7F FF 
06bb0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
06bb4     24 00 90 AD |  if_e	jmp	#LR__0591
06bb8     08 4E 05 F1 | 	add	fp, #8
06bbc     A7 22 02 FB | 	rdlong	local03, fp
06bc0     04 4E 05 F1 | 	add	fp, #4
06bc4     A7 22 62 FC | 	wrlong	local03, fp
06bc8     18 4E 05 F1 | 	add	fp, #24
06bcc     A7 22 02 FB | 	rdlong	local03, fp
06bd0     1C 4E 85 F1 | 	sub	fp, #28
06bd4     A7 22 62 FC | 	wrlong	local03, fp
06bd8     08 4E 85 F1 | 	sub	fp, #8
06bdc                 | LR__0591
06bdc     24 4E 05 F1 | 	add	fp, #36
06be0     A7 22 02 FB | 	rdlong	local03, fp
06be4     24 4E 85 F1 | 	sub	fp, #36
06be8     FF FF 3F FF 
06bec     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
06bf0     10 4E 05 51 |  if_ne	add	fp, #16
06bf4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
06bf8     10 4E 85 51 |  if_ne	sub	fp, #16
06bfc     FF FF 7F 5F 
06c00     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
06c04     1C 00 90 AD |  if_e	jmp	#LR__0592
06c08     10 4E 05 F1 | 	add	fp, #16
06c0c     A7 22 02 FB | 	rdlong	local03, fp
06c10     0C 4E 85 F1 | 	sub	fp, #12
06c14     A7 20 02 FB | 	rdlong	local02, fp
06c18     04 4E 85 F1 | 	sub	fp, #4
06c1c     10 23 0A F2 | 	cmp	local03, local02 wz
06c20     50 FF 9F 5D |  if_ne	jmp	#LR__0590
06c24                 | LR__0592
06c24                 | '   if gotoheader(0)=gotoline then
06c24     10 4E 05 F1 | 	add	fp, #16
06c28     A7 22 02 FB | 	rdlong	local03, fp
06c2c     0C 4E 85 F1 | 	sub	fp, #12
06c30     A7 1E 02 FB | 	rdlong	local01, fp
06c34     04 4E 85 F1 | 	sub	fp, #4
06c38     0F 23 0A F2 | 	cmp	local03, local01 wz
06c3c     7C 00 90 5D |  if_ne	jmp	#LR__0593
06c40     38 00 00 FF 
06c44     40 E4 05 F1 | 	add	objptr, ##28736
06c48     F2 1E 02 FB | 	rdlong	local01, objptr
06c4c     0F 21 02 F6 | 	mov	local02, local01
06c50     01 20 66 F0 | 	shl	local02, #1
06c54     0F 21 02 F1 | 	add	local02, local01
06c58     02 20 66 F0 | 	shl	local02, #2
06c5c     03 00 00 FF 
06c60     00 E4 85 F1 | 	sub	objptr, ##1536
06c64     F2 20 02 F1 | 	add	local02, objptr
06c68     0C 4E 05 F1 | 	add	fp, #12
06c6c     A7 22 02 FB | 	rdlong	local03, fp
06c70     10 23 62 FC | 	wrlong	local03, local02
06c74     03 00 00 FF 
06c78     00 E4 05 F1 | 	add	objptr, ##1536
06c7c     F2 1E 02 FB | 	rdlong	local01, objptr
06c80     0F 21 02 F6 | 	mov	local02, local01
06c84     01 20 66 F0 | 	shl	local02, #1
06c88     0F 21 02 F1 | 	add	local02, local01
06c8c     02 20 66 F0 | 	shl	local02, #2
06c90     03 00 00 FF 
06c94     00 E4 85 F1 | 	sub	objptr, ##1536
06c98     F2 20 02 F1 | 	add	local02, objptr
06c9c     08 4E 85 F1 | 	sub	fp, #8
06ca0     A7 22 02 FB | 	rdlong	local03, fp
06ca4     04 4E 85 F1 | 	sub	fp, #4
06ca8     04 20 06 F1 | 	add	local02, #4
06cac     10 23 62 FC | 	wrlong	local03, local02
06cb0     35 00 00 FF 
06cb4     40 E4 85 F1 | 	sub	objptr, ##27200
06cb8     A4 00 90 FD | 	jmp	#LR__0594
06cbc                 | LR__0593
06cbc     38 00 00 FF 
06cc0     40 E4 05 F1 | 	add	objptr, ##28736
06cc4     F2 1E 02 FB | 	rdlong	local01, objptr
06cc8     0F 21 02 F6 | 	mov	local02, local01
06ccc     01 20 66 F0 | 	shl	local02, #1
06cd0     0F 21 02 F1 | 	add	local02, local01
06cd4     02 20 66 F0 | 	shl	local02, #2
06cd8     03 00 00 FF 
06cdc     00 E4 85 F1 | 	sub	objptr, ##1536
06ce0     F2 20 02 F1 | 	add	local02, objptr
06ce4     00 00 C0 FF 
06ce8     10 01 68 FC | 	wrlong	##-2147483648, local02
06cec     03 00 00 FF 
06cf0     00 E4 05 F1 | 	add	objptr, ##1536
06cf4     F2 1E 02 FB | 	rdlong	local01, objptr
06cf8     0F 21 02 F6 | 	mov	local02, local01
06cfc     01 20 66 F0 | 	shl	local02, #1
06d00     0F 21 02 F1 | 	add	local02, local01
06d04     02 20 66 F0 | 	shl	local02, #2
06d08     03 00 00 FF 
06d0c     00 E4 85 F1 | 	sub	objptr, ##1536
06d10     F2 20 02 F1 | 	add	local02, objptr
06d14     04 4E 05 F1 | 	add	fp, #4
06d18     A7 22 02 FB | 	rdlong	local03, fp
06d1c     04 4E 85 F1 | 	sub	fp, #4
06d20     04 20 06 F1 | 	add	local02, #4
06d24     10 23 62 FC | 	wrlong	local03, local02
06d28     03 00 00 FF 
06d2c     00 E4 05 F1 | 	add	objptr, ##1536
06d30     F2 1E 02 FB | 	rdlong	local01, objptr
06d34     0F 21 02 F6 | 	mov	local02, local01
06d38     01 20 66 F0 | 	shl	local02, #1
06d3c     0F 21 02 F1 | 	add	local02, local01
06d40     02 20 66 F0 | 	shl	local02, #2
06d44     03 00 00 FF 
06d48     00 E4 85 F1 | 	sub	objptr, ##1536
06d4c     F2 20 02 F1 | 	add	local02, objptr
06d50     08 20 06 F1 | 	add	local02, #8
06d54     10 A7 68 FC | 	wrlong	#83, local02
06d58     35 00 00 FF 
06d5c     40 E4 85 F1 | 	sub	objptr, ##27200
06d60                 | LR__0594
06d60     38 00 00 FF 
06d64     40 E4 05 F1 | 	add	objptr, ##28736
06d68     F2 22 02 FB | 	rdlong	local03, objptr
06d6c     01 22 06 F1 | 	add	local03, #1
06d70     F2 22 62 FC | 	wrlong	local03, objptr
06d74     38 00 00 FF 
06d78     40 E4 85 F1 | 	sub	objptr, ##28736
06d7c     40 00 90 FD | 	jmp	#LR__0596
06d80                 | LR__0595
06d80                 | '    print "We have a slow goto, todo  "
06d80     00 12 06 F6 | 	mov	arg01, #0
06d84     54 22 B1 FD | 	call	#__system___getiolock_0306
06d88     FD 12 02 F6 | 	mov	arg01, result1
06d8c     68 CD B0 FD | 	call	#__system___lockmem
06d90     18 01 00 FF 
06d94     E1 14 06 F6 | 	mov	arg02, ##@LR__4220
06d98     00 12 06 F6 | 	mov	arg01, #0
06d9c     00 16 06 F6 | 	mov	arg03, #0
06da0     60 D9 B0 FD | 	call	#__system___basic_print_string
06da4     00 12 06 F6 | 	mov	arg01, #0
06da8     0A 14 06 F6 | 	mov	arg02, #10
06dac     00 16 06 F6 | 	mov	arg03, #0
06db0     F8 D8 B0 FD | 	call	#__system___basic_print_char
06db4     00 12 06 F6 | 	mov	arg01, #0
06db8     20 22 B1 FD | 	call	#__system___getiolock_0306
06dbc     FD 00 68 FC | 	wrlong	#0, result1
06dc0                 | LR__0596
06dc0                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
06dc0                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
06dc0                 | ' return 0
06dc0     00 FA 05 F6 | 	mov	result1, #0
06dc4     A7 F0 03 F6 | 	mov	ptra, fp
06dc8     B2 00 A0 FD | 	call	#popregs_
06dcc                 | _compile_goto_ret
06dcc     2D 00 64 FD | 	ret
06dd0                 | 
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
06dd0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dd0                 | ' 
06dd0                 | ' 
06dd0                 | ' function expr() as integer 
06dd0                 | _expr
06dd0     07 4A 05 F6 | 	mov	COUNT_, #7
06dd4     A8 00 A0 FD | 	call	#pushregs_
06dd8                 | _expr_enter
06dd8     25 00 00 FF 
06ddc     08 E4 05 F1 | 	add	objptr, ##18952
06de0     F2 24 02 FB | 	rdlong	local04, objptr
06de4     03 24 66 F0 | 	shl	local04, #3
06de8     02 00 00 FF 
06dec     38 E4 85 F1 | 	sub	objptr, ##1080
06df0     F2 24 02 F1 | 	add	local04, objptr
06df4     04 24 06 F1 | 	add	local04, #4
06df8     12 27 02 FB | 	rdlong	local05, local04
06dfc                 | ' 
06dfc                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
06dfc     FE 27 0E F2 | 	cmp	local05, #510 wz
06e00     22 00 00 FF 
06e04     D0 E5 85 F1 | 	sub	objptr, ##17872
06e08     C4 00 90 5D |  if_ne	jmp	#LR__0600
06e0c     1D 1E 06 F6 | 	mov	local01, #29
06e10     FF 22 06 F6 | 	mov	local03, #255
06e14     0F 29 02 F6 | 	mov	local06, local01
06e18     10 2B 02 F6 | 	mov	local07, local02
06e1c     11 1F 02 F6 | 	mov	local01, local03
06e20     38 00 00 FF 
06e24     40 E4 05 F1 | 	add	objptr, ##28736
06e28     F2 26 02 FB | 	rdlong	local05, objptr
06e2c     13 25 02 F6 | 	mov	local04, local05
06e30     01 24 66 F0 | 	shl	local04, #1
06e34     13 25 02 F1 | 	add	local04, local05
06e38     02 24 66 F0 | 	shl	local04, #2
06e3c     03 00 00 FF 
06e40     00 E4 85 F1 | 	sub	objptr, ##1536
06e44     F2 24 02 F1 | 	add	local04, objptr
06e48     12 29 62 FC | 	wrlong	local06, local04
06e4c     03 00 00 FF 
06e50     00 E4 05 F1 | 	add	objptr, ##1536
06e54     F2 28 02 FB | 	rdlong	local06, objptr
06e58     14 27 02 F6 | 	mov	local05, local06
06e5c     01 26 66 F0 | 	shl	local05, #1
06e60     14 27 02 F1 | 	add	local05, local06
06e64     02 26 66 F0 | 	shl	local05, #2
06e68     03 00 00 FF 
06e6c     00 E4 85 F1 | 	sub	objptr, ##1536
06e70     F2 26 02 F1 | 	add	local05, objptr
06e74     04 26 06 F1 | 	add	local05, #4
06e78     13 2B 62 FC | 	wrlong	local07, local05
06e7c     03 00 00 FF 
06e80     00 E4 05 F1 | 	add	objptr, ##1536
06e84     F2 2A 02 FB | 	rdlong	local07, objptr
06e88     15 29 02 F6 | 	mov	local06, local07
06e8c     01 28 66 F0 | 	shl	local06, #1
06e90     15 29 02 F1 | 	add	local06, local07
06e94     02 28 66 F0 | 	shl	local06, #2
06e98     03 00 00 FF 
06e9c     00 E4 85 F1 | 	sub	objptr, ##1536
06ea0     F2 28 02 F1 | 	add	local06, objptr
06ea4     08 28 06 F1 | 	add	local06, #8
06ea8     14 1F 62 FC | 	wrlong	local01, local06
06eac     03 00 00 FF 
06eb0     00 E4 05 F1 | 	add	objptr, ##1536
06eb4     F2 28 02 FB | 	rdlong	local06, objptr
06eb8     01 28 06 F1 | 	add	local06, #1
06ebc     F2 28 62 FC | 	wrlong	local06, objptr
06ec0     38 00 00 FF 
06ec4     40 E4 85 F1 | 	sub	objptr, ##28736
06ec8     1D FA 05 F6 | 	mov	result1, #29
06ecc     54 01 90 FD | 	jmp	#LR__0603
06ed0                 | LR__0600
06ed0     00 1E 06 F6 | 	mov	local01, #0
06ed4     58 01 B0 FD | 	call	#_addsub
06ed8     25 00 00 FF 
06edc     08 E4 05 F1 | 	add	objptr, ##18952
06ee0     F2 24 02 FB | 	rdlong	local04, objptr
06ee4     03 24 66 F0 | 	shl	local04, #3
06ee8     02 00 00 FF 
06eec     38 E4 85 F1 | 	sub	objptr, ##1080
06ef0     F2 24 02 F1 | 	add	local04, objptr
06ef4     04 24 06 F1 | 	add	local04, #4
06ef8     12 27 02 FB | 	rdlong	local05, local04
06efc                 | ' t3.result.uresult=0
06efc                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
06efc                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
06efc                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
06efc     22 00 00 FF 
06f00     D0 E5 85 F1 | 	sub	objptr, ##17872
06f04                 | LR__0601
06f04     1B 26 0E F2 | 	cmp	local05, #27 wz
06f08     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
06f0c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
06f10     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
06f14     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
06f18     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
06f1c     00 01 90 5D |  if_ne	jmp	#LR__0602
06f20     25 00 00 FF 
06f24     08 E4 05 F1 | 	add	objptr, ##18952
06f28     F2 28 02 FB | 	rdlong	local06, objptr
06f2c     01 28 06 F1 | 	add	local06, #1
06f30     F2 28 62 FC | 	wrlong	local06, objptr
06f34     25 00 00 FF 
06f38     08 E4 85 F1 | 	sub	objptr, ##18952
06f3c     F0 00 B0 FD | 	call	#_addsub
06f40     13 23 02 F6 | 	mov	local03, local05
06f44     0F 29 02 F6 | 	mov	local06, local01
06f48     10 2B 02 F6 | 	mov	local07, local02
06f4c     11 27 02 F6 | 	mov	local05, local03
06f50     38 00 00 FF 
06f54     40 E4 05 F1 | 	add	objptr, ##28736
06f58     F2 24 02 FB | 	rdlong	local04, objptr
06f5c     12 FB 01 F6 | 	mov	result1, local04
06f60     01 FA 65 F0 | 	shl	result1, #1
06f64     12 FB 01 F1 | 	add	result1, local04
06f68     02 FA 65 F0 | 	shl	result1, #2
06f6c     03 00 00 FF 
06f70     00 E4 85 F1 | 	sub	objptr, ##1536
06f74     F2 FA 01 F1 | 	add	result1, objptr
06f78     FD 28 62 FC | 	wrlong	local06, result1
06f7c     03 00 00 FF 
06f80     00 E4 05 F1 | 	add	objptr, ##1536
06f84     F2 28 02 FB | 	rdlong	local06, objptr
06f88     14 25 02 F6 | 	mov	local04, local06
06f8c     01 24 66 F0 | 	shl	local04, #1
06f90     14 25 02 F1 | 	add	local04, local06
06f94     02 24 66 F0 | 	shl	local04, #2
06f98     03 00 00 FF 
06f9c     00 E4 85 F1 | 	sub	objptr, ##1536
06fa0     F2 24 02 F1 | 	add	local04, objptr
06fa4     04 24 06 F1 | 	add	local04, #4
06fa8     12 2B 62 FC | 	wrlong	local07, local04
06fac     03 00 00 FF 
06fb0     00 E4 05 F1 | 	add	objptr, ##1536
06fb4     F2 2A 02 FB | 	rdlong	local07, objptr
06fb8     15 29 02 F6 | 	mov	local06, local07
06fbc     01 28 66 F0 | 	shl	local06, #1
06fc0     15 29 02 F1 | 	add	local06, local07
06fc4     02 28 66 F0 | 	shl	local06, #2
06fc8     03 00 00 FF 
06fcc     00 E4 85 F1 | 	sub	objptr, ##1536
06fd0     F2 28 02 F1 | 	add	local06, objptr
06fd4     08 28 06 F1 | 	add	local06, #8
06fd8     14 27 62 FC | 	wrlong	local05, local06
06fdc     03 00 00 FF 
06fe0     00 E4 05 F1 | 	add	objptr, ##1536
06fe4     F2 28 02 FB | 	rdlong	local06, objptr
06fe8     01 28 06 F1 | 	add	local06, #1
06fec     F2 28 62 FC | 	wrlong	local06, objptr
06ff0     13 00 00 FF 
06ff4     38 E4 85 F1 | 	sub	objptr, ##9784
06ff8     F2 24 02 FB | 	rdlong	local04, objptr
06ffc     03 24 66 F0 | 	shl	local04, #3
07000     02 00 00 FF 
07004     38 E4 85 F1 | 	sub	objptr, ##1080
07008     F2 24 02 F1 | 	add	local04, objptr
0700c     04 24 06 F1 | 	add	local04, #4
07010     12 27 02 FB | 	rdlong	local05, local04
07014     22 00 00 FF 
07018     D0 E5 85 F1 | 	sub	objptr, ##17872
0701c     E4 FE 9F FD | 	jmp	#LR__0601
07020                 | LR__0602
07020                 | ' return 0  
07020     00 FA 05 F6 | 	mov	result1, #0
07024                 | LR__0603
07024     A7 F0 03 F6 | 	mov	ptra, fp
07028     B2 00 A0 FD | 	call	#popregs_
0702c                 | _expr_ret
0702c     2D 00 64 FD | 	ret
07030                 | 
07030                 | ' 
07030                 | ' 
07030                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07030                 | ' 
07030                 | ' function addsub() as integer 
07030                 | _addsub
07030     07 4A 05 F6 | 	mov	COUNT_, #7
07034     A8 00 A0 FD | 	call	#pushregs_
07038                 | _addsub_enter
07038     00 1E 06 F6 | 	mov	local01, #0
0703c     50 01 B0 FD | 	call	#_muldiv
07040     25 00 00 FF 
07044     08 E4 05 F1 | 	add	objptr, ##18952
07048     F2 24 02 FB | 	rdlong	local04, objptr
0704c     03 24 66 F0 | 	shl	local04, #3
07050     02 00 00 FF 
07054     38 E4 85 F1 | 	sub	objptr, ##1080
07058     F2 24 02 F1 | 	add	local04, objptr
0705c     04 24 06 F1 | 	add	local04, #4
07060     12 27 02 FB | 	rdlong	local05, local04
07064                 | ' t3.result.uresult=0
07064                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07064                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07064                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07064     22 00 00 FF 
07068     D0 E5 85 F1 | 	sub	objptr, ##17872
0706c                 | LR__0610
0706c     01 26 0E F2 | 	cmp	local05, #1 wz
07070     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07074     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07078     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0707c     00 01 90 5D |  if_ne	jmp	#LR__0611
07080     25 00 00 FF 
07084     08 E4 05 F1 | 	add	objptr, ##18952
07088     F2 24 02 FB | 	rdlong	local04, objptr
0708c     01 24 06 F1 | 	add	local04, #1
07090     F2 24 62 FC | 	wrlong	local04, objptr
07094     25 00 00 FF 
07098     08 E4 85 F1 | 	sub	objptr, ##18952
0709c     F0 00 B0 FD | 	call	#_muldiv
070a0     13 23 02 F6 | 	mov	local03, local05
070a4     0F 29 02 F6 | 	mov	local06, local01
070a8     10 2B 02 F6 | 	mov	local07, local02
070ac     11 27 02 F6 | 	mov	local05, local03
070b0     38 00 00 FF 
070b4     40 E4 05 F1 | 	add	objptr, ##28736
070b8     F2 24 02 FB | 	rdlong	local04, objptr
070bc     12 FB 01 F6 | 	mov	result1, local04
070c0     01 FA 65 F0 | 	shl	result1, #1
070c4     12 FB 01 F1 | 	add	result1, local04
070c8     02 FA 65 F0 | 	shl	result1, #2
070cc     03 00 00 FF 
070d0     00 E4 85 F1 | 	sub	objptr, ##1536
070d4     F2 FA 01 F1 | 	add	result1, objptr
070d8     FD 28 62 FC | 	wrlong	local06, result1
070dc     03 00 00 FF 
070e0     00 E4 05 F1 | 	add	objptr, ##1536
070e4     F2 28 02 FB | 	rdlong	local06, objptr
070e8     14 25 02 F6 | 	mov	local04, local06
070ec     01 24 66 F0 | 	shl	local04, #1
070f0     14 25 02 F1 | 	add	local04, local06
070f4     02 24 66 F0 | 	shl	local04, #2
070f8     03 00 00 FF 
070fc     00 E4 85 F1 | 	sub	objptr, ##1536
07100     F2 24 02 F1 | 	add	local04, objptr
07104     04 24 06 F1 | 	add	local04, #4
07108     12 2B 62 FC | 	wrlong	local07, local04
0710c     03 00 00 FF 
07110     00 E4 05 F1 | 	add	objptr, ##1536
07114     F2 2A 02 FB | 	rdlong	local07, objptr
07118     15 29 02 F6 | 	mov	local06, local07
0711c     01 28 66 F0 | 	shl	local06, #1
07120     15 29 02 F1 | 	add	local06, local07
07124     02 28 66 F0 | 	shl	local06, #2
07128     03 00 00 FF 
0712c     00 E4 85 F1 | 	sub	objptr, ##1536
07130     F2 28 02 F1 | 	add	local06, objptr
07134     08 28 06 F1 | 	add	local06, #8
07138     14 27 62 FC | 	wrlong	local05, local06
0713c     03 00 00 FF 
07140     00 E4 05 F1 | 	add	objptr, ##1536
07144     F2 28 02 FB | 	rdlong	local06, objptr
07148     01 28 06 F1 | 	add	local06, #1
0714c     F2 28 62 FC | 	wrlong	local06, objptr
07150     13 00 00 FF 
07154     38 E4 85 F1 | 	sub	objptr, ##9784
07158     F2 24 02 FB | 	rdlong	local04, objptr
0715c     03 24 66 F0 | 	shl	local04, #3
07160     02 00 00 FF 
07164     38 E4 85 F1 | 	sub	objptr, ##1080
07168     F2 24 02 F1 | 	add	local04, objptr
0716c     04 24 06 F1 | 	add	local04, #4
07170     12 27 02 FB | 	rdlong	local05, local04
07174     22 00 00 FF 
07178     D0 E5 85 F1 | 	sub	objptr, ##17872
0717c     EC FE 9F FD | 	jmp	#LR__0610
07180                 | LR__0611
07180                 | '   return 0
07180     00 FA 05 F6 | 	mov	result1, #0
07184     A7 F0 03 F6 | 	mov	ptra, fp
07188     B2 00 A0 FD | 	call	#popregs_
0718c                 | _addsub_ret
0718c     2D 00 64 FD | 	ret
07190                 | 
07190                 | ' 
07190                 | ' sub muldiv()
07190                 | _muldiv
07190     08 4A 05 F6 | 	mov	COUNT_, #8
07194     A8 00 A0 FD | 	call	#pushregs_
07198                 | _muldiv_enter
07198     00 1E 06 F6 | 	mov	local01, #0
0719c     58 01 B0 FD | 	call	#_getvalue
071a0     25 00 00 FF 
071a4     08 E4 05 F1 | 	add	objptr, ##18952
071a8     F2 24 02 FB | 	rdlong	local04, objptr
071ac     03 24 66 F0 | 	shl	local04, #3
071b0     02 00 00 FF 
071b4     38 E4 85 F1 | 	sub	objptr, ##1080
071b8     F2 24 02 F1 | 	add	local04, objptr
071bc     04 24 06 F1 | 	add	local04, #4
071c0     12 27 02 FB | 	rdlong	local05, local04
071c4                 | ' t3.result.uresult=0
071c4                 | ' getvalue()    
071c4                 | ' op = lparts(ct).token
071c4                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
071c4     22 00 00 FF 
071c8     D0 E5 85 F1 | 	sub	objptr, ##17872
071cc                 | LR__0620
071cc     05 26 0E F2 | 	cmp	local05, #5 wz
071d0     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
071d4     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
071d8     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
071dc     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
071e0     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
071e4     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
071e8     00 01 90 5D |  if_ne	jmp	#LR__0621
071ec     25 00 00 FF 
071f0     08 E4 05 F1 | 	add	objptr, ##18952
071f4     F2 24 02 FB | 	rdlong	local04, objptr
071f8     01 24 06 F1 | 	add	local04, #1
071fc     F2 24 62 FC | 	wrlong	local04, objptr
07200     25 00 00 FF 
07204     08 E4 85 F1 | 	sub	objptr, ##18952
07208     EC 00 B0 FD | 	call	#_getvalue
0720c     13 23 02 F6 | 	mov	local03, local05
07210     0F 29 02 F6 | 	mov	local06, local01
07214     10 2B 02 F6 | 	mov	local07, local02
07218     11 27 02 F6 | 	mov	local05, local03
0721c     38 00 00 FF 
07220     40 E4 05 F1 | 	add	objptr, ##28736
07224     F2 24 02 FB | 	rdlong	local04, objptr
07228     12 2D 02 F6 | 	mov	local08, local04
0722c     01 2C 66 F0 | 	shl	local08, #1
07230     12 2D 02 F1 | 	add	local08, local04
07234     02 2C 66 F0 | 	shl	local08, #2
07238     03 00 00 FF 
0723c     00 E4 85 F1 | 	sub	objptr, ##1536
07240     F2 2C 02 F1 | 	add	local08, objptr
07244     16 29 62 FC | 	wrlong	local06, local08
07248     03 00 00 FF 
0724c     00 E4 05 F1 | 	add	objptr, ##1536
07250     F2 2C 02 FB | 	rdlong	local08, objptr
07254     16 29 02 F6 | 	mov	local06, local08
07258     01 28 66 F0 | 	shl	local06, #1
0725c     16 29 02 F1 | 	add	local06, local08
07260     02 28 66 F0 | 	shl	local06, #2
07264     03 00 00 FF 
07268     00 E4 85 F1 | 	sub	objptr, ##1536
0726c     F2 28 02 F1 | 	add	local06, objptr
07270     04 28 06 F1 | 	add	local06, #4
07274     14 2B 62 FC | 	wrlong	local07, local06
07278     03 00 00 FF 
0727c     00 E4 05 F1 | 	add	objptr, ##1536
07280     F2 2C 02 FB | 	rdlong	local08, objptr
07284     16 2B 02 F6 | 	mov	local07, local08
07288     01 2A 66 F0 | 	shl	local07, #1
0728c     16 2B 02 F1 | 	add	local07, local08
07290     02 2A 66 F0 | 	shl	local07, #2
07294     03 00 00 FF 
07298     00 E4 85 F1 | 	sub	objptr, ##1536
0729c     F2 2A 02 F1 | 	add	local07, objptr
072a0     08 2A 06 F1 | 	add	local07, #8
072a4     15 27 62 FC | 	wrlong	local05, local07
072a8     03 00 00 FF 
072ac     00 E4 05 F1 | 	add	objptr, ##1536
072b0     F2 28 02 FB | 	rdlong	local06, objptr
072b4     01 28 06 F1 | 	add	local06, #1
072b8     F2 28 62 FC | 	wrlong	local06, objptr
072bc     13 00 00 FF 
072c0     38 E4 85 F1 | 	sub	objptr, ##9784
072c4     F2 24 02 FB | 	rdlong	local04, objptr
072c8     03 24 66 F0 | 	shl	local04, #3
072cc     02 00 00 FF 
072d0     38 E4 85 F1 | 	sub	objptr, ##1080
072d4     F2 24 02 F1 | 	add	local04, objptr
072d8     04 24 06 F1 | 	add	local04, #4
072dc     12 27 02 FB | 	rdlong	local05, local04
072e0     22 00 00 FF 
072e4     D0 E5 85 F1 | 	sub	objptr, ##17872
072e8     E0 FE 9F FD | 	jmp	#LR__0620
072ec                 | LR__0621
072ec     A7 F0 03 F6 | 	mov	ptra, fp
072f0     B2 00 A0 FD | 	call	#popregs_
072f4                 | _muldiv_ret
072f4     2D 00 64 FD | 	ret
072f8                 | 
072f8                 | ' 
072f8                 | ' sub getvalue() 
072f8                 | _getvalue
072f8     08 4A 05 F6 | 	mov	COUNT_, #8
072fc     A8 00 A0 FD | 	call	#pushregs_
07300                 | _getvalue_enter
07300     01 24 06 F6 | 	mov	local04, #1
07304     00 1E 06 F6 | 	mov	local01, #0
07308     1D 22 06 F6 | 	mov	local03, #29
0730c     25 00 00 FF 
07310     08 E4 05 F1 | 	add	objptr, ##18952
07314     F2 FA 01 FB | 	rdlong	result1, objptr
07318     03 FA 65 F0 | 	shl	result1, #3
0731c     02 00 00 FF 
07320     38 E4 85 F1 | 	sub	objptr, ##1080
07324     F2 FA 01 F1 | 	add	result1, objptr
07328     04 FA 05 F1 | 	add	result1, #4
0732c     FD 26 02 FB | 	rdlong	local05, result1
07330                 | ' m=1
07330                 | ' t1.result.uresult=0: t1.result_type=result_uint
07330                 | ' op=lparts(ct).token
07330                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07330     02 26 0E F2 | 	cmp	local05, #2 wz
07334     22 00 00 FF 
07338     D0 E5 85 F1 | 	sub	objptr, ##17872
0733c     38 00 90 5D |  if_ne	jmp	#LR__0630
07340     01 24 66 F6 | 	neg	local04, #1
07344     25 00 00 FF 
07348     08 E4 05 F1 | 	add	objptr, ##18952
0734c     F2 26 02 FB | 	rdlong	local05, objptr
07350     01 26 06 F1 | 	add	local05, #1
07354     F2 26 62 FC | 	wrlong	local05, objptr
07358     03 26 66 F0 | 	shl	local05, #3
0735c     02 00 00 FF 
07360     38 E4 85 F1 | 	sub	objptr, ##1080
07364     F2 26 02 F1 | 	add	local05, objptr
07368     04 26 06 F1 | 	add	local05, #4
0736c     13 27 02 FB | 	rdlong	local05, local05
07370     22 00 00 FF 
07374     D0 E5 85 F1 | 	sub	objptr, ##17872
07378                 | LR__0630
07378                 | ' select case op
07378     01 00 00 FF 
0737c     00 26 0E F2 | 	cmp	local05, ##512 wz
07380     3C 00 90 AD |  if_e	jmp	#LR__0631
07384     01 00 00 FF 
07388     01 26 0E F2 | 	cmp	local05, ##513 wz
0738c     88 01 90 AD |  if_e	jmp	#LR__0634
07390     01 00 00 FF 
07394     02 26 0E F2 | 	cmp	local05, ##514 wz
07398     84 02 90 AD |  if_e	jmp	#LR__0635
0739c     01 00 00 FF 
073a0     03 26 0E F2 | 	cmp	local05, ##515 wz
073a4     E8 03 90 AD |  if_e	jmp	#LR__0638
073a8     01 00 00 FF 
073ac     04 26 0E F2 | 	cmp	local05, ##516 wz
073b0     CC 04 90 AD |  if_e	jmp	#LR__0639
073b4     15 26 0E F2 | 	cmp	local05, #21 wz
073b8     EC 04 90 AD |  if_e	jmp	#LR__0640
073bc     5C 05 90 FD | 	jmp	#LR__0641
073c0                 | LR__0631
073c0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
073c0     01 24 0E F2 | 	cmp	local04, #1 wz
073c4     3C 00 90 5D |  if_ne	jmp	#LR__0632
073c8     25 00 00 FF 
073cc     08 E4 05 F1 | 	add	objptr, ##18952
073d0     F2 26 02 FB | 	rdlong	local05, objptr
073d4     03 26 66 F0 | 	shl	local05, #3
073d8     02 00 00 FF 
073dc     38 E4 85 F1 | 	sub	objptr, ##1080
073e0     F2 26 02 F1 | 	add	local05, objptr
073e4     13 13 02 FB | 	rdlong	arg01, local05
073e8     00 14 06 F6 | 	mov	arg02, #0
073ec     22 00 00 FF 
073f0     D0 E5 85 F1 | 	sub	objptr, ##17872
073f4     C4 F6 B0 FD | 	call	#__system____builtin_atoi
073f8     FD 24 02 FD | 	qmul	local04, result1
073fc     18 1E 62 FD | 	getqx	local01
07400     1D 22 06 F6 | 	mov	local03, #29
07404                 | LR__0632
07404                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07404     FF FF 7F FF 
07408     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0740c     3C 00 90 5D |  if_ne	jmp	#LR__0633
07410     25 00 00 FF 
07414     08 E4 05 F1 | 	add	objptr, ##18952
07418     F2 26 02 FB | 	rdlong	local05, objptr
0741c     03 26 66 F0 | 	shl	local05, #3
07420     02 00 00 FF 
07424     38 E4 85 F1 | 	sub	objptr, ##1080
07428     F2 26 02 F1 | 	add	local05, objptr
0742c     13 13 02 FB | 	rdlong	arg01, local05
07430     00 14 06 F6 | 	mov	arg02, #0
07434     22 00 00 FF 
07438     D0 E5 85 F1 | 	sub	objptr, ##17872
0743c     7C F6 B0 FD | 	call	#__system____builtin_atoi
07440     FD 24 02 FD | 	qmul	local04, result1
07444     18 1E 62 FD | 	getqx	local01
07448     1C 22 06 F6 | 	mov	local03, #28
0744c                 | LR__0633
0744c     0F 29 02 F6 | 	mov	local06, local01
07450     10 2B 02 F6 | 	mov	local07, local02
07454     11 27 02 F6 | 	mov	local05, local03
07458     38 00 00 FF 
0745c     40 E4 05 F1 | 	add	objptr, ##28736
07460     F2 1E 02 FB | 	rdlong	local01, objptr
07464     0F 25 02 F6 | 	mov	local04, local01
07468     01 24 66 F0 | 	shl	local04, #1
0746c     0F 25 02 F1 | 	add	local04, local01
07470     02 24 66 F0 | 	shl	local04, #2
07474     03 00 00 FF 
07478     00 E4 85 F1 | 	sub	objptr, ##1536
0747c     F2 24 02 F1 | 	add	local04, objptr
07480     12 29 62 FC | 	wrlong	local06, local04
07484     03 00 00 FF 
07488     00 E4 05 F1 | 	add	objptr, ##1536
0748c     F2 28 02 FB | 	rdlong	local06, objptr
07490     14 1F 02 F6 | 	mov	local01, local06
07494     01 1E 66 F0 | 	shl	local01, #1
07498     14 1F 02 F1 | 	add	local01, local06
0749c     02 1E 66 F0 | 	shl	local01, #2
074a0     03 00 00 FF 
074a4     00 E4 85 F1 | 	sub	objptr, ##1536
074a8     F2 1E 02 F1 | 	add	local01, objptr
074ac     04 1E 06 F1 | 	add	local01, #4
074b0     0F 2B 62 FC | 	wrlong	local07, local01
074b4     03 00 00 FF 
074b8     00 E4 05 F1 | 	add	objptr, ##1536
074bc     F2 2A 02 FB | 	rdlong	local07, objptr
074c0     15 29 02 F6 | 	mov	local06, local07
074c4     01 28 66 F0 | 	shl	local06, #1
074c8     15 29 02 F1 | 	add	local06, local07
074cc     02 28 66 F0 | 	shl	local06, #2
074d0     03 00 00 FF 
074d4     00 E4 85 F1 | 	sub	objptr, ##1536
074d8     F2 28 02 F1 | 	add	local06, objptr
074dc     08 28 06 F1 | 	add	local06, #8
074e0     14 27 62 FC | 	wrlong	local05, local06
074e4     03 00 00 FF 
074e8     00 E4 05 F1 | 	add	objptr, ##1536
074ec     F2 28 02 FB | 	rdlong	local06, objptr
074f0     01 28 06 F1 | 	add	local06, #1
074f4     F2 28 62 FC | 	wrlong	local06, objptr
074f8     13 00 00 FF 
074fc     38 E4 85 F1 | 	sub	objptr, ##9784
07500     F2 28 02 FB | 	rdlong	local06, objptr
07504     01 28 06 F1 | 	add	local06, #1
07508     F2 28 62 FC | 	wrlong	local06, objptr
0750c     25 00 00 FF 
07510     08 E4 85 F1 | 	sub	objptr, ##18952
07514     28 04 90 FD | 	jmp	#LR__0642
07518                 | LR__0634
07518     25 00 00 FF 
0751c     08 E4 05 F1 | 	add	objptr, ##18952
07520     F2 28 02 FB | 	rdlong	local06, objptr
07524     03 28 66 F0 | 	shl	local06, #3
07528     02 00 00 FF 
0752c     38 E4 85 F1 | 	sub	objptr, ##1080
07530     F2 28 02 F1 | 	add	local06, objptr
07534     14 13 02 FB | 	rdlong	arg01, local06
07538     00 14 06 F6 | 	mov	arg02, #0
0753c     22 00 00 FF 
07540     D0 E5 85 F1 | 	sub	objptr, ##17872
07544     74 F5 B0 FD | 	call	#__system____builtin_atoi
07548     FD 24 02 FD | 	qmul	local04, result1
0754c     38 00 00 FF 
07550     40 E4 05 F1 | 	add	objptr, ##28736
07554     F2 28 02 FB | 	rdlong	local06, objptr
07558     14 2D 02 F6 | 	mov	local08, local06
0755c     01 2C 66 F0 | 	shl	local08, #1
07560     14 2D 02 F1 | 	add	local08, local06
07564     02 2C 66 F0 | 	shl	local08, #2
07568     03 00 00 FF 
0756c     00 E4 85 F1 | 	sub	objptr, ##1536
07570     F2 2C 02 F1 | 	add	local08, objptr
07574     03 00 00 FF 
07578     00 E4 05 F1 | 	add	objptr, ##1536
0757c     18 1E 62 FD | 	getqx	local01
07580     1C 22 06 F6 | 	mov	local03, #28
07584     0F 29 02 F6 | 	mov	local06, local01
07588     10 2B 02 F6 | 	mov	local07, local02
0758c     16 29 62 FC | 	wrlong	local06, local08
07590     11 2D 02 F6 | 	mov	local08, local03
07594     F2 28 02 FB | 	rdlong	local06, objptr
07598     14 27 02 F6 | 	mov	local05, local06
0759c     01 26 66 F0 | 	shl	local05, #1
075a0     14 27 02 F1 | 	add	local05, local06
075a4     02 26 66 F0 | 	shl	local05, #2
075a8     03 00 00 FF 
075ac     00 E4 85 F1 | 	sub	objptr, ##1536
075b0     F2 26 02 F1 | 	add	local05, objptr
075b4     04 26 06 F1 | 	add	local05, #4
075b8     13 2B 62 FC | 	wrlong	local07, local05
075bc     03 00 00 FF 
075c0     00 E4 05 F1 | 	add	objptr, ##1536
075c4     F2 2A 02 FB | 	rdlong	local07, objptr
075c8     15 29 02 F6 | 	mov	local06, local07
075cc     01 28 66 F0 | 	shl	local06, #1
075d0     15 29 02 F1 | 	add	local06, local07
075d4     02 28 66 F0 | 	shl	local06, #2
075d8     03 00 00 FF 
075dc     00 E4 85 F1 | 	sub	objptr, ##1536
075e0     F2 28 02 F1 | 	add	local06, objptr
075e4     08 28 06 F1 | 	add	local06, #8
075e8     14 2D 62 FC | 	wrlong	local08, local06
075ec     03 00 00 FF 
075f0     00 E4 05 F1 | 	add	objptr, ##1536
075f4     F2 28 02 FB | 	rdlong	local06, objptr
075f8     01 28 06 F1 | 	add	local06, #1
075fc     F2 28 62 FC | 	wrlong	local06, objptr
07600     13 00 00 FF 
07604     38 E4 85 F1 | 	sub	objptr, ##9784
07608     F2 28 02 FB | 	rdlong	local06, objptr
0760c     01 28 06 F1 | 	add	local06, #1
07610     F2 28 62 FC | 	wrlong	local06, objptr
07614     25 00 00 FF 
07618     08 E4 85 F1 | 	sub	objptr, ##18952
0761c     20 03 90 FD | 	jmp	#LR__0642
07620                 | LR__0635
07620                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07620     01 24 0E F2 | 	cmp	local04, #1 wz
07624     48 00 90 5D |  if_ne	jmp	#LR__0636
07628     00 C0 1F FF 
0762c     00 28 06 F6 | 	mov	local06, ##1065353216
07630     25 00 00 FF 
07634     08 E4 05 F1 | 	add	objptr, ##18952
07638     F2 2C 02 FB | 	rdlong	local08, objptr
0763c     03 2C 66 F0 | 	shl	local08, #3
07640     02 00 00 FF 
07644     38 E4 85 F1 | 	sub	objptr, ##1080
07648     F2 2C 02 F1 | 	add	local08, objptr
0764c     16 13 02 FB | 	rdlong	arg01, local08
07650     22 00 00 FF 
07654     D0 E5 85 F1 | 	sub	objptr, ##17872
07658     D0 F5 B0 FD | 	call	#__system____builtin_atof
0765c     FD 14 02 F6 | 	mov	arg02, result1
07660     14 13 02 F6 | 	mov	arg01, local06
07664     DC ED B0 FD | 	call	#__system___float_mul
07668     FD 1E 02 F6 | 	mov	local01, result1
0766c     1E 22 06 F6 | 	mov	local03, #30
07670                 | LR__0636
07670                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07670     FF FF 7F FF 
07674     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07678     48 00 90 5D |  if_ne	jmp	#LR__0637
0767c     00 C0 5F FF 
07680     00 28 06 F6 | 	mov	local06, ##-1082130432
07684     25 00 00 FF 
07688     08 E4 05 F1 | 	add	objptr, ##18952
0768c     F2 2C 02 FB | 	rdlong	local08, objptr
07690     03 2C 66 F0 | 	shl	local08, #3
07694     02 00 00 FF 
07698     38 E4 85 F1 | 	sub	objptr, ##1080
0769c     F2 2C 02 F1 | 	add	local08, objptr
076a0     16 13 02 FB | 	rdlong	arg01, local08
076a4     22 00 00 FF 
076a8     D0 E5 85 F1 | 	sub	objptr, ##17872
076ac     7C F5 B0 FD | 	call	#__system____builtin_atof
076b0     FD 14 02 F6 | 	mov	arg02, result1
076b4     14 13 02 F6 | 	mov	arg01, local06
076b8     88 ED B0 FD | 	call	#__system___float_mul
076bc     FD 1E 02 F6 | 	mov	local01, result1
076c0     1E 22 06 F6 | 	mov	local03, #30
076c4                 | LR__0637
076c4     0F 29 02 F6 | 	mov	local06, local01
076c8     10 2B 02 F6 | 	mov	local07, local02
076cc     11 27 02 F6 | 	mov	local05, local03
076d0     38 00 00 FF 
076d4     40 E4 05 F1 | 	add	objptr, ##28736
076d8     F2 1E 02 FB | 	rdlong	local01, objptr
076dc     0F 2D 02 F6 | 	mov	local08, local01
076e0     01 2C 66 F0 | 	shl	local08, #1
076e4     0F 2D 02 F1 | 	add	local08, local01
076e8     02 2C 66 F0 | 	shl	local08, #2
076ec     03 00 00 FF 
076f0     00 E4 85 F1 | 	sub	objptr, ##1536
076f4     F2 2C 02 F1 | 	add	local08, objptr
076f8     16 29 62 FC | 	wrlong	local06, local08
076fc     03 00 00 FF 
07700     00 E4 05 F1 | 	add	objptr, ##1536
07704     F2 2C 02 FB | 	rdlong	local08, objptr
07708     16 29 02 F6 | 	mov	local06, local08
0770c     01 28 66 F0 | 	shl	local06, #1
07710     16 29 02 F1 | 	add	local06, local08
07714     02 28 66 F0 | 	shl	local06, #2
07718     03 00 00 FF 
0771c     00 E4 85 F1 | 	sub	objptr, ##1536
07720     F2 28 02 F1 | 	add	local06, objptr
07724     04 28 06 F1 | 	add	local06, #4
07728     14 2B 62 FC | 	wrlong	local07, local06
0772c     03 00 00 FF 
07730     00 E4 05 F1 | 	add	objptr, ##1536
07734     F2 2C 02 FB | 	rdlong	local08, objptr
07738     16 2B 02 F6 | 	mov	local07, local08
0773c     01 2A 66 F0 | 	shl	local07, #1
07740     16 2B 02 F1 | 	add	local07, local08
07744     02 2A 66 F0 | 	shl	local07, #2
07748     03 00 00 FF 
0774c     00 E4 85 F1 | 	sub	objptr, ##1536
07750     F2 2A 02 F1 | 	add	local07, objptr
07754     08 2A 06 F1 | 	add	local07, #8
07758     15 27 62 FC | 	wrlong	local05, local07
0775c     03 00 00 FF 
07760     00 E4 05 F1 | 	add	objptr, ##1536
07764     F2 28 02 FB | 	rdlong	local06, objptr
07768     01 28 06 F1 | 	add	local06, #1
0776c     F2 28 62 FC | 	wrlong	local06, objptr
07770     13 00 00 FF 
07774     38 E4 85 F1 | 	sub	objptr, ##9784
07778     F2 28 02 FB | 	rdlong	local06, objptr
0777c     01 28 06 F1 | 	add	local06, #1
07780     F2 28 62 FC | 	wrlong	local06, objptr
07784     25 00 00 FF 
07788     08 E4 85 F1 | 	sub	objptr, ##18952
0778c     B0 01 90 FD | 	jmp	#LR__0642
07790                 | LR__0638
07790     25 00 00 FF 
07794     08 E4 05 F1 | 	add	objptr, ##18952
07798     F2 28 02 FB | 	rdlong	local06, objptr
0779c     03 28 66 F0 | 	shl	local06, #3
077a0     02 00 00 FF 
077a4     38 E4 85 F1 | 	sub	objptr, ##1080
077a8     F2 28 02 F1 | 	add	local06, objptr
077ac     14 1F 02 FB | 	rdlong	local01, local06
077b0     1F 22 06 F6 | 	mov	local03, #31
077b4     0F 29 02 F6 | 	mov	local06, local01
077b8     10 2B 02 F6 | 	mov	local07, local02
077bc     11 27 02 F6 | 	mov	local05, local03
077c0     15 00 00 FF 
077c4     70 E4 05 F1 | 	add	objptr, ##10864
077c8     F2 1E 02 FB | 	rdlong	local01, objptr
077cc     0F 2D 02 F6 | 	mov	local08, local01
077d0     01 2C 66 F0 | 	shl	local08, #1
077d4     0F 2D 02 F1 | 	add	local08, local01
077d8     02 2C 66 F0 | 	shl	local08, #2
077dc     03 00 00 FF 
077e0     00 E4 85 F1 | 	sub	objptr, ##1536
077e4     F2 2C 02 F1 | 	add	local08, objptr
077e8     16 29 62 FC | 	wrlong	local06, local08
077ec     03 00 00 FF 
077f0     00 E4 05 F1 | 	add	objptr, ##1536
077f4     F2 2C 02 FB | 	rdlong	local08, objptr
077f8     16 29 02 F6 | 	mov	local06, local08
077fc     01 28 66 F0 | 	shl	local06, #1
07800     16 29 02 F1 | 	add	local06, local08
07804     02 28 66 F0 | 	shl	local06, #2
07808     03 00 00 FF 
0780c     00 E4 85 F1 | 	sub	objptr, ##1536
07810     F2 28 02 F1 | 	add	local06, objptr
07814     04 28 06 F1 | 	add	local06, #4
07818     14 2B 62 FC | 	wrlong	local07, local06
0781c     03 00 00 FF 
07820     00 E4 05 F1 | 	add	objptr, ##1536
07824     F2 2C 02 FB | 	rdlong	local08, objptr
07828     16 2B 02 F6 | 	mov	local07, local08
0782c     01 2A 66 F0 | 	shl	local07, #1
07830     16 2B 02 F1 | 	add	local07, local08
07834     02 2A 66 F0 | 	shl	local07, #2
07838     03 00 00 FF 
0783c     00 E4 85 F1 | 	sub	objptr, ##1536
07840     F2 2A 02 F1 | 	add	local07, objptr
07844     08 2A 06 F1 | 	add	local07, #8
07848     15 27 62 FC | 	wrlong	local05, local07
0784c     03 00 00 FF 
07850     00 E4 05 F1 | 	add	objptr, ##1536
07854     F2 28 02 FB | 	rdlong	local06, objptr
07858     01 28 06 F1 | 	add	local06, #1
0785c     F2 28 62 FC | 	wrlong	local06, objptr
07860     13 00 00 FF 
07864     38 E4 85 F1 | 	sub	objptr, ##9784
07868     F2 28 02 FB | 	rdlong	local06, objptr
0786c     01 28 06 F1 | 	add	local06, #1
07870     F2 28 62 FC | 	wrlong	local06, objptr
07874     25 00 00 FF 
07878     08 E4 85 F1 | 	sub	objptr, ##18952
0787c     C0 00 90 FD | 	jmp	#LR__0642
07880                 | LR__0639
07880     12 13 02 F6 | 	mov	arg01, local04
07884     B8 03 B0 FD | 	call	#_getvar
07888     25 00 00 FF 
0788c     08 E4 05 F1 | 	add	objptr, ##18952
07890     F2 28 02 FB | 	rdlong	local06, objptr
07894     01 28 06 F1 | 	add	local06, #1
07898     F2 28 62 FC | 	wrlong	local06, objptr
0789c     25 00 00 FF 
078a0     08 E4 85 F1 | 	sub	objptr, ##18952
078a4     98 00 90 FD | 	jmp	#LR__0642
078a8                 | LR__0640
078a8     25 00 00 FF 
078ac     08 E4 05 F1 | 	add	objptr, ##18952
078b0     F2 28 02 FB | 	rdlong	local06, objptr
078b4     01 28 06 F1 | 	add	local06, #1
078b8     F2 28 62 FC | 	wrlong	local06, objptr
078bc     25 00 00 FF 
078c0     08 E4 85 F1 | 	sub	objptr, ##18952
078c4     08 F5 BF FD | 	call	#_expr
078c8                 | '     ct+=1
078c8                 | '     expr() 
078c8                 | '     if lparts(ct).token=token_rpar then ct+=1
078c8     25 00 00 FF 
078cc     08 E4 05 F1 | 	add	objptr, ##18952
078d0     F2 2C 02 FB | 	rdlong	local08, objptr
078d4     03 2C 66 F0 | 	shl	local08, #3
078d8     02 00 00 FF 
078dc     38 E4 85 F1 | 	sub	objptr, ##1080
078e0     F2 2C 02 F1 | 	add	local08, objptr
078e4     04 2C 06 F1 | 	add	local08, #4
078e8     16 2D 02 FB | 	rdlong	local08, local08
078ec     14 2C 0E F2 | 	cmp	local08, #20 wz
078f0     22 00 00 FF 
078f4     D0 E5 85 F1 | 	sub	objptr, ##17872
078f8     44 00 90 5D |  if_ne	jmp	#LR__0642
078fc     25 00 00 FF 
07900     08 E4 05 F1 | 	add	objptr, ##18952
07904     F2 28 02 FB | 	rdlong	local06, objptr
07908     01 28 06 F1 | 	add	local06, #1
0790c     F2 28 62 FC | 	wrlong	local06, objptr
07910     25 00 00 FF 
07914     08 E4 85 F1 | 	sub	objptr, ##18952
07918     24 00 90 FD | 	jmp	#LR__0642
0791c                 | LR__0641
0791c     12 13 02 F6 | 	mov	arg01, local04
07920     28 00 B0 FD | 	call	#_getfun
07924     25 00 00 FF 
07928     08 E4 05 F1 | 	add	objptr, ##18952
0792c     F2 28 02 FB | 	rdlong	local06, objptr
07930     01 28 06 F1 | 	add	local06, #1
07934     F2 28 62 FC | 	wrlong	local06, objptr
07938     25 00 00 FF 
0793c     08 E4 85 F1 | 	sub	objptr, ##18952
07940                 | LR__0642
07940     A7 F0 03 F6 | 	mov	ptra, fp
07944     B2 00 A0 FD | 	call	#popregs_
07948                 | _getvalue_ret
07948     2D 00 64 FD | 	ret
0794c                 | 
0794c                 | ' 
0794c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0794c                 | _getfun
0794c     0A 4A 05 F6 | 	mov	COUNT_, #10
07950     A8 00 A0 FD | 	call	#pushregs_
07954                 | _getfun_enter
07954     09 25 02 F6 | 	mov	local04, arg01
07958     25 00 00 FF 
0795c     08 E4 05 F1 | 	add	objptr, ##18952
07960     F2 26 02 FB | 	rdlong	local05, objptr
07964     13 29 02 F6 | 	mov	local06, local05
07968     00 2A 06 F6 | 	mov	local07, #0
0796c                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0796c                 | ' oldct=ct
0796c                 | ' numpar=0
0796c                 | '   
0796c                 | ' if lparts(ct+1).token=token_lpar then
0796c     01 26 06 F1 | 	add	local05, #1
07970     03 26 66 F0 | 	shl	local05, #3
07974     02 00 00 FF 
07978     38 E4 85 F1 | 	sub	objptr, ##1080
0797c     F2 26 02 F1 | 	add	local05, objptr
07980     04 26 06 F1 | 	add	local05, #4
07984     13 27 02 FB | 	rdlong	local05, local05
07988     15 26 0E F2 | 	cmp	local05, #21 wz
0798c     22 00 00 FF 
07990     D0 E5 85 F1 | 	sub	objptr, ##17872
07994     08 01 90 5D |  if_ne	jmp	#LR__0654
07998     25 00 00 FF 
0799c     08 E4 05 F1 | 	add	objptr, ##18952
079a0     F2 2C 02 FB | 	rdlong	local08, objptr
079a4     01 2C 06 F1 | 	add	local08, #1
079a8     F2 2C 62 FC | 	wrlong	local08, objptr
079ac     25 00 00 FF 
079b0     08 E4 85 F1 | 	sub	objptr, ##18952
079b4                 | '   ct+=1 											' omit this lpar, this is for expr list
079b4                 | '   do
079b4                 | LR__0650
079b4     25 00 00 FF 
079b8     08 E4 05 F1 | 	add	objptr, ##18952
079bc     F2 26 02 FB | 	rdlong	local05, objptr
079c0     01 26 06 F1 | 	add	local05, #1
079c4     F2 26 62 FC | 	wrlong	local05, objptr
079c8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
079c8                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
079c8     03 26 66 F0 | 	shl	local05, #3
079cc     02 00 00 FF 
079d0     38 E4 85 F1 | 	sub	objptr, ##1080
079d4     F2 26 02 F1 | 	add	local05, objptr
079d8     04 26 06 F1 | 	add	local05, #4
079dc     13 2D 02 FB | 	rdlong	local08, local05
079e0     15 2C 0E F2 | 	cmp	local08, #21 wz
079e4     22 00 00 FF 
079e8     D0 E5 85 F1 | 	sub	objptr, ##17872
079ec     40 00 90 5D |  if_ne	jmp	#LR__0651
079f0     25 00 00 FF 
079f4     08 E4 05 F1 | 	add	objptr, ##18952
079f8     F2 2C 02 FB | 	rdlong	local08, objptr
079fc     01 2C 06 F1 | 	add	local08, #1
07a00     F2 2C 62 FC | 	wrlong	local08, objptr
07a04     25 00 00 FF 
07a08     08 E4 85 F1 | 	sub	objptr, ##18952
07a0c     C0 F3 BF FD | 	call	#_expr
07a10     25 00 00 FF 
07a14     08 E4 05 F1 | 	add	objptr, ##18952
07a18     F2 2C 02 FB | 	rdlong	local08, objptr
07a1c     01 2C 06 F1 | 	add	local08, #1
07a20     F2 2C 62 FC | 	wrlong	local08, objptr
07a24     25 00 00 FF 
07a28     08 E4 85 F1 | 	sub	objptr, ##18952
07a2c     04 00 90 FD | 	jmp	#LR__0652
07a30                 | LR__0651
07a30     9C F3 BF FD | 	call	#_expr
07a34                 | LR__0652
07a34     01 2A 06 F1 | 	add	local07, #1
07a38     25 00 00 FF 
07a3c     08 E4 05 F1 | 	add	objptr, ##18952
07a40     F2 26 02 FB | 	rdlong	local05, objptr
07a44     03 26 66 F0 | 	shl	local05, #3
07a48     02 00 00 FF 
07a4c     38 E4 85 F1 | 	sub	objptr, ##1080
07a50     F2 26 02 F1 | 	add	local05, objptr
07a54     04 26 06 F1 | 	add	local05, #4
07a58     13 2D 02 FB | 	rdlong	local08, local05
07a5c     14 2C 0E F2 | 	cmp	local08, #20 wz
07a60     22 00 00 FF 
07a64     D0 E5 85 F1 | 	sub	objptr, ##17872
07a68     34 00 90 AD |  if_e	jmp	#LR__0653
07a6c     25 00 00 FF 
07a70     08 E4 05 F1 | 	add	objptr, ##18952
07a74     F2 2C 02 FB | 	rdlong	local08, objptr
07a78     03 2C 66 F0 | 	shl	local08, #3
07a7c     02 00 00 FF 
07a80     38 E4 85 F1 | 	sub	objptr, ##1080
07a84     F2 2C 02 F1 | 	add	local08, objptr
07a88     04 2C 06 F1 | 	add	local08, #4
07a8c     16 2D 02 FB | 	rdlong	local08, local08
07a90     FE 2D 0E F2 | 	cmp	local08, #510 wz
07a94     22 00 00 FF 
07a98     D0 E5 85 F1 | 	sub	objptr, ##17872
07a9c     14 FF 9F 5D |  if_ne	jmp	#LR__0650
07aa0                 | LR__0653
07aa0                 | LR__0654
07aa0     15 1F 02 F6 | 	mov	local01, local07
07aa4     03 28 66 F0 | 	shl	local06, #3
07aa8     22 00 00 FF 
07aac     D0 E5 05 F1 | 	add	objptr, ##17872
07ab0     F2 28 02 F1 | 	add	local06, objptr
07ab4     04 28 06 F1 | 	add	local06, #4
07ab8     14 23 02 FB | 	rdlong	local03, local06
07abc     0F 2D 02 F6 | 	mov	local08, local01
07ac0     10 2B 02 F6 | 	mov	local07, local02
07ac4     11 29 02 F6 | 	mov	local06, local03
07ac8     15 00 00 FF 
07acc     70 E4 05 F1 | 	add	objptr, ##10864
07ad0     F2 26 02 FB | 	rdlong	local05, objptr
07ad4     13 13 02 F6 | 	mov	arg01, local05
07ad8     01 12 66 F0 | 	shl	arg01, #1
07adc     13 13 02 F1 | 	add	arg01, local05
07ae0     02 12 66 F0 | 	shl	arg01, #2
07ae4     03 00 00 FF 
07ae8     00 E4 85 F1 | 	sub	objptr, ##1536
07aec     F2 12 02 F1 | 	add	arg01, objptr
07af0     09 2D 62 FC | 	wrlong	local08, arg01
07af4     03 00 00 FF 
07af8     00 E4 05 F1 | 	add	objptr, ##1536
07afc     F2 2C 02 FB | 	rdlong	local08, objptr
07b00     16 2F 02 F6 | 	mov	local09, local08
07b04     01 2E 66 F0 | 	shl	local09, #1
07b08     16 2F 02 F1 | 	add	local09, local08
07b0c     02 2E 66 F0 | 	shl	local09, #2
07b10     03 00 00 FF 
07b14     00 E4 85 F1 | 	sub	objptr, ##1536
07b18     F2 2E 02 F1 | 	add	local09, objptr
07b1c     04 2E 06 F1 | 	add	local09, #4
07b20     17 2B 62 FC | 	wrlong	local07, local09
07b24     03 00 00 FF 
07b28     00 E4 05 F1 | 	add	objptr, ##1536
07b2c     F2 2C 02 FB | 	rdlong	local08, objptr
07b30     16 31 02 F6 | 	mov	local10, local08
07b34     01 30 66 F0 | 	shl	local10, #1
07b38     16 31 02 F1 | 	add	local10, local08
07b3c     02 30 66 F0 | 	shl	local10, #2
07b40     03 00 00 FF 
07b44     00 E4 85 F1 | 	sub	objptr, ##1536
07b48     F2 30 02 F1 | 	add	local10, objptr
07b4c     08 30 06 F1 | 	add	local10, #8
07b50     18 29 62 FC | 	wrlong	local06, local10
07b54     03 00 00 FF 
07b58     00 E4 05 F1 | 	add	objptr, ##1536
07b5c     F2 2C 02 FB | 	rdlong	local08, objptr
07b60     01 2C 06 F1 | 	add	local08, #1
07b64     F2 2C 62 FC | 	wrlong	local08, objptr
07b68     38 00 00 FF 
07b6c     40 E4 85 F1 | 	sub	objptr, ##28736
07b70                 | ' 
07b70                 | ' t2.result.uresult=numpar
07b70                 | ' 
07b70                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
07b70                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
07b70                 | ' 
07b70                 | '   
07b70                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
07b70     FF FF 7F FF 
07b74     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07b78     B8 00 90 5D |  if_ne	jmp	#LR__0655
07b7c     15 22 06 F6 | 	mov	local03, #21
07b80     0F 2D 02 F6 | 	mov	local08, local01
07b84     10 2B 02 F6 | 	mov	local07, local02
07b88     11 29 02 F6 | 	mov	local06, local03
07b8c     38 00 00 FF 
07b90     40 E4 05 F1 | 	add	objptr, ##28736
07b94     F2 26 02 FB | 	rdlong	local05, objptr
07b98     13 13 02 F6 | 	mov	arg01, local05
07b9c     01 12 66 F0 | 	shl	arg01, #1
07ba0     13 13 02 F1 | 	add	arg01, local05
07ba4     02 12 66 F0 | 	shl	arg01, #2
07ba8     03 00 00 FF 
07bac     00 E4 85 F1 | 	sub	objptr, ##1536
07bb0     F2 12 02 F1 | 	add	arg01, objptr
07bb4     09 2D 62 FC | 	wrlong	local08, arg01
07bb8     03 00 00 FF 
07bbc     00 E4 05 F1 | 	add	objptr, ##1536
07bc0     F2 30 02 FB | 	rdlong	local10, objptr
07bc4     18 2F 02 F6 | 	mov	local09, local10
07bc8     01 2E 66 F0 | 	shl	local09, #1
07bcc     18 2F 02 F1 | 	add	local09, local10
07bd0     02 2E 66 F0 | 	shl	local09, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 2E 02 F1 | 	add	local09, objptr
07be0     04 2E 06 F1 | 	add	local09, #4
07be4     17 2B 62 FC | 	wrlong	local07, local09
07be8     03 00 00 FF 
07bec     00 E4 05 F1 | 	add	objptr, ##1536
07bf0     F2 2E 02 FB | 	rdlong	local09, objptr
07bf4     17 31 02 F6 | 	mov	local10, local09
07bf8     01 30 66 F0 | 	shl	local10, #1
07bfc     17 31 02 F1 | 	add	local10, local09
07c00     02 30 66 F0 | 	shl	local10, #2
07c04     03 00 00 FF 
07c08     00 E4 85 F1 | 	sub	objptr, ##1536
07c0c     F2 30 02 F1 | 	add	local10, objptr
07c10     08 30 06 F1 | 	add	local10, #8
07c14     18 29 62 FC | 	wrlong	local06, local10
07c18     03 00 00 FF 
07c1c     00 E4 05 F1 | 	add	objptr, ##1536
07c20     F2 2C 02 FB | 	rdlong	local08, objptr
07c24     01 2C 06 F1 | 	add	local08, #1
07c28     F2 2C 62 FC | 	wrlong	local08, objptr
07c2c     38 00 00 FF 
07c30     40 E4 85 F1 | 	sub	objptr, ##28736
07c34                 | LR__0655
07c34     A7 F0 03 F6 | 	mov	ptra, fp
07c38     B2 00 A0 FD | 	call	#popregs_
07c3c                 | _getfun_ret
07c3c     2D 00 64 FD | 	ret
07c40                 | 
07c40                 | '   
07c40                 | '   
07c40                 | ' sub getvar(m as integer) 
07c40                 | _getvar
07c40     08 4A 05 F6 | 	mov	COUNT_, #8
07c44     A8 00 A0 FD | 	call	#pushregs_
07c48     09 25 02 F6 | 	mov	local04, arg01
07c4c     25 00 00 FF 
07c50     08 E4 05 F1 | 	add	objptr, ##18952
07c54     F2 14 02 FB | 	rdlong	arg02, objptr
07c58     03 14 66 F0 | 	shl	arg02, #3
07c5c     02 00 00 FF 
07c60     38 E4 85 F1 | 	sub	objptr, ##1080
07c64     F2 14 02 F1 | 	add	arg02, objptr
07c68     0A 27 02 FB | 	rdlong	local05, arg02
07c6c     13 13 02 F6 | 	mov	arg01, local05
07c70     01 14 06 F6 | 	mov	arg02, #1
07c74     22 00 00 FF 
07c78     D0 E5 85 F1 | 	sub	objptr, ##17872
07c7c     48 DE B0 FD | 	call	#__system__Right_S
07c80     01 28 66 F6 | 	neg	local06, #1
07c84                 | ' 
07c84                 | ' varname$=lparts(ct).part$
07c84                 | ' suffix$=right$(varname$,1)
07c84                 | ' j=-1
07c84                 | ' 
07c84                 | ' for i=0 to varnum-1
07c84     00 2A 06 F6 | 	mov	local07, #0
07c88     22 00 00 FF 
07c8c     CC E5 05 F1 | 	add	objptr, ##17868
07c90     F2 2C 02 FB | 	rdlong	local08, objptr
07c94     22 00 00 FF 
07c98     CC E5 85 F1 | 	sub	objptr, ##17868
07c9c                 | LR__0660
07c9c     16 2B 52 F2 | 	cmps	local07, local08 wc
07ca0     38 00 90 3D |  if_ae	jmp	#LR__0661
07ca4                 | '   if variables(i).name=varname$ then j=i : exit
07ca4     15 15 02 F6 | 	mov	arg02, local07
07ca8     04 14 66 F0 | 	shl	arg02, #4
07cac     02 00 00 FF 
07cb0     CC E5 05 F1 | 	add	objptr, ##1484
07cb4     F2 14 02 F1 | 	add	arg02, objptr
07cb8     0A 13 02 FB | 	rdlong	arg01, arg02
07cbc     13 15 02 F6 | 	mov	arg02, local05
07cc0     02 00 00 FF 
07cc4     CC E5 85 F1 | 	sub	objptr, ##1484
07cc8     54 BE B0 FD | 	call	#__system___string_cmp
07ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd0     15 29 02 A6 |  if_e	mov	local06, local07
07cd4     01 2A 06 51 |  if_ne	add	local07, #1
07cd8     C0 FF 9F 5D |  if_ne	jmp	#LR__0660
07cdc                 | LR__0661
07cdc                 | ' if  j=-1 andalso varnum<maxvars then   
07cdc     FF FF 7F FF 
07ce0     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07ce4     A8 00 90 5D |  if_ne	jmp	#LR__0662
07ce8     22 00 00 FF 
07cec     CC E5 05 F1 | 	add	objptr, ##17868
07cf0     F2 2C 02 FB | 	rdlong	local08, objptr
07cf4     22 00 00 FF 
07cf8     CC E5 85 F1 | 	sub	objptr, ##17868
07cfc     01 00 00 FF 
07d00     FF 2D 56 F2 | 	cmps	local08, ##1023 wc
07d04     88 00 90 3D |  if_ae	jmp	#LR__0662
07d08     22 00 00 FF 
07d0c     CC E5 05 F1 | 	add	objptr, ##17868
07d10     F2 2C 02 FB | 	rdlong	local08, objptr
07d14     04 2C 66 F0 | 	shl	local08, #4
07d18     20 00 00 FF 
07d1c     00 E4 85 F1 | 	sub	objptr, ##16384
07d20     F2 2C 02 F1 | 	add	local08, objptr
07d24     16 27 62 FC | 	wrlong	local05, local08
07d28     20 00 00 FF 
07d2c     00 E4 05 F1 | 	add	objptr, ##16384
07d30     F2 2C 02 FB | 	rdlong	local08, objptr
07d34     04 2C 66 F0 | 	shl	local08, #4
07d38     20 00 00 FF 
07d3c     00 E4 85 F1 | 	sub	objptr, ##16384
07d40     F2 2C 02 F1 | 	add	local08, objptr
07d44     04 2C 06 F1 | 	add	local08, #4
07d48     16 01 68 FC | 	wrlong	#0, local08
07d4c     20 00 00 FF 
07d50     00 E4 05 F1 | 	add	objptr, ##16384
07d54     F2 2C 02 FB | 	rdlong	local08, objptr
07d58     04 2C 66 F0 | 	shl	local08, #4
07d5c     20 00 00 FF 
07d60     00 E4 85 F1 | 	sub	objptr, ##16384
07d64     F2 2C 02 F1 | 	add	local08, objptr
07d68     0C 2C 06 F1 | 	add	local08, #12
07d6c     16 39 68 FC | 	wrlong	#28, local08
07d70     20 00 00 FF 
07d74     00 E4 05 F1 | 	add	objptr, ##16384
07d78     F2 2C 02 FB | 	rdlong	local08, objptr
07d7c     16 29 02 F6 | 	mov	local06, local08
07d80     01 2C 06 F1 | 	add	local08, #1
07d84     F2 2C 62 FC | 	wrlong	local08, objptr
07d88     22 00 00 FF 
07d8c     CC E5 85 F1 | 	sub	objptr, ##17868
07d90                 | LR__0662
07d90     11 22 06 F6 | 	mov	local03, #17
07d94     14 1F 02 F6 | 	mov	local01, local06
07d98     0F 2D 02 F6 | 	mov	local08, local01
07d9c     10 2B 02 F6 | 	mov	local07, local02
07da0     11 29 02 F6 | 	mov	local06, local03
07da4     38 00 00 FF 
07da8     40 E4 05 F1 | 	add	objptr, ##28736
07dac     F2 26 02 FB | 	rdlong	local05, objptr
07db0     13 FB 01 F6 | 	mov	result1, local05
07db4     01 FA 65 F0 | 	shl	result1, #1
07db8     13 FB 01 F1 | 	add	result1, local05
07dbc     02 FA 65 F0 | 	shl	result1, #2
07dc0     03 00 00 FF 
07dc4     00 E4 85 F1 | 	sub	objptr, ##1536
07dc8     F2 FA 01 F1 | 	add	result1, objptr
07dcc     FD 2C 62 FC | 	wrlong	local08, result1
07dd0     03 00 00 FF 
07dd4     00 E4 05 F1 | 	add	objptr, ##1536
07dd8     F2 2C 02 FB | 	rdlong	local08, objptr
07ddc     16 15 02 F6 | 	mov	arg02, local08
07de0     01 14 66 F0 | 	shl	arg02, #1
07de4     16 15 02 F1 | 	add	arg02, local08
07de8     02 14 66 F0 | 	shl	arg02, #2
07dec     03 00 00 FF 
07df0     00 E4 85 F1 | 	sub	objptr, ##1536
07df4     F2 14 02 F1 | 	add	arg02, objptr
07df8     04 14 06 F1 | 	add	arg02, #4
07dfc     0A 2B 62 FC | 	wrlong	local07, arg02
07e00     03 00 00 FF 
07e04     00 E4 05 F1 | 	add	objptr, ##1536
07e08     F2 2C 02 FB | 	rdlong	local08, objptr
07e0c     16 13 02 F6 | 	mov	arg01, local08
07e10     01 12 66 F0 | 	shl	arg01, #1
07e14     16 13 02 F1 | 	add	arg01, local08
07e18     02 12 66 F0 | 	shl	arg01, #2
07e1c     03 00 00 FF 
07e20     00 E4 85 F1 | 	sub	objptr, ##1536
07e24     F2 12 02 F1 | 	add	arg01, objptr
07e28     08 12 06 F1 | 	add	arg01, #8
07e2c     09 29 62 FC | 	wrlong	local06, arg01
07e30     03 00 00 FF 
07e34     00 E4 05 F1 | 	add	objptr, ##1536
07e38     F2 2C 02 FB | 	rdlong	local08, objptr
07e3c     01 2C 06 F1 | 	add	local08, #1
07e40     F2 2C 62 FC | 	wrlong	local08, objptr
07e44     38 00 00 FF 
07e48     40 E4 85 F1 | 	sub	objptr, ##28736
07e4c                 | ' t2.result_type=fun_getvar:t2.result.uresult=j
07e4c                 | ' 
07e4c                 | ' /'
07e4c                 | ' '/
07e4c                 | ' 701 
07e4c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
07e4c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
07e4c     FF FF 7F FF 
07e50     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07e54     B8 00 90 5D |  if_ne	jmp	#LR__0663
07e58     15 22 06 F6 | 	mov	local03, #21
07e5c     0F 2D 02 F6 | 	mov	local08, local01
07e60     10 2B 02 F6 | 	mov	local07, local02
07e64     11 29 02 F6 | 	mov	local06, local03
07e68     38 00 00 FF 
07e6c     40 E4 05 F1 | 	add	objptr, ##28736
07e70     F2 26 02 FB | 	rdlong	local05, objptr
07e74     13 FB 01 F6 | 	mov	result1, local05
07e78     01 FA 65 F0 | 	shl	result1, #1
07e7c     13 FB 01 F1 | 	add	result1, local05
07e80     02 FA 65 F0 | 	shl	result1, #2
07e84     03 00 00 FF 
07e88     00 E4 85 F1 | 	sub	objptr, ##1536
07e8c     F2 FA 01 F1 | 	add	result1, objptr
07e90     FD 2C 62 FC | 	wrlong	local08, result1
07e94     03 00 00 FF 
07e98     00 E4 05 F1 | 	add	objptr, ##1536
07e9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ea0     0F 15 02 F6 | 	mov	arg02, local01
07ea4     01 14 66 F0 | 	shl	arg02, #1
07ea8     0F 15 02 F1 | 	add	arg02, local01
07eac     02 14 66 F0 | 	shl	arg02, #2
07eb0     03 00 00 FF 
07eb4     00 E4 85 F1 | 	sub	objptr, ##1536
07eb8     F2 14 02 F1 | 	add	arg02, objptr
07ebc     04 14 06 F1 | 	add	arg02, #4
07ec0     0A 2B 62 FC | 	wrlong	local07, arg02
07ec4     03 00 00 FF 
07ec8     00 E4 05 F1 | 	add	objptr, ##1536
07ecc     F2 1E 02 FB | 	rdlong	local01, objptr
07ed0     0F 13 02 F6 | 	mov	arg01, local01
07ed4     01 12 66 F0 | 	shl	arg01, #1
07ed8     0F 13 02 F1 | 	add	arg01, local01
07edc     02 12 66 F0 | 	shl	arg01, #2
07ee0     03 00 00 FF 
07ee4     00 E4 85 F1 | 	sub	objptr, ##1536
07ee8     F2 12 02 F1 | 	add	arg01, objptr
07eec     08 12 06 F1 | 	add	arg01, #8
07ef0     09 29 62 FC | 	wrlong	local06, arg01
07ef4     03 00 00 FF 
07ef8     00 E4 05 F1 | 	add	objptr, ##1536
07efc     F2 2C 02 FB | 	rdlong	local08, objptr
07f00     01 2C 06 F1 | 	add	local08, #1
07f04     F2 2C 62 FC | 	wrlong	local08, objptr
07f08     38 00 00 FF 
07f0c     40 E4 85 F1 | 	sub	objptr, ##28736
07f10                 | LR__0663
07f10     A7 F0 03 F6 | 	mov	ptra, fp
07f14     B2 00 A0 FD | 	call	#popregs_
07f18                 | _getvar_ret
07f18     2D 00 64 FD | 	ret
07f1c                 | 
07f1c                 | ' 
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' 
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
07f1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
07f1c                 | ' 
07f1c                 | ' function execute_line (astart=0 as integer) as integer
07f1c                 | _execute_line
07f1c     04 4A 05 F6 | 	mov	COUNT_, #4
07f20     A8 00 A0 FD | 	call	#pushregs_
07f24     47 00 00 FF 
07f28     78 E5 05 F1 | 	add	objptr, ##36728
07f2c     F2 00 68 FC | 	wrlong	#0, objptr
07f30                 | ' runptr2=0
07f30                 | ' for lineptr_e=astart to lineptr-1
07f30     0F 00 00 FF 
07f34     34 E5 85 F1 | 	sub	objptr, ##7988
07f38     F2 12 62 FC | 	wrlong	arg01, objptr
07f3c     04 E4 85 F1 | 	sub	objptr, #4
07f40     F2 1E 02 FB | 	rdlong	local01, objptr
07f44     38 00 00 FF 
07f48     40 E4 85 F1 | 	sub	objptr, ##28736
07f4c                 | LR__0670
07f4c     38 00 00 FF 
07f50     44 E4 05 F1 | 	add	objptr, ##28740
07f54     F2 FA 01 FB | 	rdlong	result1, objptr
07f58     38 00 00 FF 
07f5c     44 E4 85 F1 | 	sub	objptr, ##28740
07f60     0F FB 51 F2 | 	cmps	result1, local01 wc
07f64     98 00 90 3D |  if_ae	jmp	#LR__0671
07f68     38 00 00 FF 
07f6c     44 E4 05 F1 | 	add	objptr, ##28740
07f70     F2 FA 01 FB | 	rdlong	result1, objptr
07f74     FD 20 02 F6 | 	mov	local02, result1
07f78     01 20 66 F0 | 	shl	local02, #1
07f7c     FD 20 02 F1 | 	add	local02, result1
07f80     02 20 66 F0 | 	shl	local02, #2
07f84     03 00 00 FF 
07f88     04 E4 85 F1 | 	sub	objptr, ##1540
07f8c     F2 20 02 F1 | 	add	local02, objptr
07f90     08 20 06 F1 | 	add	local02, #8
07f94     10 21 02 FB | 	rdlong	local02, local02
07f98     10 21 E2 F8 | 	getbyte	local02, local02, #0
07f9c     02 20 66 F0 | 	shl	local02, #2
07fa0     04 00 00 FF 
07fa4     1C E4 85 F1 | 	sub	objptr, ##2076
07fa8     F2 20 02 F1 | 	add	local02, objptr
07fac     10 21 02 FB | 	rdlong	local02, local02
07fb0     10 23 02 F6 | 	mov	local03, local02
07fb4     13 20 46 F7 | 	zerox	local02, #19
07fb8     14 22 46 F0 | 	shr	local03, #20
07fbc     02 22 66 F0 | 	shl	local03, #2
07fc0     ED 22 02 F1 | 	add	local03, __methods__
07fc4     11 23 02 FB | 	rdlong	local03, local03
07fc8     31 00 00 FF 
07fcc     24 E4 85 F1 | 	sub	objptr, ##25124
07fd0     F2 24 02 F6 | 	mov	local04, objptr
07fd4     10 E5 01 F6 | 	mov	objptr, local02
07fd8     2D 22 62 FD | 	call	local03
07fdc     12 E5 01 F6 | 	mov	objptr, local04
07fe0     38 00 00 FF 
07fe4     44 E4 05 F1 | 	add	objptr, ##28740
07fe8     F2 24 02 FB | 	rdlong	local04, objptr
07fec     01 24 06 F1 | 	add	local04, #1
07ff0     F2 24 62 FC | 	wrlong	local04, objptr
07ff4     38 00 00 FF 
07ff8     44 E4 85 F1 | 	sub	objptr, ##28740
07ffc     4C FF 9F FD | 	jmp	#LR__0670
08000                 | LR__0671
08000                 | ' return runptr2
08000     47 00 00 FF 
08004     78 E5 05 F1 | 	add	objptr, ##36728
08008     F2 FA 01 FB | 	rdlong	result1, objptr
0800c     47 00 00 FF 
08010     78 E5 85 F1 | 	sub	objptr, ##36728
08014     A7 F0 03 F6 | 	mov	ptra, fp
08018     B2 00 A0 FD | 	call	#popregs_
0801c                 | _execute_line_ret
0801c     2D 00 64 FD | 	ret
08020                 | 
08020                 | ' 
08020                 | ' 
08020                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08020                 | ' 
08020                 | ' function pop() as expr_result
08020                 | _pop
08020                 | ' 
08020                 | ' if stackpointer=0 then
08020     31 00 00 FF 
08024     1C E4 05 F1 | 	add	objptr, ##25116
08028     F2 FA 09 FB | 	rdlong	result1, objptr wz
0802c     31 00 00 FF 
08030     1C E4 85 F1 | 	sub	objptr, ##25116
08034     FF 04 06 A6 |  if_e	mov	_var03, #255
08038     18 00 06 A6 |  if_e	mov	_var01, #24
0803c     68 00 90 AD |  if_e	jmp	#LR__0680
08040     31 00 00 FF 
08044     1C E4 05 F1 | 	add	objptr, ##25116
08048     F2 FA 01 FB | 	rdlong	result1, objptr
0804c     01 FA 85 F1 | 	sub	result1, #1
08050     F2 FA 61 FC | 	wrlong	result1, objptr
08054     FD FE 01 F6 | 	mov	result3, result1
08058     01 FE 65 F0 | 	shl	result3, #1
0805c     FD FE 01 F1 | 	add	result3, result1
08060     02 FE 65 F0 | 	shl	result3, #2
08064     0C 00 00 FF 
08068     0C E4 85 F1 | 	sub	objptr, ##6156
0806c     F2 FE 01 F1 | 	add	result3, objptr
08070     FF 00 02 FB | 	rdlong	_var01, result3
08074     04 FE 05 F1 | 	add	result3, #4
08078     FF FE 01 FB | 	rdlong	result3, result3
0807c     FD FC 01 F6 | 	mov	result2, result1
08080     01 FC 65 F0 | 	shl	result2, #1
08084     FD FC 01 F1 | 	add	result2, result1
08088     02 FC 65 F0 | 	shl	result2, #2
0808c     F2 FC 01 F1 | 	add	result2, objptr
08090     08 FC 05 F1 | 	add	result2, #8
08094     FE FA 01 FB | 	rdlong	result1, result2
08098     FF 02 02 F6 | 	mov	_var02, result3
0809c     FD 04 02 F6 | 	mov	_var03, result1
080a0     25 00 00 FF 
080a4     10 E4 85 F1 | 	sub	objptr, ##18960
080a8                 | LR__0680
080a8                 | ' return t1
080a8     01 FD 01 F6 | 	mov	result2, _var02
080ac     02 FF 01 F6 | 	mov	result3, _var03
080b0     00 FB 01 F6 | 	mov	result1, _var01
080b4                 | _pop_ret
080b4     2D 00 64 FD | 	ret
080b8                 | 
080b8                 | ' 
080b8                 | ' sub push(t1 as expr_result )
080b8                 | _push
080b8                 | ' 
080b8                 | ' 'print "In push: "; t1.result_type
080b8                 | ' 'print "In push: "; t1.result.uresult
080b8                 | ' 
080b8                 | ' if stackpointer<maxstack then 
080b8     31 00 00 FF 
080bc     1C E4 05 F1 | 	add	objptr, ##25116
080c0     F2 00 02 FB | 	rdlong	_var01, objptr
080c4     31 00 00 FF 
080c8     1C E4 85 F1 | 	sub	objptr, ##25116
080cc     01 00 00 FF 
080d0     00 00 56 F2 | 	cmps	_var01, ##512 wc
080d4     BC 00 90 3D |  if_ae	jmp	#LR__0690
080d8     09 01 02 FB | 	rdlong	_var01, arg01
080dc     04 12 06 F1 | 	add	arg01, #4
080e0     09 03 02 FB | 	rdlong	_var02, arg01
080e4     04 12 06 F1 | 	add	arg01, #4
080e8     09 13 02 FB | 	rdlong	arg01, arg01
080ec     31 00 00 FF 
080f0     1C E4 05 F1 | 	add	objptr, ##25116
080f4     F2 04 02 FB | 	rdlong	_var03, objptr
080f8     02 07 02 F6 | 	mov	_var04, _var03
080fc     01 06 66 F0 | 	shl	_var04, #1
08100     02 07 02 F1 | 	add	_var04, _var03
08104     02 06 66 F0 | 	shl	_var04, #2
08108     0C 00 00 FF 
0810c     0C E4 85 F1 | 	sub	objptr, ##6156
08110     F2 06 02 F1 | 	add	_var04, objptr
08114     03 01 62 FC | 	wrlong	_var01, _var04
08118     0C 00 00 FF 
0811c     0C E4 05 F1 | 	add	objptr, ##6156
08120     F2 06 02 FB | 	rdlong	_var04, objptr
08124     03 05 02 F6 | 	mov	_var03, _var04
08128     01 04 66 F0 | 	shl	_var03, #1
0812c     03 05 02 F1 | 	add	_var03, _var04
08130     02 04 66 F0 | 	shl	_var03, #2
08134     0C 00 00 FF 
08138     0C E4 85 F1 | 	sub	objptr, ##6156
0813c     F2 04 02 F1 | 	add	_var03, objptr
08140     04 04 06 F1 | 	add	_var03, #4
08144     02 03 62 FC | 	wrlong	_var02, _var03
08148     0C 00 00 FF 
0814c     0C E4 05 F1 | 	add	objptr, ##6156
08150     F2 06 02 FB | 	rdlong	_var04, objptr
08154     03 05 02 F6 | 	mov	_var03, _var04
08158     01 04 66 F0 | 	shl	_var03, #1
0815c     03 05 02 F1 | 	add	_var03, _var04
08160     02 04 66 F0 | 	shl	_var03, #2
08164     0C 00 00 FF 
08168     0C E4 85 F1 | 	sub	objptr, ##6156
0816c     F2 04 02 F1 | 	add	_var03, objptr
08170     08 04 06 F1 | 	add	_var03, #8
08174     02 13 62 FC | 	wrlong	arg01, _var03
08178     0C 00 00 FF 
0817c     0C E4 05 F1 | 	add	objptr, ##6156
08180     F2 00 02 FB | 	rdlong	_var01, objptr
08184     01 00 06 F1 | 	add	_var01, #1
08188     F2 00 62 FC | 	wrlong	_var01, objptr
0818c     31 00 00 FF 
08190     1C E4 85 F1 | 	sub	objptr, ##25116
08194                 | LR__0690
08194                 | _push_ret
08194     2D 00 64 FD | 	ret
08198                 | 
08198                 | ' 
08198                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08198                 | ' 
08198                 | ' sub do_push
08198                 | _do_push
08198                 | ' if stackpointer<maxstack then 
08198     31 00 00 FF 
0819c     1C E4 05 F1 | 	add	objptr, ##25116
081a0     F2 00 02 FB | 	rdlong	_var01, objptr
081a4     31 00 00 FF 
081a8     1C E4 85 F1 | 	sub	objptr, ##25116
081ac     01 00 00 FF 
081b0     00 00 56 F2 | 	cmps	_var01, ##512 wc
081b4     F8 00 90 3D |  if_ae	jmp	#LR__0700
081b8     38 00 00 FF 
081bc     44 E4 05 F1 | 	add	objptr, ##28740
081c0     F2 02 02 FB | 	rdlong	_var02, objptr
081c4     01 05 02 F6 | 	mov	_var03, _var02
081c8     01 04 66 F0 | 	shl	_var03, #1
081cc     01 05 02 F1 | 	add	_var03, _var02
081d0     02 04 66 F0 | 	shl	_var03, #2
081d4     03 00 00 FF 
081d8     04 E4 85 F1 | 	sub	objptr, ##1540
081dc     F2 04 02 F1 | 	add	_var03, objptr
081e0     02 01 02 FB | 	rdlong	_var01, _var03
081e4     04 04 06 F1 | 	add	_var03, #4
081e8     02 07 02 FB | 	rdlong	_var04, _var03
081ec     01 05 02 F6 | 	mov	_var03, _var02
081f0     01 04 66 F0 | 	shl	_var03, #1
081f4     01 05 02 F1 | 	add	_var03, _var02
081f8     02 04 66 F0 | 	shl	_var03, #2
081fc     F2 04 02 F1 | 	add	_var03, objptr
08200     08 04 06 F1 | 	add	_var03, #8
08204     02 03 02 FB | 	rdlong	_var02, _var03
08208     04 00 00 FF 
0820c     24 E4 85 F1 | 	sub	objptr, ##2084
08210     F2 04 02 FB | 	rdlong	_var03, objptr
08214     02 09 02 F6 | 	mov	_var05, _var03
08218     01 08 66 F0 | 	shl	_var05, #1
0821c     02 09 02 F1 | 	add	_var05, _var03
08220     02 08 66 F0 | 	shl	_var05, #2
08224     0C 00 00 FF 
08228     0C E4 85 F1 | 	sub	objptr, ##6156
0822c     F2 08 02 F1 | 	add	_var05, objptr
08230     04 01 62 FC | 	wrlong	_var01, _var05
08234     0C 00 00 FF 
08238     0C E4 05 F1 | 	add	objptr, ##6156
0823c     F2 08 02 FB | 	rdlong	_var05, objptr
08240     04 05 02 F6 | 	mov	_var03, _var05
08244     01 04 66 F0 | 	shl	_var03, #1
08248     04 05 02 F1 | 	add	_var03, _var05
0824c     02 04 66 F0 | 	shl	_var03, #2
08250     0C 00 00 FF 
08254     0C E4 85 F1 | 	sub	objptr, ##6156
08258     F2 04 02 F1 | 	add	_var03, objptr
0825c     04 04 06 F1 | 	add	_var03, #4
08260     02 07 62 FC | 	wrlong	_var04, _var03
08264     0C 00 00 FF 
08268     0C E4 05 F1 | 	add	objptr, ##6156
0826c     F2 08 02 FB | 	rdlong	_var05, objptr
08270     04 07 02 F6 | 	mov	_var04, _var05
08274     01 06 66 F0 | 	shl	_var04, #1
08278     04 07 02 F1 | 	add	_var04, _var05
0827c     02 06 66 F0 | 	shl	_var04, #2
08280     0C 00 00 FF 
08284     0C E4 85 F1 | 	sub	objptr, ##6156
08288     F2 06 02 F1 | 	add	_var04, objptr
0828c     08 06 06 F1 | 	add	_var04, #8
08290     03 03 62 FC | 	wrlong	_var02, _var04
08294     0C 00 00 FF 
08298     0C E4 05 F1 | 	add	objptr, ##6156
0829c     F2 00 02 FB | 	rdlong	_var01, objptr
082a0     01 00 06 F1 | 	add	_var01, #1
082a4     F2 00 62 FC | 	wrlong	_var01, objptr
082a8     31 00 00 FF 
082ac     1C E4 85 F1 | 	sub	objptr, ##25116
082b0                 | LR__0700
082b0                 | _do_push_ret
082b0     2D 00 64 FD | 	ret
082b4                 | 
082b4                 | ' 
082b4                 | '   
082b4                 | ' sub csave_block(address as ulong)
082b4                 | _csave_block
082b4     09 01 02 F6 | 	mov	_var01, arg01
082b8                 | ' 
082b8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
082b8                 | ' ' we enter it at the state of playing 1 kHz header tone
082b8                 | ' 
082b8                 | ' for i=0 to 63 step 2
082b8     00 02 06 F6 | 	mov	_var02, #0
082bc                 | LR__0710
082bc                 | '   do: loop until lpeek(base+32*7)>32768
082bc     24 00 00 FF 
082c0     D4 E5 05 F1 | 	add	objptr, ##18900
082c4     97 0C 48 FB | 	callpa	#(@LR__0712-@LR__0711)>>2,fcache_load_ptr_
082c8                 | LR__0711
082c8     F2 12 02 FB | 	rdlong	arg01, objptr
082cc     E0 12 06 F1 | 	add	arg01, #224
082d0     09 FB 01 FB | 	rdlong	result1, arg01
082d4     40 00 00 FF 
082d8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
082dc     E8 FF 9F CD |  if_b	jmp	#LR__0711
082e0                 | LR__0712
082e0     00 13 02 F6 | 	mov	arg01, _var01
082e4     01 05 02 F6 | 	mov	_var03, _var02
082e8     02 04 66 F0 | 	shl	_var03, #2
082ec     02 13 02 F1 | 	add	arg01, _var03
082f0     09 07 02 FB | 	rdlong	_var04, arg01
082f4     24 00 00 FF 
082f8     AC E4 05 F1 | 	add	objptr, ##18604
082fc     F2 06 62 FC | 	wrlong	_var04, objptr
08300     49 00 00 FF 
08304     80 E4 85 F1 | 	sub	objptr, ##37504
08308                 | '   q=lpeek(address+4*i)
08308                 | '      for bit=0 to 31
08308     00 08 06 F6 | 	mov	_var05, #0
0830c     97 84 48 FB | 	callpa	#(@LR__0717-@LR__0713)>>2,fcache_load_ptr_
08310                 | LR__0713
08310                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08310     49 00 00 FF 
08314     80 E4 05 F1 | 	add	objptr, ##37504
08318     F2 06 02 FB | 	rdlong	_var04, objptr
0831c     49 00 00 FF 
08320     80 E4 85 F1 | 	sub	objptr, ##37504
08324     04 05 C2 F9 | 	decod	_var03, _var05
08328     02 07 CA F7 | 	test	_var04, _var03 wz
0832c     60 00 90 AD |  if_e	jmp	#LR__0714
08330     04 05 02 F6 | 	mov	_var03, _var05
08334     02 04 66 F0 | 	shl	_var03, #2
08338     45 00 00 FF 
0833c     70 E4 05 F1 | 	add	objptr, ##35440
08340     F2 04 02 F1 | 	add	_var03, objptr
08344     02 FF 48 FC | 	wrbyte	#127, _var03
08348     04 05 02 F6 | 	mov	_var03, _var05
0834c     02 04 66 F0 | 	shl	_var03, #2
08350     01 04 06 F1 | 	add	_var03, #1
08354     F2 04 02 F1 | 	add	_var03, objptr
08358     02 01 49 FC | 	wrbyte	#128, _var03
0835c     04 05 02 F6 | 	mov	_var03, _var05
08360     02 04 66 F0 | 	shl	_var03, #2
08364     02 04 06 F1 | 	add	_var03, #2
08368     F2 04 02 F1 | 	add	_var03, objptr
0836c     02 FF 48 FC | 	wrbyte	#127, _var03
08370     04 05 02 F6 | 	mov	_var03, _var05
08374     02 04 66 F0 | 	shl	_var03, #2
08378     03 04 06 F1 | 	add	_var03, #3
0837c     F2 04 02 F1 | 	add	_var03, objptr
08380     02 01 49 FC | 	wrbyte	#128, _var03
08384     45 00 00 FF 
08388     70 E4 85 F1 | 	sub	objptr, ##35440
0838c     5C 00 90 FD | 	jmp	#LR__0715
08390                 | LR__0714
08390     04 05 02 F6 | 	mov	_var03, _var05
08394     02 04 66 F0 | 	shl	_var03, #2
08398     45 00 00 FF 
0839c     70 E4 05 F1 | 	add	objptr, ##35440
083a0     F2 04 02 F1 | 	add	_var03, objptr
083a4     02 01 49 FC | 	wrbyte	#128, _var03
083a8     04 05 02 F6 | 	mov	_var03, _var05
083ac     02 04 66 F0 | 	shl	_var03, #2
083b0     01 04 06 F1 | 	add	_var03, #1
083b4     F2 04 02 F1 | 	add	_var03, objptr
083b8     02 01 49 FC | 	wrbyte	#128, _var03
083bc     04 05 02 F6 | 	mov	_var03, _var05
083c0     02 04 66 F0 | 	shl	_var03, #2
083c4     02 04 06 F1 | 	add	_var03, #2
083c8     F2 04 02 F1 | 	add	_var03, objptr
083cc     02 FF 48 FC | 	wrbyte	#127, _var03
083d0     04 05 02 F6 | 	mov	_var03, _var05
083d4     02 04 66 F0 | 	shl	_var03, #2
083d8     03 04 06 F1 | 	add	_var03, #3
083dc     F2 04 02 F1 | 	add	_var03, objptr
083e0     02 FF 48 FC | 	wrbyte	#127, _var03
083e4     45 00 00 FF 
083e8     70 E4 85 F1 | 	sub	objptr, ##35440
083ec                 | LR__0715
083ec     01 08 06 F1 | 	add	_var05, #1
083f0     20 08 56 F2 | 	cmps	_var05, #32 wc
083f4     18 FF 9F CD |  if_b	jmp	#LR__0713
083f8                 | '   do: loop until lpeek(base+32*7)<32768
083f8     24 00 00 FF 
083fc     D4 E5 05 F1 | 	add	objptr, ##18900
08400                 | LR__0716
08400     F2 12 02 FB | 	rdlong	arg01, objptr
08404     E0 12 06 F1 | 	add	arg01, #224
08408     09 FB 01 FB | 	rdlong	result1, arg01
0840c     40 00 00 FF 
08410     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08414     E8 FF 9F 3D |  if_ae	jmp	#LR__0716
08418                 | LR__0717
08418     00 13 02 F6 | 	mov	arg01, _var01
0841c     04 12 06 F1 | 	add	arg01, #4
08420     01 05 02 F6 | 	mov	_var03, _var02
08424     02 04 66 F0 | 	shl	_var03, #2
08428     02 13 02 F1 | 	add	arg01, _var03
0842c     09 07 02 FB | 	rdlong	_var04, arg01
08430     24 00 00 FF 
08434     AC E4 05 F1 | 	add	objptr, ##18604
08438     F2 06 62 FC | 	wrlong	_var04, objptr
0843c     49 00 00 FF 
08440     80 E4 85 F1 | 	sub	objptr, ##37504
08444                 | '   q=lpeek(address+4+4*i)
08444                 | '      for bit=0 to 31
08444     00 08 06 F6 | 	mov	_var05, #0
08448     97 94 48 FB | 	callpa	#(@LR__0721-@LR__0718)>>2,fcache_load_ptr_
0844c                 | LR__0718
0844c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0844c     49 00 00 FF 
08450     80 E4 05 F1 | 	add	objptr, ##37504
08454     F2 06 02 FB | 	rdlong	_var04, objptr
08458     49 00 00 FF 
0845c     80 E4 85 F1 | 	sub	objptr, ##37504
08460     04 05 C2 F9 | 	decod	_var03, _var05
08464     02 07 CA F7 | 	test	_var04, _var03 wz
08468     80 00 90 AD |  if_e	jmp	#LR__0719
0846c     04 0B 02 F6 | 	mov	_var06, _var05
08470     02 0A 66 F0 | 	shl	_var06, #2
08474     80 04 06 F6 | 	mov	_var03, #128
08478     05 05 02 F1 | 	add	_var03, _var06
0847c     45 00 00 FF 
08480     70 E4 05 F1 | 	add	objptr, ##35440
08484     F2 04 02 F1 | 	add	_var03, objptr
08488     02 FF 48 FC | 	wrbyte	#127, _var03
0848c     04 0B 02 F6 | 	mov	_var06, _var05
08490     02 0A 66 F0 | 	shl	_var06, #2
08494     80 04 06 F6 | 	mov	_var03, #128
08498     05 05 02 F1 | 	add	_var03, _var06
0849c     01 04 06 F1 | 	add	_var03, #1
084a0     F2 04 02 F1 | 	add	_var03, objptr
084a4     02 01 49 FC | 	wrbyte	#128, _var03
084a8     04 0B 02 F6 | 	mov	_var06, _var05
084ac     02 0A 66 F0 | 	shl	_var06, #2
084b0     80 04 06 F6 | 	mov	_var03, #128
084b4     05 05 02 F1 | 	add	_var03, _var06
084b8     02 04 06 F1 | 	add	_var03, #2
084bc     F2 04 02 F1 | 	add	_var03, objptr
084c0     02 FF 48 FC | 	wrbyte	#127, _var03
084c4     04 0B 02 F6 | 	mov	_var06, _var05
084c8     02 0A 66 F0 | 	shl	_var06, #2
084cc     80 04 06 F6 | 	mov	_var03, #128
084d0     05 05 02 F1 | 	add	_var03, _var06
084d4     03 04 06 F1 | 	add	_var03, #3
084d8     F2 04 02 F1 | 	add	_var03, objptr
084dc     02 01 49 FC | 	wrbyte	#128, _var03
084e0     45 00 00 FF 
084e4     70 E4 85 F1 | 	sub	objptr, ##35440
084e8     7C 00 90 FD | 	jmp	#LR__0720
084ec                 | LR__0719
084ec     04 0B 02 F6 | 	mov	_var06, _var05
084f0     02 0A 66 F0 | 	shl	_var06, #2
084f4     80 04 06 F6 | 	mov	_var03, #128
084f8     05 05 02 F1 | 	add	_var03, _var06
084fc     45 00 00 FF 
08500     70 E4 05 F1 | 	add	objptr, ##35440
08504     F2 04 02 F1 | 	add	_var03, objptr
08508     02 01 49 FC | 	wrbyte	#128, _var03
0850c     04 0B 02 F6 | 	mov	_var06, _var05
08510     02 0A 66 F0 | 	shl	_var06, #2
08514     80 04 06 F6 | 	mov	_var03, #128
08518     05 05 02 F1 | 	add	_var03, _var06
0851c     01 04 06 F1 | 	add	_var03, #1
08520     F2 04 02 F1 | 	add	_var03, objptr
08524     02 01 49 FC | 	wrbyte	#128, _var03
08528     04 0B 02 F6 | 	mov	_var06, _var05
0852c     02 0A 66 F0 | 	shl	_var06, #2
08530     80 04 06 F6 | 	mov	_var03, #128
08534     05 05 02 F1 | 	add	_var03, _var06
08538     02 04 06 F1 | 	add	_var03, #2
0853c     F2 04 02 F1 | 	add	_var03, objptr
08540     02 FF 48 FC | 	wrbyte	#127, _var03
08544     04 0B 02 F6 | 	mov	_var06, _var05
08548     02 0A 66 F0 | 	shl	_var06, #2
0854c     80 04 06 F6 | 	mov	_var03, #128
08550     05 05 02 F1 | 	add	_var03, _var06
08554     03 04 06 F1 | 	add	_var03, #3
08558     F2 04 02 F1 | 	add	_var03, objptr
0855c     02 FF 48 FC | 	wrbyte	#127, _var03
08560     45 00 00 FF 
08564     70 E4 85 F1 | 	sub	objptr, ##35440
08568                 | LR__0720
08568     01 08 06 F1 | 	add	_var05, #1
0856c     20 08 56 F2 | 	cmps	_var05, #32 wc
08570     D8 FE 9F CD |  if_b	jmp	#LR__0718
08574                 | LR__0721
08574     02 02 06 F1 | 	add	_var02, #2
08578     40 02 56 F2 | 	cmps	_var02, #64 wc
0857c     3C FD 9F CD |  if_b	jmp	#LR__0710
08580                 | ' do: loop until lpeek(base+32*7)>32768
08580     24 00 00 FF 
08584     D4 E5 05 F1 | 	add	objptr, ##18900
08588     97 84 48 FB | 	callpa	#(@LR__0730-@LR__0722)>>2,fcache_load_ptr_
0858c                 | LR__0722
0858c     F2 12 02 FB | 	rdlong	arg01, objptr
08590     E0 12 06 F1 | 	add	arg01, #224
08594     09 FB 01 FB | 	rdlong	result1, arg01
08598     40 00 00 FF 
0859c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
085a0     E8 FF 9F CD |  if_b	jmp	#LR__0722
085a4     24 00 00 FF 
085a8     D4 E5 85 F1 | 	sub	objptr, ##18900
085ac                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
085ac     00 02 06 F6 | 	mov	_var02, #0
085b0                 | LR__0723
085b0     01 07 52 F6 | 	abs	_var04, _var02 wc
085b4     07 06 06 F5 | 	and	_var04, #7
085b8     03 07 82 F6 | 	negc	_var04, _var04
085bc     04 06 56 F2 | 	cmps	_var04, #4 wc
085c0     20 00 90 3D |  if_ae	jmp	#LR__0724
085c4     01 0B 02 F6 | 	mov	_var06, _var02
085c8     45 00 00 FF 
085cc     70 E4 05 F1 | 	add	objptr, ##35440
085d0     F2 0A 02 F1 | 	add	_var06, objptr
085d4     05 FF 48 FC | 	wrbyte	#127, _var06
085d8     45 00 00 FF 
085dc     70 E4 85 F1 | 	sub	objptr, ##35440
085e0     1C 00 90 FD | 	jmp	#LR__0725
085e4                 | LR__0724
085e4     01 0B 02 F6 | 	mov	_var06, _var02
085e8     45 00 00 FF 
085ec     70 E4 05 F1 | 	add	objptr, ##35440
085f0     F2 0A 02 F1 | 	add	_var06, objptr
085f4     05 01 49 FC | 	wrbyte	#128, _var06
085f8     45 00 00 FF 
085fc     70 E4 85 F1 | 	sub	objptr, ##35440
08600                 | LR__0725
08600     01 02 06 F1 | 	add	_var02, #1
08604     80 02 56 F2 | 	cmps	_var02, #128 wc
08608     A4 FF 9F CD |  if_b	jmp	#LR__0723
0860c                 | ' 
0860c                 | ' do: loop until lpeek(base+32*7)<32768
0860c     24 00 00 FF 
08610     D4 E5 05 F1 | 	add	objptr, ##18900
08614                 | LR__0726
08614     F2 12 02 FB | 	rdlong	arg01, objptr
08618     E0 12 06 F1 | 	add	arg01, #224
0861c     09 FB 01 FB | 	rdlong	result1, arg01
08620     40 00 00 FF 
08624     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08628     E8 FF 9F 3D |  if_ae	jmp	#LR__0726
0862c     24 00 00 FF 
08630     D4 E5 85 F1 | 	sub	objptr, ##18900
08634                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08634     80 02 06 F6 | 	mov	_var02, #128
08638                 | LR__0727
08638     01 07 52 F6 | 	abs	_var04, _var02 wc
0863c     07 06 06 F5 | 	and	_var04, #7
08640     03 07 82 F6 | 	negc	_var04, _var04
08644     04 06 56 F2 | 	cmps	_var04, #4 wc
08648     20 00 90 3D |  if_ae	jmp	#LR__0728
0864c     01 0B 02 F6 | 	mov	_var06, _var02
08650     45 00 00 FF 
08654     70 E4 05 F1 | 	add	objptr, ##35440
08658     F2 0A 02 F1 | 	add	_var06, objptr
0865c     05 FF 48 FC | 	wrbyte	#127, _var06
08660     45 00 00 FF 
08664     70 E4 85 F1 | 	sub	objptr, ##35440
08668     1C 00 90 FD | 	jmp	#LR__0729
0866c                 | LR__0728
0866c     01 0B 02 F6 | 	mov	_var06, _var02
08670     45 00 00 FF 
08674     70 E4 05 F1 | 	add	objptr, ##35440
08678     F2 0A 02 F1 | 	add	_var06, objptr
0867c     05 01 49 FC | 	wrbyte	#128, _var06
08680     45 00 00 FF 
08684     70 E4 85 F1 | 	sub	objptr, ##35440
08688                 | LR__0729
08688     01 02 06 F1 | 	add	_var02, #1
0868c     00 03 16 F2 | 	cmp	_var02, #256 wc
08690     A4 FF 9F CD |  if_b	jmp	#LR__0727
08694                 | LR__0730
08694                 | _csave_block_ret
08694     2D 00 64 FD | 	ret
08698                 | 
08698                 | ' 
08698                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
08698                 | _csave_addtoblock
08698     04 4A 05 F6 | 	mov	COUNT_, #4
0869c     A8 00 A0 FD | 	call	#pushregs_
086a0     09 1F 02 F6 | 	mov	local01, arg01
086a4                 | ' 
086a4                 | ' 
086a4                 | ' if force=0 then
086a4     07 14 4E F7 | 	zerox	arg02, #7 wz
086a8     78 00 90 5D |  if_ne	jmp	#LR__0740
086ac     47 00 00 FF 
086b0     70 E5 05 F1 | 	add	objptr, ##36720
086b4     F2 14 02 FB | 	rdlong	arg02, objptr
086b8     02 00 00 FF 
086bc     00 E4 85 F1 | 	sub	objptr, ##1024
086c0     F2 14 02 F1 | 	add	arg02, objptr
086c4     0A 1F 42 FC | 	wrbyte	local01, arg02
086c8     02 00 00 FF 
086cc     00 E4 05 F1 | 	add	objptr, ##1024
086d0     F2 1E 02 FB | 	rdlong	local01, objptr
086d4     01 1E 06 F1 | 	add	local01, #1
086d8     F2 1E 62 FC | 	wrlong	local01, objptr
086dc                 | '   block(blockptr)=d
086dc                 | '   blockptr+=1
086dc                 | '   if blockptr>=255 then
086dc     47 00 00 FF 
086e0     70 E5 85 F1 | 	sub	objptr, ##36720
086e4     FF 1E 16 F2 | 	cmp	local01, #255 wc
086e8     E4 00 90 CD |  if_b	jmp	#LR__0744
086ec     45 00 00 FF 
086f0     70 E5 05 F1 | 	add	objptr, ##35696
086f4     F2 12 02 F6 | 	mov	arg01, objptr
086f8     45 00 00 FF 
086fc     70 E5 85 F1 | 	sub	objptr, ##35696
08700     B0 FB BF FD | 	call	#_csave_block
08704     47 00 00 FF 
08708     70 E5 05 F1 | 	add	objptr, ##36720
0870c     F2 00 68 FC | 	wrlong	#0, objptr
08710     47 00 00 FF 
08714     70 E5 85 F1 | 	sub	objptr, ##36720
08718     2C 13 06 F6 | 	mov	arg01, #300
0871c     E4 B5 B0 FD | 	call	#__system___waitms
08720     AC 00 90 FD | 	jmp	#LR__0744
08724                 | LR__0740
08724     47 00 00 FF 
08728     70 E5 05 F1 | 	add	objptr, ##36720
0872c     F2 20 02 FB | 	rdlong	local02, objptr
08730     02 00 00 FF 
08734     00 E4 85 F1 | 	sub	objptr, ##1024
08738     F2 20 02 F1 | 	add	local02, objptr
0873c     10 1F 42 FC | 	wrbyte	local01, local02
08740                 | '   block(blockptr)=d
08740                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
08740     02 00 00 FF 
08744     00 E4 05 F1 | 	add	objptr, ##1024
08748     F2 22 02 FB | 	rdlong	local03, objptr
0874c     47 00 00 FF 
08750     70 E5 85 F1 | 	sub	objptr, ##36720
08754     FF 22 16 F2 | 	cmp	local03, #255 wc
08758     40 00 90 3D |  if_ae	jmp	#LR__0743
0875c     47 00 00 FF 
08760     70 E5 05 F1 | 	add	objptr, ##36720
08764     F2 24 02 FB | 	rdlong	local04, objptr
08768     47 00 00 FF 
0876c     70 E5 85 F1 | 	sub	objptr, ##36720
08770                 | LR__0741
08770     00 25 56 F2 | 	cmps	local04, #256 wc
08774     24 00 90 3D |  if_ae	jmp	#LR__0742
08778     12 21 02 F6 | 	mov	local02, local04
0877c     45 00 00 FF 
08780     70 E5 05 F1 | 	add	objptr, ##35696
08784     F2 20 02 F1 | 	add	local02, objptr
08788     10 01 48 FC | 	wrbyte	#0, local02
0878c     01 24 06 F1 | 	add	local04, #1
08790     45 00 00 FF 
08794     70 E5 85 F1 | 	sub	objptr, ##35696
08798     D4 FF 9F FD | 	jmp	#LR__0741
0879c                 | LR__0742
0879c                 | LR__0743
0879c     45 00 00 FF 
087a0     70 E5 05 F1 | 	add	objptr, ##35696
087a4     F2 12 02 F6 | 	mov	arg01, objptr
087a8     45 00 00 FF 
087ac     70 E5 85 F1 | 	sub	objptr, ##35696
087b0     00 FB BF FD | 	call	#_csave_block
087b4     47 00 00 FF 
087b8     70 E5 05 F1 | 	add	objptr, ##36720
087bc     F2 00 68 FC | 	wrlong	#0, objptr
087c0     47 00 00 FF 
087c4     70 E5 85 F1 | 	sub	objptr, ##36720
087c8     2C 13 06 F6 | 	mov	arg01, #300
087cc     34 B5 B0 FD | 	call	#__system___waitms
087d0                 | LR__0744
087d0     A7 F0 03 F6 | 	mov	ptra, fp
087d4     B2 00 A0 FD | 	call	#popregs_
087d8                 | _csave_addtoblock_ret
087d8     2D 00 64 FD | 	ret
087dc                 | 
087dc                 | ' 
087dc                 | ' sub test_csave
087dc                 | _test_csave
087dc     04 4A 05 F6 | 	mov	COUNT_, #4
087e0     A8 00 A0 FD | 	call	#pushregs_
087e4     C0 F0 07 F1 | 	add	ptra, #192
087e8                 | ' 'dim fileheader,savestart, saveptr as ulong
087e8                 | ' 
087e8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
087e8     38 00 00 FF 
087ec     48 E4 05 F1 | 	add	objptr, ##28744
087f0     F2 12 02 FB | 	rdlong	arg01, objptr
087f4     38 00 00 FF 
087f8     48 E4 85 F1 | 	sub	objptr, ##28744
087fc     48 7F B0 FD | 	call	#_pslpeek
08800     FF FF 7F FF 
08804     FF FB 0D F2 | 	cmp	result1, ##-1 wz
08808     0C 00 90 5D |  if_ne	jmp	#LR__0750
0880c     1B 12 06 F6 | 	mov	arg01, #27
08810     78 7D B0 FD | 	call	#_printerror
08814     0C 03 90 FD | 	jmp	#LR__0762
08818                 | LR__0750
08818     04 F8 BF FD | 	call	#_pop
0881c     FF 1E 02 F6 | 	mov	local01, result3
08820     90 4E 05 F1 | 	add	fp, #144
08824     A7 FA 61 FC | 	wrlong	result1, fp
08828     04 4E 05 F1 | 	add	fp, #4
0882c     A7 FC 61 FC | 	wrlong	result2, fp
08830     04 4E 05 F1 | 	add	fp, #4
08834     A7 1E 62 FC | 	wrlong	local01, fp
08838                 | ' t1=pop()
08838                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
08838     98 4E 85 F1 | 	sub	fp, #152
0883c     1F 1E 0E F2 | 	cmp	local01, #31 wz
08840     18 01 00 5F 
08844     FD 1E 06 56 |  if_ne	mov	local01, ##@LR__4221
08848     8C 4E 05 51 |  if_ne	add	fp, #140
0884c     A7 1E 62 5C |  if_ne	wrlong	local01, fp
08850     8C 4E 85 51 |  if_ne	sub	fp, #140
08854     90 4E 05 A1 |  if_e	add	fp, #144
08858     A7 1E 02 AB |  if_e	rdlong	local01, fp
0885c     04 4E 85 A1 |  if_e	sub	fp, #4
08860     A7 1E 62 AC |  if_e	wrlong	local01, fp
08864     8C 4E 85 A1 |  if_e	sub	fp, #140
08868                 | ' 
08868                 | ' ' prepare 1 kHz header wave
08868                 | ' 
08868                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08868     A7 00 68 FC | 	wrlong	#0, fp
0886c     97 34 48 FB | 	callpa	#(@LR__0754-@LR__0751)>>2,fcache_load_ptr_
08870                 | LR__0751
08870     A7 1E 02 FB | 	rdlong	local01, fp
08874     0F 1F 52 F6 | 	abs	local01, local01 wc
08878     07 1E 06 F5 | 	and	local01, #7
0887c     0F 1F 82 F6 | 	negc	local01, local01
08880     04 1E 56 F2 | 	cmps	local01, #4 wc
08884     20 00 90 3D |  if_ae	jmp	#LR__0752
08888     A7 1E 02 FB | 	rdlong	local01, fp
0888c     45 00 00 FF 
08890     70 E4 05 F1 | 	add	objptr, ##35440
08894     F2 1E 02 F1 | 	add	local01, objptr
08898     0F FF 48 FC | 	wrbyte	#127, local01
0889c     45 00 00 FF 
088a0     70 E4 85 F1 | 	sub	objptr, ##35440
088a4     1C 00 90 FD | 	jmp	#LR__0753
088a8                 | LR__0752
088a8     A7 1E 02 FB | 	rdlong	local01, fp
088ac     45 00 00 FF 
088b0     70 E4 05 F1 | 	add	objptr, ##35440
088b4     F2 1E 02 F1 | 	add	local01, objptr
088b8     0F 01 49 FC | 	wrbyte	#128, local01
088bc     45 00 00 FF 
088c0     70 E4 85 F1 | 	sub	objptr, ##35440
088c4                 | LR__0753
088c4     A7 1E 02 FB | 	rdlong	local01, fp
088c8     01 1E 06 F1 | 	add	local01, #1
088cc     A7 1E 62 FC | 	wrlong	local01, fp
088d0     00 1F 56 F2 | 	cmps	local01, #256 wc
088d4     98 FF 9F CD |  if_b	jmp	#LR__0751
088d8                 | LR__0754
088d8     45 00 00 FF 
088dc     70 E4 05 F1 | 	add	objptr, ##35440
088e0     F2 14 02 F6 | 	mov	arg02, objptr
088e4     07 12 06 F6 | 	mov	arg01, #7
088e8     0F 00 00 FF 
088ec     40 17 06 F6 | 	mov	arg03, ##8000
088f0     0E 18 C6 F9 | 	decod	arg04, #14
088f4     00 1B 06 F6 | 	mov	arg05, #256
088f8     00 1C 06 F6 | 	mov	arg06, #0
088fc     42 00 00 FF 
08900     B0 E5 85 F1 | 	sub	objptr, ##34224
08904     58 AE B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
08908     02 00 00 FF 
0890c     C0 E4 85 F1 | 	sub	objptr, ##1216
08910     05 00 00 FF 
08914     B8 13 06 F6 | 	mov	arg01, ##3000
08918     E8 B3 B0 FD | 	call	#__system___waitms
0891c     47 00 00 FF 
08920     70 E5 05 F1 | 	add	objptr, ##36720
08924     F2 00 68 FC | 	wrlong	#0, objptr
08928     47 00 00 FF 
0892c     70 E5 85 F1 | 	sub	objptr, ##36720
08930     72 12 06 F6 | 	mov	arg01, #114
08934     00 14 06 F6 | 	mov	arg02, #0
08938     5C FD BF FD | 	call	#_csave_addtoblock
0893c     62 12 06 F6 | 	mov	arg01, #98
08940     00 14 06 F6 | 	mov	arg02, #0
08944     50 FD BF FD | 	call	#_csave_addtoblock
08948     61 12 06 F6 | 	mov	arg01, #97
0894c     00 14 06 F6 | 	mov	arg02, #0
08950     44 FD BF FD | 	call	#_csave_addtoblock
08954     0D 12 06 F6 | 	mov	arg01, #13
08958     00 14 06 F6 | 	mov	arg02, #0
0895c     38 FD BF FD | 	call	#_csave_addtoblock
08960                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
08960                 | ' waitms 3000 
08960                 | ' 
08960                 | ' blockptr=0
08960                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
08960                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
08960     A7 02 68 FC | 	wrlong	#1, fp
08964     8C 4E 05 F1 | 	add	fp, #140
08968     A7 12 02 FB | 	rdlong	arg01, fp
0896c     8C 4E 85 F1 | 	sub	fp, #140
08970     09 21 02 F6 | 	mov	local02, arg01
08974     97 06 48 FB | 	callpa	#(@LR__0756-@LR__0755)>>2,fcache_load_ptr_
08978                 | LR__0755
08978     10 FB C9 FA | 	rdbyte	result1, local02 wz
0897c     01 20 06 51 |  if_ne	add	local02, #1
08980     F4 FF 9F 5D |  if_ne	jmp	#LR__0755
08984                 | LR__0756
08984     09 21 82 F1 | 	sub	local02, arg01
08988     10 23 02 F6 | 	mov	local03, local02
0898c     01 22 06 F1 | 	add	local03, #1
08990                 | LR__0757
08990     A7 1E 02 FB | 	rdlong	local01, fp
08994     11 1F 52 F2 | 	cmps	local01, local03 wc
08998     34 00 90 3D |  if_ae	jmp	#LR__0758
0899c     8C 4E 05 F1 | 	add	fp, #140
089a0     A7 12 02 FB | 	rdlong	arg01, fp
089a4     8C 4E 85 F1 | 	sub	fp, #140
089a8     A7 14 02 FB | 	rdlong	arg02, fp
089ac     01 16 06 F6 | 	mov	arg03, #1
089b0     A4 D1 B0 FD | 	call	#__system__Mid_S
089b4     FD 12 C2 FA | 	rdbyte	arg01, result1
089b8     00 14 06 F6 | 	mov	arg02, #0
089bc     D8 FC BF FD | 	call	#_csave_addtoblock
089c0     A7 1E 02 FB | 	rdlong	local01, fp
089c4     01 1E 06 F1 | 	add	local01, #1
089c8     A7 1E 62 FC | 	wrlong	local01, fp
089cc     C0 FF 9F FD | 	jmp	#LR__0757
089d0                 | LR__0758
089d0     00 12 06 F6 | 	mov	arg01, #0
089d4     00 14 06 F6 | 	mov	arg02, #0
089d8     BC FC BF FD | 	call	#_csave_addtoblock
089dc     72 12 06 F6 | 	mov	arg01, #114
089e0     00 14 06 F6 | 	mov	arg02, #0
089e4     B0 FC BF FD | 	call	#_csave_addtoblock
089e8     62 12 06 F6 | 	mov	arg01, #98
089ec     00 14 06 F6 | 	mov	arg02, #0
089f0     A4 FC BF FD | 	call	#_csave_addtoblock
089f4     73 12 06 F6 | 	mov	arg01, #115
089f8     00 14 06 F6 | 	mov	arg02, #0
089fc     98 FC BF FD | 	call	#_csave_addtoblock
08a00     0D 12 06 F6 | 	mov	arg01, #13
08a04     00 14 06 F6 | 	mov	arg02, #0
08a08     8C FC BF FD | 	call	#_csave_addtoblock
08a0c     38 00 00 FF 
08a10     48 E4 05 F1 | 	add	objptr, ##28744
08a14     F2 1E 02 FB | 	rdlong	local01, objptr
08a18     38 00 00 FF 
08a1c     48 E4 85 F1 | 	sub	objptr, ##28744
08a20     9C 4E 05 F1 | 	add	fp, #156
08a24     A7 1E 62 FC | 	wrlong	local01, fp
08a28     9C 4E 85 F1 | 	sub	fp, #156
08a2c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
08a2c                 | ' 
08a2c                 | ' saveptr=programstart
08a2c                 | ' do
08a2c                 | LR__0759
08a2c     A0 4E 05 F1 | 	add	fp, #160
08a30     A7 12 02 F6 | 	mov	arg01, fp
08a34     04 4E 85 F1 | 	sub	fp, #4
08a38     A7 14 02 FB | 	rdlong	arg02, fp
08a3c     9C 4E 85 F1 | 	sub	fp, #156
08a40     18 16 06 F6 | 	mov	arg03, #24
08a44     02 00 00 FF 
08a48     C0 E4 05 F1 | 	add	objptr, ##1216
08a4c     BC A5 B0 FD | 	call	#_psram_spin2_read1
08a50     0C 4E 05 F1 | 	add	fp, #12
08a54     A7 12 02 F6 | 	mov	arg01, fp
08a58     9C 4E 05 F1 | 	add	fp, #156
08a5c     A7 14 02 FB | 	rdlong	arg02, fp
08a60     04 4E 05 F1 | 	add	fp, #4
08a64     A7 16 02 FB | 	rdlong	arg03, fp
08a68     AC 4E 85 F1 | 	sub	fp, #172
08a6c     9C A5 B0 FD | 	call	#_psram_spin2_read1
08a70     02 00 00 FF 
08a74     C0 E4 85 F1 | 	sub	objptr, ##1216
08a78     AC 4E 05 F1 | 	add	fp, #172
08a7c     A7 12 02 FB | 	rdlong	arg01, fp
08a80     AC 4E 85 F1 | 	sub	fp, #172
08a84     00 14 06 F6 | 	mov	arg02, #0
08a88     0C FC BF FD | 	call	#_csave_addtoblock
08a8c                 | '   psram.read1(varptr(header(0)),saveptr,24)
08a8c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
08a8c                 | '   csave_addtoblock(header(3),0) ' that's always <255
08a8c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
08a8c     A7 00 68 FC | 	wrlong	#0, fp
08a90     AC 4E 05 F1 | 	add	fp, #172
08a94     A7 24 02 FB | 	rdlong	local04, fp
08a98     AC 4E 85 F1 | 	sub	fp, #172
08a9c                 | LR__0760
08a9c     A7 1E 02 FB | 	rdlong	local01, fp
08aa0     12 1F 52 F2 | 	cmps	local01, local04 wc
08aa4     2C 00 90 3D |  if_ae	jmp	#LR__0761
08aa8     A7 22 02 FB | 	rdlong	local03, fp
08aac     0C 4E 05 F1 | 	add	fp, #12
08ab0     A7 22 02 F1 | 	add	local03, fp
08ab4     11 13 C2 FA | 	rdbyte	arg01, local03
08ab8     00 14 06 F6 | 	mov	arg02, #0
08abc     0C 4E 85 F1 | 	sub	fp, #12
08ac0     D4 FB BF FD | 	call	#_csave_addtoblock
08ac4     A7 22 02 FB | 	rdlong	local03, fp
08ac8     01 22 06 F1 | 	add	local03, #1
08acc     A7 22 62 FC | 	wrlong	local03, fp
08ad0     C8 FF 9F FD | 	jmp	#LR__0760
08ad4                 | LR__0761
08ad4     B4 4E 05 F1 | 	add	fp, #180
08ad8     A7 1E 02 FB | 	rdlong	local01, fp
08adc     18 4E 85 F1 | 	sub	fp, #24
08ae0     A7 1E 62 FC | 	wrlong	local01, fp
08ae4     18 4E 05 F1 | 	add	fp, #24
08ae8     A7 1E 02 FB | 	rdlong	local01, fp
08aec     B4 4E 85 F1 | 	sub	fp, #180
08af0     FF FF 3F FF 
08af4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
08af8     30 FF 9F 5D |  if_ne	jmp	#LR__0759
08afc     00 12 06 F6 | 	mov	arg01, #0
08b00     01 14 06 F6 | 	mov	arg02, #1
08b04     90 FB BF FD | 	call	#_csave_addtoblock
08b08     24 00 00 FF 
08b0c     D4 E5 05 F1 | 	add	objptr, ##18900
08b10     F2 12 02 FB | 	rdlong	arg01, objptr
08b14     24 00 00 FF 
08b18     D4 E5 85 F1 | 	sub	objptr, ##18900
08b1c     F4 12 06 F1 | 	add	arg01, #244
08b20     09 01 58 FC | 	wrword	#0, arg01
08b24                 | LR__0762
08b24     A7 F0 03 F6 | 	mov	ptra, fp
08b28     B2 00 A0 FD | 	call	#popregs_
08b2c                 | _test_csave_ret
08b2c     2D 00 64 FD | 	ret
08b30                 | 
08b30                 | ' 
08b30                 | ' ' ----------------- Save the program
08b30                 | ' 
08b30                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
08b30                 | _do_save
08b30     01 4A 05 F6 | 	mov	COUNT_, #1
08b34     A8 00 A0 FD | 	call	#pushregs_
08b38     01 00 00 FF 
08b3c     B8 F0 07 F1 | 	add	ptra, ##696
08b40     01 00 00 FF 
08b44     10 4E 05 F1 | 	add	fp, ##528
08b48     B1 B0 86 FF 
08b4c     A7 E4 68 FC | 	wrlong	##224486002, fp
08b50     01 00 00 FF 
08b54     10 4E 85 F1 | 	sub	fp, ##528
08b58     C4 F4 BF FD | 	call	#_pop
08b5c     FF 1A 02 F6 | 	mov	arg05, result3
08b60     A7 FA 61 FC | 	wrlong	result1, fp
08b64     04 4E 05 F1 | 	add	fp, #4
08b68     A7 FC 61 FC | 	wrlong	result2, fp
08b6c     04 4E 05 F1 | 	add	fp, #4
08b70     A7 1A 62 FC | 	wrlong	arg05, fp
08b74     08 4E 85 F1 | 	sub	fp, #8
08b78                 | ' 
08b78                 | ' fileheader=$0D616272' rba+ver'
08b78                 | ' 
08b78                 | ' t1=pop() 
08b78                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
08b78     38 00 00 FF 
08b7c     48 E4 05 F1 | 	add	objptr, ##28744
08b80     F2 12 02 FB | 	rdlong	arg01, objptr
08b84     38 00 00 FF 
08b88     48 E4 85 F1 | 	sub	objptr, ##28744
08b8c     B8 7B B0 FD | 	call	#_pslpeek
08b90     FF FF 7F FF 
08b94     FF FB 0D F2 | 	cmp	result1, ##-1 wz
08b98     0C 00 90 5D |  if_ne	jmp	#LR__0770
08b9c     1B 12 06 F6 | 	mov	arg01, #27
08ba0     E8 79 B0 FD | 	call	#_printerror
08ba4     E4 01 90 FD | 	jmp	#LR__0773
08ba8                 | LR__0770
08ba8                 | ' if t1.result_type=result_string then
08ba8     08 4E 05 F1 | 	add	fp, #8
08bac     A7 1E 02 FB | 	rdlong	local01, fp
08bb0     08 4E 85 F1 | 	sub	fp, #8
08bb4     1F 1E 0E F2 | 	cmp	local01, #31 wz
08bb8     D0 01 90 5D |  if_ne	jmp	#LR__0772
08bbc                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
08bbc     A7 12 02 FB | 	rdlong	arg01, fp
08bc0     18 01 00 FF 
08bc4     08 15 06 F6 | 	mov	arg02, ##@LR__4222
08bc8     54 AF B0 FD | 	call	#__system___string_cmp
08bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
08bd0     18 01 00 AF 
08bd4     09 1F 06 A6 |  if_e	mov	local01, ##@LR__4223
08bd8     A7 1E 62 AC |  if_e	wrlong	local01, fp
08bdc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
08bdc     09 12 06 F6 | 	mov	arg01, #9
08be0     6C FA B0 FD | 	call	#__system__close
08be4     09 1E 06 F6 | 	mov	local01, #9
08be8     40 00 00 FF 
08bec     58 E4 05 F1 | 	add	objptr, ##32856
08bf0     F2 12 02 FB | 	rdlong	arg01, objptr
08bf4     40 00 00 FF 
08bf8     58 E4 85 F1 | 	sub	objptr, ##32856
08bfc     18 01 00 FF 
08c00     14 15 06 F6 | 	mov	arg02, ##@LR__4224
08c04     4C AF B0 FD | 	call	#__system___string_concat
08c08     FD 12 02 F6 | 	mov	arg01, result1
08c0c     A7 14 02 FB | 	rdlong	arg02, fp
08c10     40 AF B0 FD | 	call	#__system___string_concat
08c14     FD 14 02 F6 | 	mov	arg02, result1
08c18     0F 13 02 F6 | 	mov	arg01, local01
08c1c     0D 16 06 F6 | 	mov	arg03, #13
08c20     F0 B9 B0 FD | 	call	#__system___basic_open_string
08c24                 | '   put #9,1,fileheader,1
08c24     01 00 00 FF 
08c28     10 4E 05 F1 | 	add	fp, ##528
08c2c     A7 16 02 F6 | 	mov	arg03, fp
08c30     01 00 00 FF 
08c34     10 4E 85 F1 | 	sub	fp, ##528
08c38     09 12 06 F6 | 	mov	arg01, #9
08c3c     01 14 06 F6 | 	mov	arg02, #1
08c40     01 18 06 F6 | 	mov	arg04, #1
08c44     04 1A 06 F6 | 	mov	arg05, #4
08c48     7C BB B0 FD | 	call	#__system___basic_put
08c4c     01 00 00 FF 
08c50     0C 4E 05 F1 | 	add	fp, ##524
08c54     A7 0A 68 FC | 	wrlong	#5, fp
08c58     38 00 00 FF 
08c5c     48 E4 05 F1 | 	add	objptr, ##28744
08c60     F2 1E 02 FB | 	rdlong	local01, objptr
08c64     38 00 00 FF 
08c68     48 E4 85 F1 | 	sub	objptr, ##28744
08c6c     0C 4E 05 F1 | 	add	fp, #12
08c70     A7 1E 62 FC | 	wrlong	local01, fp
08c74     01 00 00 FF 
08c78     18 4E 85 F1 | 	sub	fp, ##536
08c7c                 | '   i=5
08c7c                 | '   saveptr=programstart
08c7c                 | '   do
08c7c                 | LR__0771
08c7c     01 00 00 FF 
08c80     1C 4E 05 F1 | 	add	fp, ##540
08c84     A7 12 02 F6 | 	mov	arg01, fp
08c88     04 4E 85 F1 | 	sub	fp, #4
08c8c     A7 14 02 FB | 	rdlong	arg02, fp
08c90     01 00 00 FF 
08c94     18 4E 85 F1 | 	sub	fp, ##536
08c98     18 16 06 F6 | 	mov	arg03, #24
08c9c     02 00 00 FF 
08ca0     C0 E4 05 F1 | 	add	objptr, ##1216
08ca4     64 A3 B0 FD | 	call	#_psram_spin2_read1
08ca8     01 00 00 FF 
08cac     34 4E 05 F1 | 	add	fp, ##564
08cb0     A7 12 02 F6 | 	mov	arg01, fp
08cb4     10 4E 85 F1 | 	sub	fp, #16
08cb8     A7 14 02 FB | 	rdlong	arg02, fp
08cbc     04 4E 05 F1 | 	add	fp, #4
08cc0     A7 16 02 FB | 	rdlong	arg03, fp
08cc4     01 00 00 FF 
08cc8     28 4E 85 F1 | 	sub	fp, ##552
08ccc     3C A3 B0 FD | 	call	#_psram_spin2_read1
08cd0     02 00 00 FF 
08cd4     C0 E4 85 F1 | 	sub	objptr, ##1216
08cd8                 | '     psram.read1(varptr(header(0)),saveptr,24)
08cd8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3))  
08cd8                 | '     put #9,i,header(3),1 : i+=4
08cd8     01 00 00 FF 
08cdc     0C 4E 05 F1 | 	add	fp, ##524
08ce0     A7 14 02 FB | 	rdlong	arg02, fp
08ce4     1C 4E 05 F1 | 	add	fp, #28
08ce8     A7 16 02 F6 | 	mov	arg03, fp
08cec     01 00 00 FF 
08cf0     28 4E 85 F1 | 	sub	fp, ##552
08cf4     09 12 06 F6 | 	mov	arg01, #9
08cf8     01 18 06 F6 | 	mov	arg04, #1
08cfc     04 1A 06 F6 | 	mov	arg05, #4
08d00     C4 BA B0 FD | 	call	#__system___basic_put
08d04     01 00 00 FF 
08d08     0C 4E 05 F1 | 	add	fp, ##524
08d0c     A7 14 02 FB | 	rdlong	arg02, fp
08d10     04 14 06 F1 | 	add	arg02, #4
08d14     A7 14 62 FC | 	wrlong	arg02, fp
08d18                 | '     put #9,i,linebuf(0),header(3) : i+=header(3)
08d18     28 4E 05 F1 | 	add	fp, #40
08d1c     A7 16 02 F6 | 	mov	arg03, fp
08d20     0C 4E 85 F1 | 	sub	fp, #12
08d24     A7 18 02 FB | 	rdlong	arg04, fp
08d28     01 00 00 FF 
08d2c     28 4E 85 F1 | 	sub	fp, ##552
08d30     09 12 06 F6 | 	mov	arg01, #9
08d34     01 1A 06 F6 | 	mov	arg05, #1
08d38     8C BA B0 FD | 	call	#__system___basic_put
08d3c     01 00 00 FF 
08d40     28 4E 05 F1 | 	add	fp, ##552
08d44     A7 1A 02 FB | 	rdlong	arg05, fp
08d48     1C 4E 85 F1 | 	sub	fp, #28
08d4c     A7 1E 02 FB | 	rdlong	local01, fp
08d50     0D 1F 02 F1 | 	add	local01, arg05
08d54     A7 1E 62 FC | 	wrlong	local01, fp
08d58     24 4E 05 F1 | 	add	fp, #36
08d5c     A7 1E 02 FB | 	rdlong	local01, fp
08d60     18 4E 85 F1 | 	sub	fp, #24
08d64     A7 1E 62 FC | 	wrlong	local01, fp
08d68     18 4E 05 F1 | 	add	fp, #24
08d6c     A7 1E 02 FB | 	rdlong	local01, fp
08d70     01 00 00 FF 
08d74     30 4E 85 F1 | 	sub	fp, ##560
08d78     FF FF 3F FF 
08d7c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
08d80     F8 FE 9F 5D |  if_ne	jmp	#LR__0771
08d84                 | '   close #9  
08d84     09 12 06 F6 | 	mov	arg01, #9
08d88     C4 F8 B0 FD | 	call	#__system__close
08d8c                 | LR__0772
08d8c                 | LR__0773
08d8c     A7 F0 03 F6 | 	mov	ptra, fp
08d90     B2 00 A0 FD | 	call	#popregs_
08d94                 | _do_save_ret
08d94     2D 00 64 FD | 	ret
08d98                 | 
08d98                 | ' 
08d98                 | ' '----------------- Load the program
08d98                 | ' 'lo todo: errors while loading
08d98                 | ' sub do_load
08d98                 | _do_load
08d98     01 4A 05 F6 | 	mov	COUNT_, #1
08d9c     A8 00 A0 FD | 	call	#pushregs_
08da0     A4 F0 07 F1 | 	add	ptra, #164
08da4     A0 4E 05 F1 | 	add	fp, #160
08da8     A7 12 02 F6 | 	mov	arg01, fp
08dac     80 4E 85 F1 | 	sub	fp, #128
08db0     A7 14 02 F6 | 	mov	arg02, fp
08db4     20 4E 85 F1 | 	sub	fp, #32
08db8     09 15 62 FC | 	wrlong	arg02, arg01
08dbc     60 F2 BF FD | 	call	#_pop
08dc0     FF 1E 02 F6 | 	mov	local01, result3
08dc4     A7 FA 61 FC | 	wrlong	result1, fp
08dc8     04 4E 05 F1 | 	add	fp, #4
08dcc     A7 FC 61 FC | 	wrlong	result2, fp
08dd0     04 4E 05 F1 | 	add	fp, #4
08dd4     A7 1E 62 FC | 	wrlong	local01, fp
08dd8                 | ' 
08dd8                 | ' lpoke varptr(line2$),varptr(line2)
08dd8                 | ' t1=pop() 
08dd8                 | ' if t1.result_type=result_string then
08dd8     08 4E 85 F1 | 	sub	fp, #8
08ddc     1F 1E 0E F2 | 	cmp	local01, #31 wz
08de0     64 02 90 5D |  if_ne	jmp	#LR__0784
08de4     3C 08 B0 FD | 	call	#_do_new
08de8                 | '   do_new
08de8                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
08de8     A7 12 02 FB | 	rdlong	arg01, fp
08dec     18 01 00 FF 
08df0     16 15 06 F6 | 	mov	arg02, ##@LR__4225
08df4     28 AD B0 FD | 	call	#__system___string_cmp
08df8     00 FA 0D F2 | 	cmp	result1, #0 wz
08dfc     18 01 00 AF 
08e00     17 1F 06 A6 |  if_e	mov	local01, ##@LR__4226
08e04     A7 1E 62 AC |  if_e	wrlong	local01, fp
08e08                 | ' '   print currentdir$+"/"+t1.result.sresult
08e08                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
08e08     09 12 06 F6 | 	mov	arg01, #9
08e0c     40 F8 B0 FD | 	call	#__system__close
08e10     09 1E 06 F6 | 	mov	local01, #9
08e14     40 00 00 FF 
08e18     58 E4 05 F1 | 	add	objptr, ##32856
08e1c     F2 12 02 FB | 	rdlong	arg01, objptr
08e20     40 00 00 FF 
08e24     58 E4 85 F1 | 	sub	objptr, ##32856
08e28     18 01 00 FF 
08e2c     22 15 06 F6 | 	mov	arg02, ##@LR__4227
08e30     20 AD B0 FD | 	call	#__system___string_concat
08e34     FD 12 02 F6 | 	mov	arg01, result1
08e38     A7 14 02 FB | 	rdlong	arg02, fp
08e3c     14 AD B0 FD | 	call	#__system___string_concat
08e40     FD 14 02 F6 | 	mov	arg02, result1
08e44     0F 13 02 F6 | 	mov	arg01, local01
08e48     00 16 06 F6 | 	mov	arg03, #0
08e4c     C4 B7 B0 FD | 	call	#__system___basic_open_string
08e50     20 E8 05 F1 | 	add	ptr___system__dat__, #32
08e54     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
08e58     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
08e5c     10 4E 05 F1 | 	add	fp, #16
08e60     A7 FA 61 FC | 	wrlong	result1, fp
08e64                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
08e64     10 4E 85 F1 | 	sub	fp, #16
08e68     9C 00 90 AD |  if_e	jmp	#LR__0780
08e6c     00 12 06 F6 | 	mov	arg01, #0
08e70     68 01 B1 FD | 	call	#__system___getiolock_0306
08e74     FD 12 02 F6 | 	mov	arg01, result1
08e78     7C AC B0 FD | 	call	#__system___lockmem
08e7c     18 01 00 FF 
08e80     24 15 06 F6 | 	mov	arg02, ##@LR__4228
08e84     00 12 06 F6 | 	mov	arg01, #0
08e88     00 16 06 F6 | 	mov	arg03, #0
08e8c     74 B8 B0 FD | 	call	#__system___basic_print_string
08e90     10 4E 05 F1 | 	add	fp, #16
08e94     A7 14 02 FB | 	rdlong	arg02, fp
08e98     10 4E 85 F1 | 	sub	fp, #16
08e9c     00 12 06 F6 | 	mov	arg01, #0
08ea0     00 16 06 F6 | 	mov	arg03, #0
08ea4     0A 18 06 F6 | 	mov	arg04, #10
08ea8     9C B8 B0 FD | 	call	#__system___basic_print_integer
08eac     18 01 00 FF 
08eb0     32 15 06 F6 | 	mov	arg02, ##@LR__4229
08eb4     00 12 06 F6 | 	mov	arg01, #0
08eb8     00 16 06 F6 | 	mov	arg03, #0
08ebc     44 B8 B0 FD | 	call	#__system___basic_print_string
08ec0     10 4E 05 F1 | 	add	fp, #16
08ec4     A7 12 02 FB | 	rdlong	arg01, fp
08ec8     10 4E 85 F1 | 	sub	fp, #16
08ecc     60 D1 B0 FD | 	call	#__system___strerror
08ed0     FD 14 02 F6 | 	mov	arg02, result1
08ed4     00 12 06 F6 | 	mov	arg01, #0
08ed8     00 16 06 F6 | 	mov	arg03, #0
08edc     24 B8 B0 FD | 	call	#__system___basic_print_string
08ee0     00 12 06 F6 | 	mov	arg01, #0
08ee4     0A 14 06 F6 | 	mov	arg02, #10
08ee8     00 16 06 F6 | 	mov	arg03, #0
08eec     BC B7 B0 FD | 	call	#__system___basic_print_char
08ef0     00 12 06 F6 | 	mov	arg01, #0
08ef4     E4 00 B1 FD | 	call	#__system___getiolock_0306
08ef8     FD 00 68 FC | 	wrlong	#0, result1
08efc     09 12 06 F6 | 	mov	arg01, #9
08f00     4C F7 B0 FD | 	call	#__system__close
08f04     48 01 90 FD | 	jmp	#LR__0786
08f08                 | LR__0780
08f08     0C 4E 05 F1 | 	add	fp, #12
08f0c     A7 0A 68 FC | 	wrlong	#5, fp
08f10                 | '   i=5
08f10                 | '   get #9,1,header,1
08f10     0C 4E 05 F1 | 	add	fp, #12
08f14     A7 16 02 F6 | 	mov	arg03, fp
08f18     18 4E 85 F1 | 	sub	fp, #24
08f1c     09 12 06 F6 | 	mov	arg01, #9
08f20     01 14 06 F6 | 	mov	arg02, #1
08f24     01 18 06 F6 | 	mov	arg04, #1
08f28     04 1A 06 F6 | 	mov	arg05, #4
08f2c     04 B9 B0 FD | 	call	#__system___basic_get
08f30                 | '   if header<>$0D616272 then printerror(26) : close #9 : return
08f30     18 4E 05 F1 | 	add	fp, #24
08f34     A7 1E 02 FB | 	rdlong	local01, fp
08f38     18 4E 85 F1 | 	sub	fp, #24
08f3c     B1 B0 06 FF 
08f40     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
08f44     14 00 90 AD |  if_e	jmp	#LR__0781
08f48     1A 12 06 F6 | 	mov	arg01, #26
08f4c     3C 76 B0 FD | 	call	#_printerror
08f50     09 12 06 F6 | 	mov	arg01, #9
08f54     F8 F6 B0 FD | 	call	#__system__close
08f58     F4 00 90 FD | 	jmp	#LR__0786
08f5c                 | LR__0781
08f5c                 | '   do
08f5c                 | LR__0782
08f5c                 | '     get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
08f5c     0C 4E 05 F1 | 	add	fp, #12
08f60     A7 14 02 FB | 	rdlong	arg02, fp
08f64     10 4E 05 F1 | 	add	fp, #16
08f68     A7 16 02 F6 | 	mov	arg03, fp
08f6c     1C 4E 85 F1 | 	sub	fp, #28
08f70     09 12 06 F6 | 	mov	arg01, #9
08f74     01 18 06 F6 | 	mov	arg04, #1
08f78     04 1A 06 F6 | 	mov	arg05, #4
08f7c     B4 B8 B0 FD | 	call	#__system___basic_get
08f80     14 4E 05 F1 | 	add	fp, #20
08f84     A7 FA 61 FC | 	wrlong	result1, fp
08f88     08 4E 85 F1 | 	sub	fp, #8
08f8c     A7 1E 02 FB | 	rdlong	local01, fp
08f90     04 1E 06 F1 | 	add	local01, #4
08f94     A7 1E 62 FC | 	wrlong	local01, fp
08f98     10 4E 05 F1 | 	add	fp, #16
08f9c     A7 1E 02 FB | 	rdlong	local01, fp
08fa0     04 4E 05 F1 | 	add	fp, #4
08fa4     A7 1E 02 F1 | 	add	local01, fp
08fa8     0F 01 48 FC | 	wrbyte	#0, local01
08fac                 | '    if amount=1 then  
08fac     0C 4E 85 F1 | 	sub	fp, #12
08fb0     A7 1E 02 FB | 	rdlong	local01, fp
08fb4     14 4E 85 F1 | 	sub	fp, #20
08fb8     01 1E 0E F2 | 	cmp	local01, #1 wz
08fbc     68 00 90 5D |  if_ne	jmp	#LR__0783
08fc0                 | '       get #9,i,line2(0),linelength : i+=linelength
08fc0     0C 4E 05 F1 | 	add	fp, #12
08fc4     A7 14 02 FB | 	rdlong	arg02, fp
08fc8     14 4E 05 F1 | 	add	fp, #20
08fcc     A7 16 02 F6 | 	mov	arg03, fp
08fd0     04 4E 85 F1 | 	sub	fp, #4
08fd4     A7 18 02 FB | 	rdlong	arg04, fp
08fd8     1C 4E 85 F1 | 	sub	fp, #28
08fdc     09 12 06 F6 | 	mov	arg01, #9
08fe0     01 1A 06 F6 | 	mov	arg05, #1
08fe4     4C B8 B0 FD | 	call	#__system___basic_get
08fe8     0C 4E 05 F1 | 	add	fp, #12
08fec     A7 1E 02 FB | 	rdlong	local01, fp
08ff0     10 4E 05 F1 | 	add	fp, #16
08ff4     A7 1A 02 FB | 	rdlong	arg05, fp
08ff8     0D 1F 02 F1 | 	add	local01, arg05
08ffc     10 4E 85 F1 | 	sub	fp, #16
09000     A7 1E 62 FC | 	wrlong	local01, fp
09004     94 4E 05 F1 | 	add	fp, #148
09008     A7 1E 02 FB | 	rdlong	local01, fp
0900c     A0 4E 85 F1 | 	sub	fp, #160
09010     24 00 00 FF 
09014     E0 E5 05 F1 | 	add	objptr, ##18912
09018     F2 1E 62 FC | 	wrlong	local01, objptr
0901c     24 00 00 FF 
09020     E0 E5 85 F1 | 	sub	objptr, ##18912
09024     F4 79 BF FD | 	call	#_interpret
09028                 | LR__0783
09028     14 4E 05 F1 | 	add	fp, #20
0902c     A7 1E 02 FB | 	rdlong	local01, fp
09030     14 4E 85 F1 | 	sub	fp, #20
09034     01 1E 56 F2 | 	cmps	local01, #1 wc
09038     20 FF 9F 3D |  if_ae	jmp	#LR__0782
0903c                 | '   close #9  
0903c     09 12 06 F6 | 	mov	arg01, #9
09040     0C F6 B0 FD | 	call	#__system__close
09044     08 00 90 FD | 	jmp	#LR__0785
09048                 | LR__0784
09048     1E 12 06 F6 | 	mov	arg01, #30
0904c     3C 75 B0 FD | 	call	#_printerror
09050                 | LR__0785
09050                 | LR__0786
09050     A7 F0 03 F6 | 	mov	ptra, fp
09054     B2 00 A0 FD | 	call	#popregs_
09058                 | _do_load_ret
09058     2D 00 64 FD | 	ret
0905c                 | 
0905c                 | ' 
0905c                 | ' '----------------- Run the program 
0905c                 | ' 
0905c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0905c                 | ' 
0905c                 | ' sub do_run
0905c                 | _do_run
0905c     01 4A 05 F6 | 	mov	COUNT_, #1
09060     A8 00 A0 FD | 	call	#pushregs_
09064     38 00 00 FF 
09068     48 E4 05 F1 | 	add	objptr, ##28744
0906c     F2 1C 02 FB | 	rdlong	arg06, objptr
09070     0F 00 00 FF 
09074     2C E5 05 F1 | 	add	objptr, ##7980
09078     F2 1C 62 FC | 	wrlong	arg06, objptr
0907c     04 E4 05 F1 | 	add	objptr, #4
09080     F2 00 68 FC | 	wrlong	#0, objptr
09084     04 E4 05 F1 | 	add	objptr, #4
09088     FF FF FF FF 
0908c     F2 FE 6B FC | 	wrlong	##-1, objptr
09090                 | ' if inrun>0 then 
09090     04 E4 05 F1 | 	add	objptr, #4
09094     F2 1C 02 FB | 	rdlong	arg06, objptr
09098     47 00 00 FF 
0909c     80 E5 85 F1 | 	sub	objptr, ##36736
090a0     01 1C 16 F2 | 	cmp	arg06, #1 wc
090a4     30 00 90 CD |  if_b	jmp	#LR__0790
090a8     47 00 00 FF 
090ac     84 E5 05 F1 | 	add	objptr, ##36740
090b0     F2 12 02 F6 | 	mov	arg01, objptr
090b4     10 E4 85 F1 | 	sub	objptr, #16
090b8     F2 14 02 FB | 	rdlong	arg02, objptr
090bc     18 16 06 F6 | 	mov	arg03, #24
090c0     45 00 00 FF 
090c4     B4 E4 85 F1 | 	sub	objptr, ##35508
090c8     40 9F B0 FD | 	call	#_psram_spin2_read1
090cc     02 00 00 FF 
090d0     C0 E4 85 F1 | 	sub	objptr, ##1216
090d4                 | '   psram.read1(varptr(runheader),runptr,24)  
090d4                 | '   return
090d4     A4 02 90 FD | 	jmp	#LR__0796
090d8                 | LR__0790
090d8     47 00 00 FF 
090dc     80 E5 05 F1 | 	add	objptr, ##36736
090e0     F2 02 68 FC | 	wrlong	#1, objptr
090e4     04 E4 05 F1 | 	add	objptr, #4
090e8     F2 12 02 F6 | 	mov	arg01, objptr
090ec     10 E4 85 F1 | 	sub	objptr, #16
090f0     F2 14 02 FB | 	rdlong	arg02, objptr
090f4     18 16 06 F6 | 	mov	arg03, #24
090f8     45 00 00 FF 
090fc     B4 E4 85 F1 | 	sub	objptr, ##35508
09100     08 9F B0 FD | 	call	#_psram_spin2_read1
09104                 | ' inrun=1
09104                 | ' psram.read1(varptr(runheader),runptr,24) 
09104                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09104     45 00 00 FF 
09108     C4 E4 05 F1 | 	add	objptr, ##35524
0910c     F2 1E 02 FB | 	rdlong	local01, objptr
09110     47 00 00 FF 
09114     84 E5 85 F1 | 	sub	objptr, ##36740
09118     FF FF 7F FF 
0911c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09120     47 00 00 AF 
09124     80 E5 05 A1 |  if_e	add	objptr, ##36736
09128     F2 00 68 AC |  if_e	wrlong	#0, objptr
0912c     47 00 00 AF 
09130     80 E5 85 A1 |  if_e	sub	objptr, ##36736
09134     44 02 90 AD |  if_e	jmp	#LR__0796
09138                 | ' do 
09138                 | LR__0791
09138                 | '   if runptr<>oldrunptr then
09138     47 00 00 FF 
0913c     74 E5 05 F1 | 	add	objptr, ##36724
09140     F2 1E 02 FB | 	rdlong	local01, objptr
09144     08 E4 05 F1 | 	add	objptr, #8
09148     F2 1C 02 FB | 	rdlong	arg06, objptr
0914c     47 00 00 FF 
09150     7C E5 85 F1 | 	sub	objptr, ##36732
09154     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09158     CC 00 90 AD |  if_e	jmp	#LR__0792
0915c     47 00 00 FF 
09160     84 E5 05 F1 | 	add	objptr, ##36740
09164     F2 12 02 F6 | 	mov	arg01, objptr
09168     10 E4 85 F1 | 	sub	objptr, #16
0916c     F2 14 02 FB | 	rdlong	arg02, objptr
09170     18 16 06 F6 | 	mov	arg03, #24
09174     45 00 00 FF 
09178     B4 E4 85 F1 | 	sub	objptr, ##35508
0917c     8C 9E B0 FD | 	call	#_psram_spin2_read1
09180     32 00 00 FF 
09184     80 E5 05 F1 | 	add	objptr, ##25984
09188     F2 12 02 F6 | 	mov	arg01, objptr
0918c     12 00 00 FF 
09190     34 E5 05 F1 | 	add	objptr, ##9524
09194     F2 14 02 FB | 	rdlong	arg02, objptr
09198     14 00 00 FF 
0919c     4C E5 85 F1 | 	sub	objptr, ##10572
091a0     F2 1E 02 FB | 	rdlong	local01, objptr
091a4     01 1E 66 F0 | 	shl	local01, #1
091a8     0F 15 02 F1 | 	add	arg02, local01
091ac     14 00 00 FF 
091b0     64 E5 05 F1 | 	add	objptr, ##10596
091b4     F2 16 02 FB | 	rdlong	arg03, objptr
091b8     18 E4 85 F1 | 	sub	objptr, #24
091bc     F2 1E 02 FB | 	rdlong	local01, objptr
091c0     0F 17 82 F1 | 	sub	arg03, local01
091c4     45 00 00 FF 
091c8     B4 E4 85 F1 | 	sub	objptr, ##35508
091cc     3C 9E B0 FD | 	call	#_psram_spin2_read1
091d0     45 00 00 FF 
091d4     CC E4 05 F1 | 	add	objptr, ##35532
091d8     F2 1E 02 FB | 	rdlong	local01, objptr
091dc     18 E4 85 F1 | 	sub	objptr, #24
091e0     F2 1C 02 FB | 	rdlong	arg06, objptr
091e4     0E 1F 82 F1 | 	sub	local01, arg06
091e8     14 00 00 FF 
091ec     4C E5 85 F1 | 	sub	objptr, ##10572
091f0     F2 1C 02 FB | 	rdlong	arg06, objptr
091f4     0E 1F 12 FD | 	qdiv	local01, arg06
091f8     05 00 00 FF 
091fc     18 E4 05 F1 | 	add	objptr, ##2584
09200     18 1E 62 FD | 	getqx	local01
09204     03 1E 86 F1 | 	sub	local01, #3
09208     F2 1E 62 FC | 	wrlong	local01, objptr
0920c     0F 00 00 FF 
09210     34 E5 05 F1 | 	add	objptr, ##7988
09214     F2 1E 02 FB | 	rdlong	local01, objptr
09218     08 E4 05 F1 | 	add	objptr, #8
0921c     F2 1E 62 FC | 	wrlong	local01, objptr
09220     47 00 00 FF 
09224     7C E5 85 F1 | 	sub	objptr, ##36732
09228                 | LR__0792
09228     47 00 00 FF 
0922c     98 E5 05 F1 | 	add	objptr, ##36760
09230     F2 1E 02 FB | 	rdlong	local01, objptr
09234     24 E4 85 F1 | 	sub	objptr, #36
09238     F2 1E 62 FC | 	wrlong	local01, objptr
0923c     04 E4 05 F1 | 	add	objptr, #4
09240     F2 12 02 FB | 	rdlong	arg01, objptr
09244     47 00 00 FF 
09248     78 E5 85 F1 | 	sub	objptr, ##36728
0924c     CC EC BF FD | 	call	#_execute_line
09250     47 00 00 FF 
09254     78 E5 05 F1 | 	add	objptr, ##36728
09258     F2 FA 61 FC | 	wrlong	result1, objptr
0925c     04 E4 85 F1 | 	sub	objptr, #4
09260     F2 1E 02 FB | 	rdlong	local01, objptr
09264     47 00 00 FF 
09268     74 E5 85 F1 | 	sub	objptr, ##36724
0926c     FF FF 3F FF 
09270     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09274     0C 00 90 AD |  if_e	jmp	#LR__0793
09278     20 A1 B0 FD | 	call	#_usbnew_spin2_get_key
0927c     06 FB 0D F2 | 	cmp	result1, #262 wz
09280     B4 FE 9F 5D |  if_ne	jmp	#LR__0791
09284                 | LR__0793
09284                 | ' if runheader(5)<>$7FFF_FFFF then 
09284     47 00 00 FF 
09288     98 E5 05 F1 | 	add	objptr, ##36760
0928c     F2 1E 02 FB | 	rdlong	local01, objptr
09290     47 00 00 FF 
09294     98 E5 85 F1 | 	sub	objptr, ##36760
09298     FF FF 3F FF 
0929c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
092a0     C4 00 90 AD |  if_e	jmp	#LR__0795
092a4                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
092a4     47 00 00 FF 
092a8     A4 E5 05 F1 | 	add	objptr, ##36772
092ac     F2 1E 02 FB | 	rdlong	local01, objptr
092b0     47 00 00 FF 
092b4     A4 E5 85 F1 | 	sub	objptr, ##36772
092b8     01 1E 0E F2 | 	cmp	local01, #1 wz
092bc     44 00 90 5D |  if_ne	jmp	#LR__0794
092c0     01 00 00 FF 
092c4     00 EA 05 F1 | 	add	ptr__dat__, ##512
092c8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
092cc     01 00 00 FF 
092d0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
092d4     07 12 06 F6 | 	mov	arg01, #7
092d8     56 00 00 FF 
092dc     44 16 06 F6 | 	mov	arg03, ##44100
092e0     0E 18 C6 F9 | 	decod	arg04, #14
092e4     03 00 00 FF 
092e8     94 1A 06 F6 | 	mov	arg05, ##1684
092ec     01 1C 66 F6 | 	neg	arg06, #1
092f0     02 00 00 FF 
092f4     C0 E4 05 F1 | 	add	objptr, ##1216
092f8     C8 A3 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
092fc     02 00 00 FF 
09300     C0 E4 85 F1 | 	sub	objptr, ##1216
09304                 | LR__0794
09304                 | '   print "Stopped at line ";runheader(0)
09304     00 12 06 F6 | 	mov	arg01, #0
09308     D0 FC B0 FD | 	call	#__system___getiolock_0306
0930c     FD 12 02 F6 | 	mov	arg01, result1
09310     E4 A7 B0 FD | 	call	#__system___lockmem
09314     18 01 00 FF 
09318     35 15 06 F6 | 	mov	arg02, ##@LR__4230
0931c     00 12 06 F6 | 	mov	arg01, #0
09320     00 16 06 F6 | 	mov	arg03, #0
09324     DC B3 B0 FD | 	call	#__system___basic_print_string
09328     47 00 00 FF 
0932c     84 E5 05 F1 | 	add	objptr, ##36740
09330     F2 14 02 FB | 	rdlong	arg02, objptr
09334     47 00 00 FF 
09338     84 E5 85 F1 | 	sub	objptr, ##36740
0933c     00 12 06 F6 | 	mov	arg01, #0
09340     00 16 06 F6 | 	mov	arg03, #0
09344     0A 18 06 F6 | 	mov	arg04, #10
09348     3C B4 B0 FD | 	call	#__system___basic_print_unsigned
0934c     00 12 06 F6 | 	mov	arg01, #0
09350     0A 14 06 F6 | 	mov	arg02, #10
09354     00 16 06 F6 | 	mov	arg03, #0
09358     50 B3 B0 FD | 	call	#__system___basic_print_char
0935c     00 12 06 F6 | 	mov	arg01, #0
09360     78 FC B0 FD | 	call	#__system___getiolock_0306
09364     FD 00 68 FC | 	wrlong	#0, result1
09368                 | LR__0795
09368     47 00 00 FF 
0936c     80 E5 05 F1 | 	add	objptr, ##36736
09370     F2 00 68 FC | 	wrlong	#0, objptr
09374     47 00 00 FF 
09378     80 E5 85 F1 | 	sub	objptr, ##36736
0937c                 | LR__0796
0937c     A7 F0 03 F6 | 	mov	ptra, fp
09380     B2 00 A0 FD | 	call	#popregs_
09384                 | _do_run_ret
09384     2D 00 64 FD | 	ret
09388                 | 
09388                 | ' 
09388                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09388                 | ' 
09388                 | ' sub do_list
09388                 | _do_list
09388     02 4A 05 F6 | 	mov	COUNT_, #2
0938c     A8 00 A0 FD | 	call	#pushregs_
09390     B8 F0 07 F1 | 	add	ptra, #184
09394     04 4E 05 F1 | 	add	fp, #4
09398     A7 00 68 FC | 	wrlong	#0, fp
0939c     04 4E 05 F1 | 	add	fp, #4
093a0     FF FF BF FF 
093a4     A7 FE 6B FC | 	wrlong	##2147483647, fp
093a8     08 4E 85 F1 | 	sub	fp, #8
093ac     38 00 00 FF 
093b0     44 E4 05 F1 | 	add	objptr, ##28740
093b4     F2 1E 02 FB | 	rdlong	local01, objptr
093b8     0F 17 02 F6 | 	mov	arg03, local01
093bc     01 16 66 F0 | 	shl	arg03, #1
093c0     0F 17 02 F1 | 	add	arg03, local01
093c4     02 16 66 F0 | 	shl	arg03, #2
093c8     03 00 00 FF 
093cc     04 E4 85 F1 | 	sub	objptr, ##1540
093d0     F2 16 02 F1 | 	add	arg03, objptr
093d4     0B 17 02 FB | 	rdlong	arg03, arg03
093d8     A7 16 62 FC | 	wrlong	arg03, fp
093dc                 | ' 
093dc                 | ' startline=0 : endline=$7FFFFFFF
093dc                 | ' numpar=compiledline(lineptr_e).result.uresult
093dc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
093dc     01 16 0E F2 | 	cmp	arg03, #1 wz
093e0     35 00 00 FF 
093e4     40 E4 85 F1 | 	sub	objptr, ##27200
093e8     3C 00 90 5D |  if_ne	jmp	#LR__0800
093ec     30 EC BF FD | 	call	#_pop
093f0     FF 1E 02 F6 | 	mov	local01, result3
093f4     0C 4E 05 F1 | 	add	fp, #12
093f8     A7 FA 61 FC | 	wrlong	result1, fp
093fc     04 4E 05 F1 | 	add	fp, #4
09400     A7 FC 61 FC | 	wrlong	result2, fp
09404     04 4E 05 F1 | 	add	fp, #4
09408     A7 1E 62 FC | 	wrlong	local01, fp
0940c     08 4E 85 F1 | 	sub	fp, #8
09410     A7 12 02 F6 | 	mov	arg01, fp
09414     0C 4E 85 F1 | 	sub	fp, #12
09418     D0 37 B0 FD | 	call	#_converttoint
0941c     04 4E 05 F1 | 	add	fp, #4
09420     A7 FA 61 FC | 	wrlong	result1, fp
09424     04 4E 85 F1 | 	sub	fp, #4
09428                 | LR__0800
09428                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
09428     A7 16 02 FB | 	rdlong	arg03, fp
0942c     02 16 0E F2 | 	cmp	arg03, #2 wz
09430     7C 00 90 5D |  if_ne	jmp	#LR__0801
09434     E8 EB BF FD | 	call	#_pop
09438     FF 1E 02 F6 | 	mov	local01, result3
0943c     0C 4E 05 F1 | 	add	fp, #12
09440     A7 FA 61 FC | 	wrlong	result1, fp
09444     04 4E 05 F1 | 	add	fp, #4
09448     A7 FC 61 FC | 	wrlong	result2, fp
0944c     04 4E 05 F1 | 	add	fp, #4
09450     A7 1E 62 FC | 	wrlong	local01, fp
09454     08 4E 85 F1 | 	sub	fp, #8
09458     A7 12 02 F6 | 	mov	arg01, fp
0945c     0C 4E 85 F1 | 	sub	fp, #12
09460     88 37 B0 FD | 	call	#_converttoint
09464     FD 1E 02 F6 | 	mov	local01, result1
09468     08 4E 05 F1 | 	add	fp, #8
0946c     A7 1E 62 FC | 	wrlong	local01, fp
09470     08 4E 85 F1 | 	sub	fp, #8
09474     A8 EB BF FD | 	call	#_pop
09478     FF 1E 02 F6 | 	mov	local01, result3
0947c     0C 4E 05 F1 | 	add	fp, #12
09480     A7 FA 61 FC | 	wrlong	result1, fp
09484     04 4E 05 F1 | 	add	fp, #4
09488     A7 FC 61 FC | 	wrlong	result2, fp
0948c     04 4E 05 F1 | 	add	fp, #4
09490     A7 1E 62 FC | 	wrlong	local01, fp
09494     08 4E 85 F1 | 	sub	fp, #8
09498     A7 12 02 F6 | 	mov	arg01, fp
0949c     0C 4E 85 F1 | 	sub	fp, #12
094a0     48 37 B0 FD | 	call	#_converttoint
094a4     04 4E 05 F1 | 	add	fp, #4
094a8     A7 FA 61 FC | 	wrlong	result1, fp
094ac     04 4E 85 F1 | 	sub	fp, #4
094b0                 | LR__0801
094b0                 | ' 
094b0                 | ' 
094b0                 | ' print
094b0     00 12 06 F6 | 	mov	arg01, #0
094b4     24 FB B0 FD | 	call	#__system___getiolock_0306
094b8     FD 12 02 F6 | 	mov	arg01, result1
094bc     38 A6 B0 FD | 	call	#__system___lockmem
094c0     00 12 06 F6 | 	mov	arg01, #0
094c4     0A 14 06 F6 | 	mov	arg02, #10
094c8     00 16 06 F6 | 	mov	arg03, #0
094cc     DC B1 B0 FD | 	call	#__system___basic_print_char
094d0     00 12 06 F6 | 	mov	arg01, #0
094d4     04 FB B0 FD | 	call	#__system___getiolock_0306
094d8     FD 00 68 FC | 	wrlong	#0, result1
094dc     38 00 00 FF 
094e0     48 E4 05 F1 | 	add	objptr, ##28744
094e4     F2 20 02 FB | 	rdlong	local02, objptr
094e8     11 00 00 FF 
094ec     54 E4 05 F1 | 	add	objptr, ##8788
094f0     F2 20 62 FC | 	wrlong	local02, objptr
094f4     49 00 00 FF 
094f8     9C E4 85 F1 | 	sub	objptr, ##37532
094fc                 | ' do 
094fc                 | LR__0802
094fc     20 4E 05 F1 | 	add	fp, #32
09500     A7 12 02 F6 | 	mov	arg01, fp
09504     20 4E 85 F1 | 	sub	fp, #32
09508     49 00 00 FF 
0950c     9C E4 05 F1 | 	add	objptr, ##37532
09510     F2 14 02 FB | 	rdlong	arg02, objptr
09514     18 16 06 F6 | 	mov	arg03, #24
09518     46 00 00 FF 
0951c     DC E5 85 F1 | 	sub	objptr, ##36316
09520     E8 9A B0 FD | 	call	#_psram_spin2_read1
09524     02 00 00 FF 
09528     C0 E4 85 F1 | 	sub	objptr, ##1216
0952c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0952c                 | '   if header(0)<> $FFFFFFFF then
0952c     20 4E 05 F1 | 	add	fp, #32
09530     A7 20 02 FB | 	rdlong	local02, fp
09534     20 4E 85 F1 | 	sub	fp, #32
09538     FF FF 7F FF 
0953c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09540     A8 00 90 AD |  if_e	jmp	#LR__0804
09544     38 4E 05 F1 | 	add	fp, #56
09548     3F 16 06 F6 | 	mov	arg03, #63
0954c     28 16 62 FD | 	setq	arg03
09550     A7 00 68 FC | 	wrlong	#0, fp
09554     A7 12 02 F6 | 	mov	arg01, fp
09558     10 4E 85 F1 | 	sub	fp, #16
0955c     A7 14 02 FB | 	rdlong	arg02, fp
09560     04 4E 05 F1 | 	add	fp, #4
09564     A7 16 02 FB | 	rdlong	arg03, fp
09568     2C 4E 85 F1 | 	sub	fp, #44
0956c     02 00 00 FF 
09570     C0 E4 05 F1 | 	add	objptr, ##1216
09574     94 9A B0 FD | 	call	#_psram_spin2_read1
09578     02 00 00 FF 
0957c     C0 E4 85 F1 | 	sub	objptr, ##1216
09580                 | '     longfill(linebuf,0,64)
09580                 | '     psram.read1(varptr(linebuf),header(2),header(3))
09580                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
09580     20 4E 05 F1 | 	add	fp, #32
09584     A7 20 02 FB | 	rdlong	local02, fp
09588     1C 4E 85 F1 | 	sub	fp, #28
0958c     A7 1E 02 FB | 	rdlong	local01, fp
09590     04 4E 85 F1 | 	sub	fp, #4
09594     0F 21 52 F2 | 	cmps	local02, local01 wc
09598     30 00 90 CD |  if_b	jmp	#LR__0803
0959c     20 4E 05 F1 | 	add	fp, #32
095a0     A7 20 02 FB | 	rdlong	local02, fp
095a4     18 4E 85 F1 | 	sub	fp, #24
095a8     A7 16 02 FB | 	rdlong	arg03, fp
095ac     08 4E 85 F1 | 	sub	fp, #8
095b0     0B 21 5A F2 | 	cmps	local02, arg03 wcz
095b4     14 00 90 1D |  if_a	jmp	#LR__0803
095b8     38 4E 05 F1 | 	add	fp, #56
095bc     A7 12 02 F6 | 	mov	arg01, fp
095c0     38 4E 85 F1 | 	sub	fp, #56
095c4                 | ' 
095c4                 | ' write(text)
095c4     0C 95 B0 FD | 	call	#_hg010b_spin2_write
095c8                 | ' crlf
095c8     68 96 B0 FD | 	call	#_hg010b_spin2_crlf
095cc                 | LR__0803
095cc     34 4E 05 F1 | 	add	fp, #52
095d0     A7 20 02 FB | 	rdlong	local02, fp
095d4     34 4E 85 F1 | 	sub	fp, #52
095d8     49 00 00 FF 
095dc     9C E4 05 F1 | 	add	objptr, ##37532
095e0     F2 20 62 FC | 	wrlong	local02, objptr
095e4     49 00 00 FF 
095e8     9C E4 85 F1 | 	sub	objptr, ##37532
095ec                 | LR__0804
095ec     34 4E 05 F1 | 	add	fp, #52
095f0     A7 20 02 FB | 	rdlong	local02, fp
095f4     34 4E 85 F1 | 	sub	fp, #52
095f8     FF FF 3F FF 
095fc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
09600     20 4E 05 51 |  if_ne	add	fp, #32
09604     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09608     20 4E 85 51 |  if_ne	sub	fp, #32
0960c     FF FF 7F 5F 
09610     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09614     E4 FE 9F 5D |  if_ne	jmp	#LR__0802
09618     A7 F0 03 F6 | 	mov	ptra, fp
0961c     B2 00 A0 FD | 	call	#popregs_
09620                 | _do_list_ret
09620     2D 00 64 FD | 	ret
09624                 | 
09624                 | ' 
09624                 | ' '---------------- Clear the program
09624                 | ' 
09624                 | ' sub do_new
09624                 | _do_new
09624     03 4A 05 F6 | 	mov	COUNT_, #3
09628     A8 00 A0 FD | 	call	#pushregs_
0962c     00 12 06 F6 | 	mov	arg01, #0
09630     01 14 66 F6 | 	neg	arg02, #1
09634     01 16 06 F6 | 	mov	arg03, #1
09638     00 18 06 F6 | 	mov	arg04, #0
0963c     02 00 00 FF 
09640     C0 E4 05 F1 | 	add	objptr, ##1216
09644                 | '     return fill(addr, pattern, count, listPtr, 4)
09644     04 1A 06 F6 | 	mov	arg05, #4
09648     F8 9A B0 FD | 	call	#_psram_spin2_fill
0964c     20 00 00 FF 
09650     0C E5 05 F1 | 	add	objptr, ##16652
09654     F2 00 68 FC | 	wrlong	#0, objptr
09658     15 00 00 FF 
0965c     7C E4 05 F1 | 	add	objptr, ##10876
09660     F2 00 68 FC | 	wrlong	#0, objptr
09664     0F 00 00 FF 
09668     2C E5 05 F1 | 	add	objptr, ##7980
0966c     F2 00 68 FC | 	wrlong	#0, objptr
09670     04 E4 05 F1 | 	add	objptr, #4
09674     F2 00 68 FC | 	wrlong	#0, objptr
09678     16 00 00 FF 
0967c     5C E5 85 F1 | 	sub	objptr, ##11612
09680     F2 00 68 FC | 	wrlong	#0, objptr
09684     07 00 00 FF 
09688     24 E4 05 F1 | 	add	objptr, ##3620
0968c     F2 00 68 FC | 	wrlong	#0, objptr
09690     07 00 00 FF 
09694     20 E4 85 F1 | 	sub	objptr, ##3616
09698     F2 00 68 FC | 	wrlong	#0, objptr
0969c     0F 00 00 FF 
096a0     34 E4 05 F1 | 	add	objptr, ##7732
096a4     F2 00 68 FC | 	wrlong	#0, objptr
096a8     08 00 00 FF 
096ac     08 E4 85 F1 | 	sub	objptr, ##4104
096b0     F2 00 68 FC | 	wrlong	#0, objptr
096b4     04 E4 05 F1 | 	add	objptr, #4
096b8     FF FF FF FF 
096bc     F2 FE 6B FC | 	wrlong	##-1, objptr
096c0     0F 00 00 FF 
096c4     4C E5 05 F1 | 	add	objptr, ##8012
096c8     F2 00 68 FC | 	wrlong	#0, objptr
096cc                 | ' 
096cc                 | ' pslpoke(0,$FFFFFFFF)
096cc                 | ' varnum=0
096cc                 | ' programstart=0 :runptr=0 : runptr2=0
096cc                 | ' stackpointer=0
096cc                 | ' lineptr=0 
096cc                 | ' programptr=0 : stringptr=0
096cc                 | ' lastline=0 : lastlineptr=-1 :fortop=0
096cc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
096cc     00 1E 06 F6 | 	mov	local01, #0
096d0     07 00 00 FF 
096d4     40 E5 85 F1 | 	sub	objptr, ##3904
096d8     97 16 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
096dc                 | LR__0810
096dc     0F 21 02 F6 | 	mov	local02, local01
096e0     02 20 66 F0 | 	shl	local02, #2
096e4     0F 21 02 F1 | 	add	local02, local01
096e8     02 20 66 F0 | 	shl	local02, #2
096ec     F2 20 02 F1 | 	add	local02, objptr
096f0     08 20 06 F1 | 	add	local02, #8
096f4     FF FF FF FF 
096f8     10 FF 6B FC | 	wrlong	##-1, local02
096fc     01 1E 06 F1 | 	add	local01, #1
09700     81 1E 56 F2 | 	cmps	local01, #129 wc
09704     D4 FF 9F CD |  if_b	jmp	#LR__0810
09708                 | LR__0811
09708     40 00 00 FF 
0970c     5C E4 85 F1 | 	sub	objptr, ##32860
09710                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
09710     00 1E 06 F6 | 	mov	local01, #0
09714                 | LR__0812
09714     0F 21 02 F6 | 	mov	local02, local01
09718     02 20 66 F0 | 	shl	local02, #2
0971c     48 00 00 FF 
09720     F8 E5 05 F1 | 	add	objptr, ##37368
09724     F2 20 02 F1 | 	add	local02, objptr
09728     10 21 0A FB | 	rdlong	local02, local02 wz
0972c     48 00 00 FF 
09730     F8 E5 85 F1 | 	sub	objptr, ##37368
09734     34 00 90 AD |  if_e	jmp	#LR__0813
09738     0F 13 02 F6 | 	mov	arg01, local01
0973c     00 14 06 F6 | 	mov	arg02, #0
09740     00 16 06 F6 | 	mov	arg03, #0
09744     94 83 B0 FD | 	call	#_hg010b_spin2_setspritesize
09748     0F 21 02 F6 | 	mov	local02, local01
0974c     02 20 66 F0 | 	shl	local02, #2
09750     48 00 00 FF 
09754     F8 E5 05 F1 | 	add	objptr, ##37368
09758     F2 20 02 F1 | 	add	local02, objptr
0975c     10 13 02 FB | 	rdlong	arg01, local02
09760     48 00 00 FF 
09764     F8 E5 85 F1 | 	sub	objptr, ##37368
09768     68 DE B0 FD | 	call	#__system___gc_free
0976c                 | LR__0813
0976c     F2 22 02 FB | 	rdlong	local03, objptr
09770     49 00 00 FF 
09774     3C E4 05 F1 | 	add	objptr, ##37436
09778     F2 22 62 FC | 	wrlong	local03, objptr
0977c     49 00 00 FF 
09780     3C E4 85 F1 | 	sub	objptr, ##37436
09784     11 12 06 F6 | 	mov	arg01, #17
09788     08 14 06 F6 | 	mov	arg02, #8
0978c     10 16 06 F6 | 	mov	arg03, #16
09790     48 83 B0 FD | 	call	#_hg010b_spin2_setspritesize
09794     01 1E 06 F1 | 	add	local01, #1
09798     10 1E 56 F2 | 	cmps	local01, #16 wc
0979c     74 FF 9F CD |  if_b	jmp	#LR__0812
097a0     A7 F0 03 F6 | 	mov	ptra, fp
097a4     B2 00 A0 FD | 	call	#popregs_
097a8                 | _do_new_ret
097a8     2D 00 64 FD | 	ret
097ac                 | 
097ac                 | ' 
097ac                 | ' '----------------------- goto
097ac                 | ' sub do_fast_goto
097ac                 | _do_fast_goto
097ac     02 4A 05 F6 | 	mov	COUNT_, #2
097b0     A8 00 A0 FD | 	call	#pushregs_
097b4                 | _do_fast_goto_enter
097b4     38 00 00 FF 
097b8     44 E4 05 F1 | 	add	objptr, ##28740
097bc     F2 12 02 FB | 	rdlong	arg01, objptr
097c0     09 1F 02 F6 | 	mov	local01, arg01
097c4     01 1E 66 F0 | 	shl	local01, #1
097c8     09 1F 02 F1 | 	add	local01, arg01
097cc     02 1E 66 F0 | 	shl	local01, #2
097d0     03 00 00 FF 
097d4     04 E4 85 F1 | 	sub	objptr, ##1540
097d8     F2 1E 02 F1 | 	add	local01, objptr
097dc     0F 21 02 FB | 	rdlong	local02, local01
097e0     10 13 02 F6 | 	mov	arg01, local02
097e4     35 00 00 FF 
097e8     40 E4 85 F1 | 	sub	objptr, ##27200
097ec     58 6F B0 FD | 	call	#_pslpeek
097f0     FD 12 02 F6 | 	mov	arg01, result1
097f4                 | ' 
097f4                 | ' testptr=compiledline(lineptr_e).result.uresult
097f4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
097f4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
097f4     38 00 00 FF 
097f8     44 E4 05 F1 | 	add	objptr, ##28740
097fc     F2 FA 01 FB | 	rdlong	result1, objptr
09800     FD 1E 02 F6 | 	mov	local01, result1
09804     01 1E 66 F0 | 	shl	local01, #1
09808     FD 1E 02 F1 | 	add	local01, result1
0980c     02 1E 66 F0 | 	shl	local01, #2
09810     03 00 00 FF 
09814     04 E4 85 F1 | 	sub	objptr, ##1540
09818     F2 1E 02 F1 | 	add	local01, objptr
0981c     04 1E 06 F1 | 	add	local01, #4
09820     0F 1F 02 FB | 	rdlong	local01, local01
09824     0F 13 0A F2 | 	cmp	arg01, local01 wz
09828     35 00 00 FF 
0982c     40 E4 85 F1 | 	sub	objptr, ##27200
09830     58 00 90 5D |  if_ne	jmp	#LR__0820
09834     47 00 00 FF 
09838     74 E5 05 F1 | 	add	objptr, ##36724
0983c     F2 20 62 FC | 	wrlong	local02, objptr
09840     0F 00 00 FF 
09844     34 E5 85 F1 | 	sub	objptr, ##7988
09848     F2 20 02 FB | 	rdlong	local02, objptr
0984c     01 20 86 F1 | 	sub	local02, #1
09850     04 E4 05 F1 | 	add	objptr, #4
09854     F2 20 62 FC | 	wrlong	local02, objptr
09858                 | '   runptr=testptr
09858                 | '   lineptr_e=lineptr-1
09858                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
09858     0F 00 00 FF 
0985c     54 E5 05 F1 | 	add	objptr, ##8020
09860     F2 20 02 FB | 	rdlong	local02, objptr
09864     47 00 00 FF 
09868     98 E5 85 F1 | 	sub	objptr, ##36760
0986c     FF FF 3F FF 
09870     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
09874     47 00 00 AF 
09878     98 E5 05 A1 |  if_e	add	objptr, ##36760
0987c     F2 00 68 AC |  if_e	wrlong	#0, objptr
09880     47 00 00 AF 
09884     98 E5 85 A1 |  if_e	sub	objptr, ##36760
09888     04 00 90 FD | 	jmp	#LR__0821
0988c                 | LR__0820
0988c     0C 00 B0 FD | 	call	#_do_find_goto
09890                 | LR__0821
09890     A7 F0 03 F6 | 	mov	ptra, fp
09894     B2 00 A0 FD | 	call	#popregs_
09898                 | _do_fast_goto_ret
09898     2D 00 64 FD | 	ret
0989c                 | 
0989c                 | ' 
0989c                 | ' 
0989c                 | ' 
0989c                 | ' 
0989c                 | ' sub do_find_goto
0989c                 | _do_find_goto
0989c     03 4A 05 F6 | 	mov	COUNT_, #3
098a0     A8 00 A0 FD | 	call	#pushregs_
098a4     24 F0 07 F1 | 	add	ptra, #36
098a8                 | _do_find_goto_enter
098a8     38 00 00 FF 
098ac     44 E4 05 F1 | 	add	objptr, ##28740
098b0     F2 1E 02 FB | 	rdlong	local01, objptr
098b4     0F 21 02 F6 | 	mov	local02, local01
098b8     01 20 66 F0 | 	shl	local02, #1
098bc     0F 21 02 F1 | 	add	local02, local01
098c0     02 20 66 F0 | 	shl	local02, #2
098c4     03 00 00 FF 
098c8     04 E4 85 F1 | 	sub	objptr, ##1540
098cc     F2 20 02 F1 | 	add	local02, objptr
098d0     04 20 06 F1 | 	add	local02, #4
098d4     10 21 02 FB | 	rdlong	local02, local02
098d8     A7 20 62 FC | 	wrlong	local02, fp
098dc     03 00 00 FF 
098e0     08 E4 05 F1 | 	add	objptr, ##1544
098e4     F2 22 02 FB | 	rdlong	local03, objptr
098e8     38 00 00 FF 
098ec     48 E4 85 F1 | 	sub	objptr, ##28744
098f0     04 4E 05 F1 | 	add	fp, #4
098f4     A7 22 62 FC | 	wrlong	local03, fp
098f8     04 4E 85 F1 | 	sub	fp, #4
098fc                 | ' 
098fc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
098fc                 | '  ' print "find goto"                                                                     'print gotoline 
098fc                 | ' gotoptr=programstart
098fc                 | ' do
098fc                 | LR__0830
098fc     0C 4E 05 F1 | 	add	fp, #12
09900     A7 12 02 F6 | 	mov	arg01, fp
09904     08 4E 85 F1 | 	sub	fp, #8
09908     A7 14 02 FB | 	rdlong	arg02, fp
0990c     04 4E 85 F1 | 	sub	fp, #4
09910     18 16 06 F6 | 	mov	arg03, #24
09914     02 00 00 FF 
09918     C0 E4 05 F1 | 	add	objptr, ##1216
0991c     EC 96 B0 FD | 	call	#_psram_spin2_read1
09920     02 00 00 FF 
09924     C0 E4 85 F1 | 	sub	objptr, ##1216
09928                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
09928                 | '   if gotoheader(0)<>$FFFFFFFF then
09928     0C 4E 05 F1 | 	add	fp, #12
0992c     A7 22 02 FB | 	rdlong	local03, fp
09930     0C 4E 85 F1 | 	sub	fp, #12
09934     FF FF 7F FF 
09938     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0993c     24 00 90 AD |  if_e	jmp	#LR__0831
09940     04 4E 05 F1 | 	add	fp, #4
09944     A7 22 02 FB | 	rdlong	local03, fp
09948     04 4E 05 F1 | 	add	fp, #4
0994c     A7 22 62 FC | 	wrlong	local03, fp
09950     18 4E 05 F1 | 	add	fp, #24
09954     A7 22 02 FB | 	rdlong	local03, fp
09958     1C 4E 85 F1 | 	sub	fp, #28
0995c     A7 22 62 FC | 	wrlong	local03, fp
09960     04 4E 85 F1 | 	sub	fp, #4
09964                 | LR__0831
09964     20 4E 05 F1 | 	add	fp, #32
09968     A7 22 02 FB | 	rdlong	local03, fp
0996c     20 4E 85 F1 | 	sub	fp, #32
09970     FF FF 3F FF 
09974     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09978     0C 4E 05 51 |  if_ne	add	fp, #12
0997c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09980     0C 4E 85 51 |  if_ne	sub	fp, #12
09984     FF FF 7F 5F 
09988     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0998c     18 00 90 AD |  if_e	jmp	#LR__0832
09990     0C 4E 05 F1 | 	add	fp, #12
09994     A7 22 02 FB | 	rdlong	local03, fp
09998     0C 4E 85 F1 | 	sub	fp, #12
0999c     A7 20 02 FB | 	rdlong	local02, fp
099a0     10 23 0A F2 | 	cmp	local03, local02 wz
099a4     54 FF 9F 5D |  if_ne	jmp	#LR__0830
099a8                 | LR__0832
099a8                 | ' 
099a8                 | ' if gotoheader(0)=gotoline then
099a8     0C 4E 05 F1 | 	add	fp, #12
099ac     A7 22 02 FB | 	rdlong	local03, fp
099b0     0C 4E 85 F1 | 	sub	fp, #12
099b4     A7 1E 02 FB | 	rdlong	local01, fp
099b8     0F 23 0A F2 | 	cmp	local03, local01 wz
099bc     D8 00 90 5D |  if_ne	jmp	#LR__0833
099c0     38 00 00 FF 
099c4     44 E4 05 F1 | 	add	objptr, ##28740
099c8     F2 1E 02 FB | 	rdlong	local01, objptr
099cc     0F 21 02 F6 | 	mov	local02, local01
099d0     01 20 66 F0 | 	shl	local02, #1
099d4     0F 21 02 F1 | 	add	local02, local01
099d8     02 20 66 F0 | 	shl	local02, #2
099dc     03 00 00 FF 
099e0     04 E4 85 F1 | 	sub	objptr, ##1540
099e4     F2 20 02 F1 | 	add	local02, objptr
099e8     08 4E 05 F1 | 	add	fp, #8
099ec     A7 22 02 FB | 	rdlong	local03, fp
099f0     10 23 62 FC | 	wrlong	local03, local02
099f4     03 00 00 FF 
099f8     04 E4 05 F1 | 	add	objptr, ##1540
099fc     F2 1E 02 FB | 	rdlong	local01, objptr
09a00     0F 21 02 F6 | 	mov	local02, local01
09a04     01 20 66 F0 | 	shl	local02, #1
09a08     0F 21 02 F1 | 	add	local02, local01
09a0c     02 20 66 F0 | 	shl	local02, #2
09a10     03 00 00 FF 
09a14     04 E4 85 F1 | 	sub	objptr, ##1540
09a18     F2 20 02 F1 | 	add	local02, objptr
09a1c     08 20 06 F1 | 	add	local02, #8
09a20     10 9D 68 FC | 	wrlong	#78, local02
09a24     03 00 00 FF 
09a28     04 E4 05 F1 | 	add	objptr, ##1540
09a2c     F2 20 02 FB | 	rdlong	local02, objptr
09a30     10 13 02 F6 | 	mov	arg01, local02
09a34     01 12 66 F0 | 	shl	arg01, #1
09a38     10 13 02 F1 | 	add	arg01, local02
09a3c     02 12 66 F0 | 	shl	arg01, #2
09a40     03 00 00 FF 
09a44     04 E4 85 F1 | 	sub	objptr, ##1540
09a48     F2 12 02 F1 | 	add	arg01, objptr
09a4c     12 00 00 FF 
09a50     3C E5 05 F1 | 	add	objptr, ##9532
09a54     F2 14 02 FB | 	rdlong	arg02, objptr
09a58     02 22 06 F6 | 	mov	local03, #2
09a5c     10 23 02 F1 | 	add	local03, local02
09a60     14 00 00 FF 
09a64     54 E5 85 F1 | 	sub	objptr, ##10580
09a68     F2 16 02 FB | 	rdlong	arg03, objptr
09a6c     0B 23 02 FD | 	qmul	local03, arg03
09a70     08 4E 85 F1 | 	sub	fp, #8
09a74     30 00 00 FF 
09a78     68 E5 85 F1 | 	sub	objptr, ##24936
09a7c     18 22 62 FD | 	getqx	local03
09a80     11 15 02 F1 | 	add	arg02, local03
09a84     20 96 B0 FD | 	call	#_psram_spin2_write
09a88     02 00 00 FF 
09a8c     C0 E4 85 F1 | 	sub	objptr, ##1216
09a90     18 FD BF FD | 	call	#_do_fast_goto
09a94     08 00 90 FD | 	jmp	#LR__0834
09a98                 | LR__0833
09a98     26 12 06 F6 | 	mov	arg01, #38
09a9c     EC 6A B0 FD | 	call	#_printerror
09aa0                 | LR__0834
09aa0     A7 F0 03 F6 | 	mov	ptra, fp
09aa4     B2 00 A0 FD | 	call	#popregs_
09aa8                 | _do_find_goto_ret
09aa8     2D 00 64 FD | 	ret
09aac                 | 
09aac                 | ' 
09aac                 | ' sub do_slow_goto
09aac                 | _do_slow_goto
09aac                 | _do_slow_goto_ret
09aac     2D 00 64 FD | 	ret
09ab0                 | 
09ab0                 | ' 
09ab0                 | ' '----------------------- Error processing
09ab0                 | ' 
09ab0                 | ' sub do_error
09ab0                 | _do_error
09ab0     01 4A 05 F6 | 	mov	COUNT_, #1
09ab4     A8 00 A0 FD | 	call	#pushregs_
09ab8     38 00 00 FF 
09abc     44 E4 05 F1 | 	add	objptr, ##28740
09ac0     F2 18 02 FB | 	rdlong	arg04, objptr
09ac4     0C 17 02 F6 | 	mov	arg03, arg04
09ac8     01 16 66 F0 | 	shl	arg03, #1
09acc     0C 17 02 F1 | 	add	arg03, arg04
09ad0     02 16 66 F0 | 	shl	arg03, #2
09ad4     03 00 00 FF 
09ad8     04 E4 85 F1 | 	sub	objptr, ##1540
09adc     F2 16 02 F1 | 	add	arg03, objptr
09ae0     0B 1F 02 FB | 	rdlong	local01, arg03
09ae4                 | ' r=compiledline(lineptr_e).result.uresult
09ae4                 | ' print "Error ";r;": ";errors$(r)
09ae4     00 12 06 F6 | 	mov	arg01, #0
09ae8     35 00 00 FF 
09aec     40 E4 85 F1 | 	sub	objptr, ##27200
09af0     E8 F4 B0 FD | 	call	#__system___getiolock_0306
09af4     FD 12 02 F6 | 	mov	arg01, result1
09af8     FC 9F B0 FD | 	call	#__system___lockmem
09afc     18 01 00 FF 
09b00     46 15 06 F6 | 	mov	arg02, ##@LR__4231
09b04     00 12 06 F6 | 	mov	arg01, #0
09b08     00 16 06 F6 | 	mov	arg03, #0
09b0c     F4 AB B0 FD | 	call	#__system___basic_print_string
09b10     00 12 06 F6 | 	mov	arg01, #0
09b14     0F 15 02 F6 | 	mov	arg02, local01
09b18     00 16 06 F6 | 	mov	arg03, #0
09b1c     0A 18 06 F6 | 	mov	arg04, #10
09b20     64 AC B0 FD | 	call	#__system___basic_print_unsigned
09b24     18 01 00 FF 
09b28     4D 15 06 F6 | 	mov	arg02, ##@LR__4232
09b2c     00 12 06 F6 | 	mov	arg01, #0
09b30     00 16 06 F6 | 	mov	arg03, #0
09b34     CC AB B0 FD | 	call	#__system___basic_print_string
09b38     02 1E 66 F0 | 	shl	local01, #2
09b3c     33 00 00 FF 
09b40     40 E4 05 F1 | 	add	objptr, ##26176
09b44     F2 1E 02 F1 | 	add	local01, objptr
09b48     0F 15 02 FB | 	rdlong	arg02, local01
09b4c     00 12 06 F6 | 	mov	arg01, #0
09b50     00 16 06 F6 | 	mov	arg03, #0
09b54     33 00 00 FF 
09b58     40 E4 85 F1 | 	sub	objptr, ##26176
09b5c     A4 AB B0 FD | 	call	#__system___basic_print_string
09b60     00 12 06 F6 | 	mov	arg01, #0
09b64     0A 14 06 F6 | 	mov	arg02, #10
09b68     00 16 06 F6 | 	mov	arg03, #0
09b6c     3C AB B0 FD | 	call	#__system___basic_print_char
09b70     00 12 06 F6 | 	mov	arg01, #0
09b74     64 F4 B0 FD | 	call	#__system___getiolock_0306
09b78     FD 00 68 FC | 	wrlong	#0, result1
09b7c     A7 F0 03 F6 | 	mov	ptra, fp
09b80     B2 00 A0 FD | 	call	#popregs_
09b84                 | _do_error_ret
09b84     2D 00 64 FD | 	ret
09b88                 | 
09b88                 | ' 
09b88                 | ' 
09b88                 | ' '------------------ Assigning to a variable  
09b88                 | ' 
09b88                 | ' 
09b88                 | ' sub do_assign
09b88                 | _do_assign
09b88     05 4A 05 F6 | 	mov	COUNT_, #5
09b8c     A8 00 A0 FD | 	call	#pushregs_
09b90     38 00 00 FF 
09b94     44 E4 05 F1 | 	add	objptr, ##28740
09b98     F2 24 02 FB | 	rdlong	local04, objptr
09b9c     12 27 02 F6 | 	mov	local05, local04
09ba0     01 26 66 F0 | 	shl	local05, #1
09ba4     12 27 02 F1 | 	add	local05, local04
09ba8     02 26 66 F0 | 	shl	local05, #2
09bac     03 00 00 FF 
09bb0     04 E4 85 F1 | 	sub	objptr, ##1540
09bb4     F2 26 02 F1 | 	add	local05, objptr
09bb8     13 27 02 FB | 	rdlong	local05, local05
09bbc     35 00 00 FF 
09bc0     40 E4 85 F1 | 	sub	objptr, ##27200
09bc4     58 E4 BF FD | 	call	#_pop
09bc8     FD 1E 02 F6 | 	mov	local01, result1
09bcc     FE 20 02 F6 | 	mov	local02, result2
09bd0     FF 22 02 F6 | 	mov	local03, result3
09bd4     10 FD 01 F6 | 	mov	result2, local02
09bd8     13 25 02 F6 | 	mov	local04, local05
09bdc     04 24 66 F0 | 	shl	local04, #4
09be0     02 00 00 FF 
09be4     CC E5 05 F1 | 	add	objptr, ##1484
09be8     F2 24 02 F1 | 	add	local04, objptr
09bec     04 24 06 F1 | 	add	local04, #4
09bf0     12 1F 62 FC | 	wrlong	local01, local04
09bf4     13 25 02 F6 | 	mov	local04, local05
09bf8     04 24 66 F0 | 	shl	local04, #4
09bfc     F2 24 02 F1 | 	add	local04, objptr
09c00     08 24 06 F1 | 	add	local04, #8
09c04     12 FD 61 FC | 	wrlong	result2, local04
09c08     13 FF 01 F6 | 	mov	result3, local05
09c0c     04 FE 65 F0 | 	shl	result3, #4
09c10     F2 FE 01 F1 | 	add	result3, objptr
09c14     0C FE 05 F1 | 	add	result3, #12
09c18     FF 22 62 FC | 	wrlong	local03, result3
09c1c     02 00 00 FF 
09c20     CC E5 85 F1 | 	sub	objptr, ##1484
09c24     A7 F0 03 F6 | 	mov	ptra, fp
09c28     B2 00 A0 FD | 	call	#popregs_
09c2c                 | _do_assign_ret
09c2c     2D 00 64 FD | 	ret
09c30                 | 
09c30                 | ' 
09c30                 | ' 
09c30                 | ' ' --------------------- Read a variable and push to the stack
09c30                 | ' 
09c30                 | ' sub do_getvar
09c30                 | _do_getvar
09c30     01 4A 05 F6 | 	mov	COUNT_, #1
09c34     A8 00 A0 FD | 	call	#pushregs_
09c38     0C F0 07 F1 | 	add	ptra, #12
09c3c     38 00 00 FF 
09c40     44 E4 05 F1 | 	add	objptr, ##28740
09c44     F2 12 02 FB | 	rdlong	arg01, objptr
09c48     09 1F 02 F6 | 	mov	local01, arg01
09c4c     01 1E 66 F0 | 	shl	local01, #1
09c50     09 1F 02 F1 | 	add	local01, arg01
09c54     02 1E 66 F0 | 	shl	local01, #2
09c58     03 00 00 FF 
09c5c     04 E4 85 F1 | 	sub	objptr, ##1540
09c60     F2 1E 02 F1 | 	add	local01, objptr
09c64     0F 1F 02 FB | 	rdlong	local01, local01
09c68     04 1E 66 F0 | 	shl	local01, #4
09c6c     32 00 00 FF 
09c70     74 E4 85 F1 | 	sub	objptr, ##25716
09c74     F2 1E 02 F1 | 	add	local01, objptr
09c78     04 1E 06 F1 | 	add	local01, #4
09c7c     0F 13 02 FB | 	rdlong	arg01, local01
09c80     04 1E 06 F1 | 	add	local01, #4
09c84     0F 1F 02 FB | 	rdlong	local01, local01
09c88     A7 12 62 FC | 	wrlong	arg01, fp
09c8c     04 4E 05 F1 | 	add	fp, #4
09c90     A7 1E 62 FC | 	wrlong	local01, fp
09c94     35 00 00 FF 
09c98     78 E4 05 F1 | 	add	objptr, ##27256
09c9c     F2 1E 02 FB | 	rdlong	local01, objptr
09ca0     0F 13 02 F6 | 	mov	arg01, local01
09ca4     01 12 66 F0 | 	shl	arg01, #1
09ca8     0F 13 02 F1 | 	add	arg01, local01
09cac     02 12 66 F0 | 	shl	arg01, #2
09cb0     03 00 00 FF 
09cb4     04 E4 85 F1 | 	sub	objptr, ##1540
09cb8     F2 12 02 F1 | 	add	arg01, objptr
09cbc     09 1F 02 FB | 	rdlong	local01, arg01
09cc0     04 1E 66 F0 | 	shl	local01, #4
09cc4     32 00 00 FF 
09cc8     74 E4 85 F1 | 	sub	objptr, ##25716
09ccc     F2 1E 02 F1 | 	add	local01, objptr
09cd0     0C 1E 06 F1 | 	add	local01, #12
09cd4     0F 1F 02 FB | 	rdlong	local01, local01
09cd8     04 4E 05 F1 | 	add	fp, #4
09cdc     A7 1E 62 FC | 	wrlong	local01, fp
09ce0     08 4E 85 F1 | 	sub	fp, #8
09ce4     A7 12 02 F6 | 	mov	arg01, fp
09ce8     02 00 00 FF 
09cec     CC E5 85 F1 | 	sub	objptr, ##1484
09cf0     C4 E3 BF FD | 	call	#_push
09cf4     A7 F0 03 F6 | 	mov	ptra, fp
09cf8     B2 00 A0 FD | 	call	#popregs_
09cfc                 | _do_getvar_ret
09cfc     2D 00 64 FD | 	ret
09d00                 | 
09d00                 | ' 
09d00                 | ' '------------------------ Operators 
09d00                 | ' 
09d00                 | ' sub do_plus 
09d00                 | _do_plus
09d00     05 4A 05 F6 | 	mov	COUNT_, #5
09d04     A8 00 A0 FD | 	call	#pushregs_
09d08     18 F0 07 F1 | 	add	ptra, #24
09d0c     10 E3 BF FD | 	call	#_pop
09d10     FD 1E 02 F6 | 	mov	local01, result1
09d14     FE 20 02 F6 | 	mov	local02, result2
09d18     FF 22 02 F6 | 	mov	local03, result3
09d1c     0C 4E 05 F1 | 	add	fp, #12
09d20     A7 1E 62 FC | 	wrlong	local01, fp
09d24     04 4E 05 F1 | 	add	fp, #4
09d28     A7 20 62 FC | 	wrlong	local02, fp
09d2c     04 4E 05 F1 | 	add	fp, #4
09d30     A7 22 62 FC | 	wrlong	local03, fp
09d34     14 4E 85 F1 | 	sub	fp, #20
09d38     E4 E2 BF FD | 	call	#_pop
09d3c     FF 22 02 F6 | 	mov	local03, result3
09d40     A7 FA 61 FC | 	wrlong	result1, fp
09d44     04 4E 05 F1 | 	add	fp, #4
09d48     A7 FC 61 FC | 	wrlong	result2, fp
09d4c     04 4E 05 F1 | 	add	fp, #4
09d50     A7 22 62 FC | 	wrlong	local03, fp
09d54                 | ' 
09d54                 | ' t2=pop()
09d54                 | ' t1=pop()
09d54                 | ' 
09d54                 | ' 
09d54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
09d54     08 4E 85 F1 | 	sub	fp, #8
09d58     1D 22 0E F2 | 	cmp	local03, #29 wz
09d5c     14 4E 05 A1 |  if_e	add	fp, #20
09d60     A7 24 02 AB |  if_e	rdlong	local04, fp
09d64     14 4E 85 A1 |  if_e	sub	fp, #20
09d68     12 23 02 A6 |  if_e	mov	local03, local04
09d6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
09d70     1C 00 90 5D |  if_ne	jmp	#LR__0840
09d74     A7 1E 02 FB | 	rdlong	local01, fp
09d78     0C 4E 05 F1 | 	add	fp, #12
09d7c     A7 20 02 FB | 	rdlong	local02, fp
09d80     0C 4E 85 F1 | 	sub	fp, #12
09d84     10 1F 02 F1 | 	add	local01, local02
09d88     A7 1E 62 FC | 	wrlong	local01, fp
09d8c     3C 03 90 FD | 	jmp	#LR__0852
09d90                 | LR__0840
09d90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
09d90     08 4E 05 F1 | 	add	fp, #8
09d94     A7 1E 02 FB | 	rdlong	local01, fp
09d98     08 4E 85 F1 | 	sub	fp, #8
09d9c     1D 1E 0E F2 | 	cmp	local01, #29 wz
09da0     14 4E 05 A1 |  if_e	add	fp, #20
09da4     A7 24 02 AB |  if_e	rdlong	local04, fp
09da8     14 4E 85 A1 |  if_e	sub	fp, #20
09dac     12 23 02 A6 |  if_e	mov	local03, local04
09db0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
09db4     28 00 90 5D |  if_ne	jmp	#LR__0841
09db8     A7 1E 02 FB | 	rdlong	local01, fp
09dbc     0C 4E 05 F1 | 	add	fp, #12
09dc0     A7 20 02 FB | 	rdlong	local02, fp
09dc4     0C 4E 85 F1 | 	sub	fp, #12
09dc8     10 1F 02 F1 | 	add	local01, local02
09dcc     A7 1E 62 FC | 	wrlong	local01, fp
09dd0     08 4E 05 F1 | 	add	fp, #8
09dd4     A7 38 68 FC | 	wrlong	#28, fp
09dd8     08 4E 85 F1 | 	sub	fp, #8
09ddc     EC 02 90 FD | 	jmp	#LR__0852
09de0                 | LR__0841
09de0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
09de0     08 4E 05 F1 | 	add	fp, #8
09de4     A7 1E 02 FB | 	rdlong	local01, fp
09de8     08 4E 85 F1 | 	sub	fp, #8
09dec     1D 1E 0E F2 | 	cmp	local01, #29 wz
09df0     14 4E 05 A1 |  if_e	add	fp, #20
09df4     A7 24 02 AB |  if_e	rdlong	local04, fp
09df8     14 4E 85 A1 |  if_e	sub	fp, #20
09dfc     12 23 02 A6 |  if_e	mov	local03, local04
09e00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
09e04     30 00 90 5D |  if_ne	jmp	#LR__0842
09e08     A7 12 02 FB | 	rdlong	arg01, fp
09e0c     08 C3 B0 FD | 	call	#__system___float_fromuns
09e10     FD 12 02 F6 | 	mov	arg01, result1
09e14     0C 4E 05 F1 | 	add	fp, #12
09e18     A7 14 02 FB | 	rdlong	arg02, fp
09e1c     0C 4E 85 F1 | 	sub	fp, #12
09e20     28 C3 B0 FD | 	call	#__system___float_add
09e24     A7 FA 61 FC | 	wrlong	result1, fp
09e28     08 4E 05 F1 | 	add	fp, #8
09e2c     A7 3C 68 FC | 	wrlong	#30, fp
09e30     08 4E 85 F1 | 	sub	fp, #8
09e34     94 02 90 FD | 	jmp	#LR__0852
09e38                 | LR__0842
09e38                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
09e38     08 4E 05 F1 | 	add	fp, #8
09e3c     A7 1E 02 FB | 	rdlong	local01, fp
09e40     08 4E 85 F1 | 	sub	fp, #8
09e44     1C 1E 0E F2 | 	cmp	local01, #28 wz
09e48     14 4E 05 A1 |  if_e	add	fp, #20
09e4c     A7 24 02 AB |  if_e	rdlong	local04, fp
09e50     14 4E 85 A1 |  if_e	sub	fp, #20
09e54     12 23 02 A6 |  if_e	mov	local03, local04
09e58     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
09e5c     1C 00 90 5D |  if_ne	jmp	#LR__0843
09e60     A7 1E 02 FB | 	rdlong	local01, fp
09e64     0C 4E 05 F1 | 	add	fp, #12
09e68     A7 20 02 FB | 	rdlong	local02, fp
09e6c     0C 4E 85 F1 | 	sub	fp, #12
09e70     10 1F 02 F1 | 	add	local01, local02
09e74     A7 1E 62 FC | 	wrlong	local01, fp
09e78     50 02 90 FD | 	jmp	#LR__0852
09e7c                 | LR__0843
09e7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
09e7c     08 4E 05 F1 | 	add	fp, #8
09e80     A7 1E 02 FB | 	rdlong	local01, fp
09e84     08 4E 85 F1 | 	sub	fp, #8
09e88     1C 1E 0E F2 | 	cmp	local01, #28 wz
09e8c     14 4E 05 A1 |  if_e	add	fp, #20
09e90     A7 24 02 AB |  if_e	rdlong	local04, fp
09e94     14 4E 85 A1 |  if_e	sub	fp, #20
09e98     12 23 02 A6 |  if_e	mov	local03, local04
09e9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
09ea0     1C 00 90 5D |  if_ne	jmp	#LR__0844
09ea4     A7 1E 02 FB | 	rdlong	local01, fp
09ea8     0C 4E 05 F1 | 	add	fp, #12
09eac     A7 20 02 FB | 	rdlong	local02, fp
09eb0     0C 4E 85 F1 | 	sub	fp, #12
09eb4     10 1F 02 F1 | 	add	local01, local02
09eb8     A7 1E 62 FC | 	wrlong	local01, fp
09ebc     0C 02 90 FD | 	jmp	#LR__0852
09ec0                 | LR__0844
09ec0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
09ec0     08 4E 05 F1 | 	add	fp, #8
09ec4     A7 1E 02 FB | 	rdlong	local01, fp
09ec8     08 4E 85 F1 | 	sub	fp, #8
09ecc     1C 1E 0E F2 | 	cmp	local01, #28 wz
09ed0     14 4E 05 A1 |  if_e	add	fp, #20
09ed4     A7 24 02 AB |  if_e	rdlong	local04, fp
09ed8     14 4E 85 A1 |  if_e	sub	fp, #20
09edc     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
09ee0     40 00 90 5D |  if_ne	jmp	#LR__0845
09ee4     A7 12 02 FB | 	rdlong	arg01, fp
09ee8     09 13 52 F6 | 	abs	arg01, arg01 wc
09eec     1F 26 C6 C9 |  if_b	decod	local05, #31
09ef0     00 26 06 36 |  if_ae	mov	local05, #0
09ef4     20 C2 B0 FD | 	call	#__system___float_fromuns
09ef8     13 FB 61 F5 | 	xor	result1, local05
09efc     FD 12 02 F6 | 	mov	arg01, result1
09f00     0C 4E 05 F1 | 	add	fp, #12
09f04     A7 14 02 FB | 	rdlong	arg02, fp
09f08     0C 4E 85 F1 | 	sub	fp, #12
09f0c     3C C2 B0 FD | 	call	#__system___float_add
09f10     A7 FA 61 FC | 	wrlong	result1, fp
09f14     08 4E 05 F1 | 	add	fp, #8
09f18     A7 3C 68 FC | 	wrlong	#30, fp
09f1c     08 4E 85 F1 | 	sub	fp, #8
09f20     A8 01 90 FD | 	jmp	#LR__0852
09f24                 | LR__0845
09f24                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
09f24     08 4E 05 F1 | 	add	fp, #8
09f28     A7 1E 02 FB | 	rdlong	local01, fp
09f2c     08 4E 85 F1 | 	sub	fp, #8
09f30     1E 1E 0E F2 | 	cmp	local01, #30 wz
09f34     14 4E 05 A1 |  if_e	add	fp, #20
09f38     A7 22 02 AB |  if_e	rdlong	local03, fp
09f3c     14 4E 85 A1 |  if_e	sub	fp, #20
09f40     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
09f44     28 00 90 5D |  if_ne	jmp	#LR__0846
09f48     A7 1E 02 FB | 	rdlong	local01, fp
09f4c     0C 4E 05 F1 | 	add	fp, #12
09f50     A7 12 02 FB | 	rdlong	arg01, fp
09f54     0C 4E 85 F1 | 	sub	fp, #12
09f58     BC C1 B0 FD | 	call	#__system___float_fromuns
09f5c     FD 14 02 F6 | 	mov	arg02, result1
09f60     0F 13 02 F6 | 	mov	arg01, local01
09f64     E4 C1 B0 FD | 	call	#__system___float_add
09f68     A7 FA 61 FC | 	wrlong	result1, fp
09f6c     5C 01 90 FD | 	jmp	#LR__0852
09f70                 | LR__0846
09f70                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
09f70     08 4E 05 F1 | 	add	fp, #8
09f74     A7 1E 02 FB | 	rdlong	local01, fp
09f78     08 4E 85 F1 | 	sub	fp, #8
09f7c     1E 1E 0E F2 | 	cmp	local01, #30 wz
09f80     14 4E 05 A1 |  if_e	add	fp, #20
09f84     A7 22 02 AB |  if_e	rdlong	local03, fp
09f88     14 4E 85 A1 |  if_e	sub	fp, #20
09f8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
09f90     38 00 90 5D |  if_ne	jmp	#LR__0847
09f94     A7 1E 02 FB | 	rdlong	local01, fp
09f98     0C 4E 05 F1 | 	add	fp, #12
09f9c     A7 12 02 FB | 	rdlong	arg01, fp
09fa0     0C 4E 85 F1 | 	sub	fp, #12
09fa4     09 13 52 F6 | 	abs	arg01, arg01 wc
09fa8     1F 26 C6 C9 |  if_b	decod	local05, #31
09fac     00 26 06 36 |  if_ae	mov	local05, #0
09fb0     64 C1 B0 FD | 	call	#__system___float_fromuns
09fb4     13 FB 61 F5 | 	xor	result1, local05
09fb8     FD 14 02 F6 | 	mov	arg02, result1
09fbc     0F 13 02 F6 | 	mov	arg01, local01
09fc0     88 C1 B0 FD | 	call	#__system___float_add
09fc4     A7 FA 61 FC | 	wrlong	result1, fp
09fc8     00 01 90 FD | 	jmp	#LR__0852
09fcc                 | LR__0847
09fcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
09fcc     08 4E 05 F1 | 	add	fp, #8
09fd0     A7 1E 02 FB | 	rdlong	local01, fp
09fd4     08 4E 85 F1 | 	sub	fp, #8
09fd8     1E 1E 0E F2 | 	cmp	local01, #30 wz
09fdc     14 4E 05 A1 |  if_e	add	fp, #20
09fe0     A7 22 02 AB |  if_e	rdlong	local03, fp
09fe4     14 4E 85 A1 |  if_e	sub	fp, #20
09fe8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
09fec     1C 00 90 5D |  if_ne	jmp	#LR__0848
09ff0     A7 12 02 FB | 	rdlong	arg01, fp
09ff4     0C 4E 05 F1 | 	add	fp, #12
09ff8     A7 14 02 FB | 	rdlong	arg02, fp
09ffc     0C 4E 85 F1 | 	sub	fp, #12
0a000     48 C1 B0 FD | 	call	#__system___float_add
0a004     A7 FA 61 FC | 	wrlong	result1, fp
0a008     C0 00 90 FD | 	jmp	#LR__0852
0a00c                 | LR__0848
0a00c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0a00c     08 4E 05 F1 | 	add	fp, #8
0a010     A7 1E 02 FB | 	rdlong	local01, fp
0a014     08 4E 85 F1 | 	sub	fp, #8
0a018     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a01c     24 00 90 5D |  if_ne	jmp	#LR__0849
0a020     14 4E 05 F1 | 	add	fp, #20
0a024     A7 22 02 FB | 	rdlong	local03, fp
0a028     14 4E 85 F1 | 	sub	fp, #20
0a02c     1F 22 0E F2 | 	cmp	local03, #31 wz
0a030     A7 04 68 5C |  if_ne	wrlong	#2, fp
0a034     08 4E 05 51 |  if_ne	add	fp, #8
0a038     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0a03c     08 4E 85 51 |  if_ne	sub	fp, #8
0a040     88 00 90 5D |  if_ne	jmp	#LR__0852
0a044                 | LR__0849
0a044                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0a044     14 4E 05 F1 | 	add	fp, #20
0a048     A7 1E 02 FB | 	rdlong	local01, fp
0a04c     14 4E 85 F1 | 	sub	fp, #20
0a050     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a054     24 00 90 5D |  if_ne	jmp	#LR__0850
0a058     08 4E 05 F1 | 	add	fp, #8
0a05c     A7 22 02 FB | 	rdlong	local03, fp
0a060     08 4E 85 F1 | 	sub	fp, #8
0a064     1F 22 0E F2 | 	cmp	local03, #31 wz
0a068     A7 04 68 5C |  if_ne	wrlong	#2, fp
0a06c     08 4E 05 51 |  if_ne	add	fp, #8
0a070     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0a074     08 4E 85 51 |  if_ne	sub	fp, #8
0a078     50 00 90 5D |  if_ne	jmp	#LR__0852
0a07c                 | LR__0850
0a07c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0a07c     08 4E 05 F1 | 	add	fp, #8
0a080     A7 1E 02 FB | 	rdlong	local01, fp
0a084     08 4E 85 F1 | 	sub	fp, #8
0a088     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a08c     14 4E 05 A1 |  if_e	add	fp, #20
0a090     A7 22 02 AB |  if_e	rdlong	local03, fp
0a094     14 4E 85 A1 |  if_e	sub	fp, #20
0a098     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0a09c     1C 00 90 5D |  if_ne	jmp	#LR__0851
0a0a0     A7 12 02 FB | 	rdlong	arg01, fp
0a0a4     0C 4E 05 F1 | 	add	fp, #12
0a0a8     A7 14 02 FB | 	rdlong	arg02, fp
0a0ac     0C 4E 85 F1 | 	sub	fp, #12
0a0b0     A0 9A B0 FD | 	call	#__system___string_concat
0a0b4     A7 FA 61 FC | 	wrlong	result1, fp
0a0b8     10 00 90 FD | 	jmp	#LR__0852
0a0bc                 | LR__0851
0a0bc     A7 08 68 FC | 	wrlong	#4, fp
0a0c0     08 4E 05 F1 | 	add	fp, #8
0a0c4     A7 FE 69 FC | 	wrlong	#255, fp
0a0c8     08 4E 85 F1 | 	sub	fp, #8
0a0cc                 | LR__0852
0a0cc     A7 12 02 F6 | 	mov	arg01, fp
0a0d0     E4 DF BF FD | 	call	#_push
0a0d4     A7 F0 03 F6 | 	mov	ptra, fp
0a0d8     B2 00 A0 FD | 	call	#popregs_
0a0dc                 | _do_plus_ret
0a0dc     2D 00 64 FD | 	ret
0a0e0                 | 
0a0e0                 | ' 
0a0e0                 | ' sub do_minus
0a0e0                 | _do_minus
0a0e0     05 4A 05 F6 | 	mov	COUNT_, #5
0a0e4     A8 00 A0 FD | 	call	#pushregs_
0a0e8     18 F0 07 F1 | 	add	ptra, #24
0a0ec     30 DF BF FD | 	call	#_pop
0a0f0     FD 1E 02 F6 | 	mov	local01, result1
0a0f4     FE 20 02 F6 | 	mov	local02, result2
0a0f8     FF 22 02 F6 | 	mov	local03, result3
0a0fc     0C 4E 05 F1 | 	add	fp, #12
0a100     A7 1E 62 FC | 	wrlong	local01, fp
0a104     04 4E 05 F1 | 	add	fp, #4
0a108     A7 20 62 FC | 	wrlong	local02, fp
0a10c     04 4E 05 F1 | 	add	fp, #4
0a110     A7 22 62 FC | 	wrlong	local03, fp
0a114     14 4E 85 F1 | 	sub	fp, #20
0a118     04 DF BF FD | 	call	#_pop
0a11c     FF 22 02 F6 | 	mov	local03, result3
0a120     A7 FA 61 FC | 	wrlong	result1, fp
0a124     04 4E 05 F1 | 	add	fp, #4
0a128     A7 FC 61 FC | 	wrlong	result2, fp
0a12c     04 4E 05 F1 | 	add	fp, #4
0a130     A7 22 62 FC | 	wrlong	local03, fp
0a134                 | ' 
0a134                 | ' t2=pop()
0a134                 | ' t1=pop()
0a134                 | ' 
0a134                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0a134     08 4E 85 F1 | 	sub	fp, #8
0a138     1D 22 0E F2 | 	cmp	local03, #29 wz
0a13c     14 4E 05 A1 |  if_e	add	fp, #20
0a140     A7 24 02 AB |  if_e	rdlong	local04, fp
0a144     14 4E 85 A1 |  if_e	sub	fp, #20
0a148     12 23 02 A6 |  if_e	mov	local03, local04
0a14c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a150     5C 00 90 5D |  if_ne	jmp	#LR__0861
0a154                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0a154     0C 4E 05 F1 | 	add	fp, #12
0a158     A7 1E 02 FB | 	rdlong	local01, fp
0a15c     0C 4E 85 F1 | 	sub	fp, #12
0a160     A7 22 02 FB | 	rdlong	local03, fp
0a164     11 1F 12 F2 | 	cmp	local01, local03 wc
0a168     1C 00 90 3D |  if_ae	jmp	#LR__0860
0a16c     A7 1E 02 FB | 	rdlong	local01, fp
0a170     0C 4E 05 F1 | 	add	fp, #12
0a174     A7 20 02 FB | 	rdlong	local02, fp
0a178     0C 4E 85 F1 | 	sub	fp, #12
0a17c     10 1F 82 F1 | 	sub	local01, local02
0a180     A7 1E 62 FC | 	wrlong	local01, fp
0a184     F4 02 90 FD | 	jmp	#LR__0870
0a188                 | LR__0860
0a188     A7 1E 02 FB | 	rdlong	local01, fp
0a18c     0C 4E 05 F1 | 	add	fp, #12
0a190     A7 20 02 FB | 	rdlong	local02, fp
0a194     0C 4E 85 F1 | 	sub	fp, #12
0a198     10 1F 82 F1 | 	sub	local01, local02
0a19c     A7 1E 62 FC | 	wrlong	local01, fp
0a1a0     08 4E 05 F1 | 	add	fp, #8
0a1a4     A7 38 68 FC | 	wrlong	#28, fp
0a1a8     08 4E 85 F1 | 	sub	fp, #8
0a1ac     CC 02 90 FD | 	jmp	#LR__0870
0a1b0                 | LR__0861
0a1b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0a1b0     08 4E 05 F1 | 	add	fp, #8
0a1b4     A7 1E 02 FB | 	rdlong	local01, fp
0a1b8     08 4E 85 F1 | 	sub	fp, #8
0a1bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a1c0     14 4E 05 A1 |  if_e	add	fp, #20
0a1c4     A7 24 02 AB |  if_e	rdlong	local04, fp
0a1c8     14 4E 85 A1 |  if_e	sub	fp, #20
0a1cc     12 23 02 A6 |  if_e	mov	local03, local04
0a1d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a1d4     28 00 90 5D |  if_ne	jmp	#LR__0862
0a1d8     A7 1E 02 FB | 	rdlong	local01, fp
0a1dc     0C 4E 05 F1 | 	add	fp, #12
0a1e0     A7 20 02 FB | 	rdlong	local02, fp
0a1e4     0C 4E 85 F1 | 	sub	fp, #12
0a1e8     10 1F 82 F1 | 	sub	local01, local02
0a1ec     A7 1E 62 FC | 	wrlong	local01, fp
0a1f0     08 4E 05 F1 | 	add	fp, #8
0a1f4     A7 38 68 FC | 	wrlong	#28, fp
0a1f8     08 4E 85 F1 | 	sub	fp, #8
0a1fc     7C 02 90 FD | 	jmp	#LR__0870
0a200                 | LR__0862
0a200                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0a200     08 4E 05 F1 | 	add	fp, #8
0a204     A7 1E 02 FB | 	rdlong	local01, fp
0a208     08 4E 85 F1 | 	sub	fp, #8
0a20c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a210     14 4E 05 A1 |  if_e	add	fp, #20
0a214     A7 24 02 AB |  if_e	rdlong	local04, fp
0a218     14 4E 85 A1 |  if_e	sub	fp, #20
0a21c     12 23 02 A6 |  if_e	mov	local03, local04
0a220     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a224     34 00 90 5D |  if_ne	jmp	#LR__0863
0a228     A7 12 02 FB | 	rdlong	arg01, fp
0a22c     E8 BE B0 FD | 	call	#__system___float_fromuns
0a230     FD 12 02 F6 | 	mov	arg01, result1
0a234     0C 4E 05 F1 | 	add	fp, #12
0a238     A7 14 02 FB | 	rdlong	arg02, fp
0a23c     0C 4E 85 F1 | 	sub	fp, #12
0a240     1F 14 E6 F4 | 	bitnot	arg02, #31
0a244     04 BF B0 FD | 	call	#__system___float_add
0a248     A7 FA 61 FC | 	wrlong	result1, fp
0a24c     08 4E 05 F1 | 	add	fp, #8
0a250     A7 3C 68 FC | 	wrlong	#30, fp
0a254     08 4E 85 F1 | 	sub	fp, #8
0a258     20 02 90 FD | 	jmp	#LR__0870
0a25c                 | LR__0863
0a25c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0a25c     08 4E 05 F1 | 	add	fp, #8
0a260     A7 1E 02 FB | 	rdlong	local01, fp
0a264     08 4E 85 F1 | 	sub	fp, #8
0a268     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a26c     14 4E 05 A1 |  if_e	add	fp, #20
0a270     A7 24 02 AB |  if_e	rdlong	local04, fp
0a274     14 4E 85 A1 |  if_e	sub	fp, #20
0a278     12 23 02 A6 |  if_e	mov	local03, local04
0a27c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a280     1C 00 90 5D |  if_ne	jmp	#LR__0864
0a284     A7 1E 02 FB | 	rdlong	local01, fp
0a288     0C 4E 05 F1 | 	add	fp, #12
0a28c     A7 20 02 FB | 	rdlong	local02, fp
0a290     0C 4E 85 F1 | 	sub	fp, #12
0a294     10 1F 82 F1 | 	sub	local01, local02
0a298     A7 1E 62 FC | 	wrlong	local01, fp
0a29c     DC 01 90 FD | 	jmp	#LR__0870
0a2a0                 | LR__0864
0a2a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0a2a0     08 4E 05 F1 | 	add	fp, #8
0a2a4     A7 1E 02 FB | 	rdlong	local01, fp
0a2a8     08 4E 85 F1 | 	sub	fp, #8
0a2ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a2b0     14 4E 05 A1 |  if_e	add	fp, #20
0a2b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0a2b8     14 4E 85 A1 |  if_e	sub	fp, #20
0a2bc     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0a2c0     1C 00 90 5D |  if_ne	jmp	#LR__0865
0a2c4     A7 1E 02 FB | 	rdlong	local01, fp
0a2c8     0C 4E 05 F1 | 	add	fp, #12
0a2cc     A7 20 02 FB | 	rdlong	local02, fp
0a2d0     0C 4E 85 F1 | 	sub	fp, #12
0a2d4     10 1F 82 F1 | 	sub	local01, local02
0a2d8     A7 1E 62 FC | 	wrlong	local01, fp
0a2dc     9C 01 90 FD | 	jmp	#LR__0870
0a2e0                 | LR__0865
0a2e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0a2e0     08 4E 05 F1 | 	add	fp, #8
0a2e4     A7 1E 02 FB | 	rdlong	local01, fp
0a2e8     08 4E 85 F1 | 	sub	fp, #8
0a2ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a2f0     14 4E 05 A1 |  if_e	add	fp, #20
0a2f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0a2f8     14 4E 85 A1 |  if_e	sub	fp, #20
0a2fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a300     44 00 90 5D |  if_ne	jmp	#LR__0866
0a304     A7 12 02 FB | 	rdlong	arg01, fp
0a308     09 13 52 F6 | 	abs	arg01, arg01 wc
0a30c     1F 26 C6 C9 |  if_b	decod	local05, #31
0a310     00 26 06 36 |  if_ae	mov	local05, #0
0a314     00 BE B0 FD | 	call	#__system___float_fromuns
0a318     13 FB 61 F5 | 	xor	result1, local05
0a31c     FD 12 02 F6 | 	mov	arg01, result1
0a320     0C 4E 05 F1 | 	add	fp, #12
0a324     A7 14 02 FB | 	rdlong	arg02, fp
0a328     0C 4E 85 F1 | 	sub	fp, #12
0a32c     1F 14 E6 F4 | 	bitnot	arg02, #31
0a330     18 BE B0 FD | 	call	#__system___float_add
0a334     A7 FA 61 FC | 	wrlong	result1, fp
0a338     08 4E 05 F1 | 	add	fp, #8
0a33c     A7 3C 68 FC | 	wrlong	#30, fp
0a340     08 4E 85 F1 | 	sub	fp, #8
0a344     34 01 90 FD | 	jmp	#LR__0870
0a348                 | LR__0866
0a348                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0a348     08 4E 05 F1 | 	add	fp, #8
0a34c     A7 1E 02 FB | 	rdlong	local01, fp
0a350     08 4E 85 F1 | 	sub	fp, #8
0a354     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a358     14 4E 05 A1 |  if_e	add	fp, #20
0a35c     A7 22 02 AB |  if_e	rdlong	local03, fp
0a360     14 4E 85 A1 |  if_e	sub	fp, #20
0a364     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a368     2C 00 90 5D |  if_ne	jmp	#LR__0867
0a36c     A7 1E 02 FB | 	rdlong	local01, fp
0a370     0C 4E 05 F1 | 	add	fp, #12
0a374     A7 12 02 FB | 	rdlong	arg01, fp
0a378     0C 4E 85 F1 | 	sub	fp, #12
0a37c     98 BD B0 FD | 	call	#__system___float_fromuns
0a380     FD 14 02 F6 | 	mov	arg02, result1
0a384     0F 13 02 F6 | 	mov	arg01, local01
0a388     1F 14 E6 F4 | 	bitnot	arg02, #31
0a38c     BC BD B0 FD | 	call	#__system___float_add
0a390     A7 FA 61 FC | 	wrlong	result1, fp
0a394     E4 00 90 FD | 	jmp	#LR__0870
0a398                 | LR__0867
0a398                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0a398     08 4E 05 F1 | 	add	fp, #8
0a39c     A7 1E 02 FB | 	rdlong	local01, fp
0a3a0     08 4E 85 F1 | 	sub	fp, #8
0a3a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a3a8     14 4E 05 A1 |  if_e	add	fp, #20
0a3ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0a3b0     14 4E 85 A1 |  if_e	sub	fp, #20
0a3b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a3b8     3C 00 90 5D |  if_ne	jmp	#LR__0868
0a3bc     A7 1E 02 FB | 	rdlong	local01, fp
0a3c0     0C 4E 05 F1 | 	add	fp, #12
0a3c4     A7 12 02 FB | 	rdlong	arg01, fp
0a3c8     0C 4E 85 F1 | 	sub	fp, #12
0a3cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0a3d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0a3d4     00 26 06 36 |  if_ae	mov	local05, #0
0a3d8     3C BD B0 FD | 	call	#__system___float_fromuns
0a3dc     13 FB 61 F5 | 	xor	result1, local05
0a3e0     FD 14 02 F6 | 	mov	arg02, result1
0a3e4     0F 13 02 F6 | 	mov	arg01, local01
0a3e8     1F 14 E6 F4 | 	bitnot	arg02, #31
0a3ec     5C BD B0 FD | 	call	#__system___float_add
0a3f0     A7 FA 61 FC | 	wrlong	result1, fp
0a3f4     84 00 90 FD | 	jmp	#LR__0870
0a3f8                 | LR__0868
0a3f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0a3f8     08 4E 05 F1 | 	add	fp, #8
0a3fc     A7 1E 02 FB | 	rdlong	local01, fp
0a400     08 4E 85 F1 | 	sub	fp, #8
0a404     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a408     14 4E 05 A1 |  if_e	add	fp, #20
0a40c     A7 22 02 AB |  if_e	rdlong	local03, fp
0a410     14 4E 85 A1 |  if_e	sub	fp, #20
0a414     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a418     20 00 90 5D |  if_ne	jmp	#LR__0869
0a41c     A7 12 02 FB | 	rdlong	arg01, fp
0a420     0C 4E 05 F1 | 	add	fp, #12
0a424     A7 14 02 FB | 	rdlong	arg02, fp
0a428     0C 4E 85 F1 | 	sub	fp, #12
0a42c     1F 14 E6 F4 | 	bitnot	arg02, #31
0a430     18 BD B0 FD | 	call	#__system___float_add
0a434     A7 FA 61 FC | 	wrlong	result1, fp
0a438     40 00 90 FD | 	jmp	#LR__0870
0a43c                 | LR__0869
0a43c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0a43c     08 4E 05 F1 | 	add	fp, #8
0a440     A7 1E 02 FB | 	rdlong	local01, fp
0a444     08 4E 85 F1 | 	sub	fp, #8
0a448     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a44c     14 4E 05 51 |  if_ne	add	fp, #20
0a450     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a454     14 4E 85 51 |  if_ne	sub	fp, #20
0a458     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0a45c     A7 06 68 AC |  if_e	wrlong	#3, fp
0a460     08 4E 05 A1 |  if_e	add	fp, #8
0a464     A7 FE 69 AC |  if_e	wrlong	#255, fp
0a468     08 4E 85 A1 |  if_e	sub	fp, #8
0a46c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0a470     08 4E 05 51 |  if_ne	add	fp, #8
0a474     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0a478     08 4E 85 51 |  if_ne	sub	fp, #8
0a47c                 | LR__0870
0a47c     A7 12 02 F6 | 	mov	arg01, fp
0a480     34 DC BF FD | 	call	#_push
0a484     A7 F0 03 F6 | 	mov	ptra, fp
0a488     B2 00 A0 FD | 	call	#popregs_
0a48c                 | _do_minus_ret
0a48c     2D 00 64 FD | 	ret
0a490                 | 
0a490                 | ' 
0a490                 | ' sub do_and 
0a490                 | _do_and
0a490     03 4A 05 F6 | 	mov	COUNT_, #3
0a494     A8 00 A0 FD | 	call	#pushregs_
0a498     18 F0 07 F1 | 	add	ptra, #24
0a49c     80 DB BF FD | 	call	#_pop
0a4a0     FD 12 02 F6 | 	mov	arg01, result1
0a4a4     FE 1E 02 F6 | 	mov	local01, result2
0a4a8     FF 20 02 F6 | 	mov	local02, result3
0a4ac     0C 4E 05 F1 | 	add	fp, #12
0a4b0     A7 12 62 FC | 	wrlong	arg01, fp
0a4b4     04 4E 05 F1 | 	add	fp, #4
0a4b8     A7 1E 62 FC | 	wrlong	local01, fp
0a4bc     04 4E 05 F1 | 	add	fp, #4
0a4c0     A7 20 62 FC | 	wrlong	local02, fp
0a4c4     14 4E 85 F1 | 	sub	fp, #20
0a4c8     54 DB BF FD | 	call	#_pop
0a4cc     FF 22 02 F6 | 	mov	local03, result3
0a4d0     A7 FA 61 FC | 	wrlong	result1, fp
0a4d4     04 4E 05 F1 | 	add	fp, #4
0a4d8     A7 FC 61 FC | 	wrlong	result2, fp
0a4dc     04 4E 05 F1 | 	add	fp, #4
0a4e0     A7 22 62 FC | 	wrlong	local03, fp
0a4e4                 | ' 
0a4e4                 | ' t2=pop()
0a4e4                 | ' t1=pop()
0a4e4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0a4e4     08 4E 85 F1 | 	sub	fp, #8
0a4e8     1C 22 0E F2 | 	cmp	local03, #28 wz
0a4ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0a4f0     A7 22 62 AC |  if_e	wrlong	local03, fp
0a4f4     08 4E 05 A1 |  if_e	add	fp, #8
0a4f8     A7 3A 68 AC |  if_e	wrlong	#29, fp
0a4fc     08 4E 85 A1 |  if_e	sub	fp, #8
0a500                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0a500     14 4E 05 F1 | 	add	fp, #20
0a504     A7 22 02 FB | 	rdlong	local03, fp
0a508     14 4E 85 F1 | 	sub	fp, #20
0a50c     1C 22 0E F2 | 	cmp	local03, #28 wz
0a510     18 00 90 5D |  if_ne	jmp	#LR__0880
0a514     0C 4E 05 F1 | 	add	fp, #12
0a518     A7 22 02 FB | 	rdlong	local03, fp
0a51c     A7 22 62 FC | 	wrlong	local03, fp
0a520     08 4E 05 F1 | 	add	fp, #8
0a524     A7 3A 68 FC | 	wrlong	#29, fp
0a528     14 4E 85 F1 | 	sub	fp, #20
0a52c                 | LR__0880
0a52c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0a52c     08 4E 05 F1 | 	add	fp, #8
0a530     A7 22 02 FB | 	rdlong	local03, fp
0a534     08 4E 85 F1 | 	sub	fp, #8
0a538     1F 22 0E F2 | 	cmp	local03, #31 wz
0a53c     14 4E 05 51 |  if_ne	add	fp, #20
0a540     A7 20 02 5B |  if_ne	rdlong	local02, fp
0a544     14 4E 85 51 |  if_ne	sub	fp, #20
0a548     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0a54c     08 4E 05 51 |  if_ne	add	fp, #8
0a550     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a554     08 4E 85 51 |  if_ne	sub	fp, #8
0a558     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0a55c     14 4E 05 51 |  if_ne	add	fp, #20
0a560     14 4E 85 51 |  if_ne	sub	fp, #20
0a564     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0a568     A7 0C 68 AC |  if_e	wrlong	#6, fp
0a56c     08 4E 05 A1 |  if_e	add	fp, #8
0a570     A7 FE 69 AC |  if_e	wrlong	#255, fp
0a574     08 4E 85 A1 |  if_e	sub	fp, #8
0a578     18 00 90 AD |  if_e	jmp	#LR__0881
0a57c     A7 22 02 FB | 	rdlong	local03, fp
0a580     0C 4E 05 F1 | 	add	fp, #12
0a584     A7 1E 02 FB | 	rdlong	local01, fp
0a588     0C 4E 85 F1 | 	sub	fp, #12
0a58c     0F 23 02 F5 | 	and	local03, local01
0a590     A7 22 62 FC | 	wrlong	local03, fp
0a594                 | LR__0881
0a594     A7 12 02 F6 | 	mov	arg01, fp
0a598     1C DB BF FD | 	call	#_push
0a59c     A7 F0 03 F6 | 	mov	ptra, fp
0a5a0     B2 00 A0 FD | 	call	#popregs_
0a5a4                 | _do_and_ret
0a5a4     2D 00 64 FD | 	ret
0a5a8                 | 
0a5a8                 | ' 
0a5a8                 | ' sub do_or 
0a5a8                 | _do_or
0a5a8     03 4A 05 F6 | 	mov	COUNT_, #3
0a5ac     A8 00 A0 FD | 	call	#pushregs_
0a5b0     18 F0 07 F1 | 	add	ptra, #24
0a5b4     68 DA BF FD | 	call	#_pop
0a5b8     FD 12 02 F6 | 	mov	arg01, result1
0a5bc     FE 1E 02 F6 | 	mov	local01, result2
0a5c0     FF 20 02 F6 | 	mov	local02, result3
0a5c4     0C 4E 05 F1 | 	add	fp, #12
0a5c8     A7 12 62 FC | 	wrlong	arg01, fp
0a5cc     04 4E 05 F1 | 	add	fp, #4
0a5d0     A7 1E 62 FC | 	wrlong	local01, fp
0a5d4     04 4E 05 F1 | 	add	fp, #4
0a5d8     A7 20 62 FC | 	wrlong	local02, fp
0a5dc     14 4E 85 F1 | 	sub	fp, #20
0a5e0     3C DA BF FD | 	call	#_pop
0a5e4     FF 22 02 F6 | 	mov	local03, result3
0a5e8     A7 FA 61 FC | 	wrlong	result1, fp
0a5ec     04 4E 05 F1 | 	add	fp, #4
0a5f0     A7 FC 61 FC | 	wrlong	result2, fp
0a5f4     04 4E 05 F1 | 	add	fp, #4
0a5f8     A7 22 62 FC | 	wrlong	local03, fp
0a5fc                 | ' 
0a5fc                 | ' t2=pop()
0a5fc                 | ' t1=pop()
0a5fc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0a5fc     08 4E 85 F1 | 	sub	fp, #8
0a600     1C 22 0E F2 | 	cmp	local03, #28 wz
0a604     A7 22 02 AB |  if_e	rdlong	local03, fp
0a608     A7 22 62 AC |  if_e	wrlong	local03, fp
0a60c     08 4E 05 A1 |  if_e	add	fp, #8
0a610     A7 3A 68 AC |  if_e	wrlong	#29, fp
0a614     08 4E 85 A1 |  if_e	sub	fp, #8
0a618                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0a618     14 4E 05 F1 | 	add	fp, #20
0a61c     A7 22 02 FB | 	rdlong	local03, fp
0a620     14 4E 85 F1 | 	sub	fp, #20
0a624     1C 22 0E F2 | 	cmp	local03, #28 wz
0a628     18 00 90 5D |  if_ne	jmp	#LR__0890
0a62c     0C 4E 05 F1 | 	add	fp, #12
0a630     A7 22 02 FB | 	rdlong	local03, fp
0a634     A7 22 62 FC | 	wrlong	local03, fp
0a638     08 4E 05 F1 | 	add	fp, #8
0a63c     A7 3A 68 FC | 	wrlong	#29, fp
0a640     14 4E 85 F1 | 	sub	fp, #20
0a644                 | LR__0890
0a644                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0a644     08 4E 05 F1 | 	add	fp, #8
0a648     A7 22 02 FB | 	rdlong	local03, fp
0a64c     08 4E 85 F1 | 	sub	fp, #8
0a650     1F 22 0E F2 | 	cmp	local03, #31 wz
0a654     14 4E 05 51 |  if_ne	add	fp, #20
0a658     A7 20 02 5B |  if_ne	rdlong	local02, fp
0a65c     14 4E 85 51 |  if_ne	sub	fp, #20
0a660     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0a664     08 4E 05 51 |  if_ne	add	fp, #8
0a668     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a66c     08 4E 85 51 |  if_ne	sub	fp, #8
0a670     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0a674     14 4E 05 51 |  if_ne	add	fp, #20
0a678     14 4E 85 51 |  if_ne	sub	fp, #20
0a67c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0a680     A7 0C 68 AC |  if_e	wrlong	#6, fp
0a684     08 4E 05 A1 |  if_e	add	fp, #8
0a688     A7 FE 69 AC |  if_e	wrlong	#255, fp
0a68c     08 4E 85 A1 |  if_e	sub	fp, #8
0a690     18 00 90 AD |  if_e	jmp	#LR__0891
0a694     A7 22 02 FB | 	rdlong	local03, fp
0a698     0C 4E 05 F1 | 	add	fp, #12
0a69c     A7 1E 02 FB | 	rdlong	local01, fp
0a6a0     0C 4E 85 F1 | 	sub	fp, #12
0a6a4     0F 23 42 F5 | 	or	local03, local01
0a6a8     A7 22 62 FC | 	wrlong	local03, fp
0a6ac                 | LR__0891
0a6ac     A7 12 02 F6 | 	mov	arg01, fp
0a6b0     04 DA BF FD | 	call	#_push
0a6b4     A7 F0 03 F6 | 	mov	ptra, fp
0a6b8     B2 00 A0 FD | 	call	#popregs_
0a6bc                 | _do_or_ret
0a6bc     2D 00 64 FD | 	ret
0a6c0                 | 
0a6c0                 | ' 
0a6c0                 | ' sub do_mul
0a6c0                 | _do_mul
0a6c0     05 4A 05 F6 | 	mov	COUNT_, #5
0a6c4     A8 00 A0 FD | 	call	#pushregs_
0a6c8     18 F0 07 F1 | 	add	ptra, #24
0a6cc     50 D9 BF FD | 	call	#_pop
0a6d0     FD 1E 02 F6 | 	mov	local01, result1
0a6d4     FE 20 02 F6 | 	mov	local02, result2
0a6d8     FF 22 02 F6 | 	mov	local03, result3
0a6dc     0C 4E 05 F1 | 	add	fp, #12
0a6e0     A7 1E 62 FC | 	wrlong	local01, fp
0a6e4     04 4E 05 F1 | 	add	fp, #4
0a6e8     A7 20 62 FC | 	wrlong	local02, fp
0a6ec     04 4E 05 F1 | 	add	fp, #4
0a6f0     A7 22 62 FC | 	wrlong	local03, fp
0a6f4     14 4E 85 F1 | 	sub	fp, #20
0a6f8     24 D9 BF FD | 	call	#_pop
0a6fc     FF 22 02 F6 | 	mov	local03, result3
0a700     A7 FA 61 FC | 	wrlong	result1, fp
0a704     04 4E 05 F1 | 	add	fp, #4
0a708     A7 FC 61 FC | 	wrlong	result2, fp
0a70c     04 4E 05 F1 | 	add	fp, #4
0a710     A7 22 62 FC | 	wrlong	local03, fp
0a714                 | ' 
0a714                 | ' t2=pop()
0a714                 | ' t1=pop()
0a714                 | ' 
0a714                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0a714     08 4E 85 F1 | 	sub	fp, #8
0a718     1D 22 0E F2 | 	cmp	local03, #29 wz
0a71c     14 4E 05 A1 |  if_e	add	fp, #20
0a720     A7 24 02 AB |  if_e	rdlong	local04, fp
0a724     14 4E 85 A1 |  if_e	sub	fp, #20
0a728     12 23 02 A6 |  if_e	mov	local03, local04
0a72c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a730     20 00 90 5D |  if_ne	jmp	#LR__0900
0a734     A7 20 02 FB | 	rdlong	local02, fp
0a738     0C 4E 05 F1 | 	add	fp, #12
0a73c     A7 22 02 FB | 	rdlong	local03, fp
0a740     11 21 02 FD | 	qmul	local02, local03
0a744     0C 4E 85 F1 | 	sub	fp, #12
0a748     18 1E 62 FD | 	getqx	local01
0a74c     A7 1E 62 FC | 	wrlong	local01, fp
0a750     C4 02 90 FD | 	jmp	#LR__0909
0a754                 | LR__0900
0a754                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0a754     08 4E 05 F1 | 	add	fp, #8
0a758     A7 1E 02 FB | 	rdlong	local01, fp
0a75c     08 4E 85 F1 | 	sub	fp, #8
0a760     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a764     14 4E 05 A1 |  if_e	add	fp, #20
0a768     A7 24 02 AB |  if_e	rdlong	local04, fp
0a76c     14 4E 85 A1 |  if_e	sub	fp, #20
0a770     12 23 02 A6 |  if_e	mov	local03, local04
0a774     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a778     2C 00 90 5D |  if_ne	jmp	#LR__0901
0a77c     A7 20 02 FB | 	rdlong	local02, fp
0a780     0C 4E 05 F1 | 	add	fp, #12
0a784     A7 22 02 FB | 	rdlong	local03, fp
0a788     11 21 02 FD | 	qmul	local02, local03
0a78c     0C 4E 85 F1 | 	sub	fp, #12
0a790     18 1E 62 FD | 	getqx	local01
0a794     A7 1E 62 FC | 	wrlong	local01, fp
0a798     08 4E 05 F1 | 	add	fp, #8
0a79c     A7 38 68 FC | 	wrlong	#28, fp
0a7a0     08 4E 85 F1 | 	sub	fp, #8
0a7a4     70 02 90 FD | 	jmp	#LR__0909
0a7a8                 | LR__0901
0a7a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0a7a8     08 4E 05 F1 | 	add	fp, #8
0a7ac     A7 1E 02 FB | 	rdlong	local01, fp
0a7b0     08 4E 85 F1 | 	sub	fp, #8
0a7b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0a7b8     14 4E 05 A1 |  if_e	add	fp, #20
0a7bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0a7c0     14 4E 85 A1 |  if_e	sub	fp, #20
0a7c4     12 23 02 A6 |  if_e	mov	local03, local04
0a7c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a7cc     30 00 90 5D |  if_ne	jmp	#LR__0902
0a7d0     A7 12 02 FB | 	rdlong	arg01, fp
0a7d4     40 B9 B0 FD | 	call	#__system___float_fromuns
0a7d8     FD 12 02 F6 | 	mov	arg01, result1
0a7dc     0C 4E 05 F1 | 	add	fp, #12
0a7e0     A7 14 02 FB | 	rdlong	arg02, fp
0a7e4     0C 4E 85 F1 | 	sub	fp, #12
0a7e8     58 BC B0 FD | 	call	#__system___float_mul
0a7ec     A7 FA 61 FC | 	wrlong	result1, fp
0a7f0     08 4E 05 F1 | 	add	fp, #8
0a7f4     A7 3C 68 FC | 	wrlong	#30, fp
0a7f8     08 4E 85 F1 | 	sub	fp, #8
0a7fc     18 02 90 FD | 	jmp	#LR__0909
0a800                 | LR__0902
0a800                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0a800     08 4E 05 F1 | 	add	fp, #8
0a804     A7 1E 02 FB | 	rdlong	local01, fp
0a808     08 4E 85 F1 | 	sub	fp, #8
0a80c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a810     14 4E 05 A1 |  if_e	add	fp, #20
0a814     A7 24 02 AB |  if_e	rdlong	local04, fp
0a818     14 4E 85 A1 |  if_e	sub	fp, #20
0a81c     12 23 02 A6 |  if_e	mov	local03, local04
0a820     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a824     20 00 90 5D |  if_ne	jmp	#LR__0903
0a828     A7 20 02 FB | 	rdlong	local02, fp
0a82c     0C 4E 05 F1 | 	add	fp, #12
0a830     A7 22 02 FB | 	rdlong	local03, fp
0a834     11 21 02 FD | 	qmul	local02, local03
0a838     0C 4E 85 F1 | 	sub	fp, #12
0a83c     18 1E 62 FD | 	getqx	local01
0a840     A7 1E 62 FC | 	wrlong	local01, fp
0a844     D0 01 90 FD | 	jmp	#LR__0909
0a848                 | LR__0903
0a848                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0a848     08 4E 05 F1 | 	add	fp, #8
0a84c     A7 1E 02 FB | 	rdlong	local01, fp
0a850     08 4E 85 F1 | 	sub	fp, #8
0a854     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a858     14 4E 05 A1 |  if_e	add	fp, #20
0a85c     A7 24 02 AB |  if_e	rdlong	local04, fp
0a860     14 4E 85 A1 |  if_e	sub	fp, #20
0a864     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0a868     20 00 90 5D |  if_ne	jmp	#LR__0904
0a86c     A7 20 02 FB | 	rdlong	local02, fp
0a870     0C 4E 05 F1 | 	add	fp, #12
0a874     A7 22 02 FB | 	rdlong	local03, fp
0a878     11 21 02 FD | 	qmul	local02, local03
0a87c     0C 4E 85 F1 | 	sub	fp, #12
0a880     18 1E 62 FD | 	getqx	local01
0a884     A7 1E 62 FC | 	wrlong	local01, fp
0a888     8C 01 90 FD | 	jmp	#LR__0909
0a88c                 | LR__0904
0a88c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0a88c     08 4E 05 F1 | 	add	fp, #8
0a890     A7 1E 02 FB | 	rdlong	local01, fp
0a894     08 4E 85 F1 | 	sub	fp, #8
0a898     1C 1E 0E F2 | 	cmp	local01, #28 wz
0a89c     14 4E 05 A1 |  if_e	add	fp, #20
0a8a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0a8a4     14 4E 85 A1 |  if_e	sub	fp, #20
0a8a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a8ac     40 00 90 5D |  if_ne	jmp	#LR__0905
0a8b0     A7 12 02 FB | 	rdlong	arg01, fp
0a8b4     09 13 52 F6 | 	abs	arg01, arg01 wc
0a8b8     1F 26 C6 C9 |  if_b	decod	local05, #31
0a8bc     00 26 06 36 |  if_ae	mov	local05, #0
0a8c0     54 B8 B0 FD | 	call	#__system___float_fromuns
0a8c4     13 FB 61 F5 | 	xor	result1, local05
0a8c8     FD 12 02 F6 | 	mov	arg01, result1
0a8cc     0C 4E 05 F1 | 	add	fp, #12
0a8d0     A7 14 02 FB | 	rdlong	arg02, fp
0a8d4     0C 4E 85 F1 | 	sub	fp, #12
0a8d8     68 BB B0 FD | 	call	#__system___float_mul
0a8dc     A7 FA 61 FC | 	wrlong	result1, fp
0a8e0     08 4E 05 F1 | 	add	fp, #8
0a8e4     A7 3C 68 FC | 	wrlong	#30, fp
0a8e8     08 4E 85 F1 | 	sub	fp, #8
0a8ec     28 01 90 FD | 	jmp	#LR__0909
0a8f0                 | LR__0905
0a8f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0a8f0     08 4E 05 F1 | 	add	fp, #8
0a8f4     A7 1E 02 FB | 	rdlong	local01, fp
0a8f8     08 4E 85 F1 | 	sub	fp, #8
0a8fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a900     14 4E 05 A1 |  if_e	add	fp, #20
0a904     A7 22 02 AB |  if_e	rdlong	local03, fp
0a908     14 4E 85 A1 |  if_e	sub	fp, #20
0a90c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0a910     28 00 90 5D |  if_ne	jmp	#LR__0906
0a914     A7 1E 02 FB | 	rdlong	local01, fp
0a918     0C 4E 05 F1 | 	add	fp, #12
0a91c     A7 12 02 FB | 	rdlong	arg01, fp
0a920     0C 4E 85 F1 | 	sub	fp, #12
0a924     F0 B7 B0 FD | 	call	#__system___float_fromuns
0a928     FD 14 02 F6 | 	mov	arg02, result1
0a92c     0F 13 02 F6 | 	mov	arg01, local01
0a930     10 BB B0 FD | 	call	#__system___float_mul
0a934     A7 FA 61 FC | 	wrlong	result1, fp
0a938     DC 00 90 FD | 	jmp	#LR__0909
0a93c                 | LR__0906
0a93c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0a93c     08 4E 05 F1 | 	add	fp, #8
0a940     A7 1E 02 FB | 	rdlong	local01, fp
0a944     08 4E 85 F1 | 	sub	fp, #8
0a948     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a94c     14 4E 05 A1 |  if_e	add	fp, #20
0a950     A7 22 02 AB |  if_e	rdlong	local03, fp
0a954     14 4E 85 A1 |  if_e	sub	fp, #20
0a958     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0a95c     38 00 90 5D |  if_ne	jmp	#LR__0907
0a960     A7 1E 02 FB | 	rdlong	local01, fp
0a964     0C 4E 05 F1 | 	add	fp, #12
0a968     A7 12 02 FB | 	rdlong	arg01, fp
0a96c     0C 4E 85 F1 | 	sub	fp, #12
0a970     09 13 52 F6 | 	abs	arg01, arg01 wc
0a974     1F 26 C6 C9 |  if_b	decod	local05, #31
0a978     00 26 06 36 |  if_ae	mov	local05, #0
0a97c     98 B7 B0 FD | 	call	#__system___float_fromuns
0a980     13 FB 61 F5 | 	xor	result1, local05
0a984     FD 14 02 F6 | 	mov	arg02, result1
0a988     0F 13 02 F6 | 	mov	arg01, local01
0a98c     B4 BA B0 FD | 	call	#__system___float_mul
0a990     A7 FA 61 FC | 	wrlong	result1, fp
0a994     80 00 90 FD | 	jmp	#LR__0909
0a998                 | LR__0907
0a998                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0a998     08 4E 05 F1 | 	add	fp, #8
0a99c     A7 1E 02 FB | 	rdlong	local01, fp
0a9a0     08 4E 85 F1 | 	sub	fp, #8
0a9a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0a9a8     14 4E 05 A1 |  if_e	add	fp, #20
0a9ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0a9b0     14 4E 85 A1 |  if_e	sub	fp, #20
0a9b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0a9b8     1C 00 90 5D |  if_ne	jmp	#LR__0908
0a9bc     A7 12 02 FB | 	rdlong	arg01, fp
0a9c0     0C 4E 05 F1 | 	add	fp, #12
0a9c4     A7 14 02 FB | 	rdlong	arg02, fp
0a9c8     0C 4E 85 F1 | 	sub	fp, #12
0a9cc     74 BA B0 FD | 	call	#__system___float_mul
0a9d0     A7 FA 61 FC | 	wrlong	result1, fp
0a9d4     40 00 90 FD | 	jmp	#LR__0909
0a9d8                 | LR__0908
0a9d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0a9d8     08 4E 05 F1 | 	add	fp, #8
0a9dc     A7 1E 02 FB | 	rdlong	local01, fp
0a9e0     08 4E 85 F1 | 	sub	fp, #8
0a9e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a9e8     14 4E 05 51 |  if_ne	add	fp, #20
0a9ec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0a9f0     14 4E 85 51 |  if_ne	sub	fp, #20
0a9f4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0a9f8     A7 10 68 AC |  if_e	wrlong	#8, fp
0a9fc     08 4E 05 A1 |  if_e	add	fp, #8
0aa00     A7 FE 69 AC |  if_e	wrlong	#255, fp
0aa04     08 4E 85 A1 |  if_e	sub	fp, #8
0aa08     A7 12 68 5C |  if_ne	wrlong	#9, fp
0aa0c     08 4E 05 51 |  if_ne	add	fp, #8
0aa10     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0aa14     08 4E 85 51 |  if_ne	sub	fp, #8
0aa18                 | LR__0909
0aa18     A7 12 02 F6 | 	mov	arg01, fp
0aa1c     98 D6 BF FD | 	call	#_push
0aa20     A7 F0 03 F6 | 	mov	ptra, fp
0aa24     B2 00 A0 FD | 	call	#popregs_
0aa28                 | _do_mul_ret
0aa28     2D 00 64 FD | 	ret
0aa2c                 | 
0aa2c                 | ' 
0aa2c                 | ' sub do_div 
0aa2c                 | _do_div
0aa2c     01 4A 05 F6 | 	mov	COUNT_, #1
0aa30     A8 00 A0 FD | 	call	#pushregs_
0aa34     18 F0 07 F1 | 	add	ptra, #24
0aa38     E4 D5 BF FD | 	call	#_pop
0aa3c     FD 60 02 F6 | 	mov	muldivb_, result1
0aa40     FE 5E 02 F6 | 	mov	muldiva_, result2
0aa44     FF 1E 02 F6 | 	mov	local01, result3
0aa48     0C 4E 05 F1 | 	add	fp, #12
0aa4c     A7 60 62 FC | 	wrlong	muldivb_, fp
0aa50     04 4E 05 F1 | 	add	fp, #4
0aa54     A7 5E 62 FC | 	wrlong	muldiva_, fp
0aa58     04 4E 05 F1 | 	add	fp, #4
0aa5c     A7 1E 62 FC | 	wrlong	local01, fp
0aa60     14 4E 85 F1 | 	sub	fp, #20
0aa64     B8 D5 BF FD | 	call	#_pop
0aa68     A7 FA 61 FC | 	wrlong	result1, fp
0aa6c     04 4E 05 F1 | 	add	fp, #4
0aa70     A7 FC 61 FC | 	wrlong	result2, fp
0aa74     04 4E 05 F1 | 	add	fp, #4
0aa78     A7 FE 61 FC | 	wrlong	result3, fp
0aa7c                 | ' 
0aa7c                 | ' t2=pop()
0aa7c                 | ' t1=pop()
0aa7c                 | ' 
0aa7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0aa7c     08 4E 85 F1 | 	sub	fp, #8
0aa80     1F FE 0D F2 | 	cmp	result3, #31 wz
0aa84     14 4E 05 51 |  if_ne	add	fp, #20
0aa88     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0aa8c     14 4E 85 51 |  if_ne	sub	fp, #20
0aa90     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0aa94     A7 14 68 AC |  if_e	wrlong	#10, fp
0aa98     08 4E 05 A1 |  if_e	add	fp, #8
0aa9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0aaa0     08 4E 85 A1 |  if_e	sub	fp, #8
0aaa4     90 01 90 AD |  if_e	jmp	#LR__0916
0aaa8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0aaa8     08 4E 05 F1 | 	add	fp, #8
0aaac     A7 60 02 FB | 	rdlong	muldivb_, fp
0aab0     08 4E 85 F1 | 	sub	fp, #8
0aab4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aab8     1C 00 90 5D |  if_ne	jmp	#LR__0910
0aabc     08 4E 05 F1 | 	add	fp, #8
0aac0     A7 38 68 FC | 	wrlong	#28, fp
0aac4     08 4E 85 F1 | 	sub	fp, #8
0aac8     A7 12 02 FB | 	rdlong	arg01, fp
0aacc     00 14 06 F6 | 	mov	arg02, #0
0aad0     38 BE B0 FD | 	call	#__system___float_tointeger
0aad4     A7 FA 61 FC | 	wrlong	result1, fp
0aad8                 | LR__0910
0aad8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0aad8     14 4E 05 F1 | 	add	fp, #20
0aadc     A7 60 02 FB | 	rdlong	muldivb_, fp
0aae0     14 4E 85 F1 | 	sub	fp, #20
0aae4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aae8     28 00 90 5D |  if_ne	jmp	#LR__0911
0aaec     14 4E 05 F1 | 	add	fp, #20
0aaf0     A7 38 68 FC | 	wrlong	#28, fp
0aaf4     08 4E 85 F1 | 	sub	fp, #8
0aaf8     A7 12 02 FB | 	rdlong	arg01, fp
0aafc     0C 4E 85 F1 | 	sub	fp, #12
0ab00     00 14 06 F6 | 	mov	arg02, #0
0ab04     04 BE B0 FD | 	call	#__system___float_tointeger
0ab08     0C 4E 05 F1 | 	add	fp, #12
0ab0c     A7 FA 61 FC | 	wrlong	result1, fp
0ab10     0C 4E 85 F1 | 	sub	fp, #12
0ab14                 | LR__0911
0ab14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0ab14     08 4E 05 F1 | 	add	fp, #8
0ab18     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab1c     08 4E 85 F1 | 	sub	fp, #8
0ab20     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0ab24     14 4E 05 A1 |  if_e	add	fp, #20
0ab28     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ab2c     14 4E 85 A1 |  if_e	sub	fp, #20
0ab30     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ab34     20 00 90 5D |  if_ne	jmp	#LR__0912
0ab38     0C 4E 05 F1 | 	add	fp, #12
0ab3c     A7 1E 02 FB | 	rdlong	local01, fp
0ab40     0C 4E 85 F1 | 	sub	fp, #12
0ab44     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab48     0F 61 12 FD | 	qdiv	muldivb_, local01
0ab4c     18 1E 62 FD | 	getqx	local01
0ab50     A7 1E 62 FC | 	wrlong	local01, fp
0ab54     E0 00 90 FD | 	jmp	#LR__0916
0ab58                 | LR__0912
0ab58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0ab58     08 4E 05 F1 | 	add	fp, #8
0ab5c     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab60     08 4E 85 F1 | 	sub	fp, #8
0ab64     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0ab68     14 4E 05 A1 |  if_e	add	fp, #20
0ab6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ab70     14 4E 85 A1 |  if_e	sub	fp, #20
0ab74     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ab78     2C 00 90 5D |  if_ne	jmp	#LR__0913
0ab7c     0C 4E 05 F1 | 	add	fp, #12
0ab80     A7 1E 02 FB | 	rdlong	local01, fp
0ab84     0C 4E 85 F1 | 	sub	fp, #12
0ab88     A7 60 02 FB | 	rdlong	muldivb_, fp
0ab8c     0F 61 12 FD | 	qdiv	muldivb_, local01
0ab90     18 1E 62 FD | 	getqx	local01
0ab94     A7 1E 62 FC | 	wrlong	local01, fp
0ab98     08 4E 05 F1 | 	add	fp, #8
0ab9c     A7 38 68 FC | 	wrlong	#28, fp
0aba0     08 4E 85 F1 | 	sub	fp, #8
0aba4     90 00 90 FD | 	jmp	#LR__0916
0aba8                 | LR__0913
0aba8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0aba8     08 4E 05 F1 | 	add	fp, #8
0abac     A7 60 02 FB | 	rdlong	muldivb_, fp
0abb0     08 4E 85 F1 | 	sub	fp, #8
0abb4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0abb8     14 4E 05 A1 |  if_e	add	fp, #20
0abbc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0abc0     14 4E 85 A1 |  if_e	sub	fp, #20
0abc4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0abc8     1C 00 90 5D |  if_ne	jmp	#LR__0914
0abcc     A7 5E 02 FB | 	rdlong	muldiva_, fp
0abd0     0C 4E 05 F1 | 	add	fp, #12
0abd4     A7 60 02 FB | 	rdlong	muldivb_, fp
0abd8     0C 4E 85 F1 | 	sub	fp, #12
0abdc     BA 00 A0 FD | 	call	#divide_
0abe0     A7 60 62 FC | 	wrlong	muldivb_, fp
0abe4     50 00 90 FD | 	jmp	#LR__0916
0abe8                 | LR__0914
0abe8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0abe8     08 4E 05 F1 | 	add	fp, #8
0abec     A7 60 02 FB | 	rdlong	muldivb_, fp
0abf0     08 4E 85 F1 | 	sub	fp, #8
0abf4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0abf8     14 4E 05 A1 |  if_e	add	fp, #20
0abfc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ac00     14 4E 85 A1 |  if_e	sub	fp, #20
0ac04     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ac08     1C 00 90 5D |  if_ne	jmp	#LR__0915
0ac0c     A7 5E 02 FB | 	rdlong	muldiva_, fp
0ac10     0C 4E 05 F1 | 	add	fp, #12
0ac14     A7 60 02 FB | 	rdlong	muldivb_, fp
0ac18     0C 4E 85 F1 | 	sub	fp, #12
0ac1c     BA 00 A0 FD | 	call	#divide_
0ac20     A7 60 62 FC | 	wrlong	muldivb_, fp
0ac24     10 00 90 FD | 	jmp	#LR__0916
0ac28                 | LR__0915
0ac28     A7 16 68 FC | 	wrlong	#11, fp
0ac2c     08 4E 05 F1 | 	add	fp, #8
0ac30     A7 FE 69 FC | 	wrlong	#255, fp
0ac34     08 4E 85 F1 | 	sub	fp, #8
0ac38                 | LR__0916
0ac38     A7 12 02 F6 | 	mov	arg01, fp
0ac3c     78 D4 BF FD | 	call	#_push
0ac40     A7 F0 03 F6 | 	mov	ptra, fp
0ac44     B2 00 A0 FD | 	call	#popregs_
0ac48                 | _do_div_ret
0ac48     2D 00 64 FD | 	ret
0ac4c                 | 
0ac4c                 | ' 
0ac4c                 | ' sub do_fdiv 
0ac4c                 | _do_fdiv
0ac4c     02 4A 05 F6 | 	mov	COUNT_, #2
0ac50     A8 00 A0 FD | 	call	#pushregs_
0ac54     18 F0 07 F1 | 	add	ptra, #24
0ac58     C4 D3 BF FD | 	call	#_pop
0ac5c     FD 14 02 F6 | 	mov	arg02, result1
0ac60     FE 12 02 F6 | 	mov	arg01, result2
0ac64     FF 1E 02 F6 | 	mov	local01, result3
0ac68     0C 4E 05 F1 | 	add	fp, #12
0ac6c     A7 14 62 FC | 	wrlong	arg02, fp
0ac70     04 4E 05 F1 | 	add	fp, #4
0ac74     A7 12 62 FC | 	wrlong	arg01, fp
0ac78     04 4E 05 F1 | 	add	fp, #4
0ac7c     A7 1E 62 FC | 	wrlong	local01, fp
0ac80     14 4E 85 F1 | 	sub	fp, #20
0ac84     98 D3 BF FD | 	call	#_pop
0ac88     A7 FA 61 FC | 	wrlong	result1, fp
0ac8c     04 4E 05 F1 | 	add	fp, #4
0ac90     A7 FC 61 FC | 	wrlong	result2, fp
0ac94     04 4E 05 F1 | 	add	fp, #4
0ac98     A7 FE 61 FC | 	wrlong	result3, fp
0ac9c                 | ' 
0ac9c                 | ' t2=pop()
0ac9c                 | ' t1=pop()
0ac9c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0ac9c     08 4E 85 F1 | 	sub	fp, #8
0aca0     1F FE 0D F2 | 	cmp	result3, #31 wz
0aca4     14 4E 05 51 |  if_ne	add	fp, #20
0aca8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0acac     14 4E 85 51 |  if_ne	sub	fp, #20
0acb0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0acb4     A7 14 68 AC |  if_e	wrlong	#10, fp
0acb8     08 4E 05 A1 |  if_e	add	fp, #8
0acbc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0acc0     08 4E 85 A1 |  if_e	sub	fp, #8
0acc4     38 01 90 AD |  if_e	jmp	#LR__0925
0acc8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0acc8     08 4E 05 F1 | 	add	fp, #8
0accc     A7 14 02 FB | 	rdlong	arg02, fp
0acd0     08 4E 85 F1 | 	sub	fp, #8
0acd4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0acd8     28 00 90 5D |  if_ne	jmp	#LR__0920
0acdc     08 4E 05 F1 | 	add	fp, #8
0ace0     A7 3C 68 FC | 	wrlong	#30, fp
0ace4     08 4E 85 F1 | 	sub	fp, #8
0ace8     A7 12 02 FB | 	rdlong	arg01, fp
0acec     09 13 52 F6 | 	abs	arg01, arg01 wc
0acf0     1F 20 C6 C9 |  if_b	decod	local02, #31
0acf4     00 20 06 36 |  if_ae	mov	local02, #0
0acf8     1C B4 B0 FD | 	call	#__system___float_fromuns
0acfc     10 FB 61 F5 | 	xor	result1, local02
0ad00     A7 FA 61 FC | 	wrlong	result1, fp
0ad04                 | LR__0920
0ad04                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0ad04     08 4E 05 F1 | 	add	fp, #8
0ad08     A7 14 02 FB | 	rdlong	arg02, fp
0ad0c     08 4E 85 F1 | 	sub	fp, #8
0ad10     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ad14     18 00 90 5D |  if_ne	jmp	#LR__0921
0ad18     08 4E 05 F1 | 	add	fp, #8
0ad1c     A7 3C 68 FC | 	wrlong	#30, fp
0ad20     08 4E 85 F1 | 	sub	fp, #8
0ad24     A7 12 02 FB | 	rdlong	arg01, fp
0ad28     EC B3 B0 FD | 	call	#__system___float_fromuns
0ad2c     A7 FA 61 FC | 	wrlong	result1, fp
0ad30                 | LR__0921
0ad30                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ad30     14 4E 05 F1 | 	add	fp, #20
0ad34     A7 14 02 FB | 	rdlong	arg02, fp
0ad38     14 4E 85 F1 | 	sub	fp, #20
0ad3c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ad40     34 00 90 5D |  if_ne	jmp	#LR__0922
0ad44     14 4E 05 F1 | 	add	fp, #20
0ad48     A7 3C 68 FC | 	wrlong	#30, fp
0ad4c     08 4E 85 F1 | 	sub	fp, #8
0ad50     A7 12 02 FB | 	rdlong	arg01, fp
0ad54     0C 4E 85 F1 | 	sub	fp, #12
0ad58     09 13 52 F6 | 	abs	arg01, arg01 wc
0ad5c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ad60     00 20 06 36 |  if_ae	mov	local02, #0
0ad64     B0 B3 B0 FD | 	call	#__system___float_fromuns
0ad68     10 FB 61 F5 | 	xor	result1, local02
0ad6c     0C 4E 05 F1 | 	add	fp, #12
0ad70     A7 FA 61 FC | 	wrlong	result1, fp
0ad74     0C 4E 85 F1 | 	sub	fp, #12
0ad78                 | LR__0922
0ad78                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ad78     14 4E 05 F1 | 	add	fp, #20
0ad7c     A7 14 02 FB | 	rdlong	arg02, fp
0ad80     14 4E 85 F1 | 	sub	fp, #20
0ad84     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ad88     24 00 90 5D |  if_ne	jmp	#LR__0923
0ad8c     14 4E 05 F1 | 	add	fp, #20
0ad90     A7 3C 68 FC | 	wrlong	#30, fp
0ad94     08 4E 85 F1 | 	sub	fp, #8
0ad98     A7 12 02 FB | 	rdlong	arg01, fp
0ad9c     0C 4E 85 F1 | 	sub	fp, #12
0ada0     74 B3 B0 FD | 	call	#__system___float_fromuns
0ada4     0C 4E 05 F1 | 	add	fp, #12
0ada8     A7 FA 61 FC | 	wrlong	result1, fp
0adac     0C 4E 85 F1 | 	sub	fp, #12
0adb0                 | LR__0923
0adb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0adb0     08 4E 05 F1 | 	add	fp, #8
0adb4     A7 14 02 FB | 	rdlong	arg02, fp
0adb8     08 4E 85 F1 | 	sub	fp, #8
0adbc     1E 14 0E F2 | 	cmp	arg02, #30 wz
0adc0     14 4E 05 A1 |  if_e	add	fp, #20
0adc4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0adc8     14 4E 85 A1 |  if_e	sub	fp, #20
0adcc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0add0     1C 00 90 5D |  if_ne	jmp	#LR__0924
0add4     A7 12 02 FB | 	rdlong	arg01, fp
0add8     0C 4E 05 F1 | 	add	fp, #12
0addc     A7 14 02 FB | 	rdlong	arg02, fp
0ade0     0C 4E 85 F1 | 	sub	fp, #12
0ade4     60 B8 B0 FD | 	call	#__system___float_div
0ade8     A7 FA 61 FC | 	wrlong	result1, fp
0adec     10 00 90 FD | 	jmp	#LR__0925
0adf0                 | LR__0924
0adf0     A7 16 68 FC | 	wrlong	#11, fp
0adf4     08 4E 05 F1 | 	add	fp, #8
0adf8     A7 FE 69 FC | 	wrlong	#255, fp
0adfc     08 4E 85 F1 | 	sub	fp, #8
0ae00                 | LR__0925
0ae00     A7 12 02 F6 | 	mov	arg01, fp
0ae04     B0 D2 BF FD | 	call	#_push
0ae08     A7 F0 03 F6 | 	mov	ptra, fp
0ae0c     B2 00 A0 FD | 	call	#popregs_
0ae10                 | _do_fdiv_ret
0ae10     2D 00 64 FD | 	ret
0ae14                 | 
0ae14                 | ' 
0ae14                 | ' 
0ae14                 | ' sub do_mod 
0ae14                 | _do_mod
0ae14     01 4A 05 F6 | 	mov	COUNT_, #1
0ae18     A8 00 A0 FD | 	call	#pushregs_
0ae1c     18 F0 07 F1 | 	add	ptra, #24
0ae20     FC D1 BF FD | 	call	#_pop
0ae24     FD 60 02 F6 | 	mov	muldivb_, result1
0ae28     FE 5E 02 F6 | 	mov	muldiva_, result2
0ae2c     FF 1E 02 F6 | 	mov	local01, result3
0ae30     0C 4E 05 F1 | 	add	fp, #12
0ae34     A7 60 62 FC | 	wrlong	muldivb_, fp
0ae38     04 4E 05 F1 | 	add	fp, #4
0ae3c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0ae40     04 4E 05 F1 | 	add	fp, #4
0ae44     A7 1E 62 FC | 	wrlong	local01, fp
0ae48     14 4E 85 F1 | 	sub	fp, #20
0ae4c     D0 D1 BF FD | 	call	#_pop
0ae50     A7 FA 61 FC | 	wrlong	result1, fp
0ae54     04 4E 05 F1 | 	add	fp, #4
0ae58     A7 FC 61 FC | 	wrlong	result2, fp
0ae5c     04 4E 05 F1 | 	add	fp, #4
0ae60     A7 FE 61 FC | 	wrlong	result3, fp
0ae64                 | ' 
0ae64                 | ' t2=pop()
0ae64                 | ' t1=pop()
0ae64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0ae64     08 4E 85 F1 | 	sub	fp, #8
0ae68     1F FE 0D F2 | 	cmp	result3, #31 wz
0ae6c     14 4E 05 51 |  if_ne	add	fp, #20
0ae70     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ae74     14 4E 85 51 |  if_ne	sub	fp, #20
0ae78     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0ae7c     A7 14 68 AC |  if_e	wrlong	#10, fp
0ae80     08 4E 05 A1 |  if_e	add	fp, #8
0ae84     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ae88     08 4E 85 A1 |  if_e	sub	fp, #8
0ae8c     90 01 90 AD |  if_e	jmp	#LR__0936
0ae90                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ae90     08 4E 05 F1 | 	add	fp, #8
0ae94     A7 60 02 FB | 	rdlong	muldivb_, fp
0ae98     08 4E 85 F1 | 	sub	fp, #8
0ae9c     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aea0     1C 00 90 5D |  if_ne	jmp	#LR__0930
0aea4     08 4E 05 F1 | 	add	fp, #8
0aea8     A7 38 68 FC | 	wrlong	#28, fp
0aeac     08 4E 85 F1 | 	sub	fp, #8
0aeb0     A7 12 02 FB | 	rdlong	arg01, fp
0aeb4     00 14 06 F6 | 	mov	arg02, #0
0aeb8     50 BA B0 FD | 	call	#__system___float_tointeger
0aebc     A7 FA 61 FC | 	wrlong	result1, fp
0aec0                 | LR__0930
0aec0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0aec0     14 4E 05 F1 | 	add	fp, #20
0aec4     A7 60 02 FB | 	rdlong	muldivb_, fp
0aec8     14 4E 85 F1 | 	sub	fp, #20
0aecc     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0aed0     28 00 90 5D |  if_ne	jmp	#LR__0931
0aed4     14 4E 05 F1 | 	add	fp, #20
0aed8     A7 38 68 FC | 	wrlong	#28, fp
0aedc     08 4E 85 F1 | 	sub	fp, #8
0aee0     A7 12 02 FB | 	rdlong	arg01, fp
0aee4     0C 4E 85 F1 | 	sub	fp, #12
0aee8     00 14 06 F6 | 	mov	arg02, #0
0aeec     1C BA B0 FD | 	call	#__system___float_tointeger
0aef0     0C 4E 05 F1 | 	add	fp, #12
0aef4     A7 FA 61 FC | 	wrlong	result1, fp
0aef8     0C 4E 85 F1 | 	sub	fp, #12
0aefc                 | LR__0931
0aefc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0aefc     08 4E 05 F1 | 	add	fp, #8
0af00     A7 60 02 FB | 	rdlong	muldivb_, fp
0af04     08 4E 85 F1 | 	sub	fp, #8
0af08     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0af0c     14 4E 05 A1 |  if_e	add	fp, #20
0af10     A7 1E 02 AB |  if_e	rdlong	local01, fp
0af14     14 4E 85 A1 |  if_e	sub	fp, #20
0af18     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0af1c     20 00 90 5D |  if_ne	jmp	#LR__0932
0af20     0C 4E 05 F1 | 	add	fp, #12
0af24     A7 1E 02 FB | 	rdlong	local01, fp
0af28     0C 4E 85 F1 | 	sub	fp, #12
0af2c     A7 60 02 FB | 	rdlong	muldivb_, fp
0af30     0F 61 12 FD | 	qdiv	muldivb_, local01
0af34     19 1E 62 FD | 	getqy	local01
0af38     A7 1E 62 FC | 	wrlong	local01, fp
0af3c     E0 00 90 FD | 	jmp	#LR__0936
0af40                 | LR__0932
0af40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0af40     08 4E 05 F1 | 	add	fp, #8
0af44     A7 60 02 FB | 	rdlong	muldivb_, fp
0af48     08 4E 85 F1 | 	sub	fp, #8
0af4c     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0af50     14 4E 05 A1 |  if_e	add	fp, #20
0af54     A7 1E 02 AB |  if_e	rdlong	local01, fp
0af58     14 4E 85 A1 |  if_e	sub	fp, #20
0af5c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0af60     2C 00 90 5D |  if_ne	jmp	#LR__0933
0af64     0C 4E 05 F1 | 	add	fp, #12
0af68     A7 1E 02 FB | 	rdlong	local01, fp
0af6c     0C 4E 85 F1 | 	sub	fp, #12
0af70     A7 60 02 FB | 	rdlong	muldivb_, fp
0af74     0F 61 12 FD | 	qdiv	muldivb_, local01
0af78     19 1E 62 FD | 	getqy	local01
0af7c     A7 1E 62 FC | 	wrlong	local01, fp
0af80     08 4E 05 F1 | 	add	fp, #8
0af84     A7 38 68 FC | 	wrlong	#28, fp
0af88     08 4E 85 F1 | 	sub	fp, #8
0af8c     90 00 90 FD | 	jmp	#LR__0936
0af90                 | LR__0933
0af90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0af90     08 4E 05 F1 | 	add	fp, #8
0af94     A7 60 02 FB | 	rdlong	muldivb_, fp
0af98     08 4E 85 F1 | 	sub	fp, #8
0af9c     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0afa0     14 4E 05 A1 |  if_e	add	fp, #20
0afa4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0afa8     14 4E 85 A1 |  if_e	sub	fp, #20
0afac     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0afb0     1C 00 90 5D |  if_ne	jmp	#LR__0934
0afb4     A7 5E 02 FB | 	rdlong	muldiva_, fp
0afb8     0C 4E 05 F1 | 	add	fp, #12
0afbc     A7 60 02 FB | 	rdlong	muldivb_, fp
0afc0     0C 4E 85 F1 | 	sub	fp, #12
0afc4     BA 00 A0 FD | 	call	#divide_
0afc8     A7 5E 62 FC | 	wrlong	muldiva_, fp
0afcc     50 00 90 FD | 	jmp	#LR__0936
0afd0                 | LR__0934
0afd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0afd0     08 4E 05 F1 | 	add	fp, #8
0afd4     A7 60 02 FB | 	rdlong	muldivb_, fp
0afd8     08 4E 85 F1 | 	sub	fp, #8
0afdc     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0afe0     14 4E 05 A1 |  if_e	add	fp, #20
0afe4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0afe8     14 4E 85 A1 |  if_e	sub	fp, #20
0afec     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0aff0     1C 00 90 5D |  if_ne	jmp	#LR__0935
0aff4     A7 5E 02 FB | 	rdlong	muldiva_, fp
0aff8     0C 4E 05 F1 | 	add	fp, #12
0affc     A7 60 02 FB | 	rdlong	muldivb_, fp
0b000     0C 4E 85 F1 | 	sub	fp, #12
0b004     BA 00 A0 FD | 	call	#divide_
0b008     A7 5E 62 FC | 	wrlong	muldiva_, fp
0b00c     10 00 90 FD | 	jmp	#LR__0936
0b010                 | LR__0935
0b010     A7 16 68 FC | 	wrlong	#11, fp
0b014     08 4E 05 F1 | 	add	fp, #8
0b018     A7 FE 69 FC | 	wrlong	#255, fp
0b01c     08 4E 85 F1 | 	sub	fp, #8
0b020                 | LR__0936
0b020     A7 12 02 F6 | 	mov	arg01, fp
0b024     90 D0 BF FD | 	call	#_push
0b028     A7 F0 03 F6 | 	mov	ptra, fp
0b02c     B2 00 A0 FD | 	call	#popregs_
0b030                 | _do_mod_ret
0b030     2D 00 64 FD | 	ret
0b034                 | 
0b034                 | ' 
0b034                 | ' sub do_shl 
0b034                 | _do_shl
0b034     03 4A 05 F6 | 	mov	COUNT_, #3
0b038     A8 00 A0 FD | 	call	#pushregs_
0b03c     18 F0 07 F1 | 	add	ptra, #24
0b040     DC CF BF FD | 	call	#_pop
0b044     FD 12 02 F6 | 	mov	arg01, result1
0b048     FE 1E 02 F6 | 	mov	local01, result2
0b04c     FF 20 02 F6 | 	mov	local02, result3
0b050     0C 4E 05 F1 | 	add	fp, #12
0b054     A7 12 62 FC | 	wrlong	arg01, fp
0b058     04 4E 05 F1 | 	add	fp, #4
0b05c     A7 1E 62 FC | 	wrlong	local01, fp
0b060     04 4E 05 F1 | 	add	fp, #4
0b064     A7 20 62 FC | 	wrlong	local02, fp
0b068     14 4E 85 F1 | 	sub	fp, #20
0b06c     B0 CF BF FD | 	call	#_pop
0b070     FF 22 02 F6 | 	mov	local03, result3
0b074     A7 FA 61 FC | 	wrlong	result1, fp
0b078     04 4E 05 F1 | 	add	fp, #4
0b07c     A7 FC 61 FC | 	wrlong	result2, fp
0b080     04 4E 05 F1 | 	add	fp, #4
0b084     A7 22 62 FC | 	wrlong	local03, fp
0b088                 | ' 
0b088                 | ' t2=pop()
0b088                 | ' t1=pop()
0b088                 | ' 
0b088                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0b088     08 4E 85 F1 | 	sub	fp, #8
0b08c     1C 22 0E F2 | 	cmp	local03, #28 wz
0b090     A7 22 02 AB |  if_e	rdlong	local03, fp
0b094     A7 22 62 AC |  if_e	wrlong	local03, fp
0b098     08 4E 05 A1 |  if_e	add	fp, #8
0b09c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0b0a0     08 4E 85 A1 |  if_e	sub	fp, #8
0b0a4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0b0a4     14 4E 05 F1 | 	add	fp, #20
0b0a8     A7 22 02 FB | 	rdlong	local03, fp
0b0ac     14 4E 85 F1 | 	sub	fp, #20
0b0b0     1C 22 0E F2 | 	cmp	local03, #28 wz
0b0b4     18 00 90 5D |  if_ne	jmp	#LR__0940
0b0b8     0C 4E 05 F1 | 	add	fp, #12
0b0bc     A7 22 02 FB | 	rdlong	local03, fp
0b0c0     A7 22 62 FC | 	wrlong	local03, fp
0b0c4     08 4E 05 F1 | 	add	fp, #8
0b0c8     A7 3A 68 FC | 	wrlong	#29, fp
0b0cc     14 4E 85 F1 | 	sub	fp, #20
0b0d0                 | LR__0940
0b0d0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0b0d0     08 4E 05 F1 | 	add	fp, #8
0b0d4     A7 22 02 FB | 	rdlong	local03, fp
0b0d8     08 4E 85 F1 | 	sub	fp, #8
0b0dc     1F 22 0E F2 | 	cmp	local03, #31 wz
0b0e0     14 4E 05 51 |  if_ne	add	fp, #20
0b0e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0b0e8     14 4E 85 51 |  if_ne	sub	fp, #20
0b0ec     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0b0f0     08 4E 05 51 |  if_ne	add	fp, #8
0b0f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b0f8     08 4E 85 51 |  if_ne	sub	fp, #8
0b0fc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0b100     14 4E 05 51 |  if_ne	add	fp, #20
0b104     14 4E 85 51 |  if_ne	sub	fp, #20
0b108     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0b10c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0b110     08 4E 05 A1 |  if_e	add	fp, #8
0b114     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b118     08 4E 85 A1 |  if_e	sub	fp, #8
0b11c     18 00 90 AD |  if_e	jmp	#LR__0941
0b120     A7 22 02 FB | 	rdlong	local03, fp
0b124     0C 4E 05 F1 | 	add	fp, #12
0b128     A7 1E 02 FB | 	rdlong	local01, fp
0b12c     0C 4E 85 F1 | 	sub	fp, #12
0b130     0F 23 62 F0 | 	shl	local03, local01
0b134     A7 22 62 FC | 	wrlong	local03, fp
0b138                 | LR__0941
0b138     A7 12 02 F6 | 	mov	arg01, fp
0b13c     78 CF BF FD | 	call	#_push
0b140     A7 F0 03 F6 | 	mov	ptra, fp
0b144     B2 00 A0 FD | 	call	#popregs_
0b148                 | _do_shl_ret
0b148     2D 00 64 FD | 	ret
0b14c                 | 
0b14c                 | ' 
0b14c                 | ' sub do_shr 
0b14c                 | _do_shr
0b14c     03 4A 05 F6 | 	mov	COUNT_, #3
0b150     A8 00 A0 FD | 	call	#pushregs_
0b154     18 F0 07 F1 | 	add	ptra, #24
0b158     C4 CE BF FD | 	call	#_pop
0b15c     FD 12 02 F6 | 	mov	arg01, result1
0b160     FE 1E 02 F6 | 	mov	local01, result2
0b164     FF 20 02 F6 | 	mov	local02, result3
0b168     0C 4E 05 F1 | 	add	fp, #12
0b16c     A7 12 62 FC | 	wrlong	arg01, fp
0b170     04 4E 05 F1 | 	add	fp, #4
0b174     A7 1E 62 FC | 	wrlong	local01, fp
0b178     04 4E 05 F1 | 	add	fp, #4
0b17c     A7 20 62 FC | 	wrlong	local02, fp
0b180     14 4E 85 F1 | 	sub	fp, #20
0b184     98 CE BF FD | 	call	#_pop
0b188     FF 22 02 F6 | 	mov	local03, result3
0b18c     A7 FA 61 FC | 	wrlong	result1, fp
0b190     04 4E 05 F1 | 	add	fp, #4
0b194     A7 FC 61 FC | 	wrlong	result2, fp
0b198     04 4E 05 F1 | 	add	fp, #4
0b19c     A7 22 62 FC | 	wrlong	local03, fp
0b1a0                 | ' t2=pop()
0b1a0                 | ' t1=pop()
0b1a0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0b1a0     08 4E 85 F1 | 	sub	fp, #8
0b1a4     1C 22 0E F2 | 	cmp	local03, #28 wz
0b1a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b1ac     A7 22 62 AC |  if_e	wrlong	local03, fp
0b1b0     08 4E 05 A1 |  if_e	add	fp, #8
0b1b4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0b1b8     08 4E 85 A1 |  if_e	sub	fp, #8
0b1bc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0b1bc     14 4E 05 F1 | 	add	fp, #20
0b1c0     A7 22 02 FB | 	rdlong	local03, fp
0b1c4     14 4E 85 F1 | 	sub	fp, #20
0b1c8     1C 22 0E F2 | 	cmp	local03, #28 wz
0b1cc     18 00 90 5D |  if_ne	jmp	#LR__0950
0b1d0     0C 4E 05 F1 | 	add	fp, #12
0b1d4     A7 22 02 FB | 	rdlong	local03, fp
0b1d8     A7 22 62 FC | 	wrlong	local03, fp
0b1dc     08 4E 05 F1 | 	add	fp, #8
0b1e0     A7 3A 68 FC | 	wrlong	#29, fp
0b1e4     14 4E 85 F1 | 	sub	fp, #20
0b1e8                 | LR__0950
0b1e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0b1e8     08 4E 05 F1 | 	add	fp, #8
0b1ec     A7 22 02 FB | 	rdlong	local03, fp
0b1f0     08 4E 85 F1 | 	sub	fp, #8
0b1f4     1F 22 0E F2 | 	cmp	local03, #31 wz
0b1f8     14 4E 05 51 |  if_ne	add	fp, #20
0b1fc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0b200     14 4E 85 51 |  if_ne	sub	fp, #20
0b204     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0b208     08 4E 05 51 |  if_ne	add	fp, #8
0b20c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b210     08 4E 85 51 |  if_ne	sub	fp, #8
0b214     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0b218     14 4E 05 51 |  if_ne	add	fp, #20
0b21c     14 4E 85 51 |  if_ne	sub	fp, #20
0b220     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0b224     A7 0C 68 AC |  if_e	wrlong	#6, fp
0b228     08 4E 05 A1 |  if_e	add	fp, #8
0b22c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b230     08 4E 85 A1 |  if_e	sub	fp, #8
0b234     18 00 90 AD |  if_e	jmp	#LR__0951
0b238     A7 22 02 FB | 	rdlong	local03, fp
0b23c     0C 4E 05 F1 | 	add	fp, #12
0b240     A7 1E 02 FB | 	rdlong	local01, fp
0b244     0C 4E 85 F1 | 	sub	fp, #12
0b248     0F 23 42 F0 | 	shr	local03, local01
0b24c     A7 22 62 FC | 	wrlong	local03, fp
0b250                 | LR__0951
0b250     A7 12 02 F6 | 	mov	arg01, fp
0b254     60 CE BF FD | 	call	#_push
0b258     A7 F0 03 F6 | 	mov	ptra, fp
0b25c     B2 00 A0 FD | 	call	#popregs_
0b260                 | _do_shr_ret
0b260     2D 00 64 FD | 	ret
0b264                 | 
0b264                 | ' 
0b264                 | ' sub do_power 
0b264                 | _do_power
0b264     02 4A 05 F6 | 	mov	COUNT_, #2
0b268     A8 00 A0 FD | 	call	#pushregs_
0b26c     18 F0 07 F1 | 	add	ptra, #24
0b270     AC CD BF FD | 	call	#_pop
0b274     FD 14 02 F6 | 	mov	arg02, result1
0b278     FE 12 02 F6 | 	mov	arg01, result2
0b27c     FF 1E 02 F6 | 	mov	local01, result3
0b280     0C 4E 05 F1 | 	add	fp, #12
0b284     A7 14 62 FC | 	wrlong	arg02, fp
0b288     04 4E 05 F1 | 	add	fp, #4
0b28c     A7 12 62 FC | 	wrlong	arg01, fp
0b290     04 4E 05 F1 | 	add	fp, #4
0b294     A7 1E 62 FC | 	wrlong	local01, fp
0b298     14 4E 85 F1 | 	sub	fp, #20
0b29c     80 CD BF FD | 	call	#_pop
0b2a0     A7 FA 61 FC | 	wrlong	result1, fp
0b2a4     04 4E 05 F1 | 	add	fp, #4
0b2a8     A7 FC 61 FC | 	wrlong	result2, fp
0b2ac     04 4E 05 F1 | 	add	fp, #4
0b2b0     A7 FE 61 FC | 	wrlong	result3, fp
0b2b4                 | ' t2=pop()
0b2b4                 | ' t1=pop()
0b2b4                 | ' 
0b2b4                 | ' 
0b2b4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0b2b4     08 4E 85 F1 | 	sub	fp, #8
0b2b8     1F FE 0D F2 | 	cmp	result3, #31 wz
0b2bc     14 4E 05 51 |  if_ne	add	fp, #20
0b2c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b2c4     14 4E 85 51 |  if_ne	sub	fp, #20
0b2c8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0b2cc     A7 18 68 AC |  if_e	wrlong	#12, fp
0b2d0     08 4E 05 A1 |  if_e	add	fp, #8
0b2d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b2d8     08 4E 85 A1 |  if_e	sub	fp, #8
0b2dc     38 01 90 AD |  if_e	jmp	#LR__0965
0b2e0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0b2e0     08 4E 05 F1 | 	add	fp, #8
0b2e4     A7 14 02 FB | 	rdlong	arg02, fp
0b2e8     08 4E 85 F1 | 	sub	fp, #8
0b2ec     1C 14 0E F2 | 	cmp	arg02, #28 wz
0b2f0     28 00 90 5D |  if_ne	jmp	#LR__0960
0b2f4     08 4E 05 F1 | 	add	fp, #8
0b2f8     A7 3C 68 FC | 	wrlong	#30, fp
0b2fc     08 4E 85 F1 | 	sub	fp, #8
0b300     A7 12 02 FB | 	rdlong	arg01, fp
0b304     09 13 52 F6 | 	abs	arg01, arg01 wc
0b308     1F 20 C6 C9 |  if_b	decod	local02, #31
0b30c     00 20 06 36 |  if_ae	mov	local02, #0
0b310     04 AE B0 FD | 	call	#__system___float_fromuns
0b314     10 FB 61 F5 | 	xor	result1, local02
0b318     A7 FA 61 FC | 	wrlong	result1, fp
0b31c                 | LR__0960
0b31c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0b31c     08 4E 05 F1 | 	add	fp, #8
0b320     A7 14 02 FB | 	rdlong	arg02, fp
0b324     08 4E 85 F1 | 	sub	fp, #8
0b328     1D 14 0E F2 | 	cmp	arg02, #29 wz
0b32c     18 00 90 5D |  if_ne	jmp	#LR__0961
0b330     08 4E 05 F1 | 	add	fp, #8
0b334     A7 3C 68 FC | 	wrlong	#30, fp
0b338     08 4E 85 F1 | 	sub	fp, #8
0b33c     A7 12 02 FB | 	rdlong	arg01, fp
0b340     D4 AD B0 FD | 	call	#__system___float_fromuns
0b344     A7 FA 61 FC | 	wrlong	result1, fp
0b348                 | LR__0961
0b348                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0b348     14 4E 05 F1 | 	add	fp, #20
0b34c     A7 14 02 FB | 	rdlong	arg02, fp
0b350     14 4E 85 F1 | 	sub	fp, #20
0b354     1C 14 0E F2 | 	cmp	arg02, #28 wz
0b358     34 00 90 5D |  if_ne	jmp	#LR__0962
0b35c     14 4E 05 F1 | 	add	fp, #20
0b360     A7 3C 68 FC | 	wrlong	#30, fp
0b364     08 4E 85 F1 | 	sub	fp, #8
0b368     A7 12 02 FB | 	rdlong	arg01, fp
0b36c     0C 4E 85 F1 | 	sub	fp, #12
0b370     09 13 52 F6 | 	abs	arg01, arg01 wc
0b374     1F 20 C6 C9 |  if_b	decod	local02, #31
0b378     00 20 06 36 |  if_ae	mov	local02, #0
0b37c     98 AD B0 FD | 	call	#__system___float_fromuns
0b380     10 FB 61 F5 | 	xor	result1, local02
0b384     0C 4E 05 F1 | 	add	fp, #12
0b388     A7 FA 61 FC | 	wrlong	result1, fp
0b38c     0C 4E 85 F1 | 	sub	fp, #12
0b390                 | LR__0962
0b390                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0b390     14 4E 05 F1 | 	add	fp, #20
0b394     A7 14 02 FB | 	rdlong	arg02, fp
0b398     14 4E 85 F1 | 	sub	fp, #20
0b39c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0b3a0     24 00 90 5D |  if_ne	jmp	#LR__0963
0b3a4     14 4E 05 F1 | 	add	fp, #20
0b3a8     A7 3C 68 FC | 	wrlong	#30, fp
0b3ac     08 4E 85 F1 | 	sub	fp, #8
0b3b0     A7 12 02 FB | 	rdlong	arg01, fp
0b3b4     0C 4E 85 F1 | 	sub	fp, #12
0b3b8     5C AD B0 FD | 	call	#__system___float_fromuns
0b3bc     0C 4E 05 F1 | 	add	fp, #12
0b3c0     A7 FA 61 FC | 	wrlong	result1, fp
0b3c4     0C 4E 85 F1 | 	sub	fp, #12
0b3c8                 | LR__0963
0b3c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0b3c8     08 4E 05 F1 | 	add	fp, #8
0b3cc     A7 14 02 FB | 	rdlong	arg02, fp
0b3d0     08 4E 85 F1 | 	sub	fp, #8
0b3d4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0b3d8     14 4E 05 A1 |  if_e	add	fp, #20
0b3dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0b3e0     14 4E 85 A1 |  if_e	sub	fp, #20
0b3e4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0b3e8     1C 00 90 5D |  if_ne	jmp	#LR__0964
0b3ec     A7 12 02 FB | 	rdlong	arg01, fp
0b3f0     0C 4E 05 F1 | 	add	fp, #12
0b3f4     A7 14 02 FB | 	rdlong	arg02, fp
0b3f8     0C 4E 85 F1 | 	sub	fp, #12
0b3fc     B0 BC B0 FD | 	call	#__system____builtin_powf
0b400     A7 FA 61 FC | 	wrlong	result1, fp
0b404     10 00 90 FD | 	jmp	#LR__0965
0b408                 | LR__0964
0b408     A7 1A 68 FC | 	wrlong	#13, fp
0b40c     08 4E 05 F1 | 	add	fp, #8
0b410     A7 FE 69 FC | 	wrlong	#255, fp
0b414     08 4E 85 F1 | 	sub	fp, #8
0b418                 | LR__0965
0b418     A7 12 02 F6 | 	mov	arg01, fp
0b41c     98 CC BF FD | 	call	#_push
0b420     A7 F0 03 F6 | 	mov	ptra, fp
0b424     B2 00 A0 FD | 	call	#popregs_
0b428                 | _do_power_ret
0b428     2D 00 64 FD | 	ret
0b42c                 | 
0b42c                 | ' 
0b42c                 | ' 
0b42c                 | ' sub do_eq
0b42c                 | _do_eq
0b42c     05 4A 05 F6 | 	mov	COUNT_, #5
0b430     A8 00 A0 FD | 	call	#pushregs_
0b434     18 F0 07 F1 | 	add	ptra, #24
0b438     E4 CB BF FD | 	call	#_pop
0b43c     FD 1E 02 F6 | 	mov	local01, result1
0b440     FE 20 02 F6 | 	mov	local02, result2
0b444     FF 22 02 F6 | 	mov	local03, result3
0b448     0C 4E 05 F1 | 	add	fp, #12
0b44c     A7 1E 62 FC | 	wrlong	local01, fp
0b450     04 4E 05 F1 | 	add	fp, #4
0b454     A7 20 62 FC | 	wrlong	local02, fp
0b458     04 4E 05 F1 | 	add	fp, #4
0b45c     A7 22 62 FC | 	wrlong	local03, fp
0b460     14 4E 85 F1 | 	sub	fp, #20
0b464     B8 CB BF FD | 	call	#_pop
0b468     FF 22 02 F6 | 	mov	local03, result3
0b46c     A7 FA 61 FC | 	wrlong	result1, fp
0b470     04 4E 05 F1 | 	add	fp, #4
0b474     A7 FC 61 FC | 	wrlong	result2, fp
0b478     04 4E 05 F1 | 	add	fp, #4
0b47c     A7 22 62 FC | 	wrlong	local03, fp
0b480                 | ' t2=pop()
0b480                 | ' t1=pop()
0b480                 | ' 
0b480                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0b480     08 4E 85 F1 | 	sub	fp, #8
0b484     1F 22 0E F2 | 	cmp	local03, #31 wz
0b488     14 4E 05 A1 |  if_e	add	fp, #20
0b48c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b490     14 4E 85 A1 |  if_e	sub	fp, #20
0b494     12 23 02 A6 |  if_e	mov	local03, local04
0b498     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b49c     28 00 90 5D |  if_ne	jmp	#LR__0970
0b4a0     00 1E 06 F6 | 	mov	local01, #0
0b4a4     A7 12 02 FB | 	rdlong	arg01, fp
0b4a8     0C 4E 05 F1 | 	add	fp, #12
0b4ac     A7 14 02 FB | 	rdlong	arg02, fp
0b4b0     0C 4E 85 F1 | 	sub	fp, #12
0b4b4     68 86 B0 FD | 	call	#__system___string_cmp
0b4b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4bc     00 1E 26 A6 |  if_e	not	local01, #0
0b4c0     A7 1E 62 FC | 	wrlong	local01, fp
0b4c4     04 03 90 FD | 	jmp	#LR__0980
0b4c8                 | LR__0970
0b4c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0b4c8     08 4E 05 F1 | 	add	fp, #8
0b4cc     A7 1E 02 FB | 	rdlong	local01, fp
0b4d0     08 4E 85 F1 | 	sub	fp, #8
0b4d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b4d8     14 4E 05 A1 |  if_e	add	fp, #20
0b4dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b4e0     14 4E 85 A1 |  if_e	sub	fp, #20
0b4e4     12 23 02 A6 |  if_e	mov	local03, local04
0b4e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b4ec     2C 00 90 5D |  if_ne	jmp	#LR__0971
0b4f0     00 1E 06 F6 | 	mov	local01, #0
0b4f4     A7 12 02 FB | 	rdlong	arg01, fp
0b4f8     0C 4E 05 F1 | 	add	fp, #12
0b4fc     A7 14 02 FB | 	rdlong	arg02, fp
0b500     0C 4E 85 F1 | 	sub	fp, #12
0b504     01 16 06 F6 | 	mov	arg03, #1
0b508     6C B3 B0 FD | 	call	#__system___float_cmp
0b50c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b510     00 1E 26 A6 |  if_e	not	local01, #0
0b514     A7 1E 62 FC | 	wrlong	local01, fp
0b518     B0 02 90 FD | 	jmp	#LR__0980
0b51c                 | LR__0971
0b51c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0b51c     08 4E 05 F1 | 	add	fp, #8
0b520     A7 1E 02 FB | 	rdlong	local01, fp
0b524     08 4E 85 F1 | 	sub	fp, #8
0b528     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b52c     14 4E 05 A1 |  if_e	add	fp, #20
0b530     A7 24 02 AB |  if_e	rdlong	local04, fp
0b534     14 4E 85 A1 |  if_e	sub	fp, #20
0b538     12 23 02 A6 |  if_e	mov	local03, local04
0b53c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b540     48 00 90 5D |  if_ne	jmp	#LR__0972
0b544     00 1E 06 F6 | 	mov	local01, #0
0b548     A7 20 02 FB | 	rdlong	local02, fp
0b54c     0C 4E 05 F1 | 	add	fp, #12
0b550     A7 12 02 FB | 	rdlong	arg01, fp
0b554     0C 4E 85 F1 | 	sub	fp, #12
0b558     09 13 52 F6 | 	abs	arg01, arg01 wc
0b55c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b560     00 26 06 36 |  if_ae	mov	local05, #0
0b564     B0 AB B0 FD | 	call	#__system___float_fromuns
0b568     13 FB 61 F5 | 	xor	result1, local05
0b56c     FD 14 02 F6 | 	mov	arg02, result1
0b570     10 13 02 F6 | 	mov	arg01, local02
0b574     01 16 06 F6 | 	mov	arg03, #1
0b578     FC B2 B0 FD | 	call	#__system___float_cmp
0b57c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b580     00 1E 26 A6 |  if_e	not	local01, #0
0b584     A7 1E 62 FC | 	wrlong	local01, fp
0b588     40 02 90 FD | 	jmp	#LR__0980
0b58c                 | LR__0972
0b58c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0b58c     08 4E 05 F1 | 	add	fp, #8
0b590     A7 1E 02 FB | 	rdlong	local01, fp
0b594     08 4E 85 F1 | 	sub	fp, #8
0b598     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b59c     14 4E 05 A1 |  if_e	add	fp, #20
0b5a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b5a4     14 4E 85 A1 |  if_e	sub	fp, #20
0b5a8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0b5ac     38 00 90 5D |  if_ne	jmp	#LR__0973
0b5b0     00 1E 06 F6 | 	mov	local01, #0
0b5b4     A7 20 02 FB | 	rdlong	local02, fp
0b5b8     0C 4E 05 F1 | 	add	fp, #12
0b5bc     A7 12 02 FB | 	rdlong	arg01, fp
0b5c0     0C 4E 85 F1 | 	sub	fp, #12
0b5c4     50 AB B0 FD | 	call	#__system___float_fromuns
0b5c8     FD 14 02 F6 | 	mov	arg02, result1
0b5cc     10 13 02 F6 | 	mov	arg01, local02
0b5d0     01 16 06 F6 | 	mov	arg03, #1
0b5d4     A0 B2 B0 FD | 	call	#__system___float_cmp
0b5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5dc     00 1E 26 A6 |  if_e	not	local01, #0
0b5e0     A7 1E 62 FC | 	wrlong	local01, fp
0b5e4     E4 01 90 FD | 	jmp	#LR__0980
0b5e8                 | LR__0973
0b5e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0b5e8     08 4E 05 F1 | 	add	fp, #8
0b5ec     A7 1E 02 FB | 	rdlong	local01, fp
0b5f0     08 4E 85 F1 | 	sub	fp, #8
0b5f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b5f8     14 4E 05 A1 |  if_e	add	fp, #20
0b5fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0b600     14 4E 85 A1 |  if_e	sub	fp, #20
0b604     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b608     44 00 90 5D |  if_ne	jmp	#LR__0974
0b60c     00 1E 06 F6 | 	mov	local01, #0
0b610     A7 12 02 FB | 	rdlong	arg01, fp
0b614     09 13 52 F6 | 	abs	arg01, arg01 wc
0b618     1F 26 C6 C9 |  if_b	decod	local05, #31
0b61c     00 26 06 36 |  if_ae	mov	local05, #0
0b620     F4 AA B0 FD | 	call	#__system___float_fromuns
0b624     13 FB 61 F5 | 	xor	result1, local05
0b628     FD 12 02 F6 | 	mov	arg01, result1
0b62c     0C 4E 05 F1 | 	add	fp, #12
0b630     A7 14 02 FB | 	rdlong	arg02, fp
0b634     0C 4E 85 F1 | 	sub	fp, #12
0b638     01 16 06 F6 | 	mov	arg03, #1
0b63c     38 B2 B0 FD | 	call	#__system___float_cmp
0b640     00 FA 0D F2 | 	cmp	result1, #0 wz
0b644     00 1E 26 A6 |  if_e	not	local01, #0
0b648     A7 1E 62 FC | 	wrlong	local01, fp
0b64c     7C 01 90 FD | 	jmp	#LR__0980
0b650                 | LR__0974
0b650                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0b650     08 4E 05 F1 | 	add	fp, #8
0b654     A7 1E 02 FB | 	rdlong	local01, fp
0b658     08 4E 85 F1 | 	sub	fp, #8
0b65c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b660     14 4E 05 A1 |  if_e	add	fp, #20
0b664     A7 22 02 AB |  if_e	rdlong	local03, fp
0b668     14 4E 85 A1 |  if_e	sub	fp, #20
0b66c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b670     24 00 90 5D |  if_ne	jmp	#LR__0975
0b674     00 1E 06 F6 | 	mov	local01, #0
0b678     A7 20 02 FB | 	rdlong	local02, fp
0b67c     0C 4E 05 F1 | 	add	fp, #12
0b680     A7 22 02 FB | 	rdlong	local03, fp
0b684     0C 4E 85 F1 | 	sub	fp, #12
0b688     11 21 0A F2 | 	cmp	local02, local03 wz
0b68c     01 1E 66 A6 |  if_e	neg	local01, #1
0b690     A7 1E 62 FC | 	wrlong	local01, fp
0b694     34 01 90 FD | 	jmp	#LR__0980
0b698                 | LR__0975
0b698                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0b698     08 4E 05 F1 | 	add	fp, #8
0b69c     A7 1E 02 FB | 	rdlong	local01, fp
0b6a0     08 4E 85 F1 | 	sub	fp, #8
0b6a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b6a8     14 4E 05 A1 |  if_e	add	fp, #20
0b6ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6b0     14 4E 85 A1 |  if_e	sub	fp, #20
0b6b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b6b8     24 00 90 5D |  if_ne	jmp	#LR__0976
0b6bc     00 1E 06 F6 | 	mov	local01, #0
0b6c0     A7 20 02 FB | 	rdlong	local02, fp
0b6c4     0C 4E 05 F1 | 	add	fp, #12
0b6c8     A7 22 02 FB | 	rdlong	local03, fp
0b6cc     0C 4E 85 F1 | 	sub	fp, #12
0b6d0     11 21 0A F2 | 	cmp	local02, local03 wz
0b6d4     01 1E 66 A6 |  if_e	neg	local01, #1
0b6d8     A7 1E 62 FC | 	wrlong	local01, fp
0b6dc     EC 00 90 FD | 	jmp	#LR__0980
0b6e0                 | LR__0976
0b6e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0b6e0     08 4E 05 F1 | 	add	fp, #8
0b6e4     A7 1E 02 FB | 	rdlong	local01, fp
0b6e8     08 4E 85 F1 | 	sub	fp, #8
0b6ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b6f0     14 4E 05 A1 |  if_e	add	fp, #20
0b6f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6f8     14 4E 85 A1 |  if_e	sub	fp, #20
0b6fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b700     34 00 90 5D |  if_ne	jmp	#LR__0977
0b704     00 1E 06 F6 | 	mov	local01, #0
0b708     A7 12 02 FB | 	rdlong	arg01, fp
0b70c     08 AA B0 FD | 	call	#__system___float_fromuns
0b710     FD 12 02 F6 | 	mov	arg01, result1
0b714     0C 4E 05 F1 | 	add	fp, #12
0b718     A7 14 02 FB | 	rdlong	arg02, fp
0b71c     0C 4E 85 F1 | 	sub	fp, #12
0b720     01 16 06 F6 | 	mov	arg03, #1
0b724     50 B1 B0 FD | 	call	#__system___float_cmp
0b728     00 FA 0D F2 | 	cmp	result1, #0 wz
0b72c     00 1E 26 A6 |  if_e	not	local01, #0
0b730     A7 1E 62 FC | 	wrlong	local01, fp
0b734     94 00 90 FD | 	jmp	#LR__0980
0b738                 | LR__0977
0b738                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0b738     08 4E 05 F1 | 	add	fp, #8
0b73c     A7 1E 02 FB | 	rdlong	local01, fp
0b740     08 4E 85 F1 | 	sub	fp, #8
0b744     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b748     14 4E 05 A1 |  if_e	add	fp, #20
0b74c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b750     14 4E 85 A1 |  if_e	sub	fp, #20
0b754     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b758     24 00 90 5D |  if_ne	jmp	#LR__0978
0b75c     00 1E 06 F6 | 	mov	local01, #0
0b760     A7 20 02 FB | 	rdlong	local02, fp
0b764     0C 4E 05 F1 | 	add	fp, #12
0b768     A7 22 02 FB | 	rdlong	local03, fp
0b76c     0C 4E 85 F1 | 	sub	fp, #12
0b770     11 21 0A F2 | 	cmp	local02, local03 wz
0b774     01 1E 66 A6 |  if_e	neg	local01, #1
0b778     A7 1E 62 FC | 	wrlong	local01, fp
0b77c     4C 00 90 FD | 	jmp	#LR__0980
0b780                 | LR__0978
0b780                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0b780     08 4E 05 F1 | 	add	fp, #8
0b784     A7 1E 02 FB | 	rdlong	local01, fp
0b788     08 4E 85 F1 | 	sub	fp, #8
0b78c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b790     14 4E 05 A1 |  if_e	add	fp, #20
0b794     A7 22 02 AB |  if_e	rdlong	local03, fp
0b798     14 4E 85 A1 |  if_e	sub	fp, #20
0b79c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b7a0     24 00 90 5D |  if_ne	jmp	#LR__0979
0b7a4     00 1E 06 F6 | 	mov	local01, #0
0b7a8     A7 20 02 FB | 	rdlong	local02, fp
0b7ac     0C 4E 05 F1 | 	add	fp, #12
0b7b0     A7 22 02 FB | 	rdlong	local03, fp
0b7b4     0C 4E 85 F1 | 	sub	fp, #12
0b7b8     11 21 0A F2 | 	cmp	local02, local03 wz
0b7bc     01 1E 66 A6 |  if_e	neg	local01, #1
0b7c0     A7 1E 62 FC | 	wrlong	local01, fp
0b7c4     04 00 90 FD | 	jmp	#LR__0980
0b7c8                 | LR__0979
0b7c8     A7 00 68 FC | 	wrlong	#0, fp
0b7cc                 | LR__0980
0b7cc     08 4E 05 F1 | 	add	fp, #8
0b7d0     A7 38 68 FC | 	wrlong	#28, fp
0b7d4     08 4E 85 F1 | 	sub	fp, #8
0b7d8     A7 12 02 F6 | 	mov	arg01, fp
0b7dc     D8 C8 BF FD | 	call	#_push
0b7e0     A7 F0 03 F6 | 	mov	ptra, fp
0b7e4     B2 00 A0 FD | 	call	#popregs_
0b7e8                 | _do_eq_ret
0b7e8     2D 00 64 FD | 	ret
0b7ec                 | 
0b7ec                 | ' 
0b7ec                 | ' sub do_gt
0b7ec                 | _do_gt
0b7ec     05 4A 05 F6 | 	mov	COUNT_, #5
0b7f0     A8 00 A0 FD | 	call	#pushregs_
0b7f4     18 F0 07 F1 | 	add	ptra, #24
0b7f8     24 C8 BF FD | 	call	#_pop
0b7fc     FD 1E 02 F6 | 	mov	local01, result1
0b800     FE 20 02 F6 | 	mov	local02, result2
0b804     FF 22 02 F6 | 	mov	local03, result3
0b808     0C 4E 05 F1 | 	add	fp, #12
0b80c     A7 1E 62 FC | 	wrlong	local01, fp
0b810     04 4E 05 F1 | 	add	fp, #4
0b814     A7 20 62 FC | 	wrlong	local02, fp
0b818     04 4E 05 F1 | 	add	fp, #4
0b81c     A7 22 62 FC | 	wrlong	local03, fp
0b820     14 4E 85 F1 | 	sub	fp, #20
0b824     F8 C7 BF FD | 	call	#_pop
0b828     FF 22 02 F6 | 	mov	local03, result3
0b82c     A7 FA 61 FC | 	wrlong	result1, fp
0b830     04 4E 05 F1 | 	add	fp, #4
0b834     A7 FC 61 FC | 	wrlong	result2, fp
0b838     04 4E 05 F1 | 	add	fp, #4
0b83c     A7 22 62 FC | 	wrlong	local03, fp
0b840                 | ' t2=pop()
0b840                 | ' t1=pop()
0b840                 | ' 
0b840                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0b840     08 4E 85 F1 | 	sub	fp, #8
0b844     1F 22 0E F2 | 	cmp	local03, #31 wz
0b848     14 4E 05 A1 |  if_e	add	fp, #20
0b84c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b850     14 4E 85 A1 |  if_e	sub	fp, #20
0b854     12 23 02 A6 |  if_e	mov	local03, local04
0b858     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b85c     28 00 90 5D |  if_ne	jmp	#LR__0990
0b860     00 1E 06 F6 | 	mov	local01, #0
0b864     A7 12 02 FB | 	rdlong	arg01, fp
0b868     0C 4E 05 F1 | 	add	fp, #12
0b86c     A7 14 02 FB | 	rdlong	arg02, fp
0b870     0C 4E 85 F1 | 	sub	fp, #12
0b874     A8 82 B0 FD | 	call	#__system___string_cmp
0b878     01 FA 55 F2 | 	cmps	result1, #1 wc
0b87c     00 1E 26 36 |  if_ae	not	local01, #0
0b880     A7 1E 62 FC | 	wrlong	local01, fp
0b884     04 03 90 FD | 	jmp	#LR__1000
0b888                 | LR__0990
0b888                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0b888     08 4E 05 F1 | 	add	fp, #8
0b88c     A7 1E 02 FB | 	rdlong	local01, fp
0b890     08 4E 85 F1 | 	sub	fp, #8
0b894     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b898     14 4E 05 A1 |  if_e	add	fp, #20
0b89c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8a0     14 4E 85 A1 |  if_e	sub	fp, #20
0b8a4     12 23 02 A6 |  if_e	mov	local03, local04
0b8a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b8ac     2C 00 90 5D |  if_ne	jmp	#LR__0991
0b8b0     00 1E 06 F6 | 	mov	local01, #0
0b8b4     A7 12 02 FB | 	rdlong	arg01, fp
0b8b8     0C 4E 05 F1 | 	add	fp, #12
0b8bc     A7 14 02 FB | 	rdlong	arg02, fp
0b8c0     0C 4E 85 F1 | 	sub	fp, #12
0b8c4     01 16 66 F6 | 	neg	arg03, #1
0b8c8     AC AF B0 FD | 	call	#__system___float_cmp
0b8cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0b8d0     00 1E 26 36 |  if_ae	not	local01, #0
0b8d4     A7 1E 62 FC | 	wrlong	local01, fp
0b8d8     B0 02 90 FD | 	jmp	#LR__1000
0b8dc                 | LR__0991
0b8dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0b8dc     08 4E 05 F1 | 	add	fp, #8
0b8e0     A7 1E 02 FB | 	rdlong	local01, fp
0b8e4     08 4E 85 F1 | 	sub	fp, #8
0b8e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b8ec     14 4E 05 A1 |  if_e	add	fp, #20
0b8f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8f4     14 4E 85 A1 |  if_e	sub	fp, #20
0b8f8     12 23 02 A6 |  if_e	mov	local03, local04
0b8fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b900     48 00 90 5D |  if_ne	jmp	#LR__0992
0b904     00 1E 06 F6 | 	mov	local01, #0
0b908     A7 20 02 FB | 	rdlong	local02, fp
0b90c     0C 4E 05 F1 | 	add	fp, #12
0b910     A7 12 02 FB | 	rdlong	arg01, fp
0b914     0C 4E 85 F1 | 	sub	fp, #12
0b918     09 13 52 F6 | 	abs	arg01, arg01 wc
0b91c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b920     00 26 06 36 |  if_ae	mov	local05, #0
0b924     F0 A7 B0 FD | 	call	#__system___float_fromuns
0b928     13 FB 61 F5 | 	xor	result1, local05
0b92c     FD 14 02 F6 | 	mov	arg02, result1
0b930     10 13 02 F6 | 	mov	arg01, local02
0b934     01 16 66 F6 | 	neg	arg03, #1
0b938     3C AF B0 FD | 	call	#__system___float_cmp
0b93c     01 FA 55 F2 | 	cmps	result1, #1 wc
0b940     00 1E 26 36 |  if_ae	not	local01, #0
0b944     A7 1E 62 FC | 	wrlong	local01, fp
0b948     40 02 90 FD | 	jmp	#LR__1000
0b94c                 | LR__0992
0b94c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0b94c     08 4E 05 F1 | 	add	fp, #8
0b950     A7 1E 02 FB | 	rdlong	local01, fp
0b954     08 4E 85 F1 | 	sub	fp, #8
0b958     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b95c     14 4E 05 A1 |  if_e	add	fp, #20
0b960     A7 24 02 AB |  if_e	rdlong	local04, fp
0b964     14 4E 85 A1 |  if_e	sub	fp, #20
0b968     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0b96c     38 00 90 5D |  if_ne	jmp	#LR__0993
0b970     00 1E 06 F6 | 	mov	local01, #0
0b974     A7 20 02 FB | 	rdlong	local02, fp
0b978     0C 4E 05 F1 | 	add	fp, #12
0b97c     A7 12 02 FB | 	rdlong	arg01, fp
0b980     0C 4E 85 F1 | 	sub	fp, #12
0b984     90 A7 B0 FD | 	call	#__system___float_fromuns
0b988     FD 14 02 F6 | 	mov	arg02, result1
0b98c     10 13 02 F6 | 	mov	arg01, local02
0b990     01 16 66 F6 | 	neg	arg03, #1
0b994     E0 AE B0 FD | 	call	#__system___float_cmp
0b998     01 FA 55 F2 | 	cmps	result1, #1 wc
0b99c     00 1E 26 36 |  if_ae	not	local01, #0
0b9a0     A7 1E 62 FC | 	wrlong	local01, fp
0b9a4     E4 01 90 FD | 	jmp	#LR__1000
0b9a8                 | LR__0993
0b9a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0b9a8     08 4E 05 F1 | 	add	fp, #8
0b9ac     A7 1E 02 FB | 	rdlong	local01, fp
0b9b0     08 4E 85 F1 | 	sub	fp, #8
0b9b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b9b8     14 4E 05 A1 |  if_e	add	fp, #20
0b9bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0b9c0     14 4E 85 A1 |  if_e	sub	fp, #20
0b9c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b9c8     44 00 90 5D |  if_ne	jmp	#LR__0994
0b9cc     00 1E 06 F6 | 	mov	local01, #0
0b9d0     A7 12 02 FB | 	rdlong	arg01, fp
0b9d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9d8     1F 26 C6 C9 |  if_b	decod	local05, #31
0b9dc     00 26 06 36 |  if_ae	mov	local05, #0
0b9e0     34 A7 B0 FD | 	call	#__system___float_fromuns
0b9e4     13 FB 61 F5 | 	xor	result1, local05
0b9e8     FD 12 02 F6 | 	mov	arg01, result1
0b9ec     0C 4E 05 F1 | 	add	fp, #12
0b9f0     A7 14 02 FB | 	rdlong	arg02, fp
0b9f4     0C 4E 85 F1 | 	sub	fp, #12
0b9f8     01 16 66 F6 | 	neg	arg03, #1
0b9fc     78 AE B0 FD | 	call	#__system___float_cmp
0ba00     01 FA 55 F2 | 	cmps	result1, #1 wc
0ba04     00 1E 26 36 |  if_ae	not	local01, #0
0ba08     A7 1E 62 FC | 	wrlong	local01, fp
0ba0c     7C 01 90 FD | 	jmp	#LR__1000
0ba10                 | LR__0994
0ba10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0ba10     08 4E 05 F1 | 	add	fp, #8
0ba14     A7 1E 02 FB | 	rdlong	local01, fp
0ba18     08 4E 85 F1 | 	sub	fp, #8
0ba1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba20     14 4E 05 A1 |  if_e	add	fp, #20
0ba24     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba28     14 4E 85 A1 |  if_e	sub	fp, #20
0ba2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ba30     24 00 90 5D |  if_ne	jmp	#LR__0995
0ba34     00 1E 06 F6 | 	mov	local01, #0
0ba38     A7 20 02 FB | 	rdlong	local02, fp
0ba3c     0C 4E 05 F1 | 	add	fp, #12
0ba40     A7 22 02 FB | 	rdlong	local03, fp
0ba44     0C 4E 85 F1 | 	sub	fp, #12
0ba48     11 21 5A F2 | 	cmps	local02, local03 wcz
0ba4c     01 1E 66 16 |  if_a	neg	local01, #1
0ba50     A7 1E 62 FC | 	wrlong	local01, fp
0ba54     34 01 90 FD | 	jmp	#LR__1000
0ba58                 | LR__0995
0ba58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0ba58     08 4E 05 F1 | 	add	fp, #8
0ba5c     A7 1E 02 FB | 	rdlong	local01, fp
0ba60     08 4E 85 F1 | 	sub	fp, #8
0ba64     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba68     14 4E 05 A1 |  if_e	add	fp, #20
0ba6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba70     14 4E 85 A1 |  if_e	sub	fp, #20
0ba74     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ba78     24 00 90 5D |  if_ne	jmp	#LR__0996
0ba7c     00 1E 06 F6 | 	mov	local01, #0
0ba80     A7 20 02 FB | 	rdlong	local02, fp
0ba84     0C 4E 05 F1 | 	add	fp, #12
0ba88     A7 22 02 FB | 	rdlong	local03, fp
0ba8c     0C 4E 85 F1 | 	sub	fp, #12
0ba90     11 21 5A F2 | 	cmps	local02, local03 wcz
0ba94     01 1E 66 16 |  if_a	neg	local01, #1
0ba98     A7 1E 62 FC | 	wrlong	local01, fp
0ba9c     EC 00 90 FD | 	jmp	#LR__1000
0baa0                 | LR__0996
0baa0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0baa0     08 4E 05 F1 | 	add	fp, #8
0baa4     A7 1E 02 FB | 	rdlong	local01, fp
0baa8     08 4E 85 F1 | 	sub	fp, #8
0baac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bab0     14 4E 05 A1 |  if_e	add	fp, #20
0bab4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bab8     14 4E 85 A1 |  if_e	sub	fp, #20
0babc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bac0     34 00 90 5D |  if_ne	jmp	#LR__0997
0bac4     00 1E 06 F6 | 	mov	local01, #0
0bac8     A7 12 02 FB | 	rdlong	arg01, fp
0bacc     48 A6 B0 FD | 	call	#__system___float_fromuns
0bad0     FD 12 02 F6 | 	mov	arg01, result1
0bad4     0C 4E 05 F1 | 	add	fp, #12
0bad8     A7 14 02 FB | 	rdlong	arg02, fp
0badc     0C 4E 85 F1 | 	sub	fp, #12
0bae0     01 16 66 F6 | 	neg	arg03, #1
0bae4     90 AD B0 FD | 	call	#__system___float_cmp
0bae8     01 FA 55 F2 | 	cmps	result1, #1 wc
0baec     00 1E 26 36 |  if_ae	not	local01, #0
0baf0     A7 1E 62 FC | 	wrlong	local01, fp
0baf4     94 00 90 FD | 	jmp	#LR__1000
0baf8                 | LR__0997
0baf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0baf8     08 4E 05 F1 | 	add	fp, #8
0bafc     A7 1E 02 FB | 	rdlong	local01, fp
0bb00     08 4E 85 F1 | 	sub	fp, #8
0bb04     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bb08     14 4E 05 A1 |  if_e	add	fp, #20
0bb0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb10     14 4E 85 A1 |  if_e	sub	fp, #20
0bb14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bb18     24 00 90 5D |  if_ne	jmp	#LR__0998
0bb1c     00 1E 06 F6 | 	mov	local01, #0
0bb20     A7 20 02 FB | 	rdlong	local02, fp
0bb24     0C 4E 05 F1 | 	add	fp, #12
0bb28     A7 22 02 FB | 	rdlong	local03, fp
0bb2c     0C 4E 85 F1 | 	sub	fp, #12
0bb30     11 21 5A F2 | 	cmps	local02, local03 wcz
0bb34     01 1E 66 16 |  if_a	neg	local01, #1
0bb38     A7 1E 62 FC | 	wrlong	local01, fp
0bb3c     4C 00 90 FD | 	jmp	#LR__1000
0bb40                 | LR__0998
0bb40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0bb40     08 4E 05 F1 | 	add	fp, #8
0bb44     A7 1E 02 FB | 	rdlong	local01, fp
0bb48     08 4E 85 F1 | 	sub	fp, #8
0bb4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bb50     14 4E 05 A1 |  if_e	add	fp, #20
0bb54     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb58     14 4E 85 A1 |  if_e	sub	fp, #20
0bb5c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bb60     24 00 90 5D |  if_ne	jmp	#LR__0999
0bb64     00 1E 06 F6 | 	mov	local01, #0
0bb68     A7 20 02 FB | 	rdlong	local02, fp
0bb6c     0C 4E 05 F1 | 	add	fp, #12
0bb70     A7 22 02 FB | 	rdlong	local03, fp
0bb74     0C 4E 85 F1 | 	sub	fp, #12
0bb78     11 21 1A F2 | 	cmp	local02, local03 wcz
0bb7c     01 1E 66 16 |  if_a	neg	local01, #1
0bb80     A7 1E 62 FC | 	wrlong	local01, fp
0bb84     04 00 90 FD | 	jmp	#LR__1000
0bb88                 | LR__0999
0bb88     A7 00 68 FC | 	wrlong	#0, fp
0bb8c                 | LR__1000
0bb8c     08 4E 05 F1 | 	add	fp, #8
0bb90     A7 38 68 FC | 	wrlong	#28, fp
0bb94     08 4E 85 F1 | 	sub	fp, #8
0bb98     A7 12 02 F6 | 	mov	arg01, fp
0bb9c     18 C5 BF FD | 	call	#_push
0bba0     A7 F0 03 F6 | 	mov	ptra, fp
0bba4     B2 00 A0 FD | 	call	#popregs_
0bba8                 | _do_gt_ret
0bba8     2D 00 64 FD | 	ret
0bbac                 | 
0bbac                 | ' 
0bbac                 | ' sub do_lt
0bbac                 | _do_lt
0bbac     05 4A 05 F6 | 	mov	COUNT_, #5
0bbb0     A8 00 A0 FD | 	call	#pushregs_
0bbb4     18 F0 07 F1 | 	add	ptra, #24
0bbb8     64 C4 BF FD | 	call	#_pop
0bbbc     FD 1E 02 F6 | 	mov	local01, result1
0bbc0     FE 20 02 F6 | 	mov	local02, result2
0bbc4     FF 22 02 F6 | 	mov	local03, result3
0bbc8     0C 4E 05 F1 | 	add	fp, #12
0bbcc     A7 1E 62 FC | 	wrlong	local01, fp
0bbd0     04 4E 05 F1 | 	add	fp, #4
0bbd4     A7 20 62 FC | 	wrlong	local02, fp
0bbd8     04 4E 05 F1 | 	add	fp, #4
0bbdc     A7 22 62 FC | 	wrlong	local03, fp
0bbe0     14 4E 85 F1 | 	sub	fp, #20
0bbe4     38 C4 BF FD | 	call	#_pop
0bbe8     FF 22 02 F6 | 	mov	local03, result3
0bbec     A7 FA 61 FC | 	wrlong	result1, fp
0bbf0     04 4E 05 F1 | 	add	fp, #4
0bbf4     A7 FC 61 FC | 	wrlong	result2, fp
0bbf8     04 4E 05 F1 | 	add	fp, #4
0bbfc     A7 22 62 FC | 	wrlong	local03, fp
0bc00                 | ' t2=pop()
0bc00                 | ' t1=pop()
0bc00                 | ' 
0bc00                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0bc00     08 4E 85 F1 | 	sub	fp, #8
0bc04     1F 22 0E F2 | 	cmp	local03, #31 wz
0bc08     14 4E 05 A1 |  if_e	add	fp, #20
0bc0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc10     14 4E 85 A1 |  if_e	sub	fp, #20
0bc14     12 23 02 A6 |  if_e	mov	local03, local04
0bc18     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0bc1c     28 00 90 5D |  if_ne	jmp	#LR__1010
0bc20     00 1E 06 F6 | 	mov	local01, #0
0bc24     A7 12 02 FB | 	rdlong	arg01, fp
0bc28     0C 4E 05 F1 | 	add	fp, #12
0bc2c     A7 14 02 FB | 	rdlong	arg02, fp
0bc30     0C 4E 85 F1 | 	sub	fp, #12
0bc34     E8 7E B0 FD | 	call	#__system___string_cmp
0bc38     00 FA 55 F2 | 	cmps	result1, #0 wc
0bc3c     00 1E 26 C6 |  if_b	not	local01, #0
0bc40     A7 1E 62 FC | 	wrlong	local01, fp
0bc44     F4 02 90 FD | 	jmp	#LR__1020
0bc48                 | LR__1010
0bc48                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0bc48     08 4E 05 F1 | 	add	fp, #8
0bc4c     A7 1E 02 FB | 	rdlong	local01, fp
0bc50     08 4E 85 F1 | 	sub	fp, #8
0bc54     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bc58     14 4E 05 A1 |  if_e	add	fp, #20
0bc5c     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc60     14 4E 85 A1 |  if_e	sub	fp, #20
0bc64     12 23 02 A6 |  if_e	mov	local03, local04
0bc68     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bc6c     2C 00 90 5D |  if_ne	jmp	#LR__1011
0bc70     00 1E 06 F6 | 	mov	local01, #0
0bc74     A7 12 02 FB | 	rdlong	arg01, fp
0bc78     0C 4E 05 F1 | 	add	fp, #12
0bc7c     A7 14 02 FB | 	rdlong	arg02, fp
0bc80     0C 4E 85 F1 | 	sub	fp, #12
0bc84     01 16 06 F6 | 	mov	arg03, #1
0bc88     EC AB B0 FD | 	call	#__system___float_cmp
0bc8c     00 FA 55 F2 | 	cmps	result1, #0 wc
0bc90     00 1E 26 C6 |  if_b	not	local01, #0
0bc94     A7 1E 62 FC | 	wrlong	local01, fp
0bc98     A0 02 90 FD | 	jmp	#LR__1020
0bc9c                 | LR__1011
0bc9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0bc9c     08 4E 05 F1 | 	add	fp, #8
0bca0     A7 1E 02 FB | 	rdlong	local01, fp
0bca4     08 4E 85 F1 | 	sub	fp, #8
0bca8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bcac     14 4E 05 A1 |  if_e	add	fp, #20
0bcb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0bcb4     14 4E 85 A1 |  if_e	sub	fp, #20
0bcb8     12 23 02 A6 |  if_e	mov	local03, local04
0bcbc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bcc0     48 00 90 5D |  if_ne	jmp	#LR__1012
0bcc4     00 1E 06 F6 | 	mov	local01, #0
0bcc8     A7 20 02 FB | 	rdlong	local02, fp
0bccc     0C 4E 05 F1 | 	add	fp, #12
0bcd0     A7 12 02 FB | 	rdlong	arg01, fp
0bcd4     0C 4E 85 F1 | 	sub	fp, #12
0bcd8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bcdc     1F 26 C6 C9 |  if_b	decod	local05, #31
0bce0     00 26 06 36 |  if_ae	mov	local05, #0
0bce4     30 A4 B0 FD | 	call	#__system___float_fromuns
0bce8     13 FB 61 F5 | 	xor	result1, local05
0bcec     FD 14 02 F6 | 	mov	arg02, result1
0bcf0     10 13 02 F6 | 	mov	arg01, local02
0bcf4     01 16 06 F6 | 	mov	arg03, #1
0bcf8     7C AB B0 FD | 	call	#__system___float_cmp
0bcfc     00 FA 55 F2 | 	cmps	result1, #0 wc
0bd00     00 1E 26 C6 |  if_b	not	local01, #0
0bd04     A7 1E 62 FC | 	wrlong	local01, fp
0bd08     30 02 90 FD | 	jmp	#LR__1020
0bd0c                 | LR__1012
0bd0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0bd0c     08 4E 05 F1 | 	add	fp, #8
0bd10     A7 1E 02 FB | 	rdlong	local01, fp
0bd14     08 4E 85 F1 | 	sub	fp, #8
0bd18     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bd1c     14 4E 05 A1 |  if_e	add	fp, #20
0bd20     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd24     14 4E 85 A1 |  if_e	sub	fp, #20
0bd28     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0bd2c     38 00 90 5D |  if_ne	jmp	#LR__1013
0bd30     00 1E 06 F6 | 	mov	local01, #0
0bd34     A7 20 02 FB | 	rdlong	local02, fp
0bd38     0C 4E 05 F1 | 	add	fp, #12
0bd3c     A7 12 02 FB | 	rdlong	arg01, fp
0bd40     0C 4E 85 F1 | 	sub	fp, #12
0bd44     D0 A3 B0 FD | 	call	#__system___float_fromuns
0bd48     FD 14 02 F6 | 	mov	arg02, result1
0bd4c     10 13 02 F6 | 	mov	arg01, local02
0bd50     01 16 06 F6 | 	mov	arg03, #1
0bd54     20 AB B0 FD | 	call	#__system___float_cmp
0bd58     00 FA 55 F2 | 	cmps	result1, #0 wc
0bd5c     00 1E 26 C6 |  if_b	not	local01, #0
0bd60     A7 1E 62 FC | 	wrlong	local01, fp
0bd64     D4 01 90 FD | 	jmp	#LR__1020
0bd68                 | LR__1013
0bd68                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0bd68     08 4E 05 F1 | 	add	fp, #8
0bd6c     A7 1E 02 FB | 	rdlong	local01, fp
0bd70     08 4E 85 F1 | 	sub	fp, #8
0bd74     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bd78     14 4E 05 A1 |  if_e	add	fp, #20
0bd7c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bd80     14 4E 85 A1 |  if_e	sub	fp, #20
0bd84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bd88     44 00 90 5D |  if_ne	jmp	#LR__1014
0bd8c     00 1E 06 F6 | 	mov	local01, #0
0bd90     A7 12 02 FB | 	rdlong	arg01, fp
0bd94     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd98     1F 26 C6 C9 |  if_b	decod	local05, #31
0bd9c     00 26 06 36 |  if_ae	mov	local05, #0
0bda0     74 A3 B0 FD | 	call	#__system___float_fromuns
0bda4     13 FB 61 F5 | 	xor	result1, local05
0bda8     FD 12 02 F6 | 	mov	arg01, result1
0bdac     0C 4E 05 F1 | 	add	fp, #12
0bdb0     A7 14 02 FB | 	rdlong	arg02, fp
0bdb4     0C 4E 85 F1 | 	sub	fp, #12
0bdb8     01 16 06 F6 | 	mov	arg03, #1
0bdbc     B8 AA B0 FD | 	call	#__system___float_cmp
0bdc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0bdc4     00 1E 26 C6 |  if_b	not	local01, #0
0bdc8     A7 1E 62 FC | 	wrlong	local01, fp
0bdcc     6C 01 90 FD | 	jmp	#LR__1020
0bdd0                 | LR__1014
0bdd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0bdd0     08 4E 05 F1 | 	add	fp, #8
0bdd4     A7 1E 02 FB | 	rdlong	local01, fp
0bdd8     08 4E 85 F1 | 	sub	fp, #8
0bddc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bde0     14 4E 05 A1 |  if_e	add	fp, #20
0bde4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bde8     14 4E 85 A1 |  if_e	sub	fp, #20
0bdec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bdf0     20 00 90 5D |  if_ne	jmp	#LR__1015
0bdf4     A7 20 02 FB | 	rdlong	local02, fp
0bdf8     0C 4E 05 F1 | 	add	fp, #12
0bdfc     A7 22 02 FB | 	rdlong	local03, fp
0be00     0C 4E 85 F1 | 	sub	fp, #12
0be04     11 21 52 F2 | 	cmps	local02, local03 wc
0be08     0F 1F A2 F1 | 	subx	local01, local01
0be0c     A7 1E 62 FC | 	wrlong	local01, fp
0be10     28 01 90 FD | 	jmp	#LR__1020
0be14                 | LR__1015
0be14                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0be14     08 4E 05 F1 | 	add	fp, #8
0be18     A7 1E 02 FB | 	rdlong	local01, fp
0be1c     08 4E 85 F1 | 	sub	fp, #8
0be20     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be24     14 4E 05 A1 |  if_e	add	fp, #20
0be28     A7 22 02 AB |  if_e	rdlong	local03, fp
0be2c     14 4E 85 A1 |  if_e	sub	fp, #20
0be30     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0be34     20 00 90 5D |  if_ne	jmp	#LR__1016
0be38     A7 20 02 FB | 	rdlong	local02, fp
0be3c     0C 4E 05 F1 | 	add	fp, #12
0be40     A7 22 02 FB | 	rdlong	local03, fp
0be44     0C 4E 85 F1 | 	sub	fp, #12
0be48     11 21 52 F2 | 	cmps	local02, local03 wc
0be4c     0F 1F A2 F1 | 	subx	local01, local01
0be50     A7 1E 62 FC | 	wrlong	local01, fp
0be54     E4 00 90 FD | 	jmp	#LR__1020
0be58                 | LR__1016
0be58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0be58     08 4E 05 F1 | 	add	fp, #8
0be5c     A7 1E 02 FB | 	rdlong	local01, fp
0be60     08 4E 85 F1 | 	sub	fp, #8
0be64     1D 1E 0E F2 | 	cmp	local01, #29 wz
0be68     14 4E 05 A1 |  if_e	add	fp, #20
0be6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0be70     14 4E 85 A1 |  if_e	sub	fp, #20
0be74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0be78     34 00 90 5D |  if_ne	jmp	#LR__1017
0be7c     00 1E 06 F6 | 	mov	local01, #0
0be80     A7 12 02 FB | 	rdlong	arg01, fp
0be84     90 A2 B0 FD | 	call	#__system___float_fromuns
0be88     FD 12 02 F6 | 	mov	arg01, result1
0be8c     0C 4E 05 F1 | 	add	fp, #12
0be90     A7 14 02 FB | 	rdlong	arg02, fp
0be94     0C 4E 85 F1 | 	sub	fp, #12
0be98     01 16 06 F6 | 	mov	arg03, #1
0be9c     D8 A9 B0 FD | 	call	#__system___float_cmp
0bea0     00 FA 55 F2 | 	cmps	result1, #0 wc
0bea4     00 1E 26 C6 |  if_b	not	local01, #0
0bea8     A7 1E 62 FC | 	wrlong	local01, fp
0beac     8C 00 90 FD | 	jmp	#LR__1020
0beb0                 | LR__1017
0beb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0beb0     08 4E 05 F1 | 	add	fp, #8
0beb4     A7 1E 02 FB | 	rdlong	local01, fp
0beb8     08 4E 85 F1 | 	sub	fp, #8
0bebc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bec0     14 4E 05 A1 |  if_e	add	fp, #20
0bec4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bec8     14 4E 85 A1 |  if_e	sub	fp, #20
0becc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bed0     20 00 90 5D |  if_ne	jmp	#LR__1018
0bed4     A7 20 02 FB | 	rdlong	local02, fp
0bed8     0C 4E 05 F1 | 	add	fp, #12
0bedc     A7 22 02 FB | 	rdlong	local03, fp
0bee0     0C 4E 85 F1 | 	sub	fp, #12
0bee4     11 21 52 F2 | 	cmps	local02, local03 wc
0bee8     0F 1F A2 F1 | 	subx	local01, local01
0beec     A7 1E 62 FC | 	wrlong	local01, fp
0bef0     48 00 90 FD | 	jmp	#LR__1020
0bef4                 | LR__1018
0bef4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0bef4     08 4E 05 F1 | 	add	fp, #8
0bef8     A7 1E 02 FB | 	rdlong	local01, fp
0befc     08 4E 85 F1 | 	sub	fp, #8
0bf00     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bf04     14 4E 05 A1 |  if_e	add	fp, #20
0bf08     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf0c     14 4E 85 A1 |  if_e	sub	fp, #20
0bf10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bf14     20 00 90 5D |  if_ne	jmp	#LR__1019
0bf18     A7 20 02 FB | 	rdlong	local02, fp
0bf1c     0C 4E 05 F1 | 	add	fp, #12
0bf20     A7 22 02 FB | 	rdlong	local03, fp
0bf24     0C 4E 85 F1 | 	sub	fp, #12
0bf28     11 21 12 F2 | 	cmp	local02, local03 wc
0bf2c     0F 1F A2 F1 | 	subx	local01, local01
0bf30     A7 1E 62 FC | 	wrlong	local01, fp
0bf34     04 00 90 FD | 	jmp	#LR__1020
0bf38                 | LR__1019
0bf38     A7 00 68 FC | 	wrlong	#0, fp
0bf3c                 | LR__1020
0bf3c     08 4E 05 F1 | 	add	fp, #8
0bf40     A7 38 68 FC | 	wrlong	#28, fp
0bf44     08 4E 85 F1 | 	sub	fp, #8
0bf48     A7 12 02 F6 | 	mov	arg01, fp
0bf4c     68 C1 BF FD | 	call	#_push
0bf50     A7 F0 03 F6 | 	mov	ptra, fp
0bf54     B2 00 A0 FD | 	call	#popregs_
0bf58                 | _do_lt_ret
0bf58     2D 00 64 FD | 	ret
0bf5c                 | 
0bf5c                 | ' 
0bf5c                 | ' sub do_ge
0bf5c                 | _do_ge
0bf5c     05 4A 05 F6 | 	mov	COUNT_, #5
0bf60     A8 00 A0 FD | 	call	#pushregs_
0bf64     18 F0 07 F1 | 	add	ptra, #24
0bf68     B4 C0 BF FD | 	call	#_pop
0bf6c     FD 1E 02 F6 | 	mov	local01, result1
0bf70     FE 20 02 F6 | 	mov	local02, result2
0bf74     FF 22 02 F6 | 	mov	local03, result3
0bf78     0C 4E 05 F1 | 	add	fp, #12
0bf7c     A7 1E 62 FC | 	wrlong	local01, fp
0bf80     04 4E 05 F1 | 	add	fp, #4
0bf84     A7 20 62 FC | 	wrlong	local02, fp
0bf88     04 4E 05 F1 | 	add	fp, #4
0bf8c     A7 22 62 FC | 	wrlong	local03, fp
0bf90     14 4E 85 F1 | 	sub	fp, #20
0bf94     88 C0 BF FD | 	call	#_pop
0bf98     FF 22 02 F6 | 	mov	local03, result3
0bf9c     A7 FA 61 FC | 	wrlong	result1, fp
0bfa0     04 4E 05 F1 | 	add	fp, #4
0bfa4     A7 FC 61 FC | 	wrlong	result2, fp
0bfa8     04 4E 05 F1 | 	add	fp, #4
0bfac     A7 22 62 FC | 	wrlong	local03, fp
0bfb0                 | ' t2=pop()
0bfb0                 | ' t1=pop()
0bfb0                 | ' 
0bfb0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0bfb0     08 4E 85 F1 | 	sub	fp, #8
0bfb4     1F 22 0E F2 | 	cmp	local03, #31 wz
0bfb8     14 4E 05 A1 |  if_e	add	fp, #20
0bfbc     A7 24 02 AB |  if_e	rdlong	local04, fp
0bfc0     14 4E 85 A1 |  if_e	sub	fp, #20
0bfc4     12 23 02 A6 |  if_e	mov	local03, local04
0bfc8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0bfcc     28 00 90 5D |  if_ne	jmp	#LR__1030
0bfd0     00 1E 06 F6 | 	mov	local01, #0
0bfd4     A7 12 02 FB | 	rdlong	arg01, fp
0bfd8     0C 4E 05 F1 | 	add	fp, #12
0bfdc     A7 14 02 FB | 	rdlong	arg02, fp
0bfe0     0C 4E 85 F1 | 	sub	fp, #12
0bfe4     38 7B B0 FD | 	call	#__system___string_cmp
0bfe8     00 FA 55 F2 | 	cmps	result1, #0 wc
0bfec     00 1E 26 36 |  if_ae	not	local01, #0
0bff0     A7 1E 62 FC | 	wrlong	local01, fp
0bff4     04 03 90 FD | 	jmp	#LR__1040
0bff8                 | LR__1030
0bff8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0bff8     08 4E 05 F1 | 	add	fp, #8
0bffc     A7 1E 02 FB | 	rdlong	local01, fp
0c000     08 4E 85 F1 | 	sub	fp, #8
0c004     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c008     14 4E 05 A1 |  if_e	add	fp, #20
0c00c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c010     14 4E 85 A1 |  if_e	sub	fp, #20
0c014     12 23 02 A6 |  if_e	mov	local03, local04
0c018     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c01c     2C 00 90 5D |  if_ne	jmp	#LR__1031
0c020     00 1E 06 F6 | 	mov	local01, #0
0c024     A7 12 02 FB | 	rdlong	arg01, fp
0c028     0C 4E 05 F1 | 	add	fp, #12
0c02c     A7 14 02 FB | 	rdlong	arg02, fp
0c030     0C 4E 85 F1 | 	sub	fp, #12
0c034     01 16 66 F6 | 	neg	arg03, #1
0c038     3C A8 B0 FD | 	call	#__system___float_cmp
0c03c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c040     00 1E 26 36 |  if_ae	not	local01, #0
0c044     A7 1E 62 FC | 	wrlong	local01, fp
0c048     B0 02 90 FD | 	jmp	#LR__1040
0c04c                 | LR__1031
0c04c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0c04c     08 4E 05 F1 | 	add	fp, #8
0c050     A7 1E 02 FB | 	rdlong	local01, fp
0c054     08 4E 85 F1 | 	sub	fp, #8
0c058     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c05c     14 4E 05 A1 |  if_e	add	fp, #20
0c060     A7 24 02 AB |  if_e	rdlong	local04, fp
0c064     14 4E 85 A1 |  if_e	sub	fp, #20
0c068     12 23 02 A6 |  if_e	mov	local03, local04
0c06c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c070     48 00 90 5D |  if_ne	jmp	#LR__1032
0c074     00 1E 06 F6 | 	mov	local01, #0
0c078     A7 20 02 FB | 	rdlong	local02, fp
0c07c     0C 4E 05 F1 | 	add	fp, #12
0c080     A7 12 02 FB | 	rdlong	arg01, fp
0c084     0C 4E 85 F1 | 	sub	fp, #12
0c088     09 13 52 F6 | 	abs	arg01, arg01 wc
0c08c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c090     00 26 06 36 |  if_ae	mov	local05, #0
0c094     80 A0 B0 FD | 	call	#__system___float_fromuns
0c098     13 FB 61 F5 | 	xor	result1, local05
0c09c     FD 14 02 F6 | 	mov	arg02, result1
0c0a0     10 13 02 F6 | 	mov	arg01, local02
0c0a4     01 16 66 F6 | 	neg	arg03, #1
0c0a8     CC A7 B0 FD | 	call	#__system___float_cmp
0c0ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0c0b0     00 1E 26 36 |  if_ae	not	local01, #0
0c0b4     A7 1E 62 FC | 	wrlong	local01, fp
0c0b8     40 02 90 FD | 	jmp	#LR__1040
0c0bc                 | LR__1032
0c0bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0c0bc     08 4E 05 F1 | 	add	fp, #8
0c0c0     A7 1E 02 FB | 	rdlong	local01, fp
0c0c4     08 4E 85 F1 | 	sub	fp, #8
0c0c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c0cc     14 4E 05 A1 |  if_e	add	fp, #20
0c0d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0c0d4     14 4E 85 A1 |  if_e	sub	fp, #20
0c0d8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c0dc     38 00 90 5D |  if_ne	jmp	#LR__1033
0c0e0     00 1E 06 F6 | 	mov	local01, #0
0c0e4     A7 20 02 FB | 	rdlong	local02, fp
0c0e8     0C 4E 05 F1 | 	add	fp, #12
0c0ec     A7 12 02 FB | 	rdlong	arg01, fp
0c0f0     0C 4E 85 F1 | 	sub	fp, #12
0c0f4     20 A0 B0 FD | 	call	#__system___float_fromuns
0c0f8     FD 14 02 F6 | 	mov	arg02, result1
0c0fc     10 13 02 F6 | 	mov	arg01, local02
0c100     01 16 66 F6 | 	neg	arg03, #1
0c104     70 A7 B0 FD | 	call	#__system___float_cmp
0c108     00 FA 55 F2 | 	cmps	result1, #0 wc
0c10c     00 1E 26 36 |  if_ae	not	local01, #0
0c110     A7 1E 62 FC | 	wrlong	local01, fp
0c114     E4 01 90 FD | 	jmp	#LR__1040
0c118                 | LR__1033
0c118                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0c118     08 4E 05 F1 | 	add	fp, #8
0c11c     A7 1E 02 FB | 	rdlong	local01, fp
0c120     08 4E 85 F1 | 	sub	fp, #8
0c124     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c128     14 4E 05 A1 |  if_e	add	fp, #20
0c12c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c130     14 4E 85 A1 |  if_e	sub	fp, #20
0c134     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c138     44 00 90 5D |  if_ne	jmp	#LR__1034
0c13c     00 1E 06 F6 | 	mov	local01, #0
0c140     A7 12 02 FB | 	rdlong	arg01, fp
0c144     09 13 52 F6 | 	abs	arg01, arg01 wc
0c148     1F 26 C6 C9 |  if_b	decod	local05, #31
0c14c     00 26 06 36 |  if_ae	mov	local05, #0
0c150     C4 9F B0 FD | 	call	#__system___float_fromuns
0c154     13 FB 61 F5 | 	xor	result1, local05
0c158     FD 12 02 F6 | 	mov	arg01, result1
0c15c     0C 4E 05 F1 | 	add	fp, #12
0c160     A7 14 02 FB | 	rdlong	arg02, fp
0c164     0C 4E 85 F1 | 	sub	fp, #12
0c168     01 16 66 F6 | 	neg	arg03, #1
0c16c     08 A7 B0 FD | 	call	#__system___float_cmp
0c170     00 FA 55 F2 | 	cmps	result1, #0 wc
0c174     00 1E 26 36 |  if_ae	not	local01, #0
0c178     A7 1E 62 FC | 	wrlong	local01, fp
0c17c     7C 01 90 FD | 	jmp	#LR__1040
0c180                 | LR__1034
0c180                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0c180     08 4E 05 F1 | 	add	fp, #8
0c184     A7 1E 02 FB | 	rdlong	local01, fp
0c188     08 4E 85 F1 | 	sub	fp, #8
0c18c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c190     14 4E 05 A1 |  if_e	add	fp, #20
0c194     A7 22 02 AB |  if_e	rdlong	local03, fp
0c198     14 4E 85 A1 |  if_e	sub	fp, #20
0c19c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c1a0     24 00 90 5D |  if_ne	jmp	#LR__1035
0c1a4     00 1E 06 F6 | 	mov	local01, #0
0c1a8     A7 20 02 FB | 	rdlong	local02, fp
0c1ac     0C 4E 05 F1 | 	add	fp, #12
0c1b0     A7 22 02 FB | 	rdlong	local03, fp
0c1b4     0C 4E 85 F1 | 	sub	fp, #12
0c1b8     11 21 52 F2 | 	cmps	local02, local03 wc
0c1bc     01 1E 66 36 |  if_ae	neg	local01, #1
0c1c0     A7 1E 62 FC | 	wrlong	local01, fp
0c1c4     34 01 90 FD | 	jmp	#LR__1040
0c1c8                 | LR__1035
0c1c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0c1c8     08 4E 05 F1 | 	add	fp, #8
0c1cc     A7 1E 02 FB | 	rdlong	local01, fp
0c1d0     08 4E 85 F1 | 	sub	fp, #8
0c1d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c1d8     14 4E 05 A1 |  if_e	add	fp, #20
0c1dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0c1e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c1e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c1e8     24 00 90 5D |  if_ne	jmp	#LR__1036
0c1ec     00 1E 06 F6 | 	mov	local01, #0
0c1f0     A7 20 02 FB | 	rdlong	local02, fp
0c1f4     0C 4E 05 F1 | 	add	fp, #12
0c1f8     A7 22 02 FB | 	rdlong	local03, fp
0c1fc     0C 4E 85 F1 | 	sub	fp, #12
0c200     11 21 52 F2 | 	cmps	local02, local03 wc
0c204     01 1E 66 36 |  if_ae	neg	local01, #1
0c208     A7 1E 62 FC | 	wrlong	local01, fp
0c20c     EC 00 90 FD | 	jmp	#LR__1040
0c210                 | LR__1036
0c210                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0c210     08 4E 05 F1 | 	add	fp, #8
0c214     A7 1E 02 FB | 	rdlong	local01, fp
0c218     08 4E 85 F1 | 	sub	fp, #8
0c21c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c220     14 4E 05 A1 |  if_e	add	fp, #20
0c224     A7 22 02 AB |  if_e	rdlong	local03, fp
0c228     14 4E 85 A1 |  if_e	sub	fp, #20
0c22c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c230     34 00 90 5D |  if_ne	jmp	#LR__1037
0c234     00 1E 06 F6 | 	mov	local01, #0
0c238     A7 12 02 FB | 	rdlong	arg01, fp
0c23c     D8 9E B0 FD | 	call	#__system___float_fromuns
0c240     FD 12 02 F6 | 	mov	arg01, result1
0c244     0C 4E 05 F1 | 	add	fp, #12
0c248     A7 14 02 FB | 	rdlong	arg02, fp
0c24c     0C 4E 85 F1 | 	sub	fp, #12
0c250     01 16 66 F6 | 	neg	arg03, #1
0c254     20 A6 B0 FD | 	call	#__system___float_cmp
0c258     00 FA 55 F2 | 	cmps	result1, #0 wc
0c25c     00 1E 26 36 |  if_ae	not	local01, #0
0c260     A7 1E 62 FC | 	wrlong	local01, fp
0c264     94 00 90 FD | 	jmp	#LR__1040
0c268                 | LR__1037
0c268                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0c268     08 4E 05 F1 | 	add	fp, #8
0c26c     A7 1E 02 FB | 	rdlong	local01, fp
0c270     08 4E 85 F1 | 	sub	fp, #8
0c274     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c278     14 4E 05 A1 |  if_e	add	fp, #20
0c27c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c280     14 4E 85 A1 |  if_e	sub	fp, #20
0c284     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c288     24 00 90 5D |  if_ne	jmp	#LR__1038
0c28c     00 1E 06 F6 | 	mov	local01, #0
0c290     A7 20 02 FB | 	rdlong	local02, fp
0c294     0C 4E 05 F1 | 	add	fp, #12
0c298     A7 22 02 FB | 	rdlong	local03, fp
0c29c     0C 4E 85 F1 | 	sub	fp, #12
0c2a0     11 21 52 F2 | 	cmps	local02, local03 wc
0c2a4     01 1E 66 36 |  if_ae	neg	local01, #1
0c2a8     A7 1E 62 FC | 	wrlong	local01, fp
0c2ac     4C 00 90 FD | 	jmp	#LR__1040
0c2b0                 | LR__1038
0c2b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0c2b0     08 4E 05 F1 | 	add	fp, #8
0c2b4     A7 1E 02 FB | 	rdlong	local01, fp
0c2b8     08 4E 85 F1 | 	sub	fp, #8
0c2bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c2c0     14 4E 05 A1 |  if_e	add	fp, #20
0c2c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0c2c8     14 4E 85 A1 |  if_e	sub	fp, #20
0c2cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c2d0     24 00 90 5D |  if_ne	jmp	#LR__1039
0c2d4     00 1E 06 F6 | 	mov	local01, #0
0c2d8     A7 20 02 FB | 	rdlong	local02, fp
0c2dc     0C 4E 05 F1 | 	add	fp, #12
0c2e0     A7 22 02 FB | 	rdlong	local03, fp
0c2e4     0C 4E 85 F1 | 	sub	fp, #12
0c2e8     11 21 12 F2 | 	cmp	local02, local03 wc
0c2ec     01 1E 66 36 |  if_ae	neg	local01, #1
0c2f0     A7 1E 62 FC | 	wrlong	local01, fp
0c2f4     04 00 90 FD | 	jmp	#LR__1040
0c2f8                 | LR__1039
0c2f8     A7 00 68 FC | 	wrlong	#0, fp
0c2fc                 | LR__1040
0c2fc     08 4E 05 F1 | 	add	fp, #8
0c300     A7 38 68 FC | 	wrlong	#28, fp
0c304     08 4E 85 F1 | 	sub	fp, #8
0c308     A7 12 02 F6 | 	mov	arg01, fp
0c30c     A8 BD BF FD | 	call	#_push
0c310     A7 F0 03 F6 | 	mov	ptra, fp
0c314     B2 00 A0 FD | 	call	#popregs_
0c318                 | _do_ge_ret
0c318     2D 00 64 FD | 	ret
0c31c                 | 
0c31c                 | ' 
0c31c                 | ' sub do_le
0c31c                 | _do_le
0c31c     05 4A 05 F6 | 	mov	COUNT_, #5
0c320     A8 00 A0 FD | 	call	#pushregs_
0c324     18 F0 07 F1 | 	add	ptra, #24
0c328     F4 BC BF FD | 	call	#_pop
0c32c     FD 1E 02 F6 | 	mov	local01, result1
0c330     FE 20 02 F6 | 	mov	local02, result2
0c334     FF 22 02 F6 | 	mov	local03, result3
0c338     0C 4E 05 F1 | 	add	fp, #12
0c33c     A7 1E 62 FC | 	wrlong	local01, fp
0c340     04 4E 05 F1 | 	add	fp, #4
0c344     A7 20 62 FC | 	wrlong	local02, fp
0c348     04 4E 05 F1 | 	add	fp, #4
0c34c     A7 22 62 FC | 	wrlong	local03, fp
0c350     14 4E 85 F1 | 	sub	fp, #20
0c354     C8 BC BF FD | 	call	#_pop
0c358     FF 22 02 F6 | 	mov	local03, result3
0c35c     A7 FA 61 FC | 	wrlong	result1, fp
0c360     04 4E 05 F1 | 	add	fp, #4
0c364     A7 FC 61 FC | 	wrlong	result2, fp
0c368     04 4E 05 F1 | 	add	fp, #4
0c36c     A7 22 62 FC | 	wrlong	local03, fp
0c370                 | ' t2=pop()
0c370                 | ' t1=pop()
0c370                 | ' 
0c370                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0c370     08 4E 85 F1 | 	sub	fp, #8
0c374     1F 22 0E F2 | 	cmp	local03, #31 wz
0c378     14 4E 05 A1 |  if_e	add	fp, #20
0c37c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c380     14 4E 85 A1 |  if_e	sub	fp, #20
0c384     12 23 02 A6 |  if_e	mov	local03, local04
0c388     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c38c     28 00 90 5D |  if_ne	jmp	#LR__1050
0c390     00 1E 06 F6 | 	mov	local01, #0
0c394     A7 12 02 FB | 	rdlong	arg01, fp
0c398     0C 4E 05 F1 | 	add	fp, #12
0c39c     A7 14 02 FB | 	rdlong	arg02, fp
0c3a0     0C 4E 85 F1 | 	sub	fp, #12
0c3a4     78 77 B0 FD | 	call	#__system___string_cmp
0c3a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c3ac     00 1E 26 C6 |  if_b	not	local01, #0
0c3b0     A7 1E 62 FC | 	wrlong	local01, fp
0c3b4     04 03 90 FD | 	jmp	#LR__1060
0c3b8                 | LR__1050
0c3b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0c3b8     08 4E 05 F1 | 	add	fp, #8
0c3bc     A7 1E 02 FB | 	rdlong	local01, fp
0c3c0     08 4E 85 F1 | 	sub	fp, #8
0c3c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c3c8     14 4E 05 A1 |  if_e	add	fp, #20
0c3cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0c3d0     14 4E 85 A1 |  if_e	sub	fp, #20
0c3d4     12 23 02 A6 |  if_e	mov	local03, local04
0c3d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c3dc     2C 00 90 5D |  if_ne	jmp	#LR__1051
0c3e0     00 1E 06 F6 | 	mov	local01, #0
0c3e4     A7 12 02 FB | 	rdlong	arg01, fp
0c3e8     0C 4E 05 F1 | 	add	fp, #12
0c3ec     A7 14 02 FB | 	rdlong	arg02, fp
0c3f0     0C 4E 85 F1 | 	sub	fp, #12
0c3f4     01 16 06 F6 | 	mov	arg03, #1
0c3f8     7C A4 B0 FD | 	call	#__system___float_cmp
0c3fc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c400     00 1E 26 C6 |  if_b	not	local01, #0
0c404     A7 1E 62 FC | 	wrlong	local01, fp
0c408     B0 02 90 FD | 	jmp	#LR__1060
0c40c                 | LR__1051
0c40c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0c40c     08 4E 05 F1 | 	add	fp, #8
0c410     A7 1E 02 FB | 	rdlong	local01, fp
0c414     08 4E 85 F1 | 	sub	fp, #8
0c418     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c41c     14 4E 05 A1 |  if_e	add	fp, #20
0c420     A7 24 02 AB |  if_e	rdlong	local04, fp
0c424     14 4E 85 A1 |  if_e	sub	fp, #20
0c428     12 23 02 A6 |  if_e	mov	local03, local04
0c42c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c430     48 00 90 5D |  if_ne	jmp	#LR__1052
0c434     00 1E 06 F6 | 	mov	local01, #0
0c438     A7 20 02 FB | 	rdlong	local02, fp
0c43c     0C 4E 05 F1 | 	add	fp, #12
0c440     A7 12 02 FB | 	rdlong	arg01, fp
0c444     0C 4E 85 F1 | 	sub	fp, #12
0c448     09 13 52 F6 | 	abs	arg01, arg01 wc
0c44c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c450     00 26 06 36 |  if_ae	mov	local05, #0
0c454     C0 9C B0 FD | 	call	#__system___float_fromuns
0c458     13 FB 61 F5 | 	xor	result1, local05
0c45c     FD 14 02 F6 | 	mov	arg02, result1
0c460     10 13 02 F6 | 	mov	arg01, local02
0c464     01 16 06 F6 | 	mov	arg03, #1
0c468     0C A4 B0 FD | 	call	#__system___float_cmp
0c46c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c470     00 1E 26 C6 |  if_b	not	local01, #0
0c474     A7 1E 62 FC | 	wrlong	local01, fp
0c478     40 02 90 FD | 	jmp	#LR__1060
0c47c                 | LR__1052
0c47c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0c47c     08 4E 05 F1 | 	add	fp, #8
0c480     A7 1E 02 FB | 	rdlong	local01, fp
0c484     08 4E 85 F1 | 	sub	fp, #8
0c488     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c48c     14 4E 05 A1 |  if_e	add	fp, #20
0c490     A7 24 02 AB |  if_e	rdlong	local04, fp
0c494     14 4E 85 A1 |  if_e	sub	fp, #20
0c498     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c49c     38 00 90 5D |  if_ne	jmp	#LR__1053
0c4a0     00 1E 06 F6 | 	mov	local01, #0
0c4a4     A7 20 02 FB | 	rdlong	local02, fp
0c4a8     0C 4E 05 F1 | 	add	fp, #12
0c4ac     A7 12 02 FB | 	rdlong	arg01, fp
0c4b0     0C 4E 85 F1 | 	sub	fp, #12
0c4b4     60 9C B0 FD | 	call	#__system___float_fromuns
0c4b8     FD 14 02 F6 | 	mov	arg02, result1
0c4bc     10 13 02 F6 | 	mov	arg01, local02
0c4c0     01 16 06 F6 | 	mov	arg03, #1
0c4c4     B0 A3 B0 FD | 	call	#__system___float_cmp
0c4c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c4cc     00 1E 26 C6 |  if_b	not	local01, #0
0c4d0     A7 1E 62 FC | 	wrlong	local01, fp
0c4d4     E4 01 90 FD | 	jmp	#LR__1060
0c4d8                 | LR__1053
0c4d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0c4d8     08 4E 05 F1 | 	add	fp, #8
0c4dc     A7 1E 02 FB | 	rdlong	local01, fp
0c4e0     08 4E 85 F1 | 	sub	fp, #8
0c4e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c4e8     14 4E 05 A1 |  if_e	add	fp, #20
0c4ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0c4f0     14 4E 85 A1 |  if_e	sub	fp, #20
0c4f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c4f8     44 00 90 5D |  if_ne	jmp	#LR__1054
0c4fc     00 1E 06 F6 | 	mov	local01, #0
0c500     A7 12 02 FB | 	rdlong	arg01, fp
0c504     09 13 52 F6 | 	abs	arg01, arg01 wc
0c508     1F 26 C6 C9 |  if_b	decod	local05, #31
0c50c     00 26 06 36 |  if_ae	mov	local05, #0
0c510     04 9C B0 FD | 	call	#__system___float_fromuns
0c514     13 FB 61 F5 | 	xor	result1, local05
0c518     FD 12 02 F6 | 	mov	arg01, result1
0c51c     0C 4E 05 F1 | 	add	fp, #12
0c520     A7 14 02 FB | 	rdlong	arg02, fp
0c524     0C 4E 85 F1 | 	sub	fp, #12
0c528     01 16 06 F6 | 	mov	arg03, #1
0c52c     48 A3 B0 FD | 	call	#__system___float_cmp
0c530     01 FA 55 F2 | 	cmps	result1, #1 wc
0c534     00 1E 26 C6 |  if_b	not	local01, #0
0c538     A7 1E 62 FC | 	wrlong	local01, fp
0c53c     7C 01 90 FD | 	jmp	#LR__1060
0c540                 | LR__1054
0c540                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0c540     08 4E 05 F1 | 	add	fp, #8
0c544     A7 1E 02 FB | 	rdlong	local01, fp
0c548     08 4E 85 F1 | 	sub	fp, #8
0c54c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c550     14 4E 05 A1 |  if_e	add	fp, #20
0c554     A7 22 02 AB |  if_e	rdlong	local03, fp
0c558     14 4E 85 A1 |  if_e	sub	fp, #20
0c55c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c560     24 00 90 5D |  if_ne	jmp	#LR__1055
0c564     00 1E 06 F6 | 	mov	local01, #0
0c568     A7 20 02 FB | 	rdlong	local02, fp
0c56c     0C 4E 05 F1 | 	add	fp, #12
0c570     A7 22 02 FB | 	rdlong	local03, fp
0c574     0C 4E 85 F1 | 	sub	fp, #12
0c578     11 21 5A F2 | 	cmps	local02, local03 wcz
0c57c     01 1E 66 E6 |  if_be	neg	local01, #1
0c580     A7 1E 62 FC | 	wrlong	local01, fp
0c584     34 01 90 FD | 	jmp	#LR__1060
0c588                 | LR__1055
0c588                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0c588     08 4E 05 F1 | 	add	fp, #8
0c58c     A7 1E 02 FB | 	rdlong	local01, fp
0c590     08 4E 85 F1 | 	sub	fp, #8
0c594     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c598     14 4E 05 A1 |  if_e	add	fp, #20
0c59c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c5a0     14 4E 85 A1 |  if_e	sub	fp, #20
0c5a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c5a8     24 00 90 5D |  if_ne	jmp	#LR__1056
0c5ac     00 1E 06 F6 | 	mov	local01, #0
0c5b0     A7 20 02 FB | 	rdlong	local02, fp
0c5b4     0C 4E 05 F1 | 	add	fp, #12
0c5b8     A7 22 02 FB | 	rdlong	local03, fp
0c5bc     0C 4E 85 F1 | 	sub	fp, #12
0c5c0     11 21 5A F2 | 	cmps	local02, local03 wcz
0c5c4     01 1E 66 E6 |  if_be	neg	local01, #1
0c5c8     A7 1E 62 FC | 	wrlong	local01, fp
0c5cc     EC 00 90 FD | 	jmp	#LR__1060
0c5d0                 | LR__1056
0c5d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0c5d0     08 4E 05 F1 | 	add	fp, #8
0c5d4     A7 1E 02 FB | 	rdlong	local01, fp
0c5d8     08 4E 85 F1 | 	sub	fp, #8
0c5dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c5e0     14 4E 05 A1 |  if_e	add	fp, #20
0c5e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0c5e8     14 4E 85 A1 |  if_e	sub	fp, #20
0c5ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c5f0     34 00 90 5D |  if_ne	jmp	#LR__1057
0c5f4     00 1E 06 F6 | 	mov	local01, #0
0c5f8     A7 12 02 FB | 	rdlong	arg01, fp
0c5fc     18 9B B0 FD | 	call	#__system___float_fromuns
0c600     FD 12 02 F6 | 	mov	arg01, result1
0c604     0C 4E 05 F1 | 	add	fp, #12
0c608     A7 14 02 FB | 	rdlong	arg02, fp
0c60c     0C 4E 85 F1 | 	sub	fp, #12
0c610     01 16 06 F6 | 	mov	arg03, #1
0c614     60 A2 B0 FD | 	call	#__system___float_cmp
0c618     01 FA 55 F2 | 	cmps	result1, #1 wc
0c61c     00 1E 26 C6 |  if_b	not	local01, #0
0c620     A7 1E 62 FC | 	wrlong	local01, fp
0c624     94 00 90 FD | 	jmp	#LR__1060
0c628                 | LR__1057
0c628                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0c628     08 4E 05 F1 | 	add	fp, #8
0c62c     A7 1E 02 FB | 	rdlong	local01, fp
0c630     08 4E 85 F1 | 	sub	fp, #8
0c634     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c638     14 4E 05 A1 |  if_e	add	fp, #20
0c63c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c640     14 4E 85 A1 |  if_e	sub	fp, #20
0c644     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c648     24 00 90 5D |  if_ne	jmp	#LR__1058
0c64c     00 1E 06 F6 | 	mov	local01, #0
0c650     A7 20 02 FB | 	rdlong	local02, fp
0c654     0C 4E 05 F1 | 	add	fp, #12
0c658     A7 22 02 FB | 	rdlong	local03, fp
0c65c     0C 4E 85 F1 | 	sub	fp, #12
0c660     11 21 5A F2 | 	cmps	local02, local03 wcz
0c664     01 1E 66 E6 |  if_be	neg	local01, #1
0c668     A7 1E 62 FC | 	wrlong	local01, fp
0c66c     4C 00 90 FD | 	jmp	#LR__1060
0c670                 | LR__1058
0c670                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0c670     08 4E 05 F1 | 	add	fp, #8
0c674     A7 1E 02 FB | 	rdlong	local01, fp
0c678     08 4E 85 F1 | 	sub	fp, #8
0c67c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c680     14 4E 05 A1 |  if_e	add	fp, #20
0c684     A7 22 02 AB |  if_e	rdlong	local03, fp
0c688     14 4E 85 A1 |  if_e	sub	fp, #20
0c68c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c690     24 00 90 5D |  if_ne	jmp	#LR__1059
0c694     00 1E 06 F6 | 	mov	local01, #0
0c698     A7 20 02 FB | 	rdlong	local02, fp
0c69c     0C 4E 05 F1 | 	add	fp, #12
0c6a0     A7 22 02 FB | 	rdlong	local03, fp
0c6a4     0C 4E 85 F1 | 	sub	fp, #12
0c6a8     11 21 1A F2 | 	cmp	local02, local03 wcz
0c6ac     01 1E 66 E6 |  if_be	neg	local01, #1
0c6b0     A7 1E 62 FC | 	wrlong	local01, fp
0c6b4     04 00 90 FD | 	jmp	#LR__1060
0c6b8                 | LR__1059
0c6b8     A7 00 68 FC | 	wrlong	#0, fp
0c6bc                 | LR__1060
0c6bc     08 4E 05 F1 | 	add	fp, #8
0c6c0     A7 38 68 FC | 	wrlong	#28, fp
0c6c4     08 4E 85 F1 | 	sub	fp, #8
0c6c8     A7 12 02 F6 | 	mov	arg01, fp
0c6cc     E8 B9 BF FD | 	call	#_push
0c6d0     A7 F0 03 F6 | 	mov	ptra, fp
0c6d4     B2 00 A0 FD | 	call	#popregs_
0c6d8                 | _do_le_ret
0c6d8     2D 00 64 FD | 	ret
0c6dc                 | 
0c6dc                 | ' 
0c6dc                 | ' 
0c6dc                 | ' sub do_ne
0c6dc                 | _do_ne
0c6dc     05 4A 05 F6 | 	mov	COUNT_, #5
0c6e0     A8 00 A0 FD | 	call	#pushregs_
0c6e4     18 F0 07 F1 | 	add	ptra, #24
0c6e8     34 B9 BF FD | 	call	#_pop
0c6ec     FD 1E 02 F6 | 	mov	local01, result1
0c6f0     FE 20 02 F6 | 	mov	local02, result2
0c6f4     FF 22 02 F6 | 	mov	local03, result3
0c6f8     0C 4E 05 F1 | 	add	fp, #12
0c6fc     A7 1E 62 FC | 	wrlong	local01, fp
0c700     04 4E 05 F1 | 	add	fp, #4
0c704     A7 20 62 FC | 	wrlong	local02, fp
0c708     04 4E 05 F1 | 	add	fp, #4
0c70c     A7 22 62 FC | 	wrlong	local03, fp
0c710     14 4E 85 F1 | 	sub	fp, #20
0c714     08 B9 BF FD | 	call	#_pop
0c718     FF 22 02 F6 | 	mov	local03, result3
0c71c     A7 FA 61 FC | 	wrlong	result1, fp
0c720     04 4E 05 F1 | 	add	fp, #4
0c724     A7 FC 61 FC | 	wrlong	result2, fp
0c728     04 4E 05 F1 | 	add	fp, #4
0c72c     A7 22 62 FC | 	wrlong	local03, fp
0c730                 | ' t2=pop()
0c730                 | ' t1=pop()
0c730                 | ' 
0c730                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0c730     08 4E 85 F1 | 	sub	fp, #8
0c734     1F 22 0E F2 | 	cmp	local03, #31 wz
0c738     14 4E 05 A1 |  if_e	add	fp, #20
0c73c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c740     14 4E 85 A1 |  if_e	sub	fp, #20
0c744     12 23 02 A6 |  if_e	mov	local03, local04
0c748     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c74c     28 00 90 5D |  if_ne	jmp	#LR__1070
0c750     00 1E 06 F6 | 	mov	local01, #0
0c754     A7 12 02 FB | 	rdlong	arg01, fp
0c758     0C 4E 05 F1 | 	add	fp, #12
0c75c     A7 14 02 FB | 	rdlong	arg02, fp
0c760     0C 4E 85 F1 | 	sub	fp, #12
0c764     B8 73 B0 FD | 	call	#__system___string_cmp
0c768     00 FA 0D F2 | 	cmp	result1, #0 wz
0c76c     00 1E 26 56 |  if_ne	not	local01, #0
0c770     A7 1E 62 FC | 	wrlong	local01, fp
0c774     04 03 90 FD | 	jmp	#LR__1080
0c778                 | LR__1070
0c778                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0c778     08 4E 05 F1 | 	add	fp, #8
0c77c     A7 1E 02 FB | 	rdlong	local01, fp
0c780     08 4E 85 F1 | 	sub	fp, #8
0c784     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c788     14 4E 05 A1 |  if_e	add	fp, #20
0c78c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c790     14 4E 85 A1 |  if_e	sub	fp, #20
0c794     12 23 02 A6 |  if_e	mov	local03, local04
0c798     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c79c     2C 00 90 5D |  if_ne	jmp	#LR__1071
0c7a0     00 1E 06 F6 | 	mov	local01, #0
0c7a4     A7 12 02 FB | 	rdlong	arg01, fp
0c7a8     0C 4E 05 F1 | 	add	fp, #12
0c7ac     A7 14 02 FB | 	rdlong	arg02, fp
0c7b0     0C 4E 85 F1 | 	sub	fp, #12
0c7b4     01 16 06 F6 | 	mov	arg03, #1
0c7b8     BC A0 B0 FD | 	call	#__system___float_cmp
0c7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c7c0     00 1E 26 56 |  if_ne	not	local01, #0
0c7c4     A7 1E 62 FC | 	wrlong	local01, fp
0c7c8     B0 02 90 FD | 	jmp	#LR__1080
0c7cc                 | LR__1071
0c7cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0c7cc     08 4E 05 F1 | 	add	fp, #8
0c7d0     A7 1E 02 FB | 	rdlong	local01, fp
0c7d4     08 4E 85 F1 | 	sub	fp, #8
0c7d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c7dc     14 4E 05 A1 |  if_e	add	fp, #20
0c7e0     A7 24 02 AB |  if_e	rdlong	local04, fp
0c7e4     14 4E 85 A1 |  if_e	sub	fp, #20
0c7e8     12 23 02 A6 |  if_e	mov	local03, local04
0c7ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c7f0     48 00 90 5D |  if_ne	jmp	#LR__1072
0c7f4     00 1E 06 F6 | 	mov	local01, #0
0c7f8     A7 20 02 FB | 	rdlong	local02, fp
0c7fc     0C 4E 05 F1 | 	add	fp, #12
0c800     A7 12 02 FB | 	rdlong	arg01, fp
0c804     0C 4E 85 F1 | 	sub	fp, #12
0c808     09 13 52 F6 | 	abs	arg01, arg01 wc
0c80c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c810     00 26 06 36 |  if_ae	mov	local05, #0
0c814     00 99 B0 FD | 	call	#__system___float_fromuns
0c818     13 FB 61 F5 | 	xor	result1, local05
0c81c     FD 14 02 F6 | 	mov	arg02, result1
0c820     10 13 02 F6 | 	mov	arg01, local02
0c824     01 16 06 F6 | 	mov	arg03, #1
0c828     4C A0 B0 FD | 	call	#__system___float_cmp
0c82c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c830     00 1E 26 56 |  if_ne	not	local01, #0
0c834     A7 1E 62 FC | 	wrlong	local01, fp
0c838     40 02 90 FD | 	jmp	#LR__1080
0c83c                 | LR__1072
0c83c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0c83c     08 4E 05 F1 | 	add	fp, #8
0c840     A7 1E 02 FB | 	rdlong	local01, fp
0c844     08 4E 85 F1 | 	sub	fp, #8
0c848     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c84c     14 4E 05 A1 |  if_e	add	fp, #20
0c850     A7 24 02 AB |  if_e	rdlong	local04, fp
0c854     14 4E 85 A1 |  if_e	sub	fp, #20
0c858     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c85c     38 00 90 5D |  if_ne	jmp	#LR__1073
0c860     00 1E 06 F6 | 	mov	local01, #0
0c864     A7 20 02 FB | 	rdlong	local02, fp
0c868     0C 4E 05 F1 | 	add	fp, #12
0c86c     A7 12 02 FB | 	rdlong	arg01, fp
0c870     0C 4E 85 F1 | 	sub	fp, #12
0c874     A0 98 B0 FD | 	call	#__system___float_fromuns
0c878     FD 14 02 F6 | 	mov	arg02, result1
0c87c     10 13 02 F6 | 	mov	arg01, local02
0c880     01 16 06 F6 | 	mov	arg03, #1
0c884     F0 9F B0 FD | 	call	#__system___float_cmp
0c888     00 FA 0D F2 | 	cmp	result1, #0 wz
0c88c     00 1E 26 56 |  if_ne	not	local01, #0
0c890     A7 1E 62 FC | 	wrlong	local01, fp
0c894     E4 01 90 FD | 	jmp	#LR__1080
0c898                 | LR__1073
0c898                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0c898     08 4E 05 F1 | 	add	fp, #8
0c89c     A7 1E 02 FB | 	rdlong	local01, fp
0c8a0     08 4E 85 F1 | 	sub	fp, #8
0c8a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c8a8     14 4E 05 A1 |  if_e	add	fp, #20
0c8ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0c8b0     14 4E 85 A1 |  if_e	sub	fp, #20
0c8b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c8b8     44 00 90 5D |  if_ne	jmp	#LR__1074
0c8bc     00 1E 06 F6 | 	mov	local01, #0
0c8c0     A7 12 02 FB | 	rdlong	arg01, fp
0c8c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8c8     1F 26 C6 C9 |  if_b	decod	local05, #31
0c8cc     00 26 06 36 |  if_ae	mov	local05, #0
0c8d0     44 98 B0 FD | 	call	#__system___float_fromuns
0c8d4     13 FB 61 F5 | 	xor	result1, local05
0c8d8     FD 12 02 F6 | 	mov	arg01, result1
0c8dc     0C 4E 05 F1 | 	add	fp, #12
0c8e0     A7 14 02 FB | 	rdlong	arg02, fp
0c8e4     0C 4E 85 F1 | 	sub	fp, #12
0c8e8     01 16 06 F6 | 	mov	arg03, #1
0c8ec     88 9F B0 FD | 	call	#__system___float_cmp
0c8f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c8f4     00 1E 26 56 |  if_ne	not	local01, #0
0c8f8     A7 1E 62 FC | 	wrlong	local01, fp
0c8fc     7C 01 90 FD | 	jmp	#LR__1080
0c900                 | LR__1074
0c900                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0c900     08 4E 05 F1 | 	add	fp, #8
0c904     A7 1E 02 FB | 	rdlong	local01, fp
0c908     08 4E 85 F1 | 	sub	fp, #8
0c90c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c910     14 4E 05 A1 |  if_e	add	fp, #20
0c914     A7 22 02 AB |  if_e	rdlong	local03, fp
0c918     14 4E 85 A1 |  if_e	sub	fp, #20
0c91c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c920     24 00 90 5D |  if_ne	jmp	#LR__1075
0c924     00 1E 06 F6 | 	mov	local01, #0
0c928     A7 20 02 FB | 	rdlong	local02, fp
0c92c     0C 4E 05 F1 | 	add	fp, #12
0c930     A7 22 02 FB | 	rdlong	local03, fp
0c934     0C 4E 85 F1 | 	sub	fp, #12
0c938     11 21 0A F2 | 	cmp	local02, local03 wz
0c93c     01 1E 66 56 |  if_ne	neg	local01, #1
0c940     A7 1E 62 FC | 	wrlong	local01, fp
0c944     34 01 90 FD | 	jmp	#LR__1080
0c948                 | LR__1075
0c948                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0c948     08 4E 05 F1 | 	add	fp, #8
0c94c     A7 1E 02 FB | 	rdlong	local01, fp
0c950     08 4E 85 F1 | 	sub	fp, #8
0c954     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c958     14 4E 05 A1 |  if_e	add	fp, #20
0c95c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c960     14 4E 85 A1 |  if_e	sub	fp, #20
0c964     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c968     24 00 90 5D |  if_ne	jmp	#LR__1076
0c96c     00 1E 06 F6 | 	mov	local01, #0
0c970     A7 20 02 FB | 	rdlong	local02, fp
0c974     0C 4E 05 F1 | 	add	fp, #12
0c978     A7 22 02 FB | 	rdlong	local03, fp
0c97c     0C 4E 85 F1 | 	sub	fp, #12
0c980     11 21 0A F2 | 	cmp	local02, local03 wz
0c984     01 1E 66 56 |  if_ne	neg	local01, #1
0c988     A7 1E 62 FC | 	wrlong	local01, fp
0c98c     EC 00 90 FD | 	jmp	#LR__1080
0c990                 | LR__1076
0c990                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0c990     08 4E 05 F1 | 	add	fp, #8
0c994     A7 1E 02 FB | 	rdlong	local01, fp
0c998     08 4E 85 F1 | 	sub	fp, #8
0c99c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c9a0     14 4E 05 A1 |  if_e	add	fp, #20
0c9a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0c9a8     14 4E 85 A1 |  if_e	sub	fp, #20
0c9ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c9b0     34 00 90 5D |  if_ne	jmp	#LR__1077
0c9b4     00 1E 06 F6 | 	mov	local01, #0
0c9b8     A7 12 02 FB | 	rdlong	arg01, fp
0c9bc     58 97 B0 FD | 	call	#__system___float_fromuns
0c9c0     FD 12 02 F6 | 	mov	arg01, result1
0c9c4     0C 4E 05 F1 | 	add	fp, #12
0c9c8     A7 14 02 FB | 	rdlong	arg02, fp
0c9cc     0C 4E 85 F1 | 	sub	fp, #12
0c9d0     01 16 06 F6 | 	mov	arg03, #1
0c9d4     A0 9E B0 FD | 	call	#__system___float_cmp
0c9d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c9dc     00 1E 26 56 |  if_ne	not	local01, #0
0c9e0     A7 1E 62 FC | 	wrlong	local01, fp
0c9e4     94 00 90 FD | 	jmp	#LR__1080
0c9e8                 | LR__1077
0c9e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0c9e8     08 4E 05 F1 | 	add	fp, #8
0c9ec     A7 1E 02 FB | 	rdlong	local01, fp
0c9f0     08 4E 85 F1 | 	sub	fp, #8
0c9f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c9f8     14 4E 05 A1 |  if_e	add	fp, #20
0c9fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0ca00     14 4E 85 A1 |  if_e	sub	fp, #20
0ca04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ca08     24 00 90 5D |  if_ne	jmp	#LR__1078
0ca0c     00 1E 06 F6 | 	mov	local01, #0
0ca10     A7 20 02 FB | 	rdlong	local02, fp
0ca14     0C 4E 05 F1 | 	add	fp, #12
0ca18     A7 22 02 FB | 	rdlong	local03, fp
0ca1c     0C 4E 85 F1 | 	sub	fp, #12
0ca20     11 21 0A F2 | 	cmp	local02, local03 wz
0ca24     01 1E 66 56 |  if_ne	neg	local01, #1
0ca28     A7 1E 62 FC | 	wrlong	local01, fp
0ca2c     4C 00 90 FD | 	jmp	#LR__1080
0ca30                 | LR__1078
0ca30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0ca30     08 4E 05 F1 | 	add	fp, #8
0ca34     A7 1E 02 FB | 	rdlong	local01, fp
0ca38     08 4E 85 F1 | 	sub	fp, #8
0ca3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ca40     14 4E 05 A1 |  if_e	add	fp, #20
0ca44     A7 22 02 AB |  if_e	rdlong	local03, fp
0ca48     14 4E 85 A1 |  if_e	sub	fp, #20
0ca4c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ca50     24 00 90 5D |  if_ne	jmp	#LR__1079
0ca54     00 1E 06 F6 | 	mov	local01, #0
0ca58     A7 20 02 FB | 	rdlong	local02, fp
0ca5c     0C 4E 05 F1 | 	add	fp, #12
0ca60     A7 22 02 FB | 	rdlong	local03, fp
0ca64     0C 4E 85 F1 | 	sub	fp, #12
0ca68     11 21 0A F2 | 	cmp	local02, local03 wz
0ca6c     01 1E 66 56 |  if_ne	neg	local01, #1
0ca70     A7 1E 62 FC | 	wrlong	local01, fp
0ca74     04 00 90 FD | 	jmp	#LR__1080
0ca78                 | LR__1079
0ca78     A7 00 68 FC | 	wrlong	#0, fp
0ca7c                 | LR__1080
0ca7c     08 4E 05 F1 | 	add	fp, #8
0ca80     A7 38 68 FC | 	wrlong	#28, fp
0ca84     08 4E 85 F1 | 	sub	fp, #8
0ca88     A7 12 02 F6 | 	mov	arg01, fp
0ca8c     28 B6 BF FD | 	call	#_push
0ca90     A7 F0 03 F6 | 	mov	ptra, fp
0ca94     B2 00 A0 FD | 	call	#popregs_
0ca98                 | _do_ne_ret
0ca98     2D 00 64 FD | 	ret
0ca9c                 | 
0ca9c                 | ' 
0ca9c                 | ' 
0ca9c                 | ' 
0ca9c                 | ' ' -------------------   convert a variable on the top of stack to integer
0ca9c                 | ' 
0ca9c                 | ' sub do_converttoint
0ca9c                 | _do_converttoint
0ca9c     02 4A 05 F6 | 	mov	COUNT_, #2
0caa0     A8 00 A0 FD | 	call	#pushregs_
0caa4     18 F0 07 F1 | 	add	ptra, #24
0caa8     74 B5 BF FD | 	call	#_pop
0caac     FE 1E 02 F6 | 	mov	local01, result2
0cab0     FF 20 02 F6 | 	mov	local02, result3
0cab4     A7 FA 61 FC | 	wrlong	result1, fp
0cab8     04 4E 05 F1 | 	add	fp, #4
0cabc     A7 1E 62 FC | 	wrlong	local01, fp
0cac0     04 4E 05 F1 | 	add	fp, #4
0cac4     A7 20 62 FC | 	wrlong	local02, fp
0cac8                 | ' t1=pop() 
0cac8                 | ' select case t1.result_type
0cac8     08 4E 85 F1 | 	sub	fp, #8
0cacc     1C 20 0E F2 | 	cmp	local02, #28 wz
0cad0     24 00 90 AD |  if_e	jmp	#LR__1090
0cad4     1D 20 0E F2 | 	cmp	local02, #29 wz
0cad8     38 00 90 AD |  if_e	jmp	#LR__1091
0cadc     1E 20 0E F2 | 	cmp	local02, #30 wz
0cae0     4C 00 90 AD |  if_e	jmp	#LR__1092
0cae4     1F 20 0E F2 | 	cmp	local02, #31 wz
0cae8     68 00 90 AD |  if_e	jmp	#LR__1093
0caec     FF 20 0E F2 | 	cmp	local02, #255 wz
0caf0     8C 00 90 AD |  if_e	jmp	#LR__1094
0caf4     A8 00 90 FD | 	jmp	#LR__1095
0caf8                 | LR__1090
0caf8     A7 20 02 FB | 	rdlong	local02, fp
0cafc     0C 4E 05 F1 | 	add	fp, #12
0cb00     A7 20 62 FC | 	wrlong	local02, fp
0cb04     04 4E 05 F1 | 	add	fp, #4
0cb08     A7 38 68 FC | 	wrlong	#28, fp
0cb0c     10 4E 85 F1 | 	sub	fp, #16
0cb10     A0 00 90 FD | 	jmp	#LR__1096
0cb14                 | LR__1091
0cb14     A7 20 02 FB | 	rdlong	local02, fp
0cb18     0C 4E 05 F1 | 	add	fp, #12
0cb1c     A7 20 62 FC | 	wrlong	local02, fp
0cb20     04 4E 05 F1 | 	add	fp, #4
0cb24     A7 38 68 FC | 	wrlong	#28, fp
0cb28     10 4E 85 F1 | 	sub	fp, #16
0cb2c     84 00 90 FD | 	jmp	#LR__1096
0cb30                 | LR__1092
0cb30     A7 12 02 FB | 	rdlong	arg01, fp
0cb34     01 14 06 F6 | 	mov	arg02, #1
0cb38     D0 9D B0 FD | 	call	#__system___float_tointeger
0cb3c     0C 4E 05 F1 | 	add	fp, #12
0cb40     A7 FA 61 FC | 	wrlong	result1, fp
0cb44     04 4E 05 F1 | 	add	fp, #4
0cb48     A7 38 68 FC | 	wrlong	#28, fp
0cb4c     10 4E 85 F1 | 	sub	fp, #16
0cb50     60 00 90 FD | 	jmp	#LR__1096
0cb54                 | LR__1093
0cb54     A7 12 02 FB | 	rdlong	arg01, fp
0cb58     D0 A0 B0 FD | 	call	#__system____builtin_atof
0cb5c     FD 12 02 F6 | 	mov	arg01, result1
0cb60     00 14 06 F6 | 	mov	arg02, #0
0cb64     A4 9D B0 FD | 	call	#__system___float_tointeger
0cb68     0C 4E 05 F1 | 	add	fp, #12
0cb6c     A7 FA 61 FC | 	wrlong	result1, fp
0cb70     04 4E 05 F1 | 	add	fp, #4
0cb74     A7 38 68 FC | 	wrlong	#28, fp
0cb78     10 4E 85 F1 | 	sub	fp, #16
0cb7c     34 00 90 FD | 	jmp	#LR__1096
0cb80                 | LR__1094
0cb80     0C 4E 05 F1 | 	add	fp, #12
0cb84     A7 00 68 FC | 	wrlong	#0, fp
0cb88     0C 4E 85 F1 | 	sub	fp, #12
0cb8c     A7 20 02 FB | 	rdlong	local02, fp
0cb90     10 4E 05 F1 | 	add	fp, #16
0cb94     A7 20 62 FC | 	wrlong	local02, fp
0cb98     10 4E 85 F1 | 	sub	fp, #16
0cb9c     14 00 90 FD | 	jmp	#LR__1096
0cba0                 | LR__1095
0cba0     0C 4E 05 F1 | 	add	fp, #12
0cba4     A7 00 68 FC | 	wrlong	#0, fp
0cba8     04 4E 05 F1 | 	add	fp, #4
0cbac     A7 02 68 FC | 	wrlong	#1, fp
0cbb0     10 4E 85 F1 | 	sub	fp, #16
0cbb4                 | LR__1096
0cbb4     0C 4E 05 F1 | 	add	fp, #12
0cbb8     A7 20 02 FB | 	rdlong	local02, fp
0cbbc     0C 4E 85 F1 | 	sub	fp, #12
0cbc0     A7 20 62 FC | 	wrlong	local02, fp
0cbc4     10 4E 05 F1 | 	add	fp, #16
0cbc8     A7 20 02 FB | 	rdlong	local02, fp
0cbcc     08 4E 85 F1 | 	sub	fp, #8
0cbd0     A7 20 62 FC | 	wrlong	local02, fp
0cbd4     08 4E 85 F1 | 	sub	fp, #8
0cbd8     A7 12 02 F6 | 	mov	arg01, fp
0cbdc     D8 B4 BF FD | 	call	#_push
0cbe0     A7 F0 03 F6 | 	mov	ptra, fp
0cbe4     B2 00 A0 FD | 	call	#popregs_
0cbe8                 | _do_converttoint_ret
0cbe8     2D 00 64 FD | 	ret
0cbec                 | 
0cbec                 | ' 
0cbec                 | ' function converttoint (t1 as expr_result) as integer
0cbec                 | _converttoint
0cbec     02 4A 05 F6 | 	mov	COUNT_, #2
0cbf0     A8 00 A0 FD | 	call	#pushregs_
0cbf4     09 1F 02 F6 | 	mov	local01, arg01
0cbf8                 | ' 
0cbf8                 | ' select case t1.result_type
0cbf8     08 1E 06 F1 | 	add	local01, #8
0cbfc     0F 21 02 FB | 	rdlong	local02, local01
0cc00     08 1E 86 F1 | 	sub	local01, #8
0cc04     1C 20 86 F1 | 	sub	local02, #28
0cc08     04 20 26 F3 | 	fle	local02, #4
0cc0c     30 20 62 FD | 	jmprel	local02
0cc10                 | LR__1100
0cc10     10 00 90 FD | 	jmp	#LR__1101
0cc14     14 00 90 FD | 	jmp	#LR__1102
0cc18     18 00 90 FD | 	jmp	#LR__1103
0cc1c     24 00 90 FD | 	jmp	#LR__1104
0cc20     38 00 90 FD | 	jmp	#LR__1105
0cc24                 | LR__1101
0cc24     0F FB 01 FB | 	rdlong	result1, local01
0cc28     34 00 90 FD | 	jmp	#LR__1106
0cc2c                 | LR__1102
0cc2c     0F FB 01 FB | 	rdlong	result1, local01
0cc30     2C 00 90 FD | 	jmp	#LR__1106
0cc34                 | LR__1103
0cc34     0F 13 02 FB | 	rdlong	arg01, local01
0cc38     01 14 06 F6 | 	mov	arg02, #1
0cc3c     CC 9C B0 FD | 	call	#__system___float_tointeger
0cc40     1C 00 90 FD | 	jmp	#LR__1106
0cc44                 | LR__1104
0cc44     0F 13 02 FB | 	rdlong	arg01, local01
0cc48     E0 9F B0 FD | 	call	#__system____builtin_atof
0cc4c     FD 12 02 F6 | 	mov	arg01, result1
0cc50     00 14 06 F6 | 	mov	arg02, #0
0cc54     B4 9C B0 FD | 	call	#__system___float_tointeger
0cc58     04 00 90 FD | 	jmp	#LR__1106
0cc5c                 | LR__1105
0cc5c     00 FA 05 F6 | 	mov	result1, #0
0cc60                 | LR__1106
0cc60     A7 F0 03 F6 | 	mov	ptra, fp
0cc64     B2 00 A0 FD | 	call	#popregs_
0cc68                 | _converttoint_ret
0cc68     2D 00 64 FD | 	ret
0cc6c                 | 
0cc6c                 | ' 
0cc6c                 | ' sub do_rnd
0cc6c                 | _do_rnd
0cc6c     01 4A 05 F6 | 	mov	COUNT_, #1
0cc70     A8 00 A0 FD | 	call	#pushregs_
0cc74     10 F0 07 F1 | 	add	ptra, #16
0cc78     38 00 00 FF 
0cc7c     44 E4 05 F1 | 	add	objptr, ##28740
0cc80     F2 1E 02 FB | 	rdlong	local01, objptr
0cc84     0F 17 02 F6 | 	mov	arg03, local01
0cc88     01 16 66 F0 | 	shl	arg03, #1
0cc8c     0F 17 02 F1 | 	add	arg03, local01
0cc90     02 16 66 F0 | 	shl	arg03, #2
0cc94     03 00 00 FF 
0cc98     04 E4 85 F1 | 	sub	objptr, ##1540
0cc9c     F2 16 02 F1 | 	add	arg03, objptr
0cca0     0B 17 02 FB | 	rdlong	arg03, arg03
0cca4     0C 4E 05 F1 | 	add	fp, #12
0cca8     A7 16 62 FC | 	wrlong	arg03, fp
0ccac                 | ' 
0ccac                 | ' numpar=compiledline(lineptr_e).result.uresult
0ccac                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0ccac     0C 4E 85 F1 | 	sub	fp, #12
0ccb0     02 16 16 F2 | 	cmp	arg03, #2 wc
0ccb4     35 00 00 FF 
0ccb8     40 E4 85 F1 | 	sub	objptr, ##27200
0ccbc     3C 00 90 CD |  if_b	jmp	#LR__1110
0ccc0     00 12 06 F6 | 	mov	arg01, #0
0ccc4     14 C3 B0 FD | 	call	#__system___getiolock_0306
0ccc8     FD 12 02 F6 | 	mov	arg01, result1
0cccc     28 6E B0 FD | 	call	#__system___lockmem
0ccd0     18 01 00 FF 
0ccd4     50 15 06 F6 | 	mov	arg02, ##@LR__4233
0ccd8     00 12 06 F6 | 	mov	arg01, #0
0ccdc     00 16 06 F6 | 	mov	arg03, #0
0cce0     20 7A B0 FD | 	call	#__system___basic_print_string
0cce4     00 12 06 F6 | 	mov	arg01, #0
0cce8     F0 C2 B0 FD | 	call	#__system___getiolock_0306
0ccec     FD 00 68 FC | 	wrlong	#0, result1
0ccf0     27 12 06 F6 | 	mov	arg01, #39
0ccf4     94 38 B0 FD | 	call	#_printerror
0ccf8     2C 01 90 FD | 	jmp	#LR__1117
0ccfc                 | LR__1110
0ccfc                 | ' if numpar=0 then
0ccfc     0C 4E 05 F1 | 	add	fp, #12
0cd00     A7 FE 09 FB | 	rdlong	result3, fp wz
0cd04     0C 4E 85 F1 | 	sub	fp, #12
0cd08     20 00 90 5D |  if_ne	jmp	#LR__1111
0cd0c     08 4E 05 F1 | 	add	fp, #8
0cd10     A7 3A 68 FC | 	wrlong	#29, fp
0cd14     08 4E 85 F1 | 	sub	fp, #8
0cd18     1B FA 61 FD | 	getrnd	result1
0cd1c     A7 FA 61 FC | 	wrlong	result1, fp
0cd20     A7 12 02 F6 | 	mov	arg01, fp
0cd24     90 B3 BF FD | 	call	#_push
0cd28     FC 00 90 FD | 	jmp	#LR__1116
0cd2c                 | LR__1111
0cd2c     F0 B2 BF FD | 	call	#_pop
0cd30     A7 FA 61 FC | 	wrlong	result1, fp
0cd34     04 4E 05 F1 | 	add	fp, #4
0cd38     A7 FC 61 FC | 	wrlong	result2, fp
0cd3c     04 4E 05 F1 | 	add	fp, #4
0cd40     A7 FE 61 FC | 	wrlong	result3, fp
0cd44                 | '   t1=pop()
0cd44                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0cd44     08 4E 85 F1 | 	sub	fp, #8
0cd48     1C FE 0D F2 | 	cmp	result3, #28 wz
0cd4c     08 4E 05 51 |  if_ne	add	fp, #8
0cd50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cd54     08 4E 85 51 |  if_ne	sub	fp, #8
0cd58     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0cd5c     2C 00 90 5D |  if_ne	jmp	#LR__1112
0cd60     1B FA 61 FD | 	getrnd	result1
0cd64     A7 1E 02 FB | 	rdlong	local01, fp
0cd68     0F FB 11 FD | 	qdiv	result1, local01
0cd6c     A7 12 02 F6 | 	mov	arg01, fp
0cd70     19 1E 62 FD | 	getqy	local01
0cd74     A7 1E 62 FC | 	wrlong	local01, fp
0cd78     08 4E 05 F1 | 	add	fp, #8
0cd7c     A7 3A 68 FC | 	wrlong	#29, fp
0cd80     08 4E 85 F1 | 	sub	fp, #8
0cd84     30 B3 BF FD | 	call	#_push
0cd88     9C 00 90 FD | 	jmp	#LR__1115
0cd8c                 | LR__1112
0cd8c     08 4E 05 F1 | 	add	fp, #8
0cd90     A7 1E 02 FB | 	rdlong	local01, fp
0cd94     08 4E 85 F1 | 	sub	fp, #8
0cd98     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cd9c     48 00 90 5D |  if_ne	jmp	#LR__1113
0cda0     A7 12 02 FB | 	rdlong	arg01, fp
0cda4     00 C0 24 FF 
0cda8     00 14 06 F6 | 	mov	arg02, ##1233125376
0cdac     98 98 B0 FD | 	call	#__system___float_div
0cdb0     FD 1E 02 F6 | 	mov	local01, result1
0cdb4     1B 12 62 FD | 	getrnd	arg01
0cdb8     74 13 06 F4 | 	bitl	arg01, #372
0cdbc     58 93 B0 FD | 	call	#__system___float_fromuns
0cdc0     FD 14 02 F6 | 	mov	arg02, result1
0cdc4     0F 13 02 F6 | 	mov	arg01, local01
0cdc8     78 96 B0 FD | 	call	#__system___float_mul
0cdcc     A7 FA 61 FC | 	wrlong	result1, fp
0cdd0     08 4E 05 F1 | 	add	fp, #8
0cdd4     A7 3C 68 FC | 	wrlong	#30, fp
0cdd8     08 4E 85 F1 | 	sub	fp, #8
0cddc     A7 12 02 F6 | 	mov	arg01, fp
0cde0     D4 B2 BF FD | 	call	#_push
0cde4     40 00 90 FD | 	jmp	#LR__1114
0cde8                 | LR__1113
0cde8                 | '     print "rnd: "; : printerror(40) 
0cde8     00 12 06 F6 | 	mov	arg01, #0
0cdec     EC C1 B0 FD | 	call	#__system___getiolock_0306
0cdf0     FD 12 02 F6 | 	mov	arg01, result1
0cdf4     00 6D B0 FD | 	call	#__system___lockmem
0cdf8     18 01 00 FF 
0cdfc     56 15 06 F6 | 	mov	arg02, ##@LR__4234
0ce00     00 12 06 F6 | 	mov	arg01, #0
0ce04     00 16 06 F6 | 	mov	arg03, #0
0ce08     F8 78 B0 FD | 	call	#__system___basic_print_string
0ce0c     00 12 06 F6 | 	mov	arg01, #0
0ce10     C8 C1 B0 FD | 	call	#__system___getiolock_0306
0ce14     FD 00 68 FC | 	wrlong	#0, result1
0ce18     28 12 06 F6 | 	mov	arg01, #40
0ce1c     6C 37 B0 FD | 	call	#_printerror
0ce20     A7 12 02 F6 | 	mov	arg01, fp
0ce24     90 B2 BF FD | 	call	#_push
0ce28                 | LR__1114
0ce28                 | LR__1115
0ce28                 | LR__1116
0ce28                 | LR__1117
0ce28     A7 F0 03 F6 | 	mov	ptra, fp
0ce2c     B2 00 A0 FD | 	call	#popregs_
0ce30                 | _do_rnd_ret
0ce30     2D 00 64 FD | 	ret
0ce34                 | 
0ce34                 | ' 
0ce34                 | ' sub do_sin
0ce34                 | _do_sin
0ce34     03 4A 05 F6 | 	mov	COUNT_, #3
0ce38     A8 00 A0 FD | 	call	#pushregs_
0ce3c     10 F0 07 F1 | 	add	ptra, #16
0ce40     38 00 00 FF 
0ce44     44 E4 05 F1 | 	add	objptr, ##28740
0ce48     F2 1E 02 FB | 	rdlong	local01, objptr
0ce4c     0F 17 02 F6 | 	mov	arg03, local01
0ce50     01 16 66 F0 | 	shl	arg03, #1
0ce54     0F 17 02 F1 | 	add	arg03, local01
0ce58     02 16 66 F0 | 	shl	arg03, #2
0ce5c     03 00 00 FF 
0ce60     04 E4 85 F1 | 	sub	objptr, ##1540
0ce64     F2 16 02 F1 | 	add	arg03, objptr
0ce68     0B 17 02 FB | 	rdlong	arg03, arg03
0ce6c     0C 4E 05 F1 | 	add	fp, #12
0ce70     A7 16 62 FC | 	wrlong	arg03, fp
0ce74                 | ' 
0ce74                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce74                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0ce74     0C 4E 85 F1 | 	sub	fp, #12
0ce78     02 16 16 F2 | 	cmp	arg03, #2 wc
0ce7c     35 00 00 FF 
0ce80     40 E4 85 F1 | 	sub	objptr, ##27200
0ce84     0C 4E 05 C1 |  if_b	add	fp, #12
0ce88     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0ce8c     0C 4E 85 C1 |  if_b	sub	fp, #12
0ce90     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0ce94     00 12 06 F6 | 	mov	arg01, #0
0ce98     40 C1 B0 FD | 	call	#__system___getiolock_0306
0ce9c     FD 12 02 F6 | 	mov	arg01, result1
0cea0     54 6C B0 FD | 	call	#__system___lockmem
0cea4     18 01 00 FF 
0cea8     5C 15 06 F6 | 	mov	arg02, ##@LR__4235
0ceac     00 12 06 F6 | 	mov	arg01, #0
0ceb0     00 16 06 F6 | 	mov	arg03, #0
0ceb4     4C 78 B0 FD | 	call	#__system___basic_print_string
0ceb8     00 12 06 F6 | 	mov	arg01, #0
0cebc     1C C1 B0 FD | 	call	#__system___getiolock_0306
0cec0     FD 00 68 FC | 	wrlong	#0, result1
0cec4     27 12 06 F6 | 	mov	arg01, #39
0cec8     C0 36 B0 FD | 	call	#_printerror
0cecc     40 01 90 FD | 	jmp	#LR__1125
0ced0                 | LR__1120
0ced0     4C B1 BF FD | 	call	#_pop
0ced4     A7 FA 61 FC | 	wrlong	result1, fp
0ced8     04 4E 05 F1 | 	add	fp, #4
0cedc     A7 FC 61 FC | 	wrlong	result2, fp
0cee0     04 4E 05 F1 | 	add	fp, #4
0cee4     A7 FE 61 FC | 	wrlong	result3, fp
0cee8                 | ' t1=pop()
0cee8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0cee8     08 4E 85 F1 | 	sub	fp, #8
0ceec     1C FE 0D F2 | 	cmp	result3, #28 wz
0cef0     08 4E 05 51 |  if_ne	add	fp, #8
0cef4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cef8     08 4E 85 51 |  if_ne	sub	fp, #8
0cefc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0cf00     70 00 90 5D |  if_ne	jmp	#LR__1121
0cf04     A7 1E 02 FB | 	rdlong	local01, fp
0cf08     0F 1F 52 F6 | 	abs	local01, local01 wc
0cf0c     68 1F 16 FD | 	qdiv	local01, #360
0cf10     87 24 20 FF 
0cf14     DB 21 06 F6 | 	mov	local02, ##1078530011
0cf18     19 1E 62 FD | 	getqy	local01
0cf1c     0F 13 82 F6 | 	negc	arg01, local01
0cf20     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf24     1F 22 C6 C9 |  if_b	decod	local03, #31
0cf28     00 22 06 36 |  if_ae	mov	local03, #0
0cf2c     E8 91 B0 FD | 	call	#__system___float_fromuns
0cf30     11 FB 61 F5 | 	xor	result1, local03
0cf34     FD 12 02 F6 | 	mov	arg01, result1
0cf38     00 9A 21 FF 
0cf3c     00 14 06 F6 | 	mov	arg02, ##1127481344
0cf40     04 97 B0 FD | 	call	#__system___float_div
0cf44     FD 14 02 F6 | 	mov	arg02, result1
0cf48     10 13 02 F6 | 	mov	arg01, local02
0cf4c     F4 94 B0 FD | 	call	#__system___float_mul
0cf50     FD 12 02 F6 | 	mov	arg01, result1
0cf54     28 9E B0 FD | 	call	#__system____builtin_sinf
0cf58     A7 FA 61 FC | 	wrlong	result1, fp
0cf5c     08 4E 05 F1 | 	add	fp, #8
0cf60     A7 3C 68 FC | 	wrlong	#30, fp
0cf64     08 4E 85 F1 | 	sub	fp, #8
0cf68     A7 12 02 F6 | 	mov	arg01, fp
0cf6c     48 B1 BF FD | 	call	#_push
0cf70     9C 00 90 FD | 	jmp	#LR__1124
0cf74                 | LR__1121
0cf74     08 4E 05 F1 | 	add	fp, #8
0cf78     A7 20 02 FB | 	rdlong	local02, fp
0cf7c     08 4E 85 F1 | 	sub	fp, #8
0cf80     1E 20 0E F2 | 	cmp	local02, #30 wz
0cf84     48 00 90 5D |  if_ne	jmp	#LR__1122
0cf88     87 24 20 FF 
0cf8c     DB 21 06 F6 | 	mov	local02, ##1078530011
0cf90     A7 12 02 FB | 	rdlong	arg01, fp
0cf94     00 9A 21 FF 
0cf98     00 14 06 F6 | 	mov	arg02, ##1127481344
0cf9c     A8 96 B0 FD | 	call	#__system___float_div
0cfa0     FD 14 02 F6 | 	mov	arg02, result1
0cfa4     10 13 02 F6 | 	mov	arg01, local02
0cfa8     98 94 B0 FD | 	call	#__system___float_mul
0cfac     FD 12 02 F6 | 	mov	arg01, result1
0cfb0     CC 9D B0 FD | 	call	#__system____builtin_sinf
0cfb4     A7 FA 61 FC | 	wrlong	result1, fp
0cfb8     08 4E 05 F1 | 	add	fp, #8
0cfbc     A7 3C 68 FC | 	wrlong	#30, fp
0cfc0     08 4E 85 F1 | 	sub	fp, #8
0cfc4     A7 12 02 F6 | 	mov	arg01, fp
0cfc8     EC B0 BF FD | 	call	#_push
0cfcc     40 00 90 FD | 	jmp	#LR__1123
0cfd0                 | LR__1122
0cfd0                 | '   print "sin: "; : printerror(40) 
0cfd0     00 12 06 F6 | 	mov	arg01, #0
0cfd4     04 C0 B0 FD | 	call	#__system___getiolock_0306
0cfd8     FD 12 02 F6 | 	mov	arg01, result1
0cfdc     18 6B B0 FD | 	call	#__system___lockmem
0cfe0     18 01 00 FF 
0cfe4     62 15 06 F6 | 	mov	arg02, ##@LR__4236
0cfe8     00 12 06 F6 | 	mov	arg01, #0
0cfec     00 16 06 F6 | 	mov	arg03, #0
0cff0     10 77 B0 FD | 	call	#__system___basic_print_string
0cff4     00 12 06 F6 | 	mov	arg01, #0
0cff8     E0 BF B0 FD | 	call	#__system___getiolock_0306
0cffc     FD 00 68 FC | 	wrlong	#0, result1
0d000     28 12 06 F6 | 	mov	arg01, #40
0d004     84 35 B0 FD | 	call	#_printerror
0d008     A7 12 02 F6 | 	mov	arg01, fp
0d00c     A8 B0 BF FD | 	call	#_push
0d010                 | LR__1123
0d010                 | LR__1124
0d010                 | LR__1125
0d010     A7 F0 03 F6 | 	mov	ptra, fp
0d014     B2 00 A0 FD | 	call	#popregs_
0d018                 | _do_sin_ret
0d018     2D 00 64 FD | 	ret
0d01c                 | 
0d01c                 | ' 
0d01c                 | ' sub do_stick
0d01c                 | _do_stick
0d01c     01 4A 05 F6 | 	mov	COUNT_, #1
0d020     A8 00 A0 FD | 	call	#pushregs_
0d024     10 F0 07 F1 | 	add	ptra, #16
0d028     38 00 00 FF 
0d02c     44 E4 05 F1 | 	add	objptr, ##28740
0d030     F2 1E 02 FB | 	rdlong	local01, objptr
0d034     0F 17 02 F6 | 	mov	arg03, local01
0d038     01 16 66 F0 | 	shl	arg03, #1
0d03c     0F 17 02 F1 | 	add	arg03, local01
0d040     02 16 66 F0 | 	shl	arg03, #2
0d044     03 00 00 FF 
0d048     04 E4 85 F1 | 	sub	objptr, ##1540
0d04c     F2 16 02 F1 | 	add	arg03, objptr
0d050     0B 17 02 FB | 	rdlong	arg03, arg03
0d054     0C 4E 05 F1 | 	add	fp, #12
0d058     A7 16 62 FC | 	wrlong	arg03, fp
0d05c                 | ' 
0d05c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d05c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0d05c     0C 4E 85 F1 | 	sub	fp, #12
0d060     02 16 16 F2 | 	cmp	arg03, #2 wc
0d064     35 00 00 FF 
0d068     40 E4 85 F1 | 	sub	objptr, ##27200
0d06c     3C 00 90 CD |  if_b	jmp	#LR__1130
0d070     00 12 06 F6 | 	mov	arg01, #0
0d074     64 BF B0 FD | 	call	#__system___getiolock_0306
0d078     FD 12 02 F6 | 	mov	arg01, result1
0d07c     78 6A B0 FD | 	call	#__system___lockmem
0d080     18 01 00 FF 
0d084     68 15 06 F6 | 	mov	arg02, ##@LR__4237
0d088     00 12 06 F6 | 	mov	arg01, #0
0d08c     00 16 06 F6 | 	mov	arg03, #0
0d090     70 76 B0 FD | 	call	#__system___basic_print_string
0d094     00 12 06 F6 | 	mov	arg01, #0
0d098     40 BF B0 FD | 	call	#__system___getiolock_0306
0d09c     FD 00 68 FC | 	wrlong	#0, result1
0d0a0     27 12 06 F6 | 	mov	arg01, #39
0d0a4     E4 34 B0 FD | 	call	#_printerror
0d0a8     E8 00 90 FD | 	jmp	#LR__1134
0d0ac                 | LR__1130
0d0ac                 | ' 
0d0ac                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0d0ac     0C 4E 05 F1 | 	add	fp, #12
0d0b0     A7 FE 09 FB | 	rdlong	result3, fp wz
0d0b4     0C 4E 85 F1 | 	sub	fp, #12
0d0b8     30 00 90 5D |  if_ne	jmp	#LR__1131
0d0bc     48 00 00 FF 
0d0c0     C0 E5 05 F1 | 	add	objptr, ##37312
0d0c4     F2 1E 02 FB | 	rdlong	local01, objptr
0d0c8     48 00 00 FF 
0d0cc     C0 E5 85 F1 | 	sub	objptr, ##37312
0d0d0     A7 1E 62 FC | 	wrlong	local01, fp
0d0d4     08 4E 05 F1 | 	add	fp, #8
0d0d8     A7 3A 68 FC | 	wrlong	#29, fp
0d0dc     08 4E 85 F1 | 	sub	fp, #8
0d0e0     A7 12 02 F6 | 	mov	arg01, fp
0d0e4     D0 AF BF FD | 	call	#_push
0d0e8     A8 00 90 FD | 	jmp	#LR__1134
0d0ec                 | LR__1131
0d0ec     30 AF BF FD | 	call	#_pop
0d0f0     A7 FA 61 FC | 	wrlong	result1, fp
0d0f4     04 4E 05 F1 | 	add	fp, #4
0d0f8     A7 FC 61 FC | 	wrlong	result2, fp
0d0fc     04 4E 05 F1 | 	add	fp, #4
0d100     A7 FE 61 FC | 	wrlong	result3, fp
0d104                 | ' 
0d104                 | ' t1=pop()
0d104                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0d104     08 4E 85 F1 | 	sub	fp, #8
0d108     1C FE 0D F2 | 	cmp	result3, #28 wz
0d10c     08 4E 05 51 |  if_ne	add	fp, #8
0d110     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d114     08 4E 85 51 |  if_ne	sub	fp, #8
0d118     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d11c     6C 00 90 5D |  if_ne	jmp	#LR__1133
0d120     A7 1E 02 FB | 	rdlong	local01, fp
0d124     49 00 00 FF 
0d128     80 E4 05 F1 | 	add	objptr, ##37504
0d12c     F2 1E 62 FC | 	wrlong	local01, objptr
0d130                 | '   q=t1.result.uresult
0d130                 | '   if q<7 then 
0d130     49 00 00 FF 
0d134     80 E4 85 F1 | 	sub	objptr, ##37504
0d138     07 1E 56 F2 | 	cmps	local01, #7 wc
0d13c     40 00 90 3D |  if_ae	jmp	#LR__1132
0d140     49 00 00 FF 
0d144     80 E4 05 F1 | 	add	objptr, ##37504
0d148     F2 1E 02 FB | 	rdlong	local01, objptr
0d14c     02 1E 66 F0 | 	shl	local01, #2
0d150     C0 E4 85 F1 | 	sub	objptr, #192
0d154     F2 1E 02 F1 | 	add	local01, objptr
0d158     0F 1F 02 FB | 	rdlong	local01, local01
0d15c     A7 1E 62 FC | 	wrlong	local01, fp
0d160     08 4E 05 F1 | 	add	fp, #8
0d164     A7 3A 68 FC | 	wrlong	#29, fp
0d168     08 4E 85 F1 | 	sub	fp, #8
0d16c     A7 12 02 F6 | 	mov	arg01, fp
0d170     48 00 00 FF 
0d174     C0 E5 85 F1 | 	sub	objptr, ##37312
0d178     3C AF BF FD | 	call	#_push
0d17c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0d17c     14 00 90 FD | 	jmp	#LR__1134
0d180                 | LR__1132
0d180     29 12 06 F6 | 	mov	arg01, #41
0d184     04 34 B0 FD | 	call	#_printerror
0d188                 | '      printerror(41) : return
0d188     08 00 90 FD | 	jmp	#LR__1134
0d18c                 | LR__1133
0d18c     29 12 06 F6 | 	mov	arg01, #41
0d190     F8 33 B0 FD | 	call	#_printerror
0d194                 | LR__1134
0d194     A7 F0 03 F6 | 	mov	ptra, fp
0d198     B2 00 A0 FD | 	call	#popregs_
0d19c                 | _do_stick_ret
0d19c     2D 00 64 FD | 	ret
0d1a0                 | 
0d1a0                 | ' 
0d1a0                 | ' sub do_strig
0d1a0                 | _do_strig
0d1a0     01 4A 05 F6 | 	mov	COUNT_, #1
0d1a4     A8 00 A0 FD | 	call	#pushregs_
0d1a8     10 F0 07 F1 | 	add	ptra, #16
0d1ac     38 00 00 FF 
0d1b0     44 E4 05 F1 | 	add	objptr, ##28740
0d1b4     F2 1E 02 FB | 	rdlong	local01, objptr
0d1b8     0F 17 02 F6 | 	mov	arg03, local01
0d1bc     01 16 66 F0 | 	shl	arg03, #1
0d1c0     0F 17 02 F1 | 	add	arg03, local01
0d1c4     02 16 66 F0 | 	shl	arg03, #2
0d1c8     03 00 00 FF 
0d1cc     04 E4 85 F1 | 	sub	objptr, ##1540
0d1d0     F2 16 02 F1 | 	add	arg03, objptr
0d1d4     0B 17 02 FB | 	rdlong	arg03, arg03
0d1d8     0C 4E 05 F1 | 	add	fp, #12
0d1dc     A7 16 62 FC | 	wrlong	arg03, fp
0d1e0                 | ' 
0d1e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0d1e0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0d1e0     0C 4E 85 F1 | 	sub	fp, #12
0d1e4     02 16 16 F2 | 	cmp	arg03, #2 wc
0d1e8     35 00 00 FF 
0d1ec     40 E4 85 F1 | 	sub	objptr, ##27200
0d1f0     3C 00 90 CD |  if_b	jmp	#LR__1140
0d1f4     00 12 06 F6 | 	mov	arg01, #0
0d1f8     E0 BD B0 FD | 	call	#__system___getiolock_0306
0d1fc     FD 12 02 F6 | 	mov	arg01, result1
0d200     F4 68 B0 FD | 	call	#__system___lockmem
0d204     18 01 00 FF 
0d208     70 15 06 F6 | 	mov	arg02, ##@LR__4238
0d20c     00 12 06 F6 | 	mov	arg01, #0
0d210     00 16 06 F6 | 	mov	arg03, #0
0d214     EC 74 B0 FD | 	call	#__system___basic_print_string
0d218     00 12 06 F6 | 	mov	arg01, #0
0d21c     BC BD B0 FD | 	call	#__system___getiolock_0306
0d220     FD 00 68 FC | 	wrlong	#0, result1
0d224     27 12 06 F6 | 	mov	arg01, #39
0d228     60 33 B0 FD | 	call	#_printerror
0d22c     E8 00 90 FD | 	jmp	#LR__1144
0d230                 | LR__1140
0d230                 | ' 
0d230                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0d230     0C 4E 05 F1 | 	add	fp, #12
0d234     A7 FE 09 FB | 	rdlong	result3, fp wz
0d238     0C 4E 85 F1 | 	sub	fp, #12
0d23c     30 00 90 5D |  if_ne	jmp	#LR__1141
0d240     48 00 00 FF 
0d244     DC E5 05 F1 | 	add	objptr, ##37340
0d248     F2 1E 02 FB | 	rdlong	local01, objptr
0d24c     48 00 00 FF 
0d250     DC E5 85 F1 | 	sub	objptr, ##37340
0d254     A7 1E 62 FC | 	wrlong	local01, fp
0d258     08 4E 05 F1 | 	add	fp, #8
0d25c     A7 3A 68 FC | 	wrlong	#29, fp
0d260     08 4E 85 F1 | 	sub	fp, #8
0d264     A7 12 02 F6 | 	mov	arg01, fp
0d268     4C AE BF FD | 	call	#_push
0d26c     A8 00 90 FD | 	jmp	#LR__1144
0d270                 | LR__1141
0d270     AC AD BF FD | 	call	#_pop
0d274     A7 FA 61 FC | 	wrlong	result1, fp
0d278     04 4E 05 F1 | 	add	fp, #4
0d27c     A7 FC 61 FC | 	wrlong	result2, fp
0d280     04 4E 05 F1 | 	add	fp, #4
0d284     A7 FE 61 FC | 	wrlong	result3, fp
0d288                 | ' 
0d288                 | ' t1=pop()
0d288                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0d288     08 4E 85 F1 | 	sub	fp, #8
0d28c     1C FE 0D F2 | 	cmp	result3, #28 wz
0d290     08 4E 05 51 |  if_ne	add	fp, #8
0d294     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d298     08 4E 85 51 |  if_ne	sub	fp, #8
0d29c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d2a0     6C 00 90 5D |  if_ne	jmp	#LR__1143
0d2a4     A7 1E 02 FB | 	rdlong	local01, fp
0d2a8     49 00 00 FF 
0d2ac     80 E4 05 F1 | 	add	objptr, ##37504
0d2b0     F2 1E 62 FC | 	wrlong	local01, objptr
0d2b4                 | '   q=t1.result.uresult
0d2b4                 | '   if q<7 then 
0d2b4     49 00 00 FF 
0d2b8     80 E4 85 F1 | 	sub	objptr, ##37504
0d2bc     07 1E 56 F2 | 	cmps	local01, #7 wc
0d2c0     40 00 90 3D |  if_ae	jmp	#LR__1142
0d2c4     49 00 00 FF 
0d2c8     80 E4 05 F1 | 	add	objptr, ##37504
0d2cc     F2 1E 02 FB | 	rdlong	local01, objptr
0d2d0     02 1E 66 F0 | 	shl	local01, #2
0d2d4     A4 E4 85 F1 | 	sub	objptr, #164
0d2d8     F2 1E 02 F1 | 	add	local01, objptr
0d2dc     0F 1F 02 FB | 	rdlong	local01, local01
0d2e0     A7 1E 62 FC | 	wrlong	local01, fp
0d2e4     08 4E 05 F1 | 	add	fp, #8
0d2e8     A7 3A 68 FC | 	wrlong	#29, fp
0d2ec     08 4E 85 F1 | 	sub	fp, #8
0d2f0     A7 12 02 F6 | 	mov	arg01, fp
0d2f4     48 00 00 FF 
0d2f8     DC E5 85 F1 | 	sub	objptr, ##37340
0d2fc     B8 AD BF FD | 	call	#_push
0d300                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0d300     14 00 90 FD | 	jmp	#LR__1144
0d304                 | LR__1142
0d304     29 12 06 F6 | 	mov	arg01, #41
0d308     80 32 B0 FD | 	call	#_printerror
0d30c                 | '      printerror(41) : return
0d30c     08 00 90 FD | 	jmp	#LR__1144
0d310                 | LR__1143
0d310     29 12 06 F6 | 	mov	arg01, #41
0d314     74 32 B0 FD | 	call	#_printerror
0d318                 | LR__1144
0d318     A7 F0 03 F6 | 	mov	ptra, fp
0d31c     B2 00 A0 FD | 	call	#popregs_
0d320                 | _do_strig_ret
0d320     2D 00 64 FD | 	ret
0d324                 | 
0d324                 | ' 
0d324                 | ' sub do_getpixel
0d324                 | _do_getpixel
0d324     00 4A 05 F6 | 	mov	COUNT_, #0
0d328     A8 00 A0 FD | 	call	#pushregs_
0d32c     24 F0 07 F1 | 	add	ptra, #36
0d330     38 00 00 FF 
0d334     44 E4 05 F1 | 	add	objptr, ##28740
0d338     F2 16 02 FB | 	rdlong	arg03, objptr
0d33c     0B 15 02 F6 | 	mov	arg02, arg03
0d340     01 14 66 F0 | 	shl	arg02, #1
0d344     0B 15 02 F1 | 	add	arg02, arg03
0d348     02 14 66 F0 | 	shl	arg02, #2
0d34c     03 00 00 FF 
0d350     04 E4 85 F1 | 	sub	objptr, ##1540
0d354     F2 14 02 F1 | 	add	arg02, objptr
0d358     0A 17 02 FB | 	rdlong	arg03, arg02
0d35c     18 4E 05 F1 | 	add	fp, #24
0d360     A7 16 62 FC | 	wrlong	arg03, fp
0d364                 | ' 
0d364                 | ' numpar=compiledline(lineptr_e).result.uresult
0d364                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0d364     18 4E 85 F1 | 	sub	fp, #24
0d368     02 16 0E F2 | 	cmp	arg03, #2 wz
0d36c     35 00 00 FF 
0d370     40 E4 85 F1 | 	sub	objptr, ##27200
0d374     3C 00 90 AD |  if_e	jmp	#LR__1150
0d378     00 12 06 F6 | 	mov	arg01, #0
0d37c     5C BC B0 FD | 	call	#__system___getiolock_0306
0d380     FD 12 02 F6 | 	mov	arg01, result1
0d384     70 67 B0 FD | 	call	#__system___lockmem
0d388     18 01 00 FF 
0d38c     78 15 06 F6 | 	mov	arg02, ##@LR__4239
0d390     00 12 06 F6 | 	mov	arg01, #0
0d394     00 16 06 F6 | 	mov	arg03, #0
0d398     68 73 B0 FD | 	call	#__system___basic_print_string
0d39c     00 12 06 F6 | 	mov	arg01, #0
0d3a0     38 BC B0 FD | 	call	#__system___getiolock_0306
0d3a4     FD 00 68 FC | 	wrlong	#0, result1
0d3a8     27 12 06 F6 | 	mov	arg01, #39
0d3ac     DC 31 B0 FD | 	call	#_printerror
0d3b0     B4 00 90 FD | 	jmp	#LR__1151
0d3b4                 | LR__1150
0d3b4     68 AC BF FD | 	call	#_pop
0d3b8     FD 16 02 F6 | 	mov	arg03, result1
0d3bc     FE 14 02 F6 | 	mov	arg02, result2
0d3c0     FF 12 02 F6 | 	mov	arg01, result3
0d3c4     0C 4E 05 F1 | 	add	fp, #12
0d3c8     A7 16 62 FC | 	wrlong	arg03, fp
0d3cc     04 4E 05 F1 | 	add	fp, #4
0d3d0     A7 14 62 FC | 	wrlong	arg02, fp
0d3d4     04 4E 05 F1 | 	add	fp, #4
0d3d8     A7 12 62 FC | 	wrlong	arg01, fp
0d3dc     14 4E 85 F1 | 	sub	fp, #20
0d3e0     3C AC BF FD | 	call	#_pop
0d3e4     FF 16 02 F6 | 	mov	arg03, result3
0d3e8     A7 FA 61 FC | 	wrlong	result1, fp
0d3ec     04 4E 05 F1 | 	add	fp, #4
0d3f0     A7 FC 61 FC | 	wrlong	result2, fp
0d3f4     04 4E 05 F1 | 	add	fp, #4
0d3f8     A7 16 62 FC | 	wrlong	arg03, fp
0d3fc     08 4E 85 F1 | 	sub	fp, #8
0d400     A7 12 02 F6 | 	mov	arg01, fp
0d404     E4 F7 BF FD | 	call	#_converttoint
0d408     1C 4E 05 F1 | 	add	fp, #28
0d40c     A7 FA 61 FC | 	wrlong	result1, fp
0d410     10 4E 85 F1 | 	sub	fp, #16
0d414     A7 12 02 F6 | 	mov	arg01, fp
0d418     0C 4E 85 F1 | 	sub	fp, #12
0d41c     CC F7 BF FD | 	call	#_converttoint
0d420     FD 16 02 F6 | 	mov	arg03, result1
0d424     20 4E 05 F1 | 	add	fp, #32
0d428     A7 16 62 FC | 	wrlong	arg03, fp
0d42c     F2 12 02 FB | 	rdlong	arg01, objptr
0d430     04 4E 85 F1 | 	sub	fp, #4
0d434     A7 FE 01 FB | 	rdlong	result3, fp
0d438     FF 12 02 F1 | 	add	arg01, result3
0d43c     1C 4E 85 F1 | 	sub	fp, #28
0d440     0A 16 66 F0 | 	shl	arg03, #10
0d444     0B 13 02 F1 | 	add	arg01, arg03
0d448     A4 32 B0 FD | 	call	#_pspeek
0d44c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d450     A7 FA 61 FC | 	wrlong	result1, fp
0d454     08 4E 05 F1 | 	add	fp, #8
0d458     A7 3A 68 FC | 	wrlong	#29, fp
0d45c     08 4E 85 F1 | 	sub	fp, #8
0d460     A7 12 02 F6 | 	mov	arg01, fp
0d464     50 AC BF FD | 	call	#_push
0d468                 | LR__1151
0d468     A7 F0 03 F6 | 	mov	ptra, fp
0d46c     B2 00 A0 FD | 	call	#popregs_
0d470                 | _do_getpixel_ret
0d470     2D 00 64 FD | 	ret
0d474                 | 
0d474                 | ' 
0d474                 | ' 
0d474                 | ' 
0d474                 | ' sub do_defsprite
0d474                 | _do_defsprite
0d474     07 4A 05 F6 | 	mov	COUNT_, #7
0d478     A8 00 A0 FD | 	call	#pushregs_
0d47c     5C F0 07 F1 | 	add	ptra, #92
0d480     9C AB BF FD | 	call	#_pop
0d484     FD 16 02 F6 | 	mov	arg03, result1
0d488     FE 14 02 F6 | 	mov	arg02, result2
0d48c     FF 12 02 F6 | 	mov	arg01, result3
0d490     30 4E 05 F1 | 	add	fp, #48
0d494     A7 16 62 FC | 	wrlong	arg03, fp
0d498     04 4E 05 F1 | 	add	fp, #4
0d49c     A7 14 62 FC | 	wrlong	arg02, fp
0d4a0     04 4E 05 F1 | 	add	fp, #4
0d4a4     A7 12 62 FC | 	wrlong	arg01, fp
0d4a8     38 4E 85 F1 | 	sub	fp, #56
0d4ac     70 AB BF FD | 	call	#_pop
0d4b0     FD 16 02 F6 | 	mov	arg03, result1
0d4b4     FE 14 02 F6 | 	mov	arg02, result2
0d4b8     FF 12 02 F6 | 	mov	arg01, result3
0d4bc     24 4E 05 F1 | 	add	fp, #36
0d4c0     A7 16 62 FC | 	wrlong	arg03, fp
0d4c4     04 4E 05 F1 | 	add	fp, #4
0d4c8     A7 14 62 FC | 	wrlong	arg02, fp
0d4cc     04 4E 05 F1 | 	add	fp, #4
0d4d0     A7 12 62 FC | 	wrlong	arg01, fp
0d4d4     2C 4E 85 F1 | 	sub	fp, #44
0d4d8     44 AB BF FD | 	call	#_pop
0d4dc     FD 16 02 F6 | 	mov	arg03, result1
0d4e0     FE 14 02 F6 | 	mov	arg02, result2
0d4e4     FF 12 02 F6 | 	mov	arg01, result3
0d4e8     18 4E 05 F1 | 	add	fp, #24
0d4ec     A7 16 62 FC | 	wrlong	arg03, fp
0d4f0     04 4E 05 F1 | 	add	fp, #4
0d4f4     A7 14 62 FC | 	wrlong	arg02, fp
0d4f8     04 4E 05 F1 | 	add	fp, #4
0d4fc     A7 12 62 FC | 	wrlong	arg01, fp
0d500     20 4E 85 F1 | 	sub	fp, #32
0d504     18 AB BF FD | 	call	#_pop
0d508     FD 16 02 F6 | 	mov	arg03, result1
0d50c     FE 14 02 F6 | 	mov	arg02, result2
0d510     FF 12 02 F6 | 	mov	arg01, result3
0d514     0C 4E 05 F1 | 	add	fp, #12
0d518     A7 16 62 FC | 	wrlong	arg03, fp
0d51c     04 4E 05 F1 | 	add	fp, #4
0d520     A7 14 62 FC | 	wrlong	arg02, fp
0d524     04 4E 05 F1 | 	add	fp, #4
0d528     A7 12 62 FC | 	wrlong	arg01, fp
0d52c     14 4E 85 F1 | 	sub	fp, #20
0d530     EC AA BF FD | 	call	#_pop
0d534     FF 16 02 F6 | 	mov	arg03, result3
0d538     A7 FA 61 FC | 	wrlong	result1, fp
0d53c     04 4E 05 F1 | 	add	fp, #4
0d540     A7 FC 61 FC | 	wrlong	result2, fp
0d544     04 4E 05 F1 | 	add	fp, #4
0d548     A7 16 62 FC | 	wrlong	arg03, fp
0d54c     08 4E 85 F1 | 	sub	fp, #8
0d550     A7 12 02 F6 | 	mov	arg01, fp
0d554     94 F6 BF FD | 	call	#_converttoint
0d558     3C 4E 05 F1 | 	add	fp, #60
0d55c     A7 FA 61 FC | 	wrlong	result1, fp
0d560     30 4E 85 F1 | 	sub	fp, #48
0d564     A7 12 02 F6 | 	mov	arg01, fp
0d568     0C 4E 85 F1 | 	sub	fp, #12
0d56c     7C F6 BF FD | 	call	#_converttoint
0d570     40 4E 05 F1 | 	add	fp, #64
0d574     A7 FA 61 FC | 	wrlong	result1, fp
0d578     28 4E 85 F1 | 	sub	fp, #40
0d57c     A7 12 02 F6 | 	mov	arg01, fp
0d580     18 4E 85 F1 | 	sub	fp, #24
0d584     64 F6 BF FD | 	call	#_converttoint
0d588     44 4E 05 F1 | 	add	fp, #68
0d58c     A7 FA 61 FC | 	wrlong	result1, fp
0d590     20 4E 85 F1 | 	sub	fp, #32
0d594     A7 12 02 F6 | 	mov	arg01, fp
0d598     24 4E 85 F1 | 	sub	fp, #36
0d59c     4C F6 BF FD | 	call	#_converttoint
0d5a0     48 4E 05 F1 | 	add	fp, #72
0d5a4     A7 FA 61 FC | 	wrlong	result1, fp
0d5a8     18 4E 85 F1 | 	sub	fp, #24
0d5ac     A7 12 02 F6 | 	mov	arg01, fp
0d5b0     30 4E 85 F1 | 	sub	fp, #48
0d5b4     34 F6 BF FD | 	call	#_converttoint
0d5b8     4C 4E 05 F1 | 	add	fp, #76
0d5bc     A7 FA 61 FC | 	wrlong	result1, fp
0d5c0                 | ' 
0d5c0                 | ' t5=pop()
0d5c0                 | ' t4=pop()
0d5c0                 | ' t3=pop()
0d5c0                 | ' t2=pop()
0d5c0                 | ' t1=pop()
0d5c0                 | ' 
0d5c0                 | ' ' do convert, defsprite is not a racing command
0d5c0                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0d5c0                 | '  
0d5c0                 | ' ' todo: check parameters for linits
0d5c0                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0d5c0     10 4E 85 F1 | 	sub	fp, #16
0d5c4     A7 16 02 FB | 	rdlong	arg03, fp
0d5c8     3C 4E 85 F1 | 	sub	fp, #60
0d5cc     02 16 66 F0 | 	shl	arg03, #2
0d5d0     48 00 00 FF 
0d5d4     F8 E5 05 F1 | 	add	objptr, ##37368
0d5d8     F2 16 02 F1 | 	add	arg03, objptr
0d5dc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d5e0     48 00 00 FF 
0d5e4     F8 E5 85 F1 | 	sub	objptr, ##37368
0d5e8     2C 00 90 AD |  if_e	jmp	#LR__1160
0d5ec     3C 4E 05 F1 | 	add	fp, #60
0d5f0     A7 16 02 FB | 	rdlong	arg03, fp
0d5f4     3C 4E 85 F1 | 	sub	fp, #60
0d5f8     02 16 66 F0 | 	shl	arg03, #2
0d5fc     48 00 00 FF 
0d600     F8 E5 05 F1 | 	add	objptr, ##37368
0d604     F2 16 02 F1 | 	add	arg03, objptr
0d608     0B 13 02 FB | 	rdlong	arg01, arg03
0d60c     48 00 00 FF 
0d610     F8 E5 85 F1 | 	sub	objptr, ##37368
0d614     BC 9F B0 FD | 	call	#__system___gc_free
0d618                 | LR__1160
0d618     3C 4E 05 F1 | 	add	fp, #60
0d61c     A7 1E 02 FB | 	rdlong	local01, fp
0d620     0C 4E 05 F1 | 	add	fp, #12
0d624     A7 16 02 FB | 	rdlong	arg03, fp
0d628     04 4E 05 F1 | 	add	fp, #4
0d62c     A7 14 02 FB | 	rdlong	arg02, fp
0d630     0A 17 02 FD | 	qmul	arg03, arg02
0d634     02 1E 66 F0 | 	shl	local01, #2
0d638     48 00 00 FF 
0d63c     F8 E5 05 F1 | 	add	objptr, ##37368
0d640     F2 1E 02 F1 | 	add	local01, objptr
0d644     4C 4E 85 F1 | 	sub	fp, #76
0d648     48 00 00 FF 
0d64c     F8 E5 85 F1 | 	sub	objptr, ##37368
0d650     18 12 62 FD | 	getqx	arg01
0d654     40 9E B0 FD | 	call	#__system___gc_alloc_managed
0d658     0F FB 61 FC | 	wrlong	result1, local01
0d65c                 | ' for y=a3 to a3+a5-1
0d65c     44 4E 05 F1 | 	add	fp, #68
0d660     A7 20 02 FB | 	rdlong	local02, fp
0d664     0C 4E 05 F1 | 	add	fp, #12
0d668     A7 20 62 FC | 	wrlong	local02, fp
0d66c     0C 4E 85 F1 | 	sub	fp, #12
0d670     A7 22 02 FB | 	rdlong	local03, fp
0d674     08 4E 05 F1 | 	add	fp, #8
0d678     A7 24 02 FB | 	rdlong	local04, fp
0d67c     4C 4E 85 F1 | 	sub	fp, #76
0d680     12 23 02 F1 | 	add	local03, local04
0d684                 | LR__1161
0d684     50 4E 05 F1 | 	add	fp, #80
0d688     A7 20 02 FB | 	rdlong	local02, fp
0d68c     50 4E 85 F1 | 	sub	fp, #80
0d690     11 21 52 F2 | 	cmps	local02, local03 wc
0d694     10 01 90 3D |  if_ae	jmp	#LR__1164
0d698                 | '   for x=a2 to a4+a2-1
0d698     40 4E 05 F1 | 	add	fp, #64
0d69c     A7 1E 02 FB | 	rdlong	local01, fp
0d6a0     49 00 00 FF 
0d6a4     54 E4 05 F1 | 	add	objptr, ##37460
0d6a8     F2 1E 62 FC | 	wrlong	local01, objptr
0d6ac     49 00 00 FF 
0d6b0     54 E4 85 F1 | 	sub	objptr, ##37460
0d6b4     08 4E 05 F1 | 	add	fp, #8
0d6b8     A7 26 02 FB | 	rdlong	local05, fp
0d6bc     08 4E 85 F1 | 	sub	fp, #8
0d6c0     A7 28 02 FB | 	rdlong	local06, fp
0d6c4     40 4E 85 F1 | 	sub	fp, #64
0d6c8     14 27 02 F1 | 	add	local05, local06
0d6cc                 | LR__1162
0d6cc     49 00 00 FF 
0d6d0     54 E4 05 F1 | 	add	objptr, ##37460
0d6d4     F2 1E 02 FB | 	rdlong	local01, objptr
0d6d8     49 00 00 FF 
0d6dc     54 E4 85 F1 | 	sub	objptr, ##37460
0d6e0     13 1F 52 F2 | 	cmps	local01, local05 wc
0d6e4     A8 00 90 3D |  if_ae	jmp	#LR__1163
0d6e8     3C 4E 05 F1 | 	add	fp, #60
0d6ec     A7 28 02 FB | 	rdlong	local06, fp
0d6f0     04 4E 05 F1 | 	add	fp, #4
0d6f4     A7 24 02 FB | 	rdlong	local04, fp
0d6f8     10 4E 05 F1 | 	add	fp, #16
0d6fc     A7 20 02 FB | 	rdlong	local02, fp
0d700     10 1F 02 F6 | 	mov	local01, local02
0d704     0C 4E 85 F1 | 	sub	fp, #12
0d708     A7 16 02 FB | 	rdlong	arg03, fp
0d70c     0B 1F 82 F1 | 	sub	local01, arg03
0d710     04 4E 05 F1 | 	add	fp, #4
0d714     A7 16 02 FB | 	rdlong	arg03, fp
0d718     0B 1F 02 FD | 	qmul	local01, arg03
0d71c     02 28 66 F0 | 	shl	local06, #2
0d720     48 00 00 FF 
0d724     F8 E5 05 F1 | 	add	objptr, ##37368
0d728     F2 28 02 F1 | 	add	local06, objptr
0d72c     14 29 02 FB | 	rdlong	local06, local06
0d730     5C E4 05 F1 | 	add	objptr, #92
0d734     F2 1E 02 FB | 	rdlong	local01, objptr
0d738     49 00 00 FF 
0d73c     54 E4 85 F1 | 	sub	objptr, ##37460
0d740     0F 2B 02 F6 | 	mov	local07, local01
0d744     12 2B 82 F1 | 	sub	local07, local04
0d748     F2 12 02 FB | 	rdlong	arg01, objptr
0d74c     0F 13 02 F1 | 	add	arg01, local01
0d750     48 4E 85 F1 | 	sub	fp, #72
0d754     0A 20 66 F0 | 	shl	local02, #10
0d758     10 13 02 F1 | 	add	arg01, local02
0d75c     18 24 62 FD | 	getqx	local04
0d760     12 2B 02 F1 | 	add	local07, local04
0d764     14 2B 02 F1 | 	add	local07, local06
0d768     84 2F B0 FD | 	call	#_pspeek
0d76c     15 FB 41 FC | 	wrbyte	result1, local07
0d770     49 00 00 FF 
0d774     54 E4 05 F1 | 	add	objptr, ##37460
0d778     F2 2A 02 FB | 	rdlong	local07, objptr
0d77c     01 2A 06 F1 | 	add	local07, #1
0d780     F2 2A 62 FC | 	wrlong	local07, objptr
0d784     49 00 00 FF 
0d788     54 E4 85 F1 | 	sub	objptr, ##37460
0d78c     3C FF 9F FD | 	jmp	#LR__1162
0d790                 | LR__1163
0d790     50 4E 05 F1 | 	add	fp, #80
0d794     A7 2A 02 FB | 	rdlong	local07, fp
0d798     01 2A 06 F1 | 	add	local07, #1
0d79c     A7 2A 62 FC | 	wrlong	local07, fp
0d7a0     50 4E 85 F1 | 	sub	fp, #80
0d7a4     DC FE 9F FD | 	jmp	#LR__1161
0d7a8                 | LR__1164
0d7a8     3C 4E 05 F1 | 	add	fp, #60
0d7ac     A7 2A 02 FB | 	rdlong	local07, fp
0d7b0     15 13 02 F6 | 	mov	arg01, local07
0d7b4     3C 4E 85 F1 | 	sub	fp, #60
0d7b8     02 2A 66 F0 | 	shl	local07, #2
0d7bc     48 00 00 FF 
0d7c0     F8 E5 05 F1 | 	add	objptr, ##37368
0d7c4     F2 2A 02 F1 | 	add	local07, objptr
0d7c8     15 15 02 FB | 	rdlong	arg02, local07
0d7cc     48 00 00 FF 
0d7d0     F8 E5 85 F1 | 	sub	objptr, ##37368
0d7d4     90 42 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0d7d8     3C 4E 05 F1 | 	add	fp, #60
0d7dc     A7 12 02 FB | 	rdlong	arg01, fp
0d7e0     0C 4E 05 F1 | 	add	fp, #12
0d7e4     A7 14 02 FB | 	rdlong	arg02, fp
0d7e8     04 4E 05 F1 | 	add	fp, #4
0d7ec     A7 16 02 FB | 	rdlong	arg03, fp
0d7f0     4C 4E 85 F1 | 	sub	fp, #76
0d7f4     E4 42 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d7f8     A7 F0 03 F6 | 	mov	ptra, fp
0d7fc     B2 00 A0 FD | 	call	#popregs_
0d800                 | _do_defsprite_ret
0d800     2D 00 64 FD | 	ret
0d804                 | 
0d804                 | ' 
0d804                 | ' sub do_sprite
0d804                 | _do_sprite
0d804     00 4A 05 F6 | 	mov	COUNT_, #0
0d808     A8 00 A0 FD | 	call	#pushregs_
0d80c     30 F0 07 F1 | 	add	ptra, #48
0d810     0C A8 BF FD | 	call	#_pop
0d814     FD 16 02 F6 | 	mov	arg03, result1
0d818     FE 14 02 F6 | 	mov	arg02, result2
0d81c     FF 12 02 F6 | 	mov	arg01, result3
0d820     18 4E 05 F1 | 	add	fp, #24
0d824     A7 16 62 FC | 	wrlong	arg03, fp
0d828     04 4E 05 F1 | 	add	fp, #4
0d82c     A7 14 62 FC | 	wrlong	arg02, fp
0d830     04 4E 05 F1 | 	add	fp, #4
0d834     A7 12 62 FC | 	wrlong	arg01, fp
0d838     20 4E 85 F1 | 	sub	fp, #32
0d83c     E0 A7 BF FD | 	call	#_pop
0d840     FD 16 02 F6 | 	mov	arg03, result1
0d844     FE 14 02 F6 | 	mov	arg02, result2
0d848     FF 12 02 F6 | 	mov	arg01, result3
0d84c     0C 4E 05 F1 | 	add	fp, #12
0d850     A7 16 62 FC | 	wrlong	arg03, fp
0d854     04 4E 05 F1 | 	add	fp, #4
0d858     A7 14 62 FC | 	wrlong	arg02, fp
0d85c     04 4E 05 F1 | 	add	fp, #4
0d860     A7 12 62 FC | 	wrlong	arg01, fp
0d864     14 4E 85 F1 | 	sub	fp, #20
0d868     B4 A7 BF FD | 	call	#_pop
0d86c     FF 16 02 F6 | 	mov	arg03, result3
0d870     A7 FA 61 FC | 	wrlong	result1, fp
0d874     04 4E 05 F1 | 	add	fp, #4
0d878     A7 FC 61 FC | 	wrlong	result2, fp
0d87c     04 4E 05 F1 | 	add	fp, #4
0d880     A7 16 62 FC | 	wrlong	arg03, fp
0d884     08 4E 85 F1 | 	sub	fp, #8
0d888     A7 12 02 F6 | 	mov	arg01, fp
0d88c     5C F3 BF FD | 	call	#_converttoint
0d890     24 4E 05 F1 | 	add	fp, #36
0d894     A7 FA 61 FC | 	wrlong	result1, fp
0d898     18 4E 85 F1 | 	sub	fp, #24
0d89c     A7 12 02 F6 | 	mov	arg01, fp
0d8a0     0C 4E 85 F1 | 	sub	fp, #12
0d8a4     44 F3 BF FD | 	call	#_converttoint
0d8a8     28 4E 05 F1 | 	add	fp, #40
0d8ac     A7 FA 61 FC | 	wrlong	result1, fp
0d8b0     10 4E 85 F1 | 	sub	fp, #16
0d8b4     A7 12 02 F6 | 	mov	arg01, fp
0d8b8     18 4E 85 F1 | 	sub	fp, #24
0d8bc     2C F3 BF FD | 	call	#_converttoint
0d8c0     2C 4E 05 F1 | 	add	fp, #44
0d8c4     A7 FA 61 FC | 	wrlong	result1, fp
0d8c8     08 4E 85 F1 | 	sub	fp, #8
0d8cc     A7 12 02 FB | 	rdlong	arg01, fp
0d8d0     04 4E 05 F1 | 	add	fp, #4
0d8d4     A7 14 02 FB | 	rdlong	arg02, fp
0d8d8     FD 16 02 F6 | 	mov	arg03, result1
0d8dc     28 4E 85 F1 | 	sub	fp, #40
0d8e0     AC 41 B0 FD | 	call	#_hg010b_spin2_setspritepos
0d8e4     A7 F0 03 F6 | 	mov	ptra, fp
0d8e8     B2 00 A0 FD | 	call	#popregs_
0d8ec                 | _do_sprite_ret
0d8ec     2D 00 64 FD | 	ret
0d8f0                 | 
0d8f0                 | ' 
0d8f0                 | ' sub do_mousex
0d8f0                 | _do_mousex
0d8f0     00 4A 05 F6 | 	mov	COUNT_, #0
0d8f4     A8 00 A0 FD | 	call	#pushregs_
0d8f8     0C F0 07 F1 | 	add	ptra, #12
0d8fc     08 4E 05 F1 | 	add	fp, #8
0d900     A7 3A 68 FC | 	wrlong	#29, fp
0d904     08 4E 85 F1 | 	sub	fp, #8
0d908     48 00 00 FF 
0d90c     B0 E5 05 F1 | 	add	objptr, ##37296
0d910     F2 12 02 FB | 	rdlong	arg01, objptr
0d914     48 00 00 FF 
0d918     B0 E5 85 F1 | 	sub	objptr, ##37296
0d91c     A7 12 62 FC | 	wrlong	arg01, fp
0d920     A7 12 02 F6 | 	mov	arg01, fp
0d924     90 A7 BF FD | 	call	#_push
0d928     A7 F0 03 F6 | 	mov	ptra, fp
0d92c     B2 00 A0 FD | 	call	#popregs_
0d930                 | _do_mousex_ret
0d930     2D 00 64 FD | 	ret
0d934                 | 
0d934                 | ' 
0d934                 | ' sub do_mousey
0d934                 | _do_mousey
0d934     00 4A 05 F6 | 	mov	COUNT_, #0
0d938     A8 00 A0 FD | 	call	#pushregs_
0d93c     0C F0 07 F1 | 	add	ptra, #12
0d940     08 4E 05 F1 | 	add	fp, #8
0d944     A7 3A 68 FC | 	wrlong	#29, fp
0d948     08 4E 85 F1 | 	sub	fp, #8
0d94c     48 00 00 FF 
0d950     B4 E5 05 F1 | 	add	objptr, ##37300
0d954     F2 12 02 FB | 	rdlong	arg01, objptr
0d958     48 00 00 FF 
0d95c     B4 E5 85 F1 | 	sub	objptr, ##37300
0d960     A7 12 62 FC | 	wrlong	arg01, fp
0d964     A7 12 02 F6 | 	mov	arg01, fp
0d968     4C A7 BF FD | 	call	#_push
0d96c     A7 F0 03 F6 | 	mov	ptra, fp
0d970     B2 00 A0 FD | 	call	#popregs_
0d974                 | _do_mousey_ret
0d974     2D 00 64 FD | 	ret
0d978                 | 
0d978                 | ' 
0d978                 | ' sub do_mousew
0d978                 | _do_mousew
0d978     00 4A 05 F6 | 	mov	COUNT_, #0
0d97c     A8 00 A0 FD | 	call	#pushregs_
0d980     0C F0 07 F1 | 	add	ptra, #12
0d984     08 4E 05 F1 | 	add	fp, #8
0d988     A7 38 68 FC | 	wrlong	#28, fp
0d98c     08 4E 85 F1 | 	sub	fp, #8
0d990     48 00 00 FF 
0d994     BC E5 05 F1 | 	add	objptr, ##37308
0d998     F2 12 02 FB | 	rdlong	arg01, objptr
0d99c     48 00 00 FF 
0d9a0     BC E5 85 F1 | 	sub	objptr, ##37308
0d9a4     A7 12 62 FC | 	wrlong	arg01, fp
0d9a8     A7 12 02 F6 | 	mov	arg01, fp
0d9ac     08 A7 BF FD | 	call	#_push
0d9b0     A7 F0 03 F6 | 	mov	ptra, fp
0d9b4     B2 00 A0 FD | 	call	#popregs_
0d9b8                 | _do_mousew_ret
0d9b8     2D 00 64 FD | 	ret
0d9bc                 | 
0d9bc                 | ' 
0d9bc                 | ' sub do_mousek
0d9bc                 | _do_mousek
0d9bc     00 4A 05 F6 | 	mov	COUNT_, #0
0d9c0     A8 00 A0 FD | 	call	#pushregs_
0d9c4     0C F0 07 F1 | 	add	ptra, #12
0d9c8     08 4E 05 F1 | 	add	fp, #8
0d9cc     A7 3A 68 FC | 	wrlong	#29, fp
0d9d0     08 4E 85 F1 | 	sub	fp, #8
0d9d4     48 00 00 FF 
0d9d8     B8 E5 05 F1 | 	add	objptr, ##37304
0d9dc     F2 12 02 FB | 	rdlong	arg01, objptr
0d9e0     48 00 00 FF 
0d9e4     B8 E5 85 F1 | 	sub	objptr, ##37304
0d9e8     A7 12 62 FC | 	wrlong	arg01, fp
0d9ec     A7 12 02 F6 | 	mov	arg01, fp
0d9f0     C4 A6 BF FD | 	call	#_push
0d9f4     A7 F0 03 F6 | 	mov	ptra, fp
0d9f8     B2 00 A0 FD | 	call	#popregs_
0d9fc                 | _do_mousek_ret
0d9fc     2D 00 64 FD | 	ret
0da00                 | 
0da00                 | ' sub do_gettime
0da00                 | _do_gettime
0da00     02 4A 05 F6 | 	mov	COUNT_, #2
0da04     A8 00 A0 FD | 	call	#pushregs_
0da08     14 F0 07 F1 | 	add	ptra, #20
0da0c                 | ' 
0da0c                 | ' const asm 
0da0c     1A 1E 72 FD | 	getct	local01 wc
0da10     1A 20 62 FD | 	getct	local02
0da14                 | ' 
0da14                 | ' return hi1, lo1
0da14     10 FD 01 F6 | 	mov	result2, local02
0da18     A7 1E 62 FC | 	wrlong	local01, fp
0da1c     04 4E 05 F1 | 	add	fp, #4
0da20     A7 FC 61 FC | 	wrlong	result2, fp
0da24     0C 4E 05 F1 | 	add	fp, #12
0da28     A7 3A 68 FC | 	wrlong	#29, fp
0da2c     0C 4E 85 F1 | 	sub	fp, #12
0da30     A7 12 02 FB | 	rdlong	arg01, fp
0da34     04 4E 05 F1 | 	add	fp, #4
0da38     A7 12 62 FC | 	wrlong	arg01, fp
0da3c     08 4E 85 F1 | 	sub	fp, #8
0da40     A7 12 02 FB | 	rdlong	arg01, fp
0da44     0C 4E 05 F1 | 	add	fp, #12
0da48     A7 12 62 FC | 	wrlong	arg01, fp
0da4c     04 4E 85 F1 | 	sub	fp, #4
0da50     A7 12 02 F6 | 	mov	arg01, fp
0da54     08 4E 85 F1 | 	sub	fp, #8
0da58     5C A6 BF FD | 	call	#_push
0da5c     A7 F0 03 F6 | 	mov	ptra, fp
0da60     B2 00 A0 FD | 	call	#popregs_
0da64                 | _do_gettime_ret
0da64     2D 00 64 FD | 	ret
0da68                 | 
0da68                 | '    
0da68                 | ' 
0da68                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0da68                 | ' 
0da68                 | ' '' ----------------------------- Clear the screen
0da68                 | ' 
0da68                 | ' sub do_cls
0da68                 | _do_cls
0da68     25 00 00 FF 
0da6c     00 E4 05 F1 | 	add	objptr, ##18944
0da70     F2 12 02 FB | 	rdlong	arg01, objptr
0da74     04 E4 85 F1 | 	sub	objptr, #4
0da78     F2 14 02 FB | 	rdlong	arg02, objptr
0da7c     24 00 00 FF 
0da80     FC E5 85 F1 | 	sub	objptr, ##18940
0da84     90 4D B0 FD | 	call	#_hg010b_spin2_cls
0da88     25 00 00 FF 
0da8c     00 E4 05 F1 | 	add	objptr, ##18944
0da90     F2 14 02 FB | 	rdlong	arg02, objptr
0da94     14 E4 85 F1 | 	sub	objptr, #20
0da98     F2 14 62 FC | 	wrlong	arg02, objptr
0da9c     24 00 00 FF 
0daa0     EC E5 85 F1 | 	sub	objptr, ##18924
0daa4                 | ' cls(ink,paper): plot_color=ink: print
0daa4     00 12 06 F6 | 	mov	arg01, #0
0daa8     30 B5 B0 FD | 	call	#__system___getiolock_0306
0daac     FD 12 02 F6 | 	mov	arg01, result1
0dab0     44 60 B0 FD | 	call	#__system___lockmem
0dab4     00 12 06 F6 | 	mov	arg01, #0
0dab8     0A 14 06 F6 | 	mov	arg02, #10
0dabc     00 16 06 F6 | 	mov	arg03, #0
0dac0     E8 6B B0 FD | 	call	#__system___basic_print_char
0dac4     00 12 06 F6 | 	mov	arg01, #0
0dac8     10 B5 B0 FD | 	call	#__system___getiolock_0306
0dacc     FD 00 68 FC | 	wrlong	#0, result1
0dad0                 | _do_cls_ret
0dad0     2D 00 64 FD | 	ret
0dad4                 | 
0dad4                 | ' 
0dad4                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0dad4                 | ' 
0dad4                 | ' sub do_color
0dad4                 | _do_color
0dad4     03 4A 05 F6 | 	mov	COUNT_, #3
0dad8     A8 00 A0 FD | 	call	#pushregs_
0dadc     40 A5 BF FD | 	call	#_pop
0dae0     FD 1E 02 F6 | 	mov	local01, result1
0dae4     FE 20 02 F6 | 	mov	local02, result2
0dae8     FF 22 02 F6 | 	mov	local03, result3
0daec     24 00 00 FF 
0daf0     EC E5 05 F1 | 	add	objptr, ##18924
0daf4     F2 1E 62 FC | 	wrlong	local01, objptr
0daf8     24 00 00 FF 
0dafc     EC E5 85 F1 | 	sub	objptr, ##18924
0db00     A7 F0 03 F6 | 	mov	ptra, fp
0db04     B2 00 A0 FD | 	call	#popregs_
0db08                 | _do_color_ret
0db08     2D 00 64 FD | 	ret
0db0c                 | 
0db0c                 | ' 
0db0c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0db0c                 | ' 
0db0c                 | ' sub do_plot
0db0c                 | _do_plot
0db0c     08 4A 05 F6 | 	mov	COUNT_, #8
0db10     A8 00 A0 FD | 	call	#pushregs_
0db14     08 A5 BF FD | 	call	#_pop
0db18     FD 1E 02 F6 | 	mov	local01, result1
0db1c     FE 14 02 F6 | 	mov	arg02, result2
0db20     FF 16 02 F6 | 	mov	arg03, result3
0db24     0A 21 02 F6 | 	mov	local02, arg02
0db28     0B 23 02 F6 | 	mov	local03, arg03
0db2c     F0 A4 BF FD | 	call	#_pop
0db30     FD 24 02 F6 | 	mov	local04, result1
0db34     FE 26 02 F6 | 	mov	local05, result2
0db38     FF 28 02 F6 | 	mov	local06, result3
0db3c     12 2B 02 F6 | 	mov	local07, local04
0db40     0F 2D 02 F6 | 	mov	local08, local01
0db44                 | ' t2=pop() 					 
0db44                 | ' t1=pop()
0db44                 | ' 
0db44                 | ' x=t1.result.iresult
0db44                 | ' y=t2.result.iresult	
0db44                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0db44     1C 28 0E F2 | 	cmp	local06, #28 wz
0db48     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0db4c     44 00 90 5D |  if_ne	jmp	#LR__1170
0db50     1C 22 0E F2 | 	cmp	local03, #28 wz
0db54     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0db58     38 00 90 5D |  if_ne	jmp	#LR__1170
0db5c     24 00 00 FF 
0db60     F0 E5 05 F1 | 	add	objptr, ##18928
0db64     F2 2A 62 FC | 	wrlong	local07, objptr
0db68     04 E4 05 F1 | 	add	objptr, #4
0db6c     F2 2C 62 FC | 	wrlong	local08, objptr
0db70     04 E4 85 F1 | 	sub	objptr, #4
0db74     F2 12 02 FB | 	rdlong	arg01, objptr
0db78     04 E4 85 F1 | 	sub	objptr, #4
0db7c     F2 16 02 FB | 	rdlong	arg03, objptr
0db80     24 00 00 FF 
0db84     EC E5 85 F1 | 	sub	objptr, ##18924
0db88     16 15 02 F6 | 	mov	arg02, local08
0db8c     98 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0db90     A4 00 90 FD | 	jmp	#LR__1175
0db94                 | LR__1170
0db94                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0db94     1E 28 0E F2 | 	cmp	local06, #30 wz
0db98     10 00 90 5D |  if_ne	jmp	#LR__1171
0db9c     12 13 02 F6 | 	mov	arg01, local04
0dba0     01 14 06 F6 | 	mov	arg02, #1
0dba4     64 8D B0 FD | 	call	#__system___float_tointeger
0dba8     FD 2A 02 F6 | 	mov	local07, result1
0dbac                 | LR__1171
0dbac                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0dbac     1E 22 0E F2 | 	cmp	local03, #30 wz
0dbb0     10 00 90 5D |  if_ne	jmp	#LR__1172
0dbb4     0F 13 02 F6 | 	mov	arg01, local01
0dbb8     01 14 06 F6 | 	mov	arg02, #1
0dbbc     4C 8D B0 FD | 	call	#__system___float_tointeger
0dbc0     FD 2C 02 F6 | 	mov	local08, result1
0dbc4                 | LR__1172
0dbc4                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0dbc4     1F 28 0E F2 | 	cmp	local06, #31 wz
0dbc8     18 00 90 5D |  if_ne	jmp	#LR__1173
0dbcc     12 13 02 F6 | 	mov	arg01, local04
0dbd0     58 90 B0 FD | 	call	#__system____builtin_atof
0dbd4     FD 12 02 F6 | 	mov	arg01, result1
0dbd8     00 14 06 F6 | 	mov	arg02, #0
0dbdc     2C 8D B0 FD | 	call	#__system___float_tointeger
0dbe0     FD 2A 02 F6 | 	mov	local07, result1
0dbe4                 | LR__1173
0dbe4                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0dbe4     1F 22 0E F2 | 	cmp	local03, #31 wz
0dbe8     18 00 90 5D |  if_ne	jmp	#LR__1174
0dbec     0F 13 02 F6 | 	mov	arg01, local01
0dbf0     38 90 B0 FD | 	call	#__system____builtin_atof
0dbf4     FD 12 02 F6 | 	mov	arg01, result1
0dbf8     00 14 06 F6 | 	mov	arg02, #0
0dbfc     0C 8D B0 FD | 	call	#__system___float_tointeger
0dc00     FD 2C 02 F6 | 	mov	local08, result1
0dc04                 | LR__1174
0dc04     24 00 00 FF 
0dc08     F0 E5 05 F1 | 	add	objptr, ##18928
0dc0c     F2 2A 62 FC | 	wrlong	local07, objptr
0dc10     04 E4 05 F1 | 	add	objptr, #4
0dc14     F2 2C 62 FC | 	wrlong	local08, objptr
0dc18     04 E4 85 F1 | 	sub	objptr, #4
0dc1c     F2 12 02 FB | 	rdlong	arg01, objptr
0dc20     04 E4 85 F1 | 	sub	objptr, #4
0dc24     F2 16 02 FB | 	rdlong	arg03, objptr
0dc28     24 00 00 FF 
0dc2c     EC E5 85 F1 | 	sub	objptr, ##18924
0dc30     16 15 02 F6 | 	mov	arg02, local08
0dc34     F0 3E B0 FD | 	call	#_hg010b_spin2_putpixel
0dc38                 | LR__1175
0dc38     A7 F0 03 F6 | 	mov	ptra, fp
0dc3c     B2 00 A0 FD | 	call	#popregs_
0dc40                 | _do_plot_ret
0dc40     2D 00 64 FD | 	ret
0dc44                 | 
0dc44                 | ' 
0dc44                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0dc44                 | ' 
0dc44                 | ' sub do_draw
0dc44                 | _do_draw
0dc44     08 4A 05 F6 | 	mov	COUNT_, #8
0dc48     A8 00 A0 FD | 	call	#pushregs_
0dc4c     D0 A3 BF FD | 	call	#_pop
0dc50     FD 1E 02 F6 | 	mov	local01, result1
0dc54     FE 18 02 F6 | 	mov	arg04, result2
0dc58     FF 16 02 F6 | 	mov	arg03, result3
0dc5c     0C 21 02 F6 | 	mov	local02, arg04
0dc60     0B 23 02 F6 | 	mov	local03, arg03
0dc64     B8 A3 BF FD | 	call	#_pop
0dc68     FD 24 02 F6 | 	mov	local04, result1
0dc6c     FE 26 02 F6 | 	mov	local05, result2
0dc70     FF 28 02 F6 | 	mov	local06, result3
0dc74     12 2B 02 F6 | 	mov	local07, local04
0dc78     0F 2D 02 F6 | 	mov	local08, local01
0dc7c                 | ' 
0dc7c                 | ' t2=pop()
0dc7c                 | ' t1=pop()
0dc7c                 | ' x=t1.result.iresult
0dc7c                 | ' y=t2.result.iresult
0dc7c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0dc7c     1C 28 0E F2 | 	cmp	local06, #28 wz
0dc80     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0dc84     5C 00 90 5D |  if_ne	jmp	#LR__1180
0dc88     1C 22 0E F2 | 	cmp	local03, #28 wz
0dc8c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0dc90     50 00 90 5D |  if_ne	jmp	#LR__1180
0dc94     24 00 00 FF 
0dc98     F0 E5 05 F1 | 	add	objptr, ##18928
0dc9c     F2 12 02 FB | 	rdlong	arg01, objptr
0dca0     04 E4 05 F1 | 	add	objptr, #4
0dca4     F2 14 02 FB | 	rdlong	arg02, objptr
0dca8     08 E4 85 F1 | 	sub	objptr, #8
0dcac     F2 1A 02 FB | 	rdlong	arg05, objptr
0dcb0     24 00 00 FF 
0dcb4     EC E5 85 F1 | 	sub	objptr, ##18924
0dcb8     15 17 02 F6 | 	mov	arg03, local07
0dcbc     16 19 02 F6 | 	mov	arg04, local08
0dcc0     24 41 B0 FD | 	call	#_hg010b_spin2_draw
0dcc4     24 00 00 FF 
0dcc8     F0 E5 05 F1 | 	add	objptr, ##18928
0dccc     F2 2A 62 FC | 	wrlong	local07, objptr
0dcd0     04 E4 05 F1 | 	add	objptr, #4
0dcd4     F2 2C 62 FC | 	wrlong	local08, objptr
0dcd8     24 00 00 FF 
0dcdc     F4 E5 85 F1 | 	sub	objptr, ##18932
0dce0     BC 00 90 FD | 	jmp	#LR__1185
0dce4                 | LR__1180
0dce4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0dce4     1E 28 0E F2 | 	cmp	local06, #30 wz
0dce8     10 00 90 5D |  if_ne	jmp	#LR__1181
0dcec     12 13 02 F6 | 	mov	arg01, local04
0dcf0     01 14 06 F6 | 	mov	arg02, #1
0dcf4     14 8C B0 FD | 	call	#__system___float_tointeger
0dcf8     FD 2A 02 F6 | 	mov	local07, result1
0dcfc                 | LR__1181
0dcfc                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0dcfc     1E 22 0E F2 | 	cmp	local03, #30 wz
0dd00     10 00 90 5D |  if_ne	jmp	#LR__1182
0dd04     0F 13 02 F6 | 	mov	arg01, local01
0dd08     01 14 06 F6 | 	mov	arg02, #1
0dd0c     FC 8B B0 FD | 	call	#__system___float_tointeger
0dd10     FD 2C 02 F6 | 	mov	local08, result1
0dd14                 | LR__1182
0dd14                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0dd14     1F 28 0E F2 | 	cmp	local06, #31 wz
0dd18     18 00 90 5D |  if_ne	jmp	#LR__1183
0dd1c     12 13 02 F6 | 	mov	arg01, local04
0dd20     08 8F B0 FD | 	call	#__system____builtin_atof
0dd24     FD 12 02 F6 | 	mov	arg01, result1
0dd28     00 14 06 F6 | 	mov	arg02, #0
0dd2c     DC 8B B0 FD | 	call	#__system___float_tointeger
0dd30     FD 2A 02 F6 | 	mov	local07, result1
0dd34                 | LR__1183
0dd34                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0dd34     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd38     18 00 90 5D |  if_ne	jmp	#LR__1184
0dd3c     0F 13 02 F6 | 	mov	arg01, local01
0dd40     E8 8E B0 FD | 	call	#__system____builtin_atof
0dd44     FD 12 02 F6 | 	mov	arg01, result1
0dd48     00 14 06 F6 | 	mov	arg02, #0
0dd4c     BC 8B B0 FD | 	call	#__system___float_tointeger
0dd50     FD 2C 02 F6 | 	mov	local08, result1
0dd54                 | LR__1184
0dd54     24 00 00 FF 
0dd58     F0 E5 05 F1 | 	add	objptr, ##18928
0dd5c     F2 12 02 FB | 	rdlong	arg01, objptr
0dd60     04 E4 05 F1 | 	add	objptr, #4
0dd64     F2 14 02 FB | 	rdlong	arg02, objptr
0dd68     08 E4 85 F1 | 	sub	objptr, #8
0dd6c     F2 1A 02 FB | 	rdlong	arg05, objptr
0dd70     24 00 00 FF 
0dd74     EC E5 85 F1 | 	sub	objptr, ##18924
0dd78     15 17 02 F6 | 	mov	arg03, local07
0dd7c     16 19 02 F6 | 	mov	arg04, local08
0dd80     64 40 B0 FD | 	call	#_hg010b_spin2_draw
0dd84     24 00 00 FF 
0dd88     F0 E5 05 F1 | 	add	objptr, ##18928
0dd8c     F2 2A 62 FC | 	wrlong	local07, objptr
0dd90     04 E4 05 F1 | 	add	objptr, #4
0dd94     F2 2C 62 FC | 	wrlong	local08, objptr
0dd98     24 00 00 FF 
0dd9c     F4 E5 85 F1 | 	sub	objptr, ##18932
0dda0                 | LR__1185
0dda0     A7 F0 03 F6 | 	mov	ptra, fp
0dda4     B2 00 A0 FD | 	call	#popregs_
0dda8                 | _do_draw_ret
0dda8     2D 00 64 FD | 	ret
0ddac                 | 
0ddac                 | ' 
0ddac                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0ddac                 | ' 
0ddac                 | ' sub do_fcircle
0ddac                 | _do_fcircle
0ddac     02 4A 05 F6 | 	mov	COUNT_, #2
0ddb0     A8 00 A0 FD | 	call	#pushregs_
0ddb4     24 F0 07 F1 | 	add	ptra, #36
0ddb8     64 A2 BF FD | 	call	#_pop
0ddbc     FD 18 02 F6 | 	mov	arg04, result1
0ddc0     FE 16 02 F6 | 	mov	arg03, result2
0ddc4     FF 14 02 F6 | 	mov	arg02, result3
0ddc8     18 4E 05 F1 | 	add	fp, #24
0ddcc     A7 18 62 FC | 	wrlong	arg04, fp
0ddd0     04 4E 05 F1 | 	add	fp, #4
0ddd4     A7 16 62 FC | 	wrlong	arg03, fp
0ddd8     04 4E 05 F1 | 	add	fp, #4
0dddc     A7 14 62 FC | 	wrlong	arg02, fp
0dde0     20 4E 85 F1 | 	sub	fp, #32
0dde4     38 A2 BF FD | 	call	#_pop
0dde8     FD 18 02 F6 | 	mov	arg04, result1
0ddec     FE 16 02 F6 | 	mov	arg03, result2
0ddf0     FF 1E 02 F6 | 	mov	local01, result3
0ddf4     0C 4E 05 F1 | 	add	fp, #12
0ddf8     A7 18 62 FC | 	wrlong	arg04, fp
0ddfc     04 4E 05 F1 | 	add	fp, #4
0de00     A7 16 62 FC | 	wrlong	arg03, fp
0de04     04 4E 05 F1 | 	add	fp, #4
0de08     A7 1E 62 FC | 	wrlong	local01, fp
0de0c     14 4E 85 F1 | 	sub	fp, #20
0de10     0C A2 BF FD | 	call	#_pop
0de14     A7 FA 61 FC | 	wrlong	result1, fp
0de18     04 4E 05 F1 | 	add	fp, #4
0de1c     A7 FC 61 FC | 	wrlong	result2, fp
0de20     04 4E 05 F1 | 	add	fp, #4
0de24     A7 FE 61 FC | 	wrlong	result3, fp
0de28                 | ' 
0de28                 | ' t3=pop()
0de28                 | ' t2=pop()
0de28                 | ' t1=pop()
0de28                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0de28     FF 18 02 F6 | 	mov	arg04, result3
0de2c     08 4E 85 F1 | 	sub	fp, #8
0de30     1C 18 0E F2 | 	cmp	arg04, #28 wz
0de34     08 4E 05 51 |  if_ne	add	fp, #8
0de38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0de3c     08 4E 85 51 |  if_ne	sub	fp, #8
0de40     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0de44     7C 00 90 5D |  if_ne	jmp	#LR__1190
0de48     14 4E 05 F1 | 	add	fp, #20
0de4c     A7 1E 02 FB | 	rdlong	local01, fp
0de50     14 4E 85 F1 | 	sub	fp, #20
0de54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de58     14 4E 05 51 |  if_ne	add	fp, #20
0de5c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0de60     14 4E 85 51 |  if_ne	sub	fp, #20
0de64     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0de68     58 00 90 5D |  if_ne	jmp	#LR__1190
0de6c     20 4E 05 F1 | 	add	fp, #32
0de70     A7 1E 02 FB | 	rdlong	local01, fp
0de74     20 4E 85 F1 | 	sub	fp, #32
0de78     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de7c     20 4E 05 51 |  if_ne	add	fp, #32
0de80     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0de84     20 4E 85 51 |  if_ne	sub	fp, #32
0de88     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0de8c     34 00 90 5D |  if_ne	jmp	#LR__1190
0de90     A7 12 02 FB | 	rdlong	arg01, fp
0de94     0C 4E 05 F1 | 	add	fp, #12
0de98     A7 14 02 FB | 	rdlong	arg02, fp
0de9c     0C 4E 05 F1 | 	add	fp, #12
0dea0     A7 16 02 FB | 	rdlong	arg03, fp
0dea4     18 4E 85 F1 | 	sub	fp, #24
0dea8     24 00 00 FF 
0deac     EC E5 05 F1 | 	add	objptr, ##18924
0deb0     F2 18 02 FB | 	rdlong	arg04, objptr
0deb4     24 00 00 FF 
0deb8     EC E5 85 F1 | 	sub	objptr, ##18924
0debc     20 44 B0 FD | 	call	#_hg010b_spin2_fcircle
0dec0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0dec0     54 00 90 FD | 	jmp	#LR__1191
0dec4                 | LR__1190
0dec4     A7 12 02 F6 | 	mov	arg01, fp
0dec8     20 ED BF FD | 	call	#_converttoint
0decc     FD 1E 02 F6 | 	mov	local01, result1
0ded0     0C 4E 05 F1 | 	add	fp, #12
0ded4     A7 12 02 F6 | 	mov	arg01, fp
0ded8     0C 4E 85 F1 | 	sub	fp, #12
0dedc     0C ED BF FD | 	call	#_converttoint
0dee0     FD 20 02 F6 | 	mov	local02, result1
0dee4     18 4E 05 F1 | 	add	fp, #24
0dee8     A7 12 02 F6 | 	mov	arg01, fp
0deec     18 4E 85 F1 | 	sub	fp, #24
0def0     F8 EC BF FD | 	call	#_converttoint
0def4     FD 16 02 F6 | 	mov	arg03, result1
0def8     24 00 00 FF 
0defc     EC E5 05 F1 | 	add	objptr, ##18924
0df00     F2 18 02 FB | 	rdlong	arg04, objptr
0df04     24 00 00 FF 
0df08     EC E5 85 F1 | 	sub	objptr, ##18924
0df0c     0F 13 02 F6 | 	mov	arg01, local01
0df10     10 15 02 F6 | 	mov	arg02, local02
0df14     C8 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0df18                 | LR__1191
0df18     A7 F0 03 F6 | 	mov	ptra, fp
0df1c     B2 00 A0 FD | 	call	#popregs_
0df20                 | _do_fcircle_ret
0df20     2D 00 64 FD | 	ret
0df24                 | 
0df24                 | ' 
0df24                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0df24                 | ' 
0df24                 | ' sub do_circle
0df24                 | _do_circle
0df24     02 4A 05 F6 | 	mov	COUNT_, #2
0df28     A8 00 A0 FD | 	call	#pushregs_
0df2c     24 F0 07 F1 | 	add	ptra, #36
0df30     EC A0 BF FD | 	call	#_pop
0df34     FD 18 02 F6 | 	mov	arg04, result1
0df38     FE 16 02 F6 | 	mov	arg03, result2
0df3c     FF 14 02 F6 | 	mov	arg02, result3
0df40     18 4E 05 F1 | 	add	fp, #24
0df44     A7 18 62 FC | 	wrlong	arg04, fp
0df48     04 4E 05 F1 | 	add	fp, #4
0df4c     A7 16 62 FC | 	wrlong	arg03, fp
0df50     04 4E 05 F1 | 	add	fp, #4
0df54     A7 14 62 FC | 	wrlong	arg02, fp
0df58     20 4E 85 F1 | 	sub	fp, #32
0df5c     C0 A0 BF FD | 	call	#_pop
0df60     FD 18 02 F6 | 	mov	arg04, result1
0df64     FE 16 02 F6 | 	mov	arg03, result2
0df68     FF 1E 02 F6 | 	mov	local01, result3
0df6c     0C 4E 05 F1 | 	add	fp, #12
0df70     A7 18 62 FC | 	wrlong	arg04, fp
0df74     04 4E 05 F1 | 	add	fp, #4
0df78     A7 16 62 FC | 	wrlong	arg03, fp
0df7c     04 4E 05 F1 | 	add	fp, #4
0df80     A7 1E 62 FC | 	wrlong	local01, fp
0df84     14 4E 85 F1 | 	sub	fp, #20
0df88     94 A0 BF FD | 	call	#_pop
0df8c     A7 FA 61 FC | 	wrlong	result1, fp
0df90     04 4E 05 F1 | 	add	fp, #4
0df94     A7 FC 61 FC | 	wrlong	result2, fp
0df98     04 4E 05 F1 | 	add	fp, #4
0df9c     A7 FE 61 FC | 	wrlong	result3, fp
0dfa0                 | ' 
0dfa0                 | ' t3=pop()
0dfa0                 | ' t2=pop()
0dfa0                 | ' t1=pop()
0dfa0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0dfa0     FF 18 02 F6 | 	mov	arg04, result3
0dfa4     08 4E 85 F1 | 	sub	fp, #8
0dfa8     1C 18 0E F2 | 	cmp	arg04, #28 wz
0dfac     08 4E 05 51 |  if_ne	add	fp, #8
0dfb0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0dfb4     08 4E 85 51 |  if_ne	sub	fp, #8
0dfb8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0dfbc     7C 00 90 5D |  if_ne	jmp	#LR__1200
0dfc0     14 4E 05 F1 | 	add	fp, #20
0dfc4     A7 1E 02 FB | 	rdlong	local01, fp
0dfc8     14 4E 85 F1 | 	sub	fp, #20
0dfcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dfd0     14 4E 05 51 |  if_ne	add	fp, #20
0dfd4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dfd8     14 4E 85 51 |  if_ne	sub	fp, #20
0dfdc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dfe0     58 00 90 5D |  if_ne	jmp	#LR__1200
0dfe4     20 4E 05 F1 | 	add	fp, #32
0dfe8     A7 1E 02 FB | 	rdlong	local01, fp
0dfec     20 4E 85 F1 | 	sub	fp, #32
0dff0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dff4     20 4E 05 51 |  if_ne	add	fp, #32
0dff8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dffc     20 4E 85 51 |  if_ne	sub	fp, #32
0e000     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e004     34 00 90 5D |  if_ne	jmp	#LR__1200
0e008     A7 12 02 FB | 	rdlong	arg01, fp
0e00c     0C 4E 05 F1 | 	add	fp, #12
0e010     A7 14 02 FB | 	rdlong	arg02, fp
0e014     0C 4E 05 F1 | 	add	fp, #12
0e018     A7 16 02 FB | 	rdlong	arg03, fp
0e01c     18 4E 85 F1 | 	sub	fp, #24
0e020     24 00 00 FF 
0e024     EC E5 05 F1 | 	add	objptr, ##18924
0e028     F2 18 02 FB | 	rdlong	arg04, objptr
0e02c     24 00 00 FF 
0e030     EC E5 85 F1 | 	sub	objptr, ##18924
0e034     B4 43 B0 FD | 	call	#_hg010b_spin2_circle
0e038                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0e038     54 00 90 FD | 	jmp	#LR__1201
0e03c                 | LR__1200
0e03c     A7 12 02 F6 | 	mov	arg01, fp
0e040     A8 EB BF FD | 	call	#_converttoint
0e044     FD 1E 02 F6 | 	mov	local01, result1
0e048     0C 4E 05 F1 | 	add	fp, #12
0e04c     A7 12 02 F6 | 	mov	arg01, fp
0e050     0C 4E 85 F1 | 	sub	fp, #12
0e054     94 EB BF FD | 	call	#_converttoint
0e058     FD 20 02 F6 | 	mov	local02, result1
0e05c     18 4E 05 F1 | 	add	fp, #24
0e060     A7 12 02 F6 | 	mov	arg01, fp
0e064     18 4E 85 F1 | 	sub	fp, #24
0e068     80 EB BF FD | 	call	#_converttoint
0e06c     FD 16 02 F6 | 	mov	arg03, result1
0e070     24 00 00 FF 
0e074     EC E5 05 F1 | 	add	objptr, ##18924
0e078     F2 18 02 FB | 	rdlong	arg04, objptr
0e07c     24 00 00 FF 
0e080     EC E5 85 F1 | 	sub	objptr, ##18924
0e084     0F 13 02 F6 | 	mov	arg01, local01
0e088     10 15 02 F6 | 	mov	arg02, local02
0e08c     5C 43 B0 FD | 	call	#_hg010b_spin2_circle
0e090                 | LR__1201
0e090     A7 F0 03 F6 | 	mov	ptra, fp
0e094     B2 00 A0 FD | 	call	#popregs_
0e098                 | _do_circle_ret
0e098     2D 00 64 FD | 	ret
0e09c                 | 
0e09c                 | ' 
0e09c                 | ' ' -------------------------- Draw a rectangle
0e09c                 | ' 
0e09c                 | ' sub do_box
0e09c                 | _do_box
0e09c     03 4A 05 F6 | 	mov	COUNT_, #3
0e0a0     A8 00 A0 FD | 	call	#pushregs_
0e0a4     30 F0 07 F1 | 	add	ptra, #48
0e0a8     74 9F BF FD | 	call	#_pop
0e0ac     FD 1A 02 F6 | 	mov	arg05, result1
0e0b0     FE 18 02 F6 | 	mov	arg04, result2
0e0b4     FF 16 02 F6 | 	mov	arg03, result3
0e0b8     24 4E 05 F1 | 	add	fp, #36
0e0bc     A7 1A 62 FC | 	wrlong	arg05, fp
0e0c0     04 4E 05 F1 | 	add	fp, #4
0e0c4     A7 18 62 FC | 	wrlong	arg04, fp
0e0c8     04 4E 05 F1 | 	add	fp, #4
0e0cc     A7 16 62 FC | 	wrlong	arg03, fp
0e0d0     2C 4E 85 F1 | 	sub	fp, #44
0e0d4     48 9F BF FD | 	call	#_pop
0e0d8     FD 1A 02 F6 | 	mov	arg05, result1
0e0dc     FE 18 02 F6 | 	mov	arg04, result2
0e0e0     FF 16 02 F6 | 	mov	arg03, result3
0e0e4     18 4E 05 F1 | 	add	fp, #24
0e0e8     A7 1A 62 FC | 	wrlong	arg05, fp
0e0ec     04 4E 05 F1 | 	add	fp, #4
0e0f0     A7 18 62 FC | 	wrlong	arg04, fp
0e0f4     04 4E 05 F1 | 	add	fp, #4
0e0f8     A7 16 62 FC | 	wrlong	arg03, fp
0e0fc     20 4E 85 F1 | 	sub	fp, #32
0e100     1C 9F BF FD | 	call	#_pop
0e104     FD 1A 02 F6 | 	mov	arg05, result1
0e108     FE 18 02 F6 | 	mov	arg04, result2
0e10c     FF 1E 02 F6 | 	mov	local01, result3
0e110     0C 4E 05 F1 | 	add	fp, #12
0e114     A7 1A 62 FC | 	wrlong	arg05, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 18 62 FC | 	wrlong	arg04, fp
0e120     04 4E 05 F1 | 	add	fp, #4
0e124     A7 1E 62 FC | 	wrlong	local01, fp
0e128     14 4E 85 F1 | 	sub	fp, #20
0e12c     F0 9E BF FD | 	call	#_pop
0e130     A7 FA 61 FC | 	wrlong	result1, fp
0e134     04 4E 05 F1 | 	add	fp, #4
0e138     A7 FC 61 FC | 	wrlong	result2, fp
0e13c     04 4E 05 F1 | 	add	fp, #4
0e140     A7 FE 61 FC | 	wrlong	result3, fp
0e144                 | ' 
0e144                 | ' t4=pop()
0e144                 | ' t3=pop()
0e144                 | ' t2=pop()
0e144                 | ' t1=pop()
0e144                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e144     FF 1A 02 F6 | 	mov	arg05, result3
0e148     08 4E 85 F1 | 	sub	fp, #8
0e14c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e150     08 4E 05 51 |  if_ne	add	fp, #8
0e154     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e158     08 4E 85 51 |  if_ne	sub	fp, #8
0e15c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e160     A8 00 90 5D |  if_ne	jmp	#LR__1210
0e164     14 4E 05 F1 | 	add	fp, #20
0e168     A7 1E 02 FB | 	rdlong	local01, fp
0e16c     14 4E 85 F1 | 	sub	fp, #20
0e170     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e174     14 4E 05 51 |  if_ne	add	fp, #20
0e178     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e17c     14 4E 85 51 |  if_ne	sub	fp, #20
0e180     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e184     84 00 90 5D |  if_ne	jmp	#LR__1210
0e188     20 4E 05 F1 | 	add	fp, #32
0e18c     A7 1E 02 FB | 	rdlong	local01, fp
0e190     20 4E 85 F1 | 	sub	fp, #32
0e194     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e198     20 4E 05 51 |  if_ne	add	fp, #32
0e19c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1a0     20 4E 85 51 |  if_ne	sub	fp, #32
0e1a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e1a8     60 00 90 5D |  if_ne	jmp	#LR__1210
0e1ac     2C 4E 05 F1 | 	add	fp, #44
0e1b0     A7 1E 02 FB | 	rdlong	local01, fp
0e1b4     2C 4E 85 F1 | 	sub	fp, #44
0e1b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e1bc     2C 4E 05 51 |  if_ne	add	fp, #44
0e1c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1c4     2C 4E 85 51 |  if_ne	sub	fp, #44
0e1c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e1cc     3C 00 90 5D |  if_ne	jmp	#LR__1210
0e1d0     A7 12 02 FB | 	rdlong	arg01, fp
0e1d4     0C 4E 05 F1 | 	add	fp, #12
0e1d8     A7 14 02 FB | 	rdlong	arg02, fp
0e1dc     0C 4E 05 F1 | 	add	fp, #12
0e1e0     A7 16 02 FB | 	rdlong	arg03, fp
0e1e4     0C 4E 05 F1 | 	add	fp, #12
0e1e8     A7 18 02 FB | 	rdlong	arg04, fp
0e1ec     24 4E 85 F1 | 	sub	fp, #36
0e1f0     24 00 00 FF 
0e1f4     EC E5 05 F1 | 	add	objptr, ##18924
0e1f8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e1fc     24 00 00 FF 
0e200     EC E5 85 F1 | 	sub	objptr, ##18924
0e204     B0 43 B0 FD | 	call	#_hg010b_spin2_box
0e208                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e208     6C 00 90 FD | 	jmp	#LR__1211
0e20c                 | LR__1210
0e20c     A7 12 02 F6 | 	mov	arg01, fp
0e210     D8 E9 BF FD | 	call	#_converttoint
0e214     FD 20 02 F6 | 	mov	local02, result1
0e218     0C 4E 05 F1 | 	add	fp, #12
0e21c     A7 12 02 F6 | 	mov	arg01, fp
0e220     0C 4E 85 F1 | 	sub	fp, #12
0e224     C4 E9 BF FD | 	call	#_converttoint
0e228     FD 22 02 F6 | 	mov	local03, result1
0e22c     18 4E 05 F1 | 	add	fp, #24
0e230     A7 12 02 F6 | 	mov	arg01, fp
0e234     18 4E 85 F1 | 	sub	fp, #24
0e238     B0 E9 BF FD | 	call	#_converttoint
0e23c     FD 1E 02 F6 | 	mov	local01, result1
0e240     24 4E 05 F1 | 	add	fp, #36
0e244     A7 12 02 F6 | 	mov	arg01, fp
0e248     24 4E 85 F1 | 	sub	fp, #36
0e24c     9C E9 BF FD | 	call	#_converttoint
0e250     FD 18 02 F6 | 	mov	arg04, result1
0e254     24 00 00 FF 
0e258     EC E5 05 F1 | 	add	objptr, ##18924
0e25c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e260     24 00 00 FF 
0e264     EC E5 85 F1 | 	sub	objptr, ##18924
0e268     10 13 02 F6 | 	mov	arg01, local02
0e26c     11 15 02 F6 | 	mov	arg02, local03
0e270     0F 17 02 F6 | 	mov	arg03, local01
0e274     40 43 B0 FD | 	call	#_hg010b_spin2_box
0e278                 | LR__1211
0e278     A7 F0 03 F6 | 	mov	ptra, fp
0e27c     B2 00 A0 FD | 	call	#popregs_
0e280                 | _do_box_ret
0e280     2D 00 64 FD | 	ret
0e284                 | 
0e284                 | ' 
0e284                 | ' sub do_fill
0e284                 | _do_fill
0e284     03 4A 05 F6 | 	mov	COUNT_, #3
0e288     A8 00 A0 FD | 	call	#pushregs_
0e28c     30 F0 07 F1 | 	add	ptra, #48
0e290     8C 9D BF FD | 	call	#_pop
0e294     FD 18 02 F6 | 	mov	arg04, result1
0e298     FE 16 02 F6 | 	mov	arg03, result2
0e29c     FF 14 02 F6 | 	mov	arg02, result3
0e2a0     24 4E 05 F1 | 	add	fp, #36
0e2a4     A7 18 62 FC | 	wrlong	arg04, fp
0e2a8     04 4E 05 F1 | 	add	fp, #4
0e2ac     A7 16 62 FC | 	wrlong	arg03, fp
0e2b0     04 4E 05 F1 | 	add	fp, #4
0e2b4     A7 14 62 FC | 	wrlong	arg02, fp
0e2b8     2C 4E 85 F1 | 	sub	fp, #44
0e2bc     60 9D BF FD | 	call	#_pop
0e2c0     FD 18 02 F6 | 	mov	arg04, result1
0e2c4     FE 16 02 F6 | 	mov	arg03, result2
0e2c8     FF 14 02 F6 | 	mov	arg02, result3
0e2cc     18 4E 05 F1 | 	add	fp, #24
0e2d0     A7 18 62 FC | 	wrlong	arg04, fp
0e2d4     04 4E 05 F1 | 	add	fp, #4
0e2d8     A7 16 62 FC | 	wrlong	arg03, fp
0e2dc     04 4E 05 F1 | 	add	fp, #4
0e2e0     A7 14 62 FC | 	wrlong	arg02, fp
0e2e4     20 4E 85 F1 | 	sub	fp, #32
0e2e8     34 9D BF FD | 	call	#_pop
0e2ec     FD 18 02 F6 | 	mov	arg04, result1
0e2f0     FE 16 02 F6 | 	mov	arg03, result2
0e2f4     FF 1E 02 F6 | 	mov	local01, result3
0e2f8     0C 4E 05 F1 | 	add	fp, #12
0e2fc     A7 18 62 FC | 	wrlong	arg04, fp
0e300     04 4E 05 F1 | 	add	fp, #4
0e304     A7 16 62 FC | 	wrlong	arg03, fp
0e308     04 4E 05 F1 | 	add	fp, #4
0e30c     A7 1E 62 FC | 	wrlong	local01, fp
0e310     14 4E 85 F1 | 	sub	fp, #20
0e314     08 9D BF FD | 	call	#_pop
0e318     A7 FA 61 FC | 	wrlong	result1, fp
0e31c     04 4E 05 F1 | 	add	fp, #4
0e320     A7 FC 61 FC | 	wrlong	result2, fp
0e324     04 4E 05 F1 | 	add	fp, #4
0e328     A7 FE 61 FC | 	wrlong	result3, fp
0e32c                 | ' 
0e32c                 | ' t4=pop()
0e32c                 | ' t3=pop()
0e32c                 | ' t2=pop()
0e32c                 | ' t1=pop()
0e32c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e32c     FF 18 02 F6 | 	mov	arg04, result3
0e330     08 4E 85 F1 | 	sub	fp, #8
0e334     1C 18 0E F2 | 	cmp	arg04, #28 wz
0e338     08 4E 05 51 |  if_ne	add	fp, #8
0e33c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e340     08 4E 85 51 |  if_ne	sub	fp, #8
0e344     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e348     94 00 90 5D |  if_ne	jmp	#LR__1220
0e34c     14 4E 05 F1 | 	add	fp, #20
0e350     A7 1E 02 FB | 	rdlong	local01, fp
0e354     14 4E 85 F1 | 	sub	fp, #20
0e358     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e35c     14 4E 05 51 |  if_ne	add	fp, #20
0e360     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e364     14 4E 85 51 |  if_ne	sub	fp, #20
0e368     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e36c     70 00 90 5D |  if_ne	jmp	#LR__1220
0e370     20 4E 05 F1 | 	add	fp, #32
0e374     A7 1E 02 FB | 	rdlong	local01, fp
0e378     20 4E 85 F1 | 	sub	fp, #32
0e37c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e380     20 4E 05 51 |  if_ne	add	fp, #32
0e384     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e388     20 4E 85 51 |  if_ne	sub	fp, #32
0e38c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e390     4C 00 90 5D |  if_ne	jmp	#LR__1220
0e394     2C 4E 05 F1 | 	add	fp, #44
0e398     A7 1E 02 FB | 	rdlong	local01, fp
0e39c     2C 4E 85 F1 | 	sub	fp, #44
0e3a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3a4     2C 4E 05 51 |  if_ne	add	fp, #44
0e3a8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e3ac     2C 4E 85 51 |  if_ne	sub	fp, #44
0e3b0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e3b4     28 00 90 5D |  if_ne	jmp	#LR__1220
0e3b8     A7 12 02 FB | 	rdlong	arg01, fp
0e3bc     0C 4E 05 F1 | 	add	fp, #12
0e3c0     A7 14 02 FB | 	rdlong	arg02, fp
0e3c4     0C 4E 05 F1 | 	add	fp, #12
0e3c8     A7 16 02 FB | 	rdlong	arg03, fp
0e3cc     0C 4E 05 F1 | 	add	fp, #12
0e3d0     A7 18 02 FB | 	rdlong	arg04, fp
0e3d4     24 4E 85 F1 | 	sub	fp, #36
0e3d8     50 3C B0 FD | 	call	#_hg010b_spin2_fill
0e3dc                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0e3dc     58 00 90 FD | 	jmp	#LR__1221
0e3e0                 | LR__1220
0e3e0     A7 12 02 F6 | 	mov	arg01, fp
0e3e4     04 E8 BF FD | 	call	#_converttoint
0e3e8     FD 20 02 F6 | 	mov	local02, result1
0e3ec     0C 4E 05 F1 | 	add	fp, #12
0e3f0     A7 12 02 F6 | 	mov	arg01, fp
0e3f4     0C 4E 85 F1 | 	sub	fp, #12
0e3f8     F0 E7 BF FD | 	call	#_converttoint
0e3fc     FD 22 02 F6 | 	mov	local03, result1
0e400     18 4E 05 F1 | 	add	fp, #24
0e404     A7 12 02 F6 | 	mov	arg01, fp
0e408     18 4E 85 F1 | 	sub	fp, #24
0e40c     DC E7 BF FD | 	call	#_converttoint
0e410     FD 1E 02 F6 | 	mov	local01, result1
0e414     24 4E 05 F1 | 	add	fp, #36
0e418     A7 12 02 F6 | 	mov	arg01, fp
0e41c     24 4E 85 F1 | 	sub	fp, #36
0e420     C8 E7 BF FD | 	call	#_converttoint
0e424     FD 18 02 F6 | 	mov	arg04, result1
0e428     10 13 02 F6 | 	mov	arg01, local02
0e42c     11 15 02 F6 | 	mov	arg02, local03
0e430     0F 17 02 F6 | 	mov	arg03, local01
0e434     F4 3B B0 FD | 	call	#_hg010b_spin2_fill
0e438                 | LR__1221
0e438     A7 F0 03 F6 | 	mov	ptra, fp
0e43c     B2 00 A0 FD | 	call	#popregs_
0e440                 | _do_fill_ret
0e440     2D 00 64 FD | 	ret
0e444                 | 
0e444                 | ' 
0e444                 | ' ' -------------------------- Draw a frane
0e444                 | ' 
0e444                 | ' sub do_frame
0e444                 | _do_frame
0e444     03 4A 05 F6 | 	mov	COUNT_, #3
0e448     A8 00 A0 FD | 	call	#pushregs_
0e44c     30 F0 07 F1 | 	add	ptra, #48
0e450     CC 9B BF FD | 	call	#_pop
0e454     FD 1A 02 F6 | 	mov	arg05, result1
0e458     FE 18 02 F6 | 	mov	arg04, result2
0e45c     FF 16 02 F6 | 	mov	arg03, result3
0e460     24 4E 05 F1 | 	add	fp, #36
0e464     A7 1A 62 FC | 	wrlong	arg05, fp
0e468     04 4E 05 F1 | 	add	fp, #4
0e46c     A7 18 62 FC | 	wrlong	arg04, fp
0e470     04 4E 05 F1 | 	add	fp, #4
0e474     A7 16 62 FC | 	wrlong	arg03, fp
0e478     2C 4E 85 F1 | 	sub	fp, #44
0e47c     A0 9B BF FD | 	call	#_pop
0e480     FD 1A 02 F6 | 	mov	arg05, result1
0e484     FE 18 02 F6 | 	mov	arg04, result2
0e488     FF 16 02 F6 | 	mov	arg03, result3
0e48c     18 4E 05 F1 | 	add	fp, #24
0e490     A7 1A 62 FC | 	wrlong	arg05, fp
0e494     04 4E 05 F1 | 	add	fp, #4
0e498     A7 18 62 FC | 	wrlong	arg04, fp
0e49c     04 4E 05 F1 | 	add	fp, #4
0e4a0     A7 16 62 FC | 	wrlong	arg03, fp
0e4a4     20 4E 85 F1 | 	sub	fp, #32
0e4a8     74 9B BF FD | 	call	#_pop
0e4ac     FD 1A 02 F6 | 	mov	arg05, result1
0e4b0     FE 18 02 F6 | 	mov	arg04, result2
0e4b4     FF 1E 02 F6 | 	mov	local01, result3
0e4b8     0C 4E 05 F1 | 	add	fp, #12
0e4bc     A7 1A 62 FC | 	wrlong	arg05, fp
0e4c0     04 4E 05 F1 | 	add	fp, #4
0e4c4     A7 18 62 FC | 	wrlong	arg04, fp
0e4c8     04 4E 05 F1 | 	add	fp, #4
0e4cc     A7 1E 62 FC | 	wrlong	local01, fp
0e4d0     14 4E 85 F1 | 	sub	fp, #20
0e4d4     48 9B BF FD | 	call	#_pop
0e4d8     A7 FA 61 FC | 	wrlong	result1, fp
0e4dc     04 4E 05 F1 | 	add	fp, #4
0e4e0     A7 FC 61 FC | 	wrlong	result2, fp
0e4e4     04 4E 05 F1 | 	add	fp, #4
0e4e8     A7 FE 61 FC | 	wrlong	result3, fp
0e4ec                 | ' 
0e4ec                 | ' t4=pop()
0e4ec                 | ' t3=pop()
0e4ec                 | ' t2=pop()
0e4ec                 | ' t1=pop()
0e4ec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e4ec     FF 1A 02 F6 | 	mov	arg05, result3
0e4f0     08 4E 85 F1 | 	sub	fp, #8
0e4f4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e4f8     08 4E 05 51 |  if_ne	add	fp, #8
0e4fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e500     08 4E 85 51 |  if_ne	sub	fp, #8
0e504     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e508     A8 00 90 5D |  if_ne	jmp	#LR__1230
0e50c     14 4E 05 F1 | 	add	fp, #20
0e510     A7 1E 02 FB | 	rdlong	local01, fp
0e514     14 4E 85 F1 | 	sub	fp, #20
0e518     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e51c     14 4E 05 51 |  if_ne	add	fp, #20
0e520     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e524     14 4E 85 51 |  if_ne	sub	fp, #20
0e528     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e52c     84 00 90 5D |  if_ne	jmp	#LR__1230
0e530     20 4E 05 F1 | 	add	fp, #32
0e534     A7 1E 02 FB | 	rdlong	local01, fp
0e538     20 4E 85 F1 | 	sub	fp, #32
0e53c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e540     20 4E 05 51 |  if_ne	add	fp, #32
0e544     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e548     20 4E 85 51 |  if_ne	sub	fp, #32
0e54c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e550     60 00 90 5D |  if_ne	jmp	#LR__1230
0e554     2C 4E 05 F1 | 	add	fp, #44
0e558     A7 1E 02 FB | 	rdlong	local01, fp
0e55c     2C 4E 85 F1 | 	sub	fp, #44
0e560     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e564     2C 4E 05 51 |  if_ne	add	fp, #44
0e568     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e56c     2C 4E 85 51 |  if_ne	sub	fp, #44
0e570     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e574     3C 00 90 5D |  if_ne	jmp	#LR__1230
0e578     A7 12 02 FB | 	rdlong	arg01, fp
0e57c     0C 4E 05 F1 | 	add	fp, #12
0e580     A7 14 02 FB | 	rdlong	arg02, fp
0e584     0C 4E 05 F1 | 	add	fp, #12
0e588     A7 16 02 FB | 	rdlong	arg03, fp
0e58c     0C 4E 05 F1 | 	add	fp, #12
0e590     A7 18 02 FB | 	rdlong	arg04, fp
0e594     24 4E 85 F1 | 	sub	fp, #36
0e598     24 00 00 FF 
0e59c     EC E5 05 F1 | 	add	objptr, ##18924
0e5a0     F2 1A 02 FB | 	rdlong	arg05, objptr
0e5a4     24 00 00 FF 
0e5a8     EC E5 85 F1 | 	sub	objptr, ##18924
0e5ac     88 3F B0 FD | 	call	#_hg010b_spin2_frame
0e5b0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e5b0     6C 00 90 FD | 	jmp	#LR__1231
0e5b4                 | LR__1230
0e5b4     A7 12 02 F6 | 	mov	arg01, fp
0e5b8     30 E6 BF FD | 	call	#_converttoint
0e5bc     FD 20 02 F6 | 	mov	local02, result1
0e5c0     0C 4E 05 F1 | 	add	fp, #12
0e5c4     A7 12 02 F6 | 	mov	arg01, fp
0e5c8     0C 4E 85 F1 | 	sub	fp, #12
0e5cc     1C E6 BF FD | 	call	#_converttoint
0e5d0     FD 22 02 F6 | 	mov	local03, result1
0e5d4     18 4E 05 F1 | 	add	fp, #24
0e5d8     A7 12 02 F6 | 	mov	arg01, fp
0e5dc     18 4E 85 F1 | 	sub	fp, #24
0e5e0     08 E6 BF FD | 	call	#_converttoint
0e5e4     FD 1E 02 F6 | 	mov	local01, result1
0e5e8     24 4E 05 F1 | 	add	fp, #36
0e5ec     A7 12 02 F6 | 	mov	arg01, fp
0e5f0     24 4E 85 F1 | 	sub	fp, #36
0e5f4     F4 E5 BF FD | 	call	#_converttoint
0e5f8     FD 18 02 F6 | 	mov	arg04, result1
0e5fc     24 00 00 FF 
0e600     EC E5 05 F1 | 	add	objptr, ##18924
0e604     F2 1A 02 FB | 	rdlong	arg05, objptr
0e608     24 00 00 FF 
0e60c     EC E5 85 F1 | 	sub	objptr, ##18924
0e610     10 13 02 F6 | 	mov	arg01, local02
0e614     11 15 02 F6 | 	mov	arg02, local03
0e618     0F 17 02 F6 | 	mov	arg03, local01
0e61c     18 3F B0 FD | 	call	#_hg010b_spin2_frame
0e620                 | LR__1231
0e620     A7 F0 03 F6 | 	mov	ptra, fp
0e624     B2 00 A0 FD | 	call	#popregs_
0e628                 | _do_frame_ret
0e628     2D 00 64 FD | 	ret
0e62c                 | 
0e62c                 | ' 
0e62c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0e62c                 | ' 
0e62c                 | ' ' ------------------------- Print to the screem
0e62c                 | ' 
0e62c                 | ' sub do_print  
0e62c                 | _do_print
0e62c     0A 4A 05 F6 | 	mov	COUNT_, #10
0e630     A8 00 A0 FD | 	call	#pushregs_
0e634     00 24 06 F6 | 	mov	local04, #0
0e638     E4 99 BF FD | 	call	#_pop
0e63c     FD 26 02 F6 | 	mov	local05, result1
0e640     FE 28 02 F6 | 	mov	local06, result2
0e644     FF 2A 02 F6 | 	mov	local07, result3
0e648     13 1F 02 F6 | 	mov	local01, local05
0e64c     14 21 02 F6 | 	mov	local02, local06
0e650     15 23 02 F6 | 	mov	local03, local07
0e654                 | '  
0e654                 | ' r=0
0e654                 | ' t1=pop() 
0e654                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0e654     21 22 0E F2 | 	cmp	local03, #33 wz
0e658     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0e65c     20 00 90 5D |  if_ne	jmp	#LR__1240
0e660     11 25 02 F6 | 	mov	local04, local03
0e664     B8 99 BF FD | 	call	#_pop
0e668     FD 26 02 F6 | 	mov	local05, result1
0e66c     FE 28 02 F6 | 	mov	local06, result2
0e670     FF 2A 02 F6 | 	mov	local07, result3
0e674     13 1F 02 F6 | 	mov	local01, local05
0e678     14 21 02 F6 | 	mov	local02, local06
0e67c     15 23 02 F6 | 	mov	local03, local07
0e680                 | LR__1240
0e680                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0e680     20 22 0E F2 | 	cmp	local03, #32 wz
0e684     11 25 02 A6 |  if_e	mov	local04, local03
0e688                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0e688     FF 22 0E F2 | 	cmp	local03, #255 wz
0e68c     0C 00 90 5D |  if_ne	jmp	#LR__1241
0e690     0F 13 02 F6 | 	mov	arg01, local01
0e694     F4 1E B0 FD | 	call	#_printerror
0e698     30 04 90 FD | 	jmp	#LR__1258
0e69c                 | LR__1241
0e69c                 | ' 
0e69c                 | ' if r=print_mod_comma  then
0e69c     21 24 0E F2 | 	cmp	local04, #33 wz
0e6a0     AC 01 90 5D |  if_ne	jmp	#LR__1246
0e6a4                 | '   if t1.result_type=result_int then print t1.result.iresult,
0e6a4     1C 22 0E F2 | 	cmp	local03, #28 wz
0e6a8     64 00 90 5D |  if_ne	jmp	#LR__1242
0e6ac     00 12 06 F6 | 	mov	arg01, #0
0e6b0     28 A9 B0 FD | 	call	#__system___getiolock_0306
0e6b4     FD 12 02 F6 | 	mov	arg01, result1
0e6b8     3C 54 B0 FD | 	call	#__system___lockmem
0e6bc     00 28 06 F6 | 	mov	local06, #0
0e6c0     00 12 06 F6 | 	mov	arg01, #0
0e6c4     0F 15 02 F6 | 	mov	arg02, local01
0e6c8     00 16 06 F6 | 	mov	arg03, #0
0e6cc     0A 18 06 F6 | 	mov	arg04, #10
0e6d0     74 60 B0 FD | 	call	#__system___basic_print_integer
0e6d4     FD 2A 02 F6 | 	mov	local07, result1
0e6d8     14 27 02 F6 | 	mov	local05, local06
0e6dc     15 27 02 F1 | 	add	local05, local07
0e6e0     00 2C 06 F6 | 	mov	local08, #0
0e6e4     00 12 06 F6 | 	mov	arg01, #0
0e6e8     09 14 06 F6 | 	mov	arg02, #9
0e6ec     00 16 06 F6 | 	mov	arg03, #0
0e6f0     B8 5F B0 FD | 	call	#__system___basic_print_char
0e6f4     FD 2E 02 F6 | 	mov	local09, result1
0e6f8     FD 26 02 F1 | 	add	local05, result1
0e6fc     00 12 06 F6 | 	mov	arg01, #0
0e700     D8 A8 B0 FD | 	call	#__system___getiolock_0306
0e704     FD 00 68 FC | 	wrlong	#0, result1
0e708     00 FA 05 F6 | 	mov	result1, #0
0e70c     00 30 06 F6 | 	mov	local10, #0
0e710                 | LR__1242
0e710                 | '   if t1.result_type=result_uint then print t1.result.uresult,
0e710     1D 22 0E F2 | 	cmp	local03, #29 wz
0e714     64 00 90 5D |  if_ne	jmp	#LR__1243
0e718     00 12 06 F6 | 	mov	arg01, #0
0e71c     BC A8 B0 FD | 	call	#__system___getiolock_0306
0e720     FD 12 02 F6 | 	mov	arg01, result1
0e724     D0 53 B0 FD | 	call	#__system___lockmem
0e728     00 28 06 F6 | 	mov	local06, #0
0e72c     00 12 06 F6 | 	mov	arg01, #0
0e730     0F 15 02 F6 | 	mov	arg02, local01
0e734     00 16 06 F6 | 	mov	arg03, #0
0e738     0A 18 06 F6 | 	mov	arg04, #10
0e73c     48 60 B0 FD | 	call	#__system___basic_print_unsigned
0e740     FD 2A 02 F6 | 	mov	local07, result1
0e744     14 27 02 F6 | 	mov	local05, local06
0e748     15 27 02 F1 | 	add	local05, local07
0e74c     00 2C 06 F6 | 	mov	local08, #0
0e750     00 12 06 F6 | 	mov	arg01, #0
0e754     09 14 06 F6 | 	mov	arg02, #9
0e758     00 16 06 F6 | 	mov	arg03, #0
0e75c     4C 5F B0 FD | 	call	#__system___basic_print_char
0e760     FD 2E 02 F6 | 	mov	local09, result1
0e764     FD 26 02 F1 | 	add	local05, result1
0e768     00 12 06 F6 | 	mov	arg01, #0
0e76c     6C A8 B0 FD | 	call	#__system___getiolock_0306
0e770     FD 00 68 FC | 	wrlong	#0, result1
0e774     00 FA 05 F6 | 	mov	result1, #0
0e778     00 30 06 F6 | 	mov	local10, #0
0e77c                 | LR__1243
0e77c                 | '   if t1.result_type=result_float then print t1.result.fresult,
0e77c     1E 22 0E F2 | 	cmp	local03, #30 wz
0e780     64 00 90 5D |  if_ne	jmp	#LR__1244
0e784     00 12 06 F6 | 	mov	arg01, #0
0e788     50 A8 B0 FD | 	call	#__system___getiolock_0306
0e78c     FD 12 02 F6 | 	mov	arg01, result1
0e790     64 53 B0 FD | 	call	#__system___lockmem
0e794     00 28 06 F6 | 	mov	local06, #0
0e798     00 12 06 F6 | 	mov	arg01, #0
0e79c     0F 15 02 F6 | 	mov	arg02, local01
0e7a0     00 16 06 F6 | 	mov	arg03, #0
0e7a4     23 18 06 F6 | 	mov	arg04, #35
0e7a8     B0 82 B0 FD | 	call	#__system___basic_print_float
0e7ac     FD 2A 02 F6 | 	mov	local07, result1
0e7b0     14 27 02 F6 | 	mov	local05, local06
0e7b4     15 27 02 F1 | 	add	local05, local07
0e7b8     00 2C 06 F6 | 	mov	local08, #0
0e7bc     00 12 06 F6 | 	mov	arg01, #0
0e7c0     09 14 06 F6 | 	mov	arg02, #9
0e7c4     00 16 06 F6 | 	mov	arg03, #0
0e7c8     E0 5E B0 FD | 	call	#__system___basic_print_char
0e7cc     FD 2E 02 F6 | 	mov	local09, result1
0e7d0     FD 26 02 F1 | 	add	local05, result1
0e7d4     00 12 06 F6 | 	mov	arg01, #0
0e7d8     00 A8 B0 FD | 	call	#__system___getiolock_0306
0e7dc     FD 00 68 FC | 	wrlong	#0, result1
0e7e0     00 FA 05 F6 | 	mov	result1, #0
0e7e4     00 30 06 F6 | 	mov	local10, #0
0e7e8                 | LR__1244
0e7e8                 | '   if t1.result_type=result_string then print t1.result.sresult,
0e7e8     1F 22 0E F2 | 	cmp	local03, #31 wz
0e7ec     60 00 90 5D |  if_ne	jmp	#LR__1245
0e7f0     00 12 06 F6 | 	mov	arg01, #0
0e7f4     E4 A7 B0 FD | 	call	#__system___getiolock_0306
0e7f8     FD 12 02 F6 | 	mov	arg01, result1
0e7fc     F8 52 B0 FD | 	call	#__system___lockmem
0e800     00 28 06 F6 | 	mov	local06, #0
0e804     00 12 06 F6 | 	mov	arg01, #0
0e808     0F 15 02 F6 | 	mov	arg02, local01
0e80c     00 16 06 F6 | 	mov	arg03, #0
0e810     F0 5E B0 FD | 	call	#__system___basic_print_string
0e814     FD 2A 02 F6 | 	mov	local07, result1
0e818     14 27 02 F6 | 	mov	local05, local06
0e81c     15 27 02 F1 | 	add	local05, local07
0e820     00 2C 06 F6 | 	mov	local08, #0
0e824     00 12 06 F6 | 	mov	arg01, #0
0e828     09 14 06 F6 | 	mov	arg02, #9
0e82c     00 16 06 F6 | 	mov	arg03, #0
0e830     78 5E B0 FD | 	call	#__system___basic_print_char
0e834     FD 2E 02 F6 | 	mov	local09, result1
0e838     FD 26 02 F1 | 	add	local05, result1
0e83c     00 12 06 F6 | 	mov	arg01, #0
0e840     98 A7 B0 FD | 	call	#__system___getiolock_0306
0e844     FD 00 68 FC | 	wrlong	#0, result1
0e848     00 FA 05 F6 | 	mov	result1, #0
0e84c     00 30 06 F6 | 	mov	local10, #0
0e850                 | LR__1245
0e850                 | LR__1246
0e850                 | ' if r=print_mod_semicolon then 
0e850     22 24 0E F2 | 	cmp	local04, #34 wz
0e854     1C 01 90 5D |  if_ne	jmp	#LR__1251
0e858                 | '   if t1.result_type=result_int then print t1.result.iresult;
0e858     1C 22 0E F2 | 	cmp	local03, #28 wz
0e85c     50 00 90 5D |  if_ne	jmp	#LR__1247
0e860     00 12 06 F6 | 	mov	arg01, #0
0e864     74 A7 B0 FD | 	call	#__system___getiolock_0306
0e868     FD 12 02 F6 | 	mov	arg01, result1
0e86c     88 52 B0 FD | 	call	#__system___lockmem
0e870     00 28 06 F6 | 	mov	local06, #0
0e874     00 30 06 F6 | 	mov	local10, #0
0e878     0A 2C 06 F6 | 	mov	local08, #10
0e87c     00 12 06 F6 | 	mov	arg01, #0
0e880     0F 15 02 F6 | 	mov	arg02, local01
0e884     00 16 06 F6 | 	mov	arg03, #0
0e888     0A 18 06 F6 | 	mov	arg04, #10
0e88c     B8 5E B0 FD | 	call	#__system___basic_print_integer
0e890     FD 2A 02 F6 | 	mov	local07, result1
0e894     14 27 02 F6 | 	mov	local05, local06
0e898     15 27 02 F1 | 	add	local05, local07
0e89c     00 12 06 F6 | 	mov	arg01, #0
0e8a0     38 A7 B0 FD | 	call	#__system___getiolock_0306
0e8a4     FD 00 68 FC | 	wrlong	#0, result1
0e8a8     00 FA 05 F6 | 	mov	result1, #0
0e8ac     00 2E 06 F6 | 	mov	local09, #0
0e8b0                 | LR__1247
0e8b0                 | '   if t1.result_type=result_uint then print t1.result.uresult;
0e8b0     1D 22 0E F2 | 	cmp	local03, #29 wz
0e8b4     50 00 90 5D |  if_ne	jmp	#LR__1248
0e8b8     00 12 06 F6 | 	mov	arg01, #0
0e8bc     1C A7 B0 FD | 	call	#__system___getiolock_0306
0e8c0     FD 12 02 F6 | 	mov	arg01, result1
0e8c4     30 52 B0 FD | 	call	#__system___lockmem
0e8c8     00 28 06 F6 | 	mov	local06, #0
0e8cc     00 30 06 F6 | 	mov	local10, #0
0e8d0     0A 2C 06 F6 | 	mov	local08, #10
0e8d4     00 12 06 F6 | 	mov	arg01, #0
0e8d8     0F 15 02 F6 | 	mov	arg02, local01
0e8dc     00 16 06 F6 | 	mov	arg03, #0
0e8e0     0A 18 06 F6 | 	mov	arg04, #10
0e8e4     A0 5E B0 FD | 	call	#__system___basic_print_unsigned
0e8e8     FD 2A 02 F6 | 	mov	local07, result1
0e8ec     14 27 02 F6 | 	mov	local05, local06
0e8f0     15 27 02 F1 | 	add	local05, local07
0e8f4     00 12 06 F6 | 	mov	arg01, #0
0e8f8     E0 A6 B0 FD | 	call	#__system___getiolock_0306
0e8fc     FD 00 68 FC | 	wrlong	#0, result1
0e900     00 FA 05 F6 | 	mov	result1, #0
0e904     00 2E 06 F6 | 	mov	local09, #0
0e908                 | LR__1248
0e908                 | '   if t1.result_type=result_float then print t1.result.fresult;
0e908     1E 22 0E F2 | 	cmp	local03, #30 wz
0e90c     30 00 90 5D |  if_ne	jmp	#LR__1249
0e910     00 12 06 F6 | 	mov	arg01, #0
0e914     C4 A6 B0 FD | 	call	#__system___getiolock_0306
0e918     FD 12 02 F6 | 	mov	arg01, result1
0e91c     D8 51 B0 FD | 	call	#__system___lockmem
0e920     00 12 06 F6 | 	mov	arg01, #0
0e924     0F 15 02 F6 | 	mov	arg02, local01
0e928     00 16 06 F6 | 	mov	arg03, #0
0e92c     23 18 06 F6 | 	mov	arg04, #35
0e930     28 81 B0 FD | 	call	#__system___basic_print_float
0e934     00 12 06 F6 | 	mov	arg01, #0
0e938     A0 A6 B0 FD | 	call	#__system___getiolock_0306
0e93c     FD 00 68 FC | 	wrlong	#0, result1
0e940                 | LR__1249
0e940                 | '   if t1.result_type=result_string then print t1.result.sresult;
0e940     1F 22 0E F2 | 	cmp	local03, #31 wz
0e944     2C 00 90 5D |  if_ne	jmp	#LR__1250
0e948     00 12 06 F6 | 	mov	arg01, #0
0e94c     8C A6 B0 FD | 	call	#__system___getiolock_0306
0e950     FD 12 02 F6 | 	mov	arg01, result1
0e954     A0 51 B0 FD | 	call	#__system___lockmem
0e958     00 12 06 F6 | 	mov	arg01, #0
0e95c     0F 15 02 F6 | 	mov	arg02, local01
0e960     00 16 06 F6 | 	mov	arg03, #0
0e964     9C 5D B0 FD | 	call	#__system___basic_print_string
0e968     00 12 06 F6 | 	mov	arg01, #0
0e96c     6C A6 B0 FD | 	call	#__system___getiolock_0306
0e970     FD 00 68 FC | 	wrlong	#0, result1
0e974                 | LR__1250
0e974                 | LR__1251
0e974                 | ' if r=0 then 
0e974     00 24 0E F2 | 	cmp	local04, #0 wz
0e978     1C 01 90 5D |  if_ne	jmp	#LR__1256
0e97c                 | '   if t1.result_type=result_int then print t1.result.iresult
0e97c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e980     40 00 90 5D |  if_ne	jmp	#LR__1252
0e984     00 12 06 F6 | 	mov	arg01, #0
0e988     50 A6 B0 FD | 	call	#__system___getiolock_0306
0e98c     FD 12 02 F6 | 	mov	arg01, result1
0e990     64 51 B0 FD | 	call	#__system___lockmem
0e994     00 12 06 F6 | 	mov	arg01, #0
0e998     0F 15 02 F6 | 	mov	arg02, local01
0e99c     00 16 06 F6 | 	mov	arg03, #0
0e9a0     0A 18 06 F6 | 	mov	arg04, #10
0e9a4     A0 5D B0 FD | 	call	#__system___basic_print_integer
0e9a8     00 12 06 F6 | 	mov	arg01, #0
0e9ac     0A 14 06 F6 | 	mov	arg02, #10
0e9b0     00 16 06 F6 | 	mov	arg03, #0
0e9b4     F4 5C B0 FD | 	call	#__system___basic_print_char
0e9b8     00 12 06 F6 | 	mov	arg01, #0
0e9bc     1C A6 B0 FD | 	call	#__system___getiolock_0306
0e9c0     FD 00 68 FC | 	wrlong	#0, result1
0e9c4                 | LR__1252
0e9c4                 | '   if t1.result_type=result_uint then print t1.result.uresult
0e9c4     1D 22 0E F2 | 	cmp	local03, #29 wz
0e9c8     40 00 90 5D |  if_ne	jmp	#LR__1253
0e9cc     00 12 06 F6 | 	mov	arg01, #0
0e9d0     08 A6 B0 FD | 	call	#__system___getiolock_0306
0e9d4     FD 12 02 F6 | 	mov	arg01, result1
0e9d8     1C 51 B0 FD | 	call	#__system___lockmem
0e9dc     00 12 06 F6 | 	mov	arg01, #0
0e9e0     0F 15 02 F6 | 	mov	arg02, local01
0e9e4     00 16 06 F6 | 	mov	arg03, #0
0e9e8     0A 18 06 F6 | 	mov	arg04, #10
0e9ec     98 5D B0 FD | 	call	#__system___basic_print_unsigned
0e9f0     00 12 06 F6 | 	mov	arg01, #0
0e9f4     0A 14 06 F6 | 	mov	arg02, #10
0e9f8     00 16 06 F6 | 	mov	arg03, #0
0e9fc     AC 5C B0 FD | 	call	#__system___basic_print_char
0ea00     00 12 06 F6 | 	mov	arg01, #0
0ea04     D4 A5 B0 FD | 	call	#__system___getiolock_0306
0ea08     FD 00 68 FC | 	wrlong	#0, result1
0ea0c                 | LR__1253
0ea0c                 | '   if t1.result_type=result_float then print t1.result.fresult
0ea0c     1E 22 0E F2 | 	cmp	local03, #30 wz
0ea10     40 00 90 5D |  if_ne	jmp	#LR__1254
0ea14     00 12 06 F6 | 	mov	arg01, #0
0ea18     C0 A5 B0 FD | 	call	#__system___getiolock_0306
0ea1c     FD 12 02 F6 | 	mov	arg01, result1
0ea20     D4 50 B0 FD | 	call	#__system___lockmem
0ea24     00 12 06 F6 | 	mov	arg01, #0
0ea28     0F 15 02 F6 | 	mov	arg02, local01
0ea2c     00 16 06 F6 | 	mov	arg03, #0
0ea30     23 18 06 F6 | 	mov	arg04, #35
0ea34     24 80 B0 FD | 	call	#__system___basic_print_float
0ea38     00 12 06 F6 | 	mov	arg01, #0
0ea3c     0A 14 06 F6 | 	mov	arg02, #10
0ea40     00 16 06 F6 | 	mov	arg03, #0
0ea44     64 5C B0 FD | 	call	#__system___basic_print_char
0ea48     00 12 06 F6 | 	mov	arg01, #0
0ea4c     8C A5 B0 FD | 	call	#__system___getiolock_0306
0ea50     FD 00 68 FC | 	wrlong	#0, result1
0ea54                 | LR__1254
0ea54                 | '   if t1.result_type=result_string then print t1.result.sresult
0ea54     1F 22 0E F2 | 	cmp	local03, #31 wz
0ea58     3C 00 90 5D |  if_ne	jmp	#LR__1255
0ea5c     00 12 06 F6 | 	mov	arg01, #0
0ea60     78 A5 B0 FD | 	call	#__system___getiolock_0306
0ea64     FD 12 02 F6 | 	mov	arg01, result1
0ea68     8C 50 B0 FD | 	call	#__system___lockmem
0ea6c     00 12 06 F6 | 	mov	arg01, #0
0ea70     0F 15 02 F6 | 	mov	arg02, local01
0ea74     00 16 06 F6 | 	mov	arg03, #0
0ea78     88 5C B0 FD | 	call	#__system___basic_print_string
0ea7c     00 12 06 F6 | 	mov	arg01, #0
0ea80     0A 14 06 F6 | 	mov	arg02, #10
0ea84     00 16 06 F6 | 	mov	arg03, #0
0ea88     20 5C B0 FD | 	call	#__system___basic_print_char
0ea8c     00 12 06 F6 | 	mov	arg01, #0
0ea90     48 A5 B0 FD | 	call	#__system___getiolock_0306
0ea94     FD 00 68 FC | 	wrlong	#0, result1
0ea98                 | LR__1255
0ea98                 | LR__1256
0ea98                 | ' if r=print_mod_empty then print
0ea98     20 24 0E F2 | 	cmp	local04, #32 wz
0ea9c     2C 00 90 5D |  if_ne	jmp	#LR__1257
0eaa0     00 12 06 F6 | 	mov	arg01, #0
0eaa4     34 A5 B0 FD | 	call	#__system___getiolock_0306
0eaa8     FD 12 02 F6 | 	mov	arg01, result1
0eaac     48 50 B0 FD | 	call	#__system___lockmem
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     0A 14 06 F6 | 	mov	arg02, #10
0eab8     00 16 06 F6 | 	mov	arg03, #0
0eabc     EC 5B B0 FD | 	call	#__system___basic_print_char
0eac0     00 12 06 F6 | 	mov	arg01, #0
0eac4     14 A5 B0 FD | 	call	#__system___getiolock_0306
0eac8     FD 00 68 FC | 	wrlong	#0, result1
0eacc                 | LR__1257
0eacc                 | LR__1258
0eacc     A7 F0 03 F6 | 	mov	ptra, fp
0ead0     B2 00 A0 FD | 	call	#popregs_
0ead4                 | _do_print_ret
0ead4     2D 00 64 FD | 	ret
0ead8                 | 
0ead8                 | ' 
0ead8                 | ' 
0ead8                 | ' sub do_paper
0ead8                 | _do_paper
0ead8     03 4A 05 F6 | 	mov	COUNT_, #3
0eadc     A8 00 A0 FD | 	call	#pushregs_
0eae0     3C 95 BF FD | 	call	#_pop
0eae4     FD 1E 02 F6 | 	mov	local01, result1
0eae8     FE 20 02 F6 | 	mov	local02, result2
0eaec     FF 22 02 F6 | 	mov	local03, result3
0eaf0                 | ' t1=pop() 
0eaf0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0eaf0     1E 22 0E F2 | 	cmp	local03, #30 wz
0eaf4     10 00 90 5D |  if_ne	jmp	#LR__1260
0eaf8     0F 13 02 F6 | 	mov	arg01, local01
0eafc     00 14 06 F6 | 	mov	arg02, #0
0eb00     08 7E B0 FD | 	call	#__system___float_tointeger
0eb04     FD 1E 02 F6 | 	mov	local01, result1
0eb08                 | LR__1260
0eb08                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0eb08     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb0c     18 00 90 5D |  if_ne	jmp	#LR__1261
0eb10     0F 13 02 F6 | 	mov	arg01, local01
0eb14     14 81 B0 FD | 	call	#__system____builtin_atof
0eb18     FD 12 02 F6 | 	mov	arg01, result1
0eb1c     00 14 06 F6 | 	mov	arg02, #0
0eb20     E8 7D B0 FD | 	call	#__system___float_tointeger
0eb24     FD 1E 02 F6 | 	mov	local01, result1
0eb28                 | LR__1261
0eb28     24 00 00 FF 
0eb2c     FC E5 05 F1 | 	add	objptr, ##18940
0eb30     F2 1E 62 FC | 	wrlong	local01, objptr
0eb34     04 E4 05 F1 | 	add	objptr, #4
0eb38     F2 12 02 FB | 	rdlong	arg01, objptr
0eb3c                 | ' 
0eb3c                 | ' write_color:=ff
0eb3c     24 00 00 FF 
0eb40     C3 E5 85 F1 | 	sub	objptr, ##18883
0eb44     F2 12 62 FC | 	wrlong	arg01, objptr
0eb48                 | ' write_background:=bb
0eb48     04 E4 05 F1 | 	add	objptr, #4
0eb4c     F2 1E 62 FC | 	wrlong	local01, objptr
0eb50     41 E4 85 F1 | 	sub	objptr, #65
0eb54     A7 F0 03 F6 | 	mov	ptra, fp
0eb58     B2 00 A0 FD | 	call	#popregs_
0eb5c                 | _do_paper_ret
0eb5c     2D 00 64 FD | 	ret
0eb60                 | 
0eb60                 | ' 
0eb60                 | ' sub do_ink
0eb60                 | _do_ink
0eb60     03 4A 05 F6 | 	mov	COUNT_, #3
0eb64     A8 00 A0 FD | 	call	#pushregs_
0eb68     B4 94 BF FD | 	call	#_pop
0eb6c     FD 1E 02 F6 | 	mov	local01, result1
0eb70     FE 20 02 F6 | 	mov	local02, result2
0eb74     FF 22 02 F6 | 	mov	local03, result3
0eb78                 | ' t1=pop() 
0eb78                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0eb78     1E 22 0E F2 | 	cmp	local03, #30 wz
0eb7c     10 00 90 5D |  if_ne	jmp	#LR__1270
0eb80     0F 13 02 F6 | 	mov	arg01, local01
0eb84     00 14 06 F6 | 	mov	arg02, #0
0eb88     80 7D B0 FD | 	call	#__system___float_tointeger
0eb8c     FD 1E 02 F6 | 	mov	local01, result1
0eb90                 | LR__1270
0eb90                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0eb90     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb94     18 00 90 5D |  if_ne	jmp	#LR__1271
0eb98     0F 13 02 F6 | 	mov	arg01, local01
0eb9c     8C 80 B0 FD | 	call	#__system____builtin_atof
0eba0     FD 12 02 F6 | 	mov	arg01, result1
0eba4     00 14 06 F6 | 	mov	arg02, #0
0eba8     60 7D B0 FD | 	call	#__system___float_tointeger
0ebac     FD 1E 02 F6 | 	mov	local01, result1
0ebb0                 | LR__1271
0ebb0     25 00 00 FF 
0ebb4     00 E4 05 F1 | 	add	objptr, ##18944
0ebb8     F2 1E 62 FC | 	wrlong	local01, objptr
0ebbc     04 E4 85 F1 | 	sub	objptr, #4
0ebc0     F2 14 02 FB | 	rdlong	arg02, objptr
0ebc4                 | ' 
0ebc4                 | ' write_color:=ff
0ebc4     24 00 00 FF 
0ebc8     BF E5 85 F1 | 	sub	objptr, ##18879
0ebcc     F2 1E 62 FC | 	wrlong	local01, objptr
0ebd0                 | ' write_background:=bb
0ebd0     04 E4 05 F1 | 	add	objptr, #4
0ebd4     F2 14 62 FC | 	wrlong	arg02, objptr
0ebd8     24 00 00 FF 
0ebdc     BF E5 05 F1 | 	add	objptr, ##18879
0ebe0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebe4     25 00 00 FF 
0ebe8     00 E4 85 F1 | 	sub	objptr, ##18944
0ebec     5C 2B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
0ebf0     A7 F0 03 F6 | 	mov	ptra, fp
0ebf4     B2 00 A0 FD | 	call	#popregs_
0ebf8                 | _do_ink_ret
0ebf8     2D 00 64 FD | 	ret
0ebfc                 | 
0ebfc                 | ' 
0ebfc                 | ' 
0ebfc                 | ' sub do_font
0ebfc                 | _do_font
0ebfc     03 4A 05 F6 | 	mov	COUNT_, #3
0ec00     A8 00 A0 FD | 	call	#pushregs_
0ec04     18 94 BF FD | 	call	#_pop
0ec08     FD 1E 02 F6 | 	mov	local01, result1
0ec0c     FE 20 02 F6 | 	mov	local02, result2
0ec10     FF 22 02 F6 | 	mov	local03, result3
0ec14                 | ' t1=pop() 
0ec14                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0ec14     1E 22 0E F2 | 	cmp	local03, #30 wz
0ec18     10 00 90 5D |  if_ne	jmp	#LR__1280
0ec1c     0F 13 02 F6 | 	mov	arg01, local01
0ec20     00 14 06 F6 | 	mov	arg02, #0
0ec24     E4 7C B0 FD | 	call	#__system___float_tointeger
0ec28     FD 1E 02 F6 | 	mov	local01, result1
0ec2c                 | LR__1280
0ec2c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0ec2c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ec30     18 00 90 5D |  if_ne	jmp	#LR__1281
0ec34     0F 13 02 F6 | 	mov	arg01, local01
0ec38     F0 7F B0 FD | 	call	#__system____builtin_atof
0ec3c     FD 12 02 F6 | 	mov	arg01, result1
0ec40     00 14 06 F6 | 	mov	arg02, #0
0ec44     C4 7C B0 FD | 	call	#__system___float_tointeger
0ec48     FD 1E 02 F6 | 	mov	local01, result1
0ec4c                 | LR__1281
0ec4c     25 00 00 FF 
0ec50     04 E4 05 F1 | 	add	objptr, ##18948
0ec54     F2 1E 62 FC | 	wrlong	local01, objptr
0ec58     25 00 00 FF 
0ec5c     04 E4 85 F1 | 	sub	objptr, ##18948
0ec60     02 1E 66 F0 | 	shl	local01, #2
0ec64     0F 13 02 F6 | 	mov	arg01, local01
0ec68     C4 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ec6c     A7 F0 03 F6 | 	mov	ptra, fp
0ec70     B2 00 A0 FD | 	call	#popregs_
0ec74                 | _do_font_ret
0ec74     2D 00 64 FD | 	ret
0ec78                 | 
0ec78                 | ' 
0ec78                 | ' sub do_mode
0ec78                 | _do_mode
0ec78     04 4A 05 F6 | 	mov	COUNT_, #4
0ec7c     A8 00 A0 FD | 	call	#pushregs_
0ec80     9C 93 BF FD | 	call	#_pop
0ec84     FD 1E 02 F6 | 	mov	local01, result1
0ec88     FE 20 02 F6 | 	mov	local02, result2
0ec8c     FF 22 02 F6 | 	mov	local03, result3
0ec90                 | ' t1=pop() 
0ec90                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0ec90     1E 22 0E F2 | 	cmp	local03, #30 wz
0ec94     10 00 90 5D |  if_ne	jmp	#LR__1290
0ec98     0F 13 02 F6 | 	mov	arg01, local01
0ec9c     00 14 06 F6 | 	mov	arg02, #0
0eca0     68 7C B0 FD | 	call	#__system___float_tointeger
0eca4     FD 1E 02 F6 | 	mov	local01, result1
0eca8                 | LR__1290
0eca8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0eca8     1F 22 0E F2 | 	cmp	local03, #31 wz
0ecac     18 00 90 5D |  if_ne	jmp	#LR__1291
0ecb0     0F 13 02 F6 | 	mov	arg01, local01
0ecb4     74 7F B0 FD | 	call	#__system____builtin_atof
0ecb8     FD 12 02 F6 | 	mov	arg01, result1
0ecbc     00 14 06 F6 | 	mov	arg02, #0
0ecc0     48 7C B0 FD | 	call	#__system___float_tointeger
0ecc4     FD 1E 02 F6 | 	mov	local01, result1
0ecc8                 | LR__1291
0ecc8                 | ' select case t1.result.iresult
0ecc8     0F 25 02 F6 | 	mov	local04, local01
0eccc     04 24 26 F3 | 	fle	local04, #4
0ecd0     30 24 62 FD | 	jmprel	local04
0ecd4                 | LR__1292
0ecd4     10 00 90 FD | 	jmp	#LR__1293
0ecd8     68 00 90 FD | 	jmp	#LR__1294
0ecdc     C0 00 90 FD | 	jmp	#LR__1295
0ece0     18 01 90 FD | 	jmp	#LR__1296
0ece4     6C 01 90 FD | 	jmp	#LR__1297
0ece8                 | LR__1293
0ece8     25 00 00 FF 
0ecec     04 E4 05 F1 | 	add	objptr, ##18948
0ecf0     F2 02 68 FC | 	wrlong	#1, objptr
0ecf4     04 E4 85 F1 | 	sub	objptr, #4
0ecf8     F2 34 69 FC | 	wrlong	#154, objptr
0ecfc     04 E4 85 F1 | 	sub	objptr, #4
0ed00     F2 26 69 FC | 	wrlong	#147, objptr
0ed04     24 00 00 FF 
0ed08     FC E5 85 F1 | 	sub	objptr, ##18940
0ed0c     04 12 06 F6 | 	mov	arg01, #4
0ed10     1C 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ed14     25 00 00 FF 
0ed18     00 E4 05 F1 | 	add	objptr, ##18944
0ed1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ed20     04 E4 85 F1 | 	sub	objptr, #4
0ed24     F2 14 02 FB | 	rdlong	arg02, objptr
0ed28                 | ' 
0ed28                 | ' write_color:=ff
0ed28     24 00 00 FF 
0ed2c     BF E5 85 F1 | 	sub	objptr, ##18879
0ed30     F2 12 62 FC | 	wrlong	arg01, objptr
0ed34                 | ' write_background:=bb
0ed34     04 E4 05 F1 | 	add	objptr, #4
0ed38     F2 14 62 FC | 	wrlong	arg02, objptr
0ed3c     41 E4 85 F1 | 	sub	objptr, #65
0ed40     10 01 90 FD | 	jmp	#LR__1297
0ed44                 | LR__1294
0ed44     25 00 00 FF 
0ed48     04 E4 05 F1 | 	add	objptr, ##18948
0ed4c     F2 00 68 FC | 	wrlong	#0, objptr
0ed50     04 E4 85 F1 | 	sub	objptr, #4
0ed54     F2 2E 68 FC | 	wrlong	#23, objptr
0ed58     00 12 06 F6 | 	mov	arg01, #0
0ed5c     04 E4 85 F1 | 	sub	objptr, #4
0ed60     F2 00 68 FC | 	wrlong	#0, objptr
0ed64     24 00 00 FF 
0ed68     FC E5 85 F1 | 	sub	objptr, ##18940
0ed6c     C0 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ed70     25 00 00 FF 
0ed74     00 E4 05 F1 | 	add	objptr, ##18944
0ed78     F2 12 02 FB | 	rdlong	arg01, objptr
0ed7c     04 E4 85 F1 | 	sub	objptr, #4
0ed80     F2 14 02 FB | 	rdlong	arg02, objptr
0ed84                 | ' 
0ed84                 | ' write_color:=ff
0ed84     24 00 00 FF 
0ed88     BF E5 85 F1 | 	sub	objptr, ##18879
0ed8c     F2 12 62 FC | 	wrlong	arg01, objptr
0ed90                 | ' write_background:=bb
0ed90     04 E4 05 F1 | 	add	objptr, #4
0ed94     F2 14 62 FC | 	wrlong	arg02, objptr
0ed98     41 E4 85 F1 | 	sub	objptr, #65
0ed9c     B4 00 90 FD | 	jmp	#LR__1297
0eda0                 | LR__1295
0eda0     25 00 00 FF 
0eda4     04 E4 05 F1 | 	add	objptr, ##18948
0eda8     F2 00 68 FC | 	wrlong	#0, objptr
0edac     04 E4 85 F1 | 	sub	objptr, #4
0edb0     F2 6A 69 FC | 	wrlong	#181, objptr
0edb4     00 12 06 F6 | 	mov	arg01, #0
0edb8     04 E4 85 F1 | 	sub	objptr, #4
0edbc     F2 00 68 FC | 	wrlong	#0, objptr
0edc0     24 00 00 FF 
0edc4     FC E5 85 F1 | 	sub	objptr, ##18940
0edc8     64 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0edcc     25 00 00 FF 
0edd0     00 E4 05 F1 | 	add	objptr, ##18944
0edd4     F2 12 02 FB | 	rdlong	arg01, objptr
0edd8     04 E4 85 F1 | 	sub	objptr, #4
0eddc     F2 14 02 FB | 	rdlong	arg02, objptr
0ede0                 | ' 
0ede0                 | ' write_color:=ff
0ede0     24 00 00 FF 
0ede4     BF E5 85 F1 | 	sub	objptr, ##18879
0ede8     F2 12 62 FC | 	wrlong	arg01, objptr
0edec                 | ' write_background:=bb
0edec     04 E4 05 F1 | 	add	objptr, #4
0edf0     F2 14 62 FC | 	wrlong	arg02, objptr
0edf4     41 E4 85 F1 | 	sub	objptr, #65
0edf8     58 00 90 FD | 	jmp	#LR__1297
0edfc                 | LR__1296
0edfc     25 00 00 FF 
0ee00     04 E4 05 F1 | 	add	objptr, ##18948
0ee04     F2 00 68 FC | 	wrlong	#0, objptr
0ee08     04 E4 85 F1 | 	sub	objptr, #4
0ee0c     F2 1E 68 FC | 	wrlong	#15, objptr
0ee10     00 12 06 F6 | 	mov	arg01, #0
0ee14     04 E4 85 F1 | 	sub	objptr, #4
0ee18     F2 00 68 FC | 	wrlong	#0, objptr
0ee1c     24 00 00 FF 
0ee20     FC E5 85 F1 | 	sub	objptr, ##18940
0ee24     08 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ee28     25 00 00 FF 
0ee2c     00 E4 05 F1 | 	add	objptr, ##18944
0ee30     F2 12 02 FB | 	rdlong	arg01, objptr
0ee34     04 E4 85 F1 | 	sub	objptr, #4
0ee38     F2 14 02 FB | 	rdlong	arg02, objptr
0ee3c                 | ' 
0ee3c                 | ' write_color:=ff
0ee3c     24 00 00 FF 
0ee40     BF E5 85 F1 | 	sub	objptr, ##18879
0ee44     F2 12 62 FC | 	wrlong	arg01, objptr
0ee48                 | ' write_background:=bb
0ee48     04 E4 05 F1 | 	add	objptr, #4
0ee4c     F2 14 62 FC | 	wrlong	arg02, objptr
0ee50     41 E4 85 F1 | 	sub	objptr, #65
0ee54                 | LR__1297
0ee54     25 00 00 FF 
0ee58     00 E4 05 F1 | 	add	objptr, ##18944
0ee5c     F2 12 02 FB | 	rdlong	arg01, objptr
0ee60     04 E4 85 F1 | 	sub	objptr, #4
0ee64     F2 14 02 FB | 	rdlong	arg02, objptr
0ee68     24 00 00 FF 
0ee6c     FC E5 85 F1 | 	sub	objptr, ##18940
0ee70     A4 39 B0 FD | 	call	#_hg010b_spin2_cls
0ee74     18 01 00 FF 
0ee78     83 13 06 F6 | 	mov	arg01, ##@LR__4240
0ee7c                 | ' 
0ee7c                 | ' write(text)
0ee7c     54 3C B0 FD | 	call	#_hg010b_spin2_write
0ee80                 | ' crlf
0ee80     B0 3D B0 FD | 	call	#_hg010b_spin2_crlf
0ee84     09 00 00 FF 
0ee88     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
0ee8c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
0ee90     09 00 00 FF 
0ee94     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
0ee98                 | ' 
0ee98                 | ' write(text)
0ee98     38 3C B0 FD | 	call	#_hg010b_spin2_write
0ee9c                 | ' crlf
0ee9c     94 3D B0 FD | 	call	#_hg010b_spin2_crlf
0eea0     47 00 00 FF 
0eea4     A0 E5 05 F1 | 	add	objptr, ##36768
0eea8     F2 12 02 FB | 	rdlong	arg01, objptr
0eeac     47 00 00 FF 
0eeb0     A0 E5 85 F1 | 	sub	objptr, ##36768
0eeb4                 | ' 
0eeb4                 | ' write(text)
0eeb4     1C 3C B0 FD | 	call	#_hg010b_spin2_write
0eeb8                 | ' crlf
0eeb8     78 3D B0 FD | 	call	#_hg010b_spin2_crlf
0eebc     A7 F0 03 F6 | 	mov	ptra, fp
0eec0     B2 00 A0 FD | 	call	#popregs_
0eec4                 | _do_mode_ret
0eec4     2D 00 64 FD | 	ret
0eec8                 | 
0eec8                 | ' 
0eec8                 | ' 
0eec8                 | ' 
0eec8                 | ' sub do_pinwrite
0eec8                 | _do_pinwrite
0eec8     54 91 BF FD | 	call	#_pop
0eecc     FD 14 02 F6 | 	mov	arg02, result1
0eed0     4C 91 BF FD | 	call	#_pop
0eed4     FD 12 02 F6 | 	mov	arg01, result1
0eed8     D0 4D B0 FD | 	call	#__system___pinwrite
0eedc                 | _do_pinwrite_ret
0eedc     2D 00 64 FD | 	ret
0eee0                 | 
0eee0                 | ' 
0eee0                 | ' sub do_waitms
0eee0                 | _do_waitms
0eee0     01 4A 05 F6 | 	mov	COUNT_, #1
0eee4     A8 00 A0 FD | 	call	#pushregs_
0eee8     18 F0 07 F1 | 	add	ptra, #24
0eeec     30 91 BF FD | 	call	#_pop
0eef0     A7 FA 61 FC | 	wrlong	result1, fp
0eef4     04 4E 05 F1 | 	add	fp, #4
0eef8     A7 FC 61 FC | 	wrlong	result2, fp
0eefc     04 4E 05 F1 | 	add	fp, #4
0ef00     A7 FE 61 FC | 	wrlong	result3, fp
0ef04                 | ' 
0ef04                 | ' t1=pop() 'value
0ef04                 | ' 
0ef04                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
0ef04     08 4E 85 F1 | 	sub	fp, #8
0ef08     1C FE 0D F2 | 	cmp	result3, #28 wz
0ef0c     08 4E 05 51 |  if_ne	add	fp, #8
0ef10     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ef14     08 4E 85 51 |  if_ne	sub	fp, #8
0ef18     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
0ef1c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0ef20     0C 4E 05 A1 |  if_e	add	fp, #12
0ef24     A7 12 62 AC |  if_e	wrlong	arg01, fp
0ef28     0C 4E 85 A1 |  if_e	sub	fp, #12
0ef2c     14 00 90 AD |  if_e	jmp	#LR__1300
0ef30     A7 12 02 F6 | 	mov	arg01, fp
0ef34     B4 DC BF FD | 	call	#_converttoint
0ef38     0C 4E 05 F1 | 	add	fp, #12
0ef3c     A7 FA 61 FC | 	wrlong	result1, fp
0ef40     0C 4E 85 F1 | 	sub	fp, #12
0ef44                 | LR__1300
0ef44                 | ' if t<0 then return
0ef44     0C 4E 05 F1 | 	add	fp, #12
0ef48     A7 12 02 FB | 	rdlong	arg01, fp
0ef4c     0C 4E 85 F1 | 	sub	fp, #12
0ef50     00 12 56 F2 | 	cmps	arg01, #0 wc
0ef54     B8 00 90 CD |  if_b	jmp	#LR__1305
0ef58                 | ' if t < 5000 then 
0ef58     0C 4E 05 F1 | 	add	fp, #12
0ef5c     A7 12 02 FB | 	rdlong	arg01, fp
0ef60     0C 4E 85 F1 | 	sub	fp, #12
0ef64     09 00 00 FF 
0ef68     88 13 56 F2 | 	cmps	arg01, ##5000 wc
0ef6c     14 00 90 3D |  if_ae	jmp	#LR__1301
0ef70     0C 4E 05 F1 | 	add	fp, #12
0ef74     A7 12 02 FB | 	rdlong	arg01, fp
0ef78     0C 4E 85 F1 | 	sub	fp, #12
0ef7c     84 4D B0 FD | 	call	#__system___waitms
0ef80     8C 00 90 FD | 	jmp	#LR__1304
0ef84                 | LR__1301
0ef84     10 4E 05 F1 | 	add	fp, #16
0ef88     A7 02 68 FC | 	wrlong	#1, fp
0ef8c     04 4E 85 F1 | 	sub	fp, #4
0ef90     A7 12 02 FB | 	rdlong	arg01, fp
0ef94     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef98     09 00 00 FF 
0ef9c     88 13 16 FD | 	qdiv	arg01, ##5000
0efa0                 | '   for i=1 to t/5000
0efa0     0C 4E 85 F1 | 	sub	fp, #12
0efa4     18 1E 62 FD | 	getqx	local01
0efa8     0F 1F 82 F6 | 	negc	local01, local01
0efac     01 1E 06 F1 | 	add	local01, #1
0efb0                 | LR__1302
0efb0     10 4E 05 F1 | 	add	fp, #16
0efb4     A7 12 02 FB | 	rdlong	arg01, fp
0efb8     10 4E 85 F1 | 	sub	fp, #16
0efbc     0F 13 52 F2 | 	cmps	arg01, local01 wc
0efc0     28 00 90 3D |  if_ae	jmp	#LR__1303
0efc4     0C 4E 05 F1 | 	add	fp, #12
0efc8     A7 12 02 FB | 	rdlong	arg01, fp
0efcc     0C 4E 85 F1 | 	sub	fp, #12
0efd0     30 4D B0 FD | 	call	#__system___waitms
0efd4     10 4E 05 F1 | 	add	fp, #16
0efd8     A7 12 02 FB | 	rdlong	arg01, fp
0efdc     01 12 06 F1 | 	add	arg01, #1
0efe0     A7 12 62 FC | 	wrlong	arg01, fp
0efe4     10 4E 85 F1 | 	sub	fp, #16
0efe8     C4 FF 9F FD | 	jmp	#LR__1302
0efec                 | LR__1303
0efec     0C 4E 05 F1 | 	add	fp, #12
0eff0     A7 1E 02 FB | 	rdlong	local01, fp
0eff4     0F 1F 52 F6 | 	abs	local01, local01 wc
0eff8     09 00 00 FF 
0effc     88 1F 16 FD | 	qdiv	local01, ##5000
0f000     0C 4E 85 F1 | 	sub	fp, #12
0f004     19 1E 62 FD | 	getqy	local01
0f008     0F 13 82 F6 | 	negc	arg01, local01
0f00c     F4 4C B0 FD | 	call	#__system___waitms
0f010                 | LR__1304
0f010                 | LR__1305
0f010     A7 F0 03 F6 | 	mov	ptra, fp
0f014     B2 00 A0 FD | 	call	#popregs_
0f018                 | _do_waitms_ret
0f018     2D 00 64 FD | 	ret
0f01c                 | 
0f01c                 | ' 
0f01c                 | ' sub do_waitvbl
0f01c                 | _do_waitvbl
0f01c     01 12 06 F6 | 	mov	arg01, #1
0f020     84 37 B0 FD | 	call	#_hg010b_spin2_waitvbl
0f024                 | _do_waitvbl_ret
0f024     2D 00 64 FD | 	ret
0f028                 | 
0f028                 | ' 
0f028                 | ' sub do_waitclock
0f028                 | _do_waitclock
0f028     49 00 00 FF 
0f02c     38 E4 05 F1 | 	add	objptr, ##37432
0f030     F2 00 02 FB | 	rdlong	_var01, objptr
0f034                 | ' c=hkcnt
0f034                 | ' do: loop until hkcnt<>c
0f034                 | LR__1310
0f034     F2 02 02 FB | 	rdlong	_var02, objptr
0f038     00 03 0A F2 | 	cmp	_var02, _var01 wz
0f03c     F4 FF 9F AD |  if_e	jmp	#LR__1310
0f040     49 00 00 FF 
0f044     38 E4 85 F1 | 	sub	objptr, ##37432
0f048                 | _do_waitclock_ret
0f048     2D 00 64 FD | 	ret
0f04c                 | 
0f04c                 | ' 
0f04c                 | ' sub do_dir
0f04c                 | _do_dir
0f04c     03 4A 05 F6 | 	mov	COUNT_, #3
0f050     A8 00 A0 FD | 	call	#pushregs_
0f054     18 01 00 FF 
0f058     84 13 06 F6 | 	mov	arg01, ##@LR__4241
0f05c     3C 50 B0 FD | 	call	#__system___chdir
0f060                 | ' chdir("/sd/bas")       ' set working directory
0f060                 | ' print "Working directory: "; currentdir$ 
0f060     00 12 06 F6 | 	mov	arg01, #0
0f064     74 9F B0 FD | 	call	#__system___getiolock_0306
0f068     FD 12 02 F6 | 	mov	arg01, result1
0f06c     88 4A B0 FD | 	call	#__system___lockmem
0f070     18 01 00 FF 
0f074     8C 15 06 F6 | 	mov	arg02, ##@LR__4242
0f078     00 12 06 F6 | 	mov	arg01, #0
0f07c     00 16 06 F6 | 	mov	arg03, #0
0f080     80 56 B0 FD | 	call	#__system___basic_print_string
0f084     40 00 00 FF 
0f088     58 E4 05 F1 | 	add	objptr, ##32856
0f08c     F2 14 02 FB | 	rdlong	arg02, objptr
0f090     40 00 00 FF 
0f094     58 E4 85 F1 | 	sub	objptr, ##32856
0f098     00 12 06 F6 | 	mov	arg01, #0
0f09c     00 16 06 F6 | 	mov	arg03, #0
0f0a0     60 56 B0 FD | 	call	#__system___basic_print_string
0f0a4     00 12 06 F6 | 	mov	arg01, #0
0f0a8     0A 14 06 F6 | 	mov	arg02, #10
0f0ac     00 16 06 F6 | 	mov	arg03, #0
0f0b0     F8 55 B0 FD | 	call	#__system___basic_print_char
0f0b4     00 12 06 F6 | 	mov	arg01, #0
0f0b8     20 9F B0 FD | 	call	#__system___getiolock_0306
0f0bc     FD 00 68 FC | 	wrlong	#0, result1
0f0c0     18 01 00 FF 
0f0c4     A0 13 06 F6 | 	mov	arg01, ##@LR__4243
0f0c8     10 14 06 F6 | 	mov	arg02, #16
0f0cc     44 A0 B0 FD | 	call	#__system___basic_dir
0f0d0     FD 1E 02 F6 | 	mov	local01, result1
0f0d4                 | ' 
0f0d4                 | ' filename=dir$("*", fbDirectory)
0f0d4                 | ' while filename <> "" and filename <> nil
0f0d4                 | LR__1320
0f0d4     00 20 06 F6 | 	mov	local02, #0
0f0d8     18 01 00 FF 
0f0dc     A2 15 06 F6 | 	mov	arg02, ##@LR__4244
0f0e0     0F 13 02 F6 | 	mov	arg01, local01
0f0e4     38 4A B0 FD | 	call	#__system___string_cmp
0f0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0ec     00 20 26 56 |  if_ne	not	local02, #0
0f0f0     00 22 06 F6 | 	mov	local03, #0
0f0f4     0F 13 02 F6 | 	mov	arg01, local01
0f0f8     00 14 06 F6 | 	mov	arg02, #0
0f0fc     20 4A B0 FD | 	call	#__system___string_cmp
0f100     00 FA 0D F2 | 	cmp	result1, #0 wz
0f104     00 22 26 56 |  if_ne	not	local03, #0
0f108     11 21 CA F7 | 	test	local02, local03 wz
0f10c     64 00 90 AD |  if_e	jmp	#LR__1321
0f110                 | '   print "[dir] ";filename
0f110     00 12 06 F6 | 	mov	arg01, #0
0f114     C4 9E B0 FD | 	call	#__system___getiolock_0306
0f118     FD 12 02 F6 | 	mov	arg01, result1
0f11c     D8 49 B0 FD | 	call	#__system___lockmem
0f120     18 01 00 FF 
0f124     A3 15 06 F6 | 	mov	arg02, ##@LR__4245
0f128     00 12 06 F6 | 	mov	arg01, #0
0f12c     00 16 06 F6 | 	mov	arg03, #0
0f130     D0 55 B0 FD | 	call	#__system___basic_print_string
0f134     00 12 06 F6 | 	mov	arg01, #0
0f138     0F 15 02 F6 | 	mov	arg02, local01
0f13c     00 16 06 F6 | 	mov	arg03, #0
0f140     C0 55 B0 FD | 	call	#__system___basic_print_string
0f144     00 12 06 F6 | 	mov	arg01, #0
0f148     0A 14 06 F6 | 	mov	arg02, #10
0f14c     00 16 06 F6 | 	mov	arg03, #0
0f150     58 55 B0 FD | 	call	#__system___basic_print_char
0f154     00 12 06 F6 | 	mov	arg01, #0
0f158     80 9E B0 FD | 	call	#__system___getiolock_0306
0f15c     FD 00 68 FC | 	wrlong	#0, result1
0f160     00 12 06 F6 | 	mov	arg01, #0
0f164     00 14 06 F6 | 	mov	arg02, #0
0f168     A8 9F B0 FD | 	call	#__system___basic_dir
0f16c     FD 1E 02 F6 | 	mov	local01, result1
0f170     60 FF 9F FD | 	jmp	#LR__1320
0f174                 | LR__1321
0f174     18 01 00 FF 
0f178     AA 13 06 F6 | 	mov	arg01, ##@LR__4246
0f17c     21 14 06 F6 | 	mov	arg02, #33
0f180     90 9F B0 FD | 	call	#__system___basic_dir
0f184     FD 1E 02 F6 | 	mov	local01, result1
0f188                 | ' 
0f188                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
0f188                 | ' do while filename <> "" and filename <> nil
0f188                 | LR__1322
0f188     00 20 06 F6 | 	mov	local02, #0
0f18c     18 01 00 FF 
0f190     AC 15 06 F6 | 	mov	arg02, ##@LR__4247
0f194     0F 13 02 F6 | 	mov	arg01, local01
0f198     84 49 B0 FD | 	call	#__system___string_cmp
0f19c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1a0     00 20 26 56 |  if_ne	not	local02, #0
0f1a4     00 22 06 F6 | 	mov	local03, #0
0f1a8     0F 13 02 F6 | 	mov	arg01, local01
0f1ac     00 14 06 F6 | 	mov	arg02, #0
0f1b0     6C 49 B0 FD | 	call	#__system___string_cmp
0f1b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1b8     00 22 26 56 |  if_ne	not	local03, #0
0f1bc     11 21 CA F7 | 	test	local02, local03 wz
0f1c0     54 01 90 AD |  if_e	jmp	#LR__1326
0f1c4                 | '   print filename
0f1c4     00 12 06 F6 | 	mov	arg01, #0
0f1c8     10 9E B0 FD | 	call	#__system___getiolock_0306
0f1cc     FD 12 02 F6 | 	mov	arg01, result1
0f1d0     24 49 B0 FD | 	call	#__system___lockmem
0f1d4     00 12 06 F6 | 	mov	arg01, #0
0f1d8     0F 15 02 F6 | 	mov	arg02, local01
0f1dc     00 16 06 F6 | 	mov	arg03, #0
0f1e0     20 55 B0 FD | 	call	#__system___basic_print_string
0f1e4     00 12 06 F6 | 	mov	arg01, #0
0f1e8     0A 14 06 F6 | 	mov	arg02, #10
0f1ec     00 16 06 F6 | 	mov	arg03, #0
0f1f0     B8 54 B0 FD | 	call	#__system___basic_print_char
0f1f4     00 12 06 F6 | 	mov	arg01, #0
0f1f8     E0 9D B0 FD | 	call	#__system___getiolock_0306
0f1fc     FD 00 68 FC | 	wrlong	#0, result1
0f200     00 12 06 F6 | 	mov	arg01, #0
0f204     00 14 06 F6 | 	mov	arg02, #0
0f208     08 9F B0 FD | 	call	#__system___basic_dir
0f20c     FD 1E 02 F6 | 	mov	local01, result1
0f210                 | '   filename = dir$()      ' continue scan
0f210                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
0f210                 | ' return cursor_y
0f210     3A E4 05 F1 | 	add	objptr, #58
0f214     F2 FA C1 FA | 	rdbyte	result1, objptr
0f218     3A E4 85 F1 | 	sub	objptr, #58
0f21c     22 FA 0D F2 | 	cmp	result1, #34 wz
0f220     64 FF 9F 5D |  if_ne	jmp	#LR__1322
0f224                 | '     print "-----more, press any key";
0f224     00 12 06 F6 | 	mov	arg01, #0
0f228     B0 9D B0 FD | 	call	#__system___getiolock_0306
0f22c     FD 12 02 F6 | 	mov	arg01, result1
0f230     C4 48 B0 FD | 	call	#__system___lockmem
0f234     18 01 00 FF 
0f238     AD 15 06 F6 | 	mov	arg02, ##@LR__4248
0f23c     00 12 06 F6 | 	mov	arg01, #0
0f240     00 16 06 F6 | 	mov	arg03, #0
0f244     BC 54 B0 FD | 	call	#__system___basic_print_string
0f248     00 12 06 F6 | 	mov	arg01, #0
0f24c     8C 9D B0 FD | 	call	#__system___getiolock_0306
0f250     FD 00 68 FC | 	wrlong	#0, result1
0f254                 | '     do 
0f254                 | LR__1323
0f254     44 41 B0 FD | 	call	#_usbnew_spin2_get_key
0f258     00 FA 0D F2 | 	cmp	result1, #0 wz
0f25c     F4 FF 9F 5D |  if_ne	jmp	#LR__1323
0f260                 | '     do
0f260                 | LR__1324
0f260     38 41 B0 FD | 	call	#_usbnew_spin2_get_key
0f264     00 FA 0D F2 | 	cmp	result1, #0 wz
0f268     F4 FF 9F AD |  if_e	jmp	#LR__1324
0f26c                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
0f26c     47 00 00 FF 
0f270     A4 E5 05 F1 | 	add	objptr, ##36772
0f274     F2 20 02 FB | 	rdlong	local02, objptr
0f278     47 00 00 FF 
0f27c     A4 E5 85 F1 | 	sub	objptr, ##36772
0f280     01 20 0E F2 | 	cmp	local02, #1 wz
0f284     44 00 90 5D |  if_ne	jmp	#LR__1325
0f288     01 00 00 FF 
0f28c     00 EA 05 F1 | 	add	ptr__dat__, ##512
0f290     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0f294     01 00 00 FF 
0f298     00 EA 85 F1 | 	sub	ptr__dat__, ##512
0f29c     07 12 06 F6 | 	mov	arg01, #7
0f2a0     56 00 00 FF 
0f2a4     44 16 06 F6 | 	mov	arg03, ##44100
0f2a8     0E 18 C6 F9 | 	decod	arg04, #14
0f2ac     03 00 00 FF 
0f2b0     94 1A 06 F6 | 	mov	arg05, ##1684
0f2b4     01 1C 66 F6 | 	neg	arg06, #1
0f2b8     02 00 00 FF 
0f2bc     C0 E4 05 F1 | 	add	objptr, ##1216
0f2c0     00 44 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0f2c4     02 00 00 FF 
0f2c8     C0 E4 85 F1 | 	sub	objptr, ##1216
0f2cc                 | LR__1325
0f2cc     00 12 06 F6 | 	mov	arg01, #0
0f2d0     23 14 06 F6 | 	mov	arg02, #35
0f2d4     98 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
0f2d8                 | '     position 0,35: print "                             ";: position 4,35  
0f2d8     00 12 06 F6 | 	mov	arg01, #0
0f2dc     FC 9C B0 FD | 	call	#__system___getiolock_0306
0f2e0     FD 12 02 F6 | 	mov	arg01, result1
0f2e4     10 48 B0 FD | 	call	#__system___lockmem
0f2e8     18 01 00 FF 
0f2ec     C6 15 06 F6 | 	mov	arg02, ##@LR__4249
0f2f0     00 12 06 F6 | 	mov	arg01, #0
0f2f4     00 16 06 F6 | 	mov	arg03, #0
0f2f8     08 54 B0 FD | 	call	#__system___basic_print_string
0f2fc     00 12 06 F6 | 	mov	arg01, #0
0f300     D8 9C B0 FD | 	call	#__system___getiolock_0306
0f304     FD 00 68 FC | 	wrlong	#0, result1
0f308     04 12 06 F6 | 	mov	arg01, #4
0f30c     23 14 06 F6 | 	mov	arg02, #35
0f310     5C 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
0f314     70 FE 9F FD | 	jmp	#LR__1322
0f318                 | LR__1326
0f318     A7 F0 03 F6 | 	mov	ptra, fp
0f31c     B2 00 A0 FD | 	call	#popregs_
0f320                 | _do_dir_ret
0f320     2D 00 64 FD | 	ret
0f324                 | 
0f324                 | ' 
0f324                 | ' sub do_if
0f324                 | _do_if
0f324     05 4A 05 F6 | 	mov	COUNT_, #5
0f328     A8 00 A0 FD | 	call	#pushregs_
0f32c     F0 8C BF FD | 	call	#_pop
0f330     FD 1E 0A F6 | 	mov	local01, result1 wz
0f334     FE 20 02 F6 | 	mov	local02, result2
0f338     FF 22 02 F6 | 	mov	local03, result3
0f33c                 | ' t1=pop()
0f33c                 | ' ' if uresult=0, jump over else
0f33c                 | ' if t1.result.uresult = 0 then 
0f33c     BC 00 90 5D |  if_ne	jmp	#LR__1332
0f340                 | '   for i=lineptr_e to lineptr-1
0f340     38 00 00 FF 
0f344     44 E4 05 F1 | 	add	objptr, ##28740
0f348     F2 24 02 FB | 	rdlong	local04, objptr
0f34c     04 E4 85 F1 | 	sub	objptr, #4
0f350     F2 26 02 FB | 	rdlong	local05, objptr
0f354     38 00 00 FF 
0f358     40 E4 85 F1 | 	sub	objptr, ##28736
0f35c                 | LR__1330
0f35c     13 25 52 F2 | 	cmps	local04, local05 wc
0f360     78 00 90 3D |  if_ae	jmp	#LR__1331
0f364     12 FF 01 F6 | 	mov	result3, local04
0f368     01 FE 65 F0 | 	shl	result3, #1
0f36c     12 FF 01 F1 | 	add	result3, local04
0f370     02 FE 65 F0 | 	shl	result3, #2
0f374     35 00 00 FF 
0f378     40 E4 05 F1 | 	add	objptr, ##27200
0f37c     F2 FE 01 F1 | 	add	result3, objptr
0f380     FF 1E 02 FB | 	rdlong	local01, result3
0f384     04 FE 05 F1 | 	add	result3, #4
0f388     FF FC 01 FB | 	rdlong	result2, result3
0f38c     12 FF 01 F6 | 	mov	result3, local04
0f390     01 FE 65 F0 | 	shl	result3, #1
0f394     12 FF 01 F1 | 	add	result3, local04
0f398     02 FE 65 F0 | 	shl	result3, #2
0f39c     F2 FE 01 F1 | 	add	result3, objptr
0f3a0     08 FE 05 F1 | 	add	result3, #8
0f3a4     FF FE 01 FB | 	rdlong	result3, result3
0f3a8     FE 20 02 F6 | 	mov	local02, result2
0f3ac     FF 22 02 F6 | 	mov	local03, result3
0f3b0                 | '     t1=compiledline(i)
0f3b0                 | '     if t1.result_type=token_else then lineptr_e=i : return
0f3b0     5A 22 0E F2 | 	cmp	local03, #90 wz
0f3b4     35 00 00 FF 
0f3b8     40 E4 85 F1 | 	sub	objptr, ##27200
0f3bc     38 00 00 AF 
0f3c0     44 E4 05 A1 |  if_e	add	objptr, ##28740
0f3c4     F2 24 62 AC |  if_e	wrlong	local04, objptr
0f3c8     38 00 00 AF 
0f3cc     44 E4 85 A1 |  if_e	sub	objptr, ##28740
0f3d0     28 00 90 AD |  if_e	jmp	#LR__1333
0f3d4     01 24 06 F1 | 	add	local04, #1
0f3d8     80 FF 9F FD | 	jmp	#LR__1330
0f3dc                 | LR__1331
0f3dc     38 00 00 FF 
0f3e0     40 E4 05 F1 | 	add	objptr, ##28736
0f3e4     F2 26 02 FB | 	rdlong	local05, objptr
0f3e8     01 26 86 F1 | 	sub	local05, #1
0f3ec     04 E4 05 F1 | 	add	objptr, #4
0f3f0     F2 26 62 FC | 	wrlong	local05, objptr
0f3f4     38 00 00 FF 
0f3f8     44 E4 85 F1 | 	sub	objptr, ##28740
0f3fc                 | LR__1332
0f3fc                 | LR__1333
0f3fc     A7 F0 03 F6 | 	mov	ptra, fp
0f400     B2 00 A0 FD | 	call	#popregs_
0f404                 | _do_if_ret
0f404     2D 00 64 FD | 	ret
0f408                 | 
0f408                 | ' 
0f408                 | ' sub do_else
0f408                 | _do_else
0f408     38 00 00 FF 
0f40c     40 E4 05 F1 | 	add	objptr, ##28736
0f410     F2 00 02 FB | 	rdlong	_var01, objptr
0f414     01 00 86 F1 | 	sub	_var01, #1
0f418     04 E4 05 F1 | 	add	objptr, #4
0f41c     F2 00 62 FC | 	wrlong	_var01, objptr
0f420     38 00 00 FF 
0f424     44 E4 85 F1 | 	sub	objptr, ##28740
0f428                 | _do_else_ret
0f428     2D 00 64 FD | 	ret
0f42c                 | 
0f42c                 | ' 
0f42c                 | ' 
0f42c                 | ' 
0f42c                 | ' sub do_nothing
0f42c                 | _do_nothing
0f42c                 | _do_nothing_ret
0f42c     2D 00 64 FD | 	ret
0f430                 | 
0f430                 | ' 
0f430                 | ' sub do_brun
0f430                 | _do_brun
0f430     08 4A 05 F6 | 	mov	COUNT_, #8
0f434     A8 00 A0 FD | 	call	#pushregs_
0f438     E4 8B BF FD | 	call	#_pop
0f43c     FF 1A 02 F6 | 	mov	arg05, result3
0f440     FD 1E 02 F6 | 	mov	local01, result1
0f444     FE 20 02 F6 | 	mov	local02, result2
0f448     0D 23 02 F6 | 	mov	local03, arg05
0f44c                 | ' 
0f44c                 | ' t1=pop() 
0f44c                 | ' if t1.result_type=result_string then
0f44c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f450     EC 01 90 5D |  if_ne	jmp	#LR__1343
0f454     0F 25 02 F6 | 	mov	local04, local01
0f458                 | '   filename=t1.result.sresult
0f458                 | '   if left$(filename,1)="/" then 
0f458     12 13 02 F6 | 	mov	arg01, local04
0f45c     01 14 06 F6 | 	mov	arg02, #1
0f460     DC 65 B0 FD | 	call	#__system__Left_S
0f464     FD 12 02 F6 | 	mov	arg01, result1
0f468     18 01 00 FF 
0f46c     E4 15 06 F6 | 	mov	arg02, ##@LR__4250
0f470     AC 46 B0 FD | 	call	#__system___string_cmp
0f474     00 FA 0D F2 | 	cmp	result1, #0 wz
0f478     12 27 02 A6 |  if_e	mov	local05, local04
0f47c     14 00 90 AD |  if_e	jmp	#LR__1340
0f480     18 01 00 FF 
0f484     E6 13 06 F6 | 	mov	arg01, ##@LR__4251
0f488     12 15 02 F6 | 	mov	arg02, local04
0f48c     C4 46 B0 FD | 	call	#__system___string_concat
0f490     FD 26 02 F6 | 	mov	local05, result1
0f494                 | LR__1340
0f494                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
0f494                 | '   open fullfilename for input as #9
0f494     09 12 06 F6 | 	mov	arg01, #9
0f498     13 15 02 F6 | 	mov	arg02, local05
0f49c     00 16 06 F6 | 	mov	arg03, #0
0f4a0     70 51 B0 FD | 	call	#__system___basic_open_string
0f4a4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0f4a8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0f4ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0f4b0     FD 28 0A F6 | 	mov	local06, result1 wz
0f4b4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0f4b4     8C 00 90 AD |  if_e	jmp	#LR__1341
0f4b8     00 12 06 F6 | 	mov	arg01, #0
0f4bc     1C 9B B0 FD | 	call	#__system___getiolock_0306
0f4c0     FD 12 02 F6 | 	mov	arg01, result1
0f4c4     30 46 B0 FD | 	call	#__system___lockmem
0f4c8     18 01 00 FF 
0f4cc     EF 15 06 F6 | 	mov	arg02, ##@LR__4252
0f4d0     00 12 06 F6 | 	mov	arg01, #0
0f4d4     00 16 06 F6 | 	mov	arg03, #0
0f4d8     28 52 B0 FD | 	call	#__system___basic_print_string
0f4dc     00 12 06 F6 | 	mov	arg01, #0
0f4e0     14 15 02 F6 | 	mov	arg02, local06
0f4e4     00 16 06 F6 | 	mov	arg03, #0
0f4e8     0A 18 06 F6 | 	mov	arg04, #10
0f4ec     58 52 B0 FD | 	call	#__system___basic_print_integer
0f4f0     18 01 00 FF 
0f4f4     FD 15 06 F6 | 	mov	arg02, ##@LR__4253
0f4f8     00 12 06 F6 | 	mov	arg01, #0
0f4fc     00 16 06 F6 | 	mov	arg03, #0
0f500     00 52 B0 FD | 	call	#__system___basic_print_string
0f504     14 13 02 F6 | 	mov	arg01, local06
0f508     24 6B B0 FD | 	call	#__system___strerror
0f50c     FD 14 02 F6 | 	mov	arg02, result1
0f510     00 12 06 F6 | 	mov	arg01, #0
0f514     00 16 06 F6 | 	mov	arg03, #0
0f518     E8 51 B0 FD | 	call	#__system___basic_print_string
0f51c     00 12 06 F6 | 	mov	arg01, #0
0f520     0A 14 06 F6 | 	mov	arg02, #10
0f524     00 16 06 F6 | 	mov	arg03, #0
0f528     80 51 B0 FD | 	call	#__system___basic_print_char
0f52c     00 12 06 F6 | 	mov	arg01, #0
0f530     A8 9A B0 FD | 	call	#__system___getiolock_0306
0f534     FD 00 68 FC | 	wrlong	#0, result1
0f538     09 12 06 F6 | 	mov	arg01, #9
0f53c     10 91 B0 FD | 	call	#__system__close
0f540     FC 00 90 FD | 	jmp	#LR__1344
0f544                 | LR__1341
0f544     01 2A 06 F6 | 	mov	local07, #1
0f548     00 2C 06 F6 | 	mov	local08, #0
0f54c                 | '   do
0f54c                 | LR__1342
0f54c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0f54c     45 00 00 FF 
0f550     70 E5 05 F1 | 	add	objptr, ##35696
0f554     F2 16 02 F6 | 	mov	arg03, objptr
0f558     45 00 00 FF 
0f55c     70 E5 85 F1 | 	sub	objptr, ##35696
0f560     09 12 06 F6 | 	mov	arg01, #9
0f564     15 15 02 F6 | 	mov	arg02, local07
0f568     0A 18 C6 F9 | 	decod	arg04, #10
0f56c     01 1A 06 F6 | 	mov	arg05, #1
0f570     C0 52 B0 FD | 	call	#__system___basic_get
0f574     FD 28 02 F6 | 	mov	local06, result1
0f578     FD 2A 02 F1 | 	add	local07, result1
0f57c     45 00 00 FF 
0f580     70 E5 05 F1 | 	add	objptr, ##35696
0f584     F2 12 02 F6 | 	mov	arg01, objptr
0f588     16 15 02 F6 | 	mov	arg02, local08
0f58c     0A 16 C6 F9 | 	decod	arg03, #10
0f590     43 00 00 FF 
0f594     B0 E4 85 F1 | 	sub	objptr, ##34480
0f598     0C 3B B0 FD | 	call	#_psram_spin2_write
0f59c     02 00 00 FF 
0f5a0     C0 E4 85 F1 | 	sub	objptr, ##1216
0f5a4     14 2D 02 F1 | 	add	local08, local06
0f5a8     02 00 00 FF 
0f5ac     00 28 0E F2 | 	cmp	local06, ##1024 wz
0f5b0     E0 03 00 AF 
0f5b4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0f5b8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1342
0f5bc     24 00 00 FF 
0f5c0     C0 E5 05 F1 | 	add	objptr, ##18880
0f5c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f5c8     03 12 62 FD | 	cogstop	arg01
0f5cc     04 E4 05 F1 | 	add	objptr, #4
0f5d0     F2 12 02 FB | 	rdlong	arg01, objptr
0f5d4     03 12 62 FD | 	cogstop	arg01
0f5d8     04 E4 05 F1 | 	add	objptr, #4
0f5dc     F2 12 02 FB | 	rdlong	arg01, objptr
0f5e0     03 12 62 FD | 	cogstop	arg01
0f5e4     22 00 00 FF 
0f5e8     E0 E5 05 F1 | 	add	objptr, ##17888
0f5ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f5f0     03 12 62 FD | 	cogstop	arg01
0f5f4     09 00 00 FF 
0f5f8     74 EB 05 F1 | 	add	ptr__dat__, ##4980
0f5fc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0f600     09 00 00 FF 
0f604     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
0f608     22 00 00 FF 
0f60c     D8 E5 85 F1 | 	sub	objptr, ##17880
0f610     1E 2C 06 F6 | 	mov	local08, #30
0f614     28 E4 61 FD | 	setq	objptr
0f618     0A 2D F2 FC | 	coginit	local08, arg02 wc
0f61c     01 2C 66 C6 |  if_b	neg	local08, #1
0f620     24 00 00 FF 
0f624     DC E4 05 F1 | 	add	objptr, ##18652
0f628     F2 2C 62 FC | 	wrlong	local08, objptr
0f62c     49 00 00 FF 
0f630     AC E4 85 F1 | 	sub	objptr, ##37548
0f634     00 12 06 F6 | 	mov	arg01, #0
0f638     01 12 62 FD | 	cogid	arg01
0f63c     03 12 62 FD | 	cogstop	arg01
0f640                 | LR__1343
0f640                 | LR__1344
0f640     A7 F0 03 F6 | 	mov	ptra, fp
0f644     B2 00 A0 FD | 	call	#popregs_
0f648                 | _do_brun_ret
0f648     2D 00 64 FD | 	ret
0f64c                 | 
0f64c                 | ' 
0f64c                 | ' 
0f64c                 | ' sub do_mouse
0f64c                 | _do_mouse
0f64c     D0 89 BF FD | 	call	#_pop
0f650     00 FA 4D F2 | 	cmps	result1, #0 wz
0f654                 | ' 
0f654                 | ' t1=pop()
0f654                 | ' 
0f654                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
0f654     14 00 90 5D |  if_ne	jmp	#LR__1350
0f658     10 12 06 F6 | 	mov	arg01, #16
0f65c     00 14 06 F6 | 	mov	arg02, #0
0f660     00 16 06 F6 | 	mov	arg03, #0
0f664     74 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f668     10 00 90 FD | 	jmp	#LR__1351
0f66c                 | LR__1350
0f66c     10 12 06 F6 | 	mov	arg01, #16
0f670     20 14 06 F6 | 	mov	arg02, #32
0f674     20 16 06 F6 | 	mov	arg03, #32
0f678     60 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f67c                 | LR__1351
0f67c                 | _do_mouse_ret
0f67c     2D 00 64 FD | 	ret
0f680                 | 
0f680                 | ' 
0f680                 | ' sub do_cursor
0f680                 | _do_cursor
0f680     9C 89 BF FD | 	call	#_pop
0f684     00 FA 4D F2 | 	cmps	result1, #0 wz
0f688                 | ' 
0f688                 | ' t1=pop()
0f688                 | ' 
0f688                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f688     14 00 90 5D |  if_ne	jmp	#LR__1360
0f68c     11 12 06 F6 | 	mov	arg01, #17
0f690     00 14 06 F6 | 	mov	arg02, #0
0f694     00 16 06 F6 | 	mov	arg03, #0
0f698     40 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f69c     10 00 90 FD | 	jmp	#LR__1361
0f6a0                 | LR__1360
0f6a0     11 12 06 F6 | 	mov	arg01, #17
0f6a4     08 14 06 F6 | 	mov	arg02, #8
0f6a8     10 16 06 F6 | 	mov	arg03, #16
0f6ac     2C 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f6b0                 | LR__1361
0f6b0                 | _do_cursor_ret
0f6b0     2D 00 64 FD | 	ret
0f6b4                 | 
0f6b4                 | ' 
0f6b4                 | ' 
0f6b4                 | ' sub do_click
0f6b4                 | _do_click
0f6b4     68 89 BF FD | 	call	#_pop
0f6b8     00 FA 4D F2 | 	cmps	result1, #0 wz
0f6bc                 | ' 
0f6bc                 | ' t1=pop()
0f6bc                 | ' 
0f6bc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f6bc     47 00 00 AF 
0f6c0     A4 E5 05 A1 |  if_e	add	objptr, ##36772
0f6c4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f6c8     47 00 00 FF 
0f6cc     A4 E5 C5 F3 | 	sumz	objptr, ##36772
0f6d0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f6d4     47 00 00 5F 
0f6d8     A4 E5 85 51 |  if_ne	sub	objptr, ##36772
0f6dc                 | _do_click_ret
0f6dc     2D 00 64 FD | 	ret
0f6e0                 | 
0f6e0                 | ' 
0f6e0                 | ' 
0f6e0                 | ' sub do_beep
0f6e0                 | _do_beep
0f6e0     02 4A 05 F6 | 	mov	COUNT_, #2
0f6e4     A8 00 A0 FD | 	call	#pushregs_
0f6e8     20 F0 07 F1 | 	add	ptra, #32
0f6ec     30 89 BF FD | 	call	#_pop
0f6f0     FD 1E 02 F6 | 	mov	local01, result1
0f6f4     FE 1C 02 F6 | 	mov	arg06, result2
0f6f8     FF 20 02 F6 | 	mov	local02, result3
0f6fc     0C 4E 05 F1 | 	add	fp, #12
0f700     A7 1E 62 FC | 	wrlong	local01, fp
0f704     04 4E 05 F1 | 	add	fp, #4
0f708     A7 1C 62 FC | 	wrlong	arg06, fp
0f70c     04 4E 05 F1 | 	add	fp, #4
0f710     A7 20 62 FC | 	wrlong	local02, fp
0f714     14 4E 85 F1 | 	sub	fp, #20
0f718     04 89 BF FD | 	call	#_pop
0f71c     A7 FA 61 FC | 	wrlong	result1, fp
0f720     04 4E 05 F1 | 	add	fp, #4
0f724     A7 FC 61 FC | 	wrlong	result2, fp
0f728     04 4E 05 F1 | 	add	fp, #4
0f72c     A7 FE 61 FC | 	wrlong	result3, fp
0f730                 | ' 
0f730                 | ' 
0f730                 | ' 
0f730                 | ' t2=pop()
0f730                 | ' t1=pop()
0f730                 | ' 
0f730                 | ' 
0f730                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0f730     08 4E 85 F1 | 	sub	fp, #8
0f734     1C FE 0D F2 | 	cmp	result3, #28 wz
0f738     08 4E 05 51 |  if_ne	add	fp, #8
0f73c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f740     08 4E 85 51 |  if_ne	sub	fp, #8
0f744     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0f748     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f74c     18 4E 05 A1 |  if_e	add	fp, #24
0f750     A7 1E 62 AC |  if_e	wrlong	local01, fp
0f754     18 4E 85 A1 |  if_e	sub	fp, #24
0f758     14 00 90 AD |  if_e	jmp	#LR__1370
0f75c     A7 12 02 F6 | 	mov	arg01, fp
0f760     88 D4 BF FD | 	call	#_converttoint
0f764     18 4E 05 F1 | 	add	fp, #24
0f768     A7 FA 61 FC | 	wrlong	result1, fp
0f76c     18 4E 85 F1 | 	sub	fp, #24
0f770                 | LR__1370
0f770     1C 4E 05 F1 | 	add	fp, #28
0f774     A7 FE 48 FC | 	wrbyte	#127, fp
0f778     01 4E 05 F1 | 	add	fp, #1
0f77c     A7 00 49 FC | 	wrbyte	#128, fp
0f780     01 4E 85 F1 | 	sub	fp, #1
0f784     A7 14 02 F6 | 	mov	arg02, fp
0f788     04 4E 85 F1 | 	sub	fp, #4
0f78c     A7 16 02 FB | 	rdlong	arg03, fp
0f790     18 4E 85 F1 | 	sub	fp, #24
0f794     01 16 66 F0 | 	shl	arg03, #1
0f798     07 12 06 F6 | 	mov	arg01, #7
0f79c     0E 18 C6 F9 | 	decod	arg04, #14
0f7a0     02 1A 06 F6 | 	mov	arg05, #2
0f7a4     00 1C 06 F6 | 	mov	arg06, #0
0f7a8     02 00 00 FF 
0f7ac     C0 E4 05 F1 | 	add	objptr, ##1216
0f7b0     AC 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0f7b4     02 00 00 FF 
0f7b8     C0 E4 85 F1 | 	sub	objptr, ##1216
0f7bc     0C 4E 05 F1 | 	add	fp, #12
0f7c0     A7 12 02 F6 | 	mov	arg01, fp
0f7c4     0C 4E 85 F1 | 	sub	fp, #12
0f7c8     EC 88 BF FD | 	call	#_push
0f7cc     10 F7 BF FD | 	call	#_do_waitms
0f7d0     07 12 06 F6 | 	mov	arg01, #7
0f7d4     02 00 00 FF 
0f7d8     C0 E4 05 F1 | 	add	objptr, ##1216
0f7dc     34 40 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
0f7e0     02 00 00 FF 
0f7e4     C0 E4 85 F1 | 	sub	objptr, ##1216
0f7e8     A7 F0 03 F6 | 	mov	ptra, fp
0f7ec     B2 00 A0 FD | 	call	#popregs_
0f7f0                 | _do_beep_ret
0f7f0     2D 00 64 FD | 	ret
0f7f4                 | 
0f7f4                 | ' 
0f7f4                 | ' sub do_no_command
0f7f4                 | _do_no_command
0f7f4     17 12 06 F6 | 	mov	arg01, #23
0f7f8     90 0D B0 FD | 	call	#_printerror
0f7fc                 | _do_no_command_ret
0f7fc     2D 00 64 FD | 	ret
0f800                 | 
0f800                 | ' 
0f800                 | ' sub do_negative
0f800                 | _do_negative
0f800     02 4A 05 F6 | 	mov	COUNT_, #2
0f804     A8 00 A0 FD | 	call	#pushregs_
0f808     0C F0 07 F1 | 	add	ptra, #12
0f80c     10 88 BF FD | 	call	#_pop
0f810     FF 1E 02 F6 | 	mov	local01, result3
0f814     A7 FA 61 FC | 	wrlong	result1, fp
0f818     04 4E 05 F1 | 	add	fp, #4
0f81c     A7 FC 61 FC | 	wrlong	result2, fp
0f820     04 4E 05 F1 | 	add	fp, #4
0f824     A7 1E 62 FC | 	wrlong	local01, fp
0f828                 | ' t1=pop()
0f828                 | ' if t1.result_type=result_int then 
0f828     08 4E 85 F1 | 	sub	fp, #8
0f82c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f830     A7 20 02 AB |  if_e	rdlong	local02, fp
0f834     10 1F 62 A6 |  if_e	neg	local01, local02
0f838     A7 1E 62 AC |  if_e	wrlong	local01, fp
0f83c     5C 00 90 AD |  if_e	jmp	#LR__1382
0f840     08 4E 05 F1 | 	add	fp, #8
0f844     A7 1E 02 FB | 	rdlong	local01, fp
0f848     08 4E 85 F1 | 	sub	fp, #8
0f84c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f850     1C 00 90 5D |  if_ne	jmp	#LR__1380
0f854     A7 20 02 FB | 	rdlong	local02, fp
0f858     10 1F 62 F6 | 	neg	local01, local02
0f85c     A7 1E 62 FC | 	wrlong	local01, fp
0f860     08 4E 05 F1 | 	add	fp, #8
0f864     A7 38 68 FC | 	wrlong	#28, fp
0f868     08 4E 85 F1 | 	sub	fp, #8
0f86c     2C 00 90 FD | 	jmp	#LR__1381
0f870                 | LR__1380
0f870     08 4E 05 F1 | 	add	fp, #8
0f874     A7 1E 02 FB | 	rdlong	local01, fp
0f878     08 4E 85 F1 | 	sub	fp, #8
0f87c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f880     A7 FA 01 AB |  if_e	rdlong	result1, fp
0f884     1F FA E5 A4 |  if_e	bitnot	result1, #31
0f888     A7 FA 61 AC |  if_e	wrlong	result1, fp
0f88c     08 4E 05 51 |  if_ne	add	fp, #8
0f890     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f894     08 4E 85 51 |  if_ne	sub	fp, #8
0f898     A7 50 68 5C |  if_ne	wrlong	#40, fp
0f89c                 | LR__1381
0f89c                 | LR__1382
0f89c     A7 12 02 F6 | 	mov	arg01, fp
0f8a0     14 88 BF FD | 	call	#_push
0f8a4     A7 F0 03 F6 | 	mov	ptra, fp
0f8a8     B2 00 A0 FD | 	call	#popregs_
0f8ac                 | _do_negative_ret
0f8ac     2D 00 64 FD | 	ret
0f8b0                 | 
0f8b0                 | ' 
0f8b0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
0f8b0                 | ' 
0f8b0                 | ' ''----------------------------------------------------------------------------------------------------
0f8b0                 | ' ''------------------ Initialization procedures -------------------------------------------------------
0f8b0                 | ' ''----------------------------------------------------------------------------------------------------
0f8b0                 | ' 
0f8b0                 | ' ''--------------------------- Command function pointers
0f8b0                 | ' 
0f8b0                 | ' sub init_commands
0f8b0                 | _init_commands
0f8b0                 | ' 
0f8b0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
0f8b0     00 00 06 F6 | 	mov	_var01, #0
0f8b4     97 16 48 FB | 	callpa	#(@LR__1391-@LR__1390)>>2,fcache_load_ptr_
0f8b8                 | LR__1390
0f8b8     00 FB 01 F6 | 	mov	result1, _var01
0f8bc     02 FA 65 F0 | 	shl	result1, #2
0f8c0     31 00 00 FF 
0f8c4     24 E4 05 F1 | 	add	objptr, ##25124
0f8c8     F2 FA 01 F1 | 	add	result1, objptr
0f8cc     31 00 00 FF 
0f8d0     24 E4 85 F1 | 	sub	objptr, ##25124
0f8d4     FD E4 61 FC | 	wrlong	objptr, result1
0f8d8     01 00 06 F1 | 	add	_var01, #1
0f8dc     00 01 56 F2 | 	cmps	_var01, #256 wc
0f8e0     D4 FF 9F CD |  if_b	jmp	#LR__1390
0f8e4                 | LR__1391
0f8e4     F2 FA 01 F6 | 	mov	result1, objptr
0f8e8     14 FA 25 F4 | 	bith	result1, #20
0f8ec     31 00 00 FF 
0f8f0     28 E4 05 F1 | 	add	objptr, ##25128
0f8f4     F2 FA 61 FC | 	wrlong	result1, objptr
0f8f8     31 00 00 FF 
0f8fc     28 E4 85 F1 | 	sub	objptr, ##25128
0f900     F2 FA 01 F6 | 	mov	result1, objptr
0f904     15 FA 25 F4 | 	bith	result1, #21
0f908     31 00 00 FF 
0f90c     2C E4 05 F1 | 	add	objptr, ##25132
0f910     F2 FA 61 FC | 	wrlong	result1, objptr
0f914     31 00 00 FF 
0f918     2C E4 85 F1 | 	sub	objptr, ##25132
0f91c     F2 FA 01 F6 | 	mov	result1, objptr
0f920     34 FA 25 F4 | 	bith	result1, #52
0f924     31 00 00 FF 
0f928     30 E4 05 F1 | 	add	objptr, ##25136
0f92c     F2 FA 61 FC | 	wrlong	result1, objptr
0f930     31 00 00 FF 
0f934     30 E4 85 F1 | 	sub	objptr, ##25136
0f938     F2 FA 01 F6 | 	mov	result1, objptr
0f93c     16 FA 25 F4 | 	bith	result1, #22
0f940     31 00 00 FF 
0f944     38 E4 05 F1 | 	add	objptr, ##25144
0f948     F2 FA 61 FC | 	wrlong	result1, objptr
0f94c     31 00 00 FF 
0f950     38 E4 85 F1 | 	sub	objptr, ##25144
0f954     F2 FA 01 F6 | 	mov	result1, objptr
0f958     00 28 00 FF 
0f95c     00 FA 45 F5 | 	or	result1, ##5242880
0f960     31 00 00 FF 
0f964     3C E4 05 F1 | 	add	objptr, ##25148
0f968     F2 FA 61 FC | 	wrlong	result1, objptr
0f96c     31 00 00 FF 
0f970     3C E4 85 F1 | 	sub	objptr, ##25148
0f974     F2 FA 01 F6 | 	mov	result1, objptr
0f978     35 FA 25 F4 | 	bith	result1, #53
0f97c     31 00 00 FF 
0f980     40 E4 05 F1 | 	add	objptr, ##25152
0f984     F2 FA 61 FC | 	wrlong	result1, objptr
0f988     31 00 00 FF 
0f98c     40 E4 85 F1 | 	sub	objptr, ##25152
0f990     F2 FA 01 F6 | 	mov	result1, objptr
0f994     54 FA 25 F4 | 	bith	result1, #84
0f998     31 00 00 FF 
0f99c     44 E4 05 F1 | 	add	objptr, ##25156
0f9a0     F2 FA 61 FC | 	wrlong	result1, objptr
0f9a4     31 00 00 FF 
0f9a8     44 E4 85 F1 | 	sub	objptr, ##25156
0f9ac     F2 FA 01 F6 | 	mov	result1, objptr
0f9b0     17 FA 25 F4 | 	bith	result1, #23
0f9b4     31 00 00 FF 
0f9b8     48 E4 05 F1 | 	add	objptr, ##25160
0f9bc     F2 FA 61 FC | 	wrlong	result1, objptr
0f9c0     31 00 00 FF 
0f9c4     48 E4 85 F1 | 	sub	objptr, ##25160
0f9c8     F2 FA 01 F6 | 	mov	result1, objptr
0f9cc     00 48 00 FF 
0f9d0     00 FA 45 F5 | 	or	result1, ##9437184
0f9d4     31 00 00 FF 
0f9d8     4C E4 05 F1 | 	add	objptr, ##25164
0f9dc     F2 FA 61 FC | 	wrlong	result1, objptr
0f9e0     31 00 00 FF 
0f9e4     4C E4 85 F1 | 	sub	objptr, ##25164
0f9e8     F2 FA 01 F6 | 	mov	result1, objptr
0f9ec     00 50 00 FF 
0f9f0     00 FA 45 F5 | 	or	result1, ##10485760
0f9f4     31 00 00 FF 
0f9f8     50 E4 05 F1 | 	add	objptr, ##25168
0f9fc     F2 FA 61 FC | 	wrlong	result1, objptr
0fa00     31 00 00 FF 
0fa04     50 E4 85 F1 | 	sub	objptr, ##25168
0fa08     F2 FA 01 F6 | 	mov	result1, objptr
0fa0c     00 58 00 FF 
0fa10     00 FA 45 F5 | 	or	result1, ##11534336
0fa14     31 00 00 FF 
0fa18     54 E4 05 F1 | 	add	objptr, ##25172
0fa1c     F2 FA 61 FC | 	wrlong	result1, objptr
0fa20     31 00 00 FF 
0fa24     54 E4 85 F1 | 	sub	objptr, ##25172
0fa28     F2 FA 01 F6 | 	mov	result1, objptr
0fa2c     36 FA 25 F4 | 	bith	result1, #54
0fa30     31 00 00 FF 
0fa34     68 E4 05 F1 | 	add	objptr, ##25192
0fa38     F2 FA 61 FC | 	wrlong	result1, objptr
0fa3c     31 00 00 FF 
0fa40     68 E4 85 F1 | 	sub	objptr, ##25192
0fa44     F2 FA 01 F6 | 	mov	result1, objptr
0fa48     00 68 00 FF 
0fa4c     00 FA 45 F5 | 	or	result1, ##13631488
0fa50     31 00 00 FF 
0fa54     98 E4 05 F1 | 	add	objptr, ##25240
0fa58     F2 FA 61 FC | 	wrlong	result1, objptr
0fa5c     31 00 00 FF 
0fa60     98 E4 85 F1 | 	sub	objptr, ##25240
0fa64     F2 FA 01 F6 | 	mov	result1, objptr
0fa68     00 68 00 FF 
0fa6c     00 FA 45 F5 | 	or	result1, ##13631488
0fa70     31 00 00 FF 
0fa74     94 E4 05 F1 | 	add	objptr, ##25236
0fa78     F2 FA 61 FC | 	wrlong	result1, objptr
0fa7c     31 00 00 FF 
0fa80     94 E4 85 F1 | 	sub	objptr, ##25236
0fa84     F2 FA 01 F6 | 	mov	result1, objptr
0fa88     00 68 00 FF 
0fa8c     00 FA 45 F5 | 	or	result1, ##13631488
0fa90     31 00 00 FF 
0fa94     9C E4 05 F1 | 	add	objptr, ##25244
0fa98     F2 FA 61 FC | 	wrlong	result1, objptr
0fa9c     31 00 00 FF 
0faa0     9C E4 85 F1 | 	sub	objptr, ##25244
0faa4     F2 FA 01 F6 | 	mov	result1, objptr
0faa8     00 68 00 FF 
0faac     00 FA 45 F5 | 	or	result1, ##13631488
0fab0     31 00 00 FF 
0fab4     A0 E4 05 F1 | 	add	objptr, ##25248
0fab8     F2 FA 61 FC | 	wrlong	result1, objptr
0fabc     31 00 00 FF 
0fac0     A0 E4 85 F1 | 	sub	objptr, ##25248
0fac4     F2 FA 01 F6 | 	mov	result1, objptr
0fac8     55 FA 25 F4 | 	bith	result1, #85
0facc     31 00 00 FF 
0fad0     80 E4 05 F1 | 	add	objptr, ##25216
0fad4     F2 FA 61 FC | 	wrlong	result1, objptr
0fad8     31 00 00 FF 
0fadc     80 E4 85 F1 | 	sub	objptr, ##25216
0fae0     F2 FA 01 F6 | 	mov	result1, objptr
0fae4     00 68 00 FF 
0fae8     00 FA 45 F5 | 	or	result1, ##13631488
0faec     31 00 00 FF 
0faf0     A4 E4 05 F1 | 	add	objptr, ##25252
0faf4     F2 FA 61 FC | 	wrlong	result1, objptr
0faf8     31 00 00 FF 
0fafc     A4 E4 85 F1 | 	sub	objptr, ##25252
0fb00     F2 FA 01 F6 | 	mov	result1, objptr
0fb04     00 68 00 FF 
0fb08     00 FA 45 F5 | 	or	result1, ##13631488
0fb0c     31 00 00 FF 
0fb10     A8 E4 05 F1 | 	add	objptr, ##25256
0fb14     F2 FA 61 FC | 	wrlong	result1, objptr
0fb18     31 00 00 FF 
0fb1c     A8 E4 85 F1 | 	sub	objptr, ##25256
0fb20     F2 FA 01 F6 | 	mov	result1, objptr
0fb24     00 68 00 FF 
0fb28     00 FA 45 F5 | 	or	result1, ##13631488
0fb2c     31 00 00 FF 
0fb30     AC E4 05 F1 | 	add	objptr, ##25260
0fb34     F2 FA 61 FC | 	wrlong	result1, objptr
0fb38     31 00 00 FF 
0fb3c     AC E4 85 F1 | 	sub	objptr, ##25260
0fb40     F2 FA 01 F6 | 	mov	result1, objptr
0fb44     74 FA 25 F4 | 	bith	result1, #116
0fb48     31 00 00 FF 
0fb4c     24 E5 05 F1 | 	add	objptr, ##25380
0fb50     F2 FA 61 FC | 	wrlong	result1, objptr
0fb54     31 00 00 FF 
0fb58     24 E5 85 F1 | 	sub	objptr, ##25380
0fb5c     F2 FA 01 F6 | 	mov	result1, objptr
0fb60     18 FA 25 F4 | 	bith	result1, #24
0fb64     31 00 00 FF 
0fb68     28 E5 05 F1 | 	add	objptr, ##25384
0fb6c     F2 FA 61 FC | 	wrlong	result1, objptr
0fb70     31 00 00 FF 
0fb74     28 E5 85 F1 | 	sub	objptr, ##25384
0fb78     F2 FA 01 F6 | 	mov	result1, objptr
0fb7c     00 88 00 FF 
0fb80     00 FA 45 F5 | 	or	result1, ##17825792
0fb84     31 00 00 FF 
0fb88     2C E5 05 F1 | 	add	objptr, ##25388
0fb8c     F2 FA 61 FC | 	wrlong	result1, objptr
0fb90     31 00 00 FF 
0fb94     2C E5 85 F1 | 	sub	objptr, ##25388
0fb98     F2 FA 01 F6 | 	mov	result1, objptr
0fb9c     00 90 00 FF 
0fba0     00 FA 45 F5 | 	or	result1, ##18874368
0fba4     31 00 00 FF 
0fba8     30 E5 05 F1 | 	add	objptr, ##25392
0fbac     F2 FA 61 FC | 	wrlong	result1, objptr
0fbb0     31 00 00 FF 
0fbb4     30 E5 85 F1 | 	sub	objptr, ##25392
0fbb8     F2 FA 01 F6 | 	mov	result1, objptr
0fbbc     00 98 00 FF 
0fbc0     00 FA 45 F5 | 	or	result1, ##19922944
0fbc4     31 00 00 FF 
0fbc8     34 E5 05 F1 | 	add	objptr, ##25396
0fbcc     F2 FA 61 FC | 	wrlong	result1, objptr
0fbd0     31 00 00 FF 
0fbd4     34 E5 85 F1 | 	sub	objptr, ##25396
0fbd8     F2 FA 01 F6 | 	mov	result1, objptr
0fbdc     00 A0 00 FF 
0fbe0     00 FA 45 F5 | 	or	result1, ##20971520
0fbe4     31 00 00 FF 
0fbe8     38 E5 05 F1 | 	add	objptr, ##25400
0fbec     F2 FA 61 FC | 	wrlong	result1, objptr
0fbf0     31 00 00 FF 
0fbf4     38 E5 85 F1 | 	sub	objptr, ##25400
0fbf8     F2 FA 01 F6 | 	mov	result1, objptr
0fbfc     00 A8 00 FF 
0fc00     00 FA 45 F5 | 	or	result1, ##22020096
0fc04     31 00 00 FF 
0fc08     3C E5 05 F1 | 	add	objptr, ##25404
0fc0c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc10     31 00 00 FF 
0fc14     3C E5 85 F1 | 	sub	objptr, ##25404
0fc18     F2 FA 01 F6 | 	mov	result1, objptr
0fc1c     00 B0 00 FF 
0fc20     00 FA 45 F5 | 	or	result1, ##23068672
0fc24     31 00 00 FF 
0fc28     40 E5 05 F1 | 	add	objptr, ##25408
0fc2c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc30     31 00 00 FF 
0fc34     40 E5 85 F1 | 	sub	objptr, ##25408
0fc38     F2 FA 01 F6 | 	mov	result1, objptr
0fc3c     00 B8 00 FF 
0fc40     00 FA 45 F5 | 	or	result1, ##24117248
0fc44     31 00 00 FF 
0fc48     44 E5 05 F1 | 	add	objptr, ##25412
0fc4c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc50     31 00 00 FF 
0fc54     44 E5 85 F1 | 	sub	objptr, ##25412
0fc58     F2 FA 01 F6 | 	mov	result1, objptr
0fc5c     37 FA 25 F4 | 	bith	result1, #55
0fc60     31 00 00 FF 
0fc64     48 E5 05 F1 | 	add	objptr, ##25416
0fc68     F2 FA 61 FC | 	wrlong	result1, objptr
0fc6c     31 00 00 FF 
0fc70     48 E5 85 F1 | 	sub	objptr, ##25416
0fc74     F2 FA 01 F6 | 	mov	result1, objptr
0fc78     00 C8 00 FF 
0fc7c     00 FA 45 F5 | 	or	result1, ##26214400
0fc80     31 00 00 FF 
0fc84     4C E5 05 F1 | 	add	objptr, ##25420
0fc88     F2 FA 61 FC | 	wrlong	result1, objptr
0fc8c     31 00 00 FF 
0fc90     4C E5 85 F1 | 	sub	objptr, ##25420
0fc94     F2 FA 01 F6 | 	mov	result1, objptr
0fc98     00 D0 00 FF 
0fc9c     00 FA 45 F5 | 	or	result1, ##27262976
0fca0     31 00 00 FF 
0fca4     50 E5 05 F1 | 	add	objptr, ##25424
0fca8     F2 FA 61 FC | 	wrlong	result1, objptr
0fcac     31 00 00 FF 
0fcb0     50 E5 85 F1 | 	sub	objptr, ##25424
0fcb4     F2 FA 01 F6 | 	mov	result1, objptr
0fcb8     00 D8 00 FF 
0fcbc     00 FA 45 F5 | 	or	result1, ##28311552
0fcc0     31 00 00 FF 
0fcc4     54 E5 05 F1 | 	add	objptr, ##25428
0fcc8     F2 FA 61 FC | 	wrlong	result1, objptr
0fccc     31 00 00 FF 
0fcd0     54 E5 85 F1 | 	sub	objptr, ##25428
0fcd4     F2 FA 01 F6 | 	mov	result1, objptr
0fcd8     56 FA 25 F4 | 	bith	result1, #86
0fcdc     31 00 00 FF 
0fce0     58 E5 05 F1 | 	add	objptr, ##25432
0fce4     F2 FA 61 FC | 	wrlong	result1, objptr
0fce8     31 00 00 FF 
0fcec     58 E5 85 F1 | 	sub	objptr, ##25432
0fcf0     F2 FA 01 F6 | 	mov	result1, objptr
0fcf4     00 E8 00 FF 
0fcf8     00 FA 45 F5 | 	or	result1, ##30408704
0fcfc     33 00 00 FF 
0fd00     20 E4 05 F1 | 	add	objptr, ##26144
0fd04     F2 FA 61 FC | 	wrlong	result1, objptr
0fd08     33 00 00 FF 
0fd0c     20 E4 85 F1 | 	sub	objptr, ##26144
0fd10     F2 FA 01 F6 | 	mov	result1, objptr
0fd14     75 FA 25 F4 | 	bith	result1, #117
0fd18     31 00 00 FF 
0fd1c     5C E5 05 F1 | 	add	objptr, ##25436
0fd20     F2 FA 61 FC | 	wrlong	result1, objptr
0fd24     31 00 00 FF 
0fd28     5C E5 85 F1 | 	sub	objptr, ##25436
0fd2c     F2 FA 01 F6 | 	mov	result1, objptr
0fd30     94 FA 25 F4 | 	bith	result1, #148
0fd34     31 00 00 FF 
0fd38     70 E5 05 F1 | 	add	objptr, ##25456
0fd3c     F2 FA 61 FC | 	wrlong	result1, objptr
0fd40     31 00 00 FF 
0fd44     70 E5 85 F1 | 	sub	objptr, ##25456
0fd48     F2 FA 01 F6 | 	mov	result1, objptr
0fd4c     19 FA 25 F4 | 	bith	result1, #25
0fd50     31 00 00 FF 
0fd54     60 E5 05 F1 | 	add	objptr, ##25440
0fd58     F2 FA 61 FC | 	wrlong	result1, objptr
0fd5c     31 00 00 FF 
0fd60     60 E5 85 F1 | 	sub	objptr, ##25440
0fd64     F2 FA 01 F6 | 	mov	result1, objptr
0fd68     00 08 01 FF 
0fd6c     00 FA 45 F5 | 	or	result1, ##34603008
0fd70     31 00 00 FF 
0fd74     7C E4 05 F1 | 	add	objptr, ##25212
0fd78     F2 FA 61 FC | 	wrlong	result1, objptr
0fd7c     31 00 00 FF 
0fd80     7C E4 85 F1 | 	sub	objptr, ##25212
0fd84     F2 FA 01 F6 | 	mov	result1, objptr
0fd88     00 10 01 FF 
0fd8c     00 FA 45 F5 | 	or	result1, ##35651584
0fd90     31 00 00 FF 
0fd94     64 E5 05 F1 | 	add	objptr, ##25444
0fd98     F2 FA 61 FC | 	wrlong	result1, objptr
0fd9c     31 00 00 FF 
0fda0     64 E5 85 F1 | 	sub	objptr, ##25444
0fda4     F2 FA 01 F6 | 	mov	result1, objptr
0fda8     00 18 01 FF 
0fdac     00 FA 45 F5 | 	or	result1, ##36700160
0fdb0     31 00 00 FF 
0fdb4     68 E5 05 F1 | 	add	objptr, ##25448
0fdb8     F2 FA 61 FC | 	wrlong	result1, objptr
0fdbc     31 00 00 FF 
0fdc0     68 E5 85 F1 | 	sub	objptr, ##25448
0fdc4     F2 FA 01 F6 | 	mov	result1, objptr
0fdc8     00 20 01 FF 
0fdcc     00 FA 45 F5 | 	or	result1, ##37748736
0fdd0     31 00 00 FF 
0fdd4     6C E5 05 F1 | 	add	objptr, ##25452
0fdd8     F2 FA 61 FC | 	wrlong	result1, objptr
0fddc     31 00 00 FF 
0fde0     6C E5 85 F1 | 	sub	objptr, ##25452
0fde4     F2 FA 01 F6 | 	mov	result1, objptr
0fde8     00 28 01 FF 
0fdec     00 FA 45 F5 | 	or	result1, ##38797312
0fdf0     31 00 00 FF 
0fdf4     78 E5 05 F1 | 	add	objptr, ##25464
0fdf8     F2 FA 61 FC | 	wrlong	result1, objptr
0fdfc     31 00 00 FF 
0fe00     78 E5 85 F1 | 	sub	objptr, ##25464
0fe04     F2 FA 01 F6 | 	mov	result1, objptr
0fe08     00 30 01 FF 
0fe0c     00 FA 45 F5 | 	or	result1, ##39845888
0fe10     31 00 00 FF 
0fe14     7C E5 05 F1 | 	add	objptr, ##25468
0fe18     F2 FA 61 FC | 	wrlong	result1, objptr
0fe1c     31 00 00 FF 
0fe20     7C E5 85 F1 | 	sub	objptr, ##25468
0fe24     F2 FA 01 F6 | 	mov	result1, objptr
0fe28     00 38 01 FF 
0fe2c     00 FA 45 F5 | 	or	result1, ##40894464
0fe30     31 00 00 FF 
0fe34     80 E5 05 F1 | 	add	objptr, ##25472
0fe38     F2 FA 61 FC | 	wrlong	result1, objptr
0fe3c     31 00 00 FF 
0fe40     80 E5 85 F1 | 	sub	objptr, ##25472
0fe44     F2 FA 01 F6 | 	mov	result1, objptr
0fe48     00 40 01 FF 
0fe4c     00 FA 45 F5 | 	or	result1, ##41943040
0fe50     31 00 00 FF 
0fe54     84 E5 05 F1 | 	add	objptr, ##25476
0fe58     F2 FA 61 FC | 	wrlong	result1, objptr
0fe5c     31 00 00 FF 
0fe60     84 E5 85 F1 | 	sub	objptr, ##25476
0fe64     F2 FA 01 F6 | 	mov	result1, objptr
0fe68     00 48 01 FF 
0fe6c     00 FA 45 F5 | 	or	result1, ##42991616
0fe70     31 00 00 FF 
0fe74     8C E5 05 F1 | 	add	objptr, ##25484
0fe78     F2 FA 61 FC | 	wrlong	result1, objptr
0fe7c     31 00 00 FF 
0fe80     8C E5 85 F1 | 	sub	objptr, ##25484
0fe84     F2 FA 01 F6 | 	mov	result1, objptr
0fe88     00 50 01 FF 
0fe8c     00 FA 45 F5 | 	or	result1, ##44040192
0fe90     31 00 00 FF 
0fe94     90 E5 05 F1 | 	add	objptr, ##25488
0fe98     F2 FA 61 FC | 	wrlong	result1, objptr
0fe9c     31 00 00 FF 
0fea0     90 E5 85 F1 | 	sub	objptr, ##25488
0fea4     F2 FA 01 F6 | 	mov	result1, objptr
0fea8     00 58 01 FF 
0feac     00 FA 45 F5 | 	or	result1, ##45088768
0feb0     31 00 00 FF 
0feb4     90 E4 05 F1 | 	add	objptr, ##25232
0feb8     F2 FA 61 FC | 	wrlong	result1, objptr
0febc     31 00 00 FF 
0fec0     90 E4 85 F1 | 	sub	objptr, ##25232
0fec4     F2 FA 01 F6 | 	mov	result1, objptr
0fec8     00 60 01 FF 
0fecc     00 FA 45 F5 | 	or	result1, ##46137344
0fed0     31 00 00 FF 
0fed4     C0 E4 05 F1 | 	add	objptr, ##25280
0fed8     F2 FA 61 FC | 	wrlong	result1, objptr
0fedc     31 00 00 FF 
0fee0     C0 E4 85 F1 | 	sub	objptr, ##25280
0fee4     F2 FA 01 F6 | 	mov	result1, objptr
0fee8     00 68 01 FF 
0feec     00 FA 45 F5 | 	or	result1, ##47185920
0fef0     31 00 00 FF 
0fef4     BC E4 05 F1 | 	add	objptr, ##25276
0fef8     F2 FA 61 FC | 	wrlong	result1, objptr
0fefc     31 00 00 FF 
0ff00     BC E4 85 F1 | 	sub	objptr, ##25276
0ff04     F2 FA 01 F6 | 	mov	result1, objptr
0ff08     00 70 01 FF 
0ff0c     00 FA 45 F5 | 	or	result1, ##48234496
0ff10     31 00 00 FF 
0ff14     60 E4 05 F1 | 	add	objptr, ##25184
0ff18     F2 FA 61 FC | 	wrlong	result1, objptr
0ff1c     31 00 00 FF 
0ff20     60 E4 85 F1 | 	sub	objptr, ##25184
0ff24     F2 FA 01 F6 | 	mov	result1, objptr
0ff28     00 78 01 FF 
0ff2c     00 FA 45 F5 | 	or	result1, ##49283072
0ff30     31 00 00 FF 
0ff34     64 E4 05 F1 | 	add	objptr, ##25188
0ff38     F2 FA 61 FC | 	wrlong	result1, objptr
0ff3c     31 00 00 FF 
0ff40     64 E4 85 F1 | 	sub	objptr, ##25188
0ff44     F2 FA 01 F6 | 	mov	result1, objptr
0ff48     38 FA 25 F4 | 	bith	result1, #56
0ff4c     31 00 00 FF 
0ff50     CC E4 05 F1 | 	add	objptr, ##25292
0ff54     F2 FA 61 FC | 	wrlong	result1, objptr
0ff58     31 00 00 FF 
0ff5c     CC E4 85 F1 | 	sub	objptr, ##25292
0ff60     F2 FA 01 F6 | 	mov	result1, objptr
0ff64     00 88 01 FF 
0ff68     00 FA 45 F5 | 	or	result1, ##51380224
0ff6c     31 00 00 FF 
0ff70     74 E5 05 F1 | 	add	objptr, ##25460
0ff74     F2 FA 61 FC | 	wrlong	result1, objptr
0ff78     31 00 00 FF 
0ff7c     74 E5 85 F1 | 	sub	objptr, ##25460
0ff80     F2 FA 01 F6 | 	mov	result1, objptr
0ff84     00 90 01 FF 
0ff88     00 FA 45 F5 | 	or	result1, ##52428800
0ff8c     31 00 00 FF 
0ff90     88 E5 05 F1 | 	add	objptr, ##25480
0ff94     F2 FA 61 FC | 	wrlong	result1, objptr
0ff98     31 00 00 FF 
0ff9c     88 E5 85 F1 | 	sub	objptr, ##25480
0ffa0     F2 FA 01 F6 | 	mov	result1, objptr
0ffa4     00 98 01 FF 
0ffa8     00 FA 45 F5 | 	or	result1, ##53477376
0ffac     31 00 00 FF 
0ffb0     94 E5 05 F1 | 	add	objptr, ##25492
0ffb4     F2 FA 61 FC | 	wrlong	result1, objptr
0ffb8     31 00 00 FF 
0ffbc     94 E5 85 F1 | 	sub	objptr, ##25492
0ffc0     F2 FA 01 F6 | 	mov	result1, objptr
0ffc4     00 A0 01 FF 
0ffc8     00 FA 45 F5 | 	or	result1, ##54525952
0ffcc     31 00 00 FF 
0ffd0     98 E5 05 F1 | 	add	objptr, ##25496
0ffd4     F2 FA 61 FC | 	wrlong	result1, objptr
0ffd8     31 00 00 FF 
0ffdc     98 E5 85 F1 | 	sub	objptr, ##25496
0ffe0     F2 FA 01 F6 | 	mov	result1, objptr
0ffe4     00 A8 01 FF 
0ffe8     00 FA 45 F5 | 	or	result1, ##55574528
0ffec     31 00 00 FF 
0fff0     9C E5 05 F1 | 	add	objptr, ##25500
0fff4     F2 FA 61 FC | 	wrlong	result1, objptr
0fff8     31 00 00 FF 
0fffc     9C E5 85 F1 | 	sub	objptr, ##25500
10000     F2 FA 01 F6 | 	mov	result1, objptr
10004     00 B0 01 FF 
10008     00 FA 45 F5 | 	or	result1, ##56623104
1000c     31 00 00 FF 
10010     A0 E5 05 F1 | 	add	objptr, ##25504
10014     F2 FA 61 FC | 	wrlong	result1, objptr
10018     31 00 00 FF 
1001c     A0 E5 85 F1 | 	sub	objptr, ##25504
10020     F2 FA 01 F6 | 	mov	result1, objptr
10024     00 B8 01 FF 
10028     00 FA 45 F5 | 	or	result1, ##57671680
1002c     31 00 00 FF 
10030     A4 E5 05 F1 | 	add	objptr, ##25508
10034     F2 FA 61 FC | 	wrlong	result1, objptr
10038     31 00 00 FF 
1003c     A4 E5 85 F1 | 	sub	objptr, ##25508
10040     F2 FA 01 F6 | 	mov	result1, objptr
10044     57 FA 25 F4 | 	bith	result1, #87
10048     31 00 00 FF 
1004c     A8 E5 05 F1 | 	add	objptr, ##25512
10050     F2 FA 61 FC | 	wrlong	result1, objptr
10054     31 00 00 FF 
10058     A8 E5 85 F1 | 	sub	objptr, ##25512
1005c     F2 FA 01 F6 | 	mov	result1, objptr
10060     94 FA 25 F4 | 	bith	result1, #148
10064     31 00 00 FF 
10068     70 E5 05 F1 | 	add	objptr, ##25456
1006c     F2 FA 61 FC | 	wrlong	result1, objptr
10070     31 00 00 FF 
10074     70 E5 85 F1 | 	sub	objptr, ##25456
10078     F2 FA 01 F6 | 	mov	result1, objptr
1007c     00 C8 01 FF 
10080     00 FA 45 F5 | 	or	result1, ##59768832
10084     31 00 00 FF 
10088     B0 E5 05 F1 | 	add	objptr, ##25520
1008c     F2 FA 61 FC | 	wrlong	result1, objptr
10090     31 00 00 FF 
10094     B0 E5 85 F1 | 	sub	objptr, ##25520
10098     F2 FA 01 F6 | 	mov	result1, objptr
1009c     00 D0 01 FF 
100a0     00 FA 45 F5 | 	or	result1, ##60817408
100a4     31 00 00 FF 
100a8     AC E5 05 F1 | 	add	objptr, ##25516
100ac     F2 FA 61 FC | 	wrlong	result1, objptr
100b0     31 00 00 FF 
100b4     AC E5 85 F1 | 	sub	objptr, ##25516
100b8     F2 FA 01 F6 | 	mov	result1, objptr
100bc     00 D8 01 FF 
100c0     00 FA 45 F5 | 	or	result1, ##61865984
100c4     31 00 00 FF 
100c8     C4 E5 05 F1 | 	add	objptr, ##25540
100cc     F2 FA 61 FC | 	wrlong	result1, objptr
100d0     31 00 00 FF 
100d4     C4 E5 85 F1 | 	sub	objptr, ##25540
100d8     F2 FA 01 F6 | 	mov	result1, objptr
100dc     76 FA 25 F4 | 	bith	result1, #118
100e0     31 00 00 FF 
100e4     C8 E5 05 F1 | 	add	objptr, ##25544
100e8     F2 FA 61 FC | 	wrlong	result1, objptr
100ec     31 00 00 FF 
100f0     C8 E5 85 F1 | 	sub	objptr, ##25544
100f4     F2 FA 01 F6 | 	mov	result1, objptr
100f8     00 E8 01 FF 
100fc     00 FA 45 F5 | 	or	result1, ##63963136
10100     31 00 00 FF 
10104     B4 E5 05 F1 | 	add	objptr, ##25524
10108     F2 FA 61 FC | 	wrlong	result1, objptr
1010c     31 00 00 FF 
10110     B4 E5 85 F1 | 	sub	objptr, ##25524
10114     F2 FA 01 F6 | 	mov	result1, objptr
10118     95 FA 25 F4 | 	bith	result1, #149
1011c     31 00 00 FF 
10120     B8 E5 05 F1 | 	add	objptr, ##25528
10124     F2 FA 61 FC | 	wrlong	result1, objptr
10128     31 00 00 FF 
1012c     B8 E5 85 F1 | 	sub	objptr, ##25528
10130     F2 FA 01 F6 | 	mov	result1, objptr
10134     B4 FA 25 F4 | 	bith	result1, #180
10138     31 00 00 FF 
1013c     BC E5 05 F1 | 	add	objptr, ##25532
10140     F2 FA 61 FC | 	wrlong	result1, objptr
10144     31 00 00 FF 
10148     BC E5 85 F1 | 	sub	objptr, ##25532
1014c     F2 FA 01 F6 | 	mov	result1, objptr
10150     1A FA 25 F4 | 	bith	result1, #26
10154     31 00 00 FF 
10158     C0 E5 05 F1 | 	add	objptr, ##25536
1015c     F2 FA 61 FC | 	wrlong	result1, objptr
10160     31 00 00 FF 
10164     C0 E5 85 F1 | 	sub	objptr, ##25536
10168     F2 FA 01 F6 | 	mov	result1, objptr
1016c     00 08 02 FF 
10170     00 FA 45 F5 | 	or	result1, ##68157440
10174     31 00 00 FF 
10178     D0 E5 05 F1 | 	add	objptr, ##25552
1017c     F2 FA 61 FC | 	wrlong	result1, objptr
10180     31 00 00 FF 
10184     D0 E5 85 F1 | 	sub	objptr, ##25552
10188     F2 FA 01 F6 | 	mov	result1, objptr
1018c     00 10 02 FF 
10190     00 FA 45 F5 | 	or	result1, ##69206016
10194     31 00 00 FF 
10198     CC E5 05 F1 | 	add	objptr, ##25548
1019c     F2 FA 61 FC | 	wrlong	result1, objptr
101a0     31 00 00 FF 
101a4     CC E5 85 F1 | 	sub	objptr, ##25548
101a8     F2 FA 01 F6 | 	mov	result1, objptr
101ac     00 18 02 FF 
101b0     00 FA 45 F5 | 	or	result1, ##70254592
101b4     31 00 00 FF 
101b8     DC E5 05 F1 | 	add	objptr, ##25564
101bc     F2 FA 61 FC | 	wrlong	result1, objptr
101c0     31 00 00 FF 
101c4     DC E5 85 F1 | 	sub	objptr, ##25564
101c8     F2 FA 01 F6 | 	mov	result1, objptr
101cc     00 20 02 FF 
101d0     00 FA 45 F5 | 	or	result1, ##71303168
101d4     31 00 00 FF 
101d8     D8 E5 05 F1 | 	add	objptr, ##25560
101dc     F2 FA 61 FC | 	wrlong	result1, objptr
101e0     31 00 00 FF 
101e4     D8 E5 85 F1 | 	sub	objptr, ##25560
101e8     F2 FA 01 F6 | 	mov	result1, objptr
101ec     00 28 02 FF 
101f0     00 FA 45 F5 | 	or	result1, ##72351744
101f4     31 00 00 FF 
101f8     D4 E5 05 F1 | 	add	objptr, ##25556
101fc     F2 FA 61 FC | 	wrlong	result1, objptr
10200     31 00 00 FF 
10204     D4 E5 85 F1 | 	sub	objptr, ##25556
10208     F2 FA 01 F6 | 	mov	result1, objptr
1020c     00 30 02 FF 
10210     00 FA 45 F5 | 	or	result1, ##73400320
10214     31 00 00 FF 
10218     E0 E5 05 F1 | 	add	objptr, ##25568
1021c     F2 FA 61 FC | 	wrlong	result1, objptr
10220     31 00 00 FF 
10224     E0 E5 85 F1 | 	sub	objptr, ##25568
10228     F2 FA 01 F6 | 	mov	result1, objptr
1022c     00 38 02 FF 
10230     00 FA 45 F5 | 	or	result1, ##74448896
10234     31 00 00 FF 
10238     E4 E5 05 F1 | 	add	objptr, ##25572
1023c     F2 FA 61 FC | 	wrlong	result1, objptr
10240     31 00 00 FF 
10244     E4 E5 85 F1 | 	sub	objptr, ##25572
10248     F2 FA 01 F6 | 	mov	result1, objptr
1024c     00 40 02 FF 
10250     00 FA 45 F5 | 	or	result1, ##75497472
10254     31 00 00 FF 
10258     78 E4 05 F1 | 	add	objptr, ##25208
1025c     F2 FA 61 FC | 	wrlong	result1, objptr
10260     31 00 00 FF 
10264     78 E4 85 F1 | 	sub	objptr, ##25208
10268     F2 FA 01 F6 | 	mov	result1, objptr
1026c     00 48 02 FF 
10270     00 FA 45 F5 | 	or	result1, ##76546048
10274     31 00 00 FF 
10278     E8 E5 05 F1 | 	add	objptr, ##25576
1027c     F2 FA 61 FC | 	wrlong	result1, objptr
10280     31 00 00 FF 
10284     E8 E5 85 F1 | 	sub	objptr, ##25576
10288                 | _init_commands_ret
10288     2D 00 64 FD | 	ret
1028c                 | 
1028c                 | ' 
1028c                 | ' ''--------------------------------Error strings -------------------------------------
1028c                 | ' 
1028c                 | ' sub init_error_strings
1028c                 | _init_error_strings
1028c     19 01 00 FF 
10290     00 00 06 F6 | 	mov	_var01, ##@LR__4254
10294     33 00 00 FF 
10298     40 E4 05 F1 | 	add	objptr, ##26176
1029c     F2 00 62 FC | 	wrlong	_var01, objptr
102a0     19 01 00 FF 
102a4     01 00 06 F6 | 	mov	_var01, ##@LR__4255
102a8     04 E4 05 F1 | 	add	objptr, #4
102ac     F2 00 62 FC | 	wrlong	_var01, objptr
102b0     19 01 00 FF 
102b4     26 00 06 F6 | 	mov	_var01, ##@LR__4256
102b8     04 E4 05 F1 | 	add	objptr, #4
102bc     F2 00 62 FC | 	wrlong	_var01, objptr
102c0     19 01 00 FF 
102c4     47 00 06 F6 | 	mov	_var01, ##@LR__4257
102c8     04 E4 05 F1 | 	add	objptr, #4
102cc     F2 00 62 FC | 	wrlong	_var01, objptr
102d0     19 01 00 FF 
102d4     61 00 06 F6 | 	mov	_var01, ##@LR__4258
102d8     04 E4 05 F1 | 	add	objptr, #4
102dc     F2 00 62 FC | 	wrlong	_var01, objptr
102e0     19 01 00 FF 
102e4     7D 00 06 F6 | 	mov	_var01, ##@LR__4259
102e8     04 E4 05 F1 | 	add	objptr, #4
102ec     F2 00 62 FC | 	wrlong	_var01, objptr
102f0     19 01 00 FF 
102f4     9F 00 06 F6 | 	mov	_var01, ##@LR__4260
102f8     04 E4 05 F1 | 	add	objptr, #4
102fc     F2 00 62 FC | 	wrlong	_var01, objptr
10300     19 01 00 FF 
10304     CD 00 06 F6 | 	mov	_var01, ##@LR__4261
10308     04 E4 05 F1 | 	add	objptr, #4
1030c     F2 00 62 FC | 	wrlong	_var01, objptr
10310     19 01 00 FF 
10314     F8 00 06 F6 | 	mov	_var01, ##@LR__4262
10318     04 E4 05 F1 | 	add	objptr, #4
1031c     F2 00 62 FC | 	wrlong	_var01, objptr
10320     19 01 00 FF 
10324     11 01 06 F6 | 	mov	_var01, ##@LR__4263
10328     04 E4 05 F1 | 	add	objptr, #4
1032c     F2 00 62 FC | 	wrlong	_var01, objptr
10330     19 01 00 FF 
10334     32 01 06 F6 | 	mov	_var01, ##@LR__4264
10338     04 E4 05 F1 | 	add	objptr, #4
1033c     F2 00 62 FC | 	wrlong	_var01, objptr
10340     19 01 00 FF 
10344     49 01 06 F6 | 	mov	_var01, ##@LR__4265
10348     04 E4 05 F1 | 	add	objptr, #4
1034c     F2 00 62 FC | 	wrlong	_var01, objptr
10350     19 01 00 FF 
10354     67 01 06 F6 | 	mov	_var01, ##@LR__4266
10358     04 E4 05 F1 | 	add	objptr, #4
1035c     F2 00 62 FC | 	wrlong	_var01, objptr
10360     19 01 00 FF 
10364     8B 01 06 F6 | 	mov	_var01, ##@LR__4267
10368     04 E4 05 F1 | 	add	objptr, #4
1036c     F2 00 62 FC | 	wrlong	_var01, objptr
10370     19 01 00 FF 
10374     B2 01 06 F6 | 	mov	_var01, ##@LR__4268
10378     04 E4 05 F1 | 	add	objptr, #4
1037c     F2 00 62 FC | 	wrlong	_var01, objptr
10380     19 01 00 FF 
10384     CE 01 06 F6 | 	mov	_var01, ##@LR__4269
10388     04 E4 05 F1 | 	add	objptr, #4
1038c     F2 00 62 FC | 	wrlong	_var01, objptr
10390     19 01 00 FF 
10394     DF 01 06 F6 | 	mov	_var01, ##@LR__4270
10398     04 E4 05 F1 | 	add	objptr, #4
1039c     F2 00 62 FC | 	wrlong	_var01, objptr
103a0     19 01 00 FF 
103a4     EF 01 06 F6 | 	mov	_var01, ##@LR__4271
103a8     04 E4 05 F1 | 	add	objptr, #4
103ac     F2 00 62 FC | 	wrlong	_var01, objptr
103b0     1A 01 00 FF 
103b4     0A 00 06 F6 | 	mov	_var01, ##@LR__4272
103b8     04 E4 05 F1 | 	add	objptr, #4
103bc     F2 00 62 FC | 	wrlong	_var01, objptr
103c0     1A 01 00 FF 
103c4     1C 00 06 F6 | 	mov	_var01, ##@LR__4273
103c8     04 E4 05 F1 | 	add	objptr, #4
103cc     F2 00 62 FC | 	wrlong	_var01, objptr
103d0     1A 01 00 FF 
103d4     34 00 06 F6 | 	mov	_var01, ##@LR__4274
103d8     04 E4 05 F1 | 	add	objptr, #4
103dc     F2 00 62 FC | 	wrlong	_var01, objptr
103e0     1A 01 00 FF 
103e4     48 00 06 F6 | 	mov	_var01, ##@LR__4275
103e8     04 E4 05 F1 | 	add	objptr, #4
103ec     F2 00 62 FC | 	wrlong	_var01, objptr
103f0     1A 01 00 FF 
103f4     58 00 06 F6 | 	mov	_var01, ##@LR__4276
103f8     04 E4 05 F1 | 	add	objptr, #4
103fc     F2 00 62 FC | 	wrlong	_var01, objptr
10400     1A 01 00 FF 
10404     75 00 06 F6 | 	mov	_var01, ##@LR__4277
10408     04 E4 05 F1 | 	add	objptr, #4
1040c     F2 00 62 FC | 	wrlong	_var01, objptr
10410     1A 01 00 FF 
10414     86 00 06 F6 | 	mov	_var01, ##@LR__4278
10418     04 E4 05 F1 | 	add	objptr, #4
1041c     F2 00 62 FC | 	wrlong	_var01, objptr
10420     1A 01 00 FF 
10424     97 00 06 F6 | 	mov	_var01, ##@LR__4279
10428     04 E4 05 F1 | 	add	objptr, #4
1042c     F2 00 62 FC | 	wrlong	_var01, objptr
10430     1A 01 00 FF 
10434     C2 00 06 F6 | 	mov	_var01, ##@LR__4280
10438     04 E4 05 F1 | 	add	objptr, #4
1043c     F2 00 62 FC | 	wrlong	_var01, objptr
10440     1A 01 00 FF 
10444     DE 00 06 F6 | 	mov	_var01, ##@LR__4281
10448     04 E4 05 F1 | 	add	objptr, #4
1044c     F2 00 62 FC | 	wrlong	_var01, objptr
10450     1A 01 00 FF 
10454     F4 00 06 F6 | 	mov	_var01, ##@LR__4282
10458     04 E4 05 F1 | 	add	objptr, #4
1045c     F2 00 62 FC | 	wrlong	_var01, objptr
10460     1A 01 00 FF 
10464     01 01 06 F6 | 	mov	_var01, ##@LR__4283
10468     04 E4 05 F1 | 	add	objptr, #4
1046c     F2 00 62 FC | 	wrlong	_var01, objptr
10470     1A 01 00 FF 
10474     13 01 06 F6 | 	mov	_var01, ##@LR__4284
10478     04 E4 05 F1 | 	add	objptr, #4
1047c     F2 00 62 FC | 	wrlong	_var01, objptr
10480     1A 01 00 FF 
10484     24 01 06 F6 | 	mov	_var01, ##@LR__4285
10488     04 E4 05 F1 | 	add	objptr, #4
1048c     F2 00 62 FC | 	wrlong	_var01, objptr
10490     1A 01 00 FF 
10494     40 01 06 F6 | 	mov	_var01, ##@LR__4286
10498     04 E4 05 F1 | 	add	objptr, #4
1049c     F2 00 62 FC | 	wrlong	_var01, objptr
104a0     1A 01 00 FF 
104a4     51 01 06 F6 | 	mov	_var01, ##@LR__4287
104a8     04 E4 05 F1 | 	add	objptr, #4
104ac     F2 00 62 FC | 	wrlong	_var01, objptr
104b0     1A 01 00 FF 
104b4     60 01 06 F6 | 	mov	_var01, ##@LR__4288
104b8     04 E4 05 F1 | 	add	objptr, #4
104bc     F2 00 62 FC | 	wrlong	_var01, objptr
104c0     1A 01 00 FF 
104c4     7B 01 06 F6 | 	mov	_var01, ##@LR__4289
104c8     04 E4 05 F1 | 	add	objptr, #4
104cc     F2 00 62 FC | 	wrlong	_var01, objptr
104d0     1A 01 00 FF 
104d4     AF 01 06 F6 | 	mov	_var01, ##@LR__4290
104d8     04 E4 05 F1 | 	add	objptr, #4
104dc     F2 00 62 FC | 	wrlong	_var01, objptr
104e0     1A 01 00 FF 
104e4     C8 01 06 F6 | 	mov	_var01, ##@LR__4291
104e8     04 E4 05 F1 | 	add	objptr, #4
104ec     F2 00 62 FC | 	wrlong	_var01, objptr
104f0     1A 01 00 FF 
104f4     E4 01 06 F6 | 	mov	_var01, ##@LR__4292
104f8     04 E4 05 F1 | 	add	objptr, #4
104fc     F2 00 62 FC | 	wrlong	_var01, objptr
10500     1B 01 00 FF 
10504     02 00 06 F6 | 	mov	_var01, ##@LR__4293
10508     04 E4 05 F1 | 	add	objptr, #4
1050c     F2 00 62 FC | 	wrlong	_var01, objptr
10510     1B 01 00 FF 
10514     1B 00 06 F6 | 	mov	_var01, ##@LR__4294
10518     04 E4 05 F1 | 	add	objptr, #4
1051c     F2 00 62 FC | 	wrlong	_var01, objptr
10520     1B 01 00 FF 
10524     3A 00 06 F6 | 	mov	_var01, ##@LR__4295
10528     04 E4 05 F1 | 	add	objptr, #4
1052c     F2 00 62 FC | 	wrlong	_var01, objptr
10530     1B 01 00 FF 
10534     49 00 06 F6 | 	mov	_var01, ##@LR__4296
10538     04 E4 05 F1 | 	add	objptr, #4
1053c     F2 00 62 FC | 	wrlong	_var01, objptr
10540     1B 01 00 FF 
10544     77 00 06 F6 | 	mov	_var01, ##@LR__4297
10548     04 E4 05 F1 | 	add	objptr, #4
1054c     F2 00 62 FC | 	wrlong	_var01, objptr
10550     1B 01 00 FF 
10554     85 00 06 F6 | 	mov	_var01, ##@LR__4298
10558     04 E4 05 F1 | 	add	objptr, #4
1055c     F2 00 62 FC | 	wrlong	_var01, objptr
10560     1B 01 00 FF 
10564     9A 00 06 F6 | 	mov	_var01, ##@LR__4299
10568     04 E4 05 F1 | 	add	objptr, #4
1056c     F2 00 62 FC | 	wrlong	_var01, objptr
10570     1B 01 00 FF 
10574     BE 00 06 F6 | 	mov	_var01, ##@LR__4300
10578     04 E4 05 F1 | 	add	objptr, #4
1057c     F2 00 62 FC | 	wrlong	_var01, objptr
10580     33 00 00 FF 
10584     F8 E4 85 F1 | 	sub	objptr, ##26360
10588                 | _init_error_strings_ret
10588     2D 00 64 FD | 	ret
1058c                 | 
1058c                 | '         
1058c                 | ' sub printerror(err as integer)
1058c                 | _printerror
1058c     01 4A 05 F6 | 	mov	COUNT_, #1
10590     A8 00 A0 FD | 	call	#pushregs_
10594     09 1F 02 F6 | 	mov	local01, arg01
10598     1B 01 00 FF 
1059c     D5 12 06 F6 | 	mov	arg01, ##@LR__4301
105a0     30 25 B0 FD | 	call	#_hg010b_spin2_write
105a4     0F 13 02 F6 | 	mov	arg01, local01
105a8     28 27 B0 FD | 	call	#_hg010b_spin2_inttostr
105ac     FD 12 02 F6 | 	mov	arg01, result1
105b0     20 25 B0 FD | 	call	#_hg010b_spin2_write
105b4     1B 01 00 FF 
105b8     DC 12 06 F6 | 	mov	arg01, ##@LR__4302
105bc     14 25 B0 FD | 	call	#_hg010b_spin2_write
105c0     02 1E 66 F0 | 	shl	local01, #2
105c4     33 00 00 FF 
105c8     40 E4 05 F1 | 	add	objptr, ##26176
105cc     F2 1E 02 F1 | 	add	local01, objptr
105d0     0F 13 02 FB | 	rdlong	arg01, local01
105d4     33 00 00 FF 
105d8     40 E4 85 F1 | 	sub	objptr, ##26176
105dc                 | ' 
105dc                 | ' write(text)
105dc     F4 24 B0 FD | 	call	#_hg010b_spin2_write
105e0                 | ' crlf
105e0     50 26 B0 FD | 	call	#_hg010b_spin2_crlf
105e4     A7 F0 03 F6 | 	mov	ptra, fp
105e8     B2 00 A0 FD | 	call	#popregs_
105ec                 | _printerror_ret
105ec     2D 00 64 FD | 	ret
105f0                 | 
105f0                 | ' 
105f0                 | ' '' ------------------------------- Hardware start/stop/initialization 
105f0                 | ' 
105f0                 | ' sub startpsram
105f0                 | _startpsram
105f0     00 12 06 F6 | 	mov	arg01, #0
105f4     0A 14 C6 F9 | 	decod	arg02, #10
105f8     0B 16 06 F6 | 	mov	arg03, #11
105fc     07 18 06 F6 | 	mov	arg04, #7
10600     02 00 00 FF 
10604     C0 E4 05 F1 | 	add	objptr, ##1216
10608     D4 27 B0 FD | 	call	#_psram_spin2_startx
1060c     22 00 00 FF 
10610     0C E5 05 F1 | 	add	objptr, ##17676
10614     F2 FA 61 FC | 	wrlong	result1, objptr
10618                 | '     return $7FF00 + cog*12
10618     0C E4 05 F1 | 	add	objptr, #12
1061c     FF 03 80 FF 
10620     F2 00 6A FC | 	wrlong	##524032, objptr
10624     24 00 00 FF 
10628     D8 E5 85 F1 | 	sub	objptr, ##18904
1062c                 | _startpsram_ret
1062c     2D 00 64 FD | 	ret
10630                 | 
10630                 | ' 
10630                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
10630                 | _startvideo
10630     01 4A 05 F6 | 	mov	COUNT_, #1
10634     A8 00 A0 FD | 	call	#pushregs_
10638     24 00 00 FF 
1063c     D8 E5 05 F1 | 	add	objptr, ##18904
10640     F2 18 02 FB | 	rdlong	arg04, objptr
10644     24 00 00 FF 
10648     D8 E5 85 F1 | 	sub	objptr, ##18904
1064c     0A 13 02 F6 | 	mov	arg01, arg02
10650     0C 15 02 F6 | 	mov	arg02, arg04
10654     18 0F B0 FD | 	call	#_hg010b_spin2_start
10658     24 00 00 FF 
1065c     C4 E5 05 F1 | 	add	objptr, ##18884
10660     F2 FA 61 FC | 	wrlong	result1, objptr
10664                 | ' 
10664                 | ' videocog=v.start(pin,mbox)
10664                 | ' 
10664                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
10664     00 1E 06 F6 | 	mov	local01, #0
10668     22 00 00 FF 
1066c     04 E5 85 F1 | 	sub	objptr, ##17668
10670                 | LR__1400
10670     0F 13 02 F6 | 	mov	arg01, local01
10674     00 28 00 FF 
10678     00 14 06 F6 | 	mov	arg02, ##5242880
1067c     B8 2B B0 FD | 	call	#_psram_spin2_setQos
10680     01 1E 06 F1 | 	add	local01, #1
10684     08 1E 56 F2 | 	cmps	local01, #8 wc
10688     E4 FF 9F CD |  if_b	jmp	#LR__1400
1068c     22 00 00 FF 
10690     04 E5 05 F1 | 	add	objptr, ##17668
10694     F2 12 02 FB | 	rdlong	arg01, objptr
10698     7A 00 02 FF 
1069c     00 14 06 F6 | 	mov	arg02, ##67171328
106a0     22 00 00 FF 
106a4     04 E5 85 F1 | 	sub	objptr, ##17668
106a8     8C 2B B0 FD | 	call	#_psram_spin2_setQos
106ac     02 00 00 FF 
106b0     C0 E4 85 F1 | 	sub	objptr, ##1216
106b4                 | ' psram.setQoS(videocog, $0400f400) 
106b4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
106b4     F2 14 02 F6 | 	mov	arg02, objptr
106b8     00 50 02 FF 
106bc     00 14 46 F5 | 	or	arg02, ##77594624
106c0     00 16 06 F6 | 	mov	arg03, #0
106c4     00 18 06 F6 | 	mov	arg04, #0
106c8     00 12 06 F6 | 	mov	arg01, #0
106cc     E8 3D B0 FD | 	call	#__system___basic_open
106d0                 | ' return videocog
106d0     24 00 00 FF 
106d4     C4 E5 05 F1 | 	add	objptr, ##18884
106d8     F2 FA 01 FB | 	rdlong	result1, objptr
106dc     24 00 00 FF 
106e0     C4 E5 85 F1 | 	sub	objptr, ##18884
106e4     A7 F0 03 F6 | 	mov	ptra, fp
106e8     B2 00 A0 FD | 	call	#popregs_
106ec                 | _startvideo_ret
106ec     2D 00 64 FD | 	ret
106f0                 | 
106f0                 | ' 
106f0                 | ' function pspeek(adr as ulong) as ubyte
106f0                 | _pspeek
106f0     00 4A 05 F6 | 	mov	COUNT_, #0
106f4     A8 00 A0 FD | 	call	#pushregs_
106f8     0C F0 07 F1 | 	add	ptra, #12
106fc     04 4E 05 F1 | 	add	fp, #4
10700     A7 12 62 FC | 	wrlong	arg01, fp
10704     04 4E 05 F1 | 	add	fp, #4
10708     A7 12 02 F6 | 	mov	arg01, fp
1070c     04 4E 85 F1 | 	sub	fp, #4
10710     A7 14 02 FB | 	rdlong	arg02, fp
10714     04 4E 85 F1 | 	sub	fp, #4
10718     01 16 06 F6 | 	mov	arg03, #1
1071c     02 00 00 FF 
10720     C0 E4 05 F1 | 	add	objptr, ##1216
10724     E4 28 B0 FD | 	call	#_psram_spin2_read1
10728     02 00 00 FF 
1072c     C0 E4 85 F1 | 	sub	objptr, ##1216
10730                 | ' psram.read1(varptr(res),adr,1)
10730                 | ' return res
10730     08 4E 05 F1 | 	add	fp, #8
10734     A7 FA C1 FA | 	rdbyte	result1, fp
10738     08 4E 85 F1 | 	sub	fp, #8
1073c     A7 F0 03 F6 | 	mov	ptra, fp
10740     B2 00 A0 FD | 	call	#popregs_
10744                 | _pspeek_ret
10744     2D 00 64 FD | 	ret
10748                 | 
10748                 | ' 
10748                 | ' function pslpeek(adr as ulong) as ulong
10748                 | _pslpeek
10748     00 4A 05 F6 | 	mov	COUNT_, #0
1074c     A8 00 A0 FD | 	call	#pushregs_
10750     0C F0 07 F1 | 	add	ptra, #12
10754     04 4E 05 F1 | 	add	fp, #4
10758     A7 12 62 FC | 	wrlong	arg01, fp
1075c     04 4E 05 F1 | 	add	fp, #4
10760     A7 12 02 F6 | 	mov	arg01, fp
10764     04 4E 85 F1 | 	sub	fp, #4
10768     A7 14 02 FB | 	rdlong	arg02, fp
1076c     04 4E 85 F1 | 	sub	fp, #4
10770     04 16 06 F6 | 	mov	arg03, #4
10774     02 00 00 FF 
10778     C0 E4 05 F1 | 	add	objptr, ##1216
1077c     8C 28 B0 FD | 	call	#_psram_spin2_read1
10780     02 00 00 FF 
10784     C0 E4 85 F1 | 	sub	objptr, ##1216
10788                 | ' psram.read1(varptr(res),adr,4)
10788                 | ' return res
10788     08 4E 05 F1 | 	add	fp, #8
1078c     A7 FA 01 FB | 	rdlong	result1, fp
10790     08 4E 85 F1 | 	sub	fp, #8
10794     A7 F0 03 F6 | 	mov	ptra, fp
10798     B2 00 A0 FD | 	call	#popregs_
1079c                 | _pslpeek_ret
1079c     2D 00 64 FD | 	ret
107a0                 | 
107a0                 | ' 
107a0                 | ' '' ------------------------------- USB keyboard scan to char translator
107a0                 | ' 
107a0                 | ' function scantochar(key)
107a0                 | _scantochar
107a0                 | ' 
107a0                 | ' select case (key shr 8) and 255
107a0     09 01 02 F6 | 	mov	_var01, arg01
107a4     08 00 C6 F0 | 	sar	_var01, #8
107a8     FF 00 0E F5 | 	and	_var01, #255 wz
107ac     24 00 90 AD |  if_e	jmp	#LR__1410
107b0     02 00 0E F2 | 	cmp	_var01, #2 wz
107b4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
107b8     30 00 90 AD |  if_e	jmp	#LR__1411
107bc     40 00 0E F2 | 	cmp	_var01, #64 wz
107c0     44 00 90 AD |  if_e	jmp	#LR__1412
107c4     42 00 0E F2 | 	cmp	_var01, #66 wz
107c8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
107cc     70 00 90 5D |  if_ne	jmp	#LR__1414
107d0     50 00 90 FD | 	jmp	#LR__1413
107d4                 | LR__1410
107d4     09 FB 01 F6 | 	mov	result1, arg01
107d8     7F FA 05 F5 | 	and	result1, #127
107dc     02 FA 65 F0 | 	shl	result1, #2
107e0     F5 FA 01 F1 | 	add	result1, ptr__dat__
107e4     FD FA C1 FA | 	rdbyte	result1, result1
107e8     54 00 90 FD | 	jmp	#_scantochar_ret
107ec                 | LR__1411
107ec     09 FB 01 F6 | 	mov	result1, arg01
107f0     7F FA 05 F5 | 	and	result1, #127
107f4     02 FA 65 F0 | 	shl	result1, #2
107f8     01 FA 05 F1 | 	add	result1, #1
107fc     F5 FA 01 F1 | 	add	result1, ptr__dat__
10800     FD FA C1 FA | 	rdbyte	result1, result1
10804     38 00 90 FD | 	jmp	#_scantochar_ret
10808                 | LR__1412
10808     09 FB 01 F6 | 	mov	result1, arg01
1080c     7F FA 05 F5 | 	and	result1, #127
10810     02 FA 65 F0 | 	shl	result1, #2
10814     02 FA 05 F1 | 	add	result1, #2
10818     F5 FA 01 F1 | 	add	result1, ptr__dat__
1081c     FD FA C1 FA | 	rdbyte	result1, result1
10820     1C 00 90 FD | 	jmp	#_scantochar_ret
10824                 | LR__1413
10824     09 FB 01 F6 | 	mov	result1, arg01
10828     7F FA 05 F5 | 	and	result1, #127
1082c     02 FA 65 F0 | 	shl	result1, #2
10830     03 FA 05 F1 | 	add	result1, #3
10834     F5 FA 01 F1 | 	add	result1, ptr__dat__
10838     FD FA C1 FA | 	rdbyte	result1, result1
1083c     00 00 90 FD | 	jmp	#_scantochar_ret
10840                 | LR__1414
10840                 | _scantochar_ret
10840     2D 00 64 FD | 	ret
10844                 | 
10844                 | _program
10844     0B 4A 05 F6 | 	mov	COUNT_, #11
10848     A8 00 A0 FD | 	call	#pushregs_
1084c     A0 FD BF FD | 	call	#_startpsram
10850     40 12 06 F6 | 	mov	arg01, #64
10854     00 14 06 F6 | 	mov	arg02, #0
10858     00 16 06 F6 | 	mov	arg03, #0
1085c     D0 FD BF FD | 	call	#_startvideo
10860     00 12 06 F6 | 	mov	arg01, #0
10864     00 14 06 F6 | 	mov	arg02, #0
10868     00 16 06 F6 | 	mov	arg03, #0
1086c     02 00 00 FF 
10870     C0 E4 05 F1 | 	add	objptr, ##1216
10874     D4 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
10878     FE 1C 02 F6 | 	mov	arg06, result2
1087c     22 00 00 FF 
10880     00 E5 05 F1 | 	add	objptr, ##17664
10884     F2 FA 61 FC | 	wrlong	result1, objptr
10888     14 E4 05 F1 | 	add	objptr, #20
1088c     F2 1C 62 FC | 	wrlong	arg06, objptr
10890     24 00 00 FF 
10894     D4 E5 85 F1 | 	sub	objptr, ##18900
10898     32 12 06 F6 | 	mov	arg01, #50
1089c     64 34 B0 FD | 	call	#__system___waitms
108a0     24 00 00 FF 
108a4     D4 E5 05 F1 | 	add	objptr, ##18900
108a8     F2 12 02 FB | 	rdlong	arg01, objptr
108ac     24 00 00 FF 
108b0     D4 E5 85 F1 | 	sub	objptr, ##18900
108b4     14 12 06 F1 | 	add	arg01, #20
108b8     20 00 80 FF 
108bc     09 01 58 FC | 	wrword	##16384, arg01
108c0     7C 2A B0 FD | 	call	#_usbnew_spin2_start
108c4     24 00 00 FF 
108c8     C8 E5 05 F1 | 	add	objptr, ##18888
108cc     F2 FA 61 FC | 	wrlong	result1, objptr
108d0                 | '   mouse_limits[0] := xlim
108d0     0F 00 00 FF 
108d4     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
108d8     01 00 80 FF 
108dc     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
108e0                 | '   mouse_limits[1] := ylim
108e0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
108e4     01 00 80 FF 
108e8     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
108ec     24 00 00 FF 
108f0     BB E4 85 F1 | 	sub	objptr, ##18619
108f4     F2 12 02 F6 | 	mov	arg01, objptr
108f8     0D E5 85 F1 | 	sub	objptr, #269
108fc     C4 12 06 F1 | 	add	arg01, #196
10900                 | '   mouse_outptr := ptr
10900     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
10904     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
10908     0F 00 00 FF 
1090c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
10910     07 00 00 FF 
10914     72 EB 05 F1 | 	add	ptr__dat__, ##3954
10918     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1091c     07 00 00 FF 
10920     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
10924     10 12 06 F6 | 	mov	arg01, #16
10928     3C 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1092c     10 12 06 F6 | 	mov	arg01, #16
10930     20 14 06 F6 | 	mov	arg02, #32
10934     20 16 06 F6 | 	mov	arg03, #32
10938     A0 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
1093c     09 12 C6 F9 | 	decod	arg01, #9
10940     20 15 06 F6 | 	mov	arg02, #288
10944     B4 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
10948     F2 1C 02 F6 | 	mov	arg06, objptr
1094c     47 00 00 FF 
10950     AC E5 05 F1 | 	add	objptr, ##36780
10954     F2 1A 02 F6 | 	mov	arg05, objptr
10958     0D 1D 62 FC | 	wrlong	arg06, arg05
1095c     04 1A 06 F1 | 	add	arg05, #4
10960     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
10964     EF 14 02 F6 | 	mov	arg02, entryptr__
10968     F2 1E 02 F6 | 	mov	local01, objptr
1096c     1E FA 05 F6 | 	mov	result1, #30
10970     28 1E 62 FD | 	setq	local01
10974     0A FB F1 FC | 	coginit	result1, arg02 wc
10978     01 FA 65 C6 |  if_b	neg	result1, #1
1097c     04 E4 85 F1 | 	sub	objptr, #4
10980     F2 FA 61 FC | 	wrlong	result1, objptr
10984     01 00 00 FF 
10988     90 E4 05 F1 | 	add	objptr, ##656
1098c     F2 00 68 FC | 	wrlong	#0, objptr
10990     24 00 00 FF 
10994     40 E4 85 F1 | 	sub	objptr, ##18496
10998     F2 04 68 FC | 	wrlong	#2, objptr
1099c     04 E4 05 F1 | 	add	objptr, #4
109a0     F2 26 69 FC | 	wrlong	#147, objptr
109a4     04 E4 05 F1 | 	add	objptr, #4
109a8     F2 34 69 FC | 	wrlong	#154, objptr
109ac     04 E4 05 F1 | 	add	objptr, #4
109b0     F2 08 68 FC | 	wrlong	#4, objptr
109b4     04 E4 85 F1 | 	sub	objptr, #4
109b8     F2 1C 02 FB | 	rdlong	arg06, objptr
109bc     14 E4 85 F1 | 	sub	objptr, #20
109c0     F2 1C 62 FC | 	wrlong	arg06, objptr
109c4     04 E4 05 F1 | 	add	objptr, #4
109c8     F2 00 68 FC | 	wrlong	#0, objptr
109cc     04 E4 05 F1 | 	add	objptr, #4
109d0     F2 00 68 FC | 	wrlong	#0, objptr
109d4     22 00 00 FF 
109d8     B0 E5 05 F1 | 	add	objptr, ##17840
109dc     F2 02 68 FC | 	wrlong	#1, objptr
109e0     14 00 00 FF 
109e4     7C E5 85 F1 | 	sub	objptr, ##10620
109e8     F2 18 68 FC | 	wrlong	#12, objptr
109ec     33 00 00 FF 
109f0     28 E4 85 F1 | 	sub	objptr, ##26152
109f4     B8 EE BF FD | 	call	#_init_commands
109f8     90 F8 BF FD | 	call	#_init_error_strings
109fc     24 8C BF FD | 	call	#_do_new
10a00     25 00 00 FF 
10a04     00 E4 05 F1 | 	add	objptr, ##18944
10a08     F2 12 02 FB | 	rdlong	arg01, objptr
10a0c     04 E4 85 F1 | 	sub	objptr, #4
10a10     F2 14 02 FB | 	rdlong	arg02, objptr
10a14     24 00 00 FF 
10a18     FC E5 85 F1 | 	sub	objptr, ##18940
10a1c     F8 1D B0 FD | 	call	#_hg010b_spin2_cls
10a20     25 00 00 FF 
10a24     04 E4 05 F1 | 	add	objptr, ##18948
10a28     F2 12 02 FB | 	rdlong	arg01, objptr
10a2c     25 00 00 FF 
10a30     04 E4 85 F1 | 	sub	objptr, ##18948
10a34     F8 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
10a38                 | ' 
10a38                 | ' leading_spaces:=amount
10a38     01 00 00 FF 
10a3c     B2 E4 05 F1 | 	add	objptr, ##690
10a40     F2 04 68 FC | 	wrlong	#2, objptr
10a44     01 00 00 FF 
10a48     B2 E4 85 F1 | 	sub	objptr, ##690
10a4c     1B 01 00 FF 
10a50     DF 20 06 F6 | 	mov	local02, ##@LR__4303
10a54     3D 12 06 F6 | 	mov	arg01, #61
10a58     3C 14 06 F6 | 	mov	arg02, #60
10a5c     3B 16 06 F6 | 	mov	arg03, #59
10a60     3A 18 06 F6 | 	mov	arg04, #58
10a64     14 76 B0 FD | 	call	#__system___vfs_open_sdcardx
10a68     FD 14 02 F6 | 	mov	arg02, result1
10a6c     10 13 02 F6 | 	mov	arg01, local02
10a70     68 33 B0 FD | 	call	#__system___mount
10a74     1B 01 00 FF 
10a78     E3 12 06 F6 | 	mov	arg01, ##@LR__4304
10a7c     1C 36 B0 FD | 	call	#__system___chdir
10a80     1B 01 00 FF 
10a84     EB 20 06 F6 | 	mov	local02, ##@LR__4305
10a88     40 00 00 FF 
10a8c     58 E4 05 F1 | 	add	objptr, ##32856
10a90     F2 20 62 FC | 	wrlong	local02, objptr
10a94     1B 00 00 FF 
10a98     60 E4 85 F1 | 	sub	objptr, ##13920
10a9c     F2 12 02 FB | 	rdlong	arg01, objptr
10aa0     24 00 00 FF 
10aa4     F8 E5 85 F1 | 	sub	objptr, ##18936
10aa8     01 12 66 F0 | 	shl	arg01, #1
10aac     01 14 06 F6 | 	mov	arg02, #1
10ab0     BC 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
10ab4                 | ' 
10ab4                 | ' init_commands
10ab4                 | ' init_error_strings
10ab4                 | ' do_new
10ab4                 | ' 
10ab4                 | ' 
10ab4                 | ' cls(ink, paper)
10ab4                 | ' 'v.setfontfamily(4) 				' use ST Mono font
10ab4                 | ' v.setfontfamily(font) 				' use ST Mono font
10ab4                 | ' v.setleadingspaces(2)
10ab4                 | ' mount "/sd", _vfs_open_sdcard()
10ab4                 | ' chdir "/sd/bas"
10ab4                 | ' 
10ab4                 | ' currentdir$="/sd/bas"
10ab4                 | ' 
10ab4                 | ' position 2*editor_spaces,1 : print ver$
10ab4     00 12 06 F6 | 	mov	arg01, #0
10ab8     20 85 B0 FD | 	call	#__system___getiolock_0306
10abc     FD 12 02 F6 | 	mov	arg01, result1
10ac0     34 30 B0 FD | 	call	#__system___lockmem
10ac4     09 00 00 FF 
10ac8     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
10acc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
10ad0     09 00 00 FF 
10ad4     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
10ad8     00 12 06 F6 | 	mov	arg01, #0
10adc     00 16 06 F6 | 	mov	arg03, #0
10ae0     20 3C B0 FD | 	call	#__system___basic_print_string
10ae4     00 12 06 F6 | 	mov	arg01, #0
10ae8     0A 14 06 F6 | 	mov	arg02, #10
10aec     00 16 06 F6 | 	mov	arg03, #0
10af0     B8 3B B0 FD | 	call	#__system___basic_print_char
10af4     00 12 06 F6 | 	mov	arg01, #0
10af8     E0 84 B0 FD | 	call	#__system___getiolock_0306
10afc     FD 00 68 FC | 	wrlong	#0, result1
10b00     F2 12 02 FB | 	rdlong	arg01, objptr
10b04     00 14 06 F6 | 	mov	arg02, #0
10b08     0A 16 06 F6 | 	mov	arg03, #10
10b0c     28 51 B0 FD | 	call	#__system__Number_S
10b10     FD 12 02 F6 | 	mov	arg01, result1
10b14     1B 01 00 FF 
10b18     F3 14 06 F6 | 	mov	arg02, ##@LR__4306
10b1c     34 30 B0 FD | 	call	#__system___string_concat
10b20     FD 20 02 F6 | 	mov	local02, result1
10b24     47 00 00 FF 
10b28     A0 E5 05 F1 | 	add	objptr, ##36768
10b2c     F2 20 62 FC | 	wrlong	local02, objptr
10b30     47 00 00 FF 
10b34     A0 E5 85 F1 | 	sub	objptr, ##36768
10b38                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
10b38     00 12 06 F6 | 	mov	arg01, #0
10b3c     9C 84 B0 FD | 	call	#__system___getiolock_0306
10b40     FD 12 02 F6 | 	mov	arg01, result1
10b44     B0 2F B0 FD | 	call	#__system___lockmem
10b48     47 00 00 FF 
10b4c     A0 E5 05 F1 | 	add	objptr, ##36768
10b50     F2 14 02 FB | 	rdlong	arg02, objptr
10b54     47 00 00 FF 
10b58     A0 E5 85 F1 | 	sub	objptr, ##36768
10b5c     00 12 06 F6 | 	mov	arg01, #0
10b60     00 16 06 F6 | 	mov	arg03, #0
10b64     9C 3B B0 FD | 	call	#__system___basic_print_string
10b68     00 12 06 F6 | 	mov	arg01, #0
10b6c     0A 14 06 F6 | 	mov	arg02, #10
10b70     00 16 06 F6 | 	mov	arg03, #0
10b74     34 3B B0 FD | 	call	#__system___basic_print_char
10b78     00 12 06 F6 | 	mov	arg01, #0
10b7c     5C 84 B0 FD | 	call	#__system___getiolock_0306
10b80     FD 00 68 FC | 	wrlong	#0, result1
10b84     24 00 00 FF 
10b88     F8 E5 05 F1 | 	add	objptr, ##18936
10b8c     F2 12 02 FB | 	rdlong	arg01, objptr
10b90     24 00 00 FF 
10b94     F8 E5 85 F1 | 	sub	objptr, ##18936
10b98     01 12 66 F0 | 	shl	arg01, #1
10b9c     04 14 06 F6 | 	mov	arg02, #4
10ba0     CC 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
10ba4                 | ' position 2*editor_spaces,4 : print "Ready"
10ba4     00 12 06 F6 | 	mov	arg01, #0
10ba8     30 84 B0 FD | 	call	#__system___getiolock_0306
10bac     FD 12 02 F6 | 	mov	arg01, result1
10bb0     44 2F B0 FD | 	call	#__system___lockmem
10bb4     1B 01 00 FF 
10bb8     05 15 06 F6 | 	mov	arg02, ##@LR__4307
10bbc     00 12 06 F6 | 	mov	arg01, #0
10bc0     00 16 06 F6 | 	mov	arg03, #0
10bc4     3C 3B B0 FD | 	call	#__system___basic_print_string
10bc8     FD 22 02 F6 | 	mov	local03, result1
10bcc     00 12 06 F6 | 	mov	arg01, #0
10bd0     0A 14 06 F6 | 	mov	arg02, #10
10bd4     00 16 06 F6 | 	mov	arg03, #0
10bd8     D0 3A B0 FD | 	call	#__system___basic_print_char
10bdc     01 24 06 F6 | 	mov	local04, #1
10be0     00 12 06 F6 | 	mov	arg01, #0
10be4     F4 83 B0 FD | 	call	#__system___getiolock_0306
10be8     FD 00 68 FC | 	wrlong	#0, result1
10bec     00 26 06 F6 | 	mov	local05, #0
10bf0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
10bf0                 | ' 
10bf0                 | ' 
10bf0                 | ' 
10bf0                 | ' '-------------------------------------------------------------------------------------------------------- 
10bf0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
10bf0                 | ' '--------------------------------------------------------------------------------------------------------
10bf0                 | ' 
10bf0                 | ' do
10bf0                 | LR__1420
10bf0     01 12 06 F6 | 	mov	arg01, #1
10bf4     B0 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
10bf8     A0 27 B0 FD | 	call	#_usbnew_spin2_get_key
10bfc     33 00 00 FF 
10c00     38 E4 05 F1 | 	add	objptr, ##26168
10c04     F2 FA 61 FC | 	wrlong	result1, objptr
10c08                 | '   return hkbd_led_rep
10c08     13 00 00 FF 
10c0c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
10c10     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
10c14     13 00 00 FF 
10c18     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
10c1c     16 00 00 FF 
10c20     08 E4 05 F1 | 	add	objptr, ##11272
10c24     F2 FA 61 FC | 	wrlong	result1, objptr
10c28                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
10c28     16 00 00 FF 
10c2c     08 E4 85 F1 | 	sub	objptr, ##11272
10c30     F2 20 02 FB | 	rdlong	local02, objptr
10c34     33 00 00 FF 
10c38     38 E4 85 F1 | 	sub	objptr, ##26168
10c3c     01 20 16 F2 | 	cmp	local02, #1 wc
10c40     BC 00 90 CD |  if_b	jmp	#LR__1421
10c44     33 00 00 FF 
10c48     38 E4 05 F1 | 	add	objptr, ##26168
10c4c     F2 24 02 FB | 	rdlong	local04, objptr
10c50     33 00 00 FF 
10c54     38 E4 85 F1 | 	sub	objptr, ##26168
10c58     12 23 02 F6 | 	mov	local03, local04
10c5c     04 22 16 F2 | 	cmp	local03, #4 wc
10c60     9C 00 90 3D |  if_ae	jmp	#LR__1421
10c64     47 00 00 FF 
10c68     A4 E5 05 F1 | 	add	objptr, ##36772
10c6c     F2 1E 02 FB | 	rdlong	local01, objptr
10c70     47 00 00 FF 
10c74     A4 E5 85 F1 | 	sub	objptr, ##36772
10c78     0F 27 02 F6 | 	mov	local05, local01
10c7c     01 26 0E F2 | 	cmp	local05, #1 wz
10c80     7C 00 90 5D |  if_ne	jmp	#LR__1421
10c84     04 00 00 FF 
10c88     94 EA 05 F1 | 	add	ptr__dat__, ##2196
10c8c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10c90     04 00 00 FF 
10c94     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
10c98     56 00 00 FF 
10c9c     44 22 06 F6 | 	mov	local03, ##44100
10ca0     0E 24 C6 F9 | 	decod	local04, #14
10ca4     00 26 06 F6 | 	mov	local05, #0
10ca8     03 00 00 FF 
10cac     DE 1E 06 F6 | 	mov	local01, ##1758
10cb0     07 12 06 F6 | 	mov	arg01, #7
10cb4     56 00 00 FF 
10cb8     44 16 06 F6 | 	mov	arg03, ##44100
10cbc     0E 18 C6 F9 | 	decod	arg04, #14
10cc0     00 1A 06 F6 | 	mov	arg05, #0
10cc4     03 00 00 FF 
10cc8     DE 1C 06 F6 | 	mov	arg06, ##1758
10ccc     02 00 00 FF 
10cd0     C0 E4 05 F1 | 	add	objptr, ##1216
10cd4     EC 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10cd8     02 00 00 FF 
10cdc     C0 E4 85 F1 | 	sub	objptr, ##1216
10ce0     0A 12 06 F6 | 	mov	arg01, #10
10ce4     1C 30 B0 FD | 	call	#__system___waitms
10ce8     07 12 06 F6 | 	mov	arg01, #7
10cec     02 00 00 FF 
10cf0     C0 E4 05 F1 | 	add	objptr, ##1216
10cf4     1C 2B B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
10cf8     02 00 00 FF 
10cfc     C0 E4 85 F1 | 	sub	objptr, ##1216
10d00                 | LR__1421
10d00                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
10d00     33 00 00 FF 
10d04     38 E4 05 F1 | 	add	objptr, ##26168
10d08     F2 20 02 FB | 	rdlong	local02, objptr
10d0c     33 00 00 FF 
10d10     38 E4 85 F1 | 	sub	objptr, ##26168
10d14     04 20 16 F2 | 	cmp	local02, #4 wc
10d18     80 00 90 CD |  if_b	jmp	#LR__1422
10d1c     33 00 00 FF 
10d20     38 E4 05 F1 | 	add	objptr, ##26168
10d24     F2 24 02 FB | 	rdlong	local04, objptr
10d28     33 00 00 FF 
10d2c     38 E4 85 F1 | 	sub	objptr, ##26168
10d30     12 23 02 F6 | 	mov	local03, local04
10d34     00 00 40 FF 
10d38     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
10d3c     33 00 00 CF 
10d40     38 E4 05 C1 |  if_b	add	objptr, ##26168
10d44     F2 1E 02 CB |  if_b	rdlong	local01, objptr
10d48     33 00 00 CF 
10d4c     38 E4 85 C1 |  if_b	sub	objptr, ##26168
10d50     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
10d54     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
10d58     40 00 90 3D |  if_ae	jmp	#LR__1422
10d5c     33 00 00 FF 
10d60     38 E4 05 F1 | 	add	objptr, ##26168
10d64     F2 20 02 FB | 	rdlong	local02, objptr
10d68     04 E4 05 F1 | 	add	objptr, #4
10d6c     F2 20 62 FC | 	wrlong	local02, objptr
10d70     16 00 00 FF 
10d74     08 E4 05 F1 | 	add	objptr, ##11272
10d78     F2 02 68 FC | 	wrlong	#1, objptr
10d7c     16 00 00 FF 
10d80     08 E4 85 F1 | 	sub	objptr, ##11272
10d84     F2 20 02 FB | 	rdlong	local02, objptr
10d88     16 00 00 FF 
10d8c     0C E4 05 F1 | 	add	objptr, ##11276
10d90     F2 20 62 FC | 	wrlong	local02, objptr
10d94     49 00 00 FF 
10d98     48 E4 85 F1 | 	sub	objptr, ##37448
10d9c                 | LR__1422
10d9c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
10d9c     33 00 00 FF 
10da0     38 E4 05 F1 | 	add	objptr, ##26168
10da4     F2 20 02 FB | 	rdlong	local02, objptr
10da8     33 00 00 FF 
10dac     38 E4 85 F1 | 	sub	objptr, ##26168
10db0     00 00 40 FF 
10db4     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
10db8     49 00 00 3F 
10dbc     4C E4 05 31 |  if_ae	add	objptr, ##37452
10dc0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
10dc4     08 E4 85 31 |  if_ae	sub	objptr, #8
10dc8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
10dcc     49 00 00 3F 
10dd0     44 E4 85 31 |  if_ae	sub	objptr, ##37444
10dd4                 | ' if key=0 andalso rpt=1 then rptcnt+=1
10dd4     33 00 00 FF 
10dd8     38 E4 05 F1 | 	add	objptr, ##26168
10ddc     F2 20 0A FB | 	rdlong	local02, objptr wz
10de0     33 00 00 FF 
10de4     38 E4 85 F1 | 	sub	objptr, ##26168
10de8     49 00 00 AF 
10dec     44 E4 05 A1 |  if_e	add	objptr, ##37444
10df0     F2 24 02 AB |  if_e	rdlong	local04, objptr
10df4     49 00 00 AF 
10df8     44 E4 85 A1 |  if_e	sub	objptr, ##37444
10dfc     12 23 02 A6 |  if_e	mov	local03, local04
10e00     01 22 0E A2 |  if_e	cmp	local03, #1 wz
10e04     49 00 00 AF 
10e08     4C E4 05 A1 |  if_e	add	objptr, ##37452
10e0c     F2 20 02 AB |  if_e	rdlong	local02, objptr
10e10     01 20 06 A1 |  if_e	add	local02, #1
10e14     F2 20 62 AC |  if_e	wrlong	local02, objptr
10e18     49 00 00 AF 
10e1c     4C E4 85 A1 |  if_e	sub	objptr, ##37452
10e20                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
10e20     33 00 00 FF 
10e24     38 E4 05 F1 | 	add	objptr, ##26168
10e28     F2 20 02 FB | 	rdlong	local02, objptr
10e2c     33 00 00 FF 
10e30     38 E4 85 F1 | 	sub	objptr, ##26168
10e34     00 00 40 FF 
10e38     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
10e3c     44 00 90 3D |  if_ae	jmp	#LR__1424
10e40     49 00 00 FF 
10e44     4C E4 05 F1 | 	add	objptr, ##37452
10e48     F2 20 02 FB | 	rdlong	local02, objptr
10e4c     49 00 00 FF 
10e50     4C E4 85 F1 | 	sub	objptr, ##37452
10e54     19 20 0E F2 | 	cmp	local02, #25 wz
10e58     28 00 90 5D |  if_ne	jmp	#LR__1423
10e5c     33 00 00 FF 
10e60     3C E4 05 F1 | 	add	objptr, ##26172
10e64     F2 20 02 FB | 	rdlong	local02, objptr
10e68     16 00 00 FF 
10e6c     0C E4 05 F1 | 	add	objptr, ##11276
10e70     F2 20 62 FC | 	wrlong	local02, objptr
10e74     04 E4 05 F1 | 	add	objptr, #4
10e78     F2 2A 68 FC | 	wrlong	#21, objptr
10e7c     49 00 00 FF 
10e80     4C E4 85 F1 | 	sub	objptr, ##37452
10e84                 | LR__1423
10e84                 | LR__1424
10e84                 | ' 
10e84                 | ' 
10e84                 | ' if key3<>0 then
10e84     49 00 00 FF 
10e88     48 E4 05 F1 | 	add	objptr, ##37448
10e8c     F2 28 0A FB | 	rdlong	local06, objptr wz
10e90     49 00 00 FF 
10e94     48 E4 85 F1 | 	sub	objptr, ##37448
10e98     54 FD 9F AD |  if_e	jmp	#LR__1420
10e9c                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
10e9c     47 00 00 FF 
10ea0     A4 E5 05 F1 | 	add	objptr, ##36772
10ea4     F2 20 02 FB | 	rdlong	local02, objptr
10ea8     47 00 00 FF 
10eac     A4 E5 85 F1 | 	sub	objptr, ##36772
10eb0     01 20 0E F2 | 	cmp	local02, #1 wz
10eb4     5C 00 90 5D |  if_ne	jmp	#LR__1425
10eb8     01 00 00 FF 
10ebc     00 EA 05 F1 | 	add	ptr__dat__, ##512
10ec0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10ec4     01 00 00 FF 
10ec8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
10ecc     56 00 00 FF 
10ed0     44 22 06 F6 | 	mov	local03, ##44100
10ed4     0E 24 C6 F9 | 	decod	local04, #14
10ed8     03 00 00 FF 
10edc     94 26 06 F6 | 	mov	local05, ##1684
10ee0     01 1E 66 F6 | 	neg	local01, #1
10ee4     07 12 06 F6 | 	mov	arg01, #7
10ee8     56 00 00 FF 
10eec     44 16 06 F6 | 	mov	arg03, ##44100
10ef0     0E 18 C6 F9 | 	decod	arg04, #14
10ef4     03 00 00 FF 
10ef8     94 1A 06 F6 | 	mov	arg05, ##1684
10efc     01 1C 66 F6 | 	neg	arg06, #1
10f00     02 00 00 FF 
10f04     C0 E4 05 F1 | 	add	objptr, ##1216
10f08     B8 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10f0c     02 00 00 FF 
10f10     C0 E4 85 F1 | 	sub	objptr, ##1216
10f14                 | LR__1425
10f14     49 00 00 FF 
10f18     48 E4 05 F1 | 	add	objptr, ##37448
10f1c     F2 12 02 FB | 	rdlong	arg01, objptr
10f20     49 00 00 FF 
10f24     48 E4 85 F1 | 	sub	objptr, ##37448
10f28     74 F8 BF FD | 	call	#_scantochar
10f2c     49 00 00 FF 
10f30     50 E4 05 F1 | 	add	objptr, ##37456
10f34     F2 FA 61 FC | 	wrlong	result1, objptr
10f38                 | '   if leds and 2 = 2 then 
10f38     10 E4 85 F1 | 	sub	objptr, #16
10f3c     F2 20 0A FB | 	rdlong	local02, objptr wz
10f40     49 00 00 FF 
10f44     40 E4 85 F1 | 	sub	objptr, ##37440
10f48     68 01 90 AD |  if_e	jmp	#LR__1433
10f4c                 | '     if key4>96 andalso key4<123 then
10f4c     49 00 00 FF 
10f50     50 E4 05 F1 | 	add	objptr, ##37456
10f54     F2 20 02 FB | 	rdlong	local02, objptr
10f58     49 00 00 FF 
10f5c     50 E4 85 F1 | 	sub	objptr, ##37456
10f60     61 20 56 F2 | 	cmps	local02, #97 wc
10f64     40 00 90 CD |  if_b	jmp	#LR__1426
10f68     49 00 00 FF 
10f6c     50 E4 05 F1 | 	add	objptr, ##37456
10f70     F2 24 02 FB | 	rdlong	local04, objptr
10f74     49 00 00 FF 
10f78     50 E4 85 F1 | 	sub	objptr, ##37456
10f7c     12 23 02 F6 | 	mov	local03, local04
10f80     7B 22 56 F2 | 	cmps	local03, #123 wc
10f84     20 00 90 3D |  if_ae	jmp	#LR__1426
10f88     49 00 00 FF 
10f8c     50 E4 05 F1 | 	add	objptr, ##37456
10f90     F2 20 02 FB | 	rdlong	local02, objptr
10f94     20 20 86 F1 | 	sub	local02, #32
10f98     F2 20 62 FC | 	wrlong	local02, objptr
10f9c     49 00 00 FF 
10fa0     50 E4 85 F1 | 	sub	objptr, ##37456
10fa4     0C 01 90 FD | 	jmp	#LR__1432
10fa8                 | LR__1426
10fa8     49 00 00 FF 
10fac     50 E4 05 F1 | 	add	objptr, ##37456
10fb0     F2 20 02 FB | 	rdlong	local02, objptr
10fb4     49 00 00 FF 
10fb8     50 E4 85 F1 | 	sub	objptr, ##37456
10fbc     41 20 56 F2 | 	cmps	local02, #65 wc
10fc0     40 00 90 CD |  if_b	jmp	#LR__1427
10fc4     49 00 00 FF 
10fc8     50 E4 05 F1 | 	add	objptr, ##37456
10fcc     F2 24 02 FB | 	rdlong	local04, objptr
10fd0     49 00 00 FF 
10fd4     50 E4 85 F1 | 	sub	objptr, ##37456
10fd8     12 23 02 F6 | 	mov	local03, local04
10fdc     5B 22 56 F2 | 	cmps	local03, #91 wc
10fe0     20 00 90 3D |  if_ae	jmp	#LR__1427
10fe4     49 00 00 FF 
10fe8     50 E4 05 F1 | 	add	objptr, ##37456
10fec     F2 20 02 FB | 	rdlong	local02, objptr
10ff0     20 20 06 F1 | 	add	local02, #32
10ff4     F2 20 62 FC | 	wrlong	local02, objptr
10ff8     49 00 00 FF 
10ffc     50 E4 85 F1 | 	sub	objptr, ##37456
11000     B0 00 90 FD | 	jmp	#LR__1431
11004                 | LR__1427
11004     49 00 00 FF 
11008     50 E4 05 F1 | 	add	objptr, ##37456
1100c     F2 20 02 FB | 	rdlong	local02, objptr
11010     49 00 00 FF 
11014     50 E4 85 F1 | 	sub	objptr, ##37456
11018     17 20 56 F2 | 	cmps	local02, #23 wc
1101c     40 00 90 CD |  if_b	jmp	#LR__1428
11020     49 00 00 FF 
11024     50 E4 05 F1 | 	add	objptr, ##37456
11028     F2 24 02 FB | 	rdlong	local04, objptr
1102c     49 00 00 FF 
11030     50 E4 85 F1 | 	sub	objptr, ##37456
11034     12 23 02 F6 | 	mov	local03, local04
11038     20 22 56 F2 | 	cmps	local03, #32 wc
1103c     20 00 90 3D |  if_ae	jmp	#LR__1428
11040     49 00 00 FF 
11044     50 E4 05 F1 | 	add	objptr, ##37456
11048     F2 20 02 FB | 	rdlong	local02, objptr
1104c     09 20 86 F1 | 	sub	local02, #9
11050     F2 20 62 FC | 	wrlong	local02, objptr
11054     49 00 00 FF 
11058     50 E4 85 F1 | 	sub	objptr, ##37456
1105c     54 00 90 FD | 	jmp	#LR__1430
11060                 | LR__1428
11060     49 00 00 FF 
11064     50 E4 05 F1 | 	add	objptr, ##37456
11068     F2 20 02 FB | 	rdlong	local02, objptr
1106c     49 00 00 FF 
11070     50 E4 85 F1 | 	sub	objptr, ##37456
11074     0E 20 56 F2 | 	cmps	local02, #14 wc
11078     38 00 90 CD |  if_b	jmp	#LR__1429
1107c     49 00 00 FF 
11080     50 E4 05 F1 | 	add	objptr, ##37456
11084     F2 24 02 FB | 	rdlong	local04, objptr
11088     49 00 00 FF 
1108c     50 E4 85 F1 | 	sub	objptr, ##37456
11090     12 23 02 F6 | 	mov	local03, local04
11094     17 22 56 F2 | 	cmps	local03, #23 wc
11098     49 00 00 CF 
1109c     50 E4 05 C1 |  if_b	add	objptr, ##37456
110a0     F2 20 02 CB |  if_b	rdlong	local02, objptr
110a4     27 20 06 C1 |  if_b	add	local02, #39
110a8     F2 20 62 CC |  if_b	wrlong	local02, objptr
110ac     49 00 00 CF 
110b0     50 E4 85 C1 |  if_b	sub	objptr, ##37456
110b4                 | LR__1429
110b4                 | LR__1430
110b4                 | LR__1431
110b4                 | LR__1432
110b4                 | LR__1433
110b4                 | '  
110b4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
110b4     49 00 00 FF 
110b8     50 E4 05 F1 | 	add	objptr, ##37456
110bc     F2 20 02 FB | 	rdlong	local02, objptr
110c0     49 00 00 FF 
110c4     50 E4 85 F1 | 	sub	objptr, ##37456
110c8     01 20 56 F2 | 	cmps	local02, #1 wc
110cc     90 00 90 CD |  if_b	jmp	#LR__1434
110d0     49 00 00 FF 
110d4     50 E4 05 F1 | 	add	objptr, ##37456
110d8     F2 24 02 FB | 	rdlong	local04, objptr
110dc     49 00 00 FF 
110e0     50 E4 85 F1 | 	sub	objptr, ##37456
110e4     12 23 02 F6 | 	mov	local03, local04
110e8     7F 22 56 F2 | 	cmps	local03, #127 wc
110ec     38 E4 05 C1 |  if_b	add	objptr, #56
110f0     F2 1E E2 CA |  if_b	rdword	local01, objptr
110f4     38 E4 85 C1 |  if_b	sub	objptr, #56
110f8     0F 27 32 C9 |  if_b	getword	local05, local01, #0
110fc     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
11100     5C 00 90 3D |  if_ae	jmp	#LR__1434
11104     49 00 00 FF 
11108     50 E4 05 F1 | 	add	objptr, ##37456
1110c     F2 12 02 FB | 	rdlong	arg01, objptr
11110     49 00 00 FF 
11114     50 E4 85 F1 | 	sub	objptr, ##37456
11118     E8 4A B0 FD | 	call	#__system__Chr_S
1111c     FD 2A 02 F6 | 	mov	local07, result1
11120     24 00 00 FF 
11124     E0 E5 05 F1 | 	add	objptr, ##18912
11128     F2 12 02 FB | 	rdlong	arg01, objptr
1112c     24 00 00 FF 
11130     E0 E5 85 F1 | 	sub	objptr, ##18912
11134     15 15 02 F6 | 	mov	arg02, local07
11138     18 2A B0 FD | 	call	#__system___string_concat
1113c     24 00 00 FF 
11140     E0 E5 05 F1 | 	add	objptr, ##18912
11144     F2 FA 61 FC | 	wrlong	result1, objptr
11148     24 00 00 FF 
1114c     70 E4 05 F1 | 	add	objptr, ##18544
11150     F2 12 02 FB | 	rdlong	arg01, objptr
11154     49 00 00 FF 
11158     50 E4 85 F1 | 	sub	objptr, ##37456
1115c     58 17 B0 FD | 	call	#_hg010b_spin2_putchar
11160                 | LR__1434
11160                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
11160     49 00 00 FF 
11164     50 E4 05 F1 | 	add	objptr, ##37456
11168     F2 20 02 FB | 	rdlong	local02, objptr
1116c     49 00 00 FF 
11170     50 E4 85 F1 | 	sub	objptr, ##37456
11174     01 20 56 F2 | 	cmps	local02, #1 wc
11178     D0 00 90 CD |  if_b	jmp	#LR__1435
1117c     49 00 00 FF 
11180     50 E4 05 F1 | 	add	objptr, ##37456
11184     F2 24 02 FB | 	rdlong	local04, objptr
11188     49 00 00 FF 
1118c     50 E4 85 F1 | 	sub	objptr, ##37456
11190     12 23 02 F6 | 	mov	local03, local04
11194     7F 22 56 F2 | 	cmps	local03, #127 wc
11198     B0 00 90 3D |  if_ae	jmp	#LR__1435
1119c     38 E4 05 F1 | 	add	objptr, #56
111a0     F2 1E E2 FA | 	rdword	local01, objptr
111a4     38 E4 85 F1 | 	sub	objptr, #56
111a8     0F 27 32 F9 | 	getword	local05, local01, #0
111ac     FE 26 0E F2 | 	cmp	local05, #254 wz
111b0     47 00 00 AF 
111b4     A4 E5 05 A1 |  if_e	add	objptr, ##36772
111b8     F2 2C 02 AB |  if_e	rdlong	local08, objptr
111bc     47 00 00 AF 
111c0     A4 E5 85 A1 |  if_e	sub	objptr, ##36772
111c4     16 2F 02 A6 |  if_e	mov	local09, local08
111c8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
111cc     7C 00 90 5D |  if_ne	jmp	#LR__1435
111d0     04 00 00 FF 
111d4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
111d8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
111dc     04 00 00 FF 
111e0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
111e4     56 00 00 FF 
111e8     44 22 06 F6 | 	mov	local03, ##44100
111ec     0E 24 C6 F9 | 	decod	local04, #14
111f0     00 26 06 F6 | 	mov	local05, #0
111f4     03 00 00 FF 
111f8     DE 1E 06 F6 | 	mov	local01, ##1758
111fc     07 12 06 F6 | 	mov	arg01, #7
11200     56 00 00 FF 
11204     44 16 06 F6 | 	mov	arg03, ##44100
11208     0E 18 C6 F9 | 	decod	arg04, #14
1120c     00 1A 06 F6 | 	mov	arg05, #0
11210     03 00 00 FF 
11214     DE 1C 06 F6 | 	mov	arg06, ##1758
11218     02 00 00 FF 
1121c     C0 E4 05 F1 | 	add	objptr, ##1216
11220     A0 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
11224     02 00 00 FF 
11228     C0 E4 85 F1 | 	sub	objptr, ##1216
1122c     2C 13 06 F6 | 	mov	arg01, #300
11230     D0 2A B0 FD | 	call	#__system___waitms
11234     00 12 06 F6 | 	mov	arg01, #0
11238     02 00 00 FF 
1123c     C0 E4 05 F1 | 	add	objptr, ##1216
11240     D0 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11244     02 00 00 FF 
11248     C0 E4 85 F1 | 	sub	objptr, ##1216
1124c                 | LR__1435
1124c                 | '  
1124c                 | '   'tab
1124c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1124c     49 00 00 FF 
11250     48 E4 05 F1 | 	add	objptr, ##37448
11254     F2 20 02 FB | 	rdlong	local02, objptr
11258     49 00 00 FF 
1125c     48 E4 85 F1 | 	sub	objptr, ##37448
11260     10 21 E2 F8 | 	getbyte	local02, local02, #0
11264     2B 20 0E F2 | 	cmp	local02, #43 wz
11268     B4 00 90 5D |  if_ne	jmp	#LR__1436
1126c     38 E4 05 F1 | 	add	objptr, #56
11270     F2 24 E2 FA | 	rdword	local04, objptr
11274     38 E4 85 F1 | 	sub	objptr, #56
11278     12 23 32 F9 | 	getword	local03, local04, #0
1127c     F0 22 16 F2 | 	cmp	local03, #240 wc
11280     9C 00 90 CD |  if_b	jmp	#LR__1436
11284     47 00 00 FF 
11288     A4 E5 05 F1 | 	add	objptr, ##36772
1128c     F2 1E 02 FB | 	rdlong	local01, objptr
11290     47 00 00 FF 
11294     A4 E5 85 F1 | 	sub	objptr, ##36772
11298     0F 27 02 F6 | 	mov	local05, local01
1129c     01 26 0E F2 | 	cmp	local05, #1 wz
112a0     7C 00 90 5D |  if_ne	jmp	#LR__1436
112a4     04 00 00 FF 
112a8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
112ac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
112b0     04 00 00 FF 
112b4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
112b8     56 00 00 FF 
112bc     44 22 06 F6 | 	mov	local03, ##44100
112c0     0E 24 C6 F9 | 	decod	local04, #14
112c4     00 26 06 F6 | 	mov	local05, #0
112c8     03 00 00 FF 
112cc     DE 1E 06 F6 | 	mov	local01, ##1758
112d0     00 12 06 F6 | 	mov	arg01, #0
112d4     56 00 00 FF 
112d8     44 16 06 F6 | 	mov	arg03, ##44100
112dc     0E 18 C6 F9 | 	decod	arg04, #14
112e0     00 1A 06 F6 | 	mov	arg05, #0
112e4     03 00 00 FF 
112e8     DE 1C 06 F6 | 	mov	arg06, ##1758
112ec     02 00 00 FF 
112f0     C0 E4 05 F1 | 	add	objptr, ##1216
112f4     CC 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
112f8     02 00 00 FF 
112fc     C0 E4 85 F1 | 	sub	objptr, ##1216
11300     2C 13 06 F6 | 	mov	arg01, #300
11304     FC 29 B0 FD | 	call	#__system___waitms
11308     00 12 06 F6 | 	mov	arg01, #0
1130c     02 00 00 FF 
11310     C0 E4 05 F1 | 	add	objptr, ##1216
11314     FC 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11318     02 00 00 FF 
1131c     C0 E4 85 F1 | 	sub	objptr, ##1216
11320                 | LR__1436
11320                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
11320     49 00 00 FF 
11324     48 E4 05 F1 | 	add	objptr, ##37448
11328     F2 20 02 FB | 	rdlong	local02, objptr
1132c     49 00 00 FF 
11330     48 E4 85 F1 | 	sub	objptr, ##37448
11334     10 21 E2 F8 | 	getbyte	local02, local02, #0
11338     2B 20 0E F2 | 	cmp	local02, #43 wz
1133c     AC 00 90 5D |  if_ne	jmp	#LR__1439
11340     38 E4 05 F1 | 	add	objptr, #56
11344     F2 24 E2 FA | 	rdword	local04, objptr
11348     38 E4 85 F1 | 	sub	objptr, #56
1134c     12 23 32 F9 | 	getword	local03, local04, #0
11350     F0 22 16 F2 | 	cmp	local03, #240 wc
11354     94 00 90 3D |  if_ae	jmp	#LR__1439
11358     38 E4 05 F1 | 	add	objptr, #56
1135c     F2 20 E2 FA | 	rdword	local02, objptr
11360     10 23 52 F6 | 	abs	local03, local02 wc
11364     11 23 42 F8 | 	getnib	local03, local03, #0
11368     11 23 82 F6 | 	negc	local03, local03
1136c     11 25 52 F6 | 	abs	local04, local03 wc
11370     01 24 46 F0 | 	shr	local04, #1
11374     12 25 82 F6 | 	negc	local04, local04
11378     49 00 00 FF 
1137c     1C E4 05 F1 | 	add	objptr, ##37404
11380     F2 24 62 FC | 	wrlong	local04, objptr
11384     12 31 02 F6 | 	mov	local10, local04
11388     49 00 00 FF 
1138c     54 E4 85 F1 | 	sub	objptr, ##37460
11390                 | LR__1437
11390     08 30 56 F2 | 	cmps	local10, #8 wc
11394     54 00 90 3D |  if_ae	jmp	#LR__1438
11398     24 00 00 FF 
1139c     E0 E5 05 F1 | 	add	objptr, ##18912
113a0     F2 12 02 FB | 	rdlong	arg01, objptr
113a4     24 00 00 FF 
113a8     E0 E5 85 F1 | 	sub	objptr, ##18912
113ac     1B 01 00 FF 
113b0     0B 25 06 F6 | 	mov	local04, ##@LR__4308
113b4     12 15 02 F6 | 	mov	arg02, local04
113b8     98 27 B0 FD | 	call	#__system___string_concat
113bc     24 00 00 FF 
113c0     E0 E5 05 F1 | 	add	objptr, ##18912
113c4     F2 FA 61 FC | 	wrlong	result1, objptr
113c8     24 00 00 FF 
113cc     E0 E5 85 F1 | 	sub	objptr, ##18912
113d0     1B 01 00 FF 
113d4     0D 13 06 F6 | 	mov	arg01, ##@LR__4309
113d8     F8 16 B0 FD | 	call	#_hg010b_spin2_write
113dc     18 23 02 F6 | 	mov	local03, local10
113e0     01 22 06 F1 | 	add	local03, #1
113e4     11 31 02 F6 | 	mov	local10, local03
113e8     A4 FF 9F FD | 	jmp	#LR__1437
113ec                 | LR__1438
113ec                 | LR__1439
113ec                 | '  
113ec                 | '   'backspace
113ec                 | '   if (key3 and 255) = 42 then 
113ec     49 00 00 FF 
113f0     48 E4 05 F1 | 	add	objptr, ##37448
113f4     F2 20 02 FB | 	rdlong	local02, objptr
113f8     49 00 00 FF 
113fc     48 E4 85 F1 | 	sub	objptr, ##37448
11400     10 21 E2 F8 | 	getbyte	local02, local02, #0
11404     2A 20 0E F2 | 	cmp	local02, #42 wz
11408     D4 00 90 5D |  if_ne	jmp	#LR__1444
1140c                 | '       if v.cursor_x>4 then 
1140c     38 E4 05 F1 | 	add	objptr, #56
11410     F2 20 E2 FA | 	rdword	local02, objptr
11414     38 E4 85 F1 | 	sub	objptr, #56
11418     05 20 16 F2 | 	cmp	local02, #5 wc
1141c     9C 00 90 CD |  if_b	jmp	#LR__1442
11420     24 00 00 FF 
11424     E0 E5 05 F1 | 	add	objptr, ##18912
11428     F2 26 02 FB | 	rdlong	local05, objptr
1142c     24 00 00 FF 
11430     E0 E5 85 F1 | 	sub	objptr, ##18912
11434     13 13 02 F6 | 	mov	arg01, local05
11438     09 33 02 F6 | 	mov	local11, arg01
1143c     97 06 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
11440                 | LR__1440
11440     19 FB C9 FA | 	rdbyte	result1, local11 wz
11444     01 32 06 51 |  if_ne	add	local11, #1
11448     F4 FF 9F 5D |  if_ne	jmp	#LR__1440
1144c                 | LR__1441
1144c     09 33 82 F1 | 	sub	local11, arg01
11450     19 15 02 F6 | 	mov	arg02, local11
11454     01 14 86 F1 | 	sub	arg02, #1
11458     13 13 02 F6 | 	mov	arg01, local05
1145c     E0 45 B0 FD | 	call	#__system__Left_S
11460     24 00 00 FF 
11464     E0 E5 05 F1 | 	add	objptr, ##18912
11468     F2 FA 61 FC | 	wrlong	result1, objptr
1146c     24 00 00 FF 
11470     A8 E5 85 F1 | 	sub	objptr, ##18856
11474     F2 12 E2 FA | 	rdword	arg01, objptr
11478     02 12 86 F1 | 	sub	arg01, #2
1147c     02 E4 05 F1 | 	add	objptr, #2
11480     F2 14 C2 FA | 	rdbyte	arg02, objptr
11484     3A E4 85 F1 | 	sub	objptr, #58
11488     E4 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1148c     20 12 06 F6 | 	mov	arg01, #32
11490     24 14 B0 FD | 	call	#_hg010b_spin2_putchar
11494     38 E4 05 F1 | 	add	objptr, #56
11498     F2 12 E2 FA | 	rdword	arg01, objptr
1149c     02 12 86 F1 | 	sub	arg01, #2
114a0     02 E4 05 F1 | 	add	objptr, #2
114a4     F2 24 C2 FA | 	rdbyte	local04, objptr
114a8     3A E4 85 F1 | 	sub	objptr, #58
114ac     12 23 E2 F8 | 	getbyte	local03, local04, #0
114b0     11 15 02 F6 | 	mov	arg02, local03
114b4     B8 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
114b8     24 00 90 FD | 	jmp	#LR__1443
114bc                 | LR__1442
114bc     1B 01 00 FF 
114c0     0F 21 06 F6 | 	mov	local02, ##@LR__4310
114c4     24 00 00 FF 
114c8     E0 E5 05 F1 | 	add	objptr, ##18912
114cc     F2 20 62 FC | 	wrlong	local02, objptr
114d0     24 00 00 FF 
114d4     A8 E5 85 F1 | 	sub	objptr, ##18856
114d8     F2 08 58 FC | 	wrword	#4, objptr
114dc     38 E4 85 F1 | 	sub	objptr, #56
114e0                 | LR__1443
114e0                 | LR__1444
114e0                 | '    
114e0                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
114e0                 | '  
114e0                 | '   if key4=key_enter then 
114e0     49 00 00 FF 
114e4     50 E4 05 F1 | 	add	objptr, ##37456
114e8     F2 28 02 FB | 	rdlong	local06, objptr
114ec     49 00 00 FF 
114f0     50 E4 85 F1 | 	sub	objptr, ##37456
114f4     8D 28 0E F2 | 	cmp	local06, #141 wz
114f8     50 00 90 5D |  if_ne	jmp	#LR__1445
114fc     34 17 B0 FD | 	call	#_hg010b_spin2_crlf
11500     18 F5 BE FD | 	call	#_interpret
11504     1B 01 00 FF 
11508     10 21 06 F6 | 	mov	local02, ##@LR__4311
1150c     24 00 00 FF 
11510     E0 E5 05 F1 | 	add	objptr, ##18912
11514     F2 20 62 FC | 	wrlong	local02, objptr
11518     1A FA 61 FD | 	getct	result1
1151c     24 00 00 FF 
11520     78 E4 05 F1 | 	add	objptr, ##18552
11524     F2 24 02 FB | 	rdlong	local04, objptr
11528     12 23 02 F6 | 	mov	local03, local04
1152c     11 FB 81 F1 | 	sub	result1, local03
11530     F2 FA 61 FC | 	wrlong	result1, objptr
11534     14 E4 85 F1 | 	sub	objptr, #20
11538     F2 00 68 FC | 	wrlong	#0, objptr
1153c     08 E4 05 F1 | 	add	objptr, #8
11540     F2 00 68 FC | 	wrlong	#0, objptr
11544     49 00 00 FF 
11548     4C E4 85 F1 | 	sub	objptr, ##37452
1154c                 | LR__1445
1154c     49 00 00 FF 
11550     48 E4 05 F1 | 	add	objptr, ##37448
11554     F2 00 68 FC | 	wrlong	#0, objptr
11558     49 00 00 FF 
1155c     48 E4 85 F1 | 	sub	objptr, ##37448
11560     8C F6 9F FD | 	jmp	#LR__1420
11564     A7 F0 03 F6 | 	mov	ptra, fp
11568     B2 00 A0 FD | 	call	#popregs_
1156c                 | _program_ret
1156c     2D 00 64 FD | 	ret
11570                 | 
11570                 | ' '' this is not a main program.
11570                 | ' 
11570                 | ' '****************************************************************************************************************
11570                 | ' '                                                                                                             	*
11570                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
11570                 | ' '                                                                                                            	*
11570                 | ' ' mode - mode #, see below											*
11570                 | ' ' base - HDMI base pin												*
11570                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
11570                 | ' '														*
11570                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
11570                 | ' '' set bit #15 for custom timings														*
11570                 | ' '' p - 1 - psram, 0 - hub											*
11570                 | ' '' t - 1 - graphics, 0 - text											*
11570                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
11570                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
11570                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
11570                 | ' '														*
11570                 | ' '****************************************************************************************************************
11570                 | ' 
11570                 | ' pub start(base,mb):result |i
11570                 | _hg010b_spin2_start
11570                 | ' 
11570                 | ' '--------------------------- initialize pointers and variables
11570                 | ' 
11570                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
11570     30 E4 05 F1 | 	add	objptr, #48
11574     F2 FA 01 F6 | 	mov	result1, objptr
11578     28 E4 85 F1 | 	sub	objptr, #40
1157c     F2 FA 61 FC | 	wrlong	result1, objptr
11580                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
11580                 | ' hdmibase:=base							' HDMI base pin, 8*n
11580     18 E4 05 F1 | 	add	objptr, #24
11584     F2 12 62 FC | 	wrlong	arg01, objptr
11588                 | ' mailbox_ptr:=mb		
11588     04 E4 05 F1 | 	add	objptr, #4
1158c     F2 14 62 FC | 	wrlong	arg02, objptr
11590                 | ' mailbox0:=mb				' PSRAM mailbox pointer
11590     C1 E5 05 F1 | 	add	objptr, #449
11594     F2 14 62 FC | 	wrlong	arg02, objptr
11598                 | ' sprite_ptr:=@spr1ptr
11598     D8 E4 85 F1 | 	sub	objptr, #216
1159c     F2 FA 01 F6 | 	mov	result1, objptr
115a0     E5 E4 85 F1 | 	sub	objptr, #229
115a4     F2 FA 61 FC | 	wrlong	result1, objptr
115a8                 | ' 
115a8                 | ' 		'
115a8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
115a8     E5 E4 05 F1 | 	add	objptr, #229
115ac     F2 FA 01 FB | 	rdlong	result1, objptr
115b0     D0 FA 05 F1 | 	add	result1, #208
115b4     FD 10 58 FC | 	wrword	#8, result1
115b8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
115b8     F2 16 02 FB | 	rdlong	arg03, objptr
115bc     D2 16 06 F1 | 	add	arg03, #210
115c0     0B 21 58 FC | 	wrword	#16, arg03
115c4                 | ' leading_spaces:=0				'
115c4     A5 E5 05 F1 | 	add	objptr, #421
115c8     F2 00 68 FC | 	wrlong	#0, objptr
115cc                 | ' 
115cc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
115cc     99 E4 85 F1 | 	sub	objptr, #153
115d0     00 00 A0 FF 
115d4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
115d8                 | ' emptydl[1]:=0
115d8     04 E4 05 F1 | 	add	objptr, #4
115dc     F2 00 68 FC | 	wrlong	#0, objptr
115e0                 | ' 
115e0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
115e0                 | ' 
115e0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
115e0     28 E5 85 F1 | 	sub	objptr, #296
115e4     F2 02 68 FC | 	wrlong	#1, objptr
115e8                 | ' if s_debug<>0
115e8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
115e8     20 00 80 FF 
115ec     F2 00 68 FC | 	wrlong	##16384, objptr
115f0     F5 E4 85 F1 | 	sub	objptr, #245
115f4                 | ' setmode()							' set the mode, see below
115f4     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
115f8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
115f8     45 E4 05 F1 | 	add	objptr, #69
115fc     F2 FA 01 F6 | 	mov	result1, objptr
11600     35 E4 85 F1 | 	sub	objptr, #53
11604     F2 FA 61 FC | 	wrlong	result1, objptr
11608                 | ' cursor_ptr:=@cursor_x						
11608     28 E4 05 F1 | 	add	objptr, #40
1160c     F2 16 02 F6 | 	mov	arg03, objptr
11610     2C E4 85 F1 | 	sub	objptr, #44
11614     F2 16 62 FC | 	wrlong	arg03, objptr
11618                 | ' fontnum:=0  							' start with a PC type font 
11618     55 E4 05 F1 | 	add	objptr, #85
1161c     F2 00 68 FC | 	wrlong	#0, objptr
11620                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
11620     1C E4 05 F1 | 	add	objptr, #28
11624     F2 12 02 F6 | 	mov	arg01, objptr
11628     7D E4 85 F1 | 	sub	objptr, #125
1162c     10 00 00 FF 
11630     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
11634     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
11638     10 00 00 FF 
1163c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
11640     10 16 06 F6 | 	mov	arg03, #16
11644     D0 23 B0 FD | 	call	#__system____builtin_memmove
11648                 | ' leading_spaces:=0
11648     01 00 00 FF 
1164c     B2 E4 05 F1 | 	add	objptr, ##690
11650     F2 00 68 FC | 	wrlong	#0, objptr
11654     01 00 00 FF 
11658     B2 E4 85 F1 | 	sub	objptr, ##690
1165c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1165c                 | ' 
1165c                 | ' initcursor(154)
1165c     9A 12 06 F6 | 	mov	arg01, #154
11660     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
11664                 | ' 
11664                 | ' '---------------------------- start the cog
11664                 | ' 
11664                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
11664     10 00 00 FF 
11668     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1166c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
11670     10 00 00 FF 
11674     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
11678     10 E4 05 F1 | 	add	objptr, #16
1167c     10 FA 05 F6 | 	mov	result1, #16
11680     28 E4 61 FD | 	setq	objptr
11684     0A FB F1 FC | 	coginit	result1, arg02 wc
11688     01 FA 65 C6 |  if_b	neg	result1, #1
1168c     1C E4 05 F1 | 	add	objptr, #28
11690     F2 FA 61 FC | 	wrlong	result1, objptr
11694     2C E4 85 F1 | 	sub	objptr, #44
11698                 | ' waitms(40)							' wait for stabilize
11698     28 12 06 F6 | 	mov	arg01, #40
1169c     64 26 B0 FD | 	call	#__system___waitms
116a0                 | ' return cog							' return the driver's cog #
116a0     2C E4 05 F1 | 	add	objptr, #44
116a4     F2 FA 01 FB | 	rdlong	result1, objptr
116a8     2C E4 85 F1 | 	sub	objptr, #44
116ac                 | _hg010b_spin2_start_ret
116ac     2D 00 64 FD | 	ret
116b0                 | 
116b0                 | ' 
116b0                 | ' 
116b0                 | ' '**************************************************************************************************************** 
116b0                 | ' '                                                                                                             	*
116b0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
116b0                 | ' '  Mode number - see start() above or bits below								*
116b0                 | ' '                                                                                                             	*
116b0                 | ' '****************************************************************************************************************
116b0                 | ' 
116b0                 | ' '---------------------------- initialize a cursor (MSDOS type)
116b0                 | ' pub initcursor(color) |i
116b0                 | _hg010b_spin2_initcursor
116b0     03 4A 05 F6 | 	mov	COUNT_, #3
116b4     A8 00 A0 FD | 	call	#pushregs_
116b8     09 1F 02 F6 | 	mov	local01, arg01
116bc                 | ' 
116bc                 | ' cursor_x:=0							' place the cursor at 0:0
116bc     38 E4 05 F1 | 	add	objptr, #56
116c0     F2 00 58 FC | 	wrword	#0, objptr
116c4                 | ' cursor_y:=0
116c4     02 E4 05 F1 | 	add	objptr, #2
116c8     F2 00 48 FC | 	wrbyte	#0, objptr
116cc                 | ' repeat i from 0 to 111
116cc     00 20 06 F6 | 	mov	local02, #0
116d0     F8 E5 05 F1 | 	add	objptr, #504
116d4     97 1A 48 FB | 	callpa	#(@LR__1452-@LR__1450)>>2,fcache_load_ptr_
116d8                 | LR__1450
116d8                 | '   cursor[i]:=0
116d8     10 23 02 F6 | 	mov	local03, local02
116dc     F2 22 02 F1 | 	add	local03, objptr
116e0     11 01 48 FC | 	wrbyte	#0, local03
116e4     01 20 06 F1 | 	add	local02, #1
116e8     70 20 56 F2 | 	cmps	local02, #112 wc
116ec     E8 FF 9F CD |  if_b	jmp	#LR__1450
116f0                 | ' repeat i from 112 to 127
116f0     70 20 06 F6 | 	mov	local02, #112
116f4                 | LR__1451
116f4                 | '   cursor[i]:=color  
116f4     10 23 02 F6 | 	mov	local03, local02
116f8     F2 22 02 F1 | 	add	local03, objptr
116fc     11 1F 42 FC | 	wrbyte	local01, local03
11700     01 20 06 F1 | 	add	local02, #1
11704     80 20 16 F2 | 	cmp	local02, #128 wc
11708     E8 FF 9F CD |  if_b	jmp	#LR__1451
1170c                 | LR__1452
1170c                 | ' 'repeat i from 0 to 127
1170c                 | ' '  if ((i/8)//2)
1170c                 | ' '    cursor[i]:=15
1170c                 | ' '  else
1170c                 | ' '    cursor[i]:=0
1170c                 | ' '  if i>=120    
1170c                 | ' '    cursor[i]:=40
1170c                 | ' setspriteptr(17,@cursor)
1170c     F2 14 02 F6 | 	mov	arg02, objptr
11710     01 00 00 FF 
11714     32 E4 85 F1 | 	sub	objptr, ##562
11718     11 12 06 F6 | 	mov	arg01, #17
1171c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
11720                 | ' setspritesize(17,8,16)
11720     11 12 06 F6 | 	mov	arg01, #17
11724     08 14 06 F6 | 	mov	arg02, #8
11728     10 16 06 F6 | 	mov	arg03, #16
1172c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
11730                 | ' setspritepos(17,0,0)
11730     11 12 06 F6 | 	mov	arg01, #17
11734     00 14 06 F6 | 	mov	arg02, #0
11738     00 16 06 F6 | 	mov	arg03, #0
1173c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
11740     A7 F0 03 F6 | 	mov	ptra, fp
11744     B2 00 A0 FD | 	call	#popregs_
11748                 | _hg010b_spin2_initcursor_ret
11748     2D 00 64 FD | 	ret
1174c                 | 
1174c                 | ' 
1174c                 | '  
1174c                 | ' pub setcursorcolor(color) |i
1174c                 | _hg010b_spin2_setcursorcolor
1174c                 | ' 
1174c                 | ' 
1174c                 | ' repeat i from 0 to 111
1174c     00 00 06 F6 | 	mov	_var01, #0
11750     01 00 00 FF 
11754     32 E4 05 F1 | 	add	objptr, ##562
11758     97 1A 48 FB | 	callpa	#(@LR__1462-@LR__1460)>>2,fcache_load_ptr_
1175c                 | LR__1460
1175c                 | '   cursor[i]:=0
1175c     00 03 02 F6 | 	mov	_var02, _var01
11760     F2 02 02 F1 | 	add	_var02, objptr
11764     01 01 48 FC | 	wrbyte	#0, _var02
11768     01 00 06 F1 | 	add	_var01, #1
1176c     70 00 56 F2 | 	cmps	_var01, #112 wc
11770     E8 FF 9F CD |  if_b	jmp	#LR__1460
11774                 | ' repeat i from 112 to 127
11774     70 00 06 F6 | 	mov	_var01, #112
11778                 | LR__1461
11778                 | '   cursor[i]:=color  
11778     00 03 02 F6 | 	mov	_var02, _var01
1177c     F2 02 02 F1 | 	add	_var02, objptr
11780     01 13 42 FC | 	wrbyte	arg01, _var02
11784     01 00 06 F1 | 	add	_var01, #1
11788     80 00 16 F2 | 	cmp	_var01, #128 wc
1178c     E8 FF 9F CD |  if_b	jmp	#LR__1461
11790                 | LR__1462
11790     01 00 00 FF 
11794     32 E4 85 F1 | 	sub	objptr, ##562
11798                 | _hg010b_spin2_setcursorcolor_ret
11798     2D 00 64 FD | 	ret
1179c                 | 
1179c                 | '  
1179c                 | ' 
1179c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1179c                 | _hg010b_spin2_setmode
1179c     02 4A 05 F6 | 	mov	COUNT_, #2
117a0     A8 00 A0 FD | 	call	#pushregs_
117a4                 | ' 
117a4                 | ' 
117a4                 | ' dl_ptr:=@emptydl[0]
117a4     01 00 00 FF 
117a8     19 E4 05 F1 | 	add	objptr, ##537
117ac     F2 60 02 F6 | 	mov	muldivb_, objptr
117b0     FD E5 85 F1 | 	sub	objptr, #509
117b4     F2 60 62 FC | 	wrlong	muldivb_, objptr
117b8                 | ' 
117b8                 | ' if cog>0 
117b8     10 E4 05 F1 | 	add	objptr, #16
117bc     F2 60 02 FB | 	rdlong	muldivb_, objptr
117c0     2C E4 85 F1 | 	sub	objptr, #44
117c4     01 60 56 F2 | 	cmps	muldivb_, #1 wc
117c8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
117c8     01 12 06 36 |  if_ae	mov	arg01, #1
117cc     D8 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
117d0                 | ' xres:=1024
117d0     01 00 00 FF 
117d4     22 E4 05 F1 | 	add	objptr, ##546
117d8     02 00 80 FF 
117dc     F2 00 68 FC | 	wrlong	##1024, objptr
117e0                 | ' yres:=576  
117e0     04 E4 05 F1 | 	add	objptr, #4
117e4     01 00 80 FF 
117e8     F2 80 68 FC | 	wrlong	##576, objptr
117ec                 | ' ppl:=(timings[3])
117ec     10 00 00 FF 
117f0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
117f4     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
117f8     51 E5 85 F1 | 	sub	objptr, #337
117fc     F2 60 62 FC | 	wrlong	muldivb_, objptr
11800                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
11800     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
11804     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
11808     01 1E 66 F0 | 	shl	local01, #1
1180c     80 E4 85 F1 | 	sub	objptr, #128
11810     F2 1E 62 FC | 	wrlong	local01, objptr
11814                 | ' cpl1:=cpl '' todo remove
11814     04 E4 05 F1 | 	add	objptr, #4
11818     F2 1E 62 FC | 	wrlong	local01, objptr
1181c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1181c     02 00 00 FF 
11820     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
11824     41 E4 85 F1 | 	sub	objptr, #65
11828     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1182c                 | ' repeat i from 0 to 3
1182c     00 20 06 F6 | 	mov	local02, #0
11830     02 00 00 FF 
11834     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
11838     08 E4 05 F1 | 	add	objptr, #8
1183c     97 20 48 FB | 	callpa	#(@LR__1471-@LR__1470)>>2,fcache_load_ptr_
11840                 | LR__1470
11840                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
11840     10 1F 02 F6 | 	mov	local01, local02
11844     02 1E 66 F0 | 	shl	local01, #2
11848     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1184c     F2 60 02 FB | 	rdlong	muldivb_, objptr
11850     11 60 66 F0 | 	shl	muldivb_, #17
11854     0F 1F 02 FB | 	rdlong	local01, local01
11858     30 1F 02 F1 | 	add	local01, muldivb_
1185c     80 40 38 FF 
11860     00 1E 06 F1 | 	add	local01, ##1887502336
11864     10 61 02 F6 | 	mov	muldivb_, local02
11868     02 60 66 F0 | 	shl	muldivb_, #2
1186c     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
11870     30 1F 62 FC | 	wrlong	local01, muldivb_
11874     01 20 06 F1 | 	add	local02, #1
11878     04 20 56 F2 | 	cmps	local02, #4 wc
1187c     C0 FF 9F CD |  if_b	jmp	#LR__1470
11880                 | LR__1471
11880     20 E4 85 F1 | 	sub	objptr, #32
11884                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
11884     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
11888     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1188c     14 1E 66 FC | 	wrlong	local01, #20
11890                 | ' hubset(timings[10])
11890     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
11894     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
11898     10 00 00 FF 
1189c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
118a0     00 12 62 FD | 	hubset	arg01
118a4                 | ' waitms(1)                                                   	' wait for stabilization
118a4     01 12 06 F6 | 	mov	arg01, #1
118a8     58 24 B0 FD | 	call	#__system___waitms
118ac     10 00 00 FF 
118b0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
118b4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
118b8     5D E4 05 F1 | 	add	objptr, #93
118bc     F2 20 62 FC | 	wrlong	local02, objptr
118c0     10 1F 52 F6 | 	abs	local01, local02 wc
118c4     04 1E 46 F0 | 	shr	local01, #4
118c8     0F 1F 82 F6 | 	negc	local01, local01
118cc     9C E4 05 F1 | 	add	objptr, #156
118d0     F2 1E 62 FC | 	wrlong	local01, objptr
118d4     A4 E4 85 F1 | 	sub	objptr, #164
118d8     F2 20 02 FB | 	rdlong	local02, objptr
118dc     08 E4 05 F1 | 	add	objptr, #8
118e0     F2 1E 02 FB | 	rdlong	local01, objptr
118e4     0F 21 02 FD | 	qmul	local02, local01
118e8                 | ' lines:=timings[11]
118e8                 | ' t_lines:=lines/16
118e8                 | ' buflen:=cpl*lines						' framebuffer length in longs
118e8     29 E4 85 F1 | 	sub	objptr, #41
118ec                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
118ec     19 1E C6 F9 | 	decod	local01, #25
118f0                 | ' mode_ptr:=@timings						' set pointers to timings
118f0     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
118f4                 | ' graphmode:=1024+512+192+48							' det global variable
118f4                 | ' makedl(graphmode)							' make a DL for the mode
118f4     03 00 00 FF 
118f8     F0 12 06 F6 | 	mov	arg01, ##1776
118fc     18 20 62 FD | 	getqx	local02
11900     F2 20 62 FC | 	wrlong	local02, objptr
11904     34 E4 85 F1 | 	sub	objptr, #52
11908     02 20 66 F0 | 	shl	local02, #2
1190c     10 1F 82 F1 | 	sub	local01, local02
11910     F2 1E 62 FC | 	wrlong	local01, objptr
11914     14 E4 05 F1 | 	add	objptr, #20
11918     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1191c     79 E4 05 F1 | 	add	objptr, #121
11920     03 00 80 FF 
11924     F2 E0 69 FC | 	wrlong	##1776, objptr
11928     8D E4 85 F1 | 	sub	objptr, #141
1192c     10 00 00 FF 
11930     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
11934     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
11938                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
11938     F2 1E 02 FB | 	rdlong	local01, objptr
1193c     D9 E4 05 F1 | 	add	objptr, #217
11940     F2 1E 62 FC | 	wrlong	local01, objptr
11944                 | ' s_font_ptr:=font_ptr
11944     D5 E4 85 F1 | 	sub	objptr, #213
11948     F2 1E 02 FB | 	rdlong	local01, objptr
1194c     D9 E4 05 F1 | 	add	objptr, #217
11950     F2 1E 62 FC | 	wrlong	local01, objptr
11954                 | ' s_lines:=lines
11954     80 E4 85 F1 | 	sub	objptr, #128
11958     F2 1E 02 FB | 	rdlong	local01, objptr
1195c     84 E4 05 F1 | 	add	objptr, #132
11960     F2 1E 62 FC | 	wrlong	local01, objptr
11964                 | ' s_buflen:=buflen
11964     AD E4 85 F1 | 	sub	objptr, #173
11968     F2 1E 02 FB | 	rdlong	local01, objptr
1196c     B5 E4 05 F1 | 	add	objptr, #181
11970     F2 1E 62 FC | 	wrlong	local01, objptr
11974                 | ' s_cpl:=cpl
11974     94 E4 85 F1 | 	sub	objptr, #148
11978     F2 1E 02 FB | 	rdlong	local01, objptr
1197c     90 E4 05 F1 | 	add	objptr, #144
11980     F2 1E 62 FC | 	wrlong	local01, objptr
11984                 | ' s_cpl1:=cpl
11984     90 E4 85 F1 | 	sub	objptr, #144
11988     F2 1E 02 FB | 	rdlong	local01, objptr
1198c     98 E4 05 F1 | 	add	objptr, #152
11990     F2 1E 62 FC | 	wrlong	local01, objptr
11994                 | ' st_lines:=t_lines
11994     0C E4 05 F1 | 	add	objptr, #12
11998     F2 1E 02 FB | 	rdlong	local01, objptr
1199c     04 E4 05 F1 | 	add	objptr, #4
119a0     F2 1E 62 FC | 	wrlong	local01, objptr
119a4                 | ' ppl:=ppl/xzoom  
119a4     28 E4 85 F1 | 	sub	objptr, #40
119a8     F2 5E 02 FB | 	rdlong	muldiva_, objptr
119ac     2C E4 05 F1 | 	add	objptr, #44
119b0     F2 60 02 FB | 	rdlong	muldivb_, objptr
119b4     01 E5 85 F1 | 	sub	objptr, #257
119b8     BA 00 A0 FD | 	call	#divide_
119bc     D5 E4 05 F1 | 	add	objptr, #213
119c0     F2 60 62 FC | 	wrlong	muldivb_, objptr
119c4                 | ' s_ppl:=ppl
119c4     1C E4 05 F1 | 	add	objptr, #28
119c8     F2 60 62 FC | 	wrlong	muldivb_, objptr
119cc     F1 E4 85 F1 | 	sub	objptr, #241
119d0                 | ' waitms(20)							' wait 
119d0     14 12 06 F6 | 	mov	arg01, #20
119d4     2C 23 B0 FD | 	call	#__system___waitms
119d8     A7 F0 03 F6 | 	mov	ptra, fp
119dc     B2 00 A0 FD | 	call	#popregs_
119e0                 | _hg010b_spin2_setmode_ret
119e0     2D 00 64 FD | 	ret
119e4                 | 
119e4                 | ' 
119e4                 | ' 
119e4                 | ' '****************************************************************************************************************
119e4                 | ' '                                                                                                             	*
119e4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
119e4                 | ' '                                                                                                             	*
119e4                 | ' '****************************************************************************************************************
119e4                 | ' 
119e4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
119e4                 | _hg010b_spin2_makedl
119e4                 | ' 
119e4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
119e4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
119e4                 | ' repeat i from 0 to 11                                                           ' clear DL
119e4     00 00 06 F6 | 	mov	_var01, #0
119e8     E9 E5 05 F1 | 	add	objptr, #489
119ec     97 0E 48 FB | 	callpa	#(@LR__1481-@LR__1480)>>2,fcache_load_ptr_
119f0                 | LR__1480
119f0                 | '   displaylist[i]:=0 
119f0     00 03 02 F6 | 	mov	_var02, _var01
119f4     02 02 66 F0 | 	shl	_var02, #2
119f8     F2 02 02 F1 | 	add	_var02, objptr
119fc     01 01 68 FC | 	wrlong	#0, _var02
11a00     01 00 06 F1 | 	add	_var01, #1
11a04     0C 00 56 F2 | 	cmps	_var01, #12 wc
11a08     E4 FF 9F CD |  if_b	jmp	#LR__1480
11a0c                 | LR__1481
11a0c                 | '                         ' 
11a0c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
11a0c     8C E5 85 F1 | 	sub	objptr, #396
11a10     F2 02 02 FB | 	rdlong	_var02, objptr
11a14     14 02 66 F0 | 	shl	_var02, #20
11a18     01 02 06 F1 | 	add	_var02, #1
11a1c     04 E4 85 F1 | 	sub	objptr, #4
11a20     F2 00 02 FB | 	rdlong	_var01, objptr
11a24     02 00 66 F0 | 	shl	_var01, #2
11a28     04 00 66 F0 | 	shl	_var01, #4
11a2c     00 03 02 F1 | 	add	_var02, _var01
11a30     90 E5 05 F1 | 	add	objptr, #400
11a34     F2 02 62 FC | 	wrlong	_var02, objptr
11a38     E9 E5 85 F1 | 	sub	objptr, #489
11a3c                 | ' displaylist[1]:=buf_ptr<<4+%10  
11a3c     F2 02 02 FB | 	rdlong	_var02, objptr
11a40     04 02 66 F0 | 	shl	_var02, #4
11a44     02 02 06 F1 | 	add	_var02, #2
11a48     ED E5 05 F1 | 	add	objptr, #493
11a4c     F2 02 62 FC | 	wrlong	_var02, objptr
11a50                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
11a50     04 E4 85 F1 | 	sub	objptr, #4
11a54     F2 02 02 F6 | 	mov	_var02, objptr
11a58     CD E5 85 F1 | 	sub	objptr, #461
11a5c     F2 02 62 FC | 	wrlong	_var02, objptr
11a60     1C E4 85 F1 | 	sub	objptr, #28
11a64                 | _hg010b_spin2_makedl_ret
11a64     2D 00 64 FD | 	ret
11a68                 | 
11a68                 | ' 
11a68                 | ' 
11a68                 | ' '****************************************************************************************************************
11a68                 | ' '                                                                        					*
11a68                 | ' '  Graphic primitives                                                    					*
11a68                 | ' '                                                                        					*
11a68                 | ' '****************************************************************************************************************
11a68                 | ' 
11a68                 | ' pub setspriteptr(num,ptr)
11a68                 | _hg010b_spin2_setspriteptr
11a68                 | ' long[@spr1ptr+12*num]:=ptr
11a68     0D E5 05 F1 | 	add	objptr, #269
11a6c     F2 00 02 F6 | 	mov	_var01, objptr
11a70     09 03 02 F6 | 	mov	_var02, arg01
11a74     01 02 66 F0 | 	shl	_var02, #1
11a78     09 03 02 F1 | 	add	_var02, arg01
11a7c     02 02 66 F0 | 	shl	_var02, #2
11a80     01 01 02 F1 | 	add	_var01, _var02
11a84     00 15 62 FC | 	wrlong	arg02, _var01
11a88     0D E5 85 F1 | 	sub	objptr, #269
11a8c                 | _hg010b_spin2_setspriteptr_ret
11a8c     2D 00 64 FD | 	ret
11a90                 | 
11a90                 | ' 
11a90                 | ' pub setspritepos(num,x,y)
11a90                 | _hg010b_spin2_setspritepos
11a90                 | ' word[@spr1ptr+12*num+4]:=x
11a90     0D E5 05 F1 | 	add	objptr, #269
11a94     F2 00 02 F6 | 	mov	_var01, objptr
11a98     09 03 02 F6 | 	mov	_var02, arg01
11a9c     01 02 66 F0 | 	shl	_var02, #1
11aa0     09 03 02 F1 | 	add	_var02, arg01
11aa4     02 02 66 F0 | 	shl	_var02, #2
11aa8     01 01 02 F1 | 	add	_var01, _var02
11aac     04 00 06 F1 | 	add	_var01, #4
11ab0     00 15 52 FC | 	wrword	arg02, _var01
11ab4                 | ' word[@spr1ptr+12*num+6]:=y
11ab4     F2 00 02 F6 | 	mov	_var01, objptr
11ab8     09 03 02 F6 | 	mov	_var02, arg01
11abc     01 02 66 F0 | 	shl	_var02, #1
11ac0     09 03 02 F1 | 	add	_var02, arg01
11ac4     02 02 66 F0 | 	shl	_var02, #2
11ac8     01 01 02 F1 | 	add	_var01, _var02
11acc     06 00 06 F1 | 	add	_var01, #6
11ad0     00 17 52 FC | 	wrword	arg03, _var01
11ad4     0D E5 85 F1 | 	sub	objptr, #269
11ad8                 | _hg010b_spin2_setspritepos_ret
11ad8     2D 00 64 FD | 	ret
11adc                 | 
11adc                 | ' 
11adc                 | ' pub setspritesize(num,w,h)
11adc                 | _hg010b_spin2_setspritesize
11adc                 | ' word[@spr1ptr+12*num+8]:=w
11adc     0D E5 05 F1 | 	add	objptr, #269
11ae0     F2 00 02 F6 | 	mov	_var01, objptr
11ae4     09 03 02 F6 | 	mov	_var02, arg01
11ae8     01 02 66 F0 | 	shl	_var02, #1
11aec     09 03 02 F1 | 	add	_var02, arg01
11af0     02 02 66 F0 | 	shl	_var02, #2
11af4     01 01 02 F1 | 	add	_var01, _var02
11af8     08 00 06 F1 | 	add	_var01, #8
11afc     00 15 52 FC | 	wrword	arg02, _var01
11b00                 | ' word[@spr1ptr+12*num+10]:=h
11b00     F2 00 02 F6 | 	mov	_var01, objptr
11b04     09 03 02 F6 | 	mov	_var02, arg01
11b08     01 02 66 F0 | 	shl	_var02, #1
11b0c     09 03 02 F1 | 	add	_var02, arg01
11b10     02 02 66 F0 | 	shl	_var02, #2
11b14     01 01 02 F1 | 	add	_var01, _var02
11b18     0A 00 06 F1 | 	add	_var01, #10
11b1c     00 17 52 FC | 	wrword	arg03, _var01
11b20     0D E5 85 F1 | 	sub	objptr, #269
11b24                 | _hg010b_spin2_setspritesize_ret
11b24     2D 00 64 FD | 	ret
11b28                 | 
11b28                 | ' 
11b28                 | ' 
11b28                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
11b28                 | ' 
11b28                 | ' 
11b28                 | ' pub putpixel(x,y,c)
11b28                 | _hg010b_spin2_putpixel
11b28     04 4A 05 F6 | 	mov	COUNT_, #4
11b2c     A8 00 A0 FD | 	call	#pushregs_
11b30     09 1F 02 F6 | 	mov	local01, arg01
11b34                 | ' 
11b34                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
11b34     00 20 06 F6 | 	mov	local02, #0
11b38     00 1E 56 F2 | 	cmps	local01, #0 wc
11b3c     01 20 66 36 |  if_ae	neg	local02, #1
11b40     E5 E4 05 F1 | 	add	objptr, #229
11b44     F2 1A 02 FB | 	rdlong	arg05, objptr
11b48     02 1A 66 F0 | 	shl	arg05, #2
11b4c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
11b50     11 23 A2 F1 | 	subx	local03, local03
11b54     11 21 02 F5 | 	and	local02, local03
11b58     00 22 06 F6 | 	mov	local03, #0
11b5c     00 14 56 F2 | 	cmps	arg02, #0 wc
11b60     01 22 66 36 |  if_ae	neg	local03, #1
11b64     11 21 02 F5 | 	and	local02, local03
11b68     04 E4 85 F1 | 	sub	objptr, #4
11b6c     F2 22 02 FB | 	rdlong	local03, objptr
11b70     E1 E4 85 F1 | 	sub	objptr, #225
11b74     11 15 52 F2 | 	cmps	arg02, local03 wc
11b78     12 25 A2 F1 | 	subx	local04, local04
11b7c     12 21 CA F7 | 	test	local02, local04 wz
11b80     48 00 90 AD |  if_e	jmp	#LR__1490
11b84     D9 E4 05 F1 | 	add	objptr, #217
11b88     F2 12 02 FB | 	rdlong	arg01, objptr
11b8c     14 E4 05 F1 | 	add	objptr, #20
11b90     F2 24 02 FB | 	rdlong	local04, objptr
11b94     02 24 66 F0 | 	shl	local04, #2
11b98     0A 25 02 FD | 	qmul	local04, arg02
11b9c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
11b9c     0B 15 02 F6 | 	mov	arg02, arg03
11ba0     01 16 06 F6 | 	mov	arg03, #1
11ba4     00 18 06 F6 | 	mov	arg04, #0
11ba8     01 1A 06 F6 | 	mov	arg05, #1
11bac     01 00 00 FF 
11bb0     D3 E5 05 F1 | 	add	objptr, ##979
11bb4     18 24 62 FD | 	getqx	local04
11bb8     0F 25 02 F1 | 	add	local04, local01
11bbc     12 13 02 F1 | 	add	arg01, local04
11bc0     80 15 B0 FD | 	call	#_psram_spin2_fill
11bc4     02 00 00 FF 
11bc8     C0 E4 85 F1 | 	sub	objptr, ##1216
11bcc                 | LR__1490
11bcc     A7 F0 03 F6 | 	mov	ptra, fp
11bd0     B2 00 A0 FD | 	call	#popregs_
11bd4                 | _hg010b_spin2_putpixel_ret
11bd4     2D 00 64 FD | 	ret
11bd8                 | 
11bd8                 | ' 
11bd8                 | ' pub getpixel(x,y): c 
11bd8                 | _hg010b_spin2_getpixel
11bd8     03 4A 05 F6 | 	mov	COUNT_, #3
11bdc     A8 00 A0 FD | 	call	#pushregs_
11be0     0C F0 07 F1 | 	add	ptra, #12
11be4     04 4E 05 F1 | 	add	fp, #4
11be8     A7 12 62 FC | 	wrlong	arg01, fp
11bec     04 4E 05 F1 | 	add	fp, #4
11bf0     A7 14 62 FC | 	wrlong	arg02, fp
11bf4     08 4E 85 F1 | 	sub	fp, #8
11bf8     00 1E 06 F6 | 	mov	local01, #0
11bfc     A7 00 68 FC | 	wrlong	#0, fp
11c00     A7 00 68 FC | 	wrlong	#0, fp
11c04                 | ' 
11c04                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
11c04     04 4E 05 F1 | 	add	fp, #4
11c08     A7 FA 01 FB | 	rdlong	result1, fp
11c0c     00 FA 55 F2 | 	cmps	result1, #0 wc
11c10     01 1E 66 36 |  if_ae	neg	local01, #1
11c14     E5 E4 05 F1 | 	add	objptr, #229
11c18     F2 FA 01 FB | 	rdlong	result1, objptr
11c1c     02 FA 65 F0 | 	shl	result1, #2
11c20     A7 16 02 FB | 	rdlong	arg03, fp
11c24     FD 16 52 F2 | 	cmps	arg03, result1 wc
11c28     10 21 A2 F1 | 	subx	local02, local02
11c2c     10 1F 02 F5 | 	and	local01, local02
11c30     00 20 06 F6 | 	mov	local02, #0
11c34     04 4E 05 F1 | 	add	fp, #4
11c38     A7 FA 01 FB | 	rdlong	result1, fp
11c3c     00 FA 55 F2 | 	cmps	result1, #0 wc
11c40     01 20 66 36 |  if_ae	neg	local02, #1
11c44     10 1F 02 F5 | 	and	local01, local02
11c48     A7 20 02 FB | 	rdlong	local02, fp
11c4c     08 4E 85 F1 | 	sub	fp, #8
11c50     04 E4 85 F1 | 	sub	objptr, #4
11c54     F2 16 02 FB | 	rdlong	arg03, objptr
11c58     E1 E4 85 F1 | 	sub	objptr, #225
11c5c     0B 21 52 F2 | 	cmps	local02, arg03 wc
11c60     11 23 A2 F1 | 	subx	local03, local03
11c64     11 1F CA F7 | 	test	local01, local03 wz
11c68     54 00 90 AD |  if_e	jmp	#LR__1500
11c6c     A7 12 02 F6 | 	mov	arg01, fp
11c70     D9 E4 05 F1 | 	add	objptr, #217
11c74     F2 14 02 FB | 	rdlong	arg02, objptr
11c78     14 E4 05 F1 | 	add	objptr, #20
11c7c     F2 22 02 FB | 	rdlong	local03, objptr
11c80     02 22 66 F0 | 	shl	local03, #2
11c84     08 4E 05 F1 | 	add	fp, #8
11c88     A7 20 02 FB | 	rdlong	local02, fp
11c8c     10 23 02 FD | 	qmul	local03, local02
11c90                 | '   ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
11c90     04 4E 85 F1 | 	sub	fp, #4
11c94     A7 22 02 FB | 	rdlong	local03, fp
11c98     04 4E 85 F1 | 	sub	fp, #4
11c9c     01 16 06 F6 | 	mov	arg03, #1
11ca0     01 00 00 FF 
11ca4     D3 E5 05 F1 | 	add	objptr, ##979
11ca8     18 20 62 FD | 	getqx	local02
11cac     11 21 02 F1 | 	add	local02, local03
11cb0     10 15 02 F1 | 	add	arg02, local02
11cb4     54 13 B0 FD | 	call	#_psram_spin2_read1
11cb8     02 00 00 FF 
11cbc     C0 E4 85 F1 | 	sub	objptr, ##1216
11cc0                 | LR__1500
11cc0                 | ' return c
11cc0     A7 FA 01 FB | 	rdlong	result1, fp
11cc4     A7 F0 03 F6 | 	mov	ptra, fp
11cc8     B2 00 A0 FD | 	call	#popregs_
11ccc                 | _hg010b_spin2_getpixel_ret
11ccc     2D 00 64 FD | 	ret
11cd0                 | 
11cd0                 | '   
11cd0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
11cd0                 | ' 
11cd0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
11cd0                 | _hg010b_spin2_fastline
11cd0     02 4A 05 F6 | 	mov	COUNT_, #2
11cd4     A8 00 A0 FD | 	call	#pushregs_
11cd8     09 1F 02 F6 | 	mov	local01, arg01
11cdc     0A 21 02 F6 | 	mov	local02, arg02
11ce0                 | ' 
11ce0                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
11ce0     00 16 56 F2 | 	cmps	arg03, #0 wc
11ce4     F4 00 90 CD |  if_b	jmp	#LR__1510
11ce8     01 00 00 FF 
11cec     26 E4 05 F1 | 	add	objptr, ##550
11cf0     F2 1A 02 FB | 	rdlong	arg05, objptr
11cf4     01 00 00 FF 
11cf8     26 E4 85 F1 | 	sub	objptr, ##550
11cfc     0D 17 52 F2 | 	cmps	arg03, arg05 wc
11d00     D8 00 90 3D |  if_ae	jmp	#LR__1510
11d04     00 1E 56 F2 | 	cmps	local01, #0 wc
11d08     00 20 56 C2 |  if_b	cmps	local02, #0 wc
11d0c     CC 00 90 CD |  if_b	jmp	#LR__1510
11d10     01 00 00 FF 
11d14     22 E4 05 F1 | 	add	objptr, ##546
11d18     F2 1A 02 FB | 	rdlong	arg05, objptr
11d1c     01 00 00 FF 
11d20     22 E4 85 F1 | 	sub	objptr, ##546
11d24     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
11d28     01 00 00 1F 
11d2c     22 E4 05 11 |  if_a	add	objptr, ##546
11d30     F2 12 02 1B |  if_a	rdlong	arg01, objptr
11d34     01 00 00 1F 
11d38     22 E4 85 11 |  if_a	sub	objptr, ##546
11d3c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
11d40                 | '   return
11d40     98 00 90 1D |  if_a	jmp	#LR__1510
11d44     10 1F 5A F2 | 	cmps	local01, local02 wcz
11d48     0F 1B 02 16 |  if_a	mov	arg05, local01
11d4c     10 1F 02 16 |  if_a	mov	local01, local02
11d50     0D 21 02 16 |  if_a	mov	local02, arg05
11d54     00 1E 56 F2 | 	cmps	local01, #0 wc
11d58     00 1E 06 C6 |  if_b	mov	local01, #0
11d5c     01 00 00 FF 
11d60     22 E4 05 F1 | 	add	objptr, ##546
11d64     F2 1A 02 FB | 	rdlong	arg05, objptr
11d68     01 00 00 FF 
11d6c     22 E4 85 F1 | 	sub	objptr, ##546
11d70     0D 21 52 F2 | 	cmps	local02, arg05 wc
11d74     01 00 00 3F 
11d78     22 E4 05 31 |  if_ae	add	objptr, ##546
11d7c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
11d80     01 00 00 3F 
11d84     22 E4 85 31 |  if_ae	sub	objptr, ##546
11d88     D9 E4 05 F1 | 	add	objptr, #217
11d8c     F2 12 02 FB | 	rdlong	arg01, objptr
11d90     14 E4 05 F1 | 	add	objptr, #20
11d94     F2 1A 02 FB | 	rdlong	arg05, objptr
11d98     02 1A 66 F0 | 	shl	arg05, #2
11d9c     0B 1B 02 FD | 	qmul	arg05, arg03
11da0                 | ' if x1>x2
11da0                 | '   x1,x2:=x2,x1
11da0                 | ' if x1<0 
11da0                 | '   x1:=0
11da0                 | ' if x2>=xres
11da0                 | '   x2:=xres-1  
11da0     01 20 86 31 |  if_ae	sub	local02, #1
11da4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
11da4     01 16 06 F6 | 	mov	arg03, #1
11da8     10 17 02 F1 | 	add	arg03, local02
11dac     0F 17 82 F1 | 	sub	arg03, local01
11db0     0C 15 02 F6 | 	mov	arg02, arg04
11db4     00 18 06 F6 | 	mov	arg04, #0
11db8     01 1A 06 F6 | 	mov	arg05, #1
11dbc     01 00 00 FF 
11dc0     D3 E5 05 F1 | 	add	objptr, ##979
11dc4     18 20 62 FD | 	getqx	local02
11dc8     0F 21 02 F1 | 	add	local02, local01
11dcc     10 13 02 F1 | 	add	arg01, local02
11dd0     70 13 B0 FD | 	call	#_psram_spin2_fill
11dd4     02 00 00 FF 
11dd8     C0 E4 85 F1 | 	sub	objptr, ##1216
11ddc                 | LR__1510
11ddc     A7 F0 03 F6 | 	mov	ptra, fp
11de0     B2 00 A0 FD | 	call	#popregs_
11de4                 | _hg010b_spin2_fastline_ret
11de4     2D 00 64 FD | 	ret
11de8                 | 
11de8                 | ' 
11de8                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
11de8                 | _hg010b_spin2_draw
11de8     0E 4A 05 F6 | 	mov	COUNT_, #14
11dec     A8 00 A0 FD | 	call	#pushregs_
11df0     09 1F 02 F6 | 	mov	local01, arg01
11df4     0A 21 02 F6 | 	mov	local02, arg02
11df8     0B 23 02 F6 | 	mov	local03, arg03
11dfc     0C 25 02 F6 | 	mov	local04, arg04
11e00     0D 27 02 F6 | 	mov	local05, arg05
11e04                 | ' 
11e04                 | ' if (y1==y2)
11e04     12 21 0A F2 | 	cmp	local02, local04 wz
11e08     18 00 90 5D |  if_ne	jmp	#LR__1520
11e0c                 | '   fastline(x1,x2,y1,c)
11e0c     0F 13 02 F6 | 	mov	arg01, local01
11e10     11 15 02 F6 | 	mov	arg02, local03
11e14     10 17 02 F6 | 	mov	arg03, local02
11e18     13 19 02 F6 | 	mov	arg04, local05
11e1c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
11e20     F8 00 90 FD | 	jmp	#LR__1526
11e24                 | LR__1520
11e24                 | ' else  
11e24                 | '   x:=x1
11e24     0F 29 02 F6 | 	mov	local06, local01
11e28                 | '   y:=y1
11e28     10 2B 02 F6 | 	mov	local07, local02
11e2c                 | ' 
11e2c                 | '   if (x1<x2) 
11e2c     11 1F 52 F2 | 	cmps	local01, local03 wc
11e30                 | '     xi:=1
11e30     01 2C 06 C6 |  if_b	mov	local08, #1
11e34                 | '     dx:=x2-x1
11e34     11 2F 02 C6 |  if_b	mov	local09, local03
11e38     0F 2F 82 C1 |  if_b	sub	local09, local01
11e3c                 | '   else
11e3c                 | '     xi:=-1
11e3c     01 2C 66 36 |  if_ae	neg	local08, #1
11e40                 | '     dx:=x1-x2
11e40     11 1F 82 31 |  if_ae	sub	local01, local03
11e44     0F 2F 02 36 |  if_ae	mov	local09, local01
11e48                 | '   
11e48                 | '   if (y1<y2) 
11e48     12 21 52 F2 | 	cmps	local02, local04 wc
11e4c                 | '     yi:=1
11e4c     01 30 06 C6 |  if_b	mov	local10, #1
11e50                 | '     dy:=y2-y1
11e50     12 33 02 C6 |  if_b	mov	local11, local04
11e54     10 33 82 C1 |  if_b	sub	local11, local02
11e58                 | '   else
11e58                 | '     yi:=-1
11e58     01 30 66 36 |  if_ae	neg	local10, #1
11e5c                 | '     dy:=y1-y2
11e5c     12 21 82 31 |  if_ae	sub	local02, local04
11e60     10 33 02 36 |  if_ae	mov	local11, local02
11e64                 | ' 
11e64                 | '   putpixel(x,y,c)
11e64     13 17 02 F6 | 	mov	arg03, local05
11e68     14 13 02 F6 | 	mov	arg01, local06
11e6c     15 15 02 F6 | 	mov	arg02, local07
11e70     B4 FC BF FD | 	call	#_hg010b_spin2_putpixel
11e74                 | ' 
11e74                 | '   if (dx>dy)
11e74     19 2F 5A F2 | 	cmps	local09, local11 wcz
11e78     50 00 90 ED |  if_be	jmp	#LR__1522
11e7c                 | '     ai:=(dy-dx)*2
11e7c     19 35 02 F6 | 	mov	local12, local11
11e80     17 35 82 F1 | 	sub	local12, local09
11e84     01 34 66 F0 | 	shl	local12, #1
11e88                 | '     bi:=dy*2
11e88     01 32 66 F0 | 	shl	local11, #1
11e8c     19 37 02 F6 | 	mov	local13, local11
11e90                 | '     d:= bi-dx
11e90     1B 39 02 F6 | 	mov	local14, local13
11e94     17 39 82 F1 | 	sub	local14, local09
11e98                 | '     repeat while (x<>x2) 
11e98                 | LR__1521
11e98     11 29 0A F2 | 	cmp	local06, local03 wz
11e9c     7C 00 90 AD |  if_e	jmp	#LR__1525
11ea0                 | '       if (d>=0) 
11ea0     00 38 56 F2 | 	cmps	local14, #0 wc
11ea4                 | '         x+=xi
11ea4     16 29 02 31 |  if_ae	add	local06, local08
11ea8                 | '         y+=yi
11ea8     18 2B 02 31 |  if_ae	add	local07, local10
11eac                 | '         d+=ai
11eac     1A 39 02 31 |  if_ae	add	local14, local12
11eb0                 | '       else
11eb0                 | '         d+=bi
11eb0     1B 39 02 C1 |  if_b	add	local14, local13
11eb4                 | '         x+=xi
11eb4     16 29 02 C1 |  if_b	add	local06, local08
11eb8                 | '       putpixel(x,y,c)
11eb8     14 13 02 F6 | 	mov	arg01, local06
11ebc     15 15 02 F6 | 	mov	arg02, local07
11ec0     13 17 02 F6 | 	mov	arg03, local05
11ec4     60 FC BF FD | 	call	#_hg010b_spin2_putpixel
11ec8     CC FF 9F FD | 	jmp	#LR__1521
11ecc                 | LR__1522
11ecc                 | '   else
11ecc                 | '     ai:=(dx-dy)*2
11ecc     17 35 02 F6 | 	mov	local12, local09
11ed0     19 35 82 F1 | 	sub	local12, local11
11ed4     01 34 66 F0 | 	shl	local12, #1
11ed8                 | '     bi:=dx*2
11ed8     01 2E 66 F0 | 	shl	local09, #1
11edc     17 37 02 F6 | 	mov	local13, local09
11ee0                 | '     d:=bi-dy
11ee0     1B 39 02 F6 | 	mov	local14, local13
11ee4     19 39 82 F1 | 	sub	local14, local11
11ee8                 | '     repeat while (y<>y2)
11ee8                 | LR__1523
11ee8     12 2B 0A F2 | 	cmp	local07, local04 wz
11eec     2C 00 90 AD |  if_e	jmp	#LR__1524
11ef0                 | '       if (d>=0)
11ef0     00 38 56 F2 | 	cmps	local14, #0 wc
11ef4                 | '         x+=xi
11ef4     16 29 02 31 |  if_ae	add	local06, local08
11ef8                 | '         y+=yi
11ef8     18 2B 02 31 |  if_ae	add	local07, local10
11efc                 | '         d+=ai
11efc     1A 39 02 31 |  if_ae	add	local14, local12
11f00                 | '       else
11f00                 | '         d+=bi
11f00     1B 39 02 C1 |  if_b	add	local14, local13
11f04                 | '         y+=yi
11f04     18 2B 02 C1 |  if_b	add	local07, local10
11f08                 | '       putpixel(x, y,c)
11f08     14 13 02 F6 | 	mov	arg01, local06
11f0c     15 15 02 F6 | 	mov	arg02, local07
11f10     13 17 02 F6 | 	mov	arg03, local05
11f14     10 FC BF FD | 	call	#_hg010b_spin2_putpixel
11f18     CC FF 9F FD | 	jmp	#LR__1523
11f1c                 | LR__1524
11f1c                 | LR__1525
11f1c                 | LR__1526
11f1c     A7 F0 03 F6 | 	mov	ptra, fp
11f20     B2 00 A0 FD | 	call	#popregs_
11f24                 | _hg010b_spin2_draw_ret
11f24     2D 00 64 FD | 	ret
11f28                 | 
11f28                 | '  
11f28                 | ' pub fillpush(val) :overflow
11f28                 | _hg010b_spin2_fillpush
11f28                 | ' long [fillstack+4*fillptr]:=val
11f28     02 00 00 FF 
11f2c     B6 E4 05 F1 | 	add	objptr, ##1206
11f30     F2 00 02 FB | 	rdlong	_var01, objptr
11f34     02 00 66 F0 | 	shl	_var01, #2
11f38     01 00 00 FF 
11f3c     00 E4 85 F1 | 	sub	objptr, ##512
11f40     F2 02 02 FB | 	rdlong	_var02, objptr
11f44     00 03 02 F1 | 	add	_var02, _var01
11f48     01 13 62 FC | 	wrlong	arg01, _var02
11f4c                 | ' fillptr+=1   
11f4c     01 00 00 FF 
11f50     00 E4 05 F1 | 	add	objptr, ##512
11f54     F2 02 02 FB | 	rdlong	_var02, objptr
11f58     01 02 06 F1 | 	add	_var02, #1
11f5c     F2 02 62 FC | 	wrlong	_var02, objptr
11f60                 | ' if fillptr>fillmax
11f60     04 E4 05 F1 | 	add	objptr, #4
11f64     F2 00 02 FB | 	rdlong	_var01, objptr
11f68     02 00 00 FF 
11f6c     BA E4 85 F1 | 	sub	objptr, ##1210
11f70     00 03 5A F2 | 	cmps	_var02, _var01 wcz
11f74                 | '   fillmax:=fillptr   
11f74     02 00 00 1F 
11f78     B6 E4 05 11 |  if_a	add	objptr, ##1206
11f7c     F2 02 02 1B |  if_a	rdlong	_var02, objptr
11f80     04 E4 05 11 |  if_a	add	objptr, #4
11f84     F2 02 62 1C |  if_a	wrlong	_var02, objptr
11f88     02 00 00 1F 
11f8c     BA E4 85 11 |  if_a	sub	objptr, ##1210
11f90                 | ' if fillptr>=120
11f90     02 00 00 FF 
11f94     B6 E4 05 F1 | 	add	objptr, ##1206
11f98     F2 02 02 FB | 	rdlong	_var02, objptr
11f9c     02 00 00 FF 
11fa0     B6 E4 85 F1 | 	sub	objptr, ##1206
11fa4     78 02 56 F2 | 	cmps	_var02, #120 wc
11fa8                 | '   return -23456
11fa8     D2 FF 7F 3F 
11fac     60 FA 05 36 |  if_ae	mov	result1, ##-23456
11fb0                 | ' else
11fb0                 | '   return 0
11fb0     00 FA 05 C6 |  if_b	mov	result1, #0
11fb4                 | _hg010b_spin2_fillpush_ret
11fb4     2D 00 64 FD | 	ret
11fb8                 | 
11fb8                 | '       
11fb8                 | ' pub fillpop() : val
11fb8                 | _hg010b_spin2_fillpop
11fb8                 | ' 
11fb8                 | ' fillptr-=1
11fb8     02 00 00 FF 
11fbc     B6 E4 05 F1 | 	add	objptr, ##1206
11fc0     F2 FA 01 FB | 	rdlong	result1, objptr
11fc4     01 FA 85 F1 | 	sub	result1, #1
11fc8     F2 FA 61 FC | 	wrlong	result1, objptr
11fcc                 | ' if fillptr<0
11fcc     02 00 00 FF 
11fd0     B6 E4 85 F1 | 	sub	objptr, ##1206
11fd4     00 FA 55 F2 | 	cmps	result1, #0 wc
11fd8                 | '   fillptr:=0
11fd8     02 00 00 CF 
11fdc     B6 E4 05 C1 |  if_b	add	objptr, ##1206
11fe0     F2 00 68 CC |  if_b	wrlong	#0, objptr
11fe4     02 00 00 CF 
11fe8     B6 E4 85 C1 |  if_b	sub	objptr, ##1206
11fec                 | '   val:=-12345
11fec     E7 FF 7F CF 
11ff0     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
11ff4     2C 00 90 CD |  if_b	jmp	#LR__1530
11ff8                 | ' else 
11ff8                 | '   val:=long[fillstack+4*fillptr]
11ff8     02 00 00 FF 
11ffc     B6 E4 05 F1 | 	add	objptr, ##1206
12000     F2 00 02 FB | 	rdlong	_var01, objptr
12004     02 00 66 F0 | 	shl	_var01, #2
12008     01 00 00 FF 
1200c     00 E4 85 F1 | 	sub	objptr, ##512
12010     F2 FA 01 FB | 	rdlong	result1, objptr
12014     01 00 00 FF 
12018     B6 E4 85 F1 | 	sub	objptr, ##694
1201c     00 FB 01 F1 | 	add	result1, _var01
12020     FD 00 02 FB | 	rdlong	_var01, result1
12024                 | LR__1530
12024                 | ' return val
12024     00 FB 01 F6 | 	mov	result1, _var01
12028                 | _hg010b_spin2_fillpop_ret
12028     2D 00 64 FD | 	ret
1202c                 | 
1202c                 | ' 
1202c                 | '       
1202c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1202c                 | _hg010b_spin2_fill
1202c     0C 4A 05 F6 | 	mov	COUNT_, #12
12030     A8 00 A0 FD | 	call	#pushregs_
12034     0B 1F 02 F6 | 	mov	local01, arg03
12038     0C 21 02 F6 | 	mov	local02, arg04
1203c                 | ' 
1203c                 | ' if (oldcolor == newcolor) 
1203c     0F 21 0A F2 | 	cmp	local02, local01 wz
12040                 | '   return
12040     90 02 90 AD |  if_e	jmp	#LR__1550
12044                 | ' 
12044                 | ' fillptr:=0
12044     02 00 00 FF 
12048     B6 E4 05 F1 | 	add	objptr, ##1206
1204c     F2 00 68 FC | 	wrlong	#0, objptr
12050                 | ' fillmax:=0
12050     04 E4 05 F1 | 	add	objptr, #4
12054     F2 00 68 FC | 	wrlong	#0, objptr
12058     02 00 00 FF 
1205c     BA E4 85 F1 | 	sub	objptr, ##1210
12060                 | ' fillpush(x)
12060     C4 FE BF FD | 	call	#_hg010b_spin2_fillpush
12064                 | ' fillpush(y)
12064     0A 13 02 F6 | 	mov	arg01, arg02
12068     BC FE BF FD | 	call	#_hg010b_spin2_fillpush
1206c                 | ' ov:=0
1206c     00 22 06 F6 | 	mov	local03, #0
12070                 | ' y:=fillpop()
12070     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
12074     FD 24 02 F6 | 	mov	local04, result1
12078                 | ' x:=fillpop()
12078     3C FF BF FD | 	call	#_hg010b_spin2_fillpop
1207c     FD 26 02 F6 | 	mov	local05, result1
12080                 | ' if (x >-1) 
12080     00 26 56 F2 | 	cmps	local05, #0 wc
12084     4C 02 90 CD |  if_b	jmp	#LR__1549
12088                 | '   repeat while (( x<>-12345) && (ov==0))      
12088                 | LR__1540
12088     E7 FF 7F FF 
1208c     C7 27 0E F2 | 	cmp	local05, ##-12345 wz
12090     40 02 90 AD |  if_e	jmp	#LR__1548
12094     00 22 0E F2 | 	cmp	local03, #0 wz
12098     38 02 90 5D |  if_ne	jmp	#LR__1548
1209c                 | '   
1209c                 | '     x1 := x
1209c     13 29 02 F6 | 	mov	local06, local05
120a0                 | '     repeat while((x1 >= 0) && (getpixel(x1,y) == oldColor))
120a0                 | LR__1541
120a0     00 2A 06 F6 | 	mov	local07, #0
120a4     00 2C 06 F6 | 	mov	local08, #0
120a8     00 28 56 F2 | 	cmps	local06, #0 wc
120ac     01 2C 66 36 |  if_ae	neg	local08, #1
120b0     00 2C 0E F2 | 	cmp	local08, #0 wz
120b4     00 2A 26 56 |  if_ne	not	local07, #0
120b8     00 2E 06 F6 | 	mov	local09, #0
120bc     00 30 06 F6 | 	mov	local10, #0
120c0     12 15 02 F6 | 	mov	arg02, local04
120c4     14 13 02 F6 | 	mov	arg01, local06
120c8     0C FB BF FD | 	call	#_hg010b_spin2_getpixel
120cc     10 FB 09 F2 | 	cmp	result1, local02 wz
120d0     00 30 26 A6 |  if_e	not	local10, #0
120d4     00 30 0E F2 | 	cmp	local10, #0 wz
120d8     00 2E 26 56 |  if_ne	not	local09, #0
120dc     17 2B CA F7 | 	test	local07, local09 wz
120e0                 | '       x1--
120e0     01 28 86 51 |  if_ne	sub	local06, #1
120e4     B8 FF 9F 5D |  if_ne	jmp	#LR__1541
120e8                 | '     x1++
120e8     01 28 06 F1 | 	add	local06, #1
120ec                 | '     spanabove := 0
120ec     00 32 06 F6 | 	mov	local11, #0
120f0                 | '     spanbelow := 0
120f0     00 34 06 F6 | 	mov	local12, #0
120f4                 | '     repeat while ((x1 < 1024) && getpixel(x1,y) == oldColor)
120f4                 | LR__1542
120f4     00 2A 06 F6 | 	mov	local07, #0
120f8     02 00 00 FF 
120fc     00 28 56 F2 | 	cmps	local06, ##1024 wc
12100     00 2A 26 C6 |  if_b	not	local07, #0
12104     00 2E 06 F6 | 	mov	local09, #0
12108     00 30 06 F6 | 	mov	local10, #0
1210c     12 15 02 F6 | 	mov	arg02, local04
12110     14 13 02 F6 | 	mov	arg01, local06
12114     C0 FA BF FD | 	call	#_hg010b_spin2_getpixel
12118     10 FB 09 F2 | 	cmp	result1, local02 wz
1211c     00 30 26 A6 |  if_e	not	local10, #0
12120     00 30 0E F2 | 	cmp	local10, #0 wz
12124     00 2E 26 56 |  if_ne	not	local09, #0
12128     17 2B CA F7 | 	test	local07, local09 wz
1212c     90 01 90 AD |  if_e	jmp	#LR__1547
12130                 | '       putpixel (x1,y, newcolor)
12130     0F 17 02 F6 | 	mov	arg03, local01
12134     14 13 02 F6 | 	mov	arg01, local06
12138     12 15 02 F6 | 	mov	arg02, local04
1213c     E8 F9 BF FD | 	call	#_hg010b_spin2_putpixel
12140                 | '       if ((spanabove == 0) && (y > 0) && (getpixel(x1,y-1)== oldColor))
12140     00 2A 06 F6 | 	mov	local07, #0
12144     00 2C 06 F6 | 	mov	local08, #0
12148     00 32 0E F2 | 	cmp	local11, #0 wz
1214c     01 24 56 A2 |  if_e	cmps	local04, #1 wc
12150     01 2C 66 26 |  if_nc_and_z	neg	local08, #1
12154     00 2C 0E F2 | 	cmp	local08, #0 wz
12158     00 2A 26 56 |  if_ne	not	local07, #0
1215c     00 2E 06 F6 | 	mov	local09, #0
12160     00 30 06 F6 | 	mov	local10, #0
12164     12 15 02 F6 | 	mov	arg02, local04
12168     01 14 86 F1 | 	sub	arg02, #1
1216c     14 13 02 F6 | 	mov	arg01, local06
12170     64 FA BF FD | 	call	#_hg010b_spin2_getpixel
12174     10 FB 09 F2 | 	cmp	result1, local02 wz
12178     00 30 26 A6 |  if_e	not	local10, #0
1217c     00 30 0E F2 | 	cmp	local10, #0 wz
12180     00 2E 26 56 |  if_ne	not	local09, #0
12184     17 2B CA F7 | 	test	local07, local09 wz
12188     20 00 90 AD |  if_e	jmp	#LR__1543
1218c                 | '         ov:=fillpush(x1)
1218c     14 13 02 F6 | 	mov	arg01, local06
12190     94 FD BF FD | 	call	#_hg010b_spin2_fillpush
12194                 | '         ov:=fillpush(y-1)
12194     12 13 02 F6 | 	mov	arg01, local04
12198     01 12 86 F1 | 	sub	arg01, #1
1219c     88 FD BF FD | 	call	#_hg010b_spin2_fillpush
121a0     FD 22 02 F6 | 	mov	local03, result1
121a4                 | '         spanAbove := 1 
121a4     01 32 06 F6 | 	mov	local11, #1
121a8     4C 00 90 FD | 	jmp	#LR__1544
121ac                 | LR__1543
121ac                 | '       elseif ((spanAbove<>0) && (y > 0) && (getpixel(x1,y-1)<> oldColor))
121ac     00 2A 06 F6 | 	mov	local07, #0
121b0     00 2C 06 F6 | 	mov	local08, #0
121b4     00 32 0E F2 | 	cmp	local11, #0 wz
121b8     01 24 56 52 |  if_ne	cmps	local04, #1 wc
121bc     01 2C 66 16 |  if_a	neg	local08, #1
121c0     00 2C 0E F2 | 	cmp	local08, #0 wz
121c4     00 2A 26 56 |  if_ne	not	local07, #0
121c8     00 2E 06 F6 | 	mov	local09, #0
121cc     00 30 06 F6 | 	mov	local10, #0
121d0     12 15 02 F6 | 	mov	arg02, local04
121d4     01 14 86 F1 | 	sub	arg02, #1
121d8     14 13 02 F6 | 	mov	arg01, local06
121dc     F8 F9 BF FD | 	call	#_hg010b_spin2_getpixel
121e0     10 FB 09 F2 | 	cmp	result1, local02 wz
121e4     00 30 26 56 |  if_ne	not	local10, #0
121e8     00 30 0E F2 | 	cmp	local10, #0 wz
121ec     00 2E 26 56 |  if_ne	not	local09, #0
121f0     17 2B CA F7 | 	test	local07, local09 wz
121f4                 | '         spanAbove := 0 
121f4     00 32 06 56 |  if_ne	mov	local11, #0
121f8                 | LR__1544
121f8                 | '       if((spanBelow == 0 ) && (y < 575) && getpixel(x1,y+1) == oldColor)
121f8     00 2A 06 F6 | 	mov	local07, #0
121fc     00 2C 06 F6 | 	mov	local08, #0
12200     00 34 0E F2 | 	cmp	local12, #0 wz
12204     01 00 00 AF 
12208     3F 24 56 A2 |  if_e	cmps	local04, ##575 wc
1220c     01 2C 66 86 |  if_c_and_z	neg	local08, #1
12210     00 2C 0E F2 | 	cmp	local08, #0 wz
12214     00 2A 26 56 |  if_ne	not	local07, #0
12218     00 2E 06 F6 | 	mov	local09, #0
1221c     00 30 06 F6 | 	mov	local10, #0
12220     12 15 02 F6 | 	mov	arg02, local04
12224     01 14 06 F1 | 	add	arg02, #1
12228     14 13 02 F6 | 	mov	arg01, local06
1222c     A8 F9 BF FD | 	call	#_hg010b_spin2_getpixel
12230     10 FB 09 F2 | 	cmp	result1, local02 wz
12234     00 30 26 A6 |  if_e	not	local10, #0
12238     00 30 0E F2 | 	cmp	local10, #0 wz
1223c     00 2E 26 56 |  if_ne	not	local09, #0
12240     17 2B CA F7 | 	test	local07, local09 wz
12244     20 00 90 AD |  if_e	jmp	#LR__1545
12248                 | '         ov:=fillpush(x1)
12248     14 13 02 F6 | 	mov	arg01, local06
1224c     D8 FC BF FD | 	call	#_hg010b_spin2_fillpush
12250                 | '         ov:=fillpush(y + 1)
12250     12 13 02 F6 | 	mov	arg01, local04
12254     01 12 06 F1 | 	add	arg01, #1
12258     CC FC BF FD | 	call	#_hg010b_spin2_fillpush
1225c     FD 22 02 F6 | 	mov	local03, result1
12260                 | '         spanBelow := 1
12260     01 34 06 F6 | 	mov	local12, #1
12264     50 00 90 FD | 	jmp	#LR__1546
12268                 | LR__1545
12268                 | '       elseif((spanBelow<>0) && (y < 575) && (getpixel(x1,y + 1)<> oldColor))
12268     00 2A 06 F6 | 	mov	local07, #0
1226c     00 2C 06 F6 | 	mov	local08, #0
12270     00 34 0E F2 | 	cmp	local12, #0 wz
12274     01 00 00 5F 
12278     3F 24 56 52 |  if_ne	cmps	local04, ##575 wc
1227c     01 2C 66 46 |  if_c_and_nz	neg	local08, #1
12280     00 2C 0E F2 | 	cmp	local08, #0 wz
12284     00 2A 26 56 |  if_ne	not	local07, #0
12288     00 2E 06 F6 | 	mov	local09, #0
1228c     00 30 06 F6 | 	mov	local10, #0
12290     12 15 02 F6 | 	mov	arg02, local04
12294     01 14 06 F1 | 	add	arg02, #1
12298     14 13 02 F6 | 	mov	arg01, local06
1229c     38 F9 BF FD | 	call	#_hg010b_spin2_getpixel
122a0     10 FB 09 F2 | 	cmp	result1, local02 wz
122a4     00 30 26 56 |  if_ne	not	local10, #0
122a8     00 30 0E F2 | 	cmp	local10, #0 wz
122ac     00 2E 26 56 |  if_ne	not	local09, #0
122b0     17 2B CA F7 | 	test	local07, local09 wz
122b4                 | '         spanBelow := 0
122b4     00 34 06 56 |  if_ne	mov	local12, #0
122b8                 | LR__1546
122b8                 | '       x1++
122b8     01 28 06 F1 | 	add	local06, #1
122bc     34 FE 9F FD | 	jmp	#LR__1542
122c0                 | LR__1547
122c0                 | '     y:=fillpop()
122c0     F4 FC BF FD | 	call	#_hg010b_spin2_fillpop
122c4     FD 24 02 F6 | 	mov	local04, result1
122c8                 | '     x:=fillpop()
122c8     EC FC BF FD | 	call	#_hg010b_spin2_fillpop
122cc     FD 26 02 F6 | 	mov	local05, result1
122d0     B4 FD 9F FD | 	jmp	#LR__1540
122d4                 | LR__1548
122d4                 | LR__1549
122d4                 | LR__1550
122d4     A7 F0 03 F6 | 	mov	ptra, fp
122d8     B2 00 A0 FD | 	call	#popregs_
122dc                 | _hg010b_spin2_fill_ret
122dc     2D 00 64 FD | 	ret
122e0                 | 
122e0                 | '     
122e0                 | '      
122e0                 | '       
122e0                 | '       
122e0                 | ' 
122e0                 | ' '-- A filled circle -----------------------------------------------------
122e0                 | ' 
122e0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
122e0                 | _hg010b_spin2_fcircle
122e0     08 4A 05 F6 | 	mov	COUNT_, #8
122e4     A8 00 A0 FD | 	call	#pushregs_
122e8     0B 1F 02 F6 | 	mov	local01, arg03
122ec     FF FF 7F FF 
122f0     FE 1F 06 FD | 	qmul	local01, ##-2
122f4     09 21 02 F6 | 	mov	local02, arg01
122f8     0A 23 02 F6 | 	mov	local03, arg02
122fc     0C 25 02 F6 | 	mov	local04, arg04
12300                 | ' 
12300                 | ' d:=5-4*r
12300     0F 19 02 F6 | 	mov	arg04, local01
12304     02 18 66 F0 | 	shl	arg04, #2
12308     05 26 06 F6 | 	mov	local05, #5
1230c     0C 27 82 F1 | 	sub	local05, arg04
12310                 | ' x:=0
12310     00 28 06 F6 | 	mov	local06, #0
12314                 | ' y:=r
12314                 | ' da:=(-2*r+5)*4
12314                 | ' db:=3*4
12314     0C 2A 06 F6 | 	mov	local07, #12
12318                 | ' repeat while (x<=y) 
12318     18 2C 62 FD | 	getqx	local08
1231c     05 2C 06 F1 | 	add	local08, #5
12320     02 2C 66 F0 | 	shl	local08, #2
12324                 | LR__1560
12324     0F 29 5A F2 | 	cmps	local06, local01 wcz
12328     B4 00 90 1D |  if_a	jmp	#LR__1562
1232c                 | '   fastline(x0-x,x0+x,y0-y,c)
1232c     10 13 02 F6 | 	mov	arg01, local02
12330     14 13 82 F1 | 	sub	arg01, local06
12334     10 15 02 F6 | 	mov	arg02, local02
12338     14 15 02 F1 | 	add	arg02, local06
1233c     11 17 02 F6 | 	mov	arg03, local03
12340     0F 17 82 F1 | 	sub	arg03, local01
12344     12 19 02 F6 | 	mov	arg04, local04
12348     84 F9 BF FD | 	call	#_hg010b_spin2_fastline
1234c                 | '   fastline(x0-x,x0+x,y0+y,c)
1234c     10 13 02 F6 | 	mov	arg01, local02
12350     14 13 82 F1 | 	sub	arg01, local06
12354     10 15 02 F6 | 	mov	arg02, local02
12358     14 15 02 F1 | 	add	arg02, local06
1235c     11 17 02 F6 | 	mov	arg03, local03
12360     0F 17 02 F1 | 	add	arg03, local01
12364     12 19 02 F6 | 	mov	arg04, local04
12368     64 F9 BF FD | 	call	#_hg010b_spin2_fastline
1236c                 | '   fastline(x0-y,x0+y,y0-x,c)
1236c     10 13 02 F6 | 	mov	arg01, local02
12370     0F 13 82 F1 | 	sub	arg01, local01
12374     10 15 02 F6 | 	mov	arg02, local02
12378     0F 15 02 F1 | 	add	arg02, local01
1237c     11 17 02 F6 | 	mov	arg03, local03
12380     14 17 82 F1 | 	sub	arg03, local06
12384     12 19 02 F6 | 	mov	arg04, local04
12388     44 F9 BF FD | 	call	#_hg010b_spin2_fastline
1238c                 | '   fastline(x0-y,x0+y,y0+x,c)
1238c     10 13 02 F6 | 	mov	arg01, local02
12390     0F 13 82 F1 | 	sub	arg01, local01
12394     10 15 02 F6 | 	mov	arg02, local02
12398     0F 15 02 F1 | 	add	arg02, local01
1239c     11 17 02 F6 | 	mov	arg03, local03
123a0     14 17 02 F1 | 	add	arg03, local06
123a4     12 19 02 F6 | 	mov	arg04, local04
123a8     24 F9 BF FD | 	call	#_hg010b_spin2_fastline
123ac                 | '   if d>0 
123ac     01 26 56 F2 | 	cmps	local05, #1 wc
123b0     18 00 90 CD |  if_b	jmp	#LR__1561
123b4                 | '     d+=da
123b4     16 27 02 F1 | 	add	local05, local08
123b8                 | '     y-=1
123b8     01 1E 86 F1 | 	sub	local01, #1
123bc                 | '     x+=1
123bc     01 28 06 F1 | 	add	local06, #1
123c0                 | '     da+=4*4
123c0     10 2C 06 F1 | 	add	local08, #16
123c4                 | '     db+=2*4
123c4     08 2A 06 F1 | 	add	local07, #8
123c8     58 FF 9F FD | 	jmp	#LR__1560
123cc                 | LR__1561
123cc                 | '   else
123cc                 | '     d+=db
123cc     15 27 02 F1 | 	add	local05, local07
123d0                 | '     x+=1
123d0     01 28 06 F1 | 	add	local06, #1
123d4                 | '     da+=2*4
123d4     08 2C 06 F1 | 	add	local08, #8
123d8                 | '     db+=2*4
123d8     08 2A 06 F1 | 	add	local07, #8
123dc     44 FF 9F FD | 	jmp	#LR__1560
123e0                 | LR__1562
123e0     A7 F0 03 F6 | 	mov	ptra, fp
123e4     B2 00 A0 FD | 	call	#popregs_
123e8                 | _hg010b_spin2_fcircle_ret
123e8     2D 00 64 FD | 	ret
123ec                 | 
123ec                 | '  
123ec                 | ' '-- A circle ------------------------------------------------------------ 
123ec                 | '  
123ec                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
123ec                 | _hg010b_spin2_circle
123ec     08 4A 05 F6 | 	mov	COUNT_, #8
123f0     A8 00 A0 FD | 	call	#pushregs_
123f4     0B 1F 02 F6 | 	mov	local01, arg03
123f8     FF FF 7F FF 
123fc     FE 1F 06 FD | 	qmul	local01, ##-2
12400     09 21 02 F6 | 	mov	local02, arg01
12404     0A 23 02 F6 | 	mov	local03, arg02
12408     0C 25 02 F6 | 	mov	local04, arg04
1240c                 | ' 
1240c                 | '  
1240c                 | ' d:=5-4*r
1240c     0F 19 02 F6 | 	mov	arg04, local01
12410     02 18 66 F0 | 	shl	arg04, #2
12414     05 26 06 F6 | 	mov	local05, #5
12418     0C 27 82 F1 | 	sub	local05, arg04
1241c                 | ' x:=0
1241c     00 28 06 F6 | 	mov	local06, #0
12420                 | ' y:=r
12420                 | ' da:=(-2*r+5)*4
12420                 | ' db:=3*4
12420     0C 2A 06 F6 | 	mov	local07, #12
12424                 | ' repeat while (x<=y) 
12424     18 2C 62 FD | 	getqx	local08
12428     05 2C 06 F1 | 	add	local08, #5
1242c     02 2C 66 F0 | 	shl	local08, #2
12430                 | LR__1570
12430     0F 29 5A F2 | 	cmps	local06, local01 wcz
12434     F4 00 90 1D |  if_a	jmp	#LR__1572
12438                 | '   putpixel(x0-x,y0-y,c)
12438     10 13 02 F6 | 	mov	arg01, local02
1243c     14 13 82 F1 | 	sub	arg01, local06
12440     11 15 02 F6 | 	mov	arg02, local03
12444     0F 15 82 F1 | 	sub	arg02, local01
12448     12 17 02 F6 | 	mov	arg03, local04
1244c     D8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12450                 | '   putpixel(x0-x,y0+y,c)
12450     10 13 02 F6 | 	mov	arg01, local02
12454     14 13 82 F1 | 	sub	arg01, local06
12458     11 15 02 F6 | 	mov	arg02, local03
1245c     0F 15 02 F1 | 	add	arg02, local01
12460     12 17 02 F6 | 	mov	arg03, local04
12464     C0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12468                 | '   putpixel(x0+x,y0-y,c)
12468     10 13 02 F6 | 	mov	arg01, local02
1246c     14 13 02 F1 | 	add	arg01, local06
12470     11 15 02 F6 | 	mov	arg02, local03
12474     0F 15 82 F1 | 	sub	arg02, local01
12478     12 17 02 F6 | 	mov	arg03, local04
1247c     A8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12480                 | '   putpixel(x0+x,y0+y,c)
12480     10 13 02 F6 | 	mov	arg01, local02
12484     14 13 02 F1 | 	add	arg01, local06
12488     11 15 02 F6 | 	mov	arg02, local03
1248c     0F 15 02 F1 | 	add	arg02, local01
12490     12 17 02 F6 | 	mov	arg03, local04
12494     90 F6 BF FD | 	call	#_hg010b_spin2_putpixel
12498                 | '   putpixel(x0-y,y0-x,c)
12498     10 13 02 F6 | 	mov	arg01, local02
1249c     0F 13 82 F1 | 	sub	arg01, local01
124a0     11 15 02 F6 | 	mov	arg02, local03
124a4     14 15 82 F1 | 	sub	arg02, local06
124a8     12 17 02 F6 | 	mov	arg03, local04
124ac     78 F6 BF FD | 	call	#_hg010b_spin2_putpixel
124b0                 | '   putpixel(x0-y,y0+x,c)
124b0     10 13 02 F6 | 	mov	arg01, local02
124b4     0F 13 82 F1 | 	sub	arg01, local01
124b8     11 15 02 F6 | 	mov	arg02, local03
124bc     14 15 02 F1 | 	add	arg02, local06
124c0     12 17 02 F6 | 	mov	arg03, local04
124c4     60 F6 BF FD | 	call	#_hg010b_spin2_putpixel
124c8                 | '   putpixel(x0+y,y0-x,c)
124c8     10 13 02 F6 | 	mov	arg01, local02
124cc     0F 13 02 F1 | 	add	arg01, local01
124d0     11 15 02 F6 | 	mov	arg02, local03
124d4     14 15 82 F1 | 	sub	arg02, local06
124d8     12 17 02 F6 | 	mov	arg03, local04
124dc     48 F6 BF FD | 	call	#_hg010b_spin2_putpixel
124e0                 | '   putpixel(x0+y,y0+x,c)
124e0     10 13 02 F6 | 	mov	arg01, local02
124e4     0F 13 02 F1 | 	add	arg01, local01
124e8     11 15 02 F6 | 	mov	arg02, local03
124ec     14 15 02 F1 | 	add	arg02, local06
124f0     12 17 02 F6 | 	mov	arg03, local04
124f4     30 F6 BF FD | 	call	#_hg010b_spin2_putpixel
124f8                 | '   if d>0 
124f8     01 26 56 F2 | 	cmps	local05, #1 wc
124fc     18 00 90 CD |  if_b	jmp	#LR__1571
12500                 | '     d+=da
12500     16 27 02 F1 | 	add	local05, local08
12504                 | '     y-=1
12504     01 1E 86 F1 | 	sub	local01, #1
12508                 | '     x+=1
12508     01 28 06 F1 | 	add	local06, #1
1250c                 | '     da+=4*4
1250c     10 2C 06 F1 | 	add	local08, #16
12510                 | '     db+=2*4
12510     08 2A 06 F1 | 	add	local07, #8
12514     18 FF 9F FD | 	jmp	#LR__1570
12518                 | LR__1571
12518                 | '   else
12518                 | '     d+=db
12518     15 27 02 F1 | 	add	local05, local07
1251c                 | '     x+=1
1251c     01 28 06 F1 | 	add	local06, #1
12520                 | '     da+=2*4
12520     08 2C 06 F1 | 	add	local08, #8
12524                 | '     db+=2*4
12524     08 2A 06 F1 | 	add	local07, #8
12528     04 FF 9F FD | 	jmp	#LR__1570
1252c                 | LR__1572
1252c     A7 F0 03 F6 | 	mov	ptra, fp
12530     B2 00 A0 FD | 	call	#popregs_
12534                 | _hg010b_spin2_circle_ret
12534     2D 00 64 FD | 	ret
12538                 | 
12538                 | '     
12538                 | ' '-- A frame (an empty rectangle) ---------------------------------------
12538                 | ' 
12538                 | ' pub frame(x1,y1,x2,y2,c)
12538                 | _hg010b_spin2_frame
12538     05 4A 05 F6 | 	mov	COUNT_, #5
1253c     A8 00 A0 FD | 	call	#pushregs_
12540     09 1F 02 F6 | 	mov	local01, arg01
12544     0A 21 02 F6 | 	mov	local02, arg02
12548     0B 23 02 F6 | 	mov	local03, arg03
1254c     0C 25 02 F6 | 	mov	local04, arg04
12550     0D 27 02 F6 | 	mov	local05, arg05
12554                 | ' 
12554                 | ' fastline(x1,x2,y1,c)
12554     0F 13 02 F6 | 	mov	arg01, local01
12558     11 15 02 F6 | 	mov	arg02, local03
1255c     10 17 02 F6 | 	mov	arg03, local02
12560     13 19 02 F6 | 	mov	arg04, local05
12564     68 F7 BF FD | 	call	#_hg010b_spin2_fastline
12568                 | ' fastline(x1,x2,y2,c)
12568     0F 13 02 F6 | 	mov	arg01, local01
1256c     11 15 02 F6 | 	mov	arg02, local03
12570     12 17 02 F6 | 	mov	arg03, local04
12574     13 19 02 F6 | 	mov	arg04, local05
12578     54 F7 BF FD | 	call	#_hg010b_spin2_fastline
1257c                 | ' line(x1,y1,x1,y2,c)
1257c     0F 13 02 F6 | 	mov	arg01, local01
12580     10 15 02 F6 | 	mov	arg02, local02
12584     0F 17 02 F6 | 	mov	arg03, local01
12588     12 19 02 F6 | 	mov	arg04, local04
1258c     13 1B 02 F6 | 	mov	arg05, local05
12590                 | ' draw(x1,y1,x2,y2,c)
12590     54 F8 BF FD | 	call	#_hg010b_spin2_draw
12594                 | ' line(x2,y1,x2,y2,c)
12594     11 13 02 F6 | 	mov	arg01, local03
12598     10 15 02 F6 | 	mov	arg02, local02
1259c     11 17 02 F6 | 	mov	arg03, local03
125a0     12 19 02 F6 | 	mov	arg04, local04
125a4     13 1B 02 F6 | 	mov	arg05, local05
125a8                 | ' draw(x1,y1,x2,y2,c)
125a8     3C F8 BF FD | 	call	#_hg010b_spin2_draw
125ac     A7 F0 03 F6 | 	mov	ptra, fp
125b0     B2 00 A0 FD | 	call	#popregs_
125b4                 | _hg010b_spin2_frame_ret
125b4     2D 00 64 FD | 	ret
125b8                 | 
125b8                 | ' 
125b8                 | ' '-- A box (a filled rectangle) ----------------------------------------
125b8                 | ' 
125b8                 | ' pub box(x1,y1,x2,y2,c) |yy
125b8                 | _hg010b_spin2_box
125b8     06 4A 05 F6 | 	mov	COUNT_, #6
125bc     A8 00 A0 FD | 	call	#pushregs_
125c0     09 1F 02 F6 | 	mov	local01, arg01
125c4     0A 21 02 F6 | 	mov	local02, arg02
125c8     0B 23 02 F6 | 	mov	local03, arg03
125cc     0C 25 02 F6 | 	mov	local04, arg04
125d0     0D 27 02 F6 | 	mov	local05, arg05
125d4                 | ' 
125d4                 | ' repeat yy from y1 to y2
125d4     10 25 52 F2 | 	cmps	local04, local02 wc
125d8     01 28 86 F6 | 	negc	local06, #1
125dc     14 25 02 F1 | 	add	local04, local06
125e0                 | LR__1580
125e0                 | '   fastline(x1,x2,yy,c)
125e0     0F 13 02 F6 | 	mov	arg01, local01
125e4     11 15 02 F6 | 	mov	arg02, local03
125e8     13 19 02 F6 | 	mov	arg04, local05
125ec     10 17 02 F6 | 	mov	arg03, local02
125f0     DC F6 BF FD | 	call	#_hg010b_spin2_fastline
125f4     14 21 02 F1 | 	add	local02, local06
125f8     12 21 0A F2 | 	cmp	local02, local04 wz
125fc     E0 FF 9F 5D |  if_ne	jmp	#LR__1580
12600     A7 F0 03 F6 | 	mov	ptra, fp
12604     B2 00 A0 FD | 	call	#popregs_
12608                 | _hg010b_spin2_box_ret
12608     2D 00 64 FD | 	ret
1260c                 | 
1260c                 | '       
1260c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1260c                 | _hg010b_spin2_putcharxycgf
1260c                 | ' 
1260c                 | '  
1260c                 | ' repeat yy from 0 to 15
1260c     00 00 06 F6 | 	mov	_var01, #0
12610     97 8C 48 FB | 	callpa	#(@LR__1592-@LR__1590)>>2,fcache_load_ptr_
12614                 | LR__1590
12614                 | ' 
12614                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
12614     91 E4 05 F1 | 	add	objptr, #145
12618     F2 02 02 FB | 	rdlong	_var02, objptr
1261c     0A 02 66 F0 | 	shl	_var02, #10
12620     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
12624     01 05 02 F1 | 	add	_var03, _var02
12628     0B 03 02 F6 | 	mov	_var02, arg03
1262c     04 02 66 F0 | 	shl	_var02, #4
12630     01 05 02 F1 | 	add	_var03, _var02
12634     00 05 02 F1 | 	add	_var03, _var01
12638     02 05 C2 FA | 	rdbyte	_var03, _var03
1263c                 | '   asm
1263c     00 04 0E F4 | 	testb	_var03, #0 wz
12640     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
12644     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
12648     01 04 0E F4 | 	testb	_var03, #1 wz
1264c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
12650     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
12654     02 04 0E F4 | 	testb	_var03, #2 wz
12658     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1265c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
12660     03 04 0E F4 | 	testb	_var03, #3 wz
12664     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
12668     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1266c     04 04 0E F4 | 	testb	_var03, #4 wz
12670     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
12674     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
12678     05 04 0E F4 | 	testb	_var03, #5 wz
1267c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
12680     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
12684     06 04 0E F4 | 	testb	_var03, #6 wz
12688     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1268c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
12690     07 04 0E F4 | 	testb	_var03, #7 wz
12694     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
12698     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1269c                 | '   
1269c                 | '   ccc[0]:=c1
1269c     99 E5 05 F1 | 	add	objptr, #409
126a0     F2 06 62 FC | 	wrlong	_var04, objptr
126a4                 | '   ccc[1]:=c2 
126a4     04 E4 05 F1 | 	add	objptr, #4
126a8     F2 08 62 FC | 	wrlong	_var05, objptr
126ac                 | '   long[mailbox0][2]:=8
126ac     49 E4 85 F1 | 	sub	objptr, #73
126b0     F2 04 02 FB | 	rdlong	_var03, objptr
126b4     08 04 06 F1 | 	add	_var03, #8
126b8     02 11 68 FC | 	wrlong	#8, _var03
126bc                 | '   long[mailbox0][1]:=@ccc
126bc     45 E4 05 F1 | 	add	objptr, #69
126c0     F2 04 02 F6 | 	mov	_var03, objptr
126c4     45 E4 85 F1 | 	sub	objptr, #69
126c8     F2 02 02 FB | 	rdlong	_var02, objptr
126cc     04 02 06 F1 | 	add	_var02, #4
126d0     01 05 62 FC | 	wrlong	_var03, _var02
126d4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
126d4     0C E5 85 F1 | 	sub	objptr, #268
126d8     F2 04 02 FB | 	rdlong	_var03, objptr
126dc     0A 03 02 F6 | 	mov	_var02, arg02
126e0     00 03 02 F1 | 	add	_var02, _var01
126e4     0A 02 66 F0 | 	shl	_var02, #10
126e8     09 0B 02 F6 | 	mov	_var06, arg01
126ec     02 0A 66 F0 | 	shl	_var06, #2
126f0     05 03 02 F1 | 	add	_var02, _var06
126f4     01 05 02 F1 | 	add	_var03, _var02
126f8     00 00 78 FF 
126fc     00 04 06 F1 | 	add	_var03, ##-268435456
12700     0C E5 05 F1 | 	add	objptr, #268
12704     F2 0A 02 FB | 	rdlong	_var06, objptr
12708     05 05 62 FC | 	wrlong	_var03, _var06
1270c                 | '   repeat
1270c                 | LR__1591
1270c     F2 04 02 FB | 	rdlong	_var03, objptr
12710     02 03 02 FB | 	rdlong	_var02, _var03
12714     00 02 56 F2 | 	cmps	_var02, #0 wc
12718     F0 FF 9F CD |  if_b	jmp	#LR__1591
1271c     E5 E5 85 F1 | 	sub	objptr, #485
12720     01 00 06 F1 | 	add	_var01, #1
12724     10 00 56 F2 | 	cmps	_var01, #16 wc
12728     E8 FE 9F CD |  if_b	jmp	#LR__1590
1272c                 | LR__1592
1272c                 | _hg010b_spin2_putcharxycgf_ret
1272c     2D 00 64 FD | 	ret
12730                 | 
12730                 | ' 
12730                 | ' 
12730                 | ' '**********************************************************************r***
12730                 | ' '                                                                        *
12730                 | ' ' Font related functions                                                 *
12730                 | ' '                                                                        *
12730                 | ' '*************************************************************************
12730                 | ' 
12730                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
12730                 | ' 
12730                 | ' pub setfontfamily(afontnum)
12730                 | _hg010b_spin2_setfontfamily
12730                 | ' 
12730                 | ' font_family:=afontnum
12730     91 E4 05 F1 | 	add	objptr, #145
12734     F2 12 62 FC | 	wrlong	arg01, objptr
12738     91 E4 85 F1 | 	sub	objptr, #145
1273c                 | ' 'if afontnum==8
1273c                 | ' '  font_ptr:=@amiga_font
1273c                 | ' 
1273c                 | ' if afontnum==4
1273c     04 12 0E F2 | 	cmp	arg01, #4 wz
12740                 | '   font_ptr:=@st_font
12740     08 00 00 AF 
12744     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
12748     04 E4 05 A1 |  if_e	add	objptr, #4
1274c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
12750     04 E4 85 A1 |  if_e	sub	objptr, #4
12754     08 00 00 AF 
12758     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1275c                 | ' if afontnum==0
1275c     00 12 0E F2 | 	cmp	arg01, #0 wz
12760                 | '   font_ptr:=@vga_font
12760     04 E4 05 A1 |  if_e	add	objptr, #4
12764     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
12768     04 E4 85 A1 |  if_e	sub	objptr, #4
1276c                 | _hg010b_spin2_setfontfamily_ret
1276c     2D 00 64 FD | 	ret
12770                 | 
12770                 | ' 
12770                 | ' '*************************************************************************
12770                 | ' '                                                                        *
12770                 | ' '  Cursor functions                                                      *
12770                 | ' '                                                                        *
12770                 | ' '*************************************************************************
12770                 | ' 
12770                 | ' 
12770                 | ' pub setcursorpos(x,y)
12770                 | _hg010b_spin2_setcursorpos
12770                 | ' 
12770                 | ' ''---------- Set the (x,y) position of cursor
12770                 | ' 
12770                 | ' cursor_x:=x
12770     38 E4 05 F1 | 	add	objptr, #56
12774     F2 12 52 FC | 	wrword	arg01, objptr
12778                 | ' cursor_y:=y
12778     02 E4 05 F1 | 	add	objptr, #2
1277c     F2 14 42 FC | 	wrbyte	arg02, objptr
12780                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
12780     02 E4 85 F1 | 	sub	objptr, #2
12784     F2 14 E2 FA | 	rdword	arg02, objptr
12788     02 14 66 F0 | 	shl	arg02, #2
1278c     02 E4 05 F1 | 	add	objptr, #2
12790     F2 16 C2 FA | 	rdbyte	arg03, objptr
12794     3A E4 85 F1 | 	sub	objptr, #58
12798     04 16 66 F0 | 	shl	arg03, #4
1279c     11 12 06 F6 | 	mov	arg01, #17
127a0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
127a4                 | _hg010b_spin2_setcursorpos_ret
127a4     2D 00 64 FD | 	ret
127a8                 | 
127a8                 | ' 
127a8                 | ' '*************************************************************************
127a8                 | ' '                                                                        *
127a8                 | ' '  VBlank functions                                                      *
127a8                 | ' '                                                                        *
127a8                 | ' '*************************************************************************
127a8                 | ' 
127a8                 | ' pub waitvbl(amount) | i
127a8                 | _hg010b_spin2_waitvbl
127a8     03 4A 05 F6 | 	mov	COUNT_, #3
127ac     A8 00 A0 FD | 	call	#pushregs_
127b0     09 1F 02 F6 | 	mov	local01, arg01
127b4                 | ' 
127b4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
127b4                 | ' 
127b4                 | ' repeat i from 1 to amount
127b4     01 20 06 F6 | 	mov	local02, #1
127b8     01 1E 56 F2 | 	cmps	local01, #1 wc
127bc     01 22 86 F6 | 	negc	local03, #1
127c0     11 1F 02 F1 | 	add	local01, local03
127c4                 | LR__1600
127c4                 | '   repeat until vblank==0
127c4                 | LR__1601
127c4     45 E4 05 F1 | 	add	objptr, #69
127c8     F2 12 0A FB | 	rdlong	arg01, objptr wz
127cc     45 E4 85 F1 | 	sub	objptr, #69
127d0     0C 00 90 AD |  if_e	jmp	#LR__1602
127d4                 | '     waitus(100)
127d4     64 12 06 F6 | 	mov	arg01, #100
127d8     94 15 B0 FD | 	call	#__system___waitus
127dc     E4 FF 9F FD | 	jmp	#LR__1601
127e0                 | LR__1602
127e0                 | '   repeat until vblank==1
127e0                 | LR__1603
127e0     45 E4 05 F1 | 	add	objptr, #69
127e4     F2 12 02 FB | 	rdlong	arg01, objptr
127e8     45 E4 85 F1 | 	sub	objptr, #69
127ec     01 12 0E F2 | 	cmp	arg01, #1 wz
127f0     0C 00 90 AD |  if_e	jmp	#LR__1604
127f4                 | '     waitus(100)
127f4     64 12 06 F6 | 	mov	arg01, #100
127f8     74 15 B0 FD | 	call	#__system___waitus
127fc     E0 FF 9F FD | 	jmp	#LR__1603
12800                 | LR__1604
12800     11 21 02 F1 | 	add	local02, local03
12804     0F 21 0A F2 | 	cmp	local02, local01 wz
12808     B8 FF 9F 5D |  if_ne	jmp	#LR__1600
1280c     A7 F0 03 F6 | 	mov	ptra, fp
12810     B2 00 A0 FD | 	call	#popregs_
12814                 | _hg010b_spin2_waitvbl_ret
12814     2D 00 64 FD | 	ret
12818                 | 
12818                 | ' 
12818                 | ' 
12818                 | ' pub cls(fc,bc)   :c,i
12818                 | _hg010b_spin2_cls
12818     02 4A 05 F6 | 	mov	COUNT_, #2
1281c     A8 00 A0 FD | 	call	#pushregs_
12820     09 1F 02 F6 | 	mov	local01, arg01
12824     0A 21 02 F6 | 	mov	local02, arg02
12828                 | ' 
12828                 | ' c:=bc
12828                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
12828     D9 E4 05 F1 | 	add	objptr, #217
1282c     F2 12 02 FB | 	rdlong	arg01, objptr
12830     A5 E4 85 F1 | 	sub	objptr, #165
12834     F2 16 02 FB | 	rdlong	arg03, objptr
12838     02 16 66 F0 | 	shl	arg03, #2
1283c     10 15 02 F6 | 	mov	arg02, local02
12840     00 18 06 F6 | 	mov	arg04, #0
12844     01 1A 06 F6 | 	mov	arg05, #1
12848     02 00 00 FF 
1284c     8C E4 05 F1 | 	add	objptr, ##1164
12850     F0 08 B0 FD | 	call	#_psram_spin2_fill
12854                 | ' setwritecolors(fc,bc)
12854                 | ' 
12854                 | ' write_color:=ff
12854     02 00 00 FF 
12858     83 E4 85 F1 | 	sub	objptr, ##1155
1285c     F2 1E 62 FC | 	wrlong	local01, objptr
12860                 | ' write_background:=bb
12860     04 E4 05 F1 | 	add	objptr, #4
12864     F2 20 62 FC | 	wrlong	local02, objptr
12868                 | ' cursor_x:=0
12868     09 E4 85 F1 | 	sub	objptr, #9
1286c     F2 00 58 FC | 	wrword	#0, objptr
12870                 | ' cursor_y:=0
12870     02 E4 05 F1 | 	add	objptr, #2
12874     F2 00 48 FC | 	wrbyte	#0, objptr
12878                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
12878     02 E4 85 F1 | 	sub	objptr, #2
1287c     F2 14 E2 FA | 	rdword	arg02, objptr
12880     02 14 66 F0 | 	shl	arg02, #2
12884     02 E4 05 F1 | 	add	objptr, #2
12888     F2 16 C2 FA | 	rdbyte	arg03, objptr
1288c     3A E4 85 F1 | 	sub	objptr, #58
12890     04 16 66 F0 | 	shl	arg03, #4
12894     11 12 06 F6 | 	mov	arg01, #17
12898     F4 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1289c                 | ' setcursorcolor(fc)
1289c     0F 13 02 F6 | 	mov	arg01, local01
128a0     A8 EE BF FD | 	call	#_hg010b_spin2_setcursorcolor
128a4     10 FB 01 F6 | 	mov	result1, local02
128a8     00 FC 05 F6 | 	mov	result2, #0
128ac     A7 F0 03 F6 | 	mov	ptra, fp
128b0     B2 00 A0 FD | 	call	#popregs_
128b4                 | _hg010b_spin2_cls_ret
128b4     2D 00 64 FD | 	ret
128b8                 | 
128b8                 | ' 
128b8                 | ' ''---------- Output a char at the cursor position, move the cursor 
128b8                 | ' 
128b8                 | ' pub putchar(achar) | c,x,y,l,newcpl
128b8                 | _hg010b_spin2_putchar
128b8     01 4A 05 F6 | 	mov	COUNT_, #1
128bc     A8 00 A0 FD | 	call	#pushregs_
128c0     09 1F 02 F6 | 	mov	local01, arg01
128c4                 | ' 
128c4                 | ' if achar==10
128c4     0A 1E 0E F2 | 	cmp	local01, #10 wz
128c8                 | '   crlf()
128c8     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
128cc                 | ' if achar==9
128cc     09 1E 0E F2 | 	cmp	local01, #9 wz
128d0     18 00 90 5D |  if_ne	jmp	#LR__1610
128d4                 | '   cursor_x:=(cursor_x& %11110000)+16
128d4     38 E4 05 F1 | 	add	objptr, #56
128d8     F2 16 E2 FA | 	rdword	arg03, objptr
128dc     F0 16 06 F5 | 	and	arg03, #240
128e0     10 16 06 F1 | 	add	arg03, #16
128e4     F2 16 52 FC | 	wrword	arg03, objptr
128e8     38 E4 85 F1 | 	sub	objptr, #56
128ec                 | LR__1610
128ec                 | '   
128ec                 | ' if (achar<>9) && (achar<>10) 
128ec     09 1E 0E F2 | 	cmp	local01, #9 wz
128f0     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
128f4     44 00 90 AD |  if_e	jmp	#LR__1611
128f8                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
128f8     38 E4 05 F1 | 	add	objptr, #56
128fc     F2 12 E2 FA | 	rdword	arg01, objptr
12900     02 E4 05 F1 | 	add	objptr, #2
12904     F2 14 C2 FA | 	rdbyte	arg02, objptr
12908     04 14 66 F0 | 	shl	arg02, #4
1290c     03 E4 05 F1 | 	add	objptr, #3
12910     F2 18 02 FB | 	rdlong	arg04, objptr
12914     04 E4 05 F1 | 	add	objptr, #4
12918     F2 1A 02 FB | 	rdlong	arg05, objptr
1291c     41 E4 85 F1 | 	sub	objptr, #65
12920     0F 17 02 F6 | 	mov	arg03, local01
12924     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
12928                 | '   cursor_x+=2
12928     38 E4 05 F1 | 	add	objptr, #56
1292c     F2 1E E2 FA | 	rdword	local01, objptr
12930     02 1E 06 F1 | 	add	local01, #2
12934     F2 1E 52 FC | 	wrword	local01, objptr
12938     38 E4 85 F1 | 	sub	objptr, #56
1293c                 | LR__1611
1293c                 | ' 
1293c                 | ' if cursor_x>=256
1293c     38 E4 05 F1 | 	add	objptr, #56
12940     F2 1E E2 FA | 	rdword	local01, objptr
12944     38 E4 85 F1 | 	sub	objptr, #56
12948     00 1F 56 F2 | 	cmps	local01, #256 wc
1294c     64 00 90 CD |  if_b	jmp	#LR__1613
12950                 | '   cursor_x:=0
12950     38 E4 05 F1 | 	add	objptr, #56
12954     F2 00 58 FC | 	wrword	#0, objptr
12958                 | '   cursor_y+=1
12958     02 E4 05 F1 | 	add	objptr, #2
1295c     F2 1E C2 FA | 	rdbyte	local01, objptr
12960     01 1E 06 F1 | 	add	local01, #1
12964     F2 1E 42 FC | 	wrbyte	local01, objptr
12968                 | '   if cursor_y>st_lines-1
12968     C3 E4 05 F1 | 	add	objptr, #195
1296c     F2 1E 02 FB | 	rdlong	local01, objptr
12970     01 1E 86 F1 | 	sub	local01, #1
12974     C3 E4 85 F1 | 	sub	objptr, #195
12978     F2 16 C2 FA | 	rdbyte	arg03, objptr
1297c     3A E4 85 F1 | 	sub	objptr, #58
12980     0F 17 5A F2 | 	cmps	arg03, local01 wcz
12984     2C 00 90 ED |  if_be	jmp	#LR__1612
12988                 | '     scrollup()
12988     00 12 06 F6 | 	mov	arg01, #0
1298c     01 00 00 FF 
12990     40 14 06 F6 | 	mov	arg02, ##576
12994     10 16 06 F6 | 	mov	arg03, #16
12998     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1299c                 | '     cursor_y:=st_lines-1
1299c     FD E4 05 F1 | 	add	objptr, #253
129a0     F2 1E 02 FB | 	rdlong	local01, objptr
129a4     01 1E 86 F1 | 	sub	local01, #1
129a8     C3 E4 85 F1 | 	sub	objptr, #195
129ac     F2 1E 42 FC | 	wrbyte	local01, objptr
129b0     3A E4 85 F1 | 	sub	objptr, #58
129b4                 | LR__1612
129b4                 | LR__1613
129b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
129b4     38 E4 05 F1 | 	add	objptr, #56
129b8     F2 14 E2 FA | 	rdword	arg02, objptr
129bc     02 14 66 F0 | 	shl	arg02, #2
129c0     02 E4 05 F1 | 	add	objptr, #2
129c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
129c8     3A E4 85 F1 | 	sub	objptr, #58
129cc     04 16 66 F0 | 	shl	arg03, #4
129d0     11 12 06 F6 | 	mov	arg01, #17
129d4     B8 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
129d8     A7 F0 03 F6 | 	mov	ptra, fp
129dc     B2 00 A0 FD | 	call	#popregs_
129e0                 | _hg010b_spin2_putchar_ret
129e0     2D 00 64 FD | 	ret
129e4                 | 
129e4                 | '     
129e4                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
129e4                 | ' 
129e4                 | ' pub putchar2(achar) | c,x,y,l,newcpl
129e4                 | _hg010b_spin2_putchar2
129e4     01 4A 05 F6 | 	mov	COUNT_, #1
129e8     A8 00 A0 FD | 	call	#pushregs_
129ec                 | ' 
129ec                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
129ec     38 E4 05 F1 | 	add	objptr, #56
129f0     F2 1E E2 FA | 	rdword	local01, objptr
129f4     02 E4 05 F1 | 	add	objptr, #2
129f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
129fc     04 14 66 F0 | 	shl	arg02, #4
12a00     09 17 02 F6 | 	mov	arg03, arg01
12a04     03 E4 05 F1 | 	add	objptr, #3
12a08     F2 18 02 FB | 	rdlong	arg04, objptr
12a0c     04 E4 05 F1 | 	add	objptr, #4
12a10     F2 1A 02 FB | 	rdlong	arg05, objptr
12a14     41 E4 85 F1 | 	sub	objptr, #65
12a18     0F 13 02 F6 | 	mov	arg01, local01
12a1c     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
12a20                 | ' cursor_x+=2
12a20     38 E4 05 F1 | 	add	objptr, #56
12a24     F2 1E E2 FA | 	rdword	local01, objptr
12a28     02 1E 06 F1 | 	add	local01, #2
12a2c     F2 1E 52 FC | 	wrword	local01, objptr
12a30                 | ' if cursor_x>=256
12a30     F2 1E E2 FA | 	rdword	local01, objptr
12a34     38 E4 85 F1 | 	sub	objptr, #56
12a38     00 1F 56 F2 | 	cmps	local01, #256 wc
12a3c     64 00 90 CD |  if_b	jmp	#LR__1621
12a40                 | '   cursor_x:=0
12a40     38 E4 05 F1 | 	add	objptr, #56
12a44     F2 00 58 FC | 	wrword	#0, objptr
12a48                 | '   cursor_y+=1
12a48     02 E4 05 F1 | 	add	objptr, #2
12a4c     F2 1E C2 FA | 	rdbyte	local01, objptr
12a50     01 1E 06 F1 | 	add	local01, #1
12a54     F2 1E 42 FC | 	wrbyte	local01, objptr
12a58                 | '   if cursor_y>st_lines-1
12a58     C3 E4 05 F1 | 	add	objptr, #195
12a5c     F2 1E 02 FB | 	rdlong	local01, objptr
12a60     01 1E 86 F1 | 	sub	local01, #1
12a64     C3 E4 85 F1 | 	sub	objptr, #195
12a68     F2 1A C2 FA | 	rdbyte	arg05, objptr
12a6c     3A E4 85 F1 | 	sub	objptr, #58
12a70     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
12a74     2C 00 90 ED |  if_be	jmp	#LR__1620
12a78                 | '     scrollup()
12a78     00 12 06 F6 | 	mov	arg01, #0
12a7c     01 00 00 FF 
12a80     40 14 06 F6 | 	mov	arg02, ##576
12a84     10 16 06 F6 | 	mov	arg03, #16
12a88     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
12a8c                 | '     cursor_y:=st_lines-1
12a8c     FD E4 05 F1 | 	add	objptr, #253
12a90     F2 1E 02 FB | 	rdlong	local01, objptr
12a94     01 1E 86 F1 | 	sub	local01, #1
12a98     C3 E4 85 F1 | 	sub	objptr, #195
12a9c     F2 1E 42 FC | 	wrbyte	local01, objptr
12aa0     3A E4 85 F1 | 	sub	objptr, #58
12aa4                 | LR__1620
12aa4                 | LR__1621
12aa4                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
12aa4     38 E4 05 F1 | 	add	objptr, #56
12aa8     F2 14 E2 FA | 	rdword	arg02, objptr
12aac     02 14 66 F0 | 	shl	arg02, #2
12ab0     02 E4 05 F1 | 	add	objptr, #2
12ab4     F2 16 C2 FA | 	rdbyte	arg03, objptr
12ab8     3A E4 85 F1 | 	sub	objptr, #58
12abc     04 16 66 F0 | 	shl	arg03, #4
12ac0     11 12 06 F6 | 	mov	arg01, #17
12ac4     C8 EF BF FD | 	call	#_hg010b_spin2_setspritepos
12ac8     A7 F0 03 F6 | 	mov	ptra, fp
12acc     B2 00 A0 FD | 	call	#popregs_
12ad0                 | _hg010b_spin2_putchar2_ret
12ad0     2D 00 64 FD | 	ret
12ad4                 | 
12ad4                 | ' ''--------- Output a string at the cursor position, move the cursor  
12ad4                 | ' 
12ad4                 | ' pub write(text) | iii,c,ncx,ncy
12ad4                 | _hg010b_spin2_write
12ad4     04 4A 05 F6 | 	mov	COUNT_, #4
12ad8     A8 00 A0 FD | 	call	#pushregs_
12adc     09 1F 02 F6 | 	mov	local01, arg01
12ae0                 | ' 
12ae0                 | ' repeat iii from 0 to strsize(text)-1
12ae0     00 20 06 F6 | 	mov	local02, #0
12ae4     0F 13 02 F6 | 	mov	arg01, local01
12ae8     09 23 02 F6 | 	mov	local03, arg01
12aec     97 06 48 FB | 	callpa	#(@LR__1631-@LR__1630)>>2,fcache_load_ptr_
12af0                 | LR__1630
12af0     11 FB C9 FA | 	rdbyte	result1, local03 wz
12af4     01 22 06 51 |  if_ne	add	local03, #1
12af8     F4 FF 9F 5D |  if_ne	jmp	#LR__1630
12afc                 | LR__1631
12afc     09 23 82 F1 | 	sub	local03, arg01
12b00     01 22 86 F1 | 	sub	local03, #1
12b04     00 22 56 F2 | 	cmps	local03, #0 wc
12b08     01 24 86 F6 | 	negc	local04, #1
12b0c     12 23 02 F1 | 	add	local03, local04
12b10                 | LR__1632
12b10                 | '   putchar2(byte[text+iii])
12b10     0F 13 02 F6 | 	mov	arg01, local01
12b14     10 13 02 F1 | 	add	arg01, local02
12b18     09 13 C2 FA | 	rdbyte	arg01, arg01
12b1c     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
12b20     12 21 02 F1 | 	add	local02, local04
12b24     11 21 0A F2 | 	cmp	local02, local03 wz
12b28     E4 FF 9F 5D |  if_ne	jmp	#LR__1632
12b2c     A7 F0 03 F6 | 	mov	ptra, fp
12b30     B2 00 A0 FD | 	call	#popregs_
12b34                 | _hg010b_spin2_write_ret
12b34     2D 00 64 FD | 	ret
12b38                 | 
12b38                 | ' 
12b38                 | ' ''-----------  Scroll the screen one line up
12b38                 | ' 
12b38                 | ' pub scrollup(start=0, end=576 , amount=16) | i
12b38                 | _hg010b_spin2_scrollup
12b38     01 4A 05 F6 | 	mov	COUNT_, #1
12b3c     A8 00 A0 FD | 	call	#pushregs_
12b40                 | ' 	
12b40                 | ' repeat i from 0 to 559 
12b40     00 1E 06 F6 | 	mov	local01, #0
12b44                 | LR__1640
12b44     F5 E4 05 F1 | 	add	objptr, #245
12b48     F2 18 02 FB | 	rdlong	arg04, objptr
12b4c     1C E4 85 F1 | 	sub	objptr, #28
12b50     F2 14 02 FB | 	rdlong	arg02, objptr
12b54     0F 13 02 F6 | 	mov	arg01, local01
12b58     10 12 06 F1 | 	add	arg01, #16
12b5c     02 12 66 F0 | 	shl	arg01, #2
12b60     14 E4 05 F1 | 	add	objptr, #20
12b64     F2 16 02 FB | 	rdlong	arg03, objptr
12b68     0B 13 02 FD | 	qmul	arg01, arg03
12b6c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
12b6c     F6 03 00 FF 
12b70     00 12 06 F6 | 	mov	arg01, ##519168
12b74     0C 13 82 F1 | 	sub	arg01, arg04
12b78     02 16 66 F0 | 	shl	arg03, #2
12b7c     01 00 00 FF 
12b80     D3 E5 05 F1 | 	add	objptr, ##979
12b84     18 18 62 FD | 	getqx	arg04
12b88     0C 15 02 F1 | 	add	arg02, arg04
12b8c     7C 04 B0 FD | 	call	#_psram_spin2_read1
12b90     01 00 00 FF 
12b94     CB E5 85 F1 | 	sub	objptr, ##971
12b98     F2 18 02 FB | 	rdlong	arg04, objptr
12b9c     1C E4 85 F1 | 	sub	objptr, #28
12ba0     F2 14 02 FB | 	rdlong	arg02, objptr
12ba4     0F 13 02 F6 | 	mov	arg01, local01
12ba8     02 12 66 F0 | 	shl	arg01, #2
12bac     14 E4 05 F1 | 	add	objptr, #20
12bb0     F2 16 02 FB | 	rdlong	arg03, objptr
12bb4     0B 13 02 FD | 	qmul	arg01, arg03
12bb8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
12bb8     F6 03 00 FF 
12bbc     00 12 06 F6 | 	mov	arg01, ##519168
12bc0     0C 13 82 F1 | 	sub	arg01, arg04
12bc4     02 16 66 F0 | 	shl	arg03, #2
12bc8     01 00 00 FF 
12bcc     D3 E5 05 F1 | 	add	objptr, ##979
12bd0     18 18 62 FD | 	getqx	arg04
12bd4     0C 15 02 F1 | 	add	arg02, arg04
12bd8     CC 04 B0 FD | 	call	#_psram_spin2_write
12bdc     02 00 00 FF 
12be0     C0 E4 85 F1 | 	sub	objptr, ##1216
12be4     01 1E 06 F1 | 	add	local01, #1
12be8     01 00 00 FF 
12bec     30 1E 56 F2 | 	cmps	local01, ##560 wc
12bf0     50 FF 9F CD |  if_b	jmp	#LR__1640
12bf4                 | ' 
12bf4                 | ' repeat i from 560 to 575
12bf4     01 00 00 FF 
12bf8     30 1E 06 F6 | 	mov	local01, ##560
12bfc                 | LR__1641
12bfc                 | '    fastline(0,1023,i,write_background)   
12bfc     41 E4 05 F1 | 	add	objptr, #65
12c00     F2 18 02 FB | 	rdlong	arg04, objptr
12c04     41 E4 85 F1 | 	sub	objptr, #65
12c08     00 12 06 F6 | 	mov	arg01, #0
12c0c     09 14 CE F9 | 	bmask	arg02, #9
12c10     0F 17 02 F6 | 	mov	arg03, local01
12c14     B8 F0 BF FD | 	call	#_hg010b_spin2_fastline
12c18     01 1E 06 F1 | 	add	local01, #1
12c1c     01 00 00 FF 
12c20     40 1E 16 F2 | 	cmp	local01, ##576 wc
12c24     D4 FF 9F CD |  if_b	jmp	#LR__1641
12c28     A7 F0 03 F6 | 	mov	ptra, fp
12c2c     B2 00 A0 FD | 	call	#popregs_
12c30                 | _hg010b_spin2_scrollup_ret
12c30     2D 00 64 FD | 	ret
12c34                 | 
12c34                 | ' 
12c34                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
12c34                 | ' 
12c34                 | ' pub crlf()
12c34                 | _hg010b_spin2_crlf
12c34                 | ' 
12c34                 | ' cursor_x:=leading_spaces*2
12c34     01 00 00 FF 
12c38     B2 E4 05 F1 | 	add	objptr, ##690
12c3c     F2 16 02 FB | 	rdlong	arg03, objptr
12c40     01 16 66 F0 | 	shl	arg03, #1
12c44     01 00 00 FF 
12c48     7A E4 85 F1 | 	sub	objptr, ##634
12c4c     F2 16 52 FC | 	wrword	arg03, objptr
12c50                 | ' cursor_y+=1
12c50     02 E4 05 F1 | 	add	objptr, #2
12c54     F2 16 C2 FA | 	rdbyte	arg03, objptr
12c58     01 16 06 F1 | 	add	arg03, #1
12c5c     F2 16 42 FC | 	wrbyte	arg03, objptr
12c60                 | ' if cursor_y>st_lines-1
12c60     C3 E4 05 F1 | 	add	objptr, #195
12c64     F2 16 02 FB | 	rdlong	arg03, objptr
12c68     01 16 86 F1 | 	sub	arg03, #1
12c6c     C3 E4 85 F1 | 	sub	objptr, #195
12c70     F2 14 C2 FA | 	rdbyte	arg02, objptr
12c74     3A E4 85 F1 | 	sub	objptr, #58
12c78     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
12c7c     2C 00 90 ED |  if_be	jmp	#LR__1650
12c80                 | '   scrollup()
12c80     00 12 06 F6 | 	mov	arg01, #0
12c84     01 00 00 FF 
12c88     40 14 06 F6 | 	mov	arg02, ##576
12c8c     10 16 06 F6 | 	mov	arg03, #16
12c90     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
12c94                 | '   cursor_y:=st_lines-1
12c94     FD E4 05 F1 | 	add	objptr, #253
12c98     F2 16 02 FB | 	rdlong	arg03, objptr
12c9c     01 16 86 F1 | 	sub	arg03, #1
12ca0     C3 E4 85 F1 | 	sub	objptr, #195
12ca4     F2 16 42 FC | 	wrbyte	arg03, objptr
12ca8     3A E4 85 F1 | 	sub	objptr, #58
12cac                 | LR__1650
12cac                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
12cac     38 E4 05 F1 | 	add	objptr, #56
12cb0     F2 14 E2 FA | 	rdword	arg02, objptr
12cb4     02 14 66 F0 | 	shl	arg02, #2
12cb8     02 E4 05 F1 | 	add	objptr, #2
12cbc     F2 16 C2 FA | 	rdbyte	arg03, objptr
12cc0     3A E4 85 F1 | 	sub	objptr, #58
12cc4     04 16 66 F0 | 	shl	arg03, #4
12cc8     11 12 06 F6 | 	mov	arg01, #17
12ccc     C0 ED BF FD | 	call	#_hg010b_spin2_setspritepos
12cd0                 | _hg010b_spin2_crlf_ret
12cd0     2D 00 64 FD | 	ret
12cd4                 | 
12cd4                 | ' 
12cd4                 | ' 
12cd4                 | ' '*************************************************************************
12cd4                 | ' '                                                                        *
12cd4                 | ' '  Conversions                                                           *
12cd4                 | ' '                                                                        *
12cd4                 | ' '*************************************************************************
12cd4                 | ' 
12cd4                 | ' ''---------- Convert a integer to dec string, return a pointer
12cd4                 | ' 
12cd4                 | ' pub inttostr(i):result |q,pos,k,j
12cd4                 | _hg010b_spin2_inttostr
12cd4     03 4A 05 F6 | 	mov	COUNT_, #3
12cd8     A8 00 A0 FD | 	call	#pushregs_
12cdc     09 1F 0A F6 | 	mov	local01, arg01 wz
12ce0                 | ' 
12ce0                 | ' j:=i
12ce0                 | ' pos:=10
12ce0     0A 20 06 F6 | 	mov	local02, #10
12ce4                 | ' k:=0
12ce4     00 22 06 F6 | 	mov	local03, #0
12ce8                 | ' 
12ce8                 | ' if (j==0)
12ce8     18 00 90 5D |  if_ne	jmp	#LR__1660
12cec                 | '   n_string[0]:=48
12cec     49 E4 05 F1 | 	add	objptr, #73
12cf0     F2 60 48 FC | 	wrbyte	#48, objptr
12cf4                 | '   n_string[1]:=0
12cf4     01 E4 05 F1 | 	add	objptr, #1
12cf8     F2 00 48 FC | 	wrbyte	#0, objptr
12cfc     4A E4 85 F1 | 	sub	objptr, #74
12d00     C4 00 90 FD | 	jmp	#LR__1667
12d04                 | LR__1660
12d04                 | ' 
12d04                 | ' else
12d04                 | '   if (j<0)
12d04     0F 1F 52 F6 | 	abs	local01, local01 wc
12d08                 | '     j:=0-j
12d08                 | '     k:=45
12d08     2D 22 06 C6 |  if_b	mov	local03, #45
12d0c                 | ' 
12d0c                 | '   n_string[11]:=0
12d0c     54 E4 05 F1 | 	add	objptr, #84
12d10     F2 00 48 FC | 	wrbyte	#0, objptr
12d14     54 E4 85 F1 | 	sub	objptr, #84
12d18     97 24 48 FB | 	callpa	#(@LR__1662-@LR__1661)>>2,fcache_load_ptr_
12d1c                 | '   repeat while (pos>-1)
12d1c                 | LR__1661
12d1c     00 20 56 F2 | 	cmps	local02, #0 wc
12d20     40 00 90 CD |  if_b	jmp	#LR__1663
12d24     0F FB 51 F6 | 	abs	result1, local01 wc
12d28     0A FA 15 FD | 	qdiv	result1, #10
12d2c                 | '     q:=j//10
12d2c     19 FA 61 FD | 	getqy	result1
12d30     FD FA 81 F6 | 	negc	result1, result1
12d34     0F 1F 52 F6 | 	abs	local01, local01 wc
12d38     0A 1E 16 FD | 	qdiv	local01, #10
12d3c                 | '     q:=48+q
12d3c     30 FA 05 F1 | 	add	result1, #48
12d40                 | '     n_string[pos]:=q
12d40     10 1F 02 F6 | 	mov	local01, local02
12d44     49 E4 05 F1 | 	add	objptr, #73
12d48     F2 1E 02 F1 | 	add	local01, objptr
12d4c     0F FB 41 FC | 	wrbyte	result1, local01
12d50                 | '     j:=j/10
12d50     49 E4 85 F1 | 	sub	objptr, #73
12d54                 | '     pos-=1
12d54     01 20 86 F1 | 	sub	local02, #1
12d58     18 1E 62 FD | 	getqx	local01
12d5c     0F 1F 82 F6 | 	negc	local01, local01
12d60     B8 FF 9F FD | 	jmp	#LR__1661
12d64                 | LR__1662
12d64                 | LR__1663
12d64                 | '   repeat while n_string[0]==48
12d64                 | LR__1664
12d64     49 E4 05 F1 | 	add	objptr, #73
12d68     F2 16 C2 FA | 	rdbyte	arg03, objptr
12d6c     49 E4 85 F1 | 	sub	objptr, #73
12d70     30 16 0E F2 | 	cmp	arg03, #48 wz
12d74     20 00 90 5D |  if_ne	jmp	#LR__1665
12d78                 | '     bytemove(@n_string,@n_string+1,12)
12d78     49 E4 05 F1 | 	add	objptr, #73
12d7c     F2 12 02 F6 | 	mov	arg01, objptr
12d80     F2 14 02 F6 | 	mov	arg02, objptr
12d84     49 E4 85 F1 | 	sub	objptr, #73
12d88     01 14 06 F1 | 	add	arg02, #1
12d8c     0C 16 06 F6 | 	mov	arg03, #12
12d90     84 0C B0 FD | 	call	#__system____builtin_memmove
12d94     CC FF 9F FD | 	jmp	#LR__1664
12d98                 | LR__1665
12d98                 | ' 
12d98                 | '   if k==45
12d98     2D 22 0E F2 | 	cmp	local03, #45 wz
12d9c     28 00 90 5D |  if_ne	jmp	#LR__1666
12da0                 | '      bytemove(@n_string+1,@n_string,12)
12da0     49 E4 05 F1 | 	add	objptr, #73
12da4     F2 12 02 F6 | 	mov	arg01, objptr
12da8     01 12 06 F1 | 	add	arg01, #1
12dac     F2 14 02 F6 | 	mov	arg02, objptr
12db0     49 E4 85 F1 | 	sub	objptr, #73
12db4     0C 16 06 F6 | 	mov	arg03, #12
12db8     5C 0C B0 FD | 	call	#__system____builtin_memmove
12dbc                 | '      n_string[0]:=k
12dbc     49 E4 05 F1 | 	add	objptr, #73
12dc0     F2 22 42 FC | 	wrbyte	local03, objptr
12dc4     49 E4 85 F1 | 	sub	objptr, #73
12dc8                 | LR__1666
12dc8                 | LR__1667
12dc8                 | ' 
12dc8                 | ' q:=@n_string
12dc8     49 E4 05 F1 | 	add	objptr, #73
12dcc     F2 FA 01 F6 | 	mov	result1, objptr
12dd0     49 E4 85 F1 | 	sub	objptr, #73
12dd4                 | ' return q
12dd4     A7 F0 03 F6 | 	mov	ptra, fp
12dd8     B2 00 A0 FD | 	call	#popregs_
12ddc                 | _hg010b_spin2_inttostr_ret
12ddc     2D 00 64 FD | 	ret
12de0                 | 
12de0                 | ' 
12de0                 | ' '..............................................................................
12de0                 | ' 
12de0                 | ' {{
12de0                 | ' }}
12de0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
12de0                 | _psram_spin2_startx
12de0     04 4A 05 F6 | 	mov	COUNT_, #4
12de4     A8 00 A0 FD | 	call	#pushregs_
12de8     09 1F 02 F6 | 	mov	local01, arg01
12dec     0B 21 02 F6 | 	mov	local02, arg03
12df0     0C 23 02 F6 | 	mov	local03, arg04
12df4                 | '     stop() ' restart driver if required
12df4     54 01 B0 FD | 	call	#_psram_spin2_stop
12df8     00 1E 0E F2 | 	cmp	local01, #0 wz
12dfc     14 1E 06 AB |  if_e	rdlong	local01, #20
12e00     0F 15 52 F6 | 	abs	arg02, local01 wc
12e04     A1 07 00 FF 
12e08     40 14 16 FD | 	qdiv	arg02, ##1000000
12e0c                 | ' 
12e0c                 | '     ' use current frequency if none specified
12e0c                 | ' 
12e0c                 | '     if freq == 0 
12e0c                 | '         freq := clkfreq 
12e0c                 | ' 
12e0c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
12e0c                 | ' 
12e0c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
12e0c                 | '     if burst < 0
12e0c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
12e0c     18 14 62 FD | 	getqx	arg02
12e10     0A 19 82 F6 | 	negc	arg04, arg02
12e14     03 18 66 F0 | 	shl	arg04, #3
12e18     84 18 86 F1 | 	sub	arg04, #132
12e1c     04 18 46 F0 | 	shr	arg04, #4
12e20     04 18 66 F0 | 	shl	arg04, #4
12e24     00 18 56 F2 | 	cmps	arg04, #0 wc
12e28     0E FA 65 C6 |  if_b	neg	result1, #14
12e2c     10 01 90 CD |  if_b	jmp	#LR__1673
12e30                 | ' 
12e30                 | '     ' compute the input delay
12e30                 | ' 
12e30                 | '     if delay <= 0
12e30     01 20 56 F2 | 	cmps	local02, #1 wc
12e34     10 00 90 3D |  if_ae	jmp	#LR__1670
12e38                 | '         delay := lookupDelay(freq)
12e38     0F 13 02 F6 | 	mov	arg01, local01
12e3c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
12e40     FD 20 02 F6 | 	mov	local02, result1
12e44     04 00 90 FD | 	jmp	#LR__1671
12e48                 | LR__1670
12e48                 | '     else
12e48                 | '         delay <#= $f ' limit to 15
12e48     0F 20 66 F3 | 	fles	local02, #15
12e4c                 | LR__1671
12e4c                 | ' 
12e4c                 | '     ' create our lock
12e4c                 | ' 
12e4c                 | '     driverlock := LOCKNEW()  
12e4c     00 FA 05 F6 | 	mov	result1, #0
12e50     04 FA 61 FD | 	locknew	result1
12e54     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
12e58     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
12e5c                 | '     if driverlock == -1
12e5c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
12e60     FF FF 7F FF 
12e64     FF FB 0D F2 | 	cmp	result1, ##-1 wz
12e68                 | '         return ERR_NO_LOCK
12e68     1A FA 65 A6 |  if_e	neg	result1, #26
12e6c     D0 00 90 AD |  if_e	jmp	#LR__1673
12e70                 | ' 
12e70                 | '     ' patch in the proper data and HUB addresses to the startup structure
12e70                 | ' 
12e70                 | '     long[@startupData][0]:=clkfreq
12e70     14 1E 06 FB | 	rdlong	local01, #20
12e74     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
12e78     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
12e7c                 | ' '    long[@startupData][1]:=$1000_0000
12e7c                 | '     long[@startupData][5]:=@deviceData
12e7c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
12e80     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
12e84     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
12e88     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
12e8c     14 14 06 F1 | 	add	arg02, #20
12e90     0A 1F 62 FC | 	wrlong	local01, arg02
12e94                 | '     long[@startupData][6]:=@qosData
12e94     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
12e98     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
12e9c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
12ea0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
12ea4     18 14 06 F1 | 	add	arg02, #24
12ea8     0A 1F 62 FC | 	wrlong	local01, arg02
12eac                 | '     long[@startupData][7]:=$7FF00
12eac     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
12eb0     1C 1E 06 F1 | 	add	local01, #28
12eb4     FF 03 80 FF 
12eb8     0F 01 6A FC | 	wrlong	##524032, local01
12ebc                 | ' 
12ebc                 | '     ' setup some default bank and QoS parameter values
12ebc                 | ' 
12ebc                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
12ebc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
12ec0     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
12ec4     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
12ec8     10 18 66 F0 | 	shl	arg04, #16
12ecc     0C 20 66 F0 | 	shl	local02, #12
12ed0     10 19 42 F5 | 	or	arg04, local02
12ed4     18 18 46 F5 | 	or	arg04, #24
12ed8     0C 15 02 F6 | 	mov	arg02, arg04
12edc     02 16 06 F6 | 	mov	arg03, #2
12ee0     A0 00 A0 FD | 	call	#\builtin_longfill_
12ee4                 | '     longfill(@qosData, $FFFF0000, 8)
12ee4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
12ee8     07 16 06 F6 | 	mov	arg03, #7
12eec     28 16 62 FD | 	setq	arg03
12ef0     80 FF FF FF 
12ef4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
12ef8                 | ' 
12ef8                 | '     ' get the address of the PSRAM memory driver so we can start it
12ef8                 | ' 
12ef8                 | '     driverAddr:= driver.getDriverAddr()
12ef8                 | '     return @driver_start
12ef8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
12efc     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
12f00     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
12f04                 | ' 
12f04                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
12f04                 | ' 
12f04                 | '     if desiredcog < 0
12f04     00 22 56 F2 | 	cmps	local03, #0 wc
12f08                 | '         desiredcog := NEWCOG
12f08     10 22 06 C6 |  if_b	mov	local03, #16
12f0c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
12f0c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
12f10     11 25 02 F6 | 	mov	local04, local03
12f14     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
12f18     0A 25 F2 FC | 	coginit	local04, arg02 wc
12f1c     01 24 66 C6 |  if_b	neg	local04, #1
12f20     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
12f24     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
12f28                 | '     repeat until long[@startupData] == 0 
12f28     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
12f2c                 | LR__1672
12f2c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
12f30     F8 FF 9F 5D |  if_ne	jmp	#LR__1672
12f34                 | ' 
12f34                 | '     return drivercog
12f34     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
12f38     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
12f3c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12f40                 | LR__1673
12f40     A7 F0 03 F6 | 	mov	ptra, fp
12f44     B2 00 A0 FD | 	call	#popregs_
12f48                 | _psram_spin2_startx_ret
12f48     2D 00 64 FD | 	ret
12f4c                 | 
12f4c                 | ' 
12f4c                 | ' '..............................................................................
12f4c                 | ' 
12f4c                 | ' {{
12f4c                 | ' }}
12f4c                 | ' PUB stop() : i
12f4c                 | _psram_spin2_stop
12f4c     00 00 06 F6 | 	mov	_var01, #0
12f50                 | '     if drivercog <> -1
12f50     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
12f54     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
12f58     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12f5c     FF FF 7F FF 
12f60     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
12f64     70 00 90 AD |  if_e	jmp	#LR__1683
12f68                 | '         cogstop(drivercog) ' a rather brutal stop
12f68     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
12f6c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
12f70     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12f74     03 12 62 FD | 	cogstop	arg01
12f78     97 26 48 FB | 	callpa	#(@LR__1682-@LR__1680)>>2,fcache_load_ptr_
12f7c                 | '         repeat i from 0 to 7
12f7c                 | LR__1680
12f7c                 | '             if long[$7FF00][i*3] < 0
12f7c     00 FB 01 F6 | 	mov	result1, _var01
12f80     01 FA 65 F0 | 	shl	result1, #1
12f84     00 FB 01 F1 | 	add	result1, _var01
12f88     02 FA 65 F0 | 	shl	result1, #2
12f8c     FF 03 00 FF 
12f90     00 FB 05 F1 | 	add	result1, ##524032
12f94     FD FA 01 FB | 	rdlong	result1, result1
12f98     00 FA 55 F2 | 	cmps	result1, #0 wc
12f9c     1C 00 90 3D |  if_ae	jmp	#LR__1681
12fa0                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
12fa0     00 FB 01 F6 | 	mov	result1, _var01
12fa4     01 FA 65 F0 | 	shl	result1, #1
12fa8     00 FB 01 F1 | 	add	result1, _var01
12fac     02 FA 65 F0 | 	shl	result1, #2
12fb0     FF 03 00 FF 
12fb4     00 FB 05 F1 | 	add	result1, ##524032
12fb8     FD 20 68 FC | 	wrlong	#16, result1
12fbc                 | LR__1681
12fbc     01 00 06 F1 | 	add	_var01, #1
12fc0     08 00 56 F2 | 	cmps	_var01, #8 wc
12fc4     B4 FF 9F CD |  if_b	jmp	#LR__1680
12fc8                 | LR__1682
12fc8                 | '         drivercog := -1
12fc8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
12fcc     FF FF FF FF 
12fd0     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
12fd4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
12fd8                 | LR__1683
12fd8                 | '     if driverlock <> -1
12fd8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
12fdc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
12fe0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
12fe4     FF FF 7F FF 
12fe8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
12fec                 | '         LOCKRET(driverlock)
12fec     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
12ff0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
12ff4     05 12 62 5D |  if_ne	lockret	arg01
12ff8                 | '         driverlock := -1
12ff8     FF FF FF 5F 
12ffc     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
13000     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
13004     00 FB 01 F6 | 	mov	result1, _var01
13008                 | _psram_spin2_stop_ret
13008     2D 00 64 FD | 	ret
1300c                 | 
1300c                 | ' 
1300c                 | ' '..............................................................................
1300c                 | ' 
1300c                 | ' {{
1300c                 | ' }}
1300c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1300c                 | _psram_spin2_read1
1300c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1300c                 | '     if drivercog == -1 ' driver must be running
1300c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
13010     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
13014     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
13018     FF FF 7F FF 
1301c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
13020                 | '         return ERR_INACTIVE
13020     0F FA 65 A6 |  if_e	neg	result1, #15
13024     7C 00 90 AD |  if_e	jmp	#LR__1691
13028                 | '     if count == 0 ' don't even bother reading
13028     00 16 0E F2 | 	cmp	arg03, #0 wz
1302c                 | '         return 0
1302c     00 FA 05 A6 |  if_e	mov	result1, #0
13030     70 00 90 AD |  if_e	jmp	#LR__1691
13034                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
13034     00 FA 05 F6 | 	mov	result1, #0
13038     01 FA 61 FD | 	cogid	result1
1303c     FD 00 02 F6 | 	mov	_var01, result1
13040     01 00 66 F0 | 	shl	_var01, #1
13044     FD 00 02 F1 | 	add	_var01, result1
13048     02 00 66 F0 | 	shl	_var01, #2
1304c     FF 03 00 FF 
13050     00 03 06 F6 | 	mov	_var02, ##524032
13054     00 03 02 F1 | 	add	_var02, _var01
13058                 | '     if long[mailbox] < 0
13058     01 01 02 FB | 	rdlong	_var01, _var02
1305c     00 00 56 F2 | 	cmps	_var01, #0 wc
13060                 | '         return ERR_MAILBOX_BUSY
13060     1C FA 65 C6 |  if_b	neg	result1, #28
13064     3C 00 90 CD |  if_b	jmp	#LR__1691
13068                 | '     long[mailbox][2] := count
13068     08 02 06 F1 | 	add	_var02, #8
1306c     01 17 62 FC | 	wrlong	arg03, _var02
13070                 | '     long[mailbox][1] := dstHubAddr
13070     04 02 86 F1 | 	sub	_var02, #4
13074     01 13 62 FC | 	wrlong	arg01, _var02
13078     04 02 86 F1 | 	sub	_var02, #4
1307c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1307c     0A 05 02 F6 | 	mov	_var03, arg02
13080     D9 04 06 F4 | 	bitl	_var03, #217
13084     00 00 58 FF 
13088     00 00 06 F6 | 	mov	_var01, ##-1342177280
1308c     02 01 02 F1 | 	add	_var01, _var03
13090     01 01 62 FC | 	wrlong	_var01, _var02
13094                 | '     repeat
13094                 | LR__1690
13094                 | '         result := long[mailbox]    
13094     01 05 02 FB | 	rdlong	_var03, _var02
13098     00 04 56 F2 | 	cmps	_var03, #0 wc
1309c     F4 FF 9F CD |  if_b	jmp	#LR__1690
130a0                 | '     while result < 0   
130a0                 | '     return -result                       'return success or error
130a0     02 FB 61 F6 | 	neg	result1, _var03
130a4                 | LR__1691
130a4                 | _psram_spin2_read1_ret
130a4     2D 00 64 FD | 	ret
130a8                 | 
130a8                 | ' 
130a8                 | ' '..............................................................................
130a8                 | ' 
130a8                 | ' {{
130a8                 | ' }}
130a8                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
130a8                 | _psram_spin2_write
130a8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
130a8                 | '     if drivercog == -1 ' driver must be running
130a8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
130ac     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
130b0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
130b4     FF FF 7F FF 
130b8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
130bc                 | '         return ERR_INACTIVE
130bc     0F FA 65 A6 |  if_e	neg	result1, #15
130c0     7C 00 90 AD |  if_e	jmp	#LR__1701
130c4                 | '     if count == 0 ' don't even bother writing
130c4     00 16 0E F2 | 	cmp	arg03, #0 wz
130c8                 | '         return 0
130c8     00 FA 05 A6 |  if_e	mov	result1, #0
130cc     70 00 90 AD |  if_e	jmp	#LR__1701
130d0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
130d0     00 FA 05 F6 | 	mov	result1, #0
130d4     01 FA 61 FD | 	cogid	result1
130d8     FD 00 02 F6 | 	mov	_var01, result1
130dc     01 00 66 F0 | 	shl	_var01, #1
130e0     FD 00 02 F1 | 	add	_var01, result1
130e4     02 00 66 F0 | 	shl	_var01, #2
130e8     FF 03 00 FF 
130ec     00 03 06 F6 | 	mov	_var02, ##524032
130f0     00 03 02 F1 | 	add	_var02, _var01
130f4                 | '     if long[mailbox] < 0
130f4     01 01 02 FB | 	rdlong	_var01, _var02
130f8     00 00 56 F2 | 	cmps	_var01, #0 wc
130fc                 | '         return ERR_MAILBOX_BUSY
130fc     1C FA 65 C6 |  if_b	neg	result1, #28
13100     3C 00 90 CD |  if_b	jmp	#LR__1701
13104                 | '     long[mailbox][2] := count
13104     08 02 06 F1 | 	add	_var02, #8
13108     01 17 62 FC | 	wrlong	arg03, _var02
1310c                 | '     long[mailbox][1] := srcHubAddr
1310c     04 02 86 F1 | 	sub	_var02, #4
13110     01 13 62 FC | 	wrlong	arg01, _var02
13114     04 02 86 F1 | 	sub	_var02, #4
13118                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
13118     0A 05 02 F6 | 	mov	_var03, arg02
1311c     D9 04 06 F4 | 	bitl	_var03, #217
13120     00 00 78 FF 
13124     00 00 06 F6 | 	mov	_var01, ##-268435456
13128     02 01 02 F1 | 	add	_var01, _var03
1312c     01 01 62 FC | 	wrlong	_var01, _var02
13130                 | '     repeat
13130                 | LR__1700
13130                 | '         result := long[mailbox]    
13130     01 05 02 FB | 	rdlong	_var03, _var02
13134     00 04 56 F2 | 	cmps	_var03, #0 wc
13138     F4 FF 9F CD |  if_b	jmp	#LR__1700
1313c                 | '     while result < 0   
1313c                 | '     return -result                       'return success or error
1313c     02 FB 61 F6 | 	neg	result1, _var03
13140                 | LR__1701
13140                 | _psram_spin2_write_ret
13140     2D 00 64 FD | 	ret
13144                 | 
13144                 | ' 
13144                 | ' ' generalized fill
13144                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
13144                 | _psram_spin2_fill
13144     09 01 02 F6 | 	mov	_var01, arg01
13148     0A 03 02 F6 | 	mov	_var02, arg02
1314c     0B 05 02 F6 | 	mov	_var03, arg03
13150     0D 07 02 F6 | 	mov	_var04, arg05
13154                 | '     case datasize 
13154     01 06 86 F1 | 	sub	_var04, #1
13158     04 06 26 F3 | 	fle	_var04, #4
1315c     30 06 62 FD | 	jmprel	_var04
13160                 | LR__1710
13160     10 00 90 FD | 	jmp	#LR__1711
13164     18 00 90 FD | 	jmp	#LR__1712
13168     2C 00 90 FD | 	jmp	#LR__1714
1316c     1C 00 90 FD | 	jmp	#LR__1713
13170     24 00 90 FD | 	jmp	#LR__1714
13174                 | LR__1711
13174                 | '         1: req := driver.R_WRITEBYTE
13174     00 00 60 FF 
13178     00 08 06 F6 | 	mov	_var05, ##-1073741824
1317c     20 00 90 FD | 	jmp	#LR__1715
13180                 | LR__1712
13180                 | '         2: req := driver.R_WRITEWORD
13180     00 00 68 FF 
13184     00 08 06 F6 | 	mov	_var05, ##-805306368
13188     14 00 90 FD | 	jmp	#LR__1715
1318c                 | LR__1713
1318c                 | '         4: req := driver.R_WRITELONG
1318c     00 00 70 FF 
13190     00 08 06 F6 | 	mov	_var05, ##-536870912
13194     08 00 90 FD | 	jmp	#LR__1715
13198                 | LR__1714
13198                 | '         other : return ERR_INVALID
13198     06 FA 65 F6 | 	neg	result1, #6
1319c     94 00 90 FD | 	jmp	#LR__1717
131a0                 | LR__1715
131a0                 | '     if count == 0   ' nothing to do
131a0     00 04 0E F2 | 	cmp	_var03, #0 wz
131a4                 | '         return 0
131a4     00 FA 05 A6 |  if_e	mov	result1, #0
131a8     88 00 90 AD |  if_e	jmp	#LR__1717
131ac                 | '     if drivercog == -1
131ac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
131b0     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
131b4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
131b8     FF FF 7F FF 
131bc     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
131c0                 | '         return ERR_INACTIVE
131c0     0F FA 65 A6 |  if_e	neg	result1, #15
131c4     6C 00 90 AD |  if_e	jmp	#LR__1717
131c8                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
131c8     00 FA 05 F6 | 	mov	result1, #0
131cc     01 FA 61 FD | 	cogid	result1
131d0     FD 06 02 F6 | 	mov	_var04, result1
131d4     01 06 66 F0 | 	shl	_var04, #1
131d8     FD 06 02 F1 | 	add	_var04, result1
131dc     02 06 66 F0 | 	shl	_var04, #2
131e0     FF 03 00 FF 
131e4     00 0B 06 F6 | 	mov	_var06, ##524032
131e8     03 0B 02 F1 | 	add	_var06, _var04
131ec                 | '     if long[mailbox] < 0
131ec     05 07 02 FB | 	rdlong	_var04, _var06
131f0     00 06 56 F2 | 	cmps	_var04, #0 wc
131f4                 | '         return ERR_MAILBOX_BUSY
131f4     1C FA 65 C6 |  if_b	neg	result1, #28
131f8     38 00 90 CD |  if_b	jmp	#LR__1717
131fc                 | '     long[mailbox][2] := count
131fc     08 0A 06 F1 | 	add	_var06, #8
13200     05 05 62 FC | 	wrlong	_var03, _var06
13204                 | '     long[mailbox][1] := pattern
13204     04 0A 86 F1 | 	sub	_var06, #4
13208     05 03 62 FC | 	wrlong	_var02, _var06
1320c     04 0A 86 F1 | 	sub	_var06, #4
13210                 | '     long[mailbox] := req + (addr & $fffffff)
13210     04 0D 02 F6 | 	mov	_var07, _var05
13214     00 0F 02 F6 | 	mov	_var08, _var01
13218     7C 0E 06 F4 | 	bitl	_var08, #124
1321c     07 0D 02 F1 | 	add	_var07, _var08
13220     05 0D 62 FC | 	wrlong	_var07, _var06
13224                 | '     repeat
13224                 | LR__1716
13224                 | '         r := long[mailbox]
13224     05 0F 02 FB | 	rdlong	_var08, _var06
13228     00 0E 56 F2 | 	cmps	_var08, #0 wc
1322c     F4 FF 9F CD |  if_b	jmp	#LR__1716
13230                 | '     while r < 0
13230                 | '     return -r                  ' return 0 for success or negated error code
13230     07 FB 61 F6 | 	neg	result1, _var08
13234                 | LR__1717
13234                 | _psram_spin2_fill_ret
13234     2D 00 64 FD | 	ret
13238                 | 
13238                 | ' 
13238                 | ' '..............................................................................
13238                 | ' 
13238                 | ' {{
13238                 | ' }}
13238                 | ' PUB setQos(cog, qos) : result | mailbox
13238                 | _psram_spin2_setQos
13238     09 01 02 F6 | 	mov	_var01, arg01
1323c                 | '     if drivercog == -1 ' driver must be running
1323c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
13240     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
13244     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
13248     FF FF 7F FF 
1324c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
13250                 | '         return ERR_INACTIVE
13250     0F FA 65 A6 |  if_e	neg	result1, #15
13254     9C 00 90 AD |  if_e	jmp	#LR__1724
13258                 | '     if cog < 0 or cog > 7 ' enforce cog id range
13258     00 00 56 F2 | 	cmps	_var01, #0 wc
1325c     08 00 90 CD |  if_b	jmp	#LR__1720
13260     08 00 56 F2 | 	cmps	_var01, #8 wc
13264     08 00 90 CD |  if_b	jmp	#LR__1721
13268                 | LR__1720
13268                 | '         return ERR_INVALID
13268     06 FA 65 F6 | 	neg	result1, #6
1326c     84 00 90 FD | 	jmp	#LR__1724
13270                 | LR__1721
13270                 | '     long[@qosData][cog] := qos & !$1ff
13270     FF 15 26 F5 | 	andn	arg02, #511
13274     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
13278     02 00 66 F0 | 	shl	_var01, #2
1327c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
13280     00 15 62 FC | 	wrlong	arg02, _var01
13284                 | '     mailbox := $7FF00 + drivercog*12
13284     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
13288     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1328c     02 07 02 F6 | 	mov	_var04, _var03
13290     01 06 66 F0 | 	shl	_var04, #1
13294     02 07 02 F1 | 	add	_var04, _var03
13298     02 06 66 F0 | 	shl	_var04, #2
1329c     FF 03 00 FF 
132a0     00 09 06 F6 | 	mov	_var05, ##524032
132a4     03 09 02 F1 | 	add	_var05, _var04
132a8                 | '     repeat until LOCKTRY(driverlock)
132a8     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
132ac                 | LR__1722
132ac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
132b0     06 12 72 FD | 	locktry	arg01 wc
132b4     F4 FF 9F 3D |  if_ae	jmp	#LR__1722
132b8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
132bc                 | '     long[mailbox] := driver.R_CONFIG + cogid()
132bc     00 06 06 F6 | 	mov	_var04, #0
132c0     01 06 62 FD | 	cogid	_var04
132c4     00 00 78 FF 
132c8     00 02 06 F6 | 	mov	_var02, ##-268435456
132cc     03 03 02 F1 | 	add	_var02, _var04
132d0     04 03 62 FC | 	wrlong	_var02, _var05
132d4                 | '     repeat while long[mailbox] < 0
132d4                 | LR__1723
132d4     04 03 02 FB | 	rdlong	_var02, _var05
132d8     00 02 56 F2 | 	cmps	_var02, #0 wc
132dc     F4 FF 9F CD |  if_b	jmp	#LR__1723
132e0                 | '     LOCKREL(driverlock)
132e0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
132e4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
132e8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
132ec     07 12 72 FD | 	lockrel	arg01 wc
132f0     00 FA 05 F6 | 	mov	result1, #0
132f4                 | LR__1724
132f4                 | _psram_spin2_setQos_ret
132f4     2D 00 64 FD | 	ret
132f8                 | 
132f8                 | ' 
132f8                 | ' '..............................................................................
132f8                 | ' 
132f8                 | ' {{
132f8                 | ' }}
132f8                 | ' PRI lookupDelay(freq) : delay | profile
132f8                 | _psram_spin2_lookupDelay
132f8                 | '     profile := @delayTable
132f8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
132fc     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
13300                 | '     delay := long[profile][0]
13300     00 03 02 FB | 	rdlong	_var02, _var01
13304                 | '     repeat while long[profile][1] 
13304     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
13308     97 16 48 FB | 	callpa	#(@LR__1731-@LR__1730)>>2,fcache_load_ptr_
1330c                 | LR__1730
1330c     04 00 06 F1 | 	add	_var01, #4
13310     00 FB 09 FB | 	rdlong	result1, _var01 wz
13314     04 00 86 F1 | 	sub	_var01, #4
13318     1C 00 90 AD |  if_e	jmp	#LR__1732
1331c                 | '         if freq +< long[profile][1] 
1331c     04 00 06 F1 | 	add	_var01, #4
13320     00 FB 01 FB | 	rdlong	result1, _var01
13324     04 00 86 F1 | 	sub	_var01, #4
13328     FD 12 12 F2 | 	cmp	arg01, result1 wc
1332c                 | '             quit
1332c                 | '         profile += 4
1332c     04 00 06 31 |  if_ae	add	_var01, #4
13330                 | '         delay++
13330     01 02 06 31 |  if_ae	add	_var02, #1
13334     D4 FF 9F 3D |  if_ae	jmp	#LR__1730
13338                 | LR__1731
13338                 | LR__1732
13338     01 FB 01 F6 | 	mov	result1, _var02
1333c                 | _psram_spin2_lookupDelay_ret
1333c     2D 00 64 FD | 	ret
13340                 | 
13340                 | ' 
13340                 | ' PUB start() : r
13340                 | _usbnew_spin2_start
13340     00 00 06 F6 | 	mov	_var01, #0
13344                 | '   ifnot driver_cog
13344     15 00 00 FF 
13348     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1334c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
13350     15 00 00 FF 
13354     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
13358     38 00 90 5D |  if_ne	jmp	#LR__1740
1335c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1335c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
13360     10 00 06 F6 | 	mov	_var01, #16
13364     00 16 06 F6 | 	mov	arg03, #0
13368     28 16 62 FD | 	setq	arg03
1336c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
13370     01 00 66 C6 |  if_b	neg	_var01, #1
13374                 | '     if r >= 0
13374     00 00 56 F2 | 	cmps	_var01, #0 wc
13378                 | '       driver_cog := r+1
13378     00 03 02 36 |  if_ae	mov	_var02, _var01
1337c     01 02 06 31 |  if_ae	add	_var02, #1
13380     15 00 00 3F 
13384     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
13388     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1338c     15 00 00 3F 
13390     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
13394                 | LR__1740
13394     00 FB 01 F6 | 	mov	result1, _var01
13398                 | _usbnew_spin2_start_ret
13398     2D 00 64 FD | 	ret
1339c                 | 
1339c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1339c                 | ' 
1339c                 | ' '' Return key event from buffer if there is one
1339c                 | ' PUB get_key() : r | tail
1339c                 | _usbnew_spin2_get_key
1339c                 | '   tail := keyq_tail
1339c     0F 00 00 FF 
133a0     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
133a4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
133a8                 | '   if keyq_head == tail
133a8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
133ac     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
133b0     0F 00 00 FF 
133b4     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
133b8     00 03 0A F2 | 	cmp	_var02, _var01 wz
133bc                 | '     return 0 ' No event
133bc     00 FA 05 A6 |  if_e	mov	result1, #0
133c0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
133c4                 | '   r := keyq_data[tail]
133c4     00 03 02 F6 | 	mov	_var02, _var01
133c8     02 02 66 F0 | 	shl	_var02, #2
133cc     0F 00 00 FF 
133d0     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
133d4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
133d8     01 FB 01 FB | 	rdlong	result1, _var02
133dc                 | '   if ++tail == KEYQUEUE_SIZE
133dc     01 00 06 F1 | 	add	_var01, #1
133e0     80 00 0E F2 | 	cmp	_var01, #128 wz
133e4                 | '     tail := 0
133e4     00 00 06 A6 |  if_e	mov	_var01, #0
133e8                 | '   keyq_tail := tail
133e8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
133ec     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
133f0     0F 00 00 FF 
133f4     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
133f8                 | _usbnew_spin2_get_key_ret
133f8     2D 00 64 FD | 	ret
133fc                 | 
133fc                 | ' 
133fc                 | ' '' Emulate mouse movement
133fc                 | ' PUB mouse_move(x,y)
133fc                 | _usbnew_spin2_mouse_move
133fc     02 4A 05 F6 | 	mov	COUNT_, #2
13400     A8 00 A0 FD | 	call	#pushregs_
13404     09 1F 02 F6 | 	mov	local01, arg01
13408     0A 21 02 F6 | 	mov	local02, arg02
1340c                 | '   mouse_lock := 1
1340c     14 00 00 FF 
13410     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
13414     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
13418     14 00 00 FF 
1341c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
13420                 | '   waitus(2) ' hope driver is now done
13420     02 12 06 F6 | 	mov	arg01, #2
13424     48 09 B0 FD | 	call	#__system___waitus
13428                 | '   mouse_xacc := x
13428     14 00 00 FF 
1342c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
13430     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
13434                 | '   mouse_yacc := y
13434     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
13438     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1343c                 | '   if mouse_outptr
1343c     04 00 00 FF 
13440     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
13444     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
13448     0F 00 00 FF 
1344c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
13450     24 00 90 AD |  if_e	jmp	#LR__1750
13454                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
13454     10 20 66 F0 | 	shl	local02, #16
13458     0F 1F 32 F9 | 	getword	local01, local01, #0
1345c     0F 21 42 F5 | 	or	local02, local01
13460     0F 00 00 FF 
13464     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
13468     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1346c     0F 00 00 FF 
13470     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
13474     0F 21 62 FC | 	wrlong	local02, local01
13478                 | LR__1750
13478                 | '   mouse_lock := 0
13478     14 00 00 FF 
1347c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
13480     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
13484     14 00 00 FF 
13488     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1348c     A7 F0 03 F6 | 	mov	ptra, fp
13490     B2 00 A0 FD | 	call	#popregs_
13494                 | _usbnew_spin2_mouse_move_ret
13494     2D 00 64 FD | 	ret
13498                 | 
13498                 | '     '' Set HAVE_HIDPAD to enable.
13498                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
13498                 | ' 
13498                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
13498                 | ' PUB hidpad_id(dev) : r
13498                 | _usbnew_spin2_hidpad_id
13498                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
13498     13 00 00 FF 
1349c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
134a0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
134a4     09 01 02 F6 | 	mov	_var01, arg01
134a8     03 00 66 F0 | 	shl	_var01, #3
134ac     09 01 82 F1 | 	sub	_var01, arg01
134b0     02 00 66 F0 | 	shl	_var01, #2
134b4     00 FB 01 F1 | 	add	result1, _var01
134b8     FD FA 01 FB | 	rdlong	result1, result1
134bc     13 00 00 FF 
134c0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
134c4                 | _usbnew_spin2_hidpad_id_ret
134c4     2D 00 64 FD | 	ret
134c8                 | 
134c8                 | ' 
134c8                 | ' '' Get all button states for a device
134c8                 | ' PUB hidpad_buttons(dev) : r 
134c8                 | _usbnew_spin2_hidpad_buttons
134c8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
134c8     13 00 00 FF 
134cc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
134d0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
134d4     09 01 02 F6 | 	mov	_var01, arg01
134d8     03 00 66 F0 | 	shl	_var01, #3
134dc     09 01 82 F1 | 	sub	_var01, arg01
134e0     02 00 66 F0 | 	shl	_var01, #2
134e4     00 FB 01 F1 | 	add	result1, _var01
134e8     14 FA 05 F1 | 	add	result1, #20
134ec     FD FA 01 FB | 	rdlong	result1, result1
134f0     13 00 00 FF 
134f4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
134f8                 | _usbnew_spin2_hidpad_buttons_ret
134f8     2D 00 64 FD | 	ret
134fc                 | 
134fc                 | ' 
134fc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
134fc                 | ' PUB hidpad_axis(dev,axnum) : r
134fc                 | _usbnew_spin2_hidpad_axis
134fc                 | '   if axnum +>= 6
134fc     06 14 16 F2 | 	cmp	arg02, #6 wc
13500                 | '     return 0
13500     00 FA 05 36 |  if_ae	mov	result1, #0
13504     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
13508                 | '   else 
13508                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
13508     13 00 00 FF 
1350c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
13510     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
13514     09 01 02 F6 | 	mov	_var01, arg01
13518     03 00 66 F0 | 	shl	_var01, #3
1351c     09 01 82 F1 | 	sub	_var01, arg01
13520     02 00 66 F0 | 	shl	_var01, #2
13524     00 FB 01 F1 | 	add	result1, _var01
13528     04 00 06 F6 | 	mov	_var01, #4
1352c     0A 01 02 F1 | 	add	_var01, arg02
13530     01 00 66 F0 | 	shl	_var01, #1
13534     FD 00 02 F1 | 	add	_var01, result1
13538     00 FB E1 FA | 	rdword	result1, _var01
1353c     0F FA 65 F7 | 	signx	result1, #15
13540     13 00 00 FF 
13544     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
13548                 | _usbnew_spin2_hidpad_axis_ret
13548     2D 00 64 FD | 	ret
1354c                 | 
1354c                 | ' 
1354c                 | ' 
1354c                 | ' '--------------------------------------------------------------
1354c                 | ' '---------- Init the variables, start the cog. ----------------
1354c                 | ' '--------------------------------------------------------------
1354c                 | ' 
1354c                 | ' pub start(mbox,scope,cache) :cog,base | iii
1354c                 | _Audio093b_8_sc_spin2_start
1354c     04 4A 05 F6 | 	mov	COUNT_, #4
13550     A8 00 A0 FD | 	call	#pushregs_
13554     09 1F 02 F6 | 	mov	local01, arg01
13558                 | ' 
13558                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
13558                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
13558                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
13558                 | ' 
13558                 | ' mailboxaddr:=mbox 
13558     F2 1E 62 FC | 	wrlong	local01, objptr
1355c                 | ' scope_ptr:=scope
1355c     04 E4 05 F1 | 	add	objptr, #4
13560     F2 14 62 FC | 	wrlong	arg02, objptr
13564                 | ' cache_ptr:=cache
13564     04 E4 05 F1 | 	add	objptr, #4
13568     F2 16 62 FC | 	wrlong	arg03, objptr
1356c                 | ' base:=@channel1[0]
1356c     04 E4 05 F1 | 	add	objptr, #4
13570     F2 20 02 F6 | 	mov	local02, objptr
13574                 | ' 
13574                 | ' repeat iii from 0 to 7
13574     00 22 06 F6 | 	mov	local03, #0
13578     01 00 00 FF 
1357c     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
13580     0C E4 85 F1 | 	sub	objptr, #12
13584     97 80 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
13588                 | LR__1760
13588                 | '   long[base+32*iii]:=0
13588     10 1F 02 F6 | 	mov	local01, local02
1358c     11 FD 01 F6 | 	mov	result2, local03
13590     05 FC 65 F0 | 	shl	result2, #5
13594     FE 1E 02 F1 | 	add	local01, result2
13598     0F 01 68 FC | 	wrlong	#0, local01
1359c                 | '   long[base+32*iii+4]:=0
1359c     10 1F 02 F6 | 	mov	local01, local02
135a0     11 FD 01 F6 | 	mov	result2, local03
135a4     05 FC 65 F0 | 	shl	result2, #5
135a8     FE 1E 02 F1 | 	add	local01, result2
135ac     04 1E 06 F1 | 	add	local01, #4
135b0     0F 01 68 FC | 	wrlong	#0, local01
135b4                 | '   long[base+32*iii+12]:=0
135b4     10 25 02 F6 | 	mov	local04, local02
135b8     11 1F 02 F6 | 	mov	local01, local03
135bc     05 1E 66 F0 | 	shl	local01, #5
135c0     0F 25 02 F1 | 	add	local04, local01
135c4     0C 24 06 F1 | 	add	local04, #12
135c8     12 01 68 FC | 	wrlong	#0, local04
135cc                 | '   long[base+32*iii+16]:=2 
135cc     10 25 02 F6 | 	mov	local04, local02
135d0     11 1F 02 F6 | 	mov	local01, local03
135d4     05 1E 66 F0 | 	shl	local01, #5
135d8     0F 25 02 F1 | 	add	local04, local01
135dc     10 24 06 F1 | 	add	local04, #16
135e0     12 05 68 FC | 	wrlong	#2, local04
135e4                 | '   word[base+32*iii+20]:=0
135e4     10 25 02 F6 | 	mov	local04, local02
135e8     11 1F 02 F6 | 	mov	local01, local03
135ec     05 1E 66 F0 | 	shl	local01, #5
135f0     0F 25 02 F1 | 	add	local04, local01
135f4     14 24 06 F1 | 	add	local04, #20
135f8     12 01 58 FC | 	wrword	#0, local04
135fc                 | '   word[base+32*iii+22]:=8192
135fc     10 25 02 F6 | 	mov	local04, local02
13600     11 1F 02 F6 | 	mov	local01, local03
13604     05 1E 66 F0 | 	shl	local01, #5
13608     0F 25 02 F1 | 	add	local04, local01
1360c     16 24 06 F1 | 	add	local04, #22
13610     10 00 80 FF 
13614     12 01 58 FC | 	wrword	##8192, local04
13618                 | '   word[base+32*iii+24]:=4000+2*iii
13618     11 25 02 F6 | 	mov	local04, local03
1361c     01 24 66 F0 | 	shl	local04, #1
13620     07 00 00 FF 
13624     A0 1F 06 F6 | 	mov	local01, ##4000
13628     12 1F 02 F1 | 	add	local01, local04
1362c     10 25 02 F6 | 	mov	local04, local02
13630     11 FD 01 F6 | 	mov	result2, local03
13634     05 FC 65 F0 | 	shl	result2, #5
13638     FE 24 02 F1 | 	add	local04, result2
1363c     18 24 06 F1 | 	add	local04, #24
13640     12 1F 52 FC | 	wrword	local01, local04
13644                 | '   word[base+32*iii+26]:=2
13644     10 25 02 F6 | 	mov	local04, local02
13648     11 1F 02 F6 | 	mov	local01, local03
1364c     05 1E 66 F0 | 	shl	local01, #5
13650     0F 25 02 F1 | 	add	local04, local01
13654     1A 24 06 F1 | 	add	local04, #26
13658     12 05 58 FC | 	wrword	#2, local04
1365c                 | '   long [base+32*iii+8]:=@null | $C0000000
1365c     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
13660     3E 1E 26 F4 | 	bith	local01, #62
13664     10 25 02 F6 | 	mov	local04, local02
13668     11 17 02 F6 | 	mov	arg03, local03
1366c     05 16 66 F0 | 	shl	arg03, #5
13670     0B 25 02 F1 | 	add	local04, arg03
13674     08 24 06 F1 | 	add	local04, #8
13678     12 1F 62 FC | 	wrlong	local01, local04
1367c     01 22 06 F1 | 	add	local03, #1
13680     08 22 56 F2 | 	cmps	local03, #8 wc
13684     00 FF 9F CD |  if_b	jmp	#LR__1760
13688                 | LR__1761
13688     01 00 00 FF 
1368c     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
13690                 | '   
13690                 | ' cog:=coginit(16,@audio,@mailboxaddr)
13690     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
13694     F2 16 02 F6 | 	mov	arg03, objptr
13698     10 24 06 F6 | 	mov	local04, #16
1369c     28 16 62 FD | 	setq	arg03
136a0     0A 25 F2 FC | 	coginit	local04, arg02 wc
136a4     01 24 66 C6 |  if_b	neg	local04, #1
136a8                 | ' waitms(100)
136a8     64 12 06 F6 | 	mov	arg01, #100
136ac     54 06 B0 FD | 	call	#__system___waitms
136b0                 | ' return cog,base
136b0     10 FD 01 F6 | 	mov	result2, local02
136b4     12 FB 01 F6 | 	mov	result1, local04
136b8     A7 F0 03 F6 | 	mov	ptra, fp
136bc     B2 00 A0 FD | 	call	#popregs_
136c0                 | _Audio093b_8_sc_spin2_start_ret
136c0     2D 00 64 FD | 	ret
136c4                 | 
136c4                 | ' 
136c4                 | ' ' a simple play procedure to not poke everything. 
136c4                 | ' 
136c4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
136c4                 | _Audio093b_8_sc_spin2_play
136c4     0C E4 05 F1 | 	add	objptr, #12
136c8     F2 00 02 F6 | 	mov	_var01, objptr
136cc     05 12 66 F0 | 	shl	arg01, #5
136d0     09 01 02 F1 | 	add	_var01, arg01
136d4     00 00 60 FF 
136d8     00 14 06 F1 | 	add	arg02, ##-1073741824
136dc     00 13 02 F6 | 	mov	arg01, _var01
136e0     08 12 06 F1 | 	add	arg01, #8
136e4     09 15 62 FC | 	wrlong	arg02, arg01
136e8     00 15 02 F6 | 	mov	arg02, _var01
136ec     0C 14 06 F1 | 	add	arg02, #12
136f0     0A 1B 62 FC | 	wrlong	arg05, arg02
136f4     00 1C 56 F2 | 	cmps	arg06, #0 wc
136f8     00 15 02 36 |  if_ae	mov	arg02, _var01
136fc     10 14 06 31 |  if_ae	add	arg02, #16
13700     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
13704     02 1A 06 C1 |  if_b	add	arg05, #2
13708     00 13 02 C6 |  if_b	mov	arg01, _var01
1370c     10 12 06 C1 |  if_b	add	arg01, #16
13710     09 1B 62 CC |  if_b	wrlong	arg05, arg01
13714     0B 15 52 F6 | 	abs	arg02, arg03 wc
13718     0F 1B 80 FF 
1371c     0A 3F 1A FD | 	qdiv	##3546911, arg02
13720                 | ' 
13720                 | ' base2:=@channel1[0]+32*channel
13720                 | ' long[base2+8]:=sample+$C0000000 
13720                 | ' long[base2+12]:= len
13720                 | ' if loop >=0 
13720                 | '   long[base2+16]:= loop
13720     0C E4 85 F1 | 	sub	objptr, #12
13724                 | ' else
13724                 | '   long[base2+16]:= len+2
13724                 | ' word[base2+20]:=vol
13724     00 15 02 F6 | 	mov	arg02, _var01
13728     14 14 06 F1 | 	add	arg02, #20
1372c     0A 19 52 FC | 	wrword	arg04, arg02
13730                 | ' word[base2+24]:= 3546911/splfreq 
13730     00 13 02 F6 | 	mov	arg01, _var01
13734     18 12 06 F1 | 	add	arg01, #24
13738                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
13738                 | ' long[base2+28]:=$40000000
13738     18 14 62 FD | 	getqx	arg02
1373c     0A 15 82 F6 | 	negc	arg02, arg02
13740     09 15 52 FC | 	wrword	arg02, arg01
13744     00 15 02 F6 | 	mov	arg02, _var01
13748     1A 14 06 F1 | 	add	arg02, #26
1374c     0A 01 5A FC | 	wrword	#256, arg02
13750     1C 00 06 F1 | 	add	_var01, #28
13754     00 00 A0 FF 
13758     00 01 68 FC | 	wrlong	##1073741824, _var01
1375c                 | _Audio093b_8_sc_spin2_play_ret
1375c     2D 00 64 FD | 	ret
13760                 | 
13760                 | ' until (i >>8) >=len
13760                 | ' 
13760                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
13760                 | _Audio093b_8_sc_spin2_play8
13760                 | ' 
13760                 | ' base2:=@channel1[0]+32*channel
13760     0C E4 05 F1 | 	add	objptr, #12
13764     F2 00 02 F6 | 	mov	_var01, objptr
13768     05 12 66 F0 | 	shl	arg01, #5
1376c     09 01 02 F1 | 	add	_var01, arg01
13770                 | ' long[base2]:=0
13770     00 01 68 FC | 	wrlong	#0, _var01
13774                 | ' long[base2+8]:=sample+$40000000 
13774     00 00 20 FF 
13778     00 14 06 F1 | 	add	arg02, ##1073741824
1377c     00 13 02 F6 | 	mov	arg01, _var01
13780     08 12 06 F1 | 	add	arg01, #8
13784     09 15 62 FC | 	wrlong	arg02, arg01
13788                 | ' if loop>=0
13788     00 1C 56 F2 | 	cmps	arg06, #0 wc
1378c     0C E4 85 F1 | 	sub	objptr, #12
13790     1C 00 90 CD |  if_b	jmp	#LR__1770
13794                 | '   long[base2+12]:=loop
13794     00 15 02 F6 | 	mov	arg02, _var01
13798     0C 14 06 F1 | 	add	arg02, #12
1379c     0A 1D 62 FC | 	wrlong	arg06, arg02
137a0                 | '   long[base2+16]:= len
137a0     00 1D 02 F6 | 	mov	arg06, _var01
137a4     10 1C 06 F1 | 	add	arg06, #16
137a8     0E 1B 62 FC | 	wrlong	arg05, arg06
137ac     1C 00 90 FD | 	jmp	#LR__1771
137b0                 | LR__1770
137b0                 | ' else
137b0                 | '   long[base2+12]:= len
137b0     00 1D 02 F6 | 	mov	arg06, _var01
137b4     0C 1C 06 F1 | 	add	arg06, #12
137b8     0E 1B 62 FC | 	wrlong	arg05, arg06
137bc                 | '   long[base2+16]:= len+1
137bc     01 1A 06 F1 | 	add	arg05, #1
137c0     00 13 02 F6 | 	mov	arg01, _var01
137c4     10 12 06 F1 | 	add	arg01, #16
137c8     09 1B 62 FC | 	wrlong	arg05, arg01
137cc                 | LR__1771
137cc     0B 17 52 F6 | 	abs	arg03, arg03 wc
137d0     0F 1B 80 FF 
137d4     0B 3F 1A FD | 	qdiv	##3546911, arg03
137d8                 | ' word[base2+20]:=vol
137d8     00 17 02 F6 | 	mov	arg03, _var01
137dc     14 16 06 F1 | 	add	arg03, #20
137e0     0B 19 52 FC | 	wrword	arg04, arg03
137e4                 | ' word[base2+24]:= 3546911/splfreq 
137e4     00 13 02 F6 | 	mov	arg01, _var01
137e8     18 12 06 F1 | 	add	arg01, #24
137ec                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
137ec                 | ' long[base2+28]:=$40000000
137ec     18 18 62 FD | 	getqx	arg04
137f0     0C 19 82 F6 | 	negc	arg04, arg04
137f4     09 19 52 FC | 	wrword	arg04, arg01
137f8     00 19 02 F6 | 	mov	arg04, _var01
137fc     1A 18 06 F1 | 	add	arg04, #26
13800     0C 01 5A FC | 	wrword	#256, arg04
13804     1C 00 06 F1 | 	add	_var01, #28
13808     00 00 A0 FF 
1380c     00 01 68 FC | 	wrlong	##1073741824, _var01
13810                 | _Audio093b_8_sc_spin2_play8_ret
13810     2D 00 64 FD | 	ret
13814                 | 
13814                 | ' 
13814                 | '     
13814                 | ' pub stop(channel) 'silence it
13814                 | _Audio093b_8_sc_spin2_stop
13814                 | ' 
13814                 | ' word[@channel1[0]+32*channel+20]:=0
13814     0C E4 05 F1 | 	add	objptr, #12
13818     F2 00 02 F6 | 	mov	_var01, objptr
1381c     05 12 66 F0 | 	shl	arg01, #5
13820     09 01 02 F1 | 	add	_var01, arg01
13824     14 00 06 F1 | 	add	_var01, #20
13828     00 01 58 FC | 	wrword	#0, _var01
1382c     0C E4 85 F1 | 	sub	objptr, #12
13830                 | _Audio093b_8_sc_spin2_stop_ret
13830     2D 00 64 FD | 	ret
13834                 | hubexit
13834     81 00 80 FD | 	jmp	#cogexit
13838                 | 
13838                 | __system___setbaud
13838     14 5E 06 FB | 	rdlong	muldiva_, #20
1383c     09 61 02 F6 | 	mov	muldivb_, arg01
13840     BA 00 A0 FD | 	call	#divide_
13844     97 06 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
13848                 | LR__1780
13848     3E FA 9D FA | 	rdpin	result1, #62 wc
1384c     FE FC A1 F1 | 	subx	result2, result2
13850     F4 FF 9F CD |  if_b	jmp	#LR__1780
13854                 | LR__1781
13854     40 7C 64 FD | 	dirl	#62
13858     40 7E 64 FD | 	dirl	#63
1385c     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
13860     10 60 66 F0 | 	shl	muldivb_, #16
13864     07 14 06 F6 | 	mov	arg02, #7
13868     30 15 02 F1 | 	add	arg02, muldivb_
1386c     3E F8 0C FC | 	wrpin	#124, #62
13870     3E 14 16 FC | 	wxpin	arg02, #62
13874     3F 7C 0C FC | 	wrpin	#62, #63
13878     14 14 06 F1 | 	add	arg02, #20
1387c     3F 14 16 FC | 	wxpin	arg02, #63
13880     41 7C 64 FD | 	dirh	#62
13884     41 7E 64 FD | 	dirh	#63
13888                 | __system___setbaud_ret
13888     2D 00 64 FD | 	ret
1388c                 | 
1388c                 | __system___txraw
1388c     01 4A 05 F6 | 	mov	COUNT_, #1
13890     A8 00 A0 FD | 	call	#pushregs_
13894     09 1F 02 F6 | 	mov	local01, arg01
13898     97 06 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
1389c                 | LR__1790
1389c     3E FA 9D FA | 	rdpin	result1, #62 wc
138a0     FE FC A1 F1 | 	subx	result2, result2
138a4     F4 FF 9F CD |  if_b	jmp	#LR__1790
138a8                 | LR__1791
138a8     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
138ac     C2 01 00 AF 
138b0     00 12 06 A6 |  if_e	mov	arg01, ##230400
138b4     80 FF BF AD |  if_e	call	#__system___setbaud
138b8     3E 1E 26 FC | 	wypin	local01, #62
138bc     01 FA 05 F6 | 	mov	result1, #1
138c0     A7 F0 03 F6 | 	mov	ptra, fp
138c4     B2 00 A0 FD | 	call	#popregs_
138c8                 | __system___txraw_ret
138c8     2D 00 64 FD | 	ret
138cc                 | 
138cc                 | __system___rxraw
138cc     0D 4A 05 F6 | 	mov	COUNT_, #13
138d0     A8 00 A0 FD | 	call	#pushregs_
138d4     09 1F 02 F6 | 	mov	local01, arg01
138d8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
138dc     C2 01 00 AF 
138e0     00 12 06 A6 |  if_e	mov	arg01, ##230400
138e4     50 FF BF AD |  if_e	call	#__system___setbaud
138e8     00 1E 0E F2 | 	cmp	local01, #0 wz
138ec     20 00 90 AD |  if_e	jmp	#LR__1800
138f0     14 22 06 FB | 	rdlong	local03, #20
138f4     0A 22 46 F0 | 	shr	local03, #10
138f8     11 1F 02 FD | 	qmul	local01, local03
138fc     1A FA 61 FD | 	getct	result1
13900     18 24 62 FD | 	getqx	local04
13904     12 FB 01 F1 | 	add	result1, local04
13908     FD 26 02 F6 | 	mov	local05, result1
1390c     04 00 90 FD | 	jmp	#LR__1801
13910                 | LR__1800
13910     00 26 06 F6 | 	mov	local05, #0
13914                 | LR__1801
13914     01 28 66 F6 | 	neg	local06, #1
13918     3F 2A 06 F6 | 	mov	local07, #63
1391c     00 2C 06 F6 | 	mov	local08, #0
13920     04 E8 05 F1 | 	add	ptr___system__dat__, #4
13924     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
13928     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
1392c                 | LR__1802
1392c     08 2E 16 F4 | 	testb	local09, #8 wc
13930     09 2E 76 F4 | 	testbn	local09, #9 andc
13934     0A 2E 46 F0 | 	shr	local09, #10
13938     01 2C 06 C6 |  if_b	mov	local08, #1
1393c     40 7E 6C 3D |  if_ae	testp	#63 wz
13940     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
13944     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
13948     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1394c                 | LR__1803
1394c     00 20 06 F6 | 	mov	local02, #0
13950     00 2C 0E F2 | 	cmp	local08, #0 wz
13954     01 20 66 56 |  if_ne	neg	local02, #1
13958     00 30 06 F6 | 	mov	local10, #0
1395c     00 22 06 F6 | 	mov	local03, #0
13960     00 1E 0E F2 | 	cmp	local01, #0 wz
13964     01 22 66 56 |  if_ne	neg	local03, #1
13968     00 24 06 F6 | 	mov	local04, #0
1396c     00 32 06 F6 | 	mov	local11, #0
13970     1A FA 61 FD | 	getct	result1
13974     FD 34 02 F6 | 	mov	local12, result1
13978     1A 37 02 F6 | 	mov	local13, local12
1397c     13 37 82 F1 | 	sub	local13, local05
13980     00 36 56 F2 | 	cmps	local13, #0 wc
13984     00 32 26 C6 |  if_b	not	local11, #0
13988     00 32 0E F2 | 	cmp	local11, #0 wz
1398c     00 24 26 56 |  if_ne	not	local04, #0
13990     12 23 CA F7 | 	test	local03, local04 wz
13994     00 30 26 56 |  if_ne	not	local10, #0
13998     18 21 4A F5 | 	or	local02, local10 wz
1399c     8C FF 9F AD |  if_e	jmp	#LR__1802
139a0     00 2C 0E F2 | 	cmp	local08, #0 wz
139a4     17 29 02 56 |  if_ne	mov	local06, local09
139a8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
139ac     04 E8 05 F1 | 	add	ptr___system__dat__, #4
139b0     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
139b4     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
139b8     14 FB 01 F6 | 	mov	result1, local06
139bc     A7 F0 03 F6 | 	mov	ptra, fp
139c0     B2 00 A0 FD | 	call	#popregs_
139c4                 | __system___rxraw_ret
139c4     2D 00 64 FD | 	ret
139c8                 | 
139c8                 | __system___getus
139c8     1A FC 71 FD | 	getct	result2 wc
139cc     1A 00 62 FD | 	getct	_var01
139d0     10 E8 05 F1 | 	add	ptr___system__dat__, #16
139d4     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
139d8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
139dc     20 00 90 5D |  if_ne	jmp	#LR__1810
139e0     14 02 06 FB | 	rdlong	_var02, #20
139e4     A1 07 00 FF 
139e8     40 02 16 FD | 	qdiv	_var02, ##1000000
139ec     10 E8 05 F1 | 	add	ptr___system__dat__, #16
139f0     18 FA 61 FD | 	getqx	result1
139f4     FD 02 02 F6 | 	mov	_var02, result1
139f8     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
139fc     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
13a00                 | LR__1810
13a00     01 FD 11 FD | 	qdiv	result2, _var02
13a04     19 FC 61 FD | 	getqy	result2
13a08     28 FC 61 FD | 	setq	result2
13a0c     01 01 12 FD | 	qdiv	_var01, _var02
13a10     18 FA 61 FD | 	getqx	result1
13a14                 | __system___getus_ret
13a14     2D 00 64 FD | 	ret
13a18                 | 
13a18                 | __system____builtin_memmove
13a18     09 01 02 F6 | 	mov	_var01, arg01
13a1c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
13a20     10 00 90 CD |  if_b	jmp	#LR__1820
13a24     0A 03 02 F6 | 	mov	_var02, arg02
13a28     0B 03 02 F1 | 	add	_var02, arg03
13a2c     01 13 52 F2 | 	cmps	arg01, _var02 wc
13a30     48 00 90 CD |  if_b	jmp	#LR__1826
13a34                 | LR__1820
13a34     0B 05 02 F6 | 	mov	_var03, arg03
13a38     02 04 4E F0 | 	shr	_var03, #2 wz
13a3c     18 00 90 AD |  if_e	jmp	#LR__1825
13a40     97 0A 48 FB | 	callpa	#(@LR__1823-@LR__1821)>>2,fcache_load_ptr_
13a44                 | LR__1821
13a44     02 09 D8 FC | 	rep	@LR__1824, _var03
13a48                 | LR__1822
13a48     0A 05 02 FB | 	rdlong	_var03, arg02
13a4c     09 05 62 FC | 	wrlong	_var03, arg01
13a50     04 12 06 F1 | 	add	arg01, #4
13a54     04 14 06 F1 | 	add	arg02, #4
13a58                 | LR__1823
13a58                 | LR__1824
13a58                 | LR__1825
13a58     02 16 CE F7 | 	test	arg03, #2 wz
13a5c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
13a60     09 03 52 5C |  if_ne	wrword	_var02, arg01
13a64     02 12 06 51 |  if_ne	add	arg01, #2
13a68     02 14 06 51 |  if_ne	add	arg02, #2
13a6c     01 16 CE F7 | 	test	arg03, #1 wz
13a70     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
13a74     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
13a78     28 00 90 FD | 	jmp	#LR__1832
13a7c                 | LR__1826
13a7c     0B 13 02 F1 | 	add	arg01, arg03
13a80     0B 15 02 F1 | 	add	arg02, arg03
13a84     0B 07 0A F6 | 	mov	_var04, arg03 wz
13a88     18 00 90 AD |  if_e	jmp	#LR__1831
13a8c     97 0A 48 FB | 	callpa	#(@LR__1829-@LR__1827)>>2,fcache_load_ptr_
13a90                 | LR__1827
13a90     03 09 D8 FC | 	rep	@LR__1830, _var04
13a94                 | LR__1828
13a94     01 12 86 F1 | 	sub	arg01, #1
13a98     01 14 86 F1 | 	sub	arg02, #1
13a9c     0A 03 C2 FA | 	rdbyte	_var02, arg02
13aa0     09 03 42 FC | 	wrbyte	_var02, arg01
13aa4                 | LR__1829
13aa4                 | LR__1830
13aa4                 | LR__1831
13aa4                 | LR__1832
13aa4     00 FB 01 F6 | 	mov	result1, _var01
13aa8                 | __system____builtin_memmove_ret
13aa8     2D 00 64 FD | 	ret
13aac                 | 
13aac                 | __system____builtin_strcpy
13aac     09 01 02 F6 | 	mov	_var01, arg01
13ab0     97 0A 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
13ab4                 | LR__1840
13ab4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
13ab8     09 FB 41 FC | 	wrbyte	result1, arg01
13abc     01 14 06 F1 | 	add	arg02, #1
13ac0     01 12 06 F1 | 	add	arg01, #1
13ac4     EC FF 9F 5D |  if_ne	jmp	#LR__1840
13ac8                 | LR__1841
13ac8     00 FB 01 F6 | 	mov	result1, _var01
13acc                 | __system____builtin_strcpy_ret
13acc     2D 00 64 FD | 	ret
13ad0                 | 
13ad0                 | __system____topofstack
13ad0     00 4A 05 F6 | 	mov	COUNT_, #0
13ad4     A8 00 A0 FD | 	call	#pushregs_
13ad8     08 F0 07 F1 | 	add	ptra, #8
13adc     04 4E 05 F1 | 	add	fp, #4
13ae0     A7 12 62 FC | 	wrlong	arg01, fp
13ae4     A7 FA 01 F6 | 	mov	result1, fp
13ae8     04 4E 85 F1 | 	sub	fp, #4
13aec     A7 F0 03 F6 | 	mov	ptra, fp
13af0     B2 00 A0 FD | 	call	#popregs_
13af4                 | __system____topofstack_ret
13af4     2D 00 64 FD | 	ret
13af8                 | 
13af8                 | __system___lockmem
13af8     00 FA 05 F6 | 	mov	result1, #0
13afc     01 FA 61 FD | 	cogid	result1
13b00     00 FB 05 F1 | 	add	result1, #256
13b04                 | LR__1850
13b04     09 01 0A FB | 	rdlong	_var01, arg01 wz
13b08     09 FB 61 AC |  if_e	wrlong	result1, arg01
13b0c     09 01 02 AB |  if_e	rdlong	_var01, arg01
13b10     09 01 02 AB |  if_e	rdlong	_var01, arg01
13b14     FD 00 0A F2 | 	cmp	_var01, result1 wz
13b18     E8 FF 9F 5D |  if_ne	jmp	#LR__1850
13b1c                 | __system___lockmem_ret
13b1c     2D 00 64 FD | 	ret
13b20                 | 
13b20                 | __system___string_cmp
13b20     97 14 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
13b24                 | LR__1860
13b24     09 01 C2 FA | 	rdbyte	_var01, arg01
13b28     0A 03 C2 FA | 	rdbyte	_var02, arg02
13b2c     00 05 02 F6 | 	mov	_var03, _var01
13b30     01 05 8A F1 | 	sub	_var03, _var02 wz
13b34     01 12 06 F1 | 	add	arg01, #1
13b38     01 14 06 F1 | 	add	arg02, #1
13b3c     0C 00 90 5D |  if_ne	jmp	#LR__1862
13b40     00 00 0E F2 | 	cmp	_var01, #0 wz
13b44     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
13b48     D8 FF 9F 5D |  if_ne	jmp	#LR__1860
13b4c                 | LR__1861
13b4c                 | LR__1862
13b4c     02 FB 01 F6 | 	mov	result1, _var03
13b50                 | __system___string_cmp_ret
13b50     2D 00 64 FD | 	ret
13b54                 | 
13b54                 | __system___string_concat
13b54     05 4A 05 F6 | 	mov	COUNT_, #5
13b58     A8 00 A0 FD | 	call	#pushregs_
13b5c     09 1F 02 F6 | 	mov	local01, arg01
13b60     0A 21 02 F6 | 	mov	local02, arg02
13b64     0F 13 02 F6 | 	mov	arg01, local01
13b68     09 23 02 F6 | 	mov	local03, arg01
13b6c     97 06 48 FB | 	callpa	#(@LR__1871-@LR__1870)>>2,fcache_load_ptr_
13b70                 | LR__1870
13b70     11 FB C9 FA | 	rdbyte	result1, local03 wz
13b74     01 22 06 51 |  if_ne	add	local03, #1
13b78     F4 FF 9F 5D |  if_ne	jmp	#LR__1870
13b7c                 | LR__1871
13b7c     09 23 82 F1 | 	sub	local03, arg01
13b80     11 25 02 F6 | 	mov	local04, local03
13b84     10 13 02 F6 | 	mov	arg01, local02
13b88     09 23 02 F6 | 	mov	local03, arg01
13b8c     97 06 48 FB | 	callpa	#(@LR__1873-@LR__1872)>>2,fcache_load_ptr_
13b90                 | LR__1872
13b90     11 FB C9 FA | 	rdbyte	result1, local03 wz
13b94     01 22 06 51 |  if_ne	add	local03, #1
13b98     F4 FF 9F 5D |  if_ne	jmp	#LR__1872
13b9c                 | LR__1873
13b9c     09 23 82 F1 | 	sub	local03, arg01
13ba0     12 13 02 F6 | 	mov	arg01, local04
13ba4     11 13 02 F1 | 	add	arg01, local03
13ba8     01 12 06 F1 | 	add	arg01, #1
13bac     E8 38 B0 FD | 	call	#__system___gc_alloc_managed
13bb0     FD 26 0A F6 | 	mov	local05, result1 wz
13bb4     28 00 90 AD |  if_e	jmp	#LR__1874
13bb8     13 13 02 F6 | 	mov	arg01, local05
13bbc     0F 15 02 F6 | 	mov	arg02, local01
13bc0     12 17 02 F6 | 	mov	arg03, local04
13bc4     50 FE BF FD | 	call	#__system____builtin_memmove
13bc8     13 13 02 F6 | 	mov	arg01, local05
13bcc     12 13 02 F1 | 	add	arg01, local04
13bd0     01 22 06 F1 | 	add	local03, #1
13bd4     10 15 02 F6 | 	mov	arg02, local02
13bd8     11 17 02 F6 | 	mov	arg03, local03
13bdc     38 FE BF FD | 	call	#__system____builtin_memmove
13be0                 | LR__1874
13be0     13 FB 01 F6 | 	mov	result1, local05
13be4     A7 F0 03 F6 | 	mov	ptra, fp
13be8     B2 00 A0 FD | 	call	#popregs_
13bec                 | __system___string_concat_ret
13bec     2D 00 64 FD | 	ret
13bf0                 | 
13bf0                 | __system___tx
13bf0     02 4A 05 F6 | 	mov	COUNT_, #2
13bf4     A8 00 A0 FD | 	call	#pushregs_
13bf8     09 1F 02 F6 | 	mov	local01, arg01
13bfc     0A 1E 0E F2 | 	cmp	local01, #10 wz
13c00     18 00 90 5D |  if_ne	jmp	#LR__1880
13c04     08 E8 05 F1 | 	add	ptr___system__dat__, #8
13c08     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
13c0c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
13c10     02 20 CE F7 | 	test	local02, #2 wz
13c14     0D 12 06 56 |  if_ne	mov	arg01, #13
13c18     70 FC BF 5D |  if_ne	call	#__system___txraw
13c1c                 | LR__1880
13c1c     0F 13 02 F6 | 	mov	arg01, local01
13c20     68 FC BF FD | 	call	#__system___txraw
13c24     A7 F0 03 F6 | 	mov	ptra, fp
13c28     B2 00 A0 FD | 	call	#popregs_
13c2c                 | __system___tx_ret
13c2c     2D 00 64 FD | 	ret
13c30                 | 
13c30                 | __system___rx
13c30     01 4A 05 F6 | 	mov	COUNT_, #1
13c34     A8 00 A0 FD | 	call	#pushregs_
13c38                 | LR__1890
13c38     00 12 06 F6 | 	mov	arg01, #0
13c3c     8C FC BF FD | 	call	#__system___rxraw
13c40     FD 1E 02 F6 | 	mov	local01, result1
13c44     FF FF 7F FF 
13c48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
13c4c     E8 FF 9F AD |  if_e	jmp	#LR__1890
13c50     0D 1E 0E F2 | 	cmp	local01, #13 wz
13c54     14 00 90 5D |  if_ne	jmp	#LR__1891
13c58     08 E8 05 F1 | 	add	ptr___system__dat__, #8
13c5c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
13c60     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
13c64     02 FA CD F7 | 	test	result1, #2 wz
13c68     0A 1E 06 56 |  if_ne	mov	local01, #10
13c6c                 | LR__1891
13c6c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
13c70     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
13c74     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
13c78     01 12 CE F7 | 	test	arg01, #1 wz
13c7c     1C 00 90 AD |  if_e	jmp	#LR__1894
13c80     7F 1E 0E F2 | 	cmp	local01, #127 wz
13c84     0C 00 90 5D |  if_ne	jmp	#LR__1892
13c88     08 12 06 F6 | 	mov	arg01, #8
13c8c     60 FF BF FD | 	call	#__system___tx
13c90     08 00 90 FD | 	jmp	#LR__1893
13c94                 | LR__1892
13c94     0F 13 02 F6 | 	mov	arg01, local01
13c98     54 FF BF FD | 	call	#__system___tx
13c9c                 | LR__1893
13c9c                 | LR__1894
13c9c     0F FB 01 F6 | 	mov	result1, local01
13ca0     A7 F0 03 F6 | 	mov	ptra, fp
13ca4     B2 00 A0 FD | 	call	#popregs_
13ca8                 | __system___rx_ret
13ca8     2D 00 64 FD | 	ret
13cac                 | 
13cac                 | __system___pinwrite
13cac     09 01 02 F6 | 	mov	_var01, arg01
13cb0     1F 00 06 F5 | 	and	_var01, #31
13cb4     20 12 CE F7 | 	test	arg01, #32 wz
13cb8     06 12 46 F0 | 	shr	arg01, #6
13cbc     09 13 CA F9 | 	bmask	arg01, arg01
13cc0     00 13 62 F0 | 	shl	arg01, _var01
13cc4     00 15 62 F0 | 	shl	arg02, _var01
13cc8     1C 00 90 AD |  if_e	jmp	#LR__1900
13ccc     09 F7 43 F5 | 	or	dirb, arg01
13cd0     FD 01 02 F6 | 	mov	_var01, outb
13cd4     09 01 22 F5 | 	andn	_var01, arg01
13cd8     09 15 02 F5 | 	and	arg02, arg01
13cdc     0A 01 42 F5 | 	or	_var01, arg02
13ce0     00 FB 03 F6 | 	mov	outb, _var01
13ce4     18 00 90 FD | 	jmp	#LR__1901
13ce8                 | LR__1900
13ce8     09 F5 43 F5 | 	or	dira, arg01
13cec     FC 01 02 F6 | 	mov	_var01, outa
13cf0     09 01 22 F5 | 	andn	_var01, arg01
13cf4     09 15 02 F5 | 	and	arg02, arg01
13cf8     0A 01 42 F5 | 	or	_var01, arg02
13cfc     00 F9 03 F6 | 	mov	outa, _var01
13d00                 | LR__1901
13d00                 | __system___pinwrite_ret
13d00     2D 00 64 FD | 	ret
13d04                 | 
13d04                 | __system___waitms
13d04     09 01 02 F6 | 	mov	_var01, arg01
13d08     1A 02 62 FD | 	getct	_var02
13d0c     14 04 06 FB | 	rdlong	_var03, #20
13d10     97 14 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
13d14                 | LR__1910
13d14     01 00 00 FF 
13d18     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
13d1c     1C 00 90 CD |  if_b	jmp	#LR__1912
13d20     02 03 02 F1 | 	add	_var02, _var03
13d24     01 13 02 F6 | 	mov	arg01, _var02
13d28     00 12 66 FA | 	addct1	arg01, #0
13d2c     24 22 60 FD | 	waitct1
13d30     01 00 00 FF 
13d34     E8 01 86 F1 | 	sub	_var01, ##1000
13d38     D8 FF 9F FD | 	jmp	#LR__1910
13d3c                 | LR__1911
13d3c                 | LR__1912
13d3c     01 00 56 F2 | 	cmps	_var01, #1 wc
13d40     28 00 90 CD |  if_b	jmp	#LR__1913
13d44     02 01 02 FD | 	qmul	_var01, _var03
13d48     01 00 00 FF 
13d4c     E8 17 06 F6 | 	mov	arg03, ##1000
13d50     19 FA 61 FD | 	getqy	result1
13d54     18 12 62 FD | 	getqx	arg01
13d58     28 FA 61 FD | 	setq	result1
13d5c     0B 13 12 FD | 	qdiv	arg01, arg03
13d60     18 12 62 FD | 	getqx	arg01
13d64     01 13 62 FA | 	addct1	arg01, _var02
13d68     24 22 60 FD | 	waitct1
13d6c                 | LR__1913
13d6c                 | __system___waitms_ret
13d6c     2D 00 64 FD | 	ret
13d70                 | 
13d70                 | __system___waitus
13d70     09 01 02 F6 | 	mov	_var01, arg01
13d74     1A 02 62 FD | 	getct	_var02
13d78     14 04 06 FB | 	rdlong	_var03, #20
13d7c     97 14 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
13d80                 | LR__1920
13d80     A1 07 00 FF 
13d84     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
13d88     1C 00 90 CD |  if_b	jmp	#LR__1922
13d8c     02 03 02 F1 | 	add	_var02, _var03
13d90     01 13 02 F6 | 	mov	arg01, _var02
13d94     00 12 66 FA | 	addct1	arg01, #0
13d98     24 22 60 FD | 	waitct1
13d9c     A1 07 00 FF 
13da0     40 00 86 F1 | 	sub	_var01, ##1000000
13da4     D8 FF 9F FD | 	jmp	#LR__1920
13da8                 | LR__1921
13da8                 | LR__1922
13da8     01 00 56 F2 | 	cmps	_var01, #1 wc
13dac     28 00 90 CD |  if_b	jmp	#LR__1923
13db0     02 01 02 FD | 	qmul	_var01, _var03
13db4     A1 07 00 FF 
13db8     40 16 06 F6 | 	mov	arg03, ##1000000
13dbc     19 FA 61 FD | 	getqy	result1
13dc0     18 12 62 FD | 	getqx	arg01
13dc4     28 FA 61 FD | 	setq	result1
13dc8     0B 13 12 FD | 	qdiv	arg01, arg03
13dcc     18 FA 61 FD | 	getqx	result1
13dd0     FD 02 62 FA | 	addct1	_var02, result1
13dd4     24 22 60 FD | 	waitct1
13dd8                 | LR__1923
13dd8                 | __system___waitus_ret
13dd8     2D 00 64 FD | 	ret
13ddc                 | 
13ddc                 | __system___mount
13ddc     0B 4A 05 F6 | 	mov	COUNT_, #11
13de0     A8 00 A0 FD | 	call	#pushregs_
13de4     09 1F 02 F6 | 	mov	local01, arg01
13de8     0A 21 0A F6 | 	mov	local02, arg02 wz
13dec     01 22 66 F6 | 	neg	local03, #1
13df0     01 FA 65 A6 |  if_e	neg	result1, #1
13df4     98 02 90 AD |  if_e	jmp	#LR__1945
13df8     0F FB C1 FA | 	rdbyte	result1, local01
13dfc     2F FA 0D F2 | 	cmp	result1, #47 wz
13e00     28 00 90 5D |  if_ne	jmp	#LR__1932
13e04     0F 13 02 F6 | 	mov	arg01, local01
13e08     09 25 02 F6 | 	mov	local04, arg01
13e0c     97 06 48 FB | 	callpa	#(@LR__1931-@LR__1930)>>2,fcache_load_ptr_
13e10                 | LR__1930
13e10     12 FB C9 FA | 	rdbyte	result1, local04 wz
13e14     01 24 06 51 |  if_ne	add	local04, #1
13e18     F4 FF 9F 5D |  if_ne	jmp	#LR__1930
13e1c                 | LR__1931
13e1c     09 25 82 F1 | 	sub	local04, arg01
13e20     12 FB 01 F6 | 	mov	result1, local04
13e24     10 FA 55 F2 | 	cmps	result1, #16 wc
13e28     14 00 90 CD |  if_b	jmp	#LR__1933
13e2c                 | LR__1932
13e2c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
13e30     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
13e34     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
13e38     01 FA 65 F6 | 	neg	result1, #1
13e3c     50 02 90 FD | 	jmp	#LR__1945
13e40                 | LR__1933
13e40     00 26 06 F6 | 	mov	local05, #0
13e44                 | LR__1934
13e44     04 26 56 F2 | 	cmps	local05, #4 wc
13e48     B0 00 90 3D |  if_ae	jmp	#LR__1939
13e4c     13 13 02 F6 | 	mov	arg01, local05
13e50     02 12 66 F0 | 	shl	arg01, #2
13e54     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13e58     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
13e5c     09 FB 09 FB | 	rdlong	result1, arg01 wz
13e60     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13e64     00 22 56 A2 |  if_e	cmps	local03, #0 wc
13e68     13 23 02 86 |  if_c_and_z	mov	local03, local05
13e6c     84 00 90 8D |  if_c_and_z	jmp	#LR__1938
13e70     13 13 02 F6 | 	mov	arg01, local05
13e74     02 12 66 F0 | 	shl	arg01, #2
13e78     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13e7c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
13e80     09 13 02 FB | 	rdlong	arg01, arg01
13e84     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13e88     09 25 02 F6 | 	mov	local04, arg01
13e8c     97 06 48 FB | 	callpa	#(@LR__1936-@LR__1935)>>2,fcache_load_ptr_
13e90                 | LR__1935
13e90     12 FB C9 FA | 	rdbyte	result1, local04 wz
13e94     01 24 06 51 |  if_ne	add	local04, #1
13e98     F4 FF 9F 5D |  if_ne	jmp	#LR__1935
13e9c                 | LR__1936
13e9c     09 25 82 F1 | 	sub	local04, arg01
13ea0     12 29 02 F6 | 	mov	local06, local04
13ea4     14 13 02 F6 | 	mov	arg01, local06
13ea8     0F 13 02 F1 | 	add	arg01, local01
13eac     09 FB C1 FA | 	rdbyte	result1, arg01
13eb0     2F FA 0D F2 | 	cmp	result1, #47 wz
13eb4     14 2B 02 56 |  if_ne	mov	local07, local06
13eb8     0F 2B 02 51 |  if_ne	add	local07, local01
13ebc     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
13ec0     30 00 90 5D |  if_ne	jmp	#LR__1937
13ec4     13 17 02 F6 | 	mov	arg03, local05
13ec8     02 16 66 F0 | 	shl	arg03, #2
13ecc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13ed0     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
13ed4     0B 15 02 FB | 	rdlong	arg02, arg03
13ed8     0F 13 02 F6 | 	mov	arg01, local01
13edc     14 17 02 F6 | 	mov	arg03, local06
13ee0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13ee4     30 4A B0 FD | 	call	#__system__strncmp
13ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
13eec     13 23 02 A6 |  if_e	mov	local03, local05
13ef0     08 00 90 AD |  if_e	jmp	#LR__1939
13ef4                 | LR__1937
13ef4                 | LR__1938
13ef4     01 26 06 F1 | 	add	local05, #1
13ef8     48 FF 9F FD | 	jmp	#LR__1934
13efc                 | LR__1939
13efc     FF FF 7F FF 
13f00     FF 23 0E F2 | 	cmp	local03, ##-1 wz
13f04     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
13f08     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
13f0c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
13f10     01 FA 65 A6 |  if_e	neg	result1, #1
13f14     78 01 90 AD |  if_e	jmp	#LR__1945
13f18     11 27 02 F6 | 	mov	local05, local03
13f1c     13 2B 02 F6 | 	mov	local07, local05
13f20     02 2A 66 F0 | 	shl	local07, #2
13f24     74 E8 05 F1 | 	add	ptr___system__dat__, #116
13f28     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
13f2c     15 29 0A FB | 	rdlong	local06, local07 wz
13f30     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
13f34     58 00 90 AD |  if_e	jmp	#LR__1940
13f38     4C 28 06 F1 | 	add	local06, #76
13f3c     14 2B 0A FB | 	rdlong	local07, local06 wz
13f40     4C 28 86 F1 | 	sub	local06, #76
13f44     48 00 90 AD |  if_e	jmp	#LR__1940
13f48     4C 28 06 F1 | 	add	local06, #76
13f4c     14 2B 02 FB | 	rdlong	local07, local06
13f50     15 23 02 F6 | 	mov	local03, local07
13f54     13 2A 46 F7 | 	zerox	local07, #19
13f58     14 22 46 F0 | 	shr	local03, #20
13f5c     02 22 66 F0 | 	shl	local03, #2
13f60     ED 22 02 F1 | 	add	local03, __methods__
13f64     11 23 02 FB | 	rdlong	local03, local03
13f68     13 29 02 F6 | 	mov	local06, local05
13f6c     02 28 66 F0 | 	shl	local06, #2
13f70     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13f74     F4 28 02 F1 | 	add	local06, ptr___system__dat__
13f78     14 13 02 FB | 	rdlong	arg01, local06
13f7c     F2 28 02 F6 | 	mov	local06, objptr
13f80     15 E5 01 F6 | 	mov	objptr, local07
13f84     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13f88     2D 22 62 FD | 	call	local03
13f8c     14 E5 01 F6 | 	mov	objptr, local06
13f90                 | LR__1940
13f90     13 2D 02 F6 | 	mov	local08, local05
13f94     02 2C 66 F0 | 	shl	local08, #2
13f98     74 E8 05 F1 | 	add	ptr___system__dat__, #116
13f9c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
13fa0     16 21 62 FC | 	wrlong	local02, local08
13fa4     00 20 0E F2 | 	cmp	local02, #0 wz
13fa8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
13fac     18 00 90 5D |  if_ne	jmp	#LR__1941
13fb0     02 26 66 F0 | 	shl	local05, #2
13fb4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
13fb8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
13fbc     13 01 68 FC | 	wrlong	#0, local05
13fc0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
13fc4     C4 00 90 FD | 	jmp	#LR__1944
13fc8                 | LR__1941
13fc8     13 2F 02 F6 | 	mov	local09, local05
13fcc     04 2E 66 F0 | 	shl	local09, #4
13fd0     24 E8 05 F1 | 	add	ptr___system__dat__, #36
13fd4     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
13fd8     17 13 02 F6 | 	mov	arg01, local09
13fdc     0F 15 02 F6 | 	mov	arg02, local01
13fe0     10 16 06 F6 | 	mov	arg03, #16
13fe4     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
13fe8     80 48 B0 FD | 	call	#__system__strncpy
13fec     48 20 06 F1 | 	add	local02, #72
13ff0     10 2D 0A FB | 	rdlong	local08, local02 wz
13ff4     48 20 86 F1 | 	sub	local02, #72
13ff8     7C 00 90 AD |  if_e	jmp	#LR__1943
13ffc     48 20 06 F1 | 	add	local02, #72
14000     10 2D 02 FB | 	rdlong	local08, local02
14004     16 31 02 F6 | 	mov	local10, local08
14008     13 2C 46 F7 | 	zerox	local08, #19
1400c     14 30 46 F0 | 	shr	local10, #20
14010     02 30 66 F0 | 	shl	local10, #2
14014     ED 30 02 F1 | 	add	local10, __methods__
14018     18 31 02 FB | 	rdlong	local10, local10
1401c     17 13 02 F6 | 	mov	arg01, local09
14020     F2 32 02 F6 | 	mov	local11, objptr
14024     16 E5 01 F6 | 	mov	objptr, local08
14028     2D 30 62 FD | 	call	local10
1402c     19 E5 01 F6 | 	mov	objptr, local11
14030     FD 12 0A F6 | 	mov	arg01, result1 wz
14034     40 00 90 AD |  if_e	jmp	#LR__1942
14038     13 2D 02 F6 | 	mov	local08, local05
1403c     02 2C 66 F0 | 	shl	local08, #2
14040     74 E8 05 F1 | 	add	ptr___system__dat__, #116
14044     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
14048     16 01 68 FC | 	wrlong	#0, local08
1404c     02 26 66 F0 | 	shl	local05, #2
14050     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
14054     F4 26 02 F1 | 	add	local05, ptr___system__dat__
14058     13 01 68 FC | 	wrlong	#0, local05
1405c     09 13 6A F6 | 	neg	arg01, arg01 wz
14060     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
14064     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
14068     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1406c     01 FA 65 56 |  if_ne	neg	result1, #1
14070     00 FA 05 A6 |  if_e	mov	result1, #0
14074     18 00 90 FD | 	jmp	#LR__1945
14078                 | LR__1942
14078                 | LR__1943
14078     02 26 66 F0 | 	shl	local05, #2
1407c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
14080     F4 26 02 F1 | 	add	local05, ptr___system__dat__
14084     13 2F 62 FC | 	wrlong	local09, local05
14088     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1408c                 | LR__1944
1408c     00 FA 05 F6 | 	mov	result1, #0
14090                 | LR__1945
14090     A7 F0 03 F6 | 	mov	ptra, fp
14094     B2 00 A0 FD | 	call	#popregs_
14098                 | __system___mount_ret
14098     2D 00 64 FD | 	ret
1409c                 | 
1409c                 | __system___chdir
1409c     00 4A 05 F6 | 	mov	COUNT_, #0
140a0     A8 00 A0 FD | 	call	#pushregs_
140a4     40 F0 07 F1 | 	add	ptra, #64
140a8     04 4E 05 F1 | 	add	fp, #4
140ac     A7 12 62 FC | 	wrlong	arg01, fp
140b0     04 4E 05 F1 | 	add	fp, #4
140b4     A7 14 02 F6 | 	mov	arg02, fp
140b8     08 4E 85 F1 | 	sub	fp, #8
140bc     50 44 B0 FD | 	call	#__system__stat
140c0     3C 4E 05 F1 | 	add	fp, #60
140c4     A7 FA 61 FC | 	wrlong	result1, fp
140c8     3C 4E 85 F1 | 	sub	fp, #60
140cc     00 FA 0D F2 | 	cmp	result1, #0 wz
140d0     3C 4E 05 51 |  if_ne	add	fp, #60
140d4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
140d8     3C 4E 85 51 |  if_ne	sub	fp, #60
140dc     BC 00 90 5D |  if_ne	jmp	#LR__1952
140e0     10 4E 05 F1 | 	add	fp, #16
140e4     A7 12 02 FB | 	rdlong	arg01, fp
140e8     10 4E 85 F1 | 	sub	fp, #16
140ec     78 00 00 FF 
140f0     00 12 06 F5 | 	and	arg01, ##61440
140f4     08 00 00 FF 
140f8     00 12 0E F2 | 	cmp	arg01, ##4096 wz
140fc     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
14100     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
14104     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
14108     01 FA 65 56 |  if_ne	neg	result1, #1
1410c     8C 00 90 5D |  if_ne	jmp	#LR__1952
14110     04 4E 05 F1 | 	add	fp, #4
14114     A7 16 02 FB | 	rdlong	arg03, fp
14118     04 4E 85 F1 | 	sub	fp, #4
1411c     0B 17 C2 FA | 	rdbyte	arg03, arg03
14120     2F 16 0E F2 | 	cmp	arg03, #47 wz
14124     24 00 90 5D |  if_ne	jmp	#LR__1950
14128     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1412c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
14130     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
14134     04 4E 05 F1 | 	add	fp, #4
14138     A7 14 02 FB | 	rdlong	arg02, fp
1413c     04 4E 85 F1 | 	sub	fp, #4
14140     00 17 06 F6 | 	mov	arg03, #256
14144     24 47 B0 FD | 	call	#__system__strncpy
14148     4C 00 90 FD | 	jmp	#LR__1951
1414c                 | LR__1950
1414c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
14150     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
14154     38 4E 05 F1 | 	add	fp, #56
14158     A7 12 62 FC | 	wrlong	arg01, fp
1415c     38 4E 85 F1 | 	sub	fp, #56
14160     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
14164     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
14168     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1416c     00 17 06 F6 | 	mov	arg03, #256
14170     F8 46 B0 FD | 	call	#__system__strncpy
14174     38 4E 05 F1 | 	add	fp, #56
14178     A7 12 02 FB | 	rdlong	arg01, fp
1417c     34 4E 85 F1 | 	sub	fp, #52
14180     A7 14 02 FB | 	rdlong	arg02, fp
14184     04 4E 85 F1 | 	sub	fp, #4
14188     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1418c     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
14190     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
14194     10 00 B0 FD | 	call	#__system____getvfsforfile
14198                 | LR__1951
14198     00 FA 05 F6 | 	mov	result1, #0
1419c                 | LR__1952
1419c     A7 F0 03 F6 | 	mov	ptra, fp
141a0     B2 00 A0 FD | 	call	#popregs_
141a4                 | __system___chdir_ret
141a4     2D 00 64 FD | 	ret
141a8                 | 
141a8                 | __system____getvfsforfile
141a8     0E 4A 05 F6 | 	mov	COUNT_, #14
141ac     A8 00 A0 FD | 	call	#pushregs_
141b0     09 1F 02 F6 | 	mov	local01, arg01
141b4     0A 21 02 F6 | 	mov	local02, arg02
141b8     0B 23 02 F6 | 	mov	local03, arg03
141bc     97 10 48 FB | 	callpa	#(@LR__1961-@LR__1960)>>2,fcache_load_ptr_
141c0                 | LR__1960
141c0     10 FB C1 FA | 	rdbyte	result1, local02
141c4     2F FA 0D F2 | 	cmp	result1, #47 wz
141c8     01 20 06 A1 |  if_e	add	local02, #1
141cc     10 25 C2 AA |  if_e	rdbyte	local04, local02
141d0     01 20 86 A1 |  if_e	sub	local02, #1
141d4     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
141d8     01 20 06 A1 |  if_e	add	local02, #1
141dc     E0 FF 9F AD |  if_e	jmp	#LR__1960
141e0                 | LR__1961
141e0     10 25 C2 FA | 	rdbyte	local04, local02
141e4     2F 24 0E F2 | 	cmp	local04, #47 wz
141e8     14 00 90 5D |  if_ne	jmp	#LR__1962
141ec     0F 13 02 F6 | 	mov	arg01, local01
141f0     10 15 02 F6 | 	mov	arg02, local02
141f4     00 17 06 F6 | 	mov	arg03, #256
141f8     70 46 B0 FD | 	call	#__system__strncpy
141fc     7C 00 90 FD | 	jmp	#LR__1964
14200                 | LR__1962
14200     84 E8 05 F1 | 	add	ptr___system__dat__, #132
14204     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
14208     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1420c     0F 13 02 F6 | 	mov	arg01, local01
14210     00 17 06 F6 | 	mov	arg03, #256
14214     54 46 B0 FD | 	call	#__system__strncpy
14218     10 25 CA FA | 	rdbyte	local04, local02 wz
1421c     5C 00 90 AD |  if_e	jmp	#LR__1963
14220     10 25 C2 FA | 	rdbyte	local04, local02
14224     2E 24 0E F2 | 	cmp	local04, #46 wz
14228     01 20 06 A1 |  if_e	add	local02, #1
1422c     10 27 C2 AA |  if_e	rdbyte	local05, local02
14230     01 20 86 A1 |  if_e	sub	local02, #1
14234     13 29 02 A6 |  if_e	mov	local06, local05
14238     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1423c     3C 00 90 AD |  if_e	jmp	#LR__1963
14240     0F 27 C2 FA | 	rdbyte	local05, local01
14244     2F 26 0E F2 | 	cmp	local05, #47 wz
14248     01 1E 06 A1 |  if_e	add	local01, #1
1424c     0F 25 C2 AA |  if_e	rdbyte	local04, local01
14250     01 1E 86 A1 |  if_e	sub	local01, #1
14254     00 24 4E A2 |  if_e	cmps	local04, #0 wz
14258     16 01 00 5F 
1425c     BC 15 06 56 |  if_ne	mov	arg02, ##@LR__4000
14260     0F 13 02 56 |  if_ne	mov	arg01, local01
14264     00 17 06 56 |  if_ne	mov	arg03, #256
14268     4C 46 B0 5D |  if_ne	call	#__system__strncat
1426c     0F 13 02 F6 | 	mov	arg01, local01
14270     10 15 02 F6 | 	mov	arg02, local02
14274     00 17 06 F6 | 	mov	arg03, #256
14278     3C 46 B0 FD | 	call	#__system__strncat
1427c                 | LR__1963
1427c                 | LR__1964
1427c     0F 13 02 F6 | 	mov	arg01, local01
14280     F4 47 B0 FD | 	call	#__system___normalizeName
14284     0F 25 CA FA | 	rdbyte	local04, local01 wz
14288     1C 00 90 AD |  if_e	jmp	#LR__1965
1428c     0F 25 C2 FA | 	rdbyte	local04, local01
14290     2F 24 0E F2 | 	cmp	local04, #47 wz
14294     01 1E 06 A1 |  if_e	add	local01, #1
14298     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1429c     01 1E 86 A1 |  if_e	sub	local01, #1
142a0     00 28 4E A2 |  if_e	cmps	local06, #0 wz
142a4     18 00 90 5D |  if_ne	jmp	#LR__1966
142a8                 | LR__1965
142a8     01 00 00 FF 
142ac     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
142b0     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
142b4     01 00 00 FF 
142b8     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
142bc     EC 01 90 FD | 	jmp	#LR__1980
142c0                 | LR__1966
142c0     00 2A 06 F6 | 	mov	local07, #0
142c4                 | LR__1967
142c4     04 2A 56 F2 | 	cmps	local07, #4 wc
142c8     CC 01 90 3D |  if_ae	jmp	#LR__1979
142cc     15 29 02 F6 | 	mov	local06, local07
142d0     02 28 66 F0 | 	shl	local06, #2
142d4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
142d8     F4 28 02 F1 | 	add	local06, ptr___system__dat__
142dc     14 29 0A FB | 	rdlong	local06, local06 wz
142e0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
142e4     A8 01 90 AD |  if_e	jmp	#LR__1978
142e8     15 25 02 F6 | 	mov	local04, local07
142ec     02 24 66 F0 | 	shl	local04, #2
142f0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
142f4     F4 24 02 F1 | 	add	local04, ptr___system__dat__
142f8     12 13 02 FB | 	rdlong	arg01, local04
142fc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
14300     09 2D 02 F6 | 	mov	local08, arg01
14304     97 06 48 FB | 	callpa	#(@LR__1969-@LR__1968)>>2,fcache_load_ptr_
14308                 | LR__1968
14308     16 FB C9 FA | 	rdbyte	result1, local08 wz
1430c     01 2C 06 51 |  if_ne	add	local08, #1
14310     F4 FF 9F 5D |  if_ne	jmp	#LR__1968
14314                 | LR__1969
14314     09 2D 82 F1 | 	sub	local08, arg01
14318     16 2F 02 F6 | 	mov	local09, local08
1431c     17 25 02 F6 | 	mov	local04, local09
14320     0F 25 02 F1 | 	add	local04, local01
14324     12 29 C2 FA | 	rdbyte	local06, local04
14328     2F 28 0E F2 | 	cmp	local06, #47 wz
1432c     17 31 02 56 |  if_ne	mov	local10, local09
14330     0F 31 02 51 |  if_ne	add	local10, local01
14334     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
14338     54 01 90 5D |  if_ne	jmp	#LR__1977
1433c     15 17 02 F6 | 	mov	arg03, local07
14340     02 16 66 F0 | 	shl	arg03, #2
14344     64 E8 05 F1 | 	add	ptr___system__dat__, #100
14348     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
1434c     0B 15 02 FB | 	rdlong	arg02, arg03
14350     17 17 02 F6 | 	mov	arg03, local09
14354     0F 13 02 F6 | 	mov	arg01, local01
14358     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1435c     B8 45 B0 FD | 	call	#__system__strncmp
14360     00 FA 4D F2 | 	cmps	result1, #0 wz
14364     28 01 90 5D |  if_ne	jmp	#LR__1977
14368     15 33 02 F6 | 	mov	local11, local07
1436c     02 32 66 F0 | 	shl	local11, #2
14370     74 E8 05 F1 | 	add	ptr___system__dat__, #116
14374     F4 32 02 F1 | 	add	local11, ptr___system__dat__
14378     19 35 02 FB | 	rdlong	local12, local11
1437c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
14380     97 22 48 FB | 	callpa	#(@LR__1971-@LR__1970)>>2,fcache_load_ptr_
14384                 | LR__1970
14384     17 29 02 F6 | 	mov	local06, local09
14388     01 28 06 F1 | 	add	local06, #1
1438c     0F 29 02 F1 | 	add	local06, local01
14390     14 33 C2 FA | 	rdbyte	local11, local06
14394     2E 32 0E F2 | 	cmp	local11, #46 wz
14398     2C 00 90 5D |  if_ne	jmp	#LR__1972
1439c     17 33 02 F6 | 	mov	local11, local09
143a0     02 32 06 F1 | 	add	local11, #2
143a4     0F 33 02 F1 | 	add	local11, local01
143a8     19 31 C2 FA | 	rdbyte	local10, local11
143ac     2F 30 0E F2 | 	cmp	local10, #47 wz
143b0     17 37 02 56 |  if_ne	mov	local13, local09
143b4     02 36 06 51 |  if_ne	add	local13, #2
143b8     0F 37 02 51 |  if_ne	add	local13, local01
143bc     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
143c0     01 2E 06 A1 |  if_e	add	local09, #1
143c4     BC FF 9F AD |  if_e	jmp	#LR__1970
143c8                 | LR__1971
143c8                 | LR__1972
143c8     00 22 0E F2 | 	cmp	local03, #0 wz
143cc     11 13 02 56 |  if_ne	mov	arg01, local03
143d0     0F 15 02 56 |  if_ne	mov	arg02, local01
143d4     00 17 06 56 |  if_ne	mov	arg03, #256
143d8     90 44 B0 5D |  if_ne	call	#__system__strncpy
143dc     0F 15 02 F6 | 	mov	arg02, local01
143e0     17 15 02 F1 | 	add	arg02, local09
143e4     01 14 06 F1 | 	add	arg02, #1
143e8     0F 13 02 F6 | 	mov	arg01, local01
143ec     BC F6 BF FD | 	call	#__system____builtin_strcpy
143f0     0F 13 02 F6 | 	mov	arg01, local01
143f4     09 2D 02 F6 | 	mov	local08, arg01
143f8     97 06 48 FB | 	callpa	#(@LR__1974-@LR__1973)>>2,fcache_load_ptr_
143fc                 | LR__1973
143fc     16 FB C9 FA | 	rdbyte	result1, local08 wz
14400     01 2C 06 51 |  if_ne	add	local08, #1
14404     F4 FF 9F 5D |  if_ne	jmp	#LR__1973
14408                 | LR__1974
14408     09 2D 82 F1 | 	sub	local08, arg01
1440c     16 2F 02 F6 | 	mov	local09, local08
14410                 | LR__1975
14410     01 2E 56 F2 | 	cmps	local09, #1 wc
14414     70 00 90 CD |  if_b	jmp	#LR__1976
14418     17 25 02 F6 | 	mov	local04, local09
1441c     0F 25 02 F1 | 	add	local04, local01
14420     12 33 C2 FA | 	rdbyte	local11, local04
14424     2F 32 0E F2 | 	cmp	local11, #47 wz
14428     17 33 02 A6 |  if_e	mov	local11, local09
1442c     0F 33 02 A1 |  if_e	add	local11, local01
14430     19 01 48 AC |  if_e	wrbyte	#0, local11
14434     01 2E 86 A1 |  if_e	sub	local09, #1
14438     D4 FF 9F AD |  if_e	jmp	#LR__1975
1443c     17 25 02 F6 | 	mov	local04, local09
14440     0F 25 02 F1 | 	add	local04, local01
14444     12 33 C2 FA | 	rdbyte	local11, local04
14448     2E 32 0E F2 | 	cmp	local11, #46 wz
1444c     38 00 90 5D |  if_ne	jmp	#LR__1976
14450     02 2E 56 F2 | 	cmps	local09, #2 wc
14454     30 00 90 CD |  if_b	jmp	#LR__1976
14458     17 39 02 F6 | 	mov	local14, local09
1445c     01 38 86 F1 | 	sub	local14, #1
14460     0F 39 02 F1 | 	add	local14, local01
14464     1C 27 C2 FA | 	rdbyte	local05, local14
14468     2F 26 0E F2 | 	cmp	local05, #47 wz
1446c     18 00 90 5D |  if_ne	jmp	#LR__1976
14470     17 25 02 F6 | 	mov	local04, local09
14474     01 24 86 F1 | 	sub	local04, #1
14478     0F 25 02 F1 | 	add	local04, local01
1447c     12 01 48 FC | 	wrbyte	#0, local04
14480     02 2E 86 F1 | 	sub	local09, #2
14484     88 FF 9F FD | 	jmp	#LR__1975
14488                 | LR__1976
14488     1A FB 01 F6 | 	mov	result1, local12
1448c     1C 00 90 FD | 	jmp	#LR__1980
14490                 | LR__1977
14490                 | LR__1978
14490     01 2A 06 F1 | 	add	local07, #1
14494     2C FE 9F FD | 	jmp	#LR__1967
14498                 | LR__1979
14498     03 00 00 FF 
1449c     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
144a0     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
144a4     03 00 00 FF 
144a8     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
144ac                 | LR__1980
144ac     A7 F0 03 F6 | 	mov	ptra, fp
144b0     B2 00 A0 FD | 	call	#popregs_
144b4                 | __system____getvfsforfile_ret
144b4     2D 00 64 FD | 	ret
144b8                 | 
144b8                 | __system___basic_open
144b8     05 4A 05 F6 | 	mov	COUNT_, #5
144bc     A8 00 A0 FD | 	call	#pushregs_
144c0     0A 1F 02 F6 | 	mov	local01, arg02
144c4     0B 21 02 F6 | 	mov	local02, arg03
144c8     0C 23 02 F6 | 	mov	local03, arg04
144cc     00 24 06 F6 | 	mov	local04, #0
144d0     70 43 B0 FD | 	call	#__system____getftab
144d4     FD 26 0A F6 | 	mov	local05, result1 wz
144d8     18 00 90 5D |  if_ne	jmp	#LR__1990
144dc     EE 12 02 F6 | 	mov	arg01, abortchain
144e0     0C 14 06 F6 | 	mov	arg02, #12
144e4     01 16 06 F6 | 	mov	arg03, #1
144e8     DA 00 A0 FD | 	call	#__longjmp
144ec     01 FA 65 F6 | 	neg	result1, #1
144f0     14 01 90 FD | 	jmp	#LR__1999
144f4                 | LR__1990
144f4     08 26 06 F1 | 	add	local05, #8
144f8     13 FB 09 FB | 	rdlong	result1, local05 wz
144fc     08 26 86 F1 | 	sub	local05, #8
14500     13 13 02 56 |  if_ne	mov	arg01, local05
14504     90 3A B0 5D |  if_ne	call	#__system___closeraw
14508     00 1E 0E F2 | 	cmp	local01, #0 wz
1450c     00 20 0E A2 |  if_e	cmp	local02, #0 wz
14510     00 22 0E A2 |  if_e	cmp	local03, #0 wz
14514     3C 00 90 AD |  if_e	jmp	#LR__1992
14518     0C 12 06 F6 | 	mov	arg01, #12
1451c     78 2F B0 FD | 	call	#__system___gc_alloc_managed
14520     FD 24 0A F6 | 	mov	local04, result1 wz
14524     18 00 90 5D |  if_ne	jmp	#LR__1991
14528     EE 12 02 F6 | 	mov	arg01, abortchain
1452c     07 14 06 F6 | 	mov	arg02, #7
14530     01 16 06 F6 | 	mov	arg03, #1
14534     DA 00 A0 FD | 	call	#__longjmp
14538     01 FA 65 F6 | 	neg	result1, #1
1453c     C8 00 90 FD | 	jmp	#LR__1999
14540                 | LR__1991
14540     12 01 68 FC | 	wrlong	#0, local04
14544     04 24 06 F1 | 	add	local04, #4
14548     12 01 68 FC | 	wrlong	#0, local04
1454c     04 24 86 F1 | 	sub	local04, #4
14550     13 25 62 FC | 	wrlong	local04, local05
14554                 | LR__1992
14554     00 1E 0E F2 | 	cmp	local01, #0 wz
14558     20 00 90 AD |  if_e	jmp	#LR__1993
1455c     12 1F 62 FC | 	wrlong	local01, local04
14560     12 FB 01 F6 | 	mov	result1, local04
14564     00 58 02 FF 
14568     00 FA 45 F5 | 	or	result1, ##78643200
1456c     1C 26 06 F1 | 	add	local05, #28
14570     13 FB 61 FC | 	wrlong	result1, local05
14574     1C 26 86 F1 | 	sub	local05, #28
14578     0C 00 90 FD | 	jmp	#LR__1994
1457c                 | LR__1993
1457c     1C 26 06 F1 | 	add	local05, #28
14580     13 01 68 FC | 	wrlong	#0, local05
14584     1C 26 86 F1 | 	sub	local05, #28
14588                 | LR__1994
14588     00 20 0E F2 | 	cmp	local02, #0 wz
1458c     28 00 90 AD |  if_e	jmp	#LR__1995
14590     04 24 06 F1 | 	add	local04, #4
14594     12 21 62 FC | 	wrlong	local02, local04
14598     04 24 86 F1 | 	sub	local04, #4
1459c     12 FB 01 F6 | 	mov	result1, local04
145a0     00 60 02 FF 
145a4     00 FA 45 F5 | 	or	result1, ##79691776
145a8     20 26 06 F1 | 	add	local05, #32
145ac     13 FB 61 FC | 	wrlong	result1, local05
145b0     20 26 86 F1 | 	sub	local05, #32
145b4     0C 00 90 FD | 	jmp	#LR__1996
145b8                 | LR__1995
145b8     20 26 06 F1 | 	add	local05, #32
145bc     13 01 68 FC | 	wrlong	#0, local05
145c0     20 26 86 F1 | 	sub	local05, #32
145c4                 | LR__1996
145c4     00 22 0E F2 | 	cmp	local03, #0 wz
145c8     24 00 90 AD |  if_e	jmp	#LR__1997
145cc     08 24 06 F1 | 	add	local04, #8
145d0     12 23 62 FC | 	wrlong	local03, local04
145d4     08 24 86 F1 | 	sub	local04, #8
145d8     00 68 02 FF 
145dc     00 24 46 F5 | 	or	local04, ##80740352
145e0     24 26 06 F1 | 	add	local05, #36
145e4     13 25 62 FC | 	wrlong	local04, local05
145e8     24 26 86 F1 | 	sub	local05, #36
145ec     0C 00 90 FD | 	jmp	#LR__1998
145f0                 | LR__1997
145f0     24 26 06 F1 | 	add	local05, #36
145f4     13 01 68 FC | 	wrlong	#0, local05
145f8     24 26 86 F1 | 	sub	local05, #36
145fc                 | LR__1998
145fc     08 26 06 F1 | 	add	local05, #8
14600     13 0F 68 FC | 	wrlong	#7, local05
14604     00 FA 05 F6 | 	mov	result1, #0
14608                 | LR__1999
14608     A7 F0 03 F6 | 	mov	ptra, fp
1460c     B2 00 A0 FD | 	call	#popregs_
14610                 | __system___basic_open_ret
14610     2D 00 64 FD | 	ret
14614                 | 
14614                 | __system___basic_open_string
14614     04 4A 05 F6 | 	mov	COUNT_, #4
14618     A8 00 A0 FD | 	call	#pushregs_
1461c     0A 1F 02 F6 | 	mov	local01, arg02
14620     0B 21 02 F6 | 	mov	local02, arg03
14624     1C 42 B0 FD | 	call	#__system____getftab
14628     FD 22 0A F6 | 	mov	local03, result1 wz
1462c     18 00 90 5D |  if_ne	jmp	#LR__2000
14630     EE 12 02 F6 | 	mov	arg01, abortchain
14634     0C 14 06 F6 | 	mov	arg02, #12
14638     01 16 06 F6 | 	mov	arg03, #1
1463c     DA 00 A0 FD | 	call	#__longjmp
14640     01 FA 65 F6 | 	neg	result1, #1
14644     58 00 90 FD | 	jmp	#LR__2002
14648                 | LR__2000
14648     08 22 06 F1 | 	add	local03, #8
1464c     11 19 0A FB | 	rdlong	arg04, local03 wz
14650     08 22 86 F1 | 	sub	local03, #8
14654     11 13 02 56 |  if_ne	mov	arg01, local03
14658     3C 39 B0 5D |  if_ne	call	#__system___closeraw
1465c     0F 15 02 F6 | 	mov	arg02, local01
14660     10 17 02 F6 | 	mov	arg03, local02
14664     11 13 02 F6 | 	mov	arg01, local03
14668     B6 19 06 F6 | 	mov	arg04, #438
1466c     24 36 B0 FD | 	call	#__system___openraw
14670     FD 24 02 F6 | 	mov	local04, result1
14674     00 24 56 F2 | 	cmps	local04, #0 wc
14678     20 00 90 3D |  if_ae	jmp	#LR__2001
1467c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
14680     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
14684     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
14688     EE 12 02 F6 | 	mov	arg01, abortchain
1468c     01 16 06 F6 | 	mov	arg03, #1
14690     DA 00 A0 FD | 	call	#__longjmp
14694     01 FA 65 F6 | 	neg	result1, #1
14698     04 00 90 FD | 	jmp	#LR__2002
1469c                 | LR__2001
1469c     12 FB 01 F6 | 	mov	result1, local04
146a0                 | LR__2002
146a0     A7 F0 03 F6 | 	mov	ptra, fp
146a4     B2 00 A0 FD | 	call	#popregs_
146a8                 | __system___basic_open_string_ret
146a8     2D 00 64 FD | 	ret
146ac                 | 
146ac                 | __system___basic_print_char
146ac     03 4A 05 F6 | 	mov	COUNT_, #3
146b0     A8 00 A0 FD | 	call	#pushregs_
146b4     0A 1F 02 F6 | 	mov	local01, arg02
146b8     DC 48 B0 FD | 	call	#__system___gettxfunc
146bc     FD 20 0A F6 | 	mov	local02, result1 wz
146c0     00 FA 05 A6 |  if_e	mov	result1, #0
146c4     30 00 90 AD |  if_e	jmp	#LR__2010
146c8     10 23 02 F6 | 	mov	local03, local02
146cc     13 20 46 F7 | 	zerox	local02, #19
146d0     14 22 46 F0 | 	shr	local03, #20
146d4     02 22 66 F0 | 	shl	local03, #2
146d8     ED 22 02 F1 | 	add	local03, __methods__
146dc     11 23 02 FB | 	rdlong	local03, local03
146e0     0F 13 02 F6 | 	mov	arg01, local01
146e4     F2 1E 02 F6 | 	mov	local01, objptr
146e8     10 E5 01 F6 | 	mov	objptr, local02
146ec     2D 22 62 FD | 	call	local03
146f0     0F E5 01 F6 | 	mov	objptr, local01
146f4     01 FA 05 F6 | 	mov	result1, #1
146f8                 | LR__2010
146f8     A7 F0 03 F6 | 	mov	ptra, fp
146fc     B2 00 A0 FD | 	call	#popregs_
14700                 | __system___basic_print_char_ret
14700     2D 00 64 FD | 	ret
14704                 | 
14704                 | __system___basic_print_string
14704     03 4A 05 F6 | 	mov	COUNT_, #3
14708     A8 00 A0 FD | 	call	#pushregs_
1470c     0A 1F 02 F6 | 	mov	local01, arg02
14710     0B 21 02 F6 | 	mov	local02, arg03
14714     80 48 B0 FD | 	call	#__system___gettxfunc
14718     FD 22 0A F6 | 	mov	local03, result1 wz
1471c     00 FA 05 A6 |  if_e	mov	result1, #0
14720     18 00 90 AD |  if_e	jmp	#LR__2020
14724     00 1E 0E F2 | 	cmp	local01, #0 wz
14728     00 FA 05 A6 |  if_e	mov	result1, #0
1472c     11 13 02 56 |  if_ne	mov	arg01, local03
14730     10 15 02 56 |  if_ne	mov	arg02, local02
14734     0F 17 02 56 |  if_ne	mov	arg03, local01
14738     BC 01 B0 5D |  if_ne	call	#__system___fmtstr
1473c                 | LR__2020
1473c     A7 F0 03 F6 | 	mov	ptra, fp
14740     B2 00 A0 FD | 	call	#popregs_
14744                 | __system___basic_print_string_ret
14744     2D 00 64 FD | 	ret
14748                 | 
14748                 | __system___basic_print_integer
14748     04 4A 05 F6 | 	mov	COUNT_, #4
1474c     A8 00 A0 FD | 	call	#pushregs_
14750     0A 1F 02 F6 | 	mov	local01, arg02
14754     0B 21 02 F6 | 	mov	local02, arg03
14758     0C 23 02 F6 | 	mov	local03, arg04
1475c     38 48 B0 FD | 	call	#__system___gettxfunc
14760     FD 24 0A F6 | 	mov	local04, result1 wz
14764     00 FA 05 A6 |  if_e	mov	result1, #0
14768     12 13 02 56 |  if_ne	mov	arg01, local04
1476c     10 15 02 56 |  if_ne	mov	arg02, local02
14770     0F 17 02 56 |  if_ne	mov	arg03, local01
14774     11 19 02 56 |  if_ne	mov	arg04, local03
14778     68 02 B0 5D |  if_ne	call	#__system___fmtnum
1477c     A7 F0 03 F6 | 	mov	ptra, fp
14780     B2 00 A0 FD | 	call	#popregs_
14784                 | __system___basic_print_integer_ret
14784     2D 00 64 FD | 	ret
14788                 | 
14788                 | __system___basic_print_unsigned
14788     03 4A 05 F6 | 	mov	COUNT_, #3
1478c     A8 00 A0 FD | 	call	#pushregs_
14790     0A 1F 02 F6 | 	mov	local01, arg02
14794     0B 21 02 F6 | 	mov	local02, arg03
14798     0C 23 02 F6 | 	mov	local03, arg04
1479c     F8 47 B0 FD | 	call	#__system___gettxfunc
147a0     FD 12 0A F6 | 	mov	arg01, result1 wz
147a4     00 FA 05 A6 |  if_e	mov	result1, #0
147a8     3A 20 26 54 |  if_ne	bith	local02, #58
147ac     10 15 02 56 |  if_ne	mov	arg02, local02
147b0     0F 17 02 56 |  if_ne	mov	arg03, local01
147b4     11 19 02 56 |  if_ne	mov	arg04, local03
147b8     28 02 B0 5D |  if_ne	call	#__system___fmtnum
147bc     A7 F0 03 F6 | 	mov	ptra, fp
147c0     B2 00 A0 FD | 	call	#popregs_
147c4                 | __system___basic_print_unsigned_ret
147c4     2D 00 64 FD | 	ret
147c8                 | 
147c8                 | __system___basic_put
147c8     04 4A 05 F6 | 	mov	COUNT_, #4
147cc     A8 00 A0 FD | 	call	#pushregs_
147d0     0D 1F 02 F6 | 	mov	local01, arg05
147d4     0F 19 02 FD | 	qmul	arg04, local01
147d8     09 21 02 F6 | 	mov	local02, arg01
147dc     0B 23 02 F6 | 	mov	local03, arg03
147e0     00 14 0E F2 | 	cmp	arg02, #0 wz
147e4     01 14 86 51 |  if_ne	sub	arg02, #1
147e8     10 13 02 56 |  if_ne	mov	arg01, local02
147ec     00 16 06 56 |  if_ne	mov	arg03, #0
147f0     18 24 62 FD | 	getqx	local04
147f4     94 3E B0 5D |  if_ne	call	#__system__lseek
147f8     11 15 02 F6 | 	mov	arg02, local03
147fc     12 17 02 F6 | 	mov	arg03, local04
14800     10 13 02 F6 | 	mov	arg01, local02
14804     D0 3D B0 FD | 	call	#__system__write
14808     FD 24 02 F6 | 	mov	local04, result1
1480c     01 24 56 F2 | 	cmps	local04, #1 wc
14810     10 00 90 CD |  if_b	jmp	#LR__2030
14814     12 5F 02 F6 | 	mov	muldiva_, local04
14818     0F 61 02 F6 | 	mov	muldivb_, local01
1481c     BA 00 A0 FD | 	call	#divide_
14820     30 25 02 F6 | 	mov	local04, muldivb_
14824                 | LR__2030
14824     12 FB 01 F6 | 	mov	result1, local04
14828     A7 F0 03 F6 | 	mov	ptra, fp
1482c     B2 00 A0 FD | 	call	#popregs_
14830                 | __system___basic_put_ret
14830     2D 00 64 FD | 	ret
14834                 | 
14834                 | __system___basic_get
14834     04 4A 05 F6 | 	mov	COUNT_, #4
14838     A8 00 A0 FD | 	call	#pushregs_
1483c     0D 1F 02 F6 | 	mov	local01, arg05
14840     0F 19 02 FD | 	qmul	arg04, local01
14844     09 21 02 F6 | 	mov	local02, arg01
14848     0B 23 02 F6 | 	mov	local03, arg03
1484c     00 14 0E F2 | 	cmp	arg02, #0 wz
14850     01 14 86 51 |  if_ne	sub	arg02, #1
14854     10 13 02 56 |  if_ne	mov	arg01, local02
14858     00 16 06 56 |  if_ne	mov	arg03, #0
1485c     18 24 62 FD | 	getqx	local04
14860     28 3E B0 5D |  if_ne	call	#__system__lseek
14864     11 15 02 F6 | 	mov	arg02, local03
14868     12 17 02 F6 | 	mov	arg03, local04
1486c     10 13 02 F6 | 	mov	arg01, local02
14870     A0 3D B0 FD | 	call	#__system__read
14874     FD 24 02 F6 | 	mov	local04, result1
14878     01 24 56 F2 | 	cmps	local04, #1 wc
1487c     10 00 90 CD |  if_b	jmp	#LR__2040
14880     12 5F 02 F6 | 	mov	muldiva_, local04
14884     0F 61 02 F6 | 	mov	muldivb_, local01
14888     BA 00 A0 FD | 	call	#divide_
1488c     30 25 02 F6 | 	mov	local04, muldivb_
14890                 | LR__2040
14890     12 FB 01 F6 | 	mov	result1, local04
14894     A7 F0 03 F6 | 	mov	ptra, fp
14898     B2 00 A0 FD | 	call	#popregs_
1489c                 | __system___basic_get_ret
1489c     2D 00 64 FD | 	ret
148a0                 | 
148a0                 | __system___fmtchar
148a0     00 4A 05 F6 | 	mov	COUNT_, #0
148a4     A8 00 A0 FD | 	call	#pushregs_
148a8     10 F0 07 F1 | 	add	ptra, #16
148ac     04 4E 05 F1 | 	add	fp, #4
148b0     A7 12 62 FC | 	wrlong	arg01, fp
148b4     04 4E 05 F1 | 	add	fp, #4
148b8     A7 14 62 FC | 	wrlong	arg02, fp
148bc     04 4E 05 F1 | 	add	fp, #4
148c0     A7 16 62 FC | 	wrlong	arg03, fp
148c4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
148c8     A7 16 62 FC | 	wrlong	arg03, fp
148cc     08 4E 85 F1 | 	sub	fp, #8
148d0     A7 12 02 FB | 	rdlong	arg01, fp
148d4     04 4E 05 F1 | 	add	fp, #4
148d8     A7 14 02 FB | 	rdlong	arg02, fp
148dc     04 4E 05 F1 | 	add	fp, #4
148e0     A7 16 02 F6 | 	mov	arg03, fp
148e4     0C 4E 85 F1 | 	sub	fp, #12
148e8     0C 00 B0 FD | 	call	#__system___fmtstr
148ec     A7 F0 03 F6 | 	mov	ptra, fp
148f0     B2 00 A0 FD | 	call	#popregs_
148f4                 | __system___fmtchar_ret
148f4     2D 00 64 FD | 	ret
148f8                 | 
148f8                 | __system___fmtstr
148f8     09 4A 05 F6 | 	mov	COUNT_, #9
148fc     A8 00 A0 FD | 	call	#pushregs_
14900     09 1F 02 F6 | 	mov	local01, arg01
14904     0A 21 02 F6 | 	mov	local02, arg02
14908     0B 23 02 F6 | 	mov	local03, arg03
1490c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
14910     11 13 02 F6 | 	mov	arg01, local03
14914     09 25 02 F6 | 	mov	local04, arg01
14918     97 06 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
1491c                 | LR__2050
1491c     12 FB C9 FA | 	rdbyte	result1, local04 wz
14920     01 24 06 51 |  if_ne	add	local04, #1
14924     F4 FF 9F 5D |  if_ne	jmp	#LR__2050
14928                 | LR__2051
14928     09 25 82 F1 | 	sub	local04, arg01
1492c     00 18 0E F2 | 	cmp	arg04, #0 wz
14930     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
14934     10 15 02 F6 | 	mov	arg02, local02
14938     12 17 02 F6 | 	mov	arg03, local04
1493c     0F 13 02 F6 | 	mov	arg01, local01
14940     02 18 06 F6 | 	mov	arg04, #2
14944     F0 42 B0 FD | 	call	#__system___fmtpad
14948     FD 26 02 F6 | 	mov	local05, result1
1494c     00 26 56 F2 | 	cmps	local05, #0 wc
14950     13 FB 01 C6 |  if_b	mov	result1, local05
14954     80 00 90 CD |  if_b	jmp	#LR__2054
14958     01 24 56 F2 | 	cmps	local04, #1 wc
1495c     50 00 90 CD |  if_b	jmp	#LR__2053
14960     12 29 02 F6 | 	mov	local06, local04
14964                 | LR__2052
14964     0F 2B 02 F6 | 	mov	local07, local01
14968     0F 2D 02 F6 | 	mov	local08, local01
1496c     13 2A 46 F7 | 	zerox	local07, #19
14970     14 2C 46 F0 | 	shr	local08, #20
14974     02 2C 66 F0 | 	shl	local08, #2
14978     ED 2C 02 F1 | 	add	local08, __methods__
1497c     16 2D 02 FB | 	rdlong	local08, local08
14980     11 13 C2 FA | 	rdbyte	arg01, local03
14984     F2 2E 02 F6 | 	mov	local09, objptr
14988     15 E5 01 F6 | 	mov	objptr, local07
1498c     01 22 06 F1 | 	add	local03, #1
14990     2D 2C 62 FD | 	call	local08
14994     17 E5 01 F6 | 	mov	objptr, local09
14998     FD 2E 02 F6 | 	mov	local09, result1
1499c     00 2E 56 F2 | 	cmps	local09, #0 wc
149a0     17 FB 01 C6 |  if_b	mov	result1, local09
149a4     30 00 90 CD |  if_b	jmp	#LR__2054
149a8     17 27 02 F1 | 	add	local05, local09
149ac     ED 29 6E FB | 	djnz	local06, #LR__2052
149b0                 | LR__2053
149b0     10 15 02 F6 | 	mov	arg02, local02
149b4     12 17 02 F6 | 	mov	arg03, local04
149b8     0F 13 02 F6 | 	mov	arg01, local01
149bc     01 18 06 F6 | 	mov	arg04, #1
149c0     74 42 B0 FD | 	call	#__system___fmtpad
149c4     FD 2E 02 F6 | 	mov	local09, result1
149c8     00 2E 56 F2 | 	cmps	local09, #0 wc
149cc     17 FB 01 C6 |  if_b	mov	result1, local09
149d0     17 27 02 31 |  if_ae	add	local05, local09
149d4     13 FB 01 36 |  if_ae	mov	result1, local05
149d8                 | LR__2054
149d8     A7 F0 03 F6 | 	mov	ptra, fp
149dc     B2 00 A0 FD | 	call	#popregs_
149e0                 | __system___fmtstr_ret
149e0     2D 00 64 FD | 	ret
149e4                 | 
149e4                 | __system___fmtnum
149e4     0B 4A 05 F6 | 	mov	COUNT_, #11
149e8     A8 00 A0 FD | 	call	#pushregs_
149ec     09 1F 02 F6 | 	mov	local01, arg01
149f0     0A 21 02 F6 | 	mov	local02, arg02
149f4     0B 23 02 F6 | 	mov	local03, arg03
149f8     0C 25 02 F6 | 	mov	local04, arg04
149fc     F8 27 02 F6 | 	mov	local05, ptra
14a00     13 29 02 F6 | 	mov	local06, local05
14a04     00 2A 06 F6 | 	mov	local07, #0
14a08     10 2D 02 F6 | 	mov	local08, local02
14a0c     10 2C 46 F0 | 	shr	local08, #16
14a10     3F 2C 06 F5 | 	and	local08, #63
14a14     10 2F E2 F8 | 	getbyte	local09, local02, #0
14a18     10 31 02 F6 | 	mov	local10, local02
14a1c     1A 30 46 F0 | 	shr	local10, #26
14a20     03 30 06 F5 | 	and	local10, #3
14a24     18 33 02 F6 | 	mov	local11, local10
14a28     01 2C 56 F2 | 	cmps	local08, #1 wc
14a2c     44 F0 07 F1 | 	add	ptra, #68
14a30     01 2C 86 31 |  if_ae	sub	local08, #1
14a34     41 2E 56 F2 | 	cmps	local09, #65 wc
14a38     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
14a3c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
14a40     03 32 0E F2 | 	cmp	local11, #3 wz
14a44     00 32 06 A6 |  if_e	mov	local11, #0
14a48     00 22 56 52 |  if_ne	cmps	local03, #0 wc
14a4c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
14a50     11 23 62 46 |  if_c_and_nz	neg	local03, local03
14a54     00 32 0E F2 | 	cmp	local11, #0 wz
14a58     4C 00 90 AD |  if_e	jmp	#LR__2063
14a5c     01 2A 06 F6 | 	mov	local07, #1
14a60     17 2D 0A F2 | 	cmp	local08, local09 wz
14a64     18 00 90 5D |  if_ne	jmp	#LR__2061
14a68     05 2C 6E FB | 	djnz	local08, #LR__2060
14a6c     0F 13 02 F6 | 	mov	arg01, local01
14a70     10 15 02 F6 | 	mov	arg02, local02
14a74     23 16 06 F6 | 	mov	arg03, #35
14a78     24 FE BF FD | 	call	#__system___fmtchar
14a7c     88 00 90 FD | 	jmp	#LR__2067
14a80                 | LR__2060
14a80                 | LR__2061
14a80     02 32 0E F2 | 	cmp	local11, #2 wz
14a84     14 31 02 A6 |  if_e	mov	local10, local06
14a88     01 28 06 A1 |  if_e	add	local06, #1
14a8c     18 41 48 AC |  if_e	wrbyte	#32, local10
14a90     14 00 90 AD |  if_e	jmp	#LR__2062
14a94     04 32 0E F2 | 	cmp	local11, #4 wz
14a98     14 5B 48 AC |  if_e	wrbyte	#45, local06
14a9c     01 28 06 A1 |  if_e	add	local06, #1
14aa0     14 57 48 5C |  if_ne	wrbyte	#43, local06
14aa4     01 28 06 51 |  if_ne	add	local06, #1
14aa8                 | LR__2062
14aa8                 | LR__2063
14aa8     14 13 02 F6 | 	mov	arg01, local06
14aac     11 15 02 F6 | 	mov	arg02, local03
14ab0     12 17 02 F6 | 	mov	arg03, local04
14ab4     16 19 02 F6 | 	mov	arg04, local08
14ab8     00 1A 06 F6 | 	mov	arg05, #0
14abc     1D 20 2E F4 | 	testbn	local02, #29 wz
14ac0     01 1A 06 56 |  if_ne	mov	arg05, #1
14ac4     38 42 B0 FD | 	call	#__system___uitoa
14ac8     FD 2A 02 F1 | 	add	local07, result1
14acc     17 2B 5A F2 | 	cmps	local07, local09 wcz
14ad0     24 00 90 ED |  if_be	jmp	#LR__2066
14ad4     97 0E 48 FB | 	callpa	#(@LR__2065-@LR__2064)>>2,fcache_load_ptr_
14ad8                 | LR__2064
14ad8     17 31 02 F6 | 	mov	local10, local09
14adc     01 30 56 F2 | 	cmps	local10, #1 wc
14ae0     01 2E 86 F1 | 	sub	local09, #1
14ae4     14 31 02 36 |  if_ae	mov	local10, local06
14ae8     01 28 06 31 |  if_ae	add	local06, #1
14aec     18 47 48 3C |  if_ae	wrbyte	#35, local10
14af0     E4 FF 9F 3D |  if_ae	jmp	#LR__2064
14af4                 | LR__2065
14af4     14 01 48 FC | 	wrbyte	#0, local06
14af8                 | LR__2066
14af8     0F 13 02 F6 | 	mov	arg01, local01
14afc     10 15 02 F6 | 	mov	arg02, local02
14b00     13 17 02 F6 | 	mov	arg03, local05
14b04     F0 FD BF FD | 	call	#__system___fmtstr
14b08                 | LR__2067
14b08     A7 F0 03 F6 | 	mov	ptra, fp
14b0c     B2 00 A0 FD | 	call	#popregs_
14b10                 | __system___fmtnum_ret
14b10     2D 00 64 FD | 	ret
14b14                 | 
14b14                 | __system___fmtfloat
14b14     10 4A 05 F6 | 	mov	COUNT_, #16
14b18     A8 00 A0 FD | 	call	#pushregs_
14b1c     24 F1 07 F1 | 	add	ptra, #292
14b20     04 4E 05 F1 | 	add	fp, #4
14b24     A7 12 62 FC | 	wrlong	arg01, fp
14b28     04 4E 05 F1 | 	add	fp, #4
14b2c     A7 14 62 FC | 	wrlong	arg02, fp
14b30     04 4E 05 F1 | 	add	fp, #4
14b34     A7 16 62 FC | 	wrlong	arg03, fp
14b38     04 4E 05 F1 | 	add	fp, #4
14b3c     A7 18 62 FC | 	wrlong	arg04, fp
14b40     0C 4E 05 F1 | 	add	fp, #12
14b44     A7 14 68 FC | 	wrlong	#10, fp
14b48     08 4E 05 F1 | 	add	fp, #8
14b4c     A7 00 68 FC | 	wrlong	#0, fp
14b50     08 4E 05 F1 | 	add	fp, #8
14b54     A7 00 68 FC | 	wrlong	#0, fp
14b58     08 4E 05 F1 | 	add	fp, #8
14b5c     A7 00 68 FC | 	wrlong	#0, fp
14b60     04 4E 05 F1 | 	add	fp, #4
14b64     A7 04 68 FC | 	wrlong	#2, fp
14b68     04 4E 05 F1 | 	add	fp, #4
14b6c     A7 00 68 FC | 	wrlong	#0, fp
14b70     04 4E 05 F1 | 	add	fp, #4
14b74     A7 00 68 FC | 	wrlong	#0, fp
14b78     04 4E 05 F1 | 	add	fp, #4
14b7c     A7 00 68 FC | 	wrlong	#0, fp
14b80     04 4E 05 F1 | 	add	fp, #4
14b84     A7 00 68 FC | 	wrlong	#0, fp
14b88     18 4E 05 F1 | 	add	fp, #24
14b8c     A7 00 68 FC | 	wrlong	#0, fp
14b90     68 4E 05 F1 | 	add	fp, #104
14b94     A7 1E 02 F6 | 	mov	local01, fp
14b98     08 4E 85 F1 | 	sub	fp, #8
14b9c     A7 1E 62 FC | 	wrlong	local01, fp
14ba0     04 4E 05 F1 | 	add	fp, #4
14ba4     A7 1E 62 FC | 	wrlong	local01, fp
14ba8     BC 4E 85 F1 | 	sub	fp, #188
14bac     A7 1E 02 FB | 	rdlong	local01, fp
14bb0     10 1E 46 F0 | 	shr	local01, #16
14bb4     3F 1E 06 F5 | 	and	local01, #63
14bb8     B0 4E 05 F1 | 	add	fp, #176
14bbc     A7 1E 62 FC | 	wrlong	local01, fp
14bc0     B0 4E 85 F1 | 	sub	fp, #176
14bc4     A7 1E 02 FB | 	rdlong	local01, fp
14bc8     1C 1E 46 F0 | 	shr	local01, #28
14bcc     01 1E 06 F5 | 	and	local01, #1
14bd0     08 4F 05 F1 | 	add	fp, #264
14bd4     A7 1E 62 FC | 	wrlong	local01, fp
14bd8     58 4E 85 F1 | 	sub	fp, #88
14bdc     A7 1E 0A FB | 	rdlong	local01, fp wz
14be0     B8 4E 85 F1 | 	sub	fp, #184
14be4     3C 00 90 5D |  if_ne	jmp	#LR__2071
14be8     10 4E 05 F1 | 	add	fp, #16
14bec     A7 1E 02 FB | 	rdlong	local01, fp
14bf0     10 4E 85 F1 | 	sub	fp, #16
14bf4     61 1E 0E F2 | 	cmp	local01, #97 wz
14bf8     18 00 90 5D |  if_ne	jmp	#LR__2070
14bfc     B8 4E 05 F1 | 	add	fp, #184
14c00     A7 1A 68 FC | 	wrlong	#13, fp
14c04     84 4E 85 F1 | 	sub	fp, #132
14c08     A7 02 68 FC | 	wrlong	#1, fp
14c0c     34 4E 85 F1 | 	sub	fp, #52
14c10     24 00 90 FD | 	jmp	#LR__2072
14c14                 | LR__2070
14c14     B8 4E 05 F1 | 	add	fp, #184
14c18     A7 0C 68 FC | 	wrlong	#6, fp
14c1c     B8 4E 85 F1 | 	sub	fp, #184
14c20     14 00 90 FD | 	jmp	#LR__2072
14c24                 | LR__2071
14c24     B8 4E 05 F1 | 	add	fp, #184
14c28     A7 1E 02 FB | 	rdlong	local01, fp
14c2c     01 1E 86 F1 | 	sub	local01, #1
14c30     A7 1E 62 FC | 	wrlong	local01, fp
14c34     B8 4E 85 F1 | 	sub	fp, #184
14c38                 | LR__2072
14c38     08 4E 05 F1 | 	add	fp, #8
14c3c     A7 1E 02 FB | 	rdlong	local01, fp
14c40     16 1E 46 F0 | 	shr	local01, #22
14c44     03 1E 06 F5 | 	and	local01, #3
14c48     04 4F 05 F1 | 	add	fp, #260
14c4c     A7 1E 62 FC | 	wrlong	local01, fp
14c50     04 4F 85 F1 | 	sub	fp, #260
14c54     A7 1E 02 FB | 	rdlong	local01, fp
14c58     1D 1E 46 F0 | 	shr	local01, #29
14c5c     01 1E 06 F5 | 	and	local01, #1
14c60     B4 4E 05 F1 | 	add	fp, #180
14c64     A7 1E 62 FC | 	wrlong	local01, fp
14c68     B4 4E 85 F1 | 	sub	fp, #180
14c6c     A7 1E 02 FB | 	rdlong	local01, fp
14c70     0F 1F EA F8 | 	getbyte	local01, local01, #1
14c74     60 4E 05 F1 | 	add	fp, #96
14c78     A7 1E 62 FC | 	wrlong	local01, fp
14c7c     60 4E 85 F1 | 	sub	fp, #96
14c80     A7 1E 02 FB | 	rdlong	local01, fp
14c84     0F 1F E2 F8 | 	getbyte	local01, local01, #0
14c88     64 4E 05 F1 | 	add	fp, #100
14c8c     A7 1E 62 FC | 	wrlong	local01, fp
14c90     00 1E 06 F6 | 	mov	local01, #0
14c94     5C 4E 85 F1 | 	sub	fp, #92
14c98     A7 1A 02 FB | 	rdlong	arg05, fp
14c9c     65 1A 0E F2 | 	cmp	arg05, #101 wz
14ca0     01 1E 06 A6 |  if_e	mov	local01, #1
14ca4     14 4E 05 F1 | 	add	fp, #20
14ca8     A7 1E 62 FC | 	wrlong	local01, fp
14cac     98 4E 05 F1 | 	add	fp, #152
14cb0     A7 20 0A FB | 	rdlong	local02, fp wz
14cb4     45 1E 06 56 |  if_ne	mov	local01, #69
14cb8     65 1E 06 A6 |  if_e	mov	local01, #101
14cbc     8C 4E 85 F1 | 	sub	fp, #140
14cc0     A7 1E 62 FC | 	wrlong	local01, fp
14cc4     20 4E 85 F1 | 	sub	fp, #32
14cc8     A7 1E 02 FB | 	rdlong	local01, fp
14ccc     10 4E 85 F1 | 	sub	fp, #16
14cd0     61 1E 0E F2 | 	cmp	local01, #97 wz
14cd4     4C 00 90 5D |  if_ne	jmp	#LR__2073
14cd8     24 4E 05 F1 | 	add	fp, #36
14cdc     A7 02 68 FC | 	wrlong	#1, fp
14ce0     98 4E 05 F1 | 	add	fp, #152
14ce4     A7 20 0A FB | 	rdlong	local02, fp wz
14ce8     50 1E 06 56 |  if_ne	mov	local01, #80
14cec     70 1E 06 A6 |  if_e	mov	local01, #112
14cf0     8C 4E 85 F1 | 	sub	fp, #140
14cf4     A7 1E 62 FC | 	wrlong	local01, fp
14cf8     14 4E 85 F1 | 	sub	fp, #20
14cfc     A7 04 68 FC | 	wrlong	#2, fp
14d00     1C 4E 05 F1 | 	add	fp, #28
14d04     A7 02 68 FC | 	wrlong	#1, fp
14d08     84 4E 05 F1 | 	add	fp, #132
14d0c     A7 20 0A FB | 	rdlong	local02, fp wz
14d10     58 1E 06 56 |  if_ne	mov	local01, #88
14d14     78 1E 06 A6 |  if_e	mov	local01, #120
14d18     7C 4E 85 F1 | 	sub	fp, #124
14d1c     A7 1E 62 FC | 	wrlong	local01, fp
14d20     40 4E 85 F1 | 	sub	fp, #64
14d24                 | LR__2073
14d24     10 4E 05 F1 | 	add	fp, #16
14d28     A7 1E 02 FB | 	rdlong	local01, fp
14d2c     10 4E 85 F1 | 	sub	fp, #16
14d30     23 1E 0E F2 | 	cmp	local01, #35 wz
14d34     3C 00 90 5D |  if_ne	jmp	#LR__2076
14d38     48 4E 05 F1 | 	add	fp, #72
14d3c     A7 02 68 FC | 	wrlong	#1, fp
14d40     C8 4E 05 F1 | 	add	fp, #200
14d44     A7 1E 0A FB | 	rdlong	local01, fp wz
14d48     10 4F 85 F1 | 	sub	fp, #272
14d4c     18 00 90 AD |  if_e	jmp	#LR__2074
14d50     10 4E 05 F1 | 	add	fp, #16
14d54     A7 CC 68 FC | 	wrlong	#102, fp
14d58     00 4F 05 F1 | 	add	fp, #256
14d5c     A7 00 68 FC | 	wrlong	#0, fp
14d60     10 4F 85 F1 | 	sub	fp, #272
14d64     0C 00 90 FD | 	jmp	#LR__2075
14d68                 | LR__2074
14d68     10 4F 05 F1 | 	add	fp, #272
14d6c     A7 02 68 FC | 	wrlong	#1, fp
14d70     10 4F 85 F1 | 	sub	fp, #272
14d74                 | LR__2075
14d74                 | LR__2076
14d74     08 4E 05 F1 | 	add	fp, #8
14d78     A7 1E 02 FB | 	rdlong	local01, fp
14d7c     1A 1E 46 F0 | 	shr	local01, #26
14d80     03 1E 06 F5 | 	and	local01, #3
14d84     5C 4E 05 F1 | 	add	fp, #92
14d88     A7 1E 62 FC | 	wrlong	local01, fp
14d8c     58 4E 85 F1 | 	sub	fp, #88
14d90     A7 FA 01 FB | 	rdlong	result1, fp
14d94     0C 4E 85 F1 | 	sub	fp, #12
14d98     1F FA 4D F0 | 	shr	result1, #31 wz
14d9c     20 00 90 AD |  if_e	jmp	#LR__2077
14da0     2C 4E 05 F1 | 	add	fp, #44
14da4     A7 5A 68 FC | 	wrlong	#45, fp
14da8     20 4E 85 F1 | 	sub	fp, #32
14dac     A7 FA 01 FB | 	rdlong	result1, fp
14db0     1F FA E5 F4 | 	bitnot	result1, #31
14db4     A7 FA 61 FC | 	wrlong	result1, fp
14db8     0C 4E 85 F1 | 	sub	fp, #12
14dbc     3C 00 90 FD | 	jmp	#LR__2079
14dc0                 | LR__2077
14dc0     64 4E 05 F1 | 	add	fp, #100
14dc4     A7 1E 02 FB | 	rdlong	local01, fp
14dc8     64 4E 85 F1 | 	sub	fp, #100
14dcc     01 1E 0E F2 | 	cmp	local01, #1 wz
14dd0     2C 4E 05 A1 |  if_e	add	fp, #44
14dd4     A7 56 68 AC |  if_e	wrlong	#43, fp
14dd8     2C 4E 85 A1 |  if_e	sub	fp, #44
14ddc     1C 00 90 AD |  if_e	jmp	#LR__2078
14de0     64 4E 05 F1 | 	add	fp, #100
14de4     A7 1E 02 FB | 	rdlong	local01, fp
14de8     64 4E 85 F1 | 	sub	fp, #100
14dec     02 1E 0E F2 | 	cmp	local01, #2 wz
14df0     2C 4E 05 A1 |  if_e	add	fp, #44
14df4     A7 40 68 AC |  if_e	wrlong	#32, fp
14df8     2C 4E 85 A1 |  if_e	sub	fp, #44
14dfc                 | LR__2078
14dfc                 | LR__2079
14dfc     08 4E 05 F1 | 	add	fp, #8
14e00     A7 1E 02 FB | 	rdlong	local01, fp
14e04     18 1E 46 F0 | 	shr	local01, #24
14e08     03 1E 06 F5 | 	and	local01, #3
14e0c     3C 4E 05 F1 | 	add	fp, #60
14e10     A7 1E 62 FC | 	wrlong	local01, fp
14e14     00 1E 06 F6 | 	mov	local01, #0
14e18     18 4E 85 F1 | 	sub	fp, #24
14e1c     A7 22 0A FB | 	rdlong	local03, fp wz
14e20     2C 4E 85 F1 | 	sub	fp, #44
14e24     18 00 90 5D |  if_ne	jmp	#LR__2080
14e28     1C 4E 05 F1 | 	add	fp, #28
14e2c     A7 24 02 FB | 	rdlong	local04, fp
14e30     1C 4E 85 F1 | 	sub	fp, #28
14e34     12 27 02 F6 | 	mov	local05, local04
14e38     0A 26 0E F2 | 	cmp	local05, #10 wz
14e3c     04 00 90 AD |  if_e	jmp	#LR__2081
14e40                 | LR__2080
14e40     01 1E 66 F5 | 	xor	local01, #1
14e44                 | LR__2081
14e44     3C 4E 05 F1 | 	add	fp, #60
14e48     A7 1E 62 FC | 	wrlong	local01, fp
14e4c     3C 4E 85 F1 | 	sub	fp, #60
14e50     00 1E 0E F2 | 	cmp	local01, #0 wz
14e54     0C 01 90 AD |  if_e	jmp	#LR__2083
14e58     44 4E 05 F1 | 	add	fp, #68
14e5c     A7 26 02 FB | 	rdlong	local05, fp
14e60     44 4E 85 F1 | 	sub	fp, #68
14e64     13 23 02 F6 | 	mov	local03, local05
14e68     02 22 0E F2 | 	cmp	local03, #2 wz
14e6c     F4 00 90 5D |  if_ne	jmp	#LR__2083
14e70     0C 4F 05 F1 | 	add	fp, #268
14e74     A7 28 02 FB | 	rdlong	local06, fp
14e78     0C 4F 85 F1 | 	sub	fp, #268
14e7c     14 25 02 F6 | 	mov	local04, local06
14e80     02 24 0E F2 | 	cmp	local04, #2 wz
14e84     DC 00 90 AD |  if_e	jmp	#LR__2083
14e88     C0 4E 05 F1 | 	add	fp, #192
14e8c     A7 12 02 FB | 	rdlong	arg01, fp
14e90     94 4E 85 F1 | 	sub	fp, #148
14e94     A7 14 02 FB | 	rdlong	arg02, fp
14e98     14 4E 05 F1 | 	add	fp, #20
14e9c     A7 16 02 FB | 	rdlong	arg03, fp
14ea0     40 4E 85 F1 | 	sub	fp, #64
14ea4     C0 40 B0 FD | 	call	#__system__emitsign_0266
14ea8     14 4F 05 F1 | 	add	fp, #276
14eac     A7 FA 61 FC | 	wrlong	result1, fp
14eb0     14 4F 85 F1 | 	sub	fp, #276
14eb4     00 FA 55 F2 | 	cmps	result1, #0 wc
14eb8     14 4F 05 C1 |  if_b	add	fp, #276
14ebc     A7 FA 01 CB |  if_b	rdlong	result1, fp
14ec0     14 4F 85 C1 |  if_b	sub	fp, #276
14ec4     6C 0B 90 CD |  if_b	jmp	#LR__2133
14ec8     C0 4E 05 F1 | 	add	fp, #192
14ecc     A7 1E 02 FB | 	rdlong	local01, fp
14ed0     54 4E 05 F1 | 	add	fp, #84
14ed4     A7 26 02 FB | 	rdlong	local05, fp
14ed8     13 23 02 F6 | 	mov	local03, local05
14edc     13 1F 02 F1 | 	add	local01, local05
14ee0     54 4E 85 F1 | 	sub	fp, #84
14ee4     A7 1E 62 FC | 	wrlong	local01, fp
14ee8     58 4E 85 F1 | 	sub	fp, #88
14eec     A7 1E 0A FB | 	rdlong	local01, fp wz
14ef0     68 4E 85 F1 | 	sub	fp, #104
14ef4     60 00 90 AD |  if_e	jmp	#LR__2082
14ef8     68 4E 05 F1 | 	add	fp, #104
14efc     A7 1E 02 FB | 	rdlong	local01, fp
14f00     AC 4E 05 F1 | 	add	fp, #172
14f04     A7 22 02 FB | 	rdlong	local03, fp
14f08     11 1F 82 F1 | 	sub	local01, local03
14f0c     AC 4E 85 F1 | 	sub	fp, #172
14f10     A7 1E 62 FC | 	wrlong	local01, fp
14f14     68 4E 85 F1 | 	sub	fp, #104
14f18     00 1E 56 F2 | 	cmps	local01, #0 wc
14f1c     68 4E 05 C1 |  if_b	add	fp, #104
14f20     A7 00 68 CC |  if_b	wrlong	#0, fp
14f24     68 4E 85 C1 |  if_b	sub	fp, #104
14f28     08 4E 05 F1 | 	add	fp, #8
14f2c     A7 1E 02 FB | 	rdlong	local01, fp
14f30     E8 1E 06 F4 | 	bitl	local01, #232
14f34     A7 1E 62 FC | 	wrlong	local01, fp
14f38     60 4E 05 F1 | 	add	fp, #96
14f3c     A7 26 02 FB | 	rdlong	local05, fp
14f40     13 23 02 F6 | 	mov	local03, local05
14f44     08 22 66 F0 | 	shl	local03, #8
14f48     11 1F 42 F5 | 	or	local01, local03
14f4c     60 4E 85 F1 | 	sub	fp, #96
14f50     A7 1E 62 FC | 	wrlong	local01, fp
14f54     08 4E 85 F1 | 	sub	fp, #8
14f58                 | LR__2082
14f58     3C 4E 05 F1 | 	add	fp, #60
14f5c     A7 00 68 FC | 	wrlong	#0, fp
14f60     3C 4E 85 F1 | 	sub	fp, #60
14f64                 | LR__2083
14f64     0C 4E 05 F1 | 	add	fp, #12
14f68     A7 12 02 FB | 	rdlong	arg01, fp
14f6c     0C 4E 85 F1 | 	sub	fp, #12
14f70     D0 1D B0 FD | 	call	#__system____builtin_ilogb
14f74     FF FF 3F FF 
14f78     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
14f7c     50 00 90 5D |  if_ne	jmp	#LR__2085
14f80     2C 4E 05 F1 | 	add	fp, #44
14f84     A7 1E 0A FB | 	rdlong	local01, fp wz
14f88     2C 4E 85 F1 | 	sub	fp, #44
14f8c     24 00 90 AD |  if_e	jmp	#LR__2084
14f90     C0 4E 05 F1 | 	add	fp, #192
14f94     A7 20 02 FB | 	rdlong	local02, fp
14f98     10 23 02 F6 | 	mov	local03, local02
14f9c     01 22 06 F1 | 	add	local03, #1
14fa0     A7 22 62 FC | 	wrlong	local03, fp
14fa4     94 4E 85 F1 | 	sub	fp, #148
14fa8     A7 24 02 FB | 	rdlong	local04, fp
14fac     2C 4E 85 F1 | 	sub	fp, #44
14fb0     10 25 42 FC | 	wrbyte	local04, local02
14fb4                 | LR__2084
14fb4     C0 4E 05 F1 | 	add	fp, #192
14fb8     A7 12 02 FB | 	rdlong	arg01, fp
14fbc     C0 4E 85 F1 | 	sub	fp, #192
14fc0     16 01 00 FF 
14fc4     BE 15 06 F6 | 	mov	arg02, ##@LR__4001
14fc8     E0 EA BF FD | 	call	#__system____builtin_strcpy
14fcc     A4 08 90 FD | 	jmp	#LR__2121
14fd0                 | LR__2085
14fd0     0C 4E 05 F1 | 	add	fp, #12
14fd4     A7 20 02 FB | 	rdlong	local02, fp
14fd8     0C 4E 85 F1 | 	sub	fp, #12
14fdc     10 13 02 F6 | 	mov	arg01, local02
14fe0     60 1D B0 FD | 	call	#__system____builtin_ilogb
14fe4     00 00 40 FF 
14fe8     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
14fec     50 00 90 5D |  if_ne	jmp	#LR__2087
14ff0     2C 4E 05 F1 | 	add	fp, #44
14ff4     A7 1E 0A FB | 	rdlong	local01, fp wz
14ff8     2C 4E 85 F1 | 	sub	fp, #44
14ffc     24 00 90 AD |  if_e	jmp	#LR__2086
15000     C0 4E 05 F1 | 	add	fp, #192
15004     A7 20 02 FB | 	rdlong	local02, fp
15008     10 23 02 F6 | 	mov	local03, local02
1500c     01 22 06 F1 | 	add	local03, #1
15010     A7 22 62 FC | 	wrlong	local03, fp
15014     94 4E 85 F1 | 	sub	fp, #148
15018     A7 24 02 FB | 	rdlong	local04, fp
1501c     2C 4E 85 F1 | 	sub	fp, #44
15020     10 25 42 FC | 	wrbyte	local04, local02
15024                 | LR__2086
15024     C0 4E 05 F1 | 	add	fp, #192
15028     A7 12 02 FB | 	rdlong	arg01, fp
1502c     C0 4E 85 F1 | 	sub	fp, #192
15030     16 01 00 FF 
15034     C2 15 06 F6 | 	mov	arg02, ##@LR__4002
15038     70 EA BF FD | 	call	#__system____builtin_strcpy
1503c     34 08 90 FD | 	jmp	#LR__2121
15040                 | LR__2087
15040     10 4E 05 F1 | 	add	fp, #16
15044     A7 1E 02 FB | 	rdlong	local01, fp
15048     10 4E 85 F1 | 	sub	fp, #16
1504c     67 1E 0E F2 | 	cmp	local01, #103 wz
15050     10 4E 05 51 |  if_ne	add	fp, #16
15054     A7 22 02 5B |  if_ne	rdlong	local03, fp
15058     10 4E 85 51 |  if_ne	sub	fp, #16
1505c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
15060     94 01 90 5D |  if_ne	jmp	#LR__2092
15064     0C 4E 05 F1 | 	add	fp, #12
15068     A7 12 02 FB | 	rdlong	arg01, fp
1506c     08 4E 05 F1 | 	add	fp, #8
15070     A7 14 02 F6 | 	mov	arg02, fp
15074     0C 4E 05 F1 | 	add	fp, #12
15078     A7 16 02 F6 | 	mov	arg03, fp
1507c     98 4E 05 F1 | 	add	fp, #152
15080     A7 18 02 FB | 	rdlong	arg04, fp
15084     9C 4E 85 F1 | 	sub	fp, #156
15088     A7 1A 02 FB | 	rdlong	arg05, fp
1508c     1C 4E 85 F1 | 	sub	fp, #28
15090     E0 3C B0 FD | 	call	#__system__disassemble_0264
15094     10 4E 05 F1 | 	add	fp, #16
15098     A7 1E 02 FB | 	rdlong	local01, fp
1509c     10 4E 85 F1 | 	sub	fp, #16
150a0     23 1E 0E F2 | 	cmp	local01, #35 wz
150a4     A0 00 90 5D |  if_ne	jmp	#LR__2089
150a8     20 4E 05 F1 | 	add	fp, #32
150ac     A7 1E 02 FB | 	rdlong	local01, fp
150b0     98 4E 05 F1 | 	add	fp, #152
150b4     A7 22 02 FB | 	rdlong	local03, fp
150b8     B8 4E 85 F1 | 	sub	fp, #184
150bc     11 1F 5A F2 | 	cmps	local01, local03 wcz
150c0     24 4E 05 11 |  if_a	add	fp, #36
150c4     A7 02 68 1C |  if_a	wrlong	#1, fp
150c8     24 4E 85 11 |  if_a	sub	fp, #36
150cc     A4 01 90 1D |  if_a	jmp	#LR__2095
150d0     20 4E 05 F1 | 	add	fp, #32
150d4     A7 1E 02 FB | 	rdlong	local01, fp
150d8     20 4E 85 F1 | 	sub	fp, #32
150dc     00 1E 56 F2 | 	cmps	local01, #0 wc
150e0     2C 00 90 3D |  if_ae	jmp	#LR__2088
150e4     B8 4E 05 F1 | 	add	fp, #184
150e8     A7 1E 02 FB | 	rdlong	local01, fp
150ec     0F 1F 62 F6 | 	neg	local01, local01
150f0     98 4E 85 F1 | 	sub	fp, #152
150f4     A7 22 02 FB | 	rdlong	local03, fp
150f8     20 4E 85 F1 | 	sub	fp, #32
150fc     0F 23 5A F2 | 	cmps	local03, local01 wcz
15100     24 4E 05 E1 |  if_be	add	fp, #36
15104     A7 02 68 EC |  if_be	wrlong	#1, fp
15108     24 4E 85 E1 |  if_be	sub	fp, #36
1510c     64 01 90 FD | 	jmp	#LR__2095
15110                 | LR__2088
15110     20 4E 05 F1 | 	add	fp, #32
15114     A7 1E 02 FB | 	rdlong	local01, fp
15118     20 4E 85 F1 | 	sub	fp, #32
1511c     01 1E 56 F2 | 	cmps	local01, #1 wc
15120     50 01 90 CD |  if_b	jmp	#LR__2095
15124     B8 4E 05 F1 | 	add	fp, #184
15128     A7 1E 02 FB | 	rdlong	local01, fp
1512c     98 4E 85 F1 | 	sub	fp, #152
15130     A7 22 02 FB | 	rdlong	local03, fp
15134     11 1F 82 F1 | 	sub	local01, local03
15138     98 4E 05 F1 | 	add	fp, #152
1513c     A7 1E 62 FC | 	wrlong	local01, fp
15140     B8 4E 85 F1 | 	sub	fp, #184
15144     2C 01 90 FD | 	jmp	#LR__2095
15148                 | LR__2089
15148     00 1E 06 F6 | 	mov	local01, #0
1514c     08 4E 05 F1 | 	add	fp, #8
15150     A7 20 02 FB | 	rdlong	local02, fp
15154     1C 20 46 F0 | 	shr	local02, #28
15158     01 20 0E F5 | 	and	local02, #1 wz
1515c     01 1E 06 A6 |  if_e	mov	local01, #1
15160     2C 4E 05 F1 | 	add	fp, #44
15164     A7 1E 62 FC | 	wrlong	local01, fp
15168     14 4E 85 F1 | 	sub	fp, #20
1516c     A7 1E 02 FB | 	rdlong	local01, fp
15170     98 4E 05 F1 | 	add	fp, #152
15174     A7 22 02 FB | 	rdlong	local03, fp
15178     B8 4E 85 F1 | 	sub	fp, #184
1517c     11 1F 52 F2 | 	cmps	local01, local03 wc
15180     18 00 90 3D |  if_ae	jmp	#LR__2090
15184     20 4E 05 F1 | 	add	fp, #32
15188     A7 24 02 FB | 	rdlong	local04, fp
1518c     20 4E 85 F1 | 	sub	fp, #32
15190     FF FF 7F FF 
15194     FC 25 56 F2 | 	cmps	local04, ##-4 wc
15198     10 00 90 3D |  if_ae	jmp	#LR__2091
1519c                 | LR__2090
1519c     24 4E 05 F1 | 	add	fp, #36
151a0     A7 02 68 FC | 	wrlong	#1, fp
151a4     24 4E 85 F1 | 	sub	fp, #36
151a8     C8 00 90 FD | 	jmp	#LR__2095
151ac                 | LR__2091
151ac     B8 4E 05 F1 | 	add	fp, #184
151b0     A7 24 02 FB | 	rdlong	local04, fp
151b4     98 4E 85 F1 | 	sub	fp, #152
151b8     A7 22 02 FB | 	rdlong	local03, fp
151bc     11 25 82 F1 | 	sub	local04, local03
151c0     98 4E 05 F1 | 	add	fp, #152
151c4     A7 24 62 FC | 	wrlong	local04, fp
151c8     AC 4E 85 F1 | 	sub	fp, #172
151cc     A7 12 02 FB | 	rdlong	arg01, fp
151d0     08 4E 05 F1 | 	add	fp, #8
151d4     A7 14 02 F6 | 	mov	arg02, fp
151d8     0C 4E 05 F1 | 	add	fp, #12
151dc     A7 16 02 F6 | 	mov	arg03, fp
151e0     12 19 62 F6 | 	neg	arg04, local04
151e4     04 4E 85 F1 | 	sub	fp, #4
151e8     A7 1A 02 FB | 	rdlong	arg05, fp
151ec     1C 4E 85 F1 | 	sub	fp, #28
151f0     80 3B B0 FD | 	call	#__system__disassemble_0264
151f4     7C 00 90 FD | 	jmp	#LR__2095
151f8                 | LR__2092
151f8     24 4E 05 F1 | 	add	fp, #36
151fc     A7 1E 0A FB | 	rdlong	local01, fp wz
15200     24 4E 85 F1 | 	sub	fp, #36
15204     34 00 90 AD |  if_e	jmp	#LR__2093
15208     0C 4E 05 F1 | 	add	fp, #12
1520c     A7 12 02 FB | 	rdlong	arg01, fp
15210     08 4E 05 F1 | 	add	fp, #8
15214     A7 14 02 F6 | 	mov	arg02, fp
15218     0C 4E 05 F1 | 	add	fp, #12
1521c     A7 16 02 F6 | 	mov	arg03, fp
15220     98 4E 05 F1 | 	add	fp, #152
15224     A7 18 02 FB | 	rdlong	arg04, fp
15228     9C 4E 85 F1 | 	sub	fp, #156
1522c     A7 1A 02 FB | 	rdlong	arg05, fp
15230     1C 4E 85 F1 | 	sub	fp, #28
15234     3C 3B B0 FD | 	call	#__system__disassemble_0264
15238     38 00 90 FD | 	jmp	#LR__2094
1523c                 | LR__2093
1523c     0C 4E 05 F1 | 	add	fp, #12
15240     A7 12 02 FB | 	rdlong	arg01, fp
15244     08 4E 05 F1 | 	add	fp, #8
15248     A7 14 02 F6 | 	mov	arg02, fp
1524c     0C 4E 05 F1 | 	add	fp, #12
15250     A7 16 02 F6 | 	mov	arg03, fp
15254     98 4E 05 F1 | 	add	fp, #152
15258     A7 24 02 FB | 	rdlong	local04, fp
1525c     01 24 06 F1 | 	add	local04, #1
15260     12 19 62 F6 | 	neg	arg04, local04
15264     9C 4E 85 F1 | 	sub	fp, #156
15268     A7 1A 02 FB | 	rdlong	arg05, fp
1526c     1C 4E 85 F1 | 	sub	fp, #28
15270     00 3B B0 FD | 	call	#__system__disassemble_0264
15274                 | LR__2094
15274                 | LR__2095
15274     1C 4E 05 F1 | 	add	fp, #28
15278     A7 1E 02 FB | 	rdlong	local01, fp
1527c     1C 4E 85 F1 | 	sub	fp, #28
15280     02 1E 0E F2 | 	cmp	local01, #2 wz
15284     4C 00 90 5D |  if_ne	jmp	#LR__2098
15288     1C 4E 05 F1 | 	add	fp, #28
1528c     A7 20 68 FC | 	wrlong	#16, fp
15290     1C 4E 85 F1 | 	sub	fp, #28
15294                 | LR__2096
15294     14 4E 05 F1 | 	add	fp, #20
15298     A7 1E 0A FB | 	rdlong	local01, fp wz
1529c     14 4E 85 F1 | 	sub	fp, #20
152a0     30 00 90 AD |  if_e	jmp	#LR__2097
152a4     14 4E 05 F1 | 	add	fp, #20
152a8     A7 22 02 FB | 	rdlong	local03, fp
152ac     14 4E 85 F1 | 	sub	fp, #20
152b0     00 80 00 FF 
152b4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
152b8     18 00 90 3D |  if_ae	jmp	#LR__2097
152bc     14 4E 05 F1 | 	add	fp, #20
152c0     A7 1E 02 FB | 	rdlong	local01, fp
152c4     01 1E 66 F0 | 	shl	local01, #1
152c8     A7 1E 62 FC | 	wrlong	local01, fp
152cc     14 4E 85 F1 | 	sub	fp, #20
152d0     C0 FF 9F FD | 	jmp	#LR__2096
152d4                 | LR__2097
152d4                 | LR__2098
152d4     70 4E 05 F1 | 	add	fp, #112
152d8     A7 12 02 F6 | 	mov	arg01, fp
152dc     5C 4E 85 F1 | 	sub	fp, #92
152e0     A7 14 02 FB | 	rdlong	arg02, fp
152e4     08 4E 05 F1 | 	add	fp, #8
152e8     A7 16 02 FB | 	rdlong	arg03, fp
152ec     A0 4E 05 F1 | 	add	fp, #160
152f0     A7 1A 02 FB | 	rdlong	arg05, fp
152f4     BC 4E 85 F1 | 	sub	fp, #188
152f8     01 18 06 F6 | 	mov	arg04, #1
152fc     00 3A B0 FD | 	call	#__system___uitoa
15300     58 4E 05 F1 | 	add	fp, #88
15304     A7 FA 61 FC | 	wrlong	result1, fp
15308     38 4E 85 F1 | 	sub	fp, #56
1530c     A7 1E 02 FB | 	rdlong	local01, fp
15310     20 4E 85 F1 | 	sub	fp, #32
15314     00 1E 56 F2 | 	cmps	local01, #0 wc
15318     50 00 90 3D |  if_ae	jmp	#LR__2099
1531c     60 4E 05 F1 | 	add	fp, #96
15320     A7 5A 68 FC | 	wrlong	#45, fp
15324     50 4E 05 F1 | 	add	fp, #80
15328     A7 12 02 F6 | 	mov	arg01, fp
1532c     90 4E 85 F1 | 	sub	fp, #144
15330     A7 22 02 FB | 	rdlong	local03, fp
15334     11 15 62 F6 | 	neg	arg02, local03
15338     18 4E 05 F1 | 	add	fp, #24
1533c     A7 18 02 FB | 	rdlong	arg04, fp
15340     84 4E 05 F1 | 	add	fp, #132
15344     A7 28 02 FB | 	rdlong	local06, fp
15348     BC 4E 85 F1 | 	sub	fp, #188
1534c     14 25 02 F6 | 	mov	local04, local06
15350     0A 16 06 F6 | 	mov	arg03, #10
15354     12 1B 02 F6 | 	mov	arg05, local04
15358     A4 39 B0 FD | 	call	#__system___uitoa
1535c     5C 4E 05 F1 | 	add	fp, #92
15360     A7 FA 61 FC | 	wrlong	result1, fp
15364     5C 4E 85 F1 | 	sub	fp, #92
15368     48 00 90 FD | 	jmp	#LR__2100
1536c                 | LR__2099
1536c     60 4E 05 F1 | 	add	fp, #96
15370     A7 56 68 FC | 	wrlong	#43, fp
15374     50 4E 05 F1 | 	add	fp, #80
15378     A7 12 02 F6 | 	mov	arg01, fp
1537c     90 4E 85 F1 | 	sub	fp, #144
15380     A7 14 02 FB | 	rdlong	arg02, fp
15384     18 4E 05 F1 | 	add	fp, #24
15388     A7 18 02 FB | 	rdlong	arg04, fp
1538c     84 4E 05 F1 | 	add	fp, #132
15390     A7 28 02 FB | 	rdlong	local06, fp
15394     BC 4E 85 F1 | 	sub	fp, #188
15398     14 25 02 F6 | 	mov	local04, local06
1539c     0A 16 06 F6 | 	mov	arg03, #10
153a0     12 1B 02 F6 | 	mov	arg05, local04
153a4     58 39 B0 FD | 	call	#__system___uitoa
153a8     5C 4E 05 F1 | 	add	fp, #92
153ac     A7 FA 61 FC | 	wrlong	result1, fp
153b0     5C 4E 85 F1 | 	sub	fp, #92
153b4                 | LR__2100
153b4     24 4E 05 F1 | 	add	fp, #36
153b8     A7 1E 0A FB | 	rdlong	local01, fp wz
153bc     24 4E 85 F1 | 	sub	fp, #36
153c0     2C 00 90 AD |  if_e	jmp	#LR__2101
153c4     50 4E 05 F1 | 	add	fp, #80
153c8     A7 00 68 FC | 	wrlong	#0, fp
153cc     04 4E 85 F1 | 	sub	fp, #4
153d0     A7 00 68 FC | 	wrlong	#0, fp
153d4     6C 4E 05 F1 | 	add	fp, #108
153d8     A7 1E 02 FB | 	rdlong	local01, fp
153dc     01 1E 06 F1 | 	add	local01, #1
153e0     64 4E 85 F1 | 	sub	fp, #100
153e4     A7 1E 62 FC | 	wrlong	local01, fp
153e8     54 4E 85 F1 | 	sub	fp, #84
153ec     88 00 90 FD | 	jmp	#LR__2104
153f0                 | LR__2101
153f0     20 4E 05 F1 | 	add	fp, #32
153f4     A7 1E 02 FB | 	rdlong	local01, fp
153f8     20 4E 85 F1 | 	sub	fp, #32
153fc     00 1E 56 F2 | 	cmps	local01, #0 wc
15400     40 00 90 3D |  if_ae	jmp	#LR__2102
15404     20 4E 05 F1 | 	add	fp, #32
15408     A7 20 02 FB | 	rdlong	local02, fp
1540c     30 4E 05 F1 | 	add	fp, #48
15410     A7 20 62 FC | 	wrlong	local02, fp
15414     04 4E 85 F1 | 	sub	fp, #4
15418     A7 20 62 FC | 	wrlong	local02, fp
1541c     2C 4E 85 F1 | 	sub	fp, #44
15420     A7 1E 02 FB | 	rdlong	local01, fp
15424     98 4E 05 F1 | 	add	fp, #152
15428     A7 22 02 FB | 	rdlong	local03, fp
1542c     11 1F 02 F1 | 	add	local01, local03
15430     01 1E 06 F1 | 	add	local01, #1
15434     64 4E 85 F1 | 	sub	fp, #100
15438     A7 1E 62 FC | 	wrlong	local01, fp
1543c     54 4E 85 F1 | 	sub	fp, #84
15440     34 00 90 FD | 	jmp	#LR__2103
15444                 | LR__2102
15444     4C 4E 05 F1 | 	add	fp, #76
15448     A7 00 68 FC | 	wrlong	#0, fp
1544c     2C 4E 85 F1 | 	sub	fp, #44
15450     A7 1E 02 FB | 	rdlong	local01, fp
15454     30 4E 05 F1 | 	add	fp, #48
15458     A7 1E 62 FC | 	wrlong	local01, fp
1545c     68 4E 05 F1 | 	add	fp, #104
15460     A7 22 02 FB | 	rdlong	local03, fp
15464     11 1F 02 F1 | 	add	local01, local03
15468     01 1E 06 F1 | 	add	local01, #1
1546c     64 4E 85 F1 | 	sub	fp, #100
15470     A7 1E 62 FC | 	wrlong	local01, fp
15474     54 4E 85 F1 | 	sub	fp, #84
15478                 | LR__2103
15478                 | LR__2104
15478     54 4E 05 F1 | 	add	fp, #84
1547c     A7 1E 02 FB | 	rdlong	local01, fp
15480     08 4E 85 F1 | 	sub	fp, #8
15484     A7 22 02 FB | 	rdlong	local03, fp
15488     11 1F 82 F1 | 	sub	local01, local03
1548c     01 1E 06 F1 | 	add	local01, #1
15490     24 4E 85 F1 | 	sub	fp, #36
15494     A7 1E 62 FC | 	wrlong	local01, fp
15498     04 4E 05 F1 | 	add	fp, #4
1549c     A7 1E 0A FB | 	rdlong	local01, fp wz
154a0     2C 4E 85 F1 | 	sub	fp, #44
154a4     28 4E 05 51 |  if_ne	add	fp, #40
154a8     A7 22 02 5B |  if_ne	rdlong	local03, fp
154ac     01 22 06 51 |  if_ne	add	local03, #1
154b0     A7 22 62 5C |  if_ne	wrlong	local03, fp
154b4     28 4E 85 51 |  if_ne	sub	fp, #40
154b8     1C 4E 05 F1 | 	add	fp, #28
154bc     A7 1E 02 FB | 	rdlong	local01, fp
154c0     1C 4E 85 F1 | 	sub	fp, #28
154c4     10 1E 0E F2 | 	cmp	local01, #16 wz
154c8     28 4E 05 A1 |  if_e	add	fp, #40
154cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
154d0     02 1E 06 A1 |  if_e	add	local01, #2
154d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
154d8     28 4E 85 A1 |  if_e	sub	fp, #40
154dc     24 4E 05 F1 | 	add	fp, #36
154e0     A7 1E 0A FB | 	rdlong	local01, fp wz
154e4     24 4E 85 F1 | 	sub	fp, #36
154e8     28 00 90 AD |  if_e	jmp	#LR__2105
154ec     28 4E 05 F1 | 	add	fp, #40
154f0     A7 1E 02 FB | 	rdlong	local01, fp
154f4     02 22 06 F6 | 	mov	local03, #2
154f8     34 4E 05 F1 | 	add	fp, #52
154fc     A7 26 02 FB | 	rdlong	local05, fp
15500     13 23 02 F1 | 	add	local03, local05
15504     11 1F 02 F1 | 	add	local01, local03
15508     34 4E 85 F1 | 	sub	fp, #52
1550c     A7 1E 62 FC | 	wrlong	local01, fp
15510     28 4E 85 F1 | 	sub	fp, #40
15514                 | LR__2105
15514     28 4E 05 F1 | 	add	fp, #40
15518     A7 1E 02 FB | 	rdlong	local01, fp
1551c     28 4E 85 F1 | 	sub	fp, #40
15520     41 1E 56 F2 | 	cmps	local01, #65 wc
15524     01 FA 65 36 |  if_ae	neg	result1, #1
15528     08 05 90 3D |  if_ae	jmp	#LR__2133
1552c     3C 4E 05 F1 | 	add	fp, #60
15530     A7 1E 0A FB | 	rdlong	local01, fp wz
15534     3C 4E 85 F1 | 	sub	fp, #60
15538     60 00 90 AD |  if_e	jmp	#LR__2106
1553c     C0 4E 05 F1 | 	add	fp, #192
15540     A7 12 02 FB | 	rdlong	arg01, fp
15544     94 4E 85 F1 | 	sub	fp, #148
15548     A7 14 02 FB | 	rdlong	arg02, fp
1554c     14 4E 05 F1 | 	add	fp, #20
15550     A7 16 02 FB | 	rdlong	arg03, fp
15554     40 4E 85 F1 | 	sub	fp, #64
15558     0C 3A B0 FD | 	call	#__system__emitsign_0266
1555c     18 4F 05 F1 | 	add	fp, #280
15560     A7 FA 61 FC | 	wrlong	result1, fp
15564     18 4F 85 F1 | 	sub	fp, #280
15568     00 FA 55 F2 | 	cmps	result1, #0 wc
1556c     18 4F 05 C1 |  if_b	add	fp, #280
15570     A7 FA 01 CB |  if_b	rdlong	result1, fp
15574     18 4F 85 C1 |  if_b	sub	fp, #280
15578     B8 04 90 CD |  if_b	jmp	#LR__2133
1557c     C0 4E 05 F1 | 	add	fp, #192
15580     A7 1E 02 FB | 	rdlong	local01, fp
15584     58 4E 05 F1 | 	add	fp, #88
15588     A7 22 02 FB | 	rdlong	local03, fp
1558c     11 1F 02 F1 | 	add	local01, local03
15590     58 4E 85 F1 | 	sub	fp, #88
15594     A7 1E 62 FC | 	wrlong	local01, fp
15598     C0 4E 85 F1 | 	sub	fp, #192
1559c                 | LR__2106
1559c     4C 4E 05 F1 | 	add	fp, #76
155a0     A7 1E 02 FB | 	rdlong	local01, fp
155a4     34 4E 85 F1 | 	sub	fp, #52
155a8     A7 1E 62 FC | 	wrlong	local01, fp
155ac     18 4E 85 F1 | 	sub	fp, #24
155b0     97 9E 48 FB | 	callpa	#(@LR__2112-@LR__2107)>>2,fcache_load_ptr_
155b4                 | LR__2107
155b4     18 4E 05 F1 | 	add	fp, #24
155b8     A7 20 02 FB | 	rdlong	local02, fp
155bc     3C 4E 05 F1 | 	add	fp, #60
155c0     A7 26 02 FB | 	rdlong	local05, fp
155c4     54 4E 85 F1 | 	sub	fp, #84
155c8     13 21 52 F2 | 	cmps	local02, local05 wc
155cc     20 01 90 3D |  if_ae	jmp	#LR__2113
155d0     18 4E 05 F1 | 	add	fp, #24
155d4     A7 28 02 FB | 	rdlong	local06, fp
155d8     18 4E 85 F1 | 	sub	fp, #24
155dc     00 28 56 F2 | 	cmps	local06, #0 wc
155e0     58 00 90 CD |  if_b	jmp	#LR__2108
155e4     18 4E 05 F1 | 	add	fp, #24
155e8     A7 28 02 FB | 	rdlong	local06, fp
155ec     40 4E 05 F1 | 	add	fp, #64
155f0     A7 2A 02 FB | 	rdlong	local07, fp
155f4     58 4E 85 F1 | 	sub	fp, #88
155f8     15 29 52 F2 | 	cmps	local06, local07 wc
155fc     3C 00 90 3D |  if_ae	jmp	#LR__2108
15600     C0 4E 05 F1 | 	add	fp, #192
15604     A7 2C 02 FB | 	rdlong	local08, fp
15608     16 2B 02 F6 | 	mov	local07, local08
1560c     01 2A 06 F1 | 	add	local07, #1
15610     A7 2A 62 FC | 	wrlong	local07, fp
15614     A8 4E 85 F1 | 	sub	fp, #168
15618     A7 2A 02 FB | 	rdlong	local07, fp
1561c     15 2F 02 F6 | 	mov	local09, local07
15620     58 4E 05 F1 | 	add	fp, #88
15624     A7 30 02 F6 | 	mov	local10, fp
15628     A7 2E 02 F1 | 	add	local09, fp
1562c     17 33 C2 FA | 	rdbyte	local11, local09
15630     16 33 42 FC | 	wrbyte	local11, local08
15634     70 4E 85 F1 | 	sub	fp, #112
15638     20 00 90 FD | 	jmp	#LR__2109
1563c                 | LR__2108
1563c     C0 4E 05 F1 | 	add	fp, #192
15640     A7 2C 02 FB | 	rdlong	local08, fp
15644     16 2F 02 F6 | 	mov	local09, local08
15648     01 2E 06 F1 | 	add	local09, #1
1564c     A7 2E 62 FC | 	wrlong	local09, fp
15650     C0 4E 85 F1 | 	sub	fp, #192
15654     30 2E 06 F6 | 	mov	local09, #48
15658     16 61 48 FC | 	wrbyte	#48, local08
1565c                 | LR__2109
1565c     18 4E 05 F1 | 	add	fp, #24
15660     A7 28 02 FB | 	rdlong	local06, fp
15664     38 4E 05 F1 | 	add	fp, #56
15668     A7 34 02 FB | 	rdlong	local12, fp
1566c     50 4E 85 F1 | 	sub	fp, #80
15670     1A 29 0A F2 | 	cmp	local06, local12 wz
15674     5C 00 90 5D |  if_ne	jmp	#LR__2111
15678     10 4F 05 F1 | 	add	fp, #272
1567c     A7 2A 02 FB | 	rdlong	local07, fp
15680     10 4F 85 F1 | 	sub	fp, #272
15684     15 2F 0A F6 | 	mov	local09, local07 wz
15688     28 00 90 5D |  if_ne	jmp	#LR__2110
1568c     54 4E 05 F1 | 	add	fp, #84
15690     A7 32 02 FB | 	rdlong	local11, fp
15694     19 31 02 F6 | 	mov	local10, local11
15698     01 30 86 F1 | 	sub	local10, #1
1569c     3C 4E 85 F1 | 	sub	fp, #60
156a0     A7 36 02 FB | 	rdlong	local13, fp
156a4     18 4E 85 F1 | 	sub	fp, #24
156a8     1B 39 02 F6 | 	mov	local14, local13
156ac     18 39 52 F2 | 	cmps	local14, local10 wc
156b0     20 00 90 3D |  if_ae	jmp	#LR__2111
156b4                 | LR__2110
156b4     C0 4E 05 F1 | 	add	fp, #192
156b8     A7 2C 02 FB | 	rdlong	local08, fp
156bc     16 35 02 F6 | 	mov	local12, local08
156c0     01 34 06 F1 | 	add	local12, #1
156c4     A7 34 62 FC | 	wrlong	local12, fp
156c8     C0 4E 85 F1 | 	sub	fp, #192
156cc     2E 2E 06 F6 | 	mov	local09, #46
156d0     16 5D 48 FC | 	wrbyte	#46, local08
156d4                 | LR__2111
156d4     18 4E 05 F1 | 	add	fp, #24
156d8     A7 3A 02 FB | 	rdlong	local15, fp
156dc     1D 35 02 F6 | 	mov	local12, local15
156e0     01 34 06 F1 | 	add	local12, #1
156e4     A7 34 62 FC | 	wrlong	local12, fp
156e8     18 4E 85 F1 | 	sub	fp, #24
156ec     C4 FE 9F FD | 	jmp	#LR__2107
156f0                 | LR__2112
156f0                 | LR__2113
156f0     34 4E 05 F1 | 	add	fp, #52
156f4     A7 1E 0A FB | 	rdlong	local01, fp wz
156f8     34 4E 85 F1 | 	sub	fp, #52
156fc     A0 00 90 AD |  if_e	jmp	#LR__2117
15700     C0 4E 05 F1 | 	add	fp, #192
15704     A7 1E 02 FB | 	rdlong	local01, fp
15708     01 1E 86 F1 | 	sub	local01, #1
1570c     A7 1E 62 FC | 	wrlong	local01, fp
15710     C0 4E 85 F1 | 	sub	fp, #192
15714     97 26 48 FB | 	callpa	#(@LR__2115-@LR__2114)>>2,fcache_load_ptr_
15718                 | LR__2114
15718     C0 4E 05 F1 | 	add	fp, #192
1571c     A7 1E 02 FB | 	rdlong	local01, fp
15720     04 4E 05 F1 | 	add	fp, #4
15724     A7 22 02 FB | 	rdlong	local03, fp
15728     C4 4E 85 F1 | 	sub	fp, #196
1572c     11 1F 5A F2 | 	cmps	local01, local03 wcz
15730     30 00 90 ED |  if_be	jmp	#LR__2116
15734     C0 4E 05 F1 | 	add	fp, #192
15738     A7 28 02 FB | 	rdlong	local06, fp
1573c     C0 4E 85 F1 | 	sub	fp, #192
15740     14 25 C2 FA | 	rdbyte	local04, local06
15744     30 24 0E F2 | 	cmp	local04, #48 wz
15748     18 00 90 5D |  if_ne	jmp	#LR__2116
1574c     C0 4E 05 F1 | 	add	fp, #192
15750     A7 1E 02 FB | 	rdlong	local01, fp
15754     01 1E 86 F1 | 	sub	local01, #1
15758     A7 1E 62 FC | 	wrlong	local01, fp
1575c     C0 4E 85 F1 | 	sub	fp, #192
15760     B4 FF 9F FD | 	jmp	#LR__2114
15764                 | LR__2115
15764                 | LR__2116
15764     C0 4E 05 F1 | 	add	fp, #192
15768     A7 20 02 FB | 	rdlong	local02, fp
1576c     C0 4E 85 F1 | 	sub	fp, #192
15770     10 1F C2 FA | 	rdbyte	local01, local02
15774     2E 1E 0E F2 | 	cmp	local01, #46 wz
15778     C0 4E 05 A1 |  if_e	add	fp, #192
1577c     A7 1E 02 AB |  if_e	rdlong	local01, fp
15780     01 1E 86 A1 |  if_e	sub	local01, #1
15784     A7 1E 62 AC |  if_e	wrlong	local01, fp
15788     C0 4E 85 A1 |  if_e	sub	fp, #192
1578c     C0 4E 05 F1 | 	add	fp, #192
15790     A7 22 02 FB | 	rdlong	local03, fp
15794     01 22 06 F1 | 	add	local03, #1
15798     A7 22 62 FC | 	wrlong	local03, fp
1579c     C0 4E 85 F1 | 	sub	fp, #192
157a0                 | LR__2117
157a0     24 4E 05 F1 | 	add	fp, #36
157a4     A7 1E 0A FB | 	rdlong	local01, fp wz
157a8     24 4E 85 F1 | 	sub	fp, #36
157ac     B4 00 90 AD |  if_e	jmp	#LR__2120
157b0     C0 4E 05 F1 | 	add	fp, #192
157b4     A7 20 02 FB | 	rdlong	local02, fp
157b8     10 23 02 F6 | 	mov	local03, local02
157bc     01 22 06 F1 | 	add	local03, #1
157c0     A7 22 62 FC | 	wrlong	local03, fp
157c4     90 4E 85 F1 | 	sub	fp, #144
157c8     A7 24 02 FB | 	rdlong	local04, fp
157cc     10 25 42 FC | 	wrbyte	local04, local02
157d0     90 4E 05 F1 | 	add	fp, #144
157d4     A7 20 02 FB | 	rdlong	local02, fp
157d8     10 23 02 F6 | 	mov	local03, local02
157dc     01 22 06 F1 | 	add	local03, #1
157e0     A7 22 62 FC | 	wrlong	local03, fp
157e4     60 4E 85 F1 | 	sub	fp, #96
157e8     A7 24 02 FB | 	rdlong	local04, fp
157ec     10 25 42 FC | 	wrbyte	local04, local02
157f0     48 4E 85 F1 | 	sub	fp, #72
157f4     A7 00 68 FC | 	wrlong	#0, fp
157f8     18 4E 85 F1 | 	sub	fp, #24
157fc                 | LR__2118
157fc     18 4E 05 F1 | 	add	fp, #24
15800     A7 20 02 FB | 	rdlong	local02, fp
15804     44 4E 05 F1 | 	add	fp, #68
15808     A7 26 02 FB | 	rdlong	local05, fp
1580c     5C 4E 85 F1 | 	sub	fp, #92
15810     13 21 52 F2 | 	cmps	local02, local05 wc
15814     4C 00 90 3D |  if_ae	jmp	#LR__2119
15818     C0 4E 05 F1 | 	add	fp, #192
1581c     A7 2C 02 FB | 	rdlong	local08, fp
15820     16 35 02 F6 | 	mov	local12, local08
15824     01 34 06 F1 | 	add	local12, #1
15828     A7 34 62 FC | 	wrlong	local12, fp
1582c     A8 4E 85 F1 | 	sub	fp, #168
15830     A7 2A 02 FB | 	rdlong	local07, fp
15834     15 2F 02 F6 | 	mov	local09, local07
15838     98 4E 05 F1 | 	add	fp, #152
1583c     A7 30 02 F6 | 	mov	local10, fp
15840     A7 2E 02 F1 | 	add	local09, fp
15844     17 33 C2 FA | 	rdbyte	local11, local09
15848     16 33 42 FC | 	wrbyte	local11, local08
1584c     98 4E 85 F1 | 	sub	fp, #152
15850     A7 34 02 FB | 	rdlong	local12, fp
15854     01 34 06 F1 | 	add	local12, #1
15858     A7 34 62 FC | 	wrlong	local12, fp
1585c     18 4E 85 F1 | 	sub	fp, #24
15860     98 FF 9F FD | 	jmp	#LR__2118
15864                 | LR__2119
15864                 | LR__2120
15864     C0 4E 05 F1 | 	add	fp, #192
15868     A7 1E 02 FB | 	rdlong	local01, fp
1586c     C0 4E 85 F1 | 	sub	fp, #192
15870     0F 01 48 FC | 	wrbyte	#0, local01
15874                 | LR__2121
15874     6C 4E 05 F1 | 	add	fp, #108
15878     A7 1E 0A FB | 	rdlong	local01, fp wz
1587c     6C 4E 85 F1 | 	sub	fp, #108
15880     90 01 90 AD |  if_e	jmp	#LR__2132
15884     48 4E 05 F1 | 	add	fp, #72
15888     A7 22 0A FB | 	rdlong	local03, fp wz
1588c     48 4E 85 F1 | 	sub	fp, #72
15890     80 01 90 AD |  if_e	jmp	#LR__2132
15894     C4 4E 05 F1 | 	add	fp, #196
15898     A7 12 02 FB | 	rdlong	arg01, fp
1589c     C4 4E 85 F1 | 	sub	fp, #196
158a0     09 3D 02 F6 | 	mov	local16, arg01
158a4     97 06 48 FB | 	callpa	#(@LR__2123-@LR__2122)>>2,fcache_load_ptr_
158a8                 | LR__2122
158a8     1E FB C9 FA | 	rdbyte	result1, local16 wz
158ac     01 3C 06 51 |  if_ne	add	local16, #1
158b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2122
158b4                 | LR__2123
158b4     09 3D 82 F1 | 	sub	local16, arg01
158b8     1E 25 02 F6 | 	mov	local04, local16
158bc     6C 4E 05 F1 | 	add	fp, #108
158c0     A7 28 02 FB | 	rdlong	local06, fp
158c4     6C 4E 85 F1 | 	sub	fp, #108
158c8     14 25 5A F2 | 	cmps	local04, local06 wcz
158cc     44 01 90 ED |  if_be	jmp	#LR__2132
158d0     C4 4E 05 F1 | 	add	fp, #196
158d4     A7 1E 02 FB | 	rdlong	local01, fp
158d8     5C 4E 05 F1 | 	add	fp, #92
158dc     A7 1E 62 FC | 	wrlong	local01, fp
158e0     FC 4E 85 F1 | 	sub	fp, #252
158e4     A7 1E 0A FB | 	rdlong	local01, fp wz
158e8     24 4E 85 F1 | 	sub	fp, #36
158ec     20 00 90 AD |  if_e	jmp	#LR__2124
158f0     B8 4E 05 F1 | 	add	fp, #184
158f4     A7 00 68 FC | 	wrlong	#0, fp
158f8     4C 4E 85 F1 | 	sub	fp, #76
158fc     A7 1E 02 FB | 	rdlong	local01, fp
15900     B0 4E 05 F1 | 	add	fp, #176
15904     A7 1E 62 FC | 	wrlong	local01, fp
15908     1C 4F 85 F1 | 	sub	fp, #284
1590c     24 00 90 FD | 	jmp	#LR__2125
15910                 | LR__2124
15910     6C 4E 05 F1 | 	add	fp, #108
15914     A7 1E 02 FB | 	rdlong	local01, fp
15918     01 1E 86 F1 | 	sub	local01, #1
1591c     4C 4E 05 F1 | 	add	fp, #76
15920     A7 22 02 FB | 	rdlong	local03, fp
15924     11 1F 82 F1 | 	sub	local01, local03
15928     64 4E 05 F1 | 	add	fp, #100
1592c     A7 1E 62 FC | 	wrlong	local01, fp
15930     1C 4F 85 F1 | 	sub	fp, #284
15934                 | LR__2125
15934     97 20 48 FB | 	callpa	#(@LR__2127-@LR__2126)>>2,fcache_load_ptr_
15938                 | LR__2126
15938     1C 4F 05 F1 | 	add	fp, #284
1593c     A7 1E 0A FB | 	rdlong	local01, fp wz
15940     1C 4F 85 F1 | 	sub	fp, #284
15944     30 00 90 AD |  if_e	jmp	#LR__2128
15948     20 4F 05 F1 | 	add	fp, #288
1594c     A7 20 02 FB | 	rdlong	local02, fp
15950     10 23 02 F6 | 	mov	local03, local02
15954     01 22 06 F1 | 	add	local03, #1
15958     A7 22 62 FC | 	wrlong	local03, fp
1595c     10 55 48 FC | 	wrbyte	#42, local02
15960     04 4E 85 F1 | 	sub	fp, #4
15964     A7 1E 02 FB | 	rdlong	local01, fp
15968     01 1E 86 F1 | 	sub	local01, #1
1596c     A7 1E 62 FC | 	wrlong	local01, fp
15970     1C 4F 85 F1 | 	sub	fp, #284
15974     C0 FF 9F FD | 	jmp	#LR__2126
15978                 | LR__2127
15978                 | LR__2128
15978     B8 4E 05 F1 | 	add	fp, #184
1597c     A7 1E 0A FB | 	rdlong	local01, fp wz
15980     B8 4E 85 F1 | 	sub	fp, #184
15984     70 00 90 AD |  if_e	jmp	#LR__2131
15988     20 4F 05 F1 | 	add	fp, #288
1598c     A7 20 02 FB | 	rdlong	local02, fp
15990     10 23 02 F6 | 	mov	local03, local02
15994     01 22 06 F1 | 	add	local03, #1
15998     A7 22 62 FC | 	wrlong	local03, fp
1599c     10 5D 48 FC | 	wrbyte	#46, local02
159a0     04 4E 85 F1 | 	sub	fp, #4
159a4     A7 00 68 FC | 	wrlong	#0, fp
159a8     1C 4F 85 F1 | 	sub	fp, #284
159ac                 | LR__2129
159ac     1C 4F 05 F1 | 	add	fp, #284
159b0     A7 20 02 FB | 	rdlong	local02, fp
159b4     64 4E 85 F1 | 	sub	fp, #100
159b8     A7 26 02 FB | 	rdlong	local05, fp
159bc     B8 4E 85 F1 | 	sub	fp, #184
159c0     13 21 52 F2 | 	cmps	local02, local05 wc
159c4     30 00 90 3D |  if_ae	jmp	#LR__2130
159c8     20 4F 05 F1 | 	add	fp, #288
159cc     A7 2C 02 FB | 	rdlong	local08, fp
159d0     16 35 02 F6 | 	mov	local12, local08
159d4     01 34 06 F1 | 	add	local12, #1
159d8     A7 34 62 FC | 	wrlong	local12, fp
159dc     16 55 48 FC | 	wrbyte	#42, local08
159e0     04 4E 85 F1 | 	sub	fp, #4
159e4     A7 34 02 FB | 	rdlong	local12, fp
159e8     01 34 06 F1 | 	add	local12, #1
159ec     A7 34 62 FC | 	wrlong	local12, fp
159f0     1C 4F 85 F1 | 	sub	fp, #284
159f4     B4 FF 9F FD | 	jmp	#LR__2129
159f8                 | LR__2130
159f8                 | LR__2131
159f8     20 4F 05 F1 | 	add	fp, #288
159fc     A7 20 02 FB | 	rdlong	local02, fp
15a00     10 23 02 F6 | 	mov	local03, local02
15a04     01 22 06 F1 | 	add	local03, #1
15a08     A7 22 62 FC | 	wrlong	local03, fp
15a0c     20 4F 85 F1 | 	sub	fp, #288
15a10     10 01 48 FC | 	wrbyte	#0, local02
15a14                 | LR__2132
15a14     04 4E 05 F1 | 	add	fp, #4
15a18     A7 12 02 FB | 	rdlong	arg01, fp
15a1c     04 4E 05 F1 | 	add	fp, #4
15a20     A7 14 02 FB | 	rdlong	arg02, fp
15a24     BC 4E 05 F1 | 	add	fp, #188
15a28     A7 16 02 FB | 	rdlong	arg03, fp
15a2c     C4 4E 85 F1 | 	sub	fp, #196
15a30     C4 EE BF FD | 	call	#__system___fmtstr
15a34                 | LR__2133
15a34     A7 F0 03 F6 | 	mov	ptra, fp
15a38     B2 00 A0 FD | 	call	#popregs_
15a3c                 | __system___fmtfloat_ret
15a3c     2D 00 64 FD | 	ret
15a40                 | 
15a40                 | __system__Left_S
15a40     04 4A 05 F6 | 	mov	COUNT_, #4
15a44     A8 00 A0 FD | 	call	#pushregs_
15a48     09 1F 02 F6 | 	mov	local01, arg01
15a4c     0A 21 02 F6 | 	mov	local02, arg02
15a50     01 20 56 F2 | 	cmps	local02, #1 wc
15a54     16 01 00 CF 
15a58     C6 FB 05 C6 |  if_b	mov	result1, ##@LR__4003
15a5c     5C 00 90 CD |  if_b	jmp	#LR__2143
15a60     0F 13 02 F6 | 	mov	arg01, local01
15a64     09 23 02 F6 | 	mov	local03, arg01
15a68     97 06 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
15a6c                 | LR__2140
15a6c     11 FB C9 FA | 	rdbyte	result1, local03 wz
15a70     01 22 06 51 |  if_ne	add	local03, #1
15a74     F4 FF 9F 5D |  if_ne	jmp	#LR__2140
15a78                 | LR__2141
15a78     09 23 82 F1 | 	sub	local03, arg01
15a7c     11 FB 01 F6 | 	mov	result1, local03
15a80     10 FB 59 F2 | 	cmps	result1, local02 wcz
15a84     0F FB 01 E6 |  if_be	mov	result1, local01
15a88     30 00 90 ED |  if_be	jmp	#LR__2143
15a8c     10 13 02 F6 | 	mov	arg01, local02
15a90     02 12 06 F1 | 	add	arg01, #2
15a94     00 1A B0 FD | 	call	#__system___gc_alloc_managed
15a98     FD 24 0A F6 | 	mov	local04, result1 wz
15a9c     18 00 90 AD |  if_e	jmp	#LR__2142
15aa0     12 13 02 F6 | 	mov	arg01, local04
15aa4     0F 15 02 F6 | 	mov	arg02, local01
15aa8     10 17 02 F6 | 	mov	arg03, local02
15aac     68 DF BF FD | 	call	#__system____builtin_memmove
15ab0     12 21 02 F1 | 	add	local02, local04
15ab4     10 01 48 FC | 	wrbyte	#0, local02
15ab8                 | LR__2142
15ab8     12 FB 01 F6 | 	mov	result1, local04
15abc                 | LR__2143
15abc     A7 F0 03 F6 | 	mov	ptra, fp
15ac0     B2 00 A0 FD | 	call	#popregs_
15ac4                 | __system__Left_S_ret
15ac4     2D 00 64 FD | 	ret
15ac8                 | 
15ac8                 | __system__Right_S
15ac8     05 4A 05 F6 | 	mov	COUNT_, #5
15acc     A8 00 A0 FD | 	call	#pushregs_
15ad0     09 1F 02 F6 | 	mov	local01, arg01
15ad4     0A 21 02 F6 | 	mov	local02, arg02
15ad8     01 20 56 F2 | 	cmps	local02, #1 wc
15adc     16 01 00 CF 
15ae0     C7 FB 05 C6 |  if_b	mov	result1, ##@LR__4004
15ae4     64 00 90 CD |  if_b	jmp	#LR__2153
15ae8     0F 13 02 F6 | 	mov	arg01, local01
15aec     09 23 02 F6 | 	mov	local03, arg01
15af0     97 06 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
15af4                 | LR__2150
15af4     11 FB C9 FA | 	rdbyte	result1, local03 wz
15af8     01 22 06 51 |  if_ne	add	local03, #1
15afc     F4 FF 9F 5D |  if_ne	jmp	#LR__2150
15b00                 | LR__2151
15b00     09 23 82 F1 | 	sub	local03, arg01
15b04     11 FB 01 F6 | 	mov	result1, local03
15b08     FD 24 02 F6 | 	mov	local04, result1
15b0c     10 25 5A F2 | 	cmps	local04, local02 wcz
15b10     0F FB 01 E6 |  if_be	mov	result1, local01
15b14     34 00 90 ED |  if_be	jmp	#LR__2153
15b18     10 13 02 F6 | 	mov	arg01, local02
15b1c     02 12 06 F1 | 	add	arg01, #2
15b20     74 19 B0 FD | 	call	#__system___gc_alloc_managed
15b24     FD 26 0A F6 | 	mov	local05, result1 wz
15b28     1C 00 90 AD |  if_e	jmp	#LR__2152
15b2c     10 25 82 F1 | 	sub	local04, local02
15b30     0F 25 02 F1 | 	add	local04, local01
15b34     01 20 06 F1 | 	add	local02, #1
15b38     13 13 02 F6 | 	mov	arg01, local05
15b3c     12 15 02 F6 | 	mov	arg02, local04
15b40     10 17 02 F6 | 	mov	arg03, local02
15b44     D0 DE BF FD | 	call	#__system____builtin_memmove
15b48                 | LR__2152
15b48     13 FB 01 F6 | 	mov	result1, local05
15b4c                 | LR__2153
15b4c     A7 F0 03 F6 | 	mov	ptra, fp
15b50     B2 00 A0 FD | 	call	#popregs_
15b54                 | __system__Right_S_ret
15b54     2D 00 64 FD | 	ret
15b58                 | 
15b58                 | __system__Mid_S
15b58     05 4A 05 F6 | 	mov	COUNT_, #5
15b5c     A8 00 A0 FD | 	call	#pushregs_
15b60     09 1F 02 F6 | 	mov	local01, arg01
15b64     0A 21 02 F6 | 	mov	local02, arg02
15b68     01 16 56 F2 | 	cmps	arg03, #1 wc
15b6c     16 01 00 CF 
15b70     C8 FB 05 C6 |  if_b	mov	result1, ##@LR__4005
15b74     80 00 90 CD |  if_b	jmp	#LR__2163
15b78     01 20 86 F1 | 	sub	local02, #1
15b7c     00 20 56 F3 | 	fges	local02, #0 wc
15b80     0F 13 02 F6 | 	mov	arg01, local01
15b84     09 23 02 F6 | 	mov	local03, arg01
15b88     97 06 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
15b8c                 | LR__2160
15b8c     11 FB C9 FA | 	rdbyte	result1, local03 wz
15b90     01 22 06 51 |  if_ne	add	local03, #1
15b94     F4 FF 9F 5D |  if_ne	jmp	#LR__2160
15b98                 | LR__2161
15b98     09 23 82 F1 | 	sub	local03, arg01
15b9c     11 FB 01 F6 | 	mov	result1, local03
15ba0     FD 14 02 F6 | 	mov	arg02, result1
15ba4     10 15 52 F2 | 	cmps	arg02, local02 wc
15ba8     16 01 00 CF 
15bac     C9 FB 05 C6 |  if_b	mov	result1, ##@LR__4006
15bb0     44 00 90 CD |  if_b	jmp	#LR__2163
15bb4     0A 25 02 F6 | 	mov	local04, arg02
15bb8     10 25 82 F1 | 	sub	local04, local02
15bbc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
15bc0     0B 25 02 16 |  if_a	mov	local04, arg03
15bc4     12 13 02 F6 | 	mov	arg01, local04
15bc8     02 12 06 F1 | 	add	arg01, #2
15bcc     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
15bd0     FD 26 0A F6 | 	mov	local05, result1 wz
15bd4     1C 00 90 AD |  if_e	jmp	#LR__2162
15bd8     0F 21 02 F1 | 	add	local02, local01
15bdc     13 13 02 F6 | 	mov	arg01, local05
15be0     10 15 02 F6 | 	mov	arg02, local02
15be4     12 17 02 F6 | 	mov	arg03, local04
15be8     2C DE BF FD | 	call	#__system____builtin_memmove
15bec     13 25 02 F1 | 	add	local04, local05
15bf0     12 01 48 FC | 	wrbyte	#0, local04
15bf4                 | LR__2162
15bf4     13 FB 01 F6 | 	mov	result1, local05
15bf8                 | LR__2163
15bf8     A7 F0 03 F6 | 	mov	ptra, fp
15bfc     B2 00 A0 FD | 	call	#popregs_
15c00                 | __system__Mid_S_ret
15c00     2D 00 64 FD | 	ret
15c04                 | 
15c04                 | __system__Chr_S
15c04     01 4A 05 F6 | 	mov	COUNT_, #1
15c08     A8 00 A0 FD | 	call	#pushregs_
15c0c     09 1F 02 F6 | 	mov	local01, arg01
15c10     03 12 06 F6 | 	mov	arg01, #3
15c14     80 18 B0 FD | 	call	#__system___gc_alloc_managed
15c18     00 FA 4D F2 | 	cmps	result1, #0 wz
15c1c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
15c20     01 FA 05 51 |  if_ne	add	result1, #1
15c24     FD 00 48 5C |  if_ne	wrbyte	#0, result1
15c28     01 FA 85 51 |  if_ne	sub	result1, #1
15c2c     A7 F0 03 F6 | 	mov	ptra, fp
15c30     B2 00 A0 FD | 	call	#popregs_
15c34                 | __system__Chr_S_ret
15c34     2D 00 64 FD | 	ret
15c38                 | 
15c38                 | __system__Number_S
15c38     08 4A 05 F6 | 	mov	COUNT_, #8
15c3c     A8 00 A0 FD | 	call	#pushregs_
15c40     09 1F 02 F6 | 	mov	local01, arg01
15c44     0A 21 0A F6 | 	mov	local02, arg02 wz
15c48     0B 23 02 F6 | 	mov	local03, arg03
15c4c     3C 00 90 5D |  if_ne	jmp	#LR__2172
15c50     01 20 06 F6 | 	mov	local02, #1
15c54     11 25 02 F6 | 	mov	local04, local03
15c58     01 26 06 F6 | 	mov	local05, #1
15c5c     97 16 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
15c60                 | LR__2170
15c60     00 28 06 F6 | 	mov	local06, #0
15c64     0F 25 1A F2 | 	cmp	local04, local01 wcz
15c68     01 28 66 E6 |  if_be	neg	local06, #1
15c6c     12 27 12 F2 | 	cmp	local05, local04 wc
15c70     15 2B A2 F1 | 	subx	local07, local07
15c74     15 29 CA F7 | 	test	local06, local07 wz
15c78     11 25 02 5D |  if_ne	qmul	local04, local03
15c7c     12 27 02 56 |  if_ne	mov	local05, local04
15c80     01 20 06 51 |  if_ne	add	local02, #1
15c84     18 24 62 5D |  if_ne	getqx	local04
15c88     D4 FF 9F 5D |  if_ne	jmp	#LR__2170
15c8c                 | LR__2171
15c8c                 | LR__2172
15c8c     20 20 36 F3 | 	fle	local02, #32 wc
15c90     10 13 02 F6 | 	mov	arg01, local02
15c94     02 12 06 F1 | 	add	arg01, #2
15c98     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
15c9c     FD 28 02 F6 | 	mov	local06, result1
15ca0     10 2B 02 F6 | 	mov	local07, local02
15ca4     14 2B 02 F1 | 	add	local07, local06
15ca8     15 01 48 FC | 	wrbyte	#0, local07
15cac     97 1A 48 FB | 	callpa	#(@LR__2174-@LR__2173)>>2,fcache_load_ptr_
15cb0                 | LR__2173
15cb0     01 20 16 F2 | 	cmp	local02, #1 wc
15cb4     2C 00 90 CD |  if_b	jmp	#LR__2175
15cb8     11 1F 12 FD | 	qdiv	local01, local03
15cbc     01 20 86 F1 | 	sub	local02, #1
15cc0     10 2B 02 F6 | 	mov	local07, local02
15cc4     14 2B 02 F1 | 	add	local07, local06
15cc8     19 2C 62 FD | 	getqy	local08
15ccc     0A 2C 16 F2 | 	cmp	local08, #10 wc
15cd0     30 2C 06 C1 |  if_b	add	local08, #48
15cd4     37 2C 06 31 |  if_ae	add	local08, #55
15cd8     15 2D 42 FC | 	wrbyte	local08, local07
15cdc     18 1E 62 FD | 	getqx	local01
15ce0     CC FF 9F FD | 	jmp	#LR__2173
15ce4                 | LR__2174
15ce4                 | LR__2175
15ce4     14 FB 01 F6 | 	mov	result1, local06
15ce8     A7 F0 03 F6 | 	mov	ptra, fp
15cec     B2 00 A0 FD | 	call	#popregs_
15cf0                 | __system__Number_S_ret
15cf0     2D 00 64 FD | 	ret
15cf4                 | 
15cf4                 | __system__LCase_S
15cf4     07 4A 05 F6 | 	mov	COUNT_, #7
15cf8     A8 00 A0 FD | 	call	#pushregs_
15cfc     09 1F 02 F6 | 	mov	local01, arg01
15d00     09 21 02 F6 | 	mov	local02, arg01
15d04     97 06 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
15d08                 | LR__2180
15d08     10 FB C9 FA | 	rdbyte	result1, local02 wz
15d0c     01 20 06 51 |  if_ne	add	local02, #1
15d10     F4 FF 9F 5D |  if_ne	jmp	#LR__2180
15d14                 | LR__2181
15d14     09 21 82 F1 | 	sub	local02, arg01
15d18     10 FB 01 F6 | 	mov	result1, local02
15d1c     FD 20 0A F6 | 	mov	local02, result1 wz
15d20     16 01 00 AF 
15d24     CA FB 05 A6 |  if_e	mov	result1, ##@LR__4007
15d28     7C 00 90 AD |  if_e	jmp	#LR__2187
15d2c     10 13 02 F6 | 	mov	arg01, local02
15d30     02 12 06 F1 | 	add	arg01, #2
15d34     60 17 B0 FD | 	call	#__system___gc_alloc_managed
15d38     FD 22 0A F6 | 	mov	local03, result1 wz
15d3c     64 00 90 AD |  if_e	jmp	#LR__2186
15d40     01 24 66 F6 | 	neg	local04, #1
15d44     97 26 48 FB | 	callpa	#(@LR__2185-@LR__2182)>>2,fcache_load_ptr_
15d48                 | LR__2182
15d48     01 24 06 F1 | 	add	local04, #1
15d4c     12 27 02 F6 | 	mov	local05, local04
15d50     0F 27 02 F1 | 	add	local05, local01
15d54     13 29 C2 FA | 	rdbyte	local06, local05
15d58     41 28 56 F2 | 	cmps	local06, #65 wc
15d5c     18 00 90 CD |  if_b	jmp	#LR__2183
15d60     5B 28 56 F2 | 	cmps	local06, #91 wc
15d64     12 2B 02 C6 |  if_b	mov	local07, local04
15d68     11 2B 02 C1 |  if_b	add	local07, local03
15d6c     20 28 06 C1 |  if_b	add	local06, #32
15d70     15 29 42 CC |  if_b	wrbyte	local06, local07
15d74     0C 00 90 CD |  if_b	jmp	#LR__2184
15d78                 | LR__2183
15d78     12 2B 02 F6 | 	mov	local07, local04
15d7c     11 2B 02 F1 | 	add	local07, local03
15d80     15 29 42 FC | 	wrbyte	local06, local07
15d84                 | LR__2184
15d84     10 29 02 F6 | 	mov	local06, local02
15d88     01 28 86 F1 | 	sub	local06, #1
15d8c     14 25 0A F2 | 	cmp	local04, local06 wz
15d90     B4 FF 9F 5D |  if_ne	jmp	#LR__2182
15d94                 | LR__2185
15d94     11 21 02 F1 | 	add	local02, local03
15d98     10 01 48 FC | 	wrbyte	#0, local02
15d9c     11 FB 01 F6 | 	mov	result1, local03
15da0     04 00 90 FD | 	jmp	#LR__2187
15da4                 | LR__2186
15da4     11 FB 01 F6 | 	mov	result1, local03
15da8                 | LR__2187
15da8     A7 F0 03 F6 | 	mov	ptra, fp
15dac     B2 00 A0 FD | 	call	#popregs_
15db0                 | __system__LCase_S_ret
15db0     2D 00 64 FD | 	ret
15db4                 | 
15db4                 | __system__LTrim_S
15db4     05 4A 05 F6 | 	mov	COUNT_, #5
15db8     A8 00 A0 FD | 	call	#pushregs_
15dbc     09 1F 02 F6 | 	mov	local01, arg01
15dc0     09 21 02 F6 | 	mov	local02, arg01
15dc4     97 06 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
15dc8                 | LR__2190
15dc8     10 FB C9 FA | 	rdbyte	result1, local02 wz
15dcc     01 20 06 51 |  if_ne	add	local02, #1
15dd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2190
15dd4                 | LR__2191
15dd4     09 21 82 F1 | 	sub	local02, arg01
15dd8     10 FB 01 F6 | 	mov	result1, local02
15ddc     FD 20 0A F6 | 	mov	local02, result1 wz
15de0     16 01 00 AF 
15de4     CB FB 05 A6 |  if_e	mov	result1, ##@LR__4008
15de8     7C 00 90 AD |  if_e	jmp	#LR__2196
15dec     00 22 06 F6 | 	mov	local03, #0
15df0     10 25 02 F6 | 	mov	local04, local02
15df4                 | LR__2192
15df4     12 23 52 F2 | 	cmps	local03, local04 wc
15df8     68 00 90 3D |  if_ae	jmp	#LR__2195
15dfc     11 17 02 F6 | 	mov	arg03, local03
15e00     0F 17 02 F1 | 	add	arg03, local01
15e04     0B 17 C2 FA | 	rdbyte	arg03, arg03
15e08     20 16 0E F2 | 	cmp	arg03, #32 wz
15e0c     4C 00 90 AD |  if_e	jmp	#LR__2194
15e10     10 13 02 F6 | 	mov	arg01, local02
15e14     11 13 82 F1 | 	sub	arg01, local03
15e18     02 12 06 F1 | 	add	arg01, #2
15e1c     78 16 B0 FD | 	call	#__system___gc_alloc_managed
15e20     FD 26 0A F6 | 	mov	local05, result1 wz
15e24     2C 00 90 AD |  if_e	jmp	#LR__2193
15e28     11 15 02 F6 | 	mov	arg02, local03
15e2c     0F 15 02 F1 | 	add	arg02, local01
15e30     10 17 02 F6 | 	mov	arg03, local02
15e34     11 17 82 F1 | 	sub	arg03, local03
15e38     13 13 02 F6 | 	mov	arg01, local05
15e3c     D8 DB BF FD | 	call	#__system____builtin_memmove
15e40     11 21 82 F1 | 	sub	local02, local03
15e44     13 21 02 F1 | 	add	local02, local05
15e48     10 01 48 FC | 	wrbyte	#0, local02
15e4c     13 FB 01 F6 | 	mov	result1, local05
15e50     14 00 90 FD | 	jmp	#LR__2196
15e54                 | LR__2193
15e54     13 FB 01 F6 | 	mov	result1, local05
15e58     0C 00 90 FD | 	jmp	#LR__2196
15e5c                 | LR__2194
15e5c     01 22 06 F1 | 	add	local03, #1
15e60     90 FF 9F FD | 	jmp	#LR__2192
15e64                 | LR__2195
15e64     0F FB 01 F6 | 	mov	result1, local01
15e68                 | LR__2196
15e68     A7 F0 03 F6 | 	mov	ptra, fp
15e6c     B2 00 A0 FD | 	call	#popregs_
15e70                 | __system__LTrim_S_ret
15e70     2D 00 64 FD | 	ret
15e74                 | 
15e74                 | __system__RTrim_S
15e74     04 4A 05 F6 | 	mov	COUNT_, #4
15e78     A8 00 A0 FD | 	call	#pushregs_
15e7c     09 1F 02 F6 | 	mov	local01, arg01
15e80     09 21 02 F6 | 	mov	local02, arg01
15e84     97 06 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
15e88                 | LR__2200
15e88     10 FB C9 FA | 	rdbyte	result1, local02 wz
15e8c     01 20 06 51 |  if_ne	add	local02, #1
15e90     F4 FF 9F 5D |  if_ne	jmp	#LR__2200
15e94                 | LR__2201
15e94     09 21 82 F1 | 	sub	local02, arg01
15e98     10 FB 01 F6 | 	mov	result1, local02
15e9c     FD 20 0A F6 | 	mov	local02, result1 wz
15ea0     16 01 00 AF 
15ea4     CC FB 05 A6 |  if_e	mov	result1, ##@LR__4009
15ea8     74 00 90 AD |  if_e	jmp	#LR__2205
15eac     10 23 02 F6 | 	mov	local03, local02
15eb0     01 22 86 F1 | 	sub	local03, #1
15eb4                 | LR__2202
15eb4     11 15 02 F6 | 	mov	arg02, local03
15eb8     0F 15 02 F1 | 	add	arg02, local01
15ebc     0A 21 C2 FA | 	rdbyte	local02, arg02
15ec0     20 20 0E F2 | 	cmp	local02, #32 wz
15ec4     44 00 90 AD |  if_e	jmp	#LR__2204
15ec8     11 13 02 F6 | 	mov	arg01, local03
15ecc     02 12 06 F1 | 	add	arg01, #2
15ed0     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
15ed4     FD 24 0A F6 | 	mov	local04, result1 wz
15ed8     28 00 90 AD |  if_e	jmp	#LR__2203
15edc     11 17 02 F6 | 	mov	arg03, local03
15ee0     01 16 06 F1 | 	add	arg03, #1
15ee4     12 13 02 F6 | 	mov	arg01, local04
15ee8     0F 15 02 F6 | 	mov	arg02, local01
15eec     28 DB BF FD | 	call	#__system____builtin_memmove
15ef0     01 22 06 F1 | 	add	local03, #1
15ef4     12 23 02 F1 | 	add	local03, local04
15ef8     11 01 48 FC | 	wrbyte	#0, local03
15efc     12 FB 01 F6 | 	mov	result1, local04
15f00     1C 00 90 FD | 	jmp	#LR__2205
15f04                 | LR__2203
15f04     12 FB 01 F6 | 	mov	result1, local04
15f08     14 00 90 FD | 	jmp	#LR__2205
15f0c                 | LR__2204
15f0c     01 22 86 F1 | 	sub	local03, #1
15f10     00 22 56 F2 | 	cmps	local03, #0 wc
15f14     9C FF 9F 3D |  if_ae	jmp	#LR__2202
15f18     16 01 00 FF 
15f1c     CD FB 05 F6 | 	mov	result1, ##@LR__4010
15f20                 | LR__2205
15f20     A7 F0 03 F6 | 	mov	ptra, fp
15f24     B2 00 A0 FD | 	call	#popregs_
15f28                 | __system__RTrim_S_ret
15f28     2D 00 64 FD | 	ret
15f2c                 | 
15f2c                 | __system__Instr
15f2c     07 4A 05 F6 | 	mov	COUNT_, #7
15f30     A8 00 A0 FD | 	call	#pushregs_
15f34     09 1F 02 F6 | 	mov	local01, arg01
15f38     0A 21 02 F6 | 	mov	local02, arg02
15f3c     0B 23 02 F6 | 	mov	local03, arg03
15f40     11 13 02 F6 | 	mov	arg01, local03
15f44     09 25 02 F6 | 	mov	local04, arg01
15f48     97 06 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
15f4c                 | LR__2210
15f4c     12 FB C9 FA | 	rdbyte	result1, local04 wz
15f50     01 24 06 51 |  if_ne	add	local04, #1
15f54     F4 FF 9F 5D |  if_ne	jmp	#LR__2210
15f58                 | LR__2211
15f58     09 25 82 F1 | 	sub	local04, arg01
15f5c     12 27 02 F6 | 	mov	local05, local04
15f60     10 13 02 F6 | 	mov	arg01, local02
15f64     09 25 02 F6 | 	mov	local04, arg01
15f68     97 06 48 FB | 	callpa	#(@LR__2213-@LR__2212)>>2,fcache_load_ptr_
15f6c                 | LR__2212
15f6c     12 FB C9 FA | 	rdbyte	result1, local04 wz
15f70     01 24 06 51 |  if_ne	add	local04, #1
15f74     F4 FF 9F 5D |  if_ne	jmp	#LR__2212
15f78                 | LR__2213
15f78     09 25 82 F1 | 	sub	local04, arg01
15f7c     12 FB 01 F6 | 	mov	result1, local04
15f80     FD 18 0A F6 | 	mov	arg04, result1 wz
15f84     00 FA 05 A6 |  if_e	mov	result1, #0
15f88     98 00 90 AD |  if_e	jmp	#LR__2217
15f8c     00 26 0E F2 | 	cmp	local05, #0 wz
15f90     00 FA 05 A6 |  if_e	mov	result1, #0
15f94     8C 00 90 AD |  if_e	jmp	#LR__2217
15f98     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
15f9c     00 FA 05 16 |  if_a	mov	result1, #0
15fa0     80 00 90 1D |  if_a	jmp	#LR__2217
15fa4     01 1E 56 F2 | 	cmps	local01, #1 wc
15fa8     01 1E 06 C6 |  if_b	mov	local01, #1
15fac     11 29 C2 FA | 	rdbyte	local06, local03
15fb0     01 26 0E F2 | 	cmp	local05, #1 wz
15fb4     18 00 90 5D |  if_ne	jmp	#LR__2214
15fb8     10 13 02 F6 | 	mov	arg01, local02
15fbc     14 15 02 F6 | 	mov	arg02, local06
15fc0     0F 17 02 F6 | 	mov	arg03, local01
15fc4     00 18 06 F6 | 	mov	arg04, #0
15fc8     60 30 B0 FD | 	call	#__system____ScanForChar
15fcc     54 00 90 FD | 	jmp	#LR__2217
15fd0                 | LR__2214
15fd0     0F 2B 02 F6 | 	mov	local07, local01
15fd4                 | LR__2215
15fd4     10 13 02 F6 | 	mov	arg01, local02
15fd8     14 15 02 F6 | 	mov	arg02, local06
15fdc     15 17 02 F6 | 	mov	arg03, local07
15fe0     00 18 06 F6 | 	mov	arg04, #0
15fe4     44 30 B0 FD | 	call	#__system____ScanForChar
15fe8     FD 2A 0A F6 | 	mov	local07, result1 wz
15fec     30 00 90 AD |  if_e	jmp	#LR__2216
15ff0     13 17 02 F6 | 	mov	arg03, local05
15ff4     10 13 02 F6 | 	mov	arg01, local02
15ff8     15 15 02 F6 | 	mov	arg02, local07
15ffc     58 FB BF FD | 	call	#__system__Mid_S
16000     FD 12 02 F6 | 	mov	arg01, result1
16004     11 15 02 F6 | 	mov	arg02, local03
16008     14 DB BF FD | 	call	#__system___string_cmp
1600c     00 FA 0D F2 | 	cmp	result1, #0 wz
16010     15 FB 01 A6 |  if_e	mov	result1, local07
16014     0C 00 90 AD |  if_e	jmp	#LR__2217
16018     13 2B 02 F1 | 	add	local07, local05
1601c     B4 FF 9F FD | 	jmp	#LR__2215
16020                 | LR__2216
16020     00 FA 05 F6 | 	mov	result1, #0
16024                 | LR__2217
16024     A7 F0 03 F6 | 	mov	ptra, fp
16028     B2 00 A0 FD | 	call	#popregs_
1602c                 | __system__Instr_ret
1602c     2D 00 64 FD | 	ret
16030                 | 
16030                 | __system___strerror
16030     00 12 56 F2 | 	cmps	arg01, #0 wc
16034     08 00 90 CD |  if_b	jmp	#LR__2220
16038     1A 12 56 F2 | 	cmps	arg01, #26 wc
1603c     04 00 90 CD |  if_b	jmp	#LR__2221
16040                 | LR__2220
16040     19 12 06 F6 | 	mov	arg01, #25
16044                 | LR__2221
16044     02 12 66 F0 | 	shl	arg01, #2
16048     01 00 00 FF 
1604c     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
16050     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
16054     09 FB 01 FB | 	rdlong	result1, arg01
16058     01 00 00 FF 
1605c     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
16060                 | __system___strerror_ret
16060     2D 00 64 FD | 	ret
16064                 | 
16064                 | __system___int64_shl
16064     20 16 CE F7 | 	test	arg03, #32 wz
16068     09 15 02 56 |  if_ne	mov	arg02, arg01
1606c     00 12 06 56 |  if_ne	mov	arg01, #0
16070     1F 16 CE F7 | 	test	arg03, #31 wz
16074     18 00 90 AD |  if_e	jmp	#LR__2230
16078     0B 15 62 F0 | 	shl	arg02, arg03
1607c     09 FB 01 F6 | 	mov	result1, arg01
16080     0B FD 61 F6 | 	neg	result2, arg03
16084     FE FA 41 F0 | 	shr	result1, result2
16088     FD 14 42 F5 | 	or	arg02, result1
1608c     0B 13 62 F0 | 	shl	arg01, arg03
16090                 | LR__2230
16090     0A FD 01 F6 | 	mov	result2, arg02
16094     09 FB 01 F6 | 	mov	result1, arg01
16098                 | __system___int64_shl_ret
16098     2D 00 64 FD | 	ret
1609c                 | 
1609c                 | __system___usepins
1609c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
160a0     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
160a4     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
160a8     00 13 CA F7 | 	test	arg01, _var01 wz
160ac     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
160b0     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
160b4     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
160b8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
160bc     00 FA 05 56 |  if_ne	mov	result1, #0
160c0     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
160c4     14 E8 05 F1 | 	add	ptr___system__dat__, #20
160c8     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
160cc     09 03 42 F5 | 	or	_var02, arg01
160d0     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
160d4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
160d8     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
160dc     0A 03 42 F5 | 	or	_var02, arg02
160e0     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
160e4     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
160e8     01 FA 65 F6 | 	neg	result1, #1
160ec                 | __system___usepins_ret
160ec     2D 00 64 FD | 	ret
160f0                 | 
160f0                 | __system___freepins
160f0     14 E8 05 F1 | 	add	ptr___system__dat__, #20
160f4     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
160f8     09 01 22 F5 | 	andn	_var01, arg01
160fc     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
16100     04 E8 05 F1 | 	add	ptr___system__dat__, #4
16104     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
16108     0A 01 22 F5 | 	andn	_var01, arg02
1610c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
16110     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
16114                 | __system___freepins_ret
16114     2D 00 64 FD | 	ret
16118                 | 
16118                 | __system___float_fromuns
16118     09 17 0A F6 | 	mov	arg03, arg01 wz
1611c     0B FB 01 A6 |  if_e	mov	result1, arg03
16120     24 00 90 AD |  if_e	jmp	#LR__2240
16124     0B 15 92 F7 | 	encod	arg02, arg03 wc
16128     01 14 06 C1 |  if_b	add	arg02, #1
1612c     01 14 86 F1 | 	sub	arg02, #1
16130     1F 12 06 F6 | 	mov	arg01, #31
16134     0A 13 82 F1 | 	sub	arg01, arg02
16138     09 17 62 F0 | 	shl	arg03, arg01
1613c     02 16 46 F0 | 	shr	arg03, #2
16140     00 12 06 F6 | 	mov	arg01, #0
16144     74 08 B0 FD | 	call	#__system___float_Pack
16148                 | LR__2240
16148                 | __system___float_fromuns_ret
16148     2D 00 64 FD | 	ret
1614c                 | 
1614c                 | __system___float_add
1614c     0F 4A 05 F6 | 	mov	COUNT_, #15
16150     A8 00 A0 FD | 	call	#pushregs_
16154     09 1F 02 F6 | 	mov	local01, arg01
16158     0A 21 02 F6 | 	mov	local02, arg02
1615c     00 22 06 F6 | 	mov	local03, #0
16160     0F 25 02 F6 | 	mov	local04, local01
16164     12 27 02 F6 | 	mov	local05, local04
16168     16 26 46 F7 | 	zerox	local05, #22
1616c     12 29 02 F6 | 	mov	local06, local04
16170     01 28 66 F0 | 	shl	local06, #1
16174     18 28 46 F0 | 	shr	local06, #24
16178     1F 24 46 F0 | 	shr	local04, #31
1617c     10 13 02 F6 | 	mov	arg01, local02
16180     09 FB 01 F6 | 	mov	result1, arg01
16184     FD 2A 02 F6 | 	mov	local07, result1
16188     15 2D 02 F6 | 	mov	local08, local07
1618c     16 2C 46 F7 | 	zerox	local08, #22
16190     15 2F 02 F6 | 	mov	local09, local07
16194     01 2E 66 F0 | 	shl	local09, #1
16198     18 2E 46 F0 | 	shr	local09, #24
1619c     17 31 02 F6 | 	mov	local10, local09
161a0     1F 2A 46 F0 | 	shr	local07, #31
161a4     00 32 06 F6 | 	mov	local11, #0
161a8     00 34 06 F6 | 	mov	local12, #0
161ac     18 29 12 F2 | 	cmp	local06, local10 wc
161b0     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
161b4     2C 00 90 1D |  if_a	jmp	#LR__2250
161b8     16 27 12 32 |  if_ae	cmp	local05, local08 wc
161bc     24 00 90 3D |  if_ae	jmp	#LR__2250
161c0     13 37 02 F6 | 	mov	local13, local05
161c4     16 27 02 F6 | 	mov	local05, local08
161c8     1B 2D 02 F6 | 	mov	local08, local13
161cc     14 37 02 F6 | 	mov	local13, local06
161d0     18 29 02 F6 | 	mov	local06, local10
161d4     1B 31 02 F6 | 	mov	local10, local13
161d8     12 37 02 F6 | 	mov	local13, local04
161dc     15 25 02 F6 | 	mov	local04, local07
161e0     1B 2B 02 F6 | 	mov	local07, local13
161e4                 | LR__2250
161e4     FF 28 0E F2 | 	cmp	local06, #255 wz
161e8     70 01 90 AD |  if_e	jmp	#LR__2265
161ec     00 28 0E F2 | 	cmp	local06, #0 wz
161f0     AC 01 90 AD |  if_e	jmp	#LR__2267
161f4     17 26 26 F4 | 	bith	local05, #23
161f8                 | LR__2251
161f8     00 30 0E F2 | 	cmp	local10, #0 wz
161fc     F0 01 90 AD |  if_e	jmp	#LR__2271
16200     17 2C 26 F4 | 	bith	local08, #23
16204                 | LR__2252
16204     7F 28 86 F1 | 	sub	local06, #127
16208     7F 30 86 F1 | 	sub	local10, #127
1620c     14 39 02 F6 | 	mov	local14, local06
16210     18 39 82 F1 | 	sub	local14, local10
16214     97 14 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
16218                 | LR__2253
16218     20 38 56 F2 | 	cmps	local14, #32 wc
1621c     20 00 90 CD |  if_b	jmp	#LR__2255
16220     16 2F 02 F6 | 	mov	local09, local08
16224     00 32 0E F2 | 	cmp	local11, #0 wz
16228     6F 32 62 FD | 	wrnz	local11
1622c     19 2F 42 F5 | 	or	local09, local11
16230     17 33 02 F6 | 	mov	local11, local09
16234     00 2C 06 F6 | 	mov	local08, #0
16238     20 38 86 F1 | 	sub	local14, #32
1623c     D8 FF 9F FD | 	jmp	#LR__2253
16240                 | LR__2254
16240                 | LR__2255
16240     00 38 0E F2 | 	cmp	local14, #0 wz
16244     38 00 90 AD |  if_e	jmp	#LR__2256
16248     16 37 02 F6 | 	mov	local13, local08
1624c     20 30 06 F6 | 	mov	local10, #32
16250     1C 31 82 F1 | 	sub	local10, local14
16254     18 37 62 F0 | 	shl	local13, local10
16258     19 31 02 F6 | 	mov	local10, local11
1625c     20 2E 06 F6 | 	mov	local09, #32
16260     1C 2F 82 F1 | 	sub	local09, local14
16264     17 31 6A F0 | 	shl	local10, local09 wz
16268     1C 33 42 F0 | 	shr	local11, local14
1626c     1C 2D 42 F0 | 	shr	local08, local14
16270     1B 33 42 F5 | 	or	local11, local13
16274     00 3A 06 F6 | 	mov	local15, #0
16278     01 3A 06 56 |  if_ne	mov	local15, #1
1627c     1D 33 42 F5 | 	or	local11, local15
16280                 | LR__2256
16280     12 3B 02 F6 | 	mov	local15, local04
16284     15 3B 62 F5 | 	xor	local15, local07
16288     01 3A CE F7 | 	test	local15, #1 wz
1628c     18 00 90 AD |  if_e	jmp	#LR__2257
16290     16 2D 22 F6 | 	not	local08, local08
16294     19 33 22 F6 | 	not	local11, local11
16298     01 32 0E F1 | 	add	local11, #1 wz
1629c     00 3A 06 F6 | 	mov	local15, #0
162a0     01 3A 06 A6 |  if_e	mov	local15, #1
162a4     1D 2D 02 F1 | 	add	local08, local15
162a8                 | LR__2257
162a8     19 35 12 F1 | 	add	local12, local11 wc
162ac     16 27 22 F1 | 	addx	local05, local08
162b0     00 26 56 F2 | 	cmps	local05, #0 wc
162b4     1C 00 90 3D |  if_ae	jmp	#LR__2258
162b8     01 24 66 F5 | 	xor	local04, #1
162bc     13 27 22 F6 | 	not	local05, local05
162c0     1A 35 22 F6 | 	not	local12, local12
162c4     01 34 0E F1 | 	add	local12, #1 wz
162c8     00 3A 06 F6 | 	mov	local15, #0
162cc     01 3A 06 A6 |  if_e	mov	local15, #1
162d0     1D 27 02 F1 | 	add	local05, local15
162d4                 | LR__2258
162d4     00 80 00 FF 
162d8     00 26 16 F2 | 	cmp	local05, ##16777216 wc
162dc     28 00 90 CD |  if_b	jmp	#LR__2259
162e0     01 28 06 F1 | 	add	local06, #1
162e4     1A 39 02 F6 | 	mov	local14, local12
162e8     01 38 06 F5 | 	and	local14, #1
162ec     01 34 46 F0 | 	shr	local12, #1
162f0     13 3B 02 F6 | 	mov	local15, local05
162f4     1F 3A 66 F0 | 	shl	local15, #31
162f8     1D 35 42 F5 | 	or	local12, local15
162fc     1C 35 42 F5 | 	or	local12, local14
16300     01 26 46 F0 | 	shr	local05, #1
16304     3C 00 90 FD | 	jmp	#LR__2264
16308                 | LR__2259
16308     00 40 00 FF 
1630c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
16310     30 00 90 3D |  if_ae	jmp	#LR__2263
16314     00 26 0E F2 | 	cmp	local05, #0 wz
16318     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1631c     08 24 46 A5 |  if_e	or	local04, #8
16320     01 24 26 A5 |  if_e	andn	local04, #1
16324     1C 00 90 AD |  if_e	jmp	#LR__2262
16328                 | LR__2260
16328     00 40 00 FF 
1632c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
16330     10 00 90 3D |  if_ae	jmp	#LR__2261
16334     1A 35 12 F1 | 	add	local12, local12 wc
16338     13 27 22 F1 | 	addx	local05, local05
1633c     01 28 86 F1 | 	sub	local06, #1
16340     E4 FF 9F FD | 	jmp	#LR__2260
16344                 | LR__2261
16344                 | LR__2262
16344                 | LR__2263
16344                 | LR__2264
16344     13 13 02 F6 | 	mov	arg01, local05
16348     1A 15 02 F6 | 	mov	arg02, local12
1634c     14 17 02 F6 | 	mov	arg03, local06
16350     12 19 02 F6 | 	mov	arg04, local04
16354     18 31 B0 FD | 	call	#__system__pack_0372
16358     DC 00 90 FD | 	jmp	#LR__2275
1635c                 | LR__2265
1635c     FF 30 0E F2 | 	cmp	local10, #255 wz
16360     10 00 90 5D |  if_ne	jmp	#LR__2266
16364     12 2B 0A F2 | 	cmp	local07, local04 wz
16368     00 F8 3F 5F 
1636c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
16370     C4 00 90 5D |  if_ne	jmp	#LR__2275
16374                 | LR__2266
16374     00 26 0E F2 | 	cmp	local05, #0 wz
16378     00 F8 3F 5F 
1637c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
16380     B4 00 90 5D |  if_ne	jmp	#LR__2275
16384     1A 15 02 F6 | 	mov	arg02, local12
16388     14 17 02 F6 | 	mov	arg03, local06
1638c     12 19 02 F6 | 	mov	arg04, local04
16390     02 18 46 F5 | 	or	arg04, #2
16394     13 13 02 F6 | 	mov	arg01, local05
16398     D4 30 B0 FD | 	call	#__system__pack_0372
1639c     98 00 90 FD | 	jmp	#LR__2275
163a0                 | LR__2267
163a0     00 26 0E F2 | 	cmp	local05, #0 wz
163a4     28 00 90 AD |  if_e	jmp	#LR__2270
163a8     01 26 66 F0 | 	shl	local05, #1
163ac     97 0E 48 FB | 	callpa	#(@LR__2269-@LR__2268)>>2,fcache_load_ptr_
163b0                 | LR__2268
163b0     00 40 00 FF 
163b4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
163b8     14 3B 02 C6 |  if_b	mov	local15, local06
163bc     01 3A 86 C1 |  if_b	sub	local15, #1
163c0     1D 29 02 C6 |  if_b	mov	local06, local15
163c4     01 26 66 C0 |  if_b	shl	local05, #1
163c8     E4 FF 9F CD |  if_b	jmp	#LR__2268
163cc                 | LR__2269
163cc     28 FE 9F FD | 	jmp	#LR__2251
163d0                 | LR__2270
163d0     15 25 02 F5 | 	and	local04, local07
163d4     12 19 02 F6 | 	mov	arg04, local04
163d8     08 18 46 F5 | 	or	arg04, #8
163dc     00 12 06 F6 | 	mov	arg01, #0
163e0     00 14 06 F6 | 	mov	arg02, #0
163e4     00 16 06 F6 | 	mov	arg03, #0
163e8     84 30 B0 FD | 	call	#__system__pack_0372
163ec     48 00 90 FD | 	jmp	#LR__2275
163f0                 | LR__2271
163f0     00 2C 0E F2 | 	cmp	local08, #0 wz
163f4     28 00 90 AD |  if_e	jmp	#LR__2274
163f8     01 2C 66 F0 | 	shl	local08, #1
163fc     97 0E 48 FB | 	callpa	#(@LR__2273-@LR__2272)>>2,fcache_load_ptr_
16400                 | LR__2272
16400     00 40 00 FF 
16404     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
16408     18 3B 02 C6 |  if_b	mov	local15, local10
1640c     01 3A 86 C1 |  if_b	sub	local15, #1
16410     1D 31 02 C6 |  if_b	mov	local10, local15
16414     01 2C 66 C0 |  if_b	shl	local08, #1
16418     E4 FF 9F CD |  if_b	jmp	#LR__2272
1641c                 | LR__2273
1641c     E4 FD 9F FD | 	jmp	#LR__2252
16420                 | LR__2274
16420     7F 28 86 F1 | 	sub	local06, #127
16424     13 13 02 F6 | 	mov	arg01, local05
16428     1A 15 02 F6 | 	mov	arg02, local12
1642c     14 17 02 F6 | 	mov	arg03, local06
16430     12 19 02 F6 | 	mov	arg04, local04
16434     38 30 B0 FD | 	call	#__system__pack_0372
16438                 | LR__2275
16438     A7 F0 03 F6 | 	mov	ptra, fp
1643c     B2 00 A0 FD | 	call	#popregs_
16440                 | __system___float_add_ret
16440     2D 00 64 FD | 	ret
16444                 | 
16444                 | __system___float_mul
16444     0B 4A 05 F6 | 	mov	COUNT_, #11
16448     A8 00 A0 FD | 	call	#pushregs_
1644c     09 1F 02 F6 | 	mov	local01, arg01
16450     0A 21 02 F6 | 	mov	local02, arg02
16454     0F 23 02 F6 | 	mov	local03, local01
16458     11 25 02 F6 | 	mov	local04, local03
1645c     16 24 46 F7 | 	zerox	local04, #22
16460     11 27 02 F6 | 	mov	local05, local03
16464     01 26 66 F0 | 	shl	local05, #1
16468     18 26 46 F0 | 	shr	local05, #24
1646c     1F 22 46 F0 | 	shr	local03, #31
16470     10 FB 01 F6 | 	mov	result1, local02
16474     FD 28 02 F6 | 	mov	local06, result1
16478     14 2B 02 F6 | 	mov	local07, local06
1647c     16 2A 46 F7 | 	zerox	local07, #22
16480     14 2D 02 F6 | 	mov	local08, local06
16484     01 2C 66 F0 | 	shl	local08, #1
16488     18 2C 46 F0 | 	shr	local08, #24
1648c     1F 28 46 F0 | 	shr	local06, #31
16490     14 23 62 F5 | 	xor	local03, local06
16494     FF 26 0E F2 | 	cmp	local05, #255 wz
16498     90 00 90 AD |  if_e	jmp	#LR__2283
1649c     FF 2C 0E F2 | 	cmp	local08, #255 wz
164a0     D8 00 90 AD |  if_e	jmp	#LR__2285
164a4     00 26 0E F2 | 	cmp	local05, #0 wz
164a8     0C 01 90 AD |  if_e	jmp	#LR__2286
164ac     17 24 26 F4 | 	bith	local04, #23
164b0                 | LR__2280
164b0     00 2C 0E F2 | 	cmp	local08, #0 wz
164b4     44 01 90 AD |  if_e	jmp	#LR__2290
164b8     17 2A 26 F4 | 	bith	local07, #23
164bc                 | LR__2281
164bc     12 21 02 F6 | 	mov	local02, local04
164c0     04 20 66 F0 | 	shl	local02, #4
164c4     15 29 02 F6 | 	mov	local06, local07
164c8     05 28 66 F0 | 	shl	local06, #5
164cc     14 21 02 FD | 	qmul	local02, local06
164d0     16 27 02 F1 | 	add	local05, local08
164d4     FE 26 86 F1 | 	sub	local05, #254
164d8     13 2F 02 F6 | 	mov	local09, local05
164dc     04 24 66 F0 | 	shl	local04, #4
164e0     05 2A 66 F0 | 	shl	local07, #5
164e4     18 30 62 FD | 	getqx	local10
164e8     15 25 02 FD | 	qmul	local04, local07
164ec     19 32 62 FD | 	getqy	local11
164f0     00 80 00 FF 
164f4     00 32 16 F2 | 	cmp	local11, ##16777216 wc
164f8     18 00 90 CD |  if_b	jmp	#LR__2282
164fc     01 2E 06 F1 | 	add	local09, #1
16500     01 30 46 F0 | 	shr	local10, #1
16504     19 2D 02 F6 | 	mov	local08, local11
16508     1F 2C 66 F0 | 	shl	local08, #31
1650c     16 31 42 F5 | 	or	local10, local08
16510     01 32 46 F0 | 	shr	local11, #1
16514                 | LR__2282
16514     19 13 02 F6 | 	mov	arg01, local11
16518     18 15 02 F6 | 	mov	arg02, local10
1651c     17 17 02 F6 | 	mov	arg03, local09
16520     11 19 02 F6 | 	mov	arg04, local03
16524     48 2F B0 FD | 	call	#__system__pack_0372
16528     10 01 90 FD | 	jmp	#LR__2294
1652c                 | LR__2283
1652c     00 24 0E F2 | 	cmp	local04, #0 wz
16530     0F FB 01 56 |  if_ne	mov	result1, local01
16534     04 01 90 5D |  if_ne	jmp	#LR__2294
16538     FF 2C 56 F2 | 	cmps	local08, #255 wc
1653c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
16540     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
16544     18 00 90 4D |  if_c_and_nz	jmp	#LR__2284
16548     00 F8 3F CF 
1654c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
16550     E8 00 90 CD |  if_b	jmp	#LR__2294
16554     00 2A 0E F2 | 	cmp	local07, #0 wz
16558     10 FB 01 56 |  if_ne	mov	result1, local02
1655c     DC 00 90 5D |  if_ne	jmp	#LR__2294
16560                 | LR__2284
16560     02 22 46 F5 | 	or	local03, #2
16564     00 12 06 F6 | 	mov	arg01, #0
16568     00 14 06 F6 | 	mov	arg02, #0
1656c     13 17 02 F6 | 	mov	arg03, local05
16570     11 19 02 F6 | 	mov	arg04, local03
16574     F8 2E B0 FD | 	call	#__system__pack_0372
16578     C0 00 90 FD | 	jmp	#LR__2294
1657c                 | LR__2285
1657c     00 26 0E F2 | 	cmp	local05, #0 wz
16580     00 24 0E A2 |  if_e	cmp	local04, #0 wz
16584     00 F8 3F AF 
16588     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1658c     AC 00 90 AD |  if_e	jmp	#LR__2294
16590     00 2A 0E F2 | 	cmp	local07, #0 wz
16594     10 FB 01 56 |  if_ne	mov	result1, local02
16598     A0 00 90 5D |  if_ne	jmp	#LR__2294
1659c     16 17 02 F6 | 	mov	arg03, local08
165a0     11 19 02 F6 | 	mov	arg04, local03
165a4     02 18 46 F5 | 	or	arg04, #2
165a8     00 12 06 F6 | 	mov	arg01, #0
165ac     00 14 06 F6 | 	mov	arg02, #0
165b0     BC 2E B0 FD | 	call	#__system__pack_0372
165b4     84 00 90 FD | 	jmp	#LR__2294
165b8                 | LR__2286
165b8     00 24 0E F2 | 	cmp	local04, #0 wz
165bc     20 00 90 AD |  if_e	jmp	#LR__2289
165c0     01 24 66 F0 | 	shl	local04, #1
165c4     97 0A 48 FB | 	callpa	#(@LR__2288-@LR__2287)>>2,fcache_load_ptr_
165c8                 | LR__2287
165c8     00 40 00 FF 
165cc     00 24 16 F2 | 	cmp	local04, ##8388608 wc
165d0     01 26 86 C1 |  if_b	sub	local05, #1
165d4     01 24 66 C0 |  if_b	shl	local04, #1
165d8     EC FF 9F CD |  if_b	jmp	#LR__2287
165dc                 | LR__2288
165dc     D0 FE 9F FD | 	jmp	#LR__2280
165e0                 | LR__2289
165e0     08 22 46 F5 | 	or	local03, #8
165e4     00 12 06 F6 | 	mov	arg01, #0
165e8     00 14 06 F6 | 	mov	arg02, #0
165ec     00 16 06 F6 | 	mov	arg03, #0
165f0     11 19 02 F6 | 	mov	arg04, local03
165f4     78 2E B0 FD | 	call	#__system__pack_0372
165f8     40 00 90 FD | 	jmp	#LR__2294
165fc                 | LR__2290
165fc     00 2A 0E F2 | 	cmp	local07, #0 wz
16600     20 00 90 AD |  if_e	jmp	#LR__2293
16604     01 2A 66 F0 | 	shl	local07, #1
16608     97 0A 48 FB | 	callpa	#(@LR__2292-@LR__2291)>>2,fcache_load_ptr_
1660c                 | LR__2291
1660c     00 40 00 FF 
16610     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
16614     01 2C 86 C1 |  if_b	sub	local08, #1
16618     01 2A 66 C0 |  if_b	shl	local07, #1
1661c     EC FF 9F CD |  if_b	jmp	#LR__2291
16620                 | LR__2292
16620     98 FE 9F FD | 	jmp	#LR__2281
16624                 | LR__2293
16624     08 22 46 F5 | 	or	local03, #8
16628     00 12 06 F6 | 	mov	arg01, #0
1662c     00 14 06 F6 | 	mov	arg02, #0
16630     00 16 06 F6 | 	mov	arg03, #0
16634     11 19 02 F6 | 	mov	arg04, local03
16638     34 2E B0 FD | 	call	#__system__pack_0372
1663c                 | LR__2294
1663c     A7 F0 03 F6 | 	mov	ptra, fp
16640     B2 00 A0 FD | 	call	#popregs_
16644                 | __system___float_mul_ret
16644     2D 00 64 FD | 	ret
16648                 | 
16648                 | __system___float_div
16648     0E 4A 05 F6 | 	mov	COUNT_, #14
1664c     A8 00 A0 FD | 	call	#pushregs_
16650     09 23 02 F6 | 	mov	local03, arg01
16654     0A 25 02 F6 | 	mov	local04, arg02
16658     11 27 02 F6 | 	mov	local05, local03
1665c     13 29 02 F6 | 	mov	local06, local05
16660     16 28 46 F7 | 	zerox	local06, #22
16664     13 2B 02 F6 | 	mov	local07, local05
16668     01 2A 66 F0 | 	shl	local07, #1
1666c     18 2A 46 F0 | 	shr	local07, #24
16670     1F 26 46 F0 | 	shr	local05, #31
16674     12 FB 01 F6 | 	mov	result1, local04
16678     FD 2C 02 F6 | 	mov	local08, result1
1667c     16 2F 02 F6 | 	mov	local09, local08
16680     16 2E 46 F7 | 	zerox	local09, #22
16684     16 31 02 F6 | 	mov	local10, local08
16688     01 30 66 F0 | 	shl	local10, #1
1668c     18 30 46 F0 | 	shr	local10, #24
16690     1F 2C 46 F0 | 	shr	local08, #31
16694     16 27 62 F5 | 	xor	local05, local08
16698     FF 2A 0E F2 | 	cmp	local07, #255 wz
1669c     D4 00 90 AD |  if_e	jmp	#LR__2305
166a0     FF 30 0E F2 | 	cmp	local10, #255 wz
166a4     04 01 90 AD |  if_e	jmp	#LR__2306
166a8     00 2A 0E F2 | 	cmp	local07, #0 wz
166ac     24 01 90 AD |  if_e	jmp	#LR__2307
166b0     17 28 26 F4 | 	bith	local06, #23
166b4                 | LR__2300
166b4     00 30 0E F2 | 	cmp	local10, #0 wz
166b8     70 01 90 AD |  if_e	jmp	#LR__2311
166bc     17 2E 26 F4 | 	bith	local09, #23
166c0                 | LR__2301
166c0     18 2B 82 F1 | 	sub	local07, local10
166c4     15 33 02 F6 | 	mov	local11, local07
166c8     14 13 02 F6 | 	mov	arg01, local06
166cc     02 12 46 F0 | 	shr	arg01, #2
166d0     1E 28 66 F0 | 	shl	local06, #30
166d4     14 15 02 F6 | 	mov	arg02, local06
166d8     17 17 02 F6 | 	mov	arg03, local09
166dc     28 12 62 FD | 	setq	arg01
166e0     0B 15 12 FD | 	qdiv	arg02, arg03
166e4     00 34 06 F6 | 	mov	local12, #0
166e8     18 1E 62 FD | 	getqx	local01
166ec     19 FC 61 FD | 	getqy	result2
166f0     FE 20 02 F6 | 	mov	local02, result2
166f4     0F 37 02 F6 | 	mov	local13, local01
166f8     00 20 4E F2 | 	cmps	local02, #0 wz
166fc     1B 39 02 F6 | 	mov	local14, local13
16700     19 38 66 F0 | 	shl	local14, #25
16704     01 34 06 56 |  if_ne	mov	local12, #1
16708     1A 39 42 F5 | 	or	local14, local12
1670c     07 36 46 F0 | 	shr	local13, #7
16710     00 80 00 FF 
16714     00 36 16 F2 | 	cmp	local13, ##16777216 wc
16718     1C 00 90 CD |  if_b	jmp	#LR__2302
1671c     01 32 06 F1 | 	add	local11, #1
16720     01 38 46 F0 | 	shr	local14, #1
16724     1B 35 02 F6 | 	mov	local12, local13
16728     1F 34 66 F0 | 	shl	local12, #31
1672c     1A 39 42 F5 | 	or	local14, local12
16730     01 36 46 F0 | 	shr	local13, #1
16734     24 00 90 FD | 	jmp	#LR__2304
16738                 | LR__2302
16738     00 40 00 FF 
1673c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
16740     18 00 90 3D |  if_ae	jmp	#LR__2303
16744     01 32 86 F1 | 	sub	local11, #1
16748     01 36 66 F0 | 	shl	local13, #1
1674c     1C 35 02 F6 | 	mov	local12, local14
16750     1F 34 46 F0 | 	shr	local12, #31
16754     1A 37 42 F5 | 	or	local13, local12
16758     01 38 66 F0 | 	shl	local14, #1
1675c                 | LR__2303
1675c                 | LR__2304
1675c     1B 13 02 F6 | 	mov	arg01, local13
16760     1C 15 02 F6 | 	mov	arg02, local14
16764     19 17 02 F6 | 	mov	arg03, local11
16768     13 19 02 F6 | 	mov	arg04, local05
1676c     00 2D B0 FD | 	call	#__system__pack_0372
16770     F8 00 90 FD | 	jmp	#LR__2315
16774                 | LR__2305
16774     00 28 0E F2 | 	cmp	local06, #0 wz
16778     11 FB 01 56 |  if_ne	mov	result1, local03
1677c     EC 00 90 5D |  if_ne	jmp	#LR__2315
16780     FF 30 0E F2 | 	cmp	local10, #255 wz
16784     00 F8 3F AF 
16788     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1678c     DC 00 90 AD |  if_e	jmp	#LR__2315
16790     02 26 46 F5 | 	or	local05, #2
16794     00 12 06 F6 | 	mov	arg01, #0
16798     00 14 06 F6 | 	mov	arg02, #0
1679c     15 17 02 F6 | 	mov	arg03, local07
167a0     13 19 02 F6 | 	mov	arg04, local05
167a4     C8 2C B0 FD | 	call	#__system__pack_0372
167a8     C0 00 90 FD | 	jmp	#LR__2315
167ac                 | LR__2306
167ac     00 2E 0E F2 | 	cmp	local09, #0 wz
167b0     12 FB 01 56 |  if_ne	mov	result1, local04
167b4     B4 00 90 5D |  if_ne	jmp	#LR__2315
167b8     13 19 02 F6 | 	mov	arg04, local05
167bc     08 18 46 F5 | 	or	arg04, #8
167c0     00 12 06 F6 | 	mov	arg01, #0
167c4     00 14 06 F6 | 	mov	arg02, #0
167c8     00 16 06 F6 | 	mov	arg03, #0
167cc     A0 2C B0 FD | 	call	#__system__pack_0372
167d0     98 00 90 FD | 	jmp	#LR__2315
167d4                 | LR__2307
167d4     00 28 0E F2 | 	cmp	local06, #0 wz
167d8     20 00 90 AD |  if_e	jmp	#LR__2310
167dc     01 28 66 F0 | 	shl	local06, #1
167e0     97 0A 48 FB | 	callpa	#(@LR__2309-@LR__2308)>>2,fcache_load_ptr_
167e4                 | LR__2308
167e4     00 40 00 FF 
167e8     00 28 16 F2 | 	cmp	local06, ##8388608 wc
167ec     01 2A 86 C1 |  if_b	sub	local07, #1
167f0     01 28 66 C0 |  if_b	shl	local06, #1
167f4     EC FF 9F CD |  if_b	jmp	#LR__2308
167f8                 | LR__2309
167f8     B8 FE 9F FD | 	jmp	#LR__2300
167fc                 | LR__2310
167fc     00 30 0E F2 | 	cmp	local10, #0 wz
16800     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
16804     00 F8 3F AF 
16808     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1680c     5C 00 90 AD |  if_e	jmp	#LR__2315
16810     13 19 02 F6 | 	mov	arg04, local05
16814     08 18 46 F5 | 	or	arg04, #8
16818     00 12 06 F6 | 	mov	arg01, #0
1681c     00 14 06 F6 | 	mov	arg02, #0
16820     00 16 06 F6 | 	mov	arg03, #0
16824     48 2C B0 FD | 	call	#__system__pack_0372
16828     40 00 90 FD | 	jmp	#LR__2315
1682c                 | LR__2311
1682c     00 2E 0E F2 | 	cmp	local09, #0 wz
16830     20 00 90 AD |  if_e	jmp	#LR__2314
16834     01 2E 66 F0 | 	shl	local09, #1
16838     97 0A 48 FB | 	callpa	#(@LR__2313-@LR__2312)>>2,fcache_load_ptr_
1683c                 | LR__2312
1683c     00 40 00 FF 
16840     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
16844     01 30 86 C1 |  if_b	sub	local10, #1
16848     01 2E 66 C0 |  if_b	shl	local09, #1
1684c     EC FF 9F CD |  if_b	jmp	#LR__2312
16850                 | LR__2313
16850     6C FE 9F FD | 	jmp	#LR__2301
16854                 | LR__2314
16854     02 26 46 F5 | 	or	local05, #2
16858     00 12 06 F6 | 	mov	arg01, #0
1685c     00 14 06 F6 | 	mov	arg02, #0
16860     00 16 06 F6 | 	mov	arg03, #0
16864     13 19 02 F6 | 	mov	arg04, local05
16868     04 2C B0 FD | 	call	#__system__pack_0372
1686c                 | LR__2315
1686c     A7 F0 03 F6 | 	mov	ptra, fp
16870     B2 00 A0 FD | 	call	#popregs_
16874                 | __system___float_div_ret
16874     2D 00 64 FD | 	ret
16878                 | 
16878                 | __system___float_cmp
16878     00 C0 3F FF 
1687c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
16880     00 C0 3F CF 
16884     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
16888     0B FB 01 36 |  if_ae	mov	result1, arg03
1688c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
16890     00 C0 7F FF 
16894     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
16898     00 C0 7F CF 
1689c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
168a0     0B FB 01 36 |  if_ae	mov	result1, arg03
168a4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
168a8     00 12 56 F2 | 	cmps	arg01, #0 wc
168ac     2C 00 90 3D |  if_ae	jmp	#LR__2320
168b0     00 14 56 F2 | 	cmps	arg02, #0 wc
168b4     0A FB 01 C6 |  if_b	mov	result1, arg02
168b8     09 FB 81 C1 |  if_b	sub	result1, arg01
168bc     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
168c0     00 14 0E F2 | 	cmp	arg02, #0 wz
168c4     00 00 40 AF 
168c8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
168cc     00 FA 05 A6 |  if_e	mov	result1, #0
168d0     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
168d4     01 FA 65 F6 | 	neg	result1, #1
168d8     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
168dc                 | LR__2320
168dc     00 14 56 F2 | 	cmps	arg02, #0 wc
168e0     1C 00 90 3D |  if_ae	jmp	#LR__2321
168e4     00 12 0E F2 | 	cmp	arg01, #0 wz
168e8     00 00 40 AF 
168ec     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
168f0     00 FA 05 A6 |  if_e	mov	result1, #0
168f4     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
168f8     01 FA 05 F6 | 	mov	result1, #1
168fc     08 00 90 FD | 	jmp	#__system___float_cmp_ret
16900                 | LR__2321
16900     0A 13 82 F1 | 	sub	arg01, arg02
16904     09 FB 01 F6 | 	mov	result1, arg01
16908                 | __system___float_cmp_ret
16908     2D 00 64 FD | 	ret
1690c                 | 
1690c                 | __system___float_tointeger
1690c     02 4A 05 F6 | 	mov	COUNT_, #2
16910     A8 00 A0 FD | 	call	#pushregs_
16914     50 00 B0 FD | 	call	#__system___float_Unpack
16918     FF FF 7F FF 
1691c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
16920     34 00 90 CD |  if_b	jmp	#LR__2330
16924     1F FC 55 F2 | 	cmps	result2, #31 wc
16928     2C 00 90 3D |  if_ae	jmp	#LR__2330
1692c     02 FE 65 F0 | 	shl	result3, #2
16930     1E 1E 06 F6 | 	mov	local01, #30
16934     FE 1E 82 F1 | 	sub	local01, result2
16938     0F FF 41 F0 | 	shr	result3, local01
1693c     FF 20 02 F6 | 	mov	local02, result3
16940     0A 21 02 F1 | 	add	local02, arg02
16944     01 20 46 F0 | 	shr	local02, #1
16948     00 FA 0D F2 | 	cmp	result1, #0 wz
1694c     10 21 62 56 |  if_ne	neg	local02, local02
16950     10 FB 01 F6 | 	mov	result1, local02
16954     04 00 90 FD | 	jmp	#LR__2331
16958                 | LR__2330
16958     00 FA 05 F6 | 	mov	result1, #0
1695c                 | LR__2331
1695c     A7 F0 03 F6 | 	mov	ptra, fp
16960     B2 00 A0 FD | 	call	#popregs_
16964                 | __system___float_tointeger_ret
16964     2D 00 64 FD | 	ret
16968                 | 
16968                 | __system___float_Unpack
16968     09 01 02 F6 | 	mov	_var01, arg01
1696c     1F 00 46 F0 | 	shr	_var01, #31
16970     09 03 02 F6 | 	mov	_var02, arg01
16974     01 02 66 F0 | 	shl	_var02, #1
16978     18 02 4E F0 | 	shr	_var02, #24 wz
1697c     17 13 06 F4 | 	bitl	arg01, #279
16980     06 12 66 50 |  if_ne	shl	arg01, #6
16984     1D 12 26 54 |  if_ne	bith	arg01, #29
16988     1C 00 90 5D |  if_ne	jmp	#LR__2340
1698c     09 05 92 F7 | 	encod	_var03, arg01 wc
16990     01 04 06 C1 |  if_b	add	_var03, #1
16994     17 04 86 F1 | 	sub	_var03, #23
16998     02 03 02 F6 | 	mov	_var02, _var03
1699c     07 FC 05 F6 | 	mov	result2, #7
169a0     02 FD 81 F1 | 	sub	result2, _var03
169a4     FE 12 62 F0 | 	shl	arg01, result2
169a8                 | LR__2340
169a8     7F 02 86 F1 | 	sub	_var02, #127
169ac     09 FF 01 F6 | 	mov	result3, arg01
169b0     00 FB 01 F6 | 	mov	result1, _var01
169b4     01 FD 01 F6 | 	mov	result2, _var02
169b8                 | __system___float_Unpack_ret
169b8     2D 00 64 FD | 	ret
169bc                 | 
169bc                 | __system___float_Pack
169bc     00 00 06 F6 | 	mov	_var01, #0
169c0     00 16 0E F2 | 	cmp	arg03, #0 wz
169c4     8C 00 90 AD |  if_e	jmp	#LR__2351
169c8     0B 03 92 F7 | 	encod	_var02, arg03 wc
169cc     01 02 06 C1 |  if_b	add	_var02, #1
169d0     21 00 06 F6 | 	mov	_var01, #33
169d4     01 01 82 F1 | 	sub	_var01, _var02
169d8     00 17 62 F0 | 	shl	arg03, _var01
169dc     03 02 06 F6 | 	mov	_var02, #3
169e0     00 03 82 F1 | 	sub	_var02, _var01
169e4     01 15 02 F1 | 	add	arg02, _var02
169e8     0A 05 02 F6 | 	mov	_var03, arg02
169ec     00 17 06 F1 | 	add	arg03, #256
169f0     0B 03 02 F6 | 	mov	_var02, arg03
169f4     FF 02 2E F5 | 	andn	_var02, #255 wz
169f8     01 04 06 A1 |  if_e	add	_var03, #1
169fc     7F 04 06 F1 | 	add	_var03, #127
16a00     FF FF 7F FF 
16a04     E9 05 46 F3 | 	fges	_var03, ##-23
16a08     FF 04 66 F3 | 	fles	_var03, #255
16a0c     01 04 56 F2 | 	cmps	_var03, #1 wc
16a10     1C 00 90 3D |  if_ae	jmp	#LR__2350
16a14     01 16 46 F0 | 	shr	arg03, #1
16a18     1F 02 C6 F9 | 	decod	_var02, #31
16a1c     0B 03 02 F1 | 	add	_var02, arg03
16a20     02 05 62 F6 | 	neg	_var03, _var03
16a24     02 03 42 F0 | 	shr	_var02, _var03
16a28     01 17 02 F6 | 	mov	arg03, _var02
16a2c     00 04 06 F6 | 	mov	_var03, #0
16a30                 | LR__2350
16a30     09 FB 01 F6 | 	mov	result1, arg01
16a34     1F FA 65 F0 | 	shl	result1, #31
16a38     02 03 02 F6 | 	mov	_var02, _var03
16a3c     17 02 66 F0 | 	shl	_var02, #23
16a40     01 FB 41 F5 | 	or	result1, _var02
16a44     0B 07 02 F6 | 	mov	_var04, arg03
16a48     09 06 46 F0 | 	shr	_var04, #9
16a4c     03 FB 41 F5 | 	or	result1, _var04
16a50     04 00 90 FD | 	jmp	#__system___float_Pack_ret
16a54                 | LR__2351
16a54     00 FB 01 F6 | 	mov	result1, _var01
16a58                 | __system___float_Pack_ret
16a58     2D 00 64 FD | 	ret
16a5c                 | 
16a5c                 | __system___basic_print_float
16a5c     05 4A 05 F6 | 	mov	COUNT_, #5
16a60     A8 00 A0 FD | 	call	#pushregs_
16a64     09 1F 02 F6 | 	mov	local01, arg01
16a68     0A 21 02 F6 | 	mov	local02, arg02
16a6c     0B 23 0A F6 | 	mov	local03, arg03 wz
16a70     0C 25 02 F6 | 	mov	local04, arg04
16a74     14 00 90 5D |  if_ne	jmp	#LR__2360
16a78     23 24 0E F2 | 	cmp	local04, #35 wz
16a7c     80 02 10 AF 
16a80     00 26 06 A6 |  if_e	mov	local05, ##537198592
16a84     1D 26 C6 59 |  if_ne	decod	local05, #29
16a88     13 23 02 F6 | 	mov	local03, local05
16a8c                 | LR__2360
16a8c     0F 13 02 F6 | 	mov	arg01, local01
16a90     04 25 B0 FD | 	call	#__system___gettxfunc
16a94     FD 26 0A F6 | 	mov	local05, result1 wz
16a98     00 FA 05 A6 |  if_e	mov	result1, #0
16a9c     13 13 02 56 |  if_ne	mov	arg01, local05
16aa0     11 15 02 56 |  if_ne	mov	arg02, local03
16aa4     10 17 02 56 |  if_ne	mov	arg03, local02
16aa8     12 19 02 56 |  if_ne	mov	arg04, local04
16aac     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
16ab0     A7 F0 03 F6 | 	mov	ptra, fp
16ab4     B2 00 A0 FD | 	call	#popregs_
16ab8                 | __system___basic_print_float_ret
16ab8     2D 00 64 FD | 	ret
16abc                 | 
16abc                 | __system____builtin_atoi
16abc     07 4A 05 F6 | 	mov	COUNT_, #7
16ac0     A8 00 A0 FD | 	call	#pushregs_
16ac4                 | __system____builtin_atoi_enter
16ac4     09 1F 02 F6 | 	mov	local01, arg01
16ac8     0A 21 02 F6 | 	mov	local02, arg02
16acc     00 22 06 F6 | 	mov	local03, #0
16ad0     00 24 06 F6 | 	mov	local04, #0
16ad4     00 26 06 F6 | 	mov	local05, #0
16ad8     97 08 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
16adc                 | LR__2370
16adc     0F 29 C2 FA | 	rdbyte	local06, local01
16ae0     20 28 0E F2 | 	cmp	local06, #32 wz
16ae4     01 1E 06 A1 |  if_e	add	local01, #1
16ae8     F0 FF 9F AD |  if_e	jmp	#LR__2370
16aec                 | LR__2371
16aec     0F 2B C2 FA | 	rdbyte	local07, local01
16af0                 | LR__2372
16af0     2D 2A 0E F2 | 	cmp	local07, #45 wz
16af4     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
16af8     18 00 90 5D |  if_ne	jmp	#LR__2373
16afc     01 1E 06 F1 | 	add	local01, #1
16b00     2D 2A 0E F2 | 	cmp	local07, #45 wz
16b04     01 28 06 A6 |  if_e	mov	local06, #1
16b08     14 27 C2 A2 |  if_e	subr	local05, local06
16b0c     0F 2B C2 FA | 	rdbyte	local07, local01
16b10     DC FF 9F FD | 	jmp	#LR__2372
16b14                 | LR__2373
16b14     97 48 48 FB | 	callpa	#(@LR__2381-@LR__2374)>>2,fcache_load_ptr_
16b18                 | LR__2374
16b18                 | LR__2375
16b18     0F 2B C2 FA | 	rdbyte	local07, local01
16b1c     5F 2A 0E F2 | 	cmp	local07, #95 wz
16b20     01 1E 06 F1 | 	add	local01, #1
16b24     F0 FF 9F AD |  if_e	jmp	#LR__2375
16b28     30 2A 0E F2 | 	cmp	local07, #48 wz
16b2c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
16b30     00 24 06 A6 |  if_e	mov	local04, #0
16b34     60 00 90 AD |  if_e	jmp	#LR__2380
16b38     31 2A 56 F2 | 	cmps	local07, #49 wc
16b3c     18 00 90 CD |  if_b	jmp	#LR__2376
16b40     3A 2A 56 F2 | 	cmps	local07, #58 wc
16b44     15 25 02 C6 |  if_b	mov	local04, local07
16b48     30 24 86 C1 |  if_b	sub	local04, #48
16b4c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
16b50     0A 20 06 86 |  if_c_and_z	mov	local02, #10
16b54     40 00 90 CD |  if_b	jmp	#LR__2379
16b58                 | LR__2376
16b58     0B 20 56 F2 | 	cmps	local02, #11 wc
16b5c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
16b60     14 00 90 CD |  if_b	jmp	#LR__2377
16b64     67 2A 56 F2 | 	cmps	local07, #103 wc
16b68     61 2A 86 C1 |  if_b	sub	local07, #97
16b6c     0A 24 06 C6 |  if_b	mov	local04, #10
16b70     15 25 02 C1 |  if_b	add	local04, local07
16b74     20 00 90 CD |  if_b	jmp	#LR__2378
16b78                 | LR__2377
16b78     0B 20 56 F2 | 	cmps	local02, #11 wc
16b7c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
16b80     24 00 90 CD |  if_b	jmp	#LR__2382
16b84     47 2A 56 F2 | 	cmps	local07, #71 wc
16b88     41 2A 86 C1 |  if_b	sub	local07, #65
16b8c     0A 24 06 C6 |  if_b	mov	local04, #10
16b90     15 25 02 C1 |  if_b	add	local04, local07
16b94     10 00 90 3D |  if_ae	jmp	#LR__2382
16b98                 | LR__2378
16b98                 | LR__2379
16b98                 | LR__2380
16b98     11 21 02 FD | 	qmul	local02, local03
16b9c     18 22 62 FD | 	getqx	local03
16ba0     12 23 02 F1 | 	add	local03, local04
16ba4     70 FF 9F FD | 	jmp	#LR__2374
16ba8                 | LR__2381
16ba8                 | LR__2382
16ba8     00 20 0E F2 | 	cmp	local02, #0 wz
16bac     64 00 90 5D |  if_ne	jmp	#LR__2388
16bb0     78 2A 0E F2 | 	cmp	local07, #120 wz
16bb4     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
16bb8     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
16bbc     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
16bc0     14 00 90 5D |  if_ne	jmp	#LR__2383
16bc4     0F 13 02 F6 | 	mov	arg01, local01
16bc8     10 14 06 F6 | 	mov	arg02, #16
16bcc     EC FE BF FD | 	call	#__system____builtin_atoi
16bd0     FD 22 02 F6 | 	mov	local03, result1
16bd4     3C 00 90 FD | 	jmp	#LR__2387
16bd8                 | LR__2383
16bd8     62 2A 0E F2 | 	cmp	local07, #98 wz
16bdc     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
16be0     14 00 90 5D |  if_ne	jmp	#LR__2384
16be4     0F 13 02 F6 | 	mov	arg01, local01
16be8     02 14 06 F6 | 	mov	arg02, #2
16bec     CC FE BF FD | 	call	#__system____builtin_atoi
16bf0     FD 22 02 F6 | 	mov	local03, result1
16bf4     1C 00 90 FD | 	jmp	#LR__2386
16bf8                 | LR__2384
16bf8     6F 2A 0E F2 | 	cmp	local07, #111 wz
16bfc     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
16c00     10 00 90 5D |  if_ne	jmp	#LR__2385
16c04     0F 13 02 F6 | 	mov	arg01, local01
16c08     08 14 06 F6 | 	mov	arg02, #8
16c0c     AC FE BF FD | 	call	#__system____builtin_atoi
16c10     FD 22 02 F6 | 	mov	local03, result1
16c14                 | LR__2385
16c14                 | LR__2386
16c14                 | LR__2387
16c14                 | LR__2388
16c14     00 26 0E F2 | 	cmp	local05, #0 wz
16c18     11 23 62 56 |  if_ne	neg	local03, local03
16c1c     11 FB 01 F6 | 	mov	result1, local03
16c20     A7 F0 03 F6 | 	mov	ptra, fp
16c24     B2 00 A0 FD | 	call	#popregs_
16c28                 | __system____builtin_atoi_ret
16c28     2D 00 64 FD | 	ret
16c2c                 | 
16c2c                 | __system____builtin_atof
16c2c     07 4A 05 F6 | 	mov	COUNT_, #7
16c30     A8 00 A0 FD | 	call	#pushregs_
16c34     09 1F 02 F6 | 	mov	local01, arg01
16c38     00 20 06 F6 | 	mov	local02, #0
16c3c     00 22 06 F6 | 	mov	local03, #0
16c40     00 24 06 F6 | 	mov	local04, #0
16c44     00 26 06 F6 | 	mov	local05, #0
16c48     97 08 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
16c4c                 | LR__2390
16c4c     0F 17 C2 FA | 	rdbyte	arg03, local01
16c50     20 16 0E F2 | 	cmp	arg03, #32 wz
16c54     01 1E 06 A1 |  if_e	add	local01, #1
16c58     F0 FF 9F AD |  if_e	jmp	#LR__2390
16c5c                 | LR__2391
16c5c     0F 29 C2 FA | 	rdbyte	local06, local01
16c60                 | LR__2392
16c60     2B 28 0E F2 | 	cmp	local06, #43 wz
16c64     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
16c68     14 00 90 5D |  if_ne	jmp	#LR__2393
16c6c     2D 28 0E F2 | 	cmp	local06, #45 wz
16c70     1F 24 E6 A4 |  if_e	bitnot	local04, #31
16c74     01 1E 06 F1 | 	add	local01, #1
16c78     0F 29 C2 FA | 	rdbyte	local06, local01
16c7c     E0 FF 9F FD | 	jmp	#LR__2392
16c80                 | LR__2393
16c80                 | LR__2394
16c80     97 08 48 FB | 	callpa	#(@LR__2396-@LR__2395)>>2,fcache_load_ptr_
16c84                 | LR__2395
16c84     0F 29 C2 FA | 	rdbyte	local06, local01
16c88     5F 28 0E F2 | 	cmp	local06, #95 wz
16c8c     01 1E 06 F1 | 	add	local01, #1
16c90     F0 FF 9F AD |  if_e	jmp	#LR__2395
16c94                 | LR__2396
16c94     00 28 0E F2 | 	cmp	local06, #0 wz
16c98     5C 00 90 AD |  if_e	jmp	#LR__2398
16c9c     30 28 56 F2 | 	cmps	local06, #48 wc
16ca0     44 00 90 CD |  if_b	jmp	#LR__2397
16ca4     3A 28 56 F2 | 	cmps	local06, #58 wc
16ca8     3C 00 90 3D |  if_ae	jmp	#LR__2397
16cac     10 13 02 F6 | 	mov	arg01, local02
16cb0     00 90 20 FF 
16cb4     00 14 06 F6 | 	mov	arg02, ##1092616192
16cb8     88 F7 BF FD | 	call	#__system___float_mul
16cbc     FD 20 02 F6 | 	mov	local02, result1
16cc0     30 28 86 F1 | 	sub	local06, #48
16cc4     14 13 02 F6 | 	mov	arg01, local06
16cc8     4C F4 BF FD | 	call	#__system___float_fromuns
16ccc     FD 14 02 F6 | 	mov	arg02, result1
16cd0     10 13 02 F6 | 	mov	arg01, local02
16cd4     74 F4 BF FD | 	call	#__system___float_add
16cd8     FD 20 02 F6 | 	mov	local02, result1
16cdc     00 26 0E F2 | 	cmp	local05, #0 wz
16ce0     01 22 86 51 |  if_ne	sub	local03, #1
16ce4     98 FF 9F FD | 	jmp	#LR__2394
16ce8                 | LR__2397
16ce8     2E 28 0E F2 | 	cmp	local06, #46 wz
16cec     00 26 0E A2 |  if_e	cmp	local05, #0 wz
16cf0     01 26 06 A6 |  if_e	mov	local05, #1
16cf4     88 FF 9F AD |  if_e	jmp	#LR__2394
16cf8                 | LR__2398
16cf8     45 28 0E F2 | 	cmp	local06, #69 wz
16cfc     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
16d00     18 00 90 5D |  if_ne	jmp	#LR__2399
16d04     0F 13 02 F6 | 	mov	arg01, local01
16d08     00 14 06 F6 | 	mov	arg02, #0
16d0c     AC FD BF FD | 	call	#__system____builtin_atoi
16d10     11 FB 01 F1 | 	add	result1, local03
16d14     FD 2A 02 F6 | 	mov	local07, result1
16d18     04 00 90 FD | 	jmp	#LR__2400
16d1c                 | LR__2399
16d1c     11 2B 02 F6 | 	mov	local07, local03
16d20                 | LR__2400
16d20     15 17 02 F6 | 	mov	arg03, local07
16d24     10 13 02 F6 | 	mov	arg01, local02
16d28     00 90 20 FF 
16d2c     00 14 06 F6 | 	mov	arg02, ##1092616192
16d30     44 04 B0 FD | 	call	#__system___float_pow_n
16d34     12 FB 61 F5 | 	xor	result1, local04
16d38     A7 F0 03 F6 | 	mov	ptra, fp
16d3c     B2 00 A0 FD | 	call	#popregs_
16d40                 | __system____builtin_atof_ret
16d40     2D 00 64 FD | 	ret
16d44                 | 
16d44                 | __system____builtin_ilogb
16d44     20 FC BF FD | 	call	#__system___float_Unpack
16d48     00 FE 0D F2 | 	cmp	result3, #0 wz
16d4c     00 00 40 AF 
16d50     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
16d54     24 00 90 AD |  if_e	jmp	#LR__2411
16d58     80 FC 0D F2 | 	cmp	result2, #128 wz
16d5c     18 00 90 5D |  if_ne	jmp	#LR__2410
16d60     00 00 10 FF 
16d64     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
16d68     1E FA CD A9 |  if_e	bmask	result1, #30
16d6c     0C 00 90 AD |  if_e	jmp	#LR__2411
16d70     1F FA C5 F9 | 	decod	result1, #31
16d74     04 00 90 FD | 	jmp	#LR__2411
16d78                 | LR__2410
16d78     FE FA 01 F6 | 	mov	result1, result2
16d7c                 | LR__2411
16d7c                 | __system____builtin_ilogb_ret
16d7c     2D 00 64 FD | 	ret
16d80                 | 
16d80                 | __system____builtin_sinf
16d80     03 4A 05 F6 | 	mov	COUNT_, #3
16d84     A8 00 A0 FD | 	call	#pushregs_
16d88     09 1F 02 F6 | 	mov	local01, arg01
16d8c     66 E6 1E FF 
16d90     CD 14 06 F6 | 	mov	arg02, ##1036831949
16d94     01 16 06 F6 | 	mov	arg03, #1
16d98     DC FA BF FD | 	call	#__system___float_cmp
16d9c     00 FA 55 F2 | 	cmps	result1, #0 wc
16da0     5C 00 90 3D |  if_ae	jmp	#LR__2420
16da4     0F 13 02 F6 | 	mov	arg01, local01
16da8     66 E6 5E FF 
16dac     CD 14 06 F6 | 	mov	arg02, ##-1110651699
16db0     01 16 66 F6 | 	neg	arg03, #1
16db4     C0 FA BF FD | 	call	#__system___float_cmp
16db8     01 FA 55 F2 | 	cmps	result1, #1 wc
16dbc     40 00 90 CD |  if_b	jmp	#LR__2420
16dc0     0F 13 02 F6 | 	mov	arg01, local01
16dc4     0F 15 02 F6 | 	mov	arg02, local01
16dc8     78 F6 BF FD | 	call	#__system___float_mul
16dcc     FD 12 02 F6 | 	mov	arg01, result1
16dd0     0F 15 02 F6 | 	mov	arg02, local01
16dd4     6C F6 BF FD | 	call	#__system___float_mul
16dd8     FD 12 02 F6 | 	mov	arg01, result1
16ddc     00 60 20 FF 
16de0     00 14 06 F6 | 	mov	arg02, ##1086324736
16de4     60 F8 BF FD | 	call	#__system___float_div
16de8     FD 14 02 F6 | 	mov	arg02, result1
16dec     0F 13 02 F6 | 	mov	arg01, local01
16df0     1F 14 E6 F4 | 	bitnot	arg02, #31
16df4     54 F3 BF FD | 	call	#__system___float_add
16df8     FD 20 02 F6 | 	mov	local02, result1
16dfc     54 00 90 FD | 	jmp	#LR__2421
16e00                 | LR__2420
16e00     0F 13 02 F6 | 	mov	arg01, local01
16e04     7C 91 26 FF 
16e08     83 15 06 F6 | 	mov	arg02, ##1294137731
16e0c     34 F6 BF FD | 	call	#__system___float_mul
16e10     FD 12 02 F6 | 	mov	arg01, result1
16e14     00 14 06 F6 | 	mov	arg02, #0
16e18     F0 FA BF FD | 	call	#__system___float_tointeger
16e1c     02 FA 65 F0 | 	shl	result1, #2
16e20     00 00 A0 FF 
16e24     FD 00 48 FD | 	qrotate	##1073741824, result1
16e28     19 12 62 FD | 	getqy	arg01
16e2c     09 13 52 F6 | 	abs	arg01, arg01 wc
16e30     1F 22 C6 C9 |  if_b	decod	local03, #31
16e34     00 22 06 36 |  if_ae	mov	local03, #0
16e38     DC F2 BF FD | 	call	#__system___float_fromuns
16e3c     11 FB 61 F5 | 	xor	result1, local03
16e40     FD 12 02 F6 | 	mov	arg01, result1
16e44     00 40 27 FF 
16e48     00 14 06 F6 | 	mov	arg02, ##1317011456
16e4c     F8 F7 BF FD | 	call	#__system___float_div
16e50     FD 20 02 F6 | 	mov	local02, result1
16e54                 | LR__2421
16e54     10 FB 01 F6 | 	mov	result1, local02
16e58     A7 F0 03 F6 | 	mov	ptra, fp
16e5c     B2 00 A0 FD | 	call	#popregs_
16e60                 | __system____builtin_sinf_ret
16e60     2D 00 64 FD | 	ret
16e64                 | 
16e64                 | __system____builtin_exp2f
16e64     04 4A 05 F6 | 	mov	COUNT_, #4
16e68     A8 00 A0 FD | 	call	#pushregs_
16e6c     09 1F 02 F6 | 	mov	local01, arg01
16e70     00 7F 21 FF 
16e74     00 14 06 F6 | 	mov	arg02, ##1123942400
16e78     01 16 66 F6 | 	neg	arg03, #1
16e7c     F8 F9 BF FD | 	call	#__system___float_cmp
16e80     00 FA 55 F2 | 	cmps	result1, #0 wc
16e84     00 C0 3F 3F 
16e88     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
16e8c     DC 00 90 3D |  if_ae	jmp	#LR__2431
16e90     0F 13 02 F6 | 	mov	arg01, local01
16e94     00 7F 61 FF 
16e98     00 14 06 F6 | 	mov	arg02, ##-1023541248
16e9c     01 16 06 F6 | 	mov	arg03, #1
16ea0     D4 F9 BF FD | 	call	#__system___float_cmp
16ea4     00 FA 55 F2 | 	cmps	result1, #0 wc
16ea8     00 FA 05 C6 |  if_b	mov	result1, #0
16eac     BC 00 90 CD |  if_b	jmp	#LR__2431
16eb0     0F 13 02 F6 | 	mov	arg01, local01
16eb4     00 14 06 F6 | 	mov	arg02, #0
16eb8     50 FA BF FD | 	call	#__system___float_tointeger
16ebc     FD 20 02 F6 | 	mov	local02, result1
16ec0     10 13 52 F6 | 	abs	arg01, local02 wc
16ec4     1F 22 C6 C9 |  if_b	decod	local03, #31
16ec8     00 22 06 36 |  if_ae	mov	local03, #0
16ecc     48 F2 BF FD | 	call	#__system___float_fromuns
16ed0     11 FB 61 F5 | 	xor	result1, local03
16ed4     FD 14 02 F6 | 	mov	arg02, result1
16ed8     0F 13 02 F6 | 	mov	arg01, local01
16edc     1F 14 E6 F4 | 	bitnot	arg02, #31
16ee0     68 F2 BF FD | 	call	#__system___float_add
16ee4     FD 24 02 F6 | 	mov	local04, result1
16ee8     12 13 02 F6 | 	mov	arg01, local04
16eec     00 14 06 F6 | 	mov	arg02, #0
16ef0     01 16 06 F6 | 	mov	arg03, #1
16ef4     80 F9 BF FD | 	call	#__system___float_cmp
16ef8     00 FA 55 F2 | 	cmps	result1, #0 wc
16efc     18 00 90 3D |  if_ae	jmp	#LR__2430
16f00     12 13 02 F6 | 	mov	arg01, local04
16f04     00 C0 1F FF 
16f08     00 14 06 F6 | 	mov	arg02, ##1065353216
16f0c     3C F2 BF FD | 	call	#__system___float_add
16f10     FD 24 02 F6 | 	mov	local04, result1
16f14     01 20 86 F1 | 	sub	local02, #1
16f18                 | LR__2430
16f18     7F 20 06 F1 | 	add	local02, #127
16f1c     17 20 66 F0 | 	shl	local02, #23
16f20     12 13 02 F6 | 	mov	arg01, local04
16f24     00 80 26 FF 
16f28     00 14 06 F6 | 	mov	arg02, ##1291845632
16f2c     14 F5 BF FD | 	call	#__system___float_mul
16f30     FD 12 02 F6 | 	mov	arg01, result1
16f34     00 14 06 F6 | 	mov	arg02, #0
16f38     D0 F9 BF FD | 	call	#__system___float_tointeger
16f3c     FD 24 0A F6 | 	mov	local04, result1 wz
16f40     10 FB 01 A6 |  if_e	mov	result1, local02
16f44     24 00 90 AD |  if_e	jmp	#LR__2431
16f48     3E 24 26 F4 | 	bith	local04, #62
16f4c     0F 24 62 FD | 	qexp	local04
16f50     10 13 02 F6 | 	mov	arg01, local02
16f54     18 14 62 FD | 	getqx	arg02
16f58     01 14 06 F1 | 	add	arg02, #1
16f5c     01 14 46 F0 | 	shr	arg02, #1
16f60     00 80 1F FF 
16f64     00 14 06 F1 | 	add	arg02, ##1056964608
16f68     D8 F4 BF FD | 	call	#__system___float_mul
16f6c                 | LR__2431
16f6c     A7 F0 03 F6 | 	mov	ptra, fp
16f70     B2 00 A0 FD | 	call	#popregs_
16f74                 | __system____builtin_exp2f_ret
16f74     2D 00 64 FD | 	ret
16f78                 | 
16f78                 | __system____builtin_log2f
16f78     06 4A 05 F6 | 	mov	COUNT_, #6
16f7c     A8 00 A0 FD | 	call	#pushregs_
16f80     09 1F 02 F6 | 	mov	local01, arg01
16f84     09 21 0A F6 | 	mov	local02, arg01 wz
16f88     00 00 40 5F 
16f8c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
16f90     00 40 00 AF 
16f94     00 FA 65 A6 |  if_e	neg	result1, ##8388608
16f98     08 01 90 AD |  if_e	jmp	#LR__2444
16f9c     00 20 56 F2 | 	cmps	local02, #0 wc
16fa0     00 E0 3F CF 
16fa4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
16fa8     F8 00 90 CD |  if_b	jmp	#LR__2444
16fac     0F 13 02 F6 | 	mov	arg01, local01
16fb0     00 90 20 FF 
16fb4     00 14 06 F6 | 	mov	arg02, ##1092616192
16fb8     01 16 06 F6 | 	mov	arg03, #1
16fbc     B8 F8 BF FD | 	call	#__system___float_cmp
16fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
16fc4     4D 2A 20 AF 
16fc8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
16fcc     D4 00 90 AD |  if_e	jmp	#LR__2444
16fd0     0F 13 02 F6 | 	mov	arg01, local01
16fd4     FC 16 20 FF 
16fd8     54 14 06 F6 | 	mov	arg02, ##1076754516
16fdc     01 16 06 F6 | 	mov	arg03, #1
16fe0     94 F8 BF FD | 	call	#__system___float_cmp
16fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
16fe8     55 DC 1F AF 
16fec     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
16ff0     B0 00 90 AD |  if_e	jmp	#LR__2444
16ff4     10 23 02 F6 | 	mov	local03, local02
16ff8     17 22 46 F0 | 	shr	local03, #23
16ffc     11 23 E2 F8 | 	getbyte	local03, local03, #0
17000     17 21 06 F4 | 	bitl	local02, #279
17004     10 25 02 F6 | 	mov	local04, local02
17008     FF 22 0E F2 | 	cmp	local03, #255 wz
1700c     1C 00 90 5D |  if_ne	jmp	#LR__2440
17010     00 24 0E F2 | 	cmp	local04, #0 wz
17014     00 C0 3F 5F 
17018     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1701c     00 E0 3F AF 
17020     00 26 06 A6 |  if_e	mov	local05, ##2143289344
17024     13 FB 01 F6 | 	mov	result1, local05
17028     78 00 90 FD | 	jmp	#LR__2444
1702c                 | LR__2440
1702c     00 22 0E F2 | 	cmp	local03, #0 wz
17030     17 24 26 54 |  if_ne	bith	local04, #23
17034     7F 22 86 51 |  if_ne	sub	local03, #127
17038     28 00 90 5D |  if_ne	jmp	#LR__2443
1703c     00 24 0E F2 | 	cmp	local04, #0 wz
17040     00 40 00 AF 
17044     00 FA 65 A6 |  if_e	neg	result1, ##8388608
17048     58 00 90 AD |  if_e	jmp	#LR__2444
1704c     7E 22 66 F6 | 	neg	local03, #126
17050     97 08 48 FB | 	callpa	#(@LR__2442-@LR__2441)>>2,fcache_load_ptr_
17054                 | LR__2441
17054     17 24 2E F4 | 	testbn	local04, #23 wz
17058     01 24 66 A0 |  if_e	shl	local04, #1
1705c     01 22 06 A1 |  if_e	add	local03, #1
17060     F0 FF 9F AD |  if_e	jmp	#LR__2441
17064                 | LR__2442
17064                 | LR__2443
17064     0E 24 62 FD | 	qlog	local04
17068     01 22 86 F1 | 	sub	local03, #1
1706c     11 13 52 F6 | 	abs	arg01, local03 wc
17070     1F 28 C6 C9 |  if_b	decod	local06, #31
17074     00 28 06 36 |  if_ae	mov	local06, #0
17078     18 26 62 FD | 	getqx	local05
1707c     9B 26 06 F4 | 	bitl	local05, #155
17080     08 26 06 F1 | 	add	local05, #8
17084     04 26 46 F0 | 	shr	local05, #4
17088     00 C0 1F FF 
1708c     00 26 06 F1 | 	add	local05, ##1065353216
17090     84 F0 BF FD | 	call	#__system___float_fromuns
17094     14 FB 61 F5 | 	xor	result1, local06
17098     FD 14 02 F6 | 	mov	arg02, result1
1709c     13 13 02 F6 | 	mov	arg01, local05
170a0     A8 F0 BF FD | 	call	#__system___float_add
170a4                 | LR__2444
170a4     A7 F0 03 F6 | 	mov	ptra, fp
170a8     B2 00 A0 FD | 	call	#popregs_
170ac                 | __system____builtin_log2f_ret
170ac     2D 00 64 FD | 	ret
170b0                 | 
170b0                 | __system____builtin_powf
170b0     04 4A 05 F6 | 	mov	COUNT_, #4
170b4     A8 00 A0 FD | 	call	#pushregs_
170b8     09 1F 02 F6 | 	mov	local01, arg01
170bc     0A 21 02 F6 | 	mov	local02, arg02
170c0     10 13 02 F6 | 	mov	arg01, local02
170c4     00 14 06 F6 | 	mov	arg02, #0
170c8     40 F8 BF FD | 	call	#__system___float_tointeger
170cc     FD 22 02 F6 | 	mov	local03, result1
170d0     11 13 52 F6 | 	abs	arg01, local03 wc
170d4     1F 24 C6 C9 |  if_b	decod	local04, #31
170d8     00 24 06 36 |  if_ae	mov	local04, #0
170dc     38 F0 BF FD | 	call	#__system___float_fromuns
170e0     12 FB 61 F5 | 	xor	result1, local04
170e4     FD 12 02 F6 | 	mov	arg01, result1
170e8     10 15 02 F6 | 	mov	arg02, local02
170ec     01 16 06 F6 | 	mov	arg03, #1
170f0     84 F7 BF FD | 	call	#__system___float_cmp
170f4     00 FA 0D F2 | 	cmp	result1, #0 wz
170f8     18 00 90 5D |  if_ne	jmp	#LR__2450
170fc     00 C0 1F FF 
17100     00 12 06 F6 | 	mov	arg01, ##1065353216
17104     0F 15 02 F6 | 	mov	arg02, local01
17108     11 17 02 F6 | 	mov	arg03, local03
1710c     68 00 B0 FD | 	call	#__system___float_pow_n
17110     58 00 90 FD | 	jmp	#LR__2451
17114                 | LR__2450
17114     0F 13 02 F6 | 	mov	arg01, local01
17118     00 14 06 F6 | 	mov	arg02, #0
1711c     01 16 06 F6 | 	mov	arg03, #1
17120     54 F7 BF FD | 	call	#__system___float_cmp
17124     00 FA 55 F2 | 	cmps	result1, #0 wc
17128     00 E0 3F CF 
1712c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
17130     38 00 90 CD |  if_b	jmp	#LR__2451
17134     0F 13 02 F6 | 	mov	arg01, local01
17138     00 14 06 F6 | 	mov	arg02, #0
1713c     01 16 06 F6 | 	mov	arg03, #1
17140     34 F7 BF FD | 	call	#__system___float_cmp
17144     00 FA 0D F2 | 	cmp	result1, #0 wz
17148     00 FA 05 A6 |  if_e	mov	result1, #0
1714c     1C 00 90 AD |  if_e	jmp	#LR__2451
17150     0F 13 02 F6 | 	mov	arg01, local01
17154     20 FE BF FD | 	call	#__system____builtin_log2f
17158     FD 12 02 F6 | 	mov	arg01, result1
1715c     10 15 02 F6 | 	mov	arg02, local02
17160     E0 F2 BF FD | 	call	#__system___float_mul
17164     FD 12 02 F6 | 	mov	arg01, result1
17168     F8 FC BF FD | 	call	#__system____builtin_exp2f
1716c                 | LR__2451
1716c     A7 F0 03 F6 | 	mov	ptra, fp
17170     B2 00 A0 FD | 	call	#popregs_
17174                 | __system____builtin_powf_ret
17174     2D 00 64 FD | 	ret
17178                 | 
17178                 | __system___float_pow_n
17178     05 4A 05 F6 | 	mov	COUNT_, #5
1717c     A8 00 A0 FD | 	call	#pushregs_
17180     09 1F 02 F6 | 	mov	local01, arg01
17184     0A 21 02 F6 | 	mov	local02, arg02
17188     0B 23 02 F6 | 	mov	local03, arg03
1718c     00 22 56 F2 | 	cmps	local03, #0 wc
17190     18 00 90 3D |  if_ae	jmp	#LR__2460
17194     01 24 06 F6 | 	mov	local04, #1
17198     11 23 62 F6 | 	neg	local03, local03
1719c     00 22 56 F2 | 	cmps	local03, #0 wc
171a0     00 FA 05 C6 |  if_b	mov	result1, #0
171a4     94 00 90 CD |  if_b	jmp	#LR__2468
171a8     04 00 90 FD | 	jmp	#LR__2461
171ac                 | LR__2460
171ac     00 24 06 F6 | 	mov	local04, #0
171b0                 | LR__2461
171b0     00 C0 1F FF 
171b4     00 26 06 F6 | 	mov	local05, ##1065353216
171b8                 | LR__2462
171b8     01 22 56 F2 | 	cmps	local03, #1 wc
171bc     30 00 90 CD |  if_b	jmp	#LR__2464
171c0     01 22 CE F7 | 	test	local03, #1 wz
171c4     10 00 90 AD |  if_e	jmp	#LR__2463
171c8     13 13 02 F6 | 	mov	arg01, local05
171cc     10 15 02 F6 | 	mov	arg02, local02
171d0     70 F2 BF FD | 	call	#__system___float_mul
171d4     FD 26 02 F6 | 	mov	local05, result1
171d8                 | LR__2463
171d8     01 22 C6 F0 | 	sar	local03, #1
171dc     10 13 02 F6 | 	mov	arg01, local02
171e0     10 15 02 F6 | 	mov	arg02, local02
171e4     5C F2 BF FD | 	call	#__system___float_mul
171e8     FD 20 02 F6 | 	mov	local02, result1
171ec     C8 FF 9F FD | 	jmp	#LR__2462
171f0                 | LR__2464
171f0     00 24 0E F2 | 	cmp	local04, #0 wz
171f4     14 00 90 AD |  if_e	jmp	#LR__2465
171f8     0F 13 02 F6 | 	mov	arg01, local01
171fc     13 15 02 F6 | 	mov	arg02, local05
17200     44 F4 BF FD | 	call	#__system___float_div
17204     FD 26 02 F6 | 	mov	local05, result1
17208     2C 00 90 FD | 	jmp	#LR__2467
1720c                 | LR__2465
1720c     0F 13 02 F6 | 	mov	arg01, local01
17210     00 C0 1F FF 
17214     00 14 06 F6 | 	mov	arg02, ##1065353216
17218     01 16 06 F6 | 	mov	arg03, #1
1721c     58 F6 BF FD | 	call	#__system___float_cmp
17220     00 FA 0D F2 | 	cmp	result1, #0 wz
17224     10 00 90 AD |  if_e	jmp	#LR__2466
17228     0F 13 02 F6 | 	mov	arg01, local01
1722c     13 15 02 F6 | 	mov	arg02, local05
17230     10 F2 BF FD | 	call	#__system___float_mul
17234     FD 26 02 F6 | 	mov	local05, result1
17238                 | LR__2466
17238                 | LR__2467
17238     13 FB 01 F6 | 	mov	result1, local05
1723c                 | LR__2468
1723c     A7 F0 03 F6 | 	mov	ptra, fp
17240     B2 00 A0 FD | 	call	#popregs_
17244                 | __system___float_pow_n_ret
17244     2D 00 64 FD | 	ret
17248                 | 
17248                 | __system___gc_ptrs
17248     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1724c     00 03 02 F6 | 	mov	_var02, _var01
17250     F3 01 00 FF 
17254     F8 03 06 F1 | 	add	_var02, ##255992
17258     00 FD 09 FB | 	rdlong	result2, _var01 wz
1725c     74 00 90 5D |  if_ne	jmp	#LR__2470
17260     01 FD 01 F6 | 	mov	result2, _var02
17264     00 FD 81 F1 | 	sub	result2, _var01
17268     00 03 58 FC | 	wrword	#1, _var01
1726c     00 FB 01 F6 | 	mov	result1, _var01
17270     02 FA 05 F1 | 	add	result1, #2
17274     36 00 80 FF 
17278     FD 20 59 FC | 	wrword	##27792, result1
1727c     00 FB 01 F6 | 	mov	result1, _var01
17280     04 FA 05 F1 | 	add	result1, #4
17284     FD 00 58 FC | 	wrword	#0, result1
17288     00 FB 01 F6 | 	mov	result1, _var01
1728c     06 FA 05 F1 | 	add	result1, #6
17290     FD 02 58 FC | 	wrword	#1, result1
17294     10 00 06 F1 | 	add	_var01, #16
17298     FE FC 51 F6 | 	abs	result2, result2 wc
1729c     04 FC 45 F0 | 	shr	result2, #4
172a0     FE FC 81 F6 | 	negc	result2, result2
172a4     00 FD 51 FC | 	wrword	result2, _var01
172a8     00 FD 01 F6 | 	mov	result2, _var01
172ac     02 FC 05 F1 | 	add	result2, #2
172b0     36 00 80 FF 
172b4     FE 1E 59 FC | 	wrword	##27791, result2
172b8     00 FD 01 F6 | 	mov	result2, _var01
172bc     04 FC 05 F1 | 	add	result2, #4
172c0     FE 00 58 FC | 	wrword	#0, result2
172c4     00 FD 01 F6 | 	mov	result2, _var01
172c8     06 FC 05 F1 | 	add	result2, #6
172cc     FE 00 58 FC | 	wrword	#0, result2
172d0     10 00 86 F1 | 	sub	_var01, #16
172d4                 | LR__2470
172d4     00 FB 01 F6 | 	mov	result1, _var01
172d8     01 FD 01 F6 | 	mov	result2, _var02
172dc                 | __system___gc_ptrs_ret
172dc     2D 00 64 FD | 	ret
172e0                 | 
172e0                 | __system___gc_tryalloc
172e0     0B 4A 05 F6 | 	mov	COUNT_, #11
172e4     A8 00 A0 FD | 	call	#pushregs_
172e8     09 1F 02 F6 | 	mov	local01, arg01
172ec     0A 21 02 F6 | 	mov	local02, arg02
172f0     54 FF BF FD | 	call	#__system___gc_ptrs
172f4     FD 22 02 F6 | 	mov	local03, result1
172f8     FE 24 02 F6 | 	mov	local04, result2
172fc     11 27 02 F6 | 	mov	local05, local03
17300     00 28 06 F6 | 	mov	local06, #0
17304     97 1E 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
17308                 | LR__2480
17308     13 2B 02 F6 | 	mov	local07, local05
1730c     06 26 06 F1 | 	add	local05, #6
17310     13 15 EA FA | 	rdword	arg02, local05 wz
17314     11 13 02 F6 | 	mov	arg01, local03
17318     00 FA 05 A6 |  if_e	mov	result1, #0
1731c     04 14 66 50 |  if_ne	shl	arg02, #4
17320     0A 13 02 51 |  if_ne	add	arg01, arg02
17324     09 FB 01 56 |  if_ne	mov	result1, arg01
17328     FD 26 0A F6 | 	mov	local05, result1 wz
1732c     13 29 E2 5A |  if_ne	rdword	local06, local05
17330     00 26 0E F2 | 	cmp	local05, #0 wz
17334     12 27 52 52 |  if_ne	cmps	local05, local04 wc
17338     08 00 90 1D |  if_a	jmp	#LR__2482
1733c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
17340     C4 FF 9F 1D |  if_a	jmp	#LR__2480
17344                 | LR__2481
17344                 | LR__2482
17344     00 26 0E F2 | 	cmp	local05, #0 wz
17348     13 FB 01 A6 |  if_e	mov	result1, local05
1734c     3C 01 90 AD |  if_e	jmp	#LR__2485
17350     13 FD 01 F6 | 	mov	result2, local05
17354     06 FC 05 F1 | 	add	result2, #6
17358     FE 2C E2 FA | 	rdword	local08, result2
1735c     14 1F 52 F2 | 	cmps	local01, local06 wc
17360     C0 00 90 3D |  if_ae	jmp	#LR__2484
17364     13 1F 52 FC | 	wrword	local01, local05
17368     13 13 02 F6 | 	mov	arg01, local05
1736c     0F 2D 02 F6 | 	mov	local08, local01
17370     04 2C 66 F0 | 	shl	local08, #4
17374     16 13 02 F1 | 	add	arg01, local08
17378     0F 29 82 F1 | 	sub	local06, local01
1737c     09 29 52 FC | 	wrword	local06, arg01
17380     09 2D 02 F6 | 	mov	local08, arg01
17384     02 2C 06 F1 | 	add	local08, #2
17388     36 00 80 FF 
1738c     16 1F 59 FC | 	wrword	##27791, local08
17390     13 15 0A F6 | 	mov	arg02, local05 wz
17394     00 FA 05 A6 |  if_e	mov	result1, #0
17398     11 15 82 51 |  if_ne	sub	arg02, local03
1739c     04 14 46 50 |  if_ne	shr	arg02, #4
173a0     0A FB 01 56 |  if_ne	mov	result1, arg02
173a4     09 2D 02 F6 | 	mov	local08, arg01
173a8     04 2C 06 F1 | 	add	local08, #4
173ac     16 FB 51 FC | 	wrword	result1, local08
173b0     13 2D 02 F6 | 	mov	local08, local05
173b4     06 2C 06 F1 | 	add	local08, #6
173b8     09 15 02 F6 | 	mov	arg02, arg01
173bc     16 2D E2 FA | 	rdword	local08, local08
173c0     06 14 06 F1 | 	add	arg02, #6
173c4     0A 2D 52 FC | 	wrword	local08, arg02
173c8     09 2F 02 F6 | 	mov	local09, arg01
173cc     17 15 0A F6 | 	mov	arg02, local09 wz
173d0     00 FA 05 A6 |  if_e	mov	result1, #0
173d4     11 15 82 51 |  if_ne	sub	arg02, local03
173d8     04 14 46 50 |  if_ne	shr	arg02, #4
173dc     0A FB 01 56 |  if_ne	mov	result1, arg02
173e0     FD 2C 02 F6 | 	mov	local08, result1
173e4     09 31 EA FA | 	rdword	local10, arg01 wz
173e8     00 FA 05 A6 |  if_e	mov	result1, #0
173ec     04 30 66 50 |  if_ne	shl	local10, #4
173f0     18 13 02 51 |  if_ne	add	arg01, local10
173f4     09 FB 01 56 |  if_ne	mov	result1, arg01
173f8     FD 32 0A F6 | 	mov	local11, result1 wz
173fc     24 00 90 AD |  if_e	jmp	#LR__2483
17400     12 33 52 F2 | 	cmps	local11, local04 wc
17404     1C 00 90 3D |  if_ae	jmp	#LR__2483
17408     17 15 0A F6 | 	mov	arg02, local09 wz
1740c     00 FA 05 A6 |  if_e	mov	result1, #0
17410     11 15 82 51 |  if_ne	sub	arg02, local03
17414     04 14 46 50 |  if_ne	shr	arg02, #4
17418     0A FB 01 56 |  if_ne	mov	result1, arg02
1741c     04 32 06 F1 | 	add	local11, #4
17420     19 FB 51 FC | 	wrword	result1, local11
17424                 | LR__2483
17424                 | LR__2484
17424     06 2A 06 F1 | 	add	local07, #6
17428     15 2D 52 FC | 	wrword	local08, local07
1742c     36 00 00 FF 
17430     80 2E 06 F6 | 	mov	local09, ##27776
17434     10 2F 42 F5 | 	or	local09, local02
17438     00 FA 05 F6 | 	mov	result1, #0
1743c     01 FA 61 FD | 	cogid	result1
17440     FD 2E 42 F5 | 	or	local09, result1
17444     13 33 02 F6 | 	mov	local11, local05
17448     02 32 06 F1 | 	add	local11, #2
1744c     19 2F 52 FC | 	wrword	local09, local11
17450     11 2F 02 F6 | 	mov	local09, local03
17454     08 2E 06 F1 | 	add	local09, #8
17458     13 33 02 F6 | 	mov	local11, local05
1745c     17 2F E2 FA | 	rdword	local09, local09
17460     06 32 06 F1 | 	add	local11, #6
17464     19 2F 52 FC | 	wrword	local09, local11
17468     13 15 0A F6 | 	mov	arg02, local05 wz
1746c     00 FA 05 A6 |  if_e	mov	result1, #0
17470     11 15 82 51 |  if_ne	sub	arg02, local03
17474     04 14 46 50 |  if_ne	shr	arg02, #4
17478     0A FB 01 56 |  if_ne	mov	result1, arg02
1747c     08 22 06 F1 | 	add	local03, #8
17480     11 FB 51 FC | 	wrword	result1, local03
17484     08 26 06 F1 | 	add	local05, #8
17488     13 FB 01 F6 | 	mov	result1, local05
1748c                 | LR__2485
1748c     A7 F0 03 F6 | 	mov	ptra, fp
17490     B2 00 A0 FD | 	call	#popregs_
17494                 | __system___gc_tryalloc_ret
17494     2D 00 64 FD | 	ret
17498                 | 
17498                 | __system___gc_alloc_managed
17498     01 4A 05 F6 | 	mov	COUNT_, #1
1749c     A8 00 A0 FD | 	call	#pushregs_
174a0     09 1F 02 F6 | 	mov	local01, arg01
174a4     00 14 06 F6 | 	mov	arg02, #0
174a8     1C 00 B0 FD | 	call	#__system___gc_doalloc
174ac     FD 14 0A F6 | 	mov	arg02, result1 wz
174b0     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
174b4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
174b8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
174bc     A7 F0 03 F6 | 	mov	ptra, fp
174c0     B2 00 A0 FD | 	call	#popregs_
174c4                 | __system___gc_alloc_managed_ret
174c4     2D 00 64 FD | 	ret
174c8                 | 
174c8                 | __system___gc_doalloc
174c8     06 4A 05 F6 | 	mov	COUNT_, #6
174cc     A8 00 A0 FD | 	call	#pushregs_
174d0     09 1F 0A F6 | 	mov	local01, arg01 wz
174d4     0A 21 02 F6 | 	mov	local02, arg02
174d8     00 FA 05 A6 |  if_e	mov	result1, #0
174dc     8C 00 90 AD |  if_e	jmp	#LR__2497
174e0     17 1E 06 F1 | 	add	local01, #23
174e4     0F 1E 26 F5 | 	andn	local01, #15
174e8     04 1E 46 F0 | 	shr	local01, #4
174ec     1C E8 05 F1 | 	add	ptr___system__dat__, #28
174f0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
174f4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
174f8     FC C5 BF FD | 	call	#__system___lockmem
174fc     0F 13 02 F6 | 	mov	arg01, local01
17500     10 15 02 F6 | 	mov	arg02, local02
17504     D8 FD BF FD | 	call	#__system___gc_tryalloc
17508     FD 22 0A F6 | 	mov	local03, result1 wz
1750c     14 00 90 5D |  if_ne	jmp	#LR__2490
17510     70 03 B0 FD | 	call	#__system___gc_docollect
17514     0F 13 02 F6 | 	mov	arg01, local01
17518     10 15 02 F6 | 	mov	arg02, local02
1751c     C0 FD BF FD | 	call	#__system___gc_tryalloc
17520     FD 22 02 F6 | 	mov	local03, result1
17524                 | LR__2490
17524     1C E8 05 F1 | 	add	ptr___system__dat__, #28
17528     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1752c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
17530     09 01 68 FC | 	wrlong	#0, arg01
17534     00 22 0E F2 | 	cmp	local03, #0 wz
17538     2C 00 90 AD |  if_e	jmp	#LR__2496
1753c     04 1E 66 F0 | 	shl	local01, #4
17540     08 1E 86 F1 | 	sub	local01, #8
17544     0F 25 52 F6 | 	abs	local04, local01 wc
17548     02 24 46 F0 | 	shr	local04, #2
1754c     12 27 8A F6 | 	negc	local05, local04 wz
17550     11 29 02 F6 | 	mov	local06, local03
17554     10 00 90 AD |  if_e	jmp	#LR__2495
17558     97 06 48 FB | 	callpa	#(@LR__2493-@LR__2491)>>2,fcache_load_ptr_
1755c                 | LR__2491
1755c     13 05 D8 FC | 	rep	@LR__2494, local05
17560                 | LR__2492
17560     14 01 68 FC | 	wrlong	#0, local06
17564     04 28 06 F1 | 	add	local06, #4
17568                 | LR__2493
17568                 | LR__2494
17568                 | LR__2495
17568                 | LR__2496
17568     11 FB 01 F6 | 	mov	result1, local03
1756c                 | LR__2497
1756c     A7 F0 03 F6 | 	mov	ptra, fp
17570     B2 00 A0 FD | 	call	#popregs_
17574                 | __system___gc_doalloc_ret
17574     2D 00 64 FD | 	ret
17578                 | 
17578                 | __system___gc_isvalidptr
17578     F8 16 06 F4 | 	bitl	arg03, #248
1757c     08 16 86 F1 | 	sub	arg03, #8
17580     09 17 52 F2 | 	cmps	arg03, arg01 wc
17584     08 00 90 CD |  if_b	jmp	#LR__2500
17588     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1758c     08 00 90 CD |  if_b	jmp	#LR__2501
17590                 | LR__2500
17590     00 FA 05 F6 | 	mov	result1, #0
17594     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
17598                 | LR__2501
17598     0B 01 02 F6 | 	mov	_var01, arg03
1759c     09 01 62 F5 | 	xor	_var01, arg01
175a0     0F 00 CE F7 | 	test	_var01, #15 wz
175a4     00 FA 05 56 |  if_ne	mov	result1, #0
175a8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
175ac     0B 01 02 F6 | 	mov	_var01, arg03
175b0     02 00 06 F1 | 	add	_var01, #2
175b4     00 01 E2 FA | 	rdword	_var01, _var01
175b8     7F 00 00 FF 
175bc     C0 01 06 F5 | 	and	_var01, ##65472
175c0     36 00 00 FF 
175c4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
175c8     00 FA 05 56 |  if_ne	mov	result1, #0
175cc     0B FB 01 A6 |  if_e	mov	result1, arg03
175d0                 | __system___gc_isvalidptr_ret
175d0     2D 00 64 FD | 	ret
175d4                 | 
175d4                 | __system___gc_free
175d4     09 17 02 F6 | 	mov	arg03, arg01
175d8     6C FC BF FD | 	call	#__system___gc_ptrs
175dc     FD 12 02 F6 | 	mov	arg01, result1
175e0     FE 14 02 F6 | 	mov	arg02, result2
175e4     90 FF BF FD | 	call	#__system___gc_isvalidptr
175e8     FD 14 0A F6 | 	mov	arg02, result1 wz
175ec     28 00 90 AD |  if_e	jmp	#LR__2510
175f0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
175f4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
175f8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
175fc     F8 C4 BF FD | 	call	#__system___lockmem
17600     0A 13 02 F6 | 	mov	arg01, arg02
17604     14 00 B0 FD | 	call	#__system___gc_dofree
17608     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1760c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
17610     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
17614     09 01 68 FC | 	wrlong	#0, arg01
17618                 | LR__2510
17618                 | __system___gc_free_ret
17618     2D 00 64 FD | 	ret
1761c                 | 
1761c                 | __system___gc_dofree
1761c     06 4A 05 F6 | 	mov	COUNT_, #6
17620     A8 00 A0 FD | 	call	#pushregs_
17624     09 1F 02 F6 | 	mov	local01, arg01
17628     1C FC BF FD | 	call	#__system___gc_ptrs
1762c     FD 20 02 F6 | 	mov	local02, result1
17630     FE 22 02 F6 | 	mov	local03, result2
17634     0F 15 02 F6 | 	mov	arg02, local01
17638     02 14 06 F1 | 	add	arg02, #2
1763c     36 00 80 FF 
17640     0A 1F 59 FC | 	wrword	##27791, arg02
17644     0F 25 02 F6 | 	mov	local04, local01
17648     0F 13 02 F6 | 	mov	arg01, local01
1764c     09 27 EA FA | 	rdword	local05, arg01 wz
17650     00 FA 05 A6 |  if_e	mov	result1, #0
17654     04 26 66 50 |  if_ne	shl	local05, #4
17658     13 13 02 51 |  if_ne	add	arg01, local05
1765c     09 FB 01 56 |  if_ne	mov	result1, arg01
17660     FD 28 02 F6 | 	mov	local06, result1
17664     97 24 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
17668                 | LR__2520
17668     04 24 06 F1 | 	add	local04, #4
1766c     12 15 EA FA | 	rdword	arg02, local04 wz
17670     10 13 02 F6 | 	mov	arg01, local02
17674     00 FA 05 A6 |  if_e	mov	result1, #0
17678     04 14 66 50 |  if_ne	shl	arg02, #4
1767c     0A 13 02 51 |  if_ne	add	arg01, arg02
17680     09 FB 01 56 |  if_ne	mov	result1, arg01
17684     FD 24 0A F6 | 	mov	local04, result1 wz
17688     24 00 90 AD |  if_e	jmp	#LR__2522
1768c     12 13 02 F6 | 	mov	arg01, local04
17690     00 FA 05 F6 | 	mov	result1, #0
17694     02 12 06 F1 | 	add	arg01, #2
17698     09 13 E2 FA | 	rdword	arg01, arg01
1769c     36 00 00 FF 
176a0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
176a4     01 FA 65 A6 |  if_e	neg	result1, #1
176a8     00 FA 0D F2 | 	cmp	result1, #0 wz
176ac     B8 FF 9F AD |  if_e	jmp	#LR__2520
176b0                 | LR__2521
176b0                 | LR__2522
176b0     00 24 0E F2 | 	cmp	local04, #0 wz
176b4     10 25 02 A6 |  if_e	mov	local04, local02
176b8     12 15 02 F6 | 	mov	arg02, local04
176bc     06 14 06 F1 | 	add	arg02, #6
176c0     0F 13 02 F6 | 	mov	arg01, local01
176c4     0A 15 E2 FA | 	rdword	arg02, arg02
176c8     06 12 06 F1 | 	add	arg01, #6
176cc     09 15 52 FC | 	wrword	arg02, arg01
176d0     0F 15 0A F6 | 	mov	arg02, local01 wz
176d4     00 FA 05 A6 |  if_e	mov	result1, #0
176d8     10 15 82 51 |  if_ne	sub	arg02, local02
176dc     04 14 46 50 |  if_ne	shr	arg02, #4
176e0     0A FB 01 56 |  if_ne	mov	result1, arg02
176e4     12 15 02 F6 | 	mov	arg02, local04
176e8     06 14 06 F1 | 	add	arg02, #6
176ec     0A FB 51 FC | 	wrword	result1, arg02
176f0     10 25 0A F2 | 	cmp	local04, local02 wz
176f4     A4 00 90 AD |  if_e	jmp	#LR__2525
176f8     12 13 02 F6 | 	mov	arg01, local04
176fc     09 27 EA FA | 	rdword	local05, arg01 wz
17700     00 FA 05 A6 |  if_e	mov	result1, #0
17704     04 26 66 50 |  if_ne	shl	local05, #4
17708     13 13 02 51 |  if_ne	add	arg01, local05
1770c     09 FB 01 56 |  if_ne	mov	result1, arg01
17710     0F FB 09 F2 | 	cmp	result1, local01 wz
17714     84 00 90 5D |  if_ne	jmp	#LR__2524
17718     12 29 E2 FA | 	rdword	local06, local04
1771c     0F 15 E2 FA | 	rdword	arg02, local01
17720     0A 29 02 F1 | 	add	local06, arg02
17724     12 29 52 FC | 	wrword	local06, local04
17728     0F 29 02 F6 | 	mov	local06, local01
1772c     02 28 06 F1 | 	add	local06, #2
17730     14 01 58 FC | 	wrword	#0, local06
17734     0F 13 02 F6 | 	mov	arg01, local01
17738     09 27 EA FA | 	rdword	local05, arg01 wz
1773c     00 FA 05 A6 |  if_e	mov	result1, #0
17740     04 26 66 50 |  if_ne	shl	local05, #4
17744     13 13 02 51 |  if_ne	add	arg01, local05
17748     09 FB 01 56 |  if_ne	mov	result1, arg01
1774c     FD 28 02 F6 | 	mov	local06, result1
17750     11 29 52 F2 | 	cmps	local06, local03 wc
17754     20 00 90 3D |  if_ae	jmp	#LR__2523
17758     12 15 0A F6 | 	mov	arg02, local04 wz
1775c     00 FA 05 A6 |  if_e	mov	result1, #0
17760     10 15 82 51 |  if_ne	sub	arg02, local02
17764     04 14 46 50 |  if_ne	shr	arg02, #4
17768     0A FB 01 56 |  if_ne	mov	result1, arg02
1776c     14 15 02 F6 | 	mov	arg02, local06
17770     04 14 06 F1 | 	add	arg02, #4
17774     0A FB 51 FC | 	wrword	result1, arg02
17778                 | LR__2523
17778     0F 15 02 F6 | 	mov	arg02, local01
1777c     06 14 06 F1 | 	add	arg02, #6
17780     12 FD 01 F6 | 	mov	result2, local04
17784     0A 15 E2 FA | 	rdword	arg02, arg02
17788     06 FC 05 F1 | 	add	result2, #6
1778c     FE 14 52 FC | 	wrword	arg02, result2
17790     06 1E 06 F1 | 	add	local01, #6
17794     0F 01 58 FC | 	wrword	#0, local01
17798     12 1F 02 F6 | 	mov	local01, local04
1779c                 | LR__2524
1779c                 | LR__2525
1779c     0F 13 02 F6 | 	mov	arg01, local01
177a0     09 27 EA FA | 	rdword	local05, arg01 wz
177a4     00 FA 05 A6 |  if_e	mov	result1, #0
177a8     04 26 66 50 |  if_ne	shl	local05, #4
177ac     13 13 02 51 |  if_ne	add	arg01, local05
177b0     09 FB 01 56 |  if_ne	mov	result1, arg01
177b4     FD 14 0A F6 | 	mov	arg02, result1 wz
177b8     B8 00 90 AD |  if_e	jmp	#LR__2527
177bc     11 15 52 F2 | 	cmps	arg02, local03 wc
177c0     B0 00 90 3D |  if_ae	jmp	#LR__2527
177c4     0A 13 02 F6 | 	mov	arg01, arg02
177c8     00 FA 05 F6 | 	mov	result1, #0
177cc     02 12 06 F1 | 	add	arg01, #2
177d0     09 13 E2 FA | 	rdword	arg01, arg01
177d4     36 00 00 FF 
177d8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
177dc     01 FA 65 A6 |  if_e	neg	result1, #1
177e0     00 FA 0D F2 | 	cmp	result1, #0 wz
177e4     8C 00 90 AD |  if_e	jmp	#LR__2527
177e8     0F 25 02 F6 | 	mov	local04, local01
177ec     12 29 E2 FA | 	rdword	local06, local04
177f0     0A 13 02 F6 | 	mov	arg01, arg02
177f4     09 1F E2 FA | 	rdword	local01, arg01
177f8     0F 29 02 F1 | 	add	local06, local01
177fc     12 29 52 FC | 	wrword	local06, local04
17800     09 29 02 F6 | 	mov	local06, arg01
17804     06 28 06 F1 | 	add	local06, #6
17808     12 1F 02 F6 | 	mov	local01, local04
1780c     14 29 E2 FA | 	rdword	local06, local06
17810     06 1E 06 F1 | 	add	local01, #6
17814     0F 29 52 FC | 	wrword	local06, local01
17818     09 29 02 F6 | 	mov	local06, arg01
1781c     02 28 06 F1 | 	add	local06, #2
17820     14 55 59 FC | 	wrword	#170, local06
17824     09 29 02 F6 | 	mov	local06, arg01
17828     06 28 06 F1 | 	add	local06, #6
1782c     14 01 58 FC | 	wrword	#0, local06
17830     09 27 EA FA | 	rdword	local05, arg01 wz
17834     00 FA 05 A6 |  if_e	mov	result1, #0
17838     04 26 66 50 |  if_ne	shl	local05, #4
1783c     13 13 02 51 |  if_ne	add	arg01, local05
17840     09 FB 01 56 |  if_ne	mov	result1, arg01
17844     FD 28 0A F6 | 	mov	local06, result1 wz
17848     28 00 90 AD |  if_e	jmp	#LR__2526
1784c     11 29 52 F2 | 	cmps	local06, local03 wc
17850     20 00 90 3D |  if_ae	jmp	#LR__2526
17854     12 15 0A F6 | 	mov	arg02, local04 wz
17858     00 FA 05 A6 |  if_e	mov	result1, #0
1785c     10 15 82 51 |  if_ne	sub	arg02, local02
17860     04 14 46 50 |  if_ne	shr	arg02, #4
17864     0A FB 01 56 |  if_ne	mov	result1, arg02
17868     14 25 02 F6 | 	mov	local04, local06
1786c     04 24 06 F1 | 	add	local04, #4
17870     12 FB 51 FC | 	wrword	result1, local04
17874                 | LR__2526
17874                 | LR__2527
17874     14 FB 01 F6 | 	mov	result1, local06
17878     A7 F0 03 F6 | 	mov	ptra, fp
1787c     B2 00 A0 FD | 	call	#popregs_
17880                 | __system___gc_dofree_ret
17880     2D 00 64 FD | 	ret
17884                 | 
17884                 | __system___gc_docollect
17884     05 4A 05 F6 | 	mov	COUNT_, #5
17888     A8 00 A0 FD | 	call	#pushregs_
1788c     B8 F9 BF FD | 	call	#__system___gc_ptrs
17890     FE 1E 02 F6 | 	mov	local01, result2
17894     FD 20 02 F6 | 	mov	local02, result1
17898     10 13 02 F6 | 	mov	arg01, local02
1789c     09 23 EA FA | 	rdword	local03, arg01 wz
178a0     00 FA 05 A6 |  if_e	mov	result1, #0
178a4     04 22 66 50 |  if_ne	shl	local03, #4
178a8     11 13 02 51 |  if_ne	add	arg01, local03
178ac     09 FB 01 56 |  if_ne	mov	result1, arg01
178b0     FD 24 0A F6 | 	mov	local04, result1 wz
178b4     00 FA 05 F6 | 	mov	result1, #0
178b8     01 FA 61 FD | 	cogid	result1
178bc     FD 26 02 F6 | 	mov	local05, result1
178c0     48 00 90 AD |  if_e	jmp	#LR__2532
178c4     97 22 48 FB | 	callpa	#(@LR__2531-@LR__2530)>>2,fcache_load_ptr_
178c8                 | LR__2530
178c8     0F 25 52 F2 | 	cmps	local04, local01 wc
178cc     3C 00 90 3D |  if_ae	jmp	#LR__2532
178d0     12 15 02 F6 | 	mov	arg02, local04
178d4     02 14 06 F1 | 	add	arg02, #2
178d8     0A 15 E2 FA | 	rdword	arg02, arg02
178dc     20 14 26 F5 | 	andn	arg02, #32
178e0     12 13 02 F6 | 	mov	arg01, local04
178e4     02 12 06 F1 | 	add	arg01, #2
178e8     09 15 52 FC | 	wrword	arg02, arg01
178ec     12 13 02 F6 | 	mov	arg01, local04
178f0     09 23 EA FA | 	rdword	local03, arg01 wz
178f4     00 FA 05 A6 |  if_e	mov	result1, #0
178f8     04 22 66 50 |  if_ne	shl	local03, #4
178fc     11 13 02 51 |  if_ne	add	arg01, local03
17900     09 FB 01 56 |  if_ne	mov	result1, arg01
17904     FD 24 0A F6 | 	mov	local04, result1 wz
17908     BC FF 9F 5D |  if_ne	jmp	#LR__2530
1790c                 | LR__2531
1790c                 | LR__2532
1790c     00 22 06 F6 | 	mov	local03, #0
17910     00 12 06 F6 | 	mov	arg01, #0
17914     B8 C1 BF FD | 	call	#__system____topofstack
17918     FD 14 02 F6 | 	mov	arg02, result1
1791c     11 13 02 F6 | 	mov	arg01, local03
17920     90 00 B0 FD | 	call	#__system___gc_markhub
17924     1C 01 B0 FD | 	call	#__system___gc_markcog
17928     10 13 02 F6 | 	mov	arg01, local02
1792c     09 23 EA FA | 	rdword	local03, arg01 wz
17930     00 FA 05 A6 |  if_e	mov	result1, #0
17934     04 22 66 50 |  if_ne	shl	local03, #4
17938     11 13 02 51 |  if_ne	add	arg01, local03
1793c     09 FB 01 56 |  if_ne	mov	result1, arg01
17940     FD 20 0A F6 | 	mov	local02, result1 wz
17944     60 00 90 AD |  if_e	jmp	#LR__2536
17948                 | LR__2533
17948     10 25 02 F6 | 	mov	local04, local02
1794c     12 13 02 F6 | 	mov	arg01, local04
17950     09 23 EA FA | 	rdword	local03, arg01 wz
17954     00 FA 05 A6 |  if_e	mov	result1, #0
17958     04 22 66 50 |  if_ne	shl	local03, #4
1795c     11 13 02 51 |  if_ne	add	arg01, local03
17960     09 FB 01 56 |  if_ne	mov	result1, arg01
17964     FD 20 02 F6 | 	mov	local02, result1
17968     12 15 02 F6 | 	mov	arg02, local04
1796c     02 14 06 F1 | 	add	arg02, #2
17970     0A 15 E2 FA | 	rdword	arg02, arg02
17974     20 14 CE F7 | 	test	arg02, #32 wz
17978     10 14 CE A7 |  if_e	test	arg02, #16 wz
1797c     1C 00 90 5D |  if_ne	jmp	#LR__2535
17980     0A 15 42 F8 | 	getnib	arg02, arg02, #0
17984     13 15 0A F2 | 	cmp	arg02, local05 wz
17988     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1798c     0C 00 90 5D |  if_ne	jmp	#LR__2534
17990     12 13 02 F6 | 	mov	arg01, local04
17994     84 FC BF FD | 	call	#__system___gc_dofree
17998     FD 20 02 F6 | 	mov	local02, result1
1799c                 | LR__2534
1799c                 | LR__2535
1799c     00 20 0E F2 | 	cmp	local02, #0 wz
179a0     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
179a4     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2533
179a8                 | LR__2536
179a8     A7 F0 03 F6 | 	mov	ptra, fp
179ac     B2 00 A0 FD | 	call	#popregs_
179b0                 | __system___gc_docollect_ret
179b0     2D 00 64 FD | 	ret
179b4                 | 
179b4                 | __system___gc_markhub
179b4     04 4A 05 F6 | 	mov	COUNT_, #4
179b8     A8 00 A0 FD | 	call	#pushregs_
179bc     09 1F 02 F6 | 	mov	local01, arg01
179c0     0A 21 02 F6 | 	mov	local02, arg02
179c4     80 F8 BF FD | 	call	#__system___gc_ptrs
179c8     FD 22 02 F6 | 	mov	local03, result1
179cc     FE 24 02 F6 | 	mov	local04, result2
179d0                 | LR__2540
179d0     10 1F 52 F2 | 	cmps	local01, local02 wc
179d4     60 00 90 3D |  if_ae	jmp	#LR__2541
179d8     0F 17 02 FB | 	rdlong	arg03, local01
179dc     04 1E 06 F1 | 	add	local01, #4
179e0     12 15 02 F6 | 	mov	arg02, local04
179e4     11 13 02 F6 | 	mov	arg01, local03
179e8     8C FB BF FD | 	call	#__system___gc_isvalidptr
179ec     FD 16 0A F6 | 	mov	arg03, result1 wz
179f0     DC FF 9F AD |  if_e	jmp	#LR__2540
179f4     0B 13 02 F6 | 	mov	arg01, arg03
179f8     00 FA 05 F6 | 	mov	result1, #0
179fc     02 12 06 F1 | 	add	arg01, #2
17a00     09 13 E2 FA | 	rdword	arg01, arg01
17a04     36 00 00 FF 
17a08     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
17a0c     01 FA 65 A6 |  if_e	neg	result1, #1
17a10     00 FA 0D F2 | 	cmp	result1, #0 wz
17a14     B8 FF 9F 5D |  if_ne	jmp	#LR__2540
17a18     0B FD 01 F6 | 	mov	result2, arg03
17a1c     02 FC 05 F1 | 	add	result2, #2
17a20     FE FC E1 FA | 	rdword	result2, result2
17a24     0F FC 25 F5 | 	andn	result2, #15
17a28     2E FC 45 F5 | 	or	result2, #46
17a2c     02 16 06 F1 | 	add	arg03, #2
17a30     0B FD 51 FC | 	wrword	result2, arg03
17a34     98 FF 9F FD | 	jmp	#LR__2540
17a38                 | LR__2541
17a38     A7 F0 03 F6 | 	mov	ptra, fp
17a3c     B2 00 A0 FD | 	call	#popregs_
17a40                 | __system___gc_markhub_ret
17a40     2D 00 64 FD | 	ret
17a44                 | 
17a44                 | __system___gc_markcog
17a44     04 4A 05 F6 | 	mov	COUNT_, #4
17a48     A8 00 A0 FD | 	call	#pushregs_
17a4c     F8 F7 BF FD | 	call	#__system___gc_ptrs
17a50     FD 1E 02 F6 | 	mov	local01, result1
17a54     FE 20 02 F6 | 	mov	local02, result2
17a58     EF 23 06 F6 | 	mov	local03, #495
17a5c                 | LR__2550
17a5c                 | 	'.live	local03
17a5c     00 22 96 F9 | 	alts	local03, #0
17a60     11 25 02 F6 | 	mov	local04, local03
17a64     0F 13 02 F6 | 	mov	arg01, local01
17a68     10 15 02 F6 | 	mov	arg02, local02
17a6c     12 17 02 F6 | 	mov	arg03, local04
17a70     04 FB BF FD | 	call	#__system___gc_isvalidptr
17a74     00 FA 0D F2 | 	cmp	result1, #0 wz
17a78     18 00 90 AD |  if_e	jmp	#LR__2551
17a7c     FD 24 02 F6 | 	mov	local04, result1
17a80     02 24 06 F1 | 	add	local04, #2
17a84     12 25 E2 FA | 	rdword	local04, local04
17a88     20 24 46 F5 | 	or	local04, #32
17a8c     02 FA 05 F1 | 	add	result1, #2
17a90     FD 24 52 FC | 	wrword	local04, result1
17a94                 | LR__2551
17a94     01 22 86 F1 | 	sub	local03, #1
17a98     00 22 56 F2 | 	cmps	local03, #0 wc
17a9c     BC FF 9F 3D |  if_ae	jmp	#LR__2550
17aa0     A7 F0 03 F6 | 	mov	ptra, fp
17aa4     B2 00 A0 FD | 	call	#popregs_
17aa8                 | __system___gc_markcog_ret
17aa8     2D 00 64 FD | 	ret
17aac                 | 
17aac                 | __system__opendir
17aac     06 4A 05 F6 | 	mov	COUNT_, #6
17ab0     A8 00 A0 FD | 	call	#pushregs_
17ab4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
17ab8     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
17abc     09 15 02 F6 | 	mov	arg02, arg01
17ac0     0F 13 02 F6 | 	mov	arg01, local01
17ac4     00 16 06 F6 | 	mov	arg03, #0
17ac8     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
17acc     D8 C6 BF FD | 	call	#__system____getvfsforfile
17ad0     FD 20 0A F6 | 	mov	local02, result1 wz
17ad4     10 00 90 AD |  if_e	jmp	#LR__2560
17ad8     28 20 06 F1 | 	add	local02, #40
17adc     10 17 0A FB | 	rdlong	arg03, local02 wz
17ae0     28 20 86 F1 | 	sub	local02, #40
17ae4     14 00 90 5D |  if_ne	jmp	#LR__2561
17ae8                 | LR__2560
17ae8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17aec     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
17af0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17af4     00 FA 05 F6 | 	mov	result1, #0
17af8     90 00 90 FD | 	jmp	#LR__2563
17afc                 | LR__2561
17afc     5C 12 06 F6 | 	mov	arg01, #92
17b00     10 14 06 F6 | 	mov	arg02, #16
17b04     C0 F9 BF FD | 	call	#__system___gc_doalloc
17b08     FD 22 0A F6 | 	mov	local03, result1 wz
17b0c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
17b10     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
17b14     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
17b18     00 FA 05 A6 |  if_e	mov	result1, #0
17b1c     6C 00 90 AD |  if_e	jmp	#LR__2563
17b20     28 20 06 F1 | 	add	local02, #40
17b24     10 25 02 FB | 	rdlong	local04, local02
17b28     12 27 02 F6 | 	mov	local05, local04
17b2c     28 20 86 F1 | 	sub	local02, #40
17b30     13 26 46 F7 | 	zerox	local05, #19
17b34     14 24 46 F0 | 	shr	local04, #20
17b38     02 24 66 F0 | 	shl	local04, #2
17b3c     ED 24 02 F1 | 	add	local04, __methods__
17b40     12 25 02 FB | 	rdlong	local04, local04
17b44     11 13 02 F6 | 	mov	arg01, local03
17b48     0F 15 02 F6 | 	mov	arg02, local01
17b4c     F2 28 02 F6 | 	mov	local06, objptr
17b50     13 E5 01 F6 | 	mov	objptr, local05
17b54     2D 24 62 FD | 	call	local04
17b58     14 E5 01 F6 | 	mov	objptr, local06
17b5c     FD 16 0A F6 | 	mov	arg03, result1 wz
17b60     20 00 90 AD |  if_e	jmp	#LR__2562
17b64     00 16 4E F2 | 	cmps	arg03, #0 wz
17b68     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17b6c     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
17b70     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17b74     11 13 02 F6 | 	mov	arg01, local03
17b78     58 FA BF FD | 	call	#__system___gc_free
17b7c     00 FA 05 F6 | 	mov	result1, #0
17b80     08 00 90 FD | 	jmp	#LR__2563
17b84                 | LR__2562
17b84     11 21 62 FC | 	wrlong	local02, local03
17b88     11 FB 01 F6 | 	mov	result1, local03
17b8c                 | LR__2563
17b8c     A7 F0 03 F6 | 	mov	ptra, fp
17b90     B2 00 A0 FD | 	call	#popregs_
17b94                 | __system__opendir_ret
17b94     2D 00 64 FD | 	ret
17b98                 | 
17b98                 | __system__closedir
17b98     04 4A 05 F6 | 	mov	COUNT_, #4
17b9c     A8 00 A0 FD | 	call	#pushregs_
17ba0     09 1F 02 F6 | 	mov	local01, arg01
17ba4     0F 13 02 FB | 	rdlong	arg01, local01
17ba8     2C 12 06 F1 | 	add	arg01, #44
17bac     09 21 02 FB | 	rdlong	local02, arg01
17bb0     10 23 02 F6 | 	mov	local03, local02
17bb4     13 22 46 F7 | 	zerox	local03, #19
17bb8     14 20 46 F0 | 	shr	local02, #20
17bbc     02 20 66 F0 | 	shl	local02, #2
17bc0     ED 20 02 F1 | 	add	local02, __methods__
17bc4     10 21 02 FB | 	rdlong	local02, local02
17bc8     0F 13 02 F6 | 	mov	arg01, local01
17bcc     F2 24 02 F6 | 	mov	local04, objptr
17bd0     11 E5 01 F6 | 	mov	objptr, local03
17bd4     2D 20 62 FD | 	call	local02
17bd8     12 E5 01 F6 | 	mov	objptr, local04
17bdc     FD 24 02 F6 | 	mov	local04, result1
17be0     0F 13 02 F6 | 	mov	arg01, local01
17be4     EC F9 BF FD | 	call	#__system___gc_free
17be8     00 24 4E F2 | 	cmps	local04, #0 wz
17bec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17bf0     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
17bf4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17bf8     01 FA 65 56 |  if_ne	neg	result1, #1
17bfc     00 FA 05 A6 |  if_e	mov	result1, #0
17c00     A7 F0 03 F6 | 	mov	ptra, fp
17c04     B2 00 A0 FD | 	call	#popregs_
17c08                 | __system__closedir_ret
17c08     2D 00 64 FD | 	ret
17c0c                 | 
17c0c                 | __system__readdir
17c0c     04 4A 05 F6 | 	mov	COUNT_, #4
17c10     A8 00 A0 FD | 	call	#pushregs_
17c14     09 15 0A FB | 	rdlong	arg02, arg01 wz
17c18     08 12 06 F1 | 	add	arg01, #8
17c1c     09 1F 02 F6 | 	mov	local01, arg01
17c20     08 12 86 F1 | 	sub	arg01, #8
17c24     00 FA 05 A6 |  if_e	mov	result1, #0
17c28     5C 00 90 AD |  if_e	jmp	#LR__2571
17c2c     30 14 06 F1 | 	add	arg02, #48
17c30     0A 21 02 FB | 	rdlong	local02, arg02
17c34     10 23 02 F6 | 	mov	local03, local02
17c38     13 22 46 F7 | 	zerox	local03, #19
17c3c     14 20 46 F0 | 	shr	local02, #20
17c40     02 20 66 F0 | 	shl	local02, #2
17c44     ED 20 02 F1 | 	add	local02, __methods__
17c48     10 21 02 FB | 	rdlong	local02, local02
17c4c     0F 15 02 F6 | 	mov	arg02, local01
17c50     F2 24 02 F6 | 	mov	local04, objptr
17c54     11 E5 01 F6 | 	mov	objptr, local03
17c58     2D 20 62 FD | 	call	local02
17c5c     12 E5 01 F6 | 	mov	objptr, local04
17c60     00 FA 4D F2 | 	cmps	result1, #0 wz
17c64     1C 00 90 AD |  if_e	jmp	#LR__2570
17c68     01 FA 55 F2 | 	cmps	result1, #1 wc
17c6c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
17c70     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
17c74     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
17c78     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
17c7c     00 FA 05 F6 | 	mov	result1, #0
17c80     04 00 90 FD | 	jmp	#LR__2571
17c84                 | LR__2570
17c84     0F FB 01 F6 | 	mov	result1, local01
17c88                 | LR__2571
17c88     A7 F0 03 F6 | 	mov	ptra, fp
17c8c     B2 00 A0 FD | 	call	#popregs_
17c90                 | __system__readdir_ret
17c90     2D 00 64 FD | 	ret
17c94                 | 
17c94                 | __system___openraw
17c94     15 4A 05 F6 | 	mov	COUNT_, #21
17c98     A8 00 A0 FD | 	call	#pushregs_
17c9c     09 1F 02 F6 | 	mov	local01, arg01
17ca0     0A 21 02 F6 | 	mov	local02, arg02
17ca4     0B 23 02 F6 | 	mov	local03, arg03
17ca8     0C 25 02 F6 | 	mov	local04, arg04
17cac     04 26 06 F6 | 	mov	local05, #4
17cb0     0F 29 02 F6 | 	mov	local06, local01
17cb4     00 2A 06 F6 | 	mov	local07, #0
17cb8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
17cbc     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
17cc0     16 13 02 F6 | 	mov	arg01, local08
17cc4     10 15 02 F6 | 	mov	arg02, local02
17cc8     00 16 06 F6 | 	mov	arg03, #0
17ccc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
17cd0     D4 C4 BF FD | 	call	#__system____getvfsforfile
17cd4     FD 2E 0A F6 | 	mov	local09, result1 wz
17cd8     10 00 90 AD |  if_e	jmp	#LR__2580
17cdc     20 2E 06 F1 | 	add	local09, #32
17ce0     17 FB 09 FB | 	rdlong	result1, local09 wz
17ce4     20 2E 86 F1 | 	sub	local09, #32
17ce8     14 00 90 5D |  if_ne	jmp	#LR__2581
17cec                 | LR__2580
17cec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17cf0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
17cf4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17cf8     01 FA 65 F6 | 	neg	result1, #1
17cfc     8C 02 90 FD | 	jmp	#LR__2594
17d00                 | LR__2581
17d00     14 13 02 F6 | 	mov	arg01, local06
17d04     00 14 06 F6 | 	mov	arg02, #0
17d08     34 16 06 F6 | 	mov	arg03, #52
17d0c     09 31 02 F6 | 	mov	local10, arg01
17d10     98 00 A0 FD | 	call	#\builtin_bytefill_
17d14     20 2E 06 F1 | 	add	local09, #32
17d18     17 33 02 FB | 	rdlong	local11, local09
17d1c     19 35 02 F6 | 	mov	local12, local11
17d20     19 37 02 F6 | 	mov	local13, local11
17d24     20 2E 86 F1 | 	sub	local09, #32
17d28     1B 39 02 F6 | 	mov	local14, local13
17d2c     13 34 46 F7 | 	zerox	local12, #19
17d30     14 38 46 F0 | 	shr	local14, #20
17d34     02 38 66 F0 | 	shl	local14, #2
17d38     ED 38 02 F1 | 	add	local14, __methods__
17d3c     1C 39 02 FB | 	rdlong	local14, local14
17d40     14 3B 02 F6 | 	mov	local15, local06
17d44     16 3D 02 F6 | 	mov	local16, local08
17d48     11 3F 02 F6 | 	mov	local17, local03
17d4c     1D 13 02 F6 | 	mov	arg01, local15
17d50     1E 15 02 F6 | 	mov	arg02, local16
17d54     1F 17 02 F6 | 	mov	arg03, local17
17d58     F2 40 02 F6 | 	mov	local18, objptr
17d5c     1A E5 01 F6 | 	mov	objptr, local12
17d60     2D 38 62 FD | 	call	local14
17d64     20 E5 01 F6 | 	mov	objptr, local18
17d68     FD 42 0A F6 | 	mov	local19, result1 wz
17d6c     04 22 CE 57 |  if_ne	test	local03, #4 wz
17d70     58 00 90 AD |  if_e	jmp	#LR__2582
17d74     24 2E 06 F1 | 	add	local09, #36
17d78     17 33 02 FB | 	rdlong	local11, local09
17d7c     19 35 02 F6 | 	mov	local12, local11
17d80     19 37 02 F6 | 	mov	local13, local11
17d84     24 2E 86 F1 | 	sub	local09, #36
17d88     1B 39 02 F6 | 	mov	local14, local13
17d8c     13 34 46 F7 | 	zerox	local12, #19
17d90     14 38 46 F0 | 	shr	local14, #20
17d94     02 38 66 F0 | 	shl	local14, #2
17d98     ED 38 02 F1 | 	add	local14, __methods__
17d9c     1C 39 02 FB | 	rdlong	local14, local14
17da0     14 3B 02 F6 | 	mov	local15, local06
17da4     16 3D 02 F6 | 	mov	local16, local08
17da8     12 3F 02 F6 | 	mov	local17, local04
17dac     1D 13 02 F6 | 	mov	arg01, local15
17db0     1E 15 02 F6 | 	mov	arg02, local16
17db4     1F 17 02 F6 | 	mov	arg03, local17
17db8     F2 40 02 F6 | 	mov	local18, objptr
17dbc     1A E5 01 F6 | 	mov	objptr, local12
17dc0     2D 38 62 FD | 	call	local14
17dc4     20 E5 01 F6 | 	mov	objptr, local18
17dc8     FD 42 02 F6 | 	mov	local19, result1
17dcc                 | LR__2582
17dcc     00 42 0E F2 | 	cmp	local19, #0 wz
17dd0     8C 01 90 5D |  if_ne	jmp	#LR__2592
17dd4     11 45 02 F6 | 	mov	local20, local03
17dd8     03 44 0E F5 | 	and	local20, #3 wz
17ddc     02 26 46 55 |  if_ne	or	local05, #2
17de0     01 44 0E F2 | 	cmp	local20, #1 wz
17de4     01 26 46 55 |  if_ne	or	local05, #1
17de8     20 22 CE F7 | 	test	local03, #32 wz
17dec     C0 26 46 55 |  if_ne	or	local05, #192
17df0     08 28 06 F1 | 	add	local06, #8
17df4     14 27 62 FC | 	wrlong	local05, local06
17df8     0C 28 06 F1 | 	add	local06, #12
17dfc     14 47 0A FB | 	rdlong	local21, local06 wz
17e00     14 28 86 F1 | 	sub	local06, #20
17e04     18 00 90 5D |  if_ne	jmp	#LR__2583
17e08     04 2E 06 F1 | 	add	local09, #4
17e0c     17 47 02 FB | 	rdlong	local21, local09
17e10     04 2E 86 F1 | 	sub	local09, #4
17e14     14 28 06 F1 | 	add	local06, #20
17e18     14 47 62 FC | 	wrlong	local21, local06
17e1c     14 28 86 F1 | 	sub	local06, #20
17e20                 | LR__2583
17e20     18 28 06 F1 | 	add	local06, #24
17e24     14 47 0A FB | 	rdlong	local21, local06 wz
17e28     18 28 86 F1 | 	sub	local06, #24
17e2c     18 00 90 5D |  if_ne	jmp	#LR__2584
17e30     08 2E 06 F1 | 	add	local09, #8
17e34     17 47 02 FB | 	rdlong	local21, local09
17e38     08 2E 86 F1 | 	sub	local09, #8
17e3c     18 28 06 F1 | 	add	local06, #24
17e40     14 47 62 FC | 	wrlong	local21, local06
17e44     18 28 86 F1 | 	sub	local06, #24
17e48                 | LR__2584
17e48     24 28 06 F1 | 	add	local06, #36
17e4c     14 47 0A FB | 	rdlong	local21, local06 wz
17e50     24 28 86 F1 | 	sub	local06, #36
17e54     17 47 02 AB |  if_e	rdlong	local21, local09
17e58     24 28 06 A1 |  if_e	add	local06, #36
17e5c     14 47 62 AC |  if_e	wrlong	local21, local06
17e60     24 28 86 A1 |  if_e	sub	local06, #36
17e64     28 28 06 F1 | 	add	local06, #40
17e68     14 47 0A FB | 	rdlong	local21, local06 wz
17e6c     28 28 86 F1 | 	sub	local06, #40
17e70     18 00 90 5D |  if_ne	jmp	#LR__2585
17e74     10 2E 06 F1 | 	add	local09, #16
17e78     17 47 02 FB | 	rdlong	local21, local09
17e7c     10 2E 86 F1 | 	sub	local09, #16
17e80     28 28 06 F1 | 	add	local06, #40
17e84     14 47 62 FC | 	wrlong	local21, local06
17e88     28 28 86 F1 | 	sub	local06, #40
17e8c                 | LR__2585
17e8c     30 28 06 F1 | 	add	local06, #48
17e90     14 47 0A FB | 	rdlong	local21, local06 wz
17e94     30 28 86 F1 | 	sub	local06, #48
17e98     18 00 90 5D |  if_ne	jmp	#LR__2586
17e9c     0C 2E 06 F1 | 	add	local09, #12
17ea0     17 47 02 FB | 	rdlong	local21, local09
17ea4     0C 2E 86 F1 | 	sub	local09, #12
17ea8     30 28 06 F1 | 	add	local06, #48
17eac     14 47 62 FC | 	wrlong	local21, local06
17eb0     30 28 86 F1 | 	sub	local06, #48
17eb4                 | LR__2586
17eb4     1C 28 06 F1 | 	add	local06, #28
17eb8     14 47 0A FB | 	rdlong	local21, local06 wz
17ebc     1C 28 86 F1 | 	sub	local06, #28
17ec0     1C 00 90 5D |  if_ne	jmp	#LR__2587
17ec4     01 2A 06 F6 | 	mov	local07, #1
17ec8     F2 12 02 F6 | 	mov	arg01, objptr
17ecc     00 A8 02 FF 
17ed0     00 12 46 F5 | 	or	arg01, ##89128960
17ed4     1C 28 06 F1 | 	add	local06, #28
17ed8     14 13 62 FC | 	wrlong	arg01, local06
17edc     1C 28 86 F1 | 	sub	local06, #28
17ee0                 | LR__2587
17ee0     20 28 06 F1 | 	add	local06, #32
17ee4     14 47 0A FB | 	rdlong	local21, local06 wz
17ee8     20 28 86 F1 | 	sub	local06, #32
17eec     1C 00 90 5D |  if_ne	jmp	#LR__2588
17ef0     01 2A 06 F6 | 	mov	local07, #1
17ef4     F2 12 02 F6 | 	mov	arg01, objptr
17ef8     00 B0 02 FF 
17efc     00 12 46 F5 | 	or	arg01, ##90177536
17f00     20 28 06 F1 | 	add	local06, #32
17f04     14 13 62 FC | 	wrlong	arg01, local06
17f08     20 28 86 F1 | 	sub	local06, #32
17f0c                 | LR__2588
17f0c     2C 28 06 F1 | 	add	local06, #44
17f10     14 47 0A FB | 	rdlong	local21, local06 wz
17f14     2C 28 86 F1 | 	sub	local06, #44
17f18     44 00 90 5D |  if_ne	jmp	#LR__2591
17f1c     14 2E 06 F1 | 	add	local09, #20
17f20     17 47 0A FB | 	rdlong	local21, local09 wz
17f24     14 2E 86 F1 | 	sub	local09, #20
17f28     18 00 90 AD |  if_e	jmp	#LR__2589
17f2c     14 2E 06 F1 | 	add	local09, #20
17f30     17 47 02 FB | 	rdlong	local21, local09
17f34     2C 28 06 F1 | 	add	local06, #44
17f38     14 47 62 FC | 	wrlong	local21, local06
17f3c     2C 28 86 F1 | 	sub	local06, #44
17f40     1C 00 90 FD | 	jmp	#LR__2590
17f44                 | LR__2589
17f44     01 2A 06 F6 | 	mov	local07, #1
17f48     F2 12 02 F6 | 	mov	arg01, objptr
17f4c     00 B8 02 FF 
17f50     00 12 46 F5 | 	or	arg01, ##91226112
17f54     2C 28 06 F1 | 	add	local06, #44
17f58     14 13 62 FC | 	wrlong	arg01, local06
17f5c     2C 28 86 F1 | 	sub	local06, #44
17f60                 | LR__2590
17f60                 | LR__2591
17f60                 | LR__2592
17f60     00 2A 0E F2 | 	cmp	local07, #0 wz
17f64     14 13 02 56 |  if_ne	mov	arg01, local06
17f68     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
17f6c     00 42 0E F2 | 	cmp	local19, #0 wz
17f70     00 12 06 A6 |  if_e	mov	arg01, #0
17f74     10 00 90 5D |  if_ne	jmp	#LR__2593
17f78     00 12 4E F2 | 	cmps	arg01, #0 wz
17f7c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17f80     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
17f84     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17f88                 | LR__2593
17f88     21 FB 01 F6 | 	mov	result1, local19
17f8c                 | LR__2594
17f8c     A7 F0 03 F6 | 	mov	ptra, fp
17f90     B2 00 A0 FD | 	call	#popregs_
17f94                 | __system___openraw_ret
17f94     2D 00 64 FD | 	ret
17f98                 | 
17f98                 | __system___closeraw
17f98     05 4A 05 F6 | 	mov	COUNT_, #5
17f9c     A8 00 A0 FD | 	call	#pushregs_
17fa0     09 1F 02 F6 | 	mov	local01, arg01
17fa4     00 20 06 F6 | 	mov	local02, #0
17fa8     08 1E 06 F1 | 	add	local01, #8
17fac     0F FB 09 FB | 	rdlong	result1, local01 wz
17fb0     08 1E 86 F1 | 	sub	local01, #8
17fb4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
17fb8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
17fbc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
17fc0     01 FA 65 A6 |  if_e	neg	result1, #1
17fc4     A8 00 90 AD |  if_e	jmp	#LR__2602
17fc8     2C 1E 06 F1 | 	add	local01, #44
17fcc     0F FB 09 FB | 	rdlong	result1, local01 wz
17fd0     2C 1E 86 F1 | 	sub	local01, #44
17fd4     38 00 90 AD |  if_e	jmp	#LR__2600
17fd8     2C 1E 06 F1 | 	add	local01, #44
17fdc     0F 23 02 FB | 	rdlong	local03, local01
17fe0     11 25 02 F6 | 	mov	local04, local03
17fe4     2C 1E 86 F1 | 	sub	local01, #44
17fe8     13 24 46 F7 | 	zerox	local04, #19
17fec     14 22 46 F0 | 	shr	local03, #20
17ff0     02 22 66 F0 | 	shl	local03, #2
17ff4     ED 22 02 F1 | 	add	local03, __methods__
17ff8     11 23 02 FB | 	rdlong	local03, local03
17ffc     0F 13 02 F6 | 	mov	arg01, local01
18000     F2 26 02 F6 | 	mov	local05, objptr
18004     12 E5 01 F6 | 	mov	objptr, local04
18008     2D 22 62 FD | 	call	local03
1800c     13 E5 01 F6 | 	mov	objptr, local05
18010                 | LR__2600
18010     24 1E 06 F1 | 	add	local01, #36
18014     0F 27 0A FB | 	rdlong	local05, local01 wz
18018     24 1E 86 F1 | 	sub	local01, #36
1801c     3C 00 90 AD |  if_e	jmp	#LR__2601
18020     24 1E 06 F1 | 	add	local01, #36
18024     0F 23 02 FB | 	rdlong	local03, local01
18028     11 25 02 F6 | 	mov	local04, local03
1802c     24 1E 86 F1 | 	sub	local01, #36
18030     13 24 46 F7 | 	zerox	local04, #19
18034     14 22 46 F0 | 	shr	local03, #20
18038     02 22 66 F0 | 	shl	local03, #2
1803c     ED 22 02 F1 | 	add	local03, __methods__
18040     11 23 02 FB | 	rdlong	local03, local03
18044     0F 13 02 F6 | 	mov	arg01, local01
18048     F2 26 02 F6 | 	mov	local05, objptr
1804c     12 E5 01 F6 | 	mov	objptr, local04
18050     2D 22 62 FD | 	call	local03
18054     13 E5 01 F6 | 	mov	objptr, local05
18058     FD 20 02 F6 | 	mov	local02, result1
1805c                 | LR__2601
1805c     0F 13 02 F6 | 	mov	arg01, local01
18060     00 14 06 F6 | 	mov	arg02, #0
18064     34 16 06 F6 | 	mov	arg03, #52
18068     98 00 A0 FD | 	call	#\builtin_bytefill_
1806c     10 FB 01 F6 | 	mov	result1, local02
18070                 | LR__2602
18070     A7 F0 03 F6 | 	mov	ptra, fp
18074     B2 00 A0 FD | 	call	#popregs_
18078                 | __system___closeraw_ret
18078     2D 00 64 FD | 	ret
1807c                 | 
1807c                 | __system___vfs_open_sdcardx
1807c     0B 4A 05 F6 | 	mov	COUNT_, #11
18080     A8 00 A0 FD | 	call	#pushregs_
18084     09 23 02 F6 | 	mov	local03, arg01
18088     0A 25 02 F6 | 	mov	local04, arg02
1808c     0B 27 02 F6 | 	mov	local05, arg03
18090     0C 29 02 F6 | 	mov	local06, arg04
18094     01 00 00 FF 
18098     24 12 06 F6 | 	mov	arg01, ##548
1809c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
180a0     FD 2A 02 F6 | 	mov	local07, result1
180a4     01 00 00 FF 
180a8     34 12 06 F6 | 	mov	arg01, ##564
180ac     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
180b0     FD 2C 02 F6 | 	mov	local08, result1
180b4     11 19 02 F6 | 	mov	arg04, local03
180b8     1F 18 C6 F0 | 	sar	arg04, #31
180bc     11 17 02 F6 | 	mov	arg03, local03
180c0     01 12 06 F6 | 	mov	arg01, #1
180c4     00 14 06 F6 | 	mov	arg02, #0
180c8     98 DF BF FD | 	call	#__system___int64_shl
180cc     FD 1E 02 F6 | 	mov	local01, result1
180d0     FE 2E 02 F6 | 	mov	local09, result2
180d4     12 19 02 F6 | 	mov	arg04, local04
180d8     1F 18 C6 F0 | 	sar	arg04, #31
180dc     12 17 02 F6 | 	mov	arg03, local04
180e0     01 12 06 F6 | 	mov	arg01, #1
180e4     00 14 06 F6 | 	mov	arg02, #0
180e8     78 DF BF FD | 	call	#__system___int64_shl
180ec     FD 1E 42 F5 | 	or	local01, result1
180f0     FE 2E 42 F5 | 	or	local09, result2
180f4     13 19 02 F6 | 	mov	arg04, local05
180f8     1F 18 C6 F0 | 	sar	arg04, #31
180fc     13 17 02 F6 | 	mov	arg03, local05
18100     01 12 06 F6 | 	mov	arg01, #1
18104     00 14 06 F6 | 	mov	arg02, #0
18108     58 DF BF FD | 	call	#__system___int64_shl
1810c     FD 1E 42 F5 | 	or	local01, result1
18110     FE 2E 42 F5 | 	or	local09, result2
18114     14 19 02 F6 | 	mov	arg04, local06
18118     1F 18 C6 F0 | 	sar	arg04, #31
1811c     14 17 02 F6 | 	mov	arg03, local06
18120     01 12 06 F6 | 	mov	arg01, #1
18124     00 14 06 F6 | 	mov	arg02, #0
18128     38 DF BF FD | 	call	#__system___int64_shl
1812c     17 15 02 F6 | 	mov	arg02, local09
18130     FD 1E 42 F5 | 	or	local01, result1
18134     0A FD 41 F5 | 	or	result2, arg02
18138     FE 20 02 F6 | 	mov	local02, result2
1813c     0F 13 02 F6 | 	mov	arg01, local01
18140     10 15 02 F6 | 	mov	arg02, local02
18144     54 DF BF FD | 	call	#__system___usepins
18148     00 FA 0D F2 | 	cmp	result1, #0 wz
1814c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
18150     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
18154     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
18158     00 FA 05 A6 |  if_e	mov	result1, #0
1815c     B4 00 90 AD |  if_e	jmp	#LR__2612
18160     0F 31 02 F6 | 	mov	local10, local01
18164     10 2F 02 F6 | 	mov	local09, local02
18168     01 00 00 FF 
1816c     08 2A 06 F1 | 	add	local07, ##520
18170     15 31 62 FC | 	wrlong	local10, local07
18174     04 2A 06 F1 | 	add	local07, #4
18178     15 2F 62 FC | 	wrlong	local09, local07
1817c     01 00 00 FF 
18180     0C 2A 86 F1 | 	sub	local07, ##524
18184     14 1B 02 F6 | 	mov	arg05, local06
18188     00 12 06 F6 | 	mov	arg01, #0
1818c     11 15 02 F6 | 	mov	arg02, local03
18190     12 17 02 F6 | 	mov	arg03, local04
18194     13 19 02 F6 | 	mov	arg04, local05
18198     F2 30 02 F6 | 	mov	local10, objptr
1819c     15 E5 01 F6 | 	mov	objptr, local07
181a0     3C 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
181a4     18 E5 01 F6 | 	mov	objptr, local10
181a8     FD 32 0A F6 | 	mov	local11, result1 wz
181ac     24 00 90 5D |  if_ne	jmp	#LR__2610
181b0     17 01 00 FF 
181b4     26 14 06 F6 | 	mov	arg02, ##@LR__4017
181b8     16 13 02 F6 | 	mov	arg01, local08
181bc     00 16 06 F6 | 	mov	arg03, #0
181c0     F2 32 02 F6 | 	mov	local11, objptr
181c4     15 E5 01 F6 | 	mov	objptr, local07
181c8     6C 60 B0 FD | 	call	#_fatfs_cc_f_mount
181cc     19 E5 01 F6 | 	mov	objptr, local11
181d0     FD 32 02 F6 | 	mov	local11, result1
181d4                 | LR__2610
181d4     00 32 0E F2 | 	cmp	local11, #0 wz
181d8     24 00 90 AD |  if_e	jmp	#LR__2611
181dc     0F 13 02 F6 | 	mov	arg01, local01
181e0     10 15 02 F6 | 	mov	arg02, local02
181e4     08 DF BF FD | 	call	#__system___freepins
181e8     19 13 6A F6 | 	neg	arg01, local11 wz
181ec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
181f0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
181f4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
181f8     00 FA 05 F6 | 	mov	result1, #0
181fc     14 00 90 FD | 	jmp	#LR__2612
18200                 | LR__2611
18200     15 13 02 F6 | 	mov	arg01, local07
18204     F2 32 02 F6 | 	mov	local11, objptr
18208     15 E5 01 F6 | 	mov	objptr, local07
1820c     08 9D B0 FD | 	call	#_fatfs_cc_get_vfs
18210     19 E5 01 F6 | 	mov	objptr, local11
18214                 | LR__2612
18214     A7 F0 03 F6 | 	mov	ptra, fp
18218     B2 00 A0 FD | 	call	#popregs_
1821c                 | __system___vfs_open_sdcardx_ret
1821c     2D 00 64 FD | 	ret
18220                 | 
18220                 | __system____default_getc
18220     03 4A 05 F6 | 	mov	COUNT_, #3
18224     A8 00 A0 FD | 	call	#pushregs_
18228     09 1F 02 F6 | 	mov	local01, arg01
1822c     0F 21 02 FB | 	rdlong	local02, local01
18230     08 20 06 F1 | 	add	local02, #8
18234     10 23 02 FB | 	rdlong	local03, local02
18238     02 22 CE F7 | 	test	local03, #2 wz
1823c     0F 13 02 56 |  if_ne	mov	arg01, local01
18240     00 01 B0 5D |  if_ne	call	#__system____default_flush
18244     10 23 02 FB | 	rdlong	local03, local02
18248     01 22 46 F5 | 	or	local03, #1
1824c     10 23 62 FC | 	wrlong	local03, local02
18250     08 20 86 F1 | 	sub	local02, #8
18254     10 23 0A FB | 	rdlong	local03, local02 wz
18258     0C 00 90 5D |  if_ne	jmp	#LR__2620
1825c     0F 13 02 F6 | 	mov	arg01, local01
18260     24 18 B0 FD | 	call	#__system____default_filbuf
18264     FD 22 02 F6 | 	mov	local03, result1
18268                 | LR__2620
18268     01 22 56 F2 | 	cmps	local03, #1 wc
1826c     01 FA 65 C6 |  if_b	neg	result1, #1
18270     1C 00 90 CD |  if_b	jmp	#LR__2621
18274     01 22 86 F1 | 	sub	local03, #1
18278     10 23 62 FC | 	wrlong	local03, local02
1827c     04 20 06 F1 | 	add	local02, #4
18280     10 23 02 FB | 	rdlong	local03, local02
18284     11 FB C1 FA | 	rdbyte	result1, local03
18288     01 22 06 F1 | 	add	local03, #1
1828c     10 23 62 FC | 	wrlong	local03, local02
18290                 | LR__2621
18290     A7 F0 03 F6 | 	mov	ptra, fp
18294     B2 00 A0 FD | 	call	#popregs_
18298                 | __system____default_getc_ret
18298     2D 00 64 FD | 	ret
1829c                 | 
1829c                 | __system____default_putc
1829c     06 4A 05 F6 | 	mov	COUNT_, #6
182a0     A8 00 A0 FD | 	call	#pushregs_
182a4     09 1F 02 F6 | 	mov	local01, arg01
182a8     0A 21 02 F6 | 	mov	local02, arg02
182ac     10 23 02 FB | 	rdlong	local03, local02
182b0     08 22 06 F1 | 	add	local03, #8
182b4     11 FB 01 FB | 	rdlong	result1, local03
182b8     01 FA CD F7 | 	test	result1, #1 wz
182bc     10 13 02 56 |  if_ne	mov	arg01, local02
182c0     80 00 B0 5D |  if_ne	call	#__system____default_flush
182c4     11 25 02 FB | 	rdlong	local04, local03
182c8     02 24 46 F5 | 	or	local04, #2
182cc     11 25 62 FC | 	wrlong	local04, local03
182d0     08 22 86 F1 | 	sub	local03, #8
182d4     11 27 02 FB | 	rdlong	local05, local03
182d8     10 22 06 F1 | 	add	local03, #16
182dc     11 15 02 FB | 	rdlong	arg02, local03
182e0     10 22 86 F1 | 	sub	local03, #16
182e4     13 FB 01 F6 | 	mov	result1, local05
182e8     0A FB 01 F1 | 	add	result1, arg02
182ec     FD 1E 42 FC | 	wrbyte	local01, result1
182f0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
182f4     01 26 06 F1 | 	add	local05, #1
182f8     11 27 62 FC | 	wrlong	local05, local03
182fc     06 20 06 F1 | 	add	local02, #6
18300     10 29 EA FA | 	rdword	local06, local02 wz
18304     06 20 86 F1 | 	sub	local02, #6
18308     0C 22 06 51 |  if_ne	add	local03, #12
1830c     11 25 02 5B |  if_ne	rdlong	local04, local03
18310     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
18314     0C 00 90 AD |  if_e	jmp	#LR__2630
18318     0A 1E 0E F2 | 	cmp	local01, #10 wz
1831c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
18320     10 00 90 5D |  if_ne	jmp	#LR__2631
18324                 | LR__2630
18324     10 13 02 F6 | 	mov	arg01, local02
18328     18 00 B0 FD | 	call	#__system____default_flush
1832c     00 FA 0D F2 | 	cmp	result1, #0 wz
18330     01 1E 66 56 |  if_ne	neg	local01, #1
18334                 | LR__2631
18334     0F FB 01 F6 | 	mov	result1, local01
18338     A7 F0 03 F6 | 	mov	ptra, fp
1833c     B2 00 A0 FD | 	call	#popregs_
18340                 | __system____default_putc_ret
18340     2D 00 64 FD | 	ret
18344                 | 
18344                 | __system____default_flush
18344     06 4A 05 F6 | 	mov	COUNT_, #6
18348     A8 00 A0 FD | 	call	#pushregs_
1834c     09 1F 02 F6 | 	mov	local01, arg01
18350     0F 21 02 FB | 	rdlong	local02, local01
18354     10 23 02 FB | 	rdlong	local03, local02
18358     08 20 06 F1 | 	add	local02, #8
1835c     10 FB 01 FB | 	rdlong	result1, local02
18360     08 20 86 F1 | 	sub	local02, #8
18364     02 FA CD F7 | 	test	result1, #2 wz
18368     D0 00 90 AD |  if_e	jmp	#LR__2642
1836c     01 22 56 F2 | 	cmps	local03, #1 wc
18370     20 01 90 CD |  if_b	jmp	#LR__2644
18374     08 1E 06 F1 | 	add	local01, #8
18378     0F FB 01 FB | 	rdlong	result1, local01
1837c     08 1E 86 F1 | 	sub	local01, #8
18380     40 FA CD F7 | 	test	result1, #64 wz
18384     68 00 90 AD |  if_e	jmp	#LR__2641
18388     08 1E 06 F1 | 	add	local01, #8
1838c     0F 17 02 FB | 	rdlong	arg03, local01
18390     08 1E 86 F1 | 	sub	local01, #8
18394     80 16 CE F7 | 	test	arg03, #128 wz
18398     54 00 90 AD |  if_e	jmp	#LR__2640
1839c     30 1E 06 F1 | 	add	local01, #48
183a0     0F 25 02 FB | 	rdlong	local04, local01
183a4     12 27 02 F6 | 	mov	local05, local04
183a8     30 1E 86 F1 | 	sub	local01, #48
183ac     13 26 46 F7 | 	zerox	local05, #19
183b0     14 24 46 F0 | 	shr	local04, #20
183b4     02 24 66 F0 | 	shl	local04, #2
183b8     ED 24 02 F1 | 	add	local04, __methods__
183bc     12 25 02 FB | 	rdlong	local04, local04
183c0     0F 13 02 F6 | 	mov	arg01, local01
183c4     00 14 06 F6 | 	mov	arg02, #0
183c8     02 16 06 F6 | 	mov	arg03, #2
183cc     F2 28 02 F6 | 	mov	local06, objptr
183d0     13 E5 01 F6 | 	mov	objptr, local05
183d4     2D 24 62 FD | 	call	local04
183d8     14 E5 01 F6 | 	mov	objptr, local06
183dc     08 1E 06 F1 | 	add	local01, #8
183e0     0F 29 02 FB | 	rdlong	local06, local01
183e4     80 28 26 F5 | 	andn	local06, #128
183e8     0F 29 62 FC | 	wrlong	local06, local01
183ec     08 1E 86 F1 | 	sub	local01, #8
183f0                 | LR__2640
183f0                 | LR__2641
183f0     18 1E 06 F1 | 	add	local01, #24
183f4     0F 25 02 FB | 	rdlong	local04, local01
183f8     12 27 02 F6 | 	mov	local05, local04
183fc     18 1E 86 F1 | 	sub	local01, #24
18400     13 26 46 F7 | 	zerox	local05, #19
18404     14 24 46 F0 | 	shr	local04, #20
18408     02 24 66 F0 | 	shl	local04, #2
1840c     ED 24 02 F1 | 	add	local04, __methods__
18410     12 25 02 FB | 	rdlong	local04, local04
18414     10 20 06 F1 | 	add	local02, #16
18418     10 15 02 FB | 	rdlong	arg02, local02
1841c     10 20 86 F1 | 	sub	local02, #16
18420     0F 13 02 F6 | 	mov	arg01, local01
18424     11 17 02 F6 | 	mov	arg03, local03
18428     F2 28 02 F6 | 	mov	local06, objptr
1842c     13 E5 01 F6 | 	mov	objptr, local05
18430     2D 24 62 FD | 	call	local04
18434     14 E5 01 F6 | 	mov	objptr, local06
18438     58 00 90 FD | 	jmp	#LR__2644
1843c                 | LR__2642
1843c     08 20 06 F1 | 	add	local02, #8
18440     10 29 02 FB | 	rdlong	local06, local02
18444     08 20 86 F1 | 	sub	local02, #8
18448     01 28 CE F7 | 	test	local06, #1 wz
1844c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
18450     40 00 90 AD |  if_e	jmp	#LR__2643
18454     30 1E 06 F1 | 	add	local01, #48
18458     0F 25 02 FB | 	rdlong	local04, local01
1845c     12 27 02 F6 | 	mov	local05, local04
18460     30 1E 86 F1 | 	sub	local01, #48
18464     13 26 46 F7 | 	zerox	local05, #19
18468     14 24 46 F0 | 	shr	local04, #20
1846c     02 24 66 F0 | 	shl	local04, #2
18470     ED 24 02 F1 | 	add	local04, __methods__
18474     12 25 02 FB | 	rdlong	local04, local04
18478     0F 13 02 F6 | 	mov	arg01, local01
1847c     11 15 62 F6 | 	neg	arg02, local03
18480     01 16 06 F6 | 	mov	arg03, #1
18484     F2 28 02 F6 | 	mov	local06, objptr
18488     13 E5 01 F6 | 	mov	objptr, local05
1848c     2D 24 62 FD | 	call	local04
18490     14 E5 01 F6 | 	mov	objptr, local06
18494                 | LR__2643
18494                 | LR__2644
18494     10 01 68 FC | 	wrlong	#0, local02
18498     04 20 06 F1 | 	add	local02, #4
1849c     10 01 68 FC | 	wrlong	#0, local02
184a0     04 20 06 F1 | 	add	local02, #4
184a4     10 01 68 FC | 	wrlong	#0, local02
184a8     00 FA 05 F6 | 	mov	result1, #0
184ac     A7 F0 03 F6 | 	mov	ptra, fp
184b0     B2 00 A0 FD | 	call	#popregs_
184b4                 | __system____default_flush_ret
184b4     2D 00 64 FD | 	ret
184b8                 | 
184b8                 | __system____default_buffer_init
184b8     02 4A 05 F6 | 	mov	COUNT_, #2
184bc     A8 00 A0 FD | 	call	#pushregs_
184c0     09 1F 02 F6 | 	mov	local01, arg01
184c4     0F 21 02 FB | 	rdlong	local02, local01
184c8     0F 13 02 F6 | 	mov	arg01, local01
184cc     34 03 B0 FD | 	call	#__system___isatty
184d0     00 FA 0D F2 | 	cmp	result1, #0 wz
184d4     06 1E 06 51 |  if_ne	add	local01, #6
184d8     0F 0B 58 5C |  if_ne	wrword	#5, local01
184dc     06 1E 06 A1 |  if_e	add	local01, #6
184e0     0F 0D 58 AC |  if_e	wrword	#6, local01
184e4     14 20 06 F1 | 	add	local02, #20
184e8     10 1F 02 F6 | 	mov	local01, local02
184ec     04 20 86 F1 | 	sub	local02, #4
184f0     10 1F 62 FC | 	wrlong	local01, local02
184f4     04 20 86 F1 | 	sub	local02, #4
184f8     02 00 80 FF 
184fc     10 01 68 FC | 	wrlong	##1024, local02
18500     00 FA 05 F6 | 	mov	result1, #0
18504     A7 F0 03 F6 | 	mov	ptra, fp
18508     B2 00 A0 FD | 	call	#popregs_
1850c                 | __system____default_buffer_init_ret
1850c     2D 00 64 FD | 	ret
18510                 | 
18510                 | __system__stat
18510     04 4A 05 F6 | 	mov	COUNT_, #4
18514     A8 00 A0 FD | 	call	#pushregs_
18518     0A 1F 02 F6 | 	mov	local01, arg02
1851c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
18520     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
18524     09 15 02 F6 | 	mov	arg02, arg01
18528     10 13 02 F6 | 	mov	arg01, local02
1852c     00 16 06 F6 | 	mov	arg03, #0
18530     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
18534     70 BC BF FD | 	call	#__system____getvfsforfile
18538     FD 22 0A F6 | 	mov	local03, result1 wz
1853c     10 00 90 AD |  if_e	jmp	#LR__2650
18540     34 22 06 F1 | 	add	local03, #52
18544     11 17 0A FB | 	rdlong	arg03, local03 wz
18548     34 22 86 F1 | 	sub	local03, #52
1854c     14 00 90 5D |  if_ne	jmp	#LR__2651
18550                 | LR__2650
18550     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18554     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
18558     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1855c     01 FA 65 F6 | 	neg	result1, #1
18560     68 00 90 FD | 	jmp	#LR__2652
18564                 | LR__2651
18564     0F 13 02 F6 | 	mov	arg01, local01
18568     00 14 06 F6 | 	mov	arg02, #0
1856c     30 16 06 F6 | 	mov	arg03, #48
18570     09 25 02 F6 | 	mov	local04, arg01
18574     98 00 A0 FD | 	call	#\builtin_bytefill_
18578     12 FB 01 F6 | 	mov	result1, local04
1857c     10 13 CA FA | 	rdbyte	arg01, local02 wz
18580     08 1E 06 A1 |  if_e	add	local01, #8
18584     08 00 80 AF 
18588     0F FF 6B AC |  if_e	wrlong	##4607, local01
1858c     00 FA 05 A6 |  if_e	mov	result1, #0
18590     38 00 90 AD |  if_e	jmp	#LR__2652
18594     34 22 06 F1 | 	add	local03, #52
18598     11 23 02 FB | 	rdlong	local03, local03
1859c     11 25 02 F6 | 	mov	local04, local03
185a0     13 22 46 F7 | 	zerox	local03, #19
185a4     14 24 46 F0 | 	shr	local04, #20
185a8     02 24 66 F0 | 	shl	local04, #2
185ac     ED 24 02 F1 | 	add	local04, __methods__
185b0     12 25 02 FB | 	rdlong	local04, local04
185b4     10 13 02 F6 | 	mov	arg01, local02
185b8     0F 15 02 F6 | 	mov	arg02, local01
185bc     F2 20 02 F6 | 	mov	local02, objptr
185c0     11 E5 01 F6 | 	mov	objptr, local03
185c4     2D 24 62 FD | 	call	local04
185c8     10 E5 01 F6 | 	mov	objptr, local02
185cc                 | LR__2652
185cc     A7 F0 03 F6 | 	mov	ptra, fp
185d0     B2 00 A0 FD | 	call	#popregs_
185d4                 | __system__stat_ret
185d4     2D 00 64 FD | 	ret
185d8                 | 
185d8                 | __system__write
185d8     0A 12 16 F2 | 	cmp	arg01, #10 wc
185dc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
185e0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
185e4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
185e8     01 FA 65 36 |  if_ae	neg	result1, #1
185ec     20 00 90 3D |  if_ae	jmp	#LR__2660
185f0     34 12 06 FD | 	qmul	arg01, #52
185f4     02 00 00 FF 
185f8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
185fc     18 12 62 FD | 	getqx	arg01
18600     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18604     02 00 00 FF 
18608     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1860c     C8 0F B0 FD | 	call	#__system___vfswrite
18610                 | LR__2660
18610                 | __system__write_ret
18610     2D 00 64 FD | 	ret
18614                 | 
18614                 | __system__read
18614     0A 12 16 F2 | 	cmp	arg01, #10 wc
18618     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1861c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
18620     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
18624     01 FA 65 36 |  if_ae	neg	result1, #1
18628     20 00 90 3D |  if_ae	jmp	#LR__2670
1862c     34 12 06 FD | 	qmul	arg01, #52
18630     02 00 00 FF 
18634     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
18638     18 12 62 FD | 	getqx	arg01
1863c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18640     02 00 00 FF 
18644     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
18648     54 11 B0 FD | 	call	#__system___vfsread
1864c                 | LR__2670
1864c                 | __system__read_ret
1864c     2D 00 64 FD | 	ret
18650                 | 
18650                 | __system__close
18650     0A 12 16 F2 | 	cmp	arg01, #10 wc
18654     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
18658     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1865c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
18660     01 FA 65 36 |  if_ae	neg	result1, #1
18664     20 00 90 3D |  if_ae	jmp	#LR__2680
18668     34 12 06 FD | 	qmul	arg01, #52
1866c     02 00 00 FF 
18670     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
18674     18 12 62 FD | 	getqx	arg01
18678     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1867c     02 00 00 FF 
18680     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
18684     10 F9 BF FD | 	call	#__system___closeraw
18688                 | LR__2680
18688                 | __system__close_ret
18688     2D 00 64 FD | 	ret
1868c                 | 
1868c                 | __system__lseek
1868c     06 4A 05 F6 | 	mov	COUNT_, #6
18690     A8 00 A0 FD | 	call	#pushregs_
18694     0A 12 16 F2 | 	cmp	arg01, #10 wc
18698     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1869c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
186a0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
186a4     01 FA 65 36 |  if_ae	neg	result1, #1
186a8     C4 00 90 3D |  if_ae	jmp	#LR__2691
186ac     34 12 06 FD | 	qmul	arg01, #52
186b0     02 00 00 FF 
186b4     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
186b8     18 1E 62 FD | 	getqx	local01
186bc     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
186c0     30 1E 06 F1 | 	add	local01, #48
186c4     0F 13 0A FB | 	rdlong	arg01, local01 wz
186c8     30 1E 86 F1 | 	sub	local01, #48
186cc     02 00 00 FF 
186d0     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
186d4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
186d8     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
186dc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
186e0     01 FA 65 A6 |  if_e	neg	result1, #1
186e4     88 00 90 AD |  if_e	jmp	#LR__2691
186e8     08 1E 06 F1 | 	add	local01, #8
186ec     0F 21 02 FB | 	rdlong	local02, local01
186f0     08 1E 86 F1 | 	sub	local01, #8
186f4     40 20 CE F7 | 	test	local02, #64 wz
186f8     08 1E 06 51 |  if_ne	add	local01, #8
186fc     0F 21 02 5B |  if_ne	rdlong	local02, local01
18700     80 20 46 55 |  if_ne	or	local02, #128
18704     0F 21 62 5C |  if_ne	wrlong	local02, local01
18708     08 1E 86 51 |  if_ne	sub	local01, #8
1870c     30 1E 06 F1 | 	add	local01, #48
18710     0F 23 02 FB | 	rdlong	local03, local01
18714     11 25 02 F6 | 	mov	local04, local03
18718     30 1E 86 F1 | 	sub	local01, #48
1871c     13 24 46 F7 | 	zerox	local04, #19
18720     14 22 46 F0 | 	shr	local03, #20
18724     02 22 66 F0 | 	shl	local03, #2
18728     ED 22 02 F1 | 	add	local03, __methods__
1872c     11 23 02 FB | 	rdlong	local03, local03
18730     0F 13 02 F6 | 	mov	arg01, local01
18734     F2 26 02 F6 | 	mov	local05, objptr
18738     12 E5 01 F6 | 	mov	objptr, local04
1873c     2D 22 62 FD | 	call	local03
18740     13 E5 01 F6 | 	mov	objptr, local05
18744     FD 28 02 F6 | 	mov	local06, result1
18748     00 28 56 F2 | 	cmps	local06, #0 wc
1874c     1C 00 90 3D |  if_ae	jmp	#LR__2690
18750     14 13 6A F6 | 	neg	arg01, local06 wz
18754     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18758     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1875c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18760     01 FA 65 56 |  if_ne	neg	result1, #1
18764     00 FA 05 A6 |  if_e	mov	result1, #0
18768     04 00 90 FD | 	jmp	#LR__2691
1876c                 | LR__2690
1876c     14 FB 01 F6 | 	mov	result1, local06
18770                 | LR__2691
18770     A7 F0 03 F6 | 	mov	ptra, fp
18774     B2 00 A0 FD | 	call	#popregs_
18778                 | __system__lseek_ret
18778     2D 00 64 FD | 	ret
1877c                 | 
1877c                 | __system___ioctl
1877c     03 4A 05 F6 | 	mov	COUNT_, #3
18780     A8 00 A0 FD | 	call	#pushregs_
18784     00 12 4E F2 | 	cmps	arg01, #0 wz
18788     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1878c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
18790     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
18794     01 FA 65 A6 |  if_e	neg	result1, #1
18798     5C 00 90 AD |  if_e	jmp	#LR__2701
1879c     28 12 06 F1 | 	add	arg01, #40
187a0     09 1F 02 FB | 	rdlong	local01, arg01
187a4     0F 21 02 F6 | 	mov	local02, local01
187a8     28 12 86 F1 | 	sub	arg01, #40
187ac     13 20 46 F7 | 	zerox	local02, #19
187b0     14 1E 46 F0 | 	shr	local01, #20
187b4     02 1E 66 F0 | 	shl	local01, #2
187b8     ED 1E 02 F1 | 	add	local01, __methods__
187bc     0F 1F 02 FB | 	rdlong	local01, local01
187c0     F2 22 02 F6 | 	mov	local03, objptr
187c4     10 E5 01 F6 | 	mov	objptr, local02
187c8     2D 1E 62 FD | 	call	local01
187cc     11 E5 01 F6 | 	mov	objptr, local03
187d0     FD 12 0A F6 | 	mov	arg01, result1 wz
187d4     1C 00 90 AD |  if_e	jmp	#LR__2700
187d8     00 12 4E F2 | 	cmps	arg01, #0 wz
187dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
187e0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
187e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
187e8     01 FA 65 56 |  if_ne	neg	result1, #1
187ec     00 FA 05 A6 |  if_e	mov	result1, #0
187f0     04 00 90 FD | 	jmp	#LR__2701
187f4                 | LR__2700
187f4     00 FA 05 F6 | 	mov	result1, #0
187f8                 | LR__2701
187f8     A7 F0 03 F6 | 	mov	ptra, fp
187fc     B2 00 A0 FD | 	call	#popregs_
18800                 | __system___ioctl_ret
18800     2D 00 64 FD | 	ret
18804                 | 
18804                 | __system___isatty
18804     00 4A 05 F6 | 	mov	COUNT_, #0
18808     A8 00 A0 FD | 	call	#pushregs_
1880c     0C F0 07 F1 | 	add	ptra, #12
18810     04 4E 05 F1 | 	add	fp, #4
18814     A7 12 62 FC | 	wrlong	arg01, fp
18818     04 4E 05 F1 | 	add	fp, #4
1881c     A7 16 02 F6 | 	mov	arg03, fp
18820     08 4E 85 F1 | 	sub	fp, #8
18824     00 15 06 F6 | 	mov	arg02, #256
18828     50 FF BF FD | 	call	#__system___ioctl
1882c     00 FA 0D F2 | 	cmp	result1, #0 wz
18830     01 FA 05 A6 |  if_e	mov	result1, #1
18834     00 FA 05 56 |  if_ne	mov	result1, #0
18838     A7 F0 03 F6 | 	mov	ptra, fp
1883c     B2 00 A0 FD | 	call	#popregs_
18840                 | __system___isatty_ret
18840     2D 00 64 FD | 	ret
18844                 | 
18844                 | __system____getftab
18844     0A 12 16 F2 | 	cmp	arg01, #10 wc
18848     34 12 06 CD |  if_b	qmul	arg01, #52
1884c     00 FA 05 36 |  if_ae	mov	result1, #0
18850     02 00 00 CF 
18854     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
18858     18 FA 61 CD |  if_b	getqx	result1
1885c     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
18860     02 00 00 CF 
18864     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
18868                 | __system____getftab_ret
18868     2D 00 64 FD | 	ret
1886c                 | 
1886c                 | __system__strncpy
1886c     09 01 02 F6 | 	mov	_var01, arg01
18870                 | LR__2710
18870     01 16 86 F1 | 	sub	arg03, #1
18874     00 16 56 F2 | 	cmps	arg03, #0 wc
18878     18 00 90 CD |  if_b	jmp	#LR__2711
1887c     0A FB C1 FA | 	rdbyte	result1, arg02
18880     00 FB 41 FC | 	wrbyte	result1, _var01
18884     01 14 06 F1 | 	add	arg02, #1
18888     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1888c     01 00 06 F1 | 	add	_var01, #1
18890     DC FF 9F 5D |  if_ne	jmp	#LR__2710
18894                 | LR__2711
18894     97 0C 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
18898                 | LR__2712
18898     01 16 86 F1 | 	sub	arg03, #1
1889c     00 16 56 F2 | 	cmps	arg03, #0 wc
188a0     00 03 02 36 |  if_ae	mov	_var02, _var01
188a4     01 00 06 31 |  if_ae	add	_var01, #1
188a8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
188ac     E8 FF 9F 3D |  if_ae	jmp	#LR__2712
188b0                 | LR__2713
188b0     09 FB 01 F6 | 	mov	result1, arg01
188b4                 | __system__strncpy_ret
188b4     2D 00 64 FD | 	ret
188b8                 | 
188b8                 | __system__strncat
188b8     00 14 4E F2 | 	cmps	arg02, #0 wz
188bc     50 00 90 AD |  if_e	jmp	#LR__2724
188c0     01 16 16 F2 | 	cmp	arg03, #1 wc
188c4     48 00 90 CD |  if_b	jmp	#LR__2724
188c8     09 01 02 F6 | 	mov	_var01, arg01
188cc     97 1E 48 FB | 	callpa	#(@LR__2722-@LR__2720)>>2,fcache_load_ptr_
188d0                 | LR__2720
188d0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
188d4     01 00 06 51 |  if_ne	add	_var01, #1
188d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2720
188dc     0B 03 02 F6 | 	mov	_var02, arg03
188e0                 | LR__2721
188e0     0A 05 C2 FA | 	rdbyte	_var03, arg02
188e4     02 07 02 F6 | 	mov	_var04, _var03
188e8     07 06 4E F7 | 	zerox	_var04, #7 wz
188ec     01 14 06 F1 | 	add	arg02, #1
188f0     18 00 90 AD |  if_e	jmp	#LR__2723
188f4     01 02 86 F1 | 	sub	_var02, #1
188f8     00 02 56 F2 | 	cmps	_var02, #0 wc
188fc     00 07 02 36 |  if_ae	mov	_var04, _var01
18900     01 00 06 31 |  if_ae	add	_var01, #1
18904     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
18908     D4 FF 9F 3D |  if_ae	jmp	#LR__2721
1890c                 | LR__2722
1890c                 | LR__2723
1890c     00 01 48 FC | 	wrbyte	#0, _var01
18910                 | LR__2724
18910     09 FB 01 F6 | 	mov	result1, arg01
18914                 | __system__strncat_ret
18914     2D 00 64 FD | 	ret
18918                 | 
18918                 | __system__strncmp
18918     09 01 0A F6 | 	mov	_var01, arg01 wz
1891c     14 00 90 5D |  if_ne	jmp	#LR__2730
18920     00 14 0E F2 | 	cmp	arg02, #0 wz
18924     01 02 66 56 |  if_ne	neg	_var02, #1
18928     00 02 06 A6 |  if_e	mov	_var02, #0
1892c     01 FB 01 F6 | 	mov	result1, _var02
18930     74 00 90 FD | 	jmp	#__system__strncmp_ret
18934                 | LR__2730
18934     00 14 0E F2 | 	cmp	arg02, #0 wz
18938     01 FA 05 A6 |  if_e	mov	result1, #1
1893c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
18940     0B 05 02 F6 | 	mov	_var03, arg03
18944     97 16 48 FB | 	callpa	#(@LR__2732-@LR__2731)>>2,fcache_load_ptr_
18948                 | LR__2731
18948     00 07 C2 FA | 	rdbyte	_var04, _var01
1894c     0A 09 02 F6 | 	mov	_var05, arg02
18950     04 0B C2 FA | 	rdbyte	_var06, _var05
18954     01 04 86 F1 | 	sub	_var03, #1
18958     00 04 56 F2 | 	cmps	_var03, #0 wc
1895c     01 00 06 F1 | 	add	_var01, #1
18960     01 14 06 F1 | 	add	arg02, #1
18964     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
18968     08 00 90 2D |  if_nc_and_z	jmp	#LR__2733
1896c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
18970     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2731
18974                 | LR__2732
18974                 | LR__2733
18974     00 04 56 F2 | 	cmps	_var03, #0 wc
18978     00 FA 05 C6 |  if_b	mov	result1, #0
1897c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
18980     05 07 0A F2 | 	cmp	_var04, _var06 wz
18984     00 FA 05 A6 |  if_e	mov	result1, #0
18988     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1898c     00 06 0E F2 | 	cmp	_var04, #0 wz
18990     01 FA 65 A6 |  if_e	neg	result1, #1
18994     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
18998     00 0A 0E F2 | 	cmp	_var06, #0 wz
1899c     01 FA 05 A6 |  if_e	mov	result1, #1
189a0     03 FB 01 56 |  if_ne	mov	result1, _var04
189a4     05 FB 81 51 |  if_ne	sub	result1, _var06
189a8                 | __system__strncmp_ret
189a8     2D 00 64 FD | 	ret
189ac                 | 
189ac                 | __system____root_opendir
189ac     64 E8 05 F1 | 	add	ptr___system__dat__, #100
189b0     04 12 06 F1 | 	add	arg01, #4
189b4     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
189b8     00 FA 05 F6 | 	mov	result1, #0
189bc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
189c0                 | __system____root_opendir_ret
189c0     2D 00 64 FD | 	ret
189c4                 | 
189c4                 | __system____root_readdir
189c4     03 4A 05 F6 | 	mov	COUNT_, #3
189c8     A8 00 A0 FD | 	call	#pushregs_
189cc     09 1F 02 F6 | 	mov	local01, arg01
189d0     0A 21 02 F6 | 	mov	local02, arg02
189d4     04 1E 06 F1 | 	add	local01, #4
189d8     0F 23 02 FB | 	rdlong	local03, local01
189dc     04 1E 86 F1 | 	sub	local01, #4
189e0                 | LR__2740
189e0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
189e4     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
189e8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
189ec     01 FA 65 A6 |  if_e	neg	result1, #1
189f0     48 00 90 AD |  if_e	jmp	#LR__2741
189f4     11 17 0A FB | 	rdlong	arg03, local03 wz
189f8     04 22 06 A1 |  if_e	add	local03, #4
189fc     E0 FF 9F AD |  if_e	jmp	#LR__2740
18a00     11 15 02 FB | 	rdlong	arg02, local03
18a04     01 14 06 F1 | 	add	arg02, #1
18a08     10 13 02 F6 | 	mov	arg01, local02
18a0c     40 16 06 F6 | 	mov	arg03, #64
18a10     58 FE BF FD | 	call	#__system__strncpy
18a14     50 20 06 F1 | 	add	local02, #80
18a18     10 03 48 FC | 	wrbyte	#1, local02
18a1c     08 20 86 F1 | 	sub	local02, #8
18a20     10 01 68 FC | 	wrlong	#0, local02
18a24     04 20 06 F1 | 	add	local02, #4
18a28     10 01 68 FC | 	wrlong	#0, local02
18a2c     04 22 06 F1 | 	add	local03, #4
18a30     04 1E 06 F1 | 	add	local01, #4
18a34     0F 23 62 FC | 	wrlong	local03, local01
18a38     00 FA 05 F6 | 	mov	result1, #0
18a3c                 | LR__2741
18a3c     A7 F0 03 F6 | 	mov	ptra, fp
18a40     B2 00 A0 FD | 	call	#popregs_
18a44                 | __system____root_readdir_ret
18a44     2D 00 64 FD | 	ret
18a48                 | 
18a48                 | __system____root_closedir
18a48     00 FA 05 F6 | 	mov	result1, #0
18a4c                 | __system____root_closedir_ret
18a4c     2D 00 64 FD | 	ret
18a50                 | 
18a50                 | __system____root_stat
18a50     0A 01 02 F6 | 	mov	_var01, arg02
18a54     00 13 02 F6 | 	mov	arg01, _var01
18a58     00 14 06 F6 | 	mov	arg02, #0
18a5c     30 16 06 F6 | 	mov	arg03, #48
18a60     98 00 A0 FD | 	call	#\builtin_bytefill_
18a64     08 00 06 F1 | 	add	_var01, #8
18a68     08 00 80 FF 
18a6c     00 FF 6B FC | 	wrlong	##4607, _var01
18a70     00 FA 05 F6 | 	mov	result1, #0
18a74                 | __system____root_stat_ret
18a74     2D 00 64 FD | 	ret
18a78                 | 
18a78                 | __system___normalizeName
18a78     00 00 06 F6 | 	mov	_var01, #0
18a7c     09 03 02 F6 | 	mov	_var02, arg01
18a80     01 05 02 F6 | 	mov	_var03, _var02
18a84                 | LR__2750
18a84     01 07 CA FA | 	rdbyte	_var04, _var02 wz
18a88     5C 01 90 AD |  if_e	jmp	#LR__2769
18a8c     00 00 0E F2 | 	cmp	_var01, #0 wz
18a90     02 07 02 56 |  if_ne	mov	_var04, _var03
18a94     01 04 06 51 |  if_ne	add	_var03, #1
18a98     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
18a9c     00 00 06 56 |  if_ne	mov	_var01, #0
18aa0     01 07 C2 FA | 	rdbyte	_var04, _var02
18aa4     2E 06 0E F2 | 	cmp	_var04, #46 wz
18aa8     D8 00 90 5D |  if_ne	jmp	#LR__2762
18aac     01 02 06 F1 | 	add	_var02, #1
18ab0     01 07 C2 FA | 	rdbyte	_var04, _var02
18ab4     01 02 86 F1 | 	sub	_var02, #1
18ab8     2F 06 0E F2 | 	cmp	_var04, #47 wz
18abc     18 00 90 AD |  if_e	jmp	#LR__2751
18ac0     01 02 06 F1 | 	add	_var02, #1
18ac4     01 09 C2 FA | 	rdbyte	_var05, _var02
18ac8     01 02 86 F1 | 	sub	_var02, #1
18acc     04 0B 02 F6 | 	mov	_var06, _var05
18ad0     07 0A 4E F7 | 	zerox	_var06, #7 wz
18ad4     10 00 90 5D |  if_ne	jmp	#LR__2752
18ad8                 | LR__2751
18ad8     01 0D 02 F6 | 	mov	_var07, _var02
18adc     01 0C 06 F1 | 	add	_var07, #1
18ae0     06 03 02 F6 | 	mov	_var02, _var07
18ae4     E0 00 90 FD | 	jmp	#LR__2766
18ae8                 | LR__2752
18ae8     01 02 06 F1 | 	add	_var02, #1
18aec     01 0D C2 FA | 	rdbyte	_var07, _var02
18af0     01 02 86 F1 | 	sub	_var02, #1
18af4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
18af8     2E 06 0E F2 | 	cmp	_var04, #46 wz
18afc     84 00 90 5D |  if_ne	jmp	#LR__2761
18b00     02 02 06 F1 | 	add	_var02, #2
18b04     01 0D C2 FA | 	rdbyte	_var07, _var02
18b08     02 02 86 F1 | 	sub	_var02, #2
18b0c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
18b10     2F 06 0E F2 | 	cmp	_var04, #47 wz
18b14     18 00 90 AD |  if_e	jmp	#LR__2753
18b18     02 02 06 F1 | 	add	_var02, #2
18b1c     01 09 C2 FA | 	rdbyte	_var05, _var02
18b20     02 02 86 F1 | 	sub	_var02, #2
18b24     04 0B 02 F6 | 	mov	_var06, _var05
18b28     07 0A 4E F7 | 	zerox	_var06, #7 wz
18b2c     54 00 90 5D |  if_ne	jmp	#LR__2760
18b30                 | LR__2753
18b30     02 02 06 F1 | 	add	_var02, #2
18b34     09 05 5A F2 | 	cmps	_var03, arg01 wcz
18b38     40 00 90 ED |  if_be	jmp	#LR__2759
18b3c     02 0F 02 F6 | 	mov	_var08, _var03
18b40     01 0E 86 F1 | 	sub	_var08, #1
18b44                 | LR__2754
18b44     07 07 C2 FA | 	rdbyte	_var04, _var08
18b48     2F 06 0E F2 | 	cmp	_var04, #47 wz
18b4c     0C 00 90 5D |  if_ne	jmp	#LR__2755
18b50     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
18b54     01 0E 86 11 |  if_a	sub	_var08, #1
18b58     E8 FF 9F 1D |  if_a	jmp	#LR__2754
18b5c                 | LR__2755
18b5c     97 0C 48 FB | 	callpa	#(@LR__2757-@LR__2756)>>2,fcache_load_ptr_
18b60                 | LR__2756
18b60     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
18b64     10 00 90 ED |  if_be	jmp	#LR__2758
18b68     07 07 C2 FA | 	rdbyte	_var04, _var08
18b6c     2F 06 0E F2 | 	cmp	_var04, #47 wz
18b70     01 0E 86 51 |  if_ne	sub	_var08, #1
18b74     E8 FF 9F 5D |  if_ne	jmp	#LR__2756
18b78                 | LR__2757
18b78                 | LR__2758
18b78     07 05 02 F6 | 	mov	_var03, _var08
18b7c                 | LR__2759
18b7c     01 00 06 F6 | 	mov	_var01, #1
18b80     44 00 90 FD | 	jmp	#LR__2766
18b84                 | LR__2760
18b84                 | LR__2761
18b84                 | LR__2762
18b84     97 18 48 FB | 	callpa	#(@LR__2764-@LR__2763)>>2,fcache_load_ptr_
18b88                 | LR__2763
18b88     01 07 CA FA | 	rdbyte	_var04, _var02 wz
18b8c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
18b90     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
18b94     20 00 90 AD |  if_e	jmp	#LR__2765
18b98     01 0B 02 F6 | 	mov	_var06, _var02
18b9c     01 09 02 F6 | 	mov	_var05, _var02
18ba0     01 08 06 F1 | 	add	_var05, #1
18ba4     05 11 C2 FA | 	rdbyte	_var09, _var06
18ba8     04 03 02 F6 | 	mov	_var02, _var05
18bac     02 11 42 FC | 	wrbyte	_var09, _var03
18bb0     01 04 06 F1 | 	add	_var03, #1
18bb4     D0 FF 9F FD | 	jmp	#LR__2763
18bb8                 | LR__2764
18bb8                 | LR__2765
18bb8     01 07 C2 FA | 	rdbyte	_var04, _var02
18bbc     2F 06 0E F2 | 	cmp	_var04, #47 wz
18bc0     C0 FE 9F 5D |  if_ne	jmp	#LR__2750
18bc4     01 00 06 F6 | 	mov	_var01, #1
18bc8                 | LR__2766
18bc8     97 0C 48 FB | 	callpa	#(@LR__2768-@LR__2767)>>2,fcache_load_ptr_
18bcc                 | LR__2767
18bcc     01 07 C2 FA | 	rdbyte	_var04, _var02
18bd0     2F 06 0E F2 | 	cmp	_var04, #47 wz
18bd4     01 0D 02 A6 |  if_e	mov	_var07, _var02
18bd8     01 0C 06 A1 |  if_e	add	_var07, #1
18bdc     06 03 02 A6 |  if_e	mov	_var02, _var07
18be0     E8 FF 9F AD |  if_e	jmp	#LR__2767
18be4                 | LR__2768
18be4     9C FE 9F FD | 	jmp	#LR__2750
18be8                 | LR__2769
18be8     02 01 48 FC | 	wrbyte	#0, _var03
18bec                 | __system___normalizeName_ret
18bec     2D 00 64 FD | 	ret
18bf0                 | 
18bf0                 | __system___strrev
18bf0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
18bf4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
18bf8     09 03 02 F6 | 	mov	_var02, arg01
18bfc     97 1A 48 FB | 	callpa	#(@LR__2772-@LR__2770)>>2,fcache_load_ptr_
18c00                 | LR__2770
18c00     01 01 CA FA | 	rdbyte	_var01, _var02 wz
18c04     01 02 06 51 |  if_ne	add	_var02, #1
18c08     F4 FF 9F 5D |  if_ne	jmp	#LR__2770
18c0c     01 02 86 F1 | 	sub	_var02, #1
18c10                 | LR__2771
18c10     09 03 5A F2 | 	cmps	_var02, arg01 wcz
18c14     1C 00 90 ED |  if_be	jmp	#LR__2773
18c18     09 01 C2 FA | 	rdbyte	_var01, arg01
18c1c     01 05 C2 FA | 	rdbyte	_var03, _var02
18c20     09 05 42 FC | 	wrbyte	_var03, arg01
18c24     01 01 42 FC | 	wrbyte	_var01, _var02
18c28     01 12 06 F1 | 	add	arg01, #1
18c2c     01 02 86 F1 | 	sub	_var02, #1
18c30     DC FF 9F FD | 	jmp	#LR__2771
18c34                 | LR__2772
18c34                 | LR__2773
18c34                 | __system___strrev_ret
18c34     2D 00 64 FD | 	ret
18c38                 | 
18c38                 | __system___fmtpad
18c38     06 4A 05 F6 | 	mov	COUNT_, #6
18c3c     A8 00 A0 FD | 	call	#pushregs_
18c40     09 1F 02 F6 | 	mov	local01, arg01
18c44     0A 21 02 F6 | 	mov	local02, arg02
18c48     0B 23 02 F6 | 	mov	local03, arg03
18c4c     10 13 EA F8 | 	getbyte	arg01, local02, #1
18c50     16 20 46 F0 | 	shr	local02, #22
18c54     03 20 0E F5 | 	and	local02, #3 wz
18c58     00 24 06 F6 | 	mov	local04, #0
18c5c     01 20 06 A6 |  if_e	mov	local02, #1
18c60     0C 21 CA F7 | 	test	local02, arg04 wz
18c64     00 FA 05 A6 |  if_e	mov	result1, #0
18c68     88 00 90 AD |  if_e	jmp	#LR__2783
18c6c     09 23 C2 F2 | 	subr	local03, arg01
18c70     01 22 56 F2 | 	cmps	local03, #1 wc
18c74     00 FA 05 C6 |  if_b	mov	result1, #0
18c78     78 00 90 CD |  if_b	jmp	#LR__2783
18c7c     03 20 0E F2 | 	cmp	local02, #3 wz
18c80     18 00 90 5D |  if_ne	jmp	#LR__2780
18c84     01 18 0E F2 | 	cmp	arg04, #1 wz
18c88     6E 20 62 FD | 	wrz	local02
18c8c     10 23 02 F1 | 	add	local03, local02
18c90     11 23 52 F6 | 	abs	local03, local03 wc
18c94     01 22 46 F0 | 	shr	local03, #1
18c98     11 23 82 F6 | 	negc	local03, local03
18c9c                 | LR__2780
18c9c     01 22 56 F2 | 	cmps	local03, #1 wc
18ca0     4C 00 90 CD |  if_b	jmp	#LR__2782
18ca4     11 27 02 F6 | 	mov	local05, local03
18ca8                 | LR__2781
18ca8     0F 21 02 F6 | 	mov	local02, local01
18cac     0F 29 02 F6 | 	mov	local06, local01
18cb0     13 20 46 F7 | 	zerox	local02, #19
18cb4     14 28 46 F0 | 	shr	local06, #20
18cb8     02 28 66 F0 | 	shl	local06, #2
18cbc     ED 28 02 F1 | 	add	local06, __methods__
18cc0     14 29 02 FB | 	rdlong	local06, local06
18cc4     20 12 06 F6 | 	mov	arg01, #32
18cc8     F2 22 02 F6 | 	mov	local03, objptr
18ccc     10 E5 01 F6 | 	mov	objptr, local02
18cd0     2D 28 62 FD | 	call	local06
18cd4     11 E5 01 F6 | 	mov	objptr, local03
18cd8     FD 28 02 F6 | 	mov	local06, result1
18cdc     00 28 56 F2 | 	cmps	local06, #0 wc
18ce0     14 FB 01 C6 |  if_b	mov	result1, local06
18ce4     0C 00 90 CD |  if_b	jmp	#LR__2783
18ce8     14 25 02 F1 | 	add	local04, local06
18cec     EE 27 6E FB | 	djnz	local05, #LR__2781
18cf0                 | LR__2782
18cf0     12 FB 01 F6 | 	mov	result1, local04
18cf4                 | LR__2783
18cf4     A7 F0 03 F6 | 	mov	ptra, fp
18cf8     B2 00 A0 FD | 	call	#popregs_
18cfc                 | __system___fmtpad_ret
18cfc     2D 00 64 FD | 	ret
18d00                 | 
18d00                 | __system___uitoa
18d00     04 4A 05 F6 | 	mov	COUNT_, #4
18d04     A8 00 A0 FD | 	call	#pushregs_
18d08     09 1F 02 F6 | 	mov	local01, arg01
18d0c     00 1A 4E F2 | 	cmps	arg05, #0 wz
18d10     0F 1B 02 F6 | 	mov	arg05, local01
18d14     00 20 06 F6 | 	mov	local02, #0
18d18     37 22 06 56 |  if_ne	mov	local03, #55
18d1c     57 22 06 A6 |  if_e	mov	local03, #87
18d20                 | LR__2790
18d20     0B 15 12 FD | 	qdiv	arg02, arg03
18d24     19 24 62 FD | 	getqy	local04
18d28     0B 15 12 FD | 	qdiv	arg02, arg03
18d2c     0A 24 16 F2 | 	cmp	local04, #10 wc
18d30     30 24 06 C1 |  if_b	add	local04, #48
18d34     11 25 02 31 |  if_ae	add	local04, local03
18d38     0D 25 42 FC | 	wrbyte	local04, arg05
18d3c     01 1A 06 F1 | 	add	arg05, #1
18d40     01 20 06 F1 | 	add	local02, #1
18d44     18 14 62 FD | 	getqx	arg02
18d48     00 14 0E F2 | 	cmp	arg02, #0 wz
18d4c     D0 FF 9F 5D |  if_ne	jmp	#LR__2790
18d50     0C 21 12 F2 | 	cmp	local02, arg04 wc
18d54     C8 FF 9F CD |  if_b	jmp	#LR__2790
18d58     0D 01 48 FC | 	wrbyte	#0, arg05
18d5c     0F 13 02 F6 | 	mov	arg01, local01
18d60     8C FE BF FD | 	call	#__system___strrev
18d64     10 FB 01 F6 | 	mov	result1, local02
18d68     A7 F0 03 F6 | 	mov	ptra, fp
18d6c     B2 00 A0 FD | 	call	#popregs_
18d70                 | __system___uitoa_ret
18d70     2D 00 64 FD | 	ret
18d74                 | 
18d74                 | __system__disassemble_0264
18d74     10 4A 05 F6 | 	mov	COUNT_, #16
18d78     A8 00 A0 FD | 	call	#pushregs_
18d7c     09 1F 02 F6 | 	mov	local01, arg01
18d80     0A 21 02 F6 | 	mov	local02, arg02
18d84     0B 23 02 F6 | 	mov	local03, arg03
18d88     0C 25 02 F6 | 	mov	local04, arg04
18d8c     0D 27 02 F6 | 	mov	local05, arg05
18d90     13 13 52 F6 | 	abs	arg01, local05 wc
18d94     1F 28 C6 C9 |  if_b	decod	local06, #31
18d98     00 28 06 36 |  if_ae	mov	local06, #0
18d9c     78 D3 BF FD | 	call	#__system___float_fromuns
18da0     14 FB 61 F5 | 	xor	result1, local06
18da4     FD 2A 02 F6 | 	mov	local07, result1
18da8     00 2C 06 F6 | 	mov	local08, #0
18dac     0F 13 02 F6 | 	mov	arg01, local01
18db0     00 14 06 F6 | 	mov	arg02, #0
18db4     01 16 06 F6 | 	mov	arg03, #1
18db8     BC DA BF FD | 	call	#__system___float_cmp
18dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
18dc0     00 2E 06 A6 |  if_e	mov	local09, #0
18dc4     10 01 68 AC |  if_e	wrlong	#0, local02
18dc8     11 2F 62 AC |  if_e	wrlong	local09, local03
18dcc     8C 01 90 AD |  if_e	jmp	#LR__2812
18dd0     0F 13 02 F6 | 	mov	arg01, local01
18dd4     6C DF BF FD | 	call	#__system____builtin_ilogb
18dd8     FD 30 02 F6 | 	mov	local10, result1
18ddc     0A 26 0E F2 | 	cmp	local05, #10 wz
18de0     24 00 90 5D |  if_ne	jmp	#LR__2800
18de4     18 2F 02 F6 | 	mov	local09, local10
18de8     01 2E 66 F0 | 	shl	local09, #1
18dec     18 2F 02 F1 | 	add	local09, local10
18df0     17 31 52 F6 | 	abs	local10, local09 wc
18df4     0A 30 16 FD | 	qdiv	local10, #10
18df8     09 32 06 F6 | 	mov	local11, #9
18dfc     18 30 62 FD | 	getqx	local10
18e00     18 31 82 F6 | 	negc	local10, local10
18e04     04 00 90 FD | 	jmp	#LR__2801
18e08                 | LR__2800
18e08     18 32 06 F6 | 	mov	local11, #24
18e0c                 | LR__2801
18e0c                 | LR__2802
18e0c     08 2C 56 F2 | 	cmps	local08, #8 wc
18e10     01 2C 06 F1 | 	add	local08, #1
18e14     60 00 90 3D |  if_ae	jmp	#LR__2803
18e18     00 C0 1F FF 
18e1c     00 12 06 F6 | 	mov	arg01, ##1065353216
18e20     15 15 02 F6 | 	mov	arg02, local07
18e24     18 17 02 F6 | 	mov	arg03, local10
18e28     4C E3 BF FD | 	call	#__system___float_pow_n
18e2c     FD 14 02 F6 | 	mov	arg02, result1
18e30     0F 13 02 F6 | 	mov	arg01, local01
18e34     10 D8 BF FD | 	call	#__system___float_div
18e38     FD 34 02 F6 | 	mov	local12, result1
18e3c     1A 13 02 F6 | 	mov	arg01, local12
18e40     00 C0 1F FF 
18e44     00 14 06 F6 | 	mov	arg02, ##1065353216
18e48     01 16 06 F6 | 	mov	arg03, #1
18e4c     28 DA BF FD | 	call	#__system___float_cmp
18e50     00 FA 55 F2 | 	cmps	result1, #0 wc
18e54     01 30 86 C1 |  if_b	sub	local10, #1
18e58     B0 FF 9F CD |  if_b	jmp	#LR__2802
18e5c     15 15 02 F6 | 	mov	arg02, local07
18e60     1A 13 02 F6 | 	mov	arg01, local12
18e64     01 16 66 F6 | 	neg	arg03, #1
18e68     0C DA BF FD | 	call	#__system___float_cmp
18e6c     00 FA 55 F2 | 	cmps	result1, #0 wc
18e70     01 30 06 31 |  if_ae	add	local10, #1
18e74     94 FF 9F 3D |  if_ae	jmp	#LR__2802
18e78                 | LR__2803
18e78     1A 13 02 F6 | 	mov	arg01, local12
18e7c     C4 DE BF FD | 	call	#__system____builtin_ilogb
18e80     FD 36 02 F6 | 	mov	local13, result1
18e84     1A 39 02 F6 | 	mov	local14, local12
18e88     17 39 06 F4 | 	bitl	local14, #279
18e8c     17 38 26 F4 | 	bith	local14, #23
18e90     1B 39 62 F0 | 	shl	local14, local13
18e94     02 26 0E F2 | 	cmp	local05, #2 wz
18e98     02 24 66 A0 |  if_e	shl	local04, #2
18e9c     00 3A 06 F6 | 	mov	local15, #0
18ea0     00 24 56 F2 | 	cmps	local04, #0 wc
18ea4     10 00 90 3D |  if_ae	jmp	#LR__2804
18ea8     18 25 C2 F2 | 	subr	local04, local10
18eac     00 24 56 F2 | 	cmps	local04, #0 wc
18eb0     A0 00 90 CD |  if_b	jmp	#LR__2811
18eb4     04 00 90 FD | 	jmp	#LR__2805
18eb8                 | LR__2804
18eb8     01 24 06 F1 | 	add	local04, #1
18ebc                 | LR__2805
18ebc     19 25 7A F3 | 	fles	local04, local11 wcz
18ec0     01 3C 06 F6 | 	mov	local16, #1
18ec4     97 22 48 FB | 	callpa	#(@LR__2807-@LR__2806)>>2,fcache_load_ptr_
18ec8                 | LR__2806
18ec8     00 40 00 FF 
18ecc     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
18ed0     38 00 90 3D |  if_ae	jmp	#LR__2808
18ed4     01 24 56 F2 | 	cmps	local04, #1 wc
18ed8     01 24 86 F1 | 	sub	local04, #1
18edc     2C 00 90 CD |  if_b	jmp	#LR__2808
18ee0     13 3B 02 FD | 	qmul	local15, local05
18ee4     1C 37 02 F6 | 	mov	local13, local14
18ee8     17 36 46 F0 | 	shr	local13, #23
18eec     17 39 06 F4 | 	bitl	local14, #279
18ef0     18 3A 62 FD | 	getqx	local15
18ef4     13 3D 02 FD | 	qmul	local16, local05
18ef8     18 3C 62 FD | 	getqx	local16
18efc     13 39 02 FD | 	qmul	local14, local05
18f00     1B 3B 02 F1 | 	add	local15, local13
18f04     18 38 62 FD | 	getqx	local14
18f08     BC FF 9F FD | 	jmp	#LR__2806
18f0c                 | LR__2807
18f0c                 | LR__2808
18f0c     13 2F 02 F6 | 	mov	local09, local05
18f10     17 2E 66 F0 | 	shl	local09, #23
18f14     17 37 52 F6 | 	abs	local13, local09 wc
18f18     01 36 46 F0 | 	shr	local13, #1
18f1c     1B 37 82 F6 | 	negc	local13, local13
18f20     1B 39 1A F2 | 	cmp	local14, local13 wcz
18f24     20 00 90 1D |  if_a	jmp	#LR__2809
18f28     17 26 66 F0 | 	shl	local05, #23
18f2c     13 37 52 F6 | 	abs	local13, local05 wc
18f30     01 36 46 F0 | 	shr	local13, #1
18f34     1B 37 82 F6 | 	negc	local13, local13
18f38     1B 39 0A F2 | 	cmp	local14, local13 wz
18f3c     14 00 90 5D |  if_ne	jmp	#LR__2810
18f40     01 3A CE F7 | 	test	local15, #1 wz
18f44     0C 00 90 AD |  if_e	jmp	#LR__2810
18f48                 | LR__2809
18f48     01 3A 06 F1 | 	add	local15, #1
18f4c     1E 3B 0A F2 | 	cmp	local15, local16 wz
18f50     01 30 06 A1 |  if_e	add	local10, #1
18f54                 | LR__2810
18f54                 | LR__2811
18f54     10 3B 62 FC | 	wrlong	local15, local02
18f58     11 31 62 FC | 	wrlong	local10, local03
18f5c                 | LR__2812
18f5c     A7 F0 03 F6 | 	mov	ptra, fp
18f60     B2 00 A0 FD | 	call	#popregs_
18f64                 | __system__disassemble_0264_ret
18f64     2D 00 64 FD | 	ret
18f68                 | 
18f68                 | __system__emitsign_0266
18f68     00 FA 05 F6 | 	mov	result1, #0
18f6c     00 14 0E F2 | 	cmp	arg02, #0 wz
18f70     09 01 02 56 |  if_ne	mov	_var01, arg01
18f74     01 12 06 51 |  if_ne	add	arg01, #1
18f78     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
18f7c     01 FA 05 56 |  if_ne	mov	result1, #1
18f80     00 16 0E F2 | 	cmp	arg03, #0 wz
18f84     09 61 48 5C |  if_ne	wrbyte	#48, arg01
18f88     01 12 06 51 |  if_ne	add	arg01, #1
18f8c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
18f90     02 FA 05 51 |  if_ne	add	result1, #2
18f94                 | __system__emitsign_0266_ret
18f94     2D 00 64 FD | 	ret
18f98                 | 
18f98                 | __system___gettxfunc
18f98     01 4A 05 F6 | 	mov	COUNT_, #1
18f9c     A8 00 A0 FD | 	call	#pushregs_
18fa0     A0 F8 BF FD | 	call	#__system____getftab
18fa4     FD 1E 0A F6 | 	mov	local01, result1 wz
18fa8     10 00 90 AD |  if_e	jmp	#LR__2820
18fac     08 1E 06 F1 | 	add	local01, #8
18fb0     0F 15 0A FB | 	rdlong	arg02, local01 wz
18fb4     08 1E 86 F1 | 	sub	local01, #8
18fb8     08 00 90 5D |  if_ne	jmp	#LR__2821
18fbc                 | LR__2820
18fbc     00 FA 05 F6 | 	mov	result1, #0
18fc0     0C 00 90 FD | 	jmp	#LR__2822
18fc4                 | LR__2821
18fc4     00 70 02 FF 
18fc8     00 1E 46 F5 | 	or	local01, ##81788928
18fcc     0F FB 01 F6 | 	mov	result1, local01
18fd0                 | LR__2822
18fd0     A7 F0 03 F6 | 	mov	ptra, fp
18fd4     B2 00 A0 FD | 	call	#popregs_
18fd8                 | __system___gettxfunc_ret
18fd8     2D 00 64 FD | 	ret
18fdc                 | 
18fdc                 | __system___getiolock_0306
18fdc     01 4A 05 F6 | 	mov	COUNT_, #1
18fe0     A8 00 A0 FD | 	call	#pushregs_
18fe4     5C F8 BF FD | 	call	#__system____getftab
18fe8     FD 1E 0A F6 | 	mov	local01, result1 wz
18fec     10 00 90 AD |  if_e	jmp	#LR__2830
18ff0     08 1E 06 F1 | 	add	local01, #8
18ff4     0F FB 09 FB | 	rdlong	result1, local01 wz
18ff8     08 1E 86 F1 | 	sub	local01, #8
18ffc     18 00 90 5D |  if_ne	jmp	#LR__2831
19000                 | LR__2830
19000     01 00 00 FF 
19004     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
19008     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1900c     01 00 00 FF 
19010     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
19014     08 00 90 FD | 	jmp	#LR__2832
19018                 | LR__2831
19018     0C 1E 06 F1 | 	add	local01, #12
1901c     0F FB 01 F6 | 	mov	result1, local01
19020                 | LR__2832
19020     A7 F0 03 F6 | 	mov	ptra, fp
19024     B2 00 A0 FD | 	call	#popregs_
19028                 | __system___getiolock_0306_ret
19028     2D 00 64 FD | 	ret
1902c                 | 
1902c                 | __system____ScanForChar
1902c     09 01 02 F6 | 	mov	_var01, arg01
19030     09 03 02 F6 | 	mov	_var02, arg01
19034     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
19038                 | LR__2840
19038     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1903c     01 02 06 51 |  if_ne	add	_var02, #1
19040     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
19044                 | LR__2841
19044     09 03 82 F1 | 	sub	_var02, arg01
19048     01 FB 01 F6 | 	mov	result1, _var02
1904c     FD 12 0A F6 | 	mov	arg01, result1 wz
19050     00 FA 05 A6 |  if_e	mov	result1, #0
19054     B8 00 90 AD |  if_e	jmp	#LR__2848
19058     0A 05 02 F6 | 	mov	_var03, arg02
1905c     07 04 4E F7 | 	zerox	_var03, #7 wz
19060     00 FA 05 A6 |  if_e	mov	result1, #0
19064     A8 00 90 AD |  if_e	jmp	#LR__2848
19068     01 16 16 F2 | 	cmp	arg03, #1 wc
1906c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
19070     01 16 06 86 |  if_c_and_z	mov	arg03, #1
19074     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
19078     94 00 90 4D |  if_c_and_nz	jmp	#LR__2848
1907c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
19080     10 00 90 ED |  if_be	jmp	#LR__2842
19084     00 18 0E F2 | 	cmp	arg04, #0 wz
19088     00 FA 05 A6 |  if_e	mov	result1, #0
1908c     80 00 90 AD |  if_e	jmp	#LR__2848
19090     09 17 02 F6 | 	mov	arg03, arg01
19094                 | LR__2842
19094     01 16 86 F1 | 	sub	arg03, #1
19098     00 18 0E F2 | 	cmp	arg04, #0 wz
1909c     38 00 90 5D |  if_ne	jmp	#LR__2844
190a0     0B 07 02 F6 | 	mov	_var04, arg03
190a4     09 09 02 F6 | 	mov	_var05, arg01
190a8                 | LR__2843
190a8     04 07 12 F2 | 	cmp	_var04, _var05 wc
190ac     5C 00 90 3D |  if_ae	jmp	#LR__2847
190b0     03 05 02 F6 | 	mov	_var03, _var04
190b4     00 05 02 F1 | 	add	_var03, _var01
190b8     02 05 C2 FA | 	rdbyte	_var03, _var03
190bc     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
190c0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
190c4     01 06 06 A1 |  if_e	add	_var04, #1
190c8     03 FB 01 A6 |  if_e	mov	result1, _var04
190cc     40 00 90 AD |  if_e	jmp	#LR__2848
190d0     01 06 06 F1 | 	add	_var04, #1
190d4     D0 FF 9F FD | 	jmp	#LR__2843
190d8                 | LR__2844
190d8     0B 07 02 F6 | 	mov	_var04, arg03
190dc                 | LR__2845
190dc     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
190e0     28 00 90 1D |  if_a	jmp	#LR__2846
190e4     03 09 02 F6 | 	mov	_var05, _var04
190e8     00 09 02 F1 | 	add	_var05, _var01
190ec     04 05 C2 FA | 	rdbyte	_var03, _var05
190f0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
190f4     04 05 0A F2 | 	cmp	_var03, _var05 wz
190f8     01 06 06 A1 |  if_e	add	_var04, #1
190fc     03 FB 01 A6 |  if_e	mov	result1, _var04
19100     0C 00 90 AD |  if_e	jmp	#LR__2848
19104     01 06 86 F1 | 	sub	_var04, #1
19108     D0 FF 9F FD | 	jmp	#LR__2845
1910c                 | LR__2846
1910c                 | LR__2847
1910c     00 FA 05 F6 | 	mov	result1, #0
19110                 | LR__2848
19110                 | __system____ScanForChar_ret
19110     2D 00 64 FD | 	ret
19114                 | 
19114                 | __system___basic_dir
19114     05 4A 05 F6 | 	mov	COUNT_, #5
19118     A8 00 A0 FD | 	call	#pushregs_
1911c     4C F0 07 F1 | 	add	ptra, #76
19120     04 4E 05 F1 | 	add	fp, #4
19124     A7 12 62 FC | 	wrlong	arg01, fp
19128     04 4E 05 F1 | 	add	fp, #4
1912c     A7 14 62 FC | 	wrlong	arg02, fp
19130     04 4E 85 F1 | 	sub	fp, #4
19134     A7 14 0A FB | 	rdlong	arg02, fp wz
19138     04 4E 85 F1 | 	sub	fp, #4
1913c     04 4E 05 51 |  if_ne	add	fp, #4
19140     A7 1E 02 5B |  if_ne	rdlong	local01, fp
19144     04 4E 85 51 |  if_ne	sub	fp, #4
19148     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1914c     70 00 90 AD |  if_e	jmp	#LR__2850
19150     03 00 00 FF 
19154     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
19158     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1915c     03 00 00 FF 
19160     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
19164     03 00 00 5F 
19168     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1916c     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
19170     03 00 00 5F 
19174     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
19178     1C EA BF 5D |  if_ne	call	#__system__closedir
1917c     17 01 00 FF 
19180     28 12 06 F6 | 	mov	arg01, ##@LR__4018
19184     24 E9 BF FD | 	call	#__system__opendir
19188     03 00 00 FF 
1918c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
19190     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
19194     08 4E 05 F1 | 	add	fp, #8
19198     A7 20 02 FB | 	rdlong	local02, fp
1919c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
191a0     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
191a4     04 4E 85 F1 | 	sub	fp, #4
191a8     A7 20 02 FB | 	rdlong	local02, fp
191ac     04 4E 85 F1 | 	sub	fp, #4
191b0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
191b4     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
191b8     03 00 00 FF 
191bc     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
191c0                 | LR__2850
191c0     03 00 00 FF 
191c4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
191c8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
191cc     03 00 00 FF 
191d0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
191d4     17 01 00 AF 
191d8     2A FA 05 A6 |  if_e	mov	result1, ##@LR__4019
191dc     84 02 90 AD |  if_e	jmp	#LR__2863
191e0                 | LR__2851
191e0     03 00 00 FF 
191e4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
191e8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
191ec     03 00 00 FF 
191f0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
191f4     14 EA BF FD | 	call	#__system__readdir
191f8     0C 4E 05 F1 | 	add	fp, #12
191fc     A7 FA 61 FC | 	wrlong	result1, fp
19200     0C 4E 85 F1 | 	sub	fp, #12
19204     00 FA 0D F2 | 	cmp	result1, #0 wz
19208     38 00 90 5D |  if_ne	jmp	#LR__2852
1920c     03 00 00 FF 
19210     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
19214     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
19218     03 00 00 FF 
1921c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
19220     74 E9 BF FD | 	call	#__system__closedir
19224     03 00 00 FF 
19228     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1922c     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
19230     03 00 00 FF 
19234     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
19238     17 01 00 FF 
1923c     2C FA 05 F6 | 	mov	result1, ##@LR__4020
19240     20 02 90 FD | 	jmp	#LR__2863
19244                 | LR__2852
19244     0C 4E 05 F1 | 	add	fp, #12
19248     A7 12 02 FB | 	rdlong	arg01, fp
1924c     0C 4E 85 F1 | 	sub	fp, #12
19250     03 00 00 FF 
19254     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
19258     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1925c     03 00 00 FF 
19260     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
19264     10 09 B0 FD | 	call	#__system___pat_match
19268     00 FA 0D F2 | 	cmp	result1, #0 wz
1926c     70 FF 9F AD |  if_e	jmp	#LR__2851
19270     03 00 00 FF 
19274     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
19278     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1927c     03 00 00 FF 
19280     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
19284     78 01 90 AD |  if_e	jmp	#LR__2859
19288     0C 4E 05 F1 | 	add	fp, #12
1928c     A7 12 02 FB | 	rdlong	arg01, fp
19290     04 4E 05 F1 | 	add	fp, #4
19294     A7 14 02 F6 | 	mov	arg02, fp
19298     10 4E 85 F1 | 	sub	fp, #16
1929c     70 F2 BF FD | 	call	#__system__stat
192a0     40 4E 05 F1 | 	add	fp, #64
192a4     A7 FA 61 FC | 	wrlong	result1, fp
192a8     40 4E 85 F1 | 	sub	fp, #64
192ac     00 FA 0D F2 | 	cmp	result1, #0 wz
192b0     17 01 00 5F 
192b4     2E FA 05 56 |  if_ne	mov	result1, ##@LR__4021
192b8     A8 01 90 5D |  if_ne	jmp	#LR__2863
192bc     18 4E 05 F1 | 	add	fp, #24
192c0     A7 20 02 FB | 	rdlong	local02, fp
192c4     78 00 00 FF 
192c8     00 20 06 F5 | 	and	local02, ##61440
192cc     2C 4E 05 F1 | 	add	fp, #44
192d0     A7 20 62 FC | 	wrlong	local02, fp
192d4     38 4E 85 F1 | 	sub	fp, #56
192d8     A7 20 02 FB | 	rdlong	local02, fp
192dc     0C 4E 85 F1 | 	sub	fp, #12
192e0     10 21 C2 FA | 	rdbyte	local02, local02
192e4     2E 20 0E F2 | 	cmp	local02, #46 wz
192e8     08 4E 05 A1 |  if_e	add	fp, #8
192ec     A7 04 68 AC |  if_e	wrlong	#2, fp
192f0     08 4E C5 F3 | 	sumz	fp, #8
192f4     A7 00 68 5C |  if_ne	wrlong	#0, fp
192f8     08 4E 85 51 |  if_ne	sub	fp, #8
192fc     44 4E 05 F1 | 	add	fp, #68
19300     A7 20 02 FB | 	rdlong	local02, fp
19304     44 4E 85 F1 | 	sub	fp, #68
19308     08 00 00 FF 
1930c     00 20 0E F2 | 	cmp	local02, ##4096 wz
19310     18 00 90 5D |  if_ne	jmp	#LR__2853
19314     08 4E 05 F1 | 	add	fp, #8
19318     A7 20 02 FB | 	rdlong	local02, fp
1931c     10 20 46 F5 | 	or	local02, #16
19320     A7 20 62 FC | 	wrlong	local02, fp
19324     08 4E 85 F1 | 	sub	fp, #8
19328     AC 00 90 FD | 	jmp	#LR__2858
1932c                 | LR__2853
1932c     44 4E 05 F1 | 	add	fp, #68
19330     A7 20 02 FB | 	rdlong	local02, fp
19334     44 4E 85 F1 | 	sub	fp, #68
19338     10 00 00 FF 
1933c     00 20 0E F2 | 	cmp	local02, ##8192 wz
19340     44 4E 05 51 |  if_ne	add	fp, #68
19344     A7 1E 02 5B |  if_ne	rdlong	local01, fp
19348     44 4E 85 51 |  if_ne	sub	fp, #68
1934c     18 00 00 5F 
19350     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
19354     44 4E 05 51 |  if_ne	add	fp, #68
19358     0F 23 02 56 |  if_ne	mov	local03, local01
1935c     44 4E 85 51 |  if_ne	sub	fp, #68
19360     20 00 00 5F 
19364     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
19368     18 00 90 5D |  if_ne	jmp	#LR__2854
1936c     08 4E 05 F1 | 	add	fp, #8
19370     A7 20 02 FB | 	rdlong	local02, fp
19374     04 20 46 F5 | 	or	local02, #4
19378     A7 20 62 FC | 	wrlong	local02, fp
1937c     08 4E 85 F1 | 	sub	fp, #8
19380     54 00 90 FD | 	jmp	#LR__2857
19384                 | LR__2854
19384     18 4E 05 F1 | 	add	fp, #24
19388     A7 20 02 FB | 	rdlong	local02, fp
1938c     18 4E 85 F1 | 	sub	fp, #24
19390     92 20 CE F7 | 	test	local02, #146 wz
19394     18 00 90 5D |  if_ne	jmp	#LR__2855
19398     08 4E 05 F1 | 	add	fp, #8
1939c     A7 20 02 FB | 	rdlong	local02, fp
193a0     01 20 46 F5 | 	or	local02, #1
193a4     A7 20 62 FC | 	wrlong	local02, fp
193a8     08 4E 85 F1 | 	sub	fp, #8
193ac     28 00 90 FD | 	jmp	#LR__2856
193b0                 | LR__2855
193b0     44 4E 05 F1 | 	add	fp, #68
193b4     A7 24 02 FB | 	rdlong	local04, fp
193b8     44 4E 85 F1 | 	sub	fp, #68
193bc     08 00 00 FF 
193c0     00 24 0E F2 | 	cmp	local04, ##4096 wz
193c4     08 4E 05 51 |  if_ne	add	fp, #8
193c8     A7 24 02 5B |  if_ne	rdlong	local04, fp
193cc     20 24 46 55 |  if_ne	or	local04, #32
193d0     A7 24 62 5C |  if_ne	wrlong	local04, fp
193d4     08 4E 85 51 |  if_ne	sub	fp, #8
193d8                 | LR__2856
193d8                 | LR__2857
193d8                 | LR__2858
193d8     08 4E 05 F1 | 	add	fp, #8
193dc     A7 24 02 FB | 	rdlong	local04, fp
193e0     08 4E 85 F1 | 	sub	fp, #8
193e4     03 00 00 FF 
193e8     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
193ec     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
193f0     03 00 00 FF 
193f4     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
193f8     0F 25 CA F7 | 	test	local04, local01 wz
193fc     E0 FD 9F AD |  if_e	jmp	#LR__2851
19400                 | LR__2859
19400     0C 4E 05 F1 | 	add	fp, #12
19404     A7 12 02 FB | 	rdlong	arg01, fp
19408     0C 4E 85 F1 | 	sub	fp, #12
1940c     09 27 02 F6 | 	mov	local05, arg01
19410     97 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
19414                 | LR__2860
19414     13 FB C9 FA | 	rdbyte	result1, local05 wz
19418     01 26 06 51 |  if_ne	add	local05, #1
1941c     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
19420                 | LR__2861
19420     13 13 C2 F2 | 	subr	arg01, local05
19424     01 12 06 F1 | 	add	arg01, #1
19428     6C E0 BF FD | 	call	#__system___gc_alloc_managed
1942c     48 4E 05 F1 | 	add	fp, #72
19430     A7 FA 61 FC | 	wrlong	result1, fp
19434     48 4E 85 F1 | 	sub	fp, #72
19438     00 FA 0D F2 | 	cmp	result1, #0 wz
1943c     18 00 90 AD |  if_e	jmp	#LR__2862
19440     48 4E 05 F1 | 	add	fp, #72
19444     A7 12 02 FB | 	rdlong	arg01, fp
19448     3C 4E 85 F1 | 	sub	fp, #60
1944c     A7 14 02 FB | 	rdlong	arg02, fp
19450     0C 4E 85 F1 | 	sub	fp, #12
19454     54 A6 BF FD | 	call	#__system____builtin_strcpy
19458                 | LR__2862
19458     48 4E 05 F1 | 	add	fp, #72
1945c     A7 FA 01 FB | 	rdlong	result1, fp
19460     48 4E 85 F1 | 	sub	fp, #72
19464                 | LR__2863
19464     A7 F0 03 F6 | 	mov	ptra, fp
19468     B2 00 A0 FD | 	call	#popregs_
1946c                 | __system___basic_dir_ret
1946c     2D 00 64 FD | 	ret
19470                 | 
19470                 | __system__pack_0372
19470     09 01 02 F6 | 	mov	_var01, arg01
19474     7F 16 06 F1 | 	add	arg03, #127
19478     04 18 CE F7 | 	test	arg04, #4 wz
1947c     10 00 90 AD |  if_e	jmp	#LR__2870
19480     00 00 0E F2 | 	cmp	_var01, #0 wz
19484     16 00 C6 A9 |  if_e	decod	_var01, #22
19488     F7 00 26 F4 | 	bith	_var01, #247
1948c     B4 00 90 FD | 	jmp	#LR__2879
19490                 | LR__2870
19490     02 18 CE F7 | 	test	arg04, #2 wz
19494     00 C0 3F 5F 
19498     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1949c     00 14 06 56 |  if_ne	mov	arg02, #0
194a0     A0 00 90 5D |  if_ne	jmp	#LR__2878
194a4     08 18 CE F7 | 	test	arg04, #8 wz
194a8     00 00 06 56 |  if_ne	mov	_var01, #0
194ac     94 00 90 5D |  if_ne	jmp	#LR__2877
194b0     FF 16 56 F2 | 	cmps	arg03, #255 wc
194b4     00 C0 3F 3F 
194b8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
194bc     00 14 06 36 |  if_ae	mov	arg02, #0
194c0     80 00 90 3D |  if_ae	jmp	#LR__2876
194c4     01 16 56 F2 | 	cmps	arg03, #1 wc
194c8     6C 00 90 3D |  if_ae	jmp	#LR__2874
194cc     01 14 46 F0 | 	shr	arg02, #1
194d0     00 03 02 F6 | 	mov	_var02, _var01
194d4     01 02 06 F5 | 	and	_var02, #1
194d8     1F 02 66 F0 | 	shl	_var02, #31
194dc     01 15 42 F5 | 	or	arg02, _var02
194e0     01 00 46 F0 | 	shr	_var01, #1
194e4     97 1E 48 FB | 	callpa	#(@LR__2872-@LR__2871)>>2,fcache_load_ptr_
194e8                 | LR__2871
194e8     00 16 56 F2 | 	cmps	arg03, #0 wc
194ec     34 00 90 3D |  if_ae	jmp	#LR__2873
194f0     00 00 0E F2 | 	cmp	_var01, #0 wz
194f4     2C 00 90 AD |  if_e	jmp	#LR__2873
194f8     0A 13 02 F6 | 	mov	arg01, arg02
194fc     01 12 06 F5 | 	and	arg01, #1
19500     01 16 06 F1 | 	add	arg03, #1
19504     01 14 46 F0 | 	shr	arg02, #1
19508     00 03 02 F6 | 	mov	_var02, _var01
1950c     01 02 06 F5 | 	and	_var02, #1
19510     1F 02 66 F0 | 	shl	_var02, #31
19514     01 15 42 F5 | 	or	arg02, _var02
19518     09 15 42 F5 | 	or	arg02, arg01
1951c     01 00 46 F0 | 	shr	_var01, #1
19520     C4 FF 9F FD | 	jmp	#LR__2871
19524                 | LR__2872
19524                 | LR__2873
19524     00 16 56 F2 | 	cmps	arg03, #0 wc
19528     18 00 90 3D |  if_ae	jmp	#LR__2875
1952c     00 14 0E F2 | 	cmp	arg02, #0 wz
19530     6F 14 62 FD | 	wrnz	arg02
19534     0C 00 90 FD | 	jmp	#LR__2875
19538                 | LR__2874
19538     17 01 06 F4 | 	bitl	_var01, #279
1953c     17 16 66 F0 | 	shl	arg03, #23
19540     0B 01 42 F5 | 	or	_var01, arg03
19544                 | LR__2875
19544                 | LR__2876
19544                 | LR__2877
19544                 | LR__2878
19544                 | LR__2879
19544     01 00 CE F7 | 	test	_var01, #1 wz
19548     01 14 46 55 |  if_ne	or	arg02, #1
1954c     0A 17 02 F6 | 	mov	arg03, arg02
19550     00 02 06 F6 | 	mov	_var02, #0
19554     FF FF 3F FF 
19558     FF 15 06 F1 | 	add	arg02, ##2147483647
1955c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
19560     01 02 06 C6 |  if_b	mov	_var02, #1
19564     01 01 02 F1 | 	add	_var01, _var02
19568     01 18 CE F7 | 	test	arg04, #1 wz
1956c     1F 00 26 54 |  if_ne	bith	_var01, #31
19570     00 FB 01 F6 | 	mov	result1, _var01
19574                 | __system__pack_0372_ret
19574     2D 00 64 FD | 	ret
19578                 | 
19578                 | __system___rxtxioctl_0461
19578     00 15 0E F2 | 	cmp	arg02, #256 wz
1957c     0C 00 90 AD |  if_e	jmp	#LR__2880
19580     01 15 0E F2 | 	cmp	arg02, #257 wz
19584     1C 00 90 AD |  if_e	jmp	#LR__2881
19588     30 00 90 FD | 	jmp	#LR__2882
1958c                 | LR__2880
1958c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
19590     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19594     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
19598     0B FB 61 FC | 	wrlong	result1, arg03
1959c     00 FA 05 F6 | 	mov	result1, #0
195a0     28 00 90 FD | 	jmp	#LR__2883
195a4                 | LR__2881
195a4     0B 13 02 FB | 	rdlong	arg01, arg03
195a8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
195ac     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
195b0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
195b4     00 FA 05 F6 | 	mov	result1, #0
195b8     10 00 90 FD | 	jmp	#LR__2883
195bc                 | LR__2882
195bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
195c0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
195c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
195c8     01 FA 65 F6 | 	neg	result1, #1
195cc                 | LR__2883
195cc                 | __system___rxtxioctl_0461_ret
195cc     2D 00 64 FD | 	ret
195d0                 | 
195d0                 | __system____dummy_flush_0462
195d0     00 FA 05 F6 | 	mov	result1, #0
195d4                 | __system____dummy_flush_0462_ret
195d4     2D 00 64 FD | 	ret
195d8                 | 
195d8                 | __system___vfswrite
195d8     09 4A 05 F6 | 	mov	COUNT_, #9
195dc     A8 00 A0 FD | 	call	#pushregs_
195e0     09 1F 02 F6 | 	mov	local01, arg01
195e4     0A 21 02 F6 | 	mov	local02, arg02
195e8     0B 23 02 F6 | 	mov	local03, arg03
195ec     10 25 02 F6 | 	mov	local04, local02
195f0     08 1E 06 F1 | 	add	local01, #8
195f4     0F 13 02 FB | 	rdlong	arg01, local01
195f8     08 1E 86 F1 | 	sub	local01, #8
195fc     02 12 CE F7 | 	test	arg01, #2 wz
19600     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19604     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
19608     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1960c     01 FA 65 A6 |  if_e	neg	result1, #1
19610     80 01 90 AD |  if_e	jmp	#LR__2896
19614     08 1E 06 F1 | 	add	local01, #8
19618     0F FB 01 FB | 	rdlong	result1, local01
1961c     08 1E 86 F1 | 	sub	local01, #8
19620     40 FA CD F7 | 	test	result1, #64 wz
19624     68 00 90 AD |  if_e	jmp	#LR__2891
19628     08 1E 06 F1 | 	add	local01, #8
1962c     0F 15 02 FB | 	rdlong	arg02, local01
19630     08 1E 86 F1 | 	sub	local01, #8
19634     80 14 CE F7 | 	test	arg02, #128 wz
19638     54 00 90 AD |  if_e	jmp	#LR__2890
1963c     30 1E 06 F1 | 	add	local01, #48
19640     0F 27 02 FB | 	rdlong	local05, local01
19644     13 29 02 F6 | 	mov	local06, local05
19648     30 1E 86 F1 | 	sub	local01, #48
1964c     13 28 46 F7 | 	zerox	local06, #19
19650     14 26 46 F0 | 	shr	local05, #20
19654     02 26 66 F0 | 	shl	local05, #2
19658     ED 26 02 F1 | 	add	local05, __methods__
1965c     13 27 02 FB | 	rdlong	local05, local05
19660     0F 13 02 F6 | 	mov	arg01, local01
19664     00 14 06 F6 | 	mov	arg02, #0
19668     02 16 06 F6 | 	mov	arg03, #2
1966c     F2 2A 02 F6 | 	mov	local07, objptr
19670     14 E5 01 F6 | 	mov	objptr, local06
19674     2D 26 62 FD | 	call	local05
19678     15 E5 01 F6 | 	mov	objptr, local07
1967c     08 1E 06 F1 | 	add	local01, #8
19680     0F 2B 02 FB | 	rdlong	local07, local01
19684     80 2A 26 F5 | 	andn	local07, #128
19688     0F 2B 62 FC | 	wrlong	local07, local01
1968c     08 1E 86 F1 | 	sub	local01, #8
19690                 | LR__2890
19690                 | LR__2891
19690     18 1E 06 F1 | 	add	local01, #24
19694     0F 2B 0A FB | 	rdlong	local07, local01 wz
19698     18 1E 86 F1 | 	sub	local01, #24
1969c     80 00 90 AD |  if_e	jmp	#LR__2893
196a0     18 1E 06 F1 | 	add	local01, #24
196a4     0F 27 02 FB | 	rdlong	local05, local01
196a8     13 29 02 F6 | 	mov	local06, local05
196ac     18 1E 86 F1 | 	sub	local01, #24
196b0     13 28 46 F7 | 	zerox	local06, #19
196b4     14 26 46 F0 | 	shr	local05, #20
196b8     02 26 66 F0 | 	shl	local05, #2
196bc     ED 26 02 F1 | 	add	local05, __methods__
196c0     13 27 02 FB | 	rdlong	local05, local05
196c4     10 15 02 F6 | 	mov	arg02, local02
196c8     11 17 02 F6 | 	mov	arg03, local03
196cc     0F 13 02 F6 | 	mov	arg01, local01
196d0     F2 2A 02 F6 | 	mov	local07, objptr
196d4     14 E5 01 F6 | 	mov	objptr, local06
196d8     2D 26 62 FD | 	call	local05
196dc     15 E5 01 F6 | 	mov	objptr, local07
196e0     FD 2C 02 F6 | 	mov	local08, result1
196e4     00 2C 56 F2 | 	cmps	local08, #0 wc
196e8     2C 00 90 3D |  if_ae	jmp	#LR__2892
196ec     08 1E 06 F1 | 	add	local01, #8
196f0     0F 2B 02 FB | 	rdlong	local07, local01
196f4     20 2A 46 F5 | 	or	local07, #32
196f8     0F 2B 62 FC | 	wrlong	local07, local01
196fc     00 2C 4E F2 | 	cmps	local08, #0 wz
19700     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19704     F4 2C 62 FC | 	wrlong	local08, ptr___system__dat__
19708     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1970c     01 FA 65 56 |  if_ne	neg	result1, #1
19710     00 FA 05 A6 |  if_e	mov	result1, #0
19714     7C 00 90 FD | 	jmp	#LR__2896
19718                 | LR__2892
19718     16 FB 01 F6 | 	mov	result1, local08
1971c     74 00 90 FD | 	jmp	#LR__2896
19720                 | LR__2893
19720     1C 1E 06 F1 | 	add	local01, #28
19724     0F 2F 0A FB | 	rdlong	local09, local01 wz
19728     1C 1E 86 F1 | 	sub	local01, #28
1972c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19730     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
19734     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19738     01 FA 65 A6 |  if_e	neg	result1, #1
1973c     54 00 90 AD |  if_e	jmp	#LR__2896
19740     00 2C 06 F6 | 	mov	local08, #0
19744                 | LR__2894
19744     01 22 16 F2 | 	cmp	local03, #1 wc
19748     44 00 90 CD |  if_b	jmp	#LR__2895
1974c     17 29 02 F6 | 	mov	local06, local09
19750     17 27 02 F6 | 	mov	local05, local09
19754     13 28 46 F7 | 	zerox	local06, #19
19758     14 26 46 F0 | 	shr	local05, #20
1975c     02 26 66 F0 | 	shl	local05, #2
19760     ED 26 02 F1 | 	add	local05, __methods__
19764     13 27 02 FB | 	rdlong	local05, local05
19768     12 13 C2 FA | 	rdbyte	arg01, local04
1976c     0F 15 02 F6 | 	mov	arg02, local01
19770     F2 2A 02 F6 | 	mov	local07, objptr
19774     14 E5 01 F6 | 	mov	objptr, local06
19778     01 24 06 F1 | 	add	local04, #1
1977c     2D 26 62 FD | 	call	local05
19780     15 E5 01 F6 | 	mov	objptr, local07
19784     FD 2C 02 F1 | 	add	local08, result1
19788     01 22 86 F1 | 	sub	local03, #1
1978c     B4 FF 9F FD | 	jmp	#LR__2894
19790                 | LR__2895
19790     16 FB 01 F6 | 	mov	result1, local08
19794                 | LR__2896
19794     A7 F0 03 F6 | 	mov	ptra, fp
19798     B2 00 A0 FD | 	call	#popregs_
1979c                 | __system___vfswrite_ret
1979c     2D 00 64 FD | 	ret
197a0                 | 
197a0                 | __system___vfsread
197a0     03 4A 05 F6 | 	mov	COUNT_, #3
197a4     A8 00 A0 FD | 	call	#pushregs_
197a8     28 F0 07 F1 | 	add	ptra, #40
197ac     04 4E 05 F1 | 	add	fp, #4
197b0     A7 12 62 FC | 	wrlong	arg01, fp
197b4     04 4E 05 F1 | 	add	fp, #4
197b8     A7 14 62 FC | 	wrlong	arg02, fp
197bc     04 4E 05 F1 | 	add	fp, #4
197c0     A7 16 62 FC | 	wrlong	arg03, fp
197c4     04 4E 85 F1 | 	sub	fp, #4
197c8     A7 FA 01 FB | 	rdlong	result1, fp
197cc     14 4E 05 F1 | 	add	fp, #20
197d0     A7 FA 61 FC | 	wrlong	result1, fp
197d4     04 4E 05 F1 | 	add	fp, #4
197d8     A7 00 68 FC | 	wrlong	#0, fp
197dc     1C 4E 85 F1 | 	sub	fp, #28
197e0     A7 12 02 FB | 	rdlong	arg01, fp
197e4     04 4E 85 F1 | 	sub	fp, #4
197e8     08 12 06 F1 | 	add	arg01, #8
197ec     09 FB 01 FB | 	rdlong	result1, arg01
197f0     01 FA CD F7 | 	test	result1, #1 wz
197f4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
197f8     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
197fc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19800     01 FA 65 A6 |  if_e	neg	result1, #1
19804     74 02 90 AD |  if_e	jmp	#LR__2906
19808     04 4E 05 F1 | 	add	fp, #4
1980c     A7 12 02 FB | 	rdlong	arg01, fp
19810     04 4E 85 F1 | 	sub	fp, #4
19814     14 12 06 F1 | 	add	arg01, #20
19818     09 FB 09 FB | 	rdlong	result1, arg01 wz
1981c     B8 00 90 AD |  if_e	jmp	#LR__2901
19820     04 4E 05 F1 | 	add	fp, #4
19824     A7 12 02 FB | 	rdlong	arg01, fp
19828     09 17 02 F6 | 	mov	arg03, arg01
1982c     14 16 06 F1 | 	add	arg03, #20
19830     0B 1F 02 FB | 	rdlong	local01, arg03
19834     0F 21 02 F6 | 	mov	local02, local01
19838     13 1E 46 F7 | 	zerox	local01, #19
1983c     14 20 46 F0 | 	shr	local02, #20
19840     02 20 66 F0 | 	shl	local02, #2
19844     ED 20 02 F1 | 	add	local02, __methods__
19848     10 21 02 FB | 	rdlong	local02, local02
1984c     04 4E 05 F1 | 	add	fp, #4
19850     A7 14 02 FB | 	rdlong	arg02, fp
19854     04 4E 05 F1 | 	add	fp, #4
19858     A7 16 02 FB | 	rdlong	arg03, fp
1985c     0C 4E 85 F1 | 	sub	fp, #12
19860     F2 22 02 F6 | 	mov	local03, objptr
19864     0F E5 01 F6 | 	mov	objptr, local01
19868     2D 20 62 FD | 	call	local02
1986c     11 E5 01 F6 | 	mov	objptr, local03
19870     10 4E 05 F1 | 	add	fp, #16
19874     A7 FA 61 FC | 	wrlong	result1, fp
19878     10 4E 85 F1 | 	sub	fp, #16
1987c     00 FA 55 F2 | 	cmps	result1, #0 wc
19880     44 00 90 3D |  if_ae	jmp	#LR__2900
19884     04 4E 05 F1 | 	add	fp, #4
19888     A7 22 02 FB | 	rdlong	local03, fp
1988c     11 1F 02 F6 | 	mov	local01, local03
19890     08 22 06 F1 | 	add	local03, #8
19894     11 21 02 FB | 	rdlong	local02, local03
19898     20 20 46 F5 | 	or	local02, #32
1989c     08 1E 06 F1 | 	add	local01, #8
198a0     0F 21 62 FC | 	wrlong	local02, local01
198a4     0C 4E 05 F1 | 	add	fp, #12
198a8     A7 12 0A FB | 	rdlong	arg01, fp wz
198ac     10 4E 85 F1 | 	sub	fp, #16
198b0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
198b4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
198b8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
198bc     01 FA 65 56 |  if_ne	neg	result1, #1
198c0     00 FA 05 A6 |  if_e	mov	result1, #0
198c4     B4 01 90 FD | 	jmp	#LR__2906
198c8                 | LR__2900
198c8     10 4E 05 F1 | 	add	fp, #16
198cc     A7 FA 01 FB | 	rdlong	result1, fp
198d0     10 4E 85 F1 | 	sub	fp, #16
198d4     A4 01 90 FD | 	jmp	#LR__2906
198d8                 | LR__2901
198d8     04 4E 05 F1 | 	add	fp, #4
198dc     A7 12 02 FB | 	rdlong	arg01, fp
198e0     20 12 06 F1 | 	add	arg01, #32
198e4     09 13 0A FB | 	rdlong	arg01, arg01 wz
198e8     14 4E 05 F1 | 	add	fp, #20
198ec     A7 12 62 FC | 	wrlong	arg01, fp
198f0     18 4E 85 F1 | 	sub	fp, #24
198f4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
198f8     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
198fc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19900     01 FA 65 A6 |  if_e	neg	result1, #1
19904     74 01 90 AD |  if_e	jmp	#LR__2906
19908     04 4E 05 F1 | 	add	fp, #4
1990c     A7 22 02 FB | 	rdlong	local03, fp
19910     04 4E 85 F1 | 	sub	fp, #4
19914     28 22 06 F1 | 	add	local03, #40
19918     11 21 0A FB | 	rdlong	local02, local03 wz
1991c     7C 00 90 AD |  if_e	jmp	#LR__2903
19920     04 4E 05 F1 | 	add	fp, #4
19924     A7 12 02 FB | 	rdlong	arg01, fp
19928     09 23 02 F6 | 	mov	local03, arg01
1992c     28 22 06 F1 | 	add	local03, #40
19930     11 1F 02 FB | 	rdlong	local01, local03
19934     0F 21 02 F6 | 	mov	local02, local01
19938     13 1E 46 F7 | 	zerox	local01, #19
1993c     14 20 46 F0 | 	shr	local02, #20
19940     02 20 66 F0 | 	shl	local02, #2
19944     ED 20 02 F1 | 	add	local02, __methods__
19948     10 21 02 FB | 	rdlong	local02, local02
1994c     20 4E 05 F1 | 	add	fp, #32
19950     A7 16 02 F6 | 	mov	arg03, fp
19954     24 4E 85 F1 | 	sub	fp, #36
19958     00 15 06 F6 | 	mov	arg02, #256
1995c     F2 22 02 F6 | 	mov	local03, objptr
19960     0F E5 01 F6 | 	mov	objptr, local01
19964     2D 20 62 FD | 	call	local02
19968     11 E5 01 F6 | 	mov	objptr, local03
1996c     10 4E 05 F1 | 	add	fp, #16
19970     A7 FA 61 FC | 	wrlong	result1, fp
19974     00 FA 4D F2 | 	cmps	result1, #0 wz
19978     10 4E 85 F1 | 	sub	fp, #16
1997c     1C 00 90 5D |  if_ne	jmp	#LR__2902
19980     24 4E 05 F1 | 	add	fp, #36
19984     A7 20 02 FB | 	rdlong	local02, fp
19988     24 4E 85 F1 | 	sub	fp, #36
1998c     02 20 CE F7 | 	test	local02, #2 wz
19990     20 4E 05 51 |  if_ne	add	fp, #32
19994     A7 02 68 5C |  if_ne	wrlong	#1, fp
19998     20 4E 85 51 |  if_ne	sub	fp, #32
1999c                 | LR__2902
1999c                 | LR__2903
1999c     10 4E 05 F1 | 	add	fp, #16
199a0     A7 00 68 FC | 	wrlong	#0, fp
199a4     10 4E 85 F1 | 	sub	fp, #16
199a8                 | LR__2904
199a8     0C 4E 05 F1 | 	add	fp, #12
199ac     A7 22 02 FB | 	rdlong	local03, fp
199b0     0C 4E 85 F1 | 	sub	fp, #12
199b4     01 22 16 F2 | 	cmp	local03, #1 wc
199b8     B4 00 90 CD |  if_b	jmp	#LR__2905
199bc     18 4E 05 F1 | 	add	fp, #24
199c0     A7 20 02 FB | 	rdlong	local02, fp
199c4     10 23 02 F6 | 	mov	local03, local02
199c8     13 22 46 F7 | 	zerox	local03, #19
199cc     14 20 46 F0 | 	shr	local02, #20
199d0     02 20 66 F0 | 	shl	local02, #2
199d4     ED 20 02 F1 | 	add	local02, __methods__
199d8     10 21 02 FB | 	rdlong	local02, local02
199dc     14 4E 85 F1 | 	sub	fp, #20
199e0     A7 12 02 FB | 	rdlong	arg01, fp
199e4     04 4E 85 F1 | 	sub	fp, #4
199e8     F2 1E 02 F6 | 	mov	local01, objptr
199ec     11 E5 01 F6 | 	mov	objptr, local03
199f0     2D 20 62 FD | 	call	local02
199f4     0F E5 01 F6 | 	mov	objptr, local01
199f8     14 4E 05 F1 | 	add	fp, #20
199fc     A7 FA 61 FC | 	wrlong	result1, fp
19a00     14 4E 85 F1 | 	sub	fp, #20
19a04     00 FA 55 F2 | 	cmps	result1, #0 wc
19a08     64 00 90 CD |  if_b	jmp	#LR__2905
19a0c     1C 4E 05 F1 | 	add	fp, #28
19a10     A7 22 02 FB | 	rdlong	local03, fp
19a14     11 21 02 F6 | 	mov	local02, local03
19a18     01 20 06 F1 | 	add	local02, #1
19a1c     A7 20 62 FC | 	wrlong	local02, fp
19a20     08 4E 85 F1 | 	sub	fp, #8
19a24     A7 20 02 FB | 	rdlong	local02, fp
19a28     11 21 42 FC | 	wrbyte	local02, local03
19a2c     04 4E 85 F1 | 	sub	fp, #4
19a30     A7 22 02 FB | 	rdlong	local03, fp
19a34     01 22 06 F1 | 	add	local03, #1
19a38     A7 22 62 FC | 	wrlong	local03, fp
19a3c     04 4E 85 F1 | 	sub	fp, #4
19a40     A7 22 02 FB | 	rdlong	local03, fp
19a44     01 22 86 F1 | 	sub	local03, #1
19a48     A7 22 62 FC | 	wrlong	local03, fp
19a4c     14 4E 05 F1 | 	add	fp, #20
19a50     A7 22 0A FB | 	rdlong	local03, fp wz
19a54     20 4E 85 F1 | 	sub	fp, #32
19a58     4C FF 9F AD |  if_e	jmp	#LR__2904
19a5c     14 4E 05 F1 | 	add	fp, #20
19a60     A7 20 02 FB | 	rdlong	local02, fp
19a64     14 4E 85 F1 | 	sub	fp, #20
19a68     0A 20 0E F2 | 	cmp	local02, #10 wz
19a6c     38 FF 9F 5D |  if_ne	jmp	#LR__2904
19a70                 | LR__2905
19a70     10 4E 05 F1 | 	add	fp, #16
19a74     A7 FA 01 FB | 	rdlong	result1, fp
19a78     10 4E 85 F1 | 	sub	fp, #16
19a7c                 | LR__2906
19a7c     A7 F0 03 F6 | 	mov	ptra, fp
19a80     B2 00 A0 FD | 	call	#popregs_
19a84                 | __system___vfsread_ret
19a84     2D 00 64 FD | 	ret
19a88                 | 
19a88                 | __system____default_filbuf
19a88     04 4A 05 F6 | 	mov	COUNT_, #4
19a8c     A8 00 A0 FD | 	call	#pushregs_
19a90     09 1F 02 F6 | 	mov	local01, arg01
19a94     0F 21 02 FB | 	rdlong	local02, local01
19a98     0C 20 06 F1 | 	add	local02, #12
19a9c     10 FB 09 FB | 	rdlong	result1, local02 wz
19aa0     0C 20 86 F1 | 	sub	local02, #12
19aa4     20 00 90 5D |  if_ne	jmp	#LR__2910
19aa8     14 20 06 F1 | 	add	local02, #20
19aac     10 FB 01 F6 | 	mov	result1, local02
19ab0     04 20 86 F1 | 	sub	local02, #4
19ab4     10 FB 61 FC | 	wrlong	result1, local02
19ab8     04 20 86 F1 | 	sub	local02, #4
19abc     02 00 80 FF 
19ac0     10 01 68 FC | 	wrlong	##1024, local02
19ac4     0C 20 86 F1 | 	sub	local02, #12
19ac8                 | LR__2910
19ac8     14 1E 06 F1 | 	add	local01, #20
19acc     0F 23 02 FB | 	rdlong	local03, local01
19ad0     11 25 02 F6 | 	mov	local04, local03
19ad4     14 1E 86 F1 | 	sub	local01, #20
19ad8     13 24 46 F7 | 	zerox	local04, #19
19adc     14 22 46 F0 | 	shr	local03, #20
19ae0     02 22 66 F0 | 	shl	local03, #2
19ae4     ED 22 02 F1 | 	add	local03, __methods__
19ae8     11 23 02 FB | 	rdlong	local03, local03
19aec     10 20 06 F1 | 	add	local02, #16
19af0     10 15 02 FB | 	rdlong	arg02, local02
19af4     04 20 86 F1 | 	sub	local02, #4
19af8     10 17 02 FB | 	rdlong	arg03, local02
19afc     0C 20 86 F1 | 	sub	local02, #12
19b00     0F 13 02 F6 | 	mov	arg01, local01
19b04     F2 1E 02 F6 | 	mov	local01, objptr
19b08     12 E5 01 F6 | 	mov	objptr, local04
19b0c     2D 22 62 FD | 	call	local03
19b10     0F E5 01 F6 | 	mov	objptr, local01
19b14     FD 24 02 F6 | 	mov	local04, result1
19b18     00 24 56 F2 | 	cmps	local04, #0 wc
19b1c     01 FA 65 C6 |  if_b	neg	result1, #1
19b20     28 00 90 CD |  if_b	jmp	#LR__2911
19b24     10 25 62 FC | 	wrlong	local04, local02
19b28     10 20 06 F1 | 	add	local02, #16
19b2c     10 23 02 FB | 	rdlong	local03, local02
19b30     0C 20 86 F1 | 	sub	local02, #12
19b34     10 23 62 FC | 	wrlong	local03, local02
19b38     04 20 06 F1 | 	add	local02, #4
19b3c     10 23 02 FB | 	rdlong	local03, local02
19b40     01 22 46 F5 | 	or	local03, #1
19b44     10 23 62 FC | 	wrlong	local03, local02
19b48     12 FB 01 F6 | 	mov	result1, local04
19b4c                 | LR__2911
19b4c     A7 F0 03 F6 | 	mov	ptra, fp
19b50     B2 00 A0 FD | 	call	#popregs_
19b54                 | __system____default_filbuf_ret
19b54     2D 00 64 FD | 	ret
19b58                 | 
19b58                 | __system__getlower_0847
19b58     41 12 56 F2 | 	cmps	arg01, #65 wc
19b5c     10 00 90 CD |  if_b	jmp	#LR__2920
19b60     5B 12 56 F2 | 	cmps	arg01, #91 wc
19b64     09 FB 01 C6 |  if_b	mov	result1, arg01
19b68     20 FA 05 C1 |  if_b	add	result1, #32
19b6c     04 00 90 CD |  if_b	jmp	#__system__getlower_0847_ret
19b70                 | LR__2920
19b70     09 FB 01 F6 | 	mov	result1, arg01
19b74                 | __system__getlower_0847_ret
19b74     2D 00 64 FD | 	ret
19b78                 | 
19b78                 | __system___pat_match
19b78     08 4A 05 F6 | 	mov	COUNT_, #8
19b7c     A8 00 A0 FD | 	call	#pushregs_
19b80     09 1F 02 F6 | 	mov	local01, arg01
19b84                 | LR__2930
19b84     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
19b88     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
19b8c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
19b90     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
19b94     2C 00 90 AD |  if_e	jmp	#LR__2931
19b98     0A 13 C2 FA | 	rdbyte	arg01, arg02
19b9c     B8 FF BF FD | 	call	#__system__getlower_0847
19ba0     FD 22 02 F6 | 	mov	local03, result1
19ba4     0F 13 C2 FA | 	rdbyte	arg01, local01
19ba8     AC FF BF FD | 	call	#__system__getlower_0847
19bac     11 FB 09 F2 | 	cmp	result1, local03 wz
19bb0     00 FA 05 56 |  if_ne	mov	result1, #0
19bb4     FC 00 90 5D |  if_ne	jmp	#LR__2939
19bb8     01 1E 06 F1 | 	add	local01, #1
19bbc     01 14 06 F1 | 	add	arg02, #1
19bc0     C0 FF 9F FD | 	jmp	#LR__2930
19bc4                 | LR__2931
19bc4     0A 23 C2 FA | 	rdbyte	local03, arg02
19bc8     2A 22 0E F2 | 	cmp	local03, #42 wz
19bcc     D4 00 90 5D |  if_ne	jmp	#LR__2938
19bd0     01 14 06 F1 | 	add	arg02, #1
19bd4     0A 21 C2 FA | 	rdbyte	local02, arg02
19bd8     01 14 86 F1 | 	sub	arg02, #1
19bdc     2E 20 0E F2 | 	cmp	local02, #46 wz
19be0     28 00 90 5D |  if_ne	jmp	#LR__2932
19be4     02 14 06 F1 | 	add	arg02, #2
19be8     0A 21 C2 FA | 	rdbyte	local02, arg02
19bec     02 14 86 F1 | 	sub	arg02, #2
19bf0     2A 20 0E F2 | 	cmp	local02, #42 wz
19bf4     03 14 06 A1 |  if_e	add	arg02, #3
19bf8     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
19bfc     03 14 86 A1 |  if_e	sub	arg02, #3
19c00     12 27 0A A6 |  if_e	mov	local05, local04 wz
19c04     01 FA 05 A6 |  if_e	mov	result1, #1
19c08     A8 00 90 AD |  if_e	jmp	#LR__2939
19c0c                 | LR__2932
19c0c     01 14 06 F1 | 	add	arg02, #1
19c10     00 28 06 F6 | 	mov	local06, #0
19c14     97 1E 48 FB | 	callpa	#(@LR__2935-@LR__2933)>>2,fcache_load_ptr_
19c18                 | LR__2933
19c18     14 2B 02 F6 | 	mov	local07, local06
19c1c     0A 2B 02 F1 | 	add	local07, arg02
19c20     15 2B CA FA | 	rdbyte	local07, local07 wz
19c24     14 27 02 56 |  if_ne	mov	local05, local06
19c28     01 26 06 51 |  if_ne	add	local05, #1
19c2c     13 29 02 56 |  if_ne	mov	local06, local05
19c30     E4 FF 9F 5D |  if_ne	jmp	#LR__2933
19c34     00 2C 06 F6 | 	mov	local08, #0
19c38                 | LR__2934
19c38     16 2B 02 F6 | 	mov	local07, local08
19c3c     0F 2B 02 F1 | 	add	local07, local01
19c40     15 2B CA FA | 	rdbyte	local07, local07 wz
19c44     16 27 02 56 |  if_ne	mov	local05, local08
19c48     01 26 06 51 |  if_ne	add	local05, #1
19c4c     13 2D 02 56 |  if_ne	mov	local08, local05
19c50     E4 FF 9F 5D |  if_ne	jmp	#LR__2934
19c54                 | LR__2935
19c54     14 2D 52 F2 | 	cmps	local08, local06 wc
19c58     00 FA 05 C6 |  if_b	mov	result1, #0
19c5c     54 00 90 CD |  if_b	jmp	#LR__2939
19c60     16 21 02 F6 | 	mov	local02, local08
19c64     14 21 82 F1 | 	sub	local02, local06
19c68     10 1F 02 F1 | 	add	local01, local02
19c6c                 | LR__2936
19c6c     01 28 56 F2 | 	cmps	local06, #1 wc
19c70     30 00 90 CD |  if_b	jmp	#LR__2937
19c74     0F 13 C2 FA | 	rdbyte	arg01, local01
19c78     DC FE BF FD | 	call	#__system__getlower_0847
19c7c     FD 2C 02 F6 | 	mov	local08, result1
19c80     0A 13 C2 FA | 	rdbyte	arg01, arg02
19c84     D0 FE BF FD | 	call	#__system__getlower_0847
19c88     FD 2C 0A F2 | 	cmp	local08, result1 wz
19c8c     00 FA 05 56 |  if_ne	mov	result1, #0
19c90     20 00 90 5D |  if_ne	jmp	#LR__2939
19c94     01 1E 06 F1 | 	add	local01, #1
19c98     01 14 06 F1 | 	add	arg02, #1
19c9c     01 28 86 F1 | 	sub	local06, #1
19ca0     C8 FF 9F FD | 	jmp	#LR__2936
19ca4                 | LR__2937
19ca4                 | LR__2938
19ca4     0A 2D CA FA | 	rdbyte	local08, arg02 wz
19ca8     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
19cac     01 FA 05 A6 |  if_e	mov	result1, #1
19cb0     00 FA 05 56 |  if_ne	mov	result1, #0
19cb4                 | LR__2939
19cb4     A7 F0 03 F6 | 	mov	ptra, fp
19cb8     B2 00 A0 FD | 	call	#popregs_
19cbc                 | __system___pat_match_ret
19cbc     2D 00 64 FD | 	ret
19cc0                 | 
19cc0                 | _fatfs_cc_ff_uni2oem
19cc0     00 00 06 F6 | 	mov	_var01, #0
19cc4     80 12 16 F2 | 	cmp	arg01, #128 wc
19cc8     09 01 02 C6 |  if_b	mov	_var01, arg01
19ccc     58 00 90 CD |  if_b	jmp	#LR__2944
19cd0     80 00 00 FF 
19cd4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
19cd8     4C 00 90 3D |  if_ae	jmp	#LR__2943
19cdc     0A FB 31 F9 | 	getword	result1, arg02, #0
19ce0     01 00 00 FF 
19ce4     52 FB 0D F2 | 	cmp	result1, ##850 wz
19ce8     3C 00 90 5D |  if_ne	jmp	#LR__2943
19cec                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
19cec     00 00 06 F6 | 	mov	_var01, #0
19cf0     97 14 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
19cf4                 | LR__2940
19cf4     00 FB 31 F9 | 	getword	result1, _var01, #0
19cf8     80 FA 15 F2 | 	cmp	result1, #128 wc
19cfc     1C 00 90 3D |  if_ae	jmp	#LR__2942
19d00     00 FB 31 F9 | 	getword	result1, _var01, #0
19d04     01 FA 65 F0 | 	shl	result1, #1
19d08     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
19d0c     FD FA E1 FA | 	rdword	result1, result1
19d10     FD 12 0A F2 | 	cmp	arg01, result1 wz
19d14     01 00 06 51 |  if_ne	add	_var01, #1
19d18     D8 FF 9F 5D |  if_ne	jmp	#LR__2940
19d1c                 | LR__2941
19d1c                 | LR__2942
19d1c     00 01 32 F9 | 	getword	_var01, _var01, #0
19d20     80 00 06 F1 | 	add	_var01, #128
19d24     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
19d28                 | LR__2943
19d28                 | LR__2944
19d28                 | ' 			c = (c + 0x80) & 0xFF;
19d28                 | ' 		}
19d28                 | ' 	}
19d28                 | ' 
19d28                 | ' 	return c;
19d28     00 FB 01 F6 | 	mov	result1, _var01
19d2c                 | _fatfs_cc_ff_uni2oem_ret
19d2c     2D 00 64 FD | 	ret
19d30                 | 
19d30                 | _fatfs_cc_ff_oem2uni
19d30     00 00 06 F6 | 	mov	_var01, #0
19d34     09 FB 31 F9 | 	getword	result1, arg01, #0
19d38     80 FA 15 F2 | 	cmp	result1, #128 wc
19d3c     09 01 02 C6 |  if_b	mov	_var01, arg01
19d40     2C 00 90 CD |  if_b	jmp	#LR__2951
19d44     0A 15 32 F9 | 	getword	arg02, arg02, #0
19d48     01 00 00 FF 
19d4c     52 15 0E F2 | 	cmp	arg02, ##850 wz
19d50     1C 00 90 5D |  if_ne	jmp	#LR__2950
19d54     09 FB 31 F9 | 	getword	result1, arg01, #0
19d58     00 FB 15 F2 | 	cmp	result1, #256 wc
19d5c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
19d60     80 12 86 C1 |  if_b	sub	arg01, #128
19d64     01 12 66 C0 |  if_b	shl	arg01, #1
19d68     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
19d6c     09 01 E2 CA |  if_b	rdword	_var01, arg01
19d70                 | LR__2950
19d70                 | LR__2951
19d70                 | ' 		}
19d70                 | ' 	}
19d70                 | ' 
19d70                 | ' 	return c;
19d70     00 FB 01 F6 | 	mov	result1, _var01
19d74                 | _fatfs_cc_ff_oem2uni_ret
19d74     2D 00 64 FD | 	ret
19d78                 | 
19d78                 | _fatfs_cc_ff_wtoupper
19d78     09 01 02 F6 | 	mov	_var01, arg01
19d7c     80 00 00 FF 
19d80     00 00 16 F2 | 	cmp	_var01, ##65536 wc
19d84     60 01 90 3D |  if_ae	jmp	#LR__2973
19d88     00 03 02 F6 | 	mov	_var02, _var01
19d8c     01 01 32 F9 | 	getword	_var01, _var02, #0
19d90     08 00 00 FF 
19d94     00 00 16 F2 | 	cmp	_var01, ##4096 wc
19d98     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
19d9c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
19da0     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
19da4     01 00 00 3F 
19da8     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
19dac     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
19db0     01 00 00 3F 
19db4     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
19db8     02 07 02 F6 | 	mov	_var04, _var03
19dbc                 | ' 		uc = (WORD)uni;
19dbc                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
19dbc                 | ' 		for (;;) {
19dbc                 | LR__2960
19dbc     03 09 E2 FA | 	rdword	_var05, _var04
19dc0     04 05 02 F6 | 	mov	_var03, _var05
19dc4     0F 04 4E F7 | 	zerox	_var03, #15 wz
19dc8     02 06 06 F1 | 	add	_var04, #2
19dcc     14 01 90 AD |  if_e	jmp	#LR__2972
19dd0     01 05 32 F9 | 	getword	_var03, _var02, #0
19dd4     04 01 32 F9 | 	getword	_var01, _var05, #0
19dd8     00 05 12 F2 | 	cmp	_var03, _var01 wc
19ddc     04 01 90 CD |  if_b	jmp	#LR__2972
19de0     03 0B E2 FA | 	rdword	_var06, _var04
19de4     05 0D 32 F9 | 	getword	_var07, _var06, #0
19de8     08 0C 46 F0 | 	shr	_var07, #8
19dec     05 0B 32 F9 | 	getword	_var06, _var06, #0
19df0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
19df4     01 05 32 F9 | 	getword	_var03, _var02, #0
19df8     04 0F 32 F9 | 	getword	_var08, _var05, #0
19dfc     05 01 32 F9 | 	getword	_var01, _var06, #0
19e00     00 0F 02 F1 | 	add	_var08, _var01
19e04     07 05 52 F2 | 	cmps	_var03, _var08 wc
19e08     02 06 06 F1 | 	add	_var04, #2
19e0c     C4 00 90 3D |  if_ae	jmp	#LR__2971
19e10                 | ' 				switch (cmd) {
19e10     06 11 32 F9 | 	getword	_var09, _var07, #0
19e14     09 10 26 F3 | 	fle	_var09, #9
19e18     30 10 62 FD | 	jmprel	_var09
19e1c                 | LR__2961
19e1c     24 00 90 FD | 	jmp	#LR__2962
19e20     3C 00 90 FD | 	jmp	#LR__2963
19e24     54 00 90 FD | 	jmp	#LR__2964
19e28     5C 00 90 FD | 	jmp	#LR__2965
19e2c     64 00 90 FD | 	jmp	#LR__2966
19e30     6C 00 90 FD | 	jmp	#LR__2967
19e34     74 00 90 FD | 	jmp	#LR__2968
19e38     7C 00 90 FD | 	jmp	#LR__2969
19e3c     84 00 90 FD | 	jmp	#LR__2970
19e40     A0 00 90 FD | 	jmp	#LR__2972
19e44                 | LR__2962
19e44     01 03 32 F9 | 	getword	_var02, _var02, #0
19e48     04 09 32 F9 | 	getword	_var05, _var05, #0
19e4c     04 03 82 F1 | 	sub	_var02, _var05
19e50     01 02 66 F0 | 	shl	_var02, #1
19e54     03 03 02 F1 | 	add	_var02, _var04
19e58     01 03 E2 FA | 	rdword	_var02, _var02
19e5c     84 00 90 FD | 	jmp	#LR__2972
19e60                 | LR__2963
19e60     01 05 32 F9 | 	getword	_var03, _var02, #0
19e64     01 03 32 F9 | 	getword	_var02, _var02, #0
19e68     04 09 32 F9 | 	getword	_var05, _var05, #0
19e6c     04 03 82 F1 | 	sub	_var02, _var05
19e70     01 02 06 F5 | 	and	_var02, #1
19e74     02 03 C2 F2 | 	subr	_var02, _var03
19e78     68 00 90 FD | 	jmp	#LR__2972
19e7c                 | LR__2964
19e7c     01 03 32 F9 | 	getword	_var02, _var02, #0
19e80     10 02 86 F1 | 	sub	_var02, #16
19e84     5C 00 90 FD | 	jmp	#LR__2972
19e88                 | LR__2965
19e88     01 03 32 F9 | 	getword	_var02, _var02, #0
19e8c     20 02 86 F1 | 	sub	_var02, #32
19e90     50 00 90 FD | 	jmp	#LR__2972
19e94                 | LR__2966
19e94     01 03 32 F9 | 	getword	_var02, _var02, #0
19e98     30 02 86 F1 | 	sub	_var02, #48
19e9c     44 00 90 FD | 	jmp	#LR__2972
19ea0                 | LR__2967
19ea0     01 03 32 F9 | 	getword	_var02, _var02, #0
19ea4     1A 02 86 F1 | 	sub	_var02, #26
19ea8     38 00 90 FD | 	jmp	#LR__2972
19eac                 | LR__2968
19eac     01 03 32 F9 | 	getword	_var02, _var02, #0
19eb0     08 02 06 F1 | 	add	_var02, #8
19eb4     2C 00 90 FD | 	jmp	#LR__2972
19eb8                 | LR__2969
19eb8     01 03 32 F9 | 	getword	_var02, _var02, #0
19ebc     50 02 86 F1 | 	sub	_var02, #80
19ec0     20 00 90 FD | 	jmp	#LR__2972
19ec4                 | LR__2970
19ec4     01 03 32 F9 | 	getword	_var02, _var02, #0
19ec8     0E 00 00 FF 
19ecc     60 02 86 F1 | 	sub	_var02, ##7264
19ed0                 | ' 				}
19ed0                 | ' 				break;
19ed0     10 00 90 FD | 	jmp	#LR__2972
19ed4                 | LR__2971
19ed4     0F 0C 4E F7 | 	zerox	_var07, #15 wz
19ed8     02 0A 06 AA |  if_e	mul	_var06, #2
19edc     05 07 02 A1 |  if_e	add	_var04, _var06
19ee0     D8 FE 9F FD | 	jmp	#LR__2960
19ee4                 | LR__2972
19ee4     01 01 32 F9 | 	getword	_var01, _var02, #0
19ee8                 | LR__2973
19ee8                 | ' 		}
19ee8                 | ' 		uni = uc;
19ee8                 | ' 	}
19ee8                 | ' 
19ee8                 | ' 	return uni;
19ee8     00 FB 01 F6 | 	mov	result1, _var01
19eec                 | _fatfs_cc_ff_wtoupper_ret
19eec     2D 00 64 FD | 	ret
19ef0                 | 
19ef0                 | _fatfs_cc_strncpy
19ef0     09 01 02 F6 | 	mov	_var01, arg01
19ef4     97 12 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
19ef8                 | ' 
19ef8                 | ' 	dscan = dst;
19ef8                 | ' 	sscan = src;
19ef8                 | ' 	count = n;
19ef8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
19ef8                 | LR__2980
19ef8     01 16 86 F1 | 	sub	arg03, #1
19efc     00 16 56 F2 | 	cmps	arg03, #0 wc
19f00     18 00 90 CD |  if_b	jmp	#LR__2982
19f04     0A FB C1 FA | 	rdbyte	result1, arg02
19f08     00 FB 41 FC | 	wrbyte	result1, _var01
19f0c     01 14 06 F1 | 	add	arg02, #1
19f10     00 FB C9 FA | 	rdbyte	result1, _var01 wz
19f14                 | ' 		continue;
19f14     01 00 06 F1 | 	add	_var01, #1
19f18     DC FF 9F 5D |  if_ne	jmp	#LR__2980
19f1c                 | LR__2981
19f1c                 | LR__2982
19f1c     97 0C 48 FB | 	callpa	#(@LR__2984-@LR__2983)>>2,fcache_load_ptr_
19f20                 | ' 	while (--count >= 0)
19f20                 | LR__2983
19f20     01 16 86 F1 | 	sub	arg03, #1
19f24     00 16 56 F2 | 	cmps	arg03, #0 wc
19f28     00 03 02 36 |  if_ae	mov	_var02, _var01
19f2c     01 00 06 31 |  if_ae	add	_var01, #1
19f30     01 01 48 3C |  if_ae	wrbyte	#0, _var02
19f34     E8 FF 9F 3D |  if_ae	jmp	#LR__2983
19f38                 | LR__2984
19f38                 | ' 		*dscan++ = '\0';
19f38                 | ' 	return(dst);
19f38     09 FB 01 F6 | 	mov	result1, arg01
19f3c                 | _fatfs_cc_strncpy_ret
19f3c     2D 00 64 FD | 	ret
19f40                 | 
19f40                 | _fatfs_cc_memcmp
19f40                 | ' 	for (n = size; n > 0; n--)
19f40     00 16 0E F2 | 	cmp	arg03, #0 wz
19f44     28 00 90 AD |  if_e	jmp	#LR__2991
19f48                 | LR__2990
19f48     09 01 C2 FA | 	rdbyte	_var01, arg01
19f4c     0A 03 C2 FA | 	rdbyte	_var02, arg02
19f50     01 01 0A F2 | 	cmp	_var01, _var02 wz
19f54     01 12 06 A1 |  if_e	add	arg01, #1
19f58     01 14 06 A1 |  if_e	add	arg02, #1
19f5c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
19f5c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
19f60     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
19f64     01 FB 81 51 |  if_ne	sub	result1, _var02
19f68     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
19f6c     F6 17 6E FB | 	djnz	arg03, #LR__2990
19f70                 | LR__2991
19f70                 | ' 
19f70                 | ' 	return(0);
19f70     00 FA 05 F6 | 	mov	result1, #0
19f74                 | _fatfs_cc_memcmp_ret
19f74     2D 00 64 FD | 	ret
19f78                 | 
19f78                 | _fatfs_cc_strncmp
19f78     09 01 0A F6 | 	mov	_var01, arg01 wz
19f7c     14 00 90 5D |  if_ne	jmp	#LR__3000
19f80                 | ' 		return scan2 ? -1 : 0;
19f80     00 14 0E F2 | 	cmp	arg02, #0 wz
19f84     01 02 66 56 |  if_ne	neg	_var02, #1
19f88     00 02 06 A6 |  if_e	mov	_var02, #0
19f8c     01 FB 01 F6 | 	mov	result1, _var02
19f90     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
19f94                 | LR__3000
19f94     00 14 0E F2 | 	cmp	arg02, #0 wz
19f98     01 FA 05 A6 |  if_e	mov	result1, #1
19f9c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
19fa0     0B 05 02 F6 | 	mov	_var03, arg03
19fa4     97 16 48 FB | 	callpa	#(@LR__3002-@LR__3001)>>2,fcache_load_ptr_
19fa8                 | ' 	count = n;
19fa8                 | ' 	do {
19fa8                 | LR__3001
19fa8     00 07 C2 FA | 	rdbyte	_var04, _var01
19fac     0A 09 02 F6 | 	mov	_var05, arg02
19fb0     04 0B C2 FA | 	rdbyte	_var06, _var05
19fb4     01 04 86 F1 | 	sub	_var03, #1
19fb8     00 04 56 F2 | 	cmps	_var03, #0 wc
19fbc     01 00 06 F1 | 	add	_var01, #1
19fc0     01 14 06 F1 | 	add	arg02, #1
19fc4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
19fc8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3003
19fcc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
19fd0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3001
19fd4                 | LR__3002
19fd4                 | LR__3003
19fd4     00 04 56 F2 | 	cmps	_var03, #0 wc
19fd8                 | ' 		return(0);
19fd8     00 FA 05 C6 |  if_b	mov	result1, #0
19fdc     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
19fe0     05 07 0A F2 | 	cmp	_var04, _var06 wz
19fe4                 | ' 		return(0);
19fe4     00 FA 05 A6 |  if_e	mov	result1, #0
19fe8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
19fec     00 06 0E F2 | 	cmp	_var04, #0 wz
19ff0                 | ' 		return(-1);
19ff0     01 FA 65 A6 |  if_e	neg	result1, #1
19ff4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
19ff8     00 0A 0E F2 | 	cmp	_var06, #0 wz
19ffc                 | ' 		return(1);
19ffc     01 FA 05 A6 |  if_e	mov	result1, #1
1a000                 | ' 		return(c1 - c2);
1a000     03 FB 01 56 |  if_ne	mov	result1, _var04
1a004     05 FB 81 51 |  if_ne	sub	result1, _var06
1a008                 | _fatfs_cc_strncmp_ret
1a008     2D 00 64 FD | 	ret
1a00c                 | 
1a00c                 | _fatfs_cc_strchr
1a00c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
1a00c                 | ' 	while ((c = *s++) != (char) charwanted)
1a00c                 | LR__3010
1a00c     09 01 02 F6 | 	mov	_var01, arg01
1a010     00 03 C2 FA | 	rdbyte	_var02, _var01
1a014     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1a018     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1a01c     03 05 0A F2 | 	cmp	_var03, _var04 wz
1a020     01 12 06 F1 | 	add	arg01, #1
1a024     14 00 90 AD |  if_e	jmp	#LR__3011
1a028     01 05 02 F6 | 	mov	_var03, _var02
1a02c     07 04 4E F7 | 	zerox	_var03, #7 wz
1a030     00 FA 05 A6 |  if_e	mov	result1, #0
1a034     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1a038     D0 FF 9F FD | 	jmp	#LR__3010
1a03c                 | LR__3011
1a03c                 | ' 	return((char *)--s);
1a03c     01 12 86 F1 | 	sub	arg01, #1
1a040     09 FB 01 F6 | 	mov	result1, arg01
1a044                 | _fatfs_cc_strchr_ret
1a044     2D 00 64 FD | 	ret
1a048                 | 
1a048                 | _fatfs_cc_disk_initialize
1a048     04 4A 05 F6 | 	mov	COUNT_, #4
1a04c     A8 00 A0 FD | 	call	#pushregs_
1a050     40 F0 07 F1 | 	add	ptra, #64
1a054     04 4E 05 F1 | 	add	fp, #4
1a058     A7 12 42 FC | 	wrbyte	arg01, fp
1a05c     01 00 00 FF 
1a060     14 E4 05 F1 | 	add	objptr, ##532
1a064     F2 18 02 FB | 	rdlong	arg04, objptr
1a068     2C 4E 05 F1 | 	add	fp, #44
1a06c     A7 18 62 FC | 	wrlong	arg04, fp
1a070     04 E4 85 F1 | 	sub	objptr, #4
1a074     F2 18 02 FB | 	rdlong	arg04, objptr
1a078     04 4E 05 F1 | 	add	fp, #4
1a07c     A7 18 62 FC | 	wrlong	arg04, fp
1a080     08 E4 05 F1 | 	add	objptr, #8
1a084     F2 18 02 FB | 	rdlong	arg04, objptr
1a088     04 4E 05 F1 | 	add	fp, #4
1a08c     A7 18 62 FC | 	wrlong	arg04, fp
1a090     04 E4 05 F1 | 	add	objptr, #4
1a094     F2 18 02 FB | 	rdlong	arg04, objptr
1a098     04 4E 05 F1 | 	add	fp, #4
1a09c     A7 18 62 FC | 	wrlong	arg04, fp
1a0a0     04 E4 05 F1 | 	add	objptr, #4
1a0a4     F2 02 48 FC | 	wrbyte	#1, objptr
1a0a8     01 00 00 FF 
1a0ac     20 E4 85 F1 | 	sub	objptr, ##544
1a0b0     38 4E 85 F1 | 	sub	fp, #56
1a0b4     A7 18 CA FA | 	rdbyte	arg04, fp wz
1a0b8     04 4E 85 F1 | 	sub	fp, #4
1a0bc                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1a0bc                 | '             return RES_NOTRDY;
1a0bc     03 FA 05 56 |  if_ne	mov	result1, #3
1a0c0     D8 05 90 5D |  if_ne	jmp	#LR__3038
1a0c4     13 00 00 FF 
1a0c8     10 13 06 F6 | 	mov	arg01, ##10000
1a0cc     A0 9C BF FD | 	call	#__system___waitus
1a0d0     30 4E 05 F1 | 	add	fp, #48
1a0d4     A7 12 02 FB | 	rdlong	arg01, fp
1a0d8     09 01 08 FC | 	wrpin	#0, arg01
1a0dc     04 4E 05 F1 | 	add	fp, #4
1a0e0     A7 12 02 FB | 	rdlong	arg01, fp
1a0e4     09 01 08 FC | 	wrpin	#0, arg01
1a0e8     04 4E 05 F1 | 	add	fp, #4
1a0ec     A7 12 02 FB | 	rdlong	arg01, fp
1a0f0     09 01 08 FC | 	wrpin	#0, arg01
1a0f4     04 4E 05 F1 | 	add	fp, #4
1a0f8     A7 12 02 FB | 	rdlong	arg01, fp
1a0fc     09 00 80 FF 
1a100     09 01 08 FC | 	wrpin	##4608, arg01
1a104     0C 4E 85 F1 | 	sub	fp, #12
1a108     A7 12 02 FB | 	rdlong	arg01, fp
1a10c     59 12 62 FD | 	drvh	arg01
1a110     04 4E 05 F1 | 	add	fp, #4
1a114     A7 12 02 FB | 	rdlong	arg01, fp
1a118     59 12 62 FD | 	drvh	arg01
1a11c     04 4E 05 F1 | 	add	fp, #4
1a120     A7 12 02 FB | 	rdlong	arg01, fp
1a124     59 12 62 FD | 	drvh	arg01
1a128     04 4E 05 F1 | 	add	fp, #4
1a12c     A7 12 02 FB | 	rdlong	arg01, fp
1a130     59 12 62 FD | 	drvh	arg01
1a134     20 4E 85 F1 | 	sub	fp, #32
1a138     00 04 80 FF 
1a13c     A7 20 68 FC | 	wrlong	##524304, fp
1a140     04 4E 05 F1 | 	add	fp, #4
1a144     20 03 80 FF 
1a148     A7 90 68 FC | 	wrlong	##409672, fp
1a14c     14 4E 05 F1 | 	add	fp, #20
1a150     A7 1E 02 FB | 	rdlong	local01, fp
1a154     18 4E 85 F1 | 	sub	fp, #24
1a158     A7 16 02 FB | 	rdlong	arg03, fp
1a15c     40 1E 62 FD | 	dirl	local01
1a160     A0 03 80 FF 
1a164     0F 91 08 FC | 	wrpin	##475208, local01
1a168     0F 17 12 FC | 	wxpin	arg03, local01
1a16c     0F 01 28 FC | 	wypin	#0, local01
1a170     41 1E 62 FD | 	dirh	local01
1a174     1C 4E 05 F1 | 	add	fp, #28
1a178     A7 20 02 FB | 	rdlong	local02, fp
1a17c     10 1F 82 F1 | 	sub	local01, local02
1a180     07 1E 06 F5 | 	and	local01, #7
1a184     18 1E 66 F0 | 	shl	local01, #24
1a188     78 14 06 F6 | 	mov	arg02, #120
1a18c     0F 15 42 F5 | 	or	arg02, local01
1a190     14 4E 85 F1 | 	sub	fp, #20
1a194     A7 14 62 FC | 	wrlong	arg02, fp
1a198     14 4E 05 F1 | 	add	fp, #20
1a19c     A7 12 02 FB | 	rdlong	arg01, fp
1a1a0     10 14 26 F4 | 	bith	arg02, #16
1a1a4     40 12 62 FD | 	dirl	arg01
1a1a8     09 15 02 FC | 	wrpin	arg02, arg01
1a1ac     09 3F 18 FC | 	wxpin	#31, arg01
1a1b0     FF FF FF FF 
1a1b4     09 FF 2B FC | 	wypin	##-1, arg01
1a1b8     41 12 62 FD | 	dirh	arg01
1a1bc     04 4E 85 F1 | 	sub	fp, #4
1a1c0     A7 14 02 FB | 	rdlong	arg02, fp
1a1c4     08 4E 05 F1 | 	add	fp, #8
1a1c8     A7 22 02 FB | 	rdlong	local03, fp
1a1cc     11 15 82 F1 | 	sub	arg02, local03
1a1d0     07 14 06 F5 | 	and	arg02, #7
1a1d4     18 14 66 F0 | 	shl	arg02, #24
1a1d8     14 4E 85 F1 | 	sub	fp, #20
1a1dc     A7 14 62 FC | 	wrlong	arg02, fp
1a1e0     29 00 00 FF 
1a1e4     7A 14 46 F5 | 	or	arg02, ##21114
1a1e8     A7 14 62 FC | 	wrlong	arg02, fp
1a1ec     14 4E 05 F1 | 	add	fp, #20
1a1f0     A7 12 02 FB | 	rdlong	arg01, fp
1a1f4     40 12 62 FD | 	dirl	arg01
1a1f8     09 15 02 FC | 	wrpin	arg02, arg01
1a1fc     09 4F 18 FC | 	wxpin	#39, arg01
1a200     09 01 28 FC | 	wypin	#0, arg01
1a204     41 12 62 FD | 	dirh	arg01
1a208     28 4E 85 F1 | 	sub	fp, #40
1a20c     A7 12 02 F6 | 	mov	arg01, fp
1a210     14 4E 85 F1 | 	sub	fp, #20
1a214     0A 14 06 F6 | 	mov	arg02, #10
1a218     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a21c     00 12 06 F6 | 	mov	arg01, #0
1a220     00 14 06 F6 | 	mov	arg02, #0
1a224     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a228     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0891
1a22c     64 12 06 F6 | 	mov	arg01, #100
1a230     3C 9B BF FD | 	call	#__system___waitus
1a234     14 4E 05 F1 | 	add	fp, #20
1a238     A7 12 02 F6 | 	mov	arg01, fp
1a23c     14 4E 85 F1 | 	sub	fp, #20
1a240     0A 14 06 F6 | 	mov	arg02, #10
1a244     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a248     0C 4E 05 F1 | 	add	fp, #12
1a24c     A7 00 48 FC | 	wrbyte	#0, fp
1a250     0C 4E 85 F1 | 	sub	fp, #12
1a254     00 12 06 F6 | 	mov	arg01, #0
1a258     00 14 06 F6 | 	mov	arg02, #0
1a25c     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a260     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1a264     01 18 0E F2 | 	cmp	arg04, #1 wz
1a268     B8 03 90 5D |  if_ne	jmp	#LR__3037
1a26c     08 12 06 F6 | 	mov	arg01, #8
1a270     AA 15 06 F6 | 	mov	arg02, #426
1a274     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a278     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a27c     01 FA 0D F2 | 	cmp	result1, #1 wz
1a280     98 01 90 5D |  if_ne	jmp	#LR__3023
1a284     14 4E 05 F1 | 	add	fp, #20
1a288     A7 12 02 F6 | 	mov	arg01, fp
1a28c     14 4E 85 F1 | 	sub	fp, #20
1a290     04 14 06 F6 | 	mov	arg02, #4
1a294     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a298     16 4E 05 F1 | 	add	fp, #22
1a29c     A7 24 C2 FA | 	rdbyte	local04, fp
1a2a0     16 4E 85 F1 | 	sub	fp, #22
1a2a4     01 24 0E F2 | 	cmp	local04, #1 wz
1a2a8     17 4E 05 A1 |  if_e	add	fp, #23
1a2ac     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1a2b0     17 4E 85 A1 |  if_e	sub	fp, #23
1a2b4     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1a2b8     68 03 90 5D |  if_ne	jmp	#LR__3036
1a2bc                 | ' 				for (tmr = 1000; tmr; tmr--) {
1a2bc     18 4E 05 F1 | 	add	fp, #24
1a2c0     01 00 80 FF 
1a2c4     A7 D0 6B FC | 	wrlong	##1000, fp
1a2c8     18 4E 85 F1 | 	sub	fp, #24
1a2cc                 | LR__3020
1a2cc     18 4E 05 F1 | 	add	fp, #24
1a2d0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a2d4     18 4E 85 F1 | 	sub	fp, #24
1a2d8     3C 00 90 AD |  if_e	jmp	#LR__3021
1a2dc     A9 12 06 F6 | 	mov	arg01, #169
1a2e0     1E 14 C6 F9 | 	decod	arg02, #30
1a2e4     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a2e8     FD 24 02 F6 | 	mov	local04, result1
1a2ec     07 24 4E F7 | 	zerox	local04, #7 wz
1a2f0     24 00 90 AD |  if_e	jmp	#LR__3021
1a2f4     01 00 00 FF 
1a2f8     E8 13 06 F6 | 	mov	arg01, ##1000
1a2fc     70 9A BF FD | 	call	#__system___waitus
1a300     18 4E 05 F1 | 	add	fp, #24
1a304     A7 24 02 FB | 	rdlong	local04, fp
1a308     01 24 86 F1 | 	sub	local04, #1
1a30c     A7 24 62 FC | 	wrlong	local04, fp
1a310     18 4E 85 F1 | 	sub	fp, #24
1a314     B4 FF 9F FD | 	jmp	#LR__3020
1a318                 | LR__3021
1a318     18 4E 05 F1 | 	add	fp, #24
1a31c     A7 24 0A FB | 	rdlong	local04, fp wz
1a320     18 4E 85 F1 | 	sub	fp, #24
1a324     4C 00 90 AD |  if_e	jmp	#LR__3022
1a328     3A 12 06 F6 | 	mov	arg01, #58
1a32c     00 14 06 F6 | 	mov	arg02, #0
1a330     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a334     FD 22 02 F6 | 	mov	local03, result1
1a338     07 22 4E F7 | 	zerox	local03, #7 wz
1a33c     34 00 90 5D |  if_ne	jmp	#LR__3022
1a340     14 4E 05 F1 | 	add	fp, #20
1a344     A7 12 02 F6 | 	mov	arg01, fp
1a348     14 4E 85 F1 | 	sub	fp, #20
1a34c     04 14 06 F6 | 	mov	arg02, #4
1a350     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0881
1a354     14 4E 05 F1 | 	add	fp, #20
1a358     A7 1E C2 FA | 	rdbyte	local01, fp
1a35c     40 1E CE F7 | 	test	local01, #64 wz
1a360     0C 24 06 56 |  if_ne	mov	local04, #12
1a364     04 24 06 A6 |  if_e	mov	local04, #4
1a368     08 4E 85 F1 | 	sub	fp, #8
1a36c     A7 24 42 FC | 	wrbyte	local04, fp
1a370     0C 4E 85 F1 | 	sub	fp, #12
1a374                 | LR__3022
1a374     14 24 06 FB | 	rdlong	local04, #20
1a378     18 4E 05 F1 | 	add	fp, #24
1a37c     A7 24 62 FC | 	wrlong	local04, fp
1a380     0C 4E 05 F1 | 	add	fp, #12
1a384     A7 24 02 FB | 	rdlong	local04, fp
1a388     1B 24 26 F4 | 	bith	local04, #27
1a38c     A7 24 62 FC | 	wrlong	local04, fp
1a390     0C 4E 85 F1 | 	sub	fp, #12
1a394     A7 24 02 FB | 	rdlong	local04, fp
1a398     18 4E 85 F1 | 	sub	fp, #24
1a39c     68 78 04 FF 
1a3a0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1a3a4     1C 4E 05 C1 |  if_b	add	fp, #28
1a3a8     00 01 80 CF 
1a3ac     A7 08 68 CC |  if_b	wrlong	##131076, fp
1a3b0     1C 4E 85 C1 |  if_b	sub	fp, #28
1a3b4     6C 02 90 CD |  if_b	jmp	#LR__3036
1a3b8     18 4E 05 F1 | 	add	fp, #24
1a3bc     A7 24 02 FB | 	rdlong	local04, fp
1a3c0     18 4E 85 F1 | 	sub	fp, #24
1a3c4     E1 F5 05 FF 
1a3c8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1a3cc     1C 4E 05 C1 |  if_b	add	fp, #28
1a3d0     00 01 80 CF 
1a3d4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1a3d8     1C 4E 85 C1 |  if_b	sub	fp, #28
1a3dc     44 02 90 CD |  if_b	jmp	#LR__3036
1a3e0     18 4E 05 F1 | 	add	fp, #24
1a3e4     A7 24 02 FB | 	rdlong	local04, fp
1a3e8     18 4E 85 F1 | 	sub	fp, #24
1a3ec     3B 58 08 FF 
1a3f0     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1a3f4     1C 4E 05 C1 |  if_b	add	fp, #28
1a3f8     00 01 80 CF 
1a3fc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1a400     1C 4E 85 C1 |  if_b	sub	fp, #28
1a404     1C 02 90 CD |  if_b	jmp	#LR__3036
1a408     1C 4E 05 F1 | 	add	fp, #28
1a40c     80 01 80 FF 
1a410     A7 10 68 FC | 	wrlong	##196616, fp
1a414     1C 4E 85 F1 | 	sub	fp, #28
1a418     08 02 90 FD | 	jmp	#LR__3036
1a41c                 | LR__3023
1a41c     A9 12 06 F6 | 	mov	arg01, #169
1a420     00 14 06 F6 | 	mov	arg02, #0
1a424     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a428     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1a42c     02 24 16 F2 | 	cmp	local04, #2 wc
1a430     18 00 90 3D |  if_ae	jmp	#LR__3024
1a434     0C 4E 05 F1 | 	add	fp, #12
1a438     A7 04 48 FC | 	wrbyte	#2, fp
1a43c     04 4E 05 F1 | 	add	fp, #4
1a440     A7 52 49 FC | 	wrbyte	#169, fp
1a444     10 4E 85 F1 | 	sub	fp, #16
1a448     14 00 90 FD | 	jmp	#LR__3025
1a44c                 | LR__3024
1a44c     0C 4E 05 F1 | 	add	fp, #12
1a450     A7 02 48 FC | 	wrbyte	#1, fp
1a454     04 4E 05 F1 | 	add	fp, #4
1a458     A7 02 48 FC | 	wrbyte	#1, fp
1a45c     10 4E 85 F1 | 	sub	fp, #16
1a460                 | LR__3025
1a460                 | ' 				ty =  0x01 ; cmd =  (1) ;
1a460                 | ' 			}
1a460                 | ' 			for (tmr = 1000; tmr; tmr--) {
1a460     18 4E 05 F1 | 	add	fp, #24
1a464     01 00 80 FF 
1a468     A7 D0 6B FC | 	wrlong	##1000, fp
1a46c     18 4E 85 F1 | 	sub	fp, #24
1a470                 | LR__3026
1a470     18 4E 05 F1 | 	add	fp, #24
1a474     A7 22 0A FB | 	rdlong	local03, fp wz
1a478     18 4E 85 F1 | 	sub	fp, #24
1a47c     44 00 90 AD |  if_e	jmp	#LR__3027
1a480     10 4E 05 F1 | 	add	fp, #16
1a484     A7 12 C2 FA | 	rdbyte	arg01, fp
1a488     10 4E 85 F1 | 	sub	fp, #16
1a48c     00 14 06 F6 | 	mov	arg02, #0
1a490     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a494     FD 24 02 F6 | 	mov	local04, result1
1a498     07 24 4E F7 | 	zerox	local04, #7 wz
1a49c     24 00 90 AD |  if_e	jmp	#LR__3027
1a4a0     01 00 00 FF 
1a4a4     E8 13 06 F6 | 	mov	arg01, ##1000
1a4a8     C4 98 BF FD | 	call	#__system___waitus
1a4ac     18 4E 05 F1 | 	add	fp, #24
1a4b0     A7 24 02 FB | 	rdlong	local04, fp
1a4b4     01 24 86 F1 | 	sub	local04, #1
1a4b8     A7 24 62 FC | 	wrlong	local04, fp
1a4bc     18 4E 85 F1 | 	sub	fp, #24
1a4c0     AC FF 9F FD | 	jmp	#LR__3026
1a4c4                 | LR__3027
1a4c4     18 4E 05 F1 | 	add	fp, #24
1a4c8     A7 24 0A FB | 	rdlong	local04, fp wz
1a4cc     18 4E 85 F1 | 	sub	fp, #24
1a4d0     14 00 90 AD |  if_e	jmp	#LR__3028
1a4d4     10 12 06 F6 | 	mov	arg01, #16
1a4d8     09 14 C6 F9 | 	decod	arg02, #9
1a4dc     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a4e0     07 FA 4D F7 | 	zerox	result1, #7 wz
1a4e4     0C 00 90 AD |  if_e	jmp	#LR__3029
1a4e8                 | LR__3028
1a4e8     0C 4E 05 F1 | 	add	fp, #12
1a4ec     A7 00 48 FC | 	wrbyte	#0, fp
1a4f0     0C 4E 85 F1 | 	sub	fp, #12
1a4f4                 | LR__3029
1a4f4     14 24 06 FB | 	rdlong	local04, #20
1a4f8     18 4E 05 F1 | 	add	fp, #24
1a4fc     A7 24 62 FC | 	wrlong	local04, fp
1a500     18 4E 85 F1 | 	sub	fp, #24
1a504     F0 FA 02 FF 
1a508     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1a50c     18 00 90 3D |  if_ae	jmp	#LR__3030
1a510     24 4E 05 F1 | 	add	fp, #36
1a514     A7 24 02 FB | 	rdlong	local04, fp
1a518     1B 24 26 F4 | 	bith	local04, #27
1a51c     A7 24 62 FC | 	wrlong	local04, fp
1a520     24 4E 85 F1 | 	sub	fp, #36
1a524     2C 00 90 FD | 	jmp	#LR__3031
1a528                 | LR__3030
1a528     18 4E 05 F1 | 	add	fp, #24
1a52c     A7 24 02 FB | 	rdlong	local04, fp
1a530     18 4E 85 F1 | 	sub	fp, #24
1a534     E1 F5 05 FF 
1a538     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1a53c     24 4E 05 C1 |  if_b	add	fp, #36
1a540     A7 24 02 CB |  if_b	rdlong	local04, fp
1a544     80 00 04 CF 
1a548     00 24 46 C5 |  if_b	or	local04, ##134283264
1a54c     A7 24 62 CC |  if_b	wrlong	local04, fp
1a550     24 4E 85 C1 |  if_b	sub	fp, #36
1a554                 | LR__3031
1a554     18 4E 05 F1 | 	add	fp, #24
1a558     A7 24 02 FB | 	rdlong	local04, fp
1a55c     18 4E 85 F1 | 	sub	fp, #24
1a560     F0 FA 02 FF 
1a564     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1a568     1C 4E 05 C1 |  if_b	add	fp, #28
1a56c     00 01 80 CF 
1a570     A7 08 68 CC |  if_b	wrlong	##131076, fp
1a574     1C 4E 85 C1 |  if_b	sub	fp, #28
1a578     A8 00 90 CD |  if_b	jmp	#LR__3035
1a57c     18 4E 05 F1 | 	add	fp, #24
1a580     A7 24 02 FB | 	rdlong	local04, fp
1a584     18 4E 85 F1 | 	sub	fp, #24
1a588     68 78 04 FF 
1a58c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1a590     1C 4E 05 C1 |  if_b	add	fp, #28
1a594     80 01 80 CF 
1a598     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1a59c     1C 4E 85 C1 |  if_b	sub	fp, #28
1a5a0     80 00 90 CD |  if_b	jmp	#LR__3034
1a5a4     18 4E 05 F1 | 	add	fp, #24
1a5a8     A7 24 02 FB | 	rdlong	local04, fp
1a5ac     18 4E 85 F1 | 	sub	fp, #24
1a5b0     E1 F5 05 FF 
1a5b4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1a5b8     1C 4E 05 C1 |  if_b	add	fp, #28
1a5bc     00 02 80 CF 
1a5c0     A7 10 68 CC |  if_b	wrlong	##262152, fp
1a5c4     1C 4E 85 C1 |  if_b	sub	fp, #28
1a5c8     58 00 90 CD |  if_b	jmp	#LR__3033
1a5cc     18 4E 05 F1 | 	add	fp, #24
1a5d0     A7 24 02 FB | 	rdlong	local04, fp
1a5d4     18 4E 85 F1 | 	sub	fp, #24
1a5d8     59 73 07 FF 
1a5dc     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1a5e0     1C 4E 05 C1 |  if_b	add	fp, #28
1a5e4     80 02 80 CF 
1a5e8     A7 14 68 CC |  if_b	wrlong	##327690, fp
1a5ec     1C 4E 85 C1 |  if_b	sub	fp, #28
1a5f0     30 00 90 CD |  if_b	jmp	#LR__3032
1a5f4     18 4E 05 F1 | 	add	fp, #24
1a5f8     A7 24 02 FB | 	rdlong	local04, fp
1a5fc     18 4E 85 F1 | 	sub	fp, #24
1a600     D1 F0 08 FF 
1a604     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1a608     1C 4E 05 C1 |  if_b	add	fp, #28
1a60c     00 03 80 CF 
1a610     A7 18 68 CC |  if_b	wrlong	##393228, fp
1a614     1C 4E 85 F3 | 	sumc	fp, #28
1a618     80 03 80 3F 
1a61c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1a620     1C 4E 85 31 |  if_ae	sub	fp, #28
1a624                 | LR__3032
1a624                 | LR__3033
1a624                 | LR__3034
1a624                 | LR__3035
1a624                 | LR__3036
1a624                 | LR__3037
1a624     0C 4E 05 F1 | 	add	fp, #12
1a628     A7 24 C2 FA | 	rdbyte	local04, fp
1a62c     01 00 00 FF 
1a630     21 E4 05 F1 | 	add	objptr, ##545
1a634     F2 24 42 FC | 	wrbyte	local04, objptr
1a638     A7 1E CA FA | 	rdbyte	local01, fp wz
1a63c     00 24 06 56 |  if_ne	mov	local04, #0
1a640     01 24 06 A6 |  if_e	mov	local04, #1
1a644     20 4E 05 F1 | 	add	fp, #32
1a648     A7 24 42 FC | 	wrbyte	local04, fp
1a64c     A7 24 C2 FA | 	rdbyte	local04, fp
1a650     2C 4E 85 F1 | 	sub	fp, #44
1a654     01 E4 85 F1 | 	sub	objptr, #1
1a658     F2 24 42 FC | 	wrbyte	local04, objptr
1a65c     01 00 00 FF 
1a660     20 E4 85 F1 | 	sub	objptr, ##544
1a664     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0891
1a668     34 4E 05 F1 | 	add	fp, #52
1a66c     A7 12 02 FB | 	rdlong	arg01, fp
1a670     18 4E 85 F1 | 	sub	fp, #24
1a674     A7 14 02 FB | 	rdlong	arg02, fp
1a678     09 15 12 FC | 	wxpin	arg02, arg01
1a67c     1C 4E 05 F1 | 	add	fp, #28
1a680     A7 12 02 FB | 	rdlong	arg01, fp
1a684     14 4E 85 F1 | 	sub	fp, #20
1a688     A7 14 02 FB | 	rdlong	arg02, fp
1a68c     09 15 02 FC | 	wrpin	arg02, arg01
1a690                 | ' 
1a690                 | ' 		}
1a690                 | ' 	}
1a690                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1a690                 | ' 	CardType = ty;
1a690                 | ' 	s = ty ? 0 :  0x01 ;
1a690                 | ' 	Stat = s;
1a690                 | ' 
1a690                 | ' 	deselect();
1a690                 | ' 
1a690                 | ' 
1a690                 | ' 	_wxpin( PIN_CLK, ck_div );
1a690                 | ' 	_wrpin( PIN_DI, spm_tx );
1a690                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1a690                 | ' 	return s;
1a690     08 4E 05 F1 | 	add	fp, #8
1a694     A7 FA C1 FA | 	rdbyte	result1, fp
1a698     2C 4E 85 F1 | 	sub	fp, #44
1a69c                 | LR__3038
1a69c     A7 F0 03 F6 | 	mov	ptra, fp
1a6a0     B2 00 A0 FD | 	call	#popregs_
1a6a4                 | _fatfs_cc_disk_initialize_ret
1a6a4     2D 00 64 FD | 	ret
1a6a8                 | 
1a6a8                 | _fatfs_cc_disk_read
1a6a8     05 4A 05 F6 | 	mov	COUNT_, #5
1a6ac     A8 00 A0 FD | 	call	#pushregs_
1a6b0     0A 1F 02 F6 | 	mov	local01, arg02
1a6b4     0B 21 02 F6 | 	mov	local02, arg03
1a6b8     0C 23 02 F6 | 	mov	local03, arg04
1a6bc     00 12 0E F2 | 	cmp	arg01, #0 wz
1a6c0     01 FA 05 56 |  if_ne	mov	result1, #1
1a6c4                 | ' 
1a6c4                 | ' 	return Stat;
1a6c4     01 00 00 AF 
1a6c8     20 E4 05 A1 |  if_e	add	objptr, ##544
1a6cc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1a6d0     01 00 00 AF 
1a6d4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1a6d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a6dc     01 FA CD F7 | 	test	result1, #1 wz
1a6e0     03 FA 05 56 |  if_ne	mov	result1, #3
1a6e4     84 00 90 5D |  if_ne	jmp	#LR__3042
1a6e8     01 00 00 FF 
1a6ec     21 E4 05 F1 | 	add	objptr, ##545
1a6f0     F2 24 C2 FA | 	rdbyte	local04, objptr
1a6f4     01 00 00 FF 
1a6f8     21 E4 85 F1 | 	sub	objptr, ##545
1a6fc     08 24 CE F7 | 	test	local04, #8 wz
1a700     09 20 66 A0 |  if_e	shl	local02, #9
1a704     02 22 16 F2 | 	cmp	local03, #2 wc
1a708     12 24 06 36 |  if_ae	mov	local04, #18
1a70c     11 24 06 C6 |  if_b	mov	local04, #17
1a710     10 15 02 F6 | 	mov	arg02, local02
1a714     12 13 02 F6 | 	mov	arg01, local04
1a718     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a71c     FD 26 02 F6 | 	mov	local05, result1
1a720     07 26 4E F7 | 	zerox	local05, #7 wz
1a724     30 00 90 5D |  if_ne	jmp	#LR__3041
1a728                 | ' 		do {
1a728                 | LR__3040
1a728     0F 13 02 F6 | 	mov	arg01, local01
1a72c     09 14 C6 F9 | 	decod	arg02, #9
1a730     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0899
1a734     00 FA 0D F2 | 	cmp	result1, #0 wz
1a738     01 00 00 5F 
1a73c     00 1E 06 51 |  if_ne	add	local01, ##512
1a740     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3040
1a744     12 25 E2 F8 | 	getbyte	local04, local04, #0
1a748     12 24 0E F2 | 	cmp	local04, #18 wz
1a74c     0C 12 06 A6 |  if_e	mov	arg01, #12
1a750     00 14 06 A6 |  if_e	mov	arg02, #0
1a754     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0905
1a758                 | LR__3041
1a758     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0891
1a75c                 | ' 	}
1a75c                 | ' 	deselect();
1a75c                 | ' 
1a75c                 | ' 	return count ? RES_ERROR : RES_OK;
1a75c     00 22 0E F2 | 	cmp	local03, #0 wz
1a760     01 26 06 56 |  if_ne	mov	local05, #1
1a764     00 26 06 A6 |  if_e	mov	local05, #0
1a768     13 FB 01 F6 | 	mov	result1, local05
1a76c                 | LR__3042
1a76c     A7 F0 03 F6 | 	mov	ptra, fp
1a770     B2 00 A0 FD | 	call	#popregs_
1a774                 | _fatfs_cc_disk_read_ret
1a774     2D 00 64 FD | 	ret
1a778                 | 
1a778                 | _fatfs_cc_disk_write
1a778     04 4A 05 F6 | 	mov	COUNT_, #4
1a77c     A8 00 A0 FD | 	call	#pushregs_
1a780     0A 1F 02 F6 | 	mov	local01, arg02
1a784     0C 21 02 F6 | 	mov	local02, arg04
1a788     0B 23 02 F6 | 	mov	local03, arg03
1a78c     00 12 0E F2 | 	cmp	arg01, #0 wz
1a790     01 FA 05 56 |  if_ne	mov	result1, #1
1a794                 | ' 
1a794                 | ' 	return Stat;
1a794     01 00 00 AF 
1a798     20 E4 05 A1 |  if_e	add	objptr, ##544
1a79c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1a7a0     01 00 00 AF 
1a7a4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1a7a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a7ac     01 FA CD F7 | 	test	result1, #1 wz
1a7b0     03 FA 05 56 |  if_ne	mov	result1, #3
1a7b4     D4 00 90 5D |  if_ne	jmp	#LR__3054
1a7b8     01 00 00 FF 
1a7bc     21 E4 05 F1 | 	add	objptr, ##545
1a7c0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1a7c4     01 00 00 FF 
1a7c8     21 E4 85 F1 | 	sub	objptr, ##545
1a7cc     08 16 CE F7 | 	test	arg03, #8 wz
1a7d0     09 22 66 A0 |  if_e	shl	local03, #9
1a7d4     01 20 0E F2 | 	cmp	local02, #1 wz
1a7d8     30 00 90 5D |  if_ne	jmp	#LR__3050
1a7dc     18 12 06 F6 | 	mov	arg01, #24
1a7e0     11 15 02 F6 | 	mov	arg02, local03
1a7e4     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a7e8     FD 24 02 F6 | 	mov	local04, result1
1a7ec     07 24 4E F7 | 	zerox	local04, #7 wz
1a7f0     84 00 90 5D |  if_ne	jmp	#LR__3053
1a7f4     0F 13 02 F6 | 	mov	arg01, local01
1a7f8     FE 14 06 F6 | 	mov	arg02, #254
1a7fc     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0901
1a800     00 FA 0D F2 | 	cmp	result1, #0 wz
1a804     00 20 06 56 |  if_ne	mov	local02, #0
1a808     6C 00 90 FD | 	jmp	#LR__3053
1a80c                 | LR__3050
1a80c     01 00 00 FF 
1a810     21 E4 05 F1 | 	add	objptr, ##545
1a814     F2 24 C2 FA | 	rdbyte	local04, objptr
1a818     01 00 00 FF 
1a81c     21 E4 85 F1 | 	sub	objptr, ##545
1a820     06 24 CE F7 | 	test	local04, #6 wz
1a824     97 12 06 56 |  if_ne	mov	arg01, #151
1a828     10 15 02 56 |  if_ne	mov	arg02, local02
1a82c     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0905
1a830     11 15 02 F6 | 	mov	arg02, local03
1a834     19 12 06 F6 | 	mov	arg01, #25
1a838     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a83c     FD 24 02 F6 | 	mov	local04, result1
1a840     07 24 4E F7 | 	zerox	local04, #7 wz
1a844     30 00 90 5D |  if_ne	jmp	#LR__3052
1a848                 | ' 			do {
1a848                 | LR__3051
1a848     0F 13 02 F6 | 	mov	arg01, local01
1a84c     FC 14 06 F6 | 	mov	arg02, #252
1a850     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0901
1a854     00 FA 0D F2 | 	cmp	result1, #0 wz
1a858     01 00 00 5F 
1a85c     00 1E 06 51 |  if_ne	add	local01, ##512
1a860     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3051
1a864     00 12 06 F6 | 	mov	arg01, #0
1a868     FD 14 06 F6 | 	mov	arg02, #253
1a86c     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0901
1a870     00 FA 0D F2 | 	cmp	result1, #0 wz
1a874     01 20 06 A6 |  if_e	mov	local02, #1
1a878                 | LR__3052
1a878                 | LR__3053
1a878     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0891
1a87c                 | ' 				count = 1;
1a87c                 | ' 		}
1a87c                 | ' 	}
1a87c                 | ' 	deselect();
1a87c                 | ' 
1a87c                 | ' 	return count ? RES_ERROR : RES_OK;
1a87c     00 20 0E F2 | 	cmp	local02, #0 wz
1a880     01 24 06 56 |  if_ne	mov	local04, #1
1a884     00 24 06 A6 |  if_e	mov	local04, #0
1a888     12 FB 01 F6 | 	mov	result1, local04
1a88c                 | LR__3054
1a88c     A7 F0 03 F6 | 	mov	ptra, fp
1a890     B2 00 A0 FD | 	call	#popregs_
1a894                 | _fatfs_cc_disk_write_ret
1a894     2D 00 64 FD | 	ret
1a898                 | 
1a898                 | _fatfs_cc_disk_ioctl
1a898     01 4A 05 F6 | 	mov	COUNT_, #1
1a89c     A8 00 A0 FD | 	call	#pushregs_
1a8a0     30 F0 07 F1 | 	add	ptra, #48
1a8a4     04 4E 05 F1 | 	add	fp, #4
1a8a8     A7 12 42 FC | 	wrbyte	arg01, fp
1a8ac     04 4E 05 F1 | 	add	fp, #4
1a8b0     A7 14 42 FC | 	wrbyte	arg02, fp
1a8b4     04 4E 05 F1 | 	add	fp, #4
1a8b8     A7 16 62 FC | 	wrlong	arg03, fp
1a8bc     08 4E 85 F1 | 	sub	fp, #8
1a8c0     A7 12 CA FA | 	rdbyte	arg01, fp wz
1a8c4     04 4E 85 F1 | 	sub	fp, #4
1a8c8     01 FA 05 56 |  if_ne	mov	result1, #1
1a8cc                 | ' 
1a8cc                 | ' 	return Stat;
1a8cc     01 00 00 AF 
1a8d0     20 E4 05 A1 |  if_e	add	objptr, ##544
1a8d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1a8d8     01 00 00 AF 
1a8dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
1a8e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a8e4     01 FA CD F7 | 	test	result1, #1 wz
1a8e8     03 FA 05 56 |  if_ne	mov	result1, #3
1a8ec     E4 01 90 5D |  if_ne	jmp	#LR__3068
1a8f0     10 4E 05 F1 | 	add	fp, #16
1a8f4     A7 02 68 FC | 	wrlong	#1, fp
1a8f8                 | ' 
1a8f8                 | ' 	res = RES_ERROR;
1a8f8                 | ' 	switch (ctrl) {
1a8f8     08 4E 85 F1 | 	sub	fp, #8
1a8fc     A7 1E C2 FA | 	rdbyte	local01, fp
1a900     08 4E 85 F1 | 	sub	fp, #8
1a904     04 1E 26 F3 | 	fle	local01, #4
1a908     30 1E 62 FD | 	jmprel	local01
1a90c                 | LR__3060
1a90c     10 00 90 FD | 	jmp	#LR__3061
1a910     24 00 90 FD | 	jmp	#LR__3062
1a914     A0 01 90 FD | 	jmp	#LR__3066
1a918     80 01 90 FD | 	jmp	#LR__3065
1a91c     98 01 90 FD | 	jmp	#LR__3066
1a920                 | LR__3061
1a920     B0 79 B0 FD | 	call	#_fatfs_cc_select_0895
1a924     00 FA 0D F2 | 	cmp	result1, #0 wz
1a928     10 4E 05 51 |  if_ne	add	fp, #16
1a92c     A7 00 68 5C |  if_ne	wrlong	#0, fp
1a930     10 4E 85 51 |  if_ne	sub	fp, #16
1a934                 | ' 			break;
1a934     8C 01 90 FD | 	jmp	#LR__3067
1a938                 | LR__3062
1a938     09 12 06 F6 | 	mov	arg01, #9
1a93c     00 14 06 F6 | 	mov	arg02, #0
1a940     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0905
1a944     FD 1E 02 F6 | 	mov	local01, result1
1a948     07 1E 4E F7 | 	zerox	local01, #7 wz
1a94c     74 01 90 5D |  if_ne	jmp	#LR__3067
1a950     18 4E 05 F1 | 	add	fp, #24
1a954     A7 12 02 F6 | 	mov	arg01, fp
1a958     18 4E 85 F1 | 	sub	fp, #24
1a95c     10 14 06 F6 | 	mov	arg02, #16
1a960     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0899
1a964     00 FA 0D F2 | 	cmp	result1, #0 wz
1a968     58 01 90 AD |  if_e	jmp	#LR__3067
1a96c     18 4E 05 F1 | 	add	fp, #24
1a970     A7 1E C2 FA | 	rdbyte	local01, fp
1a974     18 4E 85 F1 | 	sub	fp, #24
1a978     06 1E 46 F0 | 	shr	local01, #6
1a97c     01 1E 0E F2 | 	cmp	local01, #1 wz
1a980     5C 00 90 5D |  if_ne	jmp	#LR__3063
1a984     21 4E 05 F1 | 	add	fp, #33
1a988     A7 1E C2 FA | 	rdbyte	local01, fp
1a98c     01 4E 85 F1 | 	sub	fp, #1
1a990     A7 FA C1 FA | 	rdbyte	result1, fp
1a994     FD FA 31 F9 | 	getword	result1, result1, #0
1a998     08 FA 65 F0 | 	shl	result1, #8
1a99c     FD 1E 02 F1 | 	add	local01, result1
1a9a0     01 4E 85 F1 | 	sub	fp, #1
1a9a4     A7 FA C1 FA | 	rdbyte	result1, fp
1a9a8     3F FA 05 F5 | 	and	result1, #63
1a9ac     10 FA 65 F0 | 	shl	result1, #16
1a9b0     FD 1E 02 F1 | 	add	local01, result1
1a9b4     01 1E 06 F1 | 	add	local01, #1
1a9b8     09 4E 05 F1 | 	add	fp, #9
1a9bc     A7 1E 62 FC | 	wrlong	local01, fp
1a9c0     1C 4E 85 F1 | 	sub	fp, #28
1a9c4     A7 1E 02 FB | 	rdlong	local01, fp
1a9c8     1C 4E 05 F1 | 	add	fp, #28
1a9cc     A7 FA 01 FB | 	rdlong	result1, fp
1a9d0     28 4E 85 F1 | 	sub	fp, #40
1a9d4     0A FA 65 F0 | 	shl	result1, #10
1a9d8     0F FB 61 FC | 	wrlong	result1, local01
1a9dc     AC 00 90 FD | 	jmp	#LR__3064
1a9e0                 | LR__3063
1a9e0     1D 4E 05 F1 | 	add	fp, #29
1a9e4     A7 1E C2 FA | 	rdbyte	local01, fp
1a9e8     0F 1F 42 F8 | 	getnib	local01, local01, #0
1a9ec     05 4E 05 F1 | 	add	fp, #5
1a9f0     A7 FA C1 FA | 	rdbyte	result1, fp
1a9f4     80 FA 05 F5 | 	and	result1, #128
1a9f8     07 FA C5 F0 | 	sar	result1, #7
1a9fc     FD 1E 02 F1 | 	add	local01, result1
1aa00     01 4E 85 F1 | 	sub	fp, #1
1aa04     A7 FA C1 FA | 	rdbyte	result1, fp
1aa08     03 FA 05 F5 | 	and	result1, #3
1aa0c     01 FA 65 F0 | 	shl	result1, #1
1aa10     FD 1E 02 F1 | 	add	local01, result1
1aa14     02 1E 06 F1 | 	add	local01, #2
1aa18     0D 4E 85 F1 | 	sub	fp, #13
1aa1c     A7 1E 42 FC | 	wrbyte	local01, fp
1aa20     0C 4E 05 F1 | 	add	fp, #12
1aa24     A7 1E C2 FA | 	rdbyte	local01, fp
1aa28     06 1E 46 F0 | 	shr	local01, #6
1aa2c     01 4E 85 F1 | 	sub	fp, #1
1aa30     A7 FA C1 FA | 	rdbyte	result1, fp
1aa34     FD FA 31 F9 | 	getword	result1, result1, #0
1aa38     02 FA 65 F0 | 	shl	result1, #2
1aa3c     FD 1E 02 F1 | 	add	local01, result1
1aa40     01 4E 85 F1 | 	sub	fp, #1
1aa44     A7 FA C1 FA | 	rdbyte	result1, fp
1aa48     03 FA 05 F5 | 	and	result1, #3
1aa4c     FD FA 31 F9 | 	getword	result1, result1, #0
1aa50     0A FA 65 F0 | 	shl	result1, #10
1aa54     FD 1E 02 F1 | 	add	local01, result1
1aa58     01 1E 06 F1 | 	add	local01, #1
1aa5c     0A 4E 05 F1 | 	add	fp, #10
1aa60     A7 1E 62 FC | 	wrlong	local01, fp
1aa64     1C 4E 85 F1 | 	sub	fp, #28
1aa68     A7 1E 02 FB | 	rdlong	local01, fp
1aa6c     1C 4E 05 F1 | 	add	fp, #28
1aa70     A7 FA 01 FB | 	rdlong	result1, fp
1aa74     14 4E 85 F1 | 	sub	fp, #20
1aa78     A7 16 C2 FA | 	rdbyte	arg03, fp
1aa7c     14 4E 85 F1 | 	sub	fp, #20
1aa80     09 16 86 F1 | 	sub	arg03, #9
1aa84     0B FB 61 F0 | 	shl	result1, arg03
1aa88     0F FB 61 FC | 	wrlong	result1, local01
1aa8c                 | LR__3064
1aa8c     10 4E 05 F1 | 	add	fp, #16
1aa90     A7 00 68 FC | 	wrlong	#0, fp
1aa94     10 4E 85 F1 | 	sub	fp, #16
1aa98                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1aa98                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1aa98                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1aa98                 | ' 				}
1aa98                 | ' 				res = RES_OK;
1aa98                 | ' 			}
1aa98                 | ' 			break;
1aa98     28 00 90 FD | 	jmp	#LR__3067
1aa9c                 | LR__3065
1aa9c     0C 4E 05 F1 | 	add	fp, #12
1aaa0     A7 1E 02 FB | 	rdlong	local01, fp
1aaa4     0F 01 69 FC | 	wrlong	#128, local01
1aaa8     04 4E 05 F1 | 	add	fp, #4
1aaac     A7 00 68 FC | 	wrlong	#0, fp
1aab0     10 4E 85 F1 | 	sub	fp, #16
1aab4                 | ' 			*(DWORD*)buff = 128;
1aab4                 | ' 			res = RES_OK;
1aab4                 | ' 			break;
1aab4     0C 00 90 FD | 	jmp	#LR__3067
1aab8                 | LR__3066
1aab8     10 4E 05 F1 | 	add	fp, #16
1aabc     A7 08 68 FC | 	wrlong	#4, fp
1aac0     10 4E 85 F1 | 	sub	fp, #16
1aac4                 | LR__3067
1aac4     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0891
1aac8                 | ' 			res = RES_PARERR;
1aac8                 | ' 	}
1aac8                 | ' 
1aac8                 | ' 	deselect();
1aac8                 | ' 
1aac8                 | ' 	return res;
1aac8     10 4E 05 F1 | 	add	fp, #16
1aacc     A7 FA 01 FB | 	rdlong	result1, fp
1aad0     10 4E 85 F1 | 	sub	fp, #16
1aad4                 | LR__3068
1aad4     A7 F0 03 F6 | 	mov	ptra, fp
1aad8     B2 00 A0 FD | 	call	#popregs_
1aadc                 | _fatfs_cc_disk_ioctl_ret
1aadc     2D 00 64 FD | 	ret
1aae0                 | 
1aae0                 | _fatfs_cc_disk_setpins
1aae0     00 12 0E F2 | 	cmp	arg01, #0 wz
1aae4     01 FA 65 56 |  if_ne	neg	result1, #1
1aae8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1aaec     01 00 00 FF 
1aaf0     10 E4 05 F1 | 	add	objptr, ##528
1aaf4     F2 14 62 FC | 	wrlong	arg02, objptr
1aaf8     04 E4 05 F1 | 	add	objptr, #4
1aafc     F2 16 62 FC | 	wrlong	arg03, objptr
1ab00     04 E4 05 F1 | 	add	objptr, #4
1ab04     F2 18 62 FC | 	wrlong	arg04, objptr
1ab08     04 E4 05 F1 | 	add	objptr, #4
1ab0c     F2 1A 62 FC | 	wrlong	arg05, objptr
1ab10     01 00 00 FF 
1ab14     1C E4 85 F1 | 	sub	objptr, ##540
1ab18     00 FA 05 F6 | 	mov	result1, #0
1ab1c                 | _fatfs_cc_disk_setpins_ret
1ab1c     2D 00 64 FD | 	ret
1ab20                 | 
1ab20                 | _fatfs_cc_tchar2uni
1ab20     09 01 02 FB | 	rdlong	_var01, arg01
1ab24     00 03 02 F6 | 	mov	_var02, _var01
1ab28     01 00 06 F1 | 	add	_var01, #1
1ab2c     00 05 02 F6 | 	mov	_var03, _var01
1ab30     01 07 C2 FA | 	rdbyte	_var04, _var02
1ab34     80 06 CE F7 | 	test	_var04, #128 wz
1ab38     E8 00 90 AD |  if_e	jmp	#LR__3077
1ab3c     03 09 02 F6 | 	mov	_var05, _var04
1ab40     E0 08 06 F5 | 	and	_var05, #224
1ab44     C0 08 0E F2 | 	cmp	_var05, #192 wz
1ab48     1F 06 06 A5 |  if_e	and	_var04, #31
1ab4c     01 0A 06 A6 |  if_e	mov	_var06, #1
1ab50     34 00 90 AD |  if_e	jmp	#LR__3071
1ab54     03 09 02 F6 | 	mov	_var05, _var04
1ab58     F0 08 06 F5 | 	and	_var05, #240
1ab5c     E0 08 0E F2 | 	cmp	_var05, #224 wz
1ab60     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1ab64     02 0A 06 A6 |  if_e	mov	_var06, #2
1ab68     1C 00 90 AD |  if_e	jmp	#LR__3070
1ab6c     03 09 02 F6 | 	mov	_var05, _var04
1ab70     F8 08 06 F5 | 	and	_var05, #248
1ab74     F0 08 0E F2 | 	cmp	_var05, #240 wz
1ab78     07 06 06 A5 |  if_e	and	_var04, #7
1ab7c     03 0A 06 A6 |  if_e	mov	_var06, #3
1ab80                 | ' 			return 0xFFFFFFFF;
1ab80     01 FA 65 56 |  if_ne	neg	result1, #1
1ab84     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1ab88                 | LR__3070
1ab88                 | LR__3071
1ab88                 | ' 		}
1ab88                 | ' 		do {
1ab88                 | LR__3072
1ab88     02 0D C2 FA | 	rdbyte	_var07, _var03
1ab8c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1ab90     C0 08 06 F5 | 	and	_var05, #192
1ab94     80 08 0E F2 | 	cmp	_var05, #128 wz
1ab98     01 04 06 F1 | 	add	_var03, #1
1ab9c     01 FA 65 56 |  if_ne	neg	result1, #1
1aba0     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1aba4     06 06 66 F0 | 	shl	_var04, #6
1aba8     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1abac     3F 02 06 F5 | 	and	_var02, #63
1abb0     01 07 42 F5 | 	or	_var04, _var02
1abb4     F4 0B 6E FB | 	djnz	_var06, #LR__3072
1abb8     80 06 16 F2 | 	cmp	_var04, #128 wc
1abbc     24 00 90 CD |  if_b	jmp	#LR__3074
1abc0     6C 00 00 FF 
1abc4     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1abc8     0C 00 90 CD |  if_b	jmp	#LR__3073
1abcc     70 00 00 FF 
1abd0     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1abd4     0C 00 90 CD |  if_b	jmp	#LR__3074
1abd8                 | LR__3073
1abd8     80 08 00 FF 
1abdc     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1abe0     08 00 90 CD |  if_b	jmp	#LR__3075
1abe4                 | LR__3074
1abe4     01 FA 65 F6 | 	neg	result1, #1
1abe8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1abec                 | LR__3075
1abec     80 00 00 FF 
1abf0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1abf4     2C 00 90 CD |  if_b	jmp	#LR__3076
1abf8     03 03 02 F6 | 	mov	_var02, _var04
1abfc     80 00 00 FF 
1ac00     00 02 86 F1 | 	sub	_var02, ##65536
1ac04     06 02 66 F0 | 	shl	_var02, #6
1ac08     80 FF 01 FF 
1ac0c     00 02 06 F5 | 	and	_var02, ##67043328
1ac10     6E 00 6C FF 
1ac14     00 08 06 F6 | 	mov	_var05, ##-671032320
1ac18     01 09 42 F5 | 	or	_var05, _var02
1ac1c     09 06 46 F7 | 	zerox	_var04, #9
1ac20     04 07 42 F5 | 	or	_var04, _var05
1ac24                 | LR__3076
1ac24                 | LR__3077
1ac24     09 05 62 FC | 	wrlong	_var03, arg01
1ac28                 | ' 	}
1ac28                 | ' #line 811 "ff.c"
1ac28                 | ' 	*str = p;
1ac28                 | ' 	return uc;
1ac28     03 FB 01 F6 | 	mov	result1, _var04
1ac2c                 | _fatfs_cc_tchar2uni_ret
1ac2c     2D 00 64 FD | 	ret
1ac30                 | 
1ac30                 | _fatfs_cc_put_utf
1ac30     80 12 16 F2 | 	cmp	arg01, #128 wc
1ac34     18 00 90 3D |  if_ae	jmp	#LR__3080
1ac38     01 16 16 F2 | 	cmp	arg03, #1 wc
1ac3c     00 FA 05 C6 |  if_b	mov	result1, #0
1ac40     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ac44     0A 13 42 FC | 	wrbyte	arg01, arg02
1ac48                 | ' 		*buf = (TCHAR)chr;
1ac48                 | ' 		return 1;
1ac48     01 FA 05 F6 | 	mov	result1, #1
1ac4c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ac50                 | LR__3080
1ac50     04 00 00 FF 
1ac54     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1ac58     40 00 90 3D |  if_ae	jmp	#LR__3081
1ac5c     02 16 16 F2 | 	cmp	arg03, #2 wc
1ac60     00 FA 05 C6 |  if_b	mov	result1, #0
1ac64     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ac68     09 FB 01 F6 | 	mov	result1, arg01
1ac6c     06 FA 45 F0 | 	shr	result1, #6
1ac70     1F FA 05 F5 | 	and	result1, #31
1ac74     C0 16 06 F6 | 	mov	arg03, #192
1ac78     FD 16 42 F5 | 	or	arg03, result1
1ac7c     0A 17 42 FC | 	wrbyte	arg03, arg02
1ac80     01 14 06 F1 | 	add	arg02, #1
1ac84     3F 12 06 F5 | 	and	arg01, #63
1ac88     80 FA 05 F6 | 	mov	result1, #128
1ac8c     09 FB 41 F5 | 	or	result1, arg01
1ac90     0A FB 41 FC | 	wrbyte	result1, arg02
1ac94                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1ac94                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ac94                 | ' 		return 2;
1ac94     02 FA 05 F6 | 	mov	result1, #2
1ac98     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ac9c                 | LR__3081
1ac9c     80 00 00 FF 
1aca0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1aca4     70 00 90 3D |  if_ae	jmp	#LR__3084
1aca8     03 16 16 F2 | 	cmp	arg03, #3 wc
1acac     18 00 90 CD |  if_b	jmp	#LR__3082
1acb0     6C 00 00 FF 
1acb4     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1acb8     14 00 90 CD |  if_b	jmp	#LR__3083
1acbc     70 00 00 FF 
1acc0     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1acc4     08 00 90 3D |  if_ae	jmp	#LR__3083
1acc8                 | LR__3082
1acc8     00 FA 05 F6 | 	mov	result1, #0
1accc     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1acd0                 | LR__3083
1acd0     09 FB 59 F8 | 	getnib	result1, arg01, #3
1acd4     E0 16 06 F6 | 	mov	arg03, #224
1acd8     FD 16 42 F5 | 	or	arg03, result1
1acdc     0A 17 42 FC | 	wrbyte	arg03, arg02
1ace0     01 14 06 F1 | 	add	arg02, #1
1ace4     09 FB 01 F6 | 	mov	result1, arg01
1ace8     06 FA 45 F0 | 	shr	result1, #6
1acec     3F FA 05 F5 | 	and	result1, #63
1acf0     80 16 06 F6 | 	mov	arg03, #128
1acf4     FD 16 42 F5 | 	or	arg03, result1
1acf8     0A 17 42 FC | 	wrbyte	arg03, arg02
1acfc     01 14 06 F1 | 	add	arg02, #1
1ad00     3F 12 06 F5 | 	and	arg01, #63
1ad04     80 FA 05 F6 | 	mov	result1, #128
1ad08     09 FB 41 F5 | 	or	result1, arg01
1ad0c     0A FB 41 FC | 	wrbyte	result1, arg02
1ad10                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1ad10                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1ad10                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ad10                 | ' 		return 3;
1ad10     03 FA 05 F6 | 	mov	result1, #3
1ad14     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ad18                 | LR__3084
1ad18     04 16 16 F2 | 	cmp	arg03, #4 wc
1ad1c     00 FA 05 C6 |  if_b	mov	result1, #0
1ad20     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ad24     09 01 02 F6 | 	mov	_var01, arg01
1ad28     E0 01 06 F4 | 	bitl	_var01, #480
1ad2c     00 00 6C FF 
1ad30     00 00 86 F1 | 	sub	_var01, ##-671088640
1ad34     06 00 46 F0 | 	shr	_var01, #6
1ad38     09 13 32 F9 | 	getword	arg01, arg01, #0
1ad3c     6E 00 00 FF 
1ad40     00 12 86 F1 | 	sub	arg01, ##56320
1ad44     00 08 00 FF 
1ad48     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1ad4c     02 00 00 CF 
1ad50     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1ad54     00 FA 05 36 |  if_ae	mov	result1, #0
1ad58     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1ad5c     09 01 42 F5 | 	or	_var01, arg01
1ad60     80 00 00 FF 
1ad64     00 00 06 F1 | 	add	_var01, ##65536
1ad68     00 FB 01 F6 | 	mov	result1, _var01
1ad6c     12 FA 45 F0 | 	shr	result1, #18
1ad70     07 FA 05 F5 | 	and	result1, #7
1ad74     F0 16 06 F6 | 	mov	arg03, #240
1ad78     FD 16 42 F5 | 	or	arg03, result1
1ad7c     0A 17 42 FC | 	wrbyte	arg03, arg02
1ad80     01 14 06 F1 | 	add	arg02, #1
1ad84     00 FB 01 F6 | 	mov	result1, _var01
1ad88     0C FA 45 F0 | 	shr	result1, #12
1ad8c     3F FA 05 F5 | 	and	result1, #63
1ad90     80 16 06 F6 | 	mov	arg03, #128
1ad94     FD 16 42 F5 | 	or	arg03, result1
1ad98     0A 17 42 FC | 	wrbyte	arg03, arg02
1ad9c     01 14 06 F1 | 	add	arg02, #1
1ada0     00 FB 01 F6 | 	mov	result1, _var01
1ada4     06 FA 45 F0 | 	shr	result1, #6
1ada8     3F FA 05 F5 | 	and	result1, #63
1adac     80 16 06 F6 | 	mov	arg03, #128
1adb0     FD 16 42 F5 | 	or	arg03, result1
1adb4     0A 17 42 FC | 	wrbyte	arg03, arg02
1adb8     01 14 06 F1 | 	add	arg02, #1
1adbc     3F 00 06 F5 | 	and	_var01, #63
1adc0     80 FA 05 F6 | 	mov	result1, #128
1adc4     00 FB 41 F5 | 	or	result1, _var01
1adc8     0A FB 41 FC | 	wrbyte	result1, arg02
1adcc                 | ' 	chr = (hc | chr) + 0x10000;
1adcc                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1adcc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1adcc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1adcc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1adcc                 | ' 	return 4;
1adcc     04 FA 05 F6 | 	mov	result1, #4
1add0                 | _fatfs_cc_put_utf_ret
1add0     2D 00 64 FD | 	ret
1add4                 | 
1add4                 | _fatfs_cc_sync_window
1add4     02 4A 05 F6 | 	mov	COUNT_, #2
1add8     A8 00 A0 FD | 	call	#pushregs_
1addc     09 1F 02 F6 | 	mov	local01, arg01
1ade0     00 20 06 F6 | 	mov	local02, #0
1ade4     03 1E 06 F1 | 	add	local01, #3
1ade8     0F FB C9 FA | 	rdbyte	result1, local01 wz
1adec     03 1E 86 F1 | 	sub	local01, #3
1adf0     A4 00 90 AD |  if_e	jmp	#LR__3092
1adf4     01 1E 06 F1 | 	add	local01, #1
1adf8     0F 13 C2 FA | 	rdbyte	arg01, local01
1adfc     33 1E 06 F1 | 	add	local01, #51
1ae00     0F 15 02 F6 | 	mov	arg02, local01
1ae04     04 1E 86 F1 | 	sub	local01, #4
1ae08     0F 17 02 FB | 	rdlong	arg03, local01
1ae0c     30 1E 86 F1 | 	sub	local01, #48
1ae10     01 18 06 F6 | 	mov	arg04, #1
1ae14     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1ae18     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae1c     74 00 90 5D |  if_ne	jmp	#LR__3090
1ae20     03 1E 06 F1 | 	add	local01, #3
1ae24     0F 01 48 FC | 	wrbyte	#0, local01
1ae28     2D 1E 06 F1 | 	add	local01, #45
1ae2c     0F FB 01 FB | 	rdlong	result1, local01
1ae30     0C 1E 86 F1 | 	sub	local01, #12
1ae34     0F 19 02 FB | 	rdlong	arg04, local01
1ae38     0C FB 81 F1 | 	sub	result1, arg04
1ae3c     08 1E 86 F1 | 	sub	local01, #8
1ae40     0F 19 02 FB | 	rdlong	arg04, local01
1ae44     1C 1E 86 F1 | 	sub	local01, #28
1ae48     0C FB 11 F2 | 	cmp	result1, arg04 wc
1ae4c     48 00 90 3D |  if_ae	jmp	#LR__3091
1ae50     02 1E 06 F1 | 	add	local01, #2
1ae54     0F 19 C2 FA | 	rdbyte	arg04, local01
1ae58     02 1E 86 F1 | 	sub	local01, #2
1ae5c     02 18 0E F2 | 	cmp	arg04, #2 wz
1ae60     34 00 90 5D |  if_ne	jmp	#LR__3091
1ae64     01 1E 06 F1 | 	add	local01, #1
1ae68     0F 13 C2 FA | 	rdbyte	arg01, local01
1ae6c     33 1E 06 F1 | 	add	local01, #51
1ae70     0F 15 02 F6 | 	mov	arg02, local01
1ae74     04 1E 86 F1 | 	sub	local01, #4
1ae78     0F 17 02 FB | 	rdlong	arg03, local01
1ae7c     14 1E 86 F1 | 	sub	local01, #20
1ae80     0F 1F 02 FB | 	rdlong	local01, local01
1ae84     0F 17 02 F1 | 	add	arg03, local01
1ae88     01 18 06 F6 | 	mov	arg04, #1
1ae8c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1ae90     04 00 90 FD | 	jmp	#LR__3091
1ae94                 | LR__3090
1ae94     01 20 06 F6 | 	mov	local02, #1
1ae98                 | LR__3091
1ae98                 | LR__3092
1ae98                 | ' 			res = FR_DISK_ERR;
1ae98                 | ' 		}
1ae98                 | ' 	}
1ae98                 | ' 	return res;
1ae98     10 FB 01 F6 | 	mov	result1, local02
1ae9c     A7 F0 03 F6 | 	mov	ptra, fp
1aea0     B2 00 A0 FD | 	call	#popregs_
1aea4                 | _fatfs_cc_sync_window_ret
1aea4     2D 00 64 FD | 	ret
1aea8                 | 
1aea8                 | _fatfs_cc_move_window
1aea8     03 4A 05 F6 | 	mov	COUNT_, #3
1aeac     A8 00 A0 FD | 	call	#pushregs_
1aeb0     09 1F 02 F6 | 	mov	local01, arg01
1aeb4     0A 21 02 F6 | 	mov	local02, arg02
1aeb8     00 22 06 F6 | 	mov	local03, #0
1aebc     30 1E 06 F1 | 	add	local01, #48
1aec0     0F 19 02 FB | 	rdlong	arg04, local01
1aec4     30 1E 86 F1 | 	sub	local01, #48
1aec8     0C 21 0A F2 | 	cmp	local02, arg04 wz
1aecc     40 00 90 AD |  if_e	jmp	#LR__3101
1aed0     0F 13 02 F6 | 	mov	arg01, local01
1aed4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1aed8     FD 22 0A F6 | 	mov	local03, result1 wz
1aedc     30 00 90 5D |  if_ne	jmp	#LR__3100
1aee0     01 1E 06 F1 | 	add	local01, #1
1aee4     0F 13 C2 FA | 	rdbyte	arg01, local01
1aee8     33 1E 06 F1 | 	add	local01, #51
1aeec     0F 15 02 F6 | 	mov	arg02, local01
1aef0     10 17 02 F6 | 	mov	arg03, local02
1aef4     01 18 06 F6 | 	mov	arg04, #1
1aef8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1aefc     00 FA 0D F2 | 	cmp	result1, #0 wz
1af00     01 20 66 56 |  if_ne	neg	local02, #1
1af04     01 22 06 56 |  if_ne	mov	local03, #1
1af08     04 1E 86 F1 | 	sub	local01, #4
1af0c     0F 21 62 FC | 	wrlong	local02, local01
1af10                 | LR__3100
1af10                 | LR__3101
1af10                 | ' 				sect = (LBA_t)0 - 1;
1af10                 | ' 				res = FR_DISK_ERR;
1af10                 | ' 			}
1af10                 | ' 			fs->winsect = sect;
1af10                 | ' 		}
1af10                 | ' 	}
1af10                 | ' 	return res;
1af10     11 FB 01 F6 | 	mov	result1, local03
1af14     A7 F0 03 F6 | 	mov	ptra, fp
1af18     B2 00 A0 FD | 	call	#popregs_
1af1c                 | _fatfs_cc_move_window_ret
1af1c     2D 00 64 FD | 	ret
1af20                 | 
1af20                 | _fatfs_cc_sync_fs
1af20     02 4A 05 F6 | 	mov	COUNT_, #2
1af24     A8 00 A0 FD | 	call	#pushregs_
1af28     09 1F 02 F6 | 	mov	local01, arg01
1af2c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1af30     FD 20 0A F6 | 	mov	local02, result1 wz
1af34     D8 00 90 5D |  if_ne	jmp	#LR__3111
1af38     0F 19 C2 FA | 	rdbyte	arg04, local01
1af3c     03 18 0E F2 | 	cmp	arg04, #3 wz
1af40     04 1E 06 A1 |  if_e	add	local01, #4
1af44     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1af48     04 1E 86 A1 |  if_e	sub	local01, #4
1af4c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1af50     A0 00 90 5D |  if_ne	jmp	#LR__3110
1af54     34 1E 06 F1 | 	add	local01, #52
1af58     0F 13 02 F6 | 	mov	arg01, local01
1af5c     00 14 06 F6 | 	mov	arg02, #0
1af60     09 16 C6 F9 | 	decod	arg03, #9
1af64     98 00 A0 FD | 	call	#\builtin_bytefill_
1af68     0F 13 02 F6 | 	mov	arg01, local01
1af6c     FE 13 06 F1 | 	add	arg01, #510
1af70     55 00 80 FF 
1af74     09 AB 58 FC | 	wrword	##43605, arg01
1af78     A9 B0 A0 FF 
1af7c     0F A5 68 FC | 	wrlong	##1096897106, local01
1af80     0F 13 02 F6 | 	mov	arg01, local01
1af84     E4 13 06 F1 | 	add	arg01, #484
1af88     B9 A0 B0 FF 
1af8c     09 E5 68 FC | 	wrlong	##1631679090, arg01
1af90     0F 13 02 F6 | 	mov	arg01, local01
1af94     E8 13 06 F1 | 	add	arg01, #488
1af98     20 1E 86 F1 | 	sub	local01, #32
1af9c     0F 15 02 FB | 	rdlong	arg02, local01
1afa0     09 15 62 FC | 	wrlong	arg02, arg01
1afa4     20 1E 06 F1 | 	add	local01, #32
1afa8     0F 13 02 F6 | 	mov	arg01, local01
1afac     EC 13 06 F1 | 	add	arg01, #492
1afb0     24 1E 86 F1 | 	sub	local01, #36
1afb4     0F 15 02 FB | 	rdlong	arg02, local01
1afb8     09 15 62 FC | 	wrlong	arg02, arg01
1afbc     10 1E 06 F1 | 	add	local01, #16
1afc0     0F 17 02 FB | 	rdlong	arg03, local01
1afc4     01 16 06 F1 | 	add	arg03, #1
1afc8     10 1E 06 F1 | 	add	local01, #16
1afcc     0F 17 62 FC | 	wrlong	arg03, local01
1afd0     2F 1E 86 F1 | 	sub	local01, #47
1afd4     0F 13 C2 FA | 	rdbyte	arg01, local01
1afd8     33 1E 06 F1 | 	add	local01, #51
1afdc     0F 15 02 F6 | 	mov	arg02, local01
1afe0     01 18 06 F6 | 	mov	arg04, #1
1afe4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1afe8     30 1E 86 F1 | 	sub	local01, #48
1afec     0F 01 48 FC | 	wrbyte	#0, local01
1aff0     04 1E 86 F1 | 	sub	local01, #4
1aff4                 | LR__3110
1aff4     01 1E 06 F1 | 	add	local01, #1
1aff8     0F 13 C2 FA | 	rdbyte	arg01, local01
1affc     00 14 06 F6 | 	mov	arg02, #0
1b000     00 16 06 F6 | 	mov	arg03, #0
1b004     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1b008     00 FA 0D F2 | 	cmp	result1, #0 wz
1b00c     01 20 06 56 |  if_ne	mov	local02, #1
1b010                 | LR__3111
1b010                 | ' 	}
1b010                 | ' 
1b010                 | ' 	return res;
1b010     10 FB 01 F6 | 	mov	result1, local02
1b014     A7 F0 03 F6 | 	mov	ptra, fp
1b018     B2 00 A0 FD | 	call	#popregs_
1b01c                 | _fatfs_cc_sync_fs_ret
1b01c     2D 00 64 FD | 	ret
1b020                 | 
1b020                 | _fatfs_cc_clst2sect
1b020     02 14 86 F1 | 	sub	arg02, #2
1b024     18 12 06 F1 | 	add	arg01, #24
1b028     09 01 02 FB | 	rdlong	_var01, arg01
1b02c     18 12 86 F1 | 	sub	arg01, #24
1b030     02 00 86 F1 | 	sub	_var01, #2
1b034     00 15 12 F2 | 	cmp	arg02, _var01 wc
1b038     00 FA 05 36 |  if_ae	mov	result1, #0
1b03c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1b040     0A 12 06 F1 | 	add	arg01, #10
1b044     09 01 E2 FA | 	rdword	_var01, arg01
1b048     0A 01 02 FD | 	qmul	_var01, arg02
1b04c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1b04c     22 12 06 F1 | 	add	arg01, #34
1b050     09 FB 01 FB | 	rdlong	result1, arg01
1b054     18 00 62 FD | 	getqx	_var01
1b058     00 FB 01 F1 | 	add	result1, _var01
1b05c                 | _fatfs_cc_clst2sect_ret
1b05c     2D 00 64 FD | 	ret
1b060                 | 
1b060                 | _fatfs_cc_get_fat
1b060     07 4A 05 F6 | 	mov	COUNT_, #7
1b064     A8 00 A0 FD | 	call	#pushregs_
1b068     0A 1F 02 F6 | 	mov	local01, arg02
1b06c     09 21 02 FB | 	rdlong	local02, arg01
1b070     02 1E 16 F2 | 	cmp	local01, #2 wc
1b074     14 00 90 CD |  if_b	jmp	#LR__3120
1b078     18 20 06 F1 | 	add	local02, #24
1b07c     10 23 02 FB | 	rdlong	local03, local02
1b080     18 20 86 F1 | 	sub	local02, #24
1b084     11 1F 12 F2 | 	cmp	local01, local03 wc
1b088     08 00 90 CD |  if_b	jmp	#LR__3121
1b08c                 | LR__3120
1b08c     01 24 06 F6 | 	mov	local04, #1
1b090     60 01 90 FD | 	jmp	#LR__3128
1b094                 | LR__3121
1b094     01 24 66 F6 | 	neg	local04, #1
1b098                 | ' 		val = 0xFFFFFFFF;
1b098                 | ' 
1b098                 | ' 		switch (fs->fs_type) {
1b098     10 27 C2 FA | 	rdbyte	local05, local02
1b09c     01 26 86 F1 | 	sub	local05, #1
1b0a0     03 26 26 F3 | 	fle	local05, #3
1b0a4     30 26 62 FD | 	jmprel	local05
1b0a8                 | LR__3122
1b0a8     0C 00 90 FD | 	jmp	#LR__3123
1b0ac     B8 00 90 FD | 	jmp	#LR__3124
1b0b0     F8 00 90 FD | 	jmp	#LR__3125
1b0b4     38 01 90 FD | 	jmp	#LR__3126
1b0b8                 | LR__3123
1b0b8     0F 27 02 F6 | 	mov	local05, local01
1b0bc     0F 13 02 F6 | 	mov	arg01, local01
1b0c0     01 12 46 F0 | 	shr	arg01, #1
1b0c4     09 27 02 F1 | 	add	local05, arg01
1b0c8     10 13 02 F6 | 	mov	arg01, local02
1b0cc     13 29 02 F6 | 	mov	local06, local05
1b0d0     09 28 46 F0 | 	shr	local06, #9
1b0d4     24 20 06 F1 | 	add	local02, #36
1b0d8     10 15 02 FB | 	rdlong	arg02, local02
1b0dc     24 20 86 F1 | 	sub	local02, #36
1b0e0     14 15 02 F1 | 	add	arg02, local06
1b0e4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1b0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0ec     04 01 90 5D |  if_ne	jmp	#LR__3127
1b0f0     13 29 02 F6 | 	mov	local06, local05
1b0f4     FF 29 06 F5 | 	and	local06, #511
1b0f8     34 20 06 F1 | 	add	local02, #52
1b0fc     10 29 02 F1 | 	add	local06, local02
1b100     14 2B C2 FA | 	rdbyte	local07, local06
1b104     34 20 86 F1 | 	sub	local02, #52
1b108     10 13 02 F6 | 	mov	arg01, local02
1b10c     01 26 06 F1 | 	add	local05, #1
1b110     13 29 02 F6 | 	mov	local06, local05
1b114     09 28 46 F0 | 	shr	local06, #9
1b118     24 20 06 F1 | 	add	local02, #36
1b11c     10 15 02 FB | 	rdlong	arg02, local02
1b120     24 20 86 F1 | 	sub	local02, #36
1b124     14 15 02 F1 | 	add	arg02, local06
1b128     7C FD BF FD | 	call	#_fatfs_cc_move_window
1b12c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b130     C0 00 90 5D |  if_ne	jmp	#LR__3127
1b134     FF 27 06 F5 | 	and	local05, #511
1b138     34 20 06 F1 | 	add	local02, #52
1b13c     10 27 02 F1 | 	add	local05, local02
1b140     13 29 C2 FA | 	rdbyte	local06, local05
1b144     08 28 66 F0 | 	shl	local06, #8
1b148     14 2B 42 F5 | 	or	local07, local06
1b14c     01 1E CE F7 | 	test	local01, #1 wz
1b150     04 2A 46 50 |  if_ne	shr	local07, #4
1b154     15 23 02 56 |  if_ne	mov	local03, local07
1b158     0B 2A 46 A7 |  if_e	zerox	local07, #11
1b15c     15 23 02 A6 |  if_e	mov	local03, local07
1b160     11 25 02 F6 | 	mov	local04, local03
1b164                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1b164                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1b164                 | ' 			break;
1b164     8C 00 90 FD | 	jmp	#LR__3127
1b168                 | LR__3124
1b168     10 13 02 F6 | 	mov	arg01, local02
1b16c     0F 29 02 F6 | 	mov	local06, local01
1b170     08 28 46 F0 | 	shr	local06, #8
1b174     24 20 06 F1 | 	add	local02, #36
1b178     10 15 02 FB | 	rdlong	arg02, local02
1b17c     24 20 86 F1 | 	sub	local02, #36
1b180     14 15 02 F1 | 	add	arg02, local06
1b184     20 FD BF FD | 	call	#_fatfs_cc_move_window
1b188     00 FA 0D F2 | 	cmp	result1, #0 wz
1b18c     64 00 90 5D |  if_ne	jmp	#LR__3127
1b190     34 20 06 F1 | 	add	local02, #52
1b194     01 1E 66 F0 | 	shl	local01, #1
1b198     FF 1F 06 F5 | 	and	local01, #511
1b19c     0F 21 02 F1 | 	add	local02, local01
1b1a0                 | ' {
1b1a0                 | ' 
1b1a0                 | ' 	return *((WORD*)ptr);
1b1a0     10 FB E1 FA | 	rdword	result1, local02
1b1a4     FD 24 32 F9 | 	getword	local04, result1, #0
1b1a8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1b1a8                 | ' 			break;
1b1a8     48 00 90 FD | 	jmp	#LR__3127
1b1ac                 | LR__3125
1b1ac     10 13 02 F6 | 	mov	arg01, local02
1b1b0     0F 29 02 F6 | 	mov	local06, local01
1b1b4     07 28 46 F0 | 	shr	local06, #7
1b1b8     24 20 06 F1 | 	add	local02, #36
1b1bc     10 15 02 FB | 	rdlong	arg02, local02
1b1c0     24 20 86 F1 | 	sub	local02, #36
1b1c4     14 15 02 F1 | 	add	arg02, local06
1b1c8     DC FC BF FD | 	call	#_fatfs_cc_move_window
1b1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1d0     20 00 90 5D |  if_ne	jmp	#LR__3127
1b1d4     34 20 06 F1 | 	add	local02, #52
1b1d8     02 1E 66 F0 | 	shl	local01, #2
1b1dc     FF 1F 06 F5 | 	and	local01, #511
1b1e0     0F 21 02 F1 | 	add	local02, local01
1b1e4                 | ' {
1b1e4                 | ' 
1b1e4                 | ' 	return *((DWORD*)ptr);
1b1e4     10 25 02 FB | 	rdlong	local04, local02
1b1e8     7C 24 06 F4 | 	bitl	local04, #124
1b1ec                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1b1ec                 | ' 			break;
1b1ec     04 00 90 FD | 	jmp	#LR__3127
1b1f0                 | LR__3126
1b1f0     01 24 06 F6 | 	mov	local04, #1
1b1f4                 | LR__3127
1b1f4                 | LR__3128
1b1f4                 | ' 			val = 1;
1b1f4                 | ' 		}
1b1f4                 | ' 	}
1b1f4                 | ' 
1b1f4                 | ' 	return val;
1b1f4     12 FB 01 F6 | 	mov	result1, local04
1b1f8     A7 F0 03 F6 | 	mov	ptra, fp
1b1fc     B2 00 A0 FD | 	call	#popregs_
1b200                 | _fatfs_cc_get_fat_ret
1b200     2D 00 64 FD | 	ret
1b204                 | 
1b204                 | _fatfs_cc_put_fat
1b204     08 4A 05 F6 | 	mov	COUNT_, #8
1b208     A8 00 A0 FD | 	call	#pushregs_
1b20c     09 1F 02 F6 | 	mov	local01, arg01
1b210     0A 21 02 F6 | 	mov	local02, arg02
1b214     0B 23 02 F6 | 	mov	local03, arg03
1b218     02 24 06 F6 | 	mov	local04, #2
1b21c     02 20 16 F2 | 	cmp	local02, #2 wc
1b220     E0 01 90 CD |  if_b	jmp	#LR__3137
1b224     18 1E 06 F1 | 	add	local01, #24
1b228     0F 27 02 FB | 	rdlong	local05, local01
1b22c     18 1E 86 F1 | 	sub	local01, #24
1b230     13 21 12 F2 | 	cmp	local02, local05 wc
1b234     CC 01 90 3D |  if_ae	jmp	#LR__3137
1b238                 | ' 		switch (fs->fs_type) {
1b238     0F 29 C2 FA | 	rdbyte	local06, local01
1b23c     01 28 86 F1 | 	sub	local06, #1
1b240     03 28 26 F3 | 	fle	local06, #3
1b244     30 28 62 FD | 	jmprel	local06
1b248                 | LR__3130
1b248     0C 00 90 FD | 	jmp	#LR__3131
1b24c     F8 00 90 FD | 	jmp	#LR__3134
1b250     40 01 90 FD | 	jmp	#LR__3135
1b254     AC 01 90 FD | 	jmp	#LR__3136
1b258                 | LR__3131
1b258     10 2B 02 F6 | 	mov	local07, local02
1b25c     10 27 02 F6 | 	mov	local05, local02
1b260     01 26 46 F0 | 	shr	local05, #1
1b264     13 2B 02 F1 | 	add	local07, local05
1b268     0F 13 02 F6 | 	mov	arg01, local01
1b26c     15 29 02 F6 | 	mov	local06, local07
1b270     09 28 46 F0 | 	shr	local06, #9
1b274     24 1E 06 F1 | 	add	local01, #36
1b278     0F 15 02 FB | 	rdlong	arg02, local01
1b27c     24 1E 86 F1 | 	sub	local01, #36
1b280     14 15 02 F1 | 	add	arg02, local06
1b284     20 FC BF FD | 	call	#_fatfs_cc_move_window
1b288     FD 24 0A F6 | 	mov	local04, result1 wz
1b28c     74 01 90 5D |  if_ne	jmp	#LR__3136
1b290     34 1E 06 F1 | 	add	local01, #52
1b294     0F 2D 02 F6 | 	mov	local08, local01
1b298     15 27 02 F6 | 	mov	local05, local07
1b29c     FF 27 06 F5 | 	and	local05, #511
1b2a0     13 2D 02 F1 | 	add	local08, local05
1b2a4     01 20 CE F7 | 	test	local02, #1 wz
1b2a8     34 1E 86 F1 | 	sub	local01, #52
1b2ac     01 2A 06 F1 | 	add	local07, #1
1b2b0     18 00 90 AD |  if_e	jmp	#LR__3132
1b2b4     16 27 C2 FA | 	rdbyte	local05, local08
1b2b8     13 27 42 F8 | 	getnib	local05, local05, #0
1b2bc     11 29 E2 F8 | 	getbyte	local06, local03, #0
1b2c0     04 28 66 F0 | 	shl	local06, #4
1b2c4     14 27 42 F5 | 	or	local05, local06
1b2c8     04 00 90 FD | 	jmp	#LR__3133
1b2cc                 | LR__3132
1b2cc     11 27 02 F6 | 	mov	local05, local03
1b2d0                 | LR__3133
1b2d0     16 27 42 FC | 	wrbyte	local05, local08
1b2d4     03 1E 06 F1 | 	add	local01, #3
1b2d8     0F 03 48 FC | 	wrbyte	#1, local01
1b2dc     03 1E 86 F1 | 	sub	local01, #3
1b2e0     0F 13 02 F6 | 	mov	arg01, local01
1b2e4     15 2D 02 F6 | 	mov	local08, local07
1b2e8     09 2C 46 F0 | 	shr	local08, #9
1b2ec     24 1E 06 F1 | 	add	local01, #36
1b2f0     0F 15 02 FB | 	rdlong	arg02, local01
1b2f4     24 1E 86 F1 | 	sub	local01, #36
1b2f8     16 15 02 F1 | 	add	arg02, local08
1b2fc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1b300     FD 24 0A F6 | 	mov	local04, result1 wz
1b304     FC 00 90 5D |  if_ne	jmp	#LR__3136
1b308     34 1E 06 F1 | 	add	local01, #52
1b30c     0F 2D 02 F6 | 	mov	local08, local01
1b310     FF 2B 06 F5 | 	and	local07, #511
1b314     15 2D 02 F1 | 	add	local08, local07
1b318     01 20 CE F7 | 	test	local02, #1 wz
1b31c     04 22 46 50 |  if_ne	shr	local03, #4
1b320     11 27 02 56 |  if_ne	mov	local05, local03
1b324     16 27 C2 AA |  if_e	rdbyte	local05, local08
1b328     F0 26 06 A5 |  if_e	and	local05, #240
1b32c     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1b330     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1b334     11 27 42 A5 |  if_e	or	local05, local03
1b338     16 27 42 FC | 	wrbyte	local05, local08
1b33c     31 1E 86 F1 | 	sub	local01, #49
1b340     0F 03 48 FC | 	wrbyte	#1, local01
1b344                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1b344                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1b344                 | ' 			fs->wflag = 1;
1b344                 | ' 			break;
1b344     BC 00 90 FD | 	jmp	#LR__3136
1b348                 | LR__3134
1b348     0F 13 02 F6 | 	mov	arg01, local01
1b34c     10 2D 02 F6 | 	mov	local08, local02
1b350     08 2C 46 F0 | 	shr	local08, #8
1b354     24 1E 06 F1 | 	add	local01, #36
1b358     0F 15 02 FB | 	rdlong	arg02, local01
1b35c     24 1E 86 F1 | 	sub	local01, #36
1b360     16 15 02 F1 | 	add	arg02, local08
1b364     40 FB BF FD | 	call	#_fatfs_cc_move_window
1b368     FD 24 0A F6 | 	mov	local04, result1 wz
1b36c     94 00 90 5D |  if_ne	jmp	#LR__3136
1b370     34 1E 06 F1 | 	add	local01, #52
1b374     0F 13 02 F6 | 	mov	arg01, local01
1b378     01 20 66 F0 | 	shl	local02, #1
1b37c     FF 21 06 F5 | 	and	local02, #511
1b380     10 13 02 F1 | 	add	arg01, local02
1b384     09 23 52 FC | 	wrword	local03, arg01
1b388     31 1E 86 F1 | 	sub	local01, #49
1b38c     0F 03 48 FC | 	wrbyte	#1, local01
1b390                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1b390                 | ' 			fs->wflag = 1;
1b390                 | ' 			break;
1b390     70 00 90 FD | 	jmp	#LR__3136
1b394                 | LR__3135
1b394     0F 13 02 F6 | 	mov	arg01, local01
1b398     10 2D 02 F6 | 	mov	local08, local02
1b39c     07 2C 46 F0 | 	shr	local08, #7
1b3a0     24 1E 06 F1 | 	add	local01, #36
1b3a4     0F 15 02 FB | 	rdlong	arg02, local01
1b3a8     24 1E 86 F1 | 	sub	local01, #36
1b3ac     16 15 02 F1 | 	add	arg02, local08
1b3b0     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1b3b4     FD 24 0A F6 | 	mov	local04, result1 wz
1b3b8     48 00 90 5D |  if_ne	jmp	#LR__3136
1b3bc     7C 22 06 F4 | 	bitl	local03, #124
1b3c0     34 1E 06 F1 | 	add	local01, #52
1b3c4     10 2D 02 F6 | 	mov	local08, local02
1b3c8     02 2C 66 F0 | 	shl	local08, #2
1b3cc     FF 2D 06 F5 | 	and	local08, #511
1b3d0     0F 13 02 F6 | 	mov	arg01, local01
1b3d4     16 13 02 F1 | 	add	arg01, local08
1b3d8                 | ' {
1b3d8                 | ' 
1b3d8                 | ' 	return *((DWORD*)ptr);
1b3d8     09 2D 02 FB | 	rdlong	local08, arg01
1b3dc     00 00 78 FF 
1b3e0     00 2C 06 F5 | 	and	local08, ##-268435456
1b3e4     16 23 42 F5 | 	or	local03, local08
1b3e8     0F 13 02 F6 | 	mov	arg01, local01
1b3ec     02 20 66 F0 | 	shl	local02, #2
1b3f0     FF 21 06 F5 | 	and	local02, #511
1b3f4     10 13 02 F1 | 	add	arg01, local02
1b3f8     09 23 62 FC | 	wrlong	local03, arg01
1b3fc     31 1E 86 F1 | 	sub	local01, #49
1b400     0F 03 48 FC | 	wrbyte	#1, local01
1b404                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1b404                 | ' 			}
1b404                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1b404                 | ' 			fs->wflag = 1;
1b404                 | ' 			break;
1b404                 | LR__3136
1b404                 | LR__3137
1b404                 | ' 		}
1b404                 | ' 	}
1b404                 | ' 	return res;
1b404     12 FB 01 F6 | 	mov	result1, local04
1b408     A7 F0 03 F6 | 	mov	ptra, fp
1b40c     B2 00 A0 FD | 	call	#popregs_
1b410                 | _fatfs_cc_put_fat_ret
1b410     2D 00 64 FD | 	ret
1b414                 | 
1b414                 | _fatfs_cc_remove_chain
1b414     05 4A 05 F6 | 	mov	COUNT_, #5
1b418     A8 00 A0 FD | 	call	#pushregs_
1b41c     09 1F 02 F6 | 	mov	local01, arg01
1b420     0A 21 02 F6 | 	mov	local02, arg02
1b424     0B 23 02 F6 | 	mov	local03, arg03
1b428     0F 25 02 FB | 	rdlong	local04, local01
1b42c     02 20 16 F2 | 	cmp	local02, #2 wc
1b430     14 00 90 CD |  if_b	jmp	#LR__3140
1b434     18 24 06 F1 | 	add	local04, #24
1b438     12 FB 01 FB | 	rdlong	result1, local04
1b43c     18 24 86 F1 | 	sub	local04, #24
1b440     FD 20 12 F2 | 	cmp	local02, result1 wc
1b444     08 00 90 CD |  if_b	jmp	#LR__3141
1b448                 | LR__3140
1b448     02 FA 05 F6 | 	mov	result1, #2
1b44c     CC 00 90 FD | 	jmp	#LR__3146
1b450                 | LR__3141
1b450     00 22 0E F2 | 	cmp	local03, #0 wz
1b454     18 00 90 AD |  if_e	jmp	#LR__3142
1b458     11 15 02 F6 | 	mov	arg02, local03
1b45c     12 13 02 F6 | 	mov	arg01, local04
1b460     01 16 66 F6 | 	neg	arg03, #1
1b464     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1b468     00 FA 0D F2 | 	cmp	result1, #0 wz
1b46c     AC 00 90 5D |  if_ne	jmp	#LR__3146
1b470                 | LR__3142
1b470                 | ' 	}
1b470                 | ' 
1b470                 | ' 
1b470                 | ' 	do {
1b470                 | LR__3143
1b470     10 15 02 F6 | 	mov	arg02, local02
1b474     0F 13 02 F6 | 	mov	arg01, local01
1b478     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1b47c     FD 26 0A F6 | 	mov	local05, result1 wz
1b480     94 00 90 AD |  if_e	jmp	#LR__3145
1b484     01 26 0E F2 | 	cmp	local05, #1 wz
1b488     02 FA 05 A6 |  if_e	mov	result1, #2
1b48c     8C 00 90 AD |  if_e	jmp	#LR__3146
1b490     FF FF 7F FF 
1b494     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1b498     01 FA 05 A6 |  if_e	mov	result1, #1
1b49c     7C 00 90 AD |  if_e	jmp	#LR__3146
1b4a0     10 15 02 F6 | 	mov	arg02, local02
1b4a4     12 13 02 F6 | 	mov	arg01, local04
1b4a8     00 16 06 F6 | 	mov	arg03, #0
1b4ac     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1b4b0     FD 22 0A F6 | 	mov	local03, result1 wz
1b4b4     11 FB 01 56 |  if_ne	mov	result1, local03
1b4b8     60 00 90 5D |  if_ne	jmp	#LR__3146
1b4bc     18 24 06 F1 | 	add	local04, #24
1b4c0     12 23 02 FB | 	rdlong	local03, local04
1b4c4     02 22 86 F1 | 	sub	local03, #2
1b4c8     04 24 86 F1 | 	sub	local04, #4
1b4cc     12 21 02 FB | 	rdlong	local02, local04
1b4d0     14 24 86 F1 | 	sub	local04, #20
1b4d4     11 21 12 F2 | 	cmp	local02, local03 wc
1b4d8     24 00 90 3D |  if_ae	jmp	#LR__3144
1b4dc     14 24 06 F1 | 	add	local04, #20
1b4e0     12 23 02 FB | 	rdlong	local03, local04
1b4e4     01 22 06 F1 | 	add	local03, #1
1b4e8     12 23 62 FC | 	wrlong	local03, local04
1b4ec     10 24 86 F1 | 	sub	local04, #16
1b4f0     12 23 C2 FA | 	rdbyte	local03, local04
1b4f4     01 22 46 F5 | 	or	local03, #1
1b4f8     12 23 42 FC | 	wrbyte	local03, local04
1b4fc     04 24 86 F1 | 	sub	local04, #4
1b500                 | LR__3144
1b500     13 21 02 F6 | 	mov	local02, local05
1b504     18 24 06 F1 | 	add	local04, #24
1b508     12 27 02 FB | 	rdlong	local05, local04
1b50c     18 24 86 F1 | 	sub	local04, #24
1b510     13 21 12 F2 | 	cmp	local02, local05 wc
1b514     58 FF 9F CD |  if_b	jmp	#LR__3143
1b518                 | LR__3145
1b518                 | ' #line 1500 "ff.c"
1b518                 | ' 	return FR_OK;
1b518     00 FA 05 F6 | 	mov	result1, #0
1b51c                 | LR__3146
1b51c     A7 F0 03 F6 | 	mov	ptra, fp
1b520     B2 00 A0 FD | 	call	#popregs_
1b524                 | _fatfs_cc_remove_chain_ret
1b524     2D 00 64 FD | 	ret
1b528                 | 
1b528                 | _fatfs_cc_create_chain
1b528     09 4A 05 F6 | 	mov	COUNT_, #9
1b52c     A8 00 A0 FD | 	call	#pushregs_
1b530     09 1F 02 F6 | 	mov	local01, arg01
1b534     0A 21 0A F6 | 	mov	local02, arg02 wz
1b538     0F 23 02 FB | 	rdlong	local03, local01
1b53c     28 00 90 5D |  if_ne	jmp	#LR__3150
1b540     10 22 06 F1 | 	add	local03, #16
1b544     11 25 0A FB | 	rdlong	local04, local03 wz
1b548     10 22 86 F1 | 	sub	local03, #16
1b54c     18 22 06 51 |  if_ne	add	local03, #24
1b550     11 27 02 5B |  if_ne	rdlong	local05, local03
1b554     18 22 86 51 |  if_ne	sub	local03, #24
1b558     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1b55c     50 00 90 4D |  if_c_and_nz	jmp	#LR__3151
1b560     01 24 06 F6 | 	mov	local04, #1
1b564     48 00 90 FD | 	jmp	#LR__3151
1b568                 | LR__3150
1b568     10 15 02 F6 | 	mov	arg02, local02
1b56c     0F 13 02 F6 | 	mov	arg01, local01
1b570     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1b574     FD 24 02 F6 | 	mov	local04, result1
1b578     02 24 16 F2 | 	cmp	local04, #2 wc
1b57c     01 FA 05 C6 |  if_b	mov	result1, #1
1b580     BC 01 90 CD |  if_b	jmp	#LR__3161
1b584     FF FF 7F FF 
1b588     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1b58c     12 FB 01 A6 |  if_e	mov	result1, local04
1b590     AC 01 90 AD |  if_e	jmp	#LR__3161
1b594     18 22 06 F1 | 	add	local03, #24
1b598     11 27 02 FB | 	rdlong	local05, local03
1b59c     18 22 86 F1 | 	sub	local03, #24
1b5a0     13 25 12 F2 | 	cmp	local04, local05 wc
1b5a4     12 FB 01 C6 |  if_b	mov	result1, local04
1b5a8     94 01 90 CD |  if_b	jmp	#LR__3161
1b5ac     10 25 02 F6 | 	mov	local04, local02
1b5b0                 | LR__3151
1b5b0     14 22 06 F1 | 	add	local03, #20
1b5b4     11 27 0A FB | 	rdlong	local05, local03 wz
1b5b8     14 22 86 F1 | 	sub	local03, #20
1b5bc     00 FA 05 A6 |  if_e	mov	result1, #0
1b5c0     7C 01 90 AD |  if_e	jmp	#LR__3161
1b5c4     00 28 06 F6 | 	mov	local06, #0
1b5c8     10 25 0A F2 | 	cmp	local04, local02 wz
1b5cc     74 00 90 5D |  if_ne	jmp	#LR__3154
1b5d0     12 29 02 F6 | 	mov	local06, local04
1b5d4     01 28 06 F1 | 	add	local06, #1
1b5d8     18 22 06 F1 | 	add	local03, #24
1b5dc     11 27 02 FB | 	rdlong	local05, local03
1b5e0     18 22 86 F1 | 	sub	local03, #24
1b5e4     13 29 12 F2 | 	cmp	local06, local05 wc
1b5e8     02 28 06 36 |  if_ae	mov	local06, #2
1b5ec     14 15 02 F6 | 	mov	arg02, local06
1b5f0     0F 13 02 F6 | 	mov	arg01, local01
1b5f4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1b5f8     FD 26 02 F6 | 	mov	local05, result1
1b5fc     01 26 0E F2 | 	cmp	local05, #1 wz
1b600     FF FF 7F 5F 
1b604     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1b608     13 FB 01 A6 |  if_e	mov	result1, local05
1b60c     30 01 90 AD |  if_e	jmp	#LR__3161
1b610     00 26 0E F2 | 	cmp	local05, #0 wz
1b614     2C 00 90 AD |  if_e	jmp	#LR__3153
1b618     10 22 06 F1 | 	add	local03, #16
1b61c     11 2B 02 FB | 	rdlong	local07, local03
1b620     10 22 86 F1 | 	sub	local03, #16
1b624     02 2A 16 F2 | 	cmp	local07, #2 wc
1b628     14 00 90 CD |  if_b	jmp	#LR__3152
1b62c     18 22 06 F1 | 	add	local03, #24
1b630     11 27 02 FB | 	rdlong	local05, local03
1b634     18 22 86 F1 | 	sub	local03, #24
1b638     13 2B 12 F2 | 	cmp	local07, local05 wc
1b63c     15 25 02 C6 |  if_b	mov	local04, local07
1b640                 | LR__3152
1b640     00 28 06 F6 | 	mov	local06, #0
1b644                 | LR__3153
1b644                 | LR__3154
1b644     00 28 0E F2 | 	cmp	local06, #0 wz
1b648     60 00 90 5D |  if_ne	jmp	#LR__3157
1b64c     12 29 02 F6 | 	mov	local06, local04
1b650                 | ' 			ncl = scl;
1b650                 | ' 			for (;;) {
1b650                 | LR__3155
1b650     01 28 06 F1 | 	add	local06, #1
1b654     18 22 06 F1 | 	add	local03, #24
1b658     11 27 02 FB | 	rdlong	local05, local03
1b65c     18 22 86 F1 | 	sub	local03, #24
1b660     13 29 12 F2 | 	cmp	local06, local05 wc
1b664     02 28 06 36 |  if_ae	mov	local06, #2
1b668     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1b66c     00 FA 05 16 |  if_a	mov	result1, #0
1b670     CC 00 90 1D |  if_a	jmp	#LR__3161
1b674     14 15 02 F6 | 	mov	arg02, local06
1b678     0F 13 02 F6 | 	mov	arg01, local01
1b67c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1b680     FD 2A 0A F6 | 	mov	local07, result1 wz
1b684     24 00 90 AD |  if_e	jmp	#LR__3156
1b688     01 2A 0E F2 | 	cmp	local07, #1 wz
1b68c     FF FF 7F 5F 
1b690     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1b694     15 FB 01 A6 |  if_e	mov	result1, local07
1b698     A4 00 90 AD |  if_e	jmp	#LR__3161
1b69c     12 29 0A F2 | 	cmp	local06, local04 wz
1b6a0     00 FA 05 A6 |  if_e	mov	result1, #0
1b6a4     98 00 90 AD |  if_e	jmp	#LR__3161
1b6a8     A4 FF 9F FD | 	jmp	#LR__3155
1b6ac                 | LR__3156
1b6ac                 | LR__3157
1b6ac     11 13 02 F6 | 	mov	arg01, local03
1b6b0     14 15 02 F6 | 	mov	arg02, local06
1b6b4     01 16 66 F6 | 	neg	arg03, #1
1b6b8     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1b6bc     FD 2C 0A F6 | 	mov	local08, result1 wz
1b6c0     1C 00 90 5D |  if_ne	jmp	#LR__3158
1b6c4     00 20 0E F2 | 	cmp	local02, #0 wz
1b6c8     14 00 90 AD |  if_e	jmp	#LR__3158
1b6cc     11 13 02 F6 | 	mov	arg01, local03
1b6d0     10 15 02 F6 | 	mov	arg02, local02
1b6d4     14 17 02 F6 | 	mov	arg03, local06
1b6d8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1b6dc     FD 2C 02 F6 | 	mov	local08, result1
1b6e0                 | LR__3158
1b6e0     00 2C 0E F2 | 	cmp	local08, #0 wz
1b6e4     4C 00 90 5D |  if_ne	jmp	#LR__3159
1b6e8     10 22 06 F1 | 	add	local03, #16
1b6ec     11 29 62 FC | 	wrlong	local06, local03
1b6f0     08 22 06 F1 | 	add	local03, #8
1b6f4     11 27 02 FB | 	rdlong	local05, local03
1b6f8     02 26 86 F1 | 	sub	local05, #2
1b6fc     04 22 86 F1 | 	sub	local03, #4
1b700     11 2F 02 FB | 	rdlong	local09, local03
1b704     14 22 86 F1 | 	sub	local03, #20
1b708     13 2F 1A F2 | 	cmp	local09, local05 wcz
1b70c     14 22 06 E1 |  if_be	add	local03, #20
1b710     11 2F 02 EB |  if_be	rdlong	local09, local03
1b714     01 2E 86 E1 |  if_be	sub	local09, #1
1b718     11 2F 62 EC |  if_be	wrlong	local09, local03
1b71c     14 22 86 E1 |  if_be	sub	local03, #20
1b720     04 22 06 F1 | 	add	local03, #4
1b724     11 27 C2 FA | 	rdbyte	local05, local03
1b728     01 26 46 F5 | 	or	local05, #1
1b72c     11 27 42 FC | 	wrbyte	local05, local03
1b730     08 00 90 FD | 	jmp	#LR__3160
1b734                 | LR__3159
1b734     01 2C 0E F2 | 	cmp	local08, #1 wz
1b738     01 28 C6 F6 | 	negz	local06, #1
1b73c                 | LR__3160
1b73c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1b73c                 | ' 	}
1b73c                 | ' 
1b73c                 | ' 	return ncl;
1b73c     14 FB 01 F6 | 	mov	result1, local06
1b740                 | LR__3161
1b740     A7 F0 03 F6 | 	mov	ptra, fp
1b744     B2 00 A0 FD | 	call	#popregs_
1b748                 | _fatfs_cc_create_chain_ret
1b748     2D 00 64 FD | 	ret
1b74c                 | 
1b74c                 | _fatfs_cc_dir_clear
1b74c     06 4A 05 F6 | 	mov	COUNT_, #6
1b750     A8 00 A0 FD | 	call	#pushregs_
1b754     09 1F 02 F6 | 	mov	local01, arg01
1b758     0A 21 02 F6 | 	mov	local02, arg02
1b75c     0F 13 02 F6 | 	mov	arg01, local01
1b760     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1b764     00 FA 0D F2 | 	cmp	result1, #0 wz
1b768     01 FA 05 56 |  if_ne	mov	result1, #1
1b76c     90 00 90 5D |  if_ne	jmp	#LR__3172
1b770     0F 13 02 F6 | 	mov	arg01, local01
1b774     10 15 02 F6 | 	mov	arg02, local02
1b778     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1b77c     FD 22 02 F6 | 	mov	local03, result1
1b780     30 1E 06 F1 | 	add	local01, #48
1b784     0F 23 62 FC | 	wrlong	local03, local01
1b788     04 1E 06 F1 | 	add	local01, #4
1b78c     0F 13 02 F6 | 	mov	arg01, local01
1b790     00 14 06 F6 | 	mov	arg02, #0
1b794     09 16 C6 F9 | 	decod	arg03, #9
1b798     98 00 A0 FD | 	call	#\builtin_bytefill_
1b79c     0F 25 02 F6 | 	mov	local04, local01
1b7a0                 | ' #line 1667 "ff.c"
1b7a0                 | ' 	{
1b7a0                 | ' 		ibuf = fs->win; szb = 1;
1b7a0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1b7a0     00 26 06 F6 | 	mov	local05, #0
1b7a4     34 1E 86 F1 | 	sub	local01, #52
1b7a8                 | LR__3170
1b7a8     0A 1E 06 F1 | 	add	local01, #10
1b7ac     0F 29 E2 FA | 	rdword	local06, local01
1b7b0     0A 1E 86 F1 | 	sub	local01, #10
1b7b4     14 27 12 F2 | 	cmp	local05, local06 wc
1b7b8     2C 00 90 3D |  if_ae	jmp	#LR__3171
1b7bc     01 1E 06 F1 | 	add	local01, #1
1b7c0     0F 13 C2 FA | 	rdbyte	arg01, local01
1b7c4     01 1E 86 F1 | 	sub	local01, #1
1b7c8     12 15 02 F6 | 	mov	arg02, local04
1b7cc     11 17 02 F6 | 	mov	arg03, local03
1b7d0     13 17 02 F1 | 	add	arg03, local05
1b7d4     01 18 06 F6 | 	mov	arg04, #1
1b7d8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1b7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1b7e0     01 26 06 A1 |  if_e	add	local05, #1
1b7e4     C0 FF 9F AD |  if_e	jmp	#LR__3170
1b7e8                 | LR__3171
1b7e8                 | ' 	}
1b7e8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1b7e8     0A 1E 06 F1 | 	add	local01, #10
1b7ec     0F 25 E2 FA | 	rdword	local04, local01
1b7f0     12 27 0A F2 | 	cmp	local05, local04 wz
1b7f4     00 28 06 A6 |  if_e	mov	local06, #0
1b7f8     01 28 06 56 |  if_ne	mov	local06, #1
1b7fc     14 FB 01 F6 | 	mov	result1, local06
1b800                 | LR__3172
1b800     A7 F0 03 F6 | 	mov	ptra, fp
1b804     B2 00 A0 FD | 	call	#popregs_
1b808                 | _fatfs_cc_dir_clear_ret
1b808     2D 00 64 FD | 	ret
1b80c                 | 
1b80c                 | _fatfs_cc_dir_sdi
1b80c     06 4A 05 F6 | 	mov	COUNT_, #6
1b810     A8 00 A0 FD | 	call	#pushregs_
1b814     09 1F 02 F6 | 	mov	local01, arg01
1b818     0A 21 02 F6 | 	mov	local02, arg02
1b81c     0F 23 02 FB | 	rdlong	local03, local01
1b820     00 10 00 FF 
1b824     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1b828     1F 20 CE C7 |  if_b	test	local02, #31 wz
1b82c                 | ' 		return FR_INT_ERR;
1b82c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1b830     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3186
1b834     10 1E 06 F1 | 	add	local01, #16
1b838     0F 21 62 FC | 	wrlong	local02, local01
1b83c     08 1E 86 F1 | 	sub	local01, #8
1b840     0F 25 0A FB | 	rdlong	local04, local01 wz
1b844     08 1E 86 F1 | 	sub	local01, #8
1b848     11 27 C2 AA |  if_e	rdbyte	local05, local03
1b84c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1b850     28 22 06 21 |  if_nc_and_z	add	local03, #40
1b854     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1b858     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1b85c     00 24 0E F2 | 	cmp	local04, #0 wz
1b860     3C 00 90 5D |  if_ne	jmp	#LR__3180
1b864     10 27 02 F6 | 	mov	local05, local02
1b868     05 26 46 F0 | 	shr	local05, #5
1b86c     08 22 06 F1 | 	add	local03, #8
1b870     11 15 E2 FA | 	rdword	arg02, local03
1b874     08 22 86 F1 | 	sub	local03, #8
1b878     0A 27 12 F2 | 	cmp	local05, arg02 wc
1b87c     02 FA 05 36 |  if_ae	mov	result1, #2
1b880     E4 00 90 3D |  if_ae	jmp	#LR__3186
1b884     28 22 06 F1 | 	add	local03, #40
1b888     11 27 02 FB | 	rdlong	local05, local03
1b88c     28 22 86 F1 | 	sub	local03, #40
1b890     18 1E 06 F1 | 	add	local01, #24
1b894     0F 27 62 FC | 	wrlong	local05, local01
1b898     18 1E 86 F1 | 	sub	local01, #24
1b89c     7C 00 90 FD | 	jmp	#LR__3185
1b8a0                 | LR__3180
1b8a0     0A 22 06 F1 | 	add	local03, #10
1b8a4     11 29 E2 FA | 	rdword	local06, local03
1b8a8     0A 22 86 F1 | 	sub	local03, #10
1b8ac     09 28 66 F0 | 	shl	local06, #9
1b8b0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1b8b0                 | ' 		while (ofs >= csz) {
1b8b0                 | LR__3181
1b8b0     14 21 12 F2 | 	cmp	local02, local06 wc
1b8b4     4C 00 90 CD |  if_b	jmp	#LR__3184
1b8b8     0F 13 02 F6 | 	mov	arg01, local01
1b8bc     12 15 02 F6 | 	mov	arg02, local04
1b8c0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1b8c4     FD 24 02 F6 | 	mov	local04, result1
1b8c8     FF FF 7F FF 
1b8cc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1b8d0     01 FA 05 A6 |  if_e	mov	result1, #1
1b8d4     90 00 90 AD |  if_e	jmp	#LR__3186
1b8d8     02 24 16 F2 | 	cmp	local04, #2 wc
1b8dc     14 00 90 CD |  if_b	jmp	#LR__3182
1b8e0     18 22 06 F1 | 	add	local03, #24
1b8e4     11 27 02 FB | 	rdlong	local05, local03
1b8e8     18 22 86 F1 | 	sub	local03, #24
1b8ec     13 25 12 F2 | 	cmp	local04, local05 wc
1b8f0     08 00 90 CD |  if_b	jmp	#LR__3183
1b8f4                 | LR__3182
1b8f4     02 FA 05 F6 | 	mov	result1, #2
1b8f8     6C 00 90 FD | 	jmp	#LR__3186
1b8fc                 | LR__3183
1b8fc     14 21 82 F1 | 	sub	local02, local06
1b900     AC FF 9F FD | 	jmp	#LR__3181
1b904                 | LR__3184
1b904     11 13 02 F6 | 	mov	arg01, local03
1b908     12 15 02 F6 | 	mov	arg02, local04
1b90c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1b910     18 1E 06 F1 | 	add	local01, #24
1b914     0F FB 61 FC | 	wrlong	result1, local01
1b918     18 1E 86 F1 | 	sub	local01, #24
1b91c                 | LR__3185
1b91c     14 1E 06 F1 | 	add	local01, #20
1b920     0F 25 62 FC | 	wrlong	local04, local01
1b924     04 1E 06 F1 | 	add	local01, #4
1b928     0F 27 0A FB | 	rdlong	local05, local01 wz
1b92c     18 1E 86 F1 | 	sub	local01, #24
1b930     02 FA 05 A6 |  if_e	mov	result1, #2
1b934     30 00 90 AD |  if_e	jmp	#LR__3186
1b938     10 29 02 F6 | 	mov	local06, local02
1b93c     09 28 46 F0 | 	shr	local06, #9
1b940     18 1E 06 F1 | 	add	local01, #24
1b944     0F 27 02 FB | 	rdlong	local05, local01
1b948     14 27 02 F1 | 	add	local05, local06
1b94c     0F 27 62 FC | 	wrlong	local05, local01
1b950     34 22 06 F1 | 	add	local03, #52
1b954     FF 21 06 F5 | 	and	local02, #511
1b958     10 23 02 F1 | 	add	local03, local02
1b95c     04 1E 06 F1 | 	add	local01, #4
1b960     0F 23 62 FC | 	wrlong	local03, local01
1b964                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1b964                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1b964                 | ' 
1b964                 | ' 	return FR_OK;
1b964     00 FA 05 F6 | 	mov	result1, #0
1b968                 | LR__3186
1b968     A7 F0 03 F6 | 	mov	ptra, fp
1b96c     B2 00 A0 FD | 	call	#popregs_
1b970                 | _fatfs_cc_dir_sdi_ret
1b970     2D 00 64 FD | 	ret
1b974                 | 
1b974                 | _fatfs_cc_dir_next
1b974     05 4A 05 F6 | 	mov	COUNT_, #5
1b978     A8 00 A0 FD | 	call	#pushregs_
1b97c     09 1F 02 F6 | 	mov	local01, arg01
1b980     0A 21 02 F6 | 	mov	local02, arg02
1b984     0F 23 02 FB | 	rdlong	local03, local01
1b988     10 1E 06 F1 | 	add	local01, #16
1b98c     0F 25 02 FB | 	rdlong	local04, local01
1b990     10 1E 86 F1 | 	sub	local01, #16
1b994     20 24 06 F1 | 	add	local04, #32
1b998     00 10 00 FF 
1b99c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1b9a0     18 1E 06 31 |  if_ae	add	local01, #24
1b9a4     0F 01 68 3C |  if_ae	wrlong	#0, local01
1b9a8     18 1E 86 31 |  if_ae	sub	local01, #24
1b9ac     18 1E 06 F1 | 	add	local01, #24
1b9b0     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b9b4     18 1E 86 F1 | 	sub	local01, #24
1b9b8     04 FA 05 A6 |  if_e	mov	result1, #4
1b9bc     64 01 90 AD |  if_e	jmp	#LR__3195
1b9c0     FF 25 CE F7 | 	test	local04, #511 wz
1b9c4     3C 01 90 5D |  if_ne	jmp	#LR__3194
1b9c8     18 1E 06 F1 | 	add	local01, #24
1b9cc     0F 15 02 FB | 	rdlong	arg02, local01
1b9d0     01 14 06 F1 | 	add	arg02, #1
1b9d4     0F 15 62 FC | 	wrlong	arg02, local01
1b9d8     04 1E 86 F1 | 	sub	local01, #4
1b9dc     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b9e0     14 1E 86 F1 | 	sub	local01, #20
1b9e4     2C 00 90 5D |  if_ne	jmp	#LR__3190
1b9e8     12 15 02 F6 | 	mov	arg02, local04
1b9ec     05 14 46 F0 | 	shr	arg02, #5
1b9f0     08 22 06 F1 | 	add	local03, #8
1b9f4     11 21 E2 FA | 	rdword	local02, local03
1b9f8     08 22 86 F1 | 	sub	local03, #8
1b9fc     10 15 12 F2 | 	cmp	arg02, local02 wc
1ba00     18 1E 06 31 |  if_ae	add	local01, #24
1ba04     0F 01 68 3C |  if_ae	wrlong	#0, local01
1ba08                 | ' 				dp->sect = 0; return FR_NO_FILE;
1ba08     04 FA 05 36 |  if_ae	mov	result1, #4
1ba0c     14 01 90 3D |  if_ae	jmp	#LR__3195
1ba10     F0 00 90 FD | 	jmp	#LR__3193
1ba14                 | LR__3190
1ba14     12 13 02 F6 | 	mov	arg01, local04
1ba18     09 12 46 F0 | 	shr	arg01, #9
1ba1c     0A 22 06 F1 | 	add	local03, #10
1ba20     11 15 E2 FA | 	rdword	arg02, local03
1ba24     0A 22 86 F1 | 	sub	local03, #10
1ba28     01 14 86 F1 | 	sub	arg02, #1
1ba2c     0A 13 CA F7 | 	test	arg01, arg02 wz
1ba30     D0 00 90 5D |  if_ne	jmp	#LR__3192
1ba34     0F 13 02 F6 | 	mov	arg01, local01
1ba38     14 1E 06 F1 | 	add	local01, #20
1ba3c     0F 15 02 FB | 	rdlong	arg02, local01
1ba40     14 1E 86 F1 | 	sub	local01, #20
1ba44     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1ba48     FD 26 02 F6 | 	mov	local05, result1
1ba4c     02 26 16 F2 | 	cmp	local05, #2 wc
1ba50     02 FA 05 C6 |  if_b	mov	result1, #2
1ba54     CC 00 90 CD |  if_b	jmp	#LR__3195
1ba58     FF FF 7F FF 
1ba5c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1ba60     01 FA 05 A6 |  if_e	mov	result1, #1
1ba64     BC 00 90 AD |  if_e	jmp	#LR__3195
1ba68     18 22 06 F1 | 	add	local03, #24
1ba6c     11 15 02 FB | 	rdlong	arg02, local03
1ba70     18 22 86 F1 | 	sub	local03, #24
1ba74     0A 27 12 F2 | 	cmp	local05, arg02 wc
1ba78     68 00 90 CD |  if_b	jmp	#LR__3191
1ba7c     00 20 0E F2 | 	cmp	local02, #0 wz
1ba80     18 1E 06 A1 |  if_e	add	local01, #24
1ba84     0F 01 68 AC |  if_e	wrlong	#0, local01
1ba88                 | ' 						dp->sect = 0; return FR_NO_FILE;
1ba88     04 FA 05 A6 |  if_e	mov	result1, #4
1ba8c     94 00 90 AD |  if_e	jmp	#LR__3195
1ba90     0F 13 02 F6 | 	mov	arg01, local01
1ba94     14 1E 06 F1 | 	add	local01, #20
1ba98     0F 15 02 FB | 	rdlong	arg02, local01
1ba9c     14 1E 86 F1 | 	sub	local01, #20
1baa0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1baa4     FD 26 0A F6 | 	mov	local05, result1 wz
1baa8     07 FA 05 A6 |  if_e	mov	result1, #7
1baac     74 00 90 AD |  if_e	jmp	#LR__3195
1bab0     01 26 0E F2 | 	cmp	local05, #1 wz
1bab4     02 FA 05 A6 |  if_e	mov	result1, #2
1bab8     68 00 90 AD |  if_e	jmp	#LR__3195
1babc     FF FF 7F FF 
1bac0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1bac4     01 FA 05 A6 |  if_e	mov	result1, #1
1bac8     58 00 90 AD |  if_e	jmp	#LR__3195
1bacc     13 15 02 F6 | 	mov	arg02, local05
1bad0     11 13 02 F6 | 	mov	arg01, local03
1bad4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1bad8     00 FA 0D F2 | 	cmp	result1, #0 wz
1badc     01 FA 05 56 |  if_ne	mov	result1, #1
1bae0     40 00 90 5D |  if_ne	jmp	#LR__3195
1bae4                 | LR__3191
1bae4     14 1E 06 F1 | 	add	local01, #20
1bae8     0F 27 62 FC | 	wrlong	local05, local01
1baec     11 13 02 F6 | 	mov	arg01, local03
1baf0     13 15 02 F6 | 	mov	arg02, local05
1baf4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1baf8     04 1E 06 F1 | 	add	local01, #4
1bafc     0F FB 61 FC | 	wrlong	result1, local01
1bb00     18 1E 86 F1 | 	sub	local01, #24
1bb04                 | LR__3192
1bb04                 | LR__3193
1bb04                 | LR__3194
1bb04     10 1E 06 F1 | 	add	local01, #16
1bb08     0F 25 62 FC | 	wrlong	local04, local01
1bb0c     34 22 06 F1 | 	add	local03, #52
1bb10     FF 25 06 F5 | 	and	local04, #511
1bb14     12 23 02 F1 | 	add	local03, local04
1bb18     0C 1E 06 F1 | 	add	local01, #12
1bb1c     0F 23 62 FC | 	wrlong	local03, local01
1bb20                 | ' #line 1771 "ff.c"
1bb20                 | ' 				}
1bb20                 | ' 				dp->clust = clst;
1bb20                 | ' 				dp->sect = clst2sect(fs, clst);
1bb20                 | ' 			}
1bb20                 | ' 		}
1bb20                 | ' 	}
1bb20                 | ' 	dp->dptr = ofs;
1bb20                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1bb20                 | ' 
1bb20                 | ' 	return FR_OK;
1bb20     00 FA 05 F6 | 	mov	result1, #0
1bb24                 | LR__3195
1bb24     A7 F0 03 F6 | 	mov	ptra, fp
1bb28     B2 00 A0 FD | 	call	#popregs_
1bb2c                 | _fatfs_cc_dir_next_ret
1bb2c     2D 00 64 FD | 	ret
1bb30                 | 
1bb30                 | _fatfs_cc_dir_alloc
1bb30     08 4A 05 F6 | 	mov	COUNT_, #8
1bb34     A8 00 A0 FD | 	call	#pushregs_
1bb38     09 1F 02 F6 | 	mov	local01, arg01
1bb3c     0A 21 02 F6 | 	mov	local02, arg02
1bb40     0F 23 02 FB | 	rdlong	local03, local01
1bb44     0F 13 02 F6 | 	mov	arg01, local01
1bb48     00 14 06 F6 | 	mov	arg02, #0
1bb4c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1bb50     FD 24 0A F6 | 	mov	local04, result1 wz
1bb54     70 00 90 5D |  if_ne	jmp	#LR__3204
1bb58     00 26 06 F6 | 	mov	local05, #0
1bb5c                 | ' 		n = 0;
1bb5c                 | ' 		do {
1bb5c                 | LR__3200
1bb5c     18 1E 06 F1 | 	add	local01, #24
1bb60     0F 15 02 FB | 	rdlong	arg02, local01
1bb64     18 1E 86 F1 | 	sub	local01, #24
1bb68     11 13 02 F6 | 	mov	arg01, local03
1bb6c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1bb70     FD 24 0A F6 | 	mov	local04, result1 wz
1bb74     50 00 90 5D |  if_ne	jmp	#LR__3203
1bb78     1C 1E 06 F1 | 	add	local01, #28
1bb7c     0F 29 02 FB | 	rdlong	local06, local01
1bb80     1C 1E 86 F1 | 	sub	local01, #28
1bb84     14 29 C2 FA | 	rdbyte	local06, local06
1bb88     E5 28 0E F2 | 	cmp	local06, #229 wz
1bb8c     1C 1E 06 51 |  if_ne	add	local01, #28
1bb90     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1bb94     1C 1E 86 51 |  if_ne	sub	local01, #28
1bb98     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1bb9c     10 00 90 5D |  if_ne	jmp	#LR__3201
1bba0     01 26 06 F1 | 	add	local05, #1
1bba4     10 27 0A F2 | 	cmp	local05, local02 wz
1bba8     1C 00 90 AD |  if_e	jmp	#LR__3203
1bbac     04 00 90 FD | 	jmp	#LR__3202
1bbb0                 | LR__3201
1bbb0     00 26 06 F6 | 	mov	local05, #0
1bbb4                 | LR__3202
1bbb4     0F 13 02 F6 | 	mov	arg01, local01
1bbb8     01 14 06 F6 | 	mov	arg02, #1
1bbbc     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1bbc0     FD 24 0A F6 | 	mov	local04, result1 wz
1bbc4     94 FF 9F AD |  if_e	jmp	#LR__3200
1bbc8                 | LR__3203
1bbc8                 | LR__3204
1bbc8     04 24 0E F2 | 	cmp	local04, #4 wz
1bbcc     07 24 06 A6 |  if_e	mov	local04, #7
1bbd0                 | ' 	return res;
1bbd0     12 FB 01 F6 | 	mov	result1, local04
1bbd4     A7 F0 03 F6 | 	mov	ptra, fp
1bbd8     B2 00 A0 FD | 	call	#popregs_
1bbdc                 | _fatfs_cc_dir_alloc_ret
1bbdc     2D 00 64 FD | 	ret
1bbe0                 | 
1bbe0                 | _fatfs_cc_ld_clust
1bbe0     09 01 02 F6 | 	mov	_var01, arg01
1bbe4     0A 13 02 F6 | 	mov	arg01, arg02
1bbe8     1A 12 06 F1 | 	add	arg01, #26
1bbec                 | ' {
1bbec                 | ' 
1bbec                 | ' 	return *((WORD*)ptr);
1bbec     09 FB E1 FA | 	rdword	result1, arg01
1bbf0     FD 12 32 F9 | 	getword	arg01, result1, #0
1bbf4     00 01 C2 FA | 	rdbyte	_var01, _var01
1bbf8     03 00 0E F2 | 	cmp	_var01, #3 wz
1bbfc     14 14 06 A1 |  if_e	add	arg02, #20
1bc00                 | ' {
1bc00                 | ' 
1bc00                 | ' 	return *((WORD*)ptr);
1bc00     0A FB E1 AA |  if_e	rdword	result1, arg02
1bc04     10 FA 65 A0 |  if_e	shl	result1, #16
1bc08     FD 12 42 A5 |  if_e	or	arg01, result1
1bc0c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1bc0c                 | ' 	}
1bc0c                 | ' 
1bc0c                 | ' 	return cl;
1bc0c     09 FB 01 F6 | 	mov	result1, arg01
1bc10                 | _fatfs_cc_ld_clust_ret
1bc10     2D 00 64 FD | 	ret
1bc14                 | 
1bc14                 | _fatfs_cc_st_clust
1bc14     09 01 02 F6 | 	mov	_var01, arg01
1bc18     0A 13 02 F6 | 	mov	arg01, arg02
1bc1c     1A 12 06 F1 | 	add	arg01, #26
1bc20     09 17 52 FC | 	wrword	arg03, arg01
1bc24     00 01 C2 FA | 	rdbyte	_var01, _var01
1bc28     03 00 0E F2 | 	cmp	_var01, #3 wz
1bc2c     14 14 06 A1 |  if_e	add	arg02, #20
1bc30     10 16 46 A0 |  if_e	shr	arg03, #16
1bc34     0A 17 52 AC |  if_e	wrword	arg03, arg02
1bc38                 | _fatfs_cc_st_clust_ret
1bc38     2D 00 64 FD | 	ret
1bc3c                 | 
1bc3c                 | _fatfs_cc_cmp_lfn
1bc3c     07 4A 05 F6 | 	mov	COUNT_, #7
1bc40     A8 00 A0 FD | 	call	#pushregs_
1bc44     09 1F 02 F6 | 	mov	local01, arg01
1bc48     0A 13 02 F6 | 	mov	arg01, arg02
1bc4c     1A 12 06 F1 | 	add	arg01, #26
1bc50                 | ' {
1bc50                 | ' 
1bc50                 | ' 	return *((WORD*)ptr);
1bc50     09 FB E9 FA | 	rdword	result1, arg01 wz
1bc54     00 FA 05 56 |  if_ne	mov	result1, #0
1bc58     E0 00 90 5D |  if_ne	jmp	#LR__3216
1bc5c     0A 21 C2 FA | 	rdbyte	local02, arg02
1bc60     3F 20 06 F5 | 	and	local02, #63
1bc64     01 20 86 F1 | 	sub	local02, #1
1bc68     0D 20 06 FD | 	qmul	local02, #13
1bc6c                 | ' 
1bc6c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1bc6c                 | ' 
1bc6c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1bc6c     01 22 06 F6 | 	mov	local03, #1
1bc70     00 24 06 F6 | 	mov	local04, #0
1bc74     18 26 62 FD | 	getqx	local05
1bc78                 | LR__3210
1bc78     0D 24 16 F2 | 	cmp	local04, #13 wc
1bc7c     9C 00 90 3D |  if_ae	jmp	#LR__3215
1bc80     0A 13 02 F6 | 	mov	arg01, arg02
1bc84     12 21 02 F6 | 	mov	local02, local04
1bc88     01 00 00 FF 
1bc8c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1bc90     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1bc94     10 21 C2 FA | 	rdbyte	local02, local02
1bc98     01 20 06 FA | 	mul	local02, #1
1bc9c     10 13 02 F1 | 	add	arg01, local02
1bca0     01 00 00 FF 
1bca4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1bca8                 | ' {
1bca8                 | ' 
1bca8                 | ' 	return *((WORD*)ptr);
1bca8     09 FB E1 FA | 	rdword	result1, arg01
1bcac     FD 28 02 F6 | 	mov	local06, result1
1bcb0     11 21 02 F6 | 	mov	local02, local03
1bcb4     0F 20 4E F7 | 	zerox	local02, #15 wz
1bcb8     44 00 90 AD |  if_e	jmp	#LR__3213
1bcbc     00 27 16 F2 | 	cmp	local05, #256 wc
1bcc0     2C 00 90 3D |  if_ae	jmp	#LR__3211
1bcc4     14 13 32 F9 | 	getword	arg01, local06, #0
1bcc8     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1bccc     FD 20 02 F6 | 	mov	local02, result1
1bcd0     13 23 02 F6 | 	mov	local03, local05
1bcd4     01 22 66 F0 | 	shl	local03, #1
1bcd8     0F 23 02 F1 | 	add	local03, local01
1bcdc     11 13 E2 FA | 	rdword	arg01, local03
1bce0     01 26 06 F1 | 	add	local05, #1
1bce4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1bce8     FD 20 0A F2 | 	cmp	local02, result1 wz
1bcec     08 00 90 AD |  if_e	jmp	#LR__3212
1bcf0                 | LR__3211
1bcf0                 | ' 				return 0;
1bcf0     00 FA 05 F6 | 	mov	result1, #0
1bcf4     44 00 90 FD | 	jmp	#LR__3216
1bcf8                 | LR__3212
1bcf8     14 23 02 F6 | 	mov	local03, local06
1bcfc     14 00 90 FD | 	jmp	#LR__3214
1bd00                 | LR__3213
1bd00     14 29 32 F9 | 	getword	local06, local06, #0
1bd04     7F 00 00 FF 
1bd08     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1bd0c     00 FA 05 56 |  if_ne	mov	result1, #0
1bd10     28 00 90 5D |  if_ne	jmp	#LR__3216
1bd14                 | LR__3214
1bd14     01 24 06 F1 | 	add	local04, #1
1bd18     5C FF 9F FD | 	jmp	#LR__3210
1bd1c                 | LR__3215
1bd1c     0A 21 C2 FA | 	rdbyte	local02, arg02
1bd20     40 20 CE F7 | 	test	local02, #64 wz
1bd24     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1bd28     01 26 66 50 |  if_ne	shl	local05, #1
1bd2c     0F 27 02 51 |  if_ne	add	local05, local01
1bd30     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1bd34     00 FA 05 56 |  if_ne	mov	result1, #0
1bd38                 | ' 
1bd38                 | ' 	return 1;
1bd38     01 FA 05 A6 |  if_e	mov	result1, #1
1bd3c                 | LR__3216
1bd3c     A7 F0 03 F6 | 	mov	ptra, fp
1bd40     B2 00 A0 FD | 	call	#popregs_
1bd44                 | _fatfs_cc_cmp_lfn_ret
1bd44     2D 00 64 FD | 	ret
1bd48                 | 
1bd48                 | _fatfs_cc_pick_lfn
1bd48     09 01 02 F6 | 	mov	_var01, arg01
1bd4c     0A 13 02 F6 | 	mov	arg01, arg02
1bd50     1A 12 06 F1 | 	add	arg01, #26
1bd54                 | ' {
1bd54                 | ' 
1bd54                 | ' 	return *((WORD*)ptr);
1bd54     09 FB E9 FA | 	rdword	result1, arg01 wz
1bd58     00 FA 05 56 |  if_ne	mov	result1, #0
1bd5c     D4 00 90 5D |  if_ne	jmp	#LR__3225
1bd60     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bd64     40 02 26 F5 | 	andn	_var02, #64
1bd68     01 02 86 F1 | 	sub	_var02, #1
1bd6c     0D 02 06 FD | 	qmul	_var02, #13
1bd70                 | ' 
1bd70                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1bd70                 | ' 
1bd70                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1bd70     01 04 06 F6 | 	mov	_var03, #1
1bd74     00 06 06 F6 | 	mov	_var04, #0
1bd78     18 08 62 FD | 	getqx	_var05
1bd7c                 | LR__3220
1bd7c     0D 06 16 F2 | 	cmp	_var04, #13 wc
1bd80     80 00 90 3D |  if_ae	jmp	#LR__3223
1bd84     0A 13 02 F6 | 	mov	arg01, arg02
1bd88     03 03 02 F6 | 	mov	_var02, _var04
1bd8c     01 00 00 FF 
1bd90     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1bd94     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1bd98     01 03 C2 FA | 	rdbyte	_var02, _var02
1bd9c     01 02 06 FA | 	mul	_var02, #1
1bda0     01 13 02 F1 | 	add	arg01, _var02
1bda4     01 00 00 FF 
1bda8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1bdac                 | ' {
1bdac                 | ' 
1bdac                 | ' 	return *((WORD*)ptr);
1bdac     09 FB E1 FA | 	rdword	result1, arg01
1bdb0     FD 0A 02 F6 | 	mov	_var06, result1
1bdb4     02 03 02 F6 | 	mov	_var02, _var03
1bdb8     0F 02 4E F7 | 	zerox	_var02, #15 wz
1bdbc     28 00 90 AD |  if_e	jmp	#LR__3221
1bdc0     00 09 16 F2 | 	cmp	_var05, #256 wc
1bdc4     00 FA 05 36 |  if_ae	mov	result1, #0
1bdc8     68 00 90 3D |  if_ae	jmp	#LR__3225
1bdcc     04 03 02 F6 | 	mov	_var02, _var05
1bdd0     01 02 66 F0 | 	shl	_var02, #1
1bdd4     00 03 02 F1 | 	add	_var02, _var01
1bdd8     05 05 02 F6 | 	mov	_var03, _var06
1bddc     01 05 52 FC | 	wrword	_var03, _var02
1bde0     01 08 06 F1 | 	add	_var05, #1
1bde4     14 00 90 FD | 	jmp	#LR__3222
1bde8                 | LR__3221
1bde8     05 0B 32 F9 | 	getword	_var06, _var06, #0
1bdec     7F 00 00 FF 
1bdf0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1bdf4     00 FA 05 56 |  if_ne	mov	result1, #0
1bdf8     38 00 90 5D |  if_ne	jmp	#LR__3225
1bdfc                 | LR__3222
1bdfc     01 06 06 F1 | 	add	_var04, #1
1be00     78 FF 9F FD | 	jmp	#LR__3220
1be04                 | LR__3223
1be04     0A 03 C2 FA | 	rdbyte	_var02, arg02
1be08     40 02 CE F7 | 	test	_var02, #64 wz
1be0c     02 0D 02 56 |  if_ne	mov	_var07, _var03
1be10     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1be14     18 00 90 AD |  if_e	jmp	#LR__3224
1be18     00 09 16 F2 | 	cmp	_var05, #256 wc
1be1c     00 FA 05 36 |  if_ae	mov	result1, #0
1be20     10 00 90 3D |  if_ae	jmp	#LR__3225
1be24     01 08 66 F0 | 	shl	_var05, #1
1be28     00 09 02 F1 | 	add	_var05, _var01
1be2c     04 01 58 FC | 	wrword	#0, _var05
1be30                 | LR__3224
1be30                 | ' 		lfnbuf[i] = 0;
1be30                 | ' 	}
1be30                 | ' 
1be30                 | ' 	return 1;
1be30     01 FA 05 F6 | 	mov	result1, #1
1be34                 | LR__3225
1be34                 | _fatfs_cc_pick_lfn_ret
1be34     2D 00 64 FD | 	ret
1be38                 | 
1be38                 | _fatfs_cc_put_lfn
1be38     0D 14 06 F1 | 	add	arg02, #13
1be3c     0A 19 42 FC | 	wrbyte	arg04, arg02
1be40     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1be44     01 18 86 F1 | 	sub	arg04, #1
1be48     0D 18 06 FD | 	qmul	arg04, #13
1be4c     09 01 02 F6 | 	mov	_var01, arg01
1be50     02 14 86 F1 | 	sub	arg02, #2
1be54     0A 1F 48 FC | 	wrbyte	#15, arg02
1be58     01 14 06 F1 | 	add	arg02, #1
1be5c     0A 01 48 FC | 	wrbyte	#0, arg02
1be60     0C 14 86 F1 | 	sub	arg02, #12
1be64     0A 13 02 F6 | 	mov	arg01, arg02
1be68     1A 12 06 F1 | 	add	arg01, #26
1be6c     09 01 58 FC | 	wrword	#0, arg01
1be70     00 02 06 F6 | 	mov	_var02, #0
1be74     00 04 06 F6 | 	mov	_var03, #0
1be78                 | ' 	BYTE* dir,
1be78                 | ' 	BYTE ord,
1be78                 | ' 	BYTE sum
1be78                 | ' )
1be78                 | ' {
1be78                 | ' 	UINT i, s;
1be78                 | ' 	WCHAR wc;
1be78                 | ' 
1be78                 | ' 
1be78                 | ' 	dir[ 13 ] = sum;
1be78                 | ' 	dir[ 11 ] =  0x0F ;
1be78                 | ' 	dir[ 12 ] = 0;
1be78                 | ' 	st_word(dir +  26 , 0);
1be78                 | ' 
1be78                 | ' 	i = (ord - 1) * 13;
1be78                 | ' 	s = wc = 0;
1be78                 | ' 	do {
1be78     01 00 00 FF 
1be7c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1be80     18 06 62 FD | 	getqx	_var04
1be84     97 2A 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
1be88                 | LR__3230
1be88     01 19 32 F9 | 	getword	arg04, _var02, #0
1be8c     7F 00 00 FF 
1be90     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1be94     03 13 02 56 |  if_ne	mov	arg01, _var04
1be98     01 06 06 51 |  if_ne	add	_var04, #1
1be9c     01 12 66 50 |  if_ne	shl	arg01, #1
1bea0     00 13 02 51 |  if_ne	add	arg01, _var01
1bea4     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1bea8     0A 13 02 F6 | 	mov	arg01, arg02
1beac     02 19 02 F6 | 	mov	arg04, _var03
1beb0     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1beb4     0C 19 C2 FA | 	rdbyte	arg04, arg04
1beb8     01 18 06 FA | 	mul	arg04, #1
1bebc     0C 13 02 F1 | 	add	arg01, arg04
1bec0     09 03 52 FC | 	wrword	_var02, arg01
1bec4     01 19 02 F6 | 	mov	arg04, _var02
1bec8     0F 18 4E F7 | 	zerox	arg04, #15 wz
1becc     0F 02 CE A9 |  if_e	bmask	_var02, #15
1bed0     01 04 06 F1 | 	add	_var03, #1
1bed4     0D 04 16 F2 | 	cmp	_var03, #13 wc
1bed8     AC FF 9F CD |  if_b	jmp	#LR__3230
1bedc                 | LR__3231
1bedc     01 00 00 FF 
1bee0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1bee4     01 03 32 F9 | 	getword	_var02, _var02, #0
1bee8     7F 00 00 FF 
1beec     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1bef0     01 06 66 50 |  if_ne	shl	_var04, #1
1bef4     00 07 02 51 |  if_ne	add	_var04, _var01
1bef8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1befc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1bf00     40 16 46 A5 |  if_e	or	arg03, #64
1bf04     0A 17 42 FC | 	wrbyte	arg03, arg02
1bf08                 | _fatfs_cc_put_lfn_ret
1bf08     2D 00 64 FD | 	ret
1bf0c                 | 
1bf0c                 | _fatfs_cc_gen_numname
1bf0c     08 4A 05 F6 | 	mov	COUNT_, #8
1bf10     A8 00 A0 FD | 	call	#pushregs_
1bf14     2C F0 07 F1 | 	add	ptra, #44
1bf18     09 1F 02 F6 | 	mov	local01, arg01
1bf1c     0A 21 02 F6 | 	mov	local02, arg02
1bf20     0B 23 02 F6 | 	mov	local03, arg03
1bf24     0C 25 02 F6 | 	mov	local04, arg04
1bf28     0F 13 02 F6 | 	mov	arg01, local01
1bf2c     10 15 02 F6 | 	mov	arg02, local02
1bf30     0B 16 06 F6 | 	mov	arg03, #11
1bf34     E0 7A BF FD | 	call	#__system____builtin_memmove
1bf38     06 24 16 F2 | 	cmp	local04, #6 wc
1bf3c     48 00 90 CD |  if_b	jmp	#LR__3245
1bf40     12 27 02 F6 | 	mov	local05, local04
1bf44     97 1E 48 FB | 	callpa	#(@LR__3243-@LR__3240)>>2,fcache_load_ptr_
1bf48                 | ' 		sreg = seq;
1bf48                 | ' 		while (*lfn) {
1bf48                 | LR__3240
1bf48     11 29 EA FA | 	rdword	local06, local03 wz
1bf4c     34 00 90 AD |  if_e	jmp	#LR__3244
1bf50     11 2B E2 FA | 	rdword	local07, local03
1bf54                 | ' 			wc = *lfn++;
1bf54                 | ' 			for (i = 0; i < 16; i++) {
1bf54     02 22 06 F1 | 	add	local03, #2
1bf58     10 12 DC FC | 	rep	@LR__3242, #16
1bf5c                 | LR__3241
1bf5c     01 26 66 F0 | 	shl	local05, #1
1bf60     15 29 32 F9 | 	getword	local06, local07, #0
1bf64     01 28 06 F5 | 	and	local06, #1
1bf68     14 27 02 F1 | 	add	local05, local06
1bf6c     15 2B 32 F9 | 	getword	local07, local07, #0
1bf70     01 2A 46 F0 | 	shr	local07, #1
1bf74     10 26 2E F4 | 	testbn	local05, #16 wz
1bf78     88 00 00 5F 
1bf7c     21 26 66 55 |  if_ne	xor	local05, ##69665
1bf80                 | LR__3242
1bf80     C4 FF 9F FD | 	jmp	#LR__3240
1bf84                 | LR__3243
1bf84                 | LR__3244
1bf84     13 25 02 F6 | 	mov	local04, local05
1bf88                 | LR__3245
1bf88     07 2A 06 F6 | 	mov	local07, #7
1bf8c                 | ' 			}
1bf8c                 | ' 		}
1bf8c                 | ' 		seq = (UINT)sreg;
1bf8c                 | ' 	}
1bf8c                 | ' 
1bf8c                 | ' 
1bf8c                 | ' 	i = 7;
1bf8c                 | ' 	do {
1bf8c     10 4E 05 F1 | 	add	fp, #16
1bf90     97 1A 48 FB | 	callpa	#(@LR__3247-@LR__3246)>>2,fcache_load_ptr_
1bf94                 | LR__3246
1bf94     12 27 42 F8 | 	getnib	local05, local04, #0
1bf98     30 26 06 F1 | 	add	local05, #48
1bf9c     04 24 46 F0 | 	shr	local04, #4
1bfa0     13 29 E2 F8 | 	getbyte	local06, local05, #0
1bfa4     3A 28 16 F2 | 	cmp	local06, #58 wc
1bfa8     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1bfac     07 26 06 31 |  if_ae	add	local05, #7
1bfb0     15 29 02 F6 | 	mov	local06, local07
1bfb4     01 2A 8E F1 | 	sub	local07, #1 wz
1bfb8     A7 28 02 F1 | 	add	local06, fp
1bfbc     14 27 42 FC | 	wrbyte	local05, local06
1bfc0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1bfc4     CC FF 9F 5D |  if_ne	jmp	#LR__3246
1bfc8                 | LR__3247
1bfc8     15 29 02 F6 | 	mov	local06, local07
1bfcc     A7 28 02 F1 | 	add	local06, fp
1bfd0     14 FD 48 FC | 	wrbyte	#126, local06
1bfd4                 | ' 	ns[i] = '~';
1bfd4                 | ' 
1bfd4                 | ' 
1bfd4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1bfd4     00 26 06 F6 | 	mov	local05, #0
1bfd8     10 4E 85 F1 | 	sub	fp, #16
1bfdc     97 2A 48 FB | 	callpa	#(@LR__3250-@LR__3248)>>2,fcache_load_ptr_
1bfe0                 | LR__3248
1bfe0     15 27 12 F2 | 	cmp	local05, local07 wc
1bfe4     4C 00 90 3D |  if_ae	jmp	#LR__3251
1bfe8     13 29 02 F6 | 	mov	local06, local05
1bfec     0F 29 02 F1 | 	add	local06, local01
1bff0     14 29 C2 FA | 	rdbyte	local06, local06
1bff4     20 28 0E F2 | 	cmp	local06, #32 wz
1bff8     38 00 90 AD |  if_e	jmp	#LR__3251
1bffc     13 13 02 F6 | 	mov	arg01, local05
1c000     0F 13 02 F1 | 	add	arg01, local01
1c004     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1c008     00 FA 05 56 |  if_ne	mov	result1, #0
1c00c                 | ' 
1c00c                 | ' 	return 0;
1c00c     00 FA 05 A6 |  if_e	mov	result1, #0
1c010     00 FA 0D F2 | 	cmp	result1, #0 wz
1c014     14 00 90 AD |  if_e	jmp	#LR__3249
1c018     15 29 02 F6 | 	mov	local06, local07
1c01c     01 28 86 F1 | 	sub	local06, #1
1c020     14 27 0A F2 | 	cmp	local05, local06 wz
1c024     0C 00 90 AD |  if_e	jmp	#LR__3251
1c028     01 26 06 F1 | 	add	local05, #1
1c02c                 | LR__3249
1c02c     01 26 06 F1 | 	add	local05, #1
1c030     AC FF 9F FD | 	jmp	#LR__3248
1c034                 | LR__3250
1c034                 | LR__3251
1c034     97 20 48 FB | 	callpa	#(@LR__3255-@LR__3252)>>2,fcache_load_ptr_
1c038                 | ' 			j++;
1c038                 | ' 		}
1c038                 | ' 	}
1c038                 | ' 	do {
1c038                 | LR__3252
1c038     13 29 02 F6 | 	mov	local06, local05
1c03c     0F 29 02 F1 | 	add	local06, local01
1c040     08 2A 16 F2 | 	cmp	local07, #8 wc
1c044     01 26 06 F1 | 	add	local05, #1
1c048     1C 00 90 3D |  if_ae	jmp	#LR__3253
1c04c     15 25 02 F6 | 	mov	local04, local07
1c050     10 4E 05 F1 | 	add	fp, #16
1c054     A7 24 02 F1 | 	add	local04, fp
1c058     12 2D C2 FA | 	rdbyte	local08, local04
1c05c     01 2A 06 F1 | 	add	local07, #1
1c060     10 4E 85 F1 | 	sub	fp, #16
1c064     04 00 90 FD | 	jmp	#LR__3254
1c068                 | LR__3253
1c068     20 2C 06 F6 | 	mov	local08, #32
1c06c                 | LR__3254
1c06c     14 2D 42 FC | 	wrbyte	local08, local06
1c070     08 26 16 F2 | 	cmp	local05, #8 wc
1c074     C0 FF 9F CD |  if_b	jmp	#LR__3252
1c078                 | LR__3255
1c078     A7 F0 03 F6 | 	mov	ptra, fp
1c07c     B2 00 A0 FD | 	call	#popregs_
1c080                 | _fatfs_cc_gen_numname_ret
1c080     2D 00 64 FD | 	ret
1c084                 | 
1c084                 | _fatfs_cc_sum_sfn
1c084     00 00 06 F6 | 	mov	_var01, #0
1c088                 | ' )
1c088                 | ' {
1c088                 | ' 	BYTE sum = 0;
1c088                 | ' 	UINT n = 11;
1c088                 | ' 
1c088                 | ' 	do {
1c088     97 12 48 FB | 	callpa	#(@LR__3262-@LR__3260)>>2,fcache_load_ptr_
1c08c                 | LR__3260
1c08c     0B 10 DC FC | 	rep	@LR__3263, #11
1c090                 | LR__3261
1c090     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1c094     01 FA 45 F0 | 	shr	result1, #1
1c098     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1c09c     07 00 66 F0 | 	shl	_var01, #7
1c0a0     00 FB 01 F1 | 	add	result1, _var01
1c0a4     09 01 C2 FA | 	rdbyte	_var01, arg01
1c0a8     FD 00 02 F1 | 	add	_var01, result1
1c0ac     01 12 06 F1 | 	add	arg01, #1
1c0b0                 | LR__3262
1c0b0                 | LR__3263
1c0b0                 | ' 	return sum;
1c0b0     00 FB 01 F6 | 	mov	result1, _var01
1c0b4                 | _fatfs_cc_sum_sfn_ret
1c0b4     2D 00 64 FD | 	ret
1c0b8                 | 
1c0b8                 | _fatfs_cc_dir_read
1c0b8     0C 4A 05 F6 | 	mov	COUNT_, #12
1c0bc     A8 00 A0 FD | 	call	#pushregs_
1c0c0     09 1F 02 F6 | 	mov	local01, arg01
1c0c4     0A 21 02 F6 | 	mov	local02, arg02
1c0c8     04 22 06 F6 | 	mov	local03, #4
1c0cc     0F 25 02 FB | 	rdlong	local04, local01
1c0d0     FF 26 06 F6 | 	mov	local05, #255
1c0d4     FF 28 06 F6 | 	mov	local06, #255
1c0d8                 | ' )
1c0d8                 | ' {
1c0d8                 | ' 	FRESULT res = FR_NO_FILE;
1c0d8                 | ' 	FATFS *fs = dp->obj.fs;
1c0d8                 | ' 	BYTE attr, b;
1c0d8                 | ' 
1c0d8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1c0d8                 | ' 
1c0d8                 | ' 
1c0d8                 | ' 	while (dp->sect) {
1c0d8                 | LR__3270
1c0d8     18 1E 06 F1 | 	add	local01, #24
1c0dc     0F FB 09 FB | 	rdlong	result1, local01 wz
1c0e0     18 1E 86 F1 | 	sub	local01, #24
1c0e4     AC 01 90 AD |  if_e	jmp	#LR__3280
1c0e8     18 1E 06 F1 | 	add	local01, #24
1c0ec     0F 15 02 FB | 	rdlong	arg02, local01
1c0f0     18 1E 86 F1 | 	sub	local01, #24
1c0f4     12 13 02 F6 | 	mov	arg01, local04
1c0f8     AC ED BF FD | 	call	#_fatfs_cc_move_window
1c0fc     FD 22 0A F6 | 	mov	local03, result1 wz
1c100     90 01 90 5D |  if_ne	jmp	#LR__3280
1c104     1C 1E 06 F1 | 	add	local01, #28
1c108     0F FB 01 FB | 	rdlong	result1, local01
1c10c     1C 1E 86 F1 | 	sub	local01, #28
1c110     FD 2A C2 FA | 	rdbyte	local07, result1
1c114     15 FB 01 F6 | 	mov	result1, local07
1c118     07 FA 4D F7 | 	zerox	result1, #7 wz
1c11c     04 22 06 A6 |  if_e	mov	local03, #4
1c120                 | ' 			res = FR_NO_FILE; break;
1c120     70 01 90 AD |  if_e	jmp	#LR__3280
1c124     1C 1E 06 F1 | 	add	local01, #28
1c128     0F 2D 02 FB | 	rdlong	local08, local01
1c12c     0B 2C 06 F1 | 	add	local08, #11
1c130     16 2F C2 FA | 	rdbyte	local09, local08
1c134     3F 2E 06 F5 | 	and	local09, #63
1c138     16 1E 86 F1 | 	sub	local01, #22
1c13c     0F 2F 42 FC | 	wrbyte	local09, local01
1c140     06 1E 86 F1 | 	sub	local01, #6
1c144     15 FB E1 F8 | 	getbyte	result1, local07, #0
1c148     E5 FA 0D F2 | 	cmp	result1, #229 wz
1c14c     15 2D 02 56 |  if_ne	mov	local08, local07
1c150     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1c154     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1c158     1C 00 90 AD |  if_e	jmp	#LR__3271
1c15c     00 30 06 F6 | 	mov	local10, #0
1c160     17 2D E2 F8 | 	getbyte	local08, local09, #0
1c164     20 2C 26 F5 | 	andn	local08, #32
1c168     08 2C 0E F2 | 	cmp	local08, #8 wz
1c16c     01 30 06 A6 |  if_e	mov	local10, #1
1c170     10 31 0A F2 | 	cmp	local10, local02 wz
1c174     08 00 90 AD |  if_e	jmp	#LR__3272
1c178                 | LR__3271
1c178     FF 26 06 F6 | 	mov	local05, #255
1c17c     00 01 90 FD | 	jmp	#LR__3279
1c180                 | LR__3272
1c180     17 2F E2 F8 | 	getbyte	local09, local09, #0
1c184     0F 2E 0E F2 | 	cmp	local09, #15 wz
1c188     B4 00 90 5D |  if_ne	jmp	#LR__3276
1c18c     15 33 E2 F8 | 	getbyte	local11, local07, #0
1c190     40 32 CE F7 | 	test	local11, #64 wz
1c194     30 00 90 AD |  if_e	jmp	#LR__3273
1c198     1C 1E 06 F1 | 	add	local01, #28
1c19c     0F 33 02 FB | 	rdlong	local11, local01
1c1a0     0D 32 06 F1 | 	add	local11, #13
1c1a4     19 29 C2 FA | 	rdbyte	local06, local11
1c1a8     15 2B E2 F8 | 	getbyte	local07, local07, #0
1c1ac     BF 2A 06 F5 | 	and	local07, #191
1c1b0     15 27 02 F6 | 	mov	local05, local07
1c1b4     0C 1E 86 F1 | 	sub	local01, #12
1c1b8     0F 33 02 FB | 	rdlong	local11, local01
1c1bc     1C 1E 06 F1 | 	add	local01, #28
1c1c0     0F 33 62 FC | 	wrlong	local11, local01
1c1c4     2C 1E 86 F1 | 	sub	local01, #44
1c1c8                 | LR__3273
1c1c8     15 2D E2 F8 | 	getbyte	local08, local07, #0
1c1cc     13 31 E2 F8 | 	getbyte	local10, local05, #0
1c1d0     18 2D 0A F2 | 	cmp	local08, local10 wz
1c1d4     5C 00 90 5D |  if_ne	jmp	#LR__3274
1c1d8     14 31 E2 F8 | 	getbyte	local10, local06, #0
1c1dc     1C 1E 06 F1 | 	add	local01, #28
1c1e0     0F 2F 02 FB | 	rdlong	local09, local01
1c1e4     1C 1E 86 F1 | 	sub	local01, #28
1c1e8     0D 2E 06 F1 | 	add	local09, #13
1c1ec     17 2D C2 FA | 	rdbyte	local08, local09
1c1f0     16 2F E2 F8 | 	getbyte	local09, local08, #0
1c1f4     17 31 0A F2 | 	cmp	local10, local09 wz
1c1f8     38 00 90 5D |  if_ne	jmp	#LR__3274
1c1fc     0C 24 06 F1 | 	add	local04, #12
1c200     12 13 02 FB | 	rdlong	arg01, local04
1c204     0C 24 86 F1 | 	sub	local04, #12
1c208     1C 1E 06 F1 | 	add	local01, #28
1c20c     0F 35 02 FB | 	rdlong	local12, local01
1c210     1C 1E 86 F1 | 	sub	local01, #28
1c214     1A 15 02 F6 | 	mov	arg02, local12
1c218     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1c21c     00 FA 4D F2 | 	cmps	result1, #0 wz
1c220     13 35 02 56 |  if_ne	mov	local12, local05
1c224     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1c228     01 34 86 51 |  if_ne	sub	local12, #1
1c22c     1A 33 02 56 |  if_ne	mov	local11, local12
1c230     04 00 90 5D |  if_ne	jmp	#LR__3275
1c234                 | LR__3274
1c234     FF 32 06 F6 | 	mov	local11, #255
1c238                 | LR__3275
1c238     19 27 02 F6 | 	mov	local05, local11
1c23c     40 00 90 FD | 	jmp	#LR__3278
1c240                 | LR__3276
1c240     13 33 02 F6 | 	mov	local11, local05
1c244     07 32 4E F7 | 	zerox	local11, #7 wz
1c248     20 00 90 5D |  if_ne	jmp	#LR__3277
1c24c     14 29 E2 F8 | 	getbyte	local06, local06, #0
1c250     1C 1E 06 F1 | 	add	local01, #28
1c254     0F 13 02 FB | 	rdlong	arg01, local01
1c258     1C 1E 86 F1 | 	sub	local01, #28
1c25c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1c260     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c264     FD 28 0A F2 | 	cmp	local06, result1 wz
1c268     28 00 90 AD |  if_e	jmp	#LR__3280
1c26c                 | LR__3277
1c26c     2C 1E 06 F1 | 	add	local01, #44
1c270     FF FF FF FF 
1c274     0F FF 6B FC | 	wrlong	##-1, local01
1c278     2C 1E 86 F1 | 	sub	local01, #44
1c27c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1c27c                 | ' 					}
1c27c                 | ' 					break;
1c27c     14 00 90 FD | 	jmp	#LR__3280
1c280                 | LR__3278
1c280                 | LR__3279
1c280     0F 13 02 F6 | 	mov	arg01, local01
1c284     00 14 06 F6 | 	mov	arg02, #0
1c288     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1c28c     FD 22 0A F6 | 	mov	local03, result1 wz
1c290     44 FE 9F AD |  if_e	jmp	#LR__3270
1c294                 | LR__3280
1c294     00 22 0E F2 | 	cmp	local03, #0 wz
1c298     18 1E 06 51 |  if_ne	add	local01, #24
1c29c     0F 01 68 5C |  if_ne	wrlong	#0, local01
1c2a0                 | ' 	return res;
1c2a0     11 FB 01 F6 | 	mov	result1, local03
1c2a4     A7 F0 03 F6 | 	mov	ptra, fp
1c2a8     B2 00 A0 FD | 	call	#popregs_
1c2ac                 | _fatfs_cc_dir_read_ret
1c2ac     2D 00 64 FD | 	ret
1c2b0                 | 
1c2b0                 | _fatfs_cc_dir_find
1c2b0     0B 4A 05 F6 | 	mov	COUNT_, #11
1c2b4     A8 00 A0 FD | 	call	#pushregs_
1c2b8     09 1F 02 F6 | 	mov	local01, arg01
1c2bc     0F 21 02 FB | 	rdlong	local02, local01
1c2c0     0F 13 02 F6 | 	mov	arg01, local01
1c2c4     00 14 06 F6 | 	mov	arg02, #0
1c2c8     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1c2cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c2d0     18 02 90 5D |  if_ne	jmp	#LR__3302
1c2d4     FF 22 06 F6 | 	mov	local03, #255
1c2d8     FF 24 06 F6 | 	mov	local04, #255
1c2dc     2C 1E 06 F1 | 	add	local01, #44
1c2e0     FF FF FF FF 
1c2e4     0F FF 6B FC | 	wrlong	##-1, local01
1c2e8     2C 1E 86 F1 | 	sub	local01, #44
1c2ec                 | ' #line 2404 "ff.c"
1c2ec                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1c2ec                 | ' 
1c2ec                 | ' 	do {
1c2ec                 | LR__3290
1c2ec     18 1E 06 F1 | 	add	local01, #24
1c2f0     0F 15 02 FB | 	rdlong	arg02, local01
1c2f4     18 1E 86 F1 | 	sub	local01, #24
1c2f8     10 13 02 F6 | 	mov	arg01, local02
1c2fc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1c300     FD 26 0A F6 | 	mov	local05, result1 wz
1c304     E0 01 90 5D |  if_ne	jmp	#LR__3301
1c308     1C 1E 06 F1 | 	add	local01, #28
1c30c     0F 17 02 FB | 	rdlong	arg03, local01
1c310     1C 1E 86 F1 | 	sub	local01, #28
1c314     0B 29 C2 FA | 	rdbyte	local06, arg03
1c318     14 17 02 F6 | 	mov	arg03, local06
1c31c     07 16 4E F7 | 	zerox	arg03, #7 wz
1c320     04 26 06 A6 |  if_e	mov	local05, #4
1c324     C0 01 90 AD |  if_e	jmp	#LR__3301
1c328     1C 1E 06 F1 | 	add	local01, #28
1c32c     0F 2B 02 FB | 	rdlong	local07, local01
1c330     15 17 02 F6 | 	mov	arg03, local07
1c334     0B 16 06 F1 | 	add	arg03, #11
1c338     0B 2D C2 FA | 	rdbyte	local08, arg03
1c33c     3F 2C 06 F5 | 	and	local08, #63
1c340     16 1E 86 F1 | 	sub	local01, #22
1c344     0F 2D 42 FC | 	wrbyte	local08, local01
1c348     06 1E 86 F1 | 	sub	local01, #6
1c34c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1c350     E5 16 0E F2 | 	cmp	arg03, #229 wz
1c354     18 00 90 AD |  if_e	jmp	#LR__3291
1c358     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1c35c     08 16 CE F7 | 	test	arg03, #8 wz
1c360     16 2B 02 56 |  if_ne	mov	local07, local08
1c364     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1c368     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1c36c     18 00 90 AD |  if_e	jmp	#LR__3292
1c370                 | LR__3291
1c370     FF 24 06 F6 | 	mov	local04, #255
1c374     2C 1E 06 F1 | 	add	local01, #44
1c378     FF FF FF FF 
1c37c     0F FF 6B FC | 	wrlong	##-1, local01
1c380     2C 1E 86 F1 | 	sub	local01, #44
1c384     4C 01 90 FD | 	jmp	#LR__3300
1c388                 | LR__3292
1c388     16 2D E2 F8 | 	getbyte	local08, local08, #0
1c38c     0F 2C 0E F2 | 	cmp	local08, #15 wz
1c390     C8 00 90 5D |  if_ne	jmp	#LR__3296
1c394     2B 1E 06 F1 | 	add	local01, #43
1c398     0F 2D C2 FA | 	rdbyte	local08, local01
1c39c     2B 1E 86 F1 | 	sub	local01, #43
1c3a0     40 2C CE F7 | 	test	local08, #64 wz
1c3a4     2C 01 90 5D |  if_ne	jmp	#LR__3299
1c3a8     14 2F E2 F8 | 	getbyte	local09, local06, #0
1c3ac     40 2E CE F7 | 	test	local09, #64 wz
1c3b0     30 00 90 AD |  if_e	jmp	#LR__3293
1c3b4     1C 1E 06 F1 | 	add	local01, #28
1c3b8     0F 2F 02 FB | 	rdlong	local09, local01
1c3bc     0D 2E 06 F1 | 	add	local09, #13
1c3c0     17 23 C2 FA | 	rdbyte	local03, local09
1c3c4     14 29 E2 F8 | 	getbyte	local06, local06, #0
1c3c8     BF 28 06 F5 | 	and	local06, #191
1c3cc     14 25 02 F6 | 	mov	local04, local06
1c3d0     0C 1E 86 F1 | 	sub	local01, #12
1c3d4     0F 2F 02 FB | 	rdlong	local09, local01
1c3d8     1C 1E 06 F1 | 	add	local01, #28
1c3dc     0F 2F 62 FC | 	wrlong	local09, local01
1c3e0     2C 1E 86 F1 | 	sub	local01, #44
1c3e4                 | LR__3293
1c3e4     14 31 E2 F8 | 	getbyte	local10, local06, #0
1c3e8     12 2B E2 F8 | 	getbyte	local07, local04, #0
1c3ec     15 31 0A F2 | 	cmp	local10, local07 wz
1c3f0     5C 00 90 5D |  if_ne	jmp	#LR__3294
1c3f4     11 2D E2 F8 | 	getbyte	local08, local03, #0
1c3f8     1C 1E 06 F1 | 	add	local01, #28
1c3fc     0F 2B 02 FB | 	rdlong	local07, local01
1c400     1C 1E 86 F1 | 	sub	local01, #28
1c404     0D 2A 06 F1 | 	add	local07, #13
1c408     15 29 C2 FA | 	rdbyte	local06, local07
1c40c     14 2B E2 F8 | 	getbyte	local07, local06, #0
1c410     15 2D 0A F2 | 	cmp	local08, local07 wz
1c414     38 00 90 5D |  if_ne	jmp	#LR__3294
1c418     0C 20 06 F1 | 	add	local02, #12
1c41c     10 13 02 FB | 	rdlong	arg01, local02
1c420     0C 20 86 F1 | 	sub	local02, #12
1c424     1C 1E 06 F1 | 	add	local01, #28
1c428     0F 33 02 FB | 	rdlong	local11, local01
1c42c     1C 1E 86 F1 | 	sub	local01, #28
1c430     19 15 02 F6 | 	mov	arg02, local11
1c434     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1c438     00 FA 4D F2 | 	cmps	result1, #0 wz
1c43c     12 33 02 56 |  if_ne	mov	local11, local04
1c440     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1c444     01 32 86 51 |  if_ne	sub	local11, #1
1c448     19 2F 02 56 |  if_ne	mov	local09, local11
1c44c     04 00 90 5D |  if_ne	jmp	#LR__3295
1c450                 | LR__3294
1c450     FF 2E 06 F6 | 	mov	local09, #255
1c454                 | LR__3295
1c454     17 25 02 F6 | 	mov	local04, local09
1c458     78 00 90 FD | 	jmp	#LR__3299
1c45c                 | LR__3296
1c45c     12 2F 02 F6 | 	mov	local09, local04
1c460     07 2E 4E F7 | 	zerox	local09, #7 wz
1c464     20 00 90 5D |  if_ne	jmp	#LR__3297
1c468     11 31 E2 F8 | 	getbyte	local10, local03, #0
1c46c     1C 1E 06 F1 | 	add	local01, #28
1c470     0F 13 02 FB | 	rdlong	arg01, local01
1c474     1C 1E 86 F1 | 	sub	local01, #28
1c478     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1c47c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c480     FD 30 0A F2 | 	cmp	local10, result1 wz
1c484     60 00 90 AD |  if_e	jmp	#LR__3301
1c488                 | LR__3297
1c488     2B 1E 06 F1 | 	add	local01, #43
1c48c     0F 2F C2 FA | 	rdbyte	local09, local01
1c490     2B 1E 86 F1 | 	sub	local01, #43
1c494     01 2E CE F7 | 	test	local09, #1 wz
1c498     24 00 90 5D |  if_ne	jmp	#LR__3298
1c49c     1C 1E 06 F1 | 	add	local01, #28
1c4a0     0F 13 02 FB | 	rdlong	arg01, local01
1c4a4     04 1E 06 F1 | 	add	local01, #4
1c4a8     0F 15 02 F6 | 	mov	arg02, local01
1c4ac     20 1E 86 F1 | 	sub	local01, #32
1c4b0     0B 16 06 F6 | 	mov	arg03, #11
1c4b4     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1c4b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4bc     28 00 90 AD |  if_e	jmp	#LR__3301
1c4c0                 | LR__3298
1c4c0     FF 24 06 F6 | 	mov	local04, #255
1c4c4     2C 1E 06 F1 | 	add	local01, #44
1c4c8     FF FF FF FF 
1c4cc     0F FF 6B FC | 	wrlong	##-1, local01
1c4d0     2C 1E 86 F1 | 	sub	local01, #44
1c4d4                 | LR__3299
1c4d4                 | LR__3300
1c4d4     0F 13 02 F6 | 	mov	arg01, local01
1c4d8     00 14 06 F6 | 	mov	arg02, #0
1c4dc     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1c4e0     FD 26 0A F6 | 	mov	local05, result1 wz
1c4e4     04 FE 9F AD |  if_e	jmp	#LR__3290
1c4e8                 | LR__3301
1c4e8                 | ' 
1c4e8                 | ' 	return res;
1c4e8     13 FB 01 F6 | 	mov	result1, local05
1c4ec                 | LR__3302
1c4ec     A7 F0 03 F6 | 	mov	ptra, fp
1c4f0     B2 00 A0 FD | 	call	#popregs_
1c4f4                 | _fatfs_cc_dir_find_ret
1c4f4     2D 00 64 FD | 	ret
1c4f8                 | 
1c4f8                 | _fatfs_cc_dir_register
1c4f8     0A 4A 05 F6 | 	mov	COUNT_, #10
1c4fc     A8 00 A0 FD | 	call	#pushregs_
1c500     2C F0 07 F1 | 	add	ptra, #44
1c504     04 4E 05 F1 | 	add	fp, #4
1c508     A7 12 62 FC | 	wrlong	arg01, fp
1c50c     09 1F 02 FB | 	rdlong	local01, arg01
1c510     08 4E 05 F1 | 	add	fp, #8
1c514     A7 1E 62 FC | 	wrlong	local01, fp
1c518     08 4E 85 F1 | 	sub	fp, #8
1c51c     A7 20 02 FB | 	rdlong	local02, fp
1c520     04 4E 85 F1 | 	sub	fp, #4
1c524     2B 20 06 F1 | 	add	local02, #43
1c528     10 21 C2 FA | 	rdbyte	local02, local02
1c52c     A0 20 CE F7 | 	test	local02, #160 wz
1c530     06 FA 05 56 |  if_ne	mov	result1, #6
1c534     F8 03 90 5D |  if_ne	jmp	#LR__3325
1c538                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1c538     14 4E 05 F1 | 	add	fp, #20
1c53c     A7 00 68 FC | 	wrlong	#0, fp
1c540     14 4E 85 F1 | 	sub	fp, #20
1c544     97 28 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
1c548                 | LR__3310
1c548     0C 4E 05 F1 | 	add	fp, #12
1c54c     A7 20 02 FB | 	rdlong	local02, fp
1c550     0C 20 06 F1 | 	add	local02, #12
1c554     10 23 02 FB | 	rdlong	local03, local02
1c558     08 4E 05 F1 | 	add	fp, #8
1c55c     A7 24 02 FB | 	rdlong	local04, fp
1c560     14 4E 85 F1 | 	sub	fp, #20
1c564     01 24 66 F0 | 	shl	local04, #1
1c568     11 25 02 F1 | 	add	local04, local03
1c56c     12 21 EA FA | 	rdword	local02, local04 wz
1c570     24 00 90 AD |  if_e	jmp	#LR__3312
1c574     14 4E 05 F1 | 	add	fp, #20
1c578     A7 26 02 FB | 	rdlong	local05, fp
1c57c     13 29 02 F6 | 	mov	local06, local05
1c580     13 2B 02 F6 | 	mov	local07, local05
1c584     15 2D 02 F6 | 	mov	local08, local07
1c588     01 2C 06 F1 | 	add	local08, #1
1c58c     A7 2C 62 FC | 	wrlong	local08, fp
1c590     14 4E 85 F1 | 	sub	fp, #20
1c594     B0 FF 9F FD | 	jmp	#LR__3310
1c598                 | LR__3311
1c598                 | LR__3312
1c598     1C 4E 05 F1 | 	add	fp, #28
1c59c     A7 12 02 F6 | 	mov	arg01, fp
1c5a0     18 4E 85 F1 | 	sub	fp, #24
1c5a4     A7 14 02 FB | 	rdlong	arg02, fp
1c5a8     04 4E 85 F1 | 	sub	fp, #4
1c5ac     20 14 06 F1 | 	add	arg02, #32
1c5b0     0C 16 06 F6 | 	mov	arg03, #12
1c5b4     60 74 BF FD | 	call	#__system____builtin_memmove
1c5b8     27 4E 05 F1 | 	add	fp, #39
1c5bc     A7 2E C2 FA | 	rdbyte	local09, fp
1c5c0     27 4E 85 F1 | 	sub	fp, #39
1c5c4     01 2E CE F7 | 	test	local09, #1 wz
1c5c8     F4 00 90 AD |  if_e	jmp	#LR__3315
1c5cc     04 4E 05 F1 | 	add	fp, #4
1c5d0     A7 30 02 FB | 	rdlong	local10, fp
1c5d4     2B 30 06 F1 | 	add	local10, #43
1c5d8     18 81 48 FC | 	wrbyte	#64, local10
1c5dc                 | ' 		dp->fn[ 11 ] =  0x40 ;
1c5dc                 | ' 		for (n = 1; n < 100; n++) {
1c5dc     0C 4E 05 F1 | 	add	fp, #12
1c5e0     A7 02 68 FC | 	wrlong	#1, fp
1c5e4     10 4E 85 F1 | 	sub	fp, #16
1c5e8                 | LR__3313
1c5e8     10 4E 05 F1 | 	add	fp, #16
1c5ec     A7 20 02 FB | 	rdlong	local02, fp
1c5f0     10 4E 85 F1 | 	sub	fp, #16
1c5f4     64 20 16 F2 | 	cmp	local02, #100 wc
1c5f8     70 00 90 3D |  if_ae	jmp	#LR__3314
1c5fc     04 4E 05 F1 | 	add	fp, #4
1c600     A7 12 02 FB | 	rdlong	arg01, fp
1c604     20 12 06 F1 | 	add	arg01, #32
1c608     18 4E 05 F1 | 	add	fp, #24
1c60c     A7 14 02 F6 | 	mov	arg02, fp
1c610     10 4E 85 F1 | 	sub	fp, #16
1c614     A7 30 02 FB | 	rdlong	local10, fp
1c618     0C 30 06 F1 | 	add	local10, #12
1c61c     18 17 02 FB | 	rdlong	arg03, local10
1c620     04 4E 05 F1 | 	add	fp, #4
1c624     A7 18 02 FB | 	rdlong	arg04, fp
1c628     10 4E 85 F1 | 	sub	fp, #16
1c62c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1c630     04 4E 05 F1 | 	add	fp, #4
1c634     A7 12 02 FB | 	rdlong	arg01, fp
1c638     04 4E 85 F1 | 	sub	fp, #4
1c63c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1c640     08 4E 05 F1 | 	add	fp, #8
1c644     A7 FA 61 FC | 	wrlong	result1, fp
1c648     00 FA 4D F2 | 	cmps	result1, #0 wz
1c64c     08 4E 85 F1 | 	sub	fp, #8
1c650     18 00 90 5D |  if_ne	jmp	#LR__3314
1c654     10 4E 05 F1 | 	add	fp, #16
1c658     A7 30 02 FB | 	rdlong	local10, fp
1c65c     01 30 06 F1 | 	add	local10, #1
1c660     A7 30 62 FC | 	wrlong	local10, fp
1c664     10 4E 85 F1 | 	sub	fp, #16
1c668     7C FF 9F FD | 	jmp	#LR__3313
1c66c                 | LR__3314
1c66c     10 4E 05 F1 | 	add	fp, #16
1c670     A7 30 02 FB | 	rdlong	local10, fp
1c674     10 4E 85 F1 | 	sub	fp, #16
1c678     64 30 0E F2 | 	cmp	local10, #100 wz
1c67c     07 FA 05 A6 |  if_e	mov	result1, #7
1c680     AC 02 90 AD |  if_e	jmp	#LR__3325
1c684     08 4E 05 F1 | 	add	fp, #8
1c688     A7 30 02 FB | 	rdlong	local10, fp
1c68c     08 4E 85 F1 | 	sub	fp, #8
1c690     04 30 0E F2 | 	cmp	local10, #4 wz
1c694     08 4E 05 51 |  if_ne	add	fp, #8
1c698     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1c69c     08 4E 85 51 |  if_ne	sub	fp, #8
1c6a0     8C 02 90 5D |  if_ne	jmp	#LR__3325
1c6a4     04 4E 05 F1 | 	add	fp, #4
1c6a8     A7 30 02 FB | 	rdlong	local10, fp
1c6ac     23 4E 05 F1 | 	add	fp, #35
1c6b0     A7 1E C2 FA | 	rdbyte	local01, fp
1c6b4     27 4E 85 F1 | 	sub	fp, #39
1c6b8     2B 30 06 F1 | 	add	local10, #43
1c6bc     18 1F 42 FC | 	wrbyte	local01, local10
1c6c0                 | LR__3315
1c6c0     27 4E 05 F1 | 	add	fp, #39
1c6c4     A7 20 C2 FA | 	rdbyte	local02, fp
1c6c8     27 4E 85 F1 | 	sub	fp, #39
1c6cc     02 20 CE F7 | 	test	local02, #2 wz
1c6d0     20 00 90 AD |  if_e	jmp	#LR__3316
1c6d4     14 4E 05 F1 | 	add	fp, #20
1c6d8     A7 30 02 FB | 	rdlong	local10, fp
1c6dc     0C 30 06 F1 | 	add	local10, #12
1c6e0     0D 30 16 FD | 	qdiv	local10, #13
1c6e4     14 4E 85 F1 | 	sub	fp, #20
1c6e8     18 30 62 FD | 	getqx	local10
1c6ec     01 30 06 F1 | 	add	local10, #1
1c6f0     04 00 90 FD | 	jmp	#LR__3317
1c6f4                 | LR__3316
1c6f4     01 30 06 F6 | 	mov	local10, #1
1c6f8                 | LR__3317
1c6f8     18 4E 05 F1 | 	add	fp, #24
1c6fc     A7 30 62 FC | 	wrlong	local10, fp
1c700     14 4E 85 F1 | 	sub	fp, #20
1c704     A7 12 02 FB | 	rdlong	arg01, fp
1c708     18 15 02 F6 | 	mov	arg02, local10
1c70c     04 4E 85 F1 | 	sub	fp, #4
1c710     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1c714     08 4E 05 F1 | 	add	fp, #8
1c718     A7 FA 61 FC | 	wrlong	result1, fp
1c71c     08 4E 85 F1 | 	sub	fp, #8
1c720     00 FA 0D F2 | 	cmp	result1, #0 wz
1c724     38 01 90 5D |  if_ne	jmp	#LR__3322
1c728     18 4E 05 F1 | 	add	fp, #24
1c72c     A7 30 02 FB | 	rdlong	local10, fp
1c730     01 30 8E F1 | 	sub	local10, #1 wz
1c734     A7 30 62 FC | 	wrlong	local10, fp
1c738     18 4E 85 F1 | 	sub	fp, #24
1c73c     20 01 90 AD |  if_e	jmp	#LR__3322
1c740     04 4E 05 F1 | 	add	fp, #4
1c744     A7 30 02 FB | 	rdlong	local10, fp
1c748     18 13 02 F6 | 	mov	arg01, local10
1c74c     14 4E 05 F1 | 	add	fp, #20
1c750     A7 18 02 FB | 	rdlong	arg04, fp
1c754     18 4E 85 F1 | 	sub	fp, #24
1c758     05 18 66 F0 | 	shl	arg04, #5
1c75c     10 30 06 F1 | 	add	local10, #16
1c760     18 15 02 FB | 	rdlong	arg02, local10
1c764     0C 15 82 F1 | 	sub	arg02, arg04
1c768     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1c76c     08 4E 05 F1 | 	add	fp, #8
1c770     A7 FA 61 FC | 	wrlong	result1, fp
1c774     08 4E 85 F1 | 	sub	fp, #8
1c778     00 FA 0D F2 | 	cmp	result1, #0 wz
1c77c     E0 00 90 5D |  if_ne	jmp	#LR__3321
1c780     04 4E 05 F1 | 	add	fp, #4
1c784     A7 12 02 FB | 	rdlong	arg01, fp
1c788     04 4E 85 F1 | 	sub	fp, #4
1c78c     20 12 06 F1 | 	add	arg01, #32
1c790     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1c794     FD 30 02 F6 | 	mov	local10, result1
1c798     28 4E 05 F1 | 	add	fp, #40
1c79c     A7 30 42 FC | 	wrbyte	local10, fp
1c7a0     28 4E 85 F1 | 	sub	fp, #40
1c7a4                 | ' 			sum = sum_sfn(dp->fn);
1c7a4                 | ' 			do {
1c7a4                 | LR__3318
1c7a4     0C 4E 05 F1 | 	add	fp, #12
1c7a8     A7 12 02 FB | 	rdlong	arg01, fp
1c7ac     08 4E 85 F1 | 	sub	fp, #8
1c7b0     A7 1E 02 FB | 	rdlong	local01, fp
1c7b4     04 4E 85 F1 | 	sub	fp, #4
1c7b8     18 1E 06 F1 | 	add	local01, #24
1c7bc     0F 15 02 FB | 	rdlong	arg02, local01
1c7c0     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1c7c4     08 4E 05 F1 | 	add	fp, #8
1c7c8     A7 FA 61 FC | 	wrlong	result1, fp
1c7cc     00 FA 4D F2 | 	cmps	result1, #0 wz
1c7d0     08 4E 85 F1 | 	sub	fp, #8
1c7d4     88 00 90 5D |  if_ne	jmp	#LR__3320
1c7d8     0C 4E 05 F1 | 	add	fp, #12
1c7dc     A7 20 02 FB | 	rdlong	local02, fp
1c7e0     0C 20 06 F1 | 	add	local02, #12
1c7e4     10 13 02 FB | 	rdlong	arg01, local02
1c7e8     08 4E 85 F1 | 	sub	fp, #8
1c7ec     A7 1E 02 FB | 	rdlong	local01, fp
1c7f0     1C 1E 06 F1 | 	add	local01, #28
1c7f4     0F 15 02 FB | 	rdlong	arg02, local01
1c7f8     14 4E 05 F1 | 	add	fp, #20
1c7fc     A7 16 02 FB | 	rdlong	arg03, fp
1c800     10 4E 05 F1 | 	add	fp, #16
1c804     A7 18 C2 FA | 	rdbyte	arg04, fp
1c808     28 4E 85 F1 | 	sub	fp, #40
1c80c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1c810     0C 4E 05 F1 | 	add	fp, #12
1c814     A7 30 02 FB | 	rdlong	local10, fp
1c818     03 30 06 F1 | 	add	local10, #3
1c81c     18 03 48 FC | 	wrbyte	#1, local10
1c820     08 4E 85 F1 | 	sub	fp, #8
1c824     A7 12 02 FB | 	rdlong	arg01, fp
1c828     04 4E 85 F1 | 	sub	fp, #4
1c82c     00 14 06 F6 | 	mov	arg02, #0
1c830     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1c834     08 4E 05 F1 | 	add	fp, #8
1c838     A7 FA 61 FC | 	wrlong	result1, fp
1c83c     00 FA 4D F2 | 	cmps	result1, #0 wz
1c840     08 4E 85 F1 | 	sub	fp, #8
1c844     18 00 90 5D |  if_ne	jmp	#LR__3319
1c848     18 4E 05 F1 | 	add	fp, #24
1c84c     A7 30 02 FB | 	rdlong	local10, fp
1c850     01 30 8E F1 | 	sub	local10, #1 wz
1c854     A7 30 62 FC | 	wrlong	local10, fp
1c858     18 4E 85 F1 | 	sub	fp, #24
1c85c     44 FF 9F 5D |  if_ne	jmp	#LR__3318
1c860                 | LR__3319
1c860                 | LR__3320
1c860                 | LR__3321
1c860                 | LR__3322
1c860     08 4E 05 F1 | 	add	fp, #8
1c864     A7 30 0A FB | 	rdlong	local10, fp wz
1c868     08 4E 85 F1 | 	sub	fp, #8
1c86c     B4 00 90 5D |  if_ne	jmp	#LR__3324
1c870     0C 4E 05 F1 | 	add	fp, #12
1c874     A7 12 02 FB | 	rdlong	arg01, fp
1c878     08 4E 85 F1 | 	sub	fp, #8
1c87c     A7 1E 02 FB | 	rdlong	local01, fp
1c880     04 4E 85 F1 | 	sub	fp, #4
1c884     18 1E 06 F1 | 	add	local01, #24
1c888     0F 15 02 FB | 	rdlong	arg02, local01
1c88c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1c890     08 4E 05 F1 | 	add	fp, #8
1c894     A7 FA 61 FC | 	wrlong	result1, fp
1c898     08 4E 85 F1 | 	sub	fp, #8
1c89c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8a0     80 00 90 5D |  if_ne	jmp	#LR__3323
1c8a4     04 4E 05 F1 | 	add	fp, #4
1c8a8     A7 20 02 FB | 	rdlong	local02, fp
1c8ac     04 4E 85 F1 | 	sub	fp, #4
1c8b0     1C 20 06 F1 | 	add	local02, #28
1c8b4     10 13 02 FB | 	rdlong	arg01, local02
1c8b8     00 14 06 F6 | 	mov	arg02, #0
1c8bc     20 16 06 F6 | 	mov	arg03, #32
1c8c0     98 00 A0 FD | 	call	#\builtin_bytefill_
1c8c4     04 4E 05 F1 | 	add	fp, #4
1c8c8     A7 14 02 FB | 	rdlong	arg02, fp
1c8cc     0A 1F 02 F6 | 	mov	local01, arg02
1c8d0     1C 1E 06 F1 | 	add	local01, #28
1c8d4     0F 13 02 FB | 	rdlong	arg01, local01
1c8d8     04 4E 85 F1 | 	sub	fp, #4
1c8dc     20 14 06 F1 | 	add	arg02, #32
1c8e0     0B 16 06 F6 | 	mov	arg03, #11
1c8e4     30 71 BF FD | 	call	#__system____builtin_memmove
1c8e8     04 4E 05 F1 | 	add	fp, #4
1c8ec     A7 2E 02 FB | 	rdlong	local09, fp
1c8f0     17 31 02 F6 | 	mov	local10, local09
1c8f4     1C 30 06 F1 | 	add	local10, #28
1c8f8     18 1F 02 FB | 	rdlong	local01, local10
1c8fc     2B 2E 06 F1 | 	add	local09, #43
1c900     17 31 C2 FA | 	rdbyte	local10, local09
1c904     18 30 06 F5 | 	and	local10, #24
1c908     0C 1E 06 F1 | 	add	local01, #12
1c90c     0F 31 42 FC | 	wrbyte	local10, local01
1c910     08 4E 05 F1 | 	add	fp, #8
1c914     A7 30 02 FB | 	rdlong	local10, fp
1c918     0C 4E 85 F1 | 	sub	fp, #12
1c91c     03 30 06 F1 | 	add	local10, #3
1c920     18 03 48 FC | 	wrbyte	#1, local10
1c924                 | LR__3323
1c924                 | LR__3324
1c924                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1c924                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1c924                 | ' 
1c924                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1c924                 | ' 
1c924                 | ' 			fs->wflag = 1;
1c924                 | ' 		}
1c924                 | ' 	}
1c924                 | ' 
1c924                 | ' 	return res;
1c924     08 4E 05 F1 | 	add	fp, #8
1c928     A7 FA 01 FB | 	rdlong	result1, fp
1c92c     08 4E 85 F1 | 	sub	fp, #8
1c930                 | LR__3325
1c930     A7 F0 03 F6 | 	mov	ptra, fp
1c934     B2 00 A0 FD | 	call	#popregs_
1c938                 | _fatfs_cc_dir_register_ret
1c938     2D 00 64 FD | 	ret
1c93c                 | 
1c93c                 | _fatfs_cc_dir_remove
1c93c     05 4A 05 F6 | 	mov	COUNT_, #5
1c940     A8 00 A0 FD | 	call	#pushregs_
1c944     09 1F 02 F6 | 	mov	local01, arg01
1c948     0F 21 02 FB | 	rdlong	local02, local01
1c94c     10 1E 06 F1 | 	add	local01, #16
1c950     0F 23 02 FB | 	rdlong	local03, local01
1c954     1C 1E 06 F1 | 	add	local01, #28
1c958     0F 15 02 FB | 	rdlong	arg02, local01
1c95c     2C 1E 86 F1 | 	sub	local01, #44
1c960     FF FF 7F FF 
1c964     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1c968     00 24 06 A6 |  if_e	mov	local04, #0
1c96c     18 00 90 AD |  if_e	jmp	#LR__3330
1c970     0F 13 02 F6 | 	mov	arg01, local01
1c974     2C 1E 06 F1 | 	add	local01, #44
1c978     0F 15 02 FB | 	rdlong	arg02, local01
1c97c     2C 1E 86 F1 | 	sub	local01, #44
1c980     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1c984     FD 24 02 F6 | 	mov	local04, result1
1c988                 | LR__3330
1c988     12 27 0A F6 | 	mov	local05, local04 wz
1c98c     64 00 90 5D |  if_ne	jmp	#LR__3333
1c990                 | ' 		do {
1c990                 | LR__3331
1c990     18 1E 06 F1 | 	add	local01, #24
1c994     0F 15 02 FB | 	rdlong	arg02, local01
1c998     18 1E 86 F1 | 	sub	local01, #24
1c99c     10 13 02 F6 | 	mov	arg01, local02
1c9a0     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1c9a4     FD 26 0A F6 | 	mov	local05, result1 wz
1c9a8     40 00 90 5D |  if_ne	jmp	#LR__3332
1c9ac     1C 1E 06 F1 | 	add	local01, #28
1c9b0     0F 25 02 FB | 	rdlong	local04, local01
1c9b4     12 CB 49 FC | 	wrbyte	#229, local04
1c9b8     03 20 06 F1 | 	add	local02, #3
1c9bc     10 03 48 FC | 	wrbyte	#1, local02
1c9c0     03 20 86 F1 | 	sub	local02, #3
1c9c4     0C 1E 86 F1 | 	sub	local01, #12
1c9c8     0F 25 02 FB | 	rdlong	local04, local01
1c9cc     10 1E 86 F1 | 	sub	local01, #16
1c9d0     11 25 12 F2 | 	cmp	local04, local03 wc
1c9d4     14 00 90 3D |  if_ae	jmp	#LR__3332
1c9d8     0F 13 02 F6 | 	mov	arg01, local01
1c9dc     00 14 06 F6 | 	mov	arg02, #0
1c9e0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1c9e4     FD 26 0A F6 | 	mov	local05, result1 wz
1c9e8     A4 FF 9F AD |  if_e	jmp	#LR__3331
1c9ec                 | LR__3332
1c9ec     04 26 0E F2 | 	cmp	local05, #4 wz
1c9f0     02 26 06 A6 |  if_e	mov	local05, #2
1c9f4                 | LR__3333
1c9f4                 | ' 	}
1c9f4                 | ' #line 2590 "ff.c"
1c9f4                 | ' 	return res;
1c9f4     13 FB 01 F6 | 	mov	result1, local05
1c9f8     A7 F0 03 F6 | 	mov	ptra, fp
1c9fc     B2 00 A0 FD | 	call	#popregs_
1ca00                 | _fatfs_cc_dir_remove_ret
1ca00     2D 00 64 FD | 	ret
1ca04                 | 
1ca04                 | _fatfs_cc_get_fileinfo
1ca04     0F 4A 05 F6 | 	mov	COUNT_, #15
1ca08     A8 00 A0 FD | 	call	#pushregs_
1ca0c     09 1F 02 F6 | 	mov	local01, arg01
1ca10     0A 21 02 F6 | 	mov	local02, arg02
1ca14     0F 23 02 FB | 	rdlong	local03, local01
1ca18     1C 20 06 F1 | 	add	local02, #28
1ca1c     10 01 48 FC | 	wrbyte	#0, local02
1ca20     1C 20 86 F1 | 	sub	local02, #28
1ca24     18 1E 06 F1 | 	add	local01, #24
1ca28     0F 25 0A FB | 	rdlong	local04, local01 wz
1ca2c     18 1E 86 F1 | 	sub	local01, #24
1ca30     90 03 90 AD |  if_e	jmp	#LR__3354
1ca34     2C 1E 06 F1 | 	add	local01, #44
1ca38     0F 25 02 FB | 	rdlong	local04, local01
1ca3c     2C 1E 86 F1 | 	sub	local01, #44
1ca40     FF FF 7F FF 
1ca44     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1ca48     D8 00 90 AD |  if_e	jmp	#LR__3343
1ca4c     00 26 06 F6 | 	mov	local05, #0
1ca50     00 28 06 F6 | 	mov	local06, #0
1ca54     00 2A 06 F6 | 	mov	local07, #0
1ca58                 | ' 			si = di = 0;
1ca58                 | ' 			hs = 0;
1ca58                 | ' 			while (fs->lfnbuf[si] != 0) {
1ca58                 | LR__3340
1ca58     0C 22 06 F1 | 	add	local03, #12
1ca5c     11 25 02 FB | 	rdlong	local04, local03
1ca60     0C 22 86 F1 | 	sub	local03, #12
1ca64     14 2D 02 F6 | 	mov	local08, local06
1ca68     01 2C 66 F0 | 	shl	local08, #1
1ca6c     12 2D 02 F1 | 	add	local08, local04
1ca70     16 25 EA FA | 	rdword	local04, local08 wz
1ca74     90 00 90 AD |  if_e	jmp	#LR__3342
1ca78     0C 22 06 F1 | 	add	local03, #12
1ca7c     11 2F 02 FB | 	rdlong	local09, local03
1ca80     0C 22 86 F1 | 	sub	local03, #12
1ca84     14 31 02 F6 | 	mov	local10, local06
1ca88     01 30 66 F0 | 	shl	local10, #1
1ca8c     17 31 02 F1 | 	add	local10, local09
1ca90     18 33 E2 FA | 	rdword	local11, local10
1ca94     15 25 02 F6 | 	mov	local04, local07
1ca98     0F 24 4E F7 | 	zerox	local04, #15 wz
1ca9c     01 28 06 F1 | 	add	local06, #1
1caa0     24 00 90 5D |  if_ne	jmp	#LR__3341
1caa4     19 35 32 F9 | 	getword	local12, local11, #0
1caa8     6C 00 00 FF 
1caac     00 34 16 F2 | 	cmp	local12, ##55296 wc
1cab0     14 00 90 CD |  if_b	jmp	#LR__3341
1cab4     19 37 32 F9 | 	getword	local13, local11, #0
1cab8     70 00 00 FF 
1cabc     00 36 16 F2 | 	cmp	local13, ##57344 wc
1cac0     19 2B 02 C6 |  if_b	mov	local07, local11
1cac4                 | ' 					hs = wc; continue;
1cac4     90 FF 9F CD |  if_b	jmp	#LR__3340
1cac8                 | LR__3341
1cac8     15 13 32 F9 | 	getword	arg01, local07, #0
1cacc     10 12 66 F0 | 	shl	arg01, #16
1cad0     19 33 32 F9 | 	getword	local11, local11, #0
1cad4     19 13 42 F5 | 	or	arg01, local11
1cad8     13 15 02 F6 | 	mov	arg02, local05
1cadc     1C 20 06 F1 | 	add	local02, #28
1cae0     10 15 02 F1 | 	add	arg02, local02
1cae4     FF 16 06 F6 | 	mov	arg03, #255
1cae8     13 17 82 F1 | 	sub	arg03, local05
1caec     1C 20 86 F1 | 	sub	local02, #28
1caf0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1caf4     FD 38 0A F6 | 	mov	local14, result1 wz
1caf8     00 26 06 A6 |  if_e	mov	local05, #0
1cafc     1C 27 02 51 |  if_ne	add	local05, local14
1cb00     00 2A 06 56 |  if_ne	mov	local07, #0
1cb04     50 FF 9F 5D |  if_ne	jmp	#LR__3340
1cb08                 | LR__3342
1cb08     15 25 02 F6 | 	mov	local04, local07
1cb0c     0F 24 4E F7 | 	zerox	local04, #15 wz
1cb10     00 26 06 56 |  if_ne	mov	local05, #0
1cb14     1C 20 06 F1 | 	add	local02, #28
1cb18     10 27 02 F1 | 	add	local05, local02
1cb1c     13 01 48 FC | 	wrbyte	#0, local05
1cb20     1C 20 86 F1 | 	sub	local02, #28
1cb24                 | LR__3343
1cb24     00 26 06 F6 | 	mov	local05, #0
1cb28     00 28 06 F6 | 	mov	local06, #0
1cb2c                 | ' 			fno->fname[di] = 0;
1cb2c                 | ' 		}
1cb2c                 | ' 	}
1cb2c                 | ' 
1cb2c                 | ' 	si = di = 0;
1cb2c                 | ' 	while (si < 11) {
1cb2c                 | LR__3344
1cb2c     0B 28 16 F2 | 	cmp	local06, #11 wc
1cb30     20 01 90 3D |  if_ae	jmp	#LR__3347
1cb34     1C 1E 06 F1 | 	add	local01, #28
1cb38     0F 2F 02 FB | 	rdlong	local09, local01
1cb3c     1C 1E 86 F1 | 	sub	local01, #28
1cb40     14 31 02 F6 | 	mov	local10, local06
1cb44     17 31 02 F1 | 	add	local10, local09
1cb48     18 33 C2 FA | 	rdbyte	local11, local10
1cb4c     19 25 32 F9 | 	getword	local04, local11, #0
1cb50     20 24 0E F2 | 	cmp	local04, #32 wz
1cb54     01 28 06 F1 | 	add	local06, #1
1cb58     D0 FF 9F AD |  if_e	jmp	#LR__3344
1cb5c     19 25 32 F9 | 	getword	local04, local11, #0
1cb60     05 24 0E F2 | 	cmp	local04, #5 wz
1cb64     E5 32 06 A6 |  if_e	mov	local11, #229
1cb68     09 28 0E F2 | 	cmp	local06, #9 wz
1cb6c     20 00 90 5D |  if_ne	jmp	#LR__3345
1cb70     0C 26 16 F2 | 	cmp	local05, #12 wc
1cb74     18 00 90 3D |  if_ae	jmp	#LR__3345
1cb78     13 37 02 F6 | 	mov	local13, local05
1cb7c     0C 20 06 F1 | 	add	local02, #12
1cb80     10 37 02 F1 | 	add	local13, local02
1cb84     1B 5D 48 FC | 	wrbyte	#46, local13
1cb88     01 26 06 F1 | 	add	local05, #1
1cb8c     0C 20 86 F1 | 	sub	local02, #12
1cb90                 | LR__3345
1cb90     19 13 32 F9 | 	getword	arg01, local11, #0
1cb94     07 12 4E F7 | 	zerox	arg01, #7 wz
1cb98     00 FA 05 56 |  if_ne	mov	result1, #0
1cb9c                 | ' 
1cb9c                 | ' 	return 0;
1cb9c     00 FA 05 A6 |  if_e	mov	result1, #0
1cba0     00 FA 0D F2 | 	cmp	result1, #0 wz
1cba4     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1cba8     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1cbac     50 00 90 AD |  if_e	jmp	#LR__3346
1cbb0     1C 1E 06 F1 | 	add	local01, #28
1cbb4     0F 31 02 FB | 	rdlong	local10, local01
1cbb8     1C 1E 86 F1 | 	sub	local01, #28
1cbbc     14 2D 02 F6 | 	mov	local08, local06
1cbc0     18 2D 02 F1 | 	add	local08, local10
1cbc4     16 13 CA FA | 	rdbyte	arg01, local08 wz
1cbc8     00 FA 05 56 |  if_ne	mov	result1, #0
1cbcc                 | ' 
1cbcc                 | ' 	return 0;
1cbcc     00 FA 05 A6 |  if_e	mov	result1, #0
1cbd0     00 FA 0D F2 | 	cmp	result1, #0 wz
1cbd4     28 00 90 AD |  if_e	jmp	#LR__3346
1cbd8     19 33 32 F9 | 	getword	local11, local11, #0
1cbdc     08 32 66 F0 | 	shl	local11, #8
1cbe0     1C 1E 06 F1 | 	add	local01, #28
1cbe4     0F 39 02 FB | 	rdlong	local14, local01
1cbe8     1C 1E 86 F1 | 	sub	local01, #28
1cbec     14 2F 02 F6 | 	mov	local09, local06
1cbf0     1C 2F 02 F1 | 	add	local09, local14
1cbf4     17 35 C2 FA | 	rdbyte	local12, local09
1cbf8     1A 33 42 F5 | 	or	local11, local12
1cbfc     01 28 06 F1 | 	add	local06, #1
1cc00                 | LR__3346
1cc00     19 13 02 F6 | 	mov	arg01, local11
1cc04     01 00 00 FF 
1cc08     52 15 06 F6 | 	mov	arg02, ##850
1cc0c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1cc10     FD 32 02 F6 | 	mov	local11, result1
1cc14     19 25 02 F6 | 	mov	local04, local11
1cc18     0F 24 4E F7 | 	zerox	local04, #15 wz
1cc1c     00 26 06 A6 |  if_e	mov	local05, #0
1cc20     30 00 90 AD |  if_e	jmp	#LR__3347
1cc24     19 13 32 F9 | 	getword	arg01, local11, #0
1cc28     13 15 02 F6 | 	mov	arg02, local05
1cc2c     0C 20 06 F1 | 	add	local02, #12
1cc30     10 15 02 F1 | 	add	arg02, local02
1cc34     0C 16 06 F6 | 	mov	arg03, #12
1cc38     13 17 82 F1 | 	sub	arg03, local05
1cc3c     0C 20 86 F1 | 	sub	local02, #12
1cc40     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1cc44     FD 38 0A F6 | 	mov	local14, result1 wz
1cc48     00 26 06 A6 |  if_e	mov	local05, #0
1cc4c     1C 27 02 51 |  if_ne	add	local05, local14
1cc50     D8 FE 9F 5D |  if_ne	jmp	#LR__3344
1cc54                 | LR__3347
1cc54     13 25 02 F6 | 	mov	local04, local05
1cc58     0C 20 06 F1 | 	add	local02, #12
1cc5c     10 25 02 F1 | 	add	local04, local02
1cc60     12 01 48 FC | 	wrbyte	#0, local04
1cc64     10 20 06 F1 | 	add	local02, #16
1cc68     10 25 CA FA | 	rdbyte	local04, local02 wz
1cc6c     1C 20 86 F1 | 	sub	local02, #28
1cc70     F8 00 90 5D |  if_ne	jmp	#LR__3353
1cc74     00 26 0E F2 | 	cmp	local05, #0 wz
1cc78     1C 00 90 5D |  if_ne	jmp	#LR__3348
1cc7c     13 37 02 F6 | 	mov	local13, local05
1cc80     1C 20 06 F1 | 	add	local02, #28
1cc84     10 37 02 F1 | 	add	local13, local02
1cc88     1B 7F 48 FC | 	wrbyte	#63, local13
1cc8c     01 26 06 F1 | 	add	local05, #1
1cc90     1C 20 86 F1 | 	sub	local02, #28
1cc94     A4 00 90 FD | 	jmp	#LR__3352
1cc98                 | LR__3348
1cc98                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1cc98     00 26 06 F6 | 	mov	local05, #0
1cc9c     00 28 06 F6 | 	mov	local06, #0
1cca0     08 3A 06 F6 | 	mov	local15, #8
1cca4                 | LR__3349
1cca4     14 25 02 F6 | 	mov	local04, local06
1cca8     0C 20 06 F1 | 	add	local02, #12
1ccac     10 25 02 F1 | 	add	local04, local02
1ccb0     12 37 CA FA | 	rdbyte	local13, local04 wz
1ccb4     0C 20 86 F1 | 	sub	local02, #12
1ccb8     80 00 90 AD |  if_e	jmp	#LR__3351
1ccbc     14 2D 02 F6 | 	mov	local08, local06
1ccc0     0C 20 06 F1 | 	add	local02, #12
1ccc4     10 2D 02 F1 | 	add	local08, local02
1ccc8     16 33 C2 FA | 	rdbyte	local11, local08
1cccc     19 39 32 F9 | 	getword	local14, local11, #0
1ccd0     2E 38 0E F2 | 	cmp	local14, #46 wz
1ccd4     0C 20 86 F1 | 	sub	local02, #12
1ccd8     10 3A 06 A6 |  if_e	mov	local15, #16
1ccdc     19 39 32 F9 | 	getword	local14, local11, #0
1cce0     41 38 16 F2 | 	cmp	local14, #65 wc
1cce4     30 00 90 CD |  if_b	jmp	#LR__3350
1cce8     19 2D 32 F9 | 	getword	local08, local11, #0
1ccec     5B 2C 16 F2 | 	cmp	local08, #91 wc
1ccf0     24 00 90 3D |  if_ae	jmp	#LR__3350
1ccf4     1C 1E 06 F1 | 	add	local01, #28
1ccf8     0F 2F 02 FB | 	rdlong	local09, local01
1ccfc     1C 1E 86 F1 | 	sub	local01, #28
1cd00     0C 2E 06 F1 | 	add	local09, #12
1cd04     17 31 C2 FA | 	rdbyte	local10, local09
1cd08     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1cd0c     1C 31 CA F7 | 	test	local10, local14 wz
1cd10     19 33 32 59 |  if_ne	getword	local11, local11, #0
1cd14     20 32 06 51 |  if_ne	add	local11, #32
1cd18                 | LR__3350
1cd18     13 39 02 F6 | 	mov	local14, local05
1cd1c     1C 20 06 F1 | 	add	local02, #28
1cd20     10 39 02 F1 | 	add	local14, local02
1cd24     19 33 32 F9 | 	getword	local11, local11, #0
1cd28     1C 33 42 FC | 	wrbyte	local11, local14
1cd2c     01 28 06 F1 | 	add	local06, #1
1cd30     01 26 06 F1 | 	add	local05, #1
1cd34     1C 20 86 F1 | 	sub	local02, #28
1cd38     68 FF 9F FD | 	jmp	#LR__3349
1cd3c                 | LR__3351
1cd3c                 | LR__3352
1cd3c     1C 20 06 F1 | 	add	local02, #28
1cd40     10 27 02 F1 | 	add	local05, local02
1cd44     13 01 48 FC | 	wrbyte	#0, local05
1cd48     1C 1E 06 F1 | 	add	local01, #28
1cd4c     0F 25 02 FB | 	rdlong	local04, local01
1cd50     1C 1E 86 F1 | 	sub	local01, #28
1cd54     0C 24 06 F1 | 	add	local04, #12
1cd58     12 37 CA FA | 	rdbyte	local13, local04 wz
1cd5c     1C 20 86 F1 | 	sub	local02, #28
1cd60     0C 20 06 A1 |  if_e	add	local02, #12
1cd64     10 01 48 AC |  if_e	wrbyte	#0, local02
1cd68     0C 20 86 A1 |  if_e	sub	local02, #12
1cd6c                 | LR__3353
1cd6c     1C 1E 06 F1 | 	add	local01, #28
1cd70     0F 35 02 FB | 	rdlong	local12, local01
1cd74     0B 34 06 F1 | 	add	local12, #11
1cd78     1A 25 C2 FA | 	rdbyte	local04, local12
1cd7c     3F 24 06 F5 | 	and	local04, #63
1cd80     08 20 06 F1 | 	add	local02, #8
1cd84     10 25 42 FC | 	wrbyte	local04, local02
1cd88     08 20 86 F1 | 	sub	local02, #8
1cd8c     0F 13 02 FB | 	rdlong	arg01, local01
1cd90     1C 12 06 F1 | 	add	arg01, #28
1cd94                 | ' {
1cd94                 | ' 
1cd94                 | ' 	return *((DWORD*)ptr);
1cd94     09 FB 01 FB | 	rdlong	result1, arg01
1cd98     10 FB 61 FC | 	wrlong	result1, local02
1cd9c     0F 13 02 FB | 	rdlong	arg01, local01
1cda0     16 12 06 F1 | 	add	arg01, #22
1cda4                 | ' {
1cda4                 | ' 
1cda4                 | ' 	return *((WORD*)ptr);
1cda4     09 FB E1 FA | 	rdword	result1, arg01
1cda8     06 20 06 F1 | 	add	local02, #6
1cdac     10 FB 51 FC | 	wrword	result1, local02
1cdb0     0F 13 02 FB | 	rdlong	arg01, local01
1cdb4     18 12 06 F1 | 	add	arg01, #24
1cdb8                 | ' {
1cdb8                 | ' 
1cdb8                 | ' 	return *((WORD*)ptr);
1cdb8     09 FB E1 FA | 	rdword	result1, arg01
1cdbc     02 20 86 F1 | 	sub	local02, #2
1cdc0     10 FB 51 FC | 	wrword	result1, local02
1cdc4                 | LR__3354
1cdc4     A7 F0 03 F6 | 	mov	ptra, fp
1cdc8     B2 00 A0 FD | 	call	#popregs_
1cdcc                 | _fatfs_cc_get_fileinfo_ret
1cdcc     2D 00 64 FD | 	ret
1cdd0                 | 
1cdd0                 | _fatfs_cc_create_name
1cdd0     0D 4A 05 F6 | 	mov	COUNT_, #13
1cdd4     A8 00 A0 FD | 	call	#pushregs_
1cdd8     34 F0 07 F1 | 	add	ptra, #52
1cddc     04 4E 05 F1 | 	add	fp, #4
1cde0     A7 12 62 FC | 	wrlong	arg01, fp
1cde4     04 4E 05 F1 | 	add	fp, #4
1cde8     A7 14 62 FC | 	wrlong	arg02, fp
1cdec     0A FB 01 FB | 	rdlong	result1, arg02
1cdf0     28 4E 05 F1 | 	add	fp, #40
1cdf4     A7 FA 61 FC | 	wrlong	result1, fp
1cdf8     2C 4E 85 F1 | 	sub	fp, #44
1cdfc     A7 FA 01 FB | 	rdlong	result1, fp
1ce00     FD 1E 02 FB | 	rdlong	local01, result1
1ce04     0C 1E 06 F1 | 	add	local01, #12
1ce08     0F 21 02 FB | 	rdlong	local02, local01
1ce0c     14 4E 05 F1 | 	add	fp, #20
1ce10     A7 20 62 FC | 	wrlong	local02, fp
1ce14     14 4E 05 F1 | 	add	fp, #20
1ce18     A7 00 68 FC | 	wrlong	#0, fp
1ce1c     2C 4E 85 F1 | 	sub	fp, #44
1ce20                 | ' 
1ce20                 | ' 
1ce20                 | ' 
1ce20                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1ce20                 | ' 	for (;;) {
1ce20                 | LR__3360
1ce20     30 4E 05 F1 | 	add	fp, #48
1ce24     A7 12 02 F6 | 	mov	arg01, fp
1ce28     30 4E 85 F1 | 	sub	fp, #48
1ce2c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1ce30     1C 4E 05 F1 | 	add	fp, #28
1ce34     A7 FA 61 FC | 	wrlong	result1, fp
1ce38     1C 4E 85 F1 | 	sub	fp, #28
1ce3c     FF FF 7F FF 
1ce40     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1ce44     06 FA 05 A6 |  if_e	mov	result1, #6
1ce48     74 08 90 AD |  if_e	jmp	#LR__3400
1ce4c     1C 4E 05 F1 | 	add	fp, #28
1ce50     A7 1E 02 FB | 	rdlong	local01, fp
1ce54     1C 4E 85 F1 | 	sub	fp, #28
1ce58     80 00 00 FF 
1ce5c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1ce60     3C 00 90 CD |  if_b	jmp	#LR__3361
1ce64     18 4E 05 F1 | 	add	fp, #24
1ce68     A7 22 02 FB | 	rdlong	local03, fp
1ce6c     14 4E 05 F1 | 	add	fp, #20
1ce70     A7 1E 02 FB | 	rdlong	local01, fp
1ce74     0F 25 02 F6 | 	mov	local04, local01
1ce78     01 24 06 F1 | 	add	local04, #1
1ce7c     A7 24 62 FC | 	wrlong	local04, fp
1ce80     01 1E 66 F0 | 	shl	local01, #1
1ce84     11 1F 02 F1 | 	add	local01, local03
1ce88     10 4E 85 F1 | 	sub	fp, #16
1ce8c     A7 26 02 FB | 	rdlong	local05, fp
1ce90     1C 4E 85 F1 | 	sub	fp, #28
1ce94     13 29 02 F6 | 	mov	local06, local05
1ce98     10 28 46 F0 | 	shr	local06, #16
1ce9c     0F 29 52 FC | 	wrword	local06, local01
1cea0                 | LR__3361
1cea0     1C 4E 05 F1 | 	add	fp, #28
1cea4     A7 1E 02 FB | 	rdlong	local01, fp
1cea8     08 4E 85 F1 | 	sub	fp, #8
1ceac     A7 1E 52 FC | 	wrword	local01, fp
1ceb0     A7 1E E2 FA | 	rdword	local01, fp
1ceb4     14 4E 85 F1 | 	sub	fp, #20
1ceb8     20 1E 16 F2 | 	cmp	local01, #32 wc
1cebc     B0 00 90 CD |  if_b	jmp	#LR__3363
1cec0     14 4E 05 F1 | 	add	fp, #20
1cec4     A7 1E E2 FA | 	rdword	local01, fp
1cec8     14 4E 85 F1 | 	sub	fp, #20
1cecc     2F 1E 0E F2 | 	cmp	local01, #47 wz
1ced0     14 4E 05 51 |  if_ne	add	fp, #20
1ced4     A7 24 E2 5A |  if_ne	rdword	local04, fp
1ced8     14 4E 85 51 |  if_ne	sub	fp, #20
1cedc     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1cee0     8C 00 90 AD |  if_e	jmp	#LR__3363
1cee4     14 4E 05 F1 | 	add	fp, #20
1cee8     A7 12 E2 FA | 	rdword	arg01, fp
1ceec     14 4E 85 F1 | 	sub	fp, #20
1cef0     80 12 16 F2 | 	cmp	arg01, #128 wc
1cef4     24 00 90 3D |  if_ae	jmp	#LR__3362
1cef8     17 01 00 FF 
1cefc     30 12 06 F6 | 	mov	arg01, ##@LR__4022
1cf00     14 4E 05 F1 | 	add	fp, #20
1cf04     A7 14 E2 FA | 	rdword	arg02, fp
1cf08     14 4E 85 F1 | 	sub	fp, #20
1cf0c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1cf10     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf14     06 FA 05 56 |  if_ne	mov	result1, #6
1cf18     A4 07 90 5D |  if_ne	jmp	#LR__3400
1cf1c                 | LR__3362
1cf1c     2C 4E 05 F1 | 	add	fp, #44
1cf20     A7 28 02 FB | 	rdlong	local06, fp
1cf24     2C 4E 85 F1 | 	sub	fp, #44
1cf28     FF 28 16 F2 | 	cmp	local06, #255 wc
1cf2c     06 FA 05 36 |  if_ae	mov	result1, #6
1cf30     8C 07 90 3D |  if_ae	jmp	#LR__3400
1cf34     18 4E 05 F1 | 	add	fp, #24
1cf38     A7 22 02 FB | 	rdlong	local03, fp
1cf3c     14 4E 05 F1 | 	add	fp, #20
1cf40     A7 20 02 FB | 	rdlong	local02, fp
1cf44     10 25 02 F6 | 	mov	local04, local02
1cf48     01 24 06 F1 | 	add	local04, #1
1cf4c     A7 24 62 FC | 	wrlong	local04, fp
1cf50     10 1F 02 F6 | 	mov	local01, local02
1cf54     01 1E 66 F0 | 	shl	local01, #1
1cf58     11 1F 02 F1 | 	add	local01, local03
1cf5c     18 4E 85 F1 | 	sub	fp, #24
1cf60     A7 28 E2 FA | 	rdword	local06, fp
1cf64     14 4E 85 F1 | 	sub	fp, #20
1cf68     0F 29 52 FC | 	wrword	local06, local01
1cf6c     B0 FE 9F FD | 	jmp	#LR__3360
1cf70                 | LR__3363
1cf70     14 4E 05 F1 | 	add	fp, #20
1cf74     A7 2A E2 FA | 	rdword	local07, fp
1cf78     14 4E 85 F1 | 	sub	fp, #20
1cf7c     20 2A 16 F2 | 	cmp	local07, #32 wc
1cf80     10 4E 05 C1 |  if_b	add	fp, #16
1cf84     A7 08 48 CC |  if_b	wrbyte	#4, fp
1cf88     10 4E 85 C1 |  if_b	sub	fp, #16
1cf8c     74 00 90 CD |  if_b	jmp	#LR__3368
1cf90     97 24 48 FB | 	callpa	#(@LR__3366-@LR__3364)>>2,fcache_load_ptr_
1cf94                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1cf94                 | LR__3364
1cf94     30 4E 05 F1 | 	add	fp, #48
1cf98     A7 24 02 FB | 	rdlong	local04, fp
1cf9c     30 4E 85 F1 | 	sub	fp, #48
1cfa0     12 2B C2 FA | 	rdbyte	local07, local04
1cfa4     2F 2A 0E F2 | 	cmp	local07, #47 wz
1cfa8     18 00 90 AD |  if_e	jmp	#LR__3365
1cfac     30 4E 05 F1 | 	add	fp, #48
1cfb0     A7 24 02 FB | 	rdlong	local04, fp
1cfb4     30 4E 85 F1 | 	sub	fp, #48
1cfb8     12 21 C2 FA | 	rdbyte	local02, local04
1cfbc     5C 20 0E F2 | 	cmp	local02, #92 wz
1cfc0     18 00 90 5D |  if_ne	jmp	#LR__3367
1cfc4                 | LR__3365
1cfc4     30 4E 05 F1 | 	add	fp, #48
1cfc8     A7 1E 02 FB | 	rdlong	local01, fp
1cfcc     01 1E 06 F1 | 	add	local01, #1
1cfd0     A7 1E 62 FC | 	wrlong	local01, fp
1cfd4     30 4E 85 F1 | 	sub	fp, #48
1cfd8     B8 FF 9F FD | 	jmp	#LR__3364
1cfdc                 | LR__3366
1cfdc                 | LR__3367
1cfdc     10 4E 05 F1 | 	add	fp, #16
1cfe0     A7 00 48 FC | 	wrbyte	#0, fp
1cfe4     20 4E 05 F1 | 	add	fp, #32
1cfe8     A7 28 02 FB | 	rdlong	local06, fp
1cfec     30 4E 85 F1 | 	sub	fp, #48
1cff0     14 2B C2 FA | 	rdbyte	local07, local06
1cff4     20 2A 16 F2 | 	cmp	local07, #32 wc
1cff8     10 4E 05 C1 |  if_b	add	fp, #16
1cffc     A7 08 48 CC |  if_b	wrbyte	#4, fp
1d000     10 4E 85 C1 |  if_b	sub	fp, #16
1d004                 | LR__3368
1d004     08 4E 05 F1 | 	add	fp, #8
1d008     A7 2A 02 FB | 	rdlong	local07, fp
1d00c     28 4E 05 F1 | 	add	fp, #40
1d010     A7 1E 02 FB | 	rdlong	local01, fp
1d014     30 4E 85 F1 | 	sub	fp, #48
1d018     15 1F 62 FC | 	wrlong	local01, local07
1d01c     97 38 48 FB | 	callpa	#(@LR__3370-@LR__3369)>>2,fcache_load_ptr_
1d020                 | ' 	}
1d020                 | ' 	*path = p;
1d020                 | ' #line 2862 "ff.c"
1d020                 | ' 	while (di) {
1d020                 | LR__3369
1d020     2C 4E 05 F1 | 	add	fp, #44
1d024     A7 2A 0A FB | 	rdlong	local07, fp wz
1d028     2C 4E 85 F1 | 	sub	fp, #44
1d02c     60 00 90 AD |  if_e	jmp	#LR__3371
1d030     18 4E 05 F1 | 	add	fp, #24
1d034     A7 28 02 FB | 	rdlong	local06, fp
1d038     14 4E 05 F1 | 	add	fp, #20
1d03c     A7 24 02 FB | 	rdlong	local04, fp
1d040     01 24 86 F1 | 	sub	local04, #1
1d044     01 24 66 F0 | 	shl	local04, #1
1d048     14 25 02 F1 | 	add	local04, local06
1d04c     12 29 E2 FA | 	rdword	local06, local04
1d050     18 4E 85 F1 | 	sub	fp, #24
1d054     A7 28 52 FC | 	wrword	local06, fp
1d058     A7 2A E2 FA | 	rdword	local07, fp
1d05c     14 4E 85 F1 | 	sub	fp, #20
1d060     20 2A 0E F2 | 	cmp	local07, #32 wz
1d064     14 4E 05 51 |  if_ne	add	fp, #20
1d068     A7 1E E2 5A |  if_ne	rdword	local01, fp
1d06c     14 4E 85 51 |  if_ne	sub	fp, #20
1d070     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1d074     18 00 90 5D |  if_ne	jmp	#LR__3371
1d078     2C 4E 05 F1 | 	add	fp, #44
1d07c     A7 1E 02 FB | 	rdlong	local01, fp
1d080     01 1E 86 F1 | 	sub	local01, #1
1d084     A7 1E 62 FC | 	wrlong	local01, fp
1d088     2C 4E 85 F1 | 	sub	fp, #44
1d08c     90 FF 9F FD | 	jmp	#LR__3369
1d090                 | LR__3370
1d090                 | LR__3371
1d090     18 4E 05 F1 | 	add	fp, #24
1d094     A7 2C 02 FB | 	rdlong	local08, fp
1d098     14 4E 05 F1 | 	add	fp, #20
1d09c     A7 24 02 FB | 	rdlong	local04, fp
1d0a0     01 24 66 F0 | 	shl	local04, #1
1d0a4     16 25 02 F1 | 	add	local04, local08
1d0a8     12 01 58 FC | 	wrword	#0, local04
1d0ac     A7 2A 0A FB | 	rdlong	local07, fp wz
1d0b0     2C 4E 85 F1 | 	sub	fp, #44
1d0b4     06 FA 05 A6 |  if_e	mov	result1, #6
1d0b8     04 06 90 AD |  if_e	jmp	#LR__3400
1d0bc                 | ' 
1d0bc                 | ' 
1d0bc                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1d0bc     28 4E 05 F1 | 	add	fp, #40
1d0c0     A7 00 68 FC | 	wrlong	#0, fp
1d0c4     28 4E 85 F1 | 	sub	fp, #40
1d0c8     97 22 48 FB | 	callpa	#(@LR__3373-@LR__3372)>>2,fcache_load_ptr_
1d0cc                 | LR__3372
1d0cc     18 4E 05 F1 | 	add	fp, #24
1d0d0     A7 2E 02 FB | 	rdlong	local09, fp
1d0d4     10 4E 05 F1 | 	add	fp, #16
1d0d8     A7 30 02 FB | 	rdlong	local10, fp
1d0dc     28 4E 85 F1 | 	sub	fp, #40
1d0e0     01 30 66 F0 | 	shl	local10, #1
1d0e4     17 31 02 F1 | 	add	local10, local09
1d0e8     18 33 E2 FA | 	rdword	local11, local10
1d0ec     20 32 0E F2 | 	cmp	local11, #32 wz
1d0f0     1C 00 90 5D |  if_ne	jmp	#LR__3374
1d0f4     28 4E 05 F1 | 	add	fp, #40
1d0f8     A7 34 02 FB | 	rdlong	local12, fp
1d0fc     1A 27 02 F6 | 	mov	local05, local12
1d100     01 26 06 F1 | 	add	local05, #1
1d104     A7 26 62 FC | 	wrlong	local05, fp
1d108     28 4E 85 F1 | 	sub	fp, #40
1d10c     BC FF 9F FD | 	jmp	#LR__3372
1d110                 | LR__3373
1d110                 | LR__3374
1d110     28 4E 05 F1 | 	add	fp, #40
1d114     A7 2A 02 FB | 	rdlong	local07, fp
1d118     28 4E 85 F1 | 	sub	fp, #40
1d11c     01 2A 16 F2 | 	cmp	local07, #1 wc
1d120     28 00 90 3D |  if_ae	jmp	#LR__3375
1d124     18 4E 05 F1 | 	add	fp, #24
1d128     A7 22 02 FB | 	rdlong	local03, fp
1d12c     10 4E 05 F1 | 	add	fp, #16
1d130     A7 2E 02 FB | 	rdlong	local09, fp
1d134     28 4E 85 F1 | 	sub	fp, #40
1d138     01 2E 66 F0 | 	shl	local09, #1
1d13c     11 2F 02 F1 | 	add	local09, local03
1d140     17 1F E2 FA | 	rdword	local01, local09
1d144     2E 1E 0E F2 | 	cmp	local01, #46 wz
1d148     14 00 90 5D |  if_ne	jmp	#LR__3376
1d14c                 | LR__3375
1d14c     10 4E 05 F1 | 	add	fp, #16
1d150     A7 2A C2 FA | 	rdbyte	local07, fp
1d154     03 2A 46 F5 | 	or	local07, #3
1d158     A7 2A 42 FC | 	wrbyte	local07, fp
1d15c     10 4E 85 F1 | 	sub	fp, #16
1d160                 | LR__3376
1d160     97 2C 48 FB | 	callpa	#(@LR__3378-@LR__3377)>>2,fcache_load_ptr_
1d164                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1d164                 | LR__3377
1d164     2C 4E 05 F1 | 	add	fp, #44
1d168     A7 2A 02 FB | 	rdlong	local07, fp
1d16c     2C 4E 85 F1 | 	sub	fp, #44
1d170     01 2A 16 F2 | 	cmp	local07, #1 wc
1d174     44 00 90 CD |  if_b	jmp	#LR__3379
1d178     18 4E 05 F1 | 	add	fp, #24
1d17c     A7 28 02 FB | 	rdlong	local06, fp
1d180     14 4E 05 F1 | 	add	fp, #20
1d184     A7 22 02 FB | 	rdlong	local03, fp
1d188     2C 4E 85 F1 | 	sub	fp, #44
1d18c     01 22 86 F1 | 	sub	local03, #1
1d190     01 22 66 F0 | 	shl	local03, #1
1d194     14 23 02 F1 | 	add	local03, local06
1d198     11 1F E2 FA | 	rdword	local01, local03
1d19c     2E 1E 0E F2 | 	cmp	local01, #46 wz
1d1a0     18 00 90 AD |  if_e	jmp	#LR__3379
1d1a4     2C 4E 05 F1 | 	add	fp, #44
1d1a8     A7 1E 02 FB | 	rdlong	local01, fp
1d1ac     01 1E 86 F1 | 	sub	local01, #1
1d1b0     A7 1E 62 FC | 	wrlong	local01, fp
1d1b4     2C 4E 85 F1 | 	sub	fp, #44
1d1b8     A8 FF 9F FD | 	jmp	#LR__3377
1d1bc                 | LR__3378
1d1bc                 | LR__3379
1d1bc     04 4E 05 F1 | 	add	fp, #4
1d1c0     A7 12 02 FB | 	rdlong	arg01, fp
1d1c4     04 4E 85 F1 | 	sub	fp, #4
1d1c8     20 12 06 F1 | 	add	arg01, #32
1d1cc     20 14 06 F6 | 	mov	arg02, #32
1d1d0     0B 16 06 F6 | 	mov	arg03, #11
1d1d4     09 37 02 F6 | 	mov	local13, arg01
1d1d8     98 00 A0 FD | 	call	#\builtin_bytefill_
1d1dc     1B FB 01 F6 | 	mov	result1, local13
1d1e0     0C 4E 05 F1 | 	add	fp, #12
1d1e4     A7 00 48 FC | 	wrbyte	#0, fp
1d1e8     A7 2A C2 FA | 	rdbyte	local07, fp
1d1ec     14 4E 05 F1 | 	add	fp, #20
1d1f0     A7 2A 62 FC | 	wrlong	local07, fp
1d1f4     04 4E 05 F1 | 	add	fp, #4
1d1f8     A7 10 68 FC | 	wrlong	#8, fp
1d1fc     24 4E 85 F1 | 	sub	fp, #36
1d200                 | ' 
1d200                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1d200                 | ' 	i = b = 0; ni = 8;
1d200                 | ' 	for (;;) {
1d200                 | LR__3380
1d200     18 4E 05 F1 | 	add	fp, #24
1d204     A7 22 02 FB | 	rdlong	local03, fp
1d208     10 4E 05 F1 | 	add	fp, #16
1d20c     A7 2E 02 FB | 	rdlong	local09, fp
1d210     17 25 02 F6 | 	mov	local04, local09
1d214     01 24 06 F1 | 	add	local04, #1
1d218     A7 24 62 FC | 	wrlong	local04, fp
1d21c     01 2E 66 F0 | 	shl	local09, #1
1d220     11 2F 02 F1 | 	add	local09, local03
1d224     17 29 E2 FA | 	rdword	local06, local09
1d228     14 4E 85 F1 | 	sub	fp, #20
1d22c     A7 28 52 FC | 	wrword	local06, fp
1d230     A7 2A EA FA | 	rdword	local07, fp wz
1d234     14 4E 85 F1 | 	sub	fp, #20
1d238     74 03 90 AD |  if_e	jmp	#LR__3396
1d23c     14 4E 05 F1 | 	add	fp, #20
1d240     A7 2A E2 FA | 	rdword	local07, fp
1d244     14 4E 85 F1 | 	sub	fp, #20
1d248     20 2A 0E F2 | 	cmp	local07, #32 wz
1d24c     30 00 90 AD |  if_e	jmp	#LR__3381
1d250     14 4E 05 F1 | 	add	fp, #20
1d254     A7 1E E2 FA | 	rdword	local01, fp
1d258     14 4E 85 F1 | 	sub	fp, #20
1d25c     2E 1E 0E F2 | 	cmp	local01, #46 wz
1d260     34 00 90 5D |  if_ne	jmp	#LR__3382
1d264     28 4E 05 F1 | 	add	fp, #40
1d268     A7 24 02 FB | 	rdlong	local04, fp
1d26c     04 4E 05 F1 | 	add	fp, #4
1d270     A7 30 02 FB | 	rdlong	local10, fp
1d274     2C 4E 85 F1 | 	sub	fp, #44
1d278     18 25 0A F2 | 	cmp	local04, local10 wz
1d27c     18 00 90 AD |  if_e	jmp	#LR__3382
1d280                 | LR__3381
1d280     10 4E 05 F1 | 	add	fp, #16
1d284     A7 2A C2 FA | 	rdbyte	local07, fp
1d288     03 2A 46 F5 | 	or	local07, #3
1d28c     A7 2A 42 FC | 	wrbyte	local07, fp
1d290     10 4E 85 F1 | 	sub	fp, #16
1d294                 | ' 			cf |=  0x01  |  0x02 ;
1d294                 | ' 			continue;
1d294     68 FF 9F FD | 	jmp	#LR__3380
1d298                 | LR__3382
1d298     20 4E 05 F1 | 	add	fp, #32
1d29c     A7 2A 02 FB | 	rdlong	local07, fp
1d2a0     04 4E 05 F1 | 	add	fp, #4
1d2a4     A7 1E 02 FB | 	rdlong	local01, fp
1d2a8     24 4E 85 F1 | 	sub	fp, #36
1d2ac     0F 2B 12 F2 | 	cmp	local07, local01 wc
1d2b0     1C 00 90 3D |  if_ae	jmp	#LR__3383
1d2b4     28 4E 05 F1 | 	add	fp, #40
1d2b8     A7 2C 02 FB | 	rdlong	local08, fp
1d2bc     04 4E 05 F1 | 	add	fp, #4
1d2c0     A7 30 02 FB | 	rdlong	local10, fp
1d2c4     2C 4E 85 F1 | 	sub	fp, #44
1d2c8     18 2D 0A F2 | 	cmp	local08, local10 wz
1d2cc     B0 00 90 5D |  if_ne	jmp	#LR__3385
1d2d0                 | LR__3383
1d2d0     24 4E 05 F1 | 	add	fp, #36
1d2d4     A7 2A 02 FB | 	rdlong	local07, fp
1d2d8     24 4E 85 F1 | 	sub	fp, #36
1d2dc     0B 2A 0E F2 | 	cmp	local07, #11 wz
1d2e0     18 00 90 5D |  if_ne	jmp	#LR__3384
1d2e4     10 4E 05 F1 | 	add	fp, #16
1d2e8     A7 2A C2 FA | 	rdbyte	local07, fp
1d2ec     03 2A 46 F5 | 	or	local07, #3
1d2f0     A7 2A 42 FC | 	wrbyte	local07, fp
1d2f4     10 4E 85 F1 | 	sub	fp, #16
1d2f8                 | ' 				cf |=  0x01  |  0x02 ;
1d2f8                 | ' 				break;
1d2f8     B4 02 90 FD | 	jmp	#LR__3396
1d2fc                 | LR__3384
1d2fc     28 4E 05 F1 | 	add	fp, #40
1d300     A7 2A 02 FB | 	rdlong	local07, fp
1d304     04 4E 05 F1 | 	add	fp, #4
1d308     A7 1E 02 FB | 	rdlong	local01, fp
1d30c     2C 4E 85 F1 | 	sub	fp, #44
1d310     0F 2B 0A F2 | 	cmp	local07, local01 wz
1d314     10 4E 05 51 |  if_ne	add	fp, #16
1d318     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1d31c     03 2A 46 55 |  if_ne	or	local07, #3
1d320     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1d324     10 4E 85 51 |  if_ne	sub	fp, #16
1d328     28 4E 05 F1 | 	add	fp, #40
1d32c     A7 2A 02 FB | 	rdlong	local07, fp
1d330     04 4E 05 F1 | 	add	fp, #4
1d334     A7 20 02 FB | 	rdlong	local02, fp
1d338     2C 4E 85 F1 | 	sub	fp, #44
1d33c     10 2B 1A F2 | 	cmp	local07, local02 wcz
1d340     6C 02 90 1D |  if_a	jmp	#LR__3396
1d344     2C 4E 05 F1 | 	add	fp, #44
1d348     A7 2A 02 FB | 	rdlong	local07, fp
1d34c     04 4E 85 F1 | 	sub	fp, #4
1d350     A7 2A 62 FC | 	wrlong	local07, fp
1d354     08 4E 85 F1 | 	sub	fp, #8
1d358     A7 10 68 FC | 	wrlong	#8, fp
1d35c     04 4E 05 F1 | 	add	fp, #4
1d360     A7 16 68 FC | 	wrlong	#11, fp
1d364     18 4E 85 F1 | 	sub	fp, #24
1d368     A7 32 C2 FA | 	rdbyte	local11, fp
1d36c     19 2B E2 F8 | 	getbyte	local07, local11, #0
1d370     02 2A 66 F0 | 	shl	local07, #2
1d374     A7 2A 42 FC | 	wrbyte	local07, fp
1d378     0C 4E 85 F1 | 	sub	fp, #12
1d37c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1d37c                 | ' 			continue;
1d37c     80 FE 9F FD | 	jmp	#LR__3380
1d380                 | LR__3385
1d380     14 4E 05 F1 | 	add	fp, #20
1d384     A7 2A E2 FA | 	rdword	local07, fp
1d388     14 4E 85 F1 | 	sub	fp, #20
1d38c     80 2A 16 F2 | 	cmp	local07, #128 wc
1d390     6C 00 90 CD |  if_b	jmp	#LR__3387
1d394     10 4E 05 F1 | 	add	fp, #16
1d398     A7 2A C2 FA | 	rdbyte	local07, fp
1d39c     02 2A 46 F5 | 	or	local07, #2
1d3a0     A7 2A 42 FC | 	wrbyte	local07, fp
1d3a4     04 4E 05 F1 | 	add	fp, #4
1d3a8     A7 12 E2 FA | 	rdword	arg01, fp
1d3ac     14 4E 85 F1 | 	sub	fp, #20
1d3b0     01 00 00 FF 
1d3b4     52 15 06 F6 | 	mov	arg02, ##850
1d3b8     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1d3bc     14 4E 05 F1 | 	add	fp, #20
1d3c0     A7 FA 51 FC | 	wrword	result1, fp
1d3c4     A7 2A E2 FA | 	rdword	local07, fp
1d3c8     14 4E 85 F1 | 	sub	fp, #20
1d3cc     80 2A CE F7 | 	test	local07, #128 wz
1d3d0     2C 00 90 AD |  if_e	jmp	#LR__3386
1d3d4     14 4E 05 F1 | 	add	fp, #20
1d3d8     A7 20 E2 FA | 	rdword	local02, fp
1d3dc     7F 20 06 F5 | 	and	local02, #127
1d3e0     01 00 00 FF 
1d3e4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1d3e8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1d3ec     10 2B C2 FA | 	rdbyte	local07, local02
1d3f0     A7 2A 52 FC | 	wrword	local07, fp
1d3f4     14 4E 85 F1 | 	sub	fp, #20
1d3f8     01 00 00 FF 
1d3fc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1d400                 | LR__3386
1d400                 | LR__3387
1d400     14 4E 05 F1 | 	add	fp, #20
1d404     A7 2A E2 FA | 	rdword	local07, fp
1d408     14 4E 85 F1 | 	sub	fp, #20
1d40c     00 2B 16 F2 | 	cmp	local07, #256 wc
1d410     88 00 90 CD |  if_b	jmp	#LR__3389
1d414     24 4E 05 F1 | 	add	fp, #36
1d418     A7 2A 02 FB | 	rdlong	local07, fp
1d41c     01 2A 86 F1 | 	sub	local07, #1
1d420     04 4E 85 F1 | 	sub	fp, #4
1d424     A7 20 02 FB | 	rdlong	local02, fp
1d428     20 4E 85 F1 | 	sub	fp, #32
1d42c     15 21 12 F2 | 	cmp	local02, local07 wc
1d430     2C 00 90 CD |  if_b	jmp	#LR__3388
1d434     10 4E 05 F1 | 	add	fp, #16
1d438     A7 32 C2 FA | 	rdbyte	local11, fp
1d43c     19 2B E2 F8 | 	getbyte	local07, local11, #0
1d440     03 2A 46 F5 | 	or	local07, #3
1d444     A7 2A 42 FC | 	wrbyte	local07, fp
1d448     14 4E 05 F1 | 	add	fp, #20
1d44c     A7 2A 02 FB | 	rdlong	local07, fp
1d450     04 4E 85 F1 | 	sub	fp, #4
1d454     A7 2A 62 FC | 	wrlong	local07, fp
1d458     20 4E 85 F1 | 	sub	fp, #32
1d45c                 | ' 				cf |=  0x01  |  0x02 ;
1d45c                 | ' 				i = ni; continue;
1d45c     A0 FD 9F FD | 	jmp	#LR__3380
1d460                 | LR__3388
1d460     04 4E 05 F1 | 	add	fp, #4
1d464     A7 2E 02 FB | 	rdlong	local09, fp
1d468     1C 4E 05 F1 | 	add	fp, #28
1d46c     A7 30 02 FB | 	rdlong	local10, fp
1d470     18 25 02 F6 | 	mov	local04, local10
1d474     01 24 06 F1 | 	add	local04, #1
1d478     A7 24 62 FC | 	wrlong	local04, fp
1d47c     20 2E 06 F1 | 	add	local09, #32
1d480     17 31 02 F1 | 	add	local10, local09
1d484     0C 4E 85 F1 | 	sub	fp, #12
1d488     A7 22 E2 FA | 	rdword	local03, fp
1d48c     14 4E 85 F1 | 	sub	fp, #20
1d490     08 22 46 F0 | 	shr	local03, #8
1d494     18 23 42 FC | 	wrbyte	local03, local10
1d498     D4 00 90 FD | 	jmp	#LR__3395
1d49c                 | LR__3389
1d49c     14 4E 05 F1 | 	add	fp, #20
1d4a0     A7 2A EA FA | 	rdword	local07, fp wz
1d4a4     14 4E 85 F1 | 	sub	fp, #20
1d4a8     20 00 90 AD |  if_e	jmp	#LR__3390
1d4ac     17 01 00 FF 
1d4b0     39 12 06 F6 | 	mov	arg01, ##@LR__4023
1d4b4     14 4E 05 F1 | 	add	fp, #20
1d4b8     A7 14 E2 FA | 	rdword	arg02, fp
1d4bc     14 4E 85 F1 | 	sub	fp, #20
1d4c0     48 CB BF FD | 	call	#_fatfs_cc_strchr
1d4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d4c8     20 00 90 AD |  if_e	jmp	#LR__3391
1d4cc                 | LR__3390
1d4cc     14 4E 05 F1 | 	add	fp, #20
1d4d0     A7 BE 58 FC | 	wrword	#95, fp
1d4d4     04 4E 85 F1 | 	sub	fp, #4
1d4d8     A7 2A C2 FA | 	rdbyte	local07, fp
1d4dc     03 2A 46 F5 | 	or	local07, #3
1d4e0     A7 2A 42 FC | 	wrbyte	local07, fp
1d4e4     10 4E 85 F1 | 	sub	fp, #16
1d4e8     84 00 90 FD | 	jmp	#LR__3394
1d4ec                 | LR__3391
1d4ec     14 4E 05 F1 | 	add	fp, #20
1d4f0     A7 2A E2 FA | 	rdword	local07, fp
1d4f4     14 4E 85 F1 | 	sub	fp, #20
1d4f8     41 2A 16 F2 | 	cmp	local07, #65 wc
1d4fc     24 00 90 CD |  if_b	jmp	#LR__3392
1d500     14 4E 05 F1 | 	add	fp, #20
1d504     A7 1E E2 FA | 	rdword	local01, fp
1d508     14 4E 85 F1 | 	sub	fp, #20
1d50c     5B 1E 16 F2 | 	cmp	local01, #91 wc
1d510     0C 4E 05 C1 |  if_b	add	fp, #12
1d514     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1d518     02 2A 46 C5 |  if_b	or	local07, #2
1d51c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1d520     0C 4E 85 C1 |  if_b	sub	fp, #12
1d524                 | LR__3392
1d524     14 4E 05 F1 | 	add	fp, #20
1d528     A7 2A E2 FA | 	rdword	local07, fp
1d52c     14 4E 85 F1 | 	sub	fp, #20
1d530     61 2A 16 F2 | 	cmp	local07, #97 wc
1d534     38 00 90 CD |  if_b	jmp	#LR__3393
1d538     14 4E 05 F1 | 	add	fp, #20
1d53c     A7 1E E2 FA | 	rdword	local01, fp
1d540     14 4E 85 F1 | 	sub	fp, #20
1d544     7B 1E 16 F2 | 	cmp	local01, #123 wc
1d548     24 00 90 3D |  if_ae	jmp	#LR__3393
1d54c     0C 4E 05 F1 | 	add	fp, #12
1d550     A7 2A C2 FA | 	rdbyte	local07, fp
1d554     01 2A 46 F5 | 	or	local07, #1
1d558     A7 2A 42 FC | 	wrbyte	local07, fp
1d55c     08 4E 05 F1 | 	add	fp, #8
1d560     A7 2A E2 FA | 	rdword	local07, fp
1d564     20 2A 86 F1 | 	sub	local07, #32
1d568     A7 2A 52 FC | 	wrword	local07, fp
1d56c     14 4E 85 F1 | 	sub	fp, #20
1d570                 | LR__3393
1d570                 | LR__3394
1d570                 | LR__3395
1d570     04 4E 05 F1 | 	add	fp, #4
1d574     A7 32 02 FB | 	rdlong	local11, fp
1d578     19 2F 02 F6 | 	mov	local09, local11
1d57c     1C 4E 05 F1 | 	add	fp, #28
1d580     A7 20 02 FB | 	rdlong	local02, fp
1d584     10 25 02 F6 | 	mov	local04, local02
1d588     01 24 06 F1 | 	add	local04, #1
1d58c     A7 24 62 FC | 	wrlong	local04, fp
1d590     10 31 02 F6 | 	mov	local10, local02
1d594     20 2E 06 F1 | 	add	local09, #32
1d598     17 31 02 F1 | 	add	local10, local09
1d59c     0C 4E 85 F1 | 	sub	fp, #12
1d5a0     A7 22 E2 FA | 	rdword	local03, fp
1d5a4     14 4E 85 F1 | 	sub	fp, #20
1d5a8     18 23 42 FC | 	wrbyte	local03, local10
1d5ac     50 FC 9F FD | 	jmp	#LR__3380
1d5b0                 | LR__3396
1d5b0     04 4E 05 F1 | 	add	fp, #4
1d5b4     A7 32 02 FB | 	rdlong	local11, fp
1d5b8     04 4E 85 F1 | 	sub	fp, #4
1d5bc     20 32 06 F1 | 	add	local11, #32
1d5c0     19 2B C2 FA | 	rdbyte	local07, local11
1d5c4     E5 2A 0E F2 | 	cmp	local07, #229 wz
1d5c8     04 4E 05 A1 |  if_e	add	fp, #4
1d5cc     A7 2A 02 AB |  if_e	rdlong	local07, fp
1d5d0     04 4E 85 A1 |  if_e	sub	fp, #4
1d5d4     20 2A 06 A1 |  if_e	add	local07, #32
1d5d8     15 0B 48 AC |  if_e	wrbyte	#5, local07
1d5dc     24 4E 05 F1 | 	add	fp, #36
1d5e0     A7 2A 02 FB | 	rdlong	local07, fp
1d5e4     24 4E 85 F1 | 	sub	fp, #36
1d5e8     08 2A 0E F2 | 	cmp	local07, #8 wz
1d5ec     0C 4E 05 A1 |  if_e	add	fp, #12
1d5f0     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1d5f4     02 2A 66 A0 |  if_e	shl	local07, #2
1d5f8     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1d5fc     0C 4E 85 A1 |  if_e	sub	fp, #12
1d600     0C 4E 05 F1 | 	add	fp, #12
1d604     A7 2A C2 FA | 	rdbyte	local07, fp
1d608     0C 4E 85 F1 | 	sub	fp, #12
1d60c     0C 2A 06 F5 | 	and	local07, #12
1d610     0C 2A 0E F2 | 	cmp	local07, #12 wz
1d614     18 00 90 AD |  if_e	jmp	#LR__3397
1d618     0C 4E 05 F1 | 	add	fp, #12
1d61c     A7 1E C2 FA | 	rdbyte	local01, fp
1d620     0C 4E 85 F1 | 	sub	fp, #12
1d624     03 1E 06 F5 | 	and	local01, #3
1d628     03 1E 0E F2 | 	cmp	local01, #3 wz
1d62c     14 00 90 5D |  if_ne	jmp	#LR__3398
1d630                 | LR__3397
1d630     10 4E 05 F1 | 	add	fp, #16
1d634     A7 2A C2 FA | 	rdbyte	local07, fp
1d638     02 2A 46 F5 | 	or	local07, #2
1d63c     A7 2A 42 FC | 	wrbyte	local07, fp
1d640     10 4E 85 F1 | 	sub	fp, #16
1d644                 | LR__3398
1d644     10 4E 05 F1 | 	add	fp, #16
1d648     A7 2A C2 FA | 	rdbyte	local07, fp
1d64c     10 4E 85 F1 | 	sub	fp, #16
1d650     02 2A CE F7 | 	test	local07, #2 wz
1d654     48 00 90 5D |  if_ne	jmp	#LR__3399
1d658     0C 4E 05 F1 | 	add	fp, #12
1d65c     A7 2A C2 FA | 	rdbyte	local07, fp
1d660     0C 4E 85 F1 | 	sub	fp, #12
1d664     01 2A CE F7 | 	test	local07, #1 wz
1d668     10 4E 05 51 |  if_ne	add	fp, #16
1d66c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1d670     10 2A 46 55 |  if_ne	or	local07, #16
1d674     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1d678     10 4E 85 51 |  if_ne	sub	fp, #16
1d67c     0C 4E 05 F1 | 	add	fp, #12
1d680     A7 2A C2 FA | 	rdbyte	local07, fp
1d684     0C 4E 85 F1 | 	sub	fp, #12
1d688     04 2A CE F7 | 	test	local07, #4 wz
1d68c     10 4E 05 51 |  if_ne	add	fp, #16
1d690     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1d694     08 2A 46 55 |  if_ne	or	local07, #8
1d698     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1d69c     10 4E 85 51 |  if_ne	sub	fp, #16
1d6a0                 | LR__3399
1d6a0     04 4E 05 F1 | 	add	fp, #4
1d6a4     A7 2A 02 FB | 	rdlong	local07, fp
1d6a8     0C 4E 05 F1 | 	add	fp, #12
1d6ac     A7 1E C2 FA | 	rdbyte	local01, fp
1d6b0     10 4E 85 F1 | 	sub	fp, #16
1d6b4     2B 2A 06 F1 | 	add	local07, #43
1d6b8     15 1F 42 FC | 	wrbyte	local01, local07
1d6bc                 | ' 	}
1d6bc                 | ' 
1d6bc                 | ' 	dp->fn[ 11 ] = cf;
1d6bc                 | ' 
1d6bc                 | ' 	return FR_OK;
1d6bc     00 FA 05 F6 | 	mov	result1, #0
1d6c0                 | LR__3400
1d6c0     A7 F0 03 F6 | 	mov	ptra, fp
1d6c4     B2 00 A0 FD | 	call	#popregs_
1d6c8                 | _fatfs_cc_create_name_ret
1d6c8     2D 00 64 FD | 	ret
1d6cc                 | 
1d6cc                 | _fatfs_cc_follow_path
1d6cc     02 4A 05 F6 | 	mov	COUNT_, #2
1d6d0     A8 00 A0 FD | 	call	#pushregs_
1d6d4     18 F0 07 F1 | 	add	ptra, #24
1d6d8     04 4E 05 F1 | 	add	fp, #4
1d6dc     A7 12 62 FC | 	wrlong	arg01, fp
1d6e0     04 4E 05 F1 | 	add	fp, #4
1d6e4     A7 14 62 FC | 	wrlong	arg02, fp
1d6e8     04 4E 85 F1 | 	sub	fp, #4
1d6ec     A7 FA 01 FB | 	rdlong	result1, fp
1d6f0     FD 1E 02 FB | 	rdlong	local01, result1
1d6f4     10 4E 05 F1 | 	add	fp, #16
1d6f8     A7 1E 62 FC | 	wrlong	local01, fp
1d6fc     14 4E 85 F1 | 	sub	fp, #20
1d700     97 24 48 FB | 	callpa	#(@LR__3412-@LR__3410)>>2,fcache_load_ptr_
1d704                 | ' )
1d704                 | ' {
1d704                 | ' 	FRESULT res;
1d704                 | ' 	BYTE ns;
1d704                 | ' 	FATFS *fs = dp->obj.fs;
1d704                 | ' #line 3034 "ff.c"
1d704                 | ' 	{
1d704                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1d704                 | LR__3410
1d704     08 4E 05 F1 | 	add	fp, #8
1d708     A7 1E 02 FB | 	rdlong	local01, fp
1d70c     08 4E 85 F1 | 	sub	fp, #8
1d710     0F 1F C2 FA | 	rdbyte	local01, local01
1d714     2F 1E 0E F2 | 	cmp	local01, #47 wz
1d718     18 00 90 AD |  if_e	jmp	#LR__3411
1d71c     08 4E 05 F1 | 	add	fp, #8
1d720     A7 1E 02 FB | 	rdlong	local01, fp
1d724     08 4E 85 F1 | 	sub	fp, #8
1d728     0F 1F C2 FA | 	rdbyte	local01, local01
1d72c     5C 1E 0E F2 | 	cmp	local01, #92 wz
1d730     18 00 90 5D |  if_ne	jmp	#LR__3413
1d734                 | LR__3411
1d734     08 4E 05 F1 | 	add	fp, #8
1d738     A7 1E 02 FB | 	rdlong	local01, fp
1d73c     01 1E 06 F1 | 	add	local01, #1
1d740     A7 1E 62 FC | 	wrlong	local01, fp
1d744     08 4E 85 F1 | 	sub	fp, #8
1d748     B8 FF 9F FD | 	jmp	#LR__3410
1d74c                 | LR__3412
1d74c                 | LR__3413
1d74c     04 4E 05 F1 | 	add	fp, #4
1d750     A7 1E 02 FB | 	rdlong	local01, fp
1d754     08 1E 06 F1 | 	add	local01, #8
1d758     0F 01 68 FC | 	wrlong	#0, local01
1d75c     04 4E 05 F1 | 	add	fp, #4
1d760     A7 1E 02 FB | 	rdlong	local01, fp
1d764     08 4E 85 F1 | 	sub	fp, #8
1d768     0F 1F C2 FA | 	rdbyte	local01, local01
1d76c     20 1E 16 F2 | 	cmp	local01, #32 wc
1d770     30 00 90 3D |  if_ae	jmp	#LR__3414
1d774     04 4E 05 F1 | 	add	fp, #4
1d778     A7 1E 02 FB | 	rdlong	local01, fp
1d77c     2B 1E 06 F1 | 	add	local01, #43
1d780     0F 01 49 FC | 	wrbyte	#128, local01
1d784     A7 12 02 FB | 	rdlong	arg01, fp
1d788     04 4E 85 F1 | 	sub	fp, #4
1d78c     00 14 06 F6 | 	mov	arg02, #0
1d790     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1d794     0C 4E 05 F1 | 	add	fp, #12
1d798     A7 FA 61 FC | 	wrlong	result1, fp
1d79c     0C 4E 85 F1 | 	sub	fp, #12
1d7a0     1C 01 90 FD | 	jmp	#LR__3418
1d7a4                 | LR__3414
1d7a4                 | ' 		for (;;) {
1d7a4                 | LR__3415
1d7a4     04 4E 05 F1 | 	add	fp, #4
1d7a8     A7 12 02 FB | 	rdlong	arg01, fp
1d7ac     04 4E 05 F1 | 	add	fp, #4
1d7b0     A7 14 02 F6 | 	mov	arg02, fp
1d7b4     08 4E 85 F1 | 	sub	fp, #8
1d7b8     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1d7bc     0C 4E 05 F1 | 	add	fp, #12
1d7c0     A7 FA 61 FC | 	wrlong	result1, fp
1d7c4     00 FA 4D F2 | 	cmps	result1, #0 wz
1d7c8     0C 4E 85 F1 | 	sub	fp, #12
1d7cc     F0 00 90 5D |  if_ne	jmp	#LR__3417
1d7d0     04 4E 05 F1 | 	add	fp, #4
1d7d4     A7 12 02 FB | 	rdlong	arg01, fp
1d7d8     04 4E 85 F1 | 	sub	fp, #4
1d7dc     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1d7e0     0C 4E 05 F1 | 	add	fp, #12
1d7e4     A7 FA 61 FC | 	wrlong	result1, fp
1d7e8     08 4E 85 F1 | 	sub	fp, #8
1d7ec     A7 1E 02 FB | 	rdlong	local01, fp
1d7f0     2B 1E 06 F1 | 	add	local01, #43
1d7f4     0F 1F C2 FA | 	rdbyte	local01, local01
1d7f8     0C 4E 05 F1 | 	add	fp, #12
1d7fc     A7 1E 42 FC | 	wrbyte	local01, fp
1d800     04 4E 85 F1 | 	sub	fp, #4
1d804     A7 1E 0A FB | 	rdlong	local01, fp wz
1d808     0C 4E 85 F1 | 	sub	fp, #12
1d80c     34 00 90 AD |  if_e	jmp	#LR__3416
1d810     0C 4E 05 F1 | 	add	fp, #12
1d814     A7 1E 02 FB | 	rdlong	local01, fp
1d818     0C 4E 85 F1 | 	sub	fp, #12
1d81c     04 1E 0E F2 | 	cmp	local01, #4 wz
1d820     9C 00 90 5D |  if_ne	jmp	#LR__3417
1d824     10 4E 05 F1 | 	add	fp, #16
1d828     A7 1E C2 FA | 	rdbyte	local01, fp
1d82c     10 4E 85 F1 | 	sub	fp, #16
1d830     04 1E CE F7 | 	test	local01, #4 wz
1d834     0C 4E 05 A1 |  if_e	add	fp, #12
1d838     A7 0A 68 AC |  if_e	wrlong	#5, fp
1d83c     0C 4E 85 A1 |  if_e	sub	fp, #12
1d840                 | ' 					}
1d840                 | ' 				}
1d840                 | ' 				break;
1d840     7C 00 90 FD | 	jmp	#LR__3417
1d844                 | LR__3416
1d844     10 4E 05 F1 | 	add	fp, #16
1d848     A7 1E C2 FA | 	rdbyte	local01, fp
1d84c     10 4E 85 F1 | 	sub	fp, #16
1d850     04 1E CE F7 | 	test	local01, #4 wz
1d854     68 00 90 5D |  if_ne	jmp	#LR__3417
1d858     04 4E 05 F1 | 	add	fp, #4
1d85c     A7 1E 02 FB | 	rdlong	local01, fp
1d860     04 4E 85 F1 | 	sub	fp, #4
1d864     06 1E 06 F1 | 	add	local01, #6
1d868     0F 1F C2 FA | 	rdbyte	local01, local01
1d86c     10 1E CE F7 | 	test	local01, #16 wz
1d870     0C 4E 05 A1 |  if_e	add	fp, #12
1d874     A7 0A 68 AC |  if_e	wrlong	#5, fp
1d878     0C 4E 85 A1 |  if_e	sub	fp, #12
1d87c                 | ' 				res = FR_NO_PATH; break;
1d87c     40 00 90 AD |  if_e	jmp	#LR__3417
1d880     04 4E 05 F1 | 	add	fp, #4
1d884     A7 20 02 FB | 	rdlong	local02, fp
1d888     10 1F 02 F6 | 	mov	local01, local02
1d88c     10 4E 05 F1 | 	add	fp, #16
1d890     A7 14 02 FB | 	rdlong	arg02, fp
1d894     0A 13 02 F6 | 	mov	arg01, arg02
1d898     34 14 06 F1 | 	add	arg02, #52
1d89c     14 4E 85 F1 | 	sub	fp, #20
1d8a0     10 20 06 F1 | 	add	local02, #16
1d8a4     10 21 02 FB | 	rdlong	local02, local02
1d8a8     FF 21 06 F5 | 	and	local02, #511
1d8ac     10 15 02 F1 | 	add	arg02, local02
1d8b0     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1d8b4     08 1E 06 F1 | 	add	local01, #8
1d8b8     0F FB 61 FC | 	wrlong	result1, local01
1d8bc     E4 FE 9F FD | 	jmp	#LR__3415
1d8c0                 | LR__3417
1d8c0                 | LR__3418
1d8c0                 | ' 			}
1d8c0                 | ' #line 3090 "ff.c"
1d8c0                 | ' 			{
1d8c0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1d8c0                 | ' 			}
1d8c0                 | ' 		}
1d8c0                 | ' 	}
1d8c0                 | ' 
1d8c0                 | ' 	return res;
1d8c0     0C 4E 05 F1 | 	add	fp, #12
1d8c4     A7 FA 01 FB | 	rdlong	result1, fp
1d8c8     0C 4E 85 F1 | 	sub	fp, #12
1d8cc     A7 F0 03 F6 | 	mov	ptra, fp
1d8d0     B2 00 A0 FD | 	call	#popregs_
1d8d4                 | _fatfs_cc_follow_path_ret
1d8d4     2D 00 64 FD | 	ret
1d8d8                 | 
1d8d8                 | _fatfs_cc_get_ldnumber
1d8d8     01 00 66 F6 | 	neg	_var01, #1
1d8dc     09 03 0A FB | 	rdlong	_var02, arg01 wz
1d8e0     01 05 02 F6 | 	mov	_var03, _var02
1d8e4     01 FA 65 A6 |  if_e	neg	result1, #1
1d8e8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1d8ec     97 10 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
1d8f0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1d8f0                 | LR__3420
1d8f0     02 07 C2 FA | 	rdbyte	_var04, _var03
1d8f4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1d8f8     20 FA 15 F2 | 	cmp	result1, #32 wc
1d8fc     01 04 06 F1 | 	add	_var03, #1
1d900     03 09 02 36 |  if_ae	mov	_var05, _var04
1d904     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1d908     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1d90c     E0 FF 9F 1D |  if_a	jmp	#LR__3420
1d910                 | LR__3421
1d910     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1d914     3A 06 0E F2 | 	cmp	_var04, #58 wz
1d918     40 00 90 5D |  if_ne	jmp	#LR__3423
1d91c     01 0A 06 F6 | 	mov	_var06, #1
1d920     01 09 C2 FA | 	rdbyte	_var05, _var02
1d924     30 08 16 F2 | 	cmp	_var05, #48 wc
1d928     1C 00 90 CD |  if_b	jmp	#LR__3422
1d92c     01 09 C2 FA | 	rdbyte	_var05, _var02
1d930     3A 08 16 F2 | 	cmp	_var05, #58 wc
1d934     01 0D 02 C6 |  if_b	mov	_var07, _var02
1d938     02 0C 06 C1 |  if_b	add	_var07, #2
1d93c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1d940     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1d944     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1d948                 | LR__3422
1d948     01 0A 56 F2 | 	cmps	_var06, #1 wc
1d94c     05 01 02 C6 |  if_b	mov	_var01, _var06
1d950     09 05 62 CC |  if_b	wrlong	_var03, arg01
1d954                 | ' 			vol = i;
1d954                 | ' 			*path = tt;
1d954                 | ' 		}
1d954                 | ' 		return vol;
1d954     00 FB 01 F6 | 	mov	result1, _var01
1d958     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1d95c                 | LR__3423
1d95c                 | ' 	}
1d95c                 | ' #line 3170 "ff.c"
1d95c                 | ' 	vol = 0;
1d95c                 | ' 
1d95c                 | ' 	return vol;
1d95c     00 FA 05 F6 | 	mov	result1, #0
1d960                 | _fatfs_cc_get_ldnumber_ret
1d960     2D 00 64 FD | 	ret
1d964                 | 
1d964                 | _fatfs_cc_check_fs
1d964     04 4A 05 F6 | 	mov	COUNT_, #4
1d968     A8 00 A0 FD | 	call	#pushregs_
1d96c     09 1F 02 F6 | 	mov	local01, arg01
1d970     03 1E 06 F1 | 	add	local01, #3
1d974     0F 01 48 FC | 	wrbyte	#0, local01
1d978     2D 1E 06 F1 | 	add	local01, #45
1d97c     FF FF FF FF 
1d980     0F FF 6B FC | 	wrlong	##-1, local01
1d984     30 1E 86 F1 | 	sub	local01, #48
1d988     0F 13 02 F6 | 	mov	arg01, local01
1d98c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1d990     00 FA 0D F2 | 	cmp	result1, #0 wz
1d994     04 FA 05 56 |  if_ne	mov	result1, #4
1d998     94 01 90 5D |  if_ne	jmp	#LR__3434
1d99c     34 1E 06 F1 | 	add	local01, #52
1d9a0     0F 13 02 F6 | 	mov	arg01, local01
1d9a4     FE 13 06 F1 | 	add	arg01, #510
1d9a8                 | ' {
1d9a8                 | ' 
1d9a8                 | ' 	return *((WORD*)ptr);
1d9a8     09 21 E2 FA | 	rdword	local02, arg01
1d9ac     0F 23 C2 FA | 	rdbyte	local03, local01
1d9b0     34 1E 86 F1 | 	sub	local01, #52
1d9b4     11 25 E2 F8 | 	getbyte	local04, local03, #0
1d9b8     EB 24 0E F2 | 	cmp	local04, #235 wz
1d9bc     11 17 02 56 |  if_ne	mov	arg03, local03
1d9c0     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1d9c4     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1d9c8     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1d9cc     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1d9d0     44 01 90 5D |  if_ne	jmp	#LR__3433
1d9d4     10 25 32 F9 | 	getword	local04, local02, #0
1d9d8     55 00 00 FF 
1d9dc     55 24 0E F2 | 	cmp	local04, ##43605 wz
1d9e0     2C 00 90 5D |  if_ne	jmp	#LR__3430
1d9e4     34 1E 06 F1 | 	add	local01, #52
1d9e8     0F 13 02 F6 | 	mov	arg01, local01
1d9ec     34 1E 86 F1 | 	sub	local01, #52
1d9f0     52 12 06 F1 | 	add	arg01, #82
1d9f4     17 01 00 FF 
1d9f8     40 14 06 F6 | 	mov	arg02, ##@LR__4024
1d9fc     08 16 06 F6 | 	mov	arg03, #8
1da00     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1da04     00 FA 0D F2 | 	cmp	result1, #0 wz
1da08                 | ' 			return 0;
1da08     00 FA 05 A6 |  if_e	mov	result1, #0
1da0c     20 01 90 AD |  if_e	jmp	#LR__3434
1da10                 | LR__3430
1da10     34 1E 06 F1 | 	add	local01, #52
1da14     0F 13 02 F6 | 	mov	arg01, local01
1da18     0B 12 06 F1 | 	add	arg01, #11
1da1c                 | ' {
1da1c                 | ' 
1da1c                 | ' 	return *((WORD*)ptr);
1da1c     09 FB E1 FA | 	rdword	result1, arg01
1da20     0D 1E 06 F1 | 	add	local01, #13
1da24     0F 23 C2 FA | 	rdbyte	local03, local01
1da28     41 1E 86 F1 | 	sub	local01, #65
1da2c     FD 24 32 F9 | 	getword	local04, result1, #0
1da30     FD 14 32 F9 | 	getword	arg02, result1, #0
1da34     01 14 86 F1 | 	sub	arg02, #1
1da38     0A 25 CA F7 | 	test	local04, arg02 wz
1da3c     D8 00 90 5D |  if_ne	jmp	#LR__3432
1da40     FD 14 32 F9 | 	getword	arg02, result1, #0
1da44     01 00 00 FF 
1da48     00 14 16 F2 | 	cmp	arg02, ##512 wc
1da4c     C8 00 90 CD |  if_b	jmp	#LR__3432
1da50     FD 14 32 F9 | 	getword	arg02, result1, #0
1da54     01 00 00 FF 
1da58     01 14 16 F2 | 	cmp	arg02, ##513 wc
1da5c     B8 00 90 3D |  if_ae	jmp	#LR__3432
1da60     11 13 02 F6 | 	mov	arg01, local03
1da64     07 12 4E F7 | 	zerox	arg01, #7 wz
1da68     AC 00 90 AD |  if_e	jmp	#LR__3432
1da6c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1da70     11 23 E2 F8 | 	getbyte	local03, local03, #0
1da74     01 22 86 F1 | 	sub	local03, #1
1da78     11 13 CA F7 | 	test	arg01, local03 wz
1da7c     98 00 90 5D |  if_ne	jmp	#LR__3432
1da80     34 1E 06 F1 | 	add	local01, #52
1da84     0F 13 02 F6 | 	mov	arg01, local01
1da88     34 1E 86 F1 | 	sub	local01, #52
1da8c     0E 12 06 F1 | 	add	arg01, #14
1da90                 | ' {
1da90                 | ' 
1da90                 | ' 	return *((WORD*)ptr);
1da90     09 FB E9 FA | 	rdword	result1, arg01 wz
1da94     80 00 90 AD |  if_e	jmp	#LR__3432
1da98     44 1E 06 F1 | 	add	local01, #68
1da9c     0F 13 C2 FA | 	rdbyte	arg01, local01
1daa0     44 1E 86 F1 | 	sub	local01, #68
1daa4     01 12 86 F1 | 	sub	arg01, #1
1daa8     02 12 16 F2 | 	cmp	arg01, #2 wc
1daac     68 00 90 3D |  if_ae	jmp	#LR__3432
1dab0     34 1E 06 F1 | 	add	local01, #52
1dab4     0F 13 02 F6 | 	mov	arg01, local01
1dab8     34 1E 86 F1 | 	sub	local01, #52
1dabc     11 12 06 F1 | 	add	arg01, #17
1dac0                 | ' {
1dac0                 | ' 
1dac0                 | ' 	return *((WORD*)ptr);
1dac0     09 FB E9 FA | 	rdword	result1, arg01 wz
1dac4     50 00 90 AD |  if_e	jmp	#LR__3432
1dac8     34 1E 06 F1 | 	add	local01, #52
1dacc     0F 13 02 F6 | 	mov	arg01, local01
1dad0     34 1E 86 F1 | 	sub	local01, #52
1dad4     13 12 06 F1 | 	add	arg01, #19
1dad8                 | ' {
1dad8                 | ' 
1dad8                 | ' 	return *((WORD*)ptr);
1dad8     09 FB E1 FA | 	rdword	result1, arg01
1dadc     FD 22 32 F9 | 	getword	local03, result1, #0
1dae0     80 22 16 F2 | 	cmp	local03, #128 wc
1dae4     20 00 90 3D |  if_ae	jmp	#LR__3431
1dae8     34 1E 06 F1 | 	add	local01, #52
1daec     0F 13 02 F6 | 	mov	arg01, local01
1daf0     34 1E 86 F1 | 	sub	local01, #52
1daf4     20 12 06 F1 | 	add	arg01, #32
1daf8                 | ' {
1daf8                 | ' 
1daf8                 | ' 	return *((DWORD*)ptr);
1daf8     09 FB 01 FB | 	rdlong	result1, arg01
1dafc     80 00 00 FF 
1db00     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1db04     10 00 90 CD |  if_b	jmp	#LR__3432
1db08                 | LR__3431
1db08     4A 1E 06 F1 | 	add	local01, #74
1db0c                 | ' {
1db0c                 | ' 
1db0c                 | ' 	return *((WORD*)ptr);
1db0c     0F FB E9 FA | 	rdword	result1, local01 wz
1db10                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1db10                 | ' 			&& ld_word(fs->win +  14 ) != 0
1db10                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1db10                 | ' 			&& ld_word(fs->win +  17 ) != 0
1db10                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1db10                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1db10                 | ' 				return 0;
1db10     00 FA 05 56 |  if_ne	mov	result1, #0
1db14     18 00 90 5D |  if_ne	jmp	#LR__3434
1db18                 | LR__3432
1db18                 | LR__3433
1db18                 | ' 		}
1db18                 | ' 	}
1db18                 | ' 	return sign == 0xAA55 ? 2 : 3;
1db18     10 23 32 F9 | 	getword	local03, local02, #0
1db1c     55 00 00 FF 
1db20     55 22 0E F2 | 	cmp	local03, ##43605 wz
1db24     02 24 06 A6 |  if_e	mov	local04, #2
1db28     03 24 06 56 |  if_ne	mov	local04, #3
1db2c     12 FB 01 F6 | 	mov	result1, local04
1db30                 | LR__3434
1db30     A7 F0 03 F6 | 	mov	ptra, fp
1db34     B2 00 A0 FD | 	call	#popregs_
1db38                 | _fatfs_cc_check_fs_ret
1db38     2D 00 64 FD | 	ret
1db3c                 | 
1db3c                 | _fatfs_cc_find_volume
1db3c     05 4A 05 F6 | 	mov	COUNT_, #5
1db40     A8 00 A0 FD | 	call	#pushregs_
1db44     24 F0 07 F1 | 	add	ptra, #36
1db48     09 1F 02 F6 | 	mov	local01, arg01
1db4c     0A 21 02 F6 | 	mov	local02, arg02
1db50     0F 13 02 F6 | 	mov	arg01, local01
1db54     00 14 06 F6 | 	mov	arg02, #0
1db58     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1db5c     02 FA 0D F2 | 	cmp	result1, #2 wz
1db60     0C 00 90 AD |  if_e	jmp	#LR__3440
1db64     03 FA 15 F2 | 	cmp	result1, #3 wc
1db68     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1db6c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3448
1db70                 | LR__3440
1db70                 | ' 	for (i = 0; i < 4; i++) {
1db70     00 22 06 F6 | 	mov	local03, #0
1db74     97 26 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
1db78                 | LR__3441
1db78     04 22 16 F2 | 	cmp	local03, #4 wc
1db7c     44 00 90 3D |  if_ae	jmp	#LR__3443
1db80     11 25 02 F6 | 	mov	local04, local03
1db84     02 24 66 F0 | 	shl	local04, #2
1db88     14 4E 05 F1 | 	add	fp, #20
1db8c     A7 24 02 F1 | 	add	local04, fp
1db90     34 1E 06 F1 | 	add	local01, #52
1db94     0F 13 02 F6 | 	mov	arg01, local01
1db98     34 1E 86 F1 | 	sub	local01, #52
1db9c     BE 13 06 F1 | 	add	arg01, #446
1dba0     11 15 02 F6 | 	mov	arg02, local03
1dba4     04 14 66 F0 | 	shl	arg02, #4
1dba8     0A 13 02 F1 | 	add	arg01, arg02
1dbac     08 12 06 F1 | 	add	arg01, #8
1dbb0                 | ' {
1dbb0                 | ' 
1dbb0                 | ' 	return *((DWORD*)ptr);
1dbb0     09 FB 01 FB | 	rdlong	result1, arg01
1dbb4     14 4E 85 F1 | 	sub	fp, #20
1dbb8     12 FB 61 FC | 	wrlong	result1, local04
1dbbc     01 22 06 F1 | 	add	local03, #1
1dbc0     B4 FF 9F FD | 	jmp	#LR__3441
1dbc4                 | LR__3442
1dbc4                 | LR__3443
1dbc4     00 20 0E F2 | 	cmp	local02, #0 wz
1dbc8     10 25 02 56 |  if_ne	mov	local04, local02
1dbcc     01 24 86 51 |  if_ne	sub	local04, #1
1dbd0     00 24 06 A6 |  if_e	mov	local04, #0
1dbd4     12 23 02 F6 | 	mov	local03, local04
1dbd8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1dbd8                 | ' 	}
1dbd8                 | ' 	i = part ? part - 1 : 0;
1dbd8                 | ' 	do {
1dbd8                 | LR__3444
1dbd8     11 25 02 F6 | 	mov	local04, local03
1dbdc     02 24 66 F0 | 	shl	local04, #2
1dbe0     14 4E 05 F1 | 	add	fp, #20
1dbe4     A7 24 02 F1 | 	add	local04, fp
1dbe8     12 25 0A FB | 	rdlong	local04, local04 wz
1dbec     14 4E 85 F1 | 	sub	fp, #20
1dbf0     28 00 90 AD |  if_e	jmp	#LR__3445
1dbf4     11 25 02 F6 | 	mov	local04, local03
1dbf8     02 24 66 F0 | 	shl	local04, #2
1dbfc     14 4E 05 F1 | 	add	fp, #20
1dc00     A7 24 02 F1 | 	add	local04, fp
1dc04     12 15 02 FB | 	rdlong	arg02, local04
1dc08     0F 13 02 F6 | 	mov	arg01, local01
1dc0c     14 4E 85 F1 | 	sub	fp, #20
1dc10     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1dc14     FD 24 02 F6 | 	mov	local04, result1
1dc18     04 00 90 FD | 	jmp	#LR__3446
1dc1c                 | LR__3445
1dc1c     03 24 06 F6 | 	mov	local04, #3
1dc20                 | LR__3446
1dc20     12 27 02 F6 | 	mov	local05, local04
1dc24     00 20 0E F2 | 	cmp	local02, #0 wz
1dc28     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1dc2c     0C 00 90 8D |  if_c_and_z	jmp	#LR__3447
1dc30     01 22 06 A1 |  if_e	add	local03, #1
1dc34     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1dc38     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3444
1dc3c                 | LR__3447
1dc3c                 | ' 	return fmt;
1dc3c     13 FB 01 F6 | 	mov	result1, local05
1dc40                 | LR__3448
1dc40     A7 F0 03 F6 | 	mov	ptra, fp
1dc44     B2 00 A0 FD | 	call	#popregs_
1dc48                 | _fatfs_cc_find_volume_ret
1dc48     2D 00 64 FD | 	ret
1dc4c                 | 
1dc4c                 | _fatfs_cc_mount_volume
1dc4c     0B 4A 05 F6 | 	mov	COUNT_, #11
1dc50     A8 00 A0 FD | 	call	#pushregs_
1dc54     0A 1F 02 F6 | 	mov	local01, arg02
1dc58     0B 21 02 F6 | 	mov	local02, arg03
1dc5c     0F 01 68 FC | 	wrlong	#0, local01
1dc60     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1dc64     FD 22 02 F6 | 	mov	local03, result1
1dc68     00 22 56 F2 | 	cmps	local03, #0 wc
1dc6c     0B FA 05 C6 |  if_b	mov	result1, #11
1dc70     3C 05 90 CD |  if_b	jmp	#LR__3460
1dc74     11 17 02 F6 | 	mov	arg03, local03
1dc78     02 16 66 F0 | 	shl	arg03, #2
1dc7c     F2 16 02 F1 | 	add	arg03, objptr
1dc80     0B 25 0A FB | 	rdlong	local04, arg03 wz
1dc84     0C FA 05 A6 |  if_e	mov	result1, #12
1dc88     24 05 90 AD |  if_e	jmp	#LR__3460
1dc8c     0F 25 62 FC | 	wrlong	local04, local01
1dc90     10 21 E2 F8 | 	getbyte	local02, local02, #0
1dc94     FE 20 06 F5 | 	and	local02, #254
1dc98     12 17 CA FA | 	rdbyte	arg03, local04 wz
1dc9c     4C 00 90 AD |  if_e	jmp	#LR__3451
1dca0     01 24 06 F1 | 	add	local04, #1
1dca4     12 13 CA FA | 	rdbyte	arg01, local04 wz
1dca8     01 24 86 F1 | 	sub	local04, #1
1dcac     01 FA 05 56 |  if_ne	mov	result1, #1
1dcb0                 | ' 
1dcb0                 | ' 	return Stat;
1dcb0     01 00 00 AF 
1dcb4     20 E4 05 A1 |  if_e	add	objptr, ##544
1dcb8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1dcbc     01 00 00 AF 
1dcc0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1dcc4     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1dcc8     01 16 CE F7 | 	test	arg03, #1 wz
1dccc     1C 00 90 5D |  if_ne	jmp	#LR__3450
1dcd0     00 20 0E F2 | 	cmp	local02, #0 wz
1dcd4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1dcd8     04 FA CD 57 |  if_ne	test	result1, #4 wz
1dcdc                 | ' 				return FR_WRITE_PROTECTED;
1dcdc     0A FA 05 56 |  if_ne	mov	result1, #10
1dce0     CC 04 90 5D |  if_ne	jmp	#LR__3460
1dce4                 | ' 			}
1dce4                 | ' 			return FR_OK;
1dce4     00 FA 05 F6 | 	mov	result1, #0
1dce8     C4 04 90 FD | 	jmp	#LR__3460
1dcec                 | LR__3450
1dcec                 | LR__3451
1dcec     12 01 48 FC | 	wrbyte	#0, local04
1dcf0     01 24 06 F1 | 	add	local04, #1
1dcf4     12 23 42 FC | 	wrbyte	local03, local04
1dcf8     12 13 C2 FA | 	rdbyte	arg01, local04
1dcfc     01 24 86 F1 | 	sub	local04, #1
1dd00     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1dd04     FD 16 02 F6 | 	mov	arg03, result1
1dd08     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1dd0c     01 26 CE F7 | 	test	local05, #1 wz
1dd10                 | ' 		return FR_NOT_READY;
1dd10     03 FA 05 56 |  if_ne	mov	result1, #3
1dd14     98 04 90 5D |  if_ne	jmp	#LR__3460
1dd18     00 20 0E F2 | 	cmp	local02, #0 wz
1dd1c     0B 27 02 56 |  if_ne	mov	local05, arg03
1dd20     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1dd24     04 26 CE 57 |  if_ne	test	local05, #4 wz
1dd28                 | ' 		return FR_WRITE_PROTECTED;
1dd28     0A FA 05 56 |  if_ne	mov	result1, #10
1dd2c     80 04 90 5D |  if_ne	jmp	#LR__3460
1dd30     12 13 02 F6 | 	mov	arg01, local04
1dd34     00 14 06 F6 | 	mov	arg02, #0
1dd38     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1dd3c     FD 12 02 F6 | 	mov	arg01, result1
1dd40     04 12 0E F2 | 	cmp	arg01, #4 wz
1dd44     01 FA 05 A6 |  if_e	mov	result1, #1
1dd48     64 04 90 AD |  if_e	jmp	#LR__3460
1dd4c     02 12 16 F2 | 	cmp	arg01, #2 wc
1dd50     0D FA 05 36 |  if_ae	mov	result1, #13
1dd54     58 04 90 3D |  if_ae	jmp	#LR__3460
1dd58     30 24 06 F1 | 	add	local04, #48
1dd5c     12 29 02 FB | 	rdlong	local06, local04
1dd60     04 24 06 F1 | 	add	local04, #4
1dd64     12 13 02 F6 | 	mov	arg01, local04
1dd68     34 24 86 F1 | 	sub	local04, #52
1dd6c     0B 12 06 F1 | 	add	arg01, #11
1dd70                 | ' {
1dd70                 | ' 
1dd70                 | ' 	return *((WORD*)ptr);
1dd70     09 FB E1 FA | 	rdword	result1, arg01
1dd74     01 00 00 FF 
1dd78     00 FA 0D F2 | 	cmp	result1, ##512 wz
1dd7c     0D FA 05 56 |  if_ne	mov	result1, #13
1dd80     2C 04 90 5D |  if_ne	jmp	#LR__3460
1dd84     34 24 06 F1 | 	add	local04, #52
1dd88     12 13 02 F6 | 	mov	arg01, local04
1dd8c     34 24 86 F1 | 	sub	local04, #52
1dd90     16 12 06 F1 | 	add	arg01, #22
1dd94                 | ' {
1dd94                 | ' 
1dd94                 | ' 	return *((WORD*)ptr);
1dd94     09 FB E1 FA | 	rdword	result1, arg01
1dd98     FD 2A 0A F6 | 	mov	local07, result1 wz
1dd9c     18 00 90 5D |  if_ne	jmp	#LR__3452
1dda0     34 24 06 F1 | 	add	local04, #52
1dda4     12 13 02 F6 | 	mov	arg01, local04
1dda8     34 24 86 F1 | 	sub	local04, #52
1ddac     24 12 06 F1 | 	add	arg01, #36
1ddb0                 | ' {
1ddb0                 | ' 
1ddb0                 | ' 	return *((DWORD*)ptr);
1ddb0     09 FB 01 FB | 	rdlong	result1, arg01
1ddb4     FD 2A 02 F6 | 	mov	local07, result1
1ddb8                 | LR__3452
1ddb8     1C 24 06 F1 | 	add	local04, #28
1ddbc     12 2B 62 FC | 	wrlong	local07, local04
1ddc0     28 24 06 F1 | 	add	local04, #40
1ddc4     12 27 C2 FA | 	rdbyte	local05, local04
1ddc8     42 24 86 F1 | 	sub	local04, #66
1ddcc     12 27 42 FC | 	wrbyte	local05, local04
1ddd0     12 27 C2 FA | 	rdbyte	local05, local04
1ddd4     02 24 86 F1 | 	sub	local04, #2
1ddd8     01 26 0E F2 | 	cmp	local05, #1 wz
1dddc     02 24 06 51 |  if_ne	add	local04, #2
1dde0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1dde4     02 24 86 51 |  if_ne	sub	local04, #2
1dde8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1ddec     0D FA 05 56 |  if_ne	mov	result1, #13
1ddf0     BC 03 90 5D |  if_ne	jmp	#LR__3460
1ddf4     02 24 06 F1 | 	add	local04, #2
1ddf8     12 27 C2 FA | 	rdbyte	local05, local04
1ddfc     13 2B 02 FD | 	qmul	local07, local05
1de00     3F 24 06 F1 | 	add	local04, #63
1de04     12 27 C2 FA | 	rdbyte	local05, local04
1de08     37 24 86 F1 | 	sub	local04, #55
1de0c     12 27 52 FC | 	wrword	local05, local04
1de10     12 27 EA FA | 	rdword	local05, local04 wz
1de14     0A 24 86 F1 | 	sub	local04, #10
1de18     18 2A 62 FD | 	getqx	local07
1de1c     20 00 90 AD |  if_e	jmp	#LR__3453
1de20     0A 24 06 F1 | 	add	local04, #10
1de24     12 27 E2 FA | 	rdword	local05, local04
1de28     13 23 32 F9 | 	getword	local03, local05, #0
1de2c     0A 24 86 F1 | 	sub	local04, #10
1de30     13 27 32 F9 | 	getword	local05, local05, #0
1de34     01 26 86 F1 | 	sub	local05, #1
1de38     13 23 CA F7 | 	test	local03, local05 wz
1de3c     08 00 90 AD |  if_e	jmp	#LR__3454
1de40                 | LR__3453
1de40     0D FA 05 F6 | 	mov	result1, #13
1de44     68 03 90 FD | 	jmp	#LR__3460
1de48                 | LR__3454
1de48     34 24 06 F1 | 	add	local04, #52
1de4c     12 13 02 F6 | 	mov	arg01, local04
1de50     11 12 06 F1 | 	add	arg01, #17
1de54                 | ' {
1de54                 | ' 
1de54                 | ' 	return *((WORD*)ptr);
1de54     09 FB E1 FA | 	rdword	result1, arg01
1de58     2C 24 86 F1 | 	sub	local04, #44
1de5c     12 FB 51 FC | 	wrword	result1, local04
1de60     12 27 E2 FA | 	rdword	local05, local04
1de64     08 24 86 F1 | 	sub	local04, #8
1de68     13 13 52 F6 | 	abs	arg01, local05 wc
1de6c     09 13 42 F8 | 	getnib	arg01, arg01, #0
1de70     09 13 8A F6 | 	negc	arg01, arg01 wz
1de74     0D FA 05 56 |  if_ne	mov	result1, #13
1de78     34 03 90 5D |  if_ne	jmp	#LR__3460
1de7c     34 24 06 F1 | 	add	local04, #52
1de80     12 13 02 F6 | 	mov	arg01, local04
1de84     34 24 86 F1 | 	sub	local04, #52
1de88     13 12 06 F1 | 	add	arg01, #19
1de8c                 | ' {
1de8c                 | ' 
1de8c                 | ' 	return *((WORD*)ptr);
1de8c     09 FB E1 FA | 	rdword	result1, arg01
1de90     FD 2C 0A F6 | 	mov	local08, result1 wz
1de94     34 24 06 A1 |  if_e	add	local04, #52
1de98     12 13 02 A6 |  if_e	mov	arg01, local04
1de9c     34 24 86 A1 |  if_e	sub	local04, #52
1dea0     20 12 06 A1 |  if_e	add	arg01, #32
1dea4                 | ' {
1dea4                 | ' 
1dea4                 | ' 	return *((DWORD*)ptr);
1dea4     09 2D 02 AB |  if_e	rdlong	local08, arg01
1dea8     34 24 06 F1 | 	add	local04, #52
1deac     12 13 02 F6 | 	mov	arg01, local04
1deb0     34 24 86 F1 | 	sub	local04, #52
1deb4     0E 12 06 F1 | 	add	arg01, #14
1deb8                 | ' {
1deb8                 | ' 
1deb8                 | ' 	return *((WORD*)ptr);
1deb8     09 FB E1 FA | 	rdword	result1, arg01
1debc     FD 12 02 F6 | 	mov	arg01, result1
1dec0     09 27 02 F6 | 	mov	local05, arg01
1dec4     0F 26 4E F7 | 	zerox	local05, #15 wz
1dec8     0D FA 05 A6 |  if_e	mov	result1, #13
1decc     E0 02 90 AD |  if_e	jmp	#LR__3460
1ded0     09 2F 32 F9 | 	getword	local09, arg01, #0
1ded4     15 2F 02 F1 | 	add	local09, local07
1ded8     08 24 06 F1 | 	add	local04, #8
1dedc     12 27 E2 FA | 	rdword	local05, local04
1dee0     08 24 86 F1 | 	sub	local04, #8
1dee4     13 27 52 F6 | 	abs	local05, local05 wc
1dee8     04 26 46 F0 | 	shr	local05, #4
1deec     13 2F 82 F3 | 	sumc	local09, local05
1def0     17 2D 12 F2 | 	cmp	local08, local09 wc
1def4     0D FA 05 C6 |  if_b	mov	result1, #13
1def8     B4 02 90 CD |  if_b	jmp	#LR__3460
1defc     17 2D 82 F1 | 	sub	local08, local09
1df00     0A 24 06 F1 | 	add	local04, #10
1df04     12 27 E2 FA | 	rdword	local05, local04
1df08     13 2D 12 FD | 	qdiv	local08, local05
1df0c     0A 24 86 F1 | 	sub	local04, #10
1df10     18 26 62 FD | 	getqx	local05
1df14     00 26 0E F2 | 	cmp	local05, #0 wz
1df18     0D FA 05 A6 |  if_e	mov	result1, #13
1df1c     90 02 90 AD |  if_e	jmp	#LR__3460
1df20     00 30 06 F6 | 	mov	local10, #0
1df24     FF FF 07 FF 
1df28     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1df2c     03 30 06 C6 |  if_b	mov	local10, #3
1df30     7F 00 00 FF 
1df34     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1df38     02 30 06 C6 |  if_b	mov	local10, #2
1df3c     07 00 00 FF 
1df40     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1df44     01 30 06 C6 |  if_b	mov	local10, #1
1df48     00 30 0E F2 | 	cmp	local10, #0 wz
1df4c     0D FA 05 A6 |  if_e	mov	result1, #13
1df50     5C 02 90 AD |  if_e	jmp	#LR__3460
1df54     02 26 06 F1 | 	add	local05, #2
1df58     18 24 06 F1 | 	add	local04, #24
1df5c     12 27 62 FC | 	wrlong	local05, local04
1df60     08 24 06 F1 | 	add	local04, #8
1df64     12 29 62 FC | 	wrlong	local06, local04
1df68     14 27 02 F6 | 	mov	local05, local06
1df6c     09 13 32 F9 | 	getword	arg01, arg01, #0
1df70     09 27 02 F1 | 	add	local05, arg01
1df74     04 24 06 F1 | 	add	local04, #4
1df78     12 27 62 FC | 	wrlong	local05, local04
1df7c     14 27 02 F6 | 	mov	local05, local06
1df80     17 27 02 F1 | 	add	local05, local09
1df84     08 24 06 F1 | 	add	local04, #8
1df88     12 27 62 FC | 	wrlong	local05, local04
1df8c     2C 24 86 F1 | 	sub	local04, #44
1df90     03 30 0E F2 | 	cmp	local10, #3 wz
1df94     5C 00 90 5D |  if_ne	jmp	#LR__3455
1df98     34 24 06 F1 | 	add	local04, #52
1df9c     12 13 02 F6 | 	mov	arg01, local04
1dfa0     34 24 86 F1 | 	sub	local04, #52
1dfa4     2A 12 06 F1 | 	add	arg01, #42
1dfa8                 | ' {
1dfa8                 | ' 
1dfa8                 | ' 	return *((WORD*)ptr);
1dfa8     09 FB E9 FA | 	rdword	result1, arg01 wz
1dfac     0D FA 05 56 |  if_ne	mov	result1, #13
1dfb0     FC 01 90 5D |  if_ne	jmp	#LR__3460
1dfb4     08 24 06 F1 | 	add	local04, #8
1dfb8     12 27 EA FA | 	rdword	local05, local04 wz
1dfbc     08 24 86 F1 | 	sub	local04, #8
1dfc0     0D FA 05 56 |  if_ne	mov	result1, #13
1dfc4     E8 01 90 5D |  if_ne	jmp	#LR__3460
1dfc8     34 24 06 F1 | 	add	local04, #52
1dfcc     12 13 02 F6 | 	mov	arg01, local04
1dfd0     2C 12 06 F1 | 	add	arg01, #44
1dfd4                 | ' {
1dfd4                 | ' 
1dfd4                 | ' 	return *((DWORD*)ptr);
1dfd4     09 FB 01 FB | 	rdlong	result1, arg01
1dfd8     0C 24 86 F1 | 	sub	local04, #12
1dfdc     12 FB 61 FC | 	wrlong	result1, local04
1dfe0     10 24 86 F1 | 	sub	local04, #16
1dfe4     12 33 02 FB | 	rdlong	local11, local04
1dfe8     18 24 86 F1 | 	sub	local04, #24
1dfec     02 32 66 F0 | 	shl	local11, #2
1dff0     6C 00 90 FD | 	jmp	#LR__3457
1dff4                 | LR__3455
1dff4     08 24 06 F1 | 	add	local04, #8
1dff8     12 27 EA FA | 	rdword	local05, local04 wz
1dffc     08 24 86 F1 | 	sub	local04, #8
1e000     0D FA 05 A6 |  if_e	mov	result1, #13
1e004     A8 01 90 AD |  if_e	jmp	#LR__3460
1e008     24 24 06 F1 | 	add	local04, #36
1e00c     12 27 02 FB | 	rdlong	local05, local04
1e010     15 27 02 F1 | 	add	local05, local07
1e014     04 24 06 F1 | 	add	local04, #4
1e018     12 27 62 FC | 	wrlong	local05, local04
1e01c     28 24 86 F1 | 	sub	local04, #40
1e020     02 30 0E F2 | 	cmp	local10, #2 wz
1e024     18 24 06 A1 |  if_e	add	local04, #24
1e028     12 27 02 AB |  if_e	rdlong	local05, local04
1e02c     18 24 86 A1 |  if_e	sub	local04, #24
1e030     01 26 66 A0 |  if_e	shl	local05, #1
1e034     24 00 90 AD |  if_e	jmp	#LR__3456
1e038     18 24 06 F1 | 	add	local04, #24
1e03c     12 33 02 FB | 	rdlong	local11, local04
1e040     19 27 02 F6 | 	mov	local05, local11
1e044     01 26 66 F0 | 	shl	local05, #1
1e048     19 27 02 F1 | 	add	local05, local11
1e04c     01 26 46 F0 | 	shr	local05, #1
1e050     18 24 86 F1 | 	sub	local04, #24
1e054     01 32 06 F5 | 	and	local11, #1
1e058     19 27 02 F1 | 	add	local05, local11
1e05c                 | LR__3456
1e05c     13 33 02 F6 | 	mov	local11, local05
1e060                 | LR__3457
1e060     FF 33 06 F1 | 	add	local11, #511
1e064     09 32 46 F0 | 	shr	local11, #9
1e068     1C 24 06 F1 | 	add	local04, #28
1e06c     12 17 02 FB | 	rdlong	arg03, local04
1e070     1C 24 86 F1 | 	sub	local04, #28
1e074     19 17 12 F2 | 	cmp	arg03, local11 wc
1e078     0D FA 05 C6 |  if_b	mov	result1, #13
1e07c     30 01 90 CD |  if_b	jmp	#LR__3460
1e080     14 24 06 F1 | 	add	local04, #20
1e084     FF FF FF FF 
1e088     12 FF 6B FC | 	wrlong	##-1, local04
1e08c     04 24 86 F1 | 	sub	local04, #4
1e090     FF FF FF FF 
1e094     12 FF 6B FC | 	wrlong	##-1, local04
1e098     0C 24 86 F1 | 	sub	local04, #12
1e09c     12 01 49 FC | 	wrbyte	#128, local04
1e0a0     04 24 86 F1 | 	sub	local04, #4
1e0a4     03 30 0E F2 | 	cmp	local10, #3 wz
1e0a8     D0 00 90 5D |  if_ne	jmp	#LR__3459
1e0ac     34 24 06 F1 | 	add	local04, #52
1e0b0     12 13 02 F6 | 	mov	arg01, local04
1e0b4     34 24 86 F1 | 	sub	local04, #52
1e0b8     30 12 06 F1 | 	add	arg01, #48
1e0bc                 | ' {
1e0bc                 | ' 
1e0bc                 | ' 	return *((WORD*)ptr);
1e0bc     09 FB E1 FA | 	rdword	result1, arg01
1e0c0     FD 26 32 F9 | 	getword	local05, result1, #0
1e0c4     01 26 0E F2 | 	cmp	local05, #1 wz
1e0c8     B0 00 90 5D |  if_ne	jmp	#LR__3459
1e0cc     01 28 06 F1 | 	add	local06, #1
1e0d0     12 13 02 F6 | 	mov	arg01, local04
1e0d4     14 15 02 F6 | 	mov	arg02, local06
1e0d8     CC CD BF FD | 	call	#_fatfs_cc_move_window
1e0dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e0e0     98 00 90 5D |  if_ne	jmp	#LR__3459
1e0e4     04 24 06 F1 | 	add	local04, #4
1e0e8     12 01 48 FC | 	wrbyte	#0, local04
1e0ec     30 24 06 F1 | 	add	local04, #48
1e0f0     12 13 02 F6 | 	mov	arg01, local04
1e0f4     34 24 86 F1 | 	sub	local04, #52
1e0f8     FE 13 06 F1 | 	add	arg01, #510
1e0fc                 | ' {
1e0fc                 | ' 
1e0fc                 | ' 	return *((WORD*)ptr);
1e0fc     09 FB E1 FA | 	rdword	result1, arg01
1e100     FD 26 32 F9 | 	getword	local05, result1, #0
1e104     55 00 00 FF 
1e108     55 26 0E F2 | 	cmp	local05, ##43605 wz
1e10c     34 24 06 A1 |  if_e	add	local04, #52
1e110     12 13 02 A6 |  if_e	mov	arg01, local04
1e114     34 24 86 A1 |  if_e	sub	local04, #52
1e118                 | ' {
1e118                 | ' 
1e118                 | ' 	return *((DWORD*)ptr);
1e118     09 FB 01 AB |  if_e	rdlong	result1, arg01
1e11c     A9 B0 20 AF 
1e120     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1e124     54 00 90 5D |  if_ne	jmp	#LR__3458
1e128     34 24 06 F1 | 	add	local04, #52
1e12c     12 13 02 F6 | 	mov	arg01, local04
1e130     34 24 86 F1 | 	sub	local04, #52
1e134     E4 13 06 F1 | 	add	arg01, #484
1e138                 | ' {
1e138                 | ' 
1e138                 | ' 	return *((DWORD*)ptr);
1e138     09 FB 01 FB | 	rdlong	result1, arg01
1e13c     B9 A0 30 FF 
1e140     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1e144     34 00 90 5D |  if_ne	jmp	#LR__3458
1e148     34 24 06 F1 | 	add	local04, #52
1e14c     12 13 02 F6 | 	mov	arg01, local04
1e150     E8 13 06 F1 | 	add	arg01, #488
1e154                 | ' {
1e154                 | ' 
1e154                 | ' 	return *((DWORD*)ptr);
1e154     09 FB 01 FB | 	rdlong	result1, arg01
1e158     20 24 86 F1 | 	sub	local04, #32
1e15c     12 FB 61 FC | 	wrlong	result1, local04
1e160     20 24 06 F1 | 	add	local04, #32
1e164     12 13 02 F6 | 	mov	arg01, local04
1e168     EC 13 06 F1 | 	add	arg01, #492
1e16c                 | ' {
1e16c                 | ' 
1e16c                 | ' 	return *((DWORD*)ptr);
1e16c     09 FB 01 FB | 	rdlong	result1, arg01
1e170     24 24 86 F1 | 	sub	local04, #36
1e174     12 FB 61 FC | 	wrlong	result1, local04
1e178     10 24 86 F1 | 	sub	local04, #16
1e17c                 | LR__3458
1e17c                 | LR__3459
1e17c     12 31 42 FC | 	wrbyte	local10, local04
1e180     04 E4 05 F1 | 	add	objptr, #4
1e184     F2 26 E2 FA | 	rdword	local05, objptr
1e188     01 26 06 F1 | 	add	local05, #1
1e18c     F2 26 52 FC | 	wrword	local05, objptr
1e190     F2 32 E2 FA | 	rdword	local11, objptr
1e194     06 24 06 F1 | 	add	local04, #6
1e198     12 33 52 FC | 	wrword	local11, local04
1e19c     04 E4 05 F1 | 	add	objptr, #4
1e1a0     06 24 06 F1 | 	add	local04, #6
1e1a4     12 E5 61 FC | 	wrlong	objptr, local04
1e1a8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1e1a8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1e1a8                 | ' 			{
1e1a8                 | ' 
1e1a8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1e1a8                 | ' 
1e1a8                 | ' 
1e1a8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1e1a8                 | ' 
1e1a8                 | ' 			}
1e1a8                 | ' 		}
1e1a8                 | ' 
1e1a8                 | ' 
1e1a8                 | ' 	}
1e1a8                 | ' 
1e1a8                 | ' 	fs->fs_type = (BYTE)fmt;
1e1a8                 | ' 	fs->id = ++Fsid;
1e1a8                 | ' 
1e1a8                 | ' 	fs->lfnbuf = LfnBuf;
1e1a8                 | ' #line 3567 "ff.c"
1e1a8                 | ' 	return FR_OK;
1e1a8     00 FA 05 F6 | 	mov	result1, #0
1e1ac     08 E4 85 F1 | 	sub	objptr, #8
1e1b0                 | LR__3460
1e1b0     A7 F0 03 F6 | 	mov	ptra, fp
1e1b4     B2 00 A0 FD | 	call	#popregs_
1e1b8                 | _fatfs_cc_mount_volume_ret
1e1b8     2D 00 64 FD | 	ret
1e1bc                 | 
1e1bc                 | _fatfs_cc_validate
1e1bc     09 01 0A F6 | 	mov	_var01, arg01 wz
1e1c0     09 02 06 F6 | 	mov	_var02, #9
1e1c4     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1e1c8     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1e1cc     50 00 90 AD |  if_e	jmp	#LR__3470
1e1d0     04 00 06 F1 | 	add	_var01, #4
1e1d4     00 07 E2 FA | 	rdword	_var04, _var01
1e1d8     04 00 86 F1 | 	sub	_var01, #4
1e1dc     00 13 02 FB | 	rdlong	arg01, _var01
1e1e0     06 12 06 F1 | 	add	arg01, #6
1e1e4     09 FB E1 FA | 	rdword	result1, arg01
1e1e8     FD 06 0A F2 | 	cmp	_var04, result1 wz
1e1ec     30 00 90 5D |  if_ne	jmp	#LR__3470
1e1f0     00 07 02 FB | 	rdlong	_var04, _var01
1e1f4     01 06 06 F1 | 	add	_var04, #1
1e1f8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1e1fc     01 FA 05 56 |  if_ne	mov	result1, #1
1e200                 | ' 
1e200                 | ' 	return Stat;
1e200     01 00 00 AF 
1e204     20 E4 05 A1 |  if_e	add	objptr, ##544
1e208     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1e20c     01 00 00 AF 
1e210     20 E4 85 A1 |  if_e	sub	objptr, ##544
1e214     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1e218     01 04 CE F7 | 	test	_var03, #1 wz
1e21c     00 02 06 A6 |  if_e	mov	_var02, #0
1e220                 | LR__3470
1e220     00 02 0E F2 | 	cmp	_var02, #0 wz
1e224     00 05 02 AB |  if_e	rdlong	_var03, _var01
1e228     00 04 06 56 |  if_ne	mov	_var03, #0
1e22c     0A 05 62 FC | 	wrlong	_var03, arg02
1e230                 | ' 			res = FR_OK;
1e230                 | ' 		}
1e230                 | ' 
1e230                 | ' 	}
1e230                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1e230                 | ' 	return res;
1e230     01 FB 01 F6 | 	mov	result1, _var02
1e234                 | _fatfs_cc_validate_ret
1e234     2D 00 64 FD | 	ret
1e238                 | 
1e238                 | _fatfs_cc_f_mount
1e238     01 4A 05 F6 | 	mov	COUNT_, #1
1e23c     A8 00 A0 FD | 	call	#pushregs_
1e240     20 F0 07 F1 | 	add	ptra, #32
1e244     04 4E 05 F1 | 	add	fp, #4
1e248     A7 12 62 FC | 	wrlong	arg01, fp
1e24c     04 4E 05 F1 | 	add	fp, #4
1e250     A7 14 62 FC | 	wrlong	arg02, fp
1e254     04 4E 05 F1 | 	add	fp, #4
1e258     A7 16 42 FC | 	wrbyte	arg03, fp
1e25c     04 4E 85 F1 | 	sub	fp, #4
1e260     A7 16 02 FB | 	rdlong	arg03, fp
1e264     14 4E 05 F1 | 	add	fp, #20
1e268     A7 16 62 FC | 	wrlong	arg03, fp
1e26c     A7 12 02 F6 | 	mov	arg01, fp
1e270     1C 4E 85 F1 | 	sub	fp, #28
1e274     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1e278     14 4E 05 F1 | 	add	fp, #20
1e27c     A7 FA 61 FC | 	wrlong	result1, fp
1e280     14 4E 85 F1 | 	sub	fp, #20
1e284     00 FA 55 F2 | 	cmps	result1, #0 wc
1e288     0B FA 05 C6 |  if_b	mov	result1, #11
1e28c     C0 00 90 CD |  if_b	jmp	#LR__3481
1e290     14 4E 05 F1 | 	add	fp, #20
1e294     A7 16 02 FB | 	rdlong	arg03, fp
1e298     02 16 66 F0 | 	shl	arg03, #2
1e29c     F2 16 02 F1 | 	add	arg03, objptr
1e2a0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1e2a4     04 4E 85 F1 | 	sub	fp, #4
1e2a8     A7 16 62 FC | 	wrlong	arg03, fp
1e2ac     10 4E 85 F1 | 	sub	fp, #16
1e2b0     28 00 90 AD |  if_e	jmp	#LR__3480
1e2b4     10 4E 05 F1 | 	add	fp, #16
1e2b8     A7 16 02 FB | 	rdlong	arg03, fp
1e2bc     10 4E 85 F1 | 	sub	fp, #16
1e2c0     01 16 06 F1 | 	add	arg03, #1
1e2c4     0B 13 C2 FA | 	rdbyte	arg01, arg03
1e2c8     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1e2cc     10 4E 05 F1 | 	add	fp, #16
1e2d0     A7 16 02 FB | 	rdlong	arg03, fp
1e2d4     10 4E 85 F1 | 	sub	fp, #16
1e2d8     0B 01 48 FC | 	wrbyte	#0, arg03
1e2dc                 | LR__3480
1e2dc     04 4E 05 F1 | 	add	fp, #4
1e2e0     A7 1E 0A FB | 	rdlong	local01, fp wz
1e2e4     04 4E 85 F1 | 	sub	fp, #4
1e2e8     04 4E 05 51 |  if_ne	add	fp, #4
1e2ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e2f0     04 4E 85 51 |  if_ne	sub	fp, #4
1e2f4     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1e2f8     14 4E 05 F1 | 	add	fp, #20
1e2fc     A7 1E 02 FB | 	rdlong	local01, fp
1e300     02 1E 66 F0 | 	shl	local01, #2
1e304     F2 1E 02 F1 | 	add	local01, objptr
1e308     10 4E 85 F1 | 	sub	fp, #16
1e30c     A7 16 02 FB | 	rdlong	arg03, fp
1e310     0F 17 62 FC | 	wrlong	arg03, local01
1e314     08 4E 05 F1 | 	add	fp, #8
1e318     A7 1E CA FA | 	rdbyte	local01, fp wz
1e31c     0C 4E 85 F1 | 	sub	fp, #12
1e320     00 FA 05 A6 |  if_e	mov	result1, #0
1e324     28 00 90 AD |  if_e	jmp	#LR__3481
1e328     08 4E 05 F1 | 	add	fp, #8
1e32c     A7 12 02 F6 | 	mov	arg01, fp
1e330     04 4E 85 F1 | 	sub	fp, #4
1e334     A7 14 02 F6 | 	mov	arg02, fp
1e338     04 4E 85 F1 | 	sub	fp, #4
1e33c     00 16 06 F6 | 	mov	arg03, #0
1e340     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1e344     18 4E 05 F1 | 	add	fp, #24
1e348     A7 FA 61 FC | 	wrlong	result1, fp
1e34c                 | ' 
1e34c                 | ' 	res = mount_volume(&path, &fs, 0);
1e34c                 | ' 	return res ;
1e34c     18 4E 85 F1 | 	sub	fp, #24
1e350                 | LR__3481
1e350     A7 F0 03 F6 | 	mov	ptra, fp
1e354     B2 00 A0 FD | 	call	#popregs_
1e358                 | _fatfs_cc_f_mount_ret
1e358     2D 00 64 FD | 	ret
1e35c                 | 
1e35c                 | _fatfs_cc_f_open
1e35c     02 4A 05 F6 | 	mov	COUNT_, #2
1e360     A8 00 A0 FD | 	call	#pushregs_
1e364     60 F0 07 F1 | 	add	ptra, #96
1e368     04 4E 05 F1 | 	add	fp, #4
1e36c     A7 12 62 FC | 	wrlong	arg01, fp
1e370     04 4E 05 F1 | 	add	fp, #4
1e374     A7 14 62 FC | 	wrlong	arg02, fp
1e378     04 4E 05 F1 | 	add	fp, #4
1e37c     A7 16 42 FC | 	wrbyte	arg03, fp
1e380     08 4E 85 F1 | 	sub	fp, #8
1e384     A7 18 0A FB | 	rdlong	arg04, fp wz
1e388     04 4E 85 F1 | 	sub	fp, #4
1e38c     09 FA 05 A6 |  if_e	mov	result1, #9
1e390     98 06 90 AD |  if_e	jmp	#LR__3507
1e394     0C 4E 05 F1 | 	add	fp, #12
1e398     A7 18 C2 FA | 	rdbyte	arg04, fp
1e39c     3F 18 06 F5 | 	and	arg04, #63
1e3a0     A7 18 42 FC | 	wrbyte	arg04, fp
1e3a4     04 4E 85 F1 | 	sub	fp, #4
1e3a8     A7 12 02 F6 | 	mov	arg01, fp
1e3ac     3C 4E 05 F1 | 	add	fp, #60
1e3b0     A7 14 02 F6 | 	mov	arg02, fp
1e3b4     38 4E 85 F1 | 	sub	fp, #56
1e3b8     A7 16 C2 FA | 	rdbyte	arg03, fp
1e3bc     0C 4E 85 F1 | 	sub	fp, #12
1e3c0     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1e3c4     10 4E 05 F1 | 	add	fp, #16
1e3c8     A7 FA 61 FC | 	wrlong	result1, fp
1e3cc     10 4E 85 F1 | 	sub	fp, #16
1e3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e3d4     2C 06 90 5D |  if_ne	jmp	#LR__3506
1e3d8     44 4E 05 F1 | 	add	fp, #68
1e3dc     A7 18 02 FB | 	rdlong	arg04, fp
1e3e0     30 4E 85 F1 | 	sub	fp, #48
1e3e4     A7 18 62 FC | 	wrlong	arg04, fp
1e3e8     A7 12 02 F6 | 	mov	arg01, fp
1e3ec     0C 4E 85 F1 | 	sub	fp, #12
1e3f0     A7 1E 02 FB | 	rdlong	local01, fp
1e3f4     08 4E 85 F1 | 	sub	fp, #8
1e3f8     0F 15 02 F6 | 	mov	arg02, local01
1e3fc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
1e400     10 4E 05 F1 | 	add	fp, #16
1e404     A7 FA 61 FC | 	wrlong	result1, fp
1e408     10 4E 85 F1 | 	sub	fp, #16
1e40c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e410     1C 00 90 5D |  if_ne	jmp	#LR__3490
1e414     3F 4E 05 F1 | 	add	fp, #63
1e418     A7 18 C2 FA | 	rdbyte	arg04, fp
1e41c     3F 4E 85 F1 | 	sub	fp, #63
1e420     80 18 CE F7 | 	test	arg04, #128 wz
1e424     10 4E 05 51 |  if_ne	add	fp, #16
1e428     A7 0C 68 5C |  if_ne	wrlong	#6, fp
1e42c     10 4E 85 51 |  if_ne	sub	fp, #16
1e430                 | LR__3490
1e430     0C 4E 05 F1 | 	add	fp, #12
1e434     A7 18 C2 FA | 	rdbyte	arg04, fp
1e438     0C 4E 85 F1 | 	sub	fp, #12
1e43c     1C 18 CE F7 | 	test	arg04, #28 wz
1e440     F0 01 90 AD |  if_e	jmp	#LR__3495
1e444     10 4E 05 F1 | 	add	fp, #16
1e448     A7 1E 0A FB | 	rdlong	local01, fp wz
1e44c     10 4E 85 F1 | 	sub	fp, #16
1e450     48 00 90 AD |  if_e	jmp	#LR__3492
1e454     10 4E 05 F1 | 	add	fp, #16
1e458     A7 18 02 FB | 	rdlong	arg04, fp
1e45c     10 4E 85 F1 | 	sub	fp, #16
1e460     04 18 0E F2 | 	cmp	arg04, #4 wz
1e464     1C 00 90 5D |  if_ne	jmp	#LR__3491
1e468     14 4E 05 F1 | 	add	fp, #20
1e46c     A7 12 02 F6 | 	mov	arg01, fp
1e470     14 4E 85 F1 | 	sub	fp, #20
1e474     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
1e478     10 4E 05 F1 | 	add	fp, #16
1e47c     A7 FA 61 FC | 	wrlong	result1, fp
1e480     10 4E 85 F1 | 	sub	fp, #16
1e484                 | LR__3491
1e484     0C 4E 05 F1 | 	add	fp, #12
1e488     A7 1E C2 FA | 	rdbyte	local01, fp
1e48c     08 1E 46 F5 | 	or	local01, #8
1e490     A7 1E 42 FC | 	wrbyte	local01, fp
1e494     0C 4E 85 F1 | 	sub	fp, #12
1e498     3C 00 90 FD | 	jmp	#LR__3494
1e49c                 | LR__3492
1e49c     1A 4E 05 F1 | 	add	fp, #26
1e4a0     A7 1E C2 FA | 	rdbyte	local01, fp
1e4a4     1A 4E 85 F1 | 	sub	fp, #26
1e4a8     11 1E CE F7 | 	test	local01, #17 wz
1e4ac     10 4E 05 51 |  if_ne	add	fp, #16
1e4b0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1e4b4     10 4E 85 51 |  if_ne	sub	fp, #16
1e4b8     1C 00 90 5D |  if_ne	jmp	#LR__3493
1e4bc     0C 4E 05 F1 | 	add	fp, #12
1e4c0     A7 1E C2 FA | 	rdbyte	local01, fp
1e4c4     0C 4E 85 F1 | 	sub	fp, #12
1e4c8     04 1E CE F7 | 	test	local01, #4 wz
1e4cc     10 4E 05 51 |  if_ne	add	fp, #16
1e4d0     A7 10 68 5C |  if_ne	wrlong	#8, fp
1e4d4     10 4E 85 51 |  if_ne	sub	fp, #16
1e4d8                 | LR__3493
1e4d8                 | LR__3494
1e4d8     10 4E 05 F1 | 	add	fp, #16
1e4dc     A7 1E 0A FB | 	rdlong	local01, fp wz
1e4e0     10 4E 85 F1 | 	sub	fp, #16
1e4e4     A8 01 90 5D |  if_ne	jmp	#LR__3498
1e4e8     0C 4E 05 F1 | 	add	fp, #12
1e4ec     A7 1E C2 FA | 	rdbyte	local01, fp
1e4f0     0C 4E 85 F1 | 	sub	fp, #12
1e4f4     08 1E CE F7 | 	test	local01, #8 wz
1e4f8     94 01 90 AD |  if_e	jmp	#LR__3498
1e4fc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
1e500     54 4E 05 F1 | 	add	fp, #84
1e504     A7 FA 61 FC | 	wrlong	result1, fp
1e508     24 4E 85 F1 | 	sub	fp, #36
1e50c     A7 12 02 FB | 	rdlong	arg01, fp
1e510     0E 12 06 F1 | 	add	arg01, #14
1e514     09 FB 61 FC | 	wrlong	result1, arg01
1e518     A7 12 02 FB | 	rdlong	arg01, fp
1e51c     16 12 06 F1 | 	add	arg01, #22
1e520     24 4E 05 F1 | 	add	fp, #36
1e524     A7 14 02 FB | 	rdlong	arg02, fp
1e528     09 15 62 FC | 	wrlong	arg02, arg01
1e52c     10 4E 85 F1 | 	sub	fp, #16
1e530     A7 12 02 FB | 	rdlong	arg01, fp
1e534     14 4E 85 F1 | 	sub	fp, #20
1e538     A7 14 02 FB | 	rdlong	arg02, fp
1e53c     30 4E 85 F1 | 	sub	fp, #48
1e540     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
1e544     48 4E 05 F1 | 	add	fp, #72
1e548     A7 FA 61 FC | 	wrlong	result1, fp
1e54c     18 4E 85 F1 | 	sub	fp, #24
1e550     A7 1E 02 FB | 	rdlong	local01, fp
1e554     0B 1E 06 F1 | 	add	local01, #11
1e558     0F 41 48 FC | 	wrbyte	#32, local01
1e55c     14 4E 05 F1 | 	add	fp, #20
1e560     A7 12 02 FB | 	rdlong	arg01, fp
1e564     14 4E 85 F1 | 	sub	fp, #20
1e568     A7 14 02 FB | 	rdlong	arg02, fp
1e56c     30 4E 85 F1 | 	sub	fp, #48
1e570     00 16 06 F6 | 	mov	arg03, #0
1e574     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
1e578     30 4E 05 F1 | 	add	fp, #48
1e57c     A7 12 02 FB | 	rdlong	arg01, fp
1e580     1C 12 06 F1 | 	add	arg01, #28
1e584     09 01 68 FC | 	wrlong	#0, arg01
1e588     14 4E 05 F1 | 	add	fp, #20
1e58c     A7 1E 02 FB | 	rdlong	local01, fp
1e590     03 1E 06 F1 | 	add	local01, #3
1e594     0F 03 48 FC | 	wrbyte	#1, local01
1e598     04 4E 05 F1 | 	add	fp, #4
1e59c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e5a0     48 4E 85 F1 | 	sub	fp, #72
1e5a4     E8 00 90 AD |  if_e	jmp	#LR__3498
1e5a8     44 4E 05 F1 | 	add	fp, #68
1e5ac     A7 1E 02 FB | 	rdlong	local01, fp
1e5b0     30 1E 06 F1 | 	add	local01, #48
1e5b4     0F 1F 02 FB | 	rdlong	local01, local01
1e5b8     14 4E 05 F1 | 	add	fp, #20
1e5bc     A7 1E 62 FC | 	wrlong	local01, fp
1e5c0     44 4E 85 F1 | 	sub	fp, #68
1e5c4     A7 12 02 F6 | 	mov	arg01, fp
1e5c8     34 4E 05 F1 | 	add	fp, #52
1e5cc     A7 14 02 FB | 	rdlong	arg02, fp
1e5d0     48 4E 85 F1 | 	sub	fp, #72
1e5d4     00 16 06 F6 | 	mov	arg03, #0
1e5d8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
1e5dc     10 4E 05 F1 | 	add	fp, #16
1e5e0     A7 FA 61 FC | 	wrlong	result1, fp
1e5e4     10 4E 85 F1 | 	sub	fp, #16
1e5e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e5ec     A0 00 90 5D |  if_ne	jmp	#LR__3498
1e5f0     44 4E 05 F1 | 	add	fp, #68
1e5f4     A7 12 02 FB | 	rdlong	arg01, fp
1e5f8     14 4E 05 F1 | 	add	fp, #20
1e5fc     A7 14 02 FB | 	rdlong	arg02, fp
1e600     58 4E 85 F1 | 	sub	fp, #88
1e604     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
1e608     10 4E 05 F1 | 	add	fp, #16
1e60c     A7 FA 61 FC | 	wrlong	result1, fp
1e610     34 4E 05 F1 | 	add	fp, #52
1e614     A7 18 02 FB | 	rdlong	arg04, fp
1e618     04 4E 05 F1 | 	add	fp, #4
1e61c     A7 1E 02 FB | 	rdlong	local01, fp
1e620     48 4E 85 F1 | 	sub	fp, #72
1e624     01 1E 86 F1 | 	sub	local01, #1
1e628     10 18 06 F1 | 	add	arg04, #16
1e62c     0C 1F 62 FC | 	wrlong	local01, arg04
1e630     5C 00 90 FD | 	jmp	#LR__3498
1e634                 | LR__3495
1e634     10 4E 05 F1 | 	add	fp, #16
1e638     A7 18 0A FB | 	rdlong	arg04, fp wz
1e63c     10 4E 85 F1 | 	sub	fp, #16
1e640     4C 00 90 5D |  if_ne	jmp	#LR__3497
1e644     1A 4E 05 F1 | 	add	fp, #26
1e648     A7 18 C2 FA | 	rdbyte	arg04, fp
1e64c     1A 4E 85 F1 | 	sub	fp, #26
1e650     10 18 CE F7 | 	test	arg04, #16 wz
1e654     10 4E 05 51 |  if_ne	add	fp, #16
1e658     A7 08 68 5C |  if_ne	wrlong	#4, fp
1e65c     10 4E 85 51 |  if_ne	sub	fp, #16
1e660     2C 00 90 5D |  if_ne	jmp	#LR__3496
1e664     0C 4E 05 F1 | 	add	fp, #12
1e668     A7 18 C2 FA | 	rdbyte	arg04, fp
1e66c     0C 4E 85 F1 | 	sub	fp, #12
1e670     02 18 CE F7 | 	test	arg04, #2 wz
1e674     1A 4E 05 51 |  if_ne	add	fp, #26
1e678     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
1e67c     1A 4E 85 51 |  if_ne	sub	fp, #26
1e680     01 1E CE 57 |  if_ne	test	local01, #1 wz
1e684     10 4E 05 51 |  if_ne	add	fp, #16
1e688     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1e68c     10 4E 85 51 |  if_ne	sub	fp, #16
1e690                 | LR__3496
1e690                 | LR__3497
1e690                 | LR__3498
1e690     10 4E 05 F1 | 	add	fp, #16
1e694     A7 1E 0A FB | 	rdlong	local01, fp wz
1e698     10 4E 85 F1 | 	sub	fp, #16
1e69c     60 00 90 5D |  if_ne	jmp	#LR__3499
1e6a0     0C 4E 05 F1 | 	add	fp, #12
1e6a4     A7 20 C2 FA | 	rdbyte	local02, fp
1e6a8     0C 4E 85 F1 | 	sub	fp, #12
1e6ac     08 20 CE F7 | 	test	local02, #8 wz
1e6b0     0C 4E 05 51 |  if_ne	add	fp, #12
1e6b4     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
1e6b8     40 20 46 55 |  if_ne	or	local02, #64
1e6bc     A7 20 42 5C |  if_ne	wrbyte	local02, fp
1e6c0     0C 4E 85 51 |  if_ne	sub	fp, #12
1e6c4     04 4E 05 F1 | 	add	fp, #4
1e6c8     A7 20 02 FB | 	rdlong	local02, fp
1e6cc     40 4E 05 F1 | 	add	fp, #64
1e6d0     A7 1E 02 FB | 	rdlong	local01, fp
1e6d4     30 1E 06 F1 | 	add	local01, #48
1e6d8     0F 1F 02 FB | 	rdlong	local01, local01
1e6dc     20 20 06 F1 | 	add	local02, #32
1e6e0     10 1F 62 FC | 	wrlong	local01, local02
1e6e4     40 4E 85 F1 | 	sub	fp, #64
1e6e8     A7 20 02 FB | 	rdlong	local02, fp
1e6ec     2C 4E 05 F1 | 	add	fp, #44
1e6f0     A7 1E 02 FB | 	rdlong	local01, fp
1e6f4     30 4E 85 F1 | 	sub	fp, #48
1e6f8     24 20 06 F1 | 	add	local02, #36
1e6fc     10 1F 62 FC | 	wrlong	local01, local02
1e700                 | LR__3499
1e700     10 4E 05 F1 | 	add	fp, #16
1e704     A7 20 0A FB | 	rdlong	local02, fp wz
1e708     10 4E 85 F1 | 	sub	fp, #16
1e70c     F4 02 90 5D |  if_ne	jmp	#LR__3505
1e710     04 4E 05 F1 | 	add	fp, #4
1e714     A7 20 02 FB | 	rdlong	local02, fp
1e718     40 4E 05 F1 | 	add	fp, #64
1e71c     A7 12 02 FB | 	rdlong	arg01, fp
1e720     14 4E 85 F1 | 	sub	fp, #20
1e724     A7 14 02 FB | 	rdlong	arg02, fp
1e728     30 4E 85 F1 | 	sub	fp, #48
1e72c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
1e730     08 20 06 F1 | 	add	local02, #8
1e734     10 FB 61 FC | 	wrlong	result1, local02
1e738     04 4E 05 F1 | 	add	fp, #4
1e73c     A7 20 02 FB | 	rdlong	local02, fp
1e740     2C 4E 05 F1 | 	add	fp, #44
1e744     A7 12 02 FB | 	rdlong	arg01, fp
1e748     1C 12 06 F1 | 	add	arg01, #28
1e74c                 | ' {
1e74c                 | ' 
1e74c                 | ' 	return *((DWORD*)ptr);
1e74c     09 FB 01 FB | 	rdlong	result1, arg01
1e750     0C 20 06 F1 | 	add	local02, #12
1e754     10 FB 61 FC | 	wrlong	result1, local02
1e758     2C 4E 85 F1 | 	sub	fp, #44
1e75c     A7 20 02 FB | 	rdlong	local02, fp
1e760     40 4E 05 F1 | 	add	fp, #64
1e764     A7 1E 02 FB | 	rdlong	local01, fp
1e768     10 1F 62 FC | 	wrlong	local01, local02
1e76c     40 4E 85 F1 | 	sub	fp, #64
1e770     A7 20 02 FB | 	rdlong	local02, fp
1e774     40 4E 05 F1 | 	add	fp, #64
1e778     A7 1E 02 FB | 	rdlong	local01, fp
1e77c     06 1E 06 F1 | 	add	local01, #6
1e780     0F 1F E2 FA | 	rdword	local01, local01
1e784     04 20 06 F1 | 	add	local02, #4
1e788     10 1F 52 FC | 	wrword	local01, local02
1e78c     40 4E 85 F1 | 	sub	fp, #64
1e790     A7 20 02 FB | 	rdlong	local02, fp
1e794     08 4E 05 F1 | 	add	fp, #8
1e798     A7 1E C2 FA | 	rdbyte	local01, fp
1e79c     10 20 06 F1 | 	add	local02, #16
1e7a0     10 1F 42 FC | 	wrbyte	local01, local02
1e7a4     08 4E 85 F1 | 	sub	fp, #8
1e7a8     A7 20 02 FB | 	rdlong	local02, fp
1e7ac     11 20 06 F1 | 	add	local02, #17
1e7b0     10 01 48 FC | 	wrbyte	#0, local02
1e7b4     A7 20 02 FB | 	rdlong	local02, fp
1e7b8     1C 20 06 F1 | 	add	local02, #28
1e7bc     10 01 68 FC | 	wrlong	#0, local02
1e7c0     A7 20 02 FB | 	rdlong	local02, fp
1e7c4     14 20 06 F1 | 	add	local02, #20
1e7c8     10 01 68 FC | 	wrlong	#0, local02
1e7cc     A7 12 02 FB | 	rdlong	arg01, fp
1e7d0     04 4E 85 F1 | 	sub	fp, #4
1e7d4     28 12 06 F1 | 	add	arg01, #40
1e7d8     00 14 06 F6 | 	mov	arg02, #0
1e7dc     09 16 C6 F9 | 	decod	arg03, #9
1e7e0     98 00 A0 FD | 	call	#\builtin_bytefill_
1e7e4     0C 4E 05 F1 | 	add	fp, #12
1e7e8     A7 20 C2 FA | 	rdbyte	local02, fp
1e7ec     0C 4E 85 F1 | 	sub	fp, #12
1e7f0     20 20 CE F7 | 	test	local02, #32 wz
1e7f4     0C 02 90 AD |  if_e	jmp	#LR__3504
1e7f8     04 4E 05 F1 | 	add	fp, #4
1e7fc     A7 1E 02 FB | 	rdlong	local01, fp
1e800     04 4E 85 F1 | 	sub	fp, #4
1e804     0C 1E 06 F1 | 	add	local01, #12
1e808     0F 21 02 FB | 	rdlong	local02, local01
1e80c     01 20 16 F2 | 	cmp	local02, #1 wc
1e810     F0 01 90 CD |  if_b	jmp	#LR__3504
1e814     04 4E 05 F1 | 	add	fp, #4
1e818     A7 1E 02 FB | 	rdlong	local01, fp
1e81c     0F 21 02 F6 | 	mov	local02, local01
1e820     0C 1E 06 F1 | 	add	local01, #12
1e824     0F 1F 02 FB | 	rdlong	local01, local01
1e828     14 20 06 F1 | 	add	local02, #20
1e82c     10 1F 62 FC | 	wrlong	local01, local02
1e830     40 4E 05 F1 | 	add	fp, #64
1e834     A7 20 02 FB | 	rdlong	local02, fp
1e838     0A 20 06 F1 | 	add	local02, #10
1e83c     10 21 E2 FA | 	rdword	local02, local02
1e840     09 20 66 F0 | 	shl	local02, #9
1e844     08 4E 05 F1 | 	add	fp, #8
1e848     A7 20 62 FC | 	wrlong	local02, fp
1e84c     48 4E 85 F1 | 	sub	fp, #72
1e850     A7 20 02 FB | 	rdlong	local02, fp
1e854     08 20 06 F1 | 	add	local02, #8
1e858     10 1F 02 FB | 	rdlong	local01, local02
1e85c     4C 4E 05 F1 | 	add	fp, #76
1e860     A7 1E 62 FC | 	wrlong	local01, fp
1e864                 | ' 				fp->fptr = fp->obj.objsize;
1e864                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
1e864                 | ' 				clst = fp->obj.sclust;
1e864                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1e864     4C 4E 85 F1 | 	sub	fp, #76
1e868     A7 20 02 FB | 	rdlong	local02, fp
1e86c     0C 20 06 F1 | 	add	local02, #12
1e870     10 1F 02 FB | 	rdlong	local01, local02
1e874     58 4E 05 F1 | 	add	fp, #88
1e878     A7 1E 62 FC | 	wrlong	local01, fp
1e87c     5C 4E 85 F1 | 	sub	fp, #92
1e880                 | LR__3500
1e880     10 4E 05 F1 | 	add	fp, #16
1e884     A7 20 0A FB | 	rdlong	local02, fp wz
1e888     10 4E 85 F1 | 	sub	fp, #16
1e88c     94 00 90 5D |  if_ne	jmp	#LR__3501
1e890     5C 4E 05 F1 | 	add	fp, #92
1e894     A7 20 02 FB | 	rdlong	local02, fp
1e898     10 4E 85 F1 | 	sub	fp, #16
1e89c     A7 1E 02 FB | 	rdlong	local01, fp
1e8a0     4C 4E 85 F1 | 	sub	fp, #76
1e8a4     0F 21 1A F2 | 	cmp	local02, local01 wcz
1e8a8     78 00 90 ED |  if_be	jmp	#LR__3501
1e8ac     04 4E 05 F1 | 	add	fp, #4
1e8b0     A7 12 02 FB | 	rdlong	arg01, fp
1e8b4     4C 4E 05 F1 | 	add	fp, #76
1e8b8     A7 14 02 FB | 	rdlong	arg02, fp
1e8bc     50 4E 85 F1 | 	sub	fp, #80
1e8c0     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
1e8c4     50 4E 05 F1 | 	add	fp, #80
1e8c8     A7 FA 61 FC | 	wrlong	result1, fp
1e8cc     50 4E 85 F1 | 	sub	fp, #80
1e8d0     02 FA 15 F2 | 	cmp	result1, #2 wc
1e8d4     10 4E 05 C1 |  if_b	add	fp, #16
1e8d8     A7 04 68 CC |  if_b	wrlong	#2, fp
1e8dc     10 4E 85 C1 |  if_b	sub	fp, #16
1e8e0     50 4E 05 F1 | 	add	fp, #80
1e8e4     A7 20 02 FB | 	rdlong	local02, fp
1e8e8     50 4E 85 F1 | 	sub	fp, #80
1e8ec     FF FF 7F FF 
1e8f0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1e8f4     10 4E 05 A1 |  if_e	add	fp, #16
1e8f8     A7 02 68 AC |  if_e	wrlong	#1, fp
1e8fc     10 4E 85 A1 |  if_e	sub	fp, #16
1e900     5C 4E 05 F1 | 	add	fp, #92
1e904     A7 20 02 FB | 	rdlong	local02, fp
1e908     10 4E 85 F1 | 	sub	fp, #16
1e90c     A7 1E 02 FB | 	rdlong	local01, fp
1e910     0F 21 82 F1 | 	sub	local02, local01
1e914     10 4E 05 F1 | 	add	fp, #16
1e918     A7 20 62 FC | 	wrlong	local02, fp
1e91c     5C 4E 85 F1 | 	sub	fp, #92
1e920     5C FF 9F FD | 	jmp	#LR__3500
1e924                 | LR__3501
1e924     04 4E 05 F1 | 	add	fp, #4
1e928     A7 20 02 FB | 	rdlong	local02, fp
1e92c     4C 4E 05 F1 | 	add	fp, #76
1e930     A7 1E 02 FB | 	rdlong	local01, fp
1e934     18 20 06 F1 | 	add	local02, #24
1e938     10 1F 62 FC | 	wrlong	local01, local02
1e93c     40 4E 85 F1 | 	sub	fp, #64
1e940     A7 20 0A FB | 	rdlong	local02, fp wz
1e944     10 4E 85 F1 | 	sub	fp, #16
1e948     B8 00 90 5D |  if_ne	jmp	#LR__3503
1e94c     5C 4E 05 F1 | 	add	fp, #92
1e950     A7 1E 02 FB | 	rdlong	local01, fp
1e954     5C 4E 85 F1 | 	sub	fp, #92
1e958     FF 1F CE F7 | 	test	local01, #511 wz
1e95c     A4 00 90 AD |  if_e	jmp	#LR__3503
1e960     44 4E 05 F1 | 	add	fp, #68
1e964     A7 12 02 FB | 	rdlong	arg01, fp
1e968     0C 4E 05 F1 | 	add	fp, #12
1e96c     A7 14 02 FB | 	rdlong	arg02, fp
1e970     50 4E 85 F1 | 	sub	fp, #80
1e974     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
1e978     58 4E 05 F1 | 	add	fp, #88
1e97c     A7 FA 61 FC | 	wrlong	result1, fp
1e980     00 FA 4D F2 | 	cmps	result1, #0 wz
1e984     58 4E 85 F1 | 	sub	fp, #88
1e988     10 4E 05 A1 |  if_e	add	fp, #16
1e98c     A7 04 68 AC |  if_e	wrlong	#2, fp
1e990     10 4E 85 A1 |  if_e	sub	fp, #16
1e994     6C 00 90 AD |  if_e	jmp	#LR__3502
1e998     04 4E 05 F1 | 	add	fp, #4
1e99c     A7 20 02 FB | 	rdlong	local02, fp
1e9a0     54 4E 05 F1 | 	add	fp, #84
1e9a4     A7 1E 02 FB | 	rdlong	local01, fp
1e9a8     04 4E 05 F1 | 	add	fp, #4
1e9ac     A7 18 02 FB | 	rdlong	arg04, fp
1e9b0     09 18 46 F0 | 	shr	arg04, #9
1e9b4     0C 1F 02 F1 | 	add	local01, arg04
1e9b8     1C 20 06 F1 | 	add	local02, #28
1e9bc     10 1F 62 FC | 	wrlong	local01, local02
1e9c0     18 4E 85 F1 | 	sub	fp, #24
1e9c4     A7 20 02 FB | 	rdlong	local02, fp
1e9c8     01 20 06 F1 | 	add	local02, #1
1e9cc     10 13 C2 FA | 	rdbyte	arg01, local02
1e9d0     40 4E 85 F1 | 	sub	fp, #64
1e9d4     A7 20 02 FB | 	rdlong	local02, fp
1e9d8     10 15 02 F6 | 	mov	arg02, local02
1e9dc     28 14 06 F1 | 	add	arg02, #40
1e9e0     04 4E 85 F1 | 	sub	fp, #4
1e9e4     1C 20 06 F1 | 	add	local02, #28
1e9e8     10 17 02 FB | 	rdlong	arg03, local02
1e9ec     01 18 06 F6 | 	mov	arg04, #1
1e9f0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
1e9f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9f8     10 4E 05 51 |  if_ne	add	fp, #16
1e9fc     A7 02 68 5C |  if_ne	wrlong	#1, fp
1ea00     10 4E 85 51 |  if_ne	sub	fp, #16
1ea04                 | LR__3502
1ea04                 | LR__3503
1ea04                 | LR__3504
1ea04                 | LR__3505
1ea04                 | LR__3506
1ea04     10 4E 05 F1 | 	add	fp, #16
1ea08     A7 20 0A FB | 	rdlong	local02, fp wz
1ea0c     10 4E 85 F1 | 	sub	fp, #16
1ea10     04 4E 05 51 |  if_ne	add	fp, #4
1ea14     A7 20 02 5B |  if_ne	rdlong	local02, fp
1ea18     04 4E 85 51 |  if_ne	sub	fp, #4
1ea1c     10 01 68 5C |  if_ne	wrlong	#0, local02
1ea20                 | ' 
1ea20                 | ' 	return res ;
1ea20     10 4E 05 F1 | 	add	fp, #16
1ea24     A7 FA 01 FB | 	rdlong	result1, fp
1ea28     10 4E 85 F1 | 	sub	fp, #16
1ea2c                 | LR__3507
1ea2c     A7 F0 03 F6 | 	mov	ptra, fp
1ea30     B2 00 A0 FD | 	call	#popregs_
1ea34                 | _fatfs_cc_f_open_ret
1ea34     2D 00 64 FD | 	ret
1ea38                 | 
1ea38                 | _fatfs_cc_f_read
1ea38     0E 4A 05 F6 | 	mov	COUNT_, #14
1ea3c     A8 00 A0 FD | 	call	#pushregs_
1ea40     38 F0 07 F1 | 	add	ptra, #56
1ea44     04 4E 05 F1 | 	add	fp, #4
1ea48     A7 12 62 FC | 	wrlong	arg01, fp
1ea4c     04 4E 05 F1 | 	add	fp, #4
1ea50     A7 14 62 FC | 	wrlong	arg02, fp
1ea54     04 4E 05 F1 | 	add	fp, #4
1ea58     A7 16 62 FC | 	wrlong	arg03, fp
1ea5c     04 4E 05 F1 | 	add	fp, #4
1ea60     A7 18 62 FC | 	wrlong	arg04, fp
1ea64     08 4E 85 F1 | 	sub	fp, #8
1ea68     A7 FA 01 FB | 	rdlong	result1, fp
1ea6c     2C 4E 05 F1 | 	add	fp, #44
1ea70     A7 FA 61 FC | 	wrlong	result1, fp
1ea74     24 4E 85 F1 | 	sub	fp, #36
1ea78     A7 FA 01 FB | 	rdlong	result1, fp
1ea7c     FD 00 68 FC | 	wrlong	#0, result1
1ea80     0C 4E 85 F1 | 	sub	fp, #12
1ea84     A7 12 02 FB | 	rdlong	arg01, fp
1ea88     14 4E 05 F1 | 	add	fp, #20
1ea8c     A7 14 02 F6 | 	mov	arg02, fp
1ea90     18 4E 85 F1 | 	sub	fp, #24
1ea94     24 F7 BF FD | 	call	#_fatfs_cc_validate
1ea98     14 4E 05 F1 | 	add	fp, #20
1ea9c     A7 FA 61 FC | 	wrlong	result1, fp
1eaa0     00 FA 4D F2 | 	cmps	result1, #0 wz
1eaa4     14 4E 85 F1 | 	sub	fp, #20
1eaa8     20 00 90 5D |  if_ne	jmp	#LR__3510
1eaac     04 4E 05 F1 | 	add	fp, #4
1eab0     A7 14 02 FB | 	rdlong	arg02, fp
1eab4     11 14 06 F1 | 	add	arg02, #17
1eab8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
1eabc     10 4E 05 F1 | 	add	fp, #16
1eac0     A7 14 62 FC | 	wrlong	arg02, fp
1eac4     14 4E 85 F1 | 	sub	fp, #20
1eac8     10 00 90 AD |  if_e	jmp	#LR__3511
1eacc                 | LR__3510
1eacc     14 4E 05 F1 | 	add	fp, #20
1ead0     A7 FA 01 FB | 	rdlong	result1, fp
1ead4     14 4E 85 F1 | 	sub	fp, #20
1ead8     EC 05 90 FD | 	jmp	#LR__3530
1eadc                 | LR__3511
1eadc     04 4E 05 F1 | 	add	fp, #4
1eae0     A7 18 02 FB | 	rdlong	arg04, fp
1eae4     04 4E 85 F1 | 	sub	fp, #4
1eae8     10 18 06 F1 | 	add	arg04, #16
1eaec     0C 19 C2 FA | 	rdbyte	arg04, arg04
1eaf0     01 18 CE F7 | 	test	arg04, #1 wz
1eaf4     07 FA 05 A6 |  if_e	mov	result1, #7
1eaf8     CC 05 90 AD |  if_e	jmp	#LR__3530
1eafc     04 4E 05 F1 | 	add	fp, #4
1eb00     A7 1E 02 FB | 	rdlong	local01, fp
1eb04     0F 21 02 F6 | 	mov	local02, local01
1eb08     0C 20 06 F1 | 	add	local02, #12
1eb0c     10 23 02 FB | 	rdlong	local03, local02
1eb10     14 1E 06 F1 | 	add	local01, #20
1eb14     0F 1F 02 FB | 	rdlong	local01, local01
1eb18     0F 23 82 F1 | 	sub	local03, local01
1eb1c     20 4E 05 F1 | 	add	fp, #32
1eb20     A7 22 62 FC | 	wrlong	local03, fp
1eb24     18 4E 85 F1 | 	sub	fp, #24
1eb28     A7 24 02 FB | 	rdlong	local04, fp
1eb2c     0C 4E 85 F1 | 	sub	fp, #12
1eb30     11 25 1A F2 | 	cmp	local04, local03 wcz
1eb34     24 4E 05 11 |  if_a	add	fp, #36
1eb38     A7 24 02 1B |  if_a	rdlong	local04, fp
1eb3c     18 4E 85 11 |  if_a	sub	fp, #24
1eb40     A7 24 62 1C |  if_a	wrlong	local04, fp
1eb44     0C 4E 85 11 |  if_a	sub	fp, #12
1eb48                 | ' 
1eb48                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
1eb48                 | LR__3512
1eb48     0C 4E 05 F1 | 	add	fp, #12
1eb4c     A7 20 02 FB | 	rdlong	local02, fp
1eb50     0C 4E 85 F1 | 	sub	fp, #12
1eb54     10 25 02 F6 | 	mov	local04, local02
1eb58     01 24 16 F2 | 	cmp	local04, #1 wc
1eb5c     64 05 90 CD |  if_b	jmp	#LR__3529
1eb60     04 4E 05 F1 | 	add	fp, #4
1eb64     A7 22 02 FB | 	rdlong	local03, fp
1eb68     04 4E 85 F1 | 	sub	fp, #4
1eb6c     14 22 06 F1 | 	add	local03, #20
1eb70     11 23 02 FB | 	rdlong	local03, local03
1eb74     FF 23 CE F7 | 	test	local03, #511 wz
1eb78     3C 04 90 5D |  if_ne	jmp	#LR__3527
1eb7c     04 4E 05 F1 | 	add	fp, #4
1eb80     A7 1E 02 FB | 	rdlong	local01, fp
1eb84     14 1E 06 F1 | 	add	local01, #20
1eb88     0F 23 02 FB | 	rdlong	local03, local01
1eb8c     09 22 46 F0 | 	shr	local03, #9
1eb90     14 4E 05 F1 | 	add	fp, #20
1eb94     A7 26 02 FB | 	rdlong	local05, fp
1eb98     13 29 02 F6 | 	mov	local06, local05
1eb9c     0A 28 06 F1 | 	add	local06, #10
1eba0     14 2B E2 FA | 	rdword	local07, local06
1eba4     0A 28 86 F1 | 	sub	local06, #10
1eba8     15 2D 32 F9 | 	getword	local08, local07, #0
1ebac     01 2C 86 F1 | 	sub	local08, #1
1ebb0     16 23 0A F5 | 	and	local03, local08 wz
1ebb4     18 4E 05 F1 | 	add	fp, #24
1ebb8     A7 22 62 FC | 	wrlong	local03, fp
1ebbc     30 4E 85 F1 | 	sub	fp, #48
1ebc0     E0 00 90 5D |  if_ne	jmp	#LR__3517
1ebc4     04 4E 05 F1 | 	add	fp, #4
1ebc8     A7 22 02 FB | 	rdlong	local03, fp
1ebcc     04 4E 85 F1 | 	sub	fp, #4
1ebd0     14 22 06 F1 | 	add	local03, #20
1ebd4     11 23 0A FB | 	rdlong	local03, local03 wz
1ebd8     20 00 90 5D |  if_ne	jmp	#LR__3513
1ebdc     04 4E 05 F1 | 	add	fp, #4
1ebe0     A7 22 02 FB | 	rdlong	local03, fp
1ebe4     08 22 06 F1 | 	add	local03, #8
1ebe8     11 23 02 FB | 	rdlong	local03, local03
1ebec     18 4E 05 F1 | 	add	fp, #24
1ebf0     A7 22 62 FC | 	wrlong	local03, fp
1ebf4     1C 4E 85 F1 | 	sub	fp, #28
1ebf8     28 00 90 FD | 	jmp	#LR__3514
1ebfc                 | LR__3513
1ebfc     04 4E 05 F1 | 	add	fp, #4
1ec00     A7 2C 02 FB | 	rdlong	local08, fp
1ec04     16 13 02 F6 | 	mov	arg01, local08
1ec08     04 4E 85 F1 | 	sub	fp, #4
1ec0c     18 2C 06 F1 | 	add	local08, #24
1ec10     16 15 02 FB | 	rdlong	arg02, local08
1ec14     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
1ec18     1C 4E 05 F1 | 	add	fp, #28
1ec1c     A7 FA 61 FC | 	wrlong	result1, fp
1ec20     1C 4E 85 F1 | 	sub	fp, #28
1ec24                 | LR__3514
1ec24     1C 4E 05 F1 | 	add	fp, #28
1ec28     A7 22 02 FB | 	rdlong	local03, fp
1ec2c     1C 4E 85 F1 | 	sub	fp, #28
1ec30     02 22 16 F2 | 	cmp	local03, #2 wc
1ec34     1C 00 90 3D |  if_ae	jmp	#LR__3515
1ec38     04 4E 05 F1 | 	add	fp, #4
1ec3c     A7 22 02 FB | 	rdlong	local03, fp
1ec40     04 4E 85 F1 | 	sub	fp, #4
1ec44     11 22 06 F1 | 	add	local03, #17
1ec48     11 05 48 FC | 	wrbyte	#2, local03
1ec4c     02 FA 05 F6 | 	mov	result1, #2
1ec50     74 04 90 FD | 	jmp	#LR__3530
1ec54                 | LR__3515
1ec54     1C 4E 05 F1 | 	add	fp, #28
1ec58     A7 22 02 FB | 	rdlong	local03, fp
1ec5c     1C 4E 85 F1 | 	sub	fp, #28
1ec60     FF FF 7F FF 
1ec64     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1ec68     1C 00 90 5D |  if_ne	jmp	#LR__3516
1ec6c     04 4E 05 F1 | 	add	fp, #4
1ec70     A7 22 02 FB | 	rdlong	local03, fp
1ec74     04 4E 85 F1 | 	sub	fp, #4
1ec78     11 22 06 F1 | 	add	local03, #17
1ec7c     11 03 48 FC | 	wrbyte	#1, local03
1ec80     01 FA 05 F6 | 	mov	result1, #1
1ec84     40 04 90 FD | 	jmp	#LR__3530
1ec88                 | LR__3516
1ec88     04 4E 05 F1 | 	add	fp, #4
1ec8c     A7 22 02 FB | 	rdlong	local03, fp
1ec90     18 4E 05 F1 | 	add	fp, #24
1ec94     A7 2C 02 FB | 	rdlong	local08, fp
1ec98     1C 4E 85 F1 | 	sub	fp, #28
1ec9c     18 22 06 F1 | 	add	local03, #24
1eca0     11 2D 62 FC | 	wrlong	local08, local03
1eca4                 | LR__3517
1eca4     18 4E 05 F1 | 	add	fp, #24
1eca8     A7 12 02 FB | 	rdlong	arg01, fp
1ecac     14 4E 85 F1 | 	sub	fp, #20
1ecb0     A7 22 02 FB | 	rdlong	local03, fp
1ecb4     04 4E 85 F1 | 	sub	fp, #4
1ecb8     18 22 06 F1 | 	add	local03, #24
1ecbc     11 15 02 FB | 	rdlong	arg02, local03
1ecc0     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
1ecc4     20 4E 05 F1 | 	add	fp, #32
1ecc8     A7 FA 61 FC | 	wrlong	result1, fp
1eccc     20 4E 85 F1 | 	sub	fp, #32
1ecd0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ecd4     1C 00 90 5D |  if_ne	jmp	#LR__3518
1ecd8     04 4E 05 F1 | 	add	fp, #4
1ecdc     A7 22 02 FB | 	rdlong	local03, fp
1ece0     04 4E 85 F1 | 	sub	fp, #4
1ece4     11 22 06 F1 | 	add	local03, #17
1ece8     11 05 48 FC | 	wrbyte	#2, local03
1ecec     02 FA 05 F6 | 	mov	result1, #2
1ecf0     D4 03 90 FD | 	jmp	#LR__3530
1ecf4                 | LR__3518
1ecf4     20 4E 05 F1 | 	add	fp, #32
1ecf8     A7 22 02 FB | 	rdlong	local03, fp
1ecfc     10 4E 05 F1 | 	add	fp, #16
1ed00     A7 2C 02 FB | 	rdlong	local08, fp
1ed04     16 23 02 F1 | 	add	local03, local08
1ed08     10 4E 85 F1 | 	sub	fp, #16
1ed0c     A7 22 62 FC | 	wrlong	local03, fp
1ed10     14 4E 85 F1 | 	sub	fp, #20
1ed14     A7 22 02 FB | 	rdlong	local03, fp
1ed18     09 22 46 F0 | 	shr	local03, #9
1ed1c     20 4E 05 F1 | 	add	fp, #32
1ed20     A7 22 62 FC | 	wrlong	local03, fp
1ed24     2C 4E 85 F1 | 	sub	fp, #44
1ed28     01 22 16 F2 | 	cmp	local03, #1 wc
1ed2c     5C 01 90 CD |  if_b	jmp	#LR__3522
1ed30     30 4E 05 F1 | 	add	fp, #48
1ed34     A7 22 02 FB | 	rdlong	local03, fp
1ed38     04 4E 85 F1 | 	sub	fp, #4
1ed3c     A7 2C 02 FB | 	rdlong	local08, fp
1ed40     16 23 02 F1 | 	add	local03, local08
1ed44     14 4E 85 F1 | 	sub	fp, #20
1ed48     A7 2C 02 FB | 	rdlong	local08, fp
1ed4c     18 4E 85 F1 | 	sub	fp, #24
1ed50     0A 2C 06 F1 | 	add	local08, #10
1ed54     16 2D E2 FA | 	rdword	local08, local08
1ed58     16 23 1A F2 | 	cmp	local03, local08 wcz
1ed5c     28 00 90 ED |  if_be	jmp	#LR__3519
1ed60     18 4E 05 F1 | 	add	fp, #24
1ed64     A7 1E 02 FB | 	rdlong	local01, fp
1ed68     0A 1E 06 F1 | 	add	local01, #10
1ed6c     0F 23 E2 FA | 	rdword	local03, local01
1ed70     18 4E 05 F1 | 	add	fp, #24
1ed74     A7 2C 02 FB | 	rdlong	local08, fp
1ed78     16 23 82 F1 | 	sub	local03, local08
1ed7c     04 4E 85 F1 | 	sub	fp, #4
1ed80     A7 22 62 FC | 	wrlong	local03, fp
1ed84     2C 4E 85 F1 | 	sub	fp, #44
1ed88                 | LR__3519
1ed88     18 4E 05 F1 | 	add	fp, #24
1ed8c     A7 1E 02 FB | 	rdlong	local01, fp
1ed90     01 1E 06 F1 | 	add	local01, #1
1ed94     0F 13 C2 FA | 	rdbyte	arg01, local01
1ed98     1C 4E 05 F1 | 	add	fp, #28
1ed9c     A7 14 02 FB | 	rdlong	arg02, fp
1eda0     14 4E 85 F1 | 	sub	fp, #20
1eda4     A7 16 02 FB | 	rdlong	arg03, fp
1eda8     0C 4E 05 F1 | 	add	fp, #12
1edac     A7 18 02 FB | 	rdlong	arg04, fp
1edb0     2C 4E 85 F1 | 	sub	fp, #44
1edb4     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
1edb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1edbc     1C 00 90 AD |  if_e	jmp	#LR__3520
1edc0     04 4E 05 F1 | 	add	fp, #4
1edc4     A7 22 02 FB | 	rdlong	local03, fp
1edc8     04 4E 85 F1 | 	sub	fp, #4
1edcc     11 22 06 F1 | 	add	local03, #17
1edd0     11 03 48 FC | 	wrbyte	#1, local03
1edd4     01 FA 05 F6 | 	mov	result1, #1
1edd8     EC 02 90 FD | 	jmp	#LR__3530
1eddc                 | LR__3520
1eddc     04 4E 05 F1 | 	add	fp, #4
1ede0     A7 1E 02 FB | 	rdlong	local01, fp
1ede4     04 4E 85 F1 | 	sub	fp, #4
1ede8     10 1E 06 F1 | 	add	local01, #16
1edec     0F 23 C2 FA | 	rdbyte	local03, local01
1edf0     80 22 CE F7 | 	test	local03, #128 wz
1edf4     78 00 90 AD |  if_e	jmp	#LR__3521
1edf8     04 4E 05 F1 | 	add	fp, #4
1edfc     A7 2C 02 FB | 	rdlong	local08, fp
1ee00     1C 2C 06 F1 | 	add	local08, #28
1ee04     16 2D 02 FB | 	rdlong	local08, local08
1ee08     1C 4E 05 F1 | 	add	fp, #28
1ee0c     A7 2E 02 FB | 	rdlong	local09, fp
1ee10     17 2D 82 F1 | 	sub	local08, local09
1ee14     0C 4E 05 F1 | 	add	fp, #12
1ee18     A7 30 02 FB | 	rdlong	local10, fp
1ee1c     2C 4E 85 F1 | 	sub	fp, #44
1ee20     18 33 02 F6 | 	mov	local11, local10
1ee24     19 2D 12 F2 | 	cmp	local08, local11 wc
1ee28     44 00 90 3D |  if_ae	jmp	#LR__3521
1ee2c     34 4E 05 F1 | 	add	fp, #52
1ee30     A7 12 02 FB | 	rdlong	arg01, fp
1ee34     30 4E 85 F1 | 	sub	fp, #48
1ee38     A7 14 02 FB | 	rdlong	arg02, fp
1ee3c     0A 33 02 F6 | 	mov	local11, arg02
1ee40     1C 32 06 F1 | 	add	local11, #28
1ee44     19 2F 02 FB | 	rdlong	local09, local11
1ee48     1C 4E 05 F1 | 	add	fp, #28
1ee4c     A7 26 02 FB | 	rdlong	local05, fp
1ee50     13 2F 82 F1 | 	sub	local09, local05
1ee54     09 2E 66 F0 | 	shl	local09, #9
1ee58     17 33 02 F6 | 	mov	local11, local09
1ee5c     17 13 02 F1 | 	add	arg01, local09
1ee60     20 4E 85 F1 | 	sub	fp, #32
1ee64     28 14 06 F1 | 	add	arg02, #40
1ee68     09 16 C6 F9 | 	decod	arg03, #9
1ee6c     A8 4B BF FD | 	call	#__system____builtin_memmove
1ee70                 | LR__3521
1ee70     2C 4E 05 F1 | 	add	fp, #44
1ee74     A7 22 02 FB | 	rdlong	local03, fp
1ee78     09 22 66 F0 | 	shl	local03, #9
1ee7c     04 4E 85 F1 | 	sub	fp, #4
1ee80     A7 22 62 FC | 	wrlong	local03, fp
1ee84     28 4E 85 F1 | 	sub	fp, #40
1ee88                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
1ee88                 | ' 				}
1ee88                 | ' 
1ee88                 | ' 
1ee88                 | ' 				rcnt =  ((UINT) 512 )  * cc;
1ee88                 | ' 				continue;
1ee88     B4 01 90 FD | 	jmp	#LR__3528
1ee8c                 | LR__3522
1ee8c     04 4E 05 F1 | 	add	fp, #4
1ee90     A7 22 02 FB | 	rdlong	local03, fp
1ee94     1C 22 06 F1 | 	add	local03, #28
1ee98     11 23 02 FB | 	rdlong	local03, local03
1ee9c     1C 4E 05 F1 | 	add	fp, #28
1eea0     A7 1E 02 FB | 	rdlong	local01, fp
1eea4     20 4E 85 F1 | 	sub	fp, #32
1eea8     0F 23 0A F2 | 	cmp	local03, local01 wz
1eeac     EC 00 90 AD |  if_e	jmp	#LR__3526
1eeb0     04 4E 05 F1 | 	add	fp, #4
1eeb4     A7 1E 02 FB | 	rdlong	local01, fp
1eeb8     04 4E 85 F1 | 	sub	fp, #4
1eebc     10 1E 06 F1 | 	add	local01, #16
1eec0     0F 23 C2 FA | 	rdbyte	local03, local01
1eec4     80 22 CE F7 | 	test	local03, #128 wz
1eec8     7C 00 90 AD |  if_e	jmp	#LR__3524
1eecc     18 4E 05 F1 | 	add	fp, #24
1eed0     A7 1E 02 FB | 	rdlong	local01, fp
1eed4     01 1E 06 F1 | 	add	local01, #1
1eed8     0F 13 C2 FA | 	rdbyte	arg01, local01
1eedc     14 4E 85 F1 | 	sub	fp, #20
1eee0     A7 22 02 FB | 	rdlong	local03, fp
1eee4     11 15 02 F6 | 	mov	arg02, local03
1eee8     28 14 06 F1 | 	add	arg02, #40
1eeec     04 4E 85 F1 | 	sub	fp, #4
1eef0     1C 22 06 F1 | 	add	local03, #28
1eef4     11 17 02 FB | 	rdlong	arg03, local03
1eef8     01 18 06 F6 | 	mov	arg04, #1
1eefc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
1ef00     00 FA 0D F2 | 	cmp	result1, #0 wz
1ef04     1C 00 90 AD |  if_e	jmp	#LR__3523
1ef08     04 4E 05 F1 | 	add	fp, #4
1ef0c     A7 22 02 FB | 	rdlong	local03, fp
1ef10     04 4E 85 F1 | 	sub	fp, #4
1ef14     11 22 06 F1 | 	add	local03, #17
1ef18     11 03 48 FC | 	wrbyte	#1, local03
1ef1c     01 FA 05 F6 | 	mov	result1, #1
1ef20     A4 01 90 FD | 	jmp	#LR__3530
1ef24                 | LR__3523
1ef24     04 4E 05 F1 | 	add	fp, #4
1ef28     A7 32 02 FB | 	rdlong	local11, fp
1ef2c     19 23 02 F6 | 	mov	local03, local11
1ef30     04 4E 85 F1 | 	sub	fp, #4
1ef34     10 32 06 F1 | 	add	local11, #16
1ef38     19 33 C2 FA | 	rdbyte	local11, local11
1ef3c     7F 32 06 F5 | 	and	local11, #127
1ef40     10 22 06 F1 | 	add	local03, #16
1ef44     11 33 42 FC | 	wrbyte	local11, local03
1ef48                 | LR__3524
1ef48     18 4E 05 F1 | 	add	fp, #24
1ef4c     A7 1E 02 FB | 	rdlong	local01, fp
1ef50     01 1E 06 F1 | 	add	local01, #1
1ef54     0F 13 C2 FA | 	rdbyte	arg01, local01
1ef58     14 4E 85 F1 | 	sub	fp, #20
1ef5c     A7 14 02 FB | 	rdlong	arg02, fp
1ef60     28 14 06 F1 | 	add	arg02, #40
1ef64     1C 4E 05 F1 | 	add	fp, #28
1ef68     A7 16 02 FB | 	rdlong	arg03, fp
1ef6c     20 4E 85 F1 | 	sub	fp, #32
1ef70     01 18 06 F6 | 	mov	arg04, #1
1ef74     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
1ef78     00 FA 0D F2 | 	cmp	result1, #0 wz
1ef7c     1C 00 90 AD |  if_e	jmp	#LR__3525
1ef80     04 4E 05 F1 | 	add	fp, #4
1ef84     A7 22 02 FB | 	rdlong	local03, fp
1ef88     04 4E 85 F1 | 	sub	fp, #4
1ef8c     11 22 06 F1 | 	add	local03, #17
1ef90     11 03 48 FC | 	wrbyte	#1, local03
1ef94     01 FA 05 F6 | 	mov	result1, #1
1ef98     2C 01 90 FD | 	jmp	#LR__3530
1ef9c                 | LR__3525
1ef9c                 | LR__3526
1ef9c     04 4E 05 F1 | 	add	fp, #4
1efa0     A7 22 02 FB | 	rdlong	local03, fp
1efa4     1C 4E 05 F1 | 	add	fp, #28
1efa8     A7 32 02 FB | 	rdlong	local11, fp
1efac     20 4E 85 F1 | 	sub	fp, #32
1efb0     1C 22 06 F1 | 	add	local03, #28
1efb4     11 33 62 FC | 	wrlong	local11, local03
1efb8                 | LR__3527
1efb8     04 4E 05 F1 | 	add	fp, #4
1efbc     A7 1E 02 FB | 	rdlong	local01, fp
1efc0     14 1E 06 F1 | 	add	local01, #20
1efc4     0F 33 02 FB | 	rdlong	local11, local01
1efc8     FF 33 06 F5 | 	and	local11, #511
1efcc     09 22 C6 F9 | 	decod	local03, #9
1efd0     19 23 82 F1 | 	sub	local03, local11
1efd4     24 4E 05 F1 | 	add	fp, #36
1efd8     A7 22 62 FC | 	wrlong	local03, fp
1efdc     1C 4E 85 F1 | 	sub	fp, #28
1efe0     A7 32 02 FB | 	rdlong	local11, fp
1efe4     0C 4E 85 F1 | 	sub	fp, #12
1efe8     19 23 1A F2 | 	cmp	local03, local11 wcz
1efec     0C 4E 05 11 |  if_a	add	fp, #12
1eff0     A7 22 02 1B |  if_a	rdlong	local03, fp
1eff4     1C 4E 05 11 |  if_a	add	fp, #28
1eff8     A7 22 62 1C |  if_a	wrlong	local03, fp
1effc     28 4E 85 11 |  if_a	sub	fp, #40
1f000     34 4E 05 F1 | 	add	fp, #52
1f004     A7 12 02 FB | 	rdlong	arg01, fp
1f008     30 4E 85 F1 | 	sub	fp, #48
1f00c     A7 28 02 FB | 	rdlong	local06, fp
1f010     14 15 02 F6 | 	mov	arg02, local06
1f014     28 14 06 F1 | 	add	arg02, #40
1f018     14 28 06 F1 | 	add	local06, #20
1f01c     14 33 02 FB | 	rdlong	local11, local06
1f020     19 2F 02 F6 | 	mov	local09, local11
1f024     17 31 02 F6 | 	mov	local10, local09
1f028     FF 31 06 F5 | 	and	local10, #511
1f02c     18 15 02 F1 | 	add	arg02, local10
1f030     24 4E 05 F1 | 	add	fp, #36
1f034     A7 16 02 FB | 	rdlong	arg03, fp
1f038     28 4E 85 F1 | 	sub	fp, #40
1f03c     D8 49 BF FD | 	call	#__system____builtin_memmove
1f040                 | LR__3528
1f040     0C 4E 05 F1 | 	add	fp, #12
1f044     A7 22 02 FB | 	rdlong	local03, fp
1f048     1C 4E 05 F1 | 	add	fp, #28
1f04c     A7 2C 02 FB | 	rdlong	local08, fp
1f050     16 23 82 F1 | 	sub	local03, local08
1f054     1C 4E 85 F1 | 	sub	fp, #28
1f058     A7 22 62 FC | 	wrlong	local03, fp
1f05c     04 4E 05 F1 | 	add	fp, #4
1f060     A7 1E 02 FB | 	rdlong	local01, fp
1f064     0F 2B 02 FB | 	rdlong	local07, local01
1f068     18 4E 05 F1 | 	add	fp, #24
1f06c     A7 2C 02 FB | 	rdlong	local08, fp
1f070     16 2B 02 F1 | 	add	local07, local08
1f074     0F 2B 62 FC | 	wrlong	local07, local01
1f078     0C 4E 05 F1 | 	add	fp, #12
1f07c     A7 22 02 FB | 	rdlong	local03, fp
1f080     0C 4E 85 F1 | 	sub	fp, #12
1f084     A7 34 02 FB | 	rdlong	local12, fp
1f088     1A 23 02 F1 | 	add	local03, local12
1f08c     0C 4E 05 F1 | 	add	fp, #12
1f090     A7 22 62 FC | 	wrlong	local03, fp
1f094     30 4E 85 F1 | 	sub	fp, #48
1f098     A7 36 02 FB | 	rdlong	local13, fp
1f09c     1B 23 02 F6 | 	mov	local03, local13
1f0a0     14 36 06 F1 | 	add	local13, #20
1f0a4     1B 39 02 FB | 	rdlong	local14, local13
1f0a8     24 4E 05 F1 | 	add	fp, #36
1f0ac     A7 28 02 FB | 	rdlong	local06, fp
1f0b0     28 4E 85 F1 | 	sub	fp, #40
1f0b4     14 39 02 F1 | 	add	local14, local06
1f0b8     14 22 06 F1 | 	add	local03, #20
1f0bc     11 39 62 FC | 	wrlong	local14, local03
1f0c0     84 FA 9F FD | 	jmp	#LR__3512
1f0c4                 | LR__3529
1f0c4                 | ' 
1f0c4                 | ' 
1f0c4                 | ' 
1f0c4                 | ' 
1f0c4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
1f0c4                 | ' 
1f0c4                 | ' 	}
1f0c4                 | ' 
1f0c4                 | ' 	return FR_OK ;
1f0c4     00 FA 05 F6 | 	mov	result1, #0
1f0c8                 | LR__3530
1f0c8     A7 F0 03 F6 | 	mov	ptra, fp
1f0cc     B2 00 A0 FD | 	call	#popregs_
1f0d0                 | _fatfs_cc_f_read_ret
1f0d0     2D 00 64 FD | 	ret
1f0d4                 | 
1f0d4                 | _fatfs_cc_f_write
1f0d4     15 4A 05 F6 | 	mov	COUNT_, #21
1f0d8     A8 00 A0 FD | 	call	#pushregs_
1f0dc     34 F0 07 F1 | 	add	ptra, #52
1f0e0     04 4E 05 F1 | 	add	fp, #4
1f0e4     A7 12 62 FC | 	wrlong	arg01, fp
1f0e8     04 4E 05 F1 | 	add	fp, #4
1f0ec     A7 14 62 FC | 	wrlong	arg02, fp
1f0f0     04 4E 05 F1 | 	add	fp, #4
1f0f4     A7 16 62 FC | 	wrlong	arg03, fp
1f0f8     04 4E 05 F1 | 	add	fp, #4
1f0fc     A7 18 62 FC | 	wrlong	arg04, fp
1f100     08 4E 85 F1 | 	sub	fp, #8
1f104     A7 FA 01 FB | 	rdlong	result1, fp
1f108     28 4E 05 F1 | 	add	fp, #40
1f10c     A7 FA 61 FC | 	wrlong	result1, fp
1f110     20 4E 85 F1 | 	sub	fp, #32
1f114     A7 FA 01 FB | 	rdlong	result1, fp
1f118     FD 00 68 FC | 	wrlong	#0, result1
1f11c     0C 4E 85 F1 | 	sub	fp, #12
1f120     A7 12 02 FB | 	rdlong	arg01, fp
1f124     14 4E 05 F1 | 	add	fp, #20
1f128     A7 14 02 F6 | 	mov	arg02, fp
1f12c     18 4E 85 F1 | 	sub	fp, #24
1f130     88 F0 BF FD | 	call	#_fatfs_cc_validate
1f134     14 4E 05 F1 | 	add	fp, #20
1f138     A7 FA 61 FC | 	wrlong	result1, fp
1f13c     00 FA 4D F2 | 	cmps	result1, #0 wz
1f140     14 4E 85 F1 | 	sub	fp, #20
1f144     20 00 90 5D |  if_ne	jmp	#LR__3540
1f148     04 4E 05 F1 | 	add	fp, #4
1f14c     A7 14 02 FB | 	rdlong	arg02, fp
1f150     11 14 06 F1 | 	add	arg02, #17
1f154     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
1f158     10 4E 05 F1 | 	add	fp, #16
1f15c     A7 14 62 FC | 	wrlong	arg02, fp
1f160     14 4E 85 F1 | 	sub	fp, #20
1f164     10 00 90 AD |  if_e	jmp	#LR__3541
1f168                 | LR__3540
1f168     14 4E 05 F1 | 	add	fp, #20
1f16c     A7 FA 01 FB | 	rdlong	result1, fp
1f170     14 4E 85 F1 | 	sub	fp, #20
1f174     44 07 90 FD | 	jmp	#LR__3563
1f178                 | LR__3541
1f178     04 4E 05 F1 | 	add	fp, #4
1f17c     A7 14 02 FB | 	rdlong	arg02, fp
1f180     04 4E 85 F1 | 	sub	fp, #4
1f184     10 14 06 F1 | 	add	arg02, #16
1f188     0A 15 C2 FA | 	rdbyte	arg02, arg02
1f18c     02 14 CE F7 | 	test	arg02, #2 wz
1f190     07 FA 05 A6 |  if_e	mov	result1, #7
1f194     24 07 90 AD |  if_e	jmp	#LR__3563
1f198     04 4E 05 F1 | 	add	fp, #4
1f19c     A7 14 02 FB | 	rdlong	arg02, fp
1f1a0     0A 13 02 F6 | 	mov	arg01, arg02
1f1a4     14 12 06 F1 | 	add	arg01, #20
1f1a8     09 13 02 FB | 	rdlong	arg01, arg01
1f1ac     08 4E 05 F1 | 	add	fp, #8
1f1b0     A7 FA 01 FB | 	rdlong	result1, fp
1f1b4     FD 12 02 F1 | 	add	arg01, result1
1f1b8     0C 4E 85 F1 | 	sub	fp, #12
1f1bc     14 14 06 F1 | 	add	arg02, #20
1f1c0     0A FB 01 FB | 	rdlong	result1, arg02
1f1c4     FD 12 12 F2 | 	cmp	arg01, result1 wc
1f1c8     24 00 90 3D |  if_ae	jmp	#LR__3542
1f1cc     04 4E 05 F1 | 	add	fp, #4
1f1d0     A7 14 02 FB | 	rdlong	arg02, fp
1f1d4     01 FA 65 F6 | 	neg	result1, #1
1f1d8     14 14 06 F1 | 	add	arg02, #20
1f1dc     0A 15 02 FB | 	rdlong	arg02, arg02
1f1e0     0A FB 81 F1 | 	sub	result1, arg02
1f1e4     08 4E 05 F1 | 	add	fp, #8
1f1e8     A7 FA 61 FC | 	wrlong	result1, fp
1f1ec     0C 4E 85 F1 | 	sub	fp, #12
1f1f0                 | LR__3542
1f1f0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1f1f0                 | ' 	}
1f1f0                 | ' 
1f1f0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1f1f0                 | LR__3543
1f1f0     0C 4E 05 F1 | 	add	fp, #12
1f1f4     A7 FA 01 FB | 	rdlong	result1, fp
1f1f8     0C 4E 85 F1 | 	sub	fp, #12
1f1fc     01 FA 15 F2 | 	cmp	result1, #1 wc
1f200     90 06 90 CD |  if_b	jmp	#LR__3562
1f204     04 4E 05 F1 | 	add	fp, #4
1f208     A7 FA 01 FB | 	rdlong	result1, fp
1f20c     04 4E 85 F1 | 	sub	fp, #4
1f210     14 FA 05 F1 | 	add	result1, #20
1f214     FD FA 01 FB | 	rdlong	result1, result1
1f218     FF FB CD F7 | 	test	result1, #511 wz
1f21c     D8 04 90 5D |  if_ne	jmp	#LR__3558
1f220     04 4E 05 F1 | 	add	fp, #4
1f224     A7 FA 01 FB | 	rdlong	result1, fp
1f228     14 FA 05 F1 | 	add	result1, #20
1f22c     FD FA 01 FB | 	rdlong	result1, result1
1f230     09 FA 45 F0 | 	shr	result1, #9
1f234     14 4E 05 F1 | 	add	fp, #20
1f238     A7 14 02 FB | 	rdlong	arg02, fp
1f23c     0A 14 06 F1 | 	add	arg02, #10
1f240     0A 19 E2 FA | 	rdword	arg04, arg02
1f244     0C 15 32 F9 | 	getword	arg02, arg04, #0
1f248     01 14 86 F1 | 	sub	arg02, #1
1f24c     0A FB 09 F5 | 	and	result1, arg02 wz
1f250     14 4E 05 F1 | 	add	fp, #20
1f254     A7 FA 61 FC | 	wrlong	result1, fp
1f258     2C 4E 85 F1 | 	sub	fp, #44
1f25c     44 01 90 5D |  if_ne	jmp	#LR__3549
1f260     04 4E 05 F1 | 	add	fp, #4
1f264     A7 FA 01 FB | 	rdlong	result1, fp
1f268     04 4E 85 F1 | 	sub	fp, #4
1f26c     14 FA 05 F1 | 	add	result1, #20
1f270     FD 14 0A FB | 	rdlong	arg02, result1 wz
1f274     44 00 90 5D |  if_ne	jmp	#LR__3544
1f278     04 4E 05 F1 | 	add	fp, #4
1f27c     A7 14 02 FB | 	rdlong	arg02, fp
1f280     08 14 06 F1 | 	add	arg02, #8
1f284     0A 15 0A FB | 	rdlong	arg02, arg02 wz
1f288     18 4E 05 F1 | 	add	fp, #24
1f28c     A7 14 62 FC | 	wrlong	arg02, fp
1f290     1C 4E 85 F1 | 	sub	fp, #28
1f294     4C 00 90 5D |  if_ne	jmp	#LR__3545
1f298     04 4E 05 F1 | 	add	fp, #4
1f29c     A7 12 02 FB | 	rdlong	arg01, fp
1f2a0     04 4E 85 F1 | 	sub	fp, #4
1f2a4     00 14 06 F6 | 	mov	arg02, #0
1f2a8     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
1f2ac     1C 4E 05 F1 | 	add	fp, #28
1f2b0     A7 FA 61 FC | 	wrlong	result1, fp
1f2b4     1C 4E 85 F1 | 	sub	fp, #28
1f2b8     28 00 90 FD | 	jmp	#LR__3545
1f2bc                 | LR__3544
1f2bc     04 4E 05 F1 | 	add	fp, #4
1f2c0     A7 18 02 FB | 	rdlong	arg04, fp
1f2c4     0C 13 02 F6 | 	mov	arg01, arg04
1f2c8     04 4E 85 F1 | 	sub	fp, #4
1f2cc     18 18 06 F1 | 	add	arg04, #24
1f2d0     0C 15 02 FB | 	rdlong	arg02, arg04
1f2d4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
1f2d8     1C 4E 05 F1 | 	add	fp, #28
1f2dc     A7 FA 61 FC | 	wrlong	result1, fp
1f2e0     1C 4E 85 F1 | 	sub	fp, #28
1f2e4                 | LR__3545
1f2e4     1C 4E 05 F1 | 	add	fp, #28
1f2e8     A7 FA 09 FB | 	rdlong	result1, fp wz
1f2ec     1C 4E 85 F1 | 	sub	fp, #28
1f2f0     A0 05 90 AD |  if_e	jmp	#LR__3562
1f2f4     1C 4E 05 F1 | 	add	fp, #28
1f2f8     A7 FA 01 FB | 	rdlong	result1, fp
1f2fc     1C 4E 85 F1 | 	sub	fp, #28
1f300     01 FA 0D F2 | 	cmp	result1, #1 wz
1f304     1C 00 90 5D |  if_ne	jmp	#LR__3546
1f308     04 4E 05 F1 | 	add	fp, #4
1f30c     A7 FA 01 FB | 	rdlong	result1, fp
1f310     04 4E 85 F1 | 	sub	fp, #4
1f314     11 FA 05 F1 | 	add	result1, #17
1f318     FD 04 48 FC | 	wrbyte	#2, result1
1f31c     02 FA 05 F6 | 	mov	result1, #2
1f320     98 05 90 FD | 	jmp	#LR__3563
1f324                 | LR__3546
1f324     1C 4E 05 F1 | 	add	fp, #28
1f328     A7 FA 01 FB | 	rdlong	result1, fp
1f32c     1C 4E 85 F1 | 	sub	fp, #28
1f330     FF FF 7F FF 
1f334     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1f338     1C 00 90 5D |  if_ne	jmp	#LR__3547
1f33c     04 4E 05 F1 | 	add	fp, #4
1f340     A7 FA 01 FB | 	rdlong	result1, fp
1f344     04 4E 85 F1 | 	sub	fp, #4
1f348     11 FA 05 F1 | 	add	result1, #17
1f34c     FD 02 48 FC | 	wrbyte	#1, result1
1f350     01 FA 05 F6 | 	mov	result1, #1
1f354     64 05 90 FD | 	jmp	#LR__3563
1f358                 | LR__3547
1f358     04 4E 05 F1 | 	add	fp, #4
1f35c     A7 FA 01 FB | 	rdlong	result1, fp
1f360     18 4E 05 F1 | 	add	fp, #24
1f364     A7 18 02 FB | 	rdlong	arg04, fp
1f368     18 FA 05 F1 | 	add	result1, #24
1f36c     FD 18 62 FC | 	wrlong	arg04, result1
1f370     18 4E 85 F1 | 	sub	fp, #24
1f374     A7 FA 01 FB | 	rdlong	result1, fp
1f378     04 4E 85 F1 | 	sub	fp, #4
1f37c     08 FA 05 F1 | 	add	result1, #8
1f380     FD FA 09 FB | 	rdlong	result1, result1 wz
1f384     1C 00 90 5D |  if_ne	jmp	#LR__3548
1f388     04 4E 05 F1 | 	add	fp, #4
1f38c     A7 18 02 FB | 	rdlong	arg04, fp
1f390     18 4E 05 F1 | 	add	fp, #24
1f394     A7 FA 01 FB | 	rdlong	result1, fp
1f398     1C 4E 85 F1 | 	sub	fp, #28
1f39c     08 18 06 F1 | 	add	arg04, #8
1f3a0     0C FB 61 FC | 	wrlong	result1, arg04
1f3a4                 | LR__3548
1f3a4                 | LR__3549
1f3a4     04 4E 05 F1 | 	add	fp, #4
1f3a8     A7 18 02 FB | 	rdlong	arg04, fp
1f3ac     04 4E 85 F1 | 	sub	fp, #4
1f3b0     10 18 06 F1 | 	add	arg04, #16
1f3b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f3b8     80 18 CE F7 | 	test	arg04, #128 wz
1f3bc     7C 00 90 AD |  if_e	jmp	#LR__3551
1f3c0     18 4E 05 F1 | 	add	fp, #24
1f3c4     A7 18 02 FB | 	rdlong	arg04, fp
1f3c8     01 18 06 F1 | 	add	arg04, #1
1f3cc     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f3d0     14 4E 85 F1 | 	sub	fp, #20
1f3d4     A7 18 02 FB | 	rdlong	arg04, fp
1f3d8     0C 15 02 F6 | 	mov	arg02, arg04
1f3dc     28 14 06 F1 | 	add	arg02, #40
1f3e0     04 4E 85 F1 | 	sub	fp, #4
1f3e4     1C 18 06 F1 | 	add	arg04, #28
1f3e8     0C 17 02 FB | 	rdlong	arg03, arg04
1f3ec     01 18 06 F6 | 	mov	arg04, #1
1f3f0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
1f3f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f3f8     1C 00 90 AD |  if_e	jmp	#LR__3550
1f3fc     04 4E 05 F1 | 	add	fp, #4
1f400     A7 FA 01 FB | 	rdlong	result1, fp
1f404     04 4E 85 F1 | 	sub	fp, #4
1f408     11 FA 05 F1 | 	add	result1, #17
1f40c     FD 02 48 FC | 	wrbyte	#1, result1
1f410     01 FA 05 F6 | 	mov	result1, #1
1f414     A4 04 90 FD | 	jmp	#LR__3563
1f418                 | LR__3550
1f418     04 4E 05 F1 | 	add	fp, #4
1f41c     A7 18 02 FB | 	rdlong	arg04, fp
1f420     0C FB 01 F6 | 	mov	result1, arg04
1f424     04 4E 85 F1 | 	sub	fp, #4
1f428     10 18 06 F1 | 	add	arg04, #16
1f42c     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f430     7F 18 06 F5 | 	and	arg04, #127
1f434     10 FA 05 F1 | 	add	result1, #16
1f438     FD 18 42 FC | 	wrbyte	arg04, result1
1f43c                 | LR__3551
1f43c     18 4E 05 F1 | 	add	fp, #24
1f440     A7 12 02 FB | 	rdlong	arg01, fp
1f444     14 4E 85 F1 | 	sub	fp, #20
1f448     A7 14 02 FB | 	rdlong	arg02, fp
1f44c     04 4E 85 F1 | 	sub	fp, #4
1f450     18 14 06 F1 | 	add	arg02, #24
1f454     0A 15 02 FB | 	rdlong	arg02, arg02
1f458     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
1f45c     20 4E 05 F1 | 	add	fp, #32
1f460     A7 FA 61 FC | 	wrlong	result1, fp
1f464     20 4E 85 F1 | 	sub	fp, #32
1f468     00 FA 0D F2 | 	cmp	result1, #0 wz
1f46c     1C 00 90 5D |  if_ne	jmp	#LR__3552
1f470     04 4E 05 F1 | 	add	fp, #4
1f474     A7 FA 01 FB | 	rdlong	result1, fp
1f478     04 4E 85 F1 | 	sub	fp, #4
1f47c     11 FA 05 F1 | 	add	result1, #17
1f480     FD 04 48 FC | 	wrbyte	#2, result1
1f484     02 FA 05 F6 | 	mov	result1, #2
1f488     30 04 90 FD | 	jmp	#LR__3563
1f48c                 | LR__3552
1f48c     20 4E 05 F1 | 	add	fp, #32
1f490     A7 FA 01 FB | 	rdlong	result1, fp
1f494     0C 4E 05 F1 | 	add	fp, #12
1f498     A7 1E 02 FB | 	rdlong	local01, fp
1f49c     0F FB 01 F1 | 	add	result1, local01
1f4a0     0C 4E 85 F1 | 	sub	fp, #12
1f4a4     A7 FA 61 FC | 	wrlong	result1, fp
1f4a8     14 4E 85 F1 | 	sub	fp, #20
1f4ac     A7 FA 01 FB | 	rdlong	result1, fp
1f4b0     09 FA 45 F0 | 	shr	result1, #9
1f4b4     1C 4E 05 F1 | 	add	fp, #28
1f4b8     A7 FA 61 FC | 	wrlong	result1, fp
1f4bc     28 4E 85 F1 | 	sub	fp, #40
1f4c0     01 FA 15 F2 | 	cmp	result1, #1 wc
1f4c4     60 01 90 CD |  if_b	jmp	#LR__3556
1f4c8     2C 4E 05 F1 | 	add	fp, #44
1f4cc     A7 FA 01 FB | 	rdlong	result1, fp
1f4d0     04 4E 85 F1 | 	sub	fp, #4
1f4d4     A7 18 02 FB | 	rdlong	arg04, fp
1f4d8     0C FB 01 F1 | 	add	result1, arg04
1f4dc     10 4E 85 F1 | 	sub	fp, #16
1f4e0     A7 18 02 FB | 	rdlong	arg04, fp
1f4e4     18 4E 85 F1 | 	sub	fp, #24
1f4e8     0A 18 06 F1 | 	add	arg04, #10
1f4ec     0C 19 E2 FA | 	rdword	arg04, arg04
1f4f0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
1f4f4     28 00 90 ED |  if_be	jmp	#LR__3553
1f4f8     18 4E 05 F1 | 	add	fp, #24
1f4fc     A7 FA 01 FB | 	rdlong	result1, fp
1f500     0A FA 05 F1 | 	add	result1, #10
1f504     FD FA E1 FA | 	rdword	result1, result1
1f508     14 4E 05 F1 | 	add	fp, #20
1f50c     A7 18 02 FB | 	rdlong	arg04, fp
1f510     0C FB 81 F1 | 	sub	result1, arg04
1f514     04 4E 85 F1 | 	sub	fp, #4
1f518     A7 FA 61 FC | 	wrlong	result1, fp
1f51c     28 4E 85 F1 | 	sub	fp, #40
1f520                 | LR__3553
1f520     18 4E 05 F1 | 	add	fp, #24
1f524     A7 18 02 FB | 	rdlong	arg04, fp
1f528     01 18 06 F1 | 	add	arg04, #1
1f52c     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f530     18 4E 05 F1 | 	add	fp, #24
1f534     A7 14 02 FB | 	rdlong	arg02, fp
1f538     10 4E 85 F1 | 	sub	fp, #16
1f53c     A7 16 02 FB | 	rdlong	arg03, fp
1f540     08 4E 05 F1 | 	add	fp, #8
1f544     A7 18 02 FB | 	rdlong	arg04, fp
1f548     28 4E 85 F1 | 	sub	fp, #40
1f54c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
1f550     00 FA 0D F2 | 	cmp	result1, #0 wz
1f554     1C 00 90 AD |  if_e	jmp	#LR__3554
1f558     04 4E 05 F1 | 	add	fp, #4
1f55c     A7 1E 02 FB | 	rdlong	local01, fp
1f560     04 4E 85 F1 | 	sub	fp, #4
1f564     11 1E 06 F1 | 	add	local01, #17
1f568     0F 03 48 FC | 	wrbyte	#1, local01
1f56c     01 FA 05 F6 | 	mov	result1, #1
1f570     48 03 90 FD | 	jmp	#LR__3563
1f574                 | LR__3554
1f574     04 4E 05 F1 | 	add	fp, #4
1f578     A7 FA 01 FB | 	rdlong	result1, fp
1f57c     1C FA 05 F1 | 	add	result1, #28
1f580     FD FA 01 FB | 	rdlong	result1, result1
1f584     1C 4E 05 F1 | 	add	fp, #28
1f588     A7 20 02 FB | 	rdlong	local02, fp
1f58c     10 FB 81 F1 | 	sub	result1, local02
1f590     08 4E 05 F1 | 	add	fp, #8
1f594     A7 18 02 FB | 	rdlong	arg04, fp
1f598     28 4E 85 F1 | 	sub	fp, #40
1f59c     0C FB 11 F2 | 	cmp	result1, arg04 wc
1f5a0     68 00 90 3D |  if_ae	jmp	#LR__3555
1f5a4     04 4E 05 F1 | 	add	fp, #4
1f5a8     A7 12 02 FB | 	rdlong	arg01, fp
1f5ac     28 12 06 F1 | 	add	arg01, #40
1f5b0     2C 4E 05 F1 | 	add	fp, #44
1f5b4     A7 14 02 FB | 	rdlong	arg02, fp
1f5b8     2C 4E 85 F1 | 	sub	fp, #44
1f5bc     A7 FA 01 FB | 	rdlong	result1, fp
1f5c0     1C FA 05 F1 | 	add	result1, #28
1f5c4     FD 22 02 FB | 	rdlong	local03, result1
1f5c8     1C 4E 05 F1 | 	add	fp, #28
1f5cc     A7 18 02 FB | 	rdlong	arg04, fp
1f5d0     20 4E 85 F1 | 	sub	fp, #32
1f5d4     0C 23 82 F1 | 	sub	local03, arg04
1f5d8     09 22 66 F0 | 	shl	local03, #9
1f5dc     11 15 02 F1 | 	add	arg02, local03
1f5e0     09 16 C6 F9 | 	decod	arg03, #9
1f5e4     30 44 BF FD | 	call	#__system____builtin_memmove
1f5e8     04 4E 05 F1 | 	add	fp, #4
1f5ec     A7 18 02 FB | 	rdlong	arg04, fp
1f5f0     0C FB 01 F6 | 	mov	result1, arg04
1f5f4     04 4E 85 F1 | 	sub	fp, #4
1f5f8     10 18 06 F1 | 	add	arg04, #16
1f5fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f600     7F 18 06 F5 | 	and	arg04, #127
1f604     10 FA 05 F1 | 	add	result1, #16
1f608     FD 18 42 FC | 	wrbyte	arg04, result1
1f60c                 | LR__3555
1f60c     28 4E 05 F1 | 	add	fp, #40
1f610     A7 FA 01 FB | 	rdlong	result1, fp
1f614     09 FA 65 F0 | 	shl	result1, #9
1f618     04 4E 85 F1 | 	sub	fp, #4
1f61c     A7 FA 61 FC | 	wrlong	result1, fp
1f620     24 4E 85 F1 | 	sub	fp, #36
1f624                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
1f624                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
1f624                 | ' 				}
1f624                 | ' 
1f624                 | ' 
1f624                 | ' 				wcnt =  ((UINT) 512 )  * cc;
1f624                 | ' 				continue;
1f624     74 01 90 FD | 	jmp	#LR__3559
1f628                 | LR__3556
1f628     04 4E 05 F1 | 	add	fp, #4
1f62c     A7 20 02 FB | 	rdlong	local02, fp
1f630     1C 20 06 F1 | 	add	local02, #28
1f634     10 FB 01 FB | 	rdlong	result1, local02
1f638     1C 4E 05 F1 | 	add	fp, #28
1f63c     A7 20 02 FB | 	rdlong	local02, fp
1f640     20 4E 85 F1 | 	sub	fp, #32
1f644     10 FB 09 F2 | 	cmp	result1, local02 wz
1f648     90 00 90 AD |  if_e	jmp	#LR__3557
1f64c     04 4E 05 F1 | 	add	fp, #4
1f650     A7 FA 01 FB | 	rdlong	result1, fp
1f654     FD 22 02 F6 | 	mov	local03, result1
1f658     04 4E 85 F1 | 	sub	fp, #4
1f65c     14 22 06 F1 | 	add	local03, #20
1f660     11 23 02 FB | 	rdlong	local03, local03
1f664     0C FA 05 F1 | 	add	result1, #12
1f668     FD 24 02 FB | 	rdlong	local04, result1
1f66c     12 27 02 F6 | 	mov	local05, local04
1f670     13 23 12 F2 | 	cmp	local03, local05 wc
1f674     64 00 90 3D |  if_ae	jmp	#LR__3557
1f678     18 4E 05 F1 | 	add	fp, #24
1f67c     A7 18 02 FB | 	rdlong	arg04, fp
1f680     01 18 06 F1 | 	add	arg04, #1
1f684     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f688     14 4E 85 F1 | 	sub	fp, #20
1f68c     A7 28 02 FB | 	rdlong	local06, fp
1f690     28 28 06 F1 | 	add	local06, #40
1f694     14 2B 02 F6 | 	mov	local07, local06
1f698     1C 4E 05 F1 | 	add	fp, #28
1f69c     A7 2C 02 FB | 	rdlong	local08, fp
1f6a0     20 4E 85 F1 | 	sub	fp, #32
1f6a4     01 2E 06 F6 | 	mov	local09, #1
1f6a8     15 15 02 F6 | 	mov	arg02, local07
1f6ac     16 17 02 F6 | 	mov	arg03, local08
1f6b0     01 18 06 F6 | 	mov	arg04, #1
1f6b4     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
1f6b8     FD 30 0A F6 | 	mov	local10, result1 wz
1f6bc     1C 00 90 AD |  if_e	jmp	#LR__3557
1f6c0     04 4E 05 F1 | 	add	fp, #4
1f6c4     A7 30 02 FB | 	rdlong	local10, fp
1f6c8     04 4E 85 F1 | 	sub	fp, #4
1f6cc     11 30 06 F1 | 	add	local10, #17
1f6d0     18 03 48 FC | 	wrbyte	#1, local10
1f6d4                 | ' 				fp->fptr < fp->obj.objsize &&
1f6d4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
1f6d4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
1f6d4     01 FA 05 F6 | 	mov	result1, #1
1f6d8     E0 01 90 FD | 	jmp	#LR__3563
1f6dc                 | LR__3557
1f6dc     04 4E 05 F1 | 	add	fp, #4
1f6e0     A7 18 02 FB | 	rdlong	arg04, fp
1f6e4     1C 4E 05 F1 | 	add	fp, #28
1f6e8     A7 FA 01 FB | 	rdlong	result1, fp
1f6ec     20 4E 85 F1 | 	sub	fp, #32
1f6f0     1C 18 06 F1 | 	add	arg04, #28
1f6f4     0C FB 61 FC | 	wrlong	result1, arg04
1f6f8                 | LR__3558
1f6f8     04 4E 05 F1 | 	add	fp, #4
1f6fc     A7 FA 01 FB | 	rdlong	result1, fp
1f700     14 FA 05 F1 | 	add	result1, #20
1f704     FD FA 01 FB | 	rdlong	result1, result1
1f708     FF FB 05 F5 | 	and	result1, #511
1f70c     09 32 C6 F9 | 	decod	local11, #9
1f710     FD 32 82 F1 | 	sub	local11, result1
1f714     20 4E 05 F1 | 	add	fp, #32
1f718     A7 32 62 FC | 	wrlong	local11, fp
1f71c     18 4E 85 F1 | 	sub	fp, #24
1f720     A7 FA 01 FB | 	rdlong	result1, fp
1f724     0C 4E 85 F1 | 	sub	fp, #12
1f728     FD 32 1A F2 | 	cmp	local11, result1 wcz
1f72c     0C 4E 05 11 |  if_a	add	fp, #12
1f730     A7 32 02 1B |  if_a	rdlong	local11, fp
1f734     18 4E 05 11 |  if_a	add	fp, #24
1f738     A7 32 62 1C |  if_a	wrlong	local11, fp
1f73c     24 4E 85 11 |  if_a	sub	fp, #36
1f740     04 4E 05 F1 | 	add	fp, #4
1f744     A7 32 02 FB | 	rdlong	local11, fp
1f748     19 13 02 F6 | 	mov	arg01, local11
1f74c     28 12 06 F1 | 	add	arg01, #40
1f750     14 32 06 F1 | 	add	local11, #20
1f754     19 33 02 FB | 	rdlong	local11, local11
1f758     FF 33 06 F5 | 	and	local11, #511
1f75c     19 13 02 F1 | 	add	arg01, local11
1f760     2C 4E 05 F1 | 	add	fp, #44
1f764     A7 14 02 FB | 	rdlong	arg02, fp
1f768     0C 4E 85 F1 | 	sub	fp, #12
1f76c     A7 16 02 FB | 	rdlong	arg03, fp
1f770     24 4E 85 F1 | 	sub	fp, #36
1f774     A0 42 BF FD | 	call	#__system____builtin_memmove
1f778     04 4E 05 F1 | 	add	fp, #4
1f77c     A7 FA 01 FB | 	rdlong	result1, fp
1f780     FD 32 02 F6 | 	mov	local11, result1
1f784     04 4E 85 F1 | 	sub	fp, #4
1f788     10 FA 05 F1 | 	add	result1, #16
1f78c     FD FA C1 FA | 	rdbyte	result1, result1
1f790     80 FA 45 F5 | 	or	result1, #128
1f794     10 32 06 F1 | 	add	local11, #16
1f798     19 FB 41 FC | 	wrbyte	result1, local11
1f79c                 | LR__3559
1f79c     0C 4E 05 F1 | 	add	fp, #12
1f7a0     A7 32 02 FB | 	rdlong	local11, fp
1f7a4     18 4E 05 F1 | 	add	fp, #24
1f7a8     A7 FA 01 FB | 	rdlong	result1, fp
1f7ac     FD 32 82 F1 | 	sub	local11, result1
1f7b0     18 4E 85 F1 | 	sub	fp, #24
1f7b4     A7 32 62 FC | 	wrlong	local11, fp
1f7b8     04 4E 05 F1 | 	add	fp, #4
1f7bc     A7 34 02 FB | 	rdlong	local12, fp
1f7c0     1A 33 02 FB | 	rdlong	local11, local12
1f7c4     14 4E 05 F1 | 	add	fp, #20
1f7c8     A7 36 02 FB | 	rdlong	local13, fp
1f7cc     1B 33 02 F1 | 	add	local11, local13
1f7d0     1A 33 62 FC | 	wrlong	local11, local12
1f7d4     0C 4E 05 F1 | 	add	fp, #12
1f7d8     A7 32 02 FB | 	rdlong	local11, fp
1f7dc     0C 4E 85 F1 | 	sub	fp, #12
1f7e0     A7 38 02 FB | 	rdlong	local14, fp
1f7e4     1C 33 02 F1 | 	add	local11, local14
1f7e8     0C 4E 05 F1 | 	add	fp, #12
1f7ec     A7 32 62 FC | 	wrlong	local11, fp
1f7f0     2C 4E 85 F1 | 	sub	fp, #44
1f7f4     A7 3A 02 FB | 	rdlong	local15, fp
1f7f8     1D 33 02 F6 | 	mov	local11, local15
1f7fc     14 3A 06 F1 | 	add	local15, #20
1f800     1D 3B 02 FB | 	rdlong	local15, local15
1f804     20 4E 05 F1 | 	add	fp, #32
1f808     A7 3C 02 FB | 	rdlong	local16, fp
1f80c     1E 3B 02 F1 | 	add	local15, local16
1f810     14 32 06 F1 | 	add	local11, #20
1f814     19 3B 62 FC | 	wrlong	local15, local11
1f818     20 4E 85 F1 | 	sub	fp, #32
1f81c     A7 3E 02 FB | 	rdlong	local17, fp
1f820     1F 33 02 F6 | 	mov	local11, local17
1f824     1F 41 02 F6 | 	mov	local18, local17
1f828     04 4E 85 F1 | 	sub	fp, #4
1f82c     14 3E 06 F1 | 	add	local17, #20
1f830     1F 43 02 FB | 	rdlong	local19, local17
1f834     0C 40 06 F1 | 	add	local18, #12
1f838     20 45 02 FB | 	rdlong	local20, local18
1f83c     22 43 1A F2 | 	cmp	local19, local20 wcz
1f840     24 00 90 ED |  if_be	jmp	#LR__3560
1f844     04 4E 05 F1 | 	add	fp, #4
1f848     A7 26 02 FB | 	rdlong	local05, fp
1f84c     04 4E 85 F1 | 	sub	fp, #4
1f850     13 23 02 F6 | 	mov	local03, local05
1f854     14 22 06 F1 | 	add	local03, #20
1f858     11 25 02 FB | 	rdlong	local04, local03
1f85c     14 22 86 F1 | 	sub	local03, #20
1f860     12 47 02 F6 | 	mov	local21, local04
1f864     20 00 90 FD | 	jmp	#LR__3561
1f868                 | LR__3560
1f868     04 4E 05 F1 | 	add	fp, #4
1f86c     A7 2A 02 FB | 	rdlong	local07, fp
1f870     04 4E 85 F1 | 	sub	fp, #4
1f874     15 31 02 F6 | 	mov	local10, local07
1f878     0C 30 06 F1 | 	add	local10, #12
1f87c     18 2D 02 FB | 	rdlong	local08, local10
1f880     0C 30 86 F1 | 	sub	local10, #12
1f884     16 47 02 F6 | 	mov	local21, local08
1f888                 | LR__3561
1f888     0C 32 06 F1 | 	add	local11, #12
1f88c     19 47 62 FC | 	wrlong	local21, local11
1f890     5C F9 9F FD | 	jmp	#LR__3543
1f894                 | LR__3562
1f894     04 4E 05 F1 | 	add	fp, #4
1f898     A7 34 02 FB | 	rdlong	local12, fp
1f89c     1A 1F 02 F6 | 	mov	local01, local12
1f8a0     04 4E 85 F1 | 	sub	fp, #4
1f8a4     10 34 06 F1 | 	add	local12, #16
1f8a8     1A 33 C2 FA | 	rdbyte	local11, local12
1f8ac     40 32 46 F5 | 	or	local11, #64
1f8b0     10 1E 06 F1 | 	add	local01, #16
1f8b4     0F 33 42 FC | 	wrbyte	local11, local01
1f8b8                 | ' 
1f8b8                 | ' 
1f8b8                 | ' 
1f8b8                 | ' 
1f8b8                 | ' 
1f8b8                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
1f8b8                 | ' 		fp->flag |=  0x80 ;
1f8b8                 | ' 
1f8b8                 | ' 	}
1f8b8                 | ' 
1f8b8                 | ' 	fp->flag |=  0x40 ;
1f8b8                 | ' 
1f8b8                 | ' 	return FR_OK ;
1f8b8     00 FA 05 F6 | 	mov	result1, #0
1f8bc                 | LR__3563
1f8bc     A7 F0 03 F6 | 	mov	ptra, fp
1f8c0     B2 00 A0 FD | 	call	#popregs_
1f8c4                 | _fatfs_cc_f_write_ret
1f8c4     2D 00 64 FD | 	ret
1f8c8                 | 
1f8c8                 | _fatfs_cc_f_sync
1f8c8     00 4A 05 F6 | 	mov	COUNT_, #0
1f8cc     A8 00 A0 FD | 	call	#pushregs_
1f8d0     18 F0 07 F1 | 	add	ptra, #24
1f8d4     04 4E 05 F1 | 	add	fp, #4
1f8d8     A7 12 62 FC | 	wrlong	arg01, fp
1f8dc     08 4E 05 F1 | 	add	fp, #8
1f8e0     A7 14 02 F6 | 	mov	arg02, fp
1f8e4     0C 4E 85 F1 | 	sub	fp, #12
1f8e8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
1f8ec     08 4E 05 F1 | 	add	fp, #8
1f8f0     A7 FA 61 FC | 	wrlong	result1, fp
1f8f4     08 4E 85 F1 | 	sub	fp, #8
1f8f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f8fc     C0 01 90 5D |  if_ne	jmp	#LR__3573
1f900     04 4E 05 F1 | 	add	fp, #4
1f904     A7 18 02 FB | 	rdlong	arg04, fp
1f908     04 4E 85 F1 | 	sub	fp, #4
1f90c     10 18 06 F1 | 	add	arg04, #16
1f910     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f914     40 18 CE F7 | 	test	arg04, #64 wz
1f918     A4 01 90 AD |  if_e	jmp	#LR__3572
1f91c     04 4E 05 F1 | 	add	fp, #4
1f920     A7 18 02 FB | 	rdlong	arg04, fp
1f924     04 4E 85 F1 | 	sub	fp, #4
1f928     10 18 06 F1 | 	add	arg04, #16
1f92c     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f930     80 18 CE F7 | 	test	arg04, #128 wz
1f934     64 00 90 AD |  if_e	jmp	#LR__3570
1f938     0C 4E 05 F1 | 	add	fp, #12
1f93c     A7 18 02 FB | 	rdlong	arg04, fp
1f940     01 18 06 F1 | 	add	arg04, #1
1f944     0C 13 C2 FA | 	rdbyte	arg01, arg04
1f948     08 4E 85 F1 | 	sub	fp, #8
1f94c     A7 18 02 FB | 	rdlong	arg04, fp
1f950     0C 15 02 F6 | 	mov	arg02, arg04
1f954     28 14 06 F1 | 	add	arg02, #40
1f958     04 4E 85 F1 | 	sub	fp, #4
1f95c     1C 18 06 F1 | 	add	arg04, #28
1f960     0C 17 02 FB | 	rdlong	arg03, arg04
1f964     01 18 06 F6 | 	mov	arg04, #1
1f968     0C AE BF FD | 	call	#_fatfs_cc_disk_write
1f96c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f970     01 FA 05 56 |  if_ne	mov	result1, #1
1f974     54 01 90 5D |  if_ne	jmp	#LR__3574
1f978     04 4E 05 F1 | 	add	fp, #4
1f97c     A7 18 02 FB | 	rdlong	arg04, fp
1f980     0C 17 02 F6 | 	mov	arg03, arg04
1f984     04 4E 85 F1 | 	sub	fp, #4
1f988     10 18 06 F1 | 	add	arg04, #16
1f98c     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f990     7F 18 06 F5 | 	and	arg04, #127
1f994     10 16 06 F1 | 	add	arg03, #16
1f998     0B 19 42 FC | 	wrbyte	arg04, arg03
1f99c                 | LR__3570
1f99c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
1f9a0     10 4E 05 F1 | 	add	fp, #16
1f9a4     A7 FA 61 FC | 	wrlong	result1, fp
1f9a8     04 4E 85 F1 | 	sub	fp, #4
1f9ac     A7 12 02 FB | 	rdlong	arg01, fp
1f9b0     08 4E 85 F1 | 	sub	fp, #8
1f9b4     A7 18 02 FB | 	rdlong	arg04, fp
1f9b8     04 4E 85 F1 | 	sub	fp, #4
1f9bc     20 18 06 F1 | 	add	arg04, #32
1f9c0     0C 15 02 FB | 	rdlong	arg02, arg04
1f9c4     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
1f9c8     08 4E 05 F1 | 	add	fp, #8
1f9cc     A7 FA 61 FC | 	wrlong	result1, fp
1f9d0     08 4E 85 F1 | 	sub	fp, #8
1f9d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f9d8     E4 00 90 5D |  if_ne	jmp	#LR__3571
1f9dc     04 4E 05 F1 | 	add	fp, #4
1f9e0     A7 18 02 FB | 	rdlong	arg04, fp
1f9e4     24 18 06 F1 | 	add	arg04, #36
1f9e8     0C 19 02 FB | 	rdlong	arg04, arg04
1f9ec     10 4E 05 F1 | 	add	fp, #16
1f9f0     A7 18 62 FC | 	wrlong	arg04, fp
1f9f4     0C 17 02 F6 | 	mov	arg03, arg04
1f9f8     0B 16 06 F1 | 	add	arg03, #11
1f9fc     0B 17 C2 FA | 	rdbyte	arg03, arg03
1fa00     20 16 46 F5 | 	or	arg03, #32
1fa04     0B 18 06 F1 | 	add	arg04, #11
1fa08     0C 17 42 FC | 	wrbyte	arg03, arg04
1fa0c     10 4E 85 F1 | 	sub	fp, #16
1fa10     A7 18 02 FB | 	rdlong	arg04, fp
1fa14     0C 13 02 FB | 	rdlong	arg01, arg04
1fa18     10 4E 05 F1 | 	add	fp, #16
1fa1c     A7 14 02 FB | 	rdlong	arg02, fp
1fa20     14 4E 85 F1 | 	sub	fp, #20
1fa24     08 18 06 F1 | 	add	arg04, #8
1fa28     0C 17 02 FB | 	rdlong	arg03, arg04
1fa2c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
1fa30     14 4E 05 F1 | 	add	fp, #20
1fa34     A7 12 02 FB | 	rdlong	arg01, fp
1fa38     1C 12 06 F1 | 	add	arg01, #28
1fa3c     10 4E 85 F1 | 	sub	fp, #16
1fa40     A7 18 02 FB | 	rdlong	arg04, fp
1fa44     0C 18 06 F1 | 	add	arg04, #12
1fa48     0C 15 02 FB | 	rdlong	arg02, arg04
1fa4c     09 15 62 FC | 	wrlong	arg02, arg01
1fa50     10 4E 05 F1 | 	add	fp, #16
1fa54     A7 12 02 FB | 	rdlong	arg01, fp
1fa58     16 12 06 F1 | 	add	arg01, #22
1fa5c     04 4E 85 F1 | 	sub	fp, #4
1fa60     A7 14 02 FB | 	rdlong	arg02, fp
1fa64     09 15 62 FC | 	wrlong	arg02, arg01
1fa68     04 4E 05 F1 | 	add	fp, #4
1fa6c     A7 12 02 FB | 	rdlong	arg01, fp
1fa70     12 12 06 F1 | 	add	arg01, #18
1fa74     09 01 58 FC | 	wrword	#0, arg01
1fa78     08 4E 85 F1 | 	sub	fp, #8
1fa7c     A7 18 02 FB | 	rdlong	arg04, fp
1fa80     03 18 06 F1 | 	add	arg04, #3
1fa84     0C 03 48 FC | 	wrbyte	#1, arg04
1fa88     A7 12 02 FB | 	rdlong	arg01, fp
1fa8c     0C 4E 85 F1 | 	sub	fp, #12
1fa90     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
1fa94     08 4E 05 F1 | 	add	fp, #8
1fa98     A7 FA 61 FC | 	wrlong	result1, fp
1fa9c     04 4E 85 F1 | 	sub	fp, #4
1faa0     A7 18 02 FB | 	rdlong	arg04, fp
1faa4     0C 17 02 F6 | 	mov	arg03, arg04
1faa8     04 4E 85 F1 | 	sub	fp, #4
1faac     10 18 06 F1 | 	add	arg04, #16
1fab0     0C 19 C2 FA | 	rdbyte	arg04, arg04
1fab4     BF 18 06 F5 | 	and	arg04, #191
1fab8     10 16 06 F1 | 	add	arg03, #16
1fabc     0B 19 42 FC | 	wrbyte	arg04, arg03
1fac0                 | LR__3571
1fac0                 | LR__3572
1fac0                 | LR__3573
1fac0                 | ' 					dir = fp->dir_ptr;
1fac0                 | ' 					dir[ 11 ] |=  0x20 ;
1fac0                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
1fac0                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
1fac0                 | ' 					st_dword(dir +  22 , tm);
1fac0                 | ' 					st_word(dir +  18 , 0);
1fac0                 | ' 					fs->wflag = 1;
1fac0                 | ' 					res = sync_fs(fs);
1fac0                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
1fac0                 | ' 				}
1fac0                 | ' 			}
1fac0                 | ' 		}
1fac0                 | ' 	}
1fac0                 | ' 
1fac0                 | ' 	return res ;
1fac0     08 4E 05 F1 | 	add	fp, #8
1fac4     A7 FA 01 FB | 	rdlong	result1, fp
1fac8     08 4E 85 F1 | 	sub	fp, #8
1facc                 | LR__3574
1facc     A7 F0 03 F6 | 	mov	ptra, fp
1fad0     B2 00 A0 FD | 	call	#popregs_
1fad4                 | _fatfs_cc_f_sync_ret
1fad4     2D 00 64 FD | 	ret
1fad8                 | 
1fad8                 | _fatfs_cc_f_close
1fad8     01 4A 05 F6 | 	mov	COUNT_, #1
1fadc     A8 00 A0 FD | 	call	#pushregs_
1fae0     10 F0 07 F1 | 	add	ptra, #16
1fae4     04 4E 05 F1 | 	add	fp, #4
1fae8     A7 12 62 FC | 	wrlong	arg01, fp
1faec     04 4E 85 F1 | 	sub	fp, #4
1faf0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
1faf4     08 4E 05 F1 | 	add	fp, #8
1faf8     A7 FA 61 FC | 	wrlong	result1, fp
1fafc     08 4E 85 F1 | 	sub	fp, #8
1fb00     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb04     38 00 90 5D |  if_ne	jmp	#LR__3580
1fb08     04 4E 05 F1 | 	add	fp, #4
1fb0c     A7 12 02 FB | 	rdlong	arg01, fp
1fb10     08 4E 05 F1 | 	add	fp, #8
1fb14     A7 14 02 F6 | 	mov	arg02, fp
1fb18     0C 4E 85 F1 | 	sub	fp, #12
1fb1c     9C E6 BF FD | 	call	#_fatfs_cc_validate
1fb20     08 4E 05 F1 | 	add	fp, #8
1fb24     A7 FA 61 FC | 	wrlong	result1, fp
1fb28     08 4E 85 F1 | 	sub	fp, #8
1fb2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb30     04 4E 05 A1 |  if_e	add	fp, #4
1fb34     A7 1E 02 AB |  if_e	rdlong	local01, fp
1fb38     04 4E 85 A1 |  if_e	sub	fp, #4
1fb3c     0F 01 68 AC |  if_e	wrlong	#0, local01
1fb40                 | LR__3580
1fb40                 | ' 
1fb40                 | ' 
1fb40                 | ' 
1fb40                 | ' 
1fb40                 | ' 			fp->obj.fs = 0;
1fb40                 | ' #line 4192 "ff.c"
1fb40                 | ' 		}
1fb40                 | ' 	}
1fb40                 | ' 	return res;
1fb40     08 4E 05 F1 | 	add	fp, #8
1fb44     A7 FA 01 FB | 	rdlong	result1, fp
1fb48     08 4E 85 F1 | 	sub	fp, #8
1fb4c     A7 F0 03 F6 | 	mov	ptra, fp
1fb50     B2 00 A0 FD | 	call	#popregs_
1fb54                 | _fatfs_cc_f_close_ret
1fb54     2D 00 64 FD | 	ret
1fb58                 | 
1fb58                 | _fatfs_cc_f_lseek
1fb58     00 4A 05 F6 | 	mov	COUNT_, #0
1fb5c     A8 00 A0 FD | 	call	#pushregs_
1fb60     24 F0 07 F1 | 	add	ptra, #36
1fb64     04 4E 05 F1 | 	add	fp, #4
1fb68     A7 12 62 FC | 	wrlong	arg01, fp
1fb6c     04 4E 05 F1 | 	add	fp, #4
1fb70     A7 14 62 FC | 	wrlong	arg02, fp
1fb74     04 4E 85 F1 | 	sub	fp, #4
1fb78     A7 12 02 FB | 	rdlong	arg01, fp
1fb7c     0C 4E 05 F1 | 	add	fp, #12
1fb80     A7 14 02 F6 | 	mov	arg02, fp
1fb84     10 4E 85 F1 | 	sub	fp, #16
1fb88     30 E6 BF FD | 	call	#_fatfs_cc_validate
1fb8c     0C 4E 05 F1 | 	add	fp, #12
1fb90     A7 FA 61 FC | 	wrlong	result1, fp
1fb94     0C 4E 85 F1 | 	sub	fp, #12
1fb98     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb9c     1C 00 90 5D |  if_ne	jmp	#LR__3590
1fba0     04 4E 05 F1 | 	add	fp, #4
1fba4     A7 18 02 FB | 	rdlong	arg04, fp
1fba8     11 18 06 F1 | 	add	arg04, #17
1fbac     0C 19 C2 FA | 	rdbyte	arg04, arg04
1fbb0     08 4E 05 F1 | 	add	fp, #8
1fbb4     A7 18 62 FC | 	wrlong	arg04, fp
1fbb8     0C 4E 85 F1 | 	sub	fp, #12
1fbbc                 | LR__3590
1fbbc     0C 4E 05 F1 | 	add	fp, #12
1fbc0     A7 18 0A FB | 	rdlong	arg04, fp wz
1fbc4     0C 4E 85 F1 | 	sub	fp, #12
1fbc8     0C 4E 05 51 |  if_ne	add	fp, #12
1fbcc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1fbd0     0C 4E 85 51 |  if_ne	sub	fp, #12
1fbd4     40 06 90 5D |  if_ne	jmp	#LR__3613
1fbd8     04 4E 05 F1 | 	add	fp, #4
1fbdc     A7 18 02 FB | 	rdlong	arg04, fp
1fbe0     04 4E 05 F1 | 	add	fp, #4
1fbe4     A7 16 02 FB | 	rdlong	arg03, fp
1fbe8     08 4E 85 F1 | 	sub	fp, #8
1fbec     0C 18 06 F1 | 	add	arg04, #12
1fbf0     0C 19 02 FB | 	rdlong	arg04, arg04
1fbf4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
1fbf8     3C 00 90 ED |  if_be	jmp	#LR__3591
1fbfc     04 4E 05 F1 | 	add	fp, #4
1fc00     A7 16 02 FB | 	rdlong	arg03, fp
1fc04     04 4E 85 F1 | 	sub	fp, #4
1fc08     10 16 06 F1 | 	add	arg03, #16
1fc0c     0B 17 C2 FA | 	rdbyte	arg03, arg03
1fc10     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1fc14     02 16 CE F7 | 	test	arg03, #2 wz
1fc18     1C 00 90 5D |  if_ne	jmp	#LR__3591
1fc1c     04 4E 05 F1 | 	add	fp, #4
1fc20     A7 16 02 FB | 	rdlong	arg03, fp
1fc24     0C 16 06 F1 | 	add	arg03, #12
1fc28     0B 17 02 FB | 	rdlong	arg03, arg03
1fc2c     04 4E 05 F1 | 	add	fp, #4
1fc30     A7 16 62 FC | 	wrlong	arg03, fp
1fc34     08 4E 85 F1 | 	sub	fp, #8
1fc38                 | LR__3591
1fc38     04 4E 05 F1 | 	add	fp, #4
1fc3c     A7 16 02 FB | 	rdlong	arg03, fp
1fc40     14 16 06 F1 | 	add	arg03, #20
1fc44     0B 17 02 FB | 	rdlong	arg03, arg03
1fc48     1C 4E 05 F1 | 	add	fp, #28
1fc4c     A7 16 62 FC | 	wrlong	arg03, fp
1fc50     1C 4E 85 F1 | 	sub	fp, #28
1fc54     A7 16 02 FB | 	rdlong	arg03, fp
1fc58     18 4E 05 F1 | 	add	fp, #24
1fc5c     A7 00 68 FC | 	wrlong	#0, fp
1fc60     14 16 06 F1 | 	add	arg03, #20
1fc64     0B 01 68 FC | 	wrlong	#0, arg03
1fc68     14 4E 85 F1 | 	sub	fp, #20
1fc6c     A7 16 02 FB | 	rdlong	arg03, fp
1fc70     08 4E 85 F1 | 	sub	fp, #8
1fc74     01 16 16 F2 | 	cmp	arg03, #1 wc
1fc78     E4 03 90 CD |  if_b	jmp	#LR__3607
1fc7c     10 4E 05 F1 | 	add	fp, #16
1fc80     A7 16 02 FB | 	rdlong	arg03, fp
1fc84     0A 16 06 F1 | 	add	arg03, #10
1fc88     0B 19 E2 FA | 	rdword	arg04, arg03
1fc8c     09 18 66 F0 | 	shl	arg04, #9
1fc90     08 4E 05 F1 | 	add	fp, #8
1fc94     A7 18 62 FC | 	wrlong	arg04, fp
1fc98     08 4E 05 F1 | 	add	fp, #8
1fc9c     A7 18 02 FB | 	rdlong	arg04, fp
1fca0     20 4E 85 F1 | 	sub	fp, #32
1fca4     01 18 16 F2 | 	cmp	arg04, #1 wc
1fca8     AC 00 90 CD |  if_b	jmp	#LR__3592
1fcac     08 4E 05 F1 | 	add	fp, #8
1fcb0     A7 18 02 FB | 	rdlong	arg04, fp
1fcb4     01 18 86 F1 | 	sub	arg04, #1
1fcb8     10 4E 05 F1 | 	add	fp, #16
1fcbc     A7 16 02 FB | 	rdlong	arg03, fp
1fcc0     0B 19 12 FD | 	qdiv	arg04, arg03
1fcc4     08 4E 05 F1 | 	add	fp, #8
1fcc8     A7 FA 01 FB | 	rdlong	result1, fp
1fccc     01 FA 85 F1 | 	sub	result1, #1
1fcd0     18 18 62 FD | 	getqx	arg04
1fcd4     0B FB 11 FD | 	qdiv	result1, arg03
1fcd8     20 4E 85 F1 | 	sub	fp, #32
1fcdc     18 16 62 FD | 	getqx	arg03
1fce0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
1fce4     70 00 90 CD |  if_b	jmp	#LR__3592
1fce8     04 4E 05 F1 | 	add	fp, #4
1fcec     A7 16 02 FB | 	rdlong	arg03, fp
1fcf0     1C 4E 05 F1 | 	add	fp, #28
1fcf4     A7 FA 01 FB | 	rdlong	result1, fp
1fcf8     01 FA 85 F1 | 	sub	result1, #1
1fcfc     08 4E 85 F1 | 	sub	fp, #8
1fd00     A7 18 02 FB | 	rdlong	arg04, fp
1fd04     01 18 86 F1 | 	sub	arg04, #1
1fd08     0C FB 21 F5 | 	andn	result1, arg04
1fd0c     14 16 06 F1 | 	add	arg03, #20
1fd10     0B FB 61 FC | 	wrlong	result1, arg03
1fd14     10 4E 85 F1 | 	sub	fp, #16
1fd18     A7 16 02 FB | 	rdlong	arg03, fp
1fd1c     04 4E 85 F1 | 	sub	fp, #4
1fd20     A7 18 02 FB | 	rdlong	arg04, fp
1fd24     14 18 06 F1 | 	add	arg04, #20
1fd28     0C 19 02 FB | 	rdlong	arg04, arg04
1fd2c     0C 17 82 F1 | 	sub	arg03, arg04
1fd30     04 4E 05 F1 | 	add	fp, #4
1fd34     A7 16 62 FC | 	wrlong	arg03, fp
1fd38     04 4E 85 F1 | 	sub	fp, #4
1fd3c     A7 16 02 FB | 	rdlong	arg03, fp
1fd40     18 16 06 F1 | 	add	arg03, #24
1fd44     0B 17 02 FB | 	rdlong	arg03, arg03
1fd48     10 4E 05 F1 | 	add	fp, #16
1fd4c     A7 16 62 FC | 	wrlong	arg03, fp
1fd50     14 4E 85 F1 | 	sub	fp, #20
1fd54     D0 00 90 FD | 	jmp	#LR__3596
1fd58                 | LR__3592
1fd58     04 4E 05 F1 | 	add	fp, #4
1fd5c     A7 16 02 FB | 	rdlong	arg03, fp
1fd60     08 16 06 F1 | 	add	arg03, #8
1fd64     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1fd68     10 4E 05 F1 | 	add	fp, #16
1fd6c     A7 16 62 FC | 	wrlong	arg03, fp
1fd70     14 4E 85 F1 | 	sub	fp, #20
1fd74     94 00 90 5D |  if_ne	jmp	#LR__3595
1fd78     04 4E 05 F1 | 	add	fp, #4
1fd7c     A7 12 02 FB | 	rdlong	arg01, fp
1fd80     04 4E 85 F1 | 	sub	fp, #4
1fd84     00 14 06 F6 | 	mov	arg02, #0
1fd88     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
1fd8c     14 4E 05 F1 | 	add	fp, #20
1fd90     A7 FA 61 FC | 	wrlong	result1, fp
1fd94     14 4E 85 F1 | 	sub	fp, #20
1fd98     01 FA 0D F2 | 	cmp	result1, #1 wz
1fd9c     1C 00 90 5D |  if_ne	jmp	#LR__3593
1fda0     04 4E 05 F1 | 	add	fp, #4
1fda4     A7 16 02 FB | 	rdlong	arg03, fp
1fda8     04 4E 85 F1 | 	sub	fp, #4
1fdac     11 16 06 F1 | 	add	arg03, #17
1fdb0     0B 05 48 FC | 	wrbyte	#2, arg03
1fdb4     02 FA 05 F6 | 	mov	result1, #2
1fdb8     5C 04 90 FD | 	jmp	#LR__3613
1fdbc                 | LR__3593
1fdbc     14 4E 05 F1 | 	add	fp, #20
1fdc0     A7 FA 01 FB | 	rdlong	result1, fp
1fdc4     14 4E 85 F1 | 	sub	fp, #20
1fdc8     FF FF 7F FF 
1fdcc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fdd0     1C 00 90 5D |  if_ne	jmp	#LR__3594
1fdd4     04 4E 05 F1 | 	add	fp, #4
1fdd8     A7 16 02 FB | 	rdlong	arg03, fp
1fddc     04 4E 85 F1 | 	sub	fp, #4
1fde0     11 16 06 F1 | 	add	arg03, #17
1fde4     0B 03 48 FC | 	wrbyte	#1, arg03
1fde8     01 FA 05 F6 | 	mov	result1, #1
1fdec     28 04 90 FD | 	jmp	#LR__3613
1fdf0                 | LR__3594
1fdf0     04 4E 05 F1 | 	add	fp, #4
1fdf4     A7 16 02 FB | 	rdlong	arg03, fp
1fdf8     10 4E 05 F1 | 	add	fp, #16
1fdfc     A7 18 02 FB | 	rdlong	arg04, fp
1fe00     14 4E 85 F1 | 	sub	fp, #20
1fe04     08 16 06 F1 | 	add	arg03, #8
1fe08     0B 19 62 FC | 	wrlong	arg04, arg03
1fe0c                 | LR__3595
1fe0c     04 4E 05 F1 | 	add	fp, #4
1fe10     A7 16 02 FB | 	rdlong	arg03, fp
1fe14     10 4E 05 F1 | 	add	fp, #16
1fe18     A7 18 02 FB | 	rdlong	arg04, fp
1fe1c     14 4E 85 F1 | 	sub	fp, #20
1fe20     18 16 06 F1 | 	add	arg03, #24
1fe24     0B 19 62 FC | 	wrlong	arg04, arg03
1fe28                 | LR__3596
1fe28     14 4E 05 F1 | 	add	fp, #20
1fe2c     A7 16 0A FB | 	rdlong	arg03, fp wz
1fe30     14 4E 85 F1 | 	sub	fp, #20
1fe34     28 02 90 AD |  if_e	jmp	#LR__3606
1fe38                 | ' 				while (ofs > bcs) {
1fe38                 | LR__3597
1fe38     08 4E 05 F1 | 	add	fp, #8
1fe3c     A7 18 02 FB | 	rdlong	arg04, fp
1fe40     10 4E 05 F1 | 	add	fp, #16
1fe44     A7 16 02 FB | 	rdlong	arg03, fp
1fe48     18 4E 85 F1 | 	sub	fp, #24
1fe4c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
1fe50     68 01 90 ED |  if_be	jmp	#LR__3603
1fe54     08 4E 05 F1 | 	add	fp, #8
1fe58     A7 18 02 FB | 	rdlong	arg04, fp
1fe5c     10 4E 05 F1 | 	add	fp, #16
1fe60     A7 16 02 FB | 	rdlong	arg03, fp
1fe64     0B 19 82 F1 | 	sub	arg04, arg03
1fe68     10 4E 85 F1 | 	sub	fp, #16
1fe6c     A7 18 62 FC | 	wrlong	arg04, fp
1fe70     04 4E 85 F1 | 	sub	fp, #4
1fe74     A7 18 02 FB | 	rdlong	arg04, fp
1fe78     0C FB 01 F6 | 	mov	result1, arg04
1fe7c     14 18 06 F1 | 	add	arg04, #20
1fe80     0C 19 02 FB | 	rdlong	arg04, arg04
1fe84     14 4E 05 F1 | 	add	fp, #20
1fe88     A7 16 02 FB | 	rdlong	arg03, fp
1fe8c     0B 19 02 F1 | 	add	arg04, arg03
1fe90     14 FA 05 F1 | 	add	result1, #20
1fe94     FD 18 62 FC | 	wrlong	arg04, result1
1fe98     14 4E 85 F1 | 	sub	fp, #20
1fe9c     A7 16 02 FB | 	rdlong	arg03, fp
1fea0     04 4E 85 F1 | 	sub	fp, #4
1fea4     10 16 06 F1 | 	add	arg03, #16
1fea8     0B 17 C2 FA | 	rdbyte	arg03, arg03
1feac     02 16 CE F7 | 	test	arg03, #2 wz
1feb0     3C 00 90 AD |  if_e	jmp	#LR__3598
1feb4     04 4E 05 F1 | 	add	fp, #4
1feb8     A7 12 02 FB | 	rdlong	arg01, fp
1febc     10 4E 05 F1 | 	add	fp, #16
1fec0     A7 14 02 FB | 	rdlong	arg02, fp
1fec4     14 4E 85 F1 | 	sub	fp, #20
1fec8     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
1fecc     14 4E 05 F1 | 	add	fp, #20
1fed0     A7 FA 61 FC | 	wrlong	result1, fp
1fed4     00 FA 4D F2 | 	cmps	result1, #0 wz
1fed8     14 4E 85 F1 | 	sub	fp, #20
1fedc     08 4E 05 A1 |  if_e	add	fp, #8
1fee0     A7 00 68 AC |  if_e	wrlong	#0, fp
1fee4     08 4E 85 A1 |  if_e	sub	fp, #8
1fee8                 | ' 							ofs = 0; break;
1fee8     D0 00 90 AD |  if_e	jmp	#LR__3603
1feec     24 00 90 FD | 	jmp	#LR__3599
1fef0                 | LR__3598
1fef0     04 4E 05 F1 | 	add	fp, #4
1fef4     A7 12 02 FB | 	rdlong	arg01, fp
1fef8     10 4E 05 F1 | 	add	fp, #16
1fefc     A7 14 02 FB | 	rdlong	arg02, fp
1ff00     14 4E 85 F1 | 	sub	fp, #20
1ff04     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
1ff08     14 4E 05 F1 | 	add	fp, #20
1ff0c     A7 FA 61 FC | 	wrlong	result1, fp
1ff10     14 4E 85 F1 | 	sub	fp, #20
1ff14                 | LR__3599
1ff14     14 4E 05 F1 | 	add	fp, #20
1ff18     A7 16 02 FB | 	rdlong	arg03, fp
1ff1c     14 4E 85 F1 | 	sub	fp, #20
1ff20     FF FF 7F FF 
1ff24     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
1ff28     1C 00 90 5D |  if_ne	jmp	#LR__3600
1ff2c     04 4E 05 F1 | 	add	fp, #4
1ff30     A7 16 02 FB | 	rdlong	arg03, fp
1ff34     04 4E 85 F1 | 	sub	fp, #4
1ff38     11 16 06 F1 | 	add	arg03, #17
1ff3c     0B 03 48 FC | 	wrbyte	#1, arg03
1ff40     01 FA 05 F6 | 	mov	result1, #1
1ff44     D0 02 90 FD | 	jmp	#LR__3613
1ff48                 | LR__3600
1ff48     14 4E 05 F1 | 	add	fp, #20
1ff4c     A7 16 02 FB | 	rdlong	arg03, fp
1ff50     14 4E 85 F1 | 	sub	fp, #20
1ff54     02 16 16 F2 | 	cmp	arg03, #2 wc
1ff58     24 00 90 CD |  if_b	jmp	#LR__3601
1ff5c     10 4E 05 F1 | 	add	fp, #16
1ff60     A7 18 02 FB | 	rdlong	arg04, fp
1ff64     04 4E 05 F1 | 	add	fp, #4
1ff68     A7 16 02 FB | 	rdlong	arg03, fp
1ff6c     14 4E 85 F1 | 	sub	fp, #20
1ff70     18 18 06 F1 | 	add	arg04, #24
1ff74     0C 19 02 FB | 	rdlong	arg04, arg04
1ff78     0C 17 12 F2 | 	cmp	arg03, arg04 wc
1ff7c     1C 00 90 CD |  if_b	jmp	#LR__3602
1ff80                 | LR__3601
1ff80     04 4E 05 F1 | 	add	fp, #4
1ff84     A7 16 02 FB | 	rdlong	arg03, fp
1ff88     04 4E 85 F1 | 	sub	fp, #4
1ff8c     11 16 06 F1 | 	add	arg03, #17
1ff90     0B 05 48 FC | 	wrbyte	#2, arg03
1ff94     02 FA 05 F6 | 	mov	result1, #2
1ff98     7C 02 90 FD | 	jmp	#LR__3613
1ff9c                 | LR__3602
1ff9c     04 4E 05 F1 | 	add	fp, #4
1ffa0     A7 18 02 FB | 	rdlong	arg04, fp
1ffa4     10 4E 05 F1 | 	add	fp, #16
1ffa8     A7 16 02 FB | 	rdlong	arg03, fp
1ffac     14 4E 85 F1 | 	sub	fp, #20
1ffb0     18 18 06 F1 | 	add	arg04, #24
1ffb4     0C 17 62 FC | 	wrlong	arg03, arg04
1ffb8     7C FE 9F FD | 	jmp	#LR__3597
1ffbc                 | LR__3603
1ffbc     04 4E 05 F1 | 	add	fp, #4
1ffc0     A7 16 02 FB | 	rdlong	arg03, fp
1ffc4     0B 13 02 F6 | 	mov	arg01, arg03
1ffc8     14 16 06 F1 | 	add	arg03, #20
1ffcc     0B 15 02 FB | 	rdlong	arg02, arg03
1ffd0     04 4E 05 F1 | 	add	fp, #4
1ffd4     A7 16 02 FB | 	rdlong	arg03, fp
1ffd8     0B 15 02 F1 | 	add	arg02, arg03
1ffdc     14 12 06 F1 | 	add	arg01, #20
1ffe0     09 15 62 FC | 	wrlong	arg02, arg01
1ffe4     A7 16 02 FB | 	rdlong	arg03, fp
1ffe8     08 4E 85 F1 | 	sub	fp, #8
1ffec     FF 17 CE F7 | 	test	arg03, #511 wz
1fff0     6C 00 90 AD |  if_e	jmp	#LR__3605
1fff4     10 4E 05 F1 | 	add	fp, #16
1fff8     A7 12 02 FB | 	rdlong	arg01, fp
1fffc     04 4E 05 F1 | 	add	fp, #4
20000     A7 14 02 FB | 	rdlong	arg02, fp
20004     14 4E 85 F1 | 	sub	fp, #20
20008     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2000c     1C 4E 05 F1 | 	add	fp, #28
20010     A7 FA 61 FC | 	wrlong	result1, fp
20014     1C 4E 85 F1 | 	sub	fp, #28
20018     00 FA 0D F2 | 	cmp	result1, #0 wz
2001c     1C 00 90 5D |  if_ne	jmp	#LR__3604
20020     04 4E 05 F1 | 	add	fp, #4
20024     A7 16 02 FB | 	rdlong	arg03, fp
20028     04 4E 85 F1 | 	sub	fp, #4
2002c     11 16 06 F1 | 	add	arg03, #17
20030     0B 05 48 FC | 	wrbyte	#2, arg03
20034     02 FA 05 F6 | 	mov	result1, #2
20038     DC 01 90 FD | 	jmp	#LR__3613
2003c                 | LR__3604
2003c     1C 4E 05 F1 | 	add	fp, #28
20040     A7 18 02 FB | 	rdlong	arg04, fp
20044     14 4E 85 F1 | 	sub	fp, #20
20048     A7 16 02 FB | 	rdlong	arg03, fp
2004c     09 16 46 F0 | 	shr	arg03, #9
20050     0B 19 02 F1 | 	add	arg04, arg03
20054     14 4E 05 F1 | 	add	fp, #20
20058     A7 18 62 FC | 	wrlong	arg04, fp
2005c     1C 4E 85 F1 | 	sub	fp, #28
20060                 | LR__3605
20060                 | LR__3606
20060                 | LR__3607
20060     04 4E 05 F1 | 	add	fp, #4
20064     A7 18 02 FB | 	rdlong	arg04, fp
20068     0C 17 02 F6 | 	mov	arg03, arg04
2006c     04 4E 85 F1 | 	sub	fp, #4
20070     14 16 06 F1 | 	add	arg03, #20
20074     0B 17 02 FB | 	rdlong	arg03, arg03
20078     0C 18 06 F1 | 	add	arg04, #12
2007c     0C 19 02 FB | 	rdlong	arg04, arg04
20080     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
20084     3C 00 90 ED |  if_be	jmp	#LR__3608
20088     04 4E 05 F1 | 	add	fp, #4
2008c     A7 18 02 FB | 	rdlong	arg04, fp
20090     0C 17 02 F6 | 	mov	arg03, arg04
20094     14 18 06 F1 | 	add	arg04, #20
20098     0C 19 02 FB | 	rdlong	arg04, arg04
2009c     0C 16 06 F1 | 	add	arg03, #12
200a0     0B 19 62 FC | 	wrlong	arg04, arg03
200a4     A7 18 02 FB | 	rdlong	arg04, fp
200a8     0C 17 02 F6 | 	mov	arg03, arg04
200ac     04 4E 85 F1 | 	sub	fp, #4
200b0     10 18 06 F1 | 	add	arg04, #16
200b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
200b8     40 18 46 F5 | 	or	arg04, #64
200bc     10 16 06 F1 | 	add	arg03, #16
200c0     0B 19 42 FC | 	wrbyte	arg04, arg03
200c4                 | LR__3608
200c4     04 4E 05 F1 | 	add	fp, #4
200c8     A7 16 02 FB | 	rdlong	arg03, fp
200cc     04 4E 85 F1 | 	sub	fp, #4
200d0     14 16 06 F1 | 	add	arg03, #20
200d4     0B 17 02 FB | 	rdlong	arg03, arg03
200d8     FF 17 CE F7 | 	test	arg03, #511 wz
200dc     2C 01 90 AD |  if_e	jmp	#LR__3612
200e0     04 4E 05 F1 | 	add	fp, #4
200e4     A7 18 02 FB | 	rdlong	arg04, fp
200e8     18 4E 05 F1 | 	add	fp, #24
200ec     A7 16 02 FB | 	rdlong	arg03, fp
200f0     1C 4E 85 F1 | 	sub	fp, #28
200f4     1C 18 06 F1 | 	add	arg04, #28
200f8     0C 19 02 FB | 	rdlong	arg04, arg04
200fc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
20100     08 01 90 AD |  if_e	jmp	#LR__3612
20104     04 4E 05 F1 | 	add	fp, #4
20108     A7 16 02 FB | 	rdlong	arg03, fp
2010c     04 4E 85 F1 | 	sub	fp, #4
20110     10 16 06 F1 | 	add	arg03, #16
20114     0B 17 C2 FA | 	rdbyte	arg03, arg03
20118     80 16 CE F7 | 	test	arg03, #128 wz
2011c     7C 00 90 AD |  if_e	jmp	#LR__3610
20120     10 4E 05 F1 | 	add	fp, #16
20124     A7 16 02 FB | 	rdlong	arg03, fp
20128     01 16 06 F1 | 	add	arg03, #1
2012c     0B 13 C2 FA | 	rdbyte	arg01, arg03
20130     0C 4E 85 F1 | 	sub	fp, #12
20134     A7 16 02 FB | 	rdlong	arg03, fp
20138     0B 15 02 F6 | 	mov	arg02, arg03
2013c     28 14 06 F1 | 	add	arg02, #40
20140     04 4E 85 F1 | 	sub	fp, #4
20144     1C 16 06 F1 | 	add	arg03, #28
20148     0B 17 02 FB | 	rdlong	arg03, arg03
2014c     01 18 06 F6 | 	mov	arg04, #1
20150     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
20154     00 FA 0D F2 | 	cmp	result1, #0 wz
20158     1C 00 90 AD |  if_e	jmp	#LR__3609
2015c     04 4E 05 F1 | 	add	fp, #4
20160     A7 16 02 FB | 	rdlong	arg03, fp
20164     04 4E 85 F1 | 	sub	fp, #4
20168     11 16 06 F1 | 	add	arg03, #17
2016c     0B 03 48 FC | 	wrbyte	#1, arg03
20170     01 FA 05 F6 | 	mov	result1, #1
20174     A0 00 90 FD | 	jmp	#LR__3613
20178                 | LR__3609
20178     04 4E 05 F1 | 	add	fp, #4
2017c     A7 18 02 FB | 	rdlong	arg04, fp
20180     0C 17 02 F6 | 	mov	arg03, arg04
20184     04 4E 85 F1 | 	sub	fp, #4
20188     10 18 06 F1 | 	add	arg04, #16
2018c     0C 19 C2 FA | 	rdbyte	arg04, arg04
20190     7F 18 06 F5 | 	and	arg04, #127
20194     10 16 06 F1 | 	add	arg03, #16
20198     0B 19 42 FC | 	wrbyte	arg04, arg03
2019c                 | LR__3610
2019c     10 4E 05 F1 | 	add	fp, #16
201a0     A7 16 02 FB | 	rdlong	arg03, fp
201a4     01 16 06 F1 | 	add	arg03, #1
201a8     0B 13 C2 FA | 	rdbyte	arg01, arg03
201ac     0C 4E 85 F1 | 	sub	fp, #12
201b0     A7 14 02 FB | 	rdlong	arg02, fp
201b4     28 14 06 F1 | 	add	arg02, #40
201b8     18 4E 05 F1 | 	add	fp, #24
201bc     A7 16 02 FB | 	rdlong	arg03, fp
201c0     1C 4E 85 F1 | 	sub	fp, #28
201c4     01 18 06 F6 | 	mov	arg04, #1
201c8     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
201cc     00 FA 0D F2 | 	cmp	result1, #0 wz
201d0     1C 00 90 AD |  if_e	jmp	#LR__3611
201d4     04 4E 05 F1 | 	add	fp, #4
201d8     A7 16 02 FB | 	rdlong	arg03, fp
201dc     04 4E 85 F1 | 	sub	fp, #4
201e0     11 16 06 F1 | 	add	arg03, #17
201e4     0B 03 48 FC | 	wrbyte	#1, arg03
201e8     01 FA 05 F6 | 	mov	result1, #1
201ec     28 00 90 FD | 	jmp	#LR__3613
201f0                 | LR__3611
201f0     04 4E 05 F1 | 	add	fp, #4
201f4     A7 18 02 FB | 	rdlong	arg04, fp
201f8     18 4E 05 F1 | 	add	fp, #24
201fc     A7 16 02 FB | 	rdlong	arg03, fp
20200     1C 4E 85 F1 | 	sub	fp, #28
20204     1C 18 06 F1 | 	add	arg04, #28
20208     0C 17 62 FC | 	wrlong	arg03, arg04
2020c                 | LR__3612
2020c                 | ' 
2020c                 | ' 			fp->sect = nsect;
2020c                 | ' 		}
2020c                 | ' 	}
2020c                 | ' 
2020c                 | ' 	return res ;
2020c     0C 4E 05 F1 | 	add	fp, #12
20210     A7 FA 01 FB | 	rdlong	result1, fp
20214     0C 4E 85 F1 | 	sub	fp, #12
20218                 | LR__3613
20218     A7 F0 03 F6 | 	mov	ptra, fp
2021c     B2 00 A0 FD | 	call	#popregs_
20220                 | _fatfs_cc_f_lseek_ret
20220     2D 00 64 FD | 	ret
20224                 | 
20224                 | _fatfs_cc_f_opendir
20224     01 4A 05 F6 | 	mov	COUNT_, #1
20228     A8 00 A0 FD | 	call	#pushregs_
2022c     14 F0 07 F1 | 	add	ptra, #20
20230     04 4E 05 F1 | 	add	fp, #4
20234     A7 12 62 FC | 	wrlong	arg01, fp
20238     04 4E 05 F1 | 	add	fp, #4
2023c     A7 14 62 FC | 	wrlong	arg02, fp
20240     04 4E 85 F1 | 	sub	fp, #4
20244     A7 16 0A FB | 	rdlong	arg03, fp wz
20248     04 4E 85 F1 | 	sub	fp, #4
2024c     09 FA 05 A6 |  if_e	mov	result1, #9
20250     78 01 90 AD |  if_e	jmp	#LR__3626
20254     08 4E 05 F1 | 	add	fp, #8
20258     A7 12 02 F6 | 	mov	arg01, fp
2025c     08 4E 05 F1 | 	add	fp, #8
20260     A7 14 02 F6 | 	mov	arg02, fp
20264     10 4E 85 F1 | 	sub	fp, #16
20268     00 16 06 F6 | 	mov	arg03, #0
2026c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
20270     0C 4E 05 F1 | 	add	fp, #12
20274     A7 FA 61 FC | 	wrlong	result1, fp
20278     0C 4E 85 F1 | 	sub	fp, #12
2027c     00 FA 0D F2 | 	cmp	result1, #0 wz
20280     20 01 90 5D |  if_ne	jmp	#LR__3625
20284     04 4E 05 F1 | 	add	fp, #4
20288     A7 16 02 FB | 	rdlong	arg03, fp
2028c     0C 4E 05 F1 | 	add	fp, #12
20290     A7 FA 01 FB | 	rdlong	result1, fp
20294     0B FB 61 FC | 	wrlong	result1, arg03
20298     0C 4E 85 F1 | 	sub	fp, #12
2029c     A7 12 02 FB | 	rdlong	arg01, fp
202a0     04 4E 05 F1 | 	add	fp, #4
202a4     A7 14 02 FB | 	rdlong	arg02, fp
202a8     08 4E 85 F1 | 	sub	fp, #8
202ac     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
202b0     0C 4E 05 F1 | 	add	fp, #12
202b4     A7 FA 61 FC | 	wrlong	result1, fp
202b8     0C 4E 85 F1 | 	sub	fp, #12
202bc     00 FA 0D F2 | 	cmp	result1, #0 wz
202c0     C4 00 90 5D |  if_ne	jmp	#LR__3624
202c4     04 4E 05 F1 | 	add	fp, #4
202c8     A7 16 02 FB | 	rdlong	arg03, fp
202cc     04 4E 85 F1 | 	sub	fp, #4
202d0     2B 16 06 F1 | 	add	arg03, #43
202d4     0B 17 C2 FA | 	rdbyte	arg03, arg03
202d8     80 16 CE F7 | 	test	arg03, #128 wz
202dc     58 00 90 5D |  if_ne	jmp	#LR__3622
202e0     04 4E 05 F1 | 	add	fp, #4
202e4     A7 16 02 FB | 	rdlong	arg03, fp
202e8     04 4E 85 F1 | 	sub	fp, #4
202ec     06 16 06 F1 | 	add	arg03, #6
202f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
202f4     10 16 CE F7 | 	test	arg03, #16 wz
202f8     30 00 90 AD |  if_e	jmp	#LR__3620
202fc     04 4E 05 F1 | 	add	fp, #4
20300     A7 16 02 FB | 	rdlong	arg03, fp
20304     0B 1F 02 F6 | 	mov	local01, arg03
20308     0C 4E 05 F1 | 	add	fp, #12
2030c     A7 12 02 FB | 	rdlong	arg01, fp
20310     10 4E 85 F1 | 	sub	fp, #16
20314     1C 16 06 F1 | 	add	arg03, #28
20318     0B 15 02 FB | 	rdlong	arg02, arg03
2031c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
20320     08 1E 06 F1 | 	add	local01, #8
20324     0F FB 61 FC | 	wrlong	result1, local01
20328     0C 00 90 FD | 	jmp	#LR__3621
2032c                 | LR__3620
2032c     0C 4E 05 F1 | 	add	fp, #12
20330     A7 0A 68 FC | 	wrlong	#5, fp
20334     0C 4E 85 F1 | 	sub	fp, #12
20338                 | LR__3621
20338                 | LR__3622
20338     0C 4E 05 F1 | 	add	fp, #12
2033c     A7 1E 0A FB | 	rdlong	local01, fp wz
20340     0C 4E 85 F1 | 	sub	fp, #12
20344     40 00 90 5D |  if_ne	jmp	#LR__3623
20348     04 4E 05 F1 | 	add	fp, #4
2034c     A7 1E 02 FB | 	rdlong	local01, fp
20350     0C 4E 05 F1 | 	add	fp, #12
20354     A7 16 02 FB | 	rdlong	arg03, fp
20358     06 16 06 F1 | 	add	arg03, #6
2035c     0B 17 E2 FA | 	rdword	arg03, arg03
20360     04 1E 06 F1 | 	add	local01, #4
20364     0F 17 52 FC | 	wrword	arg03, local01
20368     0C 4E 85 F1 | 	sub	fp, #12
2036c     A7 12 02 FB | 	rdlong	arg01, fp
20370     04 4E 85 F1 | 	sub	fp, #4
20374     00 14 06 F6 | 	mov	arg02, #0
20378     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2037c     0C 4E 05 F1 | 	add	fp, #12
20380     A7 FA 61 FC | 	wrlong	result1, fp
20384     0C 4E 85 F1 | 	sub	fp, #12
20388                 | LR__3623
20388                 | LR__3624
20388     0C 4E 05 F1 | 	add	fp, #12
2038c     A7 1E 02 FB | 	rdlong	local01, fp
20390     0C 4E 85 F1 | 	sub	fp, #12
20394     04 1E 0E F2 | 	cmp	local01, #4 wz
20398     0C 4E 05 A1 |  if_e	add	fp, #12
2039c     A7 0A 68 AC |  if_e	wrlong	#5, fp
203a0     0C 4E 85 A1 |  if_e	sub	fp, #12
203a4                 | LR__3625
203a4     0C 4E 05 F1 | 	add	fp, #12
203a8     A7 1E 0A FB | 	rdlong	local01, fp wz
203ac     0C 4E 85 F1 | 	sub	fp, #12
203b0     04 4E 05 51 |  if_ne	add	fp, #4
203b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
203b8     04 4E 85 51 |  if_ne	sub	fp, #4
203bc     0F 01 68 5C |  if_ne	wrlong	#0, local01
203c0                 | ' 
203c0                 | ' 	return res ;
203c0     0C 4E 05 F1 | 	add	fp, #12
203c4     A7 FA 01 FB | 	rdlong	result1, fp
203c8     0C 4E 85 F1 | 	sub	fp, #12
203cc                 | LR__3626
203cc     A7 F0 03 F6 | 	mov	ptra, fp
203d0     B2 00 A0 FD | 	call	#popregs_
203d4                 | _fatfs_cc_f_opendir_ret
203d4     2D 00 64 FD | 	ret
203d8                 | 
203d8                 | _fatfs_cc_f_closedir
203d8     00 4A 05 F6 | 	mov	COUNT_, #0
203dc     A8 00 A0 FD | 	call	#pushregs_
203e0     10 F0 07 F1 | 	add	ptra, #16
203e4     04 4E 05 F1 | 	add	fp, #4
203e8     A7 12 62 FC | 	wrlong	arg01, fp
203ec     08 4E 05 F1 | 	add	fp, #8
203f0     A7 14 02 F6 | 	mov	arg02, fp
203f4     0C 4E 85 F1 | 	sub	fp, #12
203f8     C0 DD BF FD | 	call	#_fatfs_cc_validate
203fc     08 4E 05 F1 | 	add	fp, #8
20400     A7 FA 61 FC | 	wrlong	result1, fp
20404     08 4E 85 F1 | 	sub	fp, #8
20408     00 FA 0D F2 | 	cmp	result1, #0 wz
2040c     04 4E 05 A1 |  if_e	add	fp, #4
20410     A7 FA 01 AB |  if_e	rdlong	result1, fp
20414     04 4E 85 A1 |  if_e	sub	fp, #4
20418     FD 00 68 AC |  if_e	wrlong	#0, result1
2041c                 | ' 
2041c                 | ' 
2041c                 | ' 
2041c                 | ' 
2041c                 | ' 		dp->obj.fs = 0;
2041c                 | ' #line 4633 "ff.c"
2041c                 | ' 	}
2041c                 | ' 	return res;
2041c     08 4E 05 F1 | 	add	fp, #8
20420     A7 FA 01 FB | 	rdlong	result1, fp
20424     08 4E 85 F1 | 	sub	fp, #8
20428     A7 F0 03 F6 | 	mov	ptra, fp
2042c     B2 00 A0 FD | 	call	#popregs_
20430                 | _fatfs_cc_f_closedir_ret
20430     2D 00 64 FD | 	ret
20434                 | 
20434                 | _fatfs_cc_f_readdir
20434     00 4A 05 F6 | 	mov	COUNT_, #0
20438     A8 00 A0 FD | 	call	#pushregs_
2043c     14 F0 07 F1 | 	add	ptra, #20
20440     04 4E 05 F1 | 	add	fp, #4
20444     A7 12 62 FC | 	wrlong	arg01, fp
20448     04 4E 05 F1 | 	add	fp, #4
2044c     A7 14 62 FC | 	wrlong	arg02, fp
20450     04 4E 85 F1 | 	sub	fp, #4
20454     A7 12 02 FB | 	rdlong	arg01, fp
20458     0C 4E 05 F1 | 	add	fp, #12
2045c     A7 14 02 F6 | 	mov	arg02, fp
20460     10 4E 85 F1 | 	sub	fp, #16
20464     54 DD BF FD | 	call	#_fatfs_cc_validate
20468     0C 4E 05 F1 | 	add	fp, #12
2046c     A7 FA 61 FC | 	wrlong	result1, fp
20470     0C 4E 85 F1 | 	sub	fp, #12
20474     00 FA 0D F2 | 	cmp	result1, #0 wz
20478     BC 00 90 5D |  if_ne	jmp	#LR__3633
2047c     08 4E 05 F1 | 	add	fp, #8
20480     A7 FA 09 FB | 	rdlong	result1, fp wz
20484     08 4E 85 F1 | 	sub	fp, #8
20488     24 00 90 5D |  if_ne	jmp	#LR__3630
2048c     04 4E 05 F1 | 	add	fp, #4
20490     A7 12 02 FB | 	rdlong	arg01, fp
20494     04 4E 85 F1 | 	sub	fp, #4
20498     00 14 06 F6 | 	mov	arg02, #0
2049c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
204a0     0C 4E 05 F1 | 	add	fp, #12
204a4     A7 FA 61 FC | 	wrlong	result1, fp
204a8     0C 4E 85 F1 | 	sub	fp, #12
204ac     88 00 90 FD | 	jmp	#LR__3632
204b0                 | LR__3630
204b0     04 4E 05 F1 | 	add	fp, #4
204b4     A7 12 02 FB | 	rdlong	arg01, fp
204b8     04 4E 85 F1 | 	sub	fp, #4
204bc     00 14 06 F6 | 	mov	arg02, #0
204c0     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
204c4     0C 4E 05 F1 | 	add	fp, #12
204c8     A7 FA 61 FC | 	wrlong	result1, fp
204cc     0C 4E 85 F1 | 	sub	fp, #12
204d0     04 FA 0D F2 | 	cmp	result1, #4 wz
204d4     0C 4E 05 A1 |  if_e	add	fp, #12
204d8     A7 00 68 AC |  if_e	wrlong	#0, fp
204dc     0C 4E 85 A1 |  if_e	sub	fp, #12
204e0     0C 4E 05 F1 | 	add	fp, #12
204e4     A7 FA 09 FB | 	rdlong	result1, fp wz
204e8     0C 4E 85 F1 | 	sub	fp, #12
204ec     48 00 90 5D |  if_ne	jmp	#LR__3631
204f0     04 4E 05 F1 | 	add	fp, #4
204f4     A7 12 02 FB | 	rdlong	arg01, fp
204f8     04 4E 05 F1 | 	add	fp, #4
204fc     A7 14 02 FB | 	rdlong	arg02, fp
20500     08 4E 85 F1 | 	sub	fp, #8
20504     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
20508     04 4E 05 F1 | 	add	fp, #4
2050c     A7 12 02 FB | 	rdlong	arg01, fp
20510     04 4E 85 F1 | 	sub	fp, #4
20514     00 14 06 F6 | 	mov	arg02, #0
20518     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2051c     0C 4E 05 F1 | 	add	fp, #12
20520     A7 FA 61 FC | 	wrlong	result1, fp
20524     0C 4E 85 F1 | 	sub	fp, #12
20528     04 FA 0D F2 | 	cmp	result1, #4 wz
2052c     0C 4E 05 A1 |  if_e	add	fp, #12
20530     A7 00 68 AC |  if_e	wrlong	#0, fp
20534     0C 4E 85 A1 |  if_e	sub	fp, #12
20538                 | LR__3631
20538                 | LR__3632
20538                 | LR__3633
20538                 | ' 			}
20538                 | ' 			;
20538                 | ' 		}
20538                 | ' 	}
20538                 | ' 	return res ;
20538     0C 4E 05 F1 | 	add	fp, #12
2053c     A7 FA 01 FB | 	rdlong	result1, fp
20540     0C 4E 85 F1 | 	sub	fp, #12
20544     A7 F0 03 F6 | 	mov	ptra, fp
20548     B2 00 A0 FD | 	call	#popregs_
2054c                 | _fatfs_cc_f_readdir_ret
2054c     2D 00 64 FD | 	ret
20550                 | 
20550                 | _fatfs_cc_f_stat
20550     00 4A 05 F6 | 	mov	COUNT_, #0
20554     A8 00 A0 FD | 	call	#pushregs_
20558     40 F0 07 F1 | 	add	ptra, #64
2055c     04 4E 05 F1 | 	add	fp, #4
20560     A7 12 62 FC | 	wrlong	arg01, fp
20564     04 4E 05 F1 | 	add	fp, #4
20568     A7 14 62 FC | 	wrlong	arg02, fp
2056c     04 4E 85 F1 | 	sub	fp, #4
20570     A7 12 02 F6 | 	mov	arg01, fp
20574     0C 4E 05 F1 | 	add	fp, #12
20578     A7 14 02 F6 | 	mov	arg02, fp
2057c     10 4E 85 F1 | 	sub	fp, #16
20580     00 16 06 F6 | 	mov	arg03, #0
20584     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
20588     0C 4E 05 F1 | 	add	fp, #12
2058c     A7 FA 61 FC | 	wrlong	result1, fp
20590     0C 4E 85 F1 | 	sub	fp, #12
20594     00 FA 0D F2 | 	cmp	result1, #0 wz
20598     74 00 90 5D |  if_ne	jmp	#LR__3643
2059c     10 4E 05 F1 | 	add	fp, #16
205a0     A7 12 02 F6 | 	mov	arg01, fp
205a4     0C 4E 85 F1 | 	sub	fp, #12
205a8     A7 14 02 FB | 	rdlong	arg02, fp
205ac     04 4E 85 F1 | 	sub	fp, #4
205b0     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
205b4     0C 4E 05 F1 | 	add	fp, #12
205b8     A7 FA 61 FC | 	wrlong	result1, fp
205bc     0C 4E 85 F1 | 	sub	fp, #12
205c0     00 FA 0D F2 | 	cmp	result1, #0 wz
205c4     48 00 90 5D |  if_ne	jmp	#LR__3642
205c8     3B 4E 05 F1 | 	add	fp, #59
205cc     A7 FA C1 FA | 	rdbyte	result1, fp
205d0     3B 4E 85 F1 | 	sub	fp, #59
205d4     80 FA CD F7 | 	test	result1, #128 wz
205d8     0C 4E 05 51 |  if_ne	add	fp, #12
205dc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
205e0     0C 4E 85 51 |  if_ne	sub	fp, #12
205e4     28 00 90 5D |  if_ne	jmp	#LR__3641
205e8     08 4E 05 F1 | 	add	fp, #8
205ec     A7 FA 09 FB | 	rdlong	result1, fp wz
205f0     08 4E 85 F1 | 	sub	fp, #8
205f4     18 00 90 AD |  if_e	jmp	#LR__3640
205f8     10 4E 05 F1 | 	add	fp, #16
205fc     A7 12 02 F6 | 	mov	arg01, fp
20600     08 4E 85 F1 | 	sub	fp, #8
20604     A7 14 02 FB | 	rdlong	arg02, fp
20608     08 4E 85 F1 | 	sub	fp, #8
2060c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
20610                 | LR__3640
20610                 | LR__3641
20610                 | LR__3642
20610                 | LR__3643
20610                 | ' 			}
20610                 | ' 		}
20610                 | ' 		;
20610                 | ' 	}
20610                 | ' 
20610                 | ' 	return res ;
20610     0C 4E 05 F1 | 	add	fp, #12
20614     A7 FA 01 FB | 	rdlong	result1, fp
20618     0C 4E 85 F1 | 	sub	fp, #12
2061c     A7 F0 03 F6 | 	mov	ptra, fp
20620     B2 00 A0 FD | 	call	#popregs_
20624                 | _fatfs_cc_f_stat_ret
20624     2D 00 64 FD | 	ret
20628                 | 
20628                 | _fatfs_cc_f_unlink
20628     00 4A 05 F6 | 	mov	COUNT_, #0
2062c     A8 00 A0 FD | 	call	#pushregs_
20630     74 F0 07 F1 | 	add	ptra, #116
20634     04 4E 05 F1 | 	add	fp, #4
20638     A7 12 62 FC | 	wrlong	arg01, fp
2063c     68 4E 05 F1 | 	add	fp, #104
20640     A7 00 68 FC | 	wrlong	#0, fp
20644     68 4E 85 F1 | 	sub	fp, #104
20648     A7 12 02 F6 | 	mov	arg01, fp
2064c     6C 4E 05 F1 | 	add	fp, #108
20650     A7 14 02 F6 | 	mov	arg02, fp
20654     70 4E 85 F1 | 	sub	fp, #112
20658     02 16 06 F6 | 	mov	arg03, #2
2065c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
20660     08 4E 05 F1 | 	add	fp, #8
20664     A7 FA 61 FC | 	wrlong	result1, fp
20668     08 4E 85 F1 | 	sub	fp, #8
2066c     00 FA 0D F2 | 	cmp	result1, #0 wz
20670     E4 01 90 5D |  if_ne	jmp	#LR__3658
20674     70 4E 05 F1 | 	add	fp, #112
20678     A7 16 02 FB | 	rdlong	arg03, fp
2067c     64 4E 85 F1 | 	sub	fp, #100
20680     A7 16 62 FC | 	wrlong	arg03, fp
20684     A7 12 02 F6 | 	mov	arg01, fp
20688     08 4E 85 F1 | 	sub	fp, #8
2068c     A7 14 02 FB | 	rdlong	arg02, fp
20690     04 4E 85 F1 | 	sub	fp, #4
20694     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
20698     08 4E 05 F1 | 	add	fp, #8
2069c     A7 FA 61 FC | 	wrlong	result1, fp
206a0     00 FA 4D F2 | 	cmps	result1, #0 wz
206a4     08 4E 85 F1 | 	sub	fp, #8
206a8     AC 01 90 5D |  if_ne	jmp	#LR__3657
206ac     37 4E 05 F1 | 	add	fp, #55
206b0     A7 FA C1 FA | 	rdbyte	result1, fp
206b4     37 4E 85 F1 | 	sub	fp, #55
206b8     80 FA CD F7 | 	test	result1, #128 wz
206bc     08 4E 05 51 |  if_ne	add	fp, #8
206c0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
206c4     08 4E 85 51 |  if_ne	sub	fp, #8
206c8     1C 00 90 5D |  if_ne	jmp	#LR__3650
206cc     12 4E 05 F1 | 	add	fp, #18
206d0     A7 FA C1 FA | 	rdbyte	result1, fp
206d4     12 4E 85 F1 | 	sub	fp, #18
206d8     01 FA CD F7 | 	test	result1, #1 wz
206dc     08 4E 05 51 |  if_ne	add	fp, #8
206e0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
206e4     08 4E 85 51 |  if_ne	sub	fp, #8
206e8                 | LR__3650
206e8     08 4E 05 F1 | 	add	fp, #8
206ec     A7 FA 09 FB | 	rdlong	result1, fp wz
206f0     08 4E 85 F1 | 	sub	fp, #8
206f4     C8 00 90 5D |  if_ne	jmp	#LR__3653
206f8     70 4E 05 F1 | 	add	fp, #112
206fc     A7 12 02 FB | 	rdlong	arg01, fp
20700     48 4E 85 F1 | 	sub	fp, #72
20704     A7 14 02 FB | 	rdlong	arg02, fp
20708     28 4E 85 F1 | 	sub	fp, #40
2070c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
20710     6C 4E 05 F1 | 	add	fp, #108
20714     A7 FA 61 FC | 	wrlong	result1, fp
20718     5A 4E 85 F1 | 	sub	fp, #90
2071c     A7 FA C1 FA | 	rdbyte	result1, fp
20720     12 4E 85 F1 | 	sub	fp, #18
20724     10 FA CD F7 | 	test	result1, #16 wz
20728     94 00 90 AD |  if_e	jmp	#LR__3652
2072c     70 4E 05 F1 | 	add	fp, #112
20730     A7 FA 01 FB | 	rdlong	result1, fp
20734     34 4E 85 F1 | 	sub	fp, #52
20738     A7 FA 61 FC | 	wrlong	result1, fp
2073c     30 4E 05 F1 | 	add	fp, #48
20740     A7 16 02 FB | 	rdlong	arg03, fp
20744     28 4E 85 F1 | 	sub	fp, #40
20748     A7 16 62 FC | 	wrlong	arg03, fp
2074c     08 4E 85 F1 | 	sub	fp, #8
20750     A7 12 02 F6 | 	mov	arg01, fp
20754     3C 4E 85 F1 | 	sub	fp, #60
20758     00 14 06 F6 | 	mov	arg02, #0
2075c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
20760     08 4E 05 F1 | 	add	fp, #8
20764     A7 FA 61 FC | 	wrlong	result1, fp
20768     08 4E 85 F1 | 	sub	fp, #8
2076c     00 FA 0D F2 | 	cmp	result1, #0 wz
20770     4C 00 90 5D |  if_ne	jmp	#LR__3651
20774     3C 4E 05 F1 | 	add	fp, #60
20778     A7 12 02 F6 | 	mov	arg01, fp
2077c     3C 4E 85 F1 | 	sub	fp, #60
20780     00 14 06 F6 | 	mov	arg02, #0
20784     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
20788     08 4E 05 F1 | 	add	fp, #8
2078c     A7 FA 61 FC | 	wrlong	result1, fp
20790     00 FA 4D F2 | 	cmps	result1, #0 wz
20794     08 4E 85 F1 | 	sub	fp, #8
20798     08 4E 05 A1 |  if_e	add	fp, #8
2079c     A7 0E 68 AC |  if_e	wrlong	#7, fp
207a0     08 4E 85 A1 |  if_e	sub	fp, #8
207a4     08 4E 05 F1 | 	add	fp, #8
207a8     A7 FA 01 FB | 	rdlong	result1, fp
207ac     08 4E 85 F1 | 	sub	fp, #8
207b0     04 FA 0D F2 | 	cmp	result1, #4 wz
207b4     08 4E 05 A1 |  if_e	add	fp, #8
207b8     A7 00 68 AC |  if_e	wrlong	#0, fp
207bc     08 4E 85 A1 |  if_e	sub	fp, #8
207c0                 | LR__3651
207c0                 | LR__3652
207c0                 | LR__3653
207c0     08 4E 05 F1 | 	add	fp, #8
207c4     A7 FA 09 FB | 	rdlong	result1, fp wz
207c8     08 4E 85 F1 | 	sub	fp, #8
207cc     88 00 90 5D |  if_ne	jmp	#LR__3656
207d0     0C 4E 05 F1 | 	add	fp, #12
207d4     A7 12 02 F6 | 	mov	arg01, fp
207d8     0C 4E 85 F1 | 	sub	fp, #12
207dc     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
207e0     08 4E 05 F1 | 	add	fp, #8
207e4     A7 FA 61 FC | 	wrlong	result1, fp
207e8     08 4E 85 F1 | 	sub	fp, #8
207ec     00 FA 0D F2 | 	cmp	result1, #0 wz
207f0     38 00 90 5D |  if_ne	jmp	#LR__3654
207f4     6C 4E 05 F1 | 	add	fp, #108
207f8     A7 FA 09 FB | 	rdlong	result1, fp wz
207fc     6C 4E 85 F1 | 	sub	fp, #108
20800     28 00 90 AD |  if_e	jmp	#LR__3654
20804     0C 4E 05 F1 | 	add	fp, #12
20808     A7 12 02 F6 | 	mov	arg01, fp
2080c     60 4E 05 F1 | 	add	fp, #96
20810     A7 14 02 FB | 	rdlong	arg02, fp
20814     6C 4E 85 F1 | 	sub	fp, #108
20818     00 16 06 F6 | 	mov	arg03, #0
2081c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
20820     08 4E 05 F1 | 	add	fp, #8
20824     A7 FA 61 FC | 	wrlong	result1, fp
20828     08 4E 85 F1 | 	sub	fp, #8
2082c                 | LR__3654
2082c     08 4E 05 F1 | 	add	fp, #8
20830     A7 FA 09 FB | 	rdlong	result1, fp wz
20834     08 4E 85 F1 | 	sub	fp, #8
20838     1C 00 90 5D |  if_ne	jmp	#LR__3655
2083c     70 4E 05 F1 | 	add	fp, #112
20840     A7 12 02 FB | 	rdlong	arg01, fp
20844     70 4E 85 F1 | 	sub	fp, #112
20848     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2084c     08 4E 05 F1 | 	add	fp, #8
20850     A7 FA 61 FC | 	wrlong	result1, fp
20854     08 4E 85 F1 | 	sub	fp, #8
20858                 | LR__3655
20858                 | LR__3656
20858                 | LR__3657
20858                 | LR__3658
20858                 | ' 			}
20858                 | ' 		}
20858                 | ' 		;
20858                 | ' 	}
20858                 | ' 
20858                 | ' 	return res ;
20858     08 4E 05 F1 | 	add	fp, #8
2085c     A7 FA 01 FB | 	rdlong	result1, fp
20860     08 4E 85 F1 | 	sub	fp, #8
20864     A7 F0 03 F6 | 	mov	ptra, fp
20868     B2 00 A0 FD | 	call	#popregs_
2086c                 | _fatfs_cc_f_unlink_ret
2086c     2D 00 64 FD | 	ret
20870                 | 
20870                 | _fatfs_cc_f_mkdir
20870     00 4A 05 F6 | 	mov	COUNT_, #0
20874     A8 00 A0 FD | 	call	#pushregs_
20878     5C F0 07 F1 | 	add	ptra, #92
2087c     04 4E 05 F1 | 	add	fp, #4
20880     A7 12 62 FC | 	wrlong	arg01, fp
20884     A7 12 02 F6 | 	mov	arg01, fp
20888     48 4E 05 F1 | 	add	fp, #72
2088c     A7 14 02 F6 | 	mov	arg02, fp
20890     4C 4E 85 F1 | 	sub	fp, #76
20894     02 16 06 F6 | 	mov	arg03, #2
20898     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2089c     08 4E 05 F1 | 	add	fp, #8
208a0     A7 FA 61 FC | 	wrlong	result1, fp
208a4     08 4E 85 F1 | 	sub	fp, #8
208a8     00 FA 0D F2 | 	cmp	result1, #0 wz
208ac     C4 02 90 5D |  if_ne	jmp	#LR__3665
208b0     4C 4E 05 F1 | 	add	fp, #76
208b4     A7 16 02 FB | 	rdlong	arg03, fp
208b8     40 4E 85 F1 | 	sub	fp, #64
208bc     A7 16 62 FC | 	wrlong	arg03, fp
208c0     A7 12 02 F6 | 	mov	arg01, fp
208c4     08 4E 85 F1 | 	sub	fp, #8
208c8     A7 14 02 FB | 	rdlong	arg02, fp
208cc     04 4E 85 F1 | 	sub	fp, #4
208d0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
208d4     08 4E 05 F1 | 	add	fp, #8
208d8     A7 FA 61 FC | 	wrlong	result1, fp
208dc     00 FA 4D F2 | 	cmps	result1, #0 wz
208e0     08 4E 85 F1 | 	sub	fp, #8
208e4     08 4E 05 A1 |  if_e	add	fp, #8
208e8     A7 10 68 AC |  if_e	wrlong	#8, fp
208ec     08 4E 85 A1 |  if_e	sub	fp, #8
208f0     08 4E 05 F1 | 	add	fp, #8
208f4     A7 FA 01 FB | 	rdlong	result1, fp
208f8     08 4E 85 F1 | 	sub	fp, #8
208fc     04 FA 0D F2 | 	cmp	result1, #4 wz
20900     70 02 90 5D |  if_ne	jmp	#LR__3664
20904     4C 4E 05 F1 | 	add	fp, #76
20908     A7 16 02 FB | 	rdlong	arg03, fp
2090c     10 4E 85 F1 | 	sub	fp, #16
20910     A7 16 62 FC | 	wrlong	arg03, fp
20914     A7 12 02 F6 | 	mov	arg01, fp
20918     3C 4E 85 F1 | 	sub	fp, #60
2091c     00 14 06 F6 | 	mov	arg02, #0
20920     04 AC BF FD | 	call	#_fatfs_cc_create_chain
20924     50 4E 05 F1 | 	add	fp, #80
20928     A7 FA 61 FC | 	wrlong	result1, fp
2092c     48 4E 85 F1 | 	sub	fp, #72
20930     A7 00 68 FC | 	wrlong	#0, fp
20934     48 4E 05 F1 | 	add	fp, #72
20938     A7 FA 09 FB | 	rdlong	result1, fp wz
2093c     50 4E 85 F1 | 	sub	fp, #80
20940     08 4E 05 A1 |  if_e	add	fp, #8
20944     A7 0E 68 AC |  if_e	wrlong	#7, fp
20948     08 4E 85 A1 |  if_e	sub	fp, #8
2094c     50 4E 05 F1 | 	add	fp, #80
20950     A7 FA 01 FB | 	rdlong	result1, fp
20954     50 4E 85 F1 | 	sub	fp, #80
20958     01 FA 0D F2 | 	cmp	result1, #1 wz
2095c     08 4E 05 A1 |  if_e	add	fp, #8
20960     A7 04 68 AC |  if_e	wrlong	#2, fp
20964     08 4E 85 A1 |  if_e	sub	fp, #8
20968     50 4E 05 F1 | 	add	fp, #80
2096c     A7 16 02 FB | 	rdlong	arg03, fp
20970     50 4E 85 F1 | 	sub	fp, #80
20974     FF FF 7F FF 
20978     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2097c     08 4E 05 A1 |  if_e	add	fp, #8
20980     A7 02 68 AC |  if_e	wrlong	#1, fp
20984     08 4E 85 A1 |  if_e	sub	fp, #8
20988     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2098c     58 4E 05 F1 | 	add	fp, #88
20990     A7 FA 61 FC | 	wrlong	result1, fp
20994     50 4E 85 F1 | 	sub	fp, #80
20998     A7 FA 09 FB | 	rdlong	result1, fp wz
2099c     08 4E 85 F1 | 	sub	fp, #8
209a0     1C 01 90 5D |  if_ne	jmp	#LR__3661
209a4     4C 4E 05 F1 | 	add	fp, #76
209a8     A7 12 02 FB | 	rdlong	arg01, fp
209ac     04 4E 05 F1 | 	add	fp, #4
209b0     A7 14 02 FB | 	rdlong	arg02, fp
209b4     50 4E 85 F1 | 	sub	fp, #80
209b8     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
209bc     08 4E 05 F1 | 	add	fp, #8
209c0     A7 FA 61 FC | 	wrlong	result1, fp
209c4     00 FA 4D F2 | 	cmps	result1, #0 wz
209c8     08 4E 85 F1 | 	sub	fp, #8
209cc     F0 00 90 5D |  if_ne	jmp	#LR__3660
209d0     4C 4E 05 F1 | 	add	fp, #76
209d4     A7 12 02 FB | 	rdlong	arg01, fp
209d8     4C 4E 85 F1 | 	sub	fp, #76
209dc     34 12 06 F1 | 	add	arg01, #52
209e0     20 14 06 F6 | 	mov	arg02, #32
209e4     0B 16 06 F6 | 	mov	arg03, #11
209e8     98 00 A0 FD | 	call	#\builtin_bytefill_
209ec     4C 4E 05 F1 | 	add	fp, #76
209f0     A7 FA 01 FB | 	rdlong	result1, fp
209f4     34 FA 05 F1 | 	add	result1, #52
209f8     FD 5C 48 FC | 	wrbyte	#46, result1
209fc     A7 16 02 FB | 	rdlong	arg03, fp
20a00     3F 16 06 F1 | 	add	arg03, #63
20a04     0B 21 48 FC | 	wrbyte	#16, arg03
20a08     A7 12 02 FB | 	rdlong	arg01, fp
20a0c     4A 12 06 F1 | 	add	arg01, #74
20a10     0C 4E 05 F1 | 	add	fp, #12
20a14     A7 14 02 FB | 	rdlong	arg02, fp
20a18     09 15 62 FC | 	wrlong	arg02, arg01
20a1c     0C 4E 85 F1 | 	sub	fp, #12
20a20     A7 14 02 FB | 	rdlong	arg02, fp
20a24     0A 13 02 F6 | 	mov	arg01, arg02
20a28     34 14 06 F1 | 	add	arg02, #52
20a2c     04 4E 05 F1 | 	add	fp, #4
20a30     A7 16 02 FB | 	rdlong	arg03, fp
20a34     50 4E 85 F1 | 	sub	fp, #80
20a38     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
20a3c     4C 4E 05 F1 | 	add	fp, #76
20a40     A7 14 02 FB | 	rdlong	arg02, fp
20a44     0A 13 02 F6 | 	mov	arg01, arg02
20a48     54 12 06 F1 | 	add	arg01, #84
20a4c     4C 4E 85 F1 | 	sub	fp, #76
20a50     34 14 06 F1 | 	add	arg02, #52
20a54     20 16 06 F6 | 	mov	arg03, #32
20a58     BC 2F BF FD | 	call	#__system____builtin_memmove
20a5c     4C 4E 05 F1 | 	add	fp, #76
20a60     A7 16 02 FB | 	rdlong	arg03, fp
20a64     55 16 06 F1 | 	add	arg03, #85
20a68     0B 5D 48 FC | 	wrbyte	#46, arg03
20a6c     38 4E 85 F1 | 	sub	fp, #56
20a70     A7 16 02 FB | 	rdlong	arg03, fp
20a74     40 4E 05 F1 | 	add	fp, #64
20a78     A7 16 62 FC | 	wrlong	arg03, fp
20a7c     08 4E 85 F1 | 	sub	fp, #8
20a80     A7 14 02 FB | 	rdlong	arg02, fp
20a84     0A 13 02 F6 | 	mov	arg01, arg02
20a88     54 14 06 F1 | 	add	arg02, #84
20a8c     4C 4E 85 F1 | 	sub	fp, #76
20a90     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
20a94     4C 4E 05 F1 | 	add	fp, #76
20a98     A7 16 02 FB | 	rdlong	arg03, fp
20a9c     03 16 06 F1 | 	add	arg03, #3
20aa0     0B 03 48 FC | 	wrbyte	#1, arg03
20aa4     40 4E 85 F1 | 	sub	fp, #64
20aa8     A7 12 02 F6 | 	mov	arg01, fp
20aac     0C 4E 85 F1 | 	sub	fp, #12
20ab0     44 BA BF FD | 	call	#_fatfs_cc_dir_register
20ab4     08 4E 05 F1 | 	add	fp, #8
20ab8     A7 FA 61 FC | 	wrlong	result1, fp
20abc     08 4E 85 F1 | 	sub	fp, #8
20ac0                 | LR__3660
20ac0                 | LR__3661
20ac0     08 4E 05 F1 | 	add	fp, #8
20ac4     A7 FA 09 FB | 	rdlong	result1, fp wz
20ac8     08 4E 85 F1 | 	sub	fp, #8
20acc     88 00 90 5D |  if_ne	jmp	#LR__3662
20ad0     28 4E 05 F1 | 	add	fp, #40
20ad4     A7 12 02 FB | 	rdlong	arg01, fp
20ad8     16 12 06 F1 | 	add	arg01, #22
20adc     30 4E 05 F1 | 	add	fp, #48
20ae0     A7 14 02 FB | 	rdlong	arg02, fp
20ae4     09 15 62 FC | 	wrlong	arg02, arg01
20ae8     0C 4E 85 F1 | 	sub	fp, #12
20aec     A7 12 02 FB | 	rdlong	arg01, fp
20af0     24 4E 85 F1 | 	sub	fp, #36
20af4     A7 14 02 FB | 	rdlong	arg02, fp
20af8     28 4E 05 F1 | 	add	fp, #40
20afc     A7 16 02 FB | 	rdlong	arg03, fp
20b00     50 4E 85 F1 | 	sub	fp, #80
20b04     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
20b08     28 4E 05 F1 | 	add	fp, #40
20b0c     A7 FA 01 FB | 	rdlong	result1, fp
20b10     0B FA 05 F1 | 	add	result1, #11
20b14     FD 20 48 FC | 	wrbyte	#16, result1
20b18     24 4E 05 F1 | 	add	fp, #36
20b1c     A7 FA 01 FB | 	rdlong	result1, fp
20b20     03 FA 05 F1 | 	add	result1, #3
20b24     FD 02 48 FC | 	wrbyte	#1, result1
20b28     44 4E 85 F1 | 	sub	fp, #68
20b2c     A7 FA 09 FB | 	rdlong	result1, fp wz
20b30     08 4E 85 F1 | 	sub	fp, #8
20b34     3C 00 90 5D |  if_ne	jmp	#LR__3663
20b38     4C 4E 05 F1 | 	add	fp, #76
20b3c     A7 12 02 FB | 	rdlong	arg01, fp
20b40     4C 4E 85 F1 | 	sub	fp, #76
20b44     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
20b48     08 4E 05 F1 | 	add	fp, #8
20b4c     A7 FA 61 FC | 	wrlong	result1, fp
20b50     08 4E 85 F1 | 	sub	fp, #8
20b54     1C 00 90 FD | 	jmp	#LR__3663
20b58                 | LR__3662
20b58     3C 4E 05 F1 | 	add	fp, #60
20b5c     A7 12 02 F6 | 	mov	arg01, fp
20b60     14 4E 05 F1 | 	add	fp, #20
20b64     A7 14 02 FB | 	rdlong	arg02, fp
20b68     50 4E 85 F1 | 	sub	fp, #80
20b6c     00 16 06 F6 | 	mov	arg03, #0
20b70     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
20b74                 | LR__3663
20b74                 | LR__3664
20b74                 | LR__3665
20b74                 | ' 				remove_chain(&sobj, dcl, 0);
20b74                 | ' 			}
20b74                 | ' 		}
20b74                 | ' 		;
20b74                 | ' 	}
20b74                 | ' 
20b74                 | ' 	return res ;
20b74     08 4E 05 F1 | 	add	fp, #8
20b78     A7 FA 01 FB | 	rdlong	result1, fp
20b7c     08 4E 85 F1 | 	sub	fp, #8
20b80     A7 F0 03 F6 | 	mov	ptra, fp
20b84     B2 00 A0 FD | 	call	#popregs_
20b88                 | _fatfs_cc_f_mkdir_ret
20b88     2D 00 64 FD | 	ret
20b8c                 | 
20b8c                 | _fatfs_cc_f_rename
20b8c     01 4A 05 F6 | 	mov	COUNT_, #1
20b90     A8 00 A0 FD | 	call	#pushregs_
20b94     9C F0 07 F1 | 	add	ptra, #156
20b98     04 4E 05 F1 | 	add	fp, #4
20b9c     A7 12 62 FC | 	wrlong	arg01, fp
20ba0     04 4E 05 F1 | 	add	fp, #4
20ba4     A7 14 62 FC | 	wrlong	arg02, fp
20ba8     A7 12 02 F6 | 	mov	arg01, fp
20bac     08 4E 85 F1 | 	sub	fp, #8
20bb0     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
20bb4     04 4E 05 F1 | 	add	fp, #4
20bb8     A7 12 02 F6 | 	mov	arg01, fp
20bbc     6C 4E 05 F1 | 	add	fp, #108
20bc0     A7 14 02 F6 | 	mov	arg02, fp
20bc4     70 4E 85 F1 | 	sub	fp, #112
20bc8     02 16 06 F6 | 	mov	arg03, #2
20bcc     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
20bd0     0C 4E 05 F1 | 	add	fp, #12
20bd4     A7 FA 61 FC | 	wrlong	result1, fp
20bd8     0C 4E 85 F1 | 	sub	fp, #12
20bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
20be0     44 03 90 5D |  if_ne	jmp	#LR__3683
20be4     70 4E 05 F1 | 	add	fp, #112
20be8     A7 16 02 FB | 	rdlong	arg03, fp
20bec     60 4E 85 F1 | 	sub	fp, #96
20bf0     A7 16 62 FC | 	wrlong	arg03, fp
20bf4     A7 12 02 F6 | 	mov	arg01, fp
20bf8     0C 4E 85 F1 | 	sub	fp, #12
20bfc     A7 14 02 FB | 	rdlong	arg02, fp
20c00     04 4E 85 F1 | 	sub	fp, #4
20c04     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
20c08     0C 4E 05 F1 | 	add	fp, #12
20c0c     A7 FA 61 FC | 	wrlong	result1, fp
20c10     00 FA 4D F2 | 	cmps	result1, #0 wz
20c14     0C 4E 85 F1 | 	sub	fp, #12
20c18     1C 00 90 5D |  if_ne	jmp	#LR__3670
20c1c     3B 4E 05 F1 | 	add	fp, #59
20c20     A7 FA C1 FA | 	rdbyte	result1, fp
20c24     3B 4E 85 F1 | 	sub	fp, #59
20c28     A0 FA CD F7 | 	test	result1, #160 wz
20c2c     0C 4E 05 51 |  if_ne	add	fp, #12
20c30     A7 0C 68 5C |  if_ne	wrlong	#6, fp
20c34     0C 4E 85 51 |  if_ne	sub	fp, #12
20c38                 | LR__3670
20c38     0C 4E 05 F1 | 	add	fp, #12
20c3c     A7 1E 0A FB | 	rdlong	local01, fp wz
20c40     0C 4E 85 F1 | 	sub	fp, #12
20c44     E0 02 90 5D |  if_ne	jmp	#LR__3682
20c48     74 4E 05 F1 | 	add	fp, #116
20c4c     A7 12 02 F6 | 	mov	arg01, fp
20c50     48 4E 85 F1 | 	sub	fp, #72
20c54     A7 14 02 FB | 	rdlong	arg02, fp
20c58     2C 4E 85 F1 | 	sub	fp, #44
20c5c     20 16 06 F6 | 	mov	arg03, #32
20c60     B4 2D BF FD | 	call	#__system____builtin_memmove
20c64     40 4E 05 F1 | 	add	fp, #64
20c68     A7 12 02 F6 | 	mov	arg01, fp
20c6c     30 4E 85 F1 | 	sub	fp, #48
20c70     A7 14 02 F6 | 	mov	arg02, fp
20c74     10 4E 85 F1 | 	sub	fp, #16
20c78     30 16 06 F6 | 	mov	arg03, #48
20c7c     98 2D BF FD | 	call	#__system____builtin_memmove
20c80     40 4E 05 F1 | 	add	fp, #64
20c84     A7 12 02 F6 | 	mov	arg01, fp
20c88     38 4E 85 F1 | 	sub	fp, #56
20c8c     A7 14 02 FB | 	rdlong	arg02, fp
20c90     08 4E 85 F1 | 	sub	fp, #8
20c94     34 CA BF FD | 	call	#_fatfs_cc_follow_path
20c98     0C 4E 05 F1 | 	add	fp, #12
20c9c     A7 FA 61 FC | 	wrlong	result1, fp
20ca0     0C 4E 85 F1 | 	sub	fp, #12
20ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
20ca8     4C 00 90 5D |  if_ne	jmp	#LR__3673
20cac     48 4E 05 F1 | 	add	fp, #72
20cb0     A7 FA 01 FB | 	rdlong	result1, fp
20cb4     30 4E 85 F1 | 	sub	fp, #48
20cb8     A7 16 02 FB | 	rdlong	arg03, fp
20cbc     18 4E 85 F1 | 	sub	fp, #24
20cc0     0B FB 09 F2 | 	cmp	result1, arg03 wz
20cc4     20 00 90 5D |  if_ne	jmp	#LR__3671
20cc8     50 4E 05 F1 | 	add	fp, #80
20ccc     A7 FA 01 FB | 	rdlong	result1, fp
20cd0     30 4E 85 F1 | 	sub	fp, #48
20cd4     A7 16 02 FB | 	rdlong	arg03, fp
20cd8     20 4E 85 F1 | 	sub	fp, #32
20cdc     0B FB 09 F2 | 	cmp	result1, arg03 wz
20ce0     04 1E 06 A6 |  if_e	mov	local01, #4
20ce4     04 00 90 AD |  if_e	jmp	#LR__3672
20ce8                 | LR__3671
20ce8     08 1E 06 F6 | 	mov	local01, #8
20cec                 | LR__3672
20cec     0C 4E 05 F1 | 	add	fp, #12
20cf0     A7 1E 62 FC | 	wrlong	local01, fp
20cf4     0C 4E 85 F1 | 	sub	fp, #12
20cf8                 | LR__3673
20cf8     0C 4E 05 F1 | 	add	fp, #12
20cfc     A7 1E 02 FB | 	rdlong	local01, fp
20d00     0C 4E 85 F1 | 	sub	fp, #12
20d04     04 1E 0E F2 | 	cmp	local01, #4 wz
20d08     CC 01 90 5D |  if_ne	jmp	#LR__3679
20d0c     40 4E 05 F1 | 	add	fp, #64
20d10     A7 12 02 F6 | 	mov	arg01, fp
20d14     40 4E 85 F1 | 	sub	fp, #64
20d18     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
20d1c     0C 4E 05 F1 | 	add	fp, #12
20d20     A7 FA 61 FC | 	wrlong	result1, fp
20d24     0C 4E 85 F1 | 	sub	fp, #12
20d28     00 FA 0D F2 | 	cmp	result1, #0 wz
20d2c     A8 01 90 5D |  if_ne	jmp	#LR__3678
20d30     5C 4E 05 F1 | 	add	fp, #92
20d34     A7 12 02 FB | 	rdlong	arg01, fp
20d38     38 4E 05 F1 | 	add	fp, #56
20d3c     A7 12 62 FC | 	wrlong	arg01, fp
20d40     0D 12 06 F1 | 	add	arg01, #13
20d44     20 4E 85 F1 | 	sub	fp, #32
20d48     A7 14 02 F6 | 	mov	arg02, fp
20d4c     74 4E 85 F1 | 	sub	fp, #116
20d50     0D 14 06 F1 | 	add	arg02, #13
20d54     13 16 06 F6 | 	mov	arg03, #19
20d58     BC 2C BF FD | 	call	#__system____builtin_memmove
20d5c     94 4E 05 F1 | 	add	fp, #148
20d60     A7 1E 02 FB | 	rdlong	local01, fp
20d64     15 4E 85 F1 | 	sub	fp, #21
20d68     A7 FA C1 FA | 	rdbyte	result1, fp
20d6c     0B 1E 06 F1 | 	add	local01, #11
20d70     0F FB 41 FC | 	wrbyte	result1, local01
20d74     15 4E 05 F1 | 	add	fp, #21
20d78     A7 1E 02 FB | 	rdlong	local01, fp
20d7c     94 4E 85 F1 | 	sub	fp, #148
20d80     0B 1E 06 F1 | 	add	local01, #11
20d84     0F 1F C2 FA | 	rdbyte	local01, local01
20d88     10 1E CE F7 | 	test	local01, #16 wz
20d8c     24 00 90 5D |  if_ne	jmp	#LR__3674
20d90     94 4E 05 F1 | 	add	fp, #148
20d94     A7 FA 01 FB | 	rdlong	result1, fp
20d98     FD 1E 02 F6 | 	mov	local01, result1
20d9c     94 4E 85 F1 | 	sub	fp, #148
20da0     0B FA 05 F1 | 	add	result1, #11
20da4     FD FA C1 FA | 	rdbyte	result1, result1
20da8     20 FA 45 F5 | 	or	result1, #32
20dac     0B 1E 06 F1 | 	add	local01, #11
20db0     0F FB 41 FC | 	wrbyte	result1, local01
20db4                 | LR__3674
20db4     70 4E 05 F1 | 	add	fp, #112
20db8     A7 1E 02 FB | 	rdlong	local01, fp
20dbc     03 1E 06 F1 | 	add	local01, #3
20dc0     0F 03 48 FC | 	wrbyte	#1, local01
20dc4     24 4E 05 F1 | 	add	fp, #36
20dc8     A7 1E 02 FB | 	rdlong	local01, fp
20dcc     94 4E 85 F1 | 	sub	fp, #148
20dd0     0B 1E 06 F1 | 	add	local01, #11
20dd4     0F 1F C2 FA | 	rdbyte	local01, local01
20dd8     10 1E CE F7 | 	test	local01, #16 wz
20ddc     F8 00 90 AD |  if_e	jmp	#LR__3677
20de0     18 4E 05 F1 | 	add	fp, #24
20de4     A7 16 02 FB | 	rdlong	arg03, fp
20de8     30 4E 05 F1 | 	add	fp, #48
20dec     A7 1E 02 FB | 	rdlong	local01, fp
20df0     48 4E 85 F1 | 	sub	fp, #72
20df4     0F 17 0A F2 | 	cmp	arg03, local01 wz
20df8     DC 00 90 AD |  if_e	jmp	#LR__3677
20dfc     70 4E 05 F1 | 	add	fp, #112
20e00     A7 12 02 FB | 	rdlong	arg01, fp
20e04     09 1F 02 F6 | 	mov	local01, arg01
20e08     24 4E 05 F1 | 	add	fp, #36
20e0c     A7 14 02 FB | 	rdlong	arg02, fp
20e10     94 4E 85 F1 | 	sub	fp, #148
20e14     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
20e18     FD 14 02 F6 | 	mov	arg02, result1
20e1c     0F 13 02 F6 | 	mov	arg01, local01
20e20     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
20e24     98 4E 05 F1 | 	add	fp, #152
20e28     A7 FA 61 FC | 	wrlong	result1, fp
20e2c     00 FA 4D F2 | 	cmps	result1, #0 wz
20e30     98 4E 85 F1 | 	sub	fp, #152
20e34     0C 4E 05 A1 |  if_e	add	fp, #12
20e38     A7 04 68 AC |  if_e	wrlong	#2, fp
20e3c     0C 4E 85 A1 |  if_e	sub	fp, #12
20e40     94 00 90 AD |  if_e	jmp	#LR__3676
20e44     70 4E 05 F1 | 	add	fp, #112
20e48     A7 12 02 FB | 	rdlong	arg01, fp
20e4c     28 4E 05 F1 | 	add	fp, #40
20e50     A7 14 02 FB | 	rdlong	arg02, fp
20e54     98 4E 85 F1 | 	sub	fp, #152
20e58     4C A0 BF FD | 	call	#_fatfs_cc_move_window
20e5c     0C 4E 05 F1 | 	add	fp, #12
20e60     A7 FA 61 FC | 	wrlong	result1, fp
20e64     64 4E 05 F1 | 	add	fp, #100
20e68     A7 1E 02 FB | 	rdlong	local01, fp
20e6c     54 1E 06 F1 | 	add	local01, #84
20e70     24 4E 05 F1 | 	add	fp, #36
20e74     A7 1E 62 FC | 	wrlong	local01, fp
20e78     88 4E 85 F1 | 	sub	fp, #136
20e7c     A7 1E 0A FB | 	rdlong	local01, fp wz
20e80     0C 4E 85 F1 | 	sub	fp, #12
20e84     50 00 90 5D |  if_ne	jmp	#LR__3675
20e88     94 4E 05 F1 | 	add	fp, #148
20e8c     A7 1E 02 FB | 	rdlong	local01, fp
20e90     94 4E 85 F1 | 	sub	fp, #148
20e94     01 1E 06 F1 | 	add	local01, #1
20e98     0F 1F C2 FA | 	rdbyte	local01, local01
20e9c     2E 1E 0E F2 | 	cmp	local01, #46 wz
20ea0     34 00 90 5D |  if_ne	jmp	#LR__3675
20ea4     70 4E 05 F1 | 	add	fp, #112
20ea8     A7 12 02 FB | 	rdlong	arg01, fp
20eac     24 4E 05 F1 | 	add	fp, #36
20eb0     A7 14 02 FB | 	rdlong	arg02, fp
20eb4     4C 4E 85 F1 | 	sub	fp, #76
20eb8     A7 16 02 FB | 	rdlong	arg03, fp
20ebc     48 4E 85 F1 | 	sub	fp, #72
20ec0     50 AD BF FD | 	call	#_fatfs_cc_st_clust
20ec4     70 4E 05 F1 | 	add	fp, #112
20ec8     A7 1E 02 FB | 	rdlong	local01, fp
20ecc     70 4E 85 F1 | 	sub	fp, #112
20ed0     03 1E 06 F1 | 	add	local01, #3
20ed4     0F 03 48 FC | 	wrbyte	#1, local01
20ed8                 | LR__3675
20ed8                 | LR__3676
20ed8                 | LR__3677
20ed8                 | LR__3678
20ed8                 | LR__3679
20ed8     0C 4E 05 F1 | 	add	fp, #12
20edc     A7 1E 0A FB | 	rdlong	local01, fp wz
20ee0     0C 4E 85 F1 | 	sub	fp, #12
20ee4     40 00 90 5D |  if_ne	jmp	#LR__3681
20ee8     10 4E 05 F1 | 	add	fp, #16
20eec     A7 12 02 F6 | 	mov	arg01, fp
20ef0     10 4E 85 F1 | 	sub	fp, #16
20ef4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
20ef8     0C 4E 05 F1 | 	add	fp, #12
20efc     A7 FA 61 FC | 	wrlong	result1, fp
20f00     0C 4E 85 F1 | 	sub	fp, #12
20f04     00 FA 0D F2 | 	cmp	result1, #0 wz
20f08     1C 00 90 5D |  if_ne	jmp	#LR__3680
20f0c     70 4E 05 F1 | 	add	fp, #112
20f10     A7 12 02 FB | 	rdlong	arg01, fp
20f14     70 4E 85 F1 | 	sub	fp, #112
20f18     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
20f1c     0C 4E 05 F1 | 	add	fp, #12
20f20     A7 FA 61 FC | 	wrlong	result1, fp
20f24     0C 4E 85 F1 | 	sub	fp, #12
20f28                 | LR__3680
20f28                 | LR__3681
20f28                 | LR__3682
20f28                 | LR__3683
20f28                 | ' 					res = sync_fs(fs);
20f28                 | ' 				}
20f28                 | ' 			}
20f28                 | ' 
20f28                 | ' 		}
20f28                 | ' 		;
20f28                 | ' 	}
20f28                 | ' 
20f28                 | ' 	return res ;
20f28     0C 4E 05 F1 | 	add	fp, #12
20f2c     A7 FA 01 FB | 	rdlong	result1, fp
20f30     0C 4E 85 F1 | 	sub	fp, #12
20f34     A7 F0 03 F6 | 	mov	ptra, fp
20f38     B2 00 A0 FD | 	call	#popregs_
20f3c                 | _fatfs_cc_f_rename_ret
20f3c     2D 00 64 FD | 	ret
20f40                 | 
20f40                 | _fatfs_cc_time
20f40     00 4A 05 F6 | 	mov	COUNT_, #0
20f44     A8 00 A0 FD | 	call	#pushregs_
20f48     14 F0 07 F1 | 	add	ptra, #20
20f4c     04 4E 05 F1 | 	add	fp, #4
20f50     A7 12 62 FC | 	wrlong	arg01, fp
20f54     04 4E 05 F1 | 	add	fp, #4
20f58     A7 12 02 F6 | 	mov	arg01, fp
20f5c     08 4E 85 F1 | 	sub	fp, #8
20f60     00 14 06 F6 | 	mov	arg02, #0
20f64     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
20f68     08 4E 05 F1 | 	add	fp, #8
20f6c     A7 FA 01 FB | 	rdlong	result1, fp
20f70     08 4E 05 F1 | 	add	fp, #8
20f74     A7 FA 61 FC | 	wrlong	result1, fp
20f78     0C 4E 85 F1 | 	sub	fp, #12
20f7c     A7 FA 09 FB | 	rdlong	result1, fp wz
20f80     04 4E 85 F1 | 	sub	fp, #4
20f84     18 00 90 AD |  if_e	jmp	#LR__3690
20f88     04 4E 05 F1 | 	add	fp, #4
20f8c     A7 FA 01 FB | 	rdlong	result1, fp
20f90     0C 4E 05 F1 | 	add	fp, #12
20f94     A7 14 02 FB | 	rdlong	arg02, fp
20f98     10 4E 85 F1 | 	sub	fp, #16
20f9c     FD 14 62 FC | 	wrlong	arg02, result1
20fa0                 | LR__3690
20fa0                 | '         *tp = now;
20fa0                 | '     return now;
20fa0     10 4E 05 F1 | 	add	fp, #16
20fa4     A7 FA 01 FB | 	rdlong	result1, fp
20fa8     10 4E 85 F1 | 	sub	fp, #16
20fac     A7 F0 03 F6 | 	mov	ptra, fp
20fb0     B2 00 A0 FD | 	call	#popregs_
20fb4                 | _fatfs_cc_time_ret
20fb4     2D 00 64 FD | 	ret
20fb8                 | 
20fb8                 | _fatfs_cc_mktime
20fb8     06 4A 05 F6 | 	mov	COUNT_, #6
20fbc     A8 00 A0 FD | 	call	#pushregs_
20fc0     09 1F 02 F6 | 	mov	local01, arg01
20fc4     14 1E 06 F1 | 	add	local01, #20
20fc8     0F 13 02 FB | 	rdlong	arg01, local01
20fcc     14 1E 86 F1 | 	sub	local01, #20
20fd0     46 12 56 F2 | 	cmps	arg01, #70 wc
20fd4                 | '                 return (time_t) -1;
20fd4     01 FA 65 C6 |  if_b	neg	result1, #1
20fd8     7C 01 90 CD |  if_b	jmp	#LR__3704
20fdc     03 00 00 FF 
20fe0     6C 21 06 F6 | 	mov	local02, ##1900
20fe4     14 1E 06 F1 | 	add	local01, #20
20fe8     0F FB 01 FB | 	rdlong	result1, local01
20fec     FD 20 02 F1 | 	add	local02, result1
20ff0     08 1E 86 F1 | 	sub	local01, #8
20ff4     0F 23 02 FB | 	rdlong	local03, local01
20ff8     01 22 86 F1 | 	sub	local03, #1
20ffc     04 1E 06 F1 | 	add	local01, #4
21000     0F 13 02 FB | 	rdlong	arg01, local01
21004     10 1E 86 F1 | 	sub	local01, #16
21008     02 12 66 F0 | 	shl	arg01, #2
2100c     02 00 00 FF 
21010     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
21014     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
21018     09 FB 01 FB | 	rdlong	result1, arg01
2101c     FD 22 02 F1 | 	add	local03, result1
21020     10 13 02 F6 | 	mov	arg01, local02
21024     02 00 00 FF 
21028     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2102c     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
21030     00 FA 0D F2 | 	cmp	result1, #0 wz
21034     1C 00 90 AD |  if_e	jmp	#LR__3700
21038     00 24 06 F6 | 	mov	local04, #0
2103c     10 1E 06 F1 | 	add	local01, #16
21040     0F FB 01 FB | 	rdlong	result1, local01
21044     10 1E 86 F1 | 	sub	local01, #16
21048     02 FA 55 F2 | 	cmps	result1, #2 wc
2104c     01 24 06 36 |  if_ae	mov	local04, #1
21050     04 00 90 FD | 	jmp	#LR__3701
21054                 | LR__3700
21054     00 24 06 F6 | 	mov	local04, #0
21058                 | LR__3701
21058     04 1E 06 F1 | 	add	local01, #4
2105c     0F FB 01 FB | 	rdlong	result1, local01
21060     04 1E 86 F1 | 	sub	local01, #4
21064     0F 27 02 FB | 	rdlong	local05, local01
21068     08 1E 06 F1 | 	add	local01, #8
2106c     0F 13 02 FB | 	rdlong	arg01, local01
21070     07 00 00 FF 
21074     10 12 06 FD | 	qmul	arg01, ##3600
21078     12 23 02 F1 | 	add	local03, local04
2107c     FD 24 02 F6 | 	mov	local04, result1
21080     04 24 66 F0 | 	shl	local04, #4
21084     FD 24 82 F1 | 	sub	local04, result1
21088     02 24 66 F0 | 	shl	local04, #2
2108c     12 27 02 F1 | 	add	local05, local04
21090     08 1E 86 F1 | 	sub	local01, #8
21094     18 24 62 FD | 	getqx	local04
21098     A8 00 00 FF 
2109c     80 23 06 FD | 	qmul	local03, ##86400
210a0     12 27 02 F1 | 	add	local05, local04
210a4     10 23 02 F6 | 	mov	local03, local02
210a8     03 00 00 FF 
210ac     B2 23 86 F1 | 	sub	local03, ##1970
210b0     18 24 62 FD | 	getqx	local04
210b4     99 F0 00 FF 
210b8     80 23 06 FD | 	qmul	local03, ##31536000
210bc     12 27 02 F1 | 	add	local05, local04
210c0     10 23 02 F6 | 	mov	local03, local02
210c4     03 00 00 FF 
210c8     B1 23 86 F1 | 	sub	local03, ##1969
210cc     11 29 52 F6 | 	abs	local06, local03 wc
210d0     02 28 46 F0 | 	shr	local06, #2
210d4     14 29 82 F6 | 	negc	local06, local06
210d8     03 00 00 FF 
210dc     D1 21 56 F2 | 	cmps	local02, ##2001 wc
210e0     18 24 62 FD | 	getqx	local04
210e4     12 27 02 F1 | 	add	local05, local04
210e8     18 00 90 CD |  if_b	jmp	#LR__3702
210ec     03 00 00 FF 
210f0     D0 21 86 F1 | 	sub	local02, ##2000
210f4     10 25 52 F6 | 	abs	local04, local02 wc
210f8     64 24 16 FD | 	qdiv	local04, #100
210fc     18 24 62 FD | 	getqx	local04
21100     12 29 A2 F3 | 	sumnc	local06, local04
21104                 | LR__3702
21104     A8 00 00 FF 
21108     80 29 06 FD | 	qmul	local06, ##86400
2110c     18 28 62 FD | 	getqx	local06
21110     14 27 02 F1 | 	add	local05, local06
21114     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
21118     02 00 00 FF 
2111c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
21120     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
21124     14 27 02 F1 | 	add	local05, local06
21128     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2112c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
21130     02 00 00 FF 
21134     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
21138     01 22 0E F2 | 	cmp	local03, #1 wz
2113c     14 00 90 5D |  if_ne	jmp	#LR__3703
21140     0F 13 02 F6 | 	mov	arg01, local01
21144     D8 19 B0 FD | 	call	#_fatfs_cc___indst
21148     00 FA 0D F2 | 	cmp	result1, #0 wz
2114c     07 00 00 5F 
21150     10 26 86 51 |  if_ne	sub	local05, ##3600
21154                 | LR__3703
21154                 | '                 s -=  (3600L) ;
21154                 | ' 
21154                 | '         return s;
21154     13 FB 01 F6 | 	mov	result1, local05
21158                 | LR__3704
21158     A7 F0 03 F6 | 	mov	ptra, fp
2115c     B2 00 A0 FD | 	call	#popregs_
21160                 | _fatfs_cc_mktime_ret
21160     2D 00 64 FD | 	ret
21164                 | 
21164                 | _fatfs_cc__gmtime_r
21164     03 4A 05 F6 | 	mov	COUNT_, #3
21168     A8 00 A0 FD | 	call	#pushregs_
2116c     09 1F 02 FB | 	rdlong	local01, arg01
21170     A8 00 00 FF 
21174     80 1F 16 FD | 	qdiv	local01, ##86400
21178     18 FA 61 FD | 	getqx	result1
2117c     04 FA 05 F1 | 	add	result1, #4
21180     07 FA 15 FD | 	qdiv	result1, #7
21184     18 14 06 F1 | 	add	arg02, #24
21188     D1 7F 27 FF 
2118c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
21190     D1 7F 27 3F 
21194     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
21198     03 00 00 3F 
2119c     DC 21 06 36 |  if_ae	mov	local02, ##2012
211a0     03 00 00 CF 
211a4     B2 21 06 C6 |  if_b	mov	local02, ##1970
211a8                 | ' 	  year = 1970;
211a8                 | ' 	}
211a8                 | ' 
211a8                 | ' 	for(;;) {
211a8     19 FA 61 FD | 	getqy	result1
211ac     0A FB 61 FC | 	wrlong	result1, arg02
211b0     18 14 86 F1 | 	sub	arg02, #24
211b4                 | LR__3710
211b4     10 13 02 F6 | 	mov	arg01, local02
211b8     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
211bc     00 FA 0D F2 | 	cmp	result1, #0 wz
211c0     42 F1 00 5F 
211c4     00 23 06 56 |  if_ne	mov	local03, ##31622400
211c8     99 F0 00 AF 
211cc     80 23 06 A6 |  if_e	mov	local03, ##31536000
211d0     11 1F 12 F2 | 	cmp	local01, local03 wc
211d4                 | ' 	    break;
211d4     01 20 06 31 |  if_ae	add	local02, #1
211d8     11 1F 82 31 |  if_ae	sub	local01, local03
211dc     D4 FF 9F 3D |  if_ae	jmp	#LR__3710
211e0     A8 00 00 FF 
211e4     80 1F 16 FD | 	qdiv	local01, ##86400
211e8     10 23 02 F6 | 	mov	local03, local02
211ec     03 00 00 FF 
211f0     6C 23 86 F1 | 	sub	local03, ##1900
211f4     14 14 06 F1 | 	add	arg02, #20
211f8     0A 23 62 FC | 	wrlong	local03, arg02
211fc     08 14 06 F1 | 	add	arg02, #8
21200     10 13 02 F6 | 	mov	arg01, local02
21204     18 20 62 FD | 	getqx	local02
21208     0A 21 62 FC | 	wrlong	local02, arg02
2120c     1C 14 86 F1 | 	sub	arg02, #28
21210     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
21214     00 FA 0D F2 | 	cmp	result1, #0 wz
21218     1D 22 06 56 |  if_ne	mov	local03, #29
2121c     1C 22 06 A6 |  if_e	mov	local03, #28
21220     02 00 00 FF 
21224     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
21228     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2122c     02 00 00 FF 
21230     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
21234                 | ' 
21234                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
21234                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
21234     00 12 06 F6 | 	mov	arg01, #0
21238     97 2A 48 FB | 	callpa	#(@LR__3712-@LR__3711)>>2,fcache_load_ptr_
2123c                 | LR__3711
2123c     09 23 02 F6 | 	mov	local03, arg01
21240     02 22 66 F0 | 	shl	local03, #2
21244     02 00 00 FF 
21248     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2124c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
21250     11 23 02 FB | 	rdlong	local03, local03
21254     11 21 52 F2 | 	cmps	local02, local03 wc
21258     02 00 00 FF 
2125c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
21260     2C 00 90 CD |  if_b	jmp	#LR__3713
21264     09 23 02 F6 | 	mov	local03, arg01
21268     02 22 66 F0 | 	shl	local03, #2
2126c     02 00 00 FF 
21270     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
21274     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
21278     11 23 02 FB | 	rdlong	local03, local03
2127c     11 21 82 F1 | 	sub	local02, local03
21280     01 12 06 F1 | 	add	arg01, #1
21284     02 00 00 FF 
21288     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2128c     AC FF 9F FD | 	jmp	#LR__3711
21290                 | LR__3712
21290                 | LR__3713
21290     A8 00 00 FF 
21294     80 1F 16 FD | 	qdiv	local01, ##86400
21298     10 14 06 F1 | 	add	arg02, #16
2129c     0A 13 62 FC | 	wrlong	arg01, arg02
212a0     01 20 06 F1 | 	add	local02, #1
212a4     04 14 86 F1 | 	sub	arg02, #4
212a8     0A 21 62 FC | 	wrlong	local02, arg02
212ac     19 1E 62 FD | 	getqy	local01
212b0     07 00 00 FF 
212b4     10 1E 16 FD | 	qdiv	local01, ##3600
212b8     18 22 62 FD | 	getqx	local03
212bc     07 00 00 FF 
212c0     10 1E 16 FD | 	qdiv	local01, ##3600
212c4     04 14 86 F1 | 	sub	arg02, #4
212c8     0A 23 62 FC | 	wrlong	local03, arg02
212cc     19 1E 62 FD | 	getqy	local01
212d0     3C 1E 16 FD | 	qdiv	local01, #60
212d4     18 22 62 FD | 	getqx	local03
212d8     3C 1E 16 FD | 	qdiv	local01, #60
212dc     04 14 86 F1 | 	sub	arg02, #4
212e0     0A 23 62 FC | 	wrlong	local03, arg02
212e4     04 14 86 F1 | 	sub	arg02, #4
212e8                 | '         stm->tm_isdst = 0;
212e8                 | ' 
212e8                 | ' ;
212e8                 | '         return stm;
212e8     0A FB 01 F6 | 	mov	result1, arg02
212ec     19 22 62 FD | 	getqy	local03
212f0     0A 23 62 FC | 	wrlong	local03, arg02
212f4     20 14 06 F1 | 	add	arg02, #32
212f8     0A 01 68 FC | 	wrlong	#0, arg02
212fc     A7 F0 03 F6 | 	mov	ptra, fp
21300     B2 00 A0 FD | 	call	#popregs_
21304                 | _fatfs_cc__gmtime_r_ret
21304     2D 00 64 FD | 	ret
21308                 | 
21308                 | _fatfs_cc__tzset
21308     17 01 00 FF 
2130c     49 12 06 F6 | 	mov	arg01, ##@LR__4025
21310     34 00 B0 FD | 	call	#_fatfs_cc_getenv
21314     FD 12 02 F6 | 	mov	arg01, result1
21318     02 00 00 FF 
2131c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
21320     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
21324     02 00 00 FF 
21328     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2132c     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
21330     02 00 00 FF 
21334     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
21338     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2133c     02 00 00 FF 
21340     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
21344                 | _fatfs_cc__tzset_ret
21344     2D 00 64 FD | 	ret
21348                 | 
21348                 | _fatfs_cc_getenv
21348     06 4A 05 F6 | 	mov	COUNT_, #6
2134c     A8 00 A0 FD | 	call	#pushregs_
21350     09 1F 02 F6 | 	mov	local01, arg01
21354     09 21 02 F6 | 	mov	local02, arg01
21358     97 06 48 FB | 	callpa	#(@LR__3721-@LR__3720)>>2,fcache_load_ptr_
2135c                 | LR__3720
2135c     10 FB C9 FA | 	rdbyte	result1, local02 wz
21360     01 20 06 51 |  if_ne	add	local02, #1
21364     F4 FF 9F 5D |  if_ne	jmp	#LR__3720
21368                 | LR__3721
21368     09 21 82 F1 | 	sub	local02, arg01
2136c     10 FB 01 F6 | 	mov	result1, local02
21370     02 00 00 FF 
21374     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
21378     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2137c     02 00 00 FF 
21380     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
21384                 | '             return 0;
21384     00 FA 05 A6 |  if_e	mov	result1, #0
21388     5C 00 90 AD |  if_e	jmp	#LR__3724
2138c                 | ' 
2138c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2138c     02 00 00 FF 
21390     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
21394     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
21398     02 00 00 FF 
2139c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
213a0                 | LR__3722
213a0     11 25 0A FB | 	rdlong	local04, local03 wz
213a4     3C 00 90 AD |  if_e	jmp	#LR__3723
213a8     12 13 02 F6 | 	mov	arg01, local04
213ac     0F 15 02 F6 | 	mov	arg02, local01
213b0     10 17 02 F6 | 	mov	arg03, local02
213b4     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
213b8     00 FA 0D F2 | 	cmp	result1, #0 wz
213bc     10 27 02 A6 |  if_e	mov	local05, local02
213c0     12 27 02 A1 |  if_e	add	local05, local04
213c4     13 29 C2 AA |  if_e	rdbyte	local06, local05
213c8     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
213cc                 | ' 			return name+len+1;
213cc     10 25 02 A1 |  if_e	add	local04, local02
213d0     01 24 06 A1 |  if_e	add	local04, #1
213d4     12 FB 01 A6 |  if_e	mov	result1, local04
213d8     0C 00 90 AD |  if_e	jmp	#LR__3724
213dc     04 22 06 F1 | 	add	local03, #4
213e0     BC FF 9F FD | 	jmp	#LR__3722
213e4                 | LR__3723
213e4                 | ' 	}
213e4                 | ' 	return 0;
213e4     00 FA 05 F6 | 	mov	result1, #0
213e8                 | LR__3724
213e8     A7 F0 03 F6 | 	mov	ptra, fp
213ec     B2 00 A0 FD | 	call	#popregs_
213f0                 | _fatfs_cc_getenv_ret
213f0     2D 00 64 FD | 	ret
213f4                 | 
213f4                 | _fatfs_cc__get_fattime
213f4     00 4A 05 F6 | 	mov	COUNT_, #0
213f8     A8 00 A0 FD | 	call	#pushregs_
213fc     34 F0 07 F1 | 	add	ptra, #52
21400     00 12 06 F6 | 	mov	arg01, #0
21404     38 FB BF FD | 	call	#_fatfs_cc_time
21408     04 4E 05 F1 | 	add	fp, #4
2140c     A7 FA 61 FC | 	wrlong	result1, fp
21410     A7 12 02 F6 | 	mov	arg01, fp
21414     0C 4E 05 F1 | 	add	fp, #12
21418     A7 14 02 F6 | 	mov	arg02, fp
2141c     10 4E 85 F1 | 	sub	fp, #16
21420     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
21424     24 4E 05 F1 | 	add	fp, #36
21428     A7 14 02 FB | 	rdlong	arg02, fp
2142c     50 14 86 F1 | 	sub	arg02, #80
21430     09 14 66 F0 | 	shl	arg02, #9
21434     04 4E 85 F1 | 	sub	fp, #4
21438     A7 FA 01 FB | 	rdlong	result1, fp
2143c     01 FA 05 F1 | 	add	result1, #1
21440     05 FA 65 F0 | 	shl	result1, #5
21444     FD 14 42 F5 | 	or	arg02, result1
21448     04 4E 85 F1 | 	sub	fp, #4
2144c     A7 FA 01 FB | 	rdlong	result1, fp
21450     FD 14 42 F5 | 	or	arg02, result1
21454     14 4E 85 F1 | 	sub	fp, #20
21458     A7 14 62 FC | 	wrlong	arg02, fp
2145c     10 4E 05 F1 | 	add	fp, #16
21460     A7 14 02 FB | 	rdlong	arg02, fp
21464     0B 14 66 F0 | 	shl	arg02, #11
21468     04 4E 85 F1 | 	sub	fp, #4
2146c     A7 FA 01 FB | 	rdlong	result1, fp
21470     05 FA 65 F0 | 	shl	result1, #5
21474     FD 14 42 F5 | 	or	arg02, result1
21478     04 4E 85 F1 | 	sub	fp, #4
2147c     A7 FA 01 FB | 	rdlong	result1, fp
21480     FD 14 42 F5 | 	or	arg02, result1
21484     04 4E 85 F1 | 	sub	fp, #4
21488     A7 14 62 FC | 	wrlong	arg02, fp
2148c                 | ' 
2148c                 | '     now = time(0);
2148c                 | '     _gmtime_r (&now, &date);
2148c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2148c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2148c                 | '     return (ffdate << 16) | fftime;
2148c     04 4E 85 F1 | 	sub	fp, #4
21490     A7 FA 01 FB | 	rdlong	result1, fp
21494     10 FA 65 F0 | 	shl	result1, #16
21498     08 4E 85 F1 | 	sub	fp, #8
2149c     0A FB 41 F5 | 	or	result1, arg02
214a0     A7 F0 03 F6 | 	mov	ptra, fp
214a4     B2 00 A0 FD | 	call	#popregs_
214a8                 | _fatfs_cc__get_fattime_ret
214a8     2D 00 64 FD | 	ret
214ac                 | 
214ac                 | _fatfs_cc_unixtime_0725
214ac     00 4A 05 F6 | 	mov	COUNT_, #0
214b0     A8 00 A0 FD | 	call	#pushregs_
214b4     34 F0 07 F1 | 	add	ptra, #52
214b8     04 4E 05 F1 | 	add	fp, #4
214bc     A7 12 62 FC | 	wrlong	arg01, fp
214c0     04 4E 05 F1 | 	add	fp, #4
214c4     A7 14 62 FC | 	wrlong	arg02, fp
214c8     04 4E 85 F1 | 	sub	fp, #4
214cc     A7 14 02 FB | 	rdlong	arg02, fp
214d0     09 14 46 F0 | 	shr	arg02, #9
214d4     7F 14 06 F5 | 	and	arg02, #127
214d8     50 FA 05 F6 | 	mov	result1, #80
214dc     0A FB 01 F1 | 	add	result1, arg02
214e0     20 4E 05 F1 | 	add	fp, #32
214e4     A7 FA 61 FC | 	wrlong	result1, fp
214e8     20 4E 85 F1 | 	sub	fp, #32
214ec     A7 FA 01 FB | 	rdlong	result1, fp
214f0     05 FA 45 F0 | 	shr	result1, #5
214f4     FD FA 41 F8 | 	getnib	result1, result1, #0
214f8     01 FA 85 F1 | 	sub	result1, #1
214fc     1C 4E 05 F1 | 	add	fp, #28
21500     A7 FA 61 FC | 	wrlong	result1, fp
21504     1C 4E 85 F1 | 	sub	fp, #28
21508     A7 FA 01 FB | 	rdlong	result1, fp
2150c     1F FA 05 F5 | 	and	result1, #31
21510     18 4E 05 F1 | 	add	fp, #24
21514     A7 FA 61 FC | 	wrlong	result1, fp
21518     14 4E 85 F1 | 	sub	fp, #20
2151c     A7 FA 01 FB | 	rdlong	result1, fp
21520     0B FA 45 F0 | 	shr	result1, #11
21524     1F FA 05 F5 | 	and	result1, #31
21528     10 4E 05 F1 | 	add	fp, #16
2152c     A7 FA 61 FC | 	wrlong	result1, fp
21530     10 4E 85 F1 | 	sub	fp, #16
21534     A7 FA 01 FB | 	rdlong	result1, fp
21538     05 FA 45 F0 | 	shr	result1, #5
2153c     3F FA 05 F5 | 	and	result1, #63
21540     0C 4E 05 F1 | 	add	fp, #12
21544     A7 FA 61 FC | 	wrlong	result1, fp
21548     0C 4E 85 F1 | 	sub	fp, #12
2154c     A7 14 02 FB | 	rdlong	arg02, fp
21550     1F 14 06 F5 | 	and	arg02, #31
21554     01 14 66 F0 | 	shl	arg02, #1
21558     08 4E 05 F1 | 	add	fp, #8
2155c     A7 14 62 FC | 	wrlong	arg02, fp
21560     A7 12 02 F6 | 	mov	arg01, fp
21564     10 4E 85 F1 | 	sub	fp, #16
21568     4C FA BF FD | 	call	#_fatfs_cc_mktime
2156c     0C 4E 05 F1 | 	add	fp, #12
21570     A7 FA 61 FC | 	wrlong	result1, fp
21574                 | ' 
21574                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
21574                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
21574                 | '     date.tm_mday = (dosdate & 0x1f);
21574                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
21574                 | '     date.tm_min = (dostime >> 5) & 0x3f;
21574                 | '     date.tm_sec = (dostime & 0x1f) << 1;
21574                 | ' 
21574                 | '     t = mktime(&date);
21574                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21574                 | '     return t;
21574     0C 4E 85 F1 | 	sub	fp, #12
21578     A7 F0 03 F6 | 	mov	ptra, fp
2157c     B2 00 A0 FD | 	call	#popregs_
21580                 | _fatfs_cc_unixtime_0725_ret
21580     2D 00 64 FD | 	ret
21584                 | 
21584                 | _fatfs_cc__set_dos_error_0727
21584     09 01 02 F6 | 	mov	_var01, arg01
21588                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21588                 | '     switch (derr) {
21588     14 00 26 F3 | 	fle	_var01, #20
2158c     30 00 62 FD | 	jmprel	_var01
21590                 | LR__3730
21590     50 00 90 FD | 	jmp	#LR__3731
21594     84 00 90 FD | 	jmp	#LR__3745
21598     80 00 90 FD | 	jmp	#LR__3746
2159c     7C 00 90 FD | 	jmp	#LR__3747
215a0     48 00 90 FD | 	jmp	#LR__3732
215a4     44 00 90 FD | 	jmp	#LR__3733
215a8     40 00 90 FD | 	jmp	#LR__3734
215ac     44 00 90 FD | 	jmp	#LR__3735
215b0     48 00 90 FD | 	jmp	#LR__3737
215b4     54 00 90 FD | 	jmp	#LR__3740
215b8     38 00 90 FD | 	jmp	#LR__3736
215bc     4C 00 90 FD | 	jmp	#LR__3741
215c0     48 00 90 FD | 	jmp	#LR__3742
215c4     44 00 90 FD | 	jmp	#LR__3743
215c8     50 00 90 FD | 	jmp	#LR__3748
215cc     4C 00 90 FD | 	jmp	#LR__3748
215d0     48 00 90 FD | 	jmp	#LR__3748
215d4     2C 00 90 FD | 	jmp	#LR__3738
215d8     38 00 90 FD | 	jmp	#LR__3744
215dc     2C 00 90 FD | 	jmp	#LR__3739
215e0     38 00 90 FD | 	jmp	#LR__3748
215e4                 | LR__3731
215e4     00 02 06 F6 | 	mov	_var02, #0
215e8                 | '         r = 0;
215e8                 | '         break;
215e8     34 00 90 FD | 	jmp	#LR__3749
215ec                 | LR__3732
215ec                 | LR__3733
215ec                 | LR__3734
215ec     04 02 06 F6 | 	mov	_var02, #4
215f0                 | '         r =  4 ;
215f0                 | '         break;
215f0     2C 00 90 FD | 	jmp	#LR__3749
215f4                 | LR__3735
215f4                 | LR__3736
215f4     06 02 06 F6 | 	mov	_var02, #6
215f8                 | '         r =  6 ;
215f8                 | '         break;
215f8     24 00 90 FD | 	jmp	#LR__3749
215fc                 | LR__3737
215fc     09 02 06 F6 | 	mov	_var02, #9
21600                 | '         r =  9 ;
21600                 | '         break;
21600     1C 00 90 FD | 	jmp	#LR__3749
21604                 | LR__3738
21604     07 02 06 F6 | 	mov	_var02, #7
21608                 | '         r =  7 ;
21608                 | '         break;
21608     14 00 90 FD | 	jmp	#LR__3749
2160c                 | LR__3739
2160c                 | LR__3740
2160c                 | LR__3741
2160c                 | LR__3742
2160c                 | LR__3743
2160c     0A 02 06 F6 | 	mov	_var02, #10
21610                 | '         r =  10 ;
21610                 | '         break;
21610     0C 00 90 FD | 	jmp	#LR__3749
21614                 | LR__3744
21614     0B 02 06 F6 | 	mov	_var02, #11
21618                 | '         r =  11 ;
21618                 | '         break;
21618     04 00 90 FD | 	jmp	#LR__3749
2161c                 | LR__3745
2161c                 | LR__3746
2161c                 | LR__3747
2161c                 | LR__3748
2161c     0C 02 06 F6 | 	mov	_var02, #12
21620                 | '         r =  12 ;
21620                 | '         break;
21620                 | LR__3749
21620                 | '     }
21620                 | '     return _seterror(r);
21620     00 02 4E F2 | 	cmps	_var02, #0 wz
21624     20 E8 05 F1 | 	add	ptr___system__dat__, #32
21628     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2162c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
21630     01 FA 65 56 |  if_ne	neg	result1, #1
21634     00 FA 05 A6 |  if_e	mov	result1, #0
21638                 | _fatfs_cc__set_dos_error_0727_ret
21638     2D 00 64 FD | 	ret
2163c                 | 
2163c                 | _fatfs_cc_v_creat
2163c     04 4A 05 F6 | 	mov	COUNT_, #4
21640     A8 00 A0 FD | 	call	#pushregs_
21644     09 1F 02 F6 | 	mov	local01, arg01
21648     0A 21 02 F6 | 	mov	local02, arg02
2164c     03 00 00 FF 
21650     3C 12 06 F6 | 	mov	arg01, ##1596
21654                 | '     return _gc_alloc(size);
21654     10 14 06 F6 | 	mov	arg02, #16
21658     6C 5E BF FD | 	call	#__system___gc_doalloc
2165c     FD 22 0A F6 | 	mov	local03, result1 wz
21660                 | '       return _seterror( 7 );
21660     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21664     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
21668     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2166c     01 FA 65 A6 |  if_e	neg	result1, #1
21670     58 00 90 AD |  if_e	jmp	#LR__3751
21674     11 13 02 F6 | 	mov	arg01, local03
21678     00 14 06 F6 | 	mov	arg02, #0
2167c     03 00 00 FF 
21680     3C 16 06 F6 | 	mov	arg03, ##1596
21684     98 00 A0 FD | 	call	#\builtin_bytefill_
21688     02 00 00 FF 
2168c     14 22 06 F1 | 	add	local03, ##1044
21690     11 13 02 F6 | 	mov	arg01, local03
21694     02 00 00 FF 
21698     14 22 86 F1 | 	sub	local03, ##1044
2169c     10 15 02 F6 | 	mov	arg02, local02
216a0     07 16 06 F6 | 	mov	arg03, #7
216a4     B4 CC BF FD | 	call	#_fatfs_cc_f_open
216a8     FD 24 0A F6 | 	mov	local04, result1 wz
216ac     14 00 90 AD |  if_e	jmp	#LR__3750
216b0     11 13 02 F6 | 	mov	arg01, local03
216b4                 | '     return _gc_free(ptr);
216b4     1C 5F BF FD | 	call	#__system___gc_free
216b8                 | '     free(f);
216b8                 | '     return _set_dos_error(r);
216b8     12 13 02 F6 | 	mov	arg01, local04
216bc     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0727
216c0     08 00 90 FD | 	jmp	#LR__3751
216c4                 | LR__3750
216c4     0F 23 62 FC | 	wrlong	local03, local01
216c8                 | '   }
216c8                 | '   fil->vfsdata = f;
216c8                 | '   return 0;
216c8     00 FA 05 F6 | 	mov	result1, #0
216cc                 | LR__3751
216cc     A7 F0 03 F6 | 	mov	ptra, fp
216d0     B2 00 A0 FD | 	call	#popregs_
216d4                 | _fatfs_cc_v_creat_ret
216d4     2D 00 64 FD | 	ret
216d8                 | 
216d8                 | _fatfs_cc_v_close
216d8     02 4A 05 F6 | 	mov	COUNT_, #2
216dc     A8 00 A0 FD | 	call	#pushregs_
216e0     09 1F 02 FB | 	rdlong	local01, arg01
216e4     02 00 00 FF 
216e8     14 1E 06 F1 | 	add	local01, ##1044
216ec     0F 13 02 F6 | 	mov	arg01, local01
216f0     02 00 00 FF 
216f4     14 1E 86 F1 | 	sub	local01, ##1044
216f8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
216fc     FD 20 02 F6 | 	mov	local02, result1
21700     0F 13 02 F6 | 	mov	arg01, local01
21704                 | '     return _gc_free(ptr);
21704     CC 5E BF FD | 	call	#__system___gc_free
21708                 | '     FAT_FIL *f = fil->vfsdata;
21708                 | '     r=f_close(&f->fil);
21708                 | '     free(f);
21708                 | '     return _set_dos_error(r);
21708     10 13 02 F6 | 	mov	arg01, local02
2170c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21710     A7 F0 03 F6 | 	mov	ptra, fp
21714     B2 00 A0 FD | 	call	#popregs_
21718                 | _fatfs_cc_v_close_ret
21718     2D 00 64 FD | 	ret
2171c                 | 
2171c                 | _fatfs_cc_v_opendir
2171c     04 4A 05 F6 | 	mov	COUNT_, #4
21720     A8 00 A0 FD | 	call	#pushregs_
21724     09 1F 02 F6 | 	mov	local01, arg01
21728     0A 21 02 F6 | 	mov	local02, arg02
2172c     30 12 06 F6 | 	mov	arg01, #48
21730                 | '     return _gc_alloc(size);
21730     10 14 06 F6 | 	mov	arg02, #16
21734     90 5D BF FD | 	call	#__system___gc_doalloc
21738     FD 22 0A F6 | 	mov	local03, result1 wz
2173c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
2173c                 | '       return _seterror( 7 );
2173c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21740     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
21744     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21748     01 FA 65 A6 |  if_e	neg	result1, #1
2174c     34 00 90 AD |  if_e	jmp	#LR__3761
21750     10 15 02 F6 | 	mov	arg02, local02
21754     11 13 02 F6 | 	mov	arg01, local03
21758     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2175c     FD 24 0A F6 | 	mov	local04, result1 wz
21760     14 00 90 AD |  if_e	jmp	#LR__3760
21764     11 13 02 F6 | 	mov	arg01, local03
21768                 | '     return _gc_free(ptr);
21768     68 5E BF FD | 	call	#__system___gc_free
2176c                 | '         free(f);
2176c                 | '         return _set_dos_error(r);
2176c     12 13 02 F6 | 	mov	arg01, local04
21770     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21774     0C 00 90 FD | 	jmp	#LR__3761
21778                 | LR__3760
21778     04 1E 06 F1 | 	add	local01, #4
2177c     0F 23 62 FC | 	wrlong	local03, local01
21780                 | '     }
21780                 | '     dir->vfsdata = f;
21780                 | '     return 0;
21780     00 FA 05 F6 | 	mov	result1, #0
21784                 | LR__3761
21784     A7 F0 03 F6 | 	mov	ptra, fp
21788     B2 00 A0 FD | 	call	#popregs_
2178c                 | _fatfs_cc_v_opendir_ret
2178c     2D 00 64 FD | 	ret
21790                 | 
21790                 | _fatfs_cc_v_closedir
21790     02 4A 05 F6 | 	mov	COUNT_, #2
21794     A8 00 A0 FD | 	call	#pushregs_
21798     04 12 06 F1 | 	add	arg01, #4
2179c     09 1F 02 FB | 	rdlong	local01, arg01
217a0     0F 13 02 F6 | 	mov	arg01, local01
217a4     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
217a8     FD 20 02 F6 | 	mov	local02, result1
217ac     0F 13 02 F6 | 	mov	arg01, local01
217b0                 | '     return _gc_free(ptr);
217b0     20 5E BF FD | 	call	#__system___gc_free
217b4     00 20 0E F2 | 	cmp	local02, #0 wz
217b8     10 13 02 56 |  if_ne	mov	arg01, local02
217bc     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0727
217c0                 | '     return r;
217c0     10 FB 01 F6 | 	mov	result1, local02
217c4     A7 F0 03 F6 | 	mov	ptra, fp
217c8     B2 00 A0 FD | 	call	#popregs_
217cc                 | _fatfs_cc_v_closedir_ret
217cc     2D 00 64 FD | 	ret
217d0                 | 
217d0                 | _fatfs_cc_v_readdir
217d0     01 4A 05 F6 | 	mov	COUNT_, #1
217d4     A8 00 A0 FD | 	call	#pushregs_
217d8     2C F1 07 F1 | 	add	ptra, #300
217dc     04 4E 05 F1 | 	add	fp, #4
217e0     A7 12 62 FC | 	wrlong	arg01, fp
217e4     04 4E 05 F1 | 	add	fp, #4
217e8     A7 14 62 FC | 	wrlong	arg02, fp
217ec     04 4E 85 F1 | 	sub	fp, #4
217f0     A7 16 02 FB | 	rdlong	arg03, fp
217f4     04 16 06 F1 | 	add	arg03, #4
217f8     0B 13 02 FB | 	rdlong	arg01, arg03
217fc     08 4E 05 F1 | 	add	fp, #8
21800     A7 14 02 F6 | 	mov	arg02, fp
21804     0C 4E 85 F1 | 	sub	fp, #12
21808     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2180c     28 4F 05 F1 | 	add	fp, #296
21810     A7 FA 61 FC | 	wrlong	result1, fp
21814     28 4F 85 F1 | 	sub	fp, #296
21818     00 FA 0D F2 | 	cmp	result1, #0 wz
2181c     14 00 90 AD |  if_e	jmp	#LR__3770
21820                 | '         return _set_dos_error(r);
21820     28 4F 05 F1 | 	add	fp, #296
21824     A7 12 02 FB | 	rdlong	arg01, fp
21828     28 4F 85 F1 | 	sub	fp, #296
2182c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21830     C4 00 90 FD | 	jmp	#LR__3773
21834                 | LR__3770
21834     28 4E 05 F1 | 	add	fp, #40
21838     A7 16 CA FA | 	rdbyte	arg03, fp wz
2183c     28 4E 85 F1 | 	sub	fp, #40
21840                 | '         return -1;
21840     01 FA 65 A6 |  if_e	neg	result1, #1
21844     B0 00 90 AD |  if_e	jmp	#LR__3773
21848     08 4E 05 F1 | 	add	fp, #8
2184c     A7 12 02 FB | 	rdlong	arg01, fp
21850     20 4E 05 F1 | 	add	fp, #32
21854     A7 14 02 F6 | 	mov	arg02, fp
21858     28 4E 85 F1 | 	sub	fp, #40
2185c     3F 16 06 F6 | 	mov	arg03, #63
21860     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
21864     08 4E 05 F1 | 	add	fp, #8
21868     A7 16 02 FB | 	rdlong	arg03, fp
2186c     3F 16 06 F1 | 	add	arg03, #63
21870     0B 01 48 FC | 	wrbyte	#0, arg03
21874     0C 4E 05 F1 | 	add	fp, #12
21878     A7 16 C2 FA | 	rdbyte	arg03, fp
2187c     14 4E 85 F1 | 	sub	fp, #20
21880     10 16 CE F7 | 	test	arg03, #16 wz
21884     18 00 90 AD |  if_e	jmp	#LR__3771
21888     08 4E 05 F1 | 	add	fp, #8
2188c     A7 16 02 FB | 	rdlong	arg03, fp
21890     08 4E 85 F1 | 	sub	fp, #8
21894     50 16 06 F1 | 	add	arg03, #80
21898     0B 03 48 FC | 	wrbyte	#1, arg03
2189c     14 00 90 FD | 	jmp	#LR__3772
218a0                 | LR__3771
218a0     08 4E 05 F1 | 	add	fp, #8
218a4     A7 16 02 FB | 	rdlong	arg03, fp
218a8     08 4E 85 F1 | 	sub	fp, #8
218ac     50 16 06 F1 | 	add	arg03, #80
218b0     0B 01 48 FC | 	wrbyte	#0, arg03
218b4                 | LR__3772
218b4     08 4E 05 F1 | 	add	fp, #8
218b8     A7 16 02 FB | 	rdlong	arg03, fp
218bc     04 4E 05 F1 | 	add	fp, #4
218c0     A7 14 02 FB | 	rdlong	arg02, fp
218c4     48 16 06 F1 | 	add	arg03, #72
218c8     0B 15 62 FC | 	wrlong	arg02, arg03
218cc     04 4E 85 F1 | 	sub	fp, #4
218d0     A7 1E 02 FB | 	rdlong	local01, fp
218d4     08 4E 05 F1 | 	add	fp, #8
218d8     A7 12 E2 FA | 	rdword	arg01, fp
218dc     02 4E 05 F1 | 	add	fp, #2
218e0     A7 14 E2 FA | 	rdword	arg02, fp
218e4     12 4E 85 F1 | 	sub	fp, #18
218e8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0725
218ec     4C 1E 06 F1 | 	add	local01, #76
218f0     0F FB 61 FC | 	wrlong	result1, local01
218f4                 | '         ent->d_type =  (0) ;
218f4                 | '     }
218f4                 | '     ent->d_size = finfo.fsize;
218f4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
218f4                 | '     return 0;
218f4     00 FA 05 F6 | 	mov	result1, #0
218f8                 | LR__3773
218f8     A7 F0 03 F6 | 	mov	ptra, fp
218fc     B2 00 A0 FD | 	call	#popregs_
21900                 | _fatfs_cc_v_readdir_ret
21900     2D 00 64 FD | 	ret
21904                 | 
21904                 | _fatfs_cc_v_stat
21904     03 4A 05 F6 | 	mov	COUNT_, #3
21908     A8 00 A0 FD | 	call	#pushregs_
2190c     30 F1 07 F1 | 	add	ptra, #304
21910     04 4E 05 F1 | 	add	fp, #4
21914     A7 12 62 FC | 	wrlong	arg01, fp
21918     04 4E 05 F1 | 	add	fp, #4
2191c     A7 14 62 FC | 	wrlong	arg02, fp
21920     08 4E 85 F1 | 	sub	fp, #8
21924     0A 13 02 F6 | 	mov	arg01, arg02
21928     00 14 06 F6 | 	mov	arg02, #0
2192c     30 16 06 F6 | 	mov	arg03, #48
21930     98 00 A0 FD | 	call	#\builtin_bytefill_
21934     04 4E 05 F1 | 	add	fp, #4
21938     A7 FA 01 FB | 	rdlong	result1, fp
2193c     04 4E 85 F1 | 	sub	fp, #4
21940     FD FA C9 FA | 	rdbyte	result1, result1 wz
21944     2C 00 90 AD |  if_e	jmp	#LR__3780
21948     04 4E 05 F1 | 	add	fp, #4
2194c     A7 FA 01 FB | 	rdlong	result1, fp
21950     04 4E 85 F1 | 	sub	fp, #4
21954     FD FA C1 FA | 	rdbyte	result1, result1
21958     2E FA 0D F2 | 	cmp	result1, #46 wz
2195c     04 4E 05 A1 |  if_e	add	fp, #4
21960     A7 1E 02 AB |  if_e	rdlong	local01, fp
21964     04 4E 85 A1 |  if_e	sub	fp, #4
21968     01 1E 06 A1 |  if_e	add	local01, #1
2196c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
21970     18 00 90 5D |  if_ne	jmp	#LR__3781
21974                 | LR__3780
21974     18 4E 05 F1 | 	add	fp, #24
21978     A7 20 48 FC | 	wrbyte	#16, fp
2197c     0C 4E 85 F1 | 	sub	fp, #12
21980     A7 00 68 FC | 	wrlong	#0, fp
21984     0C 4E 85 F1 | 	sub	fp, #12
21988     24 00 90 FD | 	jmp	#LR__3782
2198c                 | LR__3781
2198c     04 4E 05 F1 | 	add	fp, #4
21990     A7 12 02 FB | 	rdlong	arg01, fp
21994     0C 4E 05 F1 | 	add	fp, #12
21998     A7 14 02 F6 | 	mov	arg02, fp
2199c     10 4E 85 F1 | 	sub	fp, #16
219a0     AC EB BF FD | 	call	#_fatfs_cc_f_stat
219a4     0C 4E 05 F1 | 	add	fp, #12
219a8     A7 FA 61 FC | 	wrlong	result1, fp
219ac     0C 4E 85 F1 | 	sub	fp, #12
219b0                 | LR__3782
219b0     0C 4E 05 F1 | 	add	fp, #12
219b4     A7 20 0A FB | 	rdlong	local02, fp wz
219b8     0C 4E 85 F1 | 	sub	fp, #12
219bc     14 00 90 AD |  if_e	jmp	#LR__3783
219c0                 | '         return _set_dos_error(r);
219c0     0C 4E 05 F1 | 	add	fp, #12
219c4     A7 12 02 FB | 	rdlong	arg01, fp
219c8     0C 4E 85 F1 | 	sub	fp, #12
219cc     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0727
219d0     14 01 90 FD | 	jmp	#LR__3784
219d4                 | LR__3783
219d4     2C 4F 05 F1 | 	add	fp, #300
219d8     A7 48 6A FC | 	wrlong	#292, fp
219dc     14 4F 85 F1 | 	sub	fp, #276
219e0     A7 22 C2 FA | 	rdbyte	local03, fp
219e4     18 4E 85 F1 | 	sub	fp, #24
219e8     01 22 CE F7 | 	test	local03, #1 wz
219ec     2C 4F 05 51 |  if_ne	add	fp, #300
219f0     A7 22 02 5B |  if_ne	rdlong	local03, fp
219f4     92 22 46 55 |  if_ne	or	local03, #146
219f8     A7 22 62 5C |  if_ne	wrlong	local03, fp
219fc     2C 4F 85 51 |  if_ne	sub	fp, #300
21a00     18 4E 05 F1 | 	add	fp, #24
21a04     A7 22 C2 FA | 	rdbyte	local03, fp
21a08     18 4E 85 F1 | 	sub	fp, #24
21a0c     10 22 CE F7 | 	test	local03, #16 wz
21a10     2C 4F 05 51 |  if_ne	add	fp, #300
21a14     A7 22 02 5B |  if_ne	rdlong	local03, fp
21a18     08 00 00 5F 
21a1c     49 22 46 55 |  if_ne	or	local03, ##4169
21a20     A7 22 62 5C |  if_ne	wrlong	local03, fp
21a24     2C 4F 85 51 |  if_ne	sub	fp, #300
21a28     08 4E 05 F1 | 	add	fp, #8
21a2c     A7 22 02 FB | 	rdlong	local03, fp
21a30     24 4F 05 F1 | 	add	fp, #292
21a34     A7 20 02 FB | 	rdlong	local02, fp
21a38     08 22 06 F1 | 	add	local03, #8
21a3c     11 21 62 FC | 	wrlong	local02, local03
21a40     24 4F 85 F1 | 	sub	fp, #292
21a44     A7 22 02 FB | 	rdlong	local03, fp
21a48     0C 22 06 F1 | 	add	local03, #12
21a4c     11 03 68 FC | 	wrlong	#1, local03
21a50     A7 22 02 FB | 	rdlong	local03, fp
21a54     08 4E 05 F1 | 	add	fp, #8
21a58     A7 20 02 FB | 	rdlong	local02, fp
21a5c     18 22 06 F1 | 	add	local03, #24
21a60     11 21 62 FC | 	wrlong	local02, local03
21a64     08 4E 85 F1 | 	sub	fp, #8
21a68     A7 22 02 FB | 	rdlong	local03, fp
21a6c     1C 22 06 F1 | 	add	local03, #28
21a70     01 00 80 FF 
21a74     11 01 68 FC | 	wrlong	##512, local03
21a78     A7 20 02 FB | 	rdlong	local02, fp
21a7c     10 23 02 F6 | 	mov	local03, local02
21a80     18 20 06 F1 | 	add	local02, #24
21a84     10 21 02 FB | 	rdlong	local02, local02
21a88     FF 21 06 F1 | 	add	local02, #511
21a8c     10 21 52 F6 | 	abs	local02, local02 wc
21a90     09 20 46 F0 | 	shr	local02, #9
21a94     10 21 82 F6 | 	negc	local02, local02
21a98     20 22 06 F1 | 	add	local03, #32
21a9c     11 21 62 FC | 	wrlong	local02, local03
21aa0     A7 20 02 FB | 	rdlong	local02, fp
21aa4     10 23 02 F6 | 	mov	local03, local02
21aa8     10 1F 02 F6 | 	mov	local01, local02
21aac     0C 4E 05 F1 | 	add	fp, #12
21ab0     A7 12 E2 FA | 	rdword	arg01, fp
21ab4     02 4E 05 F1 | 	add	fp, #2
21ab8     A7 14 E2 FA | 	rdword	arg02, fp
21abc     16 4E 85 F1 | 	sub	fp, #22
21ac0     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0725
21ac4     2C 1E 06 F1 | 	add	local01, #44
21ac8     0F FB 61 FC | 	wrlong	result1, local01
21acc     28 20 06 F1 | 	add	local02, #40
21ad0     10 FB 61 FC | 	wrlong	result1, local02
21ad4     24 22 06 F1 | 	add	local03, #36
21ad8     11 FB 61 FC | 	wrlong	result1, local03
21adc                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
21adc                 | '     }
21adc                 | '     buf->st_mode = mode;
21adc                 | '     buf->st_nlink = 1;
21adc                 | '     buf->st_size = finfo.fsize;
21adc                 | '     buf->st_blksize = 512;
21adc                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
21adc                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
21adc                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21adc                 | '     return r;
21adc     0C 4E 05 F1 | 	add	fp, #12
21ae0     A7 FA 01 FB | 	rdlong	result1, fp
21ae4     0C 4E 85 F1 | 	sub	fp, #12
21ae8                 | LR__3784
21ae8     A7 F0 03 F6 | 	mov	ptra, fp
21aec     B2 00 A0 FD | 	call	#popregs_
21af0                 | _fatfs_cc_v_stat_ret
21af0     2D 00 64 FD | 	ret
21af4                 | 
21af4                 | _fatfs_cc_v_read
21af4     00 4A 05 F6 | 	mov	COUNT_, #0
21af8     A8 00 A0 FD | 	call	#pushregs_
21afc     1C F0 07 F1 | 	add	ptra, #28
21b00     04 4E 05 F1 | 	add	fp, #4
21b04     A7 12 62 FC | 	wrlong	arg01, fp
21b08     04 4E 05 F1 | 	add	fp, #4
21b0c     A7 14 62 FC | 	wrlong	arg02, fp
21b10     04 4E 05 F1 | 	add	fp, #4
21b14     A7 16 62 FC | 	wrlong	arg03, fp
21b18     08 4E 85 F1 | 	sub	fp, #8
21b1c     A7 12 02 FB | 	rdlong	arg01, fp
21b20     09 13 0A FB | 	rdlong	arg01, arg01 wz
21b24     0C 4E 05 F1 | 	add	fp, #12
21b28     A7 12 62 FC | 	wrlong	arg01, fp
21b2c     10 4E 85 F1 | 	sub	fp, #16
21b30                 | '         return _seterror( 5 );
21b30     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21b34     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21b38     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21b3c     01 FA 65 A6 |  if_e	neg	result1, #1
21b40     B8 00 90 AD |  if_e	jmp	#LR__3792
21b44     10 4E 05 F1 | 	add	fp, #16
21b48     A7 12 02 FB | 	rdlong	arg01, fp
21b4c     02 00 00 FF 
21b50     14 12 06 F1 | 	add	arg01, ##1044
21b54     08 4E 85 F1 | 	sub	fp, #8
21b58     A7 14 02 FB | 	rdlong	arg02, fp
21b5c     04 4E 05 F1 | 	add	fp, #4
21b60     A7 16 02 FB | 	rdlong	arg03, fp
21b64     0C 4E 05 F1 | 	add	fp, #12
21b68     A7 18 02 F6 | 	mov	arg04, fp
21b6c     18 4E 85 F1 | 	sub	fp, #24
21b70     C4 CE BF FD | 	call	#_fatfs_cc_f_read
21b74     14 4E 05 F1 | 	add	fp, #20
21b78     A7 FA 61 FC | 	wrlong	result1, fp
21b7c     14 4E 85 F1 | 	sub	fp, #20
21b80     00 FA 0D F2 | 	cmp	result1, #0 wz
21b84     34 00 90 AD |  if_e	jmp	#LR__3790
21b88     04 4E 05 F1 | 	add	fp, #4
21b8c     A7 18 02 FB | 	rdlong	arg04, fp
21b90     0C 17 02 F6 | 	mov	arg03, arg04
21b94     08 18 06 F1 | 	add	arg04, #8
21b98     0C 19 02 FB | 	rdlong	arg04, arg04
21b9c     20 18 46 F5 | 	or	arg04, #32
21ba0     08 16 06 F1 | 	add	arg03, #8
21ba4     0B 19 62 FC | 	wrlong	arg04, arg03
21ba8                 | '         fil->state |=  (0x20) ;
21ba8                 | '         return _set_dos_error(r);
21ba8     10 4E 05 F1 | 	add	fp, #16
21bac     A7 12 02 FB | 	rdlong	arg01, fp
21bb0     14 4E 85 F1 | 	sub	fp, #20
21bb4     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21bb8     40 00 90 FD | 	jmp	#LR__3792
21bbc                 | LR__3790
21bbc     18 4E 05 F1 | 	add	fp, #24
21bc0     A7 FA 09 FB | 	rdlong	result1, fp wz
21bc4     18 4E 85 F1 | 	sub	fp, #24
21bc8     24 00 90 5D |  if_ne	jmp	#LR__3791
21bcc     04 4E 05 F1 | 	add	fp, #4
21bd0     A7 FA 01 FB | 	rdlong	result1, fp
21bd4     FD 18 02 F6 | 	mov	arg04, result1
21bd8     04 4E 85 F1 | 	sub	fp, #4
21bdc     08 FA 05 F1 | 	add	result1, #8
21be0     FD FA 01 FB | 	rdlong	result1, result1
21be4     10 FA 45 F5 | 	or	result1, #16
21be8     08 18 06 F1 | 	add	arg04, #8
21bec     0C FB 61 FC | 	wrlong	result1, arg04
21bf0                 | LR__3791
21bf0                 | '         fil->state |=  (0x10) ;
21bf0                 | '     }
21bf0                 | '     return x;
21bf0     18 4E 05 F1 | 	add	fp, #24
21bf4     A7 FA 01 FB | 	rdlong	result1, fp
21bf8     18 4E 85 F1 | 	sub	fp, #24
21bfc                 | LR__3792
21bfc     A7 F0 03 F6 | 	mov	ptra, fp
21c00     B2 00 A0 FD | 	call	#popregs_
21c04                 | _fatfs_cc_v_read_ret
21c04     2D 00 64 FD | 	ret
21c08                 | 
21c08                 | _fatfs_cc_v_write
21c08     00 4A 05 F6 | 	mov	COUNT_, #0
21c0c     A8 00 A0 FD | 	call	#pushregs_
21c10     1C F0 07 F1 | 	add	ptra, #28
21c14     04 4E 05 F1 | 	add	fp, #4
21c18     A7 12 62 FC | 	wrlong	arg01, fp
21c1c     04 4E 05 F1 | 	add	fp, #4
21c20     A7 14 62 FC | 	wrlong	arg02, fp
21c24     04 4E 05 F1 | 	add	fp, #4
21c28     A7 16 62 FC | 	wrlong	arg03, fp
21c2c     08 4E 85 F1 | 	sub	fp, #8
21c30     A7 12 02 FB | 	rdlong	arg01, fp
21c34     09 13 0A FB | 	rdlong	arg01, arg01 wz
21c38     0C 4E 05 F1 | 	add	fp, #12
21c3c     A7 12 62 FC | 	wrlong	arg01, fp
21c40     10 4E 85 F1 | 	sub	fp, #16
21c44                 | '         return _seterror( 5 );
21c44     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21c48     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21c4c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21c50     01 FA 65 A6 |  if_e	neg	result1, #1
21c54     84 00 90 AD |  if_e	jmp	#LR__3801
21c58     10 4E 05 F1 | 	add	fp, #16
21c5c     A7 12 02 FB | 	rdlong	arg01, fp
21c60     02 00 00 FF 
21c64     14 12 06 F1 | 	add	arg01, ##1044
21c68     08 4E 85 F1 | 	sub	fp, #8
21c6c     A7 14 02 FB | 	rdlong	arg02, fp
21c70     04 4E 05 F1 | 	add	fp, #4
21c74     A7 16 02 FB | 	rdlong	arg03, fp
21c78     0C 4E 05 F1 | 	add	fp, #12
21c7c     A7 18 02 F6 | 	mov	arg04, fp
21c80     18 4E 85 F1 | 	sub	fp, #24
21c84     4C D4 BF FD | 	call	#_fatfs_cc_f_write
21c88     14 4E 05 F1 | 	add	fp, #20
21c8c     A7 FA 61 FC | 	wrlong	result1, fp
21c90     14 4E 85 F1 | 	sub	fp, #20
21c94     00 FA 0D F2 | 	cmp	result1, #0 wz
21c98     34 00 90 AD |  if_e	jmp	#LR__3800
21c9c     04 4E 05 F1 | 	add	fp, #4
21ca0     A7 18 02 FB | 	rdlong	arg04, fp
21ca4     0C 17 02 F6 | 	mov	arg03, arg04
21ca8     08 18 06 F1 | 	add	arg04, #8
21cac     0C 19 02 FB | 	rdlong	arg04, arg04
21cb0     20 18 46 F5 | 	or	arg04, #32
21cb4     08 16 06 F1 | 	add	arg03, #8
21cb8     0B 19 62 FC | 	wrlong	arg04, arg03
21cbc                 | '         fil->state |=  (0x20) ;
21cbc                 | '         return _set_dos_error(r);
21cbc     10 4E 05 F1 | 	add	fp, #16
21cc0     A7 12 02 FB | 	rdlong	arg01, fp
21cc4     14 4E 85 F1 | 	sub	fp, #20
21cc8     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21ccc     0C 00 90 FD | 	jmp	#LR__3801
21cd0                 | LR__3800
21cd0                 | '     }
21cd0                 | '     return x;
21cd0     18 4E 05 F1 | 	add	fp, #24
21cd4     A7 FA 01 FB | 	rdlong	result1, fp
21cd8     18 4E 85 F1 | 	sub	fp, #24
21cdc                 | LR__3801
21cdc     A7 F0 03 F6 | 	mov	ptra, fp
21ce0     B2 00 A0 FD | 	call	#popregs_
21ce4                 | _fatfs_cc_v_write_ret
21ce4     2D 00 64 FD | 	ret
21ce8                 | 
21ce8                 | _fatfs_cc_v_lseek
21ce8     04 4A 05 F6 | 	mov	COUNT_, #4
21cec     A8 00 A0 FD | 	call	#pushregs_
21cf0     0A 1F 02 F6 | 	mov	local01, arg02
21cf4     0B 21 02 F6 | 	mov	local02, arg03
21cf8     09 23 02 FB | 	rdlong	local03, arg01
21cfc     02 00 00 FF 
21d00     14 22 0E F1 | 	add	local03, ##1044 wz
21d04                 | '         return _seterror( 5 );
21d04     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21d08     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21d0c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21d10     01 FA 65 A6 |  if_e	neg	result1, #1
21d14     4C 00 90 AD |  if_e	jmp	#LR__3812
21d18     00 20 0E F2 | 	cmp	local02, #0 wz
21d1c     24 00 90 AD |  if_e	jmp	#LR__3810
21d20     01 20 0E F2 | 	cmp	local02, #1 wz
21d24     14 22 06 A1 |  if_e	add	local03, #20
21d28     11 25 02 AB |  if_e	rdlong	local04, local03
21d2c     14 22 86 A1 |  if_e	sub	local03, #20
21d30     12 1F 02 A1 |  if_e	add	local01, local04
21d34     0C 22 06 51 |  if_ne	add	local03, #12
21d38     11 25 02 5B |  if_ne	rdlong	local04, local03
21d3c     0C 22 86 51 |  if_ne	sub	local03, #12
21d40     12 1F 02 51 |  if_ne	add	local01, local04
21d44                 | LR__3810
21d44     0F 15 02 F6 | 	mov	arg02, local01
21d48     11 13 02 F6 | 	mov	arg01, local03
21d4c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
21d50     FD 12 0A F6 | 	mov	arg01, result1 wz
21d54     08 00 90 AD |  if_e	jmp	#LR__3811
21d58                 | '         return _set_dos_error(result);
21d58     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21d5c     04 00 90 FD | 	jmp	#LR__3812
21d60                 | LR__3811
21d60                 | '     }
21d60                 | '     return offset;
21d60     0F FB 01 F6 | 	mov	result1, local01
21d64                 | LR__3812
21d64     A7 F0 03 F6 | 	mov	ptra, fp
21d68     B2 00 A0 FD | 	call	#popregs_
21d6c                 | _fatfs_cc_v_lseek_ret
21d6c     2D 00 64 FD | 	ret
21d70                 | 
21d70                 | _fatfs_cc_v_ioctl
21d70                 | ' {
21d70                 | '     return _seterror( 10 );
21d70     20 E8 05 F1 | 	add	ptr___system__dat__, #32
21d74     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
21d78     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
21d7c     01 FA 65 F6 | 	neg	result1, #1
21d80                 | _fatfs_cc_v_ioctl_ret
21d80     2D 00 64 FD | 	ret
21d84                 | 
21d84                 | _fatfs_cc_v_mkdir
21d84     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
21d88     FD 12 02 F6 | 	mov	arg01, result1
21d8c                 | ' 
21d8c                 | '     r = f_mkdir(name);
21d8c                 | '     return _set_dos_error(r);
21d8c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21d90                 | _fatfs_cc_v_mkdir_ret
21d90     2D 00 64 FD | 	ret
21d94                 | 
21d94                 | _fatfs_cc_v_remove
21d94     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
21d98     FD 12 02 F6 | 	mov	arg01, result1
21d9c                 | ' 
21d9c                 | '     r = f_unlink(name);
21d9c                 | '     return _set_dos_error(r);
21d9c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21da0                 | _fatfs_cc_v_remove_ret
21da0     2D 00 64 FD | 	ret
21da4                 | 
21da4                 | _fatfs_cc_v_rmdir
21da4     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
21da8     FD 12 02 F6 | 	mov	arg01, result1
21dac                 | ' 
21dac                 | '     r = f_unlink(name);
21dac                 | '     return _set_dos_error(r);
21dac     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21db0                 | _fatfs_cc_v_rmdir_ret
21db0     2D 00 64 FD | 	ret
21db4                 | 
21db4                 | _fatfs_cc_v_rename
21db4     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
21db8     FD 12 02 F6 | 	mov	arg01, result1
21dbc                 | '     return _set_dos_error(r);
21dbc     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21dc0                 | _fatfs_cc_v_rename_ret
21dc0     2D 00 64 FD | 	ret
21dc4                 | 
21dc4                 | _fatfs_cc_v_open
21dc4     07 4A 05 F6 | 	mov	COUNT_, #7
21dc8     A8 00 A0 FD | 	call	#pushregs_
21dcc     09 1F 02 F6 | 	mov	local01, arg01
21dd0     0A 21 02 F6 | 	mov	local02, arg02
21dd4     0B 23 02 F6 | 	mov	local03, arg03
21dd8     03 00 00 FF 
21ddc     3C 12 06 F6 | 	mov	arg01, ##1596
21de0                 | '     return _gc_alloc(size);
21de0     10 14 06 F6 | 	mov	arg02, #16
21de4     E0 56 BF FD | 	call	#__system___gc_doalloc
21de8     FD 24 0A F6 | 	mov	local04, result1 wz
21dec                 | '       return _seterror( 7 );
21dec     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21df0     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
21df4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21df8     01 FA 65 A6 |  if_e	neg	result1, #1
21dfc     98 00 90 AD |  if_e	jmp	#LR__3826
21e00     12 13 02 F6 | 	mov	arg01, local04
21e04     00 14 06 F6 | 	mov	arg02, #0
21e08     03 00 00 FF 
21e0c     3C 16 06 F6 | 	mov	arg03, ##1596
21e10     98 00 A0 FD | 	call	#\builtin_bytefill_
21e14                 | '   switch (flags & 3) {
21e14     11 27 02 F6 | 	mov	local05, local03
21e18     03 26 0E F5 | 	and	local05, #3 wz
21e1c     0C 00 90 AD |  if_e	jmp	#LR__3820
21e20     01 26 0E F2 | 	cmp	local05, #1 wz
21e24     0C 00 90 AD |  if_e	jmp	#LR__3821
21e28     10 00 90 FD | 	jmp	#LR__3822
21e2c                 | LR__3820
21e2c     01 28 06 F6 | 	mov	local06, #1
21e30                 | '       fs_flags =  0x01 ;
21e30                 | '       break;
21e30     0C 00 90 FD | 	jmp	#LR__3823
21e34                 | LR__3821
21e34     02 28 06 F6 | 	mov	local06, #2
21e38                 | '       fs_flags =  0x02 ;
21e38                 | '       break;
21e38     04 00 90 FD | 	jmp	#LR__3823
21e3c                 | LR__3822
21e3c     03 28 06 F6 | 	mov	local06, #3
21e40                 | '       fs_flags =  0x01  |  0x02 ;
21e40                 | '       break;
21e40                 | LR__3823
21e40     08 22 CE F7 | 	test	local03, #8 wz
21e44     18 28 46 55 |  if_ne	or	local06, #24
21e48     08 00 90 5D |  if_ne	jmp	#LR__3824
21e4c     20 22 CE F7 | 	test	local03, #32 wz
21e50     30 28 46 55 |  if_ne	or	local06, #48
21e54                 | LR__3824
21e54     02 00 00 FF 
21e58     14 24 06 F1 | 	add	local04, ##1044
21e5c     12 13 02 F6 | 	mov	arg01, local04
21e60     02 00 00 FF 
21e64     14 24 86 F1 | 	sub	local04, ##1044
21e68     10 15 02 F6 | 	mov	arg02, local02
21e6c     14 17 02 F6 | 	mov	arg03, local06
21e70     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
21e74     FD 2A 0A F6 | 	mov	local07, result1 wz
21e78     14 00 90 AD |  if_e	jmp	#LR__3825
21e7c     12 13 02 F6 | 	mov	arg01, local04
21e80                 | '     return _gc_free(ptr);
21e80     50 57 BF FD | 	call	#__system___gc_free
21e84                 | '     free(f);
21e84                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21e84                 | '     return _set_dos_error(r);
21e84     15 13 02 F6 | 	mov	arg01, local07
21e88     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21e8c     08 00 90 FD | 	jmp	#LR__3826
21e90                 | LR__3825
21e90     0F 25 62 FC | 	wrlong	local04, local01
21e94                 | '   }
21e94                 | '   fil->vfsdata = f;
21e94                 | '   return 0;
21e94     00 FA 05 F6 | 	mov	result1, #0
21e98                 | LR__3826
21e98     A7 F0 03 F6 | 	mov	ptra, fp
21e9c     B2 00 A0 FD | 	call	#popregs_
21ea0                 | _fatfs_cc_v_open_ret
21ea0     2D 00 64 FD | 	ret
21ea4                 | 
21ea4                 | _fatfs_cc_v_flush
21ea4     09 13 02 FB | 	rdlong	arg01, arg01
21ea8     02 00 00 FF 
21eac     14 12 0E F1 | 	add	arg01, ##1044 wz
21eb0                 | '         return _seterror( 5 );
21eb0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
21eb4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21eb8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
21ebc     01 FA 65 A6 |  if_e	neg	result1, #1
21ec0     0C 00 90 AD |  if_e	jmp	#LR__3830
21ec4     00 DA BF FD | 	call	#_fatfs_cc_f_sync
21ec8     FD 12 02 F6 | 	mov	arg01, result1
21ecc                 | '     }
21ecc                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21ecc                 | '     result = f_sync(f);
21ecc                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21ecc                 | '     return _set_dos_error(result);
21ecc     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0727
21ed0                 | LR__3830
21ed0                 | _fatfs_cc_v_flush_ret
21ed0     2D 00 64 FD | 	ret
21ed4                 | 
21ed4                 | _fatfs_cc_v_init
21ed4                 | ' {
21ed4                 | '     return 0;
21ed4     00 FA 05 F6 | 	mov	result1, #0
21ed8                 | _fatfs_cc_v_init_ret
21ed8     2D 00 64 FD | 	ret
21edc                 | 
21edc                 | _fatfs_cc_v_deinit
21edc     17 01 00 FF 
21ee0     4C 14 06 F6 | 	mov	arg02, ##@LR__4026
21ee4     00 12 06 F6 | 	mov	arg01, #0
21ee8     00 16 06 F6 | 	mov	arg03, #0
21eec     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
21ef0     01 00 00 FF 
21ef4     08 E4 05 F1 | 	add	objptr, ##520
21ef8     F2 12 02 FB | 	rdlong	arg01, objptr
21efc     04 E4 05 F1 | 	add	objptr, #4
21f00     F2 14 02 FB | 	rdlong	arg02, objptr
21f04     01 00 00 FF 
21f08     0C E4 85 F1 | 	sub	objptr, ##524
21f0c     E0 41 BF FD | 	call	#__system___freepins
21f10                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
21f10                 | '     _freepins(f_pinmask);
21f10                 | '     return 0;
21f10     00 FA 05 F6 | 	mov	result1, #0
21f14                 | _fatfs_cc_v_deinit_ret
21f14     2D 00 64 FD | 	ret
21f18                 | 
21f18                 | _fatfs_cc_get_vfs
21f18     01 4A 05 F6 | 	mov	COUNT_, #1
21f1c     A8 00 A0 FD | 	call	#pushregs_
21f20     09 1F 02 F6 | 	mov	local01, arg01
21f24     50 12 06 F6 | 	mov	arg01, #80
21f28     6C 55 BF FD | 	call	#__system___gc_alloc_managed
21f2c     FD 12 02 F6 | 	mov	arg01, result1
21f30     F2 FA 01 F6 | 	mov	result1, objptr
21f34     00 C0 02 FF 
21f38     00 FA 45 F5 | 	or	result1, ##92274688
21f3c     09 FB 61 FC | 	wrlong	result1, arg01
21f40     F2 FA 01 F6 | 	mov	result1, objptr
21f44     00 C8 02 FF 
21f48     00 FA 45 F5 | 	or	result1, ##93323264
21f4c     04 12 06 F1 | 	add	arg01, #4
21f50     09 FB 61 FC | 	wrlong	result1, arg01
21f54     F2 FA 01 F6 | 	mov	result1, objptr
21f58     00 D0 02 FF 
21f5c     00 FA 45 F5 | 	or	result1, ##94371840
21f60     04 12 06 F1 | 	add	arg01, #4
21f64     09 FB 61 FC | 	wrlong	result1, arg01
21f68     F2 FA 01 F6 | 	mov	result1, objptr
21f6c     00 D8 02 FF 
21f70     00 FA 45 F5 | 	or	result1, ##95420416
21f74     04 12 06 F1 | 	add	arg01, #4
21f78     09 FB 61 FC | 	wrlong	result1, arg01
21f7c     F2 FA 01 F6 | 	mov	result1, objptr
21f80     00 E0 02 FF 
21f84     00 FA 45 F5 | 	or	result1, ##96468992
21f88     04 12 06 F1 | 	add	arg01, #4
21f8c     09 FB 61 FC | 	wrlong	result1, arg01
21f90     04 12 06 F1 | 	add	arg01, #4
21f94     09 01 68 FC | 	wrlong	#0, arg01
21f98     04 12 06 F1 | 	add	arg01, #4
21f9c     09 1F 62 FC | 	wrlong	local01, arg01
21fa0     04 12 06 F1 | 	add	arg01, #4
21fa4     09 01 68 FC | 	wrlong	#0, arg01
21fa8     F2 FA 01 F6 | 	mov	result1, objptr
21fac     00 E8 02 FF 
21fb0     00 FA 45 F5 | 	or	result1, ##97517568
21fb4     04 12 06 F1 | 	add	arg01, #4
21fb8     09 FB 61 FC | 	wrlong	result1, arg01
21fbc     F2 FA 01 F6 | 	mov	result1, objptr
21fc0     00 F0 02 FF 
21fc4     00 FA 45 F5 | 	or	result1, ##98566144
21fc8     04 12 06 F1 | 	add	arg01, #4
21fcc     09 FB 61 FC | 	wrlong	result1, arg01
21fd0     F2 FA 01 F6 | 	mov	result1, objptr
21fd4     00 F8 02 FF 
21fd8     00 FA 45 F5 | 	or	result1, ##99614720
21fdc     04 12 06 F1 | 	add	arg01, #4
21fe0     09 FB 61 FC | 	wrlong	result1, arg01
21fe4     F2 FA 01 F6 | 	mov	result1, objptr
21fe8     39 FA 25 F4 | 	bith	result1, #57
21fec     04 12 06 F1 | 	add	arg01, #4
21ff0     09 FB 61 FC | 	wrlong	result1, arg01
21ff4     F2 FA 01 F6 | 	mov	result1, objptr
21ff8     00 08 03 FF 
21ffc     00 FA 45 F5 | 	or	result1, ##101711872
22000     04 12 06 F1 | 	add	arg01, #4
22004     09 FB 61 FC | 	wrlong	result1, arg01
22008     F2 FA 01 F6 | 	mov	result1, objptr
2200c     00 10 03 FF 
22010     00 FA 45 F5 | 	or	result1, ##102760448
22014     04 12 06 F1 | 	add	arg01, #4
22018     09 FB 61 FC | 	wrlong	result1, arg01
2201c     F2 FA 01 F6 | 	mov	result1, objptr
22020     00 18 03 FF 
22024     00 FA 45 F5 | 	or	result1, ##103809024
22028     04 12 06 F1 | 	add	arg01, #4
2202c     09 FB 61 FC | 	wrlong	result1, arg01
22030     F2 FA 01 F6 | 	mov	result1, objptr
22034     00 20 03 FF 
22038     00 FA 45 F5 | 	or	result1, ##104857600
2203c     04 12 06 F1 | 	add	arg01, #4
22040     09 FB 61 FC | 	wrlong	result1, arg01
22044     F2 FA 01 F6 | 	mov	result1, objptr
22048     00 28 03 FF 
2204c     00 FA 45 F5 | 	or	result1, ##105906176
22050     04 12 06 F1 | 	add	arg01, #4
22054     09 FB 61 FC | 	wrlong	result1, arg01
22058     F2 FA 01 F6 | 	mov	result1, objptr
2205c     00 30 03 FF 
22060     00 FA 45 F5 | 	or	result1, ##106954752
22064     04 12 06 F1 | 	add	arg01, #4
22068     09 FB 61 FC | 	wrlong	result1, arg01
2206c     F2 FA 01 F6 | 	mov	result1, objptr
22070     00 38 03 FF 
22074     00 FA 45 F5 | 	or	result1, ##108003328
22078     04 12 06 F1 | 	add	arg01, #4
2207c     09 FB 61 FC | 	wrlong	result1, arg01
22080     F2 FA 01 F6 | 	mov	result1, objptr
22084     00 40 03 FF 
22088     00 FA 45 F5 | 	or	result1, ##109051904
2208c     04 12 06 F1 | 	add	arg01, #4
22090     09 FB 61 FC | 	wrlong	result1, arg01
22094     4C 12 86 F1 | 	sub	arg01, #76
22098                 | ' 
22098                 | '     v->close = &v_close;
22098                 | '     v->read = &v_read;
22098                 | '     v->write = &v_write;
22098                 | '     v->lseek = &v_lseek;
22098                 | '     v->ioctl = &v_ioctl;
22098                 | '     v->flush = 0;
22098                 | '     v->vfs_data = ptr;
22098                 | '     v->reserved = 0;
22098                 | ' 
22098                 | '     v->open = &v_open;
22098                 | '     v->creat = &v_creat;
22098                 | '     v->opendir = &v_opendir;
22098                 | '     v->closedir = &v_closedir;
22098                 | '     v->readdir = &v_readdir;
22098                 | '     v->stat = &v_stat;
22098                 | ' 
22098                 | '     v->mkdir = &v_mkdir;
22098                 | '     v->rmdir = &v_rmdir;
22098                 | ' 
22098                 | '     v->remove = &v_remove;
22098                 | '     v->rename = &v_rename;
22098                 | ' 
22098                 | '     v->init = &v_init;
22098                 | '     v->deinit = &v_deinit;
22098                 | ' 
22098                 | '     return v;
22098     09 FB 01 F6 | 	mov	result1, arg01
2209c     A7 F0 03 F6 | 	mov	ptra, fp
220a0     B2 00 A0 FD | 	call	#popregs_
220a4                 | _fatfs_cc_get_vfs_ret
220a4     2D 00 64 FD | 	ret
220a8                 | 
220a8                 | _fatfs_cc_xmit_mmc_0874
220a8     01 00 00 FF 
220ac     10 E4 05 F1 | 	add	objptr, ##528
220b0     F2 00 02 FB | 	rdlong	_var01, objptr
220b4     08 E4 05 F1 | 	add	objptr, #8
220b8     F2 02 02 FB | 	rdlong	_var02, objptr
220bc     01 00 00 FF 
220c0     18 E4 85 F1 | 	sub	objptr, ##536
220c4     40 02 62 FD | 	dirl	_var02
220c8     28 02 64 FD | 	setq	#1
220cc     09 05 02 FB | 	rdlong	_var03, arg01
220d0     69 04 62 FD | 	rev	_var03
220d4     1B 04 FE F9 | 	movbyts	_var03, #27
220d8     01 05 22 FC | 	wypin	_var03, _var02
220dc     0A 05 02 F6 | 	mov	_var03, arg02
220e0     02 14 4E F0 | 	shr	arg02, #2 wz
220e4     03 04 66 F0 | 	shl	_var03, #3
220e8     00 05 22 FC | 	wypin	_var03, _var01
220ec     41 02 62 FD | 	dirh	_var02
220f0     08 12 06 F1 | 	add	arg01, #8
220f4     69 06 62 FD | 	rev	_var04
220f8     1B 06 FE F9 | 	movbyts	_var04, #27
220fc                 | LR__3840
220fc     01 07 22 5C |  if_ne	wypin	_var04, _var02
22100     09 07 02 5B |  if_ne	rdlong	_var04, arg01
22104     04 12 06 51 |  if_ne	add	arg01, #4
22108     69 06 62 5D |  if_ne	rev	_var04
2210c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
22110                 | LR__3841
22110     40 02 72 5D |  if_ne	testp	_var02 wc
22114     F8 FF 9F 1D |  if_a	jmp	#LR__3841
22118     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3840
2211c                 | LR__3842
2211c     40 00 72 FD | 	testp	_var01 wc
22120     F8 FF 9F 3D |  if_ae	jmp	#LR__3842
22124     40 02 62 FD | 	dirl	_var02
22128     FF FF FF FF 
2212c     01 FF 2B FC | 	wypin	##-1, _var02
22130     41 02 62 FD | 	dirh	_var02
22134                 | _fatfs_cc_xmit_mmc_0874_ret
22134     2D 00 64 FD | 	ret
22138                 | 
22138                 | _fatfs_cc_rcvr_mmc_0881
22138     01 00 00 FF 
2213c     10 E4 05 F1 | 	add	objptr, ##528
22140     F2 00 02 FB | 	rdlong	_var01, objptr
22144     0C E4 05 F1 | 	add	objptr, #12
22148     F2 02 02 FB | 	rdlong	_var02, objptr
2214c     01 00 00 FF 
22150     1C E4 85 F1 | 	sub	objptr, ##540
22154     01 03 08 FC | 	akpin	_var02
22158     0A 05 0A F6 | 	mov	_var03, arg02 wz
2215c     02 04 4E F0 | 	shr	_var03, #2 wz
22160     30 00 90 AD |  if_e	jmp	#LR__3852
22164     02 07 02 F6 | 	mov	_var04, _var03
22168     05 06 66 F0 | 	shl	_var04, #5
2216c     00 07 22 FC | 	wypin	_var04, _var01
22170     01 7F 18 FC | 	wxpin	#63, _var02
22174                 | LR__3850
22174                 | LR__3851
22174     40 02 72 FD | 	testp	_var02 wc
22178     F8 FF 9F 3D |  if_ae	jmp	#LR__3851
2217c     01 07 8A FA | 	rdpin	_var04, _var02
22180     69 06 62 FD | 	rev	_var04
22184     1B 06 FE F9 | 	movbyts	_var04, #27
22188     09 07 62 FC | 	wrlong	_var04, arg01
2218c     04 12 06 F1 | 	add	arg01, #4
22190     F8 05 6E FB | 	djnz	_var03, #LR__3850
22194                 | LR__3852
22194     03 14 0E F5 | 	and	arg02, #3 wz
22198     24 00 90 AD |  if_e	jmp	#LR__3855
2219c     01 4F 18 FC | 	wxpin	#39, _var02
221a0                 | LR__3853
221a0     00 11 28 FC | 	wypin	#8, _var01
221a4                 | LR__3854
221a4     40 02 72 FD | 	testp	_var02 wc
221a8     F8 FF 9F 3D |  if_ae	jmp	#LR__3854
221ac     01 07 8A FA | 	rdpin	_var04, _var02
221b0     69 06 62 FD | 	rev	_var04
221b4     09 07 42 FC | 	wrbyte	_var04, arg01
221b8     01 12 06 F1 | 	add	arg01, #1
221bc     F8 15 6E FB | 	djnz	arg02, #LR__3853
221c0                 | LR__3855
221c0                 | _fatfs_cc_rcvr_mmc_0881_ret
221c0     2D 00 64 FD | 	ret
221c4                 | 
221c4                 | _fatfs_cc_wait_ready_0885
221c4     01 4A 05 F6 | 	mov	COUNT_, #1
221c8     A8 00 A0 FD | 	call	#pushregs_
221cc     10 F0 07 F1 | 	add	ptra, #16
221d0     1A FA 61 FD | 	getct	result1
221d4     08 4E 05 F1 | 	add	fp, #8
221d8     A7 FA 61 FC | 	wrlong	result1, fp
221dc     14 1E 06 FB | 	rdlong	local01, #20
221e0     01 1E 46 F0 | 	shr	local01, #1
221e4     04 4E 05 F1 | 	add	fp, #4
221e8     A7 1E 62 FC | 	wrlong	local01, fp
221ec     0C 4E 85 F1 | 	sub	fp, #12
221f0                 | ' {
221f0                 | ' 	BYTE d;
221f0                 | ' 	UINT tmr, tmout;
221f0                 | ' 
221f0                 | ' 	tmr = _cnt();
221f0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
221f0                 | ' 	for(;;) {
221f0                 | LR__3860
221f0     04 4E 05 F1 | 	add	fp, #4
221f4     A7 12 02 F6 | 	mov	arg01, fp
221f8     04 4E 85 F1 | 	sub	fp, #4
221fc     01 14 06 F6 | 	mov	arg02, #1
22200     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
22204     04 4E 05 F1 | 	add	fp, #4
22208     A7 1E C2 FA | 	rdbyte	local01, fp
2220c     04 4E 85 F1 | 	sub	fp, #4
22210     FF 1E 0E F2 | 	cmp	local01, #255 wz
22214     01 FA 05 A6 |  if_e	mov	result1, #1
22218     28 00 90 AD |  if_e	jmp	#LR__3861
2221c     1A FA 61 FD | 	getct	result1
22220     08 4E 05 F1 | 	add	fp, #8
22224     A7 1E 02 FB | 	rdlong	local01, fp
22228     0F FB 81 F1 | 	sub	result1, local01
2222c     04 4E 05 F1 | 	add	fp, #4
22230     A7 1E 02 FB | 	rdlong	local01, fp
22234     0C 4E 85 F1 | 	sub	fp, #12
22238     0F FB 11 F2 | 	cmp	result1, local01 wc
2223c     00 FA 05 36 |  if_ae	mov	result1, #0
22240     AC FF 9F CD |  if_b	jmp	#LR__3860
22244                 | LR__3861
22244     A7 F0 03 F6 | 	mov	ptra, fp
22248     B2 00 A0 FD | 	call	#popregs_
2224c                 | _fatfs_cc_wait_ready_0885_ret
2224c     2D 00 64 FD | 	ret
22250                 | 
22250                 | _fatfs_cc_deselect_0891
22250     00 4A 05 F6 | 	mov	COUNT_, #0
22254     A8 00 A0 FD | 	call	#pushregs_
22258     14 F0 07 F1 | 	add	ptra, #20
2225c     01 00 00 FF 
22260     14 E4 05 F1 | 	add	objptr, ##532
22264     F2 14 02 FB | 	rdlong	arg02, objptr
22268     04 4E 05 F1 | 	add	fp, #4
2226c     A7 14 62 FC | 	wrlong	arg02, fp
22270     04 E4 85 F1 | 	sub	objptr, #4
22274     F2 14 02 FB | 	rdlong	arg02, objptr
22278     04 4E 05 F1 | 	add	fp, #4
2227c     A7 14 62 FC | 	wrlong	arg02, fp
22280     08 E4 05 F1 | 	add	objptr, #8
22284     F2 14 02 FB | 	rdlong	arg02, objptr
22288     04 4E 05 F1 | 	add	fp, #4
2228c     A7 14 62 FC | 	wrlong	arg02, fp
22290     04 E4 05 F1 | 	add	objptr, #4
22294     F2 14 02 FB | 	rdlong	arg02, objptr
22298     01 00 00 FF 
2229c     1C E4 85 F1 | 	sub	objptr, ##540
222a0     04 4E 05 F1 | 	add	fp, #4
222a4     A7 14 62 FC | 	wrlong	arg02, fp
222a8     0C 4E 85 F1 | 	sub	fp, #12
222ac     A7 12 02 FB | 	rdlong	arg01, fp
222b0     04 4E 85 F1 | 	sub	fp, #4
222b4     59 12 62 FD | 	drvh	arg01
222b8     1F 20 64 FD | 	waitx	#16
222bc     A7 12 02 F6 | 	mov	arg01, fp
222c0     01 14 06 F6 | 	mov	arg02, #1
222c4     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
222c8     A7 F0 03 F6 | 	mov	ptra, fp
222cc     B2 00 A0 FD | 	call	#popregs_
222d0                 | _fatfs_cc_deselect_0891_ret
222d0     2D 00 64 FD | 	ret
222d4                 | 
222d4                 | _fatfs_cc_select_0895
222d4     00 4A 05 F6 | 	mov	COUNT_, #0
222d8     A8 00 A0 FD | 	call	#pushregs_
222dc     10 F0 07 F1 | 	add	ptra, #16
222e0     01 00 00 FF 
222e4     14 E4 05 F1 | 	add	objptr, ##532
222e8     F2 14 02 FB | 	rdlong	arg02, objptr
222ec     08 4E 05 F1 | 	add	fp, #8
222f0     A7 14 62 FC | 	wrlong	arg02, fp
222f4     08 E4 05 F1 | 	add	objptr, #8
222f8     F2 12 02 FB | 	rdlong	arg01, objptr
222fc     01 00 00 FF 
22300     1C E4 85 F1 | 	sub	objptr, ##540
22304     04 4E 05 F1 | 	add	fp, #4
22308     A7 12 62 FC | 	wrlong	arg01, fp
2230c     50 12 62 FD | 	fltl	arg01
22310     04 4E 85 F1 | 	sub	fp, #4
22314     A7 12 02 FB | 	rdlong	arg01, fp
22318     58 12 62 FD | 	drvl	arg01
2231c     1F 20 64 FD | 	waitx	#16
22320     04 4E 05 F1 | 	add	fp, #4
22324     A7 12 02 FB | 	rdlong	arg01, fp
22328     41 12 62 FD | 	dirh	arg01
2232c     08 4E 85 F1 | 	sub	fp, #8
22330     A7 12 02 F6 | 	mov	arg01, fp
22334     04 4E 85 F1 | 	sub	fp, #4
22338     01 14 06 F6 | 	mov	arg02, #1
2233c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
22340     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0885
22344     00 FA 0D F2 | 	cmp	result1, #0 wz
22348     01 FA 05 56 |  if_ne	mov	result1, #1
2234c     08 00 90 5D |  if_ne	jmp	#LR__3870
22350     FC FE BF FD | 	call	#_fatfs_cc_deselect_0891
22354                 | ' 
22354                 | ' 	deselect();
22354                 | ' 	return 0;
22354     00 FA 05 F6 | 	mov	result1, #0
22358                 | LR__3870
22358     A7 F0 03 F6 | 	mov	ptra, fp
2235c     B2 00 A0 FD | 	call	#popregs_
22360                 | _fatfs_cc_select_0895_ret
22360     2D 00 64 FD | 	ret
22364                 | 
22364                 | _fatfs_cc_rcvr_datablock_0899
22364     01 4A 05 F6 | 	mov	COUNT_, #1
22368     A8 00 A0 FD | 	call	#pushregs_
2236c     18 F0 07 F1 | 	add	ptra, #24
22370     04 4E 05 F1 | 	add	fp, #4
22374     A7 12 62 FC | 	wrlong	arg01, fp
22378     04 4E 05 F1 | 	add	fp, #4
2237c     A7 14 62 FC | 	wrlong	arg02, fp
22380     1A FA 61 FD | 	getct	result1
22384     08 4E 05 F1 | 	add	fp, #8
22388     A7 FA 61 FC | 	wrlong	result1, fp
2238c     14 1E 06 FB | 	rdlong	local01, #20
22390     03 1E 46 F0 | 	shr	local01, #3
22394     04 4E 05 F1 | 	add	fp, #4
22398     A7 1E 62 FC | 	wrlong	local01, fp
2239c     14 4E 85 F1 | 	sub	fp, #20
223a0                 | ' 	BYTE *buff,
223a0                 | ' 	UINT btr
223a0                 | ' )
223a0                 | ' {
223a0                 | ' 	BYTE d[2];
223a0                 | ' 	UINT tmr, tmout;
223a0                 | ' 
223a0                 | ' 	tmr = _cnt();
223a0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
223a0                 | ' 	for(;;) {
223a0                 | LR__3880
223a0     0C 4E 05 F1 | 	add	fp, #12
223a4     A7 12 02 F6 | 	mov	arg01, fp
223a8     0C 4E 85 F1 | 	sub	fp, #12
223ac     01 14 06 F6 | 	mov	arg02, #1
223b0     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
223b4     0C 4E 05 F1 | 	add	fp, #12
223b8     A7 1E C2 FA | 	rdbyte	local01, fp
223bc     0C 4E 85 F1 | 	sub	fp, #12
223c0     FF 1E 0E F2 | 	cmp	local01, #255 wz
223c4     28 00 90 5D |  if_ne	jmp	#LR__3881
223c8     1A FA 61 FD | 	getct	result1
223cc     FD 1E 02 F6 | 	mov	local01, result1
223d0     10 4E 05 F1 | 	add	fp, #16
223d4     A7 14 02 FB | 	rdlong	arg02, fp
223d8     0A 1F 82 F1 | 	sub	local01, arg02
223dc     04 4E 05 F1 | 	add	fp, #4
223e0     A7 14 02 FB | 	rdlong	arg02, fp
223e4     14 4E 85 F1 | 	sub	fp, #20
223e8     0A 1F 12 F2 | 	cmp	local01, arg02 wc
223ec     B0 FF 9F CD |  if_b	jmp	#LR__3880
223f0                 | LR__3881
223f0     0C 4E 05 F1 | 	add	fp, #12
223f4     A7 1E C2 FA | 	rdbyte	local01, fp
223f8     0C 4E 85 F1 | 	sub	fp, #12
223fc     FE 1E 0E F2 | 	cmp	local01, #254 wz
22400     00 FA 05 56 |  if_ne	mov	result1, #0
22404     30 00 90 5D |  if_ne	jmp	#LR__3882
22408     04 4E 05 F1 | 	add	fp, #4
2240c     A7 12 02 FB | 	rdlong	arg01, fp
22410     04 4E 05 F1 | 	add	fp, #4
22414     A7 14 02 FB | 	rdlong	arg02, fp
22418     08 4E 85 F1 | 	sub	fp, #8
2241c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
22420     0C 4E 05 F1 | 	add	fp, #12
22424     A7 12 02 F6 | 	mov	arg01, fp
22428     0C 4E 85 F1 | 	sub	fp, #12
2242c     02 14 06 F6 | 	mov	arg02, #2
22430     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
22434                 | ' 
22434                 | ' 	rcvr_mmc(buff, btr);
22434                 | ' 	rcvr_mmc(d, 2);
22434                 | ' 
22434                 | ' 	return 1;
22434     01 FA 05 F6 | 	mov	result1, #1
22438                 | LR__3882
22438     A7 F0 03 F6 | 	mov	ptra, fp
2243c     B2 00 A0 FD | 	call	#popregs_
22440                 | _fatfs_cc_rcvr_datablock_0899_ret
22440     2D 00 64 FD | 	ret
22444                 | 
22444                 | _fatfs_cc_xmit_datablock_0901
22444     00 4A 05 F6 | 	mov	COUNT_, #0
22448     A8 00 A0 FD | 	call	#pushregs_
2244c     10 F0 07 F1 | 	add	ptra, #16
22450     04 4E 05 F1 | 	add	fp, #4
22454     A7 12 62 FC | 	wrlong	arg01, fp
22458     04 4E 05 F1 | 	add	fp, #4
2245c     A7 14 42 FC | 	wrbyte	arg02, fp
22460     08 4E 85 F1 | 	sub	fp, #8
22464     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0885
22468     00 FA 0D F2 | 	cmp	result1, #0 wz
2246c     00 FA 05 A6 |  if_e	mov	result1, #0
22470     90 00 90 AD |  if_e	jmp	#LR__3891
22474     08 4E 05 F1 | 	add	fp, #8
22478     A7 14 C2 FA | 	rdbyte	arg02, fp
2247c     04 4E 05 F1 | 	add	fp, #4
22480     A7 14 42 FC | 	wrbyte	arg02, fp
22484     A7 12 02 F6 | 	mov	arg01, fp
22488     0C 4E 85 F1 | 	sub	fp, #12
2248c     01 14 06 F6 | 	mov	arg02, #1
22490     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0874
22494     08 4E 05 F1 | 	add	fp, #8
22498     A7 14 C2 FA | 	rdbyte	arg02, fp
2249c     08 4E 85 F1 | 	sub	fp, #8
224a0     FD 14 0E F2 | 	cmp	arg02, #253 wz
224a4     58 00 90 AD |  if_e	jmp	#LR__3890
224a8     04 4E 05 F1 | 	add	fp, #4
224ac     A7 12 02 FB | 	rdlong	arg01, fp
224b0     04 4E 85 F1 | 	sub	fp, #4
224b4     09 14 C6 F9 | 	decod	arg02, #9
224b8     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0874
224bc     0C 4E 05 F1 | 	add	fp, #12
224c0     A7 12 02 F6 | 	mov	arg01, fp
224c4     0C 4E 85 F1 | 	sub	fp, #12
224c8     02 14 06 F6 | 	mov	arg02, #2
224cc     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
224d0     0C 4E 05 F1 | 	add	fp, #12
224d4     A7 12 02 F6 | 	mov	arg01, fp
224d8     0C 4E 85 F1 | 	sub	fp, #12
224dc     01 14 06 F6 | 	mov	arg02, #1
224e0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
224e4     0C 4E 05 F1 | 	add	fp, #12
224e8     A7 14 C2 FA | 	rdbyte	arg02, fp
224ec     0C 4E 85 F1 | 	sub	fp, #12
224f0     1F 14 06 F5 | 	and	arg02, #31
224f4     05 14 0E F2 | 	cmp	arg02, #5 wz
224f8                 | ' 			return 0;
224f8     00 FA 05 56 |  if_ne	mov	result1, #0
224fc     04 00 90 5D |  if_ne	jmp	#LR__3891
22500                 | LR__3890
22500                 | ' 	}
22500                 | ' 
22500                 | ' 	return 1;
22500     01 FA 05 F6 | 	mov	result1, #1
22504                 | LR__3891
22504     A7 F0 03 F6 | 	mov	ptra, fp
22508     B2 00 A0 FD | 	call	#popregs_
2250c                 | _fatfs_cc_xmit_datablock_0901_ret
2250c     2D 00 64 FD | 	ret
22510                 | 
22510                 | _fatfs_cc_send_cmd_0905
22510     01 4A 05 F6 | 	mov	COUNT_, #1
22514     A8 00 A0 FD | 	call	#pushregs_
22518     1C F0 07 F1 | 	add	ptra, #28
2251c                 | _fatfs_cc_send_cmd_0905_enter
2251c     04 4E 05 F1 | 	add	fp, #4
22520     A7 12 42 FC | 	wrbyte	arg01, fp
22524     04 4E 05 F1 | 	add	fp, #4
22528     A7 14 62 FC | 	wrlong	arg02, fp
2252c     04 4E 85 F1 | 	sub	fp, #4
22530     A7 FA C1 FA | 	rdbyte	result1, fp
22534     04 4E 85 F1 | 	sub	fp, #4
22538     80 FA CD F7 | 	test	result1, #128 wz
2253c     44 00 90 AD |  if_e	jmp	#LR__3900
22540     04 4E 05 F1 | 	add	fp, #4
22544     A7 14 C2 FA | 	rdbyte	arg02, fp
22548     7F 14 06 F5 | 	and	arg02, #127
2254c     A7 14 42 FC | 	wrbyte	arg02, fp
22550     04 4E 85 F1 | 	sub	fp, #4
22554     37 12 06 F6 | 	mov	arg01, #55
22558     00 14 06 F6 | 	mov	arg02, #0
2255c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0905
22560     0C 4E 05 F1 | 	add	fp, #12
22564     A7 FA 41 FC | 	wrbyte	result1, fp
22568     A7 14 C2 FA | 	rdbyte	arg02, fp
2256c     0C 4E 85 F1 | 	sub	fp, #12
22570     02 14 16 F2 | 	cmp	arg02, #2 wc
22574     0C 4E 05 31 |  if_ae	add	fp, #12
22578     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2257c     0C 4E 85 31 |  if_ae	sub	fp, #12
22580     6C 01 90 3D |  if_ae	jmp	#LR__3904
22584                 | LR__3900
22584     04 4E 05 F1 | 	add	fp, #4
22588     A7 14 C2 FA | 	rdbyte	arg02, fp
2258c     04 4E 85 F1 | 	sub	fp, #4
22590     0C 14 0E F2 | 	cmp	arg02, #12 wz
22594     14 00 90 AD |  if_e	jmp	#LR__3901
22598     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0891
2259c     34 FD BF FD | 	call	#_fatfs_cc_select_0895
225a0     00 FA 0D F2 | 	cmp	result1, #0 wz
225a4     FF FA 05 A6 |  if_e	mov	result1, #255
225a8     44 01 90 AD |  if_e	jmp	#LR__3904
225ac                 | LR__3901
225ac     04 4E 05 F1 | 	add	fp, #4
225b0     A7 14 C2 FA | 	rdbyte	arg02, fp
225b4     40 FA 05 F6 | 	mov	result1, #64
225b8     0A FB 41 F5 | 	or	result1, arg02
225bc     10 4E 05 F1 | 	add	fp, #16
225c0     A7 FA 41 FC | 	wrbyte	result1, fp
225c4     0C 4E 85 F1 | 	sub	fp, #12
225c8     A7 FA 01 FB | 	rdlong	result1, fp
225cc     18 FA 45 F0 | 	shr	result1, #24
225d0     0D 4E 05 F1 | 	add	fp, #13
225d4     A7 FA 41 FC | 	wrbyte	result1, fp
225d8     0D 4E 85 F1 | 	sub	fp, #13
225dc     A7 FA 01 FB | 	rdlong	result1, fp
225e0     10 FA 45 F0 | 	shr	result1, #16
225e4     0E 4E 05 F1 | 	add	fp, #14
225e8     A7 FA 41 FC | 	wrbyte	result1, fp
225ec     0E 4E 85 F1 | 	sub	fp, #14
225f0     A7 FA 01 FB | 	rdlong	result1, fp
225f4     08 FA 45 F0 | 	shr	result1, #8
225f8     0F 4E 05 F1 | 	add	fp, #15
225fc     A7 FA 41 FC | 	wrbyte	result1, fp
22600     0F 4E 85 F1 | 	sub	fp, #15
22604     A7 FA 01 FB | 	rdlong	result1, fp
22608     10 4E 05 F1 | 	add	fp, #16
2260c     A7 FA 41 FC | 	wrbyte	result1, fp
22610     0C 4E 85 F1 | 	sub	fp, #12
22614     A7 02 48 FC | 	wrbyte	#1, fp
22618     08 4E 85 F1 | 	sub	fp, #8
2261c     A7 FA C9 FA | 	rdbyte	result1, fp wz
22620     04 4E 85 F1 | 	sub	fp, #4
22624     0C 4E 05 A1 |  if_e	add	fp, #12
22628     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2262c     0C 4E 85 A1 |  if_e	sub	fp, #12
22630     04 4E 05 F1 | 	add	fp, #4
22634     A7 FA C1 FA | 	rdbyte	result1, fp
22638     04 4E 85 F1 | 	sub	fp, #4
2263c     08 FA 0D F2 | 	cmp	result1, #8 wz
22640     0C 4E 05 A1 |  if_e	add	fp, #12
22644     A7 0E 49 AC |  if_e	wrbyte	#135, fp
22648     0C 4E 85 A1 |  if_e	sub	fp, #12
2264c     0C 4E 05 F1 | 	add	fp, #12
22650     A7 14 C2 FA | 	rdbyte	arg02, fp
22654     0D 4E 05 F1 | 	add	fp, #13
22658     A7 14 42 FC | 	wrbyte	arg02, fp
2265c     05 4E 85 F1 | 	sub	fp, #5
22660     A7 12 02 F6 | 	mov	arg01, fp
22664     14 4E 85 F1 | 	sub	fp, #20
22668     06 14 06 F6 | 	mov	arg02, #6
2266c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0874
22670     04 4E 05 F1 | 	add	fp, #4
22674     A7 1E C2 FA | 	rdbyte	local01, fp
22678     04 4E 85 F1 | 	sub	fp, #4
2267c     0C 1E 0E F2 | 	cmp	local01, #12 wz
22680     10 4E 05 A1 |  if_e	add	fp, #16
22684     A7 12 02 A6 |  if_e	mov	arg01, fp
22688     10 4E 85 A1 |  if_e	sub	fp, #16
2268c     01 14 06 A6 |  if_e	mov	arg02, #1
22690     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0881
22694     0C 4E 05 F1 | 	add	fp, #12
22698     A7 14 48 FC | 	wrbyte	#10, fp
2269c     0C 4E 85 F1 | 	sub	fp, #12
226a0                 | ' 	n = 10;
226a0                 | ' 	do
226a0                 | LR__3902
226a0     10 4E 05 F1 | 	add	fp, #16
226a4     A7 12 02 F6 | 	mov	arg01, fp
226a8     10 4E 85 F1 | 	sub	fp, #16
226ac     01 14 06 F6 | 	mov	arg02, #1
226b0     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0881
226b4     10 4E 05 F1 | 	add	fp, #16
226b8     A7 1E C2 FA | 	rdbyte	local01, fp
226bc     10 4E 85 F1 | 	sub	fp, #16
226c0     80 1E CE F7 | 	test	local01, #128 wz
226c4     1C 00 90 AD |  if_e	jmp	#LR__3903
226c8     0C 4E 05 F1 | 	add	fp, #12
226cc     A7 1E C2 FA | 	rdbyte	local01, fp
226d0     01 1E 86 F1 | 	sub	local01, #1
226d4     A7 1E 42 FC | 	wrbyte	local01, fp
226d8     A7 1E CA FA | 	rdbyte	local01, fp wz
226dc     0C 4E 85 F1 | 	sub	fp, #12
226e0     BC FF 9F 5D |  if_ne	jmp	#LR__3902
226e4                 | LR__3903
226e4                 | ' 
226e4                 | ' 	return d;
226e4     10 4E 05 F1 | 	add	fp, #16
226e8     A7 FA C1 FA | 	rdbyte	result1, fp
226ec     10 4E 85 F1 | 	sub	fp, #16
226f0                 | LR__3904
226f0     A7 F0 03 F6 | 	mov	ptra, fp
226f4     B2 00 A0 FD | 	call	#popregs_
226f8                 | _fatfs_cc_send_cmd_0905_ret
226f8     2D 00 64 FD | 	ret
226fc                 | 
226fc                 | _fatfs_cc_disk_deinitialize
226fc     03 4A 05 F6 | 	mov	COUNT_, #3
22700     A8 00 A0 FD | 	call	#pushregs_
22704     00 12 4E F2 | 	cmps	arg01, #0 wz
22708     01 00 00 FF 
2270c     14 E4 05 F1 | 	add	objptr, ##532
22710     F2 12 02 FB | 	rdlong	arg01, objptr
22714     04 E4 85 F1 | 	sub	objptr, #4
22718     F2 1E 02 FB | 	rdlong	local01, objptr
2271c     08 E4 05 F1 | 	add	objptr, #8
22720     F2 20 02 FB | 	rdlong	local02, objptr
22724     04 E4 05 F1 | 	add	objptr, #4
22728     F2 22 02 FB | 	rdlong	local03, objptr
2272c     01 00 00 FF 
22730     1C E4 85 F1 | 	sub	objptr, ##540
22734                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
22734                 | '         return RES_NOTRDY;
22734     03 FA 05 56 |  if_ne	mov	result1, #3
22738     2C 00 90 5D |  if_ne	jmp	#LR__3910
2273c     50 12 62 FD | 	fltl	arg01
22740     09 01 08 FC | 	wrpin	#0, arg01
22744     50 1E 62 FD | 	fltl	local01
22748     0F 01 08 FC | 	wrpin	#0, local01
2274c     50 20 62 FD | 	fltl	local02
22750     10 01 08 FC | 	wrpin	#0, local02
22754     50 22 62 FD | 	fltl	local03
22758     11 01 08 FC | 	wrpin	#0, local03
2275c     0A 12 06 F6 | 	mov	arg01, #10
22760     A0 15 BF FD | 	call	#__system___waitms
22764                 | '     }
22764                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
22764                 | '     _pinclear(PIN_SS);
22764                 | '     _pinclear(PIN_CLK);
22764                 | '     _pinclear(PIN_DI);
22764                 | '     _pinclear(PIN_DO);
22764                 | ' 
22764                 | '     _waitms(10);
22764                 | ' 
22764                 | '     return 0;
22764     00 FA 05 F6 | 	mov	result1, #0
22768                 | LR__3910
22768     A7 F0 03 F6 | 	mov	ptra, fp
2276c     B2 00 A0 FD | 	call	#popregs_
22770                 | _fatfs_cc_disk_deinitialize_ret
22770     2D 00 64 FD | 	ret
22774                 | 
22774                 | _fatfs_cc_gettimeofday
22774     04 4A 05 F6 | 	mov	COUNT_, #4
22778     A8 00 A0 FD | 	call	#pushregs_
2277c     09 1F 02 F6 | 	mov	local01, arg01
22780     44 12 BF FD | 	call	#__system___getus
22784     FD 12 02 F6 | 	mov	arg01, result1
22788     02 00 00 FF 
2278c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
22790     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
22794     09 FB 01 F6 | 	mov	result1, arg01
22798     10 FB 81 F1 | 	sub	result1, local02
2279c     A1 07 00 FF 
227a0     40 FA 15 FD | 	qdiv	result1, ##1000000
227a4     02 00 00 FF 
227a8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
227ac     18 20 62 FD | 	getqx	local02
227b0     A1 07 00 FF 
227b4     40 FA 15 FD | 	qdiv	result1, ##1000000
227b8     00 20 0E F2 | 	cmp	local02, #0 wz
227bc     19 22 62 FD | 	getqy	local03
227c0     28 00 90 AD |  if_e	jmp	#LR__3920
227c4     02 00 00 FF 
227c8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
227cc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
227d0     10 25 02 F1 | 	add	local04, local02
227d4     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
227d8     11 13 82 F1 | 	sub	arg01, local03
227dc     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
227e0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
227e4     02 00 00 FF 
227e8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
227ec                 | LR__3920
227ec     02 00 00 FF 
227f0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
227f4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
227f8     02 00 00 FF 
227fc     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
22800     0F 25 62 FC | 	wrlong	local04, local01
22804     04 1E 06 F1 | 	add	local01, #4
22808     0F 23 62 FC | 	wrlong	local03, local01
2280c                 | '         lastsec += secs;
2280c                 | '         lastus = now - leftover;
2280c                 | '     }
2280c                 | '     tv->tv_sec = lastsec;
2280c                 | '     tv->tv_usec = leftover;
2280c                 | '     return 0;
2280c     00 FA 05 F6 | 	mov	result1, #0
22810     A7 F0 03 F6 | 	mov	ptra, fp
22814     B2 00 A0 FD | 	call	#popregs_
22818                 | _fatfs_cc_gettimeofday_ret
22818     2D 00 64 FD | 	ret
2281c                 | 
2281c                 | _fatfs_cc__is_leap_year
2281c     09 FB 51 F6 | 	abs	result1, arg01 wc
22820     03 FA 05 F5 | 	and	result1, #3
22824     FD FA 89 F6 | 	negc	result1, result1 wz
22828     38 00 90 5D |  if_ne	jmp	#LR__3931
2282c     09 FB 51 F6 | 	abs	result1, arg01 wc
22830     64 FA 15 FD | 	qdiv	result1, #100
22834     19 FA 61 FD | 	getqy	result1
22838     FD FA 89 F6 | 	negc	result1, result1 wz
2283c     1C 00 90 5D |  if_ne	jmp	#LR__3930
22840     09 FB 51 F6 | 	abs	result1, arg01 wc
22844     90 FB 15 FD | 	qdiv	result1, #400
22848                 | '       return (0 == y % 400);
22848     00 FA 05 F6 | 	mov	result1, #0
2284c     19 00 62 FD | 	getqy	_var01
22850     00 01 8A F6 | 	negc	_var01, _var01 wz
22854     01 FA 05 A6 |  if_e	mov	result1, #1
22858     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2285c                 | LR__3930
2285c                 | '     return 1;
2285c     01 FA 05 F6 | 	mov	result1, #1
22860     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
22864                 | LR__3931
22864                 | '   }
22864                 | '   return 0;
22864     00 FA 05 F6 | 	mov	result1, #0
22868                 | _fatfs_cc__is_leap_year_ret
22868     2D 00 64 FD | 	ret
2286c                 | 
2286c                 | _fatfs_cc___tzoffset
2286c     09 01 0A F6 | 	mov	_var01, arg01 wz
22870     FF FF FF FF 
22874     0A FF 6B FC | 	wrlong	##-1, arg02
22878     01 02 06 F6 | 	mov	_var02, #1
2287c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
22880                 | '                 return 0;
22880     00 FA 05 A6 |  if_e	mov	result1, #0
22884     94 02 90 AD |  if_e	jmp	#LR__3957
22888     0A 01 68 FC | 	wrlong	#0, arg02
2288c     02 00 00 FF 
22890     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
22894     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
22898                 | ' 
22898                 | '        *hasdst = 0;
22898                 | ' 
22898                 | ' 	n = stdname;
22898                 | '         while (*s && isalpha(*s)) {
22898     02 00 00 FF 
2289c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
228a0     97 28 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
228a4                 | LR__3940
228a4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
228a8     48 00 90 AD |  if_e	jmp	#LR__3942
228ac     00 13 C2 FA | 	rdbyte	arg01, _var01
228b0                 | ' {
228b0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
228b0     80 12 36 F3 | 	fle	arg01, #128 wc
228b4                 | '     return __ctype[c];
228b4     02 00 00 FF 
228b8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
228bc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
228c0     09 FB C1 FA | 	rdbyte	result1, arg01
228c4     02 00 00 FF 
228c8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
228cc     0C FA CD F7 | 	test	result1, #12 wz
228d0     20 00 90 AD |  if_e	jmp	#LR__3942
228d4     00 09 02 F6 | 	mov	_var05, _var01
228d8     00 0B 02 F6 | 	mov	_var06, _var01
228dc     01 0A 06 F1 | 	add	_var06, #1
228e0     04 0D C2 FA | 	rdbyte	_var07, _var05
228e4     05 01 02 F6 | 	mov	_var01, _var06
228e8     03 0D 42 FC | 	wrbyte	_var07, _var04
228ec     01 06 06 F1 | 	add	_var04, #1
228f0     B0 FF 9F FD | 	jmp	#LR__3940
228f4                 | LR__3941
228f4                 | LR__3942
228f4     03 01 48 FC | 	wrbyte	#0, _var04
228f8     00 0E 06 F6 | 	mov	_var08, #0
228fc     00 05 C2 FA | 	rdbyte	_var03, _var01
22900     2D 04 0E F2 | 	cmp	_var03, #45 wz
22904     01 02 66 A6 |  if_e	neg	_var02, #1
22908     01 00 06 A1 |  if_e	add	_var01, #1
2290c     97 28 48 FB | 	callpa	#(@LR__3944-@LR__3943)>>2,fcache_load_ptr_
22910                 | '                 sgn = -1;
22910                 | '                 s++;
22910                 | '         }
22910                 | '         while (isdigit(*s)) {
22910                 | LR__3943
22910     00 13 C2 FA | 	rdbyte	arg01, _var01
22914                 | ' {
22914                 | '   return  (__ctype_get(c) & 0x02 ) ;
22914     80 12 36 F3 | 	fle	arg01, #128 wc
22918                 | '     return __ctype[c];
22918     02 00 00 FF 
2291c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
22920     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22924     09 FB C1 FA | 	rdbyte	result1, arg01
22928     02 00 00 FF 
2292c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
22930     02 FA CD F7 | 	test	result1, #2 wz
22934     28 00 90 AD |  if_e	jmp	#LR__3945
22938     07 05 02 F6 | 	mov	_var03, _var08
2293c     02 04 66 F0 | 	shl	_var03, #2
22940     07 05 02 F1 | 	add	_var03, _var08
22944     01 04 66 F0 | 	shl	_var03, #1
22948     00 09 C2 FA | 	rdbyte	_var05, _var01
2294c     30 08 86 F1 | 	sub	_var05, #48
22950     04 05 02 F1 | 	add	_var03, _var05
22954     02 0F 02 F6 | 	mov	_var08, _var03
22958     01 00 06 F1 | 	add	_var01, #1
2295c     B0 FF 9F FD | 	jmp	#LR__3943
22960                 | LR__3944
22960                 | LR__3945
22960     07 00 00 FF 
22964     10 0E 06 FD | 	qmul	_var08, ##3600
22968     00 05 C2 FA | 	rdbyte	_var03, _var01
2296c     3A 04 0E F2 | 	cmp	_var03, #58 wz
22970     18 10 62 FD | 	getqx	_var09
22974     70 00 90 5D |  if_ne	jmp	#LR__3949
22978     00 0E 06 F6 | 	mov	_var08, #0
2297c     01 00 06 F1 | 	add	_var01, #1
22980     97 28 48 FB | 	callpa	#(@LR__3947-@LR__3946)>>2,fcache_load_ptr_
22984                 | '                 x = 0;
22984                 | '                 s++;
22984                 | '                 while (isdigit(*s)) {
22984                 | LR__3946
22984     00 13 C2 FA | 	rdbyte	arg01, _var01
22988                 | ' {
22988                 | '   return  (__ctype_get(c) & 0x02 ) ;
22988     80 12 36 F3 | 	fle	arg01, #128 wc
2298c                 | '     return __ctype[c];
2298c     02 00 00 FF 
22990     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
22994     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22998     09 FB C1 FA | 	rdbyte	result1, arg01
2299c     02 00 00 FF 
229a0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
229a4     02 FA CD F7 | 	test	result1, #2 wz
229a8     28 00 90 AD |  if_e	jmp	#LR__3948
229ac     07 05 02 F6 | 	mov	_var03, _var08
229b0     02 04 66 F0 | 	shl	_var03, #2
229b4     07 05 02 F1 | 	add	_var03, _var08
229b8     01 04 66 F0 | 	shl	_var03, #1
229bc     00 09 C2 FA | 	rdbyte	_var05, _var01
229c0     30 08 86 F1 | 	sub	_var05, #48
229c4     04 05 02 F1 | 	add	_var03, _var05
229c8     02 0F 02 F6 | 	mov	_var08, _var03
229cc     01 00 06 F1 | 	add	_var01, #1
229d0     B0 FF 9F FD | 	jmp	#LR__3946
229d4                 | LR__3947
229d4                 | LR__3948
229d4     07 0D 02 F6 | 	mov	_var07, _var08
229d8     04 0C 66 F0 | 	shl	_var07, #4
229dc     07 0D 82 F1 | 	sub	_var07, _var08
229e0     02 0C 66 F0 | 	shl	_var07, #2
229e4     06 11 02 F1 | 	add	_var09, _var07
229e8                 | LR__3949
229e8     02 00 00 FF 
229ec     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
229f0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
229f4     00 13 C2 FA | 	rdbyte	arg01, _var01
229f8                 | ' {
229f8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
229f8     80 12 36 F3 | 	fle	arg01, #128 wc
229fc                 | '     return __ctype[c];
229fc     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
22a00     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22a04     09 FB C1 FA | 	rdbyte	result1, arg01
22a08     02 00 00 FF 
22a0c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
22a10     0C FA CD F7 | 	test	result1, #12 wz
22a14     50 00 90 AD |  if_e	jmp	#LR__3952
22a18     0A 03 68 FC | 	wrlong	#1, arg02
22a1c                 | '                 *hasdst = 1;
22a1c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
22a1c                 | LR__3950
22a1c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
22a20     44 00 90 AD |  if_e	jmp	#LR__3951
22a24     00 13 C2 FA | 	rdbyte	arg01, _var01
22a28                 | ' {
22a28                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
22a28     80 12 36 F3 | 	fle	arg01, #128 wc
22a2c                 | '     return __ctype[c];
22a2c     02 00 00 FF 
22a30     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
22a34     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22a38     09 FB C1 FA | 	rdbyte	result1, arg01
22a3c     02 00 00 FF 
22a40     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
22a44     0C FA CD F7 | 	test	result1, #12 wz
22a48     1C 00 90 AD |  if_e	jmp	#LR__3951
22a4c     00 0B 02 F6 | 	mov	_var06, _var01
22a50     01 0A 06 F1 | 	add	_var06, #1
22a54     00 0D C2 FA | 	rdbyte	_var07, _var01
22a58     05 01 02 F6 | 	mov	_var01, _var06
22a5c     03 0D 42 FC | 	wrbyte	_var07, _var04
22a60     01 06 06 F1 | 	add	_var04, #1
22a64     B4 FF 9F FD | 	jmp	#LR__3950
22a68                 | LR__3951
22a68                 | LR__3952
22a68     03 01 48 FC | 	wrbyte	#0, _var04
22a6c     02 00 00 FF 
22a70     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
22a74     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
22a78     02 00 00 FF 
22a7c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
22a80     20 00 90 AD |  if_e	jmp	#LR__3953
22a84     02 00 00 FF 
22a88     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
22a8c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22a90     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
22a94     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22a98     02 00 00 FF 
22a9c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
22aa0     1C 00 90 FD | 	jmp	#LR__3954
22aa4                 | LR__3953
22aa4     02 00 00 FF 
22aa8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
22aac     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22ab0     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
22ab4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22ab8     02 00 00 FF 
22abc     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
22ac0                 | LR__3954
22ac0     02 00 00 FF 
22ac4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
22ac8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
22acc     02 00 00 FF 
22ad0     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
22ad4     20 00 90 AD |  if_e	jmp	#LR__3955
22ad8     02 00 00 FF 
22adc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
22ae0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22ae4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
22ae8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22aec     02 00 00 FF 
22af0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
22af4     1C 00 90 FD | 	jmp	#LR__3956
22af8                 | LR__3955
22af8     02 00 00 FF 
22afc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
22b00     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
22b04     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
22b08     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
22b0c     02 00 00 FF 
22b10     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
22b14                 | LR__3956
22b14     08 03 02 FD | 	qmul	_var02, _var09
22b18                 | ' 		_tzname[1] = stdname;
22b18                 | ' 
22b18                 | '         return sgn * off;
22b18     18 FA 61 FD | 	getqx	result1
22b1c                 | LR__3957
22b1c                 | _fatfs_cc___tzoffset_ret
22b1c     2D 00 64 FD | 	ret
22b20                 | 
22b20                 | _fatfs_cc___indst
22b20     10 12 06 F1 | 	add	arg01, #16
22b24     09 01 02 FB | 	rdlong	_var01, arg01
22b28     10 12 86 F1 | 	sub	arg01, #16
22b2c     02 00 0E F2 | 	cmp	_var01, #2 wz
22b30     30 00 90 5D |  if_ne	jmp	#LR__3960
22b34     07 00 06 F6 | 	mov	_var01, #7
22b38     18 12 06 F1 | 	add	arg01, #24
22b3c     09 03 02 FB | 	rdlong	_var02, arg01
22b40     01 01 02 F1 | 	add	_var01, _var02
22b44     0C 12 86 F1 | 	sub	arg01, #12
22b48     09 05 02 FB | 	rdlong	_var03, arg01
22b4c     02 01 82 F1 | 	sub	_var01, _var03
22b50     00 00 56 F2 | 	cmps	_var01, #0 wc
22b54                 | '                         return 1;
22b54     01 FA 05 C6 |  if_b	mov	result1, #1
22b58     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
22b5c                 | '                 return 0;
22b5c     00 FA 05 F6 | 	mov	result1, #0
22b60     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
22b64                 | LR__3960
22b64     10 12 06 F1 | 	add	arg01, #16
22b68     09 01 02 FB | 	rdlong	_var01, arg01
22b6c     10 12 86 F1 | 	sub	arg01, #16
22b70     0A 00 0E F2 | 	cmp	_var01, #10 wz
22b74     28 00 90 5D |  if_ne	jmp	#LR__3961
22b78     18 12 06 F1 | 	add	arg01, #24
22b7c     09 01 02 FB | 	rdlong	_var01, arg01
22b80     0C 12 86 F1 | 	sub	arg01, #12
22b84     09 07 02 FB | 	rdlong	_var04, arg01
22b88     03 01 82 F1 | 	sub	_var01, _var04
22b8c     00 00 56 F2 | 	cmps	_var01, #0 wc
22b90                 | '                         return 0;
22b90     00 FA 05 C6 |  if_b	mov	result1, #0
22b94     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
22b98                 | '                 return 1;
22b98     01 FA 05 F6 | 	mov	result1, #1
22b9c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
22ba0                 | LR__3961
22ba0                 | '         }
22ba0                 | ' 
22ba0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
22ba0     00 00 06 F6 | 	mov	_var01, #0
22ba4     10 12 06 F1 | 	add	arg01, #16
22ba8     09 03 02 FB | 	rdlong	_var02, arg01
22bac     10 12 86 F1 | 	sub	arg01, #16
22bb0     03 02 56 F2 | 	cmps	_var02, #3 wc
22bb4     10 00 90 CD |  if_b	jmp	#LR__3962
22bb8     10 12 06 F1 | 	add	arg01, #16
22bbc     09 05 02 FB | 	rdlong	_var03, arg01
22bc0     0A 04 56 F2 | 	cmps	_var03, #10 wc
22bc4     01 00 06 C6 |  if_b	mov	_var01, #1
22bc8                 | LR__3962
22bc8     00 FB 01 F6 | 	mov	result1, _var01
22bcc                 | _fatfs_cc___indst_ret
22bcc     2D 00 64 FD | 	ret
22bd0                 | 
22bd0                 | ' 	
22bd0                 | ' 	FUNCTION pfunc(c as integer) as integer
22bd0                 | ___strs_cl_pfunc
22bd0                 | ' 		if (i < 16) then
22bd0     04 E4 05 F1 | 	add	objptr, #4
22bd4     F2 FA 01 FB | 	rdlong	result1, objptr
22bd8     04 E4 85 F1 | 	sub	objptr, #4
22bdc     10 FA 55 F2 | 	cmps	result1, #16 wc
22be0     2C 00 90 3D |  if_ae	jmp	#LR__3970
22be4     F2 FA 01 FB | 	rdlong	result1, objptr
22be8     04 E4 05 F1 | 	add	objptr, #4
22bec     F2 00 02 FB | 	rdlong	_var01, objptr
22bf0     FD 00 02 F1 | 	add	_var01, result1
22bf4     00 13 42 FC | 	wrbyte	arg01, _var01
22bf8     F2 FA 01 FB | 	rdlong	result1, objptr
22bfc     01 FA 05 F1 | 	add	result1, #1
22c00     F2 FA 61 FC | 	wrlong	result1, objptr
22c04     04 E4 85 F1 | 	sub	objptr, #4
22c08                 | ' 			p(i) = c
22c08                 | ' 			i = i+1
22c08                 | ' 			return 1
22c08     01 FA 05 F6 | 	mov	result1, #1
22c0c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
22c10                 | LR__3970
22c10                 | ' 			return -1
22c10     01 FA 65 F6 | 	neg	result1, #1
22c14                 | ___strs_cl_pfunc_ret
22c14     2D 00 64 FD | 	ret
22c18                 | 
22c18                 | __struct__s_vfs_file_t_putchar
22c18     04 4A 05 F6 | 	mov	COUNT_, #4
22c1c     A8 00 A0 FD | 	call	#pushregs_
22c20     1C E4 05 F1 | 	add	objptr, #28
22c24     F2 1E 0A FB | 	rdlong	local01, objptr wz
22c28     1C E4 85 F1 | 	sub	objptr, #28
22c2c     00 FA 05 A6 |  if_e	mov	result1, #0
22c30     48 00 90 AD |  if_e	jmp	#LR__3980
22c34     1C E4 05 F1 | 	add	objptr, #28
22c38     F2 20 02 FB | 	rdlong	local02, objptr
22c3c     10 23 02 F6 | 	mov	local03, local02
22c40     1C E4 85 F1 | 	sub	objptr, #28
22c44     13 22 46 F7 | 	zerox	local03, #19
22c48     14 20 46 F0 | 	shr	local02, #20
22c4c     02 20 66 F0 | 	shl	local02, #2
22c50     ED 20 02 F1 | 	add	local02, __methods__
22c54     10 21 02 FB | 	rdlong	local02, local02
22c58     F2 14 02 F6 | 	mov	arg02, objptr
22c5c     F2 24 02 F6 | 	mov	local04, objptr
22c60     11 E5 01 F6 | 	mov	objptr, local03
22c64     2D 20 62 FD | 	call	local02
22c68     12 E5 01 F6 | 	mov	objptr, local04
22c6c                 | '     return (i < 0) ? 0 : 1;
22c6c     00 FA 55 F2 | 	cmps	result1, #0 wc
22c70     00 1E 06 C6 |  if_b	mov	local01, #0
22c74     01 1E 06 36 |  if_ae	mov	local01, #1
22c78     0F FB 01 F6 | 	mov	result1, local01
22c7c                 | LR__3980
22c7c     A7 F0 03 F6 | 	mov	ptra, fp
22c80     B2 00 A0 FD | 	call	#popregs_
22c84                 | __struct__s_vfs_file_t_putchar_ret
22c84     2D 00 64 FD | 	ret
22c88                 | 
22c88                 | __struct__s_vfs_file_t_getchar
22c88     03 4A 05 F6 | 	mov	COUNT_, #3
22c8c     A8 00 A0 FD | 	call	#pushregs_
22c90     20 E4 05 F1 | 	add	objptr, #32
22c94     F2 12 0A FB | 	rdlong	arg01, objptr wz
22c98     20 E4 85 F1 | 	sub	objptr, #32
22c9c     01 FA 65 A6 |  if_e	neg	result1, #1
22ca0     38 00 90 AD |  if_e	jmp	#LR__3990
22ca4                 | '     return getcf(__this);
22ca4     20 E4 05 F1 | 	add	objptr, #32
22ca8     F2 1E 02 FB | 	rdlong	local01, objptr
22cac     0F 21 02 F6 | 	mov	local02, local01
22cb0     20 E4 85 F1 | 	sub	objptr, #32
22cb4     13 20 46 F7 | 	zerox	local02, #19
22cb8     14 1E 46 F0 | 	shr	local01, #20
22cbc     02 1E 66 F0 | 	shl	local01, #2
22cc0     ED 1E 02 F1 | 	add	local01, __methods__
22cc4     0F 1F 02 FB | 	rdlong	local01, local01
22cc8     F2 12 02 F6 | 	mov	arg01, objptr
22ccc     F2 22 02 F6 | 	mov	local03, objptr
22cd0     10 E5 01 F6 | 	mov	objptr, local02
22cd4     2D 1E 62 FD | 	call	local01
22cd8     11 E5 01 F6 | 	mov	objptr, local03
22cdc                 | LR__3990
22cdc     A7 F0 03 F6 | 	mov	ptra, fp
22ce0     B2 00 A0 FD | 	call	#popregs_
22ce4                 | __struct__s_vfs_file_t_getchar_ret
22ce4     2D 00 64 FD | 	ret
22ce8                 | 
22ce8                 | __struct___bas_wrap_sender_tx
22ce8     03 4A 05 F6 | 	mov	COUNT_, #3
22cec     A8 00 A0 FD | 	call	#pushregs_
22cf0     F2 1E 02 FB | 	rdlong	local01, objptr
22cf4     0F 21 02 F6 | 	mov	local02, local01
22cf8     13 1E 46 F7 | 	zerox	local01, #19
22cfc     14 20 46 F0 | 	shr	local02, #20
22d00     02 20 66 F0 | 	shl	local02, #2
22d04     ED 20 02 F1 | 	add	local02, __methods__
22d08     10 21 02 FB | 	rdlong	local02, local02
22d0c     F2 22 02 F6 | 	mov	local03, objptr
22d10     0F E5 01 F6 | 	mov	objptr, local01
22d14     2D 20 62 FD | 	call	local02
22d18     11 E5 01 F6 | 	mov	objptr, local03
22d1c     01 FA 05 F6 | 	mov	result1, #1
22d20     A7 F0 03 F6 | 	mov	ptra, fp
22d24     B2 00 A0 FD | 	call	#popregs_
22d28                 | __struct___bas_wrap_sender_tx_ret
22d28     2D 00 64 FD | 	ret
22d2c                 | 
22d2c                 | __struct___bas_wrap_sender_rx
22d2c     03 4A 05 F6 | 	mov	COUNT_, #3
22d30     A8 00 A0 FD | 	call	#pushregs_
22d34     04 E4 05 F1 | 	add	objptr, #4
22d38     F2 1E 02 FB | 	rdlong	local01, objptr
22d3c     0F 21 02 F6 | 	mov	local02, local01
22d40     04 E4 85 F1 | 	sub	objptr, #4
22d44     13 20 46 F7 | 	zerox	local02, #19
22d48     14 1E 46 F0 | 	shr	local01, #20
22d4c     02 1E 66 F0 | 	shl	local01, #2
22d50     ED 1E 02 F1 | 	add	local01, __methods__
22d54     0F 1F 02 FB | 	rdlong	local01, local01
22d58     F2 22 02 F6 | 	mov	local03, objptr
22d5c     10 E5 01 F6 | 	mov	objptr, local02
22d60     2D 1E 62 FD | 	call	local01
22d64     11 E5 01 F6 | 	mov	objptr, local03
22d68     A7 F0 03 F6 | 	mov	ptra, fp
22d6c     B2 00 A0 FD | 	call	#popregs_
22d70                 | __struct___bas_wrap_sender_rx_ret
22d70     2D 00 64 FD | 	ret
22d74                 | 
22d74                 | __struct___bas_wrap_sender_close
22d74     03 4A 05 F6 | 	mov	COUNT_, #3
22d78     A8 00 A0 FD | 	call	#pushregs_
22d7c     08 E4 05 F1 | 	add	objptr, #8
22d80     F2 1E 02 FB | 	rdlong	local01, objptr
22d84     0F 21 02 F6 | 	mov	local02, local01
22d88     08 E4 85 F1 | 	sub	objptr, #8
22d8c     13 20 46 F7 | 	zerox	local02, #19
22d90     14 1E 46 F0 | 	shr	local01, #20
22d94     02 1E 66 F0 | 	shl	local01, #2
22d98     ED 1E 02 F1 | 	add	local01, __methods__
22d9c     0F 1F 02 FB | 	rdlong	local01, local01
22da0     F2 22 02 F6 | 	mov	local03, objptr
22da4     10 E5 01 F6 | 	mov	objptr, local02
22da8     2D 1E 62 FD | 	call	local01
22dac     11 E5 01 F6 | 	mov	objptr, local03
22db0     A7 F0 03 F6 | 	mov	ptra, fp
22db4     B2 00 A0 FD | 	call	#popregs_
22db8                 | __struct___bas_wrap_sender_close_ret
22db8     2D 00 64 FD | 	ret
22dbc                 | 
22dbc                 | LR__4000
22dbc     2F          | 	byte	"/"
22dbd     00          | 	byte	0
22dbe                 | LR__4001
22dbe     69 6E 66    | 	byte	"inf"
22dc1     00          | 	byte	0
22dc2                 | LR__4002
22dc2     6E 61 6E    | 	byte	"nan"
22dc5     00          | 	byte	0
22dc6                 | LR__4003
22dc6                 | 	byte	
22dc6     00          | 	byte	0
22dc7                 | LR__4004
22dc7                 | 	byte	
22dc7     00          | 	byte	0
22dc8                 | LR__4005
22dc8                 | 	byte	
22dc8     00          | 	byte	0
22dc9                 | LR__4006
22dc9                 | 	byte	
22dc9     00          | 	byte	0
22dca                 | LR__4007
22dca                 | 	byte	
22dca     00          | 	byte	0
22dcb                 | LR__4008
22dcb                 | 	byte	
22dcb     00          | 	byte	0
22dcc                 | LR__4009
22dcc                 | 	byte	
22dcc     00          | 	byte	0
22dcd                 | LR__4010
22dcd                 | 	byte	
22dcd     00          | 	byte	0
22dce                 | LR__4011
22dce     00          | 	byte	0
22dcf     00          | 	byte	0
22dd0                 | LR__4012
22dd0     00          | 	byte	0
22dd1     00          | 	byte	0
22dd2                 | LR__4013
22dd2     00          | 	byte	0
22dd3     00          | 	byte	0
22dd4                 | LR__4014
22dd4     20 21 21 21 
22dd8     20 63 6F 72 
22ddc     72 75 70 74 
22de0     65 64 20 68 
22de4     65 61 70 3F 
22de8     3F 3F 20 21 
22dec     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
22def     00          | 	byte	0
22df0                 | LR__4015
22df0     20 21 21 21 
22df4     20 6F 75 74 
22df8     20 6F 66 20 
22dfc     68 65 61 70 
22e00     20 6D 65 6D 
22e04     6F 72 79 20 
22e08     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
22e0c     00          | 	byte	0
22e0d                 | LR__4016
22e0d     20 21 21 21 
22e11     20 63 6F 72 
22e15     72 75 70 74 
22e19     65 64 20 68 
22e1d     65 61 70 20 
22e21     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
22e25     00          | 	byte	0
22e26                 | LR__4017
22e26     00          | 	byte	0
22e27     00          | 	byte	0
22e28                 | LR__4018
22e28     2E          | 	byte	"."
22e29     00          | 	byte	0
22e2a                 | LR__4019
22e2a     00          | 	byte	0
22e2b     00          | 	byte	0
22e2c                 | LR__4020
22e2c     00          | 	byte	0
22e2d     00          | 	byte	0
22e2e                 | LR__4021
22e2e     00          | 	byte	0
22e2f     00          | 	byte	0
22e30                 | LR__4022
22e30     2A 3A 3C 3E 
22e34     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
22e38     00          | 	byte	0
22e39                 | LR__4023
22e39     2B 2C 3B 3D 
22e3d     5B 5D       | 	byte	"+,;=[]"
22e3f     00          | 	byte	0
22e40                 | LR__4024
22e40     46 41 54 33 
22e44     32 20 20 20 | 	byte	"FAT32   "
22e48     00          | 	byte	0
22e49                 | LR__4025
22e49     54 5A       | 	byte	"TZ"
22e4b     00          | 	byte	0
22e4c                 | LR__4026
22e4c     00          | 	byte	0
22e4d     00          | 	byte	0
22e4e                 | LR__4027
22e4e                 | 	byte	
22e4e     00          | 	byte	0
22e4f                 | LR__4028
22e4f                 | 	byte	
22e4f     00          | 	byte	0
22e50                 | LR__4029
22e50     3A          | 	byte	":"
22e51     00          | 	byte	0
22e52                 | LR__4030
22e52                 | 	byte	
22e52     00          | 	byte	0
22e53                 | LR__4031
22e53                 | 	byte	
22e53     00          | 	byte	0
22e54                 | LR__4032
22e54                 | 	byte	
22e54     00          | 	byte	0
22e55                 | LR__4033
22e55                 | 	byte	
22e55     00          | 	byte	0
22e56                 | LR__4034
22e56                 | 	byte	
22e56     00          | 	byte	0
22e57                 | LR__4035
22e57                 | 	byte	
22e57     00          | 	byte	0
22e58                 | LR__4036
22e58                 | 	byte	
22e58     00          | 	byte	0
22e59                 | LR__4037
22e59     22          | 	byte	34
22e5a     00          | 	byte	0
22e5b                 | LR__4038
22e5b     22          | 	byte	34
22e5c     00          | 	byte	0
22e5d                 | LR__4039
22e5d     22          | 	byte	34
22e5e     00          | 	byte	0
22e5f                 | LR__4040
22e5f     22          | 	byte	34
22e60     00          | 	byte	0
22e61                 | LR__4041
22e61     22          | 	byte	34
22e62     00          | 	byte	0
22e63                 | LR__4042
22e63     3E          | 	byte	">"
22e64     00          | 	byte	0
22e65                 | LR__4043
22e65     3E          | 	byte	">"
22e66     00          | 	byte	0
22e67                 | LR__4044
22e67     2B          | 	byte	"+"
22e68     00          | 	byte	0
22e69                 | LR__4045
22e69     2D          | 	byte	"-"
22e6a     00          | 	byte	0
22e6b                 | LR__4046
22e6b     2A          | 	byte	"*"
22e6c     00          | 	byte	0
22e6d                 | LR__4047
22e6d     2F          | 	byte	"/"
22e6e     00          | 	byte	0
22e6f                 | LR__4048
22e6f     5E          | 	byte	"^"
22e70     00          | 	byte	0
22e71                 | LR__4049
22e71     3D          | 	byte	"="
22e72     00          | 	byte	0
22e73                 | LR__4050
22e73     2B          | 	byte	"+"
22e74     00          | 	byte	0
22e75                 | LR__4051
22e75     2B          | 	byte	"+"
22e76     00          | 	byte	0
22e77                 | LR__4052
22e77     2D          | 	byte	"-"
22e78     00          | 	byte	0
22e79                 | LR__4053
22e79     2D          | 	byte	"-"
22e7a     00          | 	byte	0
22e7b                 | LR__4054
22e7b     3C          | 	byte	"<"
22e7c     00          | 	byte	0
22e7d                 | LR__4055
22e7d     3E          | 	byte	">"
22e7e     00          | 	byte	0
22e7f                 | LR__4056
22e7f     22          | 	byte	34
22e80     00          | 	byte	0
22e81                 | LR__4057
22e81     22          | 	byte	34
22e82     00          | 	byte	0
22e83                 | LR__4058
22e83                 | 	byte	
22e83     00          | 	byte	0
22e84                 | LR__4059
22e84     6C 6F 61 64 | 	byte	"load"
22e88     00          | 	byte	0
22e89                 | LR__4060
22e89     73 61 76 65 | 	byte	"save"
22e8d     00          | 	byte	0
22e8e                 | LR__4061
22e8e     62 72 75 6E | 	byte	"brun"
22e92     00          | 	byte	0
22e93                 | LR__4062
22e93     6D 6F 75 73 
22e97     65          | 	byte	"mouse"
22e98     00          | 	byte	0
22e99                 | LR__4063
22e99     63 75 72 73 
22e9d     6F 72       | 	byte	"cursor"
22e9f     00          | 	byte	0
22ea0                 | LR__4064
22ea0     63 6C 69 63 
22ea4     6B          | 	byte	"click"
22ea5     00          | 	byte	0
22ea6                 | LR__4065
22ea6     6F 6E       | 	byte	"on"
22ea8     00          | 	byte	0
22ea9                 | LR__4066
22ea9     31          | 	byte	"1"
22eaa     00          | 	byte	0
22eab                 | LR__4067
22eab     6F 66 66    | 	byte	"off"
22eae     00          | 	byte	0
22eaf                 | LR__4068
22eaf     30          | 	byte	"0"
22eb0     00          | 	byte	0
22eb1                 | LR__4069
22eb1                 | 	byte	
22eb1     00          | 	byte	0
22eb2                 | LR__4070
22eb2                 | 	byte	
22eb2     00          | 	byte	0
22eb3                 | LR__4071
22eb3                 | 	byte	
22eb3     00          | 	byte	0
22eb4                 | LR__4072
22eb4                 | 	byte	
22eb4     00          | 	byte	0
22eb5                 | LR__4073
22eb5     20 55 73 65 
22eb9     72 20 66 75 
22ebd     6E 63 74 69 
22ec1     6F 6E 73 20 
22ec5     61 6E 64 20 
22ec9     61 72 72 61 
22ecd     79 73 20 6E 
22ed1     6F 74 20 79 
22ed5     65 74 20 69 
22ed9     6D 70 6C 65 
22edd     6D 65 6E 74 
22ee1     65 64       | 	byte	" User functions and arrays not yet implemented"
22ee3     00          | 	byte	0
22ee4                 | LR__4074
22ee4                 | 	byte	
22ee4     00          | 	byte	0
22ee5                 | LR__4075
22ee5                 | 	byte	
22ee5     00          | 	byte	0
22ee6                 | LR__4076
22ee6     52 65 61 64 
22eea     79          | 	byte	"Ready"
22eeb     00          | 	byte	0
22eec                 | LR__4077
22eec     2B          | 	byte	"+"
22eed     00          | 	byte	0
22eee                 | LR__4078
22eee     2D          | 	byte	"-"
22eef     00          | 	byte	0
22ef0                 | LR__4079
22ef0     6F 72       | 	byte	"or"
22ef2     00          | 	byte	0
22ef3                 | LR__4080
22ef3     78 6F 72    | 	byte	"xor"
22ef6     00          | 	byte	0
22ef7                 | LR__4081
22ef7     2A          | 	byte	"*"
22ef8     00          | 	byte	0
22ef9                 | LR__4082
22ef9     2F          | 	byte	"/"
22efa     00          | 	byte	0
22efb                 | LR__4083
22efb     61 6E 64    | 	byte	"and"
22efe     00          | 	byte	0
22eff                 | LR__4084
22eff     64 69 76    | 	byte	"div"
22f02     00          | 	byte	0
22f03                 | LR__4085
22f03     6D 6F 64    | 	byte	"mod"
22f06     00          | 	byte	0
22f07                 | LR__4086
22f07     73 68 6C    | 	byte	"shl"
22f0a     00          | 	byte	0
22f0b                 | LR__4087
22f0b     73 68 72    | 	byte	"shr"
22f0e     00          | 	byte	0
22f0f                 | LR__4088
22f0f     5E          | 	byte	"^"
22f10     00          | 	byte	0
22f11                 | LR__4089
22f11     6E 6F 74    | 	byte	"not"
22f14     00          | 	byte	0
22f15                 | LR__4090
22f15     40          | 	byte	"@"
22f16     00          | 	byte	0
22f17                 | LR__4091
22f17     3D          | 	byte	"="
22f18     00          | 	byte	0
22f19                 | LR__4092
22f19     3E 3D       | 	byte	">="
22f1b     00          | 	byte	0
22f1c                 | LR__4093
22f1c     3C 3D       | 	byte	"<="
22f1e     00          | 	byte	0
22f1f                 | LR__4094
22f1f     3C          | 	byte	"<"
22f20     00          | 	byte	0
22f21                 | LR__4095
22f21     3E          | 	byte	">"
22f22     00          | 	byte	0
22f23                 | LR__4096
22f23     3C 3E       | 	byte	"<>"
22f25     00          | 	byte	0
22f26                 | LR__4097
22f26     2B 2B       | 	byte	"++"
22f28     00          | 	byte	0
22f29                 | LR__4098
22f29     2D 2D       | 	byte	"--"
22f2b     00          | 	byte	0
22f2c                 | LR__4099
22f2c     2B          | 	byte	"+"
22f2d     00          | 	byte	0
22f2e                 | LR__4100
22f2e     2D          | 	byte	"-"
22f2f     00          | 	byte	0
22f30                 | LR__4101
22f30     3D          | 	byte	"="
22f31     00          | 	byte	0
22f32                 | LR__4102
22f32     2C          | 	byte	","
22f33     00          | 	byte	0
22f34                 | LR__4103
22f34     2A          | 	byte	"*"
22f35     00          | 	byte	0
22f36                 | LR__4104
22f36     2F          | 	byte	"/"
22f37     00          | 	byte	0
22f38                 | LR__4105
22f38     3B          | 	byte	";"
22f39     00          | 	byte	0
22f3a                 | LR__4106
22f3a     22          | 	byte	34
22f3b     00          | 	byte	0
22f3c                 | LR__4107
22f3c     5E          | 	byte	"^"
22f3d     00          | 	byte	0
22f3e                 | LR__4108
22f3e     29          | 	byte	")"
22f3f     00          | 	byte	0
22f40                 | LR__4109
22f40     28          | 	byte	"("
22f41     00          | 	byte	0
22f42                 | LR__4110
22f42     3A          | 	byte	":"
22f43     00          | 	byte	0
22f44                 | LR__4111
22f44     20          | 	byte	" "
22f45     00          | 	byte	0
22f46                 | LR__4112
22f46     3E          | 	byte	">"
22f47     00          | 	byte	0
22f48                 | LR__4113
22f48     3C          | 	byte	"<"
22f49     00          | 	byte	0
22f4a                 | LR__4114
22f4a     3D          | 	byte	"="
22f4b     00          | 	byte	0
22f4c                 | LR__4115
22f4c     63 6C 73    | 	byte	"cls"
22f4f     00          | 	byte	0
22f50                 | LR__4116
22f50     6E 65 77    | 	byte	"new"
22f53     00          | 	byte	0
22f54                 | LR__4117
22f54     70 6C 6F 74 | 	byte	"plot"
22f58     00          | 	byte	0
22f59                 | LR__4118
22f59     64 72 61 77 | 	byte	"draw"
22f5d     00          | 	byte	0
22f5e                 | LR__4119
22f5e     70 72 69 6E 
22f62     74          | 	byte	"print"
22f63     00          | 	byte	0
22f64                 | LR__4120
22f64     63 69 72 63 
22f68     6C 65       | 	byte	"circle"
22f6a     00          | 	byte	0
22f6b                 | LR__4121
22f6b     66 63 69 72 
22f6f     63 6C 65    | 	byte	"fcircle"
22f72     00          | 	byte	0
22f73                 | LR__4122
22f73     62 6F 78    | 	byte	"box"
22f76     00          | 	byte	0
22f77                 | LR__4123
22f77     66 72 61 6D 
22f7b     65          | 	byte	"frame"
22f7c     00          | 	byte	0
22f7d                 | LR__4124
22f7d     63 6F 6C 6F 
22f81     72          | 	byte	"color"
22f82     00          | 	byte	0
22f83                 | LR__4125
22f83     70 72 69 6E 
22f87     74          | 	byte	"print"
22f88     00          | 	byte	0
22f89                 | LR__4126
22f89     6C 69 73 74 | 	byte	"list"
22f8d     00          | 	byte	0
22f8e                 | LR__4127
22f8e     72 75 6E    | 	byte	"run"
22f91     00          | 	byte	0
22f92                 | LR__4128
22f92     67 6F 74 6F | 	byte	"goto"
22f96     00          | 	byte	0
22f97                 | LR__4129
22f97     63 73 61 76 
22f9b     65          | 	byte	"csave"
22f9c     00          | 	byte	0
22f9d                 | LR__4130
22f9d     73 61 76 65 | 	byte	"save"
22fa1     00          | 	byte	0
22fa2                 | LR__4131
22fa2     6C 6F 61 64 | 	byte	"load"
22fa6     00          | 	byte	0
22fa7                 | LR__4132
22fa7     62 72 75 6E | 	byte	"brun"
22fab     00          | 	byte	0
22fac                 | LR__4133
22fac     70 69 6E 77 
22fb0     72 69 74 65 | 	byte	"pinwrite"
22fb4     00          | 	byte	0
22fb5                 | LR__4134
22fb5     77 61 69 74 
22fb9     6D 73       | 	byte	"waitms"
22fbb     00          | 	byte	0
22fbc                 | LR__4135
22fbc     77 61 69 74 
22fc0     76 62 6C    | 	byte	"waitvbl"
22fc3     00          | 	byte	0
22fc4                 | LR__4136
22fc4     69 66       | 	byte	"if"
22fc6     00          | 	byte	0
22fc7                 | LR__4137
22fc7     65 6C 73 65 | 	byte	"else"
22fcb     00          | 	byte	0
22fcc                 | LR__4138
22fcc     74 68 65 6E | 	byte	"then"
22fd0     00          | 	byte	0
22fd1                 | LR__4139
22fd1     62 65 65 70 | 	byte	"beep"
22fd5     00          | 	byte	0
22fd6                 | LR__4140
22fd6     64 69 72    | 	byte	"dir"
22fd9     00          | 	byte	0
22fda                 | LR__4141
22fda     66 6F 72    | 	byte	"for"
22fdd     00          | 	byte	0
22fde                 | LR__4142
22fde     6E 65 78 74 | 	byte	"next"
22fe2     00          | 	byte	0
22fe3                 | LR__4143
22fe3     70 61 70 65 
22fe7     72          | 	byte	"paper"
22fe8     00          | 	byte	0
22fe9                 | LR__4144
22fe9     69 6E 6B    | 	byte	"ink"
22fec     00          | 	byte	0
22fed                 | LR__4145
22fed     66 6F 6E 74 | 	byte	"font"
22ff1     00          | 	byte	0
22ff2                 | LR__4146
22ff2     6D 6F 64 65 | 	byte	"mode"
22ff6     00          | 	byte	0
22ff7                 | LR__4147
22ff7     6D 6F 75 73 
22ffb     65          | 	byte	"mouse"
22ffc     00          | 	byte	0
22ffd                 | LR__4148
22ffd     63 75 72 73 
23001     6F 72       | 	byte	"cursor"
23003     00          | 	byte	0
23004                 | LR__4149
23004     63 6C 69 63 
23008     6B          | 	byte	"click"
23009     00          | 	byte	0
2300a                 | LR__4150
2300a     64 65 66 73 
2300e     70 72 69 74 
23012     65          | 	byte	"defsprite"
23013     00          | 	byte	0
23014                 | LR__4151
23014     73 70 72 69 
23018     74 65       | 	byte	"sprite"
2301a     00          | 	byte	0
2301b                 | LR__4152
2301b     77 61 69 74 
2301f     63 6C 6F 63 
23023     6B          | 	byte	"waitclock"
23024     00          | 	byte	0
23025                 | LR__4153
23025     66 69 6C 6C | 	byte	"fill"
23029     00          | 	byte	0
2302a                 | LR__4154
2302a     64 69 6D    | 	byte	"dim"
2302d     00          | 	byte	0
2302e                 | LR__4155
2302e     72 6E 64    | 	byte	"rnd"
23031     00          | 	byte	0
23032                 | LR__4156
23032     6D 6F 75 73 
23036     65 78       | 	byte	"mousex"
23038     00          | 	byte	0
23039                 | LR__4157
23039     6D 6F 75 73 
2303d     65 79       | 	byte	"mousey"
2303f     00          | 	byte	0
23040                 | LR__4158
23040     6D 6F 75 73 
23044     65 6B       | 	byte	"mousek"
23046     00          | 	byte	0
23047                 | LR__4159
23047     6D 6F 75 73 
2304b     65 77       | 	byte	"mousew"
2304d     00          | 	byte	0
2304e                 | LR__4160
2304e     67 65 74 74 
23052     69 6D 65    | 	byte	"gettime"
23055     00          | 	byte	0
23056                 | LR__4161
23056     73 69 6E    | 	byte	"sin"
23059     00          | 	byte	0
2305a                 | LR__4162
2305a     73 74 69 63 
2305e     6B          | 	byte	"stick"
2305f     00          | 	byte	0
23060                 | LR__4163
23060     73 74 72 69 
23064     67          | 	byte	"strig"
23065     00          | 	byte	0
23066                 | LR__4164
23066     67 65 74 70 
2306a     69 78 65 6C | 	byte	"getpixel"
2306e     00          | 	byte	0
2306f                 | LR__4165
2306f     61          | 	byte	"a"
23070     00          | 	byte	0
23071                 | LR__4166
23071     7A          | 	byte	"z"
23072     00          | 	byte	0
23073                 | LR__4167
23073     5F          | 	byte	"_"
23074     00          | 	byte	0
23075                 | LR__4168
23075     61          | 	byte	"a"
23076     00          | 	byte	0
23077                 | LR__4169
23077     7A          | 	byte	"z"
23078     00          | 	byte	0
23079                 | LR__4170
23079     30          | 	byte	"0"
2307a     00          | 	byte	0
2307b                 | LR__4171
2307b     39          | 	byte	"9"
2307c     00          | 	byte	0
2307d                 | LR__4172
2307d     5F          | 	byte	"_"
2307e     00          | 	byte	0
2307f                 | LR__4173
2307f     2E          | 	byte	"."
23080     00          | 	byte	0
23081                 | LR__4174
23081     61          | 	byte	"a"
23082     00          | 	byte	0
23083                 | LR__4175
23083     7A          | 	byte	"z"
23084     00          | 	byte	0
23085                 | LR__4176
23085     30          | 	byte	"0"
23086     00          | 	byte	0
23087                 | LR__4177
23087     39          | 	byte	"9"
23088     00          | 	byte	0
23089                 | LR__4178
23089     5F          | 	byte	"_"
2308a     00          | 	byte	0
2308b                 | LR__4179
2308b     24          | 	byte	"$"
2308c     00          | 	byte	0
2308d                 | LR__4180
2308d     25          | 	byte	"%"
2308e     00          | 	byte	0
2308f                 | LR__4181
2308f     21          | 	byte	"!"
23090     00          | 	byte	0
23091                 | LR__4182
23091     30          | 	byte	"0"
23092     00          | 	byte	0
23093                 | LR__4183
23093     39          | 	byte	"9"
23094     00          | 	byte	0
23095                 | LR__4184
23095     2E          | 	byte	"."
23096     00          | 	byte	0
23097                 | LR__4185
23097     24          | 	byte	"$"
23098     00          | 	byte	0
23099                 | LR__4186
23099     25          | 	byte	"%"
2309a     00          | 	byte	0
2309b                 | LR__4187
2309b     2D          | 	byte	"-"
2309c     00          | 	byte	0
2309d                 | LR__4188
2309d     2E          | 	byte	"."
2309e     00          | 	byte	0
2309f                 | LR__4189
2309f     30          | 	byte	"0"
230a0     00          | 	byte	0
230a1                 | LR__4190
230a1     39          | 	byte	"9"
230a2     00          | 	byte	0
230a3                 | LR__4191
230a3     5F          | 	byte	"_"
230a4     00          | 	byte	0
230a5                 | LR__4192
230a5     2E          | 	byte	"."
230a6     00          | 	byte	0
230a7                 | LR__4193
230a7     45          | 	byte	"E"
230a8     00          | 	byte	0
230a9                 | LR__4194
230a9     65          | 	byte	"e"
230aa     00          | 	byte	0
230ab                 | LR__4195
230ab     2D          | 	byte	"-"
230ac     00          | 	byte	0
230ad                 | LR__4196
230ad     2D          | 	byte	"-"
230ae     00          | 	byte	0
230af                 | LR__4197
230af     65          | 	byte	"e"
230b0     00          | 	byte	0
230b1                 | LR__4198
230b1     2E          | 	byte	"."
230b2     00          | 	byte	0
230b3                 | LR__4199
230b3     45          | 	byte	"E"
230b4     00          | 	byte	0
230b5                 | LR__4200
230b5     65          | 	byte	"e"
230b6     00          | 	byte	0
230b7                 | LR__4201
230b7     30          | 	byte	"0"
230b8     00          | 	byte	0
230b9                 | LR__4202
230b9     39          | 	byte	"9"
230ba     00          | 	byte	0
230bb                 | LR__4203
230bb     24          | 	byte	"$"
230bc     00          | 	byte	0
230bd                 | LR__4204
230bd     25          | 	byte	"%"
230be     00          | 	byte	0
230bf                 | LR__4205
230bf     2D          | 	byte	"-"
230c0     00          | 	byte	0
230c1                 | LR__4206
230c1     30          | 	byte	"0"
230c2     00          | 	byte	0
230c3                 | LR__4207
230c3     39          | 	byte	"9"
230c4     00          | 	byte	0
230c5                 | LR__4208
230c5     5F          | 	byte	"_"
230c6     00          | 	byte	0
230c7                 | LR__4209
230c7     30          | 	byte	"0"
230c8     00          | 	byte	0
230c9                 | LR__4210
230c9     39          | 	byte	"9"
230ca     00          | 	byte	0
230cb                 | LR__4211
230cb     5F          | 	byte	"_"
230cc     00          | 	byte	0
230cd                 | LR__4212
230cd     22          | 	byte	34
230ce     00          | 	byte	0
230cf                 | LR__4213
230cf     22          | 	byte	34
230d0     00          | 	byte	0
230d1                 | LR__4214
230d1     28          | 	byte	"("
230d2     00          | 	byte	0
230d3                 | LR__4215
230d3     2C          | 	byte	","
230d4     00          | 	byte	0
230d5                 | LR__4216
230d5     29          | 	byte	")"
230d6     00          | 	byte	0
230d7                 | LR__4217
230d7     29          | 	byte	")"
230d8     00          | 	byte	0
230d9                 | LR__4218
230d9     74 6F       | 	byte	"to"
230db     00          | 	byte	0
230dc                 | LR__4219
230dc     73 74 65 70 | 	byte	"step"
230e0     00          | 	byte	0
230e1                 | LR__4220
230e1     57 65 20 68 
230e5     61 76 65 20 
230e9     61 20 73 6C 
230ed     6F 77 20 67 
230f1     6F 74 6F 2C 
230f5     20 74 6F 64 
230f9     6F 20 20    | 	byte	"We have a slow goto, todo  "
230fc     00          | 	byte	0
230fd                 | LR__4221
230fd     6E 6F 6E 61 
23101     6D 65 2E 62 
23105     61 73       | 	byte	"noname.bas"
23107     00          | 	byte	0
23108                 | LR__4222
23108                 | 	byte	
23108     00          | 	byte	0
23109                 | LR__4223
23109     6E 6F 6E 61 
2310d     6D 65 2E 62 
23111     61 73       | 	byte	"noname.bas"
23113     00          | 	byte	0
23114                 | LR__4224
23114     2F          | 	byte	"/"
23115     00          | 	byte	0
23116                 | LR__4225
23116                 | 	byte	
23116     00          | 	byte	0
23117                 | LR__4226
23117     6E 6F 6E 61 
2311b     6D 65 2E 62 
2311f     61 73       | 	byte	"noname.bas"
23121     00          | 	byte	0
23122                 | LR__4227
23122     2F          | 	byte	"/"
23123     00          | 	byte	0
23124                 | LR__4228
23124     53 79 73 74 
23128     65 6D 20 65 
2312c     72 72 6F 72 
23130     20          | 	byte	"System error "
23131     00          | 	byte	0
23132                 | LR__4229
23132     3A 20       | 	byte	": "
23134     00          | 	byte	0
23135                 | LR__4230
23135     53 74 6F 70 
23139     70 65 64 20 
2313d     61 74 20 6C 
23141     69 6E 65 20 | 	byte	"Stopped at line "
23145     00          | 	byte	0
23146                 | LR__4231
23146     45 72 72 6F 
2314a     72 20       | 	byte	"Error "
2314c     00          | 	byte	0
2314d                 | LR__4232
2314d     3A 20       | 	byte	": "
2314f     00          | 	byte	0
23150                 | LR__4233
23150     72 6E 64 3A 
23154     20          | 	byte	"rnd: "
23155     00          | 	byte	0
23156                 | LR__4234
23156     72 6E 64 3A 
2315a     20          | 	byte	"rnd: "
2315b     00          | 	byte	0
2315c                 | LR__4235
2315c     73 69 6E 3A 
23160     20          | 	byte	"sin: "
23161     00          | 	byte	0
23162                 | LR__4236
23162     73 69 6E 3A 
23166     20          | 	byte	"sin: "
23167     00          | 	byte	0
23168                 | LR__4237
23168     73 74 69 63 
2316c     6B 3A 20    | 	byte	"stick: "
2316f     00          | 	byte	0
23170                 | LR__4238
23170     73 74 72 69 
23174     67 3A 20    | 	byte	"strig: "
23177     00          | 	byte	0
23178                 | LR__4239
23178     67 65 74 70 
2317c     69 78 65 6C 
23180     3A 20       | 	byte	"getpixel: "
23182     00          | 	byte	0
23183                 | LR__4240
23183                 | 	byte	
23183     00          | 	byte	0
23184                 | LR__4241
23184     2F 73 64 2F 
23188     62 61 73    | 	byte	"/sd/bas"
2318b     00          | 	byte	0
2318c                 | LR__4242
2318c     57 6F 72 6B 
23190     69 6E 67 20 
23194     64 69 72 65 
23198     63 74 6F 72 
2319c     79 3A 20    | 	byte	"Working directory: "
2319f     00          | 	byte	0
231a0                 | LR__4243
231a0     2A          | 	byte	"*"
231a1     00          | 	byte	0
231a2                 | LR__4244
231a2                 | 	byte	
231a2     00          | 	byte	0
231a3                 | LR__4245
231a3     5B 64 69 72 
231a7     5D 20       | 	byte	"[dir] "
231a9     00          | 	byte	0
231aa                 | LR__4246
231aa     2A          | 	byte	"*"
231ab     00          | 	byte	0
231ac                 | LR__4247
231ac                 | 	byte	
231ac     00          | 	byte	0
231ad                 | LR__4248
231ad     2D 2D 2D 2D 
231b1     2D 6D 6F 72 
231b5     65 2C 20 70 
231b9     72 65 73 73 
231bd     20 61 6E 79 
231c1     20 6B 65 79 | 	byte	"-----more, press any key"
231c5     00          | 	byte	0
231c6                 | LR__4249
231c6     20 20 20 20 
      ...             
231de     20 20 20 20 
231e2     20          | 	byte	"                             "
231e3     00          | 	byte	0
231e4                 | LR__4250
231e4     2F          | 	byte	"/"
231e5     00          | 	byte	0
231e6                 | LR__4251
231e6     2F 73 64 2F 
231ea     62 69 6E 2F | 	byte	"/sd/bin/"
231ee     00          | 	byte	0
231ef                 | LR__4252
231ef     53 79 73 74 
231f3     65 6D 20 65 
231f7     72 72 6F 72 
231fb     20          | 	byte	"System error "
231fc     00          | 	byte	0
231fd                 | LR__4253
231fd     3A 20       | 	byte	": "
231ff     00          | 	byte	0
23200                 | LR__4254
23200                 | 	byte	
23200     00          | 	byte	0
23201                 | LR__4255
23201     45 78 70 65 
23205     63 74 65 64 
23209     20 6E 75 6D 
2320d     62 65 72 2C 
23211     20 67 6F 74 
23215     20 73 6F 6D 
23219     65 74 68 69 
2321d     6E 67 20 65 
23221     6C 73 65 2E | 	byte	"Expected number, got something else."
23225     00          | 	byte	0
23226                 | LR__4256
23226     43 61 6E 6E 
2322a     6F 74 20 61 
2322e     64 64 20 61 
23232     20 6E 75 6D 
23236     62 65 72 20 
2323a     74 6F 20 61 
2323e     20 73 74 72 
23242     69 6E 67 2E | 	byte	"Cannot add a number to a string."
23246     00          | 	byte	0
23247                 | LR__4257
23247     43 61 6E 6E 
2324b     6F 74 20 73 
2324f     75 62 73 74 
23253     72 61 63 74 
23257     20 73 74 72 
2325b     69 6E 67 73 
2325f     2E          | 	byte	"Cannot substract strings."
23260     00          | 	byte	0
23261                 | LR__4258
23261     55 6E 6B 6E 
23265     6F 77 6E 20 
23269     65 72 72 6F 
2326d     72 20 77 68 
23271     69 6C 65 20 
23275     61 64 64 69 
23279     6E 67 2E    | 	byte	"Unknown error while adding."
2327c     00          | 	byte	0
2327d                 | LR__4259
2327d     55 6E 6B 6E 
23281     6F 77 6E 20 
23285     65 72 72 6F 
23289     72 20 77 68 
2328d     69 6C 65 20 
23291     73 75 62 73 
23295     74 72 61 63 
23299     74 69 6E 67 
2329d     2E          | 	byte	"Unknown error while substracting."
2329e     00          | 	byte	0
2329f                 | LR__4260
2329f     43 61 6E 6E 
232a3     6F 74 20 64 
232a7     6F 20 6C 6F 
232ab     67 69 63 20 
232af     6F 70 65 72 
232b3     61 74 69 6F 
232b7     6E 20 6F 6E 
232bb     20 73 74 72 
232bf     69 6E 67 20 
232c3     6F 72 20 66 
232c7     6C 6F 61 74 
232cb     2E          | 	byte	"Cannot do logic operation on string or float."
232cc     00          | 	byte	0
232cd                 | LR__4261
232cd     55 6E 6B 6E 
232d1     6F 77 6E 20 
232d5     65 72 72 6F 
232d9     72 20 77 68 
232dd     69 6C 65 20 
232e1     64 6F 69 6E 
232e5     67 20 6C 6F 
232e9     67 69 63 20 
232ed     6F 70 65 72 
232f1     61 74 69 6F 
232f5     6E 2E       | 	byte	"Unknown error while doing logic operation."
232f7     00          | 	byte	0
232f8                 | LR__4262
232f8     43 61 6E 6E 
232fc     6F 74 20 6D 
23300     75 6C 74 69 
23304     70 6C 79 20 
23308     73 74 72 69 
2330c     6E 67 73 2E | 	byte	"Cannot multiply strings."
23310     00          | 	byte	0
23311                 | LR__4263
23311     55 6E 6B 6E 
23315     6F 77 6E 20 
23319     65 72 72 6F 
2331d     72 20 77 68 
23321     69 6C 65 20 
23325     6D 75 6C 74 
23329     69 70 6C 79 
2332d     69 6E 67 2E | 	byte	"Unknown error while multiplying."
23331     00          | 	byte	0
23332                 | LR__4264
23332     43 61 6E 6E 
23336     6F 74 20 64 
2333a     69 76 69 64 
2333e     65 20 73 74 
23342     72 69 6E 67 
23346     73 2E       | 	byte	"Cannot divide strings."
23348     00          | 	byte	0
23349                 | LR__4265
23349     55 6E 6B 6E 
2334d     6F 77 6E 20 
23351     65 72 72 6F 
23355     72 20 77 68 
23359     69 6C 65 20 
2335d     64 69 76 69 
23361     64 69 6E 67 
23365     2E          | 	byte	"Unknown error while dividing."
23366     00          | 	byte	0
23367                 | LR__4266
23367     43 61 6E 6E 
2336b     6F 74 20 63 
2336f     6F 6D 70 75 
23373     74 65 20 61 
23377     20 70 6F 77 
2337b     65 72 20 6F 
2337f     66 20 61 20 
23383     73 74 72 69 
23387     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2338a     00          | 	byte	0
2338b                 | LR__4267
2338b     55 6E 6B 6E 
2338f     6F 77 6E 20 
23393     65 72 72 6F 
23397     72 20 77 68 
2339b     69 6C 65 20 
2339f     63 6F 6D 70 
233a3     75 74 69 6E 
233a7     67 20 61 20 
233ab     70 6F 77 65 
233af     72 2E       | 	byte	"Unknown error while computing a power."
233b1     00          | 	byte	0
233b2                 | LR__4268
233b2     52 69 67 68 
233b6     74 20 70 61 
233ba     72 65 6E 74 
233be     68 65 73 69 
233c2     73 20 65 78 
233c6     70 65 63 74 
233ca     65 64 2E    | 	byte	"Right parenthesis expected."
233cd     00          | 	byte	0
233ce                 | LR__4269
233ce     45 78 70 65 
233d2     63 74 65 64 
233d6     20 73 74 72 
233da     69 6E 67 2E | 	byte	"Expected string."
233de     00          | 	byte	0
233df                 | LR__4270
233df     45 78 70 65 
233e3     63 74 65 64 
233e7     20 66 6C 6F 
233eb     61 74 2E    | 	byte	"Expected float."
233ee     00          | 	byte	0
233ef                 | LR__4271
233ef     45 78 70 65 
233f3     63 74 65 64 
233f7     20 75 6E 73 
233fb     69 67 6E 65 
233ff     64 20 69 6E 
23403     74 65 67 65 
23407     72 2E       | 	byte	"Expected unsigned integer."
23409     00          | 	byte	0
2340a                 | LR__4272
2340a     45 78 70 65 
2340e     63 74 65 64 
23412     20 69 6E 74 
23416     65 67 65 72 
2341a     2E          | 	byte	"Expected integer."
2341b     00          | 	byte	0
2341c                 | LR__4273
2341c     4E 6F 20 6D 
23420     6F 72 65 20 
23424     76 61 72 69 
23428     61 62 6C 65 
2342c     20 73 6C 6F 
23430     74 73 2E    | 	byte	"No more variable slots."
23433     00          | 	byte	0
23434                 | LR__4274
23434     56 61 72 69 
23438     61 62 6C 65 
2343c     20 6E 6F 74 
23440     20 66 6F 75 
23444     6E 64 2E    | 	byte	"Variable not found."
23447     00          | 	byte	0
23448                 | LR__4275
23448     43 6F 6D 6D 
2344c     61 20 65 78 
23450     70 65 63 74 
23454     65 64 2E    | 	byte	"Comma expected."
23457     00          | 	byte	0
23458                 | LR__4276
23458     43 6F 6D 6D 
2345c     61 20 6F 72 
23460     20 73 65 6D 
23464     69 63 6F 6C 
23468     6F 6E 20 65 
2346c     78 70 65 63 
23470     74 65 64 2E | 	byte	"Comma or semicolon expected."
23474     00          | 	byte	0
23475                 | LR__4277
23475     55 6E 6B 6E 
23479     6F 77 6E 20 
2347d     63 6F 6D 6D 
23481     61 6E 64 2E | 	byte	"Unknown command."
23485     00          | 	byte	0
23486                 | LR__4278
23486     53 74 61 63 
2348a     6B 20 75 6E 
2348e     64 65 72 66 
23492     6C 6F 77 2E | 	byte	"Stack underflow."
23496     00          | 	byte	0
23497                 | LR__4279
23497     43 61 6E 6E 
2349b     6F 74 20 65 
2349f     78 65 63 75 
234a3     74 65 20 67 
234a7     6F 74 6F 20 
234ab     69 6E 20 74 
234af     68 65 20 69 
234b3     6D 6D 65 64 
234b7     69 61 74 65 
234bb     20 6D 6F 64 
234bf     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
234c1     00          | 	byte	0
234c2                 | LR__4280
234c2     43 61 6E 6E 
234c6     6F 74 20 6C 
234ca     6F 61 64 20 
234ce     66 72 6F 6D 
234d2     20 74 68 69 
234d6     73 20 66 69 
234da     6C 65 2E    | 	byte	"Cannot load from this file."
234dd     00          | 	byte	0
234de                 | LR__4281
234de     54 68 65 20 
234e2     70 72 6F 67 
234e6     72 61 6D 20 
234ea     69 73 20 65 
234ee     6D 70 74 79 
234f2     2E          | 	byte	"The program is empty."
234f3     00          | 	byte	0
234f4                 | LR__4282
234f4     49 66 20 61 
234f8     66 74 65 72 
234fc     20 69 66 2E | 	byte	"If after if."
23500     00          | 	byte	0
23501                 | LR__4283
23501     45 6D 70 74 
23505     79 20 65 78 
23509     70 72 65 73 
2350d     73 69 6F 6E 
23511     2E          | 	byte	"Empty expression."
23512     00          | 	byte	0
23513                 | LR__4284
23513     53 74 72 69 
23517     6E 67 20 65 
2351b     78 70 65 63 
2351f     74 65 64 2E | 	byte	"String expected."
23523     00          | 	byte	0
23524                 | LR__4285
23524     49 6E 74 65 
23528     72 70 72 65 
2352c     74 65 72 20 
23530     69 6E 74 65 
23534     72 6E 61 6C 
23538     20 65 72 72 
2353c     6F 72 2E    | 	byte	"Interpreter internal error."
2353f     00          | 	byte	0
23540                 | LR__4286
23540     45 78 70 65 
23544     63 74 65 64 
23548     20 61 73 73 
2354c     69 67 6E 2E | 	byte	"Expected assign."
23550     00          | 	byte	0
23551                 | LR__4287
23551     45 78 70 65 
23555     63 74 65 64 
23559     20 27 74 6F 
2355d     27 2E       | 	byte	"Expected 'to'."
2355f     00          | 	byte	0
23560                 | LR__4288
23560     45 78 70 65 
23564     63 74 65 64 
23568     20 69 6E 74 
2356c     65 67 65 72 
23570     20 76 61 72 
23574     69 61 62 6C 
23578     65 2E       | 	byte	"Expected integer variable."
2357a     00          | 	byte	0
2357b                 | LR__4289
2357b     55 6E 69 6E 
2357f     69 74 69 61 
23583     6C 69 7A 65 
23587     64 20 76 61 
2358b     72 69 61 62 
2358f     6C 65 20 69 
23593     6E 20 27 6E 
23597     65 78 74 27 
2359b     2C 20 75 73 
2359f     65 20 27 66 
235a3     6F 72 27 20 
235a7     62 65 66 6F 
235ab     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
235ae     00          | 	byte	0
235af                 | LR__4290
235af     4E 6F 20 6D 
235b3     6F 72 65 20 
235b7     73 6C 6F 74 
235bb     73 20 66 6F 
235bf     72 20 27 66 
235c3     6F 72 27 2E | 	byte	"No more slots for 'for'."
235c7     00          | 	byte	0
235c8                 | LR__4291
235c8     27 4E 65 78 
235cc     74 27 20 64 
235d0     6F 65 73 6E 
235d4     27 74 20 6D 
235d8     61 74 63 68 
235dc     20 27 66 6F 
235e0     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
235e3     00          | 	byte	0
235e4                 | LR__4292
235e4     27 47 6F 74 
235e8     6F 27 20 74 
235ec     61 72 67 65 
235f0     74 20 6C 69 
235f4     6E 65 20 6E 
235f8     6F 74 20 66 
235fc     6F 75 6E 64 
23600     2E          | 	byte	"'Goto' target line not found."
23601     00          | 	byte	0
23602                 | LR__4293
23602     42 61 64 20 
23606     6E 75 6D 62 
2360a     65 72 20 6F 
2360e     66 20 70 61 
23612     72 61 6D 65 
23616     74 65 72 73 | 	byte	"Bad number of parameters"
2361a     00          | 	byte	0
2361b                 | LR__4294
2361b     46 75 6E 63 
2361f     74 69 6F 6E 
23623     20 75 6E 64 
23627     65 66 69 6E 
2362b     65 64 20 66 
2362f     6F 72 20 73 
23633     74 72 69 6E 
23637     67 73       | 	byte	"Function undefined for strings"
23639     00          | 	byte	0
2363a                 | LR__4295
2363a     42 61 64 20 
2363e     70 61 72 61 
23642     6D 65 74 65 
23646     72 2E       | 	byte	"Bad parameter."
23648     00          | 	byte	0
23649                 | LR__4296
23649     43 61 6E 6E 
2364d     6F 74 20 64 
23651     65 63 6C 61 
23655     72 65 20 61 
23659     6E 20 61 72 
2365d     72 61 79 3A 
23661     20 74 68 65 
23665     20 76 61 72 
23669     69 61 62 6C 
2366d     65 20 65 78 
23671     69 73 74 73 
23675     2E          | 	byte	"Cannot declare an array: the variable exists."
23676     00          | 	byte	0
23677                 | LR__4297
23677     45 78 70 65 
2367b     63 74 65 64 
2367f     20 27 28 27 
23683     2E          | 	byte	"Expected '('."
23684     00          | 	byte	0
23685                 | LR__4298
23685     45 78 70 65 
23689     63 74 65 64 
2368d     20 27 29 27 
23691     20 6F 72 20 
23695     27 2C 27 2E | 	byte	"Expected ')' or ','."
23699     00          | 	byte	0
2369a                 | LR__4299
2369a     4E 6F 20 6D 
2369e     6F 72 65 20 
236a2     74 68 61 6E 
236a6     20 33 20 64 
236aa     69 6D 65 6E 
236ae     73 69 6F 6E 
236b2     73 20 73 75 
236b6     70 70 6F 72 
236ba     74 65 64    | 	byte	"No more than 3 dimensions supported"
236bd     00          | 	byte	0
236be                 | LR__4300
236be     56 61 72 69 
236c2     61 62 6C 65 
236c6     20 6E 61 6D 
236ca     65 20 65 78 
236ce     70 65 63 74 
236d2     65 64       | 	byte	"Variable name expected"
236d4     00          | 	byte	0
236d5                 | LR__4301
236d5     45 72 72 6F 
236d9     72 20       | 	byte	"Error "
236db     00          | 	byte	0
236dc                 | LR__4302
236dc     3A 20       | 	byte	": "
236de     00          | 	byte	0
236df                 | LR__4303
236df     2F 73 64    | 	byte	"/sd"
236e2     00          | 	byte	0
236e3                 | LR__4304
236e3     2F 73 64 2F 
236e7     62 61 73    | 	byte	"/sd/bas"
236ea     00          | 	byte	0
236eb                 | LR__4305
236eb     2F 73 64 2F 
236ef     62 61 73    | 	byte	"/sd/bas"
236f2     00          | 	byte	0
236f3                 | LR__4306
236f3     20 42 41 53 
236f7     49 43 20 62 
236fb     79 74 65 73 
236ff     20 66 72 65 
23703     65          | 	byte	" BASIC bytes free"
23704     00          | 	byte	0
23705                 | LR__4307
23705     52 65 61 64 
23709     79          | 	byte	"Ready"
2370a     00          | 	byte	0
2370b                 | LR__4308
2370b     20          | 	byte	" "
2370c     00          | 	byte	0
2370d                 | LR__4309
2370d     20          | 	byte	" "
2370e     00          | 	byte	0
2370f                 | LR__4310
2370f                 | 	byte	
2370f     00          | 	byte	0
23710                 | LR__4311
23710                 | 	byte	
23710     00          | 	byte	0
23711     00 00 00    | 	alignl
23714                 | _dat_
23714     00 00 00 00 
23718     00 00 00 00 
2371c     00 00 00 00 
23720     00 00 00 00 | 	byte	$00[16]
23724     61 41 17 0E 
23728     62 42 00 00 
2372c     63 43 19 10 
23730     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
23734     65 45 18 0F 
23738     66 46 00 00 
2373c     67 47 00 00 
23740     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
23744     69 49 00 00 
23748     6A 4A 00 00 
2374c     6B 4B 00 00 
23750     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
23754     6D 4D 00 00 
23758     6E 4E 1A 11 
2375c     6F 4F 1E 15 
23760     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
23764     71 51 00 00 
23768     72 52 00 00 
2376c     73 53 1B 12 
23770     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
23774     75 55 00 00 
23778     76 56 00 00 
2377c     77 57 00 00 
23780     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
23784     79 59 00 00 
23788     7A 5A 1D 14 
2378c     31 21 04 00 
23790     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
23794     33 23 06 00 
23798     34 24 07 00 
2379c     35 25 08 00 
237a0     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
237a4     37 26 0A 00 
237a8     38 2A 0B 00 
237ac     39 28 0C 00 
237b0     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
237b4     8D 8D 00 00 
237b8     9B 9B 00 00 
237bc     88 88 00 00 
237c0     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
237c4     20 20 00 00 
237c8     2D 5F 00 00 
237cc     3D 2B 00 00 
237d0     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
237d4     5D 7D 00 00 
237d8     5C 7C 00 00 
237dc     23 7E 00 00 
237e0     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
237e4     27 22 00 00 
237e8     60 7E 03 00 
237ec     2C 3C 00 00 
237f0     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
237f4     2F 3F 00 00 
237f8     B9 B9 00 00 
237fc     BA 00 00 00 
23800     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
23804     BC 00 00 00 
23808     BD 00 00 00 
2380c     BE 00 00 00 
23810     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
23814     C0 00 00 00 
23818     C1 00 00 00 
2381c     C2 00 00 00 
23820     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
23824     C4 00 00 00 
23828     C5 00 00 00 
2382c     C6 00 00 00 
23830     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
23834     C8 00 00 00 
23838     C9 00 00 00 
2383c     CA 00 00 00 
23840     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
23844     7F 7F 00 00 
23848     CC 00 00 00 
2384c     CD 00 00 00 
23850     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
23854     CF 00 00 00 
23858     D0 00 00 00 
2385c     D1 00 00 00 
23860     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
23864     2F 2F 00 00 
23868     2A 2A 00 00 
2386c     2D 2D 00 00 
23870     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
23874     8D 8D 00 00 
23878     31 31 00 00 
2387c     32 32 00 00 
23880     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
23884     34 34 00 00 
23888     35 35 00 00 
2388c     36 36 00 00 
23890     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
23894     38 38 00 00 
23898     39 39 00 00 
2389c     30 30 00 00 
238a0     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
238a4     5C 7C 00 00 
238a8     00 00 00 00 
238ac     00 00 00 00 
238b0     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
238b4     00 00 00 00 
      ...             
2390c     00 00 00 00 
23910     00 00 00 00 | 	byte	$00[96]
23914     2B 00 A6 F2 
23918     24 A7 09 80 
2391c     5B 88 4D 89 
23920     80 88 A5 88 | atari_spl file "atari.spl"
23924     6D 88 B8 88 
23928     80 88 CB 88 
2392c     92 88 A5 88 
23930     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
23934     A5 88 CA 88 
23938     A6 88 DD 88 
2393c     B8 88 AB 89 
23940     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
23944     C8 AD C6 F1 
23948     91 06 B6 FF 
2394c     13 00 4A 00 
23950     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
23954     5D 00 5E 00 
23958     5D 00 5E 00 
2395c     5E 00 5D 00 
23960     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
23964     38 00 83 00 
23968     25 00 83 00 
2396c     C3 FE D1 04 
23970     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
23974     48 88 38 85 
23978     41 8A CB 88 
2397c     28 89 B8 88 
23980     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
23984     15 89 03 89 
23988     02 89 15 89 
2398c     16 89 15 89 
23990     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
23994     15 89 3A 89 
23998     72 89 E3 89 
2399c     52 83 AD 97 
239a0     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
239a4     0C 02 B6 FF 
239a8     E1 00 A8 00 
239ac     F3 00 A8 00 
239b0     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
239b4     CE 00 CD 00 
239b8     CD 00 BA 00 
239bc     E1 00 BB 00 
239c0     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
239c4     DF 00 C9 FF 
239c8     E6 01 B6 06 
239cc     EE DD 8D 98 
239d0     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
239d4     97 89 73 89 
239d8     3B 89 60 89 
239dc     60 89 60 89 
239e0     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
239e4     73 89 72 89 
239e8     85 89 73 89 
239ec     AA 89 60 89 
239f0     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
239f4     E8 8A 18 86 
239f8     92 88 A5 C2 
239fc     E0 00 C3 05 
23a00     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
23a04     F2 00 64 01 
23a08     06 01 3E 01 
23a0c     2B 01 2B 01 
23a10     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
23a14     2B 01 2A 01 
23a18     2B 01 2B 01 
23a1c     2B 01 18 01 
23a20     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
23a24     39 07 61 F3 
23a28     C0 AF 37 85 
23a2c     0F 88 8B 8A 
23a30     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
23a34     AB 89 D0 89 
23a38     AB 89 D0 89 
23a3c     D0 89 CF 89 
23a40     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
23a44     D0 89 F5 89 
23a48     BD 89 08 8A 
23a4c     CF 89 E8 8A 
23a50     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
23a54     53 B3 0D F8 
23a58     F4 07 38 00 
23a5c     63 01 63 01 
23a60     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
23a64     88 01 88 01 
23a68     76 01 88 01 
23a6c     88 01 89 01 
23a70     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
23a74     75 01 AE 01 
23a78     76 01 88 01 
23a7c     4A 00 46 06 
23a80     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
23a84     08 8A 9A 86 
23a88     33 8B 08 8A 
23a8c     2D 8A F5 89 
23a90     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
23a94     2D 8A 2D 8A 
23a98     2E 8A 1B 8A 
23a9c     40 8A 2D 8A 
23aa0     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
23aa4     2E 8A 79 8A 
23aa8     66 8A C8 8B 
23aac     72 82 2B 97 
23ab0     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
23ab4     1D 02 05 01 
23ab8     F8 01 C0 01 
23abc     0B 02 C0 01 
23ac0     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
23ac4     F9 01 D3 01 
23ac8     F8 01 D3 01 
23acc     F8 01 D2 01 
23ad0     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
23ad4     E6 01 2B 01 
23ad8     8E 02 5F 07 
23adc     F7 E2 ED 9C 
23ae0     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
23ae4     E8 8A 78 8A 
23ae8     78 8A 65 8A 
23aec     8B 8A 78 8A 
23af0     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
23af4     8B 8A 9D 8A 
23af8     9D 8A 8B 8A 
23afc     C2 8A 78 8A 
23b00     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
23b04     70 8C 18 86 
23b08     8B 8A 23 C9 
23b0c     CB 03 C4 05 
23b10     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
23b14     0B 02 7B 02 
23b18     1E 02 55 02 
23b1c     30 02 43 02 
23b20     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
23b24     43 02 44 02 
23b28     43 02 30 02 
23b2c     68 02 31 02 
23b30     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
23b34     07 08 3F F7 
23b38     73 B2 13 85 
23b3c     15 89 ED 8B 
23b40     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
23b44     B0 8A FB 8A 
23b48     D5 8A FA 8A 
23b4c     E8 8A FB 8A 
23b50     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
23b54     E8 8A 21 8B 
23b58     E7 8A 33 8B 
23b5c     E8 8A 26 8C 
23b60     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
23b64     8D B0 27 F6 
23b68     9C 08 AD 01 
23b6c     7B 02 8D 02 
23b70     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
23b74     A1 02 A0 02 
23b78     A1 02 A0 02 
23b7c     A0 02 A0 02 
23b80     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
23b84     7B 02 D8 02 
23b88     7B 02 C6 02 
23b8c     3E 01 C3 05 
23b90     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
23b94     00 8C 2A 86 
23b98     E0 8C FA 8A 
23b9c     6A 8B FB 8A 
23ba0     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
23ba4     45 8B 45 8B 
23ba8     45 8B 6B 8B 
23bac     46 8B 59 8B 
23bb0     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
23bb4     6B 8B 6B 8B 
23bb8     6B 8B 6B 8B 
23bbc     7D 8B 7D 8B 
23bc0     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
23bc4     90 8B 91 8B 
23bc8     90 8B 90 8B 
23bcc     A3 8B A3 8B 
23bd0     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
23bd4     B5 8B B6 8B 
23bd8     B5 8B B5 8B 
23bdc     B6 8B C8 8B 
23be0     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
23be4     C8 8B DA 8B 
23be8     DB 8B DB 8B 
23bec     DB 8B DC 8B 
23bf0     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
23bf4     EE 8B EE 8B 
23bf8     00 8C 01 8C 
23bfc     00 8C 01 8C 
23c00     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
23c04     12 8C 13 8C 
23c08     13 8C 26 8C 
23c0c     26 8C 26 8C 
23c10     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
23c14     38 8C 38 8C 
23c18     38 8C 38 8C 
23c1c     4B 8C 4B 8C 
23c20     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
23c24     5E 8C 5E 8C 
23c28     5E 8C 5E 8C 
23c2c     70 8C 70 8C 
23c30     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
23c34     70 8C 83 8C 
23c38     83 8C 83 8C 
23c3c     83 8C 96 8C 
23c40     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
23c44     95 8C A9 8C 
23c48     A9 8C A8 8C 
23c4c     A8 8C A8 8C 
23c50     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
23c54     BB 8C BB 8C 
23c58     BB 8C CE 8C 
23c5c     CE 8C CE 8C 
23c60     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
23c64     E0 8C E1 8C 
23c68     E1 8C E0 8C 
23c6c     F4 8C F2 8C 
23c70     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
23c74     05 8D 05 8D 
23c78     06 8D 06 8D 
23c7c     19 8D 19 8D 
23c80     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
23c84     18 8D 2B 8D 
23c88     2B 8D 2B 8D 
23c8c     2A 8D 3E 8D 
23c90     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
23c94     3E 8D 51 8D 
23c98     50 8D 50 8D 
23c9c     50 8D 51 8D 
23ca0     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
23ca4     63 8D 64 8D 
23ca8     76 8D 75 8D 
23cac     75 8D 76 8D 
23cb0     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
23cb4     88 8D 88 8D 
23cb8     89 8D 9B 8D 
23cbc     9A 8D 9B 8D 
23cc0     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
23cc4     AD 8D AE 8D 
23cc8     AD 8D AE 8D 
23ccc     C1 8D C1 8D 
23cd0     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
23cd4     D3 8D D3 8D 
23cd8     D3 8D D3 8D 
23cdc     D3 8D E6 8D 
23ce0     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
23ce4     E6 8D E6 8D 
23ce8     F9 8D F9 8D 
23cec     F9 8D F8 8D 
23cf0     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
23cf4     0B 8E 0B 8E 
23cf8     1D 8E 1D 8E 
23cfc     1E 8E 1E 8E 
23d00     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
23d04     31 8E 31 8E 
23d08     31 8E 42 8E 
23d0c     43 8E 43 8E 
23d10     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
23d14     56 8E 56 8E 
23d18     55 8E 56 8E 
23d1c     68 8E 69 8E 
23d20     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
23d24     69 8E 7B 8E 
23d28     7C 8E 7B 8E 
23d2c     7B 8E 8D 8E 
23d30     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
23d34     8D 8E A1 8E 
23d38     A0 8E A1 8E 
23d3c     A1 8E A0 8E 
23d40     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
23d44     B3 8E B3 8E 
23d48     C6 8E C5 8E 
23d4c     C6 8E C6 8E 
23d50     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
23d54     D8 8E D9 8E 
23d58     D8 8E EC 8E 
23d5c     EB 8E EC 8E 
23d60     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
23d64     FE 8E FE 8E 
23d68     FE 8E FE 8E 
23d6c     10 8F 10 8F 
23d70     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
23d74     11 8F 23 8F 
23d78     24 8F 23 8F 
23d7c     24 8F 37 8F 
23d80     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
23d84     36 8F 36 8F 
23d88     48 8F 49 8F 
23d8c     49 8F 49 8F 
23d90     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
23d94     5B 8F 5C 8F 
23d98     5B 8F 6E 8F 
23d9c     6E 8F 6E 8F 
23da0     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
23da4     81 8F 81 8F 
23da8     81 8F 81 8F 
23dac     93 8F 93 8F 
23db0     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
23db4     93 8F A6 8F 
23db8     A6 8F A6 8F 
23dbc     A6 8F B9 8F 
23dc0     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
23dc4     B9 8F B9 8F 
23dc8     CC 8F CB 8F 
23dcc     CB 8F CC 8F 
23dd0     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
23dd4     DF 8F DE 8F 
23dd8     DE 8F F1 8F 
23ddc     F1 8F F1 8F 
23de0     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
23de4     03 90 04 90 
23de8     04 90 04 90 
23dec     16 90 17 90 
23df0     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
23df4     29 90 28 90 
23df8     29 90 28 90 
23dfc     29 90 3C 90 
23e00     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
23e04     3C 90 4F 90 
23e08     4E 90 4E 90 
23e0c     4E 90 4E 90 
23e10     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
23e14     61 90 61 90 
23e18     73 90 74 90 
23e1c     74 90 74 90 
23e20     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
23e24     87 90 86 90 
23e28     87 90 86 90 
23e2c     99 90 99 90 
23e30     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
23e34     AB 90 AB 90 
23e38     AC 90 AB 90 
23e3c     AB 90 BF 90 
23e40     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
23e44     BE 90 D1 90 
23e48     D0 90 D1 90 
23e4c     D1 90 D1 90 
23e50     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
23e54     E3 90 E4 90 
23e58     F6 90 F6 90 
23e5c     F6 90 F6 90 
23e60     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
23e64     09 91 0A 91 
23e68     0A 91 1C 91 
23e6c     1C 91 1C 91 
23e70     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
23e74     2F 91 2E 91 
23e78     2F 91 2F 91 
23e7c     2E 91 41 91 
23e80     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
23e84     41 91 53 91 
23e88     54 91 54 91 
23e8c     53 91 54 91 
23e90     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
23e94     67 91 67 91 
23e98     79 91 7A 91 
23e9c     79 91 78 91 
23ea0     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
23ea4     8C 91 8B 91 
23ea8     8C 91 8C 91 
23eac     9E 91 9E 91 
23eb0     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
23eb4     B1 91 B1 91 
23eb8     B2 91 B1 91 
23ebc     B1 91 C4 91 
23ec0     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
23ec4     C4 91 D6 91 
23ec8     D7 91 D7 91 
23ecc     D7 91 D6 91 
23ed0     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
23ed4     EA 91 EA 91 
23ed8     EA 91 FC 91 
23edc     FC 91 FB 91 
23ee0     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
23ee4     0E 92 0F 92 
23ee8     0F 92 0E 92 
23eec     21 92 21 92 
23ef0     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
23ef4     21 92 34 92 
23ef8     33 92 34 92 
23efc     34 92 47 92 
23f00     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
23f04     46 92 47 92 
23f08     59 92 59 92 
23f0c     59 92 59 92 
23f10     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
23f14     6C 92 6C 92 
23f18     6B 92 7E 92 
23f1c     7E 92 7E 92 
23f20     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
23f24     92 92 91 92 
23f28     91 92 90 92 
23f2c     91 92 A4 92 
23f30     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
23f34     A3 92 B6 92 
23f38     B6 92 B7 92 
23f3c     B7 92 B6 92 
23f40     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
23f44     CA 92 C9 92 
23f48     CA 92 DC 92 
23f4c     DC 92 DC 92 
23f50     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
23f54     EF 92 EF 92 
23f58     EF 92 EF 92 
23f5c     01 93 01 93 
23f60     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
23f64     15 93 14 93 
23f68     14 93 14 93 
23f6c     14 93 27 93 
23f70     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
23f74     27 93 39 93 
23f78     3A 93 39 93 
23f7c     39 93 39 93 
23f80     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
23f84     4B 93 4C 93 
23f88     5F 93 5F 93 
23f8c     5F 93 5E 93 
23f90     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
23f94     5F 93 84 93 
23f98     4C 93 96 93 
23f9c     5F 93 AE 94 
23fa0     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
23fa4     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
23fa8     7A D7 00 80 
23fac     87 8A 48 8F 
23fb0     EC 8C 76 8D 
23fb4     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
23fb8     3C 8D 82 8D 
23fbc     42 8D 88 8D 
23fc0     8C 8D 8E 8D 
23fc4     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
23fc8     97 8D DE 8D 
23fcc     E1 8D F1 8E 
23fd0     D8 8C A3 83 
23fd4     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
23fd8     65 71 C9 65 
23fdc     FC 64 C4 65 
23fe0     C1 65 BF 65 
23fe4     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
23fe8     B6 65 B4 65 
23fec     B2 65 AE 65 
23ff0     AC 65 ED 65 
23ff4     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
23ff8     5E 65 25 66 
23ffc     FA 62 23 6B 
24000     B5 6C 61 0A 
24004     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
24008     5D 90 BE 8D 
2400c     47 8E C3 8D 
24010     09 8E C9 8D 
24014     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
24018     15 8E 19 8E 
2401c     1B 8E 62 8E 
24020     64 8E 68 8E 
24024     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
24028     B5 8E 4C 90 
2402c     FA 84 3C 9D 
24030     98 13 79 6D 
24034     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
24038     D9 66 50 66 
2403c     D4 66 4B 66 
24040     8C 66 46 66 
24044     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
24048     81 66 3A 66 
2404c     7C 66 36 66 
24050     76 66 30 66 
24054     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
24058     6B 66 88 72 
2405c     BF 37 E7 B7 
24060     75 83 8B 8E 
24064     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
24068     94 8E 96 8E 
2406c     DD 8E 9C 8E 
24070     E2 8E A2 8E 
24074     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
24078     EE 8E AE 8E 
2407c     38 8F B5 8E 
24080     3F 8F FD 8E 
24084     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
24088     A5 87 1E E3 
2408c     6D 5D FA 71 
24090     41 64 25 67 
24094     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
24098     D9 66 1A 67 
2409c     18 67 15 67 
240a0     12 67 0F 67 
240a4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
240a8     07 67 C0 66 
240ac     01 67 BC 66 
240b0     B8 66 DE 64 
240b4     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
240b8     43 E5 1F 8B 
240bc     14 8A F1 90 
240c0     1C 8F 63 8F 
240c4     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
240c8     29 8F 6E 8F 
240cc     72 8F 75 8F 
240d0     34 8F BE 8F 
240d4     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
240d8     84 8F 87 8F 
240dc     CC 8F 56 90 
240e0     67 91 49 80 
240e4     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
240e8     46 77 A6 66 
240ec     E8 66 B0 67 
240f0     AD 67 ED 67 
240f4     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
240f8     A2 67 E3 67 
240fc     9D 67 9A 67 
24100     98 67 94 67 
24104     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
24108     49 67 CD 67 
2410c     28 65 5F 6E 
24110     82 67 3A 01 
24114     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
24118     C2 91 A9 8F 
2411c     EF 8F AE 8F 
24120     F4 8F B5 8F 
24124     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
24128     01 90 03 90 
2412c     07 90 09 90 
24130     0C 90 53 90 
24134     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
24138     18 90 44 93 
2413c     85 84 D6 9D 
24140     87 1F 2F 75 
24144     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
24148     C4 68 F6 67 
2414c     BE 68 F1 67 
24150     76 68 2E 68 
24154     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
24158     27 68 24 68 
2415c     64 68 1E 68 
24160     5F 68 19 68 
24164     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
24168     DC 68 56 72 
2416c     7E 36 C2 B8 
24170     D7 84 73 90 
24174     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
24178     7B 90 7F 90 
2417c     82 90 84 90 
24180     CB 90 8B 90 
24184     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
24188     D7 90 96 90 
2418c     20 91 59 90 
24190     25 91 A2 90 
24194     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
24198     D0 89 40 EE 
2419c     12 64 C4 71 
241a0     29 66 0C 69 
241a4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
241a8     C0 68 02 69 
241ac     FE 68 FB 68 
241b0     F9 68 F6 68 
241b4     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
241b8     EE 68 A8 68 
241bc     2C 69 5F 68 
241c0     E2 68 81 66 
241c4     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
241c8     1E EB A6 8A 
241cc     73 8B 5E 93 
241d0     7B 90 48 91 
241d4     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
241d8     0D 91 11 91 
241dc     14 91 16 91 
241e0     5C 91 1C 91 
241e4     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
241e8     68 91 AF 91 
241ec     2A 91 B5 91 
241f0     75 91 1A 94 
241f4     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
241f8     70 0E CB 6C 
241fc     5D 6E C4 67 
24200     99 69 54 69 
24204     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
24208     D2 69 49 69 
2420c     89 69 86 69 
24210     40 69 C4 69 
24214     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
24218     35 69 76 69 
2421c     58 67 EB 6D 
24220     E9 6D 89 0F 
24224     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
24228     33 94 94 91 
2422c     D9 91 56 91 
24230     E0 91 9F 91 
24234     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
24238     EC 91 EE 91 
2423c     F1 91 F4 91 
24240     F7 91 3D 92 
24244     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
24248     46 92 21 94 
2424c     11 89 A4 9D 
24250     FD 0E 8F 6C 
24254     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
24258     28 6A E1 69 
2425c     65 6A 1F 6A 
24260     5F 6A 1A 6A 
24264     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
24268     54 6A 0F 6A 
2426c     4F 6A 09 6A 
24270     06 6A 03 6A 
24274     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
24278     23 68 69 77 
2427c     3A 4D 38 CA 
24280     38 86 4E 91 
24284     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
24288     64 92 24 92 
2428c     6A 92 2A 92 
24290     70 92 30 92 
24294     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
24298     7B 92 7E 92 
2429c     C5 92 84 92 
242a0     CB 92 8A 92 
242a4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
242a8     4D 8D F9 E2 
242ac     97 59 FE 74 
242b0     DB 68 6D 6A 
242b4     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
242b8     A8 6A A5 6A 
242bc     A3 6A 9F 6A 
242c0     9D 6A 9B 6A 
242c4     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
242c8     D6 6A 8F 6A 
242cc     CF 6A 46 6A 
242d0     CA 6A E1 67 
242d4     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
242d8     D3 F7 15 92 
242dc     90 8C BF 94 
242e0     A6 92 EB 92 
242e4     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
242e8     B1 92 F7 92 
242ec     FA 92 FD 92 
242f0     00 93 02 93 
242f4     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
242f8     4F 93 52 93 
242fc     54 93 22 94 
24300     5A 93 8F 88 
24304     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
24308     1C 77 07 6C 
2430c     E8 69 7A 6B 
24310     34 6B 75 6B 
24314     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
24318     29 6B 26 6B 
2431c     24 6B 21 6B 
24320     1D 6B 5E 6B 
24324     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
24328     12 6B 52 6B 
2432c     34 69 34 6E 
24330     BA 73 A4 24 
24334     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
24338     7A 94 B3 93 
2433c     72 93 31 93 
24340     78 93 7A 93 
24344     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
24348     83 93 86 93 
2434c     89 93 D0 93 
24350     D2 93 D5 93 
24354     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
24358     DD 93 40 96 
2435c     30 8B 99 9C 
24360     52 10 94 71 
24364     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
24368     46 6C 79 6B 
2436c     40 6C B7 6B 
24370     F7 6B B1 6B 
24374     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
24378     EC 6B A5 6B 
2437c     A2 6B 9F 6B 
24380     9D 6B 9A 6B 
24384     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
24388     C8 6A E4 76 
2438c     20 4B F9 CE 
24390     2E 8A 1A 92 
24394     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
24398     FB 93 BA 93 
2439c     01 94 03 94 
243a0     4A 94 09 94 
243a4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
243a8     55 94 14 94 
243ac     9E 94 1A 94 
243b0     61 94 20 94 
243b4     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
243b8     3E 87 E5 CD 
243bc     5F 50 6C 78 
243c0     B5 6A 04 6C 
243c4     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
243c8     83 6C 7F 6C 
243cc     7C 6C 36 6C 
243d0     76 6C 74 6C 
243d4     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
243d8     6B 6C 25 6C 
243dc     66 6C 1F 6C 
243e0     1D 6C 41 6A 
243e4     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
243e8     BA FA FC 94 
243ec     5B 8D 97 96 
243f0     3B 94 C5 94 
243f4     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
243f8     89 94 8C 94 
243fc     8F 94 92 94 
24400     94 94 DB 94 
24404     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
24408     E4 94 E7 94 
2440c     2D 95 74 95 
24410     C8 96 15 89 
24414     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
24418     CB 75 31 6F 
2441c     7E 6B 10 6D 
24420     C9 6C 0A 6D 
24424     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
24428     BD 6C FF 6C 
2442c     FB 6C F9 6C 
24430     B2 6C F3 6C 
24434     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
24438     A7 6C E8 6C 
2443c     0D 6B 85 6F 
24440     C7 74 10 28 
24444     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
24448     96 96 47 95 
2444c     06 95 0A 95 
24450     0C 95 0F 95 
24454     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
24458     17 95 5E 95 
2445c     61 95 63 95 
24460     22 95 AC 95 
24464     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
24468     72 95 17 98 
2446c     59 8E 01 96 
24470     CF FC 5A 68 
24474     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
24478     96 6D 50 6D 
2447c     D5 6D 4A 6D 
24480     8C 6D 89 6D 
24484     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
24488     80 6D 3A 6D 
2448c     7A 6D 77 6D 
24490     75 6D 71 6D 
24494     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
24498     18 6C BC 78 
2449c     9A 4F 7E CF 
244a0     1F 89 F1 93 
244a4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
244a8     D2 95 4E 95 
244ac     D7 95 53 95 
244b0     DD 95 E0 95 
244b4     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
244b8     A5 95 EB 95 
244bc     EE 95 F0 95 
244c0     37 96 B3 95 
244c4     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
244c8     1A 98 D5 8D 
244cc     C5 9F CD 0F 
244d0     0F 71 F3 73 
244d4     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
244d8     D9 6D 5E 6E 
244dc     D3 6D 58 6E 
244e0     12 6E 0F 6E 
244e4     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
244e8     49 6E BF 6D 
244ec     87 6E 76 6D 
244f0     81 6E 11 6B 
244f4     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
244f8     3F 09 44 95 
244fc     E5 8D 3F 99 
24500     D4 95 A2 96 
24504     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
24508     23 96 69 96 
2450c     6B 96 6E 96 
24510     71 96 74 96 
24514     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
24518     BF 96 3C 96 
2451c     C6 96 C8 96 
24520     A3 98 51 8D 
24524     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
24528     CF 75 29 73 
2452c     90 6C EC 6E 
24530     62 6E E7 6E 
24534     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
24538     9A 6E 98 6E 
2453c     95 6E 91 6E 
24540     8E 6E CF 6E 
24544     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
24548     40 6E C3 6E 
2454c     E8 6C 45 6F 
24550     A5 7B C9 35 
24554     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
24558     2D 98 23 97 
2455c     E1 96 A0 96 
24560     A4 96 EA 96 
24564     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
24568     AF 96 F4 96 
2456c     F8 96 3E 97 
24570     FD 96 43 97 
24574     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
24578     08 97 6B 99 
2457c     D6 92 88 91 
24580     D8 EE 84 66 
24584     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
24588     2E 6F E7 6E 
2458c     6C 6F 24 6F 
24590     21 6F 1F 6F 
24594     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
24598     17 6F 13 6F 
2459c     54 6F 0E 6F 
245a0     0B 6F 4B 6F 
245a4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
245a8     27 6D 1C 7B 
245ac     19 59 9F DB 
245b0     66 8E BC 94 
245b4     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
245b8     67 97 26 97 
245bc     6D 97 2B 97 
245c0     72 97 32 97 
245c4     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
245c8     C1 97 7F 97 
245cc     C6 97 85 97 
245d0     CB 97 CE 97 
245d4     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
245d8     EC 8A C4 C6 
245dc     68 4C F4 7D 
245e0     63 6E E8 6E 
245e4     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
245e8     ED 6F A7 6F 
245ec     E7 6F A0 6F 
245f0     E1 6F 9B 6F 
245f4     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
245f8     D5 6F 8F 6F 
245fc     CE 6F 45 6F 
24600     86 6F 68 6D 
24604     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
24608     C0 13 AD A2 
2460c     A7 8E 79 99 
24610     E6 97 E8 97 
24614     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
24618     F1 97 F3 97 
2461c     F6 97 F9 97 
24620     FB 97 FE 97 
24624     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
24628     4A 98 0A 98 
2462c     93 98 0F 98 
24630     7F 9B BF 8C 
24634     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
24638     91 7B 62 73 
2463c     1A 6E B9 70 
24640     EB 6F B3 70 
24644     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
24648     25 70 20 70 
2464c     1E 70 1B 70 
24650     18 70 15 70 
24654     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
24658     0D 70 09 70 
2465c     07 70 03 70 
24660     01 70 FD 6F 
24664     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
24668     F6 6F F2 6F 
2466c     EF 6F EC 6F 
24670     2C 70 E6 6F 
24674     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
24678     DD 6F 97 6F 
2467c     D7 6F 84 6E 
24680     8F 6F 3F 7D 
24684     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
24686     01 00 00 00 
2468a     00 00 00 00 
2468e     00 00 00 00 
24692     00 00 00 00 | mouse  file "mouse.def"
24696     00 00 00 00 
2469a     00 00 00 00 
2469e     00 00 00 00 
246a2     00 00 00 00 | 	byte	$00[16]
246a6     01 01 00 00 
246aa     00 00 00 00 
246ae     00 00 00 00 
246b2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
246b6     00 00 00 00 
246ba     00 00 00 00 
246be     00 00 00 00 
246c2     00 00 00 00 | 	byte	$00[16]
246c6     01 0D 01 00 
246ca     00 00 00 00 
246ce     00 00 00 00 
246d2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
246d6     00 00 00 00 
246da     00 00 00 00 
246de     00 00 00 00 
246e2     00 00 00 00 | 	byte	$00[16]
246e6     01 0D 0D 01 
246ea     00 00 00 00 
246ee     00 00 00 00 
246f2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
246f6     00 00 00 00 
246fa     00 00 00 00 
246fe     00 00 00 00 
24702     00 00 00 00 | 	byte	$00[16]
24706     01 0D 0D 0D 
2470a     01 00 00 00 
2470e     00 00 00 00 
24712     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24716     00 00 00 00 
2471a     00 00 00 00 
2471e     00 00 00 00 
24722     00 00 00 00 | 	byte	$00[16]
24726     01 0D 0D 0D 
2472a     0D 01 00 00 
2472e     00 00 00 00 
24732     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24736     00 00 00 00 
2473a     00 00 00 00 
2473e     00 00 00 00 
24742     00 00 00 00 | 	byte	$00[16]
24746     01 0D 0D 0D 
2474a     0D 0D 01 00 
2474e     00 00 00 00 
24752     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
24756     00 00 00 00 
2475a     00 00 00 00 
2475e     00 00 00 00 
24762     00 00 00 00 | 	byte	$00[16]
24766     01 0D 0D 0D 
2476a     0D 0D 0D 01 
2476e     00 00 00 00 
24772     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
24776     00 00 00 00 
2477a     00 00 00 00 
2477e     00 00 00 00 
24782     00 00 00 00 | 	byte	$00[16]
24786     01 0D 0D 0D 
2478a     0D 0D 0D 0C 
2478e     01 00 00 00 
24792     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
24796     00 00 00 00 
2479a     00 00 00 00 
2479e     00 00 00 00 
247a2     00 00 00 00 | 	byte	$00[16]
247a6     01 0D 0D 0D 
247aa     0D 0D 0D 0D 
247ae     0C 01 00 00 
247b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
247b6     00 00 00 00 
247ba     00 00 00 00 
247be     00 00 00 00 
247c2     00 00 00 00 | 	byte	$00[16]
247c6     01 0D 0D 0D 
247ca     0D 0D 0D 0D 
247ce     0D 0C 01 00 
247d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
247d6     00 00 00 00 
247da     00 00 00 00 
247de     00 00 00 00 
247e2     00 00 00 00 | 	byte	$00[16]
247e6     01 0D 0D 0D 
247ea     0D 0D 0D 0D 
247ee     0D 0D 0B 01 
247f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
247f6     00 00 00 00 
247fa     00 00 00 00 
247fe     00 00 00 00 
24802     00 00 00 00 | 	byte	$00[16]
24806     01 0D 0D 0D 
2480a     0C 0D 0D 03 
2480e     01 01 01 01 
24812     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
24816     00 00 00 00 
2481a     00 00 00 00 
2481e     00 00 00 00 
24822     00 00 00 00 | 	byte	$00[16]
24826     01 0D 0D 0C 
2482a     01 09 0D 03 
2482e     00 00 00 00 
24832     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
24836     00 00 00 00 
2483a     00 00 00 00 
2483e     00 00 00 00 
24842     00 00 00 00 | 	byte	$00[16]
24846     01 0D 0C 00 
2484a     00 01 0D 0B 
2484e     01 00 00 00 
24852     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
24856     00 00 00 00 
2485a     00 00 00 00 
2485e     00 00 00 00 
24862     00 00 00 00 | 	byte	$00[16]
24866     01 0C 00 00 
2486a     00 01 0A 0D 
2486e     01 00 00 00 
24872     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
24876     00 00 00 00 
2487a     00 00 00 00 
2487e     00 00 00 00 
24882     00 00 00 00 | 	byte	$00[16]
24886     01 00 00 00 
2488a     00 00 01 0D 
2488e     0B 01 00 00 
24892     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
24896     00 00 00 00 
2489a     00 00 00 00 
2489e     00 00 00 00 
248a2     00 00 00 00 
248a6     00 00 00 00 
248aa     00 00       | 	byte	$00[22]
248ac     01 0B 0D 01 
248b0     00 00 00 00 
248b4     00 00 00 00 
248b8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
248bc     00 00 00 00 
248c0     00 00 00 00 
248c4     00 00 00 00 
248c8     00 00 00 00 
248cc     00          | 	byte	$00[17]
248cd     01 00 00 00 
248d1     00 00 00 00 
248d5     00 00 00 00 
248d9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
248dd     00 00 00 00 
      ...             
24a81     00 00 00 00 
24a85     00          | 	byte	$00[425]
24a86                 | 
24a86     00 00       |              	org
24a88 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
24a8c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
24a90 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
24a94 003             | 
24a94 003 00 30 04 F6 |                 mov     psramaddr,#0
24a98 004             | 
24a98 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
24a9c 005 20 00 00 FF 
24aa0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
24aa4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
24aa8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
24aac 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
24ab0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
24ab4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
24ab8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
24abc 00d             | 
24abc 00d 20 00 00 FF 
24ac0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
24ac4 00f E0 03 00 FF 
24ac8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
24acc 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
24ad0 012             | 
24ad0 012             |                 
24ad0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
24ad4 013             |     
24ad4 013 01 2C 60 FD |                 cogid 	t11				' get id
24ad8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
24adc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
24ae0 016             | 
24ae0 016 00 00 00 00 | t11 		long 	0
24ae4 017 00 FF 07 00 | mailbox 	long 	$7FF00
24ae8 018 00 00 00 00 | psramaddr 	long 	0
24aec 019 00 00 00 00 | pslockval	long 	0
24af0 01a 00 00 00 00 | cmd             long    0
24af4 01b 00 00 00 00 | buf1            long    0
24af8 01c 00 40 00 00 | buf2            long    16384
24afc 01d 00 4B 02 00 | 	long	@@@_dat_ + 5100
24b00 01e 50 32 20 52 
24b04 01f 65 74 72 6F 
24b08 020 6D 61 63 68 
24b0c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
24b10 022 42 41 53 49 
24b14 023 43 20 76 65 
24b18 024 72 73 69 6F 
24b1c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
24b20 026 32 30 00 00 | 	byte	$32, $30, $00, $00
24b24 027             | 	alignl
24b24 027             | _hg010b_spin2_dat_
24b24 027             | 
24b24 027 00 00 00 00 
24b28 028 00 00 00 00 
24b2c 029 00 00 00 00 
24b30 02a 00 00 00 00 
24b34 02b 00 00 00    | vga_font       file "vgafont.def"
24b37 02b 7E 81 A5 81 
24b3b 02c 81 BD 99 81 
24b3f 02d 81 7E 00 00 
24b43 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
24b47 02f 7E FF DB FF 
24b4b 030 FF C3 E7 FF 
24b4f 031 FF 7E 00 00 
24b53 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
24b57 033 00 36 7F 7F 
24b5b 034 7F 7F 3E 1C 
24b5f 035 08 00 00 00 
24b63 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
24b67 037 00 08 1C 3E 
24b6b 038 7F 3E 1C 08 
24b6f 039 00 00 00 00 
24b73 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
24b77 03b 18 3C 3C E7 
24b7b 03c E7 E7 18 18 
24b7f 03d 3C 00 00 00 
24b83 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
24b87 03f 18 3C 7E FF 
24b8b 040 FF 7E 18 18 
24b8f 041 3C 00 00 00 
24b93 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
24b97 043 00 00 00 18 
24b9b 044 3C 3C 18 00 
24b9f 045 00 00 00 00 
24ba3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
24ba7 047 FF FF FF E7 
24bab 048 C3 C3 E7 FF 
24baf 049 FF FF FF FF 
24bb3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
24bb7 04b 00 00 3C 66 
24bbb 04c 42 42 66 3C 
24bbf 04d 00 00 00 00 
24bc3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
24bc7 04f FF FF C3 99 
24bcb 050 BD BD 99 C3 
24bcf 051 FF FF FF FF 
24bd3 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
24bd7 053 78 70 58 4C 
24bdb 054 1E 33 33 33 
24bdf 055 33 1E 00 00 
24be3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
24be7 057 3C 66 66 66 
24beb 058 66 3C 18 7E 
24bef 059 18 18 00 00 
24bf3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
24bf7 05b FC CC FC 0C 
24bfb 05c 0C 0C 0C 0E 
24bff 05d 0F 07 00 00 
24c03 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
24c07 05f FE C6 FE C6 
24c0b 060 C6 C6 C6 E6 
24c0f 061 E7 67 03 00 
24c13 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
24c17 063 18 18 DB 3C 
24c1b 064 E7 3C DB 18 
24c1f 065 18 00 00 00 
24c23 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
24c27 067 03 07 0F 1F 
24c2b 068 7F 1F 0F 07 
24c2f 069 03 01 00 00 
24c33 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
24c37 06b 60 70 78 7C 
24c3b 06c 7F 7C 78 70 
24c3f 06d 60 40 00 00 
24c43 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
24c47 06f 18 3C 7E 18 
24c4b 070 18 18 7E 3C 
24c4f 071 18 00 00 00 
24c53 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
24c57 073 66 66 66 66 
24c5b 074 66 66 66    | 	byte	$66[7]
24c5e 075 00 66 66 00 
24c62 076 00 00 00 00 
24c66 077 00 FE DB DB 
24c6a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
24c6e 079 D8 D8 D8 00 
24c72 07a 00 00 00 3E 
24c76 07b 63 06 1C 36 
24c7a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
24c7e 07d 30 63 3E 00 
24c82 07e 00 00 00 00 
24c86 07f 00 00 00 00 
24c8a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
24c8e 081 7F 7F 7F 00 
24c92 082 00 00 00 00 
24c96 083 00 18 3C 7E 
24c9a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
24c9e 085 3C 18 7E 00 
24ca2 086 00 00 00 00 
24ca6 087 00 18 3C 7E 
24caa 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
24cae 089 18 18 18 00 
24cb2 08a 00 00 00 00 
24cb6 08b 00 18 18 18 
24cba 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
24cbe 08d 7E 3C 18 00 
24cc2 08e 00 00 00 00 
24cc6 08f 00 00 00 18 
24cca 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
24cce 091 00 00 00 00 
24cd2 092 00 00 00 00 
24cd6 093 00 00 00    | 	byte	$00[11]
24cd9 094 0C 06 7F 06 
24cdd 095 0C 00 00 00 
24ce1 096 00 00 00 00 
24ce5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24ce9 098 00 03 03 03 
24ced 099 7F 00 00 00 
24cf1 09a 00 00 00 00 
24cf5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24cf9 09c 14 36 7F 36 
24cfd 09d 14 00 00 00 
24d01 09e 00 00 00 00 
24d05 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
24d09 0a0 1C 1C 3E 3E 
24d0d 0a1 7F 7F 00 00 
24d11 0a2 00 00 00 00 
24d15 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
24d19 0a4 7F 3E 3E 1C 
24d1d 0a5 1C 08 00 00 
24d21 0a6 00 00 00 00 
24d25 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24d29 0a8 00 00 00 00 
24d2d 0a9 00 00 00 00 
24d31 0aa 00 00 00 00 
24d35 0ab 00 00       | 	byte	$00[14]
24d37 0ab 18 3C 3C 3C 
24d3b 0ac 18 18 18 00 
24d3f 0ad 18 18 00 00 
24d43 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
24d47 0af 66 24 00 00 
24d4b 0b0 00 00 00 00 
24d4f 0b1 00 00 00 00 
24d53 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24d57 0b3 00 36 36 7F 
24d5b 0b4 36 36 36 7F 
24d5f 0b5 36 36 00 00 
24d63 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
24d67 0b7 3E 63 43 03 
24d6b 0b8 3E 60 60 61 
24d6f 0b9 63 3E 18 18 
24d73 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
24d77 0bb 00 00 43 63 
24d7b 0bc 30 18 0C 06 
24d7f 0bd 63 61 00 00 
24d83 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
24d87 0bf 1C 36 36 1C 
24d8b 0c0 6E 3B 33 33 
24d8f 0c1 33 6E 00 00 
24d93 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
24d97 0c3 0C 0C 0C 06 
24d9b 0c4 00 00 00 00 
24d9f 0c5 00 00 00 00 
24da3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
24da7 0c7 30 18 0C 0C 
24dab 0c8 0C 0C 0C 0C 
24daf 0c9 18 30 00 00 
24db3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
24db7 0cb 0C 18 30 30 
24dbb 0cc 30 30 30 30 
24dbf 0cd 18 0C 00 00 
24dc3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
24dc7 0cf 00 00 00 66 
24dcb 0d0 3C FF 3C 66 
24dcf 0d1 00 00 00 00 
24dd3 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
24dd7 0d3 00 00 00 18 
24ddb 0d4 18 7E 18 18 
24ddf 0d5 00 00 00 00 
24de3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
24de7 0d7 00 00 00 00 
24deb 0d8 00 00 00 00 | 	byte	$00[8]
24def 0d9 18 18 18 0C 
24df3 0da 00 00 00 00 
24df7 0db 00 00 00 00 
24dfb 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
24dff 0dd 00 00 00 00 
24e03 0de 00 00 00 00 
24e07 0df 00 00 00 00 
24e0b 0e0 00 00 00 00 | 	byte	$00[16]
24e0f 0e1 18 18 00 00 
24e13 0e2 00 00 00 00 
24e17 0e3 00 00 40 60 
24e1b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
24e1f 0e5 03 01 00 00 
24e23 0e6 00 00 00 00 
24e27 0e7 1C 36 63 63 
24e2b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
24e2f 0e9 36 1C 00 00 
24e33 0ea 00 00 00 00 
24e37 0eb 18 1C 1E 18 
24e3b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
24e3f 0ed 18 7E 00 00 
24e43 0ee 00 00 00 00 
24e47 0ef 3E 63 60 30 
24e4b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
24e4f 0f1 63 7F 00 00 
24e53 0f2 00 00 00 00 
24e57 0f3 3E 63 60 60 
24e5b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
24e5f 0f5 63 3E 00 00 
24e63 0f6 00 00 00 00 
24e67 0f7 30 38 3C 36 
24e6b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
24e6f 0f9 30 78 00 00 
24e73 0fa 00 00 00 00 
24e77 0fb 7F 03 03 03 
24e7b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
24e7f 0fd 63 3E 00 00 
24e83 0fe 00 00 00 00 
24e87 0ff 1C 06 03 03 
24e8b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
24e8f 101 63 3E 00 00 
24e93 102 00 00 00 00 
24e97 103 7F 63 60 60 
24e9b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
24e9f 105 0C 0C 00 00 
24ea3 106 00 00 00 00 
24ea7 107 3E 63 63 63 
24eab 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
24eaf 109 63 3E 00 00 
24eb3 10a 00 00 00 00 
24eb7 10b 3E 63 63 63 
24ebb 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
24ebf 10d 30 1E 00 00 
24ec3 10e 00 00 00 00 
24ec7 10f 00 00 00 18 
24ecb 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
24ecf 111 18 18 00 00 
24ed3 112 00 00 00 00 
24ed7 113 00 00 00 18 
24edb 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
24edf 115 18 18 0C 00 
24ee3 116 00 00 00 00 
24ee7 117 00 60 30 18 
24eeb 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
24eef 119 30 60 00 00 
24ef3 11a 00 00 00 00 
24ef7 11b 00 00 00 7E 
24efb 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
24eff 11d 00 00 00 00 
24f03 11e 00 00 00 00 
24f07 11f 00          | 	byte	$00[9]
24f08 120 06 0C 18 30 
24f0c 121 60 30 18 0C 
24f10 122 06 00 00 00 
24f14 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
24f18 124 63 63 30 18 
24f1c 125 18 18 00 18 
24f20 126 18 00 00 00 
24f24 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
24f28 128 3E 63 63 7B 
24f2c 129 7B 7B 3B 03 
24f30 12a 3E 00 00 00 
24f34 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
24f38 12c 1C 36 63 63 
24f3c 12d 7F 63 63 63 
24f40 12e 63 00 00 00 
24f44 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
24f48 130 66 66 66 3E 
24f4c 131 66 66 66 66 
24f50 132 3F 00 00 00 
24f54 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
24f58 134 66 43 03 03 
24f5c 135 03 03 43 66 
24f60 136 3C 00 00 00 
24f64 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
24f68 138 36 66 66 66 
24f6c 139 66 66 66 36 
24f70 13a 1F 00 00 00 
24f74 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
24f78 13c 66 46 16 1E 
24f7c 13d 16 06 46 66 
24f80 13e 7F 00 00 00 
24f84 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
24f88 140 66 46 16 1E 
24f8c 141 16 06 06 06 
24f90 142 0F 00 00 00 
24f94 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
24f98 144 66 43 03 03 
24f9c 145 7B 63 63 66 
24fa0 146 5C 00 00 00 
24fa4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
24fa8 148 63 63 63 7F 
24fac 149 63 63 63 63 
24fb0 14a 63 00 00 00 
24fb4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
24fb8 14c 18 18 18 18 
24fbc 14d 18 18 18 18 | 	byte	$18[8]
24fc0 14e 3C 00 00 00 
24fc4 14f 00 00 00 78 
24fc8 150 30 30 30 30 
24fcc 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
24fd0 152 1E 00 00 00 
24fd4 153 00 00 00 67 
24fd8 154 66 66 36 1E 
24fdc 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
24fe0 156 67 00 00 00 
24fe4 157 00 00 00 0F 
24fe8 158 06 06 06 06 
24fec 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
24ff0 15a 7F 00 00 00 
24ff4 15b 00 00 00 63 
24ff8 15c 77 7F 7F 6B 
24ffc 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
25000 15e 63 00 00 00 
25004 15f 00 00 00 63 
25008 160 67 6F 7F 7B 
2500c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
25010 162 63 00 00 00 
25014 163 00 00 00 3E 
25018 164 63 63 63 63 
2501c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
25020 166 3E 00 00 00 
25024 167 00 00 00 3F 
25028 168 66 66 66 3E 
2502c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
25030 16a 0F 00 00 00 
25034 16b 00 00 00 3E 
25038 16c 63 63 63 63 
2503c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
25040 16e 3E 30 70 00 
25044 16f 00 00 00 3F 
25048 170 66 66 66 3E 
2504c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
25050 172 67 00 00 00 
25054 173 00 00 00 3E 
25058 174 63 63 06 1C 
2505c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
25060 176 3E 00 00 00 
25064 177 00 00 00 7E 
25068 178 7E 5A 18 18 
2506c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
25070 17a 3C 00 00 00 
25074 17b 00 00 00 63 
25078 17c 63 63 63 63 
2507c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
25080 17e 3E 00 00 00 
25084 17f 00 00 00 63 
25088 180 63 63 63 63 
2508c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
25090 182 08 00 00 00 
25094 183 00 00 00 63 
25098 184 63 63 63 6B 
2509c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
250a0 186 36 00 00 00 
250a4 187 00 00 00 63 
250a8 188 63 36 3E 1C 
250ac 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
250b0 18a 63 00 00 00 
250b4 18b 00 00 00 66 
250b8 18c 66 66 66 3C 
250bc 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
250c0 18e 3C 00 00 00 
250c4 18f 00 00 00 7F 
250c8 190 63 61 30 18 
250cc 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
250d0 192 7F 00 00 00 
250d4 193 00 00 00 3C 
250d8 194 0C 0C 0C 0C 
250dc 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
250e0 196 3C 00 00 00 
250e4 197 00 00 00 00 
250e8 198 01 03 07 0E 
250ec 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
250f0 19a 40 00 00 00 
250f4 19b 00 00 00 3C 
250f8 19c 30 30 30 30 
250fc 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
25100 19e 3C 00 00 00 
25104 19f 1C 36 00 00 
25108 1a0 00 00 00 00 
2510c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25110 1a2 00 00 00 00 
25114 1a3 00 00 00 00 
25118 1a4 00 00 00 00 
2511c 1a5 00 00 00 00 
25120 1a6 00          | 	byte	$00[17]
25121 1a6 FF 00 00 0C 
25125 1a7 18 00 00 00 
25129 1a8 00 00 00 00 
2512d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25131 1aa 00 00 00 00 
25135 1ab 00 00 00 00 
25139 1ac 00          | 	byte	$00[9]
2513a 1ac 1E 30 3E 33 
2513e 1ad 33 33 6E 00 
25142 1ae 00 00 00 00 
25146 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2514a 1b0 1E 36 66 66 
2514e 1b1 66 66 3E 00 
25152 1b2 00 00 00 00 
25156 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2515a 1b4 3E 63 03 03 
2515e 1b5 03 63 3E 00 
25162 1b6 00 00 00 00 
25166 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2516a 1b8 3C 36 33 33 
2516e 1b9 33 33 6E 00 
25172 1ba 00 00 00 00 
25176 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2517a 1bc 3E 63 7F 03 
2517e 1bd 03 63 3E 00 
25182 1be 00 00 00 00 
25186 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2518a 1c0 0C 1E 0C 0C 
2518e 1c1 0C 0C 1E 00 
25192 1c2 00 00 00 00 
25196 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2519a 1c4 6E 33 33 33 
2519e 1c5 33 33 3E 30 
251a2 1c6 33 1E 00 00 
251a6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
251aa 1c8 36 6E 66 66 
251ae 1c9 66 66 67 00 
251b2 1ca 00 00 00 00 
251b6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
251ba 1cc 1C 18 18 18 
251be 1cd 18 18 3C 00 
251c2 1ce 00 00 00 00 
251c6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
251ca 1d0 70 60 60 60 
251ce 1d1 60 60 60 66 
251d2 1d2 66 3C 00 00 
251d6 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
251da 1d4 66 36 1E 1E 
251de 1d5 36 66 67 00 
251e2 1d6 00 00 00 00 
251e6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
251ea 1d8 18 18 18 18 
251ee 1d9 18 18       | 	byte	$18[6]
251f0 1da 3C 00 00 00 
251f4 1db 00 00 00 00 
251f8 1dc 00 00 37 7F 
251fc 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
25200 1de 63 00 00 00 
25204 1df 00 00 00 00 
25208 1e0 00 00 3B 66 
2520c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
25210 1e2 66 00 00 00 
25214 1e3 00 00 00 00 
25218 1e4 00 00 3E 63 
2521c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
25220 1e6 3E 00 00 00 
25224 1e7 00 00 00 00 
25228 1e8 00 00 3B 66 
2522c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
25230 1ea 3E 06 06 0F 
25234 1eb 00 00 00 00 
25238 1ec 00 00 6E 33 
2523c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
25240 1ee 3E 30 30 78 
25244 1ef 00 00 00 00 
25248 1f0 00 00 3B 6E 
2524c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
25250 1f2 0F 00 00 00 
25254 1f3 00 00 00 00 
25258 1f4 00 00 3E 63 
2525c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
25260 1f6 3E 00 00 00 
25264 1f7 00 00 00 08 
25268 1f8 0C 0C 3F 0C 
2526c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
25270 1fa 38 00 00 00 
25274 1fb 00 00 00 00 
25278 1fc 00 00 33 33 
2527c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
25280 1fe 6E 00 00 00 
25284 1ff 00 00 00 00 
25288 200 00 00 63 63 
2528c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
25290 202 1C 00 00 00 
25294 203 00 00 00 00 
25298 204 00 00 63 63 
2529c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
252a0 206 36 00 00 00 
252a4 207 00 00 00 00 
252a8 208 00 00 63 36 
252ac 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
252b0 20a 63 00 00 00 
252b4 20b 00 00 00 00 
252b8 20c 00 00 63 63 
252bc 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
252c0 20e 7E 60 30 1F 
252c4 20f 00 00 00 00 
252c8 210 00 00 7F 33 
252cc 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
252d0 212 7F 00 00 00 
252d4 213 00 00 00 70 
252d8 214 18 18 18 0E 
252dc 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
252e0 216 70 00 00 00 
252e4 217 00 00 00 18 
252e8 218 18 18 18 18 
252ec 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
252f0 21a 18 00 00 00 
252f4 21b 00 00 00 0E 
252f8 21c 18 18 18 70 
252fc 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
25300 21e 0E 00 00 00 
25304 21f 6E 3B 00 00 
25308 220 00 00 00 00 
2530c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25310 222 00 00 00 00 
25314 223 00 00 00 00 
25318 224 00 00       | 	byte	$00[10]
2531a 224 08 1C 36 63 
2531e 225 63 63 7F 00 
25322 226 00 00 00 00 
25326 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2532a 228 03 03 03 03 
2532e 229 43 66 3C 18 
25332 22a 30 1E 00 00 
25336 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2533a 22c 33 33 33 33 
2533e 22d 33 33       | 	byte	$33[6]
25340 22e 6E 00 00 00 
25344 22f 00 00 60 30 
25348 230 18 00 3E 63 
2534c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
25350 232 3E 00 00 00 
25354 233 00 00 08 1C 
25358 234 36 00 1E 30 
2535c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
25360 236 6E 00 00 00 
25364 237 00 00 00 00 
25368 238 33 00 1E 30 
2536c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
25370 23a 6E 00 00 00 
25374 23b 00 00 1C 36 
25378 23c 1C 00 33 33 
2537c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
25380 23e 6E 00 00 00 
25384 23f 00 00 60 30 
25388 240 18 00 3E 63 
2538c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
25390 242 3E 00 00 00 
25394 243 00 00 00 00 
25398 244 00 00 3E 63 
2539c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
253a0 246 3E 18 30 1E 
253a4 247 00 00 00 1C 
253a8 248 58 78 38 18 
253ac 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
253b0 24a 3C 00 00 00 
253b4 24b 00 00 00 00 
253b8 24c 63 00 3E 63 
253bc 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
253c0 24e 3E 00 00 00 
253c4 24f 66 33 00 3E 
253c8 250 63 63 63 63 
253cc 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
253d0 252 3E 00 00 00 
253d4 253 00 00 CC 66 
253d8 254 33 00 3E 63 
253dc 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
253e0 256 3E 00 00 00 
253e4 257 00 00 18 3C 
253e8 258 66 00 1C 18 
253ec 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
253f0 25a 3C 00 00 00 
253f4 25b 30 18 00 7F 
253f8 25c 63 61 30 18 
253fc 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
25400 25e 7F 00 00 00 
25404 25f 00 63 00 08 
25408 260 1C 36 63 63 
2540c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
25410 262 63 00 00 00 
25414 263 30 18 00 3C 
25418 264 66 43 03 03 
2541c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
25420 266 3C 00 00 00 
25424 267 30 18 00 7F 
25428 268 66 46 16 1E 
2542c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
25430 26a 7F 00 00 00 
25434 26b 0C 06 00 0F 
25438 26c 06 06 06 06 
2543c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
25440 26e 7F 00 00 00 
25444 26f 30 18 00 1C 
25448 270 18 18 18 18 
2544c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
25450 272 3C 00 00 00 
25454 273 00 00 08 1C 
25458 274 36 00 3E 63 
2545c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
25460 276 3E 00 00 00 
25464 277 00 00 00 00 
25468 278 63 00 3E 63 
2546c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
25470 27a 3E 00 00 00 
25474 27b 00 00 00 6F 
25478 27c 46 26 06 06 
2547c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
25480 27e 7F 00 00 00 
25484 27f 00 00 00 6E 
25488 280 4C 2C 0C 0C 
2548c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
25490 282 1E 00 00 00 
25494 283 30 18 00 3E 
25498 284 63 63 06 1C 
2549c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
254a0 286 3E 00 00 00 
254a4 287 00 00 60 30 
254a8 288 18 00 3E 63 
254ac 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
254b0 28a 3E 00 00 00 
254b4 28b 00 63 00 3E 
254b8 28c 63 63 63 63 
254bc 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
254c0 28e 3E 00 00 00 
254c4 28f 00 63 00 63 
254c8 290 63 63 63 63 
254cc 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
254d0 292 3E 00 00 00 
254d4 293 6C 38 00 7E 
254d8 294 7E 5A 18 18 
254dc 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
254e0 296 3C 00 00 00 
254e4 297 00 00 60 48 
254e8 298 2C 0C 3F 0C 
254ec 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
254f0 29a 38 00 00 00 
254f4 29b 00 00 00 0F 
254f8 29c 26 36 1E 0E 
254fc 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
25500 29e 7F 00 00 00 
25504 29f 00 00 00 00 
25508 2a0 00 63 36 1C 
2550c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
25510 2a2 00 00 00 00 
25514 2a3 00 00       | 	byte	$00[6]
25516 2a3 36 1C 08 00 
2551a 2a4 3E 63 03 03 
2551e 2a5 03 63 3E 00 
25522 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
25526 2a7 30 18 0C 00 
2552a 2a8 1E 30 3E 33 
2552e 2a9 33 33 6E 00 
25532 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
25536 2ab 60 30 18 00 
2553a 2ac 1C 18 18 18 
2553e 2ad 18 18 3C 00 
25542 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
25546 2af 60 30 18 00 
2554a 2b0 3E 63 63 63 
2554e 2b1 63 63 3E 00 
25552 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
25556 2b3 30 18 0C 00 
2555a 2b4 33 33 33 33 
2555e 2b5 33 33 6E 00 
25562 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
25566 2b7 00 08 1C 36 
2556a 2b8 63 63 7F 63 
2556e 2b9 63 63 63 18 
25572 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
25576 2bb 00 00 00 00 
2557a 2bc 1E 30 3E 33 
2557e 2bd 33 33 6E 18 
25582 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
25586 2bf 00 7F 63 61 
2558a 2c0 30 18 0C 06 
2558e 2c1 43 63 7F 00 
25592 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
25596 2c3 36 1C 08 00 
2559a 2c4 7F 33 18 0C 
2559e 2c5 06 63 7F 00 
255a2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
255a6 2c7 00 7F 66 46 
255aa 2c8 16 1E 16 06 
255ae 2c9 46 66 7F 18 
255b2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
255b6 2cb 00 00 00 00 
255ba 2cc 3E 63 7F 03 
255be 2cd 03 63 3E 18 
255c2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
255c6 2cf 00 3C 66 03 
255ca 2d0 1F 03 0F 03 
255ce 2d1 03 66 3C 00 
255d2 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
255d6 2d3 60 30 18 00 
255da 2d4 7F 33 18 0C 
255de 2d5 06 63 7F 00 
255e2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
255e6 2d7 00 3C 66 43 
255ea 2d8 03 03 03 03 
255ee 2d9 43 66 3C 00 
255f2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
255f6 2db 00 00 00 00 
255fa 2dc 3E 63 06 1C 
255fe 2dd 30 63 3E 18 
25602 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
25606 2df 00 00 00 00 
2560a 2e0 00 00       | 	byte	$00[6]
2560c 2e1 6C 36 1B 36 
25610 2e2 6C 00 00 00 
25614 2e3 00 00 00 00 
25618 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2561c 2e5 1B 36 6C 36 
25620 2e6 1B 00 00 00 
25624 2e7 88 22 88 22 
25628 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2562c 2e9 88 22 88 22 
25630 2ea 88 22 88 22 
25634 2eb AA 55 AA 55 
25638 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2563c 2ed AA 55 AA 55 
25640 2ee AA 55 AA 55 
25644 2ef BB EE BB EE 
25648 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2564c 2f1 BB EE BB EE 
25650 2f2 BB EE BB EE 
25654 2f3 18 18 18 18 
25658 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2565c 2f5 18 18 18 18 
25660 2f6 18 18 18 18 
25664 2f7 18 18 18 18 
25668 2f8 18 18 18    | 	byte	$18[15]
2566b 2f8 1F 18 18 18 
2566f 2f9 18 18 18 18 
25673 2fa 18 30 18 00 
25677 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2567b 2fc 63 7F 63 63 
2567f 2fd 63 63 00 00 
25683 2fe 00 1C 36 00 
25687 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2568b 300 63 7F 63 63 
2568f 301 63 63 00 00 
25693 302 00 36 1C 00 
25697 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2569b 304 1E 16 06 46 
2569f 305 66 7F 00 00 
256a3 306 00 00 00 00 
256a7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
256ab 308 1C 30 60 63 
256af 309 63 3E 18 30 
256b3 30a 1E 6C 6C 6C 
256b7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
256bb 30c 6F 6C 6C 6C 
256bf 30d 6C 6C 6C 6C 
256c3 30e 6C 6C 6C 6C 
256c7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
256cb 310 6C 6C 6C 6C 
256cf 311 6C 6C 6C 6C 
256d3 312 6C          | 	byte	$6c[9]
256d4 313 00 00 00 00 
256d8 314 00          | 	byte	$00[5]
256d9 314 7F 60 6F 6C 
256dd 315 6C 6C 6C 6C 
256e1 316 6C 6C 6C 6C 
256e5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
256e9 318 6F 60 7F 00 
256ed 319 00 00 00 00 
256f1 31a 00 00 00 18 
256f5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
256f9 31c 61 30 18 0C 
256fd 31d 06 43 63 7F 
25701 31e 00 00 00 00 
25705 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
25709 320 00 7F 33 18 
2570d 321 0C 06 63 7F 
25711 322 00 00 00 00 
25715 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
25719 324 00 00 1F 18 
2571d 325 18 18 18 18 
25721 326 18 18 18 18 
25725 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25729 328 18 18 F8 00 
2572d 329 00 00 00 00 
25731 32a 00 00 00 18 
25735 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
25739 32c 18 18 FF 00 
2573d 32d 00 00 00 00 
25741 32e 00 00 00 00 
25745 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25749 330 00 00 FF 18 
2574d 331 18 18 18 18 
25751 332 18 18 18 18 
25755 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25759 334 18 18 F8 18 
2575d 335 18 18 18 18 
25761 336 18 18 18 00 
25765 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
25769 338 00 00 FF 00 
2576d 339 00 00 00 00 
25771 33a 00 00 00 18 
25775 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
25779 33c 18 18 FF 18 
2577d 33d 18 18 18 18 
25781 33e 18 18 18 63 
25785 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
25789 340 36 63 63 7F 
2578d 341 63 63 63 63 
25791 342 00 00 00 00 
25795 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
25799 344 00 1E 30 3E 
2579d 345 33 33 33 6E 
257a1 346 00 00 00 6C 
257a5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
257a9 348 EC 0C FC 00 
257ad 349 00 00 00 00 
257b1 34a 00 00 00 00 
257b5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
257b9 34c FC 0C EC 6C 
257bd 34d 6C 6C 6C 6C 
257c1 34e 6C 6C 6C 6C 
257c5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
257c9 350 EF 00 FF 00 
257cd 351 00 00 00 00 
257d1 352 00 00 00 00 
257d5 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
257d9 354 FF 00 EF 6C 
257dd 355 6C 6C 6C 6C 
257e1 356 6C 6C 6C 6C 
257e5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
257e9 358 EC 0C EC 6C 
257ed 359 6C 6C 6C 6C 
257f1 35a 6C 6C 6C 00 
257f5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
257f9 35c FF 00 FF 00 
257fd 35d 00 00 00 00 
25801 35e 00 00 00 6C 
25805 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
25809 360 EF 00 EF 6C 
2580d 361 6C 6C 6C 6C 
25811 362 6C 6C 6C 00 
25815 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
25819 364 63 3E 63 63 
2581d 365 63 63 3E 63 
25821 366 00 00 00 00 
25825 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
25829 368 30 3C 36 33 
2582d 369 33 33 33 6E 
25831 36a 00 00 00 00 
25835 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
25839 36c 66 66 6F 66 
2583d 36d 66 66 36 1F 
25841 36e 00 00 00 36 
25845 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
25849 370 66 66 66 66 
2584d 371 66 66       | 	byte	$66[6]
2584f 371 36 1F 00 00 
25853 372 00 00 63 00 
25857 373 7F 66 46 16 
2585b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2585f 375 66 7F 00 00 
25863 376 00 6C 38 00 
25867 377 38 30 30 3C 
2586b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2586f 379 33 6E 00 00 
25873 37a 00 36 1C 00 
25877 37b 63 67 6F 7F 
2587b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2587f 37d 63 63 00 00 
25883 37e 00 30 18 00 
25887 37f 3C 18 18 18 
2588b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2588f 381 18 3C 00 00 
25893 382 00 3C 66 00 
25897 383 3C 18 18 18 
2589b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2589f 385 18 3C 00 00 
258a3 386 00 00 00 36 
258a7 387 1C 08 00 3E 
258ab 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
258af 389 63 3E 00 00 
258b3 38a 00 18 18 18 
258b7 38b 18 18 18 18 
258bb 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
258bf 38d 00 00 00 00 
258c3 38e 00 00 00 00 
258c7 38f 00 00 00 00 | 	byte	$00[12]
258cb 390 F8 18 18 18 
258cf 391 18 18 18 18 
258d3 392 18 FF FF FF 
258d7 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
258db 394 FF FF FF FF 
258df 395 FF FF FF FF 
258e3 396 FF          | 	byte	$ff[9]
258e4 397 00 00 00 00 
258e8 398 00 00 00    | 	byte	$00[7]
258eb 398 FF FF FF FF 
258ef 399 FF FF FF FF 
258f3 39a FF          | 	byte	$ff[9]
258f4 39b 00 00 00 7E 
258f8 39c 7E 5A 18 18 
258fc 39d 18 18 18 18 
25900 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
25904 39f 1C 36 1C 63 
25908 3a0 63 63 63 63 
2590c 3a1 63 63 63 63 
25910 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
25914 3a3 FF FF FF FF 
25918 3a4 FF FF FF    | 	byte	$ff[7]
2591b 3a4 00 00 00 00 
2591f 3a5 00 00 00 00 
25923 3a6 00          | 	byte	$00[9]
25924 3a7 30 18 00 3E 
25928 3a8 63 63 63 63 
2592c 3a9 63 63 63 63 
25930 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
25934 3ab 00 00 00 1E 
25938 3ac 33 33 33 1B 
2593c 3ad 33 63 63 63 
25940 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
25944 3af 1C 36 00 3E 
25948 3b0 63 63 63 63 
2594c 3b1 63 63 63 63 
25950 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
25954 3b3 30 18 00 63 
25958 3b4 67 6F 7F 7B 
2595c 3b5 73 63 63 63 
25960 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
25964 3b7 00 00 60 30 
25968 3b8 18 00 3B 66 
2596c 3b9 66 66 66 66 
25970 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
25974 3bb 00 00 36 1C 
25978 3bc 08 00 3B 66 
2597c 3bd 66 66 66 66 
25980 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
25984 3bf 36 1C 00 3E 
25988 3c0 63 63 06 1C 
2598c 3c1 30 60 63 63 
25990 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
25994 3c3 00 00 36 1C 
25998 3c4 08 00 3E 63 
2599c 3c5 06 1C 30 63 
259a0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
259a4 3c7 30 18 00 3F 
259a8 3c8 66 66 66 3E 
259ac 3c9 36 66 66 66 
259b0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
259b4 3cb 30 18 00 63 
259b8 3cc 63 63 63 63 
259bc 3cd 63 63 63 63 
259c0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
259c4 3cf 00 00 60 30 
259c8 3d0 18 00 3B 6E 
259cc 3d1 66 06 06 06 
259d0 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
259d4 3d3 66 33 00 63 
259d8 3d4 63 63 63 63 
259dc 3d5 63 63 63 63 
259e0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
259e4 3d7 00 00 60 30 
259e8 3d8 18 00 63 63 
259ec 3d9 63 63 63 63 
259f0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
259f4 3db 30 18 00 66 
259f8 3dc 66 66 66 3C 
259fc 3dd 18 18 18 18 
25a00 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
25a04 3df 00 00 00 08 
25a08 3e0 0C 0C 3F 0C 
25a0c 3e1 0C 0C 0C 6C 
25a10 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
25a14 3e3 30 18 00 00 
25a18 3e4 00 00 00 00 
25a1c 3e5 00 00 00 00 
25a20 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a24 3e7 00 00 00 00 
25a28 3e8 00 00 00 00 | 	byte	$00[8]
25a2c 3e9 7F 00 00 00 
25a30 3ea 00 00 00 00 
25a34 3eb 66 33 00 00 
25a38 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
25a3c 3ed 00 00 00 00 
25a40 3ee 00 00 00 00 
25a44 3ef 00 00 00 00 
25a48 3f0 00 00 00 00 
25a4c 3f1 00 00 00 00 
25a50 3f2 00          | 	byte	$00[21]
25a51 3f2 0C 06 3C 36 
25a55 3f3 1C 00 00 00 
25a59 3f4 00 00 00 00 
25a5d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a61 3f6 00 00 00 63 
25a65 3f7 3E 00 00 00 
25a69 3f8 00 00 00 00 
25a6d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a71 3fa 00 00 00 00 
25a75 3fb 3E 63 06 1C 
25a79 3fc 36 63 63 36 
25a7d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
25a81 3fe 00 00 00 00 
25a85 3ff 00 00 00 00 | 	byte	$00[8]
25a89 400 18 00 7E 00 
25a8d 401 18 00 00 00 
25a91 402 00 00 00 00 
25a95 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a99 404 00 00 00 00 
25a9d 405 00 00 00 00 | 	byte	$00[8]
25aa1 406 18 30 1E 00 
25aa5 407 00 00 1C 36 
25aa9 408 36 1C 00 00 
25aad 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
25ab1 40a 00 00 00 00 
25ab5 40b 63 00 00 00 
25ab9 40c 00 00 00 00 
25abd 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25ac1 40e 00 00 00 18 
25ac5 40f 18 00 00 00 
25ac9 410 00 00 00 00 
25acd 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25ad1 412 00 00 00 00 
25ad5 413 00          | 	byte	$00[5]
25ad6 413 CC 66 33 00 
25ada 414 33 33 33 33 
25ade 415 33 33 6E 00 
25ae2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
25ae6 417 00 3F 66 66 
25aea 418 66 3E 36 66 
25aee 419 66 66 6F 00 
25af2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
25af6 41b 36 1C 08 00 
25afa 41c 3B 6E 66 06 
25afe 41d 06 06 0F 00 
25b02 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
25b06 41f 00 00 00 7E 
25b0a 420 7E 7E 7E 7E 
25b0e 421 7E 7E 00 00 
25b12 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
25b16 423 00 00 00 00 
25b1a 424 00 00 00 00 
25b1e 425 00 00 00 00 
25b22 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25b24 427             | 'vga_font       file "vgafont.def"
25b24 427 00 00 00 00 
      ...             
25b54 433 00 00 00 00 
25b58 434 00 00 00    | st_font        file "st4font.def"
25b5b 434 FF FF 00 00 
25b5f 435 00 00 00 00 
25b63 436 00 18 18 18 
25b67 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25b6b 438 18 18 18 18 
25b6f 439 18 18 18 18 
25b73 43a 18          | 	byte	$18[9]
25b74 43b 00 00 00 00 
25b78 43c 00 00 00    | 	byte	$00[7]
25b7b 43c FF FF 18 18 
25b7f 43d 18 18 18 18 
25b83 43e 18 18 18 18 
25b87 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25b8b 440 FF FF 00 00 
25b8f 441 00 00 00 00 
25b93 442 00 18 18 18 
25b97 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25b9b 444 1F 1F 18 18 
25b9f 445 18 18 18 18 
25ba3 446 18 18 18 18 
25ba7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25bab 448 F8 F8 18 18 
25baf 449 18 18 18 18 
25bb3 44a 18 00 00 00 
25bb7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
25bbb 44c 1F 1F 18 18 
25bbf 44d 18 18 18 18 
25bc3 44e 18 00 00 00 
25bc7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
25bcb 450 F8 F8 18 18 
25bcf 451 18 18 18 18 
25bd3 452 18 18 18 18 
25bd7 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
25bdb 454 1F 1F 00 00 
25bdf 455 00 00 00 00 
25be3 456 00 18 18 18 
25be7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25beb 458 F8 F8 00 00 
25bef 459 00 00 00 00 
25bf3 45a 00 18 18 18 
25bf7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25bfb 45c FF FF 18 18 
25bff 45d 18 18 18 18 
25c03 45e 18 00 00 18 
25c07 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
25c0b 460 66 7E 7E 66 
25c0f 461 66 66 66 30 
25c13 462 18 00 00 7E 
25c17 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
25c1b 464 3E 06 06 06 
25c1f 465 06 7E 7E 18 
25c23 466 0C 30 18 3C 
25c27 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
25c2b 468 06 06 06 66 
25c2f 469 66 7E 3C 00 
25c33 46a 00 30 18 66 
25c37 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
25c3b 46c 7E 7E 76 76 
25c3f 46d 66 66 66 00 
25c43 46e 00 30 18 7C 
25c47 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
25c4b 470 1C 38 70 60 
25c4f 471 60 7E 3E 00 
25c53 472 00 30 18 7E 
25c57 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
25c5b 474 18 0C 0C 06 
25c5f 475 06 7E 7E 00 
25c63 476 00 18 18 00 
25c67 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
25c6b 478 18 18 0C 0C 
25c6f 479 06 7E 7E 00 
25c73 47a 00 30 18 3C 
25c77 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
25c7b 47c 66 66 66 66 
25c7f 47d 66          | 	byte	$66[5]
25c80 47e 7E 3C 00 00 
25c84 47f 00 00 06 06 
25c88 480 06 06 16 1E 
25c8c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
25c90 482 7E 7E 00 00 
25c94 483 00 00 00 00 
25c98 484 00 3C 7C 60 
25c9c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
25ca0 486 7E 7C 30 18 
25ca4 487 00 00 00 00 
25ca8 488 00 3C 7E 66 
25cac 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
25cb0 48a 7E 7C 18 0C 
25cb4 48b 00 00 30 18 
25cb8 48c 00 3C 3E 06 
25cbc 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
25cc0 48e 7E 7C 00 00 
25cc4 48f 00 00 30 18 
25cc8 490 00 3E 7E 66 
25ccc 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
25cd0 492 66 66 00 00 
25cd4 493 00 00 30 18 
25cd8 494 00 7C 7E 06 
25cdc 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
25ce0 496 7E 3E 00 00 
25ce4 497 00 00 30 18 
25ce8 498 00 7E 7E 30 
25cec 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
25cf0 49a 7E 7E 00 00 
25cf4 49b 00 00 18 18 
25cf8 49c 00 7E 7E 30 
25cfc 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
25d00 49e 7E 7E 00 00 
25d04 49f 00 00 30 18 
25d08 4a0 00 3C 7E 66 
25d0c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
25d10 4a2 7E 3C 00 00 
25d14 4a3 00 00 1C 1C 
25d18 4a4 18 18 38 3C 
25d1c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
25d20 4a6 3C 3C 00 00 
25d24 4a7 00 00 00 00 
25d28 4a8 00 00 00 00 
25d2c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25d30 4aa 00 00 00 00 
25d34 4ab 00 00       | 	byte	$00[6]
25d36 4ab 18 18 18 18 
25d3a 4ac 18 18 18 18 | 	byte	$18[8]
25d3e 4ad 00 00 18 18 
25d42 4ae 00 00 00 00 
25d46 4af 66 66 66 66 
25d4a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
25d4e 4b1 00 00 00 00 
25d52 4b2 00 00 00 00 
25d56 4b3 00          | 	byte	$00[9]
25d57 4b3 66 66 FF FF 
25d5b 4b4 66 66 FF FF 
25d5f 4b5 66 66 00 00 
25d63 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
25d67 4b7 7C 7E 06 06 
25d6b 4b8 3E 7C 60 60 
25d6f 4b9 7E 3E 18 18 
25d73 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
25d77 4bb 66 30 30 18 
25d7b 4bc 18 0C 0C 66 
25d7f 4bd 66 00 00 00 
25d83 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
25d87 4bf 66 66 3C 1C 
25d8b 4c0 1C FC FE 66 
25d8f 4c1 66 FE FC 00 
25d93 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
25d97 4c3 18 18 18 18 
25d9b 4c4 00 00 00 00 
25d9f 4c5 00 00 00 00 
25da3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
25da7 4c7 18 1C 0C 0C 
25dab 4c8 0C 0C 0C 0C 
25daf 4c9 1C 18 30 00 
25db3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
25db7 4cb 18 38 30 30 
25dbb 4cc 30 30 30 30 
25dbf 4cd 38 18 0C 00 
25dc3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
25dc7 4cf 66 66 3C 3C 
25dcb 4d0 FF FF 3C 3C 
25dcf 4d1 66 66 00 00 
25dd3 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
25dd7 4d3 00 18 18 18 
25ddb 4d4 7E 7E 18 18 
25ddf 4d5 18 00 00 00 
25de3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
25de7 4d7 00 00 00 00 
25deb 4d8 00 00       | 	byte	$00[6]
25ded 4d9 18 18 18 18 
25df1 4da 18          | 	byte	$18[5]
25df2 4da 0C 04 00 00 
25df6 4db 00 00 00 00 
25dfa 4dc 7E 7E 00 00 
25dfe 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
25e02 4de 00 00 00 00 
25e06 4df 00 00 00 00 
25e0a 4e0 00 00 00 00 
25e0e 4e1 00          | 	byte	$00[13]
25e0f 4e1 18 18 18 00 
25e13 4e2 00 00 00 60 
25e17 4e3 60 60 30 30 
25e1b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
25e1f 4e5 06 06 06 00 
25e23 4e6 00 00 00 3C 
25e27 4e7 7E 66 66 66 
25e2b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
25e2f 4e9 66 7E 3C 00 
25e33 4ea 00 00 00 18 
25e37 4eb 18 1C 1C 18 
25e3b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
25e3f 4ed 18 7E 7E 00 
25e43 4ee 00 00 00 3C 
25e47 4ef 7E 66 66 30 
25e4b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
25e4f 4f1 0C 7E 7E 00 
25e53 4f2 00 00 00 7E 
25e57 4f3 7E 30 30 18 
25e5b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
25e5f 4f5 66 7E 3C 00 
25e63 4f6 00 00 00 30 
25e67 4f7 30 38 38 3C 
25e6b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
25e6f 4f9 7E 30 30 00 
25e73 4fa 00 00 00 7E 
25e77 4fb 7E 06 06 3E 
25e7b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
25e7f 4fd 66 7E 3C 00 
25e83 4fe 00 00 00 38 
25e87 4ff 3C 0E 06 06 
25e8b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
25e8f 501 66 7E 3C 00 
25e93 502 00 00 00 7E 
25e97 503 7E 60 60 30 
25e9b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
25e9f 505 0C 0C 0C 00 
25ea3 506 00 00 00 3C 
25ea7 507 7E 66 66 3C 
25eab 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
25eaf 509 66 7E 3C 00 
25eb3 50a 00 00 00 3C 
25eb7 50b 7E 66 66 7E 
25ebb 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
25ebf 50d 70 3C 1C 00 
25ec3 50e 00 00 00 00 
25ec7 50f 00 00 18 18 
25ecb 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
25ecf 511 18 18 18 00 
25ed3 512 00 00 00 00 
25ed7 513 00 00 18 18 
25edb 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
25edf 515 18 18 18 0C 
25ee3 516 04 00 00 00 
25ee7 517 70 38 1C 0E 
25eeb 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
25eef 519 70 00 00 00 
25ef3 51a 00 00 00 00 
25ef7 51b 00 00 7E 7E 
25efb 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
25eff 51d 00 00 00 00 
25f03 51e 00 00 00 00 | 	byte	$00[8]
25f07 51f 0E 1C 38 70 
25f0b 520 E0 70 38 1C 
25f0f 521 0E 00 00 00 
25f13 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
25f17 523 7E 66 66 30 
25f1b 524 30 18 18 18 
25f1f 525 00 18 18 00 
25f23 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
25f27 527 7E 66 66 66 
25f2b 528 66 36 06 66 
25f2f 529 66 7E 3C 00 
25f33 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
25f37 52b 3C 7E 66 66 
25f3b 52c 66 7E 7E 66 
25f3f 52d 66 66 66 00 
25f43 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
25f47 52f 7E 66 66 7E 
25f4b 530 3E 66 66 66 
25f4f 531 66 7E 3E 00 
25f53 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
25f57 533 7E 66 66 06 
25f5b 534 06 06 06 66 
25f5f 535 66 7E 3C 00 
25f63 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
25f67 537 7E 66 66 66 
25f6b 538 66 66 66 66 
25f6f 539 66 7E 3E 00 
25f73 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
25f77 53b 7E 06 06 3E 
25f7b 53c 3E 06 06 06 
25f7f 53d 06 7E 7E 00 
25f83 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
25f87 53f 7E 06 06 3E 
25f8b 540 3E 06 06 06 
25f8f 541 06 06 06 00 
25f93 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
25f97 543 7E 06 06 76 
25f9b 544 76 66 66 66 
25f9f 545 66 7E 3C 00 
25fa3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
25fa7 547 66 66 66 7E 
25fab 548 7E 66 66 66 
25faf 549 66 66 66 00 
25fb3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
25fb7 54b 7E 18 18 18 
25fbb 54c 18 18 18 18 
25fbf 54d 18 7E 7E 00 
25fc3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
25fc7 54f 60 60 60 60 
25fcb 550 60 60 60    | 	byte	$60[7]
25fce 551 66 66 7E 3C 
25fd2 552 00 00 00 00 
25fd6 553 66 66 36 36 
25fda 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
25fde 555 66 66 C6 C6 
25fe2 556 00 00 00 00 
25fe6 557 06 06 06 06 
25fea 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
25fee 559 06 06 7E 7E 
25ff2 55a 00 00 00 00 
25ff6 55b C6 C6 EE EE 
25ffa 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
25ffe 55d C6 C6 C6 C6 
26002 55e 00 00 00 00 
26006 55f 66 66 66 6E 
2600a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2600e 561 76 66 66 66 
26012 562 00 00 00 00 
26016 563 3C 7E 66 66 
2601a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2601e 565 66 66 7E 3C 
26022 566 00 00 00 00 
26026 567 3E 7E 66 66 
2602a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2602e 569 06 06 06 06 
26032 56a 00 00 00 00 
26036 56b 3C 7E 66 66 
2603a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2603e 56d 66 56 3E 6C 
26042 56e 00 00 00 00 
26046 56f 3E 7E 66 66 
2604a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2604e 571 66 66 C6 C6 
26052 572 00 00 00 00 
26056 573 7C 7E 06 06 
2605a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2605e 575 60 60 7E 3E 
26062 576 00 00 00 00 
26066 577 7E 7E 18 18 
2606a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2606e 579 18 18 18 18 
26072 57a 00 00 00 00 
26076 57b 66 66 66 66 
2607a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2607e 57d 66 66 7E 3C 
26082 57e 00 00 00 00 
26086 57f 66 66 66 66 
2608a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2608e 581 3C 3C 18 18 
26092 582 00 00 00 00 
26096 583 C6 C6 C6 C6 
2609a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2609e 585 FE EE C6 82 
260a2 586 00 00 00 00 
260a6 587 66 66 66 3C 
260aa 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
260ae 589 3C 66 66 66 
260b2 58a 00 00 00 00 
260b6 58b 66 66 66 66 
260ba 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
260be 58d 18 18 18 18 
260c2 58e 00 00 00 00 
260c6 58f 7E 7E 30 30 
260ca 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
260ce 591 06 06 7E 7E 
260d2 592 00 00 00 00 
260d6 593 3C 3C 0C 0C 
260da 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
260de 595 0C 0C 3C 3C 
260e2 596 00 00 00 00 
260e6 597 06 06 0C 0C 
260ea 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
260ee 599 60 60 C0 C0 
260f2 59a 00 00 00 00 
260f6 59b 3C 3C 30 30 
260fa 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
260fe 59d 30 30 3C 3C 
26102 59e 00 00 00 00 
26106 59f 18 18 3C 3C 
2610a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2610e 5a1 00 00 00 00 
26112 5a2 00 00 00 00 
26116 5a3 00 00 00 00 
2611a 5a4 00 00 00 00 
2611e 5a5 00 00       | 	byte	$00[18]
26120 5a6 FE FE 00 00 
26124 5a7 00 00 0C 0C 
26128 5a8 18 18 00 00 
2612c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
26130 5aa 00 00 00 00 
26134 5ab 00 00 00 00 
26138 5ac 00          | 	byte	$00[9]
26139 5ac 3C 7C 60 7C 
2613d 5ad 7E 66 66 7E 
26141 5ae 7C 00 00 00 
26145 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
26149 5b0 3E 7E 66 66 
2614d 5b1 66 66 66 7E 
26151 5b2 3E 00 00 00 
26155 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
26159 5b4 3C 3E 06 06 
2615d 5b5 06 06 06 7E 
26161 5b6 7C 00 00 00 
26165 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
26169 5b8 7C 7E 66 66 
2616d 5b9 66 66 66 7E 
26171 5ba 7C 00 00 00 
26175 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
26179 5bc 3C 7E 66 66 
2617d 5bd 7E 06 06 7E 
26181 5be 7C 00 00 00 
26185 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
26189 5c0 18 7E 7E 18 
2618d 5c1 18 18 18 18 
26191 5c2 18 00 00 00 
26195 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
26199 5c4 7C 7E 66 66 
2619d 5c5 66 66 7E 7C 
261a1 5c6 60 7E 3E 00 
261a5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
261a9 5c8 3E 7E 66 66 
261ad 5c9 66 66 66 66 
261b1 5ca 66 00 00 00 
261b5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
261b9 5cc 1C 1C 18 18 
261bd 5cd 18 18 18 3C 
261c1 5ce 3C 00 00 00 
261c5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
261c9 5d0 30 30 30 30 
261cd 5d1 30 30 30 30 
261d1 5d2 30          | 	byte	$30[9]
261d2 5d2 3E 1E 00 00 
261d6 5d3 06 06 06 36 
261da 5d4 36 1E 1E 1E 
261de 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
261e2 5d6 00 00 00 00 
261e6 5d7 1C 1C 18 18 
261ea 5d8 18 18 18 18 
261ee 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
261f2 5da 00 00 00 00 
261f6 5db 00 00 00    | 	byte	$00[7]
261f9 5dc 6C FE FE D6 
261fd 5dd D6 C6 C6 C6 
26201 5de C6 00 00 00 
26205 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
26209 5e0 3E 7E 66 66 
2620d 5e1 66 66 66 66 
26211 5e2 66 00 00 00 
26215 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
26219 5e4 3C 7E 66 66 
2621d 5e5 66 66 66 7E 
26221 5e6 3C 00 00 00 
26225 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
26229 5e8 3E 7E 66 66 
2622d 5e9 66 66 66 7E 
26231 5ea 3E 06 06 00 
26235 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
26239 5ec 7C 7E 66 66 
2623d 5ed 66 66 66 7E 
26241 5ee 7C 60 60 00 
26245 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
26249 5f0 3E 7E 66 06 
2624d 5f1 06 06 06 06 
26251 5f2 06 00 00 00 
26255 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
26259 5f4 7C 7E 06 0E 
2625d 5f5 3C 70 60 7E 
26261 5f6 3E 00 00 00 
26265 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
26269 5f8 7E 7E 18 18 
2626d 5f9 18 18 18 78 
26271 5fa 70 00 00 00 
26275 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
26279 5fc 66 66 66 66 
2627d 5fd 66 66 66    | 	byte	$66[7]
26280 5fe 7E 7C 00 00 
26284 5ff 00 00 00 00 
26288 600 00 66 66 66 
2628c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
26290 602 18 18 00 00 
26294 603 00 00 00 00 
26298 604 00 C6 C6 D6 
2629c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
262a0 606 C6 82 00 00 
262a4 607 00 00 00 00 
262a8 608 00 66 66 3C 
262ac 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
262b0 60a 66 66 00 00 
262b4 60b 00 00 00 00 
262b8 60c 00 66 66 66 
262bc 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
262c0 60e 7C 60 7E 3E 
262c4 60f 00 00 00 00 
262c8 610 00 7E 7E 30 
262cc 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
262d0 612 7E 7E 00 00 
262d4 613 00 00 30 18 
262d8 614 18 18 18 0C 
262dc 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
262e0 616 18 30 00 00 
262e4 617 00 00 18 18 
262e8 618 18 18 18 18 
262ec 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
262f0 61a 18 18 00 00 
262f4 61b 00 00 0C 18 
262f8 61c 18 18 18 30 
262fc 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
26300 61e 18 0C 00 00 
26304 61f 00 00 6C 7E 
26308 620 36 00 00 00 
2630c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
26310 622 00 00 00 00 
26314 623 00 00 00 00 
26318 624 00          | 	byte	$00[9]
26319 624 18 18 18 18 
2631d 625 18 18 00 00 
26321 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
26324 627             | 'amiga_font     file "amigafont.def"
26324 627 00 6C FE FE 
26328 628 7C 38 10 00 
2632c 629 18 18 18 F8 
26330 62a F8 18 18 18 | a8_font        file "atari8.fnt"
26334 62b C0 C0 C0 C0 
26338 62c C0 C0 C0 C0 | 	byte	$c0[8]
2633c 62d 18 18 18 1F 
26340 62e 1F 00 00 00 
26344 62f 18 18 18 1F 
26348 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2634c 631 00 00 00 1F 
26350 632 1F 18 18 18 
26354 633 C0 E0 70 38 
26358 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2635c 635 03 07 0E 1C 
26360 636 38 70 E0 C0 
26364 637 80 C0 E0 F0 
26368 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2636c 639 00 00 00 00 
26370 63a F0 F0 F0 F0 
26374 63b 01 03 07 0F 
26378 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2637c 63d F0 F0 F0 F0 
26380 63e 00 00 00 00 
26384 63f 0F 0F 0F 0F 
26388 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2638c 641 FF FF 00 00 
26390 642 00 00 00 00 
26394 643 00 00 00 00 
26398 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2639c 645 00 00 00 00 
263a0 646 0F 0F 0F 0F 
263a4 647 00 38 38 EE 
263a8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
263ac 649 00 00 00 F8 
263b0 64a F8 18 18 18 
263b4 64b 00 00 00 FF 
263b8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
263bc 64d 18 18 18 FF 
263c0 64e FF 18 18 18 
263c4 64f 00 00 3C 7E 
263c8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
263cc 651 00 00 00 00 
263d0 652 FF FF FF FF 
263d4 653 03 03 03 03 
263d8 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
263dc 655 00 00 00 FF 
263e0 656 FF 18 18 18 
263e4 657 18 18 18 FF 
263e8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
263ec 659 0F 0F 0F 0F 
263f0 65a 0F 0F 0F 0F | 	byte	$0f[8]
263f4 65b 18 18 18 F8 
263f8 65c F8 00 00 00 
263fc 65d 1E 06 1E 06 
26400 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
26404 65f 00 18 3C 7E 
26408 660 18 18 18 00 
2640c 661 00 18 18 18 
26410 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
26414 663 00 18 0C 7E 
26418 664 0C 18 00 00 
2641c 665 00 18 30 7E 
26420 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
26424 667 00 00 00 00 
26428 668 00 00 00 00 
2642c 669 00          | 	byte	$00[9]
2642d 669 18 18 18 18 
26431 66a 00 18 00 00 
26435 66b 66 66 66 00 
26439 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2643d 66d 66 FF 66 66 
26441 66e FF 66 00 18 
26445 66f 7C 06 3C 60 
26449 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2644d 671 66 36 18 0C 
26451 672 66 62 00 38 
26455 673 6C 38 1C F6 
26459 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2645d 675 18 18 18 00 
26461 676 00 00 00 00 
26465 677 70 38 18 18 
26469 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2646d 679 0E 1C 18 18 
26471 67a 1C 0E 00 00 
26475 67b 66 3C FF 3C 
26479 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2647d 67d 18 18 7E 18 
26481 67e 18 00 00 00 
26485 67f 00 00 00 00 
26489 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2648d 681 00 00 7E 00 
26491 682 00 00 00 00 
26495 683 00 00 00 00 
26499 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2649d 685 60 30 18 0C 
264a1 686 06 02 00 00 
264a5 687 3C 66 76 6E 
264a9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
264ad 689 18 1C 18 18 
264b1 68a 18 7E 00 00 
264b5 68b 3C 66 30 18 
264b9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
264bd 68d 7E 30 18 30 
264c1 68e 66 3C 00 00 
264c5 68f 30 38 3C 36 
264c9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
264cd 691 7E 06 3E 60 
264d1 692 66 3C 00 00 
264d5 693 3C 06 3E 66 
264d9 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
264dd 695 7E 60 30 18 
264e1 696 0C 0C 00 00 
264e5 697 3C 66 3C 66 
264e9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
264ed 699 3C 66 7C 60 
264f1 69a 30 1C 00 00 
264f5 69b 00 18 18 00 
264f9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
264fd 69d 00 18 18 00 
26501 69e 18 18 0C 60 
26505 69f 30 18 0C 18 
26509 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2650d 6a1 00 7E 00 00 
26511 6a2 7E 00 00 06 
26515 6a3 0C 18 30 18 
26519 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2651d 6a5 3C 66 30 18 
26521 6a6 00 18 00 00 
26525 6a7 3C 66 76 76 
26529 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2652d 6a9 18 3C 66 66 
26531 6aa 7E 66 00 00 
26535 6ab 3E 66 3E 66 
26539 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2653d 6ad 3C 66 06 06 
26541 6ae 66 3C 00 00 
26545 6af 1E 36 66 66 
26549 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2654d 6b1 7E 06 3E 06 
26551 6b2 06 7E 00 00 
26555 6b3 7E 06 3E 06 
26559 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2655d 6b5 7C 06 06 76 
26561 6b6 66 7C 00 00 
26565 6b7 66 66 7E 66 
26569 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2656d 6b9 7E 18 18 18 
26571 6ba 18 7E 00 00 
26575 6bb 60 60 60 60 
26579 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2657d 6bd 66 36 1E 1E 
26581 6be 36 66 00 00 
26585 6bf 06 06 06 06 
26589 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2658d 6c1 C6 EE FE D6 
26591 6c2 C6 C6 00 00 
26595 6c3 66 6E 7E 7E 
26599 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2659d 6c5 3C 66 66 66 
265a1 6c6 66 3C 00 00 
265a5 6c7 3E 66 66 3E 
265a9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
265ad 6c9 3C 66 66 66 
265b1 6ca 36 6C 00 00 
265b5 6cb 3E 66 66 3E 
265b9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
265bd 6cd 3C 06 3C 60 
265c1 6ce 60 3C 00 00 
265c5 6cf 7E 18 18 18 
265c9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
265cd 6d1 66 66 66 66 
265d1 6d2 66          | 	byte	$66[5]
265d2 6d2 7E 00 00 66 
265d6 6d3 66 66 66 3C 
265da 6d4 18 00 00 C6 
265de 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
265e2 6d6 C6 00 00 66 
265e6 6d7 66 3C 3C 66 
265ea 6d8 66 00 00 66 
265ee 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
265f2 6da 18 00 00 7E 
265f6 6db 30 18 0C 06 
265fa 6dc 7E 00 00 78 
265fe 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
26602 6de 78 00 00 02 
26606 6df 06 0C 18 30 
2660a 6e0 60 00 00 1E 
2660e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
26612 6e2 1E 00 00 10 
26616 6e3 38 6C C6 00 
2661a 6e4 00 00 00 00 
2661e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
26622 6e6 FF 00 00 18 
26626 6e7 3C 7E 7E 3C 
2662a 6e8 18 00 00 00 
2662e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
26632 6ea 7C 00 00 06 
26636 6eb 06 3E 66 66 
2663a 6ec 3E 00 00 00 
2663e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
26642 6ee 3C 00 00 60 
26646 6ef 60 7C 66 66 
2664a 6f0 7C 00 00 00 
2664e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
26652 6f2 3C 00 00 70 
26656 6f3 18 7C 18 18 
2665a 6f4 18 00 00 00 
2665e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
26662 6f6 60 3E 00 06 
26666 6f7 06 3E 66 66 
2666a 6f8 66 00 00 18 
2666e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
26672 6fa 3C 00 00 60 
26676 6fb 00 60 60 60 
2667a 6fc 60 3C 00 06 
2667e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
26682 6fe 66 00 00 1C 
26686 6ff 18 18 18 18 
2668a 700 3C 00 00 00 
2668e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
26692 702 C6 00 00 00 
26696 703 3E 66 66 66 
2669a 704 66 00 00 00 
2669e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
266a2 706 3C 00 00 00 
266a6 707 3E 66 66 3E 
266aa 708 06 06 00 00 
266ae 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
266b2 70a 60 60 00 00 
266b6 70b 3E 66 06 06 
266ba 70c 06 00 00 00 
266be 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
266c2 70e 3E 00 00 18 
266c6 70f 7E 18 18 18 
266ca 710 70 00 00 00 
266ce 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
266d2 712 7C 00 00 00 
266d6 713 66 66 66 3C 
266da 714 18 00 00 00 
266de 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
266e2 716 6C 00 00 00 
266e6 717 66 3C 18 3C 
266ea 718 66 00 00 00 
266ee 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
266f2 71a 30 1E 00 00 
266f6 71b 7E 30 18 0C 
266fa 71c 7E 00 00 18 
266fe 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
26702 71e 3C 00 18 18 
26706 71f 18 18 18 18 
2670a 720 18 18 00 7E 
2670e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
26712 722 60 00 10 18 
26716 723 1C 1E 1C 18 
2671a 724 10 00 08 18 
2671e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
26722 726 08 00       | 	byte	$08, $00
26724 727 00 00 00 00 
26728 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
26729 728 80 00 00 00 
2672d 729 00 80 00 00 
26731 72a 80 80 00 00 
26735 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
26739 72c 80 00 80 00 
2673d 72d 00 40 80 00 
26741 72e AA AA AA 00 
26745 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
26749 730 FF 00 00 00 
2674d 731 00 FF 00 00 
26751 732 FF FF 00 00 
26755 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
26759 734 FF 00 FF 00 
2675d 735 00 FF FF 00 
26761 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
26764 737 00 00 00 00 
26768 738 00          | ataripalette   file "ataripalettep2.def"
26769 738 11 11 11 00 
2676d 739 22 22 22 00 
26771 73a 33 33 33 00 
26775 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
26779 73c 55 55 55 00 
2677d 73d 66 66 66 00 
26781 73e 77 77 77 00 
26785 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
26789 740 99 99 99 00 
2678d 741 AA AA AA 00 
26791 742 BB BB BB 00 
26795 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
26799 744 DD DD DD 00 
2679d 745 EE EE EE 00 
267a1 746 FF FF FF 00 
267a5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
267a9 748 00 14 40 00 
267ad 749 00 1E 60 00 
267b1 74a 00 28 80 00 
267b5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
267b9 74c 00 3C BF 00 
267bd 74d 00 46 DF 00 
267c1 74e 00 50 FF 00 
267c5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
267c9 750 39 77 FF 00 
267cd 751 55 8A FF 00 
267d1 752 71 9E FF 00 
267d5 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
267d9 754 AA C5 FF 00 
267dd 755 C6 D8 FF 00 
267e1 756 E3 EC FF 00 
267e5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
267e9 758 00 00 40 00 
267ed 759 00 00 60 00 
267f1 75a 00 00 80 00 
267f5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
267f9 75c 00 00 BF 00 
267fd 75d 00 00 DF 00 
26801 75e 00 00 FF 00 
26805 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
26809 760 39 39 FF 00 
2680d 761 55 55 FF 00 
26811 762 71 71 FF 00 
26815 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
26819 764 AA AA FF 00 
2681d 765 C6 C6 FF 00 
26821 766 E3 E3 FF 00 
26825 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
26829 768 20 00 40 00 
2682d 769 30 00 60 00 
26831 76a 40 00 80 00 
26835 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
26839 76c 60 00 BF 00 
2683d 76d 70 00 DF 00 
26841 76e 80 00 FF 00 
26845 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
26849 770 9C 39 FF 00 
2684d 771 AA 55 FF 00 
26851 772 B8 71 FF 00 
26855 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
26859 774 D5 AA FF 00 
2685d 775 E3 C6 FF 00 
26861 776 F1 E3 FF 00 
26865 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
26869 778 40 00 40 00 
2686d 779 60 00 60 00 
26871 77a 80 00 80 00 
26875 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
26879 77c BF 00 BF 00 
2687d 77d DF 00 DF 00 
26881 77e FF 00 FF 00 
26885 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
26889 780 FF 39 FF 00 
2688d 781 FF 55 FF 00 
26891 782 FF 71 FF 00 
26895 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
26899 784 FF AA FF 00 
2689d 785 FF C6 FF 00 
268a1 786 FF E3 FF 00 
268a5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
268a9 788 40 00 20 00 
268ad 789 60 00 30 00 
268b1 78a 80 00 40 00 
268b5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
268b9 78c BF 00 60 00 
268bd 78d DF 00 70 00 
268c1 78e FF 00 80 00 
268c5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
268c9 790 FF 39 9C 00 
268cd 791 FF 55 AA 00 
268d1 792 FF 71 B8 00 
268d5 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
268d9 794 FF AA D5 00 
268dd 795 FF C6 E3 00 
268e1 796 FF E3 F1 00 
268e5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
268e9 798 40 00 00 00 
268ed 799 60 00 00 00 
268f1 79a 80 00 00 00 
268f5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
268f9 79c BF 00 00 00 
268fd 79d DF 00 00 00 
26901 79e FF 00 00 00 
26905 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
26909 7a0 FF 39 39 00 
2690d 7a1 FF 55 55 00 
26911 7a2 FF 71 71 00 
26915 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
26919 7a4 FF AA AA 00 
2691d 7a5 FF C6 C6 00 
26921 7a6 FF E3 E3 00 
26925 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
26929 7a8 40 10 00 00 
2692d 7a9 60 18 00 00 
26931 7aa 80 20 00 00 
26935 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
26939 7ac BF 30 00 00 
2693d 7ad DF 38 00 00 
26941 7ae FF 40 00 00 
26945 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
26949 7b0 FF 6A 39 00 
2694d 7b1 FF 80 55 00 
26951 7b2 FF 95 71 00 
26955 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
26959 7b4 FF BF AA 00 
2695d 7b5 FF D5 C6 00 
26961 7b6 FF EA E3 00 
26965 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
26969 7b8 40 20 00 00 
2696d 7b9 60 30 00 00 
26971 7ba 80 40 00 00 
26975 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
26979 7bc BF 60 00 00 
2697d 7bd DF 70 00 00 
26981 7be FF 80 00 00 
26985 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
26989 7c0 FF 9C 39 00 
2698d 7c1 FF AA 55 00 
26991 7c2 FF B8 71 00 
26995 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
26999 7c4 FF D5 AA 00 
2699d 7c5 FF E3 C6 00 
269a1 7c6 FF F1 E3 00 
269a5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
269a9 7c8 40 30 00 00 
269ad 7c9 60 48 00 00 
269b1 7ca 80 60 00 00 
269b5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
269b9 7cc BF 90 00 00 
269bd 7cd DF A8 00 00 
269c1 7ce FF C0 00 00 
269c5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
269c9 7d0 FF CE 39 00 
269cd 7d1 FF D5 55 00 
269d1 7d2 FF DC 71 00 
269d5 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
269d9 7d4 FF EA AA 00 
269dd 7d5 FF F1 C6 00 
269e1 7d6 FF F8 E3 00 
269e5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
269e9 7d8 30 40 00 00 
269ed 7d9 48 60 00 00 
269f1 7da 60 80 00 00 
269f5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
269f9 7dc 90 BF 00 00 
269fd 7dd A8 DF 00 00 
26a01 7de C0 FF 00 00 
26a05 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
26a09 7e0 CE FF 39 00 
26a0d 7e1 D5 FF 55 00 
26a11 7e2 DC FF 71 00 
26a15 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
26a19 7e4 EA FF AA 00 
26a1d 7e5 F1 FF C6 00 
26a21 7e6 F8 FF E3 00 
26a25 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
26a29 7e8 00 40 00 00 
26a2d 7e9 00 60 00 00 
26a31 7ea 00 80 00 00 
26a35 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
26a39 7ec 00 BF 00 00 
26a3d 7ed 00 DF 00 00 
26a41 7ee 00 FF 00 00 
26a45 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
26a49 7f0 39 FF 39 00 
26a4d 7f1 55 FF 55 00 
26a51 7f2 71 FF 71 00 
26a55 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
26a59 7f4 AA FF AA 00 
26a5d 7f5 C6 FF C6 00 
26a61 7f6 E3 FF E3 00 
26a65 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
26a69 7f8 00 40 14 00 
26a6d 7f9 00 60 1E 00 
26a71 7fa 00 80 28 00 
26a75 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
26a79 7fc 00 BF 3C 00 
26a7d 7fd 00 DF 46 00 
26a81 7fe 00 FF 50 00 
26a85 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
26a89 800 39 FF 77 00 
26a8d 801 55 FF 8A 00 
26a91 802 71 FF 9E 00 
26a95 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
26a99 804 AA FF C5 00 
26a9d 805 C6 FF D8 00 
26aa1 806 E3 FF EC 00 
26aa5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
26aa9 808 00 40 28 00 
26aad 809 00 60 3C 00 
26ab1 80a 00 80 50 00 
26ab5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
26ab9 80c 00 BF 78 00 
26abd 80d 00 DF 8C 00 
26ac1 80e 00 FF A0 00 
26ac5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
26ac9 810 39 FF B5 00 
26acd 811 55 FF C0 00 
26ad1 812 71 FF CA 00 
26ad5 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
26ad9 814 AA FF DF 00 
26add 815 C6 FF EA 00 
26ae1 816 E3 FF F4 00 
26ae5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
26ae9 818 00 40 40 00 
26aed 819 00 60 60 00 
26af1 81a 00 80 80 00 
26af5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
26af9 81c 00 BF BF 00 
26afd 81d 00 DF DF 00 
26b01 81e 00 FF FF 00 
26b05 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
26b09 820 39 FF FF 00 
26b0d 821 55 FF FF 00 
26b11 822 71 FF FF 00 
26b15 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
26b19 824 AA FF FF 00 
26b1d 825 C6 FF FF 00 
26b21 826 E3 FF FF 00 
26b25 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
26b29 828 00 28 40 00 
26b2d 829 00 3C 60 00 
26b31 82a 00 50 80 00 
26b35 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
26b39 82c 00 78 BF 00 
26b3d 82d 00 8C DF 00 
26b41 82e 00 A0 FF 00 
26b45 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
26b49 830 39 B5 FF 00 
26b4d 831 55 C0 FF 00 
26b51 832 71 CA FF 00 
26b55 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
26b59 834 AA DF FF 00 
26b5d 835 C6 EA FF 00 
26b61 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
26b64 837             | 
26b64 837             | '**********************************************************************************
26b64 837             | '
26b64 837             | '        Timings and colors definitions
26b64 837             | '
26b64 837             | '**********************************************************************************
26b64 837             | 
26b64 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
26b64 837 10 00 00 00 
26b68 838 50 00 00 00 
26b6c 839 0C 00 00 00 
26b70 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
26b74 83b 08 00 00 00 
26b78 83c 04 00 00 00 
26b7c 83d 08 00 00 00 
26b80 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
26b84 83f 40 02 00 00 
26b88 840 6A 8C 15 14 
26b8c 841 FB 06 B7 01 
26b90 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
26b94 843 00 00 00 00 
26b98 844 C0 00 00 00 
26b9c 845 00 00 00 00 
26ba0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26ba4 847 00 75 C7 97 
26ba8 848 27 47 F6 0A 
26bac 849 05 79 CB 9B 
26bb0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
26bb4 84b             | 
26bb4 84b             | ''--------  Initialization  ----------------------------------------------------------------
26bb4 84b             | 
26bb4 84b 28 0C 64 FD | hdmi            setq    #6
26bb8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
26bbc 84d 28 10 64 FD |                 setq    #8
26bc0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
26bc4 84f             | 
26bc4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
26bc8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
26bcc 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
26bd0 852 D6 C6 01 F1 |                 add     t1,hbase
26bd4 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
26bd8 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
26bdc 855 7B 0B 80 5F 
26be0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
26be4 857 66 66 86 FF 
26be8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
26bec 859             | '
26bec 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
26bf0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
26bf4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
26bf8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
26bfc 85d             | 
26bfc 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
26c00 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
26c04 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
26c08 860             | 
26c08 860             | ''--------  frame rendering main loop  ---------------------------------------------------
26c08 860             | 
26c08 860 28 06 64 FD | p101            setq 	#3
26c0c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
26c10 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
26c14 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
26c18 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
26c1c 865 00 A0 05 F6 |                 mov     dlinum, #0
26c20 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
26c24 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
26c28 868             | 
26c28 868             | 
26c28 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
26c2c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
26c30 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
26c34 86b             |                 
26c34 86b             | 
26c34 86b             | 
26c34 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
26c34 86b             |   
26c34 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
26c38 86c 29 FE 65 3D |          if_nc  setq2   #255
26c3c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
26c40 86e             | 
26c40 86e             | '' -----   up porch (before the picture)
26c40 86e             | 
26c40 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
26c44 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
26c48 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
26c4c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
26c50 872             |  
26c50 872             |    
26c50 872             |  
26c50 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
26c54 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
26c58 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
26c5c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
26c60 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
26c64 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
26c68 878             | 
26c68 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
26c6c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
26c70 87a 48 00 B0 FD | 		call    #dli
26c74 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
26c78 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
26c7c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
26c80 87e             |                 	
26c80 87e             |                 
26c80 87e             | 
26c80 87e             |  
26c80 87e             | '' ------- the main screen drawing starts here
26c80 87e             | 
26c80 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
26c84 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
26c88 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
26c8c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
26c90 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
26c94 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
26c98 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
26c9c 885             |               
26c9c 885             | 
26c9c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
26ca0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
26ca4 887             | 
26ca4 887             | ' ---------------- All visible lines displayed now, start vblank  
26ca4 887             | 
26ca4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
26ca8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
26cac 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
26cb0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
26cb4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
26cb8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
26cbc 88d             | 
26cbc 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
26cbc 88d             | 
26cbc 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
26cbc 88d             | 
26cbc 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
26cc0 88e             | 
26cc0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
26cc4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
26cc8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
26ccc 891             | 
26ccc 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
26cd0 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
26cd4 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
26cd8 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
26cdc 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
26ce0 896             | 
26ce0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
26ce4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
26ce8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
26cec 899 70 00 90 AD |     if_z        jmp     #preload
26cf0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
26cf4 89b 94 00 90 AD |     if_z        jmp     #preload2
26cf8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
26cfc 89d 0C 00 90 AD |     if_z        jmp     #p390
26d00 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
26d04 89f 28 00 90 AD |     if_z        jmp     #p391  
26d08 8a0             | 
26d08 8a0 2D 00 64 FD | p308            ret
26d0c 8a1             |    
26d0c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
26d10 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
26d14 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
26d18 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
26d1c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
26d20 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
26d24 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
26d28 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
26d2c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
26d30 8aa             |  
26d30 8aa             | '' --------  Reload palette. To do 
26d30 8aa             | 
26d30 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
26d34 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
26d38 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
26d3c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
26d40 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
26d44 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
26d48 8b0 70 FF 9F FD |         	jmp     #dli                
26d4c 8b1             |       
26d4c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
26d4c 8b1             | 
26d4c 8b1             | 
26d4c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
26d4c 8b1             | 
26d4c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
26d50 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
26d54 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
26d58 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
26d5c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
26d60 8b6             |         
26d60 8b6             | '' -------------- Preload a line from PSRAM        
26d60 8b6             |         
26d60 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
26d64 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
26d68 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
26d6c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
26d70 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
26d74 8bb             | 
26d74 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
26d78 8bc 32 B7 01 F6 |                 mov     buf2,a1024
26d7c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
26d80 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
26d84 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
26d88 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
26d8c 8c1             |  
26d8c 8c1             |  
26d8c 8c1             | preload2      '  incmod  dlinum,#3
26d8c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
26d90 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
26d94 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
26d98 8c4 28 02 64 FD |                 setq	#1
26d9c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
26da0 8c6             |                 
26da0 8c6             | 
26da0 8c6             | '' -------------- Draw sprites
26da0 8c6             | 
26da0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
26da4 8c7 10 5C 0E F5 | 		and t8,#16 wz
26da8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
26dac 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
26db0 8ca             | 		
26db0 8ca             | 
26db0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
26db4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
26db8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
26dbc 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
26dc0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
26dc4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
26dc8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
26dcc 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
26dd0 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
26dd4 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
26dd8 8d4 01 52 86 F1 |                 sub     sprite_h,#1
26ddc 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
26de0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
26de4 8d7             | 
26de4 8d7             | 
26de4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
26de8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
26dec 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
26df0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
26df4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
26df8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
26dfc 8dd 00 5E 06 F6 |                 mov 	t9,#0
26e00 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
26e04 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
26e08 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
26e0c 8e1             |      
26e0c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
26e10 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
26e14 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
26e18 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
26e1c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
26e20 8e6             |                 
26e20 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
26e24 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
26e28 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
26e2c 8e9             |   		
26e2c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
26e30 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
26e34 8eb             | 
26e34 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
26e38 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
26e3c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
26e40 8ee             |  
26e40 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
26e44 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
26e48 8f0 10 00 90 CD |      if_c 	jmp     #p899		
26e4c 8f1             | 	
26e4c 8f1             | 	
26e4c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
26e50 8f2 28 CD 01 F1 | 		add	t4,sprite_w
26e54 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
26e58 8f4             | 
26e58 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
26e5c 8f5             | 
26e5c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
26e60 8f6 01 58 86 F1 | 	 	sub     t6,#1
26e64 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
26e68 8f8             | 
26e68 8f8 28 58 62 FD |                 setq   	t6
26e6c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
26e70 8fa 28 5D 02 F6 |                 mov t8,sprite_w
26e74 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
26e78 8fc 24 00 90 AD |         if_z    jmp #p898
26e7c 8fd             |          
26e7c 8fd             |         
26e7c 8fd 70 5F 06 F6 |                 mov  t9,#368
26e80 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
26e84 8ff             | 
26e84 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
26e88 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
26e8c 901 FF FF 7F FF 
26e90 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
26e94 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
26e98 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
26e9c 905 2D 01 00 F5 |                 and 0-0, t7
26ea0 906             |                
26ea0 906             | 
26ea0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
26ea4 907 E5 E0 7A FA |                 wmlong 368,t3				
26ea8 908             |                 
26ea8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
26eac 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
26eb0 90a 2D 00 64 FD |                 ret
26eb4 90b             | 	
26eb4 90b             | 	
26eb4 90b             |                
26eb4 90b             |  
26eb4 90b             | '' -------------- Graphics line ------------------------------------------------------------
26eb4 90b             |  
26eb4 90b             | 
26eb4 90b             | '' consts and vars
26eb4 90b             | 
26eb4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
26eb8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
26ebc 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
26ec0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
26ec4 90f             | 
26ec4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
26ec8 910             | 
26ec8 910             | '------ these longs will be set by setmode function
26ec8 910             | 
26ec8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
26ecc 911 00 00 00 00 | m_sn            long    0        'sync
26ed0 912 00 00 00 00 | m_bv            long    0        'blanks before visible
26ed4 913 00 00 00 00 | m_vi            long    0        'visible pixels #
26ed8 914             | 'm_border        long    0        'left/right borders
26ed8 914 00 00 00 00 | i_upporch       long    0        'up porch lines
26edc 915 00 00 00 00 | i_vsync         long    0        'vsync lines
26ee0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
26ee4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
26ee8 918 00 00 00 00 | i_totalvis      long    0
26eec 919             | 
26eec 919             | '-------------------------------------
26eec 919             |  
26eec 919 00 00 00 00 | linenum         long    0
26ef0 91a 00 00 00 00 | frames          long    0
26ef4 91b 00 00 00 00 | dlinum long 0
26ef8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
26efc 91d             | 
26efc 91d 00 00 00 00 | vblankptr       long    0
26f00 91e 00 00 00 00 | modeptr         long    0
26f04 91f 00 00 00 00 | paletteptr      long    0
26f08 920 00 00 00 00 | dlptr           long    0
26f0c 921 01 00 00 00 | hbase           long    1
26f10 922 00 00 00 00 | mailbox         long    0
26f14 923 00 00 00 00 | spriteptr          long 0
26f18 924             | 
26f18 924 00 00 00 00 | cmd             long    0
26f1c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
26f20 926 00 04 00 00 | buf2            long    1024
26f24 927 01 00 00 00 | dlptr2          long    1
26f28 928 01 00 00 00 | dl              long    1
26f2c 929             | 
26f2c 929 00 00 00 00 | buf1c long 0
26f30 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
26f34 92b 01 00 00 00 | framebuf2       long    1
26f38 92c 01 00 00 00 | hsync0          long    1
26f3c 92d 01 00 00 00 | hsync1          long    1
26f40 92e             | 
26f40 92e 01 00 00 00 | t1              long    1
26f44 92f 00 00 00 00 | t2 long 0
26f48 930 00 00 00 00 | t3 long 0
26f4c 931 00 00 00 00 | t4 long 0
26f50 932             | 
26f50 932 00 00 00 00 | rcnt            long    0  'dl repeat count
26f54 933 00 00 00 00 | rcnt2           long    0
26f58 934 00 00 00 00 | rcnt2a          long    0
26f5c 935 00 00 00 00 | roffset         long    0
26f60 936 00 00 00 00 | rdl             long    0  'dl repeat line
26f64 937 00 00 00 00 | dlc             long    0  'dl command
26f68 938             | 
26f68 938 FF FF FF FF | affffffff       long    $ffffffff
26f6c 939 00 00 00 00 | sprite1pointer long 0
26f70 93a 00 00 00 00 | sprite1xy      long 0
26f74 93b 00 00 00 00 | sprite1wh      long 0
26f78 93c 00 00 00 00 | sprite2pointer long 0
26f7c 93d 00 00 00 00 | sprite2xy      long 0
26f80 93e 00 00 00 00 | sprite2wh      long 0
26f84 93f 00 00 00 00 | sprite3pointer long 0
26f88 940 00 00 00 00 | sprite3xy      long 0
26f8c 941 00 00 00 00 | sprite3wh      long 0
26f90 942 00 00 00 00 | sprite4pointer long 0
26f94 943 00 00 00 00 | sprite4xy      long 0
26f98 944 00 00 00 00 | sprite4wh      long 0
26f9c 945 00 00 00 00 | sprite5pointer long 0
26fa0 946 00 00 00 00 | sprite5xy      long 0
26fa4 947 00 00 00 00 | sprite5wh      long 0
26fa8 948 00 00 00 00 | sprite6pointer long 0
26fac 949 00 00 00 00 | sprite6xy      long 0
26fb0 94a 00 00 00 00 | sprite6wh      long 0
26fb4 94b 00 00 00 00 | sprite7pointer long 0
26fb8 94c 00 00 00 00 | sprite7xy      long 0
26fbc 94d 00 00 00 00 | sprite7wh      long 0
26fc0 94e 00 00 00 00 | sprite8pointer long 0
26fc4 94f 00 00 00 00 | sprite8xy      long 0
26fc8 950 00 00 00 00 | sprite8wh      long 0
26fcc 951 00 00 00 00 | sprite9pointer long 0
26fd0 952 00 00 00 00 | sprite9xy      long 0
26fd4 953 00 00 00 00 | sprite9wh      long 0
26fd8 954 00 00 00 00 | sprite10pointer long 0
26fdc 955 00 00 00 00 | sprite10xy      long 0
26fe0 956 00 00 00 00 | sprite10wh      long 0
26fe4 957 00 00 00 00 | sprite11pointer long 0
26fe8 958 00 00 00 00 | sprite11xy      long 0
26fec 959 00 00 00 00 | sprite11wh      long 0
26ff0 95a 00 00 00 00 | sprite12pointer long 0
26ff4 95b 00 00 00 00 | sprite12xy      long 0
26ff8 95c 00 00 00 00 | sprite12wh      long 0
26ffc 95d 00 00 00 00 | sprite13pointer long 0
27000 95e 00 00 00 00 | sprite13xy      long 0
27004 95f 00 00 00 00 | sprite13wh      long 0
27008 960 00 00 00 00 | sprite14pointer long 0
2700c 961 00 00 00 00 | sprite14xy      long 0
27010 962 00 00 00 00 | sprite14wh      long 0
27014 963 00 00 00 00 | sprite15pointer long 0
27018 964 00 00 00 00 | sprite15xy      long 0
2701c 965 00 00 00 00 | sprite15wh      long 0
27020 966 00 00 00 00 | sprite16pointer long 0
27024 967 00 00 00 00 | sprite16xy      long 0
27028 968 00 00 00 00 | sprite16wh      long 0
2702c 969 00 00 00 00 | sprite17pointer long 0
27030 96a 00 00 00 00 | sprite17xy      long 0
27034 96b 00 00 00 00 | sprite17wh      long 0
27038 96c 00 00 00 00 | sprite18pointer long 0
2703c 96d 00 00 00 00 | sprite18xy      long 0
27040 96e 00 00 00 00 | sprite18wh      long 0
27044 96f 00 00 00 00 | spritenum long 0
27048 970             | 
27048 970 00 00 00 00 | spriteline long 0
2704c 971 84 03 00 00 | sprite_x long 900
27050 972 00 00 00 00 | sprite_y long 0
27054 973 10 00 00 00 | sprite_w long 16
27058 974 40 00 00 00 | sprite_h long 64
2705c 975 00 00 00 00 | l2 long 0
27060 976 00 00 00 00 | t5 long 0
27064 977 00 00 00 00 | t6 long 0
27068 978 00 00 00 00 | t7 long 0
2706c 979 00 00 00 00 | t8 long 0
27070 97a 00 00 00 00 | t9 long 0
27074 97b 00 00 00 00 | preloadaddr long 0
27078 97c 00 00 00 00 | preloadlineaddr long 0
2707c 97d 00 04 00 00 | a1024 long 1024
27080 97e             | 
27080 97e E0 03 00 00 | aa long 992
27084 97f FF 03 00 00 | a1023 long 1023
27088 980 00 10 00 00 | a4096 long 4096
2708c 981             |  fit 368
2708c 981             | _psram_spin2_dat_
2708c 981 00 00 00 00 
      ...             
27184 9bf 00 00 00 00 
27188 9c0 00 00 00 00 |     listdata long 0[8*8]
2718c 9c1             |             orgh
2718c                 | 
2718c                 | ' driver state
2718c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
27190     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
27194                 | 
27194                 | ' delay profile
27194     07 00 00 00 
27198     00 CF 7B 05 
2719c     80 D1 F0 08 
271a0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
271a4     80 C4 60 0F 
271a8     80 39 7A 12 
271ac     40 2D D9 13 
271b0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
271b4                 | 
271b4                 | ' data to be passed to driver when starting it
271b4                 | startupData
271b4     00 00 00 00 |     long    0           ' current frequency
271b8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
271bc     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
271c0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
271c4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
271c8     D4 71 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
271cc     54 72 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
271d0     74 72 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
271d4                 | 
271d4                 | ' data for memory
271d4                 | deviceData
271d4                 |     ' 16 bank parameters follow (16MB per bank)
271d4     00 00 00 00 
      ...             
2720c     00 00 00 00 
27210     00 00 00 00 |     long    0[16]                               ' banks 0-15
27214                 |     ' 16 banks of pin parameters follow
27214     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
27218     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2721c     FF FF FF FF 
      ...             
2724c     FF FF FF FF 
27250     FF FF FF FF |     long    -1[14]                              ' banks 2-15
27254                 | 
27254                 | ' data for COG polling
27254                 | qosData 
27254     00 00 FF FF 
27258     00 00 FF FF 
2725c     00 00 FF FF 
27260     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
27264     00 00 FF FF 
27268     00 00 FF FF 
2726c     00 00 FF FF 
27270     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
27274                 |     
27274                 | ' mailbox storage
27274                 | 
27274                 | mailboxes
27274     00 00 00 00 
      ...             
272cc     00 00 00 00 
272d0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
272d4                 | 	alignl
272d4                 | _psram16drv_spin2_dat_
272d4                 |                             orgh
272d4     00 00 00 00 
      ...             
272ec     00 00 00 00 
272f0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
272f4                 | 
272f4                 | driver_start
272f4                 |                             org
272f4 000             | '..................................................................................................
272f4 000             | ' Memory layout for COG RAM once operational:
272f4 000             | '
272f4 000             | '  COG RAM address      Usage
272f4 000             | '  ---------------      ----
272f4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
272f4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
272f4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
272f4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
272f4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
272f4 000             | '  ~$198-$1F3           State and register variables
272f4 000             | '
272f4 000             | ' Also during driver COG startup:
272f4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
272f4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
272f4 000             | '..................................................................................................
272f4 000             |                             
272f4 000             | ' Mailbox storage after vector initialization
272f4 000             | 
272f4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
272f8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
272fc 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
27300 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
27304 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
27308 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2730c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
27310 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
27314 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
27318 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2731c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
27320 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
27324 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
27328 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2732c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
27330 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
27334 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
27338 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2733c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
27340 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
27344 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
27348 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2734c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
27350 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
27354 018             | 
27354 018             | ' Mailbox parameter addresses per COG once patched
27354 018             |                             
27354 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
27358 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2735c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
27360 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
27364 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
27368 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2736c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
27370 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
27374 020             | 
27374 020             | '..................................................................................................
27374 020             | ' Per COG request and state setup and service branching
27374 020             |         
27374 020             | cog0                 
27374 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
27378 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2737c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
27380 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
27384 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27388 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2738c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
27390 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
27394 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
27398 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2739c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
273a0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
273a4 02c             | cog1                        
273a4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
273a8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
273ac 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
273b0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
273b4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
273b8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
273bc 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
273c0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
273c4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
273c8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
273cc 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
273d0 037 33 CA 63 FD |                             execf   request-0               'jump to service
273d4 038             | cog2                         
273d4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
273d8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
273dc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
273e0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
273e4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
273e8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
273ec 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
273f0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
273f4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
273f8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
273fc 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27400 043 33 CA 63 FD |                             execf   request-0               'jump to service
27404 044             | cog3                        
27404 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
27408 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2740c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
27410 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
27414 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27418 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2741c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
27420 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
27424 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
27428 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2742c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27430 04f 33 CA 63 FD |                             execf   request-0               'jump to service
27434 050             | cog4                        
27434 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
27438 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2743c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
27440 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
27444 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27448 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2744c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
27450 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
27454 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
27458 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2745c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27460 05b 33 CA 63 FD |                             execf   request-0               'jump to service
27464 05c             | cog5                        
27464 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
27468 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2746c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
27470 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
27474 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
27478 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2747c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
27480 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
27484 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
27488 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2748c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
27490 067 33 CA 63 FD |                             execf   request-0               'jump to service
27494 068             | cog6                        
27494 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
27498 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2749c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
274a0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
274a4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
274a8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
274ac 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
274b0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
274b4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
274b8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
274bc 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
274c0 073 33 CA 63 FD |                             execf   request-0               'jump to service
274c4 074             | cog7                        
274c4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
274c8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
274cc 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
274d0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
274d4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
274d8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
274dc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
274e0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
274e4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
274e8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
274ec 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
274f0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
274f4 080             |                             fit     128
274f4 080             | 
274f4 080             |                             fit     128
274f4 080             | pad                         long    0[128-$]                'align init code to $80
274f4 080             | 
274f4 080             | '..................................................................................................
274f4 080             | 
274f4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
274f4 080             | 
274f4 080             | init                        
274f4 080             |                             ' get driver scratch long address in hub
274f4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
274f8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
274fc 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
27500 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
27504 084             |                     
27504 084             |                             ' read in the additional LUT RAM code
27504 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
27508 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2750c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
27510 087             | 
27510 087             |                             ' read the startup parameters
27510 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
27514 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
27518 089             | 
27518 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
27518 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2751c 08a             | 
2751c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
27520 08b 01 00 00 5F 
27524 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
27528 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2752c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
27530 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
27534 090             | 
27534 090             |                             ' setup data pin modes and data bus pin group in streamer commands
27534 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
27538 091 01 00 00 FF 
2753c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
27540 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
27544 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
27548 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2754c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
27550 097 08 DE 47 F5 |                             or      a, #8
27554 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
27558 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2755c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
27560 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
27564 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
27568 09d 01 DE 07 F1 |                             add     a, #1
2756c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
27570 09f             |  
27570 09f             |                             ' setup device control pin states
27570 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
27574 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
27578 0a1 01 00 00 FF 
2757c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
27580 0a3             | 
27580 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
27584 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
27588 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2758c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
27590 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
27594 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
27598 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2759c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
275a0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
275a4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
275a8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
275ac 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
275b0 0af             | pinloop
275b0 0af             |                             ' generate minimum CE high time before access
275b0 0af A1 07 00 FF 
275b4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
275b8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
275bc 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
275c0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
275c4 0b4 1F DE 63 FD |                             waitx   a                       'delay
275c8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
275cc 0b6             | 
275cc 0b6             |                             ' setup the COG mailboxes and addresses 
275cc 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
275d0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
275d4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
275d8 0b9             | 
275d8 0b9 28 2E 64 FD |                             setq    #24-1
275dc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
275e0 0bb             | 
275e0 0bb             |                             ' setup the polling loop for active COGs 
275e0 0bb 01 C2 63 FD |                             cogid   id
275e4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
275e8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
275ec 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
275f0 0bf 0A F0 07 F6 |                             mov     ptra, #10
275f4 0c0 E1 F1 03 FA |                             mul     ptra, id
275f8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
275fc 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
27600 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
27604 0c4 03 C2 07 FA |                             mul     id, #3
27608 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2760c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
27610 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
27614 0c8 D8 01 B0 FD |                             call    #reloadcogs
27618 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2761c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
27620 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
27620 0cb D8 E5 B7 F9 |                             setd    d, #addr1
27624 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
27628 0cd 08 04 DC FC |                             rep     #2, #8
2762c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
27630 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
27634 0d0             | 
27634 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
27634 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
27634 0d0 01 C2 63 FD |                             cogid   id
27638 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2763c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
27640 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
27644 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
27648 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2764c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
27650 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
27654 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
27658 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2765c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
27660 0db 3F E4 A7 F9 |                             alti    d, #%111_111
27664 0dc 00 00 00 F6 |                             mov     0-0, 0-0
27668 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2766c 0de A5 E5 03 F1 |                             add     d, const512
27670 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
27674 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
27678 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2767c 0e2             |                             
2767c 0e2             |                             ' setup register values for control vector loop setup after we return
2767c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
27680 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
27684 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
27688 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2768c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
27690 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
27694 0e8 D0 C3 8F F9 |                             altd    id, #id0
27698 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2769c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
276a0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
276a4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
276a8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
276ac 0ee             |  
276ac 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
276b0 0ef 07 CA 07 F5 |                             and     request, #7
276b4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
276b8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
276bc 0f2             |                             fit     $100                    'ensure all init code fits this space
276bc 0f2             | 
276bc 0f2             |                             fit     $100                    'ensure all init code fits this space
276bc 0f2             | 
276bc 0f2 00 00 00 00 
      ...             
276ec 0fe 00 00 00 00 
276f0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
276f4 100             | 
276f4 100             | '..................................................................................................
276f4 100             | ' Error result handling and COG notification of request completion
276f4 100             | 
276f4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
276f8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
276fc 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
27700 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
27704 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
27708 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2770c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
27710 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
27714 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
27718 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2771c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
27720 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
27724 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
27728 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2772c 10e             | ' Poller re-starts here after a COG is serviced
2772c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
27730 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
27734 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
27738 111             | ' Main dynamic polling loop repeats until a request arrives
27738 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2773c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
27740 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
27744 114             | 
27744 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
27748 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2774c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
27750 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
27754 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
27758 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2775c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
27760 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
27764 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
27768 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2776c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
27770 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
27774 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
27778 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2777c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
27780 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
27784 124             | 
27784 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
27788 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2778c 126             |  
2778c 126             | '..................................................................................................
2778c 126             | ' List handler                               
2778c 126             | 
2778c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
27790 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
27794 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
27798 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2779c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
277a0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
277a4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
277a8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
277ac 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
277b0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
277b4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
277b8 131 33 00 60 FD |                             execf   0-0                     'process the request 
277bc 132             | 
277bc 132             | '..................................................................................................
277bc 132             | ' Restoring per COG state and resuming where we left off
277bc 132             | 
277bc 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
277c0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
277c4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
277c8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
277cc 136 D8 CB FB F8 |                             getbyte request, addr1, #3
277d0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
277d4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
277d8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
277dc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
277e0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
277e4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
277e8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
277ec 13e             |                    
277ec 13e             | '..................................................................................................
277ec 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
277ec 13e             | 
277ec 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
277f0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
277f4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
277f8 141 D0 DF B7 F9 |                             setd    a, #id0
277fc 142 D8 DF BF F9 |                             sets    a, #addr1
27800 143 FE FF FF FF 
27804 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
27808 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2780c 146 3F DE A7 F9 |                             alti    a, #%111_111 
27810 147 00 00 F0 F9 |                             muxq    0-0, 0-0
27814 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
27818 149 01 E2 63 FD |                             cogid   c
2781c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
27820 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
27824 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
27828 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2782c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
27830 14f 00 E0 03 F6 |                             mov     b, 0-0
27834 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
27838 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2783c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
27840 153 0C 00 90 AD |             if_z            jmp     #excluded               
27844 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
27848 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2784c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
27850 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
27854 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
27858 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2785c 15a             | 
2785c 15a             | 'determine priority cogs and build instructions for the polling sequence
2785c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
27860 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
27864 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
27868 15d             | 
27868 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2786c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
27870 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
27874 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
27878 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2787c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
27880 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
27884 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
27888 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2788c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
27890 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
27894 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
27898 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2789c 16a             | endprioloop
2789c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
278a0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
278a4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
278a8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
278ac 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
278b0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
278b4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
278b8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
278bc 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
278c0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
278c4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
278c8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
278cc 176             | 
278cc 176             | ' populate the round robin COG polling instructions
278cc 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
278d0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
278d4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
278d8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
278dc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
278e0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
278e4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
278e8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
278ec 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
278f0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
278f4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
278f8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
278fc 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
27900 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
27904 184             | '..................................................................................................
27904 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
27904 184             | 
27904 184             | set_latency                                                 '            (a) set latency
27904 184             | get_latency                                                 '            (b) get latency
27904 184             | set_burst                                                   '            (c) set burst size of bank
27904 184             | get_burst                                                   '            (d) get burst size of bank
27904 184             |                                                             '            (e) dump state
27904 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
27908 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2790c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
27910 187             |                                                             ' | | | | e  account for following AUGS
27910 187 04 00 00 FF 
27914 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
27918 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2791c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
27920 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
27924 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
27928 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2792c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
27930 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
27934 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
27938 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2793c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
27940 193             | 
27940 193             | '..................................................................................................
27940 193             | ' Misc EXECF code
27940 193             | 
27940 193 33 72 63 FD | start_read_exec             execf   newburstr
27944 194 33 7C 63 FD | start_write_exec            execf   resumewrites
27948 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2794c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
27950 197             | 
27950 197             | '..................................................................................................
27950 197             | ' Variables
27950 197             | 
27950 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
27954 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
27958 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2795c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
27960 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
27964 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
27968 19d             | 
27968 19d 00 00 00 80 | xfreq1          long    $80000000
2796c 19e 00 00 00 40 | xfreq2          long    $40000000
27970 19f 03 00 00 00 | delay           long    3
27974 1a0             | 
27974 1a0             | lutcodeaddr                 
27974 1a0             | startupparams
27974 1a0             | excludedcogs                                    'careful: shared register use!
27974 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
27978 1a1 00 00 00 00 | flags           long    0
2797c 1a2             | mask                                            'careful: shared register use!
2797c 1a2 00 00 00 00 | resetmaskA      long    0
27980 1a3             | limit                                           'careful: shared register use!
27980 1a3 00 00 00 00 | resetmaskB      long    0
27984 1a4 00 00 00 00 | datapins        long    0
27988 1a5             | const512                                        'careful: shared register use!
27988 1a5 00 00 00 00 | devicelist      long    0
2798c 1a6 00 00 00 00 | coglist         long    0
27990 1a7 00 00 00 00 | mbox            long    0 
27994 1a8             | 
27994 1a8             | clkpin                                          'shared with code patched during init
27994 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
27998 1a9             | cspin                                           'shared with code patched during init
27998 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2799c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
279a0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
279a4 1ac 01 00 00 00 | clkdelay        long    1
279a8 1ad 00 00 00 00 | regdatabus      long    0
279ac 1ae             | 
279ac 1ae 10 00 00 00 | deviceaddr      long    $10
279b0 1af             | rrcounter
279b0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
279b4 1b0             | 
279b4 1b0             | ' jump addresses for the per COG handlers
279b4 1b0 20 00 00 00 | cog0_handler    long    cog0
279b8 1b1 2C 00 00 00 | cog1_handler    long    cog1
279bc 1b2 38 00 00 00 | cog2_handler    long    cog2
279c0 1b3 44 00 00 00 | cog3_handler    long    cog3
279c4 1b4 50 00 00 00 | cog4_handler    long    cog4
279c8 1b5 5C 00 00 00 | cog5_handler    long    cog5
279cc 1b6 68 00 00 00 | cog6_handler    long    cog6
279d0 1b7 74 00 00 00 | cog7_handler    long    cog7
279d4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
279d8 1b9             | 
279d8 1b9             | ' EXECF sequences
279d8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
279dc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
279e0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
279e4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
279e8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
279ec 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
279f0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
279f4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
279f4 1c0             | 
279f4 1c0             | 
279f4 1c0             | ' SKIPF sequences
279f4 1c0             | skiptable
279f4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
279f8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
279fc 1c2 00 00 00 00 |                 long    0                      ' read modify write long
27a00 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
27a04 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
27a08 1c5 00 00 00 00 | pattern2        long    0
27a0c 1c6 00 00 00 00 | pattern3        long    0
27a10 1c7 77 02 00 00 | singlelong      long    %1001110111  
27a14 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
27a18 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
27a1c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
27a20 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
27a24 1cc             | 
27a24 1cc             | ' LUT RAM address values
27a24 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
27a28 1cd DD 02 00 00 | continue_read   long    continue_read_lut
27a2c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
27a30 1cf F6 02 00 00 | noread          long    noread_lut
27a34 1d0             | 
27a34 1d0 00 00 00 00 | id0             long    0
27a38 1d1 01 00 00 00 | id1             long    1
27a3c 1d2 02 00 00 00 | id2             long    2
27a40 1d3 03 00 00 00 | id3             long    3
27a44 1d4 04 00 00 00 | id4             long    4
27a48 1d5 05 00 00 00 | id5             long    5
27a4c 1d6 06 00 00 00 | id6             long    6
27a50 1d7 07 00 00 00 | id7             long    7
27a54 1d8             | 
27a54 1d8             | 'These next 10 request registers below are also temporarily reused during init 
27a54 1d8             | 'and COG updates and need to follow immediately after id0-id7
27a54 1d8 00 00 00 00 | addr1           long    0
27a58 1d9 00 00 00 00 | hubdata         long    0
27a5c 1da 00 00 00 00 | count           long    0
27a60 1db 00 00 00 00 | addr2           long    0
27a64 1dc 00 00 00 00 | total           long    0
27a68 1dd 00 00 00 00 | offset1         long    0
27a6c 1de 00 00 00 00 | offset2         long    0
27a70 1df 00 00 00 00 | link            long    0
27a74 1e0             | 
27a74 1e0             | burstwrite                                      'note shared register use during init
27a74 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
27a78 1e1 00 00 00 00 | id              long    0
27a7c 1e2             | 
27a7c 1e2 00 00 00 00 | header          long    0
27a80 1e3 00 00 00 00 | trailer         long    0
27a84 1e4 00 00 00 00 | cmdaddr         long    0
27a88 1e5 00 00 00 00 | request         long    0
27a8c 1e6 00 00 00 00 | rrlimit         long    0
27a90 1e7 00 00 00 00 | pinconfig       long    0
27a94 1e8 00 00 00 00 | clks            long    0
27a98 1e9 00 00 00 00 | resume          long    0
27a9c 1ea 00 00 00 00 | orighubsize     long    0
27aa0 1eb 00 00 00 00 | wrclks          long    0
27aa4 1ec             | 
27aa4 1ec 00 00 00 00 | pattern         long    0
27aa8 1ed 00 00 00 00 | hubscratch      long    0
27aac 1ee 00 10 00 00 | val4k           long    4096
27ab0 1ef             | 
27ab0 1ef             | ' temporary general purpose regs
27ab0 1ef 00 00 00 00 | a               long    0
27ab4 1f0 00 00 00 00 | b               long    0
27ab8 1f1 00 00 00 00 | c               long    0
27abc 1f2 00 00 00 00 | d               long    0
27ac0 1f3             |                 fit     502
27ac0 1f3             | 
27ac0 1f3             |                 fit     502
27ac0 1f3             | 
27ac0 1f3             | '..................................................................................................
27ac0 1f3             | 
27ac0 1f3             |             orgh
27ac0                 | 
27ac0                 | lut_code
27ac0                 | 'HW init code up to 80 longs
27ac0                 | 
27ac0                 | '..................................................................................................
27ac0                 | ' Memory layout for LUT RAM once operational:
27ac0                 | '
27ac0                 | '  LUT RAM address      Usage
27ac0                 | '  ---------------      ----
27ac0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
27ac0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
27ac0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
27ac0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
27ac0                 | '
27ac0                 | ' Also during driver COG startup:
27ac0                 | ' $230-$24F is used for HW init setup
27ac0                 | ' $250-$26F is used as temporary vector storage 
27ac0                 | '..................................................................................................
27ac0                 | 
27ac0                 |                 org $230    
27ac0 230             | 
27ac0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
27ac0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
27ac4 231 24 16 60 FD |                             pollxfi
27ac8 232 FF AA 2A FF 
27acc 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
27ad0 234 28 00 B0 FD |                             call    #sendqspi
27ad4 235 07 F8 07 FF 
27ad8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
27adc 237 28 00 B0 FD |                             call    #sendspi
27ae0 238 F8 07 78 FF 
27ae4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
27ae8 23a 1C 00 B0 FD |                             call    #sendspi
27aec 23b 7F 78 78 FF 
27af0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
27af4 23d 10 00 B0 FD |                             call    #sendspi 
27af8 23e 2D 00 64 FD |                             ret
27afc 23f             | 
27afc 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
27b00 240 32 0C 64 FD |                             skipf   #%110
27b04 241 9C EF 03 F6 |                             mov     pb, xsendimm
27b08 242             | 
27b08 242 10 D0 07 F6 | sendspi                     mov     clks, #16
27b0c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
27b10 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
27b14 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
27b18 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
27b1c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
27b20 248 24 36 60 FD |                             waitxfi                         'wait for the completion
27b24 249 50 48 63 FD |                             fltl    datapins                'float data bus
27b28 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
27b2c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
27b30 24c             | 
27b30 24c 00 00 00 00 
27b34 24d 00 00 00 00 
27b38 24e 00 00 00 00 
27b3c 24f 00 00 00 00 |                 long    0[$270-32-$]
27b40 250             |                 fit     $270-32  ' keep room for 32 vector longs
27b40 250             |     
27b40 250             |                 fit     $270-32  ' keep room for 32 vector longs
27b40 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
27b40 250             | rw_vect ' PSRAM jump vectors
27b40 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27b44 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27b48 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
27b4c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
27b50 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
27b54 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
27b58 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
27b5c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
27b60 258             | ro_vect ' R/O PSRAM jump vectors
27b60 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27b64 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
27b68 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
27b6c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
27b70 25c 00 01 00 00 |                 long    unsupported
27b74 25d 00 01 00 00 |                 long    unsupported
27b78 25e 00 01 00 00 |                 long    unsupported
27b7c 25f 00 01 00 00 |                 long    unsupported
27b80 260             | ctrl_vect ' Control jump vectors
27b80 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
27b84 261 00 01 00 00 |                 long    unsupported
27b88 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
27b8c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
27b90 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
27b94 265 00 01 00 00 |                 long    unsupported
27b98 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
27b9c 267 3E 01 00 00 |                 long    reconfig 
27ba0 268             | no_vect ' Invalid bank jump vectors
27ba0 268 01 01 00 00 |                 long    invalidbank
27ba4 269 01 01 00 00 |                 long    invalidbank
27ba8 26a 01 01 00 00 |                 long    invalidbank
27bac 26b 01 01 00 00 |                 long    invalidbank
27bb0 26c 01 01 00 00 |                 long    invalidbank
27bb4 26d 01 01 00 00 |                 long    invalidbank
27bb8 26e 01 01 00 00 |                 long    invalidbank
27bbc 26f 01 01 00 00 |                 long    invalidbank
27bc0 270             |                 fit     $270
27bc0 270             | 
27bc0 270             |                 fit     $270
27bc0 270             | '..................................................................................................
27bc0 270             | ' PSRAM READS
27bc0 270             |                                                             ' a b c d e f
27bc0 270             |                                                             ' B W L B R L  (a) byte read
27bc0 270             |                                                             ' Y O O U E O  (b) word read
27bc0 270             |                                                             ' T R N R S C  (c) long read
27bc0 270             |                                                             ' E D G S U K  (d) new burst read
27bc0 270             |                                                             '       T M E  (e) resumed sub-burst
27bc0 270             |                                                             '         E D  (f) locked sub-burst
27bc0 270             | 
27bc0 270             | 
27bc0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
27bc4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
27bc8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
27bcc 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
27bd0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
27bd4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
27bd8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
27bdc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
27be0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
27be4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
27be8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
27bec 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
27bf0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
27bf4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
27bf8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
27bfc 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
27c00 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
27c04 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
27c08 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
27c0c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
27c10 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
27c14 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
27c18 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
27c1c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
27c20 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
27c24 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
27c28 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
27c2c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
27c30 28c             | 
27c30 28c             |                             ' fall through to read bursts
27c30 28c             |                         
27c30 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
27c30 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
27c34 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
27c38 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
27c3c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
27c40 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
27c44 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
27c48 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
27c4c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
27c50 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
27c54 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
27c58 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
27c5c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
27c60 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
27c64 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
27c68 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
27c6c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
27c70 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
27c74 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
27c78 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
27c7c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
27c80 2a0 E8 D1 03 F1 |                             add     clks, clks
27c84 2a1             | readcommon
27c84 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
27c88 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
27c8c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
27c90 2a4             | 
27c90 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
27c94 2a5 69 C8 63 FD |                             rev     cmdaddr
27c98 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
27c9c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
27ca0 2a8             | 
27ca0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
27ca4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
27ca8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
27ca8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
27cac 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
27cb0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
27cb4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
27cb8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
27cb8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
27cbc 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
27cc0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
27cc4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
27cc8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
27ccc 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
27cd0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
27cd0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
27cd4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
27cd8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
27cdc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
27ce0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
27ce4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
27ce8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
27cec 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
27cf0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
27cf4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
27cf8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
27cfc 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
27d00 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
27d04 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
27d08 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
27d08 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
27d0c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
27d10 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
27d14 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
27d18 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
27d1c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
27d20 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
27d24 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
27d28 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
27d2c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
27d30 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
27d34 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
27d38 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
27d3c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
27d40 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
27d44 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
27d48 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
27d4c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
27d50 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
27d54 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
27d58 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
27d5c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
27d60 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
27d64 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
27d68 2da 10 03 90 FD |                             jmp     #writecommon
27d6c 2db             | 
27d6c 2db             | '..................................................................................................
27d6c 2db             | ' Burst continuation testing
27d6c 2db             | 
27d6c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
27d70 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
27d74 2dd             | continue_read_lut          
27d74 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
27d78 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
27d7c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
27d80 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
27d84 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
27d88 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
27d8c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
27d90 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
27d94 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
27d98 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
27d9c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
27da0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
27da4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
27da8 2ea             | 
27da8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
27dac 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
27db0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
27db4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
27db8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
27dbc 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
27dc0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
27dc4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
27dc8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
27dcc 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
27dd0 2f4 2A 1C 66 0D |             _ret_           push    #poller
27dd4 2f5             | 
27dd4 2f5             | 
27dd4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
27dd8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
27dd8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
27ddc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
27de0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
27de4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
27de8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
27dec 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
27df0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
27df4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
27df8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
27dfc 2ff             | '..................................................................................................
27dfc 2ff             | ' Completion of requests
27dfc 2ff             | 
27dfc 2ff             | complete_rw_lut             
27dfc 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
27e00 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
27e04 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
27e08 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
27e0c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
27e10 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
27e14 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
27e18 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
27e1c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
27e20 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
27e24 309 32 62 64 AD |             if_z            skipf   #%110001
27e28 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
27e2c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
27e30 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
27e34 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
27e38 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
27e3c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
27e40 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
27e44 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
27e48 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
27e4c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
27e50 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
27e54 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
27e58 316             |                                                             ' skipcase (a) gfx copy to/from hub
27e58 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
27e58 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
27e58 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
27e5c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
27e60 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
27e64 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
27e68 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
27e6c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
27e70 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
27e74 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
27e78 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
27e7c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
27e80 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
27e84 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
27e88 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
27e8c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
27e90 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
27e94 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
27e98 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
27e9c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
27ea0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
27ea4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
27ea8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
27eac 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
27eb0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
27eb4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
27eb8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
27ebc 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
27ec0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
27ec4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
27ec8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
27ecc 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
27ed0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
27ed4 335 DF B7 03 A6 |             if_z            mov     addr2, link
27ed8 336 34 FF 9F AD |             if_z            jmp     #checknext
27edc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
27ee0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
27ee4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
27ee8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
27eec 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
27ef0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
27ef4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
27ef8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
27efc 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
27f00 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
27f04 341             | 
27f04 341             | '..................................................................................................
27f04 341             | ' PSRAM WRITES
27f04 341             |                                                             '  a b c d e f g h
27f04 341             | 
27f04 341             |                                                             '  B W L F B R L L (a) byte write(s)
27f04 341             |                                                             '  Y O O I U E O O (b) word write(s)
27f04 341             |                                                             '  T R N L R S C C (c) long write(s)
27f04 341             |                                                             '  E D G L S U K K (d) resumed fill
27f04 341             |                                                             '          T M E E (e) new burst write
27f04 341             |                                                             '            E D D (f) resumed burst
27f04 341             |                                                             '              F B (g) locked fill
27f04 341             |                                                             '              I U (h) locked burst write
27f04 341             |                                                             '              L R 
27f04 341             |                                                             '              L S 
27f04 341             |                                                             '                T 
27f04 341             | 
27f04 341             | w_single                   
27f04 341             | w_fill_cont           
27f04 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
27f08 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
27f0c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
27f10 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
27f14 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
27f18 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
27f1c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
27f20 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
27f24 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
27f28 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
27f2c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
27f30 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
27f34 34d             |                ' disable call to r_resume_burst for single longs when z=0
27f34 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
27f38 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
27f3c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
27f40 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
27f44 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
27f48 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
27f4c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
27f50 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
27f54 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
27f58 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
27f5c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
27f60 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
27f64 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
27f68 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
27f6c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
27f70 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
27f74 35d             |         
27f74 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
27f74 35d             |             '
27f74 35d             |             '  At least one of these 3 optional components will be sent
27f74 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
27f74 35d             |             '     body - N x full longs of data
27f74 35d             |             '     trailer - last partial long of data
27f74 35d             |             '
27f74 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
27f74 35d             |             '
27f74 35d             |             'Case    Type                           Sends
27f74 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
27f74 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
27f74 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
27f74 35d             |             ' 4)     Multiple long fill             body only
27f74 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
27f74 35d             | 
27f74 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
27f74 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
27f78 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
27f7c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
27f80 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
27f84 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
27f88 362 13 8C 07 F6 |                             mov     pattern3, #%10011
27f8c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
27f90 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
27f94 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
27f98 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
27f9c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
27fa0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
27fa4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
27fa8 36a             |                             
27fa8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
27fac 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
27fb0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
27fb4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
27fb8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
27fbc 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
27fc0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
27fc4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
27fc8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
27fcc 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
27fd0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
27fd4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
27fd8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
27fdc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
27fe0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
27fe4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
27fe8 37a             | 
27fe8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
27fec 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
27ff0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
27ff4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
27ff8 37e             |                  
27ff8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
27ffc 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
28000 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
28004 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
28008 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2800c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
28010 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
28014 385             | 
28014 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
28018 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2801c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
28020 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
28024 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
28028 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2802c 38b             | 
2802c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2802c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
28030 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
28034 38d 2A B0 63 FD |                             push    addr1                   'save address
28038 38e             | 
28038 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
28038 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2803c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
28040 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
28044 391             |             
28044 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
28048 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2804c 393 2B B0 63 FD |                             pop     addr1                   'restore address
28050 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
28054 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
28058 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2805c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
28060 398             | 
28060 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
28064 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
28068 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2806c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
28070 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
28074 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
28078 39e             | 
28078 39e             |                             'trailer is done
28078 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2807c 39f             | 
2807c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
28080 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
28084 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
28088 3a2             | 
28088 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2808c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
28090 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
28094 3a5 61 C8 63 FD |                             mergeb  cmdaddr
28098 3a6             |                             
28098 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2809c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
280a0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
280a4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
280a8 3aa             |                                                          
280a8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
280ac 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
280b0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
280b4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
280b8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
280bc 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
280c0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
280c4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
280c8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
280cc 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
280d0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
280d4 3b5             |  
280d4 3b5 59 52 63 FD |                             drvh    cspin
280d8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
280dc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
280e0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
280e4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
280e8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
280ec 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
280f0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
280f4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
280f8 3be EA E5 03 F6 |                             mov     d, orighubsize
280fc 3bf EF E5 63 F0 |                             shl     d, a
28100 3c0 F2 E3 83 F1 |                             sub     c, d
28104 3c1 DD E3 03 F1 |                             add     c, offset1
28108 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2810c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
28110 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
28114 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
28118 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2811c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
28120 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
28124 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
28128 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2812c 3cb BB D3 03 F6 |                             mov     resume, restorefill
28130 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
28134 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
28138 3ce 6C FC BF CD |             if_c            call    #yield
2813c 3cf 2D 00 64 FD |                             ret
28140 3d0             |                            
28140 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
28140 3d0             |                       '     rczl    pa                      'rotate left into address offset
28140 3d0             |                       '     rczl    c wcz                   'restore count and flags
28140 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
28144 3d1 02 EC 67 F0 |                             shl     pa, #2
28148 3d2 28 06 64 AD |             if_z            setq    #3
2814c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
28150 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
28154 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
28158 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2815c 3d7             | 
2815c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
28160 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
28164 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
28168 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2816c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
28170 3dc             |                 fit 1024-32
28170 3dc             |         
28170 3dc             | 
28170 3dc             | '..................................................................................................
28170 3dc             | 
28170 3dc             |                 fit 1024-32
28170 3dc 00 00 00 00 
28174 3dd 00 00 00 00 
28178 3de 00 00 00 00 
2817c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
28180 3e0             |                 org 1024-32
28180 000             | 
28180 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
28180 000 00 00 00 00 |                 long $0000
28184 001 11 11 00 00 |                 long $1111
28188 002 22 22 00 00 |                 long $2222
2818c 003 33 33 00 00 |                 long $3333
28190 004 44 44 00 00 |                 long $4444
28194 005 55 55 00 00 |                 long $5555
28198 006 66 66 00 00 |                 long $6666
2819c 007 77 77 00 00 |                 long $7777
281a0 008 88 88 00 00 |                 long $8888
281a4 009 99 99 00 00 |                 long $9999
281a8 00a AA AA 00 00 |                 long $aaaa
281ac 00b BB BB 00 00 |                 long $bbbb
281b0 00c CC CC 00 00 |                 long $cccc
281b4 00d DD DD 00 00 |                 long $dddd
281b8 00e EE EE 00 00 |                 long $eeee
281bc 00f FF FF 00 00 |                 long $ffff
281c0 010             | 
281c0 010             | 'masks
281c0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
281c4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
281c8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
281cc 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
281d0 014             | 
281d0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
281d4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
281d8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
281dc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
281e0 018             | 
281e0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
281e4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
281e8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
281ec 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
281f0 01c             | 
281f0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
281f4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
281f8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
281fc 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
28200 020             |         fit 1024
28200 020             | 
28200 020             |         fit 1024
28200 020             | 
28200 020             | '--------------------------------------------------------------------------------------------------
28200 020             |         orgh
28200                 | 
28200                 | gfxexpansion
28200                 |                             'simple line drawing graphics expansion of memory driver
28200                 |                             'jmp     #donerepeats                'just return for now
28200                 | 
28200     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
28204     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
28208     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2820c     DD E1 03 F6 |                             mov     b, offset1              'get error term
28210     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
28214     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
28218     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2821c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
28220     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
28224     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
28228     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2822c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
28230     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
28234     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
28238     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2823c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
28240     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
28244     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
28248     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2824c     DC E5 33 F9 |                             getword d, total, #0            'get line width
28250     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
28254     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
28258     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2825c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
28260     C3 03 80 FD |                             jmp     #readmask               'continue filling
28264                 | 	alignl
28264                 | _usbnew_spin2_dat_
28264                 |                 org     $000
28264 000             | 
28264 000             | usb_host_start
28264 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
28268 001             | 
28268 001 03 00 00 FF 
2826c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
28270 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
28274 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
28278 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2827c 006 29 70 63 FD |                 setq2   htmp
28280 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
28284 008             | 
28284 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
28288 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2828c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
28290 00b             | 
28290 00b             | '------------------------------------------------------------------------------
28290 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
28290 00b             | ' special because the receiving function must not respond with either STALL or
28290 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
28290 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
28290 00b             | ' corrupt packet, it must ignore the transaction
28290 00b             | '------------------------------------------------------------------------------
28290 00b             | ' On entry:
28290 00b             | '   PTRA - start address of the SETUP data struct.
28290 00b             | ' On exit:
28290 00b             | '   retval - PID_ACK on success, otherwise error code.
28290 00b             | '------------------------------------------------------------------------------
28290 00b             | txn_setup
28290 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
28294 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
28298 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2829c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
282a0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
282a4 010             | .setup
282a4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
282a8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
282ac 012 2D 00 64 AD |         if_z    ret
282b0 013 7C 0B B0 FD |                 call    #retry_wait
282b4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
282b8 015 2D 00 64 AD |         if_z    ret
282bc 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
282c0 017 E0 FF 9F FD |                 jmp     #.setup
282c4 018             | 
282c4 018             | '------------------------------------------------------------------------------
282c4 018             | ' IN/INTERRUPT transaction.
282c4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
282c4 018             | '------------------------------------------------------------------------------
282c4 018             | ' On entry:
282c4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
282c4 018             | '     CRC(b19..23).
282c4 018             | ' On exit:
282c4 018             | '------------------------------------------------------------------------------
282c4 018             | txn_in
282c4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
282c8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
282cc 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
282d0 01b             | 
282d0 01b             |                 ' Fall through to urx_packet
282d0 01b             | 
282d0 01b             | '------------------------------------------------------------------------------
282d0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
282d0 01b             | ' received are handshakes and IN DATAx.
282d0 01b             | '------------------------------------------------------------------------------
282d0 01b             | ' On entry:
282d0 01b             | ' On exit:
282d0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
282d0 01b             | '     returned.
282d0 01b             | '------------------------------------------------------------------------------
282d0 01b             | urx_packet
282d0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
282d4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
282d8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
282dc 01e 1A 92 63 FD |                 getct   hct2
282e0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
282e4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
282e8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
282ec 022             | .wait_sop
282ec 022 22 A7 8A FA |                 rdpin   urx, dm
282f0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
282f4 024 08 00 90 CD |         if_c    jmp     #.get_pid
282f8 025 FC 25 CC FB |                 jnct2   #.wait_sop
282fc 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
28300 027             | .get_pid
28300 027 28 02 B0 FD |                 call    #urx_next
28304 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
28308 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2830c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
28310 02b             | .chk_pid
28310 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28314 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
28318 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2831c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
28320 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
28324 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
28328 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2832c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
28330 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
28334 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
28338 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2833c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
28340 037             | .ack_resend
28340 037 22 A7 82 FA |                 rqpin   urx, dm
28344 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
28348 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2834c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
28350 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
28354 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
28358 03d             | .chk_eop
28358 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2835c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
28360 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
28364 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
28368 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2836c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
28370 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
28374 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
28378 045 2D 00 64 FD |                 ret
2837c 046             | .idle
2837c 046 22 A7 82 FA |                 rqpin   urx, dm
28380 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
28384 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
28388 049 2D 00 64 FD |                 ret
2838c 04a             | 
2838c 04a             | '------------------------------------------------------------------------------
2838c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2838c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2838c 04a             | ' if one is required.
2838c 04a             | '------------------------------------------------------------------------------
2838c 04a             | ' On entry:
2838c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2838c 04a             | ' On exit:
2838c 04a             | '------------------------------------------------------------------------------
2838c 04a             | utx_token
2838c 04a 22 A7 82 FA |                 rqpin   urx, dm
28390 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
28394 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
28398 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2839c 04e 34 0D B0 CD |         if_c    call    #utx_pre
283a0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
283a4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
283a8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
283ac 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
283b0 053             | .next_byte
283b0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
283b4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
283b8 055             | .wait
283b8 055 40 46 72 FD |                 testp   dp                      wc
283bc 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
283c0 057 23 03 08 FC |                 akpin   dp
283c4 058 22 A5 22 FC |                 wypin   utx, dm
283c8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
283cc 05a             | 
283cc 05a             | '------------------------------------------------------------------------------
283cc 05a             | ' SETUP/OUT/INTERRUPT transaction.
283cc 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
283cc 05a             | '------------------------------------------------------------------------------
283cc 05a             | ' On entry:
283cc 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
283cc 05a             | '     CRC(b19..23).
283cc 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
283cc 05a             | '   pkt_data - count of DATAx payload bytes to send.
283cc 05a             | ' On exit:
283cc 05a             | '------------------------------------------------------------------------------
283cc 05a             | txn_out
283cc 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
283d0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
283d4 05c 00 00 C0 FF 
283d8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
283dc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
283e0 05f             | 
283e0 05f             |                 ' Fall through to utx_data
283e0 05f             | 
283e0 05f             | '------------------------------------------------------------------------------
283e0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
283e0 05f             | ' calculated while the data byte is being shifted out. Since data stage
283e0 05f             | ' success/fail is not determined until the status stage of the transaction,
283e0 05f             | ' this routine is only concerned about the current DATAx packet.
283e0 05f             | '------------------------------------------------------------------------------
283e0 05f             | ' On entry:
283e0 05f             | '   PTRA - hub start address of the data to read.
283e0 05f             | '   pkt_cnt - data payload size.
283e0 05f             | ' On exit:
283e0 05f             | '------------------------------------------------------------------------------
283e0 05f             | utx_data
283e0 05f 22 A7 82 FA |                 rqpin   urx, dm
283e4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
283e8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
283ec 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
283f0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
283f4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
283f8 065 D8 0C B0 CD |         if_c    call    #utx_pre
283fc 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
28400 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
28404 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
28408 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2840c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
28410 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
28414 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
28418 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2841c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
28420 06f             | .read_byte
28420 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
28424 070 F0 00 B0 FD |                 call    #utx_byte
28428 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2842c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
28430 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
28434 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
28438 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2843c 076             | .send_crc
2843c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
28440 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
28444 078 D0 00 B0 FD |                 call    #utx_byte
28448 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2844c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
28450 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
28454 07c             | 
28454 07c             | '------------------------------------------------------------------------------
28454 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
28454 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
28454 07c             | ' expects that the packet includes at least the CRC word.
28454 07c             | '
28454 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
28454 07c             | ' was requested, which makes it difficult to determine where the data stops
28454 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
28454 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
28454 07c             | ' USB-16 expected residual value of 0xB001.
28454 07c             | '
28454 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
28454 07c             | ' so the caller can verify IN success before writing the data to its final
28454 07c             | ' destination.
28454 07c             | '------------------------------------------------------------------------------
28454 07c             | ' On entry:
28454 07c             | '   pkt_data - max byte count expected to be in the packet.
28454 07c             | '   newb_flg - signals new byte ready when toggled.
28454 07c             | ' On exit:
28454 07c             | '   pkt_cnt - actual number of bytes read.
28454 07c             | '------------------------------------------------------------------------------
28454 07c             | urx_data
28454 07c F7 75 03 F6 |                 mov     htmp2, pb
28458 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2845c 07e 00 00 C0 FF 
28460 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
28464 080 BA EF 03 F6 |                 mov     pb, htmp2
28468 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2846c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
28470 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
28474 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
28478 085             | .wait_byte
28478 085             | ' In-line rx for max speed
28478 085 22 A7 82 FA |                 rqpin   urx, dm
2847c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
28480 087 53 A5 02 F5 |                 and     utx, urx
28484 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
28488 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2848c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
28490 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
28494 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
28498 08d DC FF 9F FD |                 jmp     #.wait_byte
2849c 08e             | .get_byte
2849c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
284a0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
284a4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
284a8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
284ac 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
284b0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
284b4 094             | .end_crc
284b4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
284b8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
284bc 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
284c0 097 2D 00 64 1D |         if_a    ret
284c4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
284c4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
284c4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
284c4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
284c4 098 22 A7 82 FA |                 rqpin   urx, dm
284c8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
284cc 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
284d0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
284d0 09b             | .chk_crc
284d0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
284d4 09c 58 00 00 FF 
284d8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
284dc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
284e0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
284e4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
284e8 0a1 34 09 B0 FD |                 call    #poll_waitx
284ec 0a2             | 
284ec 0a2             |                 ' Fall through to utx_handshake
284ec 0a2             | 
284ec 0a2             | '------------------------------------------------------------------------------
284ec 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
284ec 0a2             | ' the appropriate IP delay has been inserted.
284ec 0a2             | '------------------------------------------------------------------------------
284ec 0a2             | ' On entry:
284ec 0a2             | '   retval - handshake PID to send.
284ec 0a2             | ' On exit:
284ec 0a2             | '   retval unchanged.
284ec 0a2             | '------------------------------------------------------------------------------
284ec 0a2             | utx_handshake
284ec 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
284f0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
284f4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
284f8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
284fc 0a6 5F A5 02 F6 |                 mov     utx, retval
28500 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
28504 0a8             | .idle
28504 0a8 22 A7 82 FA |                 rqpin   urx, dm
28508 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2850c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
28510 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
28514 0ac 08 09 90 FD |                 jmp     #poll_waitx
28518 0ad             | 
28518 0ad             | '------------------------------------------------------------------------------
28518 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
28518 0ad             | '------------------------------------------------------------------------------
28518 0ad             | ' On entry:
28518 0ad             | '   utx - byte to transmit.
28518 0ad             | ' On exit:
28518 0ad             | '------------------------------------------------------------------------------
28518 0ad             | utx_byte
28518 0ad 40 46 72 FD |                 testp   dp                      wc
2851c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
28520 0af 23 03 08 FC |                 akpin   dp
28524 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
28528 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2852c 0b2             | 
2852c 0b2             | '------------------------------------------------------------------------------
2852c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2852c 0b2             | '------------------------------------------------------------------------------
2852c 0b2             | ' On entry:
2852c 0b2             | ' On exit:
2852c 0b2             | '   retval - the byte read.
2852c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2852c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2852c 0b2             | '     received.
2852c 0b2             | '------------------------------------------------------------------------------
2852c 0b2             | urx_next
2852c 0b2 22 A7 8A FA |                 rdpin   urx, dm
28530 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
28534 0b4 53 A5 02 F5 |                 and     utx, urx
28538 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2853c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
28540 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
28544 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
28548 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2854c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
28550 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
28554 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
28558 0bd 2D 00 64 FD |                 ret
2855c 0be             | 
2855c 0be             | '------------------------------------------------------------------------------
2855c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2855c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2855c 0be             | ' length, and the PID is not included in the CRC calculation:
2855c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2855c 0be             | '  CRC5  ENDP ADDRESS PID
2855c 0be             | ' %00000_1111_1111111_xxxxxxxx
2855c 0be             | '------------------------------------------------------------------------------
2855c 0be             | ' On entry:
2855c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2855c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2855c 0be             | ' On exit:
2855c 0be             | '   ep_addr_pid - CRC value appended to the packet.
2855c 0be             | '------------------------------------------------------------------------------
2855c 0be             | calc_crc5
2855c 0be FF 03 00 FF 
28560 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
28564 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
28568 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2856c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
28570 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
28574 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
28578 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2857c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
28580 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
28584 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
28588 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2858c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
28590 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
28594 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
28598 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2859c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
285a0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
285a4 0d0             | 
285a4 0d0             | '------------------------------------------------------------------------------
285a4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
285a4 0d0             | '------------------------------------------------------------------------------
285a4 0d0             | isr1_fsframe
285a4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
285a8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
285ac 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
285b0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
285b4 0d4             | .wait
285b4 0d4 40 46 72 FD |                 testp   dp                      wc
285b8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
285bc 0d6 23 03 08 FC |                 akpin   dp
285c0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
285c4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
285c8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
285cc 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
285d0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
285d4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
285d8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
285dc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
285e0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
285e4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
285e8 0e1 2C FF BF FD |                 call    #utx_byte
285ec 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
285f0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
285f4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
285f8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
285fc 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
28600 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
28604 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
28608 0e9 5B A5 42 F5 |                 or      utx, icrc
2860c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
28610 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
28614 0ec 20 00 90 FD |                 jmp     #isr1_wait
28618 0ed             | isr1_lsframe
28618 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2861c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
28620 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
28624 0f0             | .wait
28624 0f0 40 46 72 FD |                 testp   dp                      wc
28628 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2862c 0f2 23 03 08 FC |                 akpin   dp
28630 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
28634 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
28638 0f5             | isr1_wait
28638 0f5 22 A5 82 FA |                 rqpin   utx, dm
2863c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
28640 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
28644 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
28648 0f9 03 00 00 FF 
2864c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
28650 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
28654 0fc F5 FF 3B FB |                 reti1
28658 0fd             | 
28658 0fd             | '------------------------------------------------------------------------------
28658 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
28658 0fd             | ' transaction will complete before the next frame is triggered.
28658 0fd             | '------------------------------------------------------------------------------
28658 0fd             | ' On entry:
28658 0fd             | ' On exit:
28658 0fd             | '------------------------------------------------------------------------------
28658 0fd             | wait_txn_ok
28658 0fd 1A 74 63 FD |                 getct   htmp2
2865c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
28660 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
28664 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
28668 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2866c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
28670 103 2D 00 64 FD |                 ret
28674 104             | 
28674 104             | '------------------------------------------------------------------------------
28674 104             | ' A device connection was detected, or a bus reset was requested by the USB
28674 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
28674 104             | ' and perform a reset sequence prior to device enumeration.
28674 104             | '------------------------------------------------------------------------------
28674 104             | dev_reset
28674 104 22 A7 82 FA |                 rqpin   urx, dm
28678 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2867c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
28680 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
28684 108             | reset
28684 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
28688 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2868c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
28690 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
28694 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
28698 10d 1A 92 62 FD |                 getct   iframe_ct_base
2869c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
286a0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
286a4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
286a8 111 24 70 07 F1 |                 add     htmp, #36
286ac 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
286b0 113             | .framewait
286b0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
286b4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
286b8 115 2D 00 64 FD |                 ret
286bc 116             | 
286bc 116             | '------------------------------------------------------------------------------
286bc 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
286bc 116             | '------------------------------------------------------------------------------
286bc 116             | ' On entry:
286bc 116             | '   PTRA - source address.
286bc 116             | '   PB - destination address.
286bc 116             | '   hr0 - length of copy, in bytes.
286bc 116             | ' On exit:
286bc 116             | '------------------------------------------------------------------------------
286bc 116             | hmemcpy
286bc 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
286c0 117 F7 71 43 FC |                 wrbyte  htmp, pb
286c4 118 01 EE 07 F1 |                 add     pb, #1
286c8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
286cc 11a             | 
286cc 11a             | '------------------------------------------------------------------------------
286cc 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
286cc 11a             | ' loop until the errant device is disconnected.
286cc 11a             | '------------------------------------------------------------------------------
286cc 11a             | ' On entry:
286cc 11a             | ' On exit:
286cc 11a             | '------------------------------------------------------------------------------
286cc 11a             | host_error
286cc 11a             |           if ERROR_LED >= 0
286cc 11a             |           end
286cc 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
286d0 11b             | 
286d0 11b             | '------------------------------------------------------------------------------
286d0 11b             | ' Get HID descriptor buffer for current port
286d0 11b             | '------------------------------------------------------------------------------
286d0 11b             | ' On entry:
286d0 11b             | ' On exit:
286d0 11b             | '   PB - HID descriptor buffer pointer
286d0 11b             | '------------------------------------------------------------------------------
286d0 11b             | get_hid_descr_buffer
286d0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
286d4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
286d8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
286dc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
286e0 11f             | 
286e0 11f             | 
286e0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
286e4 120             | 
286e4 120             | ' USB commands and error codes
286e4 120 00 00 00 00 | cmd_data        long    0
286e8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
286ec 122             | 
286ec 122             | ' Parameters block assigned at cog startup
286ec 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
286f0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
286f4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
286f8 125             | if ACTIVITY_LED >= 0
286f8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
286f8 125             | end
286f8 125             | if ERROR_LED >= 0
286f8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
286f8 125             | end
286f8 125 00 00 00 00 | hid_descr_p     long    0
286fc 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
286fc 126             | 'hkbd_report_p   long    0
286fc 126 00 00 00 00 | hub_descr_p     long    0
28700 127 00 00 00 00 | urx_buff_p      long    0
28704 128 00 00 00 00 | dev_desc_buff_p long    0
28708 129 00 00 00 00 | con_desc_buff_p long    0
2870c 12a 00 00 00 00 | cache_start_p   long    0
28710 12b 00 00 00 00 | cache_end_p     long    0
28714 12c             | if EMUPAD_MAX_PLAYER > 0
28714 12c             | emupad_out_ptr  long    0
28714 12c             | end
28714 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
28718 12d             | 
28718 12d             | hdev_init_start
28718 12d             | hdev_port       res     1
28718 12d             | hdev_port       res     1
28718 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
28718 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
28718 12d             | kbm_next_datax  res     1
28718 12d             | kbm_next_datax  res     1
28718 12d             | hub_intf_num    res     1
28718 12d             | hub_intf_num    res     1
28718 12d             | hub_next_datax  res     1
28718 12d             | hub_next_datax  res     1
28718 12d             | hub_status_chg  res     1
28718 12d             | hub_status_chg  res     1
28718 12d             | hub_port_status res     1
28718 12d             | hub_port_status res     1
28718 12d             | if HAVE_MOUSE
28718 12d             | ms_intf_num     res     1
28718 12d             | ms_intf_num     res     1
28718 12d             | ms_in_max_pkt   res     1
28718 12d             | ms_in_max_pkt   res     1
28718 12d             | end
28718 12d             | kb_intf_num     res     1
28718 12d             | kb_intf_num     res     1
28718 12d             | kb_interval     res     1
28718 12d             | kb_interval     res     1
28718 12d             | kb_in_max_pkt   res     1
28718 12d             | kb_in_max_pkt   res     1
28718 12d             | kb_max_index    res     1
28718 12d             | kb_max_index    res     1
28718 12d             | kb_led_states   res     1
28718 12d             | kb_led_states   res     1
28718 12d             | gp_intf_num     res     1
28718 12d             | gp_intf_num     res     1
28718 12d             | gp_interval     res     1
28718 12d             | gp_interval     res     1
28718 12d             | gp_max_index    res     1
28718 12d             | gp_max_index    res     1
28718 12d             | gp_descr_len    res     1+MAX_DEVICES
28718 12d             | gp_descr_len    res     1+MAX_DEVICES
28718 12d             | hdev_init_end
28718 12d             | 
28718 12d             | ' Initialized at cog startup:
28718 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
28718 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
28718 12d             | iframe_ct_new   res     1
28718 12d             | iframe_ct_new   res     1
28718 12d             | iframe_ct_base  res     1
28718 12d             | iframe_ct_base  res     1
28718 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
28718 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
28718 12d             | 
28718 12d             | ' This register block is reset to zero when a USB device connects
28718 12d             | hreg_init_start
28718 12d             | hstatus         res     1         ' Host status flags
28718 12d             | hstatus         res     1         ' Host status flags
28718 12d             | hctwait         res     1         ' Poll-based wait clocks
28718 12d             | hctwait         res     1         ' Poll-based wait clocks
28718 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
28718 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
28718 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
28718 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
28718 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
28718 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
28718 12d             | xfer_retry      res     1         ' Control transfer retry count
28718 12d             | xfer_retry      res     1         ' Control transfer retry count
28718 12d             | retry           res     1         ' Transaction retry count
28718 12d             | retry           res     1         ' Transaction retry count
28718 12d             | utx             res     1         ' Byte to transmit on USB
28718 12d             | utx             res     1         ' Byte to transmit on USB
28718 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
28718 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
28718 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
28718 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
28718 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
28718 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
28718 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
28718 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
28718 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
28718 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
28718 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
28718 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
28718 12d             | frame           res     1         ' USB 1ms frame counter value
28718 12d             | frame           res     1         ' USB 1ms frame counter value
28718 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
28718 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
28718 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
28718 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
28718 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
28718 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
28718 12d             | crc             res     1         ' Used for CRC16 calculation
28718 12d             | crc             res     1         ' Used for CRC16 calculation
28718 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
28718 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
28718 12d             | retval          res     1         ' Global success/fail return parameter
28718 12d             | retval          res     1         ' Global success/fail return parameter
28718 12d             | context_retval  res     1         ' Operation contextual return parameter
28718 12d             | context_retval  res     1         ' Operation contextual return parameter
28718 12d             | ' Device stuff
28718 12d             | hdev_id         res     1+MAX_DEVICES
28718 12d             | hdev_id         res     1+MAX_DEVICES
28718 12d             | hdev_bcd        res     1
28718 12d             | hdev_bcd        res     1
28718 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
28718 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
28718 12d             | ' Keyboard/mouse stuff
28718 12d             | hctrl_ep_addr   res     1
28718 12d             | hctrl_ep_addr   res     1
28718 12d             | hctrl_max_pkt   res     1
28718 12d             | hctrl_max_pkt   res     1
28718 12d             | hconfig_base    res     1
28718 12d             | hconfig_base    res     1
28718 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
28718 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
28718 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
28718 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
28718 12d             | hdev_class      res     1
28718 12d             | hdev_class      res     1
28718 12d             | hdev_subclass   res     1
28718 12d             | hdev_subclass   res     1
28718 12d             | hdev_protocol   res     1
28718 12d             | hdev_protocol   res     1
28718 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
28718 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
28718 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
28718 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
28718 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
28718 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
28718 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
28718 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
28718 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
28718 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
28718 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
28718 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
28718 12d             | if HAVE_MOUSE
28718 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
28718 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
28718 12d             | end
28718 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
28718 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
28718 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
28718 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
28718 12d             | hdev_ep_addr    res     1+MAX_DEVICES
28718 12d             | hdev_ep_addr    res     1+MAX_DEVICES
28718 12d             | hdev_out_addr   res     1
28718 12d             | hdev_out_addr   res     1
28718 12d             | 
28718 12d             | if EMUPAD_MAX_PLAYER > 0
28718 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
28718 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
28718 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
28718 12d             | end
28718 12d             | 
28718 12d             | hreg_init_end
28718 12d             | 
28718 12d             | hidr_start
28718 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
28718 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
28718 12d             | hidr_flags      res     1
28718 12d             | hidr_flags      res     1
28718 12d             | hidr_axis       res     3
28718 12d             | hidr_axis       res     3
28718 12d             | hidr_buttons    res     1
28718 12d             | hidr_buttons    res     1
28718 12d             | hidr_hats       res     1
28718 12d             | hidr_hats       res     1
28718 12d             | '' Above are actually useful values, 6 longs
28718 12d             | hidr_id         res     1
28718 12d             | hidr_id         res     1
28718 12d             | hidr_state      res     1
28718 12d             | hidr_state      res     1
28718 12d             | hidr_size       res     1
28718 12d             | hidr_size       res     1
28718 12d             | hidr_count      res     1
28718 12d             | hidr_count      res     1
28718 12d             | hidr_offset     res     1
28718 12d             | hidr_offset     res     1
28718 12d             | hidr_usage_idx  res     1
28718 12d             | hidr_usage_idx  res     1
28718 12d             | hidr_lminmax    res     1
28718 12d             | hidr_lminmax    res     1
28718 12d             | hidr_pminmax    res     1
28718 12d             | hidr_pminmax    res     1
28718 12d             | hidr_type       res     1
28718 12d             | hidr_type       res     1
28718 12d             | hidr_end
28718 12d             | 
28718 12d             | ' Variables dependent on the system freqency
28718 12d             | _var_64_lower_  res     1
28718 12d             | _var_64_lower_  res     1
28718 12d             | _var_64_upper_  res     1
28718 12d             | _var_64_upper_  res     1
28718 12d             | _12Mbps_        res     1
28718 12d             | _12Mbps_        res     1
28718 12d             | _1_5Mbps_       res     1
28718 12d             | _1_5Mbps_       res     1
28718 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
28718 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
28718 12d             | _1us_           res     1         ' 1us
28718 12d             | _1us_           res     1         ' 1us
28718 12d             | _10us_          res     1         ' 10us
28718 12d             | _10us_          res     1         ' 10us
28718 12d             | _33us_          res     1         ' 33us
28718 12d             | _33us_          res     1         ' 33us
28718 12d             | _txn_err_       res     1         ' 250us
28718 12d             | _txn_err_       res     1         ' 250us
28718 12d             | _500us_         res     1         ' 500us
28718 12d             | _500us_         res     1         ' 500us
28718 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
28718 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
28718 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
28718 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
28718 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
28718 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
28718 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
28718 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
28718 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
28718 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
28718 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
28718 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
28718 12d             | _preamble_wait_ res     1
28718 12d             | _preamble_wait_ res     1
28718 12d             | _1ms_           res     1         ' 1ms
28718 12d             | _1ms_           res     1         ' 1ms
28718 12d             | _2ms_           res     1         ' 2ms
28718 12d             | _2ms_           res     1         ' 2ms
28718 12d             | _suspend_wait_  res     1         ' 3ms
28718 12d             | _suspend_wait_  res     1         ' 3ms
28718 12d             | _4ms_           res     1         ' 4ms
28718 12d             | _4ms_           res     1         ' 4ms
28718 12d             | _xfer_wait_     res     1         ' 5ms
28718 12d             | _xfer_wait_     res     1         ' 5ms
28718 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
28718 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
28718 12d             | _reset_hold_    res     1         ' 15ms
28718 12d             | _reset_hold_    res     1         ' 15ms
28718 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
28718 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
28718 12d             | _21ms_          res     1         ' 21ms
28718 12d             | _21ms_          res     1         ' 21ms
28718 12d             | _100ms_         res     1         ' 100ms
28718 12d             | _100ms_         res     1         ' 100ms
28718 12d             | _500ms_         res     1         ' 500ms
28718 12d             | _500ms_         res     1         ' 500ms
28718 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
28718 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
28718 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
28718 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
28718 12d             | '------------------------------------------------------------------------------
28718 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
28718 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
28718 12d             | _usb_d_ls_nco_  res     1
28718 12d             | _usb_d_ls_nco_  res     1
28718 12d             | _usb_h_fs_nco_  res     1
28718 12d             | _usb_h_fs_nco_  res     1
28718 12d             | _usb_d_fs_nco_  res     1
28718 12d             | _usb_d_fs_nco_  res     1
28718 12d             | '------------------------------------------------------------------------------
28718 12d             | ' Scratch registers
28718 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
28718 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
28718 12d             | htmp1           res     1
28718 12d             | htmp1           res     1
28718 12d             | htmp2           res     1
28718 12d             | htmp2           res     1
28718 12d             | htmp3           res     1
28718 12d             | htmp3           res     1
28718 12d             | hrep            res     1         ' Repeat count
28718 12d             | hrep            res     1         ' Repeat count
28718 12d             | hsave0          res     1         ' Subroutine parameter saves
28718 12d             | hsave0          res     1         ' Subroutine parameter saves
28718 12d             | hsave1          res     1
28718 12d             | hsave1          res     1
28718 12d             | hsave2          res     1
28718 12d             | hsave2          res     1
28718 12d             | isrtmp1         res     1
28718 12d             | isrtmp1         res     1
28718 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
28718 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
28718 12d             | hr0             res     1         ' Multi-purpose registers
28718 12d             | hr0             res     1         ' Multi-purpose registers
28718 12d             | hr1             res     1
28718 12d             | hr1             res     1
28718 12d             | hr2             res     1
28718 12d             | hr2             res     1
28718 12d             | hr3             res     1
28718 12d             | hr3             res     1
28718 12d             | hpar1           res     1         ' Routine entry/exit parameters
28718 12d             | hpar1           res     1         ' Routine entry/exit parameters
28718 12d             | hpar2           res     1
28718 12d             | hpar2           res     1
28718 12d             | hpar3           res     1
28718 12d             | hpar3           res     1
28718 12d             | hct2            res     1         ' Function response bus turn-around timer
28718 12d             | hct2            res     1         ' Function response bus turn-around timer
28718 12d             | hct3            res     1         ' Keyboard/mouse poll timer
28718 12d             | hct3            res     1         ' Keyboard/mouse poll timer
28718 12d             | mod_cnt         res     1         ' Used in idle loops
28718 12d             | mod_cnt         res     1         ' Used in idle loops
28718 12d             |                 fit     $1F0
28718 12d             |                 org     $200
28718 200             | hlut_start
28718 200             | 
28718 200             | '------------------------------------------------------------------------------
28718 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
28718 200             | ' settings to startup defaults.
28718 200             | '------------------------------------------------------------------------------
28718 200             | ' On entry:
28718 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
28718 200             | '------------------------------------------------------------------------------
28718 200             | set_speed_full
28718 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2871c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
28720 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
28724 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
28728 204             | '                ret                             wcz     ' Restore caller flags on exit
28728 204             | 
28728 204             | '------------------------------------------------------------------------------
28728 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
28728 204             | ' is a downstream hub connected (not yet implemented), the baud generator
28728 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
28728 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
28728 204             | ' putting the smart pins into reset.
28728 204             | '------------------------------------------------------------------------------
28728 204             | ' On entry:
28728 204             | ' On exit: CZ flags restored to caller states
28728 204             | '------------------------------------------------------------------------------
28728 204             | set_speed_low
28728 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2872c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
28730 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
28734 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
28738 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2873c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
28740 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
28744 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
28748 20c             | 
28748 20c             | '------------------------------------------------------------------------------
28748 20c             | ' Perform configuration stuff required when a device intitially connects.
28748 20c             | '------------------------------------------------------------------------------
28748 20c             | ' On entry:
28748 20c             | ' On exit:
28748 20c             | '------------------------------------------------------------------------------
28748 20c             | on_connect
28748 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2874c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
28750 20e             | .retry
28750 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
28754 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
28758 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2875c 211 00 08 00 FF 
28760 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
28764 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
28768 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2876c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
28770 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
28774 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
28778 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2877c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
28780 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
28784 21b 4C 03 B0 FD |                 call    #poll_waitx
28788 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2878c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
28790 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
28794 21f B8 FF 9F FD |                 jmp     #.retry
28798 220             | .get_dev_desc
28798 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2879c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
287a0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
287a4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
287a8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
287ac 225 88 FB BF FD |                 call    #reset
287b0 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
287b4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
287b8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
287bc 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
287c0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
287c4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
287c8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
287cc 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
287d0 22e 04 00 00 FF 
287d4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
287d8 230 34 FA BF FD |                 call    #calc_crc5
287dc 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
287e0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
287e4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
287e8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
287ec 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
287f0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
287f4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
287f8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
287fc 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
28800 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
28804 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
28808 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2880c 23d C4 02 B0 FD |                 call    #poll_waitx
28810 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
28814 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
28818 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2881c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
28820 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
28824 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28828 244 2D 00 64 5D |         if_nz   ret
2882c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
28830 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
28834 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
28838 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2883c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
28840 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
28844 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
28848 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2884c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
28850 24e 2C FB 9F CD |         if_b    jmp     #host_error
28854 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
28858 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2885c 251 2D EC 63 FD |                 call    pa
28860 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
28864 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
28868 254 2C EC 63 FD |                 jmp     pa
2886c 255             | 
2886c 255             | '------------------------------------------------------------------------------
2886c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2886c 255             | ' Status reporting is always in the function-to-host direction.
2886c 255             | '------------------------------------------------------------------------------
2886c 255             | ' On entry:
2886c 255             | '   PTRA - start address of the SETUP data in hub.
2886c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2886c 255             | '     stage.
2886c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2886c 255             | ' On exit:
2886c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2886c 255             | '     contains the count of data stage bytes actually received, which must
2886c 255             | '     always be <= the count requested.
2886c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2886c 255             | '     more specific USB operation error code.
2886c 255             | '------------------------------------------------------------------------------
2886c 255             | control_read
2886c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
28870 256 F8 8F 03 F6 |                 mov     hpar2, ptra
28874 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
28878 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2887c 259             | .xfer_start
2887c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
28880 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
28884 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28888 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2888c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
28890 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
28894 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
28898 260 61 00 00 FF 
2889c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
288a0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
288a4 263             | .data
288a4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
288a8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
288ac 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
288b0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
288b4 267             | .nak_retry
288b4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
288b8 268             | .in_retry
288b8 268 BC F6 BF FD |                 call    #txn_in
288bc 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
288c0 26a 28 00 90 AD |         if_z    jmp     #.commit
288c4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
288c8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
288cc 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
288d0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
288d4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
288d8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
288dc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
288e0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
288e4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
288e8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
288ec 275             | .commit
288ec 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
288f0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
288f4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
288f8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
288fc 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
28900 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
28904 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
28908 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2890c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
28910 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
28914 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
28918 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2891c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
28920 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
28924 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
28928 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2892c 285             | .pre_status
2892c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
28930 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
28934 287 00 B0 06 F6 |                 mov     pkt_data, #0
28938 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2893c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
28940 28a 61 00 00 FF 
28944 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
28948 28c             | .out_retry
28948 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2894c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
28950 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
28954 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
28958 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2895c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
28960 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
28964 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
28968 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2896c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
28970 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
28974 297             | ' I've encountered transfer STALL, even though the data looks correct, and
28974 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
28974 297             | ' ControlRead() transfer gets things unstuck most of the time...
28974 297             | .xfer_retry
28974 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
28978 298 58 01 B0 FD |                 call    #poll_waitx
2897c 299 8C F9 BF FD |                 call    #wait_txn_ok
28980 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
28984 29b C7 F1 03 F6 |                 mov     ptra, hpar2
28988 29c C8 EF 03 F6 |                 mov     pb, hpar3
2898c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
28990 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
28994 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
28998 2a0             | 
28998 2a0             | '------------------------------------------------------------------------------
28998 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
28998 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
28998 2a0             | ' the SETUP data struct is filled with the required values.
28998 2a0             | '------------------------------------------------------------------------------
28998 2a0             | ' On entry:
28998 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
28998 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
28998 2a0             | '     stage.
28998 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
28998 2a0             | ' On exit:
28998 2a0             | '   retval - used to convey the success/failure of each stage.
28998 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
28998 2a0             | '     more specific USB operation error code.
28998 2a0             | '------------------------------------------------------------------------------
28998 2a0             | control_write
28998 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2899c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
289a0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
289a4 2a3             | 
289a4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
289a8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
289ac 2a5 F7 91 03 F6 |                 mov     hpar3, pb
289b0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
289b4 2a7             | .xfer_start
289b4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
289b8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
289bc 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
289c0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
289c4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
289c8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
289cc 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
289d0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
289d4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
289d8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
289dc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
289e0 2b2             | .data
289e0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
289e4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
289e8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
289ec 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
289f0 2b6             | .out_retry
289f0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
289f4 2b7 88 F6 BF FD |                 call    #txn_out
289f8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
289fc 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
28a00 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
28a04 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
28a08 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
28a0c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
28a10 2be             | .commit
28a10 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
28a14 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
28a18 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
28a1c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
28a20 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
28a24 2c3             | pre_status_in
28a24 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
28a28 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
28a2c 2c5             | .status_retry
28a2c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
28a30 2c6 44 F5 BF FD |                 call    #txn_in
28a34 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
28a38 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
28a3c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
28a40 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
28a44 2cb 2D 00 64 AD |         if_z    ret
28a48 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
28a4c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
28a50 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
28a54 2cf             | '               ret                                     ' Caller must handle transfer retirement
28a54 2cf             | 
28a54 2cf             | '------------------------------------------------------------------------------
28a54 2cf             | ' Execute an IN interrupt transaction.
28a54 2cf             | '------------------------------------------------------------------------------
28a54 2cf             | ' On entry:
28a54 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
28a54 2cf             | '   hpar2 - Address of the IN data buffer
28a54 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
28a54 2cf             | ' On exit:
28a54 2cf             | '   retval - the result of the operation.
28a54 2cf             | '   hpar3 - the count of IN data bytes actually received.
28a54 2cf             | '------------------------------------------------------------------------------
28a54 2cf             | do_int_in
28a54 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
28a58 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
28a5c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
28a60 2d2             | 
28a60 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
28a64 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
28a68 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
28a6c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
28a70 2d6             | .retry
28a70 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
28a74 2d7 00 F5 BF FD |                 call    #txn_in
28a78 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
28a7c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
28a80 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
28a84 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
28a88 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
28a8c 2dd 54 00 B0 FD |                 call    #retry_wait
28a90 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
28a94 2df 18 00 90 AD |         if_z    jmp     #.post_ret
28a98 2e0 D4 FF 9F FD |                 jmp     #.retry
28a9c 2e1             | .commit
28a9c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
28aa0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
28aa4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
28aa8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
28aac 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
28ab0 2e6             | .post_ret
28ab0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
28ab4 2e7             | 
28ab4 2e7             | 
28ab4 2e7             | '------------------------------------------------------------------------------
28ab4 2e7             | ' Resets the downstream hub port to FS
28ab4 2e7             | '------------------------------------------------------------------------------
28ab4 2e7             | dwnstream_reset
28ab4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
28ab8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
28abc 2e9             | 
28abc 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
28ac0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
28ac4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
28ac8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
28acc 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
28ad0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
28ad4 2ef             | 
28ad4 2ef             | '------------------------------------------------------------------------------
28ad4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
28ad4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
28ad4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
28ad4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
28ad4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
28ad4 2ef             | '------------------------------------------------------------------------------
28ad4 2ef             | ' On entry:
28ad4 2ef             | '   hctwait - wait interval in sysclocks.
28ad4 2ef             | ' On exit:
28ad4 2ef             | '------------------------------------------------------------------------------
28ad4 2ef             | poll_waitx
28ad4 2ef 1A 92 63 FD |                 getct   hct2
28ad8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
28adc 2f1             | .wait
28adc 2f1 FF 25 CC FB |                 jnct2   #.wait
28ae0 2f2 2D 00 64 FD |                 ret
28ae4 2f3             | 
28ae4 2f3             | '------------------------------------------------------------------------------
28ae4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
28ae4 2f3             | '------------------------------------------------------------------------------
28ae4 2f3             | ' On entry:
28ae4 2f3             | '   retval - transaction response PID or error code.
28ae4 2f3             | ' On exit:
28ae4 2f3             | '------------------------------------------------------------------------------
28ae4 2f3             | retry_wait
28ae4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
28ae8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
28aec 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
28af0 2f6 14 00 90 AD |         if_z    jmp     #.nak
28af4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
28af8 2f8 D8 FF BF FD |                 call    #poll_waitx
28afc 2f9             | .dec
28afc 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
28b00 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
28b04 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
28b08 2fc             | .nak
28b08 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
28b0c 2fd C4 FF BF FD |                 call    #poll_waitx
28b10 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
28b14 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
28b18 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
28b1c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
28b20 302 2D 00 64 FD |                 ret
28b24 303             | 
28b24 303             | host_reset
28b24 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
28b28 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
28b2c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
28b2c 305 BD 01 05 FF 
28b30 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
28b34 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
28b38 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
28b3c 309             | ' Check to see if the system clock has been changed.
28b3c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
28b40 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
28b44 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
28b48 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
28b4c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
28b50 30e 40 46 62 FD |                 dirl    dp
28b54 30f             | 
28b54 30f 28 02 64 FD |                 setq    #1
28b58 310 80 00 80 FF 
28b5c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
28b60 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
28b64 313             | .enable
28b64 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
28b68 314 41 46 62 FD |                 dirh    dp
28b6c 315 1F 36 63 FD |                 waitx   _1us_
28b70 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
28b74 317             | 
28b74 317             |                 ' Handle Port protection enable and startup delay
28b74 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
28b78 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
28b7c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
28b80 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
28b84 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
28b88 31c             | 
28b88 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
28b8c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
28b90 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
28b94 31f 00 00 04 F6 |                 mov     0-0, #0
28b98 320             | .regloop
28b98 320             | 
28b98 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
28b98 320             | 
28b98 320             | discon_entry
28b98 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
28b9c 321             | 
28b9c 321             |               
28b9c 321             |         if HAVE_HIDPAD
28b9c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
28ba0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
28ba4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
28ba8 324 F7 01 68 FC |                 wrlong  #0,pb
28bac 325             |         end
28bac 325             |         if EMUPAD_MAX_PLAYER > 0
28bac 325             |         end
28bac 325             | 
28bac 325             |                 ' Fall through to disconnected loop
28bac 325             | 
28bac 325             | '-----------------------------------------------------------------------------------------------------------------
28bac 325             | ' Device connect handling (Section 7.1.7.3).
28bac 325             | '-----------------------------------------------------------------------------------------------------------------
28bac 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
28bac 325             | ' device to connect (Section 7.1.7.3).
28bac 325             | '-----------------------------------------------------------------------------------------------------------------
28bac 325             | disconnected
28bac 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
28bb0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
28bb4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
28bb8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
28bbc 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
28bc0 32a             |         if ACTIVITY_LED >= 0
28bc0 32a             |         end
28bc0 32a 22 A7 82 FA |                 rqpin   urx, dm
28bc4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
28bc8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
28bcc 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
28bd0 32e             | .se1_test
28bd0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
28bd4 32f FC FE BF FD |                 call    #poll_waitx
28bd8 330 22 A7 82 FA |                 rqpin   urx, dm
28bdc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
28be0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
28be4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
28be8 334             | .se1            'SE1 is a fatal error condition
28be8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
28bec 335 E4 FE BF FD |                 call    #poll_waitx
28bf0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
28bf4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
28bf8 338             | .connect_test                                           ' Test lines until stable J/K state seen
28bf8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
28bfc 339 22 A7 82 FA |                 rqpin   urx, dm
28c00 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
28c04 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
28c08 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
28c0c 33d             | connected
28c0c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
28c10 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
28c14 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
28c18 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
28c1c 341             | .set_pulse
28c1c 341 1A 64 63 FD |                 getct   _pulse_time_
28c20 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
28c24 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
28c24 343             | ' of 1ms and make a correction, if necessary.
28c24 343             | '                mov     htmp, _1ms_
28c24 343             | '                subs    htmp, iframe_delta
28c24 343             | '                adds    _frame1ms_clks_, htmp
28c24 343             | '                debug(udec(_frame1ms_clks_))
28c24 343             | 
28c24 343             |                 ' Fall through to idle/processing loop
28c24 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
28c28 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
28c2c 345             | 
28c2c 345             | hidle
28c2c 345 22 A7 82 FA |                 rqpin   urx, dm
28c30 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
28c34 347 98 00 90 CD |         if_c    jmp     #.se0_test
28c38 348 24 06 70 FD |                 pollct3                         wc
28c3c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
28c40 34a 1A 94 63 FD |                 getct   hct3
28c44 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
28c48 34c             | 
28c48 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
28c4c 34d 00 70 E3 F8 |                 getbyte htmp
28c50 34e             | 
28c50 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
28c54 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
28c58 350 40 00 90 AD |         if_z    jmp     #.poll
28c5c 351             | 
28c5c 351             |         if _HAVE_GAMEPAD
28c5c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
28c60 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
28c64 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
28c68 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
28c6c 355 2C 00 90 AD |         if_z    jmp     #.poll
28c70 356             |         end
28c70 356             | 
28c70 356             |         if HAVE_MOUSE
28c70 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
28c74 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
28c78 358 20 00 90 AD |         if_z    jmp     #.poll
28c7c 359             |         end
28c7c 359             | 
28c7c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
28c80 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
28c84 35b 14 00 90 AD |         if_z    jmp     #.poll
28c88 35c             | 
28c88 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
28c8c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
28c90 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
28c94 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
28c98 360             |         if HAVE_MOUSE
28c98 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
28c9c 361             |         else
28c9c 361             |         end
28c9c 361             | 
28c9c 361             | .poll
28c9c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
28ca0 362 2D EC 63 FD |                 call    pa
28ca4 363             | .skip_poll
28ca4 363             | 
28ca4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
28ca8 364             | 
28ca8 364             | .nopoll
28ca8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
28cac 365 44 00 90 AD |         if_z    jmp     #hsuspend
28cb0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
28cb4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
28cb8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
28cbc 369 1A 84 63 FD |                 getct   hr0
28cc0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
28cc4 36b             |         if ACTIVITY_LED >= 0
28cc4 36b             |         end
28cc4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
28cc8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
28ccc 36d 5C FF 9F FD |                 jmp     #hidle
28cd0 36e             | ' Check for extended SE0 state on the bus
28cd0 36e             | .se0_test
28cd0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
28cd4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
28cd8 370 22 A7 82 FA |                 rqpin   urx, dm
28cdc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
28ce0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
28ce4 373 24 F6 BF FD |                 call    #wait_txn_ok
28ce8 374 00 00 80 FF 
28cec 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
28cf0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
28cf0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
28cf4 377             | 
28cf4 377             | hsuspend
28cf4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
28cf8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
28cfc 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
28d00 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
28d04 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
28d08 37c 00 96 07 F6 |                 mov     mod_cnt, #0
28d0c 37d             | 
28d0c 37d             |                 ' Fall through to resume wait loop
28d0c 37d             | 
28d0c 37d             | hwait_resume
28d0c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
28d10 37e 02 86 47 F0 |                 shr     hr1, #2
28d14 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
28d18 380             |         if ACTIVITY_LED >= 0
28d18 380             |         end
28d18 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
28d1c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
28d20 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
28d24 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
28d28 384 18 00 90 AD |         if_z    jmp     #.resume
28d2c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
28d30 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
28d34 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
28d38 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
28d3c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
28d40 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
28d44 38b             | .resume
28d44 38b 22 05 28 FC |                 wypin   #OUT_K, dm
28d48 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
28d4c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
28d50 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
28d54 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
28d58 390 1F 70 63 FD |                 waitx   htmp
28d5c 391 22 07 28 FC |                 wypin   #OUT_J, dm
28d60 392 01 70 47 F0 |                 shr     htmp, #1
28d64 393 1F 70 63 FD |                 waitx   htmp
28d68 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
28d6c 395 1A 92 62 FD |                 getct   iframe_ct_base
28d70 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
28d74 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
28d78 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
28d7c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
28d80 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
28d84 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
28d88 39c             | 
28d88 39c             | '------------------------------------------------------------------------------
28d88 39c             | ' Send preamble to enable low-speed HUB ports
28d88 39c             | '------------------------------------------------------------------------------
28d88 39c             | ' On entry:
28d88 39c             | ' On exit:
28d88 39c             | '   USB baud rate set to low-speed
28d88 39c             | '------------------------------------------------------------------------------
28d88 39c             | utx_pre
28d88 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
28d8c 39d 40 46 62 FD |                 dirl    dp
28d90 39e 28 02 64 FD |                 setq    #1
28d94 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
28d98 3a0 58 44 62 FD |                 drvl    dm
28d9c 3a1 59 46 62 FD |                 drvh    dp
28da0 3a2             | 
28da0 3a2 1E 00 00 FF 
28da4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
28da8 3a4             | 
28da8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
28dac 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
28db0 3a6 28 02 64 3D |         if_nc   setq    #1
28db4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
28db8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
28dbc 3a9             | .l1
28dbc 3a9             | 
28dbc 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
28dc0 3aa 40 46 62 FD |                 dirl    dp
28dc4 3ab 28 02 64 FD |                 setq    #1
28dc8 3ac 80 00 80 FF 
28dcc 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
28dd0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
28dd4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
28dd8 3b0 41 46 62 FD |                 dirh    dp
28ddc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
28de0 3b2             | 
28de0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
28de4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
28de8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
28dec 3b5             | 
28dec 3b5             | hlut_end
28dec 3b5             |                 fit     $400
28dec 3b5             |                 orgh
28dec                 | if OVERLAP_MEMORY
28dec                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
28dec                 | end
28dec                 | '------------------------------------------------------------------------------
28dec                 | ' Routines called from cog space.
28dec                 | '------------------------------------------------------------------------------
28dec                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
28dec                 | '------------------------------------------------------------------------------
28dec                 | 
28dec                 | '------------------------------------------------------------------------------
28dec                 | ' USB host cog initialization.
28dec                 | '------------------------------------------------------------------------------
28dec                 | usb_host_init
28dec                 |                 ' Initialize buffer pointers
28dec                 |         if OVERLAP_MEMORY
28dec                 |         else
28dec     40 15 B0 FE |                 loc     pb, #hid_descr
28df0                 |         end
28df0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
28df4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
28df4                 |                 {
28df4                 |                 }
28df4                 |         
28df4                 |                 {
28df4                 |                 }
28df4                 |                 'loc     pb,#hkbd_report
28df4                 |                 'mov     hkbd_report_p,pb
28df4                 | 
28df4     08 1D B0 FE |                 loc     pb, #hub_descr
28df8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
28dfc     1D 1D B0 FE |                 loc     pb, #urx_buff
28e00     F7 4F 02 F6 |                 mov     urx_buff_p, pb
28e04     95 1D B0 FE |                 loc     pb, #dev_desc_buff
28e08     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
28e0c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
28e10     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
28e14     18 15 B0 FE |                 loc     pb, #usb_cache_start
28e18     F7 55 02 F6 |                 mov     cache_start_p, pb
28e1c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
28e20     F7 57 02 F6 |                 mov     cache_end_p, pb
28e24                 | 
28e24                 |         if ERROR_LED >= 0
28e24                 |         end
28e24                 | 
28e24                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
28e24                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
28e24                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
28e24                 | ' Configure and enable the Serial Host USB port.
28e24     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
28e28                 | 
28e28                 | '------------------------------------------------------------------------------
28e28                 | ' Timing calculations happen before any interrupt(s) are enabled.
28e28                 | '------------------------------------------------------------------------------
28e28                 | ' On entry:
28e28                 | '   htmp - current CLKFREQ value.
28e28                 | '------------------------------------------------------------------------------
28e28                 | hinit_usb_timings
28e28                 | '                getct   htmp2
28e28     B8 59 02 F6 |                 mov     save_sysclk, htmp
28e2c     8D 5B 80 FF 
28e30     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
28e34     18 30 63 FD |                 getqx   _12Mbps_
28e38     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
28e3c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
28e40     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
28e44     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
28e48     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
28e4c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
28e50     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
28e54     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
28e58     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
28e5c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
28e60     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
28e64     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
28e68     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
28e6c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
28e70     80 00 00 FF 
28e74     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
28e78     18 2C 63 FD |                 getqx   _var_64_lower_
28e7c     19 2E 63 FD |                 getqy   _var_64_upper_
28e80     28 2C 63 FD |                 setq    _var_64_lower_
28e84     65 CD 1D FF 
28e88     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
28e8c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
28e90     01 00 00 FF 
28e94     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
28e98     18 2C 63 FD |                 getqx   _var_64_lower_
28e9c     19 2E 63 FD |                 getqy   _var_64_upper_
28ea0     28 2C 63 FD |                 setq    _var_64_lower_
28ea4     A1 07 00 FF 
28ea8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
28eac     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
28eb0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
28eb4     09 36 57 F0 |                 shr     _1us_, #9               wc
28eb8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
28ebc     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
28ec0     18 38 63 FD |                 getqx   _10us_
28ec4     09 38 57 F0 |                 shr     _10us_, #9              wc
28ec8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
28ecc     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
28ed0     18 3A 63 FD |                 getqx   _33us_
28ed4     09 3A 57 F0 |                 shr     _33us_, #9              wc
28ed8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
28edc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
28ee0     18 3C 63 FD |                 getqx   _txn_err_
28ee4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
28ee8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
28eec     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
28ef0     18 3E 63 FD |                 getqx   _500us_
28ef4     09 3E 57 F0 |                 shr     _500us_, #9             wc
28ef8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
28efc     01 00 00 FF 
28f00     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
28f04     18 40 63 FD |                 getqx   _txn_ok_ls_
28f08     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
28f0c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
28f10     01 00 00 FF 
28f14     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
28f18     18 42 63 FD |                 getqx   _txn_ok_fs_
28f1c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
28f20     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
28f24     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
28f28     05 00 00 FF 
28f2c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
28f30     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
28f34     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
28f38     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
28f3c     1C 00 00 FF 
28f40     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
28f44     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
28f48     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
28f4c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
28f50     00 00 00 FF 
28f54     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
28f58     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
28f5c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
28f60     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
28f64     04 00 00 FF 
28f68     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
28f6c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
28f70     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
28f74     8D 5B 00 FF 
28f78     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
28f7c     18 4C 63 FD |                 getqx   _preamble_wait_
28f80     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
28f84     01 00 00 FF 
28f88     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
28f8c     18 2C 63 FD |                 getqx   _var_64_lower_
28f90     19 2E 63 FD |                 getqy   _var_64_upper_
28f94     28 2C 63 FD |                 setq    _var_64_lower_
28f98     01 00 00 FF 
28f9c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
28fa0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
28fa4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
28fa8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
28fac     FF FF 7F FF 
28fb0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
28fb4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
28fb8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
28fbc     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
28fc0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
28fc4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
28fc8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
28fcc     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
28fd0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
28fd4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
28fd8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
28fdc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
28fe0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
28fe4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
28fe8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
28fec     A7 59 03 F6 |                 mov     _8ms_, _1ms_
28ff0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
28ff4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
28ff8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
28ffc     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
29000     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
29004     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
29008     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2900c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
29010     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
29014     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
29018     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2901c                 | '        _ret_   mov     _1sec_, save_sysclk
2901c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2901c                 | '                ret
2901c                 | {
2901c                 | }
2901c                 | 
2901c                 | '------------------------------------------------------------------------------
2901c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2901c                 | ' one. If it is, start the task progression that will configure the device for
2901c                 | ' use.
2901c                 | '------------------------------------------------------------------------------
2901c                 | ' On entry:
2901c                 | '   hconfig_base - start address of the cached config descriptor chain.
2901c                 | ' On exit:
2901c                 | '------------------------------------------------------------------------------
2901c                 | hparse_con_desc
2901c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
29020     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
29024     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
29028     4E 70 FF F9 |                 movbyts htmp,#%%1032
2902c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
29030                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
29030                 | 
29030     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
29034     6E ED 03 F1 |                 add     pa, hconfig_base
29038     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2903c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2903c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2903c                 | ' that defines a keyboard and/or mouse.
2903c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
29040                 | .next_intf
29040     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
29044     BC 01 90 3D |         if_ae   jmp     #hset_config
29048     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2904c     75 F3 03 F1 |                 add     ptrb, hnext_desc
29050     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
29054     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
29058     0C 00 90 AD |         if_z    jmp     #.intf
2905c     80 71 C7 FA |                 rdbyte  htmp, ptrb
29060     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
29064     D8 FF 9F FD |                 jmp     #.next_intf
29068                 | .intf
29068     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2906c     00 90 07 F6 |                 mov     hpar3, #0
29070     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
29074     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
29078     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2907c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
29080                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
29080                 | 
29080                 | .endp
29080     80 71 C7 FA |                 rdbyte  htmp, ptrb
29084     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
29088     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2908c     78 00 90 3D |         if_ae   jmp     #.get_device
29090     6E F3 03 F6 |                 mov     ptrb, hconfig_base
29094     75 F3 03 F1 |                 add     ptrb, hnext_desc
29098     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2909c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
290a0     64 00 90 AD |         if_z    jmp     #.get_device
290a4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
290a8     04 00 90 AD |         if_z    jmp     #.get_ep
290ac     D0 FF 9F FD |                 jmp     #.endp
290b0                 | .get_ep
290b0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
290b4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
290b8     0F 86 67 F0 |                 shl     hr1, #8 + 7
290bc     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
290c0     3F 00 00 FF 
290c4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
290c8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
290cc     00 8E 0F F2 |                 cmp     hpar2, #0               wz
290d0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
290d4     00 90 0F F2 |                 cmp     hpar3, #0               wz
290d8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
290dc     A0 FF 9F FD |                 jmp     #.endp
290e0                 | .in_ep
290e0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
290e4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
290e8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
290e8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
290ec     C2 89 DB F8 |                 setbyte hr2, hr0, #3
290f0     8C FF 9F FD |                 jmp     #.endp
290f4                 | .out_ep
290f4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
290f8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
290fc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
290fc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
29100     C2 8B DB F8 |                 setbyte hr3, hr0, #3
29104     78 FF 9F FD |                 jmp     #.endp
29108                 | 
29108                 | .get_device
29108     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2910c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
29110     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
29114     68 00 90 AD |         if_z    jmp     #.gamepad
29118     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2911c     AC 00 90 AD |         if_z    jmp     #.hub
29120     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
29124     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
29128     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2912c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
29130     4C 00 90 AD |         if_z    jmp     #.gamepad
29134     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
29138     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2913c                 | .keyboard
2913c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
29140                 |         if HAVE_MOUSE
29140     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
29144                 |         else
29144                 |         end
29144     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
29148     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2914c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
29150     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
29154     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
29158     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2915c                 |                 'debug(udec(kb_intf_num))
2915c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2915c     E0 FE 9F FD |                 jmp     #.next_intf
29160                 | if HAVE_MOUSE
29160                 | .mouse
29160     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
29164     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
29168     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2916c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
29170     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
29174                 |                 'getbyte ms_interval, hr2, #3
29174     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
29178     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2917c                 |                 'debug(udec(kb_intf_num))
2917c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2917c     C0 FE 9F FD |                 jmp     #.next_intf
29180                 | end
29180                 | .gamepad
29180     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
29184     C7 71 63 F5 |                 xor     htmp, hpar2
29188     3F 00 00 FF 
2918c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
29190     AC FE 9F AD |         if_z    jmp     #.next_intf
29194                 |         if HAVE_MOUSE
29194     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
29198     C7 71 63 F5 |                 xor     htmp, hpar2
2919c     3F 00 00 FF 
291a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
291a4     98 FE 9F AD |         if_z    jmp     #.next_intf
291a8                 |         end
291a8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
291ac     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
291b0     8C FE 9F 5D |         if_nz   jmp     #.next_intf
291b4                 | 
291b4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
291b8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
291bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
291c0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
291c4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
291c8                 |                 'debug(udec(gp_intf_num))
291c8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
291c8     74 FE 9F FD |                 jmp     #.next_intf
291cc                 | .hub
291cc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
291d0     6C FE 9F 5D |         if_nz   jmp     #.next_intf
291d4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
291d8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
291dc     60 FE 9F 5D |         if_nz   jmp     #.next_intf
291e0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
291e4     58 FE 9F 5D |         if_nz   jmp     #.next_intf
291e8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
291ec     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
291f0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
291f4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
291f8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
291fc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
29200                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
29200     3C FE 9F FD |                 jmp     #.next_intf
29204                 | 
29204                 | '------------------------------------------------------------------------------
29204                 | ' If a newly-connected device is recognized, do whatever is needed to configure
29204                 | ' it according to its function, or functions. In the case of this boot protocol
29204                 | ' keyboard/mouse class driver:
29204                 | ' - SetConfiguration(config_num)
29204                 | ' - SetProtocol(boot)
29204                 | ' - SetIdle(indefinite)
29204                 | ' - Enter the device interrupt IN polling task stage.
29204                 | '------------------------------------------------------------------------------
29204                 | ' On entry:
29204                 | ' On exit:
29204                 | '------------------------------------------------------------------------------
29204                 | hset_config
29204                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
29204                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
29204     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
29208     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2920c     00 00 0C F2 |                 cmp     0-0, #0                 wz
29210     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
29214                 |         if HAVE_MOUSE
29214     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
29218                 |         end
29218     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2921c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
29220                 | .set_config
29220     6C 0E D0 FE |                 loc     ptra, #set_config
29224     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
29228     6E ED 03 F1 |                 add     pa, hconfig_base
2922c     F6 8D C3 FA |                 rdbyte  hpar1, pa
29230     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
29234     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
29238     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2923c     A0 02 A0 FD |                 call    #control_write
29240     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29244     2D 00 64 5D |         if_nz   ret
29248                 | .kbd_config
29248     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2924c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
29250                 | 
29250     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
29254     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
29258     3F 00 00 FF 
2925c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
29260     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
29264                 | 
29264     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
29268     34 0E D0 FE |                 loc     ptra, #set_protocol
2926c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
29270     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
29274     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
29278     A0 02 A0 FD |                 call    #control_write
2927c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29280     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
29284     E4 02 90 5D |         if_nz   jmp     #.notify_client
29288     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2928c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
29290     30 03 B0 FD |                 call    #hset_idle
29294                 |                 'cmp     retval, #PID_ACK        wz
29294                 |         'if_nz   mov     hkbd_ep_addr, #0
29294                 |         'if_nz   jmp     #.notify_client
29294     A8 99 02 F6 |                 mov     hctwait, _2ms_
29298     EF 02 A0 FD |                 call    #poll_waitx
2929c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
292a0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
292a4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
292a8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
292ac     2C 03 B0 FD |                 call    #hset_kbdled_report
292b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
292b4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
292b8     B0 02 90 5D |         if_nz   jmp     #.notify_client
292bc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
292c0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
292c4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
292c8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
292cc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
292d0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
292d4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
292d8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
292dc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
292e0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
292e4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
292e8                 |         if !!HAVE_MOUSE
292e8                 |         end
292e8                 | 
292e8                 | .mouse_config
292e8                 | if HAVE_MOUSE
292e8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
292ec     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
292f0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
292f4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
292f8     3F 00 00 FF 
292fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
29300     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
29304                 | 
29304                 |                 debug("mouse passed addr check")
29304                 | 
29304     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
29308     00 00 80 FF 
2930c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
29310     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
29314     1B 01 A0 FD |                 call    #get_hid_descr_buffer
29318     55 02 A0 FD |                 call    #control_read
2931c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29320     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
29324     44 02 90 5D |         if_nz   jmp     #.notify_client
29328     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2932c     56 01 00 F6 |                 mov     0-0, total_data
29330     1B 01 A0 FD |                 call    #get_hid_descr_buffer
29334                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
29334                 | 
29334     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
29338     64 0D D0 FE |                 loc     ptra, #set_protocol
2933c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
29340     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
29344     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
29348     A0 02 A0 FD |                 call    #control_write
2934c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29350     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
29354     14 02 90 5D |         if_nz   jmp     #.notify_client
29358                 |                 debug("mouse passed SetProtocol")
29358     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2935c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
29360     60 02 B0 FD |                 call    #hset_idle
29364                 |                 'cmp     retval, #PID_ACK        wz
29364                 |         'if_nz   mov     hmouse_ep_addr, #0
29364                 |         'if_nz   jmp     #.notify_client
29364                 |                 debug("mouse passed SetIdle")
29364     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
29368     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2936c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
29370     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
29374     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
29378     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2937c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
29380     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
29384     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
29388     3F 00 00 FF 
2938c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
29390     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
29394     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
29398     D0 01 90 FD |                 jmp     #.notify_client
2939c                 | end
2939c                 | .gamepad_config
2939c                 | if _HAVE_GAMEPAD
2939c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
293a0     00 00 0C F2 |                 cmp     0-0, #0                 wz
293a4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
293a8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
293ac     00 70 03 F6 |                 mov     htmp, 0-0
293b0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
293b4     3F 00 00 FF 
293b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
293bc     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
293c0                 | 
293c0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
293c4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
293c8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
293cc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
293d0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
293d4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
293d8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
293dc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
293e0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
293e4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
293e8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
293ec     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
293f0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
293f4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
293f8                 | 
293f8                 |                 if EMUPAD_MAX_PLAYER > 0
293f8                 |                 
293f8                 | .rule_loop           
293f8                 |                 end
293f8                 | 
293f8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
293fc     5C 00 90 AD |         if_e    jmp     #.xinput
29400     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
29404     00 70 03 F6 |                 mov     htmp,0-0
29408     01 A6 02 FF 
2940c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
29410     7C 00 90 AD |         if_e    jmp     #.ps3
29414                 | 
29414     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
29418     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2941c     00 00 80 5F 
29420     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
29424     03 00 80 AF 
29428     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2942c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
29430     1B 01 A0 FD |                 call    #get_hid_descr_buffer
29434     55 02 A0 FD |                 call    #control_read
29438     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2943c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
29440     00 00 04 56 |         if_nz   mov     0-0, #0
29444     24 01 90 5D |         if_nz   jmp     #.notify_client
29448     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2944c     56 01 00 F6 |                 mov     0-0, total_data
29450     1B 01 A0 FD |                 call    #get_hid_descr_buffer
29454                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
29454                 | 
29454     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
29458     10 01 90 FD |                 jmp     #.notify_client
2945c                 | .xinput
2945c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
29460     2D EF 03 F6 |                 mov     pb,hdev_port
29464     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
29468     03 EE 27 F3 |                 fle     pb,#3
2946c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
29470     02 EF 47 FC |                 wrbyte  pb, ptra[2]
29474                 | 
29474     03 B0 06 F6 |                 mov     pkt_data, #3
29478     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2947c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
29480     5A 00 A0 FD |                 call    #txn_out
29484     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
29488                 | 
29488     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2948c     DC 00 90 FD |                 jmp     #.notify_client
29490                 | .ps3
29490     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
29494     2D EF 03 F6 |                 mov     pb,hdev_port
29498     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2949c     04 EE 27 F3 |                 fle     pb,#4
294a0     F7 EF C3 F9 |                 decod   pb
294a4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
294a8                 | 
294a8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
294ac     00 0C D0 FE |                 loc     ptra, #set_report
294b0     01 00 80 FF 
294b4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
294b8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
294bc     03 61 5C FC |                 wrword  #48, ptra[wLength]
294c0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
294c4     A0 02 A0 FD |                 call    #control_write
294c8                 | 
294c8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
294cc     E0 0B D0 FE |                 loc     ptra, #set_report
294d0     01 00 80 FF 
294d4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
294d8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
294dc     03 09 5C FC |                 wrword  #4, ptra[wLength]
294e0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
294e4     A0 02 A0 FD |                 call    #control_write
294e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
294ec     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
294f0     00 00 04 56 |         if_nz   mov     0-0, #0
294f4     74 00 90 5D |         if_nz   jmp     #.notify_client
294f8                 | 
294f8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
294fc     6C 00 90 FD |                 jmp     #.notify_client
29500                 | end
29500                 | 
29500                 | .hub_config
29500     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
29504     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
29508     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2950c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
29510     3F 00 00 FF 
29514     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
29518     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2951c                 | 
2951c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
29520     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
29524     26 EF 03 F6 |                 mov     pb, hub_descr_p
29528     55 02 A0 FD |                 call    #control_read
2952c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29530     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
29534     34 00 90 5D |         if_nz   jmp     #.notify_client
29538                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
29538                 | 
29538     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2953c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
29540     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
29544                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
29544                 | .pwr_loop
29544     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
29548     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2954c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
29550     A0 02 A0 FD |                 call    #control_write
29554     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
29558                 | 
29558     B1 99 02 F6 |                 mov     hctwait, _500ms_
2955c     B0 99 02 F1 |                 add     hctwait, _100ms_
29560     EF 02 A0 FD |                 call    #poll_waitx
29564                 | 
29564     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
29568     00 00 90 FD |                 jmp     #.notify_client
2956c                 | 
2956c                 | .notify_client
2956c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
29570     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
29574                 |                 debug(uhex_long(hdev_type,hdev_type+1))
29574                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
29574     2D 00 64 FD |                 ret
29578                 | 
29578                 | '------------------------------------------------------------------------------
29578                 | ' Initialize the keyboard/mouse data area to start-up values.
29578                 | '------------------------------------------------------------------------------
29578                 | ' On entry:
29578                 | ' On exit:
29578                 | '------------------------------------------------------------------------------
29578                 | init_kbdm_data
29578     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2957c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
29580                 | 
29580     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
29584     2B ED 03 F6 |                 mov     pa, cache_end_p
29588                 | .loop
29588     61 01 4C FC |                 wrbyte  #0, ptra++
2958c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
29590     F4 FF 9F CD |         if_b    jmp     #.loop
29594                 |         
29594                 |         if EMUPAD_MAX_PLAYER > 0
29594                 |         end
29594                 | 
29594                 | 
29594     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
29598                 | .regloop
29598     00 EC 8F F9 |                 altd    pa
2959c     00 00 04 F6 |                 mov     0-0, #0
295a0     01 EC 07 F1 |                 add     pa, #1
295a4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
295a8     EC FF 9F 5D |         if_nz   jmp     #.regloop
295ac                 | 
295ac     E1 E1 61 FF 
295b0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
295b4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
295b8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
295bc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
295c0                 | 
295c0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
295c4                 | 
295c4                 | '------------------------------------------------------------------------------
295c4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
295c4                 | ' function.
295c4                 | '------------------------------------------------------------------------------
295c4                 | ' On entry:
295c4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
295c4                 | '   hpar2 - index number of the target interface.
295c4                 | ' On exit:
295c4                 | '------------------------------------------------------------------------------
295c4                 | hset_idle
295c4     A8 99 02 F6 |                 mov     hctwait, _2ms_
295c8     EF 02 A0 FD |                 call    #poll_waitx
295cc     D8 0A D0 FE |                 loc     ptra, #set_idle
295d0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
295d4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
295d8     A0 02 80 FD |                 jmp     #control_write
295dc                 | 
295dc                 | '------------------------------------------------------------------------------
295dc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
295dc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
295dc                 | '------------------------------------------------------------------------------
295dc                 | ' On entry:
295dc                 | '   ep_addr_pid - device address and enpoint for the request.
295dc                 | ' On exit:
295dc                 | '   retval - transaction result.
295dc                 | '------------------------------------------------------------------------------
295dc                 | hset_kbdled_report
295dc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
295e0     CC 0A D0 FE |                 loc     ptra, #set_report
295e4     01 00 80 FF 
295e8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
295ec     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
295f0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
295f4     27 EF 03 F6 |                 mov     pb, urx_buff_p
295f8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
295fc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
29600                 | 
29600                 | '------------------------------------------------------------------------------
29600                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
29600                 | '------------------------------------------------------------------------------
29600                 | ' On entry:
29600                 | ' On exit:
29600                 | '------------------------------------------------------------------------------
29600                 | hget_kbd_in_report
29600     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
29604     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
29608     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2960c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
29610     CF 02 A0 FD |                 call    #do_int_in
29614     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29618     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2961c                 | 
2961c     00 90 0F F2 |                 cmp     hpar3, #0               wz
29620     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
29624                 | 
29624     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
29628     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2962c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
29630     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
29634                 | 
29634     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
29638     18 00 B0 FD |                 call    #hkbd_compare
2963c                 |         if EMUPAD_MAX_PLAYER > 0
2963c                 |         end
2963c                 | 
2963c                 | .led_check
2963c     3B 71 03 F6 |                 mov     htmp, kb_led_states
29640     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
29644     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
29648     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2964c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
29650     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
29654                 | 
29654                 | '------------------------------------------------------------------------------
29654                 | ' Compare current and previous keyboard data buffers for keypress changes.
29654                 | '------------------------------------------------------------------------------
29654                 | hkbd_compare
29654     27 F1 03 F6 |                 mov     ptra, urx_buff_p
29658     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2965c     61 73 07 FB |                 rdlong  htmp1, ptra++
29660     E1 75 07 FB |                 rdlong  htmp2, ptrb++
29664     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
29668     61 73 07 FB |                 rdlong  htmp1, ptra++
2966c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
29670     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
29674     2D 00 64 AD |         if_z    ret
29678                 | 
29678     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2967c                 | 
2967c                 |                 ' Handle modifiers
2967c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
29680     00 87 C7 FA |                 rdbyte  hr1, ptra
29684     C7 87 43 F9 |                 rolword hr1,hpar2,#0
29688     63 86 63 FD |                 mergew  hr1
2968c     08 EC 07 F6 |                 mov     pa,#8
29690                 | .modloop
29690     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
29694     E8 8C 07 F6 |                 mov     hpar1,#$E8
29698     F6 8D 83 F1 |                 sub     hpar1,pa
2969c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
296a0     FB ED 6F FB |                 djnz    pa,#.modloop
296a4                 | 
296a4     6F E0 75 FD | .release        modc    _set    wc
296a8                 |                 'alts    hdev_port, #hid_report_p
296a8                 |                 'mov     ptra, hid_report_p
296a8     02 F0 07 F1 |                 add     ptra, #2
296ac     06 EC 07 F6 |                 mov     pa, #6
296b0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
296b4     20 00 90 AD |         if_z    jmp     #.rl3
296b8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
296bc     02 F2 07 F1 |                 add     ptrb, #2
296c0     06 EE 07 F6 |                 mov     pb, #6
296c4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
296c8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
296cc     08 00 90 AD |         if_z    jmp     #.rl3
296d0     FC EF 6F FB |                 djnz    pb, #.rl2
296d4     68 00 B0 FD |                 call    #hkbd_translate
296d8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
296dc                 | 
296dc     00 90 07 F6 |                 mov     hpar3, #0
296e0     1F 90 27 F4 |                 bith    hpar3, #31
296e4                 | 
296e4     6F 00 74 FD | .press          modc    _clr    wc
296e8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
296ec     02 F0 07 F1 |                 add     ptra, #2
296f0     06 EC 07 F6 |                 mov     pa, #6
296f4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
296f8     20 00 90 AD |         if_z    jmp     #.pl3
296fc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
29700     02 F2 07 F1 |                 add     ptrb, #2
29704     06 EE 07 F6 |                 mov     pb, #6
29708     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2970c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
29710     08 00 90 AD |         if_z    jmp     #.pl3
29714     FC EF 6F FB |                 djnz    pb, #.pl2
29718     24 00 B0 FD |                 call    #hkbd_translate
2971c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
29720                 | 
29720     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
29724     08 13 F0 FE |                 loc     ptrb, #hkbd_report
29728     28 02 64 FD |                 setq #1
2972c     61 73 07 FB |                 rdlong  htmp1, ptra++
29730     28 02 64 FD |                 setq #1
29734     E1 73 67 FC |                 wrlong  htmp1, ptrb++
29738     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2973c                 | 
2973c     2D 00 64 FD |                 ret
29740                 | 
29740                 | '------------------------------------------------------------------------------
29740                 | ' Translate keyboard scancode to ASCII
29740                 | '------------------------------------------------------------------------------
29740                 | ' On entry:
29740                 | '   hpar1 - scancode
29740                 | '   hpar2 - key modifiers state
29740                 | '       c - pressed (0) or released (1) flag
29740                 | ' On exit:
29740                 | '   hpar1 - bit     31 = 0 pressed, 1 released
29740                 | '               30..17 = unused
29740                 | '                   18 = scroll-lock state 
29740                 | '                   17 = caps-lock state
29740                 | '                   16 = num-lock state 
29740                 | '                15..8 = key modifiers state
29740                 | '                 7..0 = scancode
29740                 | '------------------------------------------------------------------------------
29740                 | hkbd_translate
29740     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
29744     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
29748     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2974c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
29750     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
29754     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
29758                 | 
29758                 |         if EMUPAD_MAX_PLAYER > 0
29758                 | 
29758                 |         if EMUPAD_BT0_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT1_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT2_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT3_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT4_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT5_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT6_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT7_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT8_BIT >= 0
29758                 |         end
29758                 |         if EMUPAD_BT9_BIT >= 0
29758                 |         end
29758                 | 
29758                 |         end
29758     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2975c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
29760     1F 8C 47 F4 |                 bitc    hpar1, #31
29764                 |         if KEYQUEUE_SIZE > 0
29764     C4 09 B0 FE |                 loc pb,#keyq_head
29768     F7 71 E3 FA |                 rdword htmp,pb
2976c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
29770     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
29774     B8 75 03 F6 |                 mov htmp2,htmp
29778     04 74 07 FA |                 mul htmp2,#4
2977c     F7 75 03 F1 |                 add htmp2,pb
29780     02 74 07 F1 |                 add htmp2,#2
29784     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
29788     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2978c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
29790     F7 71 43 5C |         if_nz   wrbyte htmp,pb
29794                 |         end
29794     2D 00 7C FD |                 ret wcz
29798                 | 
29798                 | if HAVE_MOUSE
29798                 | '------------------------------------------------------------------------------
29798                 | ' Execute an IN interrupt transaction to poll for mouse activity.
29798                 | '------------------------------------------------------------------------------
29798                 | ' On entry:
29798                 | ' On exit:
29798                 | '------------------------------------------------------------------------------
29798                 | hget_mouse_in_report
29798     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2979c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
297a0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
297a4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
297a8     CF 02 A0 FD |                 call    #do_int_in
297ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
297b0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
297b4                 | 
297b4     00 90 0F F2 |                 cmp     hpar3, #0               wz
297b8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
297bc                 | 
297bc     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
297c0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
297c4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
297c8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
297cc                 | 
297cc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
297d0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
297d4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
297d8     01 90 87 31 |         if_ae   sub     hpar3, #1
297dc                 | 
297dc     40 09 90 FE |                 loc     pa, #mouse_limits
297e0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
297e4                 | 
297e4                 |                 ' load xacc,yacc,zacc
297e4     28 04 64 FD |                 setq    #3-1
297e8     80 87 07 FB |                 rdlong  hr1,ptrb
297ec                 |                 ' load limits and outptr
297ec     28 04 64 FD |                 setq    #3-1
297f0     F6 73 03 FB |                 rdlong  htmp1,pa
297f4                 | 
297f4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
297f8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
297fc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
29800     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
29804     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
29808     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2980c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
29810     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
29814                 |               
29814                 | 
29814     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
29818     07 70 67 F7 |                 signx   htmp, #7
2981c     B8 87 03 F1 |                 add     hr1,htmp
29820     00 72 0F F2 |                 cmp     htmp1,#0 wz
29824     B9 87 63 53 |         if_ne   fles    hr1,htmp1
29828     00 86 47 53 |         if_ne   fges    hr1,#0
2982c                 | 
2982c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
29830     07 70 67 F7 |                 signx   htmp, #7
29834     B8 89 03 F1 |                 add     hr2,htmp
29838     00 74 0F F2 |                 cmp     htmp2,#0 wz
2983c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
29840     00 88 47 53 |         if_ne   fges    hr2,#0
29844                 |                 
29844                 | 
29844     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
29848     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2984c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
29850     B8 8B 03 A1 |         if_z    add     hr3,htmp
29854                 | 
29854     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
29858     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2985c                 | 
2985c                 |                 ' write back accumulators
2985c     28 04 64 FD |                 setq    #3-1
29860     80 87 67 FC |                 wrlong  hr1,ptrb
29864                 |                 ' if outptr set, write X/Y words
29864     00 76 0F F2 |                 cmp htmp3,#0                    wz
29868     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2986c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
29870     2D 00 64 FD |                 ret
29874                 | end
29874                 | 
29874                 | '------------------------------------------------------------------------------
29874                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
29874                 | '------------------------------------------------------------------------------
29874                 | ' On entry:
29874                 | ' On exit:
29874                 | '------------------------------------------------------------------------------
29874                 | if _HAVE_GAMEPAD
29874                 | hget_gp_in_report
29874     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
29878     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2987c                 | 
2987c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
29880     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
29884     00 90 E3 F8 |                 getbyte hpar3
29888     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2988c     CF 02 A0 FD |                 call    #do_int_in
29890     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29894     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
29898                 | 
29898     00 90 0F F2 |                 cmp     hpar3, #0               wz
2989c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
298a0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
298a0                 | 
298a0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
298a4     00 70 E3 F8 |                 getbyte htmp                            ' |
298a8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
298ac     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
298b0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
298b4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
298b8     B8 01 C0 F8 |                 setbyte htmp                            ' |
298bc                 | 
298bc                 | ' Note: the following code compares the current and previous reports
298bc                 | ' and process the data if there are changes to ease the debug output.
298bc                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
298bc                 | ' gpPreReport buffer.
298bc                 | 
298bc                 |                 ' ----- start of block to remove
298bc                 |                 {
298bc                 |                 }
298bc                 |                 ' ----- end of block to remove
298bc     F4 04 90 FE |                 loc pa,#hpad_translate
298c0     2A EC 63 FD |                 push pa
298c4                 | 
298c4                 |                 ' FALL THROUGH !!!!
298c4                 | 
298c4                 | '------------------------------------------------------------------------------
298c4                 | ' Decode controller report
298c4                 | '------------------------------------------------------------------------------
298c4                 | hid_decode
298c4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
298c4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
298c8     00 04 00 FF 
298cc     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
298d0                 | 
298d0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
298d4                 | 
298d4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
298d8     00 2A E3 F8 |                 getbyte hidr_type
298dc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
298e0     34 02 90 AD |         if_z    jmp     #hpad_xinput
298e4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
298e8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
298ec     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
298f0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
298f4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
298f8                 |                 
298f8                 | 
298f8                 | '------------------------------------------------------------------------------
298f8                 | ' Handle HID controller (or mouse now
298f8                 | ' On entry:
298f8                 | '   ptrb - controller report
298f8                 | '------------------------------------------------------------------------------
298f8                 | hpad_hid
298f8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
298fc     F7 F1 03 F6 |                 mov     ptra, pb
29900     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
29904     00 EC 03 F6 |                 mov     pa, 0-0
29908                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
29908     19 2A 3B FF 
2990c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
29910                 | 
29910                 | .next
29910     00 EC 5F F2 |                 cmps    pa, #0      wcz
29914     2D 00 7C ED |         if_be   ret     wcz
29918                 | 
29918     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2991c     01 EC 87 F1 |                 sub     pa, #1
29920     00 8E 07 F6 |                 mov     hpar2, #0
29924                 | 
29924     C6 71 03 F6 |                 mov     htmp, hpar1
29928     03 70 07 F5 |                 and     htmp, #$03
2992c     01 70 0F F2 |                 cmp     htmp, #1    wz
29930     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
29934     07 8E 67 A7 |         if_z    signx   hpar2,#7
29938     01 EC 87 A1 |         if_z    sub     pa, #1
2993c     02 70 0F F2 |                 cmp     htmp, #2    wz
29940     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
29944     0F 8E 67 A7 |         if_z    signx   hpar2,#15
29948     02 EC 87 A1 |         if_z    sub     pa, #2
2994c     03 70 0F F2 |                 cmp     htmp, #3    wz
29950     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
29954     04 EC 87 A1 |         if_z    sub     pa, #4
29958                 | 
29958     FC 8C 07 F5 |                 and     hpar1, #$FC
2995c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2995c                 | 
2995c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
29960     0C 01 90 AD |         if_z    jmp     #.report_id
29964     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
29968     24 01 90 AD |         if_z    jmp     #.usage_page
2996c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
29970     2C 01 90 AD |         if_z    jmp     #.usage
29974     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
29978     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2997c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
29980     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
29984     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
29988     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2998c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
29990     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
29994     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
29998     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2999c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
299a0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
299a4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
299a8     64 FF 9F 5D |         if_nz   jmp     #.next
299ac                 | 
299ac     D8 1D A7 FB |                 tjf     hidr_state,#.next
299b0                 | 
299b0     03 8E 07 F5 |                 and     hpar2, #$03
299b4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
299b8     18 00 90 5D |         if_nz   jmp     #.skip
299bc                 | 
299bc     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
299c0     20 00 90 AD |         if_z    jmp     #.axes
299c4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
299c8     5C 00 90 AD |         if_z    jmp     #.hats
299cc     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
299d0     70 00 90 AD |         if_z    jmp     #.buttons
299d4                 | .skip
299d4     8F 71 03 F6 |                 mov     htmp, hidr_size
299d8     90 71 03 FA |                 mul     htmp, hidr_count
299dc     B8 23 03 F1 |                 add     hidr_offset, htmp
299e0     2C FF 9F FD |                 jmp     #.next
299e4                 | .axes
299e4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
299e4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
299e8     90 87 03 F6 |                 mov     hr1, hidr_count
299ec                 | .l1
299ec     91 8D 03 F6 |                 mov     hpar1, hidr_offset
299f0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
299f4     04 03 B0 FD |                 call    #hpad_getbits
299f8     64 03 B0 FD |                 call    #hpad_normalize
299fc     06 84 1F F2 |                 cmp     hr0, #6         wcz
29a00     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
29a04     00 88 43 C8 |         if_b    getnib  hr2
29a08     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
29a0c     5F 01 20 C9 |         if_b    setword retval
29a10     01 84 07 C1 |         if_b    add     hr0, #1
29a14     8F 23 03 F1 |                 add     hidr_offset, hidr_size
29a18     F4 87 6F FB |                 djnz    hr1, #.l1
29a1c                 | 
29a1c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
29a20     01 1C 07 F6 |                 mov     hidr_state, #1
29a24     E8 FE 9F FD |                 jmp     #.next
29a28                 | .hats
29a28                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
29a28     91 8D 03 F6 |                 mov     hpar1, hidr_offset
29a2c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
29a30     C8 02 B0 FD |                 call    #hpad_getbits
29a34     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
29a38     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
29a3c     01 1C 07 F6 |                 mov     hidr_state, #1
29a40     90 FF 9F FD |                 jmp     #.skip
29a44                 | .buttons
29a44                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
29a44     91 8D 03 F6 |                 mov     hpar1, hidr_offset
29a48     8F 8F 03 F6 |                 mov     hpar2, hidr_size
29a4c     90 8F 03 FA |                 mul     hpar2, hidr_count
29a50     A8 02 B0 FD |                 call    #hpad_getbits
29a54     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
29a58     B8 BF 62 F0 |                 shl     retval, htmp
29a5c     5F 17 43 F5 |                 or      hidr_buttons, retval
29a60     90 71 03 F1 |                 add     htmp, hidr_count
29a64     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
29a68     01 1C 07 F6 |                 mov     hidr_state, #1
29a6c     64 FF 9F FD |                 jmp     #.skip
29a70                 | .report_id
29a70     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
29a74     2D 00 7C 5D |         if_nz   ret     wcz
29a78     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
29a7c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
29a80     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
29a84     01 1C 67 56 |         if_nz   neg     hidr_state,#1
29a88     01 F2 87 51 |         if_nz   sub     ptrb,#1
29a8c     80 FE 9F FD |                 jmp     #.next
29a90                 | .usage_page
29a90     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
29a94     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
29a98     04 1C 07 A6 |         if_z    mov     hidr_state, #4
29a9c     70 FE 9F FD |                 jmp     #.next
29aa0                 | .usage
29aa0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
29aa4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
29aa8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
29aac     01 1C 07 A6 |         if_z    mov     hidr_state, #1
29ab0     5C FE 9F AD |         if_z    jmp     #.next
29ab4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
29ab8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
29abc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
29ac0     4C FE 9F AD |         if_z    jmp     #.next
29ac4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
29ac8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
29acc     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
29ad0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
29ad4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
29ad8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
29adc     10 00 90 AD |         if_z    jmp     #.usage_axis
29ae0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
29ae4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
29ae8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
29aec     20 FE 9F FD |                 jmp     #.next
29af0                 | .usage_axis
29af0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
29af4     18 FE 9F CD |         if_b    jmp     #.next
29af8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
29afc     C7 01 00 F8 |                 setnib  hpar2
29b00                 | 
29b00     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
29b04     C7 8F C3 F9 |                 decod   hpar2
29b08     C7 0F 43 F5 |                 or      hidr_flags, hpar2
29b0c                 | 
29b0c     01 24 07 F1 |                 add     hidr_usage_idx, #1
29b10     02 1C 07 F6 |                 mov     hidr_state, #2
29b14     F8 FD 9F FD |                 jmp     #.next
29b18                 | 
29b18                 | '------------------------------------------------------------------------------
29b18                 | ' Handle XInput controller
29b18                 | ' On entry:
29b18                 | '   ptrb - controller report
29b18                 | '------------------------------------------------------------------------------
29b18                 | '   Default implementation translates the report to a pseudo-defacto hid
29b18                 | '   standard and jumps to hpad_translate for actions.
29b18                 | '   Implementors may take specific actions for this kind of controller.
29b18                 | '------------------------------------------------------------------------------
29b18                 | hpad_xinput
29b18     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
29b1c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
29b20     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
29b24     14 70 0F F2 |                 cmp     htmp, #$14      wz
29b28     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
29b2c                 | 
29b2c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
29b2c                 | 
29b2c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
29b30     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
29b34                 | 
29b34     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
29b38     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
29b3c     5F BF 22 F6 |                 not     retval
29b40     5F 11 2B F9 |                 setword hidr_axis, retval, #1
29b44     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
29b48     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
29b4c     5F BF 22 F6 |                 not     retval
29b50     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
29b54                 | 
29b54     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
29b58     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
29b5c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
29b60     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
29b64     F8 01 B0 FD |                 call    #hpad_normalize
29b68     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
29b6c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
29b70     C0 BE 1E F2 |                 cmp     retval, #192    wcz
29b74     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
29b78     E4 01 B0 FD |                 call    #hpad_normalize
29b7c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
29b80                 | 
29b80     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
29b84     81 BF E6 FA |                 rdword  retval, ptrb[1]
29b88     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
29b8c     00 16 47 F4 |                 bitc    hidr_buttons, #0
29b90     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
29b94     01 16 47 F4 |                 bitc    hidr_buttons, #1
29b98     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
29b9c     02 16 47 F4 |                 bitc    hidr_buttons, #2
29ba0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
29ba4     03 16 47 F4 |                 bitc    hidr_buttons, #3
29ba8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
29bac     04 16 47 F4 |                 bitc    hidr_buttons, #4
29bb0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
29bb4     05 16 47 F4 |                 bitc    hidr_buttons, #5
29bb8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
29bbc     08 16 47 F4 |                 bitc    hidr_buttons, #8
29bc0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
29bc4     09 16 47 F4 |                 bitc    hidr_buttons, #9
29bc8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
29bcc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
29bd0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
29bd4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
29bd8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
29bdc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
29be0                 | 
29be0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
29be4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
29be8     7A BB 7A FF 
29bec     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
29bf0     F9 FF 7F FF 
29bf4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
29bf8     B9 71 5F F9 |                 altgn   htmp, #htmp1
29bfc     00 70 43 F8 |                 getnib  htmp
29c00     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
29c04                 | 
29c04     AC 01 90 FD |                 jmp     #hpad_translate
29c08                 | 
29c08                 | '------------------------------------------------------------------------------
29c08                 | ' Handle PS3 controller
29c08                 | ' On entry:
29c08                 | '   ptrb - controller report
29c08                 | '------------------------------------------------------------------------------
29c08                 | '   Default implementation translates the report to a pseudo-defacto hid
29c08                 | '   standard and jumps to hpad_translate for actions.
29c08                 | '   Implementors may take specific actions for this kind of controller.
29c08                 | '------------------------------------------------------------------------------
29c08                 | hpad_ps3
29c08     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
29c0c     01 70 0F F2 |                 cmp     htmp, #$01      wz
29c10     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
29c14                 | 
29c14                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
29c14                 | 
29c14     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
29c18     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
29c1c     40 01 B0 FD |                 call    #hpad_normalize
29c20     5F 11 23 F9 |                 setword hidr_axis, retval, #0
29c24     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
29c28     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
29c2c     30 01 B0 FD |                 call    #hpad_normalize
29c30     5F 11 2B F9 |                 setword hidr_axis, retval, #1
29c34     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
29c38     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
29c3c     20 01 B0 FD |                 call    #hpad_normalize
29c40     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
29c44     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
29c48     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
29c4c     10 01 B0 FD |                 call    #hpad_normalize
29c50     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
29c54     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
29c58     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
29c5c                 | 
29c5c     08 8C 07 F6 |                 mov     hpar1, #8
29c60     13 8E 07 F6 |                 mov     hpar2, #19
29c64     94 00 B0 FD |                 call    #hpad_getbits
29c68                 | 
29c68     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
29c6c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
29c70     00 16 47 F4 |                 bitc    hidr_buttons, #0
29c74     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
29c78     01 16 47 F4 |                 bitc    hidr_buttons, #1
29c7c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
29c80     02 16 47 F4 |                 bitc    hidr_buttons, #2
29c84     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
29c88     03 16 47 F4 |                 bitc    hidr_buttons, #3
29c8c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
29c90     04 16 47 F4 |                 bitc    hidr_buttons, #4
29c94     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
29c98     05 16 47 F4 |                 bitc    hidr_buttons, #5
29c9c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
29ca0     06 16 47 F4 |                 bitc    hidr_buttons, #6
29ca4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
29ca8     07 16 47 F4 |                 bitc    hidr_buttons, #7
29cac     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
29cb0     08 16 47 F4 |                 bitc    hidr_buttons, #8
29cb4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
29cb8     09 16 47 F4 |                 bitc    hidr_buttons, #9
29cbc     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
29cc0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
29cc4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
29cc8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
29ccc     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
29cd0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
29cd4                 | 
29cd4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
29cd8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
29cdc     09 FA 79 FF 
29ce0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
29ce4     FF FA 7F FF 
29ce8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
29cec     B9 71 5F F9 |                 altgn   htmp, #htmp1
29cf0     00 70 43 F8 |                 getnib  htmp
29cf4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
29cf8                 | 
29cf8     B8 00 90 FD |                 jmp     #hpad_translate
29cfc                 | 
29cfc                 | '------------------------------------------------------------------------------
29cfc                 | ' Read bits from report data buffer
29cfc                 | '------------------------------------------------------------------------------
29cfc                 | ' On entry:
29cfc                 | '   PTRB - report buffer
29cfc                 | '   hpar1 - start bit
29cfc                 | '   hpar2 - number of bits
29cfc                 | ' On exit:
29cfc                 | '   retval - bits
29cfc                 | '------------------------------------------------------------------------------
29cfc                 | hpad_getbits
29cfc     C6 71 03 F6 |                 mov     htmp, hpar1
29d00     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
29d04     F9 71 03 F1 |                 add     htmp, ptrb
29d08     B8 BF 02 FB |                 rdlong  retval, htmp
29d0c                 | 
29d0c     C6 73 03 F6 |                 mov     htmp1, hpar1
29d10     07 72 07 F5 |                 and     htmp1, #$07     ' shift
29d14     B9 BF 42 F0 |                 shr     retval, htmp1
29d18                 | 
29d18     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
29d1c     10 00 90 1D |         if_a    jmp     #.l1
29d20                 | 
29d20     C7 8F C3 F9 |                 decod   hpar2
29d24     01 8E 87 F1 |                 sub     hpar2, #1
29d28     C7 BF 02 F5 |                 and     retval, hpar2
29d2c     2D 00 64 FD |                 ret
29d30                 | .l1
29d30     FF 7F 00 FF 
29d34     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
29d38     03 70 07 F1 |                 add     htmp, #3
29d3c     B8 75 03 FB |                 rdlong  htmp2, htmp
29d40     18 8E 87 F1 |                 sub     hpar2, #24
29d44     C7 8F C3 F9 |                 decod   hpar2
29d48     01 8E 87 F1 |                 sub     hpar2, #1
29d4c     B9 75 43 F0 |                 shr     htmp2, htmp1
29d50     C7 75 03 F5 |                 and     htmp2, hpar2
29d54     18 74 67 F0 |                 shl     htmp2, #24
29d58     BA BF 42 F5 |                 or      retval, htmp2
29d5c     2D 00 64 FD |                 ret
29d60                 | 
29d60                 | '------------------------------------------------------------------------------
29d60                 | ' Normalize value to signed word (-32768 / 32767)
29d60                 | '------------------------------------------------------------------------------
29d60                 | ' On entry:
29d60                 | '   retval - value to normalize
29d60                 | '   hidr_lminmax - min (word 1) max (word 0) value range
29d60                 | '   - or -
29d60                 | '   hidr_pminmax - min (word 1) max (word 0) value range
29d60                 | '   hidr_size - value bits length
29d60                 | ' On exit:
29d60                 | '   retval - normalized value
29d60                 | '------------------------------------------------------------------------------
29d60                 | hpad_normalize
29d60     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
29d64     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
29d68     2D 00 64 AD |         if_z    ret
29d6c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
29d70     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
29d74     0F 72 77 F7 |                 signx   htmp1, #15      wc
29d78     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
29d7c     00 BE 66 C7 |         if_c    signx   retval, #0-0
29d80     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
29d84     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
29d88     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
29d8c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
29d90     B8 71 53 F6 |                 abs     htmp            wc
29d94     1F BE 0E F4 |                 testb   retval, #31     wz
29d98     5F BF 42 F6 |                 abs     retval
29d9c     B8 BF 12 FD |                 qdiv    retval, htmp
29da0     18 BE 62 FD |                 getqx   retval
29da4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
29da8     C0 FF 7F FF 
29dac     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
29db0     2D 00 64 FD |                 ret
29db4                 | 
29db4                 | '------------------------------------------------------------------------------
29db4                 | ' Perform controller actions
29db4                 | ' On entry:
29db4                 | '    hidr_id        report id
29db4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
29db4                 | '                      X = hidr_axis+0, #0
29db4                 | '                      Y = hidr_axis+0, #1
29db4                 | '                      Z = hidr_axis+1, #0
29db4                 | '                     RX = hidr_axis+1, #1
29db4                 | '                     RY = hidr_axis+2, #0
29db4                 | '                     RZ = hidr_axis+2, #1
29db4                 | '    hidr_buttons   buttons state (bits 0 to 31)
29db4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
29db4                 | '
29db4                 | '                     -------3 -------2 -------1 -------0 byte
29db4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
29db4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
29db4                 | '                                zyx||| |||||||| ++++++++ n. buttons
29db4                 | '                                |||||| ||||++++--------- n. axes
29db4                 | '                                |||||| ++++------------- n. hats
29db4                 | '                                ++++++------------------ valid axes
29db4                 | '------------------------------------------------------------------------------
29db4                 | hpad_translate
29db4                 | 
29db4                 | 
29db4                 |         if HAVE_HIDPAD
29db4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
29db8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
29dbc     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
29dc0     01 70 E7 F2 |                 cmpsub  htmp,#1
29dc4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
29dc8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
29dcc     2D 00 7C 3D |         if_ae   ret     wcz
29dd0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
29dd4     B8 F3 03 F1 |                 add     ptrb,htmp
29dd8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
29ddc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
29de0     28 0C 64 FD |                 setq    #7-1
29de4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
29de8                 |         end
29de8                 | 
29de8                 | 
29de8                 |         if EMUPAD_MAX_PLAYER > 0
29de8                 | .emupad_no_hat
29de8                 |         if EMUPAD_BT0_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT1_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT2_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT3_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT4_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT5_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT6_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT7_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT8_BIT >= 0
29de8                 |         end
29de8                 |         if EMUPAD_BT9_BIT >= 0
29de8                 |         end
29de8                 | .emupad_slot_over
29de8                 |         end
29de8                 | 
29de8                 |         if 0
29de8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
29de8                 | 
29de8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
29de8                 | 
29de8                 |         end
29de8     2D 00 64 FD |                 ret
29dec                 | end
29dec                 | 
29dec                 | if EMUPAD_MAX_PLAYER > 0
29dec                 | '------------------------------------------------------------------------------
29dec                 | ' Clear EmuPad state
29dec                 | '------------------------------------------------------------------------------
29dec                 | emupad_reset
29dec                 | 
29dec                 | '------------------------------------------------------------------------------
29dec                 | ' Get EmuPad Player number for current device (into retval)
29dec                 | ' Z flag is also set if current device is valid
29dec                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
29dec                 | '------------------------------------------------------------------------------
29dec                 | emupad_getnum
29dec                 | .loop
29dec                 | '------------------------------------------------------------------------------
29dec                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
29dec                 | '------------------------------------------------------------------------------
29dec                 | emupad_discon
29dec                 | .loop         
29dec                 |         
29dec                 |         ' FALL THROUGH!!!
29dec                 | 
29dec                 | '------------------------------------------------------------------------------
29dec                 | ' Update EmuPad reports (all of them...)
29dec                 | '------------------------------------------------------------------------------
29dec                 | emupad_write_reports
29dec                 | .devloop
29dec                 | 
29dec                 | end
29dec                 | 
29dec                 | 
29dec                 | '------------------------------------------------------------------------------
29dec                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
29dec                 | '------------------------------------------------------------------------------
29dec                 | ' On entry:
29dec                 | ' On exit:
29dec                 | '------------------------------------------------------------------------------
29dec                 | hget_hub_status
29dec     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
29df0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
29df4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
29df8     01 90 2F F9 |                 setword hpar3, #1, #1
29dfc     CF 02 A0 FD |                 call    #do_int_in
29e00     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29e04     0C 00 90 AD |         if_z    jmp     #.data
29e08     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
29e0c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
29e10     2D 00 64 FD |                 ret
29e14                 | .data
29e14     00 90 0F F2 |                 cmp     hpar3, #0               wz
29e18     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
29e1c                 | 
29e1c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
29e20     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
29e24     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
29e28     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
29e2c                 |                 debug(ubin_long(hub_status_chg))
29e2c                 | 
29e2c     01 5A 06 F6 |                 mov     hdev_port, #1
29e30                 | .loop
29e30     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
29e34     0C 00 B0 AD |         if_x1   call    #hub_port_handler
29e38     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
29e3c     F0 FF 9F 3D |         if_nc   jmp     #.loop
29e40     2D 00 64 FD |                 ret
29e44                 | 
29e44                 | hub_port_handler
29e44     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
29e48     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
29e4c     27 EF 03 F6 |                 mov     pb, urx_buff_p
29e50     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29e54     55 02 A0 FD |                 call    #control_read
29e58     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
29e5c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
29e5c                 | 
29e5c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
29e60     50 01 90 5D |         if_x0   jmp     #.other
29e64     68 02 D0 FE |                 loc     ptra, #clr_port_feat
29e68     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
29e6c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29e70     A0 02 A0 FD |                 call    #control_write
29e74     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
29e78     7C 01 90 5D |         if_x0   jmp     #.disconnect
29e7c     B0 99 02 F6 |                 mov     hctwait, _100ms_
29e80     EF 02 A0 FD |                 call    #poll_waitx
29e84                 | 
29e84     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
29e88     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
29e8c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29e90     A0 02 A0 FD |                 call    #control_write
29e94                 | 
29e94     02 76 07 F6 |                 mov     htmp3, #2
29e98                 | .wait_reset
29e98     AC 99 02 F6 |                 mov     hctwait, _8ms_
29e9c     EF 02 A0 FD |                 call    #poll_waitx
29ea0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
29ea4     27 EF 03 F6 |                 mov     pb, urx_buff_p
29ea8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29eac     55 02 A0 FD |                 call    #control_read
29eb0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
29eb4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
29eb8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
29ebc                 | 
29ebc     10 02 D0 FE |                 loc     ptra, #clr_port_feat
29ec0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
29ec4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29ec8     A0 02 A0 FD |                 call    #control_write
29ecc                 | 
29ecc     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
29ed0                 | .wait_recover
29ed0     A7 99 02 F6 |                 mov     hctwait, _1ms_
29ed4     EF 02 A0 FD |                 call    #poll_waitx
29ed8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
29edc                 | 
29edc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
29ee0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
29ee4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
29ee8                 | 
29ee8     00 08 00 FF 
29eec     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
29ef0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
29ef4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
29ef8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
29efc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
29f00     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29f04     48 01 90 5D |         if_nz   jmp     #.done
29f08                 | .get_dev_desc
29f08     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
29f0c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
29f10     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
29f14     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
29f18     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
29f1c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
29f20     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
29f24     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29f28     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
29f2c     AC 99 02 F6 |                 mov     hctwait, _8ms_
29f30     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
29f34     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
29f38     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
29f3c     BE 00 A0 FD |                 call    #calc_crc5
29f40     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
29f44     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
29f48     F7 AD C2 FA |                 rdbyte  total_data, pb
29f4c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
29f50     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
29f54     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29f58     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
29f5c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
29f60     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
29f64                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
29f64     9F 99 02 F6 |                 mov     hctwait, _500us_
29f68     EF 02 A0 FD |                 call    #poll_waitx
29f6c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
29f70     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
29f74     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
29f78     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
29f7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29f80     CC 00 90 5D |         if_nz   jmp     #.done
29f84     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
29f88     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
29f8c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
29f90     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
29f94     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
29f98     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
29f9c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
29fa0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
29fa4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
29fa8     A4 00 90 CD |         if_b    jmp     #.done
29fac     6C F0 BF FD |                 call    #hparse_con_desc
29fb0     9C 00 90 FD |                 jmp     #.done
29fb4                 | 
29fb4                 | .other
29fb4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
29fb8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
29fbc     28 00 90 AD |         if_x1   jmp     #.reset_feature
29fc0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
29fc4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
29fc8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
29fcc     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
29fd0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
29fd4     10 00 90 AD |         if_x1   jmp     #.reset_feature
29fd8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
29fdc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
29fe0     04 00 90 AD |         if_x1   jmp     #.reset_feature
29fe4     68 00 90 FD |                 jmp     #.done
29fe8                 | .reset_feature
29fe8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
29fec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
29ff0     A0 02 A0 FD |                 call    #control_write
29ff4     58 00 90 FD |                 jmp     #.done
29ff8                 | .disconnect
29ff8                 | 
29ff8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
29ffc     00 70 E3 F8 |                 getbyte htmp
2a000     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2a004     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2a008     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2a00c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2a010     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2a014     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2a018                 |         if EMUPAD_MAX_PLAYER > 0
2a018                 |         end
2a018                 |         if HAVE_MOUSE
2a018     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2a01c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2a020     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2a024                 |         end
2a024                 |         if HAVE_HIDPAD
2a024     14 0A F0 FE |                 loc ptrb,#hidpad_report
2a028     2D 71 03 F6 |                 mov htmp,hdev_port
2a02c     01 70 E7 F2 |                 cmpsub htmp,#1
2a030     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2a034     B8 F3 03 F1 |                 add ptrb,htmp
2a038     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2a03c     80 01 6C FC |                 wrlong #0,ptrb
2a040                 |         end
2a040                 | 
2a040     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2a044     00 00 C4 F8 |                 setbyte #0
2a048     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a04c     00 00 04 F6 |                 mov     0-0, #0
2a050                 | 
2a050                 | .done
2a050     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2a054     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2a058     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a05c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2a060     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2a064     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2a068                 | 
2a068     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2a06c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2a070     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2a074     55 02 A0 FD |                 call    #control_read
2a078     00 69 06 FB |                 rdlong  hub_port_status, ptra
2a07c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2a07c     2D 00 64 FD |                 ret
2a080                 | 
2a080                 | '------------------------------------------------------------------------------
2a080                 | ' Partially populated SETUP packets
2a080                 | '------------------------------------------------------------------------------
2a080     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2a081     06          |                 byte    REQ_GET_DESC
2a082     00 01       |                 word    TYPE_DEVICE << 8
2a084     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a086     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a088     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2a089     06          |                 byte    REQ_GET_DESC
2a08a     00 02       |                 word    TYPE_CONFIG << 8
2a08c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a08e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a090     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2a091     09          |                 byte    REQ_SET_CONFIG
2a092     00 00       |                 word    0       ' Configuration value
2a094     00 00       |                 word    0       ' Zero
2a096     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2a098     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2a099     05          |                 byte    REQ_SET_ADDR
2a09a     00 00       |                 word    0       ' Zero
2a09c     00 00       |                 word    0       ' Zero
2a09e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2a0a0                 | '------------------------------------------------------------------------------
2a0a0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2a0a0                 | ' wValue field dictates which protocol should be used.
2a0a0                 | '
2a0a0                 | ' When initialized, all devices default to report protocol. However the host
2a0a0                 | ' should not make any assumptions about the device state and should set the
2a0a0                 | ' desired protocol whenever initializing a device.
2a0a0                 | '------------------------------------------------------------------------------
2a0a0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2a0a1     0B          |                 byte    HID_SET_PROTO
2a0a2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2a0a4                 |                                                 ' (HID 1.11 Section 7.2.6).
2a0a4     00 00       |                 word    0               ' Interface index number.
2a0a6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2a0a8                 | '------------------------------------------------------------------------------
2a0a8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2a0a9     0A          |                 byte    HID_SET_IDLE
2a0aa     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2a0ac                 |                                         ' reporting until a change is detected in the report data
2a0ac                 | 
2a0ac                 |                                         ' (HID 1.11 Section 7.2.4).
2a0ac     00 00       |                 word    0       ' Interface index number.
2a0ae     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2a0b0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2a0b1     09          |                 byte    HID_SET_REPORT
2a0b2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2a0b4                 |                                         ' (HID 1.11 Section 7.2.2).
2a0b4     00 00       |                 word    0       ' Interface index number.
2a0b6     00 00       |                 word    0       ' Size of the report, in bytes.
2a0b8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2a0b9     06          |                 byte    REQ_GET_DESC
2a0ba     00 22       |                 word    TYPE_REPORT << 8
2a0bc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a0be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a0c0                 | '------------------------------------------------------------------------------
2a0c0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2a0c1     06          |                 byte    REQ_GET_DESC
2a0c2     00 29       |                 word    TYPE_HUB << 8
2a0c4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2a0c6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a0c8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2a0c9     03          |                 byte    REQ_SET_FEATURE
2a0ca     00 00       |                 word    0       ' port power
2a0cc     01 00       |                 word    1       ' Port index number (1+)
2a0ce     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a0d0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2a0d1     01          |                 byte    REQ_CLEAR_FEATURE
2a0d2     00 00       |                 word    0       ' port power
2a0d4     01 00       |                 word    1       ' Port index number (1+)
2a0d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2a0d8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2a0d9     00          |                 byte    REQ_GET_STATUS
2a0da     00 00       |                 word    0
2a0dc     01 00       |                 word    1       ' Port index number (1+)
2a0de     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2a0e0                 | '------------------------------------------------------------------------------
2a0e0                 | if _HAVE_GAMEPAD
2a0e0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2a0e4                 | ps3_command_buff
2a0e4     00 00 00 00 
2a0e8     00          |                 byte    $00, $00, $00, $00, $00
2a0e9     00 00 00 00 
2a0ed     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2a0ee     FF 27 10 00 
2a0f2     32          |                 byte    $FF, $27, $10, $00, $32
2a0f3     FF 27 10 00 
2a0f7     32          |                 byte    $FF, $27, $10, $00, $32
2a0f8     FF 27 10 00 
2a0fc     32          |                 byte    $FF, $27, $10, $00, $32
2a0fd     FF 27 10 00 
2a101     32          |                 byte    $FF, $27, $10, $00, $32
2a102     00 00 00 00 
2a106     00          |                 byte    $00, $00, $00, $00, $00
2a107     00 00 00 00 
2a10b     00          |                 byte    $00, $00, $00, $00, $00
2a10c     00 00 00 00 
2a110     00          |                 byte    $00, $00, $00, $00, $00
2a111     00 00 00    |                 byte    $00, $00, $00
2a114                 | '------------------------------------------------------------------------------
2a114     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2a117                 |                                         ' 0x01 All blinking
2a117                 |                                         ' 0x02 1 flashes, then on
2a117                 |                                         ' 0x03 2 flashes, then on
2a117                 |                                         ' 0x04 3 flashes, then on
2a117                 |                                         ' 0x05 4 flashes, then on
2a117                 |                                         ' 0x06 1 on
2a117                 |                                         ' 0x07 2 on
2a117                 |                                         ' 0x08 3 on
2a117                 |                                         ' 0x09 4 on
2a117                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2a117                 |                                         ' 0x0B Blinking*
2a117                 |                                         ' 0x0C Slow blinking*
2a117                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2a117     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2a11a     00          |                 byte    $00             ' Left rumble
2a11b     00          |                 byte    $00             ' Right rumble
2a11c     00 00 00    |                 byte    $00, $00, $00
2a11f     00          | end
2a120                 | alignl
2a120                 | 
2a120                 | if HAVE_MOUSE
2a120     00 00 00 00 
2a124     00 00 00 00 | mouse_limits long 0[2]
2a128     00 00 00 00 | mouse_outptr long 0
2a12c                 | end
2a12c                 | 
2a12c                 | if KEYQUEUE_SIZE > 0
2a12c     00          | keyq_head byte 0
2a12d     00          | keyq_tail byte 0
2a12e     00 00 00 00 
      ...             
2a32a     00 00 00 00 
2a32e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2a330                 | alignl
2a330                 | end
2a330                 | 
2a330                 | if EMUPAD_MAX_PLAYER > 0
2a330                 | emupad_rule_buffer
2a330                 | if EMUPAD_BUILTIN_RULES
2a330                 | file "padmap_builtin.dat"
2a330                 | end
2a330                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2a330                 | '' Default rule directly follows!
2a330                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2a330                 | end
2a330                 | 
2a330                 | '------------------------------------------------------------------------------
2a330                 | ' The USB data cache area gets zero-filled at every device disconnect
2a330                 | '------------------------------------------------------------------------------
2a330                 | usb_cache_start
2a330                 | 
2a330                 | ' HID descriptor and report buffers
2a330                 | if !!OVERLAP_MEMORY
2a330     00 00 00 00 
      ...             
2aa28     00 00 00 00 
2aa2c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2aa30                 | end
2aa30     00 00 00 00 
2aa34     00 00 00 00 | hkbd_report     byte    0[8]
2aa38     00 00 00 00 | hkbd_led_rep    byte    0
2aa3c                 | alignl
2aa3c                 | 
2aa3c                 | if HAVE_HIDPAD
2aa3c     00 00 00 00 
      ...             
2aaf8     00 00 00 00 
2aafc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2ab00                 | end
2ab00                 | 
2ab00                 | ' HUB descriptor
2ab00     00          | hub_descr       byte    0   ' bDescLength
2ab01     00          |                 byte    0   ' bDescriptorType
2ab02     00          |                 byte    0   ' bNbrPorts
2ab03     00 00       |                 word    0   ' wHubCharacteristics
2ab05     00          |                 byte    0   ' bPwrOn2PwrGood
2ab06     00          |                 byte    0   ' bHubContrCurrent
2ab07     00          |                 byte    0   ' DeviceRemoveable
2ab08     00          |                 byte    0   ' PortPwrCtrlMask
2ab09                 | 
2ab09                 | usb_cache_end
2ab09                 | 
2ab09                 | if HAVE_MOUSE
2ab09     00 00 00 00 | mouse_xacc      long 0
2ab0d     00 00 00 00 | mouse_yacc      long 0
2ab11     00 00 00 00 | mouse_zacc      long 0
2ab15     00          | mouse_bstate    byte 0
2ab16     00          | mouse_lpending  byte 0
2ab17     00          | mouse_rpending  byte 0
2ab18     00          | mouse_mpending  byte 0
2ab19     00          | mouse_lock      byte 0
2ab1a     00 00 00    |                 byte 0[3] ' padding
2ab1d                 | end
2ab1d                 | 
2ab1d     00 00 00 00 
      ...             
2ab95     00 00 00 00 
2ab99     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2ab9d     00 00 00 00 
2aba1     00 00 00 00 
2aba5     00 00 00 00 
2aba9     00 00 00 00 
2abad     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2abaf     00 00 00 00 
      ...             
2aca7     00 00 00 00 
2acab     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2acaf                 | 
2acaf     00          | driver_cog      byte    0                       ' Current driver cog + 1
2acb0                 | 	alignl
2acb0                 | _Audio093b_8_sc_spin2_dat_
2acb0                 | 
2acb0                 | audio       org     0
2acb0                 | 
2acb0     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2acb4     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2acb8     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2acbc                 | 
2acbc     01 EC 63 FD |             cogid   pa                   ' compute cogid
2acc0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2acc4     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2acc8     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2accc                 | 
2accc     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2acd0     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2acd4     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2acd8     0F CA 05 FC |             wrpin   dac,#right
2acdc     0F BE 1C FC |             wxpin   #95,#right    
2ace0     41 9C 64 FD |             dirh    #left addpins 1
2ace4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2ace8     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2acec     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2acf0                 |             
2acf0                 | '---------------------------------------------------------------------------------        
2acf0                 | '----------------- The main loop -------------------------------------------------
2acf0                 | '---------------------------------------------------------------------------------
2acf0                 | 
2acf0     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2acf4     10 00 90 CD |       if_c  jmp     #loop1
2acf8                 |   
2acf8     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2acfc     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2ad00     B1 00 80 F1 |             sub     0-0,a40000000
2ad04     FD A9 6D FB |             djnz    cn,#p402
2ad08                 |     
2ad08     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2ad0c     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2ad10     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2ad14     01 A8 05 C6 |     if_c    mov     cn,#1
2ad18     B6 AA 39 F3 |             fle     ct,time3 wcz
2ad1c     02 A8 05 C6 |     if_c    mov     cn,#2     
2ad20     B7 AA 39 F3 |             fle     ct,time4 wcz
2ad24     03 A8 05 C6 |     if_c    mov     cn,#3
2ad28     B8 AA 39 F3 |             fle     ct,time5 wcz
2ad2c     04 A8 05 C6 |     if_c    mov     cn,#4
2ad30     B9 AA 39 F3 |             fle     ct,time6 wcz
2ad34     05 A8 05 C6 |     if_c    mov     cn,#5
2ad38     BA AA 39 F3 |             fle     ct,time7 wcz
2ad3c     06 A8 05 C6 |     if_c    mov     cn,#6
2ad40     BB AA 39 F3 |             fle     ct,time8 wcz
2ad44     07 A8 05 C6 |     if_c    mov     cn,#7
2ad48                 | 
2ad48                 | 
2ad48                 | '----------------------------------------------------------------------------------
2ad48                 | '------------- Compute channel samples --------------------------------------------
2ad48                 | '----------------------------------------------------------------------------------
2ad48                 | 
2ad48                 | 
2ad48     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2ad4c     05 78 65 F0 |             shl     channeladd,#5
2ad50     BC F0 03 F1 |             add     ptra,channeladd
2ad54                 | 
2ad54     28 0E 64 FD |             setq    #7                        ' read parameters
2ad58     00 8F 05 FB |             rdlong  pointer0,ptra
2ad5c                 | '            testb   command0,#29 wz
2ad5c                 | '    if_nz   jmp     #p408
2ad5c                 | '    	    getword envptr,command0,#0
2ad5c                 | '    	    getbyte envspeed,command0,#2
2ad5c                 | '    	    jmp     #p404                     'if envelope then no sample rate
2ad5c                 |     	    
2ad5c     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2ad60     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2ad64     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2ad68     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2ad6c     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2ad70     00 7C 0D F2 |             cmp     qq,#0 wz                         
2ad74     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2ad78     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2ad7c                 |             
2ad7c     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2ad80     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2ad84     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2ad88                 | 
2ad88                 | 
2ad88     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2ad8c     C8 B0 39 F9 |             getword oldrs,sample0,#1
2ad90     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2ad94     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2ad98     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2ad9c     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2ada0                 | 
2ada0     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2ada4     00 AC 01 F6 |             mov     dt0,0-0    
2ada8     B3 AC 81 F1 |             sub     dt0,time0
2adac                 |             
2adac     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2adb0     CF 00 00 F1 |             add     0-0,afreq0  	
2adb4                 | 
2adb4     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2adb8     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2adbc     08 8E 45 F0 |             shr     pointer0,#8
2adc0                 |          
2adc0     1F 92 0D F4 |             testb   sstart0,#31 wz            
2adc4     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2adc8     1C 92 0D F4 |             testb   sstart0,#28 wz            
2adcc     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2add0                 |             
2add0     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2add4     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2add8     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2addc                 |             
2addc     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2ade0     C9 7C 01 F1 |             add     qq,sstart0            
2ade4                 | 
2ade4                 | 
2ade4                 | 
2ade4     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2ade8     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2adec     04 01 B0 1D |     if_gt   call    #cache_read
2adf0                 |          
2adf0                 |          
2adf0                 |  
2adf0                 |          
2adf0     1F 92 0D F4 |             testb   sstart0,#31 wz 
2adf4     08 7E 65 50 |     if_nz   shl     spl,#8
2adf8     08 8E 65 50 |     if_nz   shl     pointer0,#8
2adfc     07 8E 65 A0 |     if_z    shl     pointer0,#7
2ae00     1C 92 0D F4 |             testb   sstart0,#28 wz            
2ae04     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2ae08     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2ae0c                 |     
2ae0c                 | 
2ae0c     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2ae10     00 7E 01 F6 |             mov     spl,0-0
2ae14                 |  
2ae14     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2ae18     00 B2 01 F6 |             mov     ls0,0-0
2ae1c     20 00 00 FF 
2ae20     00 7C 05 F6 |             mov     qq,##16384
2ae24     D2 7C 81 F1 |             sub     qq,apan0
2ae28     BE 7E 31 FA |             scas    spl,qq
2ae2c     00 B4 01 F6 |             mov     rs0, 0-0
2ae30                 | 
2ae30     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2ae34     DA B8 01 F1 |             add     rs,rs0
2ae38     D7 B6 81 F1 |             sub     ls,oldls
2ae3c     D9 B6 01 F1 |             add     ls,ls0
2ae40                 |    
2ae40     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2ae44     D9 90 21 F9 |             setword sample0,ls0,#0
2ae48                 |             
2ae48     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2ae4c     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2ae50     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2ae54     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2ae58     04 00 00 AF 
2ae5c     00 68 05 A1 |     if_z    add     time1,##2048
2ae60     B4 6A 01 A6 |     if_z    mov     time2,time1
2ae64     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2ae68                 |             
2ae68     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2ae6c     00 8F 65 FC |             wrlong  pointer0,ptra
2ae70     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2ae74                 |                       
2ae74     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2ae78     FF 7B 25 A7 |     if_z    decmod  front, #511          
2ae7c                 |          
2ae7c     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2ae80     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2ae84     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2ae88     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2ae8c                 | 	    
2ae8c                 | 		    
2ae8c     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2ae90     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2ae94     D8 BC 01 F6 |             mov     newsample, oldrs       
2ae98                 | 
2ae98     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2ae9c     D6 66 01 F1 |             add     time0,dt0    
2aea0                 |                                      
2aea0     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2aea4     60 FE 9F AD |     if_z    jmp     #loop1
2aea8     D6 7C 01 F6 |             mov     qq,dt0
2aeac                 |   
2aeac     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2aeb0     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2aeb4     F4 FF 9F AD |     if_e    jmp     #p301    
2aeb8                 | 		
2aeb8     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2aebc     20 00 90 AD |     if_z    jmp #p302	   
2aec0                 |  
2aec0                 |  
2aec0     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2aec4     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2aec8     02 C6 65 C0 |     if_c    shl scptr2,#2
2aecc     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2aed0     60 C6 65 FC |             wrlong scptr2,#$60
2aed4     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2aed8     01 00 00 CF 
2aedc     7F C4 05 C7 |     if_c    incmod scptr,##639
2aee0                 | 			    
2aee0     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2aee4     00 00 00 FF 
2aee8     FF 7B 05 F7 |             incmod  front, ##511
2aeec     EF 7D 6D FB |             djnz    qq,#p301
2aef0                 |             
2aef0     FC FD 9F FD |             jmp     #loop            'loop
2aef4                 | 
2aef4                 | '----------------------------------------------------------------------------------
2aef4                 | '------------- This is the end of the main loop -----------------------------------
2aef4                 | '----------------------------------------------------------------------------------
2aef4                 | 
2aef4                 | '----------------------------------------------------------------------------------
2aef4                 | '------------- PSRAM cache ----------- --------------------------------------------
2aef4                 | '----------------------------------------------------------------------------------
2aef4                 | 
2aef4                 | ' There are 8 cache pointers for 8 channels
2aef4                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2aef4                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2aef4                 | 
2aef4                 | 
2aef4     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2aef8                 |             
2aef8     BE E8 01 F6 | 	    mov     addrhi,qq		
2aefc     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2af00     E8 A8 95 F9 | 	    alts    cn,#cache1            
2af04     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2af08     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2af0c                 | 	
2af0c     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2af10     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2af14     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2af18     08 E0 65 F0 | 	    shl     cmd,#8
2af1c     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2af20     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2af24     08 E2 65 F0 |             shl     hubaddr,#8                  '
2af28     E7 E2 01 F1 |             add     hubaddr,hubptr 
2af2c     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2af30     28 04 64 FD |             setq    #2                          ' write 3 longs
2af34     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2af38     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2af3c     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2af40                 |             
2af40                 | 	
2af40     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2af44     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2af48     E7 7C 01 F1 | 	    add     qq,hubptr
2af4c     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2af50     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2af54                 |           
2af54                 | 
2af54                 | '--------------------------------------------------------------------------
2af54                 | '------ Interrupt service -------------------------------------------------
2af54                 | '------ Output the sample, get the next one if exists ---------------------
2af54                 | '--------------------------------------------------------------------------
2af54                 | 
2af54     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2af58     0F 88 25 FC |             wypin   rsample,#right       '4
2af5c     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2af60     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2af64     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2af68     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2af6c     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2af70                 |     
2af70     F5 FF 3B FB |             reti1                        '17/19 
2af74                 |           
2af74                 | '---------------------------------------------------------------------------
2af74                 | '-------- End of interrupt -------------------------------------------------
2af74                 | '---------------------------------------------------------------------------    
2af74                 | 
2af74                 | 
2af74                 | '---------------------------------------------------------------------------
2af74                 | '------- Variables ---------------------------------------------------------
2af74                 | '---------------------------------------------------------------------------
2af74                 | 
2af74                 | ' constants
2af74                 | 
2af74     00 00 00 40 | a40000000   long $40000000
2af78     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2af7c                 | 
2af7c                 | ' Time variables
2af7c                 | 
2af7c     00 00 00 00 | time0       long 0    ' Global sample computing time
2af80     01 00 00 00 | time1       long 1    ' Local channels time
2af84     02 00 00 00 | time2       long 2
2af88     03 00 00 00 | time3       long 3
2af8c     04 00 00 00 | time4       long 4
2af90     05 00 00 00 | time5       long 5
2af94     06 00 00 00 | time6       long 6
2af98     07 00 00 00 | time7       long 7
2af9c     08 00 00 00 | time8       long 8
2afa0                 | 
2afa0     00 00 00 00 | channeladd long 0
2afa4                 | 
2afa4     00 00 00 00 | front       long 0
2afa8                 | 
2afa8                 | ' temporary variables 
2afa8     00 00 00 00 | qq          long 0
2afac     00 00 00 00 | spl         long 0
2afb0     00 00 00 00 | zero        long 0
2afb4     00 00 00 00 | mailbox     long 0
2afb8     00 00 00 00 | mailbox2 long 0
2afbc                 | 
2afbc                 | ' Interrupt ISR variables
2afbc                 | 
2afbc     00 00 00 00 | lsample     long 0
2afc0     00 00 00 00 | rsample     long 0
2afc4     00 00 00 00 | lsnext      long 0
2afc8     00 00 00 00 | rsnext      long 0 
2afcc                 | 
2afcc                 | ' channel parameter block
2afcc                 | 
2afcc     00 00 00 00 | pointer0    long 0     
2afd0     00 00 00 00 | sample0     long 0
2afd4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2afd8     00 00 00 00 | lstart0     long 0
2afdc     00 00 00 00 | lend0       long 0
2afe0     00 00 00 00 | volpan0     long 0
2afe4     00 00 00 00 | freqskip0   long 0
2afe8     00 00 00 00 | command0    long 0
2afec                 | 
2afec     00 00 00 00 | afreq0      long 0
2aff0     00 00 00 00 | askip0      long 0
2aff4     00 00 00 00 | avol0       long 0
2aff8     00 00 00 00 | apan0       long 0
2affc                 | 
2affc     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2b000     00 00 00 00 | cn          long 0
2b004     00 00 00 00 | ct          long 0
2b008     00 00 00 00 | dt0         long 0
2b00c                 | 
2b00c                 | ' Samples
2b00c     00 00 00 00 | oldls       long 0
2b010     00 00 00 00 | oldrs       long 0
2b014                 | 
2b014     00 00 00 00 | ls0         long 0
2b018     00 00 00 00 | rs0         long 0
2b01c                 | 
2b01c     00 00 00 00 | ls          long 0    
2b020     00 00 00 00 | rs          long 0
2b024                 | 
2b024     00 00 00 00 | oldsample   long 0
2b028     00 00 00 00 | newsample   long 0
2b02c                 | 
2b02c     00 00 00 00 | nrsample    long 0
2b030     00 00 00 00 | nlsample    long 0
2b034                 | 
2b034     00 00 00 00 | scbase long 0
2b038     00 00 00 00 | scptr long 0
2b03c     00 00 00 00 | scptr2 long 0
2b040     00 00 00 00 | scope long 0
2b044                 | 
2b044     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2b048     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2b04c                 | 
2b04c     00 18 07 00 | hubptr      long $71800
2b050     00 00 00 00 | cache1      long 0
2b054     00 00 00 00 | cache2      long 0
2b058     00 00 00 00 | cache3      long 0
2b05c     00 00 00 00 | cache4      long 0
2b060     00 00 00 00 | cache5      long 0
2b064     00 00 00 00 | cache6      long 0
2b068     00 00 00 00 | cache7      long 0
2b06c     00 00 00 00 | cache8      long 0
2b070                 | 
2b070                 | 
2b070     00 00 00 00 | cmd         long 0
2b074     00 00 00 00 | hubaddr     long 0
2b078     00 01 00 00 | count       long 256
2b07c     00 00 00 00 | addrlo long 0
2b080     00 00 00 00 | addrhi long 0
2b084     00 00 00 00 | pointer00 long 0
2b088     00 00 00 00 
2b08c     00 00 00 00 | null  			long 	0,0           ' for channel reset
2b090                 | 	alignl
2b090                 | __system__dat_
2b090     00 00 00 00 
2b094     00 00 00 00 | 	byte	$00[8]
2b098     03 00 00 00 
2b09c     00 00 00 00 
2b0a0     00 00 00 00 
2b0a4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b0a8     00 00 00 00 
      ...             
2b334     00 00 00 00 
2b338     00 00 00 00 | 	byte	$00[660]
2b33c     00 00 10 05 | 	long	(81 {__system____root_opendir})<<20
2b340     00 00 20 05 | 	long	(82 {__system____root_closedir})<<20
2b344     00 00 30 05 | 	long	(83 {__system____root_readdir})<<20
2b348     00 00 40 05 | 	long	(84 {__system____root_stat})<<20
2b34c     00 00 00 00 
2b350     00 00 00 00 
2b354     00 00 00 00 
2b358     00 00 00 00 
2b35c     00 00 00 00 
2b360     00 00 00 00 
2b364     00 00 00 00 | 	byte	$00[28]
2b368     D0 B3 02 00 | 	long	@@@__system__dat_ + 832
2b36c     D3 B3 02 00 | 	long	@@@__system__dat_ + 835
2b370     F4 B3 02 00 | 	long	@@@__system__dat_ + 868
2b374     0D B4 02 00 | 	long	@@@__system__dat_ + 893
2b378     28 B4 02 00 | 	long	@@@__system__dat_ + 920
2b37c     42 B4 02 00 | 	long	@@@__system__dat_ + 946
2b380     52 B4 02 00 | 	long	@@@__system__dat_ + 962
2b384     64 B4 02 00 | 	long	@@@__system__dat_ + 980
2b388     76 B4 02 00 | 	long	@@@__system__dat_ + 998
2b38c     88 B4 02 00 | 	long	@@@__system__dat_ + 1016
2b390     94 B4 02 00 | 	long	@@@__system__dat_ + 1028
2b394     A5 B4 02 00 | 	long	@@@__system__dat_ + 1045
2b398     B9 B4 02 00 | 	long	@@@__system__dat_ + 1065
2b39c     C3 B4 02 00 | 	long	@@@__system__dat_ + 1075
2b3a0     D3 B4 02 00 | 	long	@@@__system__dat_ + 1091
2b3a4     E2 B4 02 00 | 	long	@@@__system__dat_ + 1106
2b3a8     F8 B4 02 00 | 	long	@@@__system__dat_ + 1128
2b3ac     11 B5 02 00 | 	long	@@@__system__dat_ + 1153
2b3b0     25 B5 02 00 | 	long	@@@__system__dat_ + 1173
2b3b4     33 B5 02 00 | 	long	@@@__system__dat_ + 1187
2b3b8     47 B5 02 00 | 	long	@@@__system__dat_ + 1207
2b3bc     53 B5 02 00 | 	long	@@@__system__dat_ + 1219
2b3c0     65 B5 02 00 | 	long	@@@__system__dat_ + 1237
2b3c4     7D B5 02 00 | 	long	@@@__system__dat_ + 1261
2b3c8     8F B5 02 00 | 	long	@@@__system__dat_ + 1279
2b3cc     A2 B5 02 00 | 	long	@@@__system__dat_ + 1298
2b3d0     4F 4B 00 4E 
2b3d4     75 6D 65 72 
2b3d8     69 63 61 6C 
2b3dc     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2b3e0     75 6D 65 6E 
2b3e4     74 20 6F 75 
2b3e8     74 20 6F 66 
2b3ec     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2b3f0     61 69 6E 00 
2b3f4     52 65 73 75 
2b3f8     6C 74 20 6E 
2b3fc     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2b400     65 70 72 65 
2b404     73 65 6E 74 
2b408     61 62 6C 65 
2b40c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2b410     65 67 61 6C 
2b414     20 6D 75 6C 
2b418     74 69 62 79 
2b41c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2b420     65 71 75 65 
2b424     6E 63 65 00 
2b428     4E 6F 20 73 
2b42c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2b430     66 69 6C 65 
2b434     20 6F 72 20 
2b438     64 69 72 65 
2b43c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2b440     79 00 42 61 
2b444     64 20 66 69 
2b448     6C 65 20 6E 
2b44c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2b450     72 00 50 65 
2b454     72 6D 69 73 
2b458     73 69 6F 6E 
2b45c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2b460     69 65 64 00 
2b464     4E 6F 74 20 
2b468     65 6E 6F 75 
2b46c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2b470     65 6D 6F 72 
2b474     79 00 54 65 
2b478     6D 70 6F 72 
2b47c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2b480     66 61 69 6C 
2b484     75 72 65 00 
2b488     46 69 6C 65 
2b48c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2b490     73 74 73 00 
2b494     49 6E 76 61 
2b498     6C 69 64 20 
2b49c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2b4a0     6D 65 6E 74 
2b4a4     00 54 6F 6F 
2b4a8     20 6D 61 6E 
2b4ac     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2b4b0     65 6E 20 66 
2b4b4     69 6C 65 73 
2b4b8     00 49 2F 4F 
2b4bc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2b4c0     6F 72 00 4E 
2b4c4     6F 74 20 61 
2b4c8     20 64 69 72 
2b4cc     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2b4d0     72 79 00 49 
2b4d4     73 20 61 20 
2b4d8     64 69 72 65 
2b4dc     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2b4e0     79 00 52 65 
2b4e4     61 64 20 6F 
2b4e8     6E 6C 79 20 
2b4ec     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2b4f0     20 73 79 73 
2b4f4     74 65 6D 00 
2b4f8     46 75 6E 63 
2b4fc     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2b500     20 6E 6F 74 
2b504     20 69 6D 70 
2b508     6C 65 6D 65 
2b50c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2b510     00 44 69 72 
2b514     65 63 74 6F 
2b518     72 79 20 6E 
2b51c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2b520     6D 70 74 79 
2b524     00 4E 61 6D 
2b528     65 20 74 6F 
2b52c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2b530     6E 67 00 44 
2b534     65 76 69 63 
2b538     65 20 6E 6F 
2b53c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2b540     65 6B 61 62 
2b544     6C 65 00 42 
2b548     61 64 20 61 
2b54c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2b550     73 73 00 42 
2b554     72 6F 6B 65 
2b558     6E 20 63 6F 
2b55c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2b560     74 69 6F 6E 
2b564     00 44 65 76 
2b568     69 63 65 20 
2b56c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2b570     65 73 6F 75 
2b574     72 63 65 20 
2b578     62 75 73 79 
2b57c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2b580     73 73 20 64 
2b584     65 76 69 63 
2b588     65 20 6C 69 
2b58c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2b590     6F 20 73 70 
2b594     61 63 65 20 
2b598     6F 6E 20 64 
2b59c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2b5a0     65 00 55 6E 
2b5a4     6B 6E 6F 77 
2b5a8     6E 20 65 72 
2b5ac     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2b5b0     00 00 00 00 
2b5b4     00 00 00 00 | 	byte	$00[8]
2b5b8     05 00 00 00 
2b5bc     00 00 00 00 
2b5c0     00 00 00 00 
2b5c4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5c8     00 00 00 00 | 	byte	$00, $00, $00, $00
2b5cc     00 00 90 06 | 	long	(105 {__system___tx})<<20
2b5d0     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2b5d4     00 00 00 00 | 	byte	$00, $00, $00, $00
2b5d8     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0461})<<20
2b5dc     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0462})<<20
2b5e0     00 00 00 00 
2b5e4     00 00 00 00 | 	byte	$00[8]
2b5e8     01 00 00 00 
2b5ec     06 00 00 00 
2b5f0     00 00 00 00 
2b5f4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5f8     00 00 00 00 
2b5fc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2b600     00 00 90 06 | 	long	(105 {__system___tx})<<20
2b604     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2b608     00 00 00 00 | 	byte	$00, $00, $00, $00
2b60c     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0461})<<20
2b610     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0462})<<20
2b614     00 00 00 00 
2b618     00 00 00 00 | 	byte	$00[8]
2b61c     01 00 00 00 
2b620     06 00 00 00 
2b624     00 00 00 00 
2b628     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b62c     00 00 00 00 
2b630     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2b634     00 00 90 06 | 	long	(105 {__system___tx})<<20
2b638     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2b63c     00 00 00 00 | 	byte	$00, $00, $00, $00
2b640     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0461})<<20
2b644     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0462})<<20
2b648     00 00 00 00 
      ...             
2b7b8     00 00 00 00 
2b7bc     00 00 00 00 | 	byte	$00[376]
2b7c0     C4 B7 02 00 | 	long	@@@__system__dat_ + 1844
2b7c4     00 00 00 00 
2b7c8     00 00 00 00 
2b7cc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b7d0                 | 	alignl
2b7d0                 | _fatfs_cc_dat_
2b7d0     C7 00 FC 00 
2b7d4     E9 00 E2 00 
2b7d8     E4 00 E0 00 
2b7dc     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2b7e0     EA 00 EB 00 
2b7e4     E8 00 EF 00 
2b7e8     EE 00 EC 00 
2b7ec     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2b7f0     C9 00 E6 00 
2b7f4     C6 00 F4 00 
2b7f8     F6 00 F2 00 
2b7fc     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2b800     FF 00 D6 00 
2b804     DC 00 F8 00 
2b808     A3 00 D8 00 
2b80c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2b810     E1 00 ED 00 
2b814     F3 00 FA 00 
2b818     F1 00 D1 00 
2b81c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2b820     BF 00 AE 00 
2b824     AC 00 BD 00 
2b828     BC 00 A1 00 
2b82c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2b830     91 25 92 25 
2b834     93 25 02 25 
2b838     24 25 C1 00 
2b83c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2b840     A9 00 63 25 
2b844     51 25 57 25 
2b848     5D 25 A2 00 
2b84c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2b850     14 25 34 25 
2b854     2C 25 1C 25 
2b858     00 25 3C 25 
2b85c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2b860     5A 25 54 25 
2b864     69 25 66 25 
2b868     60 25 50 25 
2b86c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2b870     F0 00 D0 00 
2b874     CA 00 CB 00 
2b878     C8 00 31 01 
2b87c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2b880     CF 00 18 25 
2b884     0C 25 88 25 
2b888     84 25 A6 00 
2b88c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2b890     D3 00 DF 00 
2b894     D4 00 D2 00 
2b898     F5 00 D5 00 
2b89c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2b8a0     DE 00 DA 00 
2b8a4     DB 00 D9 00 
2b8a8     FD 00 DD 00 
2b8ac     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2b8b0     AD 00 B1 00 
2b8b4     17 20 BE 00 
2b8b8     B6 00 A7 00 
2b8bc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2b8c0     B0 00 A8 00 
2b8c4     B7 00 B9 00 
2b8c8     B3 00 B2 00 
2b8cc     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2b8d0     61 00 1A 03 
2b8d4     E0 00 17 03 
2b8d8     F8 00 07 03 
2b8dc     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2b8e0     78 01 00 01 
2b8e4     30 01 32 01 
2b8e8     06 01 39 01 
2b8ec     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2b8f0     2E 01 79 01 
2b8f4     06 01 80 01 
2b8f8     4D 00 43 02 
2b8fc     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2b900     82 01 84 01 
2b904     84 01 86 01 
2b908     87 01 87 01 
2b90c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2b910     8B 01 8B 01 
2b914     8D 01 8E 01 
2b918     8F 01 90 01 
2b91c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2b920     93 01 94 01 
2b924     F6 01 96 01 
2b928     97 01 98 01 
2b92c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2b930     9B 01 9C 01 
2b934     9D 01 20 02 
2b938     9F 01 A0 01 
2b93c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2b940     A2 01 A4 01 
2b944     A4 01 A6 01 
2b948     A7 01 A7 01 
2b94c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2b950     AB 01 AC 01 
2b954     AC 01 AE 01 
2b958     AF 01 AF 01 
2b95c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2b960     B3 01 B3 01 
2b964     B5 01 B5 01 
2b968     B7 01 B8 01 
2b96c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2b970     BB 01 BC 01 
2b974     BC 01 BE 01 
2b978     F7 01 C0 01 
2b97c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2b980     C3 01 C4 01 
2b984     C5 01 C4 01 
2b988     C7 01 C8 01 
2b98c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2b990     CB 01 CA 01 
2b994     CD 01 10 01 
2b998     DD 01 01 00 
2b99c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2b9a0     12 01 F3 01 
2b9a4     03 00 F1 01 
2b9a8     F4 01 F4 01 
2b9ac     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2b9b0     22 02 12 01 
2b9b4     3A 02 09 00 
2b9b8     65 2C 3B 02 
2b9bc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2b9c0     66 2C 3F 02 
2b9c4     40 02 41 02 
2b9c8     41 02 46 02 
2b9cc     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2b9d0     40 00 81 01 
2b9d4     86 01 55 02 
2b9d8     89 01 8A 01 
2b9dc     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2b9e0     5A 02 90 01 
2b9e4     5C 02 5D 02 
2b9e8     5E 02 5F 02 
2b9ec     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2b9f0     62 02 94 01 
2b9f4     64 02 65 02 
2b9f8     66 02 67 02 
2b9fc     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2ba00     6A 02 62 2C 
2ba04     6C 02 6D 02 
2ba08     6E 02 9C 01 
2ba0c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2ba10     9D 01 73 02 
2ba14     74 02 9F 01 
2ba18     76 02 77 02 
2ba1c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2ba20     7A 02 7B 02 
2ba24     7C 02 64 2C 
2ba28     7E 02 7F 02 
2ba2c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2ba30     82 02 A9 01 
2ba34     84 02 85 02 
2ba38     86 02 87 02 
2ba3c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2ba40     B1 01 B2 01 
2ba44     45 02 8D 02 
2ba48     8E 02 8F 02 
2ba4c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2ba50     B7 01 7B 03 
2ba54     03 00 FD 03 
2ba58     FE 03 FF 03 
2ba5c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2ba60     86 03 88 03 
2ba64     89 03 8A 03 
2ba68     B1 03 11 03 
2ba6c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2ba70     A3 03 A3 03 
2ba74     C4 03 08 03 
2ba78     CC 03 03 00 
2ba7c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2ba80     8F 03 D8 03 
2ba84     18 01 F2 03 
2ba88     0A 00 F9 03 
2ba8c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2ba90     F5 03 F6 03 
2ba94     F7 03 F7 03 
2ba98     F9 03 FA 03 
2ba9c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2baa0     20 03 50 04 
2baa4     10 07 60 04 
2baa8     22 01 8A 04 
2baac     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2bab0     0E 01 CF 04 
2bab4     01 00 C0 04 
2bab8     D0 04 44 01 
2babc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2bac0     00 00 7D 1D 
2bac4     01 00 63 2C 
2bac8     00 1E 96 01 
2bacc     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2bad0     00 1F 08 06 
2bad4     10 1F 06 06 
2bad8     20 1F 08 06 
2badc     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2bae0     40 1F 06 06 
2bae4     51 1F 07 00 
2bae8     59 1F 52 1F 
2baec     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2baf0     5D 1F 56 1F 
2baf4     5F 1F 60 1F 
2baf8     08 06 70 1F 
2bafc     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2bb00     BB 1F C8 1F 
2bb04     C9 1F CA 1F 
2bb08     CB 1F DA 1F 
2bb0c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2bb10     F9 1F EA 1F 
2bb14     EB 1F FA 1F 
2bb18     FB 1F 80 1F 
2bb1c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2bb20     08 06 A0 1F 
2bb24     08 06 B0 1F 
2bb28     04 00 B8 1F 
2bb2c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2bb30     BC 1F CC 1F 
2bb34     01 00 C3 1F 
2bb38     D0 1F 02 06 
2bb3c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2bb40     E5 1F 01 00 
2bb44     EC 1F F3 1F 
2bb48     01 00 FC 1F 
2bb4c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2bb50     32 21 70 21 
2bb54     10 02 84 21 
2bb58     01 00 83 21 
2bb5c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2bb60     30 2C 2F 04 
2bb64     60 2C 02 01 
2bb68     67 2C 06 01 
2bb6c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2bb70     80 2C 64 01 
2bb74     00 2D 26 08 
2bb78     41 FF 1A 03 
2bb7c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2bb80     05 07 09 0E 
2bb84     10 12 14 16 
2bb88     18 1C 1E 43 
2bb8c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2bb90     41 41 43 45 
2bb94     45 45 49 49 
2bb98     49 41 41 45 
2bb9c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2bba0     4F 55 55 59 
2bba4     4F 55 4F 9C 
2bba8     4F 9E 9F 41 
2bbac     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2bbb0     A5 A6 A7 A8 
2bbb4     A9 AA AB AC 
2bbb8     AD AE AF B0 
2bbbc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2bbc0     41 41 41 B8 
2bbc4     B9 BA BB BC 
2bbc8     BD BE BF C0 
2bbcc     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2bbd0     C5 41 41 C8 
2bbd4     C9 CA CB CC 
2bbd8     CD CE CF D1 
2bbdc     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2bbe0     49 49 49 49 
2bbe4     D9 DA DB DC 
2bbe8     DD 49 DF 4F 
2bbec     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2bbf0     4F E6 E8 E8 
2bbf4     55 55 55 59 
2bbf8     59 EE EF F0 
2bbfc     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2bc00     F5 F6 F7 F8 
2bc04     F9 FA FB FC 
2bc08     FD FE FF 00 
2bc0c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2bc10     00 00 00 00 | 	byte	$00, $00, $00, $00
2bc14     00 00 80 05 | 	long	(88 {_fatfs_cc_v_close})<<20
2bc18     00 00 90 05 | 	long	(89 {_fatfs_cc_v_read})<<20
2bc1c     00 00 A0 05 | 	long	(90 {_fatfs_cc_v_write})<<20
2bc20     00 00 B0 05 | 	long	(91 {_fatfs_cc_v_lseek})<<20
2bc24     00 00 C0 05 | 	long	(92 {_fatfs_cc_v_ioctl})<<20
2bc28     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_flush})<<20
2bc2c     00 00 00 00 
2bc30     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2bc34     00 00 D0 05 | 	long	(93 {_fatfs_cc_v_open})<<20
2bc38     00 00 E0 05 | 	long	(94 {_fatfs_cc_v_creat})<<20
2bc3c     00 00 F0 05 | 	long	(95 {_fatfs_cc_v_opendir})<<20
2bc40     00 00 00 06 | 	long	(96 {_fatfs_cc_v_closedir})<<20
2bc44     00 00 10 06 | 	long	(97 {_fatfs_cc_v_readdir})<<20
2bc48     00 00 20 06 | 	long	(98 {_fatfs_cc_v_stat})<<20
2bc4c     00 00 30 06 | 	long	(99 {_fatfs_cc_v_mkdir})<<20
2bc50     00 00 40 06 | 	long	(100 {_fatfs_cc_v_rmdir})<<20
2bc54     00 00 50 06 | 	long	(101 {_fatfs_cc_v_remove})<<20
2bc58     00 00 60 06 | 	long	(102 {_fatfs_cc_v_rename})<<20
2bc5c     00 00 70 06 | 	long	(103 {_fatfs_cc_v_init})<<20
2bc60     00 00 80 06 | 	long	(104 {_fatfs_cc_v_deinit})<<20
2bc64     FF FF FF FF 
2bc68     1F 00 00 00 
2bc6c     1C 00 00 00 
2bc70     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2bc74     1E 00 00 00 
2bc78     1F 00 00 00 
2bc7c     1E 00 00 00 
2bc80     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2bc84     1F 00 00 00 
2bc88     1E 00 00 00 
2bc8c     1F 00 00 00 
2bc90     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2bc94     1F 00 00 00 
2bc98     00 00 00 00 
2bc9c     1F 00 00 00 
2bca0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2bca4     5A 00 00 00 
2bca8     78 00 00 00 
2bcac     97 00 00 00 
2bcb0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2bcb4     D4 00 00 00 
2bcb8     F3 00 00 00 
2bcbc     11 01 00 00 
2bcc0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2bcc4     4E 01 00 00 
2bcc8     6D 01 00 00 
2bccc     FF FF FF FF 
2bcd0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2bcd4     00 00 00 00 
      ...             
2bcec     00 00 00 00 
2bcf0     00 00 00 00 | 	byte	$00[32]
2bcf4     12 BD 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2bcf8     16 BD 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2bcfc     00 00 00 00 
2bd00     00 00 00 00 
2bd04     00 00 00 00 
2bd08     00 00 00 00 
2bd0c     00 00       | 	byte	$00[18]
2bd0e     3F 3F 3F 00 
2bd12     55 43 54 00 
2bd16     55 43 54 00 
2bd1a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2bd1e     00 00 00 00 
2bd22     00 00 00    | 	byte	$00[7]
2bd25     CA 9A 3B 00 
2bd29     00 00 00 01 
2bd2d     01 01 01 01 
2bd31     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2bd35     91 11 11 11 
2bd39     11 01 01 01 
2bd3d     01 01 01 01 
2bd41     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2bd45     01 01 01 01 
2bd49     01 01 01    | 	byte	$01[7]
2bd4c     90 20 20 20 
2bd50     20 20 20 20 
2bd54     20 20 20 20 
2bd58     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2bd5c     42 42 42 42 
2bd60     42 42 42 42 
2bd64     42 42       | 	byte	$42[10]
2bd66     20 20 20 20 
2bd6a     20 20 20    | 	byte	$20[7]
2bd6d     44 44 44 44 
2bd71     44 44       | 	byte	$44[6]
2bd73     04 04 04 04 
2bd77     04 04 04 04 
2bd7b     04 04 04 04 
2bd7f     04 04 04 04 
2bd83     04 04 04 04 | 	byte	$04[20]
2bd87     20 20 20 20 
2bd8b     20 20       | 	byte	$20[6]
2bd8d     48 48 48 48 
2bd91     48 48       | 	byte	$48[6]
2bd93     08 08 08 08 
2bd97     08 08 08 08 
2bd9b     08 08 08 08 
2bd9f     08 08 08 08 
2bda3     08 08 08 08 | 	byte	$08[20]
2bda7     20 20 20 20 
2bdab     01 00 00 00 
2bdaf     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2bdb0                 | __methodtable__
2bdb0     F4 F7 00 00 | 	long	@_do_no_command
2bdb4     00 9D 00 00 | 	long	@_do_plus
2bdb8     E0 A0 00 00 | 	long	@_do_minus
2bdbc     A8 A5 00 00 | 	long	@_do_or
2bdc0     C0 A6 00 00 | 	long	@_do_mul
2bdc4     4C AC 00 00 | 	long	@_do_fdiv
2bdc8     90 A4 00 00 | 	long	@_do_and
2bdcc     2C AA 00 00 | 	long	@_do_div
2bdd0     14 AE 00 00 | 	long	@_do_mod
2bdd4     34 B0 00 00 | 	long	@_do_shl
2bdd8     4C B1 00 00 | 	long	@_do_shr
2bddc     64 B2 00 00 | 	long	@_do_power
2bde0     30 9C 00 00 | 	long	@_do_getvar
2bde4     98 81 00 00 | 	long	@_do_push
2bde8     88 9B 00 00 | 	long	@_do_assign
2bdec     68 DA 00 00 | 	long	@_do_cls
2bdf0     24 96 00 00 | 	long	@_do_new
2bdf4     0C DB 00 00 | 	long	@_do_plot
2bdf8     44 DC 00 00 | 	long	@_do_draw
2bdfc     2C E6 00 00 | 	long	@_do_print
2be00     24 DF 00 00 | 	long	@_do_circle
2be04     AC DD 00 00 | 	long	@_do_fcircle
2be08     9C E0 00 00 | 	long	@_do_box
2be0c     44 E4 00 00 | 	long	@_do_frame
2be10     D4 DA 00 00 | 	long	@_do_color
2be14     FC 63 00 00 | 	long	@_do_for
2be18     28 66 00 00 | 	long	@_do_next
2be1c     88 93 00 00 | 	long	@_do_list
2be20     5C 90 00 00 | 	long	@_do_run
2be24     B0 9A 00 00 | 	long	@_do_error
2be28     AC 97 00 00 | 	long	@_do_fast_goto
2be2c     9C 98 00 00 | 	long	@_do_find_goto
2be30     AC 9A 00 00 | 	long	@_do_slow_goto
2be34     9C CA 00 00 | 	long	@_do_converttoint
2be38     DC 87 00 00 | 	long	@_test_csave
2be3c     30 8B 00 00 | 	long	@_do_save
2be40     98 8D 00 00 | 	long	@_do_load
2be44     C8 EE 00 00 | 	long	@_do_pinwrite
2be48     E0 EE 00 00 | 	long	@_do_waitms
2be4c     1C F0 00 00 | 	long	@_do_waitvbl
2be50     24 F3 00 00 | 	long	@_do_if
2be54     08 F4 00 00 | 	long	@_do_else
2be58     2C F4 00 00 | 	long	@_do_nothing
2be5c     2C B4 00 00 | 	long	@_do_eq
2be60     5C BF 00 00 | 	long	@_do_ge
2be64     1C C3 00 00 | 	long	@_do_le
2be68     EC B7 00 00 | 	long	@_do_gt
2be6c     AC BB 00 00 | 	long	@_do_lt
2be70     DC C6 00 00 | 	long	@_do_ne
2be74     6C CC 00 00 | 	long	@_do_rnd
2be78     30 F4 00 00 | 	long	@_do_brun
2be7c     E0 F6 00 00 | 	long	@_do_beep
2be80     4C F0 00 00 | 	long	@_do_dir
2be84     D8 EA 00 00 | 	long	@_do_paper
2be88     60 EB 00 00 | 	long	@_do_ink
2be8c     FC EB 00 00 | 	long	@_do_font
2be90     78 EC 00 00 | 	long	@_do_mode
2be94     4C F6 00 00 | 	long	@_do_mouse
2be98     00 DA 00 00 | 	long	@_do_gettime
2be9c     80 F6 00 00 | 	long	@_do_cursor
2bea0     B4 F6 00 00 | 	long	@_do_click
2bea4     F0 D8 00 00 | 	long	@_do_mousex
2bea8     34 D9 00 00 | 	long	@_do_mousey
2beac     BC D9 00 00 | 	long	@_do_mousek
2beb0     78 D9 00 00 | 	long	@_do_mousew
2beb4     34 CE 00 00 | 	long	@_do_sin
2beb8     1C D0 00 00 | 	long	@_do_stick
2bebc     A0 D1 00 00 | 	long	@_do_strig
2bec0     04 D8 00 00 | 	long	@_do_sprite
2bec4     74 D4 00 00 | 	long	@_do_defsprite
2bec8     24 D3 00 00 | 	long	@_do_getpixel
2becc     28 F0 00 00 | 	long	@_do_waitclock
2bed0     00 F8 00 00 | 	long	@_do_negative
2bed4     84 E2 00 00 | 	long	@_do_fill
2bed8     B8 28 01 00 | 	long	@_hg010b_spin2_putchar
2bedc     E8 2C 02 00 | 	long	@__struct___bas_wrap_sender_tx
2bee0     2C 2D 02 00 | 	long	@__struct___bas_wrap_sender_rx
2bee4     74 2D 02 00 | 	long	@__struct___bas_wrap_sender_close
2bee8     18 2C 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2beec     88 2C 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2bef0     D0 2B 02 00 | 	long	@___strs_cl_pfunc
2bef4     AC 89 01 00 | 	long	@__system____root_opendir
2bef8     48 8A 01 00 | 	long	@__system____root_closedir
2befc     C4 89 01 00 | 	long	@__system____root_readdir
2bf00     50 8A 01 00 | 	long	@__system____root_stat
2bf04     9C 82 01 00 | 	long	@__system____default_putc
2bf08     20 82 01 00 | 	long	@__system____default_getc
2bf0c     44 83 01 00 | 	long	@__system____default_flush
2bf10     D8 16 02 00 | 	long	@_fatfs_cc_v_close
2bf14     F4 1A 02 00 | 	long	@_fatfs_cc_v_read
2bf18     08 1C 02 00 | 	long	@_fatfs_cc_v_write
2bf1c     E8 1C 02 00 | 	long	@_fatfs_cc_v_lseek
2bf20     70 1D 02 00 | 	long	@_fatfs_cc_v_ioctl
2bf24     C4 1D 02 00 | 	long	@_fatfs_cc_v_open
2bf28     3C 16 02 00 | 	long	@_fatfs_cc_v_creat
2bf2c     1C 17 02 00 | 	long	@_fatfs_cc_v_opendir
2bf30     90 17 02 00 | 	long	@_fatfs_cc_v_closedir
2bf34     D0 17 02 00 | 	long	@_fatfs_cc_v_readdir
2bf38     04 19 02 00 | 	long	@_fatfs_cc_v_stat
2bf3c     84 1D 02 00 | 	long	@_fatfs_cc_v_mkdir
2bf40     A4 1D 02 00 | 	long	@_fatfs_cc_v_rmdir
2bf44     94 1D 02 00 | 	long	@_fatfs_cc_v_remove
2bf48     B4 1D 02 00 | 	long	@_fatfs_cc_v_rename
2bf4c     D4 1E 02 00 | 	long	@_fatfs_cc_v_init
2bf50     DC 1E 02 00 | 	long	@_fatfs_cc_v_deinit
2bf54     F0 3B 01 00 | 	long	@__system___tx
2bf58     30 3C 01 00 | 	long	@__system___rx
2bf5c     78 95 01 00 | 	long	@__system___rxtxioctl_0461
2bf60     D0 95 01 00 | 	long	@__system____dummy_flush_0462
2bf64     A4 1E 02 00 | 	long	@_fatfs_cc_v_flush
2bf68                 | __heap_base
2bf68     00 00 00 00 
      ...             
6a768     00 00 00 00 
6a76c     00 00 00 00 | 	long	0[64002]
6a770                 | objmem
6a770     00 00 00 00 
      ...             
73a18     00 00 00 00 
73a1c     00 00 00 00 | 	long	0[9388]
73a20                 | stackspace
73a20     00 00 00 00 | 	long	0[1]
73a24 100             | 	org	COG_BSS_START
73a24 100             | _var01
73a24 100             | 	res	1
73a24 101             | _var02
73a24 101             | 	res	1
73a24 102             | _var03
73a24 102             | 	res	1
73a24 103             | _var04
73a24 103             | 	res	1
73a24 104             | _var05
73a24 104             | 	res	1
73a24 105             | _var06
73a24 105             | 	res	1
73a24 106             | _var07
73a24 106             | 	res	1
73a24 107             | _var08
73a24 107             | 	res	1
73a24 108             | _var09
73a24 108             | 	res	1
73a24 109             | arg01
73a24 109             | 	res	1
73a24 10a             | arg02
73a24 10a             | 	res	1
73a24 10b             | arg03
73a24 10b             | 	res	1
73a24 10c             | arg04
73a24 10c             | 	res	1
73a24 10d             | arg05
73a24 10d             | 	res	1
73a24 10e             | arg06
73a24 10e             | 	res	1
73a24 10f             | local01
73a24 10f             | 	res	1
73a24 110             | local02
73a24 110             | 	res	1
73a24 111             | local03
73a24 111             | 	res	1
73a24 112             | local04
73a24 112             | 	res	1
73a24 113             | local05
73a24 113             | 	res	1
73a24 114             | local06
73a24 114             | 	res	1
73a24 115             | local07
73a24 115             | 	res	1
73a24 116             | local08
73a24 116             | 	res	1
73a24 117             | local09
73a24 117             | 	res	1
73a24 118             | local10
73a24 118             | 	res	1
73a24 119             | local11
73a24 119             | 	res	1
73a24 11a             | local12
73a24 11a             | 	res	1
73a24 11b             | local13
73a24 11b             | 	res	1
73a24 11c             | local14
73a24 11c             | 	res	1
73a24 11d             | local15
73a24 11d             | 	res	1
73a24 11e             | local16
73a24 11e             | 	res	1
73a24 11f             | local17
73a24 11f             | 	res	1
73a24 120             | local18
73a24 120             | 	res	1
73a24 121             | local19
73a24 121             | 	res	1
73a24 122             | local20
73a24 122             | 	res	1
73a24 123             | local21
73a24 123             | 	res	1
73a24 124             | local22
73a24 124             | 	res	1
73a24 125             | local23
73a24 125             | 	res	1
73a24 126             | local24
73a24 126             | 	res	1
73a24 127             | local25
73a24 127             | 	res	1
73a24 128             | local26
73a24 128             | 	res	1
73a24 129             | local27
73a24 129             | 	res	1
73a24 12a             | local28
73a24 12a             | 	res	1
73a24 12b             | local29
73a24 12b             | 	res	1
73a24 12c             | local30
73a24 12c             | 	res	1
73a24 12d             | local31
73a24 12d             | 	res	1
73a24 12e             | local32
73a24 12e             | 	res	1
73a24 12f             | muldiva_
73a24 12f             | 	res	1
73a24 130             | muldivb_
73a24 130             | 	res	1
73a24 131             | 	fit	480
73a24 131             | 
