00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic020.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 20
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 74 22 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B0 D9 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed F8 D7 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 B8 C1 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 F8 C6 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 D8 CA 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 5C 51 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 18 D2 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 6C 65 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 1C 8D 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D4 8A 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb AC 9C 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 68 66 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     68 4F B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     40 4F B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     18 4F B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     28 45 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     78 45 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     68 45 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     CC 44 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     23 01 00 FF 
00ab4     0E 2B 06 F6 | 	mov	local07, ##@LR__4087
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     2D 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##23520
00adc     14 6E B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     4C 6D B1 FD | 	call	#__system__LTrim_S
00ae8     2D 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##23520
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     23 01 00 FF 
00af8     0F 1F 06 F6 | 	mov	local01, ##@LR__4088
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     2D 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##23520
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     52 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##42080
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     52 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##42080
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     2D 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##23520
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     2D 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##23520
00b64     23 01 00 FF 
00b68     10 17 06 F6 | 	mov	arg03, ##@LR__4089
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     38 6E B1 FD | 	call	#__system__Instr
00b74     52 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##42084
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     52 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##42084
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     2D 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##23520
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     2D 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##23520
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     52 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##42084
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     52 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##42084
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     2D 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##23520
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     2D 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     52 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##42084
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     52 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##42084
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     14 69 B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     B8 6C B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     F0 6B B1 FD | 	call	#__system__LTrim_S
00c44     52 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##42088
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     52 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##42084
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     48 68 B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     74 6C B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     AC 6B B1 FD | 	call	#__system__LTrim_S
00c88     2D 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##23520
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     2D 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##23520
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     23 01 00 FF 
00ca4     12 1F 06 F6 | 	mov	local01, ##@LR__4090
00ca8     52 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##42088
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     52 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##42088
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     2D 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##23528
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     2D 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##23528
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     52 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##42088
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     52 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##42088
00cf0     23 01 00 FF 
00cf4     13 15 06 F6 | 	mov	arg02, ##@LR__4091
00cf8     DC 47 B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     2D 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     2D 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     2D 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##23528
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     2D 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##23528
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     52 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##42088
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     52 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##42088
00d4c     23 01 00 FF 
00d50     14 15 06 F6 | 	mov	arg02, ##@LR__4092
00d54     80 47 B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     2D 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     2D 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     2D 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##23528
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     2D 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##23528
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     52 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##42088
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     52 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##42088
00da4     23 01 00 FF 
00da8     15 15 06 F6 | 	mov	arg02, ##@LR__4093
00dac     28 47 B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     2D 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     2D 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     2D 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##23528
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     2D 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##23528
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     52 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##42088
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     52 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##42088
00dfc     23 01 00 FF 
00e00     16 15 06 F6 | 	mov	arg02, ##@LR__4094
00e04     D0 46 B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     2D 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     2D 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     2D 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##23520
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     2D 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##23520
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     80 67 B1 FD | 	call	#__system__Mid_S
00e58     52 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##42092
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     52 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##42092
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     52 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##42080
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     52 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##42080
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     52 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##42100
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     52 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##42100
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     2D 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##23520
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     52 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##42100
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     74 66 B1 FD | 	call	#__system__Mid_S
00f64     52 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##42108
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     52 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##42108
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     23 01 00 FF 
00f80     17 15 06 F6 | 	mov	arg02, ##@LR__4095
00f84     50 45 B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     2B 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##22480
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     52 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##42108
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     2D 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##23520
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     52 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##42100
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     D4 65 B1 FD | 	call	#__system__Mid_S
01004     52 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##42108
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     52 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##42108
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     23 01 00 FF 
01020     18 15 06 F6 | 	mov	arg02, ##@LR__4096
01024     B0 44 B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     2B 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##22480
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     52 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##42108
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     2B 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##22480
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     23 01 00 FF 
01088     19 15 06 F6 | 	mov	arg02, ##@LR__4097
0108c     2B 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##22480
01094     40 44 B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     2B 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##22480
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     2B 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##22480
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     04 44 B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     2B 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##22480
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     2B 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##22480
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     52 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##42108
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     52 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##42108
011b0     23 01 00 FF 
011b4     1B 15 06 F6 | 	mov	arg02, ##@LR__4098
011b8     1C 43 B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     52 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##42108
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     52 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##42108
011dc     23 01 00 FF 
011e0     1D 15 06 F6 | 	mov	arg02, ##@LR__4099
011e4     F0 42 B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     2B 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##22480
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     2B 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##22480
01224     20 63 B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     23 01 00 FF 
01230     1F 15 06 F6 | 	mov	arg02, ##@LR__4100
01234     A0 42 B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     2B 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##22480
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     2B 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##22480
0126c     50 62 B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     23 01 00 FF 
01278     21 15 06 F6 | 	mov	arg02, ##@LR__4101
0127c     58 42 B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     2B 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##22480
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     2B 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##22480
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     38 62 B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     EC 41 B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     2B 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##22480
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     2B 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##22480
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     2B 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##22480
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     52 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##42116
01424     23 01 00 FF 
01428     23 15 06 F6 | 	mov	arg02, ##@LR__4102
0142c     A8 40 B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     52 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##42116
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     52 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##42116
0144c     23 01 00 FF 
01450     25 15 06 F6 | 	mov	arg02, ##@LR__4103
01454     80 40 B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     52 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##42116
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     52 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##42116
01474     23 01 00 FF 
01478     27 15 06 F6 | 	mov	arg02, ##@LR__4104
0147c     58 40 B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     52 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##42116
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     52 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##42116
0149c     23 01 00 FF 
014a0     29 2F 06 F6 | 	mov	local09, ##@LR__4105
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     2C 40 B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     52 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##42116
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     52 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##42116
014c8     23 01 00 FF 
014cc     2B 37 06 F6 | 	mov	local13, ##@LR__4106
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     FC 3F B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     52 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##42116
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     52 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##42116
014f8     23 01 00 FF 
014fc     2D 37 06 F6 | 	mov	local13, ##@LR__4107
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     D0 3F B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     52 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##42116
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     52 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##42116
01524     23 01 00 FF 
01528     2F 47 06 F6 | 	mov	local21, ##@LR__4108
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     A4 3F B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     52 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##42120
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     52 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##42120
01550     23 01 00 FF 
01554     31 49 06 F6 | 	mov	local22, ##@LR__4109
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     74 3F B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     52 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##42116
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     52 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##42116
01580     23 01 00 FF 
01584     33 49 06 F6 | 	mov	local22, ##@LR__4110
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     48 3F B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     52 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##42120
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     52 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##42120
015ac     23 01 00 FF 
015b0     35 41 06 F6 | 	mov	local18, ##@LR__4111
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     18 3F B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     52 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##42116
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     52 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##42116
015dc     23 01 00 FF 
015e0     37 41 06 F6 | 	mov	local18, ##@LR__4112
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     EC 3E B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     52 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##42120
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##42120
01608     23 01 00 FF 
0160c     39 4D 06 F6 | 	mov	local24, ##@LR__4113
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     BC 3E B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     52 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##42116
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     52 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##42116
01638     23 01 00 FF 
0163c     3B 4F 06 F6 | 	mov	local25, ##@LR__4114
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     8C 3E B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     52 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##42120
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     52 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##42120
01668     23 01 00 FF 
0166c     3D 51 06 F6 | 	mov	local26, ##@LR__4115
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     5C 3E B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     2B 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##22480
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     52 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##42120
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     4C 3E B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     2B 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##22480
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     2B 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##22480
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     2B 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##22480
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     2B 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##22480
017bc     34 61 B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     6C 60 B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     2B 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##22480
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     2B 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     2B 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##22480
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     2B 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##22480
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     2B 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##22480
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     94 5B B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     23 01 00 FF 
01934     3F 15 06 F6 | 	mov	arg02, ##@LR__4116
01938     9C 3B B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     2B 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##22480
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     D8 5B B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     23 01 00 FF 
01978     41 15 06 F6 | 	mov	arg02, ##@LR__4117
0197c     58 3B B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     2B 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##22480
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     2B 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##22480
019c0     B0 5D B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     2B 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##22480
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     2B 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##22480
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     2B 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##22480
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     2B 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##22480
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     2B 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##22480
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     2B 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##22480
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     2B 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##22480
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     2B 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     2B 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##22480
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     2B 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##22480
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     2B 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##22480
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     2B 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##22480
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     2B 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##22480
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     2B 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##22480
01b78                 | ' 
01b78                 | ' select case s
01b78     24 01 00 FF 
01b7c     0A 14 06 F6 | 	mov	arg02, ##@LR__4174
01b80     54 39 B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     2B 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##22480
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     2B 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##22480
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     2B 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##22480
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     2B 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##22480
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     2B 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##22480
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     2B 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##22480
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     2B 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##22480
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     2B 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##22480
01c74     38 15 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     2B 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##22480
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     2B 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##22480
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     2B 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##22480
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     2B 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
01cd0     B0 18 B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     52 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##42124
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     2B 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##22480
01d04     54 1B B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     52 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##42128
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     2B 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##22480
01d3c     74 1C B0 FD | 	call	#_isdec
01d40     52 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##42132
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     52 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##42124
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     52 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##42128
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     52 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##42128
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     52 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##42132
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     52 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##42132
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     2B 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##22480
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     2B 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##22480
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     52 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##42124
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     52 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##42124
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     52 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##42128
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     52 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##42128
01dec     52 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##42132
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     52 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     2B 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##22480
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     2B 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##22480
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     52 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##42124
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     52 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##42124
01e50     52 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##42128
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     52 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##42128
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     52 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##42132
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     52 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     2B 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##22480
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     2B 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##22480
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     2B 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##22480
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     2B 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##22480
01edc     94 1B B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     2B 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##22480
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     2B 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##22480
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     50 56 B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     2B 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##22480
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     2B 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fb4     58 13 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     2B 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##22480
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     2B 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##22480
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     2B 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##22480
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     23 01 00 FF 
02020     43 2B 06 F6 | 	mov	local07, ##@LR__4118
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     23 01 00 FF 
0204c     44 15 06 F6 | 	mov	arg02, ##@LR__4119
02050     84 34 B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     2B 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##22480
02070     23 01 00 FF 
02074     49 15 06 F6 | 	mov	arg02, ##@LR__4120
02078     5C 34 B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     2B 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##22480
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     2B 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##22480
02098     23 01 00 FF 
0209c     4E 15 06 F6 | 	mov	arg02, ##@LR__4121
020a0     34 34 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     2B 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##22492
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     2B 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##22492
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     2B 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##22500
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     2B 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     2B 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##22492
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     2B 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     2B 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##22480
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     2B 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##22480
02110     23 01 00 FF 
02114     53 29 06 F6 | 	mov	local06, ##@LR__4122
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     B8 33 B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     2B 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##22480
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     2B 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##22480
0213c     23 01 00 FF 
02140     59 29 06 F6 | 	mov	local06, ##@LR__4123
02144     14 15 02 F6 | 	mov	arg02, local06
02148     8C 33 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     2B 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##22480
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     2B 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##22480
02168     23 01 00 FF 
0216c     60 2B 06 F6 | 	mov	local07, ##@LR__4124
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     5C 33 B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     2B 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##22492
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     2B 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##22492
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     2B 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     2B 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     2B 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##22488
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     2B 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##22488
021d8     23 01 00 FF 
021dc     66 15 06 F6 | 	mov	arg02, ##@LR__4125
021e0     F4 32 B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     23 01 00 FF 
021f0     69 1F 06 F6 | 	mov	local01, ##@LR__4126
021f4     2B 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##22488
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     2B 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##22492
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     2B 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##22488
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     2B 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##22488
02228     23 01 00 FF 
0222c     6B 29 06 F6 | 	mov	local06, ##@LR__4127
02230     14 15 02 F6 | 	mov	arg02, local06
02234     A0 32 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     23 01 00 FF 
02244     6F 1F 06 F6 | 	mov	local01, ##@LR__4128
02248     2B 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##22488
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     2B 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##22492
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     34 17 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     2B 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##22480
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     2B 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##22480
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     98 62 B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     2D 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##23528
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     2D 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     00 18 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     2D 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##23528
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     2D 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##23528
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     2D 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##23528
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     2D 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##23528
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     2B 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##22500
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     2B 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##22500
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     2D 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##23528
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     2D 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##23528
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     74 29 B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     50 FC B0 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     52 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##42088
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     52 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##42088
02384     23 01 00 FF 
02388     71 15 06 F6 | 	mov	arg02, ##@LR__4129
0238c     48 31 B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     52 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##42088
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     2D 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##23528
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     2D 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##23528
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     2D 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##23528
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     2D 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##23528
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     2D 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##23528
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     2B 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##22492
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     2B 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##22492
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     2D 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##23528
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     2D 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##23528
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     88 28 B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     64 FB B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     52 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##42088
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     52 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##42088
02470     23 01 00 FF 
02474     72 15 06 F6 | 	mov	arg02, ##@LR__4130
02478     5C 30 B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     52 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##42088
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     2D 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##23528
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     2D 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##23528
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     2D 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##23528
024cc     2D 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##23528
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     2D 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     2B 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     2B 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     2D 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##23528
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     2D 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##23528
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     7C 28 B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     52 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##42088
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     52 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##42088
02538     23 01 00 FF 
0253c     73 15 06 F6 | 	mov	arg02, ##@LR__4131
02540     94 2F B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     52 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##42088
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     2D 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##23528
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     2D 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##23528
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     2D 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##23528
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     2D 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     2D 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     2B 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##22492
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     2B 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##22492
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     2D 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##23528
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     2D 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##23528
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     B4 27 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     52 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##42088
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     52 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##42088
02600     23 01 00 FF 
02604     74 15 06 F6 | 	mov	arg02, ##@LR__4132
02608     CC 2E B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     52 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##42088
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     2D 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##23528
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     2B 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##22484
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     2B 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##22484
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     2B 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##22492
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     2B 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     18 27 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     2B 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##22484
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     2B 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##22484
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     2B 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##22492
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     2B 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     98 83 B1 FD | 	call	#__system___getiolock_0348
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     DC 2D B1 FD | 	call	#__system___lockmem
026d4     23 01 00 FF 
026d8     75 15 06 F6 | 	mov	arg02, ##@LR__4133
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     BC 3A B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     54 3A B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     64 83 B1 FD | 	call	#__system___getiolock_0348
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     B8 25 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     04 5F B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     84 F8 B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     52 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##42088
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     52 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##42088
0274c     23 01 00 FF 
02750     A4 15 06 F6 | 	mov	arg02, ##@LR__4134
02754     80 2D B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     52 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##42088
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     2D 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##23520
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     23 01 00 FF 
02788     A5 13 06 F6 | 	mov	arg01, ##@LR__4135
0278c                 | ' 
0278c                 | ' write(text)
0278c     FC 1C B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     58 1E B1 FD | 	call	#_hg010b_spin2_crlf
02794     23 01 00 FF 
02798     A6 13 06 F6 | 	mov	arg01, ##@LR__4136
0279c                 | ' 
0279c                 | ' write(text)
0279c     EC 1C B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     48 1E B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     23 01 00 FF 
027c0     AC 15 06 F6 | 	mov	arg02, ##@LR__4137
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     0C 2D B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     23 01 00 FF 
027d8     AE 15 06 F6 | 	mov	arg02, ##@LR__4138
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     F4 2C B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     23 01 00 FF 
027f0     B0 15 06 F6 | 	mov	arg02, ##@LR__4139
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     DC 2C B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     23 01 00 FF 
02808     B3 15 06 F6 | 	mov	arg02, ##@LR__4140
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     C4 2C B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     23 01 00 FF 
02820     B7 15 06 F6 | 	mov	arg02, ##@LR__4141
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     AC 2C B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     23 01 00 FF 
02838     B9 15 06 F6 | 	mov	arg02, ##@LR__4142
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     94 2C B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     23 01 00 FF 
02850     BB 15 06 F6 | 	mov	arg02, ##@LR__4143
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     7C 2C B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     23 01 00 FF 
02868     BF 15 06 F6 | 	mov	arg02, ##@LR__4144
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     64 2C B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     23 01 00 FF 
02880     C3 15 06 F6 | 	mov	arg02, ##@LR__4145
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     4C 2C B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     23 01 00 FF 
02898     C7 15 06 F6 | 	mov	arg02, ##@LR__4146
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     34 2C B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     23 01 00 FF 
028b0     CB 15 06 F6 | 	mov	arg02, ##@LR__4147
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     1C 2C B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     23 01 00 FF 
028c8     CF 15 06 F6 | 	mov	arg02, ##@LR__4148
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     04 2C B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     23 01 00 FF 
028e0     D1 15 06 F6 | 	mov	arg02, ##@LR__4149
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     EC 2B B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     23 01 00 FF 
028f8     D5 15 06 F6 | 	mov	arg02, ##@LR__4150
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     D4 2B B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     23 01 00 FF 
02910     D7 15 06 F6 | 	mov	arg02, ##@LR__4151
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     BC 2B B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     23 01 00 FF 
02928     D9 15 06 F6 | 	mov	arg02, ##@LR__4152
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     A4 2B B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     23 01 00 FF 
02940     DC 15 06 F6 | 	mov	arg02, ##@LR__4153
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     8C 2B B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     23 01 00 FF 
02958     DF 15 06 F6 | 	mov	arg02, ##@LR__4154
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     74 2B B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     23 01 00 FF 
02970     E1 15 06 F6 | 	mov	arg02, ##@LR__4155
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     5C 2B B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     23 01 00 FF 
02988     E3 15 06 F6 | 	mov	arg02, ##@LR__4156
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     44 2B B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     23 01 00 FF 
029a0     E6 15 06 F6 | 	mov	arg02, ##@LR__4157
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     2C 2B B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     23 01 00 FF 
029b8     E9 15 06 F6 | 	mov	arg02, ##@LR__4158
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     14 2B B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     23 01 00 FF 
02aa0     EC 15 06 F6 | 	mov	arg02, ##@LR__4159
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     2C 2A B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     23 01 00 FF 
02ab8     EE 15 06 F6 | 	mov	arg02, ##@LR__4160
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     14 2A B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     23 01 00 FF 
02ad0     F0 15 06 F6 | 	mov	arg02, ##@LR__4161
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     FC 29 B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     23 01 00 FF 
02ae8     F2 15 06 F6 | 	mov	arg02, ##@LR__4162
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     E4 29 B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     23 01 00 FF 
02b00     F4 15 06 F6 | 	mov	arg02, ##@LR__4163
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     CC 29 B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     23 01 00 FF 
02b18     F6 15 06 F6 | 	mov	arg02, ##@LR__4164
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     B4 29 B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     23 01 00 FF 
02b30     F8 15 06 F6 | 	mov	arg02, ##@LR__4165
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     9C 29 B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     23 01 00 FF 
02b48     FA 15 06 F6 | 	mov	arg02, ##@LR__4166
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     84 29 B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     23 01 00 FF 
02b60     FC 15 06 F6 | 	mov	arg02, ##@LR__4167
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     6C 29 B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     23 01 00 FF 
02b78     FE 15 06 F6 | 	mov	arg02, ##@LR__4168
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     54 29 B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     24 01 00 FF 
02b90     00 14 06 F6 | 	mov	arg02, ##@LR__4169
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     3C 29 B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     24 01 00 FF 
02ba8     02 14 06 F6 | 	mov	arg02, ##@LR__4170
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     24 29 B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     24 01 00 FF 
02bc0     04 14 06 F6 | 	mov	arg02, ##@LR__4171
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     0C 29 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     24 01 00 FF 
02bd8     06 14 06 F6 | 	mov	arg02, ##@LR__4172
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     F4 28 B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     24 01 00 FF 
02bf0     08 14 06 F6 | 	mov	arg02, ##@LR__4173
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     DC 28 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     24 01 00 FF 
02ca0     0C 14 06 F6 | 	mov	arg02, ##@LR__4175
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     2C 28 B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     AC 03 90 AD |  if_e	jmp	#LR__0180
02cb4     24 01 00 FF 
02cb8     10 14 06 F6 | 	mov	arg02, ##@LR__4176
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     14 28 B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     9C 03 90 AD |  if_e	jmp	#LR__0181
02ccc     24 01 00 FF 
02cd0     14 14 06 F6 | 	mov	arg02, ##@LR__4177
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     FC 27 B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     8C 03 90 AD |  if_e	jmp	#LR__0182
02ce4     24 01 00 FF 
02ce8     19 14 06 F6 | 	mov	arg02, ##@LR__4178
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     E4 27 B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     7C 03 90 AD |  if_e	jmp	#LR__0183
02cfc     24 01 00 FF 
02d00     1E 14 06 F6 | 	mov	arg02, ##@LR__4179
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     CC 27 B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     6C 03 90 AD |  if_e	jmp	#LR__0184
02d14     24 01 00 FF 
02d18     24 14 06 F6 | 	mov	arg02, ##@LR__4180
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     B4 27 B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     5C 03 90 AD |  if_e	jmp	#LR__0185
02d2c     24 01 00 FF 
02d30     2B 14 06 F6 | 	mov	arg02, ##@LR__4181
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     9C 27 B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     4C 03 90 AD |  if_e	jmp	#LR__0186
02d44     24 01 00 FF 
02d48     33 14 06 F6 | 	mov	arg02, ##@LR__4182
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     84 27 B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     3C 03 90 AD |  if_e	jmp	#LR__0187
02d5c     24 01 00 FF 
02d60     37 14 06 F6 | 	mov	arg02, ##@LR__4183
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     6C 27 B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     2C 03 90 AD |  if_e	jmp	#LR__0188
02d74     24 01 00 FF 
02d78     3D 14 06 F6 | 	mov	arg02, ##@LR__4184
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     54 27 B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     1C 03 90 AD |  if_e	jmp	#LR__0189
02d8c     24 01 00 FF 
02d90     43 14 06 F6 | 	mov	arg02, ##@LR__4185
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     3C 27 B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     0C 03 90 AD |  if_e	jmp	#LR__0190
02da4     24 01 00 FF 
02da8     49 14 06 F6 | 	mov	arg02, ##@LR__4186
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     24 27 B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     FC 02 90 AD |  if_e	jmp	#LR__0191
02dbc     24 01 00 FF 
02dc0     4E 14 06 F6 | 	mov	arg02, ##@LR__4187
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     0C 27 B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     EC 02 90 AD |  if_e	jmp	#LR__0192
02dd4     24 01 00 FF 
02dd8     52 14 06 F6 | 	mov	arg02, ##@LR__4188
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     F4 26 B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     DC 02 90 AD |  if_e	jmp	#LR__0193
02dec     24 01 00 FF 
02df0     57 14 06 F6 | 	mov	arg02, ##@LR__4189
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     DC 26 B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     CC 02 90 AD |  if_e	jmp	#LR__0194
02e04     24 01 00 FF 
02e08     5D 14 06 F6 | 	mov	arg02, ##@LR__4190
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     C4 26 B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     BC 02 90 AD |  if_e	jmp	#LR__0195
02e1c     24 01 00 FF 
02e20     62 14 06 F6 | 	mov	arg02, ##@LR__4191
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     AC 26 B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     AC 02 90 AD |  if_e	jmp	#LR__0196
02e34     24 01 00 FF 
02e38     67 14 06 F6 | 	mov	arg02, ##@LR__4192
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     94 26 B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     9C 02 90 AD |  if_e	jmp	#LR__0197
02e4c     24 01 00 FF 
02e50     6C 14 06 F6 | 	mov	arg02, ##@LR__4193
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     7C 26 B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     8C 02 90 AD |  if_e	jmp	#LR__0198
02e64     24 01 00 FF 
02e68     75 14 06 F6 | 	mov	arg02, ##@LR__4194
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     64 26 B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     7C 02 90 AD |  if_e	jmp	#LR__0199
02e7c     24 01 00 FF 
02e80     7C 14 06 F6 | 	mov	arg02, ##@LR__4195
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     4C 26 B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     6C 02 90 AD |  if_e	jmp	#LR__0200
02e94     24 01 00 FF 
02e98     84 14 06 F6 | 	mov	arg02, ##@LR__4196
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     34 26 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     5C 02 90 AD |  if_e	jmp	#LR__0201
02eac     24 01 00 FF 
02eb0     87 14 06 F6 | 	mov	arg02, ##@LR__4197
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     1C 26 B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     4C 02 90 AD |  if_e	jmp	#LR__0202
02ec4     24 01 00 FF 
02ec8     8C 14 06 F6 | 	mov	arg02, ##@LR__4198
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     04 26 B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     3C 02 90 AD |  if_e	jmp	#LR__0203
02edc     24 01 00 FF 
02ee0     91 14 06 F6 | 	mov	arg02, ##@LR__4199
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     EC 25 B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     2C 02 90 AD |  if_e	jmp	#LR__0204
02ef4     24 01 00 FF 
02ef8     96 14 06 F6 | 	mov	arg02, ##@LR__4200
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     D4 25 B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     1C 02 90 AD |  if_e	jmp	#LR__0205
02f0c     24 01 00 FF 
02f10     9A 14 06 F6 | 	mov	arg02, ##@LR__4201
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     BC 25 B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     0C 02 90 AD |  if_e	jmp	#LR__0206
02f24     24 01 00 FF 
02f28     9E 14 06 F6 | 	mov	arg02, ##@LR__4202
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     A4 25 B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     FC 01 90 AD |  if_e	jmp	#LR__0207
02f3c     24 01 00 FF 
02f40     A3 14 06 F6 | 	mov	arg02, ##@LR__4203
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     8C 25 B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     EC 01 90 AD |  if_e	jmp	#LR__0208
02f54     24 01 00 FF 
02f58     A9 14 06 F6 | 	mov	arg02, ##@LR__4204
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     74 25 B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     DC 01 90 AD |  if_e	jmp	#LR__0209
02f6c     24 01 00 FF 
02f70     AD 14 06 F6 | 	mov	arg02, ##@LR__4205
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     5C 25 B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     CC 01 90 AD |  if_e	jmp	#LR__0210
02f84     24 01 00 FF 
02f88     B2 14 06 F6 | 	mov	arg02, ##@LR__4206
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     44 25 B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     BC 01 90 AD |  if_e	jmp	#LR__0211
02f9c     24 01 00 FF 
02fa0     B7 14 06 F6 | 	mov	arg02, ##@LR__4207
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     2C 25 B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     AC 01 90 AD |  if_e	jmp	#LR__0212
02fb4     24 01 00 FF 
02fb8     BD 14 06 F6 | 	mov	arg02, ##@LR__4208
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     14 25 B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     9C 01 90 AD |  if_e	jmp	#LR__0213
02fcc     24 01 00 FF 
02fd0     C4 14 06 F6 | 	mov	arg02, ##@LR__4209
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     FC 24 B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     8C 01 90 AD |  if_e	jmp	#LR__0214
02fe4     24 01 00 FF 
02fe8     CA 14 06 F6 | 	mov	arg02, ##@LR__4210
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     E4 24 B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     7C 01 90 AD |  if_e	jmp	#LR__0215
02ffc     24 01 00 FF 
03000     D4 14 06 F6 | 	mov	arg02, ##@LR__4211
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     CC 24 B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     6C 01 90 AD |  if_e	jmp	#LR__0216
03014     24 01 00 FF 
03018     DB 14 06 F6 | 	mov	arg02, ##@LR__4212
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     B4 24 B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     5C 01 90 AD |  if_e	jmp	#LR__0217
0302c     24 01 00 FF 
03030     E5 14 06 F6 | 	mov	arg02, ##@LR__4213
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     9C 24 B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     4C 01 90 AD |  if_e	jmp	#LR__0218
03044     24 01 00 FF 
03048     EA 14 06 F6 | 	mov	arg02, ##@LR__4214
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     84 24 B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     3C 01 90 AD |  if_e	jmp	#LR__0219
0305c     40 01 90 FD | 	jmp	#LR__0220
03060                 | LR__0180
03060     40 FA 05 F6 | 	mov	result1, #64
03064     3C 01 90 FD | 	jmp	#LR__0221
03068                 | LR__0181
03068     41 FA 05 F6 | 	mov	result1, #65
0306c     34 01 90 FD | 	jmp	#LR__0221
03070                 | LR__0182
03070     42 FA 05 F6 | 	mov	result1, #66
03074     2C 01 90 FD | 	jmp	#LR__0221
03078                 | LR__0183
03078     43 FA 05 F6 | 	mov	result1, #67
0307c     24 01 90 FD | 	jmp	#LR__0221
03080                 | LR__0184
03080     44 FA 05 F6 | 	mov	result1, #68
03084     1C 01 90 FD | 	jmp	#LR__0221
03088                 | LR__0185
03088     45 FA 05 F6 | 	mov	result1, #69
0308c     14 01 90 FD | 	jmp	#LR__0221
03090                 | LR__0186
03090     46 FA 05 F6 | 	mov	result1, #70
03094     0C 01 90 FD | 	jmp	#LR__0221
03098                 | LR__0187
03098     47 FA 05 F6 | 	mov	result1, #71
0309c     04 01 90 FD | 	jmp	#LR__0221
030a0                 | LR__0188
030a0     48 FA 05 F6 | 	mov	result1, #72
030a4     FC 00 90 FD | 	jmp	#LR__0221
030a8                 | LR__0189
030a8     49 FA 05 F6 | 	mov	result1, #73
030ac     F4 00 90 FD | 	jmp	#LR__0221
030b0                 | LR__0190
030b0     44 FA 05 F6 | 	mov	result1, #68
030b4     EC 00 90 FD | 	jmp	#LR__0221
030b8                 | LR__0191
030b8     4C FA 05 F6 | 	mov	result1, #76
030bc     E4 00 90 FD | 	jmp	#LR__0221
030c0                 | LR__0192
030c0     4D FA 05 F6 | 	mov	result1, #77
030c4     DC 00 90 FD | 	jmp	#LR__0221
030c8                 | LR__0193
030c8     4E FA 05 F6 | 	mov	result1, #78
030cc     D4 00 90 FD | 	jmp	#LR__0221
030d0                 | LR__0194
030d0     50 FA 05 F6 | 	mov	result1, #80
030d4     CC 00 90 FD | 	jmp	#LR__0221
030d8                 | LR__0195
030d8     51 FA 05 F6 | 	mov	result1, #81
030dc     C4 00 90 FD | 	jmp	#LR__0221
030e0                 | LR__0196
030e0     52 FA 05 F6 | 	mov	result1, #82
030e4     BC 00 90 FD | 	jmp	#LR__0221
030e8                 | LR__0197
030e8     59 FA 05 F6 | 	mov	result1, #89
030ec     B4 00 90 FD | 	jmp	#LR__0221
030f0                 | LR__0198
030f0     55 FA 05 F6 | 	mov	result1, #85
030f4     AC 00 90 FD | 	jmp	#LR__0221
030f8                 | LR__0199
030f8     56 FA 05 F6 | 	mov	result1, #86
030fc     A4 00 90 FD | 	jmp	#LR__0221
03100                 | LR__0200
03100     57 FA 05 F6 | 	mov	result1, #87
03104     9C 00 90 FD | 	jmp	#LR__0221
03108                 | LR__0201
03108     58 FA 05 F6 | 	mov	result1, #88
0310c     94 00 90 FD | 	jmp	#LR__0221
03110                 | LR__0202
03110     5A FA 05 F6 | 	mov	result1, #90
03114     8C 00 90 FD | 	jmp	#LR__0221
03118                 | LR__0203
03118     5B FA 05 F6 | 	mov	result1, #91
0311c     84 00 90 FD | 	jmp	#LR__0221
03120                 | LR__0204
03120     5C FA 05 F6 | 	mov	result1, #92
03124     7C 00 90 FD | 	jmp	#LR__0221
03128                 | LR__0205
03128     5D FA 05 F6 | 	mov	result1, #93
0312c     74 00 90 FD | 	jmp	#LR__0221
03130                 | LR__0206
03130     4A FA 05 F6 | 	mov	result1, #74
03134     6C 00 90 FD | 	jmp	#LR__0221
03138                 | LR__0207
03138     4B FA 05 F6 | 	mov	result1, #75
0313c     64 00 90 FD | 	jmp	#LR__0221
03140                 | LR__0208
03140     5E FA 05 F6 | 	mov	result1, #94
03144     5C 00 90 FD | 	jmp	#LR__0221
03148                 | LR__0209
03148     5F FA 05 F6 | 	mov	result1, #95
0314c     54 00 90 FD | 	jmp	#LR__0221
03150                 | LR__0210
03150     60 FA 05 F6 | 	mov	result1, #96
03154     4C 00 90 FD | 	jmp	#LR__0221
03158                 | LR__0211
03158     61 FA 05 F6 | 	mov	result1, #97
0315c     44 00 90 FD | 	jmp	#LR__0221
03160                 | LR__0212
03160     63 FA 05 F6 | 	mov	result1, #99
03164     3C 00 90 FD | 	jmp	#LR__0221
03168                 | LR__0213
03168     68 FA 05 F6 | 	mov	result1, #104
0316c     34 00 90 FD | 	jmp	#LR__0221
03170                 | LR__0214
03170     69 FA 05 F6 | 	mov	result1, #105
03174     2C 00 90 FD | 	jmp	#LR__0221
03178                 | LR__0215
03178     6C FA 05 F6 | 	mov	result1, #108
0317c     24 00 90 FD | 	jmp	#LR__0221
03180                 | LR__0216
03180     6D FA 05 F6 | 	mov	result1, #109
03184     1C 00 90 FD | 	jmp	#LR__0221
03188                 | LR__0217
03188     70 FA 05 F6 | 	mov	result1, #112
0318c     14 00 90 FD | 	jmp	#LR__0221
03190                 | LR__0218
03190     71 FA 05 F6 | 	mov	result1, #113
03194     0C 00 90 FD | 	jmp	#LR__0221
03198                 | LR__0219
03198     72 FA 05 F6 | 	mov	result1, #114
0319c     04 00 90 FD | 	jmp	#LR__0221
031a0                 | LR__0220
031a0     00 FA 05 F6 | 	mov	result1, #0
031a4                 | LR__0221
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _iscommand_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' function isfunction(s as string) as ubyte
031b0                 | _isfunction
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     24 01 00 FF 
031c0     EE 14 06 F6 | 	mov	arg02, ##@LR__4215
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     0C 23 B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     DC 00 90 AD |  if_e	jmp	#LR__0230
031d4     24 01 00 FF 
031d8     F2 14 06 F6 | 	mov	arg02, ##@LR__4216
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     F4 22 B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     CC 00 90 AD |  if_e	jmp	#LR__0231
031ec     24 01 00 FF 
031f0     F9 14 06 F6 | 	mov	arg02, ##@LR__4217
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     DC 22 B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     BC 00 90 AD |  if_e	jmp	#LR__0232
03204     24 01 00 FF 
03208     00 15 06 F6 | 	mov	arg02, ##@LR__4218
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     C4 22 B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     AC 00 90 AD |  if_e	jmp	#LR__0233
0321c     24 01 00 FF 
03220     07 15 06 F6 | 	mov	arg02, ##@LR__4219
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     AC 22 B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     9C 00 90 AD |  if_e	jmp	#LR__0234
03234     24 01 00 FF 
03238     0E 15 06 F6 | 	mov	arg02, ##@LR__4220
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     94 22 B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     8C 00 90 AD |  if_e	jmp	#LR__0235
0324c     24 01 00 FF 
03250     16 15 06 F6 | 	mov	arg02, ##@LR__4221
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     7C 22 B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     7C 00 90 AD |  if_e	jmp	#LR__0236
03264     24 01 00 FF 
03268     1A 15 06 F6 | 	mov	arg02, ##@LR__4222
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     64 22 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     6C 00 90 AD |  if_e	jmp	#LR__0237
0327c     24 01 00 FF 
03280     20 15 06 F6 | 	mov	arg02, ##@LR__4223
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     4C 22 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     5C 00 90 AD |  if_e	jmp	#LR__0238
03294     24 01 00 FF 
03298     26 15 06 F6 | 	mov	arg02, ##@LR__4224
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     34 22 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     4C 00 90 AD |  if_e	jmp	#LR__0239
032ac     50 00 90 FD | 	jmp	#LR__0240
032b0                 | LR__0230
032b0     54 FA 05 F6 | 	mov	result1, #84
032b4     4C 00 90 FD | 	jmp	#LR__0241
032b8                 | LR__0231
032b8     64 FA 05 F6 | 	mov	result1, #100
032bc     44 00 90 FD | 	jmp	#LR__0241
032c0                 | LR__0232
032c0     65 FA 05 F6 | 	mov	result1, #101
032c4     3C 00 90 FD | 	jmp	#LR__0241
032c8                 | LR__0233
032c8     66 FA 05 F6 | 	mov	result1, #102
032cc     34 00 90 FD | 	jmp	#LR__0241
032d0                 | LR__0234
032d0     67 FA 05 F6 | 	mov	result1, #103
032d4     2C 00 90 FD | 	jmp	#LR__0241
032d8                 | LR__0235
032d8     62 FA 05 F6 | 	mov	result1, #98
032dc     24 00 90 FD | 	jmp	#LR__0241
032e0                 | LR__0236
032e0     6B FA 05 F6 | 	mov	result1, #107
032e4     1C 00 90 FD | 	jmp	#LR__0241
032e8                 | LR__0237
032e8     6A FA 05 F6 | 	mov	result1, #106
032ec     14 00 90 FD | 	jmp	#LR__0241
032f0                 | LR__0238
032f0     6E FA 05 F6 | 	mov	result1, #110
032f4     0C 00 90 FD | 	jmp	#LR__0241
032f8                 | LR__0239
032f8     6F FA 05 F6 | 	mov	result1, #111
032fc     04 00 90 FD | 	jmp	#LR__0241
03300                 | LR__0240
03300     00 FA 05 F6 | 	mov	result1, #0
03304                 | LR__0241
03304     A7 F0 03 F6 | 	mov	ptra, fp
03308     B2 00 A0 FD | 	call	#popregs_
0330c                 | _isfunction_ret
0330c     2D 00 64 FD | 	ret
03310                 | 
03310                 | ' 
03310                 | ' function isname(s as string) as boolean
03310                 | _isname
03310     0D 4A 05 F6 | 	mov	COUNT_, #13
03314     A8 00 A0 FD | 	call	#pushregs_
03318     09 1F 02 F6 | 	mov	local01, arg01
0331c     09 21 02 F6 | 	mov	local02, arg01
03320     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03324                 | LR__0250
03324     10 FB C9 FA | 	rdbyte	result1, local02 wz
03328     01 20 06 51 |  if_ne	add	local02, #1
0332c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03330                 | LR__0251
03330     09 21 82 F1 | 	sub	local02, arg01
03334     10 FB 01 F6 | 	mov	result1, local02
03338     FD 22 0A F6 | 	mov	local03, result1 wz
0333c     00 FA 05 A6 |  if_e	mov	result1, #0
03340     34 02 90 AD |  if_e	jmp	#LR__0263
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     01 14 06 F6 | 	mov	arg02, #1
0334c     01 16 06 F6 | 	mov	arg03, #1
03350     84 42 B1 FD | 	call	#__system__Mid_S
03354     FD 24 02 F6 | 	mov	local04, result1
03358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03358     24 01 00 FF 
0335c     2F 15 06 F6 | 	mov	arg02, ##@LR__4225
03360     12 13 02 F6 | 	mov	arg01, local04
03364     70 21 B1 FD | 	call	#__system___string_cmp
03368     00 FA 55 F2 | 	cmps	result1, #0 wc
0336c     18 00 90 CD |  if_b	jmp	#LR__0252
03370     24 01 00 FF 
03374     31 15 06 F6 | 	mov	arg02, ##@LR__4226
03378     12 13 02 F6 | 	mov	arg01, local04
0337c     58 21 B1 FD | 	call	#__system___string_cmp
03380     01 FA 55 F2 | 	cmps	result1, #1 wc
03384     1C 00 90 CD |  if_b	jmp	#LR__0253
03388                 | LR__0252
03388     24 01 00 FF 
0338c     33 15 06 F6 | 	mov	arg02, ##@LR__4227
03390     12 13 02 F6 | 	mov	arg01, local04
03394     40 21 B1 FD | 	call	#__system___string_cmp
03398     00 FA 0D F2 | 	cmp	result1, #0 wz
0339c     00 FA 05 56 |  if_ne	mov	result1, #0
033a0     D4 01 90 5D |  if_ne	jmp	#LR__0263
033a4                 | LR__0253
033a4                 | ' if l>2 then 
033a4     03 22 56 F2 | 	cmps	local03, #3 wc
033a8     C8 01 90 CD |  if_b	jmp	#LR__0262
033ac                 | '   for i=2 to l
033ac     02 26 06 F6 | 	mov	local05, #2
033b0     11 29 02 F6 | 	mov	local06, local03
033b4     01 28 06 F1 | 	add	local06, #1
033b8                 | LR__0254
033b8     14 27 52 F2 | 	cmps	local05, local06 wc
033bc     B4 01 90 3D |  if_ae	jmp	#LR__0261
033c0     0F 13 02 F6 | 	mov	arg01, local01
033c4     13 15 02 F6 | 	mov	arg02, local05
033c8     01 16 06 F6 | 	mov	arg03, #1
033cc     08 42 B1 FD | 	call	#__system__Mid_S
033d0     FD 24 02 F6 | 	mov	local04, result1
033d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
033d4     11 27 52 F2 | 	cmps	local05, local03 wc
033d8     9C 00 90 3D |  if_ae	jmp	#LR__0257
033dc     24 01 00 FF 
033e0     35 15 06 F6 | 	mov	arg02, ##@LR__4228
033e4     12 13 02 F6 | 	mov	arg01, local04
033e8     EC 20 B1 FD | 	call	#__system___string_cmp
033ec     00 FA 55 F2 | 	cmps	result1, #0 wc
033f0     18 00 90 CD |  if_b	jmp	#LR__0255
033f4     24 01 00 FF 
033f8     37 15 06 F6 | 	mov	arg02, ##@LR__4229
033fc     12 13 02 F6 | 	mov	arg01, local04
03400     D4 20 B1 FD | 	call	#__system___string_cmp
03404     01 FA 55 F2 | 	cmps	result1, #1 wc
03408     6C 00 90 CD |  if_b	jmp	#LR__0257
0340c                 | LR__0255
0340c     24 01 00 FF 
03410     39 15 06 F6 | 	mov	arg02, ##@LR__4230
03414     12 13 02 F6 | 	mov	arg01, local04
03418     BC 20 B1 FD | 	call	#__system___string_cmp
0341c     00 FA 55 F2 | 	cmps	result1, #0 wc
03420     18 00 90 CD |  if_b	jmp	#LR__0256
03424     24 01 00 FF 
03428     3B 15 06 F6 | 	mov	arg02, ##@LR__4231
0342c     12 13 02 F6 | 	mov	arg01, local04
03430     A4 20 B1 FD | 	call	#__system___string_cmp
03434     01 FA 55 F2 | 	cmps	result1, #1 wc
03438     3C 00 90 CD |  if_b	jmp	#LR__0257
0343c                 | LR__0256
0343c     24 01 00 FF 
03440     3D 2B 06 F6 | 	mov	local07, ##@LR__4232
03444     12 13 02 F6 | 	mov	arg01, local04
03448     15 15 02 F6 | 	mov	arg02, local07
0344c     88 20 B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     20 00 90 AD |  if_e	jmp	#LR__0257
03458     24 01 00 FF 
0345c     3F 2D 06 F6 | 	mov	local08, ##@LR__4233
03460     12 13 02 F6 | 	mov	arg01, local04
03464     16 15 02 F6 | 	mov	arg02, local08
03468     6C 20 B1 FD | 	call	#__system___string_cmp
0346c     FD 2E 0A F6 | 	mov	local09, result1 wz
03470     00 FA 05 56 |  if_ne	mov	result1, #0
03474     00 01 90 5D |  if_ne	jmp	#LR__0263
03478                 | LR__0257
03478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03478     11 27 0A F2 | 	cmp	local05, local03 wz
0347c     EC 00 90 5D |  if_ne	jmp	#LR__0260
03480     24 01 00 FF 
03484     41 31 06 F6 | 	mov	local10, ##@LR__4234
03488     12 13 02 F6 | 	mov	arg01, local04
0348c     18 15 02 F6 | 	mov	arg02, local10
03490     44 20 B1 FD | 	call	#__system___string_cmp
03494     FD 32 02 F6 | 	mov	local11, result1
03498     00 32 56 F2 | 	cmps	local11, #0 wc
0349c     1C 00 90 CD |  if_b	jmp	#LR__0258
034a0     24 01 00 FF 
034a4     43 15 06 F6 | 	mov	arg02, ##@LR__4235
034a8     12 13 02 F6 | 	mov	arg01, local04
034ac     28 20 B1 FD | 	call	#__system___string_cmp
034b0     FD 30 02 F6 | 	mov	local10, result1
034b4     01 30 56 F2 | 	cmps	local10, #1 wc
034b8     B0 00 90 CD |  if_b	jmp	#LR__0260
034bc                 | LR__0258
034bc     24 01 00 FF 
034c0     45 15 06 F6 | 	mov	arg02, ##@LR__4236
034c4     12 13 02 F6 | 	mov	arg01, local04
034c8     0C 20 B1 FD | 	call	#__system___string_cmp
034cc     00 FA 55 F2 | 	cmps	result1, #0 wc
034d0     1C 00 90 CD |  if_b	jmp	#LR__0259
034d4     24 01 00 FF 
034d8     47 2F 06 F6 | 	mov	local09, ##@LR__4237
034dc     12 13 02 F6 | 	mov	arg01, local04
034e0     17 15 02 F6 | 	mov	arg02, local09
034e4     F0 1F B1 FD | 	call	#__system___string_cmp
034e8     01 FA 55 F2 | 	cmps	result1, #1 wc
034ec     7C 00 90 CD |  if_b	jmp	#LR__0260
034f0                 | LR__0259
034f0     24 01 00 FF 
034f4     49 2F 06 F6 | 	mov	local09, ##@LR__4238
034f8     12 13 02 F6 | 	mov	arg01, local04
034fc     17 15 02 F6 | 	mov	arg02, local09
03500     D4 1F B1 FD | 	call	#__system___string_cmp
03504     00 FA 4D F2 | 	cmps	result1, #0 wz
03508     60 00 90 AD |  if_e	jmp	#LR__0260
0350c     24 01 00 FF 
03510     4B 2D 06 F6 | 	mov	local08, ##@LR__4239
03514     12 13 02 F6 | 	mov	arg01, local04
03518     16 15 02 F6 | 	mov	arg02, local08
0351c     B8 1F B1 FD | 	call	#__system___string_cmp
03520     FD 2E 0A F6 | 	mov	local09, result1 wz
03524     44 00 90 AD |  if_e	jmp	#LR__0260
03528     24 01 00 FF 
0352c     4D 35 06 F6 | 	mov	local12, ##@LR__4240
03530     1A 2D 02 F6 | 	mov	local08, local12
03534     12 13 02 F6 | 	mov	arg01, local04
03538     16 15 02 F6 | 	mov	arg02, local08
0353c     98 1F B1 FD | 	call	#__system___string_cmp
03540     FD 2A 0A F6 | 	mov	local07, result1 wz
03544     24 00 90 AD |  if_e	jmp	#LR__0260
03548     24 01 00 FF 
0354c     4F 37 06 F6 | 	mov	local13, ##@LR__4241
03550     1B 35 02 F6 | 	mov	local12, local13
03554     12 13 02 F6 | 	mov	arg01, local04
03558     1A 15 02 F6 | 	mov	arg02, local12
0355c     78 1F B1 FD | 	call	#__system___string_cmp
03560     FD 2C 0A F6 | 	mov	local08, result1 wz
03564     00 FA 05 56 |  if_ne	mov	result1, #0
03568     0C 00 90 5D |  if_ne	jmp	#LR__0263
0356c                 | LR__0260
0356c     01 26 06 F1 | 	add	local05, #1
03570     44 FE 9F FD | 	jmp	#LR__0254
03574                 | LR__0261
03574                 | LR__0262
03574                 | ' return true
03574     01 FA 65 F6 | 	neg	result1, #1
03578                 | LR__0263
03578     A7 F0 03 F6 | 	mov	ptra, fp
0357c     B2 00 A0 FD | 	call	#popregs_
03580                 | _isname_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | ' 
03584                 | ' function isnum(s as string) as boolean
03584                 | _isnum
03584     0D 4A 05 F6 | 	mov	COUNT_, #13
03588     A8 00 A0 FD | 	call	#pushregs_
0358c     09 1F 02 F6 | 	mov	local01, arg01
03590     00 20 06 F6 | 	mov	local02, #0
03594     00 22 06 F6 | 	mov	local03, #0
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     09 25 02 F6 | 	mov	local04, arg01
035a0     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
035a4                 | LR__0270
035a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
035a8     01 24 06 51 |  if_ne	add	local04, #1
035ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
035b0                 | LR__0271
035b0     09 25 82 F1 | 	sub	local04, arg01
035b4     12 FB 01 F6 | 	mov	result1, local04
035b8     FD 26 0A F6 | 	mov	local05, result1 wz
035bc     00 FA 05 A6 |  if_e	mov	result1, #0
035c0     8C 02 90 AD |  if_e	jmp	#LR__0282
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     01 14 06 F6 | 	mov	arg02, #1
035cc     01 16 06 F6 | 	mov	arg03, #1
035d0     04 40 B1 FD | 	call	#__system__Mid_S
035d4     FD 28 02 F6 | 	mov	local06, result1
035d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
035d8     24 01 00 FF 
035dc     51 15 06 F6 | 	mov	arg02, ##@LR__4242
035e0     14 13 02 F6 | 	mov	arg01, local06
035e4     F0 1E B1 FD | 	call	#__system___string_cmp
035e8     00 FA 55 F2 | 	cmps	result1, #0 wc
035ec     18 00 90 CD |  if_b	jmp	#LR__0272
035f0     24 01 00 FF 
035f4     53 15 06 F6 | 	mov	arg02, ##@LR__4243
035f8     14 13 02 F6 | 	mov	arg01, local06
035fc     D8 1E B1 FD | 	call	#__system___string_cmp
03600     01 FA 55 F2 | 	cmps	result1, #1 wc
03604     78 00 90 CD |  if_b	jmp	#LR__0273
03608                 | LR__0272
03608     24 01 00 FF 
0360c     55 15 06 F6 | 	mov	arg02, ##@LR__4244
03610     14 13 02 F6 | 	mov	arg01, local06
03614     C0 1E B1 FD | 	call	#__system___string_cmp
03618     00 FA 0D F2 | 	cmp	result1, #0 wz
0361c     60 00 90 AD |  if_e	jmp	#LR__0273
03620     24 01 00 FF 
03624     57 2B 06 F6 | 	mov	local07, ##@LR__4245
03628     14 13 02 F6 | 	mov	arg01, local06
0362c     15 15 02 F6 | 	mov	arg02, local07
03630     A4 1E B1 FD | 	call	#__system___string_cmp
03634     00 FA 0D F2 | 	cmp	result1, #0 wz
03638     44 00 90 AD |  if_e	jmp	#LR__0273
0363c     24 01 00 FF 
03640     59 2D 06 F6 | 	mov	local08, ##@LR__4246
03644     16 2B 02 F6 | 	mov	local07, local08
03648     14 13 02 F6 | 	mov	arg01, local06
0364c     15 15 02 F6 | 	mov	arg02, local07
03650     84 1E B1 FD | 	call	#__system___string_cmp
03654     00 FA 4D F2 | 	cmps	result1, #0 wz
03658     24 00 90 AD |  if_e	jmp	#LR__0273
0365c     24 01 00 FF 
03660     5B 2F 06 F6 | 	mov	local09, ##@LR__4247
03664     17 2D 02 F6 | 	mov	local08, local09
03668     14 13 02 F6 | 	mov	arg01, local06
0366c     16 15 02 F6 | 	mov	arg02, local08
03670     64 1E B1 FD | 	call	#__system___string_cmp
03674     FD 2A 0A F6 | 	mov	local07, result1 wz
03678     00 FA 05 56 |  if_ne	mov	result1, #0
0367c     D0 01 90 5D |  if_ne	jmp	#LR__0282
03680                 | LR__0273
03680                 | ' if m$="." then ds=1
03680     24 01 00 FF 
03684     5D 15 06 F6 | 	mov	arg02, ##@LR__4248
03688     14 13 02 F6 | 	mov	arg01, local06
0368c     48 1E B1 FD | 	call	#__system___string_cmp
03690     00 FA 0D F2 | 	cmp	result1, #0 wz
03694     01 20 06 A6 |  if_e	mov	local02, #1
03698                 | ' if l>1 then 
03698     02 26 56 F2 | 	cmps	local05, #2 wc
0369c     AC 01 90 CD |  if_b	jmp	#LR__0281
036a0                 | '   for i=2 to l
036a0     02 30 06 F6 | 	mov	local10, #2
036a4     13 33 02 F6 | 	mov	local11, local05
036a8     01 32 06 F1 | 	add	local11, #1
036ac                 | LR__0274
036ac     19 31 52 F2 | 	cmps	local10, local11 wc
036b0     98 01 90 3D |  if_ae	jmp	#LR__0280
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     18 15 02 F6 | 	mov	arg02, local10
036bc     01 16 06 F6 | 	mov	arg03, #1
036c0     14 3F B1 FD | 	call	#__system__Mid_S
036c4     FD 28 02 F6 | 	mov	local06, result1
036c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
036c8     24 01 00 FF 
036cc     5F 15 06 F6 | 	mov	arg02, ##@LR__4249
036d0     14 13 02 F6 | 	mov	arg01, local06
036d4     00 1E B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0275
036e0     24 01 00 FF 
036e4     61 15 06 F6 | 	mov	arg02, ##@LR__4250
036e8     14 13 02 F6 | 	mov	arg01, local06
036ec     E8 1D B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     98 00 90 CD |  if_b	jmp	#LR__0276
036f8                 | LR__0275
036f8     24 01 00 FF 
036fc     63 15 06 F6 | 	mov	arg02, ##@LR__4251
03700     14 13 02 F6 | 	mov	arg01, local06
03704     D0 1D B1 FD | 	call	#__system___string_cmp
03708     00 FA 0D F2 | 	cmp	result1, #0 wz
0370c     80 00 90 AD |  if_e	jmp	#LR__0276
03710     24 01 00 FF 
03714     65 2B 06 F6 | 	mov	local07, ##@LR__4252
03718     14 13 02 F6 | 	mov	arg01, local06
0371c     15 15 02 F6 | 	mov	arg02, local07
03720     B4 1D B1 FD | 	call	#__system___string_cmp
03724     00 FA 4D F2 | 	cmps	result1, #0 wz
03728     64 00 90 AD |  if_e	jmp	#LR__0276
0372c     24 01 00 FF 
03730     67 2D 06 F6 | 	mov	local08, ##@LR__4253
03734     16 2B 02 F6 | 	mov	local07, local08
03738     14 13 02 F6 | 	mov	arg01, local06
0373c     15 15 02 F6 | 	mov	arg02, local07
03740     94 1D B1 FD | 	call	#__system___string_cmp
03744     FD 34 0A F6 | 	mov	local12, result1 wz
03748     44 00 90 AD |  if_e	jmp	#LR__0276
0374c     24 01 00 FF 
03750     69 2F 06 F6 | 	mov	local09, ##@LR__4254
03754     17 2D 02 F6 | 	mov	local08, local09
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     16 15 02 F6 | 	mov	arg02, local08
03760     74 1D B1 FD | 	call	#__system___string_cmp
03764     FD 2A 0A F6 | 	mov	local07, result1 wz
03768     24 00 90 AD |  if_e	jmp	#LR__0276
0376c     24 01 00 FF 
03770     6B 37 06 F6 | 	mov	local13, ##@LR__4255
03774     1B 2F 02 F6 | 	mov	local09, local13
03778     14 13 02 F6 | 	mov	arg01, local06
0377c     17 15 02 F6 | 	mov	arg02, local09
03780     54 1D B1 FD | 	call	#__system___string_cmp
03784     FD 2C 0A F6 | 	mov	local08, result1 wz
03788     00 FA 05 56 |  if_ne	mov	result1, #0
0378c     C0 00 90 5D |  if_ne	jmp	#LR__0282
03790                 | LR__0276
03790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03790     24 01 00 FF 
03794     6D 15 06 F6 | 	mov	arg02, ##@LR__4256
03798     14 13 02 F6 | 	mov	arg01, local06
0379c     38 1D B1 FD | 	call	#__system___string_cmp
037a0     00 FA 0D F2 | 	cmp	result1, #0 wz
037a4     38 00 90 5D |  if_ne	jmp	#LR__0277
037a8     18 15 02 F6 | 	mov	arg02, local10
037ac     01 14 86 F1 | 	sub	arg02, #1
037b0     0F 13 02 F6 | 	mov	arg01, local01
037b4     01 16 06 F6 | 	mov	arg03, #1
037b8     1C 3E B1 FD | 	call	#__system__Mid_S
037bc     FD 12 02 F6 | 	mov	arg01, result1
037c0     B0 3F B1 FD | 	call	#__system__LCase_S
037c4     FD 12 02 F6 | 	mov	arg01, result1
037c8     24 01 00 FF 
037cc     6F 15 06 F6 | 	mov	arg02, ##@LR__4257
037d0     04 1D B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     70 00 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0277
037e0                 | '     if m$="." then ds+=1: if ds>1 then return false
037e0     24 01 00 FF 
037e4     71 15 06 F6 | 	mov	arg02, ##@LR__4258
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     E8 1C B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A1 |  if_e	add	local02, #1
037f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
037fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03804     24 01 00 FF 
03808     73 15 06 F6 | 	mov	arg02, ##@LR__4259
0380c     14 13 02 F6 | 	mov	arg01, local06
03810     C4 1C B1 FD | 	call	#__system___string_cmp
03814     00 FA 4D F2 | 	cmps	result1, #0 wz
03818     18 00 90 AD |  if_e	jmp	#LR__0278
0381c     24 01 00 FF 
03820     75 15 06 F6 | 	mov	arg02, ##@LR__4260
03824     14 13 02 F6 | 	mov	arg01, local06
03828     AC 1C B1 FD | 	call	#__system___string_cmp
0382c     00 FA 4D F2 | 	cmps	result1, #0 wz
03830     10 00 90 5D |  if_ne	jmp	#LR__0279
03834                 | LR__0278
03834     01 22 06 F1 | 	add	local03, #1
03838     02 22 56 F2 | 	cmps	local03, #2 wc
0383c     00 FA 05 36 |  if_ae	mov	result1, #0
03840     0C 00 90 3D |  if_ae	jmp	#LR__0282
03844                 | LR__0279
03844     01 30 06 F1 | 	add	local10, #1
03848     60 FE 9F FD | 	jmp	#LR__0274
0384c                 | LR__0280
0384c                 | LR__0281
0384c                 | ' return true
0384c     01 FA 65 F6 | 	neg	result1, #1
03850                 | LR__0282
03850     A7 F0 03 F6 | 	mov	ptra, fp
03854     B2 00 A0 FD | 	call	#popregs_
03858                 | _isnum_ret
03858     2D 00 64 FD | 	ret
0385c                 | 
0385c                 | '   
0385c                 | ' function isint(s as string) as boolean
0385c                 | _isint
0385c     05 4A 05 F6 | 	mov	COUNT_, #5
03860     A8 00 A0 FD | 	call	#pushregs_
03864     09 1F 02 F6 | 	mov	local01, arg01
03868     09 21 02 F6 | 	mov	local02, arg01
0386c     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
03870                 | LR__0290
03870     10 FB C9 FA | 	rdbyte	result1, local02 wz
03874     01 20 06 51 |  if_ne	add	local02, #1
03878     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
0387c                 | LR__0291
0387c     09 21 82 F1 | 	sub	local02, arg01
03880     10 FB 01 F6 | 	mov	result1, local02
03884     FD 20 0A F6 | 	mov	local02, result1 wz
03888     00 FA 05 A6 |  if_e	mov	result1, #0
0388c     18 01 90 AD |  if_e	jmp	#LR__0299
03890     0F 13 02 F6 | 	mov	arg01, local01
03894     01 14 06 F6 | 	mov	arg02, #1
03898     01 16 06 F6 | 	mov	arg03, #1
0389c     38 3D B1 FD | 	call	#__system__Mid_S
038a0     FD 22 02 F6 | 	mov	local03, result1
038a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038a4     24 01 00 FF 
038a8     77 15 06 F6 | 	mov	arg02, ##@LR__4261
038ac     11 13 02 F6 | 	mov	arg01, local03
038b0     24 1C B1 FD | 	call	#__system___string_cmp
038b4     00 FA 55 F2 | 	cmps	result1, #0 wc
038b8     18 00 90 CD |  if_b	jmp	#LR__0292
038bc     24 01 00 FF 
038c0     79 15 06 F6 | 	mov	arg02, ##@LR__4262
038c4     11 13 02 F6 | 	mov	arg01, local03
038c8     0C 1C B1 FD | 	call	#__system___string_cmp
038cc     01 FA 55 F2 | 	cmps	result1, #1 wc
038d0     4C 00 90 CD |  if_b	jmp	#LR__0293
038d4                 | LR__0292
038d4     24 01 00 FF 
038d8     7B 15 06 F6 | 	mov	arg02, ##@LR__4263
038dc     11 13 02 F6 | 	mov	arg01, local03
038e0     F4 1B B1 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     34 00 90 AD |  if_e	jmp	#LR__0293
038ec     24 01 00 FF 
038f0     7D 15 06 F6 | 	mov	arg02, ##@LR__4264
038f4     11 13 02 F6 | 	mov	arg01, local03
038f8     DC 1B B1 FD | 	call	#__system___string_cmp
038fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03900     1C 00 90 AD |  if_e	jmp	#LR__0293
03904     24 01 00 FF 
03908     7F 15 06 F6 | 	mov	arg02, ##@LR__4265
0390c     11 13 02 F6 | 	mov	arg01, local03
03910     C4 1B B1 FD | 	call	#__system___string_cmp
03914     00 FA 0D F2 | 	cmp	result1, #0 wz
03918     00 FA 05 56 |  if_ne	mov	result1, #0
0391c     88 00 90 5D |  if_ne	jmp	#LR__0299
03920                 | LR__0293
03920                 | ' 
03920                 | ' if l>1 then 
03920     02 20 56 F2 | 	cmps	local02, #2 wc
03924     7C 00 90 CD |  if_b	jmp	#LR__0298
03928                 | '   for i=2 to l
03928     02 24 06 F6 | 	mov	local04, #2
0392c     10 27 02 F6 | 	mov	local05, local02
03930     01 26 06 F1 | 	add	local05, #1
03934                 | LR__0294
03934     13 25 52 F2 | 	cmps	local04, local05 wc
03938     68 00 90 3D |  if_ae	jmp	#LR__0297
0393c     0F 13 02 F6 | 	mov	arg01, local01
03940     12 15 02 F6 | 	mov	arg02, local04
03944     01 16 06 F6 | 	mov	arg03, #1
03948     8C 3C B1 FD | 	call	#__system__Mid_S
0394c     FD 22 02 F6 | 	mov	local03, result1
03950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03950     24 01 00 FF 
03954     81 15 06 F6 | 	mov	arg02, ##@LR__4266
03958     11 13 02 F6 | 	mov	arg01, local03
0395c     78 1B B1 FD | 	call	#__system___string_cmp
03960     00 FA 55 F2 | 	cmps	result1, #0 wc
03964     18 00 90 CD |  if_b	jmp	#LR__0295
03968     24 01 00 FF 
0396c     83 15 06 F6 | 	mov	arg02, ##@LR__4267
03970     11 13 02 F6 | 	mov	arg01, local03
03974     60 1B B1 FD | 	call	#__system___string_cmp
03978     01 FA 55 F2 | 	cmps	result1, #1 wc
0397c     1C 00 90 CD |  if_b	jmp	#LR__0296
03980                 | LR__0295
03980     24 01 00 FF 
03984     85 15 06 F6 | 	mov	arg02, ##@LR__4268
03988     11 13 02 F6 | 	mov	arg01, local03
0398c     48 1B B1 FD | 	call	#__system___string_cmp
03990     00 FA 0D F2 | 	cmp	result1, #0 wz
03994     00 FA 05 56 |  if_ne	mov	result1, #0
03998     0C 00 90 5D |  if_ne	jmp	#LR__0299
0399c                 | LR__0296
0399c     01 24 06 F1 | 	add	local04, #1
039a0     90 FF 9F FD | 	jmp	#LR__0294
039a4                 | LR__0297
039a4                 | LR__0298
039a4                 | ' return true
039a4     01 FA 65 F6 | 	neg	result1, #1
039a8                 | LR__0299
039a8     A7 F0 03 F6 | 	mov	ptra, fp
039ac     B2 00 A0 FD | 	call	#popregs_
039b0                 | _isint_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | ' 
039b4                 | ' function isdec(s as string) as boolean
039b4                 | _isdec
039b4     05 4A 05 F6 | 	mov	COUNT_, #5
039b8     A8 00 A0 FD | 	call	#pushregs_
039bc     09 1F 02 F6 | 	mov	local01, arg01
039c0     09 21 02 F6 | 	mov	local02, arg01
039c4     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
039c8                 | LR__0300
039c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
039cc     01 20 06 51 |  if_ne	add	local02, #1
039d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
039d4                 | LR__0301
039d4     09 21 82 F1 | 	sub	local02, arg01
039d8     10 FB 01 F6 | 	mov	result1, local02
039dc     FD 20 0A F6 | 	mov	local02, result1 wz
039e0     00 FA 05 A6 |  if_e	mov	result1, #0
039e4     80 00 90 AD |  if_e	jmp	#LR__0306
039e8                 | ' for i=1 to l
039e8     01 22 06 F6 | 	mov	local03, #1
039ec     10 25 02 F6 | 	mov	local04, local02
039f0     01 24 06 F1 | 	add	local04, #1
039f4                 | LR__0302
039f4     12 23 52 F2 | 	cmps	local03, local04 wc
039f8     68 00 90 3D |  if_ae	jmp	#LR__0305
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     11 15 02 F6 | 	mov	arg02, local03
03a04     01 16 06 F6 | 	mov	arg03, #1
03a08     CC 3B B1 FD | 	call	#__system__Mid_S
03a0c     FD 26 02 F6 | 	mov	local05, result1
03a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03a10     24 01 00 FF 
03a14     87 15 06 F6 | 	mov	arg02, ##@LR__4269
03a18     13 13 02 F6 | 	mov	arg01, local05
03a1c     B8 1A B1 FD | 	call	#__system___string_cmp
03a20     00 FA 55 F2 | 	cmps	result1, #0 wc
03a24     18 00 90 CD |  if_b	jmp	#LR__0303
03a28     24 01 00 FF 
03a2c     89 15 06 F6 | 	mov	arg02, ##@LR__4270
03a30     13 13 02 F6 | 	mov	arg01, local05
03a34     A0 1A B1 FD | 	call	#__system___string_cmp
03a38     01 FA 55 F2 | 	cmps	result1, #1 wc
03a3c     1C 00 90 CD |  if_b	jmp	#LR__0304
03a40                 | LR__0303
03a40     24 01 00 FF 
03a44     8B 15 06 F6 | 	mov	arg02, ##@LR__4271
03a48     13 13 02 F6 | 	mov	arg01, local05
03a4c     88 1A B1 FD | 	call	#__system___string_cmp
03a50     00 FA 0D F2 | 	cmp	result1, #0 wz
03a54     00 FA 05 56 |  if_ne	mov	result1, #0
03a58     0C 00 90 5D |  if_ne	jmp	#LR__0306
03a5c                 | LR__0304
03a5c     01 22 06 F1 | 	add	local03, #1
03a60     90 FF 9F FD | 	jmp	#LR__0302
03a64                 | LR__0305
03a64                 | ' return true
03a64     01 FA 65 F6 | 	neg	result1, #1
03a68                 | LR__0306
03a68     A7 F0 03 F6 | 	mov	ptra, fp
03a6c     B2 00 A0 FD | 	call	#popregs_
03a70                 | _isdec_ret
03a70     2D 00 64 FD | 	ret
03a74                 | 
03a74                 | ' 
03a74                 | ' function isstring(s as string) as boolean
03a74                 | _isstring
03a74     01 4A 05 F6 | 	mov	COUNT_, #1
03a78     A8 00 A0 FD | 	call	#pushregs_
03a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03a7c     09 1F 02 F6 | 	mov	local01, arg01
03a80     01 14 06 F6 | 	mov	arg02, #1
03a84     38 3A B1 FD | 	call	#__system__Left_S
03a88     FD 12 02 F6 | 	mov	arg01, result1
03a8c     24 01 00 FF 
03a90     8D 15 06 F6 | 	mov	arg02, ##@LR__4272
03a94     40 1A B1 FD | 	call	#__system___string_cmp
03a98     00 FA 4D F2 | 	cmps	result1, #0 wz
03a9c     28 00 90 5D |  if_ne	jmp	#LR__0310
03aa0     0F 13 02 F6 | 	mov	arg01, local01
03aa4     01 14 06 F6 | 	mov	arg02, #1
03aa8     9C 3A B1 FD | 	call	#__system__Right_S
03aac     FD 12 02 F6 | 	mov	arg01, result1
03ab0     24 01 00 FF 
03ab4     8F 15 06 F6 | 	mov	arg02, ##@LR__4273
03ab8     1C 1A B1 FD | 	call	#__system___string_cmp
03abc     00 FA 4D F2 | 	cmps	result1, #0 wz
03ac0     01 FA 65 A6 |  if_e	neg	result1, #1
03ac4     04 00 90 AD |  if_e	jmp	#LR__0311
03ac8                 | LR__0310
03ac8     00 FA 05 F6 | 	mov	result1, #0
03acc                 | LR__0311
03acc     A7 F0 03 F6 | 	mov	ptra, fp
03ad0     B2 00 A0 FD | 	call	#popregs_
03ad4                 | _isstring_ret
03ad4     2D 00 64 FD | 	ret
03ad8                 | 
03ad8                 | ' 
03ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '----- delete a line from a program
03ad8                 | ' 
03ad8                 | ' function deleteline(aline as ulong) as integer
03ad8                 | _deleteline
03ad8     03 4A 05 F6 | 	mov	COUNT_, #3
03adc     A8 00 A0 FD | 	call	#pushregs_
03ae0     2C F0 07 F1 | 	add	ptra, #44
03ae4     04 4E 05 F1 | 	add	fp, #4
03ae8     A7 12 62 FC | 	wrlong	arg01, fp
03aec     41 00 00 FF 
03af0     48 E4 05 F1 | 	add	objptr, ##33352
03af4     F2 1E 02 FB | 	rdlong	local01, objptr
03af8     0C 4E 05 F1 | 	add	fp, #12
03afc     A7 1E 62 FC | 	wrlong	local01, fp
03b00     10 4E 85 F1 | 	sub	fp, #16
03b04                 | ' 
03b04                 | ' 
03b04                 | ' searchptr=programstart
03b04                 | ' 
03b04                 | ' do
03b04     35 00 00 FF 
03b08     88 E5 85 F1 | 	sub	objptr, ##27528
03b0c                 | LR__0320
03b0c     14 4E 05 F1 | 	add	fp, #20
03b10     A7 12 02 F6 | 	mov	arg01, fp
03b14     04 4E 85 F1 | 	sub	fp, #4
03b18     A7 14 02 FB | 	rdlong	arg02, fp
03b1c     10 4E 85 F1 | 	sub	fp, #16
03b20     18 16 06 F6 | 	mov	arg03, #24
03b24     9C 0E B1 FD | 	call	#_psram_spin2_read1
03b28     10 4E 05 F1 | 	add	fp, #16
03b2c     A7 1E 02 FB | 	rdlong	local01, fp
03b30     08 4E 85 F1 | 	sub	fp, #8
03b34     A7 1E 62 FC | 	wrlong	local01, fp
03b38     20 4E 05 F1 | 	add	fp, #32
03b3c     A7 1E 02 FB | 	rdlong	local01, fp
03b40     18 4E 85 F1 | 	sub	fp, #24
03b44     A7 1E 62 FC | 	wrlong	local01, fp
03b48     04 4E 05 F1 | 	add	fp, #4
03b4c     A7 1E 02 FB | 	rdlong	local01, fp
03b50     10 4E 85 F1 | 	sub	fp, #16
03b54     A7 16 02 FB | 	rdlong	arg03, fp
03b58     04 4E 85 F1 | 	sub	fp, #4
03b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03b60     28 4E 05 C1 |  if_b	add	fp, #40
03b64     A7 20 02 CB |  if_b	rdlong	local02, fp
03b68     28 4E 85 C1 |  if_b	sub	fp, #40
03b6c     FF FF 3F CF 
03b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03b78     0B 00 00 FF 
03b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
03b80                 | ' 
03b80                 | ' 
03b80                 | ' if header(0)<>aline then return -1
03b80     14 4E 05 F1 | 	add	fp, #20
03b84     A7 1E 02 FB | 	rdlong	local01, fp
03b88     10 4E 85 F1 | 	sub	fp, #16
03b8c     A7 22 02 FB | 	rdlong	local03, fp
03b90     04 4E 85 F1 | 	sub	fp, #4
03b94     11 1F 0A F2 | 	cmp	local01, local03 wz
03b98     01 FA 65 56 |  if_ne	neg	result1, #1
03b9c     4C 03 90 5D |  if_ne	jmp	#LR__0326
03ba0     08 4E 05 F1 | 	add	fp, #8
03ba4     A7 12 02 FB | 	rdlong	arg01, fp
03ba8     08 4E 85 F1 | 	sub	fp, #8
03bac     01 14 66 F6 | 	neg	arg02, #1
03bb0     01 16 06 F6 | 	mov	arg03, #1
03bb4     00 18 06 F6 | 	mov	arg04, #0
03bb8     0B 00 00 FF 
03bbc     C0 E4 05 F1 | 	add	objptr, ##5824
03bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
03bc0     04 1A 06 F6 | 	mov	arg05, #4
03bc4     34 0F B1 FD | 	call	#_psram_spin2_fill
03bc8     0B 00 00 FF 
03bcc     C0 E4 85 F1 | 	sub	objptr, ##5824
03bd0                 | ' 
03bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03bd0                 | ' 
03bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03bd0     28 4E 05 F1 | 	add	fp, #40
03bd4     A7 1E 02 FB | 	rdlong	local01, fp
03bd8     28 4E 85 F1 | 	sub	fp, #40
03bdc     FF FF 3F FF 
03be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03be4     24 4E 05 A1 |  if_e	add	fp, #36
03be8     A7 22 02 AB |  if_e	rdlong	local03, fp
03bec     24 4E 85 A1 |  if_e	sub	fp, #36
03bf0     FF FF 7F AF 
03bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03bf8     90 00 90 5D |  if_ne	jmp	#LR__0321
03bfc     41 00 00 FF 
03c00     48 E4 05 F1 | 	add	objptr, ##33352
03c04     F2 00 68 FC | 	wrlong	#0, objptr
03c08     07 00 00 FF 
03c0c     28 E4 85 F1 | 	sub	objptr, ##3624
03c10     F2 00 68 FC | 	wrlong	#0, objptr
03c14     07 00 00 FF 
03c18     2C E4 05 F1 | 	add	objptr, ##3628
03c1c     F2 00 68 FC | 	wrlong	#0, objptr
03c20     04 E4 05 F1 | 	add	objptr, #4
03c24     FF FF FF FF 
03c28     F2 FE 6B FC | 	wrlong	##-1, objptr
03c2c     00 12 06 F6 | 	mov	arg01, #0
03c30     10 E4 85 F1 | 	sub	objptr, #16
03c34     F2 00 68 FC | 	wrlong	#0, objptr
03c38     01 14 66 F6 | 	neg	arg02, #1
03c3c     01 16 06 F6 | 	mov	arg03, #1
03c40     00 18 06 F6 | 	mov	arg04, #0
03c44     35 00 00 FF 
03c48     80 E5 85 F1 | 	sub	objptr, ##27520
03c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c4c     04 1A 06 F6 | 	mov	arg05, #4
03c50     A8 0E B1 FD | 	call	#_psram_spin2_fill
03c54     10 12 06 F6 | 	mov	arg01, #16
03c58     01 14 66 F6 | 	neg	arg02, #1
03c5c     01 16 06 F6 | 	mov	arg03, #1
03c60     00 18 06 F6 | 	mov	arg04, #0
03c64                 | '     return fill(addr, pattern, count, listPtr, 4)
03c64     04 1A 06 F6 | 	mov	arg05, #4
03c68     90 0E B1 FD | 	call	#_psram_spin2_fill
03c6c     14 12 06 F6 | 	mov	arg01, #20
03c70     1E 14 CE F9 | 	bmask	arg02, #30
03c74     01 16 06 F6 | 	mov	arg03, #1
03c78     00 18 06 F6 | 	mov	arg04, #0
03c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c7c     04 1A 06 F6 | 	mov	arg05, #4
03c80     78 0E B1 FD | 	call	#_psram_spin2_fill
03c84     0B 00 00 FF 
03c88     C0 E4 85 F1 | 	sub	objptr, ##5824
03c8c                 | LR__0321
03c8c                 | ' 
03c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03c8c     28 4E 05 F1 | 	add	fp, #40
03c90     A7 1E 02 FB | 	rdlong	local01, fp
03c94     28 4E 85 F1 | 	sub	fp, #40
03c98     FF FF 3F FF 
03c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ca0     88 00 90 5D |  if_ne	jmp	#LR__0322
03ca4     24 4E 05 F1 | 	add	fp, #36
03ca8     A7 22 02 FB | 	rdlong	local03, fp
03cac     24 4E 85 F1 | 	sub	fp, #36
03cb0     FF FF 7F FF 
03cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03cb8     70 00 90 AD |  if_e	jmp	#LR__0322
03cbc     24 4E 05 F1 | 	add	fp, #36
03cc0     A7 12 02 FB | 	rdlong	arg01, fp
03cc4     24 4E 85 F1 | 	sub	fp, #36
03cc8     14 12 06 F1 | 	add	arg01, #20
03ccc     1E 14 CE F9 | 	bmask	arg02, #30
03cd0     01 16 06 F6 | 	mov	arg03, #1
03cd4     00 18 06 F6 | 	mov	arg04, #0
03cd8     0B 00 00 FF 
03cdc     C0 E4 05 F1 | 	add	objptr, ##5824
03ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ce0     04 1A 06 F6 | 	mov	arg05, #4
03ce4     14 0E B1 FD | 	call	#_psram_spin2_fill
03ce8     24 4E 05 F1 | 	add	fp, #36
03cec     A7 1E 02 FB | 	rdlong	local01, fp
03cf0     35 00 00 FF 
03cf4     90 E5 05 F1 | 	add	objptr, ##27536
03cf8     F2 1E 62 FC | 	wrlong	local01, objptr
03cfc     41 00 00 FF 
03d00     50 E4 85 F1 | 	sub	objptr, ##33360
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     24 4E 85 F1 | 	sub	fp, #36
03d0c     68 E4 B0 FD | 	call	#_pslpeek
03d10     41 00 00 FF 
03d14     4C E4 05 F1 | 	add	objptr, ##33356
03d18     F2 FA 61 FC | 	wrlong	result1, objptr
03d1c     41 00 00 FF 
03d20     4C E4 85 F1 | 	sub	objptr, ##33356
03d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03d24                 | '   lastline=pslpeek(header(4))
03d24                 | '   return 0
03d24     00 FA 05 F6 | 	mov	result1, #0
03d28     C0 01 90 FD | 	jmp	#LR__0326
03d2c                 | LR__0322
03d2c                 | ' 
03d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03d2c     28 4E 05 F1 | 	add	fp, #40
03d30     A7 1E 02 FB | 	rdlong	local01, fp
03d34     28 4E 85 F1 | 	sub	fp, #40
03d38     FF FF 3F FF 
03d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d40     6C 00 90 AD |  if_e	jmp	#LR__0323
03d44     24 4E 05 F1 | 	add	fp, #36
03d48     A7 22 02 FB | 	rdlong	local03, fp
03d4c     24 4E 85 F1 | 	sub	fp, #36
03d50     FF FF 7F FF 
03d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03d58     54 00 90 5D |  if_ne	jmp	#LR__0323
03d5c     28 4E 05 F1 | 	add	fp, #40
03d60     A7 12 02 FB | 	rdlong	arg01, fp
03d64     28 4E 85 F1 | 	sub	fp, #40
03d68     10 12 06 F1 | 	add	arg01, #16
03d6c     01 14 66 F6 | 	neg	arg02, #1
03d70     01 16 06 F6 | 	mov	arg03, #1
03d74     00 18 06 F6 | 	mov	arg04, #0
03d78     0B 00 00 FF 
03d7c     C0 E4 05 F1 | 	add	objptr, ##5824
03d80                 | '     return fill(addr, pattern, count, listPtr, 4)
03d80     04 1A 06 F6 | 	mov	arg05, #4
03d84     74 0D B1 FD | 	call	#_psram_spin2_fill
03d88     28 4E 05 F1 | 	add	fp, #40
03d8c     A7 1E 02 FB | 	rdlong	local01, fp
03d90     28 4E 85 F1 | 	sub	fp, #40
03d94     35 00 00 FF 
03d98     88 E5 05 F1 | 	add	objptr, ##27528
03d9c     F2 1E 62 FC | 	wrlong	local01, objptr
03da0     41 00 00 FF 
03da4     48 E4 85 F1 | 	sub	objptr, ##33352
03da8                 | ' '   print "deleted first line"
03da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03da8                 | '   return 0
03da8     00 FA 05 F6 | 	mov	result1, #0
03dac     3C 01 90 FD | 	jmp	#LR__0326
03db0                 | LR__0323
03db0                 | ' 
03db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03db0     28 4E 05 F1 | 	add	fp, #40
03db4     A7 1E 02 FB | 	rdlong	local01, fp
03db8     28 4E 85 F1 | 	sub	fp, #40
03dbc     FF FF 3F FF 
03dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03dc4     24 4E 05 51 |  if_ne	add	fp, #36
03dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
03dcc     24 4E 85 51 |  if_ne	sub	fp, #36
03dd0     FF FF 7F 5F 
03dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03dd8     68 00 90 AD |  if_e	jmp	#LR__0324
03ddc     28 4E 05 F1 | 	add	fp, #40
03de0     A7 12 02 FB | 	rdlong	arg01, fp
03de4     10 12 06 F1 | 	add	arg01, #16
03de8     04 4E 85 F1 | 	sub	fp, #4
03dec     A7 14 02 FB | 	rdlong	arg02, fp
03df0     24 4E 85 F1 | 	sub	fp, #36
03df4     01 16 06 F6 | 	mov	arg03, #1
03df8     00 18 06 F6 | 	mov	arg04, #0
03dfc     0B 00 00 FF 
03e00     C0 E4 05 F1 | 	add	objptr, ##5824
03e04                 | '     return fill(addr, pattern, count, listPtr, 4)
03e04     04 1A 06 F6 | 	mov	arg05, #4
03e08     F0 0C B1 FD | 	call	#_psram_spin2_fill
03e0c     24 4E 05 F1 | 	add	fp, #36
03e10     A7 12 02 FB | 	rdlong	arg01, fp
03e14     14 12 06 F1 | 	add	arg01, #20
03e18     04 4E 05 F1 | 	add	fp, #4
03e1c     A7 14 02 FB | 	rdlong	arg02, fp
03e20     28 4E 85 F1 | 	sub	fp, #40
03e24     01 16 06 F6 | 	mov	arg03, #1
03e28     00 18 06 F6 | 	mov	arg04, #0
03e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
03e2c     04 1A 06 F6 | 	mov	arg05, #4
03e30     C8 0C B1 FD | 	call	#_psram_spin2_fill
03e34     0B 00 00 FF 
03e38     C0 E4 85 F1 | 	sub	objptr, ##5824
03e3c                 | '    pslpoke(header(5)+16,header(4))  
03e3c                 | '    pslpoke(header(4)+20, header(5))
03e3c                 | '    return 0
03e3c     00 FA 05 F6 | 	mov	result1, #0
03e40     A8 00 90 FD | 	jmp	#LR__0326
03e44                 | LR__0324
03e44     10 4E 05 F1 | 	add	fp, #16
03e48     A7 1E 02 FB | 	rdlong	local01, fp
03e4c     08 4E 85 F1 | 	sub	fp, #8
03e50     A7 1E 62 FC | 	wrlong	local01, fp
03e54     41 00 00 FF 
03e58     48 E4 05 F1 | 	add	objptr, ##33352
03e5c     F2 1E 02 FB | 	rdlong	local01, objptr
03e60     08 4E 05 F1 | 	add	fp, #8
03e64     A7 1E 62 FC | 	wrlong	local01, fp
03e68     10 4E 85 F1 | 	sub	fp, #16
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03e6c                 | ' 
03e6c                 | ' lineptr2=searchptr
03e6c                 | ' searchptr=programstart
03e6c                 | ' 
03e6c                 | ' do
03e6c     35 00 00 FF 
03e70     88 E5 85 F1 | 	sub	objptr, ##27528
03e74                 | LR__0325
03e74     14 4E 05 F1 | 	add	fp, #20
03e78     A7 12 02 F6 | 	mov	arg01, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     A7 14 02 FB | 	rdlong	arg02, fp
03e84     10 4E 85 F1 | 	sub	fp, #16
03e88     18 16 06 F6 | 	mov	arg03, #24
03e8c     34 0B B1 FD | 	call	#_psram_spin2_read1
03e90     10 4E 05 F1 | 	add	fp, #16
03e94     A7 1E 02 FB | 	rdlong	local01, fp
03e98     08 4E 85 F1 | 	sub	fp, #8
03e9c     A7 1E 62 FC | 	wrlong	local01, fp
03ea0     20 4E 05 F1 | 	add	fp, #32
03ea4     A7 1E 02 FB | 	rdlong	local01, fp
03ea8     18 4E 85 F1 | 	sub	fp, #24
03eac     A7 1E 62 FC | 	wrlong	local01, fp
03eb0     04 4E 05 F1 | 	add	fp, #4
03eb4     A7 1E 02 FB | 	rdlong	local01, fp
03eb8     10 4E 85 F1 | 	sub	fp, #16
03ebc     A7 22 02 FB | 	rdlong	local03, fp
03ec0     04 4E 85 F1 | 	sub	fp, #4
03ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
03ec8     28 4E 05 C1 |  if_b	add	fp, #40
03ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
03ed0     28 4E 85 C1 |  if_b	sub	fp, #40
03ed4     FF FF 3F CF 
03ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
03ee0     0B 00 00 FF 
03ee4     C0 E4 85 F1 | 	sub	objptr, ##5824
03ee8     00 FA 05 F6 | 	mov	result1, #0
03eec                 | LR__0326
03eec     A7 F0 03 F6 | 	mov	ptra, fp
03ef0     B2 00 A0 FD | 	call	#popregs_
03ef4                 | _deleteline_ret
03ef4     2D 00 64 FD | 	ret
03ef8                 | 
03ef8                 | ' 
03ef8                 | ' sub save_line
03ef8                 | _save_line
03ef8     03 4A 05 F6 | 	mov	COUNT_, #3
03efc     A8 00 A0 FD | 	call	#pushregs_
03f00     41 00 00 FF 
03f04     40 E4 05 F1 | 	add	objptr, ##33344
03f08     F2 16 02 FB | 	rdlong	arg03, objptr
03f0c     01 16 06 F1 | 	add	arg03, #1
03f10     05 00 00 FF 
03f14     18 E4 85 F1 | 	sub	objptr, ##2584
03f18     F2 14 02 FB | 	rdlong	arg02, objptr
03f1c     0B 15 02 FD | 	qmul	arg02, arg03
03f20     0E 00 00 FF 
03f24     44 E4 85 F1 | 	sub	objptr, ##7236
03f28     F2 12 02 FB | 	rdlong	arg01, objptr
03f2c     2D 00 00 FF 
03f30     E4 E5 85 F1 | 	sub	objptr, ##23524
03f34     09 1F 02 F6 | 	mov	local01, arg01
03f38     18 20 62 FD | 	getqx	local02
03f3c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
03f40                 | LR__0330
03f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
03f44     01 1E 06 51 |  if_ne	add	local01, #1
03f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
03f4c                 | LR__0331
03f4c     09 1F 82 F1 | 	sub	local01, arg01
03f50     03 1E CE F7 | 	test	local01, #3 wz
03f54     02 1E 46 50 |  if_ne	shr	local01, #2
03f58     01 1E 06 51 |  if_ne	add	local01, #1
03f5c     02 1E 66 50 |  if_ne	shl	local01, #2
03f60     10 23 02 F6 | 	mov	local03, local02
03f64     0F 23 02 F1 | 	add	local03, local01
03f68     3A 00 00 FF 
03f6c     20 E4 05 F1 | 	add	objptr, ##29728
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     10 17 02 F1 | 	add	arg03, local02
03f78     04 00 00 FF 
03f7c     28 E4 05 F1 | 	add	objptr, ##2088
03f80     F2 16 62 FC | 	wrlong	arg03, objptr
03f84     04 E4 05 F1 | 	add	objptr, #4
03f88     F2 1E 62 FC | 	wrlong	local01, objptr
03f8c     0C E4 85 F1 | 	sub	objptr, #12
03f90     F2 12 02 F6 | 	mov	arg01, objptr
03f94     04 00 00 FF 
03f98     20 E4 85 F1 | 	sub	objptr, ##2080
03f9c     F2 14 02 FB | 	rdlong	arg02, objptr
03fa0     10 17 02 F6 | 	mov	arg03, local02
03fa4     2E 00 00 FF 
03fa8     60 E5 85 F1 | 	sub	objptr, ##23904
03fac     B0 0A B1 FD | 	call	#_psram_spin2_write
03fb0     22 00 00 FF 
03fb4     24 E5 05 F1 | 	add	objptr, ##17700
03fb8     F2 12 02 FB | 	rdlong	arg01, objptr
03fbc     0C 00 00 FF 
03fc0     3C E4 05 F1 | 	add	objptr, ##6204
03fc4     F2 14 02 FB | 	rdlong	arg02, objptr
03fc8     10 15 02 F1 | 	add	arg02, local02
03fcc     0F 17 02 F6 | 	mov	arg03, local01
03fd0     2E 00 00 FF 
03fd4     60 E5 85 F1 | 	sub	objptr, ##23904
03fd8     84 0A B1 FD | 	call	#_psram_spin2_write
03fdc     2E 00 00 FF 
03fe0     60 E5 05 F1 | 	add	objptr, ##23904
03fe4     F2 1E 02 FB | 	rdlong	local01, objptr
03fe8     11 1F 02 F1 | 	add	local01, local03
03fec     F2 1E 62 FC | 	wrlong	local01, objptr
03ff0     3A 00 00 FF 
03ff4     20 E4 85 F1 | 	sub	objptr, ##29728
03ff8     A7 F0 03 F6 | 	mov	ptra, fp
03ffc     B2 00 A0 FD | 	call	#popregs_
04000                 | _save_line_ret
04000     2D 00 64 FD | 	ret
04004                 | 
04004                 | ' 
04004                 | ' 
04004                 | ' function insertline(aline as ulong) as integer
04004                 | _insertline
04004     02 4A 05 F6 | 	mov	COUNT_, #2
04008     A8 00 A0 FD | 	call	#pushregs_
0400c     28 F0 07 F1 | 	add	ptra, #40
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 12 62 FC | 	wrlong	arg01, fp
04018     41 00 00 FF 
0401c     48 E4 05 F1 | 	add	objptr, ##33352
04020     F2 1E 02 FB | 	rdlong	local01, objptr
04024     04 4E 05 F1 | 	add	fp, #4
04028     A7 1E 62 FC | 	wrlong	local01, fp
0402c     08 4E 85 F1 | 	sub	fp, #8
04030                 | ' 
04030                 | ' do
04030     35 00 00 FF 
04034     88 E5 85 F1 | 	sub	objptr, ##27528
04038                 | LR__0340
04038     10 4E 05 F1 | 	add	fp, #16
0403c     A7 12 02 F6 | 	mov	arg01, fp
04040     08 4E 85 F1 | 	sub	fp, #8
04044     A7 14 02 FB | 	rdlong	arg02, fp
04048     08 4E 85 F1 | 	sub	fp, #8
0404c     18 16 06 F6 | 	mov	arg03, #24
04050     70 09 B1 FD | 	call	#_psram_spin2_read1
04054     08 4E 05 F1 | 	add	fp, #8
04058     A7 1E 02 FB | 	rdlong	local01, fp
0405c     04 4E 05 F1 | 	add	fp, #4
04060     A7 1E 62 FC | 	wrlong	local01, fp
04064     18 4E 05 F1 | 	add	fp, #24
04068     A7 1E 02 FB | 	rdlong	local01, fp
0406c     1C 4E 85 F1 | 	sub	fp, #28
04070     A7 1E 62 FC | 	wrlong	local01, fp
04074     08 4E 05 F1 | 	add	fp, #8
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     0C 4E 85 F1 | 	sub	fp, #12
04080     A7 16 02 FB | 	rdlong	arg03, fp
04084     04 4E 85 F1 | 	sub	fp, #4
04088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0408c     24 4E 05 C1 |  if_b	add	fp, #36
04090     A7 20 02 CB |  if_b	rdlong	local02, fp
04094     24 4E 85 C1 |  if_b	sub	fp, #36
04098     FF FF 3F CF 
0409c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
040a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
040a4     0B 00 00 FF 
040a8     C0 E4 85 F1 | 	sub	objptr, ##5824
040ac                 | ' 
040ac                 | ' if header(0)=aline then return -1 ' delete it first
040ac     10 4E 05 F1 | 	add	fp, #16
040b0     A7 1E 02 FB | 	rdlong	local01, fp
040b4     0C 4E 85 F1 | 	sub	fp, #12
040b8     A7 20 02 FB | 	rdlong	local02, fp
040bc     04 4E 85 F1 | 	sub	fp, #4
040c0     10 1F 0A F2 | 	cmp	local01, local02 wz
040c4     01 FA 65 A6 |  if_e	neg	result1, #1
040c8     74 01 90 AD |  if_e	jmp	#LR__0343
040cc                 | ' if header(0)<aline then return -2 ' end of program reached
040cc     10 4E 05 F1 | 	add	fp, #16
040d0     A7 1E 02 FB | 	rdlong	local01, fp
040d4     0C 4E 85 F1 | 	sub	fp, #12
040d8     A7 16 02 FB | 	rdlong	arg03, fp
040dc     04 4E 85 F1 | 	sub	fp, #4
040e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
040e4     02 FA 65 C6 |  if_b	neg	result1, #2
040e8     54 01 90 CD |  if_b	jmp	#LR__0343
040ec                 | ' 
040ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
040ec     20 4E 05 F1 | 	add	fp, #32
040f0     A7 1E 02 FB | 	rdlong	local01, fp
040f4     20 4E 85 F1 | 	sub	fp, #32
040f8     FF FF 7F FF 
040fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04100     84 00 90 5D |  if_ne	jmp	#LR__0341
04104     3A 00 00 FF 
04108     20 E4 05 F1 | 	add	objptr, ##29728
0410c     F2 1E 02 FB | 	rdlong	local01, objptr
04110     07 00 00 FF 
04114     28 E4 05 F1 | 	add	objptr, ##3624
04118     F2 1E 62 FC | 	wrlong	local01, objptr
0411c     0C 4E 05 F1 | 	add	fp, #12
04120     A7 12 02 FB | 	rdlong	arg01, fp
04124     0C 4E 85 F1 | 	sub	fp, #12
04128     10 12 06 F1 | 	add	arg01, #16
0412c     07 00 00 FF 
04130     28 E4 85 F1 | 	sub	objptr, ##3624
04134     F2 14 02 FB | 	rdlong	arg02, objptr
04138     01 16 06 F6 | 	mov	arg03, #1
0413c     00 18 06 F6 | 	mov	arg04, #0
04140     2E 00 00 FF 
04144     60 E5 85 F1 | 	sub	objptr, ##23904
04148                 | '     return fill(addr, pattern, count, listPtr, 4)
04148     04 1A 06 F6 | 	mov	arg05, #4
0414c     AC 09 B1 FD | 	call	#_psram_spin2_fill
04150     32 00 00 FF 
04154     90 E5 05 F1 | 	add	objptr, ##26000
04158     FF FF FF FF 
0415c     F2 FE 6B FC | 	wrlong	##-1, objptr
04160     0C 4E 05 F1 | 	add	fp, #12
04164     A7 1E 02 FB | 	rdlong	local01, fp
04168     0C 4E 85 F1 | 	sub	fp, #12
0416c     04 E4 05 F1 | 	add	objptr, #4
04170     F2 1E 62 FC | 	wrlong	local01, objptr
04174     3E 00 00 FF 
04178     54 E4 85 F1 | 	sub	objptr, ##31828
0417c     78 FD BF FD | 	call	#_save_line
04180                 | '   programstart=programptr
04180                 | '   pslpoke(lineptr2+16,programptr)
04180                 | '   ucompiledline(4)=$FFFF_FFFF
04180                 | '   ucompiledline(5)=lineptr2
04180                 | '   save_line
04180                 | '   return 0
04180     00 FA 05 F6 | 	mov	result1, #0
04184     B8 00 90 FD | 	jmp	#LR__0343
04188                 | LR__0341
04188                 | ' 
04188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04188     20 4E 05 F1 | 	add	fp, #32
0418c     A7 1E 02 FB | 	rdlong	local01, fp
04190     20 4E 85 F1 | 	sub	fp, #32
04194     FF FF 7F FF 
04198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0419c     9C 00 90 AD |  if_e	jmp	#LR__0342
041a0     20 4E 05 F1 | 	add	fp, #32
041a4     A7 1E 02 FB | 	rdlong	local01, fp
041a8     3E 00 00 FF 
041ac     50 E4 05 F1 | 	add	objptr, ##31824
041b0     F2 1E 62 FC | 	wrlong	local01, objptr
041b4     14 4E 85 F1 | 	sub	fp, #20
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 E4 05 F1 | 	add	objptr, #4
041c0     F2 1E 62 FC | 	wrlong	local01, objptr
041c4     A7 12 02 FB | 	rdlong	arg01, fp
041c8     0C 4E 85 F1 | 	sub	fp, #12
041cc     10 12 06 F1 | 	add	arg01, #16
041d0     04 00 00 FF 
041d4     34 E4 85 F1 | 	sub	objptr, ##2100
041d8     F2 14 02 FB | 	rdlong	arg02, objptr
041dc     01 16 06 F6 | 	mov	arg03, #1
041e0     00 18 06 F6 | 	mov	arg04, #0
041e4     2E 00 00 FF 
041e8     60 E5 85 F1 | 	sub	objptr, ##23904
041ec                 | '     return fill(addr, pattern, count, listPtr, 4)
041ec     04 1A 06 F6 | 	mov	arg05, #4
041f0     08 09 B1 FD | 	call	#_psram_spin2_fill
041f4     20 4E 05 F1 | 	add	fp, #32
041f8     A7 12 02 FB | 	rdlong	arg01, fp
041fc     20 4E 85 F1 | 	sub	fp, #32
04200     14 12 06 F1 | 	add	arg01, #20
04204     2E 00 00 FF 
04208     60 E5 05 F1 | 	add	objptr, ##23904
0420c     F2 14 02 FB | 	rdlong	arg02, objptr
04210     01 16 06 F6 | 	mov	arg03, #1
04214     00 18 06 F6 | 	mov	arg04, #0
04218     2E 00 00 FF 
0421c     60 E5 85 F1 | 	sub	objptr, ##23904
04220                 | '     return fill(addr, pattern, count, listPtr, 4)
04220     04 1A 06 F6 | 	mov	arg05, #4
04224     D4 08 B1 FD | 	call	#_psram_spin2_fill
04228     0B 00 00 FF 
0422c     C0 E4 85 F1 | 	sub	objptr, ##5824
04230     C4 FC BF FD | 	call	#_save_line
04234                 | '   ucompiledline(4)=header(4)
04234                 | '   ucompiledline(5)=lineptr2
04234                 | '   pslpoke(lineptr2+16,programptr)
04234                 | '   pslpoke(header(4)+20,programptr)
04234                 | '   save_line
04234                 | '   return 0
04234     00 FA 05 F6 | 	mov	result1, #0
04238     04 00 90 FD | 	jmp	#LR__0343
0423c                 | LR__0342
0423c     00 FA 05 F6 | 	mov	result1, #0
04240                 | LR__0343
04240     A7 F0 03 F6 | 	mov	ptra, fp
04244     B2 00 A0 FD | 	call	#popregs_
04248                 | _insertline_ret
04248     2D 00 64 FD | 	ret
0424c                 | 
0424c                 | ' 
0424c                 | ' sub add_line_at_end(aline) 
0424c                 | _add_line_at_end
0424c     41 00 00 FF 
04250     4C E4 05 F1 | 	add	objptr, ##33356
04254     F2 12 62 FC | 	wrlong	arg01, objptr
04258     04 E4 05 F1 | 	add	objptr, #4
0425c     F2 14 02 FB | 	rdlong	arg02, objptr
04260     03 00 00 FF 
04264     00 E4 85 F1 | 	sub	objptr, ##1536
04268     F2 14 62 FC | 	wrlong	arg02, objptr
0426c     03 00 00 FF 
04270     00 E4 05 F1 | 	add	objptr, ##1536
04274     F2 12 02 FB | 	rdlong	arg01, objptr
04278     14 12 06 F1 | 	add	arg01, #20
0427c     07 00 00 FF 
04280     30 E4 85 F1 | 	sub	objptr, ##3632
04284     F2 14 02 FB | 	rdlong	arg02, objptr
04288     01 16 06 F6 | 	mov	arg03, #1
0428c     00 18 06 F6 | 	mov	arg04, #0
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298                 | '     return fill(addr, pattern, count, listPtr, 4)
04298     04 1A 06 F6 | 	mov	arg05, #4
0429c     5C 08 B1 FD | 	call	#_psram_spin2_fill
042a0     2E 00 00 FF 
042a4     60 E5 05 F1 | 	add	objptr, ##23904
042a8     F2 14 02 FB | 	rdlong	arg02, objptr
042ac     07 00 00 FF 
042b0     30 E4 05 F1 | 	add	objptr, ##3632
042b4     F2 14 62 FC | 	wrlong	arg02, objptr
042b8     02 00 00 FF 
042bc     FC E5 85 F1 | 	sub	objptr, ##1532
042c0     FF FF BF FF 
042c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
042c8                 | ' 
042c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
042c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
042c8     04 00 00 FF 
042cc     34 E4 85 F1 | 	sub	objptr, ##2100
042d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
042d4     3A 00 00 FF 
042d8     20 E4 85 F1 | 	sub	objptr, ##29728
042dc     3E 00 00 AF 
042e0     50 E4 05 A1 |  if_e	add	objptr, ##31824
042e4     FF FF FF AF 
042e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
042ec     3E 00 00 AF 
042f0     50 E4 85 A1 |  if_e	sub	objptr, ##31824
042f4     00 FC BF FD | 	call	#_save_line
042f8     3A 00 00 FF 
042fc     20 E4 05 F1 | 	add	objptr, ##29728
04300     F2 12 02 FB | 	rdlong	arg01, objptr
04304     01 14 66 F6 | 	neg	arg02, #1
04308     01 16 06 F6 | 	mov	arg03, #1
0430c     00 18 06 F6 | 	mov	arg04, #0
04310     2E 00 00 FF 
04314     60 E5 85 F1 | 	sub	objptr, ##23904
04318                 | '     return fill(addr, pattern, count, listPtr, 4)
04318     04 1A 06 F6 | 	mov	arg05, #4
0431c     DC 07 B1 FD | 	call	#_psram_spin2_fill
04320     0B 00 00 FF 
04324     C0 E4 85 F1 | 	sub	objptr, ##5824
04328                 | _add_line_at_end_ret
04328     2D 00 64 FD | 	ret
0432c                 | 
0432c                 | ' 
0432c                 | ' function compile_immediate(linetype as ulong) as integer
0432c                 | _compile_immediate
0432c     09 4A 05 F6 | 	mov	COUNT_, #9
04330     A8 00 A0 FD | 	call	#pushregs_
04334                 | _compile_immediate_enter
04334     09 25 0A F6 | 	mov	local04, arg01 wz
04338     00 26 06 F6 | 	mov	local05, #0
0433c     00 28 06 F6 | 	mov	local06, #0
04340                 | ' 
04340                 | ' ' linetype=cont+1, linetype=0 immediate
04340                 | ' '  : 1: this is the first part of the line that will continue
04340                 | ' ' 2 - this is the continuation of the line
04340                 | ' ' 3 - this is the last continued line
04340                 | ' ' 4 - this is the one and only part
04340                 | ' 
04340                 | ' err=0
04340                 | ' cmd=0
04340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04340     2C 00 90 5D |  if_ne	jmp	#LR__0350
04344     2B 00 00 FF 
04348     D4 E5 05 F1 | 	add	objptr, ##22484
0434c     F2 28 02 FB | 	rdlong	local06, objptr
04350     02 00 00 FF 
04354     34 E4 05 F1 | 	add	objptr, ##1076
04358     F2 02 68 FC | 	wrlong	#1, objptr
0435c     13 00 00 FF 
04360     38 E4 05 F1 | 	add	objptr, ##9784
04364     F2 00 68 FC | 	wrlong	#0, objptr
04368     41 00 00 FF 
0436c     40 E4 85 F1 | 	sub	objptr, ##33344
04370                 | LR__0350
04370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
04370     02 24 0E F2 | 	cmp	local04, #2 wz
04374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04378     2B 00 00 AF 
0437c     D4 E5 05 A1 |  if_e	add	objptr, ##22484
04380     F2 28 02 AB |  if_e	rdlong	local06, objptr
04384     02 00 00 AF 
04388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0438c     F2 02 68 AC |  if_e	wrlong	#1, objptr
04390     2E 00 00 AF 
04394     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04398     04 24 0E F2 | 	cmp	local04, #4 wz
0439c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
043a0     2C 00 90 5D |  if_ne	jmp	#LR__0351
043a4     2B 00 00 FF 
043a8     DC E5 05 F1 | 	add	objptr, ##22492
043ac     F2 28 02 FB | 	rdlong	local06, objptr
043b0     02 00 00 FF 
043b4     2C E4 05 F1 | 	add	objptr, ##1068
043b8     F2 04 68 FC | 	wrlong	#2, objptr
043bc     13 00 00 FF 
043c0     38 E4 05 F1 | 	add	objptr, ##9784
043c4     F2 04 68 FC | 	wrlong	#2, objptr
043c8     41 00 00 FF 
043cc     40 E4 85 F1 | 	sub	objptr, ##33344
043d0                 | LR__0351
043d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
043d0     05 24 0E F2 | 	cmp	local04, #5 wz
043d4     40 00 90 5D |  if_ne	jmp	#LR__0352
043d8     2E 00 00 FF 
043dc     08 E4 05 F1 | 	add	objptr, ##23560
043e0     F2 2A 02 FB | 	rdlong	local07, objptr
043e4     15 29 02 F6 | 	mov	local06, local07
043e8     03 28 66 F0 | 	shl	local06, #3
043ec     02 00 00 FF 
043f0     38 E4 85 F1 | 	sub	objptr, ##1080
043f4     F2 28 02 F1 | 	add	local06, objptr
043f8     04 28 06 F1 | 	add	local06, #4
043fc     14 29 02 FB | 	rdlong	local06, local06
04400     01 2A 06 F1 | 	add	local07, #1
04404     02 00 00 FF 
04408     38 E4 05 F1 | 	add	objptr, ##1080
0440c     F2 2A 62 FC | 	wrlong	local07, objptr
04410     2E 00 00 FF 
04414     08 E4 85 F1 | 	sub	objptr, ##23560
04418                 | LR__0352
04418     00 2C 06 F6 | 	mov	local08, #0
0441c                 | ' vars=0
0441c                 | ' 'print  "In compile_immediate cmd=:", cmd
0441c                 | ' 451 select case cmd
0441c     40 28 0E F2 | 	cmp	local06, #64 wz
04420     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04424     78 02 90 AD |  if_e	jmp	#LR__0388
04428     4C 28 0E F2 | 	cmp	local06, #76 wz
0442c     24 01 90 AD |  if_e	jmp	#LR__0353
04430     4D 28 0E F2 | 	cmp	local06, #77 wz
04434     68 02 90 AD |  if_e	jmp	#LR__0388
04438     42 28 0E F2 | 	cmp	local06, #66 wz
0443c     20 01 90 AD |  if_e	jmp	#LR__0354
04440     43 28 0E F2 | 	cmp	local06, #67 wz
04444     24 01 90 AD |  if_e	jmp	#LR__0355
04448     45 28 0E F2 | 	cmp	local06, #69 wz
0444c     28 01 90 AD |  if_e	jmp	#LR__0356
04450     46 28 0E F2 | 	cmp	local06, #70 wz
04454     2C 01 90 AD |  if_e	jmp	#LR__0357
04458     47 28 0E F2 | 	cmp	local06, #71 wz
0445c     30 01 90 AD |  if_e	jmp	#LR__0358
04460     48 28 0E F2 | 	cmp	local06, #72 wz
04464     34 01 90 AD |  if_e	jmp	#LR__0359
04468     49 28 0E F2 | 	cmp	local06, #73 wz
0446c     38 01 90 AD |  if_e	jmp	#LR__0360
04470     44 28 0E F2 | 	cmp	local06, #68 wz
04474     3C 01 90 AD |  if_e	jmp	#LR__0361
04478     4E 28 0E F2 | 	cmp	local06, #78 wz
0447c     40 01 90 AD |  if_e	jmp	#LR__0362
04480     50 28 0E F2 | 	cmp	local06, #80 wz
04484     54 01 90 AD |  if_e	jmp	#LR__0364
04488     51 28 0E F2 | 	cmp	local06, #81 wz
0448c     54 01 90 AD |  if_e	jmp	#LR__0365
04490     52 28 0E F2 | 	cmp	local06, #82 wz
04494     54 01 90 AD |  if_e	jmp	#LR__0366
04498     59 28 0E F2 | 	cmp	local06, #89 wz
0449c     54 01 90 AD |  if_e	jmp	#LR__0367
044a0     55 28 0E F2 | 	cmp	local06, #85 wz
044a4     54 01 90 AD |  if_e	jmp	#LR__0368
044a8     56 28 0E F2 | 	cmp	local06, #86 wz
044ac     54 01 90 AD |  if_e	jmp	#LR__0369
044b0     57 28 0E F2 | 	cmp	local06, #87 wz
044b4     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
044b8     E4 01 90 AD |  if_e	jmp	#LR__0388
044bc     58 28 0E F2 | 	cmp	local06, #88 wz
044c0     48 01 90 AD |  if_e	jmp	#LR__0370
044c4     4A 28 0E F2 | 	cmp	local06, #74 wz
044c8     48 01 90 AD |  if_e	jmp	#LR__0371
044cc     4B 28 0E F2 | 	cmp	local06, #75 wz
044d0     48 01 90 AD |  if_e	jmp	#LR__0372
044d4     5A 28 0E F2 | 	cmp	local06, #90 wz
044d8     48 01 90 AD |  if_e	jmp	#LR__0373
044dc     5C 28 0E F2 | 	cmp	local06, #92 wz
044e0     48 01 90 AD |  if_e	jmp	#LR__0374
044e4     5D 28 0E F2 | 	cmp	local06, #93 wz
044e8     B4 01 90 AD |  if_e	jmp	#LR__0388
044ec     5E 28 0E F2 | 	cmp	local06, #94 wz
044f0     44 01 90 AD |  if_e	jmp	#LR__0375
044f4     5F 28 0E F2 | 	cmp	local06, #95 wz
044f8     44 01 90 AD |  if_e	jmp	#LR__0376
044fc     60 28 0E F2 | 	cmp	local06, #96 wz
04500     44 01 90 AD |  if_e	jmp	#LR__0377
04504     61 28 0E F2 | 	cmp	local06, #97 wz
04508     44 01 90 AD |  if_e	jmp	#LR__0378
0450c     63 28 0E F2 | 	cmp	local06, #99 wz
04510     44 01 90 AD |  if_e	jmp	#LR__0379
04514     68 28 0E F2 | 	cmp	local06, #104 wz
04518     44 01 90 AD |  if_e	jmp	#LR__0380
0451c     69 28 0E F2 | 	cmp	local06, #105 wz
04520     44 01 90 AD |  if_e	jmp	#LR__0381
04524     6D 28 0E F2 | 	cmp	local06, #109 wz
04528     44 01 90 AD |  if_e	jmp	#LR__0382
0452c     6C 28 0E F2 | 	cmp	local06, #108 wz
04530     44 01 90 AD |  if_e	jmp	#LR__0383
04534     71 28 0E F2 | 	cmp	local06, #113 wz
04538     44 01 90 AD |  if_e	jmp	#LR__0384
0453c     72 28 0E F2 | 	cmp	local06, #114 wz
04540     44 01 90 AD |  if_e	jmp	#LR__0385
04544     01 00 00 FF 
04548     04 28 0E F2 | 	cmp	local06, ##516 wz
0454c     40 01 90 AD |  if_e	jmp	#LR__0386
04550     44 01 90 FD | 	jmp	#LR__0387
04554                 | LR__0353
04554     48 0F B0 FD | 	call	#_compile_fun_varp
04558     FD 2C 02 F6 | 	mov	local08, result1
0455c     40 01 90 FD | 	jmp	#LR__0388
04560                 | LR__0354
04560     5C 0B B0 FD | 	call	#_compile_fun_2p
04564     FD 26 02 F6 | 	mov	local05, result1
04568     34 01 90 FD | 	jmp	#LR__0388
0456c                 | LR__0355
0456c     50 0B B0 FD | 	call	#_compile_fun_2p
04570     FD 26 02 F6 | 	mov	local05, result1
04574     28 01 90 FD | 	jmp	#LR__0388
04578                 | LR__0356
04578     B8 0B B0 FD | 	call	#_compile_fun_3p
0457c     FD 26 02 F6 | 	mov	local05, result1
04580     1C 01 90 FD | 	jmp	#LR__0388
04584                 | LR__0357
04584     AC 0B B0 FD | 	call	#_compile_fun_3p
04588     FD 26 02 F6 | 	mov	local05, result1
0458c     10 01 90 FD | 	jmp	#LR__0388
04590                 | LR__0358
04590     6C 0C B0 FD | 	call	#_compile_fun_4p
04594     FD 26 02 F6 | 	mov	local05, result1
04598     04 01 90 FD | 	jmp	#LR__0388
0459c                 | LR__0359
0459c     60 0C B0 FD | 	call	#_compile_fun_4p
045a0     FD 26 02 F6 | 	mov	local05, result1
045a4     F8 00 90 FD | 	jmp	#LR__0388
045a8                 | LR__0360
045a8     EC 2D B0 FD | 	call	#_expr
045ac                 | ' 
045ac                 | ' 
045ac                 | ' expr()
045ac                 | ' return 0
045ac     00 26 06 F6 | 	mov	local05, #0
045b0     EC 00 90 FD | 	jmp	#LR__0388
045b4                 | LR__0361
045b4     14 10 B0 FD | 	call	#_compile_print
045b8     FD 26 02 F6 | 	mov	local05, result1
045bc     9C 01 90 FD | 	jmp	#LR__0389
045c0                 | LR__0362
045c0     01 24 16 F2 | 	cmp	local04, #1 wc
045c4     08 00 90 CD |  if_b	jmp	#LR__0363
045c8     6C 2A B0 FD | 	call	#_compile_goto
045cc     8C 01 90 FD | 	jmp	#LR__0389
045d0                 | LR__0363
045d0     19 12 06 F6 | 	mov	arg01, #25
045d4     E4 D9 B0 FD | 	call	#_printerror
045d8     80 01 90 FD | 	jmp	#LR__0389
045dc                 | LR__0364
045dc     B8 2D B0 FD | 	call	#_expr
045e0                 | ' 
045e0                 | ' 
045e0                 | ' expr()
045e0                 | ' return 0
045e0     BC 00 90 FD | 	jmp	#LR__0388
045e4                 | LR__0365
045e4     B0 2D B0 FD | 	call	#_expr
045e8                 | ' 
045e8                 | ' 
045e8                 | ' expr()
045e8                 | ' return 0
045e8     B4 00 90 FD | 	jmp	#LR__0388
045ec                 | LR__0366
045ec     A8 2D B0 FD | 	call	#_expr
045f0                 | ' 
045f0                 | ' 
045f0                 | ' expr()
045f0                 | ' return 0
045f0     AC 00 90 FD | 	jmp	#LR__0388
045f4                 | LR__0367
045f4     A0 2D B0 FD | 	call	#_expr
045f8                 | ' 
045f8                 | ' 
045f8                 | ' expr()
045f8                 | ' return 0
045f8     A4 00 90 FD | 	jmp	#LR__0388
045fc                 | LR__0368
045fc     4C 0F B0 FD | 	call	#_compile_int_fun_2p
04600     9C 00 90 FD | 	jmp	#LR__0388
04604                 | LR__0369
04604     D0 09 B0 FD | 	call	#_compile_converttoint
04608                 | ' return err
04608     94 00 90 FD | 	jmp	#LR__0388
0460c                 | LR__0370
0460c     94 16 B0 FD | 	call	#_compile_if
04610     48 01 90 FD | 	jmp	#LR__0389
04614                 | LR__0371
04614     84 20 B0 FD | 	call	#_compile_for
04618     40 01 90 FD | 	jmp	#LR__0389
0461c                 | LR__0372
0461c     68 28 B0 FD | 	call	#_compile_next
04620     38 01 90 FD | 	jmp	#LR__0389
04624                 | LR__0373
04624     BC 17 B0 FD | 	call	#_compile_else
04628     30 01 90 FD | 	jmp	#LR__0389
0462c                 | LR__0374
0462c     90 0A B0 FD | 	call	#_compile_fun_2p
04630     FD 26 02 F6 | 	mov	local05, result1
04634     68 00 90 FD | 	jmp	#LR__0388
04638                 | LR__0375
04638     5C 2D B0 FD | 	call	#_expr
0463c                 | ' 
0463c                 | ' 
0463c                 | ' expr()
0463c                 | ' return 0
0463c     60 00 90 FD | 	jmp	#LR__0388
04640                 | LR__0376
04640     54 2D B0 FD | 	call	#_expr
04644                 | ' 
04644                 | ' 
04644                 | ' expr()
04644                 | ' return 0
04644     58 00 90 FD | 	jmp	#LR__0388
04648                 | LR__0377
04648     4C 2D B0 FD | 	call	#_expr
0464c                 | ' 
0464c                 | ' 
0464c                 | ' expr()
0464c                 | ' return 0
0464c     50 00 90 FD | 	jmp	#LR__0388
04650                 | LR__0378
04650     44 2D B0 FD | 	call	#_expr
04654                 | ' 
04654                 | ' 
04654                 | ' expr()
04654                 | ' return 0
04654     48 00 90 FD | 	jmp	#LR__0388
04658                 | LR__0379
04658     3C 2D B0 FD | 	call	#_expr
0465c                 | ' 
0465c                 | ' 
0465c                 | ' expr()
0465c                 | ' return 0
0465c     40 00 90 FD | 	jmp	#LR__0388
04660                 | LR__0380
04660     34 2D B0 FD | 	call	#_expr
04664                 | ' 
04664                 | ' 
04664                 | ' expr()
04664                 | ' return 0
04664     38 00 90 FD | 	jmp	#LR__0388
04668                 | LR__0381
04668     2C 2D B0 FD | 	call	#_expr
0466c                 | ' 
0466c                 | ' 
0466c                 | ' expr()
0466c                 | ' return 0
0466c     30 00 90 FD | 	jmp	#LR__0388
04670                 | LR__0382
04670     C0 0A B0 FD | 	call	#_compile_fun_3p
04674     28 00 90 FD | 	jmp	#LR__0388
04678                 | LR__0383
04678     A8 0C B0 FD | 	call	#_compile_fun_5p
0467c     20 00 90 FD | 	jmp	#LR__0388
04680                 | LR__0384
04680     7C 0B B0 FD | 	call	#_compile_fun_4p
04684     18 00 90 FD | 	jmp	#LR__0388
04688                 | LR__0385
04688     80 18 B0 FD | 	call	#_compile_dim
0468c     CC 00 90 FD | 	jmp	#LR__0389
04690                 | LR__0386
04690     20 01 B0 FD | 	call	#_compile_array_assign
04694     C4 00 90 FD | 	jmp	#LR__0389
04698                 | LR__0387
04698     80 08 B0 FD | 	call	#_compile_unknown
0469c     BC 00 90 FD | 	jmp	#LR__0389
046a0                 | LR__0388
046a0     14 23 02 F6 | 	mov	local03, local06
046a4     16 1F 02 F6 | 	mov	local01, local08
046a8     0F 2B 02 F6 | 	mov	local07, local01
046ac     10 2F 02 F6 | 	mov	local09, local02
046b0     11 1F 02 F6 | 	mov	local01, local03
046b4     41 00 00 FF 
046b8     40 E4 05 F1 | 	add	objptr, ##33344
046bc     F2 2C 02 FB | 	rdlong	local08, objptr
046c0     16 29 02 F6 | 	mov	local06, local08
046c4     01 28 66 F0 | 	shl	local06, #1
046c8     16 29 02 F1 | 	add	local06, local08
046cc     02 28 66 F0 | 	shl	local06, #2
046d0     03 00 00 FF 
046d4     00 E4 85 F1 | 	sub	objptr, ##1536
046d8     F2 28 02 F1 | 	add	local06, objptr
046dc     14 2B 62 FC | 	wrlong	local07, local06
046e0     03 00 00 FF 
046e4     00 E4 05 F1 | 	add	objptr, ##1536
046e8     F2 2C 02 FB | 	rdlong	local08, objptr
046ec     16 2B 02 F6 | 	mov	local07, local08
046f0     01 2A 66 F0 | 	shl	local07, #1
046f4     16 2B 02 F1 | 	add	local07, local08
046f8     02 2A 66 F0 | 	shl	local07, #2
046fc     03 00 00 FF 
04700     00 E4 85 F1 | 	sub	objptr, ##1536
04704     F2 2A 02 F1 | 	add	local07, objptr
04708     04 2A 06 F1 | 	add	local07, #4
0470c     15 2F 62 FC | 	wrlong	local09, local07
04710     03 00 00 FF 
04714     00 E4 05 F1 | 	add	objptr, ##1536
04718     F2 2E 02 FB | 	rdlong	local09, objptr
0471c     17 2D 02 F6 | 	mov	local08, local09
04720     01 2C 66 F0 | 	shl	local08, #1
04724     17 2D 02 F1 | 	add	local08, local09
04728     02 2C 66 F0 | 	shl	local08, #2
0472c     03 00 00 FF 
04730     00 E4 85 F1 | 	sub	objptr, ##1536
04734     F2 2C 02 F1 | 	add	local08, objptr
04738     08 2C 06 F1 | 	add	local08, #8
0473c     16 1F 62 FC | 	wrlong	local01, local08
04740     03 00 00 FF 
04744     00 E4 05 F1 | 	add	objptr, ##1536
04748     F2 2A 02 FB | 	rdlong	local07, objptr
0474c     01 2A 06 F1 | 	add	local07, #1
04750     F2 2A 62 FC | 	wrlong	local07, objptr
04754     41 00 00 FF 
04758     40 E4 85 F1 | 	sub	objptr, ##33344
0475c                 | LR__0389
0475c                 | ' 
0475c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0475c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0475c     00 24 0E F2 | 	cmp	local04, #0 wz
04760     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04764     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04768     38 00 90 5D |  if_ne	jmp	#LR__0390
0476c     41 00 00 FF 
04770     40 E4 05 F1 | 	add	objptr, ##33344
04774     F2 2E 02 FB | 	rdlong	local09, objptr
04778     17 1F 02 F6 | 	mov	local01, local09
0477c     01 1E 66 F0 | 	shl	local01, #1
04780     17 1F 02 F1 | 	add	local01, local09
04784     02 1E 66 F0 | 	shl	local01, #2
04788     03 00 00 FF 
0478c     00 E4 85 F1 | 	sub	objptr, ##1536
04790     F2 1E 02 F1 | 	add	local01, objptr
04794     08 1E 06 F1 | 	add	local01, #8
04798     0F FD 6B FC | 	wrlong	#510, local01
0479c     3E 00 00 FF 
047a0     40 E4 85 F1 | 	sub	objptr, ##31808
047a4                 | LR__0390
047a4                 | ' 
047a4                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
047a4                 | ' return err
047a4     13 FB 01 F6 | 	mov	result1, local05
047a8     A7 F0 03 F6 | 	mov	ptra, fp
047ac     B2 00 A0 FD | 	call	#popregs_
047b0                 | _compile_immediate_ret
047b0     2D 00 64 FD | 	ret
047b4                 | 
047b4                 | ' 
047b4                 | ' sub compile_array_assign
047b4                 | _compile_array_assign
047b4     0A 4A 05 F6 | 	mov	COUNT_, #10
047b8     A8 00 A0 FD | 	call	#pushregs_
047bc     00 24 06 F6 | 	mov	local04, #0
047c0     2E 00 00 FF 
047c4     08 E4 05 F1 | 	add	objptr, ##23560
047c8     F2 26 02 FB | 	rdlong	local05, objptr
047cc     13 FB 01 F6 | 	mov	result1, local05
047d0     01 FA 85 F1 | 	sub	result1, #1
047d4     03 FA 65 F0 | 	shl	result1, #3
047d8     02 00 00 FF 
047dc     38 E4 85 F1 | 	sub	objptr, ##1080
047e0     F2 FA 01 F1 | 	add	result1, objptr
047e4     FD 28 02 FB | 	rdlong	local06, result1
047e8                 | ' numpar=0
047e8                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
047e8                 | ' ' todo here: recognize params and t1.result.twowords=numpar
047e8                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
047e8                 | ' if lparts(ct).token=token_lpar then
047e8     03 26 66 F0 | 	shl	local05, #3
047ec     F2 26 02 F1 | 	add	local05, objptr
047f0     04 26 06 F1 | 	add	local05, #4
047f4     13 27 02 FB | 	rdlong	local05, local05
047f8     15 26 0E F2 | 	cmp	local05, #21 wz
047fc     2B 00 00 FF 
04800     D0 E5 85 F1 | 	sub	objptr, ##22480
04804     D4 01 90 5D |  if_ne	jmp	#LR__0404
04808     2E 00 00 FF 
0480c     08 E4 05 F1 | 	add	objptr, ##23560
04810     F2 2A 02 FB | 	rdlong	local07, objptr
04814     01 2A 06 F1 | 	add	local07, #1
04818     F2 2A 62 FC | 	wrlong	local07, objptr
0481c     2E 00 00 FF 
04820     08 E4 85 F1 | 	sub	objptr, ##23560
04824                 | '   ct+=1 											' omit this lpar, this is for expr list
04824                 | '   do
04824                 | LR__0400
04824     70 2B B0 FD | 	call	#_expr
04828     2E 00 00 FF 
0482c     08 E4 05 F1 | 	add	objptr, ##23560
04830     F2 26 02 FB | 	rdlong	local05, objptr
04834     01 26 06 F1 | 	add	local05, #1
04838     F2 26 62 FC | 	wrlong	local05, objptr
0483c     01 24 06 F1 | 	add	local04, #1
04840     01 26 86 F1 | 	sub	local05, #1
04844     03 26 66 F0 | 	shl	local05, #3
04848     02 00 00 FF 
0484c     38 E4 85 F1 | 	sub	objptr, ##1080
04850     F2 26 02 F1 | 	add	local05, objptr
04854     04 26 06 F1 | 	add	local05, #4
04858     13 2B 02 FB | 	rdlong	local07, local05
0485c     14 2A 0E F2 | 	cmp	local07, #20 wz
04860     2B 00 00 FF 
04864     D0 E5 85 F1 | 	sub	objptr, ##22480
04868     34 00 90 AD |  if_e	jmp	#LR__0401
0486c     2E 00 00 FF 
04870     08 E4 05 F1 | 	add	objptr, ##23560
04874     F2 2A 02 FB | 	rdlong	local07, objptr
04878     03 2A 66 F0 | 	shl	local07, #3
0487c     02 00 00 FF 
04880     38 E4 85 F1 | 	sub	objptr, ##1080
04884     F2 2A 02 F1 | 	add	local07, objptr
04888     04 2A 06 F1 | 	add	local07, #4
0488c     15 2B 02 FB | 	rdlong	local07, local07
04890     FE 2B 0E F2 | 	cmp	local07, #510 wz
04894     2B 00 00 FF 
04898     D0 E5 85 F1 | 	sub	objptr, ##22480
0489c     84 FF 9F 5D |  if_ne	jmp	#LR__0400
048a0                 | LR__0401
048a0     2E 00 00 FF 
048a4     08 E4 05 F1 | 	add	objptr, ##23560
048a8     F2 2A 02 FB | 	rdlong	local07, objptr
048ac     01 2A 06 F1 | 	add	local07, #1
048b0     F2 2A 62 FC | 	wrlong	local07, objptr
048b4     2E 00 00 FF 
048b8     08 E4 85 F1 | 	sub	objptr, ##23560
048bc     D8 2A B0 FD | 	call	#_expr
048c0     01 2C 66 F6 | 	neg	local08, #1
048c4     00 2E 06 F6 | 	mov	local09, #0
048c8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
048c8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
048c8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
048c8                 | ' ct+=1 : expr()
048c8                 | ' ' now find the vae
048c8                 | ' 
048c8                 | ' j=-1 : i=0 : do : 
048c8                 | LR__0402
048c8                 | '   if variables(i).name=varname$ then j=i: exit loop
048c8     17 27 02 F6 | 	mov	local05, local09
048cc     04 26 66 F0 | 	shl	local05, #4
048d0     0B 00 00 FF 
048d4     CC E5 05 F1 | 	add	objptr, ##6092
048d8     F2 26 02 F1 | 	add	local05, objptr
048dc     13 13 02 FB | 	rdlong	arg01, local05
048e0     14 15 02 F6 | 	mov	arg02, local06
048e4     0B 00 00 FF 
048e8     CC E5 85 F1 | 	sub	objptr, ##6092
048ec     E8 0B B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     17 2D 02 A6 |  if_e	mov	local08, local09
048f8     20 00 90 AD |  if_e	jmp	#LR__0403
048fc     01 2E 06 F1 | 	add	local09, #1
04900     2B 00 00 FF 
04904     CC E5 05 F1 | 	add	objptr, ##22476
04908     F2 2A 02 FB | 	rdlong	local07, objptr
0490c     2B 00 00 FF 
04910     CC E5 85 F1 | 	sub	objptr, ##22476
04914     15 2F 5A F2 | 	cmps	local09, local07 wcz
04918     AC FF 9F ED |  if_be	jmp	#LR__0402
0491c                 | LR__0403
0491c     16 1F 02 F6 | 	mov	local01, local08
04920     12 21 02 F6 | 	mov	local02, local04
04924     17 22 06 F6 | 	mov	local03, #23
04928     0F 2B 02 F6 | 	mov	local07, local01
0492c     10 31 02 F6 | 	mov	local10, local02
04930     11 2D 02 F6 | 	mov	local08, local03
04934     41 00 00 FF 
04938     40 E4 05 F1 | 	add	objptr, ##33344
0493c     F2 1E 02 FB | 	rdlong	local01, objptr
04940     0F 2F 02 F6 | 	mov	local09, local01
04944     01 2E 66 F0 | 	shl	local09, #1
04948     0F 2F 02 F1 | 	add	local09, local01
0494c     02 2E 66 F0 | 	shl	local09, #2
04950     03 00 00 FF 
04954     00 E4 85 F1 | 	sub	objptr, ##1536
04958     F2 2E 02 F1 | 	add	local09, objptr
0495c     17 2B 62 FC | 	wrlong	local07, local09
04960     03 00 00 FF 
04964     00 E4 05 F1 | 	add	objptr, ##1536
04968     F2 1E 02 FB | 	rdlong	local01, objptr
0496c     0F 2F 02 F6 | 	mov	local09, local01
04970     01 2E 66 F0 | 	shl	local09, #1
04974     0F 2F 02 F1 | 	add	local09, local01
04978     02 2E 66 F0 | 	shl	local09, #2
0497c     03 00 00 FF 
04980     00 E4 85 F1 | 	sub	objptr, ##1536
04984     F2 2E 02 F1 | 	add	local09, objptr
04988     04 2E 06 F1 | 	add	local09, #4
0498c     17 31 62 FC | 	wrlong	local10, local09
04990     03 00 00 FF 
04994     00 E4 05 F1 | 	add	objptr, ##1536
04998     F2 30 02 FB | 	rdlong	local10, objptr
0499c     18 1F 02 F6 | 	mov	local01, local10
049a0     01 1E 66 F0 | 	shl	local01, #1
049a4     18 1F 02 F1 | 	add	local01, local10
049a8     02 1E 66 F0 | 	shl	local01, #2
049ac     03 00 00 FF 
049b0     00 E4 85 F1 | 	sub	objptr, ##1536
049b4     F2 1E 02 F1 | 	add	local01, objptr
049b8     08 1E 06 F1 | 	add	local01, #8
049bc     0F 2D 62 FC | 	wrlong	local08, local01
049c0     03 00 00 FF 
049c4     00 E4 05 F1 | 	add	objptr, ##1536
049c8     F2 2A 02 FB | 	rdlong	local07, objptr
049cc     01 2A 06 F1 | 	add	local07, #1
049d0     F2 2A 62 FC | 	wrlong	local07, objptr
049d4     41 00 00 FF 
049d8     40 E4 85 F1 | 	sub	objptr, ##33344
049dc                 | LR__0404
049dc     A7 F0 03 F6 | 	mov	ptra, fp
049e0     B2 00 A0 FD | 	call	#popregs_
049e4                 | _compile_array_assign_ret
049e4     2D 00 64 FD | 	ret
049e8                 | 
049e8                 | ' 
049e8                 | ' 
049e8                 | ' sub compile_immediate_assign(linetype as ulong)
049e8                 | _compile_immediate_assign
049e8     09 4A 05 F6 | 	mov	COUNT_, #9
049ec     A8 00 A0 FD | 	call	#pushregs_
049f0     09 25 0A F6 | 	mov	local04, arg01 wz
049f4     FF 22 06 F6 | 	mov	local03, #255
049f8     01 26 66 F6 | 	neg	local05, #1
049fc                 | ' 
049fc                 | ' t1.result_type=result_error : t1.result.uresult=0
049fc                 | ' i=-1: j=-1
049fc                 | ' 
049fc                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
049fc     2C 00 90 5D |  if_ne	jmp	#LR__0410
04a00     2B 00 00 FF 
04a04     D0 E5 05 F1 | 	add	objptr, ##22480
04a08     F2 28 02 FB | 	rdlong	local06, objptr
04a0c     02 00 00 FF 
04a10     38 E4 05 F1 | 	add	objptr, ##1080
04a14     F2 04 68 FC | 	wrlong	#2, objptr
04a18     13 00 00 FF 
04a1c     38 E4 05 F1 | 	add	objptr, ##9784
04a20     F2 00 68 FC | 	wrlong	#0, objptr
04a24     41 00 00 FF 
04a28     40 E4 85 F1 | 	sub	objptr, ##33344
04a2c                 | LR__0410
04a2c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04a2c     02 24 0E F2 | 	cmp	local04, #2 wz
04a30     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04a34     2B 00 00 AF 
04a38     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04a3c     F2 28 02 AB |  if_e	rdlong	local06, objptr
04a40     02 00 00 AF 
04a44     38 E4 05 A1 |  if_e	add	objptr, ##1080
04a48     F2 04 68 AC |  if_e	wrlong	#2, objptr
04a4c     2E 00 00 AF 
04a50     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04a54                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04a54     04 24 0E F2 | 	cmp	local04, #4 wz
04a58     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04a5c     2C 00 90 5D |  if_ne	jmp	#LR__0411
04a60     2B 00 00 FF 
04a64     D8 E5 05 F1 | 	add	objptr, ##22488
04a68     F2 28 02 FB | 	rdlong	local06, objptr
04a6c     02 00 00 FF 
04a70     30 E4 05 F1 | 	add	objptr, ##1072
04a74     F2 06 68 FC | 	wrlong	#3, objptr
04a78     13 00 00 FF 
04a7c     38 E4 05 F1 | 	add	objptr, ##9784
04a80     F2 04 68 FC | 	wrlong	#2, objptr
04a84     41 00 00 FF 
04a88     40 E4 85 F1 | 	sub	objptr, ##33344
04a8c                 | LR__0411
04a8c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04a8c     05 24 0E F2 | 	cmp	local04, #5 wz
04a90     3C 00 90 5D |  if_ne	jmp	#LR__0412
04a94     2E 00 00 FF 
04a98     08 E4 05 F1 | 	add	objptr, ##23560
04a9c     F2 FA 01 FB | 	rdlong	result1, objptr
04aa0     FD 28 02 F6 | 	mov	local06, result1
04aa4     03 28 66 F0 | 	shl	local06, #3
04aa8     02 00 00 FF 
04aac     38 E4 85 F1 | 	sub	objptr, ##1080
04ab0     F2 28 02 F1 | 	add	local06, objptr
04ab4     14 29 02 FB | 	rdlong	local06, local06
04ab8     02 FA 05 F1 | 	add	result1, #2
04abc     02 00 00 FF 
04ac0     38 E4 05 F1 | 	add	objptr, ##1080
04ac4     F2 FA 61 FC | 	wrlong	result1, objptr
04ac8     2E 00 00 FF 
04acc     08 E4 85 F1 | 	sub	objptr, ##23560
04ad0                 | LR__0412
04ad0     14 13 02 F6 | 	mov	arg01, local06
04ad4     01 14 06 F6 | 	mov	arg02, #1
04ad8     6C 2A B1 FD | 	call	#__system__Right_S
04adc     B8 28 B0 FD | 	call	#_expr
04ae0                 | '  
04ae0                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04ae0                 | ' 
04ae0                 | ' suffix2$=right$(varname2$,1)
04ae0                 | ' expr()
04ae0                 | ' 
04ae0                 | ' 
04ae0                 | ' if varnum>0 then
04ae0     2B 00 00 FF 
04ae4     CC E5 05 F1 | 	add	objptr, ##22476
04ae8     F2 2A 02 FB | 	rdlong	local07, objptr
04aec     2B 00 00 FF 
04af0     CC E5 85 F1 | 	sub	objptr, ##22476
04af4     01 2A 56 F2 | 	cmps	local07, #1 wc
04af8     58 00 90 CD |  if_b	jmp	#LR__0415
04afc                 | '   for i=0 to varnum-1
04afc     00 2C 06 F6 | 	mov	local08, #0
04b00     2B 00 00 FF 
04b04     CC E5 05 F1 | 	add	objptr, ##22476
04b08     F2 2E 02 FB | 	rdlong	local09, objptr
04b0c     2B 00 00 FF 
04b10     CC E5 85 F1 | 	sub	objptr, ##22476
04b14                 | LR__0413
04b14     17 2D 52 F2 | 	cmps	local08, local09 wc
04b18     38 00 90 3D |  if_ae	jmp	#LR__0414
04b1c                 | '     if variables(i).name=varname2$ then j=i : exit
04b1c     16 2B 02 F6 | 	mov	local07, local08
04b20     04 2A 66 F0 | 	shl	local07, #4
04b24     0B 00 00 FF 
04b28     CC E5 05 F1 | 	add	objptr, ##6092
04b2c     F2 2A 02 F1 | 	add	local07, objptr
04b30     15 13 02 FB | 	rdlong	arg01, local07
04b34     14 15 02 F6 | 	mov	arg02, local06
04b38     0B 00 00 FF 
04b3c     CC E5 85 F1 | 	sub	objptr, ##6092
04b40     94 09 B1 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     16 27 02 A6 |  if_e	mov	local05, local08
04b4c     01 2C 06 51 |  if_ne	add	local08, #1
04b50     C0 FF 9F 5D |  if_ne	jmp	#LR__0413
04b54                 | LR__0414
04b54                 | LR__0415
04b54                 | ' if  j=-1 andalso varnum<maxvars then   
04b54     FF FF 7F FF 
04b58     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04b5c     60 00 90 5D |  if_ne	jmp	#LR__0416
04b60     2B 00 00 FF 
04b64     CC E5 05 F1 | 	add	objptr, ##22476
04b68     F2 2A 02 FB | 	rdlong	local07, objptr
04b6c     2B 00 00 FF 
04b70     CC E5 85 F1 | 	sub	objptr, ##22476
04b74     01 00 00 FF 
04b78     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04b7c     40 00 90 3D |  if_ae	jmp	#LR__0416
04b80     2B 00 00 FF 
04b84     CC E5 05 F1 | 	add	objptr, ##22476
04b88     F2 2E 02 FB | 	rdlong	local09, objptr
04b8c     04 2E 66 F0 | 	shl	local09, #4
04b90     20 00 00 FF 
04b94     00 E4 85 F1 | 	sub	objptr, ##16384
04b98     F2 2E 02 F1 | 	add	local09, objptr
04b9c     17 29 62 FC | 	wrlong	local06, local09
04ba0     20 00 00 FF 
04ba4     00 E4 05 F1 | 	add	objptr, ##16384
04ba8     F2 2A 02 FB | 	rdlong	local07, objptr
04bac     15 27 02 F6 | 	mov	local05, local07
04bb0     01 2A 06 F1 | 	add	local07, #1
04bb4     F2 2A 62 FC | 	wrlong	local07, objptr
04bb8     2B 00 00 FF 
04bbc     CC E5 85 F1 | 	sub	objptr, ##22476
04bc0                 | LR__0416
04bc0     13 1F 02 F6 | 	mov	local01, local05
04bc4     17 22 06 F6 | 	mov	local03, #23
04bc8     0F 2B 02 F6 | 	mov	local07, local01
04bcc     10 2F 02 F6 | 	mov	local09, local02
04bd0     11 1F 02 F6 | 	mov	local01, local03
04bd4     41 00 00 FF 
04bd8     40 E4 05 F1 | 	add	objptr, ##33344
04bdc     F2 2C 02 FB | 	rdlong	local08, objptr
04be0     16 29 02 F6 | 	mov	local06, local08
04be4     01 28 66 F0 | 	shl	local06, #1
04be8     16 29 02 F1 | 	add	local06, local08
04bec     02 28 66 F0 | 	shl	local06, #2
04bf0     03 00 00 FF 
04bf4     00 E4 85 F1 | 	sub	objptr, ##1536
04bf8     F2 28 02 F1 | 	add	local06, objptr
04bfc     14 2B 62 FC | 	wrlong	local07, local06
04c00     03 00 00 FF 
04c04     00 E4 05 F1 | 	add	objptr, ##1536
04c08     F2 2C 02 FB | 	rdlong	local08, objptr
04c0c     16 2B 02 F6 | 	mov	local07, local08
04c10     01 2A 66 F0 | 	shl	local07, #1
04c14     16 2B 02 F1 | 	add	local07, local08
04c18     02 2A 66 F0 | 	shl	local07, #2
04c1c     03 00 00 FF 
04c20     00 E4 85 F1 | 	sub	objptr, ##1536
04c24     F2 2A 02 F1 | 	add	local07, objptr
04c28     04 2A 06 F1 | 	add	local07, #4
04c2c     15 2F 62 FC | 	wrlong	local09, local07
04c30     03 00 00 FF 
04c34     00 E4 05 F1 | 	add	objptr, ##1536
04c38     F2 2E 02 FB | 	rdlong	local09, objptr
04c3c     17 2D 02 F6 | 	mov	local08, local09
04c40     01 2C 66 F0 | 	shl	local08, #1
04c44     17 2D 02 F1 | 	add	local08, local09
04c48     02 2C 66 F0 | 	shl	local08, #2
04c4c     03 00 00 FF 
04c50     00 E4 85 F1 | 	sub	objptr, ##1536
04c54     F2 2C 02 F1 | 	add	local08, objptr
04c58     08 2C 06 F1 | 	add	local08, #8
04c5c     16 1F 62 FC | 	wrlong	local01, local08
04c60     03 00 00 FF 
04c64     00 E4 05 F1 | 	add	objptr, ##1536
04c68     F2 2A 02 FB | 	rdlong	local07, objptr
04c6c     01 2A 06 F1 | 	add	local07, #1
04c70     F2 2A 62 FC | 	wrlong	local07, objptr
04c74     41 00 00 FF 
04c78     40 E4 85 F1 | 	sub	objptr, ##33344
04c7c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04c7c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04c7c     00 24 0E F2 | 	cmp	local04, #0 wz
04c80     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04c84     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04c88     38 00 90 5D |  if_ne	jmp	#LR__0417
04c8c     41 00 00 FF 
04c90     40 E4 05 F1 | 	add	objptr, ##33344
04c94     F2 1E 02 FB | 	rdlong	local01, objptr
04c98     0F 2F 02 F6 | 	mov	local09, local01
04c9c     01 2E 66 F0 | 	shl	local09, #1
04ca0     0F 2F 02 F1 | 	add	local09, local01
04ca4     02 2E 66 F0 | 	shl	local09, #2
04ca8     03 00 00 FF 
04cac     00 E4 85 F1 | 	sub	objptr, ##1536
04cb0     F2 2E 02 F1 | 	add	local09, objptr
04cb4     08 2E 06 F1 | 	add	local09, #8
04cb8     17 FD 6B FC | 	wrlong	#510, local09
04cbc     3E 00 00 FF 
04cc0     40 E4 85 F1 | 	sub	objptr, ##31808
04cc4                 | LR__0417
04cc4     A7 F0 03 F6 | 	mov	ptra, fp
04cc8     B2 00 A0 FD | 	call	#popregs_
04ccc                 | _compile_immediate_assign_ret
04ccc     2D 00 64 FD | 	ret
04cd0                 | 
04cd0                 | ' 
04cd0                 | ' ' ------------------ compile the line that is calling a command 
04cd0                 | ' 
04cd0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04cd0                 | _compile
04cd0     04 4A 05 F6 | 	mov	COUNT_, #4
04cd4     A8 00 A0 FD | 	call	#pushregs_
04cd8     09 1F 0A F6 | 	mov	local01, arg01 wz
04cdc     0A 21 02 F6 | 	mov	local02, arg02
04ce0     0B 23 02 F6 | 	mov	local03, arg03
04ce4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04ce4                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04ce4                 | '  
04ce4                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04ce4                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04ce4     0C 00 90 5D |  if_ne	jmp	#LR__0420
04ce8     00 12 06 F6 | 	mov	arg01, #0
04cec     3C F6 BF FD | 	call	#_compile_immediate
04cf0     A0 00 90 FD | 	jmp	#LR__0427
04cf4                 | LR__0420
04cf4     3E 00 00 FF 
04cf8     40 E4 05 F1 | 	add	objptr, ##31808
04cfc     F2 1E 62 FC | 	wrlong	local01, objptr
04d00     04 E4 05 F1 | 	add	objptr, #4
04d04     F2 20 62 FC | 	wrlong	local02, objptr
04d08     3E 00 00 FF 
04d0c     44 E4 85 F1 | 	sub	objptr, ##31812
04d10     11 13 02 F6 | 	mov	arg01, local03
04d14     01 12 06 F1 | 	add	arg01, #1
04d18     10 F6 BF FD | 	call	#_compile_immediate
04d1c     FD 24 0A F6 | 	mov	local04, result1 wz
04d20                 | ' 
04d20                 | ' ucompiledline(0)=alinemajor
04d20                 | ' ucompiledline(1)=alineminor
04d20                 | ' 
04d20                 | ' 
04d20                 | ' ' cont: 0: this is the first part of the line that will continue
04d20                 | ' ' 1 - this is the continuation of the line
04d20                 | ' ' 2 - this is the last continued line
04d20                 | ' ' 3 - this is the ome and only part
04d20                 | ' 
04d20                 | ' 
04d20                 | ' err=compile_immediate(cont+1) 
04d20                 | ' if err=0 then
04d20     6C 00 90 5D |  if_ne	jmp	#LR__0426
04d24                 | '   if cont=3 orelse cont=2 then 
04d24     03 22 0E F2 | 	cmp	local03, #3 wz
04d28     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04d2c     60 00 90 5D |  if_ne	jmp	#LR__0425
04d30                 | '     if alinemajor >lastline then 
04d30     41 00 00 FF 
04d34     4C E4 05 F1 | 	add	objptr, ##33356
04d38     F2 16 02 FB | 	rdlong	arg03, objptr
04d3c     41 00 00 FF 
04d40     4C E4 85 F1 | 	sub	objptr, ##33356
04d44     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04d48     0C 00 90 ED |  if_be	jmp	#LR__0421
04d4c     0F 13 02 F6 | 	mov	arg01, local01
04d50     F8 F4 BF FD | 	call	#_add_line_at_end
04d54     38 00 90 FD | 	jmp	#LR__0424
04d58                 | LR__0421
04d58     0F 13 02 F6 | 	mov	arg01, local01
04d5c     78 ED BF FD | 	call	#_deleteline
04d60                 | '       deleteline(alinemajor)  
04d60                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04d60     41 00 00 FF 
04d64     4C E4 05 F1 | 	add	objptr, ##33356
04d68     F2 16 02 FB | 	rdlong	arg03, objptr
04d6c     41 00 00 FF 
04d70     4C E4 85 F1 | 	sub	objptr, ##33356
04d74     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04d78     0C 00 90 ED |  if_be	jmp	#LR__0422
04d7c     0F 13 02 F6 | 	mov	arg01, local01
04d80     C8 F4 BF FD | 	call	#_add_line_at_end
04d84     08 00 90 FD | 	jmp	#LR__0423
04d88                 | LR__0422
04d88     0F 13 02 F6 | 	mov	arg01, local01
04d8c     74 F2 BF FD | 	call	#_insertline
04d90                 | LR__0423
04d90                 | LR__0424
04d90                 | LR__0425
04d90                 | LR__0426
04d90                 | ' return err
04d90     12 FB 01 F6 | 	mov	result1, local04
04d94                 | LR__0427
04d94     A7 F0 03 F6 | 	mov	ptra, fp
04d98     B2 00 A0 FD | 	call	#popregs_
04d9c                 | _compile_ret
04d9c     2D 00 64 FD | 	ret
04da0                 | 
04da0                 | ' 
04da0                 | ' ' ------------------ compile the line that is assigning to a variable
04da0                 | ' 
04da0                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04da0                 | _compile_assign
04da0     03 4A 05 F6 | 	mov	COUNT_, #3
04da4     A8 00 A0 FD | 	call	#pushregs_
04da8     09 1F 0A F6 | 	mov	local01, arg01 wz
04dac     0A 21 02 F6 | 	mov	local02, arg02
04db0     0B 23 02 F6 | 	mov	local03, arg03
04db4                 | ' 
04db4                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04db4                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04db4     0C 00 90 5D |  if_ne	jmp	#LR__0430
04db8     00 12 06 F6 | 	mov	arg01, #0
04dbc     28 FC BF FD | 	call	#_compile_immediate_assign
04dc0     94 00 90 FD | 	jmp	#LR__0436
04dc4                 | LR__0430
04dc4     3E 00 00 FF 
04dc8     40 E4 05 F1 | 	add	objptr, ##31808
04dcc     F2 1E 62 FC | 	wrlong	local01, objptr
04dd0     04 E4 05 F1 | 	add	objptr, #4
04dd4     F2 20 62 FC | 	wrlong	local02, objptr
04dd8     3E 00 00 FF 
04ddc     44 E4 85 F1 | 	sub	objptr, ##31812
04de0     11 13 02 F6 | 	mov	arg01, local03
04de4     01 12 06 F1 | 	add	arg01, #1
04de8     FC FB BF FD | 	call	#_compile_immediate_assign
04dec                 | ' 
04dec                 | ' ucompiledline(0)=alinemajor
04dec                 | ' ucompiledline(1)=alineminor
04dec                 | ' 
04dec                 | ' compile_immediate_assign(cont+1) 
04dec                 | ' 
04dec                 | ' if cont=3 orelse cont=2 then 
04dec     03 22 0E F2 | 	cmp	local03, #3 wz
04df0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04df4     60 00 90 5D |  if_ne	jmp	#LR__0435
04df8                 | '   if alinemajor >lastline then 
04df8     41 00 00 FF 
04dfc     4C E4 05 F1 | 	add	objptr, ##33356
04e00     F2 16 02 FB | 	rdlong	arg03, objptr
04e04     41 00 00 FF 
04e08     4C E4 85 F1 | 	sub	objptr, ##33356
04e0c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04e10     0C 00 90 ED |  if_be	jmp	#LR__0431
04e14     0F 13 02 F6 | 	mov	arg01, local01
04e18     30 F4 BF FD | 	call	#_add_line_at_end
04e1c     38 00 90 FD | 	jmp	#LR__0434
04e20                 | LR__0431
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     B0 EC BF FD | 	call	#_deleteline
04e28                 | '     deleteline(alinemajor)  
04e28                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
04e28     41 00 00 FF 
04e2c     4C E4 05 F1 | 	add	objptr, ##33356
04e30     F2 16 02 FB | 	rdlong	arg03, objptr
04e34     41 00 00 FF 
04e38     4C E4 85 F1 | 	sub	objptr, ##33356
04e3c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04e40     0C 00 90 ED |  if_be	jmp	#LR__0432
04e44     0F 13 02 F6 | 	mov	arg01, local01
04e48     00 F4 BF FD | 	call	#_add_line_at_end
04e4c     08 00 90 FD | 	jmp	#LR__0433
04e50                 | LR__0432
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     AC F1 BF FD | 	call	#_insertline
04e58                 | LR__0433
04e58                 | LR__0434
04e58                 | LR__0435
04e58                 | LR__0436
04e58     A7 F0 03 F6 | 	mov	ptra, fp
04e5c     B2 00 A0 FD | 	call	#popregs_
04e60                 | _compile_assign_ret
04e60     2D 00 64 FD | 	ret
04e64                 | 
04e64                 | ' 
04e64                 | ' sub compile_error(errno)
04e64                 | _compile_error
04e64     FF 04 06 F6 | 	mov	_var03, #255
04e68     01 07 02 F6 | 	mov	_var04, _var02
04e6c     02 09 02 F6 | 	mov	_var05, _var03
04e70     41 00 00 FF 
04e74     40 E4 05 F1 | 	add	objptr, ##33344
04e78     F2 0A 02 FB | 	rdlong	_var06, objptr
04e7c     05 0D 02 F6 | 	mov	_var07, _var06
04e80     01 0C 66 F0 | 	shl	_var07, #1
04e84     05 0D 02 F1 | 	add	_var07, _var06
04e88     02 0C 66 F0 | 	shl	_var07, #2
04e8c     03 00 00 FF 
04e90     00 E4 85 F1 | 	sub	objptr, ##1536
04e94     F2 0C 02 F1 | 	add	_var07, objptr
04e98     06 13 62 FC | 	wrlong	arg01, _var07
04e9c     03 00 00 FF 
04ea0     00 E4 05 F1 | 	add	objptr, ##1536
04ea4     F2 0C 02 FB | 	rdlong	_var07, objptr
04ea8     06 0B 02 F6 | 	mov	_var06, _var07
04eac     01 0A 66 F0 | 	shl	_var06, #1
04eb0     06 0B 02 F1 | 	add	_var06, _var07
04eb4     02 0A 66 F0 | 	shl	_var06, #2
04eb8     03 00 00 FF 
04ebc     00 E4 85 F1 | 	sub	objptr, ##1536
04ec0     F2 0A 02 F1 | 	add	_var06, objptr
04ec4     04 0A 06 F1 | 	add	_var06, #4
04ec8     05 07 62 FC | 	wrlong	_var04, _var06
04ecc     03 00 00 FF 
04ed0     00 E4 05 F1 | 	add	objptr, ##1536
04ed4     F2 0C 02 FB | 	rdlong	_var07, objptr
04ed8     06 0B 02 F6 | 	mov	_var06, _var07
04edc     01 0A 66 F0 | 	shl	_var06, #1
04ee0     06 0B 02 F1 | 	add	_var06, _var07
04ee4     02 0A 66 F0 | 	shl	_var06, #2
04ee8     03 00 00 FF 
04eec     00 E4 85 F1 | 	sub	objptr, ##1536
04ef0     F2 0A 02 F1 | 	add	_var06, objptr
04ef4     08 0A 06 F1 | 	add	_var06, #8
04ef8     05 09 62 FC | 	wrlong	_var05, _var06
04efc     03 00 00 FF 
04f00     00 E4 05 F1 | 	add	objptr, ##1536
04f04     F2 12 02 FB | 	rdlong	arg01, objptr
04f08     01 12 06 F1 | 	add	arg01, #1
04f0c     F2 12 62 FC | 	wrlong	arg01, objptr
04f10     41 00 00 FF 
04f14     40 E4 85 F1 | 	sub	objptr, ##33344
04f18                 | _compile_error_ret
04f18     2D 00 64 FD | 	ret
04f1c                 | 
04f1c                 | ' 
04f1c                 | ' 
04f1c                 | ' sub compile_unknown() 
04f1c                 | _compile_unknown
04f1c     FF 04 06 F6 | 	mov	_var03, #255
04f20     17 00 06 F6 | 	mov	_var01, #23
04f24     01 07 02 F6 | 	mov	_var04, _var02
04f28     02 01 02 F6 | 	mov	_var01, _var03
04f2c     41 00 00 FF 
04f30     40 E4 05 F1 | 	add	objptr, ##33344
04f34     F2 08 02 FB | 	rdlong	_var05, objptr
04f38     04 0B 02 F6 | 	mov	_var06, _var05
04f3c     01 0A 66 F0 | 	shl	_var06, #1
04f40     04 0B 02 F1 | 	add	_var06, _var05
04f44     02 0A 66 F0 | 	shl	_var06, #2
04f48     03 00 00 FF 
04f4c     00 E4 85 F1 | 	sub	objptr, ##1536
04f50     F2 0A 02 F1 | 	add	_var06, objptr
04f54     05 2F 68 FC | 	wrlong	#23, _var06
04f58     03 00 00 FF 
04f5c     00 E4 05 F1 | 	add	objptr, ##1536
04f60     F2 0A 02 FB | 	rdlong	_var06, objptr
04f64     05 09 02 F6 | 	mov	_var05, _var06
04f68     01 08 66 F0 | 	shl	_var05, #1
04f6c     05 09 02 F1 | 	add	_var05, _var06
04f70     02 08 66 F0 | 	shl	_var05, #2
04f74     03 00 00 FF 
04f78     00 E4 85 F1 | 	sub	objptr, ##1536
04f7c     F2 08 02 F1 | 	add	_var05, objptr
04f80     04 08 06 F1 | 	add	_var05, #4
04f84     04 07 62 FC | 	wrlong	_var04, _var05
04f88     03 00 00 FF 
04f8c     00 E4 05 F1 | 	add	objptr, ##1536
04f90     F2 0A 02 FB | 	rdlong	_var06, objptr
04f94     05 09 02 F6 | 	mov	_var05, _var06
04f98     01 08 66 F0 | 	shl	_var05, #1
04f9c     05 09 02 F1 | 	add	_var05, _var06
04fa0     02 08 66 F0 | 	shl	_var05, #2
04fa4     03 00 00 FF 
04fa8     00 E4 85 F1 | 	sub	objptr, ##1536
04fac     F2 08 02 F1 | 	add	_var05, objptr
04fb0     08 08 06 F1 | 	add	_var05, #8
04fb4     04 01 62 FC | 	wrlong	_var01, _var05
04fb8     03 00 00 FF 
04fbc     00 E4 05 F1 | 	add	objptr, ##1536
04fc0     F2 0A 02 FB | 	rdlong	_var06, objptr
04fc4     01 0A 06 F1 | 	add	_var06, #1
04fc8     F2 0A 62 FC | 	wrlong	_var06, objptr
04fcc     41 00 00 FF 
04fd0     40 E4 85 F1 | 	sub	objptr, ##33344
04fd4                 | _compile_unknown_ret
04fd4     2D 00 64 FD | 	ret
04fd8                 | 
04fd8                 | ' 
04fd8                 | ' function compile_converttoint() as integer
04fd8                 | _compile_converttoint
04fd8     06 4A 05 F6 | 	mov	COUNT_, #6
04fdc     A8 00 A0 FD | 	call	#pushregs_
04fe0     00 1E 06 F6 | 	mov	local01, #0
04fe4     B0 23 B0 FD | 	call	#_expr
04fe8     FD 24 0A F6 | 	mov	local04, result1 wz
04fec                 | ' err=0
04fec                 | ' t1.result.uresult=0
04fec                 | ' err=expr()
04fec                 | ' if err=0 then
04fec     C0 00 90 5D |  if_ne	jmp	#LR__0440
04ff0     16 22 06 F6 | 	mov	local03, #22
04ff4     0F 27 02 F6 | 	mov	local05, local01
04ff8     10 29 02 F6 | 	mov	local06, local02
04ffc     11 25 02 F6 | 	mov	local04, local03
05000     41 00 00 FF 
05004     40 E4 05 F1 | 	add	objptr, ##33344
05008     F2 1E 02 FB | 	rdlong	local01, objptr
0500c     0F FB 01 F6 | 	mov	result1, local01
05010     01 FA 65 F0 | 	shl	result1, #1
05014     0F FB 01 F1 | 	add	result1, local01
05018     02 FA 65 F0 | 	shl	result1, #2
0501c     03 00 00 FF 
05020     00 E4 85 F1 | 	sub	objptr, ##1536
05024     F2 FA 01 F1 | 	add	result1, objptr
05028     FD 26 62 FC | 	wrlong	local05, result1
0502c     03 00 00 FF 
05030     00 E4 05 F1 | 	add	objptr, ##1536
05034     F2 26 02 FB | 	rdlong	local05, objptr
05038     13 1F 02 F6 | 	mov	local01, local05
0503c     01 1E 66 F0 | 	shl	local01, #1
05040     13 1F 02 F1 | 	add	local01, local05
05044     02 1E 66 F0 | 	shl	local01, #2
05048     03 00 00 FF 
0504c     00 E4 85 F1 | 	sub	objptr, ##1536
05050     F2 1E 02 F1 | 	add	local01, objptr
05054     04 1E 06 F1 | 	add	local01, #4
05058     0F 29 62 FC | 	wrlong	local06, local01
0505c     03 00 00 FF 
05060     00 E4 05 F1 | 	add	objptr, ##1536
05064     F2 28 02 FB | 	rdlong	local06, objptr
05068     14 27 02 F6 | 	mov	local05, local06
0506c     01 26 66 F0 | 	shl	local05, #1
05070     14 27 02 F1 | 	add	local05, local06
05074     02 26 66 F0 | 	shl	local05, #2
05078     03 00 00 FF 
0507c     00 E4 85 F1 | 	sub	objptr, ##1536
05080     F2 26 02 F1 | 	add	local05, objptr
05084     08 26 06 F1 | 	add	local05, #8
05088     13 25 62 FC | 	wrlong	local04, local05
0508c     03 00 00 FF 
05090     00 E4 05 F1 | 	add	objptr, ##1536
05094     F2 26 02 FB | 	rdlong	local05, objptr
05098     01 26 06 F1 | 	add	local05, #1
0509c     F2 26 62 FC | 	wrlong	local05, objptr
050a0     41 00 00 FF 
050a4     40 E4 85 F1 | 	sub	objptr, ##33344
050a8                 | '   t1.result_type=fun_converttoint
050a8                 | '   compiledline(lineptr)=t1: lineptr+=1 
050a8                 | '   return 0
050a8     00 FA 05 F6 | 	mov	result1, #0
050ac     04 00 90 FD | 	jmp	#LR__0441
050b0                 | LR__0440
050b0                 | '   return err
050b0     12 FB 01 F6 | 	mov	result1, local04
050b4                 | LR__0441
050b4     A7 F0 03 F6 | 	mov	ptra, fp
050b8     B2 00 A0 FD | 	call	#popregs_
050bc                 | _compile_converttoint_ret
050bc     2D 00 64 FD | 	ret
050c0                 | 
050c0                 | ' 
050c0                 | ' 
050c0                 | ' function compile_fun_2p() as ulong
050c0                 | _compile_fun_2p
050c0     01 4A 05 F6 | 	mov	COUNT_, #1
050c4     A8 00 A0 FD | 	call	#pushregs_
050c8     CC 22 B0 FD | 	call	#_expr
050cc                 | ' 
050cc                 | ' expr()
050cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
050cc     2E 00 00 FF 
050d0     08 E4 05 F1 | 	add	objptr, ##23560
050d4     F2 1E 02 FB | 	rdlong	local01, objptr
050d8     03 1E 66 F0 | 	shl	local01, #3
050dc     02 00 00 FF 
050e0     38 E4 85 F1 | 	sub	objptr, ##1080
050e4     F2 1E 02 F1 | 	add	local01, objptr
050e8     04 1E 06 F1 | 	add	local01, #4
050ec     0F 1F 02 FB | 	rdlong	local01, local01
050f0     11 1E 0E F2 | 	cmp	local01, #17 wz
050f4     2B 00 00 FF 
050f8     D0 E5 85 F1 | 	sub	objptr, ##22480
050fc     15 FA 05 56 |  if_ne	mov	result1, #21
05100     24 00 90 5D |  if_ne	jmp	#LR__0450
05104     2E 00 00 FF 
05108     08 E4 05 F1 | 	add	objptr, ##23560
0510c     F2 1E 02 FB | 	rdlong	local01, objptr
05110     01 1E 06 F1 | 	add	local01, #1
05114     F2 1E 62 FC | 	wrlong	local01, objptr
05118     2E 00 00 FF 
0511c     08 E4 85 F1 | 	sub	objptr, ##23560
05120     74 22 B0 FD | 	call	#_expr
05124     00 FA 05 F6 | 	mov	result1, #0
05128                 | LR__0450
05128     A7 F0 03 F6 | 	mov	ptra, fp
0512c     B2 00 A0 FD | 	call	#popregs_
05130                 | _compile_fun_2p_ret
05130     2D 00 64 FD | 	ret
05134                 | 
05134                 | ' 
05134                 | ' function compile_fun_3p() as ulong
05134                 | _compile_fun_3p
05134     01 4A 05 F6 | 	mov	COUNT_, #1
05138     A8 00 A0 FD | 	call	#pushregs_
0513c     58 22 B0 FD | 	call	#_expr
05140                 | ' 
05140                 | ' expr()
05140                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05140     2E 00 00 FF 
05144     08 E4 05 F1 | 	add	objptr, ##23560
05148     F2 1E 02 FB | 	rdlong	local01, objptr
0514c     03 1E 66 F0 | 	shl	local01, #3
05150     02 00 00 FF 
05154     38 E4 85 F1 | 	sub	objptr, ##1080
05158     F2 1E 02 F1 | 	add	local01, objptr
0515c     04 1E 06 F1 | 	add	local01, #4
05160     0F 1F 02 FB | 	rdlong	local01, local01
05164     11 1E 0E F2 | 	cmp	local01, #17 wz
05168     2B 00 00 FF 
0516c     D0 E5 85 F1 | 	sub	objptr, ##22480
05170     15 FA 05 56 |  if_ne	mov	result1, #21
05174     7C 00 90 5D |  if_ne	jmp	#LR__0460
05178     2E 00 00 FF 
0517c     08 E4 05 F1 | 	add	objptr, ##23560
05180     F2 1E 02 FB | 	rdlong	local01, objptr
05184     01 1E 06 F1 | 	add	local01, #1
05188     F2 1E 62 FC | 	wrlong	local01, objptr
0518c     2E 00 00 FF 
05190     08 E4 85 F1 | 	sub	objptr, ##23560
05194     00 22 B0 FD | 	call	#_expr
05198                 | ' expr()
05198                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05198     2E 00 00 FF 
0519c     08 E4 05 F1 | 	add	objptr, ##23560
051a0     F2 1E 02 FB | 	rdlong	local01, objptr
051a4     03 1E 66 F0 | 	shl	local01, #3
051a8     02 00 00 FF 
051ac     38 E4 85 F1 | 	sub	objptr, ##1080
051b0     F2 1E 02 F1 | 	add	local01, objptr
051b4     04 1E 06 F1 | 	add	local01, #4
051b8     0F 1F 02 FB | 	rdlong	local01, local01
051bc     11 1E 0E F2 | 	cmp	local01, #17 wz
051c0     2B 00 00 FF 
051c4     D0 E5 85 F1 | 	sub	objptr, ##22480
051c8     15 FA 05 56 |  if_ne	mov	result1, #21
051cc     24 00 90 5D |  if_ne	jmp	#LR__0460
051d0     2E 00 00 FF 
051d4     08 E4 05 F1 | 	add	objptr, ##23560
051d8     F2 1E 02 FB | 	rdlong	local01, objptr
051dc     01 1E 06 F1 | 	add	local01, #1
051e0     F2 1E 62 FC | 	wrlong	local01, objptr
051e4     2E 00 00 FF 
051e8     08 E4 85 F1 | 	sub	objptr, ##23560
051ec     A8 21 B0 FD | 	call	#_expr
051f0     00 FA 05 F6 | 	mov	result1, #0
051f4                 | LR__0460
051f4     A7 F0 03 F6 | 	mov	ptra, fp
051f8     B2 00 A0 FD | 	call	#popregs_
051fc                 | _compile_fun_3p_ret
051fc     2D 00 64 FD | 	ret
05200                 | 
05200                 | ' 
05200                 | ' function compile_fun_4p() as ulong
05200                 | _compile_fun_4p
05200     01 4A 05 F6 | 	mov	COUNT_, #1
05204     A8 00 A0 FD | 	call	#pushregs_
05208     8C 21 B0 FD | 	call	#_expr
0520c                 | ' 
0520c                 | ' expr()
0520c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0520c     2E 00 00 FF 
05210     08 E4 05 F1 | 	add	objptr, ##23560
05214     F2 1E 02 FB | 	rdlong	local01, objptr
05218     03 1E 66 F0 | 	shl	local01, #3
0521c     02 00 00 FF 
05220     38 E4 85 F1 | 	sub	objptr, ##1080
05224     F2 1E 02 F1 | 	add	local01, objptr
05228     04 1E 06 F1 | 	add	local01, #4
0522c     0F 1F 02 FB | 	rdlong	local01, local01
05230     11 1E 0E F2 | 	cmp	local01, #17 wz
05234     2B 00 00 FF 
05238     D0 E5 85 F1 | 	sub	objptr, ##22480
0523c     15 FA 05 56 |  if_ne	mov	result1, #21
05240     D4 00 90 5D |  if_ne	jmp	#LR__0470
05244     2E 00 00 FF 
05248     08 E4 05 F1 | 	add	objptr, ##23560
0524c     F2 1E 02 FB | 	rdlong	local01, objptr
05250     01 1E 06 F1 | 	add	local01, #1
05254     F2 1E 62 FC | 	wrlong	local01, objptr
05258     2E 00 00 FF 
0525c     08 E4 85 F1 | 	sub	objptr, ##23560
05260     34 21 B0 FD | 	call	#_expr
05264                 | ' expr()
05264                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05264     2E 00 00 FF 
05268     08 E4 05 F1 | 	add	objptr, ##23560
0526c     F2 1E 02 FB | 	rdlong	local01, objptr
05270     03 1E 66 F0 | 	shl	local01, #3
05274     02 00 00 FF 
05278     38 E4 85 F1 | 	sub	objptr, ##1080
0527c     F2 1E 02 F1 | 	add	local01, objptr
05280     04 1E 06 F1 | 	add	local01, #4
05284     0F 1F 02 FB | 	rdlong	local01, local01
05288     11 1E 0E F2 | 	cmp	local01, #17 wz
0528c     2B 00 00 FF 
05290     D0 E5 85 F1 | 	sub	objptr, ##22480
05294     15 FA 05 56 |  if_ne	mov	result1, #21
05298     7C 00 90 5D |  if_ne	jmp	#LR__0470
0529c     2E 00 00 FF 
052a0     08 E4 05 F1 | 	add	objptr, ##23560
052a4     F2 1E 02 FB | 	rdlong	local01, objptr
052a8     01 1E 06 F1 | 	add	local01, #1
052ac     F2 1E 62 FC | 	wrlong	local01, objptr
052b0     2E 00 00 FF 
052b4     08 E4 85 F1 | 	sub	objptr, ##23560
052b8     DC 20 B0 FD | 	call	#_expr
052bc                 | ' expr()
052bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052bc     2E 00 00 FF 
052c0     08 E4 05 F1 | 	add	objptr, ##23560
052c4     F2 1E 02 FB | 	rdlong	local01, objptr
052c8     03 1E 66 F0 | 	shl	local01, #3
052cc     02 00 00 FF 
052d0     38 E4 85 F1 | 	sub	objptr, ##1080
052d4     F2 1E 02 F1 | 	add	local01, objptr
052d8     04 1E 06 F1 | 	add	local01, #4
052dc     0F 1F 02 FB | 	rdlong	local01, local01
052e0     11 1E 0E F2 | 	cmp	local01, #17 wz
052e4     2B 00 00 FF 
052e8     D0 E5 85 F1 | 	sub	objptr, ##22480
052ec     15 FA 05 56 |  if_ne	mov	result1, #21
052f0     24 00 90 5D |  if_ne	jmp	#LR__0470
052f4     2E 00 00 FF 
052f8     08 E4 05 F1 | 	add	objptr, ##23560
052fc     F2 1E 02 FB | 	rdlong	local01, objptr
05300     01 1E 06 F1 | 	add	local01, #1
05304     F2 1E 62 FC | 	wrlong	local01, objptr
05308     2E 00 00 FF 
0530c     08 E4 85 F1 | 	sub	objptr, ##23560
05310     84 20 B0 FD | 	call	#_expr
05314     00 FA 05 F6 | 	mov	result1, #0
05318                 | LR__0470
05318     A7 F0 03 F6 | 	mov	ptra, fp
0531c     B2 00 A0 FD | 	call	#popregs_
05320                 | _compile_fun_4p_ret
05320     2D 00 64 FD | 	ret
05324                 | 
05324                 | ' 
05324                 | ' 
05324                 | ' function compile_fun_5p() as ulong
05324                 | _compile_fun_5p
05324     01 4A 05 F6 | 	mov	COUNT_, #1
05328     A8 00 A0 FD | 	call	#pushregs_
0532c     68 20 B0 FD | 	call	#_expr
05330                 | ' 
05330                 | ' expr()
05330                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05330     2E 00 00 FF 
05334     08 E4 05 F1 | 	add	objptr, ##23560
05338     F2 1E 02 FB | 	rdlong	local01, objptr
0533c     03 1E 66 F0 | 	shl	local01, #3
05340     02 00 00 FF 
05344     38 E4 85 F1 | 	sub	objptr, ##1080
05348     F2 1E 02 F1 | 	add	local01, objptr
0534c     04 1E 06 F1 | 	add	local01, #4
05350     0F 1F 02 FB | 	rdlong	local01, local01
05354     11 1E 0E F2 | 	cmp	local01, #17 wz
05358     2B 00 00 FF 
0535c     D0 E5 85 F1 | 	sub	objptr, ##22480
05360     15 FA 05 56 |  if_ne	mov	result1, #21
05364     2C 01 90 5D |  if_ne	jmp	#LR__0480
05368     2E 00 00 FF 
0536c     08 E4 05 F1 | 	add	objptr, ##23560
05370     F2 1E 02 FB | 	rdlong	local01, objptr
05374     01 1E 06 F1 | 	add	local01, #1
05378     F2 1E 62 FC | 	wrlong	local01, objptr
0537c     2E 00 00 FF 
05380     08 E4 85 F1 | 	sub	objptr, ##23560
05384     10 20 B0 FD | 	call	#_expr
05388                 | ' expr()
05388                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05388     2E 00 00 FF 
0538c     08 E4 05 F1 | 	add	objptr, ##23560
05390     F2 1E 02 FB | 	rdlong	local01, objptr
05394     03 1E 66 F0 | 	shl	local01, #3
05398     02 00 00 FF 
0539c     38 E4 85 F1 | 	sub	objptr, ##1080
053a0     F2 1E 02 F1 | 	add	local01, objptr
053a4     04 1E 06 F1 | 	add	local01, #4
053a8     0F 1F 02 FB | 	rdlong	local01, local01
053ac     11 1E 0E F2 | 	cmp	local01, #17 wz
053b0     2B 00 00 FF 
053b4     D0 E5 85 F1 | 	sub	objptr, ##22480
053b8     15 FA 05 56 |  if_ne	mov	result1, #21
053bc     D4 00 90 5D |  if_ne	jmp	#LR__0480
053c0     2E 00 00 FF 
053c4     08 E4 05 F1 | 	add	objptr, ##23560
053c8     F2 1E 02 FB | 	rdlong	local01, objptr
053cc     01 1E 06 F1 | 	add	local01, #1
053d0     F2 1E 62 FC | 	wrlong	local01, objptr
053d4     2E 00 00 FF 
053d8     08 E4 85 F1 | 	sub	objptr, ##23560
053dc     B8 1F B0 FD | 	call	#_expr
053e0                 | ' expr()
053e0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
053e0     2E 00 00 FF 
053e4     08 E4 05 F1 | 	add	objptr, ##23560
053e8     F2 1E 02 FB | 	rdlong	local01, objptr
053ec     03 1E 66 F0 | 	shl	local01, #3
053f0     02 00 00 FF 
053f4     38 E4 85 F1 | 	sub	objptr, ##1080
053f8     F2 1E 02 F1 | 	add	local01, objptr
053fc     04 1E 06 F1 | 	add	local01, #4
05400     0F 1F 02 FB | 	rdlong	local01, local01
05404     11 1E 0E F2 | 	cmp	local01, #17 wz
05408     2B 00 00 FF 
0540c     D0 E5 85 F1 | 	sub	objptr, ##22480
05410     15 FA 05 56 |  if_ne	mov	result1, #21
05414     7C 00 90 5D |  if_ne	jmp	#LR__0480
05418     2E 00 00 FF 
0541c     08 E4 05 F1 | 	add	objptr, ##23560
05420     F2 1E 02 FB | 	rdlong	local01, objptr
05424     01 1E 06 F1 | 	add	local01, #1
05428     F2 1E 62 FC | 	wrlong	local01, objptr
0542c     2E 00 00 FF 
05430     08 E4 85 F1 | 	sub	objptr, ##23560
05434     60 1F B0 FD | 	call	#_expr
05438                 | ' expr()
05438                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05438     2E 00 00 FF 
0543c     08 E4 05 F1 | 	add	objptr, ##23560
05440     F2 1E 02 FB | 	rdlong	local01, objptr
05444     03 1E 66 F0 | 	shl	local01, #3
05448     02 00 00 FF 
0544c     38 E4 85 F1 | 	sub	objptr, ##1080
05450     F2 1E 02 F1 | 	add	local01, objptr
05454     04 1E 06 F1 | 	add	local01, #4
05458     0F 1F 02 FB | 	rdlong	local01, local01
0545c     11 1E 0E F2 | 	cmp	local01, #17 wz
05460     2B 00 00 FF 
05464     D0 E5 85 F1 | 	sub	objptr, ##22480
05468     15 FA 05 56 |  if_ne	mov	result1, #21
0546c     24 00 90 5D |  if_ne	jmp	#LR__0480
05470     2E 00 00 FF 
05474     08 E4 05 F1 | 	add	objptr, ##23560
05478     F2 1E 02 FB | 	rdlong	local01, objptr
0547c     01 1E 06 F1 | 	add	local01, #1
05480     F2 1E 62 FC | 	wrlong	local01, objptr
05484     2E 00 00 FF 
05488     08 E4 85 F1 | 	sub	objptr, ##23560
0548c     08 1F B0 FD | 	call	#_expr
05490     00 FA 05 F6 | 	mov	result1, #0
05494                 | LR__0480
05494     A7 F0 03 F6 | 	mov	ptra, fp
05498     B2 00 A0 FD | 	call	#popregs_
0549c                 | _compile_fun_5p_ret
0549c     2D 00 64 FD | 	ret
054a0                 | 
054a0                 | ' 
054a0                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
054a0                 | _compile_fun_varp
054a0     02 4A 05 F6 | 	mov	COUNT_, #2
054a4     A8 00 A0 FD | 	call	#pushregs_
054a8     00 1E 06 F6 | 	mov	local01, #0
054ac                 | ' i=0
054ac                 | ' if lparts(ct).token<>token_end then
054ac     2E 00 00 FF 
054b0     08 E4 05 F1 | 	add	objptr, ##23560
054b4     F2 20 02 FB | 	rdlong	local02, objptr
054b8     03 20 66 F0 | 	shl	local02, #3
054bc     02 00 00 FF 
054c0     38 E4 85 F1 | 	sub	objptr, ##1080
054c4     F2 20 02 F1 | 	add	local02, objptr
054c8     04 20 06 F1 | 	add	local02, #4
054cc     10 21 02 FB | 	rdlong	local02, local02
054d0     FE 21 0E F2 | 	cmp	local02, #510 wz
054d4     2B 00 00 FF 
054d8     D0 E5 85 F1 | 	sub	objptr, ##22480
054dc     5C 00 90 AD |  if_e	jmp	#LR__0492
054e0                 | '   do
054e0                 | LR__0490
054e0     B4 1E B0 FD | 	call	#_expr
054e4     01 1E 06 F1 | 	add	local01, #1
054e8                 | '   expr()
054e8                 | '    i+=1
054e8                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
054e8     2E 00 00 FF 
054ec     08 E4 05 F1 | 	add	objptr, ##23560
054f0     F2 20 02 FB | 	rdlong	local02, objptr
054f4     03 20 66 F0 | 	shl	local02, #3
054f8     02 00 00 FF 
054fc     38 E4 85 F1 | 	sub	objptr, ##1080
05500     F2 20 02 F1 | 	add	local02, objptr
05504     04 20 06 F1 | 	add	local02, #4
05508     10 21 02 FB | 	rdlong	local02, local02
0550c     11 20 0E F2 | 	cmp	local02, #17 wz
05510     2B 00 00 FF 
05514     D0 E5 85 F1 | 	sub	objptr, ##22480
05518     20 00 90 5D |  if_ne	jmp	#LR__0491
0551c     2E 00 00 FF 
05520     08 E4 05 F1 | 	add	objptr, ##23560
05524     F2 20 02 FB | 	rdlong	local02, objptr
05528     01 20 06 F1 | 	add	local02, #1
0552c     F2 20 62 FC | 	wrlong	local02, objptr
05530     2E 00 00 FF 
05534     08 E4 85 F1 | 	sub	objptr, ##23560
05538     A4 FF 9F FD | 	jmp	#LR__0490
0553c                 | LR__0491
0553c                 | LR__0492
0553c                 | ' return i
0553c     0F FB 01 F6 | 	mov	result1, local01
05540     A7 F0 03 F6 | 	mov	ptra, fp
05544     B2 00 A0 FD | 	call	#popregs_
05548                 | _compile_fun_varp_ret
05548     2D 00 64 FD | 	ret
0554c                 | 
0554c                 | ' 
0554c                 | ' 
0554c                 | ' function compile_int_fun_2p() as ulong
0554c                 | _compile_int_fun_2p
0554c     01 4A 05 F6 | 	mov	COUNT_, #1
05550     A8 00 A0 FD | 	call	#pushregs_
05554     80 FA BF FD | 	call	#_compile_converttoint
05558     FD 1E 02 F6 | 	mov	local01, result1
0555c                 | ' err=compile_converttoint() : if err>0 then return err
0555c     01 1E 56 F2 | 	cmps	local01, #1 wc
05560     0F FB 01 36 |  if_ae	mov	result1, local01
05564     58 00 90 3D |  if_ae	jmp	#LR__0500
05568                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05568     2E 00 00 FF 
0556c     08 E4 05 F1 | 	add	objptr, ##23560
05570     F2 1E 02 FB | 	rdlong	local01, objptr
05574     03 1E 66 F0 | 	shl	local01, #3
05578     02 00 00 FF 
0557c     38 E4 85 F1 | 	sub	objptr, ##1080
05580     F2 1E 02 F1 | 	add	local01, objptr
05584     04 1E 06 F1 | 	add	local01, #4
05588     0F 1F 02 FB | 	rdlong	local01, local01
0558c     11 1E 0E F2 | 	cmp	local01, #17 wz
05590     2B 00 00 FF 
05594     D0 E5 85 F1 | 	sub	objptr, ##22480
05598     15 FA 05 56 |  if_ne	mov	result1, #21
0559c     20 00 90 5D |  if_ne	jmp	#LR__0500
055a0     2E 00 00 FF 
055a4     08 E4 05 F1 | 	add	objptr, ##23560
055a8     F2 1E 02 FB | 	rdlong	local01, objptr
055ac     01 1E 06 F1 | 	add	local01, #1
055b0     F2 1E 62 FC | 	wrlong	local01, objptr
055b4     2E 00 00 FF 
055b8     08 E4 85 F1 | 	sub	objptr, ##23560
055bc     18 FA BF FD | 	call	#_compile_converttoint
055c0                 | ' err=compile_converttoint() 
055c0                 | ' return err
055c0                 | LR__0500
055c0     A7 F0 03 F6 | 	mov	ptra, fp
055c4     B2 00 A0 FD | 	call	#popregs_
055c8                 | _compile_int_fun_2p_ret
055c8     2D 00 64 FD | 	ret
055cc                 | 
055cc                 | ' 
055cc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
055cc                 | _compile_print
055cc     0B 4A 05 F6 | 	mov	COUNT_, #11
055d0     A8 00 A0 FD | 	call	#pushregs_
055d4     00 1E 06 F6 | 	mov	local01, #0
055d8     1D 22 06 F6 | 	mov	local03, #29
055dc                 | ' t1.result.uresult=0 : t1.result_type=result_uint
055dc                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
055dc     2E 00 00 FF 
055e0     08 E4 05 F1 | 	add	objptr, ##23560
055e4     F2 24 02 FB | 	rdlong	local04, objptr
055e8     03 24 66 F0 | 	shl	local04, #3
055ec     02 00 00 FF 
055f0     38 E4 85 F1 | 	sub	objptr, ##1080
055f4     F2 24 02 F1 | 	add	local04, objptr
055f8     04 24 06 F1 | 	add	local04, #4
055fc     12 25 02 FB | 	rdlong	local04, local04
05600     FE 25 0E F2 | 	cmp	local04, #510 wz
05604     2B 00 00 FF 
05608     D0 E5 85 F1 | 	sub	objptr, ##22480
0560c     68 01 90 5D |  if_ne	jmp	#LR__0510
05610     20 22 06 F6 | 	mov	local03, #32
05614     0F 27 02 F6 | 	mov	local05, local01
05618     10 29 02 F6 | 	mov	local06, local02
0561c     11 2B 02 F6 | 	mov	local07, local03
05620     41 00 00 FF 
05624     40 E4 05 F1 | 	add	objptr, ##33344
05628     F2 2C 02 FB | 	rdlong	local08, objptr
0562c     16 2F 02 F6 | 	mov	local09, local08
05630     01 2E 66 F0 | 	shl	local09, #1
05634     16 2F 02 F1 | 	add	local09, local08
05638     02 2E 66 F0 | 	shl	local09, #2
0563c     03 00 00 FF 
05640     00 E4 85 F1 | 	sub	objptr, ##1536
05644     F2 2E 02 F1 | 	add	local09, objptr
05648     17 27 62 FC | 	wrlong	local05, local09
0564c     03 00 00 FF 
05650     00 E4 05 F1 | 	add	objptr, ##1536
05654     F2 26 02 FB | 	rdlong	local05, objptr
05658     13 31 02 F6 | 	mov	local10, local05
0565c     01 30 66 F0 | 	shl	local10, #1
05660     13 31 02 F1 | 	add	local10, local05
05664     02 30 66 F0 | 	shl	local10, #2
05668     03 00 00 FF 
0566c     00 E4 85 F1 | 	sub	objptr, ##1536
05670     F2 30 02 F1 | 	add	local10, objptr
05674     04 30 06 F1 | 	add	local10, #4
05678     18 29 62 FC | 	wrlong	local06, local10
0567c     03 00 00 FF 
05680     00 E4 05 F1 | 	add	objptr, ##1536
05684     F2 26 02 FB | 	rdlong	local05, objptr
05688     13 33 02 F6 | 	mov	local11, local05
0568c     01 32 66 F0 | 	shl	local11, #1
05690     13 33 02 F1 | 	add	local11, local05
05694     02 32 66 F0 | 	shl	local11, #2
05698     03 00 00 FF 
0569c     00 E4 85 F1 | 	sub	objptr, ##1536
056a0     F2 32 02 F1 | 	add	local11, objptr
056a4     08 32 06 F1 | 	add	local11, #8
056a8     19 2B 62 FC | 	wrlong	local07, local11
056ac     03 00 00 FF 
056b0     00 E4 05 F1 | 	add	objptr, ##1536
056b4     F2 26 02 FB | 	rdlong	local05, objptr
056b8     01 26 06 F1 | 	add	local05, #1
056bc     F2 26 62 FC | 	wrlong	local05, objptr
056c0     44 22 06 F6 | 	mov	local03, #68
056c4     0F 27 02 F6 | 	mov	local05, local01
056c8     10 29 02 F6 | 	mov	local06, local02
056cc     11 2B 02 F6 | 	mov	local07, local03
056d0     F2 2C 02 FB | 	rdlong	local08, objptr
056d4     16 2F 02 F6 | 	mov	local09, local08
056d8     01 2E 66 F0 | 	shl	local09, #1
056dc     16 2F 02 F1 | 	add	local09, local08
056e0     02 2E 66 F0 | 	shl	local09, #2
056e4     03 00 00 FF 
056e8     00 E4 85 F1 | 	sub	objptr, ##1536
056ec     F2 2E 02 F1 | 	add	local09, objptr
056f0     17 27 62 FC | 	wrlong	local05, local09
056f4     03 00 00 FF 
056f8     00 E4 05 F1 | 	add	objptr, ##1536
056fc     F2 32 02 FB | 	rdlong	local11, objptr
05700     19 31 02 F6 | 	mov	local10, local11
05704     01 30 66 F0 | 	shl	local10, #1
05708     19 31 02 F1 | 	add	local10, local11
0570c     02 30 66 F0 | 	shl	local10, #2
05710     03 00 00 FF 
05714     00 E4 85 F1 | 	sub	objptr, ##1536
05718     F2 30 02 F1 | 	add	local10, objptr
0571c     04 30 06 F1 | 	add	local10, #4
05720     18 29 62 FC | 	wrlong	local06, local10
05724     03 00 00 FF 
05728     00 E4 05 F1 | 	add	objptr, ##1536
0572c     F2 30 02 FB | 	rdlong	local10, objptr
05730     18 33 02 F6 | 	mov	local11, local10
05734     01 32 66 F0 | 	shl	local11, #1
05738     18 33 02 F1 | 	add	local11, local10
0573c     02 32 66 F0 | 	shl	local11, #2
05740     03 00 00 FF 
05744     00 E4 85 F1 | 	sub	objptr, ##1536
05748     F2 32 02 F1 | 	add	local11, objptr
0574c     08 32 06 F1 | 	add	local11, #8
05750     19 2B 62 FC | 	wrlong	local07, local11
05754     03 00 00 FF 
05758     00 E4 05 F1 | 	add	objptr, ##1536
0575c     F2 26 02 FB | 	rdlong	local05, objptr
05760     01 26 06 F1 | 	add	local05, #1
05764     F2 26 62 FC | 	wrlong	local05, objptr
05768     41 00 00 FF 
0576c     40 E4 85 F1 | 	sub	objptr, ##33344
05770     00 FA 05 F6 | 	mov	result1, #0
05774     20 05 90 FD | 	jmp	#LR__0517
05778                 | LR__0510
05778                 | ' do
05778                 | LR__0511
05778     1C 1C B0 FD | 	call	#_expr
0577c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0577c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0577c     2E 00 00 FF 
05780     08 E4 05 F1 | 	add	objptr, ##23560
05784     F2 24 02 FB | 	rdlong	local04, objptr
05788     03 24 66 F0 | 	shl	local04, #3
0578c     02 00 00 FF 
05790     38 E4 85 F1 | 	sub	objptr, ##1080
05794     F2 24 02 F1 | 	add	local04, objptr
05798     04 24 06 F1 | 	add	local04, #4
0579c     12 2D 02 FB | 	rdlong	local08, local04
057a0     11 2C 0E F2 | 	cmp	local08, #17 wz
057a4     2B 00 00 FF 
057a8     D0 E5 85 F1 | 	sub	objptr, ##22480
057ac     60 01 90 5D |  if_ne	jmp	#LR__0512
057b0     21 22 06 F6 | 	mov	local03, #33
057b4     0F 27 02 F6 | 	mov	local05, local01
057b8     10 29 02 F6 | 	mov	local06, local02
057bc     11 2B 02 F6 | 	mov	local07, local03
057c0     41 00 00 FF 
057c4     40 E4 05 F1 | 	add	objptr, ##33344
057c8     F2 2C 02 FB | 	rdlong	local08, objptr
057cc     16 2F 02 F6 | 	mov	local09, local08
057d0     01 2E 66 F0 | 	shl	local09, #1
057d4     16 2F 02 F1 | 	add	local09, local08
057d8     02 2E 66 F0 | 	shl	local09, #2
057dc     03 00 00 FF 
057e0     00 E4 85 F1 | 	sub	objptr, ##1536
057e4     F2 2E 02 F1 | 	add	local09, objptr
057e8     17 27 62 FC | 	wrlong	local05, local09
057ec     03 00 00 FF 
057f0     00 E4 05 F1 | 	add	objptr, ##1536
057f4     F2 32 02 FB | 	rdlong	local11, objptr
057f8     19 31 02 F6 | 	mov	local10, local11
057fc     01 30 66 F0 | 	shl	local10, #1
05800     19 31 02 F1 | 	add	local10, local11
05804     02 30 66 F0 | 	shl	local10, #2
05808     03 00 00 FF 
0580c     00 E4 85 F1 | 	sub	objptr, ##1536
05810     F2 30 02 F1 | 	add	local10, objptr
05814     04 30 06 F1 | 	add	local10, #4
05818     18 29 62 FC | 	wrlong	local06, local10
0581c     03 00 00 FF 
05820     00 E4 05 F1 | 	add	objptr, ##1536
05824     F2 26 02 FB | 	rdlong	local05, objptr
05828     13 33 02 F6 | 	mov	local11, local05
0582c     01 32 66 F0 | 	shl	local11, #1
05830     13 33 02 F1 | 	add	local11, local05
05834     02 32 66 F0 | 	shl	local11, #2
05838     03 00 00 FF 
0583c     00 E4 85 F1 | 	sub	objptr, ##1536
05840     F2 32 02 F1 | 	add	local11, objptr
05844     08 32 06 F1 | 	add	local11, #8
05848     19 2B 62 FC | 	wrlong	local07, local11
0584c     03 00 00 FF 
05850     00 E4 05 F1 | 	add	objptr, ##1536
05854     F2 26 02 FB | 	rdlong	local05, objptr
05858     01 26 06 F1 | 	add	local05, #1
0585c     F2 26 62 FC | 	wrlong	local05, objptr
05860     44 22 06 F6 | 	mov	local03, #68
05864     0F 27 02 F6 | 	mov	local05, local01
05868     10 29 02 F6 | 	mov	local06, local02
0586c     11 2B 02 F6 | 	mov	local07, local03
05870     F2 2C 02 FB | 	rdlong	local08, objptr
05874     16 2F 02 F6 | 	mov	local09, local08
05878     01 2E 66 F0 | 	shl	local09, #1
0587c     16 2F 02 F1 | 	add	local09, local08
05880     02 2E 66 F0 | 	shl	local09, #2
05884     03 00 00 FF 
05888     00 E4 85 F1 | 	sub	objptr, ##1536
0588c     F2 2E 02 F1 | 	add	local09, objptr
05890     17 27 62 FC | 	wrlong	local05, local09
05894     03 00 00 FF 
05898     00 E4 05 F1 | 	add	objptr, ##1536
0589c     F2 32 02 FB | 	rdlong	local11, objptr
058a0     19 31 02 F6 | 	mov	local10, local11
058a4     01 30 66 F0 | 	shl	local10, #1
058a8     19 31 02 F1 | 	add	local10, local11
058ac     02 30 66 F0 | 	shl	local10, #2
058b0     03 00 00 FF 
058b4     00 E4 85 F1 | 	sub	objptr, ##1536
058b8     F2 30 02 F1 | 	add	local10, objptr
058bc     04 30 06 F1 | 	add	local10, #4
058c0     18 29 62 FC | 	wrlong	local06, local10
058c4     03 00 00 FF 
058c8     00 E4 05 F1 | 	add	objptr, ##1536
058cc     F2 30 02 FB | 	rdlong	local10, objptr
058d0     18 33 02 F6 | 	mov	local11, local10
058d4     01 32 66 F0 | 	shl	local11, #1
058d8     18 33 02 F1 | 	add	local11, local10
058dc     02 32 66 F0 | 	shl	local11, #2
058e0     03 00 00 FF 
058e4     00 E4 85 F1 | 	sub	objptr, ##1536
058e8     F2 32 02 F1 | 	add	local11, objptr
058ec     08 32 06 F1 | 	add	local11, #8
058f0     19 2B 62 FC | 	wrlong	local07, local11
058f4     03 00 00 FF 
058f8     00 E4 05 F1 | 	add	objptr, ##1536
058fc     F2 26 02 FB | 	rdlong	local05, objptr
05900     01 26 06 F1 | 	add	local05, #1
05904     F2 26 62 FC | 	wrlong	local05, objptr
05908     41 00 00 FF 
0590c     40 E4 85 F1 | 	sub	objptr, ##33344
05910                 | LR__0512
05910                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05910     2E 00 00 FF 
05914     08 E4 05 F1 | 	add	objptr, ##23560
05918     F2 24 02 FB | 	rdlong	local04, objptr
0591c     03 24 66 F0 | 	shl	local04, #3
05920     02 00 00 FF 
05924     38 E4 85 F1 | 	sub	objptr, ##1080
05928     F2 24 02 F1 | 	add	local04, objptr
0592c     04 24 06 F1 | 	add	local04, #4
05930     12 2D 02 FB | 	rdlong	local08, local04
05934     12 2C 0E F2 | 	cmp	local08, #18 wz
05938     2B 00 00 FF 
0593c     D0 E5 85 F1 | 	sub	objptr, ##22480
05940     60 01 90 5D |  if_ne	jmp	#LR__0513
05944     22 22 06 F6 | 	mov	local03, #34
05948     0F 27 02 F6 | 	mov	local05, local01
0594c     10 29 02 F6 | 	mov	local06, local02
05950     11 2B 02 F6 | 	mov	local07, local03
05954     41 00 00 FF 
05958     40 E4 05 F1 | 	add	objptr, ##33344
0595c     F2 2C 02 FB | 	rdlong	local08, objptr
05960     16 2F 02 F6 | 	mov	local09, local08
05964     01 2E 66 F0 | 	shl	local09, #1
05968     16 2F 02 F1 | 	add	local09, local08
0596c     02 2E 66 F0 | 	shl	local09, #2
05970     03 00 00 FF 
05974     00 E4 85 F1 | 	sub	objptr, ##1536
05978     F2 2E 02 F1 | 	add	local09, objptr
0597c     17 27 62 FC | 	wrlong	local05, local09
05980     03 00 00 FF 
05984     00 E4 05 F1 | 	add	objptr, ##1536
05988     F2 32 02 FB | 	rdlong	local11, objptr
0598c     19 31 02 F6 | 	mov	local10, local11
05990     01 30 66 F0 | 	shl	local10, #1
05994     19 31 02 F1 | 	add	local10, local11
05998     02 30 66 F0 | 	shl	local10, #2
0599c     03 00 00 FF 
059a0     00 E4 85 F1 | 	sub	objptr, ##1536
059a4     F2 30 02 F1 | 	add	local10, objptr
059a8     04 30 06 F1 | 	add	local10, #4
059ac     18 29 62 FC | 	wrlong	local06, local10
059b0     03 00 00 FF 
059b4     00 E4 05 F1 | 	add	objptr, ##1536
059b8     F2 26 02 FB | 	rdlong	local05, objptr
059bc     13 33 02 F6 | 	mov	local11, local05
059c0     01 32 66 F0 | 	shl	local11, #1
059c4     13 33 02 F1 | 	add	local11, local05
059c8     02 32 66 F0 | 	shl	local11, #2
059cc     03 00 00 FF 
059d0     00 E4 85 F1 | 	sub	objptr, ##1536
059d4     F2 32 02 F1 | 	add	local11, objptr
059d8     08 32 06 F1 | 	add	local11, #8
059dc     19 2B 62 FC | 	wrlong	local07, local11
059e0     03 00 00 FF 
059e4     00 E4 05 F1 | 	add	objptr, ##1536
059e8     F2 26 02 FB | 	rdlong	local05, objptr
059ec     01 26 06 F1 | 	add	local05, #1
059f0     F2 26 62 FC | 	wrlong	local05, objptr
059f4     44 22 06 F6 | 	mov	local03, #68
059f8     0F 27 02 F6 | 	mov	local05, local01
059fc     10 29 02 F6 | 	mov	local06, local02
05a00     11 2B 02 F6 | 	mov	local07, local03
05a04     F2 2C 02 FB | 	rdlong	local08, objptr
05a08     16 2F 02 F6 | 	mov	local09, local08
05a0c     01 2E 66 F0 | 	shl	local09, #1
05a10     16 2F 02 F1 | 	add	local09, local08
05a14     02 2E 66 F0 | 	shl	local09, #2
05a18     03 00 00 FF 
05a1c     00 E4 85 F1 | 	sub	objptr, ##1536
05a20     F2 2E 02 F1 | 	add	local09, objptr
05a24     17 27 62 FC | 	wrlong	local05, local09
05a28     03 00 00 FF 
05a2c     00 E4 05 F1 | 	add	objptr, ##1536
05a30     F2 32 02 FB | 	rdlong	local11, objptr
05a34     19 31 02 F6 | 	mov	local10, local11
05a38     01 30 66 F0 | 	shl	local10, #1
05a3c     19 31 02 F1 | 	add	local10, local11
05a40     02 30 66 F0 | 	shl	local10, #2
05a44     03 00 00 FF 
05a48     00 E4 85 F1 | 	sub	objptr, ##1536
05a4c     F2 30 02 F1 | 	add	local10, objptr
05a50     04 30 06 F1 | 	add	local10, #4
05a54     18 29 62 FC | 	wrlong	local06, local10
05a58     03 00 00 FF 
05a5c     00 E4 05 F1 | 	add	objptr, ##1536
05a60     F2 30 02 FB | 	rdlong	local10, objptr
05a64     18 33 02 F6 | 	mov	local11, local10
05a68     01 32 66 F0 | 	shl	local11, #1
05a6c     18 33 02 F1 | 	add	local11, local10
05a70     02 32 66 F0 | 	shl	local11, #2
05a74     03 00 00 FF 
05a78     00 E4 85 F1 | 	sub	objptr, ##1536
05a7c     F2 32 02 F1 | 	add	local11, objptr
05a80     08 32 06 F1 | 	add	local11, #8
05a84     19 2B 62 FC | 	wrlong	local07, local11
05a88     03 00 00 FF 
05a8c     00 E4 05 F1 | 	add	objptr, ##1536
05a90     F2 26 02 FB | 	rdlong	local05, objptr
05a94     01 26 06 F1 | 	add	local05, #1
05a98     F2 26 62 FC | 	wrlong	local05, objptr
05a9c     41 00 00 FF 
05aa0     40 E4 85 F1 | 	sub	objptr, ##33344
05aa4                 | LR__0513
05aa4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05aa4     2E 00 00 FF 
05aa8     08 E4 05 F1 | 	add	objptr, ##23560
05aac     F2 24 02 FB | 	rdlong	local04, objptr
05ab0     03 24 66 F0 | 	shl	local04, #3
05ab4     02 00 00 FF 
05ab8     38 E4 85 F1 | 	sub	objptr, ##1080
05abc     F2 24 02 F1 | 	add	local04, objptr
05ac0     04 24 06 F1 | 	add	local04, #4
05ac4     12 2D 02 FB | 	rdlong	local08, local04
05ac8     FE 2D 0E F2 | 	cmp	local08, #510 wz
05acc     2B 00 00 FF 
05ad0     D0 E5 85 F1 | 	sub	objptr, ##22480
05ad4     B8 00 90 5D |  if_ne	jmp	#LR__0514
05ad8     44 22 06 F6 | 	mov	local03, #68
05adc     0F 27 02 F6 | 	mov	local05, local01
05ae0     10 29 02 F6 | 	mov	local06, local02
05ae4     11 2B 02 F6 | 	mov	local07, local03
05ae8     41 00 00 FF 
05aec     40 E4 05 F1 | 	add	objptr, ##33344
05af0     F2 2C 02 FB | 	rdlong	local08, objptr
05af4     16 2F 02 F6 | 	mov	local09, local08
05af8     01 2E 66 F0 | 	shl	local09, #1
05afc     16 2F 02 F1 | 	add	local09, local08
05b00     02 2E 66 F0 | 	shl	local09, #2
05b04     03 00 00 FF 
05b08     00 E4 85 F1 | 	sub	objptr, ##1536
05b0c     F2 2E 02 F1 | 	add	local09, objptr
05b10     17 27 62 FC | 	wrlong	local05, local09
05b14     03 00 00 FF 
05b18     00 E4 05 F1 | 	add	objptr, ##1536
05b1c     F2 32 02 FB | 	rdlong	local11, objptr
05b20     19 31 02 F6 | 	mov	local10, local11
05b24     01 30 66 F0 | 	shl	local10, #1
05b28     19 31 02 F1 | 	add	local10, local11
05b2c     02 30 66 F0 | 	shl	local10, #2
05b30     03 00 00 FF 
05b34     00 E4 85 F1 | 	sub	objptr, ##1536
05b38     F2 30 02 F1 | 	add	local10, objptr
05b3c     04 30 06 F1 | 	add	local10, #4
05b40     18 29 62 FC | 	wrlong	local06, local10
05b44     03 00 00 FF 
05b48     00 E4 05 F1 | 	add	objptr, ##1536
05b4c     F2 30 02 FB | 	rdlong	local10, objptr
05b50     18 33 02 F6 | 	mov	local11, local10
05b54     01 32 66 F0 | 	shl	local11, #1
05b58     18 33 02 F1 | 	add	local11, local10
05b5c     02 32 66 F0 | 	shl	local11, #2
05b60     03 00 00 FF 
05b64     00 E4 85 F1 | 	sub	objptr, ##1536
05b68     F2 32 02 F1 | 	add	local11, objptr
05b6c     08 32 06 F1 | 	add	local11, #8
05b70     19 2B 62 FC | 	wrlong	local07, local11
05b74     03 00 00 FF 
05b78     00 E4 05 F1 | 	add	objptr, ##1536
05b7c     F2 26 02 FB | 	rdlong	local05, objptr
05b80     01 26 06 F1 | 	add	local05, #1
05b84     F2 26 62 FC | 	wrlong	local05, objptr
05b88     41 00 00 FF 
05b8c     40 E4 85 F1 | 	sub	objptr, ##33344
05b90                 | LR__0514
05b90                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05b90     2E 00 00 FF 
05b94     08 E4 05 F1 | 	add	objptr, ##23560
05b98     F2 24 02 FB | 	rdlong	local04, objptr
05b9c     03 24 66 F0 | 	shl	local04, #3
05ba0     02 00 00 FF 
05ba4     38 E4 85 F1 | 	sub	objptr, ##1080
05ba8     F2 24 02 F1 | 	add	local04, objptr
05bac     04 24 06 F1 | 	add	local04, #4
05bb0     12 2D 02 FB | 	rdlong	local08, local04
05bb4     11 2C 0E F2 | 	cmp	local08, #17 wz
05bb8     2B 00 00 FF 
05bbc     D0 E5 85 F1 | 	sub	objptr, ##22480
05bc0     6C 00 90 AD |  if_e	jmp	#LR__0515
05bc4     2E 00 00 FF 
05bc8     08 E4 05 F1 | 	add	objptr, ##23560
05bcc     F2 2C 02 FB | 	rdlong	local08, objptr
05bd0     03 2C 66 F0 | 	shl	local08, #3
05bd4     02 00 00 FF 
05bd8     38 E4 85 F1 | 	sub	objptr, ##1080
05bdc     F2 2C 02 F1 | 	add	local08, objptr
05be0     04 2C 06 F1 | 	add	local08, #4
05be4     16 2D 02 FB | 	rdlong	local08, local08
05be8     12 2C 0E F2 | 	cmp	local08, #18 wz
05bec     2B 00 00 FF 
05bf0     D0 E5 85 F1 | 	sub	objptr, ##22480
05bf4     38 00 90 AD |  if_e	jmp	#LR__0515
05bf8     2E 00 00 FF 
05bfc     08 E4 05 F1 | 	add	objptr, ##23560
05c00     F2 32 02 FB | 	rdlong	local11, objptr
05c04     03 32 66 F0 | 	shl	local11, #3
05c08     02 00 00 FF 
05c0c     38 E4 85 F1 | 	sub	objptr, ##1080
05c10     F2 32 02 F1 | 	add	local11, objptr
05c14     04 32 06 F1 | 	add	local11, #4
05c18     19 33 02 FB | 	rdlong	local11, local11
05c1c     FE 33 0E F2 | 	cmp	local11, #510 wz
05c20     2B 00 00 FF 
05c24     D0 E5 85 F1 | 	sub	objptr, ##22480
05c28     16 FA 05 56 |  if_ne	mov	result1, #22
05c2c     68 00 90 5D |  if_ne	jmp	#LR__0517
05c30                 | LR__0515
05c30     2E 00 00 FF 
05c34     08 E4 05 F1 | 	add	objptr, ##23560
05c38     F2 24 02 FB | 	rdlong	local04, objptr
05c3c     01 24 06 F1 | 	add	local04, #1
05c40     F2 24 62 FC | 	wrlong	local04, objptr
05c44     03 24 66 F0 | 	shl	local04, #3
05c48     02 00 00 FF 
05c4c     38 E4 85 F1 | 	sub	objptr, ##1080
05c50     F2 24 02 F1 | 	add	local04, objptr
05c54     04 24 06 F1 | 	add	local04, #4
05c58     12 2D 02 FB | 	rdlong	local08, local04
05c5c     FE 2D 0E F2 | 	cmp	local08, #510 wz
05c60     2B 00 00 FF 
05c64     D0 E5 85 F1 | 	sub	objptr, ##22480
05c68     28 00 90 AD |  if_e	jmp	#LR__0516
05c6c     2E 00 00 FF 
05c70     08 E4 05 F1 | 	add	objptr, ##23560
05c74     F2 32 02 FB | 	rdlong	local11, objptr
05c78     0E 00 00 FF 
05c7c     1C E4 05 F1 | 	add	objptr, ##7196
05c80     F2 30 02 FB | 	rdlong	local10, objptr
05c84     3C 00 00 FF 
05c88     24 E4 85 F1 | 	sub	objptr, ##30756
05c8c     18 33 52 F2 | 	cmps	local11, local10 wc
05c90     E4 FA 9F CD |  if_b	jmp	#LR__0511
05c94                 | LR__0516
05c94                 | ' return 0
05c94     00 FA 05 F6 | 	mov	result1, #0
05c98                 | LR__0517
05c98     A7 F0 03 F6 | 	mov	ptra, fp
05c9c     B2 00 A0 FD | 	call	#popregs_
05ca0                 | _compile_print_ret
05ca0     2D 00 64 FD | 	ret
05ca4                 | 
05ca4                 | ' 
05ca4                 | ' function compile_if() as ulong  
05ca4                 | _compile_if
05ca4     05 4A 05 F6 | 	mov	COUNT_, #5
05ca8     A8 00 A0 FD | 	call	#pushregs_
05cac                 | _compile_if_enter
05cac     28 F3 BF FD | 	call	#_compile_converttoint
05cb0                 | ' return err
05cb0     2E 00 00 FF 
05cb4     08 E4 05 F1 | 	add	objptr, ##23560
05cb8     F2 FA 01 FB | 	rdlong	result1, objptr
05cbc     01 FA 05 F1 | 	add	result1, #1
05cc0     F2 FA 61 FC | 	wrlong	result1, objptr
05cc4     58 22 06 F6 | 	mov	local03, #88
05cc8     0F 25 02 F6 | 	mov	local04, local01
05ccc     10 27 02 F6 | 	mov	local05, local02
05cd0     11 1F 02 F6 | 	mov	local01, local03
05cd4     13 00 00 FF 
05cd8     38 E4 05 F1 | 	add	objptr, ##9784
05cdc     F2 12 02 FB | 	rdlong	arg01, objptr
05ce0     09 FB 01 F6 | 	mov	result1, arg01
05ce4     01 FA 65 F0 | 	shl	result1, #1
05ce8     09 FB 01 F1 | 	add	result1, arg01
05cec     02 FA 65 F0 | 	shl	result1, #2
05cf0     03 00 00 FF 
05cf4     00 E4 85 F1 | 	sub	objptr, ##1536
05cf8     F2 FA 01 F1 | 	add	result1, objptr
05cfc     FD 24 62 FC | 	wrlong	local04, result1
05d00     03 00 00 FF 
05d04     00 E4 05 F1 | 	add	objptr, ##1536
05d08     F2 12 02 FB | 	rdlong	arg01, objptr
05d0c     09 25 02 F6 | 	mov	local04, arg01
05d10     01 24 66 F0 | 	shl	local04, #1
05d14     09 25 02 F1 | 	add	local04, arg01
05d18     02 24 66 F0 | 	shl	local04, #2
05d1c     03 00 00 FF 
05d20     00 E4 85 F1 | 	sub	objptr, ##1536
05d24     F2 24 02 F1 | 	add	local04, objptr
05d28     04 24 06 F1 | 	add	local04, #4
05d2c     12 27 62 FC | 	wrlong	local05, local04
05d30     03 00 00 FF 
05d34     00 E4 05 F1 | 	add	objptr, ##1536
05d38     F2 24 02 FB | 	rdlong	local04, objptr
05d3c     12 27 02 F6 | 	mov	local05, local04
05d40     01 26 66 F0 | 	shl	local05, #1
05d44     12 27 02 F1 | 	add	local05, local04
05d48     02 26 66 F0 | 	shl	local05, #2
05d4c     03 00 00 FF 
05d50     00 E4 85 F1 | 	sub	objptr, ##1536
05d54     F2 26 02 F1 | 	add	local05, objptr
05d58     08 26 06 F1 | 	add	local05, #8
05d5c     13 1F 62 FC | 	wrlong	local01, local05
05d60     03 00 00 FF 
05d64     00 E4 05 F1 | 	add	objptr, ##1536
05d68     F2 24 02 FB | 	rdlong	local04, objptr
05d6c     01 24 06 F1 | 	add	local04, #1
05d70     F2 24 62 FC | 	wrlong	local04, objptr
05d74                 | ' 
05d74                 | ' 'print "In compile_if"
05d74                 | ' compile_int_fun_1p()
05d74                 | ' cmd=lparts(ct).token : ct+=1
05d74                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05d74                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05d74                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05d74     13 00 00 FF 
05d78     38 E4 85 F1 | 	sub	objptr, ##9784
05d7c     F2 26 02 FB | 	rdlong	local05, objptr
05d80     01 26 06 F1 | 	add	local05, #1
05d84     03 26 66 F0 | 	shl	local05, #3
05d88     02 00 00 FF 
05d8c     38 E4 85 F1 | 	sub	objptr, ##1080
05d90     F2 26 02 F1 | 	add	local05, objptr
05d94     13 13 02 FB | 	rdlong	arg01, local05
05d98     2B 00 00 FF 
05d9c     D0 E5 85 F1 | 	sub	objptr, ##22480
05da0                 | ' 
05da0                 | ' select case s
05da0     24 01 00 FF 
05da4     0A 14 06 F6 | 	mov	arg02, ##@LR__4174
05da8     2C F7 B0 FD | 	call	#__system___string_cmp
05dac     00 FA 0D F2 | 	cmp	result1, #0 wz
05db0     1B FA 05 A6 |  if_e	mov	result1, #27
05db4     00 FA 05 56 |  if_ne	mov	result1, #0
05db8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dbc     0C 00 90 AD |  if_e	jmp	#LR__0520
05dc0     05 12 06 F6 | 	mov	arg01, #5
05dc4     20 EC BF FD | 	call	#_compile_immediate_assign
05dc8     08 00 90 FD | 	jmp	#LR__0521
05dcc                 | LR__0520
05dcc     05 12 06 F6 | 	mov	arg01, #5
05dd0     58 E5 BF FD | 	call	#_compile_immediate
05dd4                 | LR__0521
05dd4                 | ' 
05dd4                 | ' 
05dd4                 | ' return 0
05dd4     00 FA 05 F6 | 	mov	result1, #0
05dd8     A7 F0 03 F6 | 	mov	ptra, fp
05ddc     B2 00 A0 FD | 	call	#popregs_
05de0                 | _compile_if_ret
05de0     2D 00 64 FD | 	ret
05de4                 | 
05de4                 | ' 
05de4                 | ' function compile_else() as ulong  
05de4                 | _compile_else
05de4     05 4A 05 F6 | 	mov	COUNT_, #5
05de8     A8 00 A0 FD | 	call	#pushregs_
05dec                 | _compile_else_enter
05dec     5A 22 06 F6 | 	mov	local03, #90
05df0     0F 25 02 F6 | 	mov	local04, local01
05df4     10 27 02 F6 | 	mov	local05, local02
05df8     11 1F 02 F6 | 	mov	local01, local03
05dfc     41 00 00 FF 
05e00     40 E4 05 F1 | 	add	objptr, ##33344
05e04     F2 12 02 FB | 	rdlong	arg01, objptr
05e08     09 FB 01 F6 | 	mov	result1, arg01
05e0c     01 FA 65 F0 | 	shl	result1, #1
05e10     09 FB 01 F1 | 	add	result1, arg01
05e14     02 FA 65 F0 | 	shl	result1, #2
05e18     03 00 00 FF 
05e1c     00 E4 85 F1 | 	sub	objptr, ##1536
05e20     F2 FA 01 F1 | 	add	result1, objptr
05e24     FD 24 62 FC | 	wrlong	local04, result1
05e28     03 00 00 FF 
05e2c     00 E4 05 F1 | 	add	objptr, ##1536
05e30     F2 FA 01 FB | 	rdlong	result1, objptr
05e34     FD 24 02 F6 | 	mov	local04, result1
05e38     01 24 66 F0 | 	shl	local04, #1
05e3c     FD 24 02 F1 | 	add	local04, result1
05e40     02 24 66 F0 | 	shl	local04, #2
05e44     03 00 00 FF 
05e48     00 E4 85 F1 | 	sub	objptr, ##1536
05e4c     F2 24 02 F1 | 	add	local04, objptr
05e50     04 24 06 F1 | 	add	local04, #4
05e54     12 27 62 FC | 	wrlong	local05, local04
05e58     03 00 00 FF 
05e5c     00 E4 05 F1 | 	add	objptr, ##1536
05e60     F2 24 02 FB | 	rdlong	local04, objptr
05e64     12 27 02 F6 | 	mov	local05, local04
05e68     01 26 66 F0 | 	shl	local05, #1
05e6c     12 27 02 F1 | 	add	local05, local04
05e70     02 26 66 F0 | 	shl	local05, #2
05e74     03 00 00 FF 
05e78     00 E4 85 F1 | 	sub	objptr, ##1536
05e7c     F2 26 02 F1 | 	add	local05, objptr
05e80     08 26 06 F1 | 	add	local05, #8
05e84     13 1F 62 FC | 	wrlong	local01, local05
05e88     03 00 00 FF 
05e8c     00 E4 05 F1 | 	add	objptr, ##1536
05e90     F2 24 02 FB | 	rdlong	local04, objptr
05e94     01 24 06 F1 | 	add	local04, #1
05e98     F2 24 62 FC | 	wrlong	local04, objptr
05e9c                 | ' 
05e9c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
05e9c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05e9c     13 00 00 FF 
05ea0     38 E4 85 F1 | 	sub	objptr, ##9784
05ea4     F2 26 02 FB | 	rdlong	local05, objptr
05ea8     01 26 06 F1 | 	add	local05, #1
05eac     03 26 66 F0 | 	shl	local05, #3
05eb0     02 00 00 FF 
05eb4     38 E4 85 F1 | 	sub	objptr, ##1080
05eb8     F2 26 02 F1 | 	add	local05, objptr
05ebc     13 13 02 FB | 	rdlong	arg01, local05
05ec0     2B 00 00 FF 
05ec4     D0 E5 85 F1 | 	sub	objptr, ##22480
05ec8                 | ' 
05ec8                 | ' select case s
05ec8     24 01 00 FF 
05ecc     0A 14 06 F6 | 	mov	arg02, ##@LR__4174
05ed0     04 F6 B0 FD | 	call	#__system___string_cmp
05ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed8     1B FA 05 A6 |  if_e	mov	result1, #27
05edc     00 FA 05 56 |  if_ne	mov	result1, #0
05ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee4     0C 00 90 AD |  if_e	jmp	#LR__0530
05ee8     05 12 06 F6 | 	mov	arg01, #5
05eec     F8 EA BF FD | 	call	#_compile_immediate_assign
05ef0     08 00 90 FD | 	jmp	#LR__0531
05ef4                 | LR__0530
05ef4     05 12 06 F6 | 	mov	arg01, #5
05ef8     30 E4 BF FD | 	call	#_compile_immediate
05efc                 | LR__0531
05efc                 | ' 
05efc                 | ' 
05efc                 | ' return 0
05efc     00 FA 05 F6 | 	mov	result1, #0
05f00     A7 F0 03 F6 | 	mov	ptra, fp
05f04     B2 00 A0 FD | 	call	#popregs_
05f08                 | _compile_else_ret
05f08     2D 00 64 FD | 	ret
05f0c                 | 
05f0c                 | ' 
05f0c                 | ' 
05f0c                 | ' function compile_dim() as ulong  
05f0c                 | _compile_dim
05f0c     11 4A 05 F6 | 	mov	COUNT_, #17
05f10     A8 00 A0 FD | 	call	#pushregs_
05f14     01 1E 06 F6 | 	mov	local01, #1
05f18     01 20 06 F6 | 	mov	local02, #1
05f1c     01 22 06 F6 | 	mov	local03, #1
05f20                 | ' 
05f20                 | ' dims(0)=1: dims(1)=1: dims(2)=1
05f20                 | ' 
05f20                 | ' if isname(lparts(ct).part$) then 
05f20     2E 00 00 FF 
05f24     08 E4 05 F1 | 	add	objptr, ##23560
05f28     F2 16 02 FB | 	rdlong	arg03, objptr
05f2c     03 16 66 F0 | 	shl	arg03, #3
05f30     02 00 00 FF 
05f34     38 E4 85 F1 | 	sub	objptr, ##1080
05f38     F2 16 02 F1 | 	add	arg03, objptr
05f3c     0B 13 02 FB | 	rdlong	arg01, arg03
05f40     2B 00 00 FF 
05f44     D0 E5 85 F1 | 	sub	objptr, ##22480
05f48     C4 D3 BF FD | 	call	#_isname
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     E4 05 90 AD |  if_e	jmp	#LR__0563
05f54     2E 00 00 FF 
05f58     08 E4 05 F1 | 	add	objptr, ##23560
05f5c     F2 24 02 FB | 	rdlong	local04, objptr
05f60     03 24 66 F0 | 	shl	local04, #3
05f64     02 00 00 FF 
05f68     38 E4 85 F1 | 	sub	objptr, ##1080
05f6c     F2 24 02 F1 | 	add	local04, objptr
05f70     12 27 02 FB | 	rdlong	local05, local04
05f74     01 28 66 F6 | 	neg	local06, #1
05f78                 | '   varname2$=lparts(ct).part$ 
05f78                 | '   j=-1
05f78                 | '   if varnum>0 then
05f78     04 E4 85 F1 | 	sub	objptr, #4
05f7c     F2 2A 02 FB | 	rdlong	local07, objptr
05f80     2B 00 00 FF 
05f84     CC E5 85 F1 | 	sub	objptr, ##22476
05f88     01 2A 56 F2 | 	cmps	local07, #1 wc
05f8c     58 00 90 CD |  if_b	jmp	#LR__0542
05f90                 | '  '   print "in dim, varnum=";varnum
05f90                 | '     for i=0 to varnum-1
05f90     00 2C 06 F6 | 	mov	local08, #0
05f94     2B 00 00 FF 
05f98     CC E5 05 F1 | 	add	objptr, ##22476
05f9c     F2 2E 02 FB | 	rdlong	local09, objptr
05fa0     2B 00 00 FF 
05fa4     CC E5 85 F1 | 	sub	objptr, ##22476
05fa8                 | LR__0540
05fa8     17 2D 52 F2 | 	cmps	local08, local09 wc
05fac     38 00 90 3D |  if_ae	jmp	#LR__0541
05fb0                 | '       if variables(i).name=varname2$ then j=i : exit
05fb0     16 25 02 F6 | 	mov	local04, local08
05fb4     04 24 66 F0 | 	shl	local04, #4
05fb8     0B 00 00 FF 
05fbc     CC E5 05 F1 | 	add	objptr, ##6092
05fc0     F2 24 02 F1 | 	add	local04, objptr
05fc4     12 13 02 FB | 	rdlong	arg01, local04
05fc8     13 15 02 F6 | 	mov	arg02, local05
05fcc     0B 00 00 FF 
05fd0     CC E5 85 F1 | 	sub	objptr, ##6092
05fd4     00 F5 B0 FD | 	call	#__system___string_cmp
05fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fdc     16 29 02 A6 |  if_e	mov	local06, local08
05fe0     01 2C 06 51 |  if_ne	add	local08, #1
05fe4     C0 FF 9F 5D |  if_ne	jmp	#LR__0540
05fe8                 | LR__0541
05fe8                 | LR__0542
05fe8                 | '   if j<>-1 then printerror (42) : return 42
05fe8     FF FF 7F FF 
05fec     FF 29 0E F2 | 	cmp	local06, ##-1 wz
05ff0     10 00 90 AD |  if_e	jmp	#LR__0543
05ff4     2A 12 06 F6 | 	mov	arg01, #42
05ff8     C0 BF B0 FD | 	call	#_printerror
05ffc     2A FA 05 F6 | 	mov	result1, #42
06000     8C 06 90 FD | 	jmp	#LR__0565
06004                 | LR__0543
06004                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06004     2E 00 00 FF 
06008     08 E4 05 F1 | 	add	objptr, ##23560
0600c     F2 16 02 FB | 	rdlong	arg03, objptr
06010     01 16 06 F1 | 	add	arg03, #1
06014     03 16 66 F0 | 	shl	arg03, #3
06018     02 00 00 FF 
0601c     38 E4 85 F1 | 	sub	objptr, ##1080
06020     F2 16 02 F1 | 	add	arg03, objptr
06024     0B 13 02 FB | 	rdlong	arg01, arg03
06028     24 01 00 FF 
0602c     91 15 06 F6 | 	mov	arg02, ##@LR__4274
06030     2B 00 00 FF 
06034     D0 E5 85 F1 | 	sub	objptr, ##22480
06038     9C F4 B0 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     50 00 90 AD |  if_e	jmp	#LR__0544
06044     2E 00 00 FF 
06048     08 E4 05 F1 | 	add	objptr, ##23560
0604c     F2 2E 02 FB | 	rdlong	local09, objptr
06050     01 2E 06 F1 | 	add	local09, #1
06054     03 2E 66 F0 | 	shl	local09, #3
06058     02 00 00 FF 
0605c     38 E4 85 F1 | 	sub	objptr, ##1080
06060     F2 2E 02 F1 | 	add	local09, objptr
06064     17 13 02 FB | 	rdlong	arg01, local09
06068     24 01 00 FF 
0606c     93 15 06 F6 | 	mov	arg02, ##@LR__4275
06070     2B 00 00 FF 
06074     D0 E5 85 F1 | 	sub	objptr, ##22480
06078     5C F4 B0 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     10 00 90 AD |  if_e	jmp	#LR__0544
06084     2B 12 06 F6 | 	mov	arg01, #43
06088     30 BF B0 FD | 	call	#_printerror
0608c     2B FA 05 F6 | 	mov	result1, #43
06090     FC 05 90 FD | 	jmp	#LR__0565
06094                 | LR__0544
06094                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06094     2E 00 00 FF 
06098     08 E4 05 F1 | 	add	objptr, ##23560
0609c     F2 14 02 FB | 	rdlong	arg02, objptr
060a0     01 14 06 F1 | 	add	arg02, #1
060a4     03 14 66 F0 | 	shl	arg02, #3
060a8     02 00 00 FF 
060ac     38 E4 85 F1 | 	sub	objptr, ##1080
060b0     F2 14 02 F1 | 	add	arg02, objptr
060b4     0A 13 02 FB | 	rdlong	arg01, arg02
060b8     24 01 00 FF 
060bc     96 15 06 F6 | 	mov	arg02, ##@LR__4276
060c0     2B 00 00 FF 
060c4     D0 E5 85 F1 | 	sub	objptr, ##22480
060c8     0C F4 B0 FD | 	call	#__system___string_cmp
060cc     00 FA 0D F2 | 	cmp	result1, #0 wz
060d0     2E 00 00 AF 
060d4     08 E4 05 A1 |  if_e	add	objptr, ##23560
060d8     F2 30 02 AB |  if_e	rdlong	local10, objptr
060dc     2E 00 00 AF 
060e0     08 E4 85 A1 |  if_e	sub	objptr, ##23560
060e4     01 30 06 A1 |  if_e	add	local10, #1
060e8     54 02 90 AD |  if_e	jmp	#LR__0550
060ec     2E 00 00 FF 
060f0     08 E4 05 F1 | 	add	objptr, ##23560
060f4     F2 30 02 FB | 	rdlong	local10, objptr
060f8     2E 00 00 FF 
060fc     08 E4 85 F1 | 	sub	objptr, ##23560
06100     02 30 06 F1 | 	add	local10, #2
06104     00 32 06 F6 | 	mov	local11, #0
06108                 | '   l=ct+2 : m=0 : do
06108                 | LR__0545
06108                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06108                 | '     if isdec(lparts(l).part$) then 
06108     18 25 02 F6 | 	mov	local04, local10
0610c     03 24 66 F0 | 	shl	local04, #3
06110     2B 00 00 FF 
06114     D0 E5 05 F1 | 	add	objptr, ##22480
06118     F2 24 02 F1 | 	add	local04, objptr
0611c     12 13 02 FB | 	rdlong	arg01, local04
06120     2B 00 00 FF 
06124     D0 E5 85 F1 | 	sub	objptr, ##22480
06128     88 D8 BF FD | 	call	#_isdec
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     44 00 90 AD |  if_e	jmp	#LR__0546
06134     19 35 02 F6 | 	mov	local12, local11
06138     0F 35 06 F1 | 	add	local12, #local01
0613c     18 2F 02 F6 | 	mov	local09, local10
06140     03 2E 66 F0 | 	shl	local09, #3
06144     2B 00 00 FF 
06148     D0 E5 05 F1 | 	add	objptr, ##22480
0614c     F2 2E 02 F1 | 	add	local09, objptr
06150     17 13 02 FB | 	rdlong	arg01, local09
06154     00 14 06 F6 | 	mov	arg02, #0
06158     2B 00 00 FF 
0615c     D0 E5 85 F1 | 	sub	objptr, ##22480
06160     D8 23 B1 FD | 	call	#__system____builtin_atoi
06164     FD 36 02 F6 | 	mov	local13, result1
06168                 | 	'.live	local13
06168                 | 	'.live	local12
06168     00 34 8E F9 | 	altd	local12, #0
0616c     1B 35 02 F6 | 	mov	local12, local13
06170     01 32 06 F1 | 	add	local11, #1
06174     10 00 90 FD | 	jmp	#LR__0547
06178                 | LR__0546
06178     11 12 06 F6 | 	mov	arg01, #17
0617c     3C BE B0 FD | 	call	#_printerror
06180                 | '       printerror (17)  : return(17)
06180     11 FA 05 F6 | 	mov	result1, #17
06184     08 05 90 FD | 	jmp	#LR__0565
06188                 | LR__0547
06188                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06188     18 25 02 F6 | 	mov	local04, local10
0618c     01 24 06 F1 | 	add	local04, #1
06190     03 24 66 F0 | 	shl	local04, #3
06194     2B 00 00 FF 
06198     D0 E5 05 F1 | 	add	objptr, ##22480
0619c     F2 24 02 F1 | 	add	local04, objptr
061a0     12 13 02 FB | 	rdlong	arg01, local04
061a4     24 01 00 FF 
061a8     99 15 06 F6 | 	mov	arg02, ##@LR__4277
061ac     2B 00 00 FF 
061b0     D0 E5 85 F1 | 	sub	objptr, ##22480
061b4     20 F3 B0 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     48 00 90 AD |  if_e	jmp	#LR__0548
061c0     18 37 02 F6 | 	mov	local13, local10
061c4     01 36 06 F1 | 	add	local13, #1
061c8     03 36 66 F0 | 	shl	local13, #3
061cc     2B 00 00 FF 
061d0     D0 E5 05 F1 | 	add	objptr, ##22480
061d4     F2 36 02 F1 | 	add	local13, objptr
061d8     1B 13 02 FB | 	rdlong	arg01, local13
061dc     24 01 00 FF 
061e0     9B 15 06 F6 | 	mov	arg02, ##@LR__4278
061e4     2B 00 00 FF 
061e8     D0 E5 85 F1 | 	sub	objptr, ##22480
061ec     E8 F2 B0 FD | 	call	#__system___string_cmp
061f0     00 FA 0D F2 | 	cmp	result1, #0 wz
061f4     10 00 90 AD |  if_e	jmp	#LR__0548
061f8     2C 12 06 F6 | 	mov	arg01, #44
061fc     BC BD B0 FD | 	call	#_printerror
06200     2C FA 05 F6 | 	mov	result1, #44
06204     88 04 90 FD | 	jmp	#LR__0565
06208                 | LR__0548
06208     02 30 06 F1 | 	add	local10, #2
0620c     18 25 02 F6 | 	mov	local04, local10
06210     01 24 86 F1 | 	sub	local04, #1
06214     03 24 66 F0 | 	shl	local04, #3
06218     2B 00 00 FF 
0621c     D0 E5 05 F1 | 	add	objptr, ##22480
06220     F2 24 02 F1 | 	add	local04, objptr
06224     12 13 02 FB | 	rdlong	arg01, local04
06228     24 01 00 FF 
0622c     9D 15 06 F6 | 	mov	arg02, ##@LR__4279
06230     2B 00 00 FF 
06234     D0 E5 85 F1 | 	sub	objptr, ##22480
06238     9C F2 B0 FD | 	call	#__system___string_cmp
0623c     00 FA 0D F2 | 	cmp	result1, #0 wz
06240     03 32 56 52 |  if_ne	cmps	local11, #3 wc
06244     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0545
06248                 | '   if m>3 then printerror(45): return(45)
06248     04 32 56 F2 | 	cmps	local11, #4 wc
0624c     10 00 90 CD |  if_b	jmp	#LR__0549
06250     2D 12 06 F6 | 	mov	arg01, #45
06254     64 BD B0 FD | 	call	#_printerror
06258     2D FA 05 F6 | 	mov	result1, #45
0625c     30 04 90 FD | 	jmp	#LR__0565
06260                 | LR__0549
06260                 | '   print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06260     00 12 06 F6 | 	mov	arg01, #0
06264     FC 47 B1 FD | 	call	#__system___getiolock_0348
06268     FD 12 02 F6 | 	mov	arg01, result1
0626c     40 F2 B0 FD | 	call	#__system___lockmem
06270     18 37 02 F6 | 	mov	local13, local10
06274     01 36 86 F1 | 	sub	local13, #1
06278     03 36 66 F0 | 	shl	local13, #3
0627c     2B 00 00 FF 
06280     D0 E5 05 F1 | 	add	objptr, ##22480
06284     F2 36 02 F1 | 	add	local13, objptr
06288     1B 15 02 FB | 	rdlong	arg02, local13
0628c     00 12 06 F6 | 	mov	arg01, #0
06290     00 16 06 F6 | 	mov	arg03, #0
06294     2B 00 00 FF 
06298     D0 E5 85 F1 | 	sub	objptr, ##22480
0629c     04 FF B0 FD | 	call	#__system___basic_print_string
062a0     00 12 06 F6 | 	mov	arg01, #0
062a4     09 14 06 F6 | 	mov	arg02, #9
062a8     00 16 06 F6 | 	mov	arg03, #0
062ac     9C FE B0 FD | 	call	#__system___basic_print_char
062b0     18 37 02 F6 | 	mov	local13, local10
062b4     03 36 66 F0 | 	shl	local13, #3
062b8     2B 00 00 FF 
062bc     D0 E5 05 F1 | 	add	objptr, ##22480
062c0     F2 36 02 F1 | 	add	local13, objptr
062c4     1B 15 02 FB | 	rdlong	arg02, local13
062c8     00 12 06 F6 | 	mov	arg01, #0
062cc     00 16 06 F6 | 	mov	arg03, #0
062d0     2B 00 00 FF 
062d4     D0 E5 85 F1 | 	sub	objptr, ##22480
062d8     C8 FE B0 FD | 	call	#__system___basic_print_string
062dc     00 12 06 F6 | 	mov	arg01, #0
062e0     09 14 06 F6 | 	mov	arg02, #9
062e4     00 16 06 F6 | 	mov	arg03, #0
062e8     60 FE B0 FD | 	call	#__system___basic_print_char
062ec     18 37 02 F6 | 	mov	local13, local10
062f0     01 36 06 F1 | 	add	local13, #1
062f4     03 36 66 F0 | 	shl	local13, #3
062f8     2B 00 00 FF 
062fc     D0 E5 05 F1 | 	add	objptr, ##22480
06300     F2 36 02 F1 | 	add	local13, objptr
06304     1B 15 02 FB | 	rdlong	arg02, local13
06308     00 12 06 F6 | 	mov	arg01, #0
0630c     00 16 06 F6 | 	mov	arg03, #0
06310     2B 00 00 FF 
06314     D0 E5 85 F1 | 	sub	objptr, ##22480
06318     88 FE B0 FD | 	call	#__system___basic_print_string
0631c     00 12 06 F6 | 	mov	arg01, #0
06320     0A 14 06 F6 | 	mov	arg02, #10
06324     00 16 06 F6 | 	mov	arg03, #0
06328     20 FE B0 FD | 	call	#__system___basic_print_char
0632c     00 12 06 F6 | 	mov	arg01, #0
06330     30 47 B1 FD | 	call	#__system___getiolock_0348
06334     FD 00 68 FC | 	wrlong	#0, result1
06338     00 39 06 F6 | 	mov	local14, #256
0633c     0C 3A 06 F6 | 	mov	local15, #12
06340                 | LR__0550
06340                 | '   arraytype=array_no_type : esize=12
06340                 | ' 1350 
06340                 | '   if lparts(l).part$="as" then
06340     18 25 02 F6 | 	mov	local04, local10
06344     03 24 66 F0 | 	shl	local04, #3
06348     2B 00 00 FF 
0634c     D0 E5 05 F1 | 	add	objptr, ##22480
06350     F2 24 02 F1 | 	add	local04, objptr
06354     12 13 02 FB | 	rdlong	arg01, local04
06358     24 01 00 FF 
0635c     9F 15 06 F6 | 	mov	arg02, ##@LR__4280
06360     2B 00 00 FF 
06364     D0 E5 85 F1 | 	sub	objptr, ##22480
06368     6C F1 B0 FD | 	call	#__system___string_cmp
0636c     00 FA 0D F2 | 	cmp	result1, #0 wz
06370     D4 01 90 5D |  if_ne	jmp	#LR__0564
06374                 | '     select case lparts(l+1).part$
06374     18 35 02 F6 | 	mov	local12, local10
06378     01 34 06 F1 | 	add	local12, #1
0637c     03 34 66 F0 | 	shl	local12, #3
06380     2B 00 00 FF 
06384     D0 E5 05 F1 | 	add	objptr, ##22480
06388     F2 34 02 F1 | 	add	local12, objptr
0638c     1A 3D 02 FB | 	rdlong	local16, local12
06390     24 01 00 FF 
06394     A2 15 06 F6 | 	mov	arg02, ##@LR__4281
06398     1E 13 02 F6 | 	mov	arg01, local16
0639c     2B 00 00 FF 
063a0     D0 E5 85 F1 | 	sub	objptr, ##22480
063a4     30 F1 B0 FD | 	call	#__system___string_cmp
063a8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ac     F4 00 90 AD |  if_e	jmp	#LR__0551
063b0     24 01 00 FF 
063b4     A7 15 06 F6 | 	mov	arg02, ##@LR__4282
063b8     1E 13 02 F6 | 	mov	arg01, local16
063bc     18 F1 B0 FD | 	call	#__system___string_cmp
063c0     00 FA 0D F2 | 	cmp	result1, #0 wz
063c4     E8 00 90 AD |  if_e	jmp	#LR__0552
063c8     24 01 00 FF 
063cc     AD 15 06 F6 | 	mov	arg02, ##@LR__4283
063d0     1E 13 02 F6 | 	mov	arg01, local16
063d4     00 F1 B0 FD | 	call	#__system___string_cmp
063d8     00 FA 0D F2 | 	cmp	result1, #0 wz
063dc     DC 00 90 AD |  if_e	jmp	#LR__0553
063e0     24 01 00 FF 
063e4     B3 15 06 F6 | 	mov	arg02, ##@LR__4284
063e8     1E 13 02 F6 | 	mov	arg01, local16
063ec     E8 F0 B0 FD | 	call	#__system___string_cmp
063f0     00 FA 0D F2 | 	cmp	result1, #0 wz
063f4     D0 00 90 AD |  if_e	jmp	#LR__0554
063f8     24 01 00 FF 
063fc     BA 15 06 F6 | 	mov	arg02, ##@LR__4285
06400     1E 13 02 F6 | 	mov	arg01, local16
06404     D0 F0 B0 FD | 	call	#__system___string_cmp
06408     00 FA 0D F2 | 	cmp	result1, #0 wz
0640c     C4 00 90 AD |  if_e	jmp	#LR__0555
06410     24 01 00 FF 
06414     BF 15 06 F6 | 	mov	arg02, ##@LR__4286
06418     1E 13 02 F6 | 	mov	arg01, local16
0641c     B8 F0 B0 FD | 	call	#__system___string_cmp
06420     00 FA 0D F2 | 	cmp	result1, #0 wz
06424     B8 00 90 AD |  if_e	jmp	#LR__0556
06428     24 01 00 FF 
0642c     C5 15 06 F6 | 	mov	arg02, ##@LR__4287
06430     1E 13 02 F6 | 	mov	arg01, local16
06434     A0 F0 B0 FD | 	call	#__system___string_cmp
06438     00 FA 0D F2 | 	cmp	result1, #0 wz
0643c     AC 00 90 AD |  if_e	jmp	#LR__0557
06440     24 01 00 FF 
06444     CB 15 06 F6 | 	mov	arg02, ##@LR__4288
06448     1E 13 02 F6 | 	mov	arg01, local16
0644c     88 F0 B0 FD | 	call	#__system___string_cmp
06450     00 FA 0D F2 | 	cmp	result1, #0 wz
06454     A0 00 90 AD |  if_e	jmp	#LR__0558
06458     24 01 00 FF 
0645c     D2 15 06 F6 | 	mov	arg02, ##@LR__4289
06460     1E 13 02 F6 | 	mov	arg01, local16
06464     70 F0 B0 FD | 	call	#__system___string_cmp
06468     00 FA 0D F2 | 	cmp	result1, #0 wz
0646c     94 00 90 AD |  if_e	jmp	#LR__0559
06470     24 01 00 FF 
06474     D9 15 06 F6 | 	mov	arg02, ##@LR__4290
06478     1E 13 02 F6 | 	mov	arg01, local16
0647c     58 F0 B0 FD | 	call	#__system___string_cmp
06480     00 FA 0D F2 | 	cmp	result1, #0 wz
06484     88 00 90 AD |  if_e	jmp	#LR__0560
06488     24 01 00 FF 
0648c     E0 15 06 F6 | 	mov	arg02, ##@LR__4291
06490     1E 13 02 F6 | 	mov	arg01, local16
06494     40 F0 B0 FD | 	call	#__system___string_cmp
06498     00 FA 0D F2 | 	cmp	result1, #0 wz
0649c     7C 00 90 AD |  if_e	jmp	#LR__0561
064a0     84 00 90 FD | 	jmp	#LR__0562
064a4                 | LR__0551
064a4     01 39 06 F6 | 	mov	local14, #257
064a8     01 3A 06 F6 | 	mov	local15, #1
064ac     98 00 90 FD | 	jmp	#LR__0564
064b0                 | LR__0552
064b0     02 39 06 F6 | 	mov	local14, #258
064b4     01 3A 06 F6 | 	mov	local15, #1
064b8     8C 00 90 FD | 	jmp	#LR__0564
064bc                 | LR__0553
064bc     03 39 06 F6 | 	mov	local14, #259
064c0     02 3A 06 F6 | 	mov	local15, #2
064c4     80 00 90 FD | 	jmp	#LR__0564
064c8                 | LR__0554
064c8     04 39 06 F6 | 	mov	local14, #260
064cc     02 3A 06 F6 | 	mov	local15, #2
064d0     74 00 90 FD | 	jmp	#LR__0564
064d4                 | LR__0555
064d4     05 39 06 F6 | 	mov	local14, #261
064d8     04 3A 06 F6 | 	mov	local15, #4
064dc     68 00 90 FD | 	jmp	#LR__0564
064e0                 | LR__0556
064e0     06 39 06 F6 | 	mov	local14, #262
064e4     04 3A 06 F6 | 	mov	local15, #4
064e8     5C 00 90 FD | 	jmp	#LR__0564
064ec                 | LR__0557
064ec     07 39 06 F6 | 	mov	local14, #263
064f0     08 3A 06 F6 | 	mov	local15, #8
064f4     50 00 90 FD | 	jmp	#LR__0564
064f8                 | LR__0558
064f8     08 39 06 F6 | 	mov	local14, #264
064fc     08 3A 06 F6 | 	mov	local15, #8
06500     44 00 90 FD | 	jmp	#LR__0564
06504                 | LR__0559
06504     09 39 06 F6 | 	mov	local14, #265
06508     04 3A 06 F6 | 	mov	local15, #4
0650c     38 00 90 FD | 	jmp	#LR__0564
06510                 | LR__0560
06510     0A 39 06 F6 | 	mov	local14, #266
06514     08 3A 06 F6 | 	mov	local15, #8
06518     2C 00 90 FD | 	jmp	#LR__0564
0651c                 | LR__0561
0651c     0B 39 06 F6 | 	mov	local14, #267
06520     04 3A 06 F6 | 	mov	local15, #4
06524     20 00 90 FD | 	jmp	#LR__0564
06528                 | LR__0562
06528     2F 12 06 F6 | 	mov	arg01, #47
0652c     8C BA B0 FD | 	call	#_printerror
06530     2F FA 05 F6 | 	mov	result1, #47
06534     58 01 90 FD | 	jmp	#LR__0565
06538                 | LR__0563
06538     2E 12 06 F6 | 	mov	arg01, #46
0653c     7C BA B0 FD | 	call	#_printerror
06540                 | '   printerror(46): return 46
06540     2E FA 05 F6 | 	mov	result1, #46
06544     48 01 90 FD | 	jmp	#LR__0565
06548                 | LR__0564
06548     0F 3B 02 FD | 	qmul	local15, local01
0654c     18 2A 62 FD | 	getqx	local07
06550     10 2B 02 FD | 	qmul	local07, local02
06554     18 3C 62 FD | 	getqx	local16
06558     11 3D 02 FD | 	qmul	local16, local03
0655c     52 00 00 FF 
06560     3C E4 05 F1 | 	add	objptr, ##42044
06564     F2 3E 02 FB | 	rdlong	local17, objptr
06568     1C 15 02 F6 | 	mov	arg02, local14
0656c     01 16 06 F6 | 	mov	arg03, #1
06570     00 18 06 F6 | 	mov	arg04, #0
06574                 | '     return fill(addr, pattern, count, listPtr, 4)
06574     04 1A 06 F6 | 	mov	arg05, #4
06578     18 3C 62 FD | 	getqx	local16
0657c     1E 3F 82 F1 | 	sub	local17, local16
06580     10 3E 86 F1 | 	sub	local17, #16
06584     F2 3E 62 FC | 	wrlong	local17, objptr
06588     1F 13 02 F6 | 	mov	arg01, local17
0658c     46 00 00 FF 
06590     7C E5 85 F1 | 	sub	objptr, ##36220
06594     64 E5 B0 FD | 	call	#_psram_spin2_fill
06598     1F 13 02 F6 | 	mov	arg01, local17
0659c     02 12 06 F1 | 	add	arg01, #2
065a0     1D 15 02 F6 | 	mov	arg02, local15
065a4     01 16 06 F6 | 	mov	arg03, #1
065a8     00 18 06 F6 | 	mov	arg04, #0
065ac                 | '     return fill(addr, pattern, count, listPtr, 1)
065ac     01 1A 06 F6 | 	mov	arg05, #1
065b0     48 E5 B0 FD | 	call	#_psram_spin2_fill
065b4     1F 13 02 F6 | 	mov	arg01, local17
065b8     04 12 06 F1 | 	add	arg01, #4
065bc     0F 15 02 F6 | 	mov	arg02, local01
065c0     01 16 06 F6 | 	mov	arg03, #1
065c4     00 18 06 F6 | 	mov	arg04, #0
065c8                 | '     return fill(addr, pattern, count, listPtr, 4)
065c8     04 1A 06 F6 | 	mov	arg05, #4
065cc     2C E5 B0 FD | 	call	#_psram_spin2_fill
065d0     1F 13 02 F6 | 	mov	arg01, local17
065d4     08 12 06 F1 | 	add	arg01, #8
065d8     10 15 02 F6 | 	mov	arg02, local02
065dc     01 16 06 F6 | 	mov	arg03, #1
065e0     00 18 06 F6 | 	mov	arg04, #0
065e4                 | '     return fill(addr, pattern, count, listPtr, 4)
065e4     04 1A 06 F6 | 	mov	arg05, #4
065e8     10 E5 B0 FD | 	call	#_psram_spin2_fill
065ec     1F 13 02 F6 | 	mov	arg01, local17
065f0     0C 12 06 F1 | 	add	arg01, #12
065f4     11 15 02 F6 | 	mov	arg02, local03
065f8     01 16 06 F6 | 	mov	arg03, #1
065fc     00 18 06 F6 | 	mov	arg04, #0
06600                 | '     return fill(addr, pattern, count, listPtr, 4)
06600     04 1A 06 F6 | 	mov	arg05, #4
06604     F4 E4 B0 FD | 	call	#_psram_spin2_fill
06608     20 00 00 FF 
0660c     0C E5 05 F1 | 	add	objptr, ##16652
06610     F2 24 02 FB | 	rdlong	local04, objptr
06614     04 24 66 F0 | 	shl	local04, #4
06618     20 00 00 FF 
0661c     00 E4 85 F1 | 	sub	objptr, ##16384
06620     F2 24 02 F1 | 	add	local04, objptr
06624     12 27 62 FC | 	wrlong	local05, local04
06628     20 00 00 FF 
0662c     00 E4 05 F1 | 	add	objptr, ##16384
06630     F2 24 02 FB | 	rdlong	local04, objptr
06634     04 24 66 F0 | 	shl	local04, #4
06638     20 00 00 FF 
0663c     00 E4 85 F1 | 	sub	objptr, ##16384
06640     F2 24 02 F1 | 	add	local04, objptr
06644     04 24 06 F1 | 	add	local04, #4
06648     12 3F 62 FC | 	wrlong	local17, local04
0664c     20 00 00 FF 
06650     00 E4 05 F1 | 	add	objptr, ##16384
06654     F2 24 02 FB | 	rdlong	local04, objptr
06658     04 24 66 F0 | 	shl	local04, #4
0665c     20 00 00 FF 
06660     00 E4 85 F1 | 	sub	objptr, ##16384
06664     F2 24 02 F1 | 	add	local04, objptr
06668     0C 24 06 F1 | 	add	local04, #12
0666c     12 39 62 FC | 	wrlong	local14, local04
06670     20 00 00 FF 
06674     00 E4 05 F1 | 	add	objptr, ##16384
06678     F2 2A 02 FB | 	rdlong	local07, objptr
0667c     01 2A 06 F1 | 	add	local07, #1
06680     F2 2A 62 FC | 	wrlong	local07, objptr
06684     2B 00 00 FF 
06688     CC E5 85 F1 | 	sub	objptr, ##22476
0668c                 | ' 'print dims(0),dims(1),dims(2),arraytype
0668c                 | ' 
0668c                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
0668c                 | ' arrayptr=memtop-arraysize-16
0668c                 | ' memtop=arrayptr
0668c                 | ' 
0668c                 | ' pslpoke arrayptr,arraytype
0668c                 | ' pspoke arrayptr+2,esize
0668c                 | ' pslpoke arrayptr+4,dims(0)
0668c                 | ' pslpoke arrayptr+8,dims(1)
0668c                 | ' pslpoke arrayptr+12,dims(2)
0668c                 | ' 
0668c                 | ' variables(varnum).name=varname2$
0668c                 | ' variables(varnum).value.uresult=arrayptr
0668c                 | ' variables(varnum).vartype=arraytype
0668c                 | ' varnum+=1
0668c                 | ' 
0668c                 | ' return 0
0668c     00 FA 05 F6 | 	mov	result1, #0
06690                 | LR__0565
06690     A7 F0 03 F6 | 	mov	ptra, fp
06694     B2 00 A0 FD | 	call	#popregs_
06698                 | _compile_dim_ret
06698     2D 00 64 FD | 	ret
0669c                 | 
0669c                 | ' 
0669c                 | ' 
0669c                 | ' function compile_for() as ulong  
0669c                 | _compile_for
0669c     07 4A 05 F6 | 	mov	COUNT_, #7
066a0     A8 00 A0 FD | 	call	#pushregs_
066a4                 | ' 
066a4                 | ' 
066a4                 | ' 
066a4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
066a4     2E 00 00 FF 
066a8     08 E4 05 F1 | 	add	objptr, ##23560
066ac     F2 14 02 FB | 	rdlong	arg02, objptr
066b0     01 14 06 F1 | 	add	arg02, #1
066b4     03 14 66 F0 | 	shl	arg02, #3
066b8     02 00 00 FF 
066bc     38 E4 85 F1 | 	sub	objptr, ##1080
066c0     F2 14 02 F1 | 	add	arg02, objptr
066c4     0A 13 02 FB | 	rdlong	arg01, arg02
066c8     2B 00 00 FF 
066cc     D0 E5 85 F1 | 	sub	objptr, ##22480
066d0                 | ' 
066d0                 | ' select case s
066d0     24 01 00 FF 
066d4     0A 14 06 F6 | 	mov	arg02, ##@LR__4174
066d8     FC ED B0 FD | 	call	#__system___string_cmp
066dc     00 FA 0D F2 | 	cmp	result1, #0 wz
066e0     1B FA 05 A6 |  if_e	mov	result1, #27
066e4     00 FA 05 56 |  if_ne	mov	result1, #0
066e8     00 FA 0D F2 | 	cmp	result1, #0 wz
066ec     0C 00 90 AD |  if_e	jmp	#LR__0570
066f0     05 12 06 F6 | 	mov	arg01, #5
066f4     F0 E2 BF FD | 	call	#_compile_immediate_assign
066f8     10 00 90 FD | 	jmp	#LR__0571
066fc                 | LR__0570
066fc     20 12 06 F6 | 	mov	arg01, #32
06700     60 E7 BF FD | 	call	#_compile_error
06704     20 FA 05 F6 | 	mov	result1, #32
06708     AC 02 90 FD | 	jmp	#LR__0576
0670c                 | LR__0571
0670c     41 00 00 FF 
06710     40 E4 05 F1 | 	add	objptr, ##33344
06714     F2 12 02 FB | 	rdlong	arg01, objptr
06718     09 25 02 F6 | 	mov	local04, arg01
0671c     01 24 86 F1 | 	sub	local04, #1
06720     12 15 02 F6 | 	mov	arg02, local04
06724     01 14 66 F0 | 	shl	arg02, #1
06728     12 15 02 F1 | 	add	arg02, local04
0672c     02 14 66 F0 | 	shl	arg02, #2
06730     03 00 00 FF 
06734     00 E4 85 F1 | 	sub	objptr, ##1536
06738     F2 14 02 F1 | 	add	arg02, objptr
0673c     0A 1F 02 FB | 	rdlong	local01, arg02
06740     04 14 06 F1 | 	add	arg02, #4
06744     0A 27 02 FB | 	rdlong	local05, arg02
06748     01 12 86 F1 | 	sub	arg01, #1
0674c     09 29 02 F6 | 	mov	local06, arg01
06750     01 28 66 F0 | 	shl	local06, #1
06754     09 29 02 F1 | 	add	local06, arg01
06758     02 28 66 F0 | 	shl	local06, #2
0675c     F2 28 02 F1 | 	add	local06, objptr
06760     08 28 06 F1 | 	add	local06, #8
06764     14 13 02 FB | 	rdlong	arg01, local06
06768     13 21 02 F6 | 	mov	local02, local05
0676c     09 23 02 F6 | 	mov	local03, arg01
06770                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
06770                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
06770     17 22 0E F2 | 	cmp	local03, #23 wz
06774     3E 00 00 FF 
06778     40 E4 85 F1 | 	sub	objptr, ##31808
0677c     10 00 90 AD |  if_e	jmp	#LR__0572
06780     22 12 06 F6 | 	mov	arg01, #34
06784     DC E6 BF FD | 	call	#_compile_error
06788     22 FA 05 F6 | 	mov	result1, #34
0678c     28 02 90 FD | 	jmp	#LR__0576
06790                 | LR__0572
06790     0F 2B 02 F6 | 	mov	local07, local01
06794                 | ' varnum=t1.result.uresult
06794                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
06794     2E 00 00 FF 
06798     08 E4 05 F1 | 	add	objptr, ##23560
0679c     F2 24 02 FB | 	rdlong	local04, objptr
067a0     03 24 66 F0 | 	shl	local04, #3
067a4     02 00 00 FF 
067a8     38 E4 85 F1 | 	sub	objptr, ##1080
067ac     F2 24 02 F1 | 	add	local04, objptr
067b0     12 13 02 FB | 	rdlong	arg01, local04
067b4     24 01 00 FF 
067b8     E7 15 06 F6 | 	mov	arg02, ##@LR__4292
067bc     2B 00 00 FF 
067c0     D0 E5 85 F1 | 	sub	objptr, ##22480
067c4     10 ED B0 FD | 	call	#__system___string_cmp
067c8     00 FA 0D F2 | 	cmp	result1, #0 wz
067cc     10 00 90 AD |  if_e	jmp	#LR__0573
067d0     21 12 06 F6 | 	mov	arg01, #33
067d4     8C E6 BF FD | 	call	#_compile_error
067d8     21 FA 05 F6 | 	mov	result1, #33
067dc     D8 01 90 FD | 	jmp	#LR__0576
067e0                 | LR__0573
067e0     2E 00 00 FF 
067e4     08 E4 05 F1 | 	add	objptr, ##23560
067e8     F2 28 02 FB | 	rdlong	local06, objptr
067ec     01 28 06 F1 | 	add	local06, #1
067f0     F2 28 62 FC | 	wrlong	local06, objptr
067f4     2E 00 00 FF 
067f8     08 E4 85 F1 | 	sub	objptr, ##23560
067fc     98 0B B0 FD | 	call	#_expr
06800                 | ' ct+=1
06800                 | ' expr()  ' there is "to" value pushed on the stack
06800                 | ' if lparts(ct).part$="step" then 
06800     2E 00 00 FF 
06804     08 E4 05 F1 | 	add	objptr, ##23560
06808     F2 24 02 FB | 	rdlong	local04, objptr
0680c     03 24 66 F0 | 	shl	local04, #3
06810     02 00 00 FF 
06814     38 E4 85 F1 | 	sub	objptr, ##1080
06818     F2 24 02 F1 | 	add	local04, objptr
0681c     12 13 02 FB | 	rdlong	arg01, local04
06820     24 01 00 FF 
06824     EA 15 06 F6 | 	mov	arg02, ##@LR__4293
06828     2B 00 00 FF 
0682c     D0 E5 85 F1 | 	sub	objptr, ##22480
06830     A4 EC B0 FD | 	call	#__system___string_cmp
06834     00 FA 0D F2 | 	cmp	result1, #0 wz
06838     24 00 90 5D |  if_ne	jmp	#LR__0574
0683c     2E 00 00 FF 
06840     08 E4 05 F1 | 	add	objptr, ##23560
06844     F2 28 02 FB | 	rdlong	local06, objptr
06848     01 28 06 F1 | 	add	local06, #1
0684c     F2 28 62 FC | 	wrlong	local06, objptr
06850     2E 00 00 FF 
06854     08 E4 85 F1 | 	sub	objptr, ##23560
06858     3C 0B B0 FD | 	call	#_expr
0685c     78 00 90 FD | 	jmp	#LR__0575
06860                 | LR__0574
06860     41 00 00 FF 
06864     40 E4 05 F1 | 	add	objptr, ##33344
06868     F2 28 02 FB | 	rdlong	local06, objptr
0686c     14 27 02 F6 | 	mov	local05, local06
06870     01 26 66 F0 | 	shl	local05, #1
06874     14 27 02 F1 | 	add	local05, local06
06878     02 26 66 F0 | 	shl	local05, #2
0687c     03 00 00 FF 
06880     00 E4 85 F1 | 	sub	objptr, ##1536
06884     F2 26 02 F1 | 	add	local05, objptr
06888     08 26 06 F1 | 	add	local05, #8
0688c     13 39 68 FC | 	wrlong	#28, local05
06890     03 00 00 FF 
06894     00 E4 05 F1 | 	add	objptr, ##1536
06898     F2 28 02 FB | 	rdlong	local06, objptr
0689c     14 27 02 F6 | 	mov	local05, local06
068a0     01 26 66 F0 | 	shl	local05, #1
068a4     14 27 02 F1 | 	add	local05, local06
068a8     02 26 66 F0 | 	shl	local05, #2
068ac     03 00 00 FF 
068b0     00 E4 85 F1 | 	sub	objptr, ##1536
068b4     F2 26 02 F1 | 	add	local05, objptr
068b8     13 03 68 FC | 	wrlong	#1, local05
068bc     03 00 00 FF 
068c0     00 E4 05 F1 | 	add	objptr, ##1536
068c4     F2 28 02 FB | 	rdlong	local06, objptr
068c8     01 28 06 F1 | 	add	local06, #1
068cc     F2 28 62 FC | 	wrlong	local06, objptr
068d0     41 00 00 FF 
068d4     40 E4 85 F1 | 	sub	objptr, ##33344
068d8                 | LR__0575
068d8     41 00 00 FF 
068dc     40 E4 05 F1 | 	add	objptr, ##33344
068e0     F2 28 02 FB | 	rdlong	local06, objptr
068e4     14 27 02 F6 | 	mov	local05, local06
068e8     01 26 66 F0 | 	shl	local05, #1
068ec     14 27 02 F1 | 	add	local05, local06
068f0     02 26 66 F0 | 	shl	local05, #2
068f4     03 00 00 FF 
068f8     00 E4 85 F1 | 	sub	objptr, ##1536
068fc     F2 26 02 F1 | 	add	local05, objptr
06900     08 26 06 F1 | 	add	local05, #8
06904     13 39 68 FC | 	wrlong	#28, local05
06908     03 00 00 FF 
0690c     00 E4 05 F1 | 	add	objptr, ##1536
06910     F2 28 02 FB | 	rdlong	local06, objptr
06914     14 27 02 F6 | 	mov	local05, local06
06918     01 26 66 F0 | 	shl	local05, #1
0691c     14 27 02 F1 | 	add	local05, local06
06920     02 26 66 F0 | 	shl	local05, #2
06924     03 00 00 FF 
06928     00 E4 85 F1 | 	sub	objptr, ##1536
0692c     F2 26 02 F1 | 	add	local05, objptr
06930     13 2B 62 FC | 	wrlong	local07, local05
06934     03 00 00 FF 
06938     00 E4 05 F1 | 	add	objptr, ##1536
0693c     F2 2A 02 FB | 	rdlong	local07, objptr
06940     01 2A 06 F1 | 	add	local07, #1
06944     F2 2A 62 FC | 	wrlong	local07, objptr
06948     15 29 02 F6 | 	mov	local06, local07
0694c     01 28 66 F0 | 	shl	local06, #1
06950     15 29 02 F1 | 	add	local06, local07
06954     02 28 66 F0 | 	shl	local06, #2
06958     03 00 00 FF 
0695c     00 E4 85 F1 | 	sub	objptr, ##1536
06960     F2 28 02 F1 | 	add	local06, objptr
06964     08 28 06 F1 | 	add	local06, #8
06968     14 95 68 FC | 	wrlong	#74, local06
0696c     03 00 00 FF 
06970     00 E4 05 F1 | 	add	objptr, ##1536
06974     F2 2A 02 FB | 	rdlong	local07, objptr
06978     15 29 02 F6 | 	mov	local06, local07
0697c     01 28 66 F0 | 	shl	local06, #1
06980     15 29 02 F1 | 	add	local06, local07
06984     02 28 66 F0 | 	shl	local06, #2
06988     03 00 00 FF 
0698c     00 E4 85 F1 | 	sub	objptr, ##1536
06990     F2 28 02 F1 | 	add	local06, objptr
06994     14 01 68 FC | 	wrlong	#0, local06
06998     03 00 00 FF 
0699c     00 E4 05 F1 | 	add	objptr, ##1536
069a0     F2 2A 02 FB | 	rdlong	local07, objptr
069a4     01 2A 06 F1 | 	add	local07, #1
069a8     F2 2A 62 FC | 	wrlong	local07, objptr
069ac     41 00 00 FF 
069b0     40 E4 85 F1 | 	sub	objptr, ##33344
069b4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
069b4                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
069b4                 | ' 
069b4                 | ' 
069b4                 | ' return 0
069b4     00 FA 05 F6 | 	mov	result1, #0
069b8                 | LR__0576
069b8     A7 F0 03 F6 | 	mov	ptra, fp
069bc     B2 00 A0 FD | 	call	#popregs_
069c0                 | _compile_for_ret
069c0     2D 00 64 FD | 	ret
069c4                 | 
069c4                 | ' 
069c4                 | ' 
069c4                 | ' sub do_for()
069c4                 | _do_for
069c4     05 4A 05 F6 | 	mov	COUNT_, #5
069c8     A8 00 A0 FD | 	call	#pushregs_
069cc     50 00 00 FF 
069d0     9C E5 05 F1 | 	add	objptr, ##41372
069d4     F2 24 02 FB | 	rdlong	local04, objptr
069d8     01 24 06 F1 | 	add	local04, #1
069dc     F2 24 62 FC | 	wrlong	local04, objptr
069e0     50 00 00 FF 
069e4     9C E5 85 F1 | 	sub	objptr, ##41372
069e8     48 1D B0 FD | 	call	#_pop
069ec     FD 1E 02 F6 | 	mov	local01, result1
069f0     FE 20 02 F6 | 	mov	local02, result2
069f4     FF 22 02 F6 | 	mov	local03, result3
069f8     50 00 00 FF 
069fc     9C E5 05 F1 | 	add	objptr, ##41372
06a00     F2 24 02 FB | 	rdlong	local04, objptr
06a04     12 27 02 F6 | 	mov	local05, local04
06a08     02 26 66 F0 | 	shl	local05, #2
06a0c     12 27 02 F1 | 	add	local05, local04
06a10     02 26 66 F0 | 	shl	local05, #2
06a14     07 00 00 FF 
06a18     40 E5 85 F1 | 	sub	objptr, ##3904
06a1c     F2 26 02 F1 | 	add	local05, objptr
06a20     08 26 06 F1 | 	add	local05, #8
06a24     13 1F 62 FC | 	wrlong	local01, local05
06a28     49 00 00 FF 
06a2c     5C E4 85 F1 | 	sub	objptr, ##37468
06a30     00 1D B0 FD | 	call	#_pop
06a34     FD 1E 02 F6 | 	mov	local01, result1
06a38     FE 20 02 F6 | 	mov	local02, result2
06a3c     FF 22 02 F6 | 	mov	local03, result3
06a40     50 00 00 FF 
06a44     9C E5 05 F1 | 	add	objptr, ##41372
06a48     F2 24 02 FB | 	rdlong	local04, objptr
06a4c     12 27 02 F6 | 	mov	local05, local04
06a50     02 26 66 F0 | 	shl	local05, #2
06a54     12 27 02 F1 | 	add	local05, local04
06a58     02 26 66 F0 | 	shl	local05, #2
06a5c     07 00 00 FF 
06a60     40 E5 85 F1 | 	sub	objptr, ##3904
06a64     F2 26 02 F1 | 	add	local05, objptr
06a68     0C 26 06 F1 | 	add	local05, #12
06a6c     13 1F 62 FC | 	wrlong	local01, local05
06a70     49 00 00 FF 
06a74     5C E4 85 F1 | 	sub	objptr, ##37468
06a78     B8 1C B0 FD | 	call	#_pop
06a7c     FD 1E 02 F6 | 	mov	local01, result1
06a80     FE 20 02 F6 | 	mov	local02, result2
06a84     FF 22 02 F6 | 	mov	local03, result3
06a88     50 00 00 FF 
06a8c     9C E5 05 F1 | 	add	objptr, ##41372
06a90     F2 24 02 FB | 	rdlong	local04, objptr
06a94     12 27 02 F6 | 	mov	local05, local04
06a98     02 26 66 F0 | 	shl	local05, #2
06a9c     12 27 02 F1 | 	add	local05, local04
06aa0     02 26 66 F0 | 	shl	local05, #2
06aa4     07 00 00 FF 
06aa8     40 E5 85 F1 | 	sub	objptr, ##3904
06aac     F2 26 02 F1 | 	add	local05, objptr
06ab0     10 26 06 F1 | 	add	local05, #16
06ab4     13 1F 62 FC | 	wrlong	local01, local05
06ab8                 | ' fortop+=1
06ab8                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06ab8                 | ' 'if i> maxfor then printerror(36) : return
06ab8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06ab8                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06ab8                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06ab8                 | ' if compiledline(lineptr_e).result_type=token_end then
06ab8     08 00 00 FF 
06abc     18 E4 85 F1 | 	sub	objptr, ##4120
06ac0     F2 1E 02 FB | 	rdlong	local01, objptr
06ac4     0F 27 02 F6 | 	mov	local05, local01
06ac8     01 26 66 F0 | 	shl	local05, #1
06acc     0F 27 02 F1 | 	add	local05, local01
06ad0     02 26 66 F0 | 	shl	local05, #2
06ad4     03 00 00 FF 
06ad8     04 E4 85 F1 | 	sub	objptr, ##1540
06adc     F2 26 02 F1 | 	add	local05, objptr
06ae0     08 26 06 F1 | 	add	local05, #8
06ae4     13 27 02 FB | 	rdlong	local05, local05
06ae8     FE 27 0E F2 | 	cmp	local05, #510 wz
06aec     3E 00 00 FF 
06af0     40 E4 85 F1 | 	sub	objptr, ##31808
06af4     70 00 90 5D |  if_ne	jmp	#LR__0580
06af8     50 00 00 FF 
06afc     9C E5 05 F1 | 	add	objptr, ##41372
06b00     F2 1E 02 FB | 	rdlong	local01, objptr
06b04     0F 27 02 F6 | 	mov	local05, local01
06b08     02 26 66 F0 | 	shl	local05, #2
06b0c     0F 27 02 F1 | 	add	local05, local01
06b10     02 26 66 F0 | 	shl	local05, #2
06b14     07 00 00 FF 
06b18     40 E5 85 F1 | 	sub	objptr, ##3904
06b1c     F2 26 02 F1 | 	add	local05, objptr
06b20     07 00 00 FF 
06b24     18 E5 05 F1 | 	add	objptr, ##3864
06b28     F2 1E 02 FB | 	rdlong	local01, objptr
06b2c     13 1F 62 FC | 	wrlong	local01, local05
06b30     28 E4 05 F1 | 	add	objptr, #40
06b34     F2 1E 02 FB | 	rdlong	local01, objptr
06b38     0F 27 02 F6 | 	mov	local05, local01
06b3c     02 26 66 F0 | 	shl	local05, #2
06b40     0F 27 02 F1 | 	add	local05, local01
06b44     02 26 66 F0 | 	shl	local05, #2
06b48     07 00 00 FF 
06b4c     40 E5 85 F1 | 	sub	objptr, ##3904
06b50     F2 26 02 F1 | 	add	local05, objptr
06b54     04 26 06 F1 | 	add	local05, #4
06b58     13 01 68 FC | 	wrlong	#0, local05
06b5c     49 00 00 FF 
06b60     5C E4 85 F1 | 	sub	objptr, ##37468
06b64     7C 00 90 FD | 	jmp	#LR__0581
06b68                 | LR__0580
06b68     50 00 00 FF 
06b6c     9C E5 05 F1 | 	add	objptr, ##41372
06b70     F2 1E 02 FB | 	rdlong	local01, objptr
06b74     0F 27 02 F6 | 	mov	local05, local01
06b78     02 26 66 F0 | 	shl	local05, #2
06b7c     0F 27 02 F1 | 	add	local05, local01
06b80     02 26 66 F0 | 	shl	local05, #2
06b84     07 00 00 FF 
06b88     40 E5 85 F1 | 	sub	objptr, ##3904
06b8c     F2 26 02 F1 | 	add	local05, objptr
06b90     07 00 00 FF 
06b94     20 E5 05 F1 | 	add	objptr, ##3872
06b98     F2 1E 02 FB | 	rdlong	local01, objptr
06b9c     13 1F 62 FC | 	wrlong	local01, local05
06ba0     20 E4 05 F1 | 	add	objptr, #32
06ba4     F2 1E 02 FB | 	rdlong	local01, objptr
06ba8     0F 27 02 F6 | 	mov	local05, local01
06bac     02 26 66 F0 | 	shl	local05, #2
06bb0     0F 27 02 F1 | 	add	local05, local01
06bb4     02 26 66 F0 | 	shl	local05, #2
06bb8     07 00 00 FF 
06bbc     40 E5 85 F1 | 	sub	objptr, ##3904
06bc0     F2 26 02 F1 | 	add	local05, objptr
06bc4     08 00 00 FF 
06bc8     18 E4 85 F1 | 	sub	objptr, ##4120
06bcc     F2 1E 02 FB | 	rdlong	local01, objptr
06bd0     41 00 00 FF 
06bd4     44 E4 85 F1 | 	sub	objptr, ##33348
06bd8     01 1E 06 F1 | 	add	local01, #1
06bdc     04 26 06 F1 | 	add	local05, #4
06be0     13 1F 62 FC | 	wrlong	local01, local05
06be4                 | LR__0581
06be4     A7 F0 03 F6 | 	mov	ptra, fp
06be8     B2 00 A0 FD | 	call	#popregs_
06bec                 | _do_for_ret
06bec     2D 00 64 FD | 	ret
06bf0                 | 
06bf0                 | ' 
06bf0                 | ' ' now do_next todo
06bf0                 | ' 
06bf0                 | ' sub do_next()
06bf0                 | _do_next
06bf0     04 4A 05 F6 | 	mov	COUNT_, #4
06bf4     A8 00 A0 FD | 	call	#pushregs_
06bf8     38 1B B0 FD | 	call	#_pop
06bfc     FD 1E 02 F6 | 	mov	local01, result1
06c00     FE 20 02 F6 | 	mov	local02, result2
06c04     FF 22 02 F6 | 	mov	local03, result3
06c08                 | ' 
06c08                 | ' t1=pop() :varnum=t1.result.uresult
06c08                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06c08     50 00 00 FF 
06c0c     9C E5 05 F1 | 	add	objptr, ##41372
06c10     F2 12 02 FB | 	rdlong	arg01, objptr
06c14     09 25 02 F6 | 	mov	local04, arg01
06c18     02 24 66 F0 | 	shl	local04, #2
06c1c     09 25 02 F1 | 	add	local04, arg01
06c20     02 24 66 F0 | 	shl	local04, #2
06c24     07 00 00 FF 
06c28     40 E5 85 F1 | 	sub	objptr, ##3904
06c2c     F2 24 02 F1 | 	add	local04, objptr
06c30     08 24 06 F1 | 	add	local04, #8
06c34     12 25 02 FB | 	rdlong	local04, local04
06c38     0F 25 0A F2 | 	cmp	local04, local01 wz
06c3c     49 00 00 FF 
06c40     5C E4 85 F1 | 	sub	objptr, ##37468
06c44     0C 00 90 AD |  if_e	jmp	#LR__0590
06c48     25 12 06 F6 | 	mov	arg01, #37
06c4c     6C B3 B0 FD | 	call	#_printerror
06c50     28 02 90 FD | 	jmp	#LR__0594
06c54                 | LR__0590
06c54     50 00 00 FF 
06c58     9C E5 05 F1 | 	add	objptr, ##41372
06c5c     F2 12 02 FB | 	rdlong	arg01, objptr
06c60     09 25 02 F6 | 	mov	local04, arg01
06c64     02 24 66 F0 | 	shl	local04, #2
06c68     09 25 02 F1 | 	add	local04, arg01
06c6c     02 24 66 F0 | 	shl	local04, #2
06c70     07 00 00 FF 
06c74     40 E5 85 F1 | 	sub	objptr, ##3904
06c78     F2 24 02 F1 | 	add	local04, objptr
06c7c     0C 24 06 F1 | 	add	local04, #12
06c80     12 25 02 FB | 	rdlong	local04, local04
06c84     0F 13 02 F6 | 	mov	arg01, local01
06c88     04 12 66 F0 | 	shl	arg01, #4
06c8c     3D 00 00 FF 
06c90     90 E4 85 F1 | 	sub	objptr, ##31376
06c94     F2 12 02 F1 | 	add	arg01, objptr
06c98     0F FF 01 F6 | 	mov	result3, local01
06c9c     04 FE 65 F0 | 	shl	result3, #4
06ca0     F2 FE 01 F1 | 	add	result3, objptr
06ca4     04 FE 05 F1 | 	add	result3, #4
06ca8     FF FE 01 FB | 	rdlong	result3, result3
06cac     12 FF 01 F1 | 	add	result3, local04
06cb0     04 12 06 F1 | 	add	arg01, #4
06cb4     09 FF 61 FC | 	wrlong	result3, arg01
06cb8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06cb8                 | ' if fortable(fortop).stepval>0 then
06cb8     44 00 00 FF 
06cbc     D0 E5 05 F1 | 	add	objptr, ##35280
06cc0     F2 12 02 FB | 	rdlong	arg01, objptr
06cc4     09 25 02 F6 | 	mov	local04, arg01
06cc8     02 24 66 F0 | 	shl	local04, #2
06ccc     09 25 02 F1 | 	add	local04, arg01
06cd0     02 24 66 F0 | 	shl	local04, #2
06cd4     07 00 00 FF 
06cd8     40 E5 85 F1 | 	sub	objptr, ##3904
06cdc     F2 24 02 F1 | 	add	local04, objptr
06ce0     0C 24 06 F1 | 	add	local04, #12
06ce4     12 25 02 FB | 	rdlong	local04, local04
06ce8     01 24 56 F2 | 	cmps	local04, #1 wc
06cec     49 00 00 FF 
06cf0     5C E4 85 F1 | 	sub	objptr, ##37468
06cf4     78 00 90 CD |  if_b	jmp	#LR__0591
06cf8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06cf8     04 1E 66 F0 | 	shl	local01, #4
06cfc     0B 00 00 FF 
06d00     CC E5 05 F1 | 	add	objptr, ##6092
06d04     F2 1E 02 F1 | 	add	local01, objptr
06d08     44 00 00 FF 
06d0c     D0 E5 05 F1 | 	add	objptr, ##35280
06d10     F2 24 02 FB | 	rdlong	local04, objptr
06d14     12 13 02 F6 | 	mov	arg01, local04
06d18     02 12 66 F0 | 	shl	arg01, #2
06d1c     12 13 02 F1 | 	add	arg01, local04
06d20     02 12 66 F0 | 	shl	arg01, #2
06d24     07 00 00 FF 
06d28     40 E5 85 F1 | 	sub	objptr, ##3904
06d2c     F2 12 02 F1 | 	add	arg01, objptr
06d30     04 1E 06 F1 | 	add	local01, #4
06d34     0F 25 02 FB | 	rdlong	local04, local01
06d38     10 12 06 F1 | 	add	arg01, #16
06d3c     09 13 02 FB | 	rdlong	arg01, arg01
06d40     09 25 5A F2 | 	cmps	local04, arg01 wcz
06d44     49 00 00 FF 
06d48     5C E4 85 F1 | 	sub	objptr, ##37468
06d4c     9C 00 90 ED |  if_be	jmp	#LR__0593
06d50     50 00 00 FF 
06d54     9C E5 05 F1 | 	add	objptr, ##41372
06d58     F2 24 02 FB | 	rdlong	local04, objptr
06d5c     01 24 86 F1 | 	sub	local04, #1
06d60     F2 24 62 FC | 	wrlong	local04, objptr
06d64     50 00 00 FF 
06d68     9C E5 85 F1 | 	sub	objptr, ##41372
06d6c     0C 01 90 FD | 	jmp	#LR__0594
06d70                 | LR__0591
06d70                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
06d70     0F 13 02 F6 | 	mov	arg01, local01
06d74     04 12 66 F0 | 	shl	arg01, #4
06d78     0B 00 00 FF 
06d7c     CC E5 05 F1 | 	add	objptr, ##6092
06d80     F2 12 02 F1 | 	add	arg01, objptr
06d84     44 00 00 FF 
06d88     D0 E5 05 F1 | 	add	objptr, ##35280
06d8c     F2 24 02 FB | 	rdlong	local04, objptr
06d90     12 1F 02 F6 | 	mov	local01, local04
06d94     02 1E 66 F0 | 	shl	local01, #2
06d98     12 1F 02 F1 | 	add	local01, local04
06d9c     02 1E 66 F0 | 	shl	local01, #2
06da0     07 00 00 FF 
06da4     40 E5 85 F1 | 	sub	objptr, ##3904
06da8     F2 1E 02 F1 | 	add	local01, objptr
06dac     04 12 06 F1 | 	add	arg01, #4
06db0     09 13 02 FB | 	rdlong	arg01, arg01
06db4     10 1E 06 F1 | 	add	local01, #16
06db8     0F 1F 02 FB | 	rdlong	local01, local01
06dbc     0F 13 52 F2 | 	cmps	arg01, local01 wc
06dc0     49 00 00 FF 
06dc4     5C E4 85 F1 | 	sub	objptr, ##37468
06dc8     20 00 90 3D |  if_ae	jmp	#LR__0592
06dcc     50 00 00 FF 
06dd0     9C E5 05 F1 | 	add	objptr, ##41372
06dd4     F2 24 02 FB | 	rdlong	local04, objptr
06dd8     01 24 86 F1 | 	sub	local04, #1
06ddc     F2 24 62 FC | 	wrlong	local04, objptr
06de0     50 00 00 FF 
06de4     9C E5 85 F1 | 	sub	objptr, ##41372
06de8     90 00 90 FD | 	jmp	#LR__0594
06dec                 | LR__0592
06dec                 | LR__0593
06dec     50 00 00 FF 
06df0     9C E5 05 F1 | 	add	objptr, ##41372
06df4     F2 1E 02 FB | 	rdlong	local01, objptr
06df8     0F 25 02 F6 | 	mov	local04, local01
06dfc     02 24 66 F0 | 	shl	local04, #2
06e00     0F 25 02 F1 | 	add	local04, local01
06e04     02 24 66 F0 | 	shl	local04, #2
06e08     07 00 00 FF 
06e0c     40 E5 85 F1 | 	sub	objptr, ##3904
06e10     F2 24 02 F1 | 	add	local04, objptr
06e14     12 25 02 FB | 	rdlong	local04, local04
06e18     07 00 00 FF 
06e1c     18 E5 05 F1 | 	add	objptr, ##3864
06e20     F2 24 62 FC | 	wrlong	local04, objptr
06e24     28 E4 05 F1 | 	add	objptr, #40
06e28     F2 1E 02 FB | 	rdlong	local01, objptr
06e2c     0F 25 02 F6 | 	mov	local04, local01
06e30     02 24 66 F0 | 	shl	local04, #2
06e34     0F 25 02 F1 | 	add	local04, local01
06e38     02 24 66 F0 | 	shl	local04, #2
06e3c     07 00 00 FF 
06e40     40 E5 85 F1 | 	sub	objptr, ##3904
06e44     F2 24 02 F1 | 	add	local04, objptr
06e48     04 24 06 F1 | 	add	local04, #4
06e4c     12 25 02 FB | 	rdlong	local04, local04
06e50     07 00 00 FF 
06e54     1C E5 05 F1 | 	add	objptr, ##3868
06e58     F2 24 62 FC | 	wrlong	local04, objptr
06e5c     0F 00 00 FF 
06e60     38 E5 85 F1 | 	sub	objptr, ##7992
06e64     F2 24 02 FB | 	rdlong	local04, objptr
06e68     01 24 86 F1 | 	sub	local04, #1
06e6c     04 E4 05 F1 | 	add	objptr, #4
06e70     F2 24 62 FC | 	wrlong	local04, objptr
06e74     41 00 00 FF 
06e78     44 E4 85 F1 | 	sub	objptr, ##33348
06e7c                 | LR__0594
06e7c     A7 F0 03 F6 | 	mov	ptra, fp
06e80     B2 00 A0 FD | 	call	#popregs_
06e84                 | _do_next_ret
06e84     2D 00 64 FD | 	ret
06e88                 | 
06e88                 | ' 
06e88                 | ' 
06e88                 | ' function compile_next() as ulong
06e88                 | _compile_next
06e88     04 4A 05 F6 | 	mov	COUNT_, #4
06e8c     A8 00 A0 FD | 	call	#pushregs_
06e90     2E 00 00 FF 
06e94     08 E4 05 F1 | 	add	objptr, ##23560
06e98     F2 12 02 FB | 	rdlong	arg01, objptr
06e9c     03 12 66 F0 | 	shl	arg01, #3
06ea0     02 00 00 FF 
06ea4     38 E4 85 F1 | 	sub	objptr, ##1080
06ea8     F2 12 02 F1 | 	add	arg01, objptr
06eac     09 1F 02 FB | 	rdlong	local01, arg01
06eb0                 | ' 
06eb0                 | ' varname$=lparts(ct).part$ 
06eb0                 | ' 'suffix$=right$(varname$,1)
06eb0                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
06eb0                 | ' if varnum=0 then compile_error(35)  : return 35
06eb0     04 E4 85 F1 | 	sub	objptr, #4
06eb4     F2 14 0A FB | 	rdlong	arg02, objptr wz
06eb8     2B 00 00 FF 
06ebc     CC E5 85 F1 | 	sub	objptr, ##22476
06ec0     10 00 90 5D |  if_ne	jmp	#LR__0600
06ec4     23 12 06 F6 | 	mov	arg01, #35
06ec8     98 DF BF FD | 	call	#_compile_error
06ecc     23 FA 05 F6 | 	mov	result1, #35
06ed0     58 01 90 FD | 	jmp	#LR__0604
06ed4                 | LR__0600
06ed4     01 20 66 F6 | 	neg	local02, #1
06ed8                 | ' j=-1
06ed8                 | ' for i=0 to varnum-1
06ed8     00 22 06 F6 | 	mov	local03, #0
06edc     2B 00 00 FF 
06ee0     CC E5 05 F1 | 	add	objptr, ##22476
06ee4     F2 24 02 FB | 	rdlong	local04, objptr
06ee8     2B 00 00 FF 
06eec     CC E5 85 F1 | 	sub	objptr, ##22476
06ef0                 | LR__0601
06ef0     12 23 12 F2 | 	cmp	local03, local04 wc
06ef4     38 00 90 3D |  if_ae	jmp	#LR__0602
06ef8                 | '   if variables(i).name=varname$ then j=i : exit
06ef8     11 15 02 F6 | 	mov	arg02, local03
06efc     04 14 66 F0 | 	shl	arg02, #4
06f00     0B 00 00 FF 
06f04     CC E5 05 F1 | 	add	objptr, ##6092
06f08     F2 14 02 F1 | 	add	arg02, objptr
06f0c     0A 13 02 FB | 	rdlong	arg01, arg02
06f10     0F 15 02 F6 | 	mov	arg02, local01
06f14     0B 00 00 FF 
06f18     CC E5 85 F1 | 	sub	objptr, ##6092
06f1c     B8 E5 B0 FD | 	call	#__system___string_cmp
06f20     00 FA 0D F2 | 	cmp	result1, #0 wz
06f24     11 21 02 A6 |  if_e	mov	local02, local03
06f28     01 22 06 51 |  if_ne	add	local03, #1
06f2c     C0 FF 9F 5D |  if_ne	jmp	#LR__0601
06f30                 | LR__0602
06f30                 | ' if j=-1 then compile_error(35) : return 35
06f30     FF FF 7F FF 
06f34     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06f38     10 00 90 5D |  if_ne	jmp	#LR__0603
06f3c     23 12 06 F6 | 	mov	arg01, #35
06f40     20 DF BF FD | 	call	#_compile_error
06f44     23 FA 05 F6 | 	mov	result1, #35
06f48     E0 00 90 FD | 	jmp	#LR__0604
06f4c                 | LR__0603
06f4c     41 00 00 FF 
06f50     40 E4 05 F1 | 	add	objptr, ##33344
06f54     F2 24 02 FB | 	rdlong	local04, objptr
06f58     12 23 02 F6 | 	mov	local03, local04
06f5c     01 22 66 F0 | 	shl	local03, #1
06f60     12 23 02 F1 | 	add	local03, local04
06f64     02 22 66 F0 | 	shl	local03, #2
06f68     03 00 00 FF 
06f6c     00 E4 85 F1 | 	sub	objptr, ##1536
06f70     F2 22 02 F1 | 	add	local03, objptr
06f74     08 22 06 F1 | 	add	local03, #8
06f78     11 39 68 FC | 	wrlong	#28, local03
06f7c     03 00 00 FF 
06f80     00 E4 05 F1 | 	add	objptr, ##1536
06f84     F2 24 02 FB | 	rdlong	local04, objptr
06f88     12 23 02 F6 | 	mov	local03, local04
06f8c     01 22 66 F0 | 	shl	local03, #1
06f90     12 23 02 F1 | 	add	local03, local04
06f94     02 22 66 F0 | 	shl	local03, #2
06f98     03 00 00 FF 
06f9c     00 E4 85 F1 | 	sub	objptr, ##1536
06fa0     F2 22 02 F1 | 	add	local03, objptr
06fa4     11 21 62 FC | 	wrlong	local02, local03
06fa8     03 00 00 FF 
06fac     00 E4 05 F1 | 	add	objptr, ##1536
06fb0     F2 24 02 FB | 	rdlong	local04, objptr
06fb4     01 24 06 F1 | 	add	local04, #1
06fb8     F2 24 62 FC | 	wrlong	local04, objptr
06fbc     12 23 02 F6 | 	mov	local03, local04
06fc0     01 22 66 F0 | 	shl	local03, #1
06fc4     12 23 02 F1 | 	add	local03, local04
06fc8     02 22 66 F0 | 	shl	local03, #2
06fcc     03 00 00 FF 
06fd0     00 E4 85 F1 | 	sub	objptr, ##1536
06fd4     F2 22 02 F1 | 	add	local03, objptr
06fd8     08 22 06 F1 | 	add	local03, #8
06fdc     11 97 68 FC | 	wrlong	#75, local03
06fe0     03 00 00 FF 
06fe4     00 E4 05 F1 | 	add	objptr, ##1536
06fe8     F2 24 02 FB | 	rdlong	local04, objptr
06fec     12 23 02 F6 | 	mov	local03, local04
06ff0     01 22 66 F0 | 	shl	local03, #1
06ff4     12 23 02 F1 | 	add	local03, local04
06ff8     02 22 66 F0 | 	shl	local03, #2
06ffc     03 00 00 FF 
07000     00 E4 85 F1 | 	sub	objptr, ##1536
07004     F2 22 02 F1 | 	add	local03, objptr
07008     11 01 68 FC | 	wrlong	#0, local03
0700c     03 00 00 FF 
07010     00 E4 05 F1 | 	add	objptr, ##1536
07014     F2 24 02 FB | 	rdlong	local04, objptr
07018     01 24 06 F1 | 	add	local04, #1
0701c     F2 24 62 FC | 	wrlong	local04, objptr
07020     41 00 00 FF 
07024     40 E4 85 F1 | 	sub	objptr, ##33344
07028                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
07028                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
07028                 | ' return 0
07028     00 FA 05 F6 | 	mov	result1, #0
0702c                 | LR__0604
0702c     A7 F0 03 F6 | 	mov	ptra, fp
07030     B2 00 A0 FD | 	call	#popregs_
07034                 | _compile_next_ret
07034     2D 00 64 FD | 	ret
07038                 | 
07038                 | ' 
07038                 | ' 
07038                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
07038                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
07038                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
07038                 | ' 
07038                 | ' 
07038                 | ' function compile_goto( ) as ulong
07038                 | _compile_goto
07038     03 4A 05 F6 | 	mov	COUNT_, #3
0703c     A8 00 A0 FD | 	call	#pushregs_
07040     28 F0 07 F1 | 	add	ptra, #40
07044                 | ' 
07044                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
07044     2E 00 00 FF 
07048     08 E4 05 F1 | 	add	objptr, ##23560
0704c     F2 16 02 FB | 	rdlong	arg03, objptr
07050     03 16 66 F0 | 	shl	arg03, #3
07054     02 00 00 FF 
07058     38 E4 85 F1 | 	sub	objptr, ##1080
0705c     F2 16 02 F1 | 	add	arg03, objptr
07060     04 16 06 F1 | 	add	arg03, #4
07064     0B 17 02 FB | 	rdlong	arg03, arg03
07068     01 00 00 FF 
0706c     00 16 0E F2 | 	cmp	arg03, ##512 wz
07070     2B 00 00 FF 
07074     D0 E5 85 F1 | 	sub	objptr, ##22480
07078     CC 02 90 5D |  if_ne	jmp	#LR__0615
0707c     2E 00 00 FF 
07080     08 E4 05 F1 | 	add	objptr, ##23560
07084     F2 16 02 FB | 	rdlong	arg03, objptr
07088     01 16 06 F1 | 	add	arg03, #1
0708c     03 16 66 F0 | 	shl	arg03, #3
07090     02 00 00 FF 
07094     38 E4 85 F1 | 	sub	objptr, ##1080
07098     F2 16 02 F1 | 	add	arg03, objptr
0709c     04 16 06 F1 | 	add	arg03, #4
070a0     0B 17 02 FB | 	rdlong	arg03, arg03
070a4     FE 17 0E F2 | 	cmp	arg03, #510 wz
070a8     2B 00 00 FF 
070ac     D0 E5 85 F1 | 	sub	objptr, ##22480
070b0     94 02 90 5D |  if_ne	jmp	#LR__0615
070b4     2E 00 00 FF 
070b8     08 E4 05 F1 | 	add	objptr, ##23560
070bc     F2 16 02 FB | 	rdlong	arg03, objptr
070c0     03 16 66 F0 | 	shl	arg03, #3
070c4     02 00 00 FF 
070c8     38 E4 85 F1 | 	sub	objptr, ##1080
070cc     F2 16 02 F1 | 	add	arg03, objptr
070d0     0B 13 02 FB | 	rdlong	arg01, arg03
070d4     00 14 06 F6 | 	mov	arg02, #0
070d8     2B 00 00 FF 
070dc     D0 E5 85 F1 | 	sub	objptr, ##22480
070e0     58 14 B1 FD | 	call	#__system____builtin_atoi
070e4     04 4E 05 F1 | 	add	fp, #4
070e8     A7 FA 61 FC | 	wrlong	result1, fp
070ec     41 00 00 FF 
070f0     40 E4 05 F1 | 	add	objptr, ##33344
070f4     F2 1E 02 FB | 	rdlong	local01, objptr
070f8     0F 21 02 F6 | 	mov	local02, local01
070fc     01 20 66 F0 | 	shl	local02, #1
07100     0F 21 02 F1 | 	add	local02, local01
07104     02 20 66 F0 | 	shl	local02, #2
07108     03 00 00 FF 
0710c     00 E4 85 F1 | 	sub	objptr, ##1536
07110     F2 20 02 F1 | 	add	local02, objptr
07114     08 20 06 F1 | 	add	local02, #8
07118     10 9D 68 FC | 	wrlong	#78, local02
0711c     03 00 00 FF 
07120     08 E4 05 F1 | 	add	objptr, ##1544
07124     F2 22 02 FB | 	rdlong	local03, objptr
07128     41 00 00 FF 
0712c     48 E4 85 F1 | 	sub	objptr, ##33352
07130     04 4E 05 F1 | 	add	fp, #4
07134     A7 22 62 FC | 	wrlong	local03, fp
07138     08 4E 85 F1 | 	sub	fp, #8
0713c                 | ' 
0713c                 | '   gotoline=val%(lparts(ct).part$) 
0713c                 | '   compiledline(lineptr).result_type=token_fast_goto
0713c                 | ' ' now find a pointer to goto
0713c                 | '   gotoptr=programstart
0713c                 | '   do
0713c                 | LR__0610
0713c     10 4E 05 F1 | 	add	fp, #16
07140     A7 12 02 F6 | 	mov	arg01, fp
07144     08 4E 85 F1 | 	sub	fp, #8
07148     A7 14 02 FB | 	rdlong	arg02, fp
0714c     08 4E 85 F1 | 	sub	fp, #8
07150     18 16 06 F6 | 	mov	arg03, #24
07154     0B 00 00 FF 
07158     C0 E4 05 F1 | 	add	objptr, ##5824
0715c     64 D8 B0 FD | 	call	#_psram_spin2_read1
07160     0B 00 00 FF 
07164     C0 E4 85 F1 | 	sub	objptr, ##5824
07168                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
07168                 | '     if gotoheader(0)<>$FFFFFFFF then
07168     10 4E 05 F1 | 	add	fp, #16
0716c     A7 22 02 FB | 	rdlong	local03, fp
07170     10 4E 85 F1 | 	sub	fp, #16
07174     FF FF 7F FF 
07178     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0717c     24 00 90 AD |  if_e	jmp	#LR__0611
07180     08 4E 05 F1 | 	add	fp, #8
07184     A7 22 02 FB | 	rdlong	local03, fp
07188     04 4E 05 F1 | 	add	fp, #4
0718c     A7 22 62 FC | 	wrlong	local03, fp
07190     18 4E 05 F1 | 	add	fp, #24
07194     A7 22 02 FB | 	rdlong	local03, fp
07198     1C 4E 85 F1 | 	sub	fp, #28
0719c     A7 22 62 FC | 	wrlong	local03, fp
071a0     08 4E 85 F1 | 	sub	fp, #8
071a4                 | LR__0611
071a4     24 4E 05 F1 | 	add	fp, #36
071a8     A7 22 02 FB | 	rdlong	local03, fp
071ac     24 4E 85 F1 | 	sub	fp, #36
071b0     FF FF 3F FF 
071b4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
071b8     10 4E 05 51 |  if_ne	add	fp, #16
071bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
071c0     10 4E 85 51 |  if_ne	sub	fp, #16
071c4     FF FF 7F 5F 
071c8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
071cc     1C 00 90 AD |  if_e	jmp	#LR__0612
071d0     10 4E 05 F1 | 	add	fp, #16
071d4     A7 22 02 FB | 	rdlong	local03, fp
071d8     0C 4E 85 F1 | 	sub	fp, #12
071dc     A7 20 02 FB | 	rdlong	local02, fp
071e0     04 4E 85 F1 | 	sub	fp, #4
071e4     10 23 0A F2 | 	cmp	local03, local02 wz
071e8     50 FF 9F 5D |  if_ne	jmp	#LR__0610
071ec                 | LR__0612
071ec                 | '   if gotoheader(0)=gotoline then
071ec     10 4E 05 F1 | 	add	fp, #16
071f0     A7 22 02 FB | 	rdlong	local03, fp
071f4     0C 4E 85 F1 | 	sub	fp, #12
071f8     A7 1E 02 FB | 	rdlong	local01, fp
071fc     04 4E 85 F1 | 	sub	fp, #4
07200     0F 23 0A F2 | 	cmp	local03, local01 wz
07204     7C 00 90 5D |  if_ne	jmp	#LR__0613
07208     41 00 00 FF 
0720c     40 E4 05 F1 | 	add	objptr, ##33344
07210     F2 1E 02 FB | 	rdlong	local01, objptr
07214     0F 21 02 F6 | 	mov	local02, local01
07218     01 20 66 F0 | 	shl	local02, #1
0721c     0F 21 02 F1 | 	add	local02, local01
07220     02 20 66 F0 | 	shl	local02, #2
07224     03 00 00 FF 
07228     00 E4 85 F1 | 	sub	objptr, ##1536
0722c     F2 20 02 F1 | 	add	local02, objptr
07230     0C 4E 05 F1 | 	add	fp, #12
07234     A7 22 02 FB | 	rdlong	local03, fp
07238     10 23 62 FC | 	wrlong	local03, local02
0723c     03 00 00 FF 
07240     00 E4 05 F1 | 	add	objptr, ##1536
07244     F2 1E 02 FB | 	rdlong	local01, objptr
07248     0F 21 02 F6 | 	mov	local02, local01
0724c     01 20 66 F0 | 	shl	local02, #1
07250     0F 21 02 F1 | 	add	local02, local01
07254     02 20 66 F0 | 	shl	local02, #2
07258     03 00 00 FF 
0725c     00 E4 85 F1 | 	sub	objptr, ##1536
07260     F2 20 02 F1 | 	add	local02, objptr
07264     08 4E 85 F1 | 	sub	fp, #8
07268     A7 22 02 FB | 	rdlong	local03, fp
0726c     04 4E 85 F1 | 	sub	fp, #4
07270     04 20 06 F1 | 	add	local02, #4
07274     10 23 62 FC | 	wrlong	local03, local02
07278     3E 00 00 FF 
0727c     40 E4 85 F1 | 	sub	objptr, ##31808
07280     A4 00 90 FD | 	jmp	#LR__0614
07284                 | LR__0613
07284     41 00 00 FF 
07288     40 E4 05 F1 | 	add	objptr, ##33344
0728c     F2 1E 02 FB | 	rdlong	local01, objptr
07290     0F 21 02 F6 | 	mov	local02, local01
07294     01 20 66 F0 | 	shl	local02, #1
07298     0F 21 02 F1 | 	add	local02, local01
0729c     02 20 66 F0 | 	shl	local02, #2
072a0     03 00 00 FF 
072a4     00 E4 85 F1 | 	sub	objptr, ##1536
072a8     F2 20 02 F1 | 	add	local02, objptr
072ac     00 00 C0 FF 
072b0     10 01 68 FC | 	wrlong	##-2147483648, local02
072b4     03 00 00 FF 
072b8     00 E4 05 F1 | 	add	objptr, ##1536
072bc     F2 1E 02 FB | 	rdlong	local01, objptr
072c0     0F 21 02 F6 | 	mov	local02, local01
072c4     01 20 66 F0 | 	shl	local02, #1
072c8     0F 21 02 F1 | 	add	local02, local01
072cc     02 20 66 F0 | 	shl	local02, #2
072d0     03 00 00 FF 
072d4     00 E4 85 F1 | 	sub	objptr, ##1536
072d8     F2 20 02 F1 | 	add	local02, objptr
072dc     04 4E 05 F1 | 	add	fp, #4
072e0     A7 22 02 FB | 	rdlong	local03, fp
072e4     04 4E 85 F1 | 	sub	fp, #4
072e8     04 20 06 F1 | 	add	local02, #4
072ec     10 23 62 FC | 	wrlong	local03, local02
072f0     03 00 00 FF 
072f4     00 E4 05 F1 | 	add	objptr, ##1536
072f8     F2 1E 02 FB | 	rdlong	local01, objptr
072fc     0F 21 02 F6 | 	mov	local02, local01
07300     01 20 66 F0 | 	shl	local02, #1
07304     0F 21 02 F1 | 	add	local02, local01
07308     02 20 66 F0 | 	shl	local02, #2
0730c     03 00 00 FF 
07310     00 E4 85 F1 | 	sub	objptr, ##1536
07314     F2 20 02 F1 | 	add	local02, objptr
07318     08 20 06 F1 | 	add	local02, #8
0731c     10 A7 68 FC | 	wrlong	#83, local02
07320     3E 00 00 FF 
07324     40 E4 85 F1 | 	sub	objptr, ##31808
07328                 | LR__0614
07328     41 00 00 FF 
0732c     40 E4 05 F1 | 	add	objptr, ##33344
07330     F2 22 02 FB | 	rdlong	local03, objptr
07334     01 22 06 F1 | 	add	local03, #1
07338     F2 22 62 FC | 	wrlong	local03, objptr
0733c     41 00 00 FF 
07340     40 E4 85 F1 | 	sub	objptr, ##33344
07344     40 00 90 FD | 	jmp	#LR__0616
07348                 | LR__0615
07348                 | '    print "We have a slow goto, todo  "
07348     00 12 06 F6 | 	mov	arg01, #0
0734c     14 37 B1 FD | 	call	#__system___getiolock_0348
07350     FD 12 02 F6 | 	mov	arg01, result1
07354     58 E1 B0 FD | 	call	#__system___lockmem
07358     24 01 00 FF 
0735c     EF 15 06 F6 | 	mov	arg02, ##@LR__4294
07360     00 12 06 F6 | 	mov	arg01, #0
07364     00 16 06 F6 | 	mov	arg03, #0
07368     38 EE B0 FD | 	call	#__system___basic_print_string
0736c     00 12 06 F6 | 	mov	arg01, #0
07370     0A 14 06 F6 | 	mov	arg02, #10
07374     00 16 06 F6 | 	mov	arg03, #0
07378     D0 ED B0 FD | 	call	#__system___basic_print_char
0737c     00 12 06 F6 | 	mov	arg01, #0
07380     E0 36 B1 FD | 	call	#__system___getiolock_0348
07384     FD 00 68 FC | 	wrlong	#0, result1
07388                 | LR__0616
07388                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
07388                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
07388                 | ' return 0
07388     00 FA 05 F6 | 	mov	result1, #0
0738c     A7 F0 03 F6 | 	mov	ptra, fp
07390     B2 00 A0 FD | 	call	#popregs_
07394                 | _compile_goto_ret
07394     2D 00 64 FD | 	ret
07398                 | 
07398                 | ' 
07398                 | ' 
07398                 | ' 
07398                 | ' 
07398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07398                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
07398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07398                 | ' 
07398                 | ' 
07398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07398                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
07398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07398                 | ' 
07398                 | ' 
07398                 | ' function expr() as integer 
07398                 | _expr
07398     07 4A 05 F6 | 	mov	COUNT_, #7
0739c     A8 00 A0 FD | 	call	#pushregs_
073a0                 | _expr_enter
073a0     2E 00 00 FF 
073a4     08 E4 05 F1 | 	add	objptr, ##23560
073a8     F2 24 02 FB | 	rdlong	local04, objptr
073ac     03 24 66 F0 | 	shl	local04, #3
073b0     02 00 00 FF 
073b4     38 E4 85 F1 | 	sub	objptr, ##1080
073b8     F2 24 02 F1 | 	add	local04, objptr
073bc     04 24 06 F1 | 	add	local04, #4
073c0     12 27 02 FB | 	rdlong	local05, local04
073c4                 | ' 
073c4                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
073c4     FE 27 0E F2 | 	cmp	local05, #510 wz
073c8     2B 00 00 FF 
073cc     D0 E5 85 F1 | 	sub	objptr, ##22480
073d0     C4 00 90 5D |  if_ne	jmp	#LR__0620
073d4     1D 1E 06 F6 | 	mov	local01, #29
073d8     FF 22 06 F6 | 	mov	local03, #255
073dc     0F 29 02 F6 | 	mov	local06, local01
073e0     10 2B 02 F6 | 	mov	local07, local02
073e4     11 1F 02 F6 | 	mov	local01, local03
073e8     41 00 00 FF 
073ec     40 E4 05 F1 | 	add	objptr, ##33344
073f0     F2 26 02 FB | 	rdlong	local05, objptr
073f4     13 25 02 F6 | 	mov	local04, local05
073f8     01 24 66 F0 | 	shl	local04, #1
073fc     13 25 02 F1 | 	add	local04, local05
07400     02 24 66 F0 | 	shl	local04, #2
07404     03 00 00 FF 
07408     00 E4 85 F1 | 	sub	objptr, ##1536
0740c     F2 24 02 F1 | 	add	local04, objptr
07410     12 29 62 FC | 	wrlong	local06, local04
07414     03 00 00 FF 
07418     00 E4 05 F1 | 	add	objptr, ##1536
0741c     F2 28 02 FB | 	rdlong	local06, objptr
07420     14 27 02 F6 | 	mov	local05, local06
07424     01 26 66 F0 | 	shl	local05, #1
07428     14 27 02 F1 | 	add	local05, local06
0742c     02 26 66 F0 | 	shl	local05, #2
07430     03 00 00 FF 
07434     00 E4 85 F1 | 	sub	objptr, ##1536
07438     F2 26 02 F1 | 	add	local05, objptr
0743c     04 26 06 F1 | 	add	local05, #4
07440     13 2B 62 FC | 	wrlong	local07, local05
07444     03 00 00 FF 
07448     00 E4 05 F1 | 	add	objptr, ##1536
0744c     F2 2A 02 FB | 	rdlong	local07, objptr
07450     15 29 02 F6 | 	mov	local06, local07
07454     01 28 66 F0 | 	shl	local06, #1
07458     15 29 02 F1 | 	add	local06, local07
0745c     02 28 66 F0 | 	shl	local06, #2
07460     03 00 00 FF 
07464     00 E4 85 F1 | 	sub	objptr, ##1536
07468     F2 28 02 F1 | 	add	local06, objptr
0746c     08 28 06 F1 | 	add	local06, #8
07470     14 1F 62 FC | 	wrlong	local01, local06
07474     03 00 00 FF 
07478     00 E4 05 F1 | 	add	objptr, ##1536
0747c     F2 28 02 FB | 	rdlong	local06, objptr
07480     01 28 06 F1 | 	add	local06, #1
07484     F2 28 62 FC | 	wrlong	local06, objptr
07488     41 00 00 FF 
0748c     40 E4 85 F1 | 	sub	objptr, ##33344
07490     1D FA 05 F6 | 	mov	result1, #29
07494     54 01 90 FD | 	jmp	#LR__0623
07498                 | LR__0620
07498     00 1E 06 F6 | 	mov	local01, #0
0749c     58 01 B0 FD | 	call	#_addsub
074a0     2E 00 00 FF 
074a4     08 E4 05 F1 | 	add	objptr, ##23560
074a8     F2 24 02 FB | 	rdlong	local04, objptr
074ac     03 24 66 F0 | 	shl	local04, #3
074b0     02 00 00 FF 
074b4     38 E4 85 F1 | 	sub	objptr, ##1080
074b8     F2 24 02 F1 | 	add	local04, objptr
074bc     04 24 06 F1 | 	add	local04, #4
074c0     12 27 02 FB | 	rdlong	local05, local04
074c4                 | ' t3.result.uresult=0
074c4                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
074c4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
074c4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
074c4     2B 00 00 FF 
074c8     D0 E5 85 F1 | 	sub	objptr, ##22480
074cc                 | LR__0621
074cc     1B 26 0E F2 | 	cmp	local05, #27 wz
074d0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
074d4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
074d8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
074dc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
074e0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
074e4     00 01 90 5D |  if_ne	jmp	#LR__0622
074e8     2E 00 00 FF 
074ec     08 E4 05 F1 | 	add	objptr, ##23560
074f0     F2 28 02 FB | 	rdlong	local06, objptr
074f4     01 28 06 F1 | 	add	local06, #1
074f8     F2 28 62 FC | 	wrlong	local06, objptr
074fc     2E 00 00 FF 
07500     08 E4 85 F1 | 	sub	objptr, ##23560
07504     F0 00 B0 FD | 	call	#_addsub
07508     13 23 02 F6 | 	mov	local03, local05
0750c     0F 29 02 F6 | 	mov	local06, local01
07510     10 2B 02 F6 | 	mov	local07, local02
07514     11 27 02 F6 | 	mov	local05, local03
07518     41 00 00 FF 
0751c     40 E4 05 F1 | 	add	objptr, ##33344
07520     F2 24 02 FB | 	rdlong	local04, objptr
07524     12 FB 01 F6 | 	mov	result1, local04
07528     01 FA 65 F0 | 	shl	result1, #1
0752c     12 FB 01 F1 | 	add	result1, local04
07530     02 FA 65 F0 | 	shl	result1, #2
07534     03 00 00 FF 
07538     00 E4 85 F1 | 	sub	objptr, ##1536
0753c     F2 FA 01 F1 | 	add	result1, objptr
07540     FD 28 62 FC | 	wrlong	local06, result1
07544     03 00 00 FF 
07548     00 E4 05 F1 | 	add	objptr, ##1536
0754c     F2 28 02 FB | 	rdlong	local06, objptr
07550     14 25 02 F6 | 	mov	local04, local06
07554     01 24 66 F0 | 	shl	local04, #1
07558     14 25 02 F1 | 	add	local04, local06
0755c     02 24 66 F0 | 	shl	local04, #2
07560     03 00 00 FF 
07564     00 E4 85 F1 | 	sub	objptr, ##1536
07568     F2 24 02 F1 | 	add	local04, objptr
0756c     04 24 06 F1 | 	add	local04, #4
07570     12 2B 62 FC | 	wrlong	local07, local04
07574     03 00 00 FF 
07578     00 E4 05 F1 | 	add	objptr, ##1536
0757c     F2 2A 02 FB | 	rdlong	local07, objptr
07580     15 29 02 F6 | 	mov	local06, local07
07584     01 28 66 F0 | 	shl	local06, #1
07588     15 29 02 F1 | 	add	local06, local07
0758c     02 28 66 F0 | 	shl	local06, #2
07590     03 00 00 FF 
07594     00 E4 85 F1 | 	sub	objptr, ##1536
07598     F2 28 02 F1 | 	add	local06, objptr
0759c     08 28 06 F1 | 	add	local06, #8
075a0     14 27 62 FC | 	wrlong	local05, local06
075a4     03 00 00 FF 
075a8     00 E4 05 F1 | 	add	objptr, ##1536
075ac     F2 28 02 FB | 	rdlong	local06, objptr
075b0     01 28 06 F1 | 	add	local06, #1
075b4     F2 28 62 FC | 	wrlong	local06, objptr
075b8     13 00 00 FF 
075bc     38 E4 85 F1 | 	sub	objptr, ##9784
075c0     F2 24 02 FB | 	rdlong	local04, objptr
075c4     03 24 66 F0 | 	shl	local04, #3
075c8     02 00 00 FF 
075cc     38 E4 85 F1 | 	sub	objptr, ##1080
075d0     F2 24 02 F1 | 	add	local04, objptr
075d4     04 24 06 F1 | 	add	local04, #4
075d8     12 27 02 FB | 	rdlong	local05, local04
075dc     2B 00 00 FF 
075e0     D0 E5 85 F1 | 	sub	objptr, ##22480
075e4     E4 FE 9F FD | 	jmp	#LR__0621
075e8                 | LR__0622
075e8                 | ' return 0  
075e8     00 FA 05 F6 | 	mov	result1, #0
075ec                 | LR__0623
075ec     A7 F0 03 F6 | 	mov	ptra, fp
075f0     B2 00 A0 FD | 	call	#popregs_
075f4                 | _expr_ret
075f4     2D 00 64 FD | 	ret
075f8                 | 
075f8                 | ' 
075f8                 | ' 
075f8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
075f8                 | ' 
075f8                 | ' function addsub() as integer 
075f8                 | _addsub
075f8     07 4A 05 F6 | 	mov	COUNT_, #7
075fc     A8 00 A0 FD | 	call	#pushregs_
07600                 | _addsub_enter
07600     00 1E 06 F6 | 	mov	local01, #0
07604     50 01 B0 FD | 	call	#_muldiv
07608     2E 00 00 FF 
0760c     08 E4 05 F1 | 	add	objptr, ##23560
07610     F2 24 02 FB | 	rdlong	local04, objptr
07614     03 24 66 F0 | 	shl	local04, #3
07618     02 00 00 FF 
0761c     38 E4 85 F1 | 	sub	objptr, ##1080
07620     F2 24 02 F1 | 	add	local04, objptr
07624     04 24 06 F1 | 	add	local04, #4
07628     12 27 02 FB | 	rdlong	local05, local04
0762c                 | ' t3.result.uresult=0
0762c                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0762c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0762c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0762c     2B 00 00 FF 
07630     D0 E5 85 F1 | 	sub	objptr, ##22480
07634                 | LR__0630
07634     01 26 0E F2 | 	cmp	local05, #1 wz
07638     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0763c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07640     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07644     00 01 90 5D |  if_ne	jmp	#LR__0631
07648     2E 00 00 FF 
0764c     08 E4 05 F1 | 	add	objptr, ##23560
07650     F2 24 02 FB | 	rdlong	local04, objptr
07654     01 24 06 F1 | 	add	local04, #1
07658     F2 24 62 FC | 	wrlong	local04, objptr
0765c     2E 00 00 FF 
07660     08 E4 85 F1 | 	sub	objptr, ##23560
07664     F0 00 B0 FD | 	call	#_muldiv
07668     13 23 02 F6 | 	mov	local03, local05
0766c     0F 29 02 F6 | 	mov	local06, local01
07670     10 2B 02 F6 | 	mov	local07, local02
07674     11 27 02 F6 | 	mov	local05, local03
07678     41 00 00 FF 
0767c     40 E4 05 F1 | 	add	objptr, ##33344
07680     F2 24 02 FB | 	rdlong	local04, objptr
07684     12 FB 01 F6 | 	mov	result1, local04
07688     01 FA 65 F0 | 	shl	result1, #1
0768c     12 FB 01 F1 | 	add	result1, local04
07690     02 FA 65 F0 | 	shl	result1, #2
07694     03 00 00 FF 
07698     00 E4 85 F1 | 	sub	objptr, ##1536
0769c     F2 FA 01 F1 | 	add	result1, objptr
076a0     FD 28 62 FC | 	wrlong	local06, result1
076a4     03 00 00 FF 
076a8     00 E4 05 F1 | 	add	objptr, ##1536
076ac     F2 28 02 FB | 	rdlong	local06, objptr
076b0     14 25 02 F6 | 	mov	local04, local06
076b4     01 24 66 F0 | 	shl	local04, #1
076b8     14 25 02 F1 | 	add	local04, local06
076bc     02 24 66 F0 | 	shl	local04, #2
076c0     03 00 00 FF 
076c4     00 E4 85 F1 | 	sub	objptr, ##1536
076c8     F2 24 02 F1 | 	add	local04, objptr
076cc     04 24 06 F1 | 	add	local04, #4
076d0     12 2B 62 FC | 	wrlong	local07, local04
076d4     03 00 00 FF 
076d8     00 E4 05 F1 | 	add	objptr, ##1536
076dc     F2 2A 02 FB | 	rdlong	local07, objptr
076e0     15 29 02 F6 | 	mov	local06, local07
076e4     01 28 66 F0 | 	shl	local06, #1
076e8     15 29 02 F1 | 	add	local06, local07
076ec     02 28 66 F0 | 	shl	local06, #2
076f0     03 00 00 FF 
076f4     00 E4 85 F1 | 	sub	objptr, ##1536
076f8     F2 28 02 F1 | 	add	local06, objptr
076fc     08 28 06 F1 | 	add	local06, #8
07700     14 27 62 FC | 	wrlong	local05, local06
07704     03 00 00 FF 
07708     00 E4 05 F1 | 	add	objptr, ##1536
0770c     F2 28 02 FB | 	rdlong	local06, objptr
07710     01 28 06 F1 | 	add	local06, #1
07714     F2 28 62 FC | 	wrlong	local06, objptr
07718     13 00 00 FF 
0771c     38 E4 85 F1 | 	sub	objptr, ##9784
07720     F2 24 02 FB | 	rdlong	local04, objptr
07724     03 24 66 F0 | 	shl	local04, #3
07728     02 00 00 FF 
0772c     38 E4 85 F1 | 	sub	objptr, ##1080
07730     F2 24 02 F1 | 	add	local04, objptr
07734     04 24 06 F1 | 	add	local04, #4
07738     12 27 02 FB | 	rdlong	local05, local04
0773c     2B 00 00 FF 
07740     D0 E5 85 F1 | 	sub	objptr, ##22480
07744     EC FE 9F FD | 	jmp	#LR__0630
07748                 | LR__0631
07748                 | '   return 0
07748     00 FA 05 F6 | 	mov	result1, #0
0774c     A7 F0 03 F6 | 	mov	ptra, fp
07750     B2 00 A0 FD | 	call	#popregs_
07754                 | _addsub_ret
07754     2D 00 64 FD | 	ret
07758                 | 
07758                 | ' 
07758                 | ' sub muldiv()
07758                 | _muldiv
07758     08 4A 05 F6 | 	mov	COUNT_, #8
0775c     A8 00 A0 FD | 	call	#pushregs_
07760                 | _muldiv_enter
07760     00 1E 06 F6 | 	mov	local01, #0
07764     58 01 B0 FD | 	call	#_getvalue
07768     2E 00 00 FF 
0776c     08 E4 05 F1 | 	add	objptr, ##23560
07770     F2 24 02 FB | 	rdlong	local04, objptr
07774     03 24 66 F0 | 	shl	local04, #3
07778     02 00 00 FF 
0777c     38 E4 85 F1 | 	sub	objptr, ##1080
07780     F2 24 02 F1 | 	add	local04, objptr
07784     04 24 06 F1 | 	add	local04, #4
07788     12 27 02 FB | 	rdlong	local05, local04
0778c                 | ' t3.result.uresult=0
0778c                 | ' getvalue()    
0778c                 | ' op = lparts(ct).token
0778c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0778c     2B 00 00 FF 
07790     D0 E5 85 F1 | 	sub	objptr, ##22480
07794                 | LR__0640
07794     05 26 0E F2 | 	cmp	local05, #5 wz
07798     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0779c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
077a0     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
077a4     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
077a8     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
077ac     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
077b0     00 01 90 5D |  if_ne	jmp	#LR__0641
077b4     2E 00 00 FF 
077b8     08 E4 05 F1 | 	add	objptr, ##23560
077bc     F2 24 02 FB | 	rdlong	local04, objptr
077c0     01 24 06 F1 | 	add	local04, #1
077c4     F2 24 62 FC | 	wrlong	local04, objptr
077c8     2E 00 00 FF 
077cc     08 E4 85 F1 | 	sub	objptr, ##23560
077d0     EC 00 B0 FD | 	call	#_getvalue
077d4     13 23 02 F6 | 	mov	local03, local05
077d8     0F 29 02 F6 | 	mov	local06, local01
077dc     10 2B 02 F6 | 	mov	local07, local02
077e0     11 27 02 F6 | 	mov	local05, local03
077e4     41 00 00 FF 
077e8     40 E4 05 F1 | 	add	objptr, ##33344
077ec     F2 24 02 FB | 	rdlong	local04, objptr
077f0     12 2D 02 F6 | 	mov	local08, local04
077f4     01 2C 66 F0 | 	shl	local08, #1
077f8     12 2D 02 F1 | 	add	local08, local04
077fc     02 2C 66 F0 | 	shl	local08, #2
07800     03 00 00 FF 
07804     00 E4 85 F1 | 	sub	objptr, ##1536
07808     F2 2C 02 F1 | 	add	local08, objptr
0780c     16 29 62 FC | 	wrlong	local06, local08
07810     03 00 00 FF 
07814     00 E4 05 F1 | 	add	objptr, ##1536
07818     F2 2C 02 FB | 	rdlong	local08, objptr
0781c     16 29 02 F6 | 	mov	local06, local08
07820     01 28 66 F0 | 	shl	local06, #1
07824     16 29 02 F1 | 	add	local06, local08
07828     02 28 66 F0 | 	shl	local06, #2
0782c     03 00 00 FF 
07830     00 E4 85 F1 | 	sub	objptr, ##1536
07834     F2 28 02 F1 | 	add	local06, objptr
07838     04 28 06 F1 | 	add	local06, #4
0783c     14 2B 62 FC | 	wrlong	local07, local06
07840     03 00 00 FF 
07844     00 E4 05 F1 | 	add	objptr, ##1536
07848     F2 2C 02 FB | 	rdlong	local08, objptr
0784c     16 2B 02 F6 | 	mov	local07, local08
07850     01 2A 66 F0 | 	shl	local07, #1
07854     16 2B 02 F1 | 	add	local07, local08
07858     02 2A 66 F0 | 	shl	local07, #2
0785c     03 00 00 FF 
07860     00 E4 85 F1 | 	sub	objptr, ##1536
07864     F2 2A 02 F1 | 	add	local07, objptr
07868     08 2A 06 F1 | 	add	local07, #8
0786c     15 27 62 FC | 	wrlong	local05, local07
07870     03 00 00 FF 
07874     00 E4 05 F1 | 	add	objptr, ##1536
07878     F2 28 02 FB | 	rdlong	local06, objptr
0787c     01 28 06 F1 | 	add	local06, #1
07880     F2 28 62 FC | 	wrlong	local06, objptr
07884     13 00 00 FF 
07888     38 E4 85 F1 | 	sub	objptr, ##9784
0788c     F2 24 02 FB | 	rdlong	local04, objptr
07890     03 24 66 F0 | 	shl	local04, #3
07894     02 00 00 FF 
07898     38 E4 85 F1 | 	sub	objptr, ##1080
0789c     F2 24 02 F1 | 	add	local04, objptr
078a0     04 24 06 F1 | 	add	local04, #4
078a4     12 27 02 FB | 	rdlong	local05, local04
078a8     2B 00 00 FF 
078ac     D0 E5 85 F1 | 	sub	objptr, ##22480
078b0     E0 FE 9F FD | 	jmp	#LR__0640
078b4                 | LR__0641
078b4     A7 F0 03 F6 | 	mov	ptra, fp
078b8     B2 00 A0 FD | 	call	#popregs_
078bc                 | _muldiv_ret
078bc     2D 00 64 FD | 	ret
078c0                 | 
078c0                 | ' 
078c0                 | ' sub getvalue() 
078c0                 | _getvalue
078c0     08 4A 05 F6 | 	mov	COUNT_, #8
078c4     A8 00 A0 FD | 	call	#pushregs_
078c8                 | _getvalue_enter
078c8     01 24 06 F6 | 	mov	local04, #1
078cc     00 1E 06 F6 | 	mov	local01, #0
078d0     1D 22 06 F6 | 	mov	local03, #29
078d4     2E 00 00 FF 
078d8     08 E4 05 F1 | 	add	objptr, ##23560
078dc     F2 FA 01 FB | 	rdlong	result1, objptr
078e0     03 FA 65 F0 | 	shl	result1, #3
078e4     02 00 00 FF 
078e8     38 E4 85 F1 | 	sub	objptr, ##1080
078ec     F2 FA 01 F1 | 	add	result1, objptr
078f0     04 FA 05 F1 | 	add	result1, #4
078f4     FD 26 02 FB | 	rdlong	local05, result1
078f8                 | ' m=1
078f8                 | ' t1.result.uresult=0: t1.result_type=result_uint
078f8                 | ' op=lparts(ct).token
078f8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
078f8     02 26 0E F2 | 	cmp	local05, #2 wz
078fc     2B 00 00 FF 
07900     D0 E5 85 F1 | 	sub	objptr, ##22480
07904     38 00 90 5D |  if_ne	jmp	#LR__0650
07908     01 24 66 F6 | 	neg	local04, #1
0790c     2E 00 00 FF 
07910     08 E4 05 F1 | 	add	objptr, ##23560
07914     F2 26 02 FB | 	rdlong	local05, objptr
07918     01 26 06 F1 | 	add	local05, #1
0791c     F2 26 62 FC | 	wrlong	local05, objptr
07920     03 26 66 F0 | 	shl	local05, #3
07924     02 00 00 FF 
07928     38 E4 85 F1 | 	sub	objptr, ##1080
0792c     F2 26 02 F1 | 	add	local05, objptr
07930     04 26 06 F1 | 	add	local05, #4
07934     13 27 02 FB | 	rdlong	local05, local05
07938     2B 00 00 FF 
0793c     D0 E5 85 F1 | 	sub	objptr, ##22480
07940                 | LR__0650
07940                 | ' select case op
07940     01 00 00 FF 
07944     00 26 0E F2 | 	cmp	local05, ##512 wz
07948     3C 00 90 AD |  if_e	jmp	#LR__0651
0794c     01 00 00 FF 
07950     01 26 0E F2 | 	cmp	local05, ##513 wz
07954     88 01 90 AD |  if_e	jmp	#LR__0654
07958     01 00 00 FF 
0795c     02 26 0E F2 | 	cmp	local05, ##514 wz
07960     84 02 90 AD |  if_e	jmp	#LR__0655
07964     01 00 00 FF 
07968     03 26 0E F2 | 	cmp	local05, ##515 wz
0796c     E8 03 90 AD |  if_e	jmp	#LR__0658
07970     01 00 00 FF 
07974     04 26 0E F2 | 	cmp	local05, ##516 wz
07978     CC 04 90 AD |  if_e	jmp	#LR__0659
0797c     15 26 0E F2 | 	cmp	local05, #21 wz
07980     EC 04 90 AD |  if_e	jmp	#LR__0660
07984     5C 05 90 FD | 	jmp	#LR__0661
07988                 | LR__0651
07988                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
07988     01 24 0E F2 | 	cmp	local04, #1 wz
0798c     3C 00 90 5D |  if_ne	jmp	#LR__0652
07990     2E 00 00 FF 
07994     08 E4 05 F1 | 	add	objptr, ##23560
07998     F2 26 02 FB | 	rdlong	local05, objptr
0799c     03 26 66 F0 | 	shl	local05, #3
079a0     02 00 00 FF 
079a4     38 E4 85 F1 | 	sub	objptr, ##1080
079a8     F2 26 02 F1 | 	add	local05, objptr
079ac     13 13 02 FB | 	rdlong	arg01, local05
079b0     00 14 06 F6 | 	mov	arg02, #0
079b4     2B 00 00 FF 
079b8     D0 E5 85 F1 | 	sub	objptr, ##22480
079bc     7C 0B B1 FD | 	call	#__system____builtin_atoi
079c0     FD 24 02 FD | 	qmul	local04, result1
079c4     18 1E 62 FD | 	getqx	local01
079c8     1D 22 06 F6 | 	mov	local03, #29
079cc                 | LR__0652
079cc                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
079cc     FF FF 7F FF 
079d0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
079d4     3C 00 90 5D |  if_ne	jmp	#LR__0653
079d8     2E 00 00 FF 
079dc     08 E4 05 F1 | 	add	objptr, ##23560
079e0     F2 26 02 FB | 	rdlong	local05, objptr
079e4     03 26 66 F0 | 	shl	local05, #3
079e8     02 00 00 FF 
079ec     38 E4 85 F1 | 	sub	objptr, ##1080
079f0     F2 26 02 F1 | 	add	local05, objptr
079f4     13 13 02 FB | 	rdlong	arg01, local05
079f8     00 14 06 F6 | 	mov	arg02, #0
079fc     2B 00 00 FF 
07a00     D0 E5 85 F1 | 	sub	objptr, ##22480
07a04     34 0B B1 FD | 	call	#__system____builtin_atoi
07a08     FD 24 02 FD | 	qmul	local04, result1
07a0c     18 1E 62 FD | 	getqx	local01
07a10     1C 22 06 F6 | 	mov	local03, #28
07a14                 | LR__0653
07a14     0F 29 02 F6 | 	mov	local06, local01
07a18     10 2B 02 F6 | 	mov	local07, local02
07a1c     11 27 02 F6 | 	mov	local05, local03
07a20     41 00 00 FF 
07a24     40 E4 05 F1 | 	add	objptr, ##33344
07a28     F2 1E 02 FB | 	rdlong	local01, objptr
07a2c     0F 25 02 F6 | 	mov	local04, local01
07a30     01 24 66 F0 | 	shl	local04, #1
07a34     0F 25 02 F1 | 	add	local04, local01
07a38     02 24 66 F0 | 	shl	local04, #2
07a3c     03 00 00 FF 
07a40     00 E4 85 F1 | 	sub	objptr, ##1536
07a44     F2 24 02 F1 | 	add	local04, objptr
07a48     12 29 62 FC | 	wrlong	local06, local04
07a4c     03 00 00 FF 
07a50     00 E4 05 F1 | 	add	objptr, ##1536
07a54     F2 28 02 FB | 	rdlong	local06, objptr
07a58     14 1F 02 F6 | 	mov	local01, local06
07a5c     01 1E 66 F0 | 	shl	local01, #1
07a60     14 1F 02 F1 | 	add	local01, local06
07a64     02 1E 66 F0 | 	shl	local01, #2
07a68     03 00 00 FF 
07a6c     00 E4 85 F1 | 	sub	objptr, ##1536
07a70     F2 1E 02 F1 | 	add	local01, objptr
07a74     04 1E 06 F1 | 	add	local01, #4
07a78     0F 2B 62 FC | 	wrlong	local07, local01
07a7c     03 00 00 FF 
07a80     00 E4 05 F1 | 	add	objptr, ##1536
07a84     F2 2A 02 FB | 	rdlong	local07, objptr
07a88     15 29 02 F6 | 	mov	local06, local07
07a8c     01 28 66 F0 | 	shl	local06, #1
07a90     15 29 02 F1 | 	add	local06, local07
07a94     02 28 66 F0 | 	shl	local06, #2
07a98     03 00 00 FF 
07a9c     00 E4 85 F1 | 	sub	objptr, ##1536
07aa0     F2 28 02 F1 | 	add	local06, objptr
07aa4     08 28 06 F1 | 	add	local06, #8
07aa8     14 27 62 FC | 	wrlong	local05, local06
07aac     03 00 00 FF 
07ab0     00 E4 05 F1 | 	add	objptr, ##1536
07ab4     F2 28 02 FB | 	rdlong	local06, objptr
07ab8     01 28 06 F1 | 	add	local06, #1
07abc     F2 28 62 FC | 	wrlong	local06, objptr
07ac0     13 00 00 FF 
07ac4     38 E4 85 F1 | 	sub	objptr, ##9784
07ac8     F2 28 02 FB | 	rdlong	local06, objptr
07acc     01 28 06 F1 | 	add	local06, #1
07ad0     F2 28 62 FC | 	wrlong	local06, objptr
07ad4     2E 00 00 FF 
07ad8     08 E4 85 F1 | 	sub	objptr, ##23560
07adc     28 04 90 FD | 	jmp	#LR__0662
07ae0                 | LR__0654
07ae0     2E 00 00 FF 
07ae4     08 E4 05 F1 | 	add	objptr, ##23560
07ae8     F2 28 02 FB | 	rdlong	local06, objptr
07aec     03 28 66 F0 | 	shl	local06, #3
07af0     02 00 00 FF 
07af4     38 E4 85 F1 | 	sub	objptr, ##1080
07af8     F2 28 02 F1 | 	add	local06, objptr
07afc     14 13 02 FB | 	rdlong	arg01, local06
07b00     00 14 06 F6 | 	mov	arg02, #0
07b04     2B 00 00 FF 
07b08     D0 E5 85 F1 | 	sub	objptr, ##22480
07b0c     2C 0A B1 FD | 	call	#__system____builtin_atoi
07b10     FD 24 02 FD | 	qmul	local04, result1
07b14     41 00 00 FF 
07b18     40 E4 05 F1 | 	add	objptr, ##33344
07b1c     F2 28 02 FB | 	rdlong	local06, objptr
07b20     14 2D 02 F6 | 	mov	local08, local06
07b24     01 2C 66 F0 | 	shl	local08, #1
07b28     14 2D 02 F1 | 	add	local08, local06
07b2c     02 2C 66 F0 | 	shl	local08, #2
07b30     03 00 00 FF 
07b34     00 E4 85 F1 | 	sub	objptr, ##1536
07b38     F2 2C 02 F1 | 	add	local08, objptr
07b3c     03 00 00 FF 
07b40     00 E4 05 F1 | 	add	objptr, ##1536
07b44     18 1E 62 FD | 	getqx	local01
07b48     1C 22 06 F6 | 	mov	local03, #28
07b4c     0F 29 02 F6 | 	mov	local06, local01
07b50     10 2B 02 F6 | 	mov	local07, local02
07b54     16 29 62 FC | 	wrlong	local06, local08
07b58     11 2D 02 F6 | 	mov	local08, local03
07b5c     F2 28 02 FB | 	rdlong	local06, objptr
07b60     14 27 02 F6 | 	mov	local05, local06
07b64     01 26 66 F0 | 	shl	local05, #1
07b68     14 27 02 F1 | 	add	local05, local06
07b6c     02 26 66 F0 | 	shl	local05, #2
07b70     03 00 00 FF 
07b74     00 E4 85 F1 | 	sub	objptr, ##1536
07b78     F2 26 02 F1 | 	add	local05, objptr
07b7c     04 26 06 F1 | 	add	local05, #4
07b80     13 2B 62 FC | 	wrlong	local07, local05
07b84     03 00 00 FF 
07b88     00 E4 05 F1 | 	add	objptr, ##1536
07b8c     F2 2A 02 FB | 	rdlong	local07, objptr
07b90     15 29 02 F6 | 	mov	local06, local07
07b94     01 28 66 F0 | 	shl	local06, #1
07b98     15 29 02 F1 | 	add	local06, local07
07b9c     02 28 66 F0 | 	shl	local06, #2
07ba0     03 00 00 FF 
07ba4     00 E4 85 F1 | 	sub	objptr, ##1536
07ba8     F2 28 02 F1 | 	add	local06, objptr
07bac     08 28 06 F1 | 	add	local06, #8
07bb0     14 2D 62 FC | 	wrlong	local08, local06
07bb4     03 00 00 FF 
07bb8     00 E4 05 F1 | 	add	objptr, ##1536
07bbc     F2 28 02 FB | 	rdlong	local06, objptr
07bc0     01 28 06 F1 | 	add	local06, #1
07bc4     F2 28 62 FC | 	wrlong	local06, objptr
07bc8     13 00 00 FF 
07bcc     38 E4 85 F1 | 	sub	objptr, ##9784
07bd0     F2 28 02 FB | 	rdlong	local06, objptr
07bd4     01 28 06 F1 | 	add	local06, #1
07bd8     F2 28 62 FC | 	wrlong	local06, objptr
07bdc     2E 00 00 FF 
07be0     08 E4 85 F1 | 	sub	objptr, ##23560
07be4     20 03 90 FD | 	jmp	#LR__0662
07be8                 | LR__0655
07be8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07be8     01 24 0E F2 | 	cmp	local04, #1 wz
07bec     48 00 90 5D |  if_ne	jmp	#LR__0656
07bf0     00 C0 1F FF 
07bf4     00 28 06 F6 | 	mov	local06, ##1065353216
07bf8     2E 00 00 FF 
07bfc     08 E4 05 F1 | 	add	objptr, ##23560
07c00     F2 2C 02 FB | 	rdlong	local08, objptr
07c04     03 2C 66 F0 | 	shl	local08, #3
07c08     02 00 00 FF 
07c0c     38 E4 85 F1 | 	sub	objptr, ##1080
07c10     F2 2C 02 F1 | 	add	local08, objptr
07c14     16 13 02 FB | 	rdlong	arg01, local08
07c18     2B 00 00 FF 
07c1c     D0 E5 85 F1 | 	sub	objptr, ##22480
07c20     88 0A B1 FD | 	call	#__system____builtin_atof
07c24     FD 14 02 F6 | 	mov	arg02, result1
07c28     14 13 02 F6 | 	mov	arg01, local06
07c2c     94 02 B1 FD | 	call	#__system___float_mul
07c30     FD 1E 02 F6 | 	mov	local01, result1
07c34     1E 22 06 F6 | 	mov	local03, #30
07c38                 | LR__0656
07c38                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07c38     FF FF 7F FF 
07c3c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07c40     48 00 90 5D |  if_ne	jmp	#LR__0657
07c44     00 C0 5F FF 
07c48     00 28 06 F6 | 	mov	local06, ##-1082130432
07c4c     2E 00 00 FF 
07c50     08 E4 05 F1 | 	add	objptr, ##23560
07c54     F2 2C 02 FB | 	rdlong	local08, objptr
07c58     03 2C 66 F0 | 	shl	local08, #3
07c5c     02 00 00 FF 
07c60     38 E4 85 F1 | 	sub	objptr, ##1080
07c64     F2 2C 02 F1 | 	add	local08, objptr
07c68     16 13 02 FB | 	rdlong	arg01, local08
07c6c     2B 00 00 FF 
07c70     D0 E5 85 F1 | 	sub	objptr, ##22480
07c74     34 0A B1 FD | 	call	#__system____builtin_atof
07c78     FD 14 02 F6 | 	mov	arg02, result1
07c7c     14 13 02 F6 | 	mov	arg01, local06
07c80     40 02 B1 FD | 	call	#__system___float_mul
07c84     FD 1E 02 F6 | 	mov	local01, result1
07c88     1E 22 06 F6 | 	mov	local03, #30
07c8c                 | LR__0657
07c8c     0F 29 02 F6 | 	mov	local06, local01
07c90     10 2B 02 F6 | 	mov	local07, local02
07c94     11 27 02 F6 | 	mov	local05, local03
07c98     41 00 00 FF 
07c9c     40 E4 05 F1 | 	add	objptr, ##33344
07ca0     F2 1E 02 FB | 	rdlong	local01, objptr
07ca4     0F 2D 02 F6 | 	mov	local08, local01
07ca8     01 2C 66 F0 | 	shl	local08, #1
07cac     0F 2D 02 F1 | 	add	local08, local01
07cb0     02 2C 66 F0 | 	shl	local08, #2
07cb4     03 00 00 FF 
07cb8     00 E4 85 F1 | 	sub	objptr, ##1536
07cbc     F2 2C 02 F1 | 	add	local08, objptr
07cc0     16 29 62 FC | 	wrlong	local06, local08
07cc4     03 00 00 FF 
07cc8     00 E4 05 F1 | 	add	objptr, ##1536
07ccc     F2 2C 02 FB | 	rdlong	local08, objptr
07cd0     16 29 02 F6 | 	mov	local06, local08
07cd4     01 28 66 F0 | 	shl	local06, #1
07cd8     16 29 02 F1 | 	add	local06, local08
07cdc     02 28 66 F0 | 	shl	local06, #2
07ce0     03 00 00 FF 
07ce4     00 E4 85 F1 | 	sub	objptr, ##1536
07ce8     F2 28 02 F1 | 	add	local06, objptr
07cec     04 28 06 F1 | 	add	local06, #4
07cf0     14 2B 62 FC | 	wrlong	local07, local06
07cf4     03 00 00 FF 
07cf8     00 E4 05 F1 | 	add	objptr, ##1536
07cfc     F2 2C 02 FB | 	rdlong	local08, objptr
07d00     16 2B 02 F6 | 	mov	local07, local08
07d04     01 2A 66 F0 | 	shl	local07, #1
07d08     16 2B 02 F1 | 	add	local07, local08
07d0c     02 2A 66 F0 | 	shl	local07, #2
07d10     03 00 00 FF 
07d14     00 E4 85 F1 | 	sub	objptr, ##1536
07d18     F2 2A 02 F1 | 	add	local07, objptr
07d1c     08 2A 06 F1 | 	add	local07, #8
07d20     15 27 62 FC | 	wrlong	local05, local07
07d24     03 00 00 FF 
07d28     00 E4 05 F1 | 	add	objptr, ##1536
07d2c     F2 28 02 FB | 	rdlong	local06, objptr
07d30     01 28 06 F1 | 	add	local06, #1
07d34     F2 28 62 FC | 	wrlong	local06, objptr
07d38     13 00 00 FF 
07d3c     38 E4 85 F1 | 	sub	objptr, ##9784
07d40     F2 28 02 FB | 	rdlong	local06, objptr
07d44     01 28 06 F1 | 	add	local06, #1
07d48     F2 28 62 FC | 	wrlong	local06, objptr
07d4c     2E 00 00 FF 
07d50     08 E4 85 F1 | 	sub	objptr, ##23560
07d54     B0 01 90 FD | 	jmp	#LR__0662
07d58                 | LR__0658
07d58     2E 00 00 FF 
07d5c     08 E4 05 F1 | 	add	objptr, ##23560
07d60     F2 28 02 FB | 	rdlong	local06, objptr
07d64     03 28 66 F0 | 	shl	local06, #3
07d68     02 00 00 FF 
07d6c     38 E4 85 F1 | 	sub	objptr, ##1080
07d70     F2 28 02 F1 | 	add	local06, objptr
07d74     14 1F 02 FB | 	rdlong	local01, local06
07d78     1F 22 06 F6 | 	mov	local03, #31
07d7c     0F 29 02 F6 | 	mov	local06, local01
07d80     10 2B 02 F6 | 	mov	local07, local02
07d84     11 27 02 F6 | 	mov	local05, local03
07d88     15 00 00 FF 
07d8c     70 E4 05 F1 | 	add	objptr, ##10864
07d90     F2 1E 02 FB | 	rdlong	local01, objptr
07d94     0F 2D 02 F6 | 	mov	local08, local01
07d98     01 2C 66 F0 | 	shl	local08, #1
07d9c     0F 2D 02 F1 | 	add	local08, local01
07da0     02 2C 66 F0 | 	shl	local08, #2
07da4     03 00 00 FF 
07da8     00 E4 85 F1 | 	sub	objptr, ##1536
07dac     F2 2C 02 F1 | 	add	local08, objptr
07db0     16 29 62 FC | 	wrlong	local06, local08
07db4     03 00 00 FF 
07db8     00 E4 05 F1 | 	add	objptr, ##1536
07dbc     F2 2C 02 FB | 	rdlong	local08, objptr
07dc0     16 29 02 F6 | 	mov	local06, local08
07dc4     01 28 66 F0 | 	shl	local06, #1
07dc8     16 29 02 F1 | 	add	local06, local08
07dcc     02 28 66 F0 | 	shl	local06, #2
07dd0     03 00 00 FF 
07dd4     00 E4 85 F1 | 	sub	objptr, ##1536
07dd8     F2 28 02 F1 | 	add	local06, objptr
07ddc     04 28 06 F1 | 	add	local06, #4
07de0     14 2B 62 FC | 	wrlong	local07, local06
07de4     03 00 00 FF 
07de8     00 E4 05 F1 | 	add	objptr, ##1536
07dec     F2 2C 02 FB | 	rdlong	local08, objptr
07df0     16 2B 02 F6 | 	mov	local07, local08
07df4     01 2A 66 F0 | 	shl	local07, #1
07df8     16 2B 02 F1 | 	add	local07, local08
07dfc     02 2A 66 F0 | 	shl	local07, #2
07e00     03 00 00 FF 
07e04     00 E4 85 F1 | 	sub	objptr, ##1536
07e08     F2 2A 02 F1 | 	add	local07, objptr
07e0c     08 2A 06 F1 | 	add	local07, #8
07e10     15 27 62 FC | 	wrlong	local05, local07
07e14     03 00 00 FF 
07e18     00 E4 05 F1 | 	add	objptr, ##1536
07e1c     F2 28 02 FB | 	rdlong	local06, objptr
07e20     01 28 06 F1 | 	add	local06, #1
07e24     F2 28 62 FC | 	wrlong	local06, objptr
07e28     13 00 00 FF 
07e2c     38 E4 85 F1 | 	sub	objptr, ##9784
07e30     F2 28 02 FB | 	rdlong	local06, objptr
07e34     01 28 06 F1 | 	add	local06, #1
07e38     F2 28 62 FC | 	wrlong	local06, objptr
07e3c     2E 00 00 FF 
07e40     08 E4 85 F1 | 	sub	objptr, ##23560
07e44     C0 00 90 FD | 	jmp	#LR__0662
07e48                 | LR__0659
07e48     12 13 02 F6 | 	mov	arg01, local04
07e4c     B8 03 B0 FD | 	call	#_getvar
07e50     2E 00 00 FF 
07e54     08 E4 05 F1 | 	add	objptr, ##23560
07e58     F2 28 02 FB | 	rdlong	local06, objptr
07e5c     01 28 06 F1 | 	add	local06, #1
07e60     F2 28 62 FC | 	wrlong	local06, objptr
07e64     2E 00 00 FF 
07e68     08 E4 85 F1 | 	sub	objptr, ##23560
07e6c     98 00 90 FD | 	jmp	#LR__0662
07e70                 | LR__0660
07e70     2E 00 00 FF 
07e74     08 E4 05 F1 | 	add	objptr, ##23560
07e78     F2 28 02 FB | 	rdlong	local06, objptr
07e7c     01 28 06 F1 | 	add	local06, #1
07e80     F2 28 62 FC | 	wrlong	local06, objptr
07e84     2E 00 00 FF 
07e88     08 E4 85 F1 | 	sub	objptr, ##23560
07e8c     08 F5 BF FD | 	call	#_expr
07e90                 | '     ct+=1
07e90                 | '     expr() 
07e90                 | '     if lparts(ct).token=token_rpar then ct+=1
07e90     2E 00 00 FF 
07e94     08 E4 05 F1 | 	add	objptr, ##23560
07e98     F2 2C 02 FB | 	rdlong	local08, objptr
07e9c     03 2C 66 F0 | 	shl	local08, #3
07ea0     02 00 00 FF 
07ea4     38 E4 85 F1 | 	sub	objptr, ##1080
07ea8     F2 2C 02 F1 | 	add	local08, objptr
07eac     04 2C 06 F1 | 	add	local08, #4
07eb0     16 2D 02 FB | 	rdlong	local08, local08
07eb4     14 2C 0E F2 | 	cmp	local08, #20 wz
07eb8     2B 00 00 FF 
07ebc     D0 E5 85 F1 | 	sub	objptr, ##22480
07ec0     44 00 90 5D |  if_ne	jmp	#LR__0662
07ec4     2E 00 00 FF 
07ec8     08 E4 05 F1 | 	add	objptr, ##23560
07ecc     F2 28 02 FB | 	rdlong	local06, objptr
07ed0     01 28 06 F1 | 	add	local06, #1
07ed4     F2 28 62 FC | 	wrlong	local06, objptr
07ed8     2E 00 00 FF 
07edc     08 E4 85 F1 | 	sub	objptr, ##23560
07ee0     24 00 90 FD | 	jmp	#LR__0662
07ee4                 | LR__0661
07ee4     12 13 02 F6 | 	mov	arg01, local04
07ee8     28 00 B0 FD | 	call	#_getfun
07eec     2E 00 00 FF 
07ef0     08 E4 05 F1 | 	add	objptr, ##23560
07ef4     F2 28 02 FB | 	rdlong	local06, objptr
07ef8     01 28 06 F1 | 	add	local06, #1
07efc     F2 28 62 FC | 	wrlong	local06, objptr
07f00     2E 00 00 FF 
07f04     08 E4 85 F1 | 	sub	objptr, ##23560
07f08                 | LR__0662
07f08     A7 F0 03 F6 | 	mov	ptra, fp
07f0c     B2 00 A0 FD | 	call	#popregs_
07f10                 | _getvalue_ret
07f10     2D 00 64 FD | 	ret
07f14                 | 
07f14                 | ' 
07f14                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
07f14                 | _getfun
07f14     0A 4A 05 F6 | 	mov	COUNT_, #10
07f18     A8 00 A0 FD | 	call	#pushregs_
07f1c                 | _getfun_enter
07f1c     09 25 02 F6 | 	mov	local04, arg01
07f20     2E 00 00 FF 
07f24     08 E4 05 F1 | 	add	objptr, ##23560
07f28     F2 26 02 FB | 	rdlong	local05, objptr
07f2c     13 29 02 F6 | 	mov	local06, local05
07f30     00 2A 06 F6 | 	mov	local07, #0
07f34                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
07f34                 | ' oldct=ct
07f34                 | ' numpar=0
07f34                 | '   
07f34                 | ' if lparts(ct+1).token=token_lpar then
07f34     01 26 06 F1 | 	add	local05, #1
07f38     03 26 66 F0 | 	shl	local05, #3
07f3c     02 00 00 FF 
07f40     38 E4 85 F1 | 	sub	objptr, ##1080
07f44     F2 26 02 F1 | 	add	local05, objptr
07f48     04 26 06 F1 | 	add	local05, #4
07f4c     13 27 02 FB | 	rdlong	local05, local05
07f50     15 26 0E F2 | 	cmp	local05, #21 wz
07f54     2B 00 00 FF 
07f58     D0 E5 85 F1 | 	sub	objptr, ##22480
07f5c     08 01 90 5D |  if_ne	jmp	#LR__0674
07f60     2E 00 00 FF 
07f64     08 E4 05 F1 | 	add	objptr, ##23560
07f68     F2 2C 02 FB | 	rdlong	local08, objptr
07f6c     01 2C 06 F1 | 	add	local08, #1
07f70     F2 2C 62 FC | 	wrlong	local08, objptr
07f74     2E 00 00 FF 
07f78     08 E4 85 F1 | 	sub	objptr, ##23560
07f7c                 | '   ct+=1 											' omit this lpar, this is for expr list
07f7c                 | '   do
07f7c                 | LR__0670
07f7c     2E 00 00 FF 
07f80     08 E4 05 F1 | 	add	objptr, ##23560
07f84     F2 26 02 FB | 	rdlong	local05, objptr
07f88     01 26 06 F1 | 	add	local05, #1
07f8c     F2 26 62 FC | 	wrlong	local05, objptr
07f90                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
07f90                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
07f90     03 26 66 F0 | 	shl	local05, #3
07f94     02 00 00 FF 
07f98     38 E4 85 F1 | 	sub	objptr, ##1080
07f9c     F2 26 02 F1 | 	add	local05, objptr
07fa0     04 26 06 F1 | 	add	local05, #4
07fa4     13 2D 02 FB | 	rdlong	local08, local05
07fa8     15 2C 0E F2 | 	cmp	local08, #21 wz
07fac     2B 00 00 FF 
07fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
07fb4     40 00 90 5D |  if_ne	jmp	#LR__0671
07fb8     2E 00 00 FF 
07fbc     08 E4 05 F1 | 	add	objptr, ##23560
07fc0     F2 2C 02 FB | 	rdlong	local08, objptr
07fc4     01 2C 06 F1 | 	add	local08, #1
07fc8     F2 2C 62 FC | 	wrlong	local08, objptr
07fcc     2E 00 00 FF 
07fd0     08 E4 85 F1 | 	sub	objptr, ##23560
07fd4     C0 F3 BF FD | 	call	#_expr
07fd8     2E 00 00 FF 
07fdc     08 E4 05 F1 | 	add	objptr, ##23560
07fe0     F2 2C 02 FB | 	rdlong	local08, objptr
07fe4     01 2C 06 F1 | 	add	local08, #1
07fe8     F2 2C 62 FC | 	wrlong	local08, objptr
07fec     2E 00 00 FF 
07ff0     08 E4 85 F1 | 	sub	objptr, ##23560
07ff4     04 00 90 FD | 	jmp	#LR__0672
07ff8                 | LR__0671
07ff8     9C F3 BF FD | 	call	#_expr
07ffc                 | LR__0672
07ffc     01 2A 06 F1 | 	add	local07, #1
08000     2E 00 00 FF 
08004     08 E4 05 F1 | 	add	objptr, ##23560
08008     F2 26 02 FB | 	rdlong	local05, objptr
0800c     03 26 66 F0 | 	shl	local05, #3
08010     02 00 00 FF 
08014     38 E4 85 F1 | 	sub	objptr, ##1080
08018     F2 26 02 F1 | 	add	local05, objptr
0801c     04 26 06 F1 | 	add	local05, #4
08020     13 2D 02 FB | 	rdlong	local08, local05
08024     14 2C 0E F2 | 	cmp	local08, #20 wz
08028     2B 00 00 FF 
0802c     D0 E5 85 F1 | 	sub	objptr, ##22480
08030     34 00 90 AD |  if_e	jmp	#LR__0673
08034     2E 00 00 FF 
08038     08 E4 05 F1 | 	add	objptr, ##23560
0803c     F2 2C 02 FB | 	rdlong	local08, objptr
08040     03 2C 66 F0 | 	shl	local08, #3
08044     02 00 00 FF 
08048     38 E4 85 F1 | 	sub	objptr, ##1080
0804c     F2 2C 02 F1 | 	add	local08, objptr
08050     04 2C 06 F1 | 	add	local08, #4
08054     16 2D 02 FB | 	rdlong	local08, local08
08058     FE 2D 0E F2 | 	cmp	local08, #510 wz
0805c     2B 00 00 FF 
08060     D0 E5 85 F1 | 	sub	objptr, ##22480
08064     14 FF 9F 5D |  if_ne	jmp	#LR__0670
08068                 | LR__0673
08068                 | LR__0674
08068     15 1F 02 F6 | 	mov	local01, local07
0806c     03 28 66 F0 | 	shl	local06, #3
08070     2B 00 00 FF 
08074     D0 E5 05 F1 | 	add	objptr, ##22480
08078     F2 28 02 F1 | 	add	local06, objptr
0807c     04 28 06 F1 | 	add	local06, #4
08080     14 23 02 FB | 	rdlong	local03, local06
08084     0F 2D 02 F6 | 	mov	local08, local01
08088     10 2B 02 F6 | 	mov	local07, local02
0808c     11 29 02 F6 | 	mov	local06, local03
08090     15 00 00 FF 
08094     70 E4 05 F1 | 	add	objptr, ##10864
08098     F2 26 02 FB | 	rdlong	local05, objptr
0809c     13 13 02 F6 | 	mov	arg01, local05
080a0     01 12 66 F0 | 	shl	arg01, #1
080a4     13 13 02 F1 | 	add	arg01, local05
080a8     02 12 66 F0 | 	shl	arg01, #2
080ac     03 00 00 FF 
080b0     00 E4 85 F1 | 	sub	objptr, ##1536
080b4     F2 12 02 F1 | 	add	arg01, objptr
080b8     09 2D 62 FC | 	wrlong	local08, arg01
080bc     03 00 00 FF 
080c0     00 E4 05 F1 | 	add	objptr, ##1536
080c4     F2 2C 02 FB | 	rdlong	local08, objptr
080c8     16 2F 02 F6 | 	mov	local09, local08
080cc     01 2E 66 F0 | 	shl	local09, #1
080d0     16 2F 02 F1 | 	add	local09, local08
080d4     02 2E 66 F0 | 	shl	local09, #2
080d8     03 00 00 FF 
080dc     00 E4 85 F1 | 	sub	objptr, ##1536
080e0     F2 2E 02 F1 | 	add	local09, objptr
080e4     04 2E 06 F1 | 	add	local09, #4
080e8     17 2B 62 FC | 	wrlong	local07, local09
080ec     03 00 00 FF 
080f0     00 E4 05 F1 | 	add	objptr, ##1536
080f4     F2 2C 02 FB | 	rdlong	local08, objptr
080f8     16 31 02 F6 | 	mov	local10, local08
080fc     01 30 66 F0 | 	shl	local10, #1
08100     16 31 02 F1 | 	add	local10, local08
08104     02 30 66 F0 | 	shl	local10, #2
08108     03 00 00 FF 
0810c     00 E4 85 F1 | 	sub	objptr, ##1536
08110     F2 30 02 F1 | 	add	local10, objptr
08114     08 30 06 F1 | 	add	local10, #8
08118     18 29 62 FC | 	wrlong	local06, local10
0811c     03 00 00 FF 
08120     00 E4 05 F1 | 	add	objptr, ##1536
08124     F2 2C 02 FB | 	rdlong	local08, objptr
08128     01 2C 06 F1 | 	add	local08, #1
0812c     F2 2C 62 FC | 	wrlong	local08, objptr
08130     41 00 00 FF 
08134     40 E4 85 F1 | 	sub	objptr, ##33344
08138                 | ' 
08138                 | ' t2.result.uresult=numpar
08138                 | ' 
08138                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08138                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08138                 | ' 
08138                 | '   
08138                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08138     FF FF 7F FF 
0813c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08140     B8 00 90 5D |  if_ne	jmp	#LR__0675
08144     15 22 06 F6 | 	mov	local03, #21
08148     0F 2D 02 F6 | 	mov	local08, local01
0814c     10 2B 02 F6 | 	mov	local07, local02
08150     11 29 02 F6 | 	mov	local06, local03
08154     41 00 00 FF 
08158     40 E4 05 F1 | 	add	objptr, ##33344
0815c     F2 26 02 FB | 	rdlong	local05, objptr
08160     13 13 02 F6 | 	mov	arg01, local05
08164     01 12 66 F0 | 	shl	arg01, #1
08168     13 13 02 F1 | 	add	arg01, local05
0816c     02 12 66 F0 | 	shl	arg01, #2
08170     03 00 00 FF 
08174     00 E4 85 F1 | 	sub	objptr, ##1536
08178     F2 12 02 F1 | 	add	arg01, objptr
0817c     09 2D 62 FC | 	wrlong	local08, arg01
08180     03 00 00 FF 
08184     00 E4 05 F1 | 	add	objptr, ##1536
08188     F2 30 02 FB | 	rdlong	local10, objptr
0818c     18 2F 02 F6 | 	mov	local09, local10
08190     01 2E 66 F0 | 	shl	local09, #1
08194     18 2F 02 F1 | 	add	local09, local10
08198     02 2E 66 F0 | 	shl	local09, #2
0819c     03 00 00 FF 
081a0     00 E4 85 F1 | 	sub	objptr, ##1536
081a4     F2 2E 02 F1 | 	add	local09, objptr
081a8     04 2E 06 F1 | 	add	local09, #4
081ac     17 2B 62 FC | 	wrlong	local07, local09
081b0     03 00 00 FF 
081b4     00 E4 05 F1 | 	add	objptr, ##1536
081b8     F2 2E 02 FB | 	rdlong	local09, objptr
081bc     17 31 02 F6 | 	mov	local10, local09
081c0     01 30 66 F0 | 	shl	local10, #1
081c4     17 31 02 F1 | 	add	local10, local09
081c8     02 30 66 F0 | 	shl	local10, #2
081cc     03 00 00 FF 
081d0     00 E4 85 F1 | 	sub	objptr, ##1536
081d4     F2 30 02 F1 | 	add	local10, objptr
081d8     08 30 06 F1 | 	add	local10, #8
081dc     18 29 62 FC | 	wrlong	local06, local10
081e0     03 00 00 FF 
081e4     00 E4 05 F1 | 	add	objptr, ##1536
081e8     F2 2C 02 FB | 	rdlong	local08, objptr
081ec     01 2C 06 F1 | 	add	local08, #1
081f0     F2 2C 62 FC | 	wrlong	local08, objptr
081f4     41 00 00 FF 
081f8     40 E4 85 F1 | 	sub	objptr, ##33344
081fc                 | LR__0675
081fc     A7 F0 03 F6 | 	mov	ptra, fp
08200     B2 00 A0 FD | 	call	#popregs_
08204                 | _getfun_ret
08204     2D 00 64 FD | 	ret
08208                 | 
08208                 | '   
08208                 | '   
08208                 | ' sub getvar(m as integer) 
08208                 | _getvar
08208     0A 4A 05 F6 | 	mov	COUNT_, #10
0820c     A8 00 A0 FD | 	call	#pushregs_
08210                 | _getvar_enter
08210     09 25 02 F6 | 	mov	local04, arg01
08214     2E 00 00 FF 
08218     08 E4 05 F1 | 	add	objptr, ##23560
0821c     F2 14 02 FB | 	rdlong	arg02, objptr
08220     03 14 66 F0 | 	shl	arg02, #3
08224     02 00 00 FF 
08228     38 E4 85 F1 | 	sub	objptr, ##1080
0822c     F2 14 02 F1 | 	add	arg02, objptr
08230     0A 27 02 FB | 	rdlong	local05, arg02
08234     13 13 02 F6 | 	mov	arg01, local05
08238     01 14 06 F6 | 	mov	arg02, #1
0823c     2B 00 00 FF 
08240     D0 E5 85 F1 | 	sub	objptr, ##22480
08244     00 F3 B0 FD | 	call	#__system__Right_S
08248     FD 28 02 F6 | 	mov	local06, result1
0824c     01 2A 66 F6 | 	neg	local07, #1
08250                 | ' 
08250                 | ' varname$=lparts(ct).part$
08250                 | ' suffix$=right$(varname$,1)
08250                 | ' j=-1
08250                 | ' 
08250                 | ' for i=0 to varnum-1
08250     00 2C 06 F6 | 	mov	local08, #0
08254     2B 00 00 FF 
08258     CC E5 05 F1 | 	add	objptr, ##22476
0825c     F2 2E 02 FB | 	rdlong	local09, objptr
08260     2B 00 00 FF 
08264     CC E5 85 F1 | 	sub	objptr, ##22476
08268                 | LR__0680
08268     17 2D 52 F2 | 	cmps	local08, local09 wc
0826c     38 00 90 3D |  if_ae	jmp	#LR__0681
08270                 | '   if variables(i).name=varname$ then j=i : exit
08270     16 15 02 F6 | 	mov	arg02, local08
08274     04 14 66 F0 | 	shl	arg02, #4
08278     0B 00 00 FF 
0827c     CC E5 05 F1 | 	add	objptr, ##6092
08280     F2 14 02 F1 | 	add	arg02, objptr
08284     0A 13 02 FB | 	rdlong	arg01, arg02
08288     13 15 02 F6 | 	mov	arg02, local05
0828c     0B 00 00 FF 
08290     CC E5 85 F1 | 	sub	objptr, ##6092
08294     40 D2 B0 FD | 	call	#__system___string_cmp
08298     00 FA 0D F2 | 	cmp	result1, #0 wz
0829c     16 2B 02 A6 |  if_e	mov	local07, local08
082a0     01 2C 06 51 |  if_ne	add	local08, #1
082a4     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
082a8                 | LR__0681
082a8                 | ' if  j=-1 andalso varnum<maxvars then   
082a8     FF FF 7F FF 
082ac     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
082b0     A8 00 90 5D |  if_ne	jmp	#LR__0682
082b4     2B 00 00 FF 
082b8     CC E5 05 F1 | 	add	objptr, ##22476
082bc     F2 2E 02 FB | 	rdlong	local09, objptr
082c0     2B 00 00 FF 
082c4     CC E5 85 F1 | 	sub	objptr, ##22476
082c8     01 00 00 FF 
082cc     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
082d0     88 00 90 3D |  if_ae	jmp	#LR__0682
082d4     2B 00 00 FF 
082d8     CC E5 05 F1 | 	add	objptr, ##22476
082dc     F2 2E 02 FB | 	rdlong	local09, objptr
082e0     04 2E 66 F0 | 	shl	local09, #4
082e4     20 00 00 FF 
082e8     00 E4 85 F1 | 	sub	objptr, ##16384
082ec     F2 2E 02 F1 | 	add	local09, objptr
082f0     17 27 62 FC | 	wrlong	local05, local09
082f4     20 00 00 FF 
082f8     00 E4 05 F1 | 	add	objptr, ##16384
082fc     F2 2E 02 FB | 	rdlong	local09, objptr
08300     04 2E 66 F0 | 	shl	local09, #4
08304     20 00 00 FF 
08308     00 E4 85 F1 | 	sub	objptr, ##16384
0830c     F2 2E 02 F1 | 	add	local09, objptr
08310     04 2E 06 F1 | 	add	local09, #4
08314     17 01 68 FC | 	wrlong	#0, local09
08318     20 00 00 FF 
0831c     00 E4 05 F1 | 	add	objptr, ##16384
08320     F2 2E 02 FB | 	rdlong	local09, objptr
08324     04 2E 66 F0 | 	shl	local09, #4
08328     20 00 00 FF 
0832c     00 E4 85 F1 | 	sub	objptr, ##16384
08330     F2 2E 02 F1 | 	add	local09, objptr
08334     0C 2E 06 F1 | 	add	local09, #12
08338     17 39 68 FC | 	wrlong	#28, local09
0833c     20 00 00 FF 
08340     00 E4 05 F1 | 	add	objptr, ##16384
08344     F2 2E 02 FB | 	rdlong	local09, objptr
08348     17 2B 02 F6 | 	mov	local07, local09
0834c     01 2E 06 F1 | 	add	local09, #1
08350     F2 2E 62 FC | 	wrlong	local09, objptr
08354     2B 00 00 FF 
08358     CC E5 85 F1 | 	sub	objptr, ##22476
0835c                 | LR__0682
0835c     00 2E 06 F6 | 	mov	local09, #0
08360                 | ' numpar=0
08360                 | ' ' check if it is an array
08360                 | ' 
08360                 | ' if lparts(ct+1).token=token_lpar then
08360     2E 00 00 FF 
08364     08 E4 05 F1 | 	add	objptr, ##23560
08368     F2 2C 02 FB | 	rdlong	local08, objptr
0836c     01 2C 06 F1 | 	add	local08, #1
08370     03 2C 66 F0 | 	shl	local08, #3
08374     02 00 00 FF 
08378     38 E4 85 F1 | 	sub	objptr, ##1080
0837c     F2 2C 02 F1 | 	add	local08, objptr
08380     04 2C 06 F1 | 	add	local08, #4
08384     16 2D 02 FB | 	rdlong	local08, local08
08388     15 2C 0E F2 | 	cmp	local08, #21 wz
0838c     2B 00 00 FF 
08390     D0 E5 85 F1 | 	sub	objptr, ##22480
08394     08 01 90 5D |  if_ne	jmp	#LR__0687
08398     2E 00 00 FF 
0839c     08 E4 05 F1 | 	add	objptr, ##23560
083a0     F2 30 02 FB | 	rdlong	local10, objptr
083a4     01 30 06 F1 | 	add	local10, #1
083a8     F2 30 62 FC | 	wrlong	local10, objptr
083ac     2E 00 00 FF 
083b0     08 E4 85 F1 | 	sub	objptr, ##23560
083b4                 | '   ct+=1 											' omit this lpar, this is for expr list
083b4                 | '   do
083b4                 | LR__0683
083b4     2E 00 00 FF 
083b8     08 E4 05 F1 | 	add	objptr, ##23560
083bc     F2 2C 02 FB | 	rdlong	local08, objptr
083c0     01 2C 06 F1 | 	add	local08, #1
083c4     F2 2C 62 FC | 	wrlong	local08, objptr
083c8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
083c8                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
083c8     03 2C 66 F0 | 	shl	local08, #3
083cc     02 00 00 FF 
083d0     38 E4 85 F1 | 	sub	objptr, ##1080
083d4     F2 2C 02 F1 | 	add	local08, objptr
083d8     04 2C 06 F1 | 	add	local08, #4
083dc     16 31 02 FB | 	rdlong	local10, local08
083e0     15 30 0E F2 | 	cmp	local10, #21 wz
083e4     2B 00 00 FF 
083e8     D0 E5 85 F1 | 	sub	objptr, ##22480
083ec     40 00 90 5D |  if_ne	jmp	#LR__0684
083f0     2E 00 00 FF 
083f4     08 E4 05 F1 | 	add	objptr, ##23560
083f8     F2 30 02 FB | 	rdlong	local10, objptr
083fc     01 30 06 F1 | 	add	local10, #1
08400     F2 30 62 FC | 	wrlong	local10, objptr
08404     2E 00 00 FF 
08408     08 E4 85 F1 | 	sub	objptr, ##23560
0840c     88 EF BF FD | 	call	#_expr
08410     2E 00 00 FF 
08414     08 E4 05 F1 | 	add	objptr, ##23560
08418     F2 30 02 FB | 	rdlong	local10, objptr
0841c     01 30 06 F1 | 	add	local10, #1
08420     F2 30 62 FC | 	wrlong	local10, objptr
08424     2E 00 00 FF 
08428     08 E4 85 F1 | 	sub	objptr, ##23560
0842c     04 00 90 FD | 	jmp	#LR__0685
08430                 | LR__0684
08430     64 EF BF FD | 	call	#_expr
08434                 | LR__0685
08434     01 2E 06 F1 | 	add	local09, #1
08438     2E 00 00 FF 
0843c     08 E4 05 F1 | 	add	objptr, ##23560
08440     F2 2C 02 FB | 	rdlong	local08, objptr
08444     03 2C 66 F0 | 	shl	local08, #3
08448     02 00 00 FF 
0844c     38 E4 85 F1 | 	sub	objptr, ##1080
08450     F2 2C 02 F1 | 	add	local08, objptr
08454     04 2C 06 F1 | 	add	local08, #4
08458     16 31 02 FB | 	rdlong	local10, local08
0845c     14 30 0E F2 | 	cmp	local10, #20 wz
08460     2B 00 00 FF 
08464     D0 E5 85 F1 | 	sub	objptr, ##22480
08468     34 00 90 AD |  if_e	jmp	#LR__0686
0846c     2E 00 00 FF 
08470     08 E4 05 F1 | 	add	objptr, ##23560
08474     F2 30 02 FB | 	rdlong	local10, objptr
08478     03 30 66 F0 | 	shl	local10, #3
0847c     02 00 00 FF 
08480     38 E4 85 F1 | 	sub	objptr, ##1080
08484     F2 30 02 F1 | 	add	local10, objptr
08488     04 30 06 F1 | 	add	local10, #4
0848c     18 31 02 FB | 	rdlong	local10, local10
08490     FE 31 0E F2 | 	cmp	local10, #510 wz
08494     2B 00 00 FF 
08498     D0 E5 85 F1 | 	sub	objptr, ##22480
0849c     14 FF 9F 5D |  if_ne	jmp	#LR__0683
084a0                 | LR__0686
084a0                 | LR__0687
084a0     17 21 02 F6 | 	mov	local02, local09
084a4     11 22 06 F6 | 	mov	local03, #17
084a8     15 1F 02 F6 | 	mov	local01, local07
084ac     0F 31 02 F6 | 	mov	local10, local01
084b0     10 2F 02 F6 | 	mov	local09, local02
084b4     11 2D 02 F6 | 	mov	local08, local03
084b8     41 00 00 FF 
084bc     40 E4 05 F1 | 	add	objptr, ##33344
084c0     F2 2A 02 FB | 	rdlong	local07, objptr
084c4     15 29 02 F6 | 	mov	local06, local07
084c8     01 28 66 F0 | 	shl	local06, #1
084cc     15 29 02 F1 | 	add	local06, local07
084d0     02 28 66 F0 | 	shl	local06, #2
084d4     03 00 00 FF 
084d8     00 E4 85 F1 | 	sub	objptr, ##1536
084dc     F2 28 02 F1 | 	add	local06, objptr
084e0     14 31 62 FC | 	wrlong	local10, local06
084e4     03 00 00 FF 
084e8     00 E4 05 F1 | 	add	objptr, ##1536
084ec     F2 30 02 FB | 	rdlong	local10, objptr
084f0     18 27 02 F6 | 	mov	local05, local10
084f4     01 26 66 F0 | 	shl	local05, #1
084f8     18 27 02 F1 | 	add	local05, local10
084fc     02 26 66 F0 | 	shl	local05, #2
08500     03 00 00 FF 
08504     00 E4 85 F1 | 	sub	objptr, ##1536
08508     F2 26 02 F1 | 	add	local05, objptr
0850c     04 26 06 F1 | 	add	local05, #4
08510     13 2F 62 FC | 	wrlong	local09, local05
08514     03 00 00 FF 
08518     00 E4 05 F1 | 	add	objptr, ##1536
0851c     F2 30 02 FB | 	rdlong	local10, objptr
08520     18 FB 01 F6 | 	mov	result1, local10
08524     01 FA 65 F0 | 	shl	result1, #1
08528     18 FB 01 F1 | 	add	result1, local10
0852c     02 FA 65 F0 | 	shl	result1, #2
08530     03 00 00 FF 
08534     00 E4 85 F1 | 	sub	objptr, ##1536
08538     F2 FA 01 F1 | 	add	result1, objptr
0853c     08 FA 05 F1 | 	add	result1, #8
08540     FD 2C 62 FC | 	wrlong	local08, result1
08544     03 00 00 FF 
08548     00 E4 05 F1 | 	add	objptr, ##1536
0854c     F2 30 02 FB | 	rdlong	local10, objptr
08550     01 30 06 F1 | 	add	local10, #1
08554     F2 30 62 FC | 	wrlong	local10, objptr
08558     41 00 00 FF 
0855c     40 E4 85 F1 | 	sub	objptr, ##33344
08560                 | ' 
08560                 | ' t2.result.twowords(1)=numpar
08560                 | ' 
08560                 | ' 
08560                 | ' 
08560                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
08560                 | ' 
08560                 | ' 
08560                 | '  
08560                 | ' 
08560                 | ' 701 
08560                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08560                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08560     FF FF 7F FF 
08564     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08568     B8 00 90 5D |  if_ne	jmp	#LR__0688
0856c     15 22 06 F6 | 	mov	local03, #21
08570     0F 31 02 F6 | 	mov	local10, local01
08574     10 2F 02 F6 | 	mov	local09, local02
08578     11 2D 02 F6 | 	mov	local08, local03
0857c     41 00 00 FF 
08580     40 E4 05 F1 | 	add	objptr, ##33344
08584     F2 2A 02 FB | 	rdlong	local07, objptr
08588     15 29 02 F6 | 	mov	local06, local07
0858c     01 28 66 F0 | 	shl	local06, #1
08590     15 29 02 F1 | 	add	local06, local07
08594     02 28 66 F0 | 	shl	local06, #2
08598     03 00 00 FF 
0859c     00 E4 85 F1 | 	sub	objptr, ##1536
085a0     F2 28 02 F1 | 	add	local06, objptr
085a4     14 31 62 FC | 	wrlong	local10, local06
085a8     03 00 00 FF 
085ac     00 E4 05 F1 | 	add	objptr, ##1536
085b0     F2 1E 02 FB | 	rdlong	local01, objptr
085b4     0F 27 02 F6 | 	mov	local05, local01
085b8     01 26 66 F0 | 	shl	local05, #1
085bc     0F 27 02 F1 | 	add	local05, local01
085c0     02 26 66 F0 | 	shl	local05, #2
085c4     03 00 00 FF 
085c8     00 E4 85 F1 | 	sub	objptr, ##1536
085cc     F2 26 02 F1 | 	add	local05, objptr
085d0     04 26 06 F1 | 	add	local05, #4
085d4     13 2F 62 FC | 	wrlong	local09, local05
085d8     03 00 00 FF 
085dc     00 E4 05 F1 | 	add	objptr, ##1536
085e0     F2 1E 02 FB | 	rdlong	local01, objptr
085e4     0F FB 01 F6 | 	mov	result1, local01
085e8     01 FA 65 F0 | 	shl	result1, #1
085ec     0F FB 01 F1 | 	add	result1, local01
085f0     02 FA 65 F0 | 	shl	result1, #2
085f4     03 00 00 FF 
085f8     00 E4 85 F1 | 	sub	objptr, ##1536
085fc     F2 FA 01 F1 | 	add	result1, objptr
08600     08 FA 05 F1 | 	add	result1, #8
08604     FD 2C 62 FC | 	wrlong	local08, result1
08608     03 00 00 FF 
0860c     00 E4 05 F1 | 	add	objptr, ##1536
08610     F2 30 02 FB | 	rdlong	local10, objptr
08614     01 30 06 F1 | 	add	local10, #1
08618     F2 30 62 FC | 	wrlong	local10, objptr
0861c     41 00 00 FF 
08620     40 E4 85 F1 | 	sub	objptr, ##33344
08624                 | LR__0688
08624     A7 F0 03 F6 | 	mov	ptra, fp
08628     B2 00 A0 FD | 	call	#popregs_
0862c                 | _getvar_ret
0862c     2D 00 64 FD | 	ret
08630                 | 
08630                 | ' 
08630                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08630                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08630                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08630                 | ' 
08630                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08630                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08630                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08630                 | ' 
08630                 | ' function execute_line (astart=0 as integer) as integer
08630                 | _execute_line
08630     04 4A 05 F6 | 	mov	COUNT_, #4
08634     A8 00 A0 FD | 	call	#pushregs_
08638     50 00 00 FF 
0863c     78 E5 05 F1 | 	add	objptr, ##41336
08640     F2 00 68 FC | 	wrlong	#0, objptr
08644                 | ' runptr2=0
08644                 | ' for lineptr_e=astart to lineptr-1
08644     0F 00 00 FF 
08648     34 E5 85 F1 | 	sub	objptr, ##7988
0864c     F2 12 62 FC | 	wrlong	arg01, objptr
08650     04 E4 85 F1 | 	sub	objptr, #4
08654     F2 1E 02 FB | 	rdlong	local01, objptr
08658     41 00 00 FF 
0865c     40 E4 85 F1 | 	sub	objptr, ##33344
08660                 | LR__0690
08660     41 00 00 FF 
08664     44 E4 05 F1 | 	add	objptr, ##33348
08668     F2 FA 01 FB | 	rdlong	result1, objptr
0866c     41 00 00 FF 
08670     44 E4 85 F1 | 	sub	objptr, ##33348
08674     0F FB 51 F2 | 	cmps	result1, local01 wc
08678     98 00 90 3D |  if_ae	jmp	#LR__0691
0867c     41 00 00 FF 
08680     44 E4 05 F1 | 	add	objptr, ##33348
08684     F2 FA 01 FB | 	rdlong	result1, objptr
08688     FD 20 02 F6 | 	mov	local02, result1
0868c     01 20 66 F0 | 	shl	local02, #1
08690     FD 20 02 F1 | 	add	local02, result1
08694     02 20 66 F0 | 	shl	local02, #2
08698     03 00 00 FF 
0869c     04 E4 85 F1 | 	sub	objptr, ##1540
086a0     F2 20 02 F1 | 	add	local02, objptr
086a4     08 20 06 F1 | 	add	local02, #8
086a8     10 21 02 FB | 	rdlong	local02, local02
086ac     10 21 E2 F8 | 	getbyte	local02, local02, #0
086b0     02 20 66 F0 | 	shl	local02, #2
086b4     04 00 00 FF 
086b8     1C E4 85 F1 | 	sub	objptr, ##2076
086bc     F2 20 02 F1 | 	add	local02, objptr
086c0     10 21 02 FB | 	rdlong	local02, local02
086c4     10 23 02 F6 | 	mov	local03, local02
086c8     13 20 46 F7 | 	zerox	local02, #19
086cc     14 22 46 F0 | 	shr	local03, #20
086d0     02 22 66 F0 | 	shl	local03, #2
086d4     ED 22 02 F1 | 	add	local03, __methods__
086d8     11 23 02 FB | 	rdlong	local03, local03
086dc     3A 00 00 FF 
086e0     24 E4 85 F1 | 	sub	objptr, ##29732
086e4     F2 24 02 F6 | 	mov	local04, objptr
086e8     10 E5 01 F6 | 	mov	objptr, local02
086ec     2D 22 62 FD | 	call	local03
086f0     12 E5 01 F6 | 	mov	objptr, local04
086f4     41 00 00 FF 
086f8     44 E4 05 F1 | 	add	objptr, ##33348
086fc     F2 24 02 FB | 	rdlong	local04, objptr
08700     01 24 06 F1 | 	add	local04, #1
08704     F2 24 62 FC | 	wrlong	local04, objptr
08708     41 00 00 FF 
0870c     44 E4 85 F1 | 	sub	objptr, ##33348
08710     4C FF 9F FD | 	jmp	#LR__0690
08714                 | LR__0691
08714                 | ' return runptr2
08714     50 00 00 FF 
08718     78 E5 05 F1 | 	add	objptr, ##41336
0871c     F2 FA 01 FB | 	rdlong	result1, objptr
08720     50 00 00 FF 
08724     78 E5 85 F1 | 	sub	objptr, ##41336
08728     A7 F0 03 F6 | 	mov	ptra, fp
0872c     B2 00 A0 FD | 	call	#popregs_
08730                 | _execute_line_ret
08730     2D 00 64 FD | 	ret
08734                 | 
08734                 | ' 
08734                 | ' 
08734                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08734                 | ' 
08734                 | ' function pop() as expr_result
08734                 | _pop
08734                 | ' 
08734                 | ' if stackpointer=0 then
08734     3A 00 00 FF 
08738     1C E4 05 F1 | 	add	objptr, ##29724
0873c     F2 FA 09 FB | 	rdlong	result1, objptr wz
08740     3A 00 00 FF 
08744     1C E4 85 F1 | 	sub	objptr, ##29724
08748     FF 04 06 A6 |  if_e	mov	_var03, #255
0874c     18 00 06 A6 |  if_e	mov	_var01, #24
08750     68 00 90 AD |  if_e	jmp	#LR__0700
08754     3A 00 00 FF 
08758     1C E4 05 F1 | 	add	objptr, ##29724
0875c     F2 FA 01 FB | 	rdlong	result1, objptr
08760     01 FA 85 F1 | 	sub	result1, #1
08764     F2 FA 61 FC | 	wrlong	result1, objptr
08768     FD FE 01 F6 | 	mov	result3, result1
0876c     01 FE 65 F0 | 	shl	result3, #1
08770     FD FE 01 F1 | 	add	result3, result1
08774     02 FE 65 F0 | 	shl	result3, #2
08778     0C 00 00 FF 
0877c     0C E4 85 F1 | 	sub	objptr, ##6156
08780     F2 FE 01 F1 | 	add	result3, objptr
08784     FF 00 02 FB | 	rdlong	_var01, result3
08788     04 FE 05 F1 | 	add	result3, #4
0878c     FF FE 01 FB | 	rdlong	result3, result3
08790     FD FC 01 F6 | 	mov	result2, result1
08794     01 FC 65 F0 | 	shl	result2, #1
08798     FD FC 01 F1 | 	add	result2, result1
0879c     02 FC 65 F0 | 	shl	result2, #2
087a0     F2 FC 01 F1 | 	add	result2, objptr
087a4     08 FC 05 F1 | 	add	result2, #8
087a8     FE FA 01 FB | 	rdlong	result1, result2
087ac     FF 02 02 F6 | 	mov	_var02, result3
087b0     FD 04 02 F6 | 	mov	_var03, result1
087b4     2E 00 00 FF 
087b8     10 E4 85 F1 | 	sub	objptr, ##23568
087bc                 | LR__0700
087bc                 | ' return t1
087bc     01 FD 01 F6 | 	mov	result2, _var02
087c0     02 FF 01 F6 | 	mov	result3, _var03
087c4     00 FB 01 F6 | 	mov	result1, _var01
087c8                 | _pop_ret
087c8     2D 00 64 FD | 	ret
087cc                 | 
087cc                 | ' 
087cc                 | ' sub push(t1 as expr_result )
087cc                 | _push
087cc                 | ' 
087cc                 | ' 'print "In push: "; t1.result_type
087cc                 | ' 'print "In push: "; t1.result.uresult
087cc                 | ' 
087cc                 | ' if stackpointer<maxstack then 
087cc     3A 00 00 FF 
087d0     1C E4 05 F1 | 	add	objptr, ##29724
087d4     F2 00 02 FB | 	rdlong	_var01, objptr
087d8     3A 00 00 FF 
087dc     1C E4 85 F1 | 	sub	objptr, ##29724
087e0     01 00 00 FF 
087e4     00 00 56 F2 | 	cmps	_var01, ##512 wc
087e8     BC 00 90 3D |  if_ae	jmp	#LR__0710
087ec     09 01 02 FB | 	rdlong	_var01, arg01
087f0     04 12 06 F1 | 	add	arg01, #4
087f4     09 03 02 FB | 	rdlong	_var02, arg01
087f8     04 12 06 F1 | 	add	arg01, #4
087fc     09 13 02 FB | 	rdlong	arg01, arg01
08800     3A 00 00 FF 
08804     1C E4 05 F1 | 	add	objptr, ##29724
08808     F2 04 02 FB | 	rdlong	_var03, objptr
0880c     02 07 02 F6 | 	mov	_var04, _var03
08810     01 06 66 F0 | 	shl	_var04, #1
08814     02 07 02 F1 | 	add	_var04, _var03
08818     02 06 66 F0 | 	shl	_var04, #2
0881c     0C 00 00 FF 
08820     0C E4 85 F1 | 	sub	objptr, ##6156
08824     F2 06 02 F1 | 	add	_var04, objptr
08828     03 01 62 FC | 	wrlong	_var01, _var04
0882c     0C 00 00 FF 
08830     0C E4 05 F1 | 	add	objptr, ##6156
08834     F2 06 02 FB | 	rdlong	_var04, objptr
08838     03 05 02 F6 | 	mov	_var03, _var04
0883c     01 04 66 F0 | 	shl	_var03, #1
08840     03 05 02 F1 | 	add	_var03, _var04
08844     02 04 66 F0 | 	shl	_var03, #2
08848     0C 00 00 FF 
0884c     0C E4 85 F1 | 	sub	objptr, ##6156
08850     F2 04 02 F1 | 	add	_var03, objptr
08854     04 04 06 F1 | 	add	_var03, #4
08858     02 03 62 FC | 	wrlong	_var02, _var03
0885c     0C 00 00 FF 
08860     0C E4 05 F1 | 	add	objptr, ##6156
08864     F2 06 02 FB | 	rdlong	_var04, objptr
08868     03 05 02 F6 | 	mov	_var03, _var04
0886c     01 04 66 F0 | 	shl	_var03, #1
08870     03 05 02 F1 | 	add	_var03, _var04
08874     02 04 66 F0 | 	shl	_var03, #2
08878     0C 00 00 FF 
0887c     0C E4 85 F1 | 	sub	objptr, ##6156
08880     F2 04 02 F1 | 	add	_var03, objptr
08884     08 04 06 F1 | 	add	_var03, #8
08888     02 13 62 FC | 	wrlong	arg01, _var03
0888c     0C 00 00 FF 
08890     0C E4 05 F1 | 	add	objptr, ##6156
08894     F2 00 02 FB | 	rdlong	_var01, objptr
08898     01 00 06 F1 | 	add	_var01, #1
0889c     F2 00 62 FC | 	wrlong	_var01, objptr
088a0     3A 00 00 FF 
088a4     1C E4 85 F1 | 	sub	objptr, ##29724
088a8                 | LR__0710
088a8                 | _push_ret
088a8     2D 00 64 FD | 	ret
088ac                 | 
088ac                 | ' 
088ac                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
088ac                 | ' 
088ac                 | ' sub do_push
088ac                 | _do_push
088ac                 | ' if stackpointer<maxstack then 
088ac     3A 00 00 FF 
088b0     1C E4 05 F1 | 	add	objptr, ##29724
088b4     F2 00 02 FB | 	rdlong	_var01, objptr
088b8     3A 00 00 FF 
088bc     1C E4 85 F1 | 	sub	objptr, ##29724
088c0     01 00 00 FF 
088c4     00 00 56 F2 | 	cmps	_var01, ##512 wc
088c8     F8 00 90 3D |  if_ae	jmp	#LR__0720
088cc     41 00 00 FF 
088d0     44 E4 05 F1 | 	add	objptr, ##33348
088d4     F2 02 02 FB | 	rdlong	_var02, objptr
088d8     01 05 02 F6 | 	mov	_var03, _var02
088dc     01 04 66 F0 | 	shl	_var03, #1
088e0     01 05 02 F1 | 	add	_var03, _var02
088e4     02 04 66 F0 | 	shl	_var03, #2
088e8     03 00 00 FF 
088ec     04 E4 85 F1 | 	sub	objptr, ##1540
088f0     F2 04 02 F1 | 	add	_var03, objptr
088f4     02 01 02 FB | 	rdlong	_var01, _var03
088f8     04 04 06 F1 | 	add	_var03, #4
088fc     02 07 02 FB | 	rdlong	_var04, _var03
08900     01 05 02 F6 | 	mov	_var03, _var02
08904     01 04 66 F0 | 	shl	_var03, #1
08908     01 05 02 F1 | 	add	_var03, _var02
0890c     02 04 66 F0 | 	shl	_var03, #2
08910     F2 04 02 F1 | 	add	_var03, objptr
08914     08 04 06 F1 | 	add	_var03, #8
08918     02 03 02 FB | 	rdlong	_var02, _var03
0891c     04 00 00 FF 
08920     24 E4 85 F1 | 	sub	objptr, ##2084
08924     F2 04 02 FB | 	rdlong	_var03, objptr
08928     02 09 02 F6 | 	mov	_var05, _var03
0892c     01 08 66 F0 | 	shl	_var05, #1
08930     02 09 02 F1 | 	add	_var05, _var03
08934     02 08 66 F0 | 	shl	_var05, #2
08938     0C 00 00 FF 
0893c     0C E4 85 F1 | 	sub	objptr, ##6156
08940     F2 08 02 F1 | 	add	_var05, objptr
08944     04 01 62 FC | 	wrlong	_var01, _var05
08948     0C 00 00 FF 
0894c     0C E4 05 F1 | 	add	objptr, ##6156
08950     F2 08 02 FB | 	rdlong	_var05, objptr
08954     04 05 02 F6 | 	mov	_var03, _var05
08958     01 04 66 F0 | 	shl	_var03, #1
0895c     04 05 02 F1 | 	add	_var03, _var05
08960     02 04 66 F0 | 	shl	_var03, #2
08964     0C 00 00 FF 
08968     0C E4 85 F1 | 	sub	objptr, ##6156
0896c     F2 04 02 F1 | 	add	_var03, objptr
08970     04 04 06 F1 | 	add	_var03, #4
08974     02 07 62 FC | 	wrlong	_var04, _var03
08978     0C 00 00 FF 
0897c     0C E4 05 F1 | 	add	objptr, ##6156
08980     F2 08 02 FB | 	rdlong	_var05, objptr
08984     04 07 02 F6 | 	mov	_var04, _var05
08988     01 06 66 F0 | 	shl	_var04, #1
0898c     04 07 02 F1 | 	add	_var04, _var05
08990     02 06 66 F0 | 	shl	_var04, #2
08994     0C 00 00 FF 
08998     0C E4 85 F1 | 	sub	objptr, ##6156
0899c     F2 06 02 F1 | 	add	_var04, objptr
089a0     08 06 06 F1 | 	add	_var04, #8
089a4     03 03 62 FC | 	wrlong	_var02, _var04
089a8     0C 00 00 FF 
089ac     0C E4 05 F1 | 	add	objptr, ##6156
089b0     F2 00 02 FB | 	rdlong	_var01, objptr
089b4     01 00 06 F1 | 	add	_var01, #1
089b8     F2 00 62 FC | 	wrlong	_var01, objptr
089bc     3A 00 00 FF 
089c0     1C E4 85 F1 | 	sub	objptr, ##29724
089c4                 | LR__0720
089c4                 | _do_push_ret
089c4     2D 00 64 FD | 	ret
089c8                 | 
089c8                 | ' 
089c8                 | '   
089c8                 | ' sub csave_block(address as ulong)
089c8                 | _csave_block
089c8     09 01 02 F6 | 	mov	_var01, arg01
089cc                 | ' 
089cc                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
089cc                 | ' ' we enter it at the state of playing 1 kHz header tone
089cc                 | ' 
089cc                 | ' for i=0 to 63 step 2
089cc     00 02 06 F6 | 	mov	_var02, #0
089d0                 | LR__0730
089d0                 | '   do: loop until lpeek(base+32*7)>32768
089d0     2D 00 00 FF 
089d4     D4 E5 05 F1 | 	add	objptr, ##23508
089d8     97 0C 48 FB | 	callpa	#(@LR__0732-@LR__0731)>>2,fcache_load_ptr_
089dc                 | LR__0731
089dc     F2 12 02 FB | 	rdlong	arg01, objptr
089e0     E0 12 06 F1 | 	add	arg01, #224
089e4     09 FB 01 FB | 	rdlong	result1, arg01
089e8     40 00 00 FF 
089ec     01 FA 55 F2 | 	cmps	result1, ##32769 wc
089f0     E8 FF 9F CD |  if_b	jmp	#LR__0731
089f4                 | LR__0732
089f4     00 13 02 F6 | 	mov	arg01, _var01
089f8     01 05 02 F6 | 	mov	_var03, _var02
089fc     02 04 66 F0 | 	shl	_var03, #2
08a00     02 13 02 F1 | 	add	arg01, _var03
08a04     09 07 02 FB | 	rdlong	_var04, arg01
08a08     24 00 00 FF 
08a0c     AC E4 05 F1 | 	add	objptr, ##18604
08a10     F2 06 62 FC | 	wrlong	_var04, objptr
08a14     52 00 00 FF 
08a18     80 E4 85 F1 | 	sub	objptr, ##42112
08a1c                 | '   q=lpeek(address+4*i)
08a1c                 | '      for bit=0 to 31
08a1c     00 08 06 F6 | 	mov	_var05, #0
08a20     97 84 48 FB | 	callpa	#(@LR__0737-@LR__0733)>>2,fcache_load_ptr_
08a24                 | LR__0733
08a24                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08a24     52 00 00 FF 
08a28     80 E4 05 F1 | 	add	objptr, ##42112
08a2c     F2 06 02 FB | 	rdlong	_var04, objptr
08a30     52 00 00 FF 
08a34     80 E4 85 F1 | 	sub	objptr, ##42112
08a38     04 05 C2 F9 | 	decod	_var03, _var05
08a3c     02 07 CA F7 | 	test	_var04, _var03 wz
08a40     60 00 90 AD |  if_e	jmp	#LR__0734
08a44     04 05 02 F6 | 	mov	_var03, _var05
08a48     02 04 66 F0 | 	shl	_var03, #2
08a4c     4E 00 00 FF 
08a50     70 E4 05 F1 | 	add	objptr, ##40048
08a54     F2 04 02 F1 | 	add	_var03, objptr
08a58     02 FF 48 FC | 	wrbyte	#127, _var03
08a5c     04 05 02 F6 | 	mov	_var03, _var05
08a60     02 04 66 F0 | 	shl	_var03, #2
08a64     01 04 06 F1 | 	add	_var03, #1
08a68     F2 04 02 F1 | 	add	_var03, objptr
08a6c     02 01 49 FC | 	wrbyte	#128, _var03
08a70     04 05 02 F6 | 	mov	_var03, _var05
08a74     02 04 66 F0 | 	shl	_var03, #2
08a78     02 04 06 F1 | 	add	_var03, #2
08a7c     F2 04 02 F1 | 	add	_var03, objptr
08a80     02 FF 48 FC | 	wrbyte	#127, _var03
08a84     04 05 02 F6 | 	mov	_var03, _var05
08a88     02 04 66 F0 | 	shl	_var03, #2
08a8c     03 04 06 F1 | 	add	_var03, #3
08a90     F2 04 02 F1 | 	add	_var03, objptr
08a94     02 01 49 FC | 	wrbyte	#128, _var03
08a98     4E 00 00 FF 
08a9c     70 E4 85 F1 | 	sub	objptr, ##40048
08aa0     5C 00 90 FD | 	jmp	#LR__0735
08aa4                 | LR__0734
08aa4     04 05 02 F6 | 	mov	_var03, _var05
08aa8     02 04 66 F0 | 	shl	_var03, #2
08aac     4E 00 00 FF 
08ab0     70 E4 05 F1 | 	add	objptr, ##40048
08ab4     F2 04 02 F1 | 	add	_var03, objptr
08ab8     02 01 49 FC | 	wrbyte	#128, _var03
08abc     04 05 02 F6 | 	mov	_var03, _var05
08ac0     02 04 66 F0 | 	shl	_var03, #2
08ac4     01 04 06 F1 | 	add	_var03, #1
08ac8     F2 04 02 F1 | 	add	_var03, objptr
08acc     02 01 49 FC | 	wrbyte	#128, _var03
08ad0     04 05 02 F6 | 	mov	_var03, _var05
08ad4     02 04 66 F0 | 	shl	_var03, #2
08ad8     02 04 06 F1 | 	add	_var03, #2
08adc     F2 04 02 F1 | 	add	_var03, objptr
08ae0     02 FF 48 FC | 	wrbyte	#127, _var03
08ae4     04 05 02 F6 | 	mov	_var03, _var05
08ae8     02 04 66 F0 | 	shl	_var03, #2
08aec     03 04 06 F1 | 	add	_var03, #3
08af0     F2 04 02 F1 | 	add	_var03, objptr
08af4     02 FF 48 FC | 	wrbyte	#127, _var03
08af8     4E 00 00 FF 
08afc     70 E4 85 F1 | 	sub	objptr, ##40048
08b00                 | LR__0735
08b00     01 08 06 F1 | 	add	_var05, #1
08b04     20 08 56 F2 | 	cmps	_var05, #32 wc
08b08     18 FF 9F CD |  if_b	jmp	#LR__0733
08b0c                 | '   do: loop until lpeek(base+32*7)<32768
08b0c     2D 00 00 FF 
08b10     D4 E5 05 F1 | 	add	objptr, ##23508
08b14                 | LR__0736
08b14     F2 12 02 FB | 	rdlong	arg01, objptr
08b18     E0 12 06 F1 | 	add	arg01, #224
08b1c     09 FB 01 FB | 	rdlong	result1, arg01
08b20     40 00 00 FF 
08b24     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08b28     E8 FF 9F 3D |  if_ae	jmp	#LR__0736
08b2c                 | LR__0737
08b2c     00 13 02 F6 | 	mov	arg01, _var01
08b30     04 12 06 F1 | 	add	arg01, #4
08b34     01 05 02 F6 | 	mov	_var03, _var02
08b38     02 04 66 F0 | 	shl	_var03, #2
08b3c     02 13 02 F1 | 	add	arg01, _var03
08b40     09 07 02 FB | 	rdlong	_var04, arg01
08b44     24 00 00 FF 
08b48     AC E4 05 F1 | 	add	objptr, ##18604
08b4c     F2 06 62 FC | 	wrlong	_var04, objptr
08b50     52 00 00 FF 
08b54     80 E4 85 F1 | 	sub	objptr, ##42112
08b58                 | '   q=lpeek(address+4+4*i)
08b58                 | '      for bit=0 to 31
08b58     00 08 06 F6 | 	mov	_var05, #0
08b5c     97 94 48 FB | 	callpa	#(@LR__0741-@LR__0738)>>2,fcache_load_ptr_
08b60                 | LR__0738
08b60                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08b60     52 00 00 FF 
08b64     80 E4 05 F1 | 	add	objptr, ##42112
08b68     F2 06 02 FB | 	rdlong	_var04, objptr
08b6c     52 00 00 FF 
08b70     80 E4 85 F1 | 	sub	objptr, ##42112
08b74     04 05 C2 F9 | 	decod	_var03, _var05
08b78     02 07 CA F7 | 	test	_var04, _var03 wz
08b7c     80 00 90 AD |  if_e	jmp	#LR__0739
08b80     04 0B 02 F6 | 	mov	_var06, _var05
08b84     02 0A 66 F0 | 	shl	_var06, #2
08b88     80 04 06 F6 | 	mov	_var03, #128
08b8c     05 05 02 F1 | 	add	_var03, _var06
08b90     4E 00 00 FF 
08b94     70 E4 05 F1 | 	add	objptr, ##40048
08b98     F2 04 02 F1 | 	add	_var03, objptr
08b9c     02 FF 48 FC | 	wrbyte	#127, _var03
08ba0     04 0B 02 F6 | 	mov	_var06, _var05
08ba4     02 0A 66 F0 | 	shl	_var06, #2
08ba8     80 04 06 F6 | 	mov	_var03, #128
08bac     05 05 02 F1 | 	add	_var03, _var06
08bb0     01 04 06 F1 | 	add	_var03, #1
08bb4     F2 04 02 F1 | 	add	_var03, objptr
08bb8     02 01 49 FC | 	wrbyte	#128, _var03
08bbc     04 0B 02 F6 | 	mov	_var06, _var05
08bc0     02 0A 66 F0 | 	shl	_var06, #2
08bc4     80 04 06 F6 | 	mov	_var03, #128
08bc8     05 05 02 F1 | 	add	_var03, _var06
08bcc     02 04 06 F1 | 	add	_var03, #2
08bd0     F2 04 02 F1 | 	add	_var03, objptr
08bd4     02 FF 48 FC | 	wrbyte	#127, _var03
08bd8     04 0B 02 F6 | 	mov	_var06, _var05
08bdc     02 0A 66 F0 | 	shl	_var06, #2
08be0     80 04 06 F6 | 	mov	_var03, #128
08be4     05 05 02 F1 | 	add	_var03, _var06
08be8     03 04 06 F1 | 	add	_var03, #3
08bec     F2 04 02 F1 | 	add	_var03, objptr
08bf0     02 01 49 FC | 	wrbyte	#128, _var03
08bf4     4E 00 00 FF 
08bf8     70 E4 85 F1 | 	sub	objptr, ##40048
08bfc     7C 00 90 FD | 	jmp	#LR__0740
08c00                 | LR__0739
08c00     04 0B 02 F6 | 	mov	_var06, _var05
08c04     02 0A 66 F0 | 	shl	_var06, #2
08c08     80 04 06 F6 | 	mov	_var03, #128
08c0c     05 05 02 F1 | 	add	_var03, _var06
08c10     4E 00 00 FF 
08c14     70 E4 05 F1 | 	add	objptr, ##40048
08c18     F2 04 02 F1 | 	add	_var03, objptr
08c1c     02 01 49 FC | 	wrbyte	#128, _var03
08c20     04 0B 02 F6 | 	mov	_var06, _var05
08c24     02 0A 66 F0 | 	shl	_var06, #2
08c28     80 04 06 F6 | 	mov	_var03, #128
08c2c     05 05 02 F1 | 	add	_var03, _var06
08c30     01 04 06 F1 | 	add	_var03, #1
08c34     F2 04 02 F1 | 	add	_var03, objptr
08c38     02 01 49 FC | 	wrbyte	#128, _var03
08c3c     04 0B 02 F6 | 	mov	_var06, _var05
08c40     02 0A 66 F0 | 	shl	_var06, #2
08c44     80 04 06 F6 | 	mov	_var03, #128
08c48     05 05 02 F1 | 	add	_var03, _var06
08c4c     02 04 06 F1 | 	add	_var03, #2
08c50     F2 04 02 F1 | 	add	_var03, objptr
08c54     02 FF 48 FC | 	wrbyte	#127, _var03
08c58     04 0B 02 F6 | 	mov	_var06, _var05
08c5c     02 0A 66 F0 | 	shl	_var06, #2
08c60     80 04 06 F6 | 	mov	_var03, #128
08c64     05 05 02 F1 | 	add	_var03, _var06
08c68     03 04 06 F1 | 	add	_var03, #3
08c6c     F2 04 02 F1 | 	add	_var03, objptr
08c70     02 FF 48 FC | 	wrbyte	#127, _var03
08c74     4E 00 00 FF 
08c78     70 E4 85 F1 | 	sub	objptr, ##40048
08c7c                 | LR__0740
08c7c     01 08 06 F1 | 	add	_var05, #1
08c80     20 08 56 F2 | 	cmps	_var05, #32 wc
08c84     D8 FE 9F CD |  if_b	jmp	#LR__0738
08c88                 | LR__0741
08c88     02 02 06 F1 | 	add	_var02, #2
08c8c     40 02 56 F2 | 	cmps	_var02, #64 wc
08c90     3C FD 9F CD |  if_b	jmp	#LR__0730
08c94                 | ' do: loop until lpeek(base+32*7)>32768
08c94     2D 00 00 FF 
08c98     D4 E5 05 F1 | 	add	objptr, ##23508
08c9c     97 84 48 FB | 	callpa	#(@LR__0750-@LR__0742)>>2,fcache_load_ptr_
08ca0                 | LR__0742
08ca0     F2 12 02 FB | 	rdlong	arg01, objptr
08ca4     E0 12 06 F1 | 	add	arg01, #224
08ca8     09 FB 01 FB | 	rdlong	result1, arg01
08cac     40 00 00 FF 
08cb0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08cb4     E8 FF 9F CD |  if_b	jmp	#LR__0742
08cb8     2D 00 00 FF 
08cbc     D4 E5 85 F1 | 	sub	objptr, ##23508
08cc0                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08cc0     00 02 06 F6 | 	mov	_var02, #0
08cc4                 | LR__0743
08cc4     01 07 52 F6 | 	abs	_var04, _var02 wc
08cc8     07 06 06 F5 | 	and	_var04, #7
08ccc     03 07 82 F6 | 	negc	_var04, _var04
08cd0     04 06 56 F2 | 	cmps	_var04, #4 wc
08cd4     20 00 90 3D |  if_ae	jmp	#LR__0744
08cd8     01 0B 02 F6 | 	mov	_var06, _var02
08cdc     4E 00 00 FF 
08ce0     70 E4 05 F1 | 	add	objptr, ##40048
08ce4     F2 0A 02 F1 | 	add	_var06, objptr
08ce8     05 FF 48 FC | 	wrbyte	#127, _var06
08cec     4E 00 00 FF 
08cf0     70 E4 85 F1 | 	sub	objptr, ##40048
08cf4     1C 00 90 FD | 	jmp	#LR__0745
08cf8                 | LR__0744
08cf8     01 0B 02 F6 | 	mov	_var06, _var02
08cfc     4E 00 00 FF 
08d00     70 E4 05 F1 | 	add	objptr, ##40048
08d04     F2 0A 02 F1 | 	add	_var06, objptr
08d08     05 01 49 FC | 	wrbyte	#128, _var06
08d0c     4E 00 00 FF 
08d10     70 E4 85 F1 | 	sub	objptr, ##40048
08d14                 | LR__0745
08d14     01 02 06 F1 | 	add	_var02, #1
08d18     80 02 56 F2 | 	cmps	_var02, #128 wc
08d1c     A4 FF 9F CD |  if_b	jmp	#LR__0743
08d20                 | ' 
08d20                 | ' do: loop until lpeek(base+32*7)<32768
08d20     2D 00 00 FF 
08d24     D4 E5 05 F1 | 	add	objptr, ##23508
08d28                 | LR__0746
08d28     F2 12 02 FB | 	rdlong	arg01, objptr
08d2c     E0 12 06 F1 | 	add	arg01, #224
08d30     09 FB 01 FB | 	rdlong	result1, arg01
08d34     40 00 00 FF 
08d38     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08d3c     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08d40     2D 00 00 FF 
08d44     D4 E5 85 F1 | 	sub	objptr, ##23508
08d48                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08d48     80 02 06 F6 | 	mov	_var02, #128
08d4c                 | LR__0747
08d4c     01 07 52 F6 | 	abs	_var04, _var02 wc
08d50     07 06 06 F5 | 	and	_var04, #7
08d54     03 07 82 F6 | 	negc	_var04, _var04
08d58     04 06 56 F2 | 	cmps	_var04, #4 wc
08d5c     20 00 90 3D |  if_ae	jmp	#LR__0748
08d60     01 0B 02 F6 | 	mov	_var06, _var02
08d64     4E 00 00 FF 
08d68     70 E4 05 F1 | 	add	objptr, ##40048
08d6c     F2 0A 02 F1 | 	add	_var06, objptr
08d70     05 FF 48 FC | 	wrbyte	#127, _var06
08d74     4E 00 00 FF 
08d78     70 E4 85 F1 | 	sub	objptr, ##40048
08d7c     1C 00 90 FD | 	jmp	#LR__0749
08d80                 | LR__0748
08d80     01 0B 02 F6 | 	mov	_var06, _var02
08d84     4E 00 00 FF 
08d88     70 E4 05 F1 | 	add	objptr, ##40048
08d8c     F2 0A 02 F1 | 	add	_var06, objptr
08d90     05 01 49 FC | 	wrbyte	#128, _var06
08d94     4E 00 00 FF 
08d98     70 E4 85 F1 | 	sub	objptr, ##40048
08d9c                 | LR__0749
08d9c     01 02 06 F1 | 	add	_var02, #1
08da0     00 03 16 F2 | 	cmp	_var02, #256 wc
08da4     A4 FF 9F CD |  if_b	jmp	#LR__0747
08da8                 | LR__0750
08da8                 | _csave_block_ret
08da8     2D 00 64 FD | 	ret
08dac                 | 
08dac                 | ' 
08dac                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
08dac                 | _csave_addtoblock
08dac     04 4A 05 F6 | 	mov	COUNT_, #4
08db0     A8 00 A0 FD | 	call	#pushregs_
08db4     09 1F 02 F6 | 	mov	local01, arg01
08db8                 | ' 
08db8                 | ' 
08db8                 | ' if force=0 then
08db8     07 14 4E F7 | 	zerox	arg02, #7 wz
08dbc     78 00 90 5D |  if_ne	jmp	#LR__0760
08dc0     50 00 00 FF 
08dc4     70 E5 05 F1 | 	add	objptr, ##41328
08dc8     F2 14 02 FB | 	rdlong	arg02, objptr
08dcc     02 00 00 FF 
08dd0     00 E4 85 F1 | 	sub	objptr, ##1024
08dd4     F2 14 02 F1 | 	add	arg02, objptr
08dd8     0A 1F 42 FC | 	wrbyte	local01, arg02
08ddc     02 00 00 FF 
08de0     00 E4 05 F1 | 	add	objptr, ##1024
08de4     F2 1E 02 FB | 	rdlong	local01, objptr
08de8     01 1E 06 F1 | 	add	local01, #1
08dec     F2 1E 62 FC | 	wrlong	local01, objptr
08df0                 | '   block(blockptr)=d
08df0                 | '   blockptr+=1
08df0                 | '   if blockptr>=255 then
08df0     50 00 00 FF 
08df4     70 E5 85 F1 | 	sub	objptr, ##41328
08df8     FF 1E 16 F2 | 	cmp	local01, #255 wc
08dfc     E4 00 90 CD |  if_b	jmp	#LR__0764
08e00     4E 00 00 FF 
08e04     70 E5 05 F1 | 	add	objptr, ##40304
08e08     F2 12 02 F6 | 	mov	arg01, objptr
08e0c     4E 00 00 FF 
08e10     70 E5 85 F1 | 	sub	objptr, ##40304
08e14     B0 FB BF FD | 	call	#_csave_block
08e18     50 00 00 FF 
08e1c     70 E5 05 F1 | 	add	objptr, ##41328
08e20     F2 00 68 FC | 	wrlong	#0, objptr
08e24     50 00 00 FF 
08e28     70 E5 85 F1 | 	sub	objptr, ##41328
08e2c     2C 13 06 F6 | 	mov	arg01, #300
08e30     70 C9 B0 FD | 	call	#__system___waitms
08e34     AC 00 90 FD | 	jmp	#LR__0764
08e38                 | LR__0760
08e38     50 00 00 FF 
08e3c     70 E5 05 F1 | 	add	objptr, ##41328
08e40     F2 20 02 FB | 	rdlong	local02, objptr
08e44     02 00 00 FF 
08e48     00 E4 85 F1 | 	sub	objptr, ##1024
08e4c     F2 20 02 F1 | 	add	local02, objptr
08e50     10 1F 42 FC | 	wrbyte	local01, local02
08e54                 | '   block(blockptr)=d
08e54                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
08e54     02 00 00 FF 
08e58     00 E4 05 F1 | 	add	objptr, ##1024
08e5c     F2 22 02 FB | 	rdlong	local03, objptr
08e60     50 00 00 FF 
08e64     70 E5 85 F1 | 	sub	objptr, ##41328
08e68     FF 22 16 F2 | 	cmp	local03, #255 wc
08e6c     40 00 90 3D |  if_ae	jmp	#LR__0763
08e70     50 00 00 FF 
08e74     70 E5 05 F1 | 	add	objptr, ##41328
08e78     F2 24 02 FB | 	rdlong	local04, objptr
08e7c     50 00 00 FF 
08e80     70 E5 85 F1 | 	sub	objptr, ##41328
08e84                 | LR__0761
08e84     00 25 56 F2 | 	cmps	local04, #256 wc
08e88     24 00 90 3D |  if_ae	jmp	#LR__0762
08e8c     12 21 02 F6 | 	mov	local02, local04
08e90     4E 00 00 FF 
08e94     70 E5 05 F1 | 	add	objptr, ##40304
08e98     F2 20 02 F1 | 	add	local02, objptr
08e9c     10 01 48 FC | 	wrbyte	#0, local02
08ea0     01 24 06 F1 | 	add	local04, #1
08ea4     4E 00 00 FF 
08ea8     70 E5 85 F1 | 	sub	objptr, ##40304
08eac     D4 FF 9F FD | 	jmp	#LR__0761
08eb0                 | LR__0762
08eb0                 | LR__0763
08eb0     4E 00 00 FF 
08eb4     70 E5 05 F1 | 	add	objptr, ##40304
08eb8     F2 12 02 F6 | 	mov	arg01, objptr
08ebc     4E 00 00 FF 
08ec0     70 E5 85 F1 | 	sub	objptr, ##40304
08ec4     00 FB BF FD | 	call	#_csave_block
08ec8     50 00 00 FF 
08ecc     70 E5 05 F1 | 	add	objptr, ##41328
08ed0     F2 00 68 FC | 	wrlong	#0, objptr
08ed4     50 00 00 FF 
08ed8     70 E5 85 F1 | 	sub	objptr, ##41328
08edc     2C 13 06 F6 | 	mov	arg01, #300
08ee0     C0 C8 B0 FD | 	call	#__system___waitms
08ee4                 | LR__0764
08ee4     A7 F0 03 F6 | 	mov	ptra, fp
08ee8     B2 00 A0 FD | 	call	#popregs_
08eec                 | _csave_addtoblock_ret
08eec     2D 00 64 FD | 	ret
08ef0                 | 
08ef0                 | ' 
08ef0                 | ' sub test_csave
08ef0                 | _test_csave
08ef0     04 4A 05 F6 | 	mov	COUNT_, #4
08ef4     A8 00 A0 FD | 	call	#pushregs_
08ef8     C0 F0 07 F1 | 	add	ptra, #192
08efc                 | ' 'dim fileheader,savestart, saveptr as ulong
08efc                 | ' 
08efc                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
08efc     41 00 00 FF 
08f00     48 E4 05 F1 | 	add	objptr, ##33352
08f04     F2 12 02 FB | 	rdlong	arg01, objptr
08f08     41 00 00 FF 
08f0c     48 E4 85 F1 | 	sub	objptr, ##33352
08f10     64 92 B0 FD | 	call	#_pslpeek
08f14     FF FF 7F FF 
08f18     FF FB 0D F2 | 	cmp	result1, ##-1 wz
08f1c     0C 00 90 5D |  if_ne	jmp	#LR__0770
08f20     1B 12 06 F6 | 	mov	arg01, #27
08f24     94 90 B0 FD | 	call	#_printerror
08f28     0C 03 90 FD | 	jmp	#LR__0782
08f2c                 | LR__0770
08f2c     04 F8 BF FD | 	call	#_pop
08f30     FF 1E 02 F6 | 	mov	local01, result3
08f34     90 4E 05 F1 | 	add	fp, #144
08f38     A7 FA 61 FC | 	wrlong	result1, fp
08f3c     04 4E 05 F1 | 	add	fp, #4
08f40     A7 FC 61 FC | 	wrlong	result2, fp
08f44     04 4E 05 F1 | 	add	fp, #4
08f48     A7 1E 62 FC | 	wrlong	local01, fp
08f4c                 | ' t1=pop()
08f4c                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
08f4c     98 4E 85 F1 | 	sub	fp, #152
08f50     1F 1E 0E F2 | 	cmp	local01, #31 wz
08f54     25 01 00 5F 
08f58     0B 1E 06 56 |  if_ne	mov	local01, ##@LR__4295
08f5c     8C 4E 05 51 |  if_ne	add	fp, #140
08f60     A7 1E 62 5C |  if_ne	wrlong	local01, fp
08f64     8C 4E 85 51 |  if_ne	sub	fp, #140
08f68     90 4E 05 A1 |  if_e	add	fp, #144
08f6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
08f70     04 4E 85 A1 |  if_e	sub	fp, #4
08f74     A7 1E 62 AC |  if_e	wrlong	local01, fp
08f78     8C 4E 85 A1 |  if_e	sub	fp, #140
08f7c                 | ' 
08f7c                 | ' ' prepare 1 kHz header wave
08f7c                 | ' 
08f7c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08f7c     A7 00 68 FC | 	wrlong	#0, fp
08f80     97 34 48 FB | 	callpa	#(@LR__0774-@LR__0771)>>2,fcache_load_ptr_
08f84                 | LR__0771
08f84     A7 1E 02 FB | 	rdlong	local01, fp
08f88     0F 1F 52 F6 | 	abs	local01, local01 wc
08f8c     07 1E 06 F5 | 	and	local01, #7
08f90     0F 1F 82 F6 | 	negc	local01, local01
08f94     04 1E 56 F2 | 	cmps	local01, #4 wc
08f98     20 00 90 3D |  if_ae	jmp	#LR__0772
08f9c     A7 1E 02 FB | 	rdlong	local01, fp
08fa0     4E 00 00 FF 
08fa4     70 E4 05 F1 | 	add	objptr, ##40048
08fa8     F2 1E 02 F1 | 	add	local01, objptr
08fac     0F FF 48 FC | 	wrbyte	#127, local01
08fb0     4E 00 00 FF 
08fb4     70 E4 85 F1 | 	sub	objptr, ##40048
08fb8     1C 00 90 FD | 	jmp	#LR__0773
08fbc                 | LR__0772
08fbc     A7 1E 02 FB | 	rdlong	local01, fp
08fc0     4E 00 00 FF 
08fc4     70 E4 05 F1 | 	add	objptr, ##40048
08fc8     F2 1E 02 F1 | 	add	local01, objptr
08fcc     0F 01 49 FC | 	wrbyte	#128, local01
08fd0     4E 00 00 FF 
08fd4     70 E4 85 F1 | 	sub	objptr, ##40048
08fd8                 | LR__0773
08fd8     A7 1E 02 FB | 	rdlong	local01, fp
08fdc     01 1E 06 F1 | 	add	local01, #1
08fe0     A7 1E 62 FC | 	wrlong	local01, fp
08fe4     00 1F 56 F2 | 	cmps	local01, #256 wc
08fe8     98 FF 9F CD |  if_b	jmp	#LR__0771
08fec                 | LR__0774
08fec     4E 00 00 FF 
08ff0     70 E4 05 F1 | 	add	objptr, ##40048
08ff4     F2 14 02 F6 | 	mov	arg02, objptr
08ff8     07 12 06 F6 | 	mov	arg01, #7
08ffc     0F 00 00 FF 
09000     40 17 06 F6 | 	mov	arg03, ##8000
09004     0E 18 C6 F9 | 	decod	arg04, #14
09008     00 1B 06 F6 | 	mov	arg05, #256
0900c     00 1C 06 F6 | 	mov	arg06, #0
09010     42 00 00 FF 
09014     B0 E5 85 F1 | 	sub	objptr, ##34224
09018     FC C0 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0901c     0B 00 00 FF 
09020     C0 E4 85 F1 | 	sub	objptr, ##5824
09024     05 00 00 FF 
09028     B8 13 06 F6 | 	mov	arg01, ##3000
0902c     74 C7 B0 FD | 	call	#__system___waitms
09030     50 00 00 FF 
09034     70 E5 05 F1 | 	add	objptr, ##41328
09038     F2 00 68 FC | 	wrlong	#0, objptr
0903c     50 00 00 FF 
09040     70 E5 85 F1 | 	sub	objptr, ##41328
09044     72 12 06 F6 | 	mov	arg01, #114
09048     00 14 06 F6 | 	mov	arg02, #0
0904c     5C FD BF FD | 	call	#_csave_addtoblock
09050     62 12 06 F6 | 	mov	arg01, #98
09054     00 14 06 F6 | 	mov	arg02, #0
09058     50 FD BF FD | 	call	#_csave_addtoblock
0905c     61 12 06 F6 | 	mov	arg01, #97
09060     00 14 06 F6 | 	mov	arg02, #0
09064     44 FD BF FD | 	call	#_csave_addtoblock
09068     0D 12 06 F6 | 	mov	arg01, #13
0906c     00 14 06 F6 | 	mov	arg02, #0
09070     38 FD BF FD | 	call	#_csave_addtoblock
09074                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
09074                 | ' waitms 3000 
09074                 | ' 
09074                 | ' blockptr=0
09074                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
09074                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
09074     A7 02 68 FC | 	wrlong	#1, fp
09078     8C 4E 05 F1 | 	add	fp, #140
0907c     A7 12 02 FB | 	rdlong	arg01, fp
09080     8C 4E 85 F1 | 	sub	fp, #140
09084     09 21 02 F6 | 	mov	local02, arg01
09088     97 06 48 FB | 	callpa	#(@LR__0776-@LR__0775)>>2,fcache_load_ptr_
0908c                 | LR__0775
0908c     10 FB C9 FA | 	rdbyte	result1, local02 wz
09090     01 20 06 51 |  if_ne	add	local02, #1
09094     F4 FF 9F 5D |  if_ne	jmp	#LR__0775
09098                 | LR__0776
09098     09 21 82 F1 | 	sub	local02, arg01
0909c     10 23 02 F6 | 	mov	local03, local02
090a0     01 22 06 F1 | 	add	local03, #1
090a4                 | LR__0777
090a4     A7 1E 02 FB | 	rdlong	local01, fp
090a8     11 1F 52 F2 | 	cmps	local01, local03 wc
090ac     34 00 90 3D |  if_ae	jmp	#LR__0778
090b0     8C 4E 05 F1 | 	add	fp, #140
090b4     A7 12 02 FB | 	rdlong	arg01, fp
090b8     8C 4E 85 F1 | 	sub	fp, #140
090bc     A7 14 02 FB | 	rdlong	arg02, fp
090c0     01 16 06 F6 | 	mov	arg03, #1
090c4     10 E5 B0 FD | 	call	#__system__Mid_S
090c8     FD 12 C2 FA | 	rdbyte	arg01, result1
090cc     00 14 06 F6 | 	mov	arg02, #0
090d0     D8 FC BF FD | 	call	#_csave_addtoblock
090d4     A7 1E 02 FB | 	rdlong	local01, fp
090d8     01 1E 06 F1 | 	add	local01, #1
090dc     A7 1E 62 FC | 	wrlong	local01, fp
090e0     C0 FF 9F FD | 	jmp	#LR__0777
090e4                 | LR__0778
090e4     00 12 06 F6 | 	mov	arg01, #0
090e8     00 14 06 F6 | 	mov	arg02, #0
090ec     BC FC BF FD | 	call	#_csave_addtoblock
090f0     72 12 06 F6 | 	mov	arg01, #114
090f4     00 14 06 F6 | 	mov	arg02, #0
090f8     B0 FC BF FD | 	call	#_csave_addtoblock
090fc     62 12 06 F6 | 	mov	arg01, #98
09100     00 14 06 F6 | 	mov	arg02, #0
09104     A4 FC BF FD | 	call	#_csave_addtoblock
09108     73 12 06 F6 | 	mov	arg01, #115
0910c     00 14 06 F6 | 	mov	arg02, #0
09110     98 FC BF FD | 	call	#_csave_addtoblock
09114     0D 12 06 F6 | 	mov	arg01, #13
09118     00 14 06 F6 | 	mov	arg02, #0
0911c     8C FC BF FD | 	call	#_csave_addtoblock
09120     41 00 00 FF 
09124     48 E4 05 F1 | 	add	objptr, ##33352
09128     F2 1E 02 FB | 	rdlong	local01, objptr
0912c     41 00 00 FF 
09130     48 E4 85 F1 | 	sub	objptr, ##33352
09134     9C 4E 05 F1 | 	add	fp, #156
09138     A7 1E 62 FC | 	wrlong	local01, fp
0913c     9C 4E 85 F1 | 	sub	fp, #156
09140                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
09140                 | ' 
09140                 | ' saveptr=programstart
09140                 | ' do
09140                 | LR__0779
09140     A0 4E 05 F1 | 	add	fp, #160
09144     A7 12 02 F6 | 	mov	arg01, fp
09148     04 4E 85 F1 | 	sub	fp, #4
0914c     A7 14 02 FB | 	rdlong	arg02, fp
09150     9C 4E 85 F1 | 	sub	fp, #156
09154     18 16 06 F6 | 	mov	arg03, #24
09158     0B 00 00 FF 
0915c     C0 E4 05 F1 | 	add	objptr, ##5824
09160     60 B8 B0 FD | 	call	#_psram_spin2_read1
09164     0C 4E 05 F1 | 	add	fp, #12
09168     A7 12 02 F6 | 	mov	arg01, fp
0916c     9C 4E 05 F1 | 	add	fp, #156
09170     A7 14 02 FB | 	rdlong	arg02, fp
09174     04 4E 05 F1 | 	add	fp, #4
09178     A7 16 02 FB | 	rdlong	arg03, fp
0917c     AC 4E 85 F1 | 	sub	fp, #172
09180     40 B8 B0 FD | 	call	#_psram_spin2_read1
09184     0B 00 00 FF 
09188     C0 E4 85 F1 | 	sub	objptr, ##5824
0918c     AC 4E 05 F1 | 	add	fp, #172
09190     A7 12 02 FB | 	rdlong	arg01, fp
09194     AC 4E 85 F1 | 	sub	fp, #172
09198     00 14 06 F6 | 	mov	arg02, #0
0919c     0C FC BF FD | 	call	#_csave_addtoblock
091a0                 | '   psram.read1(varptr(header(0)),saveptr,24)
091a0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
091a0                 | '   csave_addtoblock(header(3),0) ' that's always <255
091a0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
091a0     A7 00 68 FC | 	wrlong	#0, fp
091a4     AC 4E 05 F1 | 	add	fp, #172
091a8     A7 24 02 FB | 	rdlong	local04, fp
091ac     AC 4E 85 F1 | 	sub	fp, #172
091b0                 | LR__0780
091b0     A7 1E 02 FB | 	rdlong	local01, fp
091b4     12 1F 52 F2 | 	cmps	local01, local04 wc
091b8     2C 00 90 3D |  if_ae	jmp	#LR__0781
091bc     A7 22 02 FB | 	rdlong	local03, fp
091c0     0C 4E 05 F1 | 	add	fp, #12
091c4     A7 22 02 F1 | 	add	local03, fp
091c8     11 13 C2 FA | 	rdbyte	arg01, local03
091cc     00 14 06 F6 | 	mov	arg02, #0
091d0     0C 4E 85 F1 | 	sub	fp, #12
091d4     D4 FB BF FD | 	call	#_csave_addtoblock
091d8     A7 22 02 FB | 	rdlong	local03, fp
091dc     01 22 06 F1 | 	add	local03, #1
091e0     A7 22 62 FC | 	wrlong	local03, fp
091e4     C8 FF 9F FD | 	jmp	#LR__0780
091e8                 | LR__0781
091e8     B4 4E 05 F1 | 	add	fp, #180
091ec     A7 1E 02 FB | 	rdlong	local01, fp
091f0     18 4E 85 F1 | 	sub	fp, #24
091f4     A7 1E 62 FC | 	wrlong	local01, fp
091f8     18 4E 05 F1 | 	add	fp, #24
091fc     A7 1E 02 FB | 	rdlong	local01, fp
09200     B4 4E 85 F1 | 	sub	fp, #180
09204     FF FF 3F FF 
09208     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0920c     30 FF 9F 5D |  if_ne	jmp	#LR__0779
09210     00 12 06 F6 | 	mov	arg01, #0
09214     01 14 06 F6 | 	mov	arg02, #1
09218     90 FB BF FD | 	call	#_csave_addtoblock
0921c     2D 00 00 FF 
09220     D4 E5 05 F1 | 	add	objptr, ##23508
09224     F2 12 02 FB | 	rdlong	arg01, objptr
09228     2D 00 00 FF 
0922c     D4 E5 85 F1 | 	sub	objptr, ##23508
09230     F4 12 06 F1 | 	add	arg01, #244
09234     09 01 58 FC | 	wrword	#0, arg01
09238                 | LR__0782
09238     A7 F0 03 F6 | 	mov	ptra, fp
0923c     B2 00 A0 FD | 	call	#popregs_
09240                 | _test_csave_ret
09240     2D 00 64 FD | 	ret
09244                 | 
09244                 | ' 
09244                 | ' ' ----------------- Save the program
09244                 | ' 
09244                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09244                 | _do_save
09244     02 4A 05 F6 | 	mov	COUNT_, #2
09248     A8 00 A0 FD | 	call	#pushregs_
0924c     01 00 00 FF 
09250     BC F0 07 F1 | 	add	ptra, ##700
09254     01 00 00 FF 
09258     10 4E 05 F1 | 	add	fp, ##528
0925c     B1 B0 86 FF 
09260     A7 E4 68 FC | 	wrlong	##224486002, fp
09264     01 00 00 FF 
09268     10 4E 85 F1 | 	sub	fp, ##528
0926c     C4 F4 BF FD | 	call	#_pop
09270     FF 16 02 F6 | 	mov	arg03, result3
09274     A7 FA 61 FC | 	wrlong	result1, fp
09278     04 4E 05 F1 | 	add	fp, #4
0927c     A7 FC 61 FC | 	wrlong	result2, fp
09280     04 4E 05 F1 | 	add	fp, #4
09284     A7 16 62 FC | 	wrlong	arg03, fp
09288     08 4E 85 F1 | 	sub	fp, #8
0928c                 | ' 
0928c                 | ' fileheader=$0D616272' rba+ver'
0928c                 | ' 
0928c                 | ' t1=pop() 
0928c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0928c     41 00 00 FF 
09290     48 E4 05 F1 | 	add	objptr, ##33352
09294     F2 12 02 FB | 	rdlong	arg01, objptr
09298     41 00 00 FF 
0929c     48 E4 85 F1 | 	sub	objptr, ##33352
092a0     D4 8E B0 FD | 	call	#_pslpeek
092a4     FF FF 7F FF 
092a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
092ac     0C 00 90 5D |  if_ne	jmp	#LR__0790
092b0     1B 12 06 F6 | 	mov	arg01, #27
092b4     04 8D B0 FD | 	call	#_printerror
092b8     3C 02 90 FD | 	jmp	#LR__0795
092bc                 | LR__0790
092bc                 | ' if t1.result_type=result_string then
092bc     08 4E 05 F1 | 	add	fp, #8
092c0     A7 1E 02 FB | 	rdlong	local01, fp
092c4     08 4E 85 F1 | 	sub	fp, #8
092c8     1F 1E 0E F2 | 	cmp	local01, #31 wz
092cc     28 02 90 5D |  if_ne	jmp	#LR__0794
092d0                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
092d0     A7 12 02 FB | 	rdlong	arg01, fp
092d4     25 01 00 FF 
092d8     16 14 06 F6 | 	mov	arg02, ##@LR__4296
092dc     F8 C1 B0 FD | 	call	#__system___string_cmp
092e0     00 FA 0D F2 | 	cmp	result1, #0 wz
092e4     25 01 00 AF 
092e8     17 1E 06 A6 |  if_e	mov	local01, ##@LR__4297
092ec     A7 1E 62 AC |  if_e	wrlong	local01, fp
092f0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
092f0     09 12 06 F6 | 	mov	arg01, #9
092f4     9C 0D B1 FD | 	call	#__system__close
092f8     09 1E 06 F6 | 	mov	local01, #9
092fc     49 00 00 FF 
09300     58 E4 05 F1 | 	add	objptr, ##37464
09304     F2 12 02 FB | 	rdlong	arg01, objptr
09308     49 00 00 FF 
0930c     58 E4 85 F1 | 	sub	objptr, ##37464
09310     25 01 00 FF 
09314     22 14 06 F6 | 	mov	arg02, ##@LR__4298
09318     F0 C1 B0 FD | 	call	#__system___string_concat
0931c     FD 12 02 F6 | 	mov	arg01, result1
09320     A7 14 02 FB | 	rdlong	arg02, fp
09324     E4 C1 B0 FD | 	call	#__system___string_concat
09328     FD 14 02 F6 | 	mov	arg02, result1
0932c     0F 13 02 F6 | 	mov	arg01, local01
09330     0D 16 06 F6 | 	mov	arg03, #13
09334     7C CD B0 FD | 	call	#__system___basic_open_string
09338     01 00 00 FF 
0933c     0C 4E 05 F1 | 	add	fp, ##524
09340     A7 0A 68 FC | 	wrlong	#5, fp
09344     41 00 00 FF 
09348     48 E4 05 F1 | 	add	objptr, ##33352
0934c     F2 1E 02 FB | 	rdlong	local01, objptr
09350     41 00 00 FF 
09354     48 E4 85 F1 | 	sub	objptr, ##33352
09358     0C 4E 05 F1 | 	add	fp, #12
0935c     A7 1E 62 FC | 	wrlong	local01, fp
09360     01 00 00 FF 
09364     18 4E 85 F1 | 	sub	fp, ##536
09368                 | ' '  put #9,1,fileheader,1
09368                 | '   i=5
09368                 | '   saveptr=programstart
09368                 | '   do
09368                 | LR__0791
09368     01 00 00 FF 
0936c     1C 4E 05 F1 | 	add	fp, ##540
09370     A7 12 02 F6 | 	mov	arg01, fp
09374     04 4E 85 F1 | 	sub	fp, #4
09378     A7 14 02 FB | 	rdlong	arg02, fp
0937c     01 00 00 FF 
09380     18 4E 85 F1 | 	sub	fp, ##536
09384     18 16 06 F6 | 	mov	arg03, #24
09388     0B 00 00 FF 
0938c     C0 E4 05 F1 | 	add	objptr, ##5824
09390     30 B6 B0 FD | 	call	#_psram_spin2_read1
09394     01 00 00 FF 
09398     34 4E 05 F1 | 	add	fp, ##564
0939c     A7 12 02 F6 | 	mov	arg01, fp
093a0     10 4E 85 F1 | 	sub	fp, #16
093a4     A7 14 02 FB | 	rdlong	arg02, fp
093a8     04 4E 05 F1 | 	add	fp, #4
093ac     A7 16 02 FB | 	rdlong	arg03, fp
093b0     01 00 00 FF 
093b4     28 4E 85 F1 | 	sub	fp, ##552
093b8     08 B6 B0 FD | 	call	#_psram_spin2_read1
093bc     0B 00 00 FF 
093c0     C0 E4 85 F1 | 	sub	objptr, ##5824
093c4     25 01 00 FF 
093c8     24 1E 06 F6 | 	mov	local01, ##@LR__4299
093cc     01 00 00 FF 
093d0     B4 4E 05 F1 | 	add	fp, ##692
093d4     A7 1E 62 FC | 	wrlong	local01, fp
093d8                 | '     psram.read1(varptr(header(0)),saveptr,24)
093d8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
093d8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
093d8     A8 4E 85 F1 | 	sub	fp, #168
093dc     A7 02 68 FC | 	wrlong	#1, fp
093e0     1C 4E 05 F1 | 	add	fp, #28
093e4     A7 20 02 FB | 	rdlong	local02, fp
093e8     01 00 00 FF 
093ec     28 4E 85 F1 | 	sub	fp, ##552
093f0     01 20 06 F1 | 	add	local02, #1
093f4                 | LR__0792
093f4     01 00 00 FF 
093f8     0C 4E 05 F1 | 	add	fp, ##524
093fc     A7 1E 02 FB | 	rdlong	local01, fp
09400     01 00 00 FF 
09404     0C 4E 85 F1 | 	sub	fp, ##524
09408     10 1F 52 F2 | 	cmps	local01, local02 wc
0940c     64 00 90 3D |  if_ae	jmp	#LR__0793
09410     01 00 00 FF 
09414     B4 4E 05 F1 | 	add	fp, ##692
09418     A7 1E 02 FB | 	rdlong	local01, fp
0941c     A8 4E 85 F1 | 	sub	fp, #168
09420     A7 16 02 FB | 	rdlong	arg03, fp
09424     01 16 86 F1 | 	sub	arg03, #1
09428     28 4E 05 F1 | 	add	fp, #40
0942c     A7 16 02 F1 | 	add	arg03, fp
09430     0B 13 C2 FA | 	rdbyte	arg01, arg03
09434     01 00 00 FF 
09438     34 4E 85 F1 | 	sub	fp, ##564
0943c     44 E2 B0 FD | 	call	#__system__Chr_S
09440     FD 14 02 F6 | 	mov	arg02, result1
09444     0F 13 02 F6 | 	mov	arg01, local01
09448     C0 C0 B0 FD | 	call	#__system___string_concat
0944c     01 00 00 FF 
09450     B4 4E 05 F1 | 	add	fp, ##692
09454     A7 FA 61 FC | 	wrlong	result1, fp
09458     A8 4E 85 F1 | 	sub	fp, #168
0945c     A7 1E 02 FB | 	rdlong	local01, fp
09460     01 1E 06 F1 | 	add	local01, #1
09464     A7 1E 62 FC | 	wrlong	local01, fp
09468     01 00 00 FF 
0946c     0C 4E 85 F1 | 	sub	fp, ##524
09470     80 FF 9F FD | 	jmp	#LR__0792
09474                 | LR__0793
09474                 | '  '   put #9,i,header(3),1 : i+=4
09474                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
09474                 | '      print #9, saveline$
09474     09 12 06 F6 | 	mov	arg01, #9
09478     E8 15 B1 FD | 	call	#__system___getiolock_0348
0947c     FD 12 02 F6 | 	mov	arg01, result1
09480     2C C0 B0 FD | 	call	#__system___lockmem
09484     01 00 00 FF 
09488     B4 4E 05 F1 | 	add	fp, ##692
0948c     A7 14 02 FB | 	rdlong	arg02, fp
09490     01 00 00 FF 
09494     B4 4E 85 F1 | 	sub	fp, ##692
09498     09 12 06 F6 | 	mov	arg01, #9
0949c     00 16 06 F6 | 	mov	arg03, #0
094a0     00 CD B0 FD | 	call	#__system___basic_print_string
094a4     09 12 06 F6 | 	mov	arg01, #9
094a8     0A 14 06 F6 | 	mov	arg02, #10
094ac     00 16 06 F6 | 	mov	arg03, #0
094b0     98 CC B0 FD | 	call	#__system___basic_print_char
094b4     09 12 06 F6 | 	mov	arg01, #9
094b8     A8 15 B1 FD | 	call	#__system___getiolock_0348
094bc     FD 00 68 FC | 	wrlong	#0, result1
094c0     01 00 00 FF 
094c4     30 4E 05 F1 | 	add	fp, ##560
094c8     A7 1E 02 FB | 	rdlong	local01, fp
094cc     18 4E 85 F1 | 	sub	fp, #24
094d0     A7 1E 62 FC | 	wrlong	local01, fp
094d4     18 4E 05 F1 | 	add	fp, #24
094d8     A7 1E 02 FB | 	rdlong	local01, fp
094dc     01 00 00 FF 
094e0     30 4E 85 F1 | 	sub	fp, ##560
094e4     FF FF 3F FF 
094e8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
094ec     78 FE 9F 5D |  if_ne	jmp	#LR__0791
094f0                 | '   close #9  
094f0     09 12 06 F6 | 	mov	arg01, #9
094f4     9C 0B B1 FD | 	call	#__system__close
094f8                 | LR__0794
094f8                 | LR__0795
094f8     A7 F0 03 F6 | 	mov	ptra, fp
094fc     B2 00 A0 FD | 	call	#popregs_
09500                 | _do_save_ret
09500     2D 00 64 FD | 	ret
09504                 | 
09504                 | ' 
09504                 | ' '----------------- Load the program
09504                 | ' 'lo todo: errors while loading
09504                 | ' sub do_load
09504                 | _do_load
09504     01 4A 05 F6 | 	mov	COUNT_, #1
09508     A8 00 A0 FD | 	call	#pushregs_
0950c     A4 F0 07 F1 | 	add	ptra, #164
09510     A0 4E 05 F1 | 	add	fp, #160
09514     A7 12 02 F6 | 	mov	arg01, fp
09518     80 4E 85 F1 | 	sub	fp, #128
0951c     A7 14 02 F6 | 	mov	arg02, fp
09520     20 4E 85 F1 | 	sub	fp, #32
09524     09 15 62 FC | 	wrlong	arg02, arg01
09528     08 F2 BF FD | 	call	#_pop
0952c     FF 1E 02 F6 | 	mov	local01, result3
09530     A7 FA 61 FC | 	wrlong	result1, fp
09534     04 4E 05 F1 | 	add	fp, #4
09538     A7 FC 61 FC | 	wrlong	result2, fp
0953c     04 4E 05 F1 | 	add	fp, #4
09540     A7 1E 62 FC | 	wrlong	local01, fp
09544                 | ' 
09544                 | ' lpoke varptr(line2$),varptr(line2)
09544                 | ' t1=pop() 
09544                 | ' if t1.result_type=result_string then
09544     08 4E 85 F1 | 	sub	fp, #8
09548     1F 1E 0E F2 | 	cmp	local01, #31 wz
0954c     40 03 90 5D |  if_ne	jmp	#LR__0806
09550     18 09 B0 FD | 	call	#_do_new
09554                 | '   do_new
09554                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
09554     A7 12 02 FB | 	rdlong	arg01, fp
09558     25 01 00 FF 
0955c     25 14 06 F6 | 	mov	arg02, ##@LR__4300
09560     74 BF B0 FD | 	call	#__system___string_cmp
09564     00 FA 0D F2 | 	cmp	result1, #0 wz
09568     25 01 00 AF 
0956c     26 1E 06 A6 |  if_e	mov	local01, ##@LR__4301
09570     A7 1E 62 AC |  if_e	wrlong	local01, fp
09574                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09574     09 12 06 F6 | 	mov	arg01, #9
09578     18 0B B1 FD | 	call	#__system__close
0957c     09 1E 06 F6 | 	mov	local01, #9
09580     49 00 00 FF 
09584     58 E4 05 F1 | 	add	objptr, ##37464
09588     F2 12 02 FB | 	rdlong	arg01, objptr
0958c     49 00 00 FF 
09590     58 E4 85 F1 | 	sub	objptr, ##37464
09594     25 01 00 FF 
09598     31 14 06 F6 | 	mov	arg02, ##@LR__4302
0959c     6C BF B0 FD | 	call	#__system___string_concat
095a0     FD 12 02 F6 | 	mov	arg01, result1
095a4     A7 14 02 FB | 	rdlong	arg02, fp
095a8     60 BF B0 FD | 	call	#__system___string_concat
095ac     FD 14 02 F6 | 	mov	arg02, result1
095b0     0F 13 02 F6 | 	mov	arg01, local01
095b4     00 16 06 F6 | 	mov	arg03, #0
095b8     F8 CA B0 FD | 	call	#__system___basic_open_string
095bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
095c0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
095c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
095c8     10 4E 05 F1 | 	add	fp, #16
095cc     A7 FA 61 FC | 	wrlong	result1, fp
095d0                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
095d0     10 4E 85 F1 | 	sub	fp, #16
095d4     9C 00 90 AD |  if_e	jmp	#LR__0800
095d8     00 12 06 F6 | 	mov	arg01, #0
095dc     84 14 B1 FD | 	call	#__system___getiolock_0348
095e0     FD 12 02 F6 | 	mov	arg01, result1
095e4     C8 BE B0 FD | 	call	#__system___lockmem
095e8     25 01 00 FF 
095ec     33 14 06 F6 | 	mov	arg02, ##@LR__4303
095f0     00 12 06 F6 | 	mov	arg01, #0
095f4     00 16 06 F6 | 	mov	arg03, #0
095f8     A8 CB B0 FD | 	call	#__system___basic_print_string
095fc     10 4E 05 F1 | 	add	fp, #16
09600     A7 14 02 FB | 	rdlong	arg02, fp
09604     10 4E 85 F1 | 	sub	fp, #16
09608     00 12 06 F6 | 	mov	arg01, #0
0960c     00 16 06 F6 | 	mov	arg03, #0
09610     0A 18 06 F6 | 	mov	arg04, #10
09614     D0 CB B0 FD | 	call	#__system___basic_print_integer
09618     25 01 00 FF 
0961c     41 14 06 F6 | 	mov	arg02, ##@LR__4304
09620     00 12 06 F6 | 	mov	arg01, #0
09624     00 16 06 F6 | 	mov	arg03, #0
09628     78 CB B0 FD | 	call	#__system___basic_print_string
0962c     10 4E 05 F1 | 	add	fp, #16
09630     A7 12 02 FB | 	rdlong	arg01, fp
09634     10 4E 85 F1 | 	sub	fp, #16
09638     74 E4 B0 FD | 	call	#__system___strerror
0963c     FD 14 02 F6 | 	mov	arg02, result1
09640     00 12 06 F6 | 	mov	arg01, #0
09644     00 16 06 F6 | 	mov	arg03, #0
09648     58 CB B0 FD | 	call	#__system___basic_print_string
0964c     00 12 06 F6 | 	mov	arg01, #0
09650     0A 14 06 F6 | 	mov	arg02, #10
09654     00 16 06 F6 | 	mov	arg03, #0
09658     F0 CA B0 FD | 	call	#__system___basic_print_char
0965c     00 12 06 F6 | 	mov	arg01, #0
09660     00 14 B1 FD | 	call	#__system___getiolock_0348
09664     FD 00 68 FC | 	wrlong	#0, result1
09668     09 12 06 F6 | 	mov	arg01, #9
0966c     24 0A B1 FD | 	call	#__system__close
09670     24 02 90 FD | 	jmp	#LR__0808
09674                 | LR__0800
09674     0C 4E 05 F1 | 	add	fp, #12
09678     A7 0A 68 FC | 	wrlong	#5, fp
0967c                 | '   i=5
0967c                 | '   get #9,1,header,1
0967c     0C 4E 05 F1 | 	add	fp, #12
09680     A7 16 02 F6 | 	mov	arg03, fp
09684     18 4E 85 F1 | 	sub	fp, #24
09688     09 12 06 F6 | 	mov	arg01, #9
0968c     01 14 06 F6 | 	mov	arg02, #1
09690     01 18 06 F6 | 	mov	arg04, #1
09694     04 1A 06 F6 | 	mov	arg05, #4
09698     18 CC B0 FD | 	call	#__system___basic_get
0969c                 | '   
0969c                 | '   if header<>$0D616272 then 
0969c     18 4E 05 F1 | 	add	fp, #24
096a0     A7 1E 02 FB | 	rdlong	local01, fp
096a4     18 4E 85 F1 | 	sub	fp, #24
096a8     B1 B0 06 FF 
096ac     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
096b0     F0 00 90 AD |  if_e	jmp	#LR__0803
096b4                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
096b4     09 12 06 F6 | 	mov	arg01, #9
096b8     D8 09 B1 FD | 	call	#__system__close
096bc     09 1E 06 F6 | 	mov	local01, #9
096c0     49 00 00 FF 
096c4     58 E4 05 F1 | 	add	objptr, ##37464
096c8     F2 12 02 FB | 	rdlong	arg01, objptr
096cc     49 00 00 FF 
096d0     58 E4 85 F1 | 	sub	objptr, ##37464
096d4     25 01 00 FF 
096d8     44 14 06 F6 | 	mov	arg02, ##@LR__4305
096dc     2C BE B0 FD | 	call	#__system___string_concat
096e0     FD 12 02 F6 | 	mov	arg01, result1
096e4     A7 14 02 FB | 	rdlong	arg02, fp
096e8     20 BE B0 FD | 	call	#__system___string_concat
096ec     FD 14 02 F6 | 	mov	arg02, result1
096f0     0F 13 02 F6 | 	mov	arg01, local01
096f4     00 16 06 F6 | 	mov	arg03, #0
096f8     B8 C9 B0 FD | 	call	#__system___basic_open_string
096fc                 | '     do
096fc                 | LR__0801
096fc     09 12 06 F6 | 	mov	arg01, #9
09700     B8 BF B0 FD | 	call	#__system___basic_read_line
09704     2D 00 00 FF 
09708     E0 E5 05 F1 | 	add	objptr, ##23520
0970c     F2 FA 61 FC | 	wrlong	result1, objptr
09710                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
09710     2D 00 00 FF 
09714     E0 E5 85 F1 | 	sub	objptr, ##23520
09718     FD 12 02 F6 | 	mov	arg01, result1
0971c     01 14 06 F6 | 	mov	arg02, #1
09720     9C DD B0 FD | 	call	#__system__Left_S
09724     FD 12 02 F6 | 	mov	arg01, result1
09728     25 01 00 FF 
0972c     46 14 06 F6 | 	mov	arg02, ##@LR__4306
09730     A4 BD B0 FD | 	call	#__system___string_cmp
09734     00 FA 55 F2 | 	cmps	result1, #0 wc
09738     34 00 90 CD |  if_b	jmp	#LR__0802
0973c     2D 00 00 FF 
09740     E0 E5 05 F1 | 	add	objptr, ##23520
09744     F2 12 02 FB | 	rdlong	arg01, objptr
09748     2D 00 00 FF 
0974c     E0 E5 85 F1 | 	sub	objptr, ##23520
09750     01 14 06 F6 | 	mov	arg02, #1
09754     68 DD B0 FD | 	call	#__system__Left_S
09758     FD 12 02 F6 | 	mov	arg01, result1
0975c     25 01 00 FF 
09760     48 14 06 F6 | 	mov	arg02, ##@LR__4307
09764     70 BD B0 FD | 	call	#__system___string_cmp
09768     01 FA 55 F2 | 	cmps	result1, #1 wc
0976c     AC 72 BF CD |  if_b	call	#_interpret
09770                 | LR__0802
09770     2D 00 00 FF 
09774     E0 E5 05 F1 | 	add	objptr, ##23520
09778     F2 12 02 FB | 	rdlong	arg01, objptr
0977c     2D 00 00 FF 
09780     E0 E5 85 F1 | 	sub	objptr, ##23520
09784     25 01 00 FF 
09788     4A 14 06 F6 | 	mov	arg02, ##@LR__4308
0978c     48 BD B0 FD | 	call	#__system___string_cmp
09790     00 FA 0D F2 | 	cmp	result1, #0 wz
09794     64 FF 9F 5D |  if_ne	jmp	#LR__0801
09798                 | '     close #9
09798     09 12 06 F6 | 	mov	arg01, #9
0979c     F4 08 B1 FD | 	call	#__system__close
097a0     F4 00 90 FD | 	jmp	#LR__0807
097a4                 | LR__0803
097a4                 | '   'printerror(26) : close #9 : return
097a4                 | '     do
097a4                 | LR__0804
097a4                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
097a4     0C 4E 05 F1 | 	add	fp, #12
097a8     A7 14 02 FB | 	rdlong	arg02, fp
097ac     10 4E 05 F1 | 	add	fp, #16
097b0     A7 16 02 F6 | 	mov	arg03, fp
097b4     1C 4E 85 F1 | 	sub	fp, #28
097b8     09 12 06 F6 | 	mov	arg01, #9
097bc     01 18 06 F6 | 	mov	arg04, #1
097c0     04 1A 06 F6 | 	mov	arg05, #4
097c4     EC CA B0 FD | 	call	#__system___basic_get
097c8     14 4E 05 F1 | 	add	fp, #20
097cc     A7 FA 61 FC | 	wrlong	result1, fp
097d0     08 4E 85 F1 | 	sub	fp, #8
097d4     A7 1E 02 FB | 	rdlong	local01, fp
097d8     04 1E 06 F1 | 	add	local01, #4
097dc     A7 1E 62 FC | 	wrlong	local01, fp
097e0     10 4E 05 F1 | 	add	fp, #16
097e4     A7 1E 02 FB | 	rdlong	local01, fp
097e8     04 4E 05 F1 | 	add	fp, #4
097ec     A7 1E 02 F1 | 	add	local01, fp
097f0     0F 01 48 FC | 	wrbyte	#0, local01
097f4                 | '       if amount=1 then  
097f4     0C 4E 85 F1 | 	sub	fp, #12
097f8     A7 1E 02 FB | 	rdlong	local01, fp
097fc     14 4E 85 F1 | 	sub	fp, #20
09800     01 1E 0E F2 | 	cmp	local01, #1 wz
09804     68 00 90 5D |  if_ne	jmp	#LR__0805
09808                 | '         get #9,i,line2(0),linelength : i+=linelength
09808     0C 4E 05 F1 | 	add	fp, #12
0980c     A7 14 02 FB | 	rdlong	arg02, fp
09810     14 4E 05 F1 | 	add	fp, #20
09814     A7 16 02 F6 | 	mov	arg03, fp
09818     04 4E 85 F1 | 	sub	fp, #4
0981c     A7 18 02 FB | 	rdlong	arg04, fp
09820     1C 4E 85 F1 | 	sub	fp, #28
09824     09 12 06 F6 | 	mov	arg01, #9
09828     01 1A 06 F6 | 	mov	arg05, #1
0982c     84 CA B0 FD | 	call	#__system___basic_get
09830     0C 4E 05 F1 | 	add	fp, #12
09834     A7 1E 02 FB | 	rdlong	local01, fp
09838     10 4E 05 F1 | 	add	fp, #16
0983c     A7 1A 02 FB | 	rdlong	arg05, fp
09840     0D 1F 02 F1 | 	add	local01, arg05
09844     10 4E 85 F1 | 	sub	fp, #16
09848     A7 1E 62 FC | 	wrlong	local01, fp
0984c     94 4E 05 F1 | 	add	fp, #148
09850     A7 1E 02 FB | 	rdlong	local01, fp
09854     A0 4E 85 F1 | 	sub	fp, #160
09858     2D 00 00 FF 
0985c     E0 E5 05 F1 | 	add	objptr, ##23520
09860     F2 1E 62 FC | 	wrlong	local01, objptr
09864     2D 00 00 FF 
09868     E0 E5 85 F1 | 	sub	objptr, ##23520
0986c     AC 71 BF FD | 	call	#_interpret
09870                 | LR__0805
09870     14 4E 05 F1 | 	add	fp, #20
09874     A7 1E 02 FB | 	rdlong	local01, fp
09878     14 4E 85 F1 | 	sub	fp, #20
0987c     01 1E 56 F2 | 	cmps	local01, #1 wc
09880     20 FF 9F 3D |  if_ae	jmp	#LR__0804
09884                 | '     close #9 
09884     09 12 06 F6 | 	mov	arg01, #9
09888     08 08 B1 FD | 	call	#__system__close
0988c     08 00 90 FD | 	jmp	#LR__0807
09890                 | LR__0806
09890     1E 12 06 F6 | 	mov	arg01, #30
09894     24 87 B0 FD | 	call	#_printerror
09898                 | LR__0807
09898                 | LR__0808
09898     A7 F0 03 F6 | 	mov	ptra, fp
0989c     B2 00 A0 FD | 	call	#popregs_
098a0                 | _do_load_ret
098a0     2D 00 64 FD | 	ret
098a4                 | 
098a4                 | ' 
098a4                 | ' '----------------- Run the program 
098a4                 | ' 
098a4                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
098a4                 | ' 
098a4                 | ' sub do_run
098a4                 | _do_run
098a4     01 4A 05 F6 | 	mov	COUNT_, #1
098a8     A8 00 A0 FD | 	call	#pushregs_
098ac     41 00 00 FF 
098b0     48 E4 05 F1 | 	add	objptr, ##33352
098b4     F2 1C 02 FB | 	rdlong	arg06, objptr
098b8     0F 00 00 FF 
098bc     2C E5 05 F1 | 	add	objptr, ##7980
098c0     F2 1C 62 FC | 	wrlong	arg06, objptr
098c4     04 E4 05 F1 | 	add	objptr, #4
098c8     F2 00 68 FC | 	wrlong	#0, objptr
098cc     04 E4 05 F1 | 	add	objptr, #4
098d0     FF FF FF FF 
098d4     F2 FE 6B FC | 	wrlong	##-1, objptr
098d8                 | ' if inrun>0 then 
098d8     04 E4 05 F1 | 	add	objptr, #4
098dc     F2 1C 02 FB | 	rdlong	arg06, objptr
098e0     50 00 00 FF 
098e4     80 E5 85 F1 | 	sub	objptr, ##41344
098e8     01 1C 16 F2 | 	cmp	arg06, #1 wc
098ec     30 00 90 CD |  if_b	jmp	#LR__0810
098f0     50 00 00 FF 
098f4     84 E5 05 F1 | 	add	objptr, ##41348
098f8     F2 12 02 F6 | 	mov	arg01, objptr
098fc     10 E4 85 F1 | 	sub	objptr, #16
09900     F2 14 02 FB | 	rdlong	arg02, objptr
09904     18 16 06 F6 | 	mov	arg03, #24
09908     45 00 00 FF 
0990c     B4 E4 85 F1 | 	sub	objptr, ##35508
09910     B0 B0 B0 FD | 	call	#_psram_spin2_read1
09914     0B 00 00 FF 
09918     C0 E4 85 F1 | 	sub	objptr, ##5824
0991c                 | '   psram.read1(varptr(runheader),runptr,24)  
0991c                 | '   return
0991c     A4 02 90 FD | 	jmp	#LR__0816
09920                 | LR__0810
09920     50 00 00 FF 
09924     80 E5 05 F1 | 	add	objptr, ##41344
09928     F2 02 68 FC | 	wrlong	#1, objptr
0992c     04 E4 05 F1 | 	add	objptr, #4
09930     F2 12 02 F6 | 	mov	arg01, objptr
09934     10 E4 85 F1 | 	sub	objptr, #16
09938     F2 14 02 FB | 	rdlong	arg02, objptr
0993c     18 16 06 F6 | 	mov	arg03, #24
09940     45 00 00 FF 
09944     B4 E4 85 F1 | 	sub	objptr, ##35508
09948     78 B0 B0 FD | 	call	#_psram_spin2_read1
0994c                 | ' inrun=1
0994c                 | ' psram.read1(varptr(runheader),runptr,24) 
0994c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0994c     45 00 00 FF 
09950     C4 E4 05 F1 | 	add	objptr, ##35524
09954     F2 1E 02 FB | 	rdlong	local01, objptr
09958     50 00 00 FF 
0995c     84 E5 85 F1 | 	sub	objptr, ##41348
09960     FF FF 7F FF 
09964     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09968     50 00 00 AF 
0996c     80 E5 05 A1 |  if_e	add	objptr, ##41344
09970     F2 00 68 AC |  if_e	wrlong	#0, objptr
09974     50 00 00 AF 
09978     80 E5 85 A1 |  if_e	sub	objptr, ##41344
0997c     44 02 90 AD |  if_e	jmp	#LR__0816
09980                 | ' do 
09980                 | LR__0811
09980                 | '   if runptr<>oldrunptr then
09980     50 00 00 FF 
09984     74 E5 05 F1 | 	add	objptr, ##41332
09988     F2 1E 02 FB | 	rdlong	local01, objptr
0998c     08 E4 05 F1 | 	add	objptr, #8
09990     F2 1C 02 FB | 	rdlong	arg06, objptr
09994     50 00 00 FF 
09998     7C E5 85 F1 | 	sub	objptr, ##41340
0999c     0E 1F 0A F2 | 	cmp	local01, arg06 wz
099a0     CC 00 90 AD |  if_e	jmp	#LR__0812
099a4     50 00 00 FF 
099a8     84 E5 05 F1 | 	add	objptr, ##41348
099ac     F2 12 02 F6 | 	mov	arg01, objptr
099b0     10 E4 85 F1 | 	sub	objptr, #16
099b4     F2 14 02 FB | 	rdlong	arg02, objptr
099b8     18 16 06 F6 | 	mov	arg03, #24
099bc     45 00 00 FF 
099c0     B4 E4 85 F1 | 	sub	objptr, ##35508
099c4     FC AF B0 FD | 	call	#_psram_spin2_read1
099c8     32 00 00 FF 
099cc     80 E5 05 F1 | 	add	objptr, ##25984
099d0     F2 12 02 F6 | 	mov	arg01, objptr
099d4     12 00 00 FF 
099d8     34 E5 05 F1 | 	add	objptr, ##9524
099dc     F2 14 02 FB | 	rdlong	arg02, objptr
099e0     14 00 00 FF 
099e4     4C E5 85 F1 | 	sub	objptr, ##10572
099e8     F2 1E 02 FB | 	rdlong	local01, objptr
099ec     01 1E 66 F0 | 	shl	local01, #1
099f0     0F 15 02 F1 | 	add	arg02, local01
099f4     14 00 00 FF 
099f8     64 E5 05 F1 | 	add	objptr, ##10596
099fc     F2 16 02 FB | 	rdlong	arg03, objptr
09a00     18 E4 85 F1 | 	sub	objptr, #24
09a04     F2 1E 02 FB | 	rdlong	local01, objptr
09a08     0F 17 82 F1 | 	sub	arg03, local01
09a0c     45 00 00 FF 
09a10     B4 E4 85 F1 | 	sub	objptr, ##35508
09a14     AC AF B0 FD | 	call	#_psram_spin2_read1
09a18     45 00 00 FF 
09a1c     CC E4 05 F1 | 	add	objptr, ##35532
09a20     F2 1E 02 FB | 	rdlong	local01, objptr
09a24     18 E4 85 F1 | 	sub	objptr, #24
09a28     F2 1C 02 FB | 	rdlong	arg06, objptr
09a2c     0E 1F 82 F1 | 	sub	local01, arg06
09a30     14 00 00 FF 
09a34     4C E5 85 F1 | 	sub	objptr, ##10572
09a38     F2 1C 02 FB | 	rdlong	arg06, objptr
09a3c     0E 1F 12 FD | 	qdiv	local01, arg06
09a40     05 00 00 FF 
09a44     18 E4 05 F1 | 	add	objptr, ##2584
09a48     18 1E 62 FD | 	getqx	local01
09a4c     03 1E 86 F1 | 	sub	local01, #3
09a50     F2 1E 62 FC | 	wrlong	local01, objptr
09a54     0F 00 00 FF 
09a58     34 E5 05 F1 | 	add	objptr, ##7988
09a5c     F2 1E 02 FB | 	rdlong	local01, objptr
09a60     08 E4 05 F1 | 	add	objptr, #8
09a64     F2 1E 62 FC | 	wrlong	local01, objptr
09a68     50 00 00 FF 
09a6c     7C E5 85 F1 | 	sub	objptr, ##41340
09a70                 | LR__0812
09a70     50 00 00 FF 
09a74     98 E5 05 F1 | 	add	objptr, ##41368
09a78     F2 1E 02 FB | 	rdlong	local01, objptr
09a7c     24 E4 85 F1 | 	sub	objptr, #36
09a80     F2 1E 62 FC | 	wrlong	local01, objptr
09a84     04 E4 05 F1 | 	add	objptr, #4
09a88     F2 12 02 FB | 	rdlong	arg01, objptr
09a8c     50 00 00 FF 
09a90     78 E5 85 F1 | 	sub	objptr, ##41336
09a94     98 EB BF FD | 	call	#_execute_line
09a98     50 00 00 FF 
09a9c     78 E5 05 F1 | 	add	objptr, ##41336
09aa0     F2 FA 61 FC | 	wrlong	result1, objptr
09aa4     04 E4 85 F1 | 	sub	objptr, #4
09aa8     F2 1E 02 FB | 	rdlong	local01, objptr
09aac     50 00 00 FF 
09ab0     74 E5 85 F1 | 	sub	objptr, ##41332
09ab4     FF FF 3F FF 
09ab8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09abc     0C 00 90 AD |  if_e	jmp	#LR__0813
09ac0     90 B2 B0 FD | 	call	#_usbnew_spin2_get_key
09ac4     06 FB 0D F2 | 	cmp	result1, #262 wz
09ac8     B4 FE 9F 5D |  if_ne	jmp	#LR__0811
09acc                 | LR__0813
09acc                 | ' if runheader(5)<>$7FFF_FFFF then 
09acc     50 00 00 FF 
09ad0     98 E5 05 F1 | 	add	objptr, ##41368
09ad4     F2 1E 02 FB | 	rdlong	local01, objptr
09ad8     50 00 00 FF 
09adc     98 E5 85 F1 | 	sub	objptr, ##41368
09ae0     FF FF 3F FF 
09ae4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09ae8     C4 00 90 AD |  if_e	jmp	#LR__0815
09aec                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
09aec     50 00 00 FF 
09af0     A4 E5 05 F1 | 	add	objptr, ##41380
09af4     F2 1E 02 FB | 	rdlong	local01, objptr
09af8     50 00 00 FF 
09afc     A4 E5 85 F1 | 	sub	objptr, ##41380
09b00     01 1E 0E F2 | 	cmp	local01, #1 wz
09b04     44 00 90 5D |  if_ne	jmp	#LR__0814
09b08     01 00 00 FF 
09b0c     00 EA 05 F1 | 	add	ptr__dat__, ##512
09b10     F5 14 02 F6 | 	mov	arg02, ptr__dat__
09b14     01 00 00 FF 
09b18     00 EA 85 F1 | 	sub	ptr__dat__, ##512
09b1c     07 12 06 F6 | 	mov	arg01, #7
09b20     56 00 00 FF 
09b24     44 16 06 F6 | 	mov	arg03, ##44100
09b28     0E 18 C6 F9 | 	decod	arg04, #14
09b2c     03 00 00 FF 
09b30     94 1A 06 F6 | 	mov	arg05, ##1684
09b34     01 1C 66 F6 | 	neg	arg06, #1
09b38     0B 00 00 FF 
09b3c     C0 E4 05 F1 | 	add	objptr, ##5824
09b40     38 B5 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09b44     0B 00 00 FF 
09b48     C0 E4 85 F1 | 	sub	objptr, ##5824
09b4c                 | LR__0814
09b4c                 | '   print "Stopped at line ";runheader(0)
09b4c     00 12 06 F6 | 	mov	arg01, #0
09b50     10 0F B1 FD | 	call	#__system___getiolock_0348
09b54     FD 12 02 F6 | 	mov	arg01, result1
09b58     54 B9 B0 FD | 	call	#__system___lockmem
09b5c     25 01 00 FF 
09b60     4B 14 06 F6 | 	mov	arg02, ##@LR__4309
09b64     00 12 06 F6 | 	mov	arg01, #0
09b68     00 16 06 F6 | 	mov	arg03, #0
09b6c     34 C6 B0 FD | 	call	#__system___basic_print_string
09b70     50 00 00 FF 
09b74     84 E5 05 F1 | 	add	objptr, ##41348
09b78     F2 14 02 FB | 	rdlong	arg02, objptr
09b7c     50 00 00 FF 
09b80     84 E5 85 F1 | 	sub	objptr, ##41348
09b84     00 12 06 F6 | 	mov	arg01, #0
09b88     00 16 06 F6 | 	mov	arg03, #0
09b8c     0A 18 06 F6 | 	mov	arg04, #10
09b90     94 C6 B0 FD | 	call	#__system___basic_print_unsigned
09b94     00 12 06 F6 | 	mov	arg01, #0
09b98     0A 14 06 F6 | 	mov	arg02, #10
09b9c     00 16 06 F6 | 	mov	arg03, #0
09ba0     A8 C5 B0 FD | 	call	#__system___basic_print_char
09ba4     00 12 06 F6 | 	mov	arg01, #0
09ba8     B8 0E B1 FD | 	call	#__system___getiolock_0348
09bac     FD 00 68 FC | 	wrlong	#0, result1
09bb0                 | LR__0815
09bb0     50 00 00 FF 
09bb4     80 E5 05 F1 | 	add	objptr, ##41344
09bb8     F2 00 68 FC | 	wrlong	#0, objptr
09bbc     50 00 00 FF 
09bc0     80 E5 85 F1 | 	sub	objptr, ##41344
09bc4                 | LR__0816
09bc4     A7 F0 03 F6 | 	mov	ptra, fp
09bc8     B2 00 A0 FD | 	call	#popregs_
09bcc                 | _do_run_ret
09bcc     2D 00 64 FD | 	ret
09bd0                 | 
09bd0                 | ' 
09bd0                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09bd0                 | ' 
09bd0                 | ' sub do_list
09bd0                 | _do_list
09bd0     02 4A 05 F6 | 	mov	COUNT_, #2
09bd4     A8 00 A0 FD | 	call	#pushregs_
09bd8     B8 F0 07 F1 | 	add	ptra, #184
09bdc     04 4E 05 F1 | 	add	fp, #4
09be0     A7 00 68 FC | 	wrlong	#0, fp
09be4     04 4E 05 F1 | 	add	fp, #4
09be8     FF FF BF FF 
09bec     A7 FE 6B FC | 	wrlong	##2147483647, fp
09bf0     08 4E 85 F1 | 	sub	fp, #8
09bf4     41 00 00 FF 
09bf8     44 E4 05 F1 | 	add	objptr, ##33348
09bfc     F2 1E 02 FB | 	rdlong	local01, objptr
09c00     0F 17 02 F6 | 	mov	arg03, local01
09c04     01 16 66 F0 | 	shl	arg03, #1
09c08     0F 17 02 F1 | 	add	arg03, local01
09c0c     02 16 66 F0 | 	shl	arg03, #2
09c10     03 00 00 FF 
09c14     04 E4 85 F1 | 	sub	objptr, ##1540
09c18     F2 16 02 F1 | 	add	arg03, objptr
09c1c     0B 17 02 FB | 	rdlong	arg03, arg03
09c20     A7 16 62 FC | 	wrlong	arg03, fp
09c24                 | ' 
09c24                 | ' startline=0 : endline=$7FFFFFFF
09c24                 | ' numpar=compiledline(lineptr_e).result.uresult
09c24                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
09c24     01 16 0E F2 | 	cmp	arg03, #1 wz
09c28     3E 00 00 FF 
09c2c     40 E4 85 F1 | 	sub	objptr, ##31808
09c30     3C 00 90 5D |  if_ne	jmp	#LR__0820
09c34     FC EA BF FD | 	call	#_pop
09c38     FF 1E 02 F6 | 	mov	local01, result3
09c3c     0C 4E 05 F1 | 	add	fp, #12
09c40     A7 FA 61 FC | 	wrlong	result1, fp
09c44     04 4E 05 F1 | 	add	fp, #4
09c48     A7 FC 61 FC | 	wrlong	result2, fp
09c4c     04 4E 05 F1 | 	add	fp, #4
09c50     A7 1E 62 FC | 	wrlong	local01, fp
09c54     08 4E 85 F1 | 	sub	fp, #8
09c58     A7 12 02 F6 | 	mov	arg01, fp
09c5c     0C 4E 85 F1 | 	sub	fp, #12
09c60     98 49 B0 FD | 	call	#_converttoint
09c64     04 4E 05 F1 | 	add	fp, #4
09c68     A7 FA 61 FC | 	wrlong	result1, fp
09c6c     04 4E 85 F1 | 	sub	fp, #4
09c70                 | LR__0820
09c70                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
09c70     A7 16 02 FB | 	rdlong	arg03, fp
09c74     02 16 0E F2 | 	cmp	arg03, #2 wz
09c78     7C 00 90 5D |  if_ne	jmp	#LR__0821
09c7c     B4 EA BF FD | 	call	#_pop
09c80     FF 1E 02 F6 | 	mov	local01, result3
09c84     0C 4E 05 F1 | 	add	fp, #12
09c88     A7 FA 61 FC | 	wrlong	result1, fp
09c8c     04 4E 05 F1 | 	add	fp, #4
09c90     A7 FC 61 FC | 	wrlong	result2, fp
09c94     04 4E 05 F1 | 	add	fp, #4
09c98     A7 1E 62 FC | 	wrlong	local01, fp
09c9c     08 4E 85 F1 | 	sub	fp, #8
09ca0     A7 12 02 F6 | 	mov	arg01, fp
09ca4     0C 4E 85 F1 | 	sub	fp, #12
09ca8     50 49 B0 FD | 	call	#_converttoint
09cac     FD 1E 02 F6 | 	mov	local01, result1
09cb0     08 4E 05 F1 | 	add	fp, #8
09cb4     A7 1E 62 FC | 	wrlong	local01, fp
09cb8     08 4E 85 F1 | 	sub	fp, #8
09cbc     74 EA BF FD | 	call	#_pop
09cc0     FF 1E 02 F6 | 	mov	local01, result3
09cc4     0C 4E 05 F1 | 	add	fp, #12
09cc8     A7 FA 61 FC | 	wrlong	result1, fp
09ccc     04 4E 05 F1 | 	add	fp, #4
09cd0     A7 FC 61 FC | 	wrlong	result2, fp
09cd4     04 4E 05 F1 | 	add	fp, #4
09cd8     A7 1E 62 FC | 	wrlong	local01, fp
09cdc     08 4E 85 F1 | 	sub	fp, #8
09ce0     A7 12 02 F6 | 	mov	arg01, fp
09ce4     0C 4E 85 F1 | 	sub	fp, #12
09ce8     10 49 B0 FD | 	call	#_converttoint
09cec     04 4E 05 F1 | 	add	fp, #4
09cf0     A7 FA 61 FC | 	wrlong	result1, fp
09cf4     04 4E 85 F1 | 	sub	fp, #4
09cf8                 | LR__0821
09cf8                 | ' 
09cf8                 | ' 
09cf8                 | ' print
09cf8     00 12 06 F6 | 	mov	arg01, #0
09cfc     64 0D B1 FD | 	call	#__system___getiolock_0348
09d00     FD 12 02 F6 | 	mov	arg01, result1
09d04     A8 B7 B0 FD | 	call	#__system___lockmem
09d08     00 12 06 F6 | 	mov	arg01, #0
09d0c     0A 14 06 F6 | 	mov	arg02, #10
09d10     00 16 06 F6 | 	mov	arg03, #0
09d14     34 C4 B0 FD | 	call	#__system___basic_print_char
09d18     00 12 06 F6 | 	mov	arg01, #0
09d1c     44 0D B1 FD | 	call	#__system___getiolock_0348
09d20     FD 00 68 FC | 	wrlong	#0, result1
09d24     41 00 00 FF 
09d28     48 E4 05 F1 | 	add	objptr, ##33352
09d2c     F2 20 02 FB | 	rdlong	local02, objptr
09d30     11 00 00 FF 
09d34     54 E4 05 F1 | 	add	objptr, ##8788
09d38     F2 20 62 FC | 	wrlong	local02, objptr
09d3c     52 00 00 FF 
09d40     9C E4 85 F1 | 	sub	objptr, ##42140
09d44                 | ' do 
09d44                 | LR__0822
09d44     20 4E 05 F1 | 	add	fp, #32
09d48     A7 12 02 F6 | 	mov	arg01, fp
09d4c     20 4E 85 F1 | 	sub	fp, #32
09d50     52 00 00 FF 
09d54     9C E4 05 F1 | 	add	objptr, ##42140
09d58     F2 14 02 FB | 	rdlong	arg02, objptr
09d5c     18 16 06 F6 | 	mov	arg03, #24
09d60     46 00 00 FF 
09d64     DC E5 85 F1 | 	sub	objptr, ##36316
09d68     58 AC B0 FD | 	call	#_psram_spin2_read1
09d6c     0B 00 00 FF 
09d70     C0 E4 85 F1 | 	sub	objptr, ##5824
09d74                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
09d74                 | '   if header(0)<> $FFFFFFFF then
09d74     20 4E 05 F1 | 	add	fp, #32
09d78     A7 20 02 FB | 	rdlong	local02, fp
09d7c     20 4E 85 F1 | 	sub	fp, #32
09d80     FF FF 7F FF 
09d84     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09d88     A8 00 90 AD |  if_e	jmp	#LR__0824
09d8c     38 4E 05 F1 | 	add	fp, #56
09d90     3F 16 06 F6 | 	mov	arg03, #63
09d94     28 16 62 FD | 	setq	arg03
09d98     A7 00 68 FC | 	wrlong	#0, fp
09d9c     A7 12 02 F6 | 	mov	arg01, fp
09da0     10 4E 85 F1 | 	sub	fp, #16
09da4     A7 14 02 FB | 	rdlong	arg02, fp
09da8     04 4E 05 F1 | 	add	fp, #4
09dac     A7 16 02 FB | 	rdlong	arg03, fp
09db0     2C 4E 85 F1 | 	sub	fp, #44
09db4     0B 00 00 FF 
09db8     C0 E4 05 F1 | 	add	objptr, ##5824
09dbc     04 AC B0 FD | 	call	#_psram_spin2_read1
09dc0     0B 00 00 FF 
09dc4     C0 E4 85 F1 | 	sub	objptr, ##5824
09dc8                 | '     longfill(linebuf,0,64)
09dc8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
09dc8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
09dc8     20 4E 05 F1 | 	add	fp, #32
09dcc     A7 20 02 FB | 	rdlong	local02, fp
09dd0     1C 4E 85 F1 | 	sub	fp, #28
09dd4     A7 1E 02 FB | 	rdlong	local01, fp
09dd8     04 4E 85 F1 | 	sub	fp, #4
09ddc     0F 21 52 F2 | 	cmps	local02, local01 wc
09de0     30 00 90 CD |  if_b	jmp	#LR__0823
09de4     20 4E 05 F1 | 	add	fp, #32
09de8     A7 20 02 FB | 	rdlong	local02, fp
09dec     18 4E 85 F1 | 	sub	fp, #24
09df0     A7 16 02 FB | 	rdlong	arg03, fp
09df4     08 4E 85 F1 | 	sub	fp, #8
09df8     0B 21 5A F2 | 	cmps	local02, arg03 wcz
09dfc     14 00 90 1D |  if_a	jmp	#LR__0823
09e00     38 4E 05 F1 | 	add	fp, #56
09e04     A7 12 02 F6 | 	mov	arg01, fp
09e08     38 4E 85 F1 | 	sub	fp, #56
09e0c                 | ' 
09e0c                 | ' write(text)
09e0c     7C A6 B0 FD | 	call	#_hg010b_spin2_write
09e10                 | ' crlf
09e10     D8 A7 B0 FD | 	call	#_hg010b_spin2_crlf
09e14                 | LR__0823
09e14     34 4E 05 F1 | 	add	fp, #52
09e18     A7 20 02 FB | 	rdlong	local02, fp
09e1c     34 4E 85 F1 | 	sub	fp, #52
09e20     52 00 00 FF 
09e24     9C E4 05 F1 | 	add	objptr, ##42140
09e28     F2 20 62 FC | 	wrlong	local02, objptr
09e2c     52 00 00 FF 
09e30     9C E4 85 F1 | 	sub	objptr, ##42140
09e34                 | LR__0824
09e34     34 4E 05 F1 | 	add	fp, #52
09e38     A7 20 02 FB | 	rdlong	local02, fp
09e3c     34 4E 85 F1 | 	sub	fp, #52
09e40     FF FF 3F FF 
09e44     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
09e48     20 4E 05 51 |  if_ne	add	fp, #32
09e4c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09e50     20 4E 85 51 |  if_ne	sub	fp, #32
09e54     FF FF 7F 5F 
09e58     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09e5c     E4 FE 9F 5D |  if_ne	jmp	#LR__0822
09e60     A7 F0 03 F6 | 	mov	ptra, fp
09e64     B2 00 A0 FD | 	call	#popregs_
09e68                 | _do_list_ret
09e68     2D 00 64 FD | 	ret
09e6c                 | 
09e6c                 | ' 
09e6c                 | ' '---------------- Clear the program
09e6c                 | ' 
09e6c                 | ' sub do_new
09e6c                 | _do_new
09e6c     03 4A 05 F6 | 	mov	COUNT_, #3
09e70     A8 00 A0 FD | 	call	#pushregs_
09e74     00 12 06 F6 | 	mov	arg01, #0
09e78     01 14 66 F6 | 	neg	arg02, #1
09e7c     01 16 06 F6 | 	mov	arg03, #1
09e80     00 18 06 F6 | 	mov	arg04, #0
09e84     0B 00 00 FF 
09e88     C0 E4 05 F1 | 	add	objptr, ##5824
09e8c                 | '     return fill(addr, pattern, count, listPtr, 4)
09e8c     04 1A 06 F6 | 	mov	arg05, #4
09e90     68 AC B0 FD | 	call	#_psram_spin2_fill
09e94     20 00 00 FF 
09e98     0C E5 05 F1 | 	add	objptr, ##16652
09e9c     F2 00 68 FC | 	wrlong	#0, objptr
09ea0     15 00 00 FF 
09ea4     7C E4 05 F1 | 	add	objptr, ##10876
09ea8     F2 00 68 FC | 	wrlong	#0, objptr
09eac     0F 00 00 FF 
09eb0     2C E5 05 F1 | 	add	objptr, ##7980
09eb4     F2 00 68 FC | 	wrlong	#0, objptr
09eb8     04 E4 05 F1 | 	add	objptr, #4
09ebc     F2 00 68 FC | 	wrlong	#0, objptr
09ec0     16 00 00 FF 
09ec4     5C E5 85 F1 | 	sub	objptr, ##11612
09ec8     F2 00 68 FC | 	wrlong	#0, objptr
09ecc     07 00 00 FF 
09ed0     24 E4 05 F1 | 	add	objptr, ##3620
09ed4     F2 00 68 FC | 	wrlong	#0, objptr
09ed8     07 00 00 FF 
09edc     20 E4 85 F1 | 	sub	objptr, ##3616
09ee0     F2 00 68 FC | 	wrlong	#0, objptr
09ee4     0F 00 00 FF 
09ee8     34 E4 05 F1 | 	add	objptr, ##7732
09eec     F2 00 68 FC | 	wrlong	#0, objptr
09ef0     08 00 00 FF 
09ef4     08 E4 85 F1 | 	sub	objptr, ##4104
09ef8     F2 00 68 FC | 	wrlong	#0, objptr
09efc     04 E4 05 F1 | 	add	objptr, #4
09f00     FF FF FF FF 
09f04     F2 FE 6B FC | 	wrlong	##-1, objptr
09f08     0F 00 00 FF 
09f0c     4C E5 05 F1 | 	add	objptr, ##8012
09f10     F2 00 68 FC | 	wrlong	#0, objptr
09f14                 | ' 
09f14                 | ' pslpoke(0,$FFFFFFFF)
09f14                 | ' varnum=0
09f14                 | ' programstart=0 :runptr=0 : runptr2=0
09f14                 | ' stackpointer=0
09f14                 | ' lineptr=0 
09f14                 | ' programptr=0 : stringptr=0
09f14                 | ' lastline=0 : lastlineptr=-1 :fortop=0
09f14                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
09f14     00 1E 06 F6 | 	mov	local01, #0
09f18     07 00 00 FF 
09f1c     40 E5 85 F1 | 	sub	objptr, ##3904
09f20     97 16 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
09f24                 | LR__0830
09f24     0F 21 02 F6 | 	mov	local02, local01
09f28     02 20 66 F0 | 	shl	local02, #2
09f2c     0F 21 02 F1 | 	add	local02, local01
09f30     02 20 66 F0 | 	shl	local02, #2
09f34     F2 20 02 F1 | 	add	local02, objptr
09f38     08 20 06 F1 | 	add	local02, #8
09f3c     FF FF FF FF 
09f40     10 FF 6B FC | 	wrlong	##-1, local02
09f44     01 1E 06 F1 | 	add	local01, #1
09f48     81 1E 56 F2 | 	cmps	local01, #129 wc
09f4c     D4 FF 9F CD |  if_b	jmp	#LR__0830
09f50                 | LR__0831
09f50     49 00 00 FF 
09f54     5C E4 85 F1 | 	sub	objptr, ##37468
09f58                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
09f58     00 1E 06 F6 | 	mov	local01, #0
09f5c                 | LR__0832
09f5c     0F 21 02 F6 | 	mov	local02, local01
09f60     02 20 66 F0 | 	shl	local02, #2
09f64     51 00 00 FF 
09f68     F8 E5 05 F1 | 	add	objptr, ##41976
09f6c     F2 20 02 F1 | 	add	local02, objptr
09f70     10 21 0A FB | 	rdlong	local02, local02 wz
09f74     51 00 00 FF 
09f78     F8 E5 85 F1 | 	sub	objptr, ##41976
09f7c     34 00 90 AD |  if_e	jmp	#LR__0833
09f80     0F 13 02 F6 | 	mov	arg01, local01
09f84     00 14 06 F6 | 	mov	arg02, #0
09f88     00 16 06 F6 | 	mov	arg03, #0
09f8c     7C 95 B0 FD | 	call	#_hg010b_spin2_setspritesize
09f90     0F 21 02 F6 | 	mov	local02, local01
09f94     02 20 66 F0 | 	shl	local02, #2
09f98     51 00 00 FF 
09f9c     F8 E5 05 F1 | 	add	objptr, ##41976
09fa0     F2 20 02 F1 | 	add	local02, objptr
09fa4     10 13 02 FB | 	rdlong	arg01, local02
09fa8     51 00 00 FF 
09fac     F8 E5 85 F1 | 	sub	objptr, ##41976
09fb0     A0 F0 B0 FD | 	call	#__system___gc_free
09fb4                 | LR__0833
09fb4     F2 22 02 FB | 	rdlong	local03, objptr
09fb8     52 00 00 FF 
09fbc     3C E4 05 F1 | 	add	objptr, ##42044
09fc0     F2 22 62 FC | 	wrlong	local03, objptr
09fc4     52 00 00 FF 
09fc8     3C E4 85 F1 | 	sub	objptr, ##42044
09fcc     11 12 06 F6 | 	mov	arg01, #17
09fd0     08 14 06 F6 | 	mov	arg02, #8
09fd4     10 16 06 F6 | 	mov	arg03, #16
09fd8     30 95 B0 FD | 	call	#_hg010b_spin2_setspritesize
09fdc     01 1E 06 F1 | 	add	local01, #1
09fe0     10 1E 56 F2 | 	cmps	local01, #16 wc
09fe4     74 FF 9F CD |  if_b	jmp	#LR__0832
09fe8     A7 F0 03 F6 | 	mov	ptra, fp
09fec     B2 00 A0 FD | 	call	#popregs_
09ff0                 | _do_new_ret
09ff0     2D 00 64 FD | 	ret
09ff4                 | 
09ff4                 | ' 
09ff4                 | ' '----------------------- goto
09ff4                 | ' sub do_fast_goto
09ff4                 | _do_fast_goto
09ff4     02 4A 05 F6 | 	mov	COUNT_, #2
09ff8     A8 00 A0 FD | 	call	#pushregs_
09ffc                 | _do_fast_goto_enter
09ffc     41 00 00 FF 
0a000     44 E4 05 F1 | 	add	objptr, ##33348
0a004     F2 12 02 FB | 	rdlong	arg01, objptr
0a008     09 1F 02 F6 | 	mov	local01, arg01
0a00c     01 1E 66 F0 | 	shl	local01, #1
0a010     09 1F 02 F1 | 	add	local01, arg01
0a014     02 1E 66 F0 | 	shl	local01, #2
0a018     03 00 00 FF 
0a01c     04 E4 85 F1 | 	sub	objptr, ##1540
0a020     F2 1E 02 F1 | 	add	local01, objptr
0a024     0F 21 02 FB | 	rdlong	local02, local01
0a028     10 13 02 F6 | 	mov	arg01, local02
0a02c     3E 00 00 FF 
0a030     40 E4 85 F1 | 	sub	objptr, ##31808
0a034     40 81 B0 FD | 	call	#_pslpeek
0a038     FD 12 02 F6 | 	mov	arg01, result1
0a03c                 | ' 
0a03c                 | ' testptr=compiledline(lineptr_e).result.uresult
0a03c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0a03c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0a03c     41 00 00 FF 
0a040     44 E4 05 F1 | 	add	objptr, ##33348
0a044     F2 FA 01 FB | 	rdlong	result1, objptr
0a048     FD 1E 02 F6 | 	mov	local01, result1
0a04c     01 1E 66 F0 | 	shl	local01, #1
0a050     FD 1E 02 F1 | 	add	local01, result1
0a054     02 1E 66 F0 | 	shl	local01, #2
0a058     03 00 00 FF 
0a05c     04 E4 85 F1 | 	sub	objptr, ##1540
0a060     F2 1E 02 F1 | 	add	local01, objptr
0a064     04 1E 06 F1 | 	add	local01, #4
0a068     0F 1F 02 FB | 	rdlong	local01, local01
0a06c     0F 13 0A F2 | 	cmp	arg01, local01 wz
0a070     3E 00 00 FF 
0a074     40 E4 85 F1 | 	sub	objptr, ##31808
0a078     58 00 90 5D |  if_ne	jmp	#LR__0840
0a07c     50 00 00 FF 
0a080     74 E5 05 F1 | 	add	objptr, ##41332
0a084     F2 20 62 FC | 	wrlong	local02, objptr
0a088     0F 00 00 FF 
0a08c     34 E5 85 F1 | 	sub	objptr, ##7988
0a090     F2 20 02 FB | 	rdlong	local02, objptr
0a094     01 20 86 F1 | 	sub	local02, #1
0a098     04 E4 05 F1 | 	add	objptr, #4
0a09c     F2 20 62 FC | 	wrlong	local02, objptr
0a0a0                 | '   runptr=testptr
0a0a0                 | '   lineptr_e=lineptr-1
0a0a0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0a0a0     0F 00 00 FF 
0a0a4     54 E5 05 F1 | 	add	objptr, ##8020
0a0a8     F2 20 02 FB | 	rdlong	local02, objptr
0a0ac     50 00 00 FF 
0a0b0     98 E5 85 F1 | 	sub	objptr, ##41368
0a0b4     FF FF 3F FF 
0a0b8     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a0bc     50 00 00 AF 
0a0c0     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a0c4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a0c8     50 00 00 AF 
0a0cc     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a0d0     04 00 90 FD | 	jmp	#LR__0841
0a0d4                 | LR__0840
0a0d4     0C 00 B0 FD | 	call	#_do_find_goto
0a0d8                 | LR__0841
0a0d8     A7 F0 03 F6 | 	mov	ptra, fp
0a0dc     B2 00 A0 FD | 	call	#popregs_
0a0e0                 | _do_fast_goto_ret
0a0e0     2D 00 64 FD | 	ret
0a0e4                 | 
0a0e4                 | ' 
0a0e4                 | ' 
0a0e4                 | ' 
0a0e4                 | ' 
0a0e4                 | ' sub do_find_goto
0a0e4                 | _do_find_goto
0a0e4     03 4A 05 F6 | 	mov	COUNT_, #3
0a0e8     A8 00 A0 FD | 	call	#pushregs_
0a0ec     24 F0 07 F1 | 	add	ptra, #36
0a0f0                 | _do_find_goto_enter
0a0f0     41 00 00 FF 
0a0f4     44 E4 05 F1 | 	add	objptr, ##33348
0a0f8     F2 1E 02 FB | 	rdlong	local01, objptr
0a0fc     0F 21 02 F6 | 	mov	local02, local01
0a100     01 20 66 F0 | 	shl	local02, #1
0a104     0F 21 02 F1 | 	add	local02, local01
0a108     02 20 66 F0 | 	shl	local02, #2
0a10c     03 00 00 FF 
0a110     04 E4 85 F1 | 	sub	objptr, ##1540
0a114     F2 20 02 F1 | 	add	local02, objptr
0a118     04 20 06 F1 | 	add	local02, #4
0a11c     10 21 02 FB | 	rdlong	local02, local02
0a120     A7 20 62 FC | 	wrlong	local02, fp
0a124     03 00 00 FF 
0a128     08 E4 05 F1 | 	add	objptr, ##1544
0a12c     F2 22 02 FB | 	rdlong	local03, objptr
0a130     41 00 00 FF 
0a134     48 E4 85 F1 | 	sub	objptr, ##33352
0a138     04 4E 05 F1 | 	add	fp, #4
0a13c     A7 22 62 FC | 	wrlong	local03, fp
0a140     04 4E 85 F1 | 	sub	fp, #4
0a144                 | ' 
0a144                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a144                 | '  ' print "find goto"                                                                     'print gotoline 
0a144                 | ' gotoptr=programstart
0a144                 | ' do
0a144                 | LR__0850
0a144     0C 4E 05 F1 | 	add	fp, #12
0a148     A7 12 02 F6 | 	mov	arg01, fp
0a14c     08 4E 85 F1 | 	sub	fp, #8
0a150     A7 14 02 FB | 	rdlong	arg02, fp
0a154     04 4E 85 F1 | 	sub	fp, #4
0a158     18 16 06 F6 | 	mov	arg03, #24
0a15c     0B 00 00 FF 
0a160     C0 E4 05 F1 | 	add	objptr, ##5824
0a164     5C A8 B0 FD | 	call	#_psram_spin2_read1
0a168     0B 00 00 FF 
0a16c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a170                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a170                 | '   if gotoheader(0)<>$FFFFFFFF then
0a170     0C 4E 05 F1 | 	add	fp, #12
0a174     A7 22 02 FB | 	rdlong	local03, fp
0a178     0C 4E 85 F1 | 	sub	fp, #12
0a17c     FF FF 7F FF 
0a180     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a184     24 00 90 AD |  if_e	jmp	#LR__0851
0a188     04 4E 05 F1 | 	add	fp, #4
0a18c     A7 22 02 FB | 	rdlong	local03, fp
0a190     04 4E 05 F1 | 	add	fp, #4
0a194     A7 22 62 FC | 	wrlong	local03, fp
0a198     18 4E 05 F1 | 	add	fp, #24
0a19c     A7 22 02 FB | 	rdlong	local03, fp
0a1a0     1C 4E 85 F1 | 	sub	fp, #28
0a1a4     A7 22 62 FC | 	wrlong	local03, fp
0a1a8     04 4E 85 F1 | 	sub	fp, #4
0a1ac                 | LR__0851
0a1ac     20 4E 05 F1 | 	add	fp, #32
0a1b0     A7 22 02 FB | 	rdlong	local03, fp
0a1b4     20 4E 85 F1 | 	sub	fp, #32
0a1b8     FF FF 3F FF 
0a1bc     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a1c0     0C 4E 05 51 |  if_ne	add	fp, #12
0a1c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a1c8     0C 4E 85 51 |  if_ne	sub	fp, #12
0a1cc     FF FF 7F 5F 
0a1d0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a1d4     18 00 90 AD |  if_e	jmp	#LR__0852
0a1d8     0C 4E 05 F1 | 	add	fp, #12
0a1dc     A7 22 02 FB | 	rdlong	local03, fp
0a1e0     0C 4E 85 F1 | 	sub	fp, #12
0a1e4     A7 20 02 FB | 	rdlong	local02, fp
0a1e8     10 23 0A F2 | 	cmp	local03, local02 wz
0a1ec     54 FF 9F 5D |  if_ne	jmp	#LR__0850
0a1f0                 | LR__0852
0a1f0                 | ' 
0a1f0                 | ' if gotoheader(0)=gotoline then
0a1f0     0C 4E 05 F1 | 	add	fp, #12
0a1f4     A7 22 02 FB | 	rdlong	local03, fp
0a1f8     0C 4E 85 F1 | 	sub	fp, #12
0a1fc     A7 1E 02 FB | 	rdlong	local01, fp
0a200     0F 23 0A F2 | 	cmp	local03, local01 wz
0a204     D8 00 90 5D |  if_ne	jmp	#LR__0853
0a208     41 00 00 FF 
0a20c     44 E4 05 F1 | 	add	objptr, ##33348
0a210     F2 1E 02 FB | 	rdlong	local01, objptr
0a214     0F 21 02 F6 | 	mov	local02, local01
0a218     01 20 66 F0 | 	shl	local02, #1
0a21c     0F 21 02 F1 | 	add	local02, local01
0a220     02 20 66 F0 | 	shl	local02, #2
0a224     03 00 00 FF 
0a228     04 E4 85 F1 | 	sub	objptr, ##1540
0a22c     F2 20 02 F1 | 	add	local02, objptr
0a230     08 4E 05 F1 | 	add	fp, #8
0a234     A7 22 02 FB | 	rdlong	local03, fp
0a238     10 23 62 FC | 	wrlong	local03, local02
0a23c     03 00 00 FF 
0a240     04 E4 05 F1 | 	add	objptr, ##1540
0a244     F2 1E 02 FB | 	rdlong	local01, objptr
0a248     0F 21 02 F6 | 	mov	local02, local01
0a24c     01 20 66 F0 | 	shl	local02, #1
0a250     0F 21 02 F1 | 	add	local02, local01
0a254     02 20 66 F0 | 	shl	local02, #2
0a258     03 00 00 FF 
0a25c     04 E4 85 F1 | 	sub	objptr, ##1540
0a260     F2 20 02 F1 | 	add	local02, objptr
0a264     08 20 06 F1 | 	add	local02, #8
0a268     10 9D 68 FC | 	wrlong	#78, local02
0a26c     03 00 00 FF 
0a270     04 E4 05 F1 | 	add	objptr, ##1540
0a274     F2 20 02 FB | 	rdlong	local02, objptr
0a278     10 13 02 F6 | 	mov	arg01, local02
0a27c     01 12 66 F0 | 	shl	arg01, #1
0a280     10 13 02 F1 | 	add	arg01, local02
0a284     02 12 66 F0 | 	shl	arg01, #2
0a288     03 00 00 FF 
0a28c     04 E4 85 F1 | 	sub	objptr, ##1540
0a290     F2 12 02 F1 | 	add	arg01, objptr
0a294     12 00 00 FF 
0a298     3C E5 05 F1 | 	add	objptr, ##9532
0a29c     F2 14 02 FB | 	rdlong	arg02, objptr
0a2a0     02 22 06 F6 | 	mov	local03, #2
0a2a4     10 23 02 F1 | 	add	local03, local02
0a2a8     14 00 00 FF 
0a2ac     54 E5 85 F1 | 	sub	objptr, ##10580
0a2b0     F2 16 02 FB | 	rdlong	arg03, objptr
0a2b4     0B 23 02 FD | 	qmul	local03, arg03
0a2b8     08 4E 85 F1 | 	sub	fp, #8
0a2bc     30 00 00 FF 
0a2c0     68 E5 85 F1 | 	sub	objptr, ##24936
0a2c4     18 22 62 FD | 	getqx	local03
0a2c8     11 15 02 F1 | 	add	arg02, local03
0a2cc     90 A7 B0 FD | 	call	#_psram_spin2_write
0a2d0     0B 00 00 FF 
0a2d4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a2d8     18 FD BF FD | 	call	#_do_fast_goto
0a2dc     08 00 90 FD | 	jmp	#LR__0854
0a2e0                 | LR__0853
0a2e0     26 12 06 F6 | 	mov	arg01, #38
0a2e4     D4 7C B0 FD | 	call	#_printerror
0a2e8                 | LR__0854
0a2e8     A7 F0 03 F6 | 	mov	ptra, fp
0a2ec     B2 00 A0 FD | 	call	#popregs_
0a2f0                 | _do_find_goto_ret
0a2f0     2D 00 64 FD | 	ret
0a2f4                 | 
0a2f4                 | ' 
0a2f4                 | ' sub do_slow_goto
0a2f4                 | _do_slow_goto
0a2f4                 | _do_slow_goto_ret
0a2f4     2D 00 64 FD | 	ret
0a2f8                 | 
0a2f8                 | ' 
0a2f8                 | ' '----------------------- Error processing
0a2f8                 | ' 
0a2f8                 | ' sub do_error
0a2f8                 | _do_error
0a2f8     01 4A 05 F6 | 	mov	COUNT_, #1
0a2fc     A8 00 A0 FD | 	call	#pushregs_
0a300     41 00 00 FF 
0a304     44 E4 05 F1 | 	add	objptr, ##33348
0a308     F2 18 02 FB | 	rdlong	arg04, objptr
0a30c     0C 17 02 F6 | 	mov	arg03, arg04
0a310     01 16 66 F0 | 	shl	arg03, #1
0a314     0C 17 02 F1 | 	add	arg03, arg04
0a318     02 16 66 F0 | 	shl	arg03, #2
0a31c     03 00 00 FF 
0a320     04 E4 85 F1 | 	sub	objptr, ##1540
0a324     F2 16 02 F1 | 	add	arg03, objptr
0a328     0B 1F 02 FB | 	rdlong	local01, arg03
0a32c                 | ' r=compiledline(lineptr_e).result.uresult
0a32c                 | ' print "Error ";r;": ";errors$(r)
0a32c     00 12 06 F6 | 	mov	arg01, #0
0a330     3E 00 00 FF 
0a334     40 E4 85 F1 | 	sub	objptr, ##31808
0a338     28 07 B1 FD | 	call	#__system___getiolock_0348
0a33c     FD 12 02 F6 | 	mov	arg01, result1
0a340     6C B1 B0 FD | 	call	#__system___lockmem
0a344     25 01 00 FF 
0a348     5C 14 06 F6 | 	mov	arg02, ##@LR__4310
0a34c     00 12 06 F6 | 	mov	arg01, #0
0a350     00 16 06 F6 | 	mov	arg03, #0
0a354     4C BE B0 FD | 	call	#__system___basic_print_string
0a358     00 12 06 F6 | 	mov	arg01, #0
0a35c     0F 15 02 F6 | 	mov	arg02, local01
0a360     00 16 06 F6 | 	mov	arg03, #0
0a364     0A 18 06 F6 | 	mov	arg04, #10
0a368     BC BE B0 FD | 	call	#__system___basic_print_unsigned
0a36c     25 01 00 FF 
0a370     63 14 06 F6 | 	mov	arg02, ##@LR__4311
0a374     00 12 06 F6 | 	mov	arg01, #0
0a378     00 16 06 F6 | 	mov	arg03, #0
0a37c     24 BE B0 FD | 	call	#__system___basic_print_string
0a380     02 1E 66 F0 | 	shl	local01, #2
0a384     3C 00 00 FF 
0a388     40 E4 05 F1 | 	add	objptr, ##30784
0a38c     F2 1E 02 F1 | 	add	local01, objptr
0a390     0F 15 02 FB | 	rdlong	arg02, local01
0a394     00 12 06 F6 | 	mov	arg01, #0
0a398     00 16 06 F6 | 	mov	arg03, #0
0a39c     3C 00 00 FF 
0a3a0     40 E4 85 F1 | 	sub	objptr, ##30784
0a3a4     FC BD B0 FD | 	call	#__system___basic_print_string
0a3a8     00 12 06 F6 | 	mov	arg01, #0
0a3ac     0A 14 06 F6 | 	mov	arg02, #10
0a3b0     00 16 06 F6 | 	mov	arg03, #0
0a3b4     94 BD B0 FD | 	call	#__system___basic_print_char
0a3b8     00 12 06 F6 | 	mov	arg01, #0
0a3bc     A4 06 B1 FD | 	call	#__system___getiolock_0348
0a3c0     FD 00 68 FC | 	wrlong	#0, result1
0a3c4     A7 F0 03 F6 | 	mov	ptra, fp
0a3c8     B2 00 A0 FD | 	call	#popregs_
0a3cc                 | _do_error_ret
0a3cc     2D 00 64 FD | 	ret
0a3d0                 | 
0a3d0                 | ' 
0a3d0                 | ' 
0a3d0                 | ' '------------------ Assigning to a variable  
0a3d0                 | ' 
0a3d0                 | ' 
0a3d0                 | ' sub do_assign
0a3d0                 | _do_assign
0a3d0     04 4A 05 F6 | 	mov	COUNT_, #4
0a3d4     A8 00 A0 FD | 	call	#pushregs_
0a3d8     44 F0 07 F1 | 	add	ptra, #68
0a3dc     41 00 00 FF 
0a3e0     44 E4 05 F1 | 	add	objptr, ##33348
0a3e4     F2 12 02 FB | 	rdlong	arg01, objptr
0a3e8     09 17 02 F6 | 	mov	arg03, arg01
0a3ec     01 16 66 F0 | 	shl	arg03, #1
0a3f0     09 17 02 F1 | 	add	arg03, arg01
0a3f4     02 16 66 F0 | 	shl	arg03, #2
0a3f8     03 00 00 FF 
0a3fc     04 E4 85 F1 | 	sub	objptr, ##1540
0a400     F2 16 02 F1 | 	add	arg03, objptr
0a404     0B 17 02 FB | 	rdlong	arg03, arg03
0a408     18 4E 05 F1 | 	add	fp, #24
0a40c     A7 16 62 FC | 	wrlong	arg03, fp
0a410                 | ' 
0a410                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0a410                 | ' 
0a410                 | ' if variables(varnum).vartype<array_no_type then t1=pop() : variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type : return
0a410     18 4E 85 F1 | 	sub	fp, #24
0a414     04 16 66 F0 | 	shl	arg03, #4
0a418     32 00 00 FF 
0a41c     74 E4 85 F1 | 	sub	objptr, ##25716
0a420     F2 16 02 F1 | 	add	arg03, objptr
0a424     0C 16 06 F1 | 	add	arg03, #12
0a428     0B 13 02 FB | 	rdlong	arg01, arg03
0a42c     00 13 16 F2 | 	cmp	arg01, #256 wc
0a430     0B 00 00 FF 
0a434     CC E5 85 F1 | 	sub	objptr, ##6092
0a438     88 00 90 3D |  if_ae	jmp	#LR__0860
0a43c     F4 E2 BF FD | 	call	#_pop
0a440     A7 FA 61 FC | 	wrlong	result1, fp
0a444     04 4E 05 F1 | 	add	fp, #4
0a448     A7 FC 61 FC | 	wrlong	result2, fp
0a44c     04 4E 05 F1 | 	add	fp, #4
0a450     A7 FE 61 FC | 	wrlong	result3, fp
0a454     08 4E 85 F1 | 	sub	fp, #8
0a458     A7 12 02 FB | 	rdlong	arg01, fp
0a45c     04 4E 05 F1 | 	add	fp, #4
0a460     A7 16 02 FB | 	rdlong	arg03, fp
0a464     14 4E 05 F1 | 	add	fp, #20
0a468     A7 14 02 FB | 	rdlong	arg02, fp
0a46c     04 14 66 F0 | 	shl	arg02, #4
0a470     0B 00 00 FF 
0a474     CC E5 05 F1 | 	add	objptr, ##6092
0a478     F2 14 02 F1 | 	add	arg02, objptr
0a47c     04 14 06 F1 | 	add	arg02, #4
0a480     0A 13 62 FC | 	wrlong	arg01, arg02
0a484     A7 12 02 FB | 	rdlong	arg01, fp
0a488     04 12 66 F0 | 	shl	arg01, #4
0a48c     F2 12 02 F1 | 	add	arg01, objptr
0a490     08 12 06 F1 | 	add	arg01, #8
0a494     09 17 62 FC | 	wrlong	arg03, arg01
0a498     A7 12 02 FB | 	rdlong	arg01, fp
0a49c     04 12 66 F0 | 	shl	arg01, #4
0a4a0     F2 12 02 F1 | 	add	arg01, objptr
0a4a4     10 4E 85 F1 | 	sub	fp, #16
0a4a8     A7 16 02 FB | 	rdlong	arg03, fp
0a4ac     08 4E 85 F1 | 	sub	fp, #8
0a4b0     0C 12 06 F1 | 	add	arg01, #12
0a4b4     09 17 62 FC | 	wrlong	arg03, arg01
0a4b8     0B 00 00 FF 
0a4bc     CC E5 85 F1 | 	sub	objptr, ##6092
0a4c0     28 05 90 FD | 	jmp	#LR__0881
0a4c4                 | LR__0860
0a4c4                 | ' 
0a4c4                 | ' for i=0 to 2 : arrid(i)=0 : next i
0a4c4     1C 4E 05 F1 | 	add	fp, #28
0a4c8     A7 00 68 FC | 	wrlong	#0, fp
0a4cc     97 16 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a4d0                 | LR__0861
0a4d0     A7 12 02 FB | 	rdlong	arg01, fp
0a4d4     02 12 66 F0 | 	shl	arg01, #2
0a4d8     18 4E 05 F1 | 	add	fp, #24
0a4dc     A7 12 02 F1 | 	add	arg01, fp
0a4e0     09 01 68 FC | 	wrlong	#0, arg01
0a4e4     18 4E 85 F1 | 	sub	fp, #24
0a4e8     A7 12 02 FB | 	rdlong	arg01, fp
0a4ec     01 12 06 F1 | 	add	arg01, #1
0a4f0     A7 12 62 FC | 	wrlong	arg01, fp
0a4f4     03 12 16 F2 | 	cmp	arg01, #3 wc
0a4f8     D4 FF 9F CD |  if_b	jmp	#LR__0861
0a4fc                 | LR__0862
0a4fc     41 00 00 FF 
0a500     44 E4 05 F1 | 	add	objptr, ##33348
0a504     F2 12 02 FB | 	rdlong	arg01, objptr
0a508     09 15 02 F6 | 	mov	arg02, arg01
0a50c     01 14 66 F0 | 	shl	arg02, #1
0a510     09 15 02 F1 | 	add	arg02, arg01
0a514     02 14 66 F0 | 	shl	arg02, #2
0a518     03 00 00 FF 
0a51c     04 E4 85 F1 | 	sub	objptr, ##1540
0a520     F2 14 02 F1 | 	add	arg02, objptr
0a524     04 14 06 F1 | 	add	arg02, #4
0a528     0A 13 02 FB | 	rdlong	arg01, arg02
0a52c     04 4E 05 F1 | 	add	fp, #4
0a530     A7 12 62 FC | 	wrlong	arg01, fp
0a534     20 4E 85 F1 | 	sub	fp, #32
0a538     3E 00 00 FF 
0a53c     40 E4 85 F1 | 	sub	objptr, ##31808
0a540     F0 E1 BF FD | 	call	#_pop
0a544     FF 1E 02 F6 | 	mov	local01, result3
0a548     A7 FA 61 FC | 	wrlong	result1, fp
0a54c     04 4E 05 F1 | 	add	fp, #4
0a550     A7 FC 61 FC | 	wrlong	result2, fp
0a554     04 4E 05 F1 | 	add	fp, #4
0a558     A7 1E 62 FC | 	wrlong	local01, fp
0a55c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0a55c                 | ' t1=pop() ' var value
0a55c                 | ' if numpar>0 then
0a55c     18 4E 05 F1 | 	add	fp, #24
0a560     A7 20 02 FB | 	rdlong	local02, fp
0a564     20 4E 85 F1 | 	sub	fp, #32
0a568     01 20 16 F2 | 	cmp	local02, #1 wc
0a56c     70 00 90 CD |  if_b	jmp	#LR__0865
0a570                 | '   for i=numpar to 1 step -1
0a570     20 4E 05 F1 | 	add	fp, #32
0a574     A7 22 0A FB | 	rdlong	local03, fp wz
0a578     04 4E 85 F1 | 	sub	fp, #4
0a57c     A7 22 62 FC | 	wrlong	local03, fp
0a580     1C 4E 85 F1 | 	sub	fp, #28
0a584     58 00 90 AD |  if_e	jmp	#LR__0864
0a588                 | LR__0863
0a588     A8 E1 BF FD | 	call	#_pop
0a58c     0C 4E 05 F1 | 	add	fp, #12
0a590     A7 FA 61 FC | 	wrlong	result1, fp
0a594     04 4E 05 F1 | 	add	fp, #4
0a598     A7 FC 61 FC | 	wrlong	result2, fp
0a59c     04 4E 05 F1 | 	add	fp, #4
0a5a0     A7 FE 61 FC | 	wrlong	result3, fp
0a5a4     08 4E 05 F1 | 	add	fp, #8
0a5a8     A7 1E 02 FB | 	rdlong	local01, fp
0a5ac     01 1E 86 F1 | 	sub	local01, #1
0a5b0     02 1E 66 F0 | 	shl	local01, #2
0a5b4     18 4E 05 F1 | 	add	fp, #24
0a5b8     A7 1E 02 F1 | 	add	local01, fp
0a5bc     28 4E 85 F1 | 	sub	fp, #40
0a5c0     A7 22 02 FB | 	rdlong	local03, fp
0a5c4     0F 23 62 FC | 	wrlong	local03, local01
0a5c8     10 4E 05 F1 | 	add	fp, #16
0a5cc     A7 22 02 FB | 	rdlong	local03, fp
0a5d0     01 22 8E F1 | 	sub	local03, #1 wz
0a5d4     A7 22 62 FC | 	wrlong	local03, fp
0a5d8     1C 4E 85 F1 | 	sub	fp, #28
0a5dc     A8 FF 9F 5D |  if_ne	jmp	#LR__0863
0a5e0                 | LR__0864
0a5e0                 | LR__0865
0a5e0     18 4E 05 F1 | 	add	fp, #24
0a5e4     A7 20 02 FB | 	rdlong	local02, fp
0a5e8     04 20 66 F0 | 	shl	local02, #4
0a5ec     0B 00 00 FF 
0a5f0     CC E5 05 F1 | 	add	objptr, ##6092
0a5f4     F2 20 02 F1 | 	add	local02, objptr
0a5f8     04 20 06 F1 | 	add	local02, #4
0a5fc     10 13 02 FB | 	rdlong	arg01, local02
0a600     0C 4E 05 F1 | 	add	fp, #12
0a604     A7 12 62 FC | 	wrlong	arg01, fp
0a608     24 4E 85 F1 | 	sub	fp, #36
0a60c     0B 00 00 FF 
0a610     CC E5 85 F1 | 	sub	objptr, ##6092
0a614     60 7B B0 FD | 	call	#_pslpeek
0a618     FD 22 32 F9 | 	getword	local03, result1, #0
0a61c     28 4E 05 F1 | 	add	fp, #40
0a620     A7 22 62 FC | 	wrlong	local03, fp
0a624     04 4E 85 F1 | 	sub	fp, #4
0a628     A7 12 02 FB | 	rdlong	arg01, fp
0a62c     24 4E 85 F1 | 	sub	fp, #36
0a630     02 12 06 F1 | 	add	arg01, #2
0a634     E8 7A B0 FD | 	call	#_pspeek
0a638     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a63c     2C 4E 05 F1 | 	add	fp, #44
0a640     A7 FA 61 FC | 	wrlong	result1, fp
0a644     08 4E 85 F1 | 	sub	fp, #8
0a648     A7 12 02 FB | 	rdlong	arg01, fp
0a64c     09 23 02 F6 | 	mov	local03, arg01
0a650     10 22 06 F1 | 	add	local03, #16
0a654     24 4E 85 F1 | 	sub	fp, #36
0a658     04 12 06 F1 | 	add	arg01, #4
0a65c     18 7B B0 FD | 	call	#_pslpeek
0a660     38 4E 05 F1 | 	add	fp, #56
0a664     A7 1E 02 FB | 	rdlong	local01, fp
0a668     0F FB 01 FD | 	qmul	result1, local01
0a66c     04 4E 85 F1 | 	sub	fp, #4
0a670     A7 1E 02 FB | 	rdlong	local01, fp
0a674     10 4E 85 F1 | 	sub	fp, #16
0a678     A7 12 02 FB | 	rdlong	arg01, fp
0a67c     24 4E 85 F1 | 	sub	fp, #36
0a680     08 12 06 F1 | 	add	arg01, #8
0a684     18 20 62 FD | 	getqx	local02
0a688     10 1F 02 F1 | 	add	local01, local02
0a68c     E8 7A B0 FD | 	call	#_pslpeek
0a690     FD 20 02 F6 | 	mov	local02, result1
0a694     24 4E 05 F1 | 	add	fp, #36
0a698     A7 12 02 FB | 	rdlong	arg01, fp
0a69c     24 4E 85 F1 | 	sub	fp, #36
0a6a0     04 12 06 F1 | 	add	arg01, #4
0a6a4     D0 7A B0 FD | 	call	#_pslpeek
0a6a8     FD 20 02 FD | 	qmul	local02, result1
0a6ac     3C 4E 05 F1 | 	add	fp, #60
0a6b0     A7 20 02 FB | 	rdlong	local02, fp
0a6b4     18 12 62 FD | 	getqx	arg01
0a6b8     10 13 02 FD | 	qmul	arg01, local02
0a6bc     10 4E 85 F1 | 	sub	fp, #16
0a6c0     A7 20 02 FB | 	rdlong	local02, fp
0a6c4     18 12 62 FD | 	getqx	arg01
0a6c8     09 1F 02 F1 | 	add	local01, arg01
0a6cc     0F 21 02 FD | 	qmul	local02, local01
0a6d0     04 4E 05 F1 | 	add	fp, #4
0a6d4                 | ' esize=pspeek(arrptr+2)
0a6d4                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0a6d4                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0a6d4                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0a6d4                 | ' 
0a6d4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0a6d4                 | ' select case arrtype
0a6d4     18 20 62 FD | 	getqx	local02
0a6d8     10 23 02 F1 | 	add	local03, local02
0a6dc     A7 22 62 FC | 	wrlong	local03, fp
0a6e0     08 4E 85 F1 | 	sub	fp, #8
0a6e4     A7 24 02 FB | 	rdlong	local04, fp
0a6e8     28 4E 85 F1 | 	sub	fp, #40
0a6ec     00 25 86 F1 | 	sub	local04, #256
0a6f0     0C 24 26 F3 | 	fle	local04, #12
0a6f4     30 24 62 FD | 	jmprel	local04
0a6f8                 | LR__0866
0a6f8     30 00 90 FD | 	jmp	#LR__0867
0a6fc     58 00 90 FD | 	jmp	#LR__0868
0a700     88 00 90 FD | 	jmp	#LR__0869
0a704     B8 00 90 FD | 	jmp	#LR__0870
0a708     10 01 90 FD | 	jmp	#LR__0871
0a70c     68 01 90 FD | 	jmp	#LR__0872
0a710     98 01 90 FD | 	jmp	#LR__0873
0a714     C8 01 90 FD | 	jmp	#LR__0874
0a718     F8 01 90 FD | 	jmp	#LR__0875
0a71c     28 02 90 FD | 	jmp	#LR__0876
0a720     58 02 90 FD | 	jmp	#LR__0877
0a724     88 02 90 FD | 	jmp	#LR__0878
0a728     B8 02 90 FD | 	jmp	#LR__0879
0a72c                 | LR__0867
0a72c     A7 12 02 F6 | 	mov	arg01, fp
0a730     30 4E 05 F1 | 	add	fp, #48
0a734     A7 14 02 FB | 	rdlong	arg02, fp
0a738     30 4E 85 F1 | 	sub	fp, #48
0a73c     0C 16 06 F6 | 	mov	arg03, #12
0a740     0B 00 00 FF 
0a744     C0 E4 05 F1 | 	add	objptr, ##5824
0a748     14 A3 B0 FD | 	call	#_psram_spin2_write
0a74c     0B 00 00 FF 
0a750     C0 E4 85 F1 | 	sub	objptr, ##5824
0a754     94 02 90 FD | 	jmp	#LR__0880
0a758                 | LR__0868
0a758     30 4E 05 F1 | 	add	fp, #48
0a75c     A7 12 02 FB | 	rdlong	arg01, fp
0a760     30 4E 85 F1 | 	sub	fp, #48
0a764     A7 14 02 FB | 	rdlong	arg02, fp
0a768     01 16 06 F6 | 	mov	arg03, #1
0a76c     00 18 06 F6 | 	mov	arg04, #0
0a770     0B 00 00 FF 
0a774     C0 E4 05 F1 | 	add	objptr, ##5824
0a778                 | '     return fill(addr, pattern, count, listPtr, 1)
0a778     01 1A 06 F6 | 	mov	arg05, #1
0a77c     7C A3 B0 FD | 	call	#_psram_spin2_fill
0a780     0B 00 00 FF 
0a784     C0 E4 85 F1 | 	sub	objptr, ##5824
0a788     60 02 90 FD | 	jmp	#LR__0880
0a78c                 | LR__0869
0a78c     30 4E 05 F1 | 	add	fp, #48
0a790     A7 12 02 FB | 	rdlong	arg01, fp
0a794     30 4E 85 F1 | 	sub	fp, #48
0a798     A7 14 02 FB | 	rdlong	arg02, fp
0a79c     01 16 06 F6 | 	mov	arg03, #1
0a7a0     00 18 06 F6 | 	mov	arg04, #0
0a7a4     0B 00 00 FF 
0a7a8     C0 E4 05 F1 | 	add	objptr, ##5824
0a7ac                 | '     return fill(addr, pattern, count, listPtr, 1)
0a7ac     01 1A 06 F6 | 	mov	arg05, #1
0a7b0     48 A3 B0 FD | 	call	#_psram_spin2_fill
0a7b4     0B 00 00 FF 
0a7b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a7bc     2C 02 90 FD | 	jmp	#LR__0880
0a7c0                 | LR__0870
0a7c0     30 4E 05 F1 | 	add	fp, #48
0a7c4     A7 12 02 FB | 	rdlong	arg01, fp
0a7c8     30 4E 85 F1 | 	sub	fp, #48
0a7cc     A7 14 02 FB | 	rdlong	arg02, fp
0a7d0     01 16 06 F6 | 	mov	arg03, #1
0a7d4     00 18 06 F6 | 	mov	arg04, #0
0a7d8     0B 00 00 FF 
0a7dc     C0 E4 05 F1 | 	add	objptr, ##5824
0a7e0                 | '     return fill(addr, pattern, count, listPtr, 1)
0a7e0     01 1A 06 F6 | 	mov	arg05, #1
0a7e4     14 A3 B0 FD | 	call	#_psram_spin2_fill
0a7e8     30 4E 05 F1 | 	add	fp, #48
0a7ec     A7 12 02 FB | 	rdlong	arg01, fp
0a7f0     30 4E 85 F1 | 	sub	fp, #48
0a7f4     01 12 06 F1 | 	add	arg01, #1
0a7f8     A7 14 02 FB | 	rdlong	arg02, fp
0a7fc     08 14 46 F0 | 	shr	arg02, #8
0a800     01 16 06 F6 | 	mov	arg03, #1
0a804     00 18 06 F6 | 	mov	arg04, #0
0a808                 | '     return fill(addr, pattern, count, listPtr, 1)
0a808     01 1A 06 F6 | 	mov	arg05, #1
0a80c     EC A2 B0 FD | 	call	#_psram_spin2_fill
0a810     0B 00 00 FF 
0a814     C0 E4 85 F1 | 	sub	objptr, ##5824
0a818     D0 01 90 FD | 	jmp	#LR__0880
0a81c                 | LR__0871
0a81c     30 4E 05 F1 | 	add	fp, #48
0a820     A7 12 02 FB | 	rdlong	arg01, fp
0a824     30 4E 85 F1 | 	sub	fp, #48
0a828     A7 14 02 FB | 	rdlong	arg02, fp
0a82c     01 16 06 F6 | 	mov	arg03, #1
0a830     00 18 06 F6 | 	mov	arg04, #0
0a834     0B 00 00 FF 
0a838     C0 E4 05 F1 | 	add	objptr, ##5824
0a83c                 | '     return fill(addr, pattern, count, listPtr, 1)
0a83c     01 1A 06 F6 | 	mov	arg05, #1
0a840     B8 A2 B0 FD | 	call	#_psram_spin2_fill
0a844     30 4E 05 F1 | 	add	fp, #48
0a848     A7 12 02 FB | 	rdlong	arg01, fp
0a84c     30 4E 85 F1 | 	sub	fp, #48
0a850     01 12 06 F1 | 	add	arg01, #1
0a854     A7 14 02 FB | 	rdlong	arg02, fp
0a858     08 14 46 F0 | 	shr	arg02, #8
0a85c     01 16 06 F6 | 	mov	arg03, #1
0a860     00 18 06 F6 | 	mov	arg04, #0
0a864                 | '     return fill(addr, pattern, count, listPtr, 1)
0a864     01 1A 06 F6 | 	mov	arg05, #1
0a868     90 A2 B0 FD | 	call	#_psram_spin2_fill
0a86c     0B 00 00 FF 
0a870     C0 E4 85 F1 | 	sub	objptr, ##5824
0a874     74 01 90 FD | 	jmp	#LR__0880
0a878                 | LR__0872
0a878     30 4E 05 F1 | 	add	fp, #48
0a87c     A7 12 02 FB | 	rdlong	arg01, fp
0a880     30 4E 85 F1 | 	sub	fp, #48
0a884     A7 14 02 FB | 	rdlong	arg02, fp
0a888     01 16 06 F6 | 	mov	arg03, #1
0a88c     00 18 06 F6 | 	mov	arg04, #0
0a890     0B 00 00 FF 
0a894     C0 E4 05 F1 | 	add	objptr, ##5824
0a898                 | '     return fill(addr, pattern, count, listPtr, 4)
0a898     04 1A 06 F6 | 	mov	arg05, #4
0a89c     5C A2 B0 FD | 	call	#_psram_spin2_fill
0a8a0     0B 00 00 FF 
0a8a4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a8a8     40 01 90 FD | 	jmp	#LR__0880
0a8ac                 | LR__0873
0a8ac     30 4E 05 F1 | 	add	fp, #48
0a8b0     A7 12 02 FB | 	rdlong	arg01, fp
0a8b4     30 4E 85 F1 | 	sub	fp, #48
0a8b8     A7 14 02 FB | 	rdlong	arg02, fp
0a8bc     01 16 06 F6 | 	mov	arg03, #1
0a8c0     00 18 06 F6 | 	mov	arg04, #0
0a8c4     0B 00 00 FF 
0a8c8     C0 E4 05 F1 | 	add	objptr, ##5824
0a8cc                 | '     return fill(addr, pattern, count, listPtr, 4)
0a8cc     04 1A 06 F6 | 	mov	arg05, #4
0a8d0     28 A2 B0 FD | 	call	#_psram_spin2_fill
0a8d4     0B 00 00 FF 
0a8d8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a8dc     0C 01 90 FD | 	jmp	#LR__0880
0a8e0                 | LR__0874
0a8e0     30 4E 05 F1 | 	add	fp, #48
0a8e4     A7 12 02 FB | 	rdlong	arg01, fp
0a8e8     30 4E 85 F1 | 	sub	fp, #48
0a8ec     A7 14 02 FB | 	rdlong	arg02, fp
0a8f0     01 16 06 F6 | 	mov	arg03, #1
0a8f4     00 18 06 F6 | 	mov	arg04, #0
0a8f8     0B 00 00 FF 
0a8fc     C0 E4 05 F1 | 	add	objptr, ##5824
0a900                 | '     return fill(addr, pattern, count, listPtr, 4)
0a900     04 1A 06 F6 | 	mov	arg05, #4
0a904     F4 A1 B0 FD | 	call	#_psram_spin2_fill
0a908     0B 00 00 FF 
0a90c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a910     D8 00 90 FD | 	jmp	#LR__0880
0a914                 | LR__0875
0a914     30 4E 05 F1 | 	add	fp, #48
0a918     A7 12 02 FB | 	rdlong	arg01, fp
0a91c     30 4E 85 F1 | 	sub	fp, #48
0a920     A7 14 02 FB | 	rdlong	arg02, fp
0a924     01 16 06 F6 | 	mov	arg03, #1
0a928     00 18 06 F6 | 	mov	arg04, #0
0a92c     0B 00 00 FF 
0a930     C0 E4 05 F1 | 	add	objptr, ##5824
0a934                 | '     return fill(addr, pattern, count, listPtr, 4)
0a934     04 1A 06 F6 | 	mov	arg05, #4
0a938     C0 A1 B0 FD | 	call	#_psram_spin2_fill
0a93c     0B 00 00 FF 
0a940     C0 E4 85 F1 | 	sub	objptr, ##5824
0a944     A4 00 90 FD | 	jmp	#LR__0880
0a948                 | LR__0876
0a948     30 4E 05 F1 | 	add	fp, #48
0a94c     A7 12 02 FB | 	rdlong	arg01, fp
0a950     30 4E 85 F1 | 	sub	fp, #48
0a954     A7 14 02 FB | 	rdlong	arg02, fp
0a958     01 16 06 F6 | 	mov	arg03, #1
0a95c     00 18 06 F6 | 	mov	arg04, #0
0a960     0B 00 00 FF 
0a964     C0 E4 05 F1 | 	add	objptr, ##5824
0a968                 | '     return fill(addr, pattern, count, listPtr, 4)
0a968     04 1A 06 F6 | 	mov	arg05, #4
0a96c     8C A1 B0 FD | 	call	#_psram_spin2_fill
0a970     0B 00 00 FF 
0a974     C0 E4 85 F1 | 	sub	objptr, ##5824
0a978     70 00 90 FD | 	jmp	#LR__0880
0a97c                 | LR__0877
0a97c     30 4E 05 F1 | 	add	fp, #48
0a980     A7 12 02 FB | 	rdlong	arg01, fp
0a984     30 4E 85 F1 | 	sub	fp, #48
0a988     A7 14 02 FB | 	rdlong	arg02, fp
0a98c     01 16 06 F6 | 	mov	arg03, #1
0a990     00 18 06 F6 | 	mov	arg04, #0
0a994     0B 00 00 FF 
0a998     C0 E4 05 F1 | 	add	objptr, ##5824
0a99c                 | '     return fill(addr, pattern, count, listPtr, 4)
0a99c     04 1A 06 F6 | 	mov	arg05, #4
0a9a0     58 A1 B0 FD | 	call	#_psram_spin2_fill
0a9a4     0B 00 00 FF 
0a9a8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9ac     3C 00 90 FD | 	jmp	#LR__0880
0a9b0                 | LR__0878
0a9b0     30 4E 05 F1 | 	add	fp, #48
0a9b4     A7 12 02 FB | 	rdlong	arg01, fp
0a9b8     30 4E 85 F1 | 	sub	fp, #48
0a9bc     A7 14 02 FB | 	rdlong	arg02, fp
0a9c0     01 16 06 F6 | 	mov	arg03, #1
0a9c4     00 18 06 F6 | 	mov	arg04, #0
0a9c8     0B 00 00 FF 
0a9cc     C0 E4 05 F1 | 	add	objptr, ##5824
0a9d0                 | '     return fill(addr, pattern, count, listPtr, 4)
0a9d0     04 1A 06 F6 | 	mov	arg05, #4
0a9d4     24 A1 B0 FD | 	call	#_psram_spin2_fill
0a9d8     0B 00 00 FF 
0a9dc     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9e0     08 00 90 FD | 	jmp	#LR__0880
0a9e4                 | LR__0879
0a9e4     2F 12 06 F6 | 	mov	arg01, #47
0a9e8     D0 75 B0 FD | 	call	#_printerror
0a9ec                 | LR__0880
0a9ec                 | LR__0881
0a9ec     A7 F0 03 F6 | 	mov	ptra, fp
0a9f0     B2 00 A0 FD | 	call	#popregs_
0a9f4                 | _do_assign_ret
0a9f4     2D 00 64 FD | 	ret
0a9f8                 | 
0a9f8                 | ' 
0a9f8                 | ' 
0a9f8                 | ' ' --------------------- Read a variable and push to the stack
0a9f8                 | ' 
0a9f8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0a9f8                 | ' 
0a9f8                 | ' sub do_getvar
0a9f8                 | _do_getvar
0a9f8     03 4A 05 F6 | 	mov	COUNT_, #3
0a9fc     A8 00 A0 FD | 	call	#pushregs_
0aa00     3C F0 07 F1 | 	add	ptra, #60
0aa04                 | ' 
0aa04                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0aa04     41 00 00 FF 
0aa08     44 E4 05 F1 | 	add	objptr, ##33348
0aa0c     F2 1E 02 FB | 	rdlong	local01, objptr
0aa10     0F FD 01 F6 | 	mov	result2, local01
0aa14     01 FC 65 F0 | 	shl	result2, #1
0aa18     0F FD 01 F1 | 	add	result2, local01
0aa1c     02 FC 65 F0 | 	shl	result2, #2
0aa20     03 00 00 FF 
0aa24     04 E4 85 F1 | 	sub	objptr, ##1540
0aa28     F2 FC 01 F1 | 	add	result2, objptr
0aa2c     04 FC 05 F1 | 	add	result2, #4
0aa30     FE FC 09 FB | 	rdlong	result2, result2 wz
0aa34     3E 00 00 FF 
0aa38     40 E4 85 F1 | 	sub	objptr, ##31808
0aa3c     C4 00 90 5D |  if_ne	jmp	#LR__0891
0aa40     41 00 00 FF 
0aa44     44 E4 05 F1 | 	add	objptr, ##33348
0aa48     F2 1E 02 FB | 	rdlong	local01, objptr
0aa4c     0F 13 02 F6 | 	mov	arg01, local01
0aa50     01 12 66 F0 | 	shl	arg01, #1
0aa54     0F 13 02 F1 | 	add	arg01, local01
0aa58     02 12 66 F0 | 	shl	arg01, #2
0aa5c     03 00 00 FF 
0aa60     04 E4 85 F1 | 	sub	objptr, ##1540
0aa64     F2 12 02 F1 | 	add	arg01, objptr
0aa68     09 1F 02 FB | 	rdlong	local01, arg01
0aa6c     04 1E 66 F0 | 	shl	local01, #4
0aa70     32 00 00 FF 
0aa74     74 E4 85 F1 | 	sub	objptr, ##25716
0aa78     F2 1E 02 F1 | 	add	local01, objptr
0aa7c     04 1E 06 F1 | 	add	local01, #4
0aa80     0F 13 02 FB | 	rdlong	arg01, local01
0aa84     04 1E 06 F1 | 	add	local01, #4
0aa88     0F 1F 02 FB | 	rdlong	local01, local01
0aa8c     A7 12 62 FC | 	wrlong	arg01, fp
0aa90     04 4E 05 F1 | 	add	fp, #4
0aa94     A7 1E 62 FC | 	wrlong	local01, fp
0aa98     35 00 00 FF 
0aa9c     78 E4 05 F1 | 	add	objptr, ##27256
0aaa0     F2 1E 02 FB | 	rdlong	local01, objptr
0aaa4     0F 13 02 F6 | 	mov	arg01, local01
0aaa8     01 12 66 F0 | 	shl	arg01, #1
0aaac     0F 13 02 F1 | 	add	arg01, local01
0aab0     02 12 66 F0 | 	shl	arg01, #2
0aab4     03 00 00 FF 
0aab8     04 E4 85 F1 | 	sub	objptr, ##1540
0aabc     F2 12 02 F1 | 	add	arg01, objptr
0aac0     09 1F 02 FB | 	rdlong	local01, arg01
0aac4     04 1E 66 F0 | 	shl	local01, #4
0aac8     32 00 00 FF 
0aacc     74 E4 85 F1 | 	sub	objptr, ##25716
0aad0     F2 1E 02 F1 | 	add	local01, objptr
0aad4     0C 1E 06 F1 | 	add	local01, #12
0aad8     0F 1F 02 FB | 	rdlong	local01, local01
0aadc     04 4E 05 F1 | 	add	fp, #4
0aae0     A7 1E 62 FC | 	wrlong	local01, fp
0aae4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0aae4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0aae4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0aae4     08 4E 85 F1 | 	sub	fp, #8
0aae8     00 1F 16 F2 | 	cmp	local01, #256 wc
0aaec     0B 00 00 FF 
0aaf0     CC E5 85 F1 | 	sub	objptr, ##6092
0aaf4     0C 00 90 3D |  if_ae	jmp	#LR__0890
0aaf8     A7 12 02 F6 | 	mov	arg01, fp
0aafc     CC DC BF FD | 	call	#_push
0ab00     00 0C 90 FD | 	jmp	#LR__0912
0ab04                 | LR__0890
0ab04                 | LR__0891
0ab04     41 00 00 FF 
0ab08     44 E4 05 F1 | 	add	objptr, ##33348
0ab0c     F2 18 02 FB | 	rdlong	arg04, objptr
0ab10     0C 17 02 F6 | 	mov	arg03, arg04
0ab14     01 16 66 F0 | 	shl	arg03, #1
0ab18     0C 17 02 F1 | 	add	arg03, arg04
0ab1c     02 16 66 F0 | 	shl	arg03, #2
0ab20     03 00 00 FF 
0ab24     04 E4 85 F1 | 	sub	objptr, ##1540
0ab28     F2 16 02 F1 | 	add	arg03, objptr
0ab2c     0B 19 02 FB | 	rdlong	arg04, arg03
0ab30     04 18 66 F0 | 	shl	arg04, #4
0ab34     32 00 00 FF 
0ab38     74 E4 85 F1 | 	sub	objptr, ##25716
0ab3c     F2 18 02 F1 | 	add	arg04, objptr
0ab40     04 18 06 F1 | 	add	arg04, #4
0ab44     0C 13 02 FB | 	rdlong	arg01, arg04
0ab48     0C 4E 05 F1 | 	add	fp, #12
0ab4c     A7 12 62 FC | 	wrlong	arg01, fp
0ab50     0C 4E 85 F1 | 	sub	fp, #12
0ab54     0B 00 00 FF 
0ab58     CC E5 85 F1 | 	sub	objptr, ##6092
0ab5c     18 76 B0 FD | 	call	#_pslpeek
0ab60     FD FA 31 F9 | 	getword	result1, result1, #0
0ab64     10 4E 05 F1 | 	add	fp, #16
0ab68     A7 FA 61 FC | 	wrlong	result1, fp
0ab6c     41 00 00 FF 
0ab70     44 E4 05 F1 | 	add	objptr, ##33348
0ab74     F2 18 02 FB | 	rdlong	arg04, objptr
0ab78     0C 17 02 F6 | 	mov	arg03, arg04
0ab7c     01 16 66 F0 | 	shl	arg03, #1
0ab80     0C 17 02 F1 | 	add	arg03, arg04
0ab84     02 16 66 F0 | 	shl	arg03, #2
0ab88     03 00 00 FF 
0ab8c     04 E4 85 F1 | 	sub	objptr, ##1540
0ab90     F2 16 02 F1 | 	add	arg03, objptr
0ab94     04 16 06 F1 | 	add	arg03, #4
0ab98     0B 19 02 FB | 	rdlong	arg04, arg03
0ab9c     04 4E 05 F1 | 	add	fp, #4
0aba0     A7 18 62 FC | 	wrlong	arg04, fp
0aba4     14 4E 85 F1 | 	sub	fp, #20
0aba8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) :print "in do_getvar numpar=",numpar
0aba8     00 12 06 F6 | 	mov	arg01, #0
0abac     3E 00 00 FF 
0abb0     40 E4 85 F1 | 	sub	objptr, ##31808
0abb4     AC FE B0 FD | 	call	#__system___getiolock_0348
0abb8     FD 12 02 F6 | 	mov	arg01, result1
0abbc     F0 A8 B0 FD | 	call	#__system___lockmem
0abc0     25 01 00 FF 
0abc4     66 14 06 F6 | 	mov	arg02, ##@LR__4312
0abc8     00 12 06 F6 | 	mov	arg01, #0
0abcc     00 16 06 F6 | 	mov	arg03, #0
0abd0     D0 B5 B0 FD | 	call	#__system___basic_print_string
0abd4     00 12 06 F6 | 	mov	arg01, #0
0abd8     09 14 06 F6 | 	mov	arg02, #9
0abdc     00 16 06 F6 | 	mov	arg03, #0
0abe0     68 B5 B0 FD | 	call	#__system___basic_print_char
0abe4     14 4E 05 F1 | 	add	fp, #20
0abe8     A7 14 02 FB | 	rdlong	arg02, fp
0abec     14 4E 85 F1 | 	sub	fp, #20
0abf0     00 12 06 F6 | 	mov	arg01, #0
0abf4     00 16 06 F6 | 	mov	arg03, #0
0abf8     0A 18 06 F6 | 	mov	arg04, #10
0abfc     28 B6 B0 FD | 	call	#__system___basic_print_unsigned
0ac00     00 12 06 F6 | 	mov	arg01, #0
0ac04     0A 14 06 F6 | 	mov	arg02, #10
0ac08     00 16 06 F6 | 	mov	arg03, #0
0ac0c     3C B5 B0 FD | 	call	#__system___basic_print_char
0ac10     00 12 06 F6 | 	mov	arg01, #0
0ac14     4C FE B0 FD | 	call	#__system___getiolock_0348
0ac18     FD 00 68 FC | 	wrlong	#0, result1
0ac1c     0C 4E 05 F1 | 	add	fp, #12
0ac20     A7 12 02 FB | 	rdlong	arg01, fp
0ac24     0C 4E 85 F1 | 	sub	fp, #12
0ac28     02 12 06 F1 | 	add	arg01, #2
0ac2c     F0 74 B0 FD | 	call	#_pspeek
0ac30     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ac34     18 4E 05 F1 | 	add	fp, #24
0ac38     A7 FA 61 FC | 	wrlong	result1, fp
0ac3c     0C 4E 85 F1 | 	sub	fp, #12
0ac40     A7 12 02 FB | 	rdlong	arg01, fp
0ac44     0C 4E 85 F1 | 	sub	fp, #12
0ac48     04 12 06 F1 | 	add	arg01, #4
0ac4c     28 75 B0 FD | 	call	#_pslpeek
0ac50     1C 4E 05 F1 | 	add	fp, #28
0ac54     A7 FA 61 FC | 	wrlong	result1, fp
0ac58     10 4E 85 F1 | 	sub	fp, #16
0ac5c     A7 12 02 FB | 	rdlong	arg01, fp
0ac60     0C 4E 85 F1 | 	sub	fp, #12
0ac64     08 12 06 F1 | 	add	arg01, #8
0ac68     0C 75 B0 FD | 	call	#_pslpeek
0ac6c     20 4E 05 F1 | 	add	fp, #32
0ac70     A7 FA 61 FC | 	wrlong	result1, fp
0ac74     14 4E 85 F1 | 	sub	fp, #20
0ac78     A7 12 02 FB | 	rdlong	arg01, fp
0ac7c     0C 4E 85 F1 | 	sub	fp, #12
0ac80     0C 12 06 F1 | 	add	arg01, #12
0ac84     F0 74 B0 FD | 	call	#_pslpeek
0ac88     24 4E 05 F1 | 	add	fp, #36
0ac8c     A7 FA 61 FC | 	wrlong	result1, fp
0ac90                 | ' esize=pspeek(arrptr+2)
0ac90                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ac90                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ac90                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ac90                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult :print "in do_getvar popped i3=",i3 else i3=0 : print "in do_getvar no i3 popped"
0ac90     10 4E 85 F1 | 	sub	fp, #16
0ac94     A7 18 02 FB | 	rdlong	arg04, fp
0ac98     14 4E 85 F1 | 	sub	fp, #20
0ac9c     03 18 16 F2 | 	cmp	arg04, #3 wc
0aca0     9C 00 90 CD |  if_b	jmp	#LR__0892
0aca4     8C DA BF FD | 	call	#_pop
0aca8     A7 FA 61 FC | 	wrlong	result1, fp
0acac     04 4E 05 F1 | 	add	fp, #4
0acb0     A7 FC 61 FC | 	wrlong	result2, fp
0acb4     04 4E 05 F1 | 	add	fp, #4
0acb8     A7 FE 61 FC | 	wrlong	result3, fp
0acbc     08 4E 85 F1 | 	sub	fp, #8
0acc0     A7 18 02 FB | 	rdlong	arg04, fp
0acc4     30 4E 05 F1 | 	add	fp, #48
0acc8     A7 18 62 FC | 	wrlong	arg04, fp
0accc     30 4E 85 F1 | 	sub	fp, #48
0acd0     00 12 06 F6 | 	mov	arg01, #0
0acd4     8C FD B0 FD | 	call	#__system___getiolock_0348
0acd8     FD 12 02 F6 | 	mov	arg01, result1
0acdc     D0 A7 B0 FD | 	call	#__system___lockmem
0ace0     25 01 00 FF 
0ace4     7B 14 06 F6 | 	mov	arg02, ##@LR__4313
0ace8     00 12 06 F6 | 	mov	arg01, #0
0acec     00 16 06 F6 | 	mov	arg03, #0
0acf0     B0 B4 B0 FD | 	call	#__system___basic_print_string
0acf4     00 12 06 F6 | 	mov	arg01, #0
0acf8     09 14 06 F6 | 	mov	arg02, #9
0acfc     00 16 06 F6 | 	mov	arg03, #0
0ad00     48 B4 B0 FD | 	call	#__system___basic_print_char
0ad04     30 4E 05 F1 | 	add	fp, #48
0ad08     A7 14 02 FB | 	rdlong	arg02, fp
0ad0c     30 4E 85 F1 | 	sub	fp, #48
0ad10     00 12 06 F6 | 	mov	arg01, #0
0ad14     00 16 06 F6 | 	mov	arg03, #0
0ad18     0A 18 06 F6 | 	mov	arg04, #10
0ad1c     08 B5 B0 FD | 	call	#__system___basic_print_unsigned
0ad20     00 12 06 F6 | 	mov	arg01, #0
0ad24     0A 14 06 F6 | 	mov	arg02, #10
0ad28     00 16 06 F6 | 	mov	arg03, #0
0ad2c     1C B4 B0 FD | 	call	#__system___basic_print_char
0ad30     00 12 06 F6 | 	mov	arg01, #0
0ad34     2C FD B0 FD | 	call	#__system___getiolock_0348
0ad38     FD 00 68 FC | 	wrlong	#0, result1
0ad3c     4C 00 90 FD | 	jmp	#LR__0893
0ad40                 | LR__0892
0ad40     30 4E 05 F1 | 	add	fp, #48
0ad44     A7 00 68 FC | 	wrlong	#0, fp
0ad48     30 4E 85 F1 | 	sub	fp, #48
0ad4c     00 12 06 F6 | 	mov	arg01, #0
0ad50     10 FD B0 FD | 	call	#__system___getiolock_0348
0ad54     FD 12 02 F6 | 	mov	arg01, result1
0ad58     54 A7 B0 FD | 	call	#__system___lockmem
0ad5c     25 01 00 FF 
0ad60     93 14 06 F6 | 	mov	arg02, ##@LR__4314
0ad64     00 12 06 F6 | 	mov	arg01, #0
0ad68     00 16 06 F6 | 	mov	arg03, #0
0ad6c     34 B4 B0 FD | 	call	#__system___basic_print_string
0ad70     00 12 06 F6 | 	mov	arg01, #0
0ad74     0A 14 06 F6 | 	mov	arg02, #10
0ad78     00 16 06 F6 | 	mov	arg03, #0
0ad7c     CC B3 B0 FD | 	call	#__system___basic_print_char
0ad80     00 12 06 F6 | 	mov	arg01, #0
0ad84     DC FC B0 FD | 	call	#__system___getiolock_0348
0ad88     FD 00 68 FC | 	wrlong	#0, result1
0ad8c                 | LR__0893
0ad8c                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult :print "in do_getvar popped i2=",i2 else i2=0 : print "in do_getvar no i2 popped"
0ad8c     14 4E 05 F1 | 	add	fp, #20
0ad90     A7 18 02 FB | 	rdlong	arg04, fp
0ad94     14 4E 85 F1 | 	sub	fp, #20
0ad98     02 18 16 F2 | 	cmp	arg04, #2 wc
0ad9c     9C 00 90 CD |  if_b	jmp	#LR__0894
0ada0     90 D9 BF FD | 	call	#_pop
0ada4     A7 FA 61 FC | 	wrlong	result1, fp
0ada8     04 4E 05 F1 | 	add	fp, #4
0adac     A7 FC 61 FC | 	wrlong	result2, fp
0adb0     04 4E 05 F1 | 	add	fp, #4
0adb4     A7 FE 61 FC | 	wrlong	result3, fp
0adb8     08 4E 85 F1 | 	sub	fp, #8
0adbc     A7 18 02 FB | 	rdlong	arg04, fp
0adc0     2C 4E 05 F1 | 	add	fp, #44
0adc4     A7 18 62 FC | 	wrlong	arg04, fp
0adc8     2C 4E 85 F1 | 	sub	fp, #44
0adcc     00 12 06 F6 | 	mov	arg01, #0
0add0     90 FC B0 FD | 	call	#__system___getiolock_0348
0add4     FD 12 02 F6 | 	mov	arg01, result1
0add8     D4 A6 B0 FD | 	call	#__system___lockmem
0addc     25 01 00 FF 
0ade0     AD 14 06 F6 | 	mov	arg02, ##@LR__4315
0ade4     00 12 06 F6 | 	mov	arg01, #0
0ade8     00 16 06 F6 | 	mov	arg03, #0
0adec     B4 B3 B0 FD | 	call	#__system___basic_print_string
0adf0     00 12 06 F6 | 	mov	arg01, #0
0adf4     09 14 06 F6 | 	mov	arg02, #9
0adf8     00 16 06 F6 | 	mov	arg03, #0
0adfc     4C B3 B0 FD | 	call	#__system___basic_print_char
0ae00     2C 4E 05 F1 | 	add	fp, #44
0ae04     A7 14 02 FB | 	rdlong	arg02, fp
0ae08     2C 4E 85 F1 | 	sub	fp, #44
0ae0c     00 12 06 F6 | 	mov	arg01, #0
0ae10     00 16 06 F6 | 	mov	arg03, #0
0ae14     0A 18 06 F6 | 	mov	arg04, #10
0ae18     0C B4 B0 FD | 	call	#__system___basic_print_unsigned
0ae1c     00 12 06 F6 | 	mov	arg01, #0
0ae20     0A 14 06 F6 | 	mov	arg02, #10
0ae24     00 16 06 F6 | 	mov	arg03, #0
0ae28     20 B3 B0 FD | 	call	#__system___basic_print_char
0ae2c     00 12 06 F6 | 	mov	arg01, #0
0ae30     30 FC B0 FD | 	call	#__system___getiolock_0348
0ae34     FD 00 68 FC | 	wrlong	#0, result1
0ae38     4C 00 90 FD | 	jmp	#LR__0895
0ae3c                 | LR__0894
0ae3c     2C 4E 05 F1 | 	add	fp, #44
0ae40     A7 00 68 FC | 	wrlong	#0, fp
0ae44     2C 4E 85 F1 | 	sub	fp, #44
0ae48     00 12 06 F6 | 	mov	arg01, #0
0ae4c     14 FC B0 FD | 	call	#__system___getiolock_0348
0ae50     FD 12 02 F6 | 	mov	arg01, result1
0ae54     58 A6 B0 FD | 	call	#__system___lockmem
0ae58     25 01 00 FF 
0ae5c     C5 14 06 F6 | 	mov	arg02, ##@LR__4316
0ae60     00 12 06 F6 | 	mov	arg01, #0
0ae64     00 16 06 F6 | 	mov	arg03, #0
0ae68     38 B3 B0 FD | 	call	#__system___basic_print_string
0ae6c     00 12 06 F6 | 	mov	arg01, #0
0ae70     0A 14 06 F6 | 	mov	arg02, #10
0ae74     00 16 06 F6 | 	mov	arg03, #0
0ae78     D0 B2 B0 FD | 	call	#__system___basic_print_char
0ae7c     00 12 06 F6 | 	mov	arg01, #0
0ae80     E0 FB B0 FD | 	call	#__system___getiolock_0348
0ae84     FD 00 68 FC | 	wrlong	#0, result1
0ae88                 | LR__0895
0ae88                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult :print "in do_getvar popped i1=",i1 else i1=0 : print "in do_getvar no i1 popped"
0ae88     14 4E 05 F1 | 	add	fp, #20
0ae8c     A7 18 02 FB | 	rdlong	arg04, fp
0ae90     14 4E 85 F1 | 	sub	fp, #20
0ae94     01 18 16 F2 | 	cmp	arg04, #1 wc
0ae98     9C 00 90 CD |  if_b	jmp	#LR__0896
0ae9c     94 D8 BF FD | 	call	#_pop
0aea0     A7 FA 61 FC | 	wrlong	result1, fp
0aea4     04 4E 05 F1 | 	add	fp, #4
0aea8     A7 FC 61 FC | 	wrlong	result2, fp
0aeac     04 4E 05 F1 | 	add	fp, #4
0aeb0     A7 FE 61 FC | 	wrlong	result3, fp
0aeb4     08 4E 85 F1 | 	sub	fp, #8
0aeb8     A7 18 02 FB | 	rdlong	arg04, fp
0aebc     28 4E 05 F1 | 	add	fp, #40
0aec0     A7 18 62 FC | 	wrlong	arg04, fp
0aec4     28 4E 85 F1 | 	sub	fp, #40
0aec8     00 12 06 F6 | 	mov	arg01, #0
0aecc     94 FB B0 FD | 	call	#__system___getiolock_0348
0aed0     FD 12 02 F6 | 	mov	arg01, result1
0aed4     D8 A5 B0 FD | 	call	#__system___lockmem
0aed8     25 01 00 FF 
0aedc     DF 14 06 F6 | 	mov	arg02, ##@LR__4317
0aee0     00 12 06 F6 | 	mov	arg01, #0
0aee4     00 16 06 F6 | 	mov	arg03, #0
0aee8     B8 B2 B0 FD | 	call	#__system___basic_print_string
0aeec     00 12 06 F6 | 	mov	arg01, #0
0aef0     09 14 06 F6 | 	mov	arg02, #9
0aef4     00 16 06 F6 | 	mov	arg03, #0
0aef8     50 B2 B0 FD | 	call	#__system___basic_print_char
0aefc     28 4E 05 F1 | 	add	fp, #40
0af00     A7 14 02 FB | 	rdlong	arg02, fp
0af04     28 4E 85 F1 | 	sub	fp, #40
0af08     00 12 06 F6 | 	mov	arg01, #0
0af0c     00 16 06 F6 | 	mov	arg03, #0
0af10     0A 18 06 F6 | 	mov	arg04, #10
0af14     10 B3 B0 FD | 	call	#__system___basic_print_unsigned
0af18     00 12 06 F6 | 	mov	arg01, #0
0af1c     0A 14 06 F6 | 	mov	arg02, #10
0af20     00 16 06 F6 | 	mov	arg03, #0
0af24     24 B2 B0 FD | 	call	#__system___basic_print_char
0af28     00 12 06 F6 | 	mov	arg01, #0
0af2c     34 FB B0 FD | 	call	#__system___getiolock_0348
0af30     FD 00 68 FC | 	wrlong	#0, result1
0af34     4C 00 90 FD | 	jmp	#LR__0897
0af38                 | LR__0896
0af38     28 4E 05 F1 | 	add	fp, #40
0af3c     A7 00 68 FC | 	wrlong	#0, fp
0af40     28 4E 85 F1 | 	sub	fp, #40
0af44     00 12 06 F6 | 	mov	arg01, #0
0af48     18 FB B0 FD | 	call	#__system___getiolock_0348
0af4c     FD 12 02 F6 | 	mov	arg01, result1
0af50     5C A5 B0 FD | 	call	#__system___lockmem
0af54     25 01 00 FF 
0af58     F7 14 06 F6 | 	mov	arg02, ##@LR__4318
0af5c     00 12 06 F6 | 	mov	arg01, #0
0af60     00 16 06 F6 | 	mov	arg03, #0
0af64     3C B2 B0 FD | 	call	#__system___basic_print_string
0af68     00 12 06 F6 | 	mov	arg01, #0
0af6c     0A 14 06 F6 | 	mov	arg02, #10
0af70     00 16 06 F6 | 	mov	arg03, #0
0af74     D4 B1 B0 FD | 	call	#__system___basic_print_char
0af78     00 12 06 F6 | 	mov	arg01, #0
0af7c     E4 FA B0 FD | 	call	#__system___getiolock_0348
0af80     FD 00 68 FC | 	wrlong	#0, result1
0af84                 | LR__0897
0af84                 | ' print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0af84     00 12 06 F6 | 	mov	arg01, #0
0af88     D8 FA B0 FD | 	call	#__system___getiolock_0348
0af8c     FD 12 02 F6 | 	mov	arg01, result1
0af90     1C A5 B0 FD | 	call	#__system___lockmem
0af94     25 01 00 FF 
0af98     11 15 06 F6 | 	mov	arg02, ##@LR__4319
0af9c     00 12 06 F6 | 	mov	arg01, #0
0afa0     00 16 06 F6 | 	mov	arg03, #0
0afa4     FC B1 B0 FD | 	call	#__system___basic_print_string
0afa8     00 12 06 F6 | 	mov	arg01, #0
0afac     09 14 06 F6 | 	mov	arg02, #9
0afb0     00 16 06 F6 | 	mov	arg03, #0
0afb4     94 B1 B0 FD | 	call	#__system___basic_print_char
0afb8     1C 4E 05 F1 | 	add	fp, #28
0afbc     A7 14 02 FB | 	rdlong	arg02, fp
0afc0     1C 4E 85 F1 | 	sub	fp, #28
0afc4     00 12 06 F6 | 	mov	arg01, #0
0afc8     00 16 06 F6 | 	mov	arg03, #0
0afcc     0A 18 06 F6 | 	mov	arg04, #10
0afd0     54 B2 B0 FD | 	call	#__system___basic_print_unsigned
0afd4     00 12 06 F6 | 	mov	arg01, #0
0afd8     09 14 06 F6 | 	mov	arg02, #9
0afdc     00 16 06 F6 | 	mov	arg03, #0
0afe0     68 B1 B0 FD | 	call	#__system___basic_print_char
0afe4     25 01 00 FF 
0afe8     17 15 06 F6 | 	mov	arg02, ##@LR__4320
0afec     00 12 06 F6 | 	mov	arg01, #0
0aff0     00 16 06 F6 | 	mov	arg03, #0
0aff4     AC B1 B0 FD | 	call	#__system___basic_print_string
0aff8     00 12 06 F6 | 	mov	arg01, #0
0affc     09 14 06 F6 | 	mov	arg02, #9
0b000     00 16 06 F6 | 	mov	arg03, #0
0b004     44 B1 B0 FD | 	call	#__system___basic_print_char
0b008     20 4E 05 F1 | 	add	fp, #32
0b00c     A7 14 02 FB | 	rdlong	arg02, fp
0b010     20 4E 85 F1 | 	sub	fp, #32
0b014     00 12 06 F6 | 	mov	arg01, #0
0b018     00 16 06 F6 | 	mov	arg03, #0
0b01c     0A 18 06 F6 | 	mov	arg04, #10
0b020     04 B2 B0 FD | 	call	#__system___basic_print_unsigned
0b024     00 12 06 F6 | 	mov	arg01, #0
0b028     09 14 06 F6 | 	mov	arg02, #9
0b02c     00 16 06 F6 | 	mov	arg03, #0
0b030     18 B1 B0 FD | 	call	#__system___basic_print_char
0b034     25 01 00 FF 
0b038     1D 15 06 F6 | 	mov	arg02, ##@LR__4321
0b03c     00 12 06 F6 | 	mov	arg01, #0
0b040     00 16 06 F6 | 	mov	arg03, #0
0b044     5C B1 B0 FD | 	call	#__system___basic_print_string
0b048     00 12 06 F6 | 	mov	arg01, #0
0b04c     09 14 06 F6 | 	mov	arg02, #9
0b050     00 16 06 F6 | 	mov	arg03, #0
0b054     F4 B0 B0 FD | 	call	#__system___basic_print_char
0b058     24 4E 05 F1 | 	add	fp, #36
0b05c     A7 14 02 FB | 	rdlong	arg02, fp
0b060     24 4E 85 F1 | 	sub	fp, #36
0b064     00 12 06 F6 | 	mov	arg01, #0
0b068     00 16 06 F6 | 	mov	arg03, #0
0b06c     0A 18 06 F6 | 	mov	arg04, #10
0b070     B4 B1 B0 FD | 	call	#__system___basic_print_unsigned
0b074     00 12 06 F6 | 	mov	arg01, #0
0b078     09 14 06 F6 | 	mov	arg02, #9
0b07c     00 16 06 F6 | 	mov	arg03, #0
0b080     C8 B0 B0 FD | 	call	#__system___basic_print_char
0b084     25 01 00 FF 
0b088     23 15 06 F6 | 	mov	arg02, ##@LR__4322
0b08c     00 12 06 F6 | 	mov	arg01, #0
0b090     00 16 06 F6 | 	mov	arg03, #0
0b094     0C B1 B0 FD | 	call	#__system___basic_print_string
0b098     00 12 06 F6 | 	mov	arg01, #0
0b09c     09 14 06 F6 | 	mov	arg02, #9
0b0a0     00 16 06 F6 | 	mov	arg03, #0
0b0a4     A4 B0 B0 FD | 	call	#__system___basic_print_char
0b0a8     18 4E 05 F1 | 	add	fp, #24
0b0ac     A7 14 02 FB | 	rdlong	arg02, fp
0b0b0     18 4E 85 F1 | 	sub	fp, #24
0b0b4     00 12 06 F6 | 	mov	arg01, #0
0b0b8     00 16 06 F6 | 	mov	arg03, #0
0b0bc     0A 18 06 F6 | 	mov	arg04, #10
0b0c0     64 B1 B0 FD | 	call	#__system___basic_print_unsigned
0b0c4     00 12 06 F6 | 	mov	arg01, #0
0b0c8     09 14 06 F6 | 	mov	arg02, #9
0b0cc     00 16 06 F6 | 	mov	arg03, #0
0b0d0     78 B0 B0 FD | 	call	#__system___basic_print_char
0b0d4     25 01 00 FF 
0b0d8     2A 15 06 F6 | 	mov	arg02, ##@LR__4323
0b0dc     00 12 06 F6 | 	mov	arg01, #0
0b0e0     00 16 06 F6 | 	mov	arg03, #0
0b0e4     BC B0 B0 FD | 	call	#__system___basic_print_string
0b0e8     00 12 06 F6 | 	mov	arg01, #0
0b0ec     09 14 06 F6 | 	mov	arg02, #9
0b0f0     00 16 06 F6 | 	mov	arg03, #0
0b0f4     54 B0 B0 FD | 	call	#__system___basic_print_char
0b0f8     28 4E 05 F1 | 	add	fp, #40
0b0fc     A7 14 02 FB | 	rdlong	arg02, fp
0b100     28 4E 85 F1 | 	sub	fp, #40
0b104     00 12 06 F6 | 	mov	arg01, #0
0b108     00 16 06 F6 | 	mov	arg03, #0
0b10c     0A 18 06 F6 | 	mov	arg04, #10
0b110     14 B1 B0 FD | 	call	#__system___basic_print_unsigned
0b114     00 12 06 F6 | 	mov	arg01, #0
0b118     09 14 06 F6 | 	mov	arg02, #9
0b11c     00 16 06 F6 | 	mov	arg03, #0
0b120     28 B0 B0 FD | 	call	#__system___basic_print_char
0b124     25 01 00 FF 
0b128     2E 15 06 F6 | 	mov	arg02, ##@LR__4324
0b12c     00 12 06 F6 | 	mov	arg01, #0
0b130     00 16 06 F6 | 	mov	arg03, #0
0b134     6C B0 B0 FD | 	call	#__system___basic_print_string
0b138     00 12 06 F6 | 	mov	arg01, #0
0b13c     09 14 06 F6 | 	mov	arg02, #9
0b140     00 16 06 F6 | 	mov	arg03, #0
0b144     04 B0 B0 FD | 	call	#__system___basic_print_char
0b148     2C 4E 05 F1 | 	add	fp, #44
0b14c     A7 14 02 FB | 	rdlong	arg02, fp
0b150     2C 4E 85 F1 | 	sub	fp, #44
0b154     00 12 06 F6 | 	mov	arg01, #0
0b158     00 16 06 F6 | 	mov	arg03, #0
0b15c     0A 18 06 F6 | 	mov	arg04, #10
0b160     C4 B0 B0 FD | 	call	#__system___basic_print_unsigned
0b164     00 12 06 F6 | 	mov	arg01, #0
0b168     09 14 06 F6 | 	mov	arg02, #9
0b16c     00 16 06 F6 | 	mov	arg03, #0
0b170     D8 AF B0 FD | 	call	#__system___basic_print_char
0b174     25 01 00 FF 
0b178     32 15 06 F6 | 	mov	arg02, ##@LR__4325
0b17c     00 12 06 F6 | 	mov	arg01, #0
0b180     00 16 06 F6 | 	mov	arg03, #0
0b184     1C B0 B0 FD | 	call	#__system___basic_print_string
0b188     00 12 06 F6 | 	mov	arg01, #0
0b18c     09 14 06 F6 | 	mov	arg02, #9
0b190     00 16 06 F6 | 	mov	arg03, #0
0b194     B4 AF B0 FD | 	call	#__system___basic_print_char
0b198     30 4E 05 F1 | 	add	fp, #48
0b19c     A7 14 02 FB | 	rdlong	arg02, fp
0b1a0     30 4E 85 F1 | 	sub	fp, #48
0b1a4     00 12 06 F6 | 	mov	arg01, #0
0b1a8     00 16 06 F6 | 	mov	arg03, #0
0b1ac     0A 18 06 F6 | 	mov	arg04, #10
0b1b0     74 B0 B0 FD | 	call	#__system___basic_print_unsigned
0b1b4     00 12 06 F6 | 	mov	arg01, #0
0b1b8     0A 14 06 F6 | 	mov	arg02, #10
0b1bc     00 16 06 F6 | 	mov	arg03, #0
0b1c0     88 AF B0 FD | 	call	#__system___basic_print_char
0b1c4     00 12 06 F6 | 	mov	arg01, #0
0b1c8     98 F8 B0 FD | 	call	#__system___getiolock_0348
0b1cc     FD 00 68 FC | 	wrlong	#0, result1
0b1d0     0C 4E 05 F1 | 	add	fp, #12
0b1d4     A7 18 02 FB | 	rdlong	arg04, fp
0b1d8     1C 4E 05 F1 | 	add	fp, #28
0b1dc     A7 20 02 FB | 	rdlong	local02, fp
0b1e0     04 4E 05 F1 | 	add	fp, #4
0b1e4     A7 16 02 FB | 	rdlong	arg03, fp
0b1e8     10 4E 85 F1 | 	sub	fp, #16
0b1ec     A7 14 02 FB | 	rdlong	arg02, fp
0b1f0     0A 17 02 FD | 	qmul	arg03, arg02
0b1f4     10 18 06 F1 | 	add	arg04, #16
0b1f8     14 4E 05 F1 | 	add	fp, #20
0b1fc     A7 16 02 FB | 	rdlong	arg03, fp
0b200     18 12 62 FD | 	getqx	arg01
0b204     0A 17 02 FD | 	qmul	arg03, arg02
0b208     09 21 02 F1 | 	add	local02, arg01
0b20c     10 4E 85 F1 | 	sub	fp, #16
0b210     A7 16 02 FB | 	rdlong	arg03, fp
0b214     18 FC 61 FD | 	getqx	result2
0b218     0B FD 01 FD | 	qmul	result2, arg03
0b21c     08 4E 85 F1 | 	sub	fp, #8
0b220     A7 16 02 FB | 	rdlong	arg03, fp
0b224     18 FC 61 FD | 	getqx	result2
0b228     FE 20 02 F1 | 	add	local02, result2
0b22c     0B 21 02 FD | 	qmul	local02, arg03
0b230     1C 4E 05 F1 | 	add	fp, #28
0b234                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize : print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0b234     00 12 06 F6 | 	mov	arg01, #0
0b238     18 FC 61 FD | 	getqx	result2
0b23c     FE 18 02 F1 | 	add	arg04, result2
0b240     A7 18 62 FC | 	wrlong	arg04, fp
0b244     34 4E 85 F1 | 	sub	fp, #52
0b248     18 F8 B0 FD | 	call	#__system___getiolock_0348
0b24c     FD 12 02 F6 | 	mov	arg01, result1
0b250     5C A2 B0 FD | 	call	#__system___lockmem
0b254     25 01 00 FF 
0b258     36 15 06 F6 | 	mov	arg02, ##@LR__4326
0b25c     00 12 06 F6 | 	mov	arg01, #0
0b260     00 16 06 F6 | 	mov	arg03, #0
0b264     3C AF B0 FD | 	call	#__system___basic_print_string
0b268     00 12 06 F6 | 	mov	arg01, #0
0b26c     09 14 06 F6 | 	mov	arg02, #9
0b270     00 16 06 F6 | 	mov	arg03, #0
0b274     D4 AE B0 FD | 	call	#__system___basic_print_char
0b278     0C 4E 05 F1 | 	add	fp, #12
0b27c     A7 14 02 FB | 	rdlong	arg02, fp
0b280     0C 4E 85 F1 | 	sub	fp, #12
0b284     00 12 06 F6 | 	mov	arg01, #0
0b288     00 16 06 F6 | 	mov	arg03, #0
0b28c     0A 18 06 F6 | 	mov	arg04, #10
0b290     94 AF B0 FD | 	call	#__system___basic_print_unsigned
0b294     00 12 06 F6 | 	mov	arg01, #0
0b298     09 14 06 F6 | 	mov	arg02, #9
0b29c     00 16 06 F6 | 	mov	arg03, #0
0b2a0     A8 AE B0 FD | 	call	#__system___basic_print_char
0b2a4     25 01 00 FF 
0b2a8     3E 15 06 F6 | 	mov	arg02, ##@LR__4327
0b2ac     00 12 06 F6 | 	mov	arg01, #0
0b2b0     00 16 06 F6 | 	mov	arg03, #0
0b2b4     EC AE B0 FD | 	call	#__system___basic_print_string
0b2b8     00 12 06 F6 | 	mov	arg01, #0
0b2bc     09 14 06 F6 | 	mov	arg02, #9
0b2c0     00 16 06 F6 | 	mov	arg03, #0
0b2c4     84 AE B0 FD | 	call	#__system___basic_print_char
0b2c8     34 4E 05 F1 | 	add	fp, #52
0b2cc     A7 14 02 FB | 	rdlong	arg02, fp
0b2d0     34 4E 85 F1 | 	sub	fp, #52
0b2d4     00 12 06 F6 | 	mov	arg01, #0
0b2d8     00 16 06 F6 | 	mov	arg03, #0
0b2dc     0A 18 06 F6 | 	mov	arg04, #10
0b2e0     44 AF B0 FD | 	call	#__system___basic_print_unsigned
0b2e4     00 12 06 F6 | 	mov	arg01, #0
0b2e8     09 14 06 F6 | 	mov	arg02, #9
0b2ec     00 16 06 F6 | 	mov	arg03, #0
0b2f0     58 AE B0 FD | 	call	#__system___basic_print_char
0b2f4     25 01 00 FF 
0b2f8     46 15 06 F6 | 	mov	arg02, ##@LR__4328
0b2fc     00 12 06 F6 | 	mov	arg01, #0
0b300     00 16 06 F6 | 	mov	arg03, #0
0b304     9C AE B0 FD | 	call	#__system___basic_print_string
0b308     00 12 06 F6 | 	mov	arg01, #0
0b30c     09 14 06 F6 | 	mov	arg02, #9
0b310     00 16 06 F6 | 	mov	arg03, #0
0b314     34 AE B0 FD | 	call	#__system___basic_print_char
0b318     52 00 00 FF 
0b31c     3C E4 05 F1 | 	add	objptr, ##42044
0b320     F2 14 02 FB | 	rdlong	arg02, objptr
0b324     52 00 00 FF 
0b328     3C E4 85 F1 | 	sub	objptr, ##42044
0b32c     00 12 06 F6 | 	mov	arg01, #0
0b330     00 16 06 F6 | 	mov	arg03, #0
0b334     0A 18 06 F6 | 	mov	arg04, #10
0b338     EC AE B0 FD | 	call	#__system___basic_print_unsigned
0b33c     00 12 06 F6 | 	mov	arg01, #0
0b340     09 14 06 F6 | 	mov	arg02, #9
0b344     00 16 06 F6 | 	mov	arg03, #0
0b348     00 AE B0 FD | 	call	#__system___basic_print_char
0b34c     25 01 00 FF 
0b350     4E 15 06 F6 | 	mov	arg02, ##@LR__4329
0b354     00 12 06 F6 | 	mov	arg01, #0
0b358     00 16 06 F6 | 	mov	arg03, #0
0b35c     44 AE B0 FD | 	call	#__system___basic_print_string
0b360     00 12 06 F6 | 	mov	arg01, #0
0b364     09 14 06 F6 | 	mov	arg02, #9
0b368     00 16 06 F6 | 	mov	arg03, #0
0b36c     DC AD B0 FD | 	call	#__system___basic_print_char
0b370     F2 14 02 FB | 	rdlong	arg02, objptr
0b374     00 12 06 F6 | 	mov	arg01, #0
0b378     00 16 06 F6 | 	mov	arg03, #0
0b37c     0A 18 06 F6 | 	mov	arg04, #10
0b380     64 AE B0 FD | 	call	#__system___basic_print_integer
0b384     00 12 06 F6 | 	mov	arg01, #0
0b388     0A 14 06 F6 | 	mov	arg02, #10
0b38c     00 16 06 F6 | 	mov	arg03, #0
0b390     B8 AD B0 FD | 	call	#__system___basic_print_char
0b394     00 12 06 F6 | 	mov	arg01, #0
0b398     C8 F6 B0 FD | 	call	#__system___getiolock_0348
0b39c     FD 00 68 FC | 	wrlong	#0, result1
0b3a0                 | ' 
0b3a0                 | ' select case vartype
0b3a0     10 4E 05 F1 | 	add	fp, #16
0b3a4     A7 22 02 FB | 	rdlong	local03, fp
0b3a8     10 4E 85 F1 | 	sub	fp, #16
0b3ac     00 23 86 F1 | 	sub	local03, #256
0b3b0     0C 22 26 F3 | 	fle	local03, #12
0b3b4     30 22 62 FD | 	jmprel	local03
0b3b8                 | LR__0898
0b3b8     30 00 90 FD | 	jmp	#LR__0899
0b3bc     C4 01 90 FD | 	jmp	#LR__0900
0b3c0     F8 01 90 FD | 	jmp	#LR__0901
0b3c4     18 02 90 FD | 	jmp	#LR__0902
0b3c8     54 02 90 FD | 	jmp	#LR__0903
0b3cc     74 02 90 FD | 	jmp	#LR__0904
0b3d0     90 02 90 FD | 	jmp	#LR__0905
0b3d4     AC 02 90 FD | 	jmp	#LR__0906
0b3d8     BC 02 90 FD | 	jmp	#LR__0907
0b3dc     CC 02 90 FD | 	jmp	#LR__0908
0b3e0     E8 02 90 FD | 	jmp	#LR__0909
0b3e4     F8 02 90 FD | 	jmp	#LR__0910
0b3e8     10 03 90 FD | 	jmp	#LR__0911
0b3ec                 | LR__0899
0b3ec     A7 12 02 F6 | 	mov	arg01, fp
0b3f0     34 4E 05 F1 | 	add	fp, #52
0b3f4     A7 14 02 FB | 	rdlong	arg02, fp
0b3f8     34 4E 85 F1 | 	sub	fp, #52
0b3fc     0C 16 06 F6 | 	mov	arg03, #12
0b400     0B 00 00 FF 
0b404     C0 E4 05 F1 | 	add	objptr, ##5824
0b408     B8 95 B0 FD | 	call	#_psram_spin2_read1
0b40c     0B 00 00 FF 
0b410     C0 E4 85 F1 | 	sub	objptr, ##5824
0b414     00 12 06 F6 | 	mov	arg01, #0
0b418     48 F6 B0 FD | 	call	#__system___getiolock_0348
0b41c     FD 12 02 F6 | 	mov	arg01, result1
0b420     8C A0 B0 FD | 	call	#__system___lockmem
0b424     25 01 00 FF 
0b428     56 15 06 F6 | 	mov	arg02, ##@LR__4330
0b42c     00 12 06 F6 | 	mov	arg01, #0
0b430     00 16 06 F6 | 	mov	arg03, #0
0b434     6C AD B0 FD | 	call	#__system___basic_print_string
0b438     00 12 06 F6 | 	mov	arg01, #0
0b43c     09 14 06 F6 | 	mov	arg02, #9
0b440     00 16 06 F6 | 	mov	arg03, #0
0b444     04 AD B0 FD | 	call	#__system___basic_print_char
0b448     08 4E 05 F1 | 	add	fp, #8
0b44c     A7 14 02 FB | 	rdlong	arg02, fp
0b450     08 4E 85 F1 | 	sub	fp, #8
0b454     00 12 06 F6 | 	mov	arg01, #0
0b458     00 16 06 F6 | 	mov	arg03, #0
0b45c     0A 18 06 F6 | 	mov	arg04, #10
0b460     C4 AD B0 FD | 	call	#__system___basic_print_unsigned
0b464     00 12 06 F6 | 	mov	arg01, #0
0b468     09 14 06 F6 | 	mov	arg02, #9
0b46c     00 16 06 F6 | 	mov	arg03, #0
0b470     D8 AC B0 FD | 	call	#__system___basic_print_char
0b474     A7 14 02 FB | 	rdlong	arg02, fp
0b478     00 12 06 F6 | 	mov	arg01, #0
0b47c     00 16 06 F6 | 	mov	arg03, #0
0b480     0A 18 06 F6 | 	mov	arg04, #10
0b484     A0 AD B0 FD | 	call	#__system___basic_print_unsigned
0b488     00 12 06 F6 | 	mov	arg01, #0
0b48c     09 14 06 F6 | 	mov	arg02, #9
0b490     00 16 06 F6 | 	mov	arg03, #0
0b494     B4 AC B0 FD | 	call	#__system___basic_print_char
0b498     04 4E 05 F1 | 	add	fp, #4
0b49c     A7 14 02 FB | 	rdlong	arg02, fp
0b4a0     04 4E 85 F1 | 	sub	fp, #4
0b4a4     00 12 06 F6 | 	mov	arg01, #0
0b4a8     00 16 06 F6 | 	mov	arg03, #0
0b4ac     0A 18 06 F6 | 	mov	arg04, #10
0b4b0     74 AD B0 FD | 	call	#__system___basic_print_unsigned
0b4b4     00 12 06 F6 | 	mov	arg01, #0
0b4b8     09 14 06 F6 | 	mov	arg02, #9
0b4bc     00 16 06 F6 | 	mov	arg03, #0
0b4c0     88 AC B0 FD | 	call	#__system___basic_print_char
0b4c4     00 22 06 F6 | 	mov	local03, #0
0b4c8     34 4E 05 F1 | 	add	fp, #52
0b4cc     A7 12 02 FB | 	rdlong	arg01, fp
0b4d0     34 4E 85 F1 | 	sub	fp, #52
0b4d4     A0 6C B0 FD | 	call	#_pslpeek
0b4d8     FD 14 02 F6 | 	mov	arg02, result1
0b4dc     11 13 02 F6 | 	mov	arg01, local03
0b4e0     00 16 06 F6 | 	mov	arg03, #0
0b4e4     0A 18 06 F6 | 	mov	arg04, #10
0b4e8     3C AD B0 FD | 	call	#__system___basic_print_unsigned
0b4ec     00 12 06 F6 | 	mov	arg01, #0
0b4f0     09 14 06 F6 | 	mov	arg02, #9
0b4f4     00 16 06 F6 | 	mov	arg03, #0
0b4f8     50 AC B0 FD | 	call	#__system___basic_print_char
0b4fc     00 22 06 F6 | 	mov	local03, #0
0b500     34 4E 05 F1 | 	add	fp, #52
0b504     A7 12 02 FB | 	rdlong	arg01, fp
0b508     34 4E 85 F1 | 	sub	fp, #52
0b50c     04 12 06 F1 | 	add	arg01, #4
0b510     64 6C B0 FD | 	call	#_pslpeek
0b514     FD 14 02 F6 | 	mov	arg02, result1
0b518     11 13 02 F6 | 	mov	arg01, local03
0b51c     00 16 06 F6 | 	mov	arg03, #0
0b520     0A 18 06 F6 | 	mov	arg04, #10
0b524     00 AD B0 FD | 	call	#__system___basic_print_unsigned
0b528     00 12 06 F6 | 	mov	arg01, #0
0b52c     09 14 06 F6 | 	mov	arg02, #9
0b530     00 16 06 F6 | 	mov	arg03, #0
0b534     14 AC B0 FD | 	call	#__system___basic_print_char
0b538     00 22 06 F6 | 	mov	local03, #0
0b53c     34 4E 05 F1 | 	add	fp, #52
0b540     A7 12 02 FB | 	rdlong	arg01, fp
0b544     34 4E 85 F1 | 	sub	fp, #52
0b548     08 12 06 F1 | 	add	arg01, #8
0b54c     28 6C B0 FD | 	call	#_pslpeek
0b550     FD 14 02 F6 | 	mov	arg02, result1
0b554     11 13 02 F6 | 	mov	arg01, local03
0b558     00 16 06 F6 | 	mov	arg03, #0
0b55c     0A 18 06 F6 | 	mov	arg04, #10
0b560     C4 AC B0 FD | 	call	#__system___basic_print_unsigned
0b564     00 12 06 F6 | 	mov	arg01, #0
0b568     0A 14 06 F6 | 	mov	arg02, #10
0b56c     00 16 06 F6 | 	mov	arg03, #0
0b570     D8 AB B0 FD | 	call	#__system___basic_print_char
0b574     00 12 06 F6 | 	mov	arg01, #0
0b578     E8 F4 B0 FD | 	call	#__system___getiolock_0348
0b57c     FD 00 68 FC | 	wrlong	#0, result1
0b580     78 01 90 FD | 	jmp	#LR__0911
0b584                 | LR__0900
0b584     08 4E 05 F1 | 	add	fp, #8
0b588     A7 38 68 FC | 	wrlong	#28, fp
0b58c     2C 4E 05 F1 | 	add	fp, #44
0b590     A7 12 02 FB | 	rdlong	arg01, fp
0b594     34 4E 85 F1 | 	sub	fp, #52
0b598     84 6B B0 FD | 	call	#_pspeek
0b59c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b5a0     A7 FA 61 FC | 	wrlong	result1, fp
0b5a4     80 FA 15 F2 | 	cmp	result1, #128 wc
0b5a8     00 1F 66 36 |  if_ae	neg	local01, #256
0b5ac     A7 20 02 3B |  if_ae	rdlong	local02, fp
0b5b0     10 1F 42 35 |  if_ae	or	local01, local02
0b5b4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b5b8     40 01 90 FD | 	jmp	#LR__0911
0b5bc                 | LR__0901
0b5bc     08 4E 05 F1 | 	add	fp, #8
0b5c0     A7 3A 68 FC | 	wrlong	#29, fp
0b5c4     2C 4E 05 F1 | 	add	fp, #44
0b5c8     A7 12 02 FB | 	rdlong	arg01, fp
0b5cc     34 4E 85 F1 | 	sub	fp, #52
0b5d0     4C 6B B0 FD | 	call	#_pspeek
0b5d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b5d8     A7 FA 61 FC | 	wrlong	result1, fp
0b5dc     1C 01 90 FD | 	jmp	#LR__0911
0b5e0                 | LR__0902
0b5e0     08 4E 05 F1 | 	add	fp, #8
0b5e4     A7 38 68 FC | 	wrlong	#28, fp
0b5e8     2C 4E 05 F1 | 	add	fp, #44
0b5ec     A7 12 02 FB | 	rdlong	arg01, fp
0b5f0     34 4E 85 F1 | 	sub	fp, #52
0b5f4     80 6B B0 FD | 	call	#_pslpeek
0b5f8     FD FA 31 F9 | 	getword	result1, result1, #0
0b5fc     A7 FA 61 FC | 	wrlong	result1, fp
0b600     40 00 00 FF 
0b604     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0b608     FF 7F 00 3F 
0b60c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0b610     A7 20 02 3B |  if_ae	rdlong	local02, fp
0b614     10 1F 42 35 |  if_ae	or	local01, local02
0b618     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b61c     DC 00 90 FD | 	jmp	#LR__0911
0b620                 | LR__0903
0b620     08 4E 05 F1 | 	add	fp, #8
0b624     A7 3A 68 FC | 	wrlong	#29, fp
0b628     2C 4E 05 F1 | 	add	fp, #44
0b62c     A7 12 02 FB | 	rdlong	arg01, fp
0b630     34 4E 85 F1 | 	sub	fp, #52
0b634     40 6B B0 FD | 	call	#_pslpeek
0b638     FD FA 31 F9 | 	getword	result1, result1, #0
0b63c     A7 FA 61 FC | 	wrlong	result1, fp
0b640     B8 00 90 FD | 	jmp	#LR__0911
0b644                 | LR__0904
0b644     08 4E 05 F1 | 	add	fp, #8
0b648     A7 38 68 FC | 	wrlong	#28, fp
0b64c     2C 4E 05 F1 | 	add	fp, #44
0b650     A7 12 02 FB | 	rdlong	arg01, fp
0b654     34 4E 85 F1 | 	sub	fp, #52
0b658     1C 6B B0 FD | 	call	#_pslpeek
0b65c     A7 FA 61 FC | 	wrlong	result1, fp
0b660     98 00 90 FD | 	jmp	#LR__0911
0b664                 | LR__0905
0b664     08 4E 05 F1 | 	add	fp, #8
0b668     A7 3A 68 FC | 	wrlong	#29, fp
0b66c     2C 4E 05 F1 | 	add	fp, #44
0b670     A7 12 02 FB | 	rdlong	arg01, fp
0b674     34 4E 85 F1 | 	sub	fp, #52
0b678     FC 6A B0 FD | 	call	#_pslpeek
0b67c     A7 FA 61 FC | 	wrlong	result1, fp
0b680     78 00 90 FD | 	jmp	#LR__0911
0b684                 | LR__0906
0b684     08 4E 05 F1 | 	add	fp, #8
0b688     A7 FE 69 FC | 	wrlong	#255, fp
0b68c     08 4E 85 F1 | 	sub	fp, #8
0b690     A7 60 68 FC | 	wrlong	#48, fp
0b694     64 00 90 FD | 	jmp	#LR__0911
0b698                 | LR__0907
0b698     08 4E 05 F1 | 	add	fp, #8
0b69c     A7 FE 69 FC | 	wrlong	#255, fp
0b6a0     08 4E 85 F1 | 	sub	fp, #8
0b6a4     A7 60 68 FC | 	wrlong	#48, fp
0b6a8     50 00 90 FD | 	jmp	#LR__0911
0b6ac                 | LR__0908
0b6ac     08 4E 05 F1 | 	add	fp, #8
0b6b0     A7 3C 68 FC | 	wrlong	#30, fp
0b6b4     2C 4E 05 F1 | 	add	fp, #44
0b6b8     A7 12 02 FB | 	rdlong	arg01, fp
0b6bc     34 4E 85 F1 | 	sub	fp, #52
0b6c0     B4 6A B0 FD | 	call	#_pslpeek
0b6c4     A7 FA 61 FC | 	wrlong	result1, fp
0b6c8     30 00 90 FD | 	jmp	#LR__0911
0b6cc                 | LR__0909
0b6cc     08 4E 05 F1 | 	add	fp, #8
0b6d0     A7 FE 69 FC | 	wrlong	#255, fp
0b6d4     08 4E 85 F1 | 	sub	fp, #8
0b6d8     A7 60 68 FC | 	wrlong	#48, fp
0b6dc     1C 00 90 FD | 	jmp	#LR__0911
0b6e0                 | LR__0910
0b6e0     08 4E 05 F1 | 	add	fp, #8
0b6e4     A7 3E 68 FC | 	wrlong	#31, fp
0b6e8     2C 4E 05 F1 | 	add	fp, #44
0b6ec     A7 12 02 FB | 	rdlong	arg01, fp
0b6f0     34 4E 85 F1 | 	sub	fp, #52
0b6f4     80 6A B0 FD | 	call	#_pslpeek
0b6f8     A7 FA 61 FC | 	wrlong	result1, fp
0b6fc                 | LR__0911
0b6fc     A7 12 02 F6 | 	mov	arg01, fp
0b700     C8 D0 BF FD | 	call	#_push
0b704                 | LR__0912
0b704     A7 F0 03 F6 | 	mov	ptra, fp
0b708     B2 00 A0 FD | 	call	#popregs_
0b70c                 | _do_getvar_ret
0b70c     2D 00 64 FD | 	ret
0b710                 | 
0b710                 | ' 
0b710                 | ' '------------------------ Operators 
0b710                 | ' 
0b710                 | ' sub do_plus 
0b710                 | _do_plus
0b710     05 4A 05 F6 | 	mov	COUNT_, #5
0b714     A8 00 A0 FD | 	call	#pushregs_
0b718     18 F0 07 F1 | 	add	ptra, #24
0b71c     14 D0 BF FD | 	call	#_pop
0b720     FD 1E 02 F6 | 	mov	local01, result1
0b724     FE 20 02 F6 | 	mov	local02, result2
0b728     FF 22 02 F6 | 	mov	local03, result3
0b72c     0C 4E 05 F1 | 	add	fp, #12
0b730     A7 1E 62 FC | 	wrlong	local01, fp
0b734     04 4E 05 F1 | 	add	fp, #4
0b738     A7 20 62 FC | 	wrlong	local02, fp
0b73c     04 4E 05 F1 | 	add	fp, #4
0b740     A7 22 62 FC | 	wrlong	local03, fp
0b744     14 4E 85 F1 | 	sub	fp, #20
0b748     E8 CF BF FD | 	call	#_pop
0b74c     FF 22 02 F6 | 	mov	local03, result3
0b750     A7 FA 61 FC | 	wrlong	result1, fp
0b754     04 4E 05 F1 | 	add	fp, #4
0b758     A7 FC 61 FC | 	wrlong	result2, fp
0b75c     04 4E 05 F1 | 	add	fp, #4
0b760     A7 22 62 FC | 	wrlong	local03, fp
0b764                 | ' 
0b764                 | ' t2=pop()
0b764                 | ' t1=pop()
0b764                 | ' 
0b764                 | ' 
0b764                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0b764     08 4E 85 F1 | 	sub	fp, #8
0b768     1D 22 0E F2 | 	cmp	local03, #29 wz
0b76c     14 4E 05 A1 |  if_e	add	fp, #20
0b770     A7 24 02 AB |  if_e	rdlong	local04, fp
0b774     14 4E 85 A1 |  if_e	sub	fp, #20
0b778     12 23 02 A6 |  if_e	mov	local03, local04
0b77c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b780     1C 00 90 5D |  if_ne	jmp	#LR__0920
0b784     A7 1E 02 FB | 	rdlong	local01, fp
0b788     0C 4E 05 F1 | 	add	fp, #12
0b78c     A7 20 02 FB | 	rdlong	local02, fp
0b790     0C 4E 85 F1 | 	sub	fp, #12
0b794     10 1F 02 F1 | 	add	local01, local02
0b798     A7 1E 62 FC | 	wrlong	local01, fp
0b79c     3C 03 90 FD | 	jmp	#LR__0932
0b7a0                 | LR__0920
0b7a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0b7a0     08 4E 05 F1 | 	add	fp, #8
0b7a4     A7 1E 02 FB | 	rdlong	local01, fp
0b7a8     08 4E 85 F1 | 	sub	fp, #8
0b7ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b7b0     14 4E 05 A1 |  if_e	add	fp, #20
0b7b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0b7b8     14 4E 85 A1 |  if_e	sub	fp, #20
0b7bc     12 23 02 A6 |  if_e	mov	local03, local04
0b7c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b7c4     28 00 90 5D |  if_ne	jmp	#LR__0921
0b7c8     A7 1E 02 FB | 	rdlong	local01, fp
0b7cc     0C 4E 05 F1 | 	add	fp, #12
0b7d0     A7 20 02 FB | 	rdlong	local02, fp
0b7d4     0C 4E 85 F1 | 	sub	fp, #12
0b7d8     10 1F 02 F1 | 	add	local01, local02
0b7dc     A7 1E 62 FC | 	wrlong	local01, fp
0b7e0     08 4E 05 F1 | 	add	fp, #8
0b7e4     A7 38 68 FC | 	wrlong	#28, fp
0b7e8     08 4E 85 F1 | 	sub	fp, #8
0b7ec     EC 02 90 FD | 	jmp	#LR__0932
0b7f0                 | LR__0921
0b7f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b7f0     08 4E 05 F1 | 	add	fp, #8
0b7f4     A7 1E 02 FB | 	rdlong	local01, fp
0b7f8     08 4E 85 F1 | 	sub	fp, #8
0b7fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b800     14 4E 05 A1 |  if_e	add	fp, #20
0b804     A7 24 02 AB |  if_e	rdlong	local04, fp
0b808     14 4E 85 A1 |  if_e	sub	fp, #20
0b80c     12 23 02 A6 |  if_e	mov	local03, local04
0b810     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b814     30 00 90 5D |  if_ne	jmp	#LR__0922
0b818     A7 12 02 FB | 	rdlong	arg01, fp
0b81c     78 C3 B0 FD | 	call	#__system___float_fromuns
0b820     FD 12 02 F6 | 	mov	arg01, result1
0b824     0C 4E 05 F1 | 	add	fp, #12
0b828     A7 14 02 FB | 	rdlong	arg02, fp
0b82c     0C 4E 85 F1 | 	sub	fp, #12
0b830     98 C3 B0 FD | 	call	#__system___float_add
0b834     A7 FA 61 FC | 	wrlong	result1, fp
0b838     08 4E 05 F1 | 	add	fp, #8
0b83c     A7 3C 68 FC | 	wrlong	#30, fp
0b840     08 4E 85 F1 | 	sub	fp, #8
0b844     94 02 90 FD | 	jmp	#LR__0932
0b848                 | LR__0922
0b848                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0b848     08 4E 05 F1 | 	add	fp, #8
0b84c     A7 1E 02 FB | 	rdlong	local01, fp
0b850     08 4E 85 F1 | 	sub	fp, #8
0b854     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b858     14 4E 05 A1 |  if_e	add	fp, #20
0b85c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b860     14 4E 85 A1 |  if_e	sub	fp, #20
0b864     12 23 02 A6 |  if_e	mov	local03, local04
0b868     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b86c     1C 00 90 5D |  if_ne	jmp	#LR__0923
0b870     A7 1E 02 FB | 	rdlong	local01, fp
0b874     0C 4E 05 F1 | 	add	fp, #12
0b878     A7 20 02 FB | 	rdlong	local02, fp
0b87c     0C 4E 85 F1 | 	sub	fp, #12
0b880     10 1F 02 F1 | 	add	local01, local02
0b884     A7 1E 62 FC | 	wrlong	local01, fp
0b888     50 02 90 FD | 	jmp	#LR__0932
0b88c                 | LR__0923
0b88c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b88c     08 4E 05 F1 | 	add	fp, #8
0b890     A7 1E 02 FB | 	rdlong	local01, fp
0b894     08 4E 85 F1 | 	sub	fp, #8
0b898     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b89c     14 4E 05 A1 |  if_e	add	fp, #20
0b8a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8a4     14 4E 85 A1 |  if_e	sub	fp, #20
0b8a8     12 23 02 A6 |  if_e	mov	local03, local04
0b8ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b8b0     1C 00 90 5D |  if_ne	jmp	#LR__0924
0b8b4     A7 1E 02 FB | 	rdlong	local01, fp
0b8b8     0C 4E 05 F1 | 	add	fp, #12
0b8bc     A7 20 02 FB | 	rdlong	local02, fp
0b8c0     0C 4E 85 F1 | 	sub	fp, #12
0b8c4     10 1F 02 F1 | 	add	local01, local02
0b8c8     A7 1E 62 FC | 	wrlong	local01, fp
0b8cc     0C 02 90 FD | 	jmp	#LR__0932
0b8d0                 | LR__0924
0b8d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b8d0     08 4E 05 F1 | 	add	fp, #8
0b8d4     A7 1E 02 FB | 	rdlong	local01, fp
0b8d8     08 4E 85 F1 | 	sub	fp, #8
0b8dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b8e0     14 4E 05 A1 |  if_e	add	fp, #20
0b8e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8e8     14 4E 85 A1 |  if_e	sub	fp, #20
0b8ec     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b8f0     40 00 90 5D |  if_ne	jmp	#LR__0925
0b8f4     A7 12 02 FB | 	rdlong	arg01, fp
0b8f8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b8fc     1F 26 C6 C9 |  if_b	decod	local05, #31
0b900     00 26 06 36 |  if_ae	mov	local05, #0
0b904     90 C2 B0 FD | 	call	#__system___float_fromuns
0b908     13 FB 61 F5 | 	xor	result1, local05
0b90c     FD 12 02 F6 | 	mov	arg01, result1
0b910     0C 4E 05 F1 | 	add	fp, #12
0b914     A7 14 02 FB | 	rdlong	arg02, fp
0b918     0C 4E 85 F1 | 	sub	fp, #12
0b91c     AC C2 B0 FD | 	call	#__system___float_add
0b920     A7 FA 61 FC | 	wrlong	result1, fp
0b924     08 4E 05 F1 | 	add	fp, #8
0b928     A7 3C 68 FC | 	wrlong	#30, fp
0b92c     08 4E 85 F1 | 	sub	fp, #8
0b930     A8 01 90 FD | 	jmp	#LR__0932
0b934                 | LR__0925
0b934                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b934     08 4E 05 F1 | 	add	fp, #8
0b938     A7 1E 02 FB | 	rdlong	local01, fp
0b93c     08 4E 85 F1 | 	sub	fp, #8
0b940     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b944     14 4E 05 A1 |  if_e	add	fp, #20
0b948     A7 22 02 AB |  if_e	rdlong	local03, fp
0b94c     14 4E 85 A1 |  if_e	sub	fp, #20
0b950     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b954     28 00 90 5D |  if_ne	jmp	#LR__0926
0b958     A7 1E 02 FB | 	rdlong	local01, fp
0b95c     0C 4E 05 F1 | 	add	fp, #12
0b960     A7 12 02 FB | 	rdlong	arg01, fp
0b964     0C 4E 85 F1 | 	sub	fp, #12
0b968     2C C2 B0 FD | 	call	#__system___float_fromuns
0b96c     FD 14 02 F6 | 	mov	arg02, result1
0b970     0F 13 02 F6 | 	mov	arg01, local01
0b974     54 C2 B0 FD | 	call	#__system___float_add
0b978     A7 FA 61 FC | 	wrlong	result1, fp
0b97c     5C 01 90 FD | 	jmp	#LR__0932
0b980                 | LR__0926
0b980                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b980     08 4E 05 F1 | 	add	fp, #8
0b984     A7 1E 02 FB | 	rdlong	local01, fp
0b988     08 4E 85 F1 | 	sub	fp, #8
0b98c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b990     14 4E 05 A1 |  if_e	add	fp, #20
0b994     A7 22 02 AB |  if_e	rdlong	local03, fp
0b998     14 4E 85 A1 |  if_e	sub	fp, #20
0b99c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b9a0     38 00 90 5D |  if_ne	jmp	#LR__0927
0b9a4     A7 1E 02 FB | 	rdlong	local01, fp
0b9a8     0C 4E 05 F1 | 	add	fp, #12
0b9ac     A7 12 02 FB | 	rdlong	arg01, fp
0b9b0     0C 4E 85 F1 | 	sub	fp, #12
0b9b4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9b8     1F 26 C6 C9 |  if_b	decod	local05, #31
0b9bc     00 26 06 36 |  if_ae	mov	local05, #0
0b9c0     D4 C1 B0 FD | 	call	#__system___float_fromuns
0b9c4     13 FB 61 F5 | 	xor	result1, local05
0b9c8     FD 14 02 F6 | 	mov	arg02, result1
0b9cc     0F 13 02 F6 | 	mov	arg01, local01
0b9d0     F8 C1 B0 FD | 	call	#__system___float_add
0b9d4     A7 FA 61 FC | 	wrlong	result1, fp
0b9d8     00 01 90 FD | 	jmp	#LR__0932
0b9dc                 | LR__0927
0b9dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b9dc     08 4E 05 F1 | 	add	fp, #8
0b9e0     A7 1E 02 FB | 	rdlong	local01, fp
0b9e4     08 4E 85 F1 | 	sub	fp, #8
0b9e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b9ec     14 4E 05 A1 |  if_e	add	fp, #20
0b9f0     A7 22 02 AB |  if_e	rdlong	local03, fp
0b9f4     14 4E 85 A1 |  if_e	sub	fp, #20
0b9f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b9fc     1C 00 90 5D |  if_ne	jmp	#LR__0928
0ba00     A7 12 02 FB | 	rdlong	arg01, fp
0ba04     0C 4E 05 F1 | 	add	fp, #12
0ba08     A7 14 02 FB | 	rdlong	arg02, fp
0ba0c     0C 4E 85 F1 | 	sub	fp, #12
0ba10     B8 C1 B0 FD | 	call	#__system___float_add
0ba14     A7 FA 61 FC | 	wrlong	result1, fp
0ba18     C0 00 90 FD | 	jmp	#LR__0932
0ba1c                 | LR__0928
0ba1c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0ba1c     08 4E 05 F1 | 	add	fp, #8
0ba20     A7 1E 02 FB | 	rdlong	local01, fp
0ba24     08 4E 85 F1 | 	sub	fp, #8
0ba28     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ba2c     24 00 90 5D |  if_ne	jmp	#LR__0929
0ba30     14 4E 05 F1 | 	add	fp, #20
0ba34     A7 22 02 FB | 	rdlong	local03, fp
0ba38     14 4E 85 F1 | 	sub	fp, #20
0ba3c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ba40     A7 04 68 5C |  if_ne	wrlong	#2, fp
0ba44     08 4E 05 51 |  if_ne	add	fp, #8
0ba48     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ba4c     08 4E 85 51 |  if_ne	sub	fp, #8
0ba50     88 00 90 5D |  if_ne	jmp	#LR__0932
0ba54                 | LR__0929
0ba54                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0ba54     14 4E 05 F1 | 	add	fp, #20
0ba58     A7 1E 02 FB | 	rdlong	local01, fp
0ba5c     14 4E 85 F1 | 	sub	fp, #20
0ba60     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ba64     24 00 90 5D |  if_ne	jmp	#LR__0930
0ba68     08 4E 05 F1 | 	add	fp, #8
0ba6c     A7 22 02 FB | 	rdlong	local03, fp
0ba70     08 4E 85 F1 | 	sub	fp, #8
0ba74     1F 22 0E F2 | 	cmp	local03, #31 wz
0ba78     A7 04 68 5C |  if_ne	wrlong	#2, fp
0ba7c     08 4E 05 51 |  if_ne	add	fp, #8
0ba80     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ba84     08 4E 85 51 |  if_ne	sub	fp, #8
0ba88     50 00 90 5D |  if_ne	jmp	#LR__0932
0ba8c                 | LR__0930
0ba8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0ba8c     08 4E 05 F1 | 	add	fp, #8
0ba90     A7 1E 02 FB | 	rdlong	local01, fp
0ba94     08 4E 85 F1 | 	sub	fp, #8
0ba98     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ba9c     14 4E 05 A1 |  if_e	add	fp, #20
0baa0     A7 22 02 AB |  if_e	rdlong	local03, fp
0baa4     14 4E 85 A1 |  if_e	sub	fp, #20
0baa8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0baac     1C 00 90 5D |  if_ne	jmp	#LR__0931
0bab0     A7 12 02 FB | 	rdlong	arg01, fp
0bab4     0C 4E 05 F1 | 	add	fp, #12
0bab8     A7 14 02 FB | 	rdlong	arg02, fp
0babc     0C 4E 85 F1 | 	sub	fp, #12
0bac0     48 9A B0 FD | 	call	#__system___string_concat
0bac4     A7 FA 61 FC | 	wrlong	result1, fp
0bac8     10 00 90 FD | 	jmp	#LR__0932
0bacc                 | LR__0931
0bacc     A7 08 68 FC | 	wrlong	#4, fp
0bad0     08 4E 05 F1 | 	add	fp, #8
0bad4     A7 FE 69 FC | 	wrlong	#255, fp
0bad8     08 4E 85 F1 | 	sub	fp, #8
0badc                 | LR__0932
0badc     A7 12 02 F6 | 	mov	arg01, fp
0bae0     E8 CC BF FD | 	call	#_push
0bae4     A7 F0 03 F6 | 	mov	ptra, fp
0bae8     B2 00 A0 FD | 	call	#popregs_
0baec                 | _do_plus_ret
0baec     2D 00 64 FD | 	ret
0baf0                 | 
0baf0                 | ' 
0baf0                 | ' sub do_minus
0baf0                 | _do_minus
0baf0     05 4A 05 F6 | 	mov	COUNT_, #5
0baf4     A8 00 A0 FD | 	call	#pushregs_
0baf8     18 F0 07 F1 | 	add	ptra, #24
0bafc     34 CC BF FD | 	call	#_pop
0bb00     FD 1E 02 F6 | 	mov	local01, result1
0bb04     FE 20 02 F6 | 	mov	local02, result2
0bb08     FF 22 02 F6 | 	mov	local03, result3
0bb0c     0C 4E 05 F1 | 	add	fp, #12
0bb10     A7 1E 62 FC | 	wrlong	local01, fp
0bb14     04 4E 05 F1 | 	add	fp, #4
0bb18     A7 20 62 FC | 	wrlong	local02, fp
0bb1c     04 4E 05 F1 | 	add	fp, #4
0bb20     A7 22 62 FC | 	wrlong	local03, fp
0bb24     14 4E 85 F1 | 	sub	fp, #20
0bb28     08 CC BF FD | 	call	#_pop
0bb2c     FF 22 02 F6 | 	mov	local03, result3
0bb30     A7 FA 61 FC | 	wrlong	result1, fp
0bb34     04 4E 05 F1 | 	add	fp, #4
0bb38     A7 FC 61 FC | 	wrlong	result2, fp
0bb3c     04 4E 05 F1 | 	add	fp, #4
0bb40     A7 22 62 FC | 	wrlong	local03, fp
0bb44                 | ' 
0bb44                 | ' t2=pop()
0bb44                 | ' t1=pop()
0bb44                 | ' 
0bb44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0bb44     08 4E 85 F1 | 	sub	fp, #8
0bb48     1D 22 0E F2 | 	cmp	local03, #29 wz
0bb4c     14 4E 05 A1 |  if_e	add	fp, #20
0bb50     A7 24 02 AB |  if_e	rdlong	local04, fp
0bb54     14 4E 85 A1 |  if_e	sub	fp, #20
0bb58     12 23 02 A6 |  if_e	mov	local03, local04
0bb5c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bb60     5C 00 90 5D |  if_ne	jmp	#LR__0941
0bb64                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0bb64     0C 4E 05 F1 | 	add	fp, #12
0bb68     A7 1E 02 FB | 	rdlong	local01, fp
0bb6c     0C 4E 85 F1 | 	sub	fp, #12
0bb70     A7 22 02 FB | 	rdlong	local03, fp
0bb74     11 1F 12 F2 | 	cmp	local01, local03 wc
0bb78     1C 00 90 3D |  if_ae	jmp	#LR__0940
0bb7c     A7 1E 02 FB | 	rdlong	local01, fp
0bb80     0C 4E 05 F1 | 	add	fp, #12
0bb84     A7 20 02 FB | 	rdlong	local02, fp
0bb88     0C 4E 85 F1 | 	sub	fp, #12
0bb8c     10 1F 82 F1 | 	sub	local01, local02
0bb90     A7 1E 62 FC | 	wrlong	local01, fp
0bb94     F4 02 90 FD | 	jmp	#LR__0950
0bb98                 | LR__0940
0bb98     A7 1E 02 FB | 	rdlong	local01, fp
0bb9c     0C 4E 05 F1 | 	add	fp, #12
0bba0     A7 20 02 FB | 	rdlong	local02, fp
0bba4     0C 4E 85 F1 | 	sub	fp, #12
0bba8     10 1F 82 F1 | 	sub	local01, local02
0bbac     A7 1E 62 FC | 	wrlong	local01, fp
0bbb0     08 4E 05 F1 | 	add	fp, #8
0bbb4     A7 38 68 FC | 	wrlong	#28, fp
0bbb8     08 4E 85 F1 | 	sub	fp, #8
0bbbc     CC 02 90 FD | 	jmp	#LR__0950
0bbc0                 | LR__0941
0bbc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0bbc0     08 4E 05 F1 | 	add	fp, #8
0bbc4     A7 1E 02 FB | 	rdlong	local01, fp
0bbc8     08 4E 85 F1 | 	sub	fp, #8
0bbcc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bbd0     14 4E 05 A1 |  if_e	add	fp, #20
0bbd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0bbd8     14 4E 85 A1 |  if_e	sub	fp, #20
0bbdc     12 23 02 A6 |  if_e	mov	local03, local04
0bbe0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bbe4     28 00 90 5D |  if_ne	jmp	#LR__0942
0bbe8     A7 1E 02 FB | 	rdlong	local01, fp
0bbec     0C 4E 05 F1 | 	add	fp, #12
0bbf0     A7 20 02 FB | 	rdlong	local02, fp
0bbf4     0C 4E 85 F1 | 	sub	fp, #12
0bbf8     10 1F 82 F1 | 	sub	local01, local02
0bbfc     A7 1E 62 FC | 	wrlong	local01, fp
0bc00     08 4E 05 F1 | 	add	fp, #8
0bc04     A7 38 68 FC | 	wrlong	#28, fp
0bc08     08 4E 85 F1 | 	sub	fp, #8
0bc0c     7C 02 90 FD | 	jmp	#LR__0950
0bc10                 | LR__0942
0bc10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0bc10     08 4E 05 F1 | 	add	fp, #8
0bc14     A7 1E 02 FB | 	rdlong	local01, fp
0bc18     08 4E 85 F1 | 	sub	fp, #8
0bc1c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bc20     14 4E 05 A1 |  if_e	add	fp, #20
0bc24     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc28     14 4E 85 A1 |  if_e	sub	fp, #20
0bc2c     12 23 02 A6 |  if_e	mov	local03, local04
0bc30     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bc34     34 00 90 5D |  if_ne	jmp	#LR__0943
0bc38     A7 12 02 FB | 	rdlong	arg01, fp
0bc3c     58 BF B0 FD | 	call	#__system___float_fromuns
0bc40     FD 12 02 F6 | 	mov	arg01, result1
0bc44     0C 4E 05 F1 | 	add	fp, #12
0bc48     A7 14 02 FB | 	rdlong	arg02, fp
0bc4c     0C 4E 85 F1 | 	sub	fp, #12
0bc50     1F 14 E6 F4 | 	bitnot	arg02, #31
0bc54     74 BF B0 FD | 	call	#__system___float_add
0bc58     A7 FA 61 FC | 	wrlong	result1, fp
0bc5c     08 4E 05 F1 | 	add	fp, #8
0bc60     A7 3C 68 FC | 	wrlong	#30, fp
0bc64     08 4E 85 F1 | 	sub	fp, #8
0bc68     20 02 90 FD | 	jmp	#LR__0950
0bc6c                 | LR__0943
0bc6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0bc6c     08 4E 05 F1 | 	add	fp, #8
0bc70     A7 1E 02 FB | 	rdlong	local01, fp
0bc74     08 4E 85 F1 | 	sub	fp, #8
0bc78     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bc7c     14 4E 05 A1 |  if_e	add	fp, #20
0bc80     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc84     14 4E 85 A1 |  if_e	sub	fp, #20
0bc88     12 23 02 A6 |  if_e	mov	local03, local04
0bc8c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bc90     1C 00 90 5D |  if_ne	jmp	#LR__0944
0bc94     A7 1E 02 FB | 	rdlong	local01, fp
0bc98     0C 4E 05 F1 | 	add	fp, #12
0bc9c     A7 20 02 FB | 	rdlong	local02, fp
0bca0     0C 4E 85 F1 | 	sub	fp, #12
0bca4     10 1F 82 F1 | 	sub	local01, local02
0bca8     A7 1E 62 FC | 	wrlong	local01, fp
0bcac     DC 01 90 FD | 	jmp	#LR__0950
0bcb0                 | LR__0944
0bcb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0bcb0     08 4E 05 F1 | 	add	fp, #8
0bcb4     A7 1E 02 FB | 	rdlong	local01, fp
0bcb8     08 4E 85 F1 | 	sub	fp, #8
0bcbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bcc0     14 4E 05 A1 |  if_e	add	fp, #20
0bcc4     A7 24 02 AB |  if_e	rdlong	local04, fp
0bcc8     14 4E 85 A1 |  if_e	sub	fp, #20
0bccc     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0bcd0     1C 00 90 5D |  if_ne	jmp	#LR__0945
0bcd4     A7 1E 02 FB | 	rdlong	local01, fp
0bcd8     0C 4E 05 F1 | 	add	fp, #12
0bcdc     A7 20 02 FB | 	rdlong	local02, fp
0bce0     0C 4E 85 F1 | 	sub	fp, #12
0bce4     10 1F 82 F1 | 	sub	local01, local02
0bce8     A7 1E 62 FC | 	wrlong	local01, fp
0bcec     9C 01 90 FD | 	jmp	#LR__0950
0bcf0                 | LR__0945
0bcf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0bcf0     08 4E 05 F1 | 	add	fp, #8
0bcf4     A7 1E 02 FB | 	rdlong	local01, fp
0bcf8     08 4E 85 F1 | 	sub	fp, #8
0bcfc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bd00     14 4E 05 A1 |  if_e	add	fp, #20
0bd04     A7 22 02 AB |  if_e	rdlong	local03, fp
0bd08     14 4E 85 A1 |  if_e	sub	fp, #20
0bd0c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bd10     44 00 90 5D |  if_ne	jmp	#LR__0946
0bd14     A7 12 02 FB | 	rdlong	arg01, fp
0bd18     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd1c     1F 26 C6 C9 |  if_b	decod	local05, #31
0bd20     00 26 06 36 |  if_ae	mov	local05, #0
0bd24     70 BE B0 FD | 	call	#__system___float_fromuns
0bd28     13 FB 61 F5 | 	xor	result1, local05
0bd2c     FD 12 02 F6 | 	mov	arg01, result1
0bd30     0C 4E 05 F1 | 	add	fp, #12
0bd34     A7 14 02 FB | 	rdlong	arg02, fp
0bd38     0C 4E 85 F1 | 	sub	fp, #12
0bd3c     1F 14 E6 F4 | 	bitnot	arg02, #31
0bd40     88 BE B0 FD | 	call	#__system___float_add
0bd44     A7 FA 61 FC | 	wrlong	result1, fp
0bd48     08 4E 05 F1 | 	add	fp, #8
0bd4c     A7 3C 68 FC | 	wrlong	#30, fp
0bd50     08 4E 85 F1 | 	sub	fp, #8
0bd54     34 01 90 FD | 	jmp	#LR__0950
0bd58                 | LR__0946
0bd58                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0bd58     08 4E 05 F1 | 	add	fp, #8
0bd5c     A7 1E 02 FB | 	rdlong	local01, fp
0bd60     08 4E 85 F1 | 	sub	fp, #8
0bd64     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bd68     14 4E 05 A1 |  if_e	add	fp, #20
0bd6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bd70     14 4E 85 A1 |  if_e	sub	fp, #20
0bd74     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bd78     2C 00 90 5D |  if_ne	jmp	#LR__0947
0bd7c     A7 1E 02 FB | 	rdlong	local01, fp
0bd80     0C 4E 05 F1 | 	add	fp, #12
0bd84     A7 12 02 FB | 	rdlong	arg01, fp
0bd88     0C 4E 85 F1 | 	sub	fp, #12
0bd8c     08 BE B0 FD | 	call	#__system___float_fromuns
0bd90     FD 14 02 F6 | 	mov	arg02, result1
0bd94     0F 13 02 F6 | 	mov	arg01, local01
0bd98     1F 14 E6 F4 | 	bitnot	arg02, #31
0bd9c     2C BE B0 FD | 	call	#__system___float_add
0bda0     A7 FA 61 FC | 	wrlong	result1, fp
0bda4     E4 00 90 FD | 	jmp	#LR__0950
0bda8                 | LR__0947
0bda8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0bda8     08 4E 05 F1 | 	add	fp, #8
0bdac     A7 1E 02 FB | 	rdlong	local01, fp
0bdb0     08 4E 85 F1 | 	sub	fp, #8
0bdb4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bdb8     14 4E 05 A1 |  if_e	add	fp, #20
0bdbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0bdc0     14 4E 85 A1 |  if_e	sub	fp, #20
0bdc4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bdc8     3C 00 90 5D |  if_ne	jmp	#LR__0948
0bdcc     A7 1E 02 FB | 	rdlong	local01, fp
0bdd0     0C 4E 05 F1 | 	add	fp, #12
0bdd4     A7 12 02 FB | 	rdlong	arg01, fp
0bdd8     0C 4E 85 F1 | 	sub	fp, #12
0bddc     09 13 52 F6 | 	abs	arg01, arg01 wc
0bde0     1F 26 C6 C9 |  if_b	decod	local05, #31
0bde4     00 26 06 36 |  if_ae	mov	local05, #0
0bde8     AC BD B0 FD | 	call	#__system___float_fromuns
0bdec     13 FB 61 F5 | 	xor	result1, local05
0bdf0     FD 14 02 F6 | 	mov	arg02, result1
0bdf4     0F 13 02 F6 | 	mov	arg01, local01
0bdf8     1F 14 E6 F4 | 	bitnot	arg02, #31
0bdfc     CC BD B0 FD | 	call	#__system___float_add
0be00     A7 FA 61 FC | 	wrlong	result1, fp
0be04     84 00 90 FD | 	jmp	#LR__0950
0be08                 | LR__0948
0be08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0be08     08 4E 05 F1 | 	add	fp, #8
0be0c     A7 1E 02 FB | 	rdlong	local01, fp
0be10     08 4E 85 F1 | 	sub	fp, #8
0be14     1E 1E 0E F2 | 	cmp	local01, #30 wz
0be18     14 4E 05 A1 |  if_e	add	fp, #20
0be1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0be20     14 4E 85 A1 |  if_e	sub	fp, #20
0be24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0be28     20 00 90 5D |  if_ne	jmp	#LR__0949
0be2c     A7 12 02 FB | 	rdlong	arg01, fp
0be30     0C 4E 05 F1 | 	add	fp, #12
0be34     A7 14 02 FB | 	rdlong	arg02, fp
0be38     0C 4E 85 F1 | 	sub	fp, #12
0be3c     1F 14 E6 F4 | 	bitnot	arg02, #31
0be40     88 BD B0 FD | 	call	#__system___float_add
0be44     A7 FA 61 FC | 	wrlong	result1, fp
0be48     40 00 90 FD | 	jmp	#LR__0950
0be4c                 | LR__0949
0be4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0be4c     08 4E 05 F1 | 	add	fp, #8
0be50     A7 1E 02 FB | 	rdlong	local01, fp
0be54     08 4E 85 F1 | 	sub	fp, #8
0be58     1F 1E 0E F2 | 	cmp	local01, #31 wz
0be5c     14 4E 05 51 |  if_ne	add	fp, #20
0be60     A7 22 02 5B |  if_ne	rdlong	local03, fp
0be64     14 4E 85 51 |  if_ne	sub	fp, #20
0be68     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0be6c     A7 06 68 AC |  if_e	wrlong	#3, fp
0be70     08 4E 05 A1 |  if_e	add	fp, #8
0be74     A7 FE 69 AC |  if_e	wrlong	#255, fp
0be78     08 4E 85 A1 |  if_e	sub	fp, #8
0be7c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0be80     08 4E 05 51 |  if_ne	add	fp, #8
0be84     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0be88     08 4E 85 51 |  if_ne	sub	fp, #8
0be8c                 | LR__0950
0be8c     A7 12 02 F6 | 	mov	arg01, fp
0be90     38 C9 BF FD | 	call	#_push
0be94     A7 F0 03 F6 | 	mov	ptra, fp
0be98     B2 00 A0 FD | 	call	#popregs_
0be9c                 | _do_minus_ret
0be9c     2D 00 64 FD | 	ret
0bea0                 | 
0bea0                 | ' 
0bea0                 | ' sub do_and 
0bea0                 | _do_and
0bea0     03 4A 05 F6 | 	mov	COUNT_, #3
0bea4     A8 00 A0 FD | 	call	#pushregs_
0bea8     18 F0 07 F1 | 	add	ptra, #24
0beac     84 C8 BF FD | 	call	#_pop
0beb0     FD 12 02 F6 | 	mov	arg01, result1
0beb4     FE 1E 02 F6 | 	mov	local01, result2
0beb8     FF 20 02 F6 | 	mov	local02, result3
0bebc     0C 4E 05 F1 | 	add	fp, #12
0bec0     A7 12 62 FC | 	wrlong	arg01, fp
0bec4     04 4E 05 F1 | 	add	fp, #4
0bec8     A7 1E 62 FC | 	wrlong	local01, fp
0becc     04 4E 05 F1 | 	add	fp, #4
0bed0     A7 20 62 FC | 	wrlong	local02, fp
0bed4     14 4E 85 F1 | 	sub	fp, #20
0bed8     58 C8 BF FD | 	call	#_pop
0bedc     FF 22 02 F6 | 	mov	local03, result3
0bee0     A7 FA 61 FC | 	wrlong	result1, fp
0bee4     04 4E 05 F1 | 	add	fp, #4
0bee8     A7 FC 61 FC | 	wrlong	result2, fp
0beec     04 4E 05 F1 | 	add	fp, #4
0bef0     A7 22 62 FC | 	wrlong	local03, fp
0bef4                 | ' 
0bef4                 | ' t2=pop()
0bef4                 | ' t1=pop()
0bef4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bef4     08 4E 85 F1 | 	sub	fp, #8
0bef8     1C 22 0E F2 | 	cmp	local03, #28 wz
0befc     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf00     A7 22 62 AC |  if_e	wrlong	local03, fp
0bf04     08 4E 05 A1 |  if_e	add	fp, #8
0bf08     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bf0c     08 4E 85 A1 |  if_e	sub	fp, #8
0bf10                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bf10     14 4E 05 F1 | 	add	fp, #20
0bf14     A7 22 02 FB | 	rdlong	local03, fp
0bf18     14 4E 85 F1 | 	sub	fp, #20
0bf1c     1C 22 0E F2 | 	cmp	local03, #28 wz
0bf20     18 00 90 5D |  if_ne	jmp	#LR__0960
0bf24     0C 4E 05 F1 | 	add	fp, #12
0bf28     A7 22 02 FB | 	rdlong	local03, fp
0bf2c     A7 22 62 FC | 	wrlong	local03, fp
0bf30     08 4E 05 F1 | 	add	fp, #8
0bf34     A7 3A 68 FC | 	wrlong	#29, fp
0bf38     14 4E 85 F1 | 	sub	fp, #20
0bf3c                 | LR__0960
0bf3c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0bf3c     08 4E 05 F1 | 	add	fp, #8
0bf40     A7 22 02 FB | 	rdlong	local03, fp
0bf44     08 4E 85 F1 | 	sub	fp, #8
0bf48     1F 22 0E F2 | 	cmp	local03, #31 wz
0bf4c     14 4E 05 51 |  if_ne	add	fp, #20
0bf50     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bf54     14 4E 85 51 |  if_ne	sub	fp, #20
0bf58     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bf5c     08 4E 05 51 |  if_ne	add	fp, #8
0bf60     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bf64     08 4E 85 51 |  if_ne	sub	fp, #8
0bf68     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bf6c     14 4E 05 51 |  if_ne	add	fp, #20
0bf70     14 4E 85 51 |  if_ne	sub	fp, #20
0bf74     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bf78     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bf7c     08 4E 05 A1 |  if_e	add	fp, #8
0bf80     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bf84     08 4E 85 A1 |  if_e	sub	fp, #8
0bf88     18 00 90 AD |  if_e	jmp	#LR__0961
0bf8c     A7 22 02 FB | 	rdlong	local03, fp
0bf90     0C 4E 05 F1 | 	add	fp, #12
0bf94     A7 1E 02 FB | 	rdlong	local01, fp
0bf98     0C 4E 85 F1 | 	sub	fp, #12
0bf9c     0F 23 02 F5 | 	and	local03, local01
0bfa0     A7 22 62 FC | 	wrlong	local03, fp
0bfa4                 | LR__0961
0bfa4     A7 12 02 F6 | 	mov	arg01, fp
0bfa8     20 C8 BF FD | 	call	#_push
0bfac     A7 F0 03 F6 | 	mov	ptra, fp
0bfb0     B2 00 A0 FD | 	call	#popregs_
0bfb4                 | _do_and_ret
0bfb4     2D 00 64 FD | 	ret
0bfb8                 | 
0bfb8                 | ' 
0bfb8                 | ' sub do_or 
0bfb8                 | _do_or
0bfb8     03 4A 05 F6 | 	mov	COUNT_, #3
0bfbc     A8 00 A0 FD | 	call	#pushregs_
0bfc0     18 F0 07 F1 | 	add	ptra, #24
0bfc4     6C C7 BF FD | 	call	#_pop
0bfc8     FD 12 02 F6 | 	mov	arg01, result1
0bfcc     FE 1E 02 F6 | 	mov	local01, result2
0bfd0     FF 20 02 F6 | 	mov	local02, result3
0bfd4     0C 4E 05 F1 | 	add	fp, #12
0bfd8     A7 12 62 FC | 	wrlong	arg01, fp
0bfdc     04 4E 05 F1 | 	add	fp, #4
0bfe0     A7 1E 62 FC | 	wrlong	local01, fp
0bfe4     04 4E 05 F1 | 	add	fp, #4
0bfe8     A7 20 62 FC | 	wrlong	local02, fp
0bfec     14 4E 85 F1 | 	sub	fp, #20
0bff0     40 C7 BF FD | 	call	#_pop
0bff4     FF 22 02 F6 | 	mov	local03, result3
0bff8     A7 FA 61 FC | 	wrlong	result1, fp
0bffc     04 4E 05 F1 | 	add	fp, #4
0c000     A7 FC 61 FC | 	wrlong	result2, fp
0c004     04 4E 05 F1 | 	add	fp, #4
0c008     A7 22 62 FC | 	wrlong	local03, fp
0c00c                 | ' 
0c00c                 | ' t2=pop()
0c00c                 | ' t1=pop()
0c00c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c00c     08 4E 85 F1 | 	sub	fp, #8
0c010     1C 22 0E F2 | 	cmp	local03, #28 wz
0c014     A7 22 02 AB |  if_e	rdlong	local03, fp
0c018     A7 22 62 AC |  if_e	wrlong	local03, fp
0c01c     08 4E 05 A1 |  if_e	add	fp, #8
0c020     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c024     08 4E 85 A1 |  if_e	sub	fp, #8
0c028                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c028     14 4E 05 F1 | 	add	fp, #20
0c02c     A7 22 02 FB | 	rdlong	local03, fp
0c030     14 4E 85 F1 | 	sub	fp, #20
0c034     1C 22 0E F2 | 	cmp	local03, #28 wz
0c038     18 00 90 5D |  if_ne	jmp	#LR__0970
0c03c     0C 4E 05 F1 | 	add	fp, #12
0c040     A7 22 02 FB | 	rdlong	local03, fp
0c044     A7 22 62 FC | 	wrlong	local03, fp
0c048     08 4E 05 F1 | 	add	fp, #8
0c04c     A7 3A 68 FC | 	wrlong	#29, fp
0c050     14 4E 85 F1 | 	sub	fp, #20
0c054                 | LR__0970
0c054                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0c054     08 4E 05 F1 | 	add	fp, #8
0c058     A7 22 02 FB | 	rdlong	local03, fp
0c05c     08 4E 85 F1 | 	sub	fp, #8
0c060     1F 22 0E F2 | 	cmp	local03, #31 wz
0c064     14 4E 05 51 |  if_ne	add	fp, #20
0c068     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c06c     14 4E 85 51 |  if_ne	sub	fp, #20
0c070     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c074     08 4E 05 51 |  if_ne	add	fp, #8
0c078     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c07c     08 4E 85 51 |  if_ne	sub	fp, #8
0c080     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c084     14 4E 05 51 |  if_ne	add	fp, #20
0c088     14 4E 85 51 |  if_ne	sub	fp, #20
0c08c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c090     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c094     08 4E 05 A1 |  if_e	add	fp, #8
0c098     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c09c     08 4E 85 A1 |  if_e	sub	fp, #8
0c0a0     18 00 90 AD |  if_e	jmp	#LR__0971
0c0a4     A7 22 02 FB | 	rdlong	local03, fp
0c0a8     0C 4E 05 F1 | 	add	fp, #12
0c0ac     A7 1E 02 FB | 	rdlong	local01, fp
0c0b0     0C 4E 85 F1 | 	sub	fp, #12
0c0b4     0F 23 42 F5 | 	or	local03, local01
0c0b8     A7 22 62 FC | 	wrlong	local03, fp
0c0bc                 | LR__0971
0c0bc     A7 12 02 F6 | 	mov	arg01, fp
0c0c0     08 C7 BF FD | 	call	#_push
0c0c4     A7 F0 03 F6 | 	mov	ptra, fp
0c0c8     B2 00 A0 FD | 	call	#popregs_
0c0cc                 | _do_or_ret
0c0cc     2D 00 64 FD | 	ret
0c0d0                 | 
0c0d0                 | ' 
0c0d0                 | ' sub do_mul
0c0d0                 | _do_mul
0c0d0     05 4A 05 F6 | 	mov	COUNT_, #5
0c0d4     A8 00 A0 FD | 	call	#pushregs_
0c0d8     18 F0 07 F1 | 	add	ptra, #24
0c0dc     54 C6 BF FD | 	call	#_pop
0c0e0     FD 1E 02 F6 | 	mov	local01, result1
0c0e4     FE 20 02 F6 | 	mov	local02, result2
0c0e8     FF 22 02 F6 | 	mov	local03, result3
0c0ec     0C 4E 05 F1 | 	add	fp, #12
0c0f0     A7 1E 62 FC | 	wrlong	local01, fp
0c0f4     04 4E 05 F1 | 	add	fp, #4
0c0f8     A7 20 62 FC | 	wrlong	local02, fp
0c0fc     04 4E 05 F1 | 	add	fp, #4
0c100     A7 22 62 FC | 	wrlong	local03, fp
0c104     14 4E 85 F1 | 	sub	fp, #20
0c108     28 C6 BF FD | 	call	#_pop
0c10c     FF 22 02 F6 | 	mov	local03, result3
0c110     A7 FA 61 FC | 	wrlong	result1, fp
0c114     04 4E 05 F1 | 	add	fp, #4
0c118     A7 FC 61 FC | 	wrlong	result2, fp
0c11c     04 4E 05 F1 | 	add	fp, #4
0c120     A7 22 62 FC | 	wrlong	local03, fp
0c124                 | ' 
0c124                 | ' t2=pop()
0c124                 | ' t1=pop()
0c124                 | ' 
0c124                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0c124     08 4E 85 F1 | 	sub	fp, #8
0c128     1D 22 0E F2 | 	cmp	local03, #29 wz
0c12c     14 4E 05 A1 |  if_e	add	fp, #20
0c130     A7 24 02 AB |  if_e	rdlong	local04, fp
0c134     14 4E 85 A1 |  if_e	sub	fp, #20
0c138     12 23 02 A6 |  if_e	mov	local03, local04
0c13c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c140     20 00 90 5D |  if_ne	jmp	#LR__0980
0c144     A7 20 02 FB | 	rdlong	local02, fp
0c148     0C 4E 05 F1 | 	add	fp, #12
0c14c     A7 22 02 FB | 	rdlong	local03, fp
0c150     11 21 02 FD | 	qmul	local02, local03
0c154     0C 4E 85 F1 | 	sub	fp, #12
0c158     18 1E 62 FD | 	getqx	local01
0c15c     A7 1E 62 FC | 	wrlong	local01, fp
0c160     C4 02 90 FD | 	jmp	#LR__0989
0c164                 | LR__0980
0c164                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0c164     08 4E 05 F1 | 	add	fp, #8
0c168     A7 1E 02 FB | 	rdlong	local01, fp
0c16c     08 4E 85 F1 | 	sub	fp, #8
0c170     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c174     14 4E 05 A1 |  if_e	add	fp, #20
0c178     A7 24 02 AB |  if_e	rdlong	local04, fp
0c17c     14 4E 85 A1 |  if_e	sub	fp, #20
0c180     12 23 02 A6 |  if_e	mov	local03, local04
0c184     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c188     2C 00 90 5D |  if_ne	jmp	#LR__0981
0c18c     A7 20 02 FB | 	rdlong	local02, fp
0c190     0C 4E 05 F1 | 	add	fp, #12
0c194     A7 22 02 FB | 	rdlong	local03, fp
0c198     11 21 02 FD | 	qmul	local02, local03
0c19c     0C 4E 85 F1 | 	sub	fp, #12
0c1a0     18 1E 62 FD | 	getqx	local01
0c1a4     A7 1E 62 FC | 	wrlong	local01, fp
0c1a8     08 4E 05 F1 | 	add	fp, #8
0c1ac     A7 38 68 FC | 	wrlong	#28, fp
0c1b0     08 4E 85 F1 | 	sub	fp, #8
0c1b4     70 02 90 FD | 	jmp	#LR__0989
0c1b8                 | LR__0981
0c1b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c1b8     08 4E 05 F1 | 	add	fp, #8
0c1bc     A7 1E 02 FB | 	rdlong	local01, fp
0c1c0     08 4E 85 F1 | 	sub	fp, #8
0c1c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c1c8     14 4E 05 A1 |  if_e	add	fp, #20
0c1cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0c1d0     14 4E 85 A1 |  if_e	sub	fp, #20
0c1d4     12 23 02 A6 |  if_e	mov	local03, local04
0c1d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c1dc     30 00 90 5D |  if_ne	jmp	#LR__0982
0c1e0     A7 12 02 FB | 	rdlong	arg01, fp
0c1e4     B0 B9 B0 FD | 	call	#__system___float_fromuns
0c1e8     FD 12 02 F6 | 	mov	arg01, result1
0c1ec     0C 4E 05 F1 | 	add	fp, #12
0c1f0     A7 14 02 FB | 	rdlong	arg02, fp
0c1f4     0C 4E 85 F1 | 	sub	fp, #12
0c1f8     C8 BC B0 FD | 	call	#__system___float_mul
0c1fc     A7 FA 61 FC | 	wrlong	result1, fp
0c200     08 4E 05 F1 | 	add	fp, #8
0c204     A7 3C 68 FC | 	wrlong	#30, fp
0c208     08 4E 85 F1 | 	sub	fp, #8
0c20c     18 02 90 FD | 	jmp	#LR__0989
0c210                 | LR__0982
0c210                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0c210     08 4E 05 F1 | 	add	fp, #8
0c214     A7 1E 02 FB | 	rdlong	local01, fp
0c218     08 4E 85 F1 | 	sub	fp, #8
0c21c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c220     14 4E 05 A1 |  if_e	add	fp, #20
0c224     A7 24 02 AB |  if_e	rdlong	local04, fp
0c228     14 4E 85 A1 |  if_e	sub	fp, #20
0c22c     12 23 02 A6 |  if_e	mov	local03, local04
0c230     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c234     20 00 90 5D |  if_ne	jmp	#LR__0983
0c238     A7 20 02 FB | 	rdlong	local02, fp
0c23c     0C 4E 05 F1 | 	add	fp, #12
0c240     A7 22 02 FB | 	rdlong	local03, fp
0c244     11 21 02 FD | 	qmul	local02, local03
0c248     0C 4E 85 F1 | 	sub	fp, #12
0c24c     18 1E 62 FD | 	getqx	local01
0c250     A7 1E 62 FC | 	wrlong	local01, fp
0c254     D0 01 90 FD | 	jmp	#LR__0989
0c258                 | LR__0983
0c258                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0c258     08 4E 05 F1 | 	add	fp, #8
0c25c     A7 1E 02 FB | 	rdlong	local01, fp
0c260     08 4E 85 F1 | 	sub	fp, #8
0c264     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c268     14 4E 05 A1 |  if_e	add	fp, #20
0c26c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c270     14 4E 85 A1 |  if_e	sub	fp, #20
0c274     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0c278     20 00 90 5D |  if_ne	jmp	#LR__0984
0c27c     A7 20 02 FB | 	rdlong	local02, fp
0c280     0C 4E 05 F1 | 	add	fp, #12
0c284     A7 22 02 FB | 	rdlong	local03, fp
0c288     11 21 02 FD | 	qmul	local02, local03
0c28c     0C 4E 85 F1 | 	sub	fp, #12
0c290     18 1E 62 FD | 	getqx	local01
0c294     A7 1E 62 FC | 	wrlong	local01, fp
0c298     8C 01 90 FD | 	jmp	#LR__0989
0c29c                 | LR__0984
0c29c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c29c     08 4E 05 F1 | 	add	fp, #8
0c2a0     A7 1E 02 FB | 	rdlong	local01, fp
0c2a4     08 4E 85 F1 | 	sub	fp, #8
0c2a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c2ac     14 4E 05 A1 |  if_e	add	fp, #20
0c2b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0c2b4     14 4E 85 A1 |  if_e	sub	fp, #20
0c2b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c2bc     40 00 90 5D |  if_ne	jmp	#LR__0985
0c2c0     A7 12 02 FB | 	rdlong	arg01, fp
0c2c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c2c8     1F 26 C6 C9 |  if_b	decod	local05, #31
0c2cc     00 26 06 36 |  if_ae	mov	local05, #0
0c2d0     C4 B8 B0 FD | 	call	#__system___float_fromuns
0c2d4     13 FB 61 F5 | 	xor	result1, local05
0c2d8     FD 12 02 F6 | 	mov	arg01, result1
0c2dc     0C 4E 05 F1 | 	add	fp, #12
0c2e0     A7 14 02 FB | 	rdlong	arg02, fp
0c2e4     0C 4E 85 F1 | 	sub	fp, #12
0c2e8     D8 BB B0 FD | 	call	#__system___float_mul
0c2ec     A7 FA 61 FC | 	wrlong	result1, fp
0c2f0     08 4E 05 F1 | 	add	fp, #8
0c2f4     A7 3C 68 FC | 	wrlong	#30, fp
0c2f8     08 4E 85 F1 | 	sub	fp, #8
0c2fc     28 01 90 FD | 	jmp	#LR__0989
0c300                 | LR__0985
0c300                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0c300     08 4E 05 F1 | 	add	fp, #8
0c304     A7 1E 02 FB | 	rdlong	local01, fp
0c308     08 4E 85 F1 | 	sub	fp, #8
0c30c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c310     14 4E 05 A1 |  if_e	add	fp, #20
0c314     A7 22 02 AB |  if_e	rdlong	local03, fp
0c318     14 4E 85 A1 |  if_e	sub	fp, #20
0c31c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c320     28 00 90 5D |  if_ne	jmp	#LR__0986
0c324     A7 1E 02 FB | 	rdlong	local01, fp
0c328     0C 4E 05 F1 | 	add	fp, #12
0c32c     A7 12 02 FB | 	rdlong	arg01, fp
0c330     0C 4E 85 F1 | 	sub	fp, #12
0c334     60 B8 B0 FD | 	call	#__system___float_fromuns
0c338     FD 14 02 F6 | 	mov	arg02, result1
0c33c     0F 13 02 F6 | 	mov	arg01, local01
0c340     80 BB B0 FD | 	call	#__system___float_mul
0c344     A7 FA 61 FC | 	wrlong	result1, fp
0c348     DC 00 90 FD | 	jmp	#LR__0989
0c34c                 | LR__0986
0c34c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0c34c     08 4E 05 F1 | 	add	fp, #8
0c350     A7 1E 02 FB | 	rdlong	local01, fp
0c354     08 4E 85 F1 | 	sub	fp, #8
0c358     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c35c     14 4E 05 A1 |  if_e	add	fp, #20
0c360     A7 22 02 AB |  if_e	rdlong	local03, fp
0c364     14 4E 85 A1 |  if_e	sub	fp, #20
0c368     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c36c     38 00 90 5D |  if_ne	jmp	#LR__0987
0c370     A7 1E 02 FB | 	rdlong	local01, fp
0c374     0C 4E 05 F1 | 	add	fp, #12
0c378     A7 12 02 FB | 	rdlong	arg01, fp
0c37c     0C 4E 85 F1 | 	sub	fp, #12
0c380     09 13 52 F6 | 	abs	arg01, arg01 wc
0c384     1F 26 C6 C9 |  if_b	decod	local05, #31
0c388     00 26 06 36 |  if_ae	mov	local05, #0
0c38c     08 B8 B0 FD | 	call	#__system___float_fromuns
0c390     13 FB 61 F5 | 	xor	result1, local05
0c394     FD 14 02 F6 | 	mov	arg02, result1
0c398     0F 13 02 F6 | 	mov	arg01, local01
0c39c     24 BB B0 FD | 	call	#__system___float_mul
0c3a0     A7 FA 61 FC | 	wrlong	result1, fp
0c3a4     80 00 90 FD | 	jmp	#LR__0989
0c3a8                 | LR__0987
0c3a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0c3a8     08 4E 05 F1 | 	add	fp, #8
0c3ac     A7 1E 02 FB | 	rdlong	local01, fp
0c3b0     08 4E 85 F1 | 	sub	fp, #8
0c3b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c3b8     14 4E 05 A1 |  if_e	add	fp, #20
0c3bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0c3c0     14 4E 85 A1 |  if_e	sub	fp, #20
0c3c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c3c8     1C 00 90 5D |  if_ne	jmp	#LR__0988
0c3cc     A7 12 02 FB | 	rdlong	arg01, fp
0c3d0     0C 4E 05 F1 | 	add	fp, #12
0c3d4     A7 14 02 FB | 	rdlong	arg02, fp
0c3d8     0C 4E 85 F1 | 	sub	fp, #12
0c3dc     E4 BA B0 FD | 	call	#__system___float_mul
0c3e0     A7 FA 61 FC | 	wrlong	result1, fp
0c3e4     40 00 90 FD | 	jmp	#LR__0989
0c3e8                 | LR__0988
0c3e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0c3e8     08 4E 05 F1 | 	add	fp, #8
0c3ec     A7 1E 02 FB | 	rdlong	local01, fp
0c3f0     08 4E 85 F1 | 	sub	fp, #8
0c3f4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c3f8     14 4E 05 51 |  if_ne	add	fp, #20
0c3fc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c400     14 4E 85 51 |  if_ne	sub	fp, #20
0c404     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c408     A7 10 68 AC |  if_e	wrlong	#8, fp
0c40c     08 4E 05 A1 |  if_e	add	fp, #8
0c410     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c414     08 4E 85 A1 |  if_e	sub	fp, #8
0c418     A7 12 68 5C |  if_ne	wrlong	#9, fp
0c41c     08 4E 05 51 |  if_ne	add	fp, #8
0c420     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c424     08 4E 85 51 |  if_ne	sub	fp, #8
0c428                 | LR__0989
0c428     A7 12 02 F6 | 	mov	arg01, fp
0c42c     9C C3 BF FD | 	call	#_push
0c430     A7 F0 03 F6 | 	mov	ptra, fp
0c434     B2 00 A0 FD | 	call	#popregs_
0c438                 | _do_mul_ret
0c438     2D 00 64 FD | 	ret
0c43c                 | 
0c43c                 | ' 
0c43c                 | ' sub do_div 
0c43c                 | _do_div
0c43c     01 4A 05 F6 | 	mov	COUNT_, #1
0c440     A8 00 A0 FD | 	call	#pushregs_
0c444     18 F0 07 F1 | 	add	ptra, #24
0c448     E8 C2 BF FD | 	call	#_pop
0c44c     FD 60 02 F6 | 	mov	muldivb_, result1
0c450     FE 5E 02 F6 | 	mov	muldiva_, result2
0c454     FF 1E 02 F6 | 	mov	local01, result3
0c458     0C 4E 05 F1 | 	add	fp, #12
0c45c     A7 60 62 FC | 	wrlong	muldivb_, fp
0c460     04 4E 05 F1 | 	add	fp, #4
0c464     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c468     04 4E 05 F1 | 	add	fp, #4
0c46c     A7 1E 62 FC | 	wrlong	local01, fp
0c470     14 4E 85 F1 | 	sub	fp, #20
0c474     BC C2 BF FD | 	call	#_pop
0c478     A7 FA 61 FC | 	wrlong	result1, fp
0c47c     04 4E 05 F1 | 	add	fp, #4
0c480     A7 FC 61 FC | 	wrlong	result2, fp
0c484     04 4E 05 F1 | 	add	fp, #4
0c488     A7 FE 61 FC | 	wrlong	result3, fp
0c48c                 | ' 
0c48c                 | ' t2=pop()
0c48c                 | ' t1=pop()
0c48c                 | ' 
0c48c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0c48c     08 4E 85 F1 | 	sub	fp, #8
0c490     1F FE 0D F2 | 	cmp	result3, #31 wz
0c494     14 4E 05 51 |  if_ne	add	fp, #20
0c498     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c49c     14 4E 85 51 |  if_ne	sub	fp, #20
0c4a0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c4a4     A7 14 68 AC |  if_e	wrlong	#10, fp
0c4a8     08 4E 05 A1 |  if_e	add	fp, #8
0c4ac     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c4b0     08 4E 85 A1 |  if_e	sub	fp, #8
0c4b4     90 01 90 AD |  if_e	jmp	#LR__0996
0c4b8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c4b8     08 4E 05 F1 | 	add	fp, #8
0c4bc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c4c0     08 4E 85 F1 | 	sub	fp, #8
0c4c4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c4c8     1C 00 90 5D |  if_ne	jmp	#LR__0990
0c4cc     08 4E 05 F1 | 	add	fp, #8
0c4d0     A7 38 68 FC | 	wrlong	#28, fp
0c4d4     08 4E 85 F1 | 	sub	fp, #8
0c4d8     A7 12 02 FB | 	rdlong	arg01, fp
0c4dc     00 14 06 F6 | 	mov	arg02, #0
0c4e0     A8 BE B0 FD | 	call	#__system___float_tointeger
0c4e4     A7 FA 61 FC | 	wrlong	result1, fp
0c4e8                 | LR__0990
0c4e8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c4e8     14 4E 05 F1 | 	add	fp, #20
0c4ec     A7 60 02 FB | 	rdlong	muldivb_, fp
0c4f0     14 4E 85 F1 | 	sub	fp, #20
0c4f4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c4f8     28 00 90 5D |  if_ne	jmp	#LR__0991
0c4fc     14 4E 05 F1 | 	add	fp, #20
0c500     A7 38 68 FC | 	wrlong	#28, fp
0c504     08 4E 85 F1 | 	sub	fp, #8
0c508     A7 12 02 FB | 	rdlong	arg01, fp
0c50c     0C 4E 85 F1 | 	sub	fp, #12
0c510     00 14 06 F6 | 	mov	arg02, #0
0c514     74 BE B0 FD | 	call	#__system___float_tointeger
0c518     0C 4E 05 F1 | 	add	fp, #12
0c51c     A7 FA 61 FC | 	wrlong	result1, fp
0c520     0C 4E 85 F1 | 	sub	fp, #12
0c524                 | LR__0991
0c524                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0c524     08 4E 05 F1 | 	add	fp, #8
0c528     A7 60 02 FB | 	rdlong	muldivb_, fp
0c52c     08 4E 85 F1 | 	sub	fp, #8
0c530     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c534     14 4E 05 A1 |  if_e	add	fp, #20
0c538     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c53c     14 4E 85 A1 |  if_e	sub	fp, #20
0c540     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c544     20 00 90 5D |  if_ne	jmp	#LR__0992
0c548     0C 4E 05 F1 | 	add	fp, #12
0c54c     A7 1E 02 FB | 	rdlong	local01, fp
0c550     0C 4E 85 F1 | 	sub	fp, #12
0c554     A7 60 02 FB | 	rdlong	muldivb_, fp
0c558     0F 61 12 FD | 	qdiv	muldivb_, local01
0c55c     18 1E 62 FD | 	getqx	local01
0c560     A7 1E 62 FC | 	wrlong	local01, fp
0c564     E0 00 90 FD | 	jmp	#LR__0996
0c568                 | LR__0992
0c568                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0c568     08 4E 05 F1 | 	add	fp, #8
0c56c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c570     08 4E 85 F1 | 	sub	fp, #8
0c574     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c578     14 4E 05 A1 |  if_e	add	fp, #20
0c57c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c580     14 4E 85 A1 |  if_e	sub	fp, #20
0c584     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c588     2C 00 90 5D |  if_ne	jmp	#LR__0993
0c58c     0C 4E 05 F1 | 	add	fp, #12
0c590     A7 1E 02 FB | 	rdlong	local01, fp
0c594     0C 4E 85 F1 | 	sub	fp, #12
0c598     A7 60 02 FB | 	rdlong	muldivb_, fp
0c59c     0F 61 12 FD | 	qdiv	muldivb_, local01
0c5a0     18 1E 62 FD | 	getqx	local01
0c5a4     A7 1E 62 FC | 	wrlong	local01, fp
0c5a8     08 4E 05 F1 | 	add	fp, #8
0c5ac     A7 38 68 FC | 	wrlong	#28, fp
0c5b0     08 4E 85 F1 | 	sub	fp, #8
0c5b4     90 00 90 FD | 	jmp	#LR__0996
0c5b8                 | LR__0993
0c5b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0c5b8     08 4E 05 F1 | 	add	fp, #8
0c5bc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5c0     08 4E 85 F1 | 	sub	fp, #8
0c5c4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c5c8     14 4E 05 A1 |  if_e	add	fp, #20
0c5cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c5d0     14 4E 85 A1 |  if_e	sub	fp, #20
0c5d4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c5d8     1C 00 90 5D |  if_ne	jmp	#LR__0994
0c5dc     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c5e0     0C 4E 05 F1 | 	add	fp, #12
0c5e4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5e8     0C 4E 85 F1 | 	sub	fp, #12
0c5ec     BA 00 A0 FD | 	call	#divide_
0c5f0     A7 60 62 FC | 	wrlong	muldivb_, fp
0c5f4     50 00 90 FD | 	jmp	#LR__0996
0c5f8                 | LR__0994
0c5f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0c5f8     08 4E 05 F1 | 	add	fp, #8
0c5fc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c600     08 4E 85 F1 | 	sub	fp, #8
0c604     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c608     14 4E 05 A1 |  if_e	add	fp, #20
0c60c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c610     14 4E 85 A1 |  if_e	sub	fp, #20
0c614     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c618     1C 00 90 5D |  if_ne	jmp	#LR__0995
0c61c     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c620     0C 4E 05 F1 | 	add	fp, #12
0c624     A7 60 02 FB | 	rdlong	muldivb_, fp
0c628     0C 4E 85 F1 | 	sub	fp, #12
0c62c     BA 00 A0 FD | 	call	#divide_
0c630     A7 60 62 FC | 	wrlong	muldivb_, fp
0c634     10 00 90 FD | 	jmp	#LR__0996
0c638                 | LR__0995
0c638     A7 16 68 FC | 	wrlong	#11, fp
0c63c     08 4E 05 F1 | 	add	fp, #8
0c640     A7 FE 69 FC | 	wrlong	#255, fp
0c644     08 4E 85 F1 | 	sub	fp, #8
0c648                 | LR__0996
0c648     A7 12 02 F6 | 	mov	arg01, fp
0c64c     7C C1 BF FD | 	call	#_push
0c650     A7 F0 03 F6 | 	mov	ptra, fp
0c654     B2 00 A0 FD | 	call	#popregs_
0c658                 | _do_div_ret
0c658     2D 00 64 FD | 	ret
0c65c                 | 
0c65c                 | ' 
0c65c                 | ' sub do_fdiv 
0c65c                 | _do_fdiv
0c65c     02 4A 05 F6 | 	mov	COUNT_, #2
0c660     A8 00 A0 FD | 	call	#pushregs_
0c664     18 F0 07 F1 | 	add	ptra, #24
0c668     C8 C0 BF FD | 	call	#_pop
0c66c     FD 14 02 F6 | 	mov	arg02, result1
0c670     FE 12 02 F6 | 	mov	arg01, result2
0c674     FF 1E 02 F6 | 	mov	local01, result3
0c678     0C 4E 05 F1 | 	add	fp, #12
0c67c     A7 14 62 FC | 	wrlong	arg02, fp
0c680     04 4E 05 F1 | 	add	fp, #4
0c684     A7 12 62 FC | 	wrlong	arg01, fp
0c688     04 4E 05 F1 | 	add	fp, #4
0c68c     A7 1E 62 FC | 	wrlong	local01, fp
0c690     14 4E 85 F1 | 	sub	fp, #20
0c694     9C C0 BF FD | 	call	#_pop
0c698     A7 FA 61 FC | 	wrlong	result1, fp
0c69c     04 4E 05 F1 | 	add	fp, #4
0c6a0     A7 FC 61 FC | 	wrlong	result2, fp
0c6a4     04 4E 05 F1 | 	add	fp, #4
0c6a8     A7 FE 61 FC | 	wrlong	result3, fp
0c6ac                 | ' 
0c6ac                 | ' t2=pop()
0c6ac                 | ' t1=pop()
0c6ac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0c6ac     08 4E 85 F1 | 	sub	fp, #8
0c6b0     1F FE 0D F2 | 	cmp	result3, #31 wz
0c6b4     14 4E 05 51 |  if_ne	add	fp, #20
0c6b8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c6bc     14 4E 85 51 |  if_ne	sub	fp, #20
0c6c0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c6c4     A7 14 68 AC |  if_e	wrlong	#10, fp
0c6c8     08 4E 05 A1 |  if_e	add	fp, #8
0c6cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c6d0     08 4E 85 A1 |  if_e	sub	fp, #8
0c6d4     38 01 90 AD |  if_e	jmp	#LR__1005
0c6d8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c6d8     08 4E 05 F1 | 	add	fp, #8
0c6dc     A7 14 02 FB | 	rdlong	arg02, fp
0c6e0     08 4E 85 F1 | 	sub	fp, #8
0c6e4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c6e8     28 00 90 5D |  if_ne	jmp	#LR__1000
0c6ec     08 4E 05 F1 | 	add	fp, #8
0c6f0     A7 3C 68 FC | 	wrlong	#30, fp
0c6f4     08 4E 85 F1 | 	sub	fp, #8
0c6f8     A7 12 02 FB | 	rdlong	arg01, fp
0c6fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0c700     1F 20 C6 C9 |  if_b	decod	local02, #31
0c704     00 20 06 36 |  if_ae	mov	local02, #0
0c708     8C B4 B0 FD | 	call	#__system___float_fromuns
0c70c     10 FB 61 F5 | 	xor	result1, local02
0c710     A7 FA 61 FC | 	wrlong	result1, fp
0c714                 | LR__1000
0c714                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0c714     08 4E 05 F1 | 	add	fp, #8
0c718     A7 14 02 FB | 	rdlong	arg02, fp
0c71c     08 4E 85 F1 | 	sub	fp, #8
0c720     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c724     18 00 90 5D |  if_ne	jmp	#LR__1001
0c728     08 4E 05 F1 | 	add	fp, #8
0c72c     A7 3C 68 FC | 	wrlong	#30, fp
0c730     08 4E 85 F1 | 	sub	fp, #8
0c734     A7 12 02 FB | 	rdlong	arg01, fp
0c738     5C B4 B0 FD | 	call	#__system___float_fromuns
0c73c     A7 FA 61 FC | 	wrlong	result1, fp
0c740                 | LR__1001
0c740                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c740     14 4E 05 F1 | 	add	fp, #20
0c744     A7 14 02 FB | 	rdlong	arg02, fp
0c748     14 4E 85 F1 | 	sub	fp, #20
0c74c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c750     34 00 90 5D |  if_ne	jmp	#LR__1002
0c754     14 4E 05 F1 | 	add	fp, #20
0c758     A7 3C 68 FC | 	wrlong	#30, fp
0c75c     08 4E 85 F1 | 	sub	fp, #8
0c760     A7 12 02 FB | 	rdlong	arg01, fp
0c764     0C 4E 85 F1 | 	sub	fp, #12
0c768     09 13 52 F6 | 	abs	arg01, arg01 wc
0c76c     1F 20 C6 C9 |  if_b	decod	local02, #31
0c770     00 20 06 36 |  if_ae	mov	local02, #0
0c774     20 B4 B0 FD | 	call	#__system___float_fromuns
0c778     10 FB 61 F5 | 	xor	result1, local02
0c77c     0C 4E 05 F1 | 	add	fp, #12
0c780     A7 FA 61 FC | 	wrlong	result1, fp
0c784     0C 4E 85 F1 | 	sub	fp, #12
0c788                 | LR__1002
0c788                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c788     14 4E 05 F1 | 	add	fp, #20
0c78c     A7 14 02 FB | 	rdlong	arg02, fp
0c790     14 4E 85 F1 | 	sub	fp, #20
0c794     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c798     24 00 90 5D |  if_ne	jmp	#LR__1003
0c79c     14 4E 05 F1 | 	add	fp, #20
0c7a0     A7 3C 68 FC | 	wrlong	#30, fp
0c7a4     08 4E 85 F1 | 	sub	fp, #8
0c7a8     A7 12 02 FB | 	rdlong	arg01, fp
0c7ac     0C 4E 85 F1 | 	sub	fp, #12
0c7b0     E4 B3 B0 FD | 	call	#__system___float_fromuns
0c7b4     0C 4E 05 F1 | 	add	fp, #12
0c7b8     A7 FA 61 FC | 	wrlong	result1, fp
0c7bc     0C 4E 85 F1 | 	sub	fp, #12
0c7c0                 | LR__1003
0c7c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0c7c0     08 4E 05 F1 | 	add	fp, #8
0c7c4     A7 14 02 FB | 	rdlong	arg02, fp
0c7c8     08 4E 85 F1 | 	sub	fp, #8
0c7cc     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c7d0     14 4E 05 A1 |  if_e	add	fp, #20
0c7d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c7d8     14 4E 85 A1 |  if_e	sub	fp, #20
0c7dc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c7e0     1C 00 90 5D |  if_ne	jmp	#LR__1004
0c7e4     A7 12 02 FB | 	rdlong	arg01, fp
0c7e8     0C 4E 05 F1 | 	add	fp, #12
0c7ec     A7 14 02 FB | 	rdlong	arg02, fp
0c7f0     0C 4E 85 F1 | 	sub	fp, #12
0c7f4     D0 B8 B0 FD | 	call	#__system___float_div
0c7f8     A7 FA 61 FC | 	wrlong	result1, fp
0c7fc     10 00 90 FD | 	jmp	#LR__1005
0c800                 | LR__1004
0c800     A7 16 68 FC | 	wrlong	#11, fp
0c804     08 4E 05 F1 | 	add	fp, #8
0c808     A7 FE 69 FC | 	wrlong	#255, fp
0c80c     08 4E 85 F1 | 	sub	fp, #8
0c810                 | LR__1005
0c810     A7 12 02 F6 | 	mov	arg01, fp
0c814     B4 BF BF FD | 	call	#_push
0c818     A7 F0 03 F6 | 	mov	ptra, fp
0c81c     B2 00 A0 FD | 	call	#popregs_
0c820                 | _do_fdiv_ret
0c820     2D 00 64 FD | 	ret
0c824                 | 
0c824                 | ' 
0c824                 | ' 
0c824                 | ' sub do_mod 
0c824                 | _do_mod
0c824     01 4A 05 F6 | 	mov	COUNT_, #1
0c828     A8 00 A0 FD | 	call	#pushregs_
0c82c     18 F0 07 F1 | 	add	ptra, #24
0c830     00 BF BF FD | 	call	#_pop
0c834     FD 60 02 F6 | 	mov	muldivb_, result1
0c838     FE 5E 02 F6 | 	mov	muldiva_, result2
0c83c     FF 1E 02 F6 | 	mov	local01, result3
0c840     0C 4E 05 F1 | 	add	fp, #12
0c844     A7 60 62 FC | 	wrlong	muldivb_, fp
0c848     04 4E 05 F1 | 	add	fp, #4
0c84c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c850     04 4E 05 F1 | 	add	fp, #4
0c854     A7 1E 62 FC | 	wrlong	local01, fp
0c858     14 4E 85 F1 | 	sub	fp, #20
0c85c     D4 BE BF FD | 	call	#_pop
0c860     A7 FA 61 FC | 	wrlong	result1, fp
0c864     04 4E 05 F1 | 	add	fp, #4
0c868     A7 FC 61 FC | 	wrlong	result2, fp
0c86c     04 4E 05 F1 | 	add	fp, #4
0c870     A7 FE 61 FC | 	wrlong	result3, fp
0c874                 | ' 
0c874                 | ' t2=pop()
0c874                 | ' t1=pop()
0c874                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c874     08 4E 85 F1 | 	sub	fp, #8
0c878     1F FE 0D F2 | 	cmp	result3, #31 wz
0c87c     14 4E 05 51 |  if_ne	add	fp, #20
0c880     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c884     14 4E 85 51 |  if_ne	sub	fp, #20
0c888     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c88c     A7 14 68 AC |  if_e	wrlong	#10, fp
0c890     08 4E 05 A1 |  if_e	add	fp, #8
0c894     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c898     08 4E 85 A1 |  if_e	sub	fp, #8
0c89c     90 01 90 AD |  if_e	jmp	#LR__1016
0c8a0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c8a0     08 4E 05 F1 | 	add	fp, #8
0c8a4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c8a8     08 4E 85 F1 | 	sub	fp, #8
0c8ac     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c8b0     1C 00 90 5D |  if_ne	jmp	#LR__1010
0c8b4     08 4E 05 F1 | 	add	fp, #8
0c8b8     A7 38 68 FC | 	wrlong	#28, fp
0c8bc     08 4E 85 F1 | 	sub	fp, #8
0c8c0     A7 12 02 FB | 	rdlong	arg01, fp
0c8c4     00 14 06 F6 | 	mov	arg02, #0
0c8c8     C0 BA B0 FD | 	call	#__system___float_tointeger
0c8cc     A7 FA 61 FC | 	wrlong	result1, fp
0c8d0                 | LR__1010
0c8d0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c8d0     14 4E 05 F1 | 	add	fp, #20
0c8d4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c8d8     14 4E 85 F1 | 	sub	fp, #20
0c8dc     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c8e0     28 00 90 5D |  if_ne	jmp	#LR__1011
0c8e4     14 4E 05 F1 | 	add	fp, #20
0c8e8     A7 38 68 FC | 	wrlong	#28, fp
0c8ec     08 4E 85 F1 | 	sub	fp, #8
0c8f0     A7 12 02 FB | 	rdlong	arg01, fp
0c8f4     0C 4E 85 F1 | 	sub	fp, #12
0c8f8     00 14 06 F6 | 	mov	arg02, #0
0c8fc     8C BA B0 FD | 	call	#__system___float_tointeger
0c900     0C 4E 05 F1 | 	add	fp, #12
0c904     A7 FA 61 FC | 	wrlong	result1, fp
0c908     0C 4E 85 F1 | 	sub	fp, #12
0c90c                 | LR__1011
0c90c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c90c     08 4E 05 F1 | 	add	fp, #8
0c910     A7 60 02 FB | 	rdlong	muldivb_, fp
0c914     08 4E 85 F1 | 	sub	fp, #8
0c918     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c91c     14 4E 05 A1 |  if_e	add	fp, #20
0c920     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c924     14 4E 85 A1 |  if_e	sub	fp, #20
0c928     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c92c     20 00 90 5D |  if_ne	jmp	#LR__1012
0c930     0C 4E 05 F1 | 	add	fp, #12
0c934     A7 1E 02 FB | 	rdlong	local01, fp
0c938     0C 4E 85 F1 | 	sub	fp, #12
0c93c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c940     0F 61 12 FD | 	qdiv	muldivb_, local01
0c944     19 1E 62 FD | 	getqy	local01
0c948     A7 1E 62 FC | 	wrlong	local01, fp
0c94c     E0 00 90 FD | 	jmp	#LR__1016
0c950                 | LR__1012
0c950                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c950     08 4E 05 F1 | 	add	fp, #8
0c954     A7 60 02 FB | 	rdlong	muldivb_, fp
0c958     08 4E 85 F1 | 	sub	fp, #8
0c95c     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c960     14 4E 05 A1 |  if_e	add	fp, #20
0c964     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c968     14 4E 85 A1 |  if_e	sub	fp, #20
0c96c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c970     2C 00 90 5D |  if_ne	jmp	#LR__1013
0c974     0C 4E 05 F1 | 	add	fp, #12
0c978     A7 1E 02 FB | 	rdlong	local01, fp
0c97c     0C 4E 85 F1 | 	sub	fp, #12
0c980     A7 60 02 FB | 	rdlong	muldivb_, fp
0c984     0F 61 12 FD | 	qdiv	muldivb_, local01
0c988     19 1E 62 FD | 	getqy	local01
0c98c     A7 1E 62 FC | 	wrlong	local01, fp
0c990     08 4E 05 F1 | 	add	fp, #8
0c994     A7 38 68 FC | 	wrlong	#28, fp
0c998     08 4E 85 F1 | 	sub	fp, #8
0c99c     90 00 90 FD | 	jmp	#LR__1016
0c9a0                 | LR__1013
0c9a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c9a0     08 4E 05 F1 | 	add	fp, #8
0c9a4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c9a8     08 4E 85 F1 | 	sub	fp, #8
0c9ac     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c9b0     14 4E 05 A1 |  if_e	add	fp, #20
0c9b4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c9b8     14 4E 85 A1 |  if_e	sub	fp, #20
0c9bc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c9c0     1C 00 90 5D |  if_ne	jmp	#LR__1014
0c9c4     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c9c8     0C 4E 05 F1 | 	add	fp, #12
0c9cc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c9d0     0C 4E 85 F1 | 	sub	fp, #12
0c9d4     BA 00 A0 FD | 	call	#divide_
0c9d8     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c9dc     50 00 90 FD | 	jmp	#LR__1016
0c9e0                 | LR__1014
0c9e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c9e0     08 4E 05 F1 | 	add	fp, #8
0c9e4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c9e8     08 4E 85 F1 | 	sub	fp, #8
0c9ec     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c9f0     14 4E 05 A1 |  if_e	add	fp, #20
0c9f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c9f8     14 4E 85 A1 |  if_e	sub	fp, #20
0c9fc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ca00     1C 00 90 5D |  if_ne	jmp	#LR__1015
0ca04     A7 5E 02 FB | 	rdlong	muldiva_, fp
0ca08     0C 4E 05 F1 | 	add	fp, #12
0ca0c     A7 60 02 FB | 	rdlong	muldivb_, fp
0ca10     0C 4E 85 F1 | 	sub	fp, #12
0ca14     BA 00 A0 FD | 	call	#divide_
0ca18     A7 5E 62 FC | 	wrlong	muldiva_, fp
0ca1c     10 00 90 FD | 	jmp	#LR__1016
0ca20                 | LR__1015
0ca20     A7 16 68 FC | 	wrlong	#11, fp
0ca24     08 4E 05 F1 | 	add	fp, #8
0ca28     A7 FE 69 FC | 	wrlong	#255, fp
0ca2c     08 4E 85 F1 | 	sub	fp, #8
0ca30                 | LR__1016
0ca30     A7 12 02 F6 | 	mov	arg01, fp
0ca34     94 BD BF FD | 	call	#_push
0ca38     A7 F0 03 F6 | 	mov	ptra, fp
0ca3c     B2 00 A0 FD | 	call	#popregs_
0ca40                 | _do_mod_ret
0ca40     2D 00 64 FD | 	ret
0ca44                 | 
0ca44                 | ' 
0ca44                 | ' sub do_shl 
0ca44                 | _do_shl
0ca44     03 4A 05 F6 | 	mov	COUNT_, #3
0ca48     A8 00 A0 FD | 	call	#pushregs_
0ca4c     18 F0 07 F1 | 	add	ptra, #24
0ca50     E0 BC BF FD | 	call	#_pop
0ca54     FD 12 02 F6 | 	mov	arg01, result1
0ca58     FE 1E 02 F6 | 	mov	local01, result2
0ca5c     FF 20 02 F6 | 	mov	local02, result3
0ca60     0C 4E 05 F1 | 	add	fp, #12
0ca64     A7 12 62 FC | 	wrlong	arg01, fp
0ca68     04 4E 05 F1 | 	add	fp, #4
0ca6c     A7 1E 62 FC | 	wrlong	local01, fp
0ca70     04 4E 05 F1 | 	add	fp, #4
0ca74     A7 20 62 FC | 	wrlong	local02, fp
0ca78     14 4E 85 F1 | 	sub	fp, #20
0ca7c     B4 BC BF FD | 	call	#_pop
0ca80     FF 22 02 F6 | 	mov	local03, result3
0ca84     A7 FA 61 FC | 	wrlong	result1, fp
0ca88     04 4E 05 F1 | 	add	fp, #4
0ca8c     A7 FC 61 FC | 	wrlong	result2, fp
0ca90     04 4E 05 F1 | 	add	fp, #4
0ca94     A7 22 62 FC | 	wrlong	local03, fp
0ca98                 | ' 
0ca98                 | ' t2=pop()
0ca98                 | ' t1=pop()
0ca98                 | ' 
0ca98                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ca98     08 4E 85 F1 | 	sub	fp, #8
0ca9c     1C 22 0E F2 | 	cmp	local03, #28 wz
0caa0     A7 22 02 AB |  if_e	rdlong	local03, fp
0caa4     A7 22 62 AC |  if_e	wrlong	local03, fp
0caa8     08 4E 05 A1 |  if_e	add	fp, #8
0caac     A7 3A 68 AC |  if_e	wrlong	#29, fp
0cab0     08 4E 85 A1 |  if_e	sub	fp, #8
0cab4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0cab4     14 4E 05 F1 | 	add	fp, #20
0cab8     A7 22 02 FB | 	rdlong	local03, fp
0cabc     14 4E 85 F1 | 	sub	fp, #20
0cac0     1C 22 0E F2 | 	cmp	local03, #28 wz
0cac4     18 00 90 5D |  if_ne	jmp	#LR__1020
0cac8     0C 4E 05 F1 | 	add	fp, #12
0cacc     A7 22 02 FB | 	rdlong	local03, fp
0cad0     A7 22 62 FC | 	wrlong	local03, fp
0cad4     08 4E 05 F1 | 	add	fp, #8
0cad8     A7 3A 68 FC | 	wrlong	#29, fp
0cadc     14 4E 85 F1 | 	sub	fp, #20
0cae0                 | LR__1020
0cae0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0cae0     08 4E 05 F1 | 	add	fp, #8
0cae4     A7 22 02 FB | 	rdlong	local03, fp
0cae8     08 4E 85 F1 | 	sub	fp, #8
0caec     1F 22 0E F2 | 	cmp	local03, #31 wz
0caf0     14 4E 05 51 |  if_ne	add	fp, #20
0caf4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0caf8     14 4E 85 51 |  if_ne	sub	fp, #20
0cafc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0cb00     08 4E 05 51 |  if_ne	add	fp, #8
0cb04     A7 22 02 5B |  if_ne	rdlong	local03, fp
0cb08     08 4E 85 51 |  if_ne	sub	fp, #8
0cb0c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0cb10     14 4E 05 51 |  if_ne	add	fp, #20
0cb14     14 4E 85 51 |  if_ne	sub	fp, #20
0cb18     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0cb1c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0cb20     08 4E 05 A1 |  if_e	add	fp, #8
0cb24     A7 FE 69 AC |  if_e	wrlong	#255, fp
0cb28     08 4E 85 A1 |  if_e	sub	fp, #8
0cb2c     18 00 90 AD |  if_e	jmp	#LR__1021
0cb30     A7 22 02 FB | 	rdlong	local03, fp
0cb34     0C 4E 05 F1 | 	add	fp, #12
0cb38     A7 1E 02 FB | 	rdlong	local01, fp
0cb3c     0C 4E 85 F1 | 	sub	fp, #12
0cb40     0F 23 62 F0 | 	shl	local03, local01
0cb44     A7 22 62 FC | 	wrlong	local03, fp
0cb48                 | LR__1021
0cb48     A7 12 02 F6 | 	mov	arg01, fp
0cb4c     7C BC BF FD | 	call	#_push
0cb50     A7 F0 03 F6 | 	mov	ptra, fp
0cb54     B2 00 A0 FD | 	call	#popregs_
0cb58                 | _do_shl_ret
0cb58     2D 00 64 FD | 	ret
0cb5c                 | 
0cb5c                 | ' 
0cb5c                 | ' sub do_shr 
0cb5c                 | _do_shr
0cb5c     03 4A 05 F6 | 	mov	COUNT_, #3
0cb60     A8 00 A0 FD | 	call	#pushregs_
0cb64     18 F0 07 F1 | 	add	ptra, #24
0cb68     C8 BB BF FD | 	call	#_pop
0cb6c     FD 12 02 F6 | 	mov	arg01, result1
0cb70     FE 1E 02 F6 | 	mov	local01, result2
0cb74     FF 20 02 F6 | 	mov	local02, result3
0cb78     0C 4E 05 F1 | 	add	fp, #12
0cb7c     A7 12 62 FC | 	wrlong	arg01, fp
0cb80     04 4E 05 F1 | 	add	fp, #4
0cb84     A7 1E 62 FC | 	wrlong	local01, fp
0cb88     04 4E 05 F1 | 	add	fp, #4
0cb8c     A7 20 62 FC | 	wrlong	local02, fp
0cb90     14 4E 85 F1 | 	sub	fp, #20
0cb94     9C BB BF FD | 	call	#_pop
0cb98     FF 22 02 F6 | 	mov	local03, result3
0cb9c     A7 FA 61 FC | 	wrlong	result1, fp
0cba0     04 4E 05 F1 | 	add	fp, #4
0cba4     A7 FC 61 FC | 	wrlong	result2, fp
0cba8     04 4E 05 F1 | 	add	fp, #4
0cbac     A7 22 62 FC | 	wrlong	local03, fp
0cbb0                 | ' t2=pop()
0cbb0                 | ' t1=pop()
0cbb0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0cbb0     08 4E 85 F1 | 	sub	fp, #8
0cbb4     1C 22 0E F2 | 	cmp	local03, #28 wz
0cbb8     A7 22 02 AB |  if_e	rdlong	local03, fp
0cbbc     A7 22 62 AC |  if_e	wrlong	local03, fp
0cbc0     08 4E 05 A1 |  if_e	add	fp, #8
0cbc4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0cbc8     08 4E 85 A1 |  if_e	sub	fp, #8
0cbcc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0cbcc     14 4E 05 F1 | 	add	fp, #20
0cbd0     A7 22 02 FB | 	rdlong	local03, fp
0cbd4     14 4E 85 F1 | 	sub	fp, #20
0cbd8     1C 22 0E F2 | 	cmp	local03, #28 wz
0cbdc     18 00 90 5D |  if_ne	jmp	#LR__1030
0cbe0     0C 4E 05 F1 | 	add	fp, #12
0cbe4     A7 22 02 FB | 	rdlong	local03, fp
0cbe8     A7 22 62 FC | 	wrlong	local03, fp
0cbec     08 4E 05 F1 | 	add	fp, #8
0cbf0     A7 3A 68 FC | 	wrlong	#29, fp
0cbf4     14 4E 85 F1 | 	sub	fp, #20
0cbf8                 | LR__1030
0cbf8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0cbf8     08 4E 05 F1 | 	add	fp, #8
0cbfc     A7 22 02 FB | 	rdlong	local03, fp
0cc00     08 4E 85 F1 | 	sub	fp, #8
0cc04     1F 22 0E F2 | 	cmp	local03, #31 wz
0cc08     14 4E 05 51 |  if_ne	add	fp, #20
0cc0c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0cc10     14 4E 85 51 |  if_ne	sub	fp, #20
0cc14     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0cc18     08 4E 05 51 |  if_ne	add	fp, #8
0cc1c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0cc20     08 4E 85 51 |  if_ne	sub	fp, #8
0cc24     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0cc28     14 4E 05 51 |  if_ne	add	fp, #20
0cc2c     14 4E 85 51 |  if_ne	sub	fp, #20
0cc30     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0cc34     A7 0C 68 AC |  if_e	wrlong	#6, fp
0cc38     08 4E 05 A1 |  if_e	add	fp, #8
0cc3c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0cc40     08 4E 85 A1 |  if_e	sub	fp, #8
0cc44     18 00 90 AD |  if_e	jmp	#LR__1031
0cc48     A7 22 02 FB | 	rdlong	local03, fp
0cc4c     0C 4E 05 F1 | 	add	fp, #12
0cc50     A7 1E 02 FB | 	rdlong	local01, fp
0cc54     0C 4E 85 F1 | 	sub	fp, #12
0cc58     0F 23 42 F0 | 	shr	local03, local01
0cc5c     A7 22 62 FC | 	wrlong	local03, fp
0cc60                 | LR__1031
0cc60     A7 12 02 F6 | 	mov	arg01, fp
0cc64     64 BB BF FD | 	call	#_push
0cc68     A7 F0 03 F6 | 	mov	ptra, fp
0cc6c     B2 00 A0 FD | 	call	#popregs_
0cc70                 | _do_shr_ret
0cc70     2D 00 64 FD | 	ret
0cc74                 | 
0cc74                 | ' 
0cc74                 | ' sub do_power 
0cc74                 | _do_power
0cc74     02 4A 05 F6 | 	mov	COUNT_, #2
0cc78     A8 00 A0 FD | 	call	#pushregs_
0cc7c     18 F0 07 F1 | 	add	ptra, #24
0cc80     B0 BA BF FD | 	call	#_pop
0cc84     FD 14 02 F6 | 	mov	arg02, result1
0cc88     FE 12 02 F6 | 	mov	arg01, result2
0cc8c     FF 1E 02 F6 | 	mov	local01, result3
0cc90     0C 4E 05 F1 | 	add	fp, #12
0cc94     A7 14 62 FC | 	wrlong	arg02, fp
0cc98     04 4E 05 F1 | 	add	fp, #4
0cc9c     A7 12 62 FC | 	wrlong	arg01, fp
0cca0     04 4E 05 F1 | 	add	fp, #4
0cca4     A7 1E 62 FC | 	wrlong	local01, fp
0cca8     14 4E 85 F1 | 	sub	fp, #20
0ccac     84 BA BF FD | 	call	#_pop
0ccb0     A7 FA 61 FC | 	wrlong	result1, fp
0ccb4     04 4E 05 F1 | 	add	fp, #4
0ccb8     A7 FC 61 FC | 	wrlong	result2, fp
0ccbc     04 4E 05 F1 | 	add	fp, #4
0ccc0     A7 FE 61 FC | 	wrlong	result3, fp
0ccc4                 | ' t2=pop()
0ccc4                 | ' t1=pop()
0ccc4                 | ' 
0ccc4                 | ' 
0ccc4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ccc4     08 4E 85 F1 | 	sub	fp, #8
0ccc8     1F FE 0D F2 | 	cmp	result3, #31 wz
0cccc     14 4E 05 51 |  if_ne	add	fp, #20
0ccd0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ccd4     14 4E 85 51 |  if_ne	sub	fp, #20
0ccd8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ccdc     A7 18 68 AC |  if_e	wrlong	#12, fp
0cce0     08 4E 05 A1 |  if_e	add	fp, #8
0cce4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0cce8     08 4E 85 A1 |  if_e	sub	fp, #8
0ccec     38 01 90 AD |  if_e	jmp	#LR__1045
0ccf0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ccf0     08 4E 05 F1 | 	add	fp, #8
0ccf4     A7 14 02 FB | 	rdlong	arg02, fp
0ccf8     08 4E 85 F1 | 	sub	fp, #8
0ccfc     1C 14 0E F2 | 	cmp	arg02, #28 wz
0cd00     28 00 90 5D |  if_ne	jmp	#LR__1040
0cd04     08 4E 05 F1 | 	add	fp, #8
0cd08     A7 3C 68 FC | 	wrlong	#30, fp
0cd0c     08 4E 85 F1 | 	sub	fp, #8
0cd10     A7 12 02 FB | 	rdlong	arg01, fp
0cd14     09 13 52 F6 | 	abs	arg01, arg01 wc
0cd18     1F 20 C6 C9 |  if_b	decod	local02, #31
0cd1c     00 20 06 36 |  if_ae	mov	local02, #0
0cd20     74 AE B0 FD | 	call	#__system___float_fromuns
0cd24     10 FB 61 F5 | 	xor	result1, local02
0cd28     A7 FA 61 FC | 	wrlong	result1, fp
0cd2c                 | LR__1040
0cd2c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0cd2c     08 4E 05 F1 | 	add	fp, #8
0cd30     A7 14 02 FB | 	rdlong	arg02, fp
0cd34     08 4E 85 F1 | 	sub	fp, #8
0cd38     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cd3c     18 00 90 5D |  if_ne	jmp	#LR__1041
0cd40     08 4E 05 F1 | 	add	fp, #8
0cd44     A7 3C 68 FC | 	wrlong	#30, fp
0cd48     08 4E 85 F1 | 	sub	fp, #8
0cd4c     A7 12 02 FB | 	rdlong	arg01, fp
0cd50     44 AE B0 FD | 	call	#__system___float_fromuns
0cd54     A7 FA 61 FC | 	wrlong	result1, fp
0cd58                 | LR__1041
0cd58                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0cd58     14 4E 05 F1 | 	add	fp, #20
0cd5c     A7 14 02 FB | 	rdlong	arg02, fp
0cd60     14 4E 85 F1 | 	sub	fp, #20
0cd64     1C 14 0E F2 | 	cmp	arg02, #28 wz
0cd68     34 00 90 5D |  if_ne	jmp	#LR__1042
0cd6c     14 4E 05 F1 | 	add	fp, #20
0cd70     A7 3C 68 FC | 	wrlong	#30, fp
0cd74     08 4E 85 F1 | 	sub	fp, #8
0cd78     A7 12 02 FB | 	rdlong	arg01, fp
0cd7c     0C 4E 85 F1 | 	sub	fp, #12
0cd80     09 13 52 F6 | 	abs	arg01, arg01 wc
0cd84     1F 20 C6 C9 |  if_b	decod	local02, #31
0cd88     00 20 06 36 |  if_ae	mov	local02, #0
0cd8c     08 AE B0 FD | 	call	#__system___float_fromuns
0cd90     10 FB 61 F5 | 	xor	result1, local02
0cd94     0C 4E 05 F1 | 	add	fp, #12
0cd98     A7 FA 61 FC | 	wrlong	result1, fp
0cd9c     0C 4E 85 F1 | 	sub	fp, #12
0cda0                 | LR__1042
0cda0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0cda0     14 4E 05 F1 | 	add	fp, #20
0cda4     A7 14 02 FB | 	rdlong	arg02, fp
0cda8     14 4E 85 F1 | 	sub	fp, #20
0cdac     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cdb0     24 00 90 5D |  if_ne	jmp	#LR__1043
0cdb4     14 4E 05 F1 | 	add	fp, #20
0cdb8     A7 3C 68 FC | 	wrlong	#30, fp
0cdbc     08 4E 85 F1 | 	sub	fp, #8
0cdc0     A7 12 02 FB | 	rdlong	arg01, fp
0cdc4     0C 4E 85 F1 | 	sub	fp, #12
0cdc8     CC AD B0 FD | 	call	#__system___float_fromuns
0cdcc     0C 4E 05 F1 | 	add	fp, #12
0cdd0     A7 FA 61 FC | 	wrlong	result1, fp
0cdd4     0C 4E 85 F1 | 	sub	fp, #12
0cdd8                 | LR__1043
0cdd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0cdd8     08 4E 05 F1 | 	add	fp, #8
0cddc     A7 14 02 FB | 	rdlong	arg02, fp
0cde0     08 4E 85 F1 | 	sub	fp, #8
0cde4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0cde8     14 4E 05 A1 |  if_e	add	fp, #20
0cdec     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cdf0     14 4E 85 A1 |  if_e	sub	fp, #20
0cdf4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0cdf8     1C 00 90 5D |  if_ne	jmp	#LR__1044
0cdfc     A7 12 02 FB | 	rdlong	arg01, fp
0ce00     0C 4E 05 F1 | 	add	fp, #12
0ce04     A7 14 02 FB | 	rdlong	arg02, fp
0ce08     0C 4E 85 F1 | 	sub	fp, #12
0ce0c     20 BD B0 FD | 	call	#__system____builtin_powf
0ce10     A7 FA 61 FC | 	wrlong	result1, fp
0ce14     10 00 90 FD | 	jmp	#LR__1045
0ce18                 | LR__1044
0ce18     A7 1A 68 FC | 	wrlong	#13, fp
0ce1c     08 4E 05 F1 | 	add	fp, #8
0ce20     A7 FE 69 FC | 	wrlong	#255, fp
0ce24     08 4E 85 F1 | 	sub	fp, #8
0ce28                 | LR__1045
0ce28     A7 12 02 F6 | 	mov	arg01, fp
0ce2c     9C B9 BF FD | 	call	#_push
0ce30     A7 F0 03 F6 | 	mov	ptra, fp
0ce34     B2 00 A0 FD | 	call	#popregs_
0ce38                 | _do_power_ret
0ce38     2D 00 64 FD | 	ret
0ce3c                 | 
0ce3c                 | ' 
0ce3c                 | ' 
0ce3c                 | ' sub do_eq
0ce3c                 | _do_eq
0ce3c     05 4A 05 F6 | 	mov	COUNT_, #5
0ce40     A8 00 A0 FD | 	call	#pushregs_
0ce44     18 F0 07 F1 | 	add	ptra, #24
0ce48     E8 B8 BF FD | 	call	#_pop
0ce4c     FD 1E 02 F6 | 	mov	local01, result1
0ce50     FE 20 02 F6 | 	mov	local02, result2
0ce54     FF 22 02 F6 | 	mov	local03, result3
0ce58     0C 4E 05 F1 | 	add	fp, #12
0ce5c     A7 1E 62 FC | 	wrlong	local01, fp
0ce60     04 4E 05 F1 | 	add	fp, #4
0ce64     A7 20 62 FC | 	wrlong	local02, fp
0ce68     04 4E 05 F1 | 	add	fp, #4
0ce6c     A7 22 62 FC | 	wrlong	local03, fp
0ce70     14 4E 85 F1 | 	sub	fp, #20
0ce74     BC B8 BF FD | 	call	#_pop
0ce78     FF 22 02 F6 | 	mov	local03, result3
0ce7c     A7 FA 61 FC | 	wrlong	result1, fp
0ce80     04 4E 05 F1 | 	add	fp, #4
0ce84     A7 FC 61 FC | 	wrlong	result2, fp
0ce88     04 4E 05 F1 | 	add	fp, #4
0ce8c     A7 22 62 FC | 	wrlong	local03, fp
0ce90                 | ' t2=pop()
0ce90                 | ' t1=pop()
0ce90                 | ' 
0ce90                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0ce90     08 4E 85 F1 | 	sub	fp, #8
0ce94     1F 22 0E F2 | 	cmp	local03, #31 wz
0ce98     14 4E 05 A1 |  if_e	add	fp, #20
0ce9c     A7 24 02 AB |  if_e	rdlong	local04, fp
0cea0     14 4E 85 A1 |  if_e	sub	fp, #20
0cea4     12 23 02 A6 |  if_e	mov	local03, local04
0cea8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ceac     28 00 90 5D |  if_ne	jmp	#LR__1050
0ceb0     00 1E 06 F6 | 	mov	local01, #0
0ceb4     A7 12 02 FB | 	rdlong	arg01, fp
0ceb8     0C 4E 05 F1 | 	add	fp, #12
0cebc     A7 14 02 FB | 	rdlong	arg02, fp
0cec0     0C 4E 85 F1 | 	sub	fp, #12
0cec4     10 86 B0 FD | 	call	#__system___string_cmp
0cec8     00 FA 0D F2 | 	cmp	result1, #0 wz
0cecc     00 1E 26 A6 |  if_e	not	local01, #0
0ced0     A7 1E 62 FC | 	wrlong	local01, fp
0ced4     04 03 90 FD | 	jmp	#LR__1060
0ced8                 | LR__1050
0ced8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0ced8     08 4E 05 F1 | 	add	fp, #8
0cedc     A7 1E 02 FB | 	rdlong	local01, fp
0cee0     08 4E 85 F1 | 	sub	fp, #8
0cee4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cee8     14 4E 05 A1 |  if_e	add	fp, #20
0ceec     A7 24 02 AB |  if_e	rdlong	local04, fp
0cef0     14 4E 85 A1 |  if_e	sub	fp, #20
0cef4     12 23 02 A6 |  if_e	mov	local03, local04
0cef8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cefc     2C 00 90 5D |  if_ne	jmp	#LR__1051
0cf00     00 1E 06 F6 | 	mov	local01, #0
0cf04     A7 12 02 FB | 	rdlong	arg01, fp
0cf08     0C 4E 05 F1 | 	add	fp, #12
0cf0c     A7 14 02 FB | 	rdlong	arg02, fp
0cf10     0C 4E 85 F1 | 	sub	fp, #12
0cf14     01 16 06 F6 | 	mov	arg03, #1
0cf18     DC B3 B0 FD | 	call	#__system___float_cmp
0cf1c     00 FA 0D F2 | 	cmp	result1, #0 wz
0cf20     00 1E 26 A6 |  if_e	not	local01, #0
0cf24     A7 1E 62 FC | 	wrlong	local01, fp
0cf28     B0 02 90 FD | 	jmp	#LR__1060
0cf2c                 | LR__1051
0cf2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0cf2c     08 4E 05 F1 | 	add	fp, #8
0cf30     A7 1E 02 FB | 	rdlong	local01, fp
0cf34     08 4E 85 F1 | 	sub	fp, #8
0cf38     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cf3c     14 4E 05 A1 |  if_e	add	fp, #20
0cf40     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf44     14 4E 85 A1 |  if_e	sub	fp, #20
0cf48     12 23 02 A6 |  if_e	mov	local03, local04
0cf4c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf50     48 00 90 5D |  if_ne	jmp	#LR__1052
0cf54     00 1E 06 F6 | 	mov	local01, #0
0cf58     A7 20 02 FB | 	rdlong	local02, fp
0cf5c     0C 4E 05 F1 | 	add	fp, #12
0cf60     A7 12 02 FB | 	rdlong	arg01, fp
0cf64     0C 4E 85 F1 | 	sub	fp, #12
0cf68     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf6c     1F 26 C6 C9 |  if_b	decod	local05, #31
0cf70     00 26 06 36 |  if_ae	mov	local05, #0
0cf74     20 AC B0 FD | 	call	#__system___float_fromuns
0cf78     13 FB 61 F5 | 	xor	result1, local05
0cf7c     FD 14 02 F6 | 	mov	arg02, result1
0cf80     10 13 02 F6 | 	mov	arg01, local02
0cf84     01 16 06 F6 | 	mov	arg03, #1
0cf88     6C B3 B0 FD | 	call	#__system___float_cmp
0cf8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0cf90     00 1E 26 A6 |  if_e	not	local01, #0
0cf94     A7 1E 62 FC | 	wrlong	local01, fp
0cf98     40 02 90 FD | 	jmp	#LR__1060
0cf9c                 | LR__1052
0cf9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0cf9c     08 4E 05 F1 | 	add	fp, #8
0cfa0     A7 1E 02 FB | 	rdlong	local01, fp
0cfa4     08 4E 85 F1 | 	sub	fp, #8
0cfa8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cfac     14 4E 05 A1 |  if_e	add	fp, #20
0cfb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0cfb4     14 4E 85 A1 |  if_e	sub	fp, #20
0cfb8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cfbc     38 00 90 5D |  if_ne	jmp	#LR__1053
0cfc0     00 1E 06 F6 | 	mov	local01, #0
0cfc4     A7 20 02 FB | 	rdlong	local02, fp
0cfc8     0C 4E 05 F1 | 	add	fp, #12
0cfcc     A7 12 02 FB | 	rdlong	arg01, fp
0cfd0     0C 4E 85 F1 | 	sub	fp, #12
0cfd4     C0 AB B0 FD | 	call	#__system___float_fromuns
0cfd8     FD 14 02 F6 | 	mov	arg02, result1
0cfdc     10 13 02 F6 | 	mov	arg01, local02
0cfe0     01 16 06 F6 | 	mov	arg03, #1
0cfe4     10 B3 B0 FD | 	call	#__system___float_cmp
0cfe8     00 FA 0D F2 | 	cmp	result1, #0 wz
0cfec     00 1E 26 A6 |  if_e	not	local01, #0
0cff0     A7 1E 62 FC | 	wrlong	local01, fp
0cff4     E4 01 90 FD | 	jmp	#LR__1060
0cff8                 | LR__1053
0cff8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0cff8     08 4E 05 F1 | 	add	fp, #8
0cffc     A7 1E 02 FB | 	rdlong	local01, fp
0d000     08 4E 85 F1 | 	sub	fp, #8
0d004     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d008     14 4E 05 A1 |  if_e	add	fp, #20
0d00c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d010     14 4E 85 A1 |  if_e	sub	fp, #20
0d014     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d018     44 00 90 5D |  if_ne	jmp	#LR__1054
0d01c     00 1E 06 F6 | 	mov	local01, #0
0d020     A7 12 02 FB | 	rdlong	arg01, fp
0d024     09 13 52 F6 | 	abs	arg01, arg01 wc
0d028     1F 26 C6 C9 |  if_b	decod	local05, #31
0d02c     00 26 06 36 |  if_ae	mov	local05, #0
0d030     64 AB B0 FD | 	call	#__system___float_fromuns
0d034     13 FB 61 F5 | 	xor	result1, local05
0d038     FD 12 02 F6 | 	mov	arg01, result1
0d03c     0C 4E 05 F1 | 	add	fp, #12
0d040     A7 14 02 FB | 	rdlong	arg02, fp
0d044     0C 4E 85 F1 | 	sub	fp, #12
0d048     01 16 06 F6 | 	mov	arg03, #1
0d04c     A8 B2 B0 FD | 	call	#__system___float_cmp
0d050     00 FA 0D F2 | 	cmp	result1, #0 wz
0d054     00 1E 26 A6 |  if_e	not	local01, #0
0d058     A7 1E 62 FC | 	wrlong	local01, fp
0d05c     7C 01 90 FD | 	jmp	#LR__1060
0d060                 | LR__1054
0d060                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0d060     08 4E 05 F1 | 	add	fp, #8
0d064     A7 1E 02 FB | 	rdlong	local01, fp
0d068     08 4E 85 F1 | 	sub	fp, #8
0d06c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d070     14 4E 05 A1 |  if_e	add	fp, #20
0d074     A7 22 02 AB |  if_e	rdlong	local03, fp
0d078     14 4E 85 A1 |  if_e	sub	fp, #20
0d07c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d080     24 00 90 5D |  if_ne	jmp	#LR__1055
0d084     00 1E 06 F6 | 	mov	local01, #0
0d088     A7 20 02 FB | 	rdlong	local02, fp
0d08c     0C 4E 05 F1 | 	add	fp, #12
0d090     A7 22 02 FB | 	rdlong	local03, fp
0d094     0C 4E 85 F1 | 	sub	fp, #12
0d098     11 21 0A F2 | 	cmp	local02, local03 wz
0d09c     01 1E 66 A6 |  if_e	neg	local01, #1
0d0a0     A7 1E 62 FC | 	wrlong	local01, fp
0d0a4     34 01 90 FD | 	jmp	#LR__1060
0d0a8                 | LR__1055
0d0a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0d0a8     08 4E 05 F1 | 	add	fp, #8
0d0ac     A7 1E 02 FB | 	rdlong	local01, fp
0d0b0     08 4E 85 F1 | 	sub	fp, #8
0d0b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d0b8     14 4E 05 A1 |  if_e	add	fp, #20
0d0bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d0c0     14 4E 85 A1 |  if_e	sub	fp, #20
0d0c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d0c8     24 00 90 5D |  if_ne	jmp	#LR__1056
0d0cc     00 1E 06 F6 | 	mov	local01, #0
0d0d0     A7 20 02 FB | 	rdlong	local02, fp
0d0d4     0C 4E 05 F1 | 	add	fp, #12
0d0d8     A7 22 02 FB | 	rdlong	local03, fp
0d0dc     0C 4E 85 F1 | 	sub	fp, #12
0d0e0     11 21 0A F2 | 	cmp	local02, local03 wz
0d0e4     01 1E 66 A6 |  if_e	neg	local01, #1
0d0e8     A7 1E 62 FC | 	wrlong	local01, fp
0d0ec     EC 00 90 FD | 	jmp	#LR__1060
0d0f0                 | LR__1056
0d0f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0d0f0     08 4E 05 F1 | 	add	fp, #8
0d0f4     A7 1E 02 FB | 	rdlong	local01, fp
0d0f8     08 4E 85 F1 | 	sub	fp, #8
0d0fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d100     14 4E 05 A1 |  if_e	add	fp, #20
0d104     A7 22 02 AB |  if_e	rdlong	local03, fp
0d108     14 4E 85 A1 |  if_e	sub	fp, #20
0d10c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d110     34 00 90 5D |  if_ne	jmp	#LR__1057
0d114     00 1E 06 F6 | 	mov	local01, #0
0d118     A7 12 02 FB | 	rdlong	arg01, fp
0d11c     78 AA B0 FD | 	call	#__system___float_fromuns
0d120     FD 12 02 F6 | 	mov	arg01, result1
0d124     0C 4E 05 F1 | 	add	fp, #12
0d128     A7 14 02 FB | 	rdlong	arg02, fp
0d12c     0C 4E 85 F1 | 	sub	fp, #12
0d130     01 16 06 F6 | 	mov	arg03, #1
0d134     C0 B1 B0 FD | 	call	#__system___float_cmp
0d138     00 FA 0D F2 | 	cmp	result1, #0 wz
0d13c     00 1E 26 A6 |  if_e	not	local01, #0
0d140     A7 1E 62 FC | 	wrlong	local01, fp
0d144     94 00 90 FD | 	jmp	#LR__1060
0d148                 | LR__1057
0d148                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0d148     08 4E 05 F1 | 	add	fp, #8
0d14c     A7 1E 02 FB | 	rdlong	local01, fp
0d150     08 4E 85 F1 | 	sub	fp, #8
0d154     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d158     14 4E 05 A1 |  if_e	add	fp, #20
0d15c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d160     14 4E 85 A1 |  if_e	sub	fp, #20
0d164     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d168     24 00 90 5D |  if_ne	jmp	#LR__1058
0d16c     00 1E 06 F6 | 	mov	local01, #0
0d170     A7 20 02 FB | 	rdlong	local02, fp
0d174     0C 4E 05 F1 | 	add	fp, #12
0d178     A7 22 02 FB | 	rdlong	local03, fp
0d17c     0C 4E 85 F1 | 	sub	fp, #12
0d180     11 21 0A F2 | 	cmp	local02, local03 wz
0d184     01 1E 66 A6 |  if_e	neg	local01, #1
0d188     A7 1E 62 FC | 	wrlong	local01, fp
0d18c     4C 00 90 FD | 	jmp	#LR__1060
0d190                 | LR__1058
0d190                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0d190     08 4E 05 F1 | 	add	fp, #8
0d194     A7 1E 02 FB | 	rdlong	local01, fp
0d198     08 4E 85 F1 | 	sub	fp, #8
0d19c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d1a0     14 4E 05 A1 |  if_e	add	fp, #20
0d1a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d1a8     14 4E 85 A1 |  if_e	sub	fp, #20
0d1ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d1b0     24 00 90 5D |  if_ne	jmp	#LR__1059
0d1b4     00 1E 06 F6 | 	mov	local01, #0
0d1b8     A7 20 02 FB | 	rdlong	local02, fp
0d1bc     0C 4E 05 F1 | 	add	fp, #12
0d1c0     A7 22 02 FB | 	rdlong	local03, fp
0d1c4     0C 4E 85 F1 | 	sub	fp, #12
0d1c8     11 21 0A F2 | 	cmp	local02, local03 wz
0d1cc     01 1E 66 A6 |  if_e	neg	local01, #1
0d1d0     A7 1E 62 FC | 	wrlong	local01, fp
0d1d4     04 00 90 FD | 	jmp	#LR__1060
0d1d8                 | LR__1059
0d1d8     A7 00 68 FC | 	wrlong	#0, fp
0d1dc                 | LR__1060
0d1dc     08 4E 05 F1 | 	add	fp, #8
0d1e0     A7 38 68 FC | 	wrlong	#28, fp
0d1e4     08 4E 85 F1 | 	sub	fp, #8
0d1e8     A7 12 02 F6 | 	mov	arg01, fp
0d1ec     DC B5 BF FD | 	call	#_push
0d1f0     A7 F0 03 F6 | 	mov	ptra, fp
0d1f4     B2 00 A0 FD | 	call	#popregs_
0d1f8                 | _do_eq_ret
0d1f8     2D 00 64 FD | 	ret
0d1fc                 | 
0d1fc                 | ' 
0d1fc                 | ' sub do_gt
0d1fc                 | _do_gt
0d1fc     05 4A 05 F6 | 	mov	COUNT_, #5
0d200     A8 00 A0 FD | 	call	#pushregs_
0d204     18 F0 07 F1 | 	add	ptra, #24
0d208     28 B5 BF FD | 	call	#_pop
0d20c     FD 1E 02 F6 | 	mov	local01, result1
0d210     FE 20 02 F6 | 	mov	local02, result2
0d214     FF 22 02 F6 | 	mov	local03, result3
0d218     0C 4E 05 F1 | 	add	fp, #12
0d21c     A7 1E 62 FC | 	wrlong	local01, fp
0d220     04 4E 05 F1 | 	add	fp, #4
0d224     A7 20 62 FC | 	wrlong	local02, fp
0d228     04 4E 05 F1 | 	add	fp, #4
0d22c     A7 22 62 FC | 	wrlong	local03, fp
0d230     14 4E 85 F1 | 	sub	fp, #20
0d234     FC B4 BF FD | 	call	#_pop
0d238     FF 22 02 F6 | 	mov	local03, result3
0d23c     A7 FA 61 FC | 	wrlong	result1, fp
0d240     04 4E 05 F1 | 	add	fp, #4
0d244     A7 FC 61 FC | 	wrlong	result2, fp
0d248     04 4E 05 F1 | 	add	fp, #4
0d24c     A7 22 62 FC | 	wrlong	local03, fp
0d250                 | ' t2=pop()
0d250                 | ' t1=pop()
0d250                 | ' 
0d250                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0d250     08 4E 85 F1 | 	sub	fp, #8
0d254     1F 22 0E F2 | 	cmp	local03, #31 wz
0d258     14 4E 05 A1 |  if_e	add	fp, #20
0d25c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d260     14 4E 85 A1 |  if_e	sub	fp, #20
0d264     12 23 02 A6 |  if_e	mov	local03, local04
0d268     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d26c     28 00 90 5D |  if_ne	jmp	#LR__1070
0d270     00 1E 06 F6 | 	mov	local01, #0
0d274     A7 12 02 FB | 	rdlong	arg01, fp
0d278     0C 4E 05 F1 | 	add	fp, #12
0d27c     A7 14 02 FB | 	rdlong	arg02, fp
0d280     0C 4E 85 F1 | 	sub	fp, #12
0d284     50 82 B0 FD | 	call	#__system___string_cmp
0d288     01 FA 55 F2 | 	cmps	result1, #1 wc
0d28c     00 1E 26 36 |  if_ae	not	local01, #0
0d290     A7 1E 62 FC | 	wrlong	local01, fp
0d294     04 03 90 FD | 	jmp	#LR__1080
0d298                 | LR__1070
0d298                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0d298     08 4E 05 F1 | 	add	fp, #8
0d29c     A7 1E 02 FB | 	rdlong	local01, fp
0d2a0     08 4E 85 F1 | 	sub	fp, #8
0d2a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d2a8     14 4E 05 A1 |  if_e	add	fp, #20
0d2ac     A7 24 02 AB |  if_e	rdlong	local04, fp
0d2b0     14 4E 85 A1 |  if_e	sub	fp, #20
0d2b4     12 23 02 A6 |  if_e	mov	local03, local04
0d2b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d2bc     2C 00 90 5D |  if_ne	jmp	#LR__1071
0d2c0     00 1E 06 F6 | 	mov	local01, #0
0d2c4     A7 12 02 FB | 	rdlong	arg01, fp
0d2c8     0C 4E 05 F1 | 	add	fp, #12
0d2cc     A7 14 02 FB | 	rdlong	arg02, fp
0d2d0     0C 4E 85 F1 | 	sub	fp, #12
0d2d4     01 16 66 F6 | 	neg	arg03, #1
0d2d8     1C B0 B0 FD | 	call	#__system___float_cmp
0d2dc     01 FA 55 F2 | 	cmps	result1, #1 wc
0d2e0     00 1E 26 36 |  if_ae	not	local01, #0
0d2e4     A7 1E 62 FC | 	wrlong	local01, fp
0d2e8     B0 02 90 FD | 	jmp	#LR__1080
0d2ec                 | LR__1071
0d2ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0d2ec     08 4E 05 F1 | 	add	fp, #8
0d2f0     A7 1E 02 FB | 	rdlong	local01, fp
0d2f4     08 4E 85 F1 | 	sub	fp, #8
0d2f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d2fc     14 4E 05 A1 |  if_e	add	fp, #20
0d300     A7 24 02 AB |  if_e	rdlong	local04, fp
0d304     14 4E 85 A1 |  if_e	sub	fp, #20
0d308     12 23 02 A6 |  if_e	mov	local03, local04
0d30c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d310     48 00 90 5D |  if_ne	jmp	#LR__1072
0d314     00 1E 06 F6 | 	mov	local01, #0
0d318     A7 20 02 FB | 	rdlong	local02, fp
0d31c     0C 4E 05 F1 | 	add	fp, #12
0d320     A7 12 02 FB | 	rdlong	arg01, fp
0d324     0C 4E 85 F1 | 	sub	fp, #12
0d328     09 13 52 F6 | 	abs	arg01, arg01 wc
0d32c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d330     00 26 06 36 |  if_ae	mov	local05, #0
0d334     60 A8 B0 FD | 	call	#__system___float_fromuns
0d338     13 FB 61 F5 | 	xor	result1, local05
0d33c     FD 14 02 F6 | 	mov	arg02, result1
0d340     10 13 02 F6 | 	mov	arg01, local02
0d344     01 16 66 F6 | 	neg	arg03, #1
0d348     AC AF B0 FD | 	call	#__system___float_cmp
0d34c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d350     00 1E 26 36 |  if_ae	not	local01, #0
0d354     A7 1E 62 FC | 	wrlong	local01, fp
0d358     40 02 90 FD | 	jmp	#LR__1080
0d35c                 | LR__1072
0d35c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0d35c     08 4E 05 F1 | 	add	fp, #8
0d360     A7 1E 02 FB | 	rdlong	local01, fp
0d364     08 4E 85 F1 | 	sub	fp, #8
0d368     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d36c     14 4E 05 A1 |  if_e	add	fp, #20
0d370     A7 24 02 AB |  if_e	rdlong	local04, fp
0d374     14 4E 85 A1 |  if_e	sub	fp, #20
0d378     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d37c     38 00 90 5D |  if_ne	jmp	#LR__1073
0d380     00 1E 06 F6 | 	mov	local01, #0
0d384     A7 20 02 FB | 	rdlong	local02, fp
0d388     0C 4E 05 F1 | 	add	fp, #12
0d38c     A7 12 02 FB | 	rdlong	arg01, fp
0d390     0C 4E 85 F1 | 	sub	fp, #12
0d394     00 A8 B0 FD | 	call	#__system___float_fromuns
0d398     FD 14 02 F6 | 	mov	arg02, result1
0d39c     10 13 02 F6 | 	mov	arg01, local02
0d3a0     01 16 66 F6 | 	neg	arg03, #1
0d3a4     50 AF B0 FD | 	call	#__system___float_cmp
0d3a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d3ac     00 1E 26 36 |  if_ae	not	local01, #0
0d3b0     A7 1E 62 FC | 	wrlong	local01, fp
0d3b4     E4 01 90 FD | 	jmp	#LR__1080
0d3b8                 | LR__1073
0d3b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0d3b8     08 4E 05 F1 | 	add	fp, #8
0d3bc     A7 1E 02 FB | 	rdlong	local01, fp
0d3c0     08 4E 85 F1 | 	sub	fp, #8
0d3c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d3c8     14 4E 05 A1 |  if_e	add	fp, #20
0d3cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d3d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d3d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d3d8     44 00 90 5D |  if_ne	jmp	#LR__1074
0d3dc     00 1E 06 F6 | 	mov	local01, #0
0d3e0     A7 12 02 FB | 	rdlong	arg01, fp
0d3e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d3e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d3ec     00 26 06 36 |  if_ae	mov	local05, #0
0d3f0     A4 A7 B0 FD | 	call	#__system___float_fromuns
0d3f4     13 FB 61 F5 | 	xor	result1, local05
0d3f8     FD 12 02 F6 | 	mov	arg01, result1
0d3fc     0C 4E 05 F1 | 	add	fp, #12
0d400     A7 14 02 FB | 	rdlong	arg02, fp
0d404     0C 4E 85 F1 | 	sub	fp, #12
0d408     01 16 66 F6 | 	neg	arg03, #1
0d40c     E8 AE B0 FD | 	call	#__system___float_cmp
0d410     01 FA 55 F2 | 	cmps	result1, #1 wc
0d414     00 1E 26 36 |  if_ae	not	local01, #0
0d418     A7 1E 62 FC | 	wrlong	local01, fp
0d41c     7C 01 90 FD | 	jmp	#LR__1080
0d420                 | LR__1074
0d420                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0d420     08 4E 05 F1 | 	add	fp, #8
0d424     A7 1E 02 FB | 	rdlong	local01, fp
0d428     08 4E 85 F1 | 	sub	fp, #8
0d42c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d430     14 4E 05 A1 |  if_e	add	fp, #20
0d434     A7 22 02 AB |  if_e	rdlong	local03, fp
0d438     14 4E 85 A1 |  if_e	sub	fp, #20
0d43c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d440     24 00 90 5D |  if_ne	jmp	#LR__1075
0d444     00 1E 06 F6 | 	mov	local01, #0
0d448     A7 20 02 FB | 	rdlong	local02, fp
0d44c     0C 4E 05 F1 | 	add	fp, #12
0d450     A7 22 02 FB | 	rdlong	local03, fp
0d454     0C 4E 85 F1 | 	sub	fp, #12
0d458     11 21 5A F2 | 	cmps	local02, local03 wcz
0d45c     01 1E 66 16 |  if_a	neg	local01, #1
0d460     A7 1E 62 FC | 	wrlong	local01, fp
0d464     34 01 90 FD | 	jmp	#LR__1080
0d468                 | LR__1075
0d468                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0d468     08 4E 05 F1 | 	add	fp, #8
0d46c     A7 1E 02 FB | 	rdlong	local01, fp
0d470     08 4E 85 F1 | 	sub	fp, #8
0d474     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d478     14 4E 05 A1 |  if_e	add	fp, #20
0d47c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d480     14 4E 85 A1 |  if_e	sub	fp, #20
0d484     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d488     24 00 90 5D |  if_ne	jmp	#LR__1076
0d48c     00 1E 06 F6 | 	mov	local01, #0
0d490     A7 20 02 FB | 	rdlong	local02, fp
0d494     0C 4E 05 F1 | 	add	fp, #12
0d498     A7 22 02 FB | 	rdlong	local03, fp
0d49c     0C 4E 85 F1 | 	sub	fp, #12
0d4a0     11 21 5A F2 | 	cmps	local02, local03 wcz
0d4a4     01 1E 66 16 |  if_a	neg	local01, #1
0d4a8     A7 1E 62 FC | 	wrlong	local01, fp
0d4ac     EC 00 90 FD | 	jmp	#LR__1080
0d4b0                 | LR__1076
0d4b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0d4b0     08 4E 05 F1 | 	add	fp, #8
0d4b4     A7 1E 02 FB | 	rdlong	local01, fp
0d4b8     08 4E 85 F1 | 	sub	fp, #8
0d4bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d4c0     14 4E 05 A1 |  if_e	add	fp, #20
0d4c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d4c8     14 4E 85 A1 |  if_e	sub	fp, #20
0d4cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d4d0     34 00 90 5D |  if_ne	jmp	#LR__1077
0d4d4     00 1E 06 F6 | 	mov	local01, #0
0d4d8     A7 12 02 FB | 	rdlong	arg01, fp
0d4dc     B8 A6 B0 FD | 	call	#__system___float_fromuns
0d4e0     FD 12 02 F6 | 	mov	arg01, result1
0d4e4     0C 4E 05 F1 | 	add	fp, #12
0d4e8     A7 14 02 FB | 	rdlong	arg02, fp
0d4ec     0C 4E 85 F1 | 	sub	fp, #12
0d4f0     01 16 66 F6 | 	neg	arg03, #1
0d4f4     00 AE B0 FD | 	call	#__system___float_cmp
0d4f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4fc     00 1E 26 36 |  if_ae	not	local01, #0
0d500     A7 1E 62 FC | 	wrlong	local01, fp
0d504     94 00 90 FD | 	jmp	#LR__1080
0d508                 | LR__1077
0d508                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0d508     08 4E 05 F1 | 	add	fp, #8
0d50c     A7 1E 02 FB | 	rdlong	local01, fp
0d510     08 4E 85 F1 | 	sub	fp, #8
0d514     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d518     14 4E 05 A1 |  if_e	add	fp, #20
0d51c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d520     14 4E 85 A1 |  if_e	sub	fp, #20
0d524     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d528     24 00 90 5D |  if_ne	jmp	#LR__1078
0d52c     00 1E 06 F6 | 	mov	local01, #0
0d530     A7 20 02 FB | 	rdlong	local02, fp
0d534     0C 4E 05 F1 | 	add	fp, #12
0d538     A7 22 02 FB | 	rdlong	local03, fp
0d53c     0C 4E 85 F1 | 	sub	fp, #12
0d540     11 21 5A F2 | 	cmps	local02, local03 wcz
0d544     01 1E 66 16 |  if_a	neg	local01, #1
0d548     A7 1E 62 FC | 	wrlong	local01, fp
0d54c     4C 00 90 FD | 	jmp	#LR__1080
0d550                 | LR__1078
0d550                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0d550     08 4E 05 F1 | 	add	fp, #8
0d554     A7 1E 02 FB | 	rdlong	local01, fp
0d558     08 4E 85 F1 | 	sub	fp, #8
0d55c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d560     14 4E 05 A1 |  if_e	add	fp, #20
0d564     A7 22 02 AB |  if_e	rdlong	local03, fp
0d568     14 4E 85 A1 |  if_e	sub	fp, #20
0d56c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d570     24 00 90 5D |  if_ne	jmp	#LR__1079
0d574     00 1E 06 F6 | 	mov	local01, #0
0d578     A7 20 02 FB | 	rdlong	local02, fp
0d57c     0C 4E 05 F1 | 	add	fp, #12
0d580     A7 22 02 FB | 	rdlong	local03, fp
0d584     0C 4E 85 F1 | 	sub	fp, #12
0d588     11 21 1A F2 | 	cmp	local02, local03 wcz
0d58c     01 1E 66 16 |  if_a	neg	local01, #1
0d590     A7 1E 62 FC | 	wrlong	local01, fp
0d594     04 00 90 FD | 	jmp	#LR__1080
0d598                 | LR__1079
0d598     A7 00 68 FC | 	wrlong	#0, fp
0d59c                 | LR__1080
0d59c     08 4E 05 F1 | 	add	fp, #8
0d5a0     A7 38 68 FC | 	wrlong	#28, fp
0d5a4     08 4E 85 F1 | 	sub	fp, #8
0d5a8     A7 12 02 F6 | 	mov	arg01, fp
0d5ac     1C B2 BF FD | 	call	#_push
0d5b0     A7 F0 03 F6 | 	mov	ptra, fp
0d5b4     B2 00 A0 FD | 	call	#popregs_
0d5b8                 | _do_gt_ret
0d5b8     2D 00 64 FD | 	ret
0d5bc                 | 
0d5bc                 | ' 
0d5bc                 | ' sub do_lt
0d5bc                 | _do_lt
0d5bc     05 4A 05 F6 | 	mov	COUNT_, #5
0d5c0     A8 00 A0 FD | 	call	#pushregs_
0d5c4     18 F0 07 F1 | 	add	ptra, #24
0d5c8     68 B1 BF FD | 	call	#_pop
0d5cc     FD 1E 02 F6 | 	mov	local01, result1
0d5d0     FE 20 02 F6 | 	mov	local02, result2
0d5d4     FF 22 02 F6 | 	mov	local03, result3
0d5d8     0C 4E 05 F1 | 	add	fp, #12
0d5dc     A7 1E 62 FC | 	wrlong	local01, fp
0d5e0     04 4E 05 F1 | 	add	fp, #4
0d5e4     A7 20 62 FC | 	wrlong	local02, fp
0d5e8     04 4E 05 F1 | 	add	fp, #4
0d5ec     A7 22 62 FC | 	wrlong	local03, fp
0d5f0     14 4E 85 F1 | 	sub	fp, #20
0d5f4     3C B1 BF FD | 	call	#_pop
0d5f8     FF 22 02 F6 | 	mov	local03, result3
0d5fc     A7 FA 61 FC | 	wrlong	result1, fp
0d600     04 4E 05 F1 | 	add	fp, #4
0d604     A7 FC 61 FC | 	wrlong	result2, fp
0d608     04 4E 05 F1 | 	add	fp, #4
0d60c     A7 22 62 FC | 	wrlong	local03, fp
0d610                 | ' t2=pop()
0d610                 | ' t1=pop()
0d610                 | ' 
0d610                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0d610     08 4E 85 F1 | 	sub	fp, #8
0d614     1F 22 0E F2 | 	cmp	local03, #31 wz
0d618     14 4E 05 A1 |  if_e	add	fp, #20
0d61c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d620     14 4E 85 A1 |  if_e	sub	fp, #20
0d624     12 23 02 A6 |  if_e	mov	local03, local04
0d628     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d62c     28 00 90 5D |  if_ne	jmp	#LR__1090
0d630     00 1E 06 F6 | 	mov	local01, #0
0d634     A7 12 02 FB | 	rdlong	arg01, fp
0d638     0C 4E 05 F1 | 	add	fp, #12
0d63c     A7 14 02 FB | 	rdlong	arg02, fp
0d640     0C 4E 85 F1 | 	sub	fp, #12
0d644     90 7E B0 FD | 	call	#__system___string_cmp
0d648     00 FA 55 F2 | 	cmps	result1, #0 wc
0d64c     00 1E 26 C6 |  if_b	not	local01, #0
0d650     A7 1E 62 FC | 	wrlong	local01, fp
0d654     F4 02 90 FD | 	jmp	#LR__1100
0d658                 | LR__1090
0d658                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0d658     08 4E 05 F1 | 	add	fp, #8
0d65c     A7 1E 02 FB | 	rdlong	local01, fp
0d660     08 4E 85 F1 | 	sub	fp, #8
0d664     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d668     14 4E 05 A1 |  if_e	add	fp, #20
0d66c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d670     14 4E 85 A1 |  if_e	sub	fp, #20
0d674     12 23 02 A6 |  if_e	mov	local03, local04
0d678     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d67c     2C 00 90 5D |  if_ne	jmp	#LR__1091
0d680     00 1E 06 F6 | 	mov	local01, #0
0d684     A7 12 02 FB | 	rdlong	arg01, fp
0d688     0C 4E 05 F1 | 	add	fp, #12
0d68c     A7 14 02 FB | 	rdlong	arg02, fp
0d690     0C 4E 85 F1 | 	sub	fp, #12
0d694     01 16 06 F6 | 	mov	arg03, #1
0d698     5C AC B0 FD | 	call	#__system___float_cmp
0d69c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d6a0     00 1E 26 C6 |  if_b	not	local01, #0
0d6a4     A7 1E 62 FC | 	wrlong	local01, fp
0d6a8     A0 02 90 FD | 	jmp	#LR__1100
0d6ac                 | LR__1091
0d6ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0d6ac     08 4E 05 F1 | 	add	fp, #8
0d6b0     A7 1E 02 FB | 	rdlong	local01, fp
0d6b4     08 4E 85 F1 | 	sub	fp, #8
0d6b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d6bc     14 4E 05 A1 |  if_e	add	fp, #20
0d6c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d6c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d6c8     12 23 02 A6 |  if_e	mov	local03, local04
0d6cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d6d0     48 00 90 5D |  if_ne	jmp	#LR__1092
0d6d4     00 1E 06 F6 | 	mov	local01, #0
0d6d8     A7 20 02 FB | 	rdlong	local02, fp
0d6dc     0C 4E 05 F1 | 	add	fp, #12
0d6e0     A7 12 02 FB | 	rdlong	arg01, fp
0d6e4     0C 4E 85 F1 | 	sub	fp, #12
0d6e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6ec     1F 26 C6 C9 |  if_b	decod	local05, #31
0d6f0     00 26 06 36 |  if_ae	mov	local05, #0
0d6f4     A0 A4 B0 FD | 	call	#__system___float_fromuns
0d6f8     13 FB 61 F5 | 	xor	result1, local05
0d6fc     FD 14 02 F6 | 	mov	arg02, result1
0d700     10 13 02 F6 | 	mov	arg01, local02
0d704     01 16 06 F6 | 	mov	arg03, #1
0d708     EC AB B0 FD | 	call	#__system___float_cmp
0d70c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d710     00 1E 26 C6 |  if_b	not	local01, #0
0d714     A7 1E 62 FC | 	wrlong	local01, fp
0d718     30 02 90 FD | 	jmp	#LR__1100
0d71c                 | LR__1092
0d71c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0d71c     08 4E 05 F1 | 	add	fp, #8
0d720     A7 1E 02 FB | 	rdlong	local01, fp
0d724     08 4E 85 F1 | 	sub	fp, #8
0d728     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d72c     14 4E 05 A1 |  if_e	add	fp, #20
0d730     A7 24 02 AB |  if_e	rdlong	local04, fp
0d734     14 4E 85 A1 |  if_e	sub	fp, #20
0d738     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d73c     38 00 90 5D |  if_ne	jmp	#LR__1093
0d740     00 1E 06 F6 | 	mov	local01, #0
0d744     A7 20 02 FB | 	rdlong	local02, fp
0d748     0C 4E 05 F1 | 	add	fp, #12
0d74c     A7 12 02 FB | 	rdlong	arg01, fp
0d750     0C 4E 85 F1 | 	sub	fp, #12
0d754     40 A4 B0 FD | 	call	#__system___float_fromuns
0d758     FD 14 02 F6 | 	mov	arg02, result1
0d75c     10 13 02 F6 | 	mov	arg01, local02
0d760     01 16 06 F6 | 	mov	arg03, #1
0d764     90 AB B0 FD | 	call	#__system___float_cmp
0d768     00 FA 55 F2 | 	cmps	result1, #0 wc
0d76c     00 1E 26 C6 |  if_b	not	local01, #0
0d770     A7 1E 62 FC | 	wrlong	local01, fp
0d774     D4 01 90 FD | 	jmp	#LR__1100
0d778                 | LR__1093
0d778                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0d778     08 4E 05 F1 | 	add	fp, #8
0d77c     A7 1E 02 FB | 	rdlong	local01, fp
0d780     08 4E 85 F1 | 	sub	fp, #8
0d784     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d788     14 4E 05 A1 |  if_e	add	fp, #20
0d78c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d790     14 4E 85 A1 |  if_e	sub	fp, #20
0d794     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d798     44 00 90 5D |  if_ne	jmp	#LR__1094
0d79c     00 1E 06 F6 | 	mov	local01, #0
0d7a0     A7 12 02 FB | 	rdlong	arg01, fp
0d7a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d7a8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d7ac     00 26 06 36 |  if_ae	mov	local05, #0
0d7b0     E4 A3 B0 FD | 	call	#__system___float_fromuns
0d7b4     13 FB 61 F5 | 	xor	result1, local05
0d7b8     FD 12 02 F6 | 	mov	arg01, result1
0d7bc     0C 4E 05 F1 | 	add	fp, #12
0d7c0     A7 14 02 FB | 	rdlong	arg02, fp
0d7c4     0C 4E 85 F1 | 	sub	fp, #12
0d7c8     01 16 06 F6 | 	mov	arg03, #1
0d7cc     28 AB B0 FD | 	call	#__system___float_cmp
0d7d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7d4     00 1E 26 C6 |  if_b	not	local01, #0
0d7d8     A7 1E 62 FC | 	wrlong	local01, fp
0d7dc     6C 01 90 FD | 	jmp	#LR__1100
0d7e0                 | LR__1094
0d7e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0d7e0     08 4E 05 F1 | 	add	fp, #8
0d7e4     A7 1E 02 FB | 	rdlong	local01, fp
0d7e8     08 4E 85 F1 | 	sub	fp, #8
0d7ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d7f0     14 4E 05 A1 |  if_e	add	fp, #20
0d7f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d7f8     14 4E 85 A1 |  if_e	sub	fp, #20
0d7fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d800     20 00 90 5D |  if_ne	jmp	#LR__1095
0d804     A7 20 02 FB | 	rdlong	local02, fp
0d808     0C 4E 05 F1 | 	add	fp, #12
0d80c     A7 22 02 FB | 	rdlong	local03, fp
0d810     0C 4E 85 F1 | 	sub	fp, #12
0d814     11 21 52 F2 | 	cmps	local02, local03 wc
0d818     0F 1F A2 F1 | 	subx	local01, local01
0d81c     A7 1E 62 FC | 	wrlong	local01, fp
0d820     28 01 90 FD | 	jmp	#LR__1100
0d824                 | LR__1095
0d824                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0d824     08 4E 05 F1 | 	add	fp, #8
0d828     A7 1E 02 FB | 	rdlong	local01, fp
0d82c     08 4E 85 F1 | 	sub	fp, #8
0d830     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d834     14 4E 05 A1 |  if_e	add	fp, #20
0d838     A7 22 02 AB |  if_e	rdlong	local03, fp
0d83c     14 4E 85 A1 |  if_e	sub	fp, #20
0d840     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d844     20 00 90 5D |  if_ne	jmp	#LR__1096
0d848     A7 20 02 FB | 	rdlong	local02, fp
0d84c     0C 4E 05 F1 | 	add	fp, #12
0d850     A7 22 02 FB | 	rdlong	local03, fp
0d854     0C 4E 85 F1 | 	sub	fp, #12
0d858     11 21 52 F2 | 	cmps	local02, local03 wc
0d85c     0F 1F A2 F1 | 	subx	local01, local01
0d860     A7 1E 62 FC | 	wrlong	local01, fp
0d864     E4 00 90 FD | 	jmp	#LR__1100
0d868                 | LR__1096
0d868                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0d868     08 4E 05 F1 | 	add	fp, #8
0d86c     A7 1E 02 FB | 	rdlong	local01, fp
0d870     08 4E 85 F1 | 	sub	fp, #8
0d874     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d878     14 4E 05 A1 |  if_e	add	fp, #20
0d87c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d880     14 4E 85 A1 |  if_e	sub	fp, #20
0d884     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d888     34 00 90 5D |  if_ne	jmp	#LR__1097
0d88c     00 1E 06 F6 | 	mov	local01, #0
0d890     A7 12 02 FB | 	rdlong	arg01, fp
0d894     00 A3 B0 FD | 	call	#__system___float_fromuns
0d898     FD 12 02 F6 | 	mov	arg01, result1
0d89c     0C 4E 05 F1 | 	add	fp, #12
0d8a0     A7 14 02 FB | 	rdlong	arg02, fp
0d8a4     0C 4E 85 F1 | 	sub	fp, #12
0d8a8     01 16 06 F6 | 	mov	arg03, #1
0d8ac     48 AA B0 FD | 	call	#__system___float_cmp
0d8b0     00 FA 55 F2 | 	cmps	result1, #0 wc
0d8b4     00 1E 26 C6 |  if_b	not	local01, #0
0d8b8     A7 1E 62 FC | 	wrlong	local01, fp
0d8bc     8C 00 90 FD | 	jmp	#LR__1100
0d8c0                 | LR__1097
0d8c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d8c0     08 4E 05 F1 | 	add	fp, #8
0d8c4     A7 1E 02 FB | 	rdlong	local01, fp
0d8c8     08 4E 85 F1 | 	sub	fp, #8
0d8cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d8d0     14 4E 05 A1 |  if_e	add	fp, #20
0d8d4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d8d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d8dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d8e0     20 00 90 5D |  if_ne	jmp	#LR__1098
0d8e4     A7 20 02 FB | 	rdlong	local02, fp
0d8e8     0C 4E 05 F1 | 	add	fp, #12
0d8ec     A7 22 02 FB | 	rdlong	local03, fp
0d8f0     0C 4E 85 F1 | 	sub	fp, #12
0d8f4     11 21 52 F2 | 	cmps	local02, local03 wc
0d8f8     0F 1F A2 F1 | 	subx	local01, local01
0d8fc     A7 1E 62 FC | 	wrlong	local01, fp
0d900     48 00 90 FD | 	jmp	#LR__1100
0d904                 | LR__1098
0d904                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d904     08 4E 05 F1 | 	add	fp, #8
0d908     A7 1E 02 FB | 	rdlong	local01, fp
0d90c     08 4E 85 F1 | 	sub	fp, #8
0d910     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d914     14 4E 05 A1 |  if_e	add	fp, #20
0d918     A7 22 02 AB |  if_e	rdlong	local03, fp
0d91c     14 4E 85 A1 |  if_e	sub	fp, #20
0d920     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d924     20 00 90 5D |  if_ne	jmp	#LR__1099
0d928     A7 20 02 FB | 	rdlong	local02, fp
0d92c     0C 4E 05 F1 | 	add	fp, #12
0d930     A7 22 02 FB | 	rdlong	local03, fp
0d934     0C 4E 85 F1 | 	sub	fp, #12
0d938     11 21 12 F2 | 	cmp	local02, local03 wc
0d93c     0F 1F A2 F1 | 	subx	local01, local01
0d940     A7 1E 62 FC | 	wrlong	local01, fp
0d944     04 00 90 FD | 	jmp	#LR__1100
0d948                 | LR__1099
0d948     A7 00 68 FC | 	wrlong	#0, fp
0d94c                 | LR__1100
0d94c     08 4E 05 F1 | 	add	fp, #8
0d950     A7 38 68 FC | 	wrlong	#28, fp
0d954     08 4E 85 F1 | 	sub	fp, #8
0d958     A7 12 02 F6 | 	mov	arg01, fp
0d95c     6C AE BF FD | 	call	#_push
0d960     A7 F0 03 F6 | 	mov	ptra, fp
0d964     B2 00 A0 FD | 	call	#popregs_
0d968                 | _do_lt_ret
0d968     2D 00 64 FD | 	ret
0d96c                 | 
0d96c                 | ' 
0d96c                 | ' sub do_ge
0d96c                 | _do_ge
0d96c     05 4A 05 F6 | 	mov	COUNT_, #5
0d970     A8 00 A0 FD | 	call	#pushregs_
0d974     18 F0 07 F1 | 	add	ptra, #24
0d978     B8 AD BF FD | 	call	#_pop
0d97c     FD 1E 02 F6 | 	mov	local01, result1
0d980     FE 20 02 F6 | 	mov	local02, result2
0d984     FF 22 02 F6 | 	mov	local03, result3
0d988     0C 4E 05 F1 | 	add	fp, #12
0d98c     A7 1E 62 FC | 	wrlong	local01, fp
0d990     04 4E 05 F1 | 	add	fp, #4
0d994     A7 20 62 FC | 	wrlong	local02, fp
0d998     04 4E 05 F1 | 	add	fp, #4
0d99c     A7 22 62 FC | 	wrlong	local03, fp
0d9a0     14 4E 85 F1 | 	sub	fp, #20
0d9a4     8C AD BF FD | 	call	#_pop
0d9a8     FF 22 02 F6 | 	mov	local03, result3
0d9ac     A7 FA 61 FC | 	wrlong	result1, fp
0d9b0     04 4E 05 F1 | 	add	fp, #4
0d9b4     A7 FC 61 FC | 	wrlong	result2, fp
0d9b8     04 4E 05 F1 | 	add	fp, #4
0d9bc     A7 22 62 FC | 	wrlong	local03, fp
0d9c0                 | ' t2=pop()
0d9c0                 | ' t1=pop()
0d9c0                 | ' 
0d9c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0d9c0     08 4E 85 F1 | 	sub	fp, #8
0d9c4     1F 22 0E F2 | 	cmp	local03, #31 wz
0d9c8     14 4E 05 A1 |  if_e	add	fp, #20
0d9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d9d4     12 23 02 A6 |  if_e	mov	local03, local04
0d9d8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d9dc     28 00 90 5D |  if_ne	jmp	#LR__1110
0d9e0     00 1E 06 F6 | 	mov	local01, #0
0d9e4     A7 12 02 FB | 	rdlong	arg01, fp
0d9e8     0C 4E 05 F1 | 	add	fp, #12
0d9ec     A7 14 02 FB | 	rdlong	arg02, fp
0d9f0     0C 4E 85 F1 | 	sub	fp, #12
0d9f4     E0 7A B0 FD | 	call	#__system___string_cmp
0d9f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d9fc     00 1E 26 36 |  if_ae	not	local01, #0
0da00     A7 1E 62 FC | 	wrlong	local01, fp
0da04     04 03 90 FD | 	jmp	#LR__1120
0da08                 | LR__1110
0da08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0da08     08 4E 05 F1 | 	add	fp, #8
0da0c     A7 1E 02 FB | 	rdlong	local01, fp
0da10     08 4E 85 F1 | 	sub	fp, #8
0da14     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da18     14 4E 05 A1 |  if_e	add	fp, #20
0da1c     A7 24 02 AB |  if_e	rdlong	local04, fp
0da20     14 4E 85 A1 |  if_e	sub	fp, #20
0da24     12 23 02 A6 |  if_e	mov	local03, local04
0da28     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0da2c     2C 00 90 5D |  if_ne	jmp	#LR__1111
0da30     00 1E 06 F6 | 	mov	local01, #0
0da34     A7 12 02 FB | 	rdlong	arg01, fp
0da38     0C 4E 05 F1 | 	add	fp, #12
0da3c     A7 14 02 FB | 	rdlong	arg02, fp
0da40     0C 4E 85 F1 | 	sub	fp, #12
0da44     01 16 66 F6 | 	neg	arg03, #1
0da48     AC A8 B0 FD | 	call	#__system___float_cmp
0da4c     00 FA 55 F2 | 	cmps	result1, #0 wc
0da50     00 1E 26 36 |  if_ae	not	local01, #0
0da54     A7 1E 62 FC | 	wrlong	local01, fp
0da58     B0 02 90 FD | 	jmp	#LR__1120
0da5c                 | LR__1111
0da5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0da5c     08 4E 05 F1 | 	add	fp, #8
0da60     A7 1E 02 FB | 	rdlong	local01, fp
0da64     08 4E 85 F1 | 	sub	fp, #8
0da68     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da6c     14 4E 05 A1 |  if_e	add	fp, #20
0da70     A7 24 02 AB |  if_e	rdlong	local04, fp
0da74     14 4E 85 A1 |  if_e	sub	fp, #20
0da78     12 23 02 A6 |  if_e	mov	local03, local04
0da7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da80     48 00 90 5D |  if_ne	jmp	#LR__1112
0da84     00 1E 06 F6 | 	mov	local01, #0
0da88     A7 20 02 FB | 	rdlong	local02, fp
0da8c     0C 4E 05 F1 | 	add	fp, #12
0da90     A7 12 02 FB | 	rdlong	arg01, fp
0da94     0C 4E 85 F1 | 	sub	fp, #12
0da98     09 13 52 F6 | 	abs	arg01, arg01 wc
0da9c     1F 26 C6 C9 |  if_b	decod	local05, #31
0daa0     00 26 06 36 |  if_ae	mov	local05, #0
0daa4     F0 A0 B0 FD | 	call	#__system___float_fromuns
0daa8     13 FB 61 F5 | 	xor	result1, local05
0daac     FD 14 02 F6 | 	mov	arg02, result1
0dab0     10 13 02 F6 | 	mov	arg01, local02
0dab4     01 16 66 F6 | 	neg	arg03, #1
0dab8     3C A8 B0 FD | 	call	#__system___float_cmp
0dabc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dac0     00 1E 26 36 |  if_ae	not	local01, #0
0dac4     A7 1E 62 FC | 	wrlong	local01, fp
0dac8     40 02 90 FD | 	jmp	#LR__1120
0dacc                 | LR__1112
0dacc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0dacc     08 4E 05 F1 | 	add	fp, #8
0dad0     A7 1E 02 FB | 	rdlong	local01, fp
0dad4     08 4E 85 F1 | 	sub	fp, #8
0dad8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dadc     14 4E 05 A1 |  if_e	add	fp, #20
0dae0     A7 24 02 AB |  if_e	rdlong	local04, fp
0dae4     14 4E 85 A1 |  if_e	sub	fp, #20
0dae8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0daec     38 00 90 5D |  if_ne	jmp	#LR__1113
0daf0     00 1E 06 F6 | 	mov	local01, #0
0daf4     A7 20 02 FB | 	rdlong	local02, fp
0daf8     0C 4E 05 F1 | 	add	fp, #12
0dafc     A7 12 02 FB | 	rdlong	arg01, fp
0db00     0C 4E 85 F1 | 	sub	fp, #12
0db04     90 A0 B0 FD | 	call	#__system___float_fromuns
0db08     FD 14 02 F6 | 	mov	arg02, result1
0db0c     10 13 02 F6 | 	mov	arg01, local02
0db10     01 16 66 F6 | 	neg	arg03, #1
0db14     E0 A7 B0 FD | 	call	#__system___float_cmp
0db18     00 FA 55 F2 | 	cmps	result1, #0 wc
0db1c     00 1E 26 36 |  if_ae	not	local01, #0
0db20     A7 1E 62 FC | 	wrlong	local01, fp
0db24     E4 01 90 FD | 	jmp	#LR__1120
0db28                 | LR__1113
0db28                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0db28     08 4E 05 F1 | 	add	fp, #8
0db2c     A7 1E 02 FB | 	rdlong	local01, fp
0db30     08 4E 85 F1 | 	sub	fp, #8
0db34     1C 1E 0E F2 | 	cmp	local01, #28 wz
0db38     14 4E 05 A1 |  if_e	add	fp, #20
0db3c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db40     14 4E 85 A1 |  if_e	sub	fp, #20
0db44     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db48     44 00 90 5D |  if_ne	jmp	#LR__1114
0db4c     00 1E 06 F6 | 	mov	local01, #0
0db50     A7 12 02 FB | 	rdlong	arg01, fp
0db54     09 13 52 F6 | 	abs	arg01, arg01 wc
0db58     1F 26 C6 C9 |  if_b	decod	local05, #31
0db5c     00 26 06 36 |  if_ae	mov	local05, #0
0db60     34 A0 B0 FD | 	call	#__system___float_fromuns
0db64     13 FB 61 F5 | 	xor	result1, local05
0db68     FD 12 02 F6 | 	mov	arg01, result1
0db6c     0C 4E 05 F1 | 	add	fp, #12
0db70     A7 14 02 FB | 	rdlong	arg02, fp
0db74     0C 4E 85 F1 | 	sub	fp, #12
0db78     01 16 66 F6 | 	neg	arg03, #1
0db7c     78 A7 B0 FD | 	call	#__system___float_cmp
0db80     00 FA 55 F2 | 	cmps	result1, #0 wc
0db84     00 1E 26 36 |  if_ae	not	local01, #0
0db88     A7 1E 62 FC | 	wrlong	local01, fp
0db8c     7C 01 90 FD | 	jmp	#LR__1120
0db90                 | LR__1114
0db90                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0db90     08 4E 05 F1 | 	add	fp, #8
0db94     A7 1E 02 FB | 	rdlong	local01, fp
0db98     08 4E 85 F1 | 	sub	fp, #8
0db9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dba0     14 4E 05 A1 |  if_e	add	fp, #20
0dba4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dba8     14 4E 85 A1 |  if_e	sub	fp, #20
0dbac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dbb0     24 00 90 5D |  if_ne	jmp	#LR__1115
0dbb4     00 1E 06 F6 | 	mov	local01, #0
0dbb8     A7 20 02 FB | 	rdlong	local02, fp
0dbbc     0C 4E 05 F1 | 	add	fp, #12
0dbc0     A7 22 02 FB | 	rdlong	local03, fp
0dbc4     0C 4E 85 F1 | 	sub	fp, #12
0dbc8     11 21 52 F2 | 	cmps	local02, local03 wc
0dbcc     01 1E 66 36 |  if_ae	neg	local01, #1
0dbd0     A7 1E 62 FC | 	wrlong	local01, fp
0dbd4     34 01 90 FD | 	jmp	#LR__1120
0dbd8                 | LR__1115
0dbd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0dbd8     08 4E 05 F1 | 	add	fp, #8
0dbdc     A7 1E 02 FB | 	rdlong	local01, fp
0dbe0     08 4E 85 F1 | 	sub	fp, #8
0dbe4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dbe8     14 4E 05 A1 |  if_e	add	fp, #20
0dbec     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbf0     14 4E 85 A1 |  if_e	sub	fp, #20
0dbf4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dbf8     24 00 90 5D |  if_ne	jmp	#LR__1116
0dbfc     00 1E 06 F6 | 	mov	local01, #0
0dc00     A7 20 02 FB | 	rdlong	local02, fp
0dc04     0C 4E 05 F1 | 	add	fp, #12
0dc08     A7 22 02 FB | 	rdlong	local03, fp
0dc0c     0C 4E 85 F1 | 	sub	fp, #12
0dc10     11 21 52 F2 | 	cmps	local02, local03 wc
0dc14     01 1E 66 36 |  if_ae	neg	local01, #1
0dc18     A7 1E 62 FC | 	wrlong	local01, fp
0dc1c     EC 00 90 FD | 	jmp	#LR__1120
0dc20                 | LR__1116
0dc20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0dc20     08 4E 05 F1 | 	add	fp, #8
0dc24     A7 1E 02 FB | 	rdlong	local01, fp
0dc28     08 4E 85 F1 | 	sub	fp, #8
0dc2c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dc30     14 4E 05 A1 |  if_e	add	fp, #20
0dc34     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc38     14 4E 85 A1 |  if_e	sub	fp, #20
0dc3c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dc40     34 00 90 5D |  if_ne	jmp	#LR__1117
0dc44     00 1E 06 F6 | 	mov	local01, #0
0dc48     A7 12 02 FB | 	rdlong	arg01, fp
0dc4c     48 9F B0 FD | 	call	#__system___float_fromuns
0dc50     FD 12 02 F6 | 	mov	arg01, result1
0dc54     0C 4E 05 F1 | 	add	fp, #12
0dc58     A7 14 02 FB | 	rdlong	arg02, fp
0dc5c     0C 4E 85 F1 | 	sub	fp, #12
0dc60     01 16 66 F6 | 	neg	arg03, #1
0dc64     90 A6 B0 FD | 	call	#__system___float_cmp
0dc68     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc6c     00 1E 26 36 |  if_ae	not	local01, #0
0dc70     A7 1E 62 FC | 	wrlong	local01, fp
0dc74     94 00 90 FD | 	jmp	#LR__1120
0dc78                 | LR__1117
0dc78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0dc78     08 4E 05 F1 | 	add	fp, #8
0dc7c     A7 1E 02 FB | 	rdlong	local01, fp
0dc80     08 4E 85 F1 | 	sub	fp, #8
0dc84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dc88     14 4E 05 A1 |  if_e	add	fp, #20
0dc8c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc90     14 4E 85 A1 |  if_e	sub	fp, #20
0dc94     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dc98     24 00 90 5D |  if_ne	jmp	#LR__1118
0dc9c     00 1E 06 F6 | 	mov	local01, #0
0dca0     A7 20 02 FB | 	rdlong	local02, fp
0dca4     0C 4E 05 F1 | 	add	fp, #12
0dca8     A7 22 02 FB | 	rdlong	local03, fp
0dcac     0C 4E 85 F1 | 	sub	fp, #12
0dcb0     11 21 52 F2 | 	cmps	local02, local03 wc
0dcb4     01 1E 66 36 |  if_ae	neg	local01, #1
0dcb8     A7 1E 62 FC | 	wrlong	local01, fp
0dcbc     4C 00 90 FD | 	jmp	#LR__1120
0dcc0                 | LR__1118
0dcc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0dcc0     08 4E 05 F1 | 	add	fp, #8
0dcc4     A7 1E 02 FB | 	rdlong	local01, fp
0dcc8     08 4E 85 F1 | 	sub	fp, #8
0dccc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dcd0     14 4E 05 A1 |  if_e	add	fp, #20
0dcd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dcd8     14 4E 85 A1 |  if_e	sub	fp, #20
0dcdc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dce0     24 00 90 5D |  if_ne	jmp	#LR__1119
0dce4     00 1E 06 F6 | 	mov	local01, #0
0dce8     A7 20 02 FB | 	rdlong	local02, fp
0dcec     0C 4E 05 F1 | 	add	fp, #12
0dcf0     A7 22 02 FB | 	rdlong	local03, fp
0dcf4     0C 4E 85 F1 | 	sub	fp, #12
0dcf8     11 21 12 F2 | 	cmp	local02, local03 wc
0dcfc     01 1E 66 36 |  if_ae	neg	local01, #1
0dd00     A7 1E 62 FC | 	wrlong	local01, fp
0dd04     04 00 90 FD | 	jmp	#LR__1120
0dd08                 | LR__1119
0dd08     A7 00 68 FC | 	wrlong	#0, fp
0dd0c                 | LR__1120
0dd0c     08 4E 05 F1 | 	add	fp, #8
0dd10     A7 38 68 FC | 	wrlong	#28, fp
0dd14     08 4E 85 F1 | 	sub	fp, #8
0dd18     A7 12 02 F6 | 	mov	arg01, fp
0dd1c     AC AA BF FD | 	call	#_push
0dd20     A7 F0 03 F6 | 	mov	ptra, fp
0dd24     B2 00 A0 FD | 	call	#popregs_
0dd28                 | _do_ge_ret
0dd28     2D 00 64 FD | 	ret
0dd2c                 | 
0dd2c                 | ' 
0dd2c                 | ' sub do_le
0dd2c                 | _do_le
0dd2c     05 4A 05 F6 | 	mov	COUNT_, #5
0dd30     A8 00 A0 FD | 	call	#pushregs_
0dd34     18 F0 07 F1 | 	add	ptra, #24
0dd38     F8 A9 BF FD | 	call	#_pop
0dd3c     FD 1E 02 F6 | 	mov	local01, result1
0dd40     FE 20 02 F6 | 	mov	local02, result2
0dd44     FF 22 02 F6 | 	mov	local03, result3
0dd48     0C 4E 05 F1 | 	add	fp, #12
0dd4c     A7 1E 62 FC | 	wrlong	local01, fp
0dd50     04 4E 05 F1 | 	add	fp, #4
0dd54     A7 20 62 FC | 	wrlong	local02, fp
0dd58     04 4E 05 F1 | 	add	fp, #4
0dd5c     A7 22 62 FC | 	wrlong	local03, fp
0dd60     14 4E 85 F1 | 	sub	fp, #20
0dd64     CC A9 BF FD | 	call	#_pop
0dd68     FF 22 02 F6 | 	mov	local03, result3
0dd6c     A7 FA 61 FC | 	wrlong	result1, fp
0dd70     04 4E 05 F1 | 	add	fp, #4
0dd74     A7 FC 61 FC | 	wrlong	result2, fp
0dd78     04 4E 05 F1 | 	add	fp, #4
0dd7c     A7 22 62 FC | 	wrlong	local03, fp
0dd80                 | ' t2=pop()
0dd80                 | ' t1=pop()
0dd80                 | ' 
0dd80                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0dd80     08 4E 85 F1 | 	sub	fp, #8
0dd84     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd88     14 4E 05 A1 |  if_e	add	fp, #20
0dd8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd90     14 4E 85 A1 |  if_e	sub	fp, #20
0dd94     12 23 02 A6 |  if_e	mov	local03, local04
0dd98     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0dd9c     28 00 90 5D |  if_ne	jmp	#LR__1130
0dda0     00 1E 06 F6 | 	mov	local01, #0
0dda4     A7 12 02 FB | 	rdlong	arg01, fp
0dda8     0C 4E 05 F1 | 	add	fp, #12
0ddac     A7 14 02 FB | 	rdlong	arg02, fp
0ddb0     0C 4E 85 F1 | 	sub	fp, #12
0ddb4     20 77 B0 FD | 	call	#__system___string_cmp
0ddb8     01 FA 55 F2 | 	cmps	result1, #1 wc
0ddbc     00 1E 26 C6 |  if_b	not	local01, #0
0ddc0     A7 1E 62 FC | 	wrlong	local01, fp
0ddc4     04 03 90 FD | 	jmp	#LR__1140
0ddc8                 | LR__1130
0ddc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0ddc8     08 4E 05 F1 | 	add	fp, #8
0ddcc     A7 1E 02 FB | 	rdlong	local01, fp
0ddd0     08 4E 85 F1 | 	sub	fp, #8
0ddd4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ddd8     14 4E 05 A1 |  if_e	add	fp, #20
0dddc     A7 24 02 AB |  if_e	rdlong	local04, fp
0dde0     14 4E 85 A1 |  if_e	sub	fp, #20
0dde4     12 23 02 A6 |  if_e	mov	local03, local04
0dde8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddec     2C 00 90 5D |  if_ne	jmp	#LR__1131
0ddf0     00 1E 06 F6 | 	mov	local01, #0
0ddf4     A7 12 02 FB | 	rdlong	arg01, fp
0ddf8     0C 4E 05 F1 | 	add	fp, #12
0ddfc     A7 14 02 FB | 	rdlong	arg02, fp
0de00     0C 4E 85 F1 | 	sub	fp, #12
0de04     01 16 06 F6 | 	mov	arg03, #1
0de08     EC A4 B0 FD | 	call	#__system___float_cmp
0de0c     01 FA 55 F2 | 	cmps	result1, #1 wc
0de10     00 1E 26 C6 |  if_b	not	local01, #0
0de14     A7 1E 62 FC | 	wrlong	local01, fp
0de18     B0 02 90 FD | 	jmp	#LR__1140
0de1c                 | LR__1131
0de1c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0de1c     08 4E 05 F1 | 	add	fp, #8
0de20     A7 1E 02 FB | 	rdlong	local01, fp
0de24     08 4E 85 F1 | 	sub	fp, #8
0de28     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de2c     14 4E 05 A1 |  if_e	add	fp, #20
0de30     A7 24 02 AB |  if_e	rdlong	local04, fp
0de34     14 4E 85 A1 |  if_e	sub	fp, #20
0de38     12 23 02 A6 |  if_e	mov	local03, local04
0de3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0de40     48 00 90 5D |  if_ne	jmp	#LR__1132
0de44     00 1E 06 F6 | 	mov	local01, #0
0de48     A7 20 02 FB | 	rdlong	local02, fp
0de4c     0C 4E 05 F1 | 	add	fp, #12
0de50     A7 12 02 FB | 	rdlong	arg01, fp
0de54     0C 4E 85 F1 | 	sub	fp, #12
0de58     09 13 52 F6 | 	abs	arg01, arg01 wc
0de5c     1F 26 C6 C9 |  if_b	decod	local05, #31
0de60     00 26 06 36 |  if_ae	mov	local05, #0
0de64     30 9D B0 FD | 	call	#__system___float_fromuns
0de68     13 FB 61 F5 | 	xor	result1, local05
0de6c     FD 14 02 F6 | 	mov	arg02, result1
0de70     10 13 02 F6 | 	mov	arg01, local02
0de74     01 16 06 F6 | 	mov	arg03, #1
0de78     7C A4 B0 FD | 	call	#__system___float_cmp
0de7c     01 FA 55 F2 | 	cmps	result1, #1 wc
0de80     00 1E 26 C6 |  if_b	not	local01, #0
0de84     A7 1E 62 FC | 	wrlong	local01, fp
0de88     40 02 90 FD | 	jmp	#LR__1140
0de8c                 | LR__1132
0de8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0de8c     08 4E 05 F1 | 	add	fp, #8
0de90     A7 1E 02 FB | 	rdlong	local01, fp
0de94     08 4E 85 F1 | 	sub	fp, #8
0de98     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de9c     14 4E 05 A1 |  if_e	add	fp, #20
0dea0     A7 24 02 AB |  if_e	rdlong	local04, fp
0dea4     14 4E 85 A1 |  if_e	sub	fp, #20
0dea8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0deac     38 00 90 5D |  if_ne	jmp	#LR__1133
0deb0     00 1E 06 F6 | 	mov	local01, #0
0deb4     A7 20 02 FB | 	rdlong	local02, fp
0deb8     0C 4E 05 F1 | 	add	fp, #12
0debc     A7 12 02 FB | 	rdlong	arg01, fp
0dec0     0C 4E 85 F1 | 	sub	fp, #12
0dec4     D0 9C B0 FD | 	call	#__system___float_fromuns
0dec8     FD 14 02 F6 | 	mov	arg02, result1
0decc     10 13 02 F6 | 	mov	arg01, local02
0ded0     01 16 06 F6 | 	mov	arg03, #1
0ded4     20 A4 B0 FD | 	call	#__system___float_cmp
0ded8     01 FA 55 F2 | 	cmps	result1, #1 wc
0dedc     00 1E 26 C6 |  if_b	not	local01, #0
0dee0     A7 1E 62 FC | 	wrlong	local01, fp
0dee4     E4 01 90 FD | 	jmp	#LR__1140
0dee8                 | LR__1133
0dee8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0dee8     08 4E 05 F1 | 	add	fp, #8
0deec     A7 1E 02 FB | 	rdlong	local01, fp
0def0     08 4E 85 F1 | 	sub	fp, #8
0def4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0def8     14 4E 05 A1 |  if_e	add	fp, #20
0defc     A7 22 02 AB |  if_e	rdlong	local03, fp
0df00     14 4E 85 A1 |  if_e	sub	fp, #20
0df04     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0df08     44 00 90 5D |  if_ne	jmp	#LR__1134
0df0c     00 1E 06 F6 | 	mov	local01, #0
0df10     A7 12 02 FB | 	rdlong	arg01, fp
0df14     09 13 52 F6 | 	abs	arg01, arg01 wc
0df18     1F 26 C6 C9 |  if_b	decod	local05, #31
0df1c     00 26 06 36 |  if_ae	mov	local05, #0
0df20     74 9C B0 FD | 	call	#__system___float_fromuns
0df24     13 FB 61 F5 | 	xor	result1, local05
0df28     FD 12 02 F6 | 	mov	arg01, result1
0df2c     0C 4E 05 F1 | 	add	fp, #12
0df30     A7 14 02 FB | 	rdlong	arg02, fp
0df34     0C 4E 85 F1 | 	sub	fp, #12
0df38     01 16 06 F6 | 	mov	arg03, #1
0df3c     B8 A3 B0 FD | 	call	#__system___float_cmp
0df40     01 FA 55 F2 | 	cmps	result1, #1 wc
0df44     00 1E 26 C6 |  if_b	not	local01, #0
0df48     A7 1E 62 FC | 	wrlong	local01, fp
0df4c     7C 01 90 FD | 	jmp	#LR__1140
0df50                 | LR__1134
0df50                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0df50     08 4E 05 F1 | 	add	fp, #8
0df54     A7 1E 02 FB | 	rdlong	local01, fp
0df58     08 4E 85 F1 | 	sub	fp, #8
0df5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0df60     14 4E 05 A1 |  if_e	add	fp, #20
0df64     A7 22 02 AB |  if_e	rdlong	local03, fp
0df68     14 4E 85 A1 |  if_e	sub	fp, #20
0df6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0df70     24 00 90 5D |  if_ne	jmp	#LR__1135
0df74     00 1E 06 F6 | 	mov	local01, #0
0df78     A7 20 02 FB | 	rdlong	local02, fp
0df7c     0C 4E 05 F1 | 	add	fp, #12
0df80     A7 22 02 FB | 	rdlong	local03, fp
0df84     0C 4E 85 F1 | 	sub	fp, #12
0df88     11 21 5A F2 | 	cmps	local02, local03 wcz
0df8c     01 1E 66 E6 |  if_be	neg	local01, #1
0df90     A7 1E 62 FC | 	wrlong	local01, fp
0df94     34 01 90 FD | 	jmp	#LR__1140
0df98                 | LR__1135
0df98                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0df98     08 4E 05 F1 | 	add	fp, #8
0df9c     A7 1E 02 FB | 	rdlong	local01, fp
0dfa0     08 4E 85 F1 | 	sub	fp, #8
0dfa4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dfa8     14 4E 05 A1 |  if_e	add	fp, #20
0dfac     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfb0     14 4E 85 A1 |  if_e	sub	fp, #20
0dfb4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dfb8     24 00 90 5D |  if_ne	jmp	#LR__1136
0dfbc     00 1E 06 F6 | 	mov	local01, #0
0dfc0     A7 20 02 FB | 	rdlong	local02, fp
0dfc4     0C 4E 05 F1 | 	add	fp, #12
0dfc8     A7 22 02 FB | 	rdlong	local03, fp
0dfcc     0C 4E 85 F1 | 	sub	fp, #12
0dfd0     11 21 5A F2 | 	cmps	local02, local03 wcz
0dfd4     01 1E 66 E6 |  if_be	neg	local01, #1
0dfd8     A7 1E 62 FC | 	wrlong	local01, fp
0dfdc     EC 00 90 FD | 	jmp	#LR__1140
0dfe0                 | LR__1136
0dfe0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0dfe0     08 4E 05 F1 | 	add	fp, #8
0dfe4     A7 1E 02 FB | 	rdlong	local01, fp
0dfe8     08 4E 85 F1 | 	sub	fp, #8
0dfec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dff0     14 4E 05 A1 |  if_e	add	fp, #20
0dff4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dff8     14 4E 85 A1 |  if_e	sub	fp, #20
0dffc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e000     34 00 90 5D |  if_ne	jmp	#LR__1137
0e004     00 1E 06 F6 | 	mov	local01, #0
0e008     A7 12 02 FB | 	rdlong	arg01, fp
0e00c     88 9B B0 FD | 	call	#__system___float_fromuns
0e010     FD 12 02 F6 | 	mov	arg01, result1
0e014     0C 4E 05 F1 | 	add	fp, #12
0e018     A7 14 02 FB | 	rdlong	arg02, fp
0e01c     0C 4E 85 F1 | 	sub	fp, #12
0e020     01 16 06 F6 | 	mov	arg03, #1
0e024     D0 A2 B0 FD | 	call	#__system___float_cmp
0e028     01 FA 55 F2 | 	cmps	result1, #1 wc
0e02c     00 1E 26 C6 |  if_b	not	local01, #0
0e030     A7 1E 62 FC | 	wrlong	local01, fp
0e034     94 00 90 FD | 	jmp	#LR__1140
0e038                 | LR__1137
0e038                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0e038     08 4E 05 F1 | 	add	fp, #8
0e03c     A7 1E 02 FB | 	rdlong	local01, fp
0e040     08 4E 85 F1 | 	sub	fp, #8
0e044     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e048     14 4E 05 A1 |  if_e	add	fp, #20
0e04c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e050     14 4E 85 A1 |  if_e	sub	fp, #20
0e054     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e058     24 00 90 5D |  if_ne	jmp	#LR__1138
0e05c     00 1E 06 F6 | 	mov	local01, #0
0e060     A7 20 02 FB | 	rdlong	local02, fp
0e064     0C 4E 05 F1 | 	add	fp, #12
0e068     A7 22 02 FB | 	rdlong	local03, fp
0e06c     0C 4E 85 F1 | 	sub	fp, #12
0e070     11 21 5A F2 | 	cmps	local02, local03 wcz
0e074     01 1E 66 E6 |  if_be	neg	local01, #1
0e078     A7 1E 62 FC | 	wrlong	local01, fp
0e07c     4C 00 90 FD | 	jmp	#LR__1140
0e080                 | LR__1138
0e080                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0e080     08 4E 05 F1 | 	add	fp, #8
0e084     A7 1E 02 FB | 	rdlong	local01, fp
0e088     08 4E 85 F1 | 	sub	fp, #8
0e08c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e090     14 4E 05 A1 |  if_e	add	fp, #20
0e094     A7 22 02 AB |  if_e	rdlong	local03, fp
0e098     14 4E 85 A1 |  if_e	sub	fp, #20
0e09c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e0a0     24 00 90 5D |  if_ne	jmp	#LR__1139
0e0a4     00 1E 06 F6 | 	mov	local01, #0
0e0a8     A7 20 02 FB | 	rdlong	local02, fp
0e0ac     0C 4E 05 F1 | 	add	fp, #12
0e0b0     A7 22 02 FB | 	rdlong	local03, fp
0e0b4     0C 4E 85 F1 | 	sub	fp, #12
0e0b8     11 21 1A F2 | 	cmp	local02, local03 wcz
0e0bc     01 1E 66 E6 |  if_be	neg	local01, #1
0e0c0     A7 1E 62 FC | 	wrlong	local01, fp
0e0c4     04 00 90 FD | 	jmp	#LR__1140
0e0c8                 | LR__1139
0e0c8     A7 00 68 FC | 	wrlong	#0, fp
0e0cc                 | LR__1140
0e0cc     08 4E 05 F1 | 	add	fp, #8
0e0d0     A7 38 68 FC | 	wrlong	#28, fp
0e0d4     08 4E 85 F1 | 	sub	fp, #8
0e0d8     A7 12 02 F6 | 	mov	arg01, fp
0e0dc     EC A6 BF FD | 	call	#_push
0e0e0     A7 F0 03 F6 | 	mov	ptra, fp
0e0e4     B2 00 A0 FD | 	call	#popregs_
0e0e8                 | _do_le_ret
0e0e8     2D 00 64 FD | 	ret
0e0ec                 | 
0e0ec                 | ' 
0e0ec                 | ' 
0e0ec                 | ' sub do_ne
0e0ec                 | _do_ne
0e0ec     05 4A 05 F6 | 	mov	COUNT_, #5
0e0f0     A8 00 A0 FD | 	call	#pushregs_
0e0f4     18 F0 07 F1 | 	add	ptra, #24
0e0f8     38 A6 BF FD | 	call	#_pop
0e0fc     FD 1E 02 F6 | 	mov	local01, result1
0e100     FE 20 02 F6 | 	mov	local02, result2
0e104     FF 22 02 F6 | 	mov	local03, result3
0e108     0C 4E 05 F1 | 	add	fp, #12
0e10c     A7 1E 62 FC | 	wrlong	local01, fp
0e110     04 4E 05 F1 | 	add	fp, #4
0e114     A7 20 62 FC | 	wrlong	local02, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 22 62 FC | 	wrlong	local03, fp
0e120     14 4E 85 F1 | 	sub	fp, #20
0e124     0C A6 BF FD | 	call	#_pop
0e128     FF 22 02 F6 | 	mov	local03, result3
0e12c     A7 FA 61 FC | 	wrlong	result1, fp
0e130     04 4E 05 F1 | 	add	fp, #4
0e134     A7 FC 61 FC | 	wrlong	result2, fp
0e138     04 4E 05 F1 | 	add	fp, #4
0e13c     A7 22 62 FC | 	wrlong	local03, fp
0e140                 | ' t2=pop()
0e140                 | ' t1=pop()
0e140                 | ' 
0e140                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0e140     08 4E 85 F1 | 	sub	fp, #8
0e144     1F 22 0E F2 | 	cmp	local03, #31 wz
0e148     14 4E 05 A1 |  if_e	add	fp, #20
0e14c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e150     14 4E 85 A1 |  if_e	sub	fp, #20
0e154     12 23 02 A6 |  if_e	mov	local03, local04
0e158     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e15c     28 00 90 5D |  if_ne	jmp	#LR__1150
0e160     00 1E 06 F6 | 	mov	local01, #0
0e164     A7 12 02 FB | 	rdlong	arg01, fp
0e168     0C 4E 05 F1 | 	add	fp, #12
0e16c     A7 14 02 FB | 	rdlong	arg02, fp
0e170     0C 4E 85 F1 | 	sub	fp, #12
0e174     60 73 B0 FD | 	call	#__system___string_cmp
0e178     00 FA 0D F2 | 	cmp	result1, #0 wz
0e17c     00 1E 26 56 |  if_ne	not	local01, #0
0e180     A7 1E 62 FC | 	wrlong	local01, fp
0e184     04 03 90 FD | 	jmp	#LR__1160
0e188                 | LR__1150
0e188                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0e188     08 4E 05 F1 | 	add	fp, #8
0e18c     A7 1E 02 FB | 	rdlong	local01, fp
0e190     08 4E 85 F1 | 	sub	fp, #8
0e194     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e198     14 4E 05 A1 |  if_e	add	fp, #20
0e19c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1a0     14 4E 85 A1 |  if_e	sub	fp, #20
0e1a4     12 23 02 A6 |  if_e	mov	local03, local04
0e1a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e1ac     2C 00 90 5D |  if_ne	jmp	#LR__1151
0e1b0     00 1E 06 F6 | 	mov	local01, #0
0e1b4     A7 12 02 FB | 	rdlong	arg01, fp
0e1b8     0C 4E 05 F1 | 	add	fp, #12
0e1bc     A7 14 02 FB | 	rdlong	arg02, fp
0e1c0     0C 4E 85 F1 | 	sub	fp, #12
0e1c4     01 16 06 F6 | 	mov	arg03, #1
0e1c8     2C A1 B0 FD | 	call	#__system___float_cmp
0e1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0e1d0     00 1E 26 56 |  if_ne	not	local01, #0
0e1d4     A7 1E 62 FC | 	wrlong	local01, fp
0e1d8     B0 02 90 FD | 	jmp	#LR__1160
0e1dc                 | LR__1151
0e1dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0e1dc     08 4E 05 F1 | 	add	fp, #8
0e1e0     A7 1E 02 FB | 	rdlong	local01, fp
0e1e4     08 4E 85 F1 | 	sub	fp, #8
0e1e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e1ec     14 4E 05 A1 |  if_e	add	fp, #20
0e1f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1f4     14 4E 85 A1 |  if_e	sub	fp, #20
0e1f8     12 23 02 A6 |  if_e	mov	local03, local04
0e1fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e200     48 00 90 5D |  if_ne	jmp	#LR__1152
0e204     00 1E 06 F6 | 	mov	local01, #0
0e208     A7 20 02 FB | 	rdlong	local02, fp
0e20c     0C 4E 05 F1 | 	add	fp, #12
0e210     A7 12 02 FB | 	rdlong	arg01, fp
0e214     0C 4E 85 F1 | 	sub	fp, #12
0e218     09 13 52 F6 | 	abs	arg01, arg01 wc
0e21c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e220     00 26 06 36 |  if_ae	mov	local05, #0
0e224     70 99 B0 FD | 	call	#__system___float_fromuns
0e228     13 FB 61 F5 | 	xor	result1, local05
0e22c     FD 14 02 F6 | 	mov	arg02, result1
0e230     10 13 02 F6 | 	mov	arg01, local02
0e234     01 16 06 F6 | 	mov	arg03, #1
0e238     BC A0 B0 FD | 	call	#__system___float_cmp
0e23c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e240     00 1E 26 56 |  if_ne	not	local01, #0
0e244     A7 1E 62 FC | 	wrlong	local01, fp
0e248     40 02 90 FD | 	jmp	#LR__1160
0e24c                 | LR__1152
0e24c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0e24c     08 4E 05 F1 | 	add	fp, #8
0e250     A7 1E 02 FB | 	rdlong	local01, fp
0e254     08 4E 85 F1 | 	sub	fp, #8
0e258     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e25c     14 4E 05 A1 |  if_e	add	fp, #20
0e260     A7 24 02 AB |  if_e	rdlong	local04, fp
0e264     14 4E 85 A1 |  if_e	sub	fp, #20
0e268     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e26c     38 00 90 5D |  if_ne	jmp	#LR__1153
0e270     00 1E 06 F6 | 	mov	local01, #0
0e274     A7 20 02 FB | 	rdlong	local02, fp
0e278     0C 4E 05 F1 | 	add	fp, #12
0e27c     A7 12 02 FB | 	rdlong	arg01, fp
0e280     0C 4E 85 F1 | 	sub	fp, #12
0e284     10 99 B0 FD | 	call	#__system___float_fromuns
0e288     FD 14 02 F6 | 	mov	arg02, result1
0e28c     10 13 02 F6 | 	mov	arg01, local02
0e290     01 16 06 F6 | 	mov	arg03, #1
0e294     60 A0 B0 FD | 	call	#__system___float_cmp
0e298     00 FA 0D F2 | 	cmp	result1, #0 wz
0e29c     00 1E 26 56 |  if_ne	not	local01, #0
0e2a0     A7 1E 62 FC | 	wrlong	local01, fp
0e2a4     E4 01 90 FD | 	jmp	#LR__1160
0e2a8                 | LR__1153
0e2a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0e2a8     08 4E 05 F1 | 	add	fp, #8
0e2ac     A7 1E 02 FB | 	rdlong	local01, fp
0e2b0     08 4E 85 F1 | 	sub	fp, #8
0e2b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e2b8     14 4E 05 A1 |  if_e	add	fp, #20
0e2bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0e2c0     14 4E 85 A1 |  if_e	sub	fp, #20
0e2c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e2c8     44 00 90 5D |  if_ne	jmp	#LR__1154
0e2cc     00 1E 06 F6 | 	mov	local01, #0
0e2d0     A7 12 02 FB | 	rdlong	arg01, fp
0e2d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e2d8     1F 26 C6 C9 |  if_b	decod	local05, #31
0e2dc     00 26 06 36 |  if_ae	mov	local05, #0
0e2e0     B4 98 B0 FD | 	call	#__system___float_fromuns
0e2e4     13 FB 61 F5 | 	xor	result1, local05
0e2e8     FD 12 02 F6 | 	mov	arg01, result1
0e2ec     0C 4E 05 F1 | 	add	fp, #12
0e2f0     A7 14 02 FB | 	rdlong	arg02, fp
0e2f4     0C 4E 85 F1 | 	sub	fp, #12
0e2f8     01 16 06 F6 | 	mov	arg03, #1
0e2fc     F8 9F B0 FD | 	call	#__system___float_cmp
0e300     00 FA 0D F2 | 	cmp	result1, #0 wz
0e304     00 1E 26 56 |  if_ne	not	local01, #0
0e308     A7 1E 62 FC | 	wrlong	local01, fp
0e30c     7C 01 90 FD | 	jmp	#LR__1160
0e310                 | LR__1154
0e310                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0e310     08 4E 05 F1 | 	add	fp, #8
0e314     A7 1E 02 FB | 	rdlong	local01, fp
0e318     08 4E 85 F1 | 	sub	fp, #8
0e31c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e320     14 4E 05 A1 |  if_e	add	fp, #20
0e324     A7 22 02 AB |  if_e	rdlong	local03, fp
0e328     14 4E 85 A1 |  if_e	sub	fp, #20
0e32c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e330     24 00 90 5D |  if_ne	jmp	#LR__1155
0e334     00 1E 06 F6 | 	mov	local01, #0
0e338     A7 20 02 FB | 	rdlong	local02, fp
0e33c     0C 4E 05 F1 | 	add	fp, #12
0e340     A7 22 02 FB | 	rdlong	local03, fp
0e344     0C 4E 85 F1 | 	sub	fp, #12
0e348     11 21 0A F2 | 	cmp	local02, local03 wz
0e34c     01 1E 66 56 |  if_ne	neg	local01, #1
0e350     A7 1E 62 FC | 	wrlong	local01, fp
0e354     34 01 90 FD | 	jmp	#LR__1160
0e358                 | LR__1155
0e358                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0e358     08 4E 05 F1 | 	add	fp, #8
0e35c     A7 1E 02 FB | 	rdlong	local01, fp
0e360     08 4E 85 F1 | 	sub	fp, #8
0e364     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e368     14 4E 05 A1 |  if_e	add	fp, #20
0e36c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e370     14 4E 85 A1 |  if_e	sub	fp, #20
0e374     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e378     24 00 90 5D |  if_ne	jmp	#LR__1156
0e37c     00 1E 06 F6 | 	mov	local01, #0
0e380     A7 20 02 FB | 	rdlong	local02, fp
0e384     0C 4E 05 F1 | 	add	fp, #12
0e388     A7 22 02 FB | 	rdlong	local03, fp
0e38c     0C 4E 85 F1 | 	sub	fp, #12
0e390     11 21 0A F2 | 	cmp	local02, local03 wz
0e394     01 1E 66 56 |  if_ne	neg	local01, #1
0e398     A7 1E 62 FC | 	wrlong	local01, fp
0e39c     EC 00 90 FD | 	jmp	#LR__1160
0e3a0                 | LR__1156
0e3a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0e3a0     08 4E 05 F1 | 	add	fp, #8
0e3a4     A7 1E 02 FB | 	rdlong	local01, fp
0e3a8     08 4E 85 F1 | 	sub	fp, #8
0e3ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e3b0     14 4E 05 A1 |  if_e	add	fp, #20
0e3b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0e3b8     14 4E 85 A1 |  if_e	sub	fp, #20
0e3bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e3c0     34 00 90 5D |  if_ne	jmp	#LR__1157
0e3c4     00 1E 06 F6 | 	mov	local01, #0
0e3c8     A7 12 02 FB | 	rdlong	arg01, fp
0e3cc     C8 97 B0 FD | 	call	#__system___float_fromuns
0e3d0     FD 12 02 F6 | 	mov	arg01, result1
0e3d4     0C 4E 05 F1 | 	add	fp, #12
0e3d8     A7 14 02 FB | 	rdlong	arg02, fp
0e3dc     0C 4E 85 F1 | 	sub	fp, #12
0e3e0     01 16 06 F6 | 	mov	arg03, #1
0e3e4     10 9F B0 FD | 	call	#__system___float_cmp
0e3e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e3ec     00 1E 26 56 |  if_ne	not	local01, #0
0e3f0     A7 1E 62 FC | 	wrlong	local01, fp
0e3f4     94 00 90 FD | 	jmp	#LR__1160
0e3f8                 | LR__1157
0e3f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0e3f8     08 4E 05 F1 | 	add	fp, #8
0e3fc     A7 1E 02 FB | 	rdlong	local01, fp
0e400     08 4E 85 F1 | 	sub	fp, #8
0e404     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e408     14 4E 05 A1 |  if_e	add	fp, #20
0e40c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e410     14 4E 85 A1 |  if_e	sub	fp, #20
0e414     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e418     24 00 90 5D |  if_ne	jmp	#LR__1158
0e41c     00 1E 06 F6 | 	mov	local01, #0
0e420     A7 20 02 FB | 	rdlong	local02, fp
0e424     0C 4E 05 F1 | 	add	fp, #12
0e428     A7 22 02 FB | 	rdlong	local03, fp
0e42c     0C 4E 85 F1 | 	sub	fp, #12
0e430     11 21 0A F2 | 	cmp	local02, local03 wz
0e434     01 1E 66 56 |  if_ne	neg	local01, #1
0e438     A7 1E 62 FC | 	wrlong	local01, fp
0e43c     4C 00 90 FD | 	jmp	#LR__1160
0e440                 | LR__1158
0e440                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0e440     08 4E 05 F1 | 	add	fp, #8
0e444     A7 1E 02 FB | 	rdlong	local01, fp
0e448     08 4E 85 F1 | 	sub	fp, #8
0e44c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e450     14 4E 05 A1 |  if_e	add	fp, #20
0e454     A7 22 02 AB |  if_e	rdlong	local03, fp
0e458     14 4E 85 A1 |  if_e	sub	fp, #20
0e45c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e460     24 00 90 5D |  if_ne	jmp	#LR__1159
0e464     00 1E 06 F6 | 	mov	local01, #0
0e468     A7 20 02 FB | 	rdlong	local02, fp
0e46c     0C 4E 05 F1 | 	add	fp, #12
0e470     A7 22 02 FB | 	rdlong	local03, fp
0e474     0C 4E 85 F1 | 	sub	fp, #12
0e478     11 21 0A F2 | 	cmp	local02, local03 wz
0e47c     01 1E 66 56 |  if_ne	neg	local01, #1
0e480     A7 1E 62 FC | 	wrlong	local01, fp
0e484     04 00 90 FD | 	jmp	#LR__1160
0e488                 | LR__1159
0e488     A7 00 68 FC | 	wrlong	#0, fp
0e48c                 | LR__1160
0e48c     08 4E 05 F1 | 	add	fp, #8
0e490     A7 38 68 FC | 	wrlong	#28, fp
0e494     08 4E 85 F1 | 	sub	fp, #8
0e498     A7 12 02 F6 | 	mov	arg01, fp
0e49c     2C A3 BF FD | 	call	#_push
0e4a0     A7 F0 03 F6 | 	mov	ptra, fp
0e4a4     B2 00 A0 FD | 	call	#popregs_
0e4a8                 | _do_ne_ret
0e4a8     2D 00 64 FD | 	ret
0e4ac                 | 
0e4ac                 | ' 
0e4ac                 | ' 
0e4ac                 | ' 
0e4ac                 | ' ' -------------------   convert a variable on the top of stack to integer
0e4ac                 | ' 
0e4ac                 | ' sub do_converttoint
0e4ac                 | _do_converttoint
0e4ac     02 4A 05 F6 | 	mov	COUNT_, #2
0e4b0     A8 00 A0 FD | 	call	#pushregs_
0e4b4     18 F0 07 F1 | 	add	ptra, #24
0e4b8     78 A2 BF FD | 	call	#_pop
0e4bc     FE 1E 02 F6 | 	mov	local01, result2
0e4c0     FF 20 02 F6 | 	mov	local02, result3
0e4c4     A7 FA 61 FC | 	wrlong	result1, fp
0e4c8     04 4E 05 F1 | 	add	fp, #4
0e4cc     A7 1E 62 FC | 	wrlong	local01, fp
0e4d0     04 4E 05 F1 | 	add	fp, #4
0e4d4     A7 20 62 FC | 	wrlong	local02, fp
0e4d8                 | ' t1=pop() 
0e4d8                 | ' select case t1.result_type
0e4d8     08 4E 85 F1 | 	sub	fp, #8
0e4dc     1C 20 0E F2 | 	cmp	local02, #28 wz
0e4e0     24 00 90 AD |  if_e	jmp	#LR__1170
0e4e4     1D 20 0E F2 | 	cmp	local02, #29 wz
0e4e8     38 00 90 AD |  if_e	jmp	#LR__1171
0e4ec     1E 20 0E F2 | 	cmp	local02, #30 wz
0e4f0     4C 00 90 AD |  if_e	jmp	#LR__1172
0e4f4     1F 20 0E F2 | 	cmp	local02, #31 wz
0e4f8     68 00 90 AD |  if_e	jmp	#LR__1173
0e4fc     FF 20 0E F2 | 	cmp	local02, #255 wz
0e500     8C 00 90 AD |  if_e	jmp	#LR__1174
0e504     A8 00 90 FD | 	jmp	#LR__1175
0e508                 | LR__1170
0e508     A7 20 02 FB | 	rdlong	local02, fp
0e50c     0C 4E 05 F1 | 	add	fp, #12
0e510     A7 20 62 FC | 	wrlong	local02, fp
0e514     04 4E 05 F1 | 	add	fp, #4
0e518     A7 38 68 FC | 	wrlong	#28, fp
0e51c     10 4E 85 F1 | 	sub	fp, #16
0e520     A0 00 90 FD | 	jmp	#LR__1176
0e524                 | LR__1171
0e524     A7 20 02 FB | 	rdlong	local02, fp
0e528     0C 4E 05 F1 | 	add	fp, #12
0e52c     A7 20 62 FC | 	wrlong	local02, fp
0e530     04 4E 05 F1 | 	add	fp, #4
0e534     A7 38 68 FC | 	wrlong	#28, fp
0e538     10 4E 85 F1 | 	sub	fp, #16
0e53c     84 00 90 FD | 	jmp	#LR__1176
0e540                 | LR__1172
0e540     A7 12 02 FB | 	rdlong	arg01, fp
0e544     01 14 06 F6 | 	mov	arg02, #1
0e548     40 9E B0 FD | 	call	#__system___float_tointeger
0e54c     0C 4E 05 F1 | 	add	fp, #12
0e550     A7 FA 61 FC | 	wrlong	result1, fp
0e554     04 4E 05 F1 | 	add	fp, #4
0e558     A7 38 68 FC | 	wrlong	#28, fp
0e55c     10 4E 85 F1 | 	sub	fp, #16
0e560     60 00 90 FD | 	jmp	#LR__1176
0e564                 | LR__1173
0e564     A7 12 02 FB | 	rdlong	arg01, fp
0e568     40 A1 B0 FD | 	call	#__system____builtin_atof
0e56c     FD 12 02 F6 | 	mov	arg01, result1
0e570     00 14 06 F6 | 	mov	arg02, #0
0e574     14 9E B0 FD | 	call	#__system___float_tointeger
0e578     0C 4E 05 F1 | 	add	fp, #12
0e57c     A7 FA 61 FC | 	wrlong	result1, fp
0e580     04 4E 05 F1 | 	add	fp, #4
0e584     A7 38 68 FC | 	wrlong	#28, fp
0e588     10 4E 85 F1 | 	sub	fp, #16
0e58c     34 00 90 FD | 	jmp	#LR__1176
0e590                 | LR__1174
0e590     0C 4E 05 F1 | 	add	fp, #12
0e594     A7 00 68 FC | 	wrlong	#0, fp
0e598     0C 4E 85 F1 | 	sub	fp, #12
0e59c     A7 20 02 FB | 	rdlong	local02, fp
0e5a0     10 4E 05 F1 | 	add	fp, #16
0e5a4     A7 20 62 FC | 	wrlong	local02, fp
0e5a8     10 4E 85 F1 | 	sub	fp, #16
0e5ac     14 00 90 FD | 	jmp	#LR__1176
0e5b0                 | LR__1175
0e5b0     0C 4E 05 F1 | 	add	fp, #12
0e5b4     A7 00 68 FC | 	wrlong	#0, fp
0e5b8     04 4E 05 F1 | 	add	fp, #4
0e5bc     A7 02 68 FC | 	wrlong	#1, fp
0e5c0     10 4E 85 F1 | 	sub	fp, #16
0e5c4                 | LR__1176
0e5c4     0C 4E 05 F1 | 	add	fp, #12
0e5c8     A7 20 02 FB | 	rdlong	local02, fp
0e5cc     0C 4E 85 F1 | 	sub	fp, #12
0e5d0     A7 20 62 FC | 	wrlong	local02, fp
0e5d4     10 4E 05 F1 | 	add	fp, #16
0e5d8     A7 20 02 FB | 	rdlong	local02, fp
0e5dc     08 4E 85 F1 | 	sub	fp, #8
0e5e0     A7 20 62 FC | 	wrlong	local02, fp
0e5e4     08 4E 85 F1 | 	sub	fp, #8
0e5e8     A7 12 02 F6 | 	mov	arg01, fp
0e5ec     DC A1 BF FD | 	call	#_push
0e5f0     A7 F0 03 F6 | 	mov	ptra, fp
0e5f4     B2 00 A0 FD | 	call	#popregs_
0e5f8                 | _do_converttoint_ret
0e5f8     2D 00 64 FD | 	ret
0e5fc                 | 
0e5fc                 | ' 
0e5fc                 | ' function converttoint (t1 as expr_result) as integer
0e5fc                 | _converttoint
0e5fc     02 4A 05 F6 | 	mov	COUNT_, #2
0e600     A8 00 A0 FD | 	call	#pushregs_
0e604     09 1F 02 F6 | 	mov	local01, arg01
0e608                 | ' 
0e608                 | ' select case t1.result_type
0e608     08 1E 06 F1 | 	add	local01, #8
0e60c     0F 21 02 FB | 	rdlong	local02, local01
0e610     08 1E 86 F1 | 	sub	local01, #8
0e614     1C 20 86 F1 | 	sub	local02, #28
0e618     04 20 26 F3 | 	fle	local02, #4
0e61c     30 20 62 FD | 	jmprel	local02
0e620                 | LR__1180
0e620     10 00 90 FD | 	jmp	#LR__1181
0e624     14 00 90 FD | 	jmp	#LR__1182
0e628     18 00 90 FD | 	jmp	#LR__1183
0e62c     24 00 90 FD | 	jmp	#LR__1184
0e630     38 00 90 FD | 	jmp	#LR__1185
0e634                 | LR__1181
0e634     0F FB 01 FB | 	rdlong	result1, local01
0e638     34 00 90 FD | 	jmp	#LR__1186
0e63c                 | LR__1182
0e63c     0F FB 01 FB | 	rdlong	result1, local01
0e640     2C 00 90 FD | 	jmp	#LR__1186
0e644                 | LR__1183
0e644     0F 13 02 FB | 	rdlong	arg01, local01
0e648     01 14 06 F6 | 	mov	arg02, #1
0e64c     3C 9D B0 FD | 	call	#__system___float_tointeger
0e650     1C 00 90 FD | 	jmp	#LR__1186
0e654                 | LR__1184
0e654     0F 13 02 FB | 	rdlong	arg01, local01
0e658     50 A0 B0 FD | 	call	#__system____builtin_atof
0e65c     FD 12 02 F6 | 	mov	arg01, result1
0e660     00 14 06 F6 | 	mov	arg02, #0
0e664     24 9D B0 FD | 	call	#__system___float_tointeger
0e668     04 00 90 FD | 	jmp	#LR__1186
0e66c                 | LR__1185
0e66c     00 FA 05 F6 | 	mov	result1, #0
0e670                 | LR__1186
0e670     A7 F0 03 F6 | 	mov	ptra, fp
0e674     B2 00 A0 FD | 	call	#popregs_
0e678                 | _converttoint_ret
0e678     2D 00 64 FD | 	ret
0e67c                 | 
0e67c                 | ' 
0e67c                 | ' sub do_rnd
0e67c                 | _do_rnd
0e67c     01 4A 05 F6 | 	mov	COUNT_, #1
0e680     A8 00 A0 FD | 	call	#pushregs_
0e684     10 F0 07 F1 | 	add	ptra, #16
0e688     41 00 00 FF 
0e68c     44 E4 05 F1 | 	add	objptr, ##33348
0e690     F2 1E 02 FB | 	rdlong	local01, objptr
0e694     0F 17 02 F6 | 	mov	arg03, local01
0e698     01 16 66 F0 | 	shl	arg03, #1
0e69c     0F 17 02 F1 | 	add	arg03, local01
0e6a0     02 16 66 F0 | 	shl	arg03, #2
0e6a4     03 00 00 FF 
0e6a8     04 E4 85 F1 | 	sub	objptr, ##1540
0e6ac     F2 16 02 F1 | 	add	arg03, objptr
0e6b0     0B 17 02 FB | 	rdlong	arg03, arg03
0e6b4     0C 4E 05 F1 | 	add	fp, #12
0e6b8     A7 16 62 FC | 	wrlong	arg03, fp
0e6bc                 | ' 
0e6bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e6bc                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0e6bc     0C 4E 85 F1 | 	sub	fp, #12
0e6c0     02 16 16 F2 | 	cmp	arg03, #2 wc
0e6c4     3E 00 00 FF 
0e6c8     40 E4 85 F1 | 	sub	objptr, ##31808
0e6cc     3C 00 90 CD |  if_b	jmp	#LR__1190
0e6d0     00 12 06 F6 | 	mov	arg01, #0
0e6d4     8C C3 B0 FD | 	call	#__system___getiolock_0348
0e6d8     FD 12 02 F6 | 	mov	arg01, result1
0e6dc     D0 6D B0 FD | 	call	#__system___lockmem
0e6e0     25 01 00 FF 
0e6e4     71 15 06 F6 | 	mov	arg02, ##@LR__4331
0e6e8     00 12 06 F6 | 	mov	arg01, #0
0e6ec     00 16 06 F6 | 	mov	arg03, #0
0e6f0     B0 7A B0 FD | 	call	#__system___basic_print_string
0e6f4     00 12 06 F6 | 	mov	arg01, #0
0e6f8     68 C3 B0 FD | 	call	#__system___getiolock_0348
0e6fc     FD 00 68 FC | 	wrlong	#0, result1
0e700     27 12 06 F6 | 	mov	arg01, #39
0e704     B4 38 B0 FD | 	call	#_printerror
0e708     2C 01 90 FD | 	jmp	#LR__1197
0e70c                 | LR__1190
0e70c                 | ' if numpar=0 then
0e70c     0C 4E 05 F1 | 	add	fp, #12
0e710     A7 FE 09 FB | 	rdlong	result3, fp wz
0e714     0C 4E 85 F1 | 	sub	fp, #12
0e718     20 00 90 5D |  if_ne	jmp	#LR__1191
0e71c     08 4E 05 F1 | 	add	fp, #8
0e720     A7 3A 68 FC | 	wrlong	#29, fp
0e724     08 4E 85 F1 | 	sub	fp, #8
0e728     1B FA 61 FD | 	getrnd	result1
0e72c     A7 FA 61 FC | 	wrlong	result1, fp
0e730     A7 12 02 F6 | 	mov	arg01, fp
0e734     94 A0 BF FD | 	call	#_push
0e738     FC 00 90 FD | 	jmp	#LR__1196
0e73c                 | LR__1191
0e73c     F4 9F BF FD | 	call	#_pop
0e740     A7 FA 61 FC | 	wrlong	result1, fp
0e744     04 4E 05 F1 | 	add	fp, #4
0e748     A7 FC 61 FC | 	wrlong	result2, fp
0e74c     04 4E 05 F1 | 	add	fp, #4
0e750     A7 FE 61 FC | 	wrlong	result3, fp
0e754                 | '   t1=pop()
0e754                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0e754     08 4E 85 F1 | 	sub	fp, #8
0e758     1C FE 0D F2 | 	cmp	result3, #28 wz
0e75c     08 4E 05 51 |  if_ne	add	fp, #8
0e760     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e764     08 4E 85 51 |  if_ne	sub	fp, #8
0e768     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e76c     2C 00 90 5D |  if_ne	jmp	#LR__1192
0e770     1B FA 61 FD | 	getrnd	result1
0e774     A7 1E 02 FB | 	rdlong	local01, fp
0e778     0F FB 11 FD | 	qdiv	result1, local01
0e77c     A7 12 02 F6 | 	mov	arg01, fp
0e780     19 1E 62 FD | 	getqy	local01
0e784     A7 1E 62 FC | 	wrlong	local01, fp
0e788     08 4E 05 F1 | 	add	fp, #8
0e78c     A7 3A 68 FC | 	wrlong	#29, fp
0e790     08 4E 85 F1 | 	sub	fp, #8
0e794     34 A0 BF FD | 	call	#_push
0e798     9C 00 90 FD | 	jmp	#LR__1195
0e79c                 | LR__1192
0e79c     08 4E 05 F1 | 	add	fp, #8
0e7a0     A7 1E 02 FB | 	rdlong	local01, fp
0e7a4     08 4E 85 F1 | 	sub	fp, #8
0e7a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e7ac     48 00 90 5D |  if_ne	jmp	#LR__1193
0e7b0     A7 12 02 FB | 	rdlong	arg01, fp
0e7b4     00 C0 24 FF 
0e7b8     00 14 06 F6 | 	mov	arg02, ##1233125376
0e7bc     08 99 B0 FD | 	call	#__system___float_div
0e7c0     FD 1E 02 F6 | 	mov	local01, result1
0e7c4     1B 12 62 FD | 	getrnd	arg01
0e7c8     74 13 06 F4 | 	bitl	arg01, #372
0e7cc     C8 93 B0 FD | 	call	#__system___float_fromuns
0e7d0     FD 14 02 F6 | 	mov	arg02, result1
0e7d4     0F 13 02 F6 | 	mov	arg01, local01
0e7d8     E8 96 B0 FD | 	call	#__system___float_mul
0e7dc     A7 FA 61 FC | 	wrlong	result1, fp
0e7e0     08 4E 05 F1 | 	add	fp, #8
0e7e4     A7 3C 68 FC | 	wrlong	#30, fp
0e7e8     08 4E 85 F1 | 	sub	fp, #8
0e7ec     A7 12 02 F6 | 	mov	arg01, fp
0e7f0     D8 9F BF FD | 	call	#_push
0e7f4     40 00 90 FD | 	jmp	#LR__1194
0e7f8                 | LR__1193
0e7f8                 | '     print "rnd: "; : printerror(40) 
0e7f8     00 12 06 F6 | 	mov	arg01, #0
0e7fc     64 C2 B0 FD | 	call	#__system___getiolock_0348
0e800     FD 12 02 F6 | 	mov	arg01, result1
0e804     A8 6C B0 FD | 	call	#__system___lockmem
0e808     25 01 00 FF 
0e80c     77 15 06 F6 | 	mov	arg02, ##@LR__4332
0e810     00 12 06 F6 | 	mov	arg01, #0
0e814     00 16 06 F6 | 	mov	arg03, #0
0e818     88 79 B0 FD | 	call	#__system___basic_print_string
0e81c     00 12 06 F6 | 	mov	arg01, #0
0e820     40 C2 B0 FD | 	call	#__system___getiolock_0348
0e824     FD 00 68 FC | 	wrlong	#0, result1
0e828     28 12 06 F6 | 	mov	arg01, #40
0e82c     8C 37 B0 FD | 	call	#_printerror
0e830     A7 12 02 F6 | 	mov	arg01, fp
0e834     94 9F BF FD | 	call	#_push
0e838                 | LR__1194
0e838                 | LR__1195
0e838                 | LR__1196
0e838                 | LR__1197
0e838     A7 F0 03 F6 | 	mov	ptra, fp
0e83c     B2 00 A0 FD | 	call	#popregs_
0e840                 | _do_rnd_ret
0e840     2D 00 64 FD | 	ret
0e844                 | 
0e844                 | ' 
0e844                 | ' sub do_sin
0e844                 | _do_sin
0e844     03 4A 05 F6 | 	mov	COUNT_, #3
0e848     A8 00 A0 FD | 	call	#pushregs_
0e84c     10 F0 07 F1 | 	add	ptra, #16
0e850     41 00 00 FF 
0e854     44 E4 05 F1 | 	add	objptr, ##33348
0e858     F2 1E 02 FB | 	rdlong	local01, objptr
0e85c     0F 17 02 F6 | 	mov	arg03, local01
0e860     01 16 66 F0 | 	shl	arg03, #1
0e864     0F 17 02 F1 | 	add	arg03, local01
0e868     02 16 66 F0 | 	shl	arg03, #2
0e86c     03 00 00 FF 
0e870     04 E4 85 F1 | 	sub	objptr, ##1540
0e874     F2 16 02 F1 | 	add	arg03, objptr
0e878     0B 17 02 FB | 	rdlong	arg03, arg03
0e87c     0C 4E 05 F1 | 	add	fp, #12
0e880     A7 16 62 FC | 	wrlong	arg03, fp
0e884                 | ' 
0e884                 | ' numpar=compiledline(lineptr_e).result.uresult
0e884                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0e884     0C 4E 85 F1 | 	sub	fp, #12
0e888     02 16 16 F2 | 	cmp	arg03, #2 wc
0e88c     3E 00 00 FF 
0e890     40 E4 85 F1 | 	sub	objptr, ##31808
0e894     0C 4E 05 C1 |  if_b	add	fp, #12
0e898     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0e89c     0C 4E 85 C1 |  if_b	sub	fp, #12
0e8a0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0e8a4     00 12 06 F6 | 	mov	arg01, #0
0e8a8     B8 C1 B0 FD | 	call	#__system___getiolock_0348
0e8ac     FD 12 02 F6 | 	mov	arg01, result1
0e8b0     FC 6B B0 FD | 	call	#__system___lockmem
0e8b4     25 01 00 FF 
0e8b8     7D 15 06 F6 | 	mov	arg02, ##@LR__4333
0e8bc     00 12 06 F6 | 	mov	arg01, #0
0e8c0     00 16 06 F6 | 	mov	arg03, #0
0e8c4     DC 78 B0 FD | 	call	#__system___basic_print_string
0e8c8     00 12 06 F6 | 	mov	arg01, #0
0e8cc     94 C1 B0 FD | 	call	#__system___getiolock_0348
0e8d0     FD 00 68 FC | 	wrlong	#0, result1
0e8d4     27 12 06 F6 | 	mov	arg01, #39
0e8d8     E0 36 B0 FD | 	call	#_printerror
0e8dc     40 01 90 FD | 	jmp	#LR__1205
0e8e0                 | LR__1200
0e8e0     50 9E BF FD | 	call	#_pop
0e8e4     A7 FA 61 FC | 	wrlong	result1, fp
0e8e8     04 4E 05 F1 | 	add	fp, #4
0e8ec     A7 FC 61 FC | 	wrlong	result2, fp
0e8f0     04 4E 05 F1 | 	add	fp, #4
0e8f4     A7 FE 61 FC | 	wrlong	result3, fp
0e8f8                 | ' t1=pop()
0e8f8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0e8f8     08 4E 85 F1 | 	sub	fp, #8
0e8fc     1C FE 0D F2 | 	cmp	result3, #28 wz
0e900     08 4E 05 51 |  if_ne	add	fp, #8
0e904     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e908     08 4E 85 51 |  if_ne	sub	fp, #8
0e90c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e910     70 00 90 5D |  if_ne	jmp	#LR__1201
0e914     A7 1E 02 FB | 	rdlong	local01, fp
0e918     0F 1F 52 F6 | 	abs	local01, local01 wc
0e91c     68 1F 16 FD | 	qdiv	local01, #360
0e920     87 24 20 FF 
0e924     DB 21 06 F6 | 	mov	local02, ##1078530011
0e928     19 1E 62 FD | 	getqy	local01
0e92c     0F 13 82 F6 | 	negc	arg01, local01
0e930     09 13 52 F6 | 	abs	arg01, arg01 wc
0e934     1F 22 C6 C9 |  if_b	decod	local03, #31
0e938     00 22 06 36 |  if_ae	mov	local03, #0
0e93c     58 92 B0 FD | 	call	#__system___float_fromuns
0e940     11 FB 61 F5 | 	xor	result1, local03
0e944     FD 12 02 F6 | 	mov	arg01, result1
0e948     00 9A 21 FF 
0e94c     00 14 06 F6 | 	mov	arg02, ##1127481344
0e950     74 97 B0 FD | 	call	#__system___float_div
0e954     FD 14 02 F6 | 	mov	arg02, result1
0e958     10 13 02 F6 | 	mov	arg01, local02
0e95c     64 95 B0 FD | 	call	#__system___float_mul
0e960     FD 12 02 F6 | 	mov	arg01, result1
0e964     98 9E B0 FD | 	call	#__system____builtin_sinf
0e968     A7 FA 61 FC | 	wrlong	result1, fp
0e96c     08 4E 05 F1 | 	add	fp, #8
0e970     A7 3C 68 FC | 	wrlong	#30, fp
0e974     08 4E 85 F1 | 	sub	fp, #8
0e978     A7 12 02 F6 | 	mov	arg01, fp
0e97c     4C 9E BF FD | 	call	#_push
0e980     9C 00 90 FD | 	jmp	#LR__1204
0e984                 | LR__1201
0e984     08 4E 05 F1 | 	add	fp, #8
0e988     A7 20 02 FB | 	rdlong	local02, fp
0e98c     08 4E 85 F1 | 	sub	fp, #8
0e990     1E 20 0E F2 | 	cmp	local02, #30 wz
0e994     48 00 90 5D |  if_ne	jmp	#LR__1202
0e998     87 24 20 FF 
0e99c     DB 21 06 F6 | 	mov	local02, ##1078530011
0e9a0     A7 12 02 FB | 	rdlong	arg01, fp
0e9a4     00 9A 21 FF 
0e9a8     00 14 06 F6 | 	mov	arg02, ##1127481344
0e9ac     18 97 B0 FD | 	call	#__system___float_div
0e9b0     FD 14 02 F6 | 	mov	arg02, result1
0e9b4     10 13 02 F6 | 	mov	arg01, local02
0e9b8     08 95 B0 FD | 	call	#__system___float_mul
0e9bc     FD 12 02 F6 | 	mov	arg01, result1
0e9c0     3C 9E B0 FD | 	call	#__system____builtin_sinf
0e9c4     A7 FA 61 FC | 	wrlong	result1, fp
0e9c8     08 4E 05 F1 | 	add	fp, #8
0e9cc     A7 3C 68 FC | 	wrlong	#30, fp
0e9d0     08 4E 85 F1 | 	sub	fp, #8
0e9d4     A7 12 02 F6 | 	mov	arg01, fp
0e9d8     F0 9D BF FD | 	call	#_push
0e9dc     40 00 90 FD | 	jmp	#LR__1203
0e9e0                 | LR__1202
0e9e0                 | '   print "sin: "; : printerror(40) 
0e9e0     00 12 06 F6 | 	mov	arg01, #0
0e9e4     7C C0 B0 FD | 	call	#__system___getiolock_0348
0e9e8     FD 12 02 F6 | 	mov	arg01, result1
0e9ec     C0 6A B0 FD | 	call	#__system___lockmem
0e9f0     25 01 00 FF 
0e9f4     83 15 06 F6 | 	mov	arg02, ##@LR__4334
0e9f8     00 12 06 F6 | 	mov	arg01, #0
0e9fc     00 16 06 F6 | 	mov	arg03, #0
0ea00     A0 77 B0 FD | 	call	#__system___basic_print_string
0ea04     00 12 06 F6 | 	mov	arg01, #0
0ea08     58 C0 B0 FD | 	call	#__system___getiolock_0348
0ea0c     FD 00 68 FC | 	wrlong	#0, result1
0ea10     28 12 06 F6 | 	mov	arg01, #40
0ea14     A4 35 B0 FD | 	call	#_printerror
0ea18     A7 12 02 F6 | 	mov	arg01, fp
0ea1c     AC 9D BF FD | 	call	#_push
0ea20                 | LR__1203
0ea20                 | LR__1204
0ea20                 | LR__1205
0ea20     A7 F0 03 F6 | 	mov	ptra, fp
0ea24     B2 00 A0 FD | 	call	#popregs_
0ea28                 | _do_sin_ret
0ea28     2D 00 64 FD | 	ret
0ea2c                 | 
0ea2c                 | ' 
0ea2c                 | ' sub do_stick
0ea2c                 | _do_stick
0ea2c     01 4A 05 F6 | 	mov	COUNT_, #1
0ea30     A8 00 A0 FD | 	call	#pushregs_
0ea34     10 F0 07 F1 | 	add	ptra, #16
0ea38     41 00 00 FF 
0ea3c     44 E4 05 F1 | 	add	objptr, ##33348
0ea40     F2 1E 02 FB | 	rdlong	local01, objptr
0ea44     0F 17 02 F6 | 	mov	arg03, local01
0ea48     01 16 66 F0 | 	shl	arg03, #1
0ea4c     0F 17 02 F1 | 	add	arg03, local01
0ea50     02 16 66 F0 | 	shl	arg03, #2
0ea54     03 00 00 FF 
0ea58     04 E4 85 F1 | 	sub	objptr, ##1540
0ea5c     F2 16 02 F1 | 	add	arg03, objptr
0ea60     0B 17 02 FB | 	rdlong	arg03, arg03
0ea64     0C 4E 05 F1 | 	add	fp, #12
0ea68     A7 16 62 FC | 	wrlong	arg03, fp
0ea6c                 | ' 
0ea6c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ea6c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0ea6c     0C 4E 85 F1 | 	sub	fp, #12
0ea70     02 16 16 F2 | 	cmp	arg03, #2 wc
0ea74     3E 00 00 FF 
0ea78     40 E4 85 F1 | 	sub	objptr, ##31808
0ea7c     3C 00 90 CD |  if_b	jmp	#LR__1210
0ea80     00 12 06 F6 | 	mov	arg01, #0
0ea84     DC BF B0 FD | 	call	#__system___getiolock_0348
0ea88     FD 12 02 F6 | 	mov	arg01, result1
0ea8c     20 6A B0 FD | 	call	#__system___lockmem
0ea90     25 01 00 FF 
0ea94     89 15 06 F6 | 	mov	arg02, ##@LR__4335
0ea98     00 12 06 F6 | 	mov	arg01, #0
0ea9c     00 16 06 F6 | 	mov	arg03, #0
0eaa0     00 77 B0 FD | 	call	#__system___basic_print_string
0eaa4     00 12 06 F6 | 	mov	arg01, #0
0eaa8     B8 BF B0 FD | 	call	#__system___getiolock_0348
0eaac     FD 00 68 FC | 	wrlong	#0, result1
0eab0     27 12 06 F6 | 	mov	arg01, #39
0eab4     04 35 B0 FD | 	call	#_printerror
0eab8     E8 00 90 FD | 	jmp	#LR__1214
0eabc                 | LR__1210
0eabc                 | ' 
0eabc                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0eabc     0C 4E 05 F1 | 	add	fp, #12
0eac0     A7 FE 09 FB | 	rdlong	result3, fp wz
0eac4     0C 4E 85 F1 | 	sub	fp, #12
0eac8     30 00 90 5D |  if_ne	jmp	#LR__1211
0eacc     51 00 00 FF 
0ead0     C0 E5 05 F1 | 	add	objptr, ##41920
0ead4     F2 1E 02 FB | 	rdlong	local01, objptr
0ead8     51 00 00 FF 
0eadc     C0 E5 85 F1 | 	sub	objptr, ##41920
0eae0     A7 1E 62 FC | 	wrlong	local01, fp
0eae4     08 4E 05 F1 | 	add	fp, #8
0eae8     A7 3A 68 FC | 	wrlong	#29, fp
0eaec     08 4E 85 F1 | 	sub	fp, #8
0eaf0     A7 12 02 F6 | 	mov	arg01, fp
0eaf4     D4 9C BF FD | 	call	#_push
0eaf8     A8 00 90 FD | 	jmp	#LR__1214
0eafc                 | LR__1211
0eafc     34 9C BF FD | 	call	#_pop
0eb00     A7 FA 61 FC | 	wrlong	result1, fp
0eb04     04 4E 05 F1 | 	add	fp, #4
0eb08     A7 FC 61 FC | 	wrlong	result2, fp
0eb0c     04 4E 05 F1 | 	add	fp, #4
0eb10     A7 FE 61 FC | 	wrlong	result3, fp
0eb14                 | ' 
0eb14                 | ' t1=pop()
0eb14                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0eb14     08 4E 85 F1 | 	sub	fp, #8
0eb18     1C FE 0D F2 | 	cmp	result3, #28 wz
0eb1c     08 4E 05 51 |  if_ne	add	fp, #8
0eb20     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eb24     08 4E 85 51 |  if_ne	sub	fp, #8
0eb28     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0eb2c     6C 00 90 5D |  if_ne	jmp	#LR__1213
0eb30     A7 1E 02 FB | 	rdlong	local01, fp
0eb34     52 00 00 FF 
0eb38     80 E4 05 F1 | 	add	objptr, ##42112
0eb3c     F2 1E 62 FC | 	wrlong	local01, objptr
0eb40                 | '   q=t1.result.uresult
0eb40                 | '   if q<7 then 
0eb40     52 00 00 FF 
0eb44     80 E4 85 F1 | 	sub	objptr, ##42112
0eb48     07 1E 56 F2 | 	cmps	local01, #7 wc
0eb4c     40 00 90 3D |  if_ae	jmp	#LR__1212
0eb50     52 00 00 FF 
0eb54     80 E4 05 F1 | 	add	objptr, ##42112
0eb58     F2 1E 02 FB | 	rdlong	local01, objptr
0eb5c     02 1E 66 F0 | 	shl	local01, #2
0eb60     C0 E4 85 F1 | 	sub	objptr, #192
0eb64     F2 1E 02 F1 | 	add	local01, objptr
0eb68     0F 1F 02 FB | 	rdlong	local01, local01
0eb6c     A7 1E 62 FC | 	wrlong	local01, fp
0eb70     08 4E 05 F1 | 	add	fp, #8
0eb74     A7 3A 68 FC | 	wrlong	#29, fp
0eb78     08 4E 85 F1 | 	sub	fp, #8
0eb7c     A7 12 02 F6 | 	mov	arg01, fp
0eb80     51 00 00 FF 
0eb84     C0 E5 85 F1 | 	sub	objptr, ##41920
0eb88     40 9C BF FD | 	call	#_push
0eb8c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0eb8c     14 00 90 FD | 	jmp	#LR__1214
0eb90                 | LR__1212
0eb90     29 12 06 F6 | 	mov	arg01, #41
0eb94     24 34 B0 FD | 	call	#_printerror
0eb98                 | '      printerror(41) : return
0eb98     08 00 90 FD | 	jmp	#LR__1214
0eb9c                 | LR__1213
0eb9c     29 12 06 F6 | 	mov	arg01, #41
0eba0     18 34 B0 FD | 	call	#_printerror
0eba4                 | LR__1214
0eba4     A7 F0 03 F6 | 	mov	ptra, fp
0eba8     B2 00 A0 FD | 	call	#popregs_
0ebac                 | _do_stick_ret
0ebac     2D 00 64 FD | 	ret
0ebb0                 | 
0ebb0                 | ' 
0ebb0                 | ' sub do_strig
0ebb0                 | _do_strig
0ebb0     01 4A 05 F6 | 	mov	COUNT_, #1
0ebb4     A8 00 A0 FD | 	call	#pushregs_
0ebb8     10 F0 07 F1 | 	add	ptra, #16
0ebbc     41 00 00 FF 
0ebc0     44 E4 05 F1 | 	add	objptr, ##33348
0ebc4     F2 1E 02 FB | 	rdlong	local01, objptr
0ebc8     0F 17 02 F6 | 	mov	arg03, local01
0ebcc     01 16 66 F0 | 	shl	arg03, #1
0ebd0     0F 17 02 F1 | 	add	arg03, local01
0ebd4     02 16 66 F0 | 	shl	arg03, #2
0ebd8     03 00 00 FF 
0ebdc     04 E4 85 F1 | 	sub	objptr, ##1540
0ebe0     F2 16 02 F1 | 	add	arg03, objptr
0ebe4     0B 17 02 FB | 	rdlong	arg03, arg03
0ebe8     0C 4E 05 F1 | 	add	fp, #12
0ebec     A7 16 62 FC | 	wrlong	arg03, fp
0ebf0                 | ' 
0ebf0                 | ' numpar=compiledline(lineptr_e).result.uresult
0ebf0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0ebf0     0C 4E 85 F1 | 	sub	fp, #12
0ebf4     02 16 16 F2 | 	cmp	arg03, #2 wc
0ebf8     3E 00 00 FF 
0ebfc     40 E4 85 F1 | 	sub	objptr, ##31808
0ec00     3C 00 90 CD |  if_b	jmp	#LR__1220
0ec04     00 12 06 F6 | 	mov	arg01, #0
0ec08     58 BE B0 FD | 	call	#__system___getiolock_0348
0ec0c     FD 12 02 F6 | 	mov	arg01, result1
0ec10     9C 68 B0 FD | 	call	#__system___lockmem
0ec14     25 01 00 FF 
0ec18     91 15 06 F6 | 	mov	arg02, ##@LR__4336
0ec1c     00 12 06 F6 | 	mov	arg01, #0
0ec20     00 16 06 F6 | 	mov	arg03, #0
0ec24     7C 75 B0 FD | 	call	#__system___basic_print_string
0ec28     00 12 06 F6 | 	mov	arg01, #0
0ec2c     34 BE B0 FD | 	call	#__system___getiolock_0348
0ec30     FD 00 68 FC | 	wrlong	#0, result1
0ec34     27 12 06 F6 | 	mov	arg01, #39
0ec38     80 33 B0 FD | 	call	#_printerror
0ec3c     E8 00 90 FD | 	jmp	#LR__1224
0ec40                 | LR__1220
0ec40                 | ' 
0ec40                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0ec40     0C 4E 05 F1 | 	add	fp, #12
0ec44     A7 FE 09 FB | 	rdlong	result3, fp wz
0ec48     0C 4E 85 F1 | 	sub	fp, #12
0ec4c     30 00 90 5D |  if_ne	jmp	#LR__1221
0ec50     51 00 00 FF 
0ec54     DC E5 05 F1 | 	add	objptr, ##41948
0ec58     F2 1E 02 FB | 	rdlong	local01, objptr
0ec5c     51 00 00 FF 
0ec60     DC E5 85 F1 | 	sub	objptr, ##41948
0ec64     A7 1E 62 FC | 	wrlong	local01, fp
0ec68     08 4E 05 F1 | 	add	fp, #8
0ec6c     A7 3A 68 FC | 	wrlong	#29, fp
0ec70     08 4E 85 F1 | 	sub	fp, #8
0ec74     A7 12 02 F6 | 	mov	arg01, fp
0ec78     50 9B BF FD | 	call	#_push
0ec7c     A8 00 90 FD | 	jmp	#LR__1224
0ec80                 | LR__1221
0ec80     B0 9A BF FD | 	call	#_pop
0ec84     A7 FA 61 FC | 	wrlong	result1, fp
0ec88     04 4E 05 F1 | 	add	fp, #4
0ec8c     A7 FC 61 FC | 	wrlong	result2, fp
0ec90     04 4E 05 F1 | 	add	fp, #4
0ec94     A7 FE 61 FC | 	wrlong	result3, fp
0ec98                 | ' 
0ec98                 | ' t1=pop()
0ec98                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0ec98     08 4E 85 F1 | 	sub	fp, #8
0ec9c     1C FE 0D F2 | 	cmp	result3, #28 wz
0eca0     08 4E 05 51 |  if_ne	add	fp, #8
0eca4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eca8     08 4E 85 51 |  if_ne	sub	fp, #8
0ecac     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ecb0     6C 00 90 5D |  if_ne	jmp	#LR__1223
0ecb4     A7 1E 02 FB | 	rdlong	local01, fp
0ecb8     52 00 00 FF 
0ecbc     80 E4 05 F1 | 	add	objptr, ##42112
0ecc0     F2 1E 62 FC | 	wrlong	local01, objptr
0ecc4                 | '   q=t1.result.uresult
0ecc4                 | '   if q<7 then 
0ecc4     52 00 00 FF 
0ecc8     80 E4 85 F1 | 	sub	objptr, ##42112
0eccc     07 1E 56 F2 | 	cmps	local01, #7 wc
0ecd0     40 00 90 3D |  if_ae	jmp	#LR__1222
0ecd4     52 00 00 FF 
0ecd8     80 E4 05 F1 | 	add	objptr, ##42112
0ecdc     F2 1E 02 FB | 	rdlong	local01, objptr
0ece0     02 1E 66 F0 | 	shl	local01, #2
0ece4     A4 E4 85 F1 | 	sub	objptr, #164
0ece8     F2 1E 02 F1 | 	add	local01, objptr
0ecec     0F 1F 02 FB | 	rdlong	local01, local01
0ecf0     A7 1E 62 FC | 	wrlong	local01, fp
0ecf4     08 4E 05 F1 | 	add	fp, #8
0ecf8     A7 3A 68 FC | 	wrlong	#29, fp
0ecfc     08 4E 85 F1 | 	sub	fp, #8
0ed00     A7 12 02 F6 | 	mov	arg01, fp
0ed04     51 00 00 FF 
0ed08     DC E5 85 F1 | 	sub	objptr, ##41948
0ed0c     BC 9A BF FD | 	call	#_push
0ed10                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0ed10     14 00 90 FD | 	jmp	#LR__1224
0ed14                 | LR__1222
0ed14     29 12 06 F6 | 	mov	arg01, #41
0ed18     A0 32 B0 FD | 	call	#_printerror
0ed1c                 | '      printerror(41) : return
0ed1c     08 00 90 FD | 	jmp	#LR__1224
0ed20                 | LR__1223
0ed20     29 12 06 F6 | 	mov	arg01, #41
0ed24     94 32 B0 FD | 	call	#_printerror
0ed28                 | LR__1224
0ed28     A7 F0 03 F6 | 	mov	ptra, fp
0ed2c     B2 00 A0 FD | 	call	#popregs_
0ed30                 | _do_strig_ret
0ed30     2D 00 64 FD | 	ret
0ed34                 | 
0ed34                 | ' 
0ed34                 | ' sub do_getpixel
0ed34                 | _do_getpixel
0ed34     00 4A 05 F6 | 	mov	COUNT_, #0
0ed38     A8 00 A0 FD | 	call	#pushregs_
0ed3c     24 F0 07 F1 | 	add	ptra, #36
0ed40     41 00 00 FF 
0ed44     44 E4 05 F1 | 	add	objptr, ##33348
0ed48     F2 16 02 FB | 	rdlong	arg03, objptr
0ed4c     0B 15 02 F6 | 	mov	arg02, arg03
0ed50     01 14 66 F0 | 	shl	arg02, #1
0ed54     0B 15 02 F1 | 	add	arg02, arg03
0ed58     02 14 66 F0 | 	shl	arg02, #2
0ed5c     03 00 00 FF 
0ed60     04 E4 85 F1 | 	sub	objptr, ##1540
0ed64     F2 14 02 F1 | 	add	arg02, objptr
0ed68     0A 17 02 FB | 	rdlong	arg03, arg02
0ed6c     18 4E 05 F1 | 	add	fp, #24
0ed70     A7 16 62 FC | 	wrlong	arg03, fp
0ed74                 | ' 
0ed74                 | ' numpar=compiledline(lineptr_e).result.uresult
0ed74                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0ed74     18 4E 85 F1 | 	sub	fp, #24
0ed78     02 16 0E F2 | 	cmp	arg03, #2 wz
0ed7c     3E 00 00 FF 
0ed80     40 E4 85 F1 | 	sub	objptr, ##31808
0ed84     3C 00 90 AD |  if_e	jmp	#LR__1230
0ed88     00 12 06 F6 | 	mov	arg01, #0
0ed8c     D4 BC B0 FD | 	call	#__system___getiolock_0348
0ed90     FD 12 02 F6 | 	mov	arg01, result1
0ed94     18 67 B0 FD | 	call	#__system___lockmem
0ed98     25 01 00 FF 
0ed9c     99 15 06 F6 | 	mov	arg02, ##@LR__4337
0eda0     00 12 06 F6 | 	mov	arg01, #0
0eda4     00 16 06 F6 | 	mov	arg03, #0
0eda8     F8 73 B0 FD | 	call	#__system___basic_print_string
0edac     00 12 06 F6 | 	mov	arg01, #0
0edb0     B0 BC B0 FD | 	call	#__system___getiolock_0348
0edb4     FD 00 68 FC | 	wrlong	#0, result1
0edb8     27 12 06 F6 | 	mov	arg01, #39
0edbc     FC 31 B0 FD | 	call	#_printerror
0edc0     B4 00 90 FD | 	jmp	#LR__1231
0edc4                 | LR__1230
0edc4     6C 99 BF FD | 	call	#_pop
0edc8     FD 16 02 F6 | 	mov	arg03, result1
0edcc     FE 14 02 F6 | 	mov	arg02, result2
0edd0     FF 12 02 F6 | 	mov	arg01, result3
0edd4     0C 4E 05 F1 | 	add	fp, #12
0edd8     A7 16 62 FC | 	wrlong	arg03, fp
0eddc     04 4E 05 F1 | 	add	fp, #4
0ede0     A7 14 62 FC | 	wrlong	arg02, fp
0ede4     04 4E 05 F1 | 	add	fp, #4
0ede8     A7 12 62 FC | 	wrlong	arg01, fp
0edec     14 4E 85 F1 | 	sub	fp, #20
0edf0     40 99 BF FD | 	call	#_pop
0edf4     FF 16 02 F6 | 	mov	arg03, result3
0edf8     A7 FA 61 FC | 	wrlong	result1, fp
0edfc     04 4E 05 F1 | 	add	fp, #4
0ee00     A7 FC 61 FC | 	wrlong	result2, fp
0ee04     04 4E 05 F1 | 	add	fp, #4
0ee08     A7 16 62 FC | 	wrlong	arg03, fp
0ee0c     08 4E 85 F1 | 	sub	fp, #8
0ee10     A7 12 02 F6 | 	mov	arg01, fp
0ee14     E4 F7 BF FD | 	call	#_converttoint
0ee18     1C 4E 05 F1 | 	add	fp, #28
0ee1c     A7 FA 61 FC | 	wrlong	result1, fp
0ee20     10 4E 85 F1 | 	sub	fp, #16
0ee24     A7 12 02 F6 | 	mov	arg01, fp
0ee28     0C 4E 85 F1 | 	sub	fp, #12
0ee2c     CC F7 BF FD | 	call	#_converttoint
0ee30     FD 16 02 F6 | 	mov	arg03, result1
0ee34     20 4E 05 F1 | 	add	fp, #32
0ee38     A7 16 62 FC | 	wrlong	arg03, fp
0ee3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ee40     04 4E 85 F1 | 	sub	fp, #4
0ee44     A7 FE 01 FB | 	rdlong	result3, fp
0ee48     FF 12 02 F1 | 	add	arg01, result3
0ee4c     1C 4E 85 F1 | 	sub	fp, #28
0ee50     0A 16 66 F0 | 	shl	arg03, #10
0ee54     0B 13 02 F1 | 	add	arg01, arg03
0ee58     C4 32 B0 FD | 	call	#_pspeek
0ee5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ee60     A7 FA 61 FC | 	wrlong	result1, fp
0ee64     08 4E 05 F1 | 	add	fp, #8
0ee68     A7 3A 68 FC | 	wrlong	#29, fp
0ee6c     08 4E 85 F1 | 	sub	fp, #8
0ee70     A7 12 02 F6 | 	mov	arg01, fp
0ee74     54 99 BF FD | 	call	#_push
0ee78                 | LR__1231
0ee78     A7 F0 03 F6 | 	mov	ptra, fp
0ee7c     B2 00 A0 FD | 	call	#popregs_
0ee80                 | _do_getpixel_ret
0ee80     2D 00 64 FD | 	ret
0ee84                 | 
0ee84                 | ' 
0ee84                 | ' 
0ee84                 | ' 
0ee84                 | ' sub do_defsprite
0ee84                 | _do_defsprite
0ee84     07 4A 05 F6 | 	mov	COUNT_, #7
0ee88     A8 00 A0 FD | 	call	#pushregs_
0ee8c     5C F0 07 F1 | 	add	ptra, #92
0ee90     A0 98 BF FD | 	call	#_pop
0ee94     FD 16 02 F6 | 	mov	arg03, result1
0ee98     FE 14 02 F6 | 	mov	arg02, result2
0ee9c     FF 12 02 F6 | 	mov	arg01, result3
0eea0     30 4E 05 F1 | 	add	fp, #48
0eea4     A7 16 62 FC | 	wrlong	arg03, fp
0eea8     04 4E 05 F1 | 	add	fp, #4
0eeac     A7 14 62 FC | 	wrlong	arg02, fp
0eeb0     04 4E 05 F1 | 	add	fp, #4
0eeb4     A7 12 62 FC | 	wrlong	arg01, fp
0eeb8     38 4E 85 F1 | 	sub	fp, #56
0eebc     74 98 BF FD | 	call	#_pop
0eec0     FD 16 02 F6 | 	mov	arg03, result1
0eec4     FE 14 02 F6 | 	mov	arg02, result2
0eec8     FF 12 02 F6 | 	mov	arg01, result3
0eecc     24 4E 05 F1 | 	add	fp, #36
0eed0     A7 16 62 FC | 	wrlong	arg03, fp
0eed4     04 4E 05 F1 | 	add	fp, #4
0eed8     A7 14 62 FC | 	wrlong	arg02, fp
0eedc     04 4E 05 F1 | 	add	fp, #4
0eee0     A7 12 62 FC | 	wrlong	arg01, fp
0eee4     2C 4E 85 F1 | 	sub	fp, #44
0eee8     48 98 BF FD | 	call	#_pop
0eeec     FD 16 02 F6 | 	mov	arg03, result1
0eef0     FE 14 02 F6 | 	mov	arg02, result2
0eef4     FF 12 02 F6 | 	mov	arg01, result3
0eef8     18 4E 05 F1 | 	add	fp, #24
0eefc     A7 16 62 FC | 	wrlong	arg03, fp
0ef00     04 4E 05 F1 | 	add	fp, #4
0ef04     A7 14 62 FC | 	wrlong	arg02, fp
0ef08     04 4E 05 F1 | 	add	fp, #4
0ef0c     A7 12 62 FC | 	wrlong	arg01, fp
0ef10     20 4E 85 F1 | 	sub	fp, #32
0ef14     1C 98 BF FD | 	call	#_pop
0ef18     FD 16 02 F6 | 	mov	arg03, result1
0ef1c     FE 14 02 F6 | 	mov	arg02, result2
0ef20     FF 12 02 F6 | 	mov	arg01, result3
0ef24     0C 4E 05 F1 | 	add	fp, #12
0ef28     A7 16 62 FC | 	wrlong	arg03, fp
0ef2c     04 4E 05 F1 | 	add	fp, #4
0ef30     A7 14 62 FC | 	wrlong	arg02, fp
0ef34     04 4E 05 F1 | 	add	fp, #4
0ef38     A7 12 62 FC | 	wrlong	arg01, fp
0ef3c     14 4E 85 F1 | 	sub	fp, #20
0ef40     F0 97 BF FD | 	call	#_pop
0ef44     FF 16 02 F6 | 	mov	arg03, result3
0ef48     A7 FA 61 FC | 	wrlong	result1, fp
0ef4c     04 4E 05 F1 | 	add	fp, #4
0ef50     A7 FC 61 FC | 	wrlong	result2, fp
0ef54     04 4E 05 F1 | 	add	fp, #4
0ef58     A7 16 62 FC | 	wrlong	arg03, fp
0ef5c     08 4E 85 F1 | 	sub	fp, #8
0ef60     A7 12 02 F6 | 	mov	arg01, fp
0ef64     94 F6 BF FD | 	call	#_converttoint
0ef68     3C 4E 05 F1 | 	add	fp, #60
0ef6c     A7 FA 61 FC | 	wrlong	result1, fp
0ef70     30 4E 85 F1 | 	sub	fp, #48
0ef74     A7 12 02 F6 | 	mov	arg01, fp
0ef78     0C 4E 85 F1 | 	sub	fp, #12
0ef7c     7C F6 BF FD | 	call	#_converttoint
0ef80     40 4E 05 F1 | 	add	fp, #64
0ef84     A7 FA 61 FC | 	wrlong	result1, fp
0ef88     28 4E 85 F1 | 	sub	fp, #40
0ef8c     A7 12 02 F6 | 	mov	arg01, fp
0ef90     18 4E 85 F1 | 	sub	fp, #24
0ef94     64 F6 BF FD | 	call	#_converttoint
0ef98     44 4E 05 F1 | 	add	fp, #68
0ef9c     A7 FA 61 FC | 	wrlong	result1, fp
0efa0     20 4E 85 F1 | 	sub	fp, #32
0efa4     A7 12 02 F6 | 	mov	arg01, fp
0efa8     24 4E 85 F1 | 	sub	fp, #36
0efac     4C F6 BF FD | 	call	#_converttoint
0efb0     48 4E 05 F1 | 	add	fp, #72
0efb4     A7 FA 61 FC | 	wrlong	result1, fp
0efb8     18 4E 85 F1 | 	sub	fp, #24
0efbc     A7 12 02 F6 | 	mov	arg01, fp
0efc0     30 4E 85 F1 | 	sub	fp, #48
0efc4     34 F6 BF FD | 	call	#_converttoint
0efc8     4C 4E 05 F1 | 	add	fp, #76
0efcc     A7 FA 61 FC | 	wrlong	result1, fp
0efd0                 | ' 
0efd0                 | ' t5=pop()
0efd0                 | ' t4=pop()
0efd0                 | ' t3=pop()
0efd0                 | ' t2=pop()
0efd0                 | ' t1=pop()
0efd0                 | ' 
0efd0                 | ' ' do convert, defsprite is not a racing command
0efd0                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0efd0                 | '  
0efd0                 | ' ' todo: check parameters for linits
0efd0                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0efd0     10 4E 85 F1 | 	sub	fp, #16
0efd4     A7 16 02 FB | 	rdlong	arg03, fp
0efd8     3C 4E 85 F1 | 	sub	fp, #60
0efdc     02 16 66 F0 | 	shl	arg03, #2
0efe0     51 00 00 FF 
0efe4     F8 E5 05 F1 | 	add	objptr, ##41976
0efe8     F2 16 02 F1 | 	add	arg03, objptr
0efec     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0eff0     51 00 00 FF 
0eff4     F8 E5 85 F1 | 	sub	objptr, ##41976
0eff8     2C 00 90 AD |  if_e	jmp	#LR__1240
0effc     3C 4E 05 F1 | 	add	fp, #60
0f000     A7 16 02 FB | 	rdlong	arg03, fp
0f004     3C 4E 85 F1 | 	sub	fp, #60
0f008     02 16 66 F0 | 	shl	arg03, #2
0f00c     51 00 00 FF 
0f010     F8 E5 05 F1 | 	add	objptr, ##41976
0f014     F2 16 02 F1 | 	add	arg03, objptr
0f018     0B 13 02 FB | 	rdlong	arg01, arg03
0f01c     51 00 00 FF 
0f020     F8 E5 85 F1 | 	sub	objptr, ##41976
0f024     2C A0 B0 FD | 	call	#__system___gc_free
0f028                 | LR__1240
0f028     3C 4E 05 F1 | 	add	fp, #60
0f02c     A7 1E 02 FB | 	rdlong	local01, fp
0f030     0C 4E 05 F1 | 	add	fp, #12
0f034     A7 16 02 FB | 	rdlong	arg03, fp
0f038     04 4E 05 F1 | 	add	fp, #4
0f03c     A7 14 02 FB | 	rdlong	arg02, fp
0f040     0A 17 02 FD | 	qmul	arg03, arg02
0f044     02 1E 66 F0 | 	shl	local01, #2
0f048     51 00 00 FF 
0f04c     F8 E5 05 F1 | 	add	objptr, ##41976
0f050     F2 1E 02 F1 | 	add	local01, objptr
0f054     4C 4E 85 F1 | 	sub	fp, #76
0f058     51 00 00 FF 
0f05c     F8 E5 85 F1 | 	sub	objptr, ##41976
0f060     18 12 62 FD | 	getqx	arg01
0f064     B0 9E B0 FD | 	call	#__system___gc_alloc_managed
0f068     0F FB 61 FC | 	wrlong	result1, local01
0f06c                 | ' for y=a3 to a3+a5-1
0f06c     44 4E 05 F1 | 	add	fp, #68
0f070     A7 20 02 FB | 	rdlong	local02, fp
0f074     0C 4E 05 F1 | 	add	fp, #12
0f078     A7 20 62 FC | 	wrlong	local02, fp
0f07c     0C 4E 85 F1 | 	sub	fp, #12
0f080     A7 22 02 FB | 	rdlong	local03, fp
0f084     08 4E 05 F1 | 	add	fp, #8
0f088     A7 24 02 FB | 	rdlong	local04, fp
0f08c     4C 4E 85 F1 | 	sub	fp, #76
0f090     12 23 02 F1 | 	add	local03, local04
0f094                 | LR__1241
0f094     50 4E 05 F1 | 	add	fp, #80
0f098     A7 20 02 FB | 	rdlong	local02, fp
0f09c     50 4E 85 F1 | 	sub	fp, #80
0f0a0     11 21 52 F2 | 	cmps	local02, local03 wc
0f0a4     10 01 90 3D |  if_ae	jmp	#LR__1244
0f0a8                 | '   for x=a2 to a4+a2-1
0f0a8     40 4E 05 F1 | 	add	fp, #64
0f0ac     A7 1E 02 FB | 	rdlong	local01, fp
0f0b0     52 00 00 FF 
0f0b4     54 E4 05 F1 | 	add	objptr, ##42068
0f0b8     F2 1E 62 FC | 	wrlong	local01, objptr
0f0bc     52 00 00 FF 
0f0c0     54 E4 85 F1 | 	sub	objptr, ##42068
0f0c4     08 4E 05 F1 | 	add	fp, #8
0f0c8     A7 26 02 FB | 	rdlong	local05, fp
0f0cc     08 4E 85 F1 | 	sub	fp, #8
0f0d0     A7 28 02 FB | 	rdlong	local06, fp
0f0d4     40 4E 85 F1 | 	sub	fp, #64
0f0d8     14 27 02 F1 | 	add	local05, local06
0f0dc                 | LR__1242
0f0dc     52 00 00 FF 
0f0e0     54 E4 05 F1 | 	add	objptr, ##42068
0f0e4     F2 1E 02 FB | 	rdlong	local01, objptr
0f0e8     52 00 00 FF 
0f0ec     54 E4 85 F1 | 	sub	objptr, ##42068
0f0f0     13 1F 52 F2 | 	cmps	local01, local05 wc
0f0f4     A8 00 90 3D |  if_ae	jmp	#LR__1243
0f0f8     3C 4E 05 F1 | 	add	fp, #60
0f0fc     A7 28 02 FB | 	rdlong	local06, fp
0f100     04 4E 05 F1 | 	add	fp, #4
0f104     A7 24 02 FB | 	rdlong	local04, fp
0f108     10 4E 05 F1 | 	add	fp, #16
0f10c     A7 20 02 FB | 	rdlong	local02, fp
0f110     10 1F 02 F6 | 	mov	local01, local02
0f114     0C 4E 85 F1 | 	sub	fp, #12
0f118     A7 16 02 FB | 	rdlong	arg03, fp
0f11c     0B 1F 82 F1 | 	sub	local01, arg03
0f120     04 4E 05 F1 | 	add	fp, #4
0f124     A7 16 02 FB | 	rdlong	arg03, fp
0f128     0B 1F 02 FD | 	qmul	local01, arg03
0f12c     02 28 66 F0 | 	shl	local06, #2
0f130     51 00 00 FF 
0f134     F8 E5 05 F1 | 	add	objptr, ##41976
0f138     F2 28 02 F1 | 	add	local06, objptr
0f13c     14 29 02 FB | 	rdlong	local06, local06
0f140     5C E4 05 F1 | 	add	objptr, #92
0f144     F2 1E 02 FB | 	rdlong	local01, objptr
0f148     52 00 00 FF 
0f14c     54 E4 85 F1 | 	sub	objptr, ##42068
0f150     0F 2B 02 F6 | 	mov	local07, local01
0f154     12 2B 82 F1 | 	sub	local07, local04
0f158     F2 12 02 FB | 	rdlong	arg01, objptr
0f15c     0F 13 02 F1 | 	add	arg01, local01
0f160     48 4E 85 F1 | 	sub	fp, #72
0f164     0A 20 66 F0 | 	shl	local02, #10
0f168     10 13 02 F1 | 	add	arg01, local02
0f16c     18 24 62 FD | 	getqx	local04
0f170     12 2B 02 F1 | 	add	local07, local04
0f174     14 2B 02 F1 | 	add	local07, local06
0f178     A4 2F B0 FD | 	call	#_pspeek
0f17c     15 FB 41 FC | 	wrbyte	result1, local07
0f180     52 00 00 FF 
0f184     54 E4 05 F1 | 	add	objptr, ##42068
0f188     F2 2A 02 FB | 	rdlong	local07, objptr
0f18c     01 2A 06 F1 | 	add	local07, #1
0f190     F2 2A 62 FC | 	wrlong	local07, objptr
0f194     52 00 00 FF 
0f198     54 E4 85 F1 | 	sub	objptr, ##42068
0f19c     3C FF 9F FD | 	jmp	#LR__1242
0f1a0                 | LR__1243
0f1a0     50 4E 05 F1 | 	add	fp, #80
0f1a4     A7 2A 02 FB | 	rdlong	local07, fp
0f1a8     01 2A 06 F1 | 	add	local07, #1
0f1ac     A7 2A 62 FC | 	wrlong	local07, fp
0f1b0     50 4E 85 F1 | 	sub	fp, #80
0f1b4     DC FE 9F FD | 	jmp	#LR__1241
0f1b8                 | LR__1244
0f1b8     3C 4E 05 F1 | 	add	fp, #60
0f1bc     A7 2A 02 FB | 	rdlong	local07, fp
0f1c0     15 13 02 F6 | 	mov	arg01, local07
0f1c4     3C 4E 85 F1 | 	sub	fp, #60
0f1c8     02 2A 66 F0 | 	shl	local07, #2
0f1cc     51 00 00 FF 
0f1d0     F8 E5 05 F1 | 	add	objptr, ##41976
0f1d4     F2 2A 02 F1 | 	add	local07, objptr
0f1d8     15 15 02 FB | 	rdlong	arg02, local07
0f1dc     51 00 00 FF 
0f1e0     F8 E5 85 F1 | 	sub	objptr, ##41976
0f1e4     B0 42 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0f1e8     3C 4E 05 F1 | 	add	fp, #60
0f1ec     A7 12 02 FB | 	rdlong	arg01, fp
0f1f0     0C 4E 05 F1 | 	add	fp, #12
0f1f4     A7 14 02 FB | 	rdlong	arg02, fp
0f1f8     04 4E 05 F1 | 	add	fp, #4
0f1fc     A7 16 02 FB | 	rdlong	arg03, fp
0f200     4C 4E 85 F1 | 	sub	fp, #76
0f204     04 43 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f208     A7 F0 03 F6 | 	mov	ptra, fp
0f20c     B2 00 A0 FD | 	call	#popregs_
0f210                 | _do_defsprite_ret
0f210     2D 00 64 FD | 	ret
0f214                 | 
0f214                 | ' 
0f214                 | ' sub do_sprite
0f214                 | _do_sprite
0f214     00 4A 05 F6 | 	mov	COUNT_, #0
0f218     A8 00 A0 FD | 	call	#pushregs_
0f21c     30 F0 07 F1 | 	add	ptra, #48
0f220     10 95 BF FD | 	call	#_pop
0f224     FD 16 02 F6 | 	mov	arg03, result1
0f228     FE 14 02 F6 | 	mov	arg02, result2
0f22c     FF 12 02 F6 | 	mov	arg01, result3
0f230     18 4E 05 F1 | 	add	fp, #24
0f234     A7 16 62 FC | 	wrlong	arg03, fp
0f238     04 4E 05 F1 | 	add	fp, #4
0f23c     A7 14 62 FC | 	wrlong	arg02, fp
0f240     04 4E 05 F1 | 	add	fp, #4
0f244     A7 12 62 FC | 	wrlong	arg01, fp
0f248     20 4E 85 F1 | 	sub	fp, #32
0f24c     E4 94 BF FD | 	call	#_pop
0f250     FD 16 02 F6 | 	mov	arg03, result1
0f254     FE 14 02 F6 | 	mov	arg02, result2
0f258     FF 12 02 F6 | 	mov	arg01, result3
0f25c     0C 4E 05 F1 | 	add	fp, #12
0f260     A7 16 62 FC | 	wrlong	arg03, fp
0f264     04 4E 05 F1 | 	add	fp, #4
0f268     A7 14 62 FC | 	wrlong	arg02, fp
0f26c     04 4E 05 F1 | 	add	fp, #4
0f270     A7 12 62 FC | 	wrlong	arg01, fp
0f274     14 4E 85 F1 | 	sub	fp, #20
0f278     B8 94 BF FD | 	call	#_pop
0f27c     FF 16 02 F6 | 	mov	arg03, result3
0f280     A7 FA 61 FC | 	wrlong	result1, fp
0f284     04 4E 05 F1 | 	add	fp, #4
0f288     A7 FC 61 FC | 	wrlong	result2, fp
0f28c     04 4E 05 F1 | 	add	fp, #4
0f290     A7 16 62 FC | 	wrlong	arg03, fp
0f294     08 4E 85 F1 | 	sub	fp, #8
0f298     A7 12 02 F6 | 	mov	arg01, fp
0f29c     5C F3 BF FD | 	call	#_converttoint
0f2a0     24 4E 05 F1 | 	add	fp, #36
0f2a4     A7 FA 61 FC | 	wrlong	result1, fp
0f2a8     18 4E 85 F1 | 	sub	fp, #24
0f2ac     A7 12 02 F6 | 	mov	arg01, fp
0f2b0     0C 4E 85 F1 | 	sub	fp, #12
0f2b4     44 F3 BF FD | 	call	#_converttoint
0f2b8     28 4E 05 F1 | 	add	fp, #40
0f2bc     A7 FA 61 FC | 	wrlong	result1, fp
0f2c0     10 4E 85 F1 | 	sub	fp, #16
0f2c4     A7 12 02 F6 | 	mov	arg01, fp
0f2c8     18 4E 85 F1 | 	sub	fp, #24
0f2cc     2C F3 BF FD | 	call	#_converttoint
0f2d0     2C 4E 05 F1 | 	add	fp, #44
0f2d4     A7 FA 61 FC | 	wrlong	result1, fp
0f2d8     08 4E 85 F1 | 	sub	fp, #8
0f2dc     A7 12 02 FB | 	rdlong	arg01, fp
0f2e0     04 4E 05 F1 | 	add	fp, #4
0f2e4     A7 14 02 FB | 	rdlong	arg02, fp
0f2e8     FD 16 02 F6 | 	mov	arg03, result1
0f2ec     28 4E 85 F1 | 	sub	fp, #40
0f2f0     CC 41 B0 FD | 	call	#_hg010b_spin2_setspritepos
0f2f4     A7 F0 03 F6 | 	mov	ptra, fp
0f2f8     B2 00 A0 FD | 	call	#popregs_
0f2fc                 | _do_sprite_ret
0f2fc     2D 00 64 FD | 	ret
0f300                 | 
0f300                 | ' 
0f300                 | ' sub do_mousex
0f300                 | _do_mousex
0f300     00 4A 05 F6 | 	mov	COUNT_, #0
0f304     A8 00 A0 FD | 	call	#pushregs_
0f308     0C F0 07 F1 | 	add	ptra, #12
0f30c     08 4E 05 F1 | 	add	fp, #8
0f310     A7 3A 68 FC | 	wrlong	#29, fp
0f314     08 4E 85 F1 | 	sub	fp, #8
0f318     51 00 00 FF 
0f31c     B0 E5 05 F1 | 	add	objptr, ##41904
0f320     F2 12 02 FB | 	rdlong	arg01, objptr
0f324     51 00 00 FF 
0f328     B0 E5 85 F1 | 	sub	objptr, ##41904
0f32c     A7 12 62 FC | 	wrlong	arg01, fp
0f330     A7 12 02 F6 | 	mov	arg01, fp
0f334     94 94 BF FD | 	call	#_push
0f338     A7 F0 03 F6 | 	mov	ptra, fp
0f33c     B2 00 A0 FD | 	call	#popregs_
0f340                 | _do_mousex_ret
0f340     2D 00 64 FD | 	ret
0f344                 | 
0f344                 | ' 
0f344                 | ' sub do_mousey
0f344                 | _do_mousey
0f344     00 4A 05 F6 | 	mov	COUNT_, #0
0f348     A8 00 A0 FD | 	call	#pushregs_
0f34c     0C F0 07 F1 | 	add	ptra, #12
0f350     08 4E 05 F1 | 	add	fp, #8
0f354     A7 3A 68 FC | 	wrlong	#29, fp
0f358     08 4E 85 F1 | 	sub	fp, #8
0f35c     51 00 00 FF 
0f360     B4 E5 05 F1 | 	add	objptr, ##41908
0f364     F2 12 02 FB | 	rdlong	arg01, objptr
0f368     51 00 00 FF 
0f36c     B4 E5 85 F1 | 	sub	objptr, ##41908
0f370     A7 12 62 FC | 	wrlong	arg01, fp
0f374     A7 12 02 F6 | 	mov	arg01, fp
0f378     50 94 BF FD | 	call	#_push
0f37c     A7 F0 03 F6 | 	mov	ptra, fp
0f380     B2 00 A0 FD | 	call	#popregs_
0f384                 | _do_mousey_ret
0f384     2D 00 64 FD | 	ret
0f388                 | 
0f388                 | ' 
0f388                 | ' sub do_mousew
0f388                 | _do_mousew
0f388     00 4A 05 F6 | 	mov	COUNT_, #0
0f38c     A8 00 A0 FD | 	call	#pushregs_
0f390     0C F0 07 F1 | 	add	ptra, #12
0f394     08 4E 05 F1 | 	add	fp, #8
0f398     A7 38 68 FC | 	wrlong	#28, fp
0f39c     08 4E 85 F1 | 	sub	fp, #8
0f3a0     51 00 00 FF 
0f3a4     BC E5 05 F1 | 	add	objptr, ##41916
0f3a8     F2 12 02 FB | 	rdlong	arg01, objptr
0f3ac     51 00 00 FF 
0f3b0     BC E5 85 F1 | 	sub	objptr, ##41916
0f3b4     A7 12 62 FC | 	wrlong	arg01, fp
0f3b8     A7 12 02 F6 | 	mov	arg01, fp
0f3bc     0C 94 BF FD | 	call	#_push
0f3c0     A7 F0 03 F6 | 	mov	ptra, fp
0f3c4     B2 00 A0 FD | 	call	#popregs_
0f3c8                 | _do_mousew_ret
0f3c8     2D 00 64 FD | 	ret
0f3cc                 | 
0f3cc                 | ' 
0f3cc                 | ' sub do_mousek
0f3cc                 | _do_mousek
0f3cc     00 4A 05 F6 | 	mov	COUNT_, #0
0f3d0     A8 00 A0 FD | 	call	#pushregs_
0f3d4     0C F0 07 F1 | 	add	ptra, #12
0f3d8     08 4E 05 F1 | 	add	fp, #8
0f3dc     A7 3A 68 FC | 	wrlong	#29, fp
0f3e0     08 4E 85 F1 | 	sub	fp, #8
0f3e4     51 00 00 FF 
0f3e8     B8 E5 05 F1 | 	add	objptr, ##41912
0f3ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f3f0     51 00 00 FF 
0f3f4     B8 E5 85 F1 | 	sub	objptr, ##41912
0f3f8     A7 12 62 FC | 	wrlong	arg01, fp
0f3fc     A7 12 02 F6 | 	mov	arg01, fp
0f400     C8 93 BF FD | 	call	#_push
0f404     A7 F0 03 F6 | 	mov	ptra, fp
0f408     B2 00 A0 FD | 	call	#popregs_
0f40c                 | _do_mousek_ret
0f40c     2D 00 64 FD | 	ret
0f410                 | 
0f410                 | ' sub do_gettime
0f410                 | _do_gettime
0f410     02 4A 05 F6 | 	mov	COUNT_, #2
0f414     A8 00 A0 FD | 	call	#pushregs_
0f418     14 F0 07 F1 | 	add	ptra, #20
0f41c                 | ' 
0f41c                 | ' const asm 
0f41c     1A 1E 72 FD | 	getct	local01 wc
0f420     1A 20 62 FD | 	getct	local02
0f424                 | ' 
0f424                 | ' return hi1, lo1
0f424     10 FD 01 F6 | 	mov	result2, local02
0f428     A7 1E 62 FC | 	wrlong	local01, fp
0f42c     04 4E 05 F1 | 	add	fp, #4
0f430     A7 FC 61 FC | 	wrlong	result2, fp
0f434     0C 4E 05 F1 | 	add	fp, #12
0f438     A7 3A 68 FC | 	wrlong	#29, fp
0f43c     0C 4E 85 F1 | 	sub	fp, #12
0f440     A7 12 02 FB | 	rdlong	arg01, fp
0f444     04 4E 05 F1 | 	add	fp, #4
0f448     A7 12 62 FC | 	wrlong	arg01, fp
0f44c     08 4E 85 F1 | 	sub	fp, #8
0f450     A7 12 02 FB | 	rdlong	arg01, fp
0f454     0C 4E 05 F1 | 	add	fp, #12
0f458     A7 12 62 FC | 	wrlong	arg01, fp
0f45c     04 4E 85 F1 | 	sub	fp, #4
0f460     A7 12 02 F6 | 	mov	arg01, fp
0f464     08 4E 85 F1 | 	sub	fp, #8
0f468     60 93 BF FD | 	call	#_push
0f46c     A7 F0 03 F6 | 	mov	ptra, fp
0f470     B2 00 A0 FD | 	call	#popregs_
0f474                 | _do_gettime_ret
0f474     2D 00 64 FD | 	ret
0f478                 | 
0f478                 | '    
0f478                 | ' 
0f478                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0f478                 | ' 
0f478                 | ' '' ----------------------------- Clear the screen
0f478                 | ' 
0f478                 | ' sub do_cls
0f478                 | _do_cls
0f478     2E 00 00 FF 
0f47c     00 E4 05 F1 | 	add	objptr, ##23552
0f480     F2 12 02 FB | 	rdlong	arg01, objptr
0f484     04 E4 85 F1 | 	sub	objptr, #4
0f488     F2 14 02 FB | 	rdlong	arg02, objptr
0f48c     2D 00 00 FF 
0f490     FC E5 85 F1 | 	sub	objptr, ##23548
0f494     38 4D B0 FD | 	call	#_hg010b_spin2_cls
0f498     2E 00 00 FF 
0f49c     00 E4 05 F1 | 	add	objptr, ##23552
0f4a0     F2 14 02 FB | 	rdlong	arg02, objptr
0f4a4     14 E4 85 F1 | 	sub	objptr, #20
0f4a8     F2 14 62 FC | 	wrlong	arg02, objptr
0f4ac     2D 00 00 FF 
0f4b0     EC E5 85 F1 | 	sub	objptr, ##23532
0f4b4                 | ' cls(ink,paper): plot_color=ink: print
0f4b4     00 12 06 F6 | 	mov	arg01, #0
0f4b8     A8 B5 B0 FD | 	call	#__system___getiolock_0348
0f4bc     FD 12 02 F6 | 	mov	arg01, result1
0f4c0     EC 5F B0 FD | 	call	#__system___lockmem
0f4c4     00 12 06 F6 | 	mov	arg01, #0
0f4c8     0A 14 06 F6 | 	mov	arg02, #10
0f4cc     00 16 06 F6 | 	mov	arg03, #0
0f4d0     78 6C B0 FD | 	call	#__system___basic_print_char
0f4d4     00 12 06 F6 | 	mov	arg01, #0
0f4d8     88 B5 B0 FD | 	call	#__system___getiolock_0348
0f4dc     FD 00 68 FC | 	wrlong	#0, result1
0f4e0                 | _do_cls_ret
0f4e0     2D 00 64 FD | 	ret
0f4e4                 | 
0f4e4                 | ' 
0f4e4                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0f4e4                 | ' 
0f4e4                 | ' sub do_color
0f4e4                 | _do_color
0f4e4     03 4A 05 F6 | 	mov	COUNT_, #3
0f4e8     A8 00 A0 FD | 	call	#pushregs_
0f4ec     44 92 BF FD | 	call	#_pop
0f4f0     FD 1E 02 F6 | 	mov	local01, result1
0f4f4     FE 20 02 F6 | 	mov	local02, result2
0f4f8     FF 22 02 F6 | 	mov	local03, result3
0f4fc     2D 00 00 FF 
0f500     EC E5 05 F1 | 	add	objptr, ##23532
0f504     F2 1E 62 FC | 	wrlong	local01, objptr
0f508     2D 00 00 FF 
0f50c     EC E5 85 F1 | 	sub	objptr, ##23532
0f510     A7 F0 03 F6 | 	mov	ptra, fp
0f514     B2 00 A0 FD | 	call	#popregs_
0f518                 | _do_color_ret
0f518     2D 00 64 FD | 	ret
0f51c                 | 
0f51c                 | ' 
0f51c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0f51c                 | ' 
0f51c                 | ' sub do_plot
0f51c                 | _do_plot
0f51c     08 4A 05 F6 | 	mov	COUNT_, #8
0f520     A8 00 A0 FD | 	call	#pushregs_
0f524     0C 92 BF FD | 	call	#_pop
0f528     FD 1E 02 F6 | 	mov	local01, result1
0f52c     FE 14 02 F6 | 	mov	arg02, result2
0f530     FF 16 02 F6 | 	mov	arg03, result3
0f534     0A 21 02 F6 | 	mov	local02, arg02
0f538     0B 23 02 F6 | 	mov	local03, arg03
0f53c     F4 91 BF FD | 	call	#_pop
0f540     FD 24 02 F6 | 	mov	local04, result1
0f544     FE 26 02 F6 | 	mov	local05, result2
0f548     FF 28 02 F6 | 	mov	local06, result3
0f54c     12 2B 02 F6 | 	mov	local07, local04
0f550     0F 2D 02 F6 | 	mov	local08, local01
0f554                 | ' t2=pop() 					 
0f554                 | ' t1=pop()
0f554                 | ' 
0f554                 | ' x=t1.result.iresult
0f554                 | ' y=t2.result.iresult	
0f554                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f554     1C 28 0E F2 | 	cmp	local06, #28 wz
0f558     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f55c     44 00 90 5D |  if_ne	jmp	#LR__1250
0f560     1C 22 0E F2 | 	cmp	local03, #28 wz
0f564     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f568     38 00 90 5D |  if_ne	jmp	#LR__1250
0f56c     2D 00 00 FF 
0f570     F0 E5 05 F1 | 	add	objptr, ##23536
0f574     F2 2A 62 FC | 	wrlong	local07, objptr
0f578     04 E4 05 F1 | 	add	objptr, #4
0f57c     F2 2C 62 FC | 	wrlong	local08, objptr
0f580     04 E4 85 F1 | 	sub	objptr, #4
0f584     F2 12 02 FB | 	rdlong	arg01, objptr
0f588     04 E4 85 F1 | 	sub	objptr, #4
0f58c     F2 16 02 FB | 	rdlong	arg03, objptr
0f590     2D 00 00 FF 
0f594     EC E5 85 F1 | 	sub	objptr, ##23532
0f598     16 15 02 F6 | 	mov	arg02, local08
0f59c     B8 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0f5a0     A4 00 90 FD | 	jmp	#LR__1255
0f5a4                 | LR__1250
0f5a4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f5a4     1E 28 0E F2 | 	cmp	local06, #30 wz
0f5a8     10 00 90 5D |  if_ne	jmp	#LR__1251
0f5ac     12 13 02 F6 | 	mov	arg01, local04
0f5b0     01 14 06 F6 | 	mov	arg02, #1
0f5b4     D4 8D B0 FD | 	call	#__system___float_tointeger
0f5b8     FD 2A 02 F6 | 	mov	local07, result1
0f5bc                 | LR__1251
0f5bc                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f5bc     1E 22 0E F2 | 	cmp	local03, #30 wz
0f5c0     10 00 90 5D |  if_ne	jmp	#LR__1252
0f5c4     0F 13 02 F6 | 	mov	arg01, local01
0f5c8     01 14 06 F6 | 	mov	arg02, #1
0f5cc     BC 8D B0 FD | 	call	#__system___float_tointeger
0f5d0     FD 2C 02 F6 | 	mov	local08, result1
0f5d4                 | LR__1252
0f5d4                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0f5d4     1F 28 0E F2 | 	cmp	local06, #31 wz
0f5d8     18 00 90 5D |  if_ne	jmp	#LR__1253
0f5dc     12 13 02 F6 | 	mov	arg01, local04
0f5e0     C8 90 B0 FD | 	call	#__system____builtin_atof
0f5e4     FD 12 02 F6 | 	mov	arg01, result1
0f5e8     00 14 06 F6 | 	mov	arg02, #0
0f5ec     9C 8D B0 FD | 	call	#__system___float_tointeger
0f5f0     FD 2A 02 F6 | 	mov	local07, result1
0f5f4                 | LR__1253
0f5f4                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0f5f4     1F 22 0E F2 | 	cmp	local03, #31 wz
0f5f8     18 00 90 5D |  if_ne	jmp	#LR__1254
0f5fc     0F 13 02 F6 | 	mov	arg01, local01
0f600     A8 90 B0 FD | 	call	#__system____builtin_atof
0f604     FD 12 02 F6 | 	mov	arg01, result1
0f608     00 14 06 F6 | 	mov	arg02, #0
0f60c     7C 8D B0 FD | 	call	#__system___float_tointeger
0f610     FD 2C 02 F6 | 	mov	local08, result1
0f614                 | LR__1254
0f614     2D 00 00 FF 
0f618     F0 E5 05 F1 | 	add	objptr, ##23536
0f61c     F2 2A 62 FC | 	wrlong	local07, objptr
0f620     04 E4 05 F1 | 	add	objptr, #4
0f624     F2 2C 62 FC | 	wrlong	local08, objptr
0f628     04 E4 85 F1 | 	sub	objptr, #4
0f62c     F2 12 02 FB | 	rdlong	arg01, objptr
0f630     04 E4 85 F1 | 	sub	objptr, #4
0f634     F2 16 02 FB | 	rdlong	arg03, objptr
0f638     2D 00 00 FF 
0f63c     EC E5 85 F1 | 	sub	objptr, ##23532
0f640     16 15 02 F6 | 	mov	arg02, local08
0f644     10 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0f648                 | LR__1255
0f648     A7 F0 03 F6 | 	mov	ptra, fp
0f64c     B2 00 A0 FD | 	call	#popregs_
0f650                 | _do_plot_ret
0f650     2D 00 64 FD | 	ret
0f654                 | 
0f654                 | ' 
0f654                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0f654                 | ' 
0f654                 | ' sub do_draw
0f654                 | _do_draw
0f654     08 4A 05 F6 | 	mov	COUNT_, #8
0f658     A8 00 A0 FD | 	call	#pushregs_
0f65c     D4 90 BF FD | 	call	#_pop
0f660     FD 1E 02 F6 | 	mov	local01, result1
0f664     FE 18 02 F6 | 	mov	arg04, result2
0f668     FF 16 02 F6 | 	mov	arg03, result3
0f66c     0C 21 02 F6 | 	mov	local02, arg04
0f670     0B 23 02 F6 | 	mov	local03, arg03
0f674     BC 90 BF FD | 	call	#_pop
0f678     FD 24 02 F6 | 	mov	local04, result1
0f67c     FE 26 02 F6 | 	mov	local05, result2
0f680     FF 28 02 F6 | 	mov	local06, result3
0f684     12 2B 02 F6 | 	mov	local07, local04
0f688     0F 2D 02 F6 | 	mov	local08, local01
0f68c                 | ' 
0f68c                 | ' t2=pop()
0f68c                 | ' t1=pop()
0f68c                 | ' x=t1.result.iresult
0f68c                 | ' y=t2.result.iresult
0f68c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f68c     1C 28 0E F2 | 	cmp	local06, #28 wz
0f690     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f694     5C 00 90 5D |  if_ne	jmp	#LR__1260
0f698     1C 22 0E F2 | 	cmp	local03, #28 wz
0f69c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f6a0     50 00 90 5D |  if_ne	jmp	#LR__1260
0f6a4     2D 00 00 FF 
0f6a8     F0 E5 05 F1 | 	add	objptr, ##23536
0f6ac     F2 12 02 FB | 	rdlong	arg01, objptr
0f6b0     04 E4 05 F1 | 	add	objptr, #4
0f6b4     F2 14 02 FB | 	rdlong	arg02, objptr
0f6b8     08 E4 85 F1 | 	sub	objptr, #8
0f6bc     F2 1A 02 FB | 	rdlong	arg05, objptr
0f6c0     2D 00 00 FF 
0f6c4     EC E5 85 F1 | 	sub	objptr, ##23532
0f6c8     15 17 02 F6 | 	mov	arg03, local07
0f6cc     16 19 02 F6 | 	mov	arg04, local08
0f6d0     34 41 B0 FD | 	call	#_hg010b_spin2_draw
0f6d4     2D 00 00 FF 
0f6d8     F0 E5 05 F1 | 	add	objptr, ##23536
0f6dc     F2 2A 62 FC | 	wrlong	local07, objptr
0f6e0     04 E4 05 F1 | 	add	objptr, #4
0f6e4     F2 2C 62 FC | 	wrlong	local08, objptr
0f6e8     2D 00 00 FF 
0f6ec     F4 E5 85 F1 | 	sub	objptr, ##23540
0f6f0     BC 00 90 FD | 	jmp	#LR__1265
0f6f4                 | LR__1260
0f6f4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f6f4     1E 28 0E F2 | 	cmp	local06, #30 wz
0f6f8     10 00 90 5D |  if_ne	jmp	#LR__1261
0f6fc     12 13 02 F6 | 	mov	arg01, local04
0f700     01 14 06 F6 | 	mov	arg02, #1
0f704     84 8C B0 FD | 	call	#__system___float_tointeger
0f708     FD 2A 02 F6 | 	mov	local07, result1
0f70c                 | LR__1261
0f70c                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f70c     1E 22 0E F2 | 	cmp	local03, #30 wz
0f710     10 00 90 5D |  if_ne	jmp	#LR__1262
0f714     0F 13 02 F6 | 	mov	arg01, local01
0f718     01 14 06 F6 | 	mov	arg02, #1
0f71c     6C 8C B0 FD | 	call	#__system___float_tointeger
0f720     FD 2C 02 F6 | 	mov	local08, result1
0f724                 | LR__1262
0f724                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0f724     1F 28 0E F2 | 	cmp	local06, #31 wz
0f728     18 00 90 5D |  if_ne	jmp	#LR__1263
0f72c     12 13 02 F6 | 	mov	arg01, local04
0f730     78 8F B0 FD | 	call	#__system____builtin_atof
0f734     FD 12 02 F6 | 	mov	arg01, result1
0f738     00 14 06 F6 | 	mov	arg02, #0
0f73c     4C 8C B0 FD | 	call	#__system___float_tointeger
0f740     FD 2A 02 F6 | 	mov	local07, result1
0f744                 | LR__1263
0f744                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0f744     1F 22 0E F2 | 	cmp	local03, #31 wz
0f748     18 00 90 5D |  if_ne	jmp	#LR__1264
0f74c     0F 13 02 F6 | 	mov	arg01, local01
0f750     58 8F B0 FD | 	call	#__system____builtin_atof
0f754     FD 12 02 F6 | 	mov	arg01, result1
0f758     00 14 06 F6 | 	mov	arg02, #0
0f75c     2C 8C B0 FD | 	call	#__system___float_tointeger
0f760     FD 2C 02 F6 | 	mov	local08, result1
0f764                 | LR__1264
0f764     2D 00 00 FF 
0f768     F0 E5 05 F1 | 	add	objptr, ##23536
0f76c     F2 12 02 FB | 	rdlong	arg01, objptr
0f770     04 E4 05 F1 | 	add	objptr, #4
0f774     F2 14 02 FB | 	rdlong	arg02, objptr
0f778     08 E4 85 F1 | 	sub	objptr, #8
0f77c     F2 1A 02 FB | 	rdlong	arg05, objptr
0f780     2D 00 00 FF 
0f784     EC E5 85 F1 | 	sub	objptr, ##23532
0f788     15 17 02 F6 | 	mov	arg03, local07
0f78c     16 19 02 F6 | 	mov	arg04, local08
0f790     74 40 B0 FD | 	call	#_hg010b_spin2_draw
0f794     2D 00 00 FF 
0f798     F0 E5 05 F1 | 	add	objptr, ##23536
0f79c     F2 2A 62 FC | 	wrlong	local07, objptr
0f7a0     04 E4 05 F1 | 	add	objptr, #4
0f7a4     F2 2C 62 FC | 	wrlong	local08, objptr
0f7a8     2D 00 00 FF 
0f7ac     F4 E5 85 F1 | 	sub	objptr, ##23540
0f7b0                 | LR__1265
0f7b0     A7 F0 03 F6 | 	mov	ptra, fp
0f7b4     B2 00 A0 FD | 	call	#popregs_
0f7b8                 | _do_draw_ret
0f7b8     2D 00 64 FD | 	ret
0f7bc                 | 
0f7bc                 | ' 
0f7bc                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0f7bc                 | ' 
0f7bc                 | ' sub do_fcircle
0f7bc                 | _do_fcircle
0f7bc     02 4A 05 F6 | 	mov	COUNT_, #2
0f7c0     A8 00 A0 FD | 	call	#pushregs_
0f7c4     24 F0 07 F1 | 	add	ptra, #36
0f7c8     68 8F BF FD | 	call	#_pop
0f7cc     FD 18 02 F6 | 	mov	arg04, result1
0f7d0     FE 16 02 F6 | 	mov	arg03, result2
0f7d4     FF 14 02 F6 | 	mov	arg02, result3
0f7d8     18 4E 05 F1 | 	add	fp, #24
0f7dc     A7 18 62 FC | 	wrlong	arg04, fp
0f7e0     04 4E 05 F1 | 	add	fp, #4
0f7e4     A7 16 62 FC | 	wrlong	arg03, fp
0f7e8     04 4E 05 F1 | 	add	fp, #4
0f7ec     A7 14 62 FC | 	wrlong	arg02, fp
0f7f0     20 4E 85 F1 | 	sub	fp, #32
0f7f4     3C 8F BF FD | 	call	#_pop
0f7f8     FD 18 02 F6 | 	mov	arg04, result1
0f7fc     FE 16 02 F6 | 	mov	arg03, result2
0f800     FF 1E 02 F6 | 	mov	local01, result3
0f804     0C 4E 05 F1 | 	add	fp, #12
0f808     A7 18 62 FC | 	wrlong	arg04, fp
0f80c     04 4E 05 F1 | 	add	fp, #4
0f810     A7 16 62 FC | 	wrlong	arg03, fp
0f814     04 4E 05 F1 | 	add	fp, #4
0f818     A7 1E 62 FC | 	wrlong	local01, fp
0f81c     14 4E 85 F1 | 	sub	fp, #20
0f820     10 8F BF FD | 	call	#_pop
0f824     A7 FA 61 FC | 	wrlong	result1, fp
0f828     04 4E 05 F1 | 	add	fp, #4
0f82c     A7 FC 61 FC | 	wrlong	result2, fp
0f830     04 4E 05 F1 | 	add	fp, #4
0f834     A7 FE 61 FC | 	wrlong	result3, fp
0f838                 | ' 
0f838                 | ' t3=pop()
0f838                 | ' t2=pop()
0f838                 | ' t1=pop()
0f838                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f838     FF 18 02 F6 | 	mov	arg04, result3
0f83c     08 4E 85 F1 | 	sub	fp, #8
0f840     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f844     08 4E 05 51 |  if_ne	add	fp, #8
0f848     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f84c     08 4E 85 51 |  if_ne	sub	fp, #8
0f850     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f854     7C 00 90 5D |  if_ne	jmp	#LR__1270
0f858     14 4E 05 F1 | 	add	fp, #20
0f85c     A7 1E 02 FB | 	rdlong	local01, fp
0f860     14 4E 85 F1 | 	sub	fp, #20
0f864     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f868     14 4E 05 51 |  if_ne	add	fp, #20
0f86c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f870     14 4E 85 51 |  if_ne	sub	fp, #20
0f874     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f878     58 00 90 5D |  if_ne	jmp	#LR__1270
0f87c     20 4E 05 F1 | 	add	fp, #32
0f880     A7 1E 02 FB | 	rdlong	local01, fp
0f884     20 4E 85 F1 | 	sub	fp, #32
0f888     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f88c     20 4E 05 51 |  if_ne	add	fp, #32
0f890     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f894     20 4E 85 51 |  if_ne	sub	fp, #32
0f898     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f89c     34 00 90 5D |  if_ne	jmp	#LR__1270
0f8a0     A7 12 02 FB | 	rdlong	arg01, fp
0f8a4     0C 4E 05 F1 | 	add	fp, #12
0f8a8     A7 14 02 FB | 	rdlong	arg02, fp
0f8ac     0C 4E 05 F1 | 	add	fp, #12
0f8b0     A7 16 02 FB | 	rdlong	arg03, fp
0f8b4     18 4E 85 F1 | 	sub	fp, #24
0f8b8     2D 00 00 FF 
0f8bc     EC E5 05 F1 | 	add	objptr, ##23532
0f8c0     F2 18 02 FB | 	rdlong	arg04, objptr
0f8c4     2D 00 00 FF 
0f8c8     EC E5 85 F1 | 	sub	objptr, ##23532
0f8cc     C8 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0f8d0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f8d0     54 00 90 FD | 	jmp	#LR__1271
0f8d4                 | LR__1270
0f8d4     A7 12 02 F6 | 	mov	arg01, fp
0f8d8     20 ED BF FD | 	call	#_converttoint
0f8dc     FD 1E 02 F6 | 	mov	local01, result1
0f8e0     0C 4E 05 F1 | 	add	fp, #12
0f8e4     A7 12 02 F6 | 	mov	arg01, fp
0f8e8     0C 4E 85 F1 | 	sub	fp, #12
0f8ec     0C ED BF FD | 	call	#_converttoint
0f8f0     FD 20 02 F6 | 	mov	local02, result1
0f8f4     18 4E 05 F1 | 	add	fp, #24
0f8f8     A7 12 02 F6 | 	mov	arg01, fp
0f8fc     18 4E 85 F1 | 	sub	fp, #24
0f900     F8 EC BF FD | 	call	#_converttoint
0f904     FD 16 02 F6 | 	mov	arg03, result1
0f908     2D 00 00 FF 
0f90c     EC E5 05 F1 | 	add	objptr, ##23532
0f910     F2 18 02 FB | 	rdlong	arg04, objptr
0f914     2D 00 00 FF 
0f918     EC E5 85 F1 | 	sub	objptr, ##23532
0f91c     0F 13 02 F6 | 	mov	arg01, local01
0f920     10 15 02 F6 | 	mov	arg02, local02
0f924     70 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0f928                 | LR__1271
0f928     A7 F0 03 F6 | 	mov	ptra, fp
0f92c     B2 00 A0 FD | 	call	#popregs_
0f930                 | _do_fcircle_ret
0f930     2D 00 64 FD | 	ret
0f934                 | 
0f934                 | ' 
0f934                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0f934                 | ' 
0f934                 | ' sub do_circle
0f934                 | _do_circle
0f934     02 4A 05 F6 | 	mov	COUNT_, #2
0f938     A8 00 A0 FD | 	call	#pushregs_
0f93c     24 F0 07 F1 | 	add	ptra, #36
0f940     F0 8D BF FD | 	call	#_pop
0f944     FD 18 02 F6 | 	mov	arg04, result1
0f948     FE 16 02 F6 | 	mov	arg03, result2
0f94c     FF 14 02 F6 | 	mov	arg02, result3
0f950     18 4E 05 F1 | 	add	fp, #24
0f954     A7 18 62 FC | 	wrlong	arg04, fp
0f958     04 4E 05 F1 | 	add	fp, #4
0f95c     A7 16 62 FC | 	wrlong	arg03, fp
0f960     04 4E 05 F1 | 	add	fp, #4
0f964     A7 14 62 FC | 	wrlong	arg02, fp
0f968     20 4E 85 F1 | 	sub	fp, #32
0f96c     C4 8D BF FD | 	call	#_pop
0f970     FD 18 02 F6 | 	mov	arg04, result1
0f974     FE 16 02 F6 | 	mov	arg03, result2
0f978     FF 1E 02 F6 | 	mov	local01, result3
0f97c     0C 4E 05 F1 | 	add	fp, #12
0f980     A7 18 62 FC | 	wrlong	arg04, fp
0f984     04 4E 05 F1 | 	add	fp, #4
0f988     A7 16 62 FC | 	wrlong	arg03, fp
0f98c     04 4E 05 F1 | 	add	fp, #4
0f990     A7 1E 62 FC | 	wrlong	local01, fp
0f994     14 4E 85 F1 | 	sub	fp, #20
0f998     98 8D BF FD | 	call	#_pop
0f99c     A7 FA 61 FC | 	wrlong	result1, fp
0f9a0     04 4E 05 F1 | 	add	fp, #4
0f9a4     A7 FC 61 FC | 	wrlong	result2, fp
0f9a8     04 4E 05 F1 | 	add	fp, #4
0f9ac     A7 FE 61 FC | 	wrlong	result3, fp
0f9b0                 | ' 
0f9b0                 | ' t3=pop()
0f9b0                 | ' t2=pop()
0f9b0                 | ' t1=pop()
0f9b0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f9b0     FF 18 02 F6 | 	mov	arg04, result3
0f9b4     08 4E 85 F1 | 	sub	fp, #8
0f9b8     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f9bc     08 4E 05 51 |  if_ne	add	fp, #8
0f9c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f9c4     08 4E 85 51 |  if_ne	sub	fp, #8
0f9c8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f9cc     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f9d0     14 4E 05 F1 | 	add	fp, #20
0f9d4     A7 1E 02 FB | 	rdlong	local01, fp
0f9d8     14 4E 85 F1 | 	sub	fp, #20
0f9dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f9e0     14 4E 05 51 |  if_ne	add	fp, #20
0f9e4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f9e8     14 4E 85 51 |  if_ne	sub	fp, #20
0f9ec     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f9f0     58 00 90 5D |  if_ne	jmp	#LR__1280
0f9f4     20 4E 05 F1 | 	add	fp, #32
0f9f8     A7 1E 02 FB | 	rdlong	local01, fp
0f9fc     20 4E 85 F1 | 	sub	fp, #32
0fa00     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa04     20 4E 05 51 |  if_ne	add	fp, #32
0fa08     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fa0c     20 4E 85 51 |  if_ne	sub	fp, #32
0fa10     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fa14     34 00 90 5D |  if_ne	jmp	#LR__1280
0fa18     A7 12 02 FB | 	rdlong	arg01, fp
0fa1c     0C 4E 05 F1 | 	add	fp, #12
0fa20     A7 14 02 FB | 	rdlong	arg02, fp
0fa24     0C 4E 05 F1 | 	add	fp, #12
0fa28     A7 16 02 FB | 	rdlong	arg03, fp
0fa2c     18 4E 85 F1 | 	sub	fp, #24
0fa30     2D 00 00 FF 
0fa34     EC E5 05 F1 | 	add	objptr, ##23532
0fa38     F2 18 02 FB | 	rdlong	arg04, objptr
0fa3c     2D 00 00 FF 
0fa40     EC E5 85 F1 | 	sub	objptr, ##23532
0fa44     5C 43 B0 FD | 	call	#_hg010b_spin2_circle
0fa48                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0fa48     54 00 90 FD | 	jmp	#LR__1281
0fa4c                 | LR__1280
0fa4c     A7 12 02 F6 | 	mov	arg01, fp
0fa50     A8 EB BF FD | 	call	#_converttoint
0fa54     FD 1E 02 F6 | 	mov	local01, result1
0fa58     0C 4E 05 F1 | 	add	fp, #12
0fa5c     A7 12 02 F6 | 	mov	arg01, fp
0fa60     0C 4E 85 F1 | 	sub	fp, #12
0fa64     94 EB BF FD | 	call	#_converttoint
0fa68     FD 20 02 F6 | 	mov	local02, result1
0fa6c     18 4E 05 F1 | 	add	fp, #24
0fa70     A7 12 02 F6 | 	mov	arg01, fp
0fa74     18 4E 85 F1 | 	sub	fp, #24
0fa78     80 EB BF FD | 	call	#_converttoint
0fa7c     FD 16 02 F6 | 	mov	arg03, result1
0fa80     2D 00 00 FF 
0fa84     EC E5 05 F1 | 	add	objptr, ##23532
0fa88     F2 18 02 FB | 	rdlong	arg04, objptr
0fa8c     2D 00 00 FF 
0fa90     EC E5 85 F1 | 	sub	objptr, ##23532
0fa94     0F 13 02 F6 | 	mov	arg01, local01
0fa98     10 15 02 F6 | 	mov	arg02, local02
0fa9c     04 43 B0 FD | 	call	#_hg010b_spin2_circle
0faa0                 | LR__1281
0faa0     A7 F0 03 F6 | 	mov	ptra, fp
0faa4     B2 00 A0 FD | 	call	#popregs_
0faa8                 | _do_circle_ret
0faa8     2D 00 64 FD | 	ret
0faac                 | 
0faac                 | ' 
0faac                 | ' ' -------------------------- Draw a rectangle
0faac                 | ' 
0faac                 | ' sub do_box
0faac                 | _do_box
0faac     03 4A 05 F6 | 	mov	COUNT_, #3
0fab0     A8 00 A0 FD | 	call	#pushregs_
0fab4     30 F0 07 F1 | 	add	ptra, #48
0fab8     78 8C BF FD | 	call	#_pop
0fabc     FD 1A 02 F6 | 	mov	arg05, result1
0fac0     FE 18 02 F6 | 	mov	arg04, result2
0fac4     FF 16 02 F6 | 	mov	arg03, result3
0fac8     24 4E 05 F1 | 	add	fp, #36
0facc     A7 1A 62 FC | 	wrlong	arg05, fp
0fad0     04 4E 05 F1 | 	add	fp, #4
0fad4     A7 18 62 FC | 	wrlong	arg04, fp
0fad8     04 4E 05 F1 | 	add	fp, #4
0fadc     A7 16 62 FC | 	wrlong	arg03, fp
0fae0     2C 4E 85 F1 | 	sub	fp, #44
0fae4     4C 8C BF FD | 	call	#_pop
0fae8     FD 1A 02 F6 | 	mov	arg05, result1
0faec     FE 18 02 F6 | 	mov	arg04, result2
0faf0     FF 16 02 F6 | 	mov	arg03, result3
0faf4     18 4E 05 F1 | 	add	fp, #24
0faf8     A7 1A 62 FC | 	wrlong	arg05, fp
0fafc     04 4E 05 F1 | 	add	fp, #4
0fb00     A7 18 62 FC | 	wrlong	arg04, fp
0fb04     04 4E 05 F1 | 	add	fp, #4
0fb08     A7 16 62 FC | 	wrlong	arg03, fp
0fb0c     20 4E 85 F1 | 	sub	fp, #32
0fb10     20 8C BF FD | 	call	#_pop
0fb14     FD 1A 02 F6 | 	mov	arg05, result1
0fb18     FE 18 02 F6 | 	mov	arg04, result2
0fb1c     FF 1E 02 F6 | 	mov	local01, result3
0fb20     0C 4E 05 F1 | 	add	fp, #12
0fb24     A7 1A 62 FC | 	wrlong	arg05, fp
0fb28     04 4E 05 F1 | 	add	fp, #4
0fb2c     A7 18 62 FC | 	wrlong	arg04, fp
0fb30     04 4E 05 F1 | 	add	fp, #4
0fb34     A7 1E 62 FC | 	wrlong	local01, fp
0fb38     14 4E 85 F1 | 	sub	fp, #20
0fb3c     F4 8B BF FD | 	call	#_pop
0fb40     A7 FA 61 FC | 	wrlong	result1, fp
0fb44     04 4E 05 F1 | 	add	fp, #4
0fb48     A7 FC 61 FC | 	wrlong	result2, fp
0fb4c     04 4E 05 F1 | 	add	fp, #4
0fb50     A7 FE 61 FC | 	wrlong	result3, fp
0fb54                 | ' 
0fb54                 | ' t4=pop()
0fb54                 | ' t3=pop()
0fb54                 | ' t2=pop()
0fb54                 | ' t1=pop()
0fb54                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fb54     FF 1A 02 F6 | 	mov	arg05, result3
0fb58     08 4E 85 F1 | 	sub	fp, #8
0fb5c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0fb60     08 4E 05 51 |  if_ne	add	fp, #8
0fb64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fb68     08 4E 85 51 |  if_ne	sub	fp, #8
0fb6c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fb70     A8 00 90 5D |  if_ne	jmp	#LR__1290
0fb74     14 4E 05 F1 | 	add	fp, #20
0fb78     A7 1E 02 FB | 	rdlong	local01, fp
0fb7c     14 4E 85 F1 | 	sub	fp, #20
0fb80     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb84     14 4E 05 51 |  if_ne	add	fp, #20
0fb88     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fb8c     14 4E 85 51 |  if_ne	sub	fp, #20
0fb90     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fb94     84 00 90 5D |  if_ne	jmp	#LR__1290
0fb98     20 4E 05 F1 | 	add	fp, #32
0fb9c     A7 1E 02 FB | 	rdlong	local01, fp
0fba0     20 4E 85 F1 | 	sub	fp, #32
0fba4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fba8     20 4E 05 51 |  if_ne	add	fp, #32
0fbac     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fbb0     20 4E 85 51 |  if_ne	sub	fp, #32
0fbb4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fbb8     60 00 90 5D |  if_ne	jmp	#LR__1290
0fbbc     2C 4E 05 F1 | 	add	fp, #44
0fbc0     A7 1E 02 FB | 	rdlong	local01, fp
0fbc4     2C 4E 85 F1 | 	sub	fp, #44
0fbc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbcc     2C 4E 05 51 |  if_ne	add	fp, #44
0fbd0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fbd4     2C 4E 85 51 |  if_ne	sub	fp, #44
0fbd8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fbdc     3C 00 90 5D |  if_ne	jmp	#LR__1290
0fbe0     A7 12 02 FB | 	rdlong	arg01, fp
0fbe4     0C 4E 05 F1 | 	add	fp, #12
0fbe8     A7 14 02 FB | 	rdlong	arg02, fp
0fbec     0C 4E 05 F1 | 	add	fp, #12
0fbf0     A7 16 02 FB | 	rdlong	arg03, fp
0fbf4     0C 4E 05 F1 | 	add	fp, #12
0fbf8     A7 18 02 FB | 	rdlong	arg04, fp
0fbfc     24 4E 85 F1 | 	sub	fp, #36
0fc00     2D 00 00 FF 
0fc04     EC E5 05 F1 | 	add	objptr, ##23532
0fc08     F2 1A 02 FB | 	rdlong	arg05, objptr
0fc0c     2D 00 00 FF 
0fc10     EC E5 85 F1 | 	sub	objptr, ##23532
0fc14     58 43 B0 FD | 	call	#_hg010b_spin2_box
0fc18                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0fc18     6C 00 90 FD | 	jmp	#LR__1291
0fc1c                 | LR__1290
0fc1c     A7 12 02 F6 | 	mov	arg01, fp
0fc20     D8 E9 BF FD | 	call	#_converttoint
0fc24     FD 20 02 F6 | 	mov	local02, result1
0fc28     0C 4E 05 F1 | 	add	fp, #12
0fc2c     A7 12 02 F6 | 	mov	arg01, fp
0fc30     0C 4E 85 F1 | 	sub	fp, #12
0fc34     C4 E9 BF FD | 	call	#_converttoint
0fc38     FD 22 02 F6 | 	mov	local03, result1
0fc3c     18 4E 05 F1 | 	add	fp, #24
0fc40     A7 12 02 F6 | 	mov	arg01, fp
0fc44     18 4E 85 F1 | 	sub	fp, #24
0fc48     B0 E9 BF FD | 	call	#_converttoint
0fc4c     FD 1E 02 F6 | 	mov	local01, result1
0fc50     24 4E 05 F1 | 	add	fp, #36
0fc54     A7 12 02 F6 | 	mov	arg01, fp
0fc58     24 4E 85 F1 | 	sub	fp, #36
0fc5c     9C E9 BF FD | 	call	#_converttoint
0fc60     FD 18 02 F6 | 	mov	arg04, result1
0fc64     2D 00 00 FF 
0fc68     EC E5 05 F1 | 	add	objptr, ##23532
0fc6c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fc70     2D 00 00 FF 
0fc74     EC E5 85 F1 | 	sub	objptr, ##23532
0fc78     10 13 02 F6 | 	mov	arg01, local02
0fc7c     11 15 02 F6 | 	mov	arg02, local03
0fc80     0F 17 02 F6 | 	mov	arg03, local01
0fc84     E8 42 B0 FD | 	call	#_hg010b_spin2_box
0fc88                 | LR__1291
0fc88     A7 F0 03 F6 | 	mov	ptra, fp
0fc8c     B2 00 A0 FD | 	call	#popregs_
0fc90                 | _do_box_ret
0fc90     2D 00 64 FD | 	ret
0fc94                 | 
0fc94                 | ' 
0fc94                 | ' sub do_fill
0fc94                 | _do_fill
0fc94     03 4A 05 F6 | 	mov	COUNT_, #3
0fc98     A8 00 A0 FD | 	call	#pushregs_
0fc9c     30 F0 07 F1 | 	add	ptra, #48
0fca0     90 8A BF FD | 	call	#_pop
0fca4     FD 18 02 F6 | 	mov	arg04, result1
0fca8     FE 16 02 F6 | 	mov	arg03, result2
0fcac     FF 14 02 F6 | 	mov	arg02, result3
0fcb0     24 4E 05 F1 | 	add	fp, #36
0fcb4     A7 18 62 FC | 	wrlong	arg04, fp
0fcb8     04 4E 05 F1 | 	add	fp, #4
0fcbc     A7 16 62 FC | 	wrlong	arg03, fp
0fcc0     04 4E 05 F1 | 	add	fp, #4
0fcc4     A7 14 62 FC | 	wrlong	arg02, fp
0fcc8     2C 4E 85 F1 | 	sub	fp, #44
0fccc     64 8A BF FD | 	call	#_pop
0fcd0     FD 18 02 F6 | 	mov	arg04, result1
0fcd4     FE 16 02 F6 | 	mov	arg03, result2
0fcd8     FF 14 02 F6 | 	mov	arg02, result3
0fcdc     18 4E 05 F1 | 	add	fp, #24
0fce0     A7 18 62 FC | 	wrlong	arg04, fp
0fce4     04 4E 05 F1 | 	add	fp, #4
0fce8     A7 16 62 FC | 	wrlong	arg03, fp
0fcec     04 4E 05 F1 | 	add	fp, #4
0fcf0     A7 14 62 FC | 	wrlong	arg02, fp
0fcf4     20 4E 85 F1 | 	sub	fp, #32
0fcf8     38 8A BF FD | 	call	#_pop
0fcfc     FD 18 02 F6 | 	mov	arg04, result1
0fd00     FE 16 02 F6 | 	mov	arg03, result2
0fd04     FF 1E 02 F6 | 	mov	local01, result3
0fd08     0C 4E 05 F1 | 	add	fp, #12
0fd0c     A7 18 62 FC | 	wrlong	arg04, fp
0fd10     04 4E 05 F1 | 	add	fp, #4
0fd14     A7 16 62 FC | 	wrlong	arg03, fp
0fd18     04 4E 05 F1 | 	add	fp, #4
0fd1c     A7 1E 62 FC | 	wrlong	local01, fp
0fd20     14 4E 85 F1 | 	sub	fp, #20
0fd24     0C 8A BF FD | 	call	#_pop
0fd28     A7 FA 61 FC | 	wrlong	result1, fp
0fd2c     04 4E 05 F1 | 	add	fp, #4
0fd30     A7 FC 61 FC | 	wrlong	result2, fp
0fd34     04 4E 05 F1 | 	add	fp, #4
0fd38     A7 FE 61 FC | 	wrlong	result3, fp
0fd3c                 | ' 
0fd3c                 | ' t4=pop()
0fd3c                 | ' t3=pop()
0fd3c                 | ' t2=pop()
0fd3c                 | ' t1=pop()
0fd3c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fd3c     FF 18 02 F6 | 	mov	arg04, result3
0fd40     08 4E 85 F1 | 	sub	fp, #8
0fd44     1C 18 0E F2 | 	cmp	arg04, #28 wz
0fd48     08 4E 05 51 |  if_ne	add	fp, #8
0fd4c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fd50     08 4E 85 51 |  if_ne	sub	fp, #8
0fd54     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fd58     94 00 90 5D |  if_ne	jmp	#LR__1300
0fd5c     14 4E 05 F1 | 	add	fp, #20
0fd60     A7 1E 02 FB | 	rdlong	local01, fp
0fd64     14 4E 85 F1 | 	sub	fp, #20
0fd68     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fd6c     14 4E 05 51 |  if_ne	add	fp, #20
0fd70     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fd74     14 4E 85 51 |  if_ne	sub	fp, #20
0fd78     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fd7c     70 00 90 5D |  if_ne	jmp	#LR__1300
0fd80     20 4E 05 F1 | 	add	fp, #32
0fd84     A7 1E 02 FB | 	rdlong	local01, fp
0fd88     20 4E 85 F1 | 	sub	fp, #32
0fd8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fd90     20 4E 05 51 |  if_ne	add	fp, #32
0fd94     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fd98     20 4E 85 51 |  if_ne	sub	fp, #32
0fd9c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fda0     4C 00 90 5D |  if_ne	jmp	#LR__1300
0fda4     2C 4E 05 F1 | 	add	fp, #44
0fda8     A7 1E 02 FB | 	rdlong	local01, fp
0fdac     2C 4E 85 F1 | 	sub	fp, #44
0fdb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fdb4     2C 4E 05 51 |  if_ne	add	fp, #44
0fdb8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fdbc     2C 4E 85 51 |  if_ne	sub	fp, #44
0fdc0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fdc4     28 00 90 5D |  if_ne	jmp	#LR__1300
0fdc8     A7 12 02 FB | 	rdlong	arg01, fp
0fdcc     0C 4E 05 F1 | 	add	fp, #12
0fdd0     A7 14 02 FB | 	rdlong	arg02, fp
0fdd4     0C 4E 05 F1 | 	add	fp, #12
0fdd8     A7 16 02 FB | 	rdlong	arg03, fp
0fddc     0C 4E 05 F1 | 	add	fp, #12
0fde0     A7 18 02 FB | 	rdlong	arg04, fp
0fde4     24 4E 85 F1 | 	sub	fp, #36
0fde8     0C 3C B0 FD | 	call	#_hg010b_spin2_fill
0fdec                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0fdec     58 00 90 FD | 	jmp	#LR__1301
0fdf0                 | LR__1300
0fdf0     A7 12 02 F6 | 	mov	arg01, fp
0fdf4     04 E8 BF FD | 	call	#_converttoint
0fdf8     FD 20 02 F6 | 	mov	local02, result1
0fdfc     0C 4E 05 F1 | 	add	fp, #12
0fe00     A7 12 02 F6 | 	mov	arg01, fp
0fe04     0C 4E 85 F1 | 	sub	fp, #12
0fe08     F0 E7 BF FD | 	call	#_converttoint
0fe0c     FD 22 02 F6 | 	mov	local03, result1
0fe10     18 4E 05 F1 | 	add	fp, #24
0fe14     A7 12 02 F6 | 	mov	arg01, fp
0fe18     18 4E 85 F1 | 	sub	fp, #24
0fe1c     DC E7 BF FD | 	call	#_converttoint
0fe20     FD 1E 02 F6 | 	mov	local01, result1
0fe24     24 4E 05 F1 | 	add	fp, #36
0fe28     A7 12 02 F6 | 	mov	arg01, fp
0fe2c     24 4E 85 F1 | 	sub	fp, #36
0fe30     C8 E7 BF FD | 	call	#_converttoint
0fe34     FD 18 02 F6 | 	mov	arg04, result1
0fe38     10 13 02 F6 | 	mov	arg01, local02
0fe3c     11 15 02 F6 | 	mov	arg02, local03
0fe40     0F 17 02 F6 | 	mov	arg03, local01
0fe44     B0 3B B0 FD | 	call	#_hg010b_spin2_fill
0fe48                 | LR__1301
0fe48     A7 F0 03 F6 | 	mov	ptra, fp
0fe4c     B2 00 A0 FD | 	call	#popregs_
0fe50                 | _do_fill_ret
0fe50     2D 00 64 FD | 	ret
0fe54                 | 
0fe54                 | ' 
0fe54                 | ' ' -------------------------- Draw a frane
0fe54                 | ' 
0fe54                 | ' sub do_frame
0fe54                 | _do_frame
0fe54     03 4A 05 F6 | 	mov	COUNT_, #3
0fe58     A8 00 A0 FD | 	call	#pushregs_
0fe5c     30 F0 07 F1 | 	add	ptra, #48
0fe60     D0 88 BF FD | 	call	#_pop
0fe64     FD 1A 02 F6 | 	mov	arg05, result1
0fe68     FE 18 02 F6 | 	mov	arg04, result2
0fe6c     FF 16 02 F6 | 	mov	arg03, result3
0fe70     24 4E 05 F1 | 	add	fp, #36
0fe74     A7 1A 62 FC | 	wrlong	arg05, fp
0fe78     04 4E 05 F1 | 	add	fp, #4
0fe7c     A7 18 62 FC | 	wrlong	arg04, fp
0fe80     04 4E 05 F1 | 	add	fp, #4
0fe84     A7 16 62 FC | 	wrlong	arg03, fp
0fe88     2C 4E 85 F1 | 	sub	fp, #44
0fe8c     A4 88 BF FD | 	call	#_pop
0fe90     FD 1A 02 F6 | 	mov	arg05, result1
0fe94     FE 18 02 F6 | 	mov	arg04, result2
0fe98     FF 16 02 F6 | 	mov	arg03, result3
0fe9c     18 4E 05 F1 | 	add	fp, #24
0fea0     A7 1A 62 FC | 	wrlong	arg05, fp
0fea4     04 4E 05 F1 | 	add	fp, #4
0fea8     A7 18 62 FC | 	wrlong	arg04, fp
0feac     04 4E 05 F1 | 	add	fp, #4
0feb0     A7 16 62 FC | 	wrlong	arg03, fp
0feb4     20 4E 85 F1 | 	sub	fp, #32
0feb8     78 88 BF FD | 	call	#_pop
0febc     FD 1A 02 F6 | 	mov	arg05, result1
0fec0     FE 18 02 F6 | 	mov	arg04, result2
0fec4     FF 1E 02 F6 | 	mov	local01, result3
0fec8     0C 4E 05 F1 | 	add	fp, #12
0fecc     A7 1A 62 FC | 	wrlong	arg05, fp
0fed0     04 4E 05 F1 | 	add	fp, #4
0fed4     A7 18 62 FC | 	wrlong	arg04, fp
0fed8     04 4E 05 F1 | 	add	fp, #4
0fedc     A7 1E 62 FC | 	wrlong	local01, fp
0fee0     14 4E 85 F1 | 	sub	fp, #20
0fee4     4C 88 BF FD | 	call	#_pop
0fee8     A7 FA 61 FC | 	wrlong	result1, fp
0feec     04 4E 05 F1 | 	add	fp, #4
0fef0     A7 FC 61 FC | 	wrlong	result2, fp
0fef4     04 4E 05 F1 | 	add	fp, #4
0fef8     A7 FE 61 FC | 	wrlong	result3, fp
0fefc                 | ' 
0fefc                 | ' t4=pop()
0fefc                 | ' t3=pop()
0fefc                 | ' t2=pop()
0fefc                 | ' t1=pop()
0fefc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fefc     FF 1A 02 F6 | 	mov	arg05, result3
0ff00     08 4E 85 F1 | 	sub	fp, #8
0ff04     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0ff08     08 4E 05 51 |  if_ne	add	fp, #8
0ff0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ff10     08 4E 85 51 |  if_ne	sub	fp, #8
0ff14     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ff18     A8 00 90 5D |  if_ne	jmp	#LR__1310
0ff1c     14 4E 05 F1 | 	add	fp, #20
0ff20     A7 1E 02 FB | 	rdlong	local01, fp
0ff24     14 4E 85 F1 | 	sub	fp, #20
0ff28     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff2c     14 4E 05 51 |  if_ne	add	fp, #20
0ff30     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0ff34     14 4E 85 51 |  if_ne	sub	fp, #20
0ff38     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0ff3c     84 00 90 5D |  if_ne	jmp	#LR__1310
0ff40     20 4E 05 F1 | 	add	fp, #32
0ff44     A7 1E 02 FB | 	rdlong	local01, fp
0ff48     20 4E 85 F1 | 	sub	fp, #32
0ff4c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff50     20 4E 05 51 |  if_ne	add	fp, #32
0ff54     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0ff58     20 4E 85 51 |  if_ne	sub	fp, #32
0ff5c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0ff60     60 00 90 5D |  if_ne	jmp	#LR__1310
0ff64     2C 4E 05 F1 | 	add	fp, #44
0ff68     A7 1E 02 FB | 	rdlong	local01, fp
0ff6c     2C 4E 85 F1 | 	sub	fp, #44
0ff70     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff74     2C 4E 05 51 |  if_ne	add	fp, #44
0ff78     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0ff7c     2C 4E 85 51 |  if_ne	sub	fp, #44
0ff80     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0ff84     3C 00 90 5D |  if_ne	jmp	#LR__1310
0ff88     A7 12 02 FB | 	rdlong	arg01, fp
0ff8c     0C 4E 05 F1 | 	add	fp, #12
0ff90     A7 14 02 FB | 	rdlong	arg02, fp
0ff94     0C 4E 05 F1 | 	add	fp, #12
0ff98     A7 16 02 FB | 	rdlong	arg03, fp
0ff9c     0C 4E 05 F1 | 	add	fp, #12
0ffa0     A7 18 02 FB | 	rdlong	arg04, fp
0ffa4     24 4E 85 F1 | 	sub	fp, #36
0ffa8     2D 00 00 FF 
0ffac     EC E5 05 F1 | 	add	objptr, ##23532
0ffb0     F2 1A 02 FB | 	rdlong	arg05, objptr
0ffb4     2D 00 00 FF 
0ffb8     EC E5 85 F1 | 	sub	objptr, ##23532
0ffbc     30 3F B0 FD | 	call	#_hg010b_spin2_frame
0ffc0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0ffc0     6C 00 90 FD | 	jmp	#LR__1311
0ffc4                 | LR__1310
0ffc4     A7 12 02 F6 | 	mov	arg01, fp
0ffc8     30 E6 BF FD | 	call	#_converttoint
0ffcc     FD 20 02 F6 | 	mov	local02, result1
0ffd0     0C 4E 05 F1 | 	add	fp, #12
0ffd4     A7 12 02 F6 | 	mov	arg01, fp
0ffd8     0C 4E 85 F1 | 	sub	fp, #12
0ffdc     1C E6 BF FD | 	call	#_converttoint
0ffe0     FD 22 02 F6 | 	mov	local03, result1
0ffe4     18 4E 05 F1 | 	add	fp, #24
0ffe8     A7 12 02 F6 | 	mov	arg01, fp
0ffec     18 4E 85 F1 | 	sub	fp, #24
0fff0     08 E6 BF FD | 	call	#_converttoint
0fff4     FD 1E 02 F6 | 	mov	local01, result1
0fff8     24 4E 05 F1 | 	add	fp, #36
0fffc     A7 12 02 F6 | 	mov	arg01, fp
10000     24 4E 85 F1 | 	sub	fp, #36
10004     F4 E5 BF FD | 	call	#_converttoint
10008     FD 18 02 F6 | 	mov	arg04, result1
1000c     2D 00 00 FF 
10010     EC E5 05 F1 | 	add	objptr, ##23532
10014     F2 1A 02 FB | 	rdlong	arg05, objptr
10018     2D 00 00 FF 
1001c     EC E5 85 F1 | 	sub	objptr, ##23532
10020     10 13 02 F6 | 	mov	arg01, local02
10024     11 15 02 F6 | 	mov	arg02, local03
10028     0F 17 02 F6 | 	mov	arg03, local01
1002c     C0 3E B0 FD | 	call	#_hg010b_spin2_frame
10030                 | LR__1311
10030     A7 F0 03 F6 | 	mov	ptra, fp
10034     B2 00 A0 FD | 	call	#popregs_
10038                 | _do_frame_ret
10038     2D 00 64 FD | 	ret
1003c                 | 
1003c                 | ' 
1003c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
1003c                 | ' 
1003c                 | ' ' ------------------------- Print to the screem
1003c                 | ' 
1003c                 | ' sub do_print  
1003c                 | _do_print
1003c     0A 4A 05 F6 | 	mov	COUNT_, #10
10040     A8 00 A0 FD | 	call	#pushregs_
10044     00 24 06 F6 | 	mov	local04, #0
10048     E8 86 BF FD | 	call	#_pop
1004c     FD 26 02 F6 | 	mov	local05, result1
10050     FE 28 02 F6 | 	mov	local06, result2
10054     FF 2A 02 F6 | 	mov	local07, result3
10058     13 1F 02 F6 | 	mov	local01, local05
1005c     14 21 02 F6 | 	mov	local02, local06
10060     15 23 02 F6 | 	mov	local03, local07
10064                 | '  
10064                 | ' r=0
10064                 | ' t1=pop() 
10064                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
10064     21 22 0E F2 | 	cmp	local03, #33 wz
10068     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
1006c     20 00 90 5D |  if_ne	jmp	#LR__1320
10070     11 25 02 F6 | 	mov	local04, local03
10074     BC 86 BF FD | 	call	#_pop
10078     FD 26 02 F6 | 	mov	local05, result1
1007c     FE 28 02 F6 | 	mov	local06, result2
10080     FF 2A 02 F6 | 	mov	local07, result3
10084     13 1F 02 F6 | 	mov	local01, local05
10088     14 21 02 F6 | 	mov	local02, local06
1008c     15 23 02 F6 | 	mov	local03, local07
10090                 | LR__1320
10090                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
10090     20 22 0E F2 | 	cmp	local03, #32 wz
10094     11 25 02 A6 |  if_e	mov	local04, local03
10098                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
10098     FF 22 0E F2 | 	cmp	local03, #255 wz
1009c     0C 00 90 5D |  if_ne	jmp	#LR__1321
100a0     0F 13 02 F6 | 	mov	arg01, local01
100a4     14 1F B0 FD | 	call	#_printerror
100a8     30 04 90 FD | 	jmp	#LR__1338
100ac                 | LR__1321
100ac                 | ' 
100ac                 | ' if r=print_mod_comma  then
100ac     21 24 0E F2 | 	cmp	local04, #33 wz
100b0     AC 01 90 5D |  if_ne	jmp	#LR__1326
100b4                 | '   if t1.result_type=result_int then print t1.result.iresult,
100b4     1C 22 0E F2 | 	cmp	local03, #28 wz
100b8     64 00 90 5D |  if_ne	jmp	#LR__1322
100bc     00 12 06 F6 | 	mov	arg01, #0
100c0     A0 A9 B0 FD | 	call	#__system___getiolock_0348
100c4     FD 12 02 F6 | 	mov	arg01, result1
100c8     E4 53 B0 FD | 	call	#__system___lockmem
100cc     00 28 06 F6 | 	mov	local06, #0
100d0     00 12 06 F6 | 	mov	arg01, #0
100d4     0F 15 02 F6 | 	mov	arg02, local01
100d8     00 16 06 F6 | 	mov	arg03, #0
100dc     0A 18 06 F6 | 	mov	arg04, #10
100e0     04 61 B0 FD | 	call	#__system___basic_print_integer
100e4     FD 2A 02 F6 | 	mov	local07, result1
100e8     14 27 02 F6 | 	mov	local05, local06
100ec     15 27 02 F1 | 	add	local05, local07
100f0     00 2C 06 F6 | 	mov	local08, #0
100f4     00 12 06 F6 | 	mov	arg01, #0
100f8     09 14 06 F6 | 	mov	arg02, #9
100fc     00 16 06 F6 | 	mov	arg03, #0
10100     48 60 B0 FD | 	call	#__system___basic_print_char
10104     FD 2E 02 F6 | 	mov	local09, result1
10108     FD 26 02 F1 | 	add	local05, result1
1010c     00 12 06 F6 | 	mov	arg01, #0
10110     50 A9 B0 FD | 	call	#__system___getiolock_0348
10114     FD 00 68 FC | 	wrlong	#0, result1
10118     00 FA 05 F6 | 	mov	result1, #0
1011c     00 30 06 F6 | 	mov	local10, #0
10120                 | LR__1322
10120                 | '   if t1.result_type=result_uint then print t1.result.uresult,
10120     1D 22 0E F2 | 	cmp	local03, #29 wz
10124     64 00 90 5D |  if_ne	jmp	#LR__1323
10128     00 12 06 F6 | 	mov	arg01, #0
1012c     34 A9 B0 FD | 	call	#__system___getiolock_0348
10130     FD 12 02 F6 | 	mov	arg01, result1
10134     78 53 B0 FD | 	call	#__system___lockmem
10138     00 28 06 F6 | 	mov	local06, #0
1013c     00 12 06 F6 | 	mov	arg01, #0
10140     0F 15 02 F6 | 	mov	arg02, local01
10144     00 16 06 F6 | 	mov	arg03, #0
10148     0A 18 06 F6 | 	mov	arg04, #10
1014c     D8 60 B0 FD | 	call	#__system___basic_print_unsigned
10150     FD 2A 02 F6 | 	mov	local07, result1
10154     14 27 02 F6 | 	mov	local05, local06
10158     15 27 02 F1 | 	add	local05, local07
1015c     00 2C 06 F6 | 	mov	local08, #0
10160     00 12 06 F6 | 	mov	arg01, #0
10164     09 14 06 F6 | 	mov	arg02, #9
10168     00 16 06 F6 | 	mov	arg03, #0
1016c     DC 5F B0 FD | 	call	#__system___basic_print_char
10170     FD 2E 02 F6 | 	mov	local09, result1
10174     FD 26 02 F1 | 	add	local05, result1
10178     00 12 06 F6 | 	mov	arg01, #0
1017c     E4 A8 B0 FD | 	call	#__system___getiolock_0348
10180     FD 00 68 FC | 	wrlong	#0, result1
10184     00 FA 05 F6 | 	mov	result1, #0
10188     00 30 06 F6 | 	mov	local10, #0
1018c                 | LR__1323
1018c                 | '   if t1.result_type=result_float then print t1.result.fresult,
1018c     1E 22 0E F2 | 	cmp	local03, #30 wz
10190     64 00 90 5D |  if_ne	jmp	#LR__1324
10194     00 12 06 F6 | 	mov	arg01, #0
10198     C8 A8 B0 FD | 	call	#__system___getiolock_0348
1019c     FD 12 02 F6 | 	mov	arg01, result1
101a0     0C 53 B0 FD | 	call	#__system___lockmem
101a4     00 28 06 F6 | 	mov	local06, #0
101a8     00 12 06 F6 | 	mov	arg01, #0
101ac     0F 15 02 F6 | 	mov	arg02, local01
101b0     00 16 06 F6 | 	mov	arg03, #0
101b4     23 18 06 F6 | 	mov	arg04, #35
101b8     20 83 B0 FD | 	call	#__system___basic_print_float
101bc     FD 2A 02 F6 | 	mov	local07, result1
101c0     14 27 02 F6 | 	mov	local05, local06
101c4     15 27 02 F1 | 	add	local05, local07
101c8     00 2C 06 F6 | 	mov	local08, #0
101cc     00 12 06 F6 | 	mov	arg01, #0
101d0     09 14 06 F6 | 	mov	arg02, #9
101d4     00 16 06 F6 | 	mov	arg03, #0
101d8     70 5F B0 FD | 	call	#__system___basic_print_char
101dc     FD 2E 02 F6 | 	mov	local09, result1
101e0     FD 26 02 F1 | 	add	local05, result1
101e4     00 12 06 F6 | 	mov	arg01, #0
101e8     78 A8 B0 FD | 	call	#__system___getiolock_0348
101ec     FD 00 68 FC | 	wrlong	#0, result1
101f0     00 FA 05 F6 | 	mov	result1, #0
101f4     00 30 06 F6 | 	mov	local10, #0
101f8                 | LR__1324
101f8                 | '   if t1.result_type=result_string then print t1.result.sresult,
101f8     1F 22 0E F2 | 	cmp	local03, #31 wz
101fc     60 00 90 5D |  if_ne	jmp	#LR__1325
10200     00 12 06 F6 | 	mov	arg01, #0
10204     5C A8 B0 FD | 	call	#__system___getiolock_0348
10208     FD 12 02 F6 | 	mov	arg01, result1
1020c     A0 52 B0 FD | 	call	#__system___lockmem
10210     00 28 06 F6 | 	mov	local06, #0
10214     00 12 06 F6 | 	mov	arg01, #0
10218     0F 15 02 F6 | 	mov	arg02, local01
1021c     00 16 06 F6 | 	mov	arg03, #0
10220     80 5F B0 FD | 	call	#__system___basic_print_string
10224     FD 2A 02 F6 | 	mov	local07, result1
10228     14 27 02 F6 | 	mov	local05, local06
1022c     15 27 02 F1 | 	add	local05, local07
10230     00 2C 06 F6 | 	mov	local08, #0
10234     00 12 06 F6 | 	mov	arg01, #0
10238     09 14 06 F6 | 	mov	arg02, #9
1023c     00 16 06 F6 | 	mov	arg03, #0
10240     08 5F B0 FD | 	call	#__system___basic_print_char
10244     FD 2E 02 F6 | 	mov	local09, result1
10248     FD 26 02 F1 | 	add	local05, result1
1024c     00 12 06 F6 | 	mov	arg01, #0
10250     10 A8 B0 FD | 	call	#__system___getiolock_0348
10254     FD 00 68 FC | 	wrlong	#0, result1
10258     00 FA 05 F6 | 	mov	result1, #0
1025c     00 30 06 F6 | 	mov	local10, #0
10260                 | LR__1325
10260                 | LR__1326
10260                 | ' if r=print_mod_semicolon then 
10260     22 24 0E F2 | 	cmp	local04, #34 wz
10264     1C 01 90 5D |  if_ne	jmp	#LR__1331
10268                 | '   if t1.result_type=result_int then print t1.result.iresult;
10268     1C 22 0E F2 | 	cmp	local03, #28 wz
1026c     50 00 90 5D |  if_ne	jmp	#LR__1327
10270     00 12 06 F6 | 	mov	arg01, #0
10274     EC A7 B0 FD | 	call	#__system___getiolock_0348
10278     FD 12 02 F6 | 	mov	arg01, result1
1027c     30 52 B0 FD | 	call	#__system___lockmem
10280     00 28 06 F6 | 	mov	local06, #0
10284     00 30 06 F6 | 	mov	local10, #0
10288     0A 2C 06 F6 | 	mov	local08, #10
1028c     00 12 06 F6 | 	mov	arg01, #0
10290     0F 15 02 F6 | 	mov	arg02, local01
10294     00 16 06 F6 | 	mov	arg03, #0
10298     0A 18 06 F6 | 	mov	arg04, #10
1029c     48 5F B0 FD | 	call	#__system___basic_print_integer
102a0     FD 2A 02 F6 | 	mov	local07, result1
102a4     14 27 02 F6 | 	mov	local05, local06
102a8     15 27 02 F1 | 	add	local05, local07
102ac     00 12 06 F6 | 	mov	arg01, #0
102b0     B0 A7 B0 FD | 	call	#__system___getiolock_0348
102b4     FD 00 68 FC | 	wrlong	#0, result1
102b8     00 FA 05 F6 | 	mov	result1, #0
102bc     00 2E 06 F6 | 	mov	local09, #0
102c0                 | LR__1327
102c0                 | '   if t1.result_type=result_uint then print t1.result.uresult;
102c0     1D 22 0E F2 | 	cmp	local03, #29 wz
102c4     50 00 90 5D |  if_ne	jmp	#LR__1328
102c8     00 12 06 F6 | 	mov	arg01, #0
102cc     94 A7 B0 FD | 	call	#__system___getiolock_0348
102d0     FD 12 02 F6 | 	mov	arg01, result1
102d4     D8 51 B0 FD | 	call	#__system___lockmem
102d8     00 28 06 F6 | 	mov	local06, #0
102dc     00 30 06 F6 | 	mov	local10, #0
102e0     0A 2C 06 F6 | 	mov	local08, #10
102e4     00 12 06 F6 | 	mov	arg01, #0
102e8     0F 15 02 F6 | 	mov	arg02, local01
102ec     00 16 06 F6 | 	mov	arg03, #0
102f0     0A 18 06 F6 | 	mov	arg04, #10
102f4     30 5F B0 FD | 	call	#__system___basic_print_unsigned
102f8     FD 2A 02 F6 | 	mov	local07, result1
102fc     14 27 02 F6 | 	mov	local05, local06
10300     15 27 02 F1 | 	add	local05, local07
10304     00 12 06 F6 | 	mov	arg01, #0
10308     58 A7 B0 FD | 	call	#__system___getiolock_0348
1030c     FD 00 68 FC | 	wrlong	#0, result1
10310     00 FA 05 F6 | 	mov	result1, #0
10314     00 2E 06 F6 | 	mov	local09, #0
10318                 | LR__1328
10318                 | '   if t1.result_type=result_float then print t1.result.fresult;
10318     1E 22 0E F2 | 	cmp	local03, #30 wz
1031c     30 00 90 5D |  if_ne	jmp	#LR__1329
10320     00 12 06 F6 | 	mov	arg01, #0
10324     3C A7 B0 FD | 	call	#__system___getiolock_0348
10328     FD 12 02 F6 | 	mov	arg01, result1
1032c     80 51 B0 FD | 	call	#__system___lockmem
10330     00 12 06 F6 | 	mov	arg01, #0
10334     0F 15 02 F6 | 	mov	arg02, local01
10338     00 16 06 F6 | 	mov	arg03, #0
1033c     23 18 06 F6 | 	mov	arg04, #35
10340     98 81 B0 FD | 	call	#__system___basic_print_float
10344     00 12 06 F6 | 	mov	arg01, #0
10348     18 A7 B0 FD | 	call	#__system___getiolock_0348
1034c     FD 00 68 FC | 	wrlong	#0, result1
10350                 | LR__1329
10350                 | '   if t1.result_type=result_string then print t1.result.sresult;
10350     1F 22 0E F2 | 	cmp	local03, #31 wz
10354     2C 00 90 5D |  if_ne	jmp	#LR__1330
10358     00 12 06 F6 | 	mov	arg01, #0
1035c     04 A7 B0 FD | 	call	#__system___getiolock_0348
10360     FD 12 02 F6 | 	mov	arg01, result1
10364     48 51 B0 FD | 	call	#__system___lockmem
10368     00 12 06 F6 | 	mov	arg01, #0
1036c     0F 15 02 F6 | 	mov	arg02, local01
10370     00 16 06 F6 | 	mov	arg03, #0
10374     2C 5E B0 FD | 	call	#__system___basic_print_string
10378     00 12 06 F6 | 	mov	arg01, #0
1037c     E4 A6 B0 FD | 	call	#__system___getiolock_0348
10380     FD 00 68 FC | 	wrlong	#0, result1
10384                 | LR__1330
10384                 | LR__1331
10384                 | ' if r=0 then 
10384     00 24 0E F2 | 	cmp	local04, #0 wz
10388     1C 01 90 5D |  if_ne	jmp	#LR__1336
1038c                 | '   if t1.result_type=result_int then print t1.result.iresult
1038c     1C 22 0E F2 | 	cmp	local03, #28 wz
10390     40 00 90 5D |  if_ne	jmp	#LR__1332
10394     00 12 06 F6 | 	mov	arg01, #0
10398     C8 A6 B0 FD | 	call	#__system___getiolock_0348
1039c     FD 12 02 F6 | 	mov	arg01, result1
103a0     0C 51 B0 FD | 	call	#__system___lockmem
103a4     00 12 06 F6 | 	mov	arg01, #0
103a8     0F 15 02 F6 | 	mov	arg02, local01
103ac     00 16 06 F6 | 	mov	arg03, #0
103b0     0A 18 06 F6 | 	mov	arg04, #10
103b4     30 5E B0 FD | 	call	#__system___basic_print_integer
103b8     00 12 06 F6 | 	mov	arg01, #0
103bc     0A 14 06 F6 | 	mov	arg02, #10
103c0     00 16 06 F6 | 	mov	arg03, #0
103c4     84 5D B0 FD | 	call	#__system___basic_print_char
103c8     00 12 06 F6 | 	mov	arg01, #0
103cc     94 A6 B0 FD | 	call	#__system___getiolock_0348
103d0     FD 00 68 FC | 	wrlong	#0, result1
103d4                 | LR__1332
103d4                 | '   if t1.result_type=result_uint then print t1.result.uresult
103d4     1D 22 0E F2 | 	cmp	local03, #29 wz
103d8     40 00 90 5D |  if_ne	jmp	#LR__1333
103dc     00 12 06 F6 | 	mov	arg01, #0
103e0     80 A6 B0 FD | 	call	#__system___getiolock_0348
103e4     FD 12 02 F6 | 	mov	arg01, result1
103e8     C4 50 B0 FD | 	call	#__system___lockmem
103ec     00 12 06 F6 | 	mov	arg01, #0
103f0     0F 15 02 F6 | 	mov	arg02, local01
103f4     00 16 06 F6 | 	mov	arg03, #0
103f8     0A 18 06 F6 | 	mov	arg04, #10
103fc     28 5E B0 FD | 	call	#__system___basic_print_unsigned
10400     00 12 06 F6 | 	mov	arg01, #0
10404     0A 14 06 F6 | 	mov	arg02, #10
10408     00 16 06 F6 | 	mov	arg03, #0
1040c     3C 5D B0 FD | 	call	#__system___basic_print_char
10410     00 12 06 F6 | 	mov	arg01, #0
10414     4C A6 B0 FD | 	call	#__system___getiolock_0348
10418     FD 00 68 FC | 	wrlong	#0, result1
1041c                 | LR__1333
1041c                 | '   if t1.result_type=result_float then print t1.result.fresult
1041c     1E 22 0E F2 | 	cmp	local03, #30 wz
10420     40 00 90 5D |  if_ne	jmp	#LR__1334
10424     00 12 06 F6 | 	mov	arg01, #0
10428     38 A6 B0 FD | 	call	#__system___getiolock_0348
1042c     FD 12 02 F6 | 	mov	arg01, result1
10430     7C 50 B0 FD | 	call	#__system___lockmem
10434     00 12 06 F6 | 	mov	arg01, #0
10438     0F 15 02 F6 | 	mov	arg02, local01
1043c     00 16 06 F6 | 	mov	arg03, #0
10440     23 18 06 F6 | 	mov	arg04, #35
10444     94 80 B0 FD | 	call	#__system___basic_print_float
10448     00 12 06 F6 | 	mov	arg01, #0
1044c     0A 14 06 F6 | 	mov	arg02, #10
10450     00 16 06 F6 | 	mov	arg03, #0
10454     F4 5C B0 FD | 	call	#__system___basic_print_char
10458     00 12 06 F6 | 	mov	arg01, #0
1045c     04 A6 B0 FD | 	call	#__system___getiolock_0348
10460     FD 00 68 FC | 	wrlong	#0, result1
10464                 | LR__1334
10464                 | '   if t1.result_type=result_string then print t1.result.sresult
10464     1F 22 0E F2 | 	cmp	local03, #31 wz
10468     3C 00 90 5D |  if_ne	jmp	#LR__1335
1046c     00 12 06 F6 | 	mov	arg01, #0
10470     F0 A5 B0 FD | 	call	#__system___getiolock_0348
10474     FD 12 02 F6 | 	mov	arg01, result1
10478     34 50 B0 FD | 	call	#__system___lockmem
1047c     00 12 06 F6 | 	mov	arg01, #0
10480     0F 15 02 F6 | 	mov	arg02, local01
10484     00 16 06 F6 | 	mov	arg03, #0
10488     18 5D B0 FD | 	call	#__system___basic_print_string
1048c     00 12 06 F6 | 	mov	arg01, #0
10490     0A 14 06 F6 | 	mov	arg02, #10
10494     00 16 06 F6 | 	mov	arg03, #0
10498     B0 5C B0 FD | 	call	#__system___basic_print_char
1049c     00 12 06 F6 | 	mov	arg01, #0
104a0     C0 A5 B0 FD | 	call	#__system___getiolock_0348
104a4     FD 00 68 FC | 	wrlong	#0, result1
104a8                 | LR__1335
104a8                 | LR__1336
104a8                 | ' if r=print_mod_empty then print
104a8     20 24 0E F2 | 	cmp	local04, #32 wz
104ac     2C 00 90 5D |  if_ne	jmp	#LR__1337
104b0     00 12 06 F6 | 	mov	arg01, #0
104b4     AC A5 B0 FD | 	call	#__system___getiolock_0348
104b8     FD 12 02 F6 | 	mov	arg01, result1
104bc     F0 4F B0 FD | 	call	#__system___lockmem
104c0     00 12 06 F6 | 	mov	arg01, #0
104c4     0A 14 06 F6 | 	mov	arg02, #10
104c8     00 16 06 F6 | 	mov	arg03, #0
104cc     7C 5C B0 FD | 	call	#__system___basic_print_char
104d0     00 12 06 F6 | 	mov	arg01, #0
104d4     8C A5 B0 FD | 	call	#__system___getiolock_0348
104d8     FD 00 68 FC | 	wrlong	#0, result1
104dc                 | LR__1337
104dc                 | LR__1338
104dc     A7 F0 03 F6 | 	mov	ptra, fp
104e0     B2 00 A0 FD | 	call	#popregs_
104e4                 | _do_print_ret
104e4     2D 00 64 FD | 	ret
104e8                 | 
104e8                 | ' 
104e8                 | ' 
104e8                 | ' sub do_paper
104e8                 | _do_paper
104e8     03 4A 05 F6 | 	mov	COUNT_, #3
104ec     A8 00 A0 FD | 	call	#pushregs_
104f0     40 82 BF FD | 	call	#_pop
104f4     FD 1E 02 F6 | 	mov	local01, result1
104f8     FE 20 02 F6 | 	mov	local02, result2
104fc     FF 22 02 F6 | 	mov	local03, result3
10500                 | ' t1=pop() 
10500                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10500     1E 22 0E F2 | 	cmp	local03, #30 wz
10504     10 00 90 5D |  if_ne	jmp	#LR__1340
10508     0F 13 02 F6 | 	mov	arg01, local01
1050c     00 14 06 F6 | 	mov	arg02, #0
10510     78 7E B0 FD | 	call	#__system___float_tointeger
10514     FD 1E 02 F6 | 	mov	local01, result1
10518                 | LR__1340
10518                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10518     1F 22 0E F2 | 	cmp	local03, #31 wz
1051c     18 00 90 5D |  if_ne	jmp	#LR__1341
10520     0F 13 02 F6 | 	mov	arg01, local01
10524     84 81 B0 FD | 	call	#__system____builtin_atof
10528     FD 12 02 F6 | 	mov	arg01, result1
1052c     00 14 06 F6 | 	mov	arg02, #0
10530     58 7E B0 FD | 	call	#__system___float_tointeger
10534     FD 1E 02 F6 | 	mov	local01, result1
10538                 | LR__1341
10538     2D 00 00 FF 
1053c     FC E5 05 F1 | 	add	objptr, ##23548
10540     F2 1E 62 FC | 	wrlong	local01, objptr
10544     04 E4 05 F1 | 	add	objptr, #4
10548     F2 12 02 FB | 	rdlong	arg01, objptr
1054c                 | ' 
1054c                 | ' write_color:=ff
1054c     2D 00 00 FF 
10550     C3 E5 85 F1 | 	sub	objptr, ##23491
10554     F2 12 62 FC | 	wrlong	arg01, objptr
10558                 | ' write_background:=bb
10558     04 E4 05 F1 | 	add	objptr, #4
1055c     F2 1E 62 FC | 	wrlong	local01, objptr
10560     41 E4 85 F1 | 	sub	objptr, #65
10564     A7 F0 03 F6 | 	mov	ptra, fp
10568     B2 00 A0 FD | 	call	#popregs_
1056c                 | _do_paper_ret
1056c     2D 00 64 FD | 	ret
10570                 | 
10570                 | ' 
10570                 | ' sub do_ink
10570                 | _do_ink
10570     03 4A 05 F6 | 	mov	COUNT_, #3
10574     A8 00 A0 FD | 	call	#pushregs_
10578     B8 81 BF FD | 	call	#_pop
1057c     FD 1E 02 F6 | 	mov	local01, result1
10580     FE 20 02 F6 | 	mov	local02, result2
10584     FF 22 02 F6 | 	mov	local03, result3
10588                 | ' t1=pop() 
10588                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10588     1E 22 0E F2 | 	cmp	local03, #30 wz
1058c     10 00 90 5D |  if_ne	jmp	#LR__1350
10590     0F 13 02 F6 | 	mov	arg01, local01
10594     00 14 06 F6 | 	mov	arg02, #0
10598     F0 7D B0 FD | 	call	#__system___float_tointeger
1059c     FD 1E 02 F6 | 	mov	local01, result1
105a0                 | LR__1350
105a0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
105a0     1F 22 0E F2 | 	cmp	local03, #31 wz
105a4     18 00 90 5D |  if_ne	jmp	#LR__1351
105a8     0F 13 02 F6 | 	mov	arg01, local01
105ac     FC 80 B0 FD | 	call	#__system____builtin_atof
105b0     FD 12 02 F6 | 	mov	arg01, result1
105b4     00 14 06 F6 | 	mov	arg02, #0
105b8     D0 7D B0 FD | 	call	#__system___float_tointeger
105bc     FD 1E 02 F6 | 	mov	local01, result1
105c0                 | LR__1351
105c0     2E 00 00 FF 
105c4     00 E4 05 F1 | 	add	objptr, ##23552
105c8     F2 1E 62 FC | 	wrlong	local01, objptr
105cc     04 E4 85 F1 | 	sub	objptr, #4
105d0     F2 14 02 FB | 	rdlong	arg02, objptr
105d4                 | ' 
105d4                 | ' write_color:=ff
105d4     2D 00 00 FF 
105d8     BF E5 85 F1 | 	sub	objptr, ##23487
105dc     F2 1E 62 FC | 	wrlong	local01, objptr
105e0                 | ' write_background:=bb
105e0     04 E4 05 F1 | 	add	objptr, #4
105e4     F2 14 62 FC | 	wrlong	arg02, objptr
105e8     2D 00 00 FF 
105ec     BF E5 05 F1 | 	add	objptr, ##23487
105f0     F2 12 02 FB | 	rdlong	arg01, objptr
105f4     2E 00 00 FF 
105f8     00 E4 85 F1 | 	sub	objptr, ##23552
105fc     7C 2B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
10600     A7 F0 03 F6 | 	mov	ptra, fp
10604     B2 00 A0 FD | 	call	#popregs_
10608                 | _do_ink_ret
10608     2D 00 64 FD | 	ret
1060c                 | 
1060c                 | ' 
1060c                 | ' 
1060c                 | ' sub do_font
1060c                 | _do_font
1060c     03 4A 05 F6 | 	mov	COUNT_, #3
10610     A8 00 A0 FD | 	call	#pushregs_
10614     1C 81 BF FD | 	call	#_pop
10618     FD 1E 02 F6 | 	mov	local01, result1
1061c     FE 20 02 F6 | 	mov	local02, result2
10620     FF 22 02 F6 | 	mov	local03, result3
10624                 | ' t1=pop() 
10624                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10624     1E 22 0E F2 | 	cmp	local03, #30 wz
10628     10 00 90 5D |  if_ne	jmp	#LR__1360
1062c     0F 13 02 F6 | 	mov	arg01, local01
10630     00 14 06 F6 | 	mov	arg02, #0
10634     54 7D B0 FD | 	call	#__system___float_tointeger
10638     FD 1E 02 F6 | 	mov	local01, result1
1063c                 | LR__1360
1063c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1063c     1F 22 0E F2 | 	cmp	local03, #31 wz
10640     18 00 90 5D |  if_ne	jmp	#LR__1361
10644     0F 13 02 F6 | 	mov	arg01, local01
10648     60 80 B0 FD | 	call	#__system____builtin_atof
1064c     FD 12 02 F6 | 	mov	arg01, result1
10650     00 14 06 F6 | 	mov	arg02, #0
10654     34 7D B0 FD | 	call	#__system___float_tointeger
10658     FD 1E 02 F6 | 	mov	local01, result1
1065c                 | LR__1361
1065c     2E 00 00 FF 
10660     04 E4 05 F1 | 	add	objptr, ##23556
10664     F2 1E 62 FC | 	wrlong	local01, objptr
10668     2E 00 00 FF 
1066c     04 E4 85 F1 | 	sub	objptr, ##23556
10670     02 1E 66 F0 | 	shl	local01, #2
10674     0F 13 02 F6 | 	mov	arg01, local01
10678     6C 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
1067c     A7 F0 03 F6 | 	mov	ptra, fp
10680     B2 00 A0 FD | 	call	#popregs_
10684                 | _do_font_ret
10684     2D 00 64 FD | 	ret
10688                 | 
10688                 | ' 
10688                 | ' sub do_mode
10688                 | _do_mode
10688     04 4A 05 F6 | 	mov	COUNT_, #4
1068c     A8 00 A0 FD | 	call	#pushregs_
10690     A0 80 BF FD | 	call	#_pop
10694     FD 1E 02 F6 | 	mov	local01, result1
10698     FE 20 02 F6 | 	mov	local02, result2
1069c     FF 22 02 F6 | 	mov	local03, result3
106a0                 | ' t1=pop() 
106a0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
106a0     1E 22 0E F2 | 	cmp	local03, #30 wz
106a4     10 00 90 5D |  if_ne	jmp	#LR__1370
106a8     0F 13 02 F6 | 	mov	arg01, local01
106ac     00 14 06 F6 | 	mov	arg02, #0
106b0     D8 7C B0 FD | 	call	#__system___float_tointeger
106b4     FD 1E 02 F6 | 	mov	local01, result1
106b8                 | LR__1370
106b8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
106b8     1F 22 0E F2 | 	cmp	local03, #31 wz
106bc     18 00 90 5D |  if_ne	jmp	#LR__1371
106c0     0F 13 02 F6 | 	mov	arg01, local01
106c4     E4 7F B0 FD | 	call	#__system____builtin_atof
106c8     FD 12 02 F6 | 	mov	arg01, result1
106cc     00 14 06 F6 | 	mov	arg02, #0
106d0     B8 7C B0 FD | 	call	#__system___float_tointeger
106d4     FD 1E 02 F6 | 	mov	local01, result1
106d8                 | LR__1371
106d8                 | ' select case t1.result.iresult
106d8     0F 25 02 F6 | 	mov	local04, local01
106dc     04 24 26 F3 | 	fle	local04, #4
106e0     30 24 62 FD | 	jmprel	local04
106e4                 | LR__1372
106e4     10 00 90 FD | 	jmp	#LR__1373
106e8     68 00 90 FD | 	jmp	#LR__1374
106ec     C0 00 90 FD | 	jmp	#LR__1375
106f0     18 01 90 FD | 	jmp	#LR__1376
106f4     6C 01 90 FD | 	jmp	#LR__1377
106f8                 | LR__1373
106f8     2E 00 00 FF 
106fc     04 E4 05 F1 | 	add	objptr, ##23556
10700     F2 02 68 FC | 	wrlong	#1, objptr
10704     04 E4 85 F1 | 	sub	objptr, #4
10708     F2 34 69 FC | 	wrlong	#154, objptr
1070c     04 E4 85 F1 | 	sub	objptr, #4
10710     F2 26 69 FC | 	wrlong	#147, objptr
10714     2D 00 00 FF 
10718     FC E5 85 F1 | 	sub	objptr, ##23548
1071c     04 12 06 F6 | 	mov	arg01, #4
10720     C4 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10724     2E 00 00 FF 
10728     00 E4 05 F1 | 	add	objptr, ##23552
1072c     F2 12 02 FB | 	rdlong	arg01, objptr
10730     04 E4 85 F1 | 	sub	objptr, #4
10734     F2 14 02 FB | 	rdlong	arg02, objptr
10738                 | ' 
10738                 | ' write_color:=ff
10738     2D 00 00 FF 
1073c     BF E5 85 F1 | 	sub	objptr, ##23487
10740     F2 12 62 FC | 	wrlong	arg01, objptr
10744                 | ' write_background:=bb
10744     04 E4 05 F1 | 	add	objptr, #4
10748     F2 14 62 FC | 	wrlong	arg02, objptr
1074c     41 E4 85 F1 | 	sub	objptr, #65
10750     10 01 90 FD | 	jmp	#LR__1377
10754                 | LR__1374
10754     2E 00 00 FF 
10758     04 E4 05 F1 | 	add	objptr, ##23556
1075c     F2 00 68 FC | 	wrlong	#0, objptr
10760     04 E4 85 F1 | 	sub	objptr, #4
10764     F2 2E 68 FC | 	wrlong	#23, objptr
10768     00 12 06 F6 | 	mov	arg01, #0
1076c     04 E4 85 F1 | 	sub	objptr, #4
10770     F2 00 68 FC | 	wrlong	#0, objptr
10774     2D 00 00 FF 
10778     FC E5 85 F1 | 	sub	objptr, ##23548
1077c     68 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10780     2E 00 00 FF 
10784     00 E4 05 F1 | 	add	objptr, ##23552
10788     F2 12 02 FB | 	rdlong	arg01, objptr
1078c     04 E4 85 F1 | 	sub	objptr, #4
10790     F2 14 02 FB | 	rdlong	arg02, objptr
10794                 | ' 
10794                 | ' write_color:=ff
10794     2D 00 00 FF 
10798     BF E5 85 F1 | 	sub	objptr, ##23487
1079c     F2 12 62 FC | 	wrlong	arg01, objptr
107a0                 | ' write_background:=bb
107a0     04 E4 05 F1 | 	add	objptr, #4
107a4     F2 14 62 FC | 	wrlong	arg02, objptr
107a8     41 E4 85 F1 | 	sub	objptr, #65
107ac     B4 00 90 FD | 	jmp	#LR__1377
107b0                 | LR__1375
107b0     2E 00 00 FF 
107b4     04 E4 05 F1 | 	add	objptr, ##23556
107b8     F2 00 68 FC | 	wrlong	#0, objptr
107bc     04 E4 85 F1 | 	sub	objptr, #4
107c0     F2 6A 69 FC | 	wrlong	#181, objptr
107c4     00 12 06 F6 | 	mov	arg01, #0
107c8     04 E4 85 F1 | 	sub	objptr, #4
107cc     F2 00 68 FC | 	wrlong	#0, objptr
107d0     2D 00 00 FF 
107d4     FC E5 85 F1 | 	sub	objptr, ##23548
107d8     0C 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
107dc     2E 00 00 FF 
107e0     00 E4 05 F1 | 	add	objptr, ##23552
107e4     F2 12 02 FB | 	rdlong	arg01, objptr
107e8     04 E4 85 F1 | 	sub	objptr, #4
107ec     F2 14 02 FB | 	rdlong	arg02, objptr
107f0                 | ' 
107f0                 | ' write_color:=ff
107f0     2D 00 00 FF 
107f4     BF E5 85 F1 | 	sub	objptr, ##23487
107f8     F2 12 62 FC | 	wrlong	arg01, objptr
107fc                 | ' write_background:=bb
107fc     04 E4 05 F1 | 	add	objptr, #4
10800     F2 14 62 FC | 	wrlong	arg02, objptr
10804     41 E4 85 F1 | 	sub	objptr, #65
10808     58 00 90 FD | 	jmp	#LR__1377
1080c                 | LR__1376
1080c     2E 00 00 FF 
10810     04 E4 05 F1 | 	add	objptr, ##23556
10814     F2 00 68 FC | 	wrlong	#0, objptr
10818     04 E4 85 F1 | 	sub	objptr, #4
1081c     F2 1E 68 FC | 	wrlong	#15, objptr
10820     00 12 06 F6 | 	mov	arg01, #0
10824     04 E4 85 F1 | 	sub	objptr, #4
10828     F2 00 68 FC | 	wrlong	#0, objptr
1082c     2D 00 00 FF 
10830     FC E5 85 F1 | 	sub	objptr, ##23548
10834     B0 38 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10838     2E 00 00 FF 
1083c     00 E4 05 F1 | 	add	objptr, ##23552
10840     F2 12 02 FB | 	rdlong	arg01, objptr
10844     04 E4 85 F1 | 	sub	objptr, #4
10848     F2 14 02 FB | 	rdlong	arg02, objptr
1084c                 | ' 
1084c                 | ' write_color:=ff
1084c     2D 00 00 FF 
10850     BF E5 85 F1 | 	sub	objptr, ##23487
10854     F2 12 62 FC | 	wrlong	arg01, objptr
10858                 | ' write_background:=bb
10858     04 E4 05 F1 | 	add	objptr, #4
1085c     F2 14 62 FC | 	wrlong	arg02, objptr
10860     41 E4 85 F1 | 	sub	objptr, #65
10864                 | LR__1377
10864     2E 00 00 FF 
10868     00 E4 05 F1 | 	add	objptr, ##23552
1086c     F2 12 02 FB | 	rdlong	arg01, objptr
10870     04 E4 85 F1 | 	sub	objptr, #4
10874     F2 14 02 FB | 	rdlong	arg02, objptr
10878     2D 00 00 FF 
1087c     FC E5 85 F1 | 	sub	objptr, ##23548
10880     4C 39 B0 FD | 	call	#_hg010b_spin2_cls
10884     25 01 00 FF 
10888     A4 13 06 F6 | 	mov	arg01, ##@LR__4338
1088c                 | ' 
1088c                 | ' write(text)
1088c     FC 3B B0 FD | 	call	#_hg010b_spin2_write
10890                 | ' crlf
10890     58 3D B0 FD | 	call	#_hg010b_spin2_crlf
10894     09 00 00 FF 
10898     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
1089c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
108a0     09 00 00 FF 
108a4     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
108a8                 | ' 
108a8                 | ' write(text)
108a8     E0 3B B0 FD | 	call	#_hg010b_spin2_write
108ac                 | ' crlf
108ac     3C 3D B0 FD | 	call	#_hg010b_spin2_crlf
108b0     50 00 00 FF 
108b4     A0 E5 05 F1 | 	add	objptr, ##41376
108b8     F2 12 02 FB | 	rdlong	arg01, objptr
108bc     50 00 00 FF 
108c0     A0 E5 85 F1 | 	sub	objptr, ##41376
108c4                 | ' 
108c4                 | ' write(text)
108c4     C4 3B B0 FD | 	call	#_hg010b_spin2_write
108c8                 | ' crlf
108c8     20 3D B0 FD | 	call	#_hg010b_spin2_crlf
108cc     A7 F0 03 F6 | 	mov	ptra, fp
108d0     B2 00 A0 FD | 	call	#popregs_
108d4                 | _do_mode_ret
108d4     2D 00 64 FD | 	ret
108d8                 | 
108d8                 | ' 
108d8                 | ' 
108d8                 | ' 
108d8                 | ' sub do_pinwrite
108d8                 | _do_pinwrite
108d8     58 7E BF FD | 	call	#_pop
108dc     FD 14 02 F6 | 	mov	arg02, result1
108e0     50 7E BF FD | 	call	#_pop
108e4     FD 12 02 F6 | 	mov	arg01, result1
108e8     78 4D B0 FD | 	call	#__system___pinwrite
108ec                 | _do_pinwrite_ret
108ec     2D 00 64 FD | 	ret
108f0                 | 
108f0                 | ' 
108f0                 | ' sub do_waitms
108f0                 | _do_waitms
108f0     01 4A 05 F6 | 	mov	COUNT_, #1
108f4     A8 00 A0 FD | 	call	#pushregs_
108f8     18 F0 07 F1 | 	add	ptra, #24
108fc     34 7E BF FD | 	call	#_pop
10900     A7 FA 61 FC | 	wrlong	result1, fp
10904     04 4E 05 F1 | 	add	fp, #4
10908     A7 FC 61 FC | 	wrlong	result2, fp
1090c     04 4E 05 F1 | 	add	fp, #4
10910     A7 FE 61 FC | 	wrlong	result3, fp
10914                 | ' 
10914                 | ' t1=pop() 'value
10914                 | ' 
10914                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
10914     08 4E 85 F1 | 	sub	fp, #8
10918     1C FE 0D F2 | 	cmp	result3, #28 wz
1091c     08 4E 05 51 |  if_ne	add	fp, #8
10920     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10924     08 4E 85 51 |  if_ne	sub	fp, #8
10928     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1092c     A7 12 02 AB |  if_e	rdlong	arg01, fp
10930     0C 4E 05 A1 |  if_e	add	fp, #12
10934     A7 12 62 AC |  if_e	wrlong	arg01, fp
10938     0C 4E 85 A1 |  if_e	sub	fp, #12
1093c     14 00 90 AD |  if_e	jmp	#LR__1380
10940     A7 12 02 F6 | 	mov	arg01, fp
10944     B4 DC BF FD | 	call	#_converttoint
10948     0C 4E 05 F1 | 	add	fp, #12
1094c     A7 FA 61 FC | 	wrlong	result1, fp
10950     0C 4E 85 F1 | 	sub	fp, #12
10954                 | LR__1380
10954                 | ' if t<0 then return
10954     0C 4E 05 F1 | 	add	fp, #12
10958     A7 12 02 FB | 	rdlong	arg01, fp
1095c     0C 4E 85 F1 | 	sub	fp, #12
10960     00 12 56 F2 | 	cmps	arg01, #0 wc
10964     B8 00 90 CD |  if_b	jmp	#LR__1385
10968                 | ' if t < 5000 then 
10968     0C 4E 05 F1 | 	add	fp, #12
1096c     A7 12 02 FB | 	rdlong	arg01, fp
10970     0C 4E 85 F1 | 	sub	fp, #12
10974     09 00 00 FF 
10978     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1097c     14 00 90 3D |  if_ae	jmp	#LR__1381
10980     0C 4E 05 F1 | 	add	fp, #12
10984     A7 12 02 FB | 	rdlong	arg01, fp
10988     0C 4E 85 F1 | 	sub	fp, #12
1098c     14 4E B0 FD | 	call	#__system___waitms
10990     8C 00 90 FD | 	jmp	#LR__1384
10994                 | LR__1381
10994     10 4E 05 F1 | 	add	fp, #16
10998     A7 02 68 FC | 	wrlong	#1, fp
1099c     04 4E 85 F1 | 	sub	fp, #4
109a0     A7 12 02 FB | 	rdlong	arg01, fp
109a4     09 13 52 F6 | 	abs	arg01, arg01 wc
109a8     09 00 00 FF 
109ac     88 13 16 FD | 	qdiv	arg01, ##5000
109b0                 | '   for i=1 to t/5000
109b0     0C 4E 85 F1 | 	sub	fp, #12
109b4     18 1E 62 FD | 	getqx	local01
109b8     0F 1F 82 F6 | 	negc	local01, local01
109bc     01 1E 06 F1 | 	add	local01, #1
109c0                 | LR__1382
109c0     10 4E 05 F1 | 	add	fp, #16
109c4     A7 12 02 FB | 	rdlong	arg01, fp
109c8     10 4E 85 F1 | 	sub	fp, #16
109cc     0F 13 52 F2 | 	cmps	arg01, local01 wc
109d0     28 00 90 3D |  if_ae	jmp	#LR__1383
109d4     0C 4E 05 F1 | 	add	fp, #12
109d8     A7 12 02 FB | 	rdlong	arg01, fp
109dc     0C 4E 85 F1 | 	sub	fp, #12
109e0     C0 4D B0 FD | 	call	#__system___waitms
109e4     10 4E 05 F1 | 	add	fp, #16
109e8     A7 12 02 FB | 	rdlong	arg01, fp
109ec     01 12 06 F1 | 	add	arg01, #1
109f0     A7 12 62 FC | 	wrlong	arg01, fp
109f4     10 4E 85 F1 | 	sub	fp, #16
109f8     C4 FF 9F FD | 	jmp	#LR__1382
109fc                 | LR__1383
109fc     0C 4E 05 F1 | 	add	fp, #12
10a00     A7 1E 02 FB | 	rdlong	local01, fp
10a04     0F 1F 52 F6 | 	abs	local01, local01 wc
10a08     09 00 00 FF 
10a0c     88 1F 16 FD | 	qdiv	local01, ##5000
10a10     0C 4E 85 F1 | 	sub	fp, #12
10a14     19 1E 62 FD | 	getqy	local01
10a18     0F 13 82 F6 | 	negc	arg01, local01
10a1c     84 4D B0 FD | 	call	#__system___waitms
10a20                 | LR__1384
10a20                 | LR__1385
10a20     A7 F0 03 F6 | 	mov	ptra, fp
10a24     B2 00 A0 FD | 	call	#popregs_
10a28                 | _do_waitms_ret
10a28     2D 00 64 FD | 	ret
10a2c                 | 
10a2c                 | ' 
10a2c                 | ' sub do_waitvbl
10a2c                 | _do_waitvbl
10a2c     01 12 06 F6 | 	mov	arg01, #1
10a30     2C 37 B0 FD | 	call	#_hg010b_spin2_waitvbl
10a34                 | _do_waitvbl_ret
10a34     2D 00 64 FD | 	ret
10a38                 | 
10a38                 | ' 
10a38                 | ' sub do_waitclock
10a38                 | _do_waitclock
10a38     52 00 00 FF 
10a3c     38 E4 05 F1 | 	add	objptr, ##42040
10a40     F2 00 02 FB | 	rdlong	_var01, objptr
10a44                 | ' c=hkcnt
10a44                 | ' do: loop until hkcnt<>c
10a44                 | LR__1390
10a44     F2 02 02 FB | 	rdlong	_var02, objptr
10a48     00 03 0A F2 | 	cmp	_var02, _var01 wz
10a4c     F4 FF 9F AD |  if_e	jmp	#LR__1390
10a50     52 00 00 FF 
10a54     38 E4 85 F1 | 	sub	objptr, ##42040
10a58                 | _do_waitclock_ret
10a58     2D 00 64 FD | 	ret
10a5c                 | 
10a5c                 | ' 
10a5c                 | ' sub do_dir
10a5c                 | _do_dir
10a5c     03 4A 05 F6 | 	mov	COUNT_, #3
10a60     A8 00 A0 FD | 	call	#pushregs_
10a64     25 01 00 FF 
10a68     A5 13 06 F6 | 	mov	arg01, ##@LR__4339
10a6c     CC 50 B0 FD | 	call	#__system___chdir
10a70                 | ' chdir("/sd/bas")       ' set working directory
10a70                 | ' print "Working directory: "; currentdir$ 
10a70     00 12 06 F6 | 	mov	arg01, #0
10a74     EC 9F B0 FD | 	call	#__system___getiolock_0348
10a78     FD 12 02 F6 | 	mov	arg01, result1
10a7c     30 4A B0 FD | 	call	#__system___lockmem
10a80     25 01 00 FF 
10a84     AD 15 06 F6 | 	mov	arg02, ##@LR__4340
10a88     00 12 06 F6 | 	mov	arg01, #0
10a8c     00 16 06 F6 | 	mov	arg03, #0
10a90     10 57 B0 FD | 	call	#__system___basic_print_string
10a94     49 00 00 FF 
10a98     58 E4 05 F1 | 	add	objptr, ##37464
10a9c     F2 14 02 FB | 	rdlong	arg02, objptr
10aa0     49 00 00 FF 
10aa4     58 E4 85 F1 | 	sub	objptr, ##37464
10aa8     00 12 06 F6 | 	mov	arg01, #0
10aac     00 16 06 F6 | 	mov	arg03, #0
10ab0     F0 56 B0 FD | 	call	#__system___basic_print_string
10ab4     00 12 06 F6 | 	mov	arg01, #0
10ab8     0A 14 06 F6 | 	mov	arg02, #10
10abc     00 16 06 F6 | 	mov	arg03, #0
10ac0     88 56 B0 FD | 	call	#__system___basic_print_char
10ac4     00 12 06 F6 | 	mov	arg01, #0
10ac8     98 9F B0 FD | 	call	#__system___getiolock_0348
10acc     FD 00 68 FC | 	wrlong	#0, result1
10ad0     25 01 00 FF 
10ad4     C1 13 06 F6 | 	mov	arg01, ##@LR__4341
10ad8     10 14 06 F6 | 	mov	arg02, #16
10adc     BC A0 B0 FD | 	call	#__system___basic_dir
10ae0     FD 1E 02 F6 | 	mov	local01, result1
10ae4                 | ' 
10ae4                 | ' filename=dir$("*", fbDirectory)
10ae4                 | ' while filename <> "" and filename <> nil
10ae4                 | LR__1400
10ae4     00 20 06 F6 | 	mov	local02, #0
10ae8     25 01 00 FF 
10aec     C3 15 06 F6 | 	mov	arg02, ##@LR__4342
10af0     0F 13 02 F6 | 	mov	arg01, local01
10af4     E0 49 B0 FD | 	call	#__system___string_cmp
10af8     00 FA 0D F2 | 	cmp	result1, #0 wz
10afc     00 20 26 56 |  if_ne	not	local02, #0
10b00     00 22 06 F6 | 	mov	local03, #0
10b04     0F 13 02 F6 | 	mov	arg01, local01
10b08     00 14 06 F6 | 	mov	arg02, #0
10b0c     C8 49 B0 FD | 	call	#__system___string_cmp
10b10     00 FA 0D F2 | 	cmp	result1, #0 wz
10b14     00 22 26 56 |  if_ne	not	local03, #0
10b18     11 21 CA F7 | 	test	local02, local03 wz
10b1c     64 00 90 AD |  if_e	jmp	#LR__1401
10b20                 | '   print "[dir] ";filename
10b20     00 12 06 F6 | 	mov	arg01, #0
10b24     3C 9F B0 FD | 	call	#__system___getiolock_0348
10b28     FD 12 02 F6 | 	mov	arg01, result1
10b2c     80 49 B0 FD | 	call	#__system___lockmem
10b30     25 01 00 FF 
10b34     C4 15 06 F6 | 	mov	arg02, ##@LR__4343
10b38     00 12 06 F6 | 	mov	arg01, #0
10b3c     00 16 06 F6 | 	mov	arg03, #0
10b40     60 56 B0 FD | 	call	#__system___basic_print_string
10b44     00 12 06 F6 | 	mov	arg01, #0
10b48     0F 15 02 F6 | 	mov	arg02, local01
10b4c     00 16 06 F6 | 	mov	arg03, #0
10b50     50 56 B0 FD | 	call	#__system___basic_print_string
10b54     00 12 06 F6 | 	mov	arg01, #0
10b58     0A 14 06 F6 | 	mov	arg02, #10
10b5c     00 16 06 F6 | 	mov	arg03, #0
10b60     E8 55 B0 FD | 	call	#__system___basic_print_char
10b64     00 12 06 F6 | 	mov	arg01, #0
10b68     F8 9E B0 FD | 	call	#__system___getiolock_0348
10b6c     FD 00 68 FC | 	wrlong	#0, result1
10b70     00 12 06 F6 | 	mov	arg01, #0
10b74     00 14 06 F6 | 	mov	arg02, #0
10b78     20 A0 B0 FD | 	call	#__system___basic_dir
10b7c     FD 1E 02 F6 | 	mov	local01, result1
10b80     60 FF 9F FD | 	jmp	#LR__1400
10b84                 | LR__1401
10b84     25 01 00 FF 
10b88     CB 13 06 F6 | 	mov	arg01, ##@LR__4344
10b8c     21 14 06 F6 | 	mov	arg02, #33
10b90     08 A0 B0 FD | 	call	#__system___basic_dir
10b94     FD 1E 02 F6 | 	mov	local01, result1
10b98                 | ' 
10b98                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
10b98                 | ' do while filename <> "" and filename <> nil
10b98                 | LR__1402
10b98     00 20 06 F6 | 	mov	local02, #0
10b9c     25 01 00 FF 
10ba0     CD 15 06 F6 | 	mov	arg02, ##@LR__4345
10ba4     0F 13 02 F6 | 	mov	arg01, local01
10ba8     2C 49 B0 FD | 	call	#__system___string_cmp
10bac     00 FA 0D F2 | 	cmp	result1, #0 wz
10bb0     00 20 26 56 |  if_ne	not	local02, #0
10bb4     00 22 06 F6 | 	mov	local03, #0
10bb8     0F 13 02 F6 | 	mov	arg01, local01
10bbc     00 14 06 F6 | 	mov	arg02, #0
10bc0     14 49 B0 FD | 	call	#__system___string_cmp
10bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
10bc8     00 22 26 56 |  if_ne	not	local03, #0
10bcc     11 21 CA F7 | 	test	local02, local03 wz
10bd0     54 01 90 AD |  if_e	jmp	#LR__1406
10bd4                 | '   print filename
10bd4     00 12 06 F6 | 	mov	arg01, #0
10bd8     88 9E B0 FD | 	call	#__system___getiolock_0348
10bdc     FD 12 02 F6 | 	mov	arg01, result1
10be0     CC 48 B0 FD | 	call	#__system___lockmem
10be4     00 12 06 F6 | 	mov	arg01, #0
10be8     0F 15 02 F6 | 	mov	arg02, local01
10bec     00 16 06 F6 | 	mov	arg03, #0
10bf0     B0 55 B0 FD | 	call	#__system___basic_print_string
10bf4     00 12 06 F6 | 	mov	arg01, #0
10bf8     0A 14 06 F6 | 	mov	arg02, #10
10bfc     00 16 06 F6 | 	mov	arg03, #0
10c00     48 55 B0 FD | 	call	#__system___basic_print_char
10c04     00 12 06 F6 | 	mov	arg01, #0
10c08     58 9E B0 FD | 	call	#__system___getiolock_0348
10c0c     FD 00 68 FC | 	wrlong	#0, result1
10c10     00 12 06 F6 | 	mov	arg01, #0
10c14     00 14 06 F6 | 	mov	arg02, #0
10c18     80 9F B0 FD | 	call	#__system___basic_dir
10c1c     FD 1E 02 F6 | 	mov	local01, result1
10c20                 | '   filename = dir$()      ' continue scan
10c20                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
10c20                 | ' return cursor_y
10c20     3A E4 05 F1 | 	add	objptr, #58
10c24     F2 FA C1 FA | 	rdbyte	result1, objptr
10c28     3A E4 85 F1 | 	sub	objptr, #58
10c2c     22 FA 0D F2 | 	cmp	result1, #34 wz
10c30     64 FF 9F 5D |  if_ne	jmp	#LR__1402
10c34                 | '     print "-----more, press any key";
10c34     00 12 06 F6 | 	mov	arg01, #0
10c38     28 9E B0 FD | 	call	#__system___getiolock_0348
10c3c     FD 12 02 F6 | 	mov	arg01, result1
10c40     6C 48 B0 FD | 	call	#__system___lockmem
10c44     25 01 00 FF 
10c48     CE 15 06 F6 | 	mov	arg02, ##@LR__4346
10c4c     00 12 06 F6 | 	mov	arg01, #0
10c50     00 16 06 F6 | 	mov	arg03, #0
10c54     4C 55 B0 FD | 	call	#__system___basic_print_string
10c58     00 12 06 F6 | 	mov	arg01, #0
10c5c     04 9E B0 FD | 	call	#__system___getiolock_0348
10c60     FD 00 68 FC | 	wrlong	#0, result1
10c64                 | '     do 
10c64                 | LR__1403
10c64     EC 40 B0 FD | 	call	#_usbnew_spin2_get_key
10c68     00 FA 0D F2 | 	cmp	result1, #0 wz
10c6c     F4 FF 9F 5D |  if_ne	jmp	#LR__1403
10c70                 | '     do
10c70                 | LR__1404
10c70     E0 40 B0 FD | 	call	#_usbnew_spin2_get_key
10c74     00 FA 0D F2 | 	cmp	result1, #0 wz
10c78     F4 FF 9F AD |  if_e	jmp	#LR__1404
10c7c                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
10c7c     50 00 00 FF 
10c80     A4 E5 05 F1 | 	add	objptr, ##41380
10c84     F2 20 02 FB | 	rdlong	local02, objptr
10c88     50 00 00 FF 
10c8c     A4 E5 85 F1 | 	sub	objptr, ##41380
10c90     01 20 0E F2 | 	cmp	local02, #1 wz
10c94     44 00 90 5D |  if_ne	jmp	#LR__1405
10c98     01 00 00 FF 
10c9c     00 EA 05 F1 | 	add	ptr__dat__, ##512
10ca0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10ca4     01 00 00 FF 
10ca8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
10cac     07 12 06 F6 | 	mov	arg01, #7
10cb0     56 00 00 FF 
10cb4     44 16 06 F6 | 	mov	arg03, ##44100
10cb8     0E 18 C6 F9 | 	decod	arg04, #14
10cbc     03 00 00 FF 
10cc0     94 1A 06 F6 | 	mov	arg05, ##1684
10cc4     01 1C 66 F6 | 	neg	arg06, #1
10cc8     0B 00 00 FF 
10ccc     C0 E4 05 F1 | 	add	objptr, ##5824
10cd0     A8 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10cd4     0B 00 00 FF 
10cd8     C0 E4 85 F1 | 	sub	objptr, ##5824
10cdc                 | LR__1405
10cdc     00 12 06 F6 | 	mov	arg01, #0
10ce0     23 14 06 F6 | 	mov	arg02, #35
10ce4     40 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10ce8                 | '     position 0,35: print "                             ";: position 4,35  
10ce8     00 12 06 F6 | 	mov	arg01, #0
10cec     74 9D B0 FD | 	call	#__system___getiolock_0348
10cf0     FD 12 02 F6 | 	mov	arg01, result1
10cf4     B8 47 B0 FD | 	call	#__system___lockmem
10cf8     25 01 00 FF 
10cfc     E7 15 06 F6 | 	mov	arg02, ##@LR__4347
10d00     00 12 06 F6 | 	mov	arg01, #0
10d04     00 16 06 F6 | 	mov	arg03, #0
10d08     98 54 B0 FD | 	call	#__system___basic_print_string
10d0c     00 12 06 F6 | 	mov	arg01, #0
10d10     50 9D B0 FD | 	call	#__system___getiolock_0348
10d14     FD 00 68 FC | 	wrlong	#0, result1
10d18     04 12 06 F6 | 	mov	arg01, #4
10d1c     23 14 06 F6 | 	mov	arg02, #35
10d20     04 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10d24     70 FE 9F FD | 	jmp	#LR__1402
10d28                 | LR__1406
10d28     A7 F0 03 F6 | 	mov	ptra, fp
10d2c     B2 00 A0 FD | 	call	#popregs_
10d30                 | _do_dir_ret
10d30     2D 00 64 FD | 	ret
10d34                 | 
10d34                 | ' 
10d34                 | ' sub do_if
10d34                 | _do_if
10d34     05 4A 05 F6 | 	mov	COUNT_, #5
10d38     A8 00 A0 FD | 	call	#pushregs_
10d3c     F4 79 BF FD | 	call	#_pop
10d40     FD 1E 0A F6 | 	mov	local01, result1 wz
10d44     FE 20 02 F6 | 	mov	local02, result2
10d48     FF 22 02 F6 | 	mov	local03, result3
10d4c                 | ' t1=pop()
10d4c                 | ' ' if uresult=0, jump over else
10d4c                 | ' if t1.result.uresult = 0 then 
10d4c     BC 00 90 5D |  if_ne	jmp	#LR__1412
10d50                 | '   for i=lineptr_e to lineptr-1
10d50     41 00 00 FF 
10d54     44 E4 05 F1 | 	add	objptr, ##33348
10d58     F2 24 02 FB | 	rdlong	local04, objptr
10d5c     04 E4 85 F1 | 	sub	objptr, #4
10d60     F2 26 02 FB | 	rdlong	local05, objptr
10d64     41 00 00 FF 
10d68     40 E4 85 F1 | 	sub	objptr, ##33344
10d6c                 | LR__1410
10d6c     13 25 52 F2 | 	cmps	local04, local05 wc
10d70     78 00 90 3D |  if_ae	jmp	#LR__1411
10d74     12 FF 01 F6 | 	mov	result3, local04
10d78     01 FE 65 F0 | 	shl	result3, #1
10d7c     12 FF 01 F1 | 	add	result3, local04
10d80     02 FE 65 F0 | 	shl	result3, #2
10d84     3E 00 00 FF 
10d88     40 E4 05 F1 | 	add	objptr, ##31808
10d8c     F2 FE 01 F1 | 	add	result3, objptr
10d90     FF 1E 02 FB | 	rdlong	local01, result3
10d94     04 FE 05 F1 | 	add	result3, #4
10d98     FF FC 01 FB | 	rdlong	result2, result3
10d9c     12 FF 01 F6 | 	mov	result3, local04
10da0     01 FE 65 F0 | 	shl	result3, #1
10da4     12 FF 01 F1 | 	add	result3, local04
10da8     02 FE 65 F0 | 	shl	result3, #2
10dac     F2 FE 01 F1 | 	add	result3, objptr
10db0     08 FE 05 F1 | 	add	result3, #8
10db4     FF FE 01 FB | 	rdlong	result3, result3
10db8     FE 20 02 F6 | 	mov	local02, result2
10dbc     FF 22 02 F6 | 	mov	local03, result3
10dc0                 | '     t1=compiledline(i)
10dc0                 | '     if t1.result_type=token_else then lineptr_e=i : return
10dc0     5A 22 0E F2 | 	cmp	local03, #90 wz
10dc4     3E 00 00 FF 
10dc8     40 E4 85 F1 | 	sub	objptr, ##31808
10dcc     41 00 00 AF 
10dd0     44 E4 05 A1 |  if_e	add	objptr, ##33348
10dd4     F2 24 62 AC |  if_e	wrlong	local04, objptr
10dd8     41 00 00 AF 
10ddc     44 E4 85 A1 |  if_e	sub	objptr, ##33348
10de0     28 00 90 AD |  if_e	jmp	#LR__1413
10de4     01 24 06 F1 | 	add	local04, #1
10de8     80 FF 9F FD | 	jmp	#LR__1410
10dec                 | LR__1411
10dec     41 00 00 FF 
10df0     40 E4 05 F1 | 	add	objptr, ##33344
10df4     F2 26 02 FB | 	rdlong	local05, objptr
10df8     01 26 86 F1 | 	sub	local05, #1
10dfc     04 E4 05 F1 | 	add	objptr, #4
10e00     F2 26 62 FC | 	wrlong	local05, objptr
10e04     41 00 00 FF 
10e08     44 E4 85 F1 | 	sub	objptr, ##33348
10e0c                 | LR__1412
10e0c                 | LR__1413
10e0c     A7 F0 03 F6 | 	mov	ptra, fp
10e10     B2 00 A0 FD | 	call	#popregs_
10e14                 | _do_if_ret
10e14     2D 00 64 FD | 	ret
10e18                 | 
10e18                 | ' 
10e18                 | ' sub do_else
10e18                 | _do_else
10e18     41 00 00 FF 
10e1c     40 E4 05 F1 | 	add	objptr, ##33344
10e20     F2 00 02 FB | 	rdlong	_var01, objptr
10e24     01 00 86 F1 | 	sub	_var01, #1
10e28     04 E4 05 F1 | 	add	objptr, #4
10e2c     F2 00 62 FC | 	wrlong	_var01, objptr
10e30     41 00 00 FF 
10e34     44 E4 85 F1 | 	sub	objptr, ##33348
10e38                 | _do_else_ret
10e38     2D 00 64 FD | 	ret
10e3c                 | 
10e3c                 | ' 
10e3c                 | ' 
10e3c                 | ' 
10e3c                 | ' sub do_nothing
10e3c                 | _do_nothing
10e3c                 | _do_nothing_ret
10e3c     2D 00 64 FD | 	ret
10e40                 | 
10e40                 | ' 
10e40                 | ' sub do_brun
10e40                 | _do_brun
10e40     08 4A 05 F6 | 	mov	COUNT_, #8
10e44     A8 00 A0 FD | 	call	#pushregs_
10e48     E8 78 BF FD | 	call	#_pop
10e4c     FF 1A 02 F6 | 	mov	arg05, result3
10e50     FD 1E 02 F6 | 	mov	local01, result1
10e54     FE 20 02 F6 | 	mov	local02, result2
10e58     0D 23 02 F6 | 	mov	local03, arg05
10e5c                 | ' 
10e5c                 | ' t1=pop() 
10e5c                 | ' if t1.result_type=result_string then
10e5c     1F 22 0E F2 | 	cmp	local03, #31 wz
10e60     EC 01 90 5D |  if_ne	jmp	#LR__1423
10e64     0F 25 02 F6 | 	mov	local04, local01
10e68                 | '   filename=t1.result.sresult
10e68                 | '   if left$(filename,1)="/" then 
10e68     12 13 02 F6 | 	mov	arg01, local04
10e6c     01 14 06 F6 | 	mov	arg02, #1
10e70     4C 66 B0 FD | 	call	#__system__Left_S
10e74     FD 12 02 F6 | 	mov	arg01, result1
10e78     26 01 00 FF 
10e7c     05 14 06 F6 | 	mov	arg02, ##@LR__4348
10e80     54 46 B0 FD | 	call	#__system___string_cmp
10e84     00 FA 0D F2 | 	cmp	result1, #0 wz
10e88     12 27 02 A6 |  if_e	mov	local05, local04
10e8c     14 00 90 AD |  if_e	jmp	#LR__1420
10e90     26 01 00 FF 
10e94     07 12 06 F6 | 	mov	arg01, ##@LR__4349
10e98     12 15 02 F6 | 	mov	arg02, local04
10e9c     6C 46 B0 FD | 	call	#__system___string_concat
10ea0     FD 26 02 F6 | 	mov	local05, result1
10ea4                 | LR__1420
10ea4                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
10ea4                 | '   open fullfilename for input as #9
10ea4     09 12 06 F6 | 	mov	arg01, #9
10ea8     13 15 02 F6 | 	mov	arg02, local05
10eac     00 16 06 F6 | 	mov	arg03, #0
10eb0     00 52 B0 FD | 	call	#__system___basic_open_string
10eb4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
10eb8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10ebc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
10ec0     FD 28 0A F6 | 	mov	local06, result1 wz
10ec4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
10ec4     8C 00 90 AD |  if_e	jmp	#LR__1421
10ec8     00 12 06 F6 | 	mov	arg01, #0
10ecc     94 9B B0 FD | 	call	#__system___getiolock_0348
10ed0     FD 12 02 F6 | 	mov	arg01, result1
10ed4     D8 45 B0 FD | 	call	#__system___lockmem
10ed8     26 01 00 FF 
10edc     10 14 06 F6 | 	mov	arg02, ##@LR__4350
10ee0     00 12 06 F6 | 	mov	arg01, #0
10ee4     00 16 06 F6 | 	mov	arg03, #0
10ee8     B8 52 B0 FD | 	call	#__system___basic_print_string
10eec     00 12 06 F6 | 	mov	arg01, #0
10ef0     14 15 02 F6 | 	mov	arg02, local06
10ef4     00 16 06 F6 | 	mov	arg03, #0
10ef8     0A 18 06 F6 | 	mov	arg04, #10
10efc     E8 52 B0 FD | 	call	#__system___basic_print_integer
10f00     26 01 00 FF 
10f04     1E 14 06 F6 | 	mov	arg02, ##@LR__4351
10f08     00 12 06 F6 | 	mov	arg01, #0
10f0c     00 16 06 F6 | 	mov	arg03, #0
10f10     90 52 B0 FD | 	call	#__system___basic_print_string
10f14     14 13 02 F6 | 	mov	arg01, local06
10f18     94 6B B0 FD | 	call	#__system___strerror
10f1c     FD 14 02 F6 | 	mov	arg02, result1
10f20     00 12 06 F6 | 	mov	arg01, #0
10f24     00 16 06 F6 | 	mov	arg03, #0
10f28     78 52 B0 FD | 	call	#__system___basic_print_string
10f2c     00 12 06 F6 | 	mov	arg01, #0
10f30     0A 14 06 F6 | 	mov	arg02, #10
10f34     00 16 06 F6 | 	mov	arg03, #0
10f38     10 52 B0 FD | 	call	#__system___basic_print_char
10f3c     00 12 06 F6 | 	mov	arg01, #0
10f40     20 9B B0 FD | 	call	#__system___getiolock_0348
10f44     FD 00 68 FC | 	wrlong	#0, result1
10f48     09 12 06 F6 | 	mov	arg01, #9
10f4c     44 91 B0 FD | 	call	#__system__close
10f50     FC 00 90 FD | 	jmp	#LR__1424
10f54                 | LR__1421
10f54     01 2A 06 F6 | 	mov	local07, #1
10f58     00 2C 06 F6 | 	mov	local08, #0
10f5c                 | '   do
10f5c                 | LR__1422
10f5c                 | '     get #9,pos,block(0),1024,r : pos+=r	
10f5c     4E 00 00 FF 
10f60     70 E5 05 F1 | 	add	objptr, ##40304
10f64     F2 16 02 F6 | 	mov	arg03, objptr
10f68     4E 00 00 FF 
10f6c     70 E5 85 F1 | 	sub	objptr, ##40304
10f70     09 12 06 F6 | 	mov	arg01, #9
10f74     15 15 02 F6 | 	mov	arg02, local07
10f78     0A 18 C6 F9 | 	decod	arg04, #10
10f7c     01 1A 06 F6 | 	mov	arg05, #1
10f80     30 53 B0 FD | 	call	#__system___basic_get
10f84     FD 28 02 F6 | 	mov	local06, result1
10f88     FD 2A 02 F1 | 	add	local07, result1
10f8c     4E 00 00 FF 
10f90     70 E5 05 F1 | 	add	objptr, ##40304
10f94     F2 12 02 F6 | 	mov	arg01, objptr
10f98     16 15 02 F6 | 	mov	arg02, local08
10f9c     0A 16 C6 F9 | 	decod	arg03, #10
10fa0     43 00 00 FF 
10fa4     B0 E4 85 F1 | 	sub	objptr, ##34480
10fa8     B4 3A B0 FD | 	call	#_psram_spin2_write
10fac     0B 00 00 FF 
10fb0     C0 E4 85 F1 | 	sub	objptr, ##5824
10fb4     14 2D 02 F1 | 	add	local08, local06
10fb8     02 00 00 FF 
10fbc     00 28 0E F2 | 	cmp	local06, ##1024 wz
10fc0     E0 03 00 AF 
10fc4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
10fc8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1422
10fcc     2D 00 00 FF 
10fd0     C0 E5 05 F1 | 	add	objptr, ##23488
10fd4     F2 12 02 FB | 	rdlong	arg01, objptr
10fd8     03 12 62 FD | 	cogstop	arg01
10fdc     04 E4 05 F1 | 	add	objptr, #4
10fe0     F2 12 02 FB | 	rdlong	arg01, objptr
10fe4     03 12 62 FD | 	cogstop	arg01
10fe8     04 E4 05 F1 | 	add	objptr, #4
10fec     F2 12 02 FB | 	rdlong	arg01, objptr
10ff0     03 12 62 FD | 	cogstop	arg01
10ff4     22 00 00 FF 
10ff8     E0 E5 05 F1 | 	add	objptr, ##17888
10ffc     F2 12 02 FB | 	rdlong	arg01, objptr
11000     03 12 62 FD | 	cogstop	arg01
11004     09 00 00 FF 
11008     74 EB 05 F1 | 	add	ptr__dat__, ##4980
1100c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11010     09 00 00 FF 
11014     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
11018     22 00 00 FF 
1101c     D8 E5 85 F1 | 	sub	objptr, ##17880
11020     1E 2C 06 F6 | 	mov	local08, #30
11024     28 E4 61 FD | 	setq	objptr
11028     0A 2D F2 FC | 	coginit	local08, arg02 wc
1102c     01 2C 66 C6 |  if_b	neg	local08, #1
11030     24 00 00 FF 
11034     DC E4 05 F1 | 	add	objptr, ##18652
11038     F2 2C 62 FC | 	wrlong	local08, objptr
1103c     52 00 00 FF 
11040     AC E4 85 F1 | 	sub	objptr, ##42156
11044     00 12 06 F6 | 	mov	arg01, #0
11048     01 12 62 FD | 	cogid	arg01
1104c     03 12 62 FD | 	cogstop	arg01
11050                 | LR__1423
11050                 | LR__1424
11050     A7 F0 03 F6 | 	mov	ptra, fp
11054     B2 00 A0 FD | 	call	#popregs_
11058                 | _do_brun_ret
11058     2D 00 64 FD | 	ret
1105c                 | 
1105c                 | ' 
1105c                 | ' 
1105c                 | ' sub do_mouse
1105c                 | _do_mouse
1105c     D4 76 BF FD | 	call	#_pop
11060     00 FA 4D F2 | 	cmps	result1, #0 wz
11064                 | ' 
11064                 | ' t1=pop()
11064                 | ' 
11064                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
11064     14 00 90 5D |  if_ne	jmp	#LR__1430
11068     10 12 06 F6 | 	mov	arg01, #16
1106c     00 14 06 F6 | 	mov	arg02, #0
11070     00 16 06 F6 | 	mov	arg03, #0
11074     94 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
11078     10 00 90 FD | 	jmp	#LR__1431
1107c                 | LR__1430
1107c     10 12 06 F6 | 	mov	arg01, #16
11080     20 14 06 F6 | 	mov	arg02, #32
11084     20 16 06 F6 | 	mov	arg03, #32
11088     80 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
1108c                 | LR__1431
1108c                 | _do_mouse_ret
1108c     2D 00 64 FD | 	ret
11090                 | 
11090                 | ' 
11090                 | ' sub do_cursor
11090                 | _do_cursor
11090     A0 76 BF FD | 	call	#_pop
11094     00 FA 4D F2 | 	cmps	result1, #0 wz
11098                 | ' 
11098                 | ' t1=pop()
11098                 | ' 
11098                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
11098     14 00 90 5D |  if_ne	jmp	#LR__1440
1109c     11 12 06 F6 | 	mov	arg01, #17
110a0     00 14 06 F6 | 	mov	arg02, #0
110a4     00 16 06 F6 | 	mov	arg03, #0
110a8     60 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
110ac     10 00 90 FD | 	jmp	#LR__1441
110b0                 | LR__1440
110b0     11 12 06 F6 | 	mov	arg01, #17
110b4     08 14 06 F6 | 	mov	arg02, #8
110b8     10 16 06 F6 | 	mov	arg03, #16
110bc     4C 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
110c0                 | LR__1441
110c0                 | _do_cursor_ret
110c0     2D 00 64 FD | 	ret
110c4                 | 
110c4                 | ' 
110c4                 | ' 
110c4                 | ' sub do_click
110c4                 | _do_click
110c4     6C 76 BF FD | 	call	#_pop
110c8     00 FA 4D F2 | 	cmps	result1, #0 wz
110cc                 | ' 
110cc                 | ' t1=pop()
110cc                 | ' 
110cc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
110cc     50 00 00 AF 
110d0     A4 E5 05 A1 |  if_e	add	objptr, ##41380
110d4     F2 00 68 AC |  if_e	wrlong	#0, objptr
110d8     50 00 00 FF 
110dc     A4 E5 C5 F3 | 	sumz	objptr, ##41380
110e0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
110e4     50 00 00 5F 
110e8     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
110ec                 | _do_click_ret
110ec     2D 00 64 FD | 	ret
110f0                 | 
110f0                 | ' 
110f0                 | ' 
110f0                 | ' sub do_beep
110f0                 | _do_beep
110f0     02 4A 05 F6 | 	mov	COUNT_, #2
110f4     A8 00 A0 FD | 	call	#pushregs_
110f8     20 F0 07 F1 | 	add	ptra, #32
110fc     34 76 BF FD | 	call	#_pop
11100     FD 1E 02 F6 | 	mov	local01, result1
11104     FE 1C 02 F6 | 	mov	arg06, result2
11108     FF 20 02 F6 | 	mov	local02, result3
1110c     0C 4E 05 F1 | 	add	fp, #12
11110     A7 1E 62 FC | 	wrlong	local01, fp
11114     04 4E 05 F1 | 	add	fp, #4
11118     A7 1C 62 FC | 	wrlong	arg06, fp
1111c     04 4E 05 F1 | 	add	fp, #4
11120     A7 20 62 FC | 	wrlong	local02, fp
11124     14 4E 85 F1 | 	sub	fp, #20
11128     08 76 BF FD | 	call	#_pop
1112c     A7 FA 61 FC | 	wrlong	result1, fp
11130     04 4E 05 F1 | 	add	fp, #4
11134     A7 FC 61 FC | 	wrlong	result2, fp
11138     04 4E 05 F1 | 	add	fp, #4
1113c     A7 FE 61 FC | 	wrlong	result3, fp
11140                 | ' 
11140                 | ' 
11140                 | ' 
11140                 | ' t2=pop()
11140                 | ' t1=pop()
11140                 | ' 
11140                 | ' 
11140                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
11140     08 4E 85 F1 | 	sub	fp, #8
11144     1C FE 0D F2 | 	cmp	result3, #28 wz
11148     08 4E 05 51 |  if_ne	add	fp, #8
1114c     A7 20 02 5B |  if_ne	rdlong	local02, fp
11150     08 4E 85 51 |  if_ne	sub	fp, #8
11154     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
11158     A7 1E 02 AB |  if_e	rdlong	local01, fp
1115c     18 4E 05 A1 |  if_e	add	fp, #24
11160     A7 1E 62 AC |  if_e	wrlong	local01, fp
11164     18 4E 85 A1 |  if_e	sub	fp, #24
11168     14 00 90 AD |  if_e	jmp	#LR__1450
1116c     A7 12 02 F6 | 	mov	arg01, fp
11170     88 D4 BF FD | 	call	#_converttoint
11174     18 4E 05 F1 | 	add	fp, #24
11178     A7 FA 61 FC | 	wrlong	result1, fp
1117c     18 4E 85 F1 | 	sub	fp, #24
11180                 | LR__1450
11180     1C 4E 05 F1 | 	add	fp, #28
11184     A7 FE 48 FC | 	wrbyte	#127, fp
11188     01 4E 05 F1 | 	add	fp, #1
1118c     A7 00 49 FC | 	wrbyte	#128, fp
11190     01 4E 85 F1 | 	sub	fp, #1
11194     A7 14 02 F6 | 	mov	arg02, fp
11198     04 4E 85 F1 | 	sub	fp, #4
1119c     A7 16 02 FB | 	rdlong	arg03, fp
111a0     18 4E 85 F1 | 	sub	fp, #24
111a4     01 16 66 F0 | 	shl	arg03, #1
111a8     07 12 06 F6 | 	mov	arg01, #7
111ac     0E 18 C6 F9 | 	decod	arg04, #14
111b0     02 1A 06 F6 | 	mov	arg05, #2
111b4     00 1C 06 F6 | 	mov	arg06, #0
111b8     0B 00 00 FF 
111bc     C0 E4 05 F1 | 	add	objptr, ##5824
111c0     54 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
111c4     0B 00 00 FF 
111c8     C0 E4 85 F1 | 	sub	objptr, ##5824
111cc     0C 4E 05 F1 | 	add	fp, #12
111d0     A7 12 02 F6 | 	mov	arg01, fp
111d4     0C 4E 85 F1 | 	sub	fp, #12
111d8     F0 75 BF FD | 	call	#_push
111dc     10 F7 BF FD | 	call	#_do_waitms
111e0     07 12 06 F6 | 	mov	arg01, #7
111e4     0B 00 00 FF 
111e8     C0 E4 05 F1 | 	add	objptr, ##5824
111ec     DC 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
111f0     0B 00 00 FF 
111f4     C0 E4 85 F1 | 	sub	objptr, ##5824
111f8     A7 F0 03 F6 | 	mov	ptra, fp
111fc     B2 00 A0 FD | 	call	#popregs_
11200                 | _do_beep_ret
11200     2D 00 64 FD | 	ret
11204                 | 
11204                 | ' 
11204                 | ' sub do_no_command
11204                 | _do_no_command
11204     17 12 06 F6 | 	mov	arg01, #23
11208     B0 0D B0 FD | 	call	#_printerror
1120c                 | _do_no_command_ret
1120c     2D 00 64 FD | 	ret
11210                 | 
11210                 | ' 
11210                 | ' sub do_negative
11210                 | _do_negative
11210     02 4A 05 F6 | 	mov	COUNT_, #2
11214     A8 00 A0 FD | 	call	#pushregs_
11218     0C F0 07 F1 | 	add	ptra, #12
1121c     14 75 BF FD | 	call	#_pop
11220     FF 1E 02 F6 | 	mov	local01, result3
11224     A7 FA 61 FC | 	wrlong	result1, fp
11228     04 4E 05 F1 | 	add	fp, #4
1122c     A7 FC 61 FC | 	wrlong	result2, fp
11230     04 4E 05 F1 | 	add	fp, #4
11234     A7 1E 62 FC | 	wrlong	local01, fp
11238                 | ' t1=pop()
11238                 | ' if t1.result_type=result_int then 
11238     08 4E 85 F1 | 	sub	fp, #8
1123c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11240     A7 20 02 AB |  if_e	rdlong	local02, fp
11244     10 1F 62 A6 |  if_e	neg	local01, local02
11248     A7 1E 62 AC |  if_e	wrlong	local01, fp
1124c     5C 00 90 AD |  if_e	jmp	#LR__1462
11250     08 4E 05 F1 | 	add	fp, #8
11254     A7 1E 02 FB | 	rdlong	local01, fp
11258     08 4E 85 F1 | 	sub	fp, #8
1125c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11260     1C 00 90 5D |  if_ne	jmp	#LR__1460
11264     A7 20 02 FB | 	rdlong	local02, fp
11268     10 1F 62 F6 | 	neg	local01, local02
1126c     A7 1E 62 FC | 	wrlong	local01, fp
11270     08 4E 05 F1 | 	add	fp, #8
11274     A7 38 68 FC | 	wrlong	#28, fp
11278     08 4E 85 F1 | 	sub	fp, #8
1127c     2C 00 90 FD | 	jmp	#LR__1461
11280                 | LR__1460
11280     08 4E 05 F1 | 	add	fp, #8
11284     A7 1E 02 FB | 	rdlong	local01, fp
11288     08 4E 85 F1 | 	sub	fp, #8
1128c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11290     A7 FA 01 AB |  if_e	rdlong	result1, fp
11294     1F FA E5 A4 |  if_e	bitnot	result1, #31
11298     A7 FA 61 AC |  if_e	wrlong	result1, fp
1129c     08 4E 05 51 |  if_ne	add	fp, #8
112a0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
112a4     08 4E 85 51 |  if_ne	sub	fp, #8
112a8     A7 50 68 5C |  if_ne	wrlong	#40, fp
112ac                 | LR__1461
112ac                 | LR__1462
112ac     A7 12 02 F6 | 	mov	arg01, fp
112b0     18 75 BF FD | 	call	#_push
112b4     A7 F0 03 F6 | 	mov	ptra, fp
112b8     B2 00 A0 FD | 	call	#popregs_
112bc                 | _do_negative_ret
112bc     2D 00 64 FD | 	ret
112c0                 | 
112c0                 | ' 
112c0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
112c0                 | ' 
112c0                 | ' ''----------------------------------------------------------------------------------------------------
112c0                 | ' ''------------------ Initialization procedures -------------------------------------------------------
112c0                 | ' ''----------------------------------------------------------------------------------------------------
112c0                 | ' 
112c0                 | ' ''--------------------------- Command function pointers
112c0                 | ' 
112c0                 | ' sub init_commands
112c0                 | _init_commands
112c0                 | ' 
112c0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
112c0     00 00 06 F6 | 	mov	_var01, #0
112c4     97 16 48 FB | 	callpa	#(@LR__1471-@LR__1470)>>2,fcache_load_ptr_
112c8                 | LR__1470
112c8     00 FB 01 F6 | 	mov	result1, _var01
112cc     02 FA 65 F0 | 	shl	result1, #2
112d0     3A 00 00 FF 
112d4     24 E4 05 F1 | 	add	objptr, ##29732
112d8     F2 FA 01 F1 | 	add	result1, objptr
112dc     3A 00 00 FF 
112e0     24 E4 85 F1 | 	sub	objptr, ##29732
112e4     FD E4 61 FC | 	wrlong	objptr, result1
112e8     01 00 06 F1 | 	add	_var01, #1
112ec     00 01 56 F2 | 	cmps	_var01, #256 wc
112f0     D4 FF 9F CD |  if_b	jmp	#LR__1470
112f4                 | LR__1471
112f4     F2 FA 01 F6 | 	mov	result1, objptr
112f8     14 FA 25 F4 | 	bith	result1, #20
112fc     3A 00 00 FF 
11300     28 E4 05 F1 | 	add	objptr, ##29736
11304     F2 FA 61 FC | 	wrlong	result1, objptr
11308     3A 00 00 FF 
1130c     28 E4 85 F1 | 	sub	objptr, ##29736
11310     F2 FA 01 F6 | 	mov	result1, objptr
11314     15 FA 25 F4 | 	bith	result1, #21
11318     3A 00 00 FF 
1131c     2C E4 05 F1 | 	add	objptr, ##29740
11320     F2 FA 61 FC | 	wrlong	result1, objptr
11324     3A 00 00 FF 
11328     2C E4 85 F1 | 	sub	objptr, ##29740
1132c     F2 FA 01 F6 | 	mov	result1, objptr
11330     34 FA 25 F4 | 	bith	result1, #52
11334     3A 00 00 FF 
11338     30 E4 05 F1 | 	add	objptr, ##29744
1133c     F2 FA 61 FC | 	wrlong	result1, objptr
11340     3A 00 00 FF 
11344     30 E4 85 F1 | 	sub	objptr, ##29744
11348     F2 FA 01 F6 | 	mov	result1, objptr
1134c     16 FA 25 F4 | 	bith	result1, #22
11350     3A 00 00 FF 
11354     38 E4 05 F1 | 	add	objptr, ##29752
11358     F2 FA 61 FC | 	wrlong	result1, objptr
1135c     3A 00 00 FF 
11360     38 E4 85 F1 | 	sub	objptr, ##29752
11364     F2 FA 01 F6 | 	mov	result1, objptr
11368     00 28 00 FF 
1136c     00 FA 45 F5 | 	or	result1, ##5242880
11370     3A 00 00 FF 
11374     3C E4 05 F1 | 	add	objptr, ##29756
11378     F2 FA 61 FC | 	wrlong	result1, objptr
1137c     3A 00 00 FF 
11380     3C E4 85 F1 | 	sub	objptr, ##29756
11384     F2 FA 01 F6 | 	mov	result1, objptr
11388     35 FA 25 F4 | 	bith	result1, #53
1138c     3A 00 00 FF 
11390     40 E4 05 F1 | 	add	objptr, ##29760
11394     F2 FA 61 FC | 	wrlong	result1, objptr
11398     3A 00 00 FF 
1139c     40 E4 85 F1 | 	sub	objptr, ##29760
113a0     F2 FA 01 F6 | 	mov	result1, objptr
113a4     54 FA 25 F4 | 	bith	result1, #84
113a8     3A 00 00 FF 
113ac     44 E4 05 F1 | 	add	objptr, ##29764
113b0     F2 FA 61 FC | 	wrlong	result1, objptr
113b4     3A 00 00 FF 
113b8     44 E4 85 F1 | 	sub	objptr, ##29764
113bc     F2 FA 01 F6 | 	mov	result1, objptr
113c0     17 FA 25 F4 | 	bith	result1, #23
113c4     3A 00 00 FF 
113c8     48 E4 05 F1 | 	add	objptr, ##29768
113cc     F2 FA 61 FC | 	wrlong	result1, objptr
113d0     3A 00 00 FF 
113d4     48 E4 85 F1 | 	sub	objptr, ##29768
113d8     F2 FA 01 F6 | 	mov	result1, objptr
113dc     00 48 00 FF 
113e0     00 FA 45 F5 | 	or	result1, ##9437184
113e4     3A 00 00 FF 
113e8     4C E4 05 F1 | 	add	objptr, ##29772
113ec     F2 FA 61 FC | 	wrlong	result1, objptr
113f0     3A 00 00 FF 
113f4     4C E4 85 F1 | 	sub	objptr, ##29772
113f8     F2 FA 01 F6 | 	mov	result1, objptr
113fc     00 50 00 FF 
11400     00 FA 45 F5 | 	or	result1, ##10485760
11404     3A 00 00 FF 
11408     50 E4 05 F1 | 	add	objptr, ##29776
1140c     F2 FA 61 FC | 	wrlong	result1, objptr
11410     3A 00 00 FF 
11414     50 E4 85 F1 | 	sub	objptr, ##29776
11418     F2 FA 01 F6 | 	mov	result1, objptr
1141c     00 58 00 FF 
11420     00 FA 45 F5 | 	or	result1, ##11534336
11424     3A 00 00 FF 
11428     54 E4 05 F1 | 	add	objptr, ##29780
1142c     F2 FA 61 FC | 	wrlong	result1, objptr
11430     3A 00 00 FF 
11434     54 E4 85 F1 | 	sub	objptr, ##29780
11438     F2 FA 01 F6 | 	mov	result1, objptr
1143c     36 FA 25 F4 | 	bith	result1, #54
11440     3A 00 00 FF 
11444     68 E4 05 F1 | 	add	objptr, ##29800
11448     F2 FA 61 FC | 	wrlong	result1, objptr
1144c     3A 00 00 FF 
11450     68 E4 85 F1 | 	sub	objptr, ##29800
11454     F2 FA 01 F6 | 	mov	result1, objptr
11458     00 68 00 FF 
1145c     00 FA 45 F5 | 	or	result1, ##13631488
11460     3A 00 00 FF 
11464     98 E4 05 F1 | 	add	objptr, ##29848
11468     F2 FA 61 FC | 	wrlong	result1, objptr
1146c     3A 00 00 FF 
11470     98 E4 85 F1 | 	sub	objptr, ##29848
11474     F2 FA 01 F6 | 	mov	result1, objptr
11478     00 68 00 FF 
1147c     00 FA 45 F5 | 	or	result1, ##13631488
11480     3A 00 00 FF 
11484     94 E4 05 F1 | 	add	objptr, ##29844
11488     F2 FA 61 FC | 	wrlong	result1, objptr
1148c     3A 00 00 FF 
11490     94 E4 85 F1 | 	sub	objptr, ##29844
11494     F2 FA 01 F6 | 	mov	result1, objptr
11498     00 68 00 FF 
1149c     00 FA 45 F5 | 	or	result1, ##13631488
114a0     3A 00 00 FF 
114a4     9C E4 05 F1 | 	add	objptr, ##29852
114a8     F2 FA 61 FC | 	wrlong	result1, objptr
114ac     3A 00 00 FF 
114b0     9C E4 85 F1 | 	sub	objptr, ##29852
114b4     F2 FA 01 F6 | 	mov	result1, objptr
114b8     00 68 00 FF 
114bc     00 FA 45 F5 | 	or	result1, ##13631488
114c0     3A 00 00 FF 
114c4     A0 E4 05 F1 | 	add	objptr, ##29856
114c8     F2 FA 61 FC | 	wrlong	result1, objptr
114cc     3A 00 00 FF 
114d0     A0 E4 85 F1 | 	sub	objptr, ##29856
114d4     F2 FA 01 F6 | 	mov	result1, objptr
114d8     55 FA 25 F4 | 	bith	result1, #85
114dc     3A 00 00 FF 
114e0     80 E4 05 F1 | 	add	objptr, ##29824
114e4     F2 FA 61 FC | 	wrlong	result1, objptr
114e8     3A 00 00 FF 
114ec     80 E4 85 F1 | 	sub	objptr, ##29824
114f0     F2 FA 01 F6 | 	mov	result1, objptr
114f4     00 68 00 FF 
114f8     00 FA 45 F5 | 	or	result1, ##13631488
114fc     3A 00 00 FF 
11500     A4 E4 05 F1 | 	add	objptr, ##29860
11504     F2 FA 61 FC | 	wrlong	result1, objptr
11508     3A 00 00 FF 
1150c     A4 E4 85 F1 | 	sub	objptr, ##29860
11510     F2 FA 01 F6 | 	mov	result1, objptr
11514     00 68 00 FF 
11518     00 FA 45 F5 | 	or	result1, ##13631488
1151c     3A 00 00 FF 
11520     A8 E4 05 F1 | 	add	objptr, ##29864
11524     F2 FA 61 FC | 	wrlong	result1, objptr
11528     3A 00 00 FF 
1152c     A8 E4 85 F1 | 	sub	objptr, ##29864
11530     F2 FA 01 F6 | 	mov	result1, objptr
11534     00 68 00 FF 
11538     00 FA 45 F5 | 	or	result1, ##13631488
1153c     3A 00 00 FF 
11540     AC E4 05 F1 | 	add	objptr, ##29868
11544     F2 FA 61 FC | 	wrlong	result1, objptr
11548     3A 00 00 FF 
1154c     AC E4 85 F1 | 	sub	objptr, ##29868
11550     F2 FA 01 F6 | 	mov	result1, objptr
11554     74 FA 25 F4 | 	bith	result1, #116
11558     3A 00 00 FF 
1155c     24 E5 05 F1 | 	add	objptr, ##29988
11560     F2 FA 61 FC | 	wrlong	result1, objptr
11564     3A 00 00 FF 
11568     24 E5 85 F1 | 	sub	objptr, ##29988
1156c     F2 FA 01 F6 | 	mov	result1, objptr
11570     18 FA 25 F4 | 	bith	result1, #24
11574     3A 00 00 FF 
11578     28 E5 05 F1 | 	add	objptr, ##29992
1157c     F2 FA 61 FC | 	wrlong	result1, objptr
11580     3A 00 00 FF 
11584     28 E5 85 F1 | 	sub	objptr, ##29992
11588     F2 FA 01 F6 | 	mov	result1, objptr
1158c     00 88 00 FF 
11590     00 FA 45 F5 | 	or	result1, ##17825792
11594     3A 00 00 FF 
11598     2C E5 05 F1 | 	add	objptr, ##29996
1159c     F2 FA 61 FC | 	wrlong	result1, objptr
115a0     3A 00 00 FF 
115a4     2C E5 85 F1 | 	sub	objptr, ##29996
115a8     F2 FA 01 F6 | 	mov	result1, objptr
115ac     00 90 00 FF 
115b0     00 FA 45 F5 | 	or	result1, ##18874368
115b4     3A 00 00 FF 
115b8     30 E5 05 F1 | 	add	objptr, ##30000
115bc     F2 FA 61 FC | 	wrlong	result1, objptr
115c0     3A 00 00 FF 
115c4     30 E5 85 F1 | 	sub	objptr, ##30000
115c8     F2 FA 01 F6 | 	mov	result1, objptr
115cc     00 98 00 FF 
115d0     00 FA 45 F5 | 	or	result1, ##19922944
115d4     3A 00 00 FF 
115d8     34 E5 05 F1 | 	add	objptr, ##30004
115dc     F2 FA 61 FC | 	wrlong	result1, objptr
115e0     3A 00 00 FF 
115e4     34 E5 85 F1 | 	sub	objptr, ##30004
115e8     F2 FA 01 F6 | 	mov	result1, objptr
115ec     00 A0 00 FF 
115f0     00 FA 45 F5 | 	or	result1, ##20971520
115f4     3A 00 00 FF 
115f8     38 E5 05 F1 | 	add	objptr, ##30008
115fc     F2 FA 61 FC | 	wrlong	result1, objptr
11600     3A 00 00 FF 
11604     38 E5 85 F1 | 	sub	objptr, ##30008
11608     F2 FA 01 F6 | 	mov	result1, objptr
1160c     00 A8 00 FF 
11610     00 FA 45 F5 | 	or	result1, ##22020096
11614     3A 00 00 FF 
11618     3C E5 05 F1 | 	add	objptr, ##30012
1161c     F2 FA 61 FC | 	wrlong	result1, objptr
11620     3A 00 00 FF 
11624     3C E5 85 F1 | 	sub	objptr, ##30012
11628     F2 FA 01 F6 | 	mov	result1, objptr
1162c     00 B0 00 FF 
11630     00 FA 45 F5 | 	or	result1, ##23068672
11634     3A 00 00 FF 
11638     40 E5 05 F1 | 	add	objptr, ##30016
1163c     F2 FA 61 FC | 	wrlong	result1, objptr
11640     3A 00 00 FF 
11644     40 E5 85 F1 | 	sub	objptr, ##30016
11648     F2 FA 01 F6 | 	mov	result1, objptr
1164c     00 B8 00 FF 
11650     00 FA 45 F5 | 	or	result1, ##24117248
11654     3A 00 00 FF 
11658     44 E5 05 F1 | 	add	objptr, ##30020
1165c     F2 FA 61 FC | 	wrlong	result1, objptr
11660     3A 00 00 FF 
11664     44 E5 85 F1 | 	sub	objptr, ##30020
11668     F2 FA 01 F6 | 	mov	result1, objptr
1166c     37 FA 25 F4 | 	bith	result1, #55
11670     3A 00 00 FF 
11674     48 E5 05 F1 | 	add	objptr, ##30024
11678     F2 FA 61 FC | 	wrlong	result1, objptr
1167c     3A 00 00 FF 
11680     48 E5 85 F1 | 	sub	objptr, ##30024
11684     F2 FA 01 F6 | 	mov	result1, objptr
11688     00 C8 00 FF 
1168c     00 FA 45 F5 | 	or	result1, ##26214400
11690     3A 00 00 FF 
11694     4C E5 05 F1 | 	add	objptr, ##30028
11698     F2 FA 61 FC | 	wrlong	result1, objptr
1169c     3A 00 00 FF 
116a0     4C E5 85 F1 | 	sub	objptr, ##30028
116a4     F2 FA 01 F6 | 	mov	result1, objptr
116a8     00 D0 00 FF 
116ac     00 FA 45 F5 | 	or	result1, ##27262976
116b0     3A 00 00 FF 
116b4     50 E5 05 F1 | 	add	objptr, ##30032
116b8     F2 FA 61 FC | 	wrlong	result1, objptr
116bc     3A 00 00 FF 
116c0     50 E5 85 F1 | 	sub	objptr, ##30032
116c4     F2 FA 01 F6 | 	mov	result1, objptr
116c8     00 D8 00 FF 
116cc     00 FA 45 F5 | 	or	result1, ##28311552
116d0     3A 00 00 FF 
116d4     54 E5 05 F1 | 	add	objptr, ##30036
116d8     F2 FA 61 FC | 	wrlong	result1, objptr
116dc     3A 00 00 FF 
116e0     54 E5 85 F1 | 	sub	objptr, ##30036
116e4     F2 FA 01 F6 | 	mov	result1, objptr
116e8     56 FA 25 F4 | 	bith	result1, #86
116ec     3A 00 00 FF 
116f0     58 E5 05 F1 | 	add	objptr, ##30040
116f4     F2 FA 61 FC | 	wrlong	result1, objptr
116f8     3A 00 00 FF 
116fc     58 E5 85 F1 | 	sub	objptr, ##30040
11700     F2 FA 01 F6 | 	mov	result1, objptr
11704     00 E8 00 FF 
11708     00 FA 45 F5 | 	or	result1, ##30408704
1170c     3C 00 00 FF 
11710     20 E4 05 F1 | 	add	objptr, ##30752
11714     F2 FA 61 FC | 	wrlong	result1, objptr
11718     3C 00 00 FF 
1171c     20 E4 85 F1 | 	sub	objptr, ##30752
11720     F2 FA 01 F6 | 	mov	result1, objptr
11724     75 FA 25 F4 | 	bith	result1, #117
11728     3A 00 00 FF 
1172c     5C E5 05 F1 | 	add	objptr, ##30044
11730     F2 FA 61 FC | 	wrlong	result1, objptr
11734     3A 00 00 FF 
11738     5C E5 85 F1 | 	sub	objptr, ##30044
1173c     F2 FA 01 F6 | 	mov	result1, objptr
11740     94 FA 25 F4 | 	bith	result1, #148
11744     3A 00 00 FF 
11748     70 E5 05 F1 | 	add	objptr, ##30064
1174c     F2 FA 61 FC | 	wrlong	result1, objptr
11750     3A 00 00 FF 
11754     70 E5 85 F1 | 	sub	objptr, ##30064
11758     F2 FA 01 F6 | 	mov	result1, objptr
1175c     19 FA 25 F4 | 	bith	result1, #25
11760     3A 00 00 FF 
11764     60 E5 05 F1 | 	add	objptr, ##30048
11768     F2 FA 61 FC | 	wrlong	result1, objptr
1176c     3A 00 00 FF 
11770     60 E5 85 F1 | 	sub	objptr, ##30048
11774     F2 FA 01 F6 | 	mov	result1, objptr
11778     00 08 01 FF 
1177c     00 FA 45 F5 | 	or	result1, ##34603008
11780     3A 00 00 FF 
11784     7C E4 05 F1 | 	add	objptr, ##29820
11788     F2 FA 61 FC | 	wrlong	result1, objptr
1178c     3A 00 00 FF 
11790     7C E4 85 F1 | 	sub	objptr, ##29820
11794     F2 FA 01 F6 | 	mov	result1, objptr
11798     00 10 01 FF 
1179c     00 FA 45 F5 | 	or	result1, ##35651584
117a0     3A 00 00 FF 
117a4     64 E5 05 F1 | 	add	objptr, ##30052
117a8     F2 FA 61 FC | 	wrlong	result1, objptr
117ac     3A 00 00 FF 
117b0     64 E5 85 F1 | 	sub	objptr, ##30052
117b4     F2 FA 01 F6 | 	mov	result1, objptr
117b8     00 18 01 FF 
117bc     00 FA 45 F5 | 	or	result1, ##36700160
117c0     3A 00 00 FF 
117c4     68 E5 05 F1 | 	add	objptr, ##30056
117c8     F2 FA 61 FC | 	wrlong	result1, objptr
117cc     3A 00 00 FF 
117d0     68 E5 85 F1 | 	sub	objptr, ##30056
117d4     F2 FA 01 F6 | 	mov	result1, objptr
117d8     00 20 01 FF 
117dc     00 FA 45 F5 | 	or	result1, ##37748736
117e0     3A 00 00 FF 
117e4     6C E5 05 F1 | 	add	objptr, ##30060
117e8     F2 FA 61 FC | 	wrlong	result1, objptr
117ec     3A 00 00 FF 
117f0     6C E5 85 F1 | 	sub	objptr, ##30060
117f4     F2 FA 01 F6 | 	mov	result1, objptr
117f8     00 28 01 FF 
117fc     00 FA 45 F5 | 	or	result1, ##38797312
11800     3A 00 00 FF 
11804     78 E5 05 F1 | 	add	objptr, ##30072
11808     F2 FA 61 FC | 	wrlong	result1, objptr
1180c     3A 00 00 FF 
11810     78 E5 85 F1 | 	sub	objptr, ##30072
11814     F2 FA 01 F6 | 	mov	result1, objptr
11818     00 30 01 FF 
1181c     00 FA 45 F5 | 	or	result1, ##39845888
11820     3A 00 00 FF 
11824     7C E5 05 F1 | 	add	objptr, ##30076
11828     F2 FA 61 FC | 	wrlong	result1, objptr
1182c     3A 00 00 FF 
11830     7C E5 85 F1 | 	sub	objptr, ##30076
11834     F2 FA 01 F6 | 	mov	result1, objptr
11838     00 38 01 FF 
1183c     00 FA 45 F5 | 	or	result1, ##40894464
11840     3A 00 00 FF 
11844     80 E5 05 F1 | 	add	objptr, ##30080
11848     F2 FA 61 FC | 	wrlong	result1, objptr
1184c     3A 00 00 FF 
11850     80 E5 85 F1 | 	sub	objptr, ##30080
11854     F2 FA 01 F6 | 	mov	result1, objptr
11858     00 40 01 FF 
1185c     00 FA 45 F5 | 	or	result1, ##41943040
11860     3A 00 00 FF 
11864     84 E5 05 F1 | 	add	objptr, ##30084
11868     F2 FA 61 FC | 	wrlong	result1, objptr
1186c     3A 00 00 FF 
11870     84 E5 85 F1 | 	sub	objptr, ##30084
11874     F2 FA 01 F6 | 	mov	result1, objptr
11878     00 48 01 FF 
1187c     00 FA 45 F5 | 	or	result1, ##42991616
11880     3A 00 00 FF 
11884     8C E5 05 F1 | 	add	objptr, ##30092
11888     F2 FA 61 FC | 	wrlong	result1, objptr
1188c     3A 00 00 FF 
11890     8C E5 85 F1 | 	sub	objptr, ##30092
11894     F2 FA 01 F6 | 	mov	result1, objptr
11898     00 50 01 FF 
1189c     00 FA 45 F5 | 	or	result1, ##44040192
118a0     3A 00 00 FF 
118a4     90 E5 05 F1 | 	add	objptr, ##30096
118a8     F2 FA 61 FC | 	wrlong	result1, objptr
118ac     3A 00 00 FF 
118b0     90 E5 85 F1 | 	sub	objptr, ##30096
118b4     F2 FA 01 F6 | 	mov	result1, objptr
118b8     00 58 01 FF 
118bc     00 FA 45 F5 | 	or	result1, ##45088768
118c0     3A 00 00 FF 
118c4     90 E4 05 F1 | 	add	objptr, ##29840
118c8     F2 FA 61 FC | 	wrlong	result1, objptr
118cc     3A 00 00 FF 
118d0     90 E4 85 F1 | 	sub	objptr, ##29840
118d4     F2 FA 01 F6 | 	mov	result1, objptr
118d8     00 60 01 FF 
118dc     00 FA 45 F5 | 	or	result1, ##46137344
118e0     3A 00 00 FF 
118e4     C0 E4 05 F1 | 	add	objptr, ##29888
118e8     F2 FA 61 FC | 	wrlong	result1, objptr
118ec     3A 00 00 FF 
118f0     C0 E4 85 F1 | 	sub	objptr, ##29888
118f4     F2 FA 01 F6 | 	mov	result1, objptr
118f8     00 68 01 FF 
118fc     00 FA 45 F5 | 	or	result1, ##47185920
11900     3A 00 00 FF 
11904     BC E4 05 F1 | 	add	objptr, ##29884
11908     F2 FA 61 FC | 	wrlong	result1, objptr
1190c     3A 00 00 FF 
11910     BC E4 85 F1 | 	sub	objptr, ##29884
11914     F2 FA 01 F6 | 	mov	result1, objptr
11918     00 70 01 FF 
1191c     00 FA 45 F5 | 	or	result1, ##48234496
11920     3A 00 00 FF 
11924     60 E4 05 F1 | 	add	objptr, ##29792
11928     F2 FA 61 FC | 	wrlong	result1, objptr
1192c     3A 00 00 FF 
11930     60 E4 85 F1 | 	sub	objptr, ##29792
11934     F2 FA 01 F6 | 	mov	result1, objptr
11938     00 78 01 FF 
1193c     00 FA 45 F5 | 	or	result1, ##49283072
11940     3A 00 00 FF 
11944     64 E4 05 F1 | 	add	objptr, ##29796
11948     F2 FA 61 FC | 	wrlong	result1, objptr
1194c     3A 00 00 FF 
11950     64 E4 85 F1 | 	sub	objptr, ##29796
11954     F2 FA 01 F6 | 	mov	result1, objptr
11958     38 FA 25 F4 | 	bith	result1, #56
1195c     3A 00 00 FF 
11960     CC E4 05 F1 | 	add	objptr, ##29900
11964     F2 FA 61 FC | 	wrlong	result1, objptr
11968     3A 00 00 FF 
1196c     CC E4 85 F1 | 	sub	objptr, ##29900
11970     F2 FA 01 F6 | 	mov	result1, objptr
11974     00 88 01 FF 
11978     00 FA 45 F5 | 	or	result1, ##51380224
1197c     3A 00 00 FF 
11980     74 E5 05 F1 | 	add	objptr, ##30068
11984     F2 FA 61 FC | 	wrlong	result1, objptr
11988     3A 00 00 FF 
1198c     74 E5 85 F1 | 	sub	objptr, ##30068
11990     F2 FA 01 F6 | 	mov	result1, objptr
11994     00 90 01 FF 
11998     00 FA 45 F5 | 	or	result1, ##52428800
1199c     3A 00 00 FF 
119a0     88 E5 05 F1 | 	add	objptr, ##30088
119a4     F2 FA 61 FC | 	wrlong	result1, objptr
119a8     3A 00 00 FF 
119ac     88 E5 85 F1 | 	sub	objptr, ##30088
119b0     F2 FA 01 F6 | 	mov	result1, objptr
119b4     00 98 01 FF 
119b8     00 FA 45 F5 | 	or	result1, ##53477376
119bc     3A 00 00 FF 
119c0     94 E5 05 F1 | 	add	objptr, ##30100
119c4     F2 FA 61 FC | 	wrlong	result1, objptr
119c8     3A 00 00 FF 
119cc     94 E5 85 F1 | 	sub	objptr, ##30100
119d0     F2 FA 01 F6 | 	mov	result1, objptr
119d4     00 A0 01 FF 
119d8     00 FA 45 F5 | 	or	result1, ##54525952
119dc     3A 00 00 FF 
119e0     98 E5 05 F1 | 	add	objptr, ##30104
119e4     F2 FA 61 FC | 	wrlong	result1, objptr
119e8     3A 00 00 FF 
119ec     98 E5 85 F1 | 	sub	objptr, ##30104
119f0     F2 FA 01 F6 | 	mov	result1, objptr
119f4     00 A8 01 FF 
119f8     00 FA 45 F5 | 	or	result1, ##55574528
119fc     3A 00 00 FF 
11a00     9C E5 05 F1 | 	add	objptr, ##30108
11a04     F2 FA 61 FC | 	wrlong	result1, objptr
11a08     3A 00 00 FF 
11a0c     9C E5 85 F1 | 	sub	objptr, ##30108
11a10     F2 FA 01 F6 | 	mov	result1, objptr
11a14     00 B0 01 FF 
11a18     00 FA 45 F5 | 	or	result1, ##56623104
11a1c     3A 00 00 FF 
11a20     A0 E5 05 F1 | 	add	objptr, ##30112
11a24     F2 FA 61 FC | 	wrlong	result1, objptr
11a28     3A 00 00 FF 
11a2c     A0 E5 85 F1 | 	sub	objptr, ##30112
11a30     F2 FA 01 F6 | 	mov	result1, objptr
11a34     00 B8 01 FF 
11a38     00 FA 45 F5 | 	or	result1, ##57671680
11a3c     3A 00 00 FF 
11a40     A4 E5 05 F1 | 	add	objptr, ##30116
11a44     F2 FA 61 FC | 	wrlong	result1, objptr
11a48     3A 00 00 FF 
11a4c     A4 E5 85 F1 | 	sub	objptr, ##30116
11a50     F2 FA 01 F6 | 	mov	result1, objptr
11a54     57 FA 25 F4 | 	bith	result1, #87
11a58     3A 00 00 FF 
11a5c     A8 E5 05 F1 | 	add	objptr, ##30120
11a60     F2 FA 61 FC | 	wrlong	result1, objptr
11a64     3A 00 00 FF 
11a68     A8 E5 85 F1 | 	sub	objptr, ##30120
11a6c     F2 FA 01 F6 | 	mov	result1, objptr
11a70     94 FA 25 F4 | 	bith	result1, #148
11a74     3A 00 00 FF 
11a78     70 E5 05 F1 | 	add	objptr, ##30064
11a7c     F2 FA 61 FC | 	wrlong	result1, objptr
11a80     3A 00 00 FF 
11a84     70 E5 85 F1 | 	sub	objptr, ##30064
11a88     F2 FA 01 F6 | 	mov	result1, objptr
11a8c     00 C8 01 FF 
11a90     00 FA 45 F5 | 	or	result1, ##59768832
11a94     3A 00 00 FF 
11a98     B0 E5 05 F1 | 	add	objptr, ##30128
11a9c     F2 FA 61 FC | 	wrlong	result1, objptr
11aa0     3A 00 00 FF 
11aa4     B0 E5 85 F1 | 	sub	objptr, ##30128
11aa8     F2 FA 01 F6 | 	mov	result1, objptr
11aac     00 D0 01 FF 
11ab0     00 FA 45 F5 | 	or	result1, ##60817408
11ab4     3A 00 00 FF 
11ab8     AC E5 05 F1 | 	add	objptr, ##30124
11abc     F2 FA 61 FC | 	wrlong	result1, objptr
11ac0     3A 00 00 FF 
11ac4     AC E5 85 F1 | 	sub	objptr, ##30124
11ac8     F2 FA 01 F6 | 	mov	result1, objptr
11acc     00 D8 01 FF 
11ad0     00 FA 45 F5 | 	or	result1, ##61865984
11ad4     3A 00 00 FF 
11ad8     C4 E5 05 F1 | 	add	objptr, ##30148
11adc     F2 FA 61 FC | 	wrlong	result1, objptr
11ae0     3A 00 00 FF 
11ae4     C4 E5 85 F1 | 	sub	objptr, ##30148
11ae8     F2 FA 01 F6 | 	mov	result1, objptr
11aec     76 FA 25 F4 | 	bith	result1, #118
11af0     3A 00 00 FF 
11af4     C8 E5 05 F1 | 	add	objptr, ##30152
11af8     F2 FA 61 FC | 	wrlong	result1, objptr
11afc     3A 00 00 FF 
11b00     C8 E5 85 F1 | 	sub	objptr, ##30152
11b04     F2 FA 01 F6 | 	mov	result1, objptr
11b08     00 E8 01 FF 
11b0c     00 FA 45 F5 | 	or	result1, ##63963136
11b10     3A 00 00 FF 
11b14     B4 E5 05 F1 | 	add	objptr, ##30132
11b18     F2 FA 61 FC | 	wrlong	result1, objptr
11b1c     3A 00 00 FF 
11b20     B4 E5 85 F1 | 	sub	objptr, ##30132
11b24     F2 FA 01 F6 | 	mov	result1, objptr
11b28     95 FA 25 F4 | 	bith	result1, #149
11b2c     3A 00 00 FF 
11b30     B8 E5 05 F1 | 	add	objptr, ##30136
11b34     F2 FA 61 FC | 	wrlong	result1, objptr
11b38     3A 00 00 FF 
11b3c     B8 E5 85 F1 | 	sub	objptr, ##30136
11b40     F2 FA 01 F6 | 	mov	result1, objptr
11b44     B4 FA 25 F4 | 	bith	result1, #180
11b48     3A 00 00 FF 
11b4c     BC E5 05 F1 | 	add	objptr, ##30140
11b50     F2 FA 61 FC | 	wrlong	result1, objptr
11b54     3A 00 00 FF 
11b58     BC E5 85 F1 | 	sub	objptr, ##30140
11b5c     F2 FA 01 F6 | 	mov	result1, objptr
11b60     1A FA 25 F4 | 	bith	result1, #26
11b64     3A 00 00 FF 
11b68     C0 E5 05 F1 | 	add	objptr, ##30144
11b6c     F2 FA 61 FC | 	wrlong	result1, objptr
11b70     3A 00 00 FF 
11b74     C0 E5 85 F1 | 	sub	objptr, ##30144
11b78     F2 FA 01 F6 | 	mov	result1, objptr
11b7c     00 08 02 FF 
11b80     00 FA 45 F5 | 	or	result1, ##68157440
11b84     3A 00 00 FF 
11b88     D0 E5 05 F1 | 	add	objptr, ##30160
11b8c     F2 FA 61 FC | 	wrlong	result1, objptr
11b90     3A 00 00 FF 
11b94     D0 E5 85 F1 | 	sub	objptr, ##30160
11b98     F2 FA 01 F6 | 	mov	result1, objptr
11b9c     00 10 02 FF 
11ba0     00 FA 45 F5 | 	or	result1, ##69206016
11ba4     3A 00 00 FF 
11ba8     CC E5 05 F1 | 	add	objptr, ##30156
11bac     F2 FA 61 FC | 	wrlong	result1, objptr
11bb0     3A 00 00 FF 
11bb4     CC E5 85 F1 | 	sub	objptr, ##30156
11bb8     F2 FA 01 F6 | 	mov	result1, objptr
11bbc     00 18 02 FF 
11bc0     00 FA 45 F5 | 	or	result1, ##70254592
11bc4     3A 00 00 FF 
11bc8     DC E5 05 F1 | 	add	objptr, ##30172
11bcc     F2 FA 61 FC | 	wrlong	result1, objptr
11bd0     3A 00 00 FF 
11bd4     DC E5 85 F1 | 	sub	objptr, ##30172
11bd8     F2 FA 01 F6 | 	mov	result1, objptr
11bdc     00 20 02 FF 
11be0     00 FA 45 F5 | 	or	result1, ##71303168
11be4     3A 00 00 FF 
11be8     D8 E5 05 F1 | 	add	objptr, ##30168
11bec     F2 FA 61 FC | 	wrlong	result1, objptr
11bf0     3A 00 00 FF 
11bf4     D8 E5 85 F1 | 	sub	objptr, ##30168
11bf8     F2 FA 01 F6 | 	mov	result1, objptr
11bfc     00 28 02 FF 
11c00     00 FA 45 F5 | 	or	result1, ##72351744
11c04     3A 00 00 FF 
11c08     D4 E5 05 F1 | 	add	objptr, ##30164
11c0c     F2 FA 61 FC | 	wrlong	result1, objptr
11c10     3A 00 00 FF 
11c14     D4 E5 85 F1 | 	sub	objptr, ##30164
11c18     F2 FA 01 F6 | 	mov	result1, objptr
11c1c     00 30 02 FF 
11c20     00 FA 45 F5 | 	or	result1, ##73400320
11c24     3A 00 00 FF 
11c28     E0 E5 05 F1 | 	add	objptr, ##30176
11c2c     F2 FA 61 FC | 	wrlong	result1, objptr
11c30     3A 00 00 FF 
11c34     E0 E5 85 F1 | 	sub	objptr, ##30176
11c38     F2 FA 01 F6 | 	mov	result1, objptr
11c3c     00 38 02 FF 
11c40     00 FA 45 F5 | 	or	result1, ##74448896
11c44     3A 00 00 FF 
11c48     E4 E5 05 F1 | 	add	objptr, ##30180
11c4c     F2 FA 61 FC | 	wrlong	result1, objptr
11c50     3A 00 00 FF 
11c54     E4 E5 85 F1 | 	sub	objptr, ##30180
11c58     F2 FA 01 F6 | 	mov	result1, objptr
11c5c     00 40 02 FF 
11c60     00 FA 45 F5 | 	or	result1, ##75497472
11c64     3A 00 00 FF 
11c68     78 E4 05 F1 | 	add	objptr, ##29816
11c6c     F2 FA 61 FC | 	wrlong	result1, objptr
11c70     3A 00 00 FF 
11c74     78 E4 85 F1 | 	sub	objptr, ##29816
11c78     F2 FA 01 F6 | 	mov	result1, objptr
11c7c     00 48 02 FF 
11c80     00 FA 45 F5 | 	or	result1, ##76546048
11c84     3A 00 00 FF 
11c88     E8 E5 05 F1 | 	add	objptr, ##30184
11c8c     F2 FA 61 FC | 	wrlong	result1, objptr
11c90     3A 00 00 FF 
11c94     E8 E5 85 F1 | 	sub	objptr, ##30184
11c98                 | _init_commands_ret
11c98     2D 00 64 FD | 	ret
11c9c                 | 
11c9c                 | ' 
11c9c                 | ' ''--------------------------------Error strings -------------------------------------
11c9c                 | ' 
11c9c                 | ' sub init_error_strings
11c9c                 | _init_error_strings
11c9c     26 01 00 FF 
11ca0     21 00 06 F6 | 	mov	_var01, ##@LR__4352
11ca4     3C 00 00 FF 
11ca8     40 E4 05 F1 | 	add	objptr, ##30784
11cac     F2 00 62 FC | 	wrlong	_var01, objptr
11cb0     26 01 00 FF 
11cb4     22 00 06 F6 | 	mov	_var01, ##@LR__4353
11cb8     04 E4 05 F1 | 	add	objptr, #4
11cbc     F2 00 62 FC | 	wrlong	_var01, objptr
11cc0     26 01 00 FF 
11cc4     47 00 06 F6 | 	mov	_var01, ##@LR__4354
11cc8     04 E4 05 F1 | 	add	objptr, #4
11ccc     F2 00 62 FC | 	wrlong	_var01, objptr
11cd0     26 01 00 FF 
11cd4     68 00 06 F6 | 	mov	_var01, ##@LR__4355
11cd8     04 E4 05 F1 | 	add	objptr, #4
11cdc     F2 00 62 FC | 	wrlong	_var01, objptr
11ce0     26 01 00 FF 
11ce4     82 00 06 F6 | 	mov	_var01, ##@LR__4356
11ce8     04 E4 05 F1 | 	add	objptr, #4
11cec     F2 00 62 FC | 	wrlong	_var01, objptr
11cf0     26 01 00 FF 
11cf4     9E 00 06 F6 | 	mov	_var01, ##@LR__4357
11cf8     04 E4 05 F1 | 	add	objptr, #4
11cfc     F2 00 62 FC | 	wrlong	_var01, objptr
11d00     26 01 00 FF 
11d04     C0 00 06 F6 | 	mov	_var01, ##@LR__4358
11d08     04 E4 05 F1 | 	add	objptr, #4
11d0c     F2 00 62 FC | 	wrlong	_var01, objptr
11d10     26 01 00 FF 
11d14     EE 00 06 F6 | 	mov	_var01, ##@LR__4359
11d18     04 E4 05 F1 | 	add	objptr, #4
11d1c     F2 00 62 FC | 	wrlong	_var01, objptr
11d20     26 01 00 FF 
11d24     19 01 06 F6 | 	mov	_var01, ##@LR__4360
11d28     04 E4 05 F1 | 	add	objptr, #4
11d2c     F2 00 62 FC | 	wrlong	_var01, objptr
11d30     26 01 00 FF 
11d34     32 01 06 F6 | 	mov	_var01, ##@LR__4361
11d38     04 E4 05 F1 | 	add	objptr, #4
11d3c     F2 00 62 FC | 	wrlong	_var01, objptr
11d40     26 01 00 FF 
11d44     53 01 06 F6 | 	mov	_var01, ##@LR__4362
11d48     04 E4 05 F1 | 	add	objptr, #4
11d4c     F2 00 62 FC | 	wrlong	_var01, objptr
11d50     26 01 00 FF 
11d54     6A 01 06 F6 | 	mov	_var01, ##@LR__4363
11d58     04 E4 05 F1 | 	add	objptr, #4
11d5c     F2 00 62 FC | 	wrlong	_var01, objptr
11d60     26 01 00 FF 
11d64     88 01 06 F6 | 	mov	_var01, ##@LR__4364
11d68     04 E4 05 F1 | 	add	objptr, #4
11d6c     F2 00 62 FC | 	wrlong	_var01, objptr
11d70     26 01 00 FF 
11d74     AC 01 06 F6 | 	mov	_var01, ##@LR__4365
11d78     04 E4 05 F1 | 	add	objptr, #4
11d7c     F2 00 62 FC | 	wrlong	_var01, objptr
11d80     26 01 00 FF 
11d84     D3 01 06 F6 | 	mov	_var01, ##@LR__4366
11d88     04 E4 05 F1 | 	add	objptr, #4
11d8c     F2 00 62 FC | 	wrlong	_var01, objptr
11d90     26 01 00 FF 
11d94     EF 01 06 F6 | 	mov	_var01, ##@LR__4367
11d98     04 E4 05 F1 | 	add	objptr, #4
11d9c     F2 00 62 FC | 	wrlong	_var01, objptr
11da0     27 01 00 FF 
11da4     00 00 06 F6 | 	mov	_var01, ##@LR__4368
11da8     04 E4 05 F1 | 	add	objptr, #4
11dac     F2 00 62 FC | 	wrlong	_var01, objptr
11db0     27 01 00 FF 
11db4     10 00 06 F6 | 	mov	_var01, ##@LR__4369
11db8     04 E4 05 F1 | 	add	objptr, #4
11dbc     F2 00 62 FC | 	wrlong	_var01, objptr
11dc0     27 01 00 FF 
11dc4     2B 00 06 F6 | 	mov	_var01, ##@LR__4370
11dc8     04 E4 05 F1 | 	add	objptr, #4
11dcc     F2 00 62 FC | 	wrlong	_var01, objptr
11dd0     27 01 00 FF 
11dd4     3D 00 06 F6 | 	mov	_var01, ##@LR__4371
11dd8     04 E4 05 F1 | 	add	objptr, #4
11ddc     F2 00 62 FC | 	wrlong	_var01, objptr
11de0     27 01 00 FF 
11de4     55 00 06 F6 | 	mov	_var01, ##@LR__4372
11de8     04 E4 05 F1 | 	add	objptr, #4
11dec     F2 00 62 FC | 	wrlong	_var01, objptr
11df0     27 01 00 FF 
11df4     69 00 06 F6 | 	mov	_var01, ##@LR__4373
11df8     04 E4 05 F1 | 	add	objptr, #4
11dfc     F2 00 62 FC | 	wrlong	_var01, objptr
11e00     27 01 00 FF 
11e04     79 00 06 F6 | 	mov	_var01, ##@LR__4374
11e08     04 E4 05 F1 | 	add	objptr, #4
11e0c     F2 00 62 FC | 	wrlong	_var01, objptr
11e10     27 01 00 FF 
11e14     96 00 06 F6 | 	mov	_var01, ##@LR__4375
11e18     04 E4 05 F1 | 	add	objptr, #4
11e1c     F2 00 62 FC | 	wrlong	_var01, objptr
11e20     27 01 00 FF 
11e24     A7 00 06 F6 | 	mov	_var01, ##@LR__4376
11e28     04 E4 05 F1 | 	add	objptr, #4
11e2c     F2 00 62 FC | 	wrlong	_var01, objptr
11e30     27 01 00 FF 
11e34     B8 00 06 F6 | 	mov	_var01, ##@LR__4377
11e38     04 E4 05 F1 | 	add	objptr, #4
11e3c     F2 00 62 FC | 	wrlong	_var01, objptr
11e40     27 01 00 FF 
11e44     E3 00 06 F6 | 	mov	_var01, ##@LR__4378
11e48     04 E4 05 F1 | 	add	objptr, #4
11e4c     F2 00 62 FC | 	wrlong	_var01, objptr
11e50     27 01 00 FF 
11e54     FF 00 06 F6 | 	mov	_var01, ##@LR__4379
11e58     04 E4 05 F1 | 	add	objptr, #4
11e5c     F2 00 62 FC | 	wrlong	_var01, objptr
11e60     27 01 00 FF 
11e64     15 01 06 F6 | 	mov	_var01, ##@LR__4380
11e68     04 E4 05 F1 | 	add	objptr, #4
11e6c     F2 00 62 FC | 	wrlong	_var01, objptr
11e70     27 01 00 FF 
11e74     22 01 06 F6 | 	mov	_var01, ##@LR__4381
11e78     04 E4 05 F1 | 	add	objptr, #4
11e7c     F2 00 62 FC | 	wrlong	_var01, objptr
11e80     27 01 00 FF 
11e84     34 01 06 F6 | 	mov	_var01, ##@LR__4382
11e88     04 E4 05 F1 | 	add	objptr, #4
11e8c     F2 00 62 FC | 	wrlong	_var01, objptr
11e90     27 01 00 FF 
11e94     45 01 06 F6 | 	mov	_var01, ##@LR__4383
11e98     04 E4 05 F1 | 	add	objptr, #4
11e9c     F2 00 62 FC | 	wrlong	_var01, objptr
11ea0     27 01 00 FF 
11ea4     61 01 06 F6 | 	mov	_var01, ##@LR__4384
11ea8     04 E4 05 F1 | 	add	objptr, #4
11eac     F2 00 62 FC | 	wrlong	_var01, objptr
11eb0     27 01 00 FF 
11eb4     72 01 06 F6 | 	mov	_var01, ##@LR__4385
11eb8     04 E4 05 F1 | 	add	objptr, #4
11ebc     F2 00 62 FC | 	wrlong	_var01, objptr
11ec0     27 01 00 FF 
11ec4     81 01 06 F6 | 	mov	_var01, ##@LR__4386
11ec8     04 E4 05 F1 | 	add	objptr, #4
11ecc     F2 00 62 FC | 	wrlong	_var01, objptr
11ed0     27 01 00 FF 
11ed4     9C 01 06 F6 | 	mov	_var01, ##@LR__4387
11ed8     04 E4 05 F1 | 	add	objptr, #4
11edc     F2 00 62 FC | 	wrlong	_var01, objptr
11ee0     27 01 00 FF 
11ee4     D0 01 06 F6 | 	mov	_var01, ##@LR__4388
11ee8     04 E4 05 F1 | 	add	objptr, #4
11eec     F2 00 62 FC | 	wrlong	_var01, objptr
11ef0     27 01 00 FF 
11ef4     E9 01 06 F6 | 	mov	_var01, ##@LR__4389
11ef8     04 E4 05 F1 | 	add	objptr, #4
11efc     F2 00 62 FC | 	wrlong	_var01, objptr
11f00     28 01 00 FF 
11f04     05 00 06 F6 | 	mov	_var01, ##@LR__4390
11f08     04 E4 05 F1 | 	add	objptr, #4
11f0c     F2 00 62 FC | 	wrlong	_var01, objptr
11f10     28 01 00 FF 
11f14     23 00 06 F6 | 	mov	_var01, ##@LR__4391
11f18     04 E4 05 F1 | 	add	objptr, #4
11f1c     F2 00 62 FC | 	wrlong	_var01, objptr
11f20     28 01 00 FF 
11f24     3C 00 06 F6 | 	mov	_var01, ##@LR__4392
11f28     04 E4 05 F1 | 	add	objptr, #4
11f2c     F2 00 62 FC | 	wrlong	_var01, objptr
11f30     28 01 00 FF 
11f34     5B 00 06 F6 | 	mov	_var01, ##@LR__4393
11f38     04 E4 05 F1 | 	add	objptr, #4
11f3c     F2 00 62 FC | 	wrlong	_var01, objptr
11f40     28 01 00 FF 
11f44     6A 00 06 F6 | 	mov	_var01, ##@LR__4394
11f48     04 E4 05 F1 | 	add	objptr, #4
11f4c     F2 00 62 FC | 	wrlong	_var01, objptr
11f50     28 01 00 FF 
11f54     98 00 06 F6 | 	mov	_var01, ##@LR__4395
11f58     04 E4 05 F1 | 	add	objptr, #4
11f5c     F2 00 62 FC | 	wrlong	_var01, objptr
11f60     28 01 00 FF 
11f64     A6 00 06 F6 | 	mov	_var01, ##@LR__4396
11f68     04 E4 05 F1 | 	add	objptr, #4
11f6c     F2 00 62 FC | 	wrlong	_var01, objptr
11f70     28 01 00 FF 
11f74     BB 00 06 F6 | 	mov	_var01, ##@LR__4397
11f78     04 E4 05 F1 | 	add	objptr, #4
11f7c     F2 00 62 FC | 	wrlong	_var01, objptr
11f80     28 01 00 FF 
11f84     DF 00 06 F6 | 	mov	_var01, ##@LR__4398
11f88     04 E4 05 F1 | 	add	objptr, #4
11f8c     F2 00 62 FC | 	wrlong	_var01, objptr
11f90     28 01 00 FF 
11f94     F6 00 06 F6 | 	mov	_var01, ##@LR__4399
11f98     04 E4 05 F1 | 	add	objptr, #4
11f9c     F2 00 62 FC | 	wrlong	_var01, objptr
11fa0     28 01 00 FF 
11fa4     09 01 06 F6 | 	mov	_var01, ##@LR__4400
11fa8     04 E4 05 F1 | 	add	objptr, #4
11fac     F2 00 62 FC | 	wrlong	_var01, objptr
11fb0     3C 00 00 FF 
11fb4     00 E5 85 F1 | 	sub	objptr, ##30976
11fb8                 | _init_error_strings_ret
11fb8     2D 00 64 FD | 	ret
11fbc                 | 
11fbc                 | '         
11fbc                 | ' sub printerror(err as integer)
11fbc                 | _printerror
11fbc     01 4A 05 F6 | 	mov	COUNT_, #1
11fc0     A8 00 A0 FD | 	call	#pushregs_
11fc4     09 1F 02 F6 | 	mov	local01, arg01
11fc8     28 01 00 FF 
11fcc     20 13 06 F6 | 	mov	arg01, ##@LR__4401
11fd0     B8 24 B0 FD | 	call	#_hg010b_spin2_write
11fd4     0F 13 02 F6 | 	mov	arg01, local01
11fd8     B0 26 B0 FD | 	call	#_hg010b_spin2_inttostr
11fdc     FD 12 02 F6 | 	mov	arg01, result1
11fe0     A8 24 B0 FD | 	call	#_hg010b_spin2_write
11fe4     28 01 00 FF 
11fe8     27 13 06 F6 | 	mov	arg01, ##@LR__4402
11fec     9C 24 B0 FD | 	call	#_hg010b_spin2_write
11ff0     02 1E 66 F0 | 	shl	local01, #2
11ff4     3C 00 00 FF 
11ff8     40 E4 05 F1 | 	add	objptr, ##30784
11ffc     F2 1E 02 F1 | 	add	local01, objptr
12000     0F 13 02 FB | 	rdlong	arg01, local01
12004     3C 00 00 FF 
12008     40 E4 85 F1 | 	sub	objptr, ##30784
1200c                 | ' 
1200c                 | ' write(text)
1200c     7C 24 B0 FD | 	call	#_hg010b_spin2_write
12010                 | ' crlf
12010     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
12014     A7 F0 03 F6 | 	mov	ptra, fp
12018     B2 00 A0 FD | 	call	#popregs_
1201c                 | _printerror_ret
1201c     2D 00 64 FD | 	ret
12020                 | 
12020                 | ' 
12020                 | ' '' ------------------------------- Hardware start/stop/initialization 
12020                 | ' 
12020                 | ' sub startpsram
12020                 | _startpsram
12020     00 12 06 F6 | 	mov	arg01, #0
12024     0A 14 C6 F9 | 	decod	arg02, #10
12028     0B 16 06 F6 | 	mov	arg03, #11
1202c     07 18 06 F6 | 	mov	arg04, #7
12030     0B 00 00 FF 
12034     C0 E4 05 F1 | 	add	objptr, ##5824
12038     5C 27 B0 FD | 	call	#_psram_spin2_startx
1203c     22 00 00 FF 
12040     0C E5 05 F1 | 	add	objptr, ##17676
12044     F2 FA 61 FC | 	wrlong	result1, objptr
12048                 | '     return $7FF00 + cog*12
12048     0C E4 05 F1 | 	add	objptr, #12
1204c     FF 03 80 FF 
12050     F2 00 6A FC | 	wrlong	##524032, objptr
12054     2D 00 00 FF 
12058     D8 E5 85 F1 | 	sub	objptr, ##23512
1205c                 | _startpsram_ret
1205c     2D 00 64 FD | 	ret
12060                 | 
12060                 | ' 
12060                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
12060                 | _startvideo
12060     01 4A 05 F6 | 	mov	COUNT_, #1
12064     A8 00 A0 FD | 	call	#pushregs_
12068     2D 00 00 FF 
1206c     D8 E5 05 F1 | 	add	objptr, ##23512
12070     F2 18 02 FB | 	rdlong	arg04, objptr
12074     2D 00 00 FF 
12078     D8 E5 85 F1 | 	sub	objptr, ##23512
1207c     0A 13 02 F6 | 	mov	arg01, arg02
12080     0C 15 02 F6 | 	mov	arg02, arg04
12084     18 0F B0 FD | 	call	#_hg010b_spin2_start
12088     2D 00 00 FF 
1208c     C4 E5 05 F1 | 	add	objptr, ##23492
12090     F2 FA 61 FC | 	wrlong	result1, objptr
12094                 | ' 
12094                 | ' videocog=v.start(pin,mbox)
12094                 | ' 
12094                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
12094     00 1E 06 F6 | 	mov	local01, #0
12098     22 00 00 FF 
1209c     04 E5 85 F1 | 	sub	objptr, ##17668
120a0                 | LR__1480
120a0     0F 13 02 F6 | 	mov	arg01, local01
120a4     00 28 00 FF 
120a8     00 14 06 F6 | 	mov	arg02, ##5242880
120ac     40 2B B0 FD | 	call	#_psram_spin2_setQos
120b0     01 1E 06 F1 | 	add	local01, #1
120b4     08 1E 56 F2 | 	cmps	local01, #8 wc
120b8     E4 FF 9F CD |  if_b	jmp	#LR__1480
120bc     22 00 00 FF 
120c0     04 E5 05 F1 | 	add	objptr, ##17668
120c4     F2 12 02 FB | 	rdlong	arg01, objptr
120c8     7A 00 02 FF 
120cc     00 14 06 F6 | 	mov	arg02, ##67171328
120d0     22 00 00 FF 
120d4     04 E5 85 F1 | 	sub	objptr, ##17668
120d8     14 2B B0 FD | 	call	#_psram_spin2_setQos
120dc     0B 00 00 FF 
120e0     C0 E4 85 F1 | 	sub	objptr, ##5824
120e4                 | ' psram.setQoS(videocog, $0400f400) 
120e4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
120e4     F2 14 02 F6 | 	mov	arg02, objptr
120e8     00 50 02 FF 
120ec     00 14 46 F5 | 	or	arg02, ##77594624
120f0     00 16 06 F6 | 	mov	arg03, #0
120f4     00 18 06 F6 | 	mov	arg04, #0
120f8     00 12 06 F6 | 	mov	arg01, #0
120fc     58 3E B0 FD | 	call	#__system___basic_open
12100                 | ' return videocog
12100     2D 00 00 FF 
12104     C4 E5 05 F1 | 	add	objptr, ##23492
12108     F2 FA 01 FB | 	rdlong	result1, objptr
1210c     2D 00 00 FF 
12110     C4 E5 85 F1 | 	sub	objptr, ##23492
12114     A7 F0 03 F6 | 	mov	ptra, fp
12118     B2 00 A0 FD | 	call	#popregs_
1211c                 | _startvideo_ret
1211c     2D 00 64 FD | 	ret
12120                 | 
12120                 | ' 
12120                 | ' function pspeek(adr as ulong) as ubyte
12120                 | _pspeek
12120     00 4A 05 F6 | 	mov	COUNT_, #0
12124     A8 00 A0 FD | 	call	#pushregs_
12128     0C F0 07 F1 | 	add	ptra, #12
1212c     04 4E 05 F1 | 	add	fp, #4
12130     A7 12 62 FC | 	wrlong	arg01, fp
12134     04 4E 05 F1 | 	add	fp, #4
12138     A7 12 02 F6 | 	mov	arg01, fp
1213c     04 4E 85 F1 | 	sub	fp, #4
12140     A7 14 02 FB | 	rdlong	arg02, fp
12144     04 4E 85 F1 | 	sub	fp, #4
12148     01 16 06 F6 | 	mov	arg03, #1
1214c     0B 00 00 FF 
12150     C0 E4 05 F1 | 	add	objptr, ##5824
12154     6C 28 B0 FD | 	call	#_psram_spin2_read1
12158     0B 00 00 FF 
1215c     C0 E4 85 F1 | 	sub	objptr, ##5824
12160                 | ' psram.read1(varptr(res),adr,1)
12160                 | ' return res
12160     08 4E 05 F1 | 	add	fp, #8
12164     A7 FA C1 FA | 	rdbyte	result1, fp
12168     08 4E 85 F1 | 	sub	fp, #8
1216c     A7 F0 03 F6 | 	mov	ptra, fp
12170     B2 00 A0 FD | 	call	#popregs_
12174                 | _pspeek_ret
12174     2D 00 64 FD | 	ret
12178                 | 
12178                 | ' 
12178                 | ' function pslpeek(adr as ulong) as ulong
12178                 | _pslpeek
12178     00 4A 05 F6 | 	mov	COUNT_, #0
1217c     A8 00 A0 FD | 	call	#pushregs_
12180     0C F0 07 F1 | 	add	ptra, #12
12184     04 4E 05 F1 | 	add	fp, #4
12188     A7 12 62 FC | 	wrlong	arg01, fp
1218c     04 4E 05 F1 | 	add	fp, #4
12190     A7 12 02 F6 | 	mov	arg01, fp
12194     04 4E 85 F1 | 	sub	fp, #4
12198     A7 14 02 FB | 	rdlong	arg02, fp
1219c     04 4E 85 F1 | 	sub	fp, #4
121a0     04 16 06 F6 | 	mov	arg03, #4
121a4     0B 00 00 FF 
121a8     C0 E4 05 F1 | 	add	objptr, ##5824
121ac     14 28 B0 FD | 	call	#_psram_spin2_read1
121b0     0B 00 00 FF 
121b4     C0 E4 85 F1 | 	sub	objptr, ##5824
121b8                 | ' psram.read1(varptr(res),adr,4)
121b8                 | ' return res
121b8     08 4E 05 F1 | 	add	fp, #8
121bc     A7 FA 01 FB | 	rdlong	result1, fp
121c0     08 4E 85 F1 | 	sub	fp, #8
121c4     A7 F0 03 F6 | 	mov	ptra, fp
121c8     B2 00 A0 FD | 	call	#popregs_
121cc                 | _pslpeek_ret
121cc     2D 00 64 FD | 	ret
121d0                 | 
121d0                 | ' 
121d0                 | ' '' ------------------------------- USB keyboard scan to char translator
121d0                 | ' 
121d0                 | ' function scantochar(key)
121d0                 | _scantochar
121d0                 | ' 
121d0                 | ' select case (key shr 8) and 255
121d0     09 01 02 F6 | 	mov	_var01, arg01
121d4     08 00 C6 F0 | 	sar	_var01, #8
121d8     FF 00 0E F5 | 	and	_var01, #255 wz
121dc     24 00 90 AD |  if_e	jmp	#LR__1490
121e0     02 00 0E F2 | 	cmp	_var01, #2 wz
121e4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
121e8     30 00 90 AD |  if_e	jmp	#LR__1491
121ec     40 00 0E F2 | 	cmp	_var01, #64 wz
121f0     44 00 90 AD |  if_e	jmp	#LR__1492
121f4     42 00 0E F2 | 	cmp	_var01, #66 wz
121f8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
121fc     70 00 90 5D |  if_ne	jmp	#LR__1494
12200     50 00 90 FD | 	jmp	#LR__1493
12204                 | LR__1490
12204     09 FB 01 F6 | 	mov	result1, arg01
12208     7F FA 05 F5 | 	and	result1, #127
1220c     02 FA 65 F0 | 	shl	result1, #2
12210     F5 FA 01 F1 | 	add	result1, ptr__dat__
12214     FD FA C1 FA | 	rdbyte	result1, result1
12218     54 00 90 FD | 	jmp	#_scantochar_ret
1221c                 | LR__1491
1221c     09 FB 01 F6 | 	mov	result1, arg01
12220     7F FA 05 F5 | 	and	result1, #127
12224     02 FA 65 F0 | 	shl	result1, #2
12228     01 FA 05 F1 | 	add	result1, #1
1222c     F5 FA 01 F1 | 	add	result1, ptr__dat__
12230     FD FA C1 FA | 	rdbyte	result1, result1
12234     38 00 90 FD | 	jmp	#_scantochar_ret
12238                 | LR__1492
12238     09 FB 01 F6 | 	mov	result1, arg01
1223c     7F FA 05 F5 | 	and	result1, #127
12240     02 FA 65 F0 | 	shl	result1, #2
12244     02 FA 05 F1 | 	add	result1, #2
12248     F5 FA 01 F1 | 	add	result1, ptr__dat__
1224c     FD FA C1 FA | 	rdbyte	result1, result1
12250     1C 00 90 FD | 	jmp	#_scantochar_ret
12254                 | LR__1493
12254     09 FB 01 F6 | 	mov	result1, arg01
12258     7F FA 05 F5 | 	and	result1, #127
1225c     02 FA 65 F0 | 	shl	result1, #2
12260     03 FA 05 F1 | 	add	result1, #3
12264     F5 FA 01 F1 | 	add	result1, ptr__dat__
12268     FD FA C1 FA | 	rdbyte	result1, result1
1226c     00 00 90 FD | 	jmp	#_scantochar_ret
12270                 | LR__1494
12270                 | _scantochar_ret
12270     2D 00 64 FD | 	ret
12274                 | 
12274                 | _program
12274     0B 4A 05 F6 | 	mov	COUNT_, #11
12278     A8 00 A0 FD | 	call	#pushregs_
1227c     A0 FD BF FD | 	call	#_startpsram
12280     40 12 06 F6 | 	mov	arg01, #64
12284     00 14 06 F6 | 	mov	arg02, #0
12288     00 16 06 F6 | 	mov	arg03, #0
1228c     D0 FD BF FD | 	call	#_startvideo
12290     00 12 06 F6 | 	mov	arg01, #0
12294     00 14 06 F6 | 	mov	arg02, #0
12298     00 16 06 F6 | 	mov	arg03, #0
1229c     0B 00 00 FF 
122a0     C0 E4 05 F1 | 	add	objptr, ##5824
122a4     5C 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
122a8     FE 1C 02 F6 | 	mov	arg06, result2
122ac     22 00 00 FF 
122b0     00 E5 05 F1 | 	add	objptr, ##17664
122b4     F2 FA 61 FC | 	wrlong	result1, objptr
122b8     14 E4 05 F1 | 	add	objptr, #20
122bc     F2 1C 62 FC | 	wrlong	arg06, objptr
122c0     2D 00 00 FF 
122c4     D4 E5 85 F1 | 	sub	objptr, ##23508
122c8     32 12 06 F6 | 	mov	arg01, #50
122cc     D4 34 B0 FD | 	call	#__system___waitms
122d0     2D 00 00 FF 
122d4     D4 E5 05 F1 | 	add	objptr, ##23508
122d8     F2 12 02 FB | 	rdlong	arg01, objptr
122dc     2D 00 00 FF 
122e0     D4 E5 85 F1 | 	sub	objptr, ##23508
122e4     14 12 06 F1 | 	add	arg01, #20
122e8     20 00 80 FF 
122ec     09 01 58 FC | 	wrword	##16384, arg01
122f0     04 2A B0 FD | 	call	#_usbnew_spin2_start
122f4     2D 00 00 FF 
122f8     C8 E5 05 F1 | 	add	objptr, ##23496
122fc     F2 FA 61 FC | 	wrlong	result1, objptr
12300                 | '   mouse_limits[0] := xlim
12300     0F 00 00 FF 
12304     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
12308     01 00 80 FF 
1230c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
12310                 | '   mouse_limits[1] := ylim
12310     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
12314     01 00 80 FF 
12318     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
1231c     2D 00 00 FF 
12320     BB E4 85 F1 | 	sub	objptr, ##23227
12324     F2 12 02 F6 | 	mov	arg01, objptr
12328     0D E5 85 F1 | 	sub	objptr, #269
1232c     C4 12 06 F1 | 	add	arg01, #196
12330                 | '   mouse_outptr := ptr
12330     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
12334     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
12338     0F 00 00 FF 
1233c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
12340     07 00 00 FF 
12344     72 EB 05 F1 | 	add	ptr__dat__, ##3954
12348     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1234c     07 00 00 FF 
12350     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
12354     10 12 06 F6 | 	mov	arg01, #16
12358     3C 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1235c     10 12 06 F6 | 	mov	arg01, #16
12360     20 14 06 F6 | 	mov	arg02, #32
12364     20 16 06 F6 | 	mov	arg03, #32
12368     A0 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
1236c     09 12 C6 F9 | 	decod	arg01, #9
12370     20 15 06 F6 | 	mov	arg02, #288
12374     3C 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
12378     F2 1C 02 F6 | 	mov	arg06, objptr
1237c     50 00 00 FF 
12380     AC E5 05 F1 | 	add	objptr, ##41388
12384     F2 1A 02 F6 | 	mov	arg05, objptr
12388     0D 1D 62 FC | 	wrlong	arg06, arg05
1238c     04 1A 06 F1 | 	add	arg05, #4
12390     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
12394     EF 14 02 F6 | 	mov	arg02, entryptr__
12398     F2 1E 02 F6 | 	mov	local01, objptr
1239c     1E FA 05 F6 | 	mov	result1, #30
123a0     28 1E 62 FD | 	setq	local01
123a4     0A FB F1 FC | 	coginit	result1, arg02 wc
123a8     01 FA 65 C6 |  if_b	neg	result1, #1
123ac     04 E4 85 F1 | 	sub	objptr, #4
123b0     F2 FA 61 FC | 	wrlong	result1, objptr
123b4     01 00 00 FF 
123b8     90 E4 05 F1 | 	add	objptr, ##656
123bc     F2 00 68 FC | 	wrlong	#0, objptr
123c0     24 00 00 FF 
123c4     40 E4 85 F1 | 	sub	objptr, ##18496
123c8     F2 04 68 FC | 	wrlong	#2, objptr
123cc     04 E4 05 F1 | 	add	objptr, #4
123d0     F2 26 69 FC | 	wrlong	#147, objptr
123d4     04 E4 05 F1 | 	add	objptr, #4
123d8     F2 34 69 FC | 	wrlong	#154, objptr
123dc     04 E4 05 F1 | 	add	objptr, #4
123e0     F2 08 68 FC | 	wrlong	#4, objptr
123e4     04 E4 85 F1 | 	sub	objptr, #4
123e8     F2 1C 02 FB | 	rdlong	arg06, objptr
123ec     14 E4 85 F1 | 	sub	objptr, #20
123f0     F2 1C 62 FC | 	wrlong	arg06, objptr
123f4     04 E4 05 F1 | 	add	objptr, #4
123f8     F2 00 68 FC | 	wrlong	#0, objptr
123fc     04 E4 05 F1 | 	add	objptr, #4
12400     F2 00 68 FC | 	wrlong	#0, objptr
12404     22 00 00 FF 
12408     B0 E5 05 F1 | 	add	objptr, ##17840
1240c     F2 02 68 FC | 	wrlong	#1, objptr
12410     14 00 00 FF 
12414     7C E5 85 F1 | 	sub	objptr, ##10620
12418     F2 18 68 FC | 	wrlong	#12, objptr
1241c     3C 00 00 FF 
12420     28 E4 85 F1 | 	sub	objptr, ##30760
12424     98 EE BF FD | 	call	#_init_commands
12428     70 F8 BF FD | 	call	#_init_error_strings
1242c     3C 7A BF FD | 	call	#_do_new
12430     2E 00 00 FF 
12434     00 E4 05 F1 | 	add	objptr, ##23552
12438     F2 12 02 FB | 	rdlong	arg01, objptr
1243c     04 E4 85 F1 | 	sub	objptr, #4
12440     F2 14 02 FB | 	rdlong	arg02, objptr
12444     2D 00 00 FF 
12448     FC E5 85 F1 | 	sub	objptr, ##23548
1244c     80 1D B0 FD | 	call	#_hg010b_spin2_cls
12450     2E 00 00 FF 
12454     04 E4 05 F1 | 	add	objptr, ##23556
12458     F2 12 02 FB | 	rdlong	arg01, objptr
1245c     2E 00 00 FF 
12460     04 E4 85 F1 | 	sub	objptr, ##23556
12464     80 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
12468                 | ' 
12468                 | ' leading_spaces:=amount
12468     01 00 00 FF 
1246c     B2 E4 05 F1 | 	add	objptr, ##690
12470     F2 04 68 FC | 	wrlong	#2, objptr
12474     01 00 00 FF 
12478     B2 E4 85 F1 | 	sub	objptr, ##690
1247c     28 01 00 FF 
12480     2A 21 06 F6 | 	mov	local02, ##@LR__4403
12484     3D 12 06 F6 | 	mov	arg01, #61
12488     3C 14 06 F6 | 	mov	arg02, #60
1248c     3B 16 06 F6 | 	mov	arg03, #59
12490     3A 18 06 F6 | 	mov	arg04, #58
12494     64 76 B0 FD | 	call	#__system___vfs_open_sdcardx
12498     FD 14 02 F6 | 	mov	arg02, result1
1249c     10 13 02 F6 | 	mov	arg01, local02
124a0     D8 33 B0 FD | 	call	#__system___mount
124a4     28 01 00 FF 
124a8     2E 13 06 F6 | 	mov	arg01, ##@LR__4404
124ac     8C 36 B0 FD | 	call	#__system___chdir
124b0     28 01 00 FF 
124b4     36 21 06 F6 | 	mov	local02, ##@LR__4405
124b8     49 00 00 FF 
124bc     58 E4 05 F1 | 	add	objptr, ##37464
124c0     F2 20 62 FC | 	wrlong	local02, objptr
124c4     1B 00 00 FF 
124c8     60 E4 85 F1 | 	sub	objptr, ##13920
124cc     F2 12 02 FB | 	rdlong	arg01, objptr
124d0     2D 00 00 FF 
124d4     F8 E5 85 F1 | 	sub	objptr, ##23544
124d8     01 12 66 F0 | 	shl	arg01, #1
124dc     01 14 06 F6 | 	mov	arg02, #1
124e0     44 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
124e4                 | ' 
124e4                 | ' init_commands
124e4                 | ' init_error_strings
124e4                 | ' do_new
124e4                 | ' 
124e4                 | ' 
124e4                 | ' cls(ink, paper)
124e4                 | ' 'v.setfontfamily(4) 				' use ST Mono font
124e4                 | ' v.setfontfamily(font) 				' use ST Mono font
124e4                 | ' v.setleadingspaces(2)
124e4                 | ' mount "/sd", _vfs_open_sdcard()
124e4                 | ' chdir "/sd/bas"
124e4                 | ' 
124e4                 | ' currentdir$="/sd/bas"
124e4                 | ' 
124e4                 | ' position 2*editor_spaces,1 : print ver$
124e4     00 12 06 F6 | 	mov	arg01, #0
124e8     78 85 B0 FD | 	call	#__system___getiolock_0348
124ec     FD 12 02 F6 | 	mov	arg01, result1
124f0     BC 2F B0 FD | 	call	#__system___lockmem
124f4     09 00 00 FF 
124f8     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
124fc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
12500     09 00 00 FF 
12504     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
12508     00 12 06 F6 | 	mov	arg01, #0
1250c     00 16 06 F6 | 	mov	arg03, #0
12510     90 3C B0 FD | 	call	#__system___basic_print_string
12514     00 12 06 F6 | 	mov	arg01, #0
12518     0A 14 06 F6 | 	mov	arg02, #10
1251c     00 16 06 F6 | 	mov	arg03, #0
12520     28 3C B0 FD | 	call	#__system___basic_print_char
12524     00 12 06 F6 | 	mov	arg01, #0
12528     38 85 B0 FD | 	call	#__system___getiolock_0348
1252c     FD 00 68 FC | 	wrlong	#0, result1
12530     F2 12 02 FB | 	rdlong	arg01, objptr
12534     00 14 06 F6 | 	mov	arg02, #0
12538     0A 16 06 F6 | 	mov	arg03, #10
1253c     78 51 B0 FD | 	call	#__system__Number_S
12540     FD 12 02 F6 | 	mov	arg01, result1
12544     28 01 00 FF 
12548     3E 15 06 F6 | 	mov	arg02, ##@LR__4406
1254c     BC 2F B0 FD | 	call	#__system___string_concat
12550     FD 20 02 F6 | 	mov	local02, result1
12554     50 00 00 FF 
12558     A0 E5 05 F1 | 	add	objptr, ##41376
1255c     F2 20 62 FC | 	wrlong	local02, objptr
12560     50 00 00 FF 
12564     A0 E5 85 F1 | 	sub	objptr, ##41376
12568                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
12568     00 12 06 F6 | 	mov	arg01, #0
1256c     F4 84 B0 FD | 	call	#__system___getiolock_0348
12570     FD 12 02 F6 | 	mov	arg01, result1
12574     38 2F B0 FD | 	call	#__system___lockmem
12578     50 00 00 FF 
1257c     A0 E5 05 F1 | 	add	objptr, ##41376
12580     F2 14 02 FB | 	rdlong	arg02, objptr
12584     50 00 00 FF 
12588     A0 E5 85 F1 | 	sub	objptr, ##41376
1258c     00 12 06 F6 | 	mov	arg01, #0
12590     00 16 06 F6 | 	mov	arg03, #0
12594     0C 3C B0 FD | 	call	#__system___basic_print_string
12598     00 12 06 F6 | 	mov	arg01, #0
1259c     0A 14 06 F6 | 	mov	arg02, #10
125a0     00 16 06 F6 | 	mov	arg03, #0
125a4     A4 3B B0 FD | 	call	#__system___basic_print_char
125a8     00 12 06 F6 | 	mov	arg01, #0
125ac     B4 84 B0 FD | 	call	#__system___getiolock_0348
125b0     FD 00 68 FC | 	wrlong	#0, result1
125b4     2D 00 00 FF 
125b8     F8 E5 05 F1 | 	add	objptr, ##23544
125bc     F2 12 02 FB | 	rdlong	arg01, objptr
125c0     2D 00 00 FF 
125c4     F8 E5 85 F1 | 	sub	objptr, ##23544
125c8     01 12 66 F0 | 	shl	arg01, #1
125cc     04 14 06 F6 | 	mov	arg02, #4
125d0     54 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
125d4                 | ' position 2*editor_spaces,4 : print "Ready"
125d4     00 12 06 F6 | 	mov	arg01, #0
125d8     88 84 B0 FD | 	call	#__system___getiolock_0348
125dc     FD 12 02 F6 | 	mov	arg01, result1
125e0     CC 2E B0 FD | 	call	#__system___lockmem
125e4     28 01 00 FF 
125e8     50 15 06 F6 | 	mov	arg02, ##@LR__4407
125ec     00 12 06 F6 | 	mov	arg01, #0
125f0     00 16 06 F6 | 	mov	arg03, #0
125f4     AC 3B B0 FD | 	call	#__system___basic_print_string
125f8     FD 22 02 F6 | 	mov	local03, result1
125fc     00 12 06 F6 | 	mov	arg01, #0
12600     0A 14 06 F6 | 	mov	arg02, #10
12604     00 16 06 F6 | 	mov	arg03, #0
12608     40 3B B0 FD | 	call	#__system___basic_print_char
1260c     01 24 06 F6 | 	mov	local04, #1
12610     00 12 06 F6 | 	mov	arg01, #0
12614     4C 84 B0 FD | 	call	#__system___getiolock_0348
12618     FD 00 68 FC | 	wrlong	#0, result1
1261c     00 26 06 F6 | 	mov	local05, #0
12620                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
12620                 | ' 
12620                 | ' 
12620                 | ' '-------------------------------------------------------------------------------------------------------- 
12620                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
12620                 | ' '--------------------------------------------------------------------------------------------------------
12620                 | ' 
12620                 | ' do
12620                 | LR__1500
12620     01 12 06 F6 | 	mov	arg01, #1
12624     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
12628     28 27 B0 FD | 	call	#_usbnew_spin2_get_key
1262c     3C 00 00 FF 
12630     38 E4 05 F1 | 	add	objptr, ##30776
12634     F2 FA 61 FC | 	wrlong	result1, objptr
12638                 | '   return hkbd_led_rep
12638     13 00 00 FF 
1263c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
12640     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
12644     13 00 00 FF 
12648     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1264c     16 00 00 FF 
12650     08 E4 05 F1 | 	add	objptr, ##11272
12654     F2 FA 61 FC | 	wrlong	result1, objptr
12658                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
12658     16 00 00 FF 
1265c     08 E4 85 F1 | 	sub	objptr, ##11272
12660     F2 20 02 FB | 	rdlong	local02, objptr
12664     3C 00 00 FF 
12668     38 E4 85 F1 | 	sub	objptr, ##30776
1266c     01 20 16 F2 | 	cmp	local02, #1 wc
12670     BC 00 90 CD |  if_b	jmp	#LR__1501
12674     3C 00 00 FF 
12678     38 E4 05 F1 | 	add	objptr, ##30776
1267c     F2 24 02 FB | 	rdlong	local04, objptr
12680     3C 00 00 FF 
12684     38 E4 85 F1 | 	sub	objptr, ##30776
12688     12 23 02 F6 | 	mov	local03, local04
1268c     04 22 16 F2 | 	cmp	local03, #4 wc
12690     9C 00 90 3D |  if_ae	jmp	#LR__1501
12694     50 00 00 FF 
12698     A4 E5 05 F1 | 	add	objptr, ##41380
1269c     F2 1E 02 FB | 	rdlong	local01, objptr
126a0     50 00 00 FF 
126a4     A4 E5 85 F1 | 	sub	objptr, ##41380
126a8     0F 27 02 F6 | 	mov	local05, local01
126ac     01 26 0E F2 | 	cmp	local05, #1 wz
126b0     7C 00 90 5D |  if_ne	jmp	#LR__1501
126b4     04 00 00 FF 
126b8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
126bc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
126c0     04 00 00 FF 
126c4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
126c8     56 00 00 FF 
126cc     44 22 06 F6 | 	mov	local03, ##44100
126d0     0E 24 C6 F9 | 	decod	local04, #14
126d4     00 26 06 F6 | 	mov	local05, #0
126d8     03 00 00 FF 
126dc     DE 1E 06 F6 | 	mov	local01, ##1758
126e0     07 12 06 F6 | 	mov	arg01, #7
126e4     56 00 00 FF 
126e8     44 16 06 F6 | 	mov	arg03, ##44100
126ec     0E 18 C6 F9 | 	decod	arg04, #14
126f0     00 1A 06 F6 | 	mov	arg05, #0
126f4     03 00 00 FF 
126f8     DE 1C 06 F6 | 	mov	arg06, ##1758
126fc     0B 00 00 FF 
12700     C0 E4 05 F1 | 	add	objptr, ##5824
12704     74 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12708     0B 00 00 FF 
1270c     C0 E4 85 F1 | 	sub	objptr, ##5824
12710     0A 12 06 F6 | 	mov	arg01, #10
12714     8C 30 B0 FD | 	call	#__system___waitms
12718     07 12 06 F6 | 	mov	arg01, #7
1271c     0B 00 00 FF 
12720     C0 E4 05 F1 | 	add	objptr, ##5824
12724     A4 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12728     0B 00 00 FF 
1272c     C0 E4 85 F1 | 	sub	objptr, ##5824
12730                 | LR__1501
12730                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
12730     3C 00 00 FF 
12734     38 E4 05 F1 | 	add	objptr, ##30776
12738     F2 20 02 FB | 	rdlong	local02, objptr
1273c     3C 00 00 FF 
12740     38 E4 85 F1 | 	sub	objptr, ##30776
12744     04 20 16 F2 | 	cmp	local02, #4 wc
12748     80 00 90 CD |  if_b	jmp	#LR__1502
1274c     3C 00 00 FF 
12750     38 E4 05 F1 | 	add	objptr, ##30776
12754     F2 24 02 FB | 	rdlong	local04, objptr
12758     3C 00 00 FF 
1275c     38 E4 85 F1 | 	sub	objptr, ##30776
12760     12 23 02 F6 | 	mov	local03, local04
12764     00 00 40 FF 
12768     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1276c     3C 00 00 CF 
12770     38 E4 05 C1 |  if_b	add	objptr, ##30776
12774     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12778     3C 00 00 CF 
1277c     38 E4 85 C1 |  if_b	sub	objptr, ##30776
12780     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
12784     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
12788     40 00 90 3D |  if_ae	jmp	#LR__1502
1278c     3C 00 00 FF 
12790     38 E4 05 F1 | 	add	objptr, ##30776
12794     F2 20 02 FB | 	rdlong	local02, objptr
12798     04 E4 05 F1 | 	add	objptr, #4
1279c     F2 20 62 FC | 	wrlong	local02, objptr
127a0     16 00 00 FF 
127a4     08 E4 05 F1 | 	add	objptr, ##11272
127a8     F2 02 68 FC | 	wrlong	#1, objptr
127ac     16 00 00 FF 
127b0     08 E4 85 F1 | 	sub	objptr, ##11272
127b4     F2 20 02 FB | 	rdlong	local02, objptr
127b8     16 00 00 FF 
127bc     0C E4 05 F1 | 	add	objptr, ##11276
127c0     F2 20 62 FC | 	wrlong	local02, objptr
127c4     52 00 00 FF 
127c8     48 E4 85 F1 | 	sub	objptr, ##42056
127cc                 | LR__1502
127cc                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
127cc     3C 00 00 FF 
127d0     38 E4 05 F1 | 	add	objptr, ##30776
127d4     F2 20 02 FB | 	rdlong	local02, objptr
127d8     3C 00 00 FF 
127dc     38 E4 85 F1 | 	sub	objptr, ##30776
127e0     00 00 40 FF 
127e4     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
127e8     52 00 00 3F 
127ec     4C E4 05 31 |  if_ae	add	objptr, ##42060
127f0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
127f4     08 E4 85 31 |  if_ae	sub	objptr, #8
127f8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
127fc     52 00 00 3F 
12800     44 E4 85 31 |  if_ae	sub	objptr, ##42052
12804                 | ' if key=0 andalso rpt=1 then rptcnt+=1
12804     3C 00 00 FF 
12808     38 E4 05 F1 | 	add	objptr, ##30776
1280c     F2 20 0A FB | 	rdlong	local02, objptr wz
12810     3C 00 00 FF 
12814     38 E4 85 F1 | 	sub	objptr, ##30776
12818     52 00 00 AF 
1281c     44 E4 05 A1 |  if_e	add	objptr, ##42052
12820     F2 24 02 AB |  if_e	rdlong	local04, objptr
12824     52 00 00 AF 
12828     44 E4 85 A1 |  if_e	sub	objptr, ##42052
1282c     12 23 02 A6 |  if_e	mov	local03, local04
12830     01 22 0E A2 |  if_e	cmp	local03, #1 wz
12834     52 00 00 AF 
12838     4C E4 05 A1 |  if_e	add	objptr, ##42060
1283c     F2 20 02 AB |  if_e	rdlong	local02, objptr
12840     01 20 06 A1 |  if_e	add	local02, #1
12844     F2 20 62 AC |  if_e	wrlong	local02, objptr
12848     52 00 00 AF 
1284c     4C E4 85 A1 |  if_e	sub	objptr, ##42060
12850                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
12850     3C 00 00 FF 
12854     38 E4 05 F1 | 	add	objptr, ##30776
12858     F2 20 02 FB | 	rdlong	local02, objptr
1285c     3C 00 00 FF 
12860     38 E4 85 F1 | 	sub	objptr, ##30776
12864     00 00 40 FF 
12868     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1286c     44 00 90 3D |  if_ae	jmp	#LR__1504
12870     52 00 00 FF 
12874     4C E4 05 F1 | 	add	objptr, ##42060
12878     F2 20 02 FB | 	rdlong	local02, objptr
1287c     52 00 00 FF 
12880     4C E4 85 F1 | 	sub	objptr, ##42060
12884     19 20 0E F2 | 	cmp	local02, #25 wz
12888     28 00 90 5D |  if_ne	jmp	#LR__1503
1288c     3C 00 00 FF 
12890     3C E4 05 F1 | 	add	objptr, ##30780
12894     F2 20 02 FB | 	rdlong	local02, objptr
12898     16 00 00 FF 
1289c     0C E4 05 F1 | 	add	objptr, ##11276
128a0     F2 20 62 FC | 	wrlong	local02, objptr
128a4     04 E4 05 F1 | 	add	objptr, #4
128a8     F2 2A 68 FC | 	wrlong	#21, objptr
128ac     52 00 00 FF 
128b0     4C E4 85 F1 | 	sub	objptr, ##42060
128b4                 | LR__1503
128b4                 | LR__1504
128b4                 | ' 
128b4                 | ' 
128b4                 | ' if key3<>0 then
128b4     52 00 00 FF 
128b8     48 E4 05 F1 | 	add	objptr, ##42056
128bc     F2 28 0A FB | 	rdlong	local06, objptr wz
128c0     52 00 00 FF 
128c4     48 E4 85 F1 | 	sub	objptr, ##42056
128c8     54 FD 9F AD |  if_e	jmp	#LR__1500
128cc                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
128cc     50 00 00 FF 
128d0     A4 E5 05 F1 | 	add	objptr, ##41380
128d4     F2 20 02 FB | 	rdlong	local02, objptr
128d8     50 00 00 FF 
128dc     A4 E5 85 F1 | 	sub	objptr, ##41380
128e0     01 20 0E F2 | 	cmp	local02, #1 wz
128e4     5C 00 90 5D |  if_ne	jmp	#LR__1505
128e8     01 00 00 FF 
128ec     00 EA 05 F1 | 	add	ptr__dat__, ##512
128f0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
128f4     01 00 00 FF 
128f8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
128fc     56 00 00 FF 
12900     44 22 06 F6 | 	mov	local03, ##44100
12904     0E 24 C6 F9 | 	decod	local04, #14
12908     03 00 00 FF 
1290c     94 26 06 F6 | 	mov	local05, ##1684
12910     01 1E 66 F6 | 	neg	local01, #1
12914     07 12 06 F6 | 	mov	arg01, #7
12918     56 00 00 FF 
1291c     44 16 06 F6 | 	mov	arg03, ##44100
12920     0E 18 C6 F9 | 	decod	arg04, #14
12924     03 00 00 FF 
12928     94 1A 06 F6 | 	mov	arg05, ##1684
1292c     01 1C 66 F6 | 	neg	arg06, #1
12930     0B 00 00 FF 
12934     C0 E4 05 F1 | 	add	objptr, ##5824
12938     40 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1293c     0B 00 00 FF 
12940     C0 E4 85 F1 | 	sub	objptr, ##5824
12944                 | LR__1505
12944     52 00 00 FF 
12948     48 E4 05 F1 | 	add	objptr, ##42056
1294c     F2 12 02 FB | 	rdlong	arg01, objptr
12950     52 00 00 FF 
12954     48 E4 85 F1 | 	sub	objptr, ##42056
12958     74 F8 BF FD | 	call	#_scantochar
1295c     52 00 00 FF 
12960     50 E4 05 F1 | 	add	objptr, ##42064
12964     F2 FA 61 FC | 	wrlong	result1, objptr
12968                 | '   if leds and 2 = 2 then 
12968     10 E4 85 F1 | 	sub	objptr, #16
1296c     F2 20 0A FB | 	rdlong	local02, objptr wz
12970     52 00 00 FF 
12974     40 E4 85 F1 | 	sub	objptr, ##42048
12978     68 01 90 AD |  if_e	jmp	#LR__1513
1297c                 | '     if key4>96 andalso key4<123 then
1297c     52 00 00 FF 
12980     50 E4 05 F1 | 	add	objptr, ##42064
12984     F2 20 02 FB | 	rdlong	local02, objptr
12988     52 00 00 FF 
1298c     50 E4 85 F1 | 	sub	objptr, ##42064
12990     61 20 56 F2 | 	cmps	local02, #97 wc
12994     40 00 90 CD |  if_b	jmp	#LR__1506
12998     52 00 00 FF 
1299c     50 E4 05 F1 | 	add	objptr, ##42064
129a0     F2 24 02 FB | 	rdlong	local04, objptr
129a4     52 00 00 FF 
129a8     50 E4 85 F1 | 	sub	objptr, ##42064
129ac     12 23 02 F6 | 	mov	local03, local04
129b0     7B 22 56 F2 | 	cmps	local03, #123 wc
129b4     20 00 90 3D |  if_ae	jmp	#LR__1506
129b8     52 00 00 FF 
129bc     50 E4 05 F1 | 	add	objptr, ##42064
129c0     F2 20 02 FB | 	rdlong	local02, objptr
129c4     20 20 86 F1 | 	sub	local02, #32
129c8     F2 20 62 FC | 	wrlong	local02, objptr
129cc     52 00 00 FF 
129d0     50 E4 85 F1 | 	sub	objptr, ##42064
129d4     0C 01 90 FD | 	jmp	#LR__1512
129d8                 | LR__1506
129d8     52 00 00 FF 
129dc     50 E4 05 F1 | 	add	objptr, ##42064
129e0     F2 20 02 FB | 	rdlong	local02, objptr
129e4     52 00 00 FF 
129e8     50 E4 85 F1 | 	sub	objptr, ##42064
129ec     41 20 56 F2 | 	cmps	local02, #65 wc
129f0     40 00 90 CD |  if_b	jmp	#LR__1507
129f4     52 00 00 FF 
129f8     50 E4 05 F1 | 	add	objptr, ##42064
129fc     F2 24 02 FB | 	rdlong	local04, objptr
12a00     52 00 00 FF 
12a04     50 E4 85 F1 | 	sub	objptr, ##42064
12a08     12 23 02 F6 | 	mov	local03, local04
12a0c     5B 22 56 F2 | 	cmps	local03, #91 wc
12a10     20 00 90 3D |  if_ae	jmp	#LR__1507
12a14     52 00 00 FF 
12a18     50 E4 05 F1 | 	add	objptr, ##42064
12a1c     F2 20 02 FB | 	rdlong	local02, objptr
12a20     20 20 06 F1 | 	add	local02, #32
12a24     F2 20 62 FC | 	wrlong	local02, objptr
12a28     52 00 00 FF 
12a2c     50 E4 85 F1 | 	sub	objptr, ##42064
12a30     B0 00 90 FD | 	jmp	#LR__1511
12a34                 | LR__1507
12a34     52 00 00 FF 
12a38     50 E4 05 F1 | 	add	objptr, ##42064
12a3c     F2 20 02 FB | 	rdlong	local02, objptr
12a40     52 00 00 FF 
12a44     50 E4 85 F1 | 	sub	objptr, ##42064
12a48     17 20 56 F2 | 	cmps	local02, #23 wc
12a4c     40 00 90 CD |  if_b	jmp	#LR__1508
12a50     52 00 00 FF 
12a54     50 E4 05 F1 | 	add	objptr, ##42064
12a58     F2 24 02 FB | 	rdlong	local04, objptr
12a5c     52 00 00 FF 
12a60     50 E4 85 F1 | 	sub	objptr, ##42064
12a64     12 23 02 F6 | 	mov	local03, local04
12a68     20 22 56 F2 | 	cmps	local03, #32 wc
12a6c     20 00 90 3D |  if_ae	jmp	#LR__1508
12a70     52 00 00 FF 
12a74     50 E4 05 F1 | 	add	objptr, ##42064
12a78     F2 20 02 FB | 	rdlong	local02, objptr
12a7c     09 20 86 F1 | 	sub	local02, #9
12a80     F2 20 62 FC | 	wrlong	local02, objptr
12a84     52 00 00 FF 
12a88     50 E4 85 F1 | 	sub	objptr, ##42064
12a8c     54 00 90 FD | 	jmp	#LR__1510
12a90                 | LR__1508
12a90     52 00 00 FF 
12a94     50 E4 05 F1 | 	add	objptr, ##42064
12a98     F2 20 02 FB | 	rdlong	local02, objptr
12a9c     52 00 00 FF 
12aa0     50 E4 85 F1 | 	sub	objptr, ##42064
12aa4     0E 20 56 F2 | 	cmps	local02, #14 wc
12aa8     38 00 90 CD |  if_b	jmp	#LR__1509
12aac     52 00 00 FF 
12ab0     50 E4 05 F1 | 	add	objptr, ##42064
12ab4     F2 24 02 FB | 	rdlong	local04, objptr
12ab8     52 00 00 FF 
12abc     50 E4 85 F1 | 	sub	objptr, ##42064
12ac0     12 23 02 F6 | 	mov	local03, local04
12ac4     17 22 56 F2 | 	cmps	local03, #23 wc
12ac8     52 00 00 CF 
12acc     50 E4 05 C1 |  if_b	add	objptr, ##42064
12ad0     F2 20 02 CB |  if_b	rdlong	local02, objptr
12ad4     27 20 06 C1 |  if_b	add	local02, #39
12ad8     F2 20 62 CC |  if_b	wrlong	local02, objptr
12adc     52 00 00 CF 
12ae0     50 E4 85 C1 |  if_b	sub	objptr, ##42064
12ae4                 | LR__1509
12ae4                 | LR__1510
12ae4                 | LR__1511
12ae4                 | LR__1512
12ae4                 | LR__1513
12ae4                 | '  
12ae4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
12ae4     52 00 00 FF 
12ae8     50 E4 05 F1 | 	add	objptr, ##42064
12aec     F2 20 02 FB | 	rdlong	local02, objptr
12af0     52 00 00 FF 
12af4     50 E4 85 F1 | 	sub	objptr, ##42064
12af8     01 20 56 F2 | 	cmps	local02, #1 wc
12afc     90 00 90 CD |  if_b	jmp	#LR__1514
12b00     52 00 00 FF 
12b04     50 E4 05 F1 | 	add	objptr, ##42064
12b08     F2 24 02 FB | 	rdlong	local04, objptr
12b0c     52 00 00 FF 
12b10     50 E4 85 F1 | 	sub	objptr, ##42064
12b14     12 23 02 F6 | 	mov	local03, local04
12b18     7F 22 56 F2 | 	cmps	local03, #127 wc
12b1c     38 E4 05 C1 |  if_b	add	objptr, #56
12b20     F2 1E E2 CA |  if_b	rdword	local01, objptr
12b24     38 E4 85 C1 |  if_b	sub	objptr, #56
12b28     0F 27 32 C9 |  if_b	getword	local05, local01, #0
12b2c     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
12b30     5C 00 90 3D |  if_ae	jmp	#LR__1514
12b34     52 00 00 FF 
12b38     50 E4 05 F1 | 	add	objptr, ##42064
12b3c     F2 12 02 FB | 	rdlong	arg01, objptr
12b40     52 00 00 FF 
12b44     50 E4 85 F1 | 	sub	objptr, ##42064
12b48     38 4B B0 FD | 	call	#__system__Chr_S
12b4c     FD 2A 02 F6 | 	mov	local07, result1
12b50     2D 00 00 FF 
12b54     E0 E5 05 F1 | 	add	objptr, ##23520
12b58     F2 12 02 FB | 	rdlong	arg01, objptr
12b5c     2D 00 00 FF 
12b60     E0 E5 85 F1 | 	sub	objptr, ##23520
12b64     15 15 02 F6 | 	mov	arg02, local07
12b68     A0 29 B0 FD | 	call	#__system___string_concat
12b6c     2D 00 00 FF 
12b70     E0 E5 05 F1 | 	add	objptr, ##23520
12b74     F2 FA 61 FC | 	wrlong	result1, objptr
12b78     24 00 00 FF 
12b7c     70 E4 05 F1 | 	add	objptr, ##18544
12b80     F2 12 02 FB | 	rdlong	arg01, objptr
12b84     52 00 00 FF 
12b88     50 E4 85 F1 | 	sub	objptr, ##42064
12b8c     E0 16 B0 FD | 	call	#_hg010b_spin2_putchar
12b90                 | LR__1514
12b90                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
12b90     52 00 00 FF 
12b94     50 E4 05 F1 | 	add	objptr, ##42064
12b98     F2 20 02 FB | 	rdlong	local02, objptr
12b9c     52 00 00 FF 
12ba0     50 E4 85 F1 | 	sub	objptr, ##42064
12ba4     01 20 56 F2 | 	cmps	local02, #1 wc
12ba8     D0 00 90 CD |  if_b	jmp	#LR__1515
12bac     52 00 00 FF 
12bb0     50 E4 05 F1 | 	add	objptr, ##42064
12bb4     F2 24 02 FB | 	rdlong	local04, objptr
12bb8     52 00 00 FF 
12bbc     50 E4 85 F1 | 	sub	objptr, ##42064
12bc0     12 23 02 F6 | 	mov	local03, local04
12bc4     7F 22 56 F2 | 	cmps	local03, #127 wc
12bc8     B0 00 90 3D |  if_ae	jmp	#LR__1515
12bcc     38 E4 05 F1 | 	add	objptr, #56
12bd0     F2 1E E2 FA | 	rdword	local01, objptr
12bd4     38 E4 85 F1 | 	sub	objptr, #56
12bd8     0F 27 32 F9 | 	getword	local05, local01, #0
12bdc     FE 26 0E F2 | 	cmp	local05, #254 wz
12be0     50 00 00 AF 
12be4     A4 E5 05 A1 |  if_e	add	objptr, ##41380
12be8     F2 2C 02 AB |  if_e	rdlong	local08, objptr
12bec     50 00 00 AF 
12bf0     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
12bf4     16 2F 02 A6 |  if_e	mov	local09, local08
12bf8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
12bfc     7C 00 90 5D |  if_ne	jmp	#LR__1515
12c00     04 00 00 FF 
12c04     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12c08     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12c0c     04 00 00 FF 
12c10     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12c14     56 00 00 FF 
12c18     44 22 06 F6 | 	mov	local03, ##44100
12c1c     0E 24 C6 F9 | 	decod	local04, #14
12c20     00 26 06 F6 | 	mov	local05, #0
12c24     03 00 00 FF 
12c28     DE 1E 06 F6 | 	mov	local01, ##1758
12c2c     07 12 06 F6 | 	mov	arg01, #7
12c30     56 00 00 FF 
12c34     44 16 06 F6 | 	mov	arg03, ##44100
12c38     0E 18 C6 F9 | 	decod	arg04, #14
12c3c     00 1A 06 F6 | 	mov	arg05, #0
12c40     03 00 00 FF 
12c44     DE 1C 06 F6 | 	mov	arg06, ##1758
12c48     0B 00 00 FF 
12c4c     C0 E4 05 F1 | 	add	objptr, ##5824
12c50     28 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12c54     0B 00 00 FF 
12c58     C0 E4 85 F1 | 	sub	objptr, ##5824
12c5c     2C 13 06 F6 | 	mov	arg01, #300
12c60     40 2B B0 FD | 	call	#__system___waitms
12c64     00 12 06 F6 | 	mov	arg01, #0
12c68     0B 00 00 FF 
12c6c     C0 E4 05 F1 | 	add	objptr, ##5824
12c70     58 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12c74     0B 00 00 FF 
12c78     C0 E4 85 F1 | 	sub	objptr, ##5824
12c7c                 | LR__1515
12c7c                 | '  
12c7c                 | '   'tab
12c7c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
12c7c     52 00 00 FF 
12c80     48 E4 05 F1 | 	add	objptr, ##42056
12c84     F2 20 02 FB | 	rdlong	local02, objptr
12c88     52 00 00 FF 
12c8c     48 E4 85 F1 | 	sub	objptr, ##42056
12c90     10 21 E2 F8 | 	getbyte	local02, local02, #0
12c94     2B 20 0E F2 | 	cmp	local02, #43 wz
12c98     B4 00 90 5D |  if_ne	jmp	#LR__1516
12c9c     38 E4 05 F1 | 	add	objptr, #56
12ca0     F2 24 E2 FA | 	rdword	local04, objptr
12ca4     38 E4 85 F1 | 	sub	objptr, #56
12ca8     12 23 32 F9 | 	getword	local03, local04, #0
12cac     F0 22 16 F2 | 	cmp	local03, #240 wc
12cb0     9C 00 90 CD |  if_b	jmp	#LR__1516
12cb4     50 00 00 FF 
12cb8     A4 E5 05 F1 | 	add	objptr, ##41380
12cbc     F2 1E 02 FB | 	rdlong	local01, objptr
12cc0     50 00 00 FF 
12cc4     A4 E5 85 F1 | 	sub	objptr, ##41380
12cc8     0F 27 02 F6 | 	mov	local05, local01
12ccc     01 26 0E F2 | 	cmp	local05, #1 wz
12cd0     7C 00 90 5D |  if_ne	jmp	#LR__1516
12cd4     04 00 00 FF 
12cd8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12cdc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12ce0     04 00 00 FF 
12ce4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12ce8     56 00 00 FF 
12cec     44 22 06 F6 | 	mov	local03, ##44100
12cf0     0E 24 C6 F9 | 	decod	local04, #14
12cf4     00 26 06 F6 | 	mov	local05, #0
12cf8     03 00 00 FF 
12cfc     DE 1E 06 F6 | 	mov	local01, ##1758
12d00     00 12 06 F6 | 	mov	arg01, #0
12d04     56 00 00 FF 
12d08     44 16 06 F6 | 	mov	arg03, ##44100
12d0c     0E 18 C6 F9 | 	decod	arg04, #14
12d10     00 1A 06 F6 | 	mov	arg05, #0
12d14     03 00 00 FF 
12d18     DE 1C 06 F6 | 	mov	arg06, ##1758
12d1c     0B 00 00 FF 
12d20     C0 E4 05 F1 | 	add	objptr, ##5824
12d24     54 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12d28     0B 00 00 FF 
12d2c     C0 E4 85 F1 | 	sub	objptr, ##5824
12d30     2C 13 06 F6 | 	mov	arg01, #300
12d34     6C 2A B0 FD | 	call	#__system___waitms
12d38     00 12 06 F6 | 	mov	arg01, #0
12d3c     0B 00 00 FF 
12d40     C0 E4 05 F1 | 	add	objptr, ##5824
12d44     84 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12d48     0B 00 00 FF 
12d4c     C0 E4 85 F1 | 	sub	objptr, ##5824
12d50                 | LR__1516
12d50                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
12d50     52 00 00 FF 
12d54     48 E4 05 F1 | 	add	objptr, ##42056
12d58     F2 20 02 FB | 	rdlong	local02, objptr
12d5c     52 00 00 FF 
12d60     48 E4 85 F1 | 	sub	objptr, ##42056
12d64     10 21 E2 F8 | 	getbyte	local02, local02, #0
12d68     2B 20 0E F2 | 	cmp	local02, #43 wz
12d6c     AC 00 90 5D |  if_ne	jmp	#LR__1519
12d70     38 E4 05 F1 | 	add	objptr, #56
12d74     F2 24 E2 FA | 	rdword	local04, objptr
12d78     38 E4 85 F1 | 	sub	objptr, #56
12d7c     12 23 32 F9 | 	getword	local03, local04, #0
12d80     F0 22 16 F2 | 	cmp	local03, #240 wc
12d84     94 00 90 3D |  if_ae	jmp	#LR__1519
12d88     38 E4 05 F1 | 	add	objptr, #56
12d8c     F2 20 E2 FA | 	rdword	local02, objptr
12d90     10 23 52 F6 | 	abs	local03, local02 wc
12d94     11 23 42 F8 | 	getnib	local03, local03, #0
12d98     11 23 82 F6 | 	negc	local03, local03
12d9c     11 25 52 F6 | 	abs	local04, local03 wc
12da0     01 24 46 F0 | 	shr	local04, #1
12da4     12 25 82 F6 | 	negc	local04, local04
12da8     52 00 00 FF 
12dac     1C E4 05 F1 | 	add	objptr, ##42012
12db0     F2 24 62 FC | 	wrlong	local04, objptr
12db4     12 31 02 F6 | 	mov	local10, local04
12db8     52 00 00 FF 
12dbc     54 E4 85 F1 | 	sub	objptr, ##42068
12dc0                 | LR__1517
12dc0     08 30 56 F2 | 	cmps	local10, #8 wc
12dc4     54 00 90 3D |  if_ae	jmp	#LR__1518
12dc8     2D 00 00 FF 
12dcc     E0 E5 05 F1 | 	add	objptr, ##23520
12dd0     F2 12 02 FB | 	rdlong	arg01, objptr
12dd4     2D 00 00 FF 
12dd8     E0 E5 85 F1 | 	sub	objptr, ##23520
12ddc     28 01 00 FF 
12de0     56 25 06 F6 | 	mov	local04, ##@LR__4408
12de4     12 15 02 F6 | 	mov	arg02, local04
12de8     20 27 B0 FD | 	call	#__system___string_concat
12dec     2D 00 00 FF 
12df0     E0 E5 05 F1 | 	add	objptr, ##23520
12df4     F2 FA 61 FC | 	wrlong	result1, objptr
12df8     2D 00 00 FF 
12dfc     E0 E5 85 F1 | 	sub	objptr, ##23520
12e00     28 01 00 FF 
12e04     58 13 06 F6 | 	mov	arg01, ##@LR__4409
12e08     80 16 B0 FD | 	call	#_hg010b_spin2_write
12e0c     18 23 02 F6 | 	mov	local03, local10
12e10     01 22 06 F1 | 	add	local03, #1
12e14     11 31 02 F6 | 	mov	local10, local03
12e18     A4 FF 9F FD | 	jmp	#LR__1517
12e1c                 | LR__1518
12e1c                 | LR__1519
12e1c                 | '  
12e1c                 | '   'backspace
12e1c                 | '   if (key3 and 255) = 42 then 
12e1c     52 00 00 FF 
12e20     48 E4 05 F1 | 	add	objptr, ##42056
12e24     F2 20 02 FB | 	rdlong	local02, objptr
12e28     52 00 00 FF 
12e2c     48 E4 85 F1 | 	sub	objptr, ##42056
12e30     10 21 E2 F8 | 	getbyte	local02, local02, #0
12e34     2A 20 0E F2 | 	cmp	local02, #42 wz
12e38     D4 00 90 5D |  if_ne	jmp	#LR__1524
12e3c                 | '       if v.cursor_x>4 then 
12e3c     38 E4 05 F1 | 	add	objptr, #56
12e40     F2 20 E2 FA | 	rdword	local02, objptr
12e44     38 E4 85 F1 | 	sub	objptr, #56
12e48     05 20 16 F2 | 	cmp	local02, #5 wc
12e4c     9C 00 90 CD |  if_b	jmp	#LR__1522
12e50     2D 00 00 FF 
12e54     E0 E5 05 F1 | 	add	objptr, ##23520
12e58     F2 26 02 FB | 	rdlong	local05, objptr
12e5c     2D 00 00 FF 
12e60     E0 E5 85 F1 | 	sub	objptr, ##23520
12e64     13 13 02 F6 | 	mov	arg01, local05
12e68     09 33 02 F6 | 	mov	local11, arg01
12e6c     97 06 48 FB | 	callpa	#(@LR__1521-@LR__1520)>>2,fcache_load_ptr_
12e70                 | LR__1520
12e70     19 FB C9 FA | 	rdbyte	result1, local11 wz
12e74     01 32 06 51 |  if_ne	add	local11, #1
12e78     F4 FF 9F 5D |  if_ne	jmp	#LR__1520
12e7c                 | LR__1521
12e7c     09 33 82 F1 | 	sub	local11, arg01
12e80     19 15 02 F6 | 	mov	arg02, local11
12e84     01 14 86 F1 | 	sub	arg02, #1
12e88     13 13 02 F6 | 	mov	arg01, local05
12e8c     30 46 B0 FD | 	call	#__system__Left_S
12e90     2D 00 00 FF 
12e94     E0 E5 05 F1 | 	add	objptr, ##23520
12e98     F2 FA 61 FC | 	wrlong	result1, objptr
12e9c     2D 00 00 FF 
12ea0     A8 E5 85 F1 | 	sub	objptr, ##23464
12ea4     F2 12 E2 FA | 	rdword	arg01, objptr
12ea8     02 12 86 F1 | 	sub	arg01, #2
12eac     02 E4 05 F1 | 	add	objptr, #2
12eb0     F2 14 C2 FA | 	rdbyte	arg02, objptr
12eb4     3A E4 85 F1 | 	sub	objptr, #58
12eb8     6C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12ebc     20 12 06 F6 | 	mov	arg01, #32
12ec0     AC 13 B0 FD | 	call	#_hg010b_spin2_putchar
12ec4     38 E4 05 F1 | 	add	objptr, #56
12ec8     F2 12 E2 FA | 	rdword	arg01, objptr
12ecc     02 12 86 F1 | 	sub	arg01, #2
12ed0     02 E4 05 F1 | 	add	objptr, #2
12ed4     F2 24 C2 FA | 	rdbyte	local04, objptr
12ed8     3A E4 85 F1 | 	sub	objptr, #58
12edc     12 23 E2 F8 | 	getbyte	local03, local04, #0
12ee0     11 15 02 F6 | 	mov	arg02, local03
12ee4     40 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12ee8     24 00 90 FD | 	jmp	#LR__1523
12eec                 | LR__1522
12eec     28 01 00 FF 
12ef0     5A 21 06 F6 | 	mov	local02, ##@LR__4410
12ef4     2D 00 00 FF 
12ef8     E0 E5 05 F1 | 	add	objptr, ##23520
12efc     F2 20 62 FC | 	wrlong	local02, objptr
12f00     2D 00 00 FF 
12f04     A8 E5 85 F1 | 	sub	objptr, ##23464
12f08     F2 08 58 FC | 	wrword	#4, objptr
12f0c     38 E4 85 F1 | 	sub	objptr, #56
12f10                 | LR__1523
12f10                 | LR__1524
12f10                 | '    
12f10                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
12f10                 | '  
12f10                 | '   if key4=key_enter then 
12f10     52 00 00 FF 
12f14     50 E4 05 F1 | 	add	objptr, ##42064
12f18     F2 28 02 FB | 	rdlong	local06, objptr
12f1c     52 00 00 FF 
12f20     50 E4 85 F1 | 	sub	objptr, ##42064
12f24     8D 28 0E F2 | 	cmp	local06, #141 wz
12f28     50 00 90 5D |  if_ne	jmp	#LR__1525
12f2c     BC 16 B0 FD | 	call	#_hg010b_spin2_crlf
12f30     E8 DA BE FD | 	call	#_interpret
12f34     28 01 00 FF 
12f38     5B 21 06 F6 | 	mov	local02, ##@LR__4411
12f3c     2D 00 00 FF 
12f40     E0 E5 05 F1 | 	add	objptr, ##23520
12f44     F2 20 62 FC | 	wrlong	local02, objptr
12f48     1A FA 61 FD | 	getct	result1
12f4c     24 00 00 FF 
12f50     78 E4 05 F1 | 	add	objptr, ##18552
12f54     F2 24 02 FB | 	rdlong	local04, objptr
12f58     12 23 02 F6 | 	mov	local03, local04
12f5c     11 FB 81 F1 | 	sub	result1, local03
12f60     F2 FA 61 FC | 	wrlong	result1, objptr
12f64     14 E4 85 F1 | 	sub	objptr, #20
12f68     F2 00 68 FC | 	wrlong	#0, objptr
12f6c     08 E4 05 F1 | 	add	objptr, #8
12f70     F2 00 68 FC | 	wrlong	#0, objptr
12f74     52 00 00 FF 
12f78     4C E4 85 F1 | 	sub	objptr, ##42060
12f7c                 | LR__1525
12f7c     52 00 00 FF 
12f80     48 E4 05 F1 | 	add	objptr, ##42056
12f84     F2 00 68 FC | 	wrlong	#0, objptr
12f88     52 00 00 FF 
12f8c     48 E4 85 F1 | 	sub	objptr, ##42056
12f90     8C F6 9F FD | 	jmp	#LR__1500
12f94     A7 F0 03 F6 | 	mov	ptra, fp
12f98     B2 00 A0 FD | 	call	#popregs_
12f9c                 | _program_ret
12f9c     2D 00 64 FD | 	ret
12fa0                 | 
12fa0                 | ' '' this is not a main program.
12fa0                 | ' 
12fa0                 | ' '****************************************************************************************************************
12fa0                 | ' '                                                                                                             	*
12fa0                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
12fa0                 | ' '                                                                                                            	*
12fa0                 | ' ' mode - mode #, see below											*
12fa0                 | ' ' base - HDMI base pin												*
12fa0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
12fa0                 | ' '														*
12fa0                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
12fa0                 | ' '' set bit #15 for custom timings														*
12fa0                 | ' '' p - 1 - psram, 0 - hub											*
12fa0                 | ' '' t - 1 - graphics, 0 - text											*
12fa0                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
12fa0                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
12fa0                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
12fa0                 | ' '														*
12fa0                 | ' '****************************************************************************************************************
12fa0                 | ' 
12fa0                 | ' pub start(base,mb):result |i
12fa0                 | _hg010b_spin2_start
12fa0                 | ' 
12fa0                 | ' '--------------------------- initialize pointers and variables
12fa0                 | ' 
12fa0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
12fa0     30 E4 05 F1 | 	add	objptr, #48
12fa4     F2 FA 01 F6 | 	mov	result1, objptr
12fa8     28 E4 85 F1 | 	sub	objptr, #40
12fac     F2 FA 61 FC | 	wrlong	result1, objptr
12fb0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
12fb0                 | ' hdmibase:=base							' HDMI base pin, 8*n
12fb0     18 E4 05 F1 | 	add	objptr, #24
12fb4     F2 12 62 FC | 	wrlong	arg01, objptr
12fb8                 | ' mailbox_ptr:=mb		
12fb8     04 E4 05 F1 | 	add	objptr, #4
12fbc     F2 14 62 FC | 	wrlong	arg02, objptr
12fc0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
12fc0     C1 E5 05 F1 | 	add	objptr, #449
12fc4     F2 14 62 FC | 	wrlong	arg02, objptr
12fc8                 | ' sprite_ptr:=@spr1ptr
12fc8     D8 E4 85 F1 | 	sub	objptr, #216
12fcc     F2 FA 01 F6 | 	mov	result1, objptr
12fd0     E5 E4 85 F1 | 	sub	objptr, #229
12fd4     F2 FA 61 FC | 	wrlong	result1, objptr
12fd8                 | ' 
12fd8                 | ' 		'
12fd8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
12fd8     E5 E4 05 F1 | 	add	objptr, #229
12fdc     F2 FA 01 FB | 	rdlong	result1, objptr
12fe0     D0 FA 05 F1 | 	add	result1, #208
12fe4     FD 10 58 FC | 	wrword	#8, result1
12fe8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
12fe8     F2 16 02 FB | 	rdlong	arg03, objptr
12fec     D2 16 06 F1 | 	add	arg03, #210
12ff0     0B 21 58 FC | 	wrword	#16, arg03
12ff4                 | ' leading_spaces:=0				'
12ff4     A5 E5 05 F1 | 	add	objptr, #421
12ff8     F2 00 68 FC | 	wrlong	#0, objptr
12ffc                 | ' 
12ffc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
12ffc     99 E4 85 F1 | 	sub	objptr, #153
13000     00 00 A0 FF 
13004     F2 0E 68 FC | 	wrlong	##1073741831, objptr
13008                 | ' emptydl[1]:=0
13008     04 E4 05 F1 | 	add	objptr, #4
1300c     F2 00 68 FC | 	wrlong	#0, objptr
13010                 | ' 
13010                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
13010                 | ' 
13010                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
13010     28 E5 85 F1 | 	sub	objptr, #296
13014     F2 02 68 FC | 	wrlong	#1, objptr
13018                 | ' if s_debug<>0
13018                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
13018     20 00 80 FF 
1301c     F2 00 68 FC | 	wrlong	##16384, objptr
13020     F5 E4 85 F1 | 	sub	objptr, #245
13024                 | ' setmode()							' set the mode, see below
13024     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
13028                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
13028     45 E4 05 F1 | 	add	objptr, #69
1302c     F2 FA 01 F6 | 	mov	result1, objptr
13030     35 E4 85 F1 | 	sub	objptr, #53
13034     F2 FA 61 FC | 	wrlong	result1, objptr
13038                 | ' cursor_ptr:=@cursor_x						
13038     28 E4 05 F1 | 	add	objptr, #40
1303c     F2 16 02 F6 | 	mov	arg03, objptr
13040     2C E4 85 F1 | 	sub	objptr, #44
13044     F2 16 62 FC | 	wrlong	arg03, objptr
13048                 | ' fontnum:=0  							' start with a PC type font 
13048     55 E4 05 F1 | 	add	objptr, #85
1304c     F2 00 68 FC | 	wrlong	#0, objptr
13050                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
13050     1C E4 05 F1 | 	add	objptr, #28
13054     F2 12 02 F6 | 	mov	arg01, objptr
13058     7D E4 85 F1 | 	sub	objptr, #125
1305c     10 00 00 FF 
13060     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
13064     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
13068     10 00 00 FF 
1306c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
13070     10 16 06 F6 | 	mov	arg03, #16
13074     58 23 B0 FD | 	call	#__system____builtin_memmove
13078                 | ' leading_spaces:=0
13078     01 00 00 FF 
1307c     B2 E4 05 F1 | 	add	objptr, ##690
13080     F2 00 68 FC | 	wrlong	#0, objptr
13084     01 00 00 FF 
13088     B2 E4 85 F1 | 	sub	objptr, ##690
1308c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1308c                 | ' 
1308c                 | ' initcursor(154)
1308c     9A 12 06 F6 | 	mov	arg01, #154
13090     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
13094                 | ' 
13094                 | ' '---------------------------- start the cog
13094                 | ' 
13094                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
13094     10 00 00 FF 
13098     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1309c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
130a0     10 00 00 FF 
130a4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
130a8     10 E4 05 F1 | 	add	objptr, #16
130ac     10 FA 05 F6 | 	mov	result1, #16
130b0     28 E4 61 FD | 	setq	objptr
130b4     0A FB F1 FC | 	coginit	result1, arg02 wc
130b8     01 FA 65 C6 |  if_b	neg	result1, #1
130bc     1C E4 05 F1 | 	add	objptr, #28
130c0     F2 FA 61 FC | 	wrlong	result1, objptr
130c4     2C E4 85 F1 | 	sub	objptr, #44
130c8                 | ' waitms(40)							' wait for stabilize
130c8     28 12 06 F6 | 	mov	arg01, #40
130cc     D4 26 B0 FD | 	call	#__system___waitms
130d0                 | ' return cog							' return the driver's cog #
130d0     2C E4 05 F1 | 	add	objptr, #44
130d4     F2 FA 01 FB | 	rdlong	result1, objptr
130d8     2C E4 85 F1 | 	sub	objptr, #44
130dc                 | _hg010b_spin2_start_ret
130dc     2D 00 64 FD | 	ret
130e0                 | 
130e0                 | ' 
130e0                 | ' 
130e0                 | ' '**************************************************************************************************************** 
130e0                 | ' '                                                                                                             	*
130e0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
130e0                 | ' '  Mode number - see start() above or bits below								*
130e0                 | ' '                                                                                                             	*
130e0                 | ' '****************************************************************************************************************
130e0                 | ' 
130e0                 | ' '---------------------------- initialize a cursor (MSDOS type)
130e0                 | ' pub initcursor(color) |i
130e0                 | _hg010b_spin2_initcursor
130e0     03 4A 05 F6 | 	mov	COUNT_, #3
130e4     A8 00 A0 FD | 	call	#pushregs_
130e8     09 1F 02 F6 | 	mov	local01, arg01
130ec                 | ' 
130ec                 | ' cursor_x:=0							' place the cursor at 0:0
130ec     38 E4 05 F1 | 	add	objptr, #56
130f0     F2 00 58 FC | 	wrword	#0, objptr
130f4                 | ' cursor_y:=0
130f4     02 E4 05 F1 | 	add	objptr, #2
130f8     F2 00 48 FC | 	wrbyte	#0, objptr
130fc                 | ' repeat i from 0 to 111
130fc     00 20 06 F6 | 	mov	local02, #0
13100     F8 E5 05 F1 | 	add	objptr, #504
13104     97 1A 48 FB | 	callpa	#(@LR__1532-@LR__1530)>>2,fcache_load_ptr_
13108                 | LR__1530
13108                 | '   cursor[i]:=0
13108     10 23 02 F6 | 	mov	local03, local02
1310c     F2 22 02 F1 | 	add	local03, objptr
13110     11 01 48 FC | 	wrbyte	#0, local03
13114     01 20 06 F1 | 	add	local02, #1
13118     70 20 56 F2 | 	cmps	local02, #112 wc
1311c     E8 FF 9F CD |  if_b	jmp	#LR__1530
13120                 | ' repeat i from 112 to 127
13120     70 20 06 F6 | 	mov	local02, #112
13124                 | LR__1531
13124                 | '   cursor[i]:=color  
13124     10 23 02 F6 | 	mov	local03, local02
13128     F2 22 02 F1 | 	add	local03, objptr
1312c     11 1F 42 FC | 	wrbyte	local01, local03
13130     01 20 06 F1 | 	add	local02, #1
13134     80 20 16 F2 | 	cmp	local02, #128 wc
13138     E8 FF 9F CD |  if_b	jmp	#LR__1531
1313c                 | LR__1532
1313c                 | ' 'repeat i from 0 to 127
1313c                 | ' '  if ((i/8)//2)
1313c                 | ' '    cursor[i]:=15
1313c                 | ' '  else
1313c                 | ' '    cursor[i]:=0
1313c                 | ' '  if i>=120    
1313c                 | ' '    cursor[i]:=40
1313c                 | ' setspriteptr(17,@cursor)
1313c     F2 14 02 F6 | 	mov	arg02, objptr
13140     01 00 00 FF 
13144     32 E4 85 F1 | 	sub	objptr, ##562
13148     11 12 06 F6 | 	mov	arg01, #17
1314c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13150                 | ' setspritesize(17,8,16)
13150     11 12 06 F6 | 	mov	arg01, #17
13154     08 14 06 F6 | 	mov	arg02, #8
13158     10 16 06 F6 | 	mov	arg03, #16
1315c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
13160                 | ' setspritepos(17,0,0)
13160     11 12 06 F6 | 	mov	arg01, #17
13164     00 14 06 F6 | 	mov	arg02, #0
13168     00 16 06 F6 | 	mov	arg03, #0
1316c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
13170     A7 F0 03 F6 | 	mov	ptra, fp
13174     B2 00 A0 FD | 	call	#popregs_
13178                 | _hg010b_spin2_initcursor_ret
13178     2D 00 64 FD | 	ret
1317c                 | 
1317c                 | ' 
1317c                 | '  
1317c                 | ' pub setcursorcolor(color) |i
1317c                 | _hg010b_spin2_setcursorcolor
1317c                 | ' 
1317c                 | ' 
1317c                 | ' repeat i from 0 to 111
1317c     00 00 06 F6 | 	mov	_var01, #0
13180     01 00 00 FF 
13184     32 E4 05 F1 | 	add	objptr, ##562
13188     97 1A 48 FB | 	callpa	#(@LR__1542-@LR__1540)>>2,fcache_load_ptr_
1318c                 | LR__1540
1318c                 | '   cursor[i]:=0
1318c     00 03 02 F6 | 	mov	_var02, _var01
13190     F2 02 02 F1 | 	add	_var02, objptr
13194     01 01 48 FC | 	wrbyte	#0, _var02
13198     01 00 06 F1 | 	add	_var01, #1
1319c     70 00 56 F2 | 	cmps	_var01, #112 wc
131a0     E8 FF 9F CD |  if_b	jmp	#LR__1540
131a4                 | ' repeat i from 112 to 127
131a4     70 00 06 F6 | 	mov	_var01, #112
131a8                 | LR__1541
131a8                 | '   cursor[i]:=color  
131a8     00 03 02 F6 | 	mov	_var02, _var01
131ac     F2 02 02 F1 | 	add	_var02, objptr
131b0     01 13 42 FC | 	wrbyte	arg01, _var02
131b4     01 00 06 F1 | 	add	_var01, #1
131b8     80 00 16 F2 | 	cmp	_var01, #128 wc
131bc     E8 FF 9F CD |  if_b	jmp	#LR__1541
131c0                 | LR__1542
131c0     01 00 00 FF 
131c4     32 E4 85 F1 | 	sub	objptr, ##562
131c8                 | _hg010b_spin2_setcursorcolor_ret
131c8     2D 00 64 FD | 	ret
131cc                 | 
131cc                 | '  
131cc                 | ' 
131cc                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
131cc                 | _hg010b_spin2_setmode
131cc     02 4A 05 F6 | 	mov	COUNT_, #2
131d0     A8 00 A0 FD | 	call	#pushregs_
131d4                 | ' 
131d4                 | ' 
131d4                 | ' dl_ptr:=@emptydl[0]
131d4     01 00 00 FF 
131d8     19 E4 05 F1 | 	add	objptr, ##537
131dc     F2 60 02 F6 | 	mov	muldivb_, objptr
131e0     FD E5 85 F1 | 	sub	objptr, #509
131e4     F2 60 62 FC | 	wrlong	muldivb_, objptr
131e8                 | ' 
131e8                 | ' if cog>0 
131e8     10 E4 05 F1 | 	add	objptr, #16
131ec     F2 60 02 FB | 	rdlong	muldivb_, objptr
131f0     2C E4 85 F1 | 	sub	objptr, #44
131f4     01 60 56 F2 | 	cmps	muldivb_, #1 wc
131f8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
131f8     01 12 06 36 |  if_ae	mov	arg01, #1
131fc     60 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
13200                 | ' xres:=1024
13200     01 00 00 FF 
13204     22 E4 05 F1 | 	add	objptr, ##546
13208     02 00 80 FF 
1320c     F2 00 68 FC | 	wrlong	##1024, objptr
13210                 | ' yres:=576  
13210     04 E4 05 F1 | 	add	objptr, #4
13214     01 00 80 FF 
13218     F2 80 68 FC | 	wrlong	##576, objptr
1321c                 | ' ppl:=(timings[3])
1321c     10 00 00 FF 
13220     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
13224     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
13228     51 E5 85 F1 | 	sub	objptr, #337
1322c     F2 60 62 FC | 	wrlong	muldivb_, objptr
13230                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
13230     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
13234     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
13238     01 1E 66 F0 | 	shl	local01, #1
1323c     80 E4 85 F1 | 	sub	objptr, #128
13240     F2 1E 62 FC | 	wrlong	local01, objptr
13244                 | ' cpl1:=cpl '' todo remove
13244     04 E4 05 F1 | 	add	objptr, #4
13248     F2 1E 62 FC | 	wrlong	local01, objptr
1324c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1324c     02 00 00 FF 
13250     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
13254     41 E4 85 F1 | 	sub	objptr, #65
13258     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1325c                 | ' repeat i from 0 to 3
1325c     00 20 06 F6 | 	mov	local02, #0
13260     02 00 00 FF 
13264     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
13268     08 E4 05 F1 | 	add	objptr, #8
1326c     97 20 48 FB | 	callpa	#(@LR__1551-@LR__1550)>>2,fcache_load_ptr_
13270                 | LR__1550
13270                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
13270     10 1F 02 F6 | 	mov	local01, local02
13274     02 1E 66 F0 | 	shl	local01, #2
13278     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1327c     F2 60 02 FB | 	rdlong	muldivb_, objptr
13280     11 60 66 F0 | 	shl	muldivb_, #17
13284     0F 1F 02 FB | 	rdlong	local01, local01
13288     30 1F 02 F1 | 	add	local01, muldivb_
1328c     80 40 38 FF 
13290     00 1E 06 F1 | 	add	local01, ##1887502336
13294     10 61 02 F6 | 	mov	muldivb_, local02
13298     02 60 66 F0 | 	shl	muldivb_, #2
1329c     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
132a0     30 1F 62 FC | 	wrlong	local01, muldivb_
132a4     01 20 06 F1 | 	add	local02, #1
132a8     04 20 56 F2 | 	cmps	local02, #4 wc
132ac     C0 FF 9F CD |  if_b	jmp	#LR__1550
132b0                 | LR__1551
132b0     20 E4 85 F1 | 	sub	objptr, #32
132b4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
132b4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
132b8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
132bc     14 1E 66 FC | 	wrlong	local01, #20
132c0                 | ' hubset(timings[10])
132c0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
132c4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
132c8     10 00 00 FF 
132cc     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
132d0     00 12 62 FD | 	hubset	arg01
132d4                 | ' waitms(1)                                                   	' wait for stabilization
132d4     01 12 06 F6 | 	mov	arg01, #1
132d8     C8 24 B0 FD | 	call	#__system___waitms
132dc     10 00 00 FF 
132e0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
132e4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
132e8     5D E4 05 F1 | 	add	objptr, #93
132ec     F2 20 62 FC | 	wrlong	local02, objptr
132f0     10 1F 52 F6 | 	abs	local01, local02 wc
132f4     04 1E 46 F0 | 	shr	local01, #4
132f8     0F 1F 82 F6 | 	negc	local01, local01
132fc     9C E4 05 F1 | 	add	objptr, #156
13300     F2 1E 62 FC | 	wrlong	local01, objptr
13304     A4 E4 85 F1 | 	sub	objptr, #164
13308     F2 20 02 FB | 	rdlong	local02, objptr
1330c     08 E4 05 F1 | 	add	objptr, #8
13310     F2 1E 02 FB | 	rdlong	local01, objptr
13314     0F 21 02 FD | 	qmul	local02, local01
13318                 | ' lines:=timings[11]
13318                 | ' t_lines:=lines/16
13318                 | ' buflen:=cpl*lines						' framebuffer length in longs
13318     29 E4 85 F1 | 	sub	objptr, #41
1331c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1331c     19 1E C6 F9 | 	decod	local01, #25
13320                 | ' mode_ptr:=@timings						' set pointers to timings
13320     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
13324                 | ' graphmode:=1024+512+192+48							' det global variable
13324                 | ' makedl(graphmode)							' make a DL for the mode
13324     03 00 00 FF 
13328     F0 12 06 F6 | 	mov	arg01, ##1776
1332c     18 20 62 FD | 	getqx	local02
13330     F2 20 62 FC | 	wrlong	local02, objptr
13334     34 E4 85 F1 | 	sub	objptr, #52
13338     02 20 66 F0 | 	shl	local02, #2
1333c     10 1F 82 F1 | 	sub	local01, local02
13340     F2 1E 62 FC | 	wrlong	local01, objptr
13344     14 E4 05 F1 | 	add	objptr, #20
13348     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1334c     79 E4 05 F1 | 	add	objptr, #121
13350     03 00 80 FF 
13354     F2 E0 69 FC | 	wrlong	##1776, objptr
13358     8D E4 85 F1 | 	sub	objptr, #141
1335c     10 00 00 FF 
13360     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
13364     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
13368                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
13368     F2 1E 02 FB | 	rdlong	local01, objptr
1336c     D9 E4 05 F1 | 	add	objptr, #217
13370     F2 1E 62 FC | 	wrlong	local01, objptr
13374                 | ' s_font_ptr:=font_ptr
13374     D5 E4 85 F1 | 	sub	objptr, #213
13378     F2 1E 02 FB | 	rdlong	local01, objptr
1337c     D9 E4 05 F1 | 	add	objptr, #217
13380     F2 1E 62 FC | 	wrlong	local01, objptr
13384                 | ' s_lines:=lines
13384     80 E4 85 F1 | 	sub	objptr, #128
13388     F2 1E 02 FB | 	rdlong	local01, objptr
1338c     84 E4 05 F1 | 	add	objptr, #132
13390     F2 1E 62 FC | 	wrlong	local01, objptr
13394                 | ' s_buflen:=buflen
13394     AD E4 85 F1 | 	sub	objptr, #173
13398     F2 1E 02 FB | 	rdlong	local01, objptr
1339c     B5 E4 05 F1 | 	add	objptr, #181
133a0     F2 1E 62 FC | 	wrlong	local01, objptr
133a4                 | ' s_cpl:=cpl
133a4     94 E4 85 F1 | 	sub	objptr, #148
133a8     F2 1E 02 FB | 	rdlong	local01, objptr
133ac     90 E4 05 F1 | 	add	objptr, #144
133b0     F2 1E 62 FC | 	wrlong	local01, objptr
133b4                 | ' s_cpl1:=cpl
133b4     90 E4 85 F1 | 	sub	objptr, #144
133b8     F2 1E 02 FB | 	rdlong	local01, objptr
133bc     98 E4 05 F1 | 	add	objptr, #152
133c0     F2 1E 62 FC | 	wrlong	local01, objptr
133c4                 | ' st_lines:=t_lines
133c4     0C E4 05 F1 | 	add	objptr, #12
133c8     F2 1E 02 FB | 	rdlong	local01, objptr
133cc     04 E4 05 F1 | 	add	objptr, #4
133d0     F2 1E 62 FC | 	wrlong	local01, objptr
133d4                 | ' ppl:=ppl/xzoom  
133d4     28 E4 85 F1 | 	sub	objptr, #40
133d8     F2 5E 02 FB | 	rdlong	muldiva_, objptr
133dc     2C E4 05 F1 | 	add	objptr, #44
133e0     F2 60 02 FB | 	rdlong	muldivb_, objptr
133e4     01 E5 85 F1 | 	sub	objptr, #257
133e8     BA 00 A0 FD | 	call	#divide_
133ec     D5 E4 05 F1 | 	add	objptr, #213
133f0     F2 60 62 FC | 	wrlong	muldivb_, objptr
133f4                 | ' s_ppl:=ppl
133f4     1C E4 05 F1 | 	add	objptr, #28
133f8     F2 60 62 FC | 	wrlong	muldivb_, objptr
133fc     F1 E4 85 F1 | 	sub	objptr, #241
13400                 | ' waitms(20)							' wait 
13400     14 12 06 F6 | 	mov	arg01, #20
13404     9C 23 B0 FD | 	call	#__system___waitms
13408     A7 F0 03 F6 | 	mov	ptra, fp
1340c     B2 00 A0 FD | 	call	#popregs_
13410                 | _hg010b_spin2_setmode_ret
13410     2D 00 64 FD | 	ret
13414                 | 
13414                 | ' 
13414                 | ' 
13414                 | ' '****************************************************************************************************************
13414                 | ' '                                                                                                             	*
13414                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
13414                 | ' '                                                                                                             	*
13414                 | ' '****************************************************************************************************************
13414                 | ' 
13414                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
13414                 | _hg010b_spin2_makedl
13414                 | ' 
13414                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
13414                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
13414                 | ' repeat i from 0 to 11                                                           ' clear DL
13414     00 00 06 F6 | 	mov	_var01, #0
13418     E9 E5 05 F1 | 	add	objptr, #489
1341c     97 0E 48 FB | 	callpa	#(@LR__1561-@LR__1560)>>2,fcache_load_ptr_
13420                 | LR__1560
13420                 | '   displaylist[i]:=0 
13420     00 03 02 F6 | 	mov	_var02, _var01
13424     02 02 66 F0 | 	shl	_var02, #2
13428     F2 02 02 F1 | 	add	_var02, objptr
1342c     01 01 68 FC | 	wrlong	#0, _var02
13430     01 00 06 F1 | 	add	_var01, #1
13434     0C 00 56 F2 | 	cmps	_var01, #12 wc
13438     E4 FF 9F CD |  if_b	jmp	#LR__1560
1343c                 | LR__1561
1343c                 | '                         ' 
1343c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1343c     8C E5 85 F1 | 	sub	objptr, #396
13440     F2 02 02 FB | 	rdlong	_var02, objptr
13444     14 02 66 F0 | 	shl	_var02, #20
13448     01 02 06 F1 | 	add	_var02, #1
1344c     04 E4 85 F1 | 	sub	objptr, #4
13450     F2 00 02 FB | 	rdlong	_var01, objptr
13454     02 00 66 F0 | 	shl	_var01, #2
13458     04 00 66 F0 | 	shl	_var01, #4
1345c     00 03 02 F1 | 	add	_var02, _var01
13460     90 E5 05 F1 | 	add	objptr, #400
13464     F2 02 62 FC | 	wrlong	_var02, objptr
13468     E9 E5 85 F1 | 	sub	objptr, #489
1346c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1346c     F2 02 02 FB | 	rdlong	_var02, objptr
13470     04 02 66 F0 | 	shl	_var02, #4
13474     02 02 06 F1 | 	add	_var02, #2
13478     ED E5 05 F1 | 	add	objptr, #493
1347c     F2 02 62 FC | 	wrlong	_var02, objptr
13480                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
13480     04 E4 85 F1 | 	sub	objptr, #4
13484     F2 02 02 F6 | 	mov	_var02, objptr
13488     CD E5 85 F1 | 	sub	objptr, #461
1348c     F2 02 62 FC | 	wrlong	_var02, objptr
13490     1C E4 85 F1 | 	sub	objptr, #28
13494                 | _hg010b_spin2_makedl_ret
13494     2D 00 64 FD | 	ret
13498                 | 
13498                 | ' 
13498                 | ' 
13498                 | ' '****************************************************************************************************************
13498                 | ' '                                                                        					*
13498                 | ' '  Graphic primitives                                                    					*
13498                 | ' '                                                                        					*
13498                 | ' '****************************************************************************************************************
13498                 | ' 
13498                 | ' pub setspriteptr(num,ptr)
13498                 | _hg010b_spin2_setspriteptr
13498                 | ' long[@spr1ptr+12*num]:=ptr
13498     0D E5 05 F1 | 	add	objptr, #269
1349c     F2 00 02 F6 | 	mov	_var01, objptr
134a0     09 03 02 F6 | 	mov	_var02, arg01
134a4     01 02 66 F0 | 	shl	_var02, #1
134a8     09 03 02 F1 | 	add	_var02, arg01
134ac     02 02 66 F0 | 	shl	_var02, #2
134b0     01 01 02 F1 | 	add	_var01, _var02
134b4     00 15 62 FC | 	wrlong	arg02, _var01
134b8     0D E5 85 F1 | 	sub	objptr, #269
134bc                 | _hg010b_spin2_setspriteptr_ret
134bc     2D 00 64 FD | 	ret
134c0                 | 
134c0                 | ' 
134c0                 | ' pub setspritepos(num,x,y)
134c0                 | _hg010b_spin2_setspritepos
134c0                 | ' word[@spr1ptr+12*num+4]:=x
134c0     0D E5 05 F1 | 	add	objptr, #269
134c4     F2 00 02 F6 | 	mov	_var01, objptr
134c8     09 03 02 F6 | 	mov	_var02, arg01
134cc     01 02 66 F0 | 	shl	_var02, #1
134d0     09 03 02 F1 | 	add	_var02, arg01
134d4     02 02 66 F0 | 	shl	_var02, #2
134d8     01 01 02 F1 | 	add	_var01, _var02
134dc     04 00 06 F1 | 	add	_var01, #4
134e0     00 15 52 FC | 	wrword	arg02, _var01
134e4                 | ' word[@spr1ptr+12*num+6]:=y
134e4     F2 00 02 F6 | 	mov	_var01, objptr
134e8     09 03 02 F6 | 	mov	_var02, arg01
134ec     01 02 66 F0 | 	shl	_var02, #1
134f0     09 03 02 F1 | 	add	_var02, arg01
134f4     02 02 66 F0 | 	shl	_var02, #2
134f8     01 01 02 F1 | 	add	_var01, _var02
134fc     06 00 06 F1 | 	add	_var01, #6
13500     00 17 52 FC | 	wrword	arg03, _var01
13504     0D E5 85 F1 | 	sub	objptr, #269
13508                 | _hg010b_spin2_setspritepos_ret
13508     2D 00 64 FD | 	ret
1350c                 | 
1350c                 | ' 
1350c                 | ' pub setspritesize(num,w,h)
1350c                 | _hg010b_spin2_setspritesize
1350c                 | ' word[@spr1ptr+12*num+8]:=w
1350c     0D E5 05 F1 | 	add	objptr, #269
13510     F2 00 02 F6 | 	mov	_var01, objptr
13514     09 03 02 F6 | 	mov	_var02, arg01
13518     01 02 66 F0 | 	shl	_var02, #1
1351c     09 03 02 F1 | 	add	_var02, arg01
13520     02 02 66 F0 | 	shl	_var02, #2
13524     01 01 02 F1 | 	add	_var01, _var02
13528     08 00 06 F1 | 	add	_var01, #8
1352c     00 15 52 FC | 	wrword	arg02, _var01
13530                 | ' word[@spr1ptr+12*num+10]:=h
13530     F2 00 02 F6 | 	mov	_var01, objptr
13534     09 03 02 F6 | 	mov	_var02, arg01
13538     01 02 66 F0 | 	shl	_var02, #1
1353c     09 03 02 F1 | 	add	_var02, arg01
13540     02 02 66 F0 | 	shl	_var02, #2
13544     01 01 02 F1 | 	add	_var01, _var02
13548     0A 00 06 F1 | 	add	_var01, #10
1354c     00 17 52 FC | 	wrword	arg03, _var01
13550     0D E5 85 F1 | 	sub	objptr, #269
13554                 | _hg010b_spin2_setspritesize_ret
13554     2D 00 64 FD | 	ret
13558                 | 
13558                 | ' 
13558                 | ' 
13558                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
13558                 | ' 
13558                 | ' 
13558                 | ' pub putpixel(x,y,c)
13558                 | _hg010b_spin2_putpixel
13558     04 4A 05 F6 | 	mov	COUNT_, #4
1355c     A8 00 A0 FD | 	call	#pushregs_
13560     09 1F 02 F6 | 	mov	local01, arg01
13564                 | ' 
13564                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
13564     00 20 06 F6 | 	mov	local02, #0
13568     00 1E 56 F2 | 	cmps	local01, #0 wc
1356c     01 20 66 36 |  if_ae	neg	local02, #1
13570     E5 E4 05 F1 | 	add	objptr, #229
13574     F2 1A 02 FB | 	rdlong	arg05, objptr
13578     02 1A 66 F0 | 	shl	arg05, #2
1357c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
13580     11 23 A2 F1 | 	subx	local03, local03
13584     11 21 02 F5 | 	and	local02, local03
13588     00 22 06 F6 | 	mov	local03, #0
1358c     00 14 56 F2 | 	cmps	arg02, #0 wc
13590     01 22 66 36 |  if_ae	neg	local03, #1
13594     11 21 02 F5 | 	and	local02, local03
13598     04 E4 85 F1 | 	sub	objptr, #4
1359c     F2 22 02 FB | 	rdlong	local03, objptr
135a0     E1 E4 85 F1 | 	sub	objptr, #225
135a4     11 15 52 F2 | 	cmps	arg02, local03 wc
135a8     12 25 A2 F1 | 	subx	local04, local04
135ac     12 21 CA F7 | 	test	local02, local04 wz
135b0     48 00 90 AD |  if_e	jmp	#LR__1570
135b4     D9 E4 05 F1 | 	add	objptr, #217
135b8     F2 12 02 FB | 	rdlong	arg01, objptr
135bc     14 E4 05 F1 | 	add	objptr, #20
135c0     F2 24 02 FB | 	rdlong	local04, objptr
135c4     02 24 66 F0 | 	shl	local04, #2
135c8     0A 25 02 FD | 	qmul	local04, arg02
135cc                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
135cc     0B 15 02 F6 | 	mov	arg02, arg03
135d0     01 16 06 F6 | 	mov	arg03, #1
135d4     00 18 06 F6 | 	mov	arg04, #0
135d8     01 1A 06 F6 | 	mov	arg05, #1
135dc     0A 00 00 FF 
135e0     D3 E5 05 F1 | 	add	objptr, ##5587
135e4     18 24 62 FD | 	getqx	local04
135e8     0F 25 02 F1 | 	add	local04, local01
135ec     12 13 02 F1 | 	add	arg01, local04
135f0     08 15 B0 FD | 	call	#_psram_spin2_fill
135f4     0B 00 00 FF 
135f8     C0 E4 85 F1 | 	sub	objptr, ##5824
135fc                 | LR__1570
135fc     A7 F0 03 F6 | 	mov	ptra, fp
13600     B2 00 A0 FD | 	call	#popregs_
13604                 | _hg010b_spin2_putpixel_ret
13604     2D 00 64 FD | 	ret
13608                 | 
13608                 | ' 
13608                 | ' pub putpixel2(x,y,c)
13608                 | _hg010b_spin2_putpixel2
13608     02 4A 05 F6 | 	mov	COUNT_, #2
1360c     A8 00 A0 FD | 	call	#pushregs_
13610     D9 E4 05 F1 | 	add	objptr, #217
13614     F2 1E 02 FB | 	rdlong	local01, objptr
13618     14 E4 05 F1 | 	add	objptr, #20
1361c     F2 1A 02 FB | 	rdlong	arg05, objptr
13620     02 1A 66 F0 | 	shl	arg05, #2
13624     0A 1B 02 FD | 	qmul	arg05, arg02
13628                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13628     0B 15 02 F6 | 	mov	arg02, arg03
1362c     01 16 06 F6 | 	mov	arg03, #1
13630     00 18 06 F6 | 	mov	arg04, #0
13634     01 1A 06 F6 | 	mov	arg05, #1
13638     0A 00 00 FF 
1363c     D3 E5 05 F1 | 	add	objptr, ##5587
13640     18 20 62 FD | 	getqx	local02
13644     09 21 02 F1 | 	add	local02, arg01
13648     10 1F 02 F1 | 	add	local01, local02
1364c     0F 13 02 F6 | 	mov	arg01, local01
13650     A8 14 B0 FD | 	call	#_psram_spin2_fill
13654     0B 00 00 FF 
13658     C0 E4 85 F1 | 	sub	objptr, ##5824
1365c     A7 F0 03 F6 | 	mov	ptra, fp
13660     B2 00 A0 FD | 	call	#popregs_
13664                 | _hg010b_spin2_putpixel2_ret
13664     2D 00 64 FD | 	ret
13668                 | 
13668                 | ' 
13668                 | ' pub getpixel2(x,y): c 
13668                 | _hg010b_spin2_getpixel2
13668     02 4A 05 F6 | 	mov	COUNT_, #2
1366c     A8 00 A0 FD | 	call	#pushregs_
13670     0C F0 07 F1 | 	add	ptra, #12
13674     04 4E 05 F1 | 	add	fp, #4
13678     A7 12 62 FC | 	wrlong	arg01, fp
1367c     04 4E 05 F1 | 	add	fp, #4
13680     A7 14 62 FC | 	wrlong	arg02, fp
13684     08 4E 85 F1 | 	sub	fp, #8
13688     A7 00 68 FC | 	wrlong	#0, fp
1368c     A7 12 02 F6 | 	mov	arg01, fp
13690     D9 E4 05 F1 | 	add	objptr, #217
13694     F2 14 02 FB | 	rdlong	arg02, objptr
13698     14 E4 05 F1 | 	add	objptr, #20
1369c     F2 16 02 FB | 	rdlong	arg03, objptr
136a0     02 16 66 F0 | 	shl	arg03, #2
136a4     08 4E 05 F1 | 	add	fp, #8
136a8     A7 FA 01 FB | 	rdlong	result1, fp
136ac     FD 16 02 FD | 	qmul	arg03, result1
136b0                 | ' 
136b0                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
136b0     04 4E 85 F1 | 	sub	fp, #4
136b4     A7 1E 02 FB | 	rdlong	local01, fp
136b8     04 4E 85 F1 | 	sub	fp, #4
136bc     01 16 06 F6 | 	mov	arg03, #1
136c0     0A 00 00 FF 
136c4     D3 E5 05 F1 | 	add	objptr, ##5587
136c8     18 20 62 FD | 	getqx	local02
136cc     0F 21 02 F1 | 	add	local02, local01
136d0     10 15 02 F1 | 	add	arg02, local02
136d4     EC 12 B0 FD | 	call	#_psram_spin2_read1
136d8     0B 00 00 FF 
136dc     C0 E4 85 F1 | 	sub	objptr, ##5824
136e0                 | ' return c
136e0     A7 FA 01 FB | 	rdlong	result1, fp
136e4     A7 F0 03 F6 | 	mov	ptra, fp
136e8     B2 00 A0 FD | 	call	#popregs_
136ec                 | _hg010b_spin2_getpixel2_ret
136ec     2D 00 64 FD | 	ret
136f0                 | 
136f0                 | '   
136f0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
136f0                 | ' 
136f0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
136f0                 | _hg010b_spin2_fastline
136f0     02 4A 05 F6 | 	mov	COUNT_, #2
136f4     A8 00 A0 FD | 	call	#pushregs_
136f8     09 1F 02 F6 | 	mov	local01, arg01
136fc     0A 21 02 F6 | 	mov	local02, arg02
13700                 | ' 
13700                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
13700     00 16 56 F2 | 	cmps	arg03, #0 wc
13704     F4 00 90 CD |  if_b	jmp	#LR__1580
13708     01 00 00 FF 
1370c     26 E4 05 F1 | 	add	objptr, ##550
13710     F2 1A 02 FB | 	rdlong	arg05, objptr
13714     01 00 00 FF 
13718     26 E4 85 F1 | 	sub	objptr, ##550
1371c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
13720     D8 00 90 3D |  if_ae	jmp	#LR__1580
13724     00 1E 56 F2 | 	cmps	local01, #0 wc
13728     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1372c     CC 00 90 CD |  if_b	jmp	#LR__1580
13730     01 00 00 FF 
13734     22 E4 05 F1 | 	add	objptr, ##546
13738     F2 1A 02 FB | 	rdlong	arg05, objptr
1373c     01 00 00 FF 
13740     22 E4 85 F1 | 	sub	objptr, ##546
13744     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
13748     01 00 00 1F 
1374c     22 E4 05 11 |  if_a	add	objptr, ##546
13750     F2 12 02 1B |  if_a	rdlong	arg01, objptr
13754     01 00 00 1F 
13758     22 E4 85 11 |  if_a	sub	objptr, ##546
1375c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
13760                 | '   return
13760     98 00 90 1D |  if_a	jmp	#LR__1580
13764     10 1F 5A F2 | 	cmps	local01, local02 wcz
13768     0F 1B 02 16 |  if_a	mov	arg05, local01
1376c     10 1F 02 16 |  if_a	mov	local01, local02
13770     0D 21 02 16 |  if_a	mov	local02, arg05
13774     00 1E 56 F2 | 	cmps	local01, #0 wc
13778     00 1E 06 C6 |  if_b	mov	local01, #0
1377c     01 00 00 FF 
13780     22 E4 05 F1 | 	add	objptr, ##546
13784     F2 1A 02 FB | 	rdlong	arg05, objptr
13788     01 00 00 FF 
1378c     22 E4 85 F1 | 	sub	objptr, ##546
13790     0D 21 52 F2 | 	cmps	local02, arg05 wc
13794     01 00 00 3F 
13798     22 E4 05 31 |  if_ae	add	objptr, ##546
1379c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
137a0     01 00 00 3F 
137a4     22 E4 85 31 |  if_ae	sub	objptr, ##546
137a8     D9 E4 05 F1 | 	add	objptr, #217
137ac     F2 12 02 FB | 	rdlong	arg01, objptr
137b0     14 E4 05 F1 | 	add	objptr, #20
137b4     F2 1A 02 FB | 	rdlong	arg05, objptr
137b8     02 1A 66 F0 | 	shl	arg05, #2
137bc     0B 1B 02 FD | 	qmul	arg05, arg03
137c0                 | ' if x1>x2
137c0                 | '   x1,x2:=x2,x1
137c0                 | ' if x1<0 
137c0                 | '   x1:=0
137c0                 | ' if x2>=xres
137c0                 | '   x2:=xres-1  
137c0     01 20 86 31 |  if_ae	sub	local02, #1
137c4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
137c4     01 16 06 F6 | 	mov	arg03, #1
137c8     10 17 02 F1 | 	add	arg03, local02
137cc     0F 17 82 F1 | 	sub	arg03, local01
137d0     0C 15 02 F6 | 	mov	arg02, arg04
137d4     00 18 06 F6 | 	mov	arg04, #0
137d8     01 1A 06 F6 | 	mov	arg05, #1
137dc     0A 00 00 FF 
137e0     D3 E5 05 F1 | 	add	objptr, ##5587
137e4     18 20 62 FD | 	getqx	local02
137e8     0F 21 02 F1 | 	add	local02, local01
137ec     10 13 02 F1 | 	add	arg01, local02
137f0     08 13 B0 FD | 	call	#_psram_spin2_fill
137f4     0B 00 00 FF 
137f8     C0 E4 85 F1 | 	sub	objptr, ##5824
137fc                 | LR__1580
137fc     A7 F0 03 F6 | 	mov	ptra, fp
13800     B2 00 A0 FD | 	call	#popregs_
13804                 | _hg010b_spin2_fastline_ret
13804     2D 00 64 FD | 	ret
13808                 | 
13808                 | ' 
13808                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
13808                 | _hg010b_spin2_draw
13808     0E 4A 05 F6 | 	mov	COUNT_, #14
1380c     A8 00 A0 FD | 	call	#pushregs_
13810     09 1F 02 F6 | 	mov	local01, arg01
13814     0A 21 02 F6 | 	mov	local02, arg02
13818     0B 23 02 F6 | 	mov	local03, arg03
1381c     0C 25 02 F6 | 	mov	local04, arg04
13820     0D 27 02 F6 | 	mov	local05, arg05
13824                 | ' 
13824                 | ' if (y1==y2)
13824     12 21 0A F2 | 	cmp	local02, local04 wz
13828     18 00 90 5D |  if_ne	jmp	#LR__1590
1382c                 | '   fastline(x1,x2,y1,c)
1382c     0F 13 02 F6 | 	mov	arg01, local01
13830     11 15 02 F6 | 	mov	arg02, local03
13834     10 17 02 F6 | 	mov	arg03, local02
13838     13 19 02 F6 | 	mov	arg04, local05
1383c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
13840     F8 00 90 FD | 	jmp	#LR__1596
13844                 | LR__1590
13844                 | ' else  
13844                 | '   x:=x1
13844     0F 29 02 F6 | 	mov	local06, local01
13848                 | '   y:=y1
13848     10 2B 02 F6 | 	mov	local07, local02
1384c                 | ' 
1384c                 | '   if (x1<x2) 
1384c     11 1F 52 F2 | 	cmps	local01, local03 wc
13850                 | '     xi:=1
13850     01 2C 06 C6 |  if_b	mov	local08, #1
13854                 | '     dx:=x2-x1
13854     11 2F 02 C6 |  if_b	mov	local09, local03
13858     0F 2F 82 C1 |  if_b	sub	local09, local01
1385c                 | '   else
1385c                 | '     xi:=-1
1385c     01 2C 66 36 |  if_ae	neg	local08, #1
13860                 | '     dx:=x1-x2
13860     11 1F 82 31 |  if_ae	sub	local01, local03
13864     0F 2F 02 36 |  if_ae	mov	local09, local01
13868                 | '   
13868                 | '   if (y1<y2) 
13868     12 21 52 F2 | 	cmps	local02, local04 wc
1386c                 | '     yi:=1
1386c     01 30 06 C6 |  if_b	mov	local10, #1
13870                 | '     dy:=y2-y1
13870     12 33 02 C6 |  if_b	mov	local11, local04
13874     10 33 82 C1 |  if_b	sub	local11, local02
13878                 | '   else
13878                 | '     yi:=-1
13878     01 30 66 36 |  if_ae	neg	local10, #1
1387c                 | '     dy:=y1-y2
1387c     12 21 82 31 |  if_ae	sub	local02, local04
13880     10 33 02 36 |  if_ae	mov	local11, local02
13884                 | ' 
13884                 | '   putpixel(x,y,c)
13884     13 17 02 F6 | 	mov	arg03, local05
13888     14 13 02 F6 | 	mov	arg01, local06
1388c     15 15 02 F6 | 	mov	arg02, local07
13890     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
13894                 | ' 
13894                 | '   if (dx>dy)
13894     19 2F 5A F2 | 	cmps	local09, local11 wcz
13898     50 00 90 ED |  if_be	jmp	#LR__1592
1389c                 | '     ai:=(dy-dx)*2
1389c     19 35 02 F6 | 	mov	local12, local11
138a0     17 35 82 F1 | 	sub	local12, local09
138a4     01 34 66 F0 | 	shl	local12, #1
138a8                 | '     bi:=dy*2
138a8     01 32 66 F0 | 	shl	local11, #1
138ac     19 37 02 F6 | 	mov	local13, local11
138b0                 | '     d:= bi-dx
138b0     1B 39 02 F6 | 	mov	local14, local13
138b4     17 39 82 F1 | 	sub	local14, local09
138b8                 | '     repeat while (x<>x2) 
138b8                 | LR__1591
138b8     11 29 0A F2 | 	cmp	local06, local03 wz
138bc     7C 00 90 AD |  if_e	jmp	#LR__1595
138c0                 | '       if (d>=0) 
138c0     00 38 56 F2 | 	cmps	local14, #0 wc
138c4                 | '         x+=xi
138c4     16 29 02 31 |  if_ae	add	local06, local08
138c8                 | '         y+=yi
138c8     18 2B 02 31 |  if_ae	add	local07, local10
138cc                 | '         d+=ai
138cc     1A 39 02 31 |  if_ae	add	local14, local12
138d0                 | '       else
138d0                 | '         d+=bi
138d0     1B 39 02 C1 |  if_b	add	local14, local13
138d4                 | '         x+=xi
138d4     16 29 02 C1 |  if_b	add	local06, local08
138d8                 | '       putpixel(x,y,c)
138d8     14 13 02 F6 | 	mov	arg01, local06
138dc     15 15 02 F6 | 	mov	arg02, local07
138e0     13 17 02 F6 | 	mov	arg03, local05
138e4     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
138e8     CC FF 9F FD | 	jmp	#LR__1591
138ec                 | LR__1592
138ec                 | '   else
138ec                 | '     ai:=(dx-dy)*2
138ec     17 35 02 F6 | 	mov	local12, local09
138f0     19 35 82 F1 | 	sub	local12, local11
138f4     01 34 66 F0 | 	shl	local12, #1
138f8                 | '     bi:=dx*2
138f8     01 2E 66 F0 | 	shl	local09, #1
138fc     17 37 02 F6 | 	mov	local13, local09
13900                 | '     d:=bi-dy
13900     1B 39 02 F6 | 	mov	local14, local13
13904     19 39 82 F1 | 	sub	local14, local11
13908                 | '     repeat while (y<>y2)
13908                 | LR__1593
13908     12 2B 0A F2 | 	cmp	local07, local04 wz
1390c     2C 00 90 AD |  if_e	jmp	#LR__1594
13910                 | '       if (d>=0)
13910     00 38 56 F2 | 	cmps	local14, #0 wc
13914                 | '         x+=xi
13914     16 29 02 31 |  if_ae	add	local06, local08
13918                 | '         y+=yi
13918     18 2B 02 31 |  if_ae	add	local07, local10
1391c                 | '         d+=ai
1391c     1A 39 02 31 |  if_ae	add	local14, local12
13920                 | '       else
13920                 | '         d+=bi
13920     1B 39 02 C1 |  if_b	add	local14, local13
13924                 | '         y+=yi
13924     18 2B 02 C1 |  if_b	add	local07, local10
13928                 | '       putpixel(x, y,c)
13928     14 13 02 F6 | 	mov	arg01, local06
1392c     15 15 02 F6 | 	mov	arg02, local07
13930     13 17 02 F6 | 	mov	arg03, local05
13934     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
13938     CC FF 9F FD | 	jmp	#LR__1593
1393c                 | LR__1594
1393c                 | LR__1595
1393c                 | LR__1596
1393c     A7 F0 03 F6 | 	mov	ptra, fp
13940     B2 00 A0 FD | 	call	#popregs_
13944                 | _hg010b_spin2_draw_ret
13944     2D 00 64 FD | 	ret
13948                 | 
13948                 | '  
13948                 | ' pub fillpush(val) 
13948                 | _hg010b_spin2_fillpush
13948                 | ' fillstack[fillptr]:=val
13948     0B 00 00 FF 
1394c     B6 E4 05 F1 | 	add	objptr, ##5814
13950     F2 00 02 FB | 	rdlong	_var01, objptr
13954     02 00 66 F0 | 	shl	_var01, #2
13958     0A 00 00 FF 
1395c     00 E4 85 F1 | 	sub	objptr, ##5120
13960     F2 00 02 F1 | 	add	_var01, objptr
13964     00 13 62 FC | 	wrlong	arg01, _var01
13968                 | ' fillptr+=1   
13968     0A 00 00 FF 
1396c     00 E4 05 F1 | 	add	objptr, ##5120
13970     F2 00 02 FB | 	rdlong	_var01, objptr
13974     01 00 06 F1 | 	add	_var01, #1
13978     F2 00 62 FC | 	wrlong	_var01, objptr
1397c     0B 00 00 FF 
13980     B6 E4 85 F1 | 	sub	objptr, ##5814
13984                 | _hg010b_spin2_fillpush_ret
13984     2D 00 64 FD | 	ret
13988                 | 
13988                 | ' 
13988                 | '     
13988                 | ' pub fillpop() : val
13988                 | _hg010b_spin2_fillpop
13988                 | ' 
13988                 | ' fillptr-=1
13988     0B 00 00 FF 
1398c     B6 E4 05 F1 | 	add	objptr, ##5814
13990     F2 FA 01 FB | 	rdlong	result1, objptr
13994     01 FA 85 F1 | 	sub	result1, #1
13998     F2 FA 61 FC | 	wrlong	result1, objptr
1399c                 | ' if fillptr<0
1399c     0B 00 00 FF 
139a0     B6 E4 85 F1 | 	sub	objptr, ##5814
139a4     00 FA 55 F2 | 	cmps	result1, #0 wc
139a8                 | '   fillptr:=0
139a8     0B 00 00 CF 
139ac     B6 E4 05 C1 |  if_b	add	objptr, ##5814
139b0     F2 00 68 CC |  if_b	wrlong	#0, objptr
139b4     0B 00 00 CF 
139b8     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
139bc                 | '   val:=-12345
139bc     E7 FF 7F CF 
139c0     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
139c4     28 00 90 CD |  if_b	jmp	#LR__1600
139c8                 | ' else 
139c8                 | '   val:=fillstack[fillptr]
139c8     0B 00 00 FF 
139cc     B6 E4 05 F1 | 	add	objptr, ##5814
139d0     F2 00 02 FB | 	rdlong	_var01, objptr
139d4     02 00 66 F0 | 	shl	_var01, #2
139d8     0A 00 00 FF 
139dc     00 E4 85 F1 | 	sub	objptr, ##5120
139e0     F2 00 02 F1 | 	add	_var01, objptr
139e4     00 01 02 FB | 	rdlong	_var01, _var01
139e8     01 00 00 FF 
139ec     B6 E4 85 F1 | 	sub	objptr, ##694
139f0                 | LR__1600
139f0                 | ' return val
139f0     00 FB 01 F6 | 	mov	result1, _var01
139f4                 | _hg010b_spin2_fillpop_ret
139f4     2D 00 64 FD | 	ret
139f8                 | 
139f8                 | ' 
139f8                 | '       
139f8                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
139f8                 | _hg010b_spin2_fill
139f8     0B 4A 05 F6 | 	mov	COUNT_, #11
139fc     A8 00 A0 FD | 	call	#pushregs_
13a00                 | ' 
13a00                 | ' newcolor:=newcolor & 255
13a00     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
13a04                 | ' oldcolor:=oldcolor & 255
13a04     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
13a08                 | ' 
13a08                 | ' if (oldcolor == newcolor) 
13a08     0F 21 0A F2 | 	cmp	local02, local01 wz
13a0c                 | '   return
13a0c     7C 02 90 AD |  if_e	jmp	#LR__1619
13a10                 | ' 
13a10                 | ' fillptr:=0
13a10     0B 00 00 FF 
13a14     B6 E4 05 F1 | 	add	objptr, ##5814
13a18     F2 00 68 FC | 	wrlong	#0, objptr
13a1c                 | ' fillmax:=0
13a1c     04 E4 05 F1 | 	add	objptr, #4
13a20     F2 00 68 FC | 	wrlong	#0, objptr
13a24     0B 00 00 FF 
13a28     BA E4 85 F1 | 	sub	objptr, ##5818
13a2c                 | ' fillpush(x)
13a2c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
13a30                 | ' fillpush(y)
13a30     0A 13 02 F6 | 	mov	arg01, arg02
13a34     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
13a38                 | ' y:=fillpop()
13a38     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
13a3c     FD 22 02 F6 | 	mov	local03, result1
13a40                 | ' x:=fillpop()
13a40     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
13a44     FD 24 02 F6 | 	mov	local04, result1
13a48                 | ' pinhigh(38)
13a48     59 4C 64 FD | 	drvh	#38
13a4c                 | ' repeat while (x>-1)       
13a4c                 | LR__1610
13a4c     00 24 56 F2 | 	cmps	local04, #0 wc
13a50     34 02 90 CD |  if_b	jmp	#LR__1618
13a54                 | '   pintoggle(39)
13a54     5F 4E 64 FD | 	drvnot	#39
13a58                 | '   x1 := x
13a58     12 27 02 F6 | 	mov	local05, local04
13a5c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
13a5c                 | LR__1611
13a5c     00 28 06 F6 | 	mov	local06, #0
13a60     00 2A 06 F6 | 	mov	local07, #0
13a64     00 26 56 F2 | 	cmps	local05, #0 wc
13a68     01 2A 66 36 |  if_ae	neg	local07, #1
13a6c     00 2A 0E F2 | 	cmp	local07, #0 wz
13a70     00 28 26 56 |  if_ne	not	local06, #0
13a74     00 2C 06 F6 | 	mov	local08, #0
13a78     00 2E 06 F6 | 	mov	local09, #0
13a7c     11 15 02 F6 | 	mov	arg02, local03
13a80     13 13 02 F6 | 	mov	arg01, local05
13a84     E0 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13a88     10 FB 09 F2 | 	cmp	result1, local02 wz
13a8c     00 2E 26 A6 |  if_e	not	local09, #0
13a90     00 2E 0E F2 | 	cmp	local09, #0 wz
13a94     00 2C 26 56 |  if_ne	not	local08, #0
13a98     16 29 CA F7 | 	test	local06, local08 wz
13a9c                 | '     x1--
13a9c     01 26 86 51 |  if_ne	sub	local05, #1
13aa0     B8 FF 9F 5D |  if_ne	jmp	#LR__1611
13aa4                 | '   x1++
13aa4     01 26 06 F1 | 	add	local05, #1
13aa8                 | '   spanabove := 0
13aa8     00 30 06 F6 | 	mov	local10, #0
13aac                 | '   spanbelow := 0
13aac     00 32 06 F6 | 	mov	local11, #0
13ab0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
13ab0                 | LR__1612
13ab0     00 28 06 F6 | 	mov	local06, #0
13ab4     02 00 00 FF 
13ab8     00 26 56 F2 | 	cmps	local05, ##1024 wc
13abc     00 28 26 C6 |  if_b	not	local06, #0
13ac0     00 2C 06 F6 | 	mov	local08, #0
13ac4     00 2E 06 F6 | 	mov	local09, #0
13ac8     11 15 02 F6 | 	mov	arg02, local03
13acc     13 13 02 F6 | 	mov	arg01, local05
13ad0     94 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13ad4     10 FB 09 F2 | 	cmp	result1, local02 wz
13ad8     00 2E 26 A6 |  if_e	not	local09, #0
13adc     00 2E 0E F2 | 	cmp	local09, #0 wz
13ae0     00 2C 26 56 |  if_ne	not	local08, #0
13ae4     16 29 CA F7 | 	test	local06, local08 wz
13ae8     88 01 90 AD |  if_e	jmp	#LR__1617
13aec                 | '     putpixel2 (x1,y, newcolor & 255)
13aec     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
13af0     13 13 02 F6 | 	mov	arg01, local05
13af4     11 15 02 F6 | 	mov	arg02, local03
13af8     0C FB BF FD | 	call	#_hg010b_spin2_putpixel2
13afc                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
13afc     00 28 06 F6 | 	mov	local06, #0
13b00     00 2A 06 F6 | 	mov	local07, #0
13b04     00 30 0E F2 | 	cmp	local10, #0 wz
13b08     01 22 56 A2 |  if_e	cmps	local03, #1 wc
13b0c     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
13b10     00 2A 0E F2 | 	cmp	local07, #0 wz
13b14     00 28 26 56 |  if_ne	not	local06, #0
13b18     00 2C 06 F6 | 	mov	local08, #0
13b1c     00 2E 06 F6 | 	mov	local09, #0
13b20     11 15 02 F6 | 	mov	arg02, local03
13b24     01 14 86 F1 | 	sub	arg02, #1
13b28     13 13 02 F6 | 	mov	arg01, local05
13b2c     38 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13b30     10 FB 09 F2 | 	cmp	result1, local02 wz
13b34     00 2E 26 A6 |  if_e	not	local09, #0
13b38     00 2E 0E F2 | 	cmp	local09, #0 wz
13b3c     00 2C 26 56 |  if_ne	not	local08, #0
13b40     16 29 CA F7 | 	test	local06, local08 wz
13b44     1C 00 90 AD |  if_e	jmp	#LR__1613
13b48                 | '       fillpush(x1)
13b48     13 13 02 F6 | 	mov	arg01, local05
13b4c     F8 FD BF FD | 	call	#_hg010b_spin2_fillpush
13b50                 | '       fillpush(y-1)
13b50     11 13 02 F6 | 	mov	arg01, local03
13b54     01 12 86 F1 | 	sub	arg01, #1
13b58     EC FD BF FD | 	call	#_hg010b_spin2_fillpush
13b5c                 | '       spanAbove := 1 
13b5c     01 30 06 F6 | 	mov	local10, #1
13b60     4C 00 90 FD | 	jmp	#LR__1614
13b64                 | LR__1613
13b64                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
13b64     00 28 06 F6 | 	mov	local06, #0
13b68     00 2A 06 F6 | 	mov	local07, #0
13b6c     00 30 0E F2 | 	cmp	local10, #0 wz
13b70     01 22 56 52 |  if_ne	cmps	local03, #1 wc
13b74     01 2A 66 16 |  if_a	neg	local07, #1
13b78     00 2A 0E F2 | 	cmp	local07, #0 wz
13b7c     00 28 26 56 |  if_ne	not	local06, #0
13b80     00 2C 06 F6 | 	mov	local08, #0
13b84     00 2E 06 F6 | 	mov	local09, #0
13b88     11 15 02 F6 | 	mov	arg02, local03
13b8c     01 14 86 F1 | 	sub	arg02, #1
13b90     13 13 02 F6 | 	mov	arg01, local05
13b94     D0 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13b98     10 FB 09 F2 | 	cmp	result1, local02 wz
13b9c     00 2E 26 56 |  if_ne	not	local09, #0
13ba0     00 2E 0E F2 | 	cmp	local09, #0 wz
13ba4     00 2C 26 56 |  if_ne	not	local08, #0
13ba8     16 29 CA F7 | 	test	local06, local08 wz
13bac                 | '       spanAbove := 0 
13bac     00 30 06 56 |  if_ne	mov	local10, #0
13bb0                 | LR__1614
13bb0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
13bb0     00 28 06 F6 | 	mov	local06, #0
13bb4     00 2A 06 F6 | 	mov	local07, #0
13bb8     00 32 0E F2 | 	cmp	local11, #0 wz
13bbc     01 00 00 AF 
13bc0     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
13bc4     01 2A 66 86 |  if_c_and_z	neg	local07, #1
13bc8     00 2A 0E F2 | 	cmp	local07, #0 wz
13bcc     00 28 26 56 |  if_ne	not	local06, #0
13bd0     00 2C 06 F6 | 	mov	local08, #0
13bd4     00 2E 06 F6 | 	mov	local09, #0
13bd8     11 15 02 F6 | 	mov	arg02, local03
13bdc     01 14 06 F1 | 	add	arg02, #1
13be0     13 13 02 F6 | 	mov	arg01, local05
13be4     80 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13be8     10 FB 09 F2 | 	cmp	result1, local02 wz
13bec     00 2E 26 A6 |  if_e	not	local09, #0
13bf0     00 2E 0E F2 | 	cmp	local09, #0 wz
13bf4     00 2C 26 56 |  if_ne	not	local08, #0
13bf8     16 29 CA F7 | 	test	local06, local08 wz
13bfc     1C 00 90 AD |  if_e	jmp	#LR__1615
13c00                 | '       fillpush(x1)
13c00     13 13 02 F6 | 	mov	arg01, local05
13c04     40 FD BF FD | 	call	#_hg010b_spin2_fillpush
13c08                 | '       fillpush(y + 1)
13c08     11 13 02 F6 | 	mov	arg01, local03
13c0c     01 12 06 F1 | 	add	arg01, #1
13c10     34 FD BF FD | 	call	#_hg010b_spin2_fillpush
13c14                 | '       spanBelow := 1
13c14     01 32 06 F6 | 	mov	local11, #1
13c18     50 00 90 FD | 	jmp	#LR__1616
13c1c                 | LR__1615
13c1c                 | '     elseif((spanBelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
13c1c     00 28 06 F6 | 	mov	local06, #0
13c20     00 2A 06 F6 | 	mov	local07, #0
13c24     00 32 0E F2 | 	cmp	local11, #0 wz
13c28     01 00 00 5F 
13c2c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
13c30     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
13c34     00 2A 0E F2 | 	cmp	local07, #0 wz
13c38     00 28 26 56 |  if_ne	not	local06, #0
13c3c     00 2C 06 F6 | 	mov	local08, #0
13c40     00 2E 06 F6 | 	mov	local09, #0
13c44     11 15 02 F6 | 	mov	arg02, local03
13c48     01 14 06 F1 | 	add	arg02, #1
13c4c     13 13 02 F6 | 	mov	arg01, local05
13c50     14 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13c54     10 FB 09 F2 | 	cmp	result1, local02 wz
13c58     00 2E 26 56 |  if_ne	not	local09, #0
13c5c     00 2E 0E F2 | 	cmp	local09, #0 wz
13c60     00 2C 26 56 |  if_ne	not	local08, #0
13c64     16 29 CA F7 | 	test	local06, local08 wz
13c68                 | '       spanBelow := 0
13c68     00 32 06 56 |  if_ne	mov	local11, #0
13c6c                 | LR__1616
13c6c                 | '     x1++
13c6c     01 26 06 F1 | 	add	local05, #1
13c70     3C FE 9F FD | 	jmp	#LR__1612
13c74                 | LR__1617
13c74                 | '   y:=fillpop()
13c74     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
13c78     FD 22 02 F6 | 	mov	local03, result1
13c7c                 | '   x:=fillpop()
13c7c     08 FD BF FD | 	call	#_hg010b_spin2_fillpop
13c80     FD 24 02 F6 | 	mov	local04, result1
13c84     C4 FD 9F FD | 	jmp	#LR__1610
13c88                 | LR__1618
13c88                 | ' pinlow(38)    
13c88     58 4C 64 FD | 	drvl	#38
13c8c                 | LR__1619
13c8c     A7 F0 03 F6 | 	mov	ptra, fp
13c90     B2 00 A0 FD | 	call	#popregs_
13c94                 | _hg010b_spin2_fill_ret
13c94     2D 00 64 FD | 	ret
13c98                 | 
13c98                 | ' 
13c98                 | ' '-- A filled circle -----------------------------------------------------
13c98                 | ' 
13c98                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
13c98                 | _hg010b_spin2_fcircle
13c98     08 4A 05 F6 | 	mov	COUNT_, #8
13c9c     A8 00 A0 FD | 	call	#pushregs_
13ca0     0B 1F 02 F6 | 	mov	local01, arg03
13ca4     FF FF 7F FF 
13ca8     FE 1F 06 FD | 	qmul	local01, ##-2
13cac     09 21 02 F6 | 	mov	local02, arg01
13cb0     0A 23 02 F6 | 	mov	local03, arg02
13cb4     0C 25 02 F6 | 	mov	local04, arg04
13cb8                 | ' 
13cb8                 | ' d:=5-4*r
13cb8     0F 19 02 F6 | 	mov	arg04, local01
13cbc     02 18 66 F0 | 	shl	arg04, #2
13cc0     05 26 06 F6 | 	mov	local05, #5
13cc4     0C 27 82 F1 | 	sub	local05, arg04
13cc8                 | ' x:=0
13cc8     00 28 06 F6 | 	mov	local06, #0
13ccc                 | ' y:=r
13ccc                 | ' da:=(-2*r+5)*4
13ccc                 | ' db:=3*4
13ccc     0C 2A 06 F6 | 	mov	local07, #12
13cd0                 | ' repeat while (x<=y) 
13cd0     18 2C 62 FD | 	getqx	local08
13cd4     05 2C 06 F1 | 	add	local08, #5
13cd8     02 2C 66 F0 | 	shl	local08, #2
13cdc                 | LR__1620
13cdc     0F 29 5A F2 | 	cmps	local06, local01 wcz
13ce0     B4 00 90 1D |  if_a	jmp	#LR__1622
13ce4                 | '   fastline(x0-x,x0+x,y0-y,c)
13ce4     10 13 02 F6 | 	mov	arg01, local02
13ce8     14 13 82 F1 | 	sub	arg01, local06
13cec     10 15 02 F6 | 	mov	arg02, local02
13cf0     14 15 02 F1 | 	add	arg02, local06
13cf4     11 17 02 F6 | 	mov	arg03, local03
13cf8     0F 17 82 F1 | 	sub	arg03, local01
13cfc     12 19 02 F6 | 	mov	arg04, local04
13d00     EC F9 BF FD | 	call	#_hg010b_spin2_fastline
13d04                 | '   fastline(x0-x,x0+x,y0+y,c)
13d04     10 13 02 F6 | 	mov	arg01, local02
13d08     14 13 82 F1 | 	sub	arg01, local06
13d0c     10 15 02 F6 | 	mov	arg02, local02
13d10     14 15 02 F1 | 	add	arg02, local06
13d14     11 17 02 F6 | 	mov	arg03, local03
13d18     0F 17 02 F1 | 	add	arg03, local01
13d1c     12 19 02 F6 | 	mov	arg04, local04
13d20     CC F9 BF FD | 	call	#_hg010b_spin2_fastline
13d24                 | '   fastline(x0-y,x0+y,y0-x,c)
13d24     10 13 02 F6 | 	mov	arg01, local02
13d28     0F 13 82 F1 | 	sub	arg01, local01
13d2c     10 15 02 F6 | 	mov	arg02, local02
13d30     0F 15 02 F1 | 	add	arg02, local01
13d34     11 17 02 F6 | 	mov	arg03, local03
13d38     14 17 82 F1 | 	sub	arg03, local06
13d3c     12 19 02 F6 | 	mov	arg04, local04
13d40     AC F9 BF FD | 	call	#_hg010b_spin2_fastline
13d44                 | '   fastline(x0-y,x0+y,y0+x,c)
13d44     10 13 02 F6 | 	mov	arg01, local02
13d48     0F 13 82 F1 | 	sub	arg01, local01
13d4c     10 15 02 F6 | 	mov	arg02, local02
13d50     0F 15 02 F1 | 	add	arg02, local01
13d54     11 17 02 F6 | 	mov	arg03, local03
13d58     14 17 02 F1 | 	add	arg03, local06
13d5c     12 19 02 F6 | 	mov	arg04, local04
13d60     8C F9 BF FD | 	call	#_hg010b_spin2_fastline
13d64                 | '   if d>0 
13d64     01 26 56 F2 | 	cmps	local05, #1 wc
13d68     18 00 90 CD |  if_b	jmp	#LR__1621
13d6c                 | '     d+=da
13d6c     16 27 02 F1 | 	add	local05, local08
13d70                 | '     y-=1
13d70     01 1E 86 F1 | 	sub	local01, #1
13d74                 | '     x+=1
13d74     01 28 06 F1 | 	add	local06, #1
13d78                 | '     da+=4*4
13d78     10 2C 06 F1 | 	add	local08, #16
13d7c                 | '     db+=2*4
13d7c     08 2A 06 F1 | 	add	local07, #8
13d80     58 FF 9F FD | 	jmp	#LR__1620
13d84                 | LR__1621
13d84                 | '   else
13d84                 | '     d+=db
13d84     15 27 02 F1 | 	add	local05, local07
13d88                 | '     x+=1
13d88     01 28 06 F1 | 	add	local06, #1
13d8c                 | '     da+=2*4
13d8c     08 2C 06 F1 | 	add	local08, #8
13d90                 | '     db+=2*4
13d90     08 2A 06 F1 | 	add	local07, #8
13d94     44 FF 9F FD | 	jmp	#LR__1620
13d98                 | LR__1622
13d98     A7 F0 03 F6 | 	mov	ptra, fp
13d9c     B2 00 A0 FD | 	call	#popregs_
13da0                 | _hg010b_spin2_fcircle_ret
13da0     2D 00 64 FD | 	ret
13da4                 | 
13da4                 | '  
13da4                 | ' '-- A circle ------------------------------------------------------------ 
13da4                 | '  
13da4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
13da4                 | _hg010b_spin2_circle
13da4     08 4A 05 F6 | 	mov	COUNT_, #8
13da8     A8 00 A0 FD | 	call	#pushregs_
13dac     0B 1F 02 F6 | 	mov	local01, arg03
13db0     FF FF 7F FF 
13db4     FE 1F 06 FD | 	qmul	local01, ##-2
13db8     09 21 02 F6 | 	mov	local02, arg01
13dbc     0A 23 02 F6 | 	mov	local03, arg02
13dc0     0C 25 02 F6 | 	mov	local04, arg04
13dc4                 | ' 
13dc4                 | '  
13dc4                 | ' d:=5-4*r
13dc4     0F 19 02 F6 | 	mov	arg04, local01
13dc8     02 18 66 F0 | 	shl	arg04, #2
13dcc     05 26 06 F6 | 	mov	local05, #5
13dd0     0C 27 82 F1 | 	sub	local05, arg04
13dd4                 | ' x:=0
13dd4     00 28 06 F6 | 	mov	local06, #0
13dd8                 | ' y:=r
13dd8                 | ' da:=(-2*r+5)*4
13dd8                 | ' db:=3*4
13dd8     0C 2A 06 F6 | 	mov	local07, #12
13ddc                 | ' repeat while (x<=y) 
13ddc     18 2C 62 FD | 	getqx	local08
13de0     05 2C 06 F1 | 	add	local08, #5
13de4     02 2C 66 F0 | 	shl	local08, #2
13de8                 | LR__1630
13de8     0F 29 5A F2 | 	cmps	local06, local01 wcz
13dec     F4 00 90 1D |  if_a	jmp	#LR__1632
13df0                 | '   putpixel(x0-x,y0-y,c)
13df0     10 13 02 F6 | 	mov	arg01, local02
13df4     14 13 82 F1 | 	sub	arg01, local06
13df8     11 15 02 F6 | 	mov	arg02, local03
13dfc     0F 15 82 F1 | 	sub	arg02, local01
13e00     12 17 02 F6 | 	mov	arg03, local04
13e04     50 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13e08                 | '   putpixel(x0-x,y0+y,c)
13e08     10 13 02 F6 | 	mov	arg01, local02
13e0c     14 13 82 F1 | 	sub	arg01, local06
13e10     11 15 02 F6 | 	mov	arg02, local03
13e14     0F 15 02 F1 | 	add	arg02, local01
13e18     12 17 02 F6 | 	mov	arg03, local04
13e1c     38 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13e20                 | '   putpixel(x0+x,y0-y,c)
13e20     10 13 02 F6 | 	mov	arg01, local02
13e24     14 13 02 F1 | 	add	arg01, local06
13e28     11 15 02 F6 | 	mov	arg02, local03
13e2c     0F 15 82 F1 | 	sub	arg02, local01
13e30     12 17 02 F6 | 	mov	arg03, local04
13e34     20 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13e38                 | '   putpixel(x0+x,y0+y,c)
13e38     10 13 02 F6 | 	mov	arg01, local02
13e3c     14 13 02 F1 | 	add	arg01, local06
13e40     11 15 02 F6 | 	mov	arg02, local03
13e44     0F 15 02 F1 | 	add	arg02, local01
13e48     12 17 02 F6 | 	mov	arg03, local04
13e4c     08 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13e50                 | '   putpixel(x0-y,y0-x,c)
13e50     10 13 02 F6 | 	mov	arg01, local02
13e54     0F 13 82 F1 | 	sub	arg01, local01
13e58     11 15 02 F6 | 	mov	arg02, local03
13e5c     14 15 82 F1 | 	sub	arg02, local06
13e60     12 17 02 F6 | 	mov	arg03, local04
13e64     F0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13e68                 | '   putpixel(x0-y,y0+x,c)
13e68     10 13 02 F6 | 	mov	arg01, local02
13e6c     0F 13 82 F1 | 	sub	arg01, local01
13e70     11 15 02 F6 | 	mov	arg02, local03
13e74     14 15 02 F1 | 	add	arg02, local06
13e78     12 17 02 F6 | 	mov	arg03, local04
13e7c     D8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13e80                 | '   putpixel(x0+y,y0-x,c)
13e80     10 13 02 F6 | 	mov	arg01, local02
13e84     0F 13 02 F1 | 	add	arg01, local01
13e88     11 15 02 F6 | 	mov	arg02, local03
13e8c     14 15 82 F1 | 	sub	arg02, local06
13e90     12 17 02 F6 | 	mov	arg03, local04
13e94     C0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13e98                 | '   putpixel(x0+y,y0+x,c)
13e98     10 13 02 F6 | 	mov	arg01, local02
13e9c     0F 13 02 F1 | 	add	arg01, local01
13ea0     11 15 02 F6 | 	mov	arg02, local03
13ea4     14 15 02 F1 | 	add	arg02, local06
13ea8     12 17 02 F6 | 	mov	arg03, local04
13eac     A8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13eb0                 | '   if d>0 
13eb0     01 26 56 F2 | 	cmps	local05, #1 wc
13eb4     18 00 90 CD |  if_b	jmp	#LR__1631
13eb8                 | '     d+=da
13eb8     16 27 02 F1 | 	add	local05, local08
13ebc                 | '     y-=1
13ebc     01 1E 86 F1 | 	sub	local01, #1
13ec0                 | '     x+=1
13ec0     01 28 06 F1 | 	add	local06, #1
13ec4                 | '     da+=4*4
13ec4     10 2C 06 F1 | 	add	local08, #16
13ec8                 | '     db+=2*4
13ec8     08 2A 06 F1 | 	add	local07, #8
13ecc     18 FF 9F FD | 	jmp	#LR__1630
13ed0                 | LR__1631
13ed0                 | '   else
13ed0                 | '     d+=db
13ed0     15 27 02 F1 | 	add	local05, local07
13ed4                 | '     x+=1
13ed4     01 28 06 F1 | 	add	local06, #1
13ed8                 | '     da+=2*4
13ed8     08 2C 06 F1 | 	add	local08, #8
13edc                 | '     db+=2*4
13edc     08 2A 06 F1 | 	add	local07, #8
13ee0     04 FF 9F FD | 	jmp	#LR__1630
13ee4                 | LR__1632
13ee4     A7 F0 03 F6 | 	mov	ptra, fp
13ee8     B2 00 A0 FD | 	call	#popregs_
13eec                 | _hg010b_spin2_circle_ret
13eec     2D 00 64 FD | 	ret
13ef0                 | 
13ef0                 | '     
13ef0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
13ef0                 | ' 
13ef0                 | ' pub frame(x1,y1,x2,y2,c)
13ef0                 | _hg010b_spin2_frame
13ef0     05 4A 05 F6 | 	mov	COUNT_, #5
13ef4     A8 00 A0 FD | 	call	#pushregs_
13ef8     09 1F 02 F6 | 	mov	local01, arg01
13efc     0A 21 02 F6 | 	mov	local02, arg02
13f00     0B 23 02 F6 | 	mov	local03, arg03
13f04     0C 25 02 F6 | 	mov	local04, arg04
13f08     0D 27 02 F6 | 	mov	local05, arg05
13f0c                 | ' 
13f0c                 | ' fastline(x1,x2,y1,c)
13f0c     0F 13 02 F6 | 	mov	arg01, local01
13f10     11 15 02 F6 | 	mov	arg02, local03
13f14     10 17 02 F6 | 	mov	arg03, local02
13f18     13 19 02 F6 | 	mov	arg04, local05
13f1c     D0 F7 BF FD | 	call	#_hg010b_spin2_fastline
13f20                 | ' fastline(x1,x2,y2,c)
13f20     0F 13 02 F6 | 	mov	arg01, local01
13f24     11 15 02 F6 | 	mov	arg02, local03
13f28     12 17 02 F6 | 	mov	arg03, local04
13f2c     13 19 02 F6 | 	mov	arg04, local05
13f30     BC F7 BF FD | 	call	#_hg010b_spin2_fastline
13f34                 | ' line(x1,y1,x1,y2,c)
13f34     0F 13 02 F6 | 	mov	arg01, local01
13f38     10 15 02 F6 | 	mov	arg02, local02
13f3c     0F 17 02 F6 | 	mov	arg03, local01
13f40     12 19 02 F6 | 	mov	arg04, local04
13f44     13 1B 02 F6 | 	mov	arg05, local05
13f48                 | ' draw(x1,y1,x2,y2,c)
13f48     BC F8 BF FD | 	call	#_hg010b_spin2_draw
13f4c                 | ' line(x2,y1,x2,y2,c)
13f4c     11 13 02 F6 | 	mov	arg01, local03
13f50     10 15 02 F6 | 	mov	arg02, local02
13f54     11 17 02 F6 | 	mov	arg03, local03
13f58     12 19 02 F6 | 	mov	arg04, local04
13f5c     13 1B 02 F6 | 	mov	arg05, local05
13f60                 | ' draw(x1,y1,x2,y2,c)
13f60     A4 F8 BF FD | 	call	#_hg010b_spin2_draw
13f64     A7 F0 03 F6 | 	mov	ptra, fp
13f68     B2 00 A0 FD | 	call	#popregs_
13f6c                 | _hg010b_spin2_frame_ret
13f6c     2D 00 64 FD | 	ret
13f70                 | 
13f70                 | ' 
13f70                 | ' '-- A box (a filled rectangle) ----------------------------------------
13f70                 | ' 
13f70                 | ' pub box(x1,y1,x2,y2,c) |yy
13f70                 | _hg010b_spin2_box
13f70     06 4A 05 F6 | 	mov	COUNT_, #6
13f74     A8 00 A0 FD | 	call	#pushregs_
13f78     09 1F 02 F6 | 	mov	local01, arg01
13f7c     0A 21 02 F6 | 	mov	local02, arg02
13f80     0B 23 02 F6 | 	mov	local03, arg03
13f84     0C 25 02 F6 | 	mov	local04, arg04
13f88     0D 27 02 F6 | 	mov	local05, arg05
13f8c                 | ' 
13f8c                 | ' repeat yy from y1 to y2
13f8c     10 25 52 F2 | 	cmps	local04, local02 wc
13f90     01 28 86 F6 | 	negc	local06, #1
13f94     14 25 02 F1 | 	add	local04, local06
13f98                 | LR__1640
13f98                 | '   fastline(x1,x2,yy,c)
13f98     0F 13 02 F6 | 	mov	arg01, local01
13f9c     11 15 02 F6 | 	mov	arg02, local03
13fa0     13 19 02 F6 | 	mov	arg04, local05
13fa4     10 17 02 F6 | 	mov	arg03, local02
13fa8     44 F7 BF FD | 	call	#_hg010b_spin2_fastline
13fac     14 21 02 F1 | 	add	local02, local06
13fb0     12 21 0A F2 | 	cmp	local02, local04 wz
13fb4     E0 FF 9F 5D |  if_ne	jmp	#LR__1640
13fb8     A7 F0 03 F6 | 	mov	ptra, fp
13fbc     B2 00 A0 FD | 	call	#popregs_
13fc0                 | _hg010b_spin2_box_ret
13fc0     2D 00 64 FD | 	ret
13fc4                 | 
13fc4                 | '       
13fc4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
13fc4                 | _hg010b_spin2_putcharxycgf
13fc4                 | ' 
13fc4                 | '  
13fc4                 | ' repeat yy from 0 to 15
13fc4     00 00 06 F6 | 	mov	_var01, #0
13fc8     97 8C 48 FB | 	callpa	#(@LR__1652-@LR__1650)>>2,fcache_load_ptr_
13fcc                 | LR__1650
13fcc                 | ' 
13fcc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
13fcc     91 E4 05 F1 | 	add	objptr, #145
13fd0     F2 02 02 FB | 	rdlong	_var02, objptr
13fd4     0A 02 66 F0 | 	shl	_var02, #10
13fd8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
13fdc     01 05 02 F1 | 	add	_var03, _var02
13fe0     0B 03 02 F6 | 	mov	_var02, arg03
13fe4     04 02 66 F0 | 	shl	_var02, #4
13fe8     01 05 02 F1 | 	add	_var03, _var02
13fec     00 05 02 F1 | 	add	_var03, _var01
13ff0     02 05 C2 FA | 	rdbyte	_var03, _var03
13ff4                 | '   asm
13ff4     00 04 0E F4 | 	testb	_var03, #0 wz
13ff8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
13ffc     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
14000     01 04 0E F4 | 	testb	_var03, #1 wz
14004     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
14008     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1400c     02 04 0E F4 | 	testb	_var03, #2 wz
14010     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
14014     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
14018     03 04 0E F4 | 	testb	_var03, #3 wz
1401c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
14020     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
14024     04 04 0E F4 | 	testb	_var03, #4 wz
14028     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1402c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
14030     05 04 0E F4 | 	testb	_var03, #5 wz
14034     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
14038     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1403c     06 04 0E F4 | 	testb	_var03, #6 wz
14040     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
14044     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
14048     07 04 0E F4 | 	testb	_var03, #7 wz
1404c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
14050     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
14054                 | '   
14054                 | '   ccc[0]:=c1
14054     99 E5 05 F1 | 	add	objptr, #409
14058     F2 06 62 FC | 	wrlong	_var04, objptr
1405c                 | '   ccc[1]:=c2 
1405c     04 E4 05 F1 | 	add	objptr, #4
14060     F2 08 62 FC | 	wrlong	_var05, objptr
14064                 | '   long[mailbox0][2]:=8
14064     49 E4 85 F1 | 	sub	objptr, #73
14068     F2 04 02 FB | 	rdlong	_var03, objptr
1406c     08 04 06 F1 | 	add	_var03, #8
14070     02 11 68 FC | 	wrlong	#8, _var03
14074                 | '   long[mailbox0][1]:=@ccc
14074     45 E4 05 F1 | 	add	objptr, #69
14078     F2 04 02 F6 | 	mov	_var03, objptr
1407c     45 E4 85 F1 | 	sub	objptr, #69
14080     F2 02 02 FB | 	rdlong	_var02, objptr
14084     04 02 06 F1 | 	add	_var02, #4
14088     01 05 62 FC | 	wrlong	_var03, _var02
1408c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1408c     0C E5 85 F1 | 	sub	objptr, #268
14090     F2 04 02 FB | 	rdlong	_var03, objptr
14094     0A 03 02 F6 | 	mov	_var02, arg02
14098     00 03 02 F1 | 	add	_var02, _var01
1409c     0A 02 66 F0 | 	shl	_var02, #10
140a0     09 0B 02 F6 | 	mov	_var06, arg01
140a4     02 0A 66 F0 | 	shl	_var06, #2
140a8     05 03 02 F1 | 	add	_var02, _var06
140ac     01 05 02 F1 | 	add	_var03, _var02
140b0     00 00 78 FF 
140b4     00 04 06 F1 | 	add	_var03, ##-268435456
140b8     0C E5 05 F1 | 	add	objptr, #268
140bc     F2 0A 02 FB | 	rdlong	_var06, objptr
140c0     05 05 62 FC | 	wrlong	_var03, _var06
140c4                 | '   repeat
140c4                 | LR__1651
140c4     F2 04 02 FB | 	rdlong	_var03, objptr
140c8     02 03 02 FB | 	rdlong	_var02, _var03
140cc     00 02 56 F2 | 	cmps	_var02, #0 wc
140d0     F0 FF 9F CD |  if_b	jmp	#LR__1651
140d4     E5 E5 85 F1 | 	sub	objptr, #485
140d8     01 00 06 F1 | 	add	_var01, #1
140dc     10 00 56 F2 | 	cmps	_var01, #16 wc
140e0     E8 FE 9F CD |  if_b	jmp	#LR__1650
140e4                 | LR__1652
140e4                 | _hg010b_spin2_putcharxycgf_ret
140e4     2D 00 64 FD | 	ret
140e8                 | 
140e8                 | ' 
140e8                 | ' 
140e8                 | ' '**********************************************************************r***
140e8                 | ' '                                                                        *
140e8                 | ' ' Font related functions                                                 *
140e8                 | ' '                                                                        *
140e8                 | ' '*************************************************************************
140e8                 | ' 
140e8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
140e8                 | ' 
140e8                 | ' pub setfontfamily(afontnum)
140e8                 | _hg010b_spin2_setfontfamily
140e8                 | ' 
140e8                 | ' font_family:=afontnum
140e8     91 E4 05 F1 | 	add	objptr, #145
140ec     F2 12 62 FC | 	wrlong	arg01, objptr
140f0     91 E4 85 F1 | 	sub	objptr, #145
140f4                 | ' 'if afontnum==8
140f4                 | ' '  font_ptr:=@amiga_font
140f4                 | ' 
140f4                 | ' if afontnum==4
140f4     04 12 0E F2 | 	cmp	arg01, #4 wz
140f8                 | '   font_ptr:=@st_font
140f8     08 00 00 AF 
140fc     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
14100     04 E4 05 A1 |  if_e	add	objptr, #4
14104     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
14108     04 E4 85 A1 |  if_e	sub	objptr, #4
1410c     08 00 00 AF 
14110     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
14114                 | ' if afontnum==0
14114     00 12 0E F2 | 	cmp	arg01, #0 wz
14118                 | '   font_ptr:=@vga_font
14118     04 E4 05 A1 |  if_e	add	objptr, #4
1411c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
14120     04 E4 85 A1 |  if_e	sub	objptr, #4
14124                 | _hg010b_spin2_setfontfamily_ret
14124     2D 00 64 FD | 	ret
14128                 | 
14128                 | ' 
14128                 | ' '*************************************************************************
14128                 | ' '                                                                        *
14128                 | ' '  Cursor functions                                                      *
14128                 | ' '                                                                        *
14128                 | ' '*************************************************************************
14128                 | ' 
14128                 | ' 
14128                 | ' pub setcursorpos(x,y)
14128                 | _hg010b_spin2_setcursorpos
14128                 | ' 
14128                 | ' ''---------- Set the (x,y) position of cursor
14128                 | ' 
14128                 | ' cursor_x:=x
14128     38 E4 05 F1 | 	add	objptr, #56
1412c     F2 12 52 FC | 	wrword	arg01, objptr
14130                 | ' cursor_y:=y
14130     02 E4 05 F1 | 	add	objptr, #2
14134     F2 14 42 FC | 	wrbyte	arg02, objptr
14138                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14138     02 E4 85 F1 | 	sub	objptr, #2
1413c     F2 14 E2 FA | 	rdword	arg02, objptr
14140     02 14 66 F0 | 	shl	arg02, #2
14144     02 E4 05 F1 | 	add	objptr, #2
14148     F2 16 C2 FA | 	rdbyte	arg03, objptr
1414c     3A E4 85 F1 | 	sub	objptr, #58
14150     04 16 66 F0 | 	shl	arg03, #4
14154     11 12 06 F6 | 	mov	arg01, #17
14158     64 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1415c                 | _hg010b_spin2_setcursorpos_ret
1415c     2D 00 64 FD | 	ret
14160                 | 
14160                 | ' 
14160                 | ' '*************************************************************************
14160                 | ' '                                                                        *
14160                 | ' '  VBlank functions                                                      *
14160                 | ' '                                                                        *
14160                 | ' '*************************************************************************
14160                 | ' 
14160                 | ' pub waitvbl(amount) | i
14160                 | _hg010b_spin2_waitvbl
14160     03 4A 05 F6 | 	mov	COUNT_, #3
14164     A8 00 A0 FD | 	call	#pushregs_
14168     09 1F 02 F6 | 	mov	local01, arg01
1416c                 | ' 
1416c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1416c                 | ' 
1416c                 | ' repeat i from 1 to amount
1416c     01 20 06 F6 | 	mov	local02, #1
14170     01 1E 56 F2 | 	cmps	local01, #1 wc
14174     01 22 86 F6 | 	negc	local03, #1
14178     11 1F 02 F1 | 	add	local01, local03
1417c                 | LR__1660
1417c                 | '   repeat until vblank==0
1417c                 | LR__1661
1417c     45 E4 05 F1 | 	add	objptr, #69
14180     F2 12 0A FB | 	rdlong	arg01, objptr wz
14184     45 E4 85 F1 | 	sub	objptr, #69
14188     0C 00 90 AD |  if_e	jmp	#LR__1662
1418c                 | '     waitus(100)
1418c     64 12 06 F6 | 	mov	arg01, #100
14190     7C 16 B0 FD | 	call	#__system___waitus
14194     E4 FF 9F FD | 	jmp	#LR__1661
14198                 | LR__1662
14198                 | '   repeat until vblank==1
14198                 | LR__1663
14198     45 E4 05 F1 | 	add	objptr, #69
1419c     F2 12 02 FB | 	rdlong	arg01, objptr
141a0     45 E4 85 F1 | 	sub	objptr, #69
141a4     01 12 0E F2 | 	cmp	arg01, #1 wz
141a8     0C 00 90 AD |  if_e	jmp	#LR__1664
141ac                 | '     waitus(100)
141ac     64 12 06 F6 | 	mov	arg01, #100
141b0     5C 16 B0 FD | 	call	#__system___waitus
141b4     E0 FF 9F FD | 	jmp	#LR__1663
141b8                 | LR__1664
141b8     11 21 02 F1 | 	add	local02, local03
141bc     0F 21 0A F2 | 	cmp	local02, local01 wz
141c0     B8 FF 9F 5D |  if_ne	jmp	#LR__1660
141c4     A7 F0 03 F6 | 	mov	ptra, fp
141c8     B2 00 A0 FD | 	call	#popregs_
141cc                 | _hg010b_spin2_waitvbl_ret
141cc     2D 00 64 FD | 	ret
141d0                 | 
141d0                 | ' 
141d0                 | ' 
141d0                 | ' pub cls(fc,bc)   :c,i
141d0                 | _hg010b_spin2_cls
141d0     02 4A 05 F6 | 	mov	COUNT_, #2
141d4     A8 00 A0 FD | 	call	#pushregs_
141d8     09 1F 02 F6 | 	mov	local01, arg01
141dc     0A 21 02 F6 | 	mov	local02, arg02
141e0                 | ' 
141e0                 | ' c:=bc
141e0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
141e0     D9 E4 05 F1 | 	add	objptr, #217
141e4     F2 12 02 FB | 	rdlong	arg01, objptr
141e8     A5 E4 85 F1 | 	sub	objptr, #165
141ec     F2 16 02 FB | 	rdlong	arg03, objptr
141f0     02 16 66 F0 | 	shl	arg03, #2
141f4     10 15 02 F6 | 	mov	arg02, local02
141f8     00 18 06 F6 | 	mov	arg04, #0
141fc     01 1A 06 F6 | 	mov	arg05, #1
14200     0B 00 00 FF 
14204     8C E4 05 F1 | 	add	objptr, ##5772
14208     F0 08 B0 FD | 	call	#_psram_spin2_fill
1420c                 | ' setwritecolors(fc,bc)
1420c                 | ' 
1420c                 | ' write_color:=ff
1420c     0B 00 00 FF 
14210     83 E4 85 F1 | 	sub	objptr, ##5763
14214     F2 1E 62 FC | 	wrlong	local01, objptr
14218                 | ' write_background:=bb
14218     04 E4 05 F1 | 	add	objptr, #4
1421c     F2 20 62 FC | 	wrlong	local02, objptr
14220                 | ' cursor_x:=0
14220     09 E4 85 F1 | 	sub	objptr, #9
14224     F2 00 58 FC | 	wrword	#0, objptr
14228                 | ' cursor_y:=0
14228     02 E4 05 F1 | 	add	objptr, #2
1422c     F2 00 48 FC | 	wrbyte	#0, objptr
14230                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14230     02 E4 85 F1 | 	sub	objptr, #2
14234     F2 14 E2 FA | 	rdword	arg02, objptr
14238     02 14 66 F0 | 	shl	arg02, #2
1423c     02 E4 05 F1 | 	add	objptr, #2
14240     F2 16 C2 FA | 	rdbyte	arg03, objptr
14244     3A E4 85 F1 | 	sub	objptr, #58
14248     04 16 66 F0 | 	shl	arg03, #4
1424c     11 12 06 F6 | 	mov	arg01, #17
14250     6C F2 BF FD | 	call	#_hg010b_spin2_setspritepos
14254                 | ' setcursorcolor(fc)
14254     0F 13 02 F6 | 	mov	arg01, local01
14258     20 EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1425c     10 FB 01 F6 | 	mov	result1, local02
14260     00 FC 05 F6 | 	mov	result2, #0
14264     A7 F0 03 F6 | 	mov	ptra, fp
14268     B2 00 A0 FD | 	call	#popregs_
1426c                 | _hg010b_spin2_cls_ret
1426c     2D 00 64 FD | 	ret
14270                 | 
14270                 | ' 
14270                 | ' ''---------- Output a char at the cursor position, move the cursor 
14270                 | ' 
14270                 | ' pub putchar(achar) | c,x,y,l,newcpl
14270                 | _hg010b_spin2_putchar
14270     01 4A 05 F6 | 	mov	COUNT_, #1
14274     A8 00 A0 FD | 	call	#pushregs_
14278     09 1F 02 F6 | 	mov	local01, arg01
1427c                 | ' 
1427c                 | ' if achar==10
1427c     0A 1E 0E F2 | 	cmp	local01, #10 wz
14280                 | '   crlf()
14280     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
14284                 | ' if achar==9
14284     09 1E 0E F2 | 	cmp	local01, #9 wz
14288     18 00 90 5D |  if_ne	jmp	#LR__1670
1428c                 | '   cursor_x:=(cursor_x& %11110000)+16
1428c     38 E4 05 F1 | 	add	objptr, #56
14290     F2 16 E2 FA | 	rdword	arg03, objptr
14294     F0 16 06 F5 | 	and	arg03, #240
14298     10 16 06 F1 | 	add	arg03, #16
1429c     F2 16 52 FC | 	wrword	arg03, objptr
142a0     38 E4 85 F1 | 	sub	objptr, #56
142a4                 | LR__1670
142a4                 | '   
142a4                 | ' if (achar<>9) && (achar<>10) 
142a4     09 1E 0E F2 | 	cmp	local01, #9 wz
142a8     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
142ac     44 00 90 AD |  if_e	jmp	#LR__1671
142b0                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
142b0     38 E4 05 F1 | 	add	objptr, #56
142b4     F2 12 E2 FA | 	rdword	arg01, objptr
142b8     02 E4 05 F1 | 	add	objptr, #2
142bc     F2 14 C2 FA | 	rdbyte	arg02, objptr
142c0     04 14 66 F0 | 	shl	arg02, #4
142c4     03 E4 05 F1 | 	add	objptr, #3
142c8     F2 18 02 FB | 	rdlong	arg04, objptr
142cc     04 E4 05 F1 | 	add	objptr, #4
142d0     F2 1A 02 FB | 	rdlong	arg05, objptr
142d4     41 E4 85 F1 | 	sub	objptr, #65
142d8     0F 17 02 F6 | 	mov	arg03, local01
142dc     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
142e0                 | '   cursor_x+=2
142e0     38 E4 05 F1 | 	add	objptr, #56
142e4     F2 1E E2 FA | 	rdword	local01, objptr
142e8     02 1E 06 F1 | 	add	local01, #2
142ec     F2 1E 52 FC | 	wrword	local01, objptr
142f0     38 E4 85 F1 | 	sub	objptr, #56
142f4                 | LR__1671
142f4                 | ' 
142f4                 | ' if cursor_x>=256
142f4     38 E4 05 F1 | 	add	objptr, #56
142f8     F2 1E E2 FA | 	rdword	local01, objptr
142fc     38 E4 85 F1 | 	sub	objptr, #56
14300     00 1F 56 F2 | 	cmps	local01, #256 wc
14304     64 00 90 CD |  if_b	jmp	#LR__1673
14308                 | '   cursor_x:=0
14308     38 E4 05 F1 | 	add	objptr, #56
1430c     F2 00 58 FC | 	wrword	#0, objptr
14310                 | '   cursor_y+=1
14310     02 E4 05 F1 | 	add	objptr, #2
14314     F2 1E C2 FA | 	rdbyte	local01, objptr
14318     01 1E 06 F1 | 	add	local01, #1
1431c     F2 1E 42 FC | 	wrbyte	local01, objptr
14320                 | '   if cursor_y>st_lines-1
14320     C3 E4 05 F1 | 	add	objptr, #195
14324     F2 1E 02 FB | 	rdlong	local01, objptr
14328     01 1E 86 F1 | 	sub	local01, #1
1432c     C3 E4 85 F1 | 	sub	objptr, #195
14330     F2 16 C2 FA | 	rdbyte	arg03, objptr
14334     3A E4 85 F1 | 	sub	objptr, #58
14338     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1433c     2C 00 90 ED |  if_be	jmp	#LR__1672
14340                 | '     scrollup()
14340     00 12 06 F6 | 	mov	arg01, #0
14344     01 00 00 FF 
14348     40 14 06 F6 | 	mov	arg02, ##576
1434c     10 16 06 F6 | 	mov	arg03, #16
14350     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
14354                 | '     cursor_y:=st_lines-1
14354     FD E4 05 F1 | 	add	objptr, #253
14358     F2 1E 02 FB | 	rdlong	local01, objptr
1435c     01 1E 86 F1 | 	sub	local01, #1
14360     C3 E4 85 F1 | 	sub	objptr, #195
14364     F2 1E 42 FC | 	wrbyte	local01, objptr
14368     3A E4 85 F1 | 	sub	objptr, #58
1436c                 | LR__1672
1436c                 | LR__1673
1436c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1436c     38 E4 05 F1 | 	add	objptr, #56
14370     F2 14 E2 FA | 	rdword	arg02, objptr
14374     02 14 66 F0 | 	shl	arg02, #2
14378     02 E4 05 F1 | 	add	objptr, #2
1437c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14380     3A E4 85 F1 | 	sub	objptr, #58
14384     04 16 66 F0 | 	shl	arg03, #4
14388     11 12 06 F6 | 	mov	arg01, #17
1438c     30 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
14390     A7 F0 03 F6 | 	mov	ptra, fp
14394     B2 00 A0 FD | 	call	#popregs_
14398                 | _hg010b_spin2_putchar_ret
14398     2D 00 64 FD | 	ret
1439c                 | 
1439c                 | '     
1439c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1439c                 | ' 
1439c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1439c                 | _hg010b_spin2_putchar2
1439c     01 4A 05 F6 | 	mov	COUNT_, #1
143a0     A8 00 A0 FD | 	call	#pushregs_
143a4                 | ' 
143a4                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
143a4     38 E4 05 F1 | 	add	objptr, #56
143a8     F2 1E E2 FA | 	rdword	local01, objptr
143ac     02 E4 05 F1 | 	add	objptr, #2
143b0     F2 14 C2 FA | 	rdbyte	arg02, objptr
143b4     04 14 66 F0 | 	shl	arg02, #4
143b8     09 17 02 F6 | 	mov	arg03, arg01
143bc     03 E4 05 F1 | 	add	objptr, #3
143c0     F2 18 02 FB | 	rdlong	arg04, objptr
143c4     04 E4 05 F1 | 	add	objptr, #4
143c8     F2 1A 02 FB | 	rdlong	arg05, objptr
143cc     41 E4 85 F1 | 	sub	objptr, #65
143d0     0F 13 02 F6 | 	mov	arg01, local01
143d4     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
143d8                 | ' cursor_x+=2
143d8     38 E4 05 F1 | 	add	objptr, #56
143dc     F2 1E E2 FA | 	rdword	local01, objptr
143e0     02 1E 06 F1 | 	add	local01, #2
143e4     F2 1E 52 FC | 	wrword	local01, objptr
143e8                 | ' if cursor_x>=256
143e8     F2 1E E2 FA | 	rdword	local01, objptr
143ec     38 E4 85 F1 | 	sub	objptr, #56
143f0     00 1F 56 F2 | 	cmps	local01, #256 wc
143f4     64 00 90 CD |  if_b	jmp	#LR__1681
143f8                 | '   cursor_x:=0
143f8     38 E4 05 F1 | 	add	objptr, #56
143fc     F2 00 58 FC | 	wrword	#0, objptr
14400                 | '   cursor_y+=1
14400     02 E4 05 F1 | 	add	objptr, #2
14404     F2 1E C2 FA | 	rdbyte	local01, objptr
14408     01 1E 06 F1 | 	add	local01, #1
1440c     F2 1E 42 FC | 	wrbyte	local01, objptr
14410                 | '   if cursor_y>st_lines-1
14410     C3 E4 05 F1 | 	add	objptr, #195
14414     F2 1E 02 FB | 	rdlong	local01, objptr
14418     01 1E 86 F1 | 	sub	local01, #1
1441c     C3 E4 85 F1 | 	sub	objptr, #195
14420     F2 1A C2 FA | 	rdbyte	arg05, objptr
14424     3A E4 85 F1 | 	sub	objptr, #58
14428     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
1442c     2C 00 90 ED |  if_be	jmp	#LR__1680
14430                 | '     scrollup()
14430     00 12 06 F6 | 	mov	arg01, #0
14434     01 00 00 FF 
14438     40 14 06 F6 | 	mov	arg02, ##576
1443c     10 16 06 F6 | 	mov	arg03, #16
14440     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
14444                 | '     cursor_y:=st_lines-1
14444     FD E4 05 F1 | 	add	objptr, #253
14448     F2 1E 02 FB | 	rdlong	local01, objptr
1444c     01 1E 86 F1 | 	sub	local01, #1
14450     C3 E4 85 F1 | 	sub	objptr, #195
14454     F2 1E 42 FC | 	wrbyte	local01, objptr
14458     3A E4 85 F1 | 	sub	objptr, #58
1445c                 | LR__1680
1445c                 | LR__1681
1445c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1445c     38 E4 05 F1 | 	add	objptr, #56
14460     F2 14 E2 FA | 	rdword	arg02, objptr
14464     02 14 66 F0 | 	shl	arg02, #2
14468     02 E4 05 F1 | 	add	objptr, #2
1446c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14470     3A E4 85 F1 | 	sub	objptr, #58
14474     04 16 66 F0 | 	shl	arg03, #4
14478     11 12 06 F6 | 	mov	arg01, #17
1447c     40 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
14480     A7 F0 03 F6 | 	mov	ptra, fp
14484     B2 00 A0 FD | 	call	#popregs_
14488                 | _hg010b_spin2_putchar2_ret
14488     2D 00 64 FD | 	ret
1448c                 | 
1448c                 | ' ''--------- Output a string at the cursor position, move the cursor  
1448c                 | ' 
1448c                 | ' pub write(text) | iii,c,ncx,ncy
1448c                 | _hg010b_spin2_write
1448c     04 4A 05 F6 | 	mov	COUNT_, #4
14490     A8 00 A0 FD | 	call	#pushregs_
14494     09 1F 02 F6 | 	mov	local01, arg01
14498                 | ' 
14498                 | ' repeat iii from 0 to strsize(text)-1
14498     00 20 06 F6 | 	mov	local02, #0
1449c     0F 13 02 F6 | 	mov	arg01, local01
144a0     09 23 02 F6 | 	mov	local03, arg01
144a4     97 06 48 FB | 	callpa	#(@LR__1691-@LR__1690)>>2,fcache_load_ptr_
144a8                 | LR__1690
144a8     11 FB C9 FA | 	rdbyte	result1, local03 wz
144ac     01 22 06 51 |  if_ne	add	local03, #1
144b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1690
144b4                 | LR__1691
144b4     09 23 82 F1 | 	sub	local03, arg01
144b8     01 22 86 F1 | 	sub	local03, #1
144bc     00 22 56 F2 | 	cmps	local03, #0 wc
144c0     01 24 86 F6 | 	negc	local04, #1
144c4     12 23 02 F1 | 	add	local03, local04
144c8                 | LR__1692
144c8                 | '   putchar2(byte[text+iii])
144c8     0F 13 02 F6 | 	mov	arg01, local01
144cc     10 13 02 F1 | 	add	arg01, local02
144d0     09 13 C2 FA | 	rdbyte	arg01, arg01
144d4     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
144d8     12 21 02 F1 | 	add	local02, local04
144dc     11 21 0A F2 | 	cmp	local02, local03 wz
144e0     E4 FF 9F 5D |  if_ne	jmp	#LR__1692
144e4     A7 F0 03 F6 | 	mov	ptra, fp
144e8     B2 00 A0 FD | 	call	#popregs_
144ec                 | _hg010b_spin2_write_ret
144ec     2D 00 64 FD | 	ret
144f0                 | 
144f0                 | ' 
144f0                 | ' ''-----------  Scroll the screen one line up
144f0                 | ' 
144f0                 | ' pub scrollup(start=0, end=576 , amount=16) | i
144f0                 | _hg010b_spin2_scrollup
144f0     01 4A 05 F6 | 	mov	COUNT_, #1
144f4     A8 00 A0 FD | 	call	#pushregs_
144f8                 | ' 	
144f8                 | ' repeat i from 0 to 559 
144f8     00 1E 06 F6 | 	mov	local01, #0
144fc                 | LR__1700
144fc     F5 E4 05 F1 | 	add	objptr, #245
14500     F2 18 02 FB | 	rdlong	arg04, objptr
14504     1C E4 85 F1 | 	sub	objptr, #28
14508     F2 14 02 FB | 	rdlong	arg02, objptr
1450c     0F 13 02 F6 | 	mov	arg01, local01
14510     10 12 06 F1 | 	add	arg01, #16
14514     02 12 66 F0 | 	shl	arg01, #2
14518     14 E4 05 F1 | 	add	objptr, #20
1451c     F2 16 02 FB | 	rdlong	arg03, objptr
14520     0B 13 02 FD | 	qmul	arg01, arg03
14524                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
14524     F6 03 00 FF 
14528     00 12 06 F6 | 	mov	arg01, ##519168
1452c     0C 13 82 F1 | 	sub	arg01, arg04
14530     02 16 66 F0 | 	shl	arg03, #2
14534     0A 00 00 FF 
14538     D3 E5 05 F1 | 	add	objptr, ##5587
1453c     18 18 62 FD | 	getqx	arg04
14540     0C 15 02 F1 | 	add	arg02, arg04
14544     7C 04 B0 FD | 	call	#_psram_spin2_read1
14548     0A 00 00 FF 
1454c     CB E5 85 F1 | 	sub	objptr, ##5579
14550     F2 18 02 FB | 	rdlong	arg04, objptr
14554     1C E4 85 F1 | 	sub	objptr, #28
14558     F2 14 02 FB | 	rdlong	arg02, objptr
1455c     0F 13 02 F6 | 	mov	arg01, local01
14560     02 12 66 F0 | 	shl	arg01, #2
14564     14 E4 05 F1 | 	add	objptr, #20
14568     F2 16 02 FB | 	rdlong	arg03, objptr
1456c     0B 13 02 FD | 	qmul	arg01, arg03
14570                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
14570     F6 03 00 FF 
14574     00 12 06 F6 | 	mov	arg01, ##519168
14578     0C 13 82 F1 | 	sub	arg01, arg04
1457c     02 16 66 F0 | 	shl	arg03, #2
14580     0A 00 00 FF 
14584     D3 E5 05 F1 | 	add	objptr, ##5587
14588     18 18 62 FD | 	getqx	arg04
1458c     0C 15 02 F1 | 	add	arg02, arg04
14590     CC 04 B0 FD | 	call	#_psram_spin2_write
14594     0B 00 00 FF 
14598     C0 E4 85 F1 | 	sub	objptr, ##5824
1459c     01 1E 06 F1 | 	add	local01, #1
145a0     01 00 00 FF 
145a4     30 1E 56 F2 | 	cmps	local01, ##560 wc
145a8     50 FF 9F CD |  if_b	jmp	#LR__1700
145ac                 | ' 
145ac                 | ' repeat i from 560 to 575
145ac     01 00 00 FF 
145b0     30 1E 06 F6 | 	mov	local01, ##560
145b4                 | LR__1701
145b4                 | '    fastline(0,1023,i,write_background)   
145b4     41 E4 05 F1 | 	add	objptr, #65
145b8     F2 18 02 FB | 	rdlong	arg04, objptr
145bc     41 E4 85 F1 | 	sub	objptr, #65
145c0     00 12 06 F6 | 	mov	arg01, #0
145c4     09 14 CE F9 | 	bmask	arg02, #9
145c8     0F 17 02 F6 | 	mov	arg03, local01
145cc     20 F1 BF FD | 	call	#_hg010b_spin2_fastline
145d0     01 1E 06 F1 | 	add	local01, #1
145d4     01 00 00 FF 
145d8     40 1E 16 F2 | 	cmp	local01, ##576 wc
145dc     D4 FF 9F CD |  if_b	jmp	#LR__1701
145e0     A7 F0 03 F6 | 	mov	ptra, fp
145e4     B2 00 A0 FD | 	call	#popregs_
145e8                 | _hg010b_spin2_scrollup_ret
145e8     2D 00 64 FD | 	ret
145ec                 | 
145ec                 | ' 
145ec                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
145ec                 | ' 
145ec                 | ' pub crlf()
145ec                 | _hg010b_spin2_crlf
145ec                 | ' 
145ec                 | ' cursor_x:=leading_spaces*2
145ec     01 00 00 FF 
145f0     B2 E4 05 F1 | 	add	objptr, ##690
145f4     F2 16 02 FB | 	rdlong	arg03, objptr
145f8     01 16 66 F0 | 	shl	arg03, #1
145fc     01 00 00 FF 
14600     7A E4 85 F1 | 	sub	objptr, ##634
14604     F2 16 52 FC | 	wrword	arg03, objptr
14608                 | ' cursor_y+=1
14608     02 E4 05 F1 | 	add	objptr, #2
1460c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14610     01 16 06 F1 | 	add	arg03, #1
14614     F2 16 42 FC | 	wrbyte	arg03, objptr
14618                 | ' if cursor_y>st_lines-1
14618     C3 E4 05 F1 | 	add	objptr, #195
1461c     F2 16 02 FB | 	rdlong	arg03, objptr
14620     01 16 86 F1 | 	sub	arg03, #1
14624     C3 E4 85 F1 | 	sub	objptr, #195
14628     F2 14 C2 FA | 	rdbyte	arg02, objptr
1462c     3A E4 85 F1 | 	sub	objptr, #58
14630     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
14634     2C 00 90 ED |  if_be	jmp	#LR__1710
14638                 | '   scrollup()
14638     00 12 06 F6 | 	mov	arg01, #0
1463c     01 00 00 FF 
14640     40 14 06 F6 | 	mov	arg02, ##576
14644     10 16 06 F6 | 	mov	arg03, #16
14648     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
1464c                 | '   cursor_y:=st_lines-1
1464c     FD E4 05 F1 | 	add	objptr, #253
14650     F2 16 02 FB | 	rdlong	arg03, objptr
14654     01 16 86 F1 | 	sub	arg03, #1
14658     C3 E4 85 F1 | 	sub	objptr, #195
1465c     F2 16 42 FC | 	wrbyte	arg03, objptr
14660     3A E4 85 F1 | 	sub	objptr, #58
14664                 | LR__1710
14664                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
14664     38 E4 05 F1 | 	add	objptr, #56
14668     F2 14 E2 FA | 	rdword	arg02, objptr
1466c     02 14 66 F0 | 	shl	arg02, #2
14670     02 E4 05 F1 | 	add	objptr, #2
14674     F2 16 C2 FA | 	rdbyte	arg03, objptr
14678     3A E4 85 F1 | 	sub	objptr, #58
1467c     04 16 66 F0 | 	shl	arg03, #4
14680     11 12 06 F6 | 	mov	arg01, #17
14684     38 EE BF FD | 	call	#_hg010b_spin2_setspritepos
14688                 | _hg010b_spin2_crlf_ret
14688     2D 00 64 FD | 	ret
1468c                 | 
1468c                 | ' 
1468c                 | ' 
1468c                 | ' '*************************************************************************
1468c                 | ' '                                                                        *
1468c                 | ' '  Conversions                                                           *
1468c                 | ' '                                                                        *
1468c                 | ' '*************************************************************************
1468c                 | ' 
1468c                 | ' ''---------- Convert a integer to dec string, return a pointer
1468c                 | ' 
1468c                 | ' pub inttostr(i):result |q,pos,k,j
1468c                 | _hg010b_spin2_inttostr
1468c     03 4A 05 F6 | 	mov	COUNT_, #3
14690     A8 00 A0 FD | 	call	#pushregs_
14694     09 1F 0A F6 | 	mov	local01, arg01 wz
14698                 | ' 
14698                 | ' j:=i
14698                 | ' pos:=10
14698     0A 20 06 F6 | 	mov	local02, #10
1469c                 | ' k:=0
1469c     00 22 06 F6 | 	mov	local03, #0
146a0                 | ' 
146a0                 | ' if (j==0)
146a0     18 00 90 5D |  if_ne	jmp	#LR__1720
146a4                 | '   n_string[0]:=48
146a4     49 E4 05 F1 | 	add	objptr, #73
146a8     F2 60 48 FC | 	wrbyte	#48, objptr
146ac                 | '   n_string[1]:=0
146ac     01 E4 05 F1 | 	add	objptr, #1
146b0     F2 00 48 FC | 	wrbyte	#0, objptr
146b4     4A E4 85 F1 | 	sub	objptr, #74
146b8     C4 00 90 FD | 	jmp	#LR__1727
146bc                 | LR__1720
146bc                 | ' 
146bc                 | ' else
146bc                 | '   if (j<0)
146bc     0F 1F 52 F6 | 	abs	local01, local01 wc
146c0                 | '     j:=0-j
146c0                 | '     k:=45
146c0     2D 22 06 C6 |  if_b	mov	local03, #45
146c4                 | ' 
146c4                 | '   n_string[11]:=0
146c4     54 E4 05 F1 | 	add	objptr, #84
146c8     F2 00 48 FC | 	wrbyte	#0, objptr
146cc     54 E4 85 F1 | 	sub	objptr, #84
146d0     97 24 48 FB | 	callpa	#(@LR__1722-@LR__1721)>>2,fcache_load_ptr_
146d4                 | '   repeat while (pos>-1)
146d4                 | LR__1721
146d4     00 20 56 F2 | 	cmps	local02, #0 wc
146d8     40 00 90 CD |  if_b	jmp	#LR__1723
146dc     0F FB 51 F6 | 	abs	result1, local01 wc
146e0     0A FA 15 FD | 	qdiv	result1, #10
146e4                 | '     q:=j//10
146e4     19 FA 61 FD | 	getqy	result1
146e8     FD FA 81 F6 | 	negc	result1, result1
146ec     0F 1F 52 F6 | 	abs	local01, local01 wc
146f0     0A 1E 16 FD | 	qdiv	local01, #10
146f4                 | '     q:=48+q
146f4     30 FA 05 F1 | 	add	result1, #48
146f8                 | '     n_string[pos]:=q
146f8     10 1F 02 F6 | 	mov	local01, local02
146fc     49 E4 05 F1 | 	add	objptr, #73
14700     F2 1E 02 F1 | 	add	local01, objptr
14704     0F FB 41 FC | 	wrbyte	result1, local01
14708                 | '     j:=j/10
14708     49 E4 85 F1 | 	sub	objptr, #73
1470c                 | '     pos-=1
1470c     01 20 86 F1 | 	sub	local02, #1
14710     18 1E 62 FD | 	getqx	local01
14714     0F 1F 82 F6 | 	negc	local01, local01
14718     B8 FF 9F FD | 	jmp	#LR__1721
1471c                 | LR__1722
1471c                 | LR__1723
1471c                 | '   repeat while n_string[0]==48
1471c                 | LR__1724
1471c     49 E4 05 F1 | 	add	objptr, #73
14720     F2 16 C2 FA | 	rdbyte	arg03, objptr
14724     49 E4 85 F1 | 	sub	objptr, #73
14728     30 16 0E F2 | 	cmp	arg03, #48 wz
1472c     20 00 90 5D |  if_ne	jmp	#LR__1725
14730                 | '     bytemove(@n_string,@n_string+1,12)
14730     49 E4 05 F1 | 	add	objptr, #73
14734     F2 12 02 F6 | 	mov	arg01, objptr
14738     F2 14 02 F6 | 	mov	arg02, objptr
1473c     49 E4 85 F1 | 	sub	objptr, #73
14740     01 14 06 F1 | 	add	arg02, #1
14744     0C 16 06 F6 | 	mov	arg03, #12
14748     84 0C B0 FD | 	call	#__system____builtin_memmove
1474c     CC FF 9F FD | 	jmp	#LR__1724
14750                 | LR__1725
14750                 | ' 
14750                 | '   if k==45
14750     2D 22 0E F2 | 	cmp	local03, #45 wz
14754     28 00 90 5D |  if_ne	jmp	#LR__1726
14758                 | '      bytemove(@n_string+1,@n_string,12)
14758     49 E4 05 F1 | 	add	objptr, #73
1475c     F2 12 02 F6 | 	mov	arg01, objptr
14760     01 12 06 F1 | 	add	arg01, #1
14764     F2 14 02 F6 | 	mov	arg02, objptr
14768     49 E4 85 F1 | 	sub	objptr, #73
1476c     0C 16 06 F6 | 	mov	arg03, #12
14770     5C 0C B0 FD | 	call	#__system____builtin_memmove
14774                 | '      n_string[0]:=k
14774     49 E4 05 F1 | 	add	objptr, #73
14778     F2 22 42 FC | 	wrbyte	local03, objptr
1477c     49 E4 85 F1 | 	sub	objptr, #73
14780                 | LR__1726
14780                 | LR__1727
14780                 | ' 
14780                 | ' q:=@n_string
14780     49 E4 05 F1 | 	add	objptr, #73
14784     F2 FA 01 F6 | 	mov	result1, objptr
14788     49 E4 85 F1 | 	sub	objptr, #73
1478c                 | ' return q
1478c     A7 F0 03 F6 | 	mov	ptra, fp
14790     B2 00 A0 FD | 	call	#popregs_
14794                 | _hg010b_spin2_inttostr_ret
14794     2D 00 64 FD | 	ret
14798                 | 
14798                 | ' 
14798                 | ' '..............................................................................
14798                 | ' 
14798                 | ' {{
14798                 | ' }}
14798                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
14798                 | _psram_spin2_startx
14798     04 4A 05 F6 | 	mov	COUNT_, #4
1479c     A8 00 A0 FD | 	call	#pushregs_
147a0     09 1F 02 F6 | 	mov	local01, arg01
147a4     0B 21 02 F6 | 	mov	local02, arg03
147a8     0C 23 02 F6 | 	mov	local03, arg04
147ac                 | '     stop() ' restart driver if required
147ac     54 01 B0 FD | 	call	#_psram_spin2_stop
147b0     00 1E 0E F2 | 	cmp	local01, #0 wz
147b4     14 1E 06 AB |  if_e	rdlong	local01, #20
147b8     0F 15 52 F6 | 	abs	arg02, local01 wc
147bc     A1 07 00 FF 
147c0     40 14 16 FD | 	qdiv	arg02, ##1000000
147c4                 | ' 
147c4                 | '     ' use current frequency if none specified
147c4                 | ' 
147c4                 | '     if freq == 0 
147c4                 | '         freq := clkfreq 
147c4                 | ' 
147c4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
147c4                 | ' 
147c4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
147c4                 | '     if burst < 0
147c4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
147c4     18 14 62 FD | 	getqx	arg02
147c8     0A 19 82 F6 | 	negc	arg04, arg02
147cc     03 18 66 F0 | 	shl	arg04, #3
147d0     84 18 86 F1 | 	sub	arg04, #132
147d4     04 18 46 F0 | 	shr	arg04, #4
147d8     04 18 66 F0 | 	shl	arg04, #4
147dc     00 18 56 F2 | 	cmps	arg04, #0 wc
147e0     0E FA 65 C6 |  if_b	neg	result1, #14
147e4     10 01 90 CD |  if_b	jmp	#LR__1733
147e8                 | ' 
147e8                 | '     ' compute the input delay
147e8                 | ' 
147e8                 | '     if delay <= 0
147e8     01 20 56 F2 | 	cmps	local02, #1 wc
147ec     10 00 90 3D |  if_ae	jmp	#LR__1730
147f0                 | '         delay := lookupDelay(freq)
147f0     0F 13 02 F6 | 	mov	arg01, local01
147f4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
147f8     FD 20 02 F6 | 	mov	local02, result1
147fc     04 00 90 FD | 	jmp	#LR__1731
14800                 | LR__1730
14800                 | '     else
14800                 | '         delay <#= $f ' limit to 15
14800     0F 20 66 F3 | 	fles	local02, #15
14804                 | LR__1731
14804                 | ' 
14804                 | '     ' create our lock
14804                 | ' 
14804                 | '     driverlock := LOCKNEW()  
14804     00 FA 05 F6 | 	mov	result1, #0
14808     04 FA 61 FD | 	locknew	result1
1480c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14810     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
14814                 | '     if driverlock == -1
14814     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14818     FF FF 7F FF 
1481c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
14820                 | '         return ERR_NO_LOCK
14820     1A FA 65 A6 |  if_e	neg	result1, #26
14824     D0 00 90 AD |  if_e	jmp	#LR__1733
14828                 | ' 
14828                 | '     ' patch in the proper data and HUB addresses to the startup structure
14828                 | ' 
14828                 | '     long[@startupData][0]:=clkfreq
14828     14 1E 06 FB | 	rdlong	local01, #20
1482c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
14830     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
14834                 | ' '    long[@startupData][1]:=$1000_0000
14834                 | '     long[@startupData][5]:=@deviceData
14834     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14838     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1483c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
14840     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14844     14 14 06 F1 | 	add	arg02, #20
14848     0A 1F 62 FC | 	wrlong	local01, arg02
1484c                 | '     long[@startupData][6]:=@qosData
1484c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
14850     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14854     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14858     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1485c     18 14 06 F1 | 	add	arg02, #24
14860     0A 1F 62 FC | 	wrlong	local01, arg02
14864                 | '     long[@startupData][7]:=$7FF00
14864     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14868     1C 1E 06 F1 | 	add	local01, #28
1486c     FF 03 80 FF 
14870     0F 01 6A FC | 	wrlong	##524032, local01
14874                 | ' 
14874                 | '     ' setup some default bank and QoS parameter values
14874                 | ' 
14874                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
14874     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14878     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1487c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
14880     10 18 66 F0 | 	shl	arg04, #16
14884     0C 20 66 F0 | 	shl	local02, #12
14888     10 19 42 F5 | 	or	arg04, local02
1488c     18 18 46 F5 | 	or	arg04, #24
14890     0C 15 02 F6 | 	mov	arg02, arg04
14894     02 16 06 F6 | 	mov	arg03, #2
14898     A0 00 A0 FD | 	call	#\builtin_longfill_
1489c                 | '     longfill(@qosData, $FFFF0000, 8)
1489c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
148a0     07 16 06 F6 | 	mov	arg03, #7
148a4     28 16 62 FD | 	setq	arg03
148a8     80 FF FF FF 
148ac     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
148b0                 | ' 
148b0                 | '     ' get the address of the PSRAM memory driver so we can start it
148b0                 | ' 
148b0                 | '     driverAddr:= driver.getDriverAddr()
148b0                 | '     return @driver_start
148b0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
148b4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
148b8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
148bc                 | ' 
148bc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
148bc                 | ' 
148bc                 | '     if desiredcog < 0
148bc     00 22 56 F2 | 	cmps	local03, #0 wc
148c0                 | '         desiredcog := NEWCOG
148c0     10 22 06 C6 |  if_b	mov	local03, #16
148c4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
148c4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
148c8     11 25 02 F6 | 	mov	local04, local03
148cc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
148d0     0A 25 F2 FC | 	coginit	local04, arg02 wc
148d4     01 24 66 C6 |  if_b	neg	local04, #1
148d8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
148dc     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
148e0                 | '     repeat until long[@startupData] == 0 
148e0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
148e4                 | LR__1732
148e4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
148e8     F8 FF 9F 5D |  if_ne	jmp	#LR__1732
148ec                 | ' 
148ec                 | '     return drivercog
148ec     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
148f0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
148f4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
148f8                 | LR__1733
148f8     A7 F0 03 F6 | 	mov	ptra, fp
148fc     B2 00 A0 FD | 	call	#popregs_
14900                 | _psram_spin2_startx_ret
14900     2D 00 64 FD | 	ret
14904                 | 
14904                 | ' 
14904                 | ' '..............................................................................
14904                 | ' 
14904                 | ' {{
14904                 | ' }}
14904                 | ' PUB stop() : i
14904                 | _psram_spin2_stop
14904     00 00 06 F6 | 	mov	_var01, #0
14908                 | '     if drivercog <> -1
14908     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1490c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14910     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14914     FF FF 7F FF 
14918     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1491c     70 00 90 AD |  if_e	jmp	#LR__1743
14920                 | '         cogstop(drivercog) ' a rather brutal stop
14920     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14924     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14928     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1492c     03 12 62 FD | 	cogstop	arg01
14930     97 26 48 FB | 	callpa	#(@LR__1742-@LR__1740)>>2,fcache_load_ptr_
14934                 | '         repeat i from 0 to 7
14934                 | LR__1740
14934                 | '             if long[$7FF00][i*3] < 0
14934     00 FB 01 F6 | 	mov	result1, _var01
14938     01 FA 65 F0 | 	shl	result1, #1
1493c     00 FB 01 F1 | 	add	result1, _var01
14940     02 FA 65 F0 | 	shl	result1, #2
14944     FF 03 00 FF 
14948     00 FB 05 F1 | 	add	result1, ##524032
1494c     FD FA 01 FB | 	rdlong	result1, result1
14950     00 FA 55 F2 | 	cmps	result1, #0 wc
14954     1C 00 90 3D |  if_ae	jmp	#LR__1741
14958                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
14958     00 FB 01 F6 | 	mov	result1, _var01
1495c     01 FA 65 F0 | 	shl	result1, #1
14960     00 FB 01 F1 | 	add	result1, _var01
14964     02 FA 65 F0 | 	shl	result1, #2
14968     FF 03 00 FF 
1496c     00 FB 05 F1 | 	add	result1, ##524032
14970     FD 20 68 FC | 	wrlong	#16, result1
14974                 | LR__1741
14974     01 00 06 F1 | 	add	_var01, #1
14978     08 00 56 F2 | 	cmps	_var01, #8 wc
1497c     B4 FF 9F CD |  if_b	jmp	#LR__1740
14980                 | LR__1742
14980                 | '         drivercog := -1
14980     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14984     FF FF FF FF 
14988     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1498c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14990                 | LR__1743
14990                 | '     if driverlock <> -1
14990     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14994     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14998     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1499c     FF FF 7F FF 
149a0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
149a4                 | '         LOCKRET(driverlock)
149a4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
149a8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
149ac     05 12 62 5D |  if_ne	lockret	arg01
149b0                 | '         driverlock := -1
149b0     FF FF FF 5F 
149b4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
149b8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
149bc     00 FB 01 F6 | 	mov	result1, _var01
149c0                 | _psram_spin2_stop_ret
149c0     2D 00 64 FD | 	ret
149c4                 | 
149c4                 | ' 
149c4                 | ' '..............................................................................
149c4                 | ' 
149c4                 | ' {{
149c4                 | ' }}
149c4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
149c4                 | _psram_spin2_read1
149c4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
149c4                 | '     if drivercog == -1 ' driver must be running
149c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
149c8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
149cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
149d0     FF FF 7F FF 
149d4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
149d8                 | '         return ERR_INACTIVE
149d8     0F FA 65 A6 |  if_e	neg	result1, #15
149dc     7C 00 90 AD |  if_e	jmp	#LR__1751
149e0                 | '     if count == 0 ' don't even bother reading
149e0     00 16 0E F2 | 	cmp	arg03, #0 wz
149e4                 | '         return 0
149e4     00 FA 05 A6 |  if_e	mov	result1, #0
149e8     70 00 90 AD |  if_e	jmp	#LR__1751
149ec                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
149ec     00 FA 05 F6 | 	mov	result1, #0
149f0     01 FA 61 FD | 	cogid	result1
149f4     FD 00 02 F6 | 	mov	_var01, result1
149f8     01 00 66 F0 | 	shl	_var01, #1
149fc     FD 00 02 F1 | 	add	_var01, result1
14a00     02 00 66 F0 | 	shl	_var01, #2
14a04     FF 03 00 FF 
14a08     00 03 06 F6 | 	mov	_var02, ##524032
14a0c     00 03 02 F1 | 	add	_var02, _var01
14a10                 | '     if long[mailbox] < 0
14a10     01 01 02 FB | 	rdlong	_var01, _var02
14a14     00 00 56 F2 | 	cmps	_var01, #0 wc
14a18                 | '         return ERR_MAILBOX_BUSY
14a18     1C FA 65 C6 |  if_b	neg	result1, #28
14a1c     3C 00 90 CD |  if_b	jmp	#LR__1751
14a20                 | '     long[mailbox][2] := count
14a20     08 02 06 F1 | 	add	_var02, #8
14a24     01 17 62 FC | 	wrlong	arg03, _var02
14a28                 | '     long[mailbox][1] := dstHubAddr
14a28     04 02 86 F1 | 	sub	_var02, #4
14a2c     01 13 62 FC | 	wrlong	arg01, _var02
14a30     04 02 86 F1 | 	sub	_var02, #4
14a34                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
14a34     0A 05 02 F6 | 	mov	_var03, arg02
14a38     D9 04 06 F4 | 	bitl	_var03, #217
14a3c     00 00 58 FF 
14a40     00 00 06 F6 | 	mov	_var01, ##-1342177280
14a44     02 01 02 F1 | 	add	_var01, _var03
14a48     01 01 62 FC | 	wrlong	_var01, _var02
14a4c                 | '     repeat
14a4c                 | LR__1750
14a4c                 | '         result := long[mailbox]    
14a4c     01 05 02 FB | 	rdlong	_var03, _var02
14a50     00 04 56 F2 | 	cmps	_var03, #0 wc
14a54     F4 FF 9F CD |  if_b	jmp	#LR__1750
14a58                 | '     while result < 0   
14a58                 | '     return -result                       'return success or error
14a58     02 FB 61 F6 | 	neg	result1, _var03
14a5c                 | LR__1751
14a5c                 | _psram_spin2_read1_ret
14a5c     2D 00 64 FD | 	ret
14a60                 | 
14a60                 | ' 
14a60                 | ' '..............................................................................
14a60                 | ' 
14a60                 | ' {{
14a60                 | ' }}
14a60                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
14a60                 | _psram_spin2_write
14a60                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14a60                 | '     if drivercog == -1 ' driver must be running
14a60     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14a64     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
14a68     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14a6c     FF FF 7F FF 
14a70     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14a74                 | '         return ERR_INACTIVE
14a74     0F FA 65 A6 |  if_e	neg	result1, #15
14a78     7C 00 90 AD |  if_e	jmp	#LR__1761
14a7c                 | '     if count == 0 ' don't even bother writing
14a7c     00 16 0E F2 | 	cmp	arg03, #0 wz
14a80                 | '         return 0
14a80     00 FA 05 A6 |  if_e	mov	result1, #0
14a84     70 00 90 AD |  if_e	jmp	#LR__1761
14a88                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14a88     00 FA 05 F6 | 	mov	result1, #0
14a8c     01 FA 61 FD | 	cogid	result1
14a90     FD 00 02 F6 | 	mov	_var01, result1
14a94     01 00 66 F0 | 	shl	_var01, #1
14a98     FD 00 02 F1 | 	add	_var01, result1
14a9c     02 00 66 F0 | 	shl	_var01, #2
14aa0     FF 03 00 FF 
14aa4     00 03 06 F6 | 	mov	_var02, ##524032
14aa8     00 03 02 F1 | 	add	_var02, _var01
14aac                 | '     if long[mailbox] < 0
14aac     01 01 02 FB | 	rdlong	_var01, _var02
14ab0     00 00 56 F2 | 	cmps	_var01, #0 wc
14ab4                 | '         return ERR_MAILBOX_BUSY
14ab4     1C FA 65 C6 |  if_b	neg	result1, #28
14ab8     3C 00 90 CD |  if_b	jmp	#LR__1761
14abc                 | '     long[mailbox][2] := count
14abc     08 02 06 F1 | 	add	_var02, #8
14ac0     01 17 62 FC | 	wrlong	arg03, _var02
14ac4                 | '     long[mailbox][1] := srcHubAddr
14ac4     04 02 86 F1 | 	sub	_var02, #4
14ac8     01 13 62 FC | 	wrlong	arg01, _var02
14acc     04 02 86 F1 | 	sub	_var02, #4
14ad0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
14ad0     0A 05 02 F6 | 	mov	_var03, arg02
14ad4     D9 04 06 F4 | 	bitl	_var03, #217
14ad8     00 00 78 FF 
14adc     00 00 06 F6 | 	mov	_var01, ##-268435456
14ae0     02 01 02 F1 | 	add	_var01, _var03
14ae4     01 01 62 FC | 	wrlong	_var01, _var02
14ae8                 | '     repeat
14ae8                 | LR__1760
14ae8                 | '         result := long[mailbox]    
14ae8     01 05 02 FB | 	rdlong	_var03, _var02
14aec     00 04 56 F2 | 	cmps	_var03, #0 wc
14af0     F4 FF 9F CD |  if_b	jmp	#LR__1760
14af4                 | '     while result < 0   
14af4                 | '     return -result                       'return success or error
14af4     02 FB 61 F6 | 	neg	result1, _var03
14af8                 | LR__1761
14af8                 | _psram_spin2_write_ret
14af8     2D 00 64 FD | 	ret
14afc                 | 
14afc                 | ' 
14afc                 | ' ' generalized fill
14afc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
14afc                 | _psram_spin2_fill
14afc     09 01 02 F6 | 	mov	_var01, arg01
14b00     0A 03 02 F6 | 	mov	_var02, arg02
14b04     0B 05 02 F6 | 	mov	_var03, arg03
14b08     0D 07 02 F6 | 	mov	_var04, arg05
14b0c                 | '     case datasize 
14b0c     01 06 86 F1 | 	sub	_var04, #1
14b10     04 06 26 F3 | 	fle	_var04, #4
14b14     30 06 62 FD | 	jmprel	_var04
14b18                 | LR__1770
14b18     10 00 90 FD | 	jmp	#LR__1771
14b1c     18 00 90 FD | 	jmp	#LR__1772
14b20     2C 00 90 FD | 	jmp	#LR__1774
14b24     1C 00 90 FD | 	jmp	#LR__1773
14b28     24 00 90 FD | 	jmp	#LR__1774
14b2c                 | LR__1771
14b2c                 | '         1: req := driver.R_WRITEBYTE
14b2c     00 00 60 FF 
14b30     00 08 06 F6 | 	mov	_var05, ##-1073741824
14b34     20 00 90 FD | 	jmp	#LR__1775
14b38                 | LR__1772
14b38                 | '         2: req := driver.R_WRITEWORD
14b38     00 00 68 FF 
14b3c     00 08 06 F6 | 	mov	_var05, ##-805306368
14b40     14 00 90 FD | 	jmp	#LR__1775
14b44                 | LR__1773
14b44                 | '         4: req := driver.R_WRITELONG
14b44     00 00 70 FF 
14b48     00 08 06 F6 | 	mov	_var05, ##-536870912
14b4c     08 00 90 FD | 	jmp	#LR__1775
14b50                 | LR__1774
14b50                 | '         other : return ERR_INVALID
14b50     06 FA 65 F6 | 	neg	result1, #6
14b54     94 00 90 FD | 	jmp	#LR__1777
14b58                 | LR__1775
14b58                 | '     if count == 0   ' nothing to do
14b58     00 04 0E F2 | 	cmp	_var03, #0 wz
14b5c                 | '         return 0
14b5c     00 FA 05 A6 |  if_e	mov	result1, #0
14b60     88 00 90 AD |  if_e	jmp	#LR__1777
14b64                 | '     if drivercog == -1
14b64     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14b68     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
14b6c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14b70     FF FF 7F FF 
14b74     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
14b78                 | '         return ERR_INACTIVE
14b78     0F FA 65 A6 |  if_e	neg	result1, #15
14b7c     6C 00 90 AD |  if_e	jmp	#LR__1777
14b80                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
14b80     00 FA 05 F6 | 	mov	result1, #0
14b84     01 FA 61 FD | 	cogid	result1
14b88     FD 06 02 F6 | 	mov	_var04, result1
14b8c     01 06 66 F0 | 	shl	_var04, #1
14b90     FD 06 02 F1 | 	add	_var04, result1
14b94     02 06 66 F0 | 	shl	_var04, #2
14b98     FF 03 00 FF 
14b9c     00 0B 06 F6 | 	mov	_var06, ##524032
14ba0     03 0B 02 F1 | 	add	_var06, _var04
14ba4                 | '     if long[mailbox] < 0
14ba4     05 07 02 FB | 	rdlong	_var04, _var06
14ba8     00 06 56 F2 | 	cmps	_var04, #0 wc
14bac                 | '         return ERR_MAILBOX_BUSY
14bac     1C FA 65 C6 |  if_b	neg	result1, #28
14bb0     38 00 90 CD |  if_b	jmp	#LR__1777
14bb4                 | '     long[mailbox][2] := count
14bb4     08 0A 06 F1 | 	add	_var06, #8
14bb8     05 05 62 FC | 	wrlong	_var03, _var06
14bbc                 | '     long[mailbox][1] := pattern
14bbc     04 0A 86 F1 | 	sub	_var06, #4
14bc0     05 03 62 FC | 	wrlong	_var02, _var06
14bc4     04 0A 86 F1 | 	sub	_var06, #4
14bc8                 | '     long[mailbox] := req + (addr & $fffffff)
14bc8     04 0D 02 F6 | 	mov	_var07, _var05
14bcc     00 0F 02 F6 | 	mov	_var08, _var01
14bd0     7C 0E 06 F4 | 	bitl	_var08, #124
14bd4     07 0D 02 F1 | 	add	_var07, _var08
14bd8     05 0D 62 FC | 	wrlong	_var07, _var06
14bdc                 | '     repeat
14bdc                 | LR__1776
14bdc                 | '         r := long[mailbox]
14bdc     05 0F 02 FB | 	rdlong	_var08, _var06
14be0     00 0E 56 F2 | 	cmps	_var08, #0 wc
14be4     F4 FF 9F CD |  if_b	jmp	#LR__1776
14be8                 | '     while r < 0
14be8                 | '     return -r                  ' return 0 for success or negated error code
14be8     07 FB 61 F6 | 	neg	result1, _var08
14bec                 | LR__1777
14bec                 | _psram_spin2_fill_ret
14bec     2D 00 64 FD | 	ret
14bf0                 | 
14bf0                 | ' 
14bf0                 | ' '..............................................................................
14bf0                 | ' 
14bf0                 | ' {{
14bf0                 | ' }}
14bf0                 | ' PUB setQos(cog, qos) : result | mailbox
14bf0                 | _psram_spin2_setQos
14bf0     09 01 02 F6 | 	mov	_var01, arg01
14bf4                 | '     if drivercog == -1 ' driver must be running
14bf4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14bf8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14bfc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14c00     FF FF 7F FF 
14c04     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14c08                 | '         return ERR_INACTIVE
14c08     0F FA 65 A6 |  if_e	neg	result1, #15
14c0c     9C 00 90 AD |  if_e	jmp	#LR__1784
14c10                 | '     if cog < 0 or cog > 7 ' enforce cog id range
14c10     00 00 56 F2 | 	cmps	_var01, #0 wc
14c14     08 00 90 CD |  if_b	jmp	#LR__1780
14c18     08 00 56 F2 | 	cmps	_var01, #8 wc
14c1c     08 00 90 CD |  if_b	jmp	#LR__1781
14c20                 | LR__1780
14c20                 | '         return ERR_INVALID
14c20     06 FA 65 F6 | 	neg	result1, #6
14c24     84 00 90 FD | 	jmp	#LR__1784
14c28                 | LR__1781
14c28                 | '     long[@qosData][cog] := qos & !$1ff
14c28     FF 15 26 F5 | 	andn	arg02, #511
14c2c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14c30     02 00 66 F0 | 	shl	_var01, #2
14c34     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
14c38     00 15 62 FC | 	wrlong	arg02, _var01
14c3c                 | '     mailbox := $7FF00 + drivercog*12
14c3c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
14c40     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
14c44     02 07 02 F6 | 	mov	_var04, _var03
14c48     01 06 66 F0 | 	shl	_var04, #1
14c4c     02 07 02 F1 | 	add	_var04, _var03
14c50     02 06 66 F0 | 	shl	_var04, #2
14c54     FF 03 00 FF 
14c58     00 09 06 F6 | 	mov	_var05, ##524032
14c5c     03 09 02 F1 | 	add	_var05, _var04
14c60                 | '     repeat until LOCKTRY(driverlock)
14c60     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
14c64                 | LR__1782
14c64     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14c68     06 12 72 FD | 	locktry	arg01 wc
14c6c     F4 FF 9F 3D |  if_ae	jmp	#LR__1782
14c70     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14c74                 | '     long[mailbox] := driver.R_CONFIG + cogid()
14c74     00 06 06 F6 | 	mov	_var04, #0
14c78     01 06 62 FD | 	cogid	_var04
14c7c     00 00 78 FF 
14c80     00 02 06 F6 | 	mov	_var02, ##-268435456
14c84     03 03 02 F1 | 	add	_var02, _var04
14c88     04 03 62 FC | 	wrlong	_var02, _var05
14c8c                 | '     repeat while long[mailbox] < 0
14c8c                 | LR__1783
14c8c     04 03 02 FB | 	rdlong	_var02, _var05
14c90     00 02 56 F2 | 	cmps	_var02, #0 wc
14c94     F4 FF 9F CD |  if_b	jmp	#LR__1783
14c98                 | '     LOCKREL(driverlock)
14c98     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14c9c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14ca0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14ca4     07 12 72 FD | 	lockrel	arg01 wc
14ca8     00 FA 05 F6 | 	mov	result1, #0
14cac                 | LR__1784
14cac                 | _psram_spin2_setQos_ret
14cac     2D 00 64 FD | 	ret
14cb0                 | 
14cb0                 | ' 
14cb0                 | ' '..............................................................................
14cb0                 | ' 
14cb0                 | ' {{
14cb0                 | ' }}
14cb0                 | ' PRI lookupDelay(freq) : delay | profile
14cb0                 | _psram_spin2_lookupDelay
14cb0                 | '     profile := @delayTable
14cb0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
14cb4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
14cb8                 | '     delay := long[profile][0]
14cb8     00 03 02 FB | 	rdlong	_var02, _var01
14cbc                 | '     repeat while long[profile][1] 
14cbc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
14cc0     97 16 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
14cc4                 | LR__1790
14cc4     04 00 06 F1 | 	add	_var01, #4
14cc8     00 FB 09 FB | 	rdlong	result1, _var01 wz
14ccc     04 00 86 F1 | 	sub	_var01, #4
14cd0     1C 00 90 AD |  if_e	jmp	#LR__1792
14cd4                 | '         if freq +< long[profile][1] 
14cd4     04 00 06 F1 | 	add	_var01, #4
14cd8     00 FB 01 FB | 	rdlong	result1, _var01
14cdc     04 00 86 F1 | 	sub	_var01, #4
14ce0     FD 12 12 F2 | 	cmp	arg01, result1 wc
14ce4                 | '             quit
14ce4                 | '         profile += 4
14ce4     04 00 06 31 |  if_ae	add	_var01, #4
14ce8                 | '         delay++
14ce8     01 02 06 31 |  if_ae	add	_var02, #1
14cec     D4 FF 9F 3D |  if_ae	jmp	#LR__1790
14cf0                 | LR__1791
14cf0                 | LR__1792
14cf0     01 FB 01 F6 | 	mov	result1, _var02
14cf4                 | _psram_spin2_lookupDelay_ret
14cf4     2D 00 64 FD | 	ret
14cf8                 | 
14cf8                 | ' 
14cf8                 | ' PUB start() : r
14cf8                 | _usbnew_spin2_start
14cf8     00 00 06 F6 | 	mov	_var01, #0
14cfc                 | '   ifnot driver_cog
14cfc     15 00 00 FF 
14d00     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
14d04     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
14d08     15 00 00 FF 
14d0c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
14d10     38 00 90 5D |  if_ne	jmp	#LR__1800
14d14                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
14d14     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
14d18     10 00 06 F6 | 	mov	_var01, #16
14d1c     00 16 06 F6 | 	mov	arg03, #0
14d20     28 16 62 FD | 	setq	arg03
14d24     0A 01 F2 FC | 	coginit	_var01, arg02 wc
14d28     01 00 66 C6 |  if_b	neg	_var01, #1
14d2c                 | '     if r >= 0
14d2c     00 00 56 F2 | 	cmps	_var01, #0 wc
14d30                 | '       driver_cog := r+1
14d30     00 03 02 36 |  if_ae	mov	_var02, _var01
14d34     01 02 06 31 |  if_ae	add	_var02, #1
14d38     15 00 00 3F 
14d3c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
14d40     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
14d44     15 00 00 3F 
14d48     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
14d4c                 | LR__1800
14d4c     00 FB 01 F6 | 	mov	result1, _var01
14d50                 | _usbnew_spin2_start_ret
14d50     2D 00 64 FD | 	ret
14d54                 | 
14d54                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
14d54                 | ' 
14d54                 | ' '' Return key event from buffer if there is one
14d54                 | ' PUB get_key() : r | tail
14d54                 | _usbnew_spin2_get_key
14d54                 | '   tail := keyq_tail
14d54     0F 00 00 FF 
14d58     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
14d5c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
14d60                 | '   if keyq_head == tail
14d60     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
14d64     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
14d68     0F 00 00 FF 
14d6c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
14d70     00 03 0A F2 | 	cmp	_var02, _var01 wz
14d74                 | '     return 0 ' No event
14d74     00 FA 05 A6 |  if_e	mov	result1, #0
14d78     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
14d7c                 | '   r := keyq_data[tail]
14d7c     00 03 02 F6 | 	mov	_var02, _var01
14d80     02 02 66 F0 | 	shl	_var02, #2
14d84     0F 00 00 FF 
14d88     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
14d8c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
14d90     01 FB 01 FB | 	rdlong	result1, _var02
14d94                 | '   if ++tail == KEYQUEUE_SIZE
14d94     01 00 06 F1 | 	add	_var01, #1
14d98     80 00 0E F2 | 	cmp	_var01, #128 wz
14d9c                 | '     tail := 0
14d9c     00 00 06 A6 |  if_e	mov	_var01, #0
14da0                 | '   keyq_tail := tail
14da0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
14da4     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
14da8     0F 00 00 FF 
14dac     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
14db0                 | _usbnew_spin2_get_key_ret
14db0     2D 00 64 FD | 	ret
14db4                 | 
14db4                 | ' 
14db4                 | ' '' Emulate mouse movement
14db4                 | ' PUB mouse_move(x,y)
14db4                 | _usbnew_spin2_mouse_move
14db4     02 4A 05 F6 | 	mov	COUNT_, #2
14db8     A8 00 A0 FD | 	call	#pushregs_
14dbc     09 1F 02 F6 | 	mov	local01, arg01
14dc0     0A 21 02 F6 | 	mov	local02, arg02
14dc4                 | '   mouse_lock := 1
14dc4     14 00 00 FF 
14dc8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
14dcc     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
14dd0     14 00 00 FF 
14dd4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
14dd8                 | '   waitus(2) ' hope driver is now done
14dd8     02 12 06 F6 | 	mov	arg01, #2
14ddc     30 0A B0 FD | 	call	#__system___waitus
14de0                 | '   mouse_xacc := x
14de0     14 00 00 FF 
14de4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
14de8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
14dec                 | '   mouse_yacc := y
14dec     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
14df0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
14df4                 | '   if mouse_outptr
14df4     04 00 00 FF 
14df8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
14dfc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
14e00     0F 00 00 FF 
14e04     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
14e08     24 00 90 AD |  if_e	jmp	#LR__1810
14e0c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
14e0c     10 20 66 F0 | 	shl	local02, #16
14e10     0F 1F 32 F9 | 	getword	local01, local01, #0
14e14     0F 21 42 F5 | 	or	local02, local01
14e18     0F 00 00 FF 
14e1c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
14e20     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
14e24     0F 00 00 FF 
14e28     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
14e2c     0F 21 62 FC | 	wrlong	local02, local01
14e30                 | LR__1810
14e30                 | '   mouse_lock := 0
14e30     14 00 00 FF 
14e34     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
14e38     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
14e3c     14 00 00 FF 
14e40     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
14e44     A7 F0 03 F6 | 	mov	ptra, fp
14e48     B2 00 A0 FD | 	call	#popregs_
14e4c                 | _usbnew_spin2_mouse_move_ret
14e4c     2D 00 64 FD | 	ret
14e50                 | 
14e50                 | '     '' Set HAVE_HIDPAD to enable.
14e50                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
14e50                 | ' 
14e50                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
14e50                 | ' PUB hidpad_id(dev) : r
14e50                 | _usbnew_spin2_hidpad_id
14e50                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
14e50     13 00 00 FF 
14e54     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14e58     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
14e5c     09 01 02 F6 | 	mov	_var01, arg01
14e60     03 00 66 F0 | 	shl	_var01, #3
14e64     09 01 82 F1 | 	sub	_var01, arg01
14e68     02 00 66 F0 | 	shl	_var01, #2
14e6c     00 FB 01 F1 | 	add	result1, _var01
14e70     FD FA 01 FB | 	rdlong	result1, result1
14e74     13 00 00 FF 
14e78     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14e7c                 | _usbnew_spin2_hidpad_id_ret
14e7c     2D 00 64 FD | 	ret
14e80                 | 
14e80                 | ' 
14e80                 | ' '' Get all button states for a device
14e80                 | ' PUB hidpad_buttons(dev) : r 
14e80                 | _usbnew_spin2_hidpad_buttons
14e80                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
14e80     13 00 00 FF 
14e84     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14e88     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
14e8c     09 01 02 F6 | 	mov	_var01, arg01
14e90     03 00 66 F0 | 	shl	_var01, #3
14e94     09 01 82 F1 | 	sub	_var01, arg01
14e98     02 00 66 F0 | 	shl	_var01, #2
14e9c     00 FB 01 F1 | 	add	result1, _var01
14ea0     14 FA 05 F1 | 	add	result1, #20
14ea4     FD FA 01 FB | 	rdlong	result1, result1
14ea8     13 00 00 FF 
14eac     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14eb0                 | _usbnew_spin2_hidpad_buttons_ret
14eb0     2D 00 64 FD | 	ret
14eb4                 | 
14eb4                 | ' 
14eb4                 | ' '' Get state of an axis (normalized between -32768 and 32767)
14eb4                 | ' PUB hidpad_axis(dev,axnum) : r
14eb4                 | _usbnew_spin2_hidpad_axis
14eb4                 | '   if axnum +>= 6
14eb4     06 14 16 F2 | 	cmp	arg02, #6 wc
14eb8                 | '     return 0
14eb8     00 FA 05 36 |  if_ae	mov	result1, #0
14ebc     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
14ec0                 | '   else 
14ec0                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
14ec0     13 00 00 FF 
14ec4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14ec8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
14ecc     09 01 02 F6 | 	mov	_var01, arg01
14ed0     03 00 66 F0 | 	shl	_var01, #3
14ed4     09 01 82 F1 | 	sub	_var01, arg01
14ed8     02 00 66 F0 | 	shl	_var01, #2
14edc     00 FB 01 F1 | 	add	result1, _var01
14ee0     04 00 06 F6 | 	mov	_var01, #4
14ee4     0A 01 02 F1 | 	add	_var01, arg02
14ee8     01 00 66 F0 | 	shl	_var01, #1
14eec     FD 00 02 F1 | 	add	_var01, result1
14ef0     00 FB E1 FA | 	rdword	result1, _var01
14ef4     0F FA 65 F7 | 	signx	result1, #15
14ef8     13 00 00 FF 
14efc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14f00                 | _usbnew_spin2_hidpad_axis_ret
14f00     2D 00 64 FD | 	ret
14f04                 | 
14f04                 | ' 
14f04                 | ' 
14f04                 | ' '--------------------------------------------------------------
14f04                 | ' '---------- Init the variables, start the cog. ----------------
14f04                 | ' '--------------------------------------------------------------
14f04                 | ' 
14f04                 | ' pub start(mbox,scope,cache) :cog,base | iii
14f04                 | _Audio093b_8_sc_spin2_start
14f04     04 4A 05 F6 | 	mov	COUNT_, #4
14f08     A8 00 A0 FD | 	call	#pushregs_
14f0c     09 1F 02 F6 | 	mov	local01, arg01
14f10                 | ' 
14f10                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
14f10                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
14f10                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
14f10                 | ' 
14f10                 | ' mailboxaddr:=mbox 
14f10     F2 1E 62 FC | 	wrlong	local01, objptr
14f14                 | ' scope_ptr:=scope
14f14     04 E4 05 F1 | 	add	objptr, #4
14f18     F2 14 62 FC | 	wrlong	arg02, objptr
14f1c                 | ' cache_ptr:=cache
14f1c     04 E4 05 F1 | 	add	objptr, #4
14f20     F2 16 62 FC | 	wrlong	arg03, objptr
14f24                 | ' base:=@channel1[0]
14f24     04 E4 05 F1 | 	add	objptr, #4
14f28     F2 20 02 F6 | 	mov	local02, objptr
14f2c                 | ' 
14f2c                 | ' repeat iii from 0 to 7
14f2c     00 22 06 F6 | 	mov	local03, #0
14f30     01 00 00 FF 
14f34     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
14f38     0C E4 85 F1 | 	sub	objptr, #12
14f3c     97 80 48 FB | 	callpa	#(@LR__1821-@LR__1820)>>2,fcache_load_ptr_
14f40                 | LR__1820
14f40                 | '   long[base+32*iii]:=0
14f40     10 1F 02 F6 | 	mov	local01, local02
14f44     11 FD 01 F6 | 	mov	result2, local03
14f48     05 FC 65 F0 | 	shl	result2, #5
14f4c     FE 1E 02 F1 | 	add	local01, result2
14f50     0F 01 68 FC | 	wrlong	#0, local01
14f54                 | '   long[base+32*iii+4]:=0
14f54     10 1F 02 F6 | 	mov	local01, local02
14f58     11 FD 01 F6 | 	mov	result2, local03
14f5c     05 FC 65 F0 | 	shl	result2, #5
14f60     FE 1E 02 F1 | 	add	local01, result2
14f64     04 1E 06 F1 | 	add	local01, #4
14f68     0F 01 68 FC | 	wrlong	#0, local01
14f6c                 | '   long[base+32*iii+12]:=0
14f6c     10 25 02 F6 | 	mov	local04, local02
14f70     11 1F 02 F6 | 	mov	local01, local03
14f74     05 1E 66 F0 | 	shl	local01, #5
14f78     0F 25 02 F1 | 	add	local04, local01
14f7c     0C 24 06 F1 | 	add	local04, #12
14f80     12 01 68 FC | 	wrlong	#0, local04
14f84                 | '   long[base+32*iii+16]:=2 
14f84     10 25 02 F6 | 	mov	local04, local02
14f88     11 1F 02 F6 | 	mov	local01, local03
14f8c     05 1E 66 F0 | 	shl	local01, #5
14f90     0F 25 02 F1 | 	add	local04, local01
14f94     10 24 06 F1 | 	add	local04, #16
14f98     12 05 68 FC | 	wrlong	#2, local04
14f9c                 | '   word[base+32*iii+20]:=0
14f9c     10 25 02 F6 | 	mov	local04, local02
14fa0     11 1F 02 F6 | 	mov	local01, local03
14fa4     05 1E 66 F0 | 	shl	local01, #5
14fa8     0F 25 02 F1 | 	add	local04, local01
14fac     14 24 06 F1 | 	add	local04, #20
14fb0     12 01 58 FC | 	wrword	#0, local04
14fb4                 | '   word[base+32*iii+22]:=8192
14fb4     10 25 02 F6 | 	mov	local04, local02
14fb8     11 1F 02 F6 | 	mov	local01, local03
14fbc     05 1E 66 F0 | 	shl	local01, #5
14fc0     0F 25 02 F1 | 	add	local04, local01
14fc4     16 24 06 F1 | 	add	local04, #22
14fc8     10 00 80 FF 
14fcc     12 01 58 FC | 	wrword	##8192, local04
14fd0                 | '   word[base+32*iii+24]:=4000+2*iii
14fd0     11 25 02 F6 | 	mov	local04, local03
14fd4     01 24 66 F0 | 	shl	local04, #1
14fd8     07 00 00 FF 
14fdc     A0 1F 06 F6 | 	mov	local01, ##4000
14fe0     12 1F 02 F1 | 	add	local01, local04
14fe4     10 25 02 F6 | 	mov	local04, local02
14fe8     11 FD 01 F6 | 	mov	result2, local03
14fec     05 FC 65 F0 | 	shl	result2, #5
14ff0     FE 24 02 F1 | 	add	local04, result2
14ff4     18 24 06 F1 | 	add	local04, #24
14ff8     12 1F 52 FC | 	wrword	local01, local04
14ffc                 | '   word[base+32*iii+26]:=2
14ffc     10 25 02 F6 | 	mov	local04, local02
15000     11 1F 02 F6 | 	mov	local01, local03
15004     05 1E 66 F0 | 	shl	local01, #5
15008     0F 25 02 F1 | 	add	local04, local01
1500c     1A 24 06 F1 | 	add	local04, #26
15010     12 05 58 FC | 	wrword	#2, local04
15014                 | '   long [base+32*iii+8]:=@null | $C0000000
15014     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
15018     3E 1E 26 F4 | 	bith	local01, #62
1501c     10 25 02 F6 | 	mov	local04, local02
15020     11 17 02 F6 | 	mov	arg03, local03
15024     05 16 66 F0 | 	shl	arg03, #5
15028     0B 25 02 F1 | 	add	local04, arg03
1502c     08 24 06 F1 | 	add	local04, #8
15030     12 1F 62 FC | 	wrlong	local01, local04
15034     01 22 06 F1 | 	add	local03, #1
15038     08 22 56 F2 | 	cmps	local03, #8 wc
1503c     00 FF 9F CD |  if_b	jmp	#LR__1820
15040                 | LR__1821
15040     01 00 00 FF 
15044     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
15048                 | '   
15048                 | ' cog:=coginit(16,@audio,@mailboxaddr)
15048     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
1504c     F2 16 02 F6 | 	mov	arg03, objptr
15050     10 24 06 F6 | 	mov	local04, #16
15054     28 16 62 FD | 	setq	arg03
15058     0A 25 F2 FC | 	coginit	local04, arg02 wc
1505c     01 24 66 C6 |  if_b	neg	local04, #1
15060                 | ' waitms(100)
15060     64 12 06 F6 | 	mov	arg01, #100
15064     3C 07 B0 FD | 	call	#__system___waitms
15068                 | ' return cog,base
15068     10 FD 01 F6 | 	mov	result2, local02
1506c     12 FB 01 F6 | 	mov	result1, local04
15070     A7 F0 03 F6 | 	mov	ptra, fp
15074     B2 00 A0 FD | 	call	#popregs_
15078                 | _Audio093b_8_sc_spin2_start_ret
15078     2D 00 64 FD | 	ret
1507c                 | 
1507c                 | ' 
1507c                 | ' ' a simple play procedure to not poke everything. 
1507c                 | ' 
1507c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1507c                 | _Audio093b_8_sc_spin2_play
1507c     0C E4 05 F1 | 	add	objptr, #12
15080     F2 00 02 F6 | 	mov	_var01, objptr
15084     05 12 66 F0 | 	shl	arg01, #5
15088     09 01 02 F1 | 	add	_var01, arg01
1508c     00 00 60 FF 
15090     00 14 06 F1 | 	add	arg02, ##-1073741824
15094     00 13 02 F6 | 	mov	arg01, _var01
15098     08 12 06 F1 | 	add	arg01, #8
1509c     09 15 62 FC | 	wrlong	arg02, arg01
150a0     00 15 02 F6 | 	mov	arg02, _var01
150a4     0C 14 06 F1 | 	add	arg02, #12
150a8     0A 1B 62 FC | 	wrlong	arg05, arg02
150ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
150b0     00 15 02 36 |  if_ae	mov	arg02, _var01
150b4     10 14 06 31 |  if_ae	add	arg02, #16
150b8     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
150bc     02 1A 06 C1 |  if_b	add	arg05, #2
150c0     00 13 02 C6 |  if_b	mov	arg01, _var01
150c4     10 12 06 C1 |  if_b	add	arg01, #16
150c8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
150cc     0B 15 52 F6 | 	abs	arg02, arg03 wc
150d0     0F 1B 80 FF 
150d4     0A 3F 1A FD | 	qdiv	##3546911, arg02
150d8                 | ' 
150d8                 | ' base2:=@channel1[0]+32*channel
150d8                 | ' long[base2+8]:=sample+$C0000000 
150d8                 | ' long[base2+12]:= len
150d8                 | ' if loop >=0 
150d8                 | '   long[base2+16]:= loop
150d8     0C E4 85 F1 | 	sub	objptr, #12
150dc                 | ' else
150dc                 | '   long[base2+16]:= len+2
150dc                 | ' word[base2+20]:=vol
150dc     00 15 02 F6 | 	mov	arg02, _var01
150e0     14 14 06 F1 | 	add	arg02, #20
150e4     0A 19 52 FC | 	wrword	arg04, arg02
150e8                 | ' word[base2+24]:= 3546911/splfreq 
150e8     00 13 02 F6 | 	mov	arg01, _var01
150ec     18 12 06 F1 | 	add	arg01, #24
150f0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
150f0                 | ' long[base2+28]:=$40000000
150f0     18 14 62 FD | 	getqx	arg02
150f4     0A 15 82 F6 | 	negc	arg02, arg02
150f8     09 15 52 FC | 	wrword	arg02, arg01
150fc     00 15 02 F6 | 	mov	arg02, _var01
15100     1A 14 06 F1 | 	add	arg02, #26
15104     0A 01 5A FC | 	wrword	#256, arg02
15108     1C 00 06 F1 | 	add	_var01, #28
1510c     00 00 A0 FF 
15110     00 01 68 FC | 	wrlong	##1073741824, _var01
15114                 | _Audio093b_8_sc_spin2_play_ret
15114     2D 00 64 FD | 	ret
15118                 | 
15118                 | ' until (i >>8) >=len
15118                 | ' 
15118                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
15118                 | _Audio093b_8_sc_spin2_play8
15118                 | ' 
15118                 | ' base2:=@channel1[0]+32*channel
15118     0C E4 05 F1 | 	add	objptr, #12
1511c     F2 00 02 F6 | 	mov	_var01, objptr
15120     05 12 66 F0 | 	shl	arg01, #5
15124     09 01 02 F1 | 	add	_var01, arg01
15128                 | ' long[base2]:=0
15128     00 01 68 FC | 	wrlong	#0, _var01
1512c                 | ' long[base2+8]:=sample+$40000000 
1512c     00 00 20 FF 
15130     00 14 06 F1 | 	add	arg02, ##1073741824
15134     00 13 02 F6 | 	mov	arg01, _var01
15138     08 12 06 F1 | 	add	arg01, #8
1513c     09 15 62 FC | 	wrlong	arg02, arg01
15140                 | ' if loop>=0
15140     00 1C 56 F2 | 	cmps	arg06, #0 wc
15144     0C E4 85 F1 | 	sub	objptr, #12
15148     1C 00 90 CD |  if_b	jmp	#LR__1830
1514c                 | '   long[base2+12]:=loop
1514c     00 15 02 F6 | 	mov	arg02, _var01
15150     0C 14 06 F1 | 	add	arg02, #12
15154     0A 1D 62 FC | 	wrlong	arg06, arg02
15158                 | '   long[base2+16]:= len
15158     00 1D 02 F6 | 	mov	arg06, _var01
1515c     10 1C 06 F1 | 	add	arg06, #16
15160     0E 1B 62 FC | 	wrlong	arg05, arg06
15164     1C 00 90 FD | 	jmp	#LR__1831
15168                 | LR__1830
15168                 | ' else
15168                 | '   long[base2+12]:= len
15168     00 1D 02 F6 | 	mov	arg06, _var01
1516c     0C 1C 06 F1 | 	add	arg06, #12
15170     0E 1B 62 FC | 	wrlong	arg05, arg06
15174                 | '   long[base2+16]:= len+1
15174     01 1A 06 F1 | 	add	arg05, #1
15178     00 13 02 F6 | 	mov	arg01, _var01
1517c     10 12 06 F1 | 	add	arg01, #16
15180     09 1B 62 FC | 	wrlong	arg05, arg01
15184                 | LR__1831
15184     0B 17 52 F6 | 	abs	arg03, arg03 wc
15188     0F 1B 80 FF 
1518c     0B 3F 1A FD | 	qdiv	##3546911, arg03
15190                 | ' word[base2+20]:=vol
15190     00 17 02 F6 | 	mov	arg03, _var01
15194     14 16 06 F1 | 	add	arg03, #20
15198     0B 19 52 FC | 	wrword	arg04, arg03
1519c                 | ' word[base2+24]:= 3546911/splfreq 
1519c     00 13 02 F6 | 	mov	arg01, _var01
151a0     18 12 06 F1 | 	add	arg01, #24
151a4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
151a4                 | ' long[base2+28]:=$40000000
151a4     18 18 62 FD | 	getqx	arg04
151a8     0C 19 82 F6 | 	negc	arg04, arg04
151ac     09 19 52 FC | 	wrword	arg04, arg01
151b0     00 19 02 F6 | 	mov	arg04, _var01
151b4     1A 18 06 F1 | 	add	arg04, #26
151b8     0C 01 5A FC | 	wrword	#256, arg04
151bc     1C 00 06 F1 | 	add	_var01, #28
151c0     00 00 A0 FF 
151c4     00 01 68 FC | 	wrlong	##1073741824, _var01
151c8                 | _Audio093b_8_sc_spin2_play8_ret
151c8     2D 00 64 FD | 	ret
151cc                 | 
151cc                 | ' 
151cc                 | '     
151cc                 | ' pub stop(channel) 'silence it
151cc                 | _Audio093b_8_sc_spin2_stop
151cc                 | ' 
151cc                 | ' word[@channel1[0]+32*channel+20]:=0
151cc     0C E4 05 F1 | 	add	objptr, #12
151d0     F2 00 02 F6 | 	mov	_var01, objptr
151d4     05 12 66 F0 | 	shl	arg01, #5
151d8     09 01 02 F1 | 	add	_var01, arg01
151dc     14 00 06 F1 | 	add	_var01, #20
151e0     00 01 58 FC | 	wrword	#0, _var01
151e4     0C E4 85 F1 | 	sub	objptr, #12
151e8                 | _Audio093b_8_sc_spin2_stop_ret
151e8     2D 00 64 FD | 	ret
151ec                 | hubexit
151ec     81 00 80 FD | 	jmp	#cogexit
151f0                 | 
151f0                 | __system___setbaud
151f0     14 5E 06 FB | 	rdlong	muldiva_, #20
151f4     09 61 02 F6 | 	mov	muldivb_, arg01
151f8     BA 00 A0 FD | 	call	#divide_
151fc     97 06 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
15200                 | LR__1840
15200     3E FA 9D FA | 	rdpin	result1, #62 wc
15204     FE FC A1 F1 | 	subx	result2, result2
15208     F4 FF 9F CD |  if_b	jmp	#LR__1840
1520c                 | LR__1841
1520c     40 7C 64 FD | 	dirl	#62
15210     40 7E 64 FD | 	dirl	#63
15214     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
15218     10 60 66 F0 | 	shl	muldivb_, #16
1521c     07 14 06 F6 | 	mov	arg02, #7
15220     30 15 02 F1 | 	add	arg02, muldivb_
15224     3E F8 0C FC | 	wrpin	#124, #62
15228     3E 14 16 FC | 	wxpin	arg02, #62
1522c     3F 7C 0C FC | 	wrpin	#62, #63
15230     14 14 06 F1 | 	add	arg02, #20
15234     3F 14 16 FC | 	wxpin	arg02, #63
15238     41 7C 64 FD | 	dirh	#62
1523c     41 7E 64 FD | 	dirh	#63
15240                 | __system___setbaud_ret
15240     2D 00 64 FD | 	ret
15244                 | 
15244                 | __system___txraw
15244     01 4A 05 F6 | 	mov	COUNT_, #1
15248     A8 00 A0 FD | 	call	#pushregs_
1524c     09 1F 02 F6 | 	mov	local01, arg01
15250     97 06 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
15254                 | LR__1850
15254     3E FA 9D FA | 	rdpin	result1, #62 wc
15258     FE FC A1 F1 | 	subx	result2, result2
1525c     F4 FF 9F CD |  if_b	jmp	#LR__1850
15260                 | LR__1851
15260     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15264     C2 01 00 AF 
15268     00 12 06 A6 |  if_e	mov	arg01, ##230400
1526c     80 FF BF AD |  if_e	call	#__system___setbaud
15270     3E 1E 26 FC | 	wypin	local01, #62
15274     01 FA 05 F6 | 	mov	result1, #1
15278     A7 F0 03 F6 | 	mov	ptra, fp
1527c     B2 00 A0 FD | 	call	#popregs_
15280                 | __system___txraw_ret
15280     2D 00 64 FD | 	ret
15284                 | 
15284                 | __system___rxraw
15284     0D 4A 05 F6 | 	mov	COUNT_, #13
15288     A8 00 A0 FD | 	call	#pushregs_
1528c     09 1F 02 F6 | 	mov	local01, arg01
15290     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
15294     C2 01 00 AF 
15298     00 12 06 A6 |  if_e	mov	arg01, ##230400
1529c     50 FF BF AD |  if_e	call	#__system___setbaud
152a0     00 1E 0E F2 | 	cmp	local01, #0 wz
152a4     20 00 90 AD |  if_e	jmp	#LR__1860
152a8     14 22 06 FB | 	rdlong	local03, #20
152ac     0A 22 46 F0 | 	shr	local03, #10
152b0     11 1F 02 FD | 	qmul	local01, local03
152b4     1A FA 61 FD | 	getct	result1
152b8     18 24 62 FD | 	getqx	local04
152bc     12 FB 01 F1 | 	add	result1, local04
152c0     FD 26 02 F6 | 	mov	local05, result1
152c4     04 00 90 FD | 	jmp	#LR__1861
152c8                 | LR__1860
152c8     00 26 06 F6 | 	mov	local05, #0
152cc                 | LR__1861
152cc     01 28 66 F6 | 	neg	local06, #1
152d0     3F 2A 06 F6 | 	mov	local07, #63
152d4     00 2C 06 F6 | 	mov	local08, #0
152d8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
152dc     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
152e0     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
152e4                 | LR__1862
152e4     08 2E 16 F4 | 	testb	local09, #8 wc
152e8     09 2E 76 F4 | 	testbn	local09, #9 andc
152ec     0A 2E 46 F0 | 	shr	local09, #10
152f0     01 2C 06 C6 |  if_b	mov	local08, #1
152f4     40 7E 6C 3D |  if_ae	testp	#63 wz
152f8     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
152fc     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
15300     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
15304                 | LR__1863
15304     00 20 06 F6 | 	mov	local02, #0
15308     00 2C 0E F2 | 	cmp	local08, #0 wz
1530c     01 20 66 56 |  if_ne	neg	local02, #1
15310     00 30 06 F6 | 	mov	local10, #0
15314     00 22 06 F6 | 	mov	local03, #0
15318     00 1E 0E F2 | 	cmp	local01, #0 wz
1531c     01 22 66 56 |  if_ne	neg	local03, #1
15320     00 24 06 F6 | 	mov	local04, #0
15324     00 32 06 F6 | 	mov	local11, #0
15328     1A FA 61 FD | 	getct	result1
1532c     FD 34 02 F6 | 	mov	local12, result1
15330     1A 37 02 F6 | 	mov	local13, local12
15334     13 37 82 F1 | 	sub	local13, local05
15338     00 36 56 F2 | 	cmps	local13, #0 wc
1533c     00 32 26 C6 |  if_b	not	local11, #0
15340     00 32 0E F2 | 	cmp	local11, #0 wz
15344     00 24 26 56 |  if_ne	not	local04, #0
15348     12 23 CA F7 | 	test	local03, local04 wz
1534c     00 30 26 56 |  if_ne	not	local10, #0
15350     18 21 4A F5 | 	or	local02, local10 wz
15354     8C FF 9F AD |  if_e	jmp	#LR__1862
15358     00 2C 0E F2 | 	cmp	local08, #0 wz
1535c     17 29 02 56 |  if_ne	mov	local06, local09
15360     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
15364     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15368     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1536c     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15370     14 FB 01 F6 | 	mov	result1, local06
15374     A7 F0 03 F6 | 	mov	ptra, fp
15378     B2 00 A0 FD | 	call	#popregs_
1537c                 | __system___rxraw_ret
1537c     2D 00 64 FD | 	ret
15380                 | 
15380                 | __system___getus
15380     1A FC 71 FD | 	getct	result2 wc
15384     1A 00 62 FD | 	getct	_var01
15388     10 E8 05 F1 | 	add	ptr___system__dat__, #16
1538c     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
15390     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15394     20 00 90 5D |  if_ne	jmp	#LR__1870
15398     14 02 06 FB | 	rdlong	_var02, #20
1539c     A1 07 00 FF 
153a0     40 02 16 FD | 	qdiv	_var02, ##1000000
153a4     10 E8 05 F1 | 	add	ptr___system__dat__, #16
153a8     18 FA 61 FD | 	getqx	result1
153ac     FD 02 02 F6 | 	mov	_var02, result1
153b0     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
153b4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
153b8                 | LR__1870
153b8     01 FD 11 FD | 	qdiv	result2, _var02
153bc     19 FC 61 FD | 	getqy	result2
153c0     28 FC 61 FD | 	setq	result2
153c4     01 01 12 FD | 	qdiv	_var01, _var02
153c8     18 FA 61 FD | 	getqx	result1
153cc                 | __system___getus_ret
153cc     2D 00 64 FD | 	ret
153d0                 | 
153d0                 | __system____builtin_memmove
153d0     09 01 02 F6 | 	mov	_var01, arg01
153d4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
153d8     10 00 90 CD |  if_b	jmp	#LR__1880
153dc     0A 03 02 F6 | 	mov	_var02, arg02
153e0     0B 03 02 F1 | 	add	_var02, arg03
153e4     01 13 52 F2 | 	cmps	arg01, _var02 wc
153e8     48 00 90 CD |  if_b	jmp	#LR__1886
153ec                 | LR__1880
153ec     0B 05 02 F6 | 	mov	_var03, arg03
153f0     02 04 4E F0 | 	shr	_var03, #2 wz
153f4     18 00 90 AD |  if_e	jmp	#LR__1885
153f8     97 0A 48 FB | 	callpa	#(@LR__1883-@LR__1881)>>2,fcache_load_ptr_
153fc                 | LR__1881
153fc     02 09 D8 FC | 	rep	@LR__1884, _var03
15400                 | LR__1882
15400     0A 05 02 FB | 	rdlong	_var03, arg02
15404     09 05 62 FC | 	wrlong	_var03, arg01
15408     04 12 06 F1 | 	add	arg01, #4
1540c     04 14 06 F1 | 	add	arg02, #4
15410                 | LR__1883
15410                 | LR__1884
15410                 | LR__1885
15410     02 16 CE F7 | 	test	arg03, #2 wz
15414     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
15418     09 03 52 5C |  if_ne	wrword	_var02, arg01
1541c     02 12 06 51 |  if_ne	add	arg01, #2
15420     02 14 06 51 |  if_ne	add	arg02, #2
15424     01 16 CE F7 | 	test	arg03, #1 wz
15428     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1542c     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
15430     28 00 90 FD | 	jmp	#LR__1892
15434                 | LR__1886
15434     0B 13 02 F1 | 	add	arg01, arg03
15438     0B 15 02 F1 | 	add	arg02, arg03
1543c     0B 07 0A F6 | 	mov	_var04, arg03 wz
15440     18 00 90 AD |  if_e	jmp	#LR__1891
15444     97 0A 48 FB | 	callpa	#(@LR__1889-@LR__1887)>>2,fcache_load_ptr_
15448                 | LR__1887
15448     03 09 D8 FC | 	rep	@LR__1890, _var04
1544c                 | LR__1888
1544c     01 12 86 F1 | 	sub	arg01, #1
15450     01 14 86 F1 | 	sub	arg02, #1
15454     0A 03 C2 FA | 	rdbyte	_var02, arg02
15458     09 03 42 FC | 	wrbyte	_var02, arg01
1545c                 | LR__1889
1545c                 | LR__1890
1545c                 | LR__1891
1545c                 | LR__1892
1545c     00 FB 01 F6 | 	mov	result1, _var01
15460                 | __system____builtin_memmove_ret
15460     2D 00 64 FD | 	ret
15464                 | 
15464                 | __system____builtin_strcpy
15464     09 01 02 F6 | 	mov	_var01, arg01
15468     97 0A 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
1546c                 | LR__1900
1546c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
15470     09 FB 41 FC | 	wrbyte	result1, arg01
15474     01 14 06 F1 | 	add	arg02, #1
15478     01 12 06 F1 | 	add	arg01, #1
1547c     EC FF 9F 5D |  if_ne	jmp	#LR__1900
15480                 | LR__1901
15480     00 FB 01 F6 | 	mov	result1, _var01
15484                 | __system____builtin_strcpy_ret
15484     2D 00 64 FD | 	ret
15488                 | 
15488                 | __system____topofstack
15488     00 4A 05 F6 | 	mov	COUNT_, #0
1548c     A8 00 A0 FD | 	call	#pushregs_
15490     08 F0 07 F1 | 	add	ptra, #8
15494     04 4E 05 F1 | 	add	fp, #4
15498     A7 12 62 FC | 	wrlong	arg01, fp
1549c     A7 FA 01 F6 | 	mov	result1, fp
154a0     04 4E 85 F1 | 	sub	fp, #4
154a4     A7 F0 03 F6 | 	mov	ptra, fp
154a8     B2 00 A0 FD | 	call	#popregs_
154ac                 | __system____topofstack_ret
154ac     2D 00 64 FD | 	ret
154b0                 | 
154b0                 | __system___lockmem
154b0     00 FA 05 F6 | 	mov	result1, #0
154b4     01 FA 61 FD | 	cogid	result1
154b8     00 FB 05 F1 | 	add	result1, #256
154bc                 | LR__1910
154bc     09 01 0A FB | 	rdlong	_var01, arg01 wz
154c0     09 FB 61 AC |  if_e	wrlong	result1, arg01
154c4     09 01 02 AB |  if_e	rdlong	_var01, arg01
154c8     09 01 02 AB |  if_e	rdlong	_var01, arg01
154cc     FD 00 0A F2 | 	cmp	_var01, result1 wz
154d0     E8 FF 9F 5D |  if_ne	jmp	#LR__1910
154d4                 | __system___lockmem_ret
154d4     2D 00 64 FD | 	ret
154d8                 | 
154d8                 | __system___string_cmp
154d8     97 14 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
154dc                 | LR__1920
154dc     09 01 C2 FA | 	rdbyte	_var01, arg01
154e0     0A 03 C2 FA | 	rdbyte	_var02, arg02
154e4     00 05 02 F6 | 	mov	_var03, _var01
154e8     01 05 8A F1 | 	sub	_var03, _var02 wz
154ec     01 12 06 F1 | 	add	arg01, #1
154f0     01 14 06 F1 | 	add	arg02, #1
154f4     0C 00 90 5D |  if_ne	jmp	#LR__1922
154f8     00 00 0E F2 | 	cmp	_var01, #0 wz
154fc     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
15500     D8 FF 9F 5D |  if_ne	jmp	#LR__1920
15504                 | LR__1921
15504                 | LR__1922
15504     02 FB 01 F6 | 	mov	result1, _var03
15508                 | __system___string_cmp_ret
15508     2D 00 64 FD | 	ret
1550c                 | 
1550c                 | __system___string_concat
1550c     05 4A 05 F6 | 	mov	COUNT_, #5
15510     A8 00 A0 FD | 	call	#pushregs_
15514     09 1F 02 F6 | 	mov	local01, arg01
15518     0A 21 02 F6 | 	mov	local02, arg02
1551c     0F 13 02 F6 | 	mov	arg01, local01
15520     09 23 02 F6 | 	mov	local03, arg01
15524     97 06 48 FB | 	callpa	#(@LR__1931-@LR__1930)>>2,fcache_load_ptr_
15528                 | LR__1930
15528     11 FB C9 FA | 	rdbyte	result1, local03 wz
1552c     01 22 06 51 |  if_ne	add	local03, #1
15530     F4 FF 9F 5D |  if_ne	jmp	#LR__1930
15534                 | LR__1931
15534     09 23 82 F1 | 	sub	local03, arg01
15538     11 25 02 F6 | 	mov	local04, local03
1553c     10 13 02 F6 | 	mov	arg01, local02
15540     09 23 02 F6 | 	mov	local03, arg01
15544     97 06 48 FB | 	callpa	#(@LR__1933-@LR__1932)>>2,fcache_load_ptr_
15548                 | LR__1932
15548     11 FB C9 FA | 	rdbyte	result1, local03 wz
1554c     01 22 06 51 |  if_ne	add	local03, #1
15550     F4 FF 9F 5D |  if_ne	jmp	#LR__1932
15554                 | LR__1933
15554     09 23 82 F1 | 	sub	local03, arg01
15558     12 13 02 F6 | 	mov	arg01, local04
1555c     11 13 02 F1 | 	add	arg01, local03
15560     01 12 06 F1 | 	add	arg01, #1
15564     B0 39 B0 FD | 	call	#__system___gc_alloc_managed
15568     FD 26 0A F6 | 	mov	local05, result1 wz
1556c     28 00 90 AD |  if_e	jmp	#LR__1934
15570     13 13 02 F6 | 	mov	arg01, local05
15574     0F 15 02 F6 | 	mov	arg02, local01
15578     12 17 02 F6 | 	mov	arg03, local04
1557c     50 FE BF FD | 	call	#__system____builtin_memmove
15580     13 13 02 F6 | 	mov	arg01, local05
15584     12 13 02 F1 | 	add	arg01, local04
15588     01 22 06 F1 | 	add	local03, #1
1558c     10 15 02 F6 | 	mov	arg02, local02
15590     11 17 02 F6 | 	mov	arg03, local03
15594     38 FE BF FD | 	call	#__system____builtin_memmove
15598                 | LR__1934
15598     13 FB 01 F6 | 	mov	result1, local05
1559c     A7 F0 03 F6 | 	mov	ptra, fp
155a0     B2 00 A0 FD | 	call	#popregs_
155a4                 | __system___string_concat_ret
155a4     2D 00 64 FD | 	ret
155a8                 | 
155a8                 | __system___tx
155a8     02 4A 05 F6 | 	mov	COUNT_, #2
155ac     A8 00 A0 FD | 	call	#pushregs_
155b0     09 1F 02 F6 | 	mov	local01, arg01
155b4     0A 1E 0E F2 | 	cmp	local01, #10 wz
155b8     18 00 90 5D |  if_ne	jmp	#LR__1940
155bc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
155c0     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
155c4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
155c8     02 20 CE F7 | 	test	local02, #2 wz
155cc     0D 12 06 56 |  if_ne	mov	arg01, #13
155d0     70 FC BF 5D |  if_ne	call	#__system___txraw
155d4                 | LR__1940
155d4     0F 13 02 F6 | 	mov	arg01, local01
155d8     68 FC BF FD | 	call	#__system___txraw
155dc     A7 F0 03 F6 | 	mov	ptra, fp
155e0     B2 00 A0 FD | 	call	#popregs_
155e4                 | __system___tx_ret
155e4     2D 00 64 FD | 	ret
155e8                 | 
155e8                 | __system___rx
155e8     01 4A 05 F6 | 	mov	COUNT_, #1
155ec     A8 00 A0 FD | 	call	#pushregs_
155f0                 | LR__1950
155f0     00 12 06 F6 | 	mov	arg01, #0
155f4     8C FC BF FD | 	call	#__system___rxraw
155f8     FD 1E 02 F6 | 	mov	local01, result1
155fc     FF FF 7F FF 
15600     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
15604     E8 FF 9F AD |  if_e	jmp	#LR__1950
15608     0D 1E 0E F2 | 	cmp	local01, #13 wz
1560c     14 00 90 5D |  if_ne	jmp	#LR__1951
15610     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15614     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
15618     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1561c     02 FA CD F7 | 	test	result1, #2 wz
15620     0A 1E 06 56 |  if_ne	mov	local01, #10
15624                 | LR__1951
15624     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15628     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1562c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15630     01 12 CE F7 | 	test	arg01, #1 wz
15634     1C 00 90 AD |  if_e	jmp	#LR__1954
15638     7F 1E 0E F2 | 	cmp	local01, #127 wz
1563c     0C 00 90 5D |  if_ne	jmp	#LR__1952
15640     08 12 06 F6 | 	mov	arg01, #8
15644     60 FF BF FD | 	call	#__system___tx
15648     08 00 90 FD | 	jmp	#LR__1953
1564c                 | LR__1952
1564c     0F 13 02 F6 | 	mov	arg01, local01
15650     54 FF BF FD | 	call	#__system___tx
15654                 | LR__1953
15654                 | LR__1954
15654     0F FB 01 F6 | 	mov	result1, local01
15658     A7 F0 03 F6 | 	mov	ptra, fp
1565c     B2 00 A0 FD | 	call	#popregs_
15660                 | __system___rx_ret
15660     2D 00 64 FD | 	ret
15664                 | 
15664                 | __system___pinwrite
15664     09 01 02 F6 | 	mov	_var01, arg01
15668     1F 00 06 F5 | 	and	_var01, #31
1566c     20 12 CE F7 | 	test	arg01, #32 wz
15670     06 12 46 F0 | 	shr	arg01, #6
15674     09 13 CA F9 | 	bmask	arg01, arg01
15678     00 13 62 F0 | 	shl	arg01, _var01
1567c     00 15 62 F0 | 	shl	arg02, _var01
15680     1C 00 90 AD |  if_e	jmp	#LR__1960
15684     09 F7 43 F5 | 	or	dirb, arg01
15688     FD 01 02 F6 | 	mov	_var01, outb
1568c     09 01 22 F5 | 	andn	_var01, arg01
15690     09 15 02 F5 | 	and	arg02, arg01
15694     0A 01 42 F5 | 	or	_var01, arg02
15698     00 FB 03 F6 | 	mov	outb, _var01
1569c     18 00 90 FD | 	jmp	#LR__1961
156a0                 | LR__1960
156a0     09 F5 43 F5 | 	or	dira, arg01
156a4     FC 01 02 F6 | 	mov	_var01, outa
156a8     09 01 22 F5 | 	andn	_var01, arg01
156ac     09 15 02 F5 | 	and	arg02, arg01
156b0     0A 01 42 F5 | 	or	_var01, arg02
156b4     00 F9 03 F6 | 	mov	outa, _var01
156b8                 | LR__1961
156b8                 | __system___pinwrite_ret
156b8     2D 00 64 FD | 	ret
156bc                 | 
156bc                 | __system___basic_read_line
156bc     06 4A 05 F6 | 	mov	COUNT_, #6
156c0     A8 00 A0 FD | 	call	#pushregs_
156c4     09 1F 02 F6 | 	mov	local01, arg01
156c8     00 20 06 F6 | 	mov	local02, #0
156cc     18 22 06 F6 | 	mov	local03, #24
156d0     00 24 06 F6 | 	mov	local04, #0
156d4     18 12 06 F6 | 	mov	arg01, #24
156d8     3C 38 B0 FD | 	call	#__system___gc_alloc_managed
156dc     FD 26 0A F6 | 	mov	local05, result1 wz
156e0     13 FB 01 A6 |  if_e	mov	result1, local05
156e4     B0 00 90 AD |  if_e	jmp	#LR__1973
156e8                 | LR__1970
156e8     0F 13 02 F6 | 	mov	arg01, local01
156ec     78 0B B0 FD | 	call	#__system___basic_get_char
156f0     FD 28 02 F6 | 	mov	local06, result1
156f4     01 28 56 F2 | 	cmps	local06, #1 wc
156f8     8C 00 90 CD |  if_b	jmp	#LR__1972
156fc     0A 28 0E F2 | 	cmp	local06, #10 wz
15700     10 00 90 5D |  if_ne	jmp	#LR__1971
15704     00 24 0E F2 | 	cmp	local04, #0 wz
15708     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1570c     01 20 86 11 |  if_a	sub	local02, #1
15710     74 00 90 FD | 	jmp	#LR__1972
15714                 | LR__1971
15714     0D 28 0E F2 | 	cmp	local06, #13 wz
15718     01 24 06 A6 |  if_e	mov	local04, #1
1571c     00 24 06 56 |  if_ne	mov	local04, #0
15720     08 28 0E F2 | 	cmp	local06, #8 wz
15724     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
15728     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1572c     01 20 86 21 |  if_nc_and_z	sub	local02, #1
15730     B4 FF 9F AD |  if_e	jmp	#LR__1970
15734     13 17 02 F6 | 	mov	arg03, local05
15738     10 17 02 F1 | 	add	arg03, local02
1573c     0B 29 42 FC | 	wrbyte	local06, arg03
15740     01 20 06 F1 | 	add	local02, #1
15744     11 21 0A F2 | 	cmp	local02, local03 wz
15748     9C FF 9F 5D |  if_ne	jmp	#LR__1970
1574c     11 13 02 F6 | 	mov	arg01, local03
15750     20 12 06 F1 | 	add	arg01, #32
15754     C0 37 B0 FD | 	call	#__system___gc_alloc_managed
15758     FD 28 0A F6 | 	mov	local06, result1 wz
1575c     14 FB 01 A6 |  if_e	mov	result1, local06
15760     34 00 90 AD |  if_e	jmp	#LR__1973
15764     14 13 02 F6 | 	mov	arg01, local06
15768     13 15 02 F6 | 	mov	arg02, local05
1576c     11 17 02 F6 | 	mov	arg03, local03
15770     5C FC BF FD | 	call	#__system____builtin_memmove
15774     20 22 06 F1 | 	add	local03, #32
15778     13 13 02 F6 | 	mov	arg01, local05
1577c     D4 38 B0 FD | 	call	#__system___gc_free
15780     14 27 02 F6 | 	mov	local05, local06
15784     60 FF 9F FD | 	jmp	#LR__1970
15788                 | LR__1972
15788     13 29 02 F6 | 	mov	local06, local05
1578c     10 29 02 F1 | 	add	local06, local02
15790     14 01 48 FC | 	wrbyte	#0, local06
15794     13 FB 01 F6 | 	mov	result1, local05
15798                 | LR__1973
15798     A7 F0 03 F6 | 	mov	ptra, fp
1579c     B2 00 A0 FD | 	call	#popregs_
157a0                 | __system___basic_read_line_ret
157a0     2D 00 64 FD | 	ret
157a4                 | 
157a4                 | __system___waitms
157a4     09 01 02 F6 | 	mov	_var01, arg01
157a8     1A 02 62 FD | 	getct	_var02
157ac     14 04 06 FB | 	rdlong	_var03, #20
157b0     97 14 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
157b4                 | LR__1980
157b4     01 00 00 FF 
157b8     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
157bc     1C 00 90 CD |  if_b	jmp	#LR__1982
157c0     02 03 02 F1 | 	add	_var02, _var03
157c4     01 13 02 F6 | 	mov	arg01, _var02
157c8     00 12 66 FA | 	addct1	arg01, #0
157cc     24 22 60 FD | 	waitct1
157d0     01 00 00 FF 
157d4     E8 01 86 F1 | 	sub	_var01, ##1000
157d8     D8 FF 9F FD | 	jmp	#LR__1980
157dc                 | LR__1981
157dc                 | LR__1982
157dc     01 00 56 F2 | 	cmps	_var01, #1 wc
157e0     28 00 90 CD |  if_b	jmp	#LR__1983
157e4     02 01 02 FD | 	qmul	_var01, _var03
157e8     01 00 00 FF 
157ec     E8 17 06 F6 | 	mov	arg03, ##1000
157f0     19 FA 61 FD | 	getqy	result1
157f4     18 12 62 FD | 	getqx	arg01
157f8     28 FA 61 FD | 	setq	result1
157fc     0B 13 12 FD | 	qdiv	arg01, arg03
15800     18 12 62 FD | 	getqx	arg01
15804     01 13 62 FA | 	addct1	arg01, _var02
15808     24 22 60 FD | 	waitct1
1580c                 | LR__1983
1580c                 | __system___waitms_ret
1580c     2D 00 64 FD | 	ret
15810                 | 
15810                 | __system___waitus
15810     09 01 02 F6 | 	mov	_var01, arg01
15814     1A 02 62 FD | 	getct	_var02
15818     14 04 06 FB | 	rdlong	_var03, #20
1581c     97 14 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
15820                 | LR__1990
15820     A1 07 00 FF 
15824     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
15828     1C 00 90 CD |  if_b	jmp	#LR__1992
1582c     02 03 02 F1 | 	add	_var02, _var03
15830     01 13 02 F6 | 	mov	arg01, _var02
15834     00 12 66 FA | 	addct1	arg01, #0
15838     24 22 60 FD | 	waitct1
1583c     A1 07 00 FF 
15840     40 00 86 F1 | 	sub	_var01, ##1000000
15844     D8 FF 9F FD | 	jmp	#LR__1990
15848                 | LR__1991
15848                 | LR__1992
15848     01 00 56 F2 | 	cmps	_var01, #1 wc
1584c     28 00 90 CD |  if_b	jmp	#LR__1993
15850     02 01 02 FD | 	qmul	_var01, _var03
15854     A1 07 00 FF 
15858     40 16 06 F6 | 	mov	arg03, ##1000000
1585c     19 FA 61 FD | 	getqy	result1
15860     18 12 62 FD | 	getqx	arg01
15864     28 FA 61 FD | 	setq	result1
15868     0B 13 12 FD | 	qdiv	arg01, arg03
1586c     18 FA 61 FD | 	getqx	result1
15870     FD 02 62 FA | 	addct1	_var02, result1
15874     24 22 60 FD | 	waitct1
15878                 | LR__1993
15878                 | __system___waitus_ret
15878     2D 00 64 FD | 	ret
1587c                 | 
1587c                 | __system___mount
1587c     0B 4A 05 F6 | 	mov	COUNT_, #11
15880     A8 00 A0 FD | 	call	#pushregs_
15884     09 1F 02 F6 | 	mov	local01, arg01
15888     0A 21 0A F6 | 	mov	local02, arg02 wz
1588c     01 22 66 F6 | 	neg	local03, #1
15890     01 FA 65 A6 |  if_e	neg	result1, #1
15894     98 02 90 AD |  if_e	jmp	#LR__2015
15898     0F FB C1 FA | 	rdbyte	result1, local01
1589c     2F FA 0D F2 | 	cmp	result1, #47 wz
158a0     28 00 90 5D |  if_ne	jmp	#LR__2002
158a4     0F 13 02 F6 | 	mov	arg01, local01
158a8     09 25 02 F6 | 	mov	local04, arg01
158ac     97 06 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
158b0                 | LR__2000
158b0     12 FB C9 FA | 	rdbyte	result1, local04 wz
158b4     01 24 06 51 |  if_ne	add	local04, #1
158b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2000
158bc                 | LR__2001
158bc     09 25 82 F1 | 	sub	local04, arg01
158c0     12 FB 01 F6 | 	mov	result1, local04
158c4     10 FA 55 F2 | 	cmps	result1, #16 wc
158c8     14 00 90 CD |  if_b	jmp	#LR__2003
158cc                 | LR__2002
158cc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
158d0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
158d4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
158d8     01 FA 65 F6 | 	neg	result1, #1
158dc     50 02 90 FD | 	jmp	#LR__2015
158e0                 | LR__2003
158e0     00 26 06 F6 | 	mov	local05, #0
158e4                 | LR__2004
158e4     04 26 56 F2 | 	cmps	local05, #4 wc
158e8     B0 00 90 3D |  if_ae	jmp	#LR__2009
158ec     13 13 02 F6 | 	mov	arg01, local05
158f0     02 12 66 F0 | 	shl	arg01, #2
158f4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
158f8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
158fc     09 FB 09 FB | 	rdlong	result1, arg01 wz
15900     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15904     00 22 56 A2 |  if_e	cmps	local03, #0 wc
15908     13 23 02 86 |  if_c_and_z	mov	local03, local05
1590c     84 00 90 8D |  if_c_and_z	jmp	#LR__2008
15910     13 13 02 F6 | 	mov	arg01, local05
15914     02 12 66 F0 | 	shl	arg01, #2
15918     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1591c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15920     09 13 02 FB | 	rdlong	arg01, arg01
15924     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15928     09 25 02 F6 | 	mov	local04, arg01
1592c     97 06 48 FB | 	callpa	#(@LR__2006-@LR__2005)>>2,fcache_load_ptr_
15930                 | LR__2005
15930     12 FB C9 FA | 	rdbyte	result1, local04 wz
15934     01 24 06 51 |  if_ne	add	local04, #1
15938     F4 FF 9F 5D |  if_ne	jmp	#LR__2005
1593c                 | LR__2006
1593c     09 25 82 F1 | 	sub	local04, arg01
15940     12 29 02 F6 | 	mov	local06, local04
15944     14 13 02 F6 | 	mov	arg01, local06
15948     0F 13 02 F1 | 	add	arg01, local01
1594c     09 FB C1 FA | 	rdbyte	result1, arg01
15950     2F FA 0D F2 | 	cmp	result1, #47 wz
15954     14 2B 02 56 |  if_ne	mov	local07, local06
15958     0F 2B 02 51 |  if_ne	add	local07, local01
1595c     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
15960     30 00 90 5D |  if_ne	jmp	#LR__2007
15964     13 17 02 F6 | 	mov	arg03, local05
15968     02 16 66 F0 | 	shl	arg03, #2
1596c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15970     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15974     0B 15 02 FB | 	rdlong	arg02, arg03
15978     0F 13 02 F6 | 	mov	arg01, local01
1597c     14 17 02 F6 | 	mov	arg03, local06
15980     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15984     D4 49 B0 FD | 	call	#__system__strncmp
15988     00 FA 0D F2 | 	cmp	result1, #0 wz
1598c     13 23 02 A6 |  if_e	mov	local03, local05
15990     08 00 90 AD |  if_e	jmp	#LR__2009
15994                 | LR__2007
15994                 | LR__2008
15994     01 26 06 F1 | 	add	local05, #1
15998     48 FF 9F FD | 	jmp	#LR__2004
1599c                 | LR__2009
1599c     FF FF 7F FF 
159a0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
159a4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
159a8     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
159ac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
159b0     01 FA 65 A6 |  if_e	neg	result1, #1
159b4     78 01 90 AD |  if_e	jmp	#LR__2015
159b8     11 27 02 F6 | 	mov	local05, local03
159bc     13 2B 02 F6 | 	mov	local07, local05
159c0     02 2A 66 F0 | 	shl	local07, #2
159c4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
159c8     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
159cc     15 29 0A FB | 	rdlong	local06, local07 wz
159d0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
159d4     58 00 90 AD |  if_e	jmp	#LR__2010
159d8     4C 28 06 F1 | 	add	local06, #76
159dc     14 2B 0A FB | 	rdlong	local07, local06 wz
159e0     4C 28 86 F1 | 	sub	local06, #76
159e4     48 00 90 AD |  if_e	jmp	#LR__2010
159e8     4C 28 06 F1 | 	add	local06, #76
159ec     14 2B 02 FB | 	rdlong	local07, local06
159f0     15 23 02 F6 | 	mov	local03, local07
159f4     13 2A 46 F7 | 	zerox	local07, #19
159f8     14 22 46 F0 | 	shr	local03, #20
159fc     02 22 66 F0 | 	shl	local03, #2
15a00     ED 22 02 F1 | 	add	local03, __methods__
15a04     11 23 02 FB | 	rdlong	local03, local03
15a08     13 29 02 F6 | 	mov	local06, local05
15a0c     02 28 66 F0 | 	shl	local06, #2
15a10     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15a14     F4 28 02 F1 | 	add	local06, ptr___system__dat__
15a18     14 13 02 FB | 	rdlong	arg01, local06
15a1c     F2 28 02 F6 | 	mov	local06, objptr
15a20     15 E5 01 F6 | 	mov	objptr, local07
15a24     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15a28     2D 22 62 FD | 	call	local03
15a2c     14 E5 01 F6 | 	mov	objptr, local06
15a30                 | LR__2010
15a30     13 2D 02 F6 | 	mov	local08, local05
15a34     02 2C 66 F0 | 	shl	local08, #2
15a38     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15a3c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
15a40     16 21 62 FC | 	wrlong	local02, local08
15a44     00 20 0E F2 | 	cmp	local02, #0 wz
15a48     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15a4c     18 00 90 5D |  if_ne	jmp	#LR__2011
15a50     02 26 66 F0 | 	shl	local05, #2
15a54     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15a58     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15a5c     13 01 68 FC | 	wrlong	#0, local05
15a60     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15a64     C4 00 90 FD | 	jmp	#LR__2014
15a68                 | LR__2011
15a68     13 2F 02 F6 | 	mov	local09, local05
15a6c     04 2E 66 F0 | 	shl	local09, #4
15a70     24 E8 05 F1 | 	add	ptr___system__dat__, #36
15a74     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
15a78     17 13 02 F6 | 	mov	arg01, local09
15a7c     0F 15 02 F6 | 	mov	arg02, local01
15a80     10 16 06 F6 | 	mov	arg03, #16
15a84     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
15a88     24 48 B0 FD | 	call	#__system__strncpy
15a8c     48 20 06 F1 | 	add	local02, #72
15a90     10 2D 0A FB | 	rdlong	local08, local02 wz
15a94     48 20 86 F1 | 	sub	local02, #72
15a98     7C 00 90 AD |  if_e	jmp	#LR__2013
15a9c     48 20 06 F1 | 	add	local02, #72
15aa0     10 2D 02 FB | 	rdlong	local08, local02
15aa4     16 31 02 F6 | 	mov	local10, local08
15aa8     13 2C 46 F7 | 	zerox	local08, #19
15aac     14 30 46 F0 | 	shr	local10, #20
15ab0     02 30 66 F0 | 	shl	local10, #2
15ab4     ED 30 02 F1 | 	add	local10, __methods__
15ab8     18 31 02 FB | 	rdlong	local10, local10
15abc     17 13 02 F6 | 	mov	arg01, local09
15ac0     F2 32 02 F6 | 	mov	local11, objptr
15ac4     16 E5 01 F6 | 	mov	objptr, local08
15ac8     2D 30 62 FD | 	call	local10
15acc     19 E5 01 F6 | 	mov	objptr, local11
15ad0     FD 12 0A F6 | 	mov	arg01, result1 wz
15ad4     40 00 90 AD |  if_e	jmp	#LR__2012
15ad8     13 2D 02 F6 | 	mov	local08, local05
15adc     02 2C 66 F0 | 	shl	local08, #2
15ae0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15ae4     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
15ae8     16 01 68 FC | 	wrlong	#0, local08
15aec     02 26 66 F0 | 	shl	local05, #2
15af0     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15af4     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15af8     13 01 68 FC | 	wrlong	#0, local05
15afc     09 13 6A F6 | 	neg	arg01, arg01 wz
15b00     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
15b04     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
15b08     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15b0c     01 FA 65 56 |  if_ne	neg	result1, #1
15b10     00 FA 05 A6 |  if_e	mov	result1, #0
15b14     18 00 90 FD | 	jmp	#LR__2015
15b18                 | LR__2012
15b18                 | LR__2013
15b18     02 26 66 F0 | 	shl	local05, #2
15b1c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15b20     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15b24     13 2F 62 FC | 	wrlong	local09, local05
15b28     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15b2c                 | LR__2014
15b2c     00 FA 05 F6 | 	mov	result1, #0
15b30                 | LR__2015
15b30     A7 F0 03 F6 | 	mov	ptra, fp
15b34     B2 00 A0 FD | 	call	#popregs_
15b38                 | __system___mount_ret
15b38     2D 00 64 FD | 	ret
15b3c                 | 
15b3c                 | __system___chdir
15b3c     00 4A 05 F6 | 	mov	COUNT_, #0
15b40     A8 00 A0 FD | 	call	#pushregs_
15b44     40 F0 07 F1 | 	add	ptra, #64
15b48     04 4E 05 F1 | 	add	fp, #4
15b4c     A7 12 62 FC | 	wrlong	arg01, fp
15b50     04 4E 05 F1 | 	add	fp, #4
15b54     A7 14 02 F6 | 	mov	arg02, fp
15b58     08 4E 85 F1 | 	sub	fp, #8
15b5c     30 44 B0 FD | 	call	#__system__stat
15b60     3C 4E 05 F1 | 	add	fp, #60
15b64     A7 FA 61 FC | 	wrlong	result1, fp
15b68     3C 4E 85 F1 | 	sub	fp, #60
15b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
15b70     3C 4E 05 51 |  if_ne	add	fp, #60
15b74     A7 FA 01 5B |  if_ne	rdlong	result1, fp
15b78     3C 4E 85 51 |  if_ne	sub	fp, #60
15b7c     BC 00 90 5D |  if_ne	jmp	#LR__2022
15b80     10 4E 05 F1 | 	add	fp, #16
15b84     A7 12 02 FB | 	rdlong	arg01, fp
15b88     10 4E 85 F1 | 	sub	fp, #16
15b8c     78 00 00 FF 
15b90     00 12 06 F5 | 	and	arg01, ##61440
15b94     08 00 00 FF 
15b98     00 12 0E F2 | 	cmp	arg01, ##4096 wz
15b9c     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
15ba0     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
15ba4     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
15ba8     01 FA 65 56 |  if_ne	neg	result1, #1
15bac     8C 00 90 5D |  if_ne	jmp	#LR__2022
15bb0     04 4E 05 F1 | 	add	fp, #4
15bb4     A7 16 02 FB | 	rdlong	arg03, fp
15bb8     04 4E 85 F1 | 	sub	fp, #4
15bbc     0B 17 C2 FA | 	rdbyte	arg03, arg03
15bc0     2F 16 0E F2 | 	cmp	arg03, #47 wz
15bc4     24 00 90 5D |  if_ne	jmp	#LR__2020
15bc8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15bcc     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15bd0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15bd4     04 4E 05 F1 | 	add	fp, #4
15bd8     A7 14 02 FB | 	rdlong	arg02, fp
15bdc     04 4E 85 F1 | 	sub	fp, #4
15be0     00 17 06 F6 | 	mov	arg03, #256
15be4     C8 46 B0 FD | 	call	#__system__strncpy
15be8     4C 00 90 FD | 	jmp	#LR__2021
15bec                 | LR__2020
15bec     84 E9 05 F1 | 	add	ptr___system__dat__, #388
15bf0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15bf4     38 4E 05 F1 | 	add	fp, #56
15bf8     A7 12 62 FC | 	wrlong	arg01, fp
15bfc     38 4E 85 F1 | 	sub	fp, #56
15c00     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
15c04     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15c08     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15c0c     00 17 06 F6 | 	mov	arg03, #256
15c10     9C 46 B0 FD | 	call	#__system__strncpy
15c14     38 4E 05 F1 | 	add	fp, #56
15c18     A7 12 02 FB | 	rdlong	arg01, fp
15c1c     34 4E 85 F1 | 	sub	fp, #52
15c20     A7 14 02 FB | 	rdlong	arg02, fp
15c24     04 4E 85 F1 | 	sub	fp, #4
15c28     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15c2c     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
15c30     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15c34     10 00 B0 FD | 	call	#__system____getvfsforfile
15c38                 | LR__2021
15c38     00 FA 05 F6 | 	mov	result1, #0
15c3c                 | LR__2022
15c3c     A7 F0 03 F6 | 	mov	ptra, fp
15c40     B2 00 A0 FD | 	call	#popregs_
15c44                 | __system___chdir_ret
15c44     2D 00 64 FD | 	ret
15c48                 | 
15c48                 | __system____getvfsforfile
15c48     0E 4A 05 F6 | 	mov	COUNT_, #14
15c4c     A8 00 A0 FD | 	call	#pushregs_
15c50     09 1F 02 F6 | 	mov	local01, arg01
15c54     0A 21 02 F6 | 	mov	local02, arg02
15c58     0B 23 02 F6 | 	mov	local03, arg03
15c5c     97 10 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
15c60                 | LR__2030
15c60     10 FB C1 FA | 	rdbyte	result1, local02
15c64     2F FA 0D F2 | 	cmp	result1, #47 wz
15c68     01 20 06 A1 |  if_e	add	local02, #1
15c6c     10 25 C2 AA |  if_e	rdbyte	local04, local02
15c70     01 20 86 A1 |  if_e	sub	local02, #1
15c74     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
15c78     01 20 06 A1 |  if_e	add	local02, #1
15c7c     E0 FF 9F AD |  if_e	jmp	#LR__2030
15c80                 | LR__2031
15c80     10 25 C2 FA | 	rdbyte	local04, local02
15c84     2F 24 0E F2 | 	cmp	local04, #47 wz
15c88     14 00 90 5D |  if_ne	jmp	#LR__2032
15c8c     0F 13 02 F6 | 	mov	arg01, local01
15c90     10 15 02 F6 | 	mov	arg02, local02
15c94     00 17 06 F6 | 	mov	arg03, #256
15c98     14 46 B0 FD | 	call	#__system__strncpy
15c9c     7C 00 90 FD | 	jmp	#LR__2034
15ca0                 | LR__2032
15ca0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15ca4     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15ca8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15cac     0F 13 02 F6 | 	mov	arg01, local01
15cb0     00 17 06 F6 | 	mov	arg03, #256
15cb4     F8 45 B0 FD | 	call	#__system__strncpy
15cb8     10 25 CA FA | 	rdbyte	local04, local02 wz
15cbc     5C 00 90 AD |  if_e	jmp	#LR__2033
15cc0     10 25 C2 FA | 	rdbyte	local04, local02
15cc4     2E 24 0E F2 | 	cmp	local04, #46 wz
15cc8     01 20 06 A1 |  if_e	add	local02, #1
15ccc     10 27 C2 AA |  if_e	rdbyte	local05, local02
15cd0     01 20 86 A1 |  if_e	sub	local02, #1
15cd4     13 29 02 A6 |  if_e	mov	local06, local05
15cd8     07 28 4E A7 |  if_e	zerox	local06, #7 wz
15cdc     3C 00 90 AD |  if_e	jmp	#LR__2033
15ce0     0F 27 C2 FA | 	rdbyte	local05, local01
15ce4     2F 26 0E F2 | 	cmp	local05, #47 wz
15ce8     01 1E 06 A1 |  if_e	add	local01, #1
15cec     0F 25 C2 AA |  if_e	rdbyte	local04, local01
15cf0     01 1E 86 A1 |  if_e	sub	local01, #1
15cf4     00 24 4E A2 |  if_e	cmps	local04, #0 wz
15cf8     23 01 00 5F 
15cfc     7C 14 06 56 |  if_ne	mov	arg02, ##@LR__4060
15d00     0F 13 02 56 |  if_ne	mov	arg01, local01
15d04     00 17 06 56 |  if_ne	mov	arg03, #256
15d08     F0 45 B0 5D |  if_ne	call	#__system__strncat
15d0c     0F 13 02 F6 | 	mov	arg01, local01
15d10     10 15 02 F6 | 	mov	arg02, local02
15d14     00 17 06 F6 | 	mov	arg03, #256
15d18     E0 45 B0 FD | 	call	#__system__strncat
15d1c                 | LR__2033
15d1c                 | LR__2034
15d1c     0F 13 02 F6 | 	mov	arg01, local01
15d20     98 47 B0 FD | 	call	#__system___normalizeName
15d24     0F 25 CA FA | 	rdbyte	local04, local01 wz
15d28     1C 00 90 AD |  if_e	jmp	#LR__2035
15d2c     0F 25 C2 FA | 	rdbyte	local04, local01
15d30     2F 24 0E F2 | 	cmp	local04, #47 wz
15d34     01 1E 06 A1 |  if_e	add	local01, #1
15d38     0F 29 C2 AA |  if_e	rdbyte	local06, local01
15d3c     01 1E 86 A1 |  if_e	sub	local01, #1
15d40     00 28 4E A2 |  if_e	cmps	local06, #0 wz
15d44     18 00 90 5D |  if_ne	jmp	#LR__2036
15d48                 | LR__2035
15d48     01 00 00 FF 
15d4c     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
15d50     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
15d54     01 00 00 FF 
15d58     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
15d5c     EC 01 90 FD | 	jmp	#LR__2050
15d60                 | LR__2036
15d60     00 2A 06 F6 | 	mov	local07, #0
15d64                 | LR__2037
15d64     04 2A 56 F2 | 	cmps	local07, #4 wc
15d68     CC 01 90 3D |  if_ae	jmp	#LR__2049
15d6c     15 29 02 F6 | 	mov	local06, local07
15d70     02 28 66 F0 | 	shl	local06, #2
15d74     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15d78     F4 28 02 F1 | 	add	local06, ptr___system__dat__
15d7c     14 29 0A FB | 	rdlong	local06, local06 wz
15d80     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15d84     A8 01 90 AD |  if_e	jmp	#LR__2048
15d88     15 25 02 F6 | 	mov	local04, local07
15d8c     02 24 66 F0 | 	shl	local04, #2
15d90     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15d94     F4 24 02 F1 | 	add	local04, ptr___system__dat__
15d98     12 13 02 FB | 	rdlong	arg01, local04
15d9c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15da0     09 2D 02 F6 | 	mov	local08, arg01
15da4     97 06 48 FB | 	callpa	#(@LR__2039-@LR__2038)>>2,fcache_load_ptr_
15da8                 | LR__2038
15da8     16 FB C9 FA | 	rdbyte	result1, local08 wz
15dac     01 2C 06 51 |  if_ne	add	local08, #1
15db0     F4 FF 9F 5D |  if_ne	jmp	#LR__2038
15db4                 | LR__2039
15db4     09 2D 82 F1 | 	sub	local08, arg01
15db8     16 2F 02 F6 | 	mov	local09, local08
15dbc     17 25 02 F6 | 	mov	local04, local09
15dc0     0F 25 02 F1 | 	add	local04, local01
15dc4     12 29 C2 FA | 	rdbyte	local06, local04
15dc8     2F 28 0E F2 | 	cmp	local06, #47 wz
15dcc     17 31 02 56 |  if_ne	mov	local10, local09
15dd0     0F 31 02 51 |  if_ne	add	local10, local01
15dd4     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
15dd8     54 01 90 5D |  if_ne	jmp	#LR__2047
15ddc     15 17 02 F6 | 	mov	arg03, local07
15de0     02 16 66 F0 | 	shl	arg03, #2
15de4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15de8     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15dec     0B 15 02 FB | 	rdlong	arg02, arg03
15df0     17 17 02 F6 | 	mov	arg03, local09
15df4     0F 13 02 F6 | 	mov	arg01, local01
15df8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15dfc     5C 45 B0 FD | 	call	#__system__strncmp
15e00     00 FA 4D F2 | 	cmps	result1, #0 wz
15e04     28 01 90 5D |  if_ne	jmp	#LR__2047
15e08     15 33 02 F6 | 	mov	local11, local07
15e0c     02 32 66 F0 | 	shl	local11, #2
15e10     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15e14     F4 32 02 F1 | 	add	local11, ptr___system__dat__
15e18     19 35 02 FB | 	rdlong	local12, local11
15e1c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15e20     97 22 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
15e24                 | LR__2040
15e24     17 29 02 F6 | 	mov	local06, local09
15e28     01 28 06 F1 | 	add	local06, #1
15e2c     0F 29 02 F1 | 	add	local06, local01
15e30     14 33 C2 FA | 	rdbyte	local11, local06
15e34     2E 32 0E F2 | 	cmp	local11, #46 wz
15e38     2C 00 90 5D |  if_ne	jmp	#LR__2042
15e3c     17 33 02 F6 | 	mov	local11, local09
15e40     02 32 06 F1 | 	add	local11, #2
15e44     0F 33 02 F1 | 	add	local11, local01
15e48     19 31 C2 FA | 	rdbyte	local10, local11
15e4c     2F 30 0E F2 | 	cmp	local10, #47 wz
15e50     17 37 02 56 |  if_ne	mov	local13, local09
15e54     02 36 06 51 |  if_ne	add	local13, #2
15e58     0F 37 02 51 |  if_ne	add	local13, local01
15e5c     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
15e60     01 2E 06 A1 |  if_e	add	local09, #1
15e64     BC FF 9F AD |  if_e	jmp	#LR__2040
15e68                 | LR__2041
15e68                 | LR__2042
15e68     00 22 0E F2 | 	cmp	local03, #0 wz
15e6c     11 13 02 56 |  if_ne	mov	arg01, local03
15e70     0F 15 02 56 |  if_ne	mov	arg02, local01
15e74     00 17 06 56 |  if_ne	mov	arg03, #256
15e78     34 44 B0 5D |  if_ne	call	#__system__strncpy
15e7c     0F 15 02 F6 | 	mov	arg02, local01
15e80     17 15 02 F1 | 	add	arg02, local09
15e84     01 14 06 F1 | 	add	arg02, #1
15e88     0F 13 02 F6 | 	mov	arg01, local01
15e8c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
15e90     0F 13 02 F6 | 	mov	arg01, local01
15e94     09 2D 02 F6 | 	mov	local08, arg01
15e98     97 06 48 FB | 	callpa	#(@LR__2044-@LR__2043)>>2,fcache_load_ptr_
15e9c                 | LR__2043
15e9c     16 FB C9 FA | 	rdbyte	result1, local08 wz
15ea0     01 2C 06 51 |  if_ne	add	local08, #1
15ea4     F4 FF 9F 5D |  if_ne	jmp	#LR__2043
15ea8                 | LR__2044
15ea8     09 2D 82 F1 | 	sub	local08, arg01
15eac     16 2F 02 F6 | 	mov	local09, local08
15eb0                 | LR__2045
15eb0     01 2E 56 F2 | 	cmps	local09, #1 wc
15eb4     70 00 90 CD |  if_b	jmp	#LR__2046
15eb8     17 25 02 F6 | 	mov	local04, local09
15ebc     0F 25 02 F1 | 	add	local04, local01
15ec0     12 33 C2 FA | 	rdbyte	local11, local04
15ec4     2F 32 0E F2 | 	cmp	local11, #47 wz
15ec8     17 33 02 A6 |  if_e	mov	local11, local09
15ecc     0F 33 02 A1 |  if_e	add	local11, local01
15ed0     19 01 48 AC |  if_e	wrbyte	#0, local11
15ed4     01 2E 86 A1 |  if_e	sub	local09, #1
15ed8     D4 FF 9F AD |  if_e	jmp	#LR__2045
15edc     17 25 02 F6 | 	mov	local04, local09
15ee0     0F 25 02 F1 | 	add	local04, local01
15ee4     12 33 C2 FA | 	rdbyte	local11, local04
15ee8     2E 32 0E F2 | 	cmp	local11, #46 wz
15eec     38 00 90 5D |  if_ne	jmp	#LR__2046
15ef0     02 2E 56 F2 | 	cmps	local09, #2 wc
15ef4     30 00 90 CD |  if_b	jmp	#LR__2046
15ef8     17 39 02 F6 | 	mov	local14, local09
15efc     01 38 86 F1 | 	sub	local14, #1
15f00     0F 39 02 F1 | 	add	local14, local01
15f04     1C 27 C2 FA | 	rdbyte	local05, local14
15f08     2F 26 0E F2 | 	cmp	local05, #47 wz
15f0c     18 00 90 5D |  if_ne	jmp	#LR__2046
15f10     17 25 02 F6 | 	mov	local04, local09
15f14     01 24 86 F1 | 	sub	local04, #1
15f18     0F 25 02 F1 | 	add	local04, local01
15f1c     12 01 48 FC | 	wrbyte	#0, local04
15f20     02 2E 86 F1 | 	sub	local09, #2
15f24     88 FF 9F FD | 	jmp	#LR__2045
15f28                 | LR__2046
15f28     1A FB 01 F6 | 	mov	result1, local12
15f2c     1C 00 90 FD | 	jmp	#LR__2050
15f30                 | LR__2047
15f30                 | LR__2048
15f30     01 2A 06 F1 | 	add	local07, #1
15f34     2C FE 9F FD | 	jmp	#LR__2037
15f38                 | LR__2049
15f38     03 00 00 FF 
15f3c     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
15f40     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
15f44     03 00 00 FF 
15f48     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
15f4c                 | LR__2050
15f4c     A7 F0 03 F6 | 	mov	ptra, fp
15f50     B2 00 A0 FD | 	call	#popregs_
15f54                 | __system____getvfsforfile_ret
15f54     2D 00 64 FD | 	ret
15f58                 | 
15f58                 | __system___basic_open
15f58     05 4A 05 F6 | 	mov	COUNT_, #5
15f5c     A8 00 A0 FD | 	call	#pushregs_
15f60     0A 1F 02 F6 | 	mov	local01, arg02
15f64     0B 21 02 F6 | 	mov	local02, arg03
15f68     0C 23 02 F6 | 	mov	local03, arg04
15f6c     00 24 06 F6 | 	mov	local04, #0
15f70     14 43 B0 FD | 	call	#__system____getftab
15f74     FD 26 0A F6 | 	mov	local05, result1 wz
15f78     18 00 90 5D |  if_ne	jmp	#LR__2060
15f7c     EE 12 02 F6 | 	mov	arg01, abortchain
15f80     0C 14 06 F6 | 	mov	arg02, #12
15f84     01 16 06 F6 | 	mov	arg03, #1
15f88     DA 00 A0 FD | 	call	#__longjmp
15f8c     01 FA 65 F6 | 	neg	result1, #1
15f90     14 01 90 FD | 	jmp	#LR__2069
15f94                 | LR__2060
15f94     08 26 06 F1 | 	add	local05, #8
15f98     13 FB 09 FB | 	rdlong	result1, local05 wz
15f9c     08 26 86 F1 | 	sub	local05, #8
15fa0     13 13 02 56 |  if_ne	mov	arg01, local05
15fa4     70 3A B0 5D |  if_ne	call	#__system___closeraw
15fa8     00 1E 0E F2 | 	cmp	local01, #0 wz
15fac     00 20 0E A2 |  if_e	cmp	local02, #0 wz
15fb0     00 22 0E A2 |  if_e	cmp	local03, #0 wz
15fb4     3C 00 90 AD |  if_e	jmp	#LR__2062
15fb8     0C 12 06 F6 | 	mov	arg01, #12
15fbc     58 2F B0 FD | 	call	#__system___gc_alloc_managed
15fc0     FD 24 0A F6 | 	mov	local04, result1 wz
15fc4     18 00 90 5D |  if_ne	jmp	#LR__2061
15fc8     EE 12 02 F6 | 	mov	arg01, abortchain
15fcc     07 14 06 F6 | 	mov	arg02, #7
15fd0     01 16 06 F6 | 	mov	arg03, #1
15fd4     DA 00 A0 FD | 	call	#__longjmp
15fd8     01 FA 65 F6 | 	neg	result1, #1
15fdc     C8 00 90 FD | 	jmp	#LR__2069
15fe0                 | LR__2061
15fe0     12 01 68 FC | 	wrlong	#0, local04
15fe4     04 24 06 F1 | 	add	local04, #4
15fe8     12 01 68 FC | 	wrlong	#0, local04
15fec     04 24 86 F1 | 	sub	local04, #4
15ff0     13 25 62 FC | 	wrlong	local04, local05
15ff4                 | LR__2062
15ff4     00 1E 0E F2 | 	cmp	local01, #0 wz
15ff8     20 00 90 AD |  if_e	jmp	#LR__2063
15ffc     12 1F 62 FC | 	wrlong	local01, local04
16000     12 FB 01 F6 | 	mov	result1, local04
16004     00 58 02 FF 
16008     00 FA 45 F5 | 	or	result1, ##78643200
1600c     1C 26 06 F1 | 	add	local05, #28
16010     13 FB 61 FC | 	wrlong	result1, local05
16014     1C 26 86 F1 | 	sub	local05, #28
16018     0C 00 90 FD | 	jmp	#LR__2064
1601c                 | LR__2063
1601c     1C 26 06 F1 | 	add	local05, #28
16020     13 01 68 FC | 	wrlong	#0, local05
16024     1C 26 86 F1 | 	sub	local05, #28
16028                 | LR__2064
16028     00 20 0E F2 | 	cmp	local02, #0 wz
1602c     28 00 90 AD |  if_e	jmp	#LR__2065
16030     04 24 06 F1 | 	add	local04, #4
16034     12 21 62 FC | 	wrlong	local02, local04
16038     04 24 86 F1 | 	sub	local04, #4
1603c     12 FB 01 F6 | 	mov	result1, local04
16040     00 60 02 FF 
16044     00 FA 45 F5 | 	or	result1, ##79691776
16048     20 26 06 F1 | 	add	local05, #32
1604c     13 FB 61 FC | 	wrlong	result1, local05
16050     20 26 86 F1 | 	sub	local05, #32
16054     0C 00 90 FD | 	jmp	#LR__2066
16058                 | LR__2065
16058     20 26 06 F1 | 	add	local05, #32
1605c     13 01 68 FC | 	wrlong	#0, local05
16060     20 26 86 F1 | 	sub	local05, #32
16064                 | LR__2066
16064     00 22 0E F2 | 	cmp	local03, #0 wz
16068     24 00 90 AD |  if_e	jmp	#LR__2067
1606c     08 24 06 F1 | 	add	local04, #8
16070     12 23 62 FC | 	wrlong	local03, local04
16074     08 24 86 F1 | 	sub	local04, #8
16078     00 68 02 FF 
1607c     00 24 46 F5 | 	or	local04, ##80740352
16080     24 26 06 F1 | 	add	local05, #36
16084     13 25 62 FC | 	wrlong	local04, local05
16088     24 26 86 F1 | 	sub	local05, #36
1608c     0C 00 90 FD | 	jmp	#LR__2068
16090                 | LR__2067
16090     24 26 06 F1 | 	add	local05, #36
16094     13 01 68 FC | 	wrlong	#0, local05
16098     24 26 86 F1 | 	sub	local05, #36
1609c                 | LR__2068
1609c     08 26 06 F1 | 	add	local05, #8
160a0     13 0F 68 FC | 	wrlong	#7, local05
160a4     00 FA 05 F6 | 	mov	result1, #0
160a8                 | LR__2069
160a8     A7 F0 03 F6 | 	mov	ptra, fp
160ac     B2 00 A0 FD | 	call	#popregs_
160b0                 | __system___basic_open_ret
160b0     2D 00 64 FD | 	ret
160b4                 | 
160b4                 | __system___basic_open_string
160b4     04 4A 05 F6 | 	mov	COUNT_, #4
160b8     A8 00 A0 FD | 	call	#pushregs_
160bc     0A 1F 02 F6 | 	mov	local01, arg02
160c0     0B 21 02 F6 | 	mov	local02, arg03
160c4     C0 41 B0 FD | 	call	#__system____getftab
160c8     FD 22 0A F6 | 	mov	local03, result1 wz
160cc     18 00 90 5D |  if_ne	jmp	#LR__2070
160d0     EE 12 02 F6 | 	mov	arg01, abortchain
160d4     0C 14 06 F6 | 	mov	arg02, #12
160d8     01 16 06 F6 | 	mov	arg03, #1
160dc     DA 00 A0 FD | 	call	#__longjmp
160e0     01 FA 65 F6 | 	neg	result1, #1
160e4     58 00 90 FD | 	jmp	#LR__2072
160e8                 | LR__2070
160e8     08 22 06 F1 | 	add	local03, #8
160ec     11 19 0A FB | 	rdlong	arg04, local03 wz
160f0     08 22 86 F1 | 	sub	local03, #8
160f4     11 13 02 56 |  if_ne	mov	arg01, local03
160f8     1C 39 B0 5D |  if_ne	call	#__system___closeraw
160fc     0F 15 02 F6 | 	mov	arg02, local01
16100     10 17 02 F6 | 	mov	arg03, local02
16104     11 13 02 F6 | 	mov	arg01, local03
16108     B6 19 06 F6 | 	mov	arg04, #438
1610c     04 36 B0 FD | 	call	#__system___openraw
16110     FD 24 02 F6 | 	mov	local04, result1
16114     00 24 56 F2 | 	cmps	local04, #0 wc
16118     20 00 90 3D |  if_ae	jmp	#LR__2071
1611c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
16120     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
16124     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
16128     EE 12 02 F6 | 	mov	arg01, abortchain
1612c     01 16 06 F6 | 	mov	arg03, #1
16130     DA 00 A0 FD | 	call	#__longjmp
16134     01 FA 65 F6 | 	neg	result1, #1
16138     04 00 90 FD | 	jmp	#LR__2072
1613c                 | LR__2071
1613c     12 FB 01 F6 | 	mov	result1, local04
16140                 | LR__2072
16140     A7 F0 03 F6 | 	mov	ptra, fp
16144     B2 00 A0 FD | 	call	#popregs_
16148                 | __system___basic_open_string_ret
16148     2D 00 64 FD | 	ret
1614c                 | 
1614c                 | __system___basic_print_char
1614c     03 4A 05 F6 | 	mov	COUNT_, #3
16150     A8 00 A0 FD | 	call	#pushregs_
16154     0A 1F 02 F6 | 	mov	local01, arg02
16158     80 48 B0 FD | 	call	#__system___gettxfunc
1615c     FD 20 0A F6 | 	mov	local02, result1 wz
16160     00 FA 05 A6 |  if_e	mov	result1, #0
16164     30 00 90 AD |  if_e	jmp	#LR__2080
16168     10 23 02 F6 | 	mov	local03, local02
1616c     13 20 46 F7 | 	zerox	local02, #19
16170     14 22 46 F0 | 	shr	local03, #20
16174     02 22 66 F0 | 	shl	local03, #2
16178     ED 22 02 F1 | 	add	local03, __methods__
1617c     11 23 02 FB | 	rdlong	local03, local03
16180     0F 13 02 F6 | 	mov	arg01, local01
16184     F2 1E 02 F6 | 	mov	local01, objptr
16188     10 E5 01 F6 | 	mov	objptr, local02
1618c     2D 22 62 FD | 	call	local03
16190     0F E5 01 F6 | 	mov	objptr, local01
16194     01 FA 05 F6 | 	mov	result1, #1
16198                 | LR__2080
16198     A7 F0 03 F6 | 	mov	ptra, fp
1619c     B2 00 A0 FD | 	call	#popregs_
161a0                 | __system___basic_print_char_ret
161a0     2D 00 64 FD | 	ret
161a4                 | 
161a4                 | __system___basic_print_string
161a4     03 4A 05 F6 | 	mov	COUNT_, #3
161a8     A8 00 A0 FD | 	call	#pushregs_
161ac     0A 1F 02 F6 | 	mov	local01, arg02
161b0     0B 21 02 F6 | 	mov	local02, arg03
161b4     24 48 B0 FD | 	call	#__system___gettxfunc
161b8     FD 22 0A F6 | 	mov	local03, result1 wz
161bc     00 FA 05 A6 |  if_e	mov	result1, #0
161c0     18 00 90 AD |  if_e	jmp	#LR__2090
161c4     00 1E 0E F2 | 	cmp	local01, #0 wz
161c8     00 FA 05 A6 |  if_e	mov	result1, #0
161cc     11 13 02 56 |  if_ne	mov	arg01, local03
161d0     10 15 02 56 |  if_ne	mov	arg02, local02
161d4     0F 17 02 56 |  if_ne	mov	arg03, local01
161d8     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
161dc                 | LR__2090
161dc     A7 F0 03 F6 | 	mov	ptra, fp
161e0     B2 00 A0 FD | 	call	#popregs_
161e4                 | __system___basic_print_string_ret
161e4     2D 00 64 FD | 	ret
161e8                 | 
161e8                 | __system___basic_print_integer
161e8     04 4A 05 F6 | 	mov	COUNT_, #4
161ec     A8 00 A0 FD | 	call	#pushregs_
161f0     0A 1F 02 F6 | 	mov	local01, arg02
161f4     0B 21 02 F6 | 	mov	local02, arg03
161f8     0C 23 02 F6 | 	mov	local03, arg04
161fc     DC 47 B0 FD | 	call	#__system___gettxfunc
16200     FD 24 0A F6 | 	mov	local04, result1 wz
16204     00 FA 05 A6 |  if_e	mov	result1, #0
16208     12 13 02 56 |  if_ne	mov	arg01, local04
1620c     10 15 02 56 |  if_ne	mov	arg02, local02
16210     0F 17 02 56 |  if_ne	mov	arg03, local01
16214     11 19 02 56 |  if_ne	mov	arg04, local03
16218     48 02 B0 5D |  if_ne	call	#__system___fmtnum
1621c     A7 F0 03 F6 | 	mov	ptra, fp
16220     B2 00 A0 FD | 	call	#popregs_
16224                 | __system___basic_print_integer_ret
16224     2D 00 64 FD | 	ret
16228                 | 
16228                 | __system___basic_print_unsigned
16228     03 4A 05 F6 | 	mov	COUNT_, #3
1622c     A8 00 A0 FD | 	call	#pushregs_
16230     0A 1F 02 F6 | 	mov	local01, arg02
16234     0B 21 02 F6 | 	mov	local02, arg03
16238     0C 23 02 F6 | 	mov	local03, arg04
1623c     9C 47 B0 FD | 	call	#__system___gettxfunc
16240     FD 12 0A F6 | 	mov	arg01, result1 wz
16244     00 FA 05 A6 |  if_e	mov	result1, #0
16248     3A 20 26 54 |  if_ne	bith	local02, #58
1624c     10 15 02 56 |  if_ne	mov	arg02, local02
16250     0F 17 02 56 |  if_ne	mov	arg03, local01
16254     11 19 02 56 |  if_ne	mov	arg04, local03
16258     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1625c     A7 F0 03 F6 | 	mov	ptra, fp
16260     B2 00 A0 FD | 	call	#popregs_
16264                 | __system___basic_print_unsigned_ret
16264     2D 00 64 FD | 	ret
16268                 | 
16268                 | __system___basic_get_char
16268     03 4A 05 F6 | 	mov	COUNT_, #3
1626c     A8 00 A0 FD | 	call	#pushregs_
16270     AC 47 B0 FD | 	call	#__system___getrxfunc
16274     FD 1E 0A F6 | 	mov	local01, result1 wz
16278     01 FA 65 A6 |  if_e	neg	result1, #1
1627c     28 00 90 AD |  if_e	jmp	#LR__2100
16280     0F 21 02 F6 | 	mov	local02, local01
16284     13 1E 46 F7 | 	zerox	local01, #19
16288     14 20 46 F0 | 	shr	local02, #20
1628c     02 20 66 F0 | 	shl	local02, #2
16290     ED 20 02 F1 | 	add	local02, __methods__
16294     10 21 02 FB | 	rdlong	local02, local02
16298     F2 22 02 F6 | 	mov	local03, objptr
1629c     0F E5 01 F6 | 	mov	objptr, local01
162a0     2D 20 62 FD | 	call	local02
162a4     11 E5 01 F6 | 	mov	objptr, local03
162a8                 | LR__2100
162a8     A7 F0 03 F6 | 	mov	ptra, fp
162ac     B2 00 A0 FD | 	call	#popregs_
162b0                 | __system___basic_get_char_ret
162b0     2D 00 64 FD | 	ret
162b4                 | 
162b4                 | __system___basic_get
162b4     04 4A 05 F6 | 	mov	COUNT_, #4
162b8     A8 00 A0 FD | 	call	#pushregs_
162bc     0D 1F 02 F6 | 	mov	local01, arg05
162c0     0F 19 02 FD | 	qmul	arg04, local01
162c4     09 21 02 F6 | 	mov	local02, arg01
162c8     0B 23 02 F6 | 	mov	local03, arg03
162cc     00 14 0E F2 | 	cmp	arg02, #0 wz
162d0     01 14 86 51 |  if_ne	sub	arg02, #1
162d4     10 13 02 56 |  if_ne	mov	arg01, local02
162d8     00 16 06 56 |  if_ne	mov	arg03, #0
162dc     18 24 62 FD | 	getqx	local04
162e0     EC 3D B0 5D |  if_ne	call	#__system__lseek
162e4     11 15 02 F6 | 	mov	arg02, local03
162e8     12 17 02 F6 | 	mov	arg03, local04
162ec     10 13 02 F6 | 	mov	arg01, local02
162f0     64 3D B0 FD | 	call	#__system__read
162f4     FD 24 02 F6 | 	mov	local04, result1
162f8     01 24 56 F2 | 	cmps	local04, #1 wc
162fc     10 00 90 CD |  if_b	jmp	#LR__2110
16300     12 5F 02 F6 | 	mov	muldiva_, local04
16304     0F 61 02 F6 | 	mov	muldivb_, local01
16308     BA 00 A0 FD | 	call	#divide_
1630c     30 25 02 F6 | 	mov	local04, muldivb_
16310                 | LR__2110
16310     12 FB 01 F6 | 	mov	result1, local04
16314     A7 F0 03 F6 | 	mov	ptra, fp
16318     B2 00 A0 FD | 	call	#popregs_
1631c                 | __system___basic_get_ret
1631c     2D 00 64 FD | 	ret
16320                 | 
16320                 | __system___fmtchar
16320     00 4A 05 F6 | 	mov	COUNT_, #0
16324     A8 00 A0 FD | 	call	#pushregs_
16328     10 F0 07 F1 | 	add	ptra, #16
1632c     04 4E 05 F1 | 	add	fp, #4
16330     A7 12 62 FC | 	wrlong	arg01, fp
16334     04 4E 05 F1 | 	add	fp, #4
16338     A7 14 62 FC | 	wrlong	arg02, fp
1633c     04 4E 05 F1 | 	add	fp, #4
16340     A7 16 62 FC | 	wrlong	arg03, fp
16344     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
16348     A7 16 62 FC | 	wrlong	arg03, fp
1634c     08 4E 85 F1 | 	sub	fp, #8
16350     A7 12 02 FB | 	rdlong	arg01, fp
16354     04 4E 05 F1 | 	add	fp, #4
16358     A7 14 02 FB | 	rdlong	arg02, fp
1635c     04 4E 05 F1 | 	add	fp, #4
16360     A7 16 02 F6 | 	mov	arg03, fp
16364     0C 4E 85 F1 | 	sub	fp, #12
16368     0C 00 B0 FD | 	call	#__system___fmtstr
1636c     A7 F0 03 F6 | 	mov	ptra, fp
16370     B2 00 A0 FD | 	call	#popregs_
16374                 | __system___fmtchar_ret
16374     2D 00 64 FD | 	ret
16378                 | 
16378                 | __system___fmtstr
16378     09 4A 05 F6 | 	mov	COUNT_, #9
1637c     A8 00 A0 FD | 	call	#pushregs_
16380     09 1F 02 F6 | 	mov	local01, arg01
16384     0A 21 02 F6 | 	mov	local02, arg02
16388     0B 23 02 F6 | 	mov	local03, arg03
1638c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
16390     11 13 02 F6 | 	mov	arg01, local03
16394     09 25 02 F6 | 	mov	local04, arg01
16398     97 06 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
1639c                 | LR__2120
1639c     12 FB C9 FA | 	rdbyte	result1, local04 wz
163a0     01 24 06 51 |  if_ne	add	local04, #1
163a4     F4 FF 9F 5D |  if_ne	jmp	#LR__2120
163a8                 | LR__2121
163a8     09 25 82 F1 | 	sub	local04, arg01
163ac     00 18 0E F2 | 	cmp	arg04, #0 wz
163b0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
163b4     10 15 02 F6 | 	mov	arg02, local02
163b8     12 17 02 F6 | 	mov	arg03, local04
163bc     0F 13 02 F6 | 	mov	arg01, local01
163c0     02 18 06 F6 | 	mov	arg04, #2
163c4     B4 42 B0 FD | 	call	#__system___fmtpad
163c8     FD 26 02 F6 | 	mov	local05, result1
163cc     00 26 56 F2 | 	cmps	local05, #0 wc
163d0     13 FB 01 C6 |  if_b	mov	result1, local05
163d4     80 00 90 CD |  if_b	jmp	#LR__2124
163d8     01 24 56 F2 | 	cmps	local04, #1 wc
163dc     50 00 90 CD |  if_b	jmp	#LR__2123
163e0     12 29 02 F6 | 	mov	local06, local04
163e4                 | LR__2122
163e4     0F 2B 02 F6 | 	mov	local07, local01
163e8     0F 2D 02 F6 | 	mov	local08, local01
163ec     13 2A 46 F7 | 	zerox	local07, #19
163f0     14 2C 46 F0 | 	shr	local08, #20
163f4     02 2C 66 F0 | 	shl	local08, #2
163f8     ED 2C 02 F1 | 	add	local08, __methods__
163fc     16 2D 02 FB | 	rdlong	local08, local08
16400     11 13 C2 FA | 	rdbyte	arg01, local03
16404     F2 2E 02 F6 | 	mov	local09, objptr
16408     15 E5 01 F6 | 	mov	objptr, local07
1640c     01 22 06 F1 | 	add	local03, #1
16410     2D 2C 62 FD | 	call	local08
16414     17 E5 01 F6 | 	mov	objptr, local09
16418     FD 2E 02 F6 | 	mov	local09, result1
1641c     00 2E 56 F2 | 	cmps	local09, #0 wc
16420     17 FB 01 C6 |  if_b	mov	result1, local09
16424     30 00 90 CD |  if_b	jmp	#LR__2124
16428     17 27 02 F1 | 	add	local05, local09
1642c     ED 29 6E FB | 	djnz	local06, #LR__2122
16430                 | LR__2123
16430     10 15 02 F6 | 	mov	arg02, local02
16434     12 17 02 F6 | 	mov	arg03, local04
16438     0F 13 02 F6 | 	mov	arg01, local01
1643c     01 18 06 F6 | 	mov	arg04, #1
16440     38 42 B0 FD | 	call	#__system___fmtpad
16444     FD 2E 02 F6 | 	mov	local09, result1
16448     00 2E 56 F2 | 	cmps	local09, #0 wc
1644c     17 FB 01 C6 |  if_b	mov	result1, local09
16450     17 27 02 31 |  if_ae	add	local05, local09
16454     13 FB 01 36 |  if_ae	mov	result1, local05
16458                 | LR__2124
16458     A7 F0 03 F6 | 	mov	ptra, fp
1645c     B2 00 A0 FD | 	call	#popregs_
16460                 | __system___fmtstr_ret
16460     2D 00 64 FD | 	ret
16464                 | 
16464                 | __system___fmtnum
16464     0B 4A 05 F6 | 	mov	COUNT_, #11
16468     A8 00 A0 FD | 	call	#pushregs_
1646c     09 1F 02 F6 | 	mov	local01, arg01
16470     0A 21 02 F6 | 	mov	local02, arg02
16474     0B 23 02 F6 | 	mov	local03, arg03
16478     0C 25 02 F6 | 	mov	local04, arg04
1647c     F8 27 02 F6 | 	mov	local05, ptra
16480     13 29 02 F6 | 	mov	local06, local05
16484     00 2A 06 F6 | 	mov	local07, #0
16488     10 2D 02 F6 | 	mov	local08, local02
1648c     10 2C 46 F0 | 	shr	local08, #16
16490     3F 2C 06 F5 | 	and	local08, #63
16494     10 2F E2 F8 | 	getbyte	local09, local02, #0
16498     10 31 02 F6 | 	mov	local10, local02
1649c     1A 30 46 F0 | 	shr	local10, #26
164a0     03 30 06 F5 | 	and	local10, #3
164a4     18 33 02 F6 | 	mov	local11, local10
164a8     01 2C 56 F2 | 	cmps	local08, #1 wc
164ac     44 F0 07 F1 | 	add	ptra, #68
164b0     01 2C 86 31 |  if_ae	sub	local08, #1
164b4     41 2E 56 F2 | 	cmps	local09, #65 wc
164b8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
164bc     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
164c0     03 32 0E F2 | 	cmp	local11, #3 wz
164c4     00 32 06 A6 |  if_e	mov	local11, #0
164c8     00 22 56 52 |  if_ne	cmps	local03, #0 wc
164cc     04 32 06 46 |  if_c_and_nz	mov	local11, #4
164d0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
164d4     00 32 0E F2 | 	cmp	local11, #0 wz
164d8     4C 00 90 AD |  if_e	jmp	#LR__2133
164dc     01 2A 06 F6 | 	mov	local07, #1
164e0     17 2D 0A F2 | 	cmp	local08, local09 wz
164e4     18 00 90 5D |  if_ne	jmp	#LR__2131
164e8     05 2C 6E FB | 	djnz	local08, #LR__2130
164ec     0F 13 02 F6 | 	mov	arg01, local01
164f0     10 15 02 F6 | 	mov	arg02, local02
164f4     23 16 06 F6 | 	mov	arg03, #35
164f8     24 FE BF FD | 	call	#__system___fmtchar
164fc     88 00 90 FD | 	jmp	#LR__2137
16500                 | LR__2130
16500                 | LR__2131
16500     02 32 0E F2 | 	cmp	local11, #2 wz
16504     14 31 02 A6 |  if_e	mov	local10, local06
16508     01 28 06 A1 |  if_e	add	local06, #1
1650c     18 41 48 AC |  if_e	wrbyte	#32, local10
16510     14 00 90 AD |  if_e	jmp	#LR__2132
16514     04 32 0E F2 | 	cmp	local11, #4 wz
16518     14 5B 48 AC |  if_e	wrbyte	#45, local06
1651c     01 28 06 A1 |  if_e	add	local06, #1
16520     14 57 48 5C |  if_ne	wrbyte	#43, local06
16524     01 28 06 51 |  if_ne	add	local06, #1
16528                 | LR__2132
16528                 | LR__2133
16528     14 13 02 F6 | 	mov	arg01, local06
1652c     11 15 02 F6 | 	mov	arg02, local03
16530     12 17 02 F6 | 	mov	arg03, local04
16534     16 19 02 F6 | 	mov	arg04, local08
16538     00 1A 06 F6 | 	mov	arg05, #0
1653c     1D 20 2E F4 | 	testbn	local02, #29 wz
16540     01 1A 06 56 |  if_ne	mov	arg05, #1
16544     FC 41 B0 FD | 	call	#__system___uitoa
16548     FD 2A 02 F1 | 	add	local07, result1
1654c     17 2B 5A F2 | 	cmps	local07, local09 wcz
16550     24 00 90 ED |  if_be	jmp	#LR__2136
16554     97 0E 48 FB | 	callpa	#(@LR__2135-@LR__2134)>>2,fcache_load_ptr_
16558                 | LR__2134
16558     17 31 02 F6 | 	mov	local10, local09
1655c     01 30 56 F2 | 	cmps	local10, #1 wc
16560     01 2E 86 F1 | 	sub	local09, #1
16564     14 31 02 36 |  if_ae	mov	local10, local06
16568     01 28 06 31 |  if_ae	add	local06, #1
1656c     18 47 48 3C |  if_ae	wrbyte	#35, local10
16570     E4 FF 9F 3D |  if_ae	jmp	#LR__2134
16574                 | LR__2135
16574     14 01 48 FC | 	wrbyte	#0, local06
16578                 | LR__2136
16578     0F 13 02 F6 | 	mov	arg01, local01
1657c     10 15 02 F6 | 	mov	arg02, local02
16580     13 17 02 F6 | 	mov	arg03, local05
16584     F0 FD BF FD | 	call	#__system___fmtstr
16588                 | LR__2137
16588     A7 F0 03 F6 | 	mov	ptra, fp
1658c     B2 00 A0 FD | 	call	#popregs_
16590                 | __system___fmtnum_ret
16590     2D 00 64 FD | 	ret
16594                 | 
16594                 | __system___fmtfloat
16594     10 4A 05 F6 | 	mov	COUNT_, #16
16598     A8 00 A0 FD | 	call	#pushregs_
1659c     24 F1 07 F1 | 	add	ptra, #292
165a0     04 4E 05 F1 | 	add	fp, #4
165a4     A7 12 62 FC | 	wrlong	arg01, fp
165a8     04 4E 05 F1 | 	add	fp, #4
165ac     A7 14 62 FC | 	wrlong	arg02, fp
165b0     04 4E 05 F1 | 	add	fp, #4
165b4     A7 16 62 FC | 	wrlong	arg03, fp
165b8     04 4E 05 F1 | 	add	fp, #4
165bc     A7 18 62 FC | 	wrlong	arg04, fp
165c0     0C 4E 05 F1 | 	add	fp, #12
165c4     A7 14 68 FC | 	wrlong	#10, fp
165c8     08 4E 05 F1 | 	add	fp, #8
165cc     A7 00 68 FC | 	wrlong	#0, fp
165d0     08 4E 05 F1 | 	add	fp, #8
165d4     A7 00 68 FC | 	wrlong	#0, fp
165d8     08 4E 05 F1 | 	add	fp, #8
165dc     A7 00 68 FC | 	wrlong	#0, fp
165e0     04 4E 05 F1 | 	add	fp, #4
165e4     A7 04 68 FC | 	wrlong	#2, fp
165e8     04 4E 05 F1 | 	add	fp, #4
165ec     A7 00 68 FC | 	wrlong	#0, fp
165f0     04 4E 05 F1 | 	add	fp, #4
165f4     A7 00 68 FC | 	wrlong	#0, fp
165f8     04 4E 05 F1 | 	add	fp, #4
165fc     A7 00 68 FC | 	wrlong	#0, fp
16600     04 4E 05 F1 | 	add	fp, #4
16604     A7 00 68 FC | 	wrlong	#0, fp
16608     18 4E 05 F1 | 	add	fp, #24
1660c     A7 00 68 FC | 	wrlong	#0, fp
16610     68 4E 05 F1 | 	add	fp, #104
16614     A7 1E 02 F6 | 	mov	local01, fp
16618     08 4E 85 F1 | 	sub	fp, #8
1661c     A7 1E 62 FC | 	wrlong	local01, fp
16620     04 4E 05 F1 | 	add	fp, #4
16624     A7 1E 62 FC | 	wrlong	local01, fp
16628     BC 4E 85 F1 | 	sub	fp, #188
1662c     A7 1E 02 FB | 	rdlong	local01, fp
16630     10 1E 46 F0 | 	shr	local01, #16
16634     3F 1E 06 F5 | 	and	local01, #63
16638     B0 4E 05 F1 | 	add	fp, #176
1663c     A7 1E 62 FC | 	wrlong	local01, fp
16640     B0 4E 85 F1 | 	sub	fp, #176
16644     A7 1E 02 FB | 	rdlong	local01, fp
16648     1C 1E 46 F0 | 	shr	local01, #28
1664c     01 1E 06 F5 | 	and	local01, #1
16650     08 4F 05 F1 | 	add	fp, #264
16654     A7 1E 62 FC | 	wrlong	local01, fp
16658     58 4E 85 F1 | 	sub	fp, #88
1665c     A7 1E 0A FB | 	rdlong	local01, fp wz
16660     B8 4E 85 F1 | 	sub	fp, #184
16664     3C 00 90 5D |  if_ne	jmp	#LR__2141
16668     10 4E 05 F1 | 	add	fp, #16
1666c     A7 1E 02 FB | 	rdlong	local01, fp
16670     10 4E 85 F1 | 	sub	fp, #16
16674     61 1E 0E F2 | 	cmp	local01, #97 wz
16678     18 00 90 5D |  if_ne	jmp	#LR__2140
1667c     B8 4E 05 F1 | 	add	fp, #184
16680     A7 1A 68 FC | 	wrlong	#13, fp
16684     84 4E 85 F1 | 	sub	fp, #132
16688     A7 02 68 FC | 	wrlong	#1, fp
1668c     34 4E 85 F1 | 	sub	fp, #52
16690     24 00 90 FD | 	jmp	#LR__2142
16694                 | LR__2140
16694     B8 4E 05 F1 | 	add	fp, #184
16698     A7 0C 68 FC | 	wrlong	#6, fp
1669c     B8 4E 85 F1 | 	sub	fp, #184
166a0     14 00 90 FD | 	jmp	#LR__2142
166a4                 | LR__2141
166a4     B8 4E 05 F1 | 	add	fp, #184
166a8     A7 1E 02 FB | 	rdlong	local01, fp
166ac     01 1E 86 F1 | 	sub	local01, #1
166b0     A7 1E 62 FC | 	wrlong	local01, fp
166b4     B8 4E 85 F1 | 	sub	fp, #184
166b8                 | LR__2142
166b8     08 4E 05 F1 | 	add	fp, #8
166bc     A7 1E 02 FB | 	rdlong	local01, fp
166c0     16 1E 46 F0 | 	shr	local01, #22
166c4     03 1E 06 F5 | 	and	local01, #3
166c8     04 4F 05 F1 | 	add	fp, #260
166cc     A7 1E 62 FC | 	wrlong	local01, fp
166d0     04 4F 85 F1 | 	sub	fp, #260
166d4     A7 1E 02 FB | 	rdlong	local01, fp
166d8     1D 1E 46 F0 | 	shr	local01, #29
166dc     01 1E 06 F5 | 	and	local01, #1
166e0     B4 4E 05 F1 | 	add	fp, #180
166e4     A7 1E 62 FC | 	wrlong	local01, fp
166e8     B4 4E 85 F1 | 	sub	fp, #180
166ec     A7 1E 02 FB | 	rdlong	local01, fp
166f0     0F 1F EA F8 | 	getbyte	local01, local01, #1
166f4     60 4E 05 F1 | 	add	fp, #96
166f8     A7 1E 62 FC | 	wrlong	local01, fp
166fc     60 4E 85 F1 | 	sub	fp, #96
16700     A7 1E 02 FB | 	rdlong	local01, fp
16704     0F 1F E2 F8 | 	getbyte	local01, local01, #0
16708     64 4E 05 F1 | 	add	fp, #100
1670c     A7 1E 62 FC | 	wrlong	local01, fp
16710     00 1E 06 F6 | 	mov	local01, #0
16714     5C 4E 85 F1 | 	sub	fp, #92
16718     A7 1A 02 FB | 	rdlong	arg05, fp
1671c     65 1A 0E F2 | 	cmp	arg05, #101 wz
16720     01 1E 06 A6 |  if_e	mov	local01, #1
16724     14 4E 05 F1 | 	add	fp, #20
16728     A7 1E 62 FC | 	wrlong	local01, fp
1672c     98 4E 05 F1 | 	add	fp, #152
16730     A7 20 0A FB | 	rdlong	local02, fp wz
16734     45 1E 06 56 |  if_ne	mov	local01, #69
16738     65 1E 06 A6 |  if_e	mov	local01, #101
1673c     8C 4E 85 F1 | 	sub	fp, #140
16740     A7 1E 62 FC | 	wrlong	local01, fp
16744     20 4E 85 F1 | 	sub	fp, #32
16748     A7 1E 02 FB | 	rdlong	local01, fp
1674c     10 4E 85 F1 | 	sub	fp, #16
16750     61 1E 0E F2 | 	cmp	local01, #97 wz
16754     4C 00 90 5D |  if_ne	jmp	#LR__2143
16758     24 4E 05 F1 | 	add	fp, #36
1675c     A7 02 68 FC | 	wrlong	#1, fp
16760     98 4E 05 F1 | 	add	fp, #152
16764     A7 20 0A FB | 	rdlong	local02, fp wz
16768     50 1E 06 56 |  if_ne	mov	local01, #80
1676c     70 1E 06 A6 |  if_e	mov	local01, #112
16770     8C 4E 85 F1 | 	sub	fp, #140
16774     A7 1E 62 FC | 	wrlong	local01, fp
16778     14 4E 85 F1 | 	sub	fp, #20
1677c     A7 04 68 FC | 	wrlong	#2, fp
16780     1C 4E 05 F1 | 	add	fp, #28
16784     A7 02 68 FC | 	wrlong	#1, fp
16788     84 4E 05 F1 | 	add	fp, #132
1678c     A7 20 0A FB | 	rdlong	local02, fp wz
16790     58 1E 06 56 |  if_ne	mov	local01, #88
16794     78 1E 06 A6 |  if_e	mov	local01, #120
16798     7C 4E 85 F1 | 	sub	fp, #124
1679c     A7 1E 62 FC | 	wrlong	local01, fp
167a0     40 4E 85 F1 | 	sub	fp, #64
167a4                 | LR__2143
167a4     10 4E 05 F1 | 	add	fp, #16
167a8     A7 1E 02 FB | 	rdlong	local01, fp
167ac     10 4E 85 F1 | 	sub	fp, #16
167b0     23 1E 0E F2 | 	cmp	local01, #35 wz
167b4     3C 00 90 5D |  if_ne	jmp	#LR__2146
167b8     48 4E 05 F1 | 	add	fp, #72
167bc     A7 02 68 FC | 	wrlong	#1, fp
167c0     C8 4E 05 F1 | 	add	fp, #200
167c4     A7 1E 0A FB | 	rdlong	local01, fp wz
167c8     10 4F 85 F1 | 	sub	fp, #272
167cc     18 00 90 AD |  if_e	jmp	#LR__2144
167d0     10 4E 05 F1 | 	add	fp, #16
167d4     A7 CC 68 FC | 	wrlong	#102, fp
167d8     00 4F 05 F1 | 	add	fp, #256
167dc     A7 00 68 FC | 	wrlong	#0, fp
167e0     10 4F 85 F1 | 	sub	fp, #272
167e4     0C 00 90 FD | 	jmp	#LR__2145
167e8                 | LR__2144
167e8     10 4F 05 F1 | 	add	fp, #272
167ec     A7 02 68 FC | 	wrlong	#1, fp
167f0     10 4F 85 F1 | 	sub	fp, #272
167f4                 | LR__2145
167f4                 | LR__2146
167f4     08 4E 05 F1 | 	add	fp, #8
167f8     A7 1E 02 FB | 	rdlong	local01, fp
167fc     1A 1E 46 F0 | 	shr	local01, #26
16800     03 1E 06 F5 | 	and	local01, #3
16804     5C 4E 05 F1 | 	add	fp, #92
16808     A7 1E 62 FC | 	wrlong	local01, fp
1680c     58 4E 85 F1 | 	sub	fp, #88
16810     A7 FA 01 FB | 	rdlong	result1, fp
16814     0C 4E 85 F1 | 	sub	fp, #12
16818     1F FA 4D F0 | 	shr	result1, #31 wz
1681c     20 00 90 AD |  if_e	jmp	#LR__2147
16820     2C 4E 05 F1 | 	add	fp, #44
16824     A7 5A 68 FC | 	wrlong	#45, fp
16828     20 4E 85 F1 | 	sub	fp, #32
1682c     A7 FA 01 FB | 	rdlong	result1, fp
16830     1F FA E5 F4 | 	bitnot	result1, #31
16834     A7 FA 61 FC | 	wrlong	result1, fp
16838     0C 4E 85 F1 | 	sub	fp, #12
1683c     3C 00 90 FD | 	jmp	#LR__2149
16840                 | LR__2147
16840     64 4E 05 F1 | 	add	fp, #100
16844     A7 1E 02 FB | 	rdlong	local01, fp
16848     64 4E 85 F1 | 	sub	fp, #100
1684c     01 1E 0E F2 | 	cmp	local01, #1 wz
16850     2C 4E 05 A1 |  if_e	add	fp, #44
16854     A7 56 68 AC |  if_e	wrlong	#43, fp
16858     2C 4E 85 A1 |  if_e	sub	fp, #44
1685c     1C 00 90 AD |  if_e	jmp	#LR__2148
16860     64 4E 05 F1 | 	add	fp, #100
16864     A7 1E 02 FB | 	rdlong	local01, fp
16868     64 4E 85 F1 | 	sub	fp, #100
1686c     02 1E 0E F2 | 	cmp	local01, #2 wz
16870     2C 4E 05 A1 |  if_e	add	fp, #44
16874     A7 40 68 AC |  if_e	wrlong	#32, fp
16878     2C 4E 85 A1 |  if_e	sub	fp, #44
1687c                 | LR__2148
1687c                 | LR__2149
1687c     08 4E 05 F1 | 	add	fp, #8
16880     A7 1E 02 FB | 	rdlong	local01, fp
16884     18 1E 46 F0 | 	shr	local01, #24
16888     03 1E 06 F5 | 	and	local01, #3
1688c     3C 4E 05 F1 | 	add	fp, #60
16890     A7 1E 62 FC | 	wrlong	local01, fp
16894     00 1E 06 F6 | 	mov	local01, #0
16898     18 4E 85 F1 | 	sub	fp, #24
1689c     A7 22 0A FB | 	rdlong	local03, fp wz
168a0     2C 4E 85 F1 | 	sub	fp, #44
168a4     18 00 90 5D |  if_ne	jmp	#LR__2150
168a8     1C 4E 05 F1 | 	add	fp, #28
168ac     A7 24 02 FB | 	rdlong	local04, fp
168b0     1C 4E 85 F1 | 	sub	fp, #28
168b4     12 27 02 F6 | 	mov	local05, local04
168b8     0A 26 0E F2 | 	cmp	local05, #10 wz
168bc     04 00 90 AD |  if_e	jmp	#LR__2151
168c0                 | LR__2150
168c0     01 1E 66 F5 | 	xor	local01, #1
168c4                 | LR__2151
168c4     3C 4E 05 F1 | 	add	fp, #60
168c8     A7 1E 62 FC | 	wrlong	local01, fp
168cc     3C 4E 85 F1 | 	sub	fp, #60
168d0     00 1E 0E F2 | 	cmp	local01, #0 wz
168d4     0C 01 90 AD |  if_e	jmp	#LR__2153
168d8     44 4E 05 F1 | 	add	fp, #68
168dc     A7 26 02 FB | 	rdlong	local05, fp
168e0     44 4E 85 F1 | 	sub	fp, #68
168e4     13 23 02 F6 | 	mov	local03, local05
168e8     02 22 0E F2 | 	cmp	local03, #2 wz
168ec     F4 00 90 5D |  if_ne	jmp	#LR__2153
168f0     0C 4F 05 F1 | 	add	fp, #268
168f4     A7 28 02 FB | 	rdlong	local06, fp
168f8     0C 4F 85 F1 | 	sub	fp, #268
168fc     14 25 02 F6 | 	mov	local04, local06
16900     02 24 0E F2 | 	cmp	local04, #2 wz
16904     DC 00 90 AD |  if_e	jmp	#LR__2153
16908     C0 4E 05 F1 | 	add	fp, #192
1690c     A7 12 02 FB | 	rdlong	arg01, fp
16910     94 4E 85 F1 | 	sub	fp, #148
16914     A7 14 02 FB | 	rdlong	arg02, fp
16918     14 4E 05 F1 | 	add	fp, #20
1691c     A7 16 02 FB | 	rdlong	arg03, fp
16920     40 4E 85 F1 | 	sub	fp, #64
16924     84 40 B0 FD | 	call	#__system__emitsign_0308
16928     14 4F 05 F1 | 	add	fp, #276
1692c     A7 FA 61 FC | 	wrlong	result1, fp
16930     14 4F 85 F1 | 	sub	fp, #276
16934     00 FA 55 F2 | 	cmps	result1, #0 wc
16938     14 4F 05 C1 |  if_b	add	fp, #276
1693c     A7 FA 01 CB |  if_b	rdlong	result1, fp
16940     14 4F 85 C1 |  if_b	sub	fp, #276
16944     6C 0B 90 CD |  if_b	jmp	#LR__2203
16948     C0 4E 05 F1 | 	add	fp, #192
1694c     A7 1E 02 FB | 	rdlong	local01, fp
16950     54 4E 05 F1 | 	add	fp, #84
16954     A7 26 02 FB | 	rdlong	local05, fp
16958     13 23 02 F6 | 	mov	local03, local05
1695c     13 1F 02 F1 | 	add	local01, local05
16960     54 4E 85 F1 | 	sub	fp, #84
16964     A7 1E 62 FC | 	wrlong	local01, fp
16968     58 4E 85 F1 | 	sub	fp, #88
1696c     A7 1E 0A FB | 	rdlong	local01, fp wz
16970     68 4E 85 F1 | 	sub	fp, #104
16974     60 00 90 AD |  if_e	jmp	#LR__2152
16978     68 4E 05 F1 | 	add	fp, #104
1697c     A7 1E 02 FB | 	rdlong	local01, fp
16980     AC 4E 05 F1 | 	add	fp, #172
16984     A7 22 02 FB | 	rdlong	local03, fp
16988     11 1F 82 F1 | 	sub	local01, local03
1698c     AC 4E 85 F1 | 	sub	fp, #172
16990     A7 1E 62 FC | 	wrlong	local01, fp
16994     68 4E 85 F1 | 	sub	fp, #104
16998     00 1E 56 F2 | 	cmps	local01, #0 wc
1699c     68 4E 05 C1 |  if_b	add	fp, #104
169a0     A7 00 68 CC |  if_b	wrlong	#0, fp
169a4     68 4E 85 C1 |  if_b	sub	fp, #104
169a8     08 4E 05 F1 | 	add	fp, #8
169ac     A7 1E 02 FB | 	rdlong	local01, fp
169b0     E8 1E 06 F4 | 	bitl	local01, #232
169b4     A7 1E 62 FC | 	wrlong	local01, fp
169b8     60 4E 05 F1 | 	add	fp, #96
169bc     A7 26 02 FB | 	rdlong	local05, fp
169c0     13 23 02 F6 | 	mov	local03, local05
169c4     08 22 66 F0 | 	shl	local03, #8
169c8     11 1F 42 F5 | 	or	local01, local03
169cc     60 4E 85 F1 | 	sub	fp, #96
169d0     A7 1E 62 FC | 	wrlong	local01, fp
169d4     08 4E 85 F1 | 	sub	fp, #8
169d8                 | LR__2152
169d8     3C 4E 05 F1 | 	add	fp, #60
169dc     A7 00 68 FC | 	wrlong	#0, fp
169e0     3C 4E 85 F1 | 	sub	fp, #60
169e4                 | LR__2153
169e4     0C 4E 05 F1 | 	add	fp, #12
169e8     A7 12 02 FB | 	rdlong	arg01, fp
169ec     0C 4E 85 F1 | 	sub	fp, #12
169f0     D0 1D B0 FD | 	call	#__system____builtin_ilogb
169f4     FF FF 3F FF 
169f8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
169fc     50 00 90 5D |  if_ne	jmp	#LR__2155
16a00     2C 4E 05 F1 | 	add	fp, #44
16a04     A7 1E 0A FB | 	rdlong	local01, fp wz
16a08     2C 4E 85 F1 | 	sub	fp, #44
16a0c     24 00 90 AD |  if_e	jmp	#LR__2154
16a10     C0 4E 05 F1 | 	add	fp, #192
16a14     A7 20 02 FB | 	rdlong	local02, fp
16a18     10 23 02 F6 | 	mov	local03, local02
16a1c     01 22 06 F1 | 	add	local03, #1
16a20     A7 22 62 FC | 	wrlong	local03, fp
16a24     94 4E 85 F1 | 	sub	fp, #148
16a28     A7 24 02 FB | 	rdlong	local04, fp
16a2c     2C 4E 85 F1 | 	sub	fp, #44
16a30     10 25 42 FC | 	wrbyte	local04, local02
16a34                 | LR__2154
16a34     C0 4E 05 F1 | 	add	fp, #192
16a38     A7 12 02 FB | 	rdlong	arg01, fp
16a3c     C0 4E 85 F1 | 	sub	fp, #192
16a40     23 01 00 FF 
16a44     7E 14 06 F6 | 	mov	arg02, ##@LR__4061
16a48     18 EA BF FD | 	call	#__system____builtin_strcpy
16a4c     A4 08 90 FD | 	jmp	#LR__2191
16a50                 | LR__2155
16a50     0C 4E 05 F1 | 	add	fp, #12
16a54     A7 20 02 FB | 	rdlong	local02, fp
16a58     0C 4E 85 F1 | 	sub	fp, #12
16a5c     10 13 02 F6 | 	mov	arg01, local02
16a60     60 1D B0 FD | 	call	#__system____builtin_ilogb
16a64     00 00 40 FF 
16a68     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
16a6c     50 00 90 5D |  if_ne	jmp	#LR__2157
16a70     2C 4E 05 F1 | 	add	fp, #44
16a74     A7 1E 0A FB | 	rdlong	local01, fp wz
16a78     2C 4E 85 F1 | 	sub	fp, #44
16a7c     24 00 90 AD |  if_e	jmp	#LR__2156
16a80     C0 4E 05 F1 | 	add	fp, #192
16a84     A7 20 02 FB | 	rdlong	local02, fp
16a88     10 23 02 F6 | 	mov	local03, local02
16a8c     01 22 06 F1 | 	add	local03, #1
16a90     A7 22 62 FC | 	wrlong	local03, fp
16a94     94 4E 85 F1 | 	sub	fp, #148
16a98     A7 24 02 FB | 	rdlong	local04, fp
16a9c     2C 4E 85 F1 | 	sub	fp, #44
16aa0     10 25 42 FC | 	wrbyte	local04, local02
16aa4                 | LR__2156
16aa4     C0 4E 05 F1 | 	add	fp, #192
16aa8     A7 12 02 FB | 	rdlong	arg01, fp
16aac     C0 4E 85 F1 | 	sub	fp, #192
16ab0     23 01 00 FF 
16ab4     82 14 06 F6 | 	mov	arg02, ##@LR__4062
16ab8     A8 E9 BF FD | 	call	#__system____builtin_strcpy
16abc     34 08 90 FD | 	jmp	#LR__2191
16ac0                 | LR__2157
16ac0     10 4E 05 F1 | 	add	fp, #16
16ac4     A7 1E 02 FB | 	rdlong	local01, fp
16ac8     10 4E 85 F1 | 	sub	fp, #16
16acc     67 1E 0E F2 | 	cmp	local01, #103 wz
16ad0     10 4E 05 51 |  if_ne	add	fp, #16
16ad4     A7 22 02 5B |  if_ne	rdlong	local03, fp
16ad8     10 4E 85 51 |  if_ne	sub	fp, #16
16adc     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
16ae0     94 01 90 5D |  if_ne	jmp	#LR__2162
16ae4     0C 4E 05 F1 | 	add	fp, #12
16ae8     A7 12 02 FB | 	rdlong	arg01, fp
16aec     08 4E 05 F1 | 	add	fp, #8
16af0     A7 14 02 F6 | 	mov	arg02, fp
16af4     0C 4E 05 F1 | 	add	fp, #12
16af8     A7 16 02 F6 | 	mov	arg03, fp
16afc     98 4E 05 F1 | 	add	fp, #152
16b00     A7 18 02 FB | 	rdlong	arg04, fp
16b04     9C 4E 85 F1 | 	sub	fp, #156
16b08     A7 1A 02 FB | 	rdlong	arg05, fp
16b0c     1C 4E 85 F1 | 	sub	fp, #28
16b10     A4 3C B0 FD | 	call	#__system__disassemble_0306
16b14     10 4E 05 F1 | 	add	fp, #16
16b18     A7 1E 02 FB | 	rdlong	local01, fp
16b1c     10 4E 85 F1 | 	sub	fp, #16
16b20     23 1E 0E F2 | 	cmp	local01, #35 wz
16b24     A0 00 90 5D |  if_ne	jmp	#LR__2159
16b28     20 4E 05 F1 | 	add	fp, #32
16b2c     A7 1E 02 FB | 	rdlong	local01, fp
16b30     98 4E 05 F1 | 	add	fp, #152
16b34     A7 22 02 FB | 	rdlong	local03, fp
16b38     B8 4E 85 F1 | 	sub	fp, #184
16b3c     11 1F 5A F2 | 	cmps	local01, local03 wcz
16b40     24 4E 05 11 |  if_a	add	fp, #36
16b44     A7 02 68 1C |  if_a	wrlong	#1, fp
16b48     24 4E 85 11 |  if_a	sub	fp, #36
16b4c     A4 01 90 1D |  if_a	jmp	#LR__2165
16b50     20 4E 05 F1 | 	add	fp, #32
16b54     A7 1E 02 FB | 	rdlong	local01, fp
16b58     20 4E 85 F1 | 	sub	fp, #32
16b5c     00 1E 56 F2 | 	cmps	local01, #0 wc
16b60     2C 00 90 3D |  if_ae	jmp	#LR__2158
16b64     B8 4E 05 F1 | 	add	fp, #184
16b68     A7 1E 02 FB | 	rdlong	local01, fp
16b6c     0F 1F 62 F6 | 	neg	local01, local01
16b70     98 4E 85 F1 | 	sub	fp, #152
16b74     A7 22 02 FB | 	rdlong	local03, fp
16b78     20 4E 85 F1 | 	sub	fp, #32
16b7c     0F 23 5A F2 | 	cmps	local03, local01 wcz
16b80     24 4E 05 E1 |  if_be	add	fp, #36
16b84     A7 02 68 EC |  if_be	wrlong	#1, fp
16b88     24 4E 85 E1 |  if_be	sub	fp, #36
16b8c     64 01 90 FD | 	jmp	#LR__2165
16b90                 | LR__2158
16b90     20 4E 05 F1 | 	add	fp, #32
16b94     A7 1E 02 FB | 	rdlong	local01, fp
16b98     20 4E 85 F1 | 	sub	fp, #32
16b9c     01 1E 56 F2 | 	cmps	local01, #1 wc
16ba0     50 01 90 CD |  if_b	jmp	#LR__2165
16ba4     B8 4E 05 F1 | 	add	fp, #184
16ba8     A7 1E 02 FB | 	rdlong	local01, fp
16bac     98 4E 85 F1 | 	sub	fp, #152
16bb0     A7 22 02 FB | 	rdlong	local03, fp
16bb4     11 1F 82 F1 | 	sub	local01, local03
16bb8     98 4E 05 F1 | 	add	fp, #152
16bbc     A7 1E 62 FC | 	wrlong	local01, fp
16bc0     B8 4E 85 F1 | 	sub	fp, #184
16bc4     2C 01 90 FD | 	jmp	#LR__2165
16bc8                 | LR__2159
16bc8     00 1E 06 F6 | 	mov	local01, #0
16bcc     08 4E 05 F1 | 	add	fp, #8
16bd0     A7 20 02 FB | 	rdlong	local02, fp
16bd4     1C 20 46 F0 | 	shr	local02, #28
16bd8     01 20 0E F5 | 	and	local02, #1 wz
16bdc     01 1E 06 A6 |  if_e	mov	local01, #1
16be0     2C 4E 05 F1 | 	add	fp, #44
16be4     A7 1E 62 FC | 	wrlong	local01, fp
16be8     14 4E 85 F1 | 	sub	fp, #20
16bec     A7 1E 02 FB | 	rdlong	local01, fp
16bf0     98 4E 05 F1 | 	add	fp, #152
16bf4     A7 22 02 FB | 	rdlong	local03, fp
16bf8     B8 4E 85 F1 | 	sub	fp, #184
16bfc     11 1F 52 F2 | 	cmps	local01, local03 wc
16c00     18 00 90 3D |  if_ae	jmp	#LR__2160
16c04     20 4E 05 F1 | 	add	fp, #32
16c08     A7 24 02 FB | 	rdlong	local04, fp
16c0c     20 4E 85 F1 | 	sub	fp, #32
16c10     FF FF 7F FF 
16c14     FC 25 56 F2 | 	cmps	local04, ##-4 wc
16c18     10 00 90 3D |  if_ae	jmp	#LR__2161
16c1c                 | LR__2160
16c1c     24 4E 05 F1 | 	add	fp, #36
16c20     A7 02 68 FC | 	wrlong	#1, fp
16c24     24 4E 85 F1 | 	sub	fp, #36
16c28     C8 00 90 FD | 	jmp	#LR__2165
16c2c                 | LR__2161
16c2c     B8 4E 05 F1 | 	add	fp, #184
16c30     A7 24 02 FB | 	rdlong	local04, fp
16c34     98 4E 85 F1 | 	sub	fp, #152
16c38     A7 22 02 FB | 	rdlong	local03, fp
16c3c     11 25 82 F1 | 	sub	local04, local03
16c40     98 4E 05 F1 | 	add	fp, #152
16c44     A7 24 62 FC | 	wrlong	local04, fp
16c48     AC 4E 85 F1 | 	sub	fp, #172
16c4c     A7 12 02 FB | 	rdlong	arg01, fp
16c50     08 4E 05 F1 | 	add	fp, #8
16c54     A7 14 02 F6 | 	mov	arg02, fp
16c58     0C 4E 05 F1 | 	add	fp, #12
16c5c     A7 16 02 F6 | 	mov	arg03, fp
16c60     12 19 62 F6 | 	neg	arg04, local04
16c64     04 4E 85 F1 | 	sub	fp, #4
16c68     A7 1A 02 FB | 	rdlong	arg05, fp
16c6c     1C 4E 85 F1 | 	sub	fp, #28
16c70     44 3B B0 FD | 	call	#__system__disassemble_0306
16c74     7C 00 90 FD | 	jmp	#LR__2165
16c78                 | LR__2162
16c78     24 4E 05 F1 | 	add	fp, #36
16c7c     A7 1E 0A FB | 	rdlong	local01, fp wz
16c80     24 4E 85 F1 | 	sub	fp, #36
16c84     34 00 90 AD |  if_e	jmp	#LR__2163
16c88     0C 4E 05 F1 | 	add	fp, #12
16c8c     A7 12 02 FB | 	rdlong	arg01, fp
16c90     08 4E 05 F1 | 	add	fp, #8
16c94     A7 14 02 F6 | 	mov	arg02, fp
16c98     0C 4E 05 F1 | 	add	fp, #12
16c9c     A7 16 02 F6 | 	mov	arg03, fp
16ca0     98 4E 05 F1 | 	add	fp, #152
16ca4     A7 18 02 FB | 	rdlong	arg04, fp
16ca8     9C 4E 85 F1 | 	sub	fp, #156
16cac     A7 1A 02 FB | 	rdlong	arg05, fp
16cb0     1C 4E 85 F1 | 	sub	fp, #28
16cb4     00 3B B0 FD | 	call	#__system__disassemble_0306
16cb8     38 00 90 FD | 	jmp	#LR__2164
16cbc                 | LR__2163
16cbc     0C 4E 05 F1 | 	add	fp, #12
16cc0     A7 12 02 FB | 	rdlong	arg01, fp
16cc4     08 4E 05 F1 | 	add	fp, #8
16cc8     A7 14 02 F6 | 	mov	arg02, fp
16ccc     0C 4E 05 F1 | 	add	fp, #12
16cd0     A7 16 02 F6 | 	mov	arg03, fp
16cd4     98 4E 05 F1 | 	add	fp, #152
16cd8     A7 24 02 FB | 	rdlong	local04, fp
16cdc     01 24 06 F1 | 	add	local04, #1
16ce0     12 19 62 F6 | 	neg	arg04, local04
16ce4     9C 4E 85 F1 | 	sub	fp, #156
16ce8     A7 1A 02 FB | 	rdlong	arg05, fp
16cec     1C 4E 85 F1 | 	sub	fp, #28
16cf0     C4 3A B0 FD | 	call	#__system__disassemble_0306
16cf4                 | LR__2164
16cf4                 | LR__2165
16cf4     1C 4E 05 F1 | 	add	fp, #28
16cf8     A7 1E 02 FB | 	rdlong	local01, fp
16cfc     1C 4E 85 F1 | 	sub	fp, #28
16d00     02 1E 0E F2 | 	cmp	local01, #2 wz
16d04     4C 00 90 5D |  if_ne	jmp	#LR__2168
16d08     1C 4E 05 F1 | 	add	fp, #28
16d0c     A7 20 68 FC | 	wrlong	#16, fp
16d10     1C 4E 85 F1 | 	sub	fp, #28
16d14                 | LR__2166
16d14     14 4E 05 F1 | 	add	fp, #20
16d18     A7 1E 0A FB | 	rdlong	local01, fp wz
16d1c     14 4E 85 F1 | 	sub	fp, #20
16d20     30 00 90 AD |  if_e	jmp	#LR__2167
16d24     14 4E 05 F1 | 	add	fp, #20
16d28     A7 22 02 FB | 	rdlong	local03, fp
16d2c     14 4E 85 F1 | 	sub	fp, #20
16d30     00 80 00 FF 
16d34     00 22 16 F2 | 	cmp	local03, ##16777216 wc
16d38     18 00 90 3D |  if_ae	jmp	#LR__2167
16d3c     14 4E 05 F1 | 	add	fp, #20
16d40     A7 1E 02 FB | 	rdlong	local01, fp
16d44     01 1E 66 F0 | 	shl	local01, #1
16d48     A7 1E 62 FC | 	wrlong	local01, fp
16d4c     14 4E 85 F1 | 	sub	fp, #20
16d50     C0 FF 9F FD | 	jmp	#LR__2166
16d54                 | LR__2167
16d54                 | LR__2168
16d54     70 4E 05 F1 | 	add	fp, #112
16d58     A7 12 02 F6 | 	mov	arg01, fp
16d5c     5C 4E 85 F1 | 	sub	fp, #92
16d60     A7 14 02 FB | 	rdlong	arg02, fp
16d64     08 4E 05 F1 | 	add	fp, #8
16d68     A7 16 02 FB | 	rdlong	arg03, fp
16d6c     A0 4E 05 F1 | 	add	fp, #160
16d70     A7 1A 02 FB | 	rdlong	arg05, fp
16d74     BC 4E 85 F1 | 	sub	fp, #188
16d78     01 18 06 F6 | 	mov	arg04, #1
16d7c     C4 39 B0 FD | 	call	#__system___uitoa
16d80     58 4E 05 F1 | 	add	fp, #88
16d84     A7 FA 61 FC | 	wrlong	result1, fp
16d88     38 4E 85 F1 | 	sub	fp, #56
16d8c     A7 1E 02 FB | 	rdlong	local01, fp
16d90     20 4E 85 F1 | 	sub	fp, #32
16d94     00 1E 56 F2 | 	cmps	local01, #0 wc
16d98     50 00 90 3D |  if_ae	jmp	#LR__2169
16d9c     60 4E 05 F1 | 	add	fp, #96
16da0     A7 5A 68 FC | 	wrlong	#45, fp
16da4     50 4E 05 F1 | 	add	fp, #80
16da8     A7 12 02 F6 | 	mov	arg01, fp
16dac     90 4E 85 F1 | 	sub	fp, #144
16db0     A7 22 02 FB | 	rdlong	local03, fp
16db4     11 15 62 F6 | 	neg	arg02, local03
16db8     18 4E 05 F1 | 	add	fp, #24
16dbc     A7 18 02 FB | 	rdlong	arg04, fp
16dc0     84 4E 05 F1 | 	add	fp, #132
16dc4     A7 28 02 FB | 	rdlong	local06, fp
16dc8     BC 4E 85 F1 | 	sub	fp, #188
16dcc     14 25 02 F6 | 	mov	local04, local06
16dd0     0A 16 06 F6 | 	mov	arg03, #10
16dd4     12 1B 02 F6 | 	mov	arg05, local04
16dd8     68 39 B0 FD | 	call	#__system___uitoa
16ddc     5C 4E 05 F1 | 	add	fp, #92
16de0     A7 FA 61 FC | 	wrlong	result1, fp
16de4     5C 4E 85 F1 | 	sub	fp, #92
16de8     48 00 90 FD | 	jmp	#LR__2170
16dec                 | LR__2169
16dec     60 4E 05 F1 | 	add	fp, #96
16df0     A7 56 68 FC | 	wrlong	#43, fp
16df4     50 4E 05 F1 | 	add	fp, #80
16df8     A7 12 02 F6 | 	mov	arg01, fp
16dfc     90 4E 85 F1 | 	sub	fp, #144
16e00     A7 14 02 FB | 	rdlong	arg02, fp
16e04     18 4E 05 F1 | 	add	fp, #24
16e08     A7 18 02 FB | 	rdlong	arg04, fp
16e0c     84 4E 05 F1 | 	add	fp, #132
16e10     A7 28 02 FB | 	rdlong	local06, fp
16e14     BC 4E 85 F1 | 	sub	fp, #188
16e18     14 25 02 F6 | 	mov	local04, local06
16e1c     0A 16 06 F6 | 	mov	arg03, #10
16e20     12 1B 02 F6 | 	mov	arg05, local04
16e24     1C 39 B0 FD | 	call	#__system___uitoa
16e28     5C 4E 05 F1 | 	add	fp, #92
16e2c     A7 FA 61 FC | 	wrlong	result1, fp
16e30     5C 4E 85 F1 | 	sub	fp, #92
16e34                 | LR__2170
16e34     24 4E 05 F1 | 	add	fp, #36
16e38     A7 1E 0A FB | 	rdlong	local01, fp wz
16e3c     24 4E 85 F1 | 	sub	fp, #36
16e40     2C 00 90 AD |  if_e	jmp	#LR__2171
16e44     50 4E 05 F1 | 	add	fp, #80
16e48     A7 00 68 FC | 	wrlong	#0, fp
16e4c     04 4E 85 F1 | 	sub	fp, #4
16e50     A7 00 68 FC | 	wrlong	#0, fp
16e54     6C 4E 05 F1 | 	add	fp, #108
16e58     A7 1E 02 FB | 	rdlong	local01, fp
16e5c     01 1E 06 F1 | 	add	local01, #1
16e60     64 4E 85 F1 | 	sub	fp, #100
16e64     A7 1E 62 FC | 	wrlong	local01, fp
16e68     54 4E 85 F1 | 	sub	fp, #84
16e6c     88 00 90 FD | 	jmp	#LR__2174
16e70                 | LR__2171
16e70     20 4E 05 F1 | 	add	fp, #32
16e74     A7 1E 02 FB | 	rdlong	local01, fp
16e78     20 4E 85 F1 | 	sub	fp, #32
16e7c     00 1E 56 F2 | 	cmps	local01, #0 wc
16e80     40 00 90 3D |  if_ae	jmp	#LR__2172
16e84     20 4E 05 F1 | 	add	fp, #32
16e88     A7 20 02 FB | 	rdlong	local02, fp
16e8c     30 4E 05 F1 | 	add	fp, #48
16e90     A7 20 62 FC | 	wrlong	local02, fp
16e94     04 4E 85 F1 | 	sub	fp, #4
16e98     A7 20 62 FC | 	wrlong	local02, fp
16e9c     2C 4E 85 F1 | 	sub	fp, #44
16ea0     A7 1E 02 FB | 	rdlong	local01, fp
16ea4     98 4E 05 F1 | 	add	fp, #152
16ea8     A7 22 02 FB | 	rdlong	local03, fp
16eac     11 1F 02 F1 | 	add	local01, local03
16eb0     01 1E 06 F1 | 	add	local01, #1
16eb4     64 4E 85 F1 | 	sub	fp, #100
16eb8     A7 1E 62 FC | 	wrlong	local01, fp
16ebc     54 4E 85 F1 | 	sub	fp, #84
16ec0     34 00 90 FD | 	jmp	#LR__2173
16ec4                 | LR__2172
16ec4     4C 4E 05 F1 | 	add	fp, #76
16ec8     A7 00 68 FC | 	wrlong	#0, fp
16ecc     2C 4E 85 F1 | 	sub	fp, #44
16ed0     A7 1E 02 FB | 	rdlong	local01, fp
16ed4     30 4E 05 F1 | 	add	fp, #48
16ed8     A7 1E 62 FC | 	wrlong	local01, fp
16edc     68 4E 05 F1 | 	add	fp, #104
16ee0     A7 22 02 FB | 	rdlong	local03, fp
16ee4     11 1F 02 F1 | 	add	local01, local03
16ee8     01 1E 06 F1 | 	add	local01, #1
16eec     64 4E 85 F1 | 	sub	fp, #100
16ef0     A7 1E 62 FC | 	wrlong	local01, fp
16ef4     54 4E 85 F1 | 	sub	fp, #84
16ef8                 | LR__2173
16ef8                 | LR__2174
16ef8     54 4E 05 F1 | 	add	fp, #84
16efc     A7 1E 02 FB | 	rdlong	local01, fp
16f00     08 4E 85 F1 | 	sub	fp, #8
16f04     A7 22 02 FB | 	rdlong	local03, fp
16f08     11 1F 82 F1 | 	sub	local01, local03
16f0c     01 1E 06 F1 | 	add	local01, #1
16f10     24 4E 85 F1 | 	sub	fp, #36
16f14     A7 1E 62 FC | 	wrlong	local01, fp
16f18     04 4E 05 F1 | 	add	fp, #4
16f1c     A7 1E 0A FB | 	rdlong	local01, fp wz
16f20     2C 4E 85 F1 | 	sub	fp, #44
16f24     28 4E 05 51 |  if_ne	add	fp, #40
16f28     A7 22 02 5B |  if_ne	rdlong	local03, fp
16f2c     01 22 06 51 |  if_ne	add	local03, #1
16f30     A7 22 62 5C |  if_ne	wrlong	local03, fp
16f34     28 4E 85 51 |  if_ne	sub	fp, #40
16f38     1C 4E 05 F1 | 	add	fp, #28
16f3c     A7 1E 02 FB | 	rdlong	local01, fp
16f40     1C 4E 85 F1 | 	sub	fp, #28
16f44     10 1E 0E F2 | 	cmp	local01, #16 wz
16f48     28 4E 05 A1 |  if_e	add	fp, #40
16f4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
16f50     02 1E 06 A1 |  if_e	add	local01, #2
16f54     A7 1E 62 AC |  if_e	wrlong	local01, fp
16f58     28 4E 85 A1 |  if_e	sub	fp, #40
16f5c     24 4E 05 F1 | 	add	fp, #36
16f60     A7 1E 0A FB | 	rdlong	local01, fp wz
16f64     24 4E 85 F1 | 	sub	fp, #36
16f68     28 00 90 AD |  if_e	jmp	#LR__2175
16f6c     28 4E 05 F1 | 	add	fp, #40
16f70     A7 1E 02 FB | 	rdlong	local01, fp
16f74     02 22 06 F6 | 	mov	local03, #2
16f78     34 4E 05 F1 | 	add	fp, #52
16f7c     A7 26 02 FB | 	rdlong	local05, fp
16f80     13 23 02 F1 | 	add	local03, local05
16f84     11 1F 02 F1 | 	add	local01, local03
16f88     34 4E 85 F1 | 	sub	fp, #52
16f8c     A7 1E 62 FC | 	wrlong	local01, fp
16f90     28 4E 85 F1 | 	sub	fp, #40
16f94                 | LR__2175
16f94     28 4E 05 F1 | 	add	fp, #40
16f98     A7 1E 02 FB | 	rdlong	local01, fp
16f9c     28 4E 85 F1 | 	sub	fp, #40
16fa0     41 1E 56 F2 | 	cmps	local01, #65 wc
16fa4     01 FA 65 36 |  if_ae	neg	result1, #1
16fa8     08 05 90 3D |  if_ae	jmp	#LR__2203
16fac     3C 4E 05 F1 | 	add	fp, #60
16fb0     A7 1E 0A FB | 	rdlong	local01, fp wz
16fb4     3C 4E 85 F1 | 	sub	fp, #60
16fb8     60 00 90 AD |  if_e	jmp	#LR__2176
16fbc     C0 4E 05 F1 | 	add	fp, #192
16fc0     A7 12 02 FB | 	rdlong	arg01, fp
16fc4     94 4E 85 F1 | 	sub	fp, #148
16fc8     A7 14 02 FB | 	rdlong	arg02, fp
16fcc     14 4E 05 F1 | 	add	fp, #20
16fd0     A7 16 02 FB | 	rdlong	arg03, fp
16fd4     40 4E 85 F1 | 	sub	fp, #64
16fd8     D0 39 B0 FD | 	call	#__system__emitsign_0308
16fdc     18 4F 05 F1 | 	add	fp, #280
16fe0     A7 FA 61 FC | 	wrlong	result1, fp
16fe4     18 4F 85 F1 | 	sub	fp, #280
16fe8     00 FA 55 F2 | 	cmps	result1, #0 wc
16fec     18 4F 05 C1 |  if_b	add	fp, #280
16ff0     A7 FA 01 CB |  if_b	rdlong	result1, fp
16ff4     18 4F 85 C1 |  if_b	sub	fp, #280
16ff8     B8 04 90 CD |  if_b	jmp	#LR__2203
16ffc     C0 4E 05 F1 | 	add	fp, #192
17000     A7 1E 02 FB | 	rdlong	local01, fp
17004     58 4E 05 F1 | 	add	fp, #88
17008     A7 22 02 FB | 	rdlong	local03, fp
1700c     11 1F 02 F1 | 	add	local01, local03
17010     58 4E 85 F1 | 	sub	fp, #88
17014     A7 1E 62 FC | 	wrlong	local01, fp
17018     C0 4E 85 F1 | 	sub	fp, #192
1701c                 | LR__2176
1701c     4C 4E 05 F1 | 	add	fp, #76
17020     A7 1E 02 FB | 	rdlong	local01, fp
17024     34 4E 85 F1 | 	sub	fp, #52
17028     A7 1E 62 FC | 	wrlong	local01, fp
1702c     18 4E 85 F1 | 	sub	fp, #24
17030     97 9E 48 FB | 	callpa	#(@LR__2182-@LR__2177)>>2,fcache_load_ptr_
17034                 | LR__2177
17034     18 4E 05 F1 | 	add	fp, #24
17038     A7 20 02 FB | 	rdlong	local02, fp
1703c     3C 4E 05 F1 | 	add	fp, #60
17040     A7 26 02 FB | 	rdlong	local05, fp
17044     54 4E 85 F1 | 	sub	fp, #84
17048     13 21 52 F2 | 	cmps	local02, local05 wc
1704c     20 01 90 3D |  if_ae	jmp	#LR__2183
17050     18 4E 05 F1 | 	add	fp, #24
17054     A7 28 02 FB | 	rdlong	local06, fp
17058     18 4E 85 F1 | 	sub	fp, #24
1705c     00 28 56 F2 | 	cmps	local06, #0 wc
17060     58 00 90 CD |  if_b	jmp	#LR__2178
17064     18 4E 05 F1 | 	add	fp, #24
17068     A7 28 02 FB | 	rdlong	local06, fp
1706c     40 4E 05 F1 | 	add	fp, #64
17070     A7 2A 02 FB | 	rdlong	local07, fp
17074     58 4E 85 F1 | 	sub	fp, #88
17078     15 29 52 F2 | 	cmps	local06, local07 wc
1707c     3C 00 90 3D |  if_ae	jmp	#LR__2178
17080     C0 4E 05 F1 | 	add	fp, #192
17084     A7 2C 02 FB | 	rdlong	local08, fp
17088     16 2B 02 F6 | 	mov	local07, local08
1708c     01 2A 06 F1 | 	add	local07, #1
17090     A7 2A 62 FC | 	wrlong	local07, fp
17094     A8 4E 85 F1 | 	sub	fp, #168
17098     A7 2A 02 FB | 	rdlong	local07, fp
1709c     15 2F 02 F6 | 	mov	local09, local07
170a0     58 4E 05 F1 | 	add	fp, #88
170a4     A7 30 02 F6 | 	mov	local10, fp
170a8     A7 2E 02 F1 | 	add	local09, fp
170ac     17 33 C2 FA | 	rdbyte	local11, local09
170b0     16 33 42 FC | 	wrbyte	local11, local08
170b4     70 4E 85 F1 | 	sub	fp, #112
170b8     20 00 90 FD | 	jmp	#LR__2179
170bc                 | LR__2178
170bc     C0 4E 05 F1 | 	add	fp, #192
170c0     A7 2C 02 FB | 	rdlong	local08, fp
170c4     16 2F 02 F6 | 	mov	local09, local08
170c8     01 2E 06 F1 | 	add	local09, #1
170cc     A7 2E 62 FC | 	wrlong	local09, fp
170d0     C0 4E 85 F1 | 	sub	fp, #192
170d4     30 2E 06 F6 | 	mov	local09, #48
170d8     16 61 48 FC | 	wrbyte	#48, local08
170dc                 | LR__2179
170dc     18 4E 05 F1 | 	add	fp, #24
170e0     A7 28 02 FB | 	rdlong	local06, fp
170e4     38 4E 05 F1 | 	add	fp, #56
170e8     A7 34 02 FB | 	rdlong	local12, fp
170ec     50 4E 85 F1 | 	sub	fp, #80
170f0     1A 29 0A F2 | 	cmp	local06, local12 wz
170f4     5C 00 90 5D |  if_ne	jmp	#LR__2181
170f8     10 4F 05 F1 | 	add	fp, #272
170fc     A7 2A 02 FB | 	rdlong	local07, fp
17100     10 4F 85 F1 | 	sub	fp, #272
17104     15 2F 0A F6 | 	mov	local09, local07 wz
17108     28 00 90 5D |  if_ne	jmp	#LR__2180
1710c     54 4E 05 F1 | 	add	fp, #84
17110     A7 32 02 FB | 	rdlong	local11, fp
17114     19 31 02 F6 | 	mov	local10, local11
17118     01 30 86 F1 | 	sub	local10, #1
1711c     3C 4E 85 F1 | 	sub	fp, #60
17120     A7 36 02 FB | 	rdlong	local13, fp
17124     18 4E 85 F1 | 	sub	fp, #24
17128     1B 39 02 F6 | 	mov	local14, local13
1712c     18 39 52 F2 | 	cmps	local14, local10 wc
17130     20 00 90 3D |  if_ae	jmp	#LR__2181
17134                 | LR__2180
17134     C0 4E 05 F1 | 	add	fp, #192
17138     A7 2C 02 FB | 	rdlong	local08, fp
1713c     16 35 02 F6 | 	mov	local12, local08
17140     01 34 06 F1 | 	add	local12, #1
17144     A7 34 62 FC | 	wrlong	local12, fp
17148     C0 4E 85 F1 | 	sub	fp, #192
1714c     2E 2E 06 F6 | 	mov	local09, #46
17150     16 5D 48 FC | 	wrbyte	#46, local08
17154                 | LR__2181
17154     18 4E 05 F1 | 	add	fp, #24
17158     A7 3A 02 FB | 	rdlong	local15, fp
1715c     1D 35 02 F6 | 	mov	local12, local15
17160     01 34 06 F1 | 	add	local12, #1
17164     A7 34 62 FC | 	wrlong	local12, fp
17168     18 4E 85 F1 | 	sub	fp, #24
1716c     C4 FE 9F FD | 	jmp	#LR__2177
17170                 | LR__2182
17170                 | LR__2183
17170     34 4E 05 F1 | 	add	fp, #52
17174     A7 1E 0A FB | 	rdlong	local01, fp wz
17178     34 4E 85 F1 | 	sub	fp, #52
1717c     A0 00 90 AD |  if_e	jmp	#LR__2187
17180     C0 4E 05 F1 | 	add	fp, #192
17184     A7 1E 02 FB | 	rdlong	local01, fp
17188     01 1E 86 F1 | 	sub	local01, #1
1718c     A7 1E 62 FC | 	wrlong	local01, fp
17190     C0 4E 85 F1 | 	sub	fp, #192
17194     97 26 48 FB | 	callpa	#(@LR__2185-@LR__2184)>>2,fcache_load_ptr_
17198                 | LR__2184
17198     C0 4E 05 F1 | 	add	fp, #192
1719c     A7 1E 02 FB | 	rdlong	local01, fp
171a0     04 4E 05 F1 | 	add	fp, #4
171a4     A7 22 02 FB | 	rdlong	local03, fp
171a8     C4 4E 85 F1 | 	sub	fp, #196
171ac     11 1F 5A F2 | 	cmps	local01, local03 wcz
171b0     30 00 90 ED |  if_be	jmp	#LR__2186
171b4     C0 4E 05 F1 | 	add	fp, #192
171b8     A7 28 02 FB | 	rdlong	local06, fp
171bc     C0 4E 85 F1 | 	sub	fp, #192
171c0     14 25 C2 FA | 	rdbyte	local04, local06
171c4     30 24 0E F2 | 	cmp	local04, #48 wz
171c8     18 00 90 5D |  if_ne	jmp	#LR__2186
171cc     C0 4E 05 F1 | 	add	fp, #192
171d0     A7 1E 02 FB | 	rdlong	local01, fp
171d4     01 1E 86 F1 | 	sub	local01, #1
171d8     A7 1E 62 FC | 	wrlong	local01, fp
171dc     C0 4E 85 F1 | 	sub	fp, #192
171e0     B4 FF 9F FD | 	jmp	#LR__2184
171e4                 | LR__2185
171e4                 | LR__2186
171e4     C0 4E 05 F1 | 	add	fp, #192
171e8     A7 20 02 FB | 	rdlong	local02, fp
171ec     C0 4E 85 F1 | 	sub	fp, #192
171f0     10 1F C2 FA | 	rdbyte	local01, local02
171f4     2E 1E 0E F2 | 	cmp	local01, #46 wz
171f8     C0 4E 05 A1 |  if_e	add	fp, #192
171fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
17200     01 1E 86 A1 |  if_e	sub	local01, #1
17204     A7 1E 62 AC |  if_e	wrlong	local01, fp
17208     C0 4E 85 A1 |  if_e	sub	fp, #192
1720c     C0 4E 05 F1 | 	add	fp, #192
17210     A7 22 02 FB | 	rdlong	local03, fp
17214     01 22 06 F1 | 	add	local03, #1
17218     A7 22 62 FC | 	wrlong	local03, fp
1721c     C0 4E 85 F1 | 	sub	fp, #192
17220                 | LR__2187
17220     24 4E 05 F1 | 	add	fp, #36
17224     A7 1E 0A FB | 	rdlong	local01, fp wz
17228     24 4E 85 F1 | 	sub	fp, #36
1722c     B4 00 90 AD |  if_e	jmp	#LR__2190
17230     C0 4E 05 F1 | 	add	fp, #192
17234     A7 20 02 FB | 	rdlong	local02, fp
17238     10 23 02 F6 | 	mov	local03, local02
1723c     01 22 06 F1 | 	add	local03, #1
17240     A7 22 62 FC | 	wrlong	local03, fp
17244     90 4E 85 F1 | 	sub	fp, #144
17248     A7 24 02 FB | 	rdlong	local04, fp
1724c     10 25 42 FC | 	wrbyte	local04, local02
17250     90 4E 05 F1 | 	add	fp, #144
17254     A7 20 02 FB | 	rdlong	local02, fp
17258     10 23 02 F6 | 	mov	local03, local02
1725c     01 22 06 F1 | 	add	local03, #1
17260     A7 22 62 FC | 	wrlong	local03, fp
17264     60 4E 85 F1 | 	sub	fp, #96
17268     A7 24 02 FB | 	rdlong	local04, fp
1726c     10 25 42 FC | 	wrbyte	local04, local02
17270     48 4E 85 F1 | 	sub	fp, #72
17274     A7 00 68 FC | 	wrlong	#0, fp
17278     18 4E 85 F1 | 	sub	fp, #24
1727c                 | LR__2188
1727c     18 4E 05 F1 | 	add	fp, #24
17280     A7 20 02 FB | 	rdlong	local02, fp
17284     44 4E 05 F1 | 	add	fp, #68
17288     A7 26 02 FB | 	rdlong	local05, fp
1728c     5C 4E 85 F1 | 	sub	fp, #92
17290     13 21 52 F2 | 	cmps	local02, local05 wc
17294     4C 00 90 3D |  if_ae	jmp	#LR__2189
17298     C0 4E 05 F1 | 	add	fp, #192
1729c     A7 2C 02 FB | 	rdlong	local08, fp
172a0     16 35 02 F6 | 	mov	local12, local08
172a4     01 34 06 F1 | 	add	local12, #1
172a8     A7 34 62 FC | 	wrlong	local12, fp
172ac     A8 4E 85 F1 | 	sub	fp, #168
172b0     A7 2A 02 FB | 	rdlong	local07, fp
172b4     15 2F 02 F6 | 	mov	local09, local07
172b8     98 4E 05 F1 | 	add	fp, #152
172bc     A7 30 02 F6 | 	mov	local10, fp
172c0     A7 2E 02 F1 | 	add	local09, fp
172c4     17 33 C2 FA | 	rdbyte	local11, local09
172c8     16 33 42 FC | 	wrbyte	local11, local08
172cc     98 4E 85 F1 | 	sub	fp, #152
172d0     A7 34 02 FB | 	rdlong	local12, fp
172d4     01 34 06 F1 | 	add	local12, #1
172d8     A7 34 62 FC | 	wrlong	local12, fp
172dc     18 4E 85 F1 | 	sub	fp, #24
172e0     98 FF 9F FD | 	jmp	#LR__2188
172e4                 | LR__2189
172e4                 | LR__2190
172e4     C0 4E 05 F1 | 	add	fp, #192
172e8     A7 1E 02 FB | 	rdlong	local01, fp
172ec     C0 4E 85 F1 | 	sub	fp, #192
172f0     0F 01 48 FC | 	wrbyte	#0, local01
172f4                 | LR__2191
172f4     6C 4E 05 F1 | 	add	fp, #108
172f8     A7 1E 0A FB | 	rdlong	local01, fp wz
172fc     6C 4E 85 F1 | 	sub	fp, #108
17300     90 01 90 AD |  if_e	jmp	#LR__2202
17304     48 4E 05 F1 | 	add	fp, #72
17308     A7 22 0A FB | 	rdlong	local03, fp wz
1730c     48 4E 85 F1 | 	sub	fp, #72
17310     80 01 90 AD |  if_e	jmp	#LR__2202
17314     C4 4E 05 F1 | 	add	fp, #196
17318     A7 12 02 FB | 	rdlong	arg01, fp
1731c     C4 4E 85 F1 | 	sub	fp, #196
17320     09 3D 02 F6 | 	mov	local16, arg01
17324     97 06 48 FB | 	callpa	#(@LR__2193-@LR__2192)>>2,fcache_load_ptr_
17328                 | LR__2192
17328     1E FB C9 FA | 	rdbyte	result1, local16 wz
1732c     01 3C 06 51 |  if_ne	add	local16, #1
17330     F4 FF 9F 5D |  if_ne	jmp	#LR__2192
17334                 | LR__2193
17334     09 3D 82 F1 | 	sub	local16, arg01
17338     1E 25 02 F6 | 	mov	local04, local16
1733c     6C 4E 05 F1 | 	add	fp, #108
17340     A7 28 02 FB | 	rdlong	local06, fp
17344     6C 4E 85 F1 | 	sub	fp, #108
17348     14 25 5A F2 | 	cmps	local04, local06 wcz
1734c     44 01 90 ED |  if_be	jmp	#LR__2202
17350     C4 4E 05 F1 | 	add	fp, #196
17354     A7 1E 02 FB | 	rdlong	local01, fp
17358     5C 4E 05 F1 | 	add	fp, #92
1735c     A7 1E 62 FC | 	wrlong	local01, fp
17360     FC 4E 85 F1 | 	sub	fp, #252
17364     A7 1E 0A FB | 	rdlong	local01, fp wz
17368     24 4E 85 F1 | 	sub	fp, #36
1736c     20 00 90 AD |  if_e	jmp	#LR__2194
17370     B8 4E 05 F1 | 	add	fp, #184
17374     A7 00 68 FC | 	wrlong	#0, fp
17378     4C 4E 85 F1 | 	sub	fp, #76
1737c     A7 1E 02 FB | 	rdlong	local01, fp
17380     B0 4E 05 F1 | 	add	fp, #176
17384     A7 1E 62 FC | 	wrlong	local01, fp
17388     1C 4F 85 F1 | 	sub	fp, #284
1738c     24 00 90 FD | 	jmp	#LR__2195
17390                 | LR__2194
17390     6C 4E 05 F1 | 	add	fp, #108
17394     A7 1E 02 FB | 	rdlong	local01, fp
17398     01 1E 86 F1 | 	sub	local01, #1
1739c     4C 4E 05 F1 | 	add	fp, #76
173a0     A7 22 02 FB | 	rdlong	local03, fp
173a4     11 1F 82 F1 | 	sub	local01, local03
173a8     64 4E 05 F1 | 	add	fp, #100
173ac     A7 1E 62 FC | 	wrlong	local01, fp
173b0     1C 4F 85 F1 | 	sub	fp, #284
173b4                 | LR__2195
173b4     97 20 48 FB | 	callpa	#(@LR__2197-@LR__2196)>>2,fcache_load_ptr_
173b8                 | LR__2196
173b8     1C 4F 05 F1 | 	add	fp, #284
173bc     A7 1E 0A FB | 	rdlong	local01, fp wz
173c0     1C 4F 85 F1 | 	sub	fp, #284
173c4     30 00 90 AD |  if_e	jmp	#LR__2198
173c8     20 4F 05 F1 | 	add	fp, #288
173cc     A7 20 02 FB | 	rdlong	local02, fp
173d0     10 23 02 F6 | 	mov	local03, local02
173d4     01 22 06 F1 | 	add	local03, #1
173d8     A7 22 62 FC | 	wrlong	local03, fp
173dc     10 55 48 FC | 	wrbyte	#42, local02
173e0     04 4E 85 F1 | 	sub	fp, #4
173e4     A7 1E 02 FB | 	rdlong	local01, fp
173e8     01 1E 86 F1 | 	sub	local01, #1
173ec     A7 1E 62 FC | 	wrlong	local01, fp
173f0     1C 4F 85 F1 | 	sub	fp, #284
173f4     C0 FF 9F FD | 	jmp	#LR__2196
173f8                 | LR__2197
173f8                 | LR__2198
173f8     B8 4E 05 F1 | 	add	fp, #184
173fc     A7 1E 0A FB | 	rdlong	local01, fp wz
17400     B8 4E 85 F1 | 	sub	fp, #184
17404     70 00 90 AD |  if_e	jmp	#LR__2201
17408     20 4F 05 F1 | 	add	fp, #288
1740c     A7 20 02 FB | 	rdlong	local02, fp
17410     10 23 02 F6 | 	mov	local03, local02
17414     01 22 06 F1 | 	add	local03, #1
17418     A7 22 62 FC | 	wrlong	local03, fp
1741c     10 5D 48 FC | 	wrbyte	#46, local02
17420     04 4E 85 F1 | 	sub	fp, #4
17424     A7 00 68 FC | 	wrlong	#0, fp
17428     1C 4F 85 F1 | 	sub	fp, #284
1742c                 | LR__2199
1742c     1C 4F 05 F1 | 	add	fp, #284
17430     A7 20 02 FB | 	rdlong	local02, fp
17434     64 4E 85 F1 | 	sub	fp, #100
17438     A7 26 02 FB | 	rdlong	local05, fp
1743c     B8 4E 85 F1 | 	sub	fp, #184
17440     13 21 52 F2 | 	cmps	local02, local05 wc
17444     30 00 90 3D |  if_ae	jmp	#LR__2200
17448     20 4F 05 F1 | 	add	fp, #288
1744c     A7 2C 02 FB | 	rdlong	local08, fp
17450     16 35 02 F6 | 	mov	local12, local08
17454     01 34 06 F1 | 	add	local12, #1
17458     A7 34 62 FC | 	wrlong	local12, fp
1745c     16 55 48 FC | 	wrbyte	#42, local08
17460     04 4E 85 F1 | 	sub	fp, #4
17464     A7 34 02 FB | 	rdlong	local12, fp
17468     01 34 06 F1 | 	add	local12, #1
1746c     A7 34 62 FC | 	wrlong	local12, fp
17470     1C 4F 85 F1 | 	sub	fp, #284
17474     B4 FF 9F FD | 	jmp	#LR__2199
17478                 | LR__2200
17478                 | LR__2201
17478     20 4F 05 F1 | 	add	fp, #288
1747c     A7 20 02 FB | 	rdlong	local02, fp
17480     10 23 02 F6 | 	mov	local03, local02
17484     01 22 06 F1 | 	add	local03, #1
17488     A7 22 62 FC | 	wrlong	local03, fp
1748c     20 4F 85 F1 | 	sub	fp, #288
17490     10 01 48 FC | 	wrbyte	#0, local02
17494                 | LR__2202
17494     04 4E 05 F1 | 	add	fp, #4
17498     A7 12 02 FB | 	rdlong	arg01, fp
1749c     04 4E 05 F1 | 	add	fp, #4
174a0     A7 14 02 FB | 	rdlong	arg02, fp
174a4     BC 4E 05 F1 | 	add	fp, #188
174a8     A7 16 02 FB | 	rdlong	arg03, fp
174ac     C4 4E 85 F1 | 	sub	fp, #196
174b0     C4 EE BF FD | 	call	#__system___fmtstr
174b4                 | LR__2203
174b4     A7 F0 03 F6 | 	mov	ptra, fp
174b8     B2 00 A0 FD | 	call	#popregs_
174bc                 | __system___fmtfloat_ret
174bc     2D 00 64 FD | 	ret
174c0                 | 
174c0                 | __system__Left_S
174c0     04 4A 05 F6 | 	mov	COUNT_, #4
174c4     A8 00 A0 FD | 	call	#pushregs_
174c8     09 1F 02 F6 | 	mov	local01, arg01
174cc     0A 21 02 F6 | 	mov	local02, arg02
174d0     01 20 56 F2 | 	cmps	local02, #1 wc
174d4     23 01 00 CF 
174d8     86 FA 05 C6 |  if_b	mov	result1, ##@LR__4063
174dc     5C 00 90 CD |  if_b	jmp	#LR__2213
174e0     0F 13 02 F6 | 	mov	arg01, local01
174e4     09 23 02 F6 | 	mov	local03, arg01
174e8     97 06 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
174ec                 | LR__2210
174ec     11 FB C9 FA | 	rdbyte	result1, local03 wz
174f0     01 22 06 51 |  if_ne	add	local03, #1
174f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2210
174f8                 | LR__2211
174f8     09 23 82 F1 | 	sub	local03, arg01
174fc     11 FB 01 F6 | 	mov	result1, local03
17500     10 FB 59 F2 | 	cmps	result1, local02 wcz
17504     0F FB 01 E6 |  if_be	mov	result1, local01
17508     30 00 90 ED |  if_be	jmp	#LR__2213
1750c     10 13 02 F6 | 	mov	arg01, local02
17510     02 12 06 F1 | 	add	arg01, #2
17514     00 1A B0 FD | 	call	#__system___gc_alloc_managed
17518     FD 24 0A F6 | 	mov	local04, result1 wz
1751c     18 00 90 AD |  if_e	jmp	#LR__2212
17520     12 13 02 F6 | 	mov	arg01, local04
17524     0F 15 02 F6 | 	mov	arg02, local01
17528     10 17 02 F6 | 	mov	arg03, local02
1752c     A0 DE BF FD | 	call	#__system____builtin_memmove
17530     12 21 02 F1 | 	add	local02, local04
17534     10 01 48 FC | 	wrbyte	#0, local02
17538                 | LR__2212
17538     12 FB 01 F6 | 	mov	result1, local04
1753c                 | LR__2213
1753c     A7 F0 03 F6 | 	mov	ptra, fp
17540     B2 00 A0 FD | 	call	#popregs_
17544                 | __system__Left_S_ret
17544     2D 00 64 FD | 	ret
17548                 | 
17548                 | __system__Right_S
17548     05 4A 05 F6 | 	mov	COUNT_, #5
1754c     A8 00 A0 FD | 	call	#pushregs_
17550     09 1F 02 F6 | 	mov	local01, arg01
17554     0A 21 02 F6 | 	mov	local02, arg02
17558     01 20 56 F2 | 	cmps	local02, #1 wc
1755c     23 01 00 CF 
17560     87 FA 05 C6 |  if_b	mov	result1, ##@LR__4064
17564     64 00 90 CD |  if_b	jmp	#LR__2223
17568     0F 13 02 F6 | 	mov	arg01, local01
1756c     09 23 02 F6 | 	mov	local03, arg01
17570     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
17574                 | LR__2220
17574     11 FB C9 FA | 	rdbyte	result1, local03 wz
17578     01 22 06 51 |  if_ne	add	local03, #1
1757c     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
17580                 | LR__2221
17580     09 23 82 F1 | 	sub	local03, arg01
17584     11 FB 01 F6 | 	mov	result1, local03
17588     FD 24 02 F6 | 	mov	local04, result1
1758c     10 25 5A F2 | 	cmps	local04, local02 wcz
17590     0F FB 01 E6 |  if_be	mov	result1, local01
17594     34 00 90 ED |  if_be	jmp	#LR__2223
17598     10 13 02 F6 | 	mov	arg01, local02
1759c     02 12 06 F1 | 	add	arg01, #2
175a0     74 19 B0 FD | 	call	#__system___gc_alloc_managed
175a4     FD 26 0A F6 | 	mov	local05, result1 wz
175a8     1C 00 90 AD |  if_e	jmp	#LR__2222
175ac     10 25 82 F1 | 	sub	local04, local02
175b0     0F 25 02 F1 | 	add	local04, local01
175b4     01 20 06 F1 | 	add	local02, #1
175b8     13 13 02 F6 | 	mov	arg01, local05
175bc     12 15 02 F6 | 	mov	arg02, local04
175c0     10 17 02 F6 | 	mov	arg03, local02
175c4     08 DE BF FD | 	call	#__system____builtin_memmove
175c8                 | LR__2222
175c8     13 FB 01 F6 | 	mov	result1, local05
175cc                 | LR__2223
175cc     A7 F0 03 F6 | 	mov	ptra, fp
175d0     B2 00 A0 FD | 	call	#popregs_
175d4                 | __system__Right_S_ret
175d4     2D 00 64 FD | 	ret
175d8                 | 
175d8                 | __system__Mid_S
175d8     05 4A 05 F6 | 	mov	COUNT_, #5
175dc     A8 00 A0 FD | 	call	#pushregs_
175e0     09 1F 02 F6 | 	mov	local01, arg01
175e4     0A 21 02 F6 | 	mov	local02, arg02
175e8     01 16 56 F2 | 	cmps	arg03, #1 wc
175ec     23 01 00 CF 
175f0     88 FA 05 C6 |  if_b	mov	result1, ##@LR__4065
175f4     80 00 90 CD |  if_b	jmp	#LR__2233
175f8     01 20 86 F1 | 	sub	local02, #1
175fc     00 20 56 F3 | 	fges	local02, #0 wc
17600     0F 13 02 F6 | 	mov	arg01, local01
17604     09 23 02 F6 | 	mov	local03, arg01
17608     97 06 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
1760c                 | LR__2230
1760c     11 FB C9 FA | 	rdbyte	result1, local03 wz
17610     01 22 06 51 |  if_ne	add	local03, #1
17614     F4 FF 9F 5D |  if_ne	jmp	#LR__2230
17618                 | LR__2231
17618     09 23 82 F1 | 	sub	local03, arg01
1761c     11 FB 01 F6 | 	mov	result1, local03
17620     FD 14 02 F6 | 	mov	arg02, result1
17624     10 15 52 F2 | 	cmps	arg02, local02 wc
17628     23 01 00 CF 
1762c     89 FA 05 C6 |  if_b	mov	result1, ##@LR__4066
17630     44 00 90 CD |  if_b	jmp	#LR__2233
17634     0A 25 02 F6 | 	mov	local04, arg02
17638     10 25 82 F1 | 	sub	local04, local02
1763c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
17640     0B 25 02 16 |  if_a	mov	local04, arg03
17644     12 13 02 F6 | 	mov	arg01, local04
17648     02 12 06 F1 | 	add	arg01, #2
1764c     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
17650     FD 26 0A F6 | 	mov	local05, result1 wz
17654     1C 00 90 AD |  if_e	jmp	#LR__2232
17658     0F 21 02 F1 | 	add	local02, local01
1765c     13 13 02 F6 | 	mov	arg01, local05
17660     10 15 02 F6 | 	mov	arg02, local02
17664     12 17 02 F6 | 	mov	arg03, local04
17668     64 DD BF FD | 	call	#__system____builtin_memmove
1766c     13 25 02 F1 | 	add	local04, local05
17670     12 01 48 FC | 	wrbyte	#0, local04
17674                 | LR__2232
17674     13 FB 01 F6 | 	mov	result1, local05
17678                 | LR__2233
17678     A7 F0 03 F6 | 	mov	ptra, fp
1767c     B2 00 A0 FD | 	call	#popregs_
17680                 | __system__Mid_S_ret
17680     2D 00 64 FD | 	ret
17684                 | 
17684                 | __system__Chr_S
17684     01 4A 05 F6 | 	mov	COUNT_, #1
17688     A8 00 A0 FD | 	call	#pushregs_
1768c     09 1F 02 F6 | 	mov	local01, arg01
17690     03 12 06 F6 | 	mov	arg01, #3
17694     80 18 B0 FD | 	call	#__system___gc_alloc_managed
17698     00 FA 4D F2 | 	cmps	result1, #0 wz
1769c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
176a0     01 FA 05 51 |  if_ne	add	result1, #1
176a4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
176a8     01 FA 85 51 |  if_ne	sub	result1, #1
176ac     A7 F0 03 F6 | 	mov	ptra, fp
176b0     B2 00 A0 FD | 	call	#popregs_
176b4                 | __system__Chr_S_ret
176b4     2D 00 64 FD | 	ret
176b8                 | 
176b8                 | __system__Number_S
176b8     08 4A 05 F6 | 	mov	COUNT_, #8
176bc     A8 00 A0 FD | 	call	#pushregs_
176c0     09 1F 02 F6 | 	mov	local01, arg01
176c4     0A 21 0A F6 | 	mov	local02, arg02 wz
176c8     0B 23 02 F6 | 	mov	local03, arg03
176cc     3C 00 90 5D |  if_ne	jmp	#LR__2242
176d0     01 20 06 F6 | 	mov	local02, #1
176d4     11 25 02 F6 | 	mov	local04, local03
176d8     01 26 06 F6 | 	mov	local05, #1
176dc     97 16 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
176e0                 | LR__2240
176e0     00 28 06 F6 | 	mov	local06, #0
176e4     0F 25 1A F2 | 	cmp	local04, local01 wcz
176e8     01 28 66 E6 |  if_be	neg	local06, #1
176ec     12 27 12 F2 | 	cmp	local05, local04 wc
176f0     15 2B A2 F1 | 	subx	local07, local07
176f4     15 29 CA F7 | 	test	local06, local07 wz
176f8     11 25 02 5D |  if_ne	qmul	local04, local03
176fc     12 27 02 56 |  if_ne	mov	local05, local04
17700     01 20 06 51 |  if_ne	add	local02, #1
17704     18 24 62 5D |  if_ne	getqx	local04
17708     D4 FF 9F 5D |  if_ne	jmp	#LR__2240
1770c                 | LR__2241
1770c                 | LR__2242
1770c     20 20 36 F3 | 	fle	local02, #32 wc
17710     10 13 02 F6 | 	mov	arg01, local02
17714     02 12 06 F1 | 	add	arg01, #2
17718     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
1771c     FD 28 02 F6 | 	mov	local06, result1
17720     10 2B 02 F6 | 	mov	local07, local02
17724     14 2B 02 F1 | 	add	local07, local06
17728     15 01 48 FC | 	wrbyte	#0, local07
1772c     97 1A 48 FB | 	callpa	#(@LR__2244-@LR__2243)>>2,fcache_load_ptr_
17730                 | LR__2243
17730     01 20 16 F2 | 	cmp	local02, #1 wc
17734     2C 00 90 CD |  if_b	jmp	#LR__2245
17738     11 1F 12 FD | 	qdiv	local01, local03
1773c     01 20 86 F1 | 	sub	local02, #1
17740     10 2B 02 F6 | 	mov	local07, local02
17744     14 2B 02 F1 | 	add	local07, local06
17748     19 2C 62 FD | 	getqy	local08
1774c     0A 2C 16 F2 | 	cmp	local08, #10 wc
17750     30 2C 06 C1 |  if_b	add	local08, #48
17754     37 2C 06 31 |  if_ae	add	local08, #55
17758     15 2D 42 FC | 	wrbyte	local08, local07
1775c     18 1E 62 FD | 	getqx	local01
17760     CC FF 9F FD | 	jmp	#LR__2243
17764                 | LR__2244
17764                 | LR__2245
17764     14 FB 01 F6 | 	mov	result1, local06
17768     A7 F0 03 F6 | 	mov	ptra, fp
1776c     B2 00 A0 FD | 	call	#popregs_
17770                 | __system__Number_S_ret
17770     2D 00 64 FD | 	ret
17774                 | 
17774                 | __system__LCase_S
17774     07 4A 05 F6 | 	mov	COUNT_, #7
17778     A8 00 A0 FD | 	call	#pushregs_
1777c     09 1F 02 F6 | 	mov	local01, arg01
17780     09 21 02 F6 | 	mov	local02, arg01
17784     97 06 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
17788                 | LR__2250
17788     10 FB C9 FA | 	rdbyte	result1, local02 wz
1778c     01 20 06 51 |  if_ne	add	local02, #1
17790     F4 FF 9F 5D |  if_ne	jmp	#LR__2250
17794                 | LR__2251
17794     09 21 82 F1 | 	sub	local02, arg01
17798     10 FB 01 F6 | 	mov	result1, local02
1779c     FD 20 0A F6 | 	mov	local02, result1 wz
177a0     23 01 00 AF 
177a4     8A FA 05 A6 |  if_e	mov	result1, ##@LR__4067
177a8     7C 00 90 AD |  if_e	jmp	#LR__2257
177ac     10 13 02 F6 | 	mov	arg01, local02
177b0     02 12 06 F1 | 	add	arg01, #2
177b4     60 17 B0 FD | 	call	#__system___gc_alloc_managed
177b8     FD 22 0A F6 | 	mov	local03, result1 wz
177bc     64 00 90 AD |  if_e	jmp	#LR__2256
177c0     01 24 66 F6 | 	neg	local04, #1
177c4     97 26 48 FB | 	callpa	#(@LR__2255-@LR__2252)>>2,fcache_load_ptr_
177c8                 | LR__2252
177c8     01 24 06 F1 | 	add	local04, #1
177cc     12 27 02 F6 | 	mov	local05, local04
177d0     0F 27 02 F1 | 	add	local05, local01
177d4     13 29 C2 FA | 	rdbyte	local06, local05
177d8     41 28 56 F2 | 	cmps	local06, #65 wc
177dc     18 00 90 CD |  if_b	jmp	#LR__2253
177e0     5B 28 56 F2 | 	cmps	local06, #91 wc
177e4     12 2B 02 C6 |  if_b	mov	local07, local04
177e8     11 2B 02 C1 |  if_b	add	local07, local03
177ec     20 28 06 C1 |  if_b	add	local06, #32
177f0     15 29 42 CC |  if_b	wrbyte	local06, local07
177f4     0C 00 90 CD |  if_b	jmp	#LR__2254
177f8                 | LR__2253
177f8     12 2B 02 F6 | 	mov	local07, local04
177fc     11 2B 02 F1 | 	add	local07, local03
17800     15 29 42 FC | 	wrbyte	local06, local07
17804                 | LR__2254
17804     10 29 02 F6 | 	mov	local06, local02
17808     01 28 86 F1 | 	sub	local06, #1
1780c     14 25 0A F2 | 	cmp	local04, local06 wz
17810     B4 FF 9F 5D |  if_ne	jmp	#LR__2252
17814                 | LR__2255
17814     11 21 02 F1 | 	add	local02, local03
17818     10 01 48 FC | 	wrbyte	#0, local02
1781c     11 FB 01 F6 | 	mov	result1, local03
17820     04 00 90 FD | 	jmp	#LR__2257
17824                 | LR__2256
17824     11 FB 01 F6 | 	mov	result1, local03
17828                 | LR__2257
17828     A7 F0 03 F6 | 	mov	ptra, fp
1782c     B2 00 A0 FD | 	call	#popregs_
17830                 | __system__LCase_S_ret
17830     2D 00 64 FD | 	ret
17834                 | 
17834                 | __system__LTrim_S
17834     05 4A 05 F6 | 	mov	COUNT_, #5
17838     A8 00 A0 FD | 	call	#pushregs_
1783c     09 1F 02 F6 | 	mov	local01, arg01
17840     09 21 02 F6 | 	mov	local02, arg01
17844     97 06 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
17848                 | LR__2260
17848     10 FB C9 FA | 	rdbyte	result1, local02 wz
1784c     01 20 06 51 |  if_ne	add	local02, #1
17850     F4 FF 9F 5D |  if_ne	jmp	#LR__2260
17854                 | LR__2261
17854     09 21 82 F1 | 	sub	local02, arg01
17858     10 FB 01 F6 | 	mov	result1, local02
1785c     FD 20 0A F6 | 	mov	local02, result1 wz
17860     23 01 00 AF 
17864     8B FA 05 A6 |  if_e	mov	result1, ##@LR__4068
17868     7C 00 90 AD |  if_e	jmp	#LR__2266
1786c     00 22 06 F6 | 	mov	local03, #0
17870     10 25 02 F6 | 	mov	local04, local02
17874                 | LR__2262
17874     12 23 52 F2 | 	cmps	local03, local04 wc
17878     68 00 90 3D |  if_ae	jmp	#LR__2265
1787c     11 17 02 F6 | 	mov	arg03, local03
17880     0F 17 02 F1 | 	add	arg03, local01
17884     0B 17 C2 FA | 	rdbyte	arg03, arg03
17888     20 16 0E F2 | 	cmp	arg03, #32 wz
1788c     4C 00 90 AD |  if_e	jmp	#LR__2264
17890     10 13 02 F6 | 	mov	arg01, local02
17894     11 13 82 F1 | 	sub	arg01, local03
17898     02 12 06 F1 | 	add	arg01, #2
1789c     78 16 B0 FD | 	call	#__system___gc_alloc_managed
178a0     FD 26 0A F6 | 	mov	local05, result1 wz
178a4     2C 00 90 AD |  if_e	jmp	#LR__2263
178a8     11 15 02 F6 | 	mov	arg02, local03
178ac     0F 15 02 F1 | 	add	arg02, local01
178b0     10 17 02 F6 | 	mov	arg03, local02
178b4     11 17 82 F1 | 	sub	arg03, local03
178b8     13 13 02 F6 | 	mov	arg01, local05
178bc     10 DB BF FD | 	call	#__system____builtin_memmove
178c0     11 21 82 F1 | 	sub	local02, local03
178c4     13 21 02 F1 | 	add	local02, local05
178c8     10 01 48 FC | 	wrbyte	#0, local02
178cc     13 FB 01 F6 | 	mov	result1, local05
178d0     14 00 90 FD | 	jmp	#LR__2266
178d4                 | LR__2263
178d4     13 FB 01 F6 | 	mov	result1, local05
178d8     0C 00 90 FD | 	jmp	#LR__2266
178dc                 | LR__2264
178dc     01 22 06 F1 | 	add	local03, #1
178e0     90 FF 9F FD | 	jmp	#LR__2262
178e4                 | LR__2265
178e4     0F FB 01 F6 | 	mov	result1, local01
178e8                 | LR__2266
178e8     A7 F0 03 F6 | 	mov	ptra, fp
178ec     B2 00 A0 FD | 	call	#popregs_
178f0                 | __system__LTrim_S_ret
178f0     2D 00 64 FD | 	ret
178f4                 | 
178f4                 | __system__RTrim_S
178f4     04 4A 05 F6 | 	mov	COUNT_, #4
178f8     A8 00 A0 FD | 	call	#pushregs_
178fc     09 1F 02 F6 | 	mov	local01, arg01
17900     09 21 02 F6 | 	mov	local02, arg01
17904     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
17908                 | LR__2270
17908     10 FB C9 FA | 	rdbyte	result1, local02 wz
1790c     01 20 06 51 |  if_ne	add	local02, #1
17910     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
17914                 | LR__2271
17914     09 21 82 F1 | 	sub	local02, arg01
17918     10 FB 01 F6 | 	mov	result1, local02
1791c     FD 20 0A F6 | 	mov	local02, result1 wz
17920     23 01 00 AF 
17924     8C FA 05 A6 |  if_e	mov	result1, ##@LR__4069
17928     74 00 90 AD |  if_e	jmp	#LR__2275
1792c     10 23 02 F6 | 	mov	local03, local02
17930     01 22 86 F1 | 	sub	local03, #1
17934                 | LR__2272
17934     11 15 02 F6 | 	mov	arg02, local03
17938     0F 15 02 F1 | 	add	arg02, local01
1793c     0A 21 C2 FA | 	rdbyte	local02, arg02
17940     20 20 0E F2 | 	cmp	local02, #32 wz
17944     44 00 90 AD |  if_e	jmp	#LR__2274
17948     11 13 02 F6 | 	mov	arg01, local03
1794c     02 12 06 F1 | 	add	arg01, #2
17950     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
17954     FD 24 0A F6 | 	mov	local04, result1 wz
17958     28 00 90 AD |  if_e	jmp	#LR__2273
1795c     11 17 02 F6 | 	mov	arg03, local03
17960     01 16 06 F1 | 	add	arg03, #1
17964     12 13 02 F6 | 	mov	arg01, local04
17968     0F 15 02 F6 | 	mov	arg02, local01
1796c     60 DA BF FD | 	call	#__system____builtin_memmove
17970     01 22 06 F1 | 	add	local03, #1
17974     12 23 02 F1 | 	add	local03, local04
17978     11 01 48 FC | 	wrbyte	#0, local03
1797c     12 FB 01 F6 | 	mov	result1, local04
17980     1C 00 90 FD | 	jmp	#LR__2275
17984                 | LR__2273
17984     12 FB 01 F6 | 	mov	result1, local04
17988     14 00 90 FD | 	jmp	#LR__2275
1798c                 | LR__2274
1798c     01 22 86 F1 | 	sub	local03, #1
17990     00 22 56 F2 | 	cmps	local03, #0 wc
17994     9C FF 9F 3D |  if_ae	jmp	#LR__2272
17998     23 01 00 FF 
1799c     8D FA 05 F6 | 	mov	result1, ##@LR__4070
179a0                 | LR__2275
179a0     A7 F0 03 F6 | 	mov	ptra, fp
179a4     B2 00 A0 FD | 	call	#popregs_
179a8                 | __system__RTrim_S_ret
179a8     2D 00 64 FD | 	ret
179ac                 | 
179ac                 | __system__Instr
179ac     07 4A 05 F6 | 	mov	COUNT_, #7
179b0     A8 00 A0 FD | 	call	#pushregs_
179b4     09 1F 02 F6 | 	mov	local01, arg01
179b8     0A 21 02 F6 | 	mov	local02, arg02
179bc     0B 23 02 F6 | 	mov	local03, arg03
179c0     11 13 02 F6 | 	mov	arg01, local03
179c4     09 25 02 F6 | 	mov	local04, arg01
179c8     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
179cc                 | LR__2280
179cc     12 FB C9 FA | 	rdbyte	result1, local04 wz
179d0     01 24 06 51 |  if_ne	add	local04, #1
179d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2280
179d8                 | LR__2281
179d8     09 25 82 F1 | 	sub	local04, arg01
179dc     12 27 02 F6 | 	mov	local05, local04
179e0     10 13 02 F6 | 	mov	arg01, local02
179e4     09 25 02 F6 | 	mov	local04, arg01
179e8     97 06 48 FB | 	callpa	#(@LR__2283-@LR__2282)>>2,fcache_load_ptr_
179ec                 | LR__2282
179ec     12 FB C9 FA | 	rdbyte	result1, local04 wz
179f0     01 24 06 51 |  if_ne	add	local04, #1
179f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2282
179f8                 | LR__2283
179f8     09 25 82 F1 | 	sub	local04, arg01
179fc     12 FB 01 F6 | 	mov	result1, local04
17a00     FD 18 0A F6 | 	mov	arg04, result1 wz
17a04     00 FA 05 A6 |  if_e	mov	result1, #0
17a08     98 00 90 AD |  if_e	jmp	#LR__2287
17a0c     00 26 0E F2 | 	cmp	local05, #0 wz
17a10     00 FA 05 A6 |  if_e	mov	result1, #0
17a14     8C 00 90 AD |  if_e	jmp	#LR__2287
17a18     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
17a1c     00 FA 05 16 |  if_a	mov	result1, #0
17a20     80 00 90 1D |  if_a	jmp	#LR__2287
17a24     01 1E 56 F2 | 	cmps	local01, #1 wc
17a28     01 1E 06 C6 |  if_b	mov	local01, #1
17a2c     11 29 C2 FA | 	rdbyte	local06, local03
17a30     01 26 0E F2 | 	cmp	local05, #1 wz
17a34     18 00 90 5D |  if_ne	jmp	#LR__2284
17a38     10 13 02 F6 | 	mov	arg01, local02
17a3c     14 15 02 F6 | 	mov	arg02, local06
17a40     0F 17 02 F6 | 	mov	arg03, local01
17a44     00 18 06 F6 | 	mov	arg04, #0
17a48     68 30 B0 FD | 	call	#__system____ScanForChar
17a4c     54 00 90 FD | 	jmp	#LR__2287
17a50                 | LR__2284
17a50     0F 2B 02 F6 | 	mov	local07, local01
17a54                 | LR__2285
17a54     10 13 02 F6 | 	mov	arg01, local02
17a58     14 15 02 F6 | 	mov	arg02, local06
17a5c     15 17 02 F6 | 	mov	arg03, local07
17a60     00 18 06 F6 | 	mov	arg04, #0
17a64     4C 30 B0 FD | 	call	#__system____ScanForChar
17a68     FD 2A 0A F6 | 	mov	local07, result1 wz
17a6c     30 00 90 AD |  if_e	jmp	#LR__2286
17a70     13 17 02 F6 | 	mov	arg03, local05
17a74     10 13 02 F6 | 	mov	arg01, local02
17a78     15 15 02 F6 | 	mov	arg02, local07
17a7c     58 FB BF FD | 	call	#__system__Mid_S
17a80     FD 12 02 F6 | 	mov	arg01, result1
17a84     11 15 02 F6 | 	mov	arg02, local03
17a88     4C DA BF FD | 	call	#__system___string_cmp
17a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
17a90     15 FB 01 A6 |  if_e	mov	result1, local07
17a94     0C 00 90 AD |  if_e	jmp	#LR__2287
17a98     13 2B 02 F1 | 	add	local07, local05
17a9c     B4 FF 9F FD | 	jmp	#LR__2285
17aa0                 | LR__2286
17aa0     00 FA 05 F6 | 	mov	result1, #0
17aa4                 | LR__2287
17aa4     A7 F0 03 F6 | 	mov	ptra, fp
17aa8     B2 00 A0 FD | 	call	#popregs_
17aac                 | __system__Instr_ret
17aac     2D 00 64 FD | 	ret
17ab0                 | 
17ab0                 | __system___strerror
17ab0     00 12 56 F2 | 	cmps	arg01, #0 wc
17ab4     08 00 90 CD |  if_b	jmp	#LR__2290
17ab8     1A 12 56 F2 | 	cmps	arg01, #26 wc
17abc     04 00 90 CD |  if_b	jmp	#LR__2291
17ac0                 | LR__2290
17ac0     19 12 06 F6 | 	mov	arg01, #25
17ac4                 | LR__2291
17ac4     02 12 66 F0 | 	shl	arg01, #2
17ac8     01 00 00 FF 
17acc     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
17ad0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17ad4     09 FB 01 FB | 	rdlong	result1, arg01
17ad8     01 00 00 FF 
17adc     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
17ae0                 | __system___strerror_ret
17ae0     2D 00 64 FD | 	ret
17ae4                 | 
17ae4                 | __system___int64_shl
17ae4     20 16 CE F7 | 	test	arg03, #32 wz
17ae8     09 15 02 56 |  if_ne	mov	arg02, arg01
17aec     00 12 06 56 |  if_ne	mov	arg01, #0
17af0     1F 16 CE F7 | 	test	arg03, #31 wz
17af4     18 00 90 AD |  if_e	jmp	#LR__2300
17af8     0B 15 62 F0 | 	shl	arg02, arg03
17afc     09 FB 01 F6 | 	mov	result1, arg01
17b00     0B FD 61 F6 | 	neg	result2, arg03
17b04     FE FA 41 F0 | 	shr	result1, result2
17b08     FD 14 42 F5 | 	or	arg02, result1
17b0c     0B 13 62 F0 | 	shl	arg01, arg03
17b10                 | LR__2300
17b10     0A FD 01 F6 | 	mov	result2, arg02
17b14     09 FB 01 F6 | 	mov	result1, arg01
17b18                 | __system___int64_shl_ret
17b18     2D 00 64 FD | 	ret
17b1c                 | 
17b1c                 | __system___usepins
17b1c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17b20     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17b24     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
17b28     00 13 CA F7 | 	test	arg01, _var01 wz
17b2c     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
17b30     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
17b34     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
17b38     01 15 CA A7 |  if_e	test	arg02, _var02 wz
17b3c     00 FA 05 56 |  if_ne	mov	result1, #0
17b40     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
17b44     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17b48     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
17b4c     09 03 42 F5 | 	or	_var02, arg01
17b50     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
17b54     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17b58     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
17b5c     0A 03 42 F5 | 	or	_var02, arg02
17b60     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
17b64     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17b68     01 FA 65 F6 | 	neg	result1, #1
17b6c                 | __system___usepins_ret
17b6c     2D 00 64 FD | 	ret
17b70                 | 
17b70                 | __system___freepins
17b70     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17b74     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17b78     09 01 22 F5 | 	andn	_var01, arg01
17b7c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17b80     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17b84     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17b88     0A 01 22 F5 | 	andn	_var01, arg02
17b8c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17b90     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17b94                 | __system___freepins_ret
17b94     2D 00 64 FD | 	ret
17b98                 | 
17b98                 | __system___float_fromuns
17b98     09 17 0A F6 | 	mov	arg03, arg01 wz
17b9c     0B FB 01 A6 |  if_e	mov	result1, arg03
17ba0     24 00 90 AD |  if_e	jmp	#LR__2310
17ba4     0B 15 92 F7 | 	encod	arg02, arg03 wc
17ba8     01 14 06 C1 |  if_b	add	arg02, #1
17bac     01 14 86 F1 | 	sub	arg02, #1
17bb0     1F 12 06 F6 | 	mov	arg01, #31
17bb4     0A 13 82 F1 | 	sub	arg01, arg02
17bb8     09 17 62 F0 | 	shl	arg03, arg01
17bbc     02 16 46 F0 | 	shr	arg03, #2
17bc0     00 12 06 F6 | 	mov	arg01, #0
17bc4     74 08 B0 FD | 	call	#__system___float_Pack
17bc8                 | LR__2310
17bc8                 | __system___float_fromuns_ret
17bc8     2D 00 64 FD | 	ret
17bcc                 | 
17bcc                 | __system___float_add
17bcc     0F 4A 05 F6 | 	mov	COUNT_, #15
17bd0     A8 00 A0 FD | 	call	#pushregs_
17bd4     09 1F 02 F6 | 	mov	local01, arg01
17bd8     0A 21 02 F6 | 	mov	local02, arg02
17bdc     00 22 06 F6 | 	mov	local03, #0
17be0     0F 25 02 F6 | 	mov	local04, local01
17be4     12 27 02 F6 | 	mov	local05, local04
17be8     16 26 46 F7 | 	zerox	local05, #22
17bec     12 29 02 F6 | 	mov	local06, local04
17bf0     01 28 66 F0 | 	shl	local06, #1
17bf4     18 28 46 F0 | 	shr	local06, #24
17bf8     1F 24 46 F0 | 	shr	local04, #31
17bfc     10 13 02 F6 | 	mov	arg01, local02
17c00     09 FB 01 F6 | 	mov	result1, arg01
17c04     FD 2A 02 F6 | 	mov	local07, result1
17c08     15 2D 02 F6 | 	mov	local08, local07
17c0c     16 2C 46 F7 | 	zerox	local08, #22
17c10     15 2F 02 F6 | 	mov	local09, local07
17c14     01 2E 66 F0 | 	shl	local09, #1
17c18     18 2E 46 F0 | 	shr	local09, #24
17c1c     17 31 02 F6 | 	mov	local10, local09
17c20     1F 2A 46 F0 | 	shr	local07, #31
17c24     00 32 06 F6 | 	mov	local11, #0
17c28     00 34 06 F6 | 	mov	local12, #0
17c2c     18 29 12 F2 | 	cmp	local06, local10 wc
17c30     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
17c34     2C 00 90 1D |  if_a	jmp	#LR__2320
17c38     16 27 12 32 |  if_ae	cmp	local05, local08 wc
17c3c     24 00 90 3D |  if_ae	jmp	#LR__2320
17c40     13 37 02 F6 | 	mov	local13, local05
17c44     16 27 02 F6 | 	mov	local05, local08
17c48     1B 2D 02 F6 | 	mov	local08, local13
17c4c     14 37 02 F6 | 	mov	local13, local06
17c50     18 29 02 F6 | 	mov	local06, local10
17c54     1B 31 02 F6 | 	mov	local10, local13
17c58     12 37 02 F6 | 	mov	local13, local04
17c5c     15 25 02 F6 | 	mov	local04, local07
17c60     1B 2B 02 F6 | 	mov	local07, local13
17c64                 | LR__2320
17c64     FF 28 0E F2 | 	cmp	local06, #255 wz
17c68     70 01 90 AD |  if_e	jmp	#LR__2335
17c6c     00 28 0E F2 | 	cmp	local06, #0 wz
17c70     AC 01 90 AD |  if_e	jmp	#LR__2337
17c74     17 26 26 F4 | 	bith	local05, #23
17c78                 | LR__2321
17c78     00 30 0E F2 | 	cmp	local10, #0 wz
17c7c     F0 01 90 AD |  if_e	jmp	#LR__2341
17c80     17 2C 26 F4 | 	bith	local08, #23
17c84                 | LR__2322
17c84     7F 28 86 F1 | 	sub	local06, #127
17c88     7F 30 86 F1 | 	sub	local10, #127
17c8c     14 39 02 F6 | 	mov	local14, local06
17c90     18 39 82 F1 | 	sub	local14, local10
17c94     97 14 48 FB | 	callpa	#(@LR__2324-@LR__2323)>>2,fcache_load_ptr_
17c98                 | LR__2323
17c98     20 38 56 F2 | 	cmps	local14, #32 wc
17c9c     20 00 90 CD |  if_b	jmp	#LR__2325
17ca0     16 2F 02 F6 | 	mov	local09, local08
17ca4     00 32 0E F2 | 	cmp	local11, #0 wz
17ca8     6F 32 62 FD | 	wrnz	local11
17cac     19 2F 42 F5 | 	or	local09, local11
17cb0     17 33 02 F6 | 	mov	local11, local09
17cb4     00 2C 06 F6 | 	mov	local08, #0
17cb8     20 38 86 F1 | 	sub	local14, #32
17cbc     D8 FF 9F FD | 	jmp	#LR__2323
17cc0                 | LR__2324
17cc0                 | LR__2325
17cc0     00 38 0E F2 | 	cmp	local14, #0 wz
17cc4     38 00 90 AD |  if_e	jmp	#LR__2326
17cc8     16 37 02 F6 | 	mov	local13, local08
17ccc     20 30 06 F6 | 	mov	local10, #32
17cd0     1C 31 82 F1 | 	sub	local10, local14
17cd4     18 37 62 F0 | 	shl	local13, local10
17cd8     19 31 02 F6 | 	mov	local10, local11
17cdc     20 2E 06 F6 | 	mov	local09, #32
17ce0     1C 2F 82 F1 | 	sub	local09, local14
17ce4     17 31 6A F0 | 	shl	local10, local09 wz
17ce8     1C 33 42 F0 | 	shr	local11, local14
17cec     1C 2D 42 F0 | 	shr	local08, local14
17cf0     1B 33 42 F5 | 	or	local11, local13
17cf4     00 3A 06 F6 | 	mov	local15, #0
17cf8     01 3A 06 56 |  if_ne	mov	local15, #1
17cfc     1D 33 42 F5 | 	or	local11, local15
17d00                 | LR__2326
17d00     12 3B 02 F6 | 	mov	local15, local04
17d04     15 3B 62 F5 | 	xor	local15, local07
17d08     01 3A CE F7 | 	test	local15, #1 wz
17d0c     18 00 90 AD |  if_e	jmp	#LR__2327
17d10     16 2D 22 F6 | 	not	local08, local08
17d14     19 33 22 F6 | 	not	local11, local11
17d18     01 32 0E F1 | 	add	local11, #1 wz
17d1c     00 3A 06 F6 | 	mov	local15, #0
17d20     01 3A 06 A6 |  if_e	mov	local15, #1
17d24     1D 2D 02 F1 | 	add	local08, local15
17d28                 | LR__2327
17d28     19 35 12 F1 | 	add	local12, local11 wc
17d2c     16 27 22 F1 | 	addx	local05, local08
17d30     00 26 56 F2 | 	cmps	local05, #0 wc
17d34     1C 00 90 3D |  if_ae	jmp	#LR__2328
17d38     01 24 66 F5 | 	xor	local04, #1
17d3c     13 27 22 F6 | 	not	local05, local05
17d40     1A 35 22 F6 | 	not	local12, local12
17d44     01 34 0E F1 | 	add	local12, #1 wz
17d48     00 3A 06 F6 | 	mov	local15, #0
17d4c     01 3A 06 A6 |  if_e	mov	local15, #1
17d50     1D 27 02 F1 | 	add	local05, local15
17d54                 | LR__2328
17d54     00 80 00 FF 
17d58     00 26 16 F2 | 	cmp	local05, ##16777216 wc
17d5c     28 00 90 CD |  if_b	jmp	#LR__2329
17d60     01 28 06 F1 | 	add	local06, #1
17d64     1A 39 02 F6 | 	mov	local14, local12
17d68     01 38 06 F5 | 	and	local14, #1
17d6c     01 34 46 F0 | 	shr	local12, #1
17d70     13 3B 02 F6 | 	mov	local15, local05
17d74     1F 3A 66 F0 | 	shl	local15, #31
17d78     1D 35 42 F5 | 	or	local12, local15
17d7c     1C 35 42 F5 | 	or	local12, local14
17d80     01 26 46 F0 | 	shr	local05, #1
17d84     3C 00 90 FD | 	jmp	#LR__2334
17d88                 | LR__2329
17d88     00 40 00 FF 
17d8c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17d90     30 00 90 3D |  if_ae	jmp	#LR__2333
17d94     00 26 0E F2 | 	cmp	local05, #0 wz
17d98     00 34 0E A2 |  if_e	cmp	local12, #0 wz
17d9c     08 24 46 A5 |  if_e	or	local04, #8
17da0     01 24 26 A5 |  if_e	andn	local04, #1
17da4     1C 00 90 AD |  if_e	jmp	#LR__2332
17da8                 | LR__2330
17da8     00 40 00 FF 
17dac     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17db0     10 00 90 3D |  if_ae	jmp	#LR__2331
17db4     1A 35 12 F1 | 	add	local12, local12 wc
17db8     13 27 22 F1 | 	addx	local05, local05
17dbc     01 28 86 F1 | 	sub	local06, #1
17dc0     E4 FF 9F FD | 	jmp	#LR__2330
17dc4                 | LR__2331
17dc4                 | LR__2332
17dc4                 | LR__2333
17dc4                 | LR__2334
17dc4     13 13 02 F6 | 	mov	arg01, local05
17dc8     1A 15 02 F6 | 	mov	arg02, local12
17dcc     14 17 02 F6 | 	mov	arg03, local06
17dd0     12 19 02 F6 | 	mov	arg04, local04
17dd4     20 31 B0 FD | 	call	#__system__pack_0414
17dd8     DC 00 90 FD | 	jmp	#LR__2345
17ddc                 | LR__2335
17ddc     FF 30 0E F2 | 	cmp	local10, #255 wz
17de0     10 00 90 5D |  if_ne	jmp	#LR__2336
17de4     12 2B 0A F2 | 	cmp	local07, local04 wz
17de8     00 F8 3F 5F 
17dec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17df0     C4 00 90 5D |  if_ne	jmp	#LR__2345
17df4                 | LR__2336
17df4     00 26 0E F2 | 	cmp	local05, #0 wz
17df8     00 F8 3F 5F 
17dfc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17e00     B4 00 90 5D |  if_ne	jmp	#LR__2345
17e04     1A 15 02 F6 | 	mov	arg02, local12
17e08     14 17 02 F6 | 	mov	arg03, local06
17e0c     12 19 02 F6 | 	mov	arg04, local04
17e10     02 18 46 F5 | 	or	arg04, #2
17e14     13 13 02 F6 | 	mov	arg01, local05
17e18     DC 30 B0 FD | 	call	#__system__pack_0414
17e1c     98 00 90 FD | 	jmp	#LR__2345
17e20                 | LR__2337
17e20     00 26 0E F2 | 	cmp	local05, #0 wz
17e24     28 00 90 AD |  if_e	jmp	#LR__2340
17e28     01 26 66 F0 | 	shl	local05, #1
17e2c     97 0E 48 FB | 	callpa	#(@LR__2339-@LR__2338)>>2,fcache_load_ptr_
17e30                 | LR__2338
17e30     00 40 00 FF 
17e34     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17e38     14 3B 02 C6 |  if_b	mov	local15, local06
17e3c     01 3A 86 C1 |  if_b	sub	local15, #1
17e40     1D 29 02 C6 |  if_b	mov	local06, local15
17e44     01 26 66 C0 |  if_b	shl	local05, #1
17e48     E4 FF 9F CD |  if_b	jmp	#LR__2338
17e4c                 | LR__2339
17e4c     28 FE 9F FD | 	jmp	#LR__2321
17e50                 | LR__2340
17e50     15 25 02 F5 | 	and	local04, local07
17e54     12 19 02 F6 | 	mov	arg04, local04
17e58     08 18 46 F5 | 	or	arg04, #8
17e5c     00 12 06 F6 | 	mov	arg01, #0
17e60     00 14 06 F6 | 	mov	arg02, #0
17e64     00 16 06 F6 | 	mov	arg03, #0
17e68     8C 30 B0 FD | 	call	#__system__pack_0414
17e6c     48 00 90 FD | 	jmp	#LR__2345
17e70                 | LR__2341
17e70     00 2C 0E F2 | 	cmp	local08, #0 wz
17e74     28 00 90 AD |  if_e	jmp	#LR__2344
17e78     01 2C 66 F0 | 	shl	local08, #1
17e7c     97 0E 48 FB | 	callpa	#(@LR__2343-@LR__2342)>>2,fcache_load_ptr_
17e80                 | LR__2342
17e80     00 40 00 FF 
17e84     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
17e88     18 3B 02 C6 |  if_b	mov	local15, local10
17e8c     01 3A 86 C1 |  if_b	sub	local15, #1
17e90     1D 31 02 C6 |  if_b	mov	local10, local15
17e94     01 2C 66 C0 |  if_b	shl	local08, #1
17e98     E4 FF 9F CD |  if_b	jmp	#LR__2342
17e9c                 | LR__2343
17e9c     E4 FD 9F FD | 	jmp	#LR__2322
17ea0                 | LR__2344
17ea0     7F 28 86 F1 | 	sub	local06, #127
17ea4     13 13 02 F6 | 	mov	arg01, local05
17ea8     1A 15 02 F6 | 	mov	arg02, local12
17eac     14 17 02 F6 | 	mov	arg03, local06
17eb0     12 19 02 F6 | 	mov	arg04, local04
17eb4     40 30 B0 FD | 	call	#__system__pack_0414
17eb8                 | LR__2345
17eb8     A7 F0 03 F6 | 	mov	ptra, fp
17ebc     B2 00 A0 FD | 	call	#popregs_
17ec0                 | __system___float_add_ret
17ec0     2D 00 64 FD | 	ret
17ec4                 | 
17ec4                 | __system___float_mul
17ec4     0B 4A 05 F6 | 	mov	COUNT_, #11
17ec8     A8 00 A0 FD | 	call	#pushregs_
17ecc     09 1F 02 F6 | 	mov	local01, arg01
17ed0     0A 21 02 F6 | 	mov	local02, arg02
17ed4     0F 23 02 F6 | 	mov	local03, local01
17ed8     11 25 02 F6 | 	mov	local04, local03
17edc     16 24 46 F7 | 	zerox	local04, #22
17ee0     11 27 02 F6 | 	mov	local05, local03
17ee4     01 26 66 F0 | 	shl	local05, #1
17ee8     18 26 46 F0 | 	shr	local05, #24
17eec     1F 22 46 F0 | 	shr	local03, #31
17ef0     10 FB 01 F6 | 	mov	result1, local02
17ef4     FD 28 02 F6 | 	mov	local06, result1
17ef8     14 2B 02 F6 | 	mov	local07, local06
17efc     16 2A 46 F7 | 	zerox	local07, #22
17f00     14 2D 02 F6 | 	mov	local08, local06
17f04     01 2C 66 F0 | 	shl	local08, #1
17f08     18 2C 46 F0 | 	shr	local08, #24
17f0c     1F 28 46 F0 | 	shr	local06, #31
17f10     14 23 62 F5 | 	xor	local03, local06
17f14     FF 26 0E F2 | 	cmp	local05, #255 wz
17f18     90 00 90 AD |  if_e	jmp	#LR__2353
17f1c     FF 2C 0E F2 | 	cmp	local08, #255 wz
17f20     D8 00 90 AD |  if_e	jmp	#LR__2355
17f24     00 26 0E F2 | 	cmp	local05, #0 wz
17f28     0C 01 90 AD |  if_e	jmp	#LR__2356
17f2c     17 24 26 F4 | 	bith	local04, #23
17f30                 | LR__2350
17f30     00 2C 0E F2 | 	cmp	local08, #0 wz
17f34     44 01 90 AD |  if_e	jmp	#LR__2360
17f38     17 2A 26 F4 | 	bith	local07, #23
17f3c                 | LR__2351
17f3c     12 21 02 F6 | 	mov	local02, local04
17f40     04 20 66 F0 | 	shl	local02, #4
17f44     15 29 02 F6 | 	mov	local06, local07
17f48     05 28 66 F0 | 	shl	local06, #5
17f4c     14 21 02 FD | 	qmul	local02, local06
17f50     16 27 02 F1 | 	add	local05, local08
17f54     FE 26 86 F1 | 	sub	local05, #254
17f58     13 2F 02 F6 | 	mov	local09, local05
17f5c     04 24 66 F0 | 	shl	local04, #4
17f60     05 2A 66 F0 | 	shl	local07, #5
17f64     18 30 62 FD | 	getqx	local10
17f68     15 25 02 FD | 	qmul	local04, local07
17f6c     19 32 62 FD | 	getqy	local11
17f70     00 80 00 FF 
17f74     00 32 16 F2 | 	cmp	local11, ##16777216 wc
17f78     18 00 90 CD |  if_b	jmp	#LR__2352
17f7c     01 2E 06 F1 | 	add	local09, #1
17f80     01 30 46 F0 | 	shr	local10, #1
17f84     19 2D 02 F6 | 	mov	local08, local11
17f88     1F 2C 66 F0 | 	shl	local08, #31
17f8c     16 31 42 F5 | 	or	local10, local08
17f90     01 32 46 F0 | 	shr	local11, #1
17f94                 | LR__2352
17f94     19 13 02 F6 | 	mov	arg01, local11
17f98     18 15 02 F6 | 	mov	arg02, local10
17f9c     17 17 02 F6 | 	mov	arg03, local09
17fa0     11 19 02 F6 | 	mov	arg04, local03
17fa4     50 2F B0 FD | 	call	#__system__pack_0414
17fa8     10 01 90 FD | 	jmp	#LR__2364
17fac                 | LR__2353
17fac     00 24 0E F2 | 	cmp	local04, #0 wz
17fb0     0F FB 01 56 |  if_ne	mov	result1, local01
17fb4     04 01 90 5D |  if_ne	jmp	#LR__2364
17fb8     FF 2C 56 F2 | 	cmps	local08, #255 wc
17fbc     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
17fc0     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
17fc4     18 00 90 4D |  if_c_and_nz	jmp	#LR__2354
17fc8     00 F8 3F CF 
17fcc     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
17fd0     E8 00 90 CD |  if_b	jmp	#LR__2364
17fd4     00 2A 0E F2 | 	cmp	local07, #0 wz
17fd8     10 FB 01 56 |  if_ne	mov	result1, local02
17fdc     DC 00 90 5D |  if_ne	jmp	#LR__2364
17fe0                 | LR__2354
17fe0     02 22 46 F5 | 	or	local03, #2
17fe4     00 12 06 F6 | 	mov	arg01, #0
17fe8     00 14 06 F6 | 	mov	arg02, #0
17fec     13 17 02 F6 | 	mov	arg03, local05
17ff0     11 19 02 F6 | 	mov	arg04, local03
17ff4     00 2F B0 FD | 	call	#__system__pack_0414
17ff8     C0 00 90 FD | 	jmp	#LR__2364
17ffc                 | LR__2355
17ffc     00 26 0E F2 | 	cmp	local05, #0 wz
18000     00 24 0E A2 |  if_e	cmp	local04, #0 wz
18004     00 F8 3F AF 
18008     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1800c     AC 00 90 AD |  if_e	jmp	#LR__2364
18010     00 2A 0E F2 | 	cmp	local07, #0 wz
18014     10 FB 01 56 |  if_ne	mov	result1, local02
18018     A0 00 90 5D |  if_ne	jmp	#LR__2364
1801c     16 17 02 F6 | 	mov	arg03, local08
18020     11 19 02 F6 | 	mov	arg04, local03
18024     02 18 46 F5 | 	or	arg04, #2
18028     00 12 06 F6 | 	mov	arg01, #0
1802c     00 14 06 F6 | 	mov	arg02, #0
18030     C4 2E B0 FD | 	call	#__system__pack_0414
18034     84 00 90 FD | 	jmp	#LR__2364
18038                 | LR__2356
18038     00 24 0E F2 | 	cmp	local04, #0 wz
1803c     20 00 90 AD |  if_e	jmp	#LR__2359
18040     01 24 66 F0 | 	shl	local04, #1
18044     97 0A 48 FB | 	callpa	#(@LR__2358-@LR__2357)>>2,fcache_load_ptr_
18048                 | LR__2357
18048     00 40 00 FF 
1804c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
18050     01 26 86 C1 |  if_b	sub	local05, #1
18054     01 24 66 C0 |  if_b	shl	local04, #1
18058     EC FF 9F CD |  if_b	jmp	#LR__2357
1805c                 | LR__2358
1805c     D0 FE 9F FD | 	jmp	#LR__2350
18060                 | LR__2359
18060     08 22 46 F5 | 	or	local03, #8
18064     00 12 06 F6 | 	mov	arg01, #0
18068     00 14 06 F6 | 	mov	arg02, #0
1806c     00 16 06 F6 | 	mov	arg03, #0
18070     11 19 02 F6 | 	mov	arg04, local03
18074     80 2E B0 FD | 	call	#__system__pack_0414
18078     40 00 90 FD | 	jmp	#LR__2364
1807c                 | LR__2360
1807c     00 2A 0E F2 | 	cmp	local07, #0 wz
18080     20 00 90 AD |  if_e	jmp	#LR__2363
18084     01 2A 66 F0 | 	shl	local07, #1
18088     97 0A 48 FB | 	callpa	#(@LR__2362-@LR__2361)>>2,fcache_load_ptr_
1808c                 | LR__2361
1808c     00 40 00 FF 
18090     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
18094     01 2C 86 C1 |  if_b	sub	local08, #1
18098     01 2A 66 C0 |  if_b	shl	local07, #1
1809c     EC FF 9F CD |  if_b	jmp	#LR__2361
180a0                 | LR__2362
180a0     98 FE 9F FD | 	jmp	#LR__2351
180a4                 | LR__2363
180a4     08 22 46 F5 | 	or	local03, #8
180a8     00 12 06 F6 | 	mov	arg01, #0
180ac     00 14 06 F6 | 	mov	arg02, #0
180b0     00 16 06 F6 | 	mov	arg03, #0
180b4     11 19 02 F6 | 	mov	arg04, local03
180b8     3C 2E B0 FD | 	call	#__system__pack_0414
180bc                 | LR__2364
180bc     A7 F0 03 F6 | 	mov	ptra, fp
180c0     B2 00 A0 FD | 	call	#popregs_
180c4                 | __system___float_mul_ret
180c4     2D 00 64 FD | 	ret
180c8                 | 
180c8                 | __system___float_div
180c8     0E 4A 05 F6 | 	mov	COUNT_, #14
180cc     A8 00 A0 FD | 	call	#pushregs_
180d0     09 23 02 F6 | 	mov	local03, arg01
180d4     0A 25 02 F6 | 	mov	local04, arg02
180d8     11 27 02 F6 | 	mov	local05, local03
180dc     13 29 02 F6 | 	mov	local06, local05
180e0     16 28 46 F7 | 	zerox	local06, #22
180e4     13 2B 02 F6 | 	mov	local07, local05
180e8     01 2A 66 F0 | 	shl	local07, #1
180ec     18 2A 46 F0 | 	shr	local07, #24
180f0     1F 26 46 F0 | 	shr	local05, #31
180f4     12 FB 01 F6 | 	mov	result1, local04
180f8     FD 2C 02 F6 | 	mov	local08, result1
180fc     16 2F 02 F6 | 	mov	local09, local08
18100     16 2E 46 F7 | 	zerox	local09, #22
18104     16 31 02 F6 | 	mov	local10, local08
18108     01 30 66 F0 | 	shl	local10, #1
1810c     18 30 46 F0 | 	shr	local10, #24
18110     1F 2C 46 F0 | 	shr	local08, #31
18114     16 27 62 F5 | 	xor	local05, local08
18118     FF 2A 0E F2 | 	cmp	local07, #255 wz
1811c     D4 00 90 AD |  if_e	jmp	#LR__2375
18120     FF 30 0E F2 | 	cmp	local10, #255 wz
18124     04 01 90 AD |  if_e	jmp	#LR__2376
18128     00 2A 0E F2 | 	cmp	local07, #0 wz
1812c     24 01 90 AD |  if_e	jmp	#LR__2377
18130     17 28 26 F4 | 	bith	local06, #23
18134                 | LR__2370
18134     00 30 0E F2 | 	cmp	local10, #0 wz
18138     70 01 90 AD |  if_e	jmp	#LR__2381
1813c     17 2E 26 F4 | 	bith	local09, #23
18140                 | LR__2371
18140     18 2B 82 F1 | 	sub	local07, local10
18144     15 33 02 F6 | 	mov	local11, local07
18148     14 13 02 F6 | 	mov	arg01, local06
1814c     02 12 46 F0 | 	shr	arg01, #2
18150     1E 28 66 F0 | 	shl	local06, #30
18154     14 15 02 F6 | 	mov	arg02, local06
18158     17 17 02 F6 | 	mov	arg03, local09
1815c     28 12 62 FD | 	setq	arg01
18160     0B 15 12 FD | 	qdiv	arg02, arg03
18164     00 34 06 F6 | 	mov	local12, #0
18168     18 1E 62 FD | 	getqx	local01
1816c     19 FC 61 FD | 	getqy	result2
18170     FE 20 02 F6 | 	mov	local02, result2
18174     0F 37 02 F6 | 	mov	local13, local01
18178     00 20 4E F2 | 	cmps	local02, #0 wz
1817c     1B 39 02 F6 | 	mov	local14, local13
18180     19 38 66 F0 | 	shl	local14, #25
18184     01 34 06 56 |  if_ne	mov	local12, #1
18188     1A 39 42 F5 | 	or	local14, local12
1818c     07 36 46 F0 | 	shr	local13, #7
18190     00 80 00 FF 
18194     00 36 16 F2 | 	cmp	local13, ##16777216 wc
18198     1C 00 90 CD |  if_b	jmp	#LR__2372
1819c     01 32 06 F1 | 	add	local11, #1
181a0     01 38 46 F0 | 	shr	local14, #1
181a4     1B 35 02 F6 | 	mov	local12, local13
181a8     1F 34 66 F0 | 	shl	local12, #31
181ac     1A 39 42 F5 | 	or	local14, local12
181b0     01 36 46 F0 | 	shr	local13, #1
181b4     24 00 90 FD | 	jmp	#LR__2374
181b8                 | LR__2372
181b8     00 40 00 FF 
181bc     00 36 16 F2 | 	cmp	local13, ##8388608 wc
181c0     18 00 90 3D |  if_ae	jmp	#LR__2373
181c4     01 32 86 F1 | 	sub	local11, #1
181c8     01 36 66 F0 | 	shl	local13, #1
181cc     1C 35 02 F6 | 	mov	local12, local14
181d0     1F 34 46 F0 | 	shr	local12, #31
181d4     1A 37 42 F5 | 	or	local13, local12
181d8     01 38 66 F0 | 	shl	local14, #1
181dc                 | LR__2373
181dc                 | LR__2374
181dc     1B 13 02 F6 | 	mov	arg01, local13
181e0     1C 15 02 F6 | 	mov	arg02, local14
181e4     19 17 02 F6 | 	mov	arg03, local11
181e8     13 19 02 F6 | 	mov	arg04, local05
181ec     08 2D B0 FD | 	call	#__system__pack_0414
181f0     F8 00 90 FD | 	jmp	#LR__2385
181f4                 | LR__2375
181f4     00 28 0E F2 | 	cmp	local06, #0 wz
181f8     11 FB 01 56 |  if_ne	mov	result1, local03
181fc     EC 00 90 5D |  if_ne	jmp	#LR__2385
18200     FF 30 0E F2 | 	cmp	local10, #255 wz
18204     00 F8 3F AF 
18208     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1820c     DC 00 90 AD |  if_e	jmp	#LR__2385
18210     02 26 46 F5 | 	or	local05, #2
18214     00 12 06 F6 | 	mov	arg01, #0
18218     00 14 06 F6 | 	mov	arg02, #0
1821c     15 17 02 F6 | 	mov	arg03, local07
18220     13 19 02 F6 | 	mov	arg04, local05
18224     D0 2C B0 FD | 	call	#__system__pack_0414
18228     C0 00 90 FD | 	jmp	#LR__2385
1822c                 | LR__2376
1822c     00 2E 0E F2 | 	cmp	local09, #0 wz
18230     12 FB 01 56 |  if_ne	mov	result1, local04
18234     B4 00 90 5D |  if_ne	jmp	#LR__2385
18238     13 19 02 F6 | 	mov	arg04, local05
1823c     08 18 46 F5 | 	or	arg04, #8
18240     00 12 06 F6 | 	mov	arg01, #0
18244     00 14 06 F6 | 	mov	arg02, #0
18248     00 16 06 F6 | 	mov	arg03, #0
1824c     A8 2C B0 FD | 	call	#__system__pack_0414
18250     98 00 90 FD | 	jmp	#LR__2385
18254                 | LR__2377
18254     00 28 0E F2 | 	cmp	local06, #0 wz
18258     20 00 90 AD |  if_e	jmp	#LR__2380
1825c     01 28 66 F0 | 	shl	local06, #1
18260     97 0A 48 FB | 	callpa	#(@LR__2379-@LR__2378)>>2,fcache_load_ptr_
18264                 | LR__2378
18264     00 40 00 FF 
18268     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1826c     01 2A 86 C1 |  if_b	sub	local07, #1
18270     01 28 66 C0 |  if_b	shl	local06, #1
18274     EC FF 9F CD |  if_b	jmp	#LR__2378
18278                 | LR__2379
18278     B8 FE 9F FD | 	jmp	#LR__2370
1827c                 | LR__2380
1827c     00 30 0E F2 | 	cmp	local10, #0 wz
18280     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
18284     00 F8 3F AF 
18288     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1828c     5C 00 90 AD |  if_e	jmp	#LR__2385
18290     13 19 02 F6 | 	mov	arg04, local05
18294     08 18 46 F5 | 	or	arg04, #8
18298     00 12 06 F6 | 	mov	arg01, #0
1829c     00 14 06 F6 | 	mov	arg02, #0
182a0     00 16 06 F6 | 	mov	arg03, #0
182a4     50 2C B0 FD | 	call	#__system__pack_0414
182a8     40 00 90 FD | 	jmp	#LR__2385
182ac                 | LR__2381
182ac     00 2E 0E F2 | 	cmp	local09, #0 wz
182b0     20 00 90 AD |  if_e	jmp	#LR__2384
182b4     01 2E 66 F0 | 	shl	local09, #1
182b8     97 0A 48 FB | 	callpa	#(@LR__2383-@LR__2382)>>2,fcache_load_ptr_
182bc                 | LR__2382
182bc     00 40 00 FF 
182c0     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
182c4     01 30 86 C1 |  if_b	sub	local10, #1
182c8     01 2E 66 C0 |  if_b	shl	local09, #1
182cc     EC FF 9F CD |  if_b	jmp	#LR__2382
182d0                 | LR__2383
182d0     6C FE 9F FD | 	jmp	#LR__2371
182d4                 | LR__2384
182d4     02 26 46 F5 | 	or	local05, #2
182d8     00 12 06 F6 | 	mov	arg01, #0
182dc     00 14 06 F6 | 	mov	arg02, #0
182e0     00 16 06 F6 | 	mov	arg03, #0
182e4     13 19 02 F6 | 	mov	arg04, local05
182e8     0C 2C B0 FD | 	call	#__system__pack_0414
182ec                 | LR__2385
182ec     A7 F0 03 F6 | 	mov	ptra, fp
182f0     B2 00 A0 FD | 	call	#popregs_
182f4                 | __system___float_div_ret
182f4     2D 00 64 FD | 	ret
182f8                 | 
182f8                 | __system___float_cmp
182f8     00 C0 3F FF 
182fc     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
18300     00 C0 3F CF 
18304     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
18308     0B FB 01 36 |  if_ae	mov	result1, arg03
1830c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
18310     00 C0 7F FF 
18314     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
18318     00 C0 7F CF 
1831c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
18320     0B FB 01 36 |  if_ae	mov	result1, arg03
18324     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
18328     00 12 56 F2 | 	cmps	arg01, #0 wc
1832c     2C 00 90 3D |  if_ae	jmp	#LR__2390
18330     00 14 56 F2 | 	cmps	arg02, #0 wc
18334     0A FB 01 C6 |  if_b	mov	result1, arg02
18338     09 FB 81 C1 |  if_b	sub	result1, arg01
1833c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
18340     00 14 0E F2 | 	cmp	arg02, #0 wz
18344     00 00 40 AF 
18348     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1834c     00 FA 05 A6 |  if_e	mov	result1, #0
18350     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18354     01 FA 65 F6 | 	neg	result1, #1
18358     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1835c                 | LR__2390
1835c     00 14 56 F2 | 	cmps	arg02, #0 wc
18360     1C 00 90 3D |  if_ae	jmp	#LR__2391
18364     00 12 0E F2 | 	cmp	arg01, #0 wz
18368     00 00 40 AF 
1836c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
18370     00 FA 05 A6 |  if_e	mov	result1, #0
18374     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18378     01 FA 05 F6 | 	mov	result1, #1
1837c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
18380                 | LR__2391
18380     0A 13 82 F1 | 	sub	arg01, arg02
18384     09 FB 01 F6 | 	mov	result1, arg01
18388                 | __system___float_cmp_ret
18388     2D 00 64 FD | 	ret
1838c                 | 
1838c                 | __system___float_tointeger
1838c     02 4A 05 F6 | 	mov	COUNT_, #2
18390     A8 00 A0 FD | 	call	#pushregs_
18394     50 00 B0 FD | 	call	#__system___float_Unpack
18398     FF FF 7F FF 
1839c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
183a0     34 00 90 CD |  if_b	jmp	#LR__2400
183a4     1F FC 55 F2 | 	cmps	result2, #31 wc
183a8     2C 00 90 3D |  if_ae	jmp	#LR__2400
183ac     02 FE 65 F0 | 	shl	result3, #2
183b0     1E 1E 06 F6 | 	mov	local01, #30
183b4     FE 1E 82 F1 | 	sub	local01, result2
183b8     0F FF 41 F0 | 	shr	result3, local01
183bc     FF 20 02 F6 | 	mov	local02, result3
183c0     0A 21 02 F1 | 	add	local02, arg02
183c4     01 20 46 F0 | 	shr	local02, #1
183c8     00 FA 0D F2 | 	cmp	result1, #0 wz
183cc     10 21 62 56 |  if_ne	neg	local02, local02
183d0     10 FB 01 F6 | 	mov	result1, local02
183d4     04 00 90 FD | 	jmp	#LR__2401
183d8                 | LR__2400
183d8     00 FA 05 F6 | 	mov	result1, #0
183dc                 | LR__2401
183dc     A7 F0 03 F6 | 	mov	ptra, fp
183e0     B2 00 A0 FD | 	call	#popregs_
183e4                 | __system___float_tointeger_ret
183e4     2D 00 64 FD | 	ret
183e8                 | 
183e8                 | __system___float_Unpack
183e8     09 01 02 F6 | 	mov	_var01, arg01
183ec     1F 00 46 F0 | 	shr	_var01, #31
183f0     09 03 02 F6 | 	mov	_var02, arg01
183f4     01 02 66 F0 | 	shl	_var02, #1
183f8     18 02 4E F0 | 	shr	_var02, #24 wz
183fc     17 13 06 F4 | 	bitl	arg01, #279
18400     06 12 66 50 |  if_ne	shl	arg01, #6
18404     1D 12 26 54 |  if_ne	bith	arg01, #29
18408     1C 00 90 5D |  if_ne	jmp	#LR__2410
1840c     09 05 92 F7 | 	encod	_var03, arg01 wc
18410     01 04 06 C1 |  if_b	add	_var03, #1
18414     17 04 86 F1 | 	sub	_var03, #23
18418     02 03 02 F6 | 	mov	_var02, _var03
1841c     07 FC 05 F6 | 	mov	result2, #7
18420     02 FD 81 F1 | 	sub	result2, _var03
18424     FE 12 62 F0 | 	shl	arg01, result2
18428                 | LR__2410
18428     7F 02 86 F1 | 	sub	_var02, #127
1842c     09 FF 01 F6 | 	mov	result3, arg01
18430     00 FB 01 F6 | 	mov	result1, _var01
18434     01 FD 01 F6 | 	mov	result2, _var02
18438                 | __system___float_Unpack_ret
18438     2D 00 64 FD | 	ret
1843c                 | 
1843c                 | __system___float_Pack
1843c     00 00 06 F6 | 	mov	_var01, #0
18440     00 16 0E F2 | 	cmp	arg03, #0 wz
18444     8C 00 90 AD |  if_e	jmp	#LR__2421
18448     0B 03 92 F7 | 	encod	_var02, arg03 wc
1844c     01 02 06 C1 |  if_b	add	_var02, #1
18450     21 00 06 F6 | 	mov	_var01, #33
18454     01 01 82 F1 | 	sub	_var01, _var02
18458     00 17 62 F0 | 	shl	arg03, _var01
1845c     03 02 06 F6 | 	mov	_var02, #3
18460     00 03 82 F1 | 	sub	_var02, _var01
18464     01 15 02 F1 | 	add	arg02, _var02
18468     0A 05 02 F6 | 	mov	_var03, arg02
1846c     00 17 06 F1 | 	add	arg03, #256
18470     0B 03 02 F6 | 	mov	_var02, arg03
18474     FF 02 2E F5 | 	andn	_var02, #255 wz
18478     01 04 06 A1 |  if_e	add	_var03, #1
1847c     7F 04 06 F1 | 	add	_var03, #127
18480     FF FF 7F FF 
18484     E9 05 46 F3 | 	fges	_var03, ##-23
18488     FF 04 66 F3 | 	fles	_var03, #255
1848c     01 04 56 F2 | 	cmps	_var03, #1 wc
18490     1C 00 90 3D |  if_ae	jmp	#LR__2420
18494     01 16 46 F0 | 	shr	arg03, #1
18498     1F 02 C6 F9 | 	decod	_var02, #31
1849c     0B 03 02 F1 | 	add	_var02, arg03
184a0     02 05 62 F6 | 	neg	_var03, _var03
184a4     02 03 42 F0 | 	shr	_var02, _var03
184a8     01 17 02 F6 | 	mov	arg03, _var02
184ac     00 04 06 F6 | 	mov	_var03, #0
184b0                 | LR__2420
184b0     09 FB 01 F6 | 	mov	result1, arg01
184b4     1F FA 65 F0 | 	shl	result1, #31
184b8     02 03 02 F6 | 	mov	_var02, _var03
184bc     17 02 66 F0 | 	shl	_var02, #23
184c0     01 FB 41 F5 | 	or	result1, _var02
184c4     0B 07 02 F6 | 	mov	_var04, arg03
184c8     09 06 46 F0 | 	shr	_var04, #9
184cc     03 FB 41 F5 | 	or	result1, _var04
184d0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
184d4                 | LR__2421
184d4     00 FB 01 F6 | 	mov	result1, _var01
184d8                 | __system___float_Pack_ret
184d8     2D 00 64 FD | 	ret
184dc                 | 
184dc                 | __system___basic_print_float
184dc     05 4A 05 F6 | 	mov	COUNT_, #5
184e0     A8 00 A0 FD | 	call	#pushregs_
184e4     09 1F 02 F6 | 	mov	local01, arg01
184e8     0A 21 02 F6 | 	mov	local02, arg02
184ec     0B 23 0A F6 | 	mov	local03, arg03 wz
184f0     0C 25 02 F6 | 	mov	local04, arg04
184f4     14 00 90 5D |  if_ne	jmp	#LR__2430
184f8     23 24 0E F2 | 	cmp	local04, #35 wz
184fc     80 02 10 AF 
18500     00 26 06 A6 |  if_e	mov	local05, ##537198592
18504     1D 26 C6 59 |  if_ne	decod	local05, #29
18508     13 23 02 F6 | 	mov	local03, local05
1850c                 | LR__2430
1850c     0F 13 02 F6 | 	mov	arg01, local01
18510     C8 24 B0 FD | 	call	#__system___gettxfunc
18514     FD 26 0A F6 | 	mov	local05, result1 wz
18518     00 FA 05 A6 |  if_e	mov	result1, #0
1851c     13 13 02 56 |  if_ne	mov	arg01, local05
18520     11 15 02 56 |  if_ne	mov	arg02, local03
18524     10 17 02 56 |  if_ne	mov	arg03, local02
18528     12 19 02 56 |  if_ne	mov	arg04, local04
1852c     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
18530     A7 F0 03 F6 | 	mov	ptra, fp
18534     B2 00 A0 FD | 	call	#popregs_
18538                 | __system___basic_print_float_ret
18538     2D 00 64 FD | 	ret
1853c                 | 
1853c                 | __system____builtin_atoi
1853c     07 4A 05 F6 | 	mov	COUNT_, #7
18540     A8 00 A0 FD | 	call	#pushregs_
18544                 | __system____builtin_atoi_enter
18544     09 1F 02 F6 | 	mov	local01, arg01
18548     0A 21 02 F6 | 	mov	local02, arg02
1854c     00 22 06 F6 | 	mov	local03, #0
18550     00 24 06 F6 | 	mov	local04, #0
18554     00 26 06 F6 | 	mov	local05, #0
18558     97 08 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1855c                 | LR__2440
1855c     0F 29 C2 FA | 	rdbyte	local06, local01
18560     20 28 0E F2 | 	cmp	local06, #32 wz
18564     01 1E 06 A1 |  if_e	add	local01, #1
18568     F0 FF 9F AD |  if_e	jmp	#LR__2440
1856c                 | LR__2441
1856c     0F 2B C2 FA | 	rdbyte	local07, local01
18570                 | LR__2442
18570     2D 2A 0E F2 | 	cmp	local07, #45 wz
18574     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
18578     18 00 90 5D |  if_ne	jmp	#LR__2443
1857c     01 1E 06 F1 | 	add	local01, #1
18580     2D 2A 0E F2 | 	cmp	local07, #45 wz
18584     01 28 06 A6 |  if_e	mov	local06, #1
18588     14 27 C2 A2 |  if_e	subr	local05, local06
1858c     0F 2B C2 FA | 	rdbyte	local07, local01
18590     DC FF 9F FD | 	jmp	#LR__2442
18594                 | LR__2443
18594     97 48 48 FB | 	callpa	#(@LR__2451-@LR__2444)>>2,fcache_load_ptr_
18598                 | LR__2444
18598                 | LR__2445
18598     0F 2B C2 FA | 	rdbyte	local07, local01
1859c     5F 2A 0E F2 | 	cmp	local07, #95 wz
185a0     01 1E 06 F1 | 	add	local01, #1
185a4     F0 FF 9F AD |  if_e	jmp	#LR__2445
185a8     30 2A 0E F2 | 	cmp	local07, #48 wz
185ac     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
185b0     00 24 06 A6 |  if_e	mov	local04, #0
185b4     60 00 90 AD |  if_e	jmp	#LR__2450
185b8     31 2A 56 F2 | 	cmps	local07, #49 wc
185bc     18 00 90 CD |  if_b	jmp	#LR__2446
185c0     3A 2A 56 F2 | 	cmps	local07, #58 wc
185c4     15 25 02 C6 |  if_b	mov	local04, local07
185c8     30 24 86 C1 |  if_b	sub	local04, #48
185cc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
185d0     0A 20 06 86 |  if_c_and_z	mov	local02, #10
185d4     40 00 90 CD |  if_b	jmp	#LR__2449
185d8                 | LR__2446
185d8     0B 20 56 F2 | 	cmps	local02, #11 wc
185dc     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
185e0     14 00 90 CD |  if_b	jmp	#LR__2447
185e4     67 2A 56 F2 | 	cmps	local07, #103 wc
185e8     61 2A 86 C1 |  if_b	sub	local07, #97
185ec     0A 24 06 C6 |  if_b	mov	local04, #10
185f0     15 25 02 C1 |  if_b	add	local04, local07
185f4     20 00 90 CD |  if_b	jmp	#LR__2448
185f8                 | LR__2447
185f8     0B 20 56 F2 | 	cmps	local02, #11 wc
185fc     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
18600     24 00 90 CD |  if_b	jmp	#LR__2452
18604     47 2A 56 F2 | 	cmps	local07, #71 wc
18608     41 2A 86 C1 |  if_b	sub	local07, #65
1860c     0A 24 06 C6 |  if_b	mov	local04, #10
18610     15 25 02 C1 |  if_b	add	local04, local07
18614     10 00 90 3D |  if_ae	jmp	#LR__2452
18618                 | LR__2448
18618                 | LR__2449
18618                 | LR__2450
18618     11 21 02 FD | 	qmul	local02, local03
1861c     18 22 62 FD | 	getqx	local03
18620     12 23 02 F1 | 	add	local03, local04
18624     70 FF 9F FD | 	jmp	#LR__2444
18628                 | LR__2451
18628                 | LR__2452
18628     00 20 0E F2 | 	cmp	local02, #0 wz
1862c     64 00 90 5D |  if_ne	jmp	#LR__2458
18630     78 2A 0E F2 | 	cmp	local07, #120 wz
18634     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
18638     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1863c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
18640     14 00 90 5D |  if_ne	jmp	#LR__2453
18644     0F 13 02 F6 | 	mov	arg01, local01
18648     10 14 06 F6 | 	mov	arg02, #16
1864c     EC FE BF FD | 	call	#__system____builtin_atoi
18650     FD 22 02 F6 | 	mov	local03, result1
18654     3C 00 90 FD | 	jmp	#LR__2457
18658                 | LR__2453
18658     62 2A 0E F2 | 	cmp	local07, #98 wz
1865c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
18660     14 00 90 5D |  if_ne	jmp	#LR__2454
18664     0F 13 02 F6 | 	mov	arg01, local01
18668     02 14 06 F6 | 	mov	arg02, #2
1866c     CC FE BF FD | 	call	#__system____builtin_atoi
18670     FD 22 02 F6 | 	mov	local03, result1
18674     1C 00 90 FD | 	jmp	#LR__2456
18678                 | LR__2454
18678     6F 2A 0E F2 | 	cmp	local07, #111 wz
1867c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
18680     10 00 90 5D |  if_ne	jmp	#LR__2455
18684     0F 13 02 F6 | 	mov	arg01, local01
18688     08 14 06 F6 | 	mov	arg02, #8
1868c     AC FE BF FD | 	call	#__system____builtin_atoi
18690     FD 22 02 F6 | 	mov	local03, result1
18694                 | LR__2455
18694                 | LR__2456
18694                 | LR__2457
18694                 | LR__2458
18694     00 26 0E F2 | 	cmp	local05, #0 wz
18698     11 23 62 56 |  if_ne	neg	local03, local03
1869c     11 FB 01 F6 | 	mov	result1, local03
186a0     A7 F0 03 F6 | 	mov	ptra, fp
186a4     B2 00 A0 FD | 	call	#popregs_
186a8                 | __system____builtin_atoi_ret
186a8     2D 00 64 FD | 	ret
186ac                 | 
186ac                 | __system____builtin_atof
186ac     07 4A 05 F6 | 	mov	COUNT_, #7
186b0     A8 00 A0 FD | 	call	#pushregs_
186b4     09 1F 02 F6 | 	mov	local01, arg01
186b8     00 20 06 F6 | 	mov	local02, #0
186bc     00 22 06 F6 | 	mov	local03, #0
186c0     00 24 06 F6 | 	mov	local04, #0
186c4     00 26 06 F6 | 	mov	local05, #0
186c8     97 08 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
186cc                 | LR__2460
186cc     0F 17 C2 FA | 	rdbyte	arg03, local01
186d0     20 16 0E F2 | 	cmp	arg03, #32 wz
186d4     01 1E 06 A1 |  if_e	add	local01, #1
186d8     F0 FF 9F AD |  if_e	jmp	#LR__2460
186dc                 | LR__2461
186dc     0F 29 C2 FA | 	rdbyte	local06, local01
186e0                 | LR__2462
186e0     2B 28 0E F2 | 	cmp	local06, #43 wz
186e4     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
186e8     14 00 90 5D |  if_ne	jmp	#LR__2463
186ec     2D 28 0E F2 | 	cmp	local06, #45 wz
186f0     1F 24 E6 A4 |  if_e	bitnot	local04, #31
186f4     01 1E 06 F1 | 	add	local01, #1
186f8     0F 29 C2 FA | 	rdbyte	local06, local01
186fc     E0 FF 9F FD | 	jmp	#LR__2462
18700                 | LR__2463
18700                 | LR__2464
18700     97 08 48 FB | 	callpa	#(@LR__2466-@LR__2465)>>2,fcache_load_ptr_
18704                 | LR__2465
18704     0F 29 C2 FA | 	rdbyte	local06, local01
18708     5F 28 0E F2 | 	cmp	local06, #95 wz
1870c     01 1E 06 F1 | 	add	local01, #1
18710     F0 FF 9F AD |  if_e	jmp	#LR__2465
18714                 | LR__2466
18714     00 28 0E F2 | 	cmp	local06, #0 wz
18718     5C 00 90 AD |  if_e	jmp	#LR__2468
1871c     30 28 56 F2 | 	cmps	local06, #48 wc
18720     44 00 90 CD |  if_b	jmp	#LR__2467
18724     3A 28 56 F2 | 	cmps	local06, #58 wc
18728     3C 00 90 3D |  if_ae	jmp	#LR__2467
1872c     10 13 02 F6 | 	mov	arg01, local02
18730     00 90 20 FF 
18734     00 14 06 F6 | 	mov	arg02, ##1092616192
18738     88 F7 BF FD | 	call	#__system___float_mul
1873c     FD 20 02 F6 | 	mov	local02, result1
18740     30 28 86 F1 | 	sub	local06, #48
18744     14 13 02 F6 | 	mov	arg01, local06
18748     4C F4 BF FD | 	call	#__system___float_fromuns
1874c     FD 14 02 F6 | 	mov	arg02, result1
18750     10 13 02 F6 | 	mov	arg01, local02
18754     74 F4 BF FD | 	call	#__system___float_add
18758     FD 20 02 F6 | 	mov	local02, result1
1875c     00 26 0E F2 | 	cmp	local05, #0 wz
18760     01 22 86 51 |  if_ne	sub	local03, #1
18764     98 FF 9F FD | 	jmp	#LR__2464
18768                 | LR__2467
18768     2E 28 0E F2 | 	cmp	local06, #46 wz
1876c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
18770     01 26 06 A6 |  if_e	mov	local05, #1
18774     88 FF 9F AD |  if_e	jmp	#LR__2464
18778                 | LR__2468
18778     45 28 0E F2 | 	cmp	local06, #69 wz
1877c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
18780     18 00 90 5D |  if_ne	jmp	#LR__2469
18784     0F 13 02 F6 | 	mov	arg01, local01
18788     00 14 06 F6 | 	mov	arg02, #0
1878c     AC FD BF FD | 	call	#__system____builtin_atoi
18790     11 FB 01 F1 | 	add	result1, local03
18794     FD 2A 02 F6 | 	mov	local07, result1
18798     04 00 90 FD | 	jmp	#LR__2470
1879c                 | LR__2469
1879c     11 2B 02 F6 | 	mov	local07, local03
187a0                 | LR__2470
187a0     15 17 02 F6 | 	mov	arg03, local07
187a4     10 13 02 F6 | 	mov	arg01, local02
187a8     00 90 20 FF 
187ac     00 14 06 F6 | 	mov	arg02, ##1092616192
187b0     44 04 B0 FD | 	call	#__system___float_pow_n
187b4     12 FB 61 F5 | 	xor	result1, local04
187b8     A7 F0 03 F6 | 	mov	ptra, fp
187bc     B2 00 A0 FD | 	call	#popregs_
187c0                 | __system____builtin_atof_ret
187c0     2D 00 64 FD | 	ret
187c4                 | 
187c4                 | __system____builtin_ilogb
187c4     20 FC BF FD | 	call	#__system___float_Unpack
187c8     00 FE 0D F2 | 	cmp	result3, #0 wz
187cc     00 00 40 AF 
187d0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
187d4     24 00 90 AD |  if_e	jmp	#LR__2481
187d8     80 FC 0D F2 | 	cmp	result2, #128 wz
187dc     18 00 90 5D |  if_ne	jmp	#LR__2480
187e0     00 00 10 FF 
187e4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
187e8     1E FA CD A9 |  if_e	bmask	result1, #30
187ec     0C 00 90 AD |  if_e	jmp	#LR__2481
187f0     1F FA C5 F9 | 	decod	result1, #31
187f4     04 00 90 FD | 	jmp	#LR__2481
187f8                 | LR__2480
187f8     FE FA 01 F6 | 	mov	result1, result2
187fc                 | LR__2481
187fc                 | __system____builtin_ilogb_ret
187fc     2D 00 64 FD | 	ret
18800                 | 
18800                 | __system____builtin_sinf
18800     03 4A 05 F6 | 	mov	COUNT_, #3
18804     A8 00 A0 FD | 	call	#pushregs_
18808     09 1F 02 F6 | 	mov	local01, arg01
1880c     66 E6 1E FF 
18810     CD 14 06 F6 | 	mov	arg02, ##1036831949
18814     01 16 06 F6 | 	mov	arg03, #1
18818     DC FA BF FD | 	call	#__system___float_cmp
1881c     00 FA 55 F2 | 	cmps	result1, #0 wc
18820     5C 00 90 3D |  if_ae	jmp	#LR__2490
18824     0F 13 02 F6 | 	mov	arg01, local01
18828     66 E6 5E FF 
1882c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
18830     01 16 66 F6 | 	neg	arg03, #1
18834     C0 FA BF FD | 	call	#__system___float_cmp
18838     01 FA 55 F2 | 	cmps	result1, #1 wc
1883c     40 00 90 CD |  if_b	jmp	#LR__2490
18840     0F 13 02 F6 | 	mov	arg01, local01
18844     0F 15 02 F6 | 	mov	arg02, local01
18848     78 F6 BF FD | 	call	#__system___float_mul
1884c     FD 12 02 F6 | 	mov	arg01, result1
18850     0F 15 02 F6 | 	mov	arg02, local01
18854     6C F6 BF FD | 	call	#__system___float_mul
18858     FD 12 02 F6 | 	mov	arg01, result1
1885c     00 60 20 FF 
18860     00 14 06 F6 | 	mov	arg02, ##1086324736
18864     60 F8 BF FD | 	call	#__system___float_div
18868     FD 14 02 F6 | 	mov	arg02, result1
1886c     0F 13 02 F6 | 	mov	arg01, local01
18870     1F 14 E6 F4 | 	bitnot	arg02, #31
18874     54 F3 BF FD | 	call	#__system___float_add
18878     FD 20 02 F6 | 	mov	local02, result1
1887c     54 00 90 FD | 	jmp	#LR__2491
18880                 | LR__2490
18880     0F 13 02 F6 | 	mov	arg01, local01
18884     7C 91 26 FF 
18888     83 15 06 F6 | 	mov	arg02, ##1294137731
1888c     34 F6 BF FD | 	call	#__system___float_mul
18890     FD 12 02 F6 | 	mov	arg01, result1
18894     00 14 06 F6 | 	mov	arg02, #0
18898     F0 FA BF FD | 	call	#__system___float_tointeger
1889c     02 FA 65 F0 | 	shl	result1, #2
188a0     00 00 A0 FF 
188a4     FD 00 48 FD | 	qrotate	##1073741824, result1
188a8     19 12 62 FD | 	getqy	arg01
188ac     09 13 52 F6 | 	abs	arg01, arg01 wc
188b0     1F 22 C6 C9 |  if_b	decod	local03, #31
188b4     00 22 06 36 |  if_ae	mov	local03, #0
188b8     DC F2 BF FD | 	call	#__system___float_fromuns
188bc     11 FB 61 F5 | 	xor	result1, local03
188c0     FD 12 02 F6 | 	mov	arg01, result1
188c4     00 40 27 FF 
188c8     00 14 06 F6 | 	mov	arg02, ##1317011456
188cc     F8 F7 BF FD | 	call	#__system___float_div
188d0     FD 20 02 F6 | 	mov	local02, result1
188d4                 | LR__2491
188d4     10 FB 01 F6 | 	mov	result1, local02
188d8     A7 F0 03 F6 | 	mov	ptra, fp
188dc     B2 00 A0 FD | 	call	#popregs_
188e0                 | __system____builtin_sinf_ret
188e0     2D 00 64 FD | 	ret
188e4                 | 
188e4                 | __system____builtin_exp2f
188e4     04 4A 05 F6 | 	mov	COUNT_, #4
188e8     A8 00 A0 FD | 	call	#pushregs_
188ec     09 1F 02 F6 | 	mov	local01, arg01
188f0     00 7F 21 FF 
188f4     00 14 06 F6 | 	mov	arg02, ##1123942400
188f8     01 16 66 F6 | 	neg	arg03, #1
188fc     F8 F9 BF FD | 	call	#__system___float_cmp
18900     00 FA 55 F2 | 	cmps	result1, #0 wc
18904     00 C0 3F 3F 
18908     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1890c     DC 00 90 3D |  if_ae	jmp	#LR__2501
18910     0F 13 02 F6 | 	mov	arg01, local01
18914     00 7F 61 FF 
18918     00 14 06 F6 | 	mov	arg02, ##-1023541248
1891c     01 16 06 F6 | 	mov	arg03, #1
18920     D4 F9 BF FD | 	call	#__system___float_cmp
18924     00 FA 55 F2 | 	cmps	result1, #0 wc
18928     00 FA 05 C6 |  if_b	mov	result1, #0
1892c     BC 00 90 CD |  if_b	jmp	#LR__2501
18930     0F 13 02 F6 | 	mov	arg01, local01
18934     00 14 06 F6 | 	mov	arg02, #0
18938     50 FA BF FD | 	call	#__system___float_tointeger
1893c     FD 20 02 F6 | 	mov	local02, result1
18940     10 13 52 F6 | 	abs	arg01, local02 wc
18944     1F 22 C6 C9 |  if_b	decod	local03, #31
18948     00 22 06 36 |  if_ae	mov	local03, #0
1894c     48 F2 BF FD | 	call	#__system___float_fromuns
18950     11 FB 61 F5 | 	xor	result1, local03
18954     FD 14 02 F6 | 	mov	arg02, result1
18958     0F 13 02 F6 | 	mov	arg01, local01
1895c     1F 14 E6 F4 | 	bitnot	arg02, #31
18960     68 F2 BF FD | 	call	#__system___float_add
18964     FD 24 02 F6 | 	mov	local04, result1
18968     12 13 02 F6 | 	mov	arg01, local04
1896c     00 14 06 F6 | 	mov	arg02, #0
18970     01 16 06 F6 | 	mov	arg03, #1
18974     80 F9 BF FD | 	call	#__system___float_cmp
18978     00 FA 55 F2 | 	cmps	result1, #0 wc
1897c     18 00 90 3D |  if_ae	jmp	#LR__2500
18980     12 13 02 F6 | 	mov	arg01, local04
18984     00 C0 1F FF 
18988     00 14 06 F6 | 	mov	arg02, ##1065353216
1898c     3C F2 BF FD | 	call	#__system___float_add
18990     FD 24 02 F6 | 	mov	local04, result1
18994     01 20 86 F1 | 	sub	local02, #1
18998                 | LR__2500
18998     7F 20 06 F1 | 	add	local02, #127
1899c     17 20 66 F0 | 	shl	local02, #23
189a0     12 13 02 F6 | 	mov	arg01, local04
189a4     00 80 26 FF 
189a8     00 14 06 F6 | 	mov	arg02, ##1291845632
189ac     14 F5 BF FD | 	call	#__system___float_mul
189b0     FD 12 02 F6 | 	mov	arg01, result1
189b4     00 14 06 F6 | 	mov	arg02, #0
189b8     D0 F9 BF FD | 	call	#__system___float_tointeger
189bc     FD 24 0A F6 | 	mov	local04, result1 wz
189c0     10 FB 01 A6 |  if_e	mov	result1, local02
189c4     24 00 90 AD |  if_e	jmp	#LR__2501
189c8     3E 24 26 F4 | 	bith	local04, #62
189cc     0F 24 62 FD | 	qexp	local04
189d0     10 13 02 F6 | 	mov	arg01, local02
189d4     18 14 62 FD | 	getqx	arg02
189d8     01 14 06 F1 | 	add	arg02, #1
189dc     01 14 46 F0 | 	shr	arg02, #1
189e0     00 80 1F FF 
189e4     00 14 06 F1 | 	add	arg02, ##1056964608
189e8     D8 F4 BF FD | 	call	#__system___float_mul
189ec                 | LR__2501
189ec     A7 F0 03 F6 | 	mov	ptra, fp
189f0     B2 00 A0 FD | 	call	#popregs_
189f4                 | __system____builtin_exp2f_ret
189f4     2D 00 64 FD | 	ret
189f8                 | 
189f8                 | __system____builtin_log2f
189f8     06 4A 05 F6 | 	mov	COUNT_, #6
189fc     A8 00 A0 FD | 	call	#pushregs_
18a00     09 1F 02 F6 | 	mov	local01, arg01
18a04     09 21 0A F6 | 	mov	local02, arg01 wz
18a08     00 00 40 5F 
18a0c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
18a10     00 40 00 AF 
18a14     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18a18     08 01 90 AD |  if_e	jmp	#LR__2514
18a1c     00 20 56 F2 | 	cmps	local02, #0 wc
18a20     00 E0 3F CF 
18a24     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18a28     F8 00 90 CD |  if_b	jmp	#LR__2514
18a2c     0F 13 02 F6 | 	mov	arg01, local01
18a30     00 90 20 FF 
18a34     00 14 06 F6 | 	mov	arg02, ##1092616192
18a38     01 16 06 F6 | 	mov	arg03, #1
18a3c     B8 F8 BF FD | 	call	#__system___float_cmp
18a40     00 FA 0D F2 | 	cmp	result1, #0 wz
18a44     4D 2A 20 AF 
18a48     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
18a4c     D4 00 90 AD |  if_e	jmp	#LR__2514
18a50     0F 13 02 F6 | 	mov	arg01, local01
18a54     FC 16 20 FF 
18a58     54 14 06 F6 | 	mov	arg02, ##1076754516
18a5c     01 16 06 F6 | 	mov	arg03, #1
18a60     94 F8 BF FD | 	call	#__system___float_cmp
18a64     00 FA 0D F2 | 	cmp	result1, #0 wz
18a68     55 DC 1F AF 
18a6c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
18a70     B0 00 90 AD |  if_e	jmp	#LR__2514
18a74     10 23 02 F6 | 	mov	local03, local02
18a78     17 22 46 F0 | 	shr	local03, #23
18a7c     11 23 E2 F8 | 	getbyte	local03, local03, #0
18a80     17 21 06 F4 | 	bitl	local02, #279
18a84     10 25 02 F6 | 	mov	local04, local02
18a88     FF 22 0E F2 | 	cmp	local03, #255 wz
18a8c     1C 00 90 5D |  if_ne	jmp	#LR__2510
18a90     00 24 0E F2 | 	cmp	local04, #0 wz
18a94     00 C0 3F 5F 
18a98     00 26 06 56 |  if_ne	mov	local05, ##2139095040
18a9c     00 E0 3F AF 
18aa0     00 26 06 A6 |  if_e	mov	local05, ##2143289344
18aa4     13 FB 01 F6 | 	mov	result1, local05
18aa8     78 00 90 FD | 	jmp	#LR__2514
18aac                 | LR__2510
18aac     00 22 0E F2 | 	cmp	local03, #0 wz
18ab0     17 24 26 54 |  if_ne	bith	local04, #23
18ab4     7F 22 86 51 |  if_ne	sub	local03, #127
18ab8     28 00 90 5D |  if_ne	jmp	#LR__2513
18abc     00 24 0E F2 | 	cmp	local04, #0 wz
18ac0     00 40 00 AF 
18ac4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18ac8     58 00 90 AD |  if_e	jmp	#LR__2514
18acc     7E 22 66 F6 | 	neg	local03, #126
18ad0     97 08 48 FB | 	callpa	#(@LR__2512-@LR__2511)>>2,fcache_load_ptr_
18ad4                 | LR__2511
18ad4     17 24 2E F4 | 	testbn	local04, #23 wz
18ad8     01 24 66 A0 |  if_e	shl	local04, #1
18adc     01 22 06 A1 |  if_e	add	local03, #1
18ae0     F0 FF 9F AD |  if_e	jmp	#LR__2511
18ae4                 | LR__2512
18ae4                 | LR__2513
18ae4     0E 24 62 FD | 	qlog	local04
18ae8     01 22 86 F1 | 	sub	local03, #1
18aec     11 13 52 F6 | 	abs	arg01, local03 wc
18af0     1F 28 C6 C9 |  if_b	decod	local06, #31
18af4     00 28 06 36 |  if_ae	mov	local06, #0
18af8     18 26 62 FD | 	getqx	local05
18afc     9B 26 06 F4 | 	bitl	local05, #155
18b00     08 26 06 F1 | 	add	local05, #8
18b04     04 26 46 F0 | 	shr	local05, #4
18b08     00 C0 1F FF 
18b0c     00 26 06 F1 | 	add	local05, ##1065353216
18b10     84 F0 BF FD | 	call	#__system___float_fromuns
18b14     14 FB 61 F5 | 	xor	result1, local06
18b18     FD 14 02 F6 | 	mov	arg02, result1
18b1c     13 13 02 F6 | 	mov	arg01, local05
18b20     A8 F0 BF FD | 	call	#__system___float_add
18b24                 | LR__2514
18b24     A7 F0 03 F6 | 	mov	ptra, fp
18b28     B2 00 A0 FD | 	call	#popregs_
18b2c                 | __system____builtin_log2f_ret
18b2c     2D 00 64 FD | 	ret
18b30                 | 
18b30                 | __system____builtin_powf
18b30     04 4A 05 F6 | 	mov	COUNT_, #4
18b34     A8 00 A0 FD | 	call	#pushregs_
18b38     09 1F 02 F6 | 	mov	local01, arg01
18b3c     0A 21 02 F6 | 	mov	local02, arg02
18b40     10 13 02 F6 | 	mov	arg01, local02
18b44     00 14 06 F6 | 	mov	arg02, #0
18b48     40 F8 BF FD | 	call	#__system___float_tointeger
18b4c     FD 22 02 F6 | 	mov	local03, result1
18b50     11 13 52 F6 | 	abs	arg01, local03 wc
18b54     1F 24 C6 C9 |  if_b	decod	local04, #31
18b58     00 24 06 36 |  if_ae	mov	local04, #0
18b5c     38 F0 BF FD | 	call	#__system___float_fromuns
18b60     12 FB 61 F5 | 	xor	result1, local04
18b64     FD 12 02 F6 | 	mov	arg01, result1
18b68     10 15 02 F6 | 	mov	arg02, local02
18b6c     01 16 06 F6 | 	mov	arg03, #1
18b70     84 F7 BF FD | 	call	#__system___float_cmp
18b74     00 FA 0D F2 | 	cmp	result1, #0 wz
18b78     18 00 90 5D |  if_ne	jmp	#LR__2520
18b7c     00 C0 1F FF 
18b80     00 12 06 F6 | 	mov	arg01, ##1065353216
18b84     0F 15 02 F6 | 	mov	arg02, local01
18b88     11 17 02 F6 | 	mov	arg03, local03
18b8c     68 00 B0 FD | 	call	#__system___float_pow_n
18b90     58 00 90 FD | 	jmp	#LR__2521
18b94                 | LR__2520
18b94     0F 13 02 F6 | 	mov	arg01, local01
18b98     00 14 06 F6 | 	mov	arg02, #0
18b9c     01 16 06 F6 | 	mov	arg03, #1
18ba0     54 F7 BF FD | 	call	#__system___float_cmp
18ba4     00 FA 55 F2 | 	cmps	result1, #0 wc
18ba8     00 E0 3F CF 
18bac     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18bb0     38 00 90 CD |  if_b	jmp	#LR__2521
18bb4     0F 13 02 F6 | 	mov	arg01, local01
18bb8     00 14 06 F6 | 	mov	arg02, #0
18bbc     01 16 06 F6 | 	mov	arg03, #1
18bc0     34 F7 BF FD | 	call	#__system___float_cmp
18bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
18bc8     00 FA 05 A6 |  if_e	mov	result1, #0
18bcc     1C 00 90 AD |  if_e	jmp	#LR__2521
18bd0     0F 13 02 F6 | 	mov	arg01, local01
18bd4     20 FE BF FD | 	call	#__system____builtin_log2f
18bd8     FD 12 02 F6 | 	mov	arg01, result1
18bdc     10 15 02 F6 | 	mov	arg02, local02
18be0     E0 F2 BF FD | 	call	#__system___float_mul
18be4     FD 12 02 F6 | 	mov	arg01, result1
18be8     F8 FC BF FD | 	call	#__system____builtin_exp2f
18bec                 | LR__2521
18bec     A7 F0 03 F6 | 	mov	ptra, fp
18bf0     B2 00 A0 FD | 	call	#popregs_
18bf4                 | __system____builtin_powf_ret
18bf4     2D 00 64 FD | 	ret
18bf8                 | 
18bf8                 | __system___float_pow_n
18bf8     05 4A 05 F6 | 	mov	COUNT_, #5
18bfc     A8 00 A0 FD | 	call	#pushregs_
18c00     09 1F 02 F6 | 	mov	local01, arg01
18c04     0A 21 02 F6 | 	mov	local02, arg02
18c08     0B 23 02 F6 | 	mov	local03, arg03
18c0c     00 22 56 F2 | 	cmps	local03, #0 wc
18c10     18 00 90 3D |  if_ae	jmp	#LR__2530
18c14     01 24 06 F6 | 	mov	local04, #1
18c18     11 23 62 F6 | 	neg	local03, local03
18c1c     00 22 56 F2 | 	cmps	local03, #0 wc
18c20     00 FA 05 C6 |  if_b	mov	result1, #0
18c24     94 00 90 CD |  if_b	jmp	#LR__2538
18c28     04 00 90 FD | 	jmp	#LR__2531
18c2c                 | LR__2530
18c2c     00 24 06 F6 | 	mov	local04, #0
18c30                 | LR__2531
18c30     00 C0 1F FF 
18c34     00 26 06 F6 | 	mov	local05, ##1065353216
18c38                 | LR__2532
18c38     01 22 56 F2 | 	cmps	local03, #1 wc
18c3c     30 00 90 CD |  if_b	jmp	#LR__2534
18c40     01 22 CE F7 | 	test	local03, #1 wz
18c44     10 00 90 AD |  if_e	jmp	#LR__2533
18c48     13 13 02 F6 | 	mov	arg01, local05
18c4c     10 15 02 F6 | 	mov	arg02, local02
18c50     70 F2 BF FD | 	call	#__system___float_mul
18c54     FD 26 02 F6 | 	mov	local05, result1
18c58                 | LR__2533
18c58     01 22 C6 F0 | 	sar	local03, #1
18c5c     10 13 02 F6 | 	mov	arg01, local02
18c60     10 15 02 F6 | 	mov	arg02, local02
18c64     5C F2 BF FD | 	call	#__system___float_mul
18c68     FD 20 02 F6 | 	mov	local02, result1
18c6c     C8 FF 9F FD | 	jmp	#LR__2532
18c70                 | LR__2534
18c70     00 24 0E F2 | 	cmp	local04, #0 wz
18c74     14 00 90 AD |  if_e	jmp	#LR__2535
18c78     0F 13 02 F6 | 	mov	arg01, local01
18c7c     13 15 02 F6 | 	mov	arg02, local05
18c80     44 F4 BF FD | 	call	#__system___float_div
18c84     FD 26 02 F6 | 	mov	local05, result1
18c88     2C 00 90 FD | 	jmp	#LR__2537
18c8c                 | LR__2535
18c8c     0F 13 02 F6 | 	mov	arg01, local01
18c90     00 C0 1F FF 
18c94     00 14 06 F6 | 	mov	arg02, ##1065353216
18c98     01 16 06 F6 | 	mov	arg03, #1
18c9c     58 F6 BF FD | 	call	#__system___float_cmp
18ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
18ca4     10 00 90 AD |  if_e	jmp	#LR__2536
18ca8     0F 13 02 F6 | 	mov	arg01, local01
18cac     13 15 02 F6 | 	mov	arg02, local05
18cb0     10 F2 BF FD | 	call	#__system___float_mul
18cb4     FD 26 02 F6 | 	mov	local05, result1
18cb8                 | LR__2536
18cb8                 | LR__2537
18cb8     13 FB 01 F6 | 	mov	result1, local05
18cbc                 | LR__2538
18cbc     A7 F0 03 F6 | 	mov	ptra, fp
18cc0     B2 00 A0 FD | 	call	#popregs_
18cc4                 | __system___float_pow_n_ret
18cc4     2D 00 64 FD | 	ret
18cc8                 | 
18cc8                 | __system___gc_ptrs
18cc8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
18ccc     00 03 02 F6 | 	mov	_var02, _var01
18cd0     F3 01 00 FF 
18cd4     F8 03 06 F1 | 	add	_var02, ##255992
18cd8     00 FD 09 FB | 	rdlong	result2, _var01 wz
18cdc     74 00 90 5D |  if_ne	jmp	#LR__2540
18ce0     01 FD 01 F6 | 	mov	result2, _var02
18ce4     00 FD 81 F1 | 	sub	result2, _var01
18ce8     00 03 58 FC | 	wrword	#1, _var01
18cec     00 FB 01 F6 | 	mov	result1, _var01
18cf0     02 FA 05 F1 | 	add	result1, #2
18cf4     36 00 80 FF 
18cf8     FD 20 59 FC | 	wrword	##27792, result1
18cfc     00 FB 01 F6 | 	mov	result1, _var01
18d00     04 FA 05 F1 | 	add	result1, #4
18d04     FD 00 58 FC | 	wrword	#0, result1
18d08     00 FB 01 F6 | 	mov	result1, _var01
18d0c     06 FA 05 F1 | 	add	result1, #6
18d10     FD 02 58 FC | 	wrword	#1, result1
18d14     10 00 06 F1 | 	add	_var01, #16
18d18     FE FC 51 F6 | 	abs	result2, result2 wc
18d1c     04 FC 45 F0 | 	shr	result2, #4
18d20     FE FC 81 F6 | 	negc	result2, result2
18d24     00 FD 51 FC | 	wrword	result2, _var01
18d28     00 FD 01 F6 | 	mov	result2, _var01
18d2c     02 FC 05 F1 | 	add	result2, #2
18d30     36 00 80 FF 
18d34     FE 1E 59 FC | 	wrword	##27791, result2
18d38     00 FD 01 F6 | 	mov	result2, _var01
18d3c     04 FC 05 F1 | 	add	result2, #4
18d40     FE 00 58 FC | 	wrword	#0, result2
18d44     00 FD 01 F6 | 	mov	result2, _var01
18d48     06 FC 05 F1 | 	add	result2, #6
18d4c     FE 00 58 FC | 	wrword	#0, result2
18d50     10 00 86 F1 | 	sub	_var01, #16
18d54                 | LR__2540
18d54     00 FB 01 F6 | 	mov	result1, _var01
18d58     01 FD 01 F6 | 	mov	result2, _var02
18d5c                 | __system___gc_ptrs_ret
18d5c     2D 00 64 FD | 	ret
18d60                 | 
18d60                 | __system___gc_tryalloc
18d60     0B 4A 05 F6 | 	mov	COUNT_, #11
18d64     A8 00 A0 FD | 	call	#pushregs_
18d68     09 1F 02 F6 | 	mov	local01, arg01
18d6c     0A 21 02 F6 | 	mov	local02, arg02
18d70     54 FF BF FD | 	call	#__system___gc_ptrs
18d74     FD 22 02 F6 | 	mov	local03, result1
18d78     FE 24 02 F6 | 	mov	local04, result2
18d7c     11 27 02 F6 | 	mov	local05, local03
18d80     00 28 06 F6 | 	mov	local06, #0
18d84     97 1E 48 FB | 	callpa	#(@LR__2551-@LR__2550)>>2,fcache_load_ptr_
18d88                 | LR__2550
18d88     13 2B 02 F6 | 	mov	local07, local05
18d8c     06 26 06 F1 | 	add	local05, #6
18d90     13 15 EA FA | 	rdword	arg02, local05 wz
18d94     11 13 02 F6 | 	mov	arg01, local03
18d98     00 FA 05 A6 |  if_e	mov	result1, #0
18d9c     04 14 66 50 |  if_ne	shl	arg02, #4
18da0     0A 13 02 51 |  if_ne	add	arg01, arg02
18da4     09 FB 01 56 |  if_ne	mov	result1, arg01
18da8     FD 26 0A F6 | 	mov	local05, result1 wz
18dac     13 29 E2 5A |  if_ne	rdword	local06, local05
18db0     00 26 0E F2 | 	cmp	local05, #0 wz
18db4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
18db8     08 00 90 1D |  if_a	jmp	#LR__2552
18dbc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
18dc0     C4 FF 9F 1D |  if_a	jmp	#LR__2550
18dc4                 | LR__2551
18dc4                 | LR__2552
18dc4     00 26 0E F2 | 	cmp	local05, #0 wz
18dc8     13 FB 01 A6 |  if_e	mov	result1, local05
18dcc     3C 01 90 AD |  if_e	jmp	#LR__2555
18dd0     13 FD 01 F6 | 	mov	result2, local05
18dd4     06 FC 05 F1 | 	add	result2, #6
18dd8     FE 2C E2 FA | 	rdword	local08, result2
18ddc     14 1F 52 F2 | 	cmps	local01, local06 wc
18de0     C0 00 90 3D |  if_ae	jmp	#LR__2554
18de4     13 1F 52 FC | 	wrword	local01, local05
18de8     13 13 02 F6 | 	mov	arg01, local05
18dec     0F 2D 02 F6 | 	mov	local08, local01
18df0     04 2C 66 F0 | 	shl	local08, #4
18df4     16 13 02 F1 | 	add	arg01, local08
18df8     0F 29 82 F1 | 	sub	local06, local01
18dfc     09 29 52 FC | 	wrword	local06, arg01
18e00     09 2D 02 F6 | 	mov	local08, arg01
18e04     02 2C 06 F1 | 	add	local08, #2
18e08     36 00 80 FF 
18e0c     16 1F 59 FC | 	wrword	##27791, local08
18e10     13 15 0A F6 | 	mov	arg02, local05 wz
18e14     00 FA 05 A6 |  if_e	mov	result1, #0
18e18     11 15 82 51 |  if_ne	sub	arg02, local03
18e1c     04 14 46 50 |  if_ne	shr	arg02, #4
18e20     0A FB 01 56 |  if_ne	mov	result1, arg02
18e24     09 2D 02 F6 | 	mov	local08, arg01
18e28     04 2C 06 F1 | 	add	local08, #4
18e2c     16 FB 51 FC | 	wrword	result1, local08
18e30     13 2D 02 F6 | 	mov	local08, local05
18e34     06 2C 06 F1 | 	add	local08, #6
18e38     09 15 02 F6 | 	mov	arg02, arg01
18e3c     16 2D E2 FA | 	rdword	local08, local08
18e40     06 14 06 F1 | 	add	arg02, #6
18e44     0A 2D 52 FC | 	wrword	local08, arg02
18e48     09 2F 02 F6 | 	mov	local09, arg01
18e4c     17 15 0A F6 | 	mov	arg02, local09 wz
18e50     00 FA 05 A6 |  if_e	mov	result1, #0
18e54     11 15 82 51 |  if_ne	sub	arg02, local03
18e58     04 14 46 50 |  if_ne	shr	arg02, #4
18e5c     0A FB 01 56 |  if_ne	mov	result1, arg02
18e60     FD 2C 02 F6 | 	mov	local08, result1
18e64     09 31 EA FA | 	rdword	local10, arg01 wz
18e68     00 FA 05 A6 |  if_e	mov	result1, #0
18e6c     04 30 66 50 |  if_ne	shl	local10, #4
18e70     18 13 02 51 |  if_ne	add	arg01, local10
18e74     09 FB 01 56 |  if_ne	mov	result1, arg01
18e78     FD 32 0A F6 | 	mov	local11, result1 wz
18e7c     24 00 90 AD |  if_e	jmp	#LR__2553
18e80     12 33 52 F2 | 	cmps	local11, local04 wc
18e84     1C 00 90 3D |  if_ae	jmp	#LR__2553
18e88     17 15 0A F6 | 	mov	arg02, local09 wz
18e8c     00 FA 05 A6 |  if_e	mov	result1, #0
18e90     11 15 82 51 |  if_ne	sub	arg02, local03
18e94     04 14 46 50 |  if_ne	shr	arg02, #4
18e98     0A FB 01 56 |  if_ne	mov	result1, arg02
18e9c     04 32 06 F1 | 	add	local11, #4
18ea0     19 FB 51 FC | 	wrword	result1, local11
18ea4                 | LR__2553
18ea4                 | LR__2554
18ea4     06 2A 06 F1 | 	add	local07, #6
18ea8     15 2D 52 FC | 	wrword	local08, local07
18eac     36 00 00 FF 
18eb0     80 2E 06 F6 | 	mov	local09, ##27776
18eb4     10 2F 42 F5 | 	or	local09, local02
18eb8     00 FA 05 F6 | 	mov	result1, #0
18ebc     01 FA 61 FD | 	cogid	result1
18ec0     FD 2E 42 F5 | 	or	local09, result1
18ec4     13 33 02 F6 | 	mov	local11, local05
18ec8     02 32 06 F1 | 	add	local11, #2
18ecc     19 2F 52 FC | 	wrword	local09, local11
18ed0     11 2F 02 F6 | 	mov	local09, local03
18ed4     08 2E 06 F1 | 	add	local09, #8
18ed8     13 33 02 F6 | 	mov	local11, local05
18edc     17 2F E2 FA | 	rdword	local09, local09
18ee0     06 32 06 F1 | 	add	local11, #6
18ee4     19 2F 52 FC | 	wrword	local09, local11
18ee8     13 15 0A F6 | 	mov	arg02, local05 wz
18eec     00 FA 05 A6 |  if_e	mov	result1, #0
18ef0     11 15 82 51 |  if_ne	sub	arg02, local03
18ef4     04 14 46 50 |  if_ne	shr	arg02, #4
18ef8     0A FB 01 56 |  if_ne	mov	result1, arg02
18efc     08 22 06 F1 | 	add	local03, #8
18f00     11 FB 51 FC | 	wrword	result1, local03
18f04     08 26 06 F1 | 	add	local05, #8
18f08     13 FB 01 F6 | 	mov	result1, local05
18f0c                 | LR__2555
18f0c     A7 F0 03 F6 | 	mov	ptra, fp
18f10     B2 00 A0 FD | 	call	#popregs_
18f14                 | __system___gc_tryalloc_ret
18f14     2D 00 64 FD | 	ret
18f18                 | 
18f18                 | __system___gc_alloc_managed
18f18     01 4A 05 F6 | 	mov	COUNT_, #1
18f1c     A8 00 A0 FD | 	call	#pushregs_
18f20     09 1F 02 F6 | 	mov	local01, arg01
18f24     00 14 06 F6 | 	mov	arg02, #0
18f28     1C 00 B0 FD | 	call	#__system___gc_doalloc
18f2c     FD 14 0A F6 | 	mov	arg02, result1 wz
18f30     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
18f34     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
18f38     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
18f3c     A7 F0 03 F6 | 	mov	ptra, fp
18f40     B2 00 A0 FD | 	call	#popregs_
18f44                 | __system___gc_alloc_managed_ret
18f44     2D 00 64 FD | 	ret
18f48                 | 
18f48                 | __system___gc_doalloc
18f48     06 4A 05 F6 | 	mov	COUNT_, #6
18f4c     A8 00 A0 FD | 	call	#pushregs_
18f50     09 1F 0A F6 | 	mov	local01, arg01 wz
18f54     0A 21 02 F6 | 	mov	local02, arg02
18f58     00 FA 05 A6 |  if_e	mov	result1, #0
18f5c     8C 00 90 AD |  if_e	jmp	#LR__2567
18f60     17 1E 06 F1 | 	add	local01, #23
18f64     0F 1E 26 F5 | 	andn	local01, #15
18f68     04 1E 46 F0 | 	shr	local01, #4
18f6c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18f70     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18f74     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18f78     34 C5 BF FD | 	call	#__system___lockmem
18f7c     0F 13 02 F6 | 	mov	arg01, local01
18f80     10 15 02 F6 | 	mov	arg02, local02
18f84     D8 FD BF FD | 	call	#__system___gc_tryalloc
18f88     FD 22 0A F6 | 	mov	local03, result1 wz
18f8c     14 00 90 5D |  if_ne	jmp	#LR__2560
18f90     70 03 B0 FD | 	call	#__system___gc_docollect
18f94     0F 13 02 F6 | 	mov	arg01, local01
18f98     10 15 02 F6 | 	mov	arg02, local02
18f9c     C0 FD BF FD | 	call	#__system___gc_tryalloc
18fa0     FD 22 02 F6 | 	mov	local03, result1
18fa4                 | LR__2560
18fa4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18fa8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18fac     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18fb0     09 01 68 FC | 	wrlong	#0, arg01
18fb4     00 22 0E F2 | 	cmp	local03, #0 wz
18fb8     2C 00 90 AD |  if_e	jmp	#LR__2566
18fbc     04 1E 66 F0 | 	shl	local01, #4
18fc0     08 1E 86 F1 | 	sub	local01, #8
18fc4     0F 25 52 F6 | 	abs	local04, local01 wc
18fc8     02 24 46 F0 | 	shr	local04, #2
18fcc     12 27 8A F6 | 	negc	local05, local04 wz
18fd0     11 29 02 F6 | 	mov	local06, local03
18fd4     10 00 90 AD |  if_e	jmp	#LR__2565
18fd8     97 06 48 FB | 	callpa	#(@LR__2563-@LR__2561)>>2,fcache_load_ptr_
18fdc                 | LR__2561
18fdc     13 05 D8 FC | 	rep	@LR__2564, local05
18fe0                 | LR__2562
18fe0     14 01 68 FC | 	wrlong	#0, local06
18fe4     04 28 06 F1 | 	add	local06, #4
18fe8                 | LR__2563
18fe8                 | LR__2564
18fe8                 | LR__2565
18fe8                 | LR__2566
18fe8     11 FB 01 F6 | 	mov	result1, local03
18fec                 | LR__2567
18fec     A7 F0 03 F6 | 	mov	ptra, fp
18ff0     B2 00 A0 FD | 	call	#popregs_
18ff4                 | __system___gc_doalloc_ret
18ff4     2D 00 64 FD | 	ret
18ff8                 | 
18ff8                 | __system___gc_isvalidptr
18ff8     F8 16 06 F4 | 	bitl	arg03, #248
18ffc     08 16 86 F1 | 	sub	arg03, #8
19000     09 17 52 F2 | 	cmps	arg03, arg01 wc
19004     08 00 90 CD |  if_b	jmp	#LR__2570
19008     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1900c     08 00 90 CD |  if_b	jmp	#LR__2571
19010                 | LR__2570
19010     00 FA 05 F6 | 	mov	result1, #0
19014     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
19018                 | LR__2571
19018     0B 01 02 F6 | 	mov	_var01, arg03
1901c     09 01 62 F5 | 	xor	_var01, arg01
19020     0F 00 CE F7 | 	test	_var01, #15 wz
19024     00 FA 05 56 |  if_ne	mov	result1, #0
19028     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1902c     0B 01 02 F6 | 	mov	_var01, arg03
19030     02 00 06 F1 | 	add	_var01, #2
19034     00 01 E2 FA | 	rdword	_var01, _var01
19038     7F 00 00 FF 
1903c     C0 01 06 F5 | 	and	_var01, ##65472
19040     36 00 00 FF 
19044     80 00 0E F2 | 	cmp	_var01, ##27776 wz
19048     00 FA 05 56 |  if_ne	mov	result1, #0
1904c     0B FB 01 A6 |  if_e	mov	result1, arg03
19050                 | __system___gc_isvalidptr_ret
19050     2D 00 64 FD | 	ret
19054                 | 
19054                 | __system___gc_free
19054     09 17 02 F6 | 	mov	arg03, arg01
19058     6C FC BF FD | 	call	#__system___gc_ptrs
1905c     FD 12 02 F6 | 	mov	arg01, result1
19060     FE 14 02 F6 | 	mov	arg02, result2
19064     90 FF BF FD | 	call	#__system___gc_isvalidptr
19068     FD 14 0A F6 | 	mov	arg02, result1 wz
1906c     28 00 90 AD |  if_e	jmp	#LR__2580
19070     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19074     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19078     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1907c     30 C4 BF FD | 	call	#__system___lockmem
19080     0A 13 02 F6 | 	mov	arg01, arg02
19084     14 00 B0 FD | 	call	#__system___gc_dofree
19088     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1908c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19090     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19094     09 01 68 FC | 	wrlong	#0, arg01
19098                 | LR__2580
19098                 | __system___gc_free_ret
19098     2D 00 64 FD | 	ret
1909c                 | 
1909c                 | __system___gc_dofree
1909c     06 4A 05 F6 | 	mov	COUNT_, #6
190a0     A8 00 A0 FD | 	call	#pushregs_
190a4     09 1F 02 F6 | 	mov	local01, arg01
190a8     1C FC BF FD | 	call	#__system___gc_ptrs
190ac     FD 20 02 F6 | 	mov	local02, result1
190b0     FE 22 02 F6 | 	mov	local03, result2
190b4     0F 15 02 F6 | 	mov	arg02, local01
190b8     02 14 06 F1 | 	add	arg02, #2
190bc     36 00 80 FF 
190c0     0A 1F 59 FC | 	wrword	##27791, arg02
190c4     0F 25 02 F6 | 	mov	local04, local01
190c8     0F 13 02 F6 | 	mov	arg01, local01
190cc     09 27 EA FA | 	rdword	local05, arg01 wz
190d0     00 FA 05 A6 |  if_e	mov	result1, #0
190d4     04 26 66 50 |  if_ne	shl	local05, #4
190d8     13 13 02 51 |  if_ne	add	arg01, local05
190dc     09 FB 01 56 |  if_ne	mov	result1, arg01
190e0     FD 28 02 F6 | 	mov	local06, result1
190e4     97 24 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
190e8                 | LR__2590
190e8     04 24 06 F1 | 	add	local04, #4
190ec     12 15 EA FA | 	rdword	arg02, local04 wz
190f0     10 13 02 F6 | 	mov	arg01, local02
190f4     00 FA 05 A6 |  if_e	mov	result1, #0
190f8     04 14 66 50 |  if_ne	shl	arg02, #4
190fc     0A 13 02 51 |  if_ne	add	arg01, arg02
19100     09 FB 01 56 |  if_ne	mov	result1, arg01
19104     FD 24 0A F6 | 	mov	local04, result1 wz
19108     24 00 90 AD |  if_e	jmp	#LR__2592
1910c     12 13 02 F6 | 	mov	arg01, local04
19110     00 FA 05 F6 | 	mov	result1, #0
19114     02 12 06 F1 | 	add	arg01, #2
19118     09 13 E2 FA | 	rdword	arg01, arg01
1911c     36 00 00 FF 
19120     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19124     01 FA 65 A6 |  if_e	neg	result1, #1
19128     00 FA 0D F2 | 	cmp	result1, #0 wz
1912c     B8 FF 9F AD |  if_e	jmp	#LR__2590
19130                 | LR__2591
19130                 | LR__2592
19130     00 24 0E F2 | 	cmp	local04, #0 wz
19134     10 25 02 A6 |  if_e	mov	local04, local02
19138     12 15 02 F6 | 	mov	arg02, local04
1913c     06 14 06 F1 | 	add	arg02, #6
19140     0F 13 02 F6 | 	mov	arg01, local01
19144     0A 15 E2 FA | 	rdword	arg02, arg02
19148     06 12 06 F1 | 	add	arg01, #6
1914c     09 15 52 FC | 	wrword	arg02, arg01
19150     0F 15 0A F6 | 	mov	arg02, local01 wz
19154     00 FA 05 A6 |  if_e	mov	result1, #0
19158     10 15 82 51 |  if_ne	sub	arg02, local02
1915c     04 14 46 50 |  if_ne	shr	arg02, #4
19160     0A FB 01 56 |  if_ne	mov	result1, arg02
19164     12 15 02 F6 | 	mov	arg02, local04
19168     06 14 06 F1 | 	add	arg02, #6
1916c     0A FB 51 FC | 	wrword	result1, arg02
19170     10 25 0A F2 | 	cmp	local04, local02 wz
19174     A4 00 90 AD |  if_e	jmp	#LR__2595
19178     12 13 02 F6 | 	mov	arg01, local04
1917c     09 27 EA FA | 	rdword	local05, arg01 wz
19180     00 FA 05 A6 |  if_e	mov	result1, #0
19184     04 26 66 50 |  if_ne	shl	local05, #4
19188     13 13 02 51 |  if_ne	add	arg01, local05
1918c     09 FB 01 56 |  if_ne	mov	result1, arg01
19190     0F FB 09 F2 | 	cmp	result1, local01 wz
19194     84 00 90 5D |  if_ne	jmp	#LR__2594
19198     12 29 E2 FA | 	rdword	local06, local04
1919c     0F 15 E2 FA | 	rdword	arg02, local01
191a0     0A 29 02 F1 | 	add	local06, arg02
191a4     12 29 52 FC | 	wrword	local06, local04
191a8     0F 29 02 F6 | 	mov	local06, local01
191ac     02 28 06 F1 | 	add	local06, #2
191b0     14 01 58 FC | 	wrword	#0, local06
191b4     0F 13 02 F6 | 	mov	arg01, local01
191b8     09 27 EA FA | 	rdword	local05, arg01 wz
191bc     00 FA 05 A6 |  if_e	mov	result1, #0
191c0     04 26 66 50 |  if_ne	shl	local05, #4
191c4     13 13 02 51 |  if_ne	add	arg01, local05
191c8     09 FB 01 56 |  if_ne	mov	result1, arg01
191cc     FD 28 02 F6 | 	mov	local06, result1
191d0     11 29 52 F2 | 	cmps	local06, local03 wc
191d4     20 00 90 3D |  if_ae	jmp	#LR__2593
191d8     12 15 0A F6 | 	mov	arg02, local04 wz
191dc     00 FA 05 A6 |  if_e	mov	result1, #0
191e0     10 15 82 51 |  if_ne	sub	arg02, local02
191e4     04 14 46 50 |  if_ne	shr	arg02, #4
191e8     0A FB 01 56 |  if_ne	mov	result1, arg02
191ec     14 15 02 F6 | 	mov	arg02, local06
191f0     04 14 06 F1 | 	add	arg02, #4
191f4     0A FB 51 FC | 	wrword	result1, arg02
191f8                 | LR__2593
191f8     0F 15 02 F6 | 	mov	arg02, local01
191fc     06 14 06 F1 | 	add	arg02, #6
19200     12 FD 01 F6 | 	mov	result2, local04
19204     0A 15 E2 FA | 	rdword	arg02, arg02
19208     06 FC 05 F1 | 	add	result2, #6
1920c     FE 14 52 FC | 	wrword	arg02, result2
19210     06 1E 06 F1 | 	add	local01, #6
19214     0F 01 58 FC | 	wrword	#0, local01
19218     12 1F 02 F6 | 	mov	local01, local04
1921c                 | LR__2594
1921c                 | LR__2595
1921c     0F 13 02 F6 | 	mov	arg01, local01
19220     09 27 EA FA | 	rdword	local05, arg01 wz
19224     00 FA 05 A6 |  if_e	mov	result1, #0
19228     04 26 66 50 |  if_ne	shl	local05, #4
1922c     13 13 02 51 |  if_ne	add	arg01, local05
19230     09 FB 01 56 |  if_ne	mov	result1, arg01
19234     FD 14 0A F6 | 	mov	arg02, result1 wz
19238     B8 00 90 AD |  if_e	jmp	#LR__2597
1923c     11 15 52 F2 | 	cmps	arg02, local03 wc
19240     B0 00 90 3D |  if_ae	jmp	#LR__2597
19244     0A 13 02 F6 | 	mov	arg01, arg02
19248     00 FA 05 F6 | 	mov	result1, #0
1924c     02 12 06 F1 | 	add	arg01, #2
19250     09 13 E2 FA | 	rdword	arg01, arg01
19254     36 00 00 FF 
19258     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1925c     01 FA 65 A6 |  if_e	neg	result1, #1
19260     00 FA 0D F2 | 	cmp	result1, #0 wz
19264     8C 00 90 AD |  if_e	jmp	#LR__2597
19268     0F 25 02 F6 | 	mov	local04, local01
1926c     12 29 E2 FA | 	rdword	local06, local04
19270     0A 13 02 F6 | 	mov	arg01, arg02
19274     09 1F E2 FA | 	rdword	local01, arg01
19278     0F 29 02 F1 | 	add	local06, local01
1927c     12 29 52 FC | 	wrword	local06, local04
19280     09 29 02 F6 | 	mov	local06, arg01
19284     06 28 06 F1 | 	add	local06, #6
19288     12 1F 02 F6 | 	mov	local01, local04
1928c     14 29 E2 FA | 	rdword	local06, local06
19290     06 1E 06 F1 | 	add	local01, #6
19294     0F 29 52 FC | 	wrword	local06, local01
19298     09 29 02 F6 | 	mov	local06, arg01
1929c     02 28 06 F1 | 	add	local06, #2
192a0     14 55 59 FC | 	wrword	#170, local06
192a4     09 29 02 F6 | 	mov	local06, arg01
192a8     06 28 06 F1 | 	add	local06, #6
192ac     14 01 58 FC | 	wrword	#0, local06
192b0     09 27 EA FA | 	rdword	local05, arg01 wz
192b4     00 FA 05 A6 |  if_e	mov	result1, #0
192b8     04 26 66 50 |  if_ne	shl	local05, #4
192bc     13 13 02 51 |  if_ne	add	arg01, local05
192c0     09 FB 01 56 |  if_ne	mov	result1, arg01
192c4     FD 28 0A F6 | 	mov	local06, result1 wz
192c8     28 00 90 AD |  if_e	jmp	#LR__2596
192cc     11 29 52 F2 | 	cmps	local06, local03 wc
192d0     20 00 90 3D |  if_ae	jmp	#LR__2596
192d4     12 15 0A F6 | 	mov	arg02, local04 wz
192d8     00 FA 05 A6 |  if_e	mov	result1, #0
192dc     10 15 82 51 |  if_ne	sub	arg02, local02
192e0     04 14 46 50 |  if_ne	shr	arg02, #4
192e4     0A FB 01 56 |  if_ne	mov	result1, arg02
192e8     14 25 02 F6 | 	mov	local04, local06
192ec     04 24 06 F1 | 	add	local04, #4
192f0     12 FB 51 FC | 	wrword	result1, local04
192f4                 | LR__2596
192f4                 | LR__2597
192f4     14 FB 01 F6 | 	mov	result1, local06
192f8     A7 F0 03 F6 | 	mov	ptra, fp
192fc     B2 00 A0 FD | 	call	#popregs_
19300                 | __system___gc_dofree_ret
19300     2D 00 64 FD | 	ret
19304                 | 
19304                 | __system___gc_docollect
19304     05 4A 05 F6 | 	mov	COUNT_, #5
19308     A8 00 A0 FD | 	call	#pushregs_
1930c     B8 F9 BF FD | 	call	#__system___gc_ptrs
19310     FE 1E 02 F6 | 	mov	local01, result2
19314     FD 20 02 F6 | 	mov	local02, result1
19318     10 13 02 F6 | 	mov	arg01, local02
1931c     09 23 EA FA | 	rdword	local03, arg01 wz
19320     00 FA 05 A6 |  if_e	mov	result1, #0
19324     04 22 66 50 |  if_ne	shl	local03, #4
19328     11 13 02 51 |  if_ne	add	arg01, local03
1932c     09 FB 01 56 |  if_ne	mov	result1, arg01
19330     FD 24 0A F6 | 	mov	local04, result1 wz
19334     00 FA 05 F6 | 	mov	result1, #0
19338     01 FA 61 FD | 	cogid	result1
1933c     FD 26 02 F6 | 	mov	local05, result1
19340     48 00 90 AD |  if_e	jmp	#LR__2602
19344     97 22 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
19348                 | LR__2600
19348     0F 25 52 F2 | 	cmps	local04, local01 wc
1934c     3C 00 90 3D |  if_ae	jmp	#LR__2602
19350     12 15 02 F6 | 	mov	arg02, local04
19354     02 14 06 F1 | 	add	arg02, #2
19358     0A 15 E2 FA | 	rdword	arg02, arg02
1935c     20 14 26 F5 | 	andn	arg02, #32
19360     12 13 02 F6 | 	mov	arg01, local04
19364     02 12 06 F1 | 	add	arg01, #2
19368     09 15 52 FC | 	wrword	arg02, arg01
1936c     12 13 02 F6 | 	mov	arg01, local04
19370     09 23 EA FA | 	rdword	local03, arg01 wz
19374     00 FA 05 A6 |  if_e	mov	result1, #0
19378     04 22 66 50 |  if_ne	shl	local03, #4
1937c     11 13 02 51 |  if_ne	add	arg01, local03
19380     09 FB 01 56 |  if_ne	mov	result1, arg01
19384     FD 24 0A F6 | 	mov	local04, result1 wz
19388     BC FF 9F 5D |  if_ne	jmp	#LR__2600
1938c                 | LR__2601
1938c                 | LR__2602
1938c     00 22 06 F6 | 	mov	local03, #0
19390     00 12 06 F6 | 	mov	arg01, #0
19394     F0 C0 BF FD | 	call	#__system____topofstack
19398     FD 14 02 F6 | 	mov	arg02, result1
1939c     11 13 02 F6 | 	mov	arg01, local03
193a0     90 00 B0 FD | 	call	#__system___gc_markhub
193a4     1C 01 B0 FD | 	call	#__system___gc_markcog
193a8     10 13 02 F6 | 	mov	arg01, local02
193ac     09 23 EA FA | 	rdword	local03, arg01 wz
193b0     00 FA 05 A6 |  if_e	mov	result1, #0
193b4     04 22 66 50 |  if_ne	shl	local03, #4
193b8     11 13 02 51 |  if_ne	add	arg01, local03
193bc     09 FB 01 56 |  if_ne	mov	result1, arg01
193c0     FD 20 0A F6 | 	mov	local02, result1 wz
193c4     60 00 90 AD |  if_e	jmp	#LR__2606
193c8                 | LR__2603
193c8     10 25 02 F6 | 	mov	local04, local02
193cc     12 13 02 F6 | 	mov	arg01, local04
193d0     09 23 EA FA | 	rdword	local03, arg01 wz
193d4     00 FA 05 A6 |  if_e	mov	result1, #0
193d8     04 22 66 50 |  if_ne	shl	local03, #4
193dc     11 13 02 51 |  if_ne	add	arg01, local03
193e0     09 FB 01 56 |  if_ne	mov	result1, arg01
193e4     FD 20 02 F6 | 	mov	local02, result1
193e8     12 15 02 F6 | 	mov	arg02, local04
193ec     02 14 06 F1 | 	add	arg02, #2
193f0     0A 15 E2 FA | 	rdword	arg02, arg02
193f4     20 14 CE F7 | 	test	arg02, #32 wz
193f8     10 14 CE A7 |  if_e	test	arg02, #16 wz
193fc     1C 00 90 5D |  if_ne	jmp	#LR__2605
19400     0A 15 42 F8 | 	getnib	arg02, arg02, #0
19404     13 15 0A F2 | 	cmp	arg02, local05 wz
19408     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1940c     0C 00 90 5D |  if_ne	jmp	#LR__2604
19410     12 13 02 F6 | 	mov	arg01, local04
19414     84 FC BF FD | 	call	#__system___gc_dofree
19418     FD 20 02 F6 | 	mov	local02, result1
1941c                 | LR__2604
1941c                 | LR__2605
1941c     00 20 0E F2 | 	cmp	local02, #0 wz
19420     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
19424     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2603
19428                 | LR__2606
19428     A7 F0 03 F6 | 	mov	ptra, fp
1942c     B2 00 A0 FD | 	call	#popregs_
19430                 | __system___gc_docollect_ret
19430     2D 00 64 FD | 	ret
19434                 | 
19434                 | __system___gc_markhub
19434     04 4A 05 F6 | 	mov	COUNT_, #4
19438     A8 00 A0 FD | 	call	#pushregs_
1943c     09 1F 02 F6 | 	mov	local01, arg01
19440     0A 21 02 F6 | 	mov	local02, arg02
19444     80 F8 BF FD | 	call	#__system___gc_ptrs
19448     FD 22 02 F6 | 	mov	local03, result1
1944c     FE 24 02 F6 | 	mov	local04, result2
19450                 | LR__2610
19450     10 1F 52 F2 | 	cmps	local01, local02 wc
19454     60 00 90 3D |  if_ae	jmp	#LR__2611
19458     0F 17 02 FB | 	rdlong	arg03, local01
1945c     04 1E 06 F1 | 	add	local01, #4
19460     12 15 02 F6 | 	mov	arg02, local04
19464     11 13 02 F6 | 	mov	arg01, local03
19468     8C FB BF FD | 	call	#__system___gc_isvalidptr
1946c     FD 16 0A F6 | 	mov	arg03, result1 wz
19470     DC FF 9F AD |  if_e	jmp	#LR__2610
19474     0B 13 02 F6 | 	mov	arg01, arg03
19478     00 FA 05 F6 | 	mov	result1, #0
1947c     02 12 06 F1 | 	add	arg01, #2
19480     09 13 E2 FA | 	rdword	arg01, arg01
19484     36 00 00 FF 
19488     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1948c     01 FA 65 A6 |  if_e	neg	result1, #1
19490     00 FA 0D F2 | 	cmp	result1, #0 wz
19494     B8 FF 9F 5D |  if_ne	jmp	#LR__2610
19498     0B FD 01 F6 | 	mov	result2, arg03
1949c     02 FC 05 F1 | 	add	result2, #2
194a0     FE FC E1 FA | 	rdword	result2, result2
194a4     0F FC 25 F5 | 	andn	result2, #15
194a8     2E FC 45 F5 | 	or	result2, #46
194ac     02 16 06 F1 | 	add	arg03, #2
194b0     0B FD 51 FC | 	wrword	result2, arg03
194b4     98 FF 9F FD | 	jmp	#LR__2610
194b8                 | LR__2611
194b8     A7 F0 03 F6 | 	mov	ptra, fp
194bc     B2 00 A0 FD | 	call	#popregs_
194c0                 | __system___gc_markhub_ret
194c0     2D 00 64 FD | 	ret
194c4                 | 
194c4                 | __system___gc_markcog
194c4     04 4A 05 F6 | 	mov	COUNT_, #4
194c8     A8 00 A0 FD | 	call	#pushregs_
194cc     F8 F7 BF FD | 	call	#__system___gc_ptrs
194d0     FD 1E 02 F6 | 	mov	local01, result1
194d4     FE 20 02 F6 | 	mov	local02, result2
194d8     EF 23 06 F6 | 	mov	local03, #495
194dc                 | LR__2620
194dc                 | 	'.live	local03
194dc     00 22 96 F9 | 	alts	local03, #0
194e0     11 25 02 F6 | 	mov	local04, local03
194e4     0F 13 02 F6 | 	mov	arg01, local01
194e8     10 15 02 F6 | 	mov	arg02, local02
194ec     12 17 02 F6 | 	mov	arg03, local04
194f0     04 FB BF FD | 	call	#__system___gc_isvalidptr
194f4     00 FA 0D F2 | 	cmp	result1, #0 wz
194f8     18 00 90 AD |  if_e	jmp	#LR__2621
194fc     FD 24 02 F6 | 	mov	local04, result1
19500     02 24 06 F1 | 	add	local04, #2
19504     12 25 E2 FA | 	rdword	local04, local04
19508     20 24 46 F5 | 	or	local04, #32
1950c     02 FA 05 F1 | 	add	result1, #2
19510     FD 24 52 FC | 	wrword	local04, result1
19514                 | LR__2621
19514     01 22 86 F1 | 	sub	local03, #1
19518     00 22 56 F2 | 	cmps	local03, #0 wc
1951c     BC FF 9F 3D |  if_ae	jmp	#LR__2620
19520     A7 F0 03 F6 | 	mov	ptra, fp
19524     B2 00 A0 FD | 	call	#popregs_
19528                 | __system___gc_markcog_ret
19528     2D 00 64 FD | 	ret
1952c                 | 
1952c                 | __system__opendir
1952c     06 4A 05 F6 | 	mov	COUNT_, #6
19530     A8 00 A0 FD | 	call	#pushregs_
19534     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19538     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1953c     09 15 02 F6 | 	mov	arg02, arg01
19540     0F 13 02 F6 | 	mov	arg01, local01
19544     00 16 06 F6 | 	mov	arg03, #0
19548     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1954c     F8 C6 BF FD | 	call	#__system____getvfsforfile
19550     FD 20 0A F6 | 	mov	local02, result1 wz
19554     10 00 90 AD |  if_e	jmp	#LR__2630
19558     28 20 06 F1 | 	add	local02, #40
1955c     10 17 0A FB | 	rdlong	arg03, local02 wz
19560     28 20 86 F1 | 	sub	local02, #40
19564     14 00 90 5D |  if_ne	jmp	#LR__2631
19568                 | LR__2630
19568     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1956c     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19570     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19574     00 FA 05 F6 | 	mov	result1, #0
19578     90 00 90 FD | 	jmp	#LR__2633
1957c                 | LR__2631
1957c     5C 12 06 F6 | 	mov	arg01, #92
19580     10 14 06 F6 | 	mov	arg02, #16
19584     C0 F9 BF FD | 	call	#__system___gc_doalloc
19588     FD 22 0A F6 | 	mov	local03, result1 wz
1958c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19590     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
19594     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19598     00 FA 05 A6 |  if_e	mov	result1, #0
1959c     6C 00 90 AD |  if_e	jmp	#LR__2633
195a0     28 20 06 F1 | 	add	local02, #40
195a4     10 25 02 FB | 	rdlong	local04, local02
195a8     12 27 02 F6 | 	mov	local05, local04
195ac     28 20 86 F1 | 	sub	local02, #40
195b0     13 26 46 F7 | 	zerox	local05, #19
195b4     14 24 46 F0 | 	shr	local04, #20
195b8     02 24 66 F0 | 	shl	local04, #2
195bc     ED 24 02 F1 | 	add	local04, __methods__
195c0     12 25 02 FB | 	rdlong	local04, local04
195c4     11 13 02 F6 | 	mov	arg01, local03
195c8     0F 15 02 F6 | 	mov	arg02, local01
195cc     F2 28 02 F6 | 	mov	local06, objptr
195d0     13 E5 01 F6 | 	mov	objptr, local05
195d4     2D 24 62 FD | 	call	local04
195d8     14 E5 01 F6 | 	mov	objptr, local06
195dc     FD 16 0A F6 | 	mov	arg03, result1 wz
195e0     20 00 90 AD |  if_e	jmp	#LR__2632
195e4     00 16 4E F2 | 	cmps	arg03, #0 wz
195e8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
195ec     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
195f0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
195f4     11 13 02 F6 | 	mov	arg01, local03
195f8     58 FA BF FD | 	call	#__system___gc_free
195fc     00 FA 05 F6 | 	mov	result1, #0
19600     08 00 90 FD | 	jmp	#LR__2633
19604                 | LR__2632
19604     11 21 62 FC | 	wrlong	local02, local03
19608     11 FB 01 F6 | 	mov	result1, local03
1960c                 | LR__2633
1960c     A7 F0 03 F6 | 	mov	ptra, fp
19610     B2 00 A0 FD | 	call	#popregs_
19614                 | __system__opendir_ret
19614     2D 00 64 FD | 	ret
19618                 | 
19618                 | __system__closedir
19618     04 4A 05 F6 | 	mov	COUNT_, #4
1961c     A8 00 A0 FD | 	call	#pushregs_
19620     09 1F 02 F6 | 	mov	local01, arg01
19624     0F 13 02 FB | 	rdlong	arg01, local01
19628     2C 12 06 F1 | 	add	arg01, #44
1962c     09 21 02 FB | 	rdlong	local02, arg01
19630     10 23 02 F6 | 	mov	local03, local02
19634     13 22 46 F7 | 	zerox	local03, #19
19638     14 20 46 F0 | 	shr	local02, #20
1963c     02 20 66 F0 | 	shl	local02, #2
19640     ED 20 02 F1 | 	add	local02, __methods__
19644     10 21 02 FB | 	rdlong	local02, local02
19648     0F 13 02 F6 | 	mov	arg01, local01
1964c     F2 24 02 F6 | 	mov	local04, objptr
19650     11 E5 01 F6 | 	mov	objptr, local03
19654     2D 20 62 FD | 	call	local02
19658     12 E5 01 F6 | 	mov	objptr, local04
1965c     FD 24 02 F6 | 	mov	local04, result1
19660     0F 13 02 F6 | 	mov	arg01, local01
19664     EC F9 BF FD | 	call	#__system___gc_free
19668     00 24 4E F2 | 	cmps	local04, #0 wz
1966c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19670     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
19674     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19678     01 FA 65 56 |  if_ne	neg	result1, #1
1967c     00 FA 05 A6 |  if_e	mov	result1, #0
19680     A7 F0 03 F6 | 	mov	ptra, fp
19684     B2 00 A0 FD | 	call	#popregs_
19688                 | __system__closedir_ret
19688     2D 00 64 FD | 	ret
1968c                 | 
1968c                 | __system__readdir
1968c     04 4A 05 F6 | 	mov	COUNT_, #4
19690     A8 00 A0 FD | 	call	#pushregs_
19694     09 15 0A FB | 	rdlong	arg02, arg01 wz
19698     08 12 06 F1 | 	add	arg01, #8
1969c     09 1F 02 F6 | 	mov	local01, arg01
196a0     08 12 86 F1 | 	sub	arg01, #8
196a4     00 FA 05 A6 |  if_e	mov	result1, #0
196a8     5C 00 90 AD |  if_e	jmp	#LR__2641
196ac     30 14 06 F1 | 	add	arg02, #48
196b0     0A 21 02 FB | 	rdlong	local02, arg02
196b4     10 23 02 F6 | 	mov	local03, local02
196b8     13 22 46 F7 | 	zerox	local03, #19
196bc     14 20 46 F0 | 	shr	local02, #20
196c0     02 20 66 F0 | 	shl	local02, #2
196c4     ED 20 02 F1 | 	add	local02, __methods__
196c8     10 21 02 FB | 	rdlong	local02, local02
196cc     0F 15 02 F6 | 	mov	arg02, local01
196d0     F2 24 02 F6 | 	mov	local04, objptr
196d4     11 E5 01 F6 | 	mov	objptr, local03
196d8     2D 20 62 FD | 	call	local02
196dc     12 E5 01 F6 | 	mov	objptr, local04
196e0     00 FA 4D F2 | 	cmps	result1, #0 wz
196e4     1C 00 90 AD |  if_e	jmp	#LR__2640
196e8     01 FA 55 F2 | 	cmps	result1, #1 wc
196ec     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
196f0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
196f4     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
196f8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
196fc     00 FA 05 F6 | 	mov	result1, #0
19700     04 00 90 FD | 	jmp	#LR__2641
19704                 | LR__2640
19704     0F FB 01 F6 | 	mov	result1, local01
19708                 | LR__2641
19708     A7 F0 03 F6 | 	mov	ptra, fp
1970c     B2 00 A0 FD | 	call	#popregs_
19710                 | __system__readdir_ret
19710     2D 00 64 FD | 	ret
19714                 | 
19714                 | __system___openraw
19714     15 4A 05 F6 | 	mov	COUNT_, #21
19718     A8 00 A0 FD | 	call	#pushregs_
1971c     09 1F 02 F6 | 	mov	local01, arg01
19720     0A 21 02 F6 | 	mov	local02, arg02
19724     0B 23 02 F6 | 	mov	local03, arg03
19728     0C 25 02 F6 | 	mov	local04, arg04
1972c     04 26 06 F6 | 	mov	local05, #4
19730     0F 29 02 F6 | 	mov	local06, local01
19734     00 2A 06 F6 | 	mov	local07, #0
19738     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1973c     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
19740     16 13 02 F6 | 	mov	arg01, local08
19744     10 15 02 F6 | 	mov	arg02, local02
19748     00 16 06 F6 | 	mov	arg03, #0
1974c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19750     F4 C4 BF FD | 	call	#__system____getvfsforfile
19754     FD 2E 0A F6 | 	mov	local09, result1 wz
19758     10 00 90 AD |  if_e	jmp	#LR__2650
1975c     20 2E 06 F1 | 	add	local09, #32
19760     17 FB 09 FB | 	rdlong	result1, local09 wz
19764     20 2E 86 F1 | 	sub	local09, #32
19768     14 00 90 5D |  if_ne	jmp	#LR__2651
1976c                 | LR__2650
1976c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19770     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19774     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19778     01 FA 65 F6 | 	neg	result1, #1
1977c     8C 02 90 FD | 	jmp	#LR__2664
19780                 | LR__2651
19780     14 13 02 F6 | 	mov	arg01, local06
19784     00 14 06 F6 | 	mov	arg02, #0
19788     34 16 06 F6 | 	mov	arg03, #52
1978c     09 31 02 F6 | 	mov	local10, arg01
19790     98 00 A0 FD | 	call	#\builtin_bytefill_
19794     20 2E 06 F1 | 	add	local09, #32
19798     17 33 02 FB | 	rdlong	local11, local09
1979c     19 35 02 F6 | 	mov	local12, local11
197a0     19 37 02 F6 | 	mov	local13, local11
197a4     20 2E 86 F1 | 	sub	local09, #32
197a8     1B 39 02 F6 | 	mov	local14, local13
197ac     13 34 46 F7 | 	zerox	local12, #19
197b0     14 38 46 F0 | 	shr	local14, #20
197b4     02 38 66 F0 | 	shl	local14, #2
197b8     ED 38 02 F1 | 	add	local14, __methods__
197bc     1C 39 02 FB | 	rdlong	local14, local14
197c0     14 3B 02 F6 | 	mov	local15, local06
197c4     16 3D 02 F6 | 	mov	local16, local08
197c8     11 3F 02 F6 | 	mov	local17, local03
197cc     1D 13 02 F6 | 	mov	arg01, local15
197d0     1E 15 02 F6 | 	mov	arg02, local16
197d4     1F 17 02 F6 | 	mov	arg03, local17
197d8     F2 40 02 F6 | 	mov	local18, objptr
197dc     1A E5 01 F6 | 	mov	objptr, local12
197e0     2D 38 62 FD | 	call	local14
197e4     20 E5 01 F6 | 	mov	objptr, local18
197e8     FD 42 0A F6 | 	mov	local19, result1 wz
197ec     04 22 CE 57 |  if_ne	test	local03, #4 wz
197f0     58 00 90 AD |  if_e	jmp	#LR__2652
197f4     24 2E 06 F1 | 	add	local09, #36
197f8     17 33 02 FB | 	rdlong	local11, local09
197fc     19 35 02 F6 | 	mov	local12, local11
19800     19 37 02 F6 | 	mov	local13, local11
19804     24 2E 86 F1 | 	sub	local09, #36
19808     1B 39 02 F6 | 	mov	local14, local13
1980c     13 34 46 F7 | 	zerox	local12, #19
19810     14 38 46 F0 | 	shr	local14, #20
19814     02 38 66 F0 | 	shl	local14, #2
19818     ED 38 02 F1 | 	add	local14, __methods__
1981c     1C 39 02 FB | 	rdlong	local14, local14
19820     14 3B 02 F6 | 	mov	local15, local06
19824     16 3D 02 F6 | 	mov	local16, local08
19828     12 3F 02 F6 | 	mov	local17, local04
1982c     1D 13 02 F6 | 	mov	arg01, local15
19830     1E 15 02 F6 | 	mov	arg02, local16
19834     1F 17 02 F6 | 	mov	arg03, local17
19838     F2 40 02 F6 | 	mov	local18, objptr
1983c     1A E5 01 F6 | 	mov	objptr, local12
19840     2D 38 62 FD | 	call	local14
19844     20 E5 01 F6 | 	mov	objptr, local18
19848     FD 42 02 F6 | 	mov	local19, result1
1984c                 | LR__2652
1984c     00 42 0E F2 | 	cmp	local19, #0 wz
19850     8C 01 90 5D |  if_ne	jmp	#LR__2662
19854     11 45 02 F6 | 	mov	local20, local03
19858     03 44 0E F5 | 	and	local20, #3 wz
1985c     02 26 46 55 |  if_ne	or	local05, #2
19860     01 44 0E F2 | 	cmp	local20, #1 wz
19864     01 26 46 55 |  if_ne	or	local05, #1
19868     20 22 CE F7 | 	test	local03, #32 wz
1986c     C0 26 46 55 |  if_ne	or	local05, #192
19870     08 28 06 F1 | 	add	local06, #8
19874     14 27 62 FC | 	wrlong	local05, local06
19878     0C 28 06 F1 | 	add	local06, #12
1987c     14 47 0A FB | 	rdlong	local21, local06 wz
19880     14 28 86 F1 | 	sub	local06, #20
19884     18 00 90 5D |  if_ne	jmp	#LR__2653
19888     04 2E 06 F1 | 	add	local09, #4
1988c     17 47 02 FB | 	rdlong	local21, local09
19890     04 2E 86 F1 | 	sub	local09, #4
19894     14 28 06 F1 | 	add	local06, #20
19898     14 47 62 FC | 	wrlong	local21, local06
1989c     14 28 86 F1 | 	sub	local06, #20
198a0                 | LR__2653
198a0     18 28 06 F1 | 	add	local06, #24
198a4     14 47 0A FB | 	rdlong	local21, local06 wz
198a8     18 28 86 F1 | 	sub	local06, #24
198ac     18 00 90 5D |  if_ne	jmp	#LR__2654
198b0     08 2E 06 F1 | 	add	local09, #8
198b4     17 47 02 FB | 	rdlong	local21, local09
198b8     08 2E 86 F1 | 	sub	local09, #8
198bc     18 28 06 F1 | 	add	local06, #24
198c0     14 47 62 FC | 	wrlong	local21, local06
198c4     18 28 86 F1 | 	sub	local06, #24
198c8                 | LR__2654
198c8     24 28 06 F1 | 	add	local06, #36
198cc     14 47 0A FB | 	rdlong	local21, local06 wz
198d0     24 28 86 F1 | 	sub	local06, #36
198d4     17 47 02 AB |  if_e	rdlong	local21, local09
198d8     24 28 06 A1 |  if_e	add	local06, #36
198dc     14 47 62 AC |  if_e	wrlong	local21, local06
198e0     24 28 86 A1 |  if_e	sub	local06, #36
198e4     28 28 06 F1 | 	add	local06, #40
198e8     14 47 0A FB | 	rdlong	local21, local06 wz
198ec     28 28 86 F1 | 	sub	local06, #40
198f0     18 00 90 5D |  if_ne	jmp	#LR__2655
198f4     10 2E 06 F1 | 	add	local09, #16
198f8     17 47 02 FB | 	rdlong	local21, local09
198fc     10 2E 86 F1 | 	sub	local09, #16
19900     28 28 06 F1 | 	add	local06, #40
19904     14 47 62 FC | 	wrlong	local21, local06
19908     28 28 86 F1 | 	sub	local06, #40
1990c                 | LR__2655
1990c     30 28 06 F1 | 	add	local06, #48
19910     14 47 0A FB | 	rdlong	local21, local06 wz
19914     30 28 86 F1 | 	sub	local06, #48
19918     18 00 90 5D |  if_ne	jmp	#LR__2656
1991c     0C 2E 06 F1 | 	add	local09, #12
19920     17 47 02 FB | 	rdlong	local21, local09
19924     0C 2E 86 F1 | 	sub	local09, #12
19928     30 28 06 F1 | 	add	local06, #48
1992c     14 47 62 FC | 	wrlong	local21, local06
19930     30 28 86 F1 | 	sub	local06, #48
19934                 | LR__2656
19934     1C 28 06 F1 | 	add	local06, #28
19938     14 47 0A FB | 	rdlong	local21, local06 wz
1993c     1C 28 86 F1 | 	sub	local06, #28
19940     1C 00 90 5D |  if_ne	jmp	#LR__2657
19944     01 2A 06 F6 | 	mov	local07, #1
19948     F2 12 02 F6 | 	mov	arg01, objptr
1994c     00 A8 02 FF 
19950     00 12 46 F5 | 	or	arg01, ##89128960
19954     1C 28 06 F1 | 	add	local06, #28
19958     14 13 62 FC | 	wrlong	arg01, local06
1995c     1C 28 86 F1 | 	sub	local06, #28
19960                 | LR__2657
19960     20 28 06 F1 | 	add	local06, #32
19964     14 47 0A FB | 	rdlong	local21, local06 wz
19968     20 28 86 F1 | 	sub	local06, #32
1996c     1C 00 90 5D |  if_ne	jmp	#LR__2658
19970     01 2A 06 F6 | 	mov	local07, #1
19974     F2 12 02 F6 | 	mov	arg01, objptr
19978     00 B0 02 FF 
1997c     00 12 46 F5 | 	or	arg01, ##90177536
19980     20 28 06 F1 | 	add	local06, #32
19984     14 13 62 FC | 	wrlong	arg01, local06
19988     20 28 86 F1 | 	sub	local06, #32
1998c                 | LR__2658
1998c     2C 28 06 F1 | 	add	local06, #44
19990     14 47 0A FB | 	rdlong	local21, local06 wz
19994     2C 28 86 F1 | 	sub	local06, #44
19998     44 00 90 5D |  if_ne	jmp	#LR__2661
1999c     14 2E 06 F1 | 	add	local09, #20
199a0     17 47 0A FB | 	rdlong	local21, local09 wz
199a4     14 2E 86 F1 | 	sub	local09, #20
199a8     18 00 90 AD |  if_e	jmp	#LR__2659
199ac     14 2E 06 F1 | 	add	local09, #20
199b0     17 47 02 FB | 	rdlong	local21, local09
199b4     2C 28 06 F1 | 	add	local06, #44
199b8     14 47 62 FC | 	wrlong	local21, local06
199bc     2C 28 86 F1 | 	sub	local06, #44
199c0     1C 00 90 FD | 	jmp	#LR__2660
199c4                 | LR__2659
199c4     01 2A 06 F6 | 	mov	local07, #1
199c8     F2 12 02 F6 | 	mov	arg01, objptr
199cc     00 B8 02 FF 
199d0     00 12 46 F5 | 	or	arg01, ##91226112
199d4     2C 28 06 F1 | 	add	local06, #44
199d8     14 13 62 FC | 	wrlong	arg01, local06
199dc     2C 28 86 F1 | 	sub	local06, #44
199e0                 | LR__2660
199e0                 | LR__2661
199e0                 | LR__2662
199e0     00 2A 0E F2 | 	cmp	local07, #0 wz
199e4     14 13 02 56 |  if_ne	mov	arg01, local06
199e8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
199ec     00 42 0E F2 | 	cmp	local19, #0 wz
199f0     00 12 06 A6 |  if_e	mov	arg01, #0
199f4     10 00 90 5D |  if_ne	jmp	#LR__2663
199f8     00 12 4E F2 | 	cmps	arg01, #0 wz
199fc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19a00     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19a04     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a08                 | LR__2663
19a08     21 FB 01 F6 | 	mov	result1, local19
19a0c                 | LR__2664
19a0c     A7 F0 03 F6 | 	mov	ptra, fp
19a10     B2 00 A0 FD | 	call	#popregs_
19a14                 | __system___openraw_ret
19a14     2D 00 64 FD | 	ret
19a18                 | 
19a18                 | __system___closeraw
19a18     05 4A 05 F6 | 	mov	COUNT_, #5
19a1c     A8 00 A0 FD | 	call	#pushregs_
19a20     09 1F 02 F6 | 	mov	local01, arg01
19a24     00 20 06 F6 | 	mov	local02, #0
19a28     08 1E 06 F1 | 	add	local01, #8
19a2c     0F FB 09 FB | 	rdlong	result1, local01 wz
19a30     08 1E 86 F1 | 	sub	local01, #8
19a34     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19a38     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
19a3c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19a40     01 FA 65 A6 |  if_e	neg	result1, #1
19a44     A8 00 90 AD |  if_e	jmp	#LR__2672
19a48     2C 1E 06 F1 | 	add	local01, #44
19a4c     0F FB 09 FB | 	rdlong	result1, local01 wz
19a50     2C 1E 86 F1 | 	sub	local01, #44
19a54     38 00 90 AD |  if_e	jmp	#LR__2670
19a58     2C 1E 06 F1 | 	add	local01, #44
19a5c     0F 23 02 FB | 	rdlong	local03, local01
19a60     11 25 02 F6 | 	mov	local04, local03
19a64     2C 1E 86 F1 | 	sub	local01, #44
19a68     13 24 46 F7 | 	zerox	local04, #19
19a6c     14 22 46 F0 | 	shr	local03, #20
19a70     02 22 66 F0 | 	shl	local03, #2
19a74     ED 22 02 F1 | 	add	local03, __methods__
19a78     11 23 02 FB | 	rdlong	local03, local03
19a7c     0F 13 02 F6 | 	mov	arg01, local01
19a80     F2 26 02 F6 | 	mov	local05, objptr
19a84     12 E5 01 F6 | 	mov	objptr, local04
19a88     2D 22 62 FD | 	call	local03
19a8c     13 E5 01 F6 | 	mov	objptr, local05
19a90                 | LR__2670
19a90     24 1E 06 F1 | 	add	local01, #36
19a94     0F 27 0A FB | 	rdlong	local05, local01 wz
19a98     24 1E 86 F1 | 	sub	local01, #36
19a9c     3C 00 90 AD |  if_e	jmp	#LR__2671
19aa0     24 1E 06 F1 | 	add	local01, #36
19aa4     0F 23 02 FB | 	rdlong	local03, local01
19aa8     11 25 02 F6 | 	mov	local04, local03
19aac     24 1E 86 F1 | 	sub	local01, #36
19ab0     13 24 46 F7 | 	zerox	local04, #19
19ab4     14 22 46 F0 | 	shr	local03, #20
19ab8     02 22 66 F0 | 	shl	local03, #2
19abc     ED 22 02 F1 | 	add	local03, __methods__
19ac0     11 23 02 FB | 	rdlong	local03, local03
19ac4     0F 13 02 F6 | 	mov	arg01, local01
19ac8     F2 26 02 F6 | 	mov	local05, objptr
19acc     12 E5 01 F6 | 	mov	objptr, local04
19ad0     2D 22 62 FD | 	call	local03
19ad4     13 E5 01 F6 | 	mov	objptr, local05
19ad8     FD 20 02 F6 | 	mov	local02, result1
19adc                 | LR__2671
19adc     0F 13 02 F6 | 	mov	arg01, local01
19ae0     00 14 06 F6 | 	mov	arg02, #0
19ae4     34 16 06 F6 | 	mov	arg03, #52
19ae8     98 00 A0 FD | 	call	#\builtin_bytefill_
19aec     10 FB 01 F6 | 	mov	result1, local02
19af0                 | LR__2672
19af0     A7 F0 03 F6 | 	mov	ptra, fp
19af4     B2 00 A0 FD | 	call	#popregs_
19af8                 | __system___closeraw_ret
19af8     2D 00 64 FD | 	ret
19afc                 | 
19afc                 | __system___vfs_open_sdcardx
19afc     0B 4A 05 F6 | 	mov	COUNT_, #11
19b00     A8 00 A0 FD | 	call	#pushregs_
19b04     09 23 02 F6 | 	mov	local03, arg01
19b08     0A 25 02 F6 | 	mov	local04, arg02
19b0c     0B 27 02 F6 | 	mov	local05, arg03
19b10     0C 29 02 F6 | 	mov	local06, arg04
19b14     01 00 00 FF 
19b18     24 12 06 F6 | 	mov	arg01, ##548
19b1c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
19b20     FD 2A 02 F6 | 	mov	local07, result1
19b24     01 00 00 FF 
19b28     34 12 06 F6 | 	mov	arg01, ##564
19b2c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
19b30     FD 2C 02 F6 | 	mov	local08, result1
19b34     11 19 02 F6 | 	mov	arg04, local03
19b38     1F 18 C6 F0 | 	sar	arg04, #31
19b3c     11 17 02 F6 | 	mov	arg03, local03
19b40     01 12 06 F6 | 	mov	arg01, #1
19b44     00 14 06 F6 | 	mov	arg02, #0
19b48     98 DF BF FD | 	call	#__system___int64_shl
19b4c     FD 1E 02 F6 | 	mov	local01, result1
19b50     FE 2E 02 F6 | 	mov	local09, result2
19b54     12 19 02 F6 | 	mov	arg04, local04
19b58     1F 18 C6 F0 | 	sar	arg04, #31
19b5c     12 17 02 F6 | 	mov	arg03, local04
19b60     01 12 06 F6 | 	mov	arg01, #1
19b64     00 14 06 F6 | 	mov	arg02, #0
19b68     78 DF BF FD | 	call	#__system___int64_shl
19b6c     FD 1E 42 F5 | 	or	local01, result1
19b70     FE 2E 42 F5 | 	or	local09, result2
19b74     13 19 02 F6 | 	mov	arg04, local05
19b78     1F 18 C6 F0 | 	sar	arg04, #31
19b7c     13 17 02 F6 | 	mov	arg03, local05
19b80     01 12 06 F6 | 	mov	arg01, #1
19b84     00 14 06 F6 | 	mov	arg02, #0
19b88     58 DF BF FD | 	call	#__system___int64_shl
19b8c     FD 1E 42 F5 | 	or	local01, result1
19b90     FE 2E 42 F5 | 	or	local09, result2
19b94     14 19 02 F6 | 	mov	arg04, local06
19b98     1F 18 C6 F0 | 	sar	arg04, #31
19b9c     14 17 02 F6 | 	mov	arg03, local06
19ba0     01 12 06 F6 | 	mov	arg01, #1
19ba4     00 14 06 F6 | 	mov	arg02, #0
19ba8     38 DF BF FD | 	call	#__system___int64_shl
19bac     17 15 02 F6 | 	mov	arg02, local09
19bb0     FD 1E 42 F5 | 	or	local01, result1
19bb4     0A FD 41 F5 | 	or	result2, arg02
19bb8     FE 20 02 F6 | 	mov	local02, result2
19bbc     0F 13 02 F6 | 	mov	arg01, local01
19bc0     10 15 02 F6 | 	mov	arg02, local02
19bc4     54 DF BF FD | 	call	#__system___usepins
19bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
19bcc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19bd0     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
19bd4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19bd8     00 FA 05 A6 |  if_e	mov	result1, #0
19bdc     B4 00 90 AD |  if_e	jmp	#LR__2682
19be0     0F 31 02 F6 | 	mov	local10, local01
19be4     10 2F 02 F6 | 	mov	local09, local02
19be8     01 00 00 FF 
19bec     08 2A 06 F1 | 	add	local07, ##520
19bf0     15 31 62 FC | 	wrlong	local10, local07
19bf4     04 2A 06 F1 | 	add	local07, #4
19bf8     15 2F 62 FC | 	wrlong	local09, local07
19bfc     01 00 00 FF 
19c00     0C 2A 86 F1 | 	sub	local07, ##524
19c04     14 1B 02 F6 | 	mov	arg05, local06
19c08     00 12 06 F6 | 	mov	arg01, #0
19c0c     11 15 02 F6 | 	mov	arg02, local03
19c10     12 17 02 F6 | 	mov	arg03, local04
19c14     13 19 02 F6 | 	mov	arg04, local05
19c18     F2 30 02 F6 | 	mov	local10, objptr
19c1c     15 E5 01 F6 | 	mov	objptr, local07
19c20     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
19c24     18 E5 01 F6 | 	mov	objptr, local10
19c28     FD 32 0A F6 | 	mov	local11, result1 wz
19c2c     24 00 90 5D |  if_ne	jmp	#LR__2680
19c30     23 01 00 FF 
19c34     E6 14 06 F6 | 	mov	arg02, ##@LR__4077
19c38     16 13 02 F6 | 	mov	arg01, local08
19c3c     00 16 06 F6 | 	mov	arg03, #0
19c40     F2 32 02 F6 | 	mov	local11, objptr
19c44     15 E5 01 F6 | 	mov	objptr, local07
19c48     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
19c4c     19 E5 01 F6 | 	mov	objptr, local11
19c50     FD 32 02 F6 | 	mov	local11, result1
19c54                 | LR__2680
19c54     00 32 0E F2 | 	cmp	local11, #0 wz
19c58     24 00 90 AD |  if_e	jmp	#LR__2681
19c5c     0F 13 02 F6 | 	mov	arg01, local01
19c60     10 15 02 F6 | 	mov	arg02, local02
19c64     08 DF BF FD | 	call	#__system___freepins
19c68     19 13 6A F6 | 	neg	arg01, local11 wz
19c6c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19c70     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19c74     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19c78     00 FA 05 F6 | 	mov	result1, #0
19c7c     14 00 90 FD | 	jmp	#LR__2682
19c80                 | LR__2681
19c80     15 13 02 F6 | 	mov	arg01, local07
19c84     F2 32 02 F6 | 	mov	local11, objptr
19c88     15 E5 01 F6 | 	mov	objptr, local07
19c8c     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
19c90     19 E5 01 F6 | 	mov	objptr, local11
19c94                 | LR__2682
19c94     A7 F0 03 F6 | 	mov	ptra, fp
19c98     B2 00 A0 FD | 	call	#popregs_
19c9c                 | __system___vfs_open_sdcardx_ret
19c9c     2D 00 64 FD | 	ret
19ca0                 | 
19ca0                 | __system____default_getc
19ca0     03 4A 05 F6 | 	mov	COUNT_, #3
19ca4     A8 00 A0 FD | 	call	#pushregs_
19ca8     09 1F 02 F6 | 	mov	local01, arg01
19cac     0F 21 02 FB | 	rdlong	local02, local01
19cb0     08 20 06 F1 | 	add	local02, #8
19cb4     10 23 02 FB | 	rdlong	local03, local02
19cb8     02 22 CE F7 | 	test	local03, #2 wz
19cbc     0F 13 02 56 |  if_ne	mov	arg01, local01
19cc0     00 01 B0 5D |  if_ne	call	#__system____default_flush
19cc4     10 23 02 FB | 	rdlong	local03, local02
19cc8     01 22 46 F5 | 	or	local03, #1
19ccc     10 23 62 FC | 	wrlong	local03, local02
19cd0     08 20 86 F1 | 	sub	local02, #8
19cd4     10 23 0A FB | 	rdlong	local03, local02 wz
19cd8     0C 00 90 5D |  if_ne	jmp	#LR__2690
19cdc     0F 13 02 F6 | 	mov	arg01, local01
19ce0     64 16 B0 FD | 	call	#__system____default_filbuf
19ce4     FD 22 02 F6 | 	mov	local03, result1
19ce8                 | LR__2690
19ce8     01 22 56 F2 | 	cmps	local03, #1 wc
19cec     01 FA 65 C6 |  if_b	neg	result1, #1
19cf0     1C 00 90 CD |  if_b	jmp	#LR__2691
19cf4     01 22 86 F1 | 	sub	local03, #1
19cf8     10 23 62 FC | 	wrlong	local03, local02
19cfc     04 20 06 F1 | 	add	local02, #4
19d00     10 23 02 FB | 	rdlong	local03, local02
19d04     11 FB C1 FA | 	rdbyte	result1, local03
19d08     01 22 06 F1 | 	add	local03, #1
19d0c     10 23 62 FC | 	wrlong	local03, local02
19d10                 | LR__2691
19d10     A7 F0 03 F6 | 	mov	ptra, fp
19d14     B2 00 A0 FD | 	call	#popregs_
19d18                 | __system____default_getc_ret
19d18     2D 00 64 FD | 	ret
19d1c                 | 
19d1c                 | __system____default_putc
19d1c     06 4A 05 F6 | 	mov	COUNT_, #6
19d20     A8 00 A0 FD | 	call	#pushregs_
19d24     09 1F 02 F6 | 	mov	local01, arg01
19d28     0A 21 02 F6 | 	mov	local02, arg02
19d2c     10 23 02 FB | 	rdlong	local03, local02
19d30     08 22 06 F1 | 	add	local03, #8
19d34     11 FB 01 FB | 	rdlong	result1, local03
19d38     01 FA CD F7 | 	test	result1, #1 wz
19d3c     10 13 02 56 |  if_ne	mov	arg01, local02
19d40     80 00 B0 5D |  if_ne	call	#__system____default_flush
19d44     11 25 02 FB | 	rdlong	local04, local03
19d48     02 24 46 F5 | 	or	local04, #2
19d4c     11 25 62 FC | 	wrlong	local04, local03
19d50     08 22 86 F1 | 	sub	local03, #8
19d54     11 27 02 FB | 	rdlong	local05, local03
19d58     10 22 06 F1 | 	add	local03, #16
19d5c     11 15 02 FB | 	rdlong	arg02, local03
19d60     10 22 86 F1 | 	sub	local03, #16
19d64     13 FB 01 F6 | 	mov	result1, local05
19d68     0A FB 01 F1 | 	add	result1, arg02
19d6c     FD 1E 42 FC | 	wrbyte	local01, result1
19d70     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19d74     01 26 06 F1 | 	add	local05, #1
19d78     11 27 62 FC | 	wrlong	local05, local03
19d7c     06 20 06 F1 | 	add	local02, #6
19d80     10 29 EA FA | 	rdword	local06, local02 wz
19d84     06 20 86 F1 | 	sub	local02, #6
19d88     0C 22 06 51 |  if_ne	add	local03, #12
19d8c     11 25 02 5B |  if_ne	rdlong	local04, local03
19d90     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
19d94     0C 00 90 AD |  if_e	jmp	#LR__2700
19d98     0A 1E 0E F2 | 	cmp	local01, #10 wz
19d9c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
19da0     10 00 90 5D |  if_ne	jmp	#LR__2701
19da4                 | LR__2700
19da4     10 13 02 F6 | 	mov	arg01, local02
19da8     18 00 B0 FD | 	call	#__system____default_flush
19dac     00 FA 0D F2 | 	cmp	result1, #0 wz
19db0     01 1E 66 56 |  if_ne	neg	local01, #1
19db4                 | LR__2701
19db4     0F FB 01 F6 | 	mov	result1, local01
19db8     A7 F0 03 F6 | 	mov	ptra, fp
19dbc     B2 00 A0 FD | 	call	#popregs_
19dc0                 | __system____default_putc_ret
19dc0     2D 00 64 FD | 	ret
19dc4                 | 
19dc4                 | __system____default_flush
19dc4     06 4A 05 F6 | 	mov	COUNT_, #6
19dc8     A8 00 A0 FD | 	call	#pushregs_
19dcc     09 1F 02 F6 | 	mov	local01, arg01
19dd0     0F 21 02 FB | 	rdlong	local02, local01
19dd4     10 23 02 FB | 	rdlong	local03, local02
19dd8     08 20 06 F1 | 	add	local02, #8
19ddc     10 FB 01 FB | 	rdlong	result1, local02
19de0     08 20 86 F1 | 	sub	local02, #8
19de4     02 FA CD F7 | 	test	result1, #2 wz
19de8     D0 00 90 AD |  if_e	jmp	#LR__2712
19dec     01 22 56 F2 | 	cmps	local03, #1 wc
19df0     20 01 90 CD |  if_b	jmp	#LR__2714
19df4     08 1E 06 F1 | 	add	local01, #8
19df8     0F FB 01 FB | 	rdlong	result1, local01
19dfc     08 1E 86 F1 | 	sub	local01, #8
19e00     40 FA CD F7 | 	test	result1, #64 wz
19e04     68 00 90 AD |  if_e	jmp	#LR__2711
19e08     08 1E 06 F1 | 	add	local01, #8
19e0c     0F 17 02 FB | 	rdlong	arg03, local01
19e10     08 1E 86 F1 | 	sub	local01, #8
19e14     80 16 CE F7 | 	test	arg03, #128 wz
19e18     54 00 90 AD |  if_e	jmp	#LR__2710
19e1c     30 1E 06 F1 | 	add	local01, #48
19e20     0F 25 02 FB | 	rdlong	local04, local01
19e24     12 27 02 F6 | 	mov	local05, local04
19e28     30 1E 86 F1 | 	sub	local01, #48
19e2c     13 26 46 F7 | 	zerox	local05, #19
19e30     14 24 46 F0 | 	shr	local04, #20
19e34     02 24 66 F0 | 	shl	local04, #2
19e38     ED 24 02 F1 | 	add	local04, __methods__
19e3c     12 25 02 FB | 	rdlong	local04, local04
19e40     0F 13 02 F6 | 	mov	arg01, local01
19e44     00 14 06 F6 | 	mov	arg02, #0
19e48     02 16 06 F6 | 	mov	arg03, #2
19e4c     F2 28 02 F6 | 	mov	local06, objptr
19e50     13 E5 01 F6 | 	mov	objptr, local05
19e54     2D 24 62 FD | 	call	local04
19e58     14 E5 01 F6 | 	mov	objptr, local06
19e5c     08 1E 06 F1 | 	add	local01, #8
19e60     0F 29 02 FB | 	rdlong	local06, local01
19e64     80 28 26 F5 | 	andn	local06, #128
19e68     0F 29 62 FC | 	wrlong	local06, local01
19e6c     08 1E 86 F1 | 	sub	local01, #8
19e70                 | LR__2710
19e70                 | LR__2711
19e70     18 1E 06 F1 | 	add	local01, #24
19e74     0F 25 02 FB | 	rdlong	local04, local01
19e78     12 27 02 F6 | 	mov	local05, local04
19e7c     18 1E 86 F1 | 	sub	local01, #24
19e80     13 26 46 F7 | 	zerox	local05, #19
19e84     14 24 46 F0 | 	shr	local04, #20
19e88     02 24 66 F0 | 	shl	local04, #2
19e8c     ED 24 02 F1 | 	add	local04, __methods__
19e90     12 25 02 FB | 	rdlong	local04, local04
19e94     10 20 06 F1 | 	add	local02, #16
19e98     10 15 02 FB | 	rdlong	arg02, local02
19e9c     10 20 86 F1 | 	sub	local02, #16
19ea0     0F 13 02 F6 | 	mov	arg01, local01
19ea4     11 17 02 F6 | 	mov	arg03, local03
19ea8     F2 28 02 F6 | 	mov	local06, objptr
19eac     13 E5 01 F6 | 	mov	objptr, local05
19eb0     2D 24 62 FD | 	call	local04
19eb4     14 E5 01 F6 | 	mov	objptr, local06
19eb8     58 00 90 FD | 	jmp	#LR__2714
19ebc                 | LR__2712
19ebc     08 20 06 F1 | 	add	local02, #8
19ec0     10 29 02 FB | 	rdlong	local06, local02
19ec4     08 20 86 F1 | 	sub	local02, #8
19ec8     01 28 CE F7 | 	test	local06, #1 wz
19ecc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
19ed0     40 00 90 AD |  if_e	jmp	#LR__2713
19ed4     30 1E 06 F1 | 	add	local01, #48
19ed8     0F 25 02 FB | 	rdlong	local04, local01
19edc     12 27 02 F6 | 	mov	local05, local04
19ee0     30 1E 86 F1 | 	sub	local01, #48
19ee4     13 26 46 F7 | 	zerox	local05, #19
19ee8     14 24 46 F0 | 	shr	local04, #20
19eec     02 24 66 F0 | 	shl	local04, #2
19ef0     ED 24 02 F1 | 	add	local04, __methods__
19ef4     12 25 02 FB | 	rdlong	local04, local04
19ef8     0F 13 02 F6 | 	mov	arg01, local01
19efc     11 15 62 F6 | 	neg	arg02, local03
19f00     01 16 06 F6 | 	mov	arg03, #1
19f04     F2 28 02 F6 | 	mov	local06, objptr
19f08     13 E5 01 F6 | 	mov	objptr, local05
19f0c     2D 24 62 FD | 	call	local04
19f10     14 E5 01 F6 | 	mov	objptr, local06
19f14                 | LR__2713
19f14                 | LR__2714
19f14     10 01 68 FC | 	wrlong	#0, local02
19f18     04 20 06 F1 | 	add	local02, #4
19f1c     10 01 68 FC | 	wrlong	#0, local02
19f20     04 20 06 F1 | 	add	local02, #4
19f24     10 01 68 FC | 	wrlong	#0, local02
19f28     00 FA 05 F6 | 	mov	result1, #0
19f2c     A7 F0 03 F6 | 	mov	ptra, fp
19f30     B2 00 A0 FD | 	call	#popregs_
19f34                 | __system____default_flush_ret
19f34     2D 00 64 FD | 	ret
19f38                 | 
19f38                 | __system____default_buffer_init
19f38     02 4A 05 F6 | 	mov	COUNT_, #2
19f3c     A8 00 A0 FD | 	call	#pushregs_
19f40     09 1F 02 F6 | 	mov	local01, arg01
19f44     0F 21 02 FB | 	rdlong	local02, local01
19f48     0F 13 02 F6 | 	mov	arg01, local01
19f4c     F8 02 B0 FD | 	call	#__system___isatty
19f50     00 FA 0D F2 | 	cmp	result1, #0 wz
19f54     06 1E 06 51 |  if_ne	add	local01, #6
19f58     0F 0B 58 5C |  if_ne	wrword	#5, local01
19f5c     06 1E 06 A1 |  if_e	add	local01, #6
19f60     0F 0D 58 AC |  if_e	wrword	#6, local01
19f64     14 20 06 F1 | 	add	local02, #20
19f68     10 1F 02 F6 | 	mov	local01, local02
19f6c     04 20 86 F1 | 	sub	local02, #4
19f70     10 1F 62 FC | 	wrlong	local01, local02
19f74     04 20 86 F1 | 	sub	local02, #4
19f78     02 00 80 FF 
19f7c     10 01 68 FC | 	wrlong	##1024, local02
19f80     00 FA 05 F6 | 	mov	result1, #0
19f84     A7 F0 03 F6 | 	mov	ptra, fp
19f88     B2 00 A0 FD | 	call	#popregs_
19f8c                 | __system____default_buffer_init_ret
19f8c     2D 00 64 FD | 	ret
19f90                 | 
19f90                 | __system__stat
19f90     04 4A 05 F6 | 	mov	COUNT_, #4
19f94     A8 00 A0 FD | 	call	#pushregs_
19f98     0A 1F 02 F6 | 	mov	local01, arg02
19f9c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19fa0     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
19fa4     09 15 02 F6 | 	mov	arg02, arg01
19fa8     10 13 02 F6 | 	mov	arg01, local02
19fac     00 16 06 F6 | 	mov	arg03, #0
19fb0     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19fb4     90 BC BF FD | 	call	#__system____getvfsforfile
19fb8     FD 22 0A F6 | 	mov	local03, result1 wz
19fbc     10 00 90 AD |  if_e	jmp	#LR__2720
19fc0     34 22 06 F1 | 	add	local03, #52
19fc4     11 17 0A FB | 	rdlong	arg03, local03 wz
19fc8     34 22 86 F1 | 	sub	local03, #52
19fcc     14 00 90 5D |  if_ne	jmp	#LR__2721
19fd0                 | LR__2720
19fd0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19fd4     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19fd8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19fdc     01 FA 65 F6 | 	neg	result1, #1
19fe0     68 00 90 FD | 	jmp	#LR__2722
19fe4                 | LR__2721
19fe4     0F 13 02 F6 | 	mov	arg01, local01
19fe8     00 14 06 F6 | 	mov	arg02, #0
19fec     30 16 06 F6 | 	mov	arg03, #48
19ff0     09 25 02 F6 | 	mov	local04, arg01
19ff4     98 00 A0 FD | 	call	#\builtin_bytefill_
19ff8     12 FB 01 F6 | 	mov	result1, local04
19ffc     10 13 CA FA | 	rdbyte	arg01, local02 wz
1a000     08 1E 06 A1 |  if_e	add	local01, #8
1a004     08 00 80 AF 
1a008     0F FF 6B AC |  if_e	wrlong	##4607, local01
1a00c     00 FA 05 A6 |  if_e	mov	result1, #0
1a010     38 00 90 AD |  if_e	jmp	#LR__2722
1a014     34 22 06 F1 | 	add	local03, #52
1a018     11 23 02 FB | 	rdlong	local03, local03
1a01c     11 25 02 F6 | 	mov	local04, local03
1a020     13 22 46 F7 | 	zerox	local03, #19
1a024     14 24 46 F0 | 	shr	local04, #20
1a028     02 24 66 F0 | 	shl	local04, #2
1a02c     ED 24 02 F1 | 	add	local04, __methods__
1a030     12 25 02 FB | 	rdlong	local04, local04
1a034     10 13 02 F6 | 	mov	arg01, local02
1a038     0F 15 02 F6 | 	mov	arg02, local01
1a03c     F2 20 02 F6 | 	mov	local02, objptr
1a040     11 E5 01 F6 | 	mov	objptr, local03
1a044     2D 24 62 FD | 	call	local04
1a048     10 E5 01 F6 | 	mov	objptr, local02
1a04c                 | LR__2722
1a04c     A7 F0 03 F6 | 	mov	ptra, fp
1a050     B2 00 A0 FD | 	call	#popregs_
1a054                 | __system__stat_ret
1a054     2D 00 64 FD | 	ret
1a058                 | 
1a058                 | __system__read
1a058     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a05c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a060     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a064     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a068     01 FA 65 36 |  if_ae	neg	result1, #1
1a06c     20 00 90 3D |  if_ae	jmp	#LR__2730
1a070     34 12 06 FD | 	qmul	arg01, #52
1a074     02 00 00 FF 
1a078     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a07c     18 12 62 FD | 	getqx	arg01
1a080     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a084     02 00 00 FF 
1a088     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a08c     D0 0F B0 FD | 	call	#__system___vfsread
1a090                 | LR__2730
1a090                 | __system__read_ret
1a090     2D 00 64 FD | 	ret
1a094                 | 
1a094                 | __system__close
1a094     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a098     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a09c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a0a0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a0a4     01 FA 65 36 |  if_ae	neg	result1, #1
1a0a8     20 00 90 3D |  if_ae	jmp	#LR__2740
1a0ac     34 12 06 FD | 	qmul	arg01, #52
1a0b0     02 00 00 FF 
1a0b4     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a0b8     18 12 62 FD | 	getqx	arg01
1a0bc     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a0c0     02 00 00 FF 
1a0c4     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a0c8     4C F9 BF FD | 	call	#__system___closeraw
1a0cc                 | LR__2740
1a0cc                 | __system__close_ret
1a0cc     2D 00 64 FD | 	ret
1a0d0                 | 
1a0d0                 | __system__lseek
1a0d0     06 4A 05 F6 | 	mov	COUNT_, #6
1a0d4     A8 00 A0 FD | 	call	#pushregs_
1a0d8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a0dc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a0e0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a0e4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a0e8     01 FA 65 36 |  if_ae	neg	result1, #1
1a0ec     C4 00 90 3D |  if_ae	jmp	#LR__2751
1a0f0     34 12 06 FD | 	qmul	arg01, #52
1a0f4     02 00 00 FF 
1a0f8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a0fc     18 1E 62 FD | 	getqx	local01
1a100     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1a104     30 1E 06 F1 | 	add	local01, #48
1a108     0F 13 0A FB | 	rdlong	arg01, local01 wz
1a10c     30 1E 86 F1 | 	sub	local01, #48
1a110     02 00 00 FF 
1a114     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a118     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a11c     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1a120     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a124     01 FA 65 A6 |  if_e	neg	result1, #1
1a128     88 00 90 AD |  if_e	jmp	#LR__2751
1a12c     08 1E 06 F1 | 	add	local01, #8
1a130     0F 21 02 FB | 	rdlong	local02, local01
1a134     08 1E 86 F1 | 	sub	local01, #8
1a138     40 20 CE F7 | 	test	local02, #64 wz
1a13c     08 1E 06 51 |  if_ne	add	local01, #8
1a140     0F 21 02 5B |  if_ne	rdlong	local02, local01
1a144     80 20 46 55 |  if_ne	or	local02, #128
1a148     0F 21 62 5C |  if_ne	wrlong	local02, local01
1a14c     08 1E 86 51 |  if_ne	sub	local01, #8
1a150     30 1E 06 F1 | 	add	local01, #48
1a154     0F 23 02 FB | 	rdlong	local03, local01
1a158     11 25 02 F6 | 	mov	local04, local03
1a15c     30 1E 86 F1 | 	sub	local01, #48
1a160     13 24 46 F7 | 	zerox	local04, #19
1a164     14 22 46 F0 | 	shr	local03, #20
1a168     02 22 66 F0 | 	shl	local03, #2
1a16c     ED 22 02 F1 | 	add	local03, __methods__
1a170     11 23 02 FB | 	rdlong	local03, local03
1a174     0F 13 02 F6 | 	mov	arg01, local01
1a178     F2 26 02 F6 | 	mov	local05, objptr
1a17c     12 E5 01 F6 | 	mov	objptr, local04
1a180     2D 22 62 FD | 	call	local03
1a184     13 E5 01 F6 | 	mov	objptr, local05
1a188     FD 28 02 F6 | 	mov	local06, result1
1a18c     00 28 56 F2 | 	cmps	local06, #0 wc
1a190     1C 00 90 3D |  if_ae	jmp	#LR__2750
1a194     14 13 6A F6 | 	neg	arg01, local06 wz
1a198     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a19c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a1a0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a1a4     01 FA 65 56 |  if_ne	neg	result1, #1
1a1a8     00 FA 05 A6 |  if_e	mov	result1, #0
1a1ac     04 00 90 FD | 	jmp	#LR__2751
1a1b0                 | LR__2750
1a1b0     14 FB 01 F6 | 	mov	result1, local06
1a1b4                 | LR__2751
1a1b4     A7 F0 03 F6 | 	mov	ptra, fp
1a1b8     B2 00 A0 FD | 	call	#popregs_
1a1bc                 | __system__lseek_ret
1a1bc     2D 00 64 FD | 	ret
1a1c0                 | 
1a1c0                 | __system___ioctl
1a1c0     03 4A 05 F6 | 	mov	COUNT_, #3
1a1c4     A8 00 A0 FD | 	call	#pushregs_
1a1c8     00 12 4E F2 | 	cmps	arg01, #0 wz
1a1cc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a1d0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1a1d4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a1d8     01 FA 65 A6 |  if_e	neg	result1, #1
1a1dc     5C 00 90 AD |  if_e	jmp	#LR__2761
1a1e0     28 12 06 F1 | 	add	arg01, #40
1a1e4     09 1F 02 FB | 	rdlong	local01, arg01
1a1e8     0F 21 02 F6 | 	mov	local02, local01
1a1ec     28 12 86 F1 | 	sub	arg01, #40
1a1f0     13 20 46 F7 | 	zerox	local02, #19
1a1f4     14 1E 46 F0 | 	shr	local01, #20
1a1f8     02 1E 66 F0 | 	shl	local01, #2
1a1fc     ED 1E 02 F1 | 	add	local01, __methods__
1a200     0F 1F 02 FB | 	rdlong	local01, local01
1a204     F2 22 02 F6 | 	mov	local03, objptr
1a208     10 E5 01 F6 | 	mov	objptr, local02
1a20c     2D 1E 62 FD | 	call	local01
1a210     11 E5 01 F6 | 	mov	objptr, local03
1a214     FD 12 0A F6 | 	mov	arg01, result1 wz
1a218     1C 00 90 AD |  if_e	jmp	#LR__2760
1a21c     00 12 4E F2 | 	cmps	arg01, #0 wz
1a220     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a224     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a228     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a22c     01 FA 65 56 |  if_ne	neg	result1, #1
1a230     00 FA 05 A6 |  if_e	mov	result1, #0
1a234     04 00 90 FD | 	jmp	#LR__2761
1a238                 | LR__2760
1a238     00 FA 05 F6 | 	mov	result1, #0
1a23c                 | LR__2761
1a23c     A7 F0 03 F6 | 	mov	ptra, fp
1a240     B2 00 A0 FD | 	call	#popregs_
1a244                 | __system___ioctl_ret
1a244     2D 00 64 FD | 	ret
1a248                 | 
1a248                 | __system___isatty
1a248     00 4A 05 F6 | 	mov	COUNT_, #0
1a24c     A8 00 A0 FD | 	call	#pushregs_
1a250     0C F0 07 F1 | 	add	ptra, #12
1a254     04 4E 05 F1 | 	add	fp, #4
1a258     A7 12 62 FC | 	wrlong	arg01, fp
1a25c     04 4E 05 F1 | 	add	fp, #4
1a260     A7 16 02 F6 | 	mov	arg03, fp
1a264     08 4E 85 F1 | 	sub	fp, #8
1a268     00 15 06 F6 | 	mov	arg02, #256
1a26c     50 FF BF FD | 	call	#__system___ioctl
1a270     00 FA 0D F2 | 	cmp	result1, #0 wz
1a274     01 FA 05 A6 |  if_e	mov	result1, #1
1a278     00 FA 05 56 |  if_ne	mov	result1, #0
1a27c     A7 F0 03 F6 | 	mov	ptra, fp
1a280     B2 00 A0 FD | 	call	#popregs_
1a284                 | __system___isatty_ret
1a284     2D 00 64 FD | 	ret
1a288                 | 
1a288                 | __system____getftab
1a288     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a28c     34 12 06 CD |  if_b	qmul	arg01, #52
1a290     00 FA 05 36 |  if_ae	mov	result1, #0
1a294     02 00 00 CF 
1a298     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1a29c     18 FA 61 CD |  if_b	getqx	result1
1a2a0     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1a2a4     02 00 00 CF 
1a2a8     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1a2ac                 | __system____getftab_ret
1a2ac     2D 00 64 FD | 	ret
1a2b0                 | 
1a2b0                 | __system__strncpy
1a2b0     09 01 02 F6 | 	mov	_var01, arg01
1a2b4                 | LR__2770
1a2b4     01 16 86 F1 | 	sub	arg03, #1
1a2b8     00 16 56 F2 | 	cmps	arg03, #0 wc
1a2bc     18 00 90 CD |  if_b	jmp	#LR__2771
1a2c0     0A FB C1 FA | 	rdbyte	result1, arg02
1a2c4     00 FB 41 FC | 	wrbyte	result1, _var01
1a2c8     01 14 06 F1 | 	add	arg02, #1
1a2cc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a2d0     01 00 06 F1 | 	add	_var01, #1
1a2d4     DC FF 9F 5D |  if_ne	jmp	#LR__2770
1a2d8                 | LR__2771
1a2d8     97 0C 48 FB | 	callpa	#(@LR__2773-@LR__2772)>>2,fcache_load_ptr_
1a2dc                 | LR__2772
1a2dc     01 16 86 F1 | 	sub	arg03, #1
1a2e0     00 16 56 F2 | 	cmps	arg03, #0 wc
1a2e4     00 03 02 36 |  if_ae	mov	_var02, _var01
1a2e8     01 00 06 31 |  if_ae	add	_var01, #1
1a2ec     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1a2f0     E8 FF 9F 3D |  if_ae	jmp	#LR__2772
1a2f4                 | LR__2773
1a2f4     09 FB 01 F6 | 	mov	result1, arg01
1a2f8                 | __system__strncpy_ret
1a2f8     2D 00 64 FD | 	ret
1a2fc                 | 
1a2fc                 | __system__strncat
1a2fc     00 14 4E F2 | 	cmps	arg02, #0 wz
1a300     50 00 90 AD |  if_e	jmp	#LR__2784
1a304     01 16 16 F2 | 	cmp	arg03, #1 wc
1a308     48 00 90 CD |  if_b	jmp	#LR__2784
1a30c     09 01 02 F6 | 	mov	_var01, arg01
1a310     97 1E 48 FB | 	callpa	#(@LR__2782-@LR__2780)>>2,fcache_load_ptr_
1a314                 | LR__2780
1a314     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a318     01 00 06 51 |  if_ne	add	_var01, #1
1a31c     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
1a320     0B 03 02 F6 | 	mov	_var02, arg03
1a324                 | LR__2781
1a324     0A 05 C2 FA | 	rdbyte	_var03, arg02
1a328     02 07 02 F6 | 	mov	_var04, _var03
1a32c     07 06 4E F7 | 	zerox	_var04, #7 wz
1a330     01 14 06 F1 | 	add	arg02, #1
1a334     18 00 90 AD |  if_e	jmp	#LR__2783
1a338     01 02 86 F1 | 	sub	_var02, #1
1a33c     00 02 56 F2 | 	cmps	_var02, #0 wc
1a340     00 07 02 36 |  if_ae	mov	_var04, _var01
1a344     01 00 06 31 |  if_ae	add	_var01, #1
1a348     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1a34c     D4 FF 9F 3D |  if_ae	jmp	#LR__2781
1a350                 | LR__2782
1a350                 | LR__2783
1a350     00 01 48 FC | 	wrbyte	#0, _var01
1a354                 | LR__2784
1a354     09 FB 01 F6 | 	mov	result1, arg01
1a358                 | __system__strncat_ret
1a358     2D 00 64 FD | 	ret
1a35c                 | 
1a35c                 | __system__strncmp
1a35c     09 01 0A F6 | 	mov	_var01, arg01 wz
1a360     14 00 90 5D |  if_ne	jmp	#LR__2790
1a364     00 14 0E F2 | 	cmp	arg02, #0 wz
1a368     01 02 66 56 |  if_ne	neg	_var02, #1
1a36c     00 02 06 A6 |  if_e	mov	_var02, #0
1a370     01 FB 01 F6 | 	mov	result1, _var02
1a374     74 00 90 FD | 	jmp	#__system__strncmp_ret
1a378                 | LR__2790
1a378     00 14 0E F2 | 	cmp	arg02, #0 wz
1a37c     01 FA 05 A6 |  if_e	mov	result1, #1
1a380     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a384     0B 05 02 F6 | 	mov	_var03, arg03
1a388     97 16 48 FB | 	callpa	#(@LR__2792-@LR__2791)>>2,fcache_load_ptr_
1a38c                 | LR__2791
1a38c     00 07 C2 FA | 	rdbyte	_var04, _var01
1a390     0A 09 02 F6 | 	mov	_var05, arg02
1a394     04 0B C2 FA | 	rdbyte	_var06, _var05
1a398     01 04 86 F1 | 	sub	_var03, #1
1a39c     00 04 56 F2 | 	cmps	_var03, #0 wc
1a3a0     01 00 06 F1 | 	add	_var01, #1
1a3a4     01 14 06 F1 | 	add	arg02, #1
1a3a8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1a3ac     08 00 90 2D |  if_nc_and_z	jmp	#LR__2793
1a3b0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1a3b4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2791
1a3b8                 | LR__2792
1a3b8                 | LR__2793
1a3b8     00 04 56 F2 | 	cmps	_var03, #0 wc
1a3bc     00 FA 05 C6 |  if_b	mov	result1, #0
1a3c0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1a3c4     05 07 0A F2 | 	cmp	_var04, _var06 wz
1a3c8     00 FA 05 A6 |  if_e	mov	result1, #0
1a3cc     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a3d0     00 06 0E F2 | 	cmp	_var04, #0 wz
1a3d4     01 FA 65 A6 |  if_e	neg	result1, #1
1a3d8     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a3dc     00 0A 0E F2 | 	cmp	_var06, #0 wz
1a3e0     01 FA 05 A6 |  if_e	mov	result1, #1
1a3e4     03 FB 01 56 |  if_ne	mov	result1, _var04
1a3e8     05 FB 81 51 |  if_ne	sub	result1, _var06
1a3ec                 | __system__strncmp_ret
1a3ec     2D 00 64 FD | 	ret
1a3f0                 | 
1a3f0                 | __system____root_opendir
1a3f0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1a3f4     04 12 06 F1 | 	add	arg01, #4
1a3f8     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1a3fc     00 FA 05 F6 | 	mov	result1, #0
1a400     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1a404                 | __system____root_opendir_ret
1a404     2D 00 64 FD | 	ret
1a408                 | 
1a408                 | __system____root_readdir
1a408     03 4A 05 F6 | 	mov	COUNT_, #3
1a40c     A8 00 A0 FD | 	call	#pushregs_
1a410     09 1F 02 F6 | 	mov	local01, arg01
1a414     0A 21 02 F6 | 	mov	local02, arg02
1a418     04 1E 06 F1 | 	add	local01, #4
1a41c     0F 23 02 FB | 	rdlong	local03, local01
1a420     04 1E 86 F1 | 	sub	local01, #4
1a424                 | LR__2800
1a424     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1a428     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1a42c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1a430     01 FA 65 A6 |  if_e	neg	result1, #1
1a434     48 00 90 AD |  if_e	jmp	#LR__2801
1a438     11 17 0A FB | 	rdlong	arg03, local03 wz
1a43c     04 22 06 A1 |  if_e	add	local03, #4
1a440     E0 FF 9F AD |  if_e	jmp	#LR__2800
1a444     11 15 02 FB | 	rdlong	arg02, local03
1a448     01 14 06 F1 | 	add	arg02, #1
1a44c     10 13 02 F6 | 	mov	arg01, local02
1a450     40 16 06 F6 | 	mov	arg03, #64
1a454     58 FE BF FD | 	call	#__system__strncpy
1a458     50 20 06 F1 | 	add	local02, #80
1a45c     10 03 48 FC | 	wrbyte	#1, local02
1a460     08 20 86 F1 | 	sub	local02, #8
1a464     10 01 68 FC | 	wrlong	#0, local02
1a468     04 20 06 F1 | 	add	local02, #4
1a46c     10 01 68 FC | 	wrlong	#0, local02
1a470     04 22 06 F1 | 	add	local03, #4
1a474     04 1E 06 F1 | 	add	local01, #4
1a478     0F 23 62 FC | 	wrlong	local03, local01
1a47c     00 FA 05 F6 | 	mov	result1, #0
1a480                 | LR__2801
1a480     A7 F0 03 F6 | 	mov	ptra, fp
1a484     B2 00 A0 FD | 	call	#popregs_
1a488                 | __system____root_readdir_ret
1a488     2D 00 64 FD | 	ret
1a48c                 | 
1a48c                 | __system____root_closedir
1a48c     00 FA 05 F6 | 	mov	result1, #0
1a490                 | __system____root_closedir_ret
1a490     2D 00 64 FD | 	ret
1a494                 | 
1a494                 | __system____root_stat
1a494     0A 01 02 F6 | 	mov	_var01, arg02
1a498     00 13 02 F6 | 	mov	arg01, _var01
1a49c     00 14 06 F6 | 	mov	arg02, #0
1a4a0     30 16 06 F6 | 	mov	arg03, #48
1a4a4     98 00 A0 FD | 	call	#\builtin_bytefill_
1a4a8     08 00 06 F1 | 	add	_var01, #8
1a4ac     08 00 80 FF 
1a4b0     00 FF 6B FC | 	wrlong	##4607, _var01
1a4b4     00 FA 05 F6 | 	mov	result1, #0
1a4b8                 | __system____root_stat_ret
1a4b8     2D 00 64 FD | 	ret
1a4bc                 | 
1a4bc                 | __system___normalizeName
1a4bc     00 00 06 F6 | 	mov	_var01, #0
1a4c0     09 03 02 F6 | 	mov	_var02, arg01
1a4c4     01 05 02 F6 | 	mov	_var03, _var02
1a4c8                 | LR__2810
1a4c8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a4cc     5C 01 90 AD |  if_e	jmp	#LR__2829
1a4d0     00 00 0E F2 | 	cmp	_var01, #0 wz
1a4d4     02 07 02 56 |  if_ne	mov	_var04, _var03
1a4d8     01 04 06 51 |  if_ne	add	_var03, #1
1a4dc     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1a4e0     00 00 06 56 |  if_ne	mov	_var01, #0
1a4e4     01 07 C2 FA | 	rdbyte	_var04, _var02
1a4e8     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a4ec     D8 00 90 5D |  if_ne	jmp	#LR__2822
1a4f0     01 02 06 F1 | 	add	_var02, #1
1a4f4     01 07 C2 FA | 	rdbyte	_var04, _var02
1a4f8     01 02 86 F1 | 	sub	_var02, #1
1a4fc     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a500     18 00 90 AD |  if_e	jmp	#LR__2811
1a504     01 02 06 F1 | 	add	_var02, #1
1a508     01 09 C2 FA | 	rdbyte	_var05, _var02
1a50c     01 02 86 F1 | 	sub	_var02, #1
1a510     04 0B 02 F6 | 	mov	_var06, _var05
1a514     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a518     10 00 90 5D |  if_ne	jmp	#LR__2812
1a51c                 | LR__2811
1a51c     01 0D 02 F6 | 	mov	_var07, _var02
1a520     01 0C 06 F1 | 	add	_var07, #1
1a524     06 03 02 F6 | 	mov	_var02, _var07
1a528     E0 00 90 FD | 	jmp	#LR__2826
1a52c                 | LR__2812
1a52c     01 02 06 F1 | 	add	_var02, #1
1a530     01 0D C2 FA | 	rdbyte	_var07, _var02
1a534     01 02 86 F1 | 	sub	_var02, #1
1a538     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a53c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a540     84 00 90 5D |  if_ne	jmp	#LR__2821
1a544     02 02 06 F1 | 	add	_var02, #2
1a548     01 0D C2 FA | 	rdbyte	_var07, _var02
1a54c     02 02 86 F1 | 	sub	_var02, #2
1a550     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a554     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a558     18 00 90 AD |  if_e	jmp	#LR__2813
1a55c     02 02 06 F1 | 	add	_var02, #2
1a560     01 09 C2 FA | 	rdbyte	_var05, _var02
1a564     02 02 86 F1 | 	sub	_var02, #2
1a568     04 0B 02 F6 | 	mov	_var06, _var05
1a56c     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a570     54 00 90 5D |  if_ne	jmp	#LR__2820
1a574                 | LR__2813
1a574     02 02 06 F1 | 	add	_var02, #2
1a578     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1a57c     40 00 90 ED |  if_be	jmp	#LR__2819
1a580     02 0F 02 F6 | 	mov	_var08, _var03
1a584     01 0E 86 F1 | 	sub	_var08, #1
1a588                 | LR__2814
1a588     07 07 C2 FA | 	rdbyte	_var04, _var08
1a58c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a590     0C 00 90 5D |  if_ne	jmp	#LR__2815
1a594     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a598     01 0E 86 11 |  if_a	sub	_var08, #1
1a59c     E8 FF 9F 1D |  if_a	jmp	#LR__2814
1a5a0                 | LR__2815
1a5a0     97 0C 48 FB | 	callpa	#(@LR__2817-@LR__2816)>>2,fcache_load_ptr_
1a5a4                 | LR__2816
1a5a4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a5a8     10 00 90 ED |  if_be	jmp	#LR__2818
1a5ac     07 07 C2 FA | 	rdbyte	_var04, _var08
1a5b0     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a5b4     01 0E 86 51 |  if_ne	sub	_var08, #1
1a5b8     E8 FF 9F 5D |  if_ne	jmp	#LR__2816
1a5bc                 | LR__2817
1a5bc                 | LR__2818
1a5bc     07 05 02 F6 | 	mov	_var03, _var08
1a5c0                 | LR__2819
1a5c0     01 00 06 F6 | 	mov	_var01, #1
1a5c4     44 00 90 FD | 	jmp	#LR__2826
1a5c8                 | LR__2820
1a5c8                 | LR__2821
1a5c8                 | LR__2822
1a5c8     97 18 48 FB | 	callpa	#(@LR__2824-@LR__2823)>>2,fcache_load_ptr_
1a5cc                 | LR__2823
1a5cc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a5d0     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1a5d4     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1a5d8     20 00 90 AD |  if_e	jmp	#LR__2825
1a5dc     01 0B 02 F6 | 	mov	_var06, _var02
1a5e0     01 09 02 F6 | 	mov	_var05, _var02
1a5e4     01 08 06 F1 | 	add	_var05, #1
1a5e8     05 11 C2 FA | 	rdbyte	_var09, _var06
1a5ec     04 03 02 F6 | 	mov	_var02, _var05
1a5f0     02 11 42 FC | 	wrbyte	_var09, _var03
1a5f4     01 04 06 F1 | 	add	_var03, #1
1a5f8     D0 FF 9F FD | 	jmp	#LR__2823
1a5fc                 | LR__2824
1a5fc                 | LR__2825
1a5fc     01 07 C2 FA | 	rdbyte	_var04, _var02
1a600     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a604     C0 FE 9F 5D |  if_ne	jmp	#LR__2810
1a608     01 00 06 F6 | 	mov	_var01, #1
1a60c                 | LR__2826
1a60c     97 0C 48 FB | 	callpa	#(@LR__2828-@LR__2827)>>2,fcache_load_ptr_
1a610                 | LR__2827
1a610     01 07 C2 FA | 	rdbyte	_var04, _var02
1a614     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a618     01 0D 02 A6 |  if_e	mov	_var07, _var02
1a61c     01 0C 06 A1 |  if_e	add	_var07, #1
1a620     06 03 02 A6 |  if_e	mov	_var02, _var07
1a624     E8 FF 9F AD |  if_e	jmp	#LR__2827
1a628                 | LR__2828
1a628     9C FE 9F FD | 	jmp	#LR__2810
1a62c                 | LR__2829
1a62c     02 01 48 FC | 	wrbyte	#0, _var03
1a630                 | __system___normalizeName_ret
1a630     2D 00 64 FD | 	ret
1a634                 | 
1a634                 | __system___strrev
1a634     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1a638     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1a63c     09 03 02 F6 | 	mov	_var02, arg01
1a640     97 1A 48 FB | 	callpa	#(@LR__2832-@LR__2830)>>2,fcache_load_ptr_
1a644                 | LR__2830
1a644     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1a648     01 02 06 51 |  if_ne	add	_var02, #1
1a64c     F4 FF 9F 5D |  if_ne	jmp	#LR__2830
1a650     01 02 86 F1 | 	sub	_var02, #1
1a654                 | LR__2831
1a654     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1a658     1C 00 90 ED |  if_be	jmp	#LR__2833
1a65c     09 01 C2 FA | 	rdbyte	_var01, arg01
1a660     01 05 C2 FA | 	rdbyte	_var03, _var02
1a664     09 05 42 FC | 	wrbyte	_var03, arg01
1a668     01 01 42 FC | 	wrbyte	_var01, _var02
1a66c     01 12 06 F1 | 	add	arg01, #1
1a670     01 02 86 F1 | 	sub	_var02, #1
1a674     DC FF 9F FD | 	jmp	#LR__2831
1a678                 | LR__2832
1a678                 | LR__2833
1a678                 | __system___strrev_ret
1a678     2D 00 64 FD | 	ret
1a67c                 | 
1a67c                 | __system___fmtpad
1a67c     06 4A 05 F6 | 	mov	COUNT_, #6
1a680     A8 00 A0 FD | 	call	#pushregs_
1a684     09 1F 02 F6 | 	mov	local01, arg01
1a688     0A 21 02 F6 | 	mov	local02, arg02
1a68c     0B 23 02 F6 | 	mov	local03, arg03
1a690     10 13 EA F8 | 	getbyte	arg01, local02, #1
1a694     16 20 46 F0 | 	shr	local02, #22
1a698     03 20 0E F5 | 	and	local02, #3 wz
1a69c     00 24 06 F6 | 	mov	local04, #0
1a6a0     01 20 06 A6 |  if_e	mov	local02, #1
1a6a4     0C 21 CA F7 | 	test	local02, arg04 wz
1a6a8     00 FA 05 A6 |  if_e	mov	result1, #0
1a6ac     88 00 90 AD |  if_e	jmp	#LR__2843
1a6b0     09 23 C2 F2 | 	subr	local03, arg01
1a6b4     01 22 56 F2 | 	cmps	local03, #1 wc
1a6b8     00 FA 05 C6 |  if_b	mov	result1, #0
1a6bc     78 00 90 CD |  if_b	jmp	#LR__2843
1a6c0     03 20 0E F2 | 	cmp	local02, #3 wz
1a6c4     18 00 90 5D |  if_ne	jmp	#LR__2840
1a6c8     01 18 0E F2 | 	cmp	arg04, #1 wz
1a6cc     6E 20 62 FD | 	wrz	local02
1a6d0     10 23 02 F1 | 	add	local03, local02
1a6d4     11 23 52 F6 | 	abs	local03, local03 wc
1a6d8     01 22 46 F0 | 	shr	local03, #1
1a6dc     11 23 82 F6 | 	negc	local03, local03
1a6e0                 | LR__2840
1a6e0     01 22 56 F2 | 	cmps	local03, #1 wc
1a6e4     4C 00 90 CD |  if_b	jmp	#LR__2842
1a6e8     11 27 02 F6 | 	mov	local05, local03
1a6ec                 | LR__2841
1a6ec     0F 21 02 F6 | 	mov	local02, local01
1a6f0     0F 29 02 F6 | 	mov	local06, local01
1a6f4     13 20 46 F7 | 	zerox	local02, #19
1a6f8     14 28 46 F0 | 	shr	local06, #20
1a6fc     02 28 66 F0 | 	shl	local06, #2
1a700     ED 28 02 F1 | 	add	local06, __methods__
1a704     14 29 02 FB | 	rdlong	local06, local06
1a708     20 12 06 F6 | 	mov	arg01, #32
1a70c     F2 22 02 F6 | 	mov	local03, objptr
1a710     10 E5 01 F6 | 	mov	objptr, local02
1a714     2D 28 62 FD | 	call	local06
1a718     11 E5 01 F6 | 	mov	objptr, local03
1a71c     FD 28 02 F6 | 	mov	local06, result1
1a720     00 28 56 F2 | 	cmps	local06, #0 wc
1a724     14 FB 01 C6 |  if_b	mov	result1, local06
1a728     0C 00 90 CD |  if_b	jmp	#LR__2843
1a72c     14 25 02 F1 | 	add	local04, local06
1a730     EE 27 6E FB | 	djnz	local05, #LR__2841
1a734                 | LR__2842
1a734     12 FB 01 F6 | 	mov	result1, local04
1a738                 | LR__2843
1a738     A7 F0 03 F6 | 	mov	ptra, fp
1a73c     B2 00 A0 FD | 	call	#popregs_
1a740                 | __system___fmtpad_ret
1a740     2D 00 64 FD | 	ret
1a744                 | 
1a744                 | __system___uitoa
1a744     04 4A 05 F6 | 	mov	COUNT_, #4
1a748     A8 00 A0 FD | 	call	#pushregs_
1a74c     09 1F 02 F6 | 	mov	local01, arg01
1a750     00 1A 4E F2 | 	cmps	arg05, #0 wz
1a754     0F 1B 02 F6 | 	mov	arg05, local01
1a758     00 20 06 F6 | 	mov	local02, #0
1a75c     37 22 06 56 |  if_ne	mov	local03, #55
1a760     57 22 06 A6 |  if_e	mov	local03, #87
1a764                 | LR__2850
1a764     0B 15 12 FD | 	qdiv	arg02, arg03
1a768     19 24 62 FD | 	getqy	local04
1a76c     0B 15 12 FD | 	qdiv	arg02, arg03
1a770     0A 24 16 F2 | 	cmp	local04, #10 wc
1a774     30 24 06 C1 |  if_b	add	local04, #48
1a778     11 25 02 31 |  if_ae	add	local04, local03
1a77c     0D 25 42 FC | 	wrbyte	local04, arg05
1a780     01 1A 06 F1 | 	add	arg05, #1
1a784     01 20 06 F1 | 	add	local02, #1
1a788     18 14 62 FD | 	getqx	arg02
1a78c     00 14 0E F2 | 	cmp	arg02, #0 wz
1a790     D0 FF 9F 5D |  if_ne	jmp	#LR__2850
1a794     0C 21 12 F2 | 	cmp	local02, arg04 wc
1a798     C8 FF 9F CD |  if_b	jmp	#LR__2850
1a79c     0D 01 48 FC | 	wrbyte	#0, arg05
1a7a0     0F 13 02 F6 | 	mov	arg01, local01
1a7a4     8C FE BF FD | 	call	#__system___strrev
1a7a8     10 FB 01 F6 | 	mov	result1, local02
1a7ac     A7 F0 03 F6 | 	mov	ptra, fp
1a7b0     B2 00 A0 FD | 	call	#popregs_
1a7b4                 | __system___uitoa_ret
1a7b4     2D 00 64 FD | 	ret
1a7b8                 | 
1a7b8                 | __system__disassemble_0306
1a7b8     10 4A 05 F6 | 	mov	COUNT_, #16
1a7bc     A8 00 A0 FD | 	call	#pushregs_
1a7c0     09 1F 02 F6 | 	mov	local01, arg01
1a7c4     0A 21 02 F6 | 	mov	local02, arg02
1a7c8     0B 23 02 F6 | 	mov	local03, arg03
1a7cc     0C 25 02 F6 | 	mov	local04, arg04
1a7d0     0D 27 02 F6 | 	mov	local05, arg05
1a7d4     13 13 52 F6 | 	abs	arg01, local05 wc
1a7d8     1F 28 C6 C9 |  if_b	decod	local06, #31
1a7dc     00 28 06 36 |  if_ae	mov	local06, #0
1a7e0     B4 D3 BF FD | 	call	#__system___float_fromuns
1a7e4     14 FB 61 F5 | 	xor	result1, local06
1a7e8     FD 2A 02 F6 | 	mov	local07, result1
1a7ec     00 2C 06 F6 | 	mov	local08, #0
1a7f0     0F 13 02 F6 | 	mov	arg01, local01
1a7f4     00 14 06 F6 | 	mov	arg02, #0
1a7f8     01 16 06 F6 | 	mov	arg03, #1
1a7fc     F8 DA BF FD | 	call	#__system___float_cmp
1a800     00 FA 0D F2 | 	cmp	result1, #0 wz
1a804     00 2E 06 A6 |  if_e	mov	local09, #0
1a808     10 01 68 AC |  if_e	wrlong	#0, local02
1a80c     11 2F 62 AC |  if_e	wrlong	local09, local03
1a810     8C 01 90 AD |  if_e	jmp	#LR__2872
1a814     0F 13 02 F6 | 	mov	arg01, local01
1a818     A8 DF BF FD | 	call	#__system____builtin_ilogb
1a81c     FD 30 02 F6 | 	mov	local10, result1
1a820     0A 26 0E F2 | 	cmp	local05, #10 wz
1a824     24 00 90 5D |  if_ne	jmp	#LR__2860
1a828     18 2F 02 F6 | 	mov	local09, local10
1a82c     01 2E 66 F0 | 	shl	local09, #1
1a830     18 2F 02 F1 | 	add	local09, local10
1a834     17 31 52 F6 | 	abs	local10, local09 wc
1a838     0A 30 16 FD | 	qdiv	local10, #10
1a83c     09 32 06 F6 | 	mov	local11, #9
1a840     18 30 62 FD | 	getqx	local10
1a844     18 31 82 F6 | 	negc	local10, local10
1a848     04 00 90 FD | 	jmp	#LR__2861
1a84c                 | LR__2860
1a84c     18 32 06 F6 | 	mov	local11, #24
1a850                 | LR__2861
1a850                 | LR__2862
1a850     08 2C 56 F2 | 	cmps	local08, #8 wc
1a854     01 2C 06 F1 | 	add	local08, #1
1a858     60 00 90 3D |  if_ae	jmp	#LR__2863
1a85c     00 C0 1F FF 
1a860     00 12 06 F6 | 	mov	arg01, ##1065353216
1a864     15 15 02 F6 | 	mov	arg02, local07
1a868     18 17 02 F6 | 	mov	arg03, local10
1a86c     88 E3 BF FD | 	call	#__system___float_pow_n
1a870     FD 14 02 F6 | 	mov	arg02, result1
1a874     0F 13 02 F6 | 	mov	arg01, local01
1a878     4C D8 BF FD | 	call	#__system___float_div
1a87c     FD 34 02 F6 | 	mov	local12, result1
1a880     1A 13 02 F6 | 	mov	arg01, local12
1a884     00 C0 1F FF 
1a888     00 14 06 F6 | 	mov	arg02, ##1065353216
1a88c     01 16 06 F6 | 	mov	arg03, #1
1a890     64 DA BF FD | 	call	#__system___float_cmp
1a894     00 FA 55 F2 | 	cmps	result1, #0 wc
1a898     01 30 86 C1 |  if_b	sub	local10, #1
1a89c     B0 FF 9F CD |  if_b	jmp	#LR__2862
1a8a0     15 15 02 F6 | 	mov	arg02, local07
1a8a4     1A 13 02 F6 | 	mov	arg01, local12
1a8a8     01 16 66 F6 | 	neg	arg03, #1
1a8ac     48 DA BF FD | 	call	#__system___float_cmp
1a8b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a8b4     01 30 06 31 |  if_ae	add	local10, #1
1a8b8     94 FF 9F 3D |  if_ae	jmp	#LR__2862
1a8bc                 | LR__2863
1a8bc     1A 13 02 F6 | 	mov	arg01, local12
1a8c0     00 DF BF FD | 	call	#__system____builtin_ilogb
1a8c4     FD 36 02 F6 | 	mov	local13, result1
1a8c8     1A 39 02 F6 | 	mov	local14, local12
1a8cc     17 39 06 F4 | 	bitl	local14, #279
1a8d0     17 38 26 F4 | 	bith	local14, #23
1a8d4     1B 39 62 F0 | 	shl	local14, local13
1a8d8     02 26 0E F2 | 	cmp	local05, #2 wz
1a8dc     02 24 66 A0 |  if_e	shl	local04, #2
1a8e0     00 3A 06 F6 | 	mov	local15, #0
1a8e4     00 24 56 F2 | 	cmps	local04, #0 wc
1a8e8     10 00 90 3D |  if_ae	jmp	#LR__2864
1a8ec     18 25 C2 F2 | 	subr	local04, local10
1a8f0     00 24 56 F2 | 	cmps	local04, #0 wc
1a8f4     A0 00 90 CD |  if_b	jmp	#LR__2871
1a8f8     04 00 90 FD | 	jmp	#LR__2865
1a8fc                 | LR__2864
1a8fc     01 24 06 F1 | 	add	local04, #1
1a900                 | LR__2865
1a900     19 25 7A F3 | 	fles	local04, local11 wcz
1a904     01 3C 06 F6 | 	mov	local16, #1
1a908     97 22 48 FB | 	callpa	#(@LR__2867-@LR__2866)>>2,fcache_load_ptr_
1a90c                 | LR__2866
1a90c     00 40 00 FF 
1a910     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1a914     38 00 90 3D |  if_ae	jmp	#LR__2868
1a918     01 24 56 F2 | 	cmps	local04, #1 wc
1a91c     01 24 86 F1 | 	sub	local04, #1
1a920     2C 00 90 CD |  if_b	jmp	#LR__2868
1a924     13 3B 02 FD | 	qmul	local15, local05
1a928     1C 37 02 F6 | 	mov	local13, local14
1a92c     17 36 46 F0 | 	shr	local13, #23
1a930     17 39 06 F4 | 	bitl	local14, #279
1a934     18 3A 62 FD | 	getqx	local15
1a938     13 3D 02 FD | 	qmul	local16, local05
1a93c     18 3C 62 FD | 	getqx	local16
1a940     13 39 02 FD | 	qmul	local14, local05
1a944     1B 3B 02 F1 | 	add	local15, local13
1a948     18 38 62 FD | 	getqx	local14
1a94c     BC FF 9F FD | 	jmp	#LR__2866
1a950                 | LR__2867
1a950                 | LR__2868
1a950     13 2F 02 F6 | 	mov	local09, local05
1a954     17 2E 66 F0 | 	shl	local09, #23
1a958     17 37 52 F6 | 	abs	local13, local09 wc
1a95c     01 36 46 F0 | 	shr	local13, #1
1a960     1B 37 82 F6 | 	negc	local13, local13
1a964     1B 39 1A F2 | 	cmp	local14, local13 wcz
1a968     20 00 90 1D |  if_a	jmp	#LR__2869
1a96c     17 26 66 F0 | 	shl	local05, #23
1a970     13 37 52 F6 | 	abs	local13, local05 wc
1a974     01 36 46 F0 | 	shr	local13, #1
1a978     1B 37 82 F6 | 	negc	local13, local13
1a97c     1B 39 0A F2 | 	cmp	local14, local13 wz
1a980     14 00 90 5D |  if_ne	jmp	#LR__2870
1a984     01 3A CE F7 | 	test	local15, #1 wz
1a988     0C 00 90 AD |  if_e	jmp	#LR__2870
1a98c                 | LR__2869
1a98c     01 3A 06 F1 | 	add	local15, #1
1a990     1E 3B 0A F2 | 	cmp	local15, local16 wz
1a994     01 30 06 A1 |  if_e	add	local10, #1
1a998                 | LR__2870
1a998                 | LR__2871
1a998     10 3B 62 FC | 	wrlong	local15, local02
1a99c     11 31 62 FC | 	wrlong	local10, local03
1a9a0                 | LR__2872
1a9a0     A7 F0 03 F6 | 	mov	ptra, fp
1a9a4     B2 00 A0 FD | 	call	#popregs_
1a9a8                 | __system__disassemble_0306_ret
1a9a8     2D 00 64 FD | 	ret
1a9ac                 | 
1a9ac                 | __system__emitsign_0308
1a9ac     00 FA 05 F6 | 	mov	result1, #0
1a9b0     00 14 0E F2 | 	cmp	arg02, #0 wz
1a9b4     09 01 02 56 |  if_ne	mov	_var01, arg01
1a9b8     01 12 06 51 |  if_ne	add	arg01, #1
1a9bc     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1a9c0     01 FA 05 56 |  if_ne	mov	result1, #1
1a9c4     00 16 0E F2 | 	cmp	arg03, #0 wz
1a9c8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1a9cc     01 12 06 51 |  if_ne	add	arg01, #1
1a9d0     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1a9d4     02 FA 05 51 |  if_ne	add	result1, #2
1a9d8                 | __system__emitsign_0308_ret
1a9d8     2D 00 64 FD | 	ret
1a9dc                 | 
1a9dc                 | __system___gettxfunc
1a9dc     01 4A 05 F6 | 	mov	COUNT_, #1
1a9e0     A8 00 A0 FD | 	call	#pushregs_
1a9e4     A0 F8 BF FD | 	call	#__system____getftab
1a9e8     FD 1E 0A F6 | 	mov	local01, result1 wz
1a9ec     10 00 90 AD |  if_e	jmp	#LR__2880
1a9f0     08 1E 06 F1 | 	add	local01, #8
1a9f4     0F 15 0A FB | 	rdlong	arg02, local01 wz
1a9f8     08 1E 86 F1 | 	sub	local01, #8
1a9fc     08 00 90 5D |  if_ne	jmp	#LR__2881
1aa00                 | LR__2880
1aa00     00 FA 05 F6 | 	mov	result1, #0
1aa04     0C 00 90 FD | 	jmp	#LR__2882
1aa08                 | LR__2881
1aa08     00 70 02 FF 
1aa0c     00 1E 46 F5 | 	or	local01, ##81788928
1aa10     0F FB 01 F6 | 	mov	result1, local01
1aa14                 | LR__2882
1aa14     A7 F0 03 F6 | 	mov	ptra, fp
1aa18     B2 00 A0 FD | 	call	#popregs_
1aa1c                 | __system___gettxfunc_ret
1aa1c     2D 00 64 FD | 	ret
1aa20                 | 
1aa20                 | __system___getrxfunc
1aa20     01 4A 05 F6 | 	mov	COUNT_, #1
1aa24     A8 00 A0 FD | 	call	#pushregs_
1aa28     5C F8 BF FD | 	call	#__system____getftab
1aa2c     FD 1E 0A F6 | 	mov	local01, result1 wz
1aa30     10 00 90 AD |  if_e	jmp	#LR__2890
1aa34     08 1E 06 F1 | 	add	local01, #8
1aa38     0F 15 0A FB | 	rdlong	arg02, local01 wz
1aa3c     08 1E 86 F1 | 	sub	local01, #8
1aa40     08 00 90 5D |  if_ne	jmp	#LR__2891
1aa44                 | LR__2890
1aa44     00 FA 05 F6 | 	mov	result1, #0
1aa48     0C 00 90 FD | 	jmp	#LR__2892
1aa4c                 | LR__2891
1aa4c     00 78 02 FF 
1aa50     00 1E 46 F5 | 	or	local01, ##82837504
1aa54     0F FB 01 F6 | 	mov	result1, local01
1aa58                 | LR__2892
1aa58     A7 F0 03 F6 | 	mov	ptra, fp
1aa5c     B2 00 A0 FD | 	call	#popregs_
1aa60                 | __system___getrxfunc_ret
1aa60     2D 00 64 FD | 	ret
1aa64                 | 
1aa64                 | __system___getiolock_0348
1aa64     01 4A 05 F6 | 	mov	COUNT_, #1
1aa68     A8 00 A0 FD | 	call	#pushregs_
1aa6c     18 F8 BF FD | 	call	#__system____getftab
1aa70     FD 1E 0A F6 | 	mov	local01, result1 wz
1aa74     10 00 90 AD |  if_e	jmp	#LR__2900
1aa78     08 1E 06 F1 | 	add	local01, #8
1aa7c     0F FB 09 FB | 	rdlong	result1, local01 wz
1aa80     08 1E 86 F1 | 	sub	local01, #8
1aa84     18 00 90 5D |  if_ne	jmp	#LR__2901
1aa88                 | LR__2900
1aa88     01 00 00 FF 
1aa8c     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1aa90     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1aa94     01 00 00 FF 
1aa98     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1aa9c     08 00 90 FD | 	jmp	#LR__2902
1aaa0                 | LR__2901
1aaa0     0C 1E 06 F1 | 	add	local01, #12
1aaa4     0F FB 01 F6 | 	mov	result1, local01
1aaa8                 | LR__2902
1aaa8     A7 F0 03 F6 | 	mov	ptra, fp
1aaac     B2 00 A0 FD | 	call	#popregs_
1aab0                 | __system___getiolock_0348_ret
1aab0     2D 00 64 FD | 	ret
1aab4                 | 
1aab4                 | __system____ScanForChar
1aab4     09 01 02 F6 | 	mov	_var01, arg01
1aab8     09 03 02 F6 | 	mov	_var02, arg01
1aabc     97 06 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
1aac0                 | LR__2910
1aac0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1aac4     01 02 06 51 |  if_ne	add	_var02, #1
1aac8     F4 FF 9F 5D |  if_ne	jmp	#LR__2910
1aacc                 | LR__2911
1aacc     09 03 82 F1 | 	sub	_var02, arg01
1aad0     01 FB 01 F6 | 	mov	result1, _var02
1aad4     FD 12 0A F6 | 	mov	arg01, result1 wz
1aad8     00 FA 05 A6 |  if_e	mov	result1, #0
1aadc     B8 00 90 AD |  if_e	jmp	#LR__2918
1aae0     0A 05 02 F6 | 	mov	_var03, arg02
1aae4     07 04 4E F7 | 	zerox	_var03, #7 wz
1aae8     00 FA 05 A6 |  if_e	mov	result1, #0
1aaec     A8 00 90 AD |  if_e	jmp	#LR__2918
1aaf0     01 16 16 F2 | 	cmp	arg03, #1 wc
1aaf4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1aaf8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1aafc     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1ab00     94 00 90 4D |  if_c_and_nz	jmp	#LR__2918
1ab04     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1ab08     10 00 90 ED |  if_be	jmp	#LR__2912
1ab0c     00 18 0E F2 | 	cmp	arg04, #0 wz
1ab10     00 FA 05 A6 |  if_e	mov	result1, #0
1ab14     80 00 90 AD |  if_e	jmp	#LR__2918
1ab18     09 17 02 F6 | 	mov	arg03, arg01
1ab1c                 | LR__2912
1ab1c     01 16 86 F1 | 	sub	arg03, #1
1ab20     00 18 0E F2 | 	cmp	arg04, #0 wz
1ab24     38 00 90 5D |  if_ne	jmp	#LR__2914
1ab28     0B 07 02 F6 | 	mov	_var04, arg03
1ab2c     09 09 02 F6 | 	mov	_var05, arg01
1ab30                 | LR__2913
1ab30     04 07 12 F2 | 	cmp	_var04, _var05 wc
1ab34     5C 00 90 3D |  if_ae	jmp	#LR__2917
1ab38     03 05 02 F6 | 	mov	_var03, _var04
1ab3c     00 05 02 F1 | 	add	_var03, _var01
1ab40     02 05 C2 FA | 	rdbyte	_var03, _var03
1ab44     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1ab48     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1ab4c     01 06 06 A1 |  if_e	add	_var04, #1
1ab50     03 FB 01 A6 |  if_e	mov	result1, _var04
1ab54     40 00 90 AD |  if_e	jmp	#LR__2918
1ab58     01 06 06 F1 | 	add	_var04, #1
1ab5c     D0 FF 9F FD | 	jmp	#LR__2913
1ab60                 | LR__2914
1ab60     0B 07 02 F6 | 	mov	_var04, arg03
1ab64                 | LR__2915
1ab64     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1ab68     28 00 90 1D |  if_a	jmp	#LR__2916
1ab6c     03 09 02 F6 | 	mov	_var05, _var04
1ab70     00 09 02 F1 | 	add	_var05, _var01
1ab74     04 05 C2 FA | 	rdbyte	_var03, _var05
1ab78     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1ab7c     04 05 0A F2 | 	cmp	_var03, _var05 wz
1ab80     01 06 06 A1 |  if_e	add	_var04, #1
1ab84     03 FB 01 A6 |  if_e	mov	result1, _var04
1ab88     0C 00 90 AD |  if_e	jmp	#LR__2918
1ab8c     01 06 86 F1 | 	sub	_var04, #1
1ab90     D0 FF 9F FD | 	jmp	#LR__2915
1ab94                 | LR__2916
1ab94                 | LR__2917
1ab94     00 FA 05 F6 | 	mov	result1, #0
1ab98                 | LR__2918
1ab98                 | __system____ScanForChar_ret
1ab98     2D 00 64 FD | 	ret
1ab9c                 | 
1ab9c                 | __system___basic_dir
1ab9c     05 4A 05 F6 | 	mov	COUNT_, #5
1aba0     A8 00 A0 FD | 	call	#pushregs_
1aba4     4C F0 07 F1 | 	add	ptra, #76
1aba8     04 4E 05 F1 | 	add	fp, #4
1abac     A7 12 62 FC | 	wrlong	arg01, fp
1abb0     04 4E 05 F1 | 	add	fp, #4
1abb4     A7 14 62 FC | 	wrlong	arg02, fp
1abb8     04 4E 85 F1 | 	sub	fp, #4
1abbc     A7 14 0A FB | 	rdlong	arg02, fp wz
1abc0     04 4E 85 F1 | 	sub	fp, #4
1abc4     04 4E 05 51 |  if_ne	add	fp, #4
1abc8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1abcc     04 4E 85 51 |  if_ne	sub	fp, #4
1abd0     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1abd4     70 00 90 AD |  if_e	jmp	#LR__2920
1abd8     03 00 00 FF 
1abdc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1abe0     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1abe4     03 00 00 FF 
1abe8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1abec     03 00 00 5F 
1abf0     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1abf4     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1abf8     03 00 00 5F 
1abfc     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1ac00     14 EA BF 5D |  if_ne	call	#__system__closedir
1ac04     23 01 00 FF 
1ac08     E8 12 06 F6 | 	mov	arg01, ##@LR__4078
1ac0c     1C E9 BF FD | 	call	#__system__opendir
1ac10     03 00 00 FF 
1ac14     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ac18     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ac1c     08 4E 05 F1 | 	add	fp, #8
1ac20     A7 20 02 FB | 	rdlong	local02, fp
1ac24     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ac28     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ac2c     04 4E 85 F1 | 	sub	fp, #4
1ac30     A7 20 02 FB | 	rdlong	local02, fp
1ac34     04 4E 85 F1 | 	sub	fp, #4
1ac38     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ac3c     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ac40     03 00 00 FF 
1ac44     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1ac48                 | LR__2920
1ac48     03 00 00 FF 
1ac4c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ac50     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ac54     03 00 00 FF 
1ac58     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ac5c     23 01 00 AF 
1ac60     EA FA 05 A6 |  if_e	mov	result1, ##@LR__4079
1ac64     84 02 90 AD |  if_e	jmp	#LR__2933
1ac68                 | LR__2921
1ac68     03 00 00 FF 
1ac6c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ac70     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ac74     03 00 00 FF 
1ac78     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ac7c     0C EA BF FD | 	call	#__system__readdir
1ac80     0C 4E 05 F1 | 	add	fp, #12
1ac84     A7 FA 61 FC | 	wrlong	result1, fp
1ac88     0C 4E 85 F1 | 	sub	fp, #12
1ac8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac90     38 00 90 5D |  if_ne	jmp	#LR__2922
1ac94     03 00 00 FF 
1ac98     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ac9c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1aca0     03 00 00 FF 
1aca4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1aca8     6C E9 BF FD | 	call	#__system__closedir
1acac     03 00 00 FF 
1acb0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1acb4     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1acb8     03 00 00 FF 
1acbc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1acc0     23 01 00 FF 
1acc4     EC FA 05 F6 | 	mov	result1, ##@LR__4080
1acc8     20 02 90 FD | 	jmp	#LR__2933
1accc                 | LR__2922
1accc     0C 4E 05 F1 | 	add	fp, #12
1acd0     A7 12 02 FB | 	rdlong	arg01, fp
1acd4     0C 4E 85 F1 | 	sub	fp, #12
1acd8     03 00 00 FF 
1acdc     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1ace0     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1ace4     03 00 00 FF 
1ace8     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1acec     48 07 B0 FD | 	call	#__system___pat_match
1acf0     00 FA 0D F2 | 	cmp	result1, #0 wz
1acf4     70 FF 9F AD |  if_e	jmp	#LR__2921
1acf8     03 00 00 FF 
1acfc     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1ad00     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ad04     03 00 00 FF 
1ad08     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1ad0c     78 01 90 AD |  if_e	jmp	#LR__2929
1ad10     0C 4E 05 F1 | 	add	fp, #12
1ad14     A7 12 02 FB | 	rdlong	arg01, fp
1ad18     04 4E 05 F1 | 	add	fp, #4
1ad1c     A7 14 02 F6 | 	mov	arg02, fp
1ad20     10 4E 85 F1 | 	sub	fp, #16
1ad24     68 F2 BF FD | 	call	#__system__stat
1ad28     40 4E 05 F1 | 	add	fp, #64
1ad2c     A7 FA 61 FC | 	wrlong	result1, fp
1ad30     40 4E 85 F1 | 	sub	fp, #64
1ad34     00 FA 0D F2 | 	cmp	result1, #0 wz
1ad38     23 01 00 5F 
1ad3c     EE FA 05 56 |  if_ne	mov	result1, ##@LR__4081
1ad40     A8 01 90 5D |  if_ne	jmp	#LR__2933
1ad44     18 4E 05 F1 | 	add	fp, #24
1ad48     A7 20 02 FB | 	rdlong	local02, fp
1ad4c     78 00 00 FF 
1ad50     00 20 06 F5 | 	and	local02, ##61440
1ad54     2C 4E 05 F1 | 	add	fp, #44
1ad58     A7 20 62 FC | 	wrlong	local02, fp
1ad5c     38 4E 85 F1 | 	sub	fp, #56
1ad60     A7 20 02 FB | 	rdlong	local02, fp
1ad64     0C 4E 85 F1 | 	sub	fp, #12
1ad68     10 21 C2 FA | 	rdbyte	local02, local02
1ad6c     2E 20 0E F2 | 	cmp	local02, #46 wz
1ad70     08 4E 05 A1 |  if_e	add	fp, #8
1ad74     A7 04 68 AC |  if_e	wrlong	#2, fp
1ad78     08 4E C5 F3 | 	sumz	fp, #8
1ad7c     A7 00 68 5C |  if_ne	wrlong	#0, fp
1ad80     08 4E 85 51 |  if_ne	sub	fp, #8
1ad84     44 4E 05 F1 | 	add	fp, #68
1ad88     A7 20 02 FB | 	rdlong	local02, fp
1ad8c     44 4E 85 F1 | 	sub	fp, #68
1ad90     08 00 00 FF 
1ad94     00 20 0E F2 | 	cmp	local02, ##4096 wz
1ad98     18 00 90 5D |  if_ne	jmp	#LR__2923
1ad9c     08 4E 05 F1 | 	add	fp, #8
1ada0     A7 20 02 FB | 	rdlong	local02, fp
1ada4     10 20 46 F5 | 	or	local02, #16
1ada8     A7 20 62 FC | 	wrlong	local02, fp
1adac     08 4E 85 F1 | 	sub	fp, #8
1adb0     AC 00 90 FD | 	jmp	#LR__2928
1adb4                 | LR__2923
1adb4     44 4E 05 F1 | 	add	fp, #68
1adb8     A7 20 02 FB | 	rdlong	local02, fp
1adbc     44 4E 85 F1 | 	sub	fp, #68
1adc0     10 00 00 FF 
1adc4     00 20 0E F2 | 	cmp	local02, ##8192 wz
1adc8     44 4E 05 51 |  if_ne	add	fp, #68
1adcc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1add0     44 4E 85 51 |  if_ne	sub	fp, #68
1add4     18 00 00 5F 
1add8     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1addc     44 4E 05 51 |  if_ne	add	fp, #68
1ade0     0F 23 02 56 |  if_ne	mov	local03, local01
1ade4     44 4E 85 51 |  if_ne	sub	fp, #68
1ade8     20 00 00 5F 
1adec     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1adf0     18 00 90 5D |  if_ne	jmp	#LR__2924
1adf4     08 4E 05 F1 | 	add	fp, #8
1adf8     A7 20 02 FB | 	rdlong	local02, fp
1adfc     04 20 46 F5 | 	or	local02, #4
1ae00     A7 20 62 FC | 	wrlong	local02, fp
1ae04     08 4E 85 F1 | 	sub	fp, #8
1ae08     54 00 90 FD | 	jmp	#LR__2927
1ae0c                 | LR__2924
1ae0c     18 4E 05 F1 | 	add	fp, #24
1ae10     A7 20 02 FB | 	rdlong	local02, fp
1ae14     18 4E 85 F1 | 	sub	fp, #24
1ae18     92 20 CE F7 | 	test	local02, #146 wz
1ae1c     18 00 90 5D |  if_ne	jmp	#LR__2925
1ae20     08 4E 05 F1 | 	add	fp, #8
1ae24     A7 20 02 FB | 	rdlong	local02, fp
1ae28     01 20 46 F5 | 	or	local02, #1
1ae2c     A7 20 62 FC | 	wrlong	local02, fp
1ae30     08 4E 85 F1 | 	sub	fp, #8
1ae34     28 00 90 FD | 	jmp	#LR__2926
1ae38                 | LR__2925
1ae38     44 4E 05 F1 | 	add	fp, #68
1ae3c     A7 24 02 FB | 	rdlong	local04, fp
1ae40     44 4E 85 F1 | 	sub	fp, #68
1ae44     08 00 00 FF 
1ae48     00 24 0E F2 | 	cmp	local04, ##4096 wz
1ae4c     08 4E 05 51 |  if_ne	add	fp, #8
1ae50     A7 24 02 5B |  if_ne	rdlong	local04, fp
1ae54     20 24 46 55 |  if_ne	or	local04, #32
1ae58     A7 24 62 5C |  if_ne	wrlong	local04, fp
1ae5c     08 4E 85 51 |  if_ne	sub	fp, #8
1ae60                 | LR__2926
1ae60                 | LR__2927
1ae60                 | LR__2928
1ae60     08 4E 05 F1 | 	add	fp, #8
1ae64     A7 24 02 FB | 	rdlong	local04, fp
1ae68     08 4E 85 F1 | 	sub	fp, #8
1ae6c     03 00 00 FF 
1ae70     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1ae74     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1ae78     03 00 00 FF 
1ae7c     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1ae80     0F 25 CA F7 | 	test	local04, local01 wz
1ae84     E0 FD 9F AD |  if_e	jmp	#LR__2921
1ae88                 | LR__2929
1ae88     0C 4E 05 F1 | 	add	fp, #12
1ae8c     A7 12 02 FB | 	rdlong	arg01, fp
1ae90     0C 4E 85 F1 | 	sub	fp, #12
1ae94     09 27 02 F6 | 	mov	local05, arg01
1ae98     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
1ae9c                 | LR__2930
1ae9c     13 FB C9 FA | 	rdbyte	result1, local05 wz
1aea0     01 26 06 51 |  if_ne	add	local05, #1
1aea4     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
1aea8                 | LR__2931
1aea8     13 13 C2 F2 | 	subr	arg01, local05
1aeac     01 12 06 F1 | 	add	arg01, #1
1aeb0     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1aeb4     48 4E 05 F1 | 	add	fp, #72
1aeb8     A7 FA 61 FC | 	wrlong	result1, fp
1aebc     48 4E 85 F1 | 	sub	fp, #72
1aec0     00 FA 0D F2 | 	cmp	result1, #0 wz
1aec4     18 00 90 AD |  if_e	jmp	#LR__2932
1aec8     48 4E 05 F1 | 	add	fp, #72
1aecc     A7 12 02 FB | 	rdlong	arg01, fp
1aed0     3C 4E 85 F1 | 	sub	fp, #60
1aed4     A7 14 02 FB | 	rdlong	arg02, fp
1aed8     0C 4E 85 F1 | 	sub	fp, #12
1aedc     84 A5 BF FD | 	call	#__system____builtin_strcpy
1aee0                 | LR__2932
1aee0     48 4E 05 F1 | 	add	fp, #72
1aee4     A7 FA 01 FB | 	rdlong	result1, fp
1aee8     48 4E 85 F1 | 	sub	fp, #72
1aeec                 | LR__2933
1aeec     A7 F0 03 F6 | 	mov	ptra, fp
1aef0     B2 00 A0 FD | 	call	#popregs_
1aef4                 | __system___basic_dir_ret
1aef4     2D 00 64 FD | 	ret
1aef8                 | 
1aef8                 | __system__pack_0414
1aef8     09 01 02 F6 | 	mov	_var01, arg01
1aefc     7F 16 06 F1 | 	add	arg03, #127
1af00     04 18 CE F7 | 	test	arg04, #4 wz
1af04     10 00 90 AD |  if_e	jmp	#LR__2940
1af08     00 00 0E F2 | 	cmp	_var01, #0 wz
1af0c     16 00 C6 A9 |  if_e	decod	_var01, #22
1af10     F7 00 26 F4 | 	bith	_var01, #247
1af14     B4 00 90 FD | 	jmp	#LR__2949
1af18                 | LR__2940
1af18     02 18 CE F7 | 	test	arg04, #2 wz
1af1c     00 C0 3F 5F 
1af20     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1af24     00 14 06 56 |  if_ne	mov	arg02, #0
1af28     A0 00 90 5D |  if_ne	jmp	#LR__2948
1af2c     08 18 CE F7 | 	test	arg04, #8 wz
1af30     00 00 06 56 |  if_ne	mov	_var01, #0
1af34     94 00 90 5D |  if_ne	jmp	#LR__2947
1af38     FF 16 56 F2 | 	cmps	arg03, #255 wc
1af3c     00 C0 3F 3F 
1af40     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1af44     00 14 06 36 |  if_ae	mov	arg02, #0
1af48     80 00 90 3D |  if_ae	jmp	#LR__2946
1af4c     01 16 56 F2 | 	cmps	arg03, #1 wc
1af50     6C 00 90 3D |  if_ae	jmp	#LR__2944
1af54     01 14 46 F0 | 	shr	arg02, #1
1af58     00 03 02 F6 | 	mov	_var02, _var01
1af5c     01 02 06 F5 | 	and	_var02, #1
1af60     1F 02 66 F0 | 	shl	_var02, #31
1af64     01 15 42 F5 | 	or	arg02, _var02
1af68     01 00 46 F0 | 	shr	_var01, #1
1af6c     97 1E 48 FB | 	callpa	#(@LR__2942-@LR__2941)>>2,fcache_load_ptr_
1af70                 | LR__2941
1af70     00 16 56 F2 | 	cmps	arg03, #0 wc
1af74     34 00 90 3D |  if_ae	jmp	#LR__2943
1af78     00 00 0E F2 | 	cmp	_var01, #0 wz
1af7c     2C 00 90 AD |  if_e	jmp	#LR__2943
1af80     0A 13 02 F6 | 	mov	arg01, arg02
1af84     01 12 06 F5 | 	and	arg01, #1
1af88     01 16 06 F1 | 	add	arg03, #1
1af8c     01 14 46 F0 | 	shr	arg02, #1
1af90     00 03 02 F6 | 	mov	_var02, _var01
1af94     01 02 06 F5 | 	and	_var02, #1
1af98     1F 02 66 F0 | 	shl	_var02, #31
1af9c     01 15 42 F5 | 	or	arg02, _var02
1afa0     09 15 42 F5 | 	or	arg02, arg01
1afa4     01 00 46 F0 | 	shr	_var01, #1
1afa8     C4 FF 9F FD | 	jmp	#LR__2941
1afac                 | LR__2942
1afac                 | LR__2943
1afac     00 16 56 F2 | 	cmps	arg03, #0 wc
1afb0     18 00 90 3D |  if_ae	jmp	#LR__2945
1afb4     00 14 0E F2 | 	cmp	arg02, #0 wz
1afb8     6F 14 62 FD | 	wrnz	arg02
1afbc     0C 00 90 FD | 	jmp	#LR__2945
1afc0                 | LR__2944
1afc0     17 01 06 F4 | 	bitl	_var01, #279
1afc4     17 16 66 F0 | 	shl	arg03, #23
1afc8     0B 01 42 F5 | 	or	_var01, arg03
1afcc                 | LR__2945
1afcc                 | LR__2946
1afcc                 | LR__2947
1afcc                 | LR__2948
1afcc                 | LR__2949
1afcc     01 00 CE F7 | 	test	_var01, #1 wz
1afd0     01 14 46 55 |  if_ne	or	arg02, #1
1afd4     0A 17 02 F6 | 	mov	arg03, arg02
1afd8     00 02 06 F6 | 	mov	_var02, #0
1afdc     FF FF 3F FF 
1afe0     FF 15 06 F1 | 	add	arg02, ##2147483647
1afe4     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1afe8     01 02 06 C6 |  if_b	mov	_var02, #1
1afec     01 01 02 F1 | 	add	_var01, _var02
1aff0     01 18 CE F7 | 	test	arg04, #1 wz
1aff4     1F 00 26 54 |  if_ne	bith	_var01, #31
1aff8     00 FB 01 F6 | 	mov	result1, _var01
1affc                 | __system__pack_0414_ret
1affc     2D 00 64 FD | 	ret
1b000                 | 
1b000                 | __system___rxtxioctl_0503
1b000     00 15 0E F2 | 	cmp	arg02, #256 wz
1b004     0C 00 90 AD |  if_e	jmp	#LR__2950
1b008     01 15 0E F2 | 	cmp	arg02, #257 wz
1b00c     1C 00 90 AD |  if_e	jmp	#LR__2951
1b010     30 00 90 FD | 	jmp	#LR__2952
1b014                 | LR__2950
1b014     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b018     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b01c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b020     0B FB 61 FC | 	wrlong	result1, arg03
1b024     00 FA 05 F6 | 	mov	result1, #0
1b028     28 00 90 FD | 	jmp	#LR__2953
1b02c                 | LR__2951
1b02c     0B 13 02 FB | 	rdlong	arg01, arg03
1b030     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b034     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b038     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b03c     00 FA 05 F6 | 	mov	result1, #0
1b040     10 00 90 FD | 	jmp	#LR__2953
1b044                 | LR__2952
1b044     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b048     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1b04c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b050     01 FA 65 F6 | 	neg	result1, #1
1b054                 | LR__2953
1b054                 | __system___rxtxioctl_0503_ret
1b054     2D 00 64 FD | 	ret
1b058                 | 
1b058                 | __system____dummy_flush_0504
1b058     00 FA 05 F6 | 	mov	result1, #0
1b05c                 | __system____dummy_flush_0504_ret
1b05c     2D 00 64 FD | 	ret
1b060                 | 
1b060                 | __system___vfsread
1b060     03 4A 05 F6 | 	mov	COUNT_, #3
1b064     A8 00 A0 FD | 	call	#pushregs_
1b068     28 F0 07 F1 | 	add	ptra, #40
1b06c     04 4E 05 F1 | 	add	fp, #4
1b070     A7 12 62 FC | 	wrlong	arg01, fp
1b074     04 4E 05 F1 | 	add	fp, #4
1b078     A7 14 62 FC | 	wrlong	arg02, fp
1b07c     04 4E 05 F1 | 	add	fp, #4
1b080     A7 16 62 FC | 	wrlong	arg03, fp
1b084     04 4E 85 F1 | 	sub	fp, #4
1b088     A7 FA 01 FB | 	rdlong	result1, fp
1b08c     14 4E 05 F1 | 	add	fp, #20
1b090     A7 FA 61 FC | 	wrlong	result1, fp
1b094     04 4E 05 F1 | 	add	fp, #4
1b098     A7 00 68 FC | 	wrlong	#0, fp
1b09c     1C 4E 85 F1 | 	sub	fp, #28
1b0a0     A7 12 02 FB | 	rdlong	arg01, fp
1b0a4     04 4E 85 F1 | 	sub	fp, #4
1b0a8     08 12 06 F1 | 	add	arg01, #8
1b0ac     09 FB 01 FB | 	rdlong	result1, arg01
1b0b0     01 FA CD F7 | 	test	result1, #1 wz
1b0b4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b0b8     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b0bc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b0c0     01 FA 65 A6 |  if_e	neg	result1, #1
1b0c4     74 02 90 AD |  if_e	jmp	#LR__2966
1b0c8     04 4E 05 F1 | 	add	fp, #4
1b0cc     A7 12 02 FB | 	rdlong	arg01, fp
1b0d0     04 4E 85 F1 | 	sub	fp, #4
1b0d4     14 12 06 F1 | 	add	arg01, #20
1b0d8     09 FB 09 FB | 	rdlong	result1, arg01 wz
1b0dc     B8 00 90 AD |  if_e	jmp	#LR__2961
1b0e0     04 4E 05 F1 | 	add	fp, #4
1b0e4     A7 12 02 FB | 	rdlong	arg01, fp
1b0e8     09 17 02 F6 | 	mov	arg03, arg01
1b0ec     14 16 06 F1 | 	add	arg03, #20
1b0f0     0B 1F 02 FB | 	rdlong	local01, arg03
1b0f4     0F 21 02 F6 | 	mov	local02, local01
1b0f8     13 1E 46 F7 | 	zerox	local01, #19
1b0fc     14 20 46 F0 | 	shr	local02, #20
1b100     02 20 66 F0 | 	shl	local02, #2
1b104     ED 20 02 F1 | 	add	local02, __methods__
1b108     10 21 02 FB | 	rdlong	local02, local02
1b10c     04 4E 05 F1 | 	add	fp, #4
1b110     A7 14 02 FB | 	rdlong	arg02, fp
1b114     04 4E 05 F1 | 	add	fp, #4
1b118     A7 16 02 FB | 	rdlong	arg03, fp
1b11c     0C 4E 85 F1 | 	sub	fp, #12
1b120     F2 22 02 F6 | 	mov	local03, objptr
1b124     0F E5 01 F6 | 	mov	objptr, local01
1b128     2D 20 62 FD | 	call	local02
1b12c     11 E5 01 F6 | 	mov	objptr, local03
1b130     10 4E 05 F1 | 	add	fp, #16
1b134     A7 FA 61 FC | 	wrlong	result1, fp
1b138     10 4E 85 F1 | 	sub	fp, #16
1b13c     00 FA 55 F2 | 	cmps	result1, #0 wc
1b140     44 00 90 3D |  if_ae	jmp	#LR__2960
1b144     04 4E 05 F1 | 	add	fp, #4
1b148     A7 22 02 FB | 	rdlong	local03, fp
1b14c     11 1F 02 F6 | 	mov	local01, local03
1b150     08 22 06 F1 | 	add	local03, #8
1b154     11 21 02 FB | 	rdlong	local02, local03
1b158     20 20 46 F5 | 	or	local02, #32
1b15c     08 1E 06 F1 | 	add	local01, #8
1b160     0F 21 62 FC | 	wrlong	local02, local01
1b164     0C 4E 05 F1 | 	add	fp, #12
1b168     A7 12 0A FB | 	rdlong	arg01, fp wz
1b16c     10 4E 85 F1 | 	sub	fp, #16
1b170     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b174     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b178     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b17c     01 FA 65 56 |  if_ne	neg	result1, #1
1b180     00 FA 05 A6 |  if_e	mov	result1, #0
1b184     B4 01 90 FD | 	jmp	#LR__2966
1b188                 | LR__2960
1b188     10 4E 05 F1 | 	add	fp, #16
1b18c     A7 FA 01 FB | 	rdlong	result1, fp
1b190     10 4E 85 F1 | 	sub	fp, #16
1b194     A4 01 90 FD | 	jmp	#LR__2966
1b198                 | LR__2961
1b198     04 4E 05 F1 | 	add	fp, #4
1b19c     A7 12 02 FB | 	rdlong	arg01, fp
1b1a0     20 12 06 F1 | 	add	arg01, #32
1b1a4     09 13 0A FB | 	rdlong	arg01, arg01 wz
1b1a8     14 4E 05 F1 | 	add	fp, #20
1b1ac     A7 12 62 FC | 	wrlong	arg01, fp
1b1b0     18 4E 85 F1 | 	sub	fp, #24
1b1b4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b1b8     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b1bc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b1c0     01 FA 65 A6 |  if_e	neg	result1, #1
1b1c4     74 01 90 AD |  if_e	jmp	#LR__2966
1b1c8     04 4E 05 F1 | 	add	fp, #4
1b1cc     A7 22 02 FB | 	rdlong	local03, fp
1b1d0     04 4E 85 F1 | 	sub	fp, #4
1b1d4     28 22 06 F1 | 	add	local03, #40
1b1d8     11 21 0A FB | 	rdlong	local02, local03 wz
1b1dc     7C 00 90 AD |  if_e	jmp	#LR__2963
1b1e0     04 4E 05 F1 | 	add	fp, #4
1b1e4     A7 12 02 FB | 	rdlong	arg01, fp
1b1e8     09 23 02 F6 | 	mov	local03, arg01
1b1ec     28 22 06 F1 | 	add	local03, #40
1b1f0     11 1F 02 FB | 	rdlong	local01, local03
1b1f4     0F 21 02 F6 | 	mov	local02, local01
1b1f8     13 1E 46 F7 | 	zerox	local01, #19
1b1fc     14 20 46 F0 | 	shr	local02, #20
1b200     02 20 66 F0 | 	shl	local02, #2
1b204     ED 20 02 F1 | 	add	local02, __methods__
1b208     10 21 02 FB | 	rdlong	local02, local02
1b20c     20 4E 05 F1 | 	add	fp, #32
1b210     A7 16 02 F6 | 	mov	arg03, fp
1b214     24 4E 85 F1 | 	sub	fp, #36
1b218     00 15 06 F6 | 	mov	arg02, #256
1b21c     F2 22 02 F6 | 	mov	local03, objptr
1b220     0F E5 01 F6 | 	mov	objptr, local01
1b224     2D 20 62 FD | 	call	local02
1b228     11 E5 01 F6 | 	mov	objptr, local03
1b22c     10 4E 05 F1 | 	add	fp, #16
1b230     A7 FA 61 FC | 	wrlong	result1, fp
1b234     00 FA 4D F2 | 	cmps	result1, #0 wz
1b238     10 4E 85 F1 | 	sub	fp, #16
1b23c     1C 00 90 5D |  if_ne	jmp	#LR__2962
1b240     24 4E 05 F1 | 	add	fp, #36
1b244     A7 20 02 FB | 	rdlong	local02, fp
1b248     24 4E 85 F1 | 	sub	fp, #36
1b24c     02 20 CE F7 | 	test	local02, #2 wz
1b250     20 4E 05 51 |  if_ne	add	fp, #32
1b254     A7 02 68 5C |  if_ne	wrlong	#1, fp
1b258     20 4E 85 51 |  if_ne	sub	fp, #32
1b25c                 | LR__2962
1b25c                 | LR__2963
1b25c     10 4E 05 F1 | 	add	fp, #16
1b260     A7 00 68 FC | 	wrlong	#0, fp
1b264     10 4E 85 F1 | 	sub	fp, #16
1b268                 | LR__2964
1b268     0C 4E 05 F1 | 	add	fp, #12
1b26c     A7 22 02 FB | 	rdlong	local03, fp
1b270     0C 4E 85 F1 | 	sub	fp, #12
1b274     01 22 16 F2 | 	cmp	local03, #1 wc
1b278     B4 00 90 CD |  if_b	jmp	#LR__2965
1b27c     18 4E 05 F1 | 	add	fp, #24
1b280     A7 20 02 FB | 	rdlong	local02, fp
1b284     10 23 02 F6 | 	mov	local03, local02
1b288     13 22 46 F7 | 	zerox	local03, #19
1b28c     14 20 46 F0 | 	shr	local02, #20
1b290     02 20 66 F0 | 	shl	local02, #2
1b294     ED 20 02 F1 | 	add	local02, __methods__
1b298     10 21 02 FB | 	rdlong	local02, local02
1b29c     14 4E 85 F1 | 	sub	fp, #20
1b2a0     A7 12 02 FB | 	rdlong	arg01, fp
1b2a4     04 4E 85 F1 | 	sub	fp, #4
1b2a8     F2 1E 02 F6 | 	mov	local01, objptr
1b2ac     11 E5 01 F6 | 	mov	objptr, local03
1b2b0     2D 20 62 FD | 	call	local02
1b2b4     0F E5 01 F6 | 	mov	objptr, local01
1b2b8     14 4E 05 F1 | 	add	fp, #20
1b2bc     A7 FA 61 FC | 	wrlong	result1, fp
1b2c0     14 4E 85 F1 | 	sub	fp, #20
1b2c4     00 FA 55 F2 | 	cmps	result1, #0 wc
1b2c8     64 00 90 CD |  if_b	jmp	#LR__2965
1b2cc     1C 4E 05 F1 | 	add	fp, #28
1b2d0     A7 22 02 FB | 	rdlong	local03, fp
1b2d4     11 21 02 F6 | 	mov	local02, local03
1b2d8     01 20 06 F1 | 	add	local02, #1
1b2dc     A7 20 62 FC | 	wrlong	local02, fp
1b2e0     08 4E 85 F1 | 	sub	fp, #8
1b2e4     A7 20 02 FB | 	rdlong	local02, fp
1b2e8     11 21 42 FC | 	wrbyte	local02, local03
1b2ec     04 4E 85 F1 | 	sub	fp, #4
1b2f0     A7 22 02 FB | 	rdlong	local03, fp
1b2f4     01 22 06 F1 | 	add	local03, #1
1b2f8     A7 22 62 FC | 	wrlong	local03, fp
1b2fc     04 4E 85 F1 | 	sub	fp, #4
1b300     A7 22 02 FB | 	rdlong	local03, fp
1b304     01 22 86 F1 | 	sub	local03, #1
1b308     A7 22 62 FC | 	wrlong	local03, fp
1b30c     14 4E 05 F1 | 	add	fp, #20
1b310     A7 22 0A FB | 	rdlong	local03, fp wz
1b314     20 4E 85 F1 | 	sub	fp, #32
1b318     4C FF 9F AD |  if_e	jmp	#LR__2964
1b31c     14 4E 05 F1 | 	add	fp, #20
1b320     A7 20 02 FB | 	rdlong	local02, fp
1b324     14 4E 85 F1 | 	sub	fp, #20
1b328     0A 20 0E F2 | 	cmp	local02, #10 wz
1b32c     38 FF 9F 5D |  if_ne	jmp	#LR__2964
1b330                 | LR__2965
1b330     10 4E 05 F1 | 	add	fp, #16
1b334     A7 FA 01 FB | 	rdlong	result1, fp
1b338     10 4E 85 F1 | 	sub	fp, #16
1b33c                 | LR__2966
1b33c     A7 F0 03 F6 | 	mov	ptra, fp
1b340     B2 00 A0 FD | 	call	#popregs_
1b344                 | __system___vfsread_ret
1b344     2D 00 64 FD | 	ret
1b348                 | 
1b348                 | __system____default_filbuf
1b348     04 4A 05 F6 | 	mov	COUNT_, #4
1b34c     A8 00 A0 FD | 	call	#pushregs_
1b350     09 1F 02 F6 | 	mov	local01, arg01
1b354     0F 21 02 FB | 	rdlong	local02, local01
1b358     0C 20 06 F1 | 	add	local02, #12
1b35c     10 FB 09 FB | 	rdlong	result1, local02 wz
1b360     0C 20 86 F1 | 	sub	local02, #12
1b364     20 00 90 5D |  if_ne	jmp	#LR__2970
1b368     14 20 06 F1 | 	add	local02, #20
1b36c     10 FB 01 F6 | 	mov	result1, local02
1b370     04 20 86 F1 | 	sub	local02, #4
1b374     10 FB 61 FC | 	wrlong	result1, local02
1b378     04 20 86 F1 | 	sub	local02, #4
1b37c     02 00 80 FF 
1b380     10 01 68 FC | 	wrlong	##1024, local02
1b384     0C 20 86 F1 | 	sub	local02, #12
1b388                 | LR__2970
1b388     14 1E 06 F1 | 	add	local01, #20
1b38c     0F 23 02 FB | 	rdlong	local03, local01
1b390     11 25 02 F6 | 	mov	local04, local03
1b394     14 1E 86 F1 | 	sub	local01, #20
1b398     13 24 46 F7 | 	zerox	local04, #19
1b39c     14 22 46 F0 | 	shr	local03, #20
1b3a0     02 22 66 F0 | 	shl	local03, #2
1b3a4     ED 22 02 F1 | 	add	local03, __methods__
1b3a8     11 23 02 FB | 	rdlong	local03, local03
1b3ac     10 20 06 F1 | 	add	local02, #16
1b3b0     10 15 02 FB | 	rdlong	arg02, local02
1b3b4     04 20 86 F1 | 	sub	local02, #4
1b3b8     10 17 02 FB | 	rdlong	arg03, local02
1b3bc     0C 20 86 F1 | 	sub	local02, #12
1b3c0     0F 13 02 F6 | 	mov	arg01, local01
1b3c4     F2 1E 02 F6 | 	mov	local01, objptr
1b3c8     12 E5 01 F6 | 	mov	objptr, local04
1b3cc     2D 22 62 FD | 	call	local03
1b3d0     0F E5 01 F6 | 	mov	objptr, local01
1b3d4     FD 24 02 F6 | 	mov	local04, result1
1b3d8     00 24 56 F2 | 	cmps	local04, #0 wc
1b3dc     01 FA 65 C6 |  if_b	neg	result1, #1
1b3e0     28 00 90 CD |  if_b	jmp	#LR__2971
1b3e4     10 25 62 FC | 	wrlong	local04, local02
1b3e8     10 20 06 F1 | 	add	local02, #16
1b3ec     10 23 02 FB | 	rdlong	local03, local02
1b3f0     0C 20 86 F1 | 	sub	local02, #12
1b3f4     10 23 62 FC | 	wrlong	local03, local02
1b3f8     04 20 06 F1 | 	add	local02, #4
1b3fc     10 23 02 FB | 	rdlong	local03, local02
1b400     01 22 46 F5 | 	or	local03, #1
1b404     10 23 62 FC | 	wrlong	local03, local02
1b408     12 FB 01 F6 | 	mov	result1, local04
1b40c                 | LR__2971
1b40c     A7 F0 03 F6 | 	mov	ptra, fp
1b410     B2 00 A0 FD | 	call	#popregs_
1b414                 | __system____default_filbuf_ret
1b414     2D 00 64 FD | 	ret
1b418                 | 
1b418                 | __system__getlower_0889
1b418     41 12 56 F2 | 	cmps	arg01, #65 wc
1b41c     10 00 90 CD |  if_b	jmp	#LR__2980
1b420     5B 12 56 F2 | 	cmps	arg01, #91 wc
1b424     09 FB 01 C6 |  if_b	mov	result1, arg01
1b428     20 FA 05 C1 |  if_b	add	result1, #32
1b42c     04 00 90 CD |  if_b	jmp	#__system__getlower_0889_ret
1b430                 | LR__2980
1b430     09 FB 01 F6 | 	mov	result1, arg01
1b434                 | __system__getlower_0889_ret
1b434     2D 00 64 FD | 	ret
1b438                 | 
1b438                 | __system___pat_match
1b438     08 4A 05 F6 | 	mov	COUNT_, #8
1b43c     A8 00 A0 FD | 	call	#pushregs_
1b440     09 1F 02 F6 | 	mov	local01, arg01
1b444                 | LR__2990
1b444     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1b448     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1b44c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1b450     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1b454     2C 00 90 AD |  if_e	jmp	#LR__2991
1b458     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b45c     B8 FF BF FD | 	call	#__system__getlower_0889
1b460     FD 22 02 F6 | 	mov	local03, result1
1b464     0F 13 C2 FA | 	rdbyte	arg01, local01
1b468     AC FF BF FD | 	call	#__system__getlower_0889
1b46c     11 FB 09 F2 | 	cmp	result1, local03 wz
1b470     00 FA 05 56 |  if_ne	mov	result1, #0
1b474     FC 00 90 5D |  if_ne	jmp	#LR__2999
1b478     01 1E 06 F1 | 	add	local01, #1
1b47c     01 14 06 F1 | 	add	arg02, #1
1b480     C0 FF 9F FD | 	jmp	#LR__2990
1b484                 | LR__2991
1b484     0A 23 C2 FA | 	rdbyte	local03, arg02
1b488     2A 22 0E F2 | 	cmp	local03, #42 wz
1b48c     D4 00 90 5D |  if_ne	jmp	#LR__2998
1b490     01 14 06 F1 | 	add	arg02, #1
1b494     0A 21 C2 FA | 	rdbyte	local02, arg02
1b498     01 14 86 F1 | 	sub	arg02, #1
1b49c     2E 20 0E F2 | 	cmp	local02, #46 wz
1b4a0     28 00 90 5D |  if_ne	jmp	#LR__2992
1b4a4     02 14 06 F1 | 	add	arg02, #2
1b4a8     0A 21 C2 FA | 	rdbyte	local02, arg02
1b4ac     02 14 86 F1 | 	sub	arg02, #2
1b4b0     2A 20 0E F2 | 	cmp	local02, #42 wz
1b4b4     03 14 06 A1 |  if_e	add	arg02, #3
1b4b8     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1b4bc     03 14 86 A1 |  if_e	sub	arg02, #3
1b4c0     12 27 0A A6 |  if_e	mov	local05, local04 wz
1b4c4     01 FA 05 A6 |  if_e	mov	result1, #1
1b4c8     A8 00 90 AD |  if_e	jmp	#LR__2999
1b4cc                 | LR__2992
1b4cc     01 14 06 F1 | 	add	arg02, #1
1b4d0     00 28 06 F6 | 	mov	local06, #0
1b4d4     97 1E 48 FB | 	callpa	#(@LR__2995-@LR__2993)>>2,fcache_load_ptr_
1b4d8                 | LR__2993
1b4d8     14 2B 02 F6 | 	mov	local07, local06
1b4dc     0A 2B 02 F1 | 	add	local07, arg02
1b4e0     15 2B CA FA | 	rdbyte	local07, local07 wz
1b4e4     14 27 02 56 |  if_ne	mov	local05, local06
1b4e8     01 26 06 51 |  if_ne	add	local05, #1
1b4ec     13 29 02 56 |  if_ne	mov	local06, local05
1b4f0     E4 FF 9F 5D |  if_ne	jmp	#LR__2993
1b4f4     00 2C 06 F6 | 	mov	local08, #0
1b4f8                 | LR__2994
1b4f8     16 2B 02 F6 | 	mov	local07, local08
1b4fc     0F 2B 02 F1 | 	add	local07, local01
1b500     15 2B CA FA | 	rdbyte	local07, local07 wz
1b504     16 27 02 56 |  if_ne	mov	local05, local08
1b508     01 26 06 51 |  if_ne	add	local05, #1
1b50c     13 2D 02 56 |  if_ne	mov	local08, local05
1b510     E4 FF 9F 5D |  if_ne	jmp	#LR__2994
1b514                 | LR__2995
1b514     14 2D 52 F2 | 	cmps	local08, local06 wc
1b518     00 FA 05 C6 |  if_b	mov	result1, #0
1b51c     54 00 90 CD |  if_b	jmp	#LR__2999
1b520     16 21 02 F6 | 	mov	local02, local08
1b524     14 21 82 F1 | 	sub	local02, local06
1b528     10 1F 02 F1 | 	add	local01, local02
1b52c                 | LR__2996
1b52c     01 28 56 F2 | 	cmps	local06, #1 wc
1b530     30 00 90 CD |  if_b	jmp	#LR__2997
1b534     0F 13 C2 FA | 	rdbyte	arg01, local01
1b538     DC FE BF FD | 	call	#__system__getlower_0889
1b53c     FD 2C 02 F6 | 	mov	local08, result1
1b540     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b544     D0 FE BF FD | 	call	#__system__getlower_0889
1b548     FD 2C 0A F2 | 	cmp	local08, result1 wz
1b54c     00 FA 05 56 |  if_ne	mov	result1, #0
1b550     20 00 90 5D |  if_ne	jmp	#LR__2999
1b554     01 1E 06 F1 | 	add	local01, #1
1b558     01 14 06 F1 | 	add	arg02, #1
1b55c     01 28 86 F1 | 	sub	local06, #1
1b560     C8 FF 9F FD | 	jmp	#LR__2996
1b564                 | LR__2997
1b564                 | LR__2998
1b564     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1b568     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1b56c     01 FA 05 A6 |  if_e	mov	result1, #1
1b570     00 FA 05 56 |  if_ne	mov	result1, #0
1b574                 | LR__2999
1b574     A7 F0 03 F6 | 	mov	ptra, fp
1b578     B2 00 A0 FD | 	call	#popregs_
1b57c                 | __system___pat_match_ret
1b57c     2D 00 64 FD | 	ret
1b580                 | 
1b580                 | _fatfs_cc_ff_uni2oem
1b580     00 00 06 F6 | 	mov	_var01, #0
1b584     80 12 16 F2 | 	cmp	arg01, #128 wc
1b588     09 01 02 C6 |  if_b	mov	_var01, arg01
1b58c     58 00 90 CD |  if_b	jmp	#LR__3004
1b590     80 00 00 FF 
1b594     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1b598     4C 00 90 3D |  if_ae	jmp	#LR__3003
1b59c     0A FB 31 F9 | 	getword	result1, arg02, #0
1b5a0     01 00 00 FF 
1b5a4     52 FB 0D F2 | 	cmp	result1, ##850 wz
1b5a8     3C 00 90 5D |  if_ne	jmp	#LR__3003
1b5ac                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1b5ac     00 00 06 F6 | 	mov	_var01, #0
1b5b0     97 14 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
1b5b4                 | LR__3000
1b5b4     00 FB 31 F9 | 	getword	result1, _var01, #0
1b5b8     80 FA 15 F2 | 	cmp	result1, #128 wc
1b5bc     1C 00 90 3D |  if_ae	jmp	#LR__3002
1b5c0     00 FB 31 F9 | 	getword	result1, _var01, #0
1b5c4     01 FA 65 F0 | 	shl	result1, #1
1b5c8     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1b5cc     FD FA E1 FA | 	rdword	result1, result1
1b5d0     FD 12 0A F2 | 	cmp	arg01, result1 wz
1b5d4     01 00 06 51 |  if_ne	add	_var01, #1
1b5d8     D8 FF 9F 5D |  if_ne	jmp	#LR__3000
1b5dc                 | LR__3001
1b5dc                 | LR__3002
1b5dc     00 01 32 F9 | 	getword	_var01, _var01, #0
1b5e0     80 00 06 F1 | 	add	_var01, #128
1b5e4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1b5e8                 | LR__3003
1b5e8                 | LR__3004
1b5e8                 | ' 			c = (c + 0x80) & 0xFF;
1b5e8                 | ' 		}
1b5e8                 | ' 	}
1b5e8                 | ' 
1b5e8                 | ' 	return c;
1b5e8     00 FB 01 F6 | 	mov	result1, _var01
1b5ec                 | _fatfs_cc_ff_uni2oem_ret
1b5ec     2D 00 64 FD | 	ret
1b5f0                 | 
1b5f0                 | _fatfs_cc_ff_oem2uni
1b5f0     00 00 06 F6 | 	mov	_var01, #0
1b5f4     09 FB 31 F9 | 	getword	result1, arg01, #0
1b5f8     80 FA 15 F2 | 	cmp	result1, #128 wc
1b5fc     09 01 02 C6 |  if_b	mov	_var01, arg01
1b600     2C 00 90 CD |  if_b	jmp	#LR__3011
1b604     0A 15 32 F9 | 	getword	arg02, arg02, #0
1b608     01 00 00 FF 
1b60c     52 15 0E F2 | 	cmp	arg02, ##850 wz
1b610     1C 00 90 5D |  if_ne	jmp	#LR__3010
1b614     09 FB 31 F9 | 	getword	result1, arg01, #0
1b618     00 FB 15 F2 | 	cmp	result1, #256 wc
1b61c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1b620     80 12 86 C1 |  if_b	sub	arg01, #128
1b624     01 12 66 C0 |  if_b	shl	arg01, #1
1b628     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1b62c     09 01 E2 CA |  if_b	rdword	_var01, arg01
1b630                 | LR__3010
1b630                 | LR__3011
1b630                 | ' 		}
1b630                 | ' 	}
1b630                 | ' 
1b630                 | ' 	return c;
1b630     00 FB 01 F6 | 	mov	result1, _var01
1b634                 | _fatfs_cc_ff_oem2uni_ret
1b634     2D 00 64 FD | 	ret
1b638                 | 
1b638                 | _fatfs_cc_ff_wtoupper
1b638     09 01 02 F6 | 	mov	_var01, arg01
1b63c     80 00 00 FF 
1b640     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1b644     60 01 90 3D |  if_ae	jmp	#LR__3033
1b648     00 03 02 F6 | 	mov	_var02, _var01
1b64c     01 01 32 F9 | 	getword	_var01, _var02, #0
1b650     08 00 00 FF 
1b654     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1b658     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1b65c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1b660     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1b664     01 00 00 3F 
1b668     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1b66c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1b670     01 00 00 3F 
1b674     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1b678     02 07 02 F6 | 	mov	_var04, _var03
1b67c                 | ' 		uc = (WORD)uni;
1b67c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1b67c                 | ' 		for (;;) {
1b67c                 | LR__3020
1b67c     03 09 E2 FA | 	rdword	_var05, _var04
1b680     04 05 02 F6 | 	mov	_var03, _var05
1b684     0F 04 4E F7 | 	zerox	_var03, #15 wz
1b688     02 06 06 F1 | 	add	_var04, #2
1b68c     14 01 90 AD |  if_e	jmp	#LR__3032
1b690     01 05 32 F9 | 	getword	_var03, _var02, #0
1b694     04 01 32 F9 | 	getword	_var01, _var05, #0
1b698     00 05 12 F2 | 	cmp	_var03, _var01 wc
1b69c     04 01 90 CD |  if_b	jmp	#LR__3032
1b6a0     03 0B E2 FA | 	rdword	_var06, _var04
1b6a4     05 0D 32 F9 | 	getword	_var07, _var06, #0
1b6a8     08 0C 46 F0 | 	shr	_var07, #8
1b6ac     05 0B 32 F9 | 	getword	_var06, _var06, #0
1b6b0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1b6b4     01 05 32 F9 | 	getword	_var03, _var02, #0
1b6b8     04 0F 32 F9 | 	getword	_var08, _var05, #0
1b6bc     05 01 32 F9 | 	getword	_var01, _var06, #0
1b6c0     00 0F 02 F1 | 	add	_var08, _var01
1b6c4     07 05 52 F2 | 	cmps	_var03, _var08 wc
1b6c8     02 06 06 F1 | 	add	_var04, #2
1b6cc     C4 00 90 3D |  if_ae	jmp	#LR__3031
1b6d0                 | ' 				switch (cmd) {
1b6d0     06 11 32 F9 | 	getword	_var09, _var07, #0
1b6d4     09 10 26 F3 | 	fle	_var09, #9
1b6d8     30 10 62 FD | 	jmprel	_var09
1b6dc                 | LR__3021
1b6dc     24 00 90 FD | 	jmp	#LR__3022
1b6e0     3C 00 90 FD | 	jmp	#LR__3023
1b6e4     54 00 90 FD | 	jmp	#LR__3024
1b6e8     5C 00 90 FD | 	jmp	#LR__3025
1b6ec     64 00 90 FD | 	jmp	#LR__3026
1b6f0     6C 00 90 FD | 	jmp	#LR__3027
1b6f4     74 00 90 FD | 	jmp	#LR__3028
1b6f8     7C 00 90 FD | 	jmp	#LR__3029
1b6fc     84 00 90 FD | 	jmp	#LR__3030
1b700     A0 00 90 FD | 	jmp	#LR__3032
1b704                 | LR__3022
1b704     01 03 32 F9 | 	getword	_var02, _var02, #0
1b708     04 09 32 F9 | 	getword	_var05, _var05, #0
1b70c     04 03 82 F1 | 	sub	_var02, _var05
1b710     01 02 66 F0 | 	shl	_var02, #1
1b714     03 03 02 F1 | 	add	_var02, _var04
1b718     01 03 E2 FA | 	rdword	_var02, _var02
1b71c     84 00 90 FD | 	jmp	#LR__3032
1b720                 | LR__3023
1b720     01 05 32 F9 | 	getword	_var03, _var02, #0
1b724     01 03 32 F9 | 	getword	_var02, _var02, #0
1b728     04 09 32 F9 | 	getword	_var05, _var05, #0
1b72c     04 03 82 F1 | 	sub	_var02, _var05
1b730     01 02 06 F5 | 	and	_var02, #1
1b734     02 03 C2 F2 | 	subr	_var02, _var03
1b738     68 00 90 FD | 	jmp	#LR__3032
1b73c                 | LR__3024
1b73c     01 03 32 F9 | 	getword	_var02, _var02, #0
1b740     10 02 86 F1 | 	sub	_var02, #16
1b744     5C 00 90 FD | 	jmp	#LR__3032
1b748                 | LR__3025
1b748     01 03 32 F9 | 	getword	_var02, _var02, #0
1b74c     20 02 86 F1 | 	sub	_var02, #32
1b750     50 00 90 FD | 	jmp	#LR__3032
1b754                 | LR__3026
1b754     01 03 32 F9 | 	getword	_var02, _var02, #0
1b758     30 02 86 F1 | 	sub	_var02, #48
1b75c     44 00 90 FD | 	jmp	#LR__3032
1b760                 | LR__3027
1b760     01 03 32 F9 | 	getword	_var02, _var02, #0
1b764     1A 02 86 F1 | 	sub	_var02, #26
1b768     38 00 90 FD | 	jmp	#LR__3032
1b76c                 | LR__3028
1b76c     01 03 32 F9 | 	getword	_var02, _var02, #0
1b770     08 02 06 F1 | 	add	_var02, #8
1b774     2C 00 90 FD | 	jmp	#LR__3032
1b778                 | LR__3029
1b778     01 03 32 F9 | 	getword	_var02, _var02, #0
1b77c     50 02 86 F1 | 	sub	_var02, #80
1b780     20 00 90 FD | 	jmp	#LR__3032
1b784                 | LR__3030
1b784     01 03 32 F9 | 	getword	_var02, _var02, #0
1b788     0E 00 00 FF 
1b78c     60 02 86 F1 | 	sub	_var02, ##7264
1b790                 | ' 				}
1b790                 | ' 				break;
1b790     10 00 90 FD | 	jmp	#LR__3032
1b794                 | LR__3031
1b794     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1b798     02 0A 06 AA |  if_e	mul	_var06, #2
1b79c     05 07 02 A1 |  if_e	add	_var04, _var06
1b7a0     D8 FE 9F FD | 	jmp	#LR__3020
1b7a4                 | LR__3032
1b7a4     01 01 32 F9 | 	getword	_var01, _var02, #0
1b7a8                 | LR__3033
1b7a8                 | ' 		}
1b7a8                 | ' 		uni = uc;
1b7a8                 | ' 	}
1b7a8                 | ' 
1b7a8                 | ' 	return uni;
1b7a8     00 FB 01 F6 | 	mov	result1, _var01
1b7ac                 | _fatfs_cc_ff_wtoupper_ret
1b7ac     2D 00 64 FD | 	ret
1b7b0                 | 
1b7b0                 | _fatfs_cc_strncpy
1b7b0     09 01 02 F6 | 	mov	_var01, arg01
1b7b4     97 12 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
1b7b8                 | ' 
1b7b8                 | ' 	dscan = dst;
1b7b8                 | ' 	sscan = src;
1b7b8                 | ' 	count = n;
1b7b8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1b7b8                 | LR__3040
1b7b8     01 16 86 F1 | 	sub	arg03, #1
1b7bc     00 16 56 F2 | 	cmps	arg03, #0 wc
1b7c0     18 00 90 CD |  if_b	jmp	#LR__3042
1b7c4     0A FB C1 FA | 	rdbyte	result1, arg02
1b7c8     00 FB 41 FC | 	wrbyte	result1, _var01
1b7cc     01 14 06 F1 | 	add	arg02, #1
1b7d0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1b7d4                 | ' 		continue;
1b7d4     01 00 06 F1 | 	add	_var01, #1
1b7d8     DC FF 9F 5D |  if_ne	jmp	#LR__3040
1b7dc                 | LR__3041
1b7dc                 | LR__3042
1b7dc     97 0C 48 FB | 	callpa	#(@LR__3044-@LR__3043)>>2,fcache_load_ptr_
1b7e0                 | ' 	while (--count >= 0)
1b7e0                 | LR__3043
1b7e0     01 16 86 F1 | 	sub	arg03, #1
1b7e4     00 16 56 F2 | 	cmps	arg03, #0 wc
1b7e8     00 03 02 36 |  if_ae	mov	_var02, _var01
1b7ec     01 00 06 31 |  if_ae	add	_var01, #1
1b7f0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1b7f4     E8 FF 9F 3D |  if_ae	jmp	#LR__3043
1b7f8                 | LR__3044
1b7f8                 | ' 		*dscan++ = '\0';
1b7f8                 | ' 	return(dst);
1b7f8     09 FB 01 F6 | 	mov	result1, arg01
1b7fc                 | _fatfs_cc_strncpy_ret
1b7fc     2D 00 64 FD | 	ret
1b800                 | 
1b800                 | _fatfs_cc_memcmp
1b800                 | ' 	for (n = size; n > 0; n--)
1b800     00 16 0E F2 | 	cmp	arg03, #0 wz
1b804     28 00 90 AD |  if_e	jmp	#LR__3051
1b808                 | LR__3050
1b808     09 01 C2 FA | 	rdbyte	_var01, arg01
1b80c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1b810     01 01 0A F2 | 	cmp	_var01, _var02 wz
1b814     01 12 06 A1 |  if_e	add	arg01, #1
1b818     01 14 06 A1 |  if_e	add	arg02, #1
1b81c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1b81c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1b820     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1b824     01 FB 81 51 |  if_ne	sub	result1, _var02
1b828     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1b82c     F6 17 6E FB | 	djnz	arg03, #LR__3050
1b830                 | LR__3051
1b830                 | ' 
1b830                 | ' 	return(0);
1b830     00 FA 05 F6 | 	mov	result1, #0
1b834                 | _fatfs_cc_memcmp_ret
1b834     2D 00 64 FD | 	ret
1b838                 | 
1b838                 | _fatfs_cc_strncmp
1b838     09 01 0A F6 | 	mov	_var01, arg01 wz
1b83c     14 00 90 5D |  if_ne	jmp	#LR__3060
1b840                 | ' 		return scan2 ? -1 : 0;
1b840     00 14 0E F2 | 	cmp	arg02, #0 wz
1b844     01 02 66 56 |  if_ne	neg	_var02, #1
1b848     00 02 06 A6 |  if_e	mov	_var02, #0
1b84c     01 FB 01 F6 | 	mov	result1, _var02
1b850     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1b854                 | LR__3060
1b854     00 14 0E F2 | 	cmp	arg02, #0 wz
1b858     01 FA 05 A6 |  if_e	mov	result1, #1
1b85c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b860     0B 05 02 F6 | 	mov	_var03, arg03
1b864     97 16 48 FB | 	callpa	#(@LR__3062-@LR__3061)>>2,fcache_load_ptr_
1b868                 | ' 	count = n;
1b868                 | ' 	do {
1b868                 | LR__3061
1b868     00 07 C2 FA | 	rdbyte	_var04, _var01
1b86c     0A 09 02 F6 | 	mov	_var05, arg02
1b870     04 0B C2 FA | 	rdbyte	_var06, _var05
1b874     01 04 86 F1 | 	sub	_var03, #1
1b878     00 04 56 F2 | 	cmps	_var03, #0 wc
1b87c     01 00 06 F1 | 	add	_var01, #1
1b880     01 14 06 F1 | 	add	arg02, #1
1b884     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1b888     08 00 90 2D |  if_nc_and_z	jmp	#LR__3063
1b88c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1b890     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3061
1b894                 | LR__3062
1b894                 | LR__3063
1b894     00 04 56 F2 | 	cmps	_var03, #0 wc
1b898                 | ' 		return(0);
1b898     00 FA 05 C6 |  if_b	mov	result1, #0
1b89c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1b8a0     05 07 0A F2 | 	cmp	_var04, _var06 wz
1b8a4                 | ' 		return(0);
1b8a4     00 FA 05 A6 |  if_e	mov	result1, #0
1b8a8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b8ac     00 06 0E F2 | 	cmp	_var04, #0 wz
1b8b0                 | ' 		return(-1);
1b8b0     01 FA 65 A6 |  if_e	neg	result1, #1
1b8b4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b8b8     00 0A 0E F2 | 	cmp	_var06, #0 wz
1b8bc                 | ' 		return(1);
1b8bc     01 FA 05 A6 |  if_e	mov	result1, #1
1b8c0                 | ' 		return(c1 - c2);
1b8c0     03 FB 01 56 |  if_ne	mov	result1, _var04
1b8c4     05 FB 81 51 |  if_ne	sub	result1, _var06
1b8c8                 | _fatfs_cc_strncmp_ret
1b8c8     2D 00 64 FD | 	ret
1b8cc                 | 
1b8cc                 | _fatfs_cc_strchr
1b8cc                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
1b8cc                 | ' 	while ((c = *s++) != (char) charwanted)
1b8cc                 | LR__3070
1b8cc     09 01 02 F6 | 	mov	_var01, arg01
1b8d0     00 03 C2 FA | 	rdbyte	_var02, _var01
1b8d4     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1b8d8     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1b8dc     03 05 0A F2 | 	cmp	_var03, _var04 wz
1b8e0     01 12 06 F1 | 	add	arg01, #1
1b8e4     14 00 90 AD |  if_e	jmp	#LR__3071
1b8e8     01 05 02 F6 | 	mov	_var03, _var02
1b8ec     07 04 4E F7 | 	zerox	_var03, #7 wz
1b8f0     00 FA 05 A6 |  if_e	mov	result1, #0
1b8f4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1b8f8     D0 FF 9F FD | 	jmp	#LR__3070
1b8fc                 | LR__3071
1b8fc                 | ' 	return((char *)--s);
1b8fc     01 12 86 F1 | 	sub	arg01, #1
1b900     09 FB 01 F6 | 	mov	result1, arg01
1b904                 | _fatfs_cc_strchr_ret
1b904     2D 00 64 FD | 	ret
1b908                 | 
1b908                 | _fatfs_cc_disk_initialize
1b908     04 4A 05 F6 | 	mov	COUNT_, #4
1b90c     A8 00 A0 FD | 	call	#pushregs_
1b910     40 F0 07 F1 | 	add	ptra, #64
1b914     04 4E 05 F1 | 	add	fp, #4
1b918     A7 12 42 FC | 	wrbyte	arg01, fp
1b91c     01 00 00 FF 
1b920     14 E4 05 F1 | 	add	objptr, ##532
1b924     F2 18 02 FB | 	rdlong	arg04, objptr
1b928     2C 4E 05 F1 | 	add	fp, #44
1b92c     A7 18 62 FC | 	wrlong	arg04, fp
1b930     04 E4 85 F1 | 	sub	objptr, #4
1b934     F2 18 02 FB | 	rdlong	arg04, objptr
1b938     04 4E 05 F1 | 	add	fp, #4
1b93c     A7 18 62 FC | 	wrlong	arg04, fp
1b940     08 E4 05 F1 | 	add	objptr, #8
1b944     F2 18 02 FB | 	rdlong	arg04, objptr
1b948     04 4E 05 F1 | 	add	fp, #4
1b94c     A7 18 62 FC | 	wrlong	arg04, fp
1b950     04 E4 05 F1 | 	add	objptr, #4
1b954     F2 18 02 FB | 	rdlong	arg04, objptr
1b958     04 4E 05 F1 | 	add	fp, #4
1b95c     A7 18 62 FC | 	wrlong	arg04, fp
1b960     04 E4 05 F1 | 	add	objptr, #4
1b964     F2 02 48 FC | 	wrbyte	#1, objptr
1b968     01 00 00 FF 
1b96c     20 E4 85 F1 | 	sub	objptr, ##544
1b970     38 4E 85 F1 | 	sub	fp, #56
1b974     A7 18 CA FA | 	rdbyte	arg04, fp wz
1b978     04 4E 85 F1 | 	sub	fp, #4
1b97c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b97c                 | '             return RES_NOTRDY;
1b97c     03 FA 05 56 |  if_ne	mov	result1, #3
1b980     D8 05 90 5D |  if_ne	jmp	#LR__3098
1b984     13 00 00 FF 
1b988     10 13 06 F6 | 	mov	arg01, ##10000
1b98c     80 9E BF FD | 	call	#__system___waitus
1b990     30 4E 05 F1 | 	add	fp, #48
1b994     A7 12 02 FB | 	rdlong	arg01, fp
1b998     09 01 08 FC | 	wrpin	#0, arg01
1b99c     04 4E 05 F1 | 	add	fp, #4
1b9a0     A7 12 02 FB | 	rdlong	arg01, fp
1b9a4     09 01 08 FC | 	wrpin	#0, arg01
1b9a8     04 4E 05 F1 | 	add	fp, #4
1b9ac     A7 12 02 FB | 	rdlong	arg01, fp
1b9b0     09 01 08 FC | 	wrpin	#0, arg01
1b9b4     04 4E 05 F1 | 	add	fp, #4
1b9b8     A7 12 02 FB | 	rdlong	arg01, fp
1b9bc     09 00 80 FF 
1b9c0     09 01 08 FC | 	wrpin	##4608, arg01
1b9c4     0C 4E 85 F1 | 	sub	fp, #12
1b9c8     A7 12 02 FB | 	rdlong	arg01, fp
1b9cc     59 12 62 FD | 	drvh	arg01
1b9d0     04 4E 05 F1 | 	add	fp, #4
1b9d4     A7 12 02 FB | 	rdlong	arg01, fp
1b9d8     59 12 62 FD | 	drvh	arg01
1b9dc     04 4E 05 F1 | 	add	fp, #4
1b9e0     A7 12 02 FB | 	rdlong	arg01, fp
1b9e4     59 12 62 FD | 	drvh	arg01
1b9e8     04 4E 05 F1 | 	add	fp, #4
1b9ec     A7 12 02 FB | 	rdlong	arg01, fp
1b9f0     59 12 62 FD | 	drvh	arg01
1b9f4     20 4E 85 F1 | 	sub	fp, #32
1b9f8     00 04 80 FF 
1b9fc     A7 20 68 FC | 	wrlong	##524304, fp
1ba00     04 4E 05 F1 | 	add	fp, #4
1ba04     20 03 80 FF 
1ba08     A7 90 68 FC | 	wrlong	##409672, fp
1ba0c     14 4E 05 F1 | 	add	fp, #20
1ba10     A7 1E 02 FB | 	rdlong	local01, fp
1ba14     18 4E 85 F1 | 	sub	fp, #24
1ba18     A7 16 02 FB | 	rdlong	arg03, fp
1ba1c     40 1E 62 FD | 	dirl	local01
1ba20     A0 03 80 FF 
1ba24     0F 91 08 FC | 	wrpin	##475208, local01
1ba28     0F 17 12 FC | 	wxpin	arg03, local01
1ba2c     0F 01 28 FC | 	wypin	#0, local01
1ba30     41 1E 62 FD | 	dirh	local01
1ba34     1C 4E 05 F1 | 	add	fp, #28
1ba38     A7 20 02 FB | 	rdlong	local02, fp
1ba3c     10 1F 82 F1 | 	sub	local01, local02
1ba40     07 1E 06 F5 | 	and	local01, #7
1ba44     18 1E 66 F0 | 	shl	local01, #24
1ba48     78 14 06 F6 | 	mov	arg02, #120
1ba4c     0F 15 42 F5 | 	or	arg02, local01
1ba50     14 4E 85 F1 | 	sub	fp, #20
1ba54     A7 14 62 FC | 	wrlong	arg02, fp
1ba58     14 4E 05 F1 | 	add	fp, #20
1ba5c     A7 12 02 FB | 	rdlong	arg01, fp
1ba60     10 14 26 F4 | 	bith	arg02, #16
1ba64     40 12 62 FD | 	dirl	arg01
1ba68     09 15 02 FC | 	wrpin	arg02, arg01
1ba6c     09 3F 18 FC | 	wxpin	#31, arg01
1ba70     FF FF FF FF 
1ba74     09 FF 2B FC | 	wypin	##-1, arg01
1ba78     41 12 62 FD | 	dirh	arg01
1ba7c     04 4E 85 F1 | 	sub	fp, #4
1ba80     A7 14 02 FB | 	rdlong	arg02, fp
1ba84     08 4E 05 F1 | 	add	fp, #8
1ba88     A7 22 02 FB | 	rdlong	local03, fp
1ba8c     11 15 82 F1 | 	sub	arg02, local03
1ba90     07 14 06 F5 | 	and	arg02, #7
1ba94     18 14 66 F0 | 	shl	arg02, #24
1ba98     14 4E 85 F1 | 	sub	fp, #20
1ba9c     A7 14 62 FC | 	wrlong	arg02, fp
1baa0     29 00 00 FF 
1baa4     7A 14 46 F5 | 	or	arg02, ##21114
1baa8     A7 14 62 FC | 	wrlong	arg02, fp
1baac     14 4E 05 F1 | 	add	fp, #20
1bab0     A7 12 02 FB | 	rdlong	arg01, fp
1bab4     40 12 62 FD | 	dirl	arg01
1bab8     09 15 02 FC | 	wrpin	arg02, arg01
1babc     09 4F 18 FC | 	wxpin	#39, arg01
1bac0     09 01 28 FC | 	wypin	#0, arg01
1bac4     41 12 62 FD | 	dirh	arg01
1bac8     28 4E 85 F1 | 	sub	fp, #40
1bacc     A7 12 02 F6 | 	mov	arg01, fp
1bad0     14 4E 85 F1 | 	sub	fp, #20
1bad4     0A 14 06 F6 | 	mov	arg02, #10
1bad8     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0923
1badc     00 12 06 F6 | 	mov	arg01, #0
1bae0     00 14 06 F6 | 	mov	arg02, #0
1bae4     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bae8     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0933
1baec     64 12 06 F6 | 	mov	arg01, #100
1baf0     1C 9D BF FD | 	call	#__system___waitus
1baf4     14 4E 05 F1 | 	add	fp, #20
1baf8     A7 12 02 F6 | 	mov	arg01, fp
1bafc     14 4E 85 F1 | 	sub	fp, #20
1bb00     0A 14 06 F6 | 	mov	arg02, #10
1bb04     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0923
1bb08     0C 4E 05 F1 | 	add	fp, #12
1bb0c     A7 00 48 FC | 	wrbyte	#0, fp
1bb10     0C 4E 85 F1 | 	sub	fp, #12
1bb14     00 12 06 F6 | 	mov	arg01, #0
1bb18     00 14 06 F6 | 	mov	arg02, #0
1bb1c     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bb20     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1bb24     01 18 0E F2 | 	cmp	arg04, #1 wz
1bb28     B8 03 90 5D |  if_ne	jmp	#LR__3097
1bb2c     08 12 06 F6 | 	mov	arg01, #8
1bb30     AA 15 06 F6 | 	mov	arg02, #426
1bb34     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bb38     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bb3c     01 FA 0D F2 | 	cmp	result1, #1 wz
1bb40     98 01 90 5D |  if_ne	jmp	#LR__3083
1bb44     14 4E 05 F1 | 	add	fp, #20
1bb48     A7 12 02 F6 | 	mov	arg01, fp
1bb4c     14 4E 85 F1 | 	sub	fp, #20
1bb50     04 14 06 F6 | 	mov	arg02, #4
1bb54     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0923
1bb58     16 4E 05 F1 | 	add	fp, #22
1bb5c     A7 24 C2 FA | 	rdbyte	local04, fp
1bb60     16 4E 85 F1 | 	sub	fp, #22
1bb64     01 24 0E F2 | 	cmp	local04, #1 wz
1bb68     17 4E 05 A1 |  if_e	add	fp, #23
1bb6c     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1bb70     17 4E 85 A1 |  if_e	sub	fp, #23
1bb74     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1bb78     68 03 90 5D |  if_ne	jmp	#LR__3096
1bb7c                 | ' 				for (tmr = 1000; tmr; tmr--) {
1bb7c     18 4E 05 F1 | 	add	fp, #24
1bb80     01 00 80 FF 
1bb84     A7 D0 6B FC | 	wrlong	##1000, fp
1bb88     18 4E 85 F1 | 	sub	fp, #24
1bb8c                 | LR__3080
1bb8c     18 4E 05 F1 | 	add	fp, #24
1bb90     A7 1E 0A FB | 	rdlong	local01, fp wz
1bb94     18 4E 85 F1 | 	sub	fp, #24
1bb98     3C 00 90 AD |  if_e	jmp	#LR__3081
1bb9c     A9 12 06 F6 | 	mov	arg01, #169
1bba0     1E 14 C6 F9 | 	decod	arg02, #30
1bba4     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bba8     FD 24 02 F6 | 	mov	local04, result1
1bbac     07 24 4E F7 | 	zerox	local04, #7 wz
1bbb0     24 00 90 AD |  if_e	jmp	#LR__3081
1bbb4     01 00 00 FF 
1bbb8     E8 13 06 F6 | 	mov	arg01, ##1000
1bbbc     50 9C BF FD | 	call	#__system___waitus
1bbc0     18 4E 05 F1 | 	add	fp, #24
1bbc4     A7 24 02 FB | 	rdlong	local04, fp
1bbc8     01 24 86 F1 | 	sub	local04, #1
1bbcc     A7 24 62 FC | 	wrlong	local04, fp
1bbd0     18 4E 85 F1 | 	sub	fp, #24
1bbd4     B4 FF 9F FD | 	jmp	#LR__3080
1bbd8                 | LR__3081
1bbd8     18 4E 05 F1 | 	add	fp, #24
1bbdc     A7 24 0A FB | 	rdlong	local04, fp wz
1bbe0     18 4E 85 F1 | 	sub	fp, #24
1bbe4     4C 00 90 AD |  if_e	jmp	#LR__3082
1bbe8     3A 12 06 F6 | 	mov	arg01, #58
1bbec     00 14 06 F6 | 	mov	arg02, #0
1bbf0     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bbf4     FD 22 02 F6 | 	mov	local03, result1
1bbf8     07 22 4E F7 | 	zerox	local03, #7 wz
1bbfc     34 00 90 5D |  if_ne	jmp	#LR__3082
1bc00     14 4E 05 F1 | 	add	fp, #20
1bc04     A7 12 02 F6 | 	mov	arg01, fp
1bc08     14 4E 85 F1 | 	sub	fp, #20
1bc0c     04 14 06 F6 | 	mov	arg02, #4
1bc10     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0923
1bc14     14 4E 05 F1 | 	add	fp, #20
1bc18     A7 1E C2 FA | 	rdbyte	local01, fp
1bc1c     40 1E CE F7 | 	test	local01, #64 wz
1bc20     0C 24 06 56 |  if_ne	mov	local04, #12
1bc24     04 24 06 A6 |  if_e	mov	local04, #4
1bc28     08 4E 85 F1 | 	sub	fp, #8
1bc2c     A7 24 42 FC | 	wrbyte	local04, fp
1bc30     0C 4E 85 F1 | 	sub	fp, #12
1bc34                 | LR__3082
1bc34     14 24 06 FB | 	rdlong	local04, #20
1bc38     18 4E 05 F1 | 	add	fp, #24
1bc3c     A7 24 62 FC | 	wrlong	local04, fp
1bc40     0C 4E 05 F1 | 	add	fp, #12
1bc44     A7 24 02 FB | 	rdlong	local04, fp
1bc48     1B 24 26 F4 | 	bith	local04, #27
1bc4c     A7 24 62 FC | 	wrlong	local04, fp
1bc50     0C 4E 85 F1 | 	sub	fp, #12
1bc54     A7 24 02 FB | 	rdlong	local04, fp
1bc58     18 4E 85 F1 | 	sub	fp, #24
1bc5c     68 78 04 FF 
1bc60     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1bc64     1C 4E 05 C1 |  if_b	add	fp, #28
1bc68     00 01 80 CF 
1bc6c     A7 08 68 CC |  if_b	wrlong	##131076, fp
1bc70     1C 4E 85 C1 |  if_b	sub	fp, #28
1bc74     6C 02 90 CD |  if_b	jmp	#LR__3096
1bc78     18 4E 05 F1 | 	add	fp, #24
1bc7c     A7 24 02 FB | 	rdlong	local04, fp
1bc80     18 4E 85 F1 | 	sub	fp, #24
1bc84     E1 F5 05 FF 
1bc88     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1bc8c     1C 4E 05 C1 |  if_b	add	fp, #28
1bc90     00 01 80 CF 
1bc94     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1bc98     1C 4E 85 C1 |  if_b	sub	fp, #28
1bc9c     44 02 90 CD |  if_b	jmp	#LR__3096
1bca0     18 4E 05 F1 | 	add	fp, #24
1bca4     A7 24 02 FB | 	rdlong	local04, fp
1bca8     18 4E 85 F1 | 	sub	fp, #24
1bcac     3B 58 08 FF 
1bcb0     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1bcb4     1C 4E 05 C1 |  if_b	add	fp, #28
1bcb8     00 01 80 CF 
1bcbc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1bcc0     1C 4E 85 C1 |  if_b	sub	fp, #28
1bcc4     1C 02 90 CD |  if_b	jmp	#LR__3096
1bcc8     1C 4E 05 F1 | 	add	fp, #28
1bccc     80 01 80 FF 
1bcd0     A7 10 68 FC | 	wrlong	##196616, fp
1bcd4     1C 4E 85 F1 | 	sub	fp, #28
1bcd8     08 02 90 FD | 	jmp	#LR__3096
1bcdc                 | LR__3083
1bcdc     A9 12 06 F6 | 	mov	arg01, #169
1bce0     00 14 06 F6 | 	mov	arg02, #0
1bce4     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bce8     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1bcec     02 24 16 F2 | 	cmp	local04, #2 wc
1bcf0     18 00 90 3D |  if_ae	jmp	#LR__3084
1bcf4     0C 4E 05 F1 | 	add	fp, #12
1bcf8     A7 04 48 FC | 	wrbyte	#2, fp
1bcfc     04 4E 05 F1 | 	add	fp, #4
1bd00     A7 52 49 FC | 	wrbyte	#169, fp
1bd04     10 4E 85 F1 | 	sub	fp, #16
1bd08     14 00 90 FD | 	jmp	#LR__3085
1bd0c                 | LR__3084
1bd0c     0C 4E 05 F1 | 	add	fp, #12
1bd10     A7 02 48 FC | 	wrbyte	#1, fp
1bd14     04 4E 05 F1 | 	add	fp, #4
1bd18     A7 02 48 FC | 	wrbyte	#1, fp
1bd1c     10 4E 85 F1 | 	sub	fp, #16
1bd20                 | LR__3085
1bd20                 | ' 				ty =  0x01 ; cmd =  (1) ;
1bd20                 | ' 			}
1bd20                 | ' 			for (tmr = 1000; tmr; tmr--) {
1bd20     18 4E 05 F1 | 	add	fp, #24
1bd24     01 00 80 FF 
1bd28     A7 D0 6B FC | 	wrlong	##1000, fp
1bd2c     18 4E 85 F1 | 	sub	fp, #24
1bd30                 | LR__3086
1bd30     18 4E 05 F1 | 	add	fp, #24
1bd34     A7 22 0A FB | 	rdlong	local03, fp wz
1bd38     18 4E 85 F1 | 	sub	fp, #24
1bd3c     44 00 90 AD |  if_e	jmp	#LR__3087
1bd40     10 4E 05 F1 | 	add	fp, #16
1bd44     A7 12 C2 FA | 	rdbyte	arg01, fp
1bd48     10 4E 85 F1 | 	sub	fp, #16
1bd4c     00 14 06 F6 | 	mov	arg02, #0
1bd50     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bd54     FD 24 02 F6 | 	mov	local04, result1
1bd58     07 24 4E F7 | 	zerox	local04, #7 wz
1bd5c     24 00 90 AD |  if_e	jmp	#LR__3087
1bd60     01 00 00 FF 
1bd64     E8 13 06 F6 | 	mov	arg01, ##1000
1bd68     A4 9A BF FD | 	call	#__system___waitus
1bd6c     18 4E 05 F1 | 	add	fp, #24
1bd70     A7 24 02 FB | 	rdlong	local04, fp
1bd74     01 24 86 F1 | 	sub	local04, #1
1bd78     A7 24 62 FC | 	wrlong	local04, fp
1bd7c     18 4E 85 F1 | 	sub	fp, #24
1bd80     AC FF 9F FD | 	jmp	#LR__3086
1bd84                 | LR__3087
1bd84     18 4E 05 F1 | 	add	fp, #24
1bd88     A7 24 0A FB | 	rdlong	local04, fp wz
1bd8c     18 4E 85 F1 | 	sub	fp, #24
1bd90     14 00 90 AD |  if_e	jmp	#LR__3088
1bd94     10 12 06 F6 | 	mov	arg01, #16
1bd98     09 14 C6 F9 | 	decod	arg02, #9
1bd9c     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bda0     07 FA 4D F7 | 	zerox	result1, #7 wz
1bda4     0C 00 90 AD |  if_e	jmp	#LR__3089
1bda8                 | LR__3088
1bda8     0C 4E 05 F1 | 	add	fp, #12
1bdac     A7 00 48 FC | 	wrbyte	#0, fp
1bdb0     0C 4E 85 F1 | 	sub	fp, #12
1bdb4                 | LR__3089
1bdb4     14 24 06 FB | 	rdlong	local04, #20
1bdb8     18 4E 05 F1 | 	add	fp, #24
1bdbc     A7 24 62 FC | 	wrlong	local04, fp
1bdc0     18 4E 85 F1 | 	sub	fp, #24
1bdc4     F0 FA 02 FF 
1bdc8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1bdcc     18 00 90 3D |  if_ae	jmp	#LR__3090
1bdd0     24 4E 05 F1 | 	add	fp, #36
1bdd4     A7 24 02 FB | 	rdlong	local04, fp
1bdd8     1B 24 26 F4 | 	bith	local04, #27
1bddc     A7 24 62 FC | 	wrlong	local04, fp
1bde0     24 4E 85 F1 | 	sub	fp, #36
1bde4     2C 00 90 FD | 	jmp	#LR__3091
1bde8                 | LR__3090
1bde8     18 4E 05 F1 | 	add	fp, #24
1bdec     A7 24 02 FB | 	rdlong	local04, fp
1bdf0     18 4E 85 F1 | 	sub	fp, #24
1bdf4     E1 F5 05 FF 
1bdf8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1bdfc     24 4E 05 C1 |  if_b	add	fp, #36
1be00     A7 24 02 CB |  if_b	rdlong	local04, fp
1be04     80 00 04 CF 
1be08     00 24 46 C5 |  if_b	or	local04, ##134283264
1be0c     A7 24 62 CC |  if_b	wrlong	local04, fp
1be10     24 4E 85 C1 |  if_b	sub	fp, #36
1be14                 | LR__3091
1be14     18 4E 05 F1 | 	add	fp, #24
1be18     A7 24 02 FB | 	rdlong	local04, fp
1be1c     18 4E 85 F1 | 	sub	fp, #24
1be20     F0 FA 02 FF 
1be24     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1be28     1C 4E 05 C1 |  if_b	add	fp, #28
1be2c     00 01 80 CF 
1be30     A7 08 68 CC |  if_b	wrlong	##131076, fp
1be34     1C 4E 85 C1 |  if_b	sub	fp, #28
1be38     A8 00 90 CD |  if_b	jmp	#LR__3095
1be3c     18 4E 05 F1 | 	add	fp, #24
1be40     A7 24 02 FB | 	rdlong	local04, fp
1be44     18 4E 85 F1 | 	sub	fp, #24
1be48     68 78 04 FF 
1be4c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1be50     1C 4E 05 C1 |  if_b	add	fp, #28
1be54     80 01 80 CF 
1be58     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1be5c     1C 4E 85 C1 |  if_b	sub	fp, #28
1be60     80 00 90 CD |  if_b	jmp	#LR__3094
1be64     18 4E 05 F1 | 	add	fp, #24
1be68     A7 24 02 FB | 	rdlong	local04, fp
1be6c     18 4E 85 F1 | 	sub	fp, #24
1be70     E1 F5 05 FF 
1be74     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1be78     1C 4E 05 C1 |  if_b	add	fp, #28
1be7c     00 02 80 CF 
1be80     A7 10 68 CC |  if_b	wrlong	##262152, fp
1be84     1C 4E 85 C1 |  if_b	sub	fp, #28
1be88     58 00 90 CD |  if_b	jmp	#LR__3093
1be8c     18 4E 05 F1 | 	add	fp, #24
1be90     A7 24 02 FB | 	rdlong	local04, fp
1be94     18 4E 85 F1 | 	sub	fp, #24
1be98     59 73 07 FF 
1be9c     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1bea0     1C 4E 05 C1 |  if_b	add	fp, #28
1bea4     80 02 80 CF 
1bea8     A7 14 68 CC |  if_b	wrlong	##327690, fp
1beac     1C 4E 85 C1 |  if_b	sub	fp, #28
1beb0     30 00 90 CD |  if_b	jmp	#LR__3092
1beb4     18 4E 05 F1 | 	add	fp, #24
1beb8     A7 24 02 FB | 	rdlong	local04, fp
1bebc     18 4E 85 F1 | 	sub	fp, #24
1bec0     D1 F0 08 FF 
1bec4     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1bec8     1C 4E 05 C1 |  if_b	add	fp, #28
1becc     00 03 80 CF 
1bed0     A7 18 68 CC |  if_b	wrlong	##393228, fp
1bed4     1C 4E 85 F3 | 	sumc	fp, #28
1bed8     80 03 80 3F 
1bedc     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1bee0     1C 4E 85 31 |  if_ae	sub	fp, #28
1bee4                 | LR__3092
1bee4                 | LR__3093
1bee4                 | LR__3094
1bee4                 | LR__3095
1bee4                 | LR__3096
1bee4                 | LR__3097
1bee4     0C 4E 05 F1 | 	add	fp, #12
1bee8     A7 24 C2 FA | 	rdbyte	local04, fp
1beec     01 00 00 FF 
1bef0     21 E4 05 F1 | 	add	objptr, ##545
1bef4     F2 24 42 FC | 	wrbyte	local04, objptr
1bef8     A7 1E CA FA | 	rdbyte	local01, fp wz
1befc     00 24 06 56 |  if_ne	mov	local04, #0
1bf00     01 24 06 A6 |  if_e	mov	local04, #1
1bf04     20 4E 05 F1 | 	add	fp, #32
1bf08     A7 24 42 FC | 	wrbyte	local04, fp
1bf0c     A7 24 C2 FA | 	rdbyte	local04, fp
1bf10     2C 4E 85 F1 | 	sub	fp, #44
1bf14     01 E4 85 F1 | 	sub	objptr, #1
1bf18     F2 24 42 FC | 	wrbyte	local04, objptr
1bf1c     01 00 00 FF 
1bf20     20 E4 85 F1 | 	sub	objptr, ##544
1bf24     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0933
1bf28     34 4E 05 F1 | 	add	fp, #52
1bf2c     A7 12 02 FB | 	rdlong	arg01, fp
1bf30     18 4E 85 F1 | 	sub	fp, #24
1bf34     A7 14 02 FB | 	rdlong	arg02, fp
1bf38     09 15 12 FC | 	wxpin	arg02, arg01
1bf3c     1C 4E 05 F1 | 	add	fp, #28
1bf40     A7 12 02 FB | 	rdlong	arg01, fp
1bf44     14 4E 85 F1 | 	sub	fp, #20
1bf48     A7 14 02 FB | 	rdlong	arg02, fp
1bf4c     09 15 02 FC | 	wrpin	arg02, arg01
1bf50                 | ' 
1bf50                 | ' 		}
1bf50                 | ' 	}
1bf50                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1bf50                 | ' 	CardType = ty;
1bf50                 | ' 	s = ty ? 0 :  0x01 ;
1bf50                 | ' 	Stat = s;
1bf50                 | ' 
1bf50                 | ' 	deselect();
1bf50                 | ' 
1bf50                 | ' 
1bf50                 | ' 	_wxpin( PIN_CLK, ck_div );
1bf50                 | ' 	_wrpin( PIN_DI, spm_tx );
1bf50                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1bf50                 | ' 	return s;
1bf50     08 4E 05 F1 | 	add	fp, #8
1bf54     A7 FA C1 FA | 	rdbyte	result1, fp
1bf58     2C 4E 85 F1 | 	sub	fp, #44
1bf5c                 | LR__3098
1bf5c     A7 F0 03 F6 | 	mov	ptra, fp
1bf60     B2 00 A0 FD | 	call	#popregs_
1bf64                 | _fatfs_cc_disk_initialize_ret
1bf64     2D 00 64 FD | 	ret
1bf68                 | 
1bf68                 | _fatfs_cc_disk_read
1bf68     05 4A 05 F6 | 	mov	COUNT_, #5
1bf6c     A8 00 A0 FD | 	call	#pushregs_
1bf70     0A 1F 02 F6 | 	mov	local01, arg02
1bf74     0B 21 02 F6 | 	mov	local02, arg03
1bf78     0C 23 02 F6 | 	mov	local03, arg04
1bf7c     00 12 0E F2 | 	cmp	arg01, #0 wz
1bf80     01 FA 05 56 |  if_ne	mov	result1, #1
1bf84                 | ' 
1bf84                 | ' 	return Stat;
1bf84     01 00 00 AF 
1bf88     20 E4 05 A1 |  if_e	add	objptr, ##544
1bf8c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1bf90     01 00 00 AF 
1bf94     20 E4 85 A1 |  if_e	sub	objptr, ##544
1bf98     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bf9c     01 FA CD F7 | 	test	result1, #1 wz
1bfa0     03 FA 05 56 |  if_ne	mov	result1, #3
1bfa4     84 00 90 5D |  if_ne	jmp	#LR__3102
1bfa8     01 00 00 FF 
1bfac     21 E4 05 F1 | 	add	objptr, ##545
1bfb0     F2 24 C2 FA | 	rdbyte	local04, objptr
1bfb4     01 00 00 FF 
1bfb8     21 E4 85 F1 | 	sub	objptr, ##545
1bfbc     08 24 CE F7 | 	test	local04, #8 wz
1bfc0     09 20 66 A0 |  if_e	shl	local02, #9
1bfc4     02 22 16 F2 | 	cmp	local03, #2 wc
1bfc8     12 24 06 36 |  if_ae	mov	local04, #18
1bfcc     11 24 06 C6 |  if_b	mov	local04, #17
1bfd0     10 15 02 F6 | 	mov	arg02, local02
1bfd4     12 13 02 F6 | 	mov	arg01, local04
1bfd8     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1bfdc     FD 26 02 F6 | 	mov	local05, result1
1bfe0     07 26 4E F7 | 	zerox	local05, #7 wz
1bfe4     30 00 90 5D |  if_ne	jmp	#LR__3101
1bfe8                 | ' 		do {
1bfe8                 | LR__3100
1bfe8     0F 13 02 F6 | 	mov	arg01, local01
1bfec     09 14 C6 F9 | 	decod	arg02, #9
1bff0     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0941
1bff4     00 FA 0D F2 | 	cmp	result1, #0 wz
1bff8     01 00 00 5F 
1bffc     00 1E 06 51 |  if_ne	add	local01, ##512
1c000     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3100
1c004     12 25 E2 F8 | 	getbyte	local04, local04, #0
1c008     12 24 0E F2 | 	cmp	local04, #18 wz
1c00c     0C 12 06 A6 |  if_e	mov	arg01, #12
1c010     00 14 06 A6 |  if_e	mov	arg02, #0
1c014     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0947
1c018                 | LR__3101
1c018     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0933
1c01c                 | ' 	}
1c01c                 | ' 	deselect();
1c01c                 | ' 
1c01c                 | ' 	return count ? RES_ERROR : RES_OK;
1c01c     00 22 0E F2 | 	cmp	local03, #0 wz
1c020     01 26 06 56 |  if_ne	mov	local05, #1
1c024     00 26 06 A6 |  if_e	mov	local05, #0
1c028     13 FB 01 F6 | 	mov	result1, local05
1c02c                 | LR__3102
1c02c     A7 F0 03 F6 | 	mov	ptra, fp
1c030     B2 00 A0 FD | 	call	#popregs_
1c034                 | _fatfs_cc_disk_read_ret
1c034     2D 00 64 FD | 	ret
1c038                 | 
1c038                 | _fatfs_cc_disk_write
1c038     04 4A 05 F6 | 	mov	COUNT_, #4
1c03c     A8 00 A0 FD | 	call	#pushregs_
1c040     0A 1F 02 F6 | 	mov	local01, arg02
1c044     0C 21 02 F6 | 	mov	local02, arg04
1c048     0B 23 02 F6 | 	mov	local03, arg03
1c04c     00 12 0E F2 | 	cmp	arg01, #0 wz
1c050     01 FA 05 56 |  if_ne	mov	result1, #1
1c054                 | ' 
1c054                 | ' 	return Stat;
1c054     01 00 00 AF 
1c058     20 E4 05 A1 |  if_e	add	objptr, ##544
1c05c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c060     01 00 00 AF 
1c064     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c068     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c06c     01 FA CD F7 | 	test	result1, #1 wz
1c070     03 FA 05 56 |  if_ne	mov	result1, #3
1c074     D4 00 90 5D |  if_ne	jmp	#LR__3114
1c078     01 00 00 FF 
1c07c     21 E4 05 F1 | 	add	objptr, ##545
1c080     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c084     01 00 00 FF 
1c088     21 E4 85 F1 | 	sub	objptr, ##545
1c08c     08 16 CE F7 | 	test	arg03, #8 wz
1c090     09 22 66 A0 |  if_e	shl	local03, #9
1c094     01 20 0E F2 | 	cmp	local02, #1 wz
1c098     30 00 90 5D |  if_ne	jmp	#LR__3110
1c09c     18 12 06 F6 | 	mov	arg01, #24
1c0a0     11 15 02 F6 | 	mov	arg02, local03
1c0a4     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1c0a8     FD 24 02 F6 | 	mov	local04, result1
1c0ac     07 24 4E F7 | 	zerox	local04, #7 wz
1c0b0     84 00 90 5D |  if_ne	jmp	#LR__3113
1c0b4     0F 13 02 F6 | 	mov	arg01, local01
1c0b8     FE 14 06 F6 | 	mov	arg02, #254
1c0bc     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0943
1c0c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c0c4     00 20 06 56 |  if_ne	mov	local02, #0
1c0c8     6C 00 90 FD | 	jmp	#LR__3113
1c0cc                 | LR__3110
1c0cc     01 00 00 FF 
1c0d0     21 E4 05 F1 | 	add	objptr, ##545
1c0d4     F2 24 C2 FA | 	rdbyte	local04, objptr
1c0d8     01 00 00 FF 
1c0dc     21 E4 85 F1 | 	sub	objptr, ##545
1c0e0     06 24 CE F7 | 	test	local04, #6 wz
1c0e4     97 12 06 56 |  if_ne	mov	arg01, #151
1c0e8     10 15 02 56 |  if_ne	mov	arg02, local02
1c0ec     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0947
1c0f0     11 15 02 F6 | 	mov	arg02, local03
1c0f4     19 12 06 F6 | 	mov	arg01, #25
1c0f8     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1c0fc     FD 24 02 F6 | 	mov	local04, result1
1c100     07 24 4E F7 | 	zerox	local04, #7 wz
1c104     30 00 90 5D |  if_ne	jmp	#LR__3112
1c108                 | ' 			do {
1c108                 | LR__3111
1c108     0F 13 02 F6 | 	mov	arg01, local01
1c10c     FC 14 06 F6 | 	mov	arg02, #252
1c110     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0943
1c114     00 FA 0D F2 | 	cmp	result1, #0 wz
1c118     01 00 00 5F 
1c11c     00 1E 06 51 |  if_ne	add	local01, ##512
1c120     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3111
1c124     00 12 06 F6 | 	mov	arg01, #0
1c128     FD 14 06 F6 | 	mov	arg02, #253
1c12c     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0943
1c130     00 FA 0D F2 | 	cmp	result1, #0 wz
1c134     01 20 06 A6 |  if_e	mov	local02, #1
1c138                 | LR__3112
1c138                 | LR__3113
1c138     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0933
1c13c                 | ' 				count = 1;
1c13c                 | ' 		}
1c13c                 | ' 	}
1c13c                 | ' 	deselect();
1c13c                 | ' 
1c13c                 | ' 	return count ? RES_ERROR : RES_OK;
1c13c     00 20 0E F2 | 	cmp	local02, #0 wz
1c140     01 24 06 56 |  if_ne	mov	local04, #1
1c144     00 24 06 A6 |  if_e	mov	local04, #0
1c148     12 FB 01 F6 | 	mov	result1, local04
1c14c                 | LR__3114
1c14c     A7 F0 03 F6 | 	mov	ptra, fp
1c150     B2 00 A0 FD | 	call	#popregs_
1c154                 | _fatfs_cc_disk_write_ret
1c154     2D 00 64 FD | 	ret
1c158                 | 
1c158                 | _fatfs_cc_disk_ioctl
1c158     01 4A 05 F6 | 	mov	COUNT_, #1
1c15c     A8 00 A0 FD | 	call	#pushregs_
1c160     30 F0 07 F1 | 	add	ptra, #48
1c164     04 4E 05 F1 | 	add	fp, #4
1c168     A7 12 42 FC | 	wrbyte	arg01, fp
1c16c     04 4E 05 F1 | 	add	fp, #4
1c170     A7 14 42 FC | 	wrbyte	arg02, fp
1c174     04 4E 05 F1 | 	add	fp, #4
1c178     A7 16 62 FC | 	wrlong	arg03, fp
1c17c     08 4E 85 F1 | 	sub	fp, #8
1c180     A7 12 CA FA | 	rdbyte	arg01, fp wz
1c184     04 4E 85 F1 | 	sub	fp, #4
1c188     01 FA 05 56 |  if_ne	mov	result1, #1
1c18c                 | ' 
1c18c                 | ' 	return Stat;
1c18c     01 00 00 AF 
1c190     20 E4 05 A1 |  if_e	add	objptr, ##544
1c194     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c198     01 00 00 AF 
1c19c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c1a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c1a4     01 FA CD F7 | 	test	result1, #1 wz
1c1a8     03 FA 05 56 |  if_ne	mov	result1, #3
1c1ac     E4 01 90 5D |  if_ne	jmp	#LR__3128
1c1b0     10 4E 05 F1 | 	add	fp, #16
1c1b4     A7 02 68 FC | 	wrlong	#1, fp
1c1b8                 | ' 
1c1b8                 | ' 	res = RES_ERROR;
1c1b8                 | ' 	switch (ctrl) {
1c1b8     08 4E 85 F1 | 	sub	fp, #8
1c1bc     A7 1E C2 FA | 	rdbyte	local01, fp
1c1c0     08 4E 85 F1 | 	sub	fp, #8
1c1c4     04 1E 26 F3 | 	fle	local01, #4
1c1c8     30 1E 62 FD | 	jmprel	local01
1c1cc                 | LR__3120
1c1cc     10 00 90 FD | 	jmp	#LR__3121
1c1d0     24 00 90 FD | 	jmp	#LR__3122
1c1d4     A0 01 90 FD | 	jmp	#LR__3126
1c1d8     80 01 90 FD | 	jmp	#LR__3125
1c1dc     98 01 90 FD | 	jmp	#LR__3126
1c1e0                 | LR__3121
1c1e0     B0 79 B0 FD | 	call	#_fatfs_cc_select_0937
1c1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c1e8     10 4E 05 51 |  if_ne	add	fp, #16
1c1ec     A7 00 68 5C |  if_ne	wrlong	#0, fp
1c1f0     10 4E 85 51 |  if_ne	sub	fp, #16
1c1f4                 | ' 			break;
1c1f4     8C 01 90 FD | 	jmp	#LR__3127
1c1f8                 | LR__3122
1c1f8     09 12 06 F6 | 	mov	arg01, #9
1c1fc     00 14 06 F6 | 	mov	arg02, #0
1c200     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0947
1c204     FD 1E 02 F6 | 	mov	local01, result1
1c208     07 1E 4E F7 | 	zerox	local01, #7 wz
1c20c     74 01 90 5D |  if_ne	jmp	#LR__3127
1c210     18 4E 05 F1 | 	add	fp, #24
1c214     A7 12 02 F6 | 	mov	arg01, fp
1c218     18 4E 85 F1 | 	sub	fp, #24
1c21c     10 14 06 F6 | 	mov	arg02, #16
1c220     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0941
1c224     00 FA 0D F2 | 	cmp	result1, #0 wz
1c228     58 01 90 AD |  if_e	jmp	#LR__3127
1c22c     18 4E 05 F1 | 	add	fp, #24
1c230     A7 1E C2 FA | 	rdbyte	local01, fp
1c234     18 4E 85 F1 | 	sub	fp, #24
1c238     06 1E 46 F0 | 	shr	local01, #6
1c23c     01 1E 0E F2 | 	cmp	local01, #1 wz
1c240     5C 00 90 5D |  if_ne	jmp	#LR__3123
1c244     21 4E 05 F1 | 	add	fp, #33
1c248     A7 1E C2 FA | 	rdbyte	local01, fp
1c24c     01 4E 85 F1 | 	sub	fp, #1
1c250     A7 FA C1 FA | 	rdbyte	result1, fp
1c254     FD FA 31 F9 | 	getword	result1, result1, #0
1c258     08 FA 65 F0 | 	shl	result1, #8
1c25c     FD 1E 02 F1 | 	add	local01, result1
1c260     01 4E 85 F1 | 	sub	fp, #1
1c264     A7 FA C1 FA | 	rdbyte	result1, fp
1c268     3F FA 05 F5 | 	and	result1, #63
1c26c     10 FA 65 F0 | 	shl	result1, #16
1c270     FD 1E 02 F1 | 	add	local01, result1
1c274     01 1E 06 F1 | 	add	local01, #1
1c278     09 4E 05 F1 | 	add	fp, #9
1c27c     A7 1E 62 FC | 	wrlong	local01, fp
1c280     1C 4E 85 F1 | 	sub	fp, #28
1c284     A7 1E 02 FB | 	rdlong	local01, fp
1c288     1C 4E 05 F1 | 	add	fp, #28
1c28c     A7 FA 01 FB | 	rdlong	result1, fp
1c290     28 4E 85 F1 | 	sub	fp, #40
1c294     0A FA 65 F0 | 	shl	result1, #10
1c298     0F FB 61 FC | 	wrlong	result1, local01
1c29c     AC 00 90 FD | 	jmp	#LR__3124
1c2a0                 | LR__3123
1c2a0     1D 4E 05 F1 | 	add	fp, #29
1c2a4     A7 1E C2 FA | 	rdbyte	local01, fp
1c2a8     0F 1F 42 F8 | 	getnib	local01, local01, #0
1c2ac     05 4E 05 F1 | 	add	fp, #5
1c2b0     A7 FA C1 FA | 	rdbyte	result1, fp
1c2b4     80 FA 05 F5 | 	and	result1, #128
1c2b8     07 FA C5 F0 | 	sar	result1, #7
1c2bc     FD 1E 02 F1 | 	add	local01, result1
1c2c0     01 4E 85 F1 | 	sub	fp, #1
1c2c4     A7 FA C1 FA | 	rdbyte	result1, fp
1c2c8     03 FA 05 F5 | 	and	result1, #3
1c2cc     01 FA 65 F0 | 	shl	result1, #1
1c2d0     FD 1E 02 F1 | 	add	local01, result1
1c2d4     02 1E 06 F1 | 	add	local01, #2
1c2d8     0D 4E 85 F1 | 	sub	fp, #13
1c2dc     A7 1E 42 FC | 	wrbyte	local01, fp
1c2e0     0C 4E 05 F1 | 	add	fp, #12
1c2e4     A7 1E C2 FA | 	rdbyte	local01, fp
1c2e8     06 1E 46 F0 | 	shr	local01, #6
1c2ec     01 4E 85 F1 | 	sub	fp, #1
1c2f0     A7 FA C1 FA | 	rdbyte	result1, fp
1c2f4     FD FA 31 F9 | 	getword	result1, result1, #0
1c2f8     02 FA 65 F0 | 	shl	result1, #2
1c2fc     FD 1E 02 F1 | 	add	local01, result1
1c300     01 4E 85 F1 | 	sub	fp, #1
1c304     A7 FA C1 FA | 	rdbyte	result1, fp
1c308     03 FA 05 F5 | 	and	result1, #3
1c30c     FD FA 31 F9 | 	getword	result1, result1, #0
1c310     0A FA 65 F0 | 	shl	result1, #10
1c314     FD 1E 02 F1 | 	add	local01, result1
1c318     01 1E 06 F1 | 	add	local01, #1
1c31c     0A 4E 05 F1 | 	add	fp, #10
1c320     A7 1E 62 FC | 	wrlong	local01, fp
1c324     1C 4E 85 F1 | 	sub	fp, #28
1c328     A7 1E 02 FB | 	rdlong	local01, fp
1c32c     1C 4E 05 F1 | 	add	fp, #28
1c330     A7 FA 01 FB | 	rdlong	result1, fp
1c334     14 4E 85 F1 | 	sub	fp, #20
1c338     A7 16 C2 FA | 	rdbyte	arg03, fp
1c33c     14 4E 85 F1 | 	sub	fp, #20
1c340     09 16 86 F1 | 	sub	arg03, #9
1c344     0B FB 61 F0 | 	shl	result1, arg03
1c348     0F FB 61 FC | 	wrlong	result1, local01
1c34c                 | LR__3124
1c34c     10 4E 05 F1 | 	add	fp, #16
1c350     A7 00 68 FC | 	wrlong	#0, fp
1c354     10 4E 85 F1 | 	sub	fp, #16
1c358                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1c358                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1c358                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1c358                 | ' 				}
1c358                 | ' 				res = RES_OK;
1c358                 | ' 			}
1c358                 | ' 			break;
1c358     28 00 90 FD | 	jmp	#LR__3127
1c35c                 | LR__3125
1c35c     0C 4E 05 F1 | 	add	fp, #12
1c360     A7 1E 02 FB | 	rdlong	local01, fp
1c364     0F 01 69 FC | 	wrlong	#128, local01
1c368     04 4E 05 F1 | 	add	fp, #4
1c36c     A7 00 68 FC | 	wrlong	#0, fp
1c370     10 4E 85 F1 | 	sub	fp, #16
1c374                 | ' 			*(DWORD*)buff = 128;
1c374                 | ' 			res = RES_OK;
1c374                 | ' 			break;
1c374     0C 00 90 FD | 	jmp	#LR__3127
1c378                 | LR__3126
1c378     10 4E 05 F1 | 	add	fp, #16
1c37c     A7 08 68 FC | 	wrlong	#4, fp
1c380     10 4E 85 F1 | 	sub	fp, #16
1c384                 | LR__3127
1c384     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0933
1c388                 | ' 			res = RES_PARERR;
1c388                 | ' 	}
1c388                 | ' 
1c388                 | ' 	deselect();
1c388                 | ' 
1c388                 | ' 	return res;
1c388     10 4E 05 F1 | 	add	fp, #16
1c38c     A7 FA 01 FB | 	rdlong	result1, fp
1c390     10 4E 85 F1 | 	sub	fp, #16
1c394                 | LR__3128
1c394     A7 F0 03 F6 | 	mov	ptra, fp
1c398     B2 00 A0 FD | 	call	#popregs_
1c39c                 | _fatfs_cc_disk_ioctl_ret
1c39c     2D 00 64 FD | 	ret
1c3a0                 | 
1c3a0                 | _fatfs_cc_disk_setpins
1c3a0     00 12 0E F2 | 	cmp	arg01, #0 wz
1c3a4     01 FA 65 56 |  if_ne	neg	result1, #1
1c3a8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1c3ac     01 00 00 FF 
1c3b0     10 E4 05 F1 | 	add	objptr, ##528
1c3b4     F2 14 62 FC | 	wrlong	arg02, objptr
1c3b8     04 E4 05 F1 | 	add	objptr, #4
1c3bc     F2 16 62 FC | 	wrlong	arg03, objptr
1c3c0     04 E4 05 F1 | 	add	objptr, #4
1c3c4     F2 18 62 FC | 	wrlong	arg04, objptr
1c3c8     04 E4 05 F1 | 	add	objptr, #4
1c3cc     F2 1A 62 FC | 	wrlong	arg05, objptr
1c3d0     01 00 00 FF 
1c3d4     1C E4 85 F1 | 	sub	objptr, ##540
1c3d8     00 FA 05 F6 | 	mov	result1, #0
1c3dc                 | _fatfs_cc_disk_setpins_ret
1c3dc     2D 00 64 FD | 	ret
1c3e0                 | 
1c3e0                 | _fatfs_cc_tchar2uni
1c3e0     09 01 02 FB | 	rdlong	_var01, arg01
1c3e4     00 03 02 F6 | 	mov	_var02, _var01
1c3e8     01 00 06 F1 | 	add	_var01, #1
1c3ec     00 05 02 F6 | 	mov	_var03, _var01
1c3f0     01 07 C2 FA | 	rdbyte	_var04, _var02
1c3f4     80 06 CE F7 | 	test	_var04, #128 wz
1c3f8     E8 00 90 AD |  if_e	jmp	#LR__3137
1c3fc     03 09 02 F6 | 	mov	_var05, _var04
1c400     E0 08 06 F5 | 	and	_var05, #224
1c404     C0 08 0E F2 | 	cmp	_var05, #192 wz
1c408     1F 06 06 A5 |  if_e	and	_var04, #31
1c40c     01 0A 06 A6 |  if_e	mov	_var06, #1
1c410     34 00 90 AD |  if_e	jmp	#LR__3131
1c414     03 09 02 F6 | 	mov	_var05, _var04
1c418     F0 08 06 F5 | 	and	_var05, #240
1c41c     E0 08 0E F2 | 	cmp	_var05, #224 wz
1c420     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1c424     02 0A 06 A6 |  if_e	mov	_var06, #2
1c428     1C 00 90 AD |  if_e	jmp	#LR__3130
1c42c     03 09 02 F6 | 	mov	_var05, _var04
1c430     F8 08 06 F5 | 	and	_var05, #248
1c434     F0 08 0E F2 | 	cmp	_var05, #240 wz
1c438     07 06 06 A5 |  if_e	and	_var04, #7
1c43c     03 0A 06 A6 |  if_e	mov	_var06, #3
1c440                 | ' 			return 0xFFFFFFFF;
1c440     01 FA 65 56 |  if_ne	neg	result1, #1
1c444     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c448                 | LR__3130
1c448                 | LR__3131
1c448                 | ' 		}
1c448                 | ' 		do {
1c448                 | LR__3132
1c448     02 0D C2 FA | 	rdbyte	_var07, _var03
1c44c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1c450     C0 08 06 F5 | 	and	_var05, #192
1c454     80 08 0E F2 | 	cmp	_var05, #128 wz
1c458     01 04 06 F1 | 	add	_var03, #1
1c45c     01 FA 65 56 |  if_ne	neg	result1, #1
1c460     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c464     06 06 66 F0 | 	shl	_var04, #6
1c468     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1c46c     3F 02 06 F5 | 	and	_var02, #63
1c470     01 07 42 F5 | 	or	_var04, _var02
1c474     F4 0B 6E FB | 	djnz	_var06, #LR__3132
1c478     80 06 16 F2 | 	cmp	_var04, #128 wc
1c47c     24 00 90 CD |  if_b	jmp	#LR__3134
1c480     6C 00 00 FF 
1c484     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1c488     0C 00 90 CD |  if_b	jmp	#LR__3133
1c48c     70 00 00 FF 
1c490     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1c494     0C 00 90 CD |  if_b	jmp	#LR__3134
1c498                 | LR__3133
1c498     80 08 00 FF 
1c49c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1c4a0     08 00 90 CD |  if_b	jmp	#LR__3135
1c4a4                 | LR__3134
1c4a4     01 FA 65 F6 | 	neg	result1, #1
1c4a8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1c4ac                 | LR__3135
1c4ac     80 00 00 FF 
1c4b0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1c4b4     2C 00 90 CD |  if_b	jmp	#LR__3136
1c4b8     03 03 02 F6 | 	mov	_var02, _var04
1c4bc     80 00 00 FF 
1c4c0     00 02 86 F1 | 	sub	_var02, ##65536
1c4c4     06 02 66 F0 | 	shl	_var02, #6
1c4c8     80 FF 01 FF 
1c4cc     00 02 06 F5 | 	and	_var02, ##67043328
1c4d0     6E 00 6C FF 
1c4d4     00 08 06 F6 | 	mov	_var05, ##-671032320
1c4d8     01 09 42 F5 | 	or	_var05, _var02
1c4dc     09 06 46 F7 | 	zerox	_var04, #9
1c4e0     04 07 42 F5 | 	or	_var04, _var05
1c4e4                 | LR__3136
1c4e4                 | LR__3137
1c4e4     09 05 62 FC | 	wrlong	_var03, arg01
1c4e8                 | ' 	}
1c4e8                 | ' #line 811 "ff.c"
1c4e8                 | ' 	*str = p;
1c4e8                 | ' 	return uc;
1c4e8     03 FB 01 F6 | 	mov	result1, _var04
1c4ec                 | _fatfs_cc_tchar2uni_ret
1c4ec     2D 00 64 FD | 	ret
1c4f0                 | 
1c4f0                 | _fatfs_cc_put_utf
1c4f0     80 12 16 F2 | 	cmp	arg01, #128 wc
1c4f4     18 00 90 3D |  if_ae	jmp	#LR__3140
1c4f8     01 16 16 F2 | 	cmp	arg03, #1 wc
1c4fc     00 FA 05 C6 |  if_b	mov	result1, #0
1c500     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c504     0A 13 42 FC | 	wrbyte	arg01, arg02
1c508                 | ' 		*buf = (TCHAR)chr;
1c508                 | ' 		return 1;
1c508     01 FA 05 F6 | 	mov	result1, #1
1c50c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c510                 | LR__3140
1c510     04 00 00 FF 
1c514     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1c518     40 00 90 3D |  if_ae	jmp	#LR__3141
1c51c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c520     00 FA 05 C6 |  if_b	mov	result1, #0
1c524     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c528     09 FB 01 F6 | 	mov	result1, arg01
1c52c     06 FA 45 F0 | 	shr	result1, #6
1c530     1F FA 05 F5 | 	and	result1, #31
1c534     C0 16 06 F6 | 	mov	arg03, #192
1c538     FD 16 42 F5 | 	or	arg03, result1
1c53c     0A 17 42 FC | 	wrbyte	arg03, arg02
1c540     01 14 06 F1 | 	add	arg02, #1
1c544     3F 12 06 F5 | 	and	arg01, #63
1c548     80 FA 05 F6 | 	mov	result1, #128
1c54c     09 FB 41 F5 | 	or	result1, arg01
1c550     0A FB 41 FC | 	wrbyte	result1, arg02
1c554                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1c554                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c554                 | ' 		return 2;
1c554     02 FA 05 F6 | 	mov	result1, #2
1c558     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c55c                 | LR__3141
1c55c     80 00 00 FF 
1c560     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1c564     70 00 90 3D |  if_ae	jmp	#LR__3144
1c568     03 16 16 F2 | 	cmp	arg03, #3 wc
1c56c     18 00 90 CD |  if_b	jmp	#LR__3142
1c570     6C 00 00 FF 
1c574     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1c578     14 00 90 CD |  if_b	jmp	#LR__3143
1c57c     70 00 00 FF 
1c580     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1c584     08 00 90 3D |  if_ae	jmp	#LR__3143
1c588                 | LR__3142
1c588     00 FA 05 F6 | 	mov	result1, #0
1c58c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c590                 | LR__3143
1c590     09 FB 59 F8 | 	getnib	result1, arg01, #3
1c594     E0 16 06 F6 | 	mov	arg03, #224
1c598     FD 16 42 F5 | 	or	arg03, result1
1c59c     0A 17 42 FC | 	wrbyte	arg03, arg02
1c5a0     01 14 06 F1 | 	add	arg02, #1
1c5a4     09 FB 01 F6 | 	mov	result1, arg01
1c5a8     06 FA 45 F0 | 	shr	result1, #6
1c5ac     3F FA 05 F5 | 	and	result1, #63
1c5b0     80 16 06 F6 | 	mov	arg03, #128
1c5b4     FD 16 42 F5 | 	or	arg03, result1
1c5b8     0A 17 42 FC | 	wrbyte	arg03, arg02
1c5bc     01 14 06 F1 | 	add	arg02, #1
1c5c0     3F 12 06 F5 | 	and	arg01, #63
1c5c4     80 FA 05 F6 | 	mov	result1, #128
1c5c8     09 FB 41 F5 | 	or	result1, arg01
1c5cc     0A FB 41 FC | 	wrbyte	result1, arg02
1c5d0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1c5d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c5d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c5d0                 | ' 		return 3;
1c5d0     03 FA 05 F6 | 	mov	result1, #3
1c5d4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c5d8                 | LR__3144
1c5d8     04 16 16 F2 | 	cmp	arg03, #4 wc
1c5dc     00 FA 05 C6 |  if_b	mov	result1, #0
1c5e0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c5e4     09 01 02 F6 | 	mov	_var01, arg01
1c5e8     E0 01 06 F4 | 	bitl	_var01, #480
1c5ec     00 00 6C FF 
1c5f0     00 00 86 F1 | 	sub	_var01, ##-671088640
1c5f4     06 00 46 F0 | 	shr	_var01, #6
1c5f8     09 13 32 F9 | 	getword	arg01, arg01, #0
1c5fc     6E 00 00 FF 
1c600     00 12 86 F1 | 	sub	arg01, ##56320
1c604     00 08 00 FF 
1c608     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1c60c     02 00 00 CF 
1c610     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1c614     00 FA 05 36 |  if_ae	mov	result1, #0
1c618     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1c61c     09 01 42 F5 | 	or	_var01, arg01
1c620     80 00 00 FF 
1c624     00 00 06 F1 | 	add	_var01, ##65536
1c628     00 FB 01 F6 | 	mov	result1, _var01
1c62c     12 FA 45 F0 | 	shr	result1, #18
1c630     07 FA 05 F5 | 	and	result1, #7
1c634     F0 16 06 F6 | 	mov	arg03, #240
1c638     FD 16 42 F5 | 	or	arg03, result1
1c63c     0A 17 42 FC | 	wrbyte	arg03, arg02
1c640     01 14 06 F1 | 	add	arg02, #1
1c644     00 FB 01 F6 | 	mov	result1, _var01
1c648     0C FA 45 F0 | 	shr	result1, #12
1c64c     3F FA 05 F5 | 	and	result1, #63
1c650     80 16 06 F6 | 	mov	arg03, #128
1c654     FD 16 42 F5 | 	or	arg03, result1
1c658     0A 17 42 FC | 	wrbyte	arg03, arg02
1c65c     01 14 06 F1 | 	add	arg02, #1
1c660     00 FB 01 F6 | 	mov	result1, _var01
1c664     06 FA 45 F0 | 	shr	result1, #6
1c668     3F FA 05 F5 | 	and	result1, #63
1c66c     80 16 06 F6 | 	mov	arg03, #128
1c670     FD 16 42 F5 | 	or	arg03, result1
1c674     0A 17 42 FC | 	wrbyte	arg03, arg02
1c678     01 14 06 F1 | 	add	arg02, #1
1c67c     3F 00 06 F5 | 	and	_var01, #63
1c680     80 FA 05 F6 | 	mov	result1, #128
1c684     00 FB 41 F5 | 	or	result1, _var01
1c688     0A FB 41 FC | 	wrbyte	result1, arg02
1c68c                 | ' 	chr = (hc | chr) + 0x10000;
1c68c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1c68c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1c68c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c68c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c68c                 | ' 	return 4;
1c68c     04 FA 05 F6 | 	mov	result1, #4
1c690                 | _fatfs_cc_put_utf_ret
1c690     2D 00 64 FD | 	ret
1c694                 | 
1c694                 | _fatfs_cc_sync_window
1c694     02 4A 05 F6 | 	mov	COUNT_, #2
1c698     A8 00 A0 FD | 	call	#pushregs_
1c69c     09 1F 02 F6 | 	mov	local01, arg01
1c6a0     00 20 06 F6 | 	mov	local02, #0
1c6a4     03 1E 06 F1 | 	add	local01, #3
1c6a8     0F FB C9 FA | 	rdbyte	result1, local01 wz
1c6ac     03 1E 86 F1 | 	sub	local01, #3
1c6b0     A4 00 90 AD |  if_e	jmp	#LR__3152
1c6b4     01 1E 06 F1 | 	add	local01, #1
1c6b8     0F 13 C2 FA | 	rdbyte	arg01, local01
1c6bc     33 1E 06 F1 | 	add	local01, #51
1c6c0     0F 15 02 F6 | 	mov	arg02, local01
1c6c4     04 1E 86 F1 | 	sub	local01, #4
1c6c8     0F 17 02 FB | 	rdlong	arg03, local01
1c6cc     30 1E 86 F1 | 	sub	local01, #48
1c6d0     01 18 06 F6 | 	mov	arg04, #1
1c6d4     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1c6d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6dc     74 00 90 5D |  if_ne	jmp	#LR__3150
1c6e0     03 1E 06 F1 | 	add	local01, #3
1c6e4     0F 01 48 FC | 	wrbyte	#0, local01
1c6e8     2D 1E 06 F1 | 	add	local01, #45
1c6ec     0F FB 01 FB | 	rdlong	result1, local01
1c6f0     0C 1E 86 F1 | 	sub	local01, #12
1c6f4     0F 19 02 FB | 	rdlong	arg04, local01
1c6f8     0C FB 81 F1 | 	sub	result1, arg04
1c6fc     08 1E 86 F1 | 	sub	local01, #8
1c700     0F 19 02 FB | 	rdlong	arg04, local01
1c704     1C 1E 86 F1 | 	sub	local01, #28
1c708     0C FB 11 F2 | 	cmp	result1, arg04 wc
1c70c     48 00 90 3D |  if_ae	jmp	#LR__3151
1c710     02 1E 06 F1 | 	add	local01, #2
1c714     0F 19 C2 FA | 	rdbyte	arg04, local01
1c718     02 1E 86 F1 | 	sub	local01, #2
1c71c     02 18 0E F2 | 	cmp	arg04, #2 wz
1c720     34 00 90 5D |  if_ne	jmp	#LR__3151
1c724     01 1E 06 F1 | 	add	local01, #1
1c728     0F 13 C2 FA | 	rdbyte	arg01, local01
1c72c     33 1E 06 F1 | 	add	local01, #51
1c730     0F 15 02 F6 | 	mov	arg02, local01
1c734     04 1E 86 F1 | 	sub	local01, #4
1c738     0F 17 02 FB | 	rdlong	arg03, local01
1c73c     14 1E 86 F1 | 	sub	local01, #20
1c740     0F 1F 02 FB | 	rdlong	local01, local01
1c744     0F 17 02 F1 | 	add	arg03, local01
1c748     01 18 06 F6 | 	mov	arg04, #1
1c74c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1c750     04 00 90 FD | 	jmp	#LR__3151
1c754                 | LR__3150
1c754     01 20 06 F6 | 	mov	local02, #1
1c758                 | LR__3151
1c758                 | LR__3152
1c758                 | ' 			res = FR_DISK_ERR;
1c758                 | ' 		}
1c758                 | ' 	}
1c758                 | ' 	return res;
1c758     10 FB 01 F6 | 	mov	result1, local02
1c75c     A7 F0 03 F6 | 	mov	ptra, fp
1c760     B2 00 A0 FD | 	call	#popregs_
1c764                 | _fatfs_cc_sync_window_ret
1c764     2D 00 64 FD | 	ret
1c768                 | 
1c768                 | _fatfs_cc_move_window
1c768     03 4A 05 F6 | 	mov	COUNT_, #3
1c76c     A8 00 A0 FD | 	call	#pushregs_
1c770     09 1F 02 F6 | 	mov	local01, arg01
1c774     0A 21 02 F6 | 	mov	local02, arg02
1c778     00 22 06 F6 | 	mov	local03, #0
1c77c     30 1E 06 F1 | 	add	local01, #48
1c780     0F 19 02 FB | 	rdlong	arg04, local01
1c784     30 1E 86 F1 | 	sub	local01, #48
1c788     0C 21 0A F2 | 	cmp	local02, arg04 wz
1c78c     40 00 90 AD |  if_e	jmp	#LR__3161
1c790     0F 13 02 F6 | 	mov	arg01, local01
1c794     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1c798     FD 22 0A F6 | 	mov	local03, result1 wz
1c79c     30 00 90 5D |  if_ne	jmp	#LR__3160
1c7a0     01 1E 06 F1 | 	add	local01, #1
1c7a4     0F 13 C2 FA | 	rdbyte	arg01, local01
1c7a8     33 1E 06 F1 | 	add	local01, #51
1c7ac     0F 15 02 F6 | 	mov	arg02, local01
1c7b0     10 17 02 F6 | 	mov	arg03, local02
1c7b4     01 18 06 F6 | 	mov	arg04, #1
1c7b8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1c7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7c0     01 20 66 56 |  if_ne	neg	local02, #1
1c7c4     01 22 06 56 |  if_ne	mov	local03, #1
1c7c8     04 1E 86 F1 | 	sub	local01, #4
1c7cc     0F 21 62 FC | 	wrlong	local02, local01
1c7d0                 | LR__3160
1c7d0                 | LR__3161
1c7d0                 | ' 				sect = (LBA_t)0 - 1;
1c7d0                 | ' 				res = FR_DISK_ERR;
1c7d0                 | ' 			}
1c7d0                 | ' 			fs->winsect = sect;
1c7d0                 | ' 		}
1c7d0                 | ' 	}
1c7d0                 | ' 	return res;
1c7d0     11 FB 01 F6 | 	mov	result1, local03
1c7d4     A7 F0 03 F6 | 	mov	ptra, fp
1c7d8     B2 00 A0 FD | 	call	#popregs_
1c7dc                 | _fatfs_cc_move_window_ret
1c7dc     2D 00 64 FD | 	ret
1c7e0                 | 
1c7e0                 | _fatfs_cc_sync_fs
1c7e0     02 4A 05 F6 | 	mov	COUNT_, #2
1c7e4     A8 00 A0 FD | 	call	#pushregs_
1c7e8     09 1F 02 F6 | 	mov	local01, arg01
1c7ec     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1c7f0     FD 20 0A F6 | 	mov	local02, result1 wz
1c7f4     D8 00 90 5D |  if_ne	jmp	#LR__3171
1c7f8     0F 19 C2 FA | 	rdbyte	arg04, local01
1c7fc     03 18 0E F2 | 	cmp	arg04, #3 wz
1c800     04 1E 06 A1 |  if_e	add	local01, #4
1c804     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1c808     04 1E 86 A1 |  if_e	sub	local01, #4
1c80c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1c810     A0 00 90 5D |  if_ne	jmp	#LR__3170
1c814     34 1E 06 F1 | 	add	local01, #52
1c818     0F 13 02 F6 | 	mov	arg01, local01
1c81c     00 14 06 F6 | 	mov	arg02, #0
1c820     09 16 C6 F9 | 	decod	arg03, #9
1c824     98 00 A0 FD | 	call	#\builtin_bytefill_
1c828     0F 13 02 F6 | 	mov	arg01, local01
1c82c     FE 13 06 F1 | 	add	arg01, #510
1c830     55 00 80 FF 
1c834     09 AB 58 FC | 	wrword	##43605, arg01
1c838     A9 B0 A0 FF 
1c83c     0F A5 68 FC | 	wrlong	##1096897106, local01
1c840     0F 13 02 F6 | 	mov	arg01, local01
1c844     E4 13 06 F1 | 	add	arg01, #484
1c848     B9 A0 B0 FF 
1c84c     09 E5 68 FC | 	wrlong	##1631679090, arg01
1c850     0F 13 02 F6 | 	mov	arg01, local01
1c854     E8 13 06 F1 | 	add	arg01, #488
1c858     20 1E 86 F1 | 	sub	local01, #32
1c85c     0F 15 02 FB | 	rdlong	arg02, local01
1c860     09 15 62 FC | 	wrlong	arg02, arg01
1c864     20 1E 06 F1 | 	add	local01, #32
1c868     0F 13 02 F6 | 	mov	arg01, local01
1c86c     EC 13 06 F1 | 	add	arg01, #492
1c870     24 1E 86 F1 | 	sub	local01, #36
1c874     0F 15 02 FB | 	rdlong	arg02, local01
1c878     09 15 62 FC | 	wrlong	arg02, arg01
1c87c     10 1E 06 F1 | 	add	local01, #16
1c880     0F 17 02 FB | 	rdlong	arg03, local01
1c884     01 16 06 F1 | 	add	arg03, #1
1c888     10 1E 06 F1 | 	add	local01, #16
1c88c     0F 17 62 FC | 	wrlong	arg03, local01
1c890     2F 1E 86 F1 | 	sub	local01, #47
1c894     0F 13 C2 FA | 	rdbyte	arg01, local01
1c898     33 1E 06 F1 | 	add	local01, #51
1c89c     0F 15 02 F6 | 	mov	arg02, local01
1c8a0     01 18 06 F6 | 	mov	arg04, #1
1c8a4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1c8a8     30 1E 86 F1 | 	sub	local01, #48
1c8ac     0F 01 48 FC | 	wrbyte	#0, local01
1c8b0     04 1E 86 F1 | 	sub	local01, #4
1c8b4                 | LR__3170
1c8b4     01 1E 06 F1 | 	add	local01, #1
1c8b8     0F 13 C2 FA | 	rdbyte	arg01, local01
1c8bc     00 14 06 F6 | 	mov	arg02, #0
1c8c0     00 16 06 F6 | 	mov	arg03, #0
1c8c4     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1c8c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8cc     01 20 06 56 |  if_ne	mov	local02, #1
1c8d0                 | LR__3171
1c8d0                 | ' 	}
1c8d0                 | ' 
1c8d0                 | ' 	return res;
1c8d0     10 FB 01 F6 | 	mov	result1, local02
1c8d4     A7 F0 03 F6 | 	mov	ptra, fp
1c8d8     B2 00 A0 FD | 	call	#popregs_
1c8dc                 | _fatfs_cc_sync_fs_ret
1c8dc     2D 00 64 FD | 	ret
1c8e0                 | 
1c8e0                 | _fatfs_cc_clst2sect
1c8e0     02 14 86 F1 | 	sub	arg02, #2
1c8e4     18 12 06 F1 | 	add	arg01, #24
1c8e8     09 01 02 FB | 	rdlong	_var01, arg01
1c8ec     18 12 86 F1 | 	sub	arg01, #24
1c8f0     02 00 86 F1 | 	sub	_var01, #2
1c8f4     00 15 12 F2 | 	cmp	arg02, _var01 wc
1c8f8     00 FA 05 36 |  if_ae	mov	result1, #0
1c8fc     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1c900     0A 12 06 F1 | 	add	arg01, #10
1c904     09 01 E2 FA | 	rdword	_var01, arg01
1c908     0A 01 02 FD | 	qmul	_var01, arg02
1c90c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1c90c     22 12 06 F1 | 	add	arg01, #34
1c910     09 FB 01 FB | 	rdlong	result1, arg01
1c914     18 00 62 FD | 	getqx	_var01
1c918     00 FB 01 F1 | 	add	result1, _var01
1c91c                 | _fatfs_cc_clst2sect_ret
1c91c     2D 00 64 FD | 	ret
1c920                 | 
1c920                 | _fatfs_cc_get_fat
1c920     07 4A 05 F6 | 	mov	COUNT_, #7
1c924     A8 00 A0 FD | 	call	#pushregs_
1c928     0A 1F 02 F6 | 	mov	local01, arg02
1c92c     09 21 02 FB | 	rdlong	local02, arg01
1c930     02 1E 16 F2 | 	cmp	local01, #2 wc
1c934     14 00 90 CD |  if_b	jmp	#LR__3180
1c938     18 20 06 F1 | 	add	local02, #24
1c93c     10 23 02 FB | 	rdlong	local03, local02
1c940     18 20 86 F1 | 	sub	local02, #24
1c944     11 1F 12 F2 | 	cmp	local01, local03 wc
1c948     08 00 90 CD |  if_b	jmp	#LR__3181
1c94c                 | LR__3180
1c94c     01 24 06 F6 | 	mov	local04, #1
1c950     60 01 90 FD | 	jmp	#LR__3188
1c954                 | LR__3181
1c954     01 24 66 F6 | 	neg	local04, #1
1c958                 | ' 		val = 0xFFFFFFFF;
1c958                 | ' 
1c958                 | ' 		switch (fs->fs_type) {
1c958     10 27 C2 FA | 	rdbyte	local05, local02
1c95c     01 26 86 F1 | 	sub	local05, #1
1c960     03 26 26 F3 | 	fle	local05, #3
1c964     30 26 62 FD | 	jmprel	local05
1c968                 | LR__3182
1c968     0C 00 90 FD | 	jmp	#LR__3183
1c96c     B8 00 90 FD | 	jmp	#LR__3184
1c970     F8 00 90 FD | 	jmp	#LR__3185
1c974     38 01 90 FD | 	jmp	#LR__3186
1c978                 | LR__3183
1c978     0F 27 02 F6 | 	mov	local05, local01
1c97c     0F 13 02 F6 | 	mov	arg01, local01
1c980     01 12 46 F0 | 	shr	arg01, #1
1c984     09 27 02 F1 | 	add	local05, arg01
1c988     10 13 02 F6 | 	mov	arg01, local02
1c98c     13 29 02 F6 | 	mov	local06, local05
1c990     09 28 46 F0 | 	shr	local06, #9
1c994     24 20 06 F1 | 	add	local02, #36
1c998     10 15 02 FB | 	rdlong	arg02, local02
1c99c     24 20 86 F1 | 	sub	local02, #36
1c9a0     14 15 02 F1 | 	add	arg02, local06
1c9a4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1c9a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9ac     04 01 90 5D |  if_ne	jmp	#LR__3187
1c9b0     13 29 02 F6 | 	mov	local06, local05
1c9b4     FF 29 06 F5 | 	and	local06, #511
1c9b8     34 20 06 F1 | 	add	local02, #52
1c9bc     10 29 02 F1 | 	add	local06, local02
1c9c0     14 2B C2 FA | 	rdbyte	local07, local06
1c9c4     34 20 86 F1 | 	sub	local02, #52
1c9c8     10 13 02 F6 | 	mov	arg01, local02
1c9cc     01 26 06 F1 | 	add	local05, #1
1c9d0     13 29 02 F6 | 	mov	local06, local05
1c9d4     09 28 46 F0 | 	shr	local06, #9
1c9d8     24 20 06 F1 | 	add	local02, #36
1c9dc     10 15 02 FB | 	rdlong	arg02, local02
1c9e0     24 20 86 F1 | 	sub	local02, #36
1c9e4     14 15 02 F1 | 	add	arg02, local06
1c9e8     7C FD BF FD | 	call	#_fatfs_cc_move_window
1c9ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9f0     C0 00 90 5D |  if_ne	jmp	#LR__3187
1c9f4     FF 27 06 F5 | 	and	local05, #511
1c9f8     34 20 06 F1 | 	add	local02, #52
1c9fc     10 27 02 F1 | 	add	local05, local02
1ca00     13 29 C2 FA | 	rdbyte	local06, local05
1ca04     08 28 66 F0 | 	shl	local06, #8
1ca08     14 2B 42 F5 | 	or	local07, local06
1ca0c     01 1E CE F7 | 	test	local01, #1 wz
1ca10     04 2A 46 50 |  if_ne	shr	local07, #4
1ca14     15 23 02 56 |  if_ne	mov	local03, local07
1ca18     0B 2A 46 A7 |  if_e	zerox	local07, #11
1ca1c     15 23 02 A6 |  if_e	mov	local03, local07
1ca20     11 25 02 F6 | 	mov	local04, local03
1ca24                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1ca24                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1ca24                 | ' 			break;
1ca24     8C 00 90 FD | 	jmp	#LR__3187
1ca28                 | LR__3184
1ca28     10 13 02 F6 | 	mov	arg01, local02
1ca2c     0F 29 02 F6 | 	mov	local06, local01
1ca30     08 28 46 F0 | 	shr	local06, #8
1ca34     24 20 06 F1 | 	add	local02, #36
1ca38     10 15 02 FB | 	rdlong	arg02, local02
1ca3c     24 20 86 F1 | 	sub	local02, #36
1ca40     14 15 02 F1 | 	add	arg02, local06
1ca44     20 FD BF FD | 	call	#_fatfs_cc_move_window
1ca48     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca4c     64 00 90 5D |  if_ne	jmp	#LR__3187
1ca50     34 20 06 F1 | 	add	local02, #52
1ca54     01 1E 66 F0 | 	shl	local01, #1
1ca58     FF 1F 06 F5 | 	and	local01, #511
1ca5c     0F 21 02 F1 | 	add	local02, local01
1ca60                 | ' {
1ca60                 | ' 
1ca60                 | ' 	return *((WORD*)ptr);
1ca60     10 FB E1 FA | 	rdword	result1, local02
1ca64     FD 24 32 F9 | 	getword	local04, result1, #0
1ca68                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1ca68                 | ' 			break;
1ca68     48 00 90 FD | 	jmp	#LR__3187
1ca6c                 | LR__3185
1ca6c     10 13 02 F6 | 	mov	arg01, local02
1ca70     0F 29 02 F6 | 	mov	local06, local01
1ca74     07 28 46 F0 | 	shr	local06, #7
1ca78     24 20 06 F1 | 	add	local02, #36
1ca7c     10 15 02 FB | 	rdlong	arg02, local02
1ca80     24 20 86 F1 | 	sub	local02, #36
1ca84     14 15 02 F1 | 	add	arg02, local06
1ca88     DC FC BF FD | 	call	#_fatfs_cc_move_window
1ca8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca90     20 00 90 5D |  if_ne	jmp	#LR__3187
1ca94     34 20 06 F1 | 	add	local02, #52
1ca98     02 1E 66 F0 | 	shl	local01, #2
1ca9c     FF 1F 06 F5 | 	and	local01, #511
1caa0     0F 21 02 F1 | 	add	local02, local01
1caa4                 | ' {
1caa4                 | ' 
1caa4                 | ' 	return *((DWORD*)ptr);
1caa4     10 25 02 FB | 	rdlong	local04, local02
1caa8     7C 24 06 F4 | 	bitl	local04, #124
1caac                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1caac                 | ' 			break;
1caac     04 00 90 FD | 	jmp	#LR__3187
1cab0                 | LR__3186
1cab0     01 24 06 F6 | 	mov	local04, #1
1cab4                 | LR__3187
1cab4                 | LR__3188
1cab4                 | ' 			val = 1;
1cab4                 | ' 		}
1cab4                 | ' 	}
1cab4                 | ' 
1cab4                 | ' 	return val;
1cab4     12 FB 01 F6 | 	mov	result1, local04
1cab8     A7 F0 03 F6 | 	mov	ptra, fp
1cabc     B2 00 A0 FD | 	call	#popregs_
1cac0                 | _fatfs_cc_get_fat_ret
1cac0     2D 00 64 FD | 	ret
1cac4                 | 
1cac4                 | _fatfs_cc_put_fat
1cac4     08 4A 05 F6 | 	mov	COUNT_, #8
1cac8     A8 00 A0 FD | 	call	#pushregs_
1cacc     09 1F 02 F6 | 	mov	local01, arg01
1cad0     0A 21 02 F6 | 	mov	local02, arg02
1cad4     0B 23 02 F6 | 	mov	local03, arg03
1cad8     02 24 06 F6 | 	mov	local04, #2
1cadc     02 20 16 F2 | 	cmp	local02, #2 wc
1cae0     E0 01 90 CD |  if_b	jmp	#LR__3197
1cae4     18 1E 06 F1 | 	add	local01, #24
1cae8     0F 27 02 FB | 	rdlong	local05, local01
1caec     18 1E 86 F1 | 	sub	local01, #24
1caf0     13 21 12 F2 | 	cmp	local02, local05 wc
1caf4     CC 01 90 3D |  if_ae	jmp	#LR__3197
1caf8                 | ' 		switch (fs->fs_type) {
1caf8     0F 29 C2 FA | 	rdbyte	local06, local01
1cafc     01 28 86 F1 | 	sub	local06, #1
1cb00     03 28 26 F3 | 	fle	local06, #3
1cb04     30 28 62 FD | 	jmprel	local06
1cb08                 | LR__3190
1cb08     0C 00 90 FD | 	jmp	#LR__3191
1cb0c     F8 00 90 FD | 	jmp	#LR__3194
1cb10     40 01 90 FD | 	jmp	#LR__3195
1cb14     AC 01 90 FD | 	jmp	#LR__3196
1cb18                 | LR__3191
1cb18     10 2B 02 F6 | 	mov	local07, local02
1cb1c     10 27 02 F6 | 	mov	local05, local02
1cb20     01 26 46 F0 | 	shr	local05, #1
1cb24     13 2B 02 F1 | 	add	local07, local05
1cb28     0F 13 02 F6 | 	mov	arg01, local01
1cb2c     15 29 02 F6 | 	mov	local06, local07
1cb30     09 28 46 F0 | 	shr	local06, #9
1cb34     24 1E 06 F1 | 	add	local01, #36
1cb38     0F 15 02 FB | 	rdlong	arg02, local01
1cb3c     24 1E 86 F1 | 	sub	local01, #36
1cb40     14 15 02 F1 | 	add	arg02, local06
1cb44     20 FC BF FD | 	call	#_fatfs_cc_move_window
1cb48     FD 24 0A F6 | 	mov	local04, result1 wz
1cb4c     74 01 90 5D |  if_ne	jmp	#LR__3196
1cb50     34 1E 06 F1 | 	add	local01, #52
1cb54     0F 2D 02 F6 | 	mov	local08, local01
1cb58     15 27 02 F6 | 	mov	local05, local07
1cb5c     FF 27 06 F5 | 	and	local05, #511
1cb60     13 2D 02 F1 | 	add	local08, local05
1cb64     01 20 CE F7 | 	test	local02, #1 wz
1cb68     34 1E 86 F1 | 	sub	local01, #52
1cb6c     01 2A 06 F1 | 	add	local07, #1
1cb70     18 00 90 AD |  if_e	jmp	#LR__3192
1cb74     16 27 C2 FA | 	rdbyte	local05, local08
1cb78     13 27 42 F8 | 	getnib	local05, local05, #0
1cb7c     11 29 E2 F8 | 	getbyte	local06, local03, #0
1cb80     04 28 66 F0 | 	shl	local06, #4
1cb84     14 27 42 F5 | 	or	local05, local06
1cb88     04 00 90 FD | 	jmp	#LR__3193
1cb8c                 | LR__3192
1cb8c     11 27 02 F6 | 	mov	local05, local03
1cb90                 | LR__3193
1cb90     16 27 42 FC | 	wrbyte	local05, local08
1cb94     03 1E 06 F1 | 	add	local01, #3
1cb98     0F 03 48 FC | 	wrbyte	#1, local01
1cb9c     03 1E 86 F1 | 	sub	local01, #3
1cba0     0F 13 02 F6 | 	mov	arg01, local01
1cba4     15 2D 02 F6 | 	mov	local08, local07
1cba8     09 2C 46 F0 | 	shr	local08, #9
1cbac     24 1E 06 F1 | 	add	local01, #36
1cbb0     0F 15 02 FB | 	rdlong	arg02, local01
1cbb4     24 1E 86 F1 | 	sub	local01, #36
1cbb8     16 15 02 F1 | 	add	arg02, local08
1cbbc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1cbc0     FD 24 0A F6 | 	mov	local04, result1 wz
1cbc4     FC 00 90 5D |  if_ne	jmp	#LR__3196
1cbc8     34 1E 06 F1 | 	add	local01, #52
1cbcc     0F 2D 02 F6 | 	mov	local08, local01
1cbd0     FF 2B 06 F5 | 	and	local07, #511
1cbd4     15 2D 02 F1 | 	add	local08, local07
1cbd8     01 20 CE F7 | 	test	local02, #1 wz
1cbdc     04 22 46 50 |  if_ne	shr	local03, #4
1cbe0     11 27 02 56 |  if_ne	mov	local05, local03
1cbe4     16 27 C2 AA |  if_e	rdbyte	local05, local08
1cbe8     F0 26 06 A5 |  if_e	and	local05, #240
1cbec     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1cbf0     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1cbf4     11 27 42 A5 |  if_e	or	local05, local03
1cbf8     16 27 42 FC | 	wrbyte	local05, local08
1cbfc     31 1E 86 F1 | 	sub	local01, #49
1cc00     0F 03 48 FC | 	wrbyte	#1, local01
1cc04                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1cc04                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1cc04                 | ' 			fs->wflag = 1;
1cc04                 | ' 			break;
1cc04     BC 00 90 FD | 	jmp	#LR__3196
1cc08                 | LR__3194
1cc08     0F 13 02 F6 | 	mov	arg01, local01
1cc0c     10 2D 02 F6 | 	mov	local08, local02
1cc10     08 2C 46 F0 | 	shr	local08, #8
1cc14     24 1E 06 F1 | 	add	local01, #36
1cc18     0F 15 02 FB | 	rdlong	arg02, local01
1cc1c     24 1E 86 F1 | 	sub	local01, #36
1cc20     16 15 02 F1 | 	add	arg02, local08
1cc24     40 FB BF FD | 	call	#_fatfs_cc_move_window
1cc28     FD 24 0A F6 | 	mov	local04, result1 wz
1cc2c     94 00 90 5D |  if_ne	jmp	#LR__3196
1cc30     34 1E 06 F1 | 	add	local01, #52
1cc34     0F 13 02 F6 | 	mov	arg01, local01
1cc38     01 20 66 F0 | 	shl	local02, #1
1cc3c     FF 21 06 F5 | 	and	local02, #511
1cc40     10 13 02 F1 | 	add	arg01, local02
1cc44     09 23 52 FC | 	wrword	local03, arg01
1cc48     31 1E 86 F1 | 	sub	local01, #49
1cc4c     0F 03 48 FC | 	wrbyte	#1, local01
1cc50                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1cc50                 | ' 			fs->wflag = 1;
1cc50                 | ' 			break;
1cc50     70 00 90 FD | 	jmp	#LR__3196
1cc54                 | LR__3195
1cc54     0F 13 02 F6 | 	mov	arg01, local01
1cc58     10 2D 02 F6 | 	mov	local08, local02
1cc5c     07 2C 46 F0 | 	shr	local08, #7
1cc60     24 1E 06 F1 | 	add	local01, #36
1cc64     0F 15 02 FB | 	rdlong	arg02, local01
1cc68     24 1E 86 F1 | 	sub	local01, #36
1cc6c     16 15 02 F1 | 	add	arg02, local08
1cc70     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1cc74     FD 24 0A F6 | 	mov	local04, result1 wz
1cc78     48 00 90 5D |  if_ne	jmp	#LR__3196
1cc7c     7C 22 06 F4 | 	bitl	local03, #124
1cc80     34 1E 06 F1 | 	add	local01, #52
1cc84     10 2D 02 F6 | 	mov	local08, local02
1cc88     02 2C 66 F0 | 	shl	local08, #2
1cc8c     FF 2D 06 F5 | 	and	local08, #511
1cc90     0F 13 02 F6 | 	mov	arg01, local01
1cc94     16 13 02 F1 | 	add	arg01, local08
1cc98                 | ' {
1cc98                 | ' 
1cc98                 | ' 	return *((DWORD*)ptr);
1cc98     09 2D 02 FB | 	rdlong	local08, arg01
1cc9c     00 00 78 FF 
1cca0     00 2C 06 F5 | 	and	local08, ##-268435456
1cca4     16 23 42 F5 | 	or	local03, local08
1cca8     0F 13 02 F6 | 	mov	arg01, local01
1ccac     02 20 66 F0 | 	shl	local02, #2
1ccb0     FF 21 06 F5 | 	and	local02, #511
1ccb4     10 13 02 F1 | 	add	arg01, local02
1ccb8     09 23 62 FC | 	wrlong	local03, arg01
1ccbc     31 1E 86 F1 | 	sub	local01, #49
1ccc0     0F 03 48 FC | 	wrbyte	#1, local01
1ccc4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1ccc4                 | ' 			}
1ccc4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1ccc4                 | ' 			fs->wflag = 1;
1ccc4                 | ' 			break;
1ccc4                 | LR__3196
1ccc4                 | LR__3197
1ccc4                 | ' 		}
1ccc4                 | ' 	}
1ccc4                 | ' 	return res;
1ccc4     12 FB 01 F6 | 	mov	result1, local04
1ccc8     A7 F0 03 F6 | 	mov	ptra, fp
1cccc     B2 00 A0 FD | 	call	#popregs_
1ccd0                 | _fatfs_cc_put_fat_ret
1ccd0     2D 00 64 FD | 	ret
1ccd4                 | 
1ccd4                 | _fatfs_cc_remove_chain
1ccd4     05 4A 05 F6 | 	mov	COUNT_, #5
1ccd8     A8 00 A0 FD | 	call	#pushregs_
1ccdc     09 1F 02 F6 | 	mov	local01, arg01
1cce0     0A 21 02 F6 | 	mov	local02, arg02
1cce4     0B 23 02 F6 | 	mov	local03, arg03
1cce8     0F 25 02 FB | 	rdlong	local04, local01
1ccec     02 20 16 F2 | 	cmp	local02, #2 wc
1ccf0     14 00 90 CD |  if_b	jmp	#LR__3200
1ccf4     18 24 06 F1 | 	add	local04, #24
1ccf8     12 FB 01 FB | 	rdlong	result1, local04
1ccfc     18 24 86 F1 | 	sub	local04, #24
1cd00     FD 20 12 F2 | 	cmp	local02, result1 wc
1cd04     08 00 90 CD |  if_b	jmp	#LR__3201
1cd08                 | LR__3200
1cd08     02 FA 05 F6 | 	mov	result1, #2
1cd0c     CC 00 90 FD | 	jmp	#LR__3206
1cd10                 | LR__3201
1cd10     00 22 0E F2 | 	cmp	local03, #0 wz
1cd14     18 00 90 AD |  if_e	jmp	#LR__3202
1cd18     11 15 02 F6 | 	mov	arg02, local03
1cd1c     12 13 02 F6 | 	mov	arg01, local04
1cd20     01 16 66 F6 | 	neg	arg03, #1
1cd24     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1cd28     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd2c     AC 00 90 5D |  if_ne	jmp	#LR__3206
1cd30                 | LR__3202
1cd30                 | ' 	}
1cd30                 | ' 
1cd30                 | ' 
1cd30                 | ' 	do {
1cd30                 | LR__3203
1cd30     10 15 02 F6 | 	mov	arg02, local02
1cd34     0F 13 02 F6 | 	mov	arg01, local01
1cd38     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1cd3c     FD 26 0A F6 | 	mov	local05, result1 wz
1cd40     94 00 90 AD |  if_e	jmp	#LR__3205
1cd44     01 26 0E F2 | 	cmp	local05, #1 wz
1cd48     02 FA 05 A6 |  if_e	mov	result1, #2
1cd4c     8C 00 90 AD |  if_e	jmp	#LR__3206
1cd50     FF FF 7F FF 
1cd54     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1cd58     01 FA 05 A6 |  if_e	mov	result1, #1
1cd5c     7C 00 90 AD |  if_e	jmp	#LR__3206
1cd60     10 15 02 F6 | 	mov	arg02, local02
1cd64     12 13 02 F6 | 	mov	arg01, local04
1cd68     00 16 06 F6 | 	mov	arg03, #0
1cd6c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1cd70     FD 22 0A F6 | 	mov	local03, result1 wz
1cd74     11 FB 01 56 |  if_ne	mov	result1, local03
1cd78     60 00 90 5D |  if_ne	jmp	#LR__3206
1cd7c     18 24 06 F1 | 	add	local04, #24
1cd80     12 23 02 FB | 	rdlong	local03, local04
1cd84     02 22 86 F1 | 	sub	local03, #2
1cd88     04 24 86 F1 | 	sub	local04, #4
1cd8c     12 21 02 FB | 	rdlong	local02, local04
1cd90     14 24 86 F1 | 	sub	local04, #20
1cd94     11 21 12 F2 | 	cmp	local02, local03 wc
1cd98     24 00 90 3D |  if_ae	jmp	#LR__3204
1cd9c     14 24 06 F1 | 	add	local04, #20
1cda0     12 23 02 FB | 	rdlong	local03, local04
1cda4     01 22 06 F1 | 	add	local03, #1
1cda8     12 23 62 FC | 	wrlong	local03, local04
1cdac     10 24 86 F1 | 	sub	local04, #16
1cdb0     12 23 C2 FA | 	rdbyte	local03, local04
1cdb4     01 22 46 F5 | 	or	local03, #1
1cdb8     12 23 42 FC | 	wrbyte	local03, local04
1cdbc     04 24 86 F1 | 	sub	local04, #4
1cdc0                 | LR__3204
1cdc0     13 21 02 F6 | 	mov	local02, local05
1cdc4     18 24 06 F1 | 	add	local04, #24
1cdc8     12 27 02 FB | 	rdlong	local05, local04
1cdcc     18 24 86 F1 | 	sub	local04, #24
1cdd0     13 21 12 F2 | 	cmp	local02, local05 wc
1cdd4     58 FF 9F CD |  if_b	jmp	#LR__3203
1cdd8                 | LR__3205
1cdd8                 | ' #line 1500 "ff.c"
1cdd8                 | ' 	return FR_OK;
1cdd8     00 FA 05 F6 | 	mov	result1, #0
1cddc                 | LR__3206
1cddc     A7 F0 03 F6 | 	mov	ptra, fp
1cde0     B2 00 A0 FD | 	call	#popregs_
1cde4                 | _fatfs_cc_remove_chain_ret
1cde4     2D 00 64 FD | 	ret
1cde8                 | 
1cde8                 | _fatfs_cc_create_chain
1cde8     09 4A 05 F6 | 	mov	COUNT_, #9
1cdec     A8 00 A0 FD | 	call	#pushregs_
1cdf0     09 1F 02 F6 | 	mov	local01, arg01
1cdf4     0A 21 0A F6 | 	mov	local02, arg02 wz
1cdf8     0F 23 02 FB | 	rdlong	local03, local01
1cdfc     28 00 90 5D |  if_ne	jmp	#LR__3210
1ce00     10 22 06 F1 | 	add	local03, #16
1ce04     11 25 0A FB | 	rdlong	local04, local03 wz
1ce08     10 22 86 F1 | 	sub	local03, #16
1ce0c     18 22 06 51 |  if_ne	add	local03, #24
1ce10     11 27 02 5B |  if_ne	rdlong	local05, local03
1ce14     18 22 86 51 |  if_ne	sub	local03, #24
1ce18     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1ce1c     50 00 90 4D |  if_c_and_nz	jmp	#LR__3211
1ce20     01 24 06 F6 | 	mov	local04, #1
1ce24     48 00 90 FD | 	jmp	#LR__3211
1ce28                 | LR__3210
1ce28     10 15 02 F6 | 	mov	arg02, local02
1ce2c     0F 13 02 F6 | 	mov	arg01, local01
1ce30     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1ce34     FD 24 02 F6 | 	mov	local04, result1
1ce38     02 24 16 F2 | 	cmp	local04, #2 wc
1ce3c     01 FA 05 C6 |  if_b	mov	result1, #1
1ce40     BC 01 90 CD |  if_b	jmp	#LR__3221
1ce44     FF FF 7F FF 
1ce48     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1ce4c     12 FB 01 A6 |  if_e	mov	result1, local04
1ce50     AC 01 90 AD |  if_e	jmp	#LR__3221
1ce54     18 22 06 F1 | 	add	local03, #24
1ce58     11 27 02 FB | 	rdlong	local05, local03
1ce5c     18 22 86 F1 | 	sub	local03, #24
1ce60     13 25 12 F2 | 	cmp	local04, local05 wc
1ce64     12 FB 01 C6 |  if_b	mov	result1, local04
1ce68     94 01 90 CD |  if_b	jmp	#LR__3221
1ce6c     10 25 02 F6 | 	mov	local04, local02
1ce70                 | LR__3211
1ce70     14 22 06 F1 | 	add	local03, #20
1ce74     11 27 0A FB | 	rdlong	local05, local03 wz
1ce78     14 22 86 F1 | 	sub	local03, #20
1ce7c     00 FA 05 A6 |  if_e	mov	result1, #0
1ce80     7C 01 90 AD |  if_e	jmp	#LR__3221
1ce84     00 28 06 F6 | 	mov	local06, #0
1ce88     10 25 0A F2 | 	cmp	local04, local02 wz
1ce8c     74 00 90 5D |  if_ne	jmp	#LR__3214
1ce90     12 29 02 F6 | 	mov	local06, local04
1ce94     01 28 06 F1 | 	add	local06, #1
1ce98     18 22 06 F1 | 	add	local03, #24
1ce9c     11 27 02 FB | 	rdlong	local05, local03
1cea0     18 22 86 F1 | 	sub	local03, #24
1cea4     13 29 12 F2 | 	cmp	local06, local05 wc
1cea8     02 28 06 36 |  if_ae	mov	local06, #2
1ceac     14 15 02 F6 | 	mov	arg02, local06
1ceb0     0F 13 02 F6 | 	mov	arg01, local01
1ceb4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1ceb8     FD 26 02 F6 | 	mov	local05, result1
1cebc     01 26 0E F2 | 	cmp	local05, #1 wz
1cec0     FF FF 7F 5F 
1cec4     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1cec8     13 FB 01 A6 |  if_e	mov	result1, local05
1cecc     30 01 90 AD |  if_e	jmp	#LR__3221
1ced0     00 26 0E F2 | 	cmp	local05, #0 wz
1ced4     2C 00 90 AD |  if_e	jmp	#LR__3213
1ced8     10 22 06 F1 | 	add	local03, #16
1cedc     11 2B 02 FB | 	rdlong	local07, local03
1cee0     10 22 86 F1 | 	sub	local03, #16
1cee4     02 2A 16 F2 | 	cmp	local07, #2 wc
1cee8     14 00 90 CD |  if_b	jmp	#LR__3212
1ceec     18 22 06 F1 | 	add	local03, #24
1cef0     11 27 02 FB | 	rdlong	local05, local03
1cef4     18 22 86 F1 | 	sub	local03, #24
1cef8     13 2B 12 F2 | 	cmp	local07, local05 wc
1cefc     15 25 02 C6 |  if_b	mov	local04, local07
1cf00                 | LR__3212
1cf00     00 28 06 F6 | 	mov	local06, #0
1cf04                 | LR__3213
1cf04                 | LR__3214
1cf04     00 28 0E F2 | 	cmp	local06, #0 wz
1cf08     60 00 90 5D |  if_ne	jmp	#LR__3217
1cf0c     12 29 02 F6 | 	mov	local06, local04
1cf10                 | ' 			ncl = scl;
1cf10                 | ' 			for (;;) {
1cf10                 | LR__3215
1cf10     01 28 06 F1 | 	add	local06, #1
1cf14     18 22 06 F1 | 	add	local03, #24
1cf18     11 27 02 FB | 	rdlong	local05, local03
1cf1c     18 22 86 F1 | 	sub	local03, #24
1cf20     13 29 12 F2 | 	cmp	local06, local05 wc
1cf24     02 28 06 36 |  if_ae	mov	local06, #2
1cf28     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1cf2c     00 FA 05 16 |  if_a	mov	result1, #0
1cf30     CC 00 90 1D |  if_a	jmp	#LR__3221
1cf34     14 15 02 F6 | 	mov	arg02, local06
1cf38     0F 13 02 F6 | 	mov	arg01, local01
1cf3c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1cf40     FD 2A 0A F6 | 	mov	local07, result1 wz
1cf44     24 00 90 AD |  if_e	jmp	#LR__3216
1cf48     01 2A 0E F2 | 	cmp	local07, #1 wz
1cf4c     FF FF 7F 5F 
1cf50     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1cf54     15 FB 01 A6 |  if_e	mov	result1, local07
1cf58     A4 00 90 AD |  if_e	jmp	#LR__3221
1cf5c     12 29 0A F2 | 	cmp	local06, local04 wz
1cf60     00 FA 05 A6 |  if_e	mov	result1, #0
1cf64     98 00 90 AD |  if_e	jmp	#LR__3221
1cf68     A4 FF 9F FD | 	jmp	#LR__3215
1cf6c                 | LR__3216
1cf6c                 | LR__3217
1cf6c     11 13 02 F6 | 	mov	arg01, local03
1cf70     14 15 02 F6 | 	mov	arg02, local06
1cf74     01 16 66 F6 | 	neg	arg03, #1
1cf78     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1cf7c     FD 2C 0A F6 | 	mov	local08, result1 wz
1cf80     1C 00 90 5D |  if_ne	jmp	#LR__3218
1cf84     00 20 0E F2 | 	cmp	local02, #0 wz
1cf88     14 00 90 AD |  if_e	jmp	#LR__3218
1cf8c     11 13 02 F6 | 	mov	arg01, local03
1cf90     10 15 02 F6 | 	mov	arg02, local02
1cf94     14 17 02 F6 | 	mov	arg03, local06
1cf98     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1cf9c     FD 2C 02 F6 | 	mov	local08, result1
1cfa0                 | LR__3218
1cfa0     00 2C 0E F2 | 	cmp	local08, #0 wz
1cfa4     4C 00 90 5D |  if_ne	jmp	#LR__3219
1cfa8     10 22 06 F1 | 	add	local03, #16
1cfac     11 29 62 FC | 	wrlong	local06, local03
1cfb0     08 22 06 F1 | 	add	local03, #8
1cfb4     11 27 02 FB | 	rdlong	local05, local03
1cfb8     02 26 86 F1 | 	sub	local05, #2
1cfbc     04 22 86 F1 | 	sub	local03, #4
1cfc0     11 2F 02 FB | 	rdlong	local09, local03
1cfc4     14 22 86 F1 | 	sub	local03, #20
1cfc8     13 2F 1A F2 | 	cmp	local09, local05 wcz
1cfcc     14 22 06 E1 |  if_be	add	local03, #20
1cfd0     11 2F 02 EB |  if_be	rdlong	local09, local03
1cfd4     01 2E 86 E1 |  if_be	sub	local09, #1
1cfd8     11 2F 62 EC |  if_be	wrlong	local09, local03
1cfdc     14 22 86 E1 |  if_be	sub	local03, #20
1cfe0     04 22 06 F1 | 	add	local03, #4
1cfe4     11 27 C2 FA | 	rdbyte	local05, local03
1cfe8     01 26 46 F5 | 	or	local05, #1
1cfec     11 27 42 FC | 	wrbyte	local05, local03
1cff0     08 00 90 FD | 	jmp	#LR__3220
1cff4                 | LR__3219
1cff4     01 2C 0E F2 | 	cmp	local08, #1 wz
1cff8     01 28 C6 F6 | 	negz	local06, #1
1cffc                 | LR__3220
1cffc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1cffc                 | ' 	}
1cffc                 | ' 
1cffc                 | ' 	return ncl;
1cffc     14 FB 01 F6 | 	mov	result1, local06
1d000                 | LR__3221
1d000     A7 F0 03 F6 | 	mov	ptra, fp
1d004     B2 00 A0 FD | 	call	#popregs_
1d008                 | _fatfs_cc_create_chain_ret
1d008     2D 00 64 FD | 	ret
1d00c                 | 
1d00c                 | _fatfs_cc_dir_clear
1d00c     06 4A 05 F6 | 	mov	COUNT_, #6
1d010     A8 00 A0 FD | 	call	#pushregs_
1d014     09 1F 02 F6 | 	mov	local01, arg01
1d018     0A 21 02 F6 | 	mov	local02, arg02
1d01c     0F 13 02 F6 | 	mov	arg01, local01
1d020     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1d024     00 FA 0D F2 | 	cmp	result1, #0 wz
1d028     01 FA 05 56 |  if_ne	mov	result1, #1
1d02c     90 00 90 5D |  if_ne	jmp	#LR__3232
1d030     0F 13 02 F6 | 	mov	arg01, local01
1d034     10 15 02 F6 | 	mov	arg02, local02
1d038     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1d03c     FD 22 02 F6 | 	mov	local03, result1
1d040     30 1E 06 F1 | 	add	local01, #48
1d044     0F 23 62 FC | 	wrlong	local03, local01
1d048     04 1E 06 F1 | 	add	local01, #4
1d04c     0F 13 02 F6 | 	mov	arg01, local01
1d050     00 14 06 F6 | 	mov	arg02, #0
1d054     09 16 C6 F9 | 	decod	arg03, #9
1d058     98 00 A0 FD | 	call	#\builtin_bytefill_
1d05c     0F 25 02 F6 | 	mov	local04, local01
1d060                 | ' #line 1667 "ff.c"
1d060                 | ' 	{
1d060                 | ' 		ibuf = fs->win; szb = 1;
1d060                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1d060     00 26 06 F6 | 	mov	local05, #0
1d064     34 1E 86 F1 | 	sub	local01, #52
1d068                 | LR__3230
1d068     0A 1E 06 F1 | 	add	local01, #10
1d06c     0F 29 E2 FA | 	rdword	local06, local01
1d070     0A 1E 86 F1 | 	sub	local01, #10
1d074     14 27 12 F2 | 	cmp	local05, local06 wc
1d078     2C 00 90 3D |  if_ae	jmp	#LR__3231
1d07c     01 1E 06 F1 | 	add	local01, #1
1d080     0F 13 C2 FA | 	rdbyte	arg01, local01
1d084     01 1E 86 F1 | 	sub	local01, #1
1d088     12 15 02 F6 | 	mov	arg02, local04
1d08c     11 17 02 F6 | 	mov	arg03, local03
1d090     13 17 02 F1 | 	add	arg03, local05
1d094     01 18 06 F6 | 	mov	arg04, #1
1d098     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1d09c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0a0     01 26 06 A1 |  if_e	add	local05, #1
1d0a4     C0 FF 9F AD |  if_e	jmp	#LR__3230
1d0a8                 | LR__3231
1d0a8                 | ' 	}
1d0a8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1d0a8     0A 1E 06 F1 | 	add	local01, #10
1d0ac     0F 25 E2 FA | 	rdword	local04, local01
1d0b0     12 27 0A F2 | 	cmp	local05, local04 wz
1d0b4     00 28 06 A6 |  if_e	mov	local06, #0
1d0b8     01 28 06 56 |  if_ne	mov	local06, #1
1d0bc     14 FB 01 F6 | 	mov	result1, local06
1d0c0                 | LR__3232
1d0c0     A7 F0 03 F6 | 	mov	ptra, fp
1d0c4     B2 00 A0 FD | 	call	#popregs_
1d0c8                 | _fatfs_cc_dir_clear_ret
1d0c8     2D 00 64 FD | 	ret
1d0cc                 | 
1d0cc                 | _fatfs_cc_dir_sdi
1d0cc     06 4A 05 F6 | 	mov	COUNT_, #6
1d0d0     A8 00 A0 FD | 	call	#pushregs_
1d0d4     09 1F 02 F6 | 	mov	local01, arg01
1d0d8     0A 21 02 F6 | 	mov	local02, arg02
1d0dc     0F 23 02 FB | 	rdlong	local03, local01
1d0e0     00 10 00 FF 
1d0e4     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1d0e8     1F 20 CE C7 |  if_b	test	local02, #31 wz
1d0ec                 | ' 		return FR_INT_ERR;
1d0ec     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1d0f0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3246
1d0f4     10 1E 06 F1 | 	add	local01, #16
1d0f8     0F 21 62 FC | 	wrlong	local02, local01
1d0fc     08 1E 86 F1 | 	sub	local01, #8
1d100     0F 25 0A FB | 	rdlong	local04, local01 wz
1d104     08 1E 86 F1 | 	sub	local01, #8
1d108     11 27 C2 AA |  if_e	rdbyte	local05, local03
1d10c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1d110     28 22 06 21 |  if_nc_and_z	add	local03, #40
1d114     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1d118     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1d11c     00 24 0E F2 | 	cmp	local04, #0 wz
1d120     3C 00 90 5D |  if_ne	jmp	#LR__3240
1d124     10 27 02 F6 | 	mov	local05, local02
1d128     05 26 46 F0 | 	shr	local05, #5
1d12c     08 22 06 F1 | 	add	local03, #8
1d130     11 15 E2 FA | 	rdword	arg02, local03
1d134     08 22 86 F1 | 	sub	local03, #8
1d138     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d13c     02 FA 05 36 |  if_ae	mov	result1, #2
1d140     E4 00 90 3D |  if_ae	jmp	#LR__3246
1d144     28 22 06 F1 | 	add	local03, #40
1d148     11 27 02 FB | 	rdlong	local05, local03
1d14c     28 22 86 F1 | 	sub	local03, #40
1d150     18 1E 06 F1 | 	add	local01, #24
1d154     0F 27 62 FC | 	wrlong	local05, local01
1d158     18 1E 86 F1 | 	sub	local01, #24
1d15c     7C 00 90 FD | 	jmp	#LR__3245
1d160                 | LR__3240
1d160     0A 22 06 F1 | 	add	local03, #10
1d164     11 29 E2 FA | 	rdword	local06, local03
1d168     0A 22 86 F1 | 	sub	local03, #10
1d16c     09 28 66 F0 | 	shl	local06, #9
1d170                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1d170                 | ' 		while (ofs >= csz) {
1d170                 | LR__3241
1d170     14 21 12 F2 | 	cmp	local02, local06 wc
1d174     4C 00 90 CD |  if_b	jmp	#LR__3244
1d178     0F 13 02 F6 | 	mov	arg01, local01
1d17c     12 15 02 F6 | 	mov	arg02, local04
1d180     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1d184     FD 24 02 F6 | 	mov	local04, result1
1d188     FF FF 7F FF 
1d18c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d190     01 FA 05 A6 |  if_e	mov	result1, #1
1d194     90 00 90 AD |  if_e	jmp	#LR__3246
1d198     02 24 16 F2 | 	cmp	local04, #2 wc
1d19c     14 00 90 CD |  if_b	jmp	#LR__3242
1d1a0     18 22 06 F1 | 	add	local03, #24
1d1a4     11 27 02 FB | 	rdlong	local05, local03
1d1a8     18 22 86 F1 | 	sub	local03, #24
1d1ac     13 25 12 F2 | 	cmp	local04, local05 wc
1d1b0     08 00 90 CD |  if_b	jmp	#LR__3243
1d1b4                 | LR__3242
1d1b4     02 FA 05 F6 | 	mov	result1, #2
1d1b8     6C 00 90 FD | 	jmp	#LR__3246
1d1bc                 | LR__3243
1d1bc     14 21 82 F1 | 	sub	local02, local06
1d1c0     AC FF 9F FD | 	jmp	#LR__3241
1d1c4                 | LR__3244
1d1c4     11 13 02 F6 | 	mov	arg01, local03
1d1c8     12 15 02 F6 | 	mov	arg02, local04
1d1cc     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1d1d0     18 1E 06 F1 | 	add	local01, #24
1d1d4     0F FB 61 FC | 	wrlong	result1, local01
1d1d8     18 1E 86 F1 | 	sub	local01, #24
1d1dc                 | LR__3245
1d1dc     14 1E 06 F1 | 	add	local01, #20
1d1e0     0F 25 62 FC | 	wrlong	local04, local01
1d1e4     04 1E 06 F1 | 	add	local01, #4
1d1e8     0F 27 0A FB | 	rdlong	local05, local01 wz
1d1ec     18 1E 86 F1 | 	sub	local01, #24
1d1f0     02 FA 05 A6 |  if_e	mov	result1, #2
1d1f4     30 00 90 AD |  if_e	jmp	#LR__3246
1d1f8     10 29 02 F6 | 	mov	local06, local02
1d1fc     09 28 46 F0 | 	shr	local06, #9
1d200     18 1E 06 F1 | 	add	local01, #24
1d204     0F 27 02 FB | 	rdlong	local05, local01
1d208     14 27 02 F1 | 	add	local05, local06
1d20c     0F 27 62 FC | 	wrlong	local05, local01
1d210     34 22 06 F1 | 	add	local03, #52
1d214     FF 21 06 F5 | 	and	local02, #511
1d218     10 23 02 F1 | 	add	local03, local02
1d21c     04 1E 06 F1 | 	add	local01, #4
1d220     0F 23 62 FC | 	wrlong	local03, local01
1d224                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1d224                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1d224                 | ' 
1d224                 | ' 	return FR_OK;
1d224     00 FA 05 F6 | 	mov	result1, #0
1d228                 | LR__3246
1d228     A7 F0 03 F6 | 	mov	ptra, fp
1d22c     B2 00 A0 FD | 	call	#popregs_
1d230                 | _fatfs_cc_dir_sdi_ret
1d230     2D 00 64 FD | 	ret
1d234                 | 
1d234                 | _fatfs_cc_dir_next
1d234     05 4A 05 F6 | 	mov	COUNT_, #5
1d238     A8 00 A0 FD | 	call	#pushregs_
1d23c     09 1F 02 F6 | 	mov	local01, arg01
1d240     0A 21 02 F6 | 	mov	local02, arg02
1d244     0F 23 02 FB | 	rdlong	local03, local01
1d248     10 1E 06 F1 | 	add	local01, #16
1d24c     0F 25 02 FB | 	rdlong	local04, local01
1d250     10 1E 86 F1 | 	sub	local01, #16
1d254     20 24 06 F1 | 	add	local04, #32
1d258     00 10 00 FF 
1d25c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1d260     18 1E 06 31 |  if_ae	add	local01, #24
1d264     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d268     18 1E 86 31 |  if_ae	sub	local01, #24
1d26c     18 1E 06 F1 | 	add	local01, #24
1d270     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d274     18 1E 86 F1 | 	sub	local01, #24
1d278     04 FA 05 A6 |  if_e	mov	result1, #4
1d27c     64 01 90 AD |  if_e	jmp	#LR__3255
1d280     FF 25 CE F7 | 	test	local04, #511 wz
1d284     3C 01 90 5D |  if_ne	jmp	#LR__3254
1d288     18 1E 06 F1 | 	add	local01, #24
1d28c     0F 15 02 FB | 	rdlong	arg02, local01
1d290     01 14 06 F1 | 	add	arg02, #1
1d294     0F 15 62 FC | 	wrlong	arg02, local01
1d298     04 1E 86 F1 | 	sub	local01, #4
1d29c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d2a0     14 1E 86 F1 | 	sub	local01, #20
1d2a4     2C 00 90 5D |  if_ne	jmp	#LR__3250
1d2a8     12 15 02 F6 | 	mov	arg02, local04
1d2ac     05 14 46 F0 | 	shr	arg02, #5
1d2b0     08 22 06 F1 | 	add	local03, #8
1d2b4     11 21 E2 FA | 	rdword	local02, local03
1d2b8     08 22 86 F1 | 	sub	local03, #8
1d2bc     10 15 12 F2 | 	cmp	arg02, local02 wc
1d2c0     18 1E 06 31 |  if_ae	add	local01, #24
1d2c4     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d2c8                 | ' 				dp->sect = 0; return FR_NO_FILE;
1d2c8     04 FA 05 36 |  if_ae	mov	result1, #4
1d2cc     14 01 90 3D |  if_ae	jmp	#LR__3255
1d2d0     F0 00 90 FD | 	jmp	#LR__3253
1d2d4                 | LR__3250
1d2d4     12 13 02 F6 | 	mov	arg01, local04
1d2d8     09 12 46 F0 | 	shr	arg01, #9
1d2dc     0A 22 06 F1 | 	add	local03, #10
1d2e0     11 15 E2 FA | 	rdword	arg02, local03
1d2e4     0A 22 86 F1 | 	sub	local03, #10
1d2e8     01 14 86 F1 | 	sub	arg02, #1
1d2ec     0A 13 CA F7 | 	test	arg01, arg02 wz
1d2f0     D0 00 90 5D |  if_ne	jmp	#LR__3252
1d2f4     0F 13 02 F6 | 	mov	arg01, local01
1d2f8     14 1E 06 F1 | 	add	local01, #20
1d2fc     0F 15 02 FB | 	rdlong	arg02, local01
1d300     14 1E 86 F1 | 	sub	local01, #20
1d304     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1d308     FD 26 02 F6 | 	mov	local05, result1
1d30c     02 26 16 F2 | 	cmp	local05, #2 wc
1d310     02 FA 05 C6 |  if_b	mov	result1, #2
1d314     CC 00 90 CD |  if_b	jmp	#LR__3255
1d318     FF FF 7F FF 
1d31c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d320     01 FA 05 A6 |  if_e	mov	result1, #1
1d324     BC 00 90 AD |  if_e	jmp	#LR__3255
1d328     18 22 06 F1 | 	add	local03, #24
1d32c     11 15 02 FB | 	rdlong	arg02, local03
1d330     18 22 86 F1 | 	sub	local03, #24
1d334     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d338     68 00 90 CD |  if_b	jmp	#LR__3251
1d33c     00 20 0E F2 | 	cmp	local02, #0 wz
1d340     18 1E 06 A1 |  if_e	add	local01, #24
1d344     0F 01 68 AC |  if_e	wrlong	#0, local01
1d348                 | ' 						dp->sect = 0; return FR_NO_FILE;
1d348     04 FA 05 A6 |  if_e	mov	result1, #4
1d34c     94 00 90 AD |  if_e	jmp	#LR__3255
1d350     0F 13 02 F6 | 	mov	arg01, local01
1d354     14 1E 06 F1 | 	add	local01, #20
1d358     0F 15 02 FB | 	rdlong	arg02, local01
1d35c     14 1E 86 F1 | 	sub	local01, #20
1d360     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1d364     FD 26 0A F6 | 	mov	local05, result1 wz
1d368     07 FA 05 A6 |  if_e	mov	result1, #7
1d36c     74 00 90 AD |  if_e	jmp	#LR__3255
1d370     01 26 0E F2 | 	cmp	local05, #1 wz
1d374     02 FA 05 A6 |  if_e	mov	result1, #2
1d378     68 00 90 AD |  if_e	jmp	#LR__3255
1d37c     FF FF 7F FF 
1d380     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d384     01 FA 05 A6 |  if_e	mov	result1, #1
1d388     58 00 90 AD |  if_e	jmp	#LR__3255
1d38c     13 15 02 F6 | 	mov	arg02, local05
1d390     11 13 02 F6 | 	mov	arg01, local03
1d394     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1d398     00 FA 0D F2 | 	cmp	result1, #0 wz
1d39c     01 FA 05 56 |  if_ne	mov	result1, #1
1d3a0     40 00 90 5D |  if_ne	jmp	#LR__3255
1d3a4                 | LR__3251
1d3a4     14 1E 06 F1 | 	add	local01, #20
1d3a8     0F 27 62 FC | 	wrlong	local05, local01
1d3ac     11 13 02 F6 | 	mov	arg01, local03
1d3b0     13 15 02 F6 | 	mov	arg02, local05
1d3b4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1d3b8     04 1E 06 F1 | 	add	local01, #4
1d3bc     0F FB 61 FC | 	wrlong	result1, local01
1d3c0     18 1E 86 F1 | 	sub	local01, #24
1d3c4                 | LR__3252
1d3c4                 | LR__3253
1d3c4                 | LR__3254
1d3c4     10 1E 06 F1 | 	add	local01, #16
1d3c8     0F 25 62 FC | 	wrlong	local04, local01
1d3cc     34 22 06 F1 | 	add	local03, #52
1d3d0     FF 25 06 F5 | 	and	local04, #511
1d3d4     12 23 02 F1 | 	add	local03, local04
1d3d8     0C 1E 06 F1 | 	add	local01, #12
1d3dc     0F 23 62 FC | 	wrlong	local03, local01
1d3e0                 | ' #line 1771 "ff.c"
1d3e0                 | ' 				}
1d3e0                 | ' 				dp->clust = clst;
1d3e0                 | ' 				dp->sect = clst2sect(fs, clst);
1d3e0                 | ' 			}
1d3e0                 | ' 		}
1d3e0                 | ' 	}
1d3e0                 | ' 	dp->dptr = ofs;
1d3e0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1d3e0                 | ' 
1d3e0                 | ' 	return FR_OK;
1d3e0     00 FA 05 F6 | 	mov	result1, #0
1d3e4                 | LR__3255
1d3e4     A7 F0 03 F6 | 	mov	ptra, fp
1d3e8     B2 00 A0 FD | 	call	#popregs_
1d3ec                 | _fatfs_cc_dir_next_ret
1d3ec     2D 00 64 FD | 	ret
1d3f0                 | 
1d3f0                 | _fatfs_cc_dir_alloc
1d3f0     08 4A 05 F6 | 	mov	COUNT_, #8
1d3f4     A8 00 A0 FD | 	call	#pushregs_
1d3f8     09 1F 02 F6 | 	mov	local01, arg01
1d3fc     0A 21 02 F6 | 	mov	local02, arg02
1d400     0F 23 02 FB | 	rdlong	local03, local01
1d404     0F 13 02 F6 | 	mov	arg01, local01
1d408     00 14 06 F6 | 	mov	arg02, #0
1d40c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1d410     FD 24 0A F6 | 	mov	local04, result1 wz
1d414     70 00 90 5D |  if_ne	jmp	#LR__3264
1d418     00 26 06 F6 | 	mov	local05, #0
1d41c                 | ' 		n = 0;
1d41c                 | ' 		do {
1d41c                 | LR__3260
1d41c     18 1E 06 F1 | 	add	local01, #24
1d420     0F 15 02 FB | 	rdlong	arg02, local01
1d424     18 1E 86 F1 | 	sub	local01, #24
1d428     11 13 02 F6 | 	mov	arg01, local03
1d42c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1d430     FD 24 0A F6 | 	mov	local04, result1 wz
1d434     50 00 90 5D |  if_ne	jmp	#LR__3263
1d438     1C 1E 06 F1 | 	add	local01, #28
1d43c     0F 29 02 FB | 	rdlong	local06, local01
1d440     1C 1E 86 F1 | 	sub	local01, #28
1d444     14 29 C2 FA | 	rdbyte	local06, local06
1d448     E5 28 0E F2 | 	cmp	local06, #229 wz
1d44c     1C 1E 06 51 |  if_ne	add	local01, #28
1d450     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1d454     1C 1E 86 51 |  if_ne	sub	local01, #28
1d458     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1d45c     10 00 90 5D |  if_ne	jmp	#LR__3261
1d460     01 26 06 F1 | 	add	local05, #1
1d464     10 27 0A F2 | 	cmp	local05, local02 wz
1d468     1C 00 90 AD |  if_e	jmp	#LR__3263
1d46c     04 00 90 FD | 	jmp	#LR__3262
1d470                 | LR__3261
1d470     00 26 06 F6 | 	mov	local05, #0
1d474                 | LR__3262
1d474     0F 13 02 F6 | 	mov	arg01, local01
1d478     01 14 06 F6 | 	mov	arg02, #1
1d47c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1d480     FD 24 0A F6 | 	mov	local04, result1 wz
1d484     94 FF 9F AD |  if_e	jmp	#LR__3260
1d488                 | LR__3263
1d488                 | LR__3264
1d488     04 24 0E F2 | 	cmp	local04, #4 wz
1d48c     07 24 06 A6 |  if_e	mov	local04, #7
1d490                 | ' 	return res;
1d490     12 FB 01 F6 | 	mov	result1, local04
1d494     A7 F0 03 F6 | 	mov	ptra, fp
1d498     B2 00 A0 FD | 	call	#popregs_
1d49c                 | _fatfs_cc_dir_alloc_ret
1d49c     2D 00 64 FD | 	ret
1d4a0                 | 
1d4a0                 | _fatfs_cc_ld_clust
1d4a0     09 01 02 F6 | 	mov	_var01, arg01
1d4a4     0A 13 02 F6 | 	mov	arg01, arg02
1d4a8     1A 12 06 F1 | 	add	arg01, #26
1d4ac                 | ' {
1d4ac                 | ' 
1d4ac                 | ' 	return *((WORD*)ptr);
1d4ac     09 FB E1 FA | 	rdword	result1, arg01
1d4b0     FD 12 32 F9 | 	getword	arg01, result1, #0
1d4b4     00 01 C2 FA | 	rdbyte	_var01, _var01
1d4b8     03 00 0E F2 | 	cmp	_var01, #3 wz
1d4bc     14 14 06 A1 |  if_e	add	arg02, #20
1d4c0                 | ' {
1d4c0                 | ' 
1d4c0                 | ' 	return *((WORD*)ptr);
1d4c0     0A FB E1 AA |  if_e	rdword	result1, arg02
1d4c4     10 FA 65 A0 |  if_e	shl	result1, #16
1d4c8     FD 12 42 A5 |  if_e	or	arg01, result1
1d4cc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1d4cc                 | ' 	}
1d4cc                 | ' 
1d4cc                 | ' 	return cl;
1d4cc     09 FB 01 F6 | 	mov	result1, arg01
1d4d0                 | _fatfs_cc_ld_clust_ret
1d4d0     2D 00 64 FD | 	ret
1d4d4                 | 
1d4d4                 | _fatfs_cc_st_clust
1d4d4     09 01 02 F6 | 	mov	_var01, arg01
1d4d8     0A 13 02 F6 | 	mov	arg01, arg02
1d4dc     1A 12 06 F1 | 	add	arg01, #26
1d4e0     09 17 52 FC | 	wrword	arg03, arg01
1d4e4     00 01 C2 FA | 	rdbyte	_var01, _var01
1d4e8     03 00 0E F2 | 	cmp	_var01, #3 wz
1d4ec     14 14 06 A1 |  if_e	add	arg02, #20
1d4f0     10 16 46 A0 |  if_e	shr	arg03, #16
1d4f4     0A 17 52 AC |  if_e	wrword	arg03, arg02
1d4f8                 | _fatfs_cc_st_clust_ret
1d4f8     2D 00 64 FD | 	ret
1d4fc                 | 
1d4fc                 | _fatfs_cc_cmp_lfn
1d4fc     07 4A 05 F6 | 	mov	COUNT_, #7
1d500     A8 00 A0 FD | 	call	#pushregs_
1d504     09 1F 02 F6 | 	mov	local01, arg01
1d508     0A 13 02 F6 | 	mov	arg01, arg02
1d50c     1A 12 06 F1 | 	add	arg01, #26
1d510                 | ' {
1d510                 | ' 
1d510                 | ' 	return *((WORD*)ptr);
1d510     09 FB E9 FA | 	rdword	result1, arg01 wz
1d514     00 FA 05 56 |  if_ne	mov	result1, #0
1d518     E0 00 90 5D |  if_ne	jmp	#LR__3276
1d51c     0A 21 C2 FA | 	rdbyte	local02, arg02
1d520     3F 20 06 F5 | 	and	local02, #63
1d524     01 20 86 F1 | 	sub	local02, #1
1d528     0D 20 06 FD | 	qmul	local02, #13
1d52c                 | ' 
1d52c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1d52c                 | ' 
1d52c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d52c     01 22 06 F6 | 	mov	local03, #1
1d530     00 24 06 F6 | 	mov	local04, #0
1d534     18 26 62 FD | 	getqx	local05
1d538                 | LR__3270
1d538     0D 24 16 F2 | 	cmp	local04, #13 wc
1d53c     9C 00 90 3D |  if_ae	jmp	#LR__3275
1d540     0A 13 02 F6 | 	mov	arg01, arg02
1d544     12 21 02 F6 | 	mov	local02, local04
1d548     01 00 00 FF 
1d54c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d550     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1d554     10 21 C2 FA | 	rdbyte	local02, local02
1d558     01 20 06 FA | 	mul	local02, #1
1d55c     10 13 02 F1 | 	add	arg01, local02
1d560     01 00 00 FF 
1d564     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d568                 | ' {
1d568                 | ' 
1d568                 | ' 	return *((WORD*)ptr);
1d568     09 FB E1 FA | 	rdword	result1, arg01
1d56c     FD 28 02 F6 | 	mov	local06, result1
1d570     11 21 02 F6 | 	mov	local02, local03
1d574     0F 20 4E F7 | 	zerox	local02, #15 wz
1d578     44 00 90 AD |  if_e	jmp	#LR__3273
1d57c     00 27 16 F2 | 	cmp	local05, #256 wc
1d580     2C 00 90 3D |  if_ae	jmp	#LR__3271
1d584     14 13 32 F9 | 	getword	arg01, local06, #0
1d588     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d58c     FD 20 02 F6 | 	mov	local02, result1
1d590     13 23 02 F6 | 	mov	local03, local05
1d594     01 22 66 F0 | 	shl	local03, #1
1d598     0F 23 02 F1 | 	add	local03, local01
1d59c     11 13 E2 FA | 	rdword	arg01, local03
1d5a0     01 26 06 F1 | 	add	local05, #1
1d5a4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d5a8     FD 20 0A F2 | 	cmp	local02, result1 wz
1d5ac     08 00 90 AD |  if_e	jmp	#LR__3272
1d5b0                 | LR__3271
1d5b0                 | ' 				return 0;
1d5b0     00 FA 05 F6 | 	mov	result1, #0
1d5b4     44 00 90 FD | 	jmp	#LR__3276
1d5b8                 | LR__3272
1d5b8     14 23 02 F6 | 	mov	local03, local06
1d5bc     14 00 90 FD | 	jmp	#LR__3274
1d5c0                 | LR__3273
1d5c0     14 29 32 F9 | 	getword	local06, local06, #0
1d5c4     7F 00 00 FF 
1d5c8     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1d5cc     00 FA 05 56 |  if_ne	mov	result1, #0
1d5d0     28 00 90 5D |  if_ne	jmp	#LR__3276
1d5d4                 | LR__3274
1d5d4     01 24 06 F1 | 	add	local04, #1
1d5d8     5C FF 9F FD | 	jmp	#LR__3270
1d5dc                 | LR__3275
1d5dc     0A 21 C2 FA | 	rdbyte	local02, arg02
1d5e0     40 20 CE F7 | 	test	local02, #64 wz
1d5e4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d5e8     01 26 66 50 |  if_ne	shl	local05, #1
1d5ec     0F 27 02 51 |  if_ne	add	local05, local01
1d5f0     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1d5f4     00 FA 05 56 |  if_ne	mov	result1, #0
1d5f8                 | ' 
1d5f8                 | ' 	return 1;
1d5f8     01 FA 05 A6 |  if_e	mov	result1, #1
1d5fc                 | LR__3276
1d5fc     A7 F0 03 F6 | 	mov	ptra, fp
1d600     B2 00 A0 FD | 	call	#popregs_
1d604                 | _fatfs_cc_cmp_lfn_ret
1d604     2D 00 64 FD | 	ret
1d608                 | 
1d608                 | _fatfs_cc_pick_lfn
1d608     09 01 02 F6 | 	mov	_var01, arg01
1d60c     0A 13 02 F6 | 	mov	arg01, arg02
1d610     1A 12 06 F1 | 	add	arg01, #26
1d614                 | ' {
1d614                 | ' 
1d614                 | ' 	return *((WORD*)ptr);
1d614     09 FB E9 FA | 	rdword	result1, arg01 wz
1d618     00 FA 05 56 |  if_ne	mov	result1, #0
1d61c     D4 00 90 5D |  if_ne	jmp	#LR__3285
1d620     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d624     40 02 26 F5 | 	andn	_var02, #64
1d628     01 02 86 F1 | 	sub	_var02, #1
1d62c     0D 02 06 FD | 	qmul	_var02, #13
1d630                 | ' 
1d630                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1d630                 | ' 
1d630                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d630     01 04 06 F6 | 	mov	_var03, #1
1d634     00 06 06 F6 | 	mov	_var04, #0
1d638     18 08 62 FD | 	getqx	_var05
1d63c                 | LR__3280
1d63c     0D 06 16 F2 | 	cmp	_var04, #13 wc
1d640     80 00 90 3D |  if_ae	jmp	#LR__3283
1d644     0A 13 02 F6 | 	mov	arg01, arg02
1d648     03 03 02 F6 | 	mov	_var02, _var04
1d64c     01 00 00 FF 
1d650     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d654     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1d658     01 03 C2 FA | 	rdbyte	_var02, _var02
1d65c     01 02 06 FA | 	mul	_var02, #1
1d660     01 13 02 F1 | 	add	arg01, _var02
1d664     01 00 00 FF 
1d668     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d66c                 | ' {
1d66c                 | ' 
1d66c                 | ' 	return *((WORD*)ptr);
1d66c     09 FB E1 FA | 	rdword	result1, arg01
1d670     FD 0A 02 F6 | 	mov	_var06, result1
1d674     02 03 02 F6 | 	mov	_var02, _var03
1d678     0F 02 4E F7 | 	zerox	_var02, #15 wz
1d67c     28 00 90 AD |  if_e	jmp	#LR__3281
1d680     00 09 16 F2 | 	cmp	_var05, #256 wc
1d684     00 FA 05 36 |  if_ae	mov	result1, #0
1d688     68 00 90 3D |  if_ae	jmp	#LR__3285
1d68c     04 03 02 F6 | 	mov	_var02, _var05
1d690     01 02 66 F0 | 	shl	_var02, #1
1d694     00 03 02 F1 | 	add	_var02, _var01
1d698     05 05 02 F6 | 	mov	_var03, _var06
1d69c     01 05 52 FC | 	wrword	_var03, _var02
1d6a0     01 08 06 F1 | 	add	_var05, #1
1d6a4     14 00 90 FD | 	jmp	#LR__3282
1d6a8                 | LR__3281
1d6a8     05 0B 32 F9 | 	getword	_var06, _var06, #0
1d6ac     7F 00 00 FF 
1d6b0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1d6b4     00 FA 05 56 |  if_ne	mov	result1, #0
1d6b8     38 00 90 5D |  if_ne	jmp	#LR__3285
1d6bc                 | LR__3282
1d6bc     01 06 06 F1 | 	add	_var04, #1
1d6c0     78 FF 9F FD | 	jmp	#LR__3280
1d6c4                 | LR__3283
1d6c4     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d6c8     40 02 CE F7 | 	test	_var02, #64 wz
1d6cc     02 0D 02 56 |  if_ne	mov	_var07, _var03
1d6d0     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1d6d4     18 00 90 AD |  if_e	jmp	#LR__3284
1d6d8     00 09 16 F2 | 	cmp	_var05, #256 wc
1d6dc     00 FA 05 36 |  if_ae	mov	result1, #0
1d6e0     10 00 90 3D |  if_ae	jmp	#LR__3285
1d6e4     01 08 66 F0 | 	shl	_var05, #1
1d6e8     00 09 02 F1 | 	add	_var05, _var01
1d6ec     04 01 58 FC | 	wrword	#0, _var05
1d6f0                 | LR__3284
1d6f0                 | ' 		lfnbuf[i] = 0;
1d6f0                 | ' 	}
1d6f0                 | ' 
1d6f0                 | ' 	return 1;
1d6f0     01 FA 05 F6 | 	mov	result1, #1
1d6f4                 | LR__3285
1d6f4                 | _fatfs_cc_pick_lfn_ret
1d6f4     2D 00 64 FD | 	ret
1d6f8                 | 
1d6f8                 | _fatfs_cc_put_lfn
1d6f8     0D 14 06 F1 | 	add	arg02, #13
1d6fc     0A 19 42 FC | 	wrbyte	arg04, arg02
1d700     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1d704     01 18 86 F1 | 	sub	arg04, #1
1d708     0D 18 06 FD | 	qmul	arg04, #13
1d70c     09 01 02 F6 | 	mov	_var01, arg01
1d710     02 14 86 F1 | 	sub	arg02, #2
1d714     0A 1F 48 FC | 	wrbyte	#15, arg02
1d718     01 14 06 F1 | 	add	arg02, #1
1d71c     0A 01 48 FC | 	wrbyte	#0, arg02
1d720     0C 14 86 F1 | 	sub	arg02, #12
1d724     0A 13 02 F6 | 	mov	arg01, arg02
1d728     1A 12 06 F1 | 	add	arg01, #26
1d72c     09 01 58 FC | 	wrword	#0, arg01
1d730     00 02 06 F6 | 	mov	_var02, #0
1d734     00 04 06 F6 | 	mov	_var03, #0
1d738                 | ' 	BYTE* dir,
1d738                 | ' 	BYTE ord,
1d738                 | ' 	BYTE sum
1d738                 | ' )
1d738                 | ' {
1d738                 | ' 	UINT i, s;
1d738                 | ' 	WCHAR wc;
1d738                 | ' 
1d738                 | ' 
1d738                 | ' 	dir[ 13 ] = sum;
1d738                 | ' 	dir[ 11 ] =  0x0F ;
1d738                 | ' 	dir[ 12 ] = 0;
1d738                 | ' 	st_word(dir +  26 , 0);
1d738                 | ' 
1d738                 | ' 	i = (ord - 1) * 13;
1d738                 | ' 	s = wc = 0;
1d738                 | ' 	do {
1d738     01 00 00 FF 
1d73c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d740     18 06 62 FD | 	getqx	_var04
1d744     97 2A 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
1d748                 | LR__3290
1d748     01 19 32 F9 | 	getword	arg04, _var02, #0
1d74c     7F 00 00 FF 
1d750     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1d754     03 13 02 56 |  if_ne	mov	arg01, _var04
1d758     01 06 06 51 |  if_ne	add	_var04, #1
1d75c     01 12 66 50 |  if_ne	shl	arg01, #1
1d760     00 13 02 51 |  if_ne	add	arg01, _var01
1d764     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1d768     0A 13 02 F6 | 	mov	arg01, arg02
1d76c     02 19 02 F6 | 	mov	arg04, _var03
1d770     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1d774     0C 19 C2 FA | 	rdbyte	arg04, arg04
1d778     01 18 06 FA | 	mul	arg04, #1
1d77c     0C 13 02 F1 | 	add	arg01, arg04
1d780     09 03 52 FC | 	wrword	_var02, arg01
1d784     01 19 02 F6 | 	mov	arg04, _var02
1d788     0F 18 4E F7 | 	zerox	arg04, #15 wz
1d78c     0F 02 CE A9 |  if_e	bmask	_var02, #15
1d790     01 04 06 F1 | 	add	_var03, #1
1d794     0D 04 16 F2 | 	cmp	_var03, #13 wc
1d798     AC FF 9F CD |  if_b	jmp	#LR__3290
1d79c                 | LR__3291
1d79c     01 00 00 FF 
1d7a0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d7a4     01 03 32 F9 | 	getword	_var02, _var02, #0
1d7a8     7F 00 00 FF 
1d7ac     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1d7b0     01 06 66 50 |  if_ne	shl	_var04, #1
1d7b4     00 07 02 51 |  if_ne	add	_var04, _var01
1d7b8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1d7bc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1d7c0     40 16 46 A5 |  if_e	or	arg03, #64
1d7c4     0A 17 42 FC | 	wrbyte	arg03, arg02
1d7c8                 | _fatfs_cc_put_lfn_ret
1d7c8     2D 00 64 FD | 	ret
1d7cc                 | 
1d7cc                 | _fatfs_cc_gen_numname
1d7cc     08 4A 05 F6 | 	mov	COUNT_, #8
1d7d0     A8 00 A0 FD | 	call	#pushregs_
1d7d4     2C F0 07 F1 | 	add	ptra, #44
1d7d8     09 1F 02 F6 | 	mov	local01, arg01
1d7dc     0A 21 02 F6 | 	mov	local02, arg02
1d7e0     0B 23 02 F6 | 	mov	local03, arg03
1d7e4     0C 25 02 F6 | 	mov	local04, arg04
1d7e8     0F 13 02 F6 | 	mov	arg01, local01
1d7ec     10 15 02 F6 | 	mov	arg02, local02
1d7f0     0B 16 06 F6 | 	mov	arg03, #11
1d7f4     D8 7B BF FD | 	call	#__system____builtin_memmove
1d7f8     06 24 16 F2 | 	cmp	local04, #6 wc
1d7fc     48 00 90 CD |  if_b	jmp	#LR__3305
1d800     12 27 02 F6 | 	mov	local05, local04
1d804     97 1E 48 FB | 	callpa	#(@LR__3303-@LR__3300)>>2,fcache_load_ptr_
1d808                 | ' 		sreg = seq;
1d808                 | ' 		while (*lfn) {
1d808                 | LR__3300
1d808     11 29 EA FA | 	rdword	local06, local03 wz
1d80c     34 00 90 AD |  if_e	jmp	#LR__3304
1d810     11 2B E2 FA | 	rdword	local07, local03
1d814                 | ' 			wc = *lfn++;
1d814                 | ' 			for (i = 0; i < 16; i++) {
1d814     02 22 06 F1 | 	add	local03, #2
1d818     10 12 DC FC | 	rep	@LR__3302, #16
1d81c                 | LR__3301
1d81c     01 26 66 F0 | 	shl	local05, #1
1d820     15 29 32 F9 | 	getword	local06, local07, #0
1d824     01 28 06 F5 | 	and	local06, #1
1d828     14 27 02 F1 | 	add	local05, local06
1d82c     15 2B 32 F9 | 	getword	local07, local07, #0
1d830     01 2A 46 F0 | 	shr	local07, #1
1d834     10 26 2E F4 | 	testbn	local05, #16 wz
1d838     88 00 00 5F 
1d83c     21 26 66 55 |  if_ne	xor	local05, ##69665
1d840                 | LR__3302
1d840     C4 FF 9F FD | 	jmp	#LR__3300
1d844                 | LR__3303
1d844                 | LR__3304
1d844     13 25 02 F6 | 	mov	local04, local05
1d848                 | LR__3305
1d848     07 2A 06 F6 | 	mov	local07, #7
1d84c                 | ' 			}
1d84c                 | ' 		}
1d84c                 | ' 		seq = (UINT)sreg;
1d84c                 | ' 	}
1d84c                 | ' 
1d84c                 | ' 
1d84c                 | ' 	i = 7;
1d84c                 | ' 	do {
1d84c     10 4E 05 F1 | 	add	fp, #16
1d850     97 1A 48 FB | 	callpa	#(@LR__3307-@LR__3306)>>2,fcache_load_ptr_
1d854                 | LR__3306
1d854     12 27 42 F8 | 	getnib	local05, local04, #0
1d858     30 26 06 F1 | 	add	local05, #48
1d85c     04 24 46 F0 | 	shr	local04, #4
1d860     13 29 E2 F8 | 	getbyte	local06, local05, #0
1d864     3A 28 16 F2 | 	cmp	local06, #58 wc
1d868     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1d86c     07 26 06 31 |  if_ae	add	local05, #7
1d870     15 29 02 F6 | 	mov	local06, local07
1d874     01 2A 8E F1 | 	sub	local07, #1 wz
1d878     A7 28 02 F1 | 	add	local06, fp
1d87c     14 27 42 FC | 	wrbyte	local05, local06
1d880     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1d884     CC FF 9F 5D |  if_ne	jmp	#LR__3306
1d888                 | LR__3307
1d888     15 29 02 F6 | 	mov	local06, local07
1d88c     A7 28 02 F1 | 	add	local06, fp
1d890     14 FD 48 FC | 	wrbyte	#126, local06
1d894                 | ' 	ns[i] = '~';
1d894                 | ' 
1d894                 | ' 
1d894                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1d894     00 26 06 F6 | 	mov	local05, #0
1d898     10 4E 85 F1 | 	sub	fp, #16
1d89c     97 2A 48 FB | 	callpa	#(@LR__3310-@LR__3308)>>2,fcache_load_ptr_
1d8a0                 | LR__3308
1d8a0     15 27 12 F2 | 	cmp	local05, local07 wc
1d8a4     4C 00 90 3D |  if_ae	jmp	#LR__3311
1d8a8     13 29 02 F6 | 	mov	local06, local05
1d8ac     0F 29 02 F1 | 	add	local06, local01
1d8b0     14 29 C2 FA | 	rdbyte	local06, local06
1d8b4     20 28 0E F2 | 	cmp	local06, #32 wz
1d8b8     38 00 90 AD |  if_e	jmp	#LR__3311
1d8bc     13 13 02 F6 | 	mov	arg01, local05
1d8c0     0F 13 02 F1 | 	add	arg01, local01
1d8c4     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1d8c8     00 FA 05 56 |  if_ne	mov	result1, #0
1d8cc                 | ' 
1d8cc                 | ' 	return 0;
1d8cc     00 FA 05 A6 |  if_e	mov	result1, #0
1d8d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d8d4     14 00 90 AD |  if_e	jmp	#LR__3309
1d8d8     15 29 02 F6 | 	mov	local06, local07
1d8dc     01 28 86 F1 | 	sub	local06, #1
1d8e0     14 27 0A F2 | 	cmp	local05, local06 wz
1d8e4     0C 00 90 AD |  if_e	jmp	#LR__3311
1d8e8     01 26 06 F1 | 	add	local05, #1
1d8ec                 | LR__3309
1d8ec     01 26 06 F1 | 	add	local05, #1
1d8f0     AC FF 9F FD | 	jmp	#LR__3308
1d8f4                 | LR__3310
1d8f4                 | LR__3311
1d8f4     97 20 48 FB | 	callpa	#(@LR__3315-@LR__3312)>>2,fcache_load_ptr_
1d8f8                 | ' 			j++;
1d8f8                 | ' 		}
1d8f8                 | ' 	}
1d8f8                 | ' 	do {
1d8f8                 | LR__3312
1d8f8     13 29 02 F6 | 	mov	local06, local05
1d8fc     0F 29 02 F1 | 	add	local06, local01
1d900     08 2A 16 F2 | 	cmp	local07, #8 wc
1d904     01 26 06 F1 | 	add	local05, #1
1d908     1C 00 90 3D |  if_ae	jmp	#LR__3313
1d90c     15 25 02 F6 | 	mov	local04, local07
1d910     10 4E 05 F1 | 	add	fp, #16
1d914     A7 24 02 F1 | 	add	local04, fp
1d918     12 2D C2 FA | 	rdbyte	local08, local04
1d91c     01 2A 06 F1 | 	add	local07, #1
1d920     10 4E 85 F1 | 	sub	fp, #16
1d924     04 00 90 FD | 	jmp	#LR__3314
1d928                 | LR__3313
1d928     20 2C 06 F6 | 	mov	local08, #32
1d92c                 | LR__3314
1d92c     14 2D 42 FC | 	wrbyte	local08, local06
1d930     08 26 16 F2 | 	cmp	local05, #8 wc
1d934     C0 FF 9F CD |  if_b	jmp	#LR__3312
1d938                 | LR__3315
1d938     A7 F0 03 F6 | 	mov	ptra, fp
1d93c     B2 00 A0 FD | 	call	#popregs_
1d940                 | _fatfs_cc_gen_numname_ret
1d940     2D 00 64 FD | 	ret
1d944                 | 
1d944                 | _fatfs_cc_sum_sfn
1d944     00 00 06 F6 | 	mov	_var01, #0
1d948                 | ' )
1d948                 | ' {
1d948                 | ' 	BYTE sum = 0;
1d948                 | ' 	UINT n = 11;
1d948                 | ' 
1d948                 | ' 	do {
1d948     97 12 48 FB | 	callpa	#(@LR__3322-@LR__3320)>>2,fcache_load_ptr_
1d94c                 | LR__3320
1d94c     0B 10 DC FC | 	rep	@LR__3323, #11
1d950                 | LR__3321
1d950     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1d954     01 FA 45 F0 | 	shr	result1, #1
1d958     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1d95c     07 00 66 F0 | 	shl	_var01, #7
1d960     00 FB 01 F1 | 	add	result1, _var01
1d964     09 01 C2 FA | 	rdbyte	_var01, arg01
1d968     FD 00 02 F1 | 	add	_var01, result1
1d96c     01 12 06 F1 | 	add	arg01, #1
1d970                 | LR__3322
1d970                 | LR__3323
1d970                 | ' 	return sum;
1d970     00 FB 01 F6 | 	mov	result1, _var01
1d974                 | _fatfs_cc_sum_sfn_ret
1d974     2D 00 64 FD | 	ret
1d978                 | 
1d978                 | _fatfs_cc_dir_read
1d978     0C 4A 05 F6 | 	mov	COUNT_, #12
1d97c     A8 00 A0 FD | 	call	#pushregs_
1d980     09 1F 02 F6 | 	mov	local01, arg01
1d984     0A 21 02 F6 | 	mov	local02, arg02
1d988     04 22 06 F6 | 	mov	local03, #4
1d98c     0F 25 02 FB | 	rdlong	local04, local01
1d990     FF 26 06 F6 | 	mov	local05, #255
1d994     FF 28 06 F6 | 	mov	local06, #255
1d998                 | ' )
1d998                 | ' {
1d998                 | ' 	FRESULT res = FR_NO_FILE;
1d998                 | ' 	FATFS *fs = dp->obj.fs;
1d998                 | ' 	BYTE attr, b;
1d998                 | ' 
1d998                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1d998                 | ' 
1d998                 | ' 
1d998                 | ' 	while (dp->sect) {
1d998                 | LR__3330
1d998     18 1E 06 F1 | 	add	local01, #24
1d99c     0F FB 09 FB | 	rdlong	result1, local01 wz
1d9a0     18 1E 86 F1 | 	sub	local01, #24
1d9a4     AC 01 90 AD |  if_e	jmp	#LR__3340
1d9a8     18 1E 06 F1 | 	add	local01, #24
1d9ac     0F 15 02 FB | 	rdlong	arg02, local01
1d9b0     18 1E 86 F1 | 	sub	local01, #24
1d9b4     12 13 02 F6 | 	mov	arg01, local04
1d9b8     AC ED BF FD | 	call	#_fatfs_cc_move_window
1d9bc     FD 22 0A F6 | 	mov	local03, result1 wz
1d9c0     90 01 90 5D |  if_ne	jmp	#LR__3340
1d9c4     1C 1E 06 F1 | 	add	local01, #28
1d9c8     0F FB 01 FB | 	rdlong	result1, local01
1d9cc     1C 1E 86 F1 | 	sub	local01, #28
1d9d0     FD 2A C2 FA | 	rdbyte	local07, result1
1d9d4     15 FB 01 F6 | 	mov	result1, local07
1d9d8     07 FA 4D F7 | 	zerox	result1, #7 wz
1d9dc     04 22 06 A6 |  if_e	mov	local03, #4
1d9e0                 | ' 			res = FR_NO_FILE; break;
1d9e0     70 01 90 AD |  if_e	jmp	#LR__3340
1d9e4     1C 1E 06 F1 | 	add	local01, #28
1d9e8     0F 2D 02 FB | 	rdlong	local08, local01
1d9ec     0B 2C 06 F1 | 	add	local08, #11
1d9f0     16 2F C2 FA | 	rdbyte	local09, local08
1d9f4     3F 2E 06 F5 | 	and	local09, #63
1d9f8     16 1E 86 F1 | 	sub	local01, #22
1d9fc     0F 2F 42 FC | 	wrbyte	local09, local01
1da00     06 1E 86 F1 | 	sub	local01, #6
1da04     15 FB E1 F8 | 	getbyte	result1, local07, #0
1da08     E5 FA 0D F2 | 	cmp	result1, #229 wz
1da0c     15 2D 02 56 |  if_ne	mov	local08, local07
1da10     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1da14     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1da18     1C 00 90 AD |  if_e	jmp	#LR__3331
1da1c     00 30 06 F6 | 	mov	local10, #0
1da20     17 2D E2 F8 | 	getbyte	local08, local09, #0
1da24     20 2C 26 F5 | 	andn	local08, #32
1da28     08 2C 0E F2 | 	cmp	local08, #8 wz
1da2c     01 30 06 A6 |  if_e	mov	local10, #1
1da30     10 31 0A F2 | 	cmp	local10, local02 wz
1da34     08 00 90 AD |  if_e	jmp	#LR__3332
1da38                 | LR__3331
1da38     FF 26 06 F6 | 	mov	local05, #255
1da3c     00 01 90 FD | 	jmp	#LR__3339
1da40                 | LR__3332
1da40     17 2F E2 F8 | 	getbyte	local09, local09, #0
1da44     0F 2E 0E F2 | 	cmp	local09, #15 wz
1da48     B4 00 90 5D |  if_ne	jmp	#LR__3336
1da4c     15 33 E2 F8 | 	getbyte	local11, local07, #0
1da50     40 32 CE F7 | 	test	local11, #64 wz
1da54     30 00 90 AD |  if_e	jmp	#LR__3333
1da58     1C 1E 06 F1 | 	add	local01, #28
1da5c     0F 33 02 FB | 	rdlong	local11, local01
1da60     0D 32 06 F1 | 	add	local11, #13
1da64     19 29 C2 FA | 	rdbyte	local06, local11
1da68     15 2B E2 F8 | 	getbyte	local07, local07, #0
1da6c     BF 2A 06 F5 | 	and	local07, #191
1da70     15 27 02 F6 | 	mov	local05, local07
1da74     0C 1E 86 F1 | 	sub	local01, #12
1da78     0F 33 02 FB | 	rdlong	local11, local01
1da7c     1C 1E 06 F1 | 	add	local01, #28
1da80     0F 33 62 FC | 	wrlong	local11, local01
1da84     2C 1E 86 F1 | 	sub	local01, #44
1da88                 | LR__3333
1da88     15 2D E2 F8 | 	getbyte	local08, local07, #0
1da8c     13 31 E2 F8 | 	getbyte	local10, local05, #0
1da90     18 2D 0A F2 | 	cmp	local08, local10 wz
1da94     5C 00 90 5D |  if_ne	jmp	#LR__3334
1da98     14 31 E2 F8 | 	getbyte	local10, local06, #0
1da9c     1C 1E 06 F1 | 	add	local01, #28
1daa0     0F 2F 02 FB | 	rdlong	local09, local01
1daa4     1C 1E 86 F1 | 	sub	local01, #28
1daa8     0D 2E 06 F1 | 	add	local09, #13
1daac     17 2D C2 FA | 	rdbyte	local08, local09
1dab0     16 2F E2 F8 | 	getbyte	local09, local08, #0
1dab4     17 31 0A F2 | 	cmp	local10, local09 wz
1dab8     38 00 90 5D |  if_ne	jmp	#LR__3334
1dabc     0C 24 06 F1 | 	add	local04, #12
1dac0     12 13 02 FB | 	rdlong	arg01, local04
1dac4     0C 24 86 F1 | 	sub	local04, #12
1dac8     1C 1E 06 F1 | 	add	local01, #28
1dacc     0F 35 02 FB | 	rdlong	local12, local01
1dad0     1C 1E 86 F1 | 	sub	local01, #28
1dad4     1A 15 02 F6 | 	mov	arg02, local12
1dad8     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1dadc     00 FA 4D F2 | 	cmps	result1, #0 wz
1dae0     13 35 02 56 |  if_ne	mov	local12, local05
1dae4     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1dae8     01 34 86 51 |  if_ne	sub	local12, #1
1daec     1A 33 02 56 |  if_ne	mov	local11, local12
1daf0     04 00 90 5D |  if_ne	jmp	#LR__3335
1daf4                 | LR__3334
1daf4     FF 32 06 F6 | 	mov	local11, #255
1daf8                 | LR__3335
1daf8     19 27 02 F6 | 	mov	local05, local11
1dafc     40 00 90 FD | 	jmp	#LR__3338
1db00                 | LR__3336
1db00     13 33 02 F6 | 	mov	local11, local05
1db04     07 32 4E F7 | 	zerox	local11, #7 wz
1db08     20 00 90 5D |  if_ne	jmp	#LR__3337
1db0c     14 29 E2 F8 | 	getbyte	local06, local06, #0
1db10     1C 1E 06 F1 | 	add	local01, #28
1db14     0F 13 02 FB | 	rdlong	arg01, local01
1db18     1C 1E 86 F1 | 	sub	local01, #28
1db1c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1db20     FD FA E1 F8 | 	getbyte	result1, result1, #0
1db24     FD 28 0A F2 | 	cmp	local06, result1 wz
1db28     28 00 90 AD |  if_e	jmp	#LR__3340
1db2c                 | LR__3337
1db2c     2C 1E 06 F1 | 	add	local01, #44
1db30     FF FF FF FF 
1db34     0F FF 6B FC | 	wrlong	##-1, local01
1db38     2C 1E 86 F1 | 	sub	local01, #44
1db3c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1db3c                 | ' 					}
1db3c                 | ' 					break;
1db3c     14 00 90 FD | 	jmp	#LR__3340
1db40                 | LR__3338
1db40                 | LR__3339
1db40     0F 13 02 F6 | 	mov	arg01, local01
1db44     00 14 06 F6 | 	mov	arg02, #0
1db48     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1db4c     FD 22 0A F6 | 	mov	local03, result1 wz
1db50     44 FE 9F AD |  if_e	jmp	#LR__3330
1db54                 | LR__3340
1db54     00 22 0E F2 | 	cmp	local03, #0 wz
1db58     18 1E 06 51 |  if_ne	add	local01, #24
1db5c     0F 01 68 5C |  if_ne	wrlong	#0, local01
1db60                 | ' 	return res;
1db60     11 FB 01 F6 | 	mov	result1, local03
1db64     A7 F0 03 F6 | 	mov	ptra, fp
1db68     B2 00 A0 FD | 	call	#popregs_
1db6c                 | _fatfs_cc_dir_read_ret
1db6c     2D 00 64 FD | 	ret
1db70                 | 
1db70                 | _fatfs_cc_dir_find
1db70     0B 4A 05 F6 | 	mov	COUNT_, #11
1db74     A8 00 A0 FD | 	call	#pushregs_
1db78     09 1F 02 F6 | 	mov	local01, arg01
1db7c     0F 21 02 FB | 	rdlong	local02, local01
1db80     0F 13 02 F6 | 	mov	arg01, local01
1db84     00 14 06 F6 | 	mov	arg02, #0
1db88     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1db8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1db90     18 02 90 5D |  if_ne	jmp	#LR__3362
1db94     FF 22 06 F6 | 	mov	local03, #255
1db98     FF 24 06 F6 | 	mov	local04, #255
1db9c     2C 1E 06 F1 | 	add	local01, #44
1dba0     FF FF FF FF 
1dba4     0F FF 6B FC | 	wrlong	##-1, local01
1dba8     2C 1E 86 F1 | 	sub	local01, #44
1dbac                 | ' #line 2404 "ff.c"
1dbac                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1dbac                 | ' 
1dbac                 | ' 	do {
1dbac                 | LR__3350
1dbac     18 1E 06 F1 | 	add	local01, #24
1dbb0     0F 15 02 FB | 	rdlong	arg02, local01
1dbb4     18 1E 86 F1 | 	sub	local01, #24
1dbb8     10 13 02 F6 | 	mov	arg01, local02
1dbbc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1dbc0     FD 26 0A F6 | 	mov	local05, result1 wz
1dbc4     E0 01 90 5D |  if_ne	jmp	#LR__3361
1dbc8     1C 1E 06 F1 | 	add	local01, #28
1dbcc     0F 17 02 FB | 	rdlong	arg03, local01
1dbd0     1C 1E 86 F1 | 	sub	local01, #28
1dbd4     0B 29 C2 FA | 	rdbyte	local06, arg03
1dbd8     14 17 02 F6 | 	mov	arg03, local06
1dbdc     07 16 4E F7 | 	zerox	arg03, #7 wz
1dbe0     04 26 06 A6 |  if_e	mov	local05, #4
1dbe4     C0 01 90 AD |  if_e	jmp	#LR__3361
1dbe8     1C 1E 06 F1 | 	add	local01, #28
1dbec     0F 2B 02 FB | 	rdlong	local07, local01
1dbf0     15 17 02 F6 | 	mov	arg03, local07
1dbf4     0B 16 06 F1 | 	add	arg03, #11
1dbf8     0B 2D C2 FA | 	rdbyte	local08, arg03
1dbfc     3F 2C 06 F5 | 	and	local08, #63
1dc00     16 1E 86 F1 | 	sub	local01, #22
1dc04     0F 2D 42 FC | 	wrbyte	local08, local01
1dc08     06 1E 86 F1 | 	sub	local01, #6
1dc0c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1dc10     E5 16 0E F2 | 	cmp	arg03, #229 wz
1dc14     18 00 90 AD |  if_e	jmp	#LR__3351
1dc18     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1dc1c     08 16 CE F7 | 	test	arg03, #8 wz
1dc20     16 2B 02 56 |  if_ne	mov	local07, local08
1dc24     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1dc28     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1dc2c     18 00 90 AD |  if_e	jmp	#LR__3352
1dc30                 | LR__3351
1dc30     FF 24 06 F6 | 	mov	local04, #255
1dc34     2C 1E 06 F1 | 	add	local01, #44
1dc38     FF FF FF FF 
1dc3c     0F FF 6B FC | 	wrlong	##-1, local01
1dc40     2C 1E 86 F1 | 	sub	local01, #44
1dc44     4C 01 90 FD | 	jmp	#LR__3360
1dc48                 | LR__3352
1dc48     16 2D E2 F8 | 	getbyte	local08, local08, #0
1dc4c     0F 2C 0E F2 | 	cmp	local08, #15 wz
1dc50     C8 00 90 5D |  if_ne	jmp	#LR__3356
1dc54     2B 1E 06 F1 | 	add	local01, #43
1dc58     0F 2D C2 FA | 	rdbyte	local08, local01
1dc5c     2B 1E 86 F1 | 	sub	local01, #43
1dc60     40 2C CE F7 | 	test	local08, #64 wz
1dc64     2C 01 90 5D |  if_ne	jmp	#LR__3359
1dc68     14 2F E2 F8 | 	getbyte	local09, local06, #0
1dc6c     40 2E CE F7 | 	test	local09, #64 wz
1dc70     30 00 90 AD |  if_e	jmp	#LR__3353
1dc74     1C 1E 06 F1 | 	add	local01, #28
1dc78     0F 2F 02 FB | 	rdlong	local09, local01
1dc7c     0D 2E 06 F1 | 	add	local09, #13
1dc80     17 23 C2 FA | 	rdbyte	local03, local09
1dc84     14 29 E2 F8 | 	getbyte	local06, local06, #0
1dc88     BF 28 06 F5 | 	and	local06, #191
1dc8c     14 25 02 F6 | 	mov	local04, local06
1dc90     0C 1E 86 F1 | 	sub	local01, #12
1dc94     0F 2F 02 FB | 	rdlong	local09, local01
1dc98     1C 1E 06 F1 | 	add	local01, #28
1dc9c     0F 2F 62 FC | 	wrlong	local09, local01
1dca0     2C 1E 86 F1 | 	sub	local01, #44
1dca4                 | LR__3353
1dca4     14 31 E2 F8 | 	getbyte	local10, local06, #0
1dca8     12 2B E2 F8 | 	getbyte	local07, local04, #0
1dcac     15 31 0A F2 | 	cmp	local10, local07 wz
1dcb0     5C 00 90 5D |  if_ne	jmp	#LR__3354
1dcb4     11 2D E2 F8 | 	getbyte	local08, local03, #0
1dcb8     1C 1E 06 F1 | 	add	local01, #28
1dcbc     0F 2B 02 FB | 	rdlong	local07, local01
1dcc0     1C 1E 86 F1 | 	sub	local01, #28
1dcc4     0D 2A 06 F1 | 	add	local07, #13
1dcc8     15 29 C2 FA | 	rdbyte	local06, local07
1dccc     14 2B E2 F8 | 	getbyte	local07, local06, #0
1dcd0     15 2D 0A F2 | 	cmp	local08, local07 wz
1dcd4     38 00 90 5D |  if_ne	jmp	#LR__3354
1dcd8     0C 20 06 F1 | 	add	local02, #12
1dcdc     10 13 02 FB | 	rdlong	arg01, local02
1dce0     0C 20 86 F1 | 	sub	local02, #12
1dce4     1C 1E 06 F1 | 	add	local01, #28
1dce8     0F 33 02 FB | 	rdlong	local11, local01
1dcec     1C 1E 86 F1 | 	sub	local01, #28
1dcf0     19 15 02 F6 | 	mov	arg02, local11
1dcf4     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1dcf8     00 FA 4D F2 | 	cmps	result1, #0 wz
1dcfc     12 33 02 56 |  if_ne	mov	local11, local04
1dd00     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1dd04     01 32 86 51 |  if_ne	sub	local11, #1
1dd08     19 2F 02 56 |  if_ne	mov	local09, local11
1dd0c     04 00 90 5D |  if_ne	jmp	#LR__3355
1dd10                 | LR__3354
1dd10     FF 2E 06 F6 | 	mov	local09, #255
1dd14                 | LR__3355
1dd14     17 25 02 F6 | 	mov	local04, local09
1dd18     78 00 90 FD | 	jmp	#LR__3359
1dd1c                 | LR__3356
1dd1c     12 2F 02 F6 | 	mov	local09, local04
1dd20     07 2E 4E F7 | 	zerox	local09, #7 wz
1dd24     20 00 90 5D |  if_ne	jmp	#LR__3357
1dd28     11 31 E2 F8 | 	getbyte	local10, local03, #0
1dd2c     1C 1E 06 F1 | 	add	local01, #28
1dd30     0F 13 02 FB | 	rdlong	arg01, local01
1dd34     1C 1E 86 F1 | 	sub	local01, #28
1dd38     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1dd3c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dd40     FD 30 0A F2 | 	cmp	local10, result1 wz
1dd44     60 00 90 AD |  if_e	jmp	#LR__3361
1dd48                 | LR__3357
1dd48     2B 1E 06 F1 | 	add	local01, #43
1dd4c     0F 2F C2 FA | 	rdbyte	local09, local01
1dd50     2B 1E 86 F1 | 	sub	local01, #43
1dd54     01 2E CE F7 | 	test	local09, #1 wz
1dd58     24 00 90 5D |  if_ne	jmp	#LR__3358
1dd5c     1C 1E 06 F1 | 	add	local01, #28
1dd60     0F 13 02 FB | 	rdlong	arg01, local01
1dd64     04 1E 06 F1 | 	add	local01, #4
1dd68     0F 15 02 F6 | 	mov	arg02, local01
1dd6c     20 1E 86 F1 | 	sub	local01, #32
1dd70     0B 16 06 F6 | 	mov	arg03, #11
1dd74     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1dd78     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd7c     28 00 90 AD |  if_e	jmp	#LR__3361
1dd80                 | LR__3358
1dd80     FF 24 06 F6 | 	mov	local04, #255
1dd84     2C 1E 06 F1 | 	add	local01, #44
1dd88     FF FF FF FF 
1dd8c     0F FF 6B FC | 	wrlong	##-1, local01
1dd90     2C 1E 86 F1 | 	sub	local01, #44
1dd94                 | LR__3359
1dd94                 | LR__3360
1dd94     0F 13 02 F6 | 	mov	arg01, local01
1dd98     00 14 06 F6 | 	mov	arg02, #0
1dd9c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1dda0     FD 26 0A F6 | 	mov	local05, result1 wz
1dda4     04 FE 9F AD |  if_e	jmp	#LR__3350
1dda8                 | LR__3361
1dda8                 | ' 
1dda8                 | ' 	return res;
1dda8     13 FB 01 F6 | 	mov	result1, local05
1ddac                 | LR__3362
1ddac     A7 F0 03 F6 | 	mov	ptra, fp
1ddb0     B2 00 A0 FD | 	call	#popregs_
1ddb4                 | _fatfs_cc_dir_find_ret
1ddb4     2D 00 64 FD | 	ret
1ddb8                 | 
1ddb8                 | _fatfs_cc_dir_register
1ddb8     0A 4A 05 F6 | 	mov	COUNT_, #10
1ddbc     A8 00 A0 FD | 	call	#pushregs_
1ddc0     2C F0 07 F1 | 	add	ptra, #44
1ddc4     04 4E 05 F1 | 	add	fp, #4
1ddc8     A7 12 62 FC | 	wrlong	arg01, fp
1ddcc     09 1F 02 FB | 	rdlong	local01, arg01
1ddd0     08 4E 05 F1 | 	add	fp, #8
1ddd4     A7 1E 62 FC | 	wrlong	local01, fp
1ddd8     08 4E 85 F1 | 	sub	fp, #8
1dddc     A7 20 02 FB | 	rdlong	local02, fp
1dde0     04 4E 85 F1 | 	sub	fp, #4
1dde4     2B 20 06 F1 | 	add	local02, #43
1dde8     10 21 C2 FA | 	rdbyte	local02, local02
1ddec     A0 20 CE F7 | 	test	local02, #160 wz
1ddf0     06 FA 05 56 |  if_ne	mov	result1, #6
1ddf4     F8 03 90 5D |  if_ne	jmp	#LR__3385
1ddf8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1ddf8     14 4E 05 F1 | 	add	fp, #20
1ddfc     A7 00 68 FC | 	wrlong	#0, fp
1de00     14 4E 85 F1 | 	sub	fp, #20
1de04     97 28 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
1de08                 | LR__3370
1de08     0C 4E 05 F1 | 	add	fp, #12
1de0c     A7 20 02 FB | 	rdlong	local02, fp
1de10     0C 20 06 F1 | 	add	local02, #12
1de14     10 23 02 FB | 	rdlong	local03, local02
1de18     08 4E 05 F1 | 	add	fp, #8
1de1c     A7 24 02 FB | 	rdlong	local04, fp
1de20     14 4E 85 F1 | 	sub	fp, #20
1de24     01 24 66 F0 | 	shl	local04, #1
1de28     11 25 02 F1 | 	add	local04, local03
1de2c     12 21 EA FA | 	rdword	local02, local04 wz
1de30     24 00 90 AD |  if_e	jmp	#LR__3372
1de34     14 4E 05 F1 | 	add	fp, #20
1de38     A7 26 02 FB | 	rdlong	local05, fp
1de3c     13 29 02 F6 | 	mov	local06, local05
1de40     13 2B 02 F6 | 	mov	local07, local05
1de44     15 2D 02 F6 | 	mov	local08, local07
1de48     01 2C 06 F1 | 	add	local08, #1
1de4c     A7 2C 62 FC | 	wrlong	local08, fp
1de50     14 4E 85 F1 | 	sub	fp, #20
1de54     B0 FF 9F FD | 	jmp	#LR__3370
1de58                 | LR__3371
1de58                 | LR__3372
1de58     1C 4E 05 F1 | 	add	fp, #28
1de5c     A7 12 02 F6 | 	mov	arg01, fp
1de60     18 4E 85 F1 | 	sub	fp, #24
1de64     A7 14 02 FB | 	rdlong	arg02, fp
1de68     04 4E 85 F1 | 	sub	fp, #4
1de6c     20 14 06 F1 | 	add	arg02, #32
1de70     0C 16 06 F6 | 	mov	arg03, #12
1de74     58 75 BF FD | 	call	#__system____builtin_memmove
1de78     27 4E 05 F1 | 	add	fp, #39
1de7c     A7 2E C2 FA | 	rdbyte	local09, fp
1de80     27 4E 85 F1 | 	sub	fp, #39
1de84     01 2E CE F7 | 	test	local09, #1 wz
1de88     F4 00 90 AD |  if_e	jmp	#LR__3375
1de8c     04 4E 05 F1 | 	add	fp, #4
1de90     A7 30 02 FB | 	rdlong	local10, fp
1de94     2B 30 06 F1 | 	add	local10, #43
1de98     18 81 48 FC | 	wrbyte	#64, local10
1de9c                 | ' 		dp->fn[ 11 ] =  0x40 ;
1de9c                 | ' 		for (n = 1; n < 100; n++) {
1de9c     0C 4E 05 F1 | 	add	fp, #12
1dea0     A7 02 68 FC | 	wrlong	#1, fp
1dea4     10 4E 85 F1 | 	sub	fp, #16
1dea8                 | LR__3373
1dea8     10 4E 05 F1 | 	add	fp, #16
1deac     A7 20 02 FB | 	rdlong	local02, fp
1deb0     10 4E 85 F1 | 	sub	fp, #16
1deb4     64 20 16 F2 | 	cmp	local02, #100 wc
1deb8     70 00 90 3D |  if_ae	jmp	#LR__3374
1debc     04 4E 05 F1 | 	add	fp, #4
1dec0     A7 12 02 FB | 	rdlong	arg01, fp
1dec4     20 12 06 F1 | 	add	arg01, #32
1dec8     18 4E 05 F1 | 	add	fp, #24
1decc     A7 14 02 F6 | 	mov	arg02, fp
1ded0     10 4E 85 F1 | 	sub	fp, #16
1ded4     A7 30 02 FB | 	rdlong	local10, fp
1ded8     0C 30 06 F1 | 	add	local10, #12
1dedc     18 17 02 FB | 	rdlong	arg03, local10
1dee0     04 4E 05 F1 | 	add	fp, #4
1dee4     A7 18 02 FB | 	rdlong	arg04, fp
1dee8     10 4E 85 F1 | 	sub	fp, #16
1deec     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1def0     04 4E 05 F1 | 	add	fp, #4
1def4     A7 12 02 FB | 	rdlong	arg01, fp
1def8     04 4E 85 F1 | 	sub	fp, #4
1defc     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1df00     08 4E 05 F1 | 	add	fp, #8
1df04     A7 FA 61 FC | 	wrlong	result1, fp
1df08     00 FA 4D F2 | 	cmps	result1, #0 wz
1df0c     08 4E 85 F1 | 	sub	fp, #8
1df10     18 00 90 5D |  if_ne	jmp	#LR__3374
1df14     10 4E 05 F1 | 	add	fp, #16
1df18     A7 30 02 FB | 	rdlong	local10, fp
1df1c     01 30 06 F1 | 	add	local10, #1
1df20     A7 30 62 FC | 	wrlong	local10, fp
1df24     10 4E 85 F1 | 	sub	fp, #16
1df28     7C FF 9F FD | 	jmp	#LR__3373
1df2c                 | LR__3374
1df2c     10 4E 05 F1 | 	add	fp, #16
1df30     A7 30 02 FB | 	rdlong	local10, fp
1df34     10 4E 85 F1 | 	sub	fp, #16
1df38     64 30 0E F2 | 	cmp	local10, #100 wz
1df3c     07 FA 05 A6 |  if_e	mov	result1, #7
1df40     AC 02 90 AD |  if_e	jmp	#LR__3385
1df44     08 4E 05 F1 | 	add	fp, #8
1df48     A7 30 02 FB | 	rdlong	local10, fp
1df4c     08 4E 85 F1 | 	sub	fp, #8
1df50     04 30 0E F2 | 	cmp	local10, #4 wz
1df54     08 4E 05 51 |  if_ne	add	fp, #8
1df58     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1df5c     08 4E 85 51 |  if_ne	sub	fp, #8
1df60     8C 02 90 5D |  if_ne	jmp	#LR__3385
1df64     04 4E 05 F1 | 	add	fp, #4
1df68     A7 30 02 FB | 	rdlong	local10, fp
1df6c     23 4E 05 F1 | 	add	fp, #35
1df70     A7 1E C2 FA | 	rdbyte	local01, fp
1df74     27 4E 85 F1 | 	sub	fp, #39
1df78     2B 30 06 F1 | 	add	local10, #43
1df7c     18 1F 42 FC | 	wrbyte	local01, local10
1df80                 | LR__3375
1df80     27 4E 05 F1 | 	add	fp, #39
1df84     A7 20 C2 FA | 	rdbyte	local02, fp
1df88     27 4E 85 F1 | 	sub	fp, #39
1df8c     02 20 CE F7 | 	test	local02, #2 wz
1df90     20 00 90 AD |  if_e	jmp	#LR__3376
1df94     14 4E 05 F1 | 	add	fp, #20
1df98     A7 30 02 FB | 	rdlong	local10, fp
1df9c     0C 30 06 F1 | 	add	local10, #12
1dfa0     0D 30 16 FD | 	qdiv	local10, #13
1dfa4     14 4E 85 F1 | 	sub	fp, #20
1dfa8     18 30 62 FD | 	getqx	local10
1dfac     01 30 06 F1 | 	add	local10, #1
1dfb0     04 00 90 FD | 	jmp	#LR__3377
1dfb4                 | LR__3376
1dfb4     01 30 06 F6 | 	mov	local10, #1
1dfb8                 | LR__3377
1dfb8     18 4E 05 F1 | 	add	fp, #24
1dfbc     A7 30 62 FC | 	wrlong	local10, fp
1dfc0     14 4E 85 F1 | 	sub	fp, #20
1dfc4     A7 12 02 FB | 	rdlong	arg01, fp
1dfc8     18 15 02 F6 | 	mov	arg02, local10
1dfcc     04 4E 85 F1 | 	sub	fp, #4
1dfd0     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1dfd4     08 4E 05 F1 | 	add	fp, #8
1dfd8     A7 FA 61 FC | 	wrlong	result1, fp
1dfdc     08 4E 85 F1 | 	sub	fp, #8
1dfe0     00 FA 0D F2 | 	cmp	result1, #0 wz
1dfe4     38 01 90 5D |  if_ne	jmp	#LR__3382
1dfe8     18 4E 05 F1 | 	add	fp, #24
1dfec     A7 30 02 FB | 	rdlong	local10, fp
1dff0     01 30 8E F1 | 	sub	local10, #1 wz
1dff4     A7 30 62 FC | 	wrlong	local10, fp
1dff8     18 4E 85 F1 | 	sub	fp, #24
1dffc     20 01 90 AD |  if_e	jmp	#LR__3382
1e000     04 4E 05 F1 | 	add	fp, #4
1e004     A7 30 02 FB | 	rdlong	local10, fp
1e008     18 13 02 F6 | 	mov	arg01, local10
1e00c     14 4E 05 F1 | 	add	fp, #20
1e010     A7 18 02 FB | 	rdlong	arg04, fp
1e014     18 4E 85 F1 | 	sub	fp, #24
1e018     05 18 66 F0 | 	shl	arg04, #5
1e01c     10 30 06 F1 | 	add	local10, #16
1e020     18 15 02 FB | 	rdlong	arg02, local10
1e024     0C 15 82 F1 | 	sub	arg02, arg04
1e028     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1e02c     08 4E 05 F1 | 	add	fp, #8
1e030     A7 FA 61 FC | 	wrlong	result1, fp
1e034     08 4E 85 F1 | 	sub	fp, #8
1e038     00 FA 0D F2 | 	cmp	result1, #0 wz
1e03c     E0 00 90 5D |  if_ne	jmp	#LR__3381
1e040     04 4E 05 F1 | 	add	fp, #4
1e044     A7 12 02 FB | 	rdlong	arg01, fp
1e048     04 4E 85 F1 | 	sub	fp, #4
1e04c     20 12 06 F1 | 	add	arg01, #32
1e050     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1e054     FD 30 02 F6 | 	mov	local10, result1
1e058     28 4E 05 F1 | 	add	fp, #40
1e05c     A7 30 42 FC | 	wrbyte	local10, fp
1e060     28 4E 85 F1 | 	sub	fp, #40
1e064                 | ' 			sum = sum_sfn(dp->fn);
1e064                 | ' 			do {
1e064                 | LR__3378
1e064     0C 4E 05 F1 | 	add	fp, #12
1e068     A7 12 02 FB | 	rdlong	arg01, fp
1e06c     08 4E 85 F1 | 	sub	fp, #8
1e070     A7 1E 02 FB | 	rdlong	local01, fp
1e074     04 4E 85 F1 | 	sub	fp, #4
1e078     18 1E 06 F1 | 	add	local01, #24
1e07c     0F 15 02 FB | 	rdlong	arg02, local01
1e080     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1e084     08 4E 05 F1 | 	add	fp, #8
1e088     A7 FA 61 FC | 	wrlong	result1, fp
1e08c     00 FA 4D F2 | 	cmps	result1, #0 wz
1e090     08 4E 85 F1 | 	sub	fp, #8
1e094     88 00 90 5D |  if_ne	jmp	#LR__3380
1e098     0C 4E 05 F1 | 	add	fp, #12
1e09c     A7 20 02 FB | 	rdlong	local02, fp
1e0a0     0C 20 06 F1 | 	add	local02, #12
1e0a4     10 13 02 FB | 	rdlong	arg01, local02
1e0a8     08 4E 85 F1 | 	sub	fp, #8
1e0ac     A7 1E 02 FB | 	rdlong	local01, fp
1e0b0     1C 1E 06 F1 | 	add	local01, #28
1e0b4     0F 15 02 FB | 	rdlong	arg02, local01
1e0b8     14 4E 05 F1 | 	add	fp, #20
1e0bc     A7 16 02 FB | 	rdlong	arg03, fp
1e0c0     10 4E 05 F1 | 	add	fp, #16
1e0c4     A7 18 C2 FA | 	rdbyte	arg04, fp
1e0c8     28 4E 85 F1 | 	sub	fp, #40
1e0cc     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1e0d0     0C 4E 05 F1 | 	add	fp, #12
1e0d4     A7 30 02 FB | 	rdlong	local10, fp
1e0d8     03 30 06 F1 | 	add	local10, #3
1e0dc     18 03 48 FC | 	wrbyte	#1, local10
1e0e0     08 4E 85 F1 | 	sub	fp, #8
1e0e4     A7 12 02 FB | 	rdlong	arg01, fp
1e0e8     04 4E 85 F1 | 	sub	fp, #4
1e0ec     00 14 06 F6 | 	mov	arg02, #0
1e0f0     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1e0f4     08 4E 05 F1 | 	add	fp, #8
1e0f8     A7 FA 61 FC | 	wrlong	result1, fp
1e0fc     00 FA 4D F2 | 	cmps	result1, #0 wz
1e100     08 4E 85 F1 | 	sub	fp, #8
1e104     18 00 90 5D |  if_ne	jmp	#LR__3379
1e108     18 4E 05 F1 | 	add	fp, #24
1e10c     A7 30 02 FB | 	rdlong	local10, fp
1e110     01 30 8E F1 | 	sub	local10, #1 wz
1e114     A7 30 62 FC | 	wrlong	local10, fp
1e118     18 4E 85 F1 | 	sub	fp, #24
1e11c     44 FF 9F 5D |  if_ne	jmp	#LR__3378
1e120                 | LR__3379
1e120                 | LR__3380
1e120                 | LR__3381
1e120                 | LR__3382
1e120     08 4E 05 F1 | 	add	fp, #8
1e124     A7 30 0A FB | 	rdlong	local10, fp wz
1e128     08 4E 85 F1 | 	sub	fp, #8
1e12c     B4 00 90 5D |  if_ne	jmp	#LR__3384
1e130     0C 4E 05 F1 | 	add	fp, #12
1e134     A7 12 02 FB | 	rdlong	arg01, fp
1e138     08 4E 85 F1 | 	sub	fp, #8
1e13c     A7 1E 02 FB | 	rdlong	local01, fp
1e140     04 4E 85 F1 | 	sub	fp, #4
1e144     18 1E 06 F1 | 	add	local01, #24
1e148     0F 15 02 FB | 	rdlong	arg02, local01
1e14c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1e150     08 4E 05 F1 | 	add	fp, #8
1e154     A7 FA 61 FC | 	wrlong	result1, fp
1e158     08 4E 85 F1 | 	sub	fp, #8
1e15c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e160     80 00 90 5D |  if_ne	jmp	#LR__3383
1e164     04 4E 05 F1 | 	add	fp, #4
1e168     A7 20 02 FB | 	rdlong	local02, fp
1e16c     04 4E 85 F1 | 	sub	fp, #4
1e170     1C 20 06 F1 | 	add	local02, #28
1e174     10 13 02 FB | 	rdlong	arg01, local02
1e178     00 14 06 F6 | 	mov	arg02, #0
1e17c     20 16 06 F6 | 	mov	arg03, #32
1e180     98 00 A0 FD | 	call	#\builtin_bytefill_
1e184     04 4E 05 F1 | 	add	fp, #4
1e188     A7 14 02 FB | 	rdlong	arg02, fp
1e18c     0A 1F 02 F6 | 	mov	local01, arg02
1e190     1C 1E 06 F1 | 	add	local01, #28
1e194     0F 13 02 FB | 	rdlong	arg01, local01
1e198     04 4E 85 F1 | 	sub	fp, #4
1e19c     20 14 06 F1 | 	add	arg02, #32
1e1a0     0B 16 06 F6 | 	mov	arg03, #11
1e1a4     28 72 BF FD | 	call	#__system____builtin_memmove
1e1a8     04 4E 05 F1 | 	add	fp, #4
1e1ac     A7 2E 02 FB | 	rdlong	local09, fp
1e1b0     17 31 02 F6 | 	mov	local10, local09
1e1b4     1C 30 06 F1 | 	add	local10, #28
1e1b8     18 1F 02 FB | 	rdlong	local01, local10
1e1bc     2B 2E 06 F1 | 	add	local09, #43
1e1c0     17 31 C2 FA | 	rdbyte	local10, local09
1e1c4     18 30 06 F5 | 	and	local10, #24
1e1c8     0C 1E 06 F1 | 	add	local01, #12
1e1cc     0F 31 42 FC | 	wrbyte	local10, local01
1e1d0     08 4E 05 F1 | 	add	fp, #8
1e1d4     A7 30 02 FB | 	rdlong	local10, fp
1e1d8     0C 4E 85 F1 | 	sub	fp, #12
1e1dc     03 30 06 F1 | 	add	local10, #3
1e1e0     18 03 48 FC | 	wrbyte	#1, local10
1e1e4                 | LR__3383
1e1e4                 | LR__3384
1e1e4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1e1e4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1e1e4                 | ' 
1e1e4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1e1e4                 | ' 
1e1e4                 | ' 			fs->wflag = 1;
1e1e4                 | ' 		}
1e1e4                 | ' 	}
1e1e4                 | ' 
1e1e4                 | ' 	return res;
1e1e4     08 4E 05 F1 | 	add	fp, #8
1e1e8     A7 FA 01 FB | 	rdlong	result1, fp
1e1ec     08 4E 85 F1 | 	sub	fp, #8
1e1f0                 | LR__3385
1e1f0     A7 F0 03 F6 | 	mov	ptra, fp
1e1f4     B2 00 A0 FD | 	call	#popregs_
1e1f8                 | _fatfs_cc_dir_register_ret
1e1f8     2D 00 64 FD | 	ret
1e1fc                 | 
1e1fc                 | _fatfs_cc_dir_remove
1e1fc     05 4A 05 F6 | 	mov	COUNT_, #5
1e200     A8 00 A0 FD | 	call	#pushregs_
1e204     09 1F 02 F6 | 	mov	local01, arg01
1e208     0F 21 02 FB | 	rdlong	local02, local01
1e20c     10 1E 06 F1 | 	add	local01, #16
1e210     0F 23 02 FB | 	rdlong	local03, local01
1e214     1C 1E 06 F1 | 	add	local01, #28
1e218     0F 15 02 FB | 	rdlong	arg02, local01
1e21c     2C 1E 86 F1 | 	sub	local01, #44
1e220     FF FF 7F FF 
1e224     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1e228     00 24 06 A6 |  if_e	mov	local04, #0
1e22c     18 00 90 AD |  if_e	jmp	#LR__3390
1e230     0F 13 02 F6 | 	mov	arg01, local01
1e234     2C 1E 06 F1 | 	add	local01, #44
1e238     0F 15 02 FB | 	rdlong	arg02, local01
1e23c     2C 1E 86 F1 | 	sub	local01, #44
1e240     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1e244     FD 24 02 F6 | 	mov	local04, result1
1e248                 | LR__3390
1e248     12 27 0A F6 | 	mov	local05, local04 wz
1e24c     64 00 90 5D |  if_ne	jmp	#LR__3393
1e250                 | ' 		do {
1e250                 | LR__3391
1e250     18 1E 06 F1 | 	add	local01, #24
1e254     0F 15 02 FB | 	rdlong	arg02, local01
1e258     18 1E 86 F1 | 	sub	local01, #24
1e25c     10 13 02 F6 | 	mov	arg01, local02
1e260     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1e264     FD 26 0A F6 | 	mov	local05, result1 wz
1e268     40 00 90 5D |  if_ne	jmp	#LR__3392
1e26c     1C 1E 06 F1 | 	add	local01, #28
1e270     0F 25 02 FB | 	rdlong	local04, local01
1e274     12 CB 49 FC | 	wrbyte	#229, local04
1e278     03 20 06 F1 | 	add	local02, #3
1e27c     10 03 48 FC | 	wrbyte	#1, local02
1e280     03 20 86 F1 | 	sub	local02, #3
1e284     0C 1E 86 F1 | 	sub	local01, #12
1e288     0F 25 02 FB | 	rdlong	local04, local01
1e28c     10 1E 86 F1 | 	sub	local01, #16
1e290     11 25 12 F2 | 	cmp	local04, local03 wc
1e294     14 00 90 3D |  if_ae	jmp	#LR__3392
1e298     0F 13 02 F6 | 	mov	arg01, local01
1e29c     00 14 06 F6 | 	mov	arg02, #0
1e2a0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1e2a4     FD 26 0A F6 | 	mov	local05, result1 wz
1e2a8     A4 FF 9F AD |  if_e	jmp	#LR__3391
1e2ac                 | LR__3392
1e2ac     04 26 0E F2 | 	cmp	local05, #4 wz
1e2b0     02 26 06 A6 |  if_e	mov	local05, #2
1e2b4                 | LR__3393
1e2b4                 | ' 	}
1e2b4                 | ' #line 2590 "ff.c"
1e2b4                 | ' 	return res;
1e2b4     13 FB 01 F6 | 	mov	result1, local05
1e2b8     A7 F0 03 F6 | 	mov	ptra, fp
1e2bc     B2 00 A0 FD | 	call	#popregs_
1e2c0                 | _fatfs_cc_dir_remove_ret
1e2c0     2D 00 64 FD | 	ret
1e2c4                 | 
1e2c4                 | _fatfs_cc_get_fileinfo
1e2c4     0F 4A 05 F6 | 	mov	COUNT_, #15
1e2c8     A8 00 A0 FD | 	call	#pushregs_
1e2cc     09 1F 02 F6 | 	mov	local01, arg01
1e2d0     0A 21 02 F6 | 	mov	local02, arg02
1e2d4     0F 23 02 FB | 	rdlong	local03, local01
1e2d8     1C 20 06 F1 | 	add	local02, #28
1e2dc     10 01 48 FC | 	wrbyte	#0, local02
1e2e0     1C 20 86 F1 | 	sub	local02, #28
1e2e4     18 1E 06 F1 | 	add	local01, #24
1e2e8     0F 25 0A FB | 	rdlong	local04, local01 wz
1e2ec     18 1E 86 F1 | 	sub	local01, #24
1e2f0     90 03 90 AD |  if_e	jmp	#LR__3414
1e2f4     2C 1E 06 F1 | 	add	local01, #44
1e2f8     0F 25 02 FB | 	rdlong	local04, local01
1e2fc     2C 1E 86 F1 | 	sub	local01, #44
1e300     FF FF 7F FF 
1e304     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1e308     D8 00 90 AD |  if_e	jmp	#LR__3403
1e30c     00 26 06 F6 | 	mov	local05, #0
1e310     00 28 06 F6 | 	mov	local06, #0
1e314     00 2A 06 F6 | 	mov	local07, #0
1e318                 | ' 			si = di = 0;
1e318                 | ' 			hs = 0;
1e318                 | ' 			while (fs->lfnbuf[si] != 0) {
1e318                 | LR__3400
1e318     0C 22 06 F1 | 	add	local03, #12
1e31c     11 25 02 FB | 	rdlong	local04, local03
1e320     0C 22 86 F1 | 	sub	local03, #12
1e324     14 2D 02 F6 | 	mov	local08, local06
1e328     01 2C 66 F0 | 	shl	local08, #1
1e32c     12 2D 02 F1 | 	add	local08, local04
1e330     16 25 EA FA | 	rdword	local04, local08 wz
1e334     90 00 90 AD |  if_e	jmp	#LR__3402
1e338     0C 22 06 F1 | 	add	local03, #12
1e33c     11 2F 02 FB | 	rdlong	local09, local03
1e340     0C 22 86 F1 | 	sub	local03, #12
1e344     14 31 02 F6 | 	mov	local10, local06
1e348     01 30 66 F0 | 	shl	local10, #1
1e34c     17 31 02 F1 | 	add	local10, local09
1e350     18 33 E2 FA | 	rdword	local11, local10
1e354     15 25 02 F6 | 	mov	local04, local07
1e358     0F 24 4E F7 | 	zerox	local04, #15 wz
1e35c     01 28 06 F1 | 	add	local06, #1
1e360     24 00 90 5D |  if_ne	jmp	#LR__3401
1e364     19 35 32 F9 | 	getword	local12, local11, #0
1e368     6C 00 00 FF 
1e36c     00 34 16 F2 | 	cmp	local12, ##55296 wc
1e370     14 00 90 CD |  if_b	jmp	#LR__3401
1e374     19 37 32 F9 | 	getword	local13, local11, #0
1e378     70 00 00 FF 
1e37c     00 36 16 F2 | 	cmp	local13, ##57344 wc
1e380     19 2B 02 C6 |  if_b	mov	local07, local11
1e384                 | ' 					hs = wc; continue;
1e384     90 FF 9F CD |  if_b	jmp	#LR__3400
1e388                 | LR__3401
1e388     15 13 32 F9 | 	getword	arg01, local07, #0
1e38c     10 12 66 F0 | 	shl	arg01, #16
1e390     19 33 32 F9 | 	getword	local11, local11, #0
1e394     19 13 42 F5 | 	or	arg01, local11
1e398     13 15 02 F6 | 	mov	arg02, local05
1e39c     1C 20 06 F1 | 	add	local02, #28
1e3a0     10 15 02 F1 | 	add	arg02, local02
1e3a4     FF 16 06 F6 | 	mov	arg03, #255
1e3a8     13 17 82 F1 | 	sub	arg03, local05
1e3ac     1C 20 86 F1 | 	sub	local02, #28
1e3b0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1e3b4     FD 38 0A F6 | 	mov	local14, result1 wz
1e3b8     00 26 06 A6 |  if_e	mov	local05, #0
1e3bc     1C 27 02 51 |  if_ne	add	local05, local14
1e3c0     00 2A 06 56 |  if_ne	mov	local07, #0
1e3c4     50 FF 9F 5D |  if_ne	jmp	#LR__3400
1e3c8                 | LR__3402
1e3c8     15 25 02 F6 | 	mov	local04, local07
1e3cc     0F 24 4E F7 | 	zerox	local04, #15 wz
1e3d0     00 26 06 56 |  if_ne	mov	local05, #0
1e3d4     1C 20 06 F1 | 	add	local02, #28
1e3d8     10 27 02 F1 | 	add	local05, local02
1e3dc     13 01 48 FC | 	wrbyte	#0, local05
1e3e0     1C 20 86 F1 | 	sub	local02, #28
1e3e4                 | LR__3403
1e3e4     00 26 06 F6 | 	mov	local05, #0
1e3e8     00 28 06 F6 | 	mov	local06, #0
1e3ec                 | ' 			fno->fname[di] = 0;
1e3ec                 | ' 		}
1e3ec                 | ' 	}
1e3ec                 | ' 
1e3ec                 | ' 	si = di = 0;
1e3ec                 | ' 	while (si < 11) {
1e3ec                 | LR__3404
1e3ec     0B 28 16 F2 | 	cmp	local06, #11 wc
1e3f0     20 01 90 3D |  if_ae	jmp	#LR__3407
1e3f4     1C 1E 06 F1 | 	add	local01, #28
1e3f8     0F 2F 02 FB | 	rdlong	local09, local01
1e3fc     1C 1E 86 F1 | 	sub	local01, #28
1e400     14 31 02 F6 | 	mov	local10, local06
1e404     17 31 02 F1 | 	add	local10, local09
1e408     18 33 C2 FA | 	rdbyte	local11, local10
1e40c     19 25 32 F9 | 	getword	local04, local11, #0
1e410     20 24 0E F2 | 	cmp	local04, #32 wz
1e414     01 28 06 F1 | 	add	local06, #1
1e418     D0 FF 9F AD |  if_e	jmp	#LR__3404
1e41c     19 25 32 F9 | 	getword	local04, local11, #0
1e420     05 24 0E F2 | 	cmp	local04, #5 wz
1e424     E5 32 06 A6 |  if_e	mov	local11, #229
1e428     09 28 0E F2 | 	cmp	local06, #9 wz
1e42c     20 00 90 5D |  if_ne	jmp	#LR__3405
1e430     0C 26 16 F2 | 	cmp	local05, #12 wc
1e434     18 00 90 3D |  if_ae	jmp	#LR__3405
1e438     13 37 02 F6 | 	mov	local13, local05
1e43c     0C 20 06 F1 | 	add	local02, #12
1e440     10 37 02 F1 | 	add	local13, local02
1e444     1B 5D 48 FC | 	wrbyte	#46, local13
1e448     01 26 06 F1 | 	add	local05, #1
1e44c     0C 20 86 F1 | 	sub	local02, #12
1e450                 | LR__3405
1e450     19 13 32 F9 | 	getword	arg01, local11, #0
1e454     07 12 4E F7 | 	zerox	arg01, #7 wz
1e458     00 FA 05 56 |  if_ne	mov	result1, #0
1e45c                 | ' 
1e45c                 | ' 	return 0;
1e45c     00 FA 05 A6 |  if_e	mov	result1, #0
1e460     00 FA 0D F2 | 	cmp	result1, #0 wz
1e464     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1e468     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1e46c     50 00 90 AD |  if_e	jmp	#LR__3406
1e470     1C 1E 06 F1 | 	add	local01, #28
1e474     0F 31 02 FB | 	rdlong	local10, local01
1e478     1C 1E 86 F1 | 	sub	local01, #28
1e47c     14 2D 02 F6 | 	mov	local08, local06
1e480     18 2D 02 F1 | 	add	local08, local10
1e484     16 13 CA FA | 	rdbyte	arg01, local08 wz
1e488     00 FA 05 56 |  if_ne	mov	result1, #0
1e48c                 | ' 
1e48c                 | ' 	return 0;
1e48c     00 FA 05 A6 |  if_e	mov	result1, #0
1e490     00 FA 0D F2 | 	cmp	result1, #0 wz
1e494     28 00 90 AD |  if_e	jmp	#LR__3406
1e498     19 33 32 F9 | 	getword	local11, local11, #0
1e49c     08 32 66 F0 | 	shl	local11, #8
1e4a0     1C 1E 06 F1 | 	add	local01, #28
1e4a4     0F 39 02 FB | 	rdlong	local14, local01
1e4a8     1C 1E 86 F1 | 	sub	local01, #28
1e4ac     14 2F 02 F6 | 	mov	local09, local06
1e4b0     1C 2F 02 F1 | 	add	local09, local14
1e4b4     17 35 C2 FA | 	rdbyte	local12, local09
1e4b8     1A 33 42 F5 | 	or	local11, local12
1e4bc     01 28 06 F1 | 	add	local06, #1
1e4c0                 | LR__3406
1e4c0     19 13 02 F6 | 	mov	arg01, local11
1e4c4     01 00 00 FF 
1e4c8     52 15 06 F6 | 	mov	arg02, ##850
1e4cc     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1e4d0     FD 32 02 F6 | 	mov	local11, result1
1e4d4     19 25 02 F6 | 	mov	local04, local11
1e4d8     0F 24 4E F7 | 	zerox	local04, #15 wz
1e4dc     00 26 06 A6 |  if_e	mov	local05, #0
1e4e0     30 00 90 AD |  if_e	jmp	#LR__3407
1e4e4     19 13 32 F9 | 	getword	arg01, local11, #0
1e4e8     13 15 02 F6 | 	mov	arg02, local05
1e4ec     0C 20 06 F1 | 	add	local02, #12
1e4f0     10 15 02 F1 | 	add	arg02, local02
1e4f4     0C 16 06 F6 | 	mov	arg03, #12
1e4f8     13 17 82 F1 | 	sub	arg03, local05
1e4fc     0C 20 86 F1 | 	sub	local02, #12
1e500     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1e504     FD 38 0A F6 | 	mov	local14, result1 wz
1e508     00 26 06 A6 |  if_e	mov	local05, #0
1e50c     1C 27 02 51 |  if_ne	add	local05, local14
1e510     D8 FE 9F 5D |  if_ne	jmp	#LR__3404
1e514                 | LR__3407
1e514     13 25 02 F6 | 	mov	local04, local05
1e518     0C 20 06 F1 | 	add	local02, #12
1e51c     10 25 02 F1 | 	add	local04, local02
1e520     12 01 48 FC | 	wrbyte	#0, local04
1e524     10 20 06 F1 | 	add	local02, #16
1e528     10 25 CA FA | 	rdbyte	local04, local02 wz
1e52c     1C 20 86 F1 | 	sub	local02, #28
1e530     F8 00 90 5D |  if_ne	jmp	#LR__3413
1e534     00 26 0E F2 | 	cmp	local05, #0 wz
1e538     1C 00 90 5D |  if_ne	jmp	#LR__3408
1e53c     13 37 02 F6 | 	mov	local13, local05
1e540     1C 20 06 F1 | 	add	local02, #28
1e544     10 37 02 F1 | 	add	local13, local02
1e548     1B 7F 48 FC | 	wrbyte	#63, local13
1e54c     01 26 06 F1 | 	add	local05, #1
1e550     1C 20 86 F1 | 	sub	local02, #28
1e554     A4 00 90 FD | 	jmp	#LR__3412
1e558                 | LR__3408
1e558                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1e558     00 26 06 F6 | 	mov	local05, #0
1e55c     00 28 06 F6 | 	mov	local06, #0
1e560     08 3A 06 F6 | 	mov	local15, #8
1e564                 | LR__3409
1e564     14 25 02 F6 | 	mov	local04, local06
1e568     0C 20 06 F1 | 	add	local02, #12
1e56c     10 25 02 F1 | 	add	local04, local02
1e570     12 37 CA FA | 	rdbyte	local13, local04 wz
1e574     0C 20 86 F1 | 	sub	local02, #12
1e578     80 00 90 AD |  if_e	jmp	#LR__3411
1e57c     14 2D 02 F6 | 	mov	local08, local06
1e580     0C 20 06 F1 | 	add	local02, #12
1e584     10 2D 02 F1 | 	add	local08, local02
1e588     16 33 C2 FA | 	rdbyte	local11, local08
1e58c     19 39 32 F9 | 	getword	local14, local11, #0
1e590     2E 38 0E F2 | 	cmp	local14, #46 wz
1e594     0C 20 86 F1 | 	sub	local02, #12
1e598     10 3A 06 A6 |  if_e	mov	local15, #16
1e59c     19 39 32 F9 | 	getword	local14, local11, #0
1e5a0     41 38 16 F2 | 	cmp	local14, #65 wc
1e5a4     30 00 90 CD |  if_b	jmp	#LR__3410
1e5a8     19 2D 32 F9 | 	getword	local08, local11, #0
1e5ac     5B 2C 16 F2 | 	cmp	local08, #91 wc
1e5b0     24 00 90 3D |  if_ae	jmp	#LR__3410
1e5b4     1C 1E 06 F1 | 	add	local01, #28
1e5b8     0F 2F 02 FB | 	rdlong	local09, local01
1e5bc     1C 1E 86 F1 | 	sub	local01, #28
1e5c0     0C 2E 06 F1 | 	add	local09, #12
1e5c4     17 31 C2 FA | 	rdbyte	local10, local09
1e5c8     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1e5cc     1C 31 CA F7 | 	test	local10, local14 wz
1e5d0     19 33 32 59 |  if_ne	getword	local11, local11, #0
1e5d4     20 32 06 51 |  if_ne	add	local11, #32
1e5d8                 | LR__3410
1e5d8     13 39 02 F6 | 	mov	local14, local05
1e5dc     1C 20 06 F1 | 	add	local02, #28
1e5e0     10 39 02 F1 | 	add	local14, local02
1e5e4     19 33 32 F9 | 	getword	local11, local11, #0
1e5e8     1C 33 42 FC | 	wrbyte	local11, local14
1e5ec     01 28 06 F1 | 	add	local06, #1
1e5f0     01 26 06 F1 | 	add	local05, #1
1e5f4     1C 20 86 F1 | 	sub	local02, #28
1e5f8     68 FF 9F FD | 	jmp	#LR__3409
1e5fc                 | LR__3411
1e5fc                 | LR__3412
1e5fc     1C 20 06 F1 | 	add	local02, #28
1e600     10 27 02 F1 | 	add	local05, local02
1e604     13 01 48 FC | 	wrbyte	#0, local05
1e608     1C 1E 06 F1 | 	add	local01, #28
1e60c     0F 25 02 FB | 	rdlong	local04, local01
1e610     1C 1E 86 F1 | 	sub	local01, #28
1e614     0C 24 06 F1 | 	add	local04, #12
1e618     12 37 CA FA | 	rdbyte	local13, local04 wz
1e61c     1C 20 86 F1 | 	sub	local02, #28
1e620     0C 20 06 A1 |  if_e	add	local02, #12
1e624     10 01 48 AC |  if_e	wrbyte	#0, local02
1e628     0C 20 86 A1 |  if_e	sub	local02, #12
1e62c                 | LR__3413
1e62c     1C 1E 06 F1 | 	add	local01, #28
1e630     0F 35 02 FB | 	rdlong	local12, local01
1e634     0B 34 06 F1 | 	add	local12, #11
1e638     1A 25 C2 FA | 	rdbyte	local04, local12
1e63c     3F 24 06 F5 | 	and	local04, #63
1e640     08 20 06 F1 | 	add	local02, #8
1e644     10 25 42 FC | 	wrbyte	local04, local02
1e648     08 20 86 F1 | 	sub	local02, #8
1e64c     0F 13 02 FB | 	rdlong	arg01, local01
1e650     1C 12 06 F1 | 	add	arg01, #28
1e654                 | ' {
1e654                 | ' 
1e654                 | ' 	return *((DWORD*)ptr);
1e654     09 FB 01 FB | 	rdlong	result1, arg01
1e658     10 FB 61 FC | 	wrlong	result1, local02
1e65c     0F 13 02 FB | 	rdlong	arg01, local01
1e660     16 12 06 F1 | 	add	arg01, #22
1e664                 | ' {
1e664                 | ' 
1e664                 | ' 	return *((WORD*)ptr);
1e664     09 FB E1 FA | 	rdword	result1, arg01
1e668     06 20 06 F1 | 	add	local02, #6
1e66c     10 FB 51 FC | 	wrword	result1, local02
1e670     0F 13 02 FB | 	rdlong	arg01, local01
1e674     18 12 06 F1 | 	add	arg01, #24
1e678                 | ' {
1e678                 | ' 
1e678                 | ' 	return *((WORD*)ptr);
1e678     09 FB E1 FA | 	rdword	result1, arg01
1e67c     02 20 86 F1 | 	sub	local02, #2
1e680     10 FB 51 FC | 	wrword	result1, local02
1e684                 | LR__3414
1e684     A7 F0 03 F6 | 	mov	ptra, fp
1e688     B2 00 A0 FD | 	call	#popregs_
1e68c                 | _fatfs_cc_get_fileinfo_ret
1e68c     2D 00 64 FD | 	ret
1e690                 | 
1e690                 | _fatfs_cc_create_name
1e690     0D 4A 05 F6 | 	mov	COUNT_, #13
1e694     A8 00 A0 FD | 	call	#pushregs_
1e698     34 F0 07 F1 | 	add	ptra, #52
1e69c     04 4E 05 F1 | 	add	fp, #4
1e6a0     A7 12 62 FC | 	wrlong	arg01, fp
1e6a4     04 4E 05 F1 | 	add	fp, #4
1e6a8     A7 14 62 FC | 	wrlong	arg02, fp
1e6ac     0A FB 01 FB | 	rdlong	result1, arg02
1e6b0     28 4E 05 F1 | 	add	fp, #40
1e6b4     A7 FA 61 FC | 	wrlong	result1, fp
1e6b8     2C 4E 85 F1 | 	sub	fp, #44
1e6bc     A7 FA 01 FB | 	rdlong	result1, fp
1e6c0     FD 1E 02 FB | 	rdlong	local01, result1
1e6c4     0C 1E 06 F1 | 	add	local01, #12
1e6c8     0F 21 02 FB | 	rdlong	local02, local01
1e6cc     14 4E 05 F1 | 	add	fp, #20
1e6d0     A7 20 62 FC | 	wrlong	local02, fp
1e6d4     14 4E 05 F1 | 	add	fp, #20
1e6d8     A7 00 68 FC | 	wrlong	#0, fp
1e6dc     2C 4E 85 F1 | 	sub	fp, #44
1e6e0                 | ' 
1e6e0                 | ' 
1e6e0                 | ' 
1e6e0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1e6e0                 | ' 	for (;;) {
1e6e0                 | LR__3420
1e6e0     30 4E 05 F1 | 	add	fp, #48
1e6e4     A7 12 02 F6 | 	mov	arg01, fp
1e6e8     30 4E 85 F1 | 	sub	fp, #48
1e6ec     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1e6f0     1C 4E 05 F1 | 	add	fp, #28
1e6f4     A7 FA 61 FC | 	wrlong	result1, fp
1e6f8     1C 4E 85 F1 | 	sub	fp, #28
1e6fc     FF FF 7F FF 
1e700     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1e704     06 FA 05 A6 |  if_e	mov	result1, #6
1e708     74 08 90 AD |  if_e	jmp	#LR__3460
1e70c     1C 4E 05 F1 | 	add	fp, #28
1e710     A7 1E 02 FB | 	rdlong	local01, fp
1e714     1C 4E 85 F1 | 	sub	fp, #28
1e718     80 00 00 FF 
1e71c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1e720     3C 00 90 CD |  if_b	jmp	#LR__3421
1e724     18 4E 05 F1 | 	add	fp, #24
1e728     A7 22 02 FB | 	rdlong	local03, fp
1e72c     14 4E 05 F1 | 	add	fp, #20
1e730     A7 1E 02 FB | 	rdlong	local01, fp
1e734     0F 25 02 F6 | 	mov	local04, local01
1e738     01 24 06 F1 | 	add	local04, #1
1e73c     A7 24 62 FC | 	wrlong	local04, fp
1e740     01 1E 66 F0 | 	shl	local01, #1
1e744     11 1F 02 F1 | 	add	local01, local03
1e748     10 4E 85 F1 | 	sub	fp, #16
1e74c     A7 26 02 FB | 	rdlong	local05, fp
1e750     1C 4E 85 F1 | 	sub	fp, #28
1e754     13 29 02 F6 | 	mov	local06, local05
1e758     10 28 46 F0 | 	shr	local06, #16
1e75c     0F 29 52 FC | 	wrword	local06, local01
1e760                 | LR__3421
1e760     1C 4E 05 F1 | 	add	fp, #28
1e764     A7 1E 02 FB | 	rdlong	local01, fp
1e768     08 4E 85 F1 | 	sub	fp, #8
1e76c     A7 1E 52 FC | 	wrword	local01, fp
1e770     A7 1E E2 FA | 	rdword	local01, fp
1e774     14 4E 85 F1 | 	sub	fp, #20
1e778     20 1E 16 F2 | 	cmp	local01, #32 wc
1e77c     B0 00 90 CD |  if_b	jmp	#LR__3423
1e780     14 4E 05 F1 | 	add	fp, #20
1e784     A7 1E E2 FA | 	rdword	local01, fp
1e788     14 4E 85 F1 | 	sub	fp, #20
1e78c     2F 1E 0E F2 | 	cmp	local01, #47 wz
1e790     14 4E 05 51 |  if_ne	add	fp, #20
1e794     A7 24 E2 5A |  if_ne	rdword	local04, fp
1e798     14 4E 85 51 |  if_ne	sub	fp, #20
1e79c     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1e7a0     8C 00 90 AD |  if_e	jmp	#LR__3423
1e7a4     14 4E 05 F1 | 	add	fp, #20
1e7a8     A7 12 E2 FA | 	rdword	arg01, fp
1e7ac     14 4E 85 F1 | 	sub	fp, #20
1e7b0     80 12 16 F2 | 	cmp	arg01, #128 wc
1e7b4     24 00 90 3D |  if_ae	jmp	#LR__3422
1e7b8     23 01 00 FF 
1e7bc     F0 12 06 F6 | 	mov	arg01, ##@LR__4082
1e7c0     14 4E 05 F1 | 	add	fp, #20
1e7c4     A7 14 E2 FA | 	rdword	arg02, fp
1e7c8     14 4E 85 F1 | 	sub	fp, #20
1e7cc     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1e7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7d4     06 FA 05 56 |  if_ne	mov	result1, #6
1e7d8     A4 07 90 5D |  if_ne	jmp	#LR__3460
1e7dc                 | LR__3422
1e7dc     2C 4E 05 F1 | 	add	fp, #44
1e7e0     A7 28 02 FB | 	rdlong	local06, fp
1e7e4     2C 4E 85 F1 | 	sub	fp, #44
1e7e8     FF 28 16 F2 | 	cmp	local06, #255 wc
1e7ec     06 FA 05 36 |  if_ae	mov	result1, #6
1e7f0     8C 07 90 3D |  if_ae	jmp	#LR__3460
1e7f4     18 4E 05 F1 | 	add	fp, #24
1e7f8     A7 22 02 FB | 	rdlong	local03, fp
1e7fc     14 4E 05 F1 | 	add	fp, #20
1e800     A7 20 02 FB | 	rdlong	local02, fp
1e804     10 25 02 F6 | 	mov	local04, local02
1e808     01 24 06 F1 | 	add	local04, #1
1e80c     A7 24 62 FC | 	wrlong	local04, fp
1e810     10 1F 02 F6 | 	mov	local01, local02
1e814     01 1E 66 F0 | 	shl	local01, #1
1e818     11 1F 02 F1 | 	add	local01, local03
1e81c     18 4E 85 F1 | 	sub	fp, #24
1e820     A7 28 E2 FA | 	rdword	local06, fp
1e824     14 4E 85 F1 | 	sub	fp, #20
1e828     0F 29 52 FC | 	wrword	local06, local01
1e82c     B0 FE 9F FD | 	jmp	#LR__3420
1e830                 | LR__3423
1e830     14 4E 05 F1 | 	add	fp, #20
1e834     A7 2A E2 FA | 	rdword	local07, fp
1e838     14 4E 85 F1 | 	sub	fp, #20
1e83c     20 2A 16 F2 | 	cmp	local07, #32 wc
1e840     10 4E 05 C1 |  if_b	add	fp, #16
1e844     A7 08 48 CC |  if_b	wrbyte	#4, fp
1e848     10 4E 85 C1 |  if_b	sub	fp, #16
1e84c     74 00 90 CD |  if_b	jmp	#LR__3428
1e850     97 24 48 FB | 	callpa	#(@LR__3426-@LR__3424)>>2,fcache_load_ptr_
1e854                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1e854                 | LR__3424
1e854     30 4E 05 F1 | 	add	fp, #48
1e858     A7 24 02 FB | 	rdlong	local04, fp
1e85c     30 4E 85 F1 | 	sub	fp, #48
1e860     12 2B C2 FA | 	rdbyte	local07, local04
1e864     2F 2A 0E F2 | 	cmp	local07, #47 wz
1e868     18 00 90 AD |  if_e	jmp	#LR__3425
1e86c     30 4E 05 F1 | 	add	fp, #48
1e870     A7 24 02 FB | 	rdlong	local04, fp
1e874     30 4E 85 F1 | 	sub	fp, #48
1e878     12 21 C2 FA | 	rdbyte	local02, local04
1e87c     5C 20 0E F2 | 	cmp	local02, #92 wz
1e880     18 00 90 5D |  if_ne	jmp	#LR__3427
1e884                 | LR__3425
1e884     30 4E 05 F1 | 	add	fp, #48
1e888     A7 1E 02 FB | 	rdlong	local01, fp
1e88c     01 1E 06 F1 | 	add	local01, #1
1e890     A7 1E 62 FC | 	wrlong	local01, fp
1e894     30 4E 85 F1 | 	sub	fp, #48
1e898     B8 FF 9F FD | 	jmp	#LR__3424
1e89c                 | LR__3426
1e89c                 | LR__3427
1e89c     10 4E 05 F1 | 	add	fp, #16
1e8a0     A7 00 48 FC | 	wrbyte	#0, fp
1e8a4     20 4E 05 F1 | 	add	fp, #32
1e8a8     A7 28 02 FB | 	rdlong	local06, fp
1e8ac     30 4E 85 F1 | 	sub	fp, #48
1e8b0     14 2B C2 FA | 	rdbyte	local07, local06
1e8b4     20 2A 16 F2 | 	cmp	local07, #32 wc
1e8b8     10 4E 05 C1 |  if_b	add	fp, #16
1e8bc     A7 08 48 CC |  if_b	wrbyte	#4, fp
1e8c0     10 4E 85 C1 |  if_b	sub	fp, #16
1e8c4                 | LR__3428
1e8c4     08 4E 05 F1 | 	add	fp, #8
1e8c8     A7 2A 02 FB | 	rdlong	local07, fp
1e8cc     28 4E 05 F1 | 	add	fp, #40
1e8d0     A7 1E 02 FB | 	rdlong	local01, fp
1e8d4     30 4E 85 F1 | 	sub	fp, #48
1e8d8     15 1F 62 FC | 	wrlong	local01, local07
1e8dc     97 38 48 FB | 	callpa	#(@LR__3430-@LR__3429)>>2,fcache_load_ptr_
1e8e0                 | ' 	}
1e8e0                 | ' 	*path = p;
1e8e0                 | ' #line 2862 "ff.c"
1e8e0                 | ' 	while (di) {
1e8e0                 | LR__3429
1e8e0     2C 4E 05 F1 | 	add	fp, #44
1e8e4     A7 2A 0A FB | 	rdlong	local07, fp wz
1e8e8     2C 4E 85 F1 | 	sub	fp, #44
1e8ec     60 00 90 AD |  if_e	jmp	#LR__3431
1e8f0     18 4E 05 F1 | 	add	fp, #24
1e8f4     A7 28 02 FB | 	rdlong	local06, fp
1e8f8     14 4E 05 F1 | 	add	fp, #20
1e8fc     A7 24 02 FB | 	rdlong	local04, fp
1e900     01 24 86 F1 | 	sub	local04, #1
1e904     01 24 66 F0 | 	shl	local04, #1
1e908     14 25 02 F1 | 	add	local04, local06
1e90c     12 29 E2 FA | 	rdword	local06, local04
1e910     18 4E 85 F1 | 	sub	fp, #24
1e914     A7 28 52 FC | 	wrword	local06, fp
1e918     A7 2A E2 FA | 	rdword	local07, fp
1e91c     14 4E 85 F1 | 	sub	fp, #20
1e920     20 2A 0E F2 | 	cmp	local07, #32 wz
1e924     14 4E 05 51 |  if_ne	add	fp, #20
1e928     A7 1E E2 5A |  if_ne	rdword	local01, fp
1e92c     14 4E 85 51 |  if_ne	sub	fp, #20
1e930     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1e934     18 00 90 5D |  if_ne	jmp	#LR__3431
1e938     2C 4E 05 F1 | 	add	fp, #44
1e93c     A7 1E 02 FB | 	rdlong	local01, fp
1e940     01 1E 86 F1 | 	sub	local01, #1
1e944     A7 1E 62 FC | 	wrlong	local01, fp
1e948     2C 4E 85 F1 | 	sub	fp, #44
1e94c     90 FF 9F FD | 	jmp	#LR__3429
1e950                 | LR__3430
1e950                 | LR__3431
1e950     18 4E 05 F1 | 	add	fp, #24
1e954     A7 2C 02 FB | 	rdlong	local08, fp
1e958     14 4E 05 F1 | 	add	fp, #20
1e95c     A7 24 02 FB | 	rdlong	local04, fp
1e960     01 24 66 F0 | 	shl	local04, #1
1e964     16 25 02 F1 | 	add	local04, local08
1e968     12 01 58 FC | 	wrword	#0, local04
1e96c     A7 2A 0A FB | 	rdlong	local07, fp wz
1e970     2C 4E 85 F1 | 	sub	fp, #44
1e974     06 FA 05 A6 |  if_e	mov	result1, #6
1e978     04 06 90 AD |  if_e	jmp	#LR__3460
1e97c                 | ' 
1e97c                 | ' 
1e97c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1e97c     28 4E 05 F1 | 	add	fp, #40
1e980     A7 00 68 FC | 	wrlong	#0, fp
1e984     28 4E 85 F1 | 	sub	fp, #40
1e988     97 22 48 FB | 	callpa	#(@LR__3433-@LR__3432)>>2,fcache_load_ptr_
1e98c                 | LR__3432
1e98c     18 4E 05 F1 | 	add	fp, #24
1e990     A7 2E 02 FB | 	rdlong	local09, fp
1e994     10 4E 05 F1 | 	add	fp, #16
1e998     A7 30 02 FB | 	rdlong	local10, fp
1e99c     28 4E 85 F1 | 	sub	fp, #40
1e9a0     01 30 66 F0 | 	shl	local10, #1
1e9a4     17 31 02 F1 | 	add	local10, local09
1e9a8     18 33 E2 FA | 	rdword	local11, local10
1e9ac     20 32 0E F2 | 	cmp	local11, #32 wz
1e9b0     1C 00 90 5D |  if_ne	jmp	#LR__3434
1e9b4     28 4E 05 F1 | 	add	fp, #40
1e9b8     A7 34 02 FB | 	rdlong	local12, fp
1e9bc     1A 27 02 F6 | 	mov	local05, local12
1e9c0     01 26 06 F1 | 	add	local05, #1
1e9c4     A7 26 62 FC | 	wrlong	local05, fp
1e9c8     28 4E 85 F1 | 	sub	fp, #40
1e9cc     BC FF 9F FD | 	jmp	#LR__3432
1e9d0                 | LR__3433
1e9d0                 | LR__3434
1e9d0     28 4E 05 F1 | 	add	fp, #40
1e9d4     A7 2A 02 FB | 	rdlong	local07, fp
1e9d8     28 4E 85 F1 | 	sub	fp, #40
1e9dc     01 2A 16 F2 | 	cmp	local07, #1 wc
1e9e0     28 00 90 3D |  if_ae	jmp	#LR__3435
1e9e4     18 4E 05 F1 | 	add	fp, #24
1e9e8     A7 22 02 FB | 	rdlong	local03, fp
1e9ec     10 4E 05 F1 | 	add	fp, #16
1e9f0     A7 2E 02 FB | 	rdlong	local09, fp
1e9f4     28 4E 85 F1 | 	sub	fp, #40
1e9f8     01 2E 66 F0 | 	shl	local09, #1
1e9fc     11 2F 02 F1 | 	add	local09, local03
1ea00     17 1F E2 FA | 	rdword	local01, local09
1ea04     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ea08     14 00 90 5D |  if_ne	jmp	#LR__3436
1ea0c                 | LR__3435
1ea0c     10 4E 05 F1 | 	add	fp, #16
1ea10     A7 2A C2 FA | 	rdbyte	local07, fp
1ea14     03 2A 46 F5 | 	or	local07, #3
1ea18     A7 2A 42 FC | 	wrbyte	local07, fp
1ea1c     10 4E 85 F1 | 	sub	fp, #16
1ea20                 | LR__3436
1ea20     97 2C 48 FB | 	callpa	#(@LR__3438-@LR__3437)>>2,fcache_load_ptr_
1ea24                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1ea24                 | LR__3437
1ea24     2C 4E 05 F1 | 	add	fp, #44
1ea28     A7 2A 02 FB | 	rdlong	local07, fp
1ea2c     2C 4E 85 F1 | 	sub	fp, #44
1ea30     01 2A 16 F2 | 	cmp	local07, #1 wc
1ea34     44 00 90 CD |  if_b	jmp	#LR__3439
1ea38     18 4E 05 F1 | 	add	fp, #24
1ea3c     A7 28 02 FB | 	rdlong	local06, fp
1ea40     14 4E 05 F1 | 	add	fp, #20
1ea44     A7 22 02 FB | 	rdlong	local03, fp
1ea48     2C 4E 85 F1 | 	sub	fp, #44
1ea4c     01 22 86 F1 | 	sub	local03, #1
1ea50     01 22 66 F0 | 	shl	local03, #1
1ea54     14 23 02 F1 | 	add	local03, local06
1ea58     11 1F E2 FA | 	rdword	local01, local03
1ea5c     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ea60     18 00 90 AD |  if_e	jmp	#LR__3439
1ea64     2C 4E 05 F1 | 	add	fp, #44
1ea68     A7 1E 02 FB | 	rdlong	local01, fp
1ea6c     01 1E 86 F1 | 	sub	local01, #1
1ea70     A7 1E 62 FC | 	wrlong	local01, fp
1ea74     2C 4E 85 F1 | 	sub	fp, #44
1ea78     A8 FF 9F FD | 	jmp	#LR__3437
1ea7c                 | LR__3438
1ea7c                 | LR__3439
1ea7c     04 4E 05 F1 | 	add	fp, #4
1ea80     A7 12 02 FB | 	rdlong	arg01, fp
1ea84     04 4E 85 F1 | 	sub	fp, #4
1ea88     20 12 06 F1 | 	add	arg01, #32
1ea8c     20 14 06 F6 | 	mov	arg02, #32
1ea90     0B 16 06 F6 | 	mov	arg03, #11
1ea94     09 37 02 F6 | 	mov	local13, arg01
1ea98     98 00 A0 FD | 	call	#\builtin_bytefill_
1ea9c     1B FB 01 F6 | 	mov	result1, local13
1eaa0     0C 4E 05 F1 | 	add	fp, #12
1eaa4     A7 00 48 FC | 	wrbyte	#0, fp
1eaa8     A7 2A C2 FA | 	rdbyte	local07, fp
1eaac     14 4E 05 F1 | 	add	fp, #20
1eab0     A7 2A 62 FC | 	wrlong	local07, fp
1eab4     04 4E 05 F1 | 	add	fp, #4
1eab8     A7 10 68 FC | 	wrlong	#8, fp
1eabc     24 4E 85 F1 | 	sub	fp, #36
1eac0                 | ' 
1eac0                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1eac0                 | ' 	i = b = 0; ni = 8;
1eac0                 | ' 	for (;;) {
1eac0                 | LR__3440
1eac0     18 4E 05 F1 | 	add	fp, #24
1eac4     A7 22 02 FB | 	rdlong	local03, fp
1eac8     10 4E 05 F1 | 	add	fp, #16
1eacc     A7 2E 02 FB | 	rdlong	local09, fp
1ead0     17 25 02 F6 | 	mov	local04, local09
1ead4     01 24 06 F1 | 	add	local04, #1
1ead8     A7 24 62 FC | 	wrlong	local04, fp
1eadc     01 2E 66 F0 | 	shl	local09, #1
1eae0     11 2F 02 F1 | 	add	local09, local03
1eae4     17 29 E2 FA | 	rdword	local06, local09
1eae8     14 4E 85 F1 | 	sub	fp, #20
1eaec     A7 28 52 FC | 	wrword	local06, fp
1eaf0     A7 2A EA FA | 	rdword	local07, fp wz
1eaf4     14 4E 85 F1 | 	sub	fp, #20
1eaf8     74 03 90 AD |  if_e	jmp	#LR__3456
1eafc     14 4E 05 F1 | 	add	fp, #20
1eb00     A7 2A E2 FA | 	rdword	local07, fp
1eb04     14 4E 85 F1 | 	sub	fp, #20
1eb08     20 2A 0E F2 | 	cmp	local07, #32 wz
1eb0c     30 00 90 AD |  if_e	jmp	#LR__3441
1eb10     14 4E 05 F1 | 	add	fp, #20
1eb14     A7 1E E2 FA | 	rdword	local01, fp
1eb18     14 4E 85 F1 | 	sub	fp, #20
1eb1c     2E 1E 0E F2 | 	cmp	local01, #46 wz
1eb20     34 00 90 5D |  if_ne	jmp	#LR__3442
1eb24     28 4E 05 F1 | 	add	fp, #40
1eb28     A7 24 02 FB | 	rdlong	local04, fp
1eb2c     04 4E 05 F1 | 	add	fp, #4
1eb30     A7 30 02 FB | 	rdlong	local10, fp
1eb34     2C 4E 85 F1 | 	sub	fp, #44
1eb38     18 25 0A F2 | 	cmp	local04, local10 wz
1eb3c     18 00 90 AD |  if_e	jmp	#LR__3442
1eb40                 | LR__3441
1eb40     10 4E 05 F1 | 	add	fp, #16
1eb44     A7 2A C2 FA | 	rdbyte	local07, fp
1eb48     03 2A 46 F5 | 	or	local07, #3
1eb4c     A7 2A 42 FC | 	wrbyte	local07, fp
1eb50     10 4E 85 F1 | 	sub	fp, #16
1eb54                 | ' 			cf |=  0x01  |  0x02 ;
1eb54                 | ' 			continue;
1eb54     68 FF 9F FD | 	jmp	#LR__3440
1eb58                 | LR__3442
1eb58     20 4E 05 F1 | 	add	fp, #32
1eb5c     A7 2A 02 FB | 	rdlong	local07, fp
1eb60     04 4E 05 F1 | 	add	fp, #4
1eb64     A7 1E 02 FB | 	rdlong	local01, fp
1eb68     24 4E 85 F1 | 	sub	fp, #36
1eb6c     0F 2B 12 F2 | 	cmp	local07, local01 wc
1eb70     1C 00 90 3D |  if_ae	jmp	#LR__3443
1eb74     28 4E 05 F1 | 	add	fp, #40
1eb78     A7 2C 02 FB | 	rdlong	local08, fp
1eb7c     04 4E 05 F1 | 	add	fp, #4
1eb80     A7 30 02 FB | 	rdlong	local10, fp
1eb84     2C 4E 85 F1 | 	sub	fp, #44
1eb88     18 2D 0A F2 | 	cmp	local08, local10 wz
1eb8c     B0 00 90 5D |  if_ne	jmp	#LR__3445
1eb90                 | LR__3443
1eb90     24 4E 05 F1 | 	add	fp, #36
1eb94     A7 2A 02 FB | 	rdlong	local07, fp
1eb98     24 4E 85 F1 | 	sub	fp, #36
1eb9c     0B 2A 0E F2 | 	cmp	local07, #11 wz
1eba0     18 00 90 5D |  if_ne	jmp	#LR__3444
1eba4     10 4E 05 F1 | 	add	fp, #16
1eba8     A7 2A C2 FA | 	rdbyte	local07, fp
1ebac     03 2A 46 F5 | 	or	local07, #3
1ebb0     A7 2A 42 FC | 	wrbyte	local07, fp
1ebb4     10 4E 85 F1 | 	sub	fp, #16
1ebb8                 | ' 				cf |=  0x01  |  0x02 ;
1ebb8                 | ' 				break;
1ebb8     B4 02 90 FD | 	jmp	#LR__3456
1ebbc                 | LR__3444
1ebbc     28 4E 05 F1 | 	add	fp, #40
1ebc0     A7 2A 02 FB | 	rdlong	local07, fp
1ebc4     04 4E 05 F1 | 	add	fp, #4
1ebc8     A7 1E 02 FB | 	rdlong	local01, fp
1ebcc     2C 4E 85 F1 | 	sub	fp, #44
1ebd0     0F 2B 0A F2 | 	cmp	local07, local01 wz
1ebd4     10 4E 05 51 |  if_ne	add	fp, #16
1ebd8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1ebdc     03 2A 46 55 |  if_ne	or	local07, #3
1ebe0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1ebe4     10 4E 85 51 |  if_ne	sub	fp, #16
1ebe8     28 4E 05 F1 | 	add	fp, #40
1ebec     A7 2A 02 FB | 	rdlong	local07, fp
1ebf0     04 4E 05 F1 | 	add	fp, #4
1ebf4     A7 20 02 FB | 	rdlong	local02, fp
1ebf8     2C 4E 85 F1 | 	sub	fp, #44
1ebfc     10 2B 1A F2 | 	cmp	local07, local02 wcz
1ec00     6C 02 90 1D |  if_a	jmp	#LR__3456
1ec04     2C 4E 05 F1 | 	add	fp, #44
1ec08     A7 2A 02 FB | 	rdlong	local07, fp
1ec0c     04 4E 85 F1 | 	sub	fp, #4
1ec10     A7 2A 62 FC | 	wrlong	local07, fp
1ec14     08 4E 85 F1 | 	sub	fp, #8
1ec18     A7 10 68 FC | 	wrlong	#8, fp
1ec1c     04 4E 05 F1 | 	add	fp, #4
1ec20     A7 16 68 FC | 	wrlong	#11, fp
1ec24     18 4E 85 F1 | 	sub	fp, #24
1ec28     A7 32 C2 FA | 	rdbyte	local11, fp
1ec2c     19 2B E2 F8 | 	getbyte	local07, local11, #0
1ec30     02 2A 66 F0 | 	shl	local07, #2
1ec34     A7 2A 42 FC | 	wrbyte	local07, fp
1ec38     0C 4E 85 F1 | 	sub	fp, #12
1ec3c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1ec3c                 | ' 			continue;
1ec3c     80 FE 9F FD | 	jmp	#LR__3440
1ec40                 | LR__3445
1ec40     14 4E 05 F1 | 	add	fp, #20
1ec44     A7 2A E2 FA | 	rdword	local07, fp
1ec48     14 4E 85 F1 | 	sub	fp, #20
1ec4c     80 2A 16 F2 | 	cmp	local07, #128 wc
1ec50     6C 00 90 CD |  if_b	jmp	#LR__3447
1ec54     10 4E 05 F1 | 	add	fp, #16
1ec58     A7 2A C2 FA | 	rdbyte	local07, fp
1ec5c     02 2A 46 F5 | 	or	local07, #2
1ec60     A7 2A 42 FC | 	wrbyte	local07, fp
1ec64     04 4E 05 F1 | 	add	fp, #4
1ec68     A7 12 E2 FA | 	rdword	arg01, fp
1ec6c     14 4E 85 F1 | 	sub	fp, #20
1ec70     01 00 00 FF 
1ec74     52 15 06 F6 | 	mov	arg02, ##850
1ec78     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1ec7c     14 4E 05 F1 | 	add	fp, #20
1ec80     A7 FA 51 FC | 	wrword	result1, fp
1ec84     A7 2A E2 FA | 	rdword	local07, fp
1ec88     14 4E 85 F1 | 	sub	fp, #20
1ec8c     80 2A CE F7 | 	test	local07, #128 wz
1ec90     2C 00 90 AD |  if_e	jmp	#LR__3446
1ec94     14 4E 05 F1 | 	add	fp, #20
1ec98     A7 20 E2 FA | 	rdword	local02, fp
1ec9c     7F 20 06 F5 | 	and	local02, #127
1eca0     01 00 00 FF 
1eca4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1eca8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1ecac     10 2B C2 FA | 	rdbyte	local07, local02
1ecb0     A7 2A 52 FC | 	wrword	local07, fp
1ecb4     14 4E 85 F1 | 	sub	fp, #20
1ecb8     01 00 00 FF 
1ecbc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1ecc0                 | LR__3446
1ecc0                 | LR__3447
1ecc0     14 4E 05 F1 | 	add	fp, #20
1ecc4     A7 2A E2 FA | 	rdword	local07, fp
1ecc8     14 4E 85 F1 | 	sub	fp, #20
1eccc     00 2B 16 F2 | 	cmp	local07, #256 wc
1ecd0     88 00 90 CD |  if_b	jmp	#LR__3449
1ecd4     24 4E 05 F1 | 	add	fp, #36
1ecd8     A7 2A 02 FB | 	rdlong	local07, fp
1ecdc     01 2A 86 F1 | 	sub	local07, #1
1ece0     04 4E 85 F1 | 	sub	fp, #4
1ece4     A7 20 02 FB | 	rdlong	local02, fp
1ece8     20 4E 85 F1 | 	sub	fp, #32
1ecec     15 21 12 F2 | 	cmp	local02, local07 wc
1ecf0     2C 00 90 CD |  if_b	jmp	#LR__3448
1ecf4     10 4E 05 F1 | 	add	fp, #16
1ecf8     A7 32 C2 FA | 	rdbyte	local11, fp
1ecfc     19 2B E2 F8 | 	getbyte	local07, local11, #0
1ed00     03 2A 46 F5 | 	or	local07, #3
1ed04     A7 2A 42 FC | 	wrbyte	local07, fp
1ed08     14 4E 05 F1 | 	add	fp, #20
1ed0c     A7 2A 02 FB | 	rdlong	local07, fp
1ed10     04 4E 85 F1 | 	sub	fp, #4
1ed14     A7 2A 62 FC | 	wrlong	local07, fp
1ed18     20 4E 85 F1 | 	sub	fp, #32
1ed1c                 | ' 				cf |=  0x01  |  0x02 ;
1ed1c                 | ' 				i = ni; continue;
1ed1c     A0 FD 9F FD | 	jmp	#LR__3440
1ed20                 | LR__3448
1ed20     04 4E 05 F1 | 	add	fp, #4
1ed24     A7 2E 02 FB | 	rdlong	local09, fp
1ed28     1C 4E 05 F1 | 	add	fp, #28
1ed2c     A7 30 02 FB | 	rdlong	local10, fp
1ed30     18 25 02 F6 | 	mov	local04, local10
1ed34     01 24 06 F1 | 	add	local04, #1
1ed38     A7 24 62 FC | 	wrlong	local04, fp
1ed3c     20 2E 06 F1 | 	add	local09, #32
1ed40     17 31 02 F1 | 	add	local10, local09
1ed44     0C 4E 85 F1 | 	sub	fp, #12
1ed48     A7 22 E2 FA | 	rdword	local03, fp
1ed4c     14 4E 85 F1 | 	sub	fp, #20
1ed50     08 22 46 F0 | 	shr	local03, #8
1ed54     18 23 42 FC | 	wrbyte	local03, local10
1ed58     D4 00 90 FD | 	jmp	#LR__3455
1ed5c                 | LR__3449
1ed5c     14 4E 05 F1 | 	add	fp, #20
1ed60     A7 2A EA FA | 	rdword	local07, fp wz
1ed64     14 4E 85 F1 | 	sub	fp, #20
1ed68     20 00 90 AD |  if_e	jmp	#LR__3450
1ed6c     23 01 00 FF 
1ed70     F9 12 06 F6 | 	mov	arg01, ##@LR__4083
1ed74     14 4E 05 F1 | 	add	fp, #20
1ed78     A7 14 E2 FA | 	rdword	arg02, fp
1ed7c     14 4E 85 F1 | 	sub	fp, #20
1ed80     48 CB BF FD | 	call	#_fatfs_cc_strchr
1ed84     00 FA 0D F2 | 	cmp	result1, #0 wz
1ed88     20 00 90 AD |  if_e	jmp	#LR__3451
1ed8c                 | LR__3450
1ed8c     14 4E 05 F1 | 	add	fp, #20
1ed90     A7 BE 58 FC | 	wrword	#95, fp
1ed94     04 4E 85 F1 | 	sub	fp, #4
1ed98     A7 2A C2 FA | 	rdbyte	local07, fp
1ed9c     03 2A 46 F5 | 	or	local07, #3
1eda0     A7 2A 42 FC | 	wrbyte	local07, fp
1eda4     10 4E 85 F1 | 	sub	fp, #16
1eda8     84 00 90 FD | 	jmp	#LR__3454
1edac                 | LR__3451
1edac     14 4E 05 F1 | 	add	fp, #20
1edb0     A7 2A E2 FA | 	rdword	local07, fp
1edb4     14 4E 85 F1 | 	sub	fp, #20
1edb8     41 2A 16 F2 | 	cmp	local07, #65 wc
1edbc     24 00 90 CD |  if_b	jmp	#LR__3452
1edc0     14 4E 05 F1 | 	add	fp, #20
1edc4     A7 1E E2 FA | 	rdword	local01, fp
1edc8     14 4E 85 F1 | 	sub	fp, #20
1edcc     5B 1E 16 F2 | 	cmp	local01, #91 wc
1edd0     0C 4E 05 C1 |  if_b	add	fp, #12
1edd4     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1edd8     02 2A 46 C5 |  if_b	or	local07, #2
1eddc     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1ede0     0C 4E 85 C1 |  if_b	sub	fp, #12
1ede4                 | LR__3452
1ede4     14 4E 05 F1 | 	add	fp, #20
1ede8     A7 2A E2 FA | 	rdword	local07, fp
1edec     14 4E 85 F1 | 	sub	fp, #20
1edf0     61 2A 16 F2 | 	cmp	local07, #97 wc
1edf4     38 00 90 CD |  if_b	jmp	#LR__3453
1edf8     14 4E 05 F1 | 	add	fp, #20
1edfc     A7 1E E2 FA | 	rdword	local01, fp
1ee00     14 4E 85 F1 | 	sub	fp, #20
1ee04     7B 1E 16 F2 | 	cmp	local01, #123 wc
1ee08     24 00 90 3D |  if_ae	jmp	#LR__3453
1ee0c     0C 4E 05 F1 | 	add	fp, #12
1ee10     A7 2A C2 FA | 	rdbyte	local07, fp
1ee14     01 2A 46 F5 | 	or	local07, #1
1ee18     A7 2A 42 FC | 	wrbyte	local07, fp
1ee1c     08 4E 05 F1 | 	add	fp, #8
1ee20     A7 2A E2 FA | 	rdword	local07, fp
1ee24     20 2A 86 F1 | 	sub	local07, #32
1ee28     A7 2A 52 FC | 	wrword	local07, fp
1ee2c     14 4E 85 F1 | 	sub	fp, #20
1ee30                 | LR__3453
1ee30                 | LR__3454
1ee30                 | LR__3455
1ee30     04 4E 05 F1 | 	add	fp, #4
1ee34     A7 32 02 FB | 	rdlong	local11, fp
1ee38     19 2F 02 F6 | 	mov	local09, local11
1ee3c     1C 4E 05 F1 | 	add	fp, #28
1ee40     A7 20 02 FB | 	rdlong	local02, fp
1ee44     10 25 02 F6 | 	mov	local04, local02
1ee48     01 24 06 F1 | 	add	local04, #1
1ee4c     A7 24 62 FC | 	wrlong	local04, fp
1ee50     10 31 02 F6 | 	mov	local10, local02
1ee54     20 2E 06 F1 | 	add	local09, #32
1ee58     17 31 02 F1 | 	add	local10, local09
1ee5c     0C 4E 85 F1 | 	sub	fp, #12
1ee60     A7 22 E2 FA | 	rdword	local03, fp
1ee64     14 4E 85 F1 | 	sub	fp, #20
1ee68     18 23 42 FC | 	wrbyte	local03, local10
1ee6c     50 FC 9F FD | 	jmp	#LR__3440
1ee70                 | LR__3456
1ee70     04 4E 05 F1 | 	add	fp, #4
1ee74     A7 32 02 FB | 	rdlong	local11, fp
1ee78     04 4E 85 F1 | 	sub	fp, #4
1ee7c     20 32 06 F1 | 	add	local11, #32
1ee80     19 2B C2 FA | 	rdbyte	local07, local11
1ee84     E5 2A 0E F2 | 	cmp	local07, #229 wz
1ee88     04 4E 05 A1 |  if_e	add	fp, #4
1ee8c     A7 2A 02 AB |  if_e	rdlong	local07, fp
1ee90     04 4E 85 A1 |  if_e	sub	fp, #4
1ee94     20 2A 06 A1 |  if_e	add	local07, #32
1ee98     15 0B 48 AC |  if_e	wrbyte	#5, local07
1ee9c     24 4E 05 F1 | 	add	fp, #36
1eea0     A7 2A 02 FB | 	rdlong	local07, fp
1eea4     24 4E 85 F1 | 	sub	fp, #36
1eea8     08 2A 0E F2 | 	cmp	local07, #8 wz
1eeac     0C 4E 05 A1 |  if_e	add	fp, #12
1eeb0     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1eeb4     02 2A 66 A0 |  if_e	shl	local07, #2
1eeb8     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1eebc     0C 4E 85 A1 |  if_e	sub	fp, #12
1eec0     0C 4E 05 F1 | 	add	fp, #12
1eec4     A7 2A C2 FA | 	rdbyte	local07, fp
1eec8     0C 4E 85 F1 | 	sub	fp, #12
1eecc     0C 2A 06 F5 | 	and	local07, #12
1eed0     0C 2A 0E F2 | 	cmp	local07, #12 wz
1eed4     18 00 90 AD |  if_e	jmp	#LR__3457
1eed8     0C 4E 05 F1 | 	add	fp, #12
1eedc     A7 1E C2 FA | 	rdbyte	local01, fp
1eee0     0C 4E 85 F1 | 	sub	fp, #12
1eee4     03 1E 06 F5 | 	and	local01, #3
1eee8     03 1E 0E F2 | 	cmp	local01, #3 wz
1eeec     14 00 90 5D |  if_ne	jmp	#LR__3458
1eef0                 | LR__3457
1eef0     10 4E 05 F1 | 	add	fp, #16
1eef4     A7 2A C2 FA | 	rdbyte	local07, fp
1eef8     02 2A 46 F5 | 	or	local07, #2
1eefc     A7 2A 42 FC | 	wrbyte	local07, fp
1ef00     10 4E 85 F1 | 	sub	fp, #16
1ef04                 | LR__3458
1ef04     10 4E 05 F1 | 	add	fp, #16
1ef08     A7 2A C2 FA | 	rdbyte	local07, fp
1ef0c     10 4E 85 F1 | 	sub	fp, #16
1ef10     02 2A CE F7 | 	test	local07, #2 wz
1ef14     48 00 90 5D |  if_ne	jmp	#LR__3459
1ef18     0C 4E 05 F1 | 	add	fp, #12
1ef1c     A7 2A C2 FA | 	rdbyte	local07, fp
1ef20     0C 4E 85 F1 | 	sub	fp, #12
1ef24     01 2A CE F7 | 	test	local07, #1 wz
1ef28     10 4E 05 51 |  if_ne	add	fp, #16
1ef2c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1ef30     10 2A 46 55 |  if_ne	or	local07, #16
1ef34     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1ef38     10 4E 85 51 |  if_ne	sub	fp, #16
1ef3c     0C 4E 05 F1 | 	add	fp, #12
1ef40     A7 2A C2 FA | 	rdbyte	local07, fp
1ef44     0C 4E 85 F1 | 	sub	fp, #12
1ef48     04 2A CE F7 | 	test	local07, #4 wz
1ef4c     10 4E 05 51 |  if_ne	add	fp, #16
1ef50     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1ef54     08 2A 46 55 |  if_ne	or	local07, #8
1ef58     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1ef5c     10 4E 85 51 |  if_ne	sub	fp, #16
1ef60                 | LR__3459
1ef60     04 4E 05 F1 | 	add	fp, #4
1ef64     A7 2A 02 FB | 	rdlong	local07, fp
1ef68     0C 4E 05 F1 | 	add	fp, #12
1ef6c     A7 1E C2 FA | 	rdbyte	local01, fp
1ef70     10 4E 85 F1 | 	sub	fp, #16
1ef74     2B 2A 06 F1 | 	add	local07, #43
1ef78     15 1F 42 FC | 	wrbyte	local01, local07
1ef7c                 | ' 	}
1ef7c                 | ' 
1ef7c                 | ' 	dp->fn[ 11 ] = cf;
1ef7c                 | ' 
1ef7c                 | ' 	return FR_OK;
1ef7c     00 FA 05 F6 | 	mov	result1, #0
1ef80                 | LR__3460
1ef80     A7 F0 03 F6 | 	mov	ptra, fp
1ef84     B2 00 A0 FD | 	call	#popregs_
1ef88                 | _fatfs_cc_create_name_ret
1ef88     2D 00 64 FD | 	ret
1ef8c                 | 
1ef8c                 | _fatfs_cc_follow_path
1ef8c     02 4A 05 F6 | 	mov	COUNT_, #2
1ef90     A8 00 A0 FD | 	call	#pushregs_
1ef94     18 F0 07 F1 | 	add	ptra, #24
1ef98     04 4E 05 F1 | 	add	fp, #4
1ef9c     A7 12 62 FC | 	wrlong	arg01, fp
1efa0     04 4E 05 F1 | 	add	fp, #4
1efa4     A7 14 62 FC | 	wrlong	arg02, fp
1efa8     04 4E 85 F1 | 	sub	fp, #4
1efac     A7 FA 01 FB | 	rdlong	result1, fp
1efb0     FD 1E 02 FB | 	rdlong	local01, result1
1efb4     10 4E 05 F1 | 	add	fp, #16
1efb8     A7 1E 62 FC | 	wrlong	local01, fp
1efbc     14 4E 85 F1 | 	sub	fp, #20
1efc0     97 24 48 FB | 	callpa	#(@LR__3472-@LR__3470)>>2,fcache_load_ptr_
1efc4                 | ' )
1efc4                 | ' {
1efc4                 | ' 	FRESULT res;
1efc4                 | ' 	BYTE ns;
1efc4                 | ' 	FATFS *fs = dp->obj.fs;
1efc4                 | ' #line 3034 "ff.c"
1efc4                 | ' 	{
1efc4                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1efc4                 | LR__3470
1efc4     08 4E 05 F1 | 	add	fp, #8
1efc8     A7 1E 02 FB | 	rdlong	local01, fp
1efcc     08 4E 85 F1 | 	sub	fp, #8
1efd0     0F 1F C2 FA | 	rdbyte	local01, local01
1efd4     2F 1E 0E F2 | 	cmp	local01, #47 wz
1efd8     18 00 90 AD |  if_e	jmp	#LR__3471
1efdc     08 4E 05 F1 | 	add	fp, #8
1efe0     A7 1E 02 FB | 	rdlong	local01, fp
1efe4     08 4E 85 F1 | 	sub	fp, #8
1efe8     0F 1F C2 FA | 	rdbyte	local01, local01
1efec     5C 1E 0E F2 | 	cmp	local01, #92 wz
1eff0     18 00 90 5D |  if_ne	jmp	#LR__3473
1eff4                 | LR__3471
1eff4     08 4E 05 F1 | 	add	fp, #8
1eff8     A7 1E 02 FB | 	rdlong	local01, fp
1effc     01 1E 06 F1 | 	add	local01, #1
1f000     A7 1E 62 FC | 	wrlong	local01, fp
1f004     08 4E 85 F1 | 	sub	fp, #8
1f008     B8 FF 9F FD | 	jmp	#LR__3470
1f00c                 | LR__3472
1f00c                 | LR__3473
1f00c     04 4E 05 F1 | 	add	fp, #4
1f010     A7 1E 02 FB | 	rdlong	local01, fp
1f014     08 1E 06 F1 | 	add	local01, #8
1f018     0F 01 68 FC | 	wrlong	#0, local01
1f01c     04 4E 05 F1 | 	add	fp, #4
1f020     A7 1E 02 FB | 	rdlong	local01, fp
1f024     08 4E 85 F1 | 	sub	fp, #8
1f028     0F 1F C2 FA | 	rdbyte	local01, local01
1f02c     20 1E 16 F2 | 	cmp	local01, #32 wc
1f030     30 00 90 3D |  if_ae	jmp	#LR__3474
1f034     04 4E 05 F1 | 	add	fp, #4
1f038     A7 1E 02 FB | 	rdlong	local01, fp
1f03c     2B 1E 06 F1 | 	add	local01, #43
1f040     0F 01 49 FC | 	wrbyte	#128, local01
1f044     A7 12 02 FB | 	rdlong	arg01, fp
1f048     04 4E 85 F1 | 	sub	fp, #4
1f04c     00 14 06 F6 | 	mov	arg02, #0
1f050     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1f054     0C 4E 05 F1 | 	add	fp, #12
1f058     A7 FA 61 FC | 	wrlong	result1, fp
1f05c     0C 4E 85 F1 | 	sub	fp, #12
1f060     1C 01 90 FD | 	jmp	#LR__3478
1f064                 | LR__3474
1f064                 | ' 		for (;;) {
1f064                 | LR__3475
1f064     04 4E 05 F1 | 	add	fp, #4
1f068     A7 12 02 FB | 	rdlong	arg01, fp
1f06c     04 4E 05 F1 | 	add	fp, #4
1f070     A7 14 02 F6 | 	mov	arg02, fp
1f074     08 4E 85 F1 | 	sub	fp, #8
1f078     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1f07c     0C 4E 05 F1 | 	add	fp, #12
1f080     A7 FA 61 FC | 	wrlong	result1, fp
1f084     00 FA 4D F2 | 	cmps	result1, #0 wz
1f088     0C 4E 85 F1 | 	sub	fp, #12
1f08c     F0 00 90 5D |  if_ne	jmp	#LR__3477
1f090     04 4E 05 F1 | 	add	fp, #4
1f094     A7 12 02 FB | 	rdlong	arg01, fp
1f098     04 4E 85 F1 | 	sub	fp, #4
1f09c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1f0a0     0C 4E 05 F1 | 	add	fp, #12
1f0a4     A7 FA 61 FC | 	wrlong	result1, fp
1f0a8     08 4E 85 F1 | 	sub	fp, #8
1f0ac     A7 1E 02 FB | 	rdlong	local01, fp
1f0b0     2B 1E 06 F1 | 	add	local01, #43
1f0b4     0F 1F C2 FA | 	rdbyte	local01, local01
1f0b8     0C 4E 05 F1 | 	add	fp, #12
1f0bc     A7 1E 42 FC | 	wrbyte	local01, fp
1f0c0     04 4E 85 F1 | 	sub	fp, #4
1f0c4     A7 1E 0A FB | 	rdlong	local01, fp wz
1f0c8     0C 4E 85 F1 | 	sub	fp, #12
1f0cc     34 00 90 AD |  if_e	jmp	#LR__3476
1f0d0     0C 4E 05 F1 | 	add	fp, #12
1f0d4     A7 1E 02 FB | 	rdlong	local01, fp
1f0d8     0C 4E 85 F1 | 	sub	fp, #12
1f0dc     04 1E 0E F2 | 	cmp	local01, #4 wz
1f0e0     9C 00 90 5D |  if_ne	jmp	#LR__3477
1f0e4     10 4E 05 F1 | 	add	fp, #16
1f0e8     A7 1E C2 FA | 	rdbyte	local01, fp
1f0ec     10 4E 85 F1 | 	sub	fp, #16
1f0f0     04 1E CE F7 | 	test	local01, #4 wz
1f0f4     0C 4E 05 A1 |  if_e	add	fp, #12
1f0f8     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f0fc     0C 4E 85 A1 |  if_e	sub	fp, #12
1f100                 | ' 					}
1f100                 | ' 				}
1f100                 | ' 				break;
1f100     7C 00 90 FD | 	jmp	#LR__3477
1f104                 | LR__3476
1f104     10 4E 05 F1 | 	add	fp, #16
1f108     A7 1E C2 FA | 	rdbyte	local01, fp
1f10c     10 4E 85 F1 | 	sub	fp, #16
1f110     04 1E CE F7 | 	test	local01, #4 wz
1f114     68 00 90 5D |  if_ne	jmp	#LR__3477
1f118     04 4E 05 F1 | 	add	fp, #4
1f11c     A7 1E 02 FB | 	rdlong	local01, fp
1f120     04 4E 85 F1 | 	sub	fp, #4
1f124     06 1E 06 F1 | 	add	local01, #6
1f128     0F 1F C2 FA | 	rdbyte	local01, local01
1f12c     10 1E CE F7 | 	test	local01, #16 wz
1f130     0C 4E 05 A1 |  if_e	add	fp, #12
1f134     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f138     0C 4E 85 A1 |  if_e	sub	fp, #12
1f13c                 | ' 				res = FR_NO_PATH; break;
1f13c     40 00 90 AD |  if_e	jmp	#LR__3477
1f140     04 4E 05 F1 | 	add	fp, #4
1f144     A7 20 02 FB | 	rdlong	local02, fp
1f148     10 1F 02 F6 | 	mov	local01, local02
1f14c     10 4E 05 F1 | 	add	fp, #16
1f150     A7 14 02 FB | 	rdlong	arg02, fp
1f154     0A 13 02 F6 | 	mov	arg01, arg02
1f158     34 14 06 F1 | 	add	arg02, #52
1f15c     14 4E 85 F1 | 	sub	fp, #20
1f160     10 20 06 F1 | 	add	local02, #16
1f164     10 21 02 FB | 	rdlong	local02, local02
1f168     FF 21 06 F5 | 	and	local02, #511
1f16c     10 15 02 F1 | 	add	arg02, local02
1f170     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1f174     08 1E 06 F1 | 	add	local01, #8
1f178     0F FB 61 FC | 	wrlong	result1, local01
1f17c     E4 FE 9F FD | 	jmp	#LR__3475
1f180                 | LR__3477
1f180                 | LR__3478
1f180                 | ' 			}
1f180                 | ' #line 3090 "ff.c"
1f180                 | ' 			{
1f180                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1f180                 | ' 			}
1f180                 | ' 		}
1f180                 | ' 	}
1f180                 | ' 
1f180                 | ' 	return res;
1f180     0C 4E 05 F1 | 	add	fp, #12
1f184     A7 FA 01 FB | 	rdlong	result1, fp
1f188     0C 4E 85 F1 | 	sub	fp, #12
1f18c     A7 F0 03 F6 | 	mov	ptra, fp
1f190     B2 00 A0 FD | 	call	#popregs_
1f194                 | _fatfs_cc_follow_path_ret
1f194     2D 00 64 FD | 	ret
1f198                 | 
1f198                 | _fatfs_cc_get_ldnumber
1f198     01 00 66 F6 | 	neg	_var01, #1
1f19c     09 03 0A FB | 	rdlong	_var02, arg01 wz
1f1a0     01 05 02 F6 | 	mov	_var03, _var02
1f1a4     01 FA 65 A6 |  if_e	neg	result1, #1
1f1a8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1f1ac     97 10 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
1f1b0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1f1b0                 | LR__3480
1f1b0     02 07 C2 FA | 	rdbyte	_var04, _var03
1f1b4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1f1b8     20 FA 15 F2 | 	cmp	result1, #32 wc
1f1bc     01 04 06 F1 | 	add	_var03, #1
1f1c0     03 09 02 36 |  if_ae	mov	_var05, _var04
1f1c4     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1f1c8     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1f1cc     E0 FF 9F 1D |  if_a	jmp	#LR__3480
1f1d0                 | LR__3481
1f1d0     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1f1d4     3A 06 0E F2 | 	cmp	_var04, #58 wz
1f1d8     40 00 90 5D |  if_ne	jmp	#LR__3483
1f1dc     01 0A 06 F6 | 	mov	_var06, #1
1f1e0     01 09 C2 FA | 	rdbyte	_var05, _var02
1f1e4     30 08 16 F2 | 	cmp	_var05, #48 wc
1f1e8     1C 00 90 CD |  if_b	jmp	#LR__3482
1f1ec     01 09 C2 FA | 	rdbyte	_var05, _var02
1f1f0     3A 08 16 F2 | 	cmp	_var05, #58 wc
1f1f4     01 0D 02 C6 |  if_b	mov	_var07, _var02
1f1f8     02 0C 06 C1 |  if_b	add	_var07, #2
1f1fc     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1f200     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1f204     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1f208                 | LR__3482
1f208     01 0A 56 F2 | 	cmps	_var06, #1 wc
1f20c     05 01 02 C6 |  if_b	mov	_var01, _var06
1f210     09 05 62 CC |  if_b	wrlong	_var03, arg01
1f214                 | ' 			vol = i;
1f214                 | ' 			*path = tt;
1f214                 | ' 		}
1f214                 | ' 		return vol;
1f214     00 FB 01 F6 | 	mov	result1, _var01
1f218     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1f21c                 | LR__3483
1f21c                 | ' 	}
1f21c                 | ' #line 3170 "ff.c"
1f21c                 | ' 	vol = 0;
1f21c                 | ' 
1f21c                 | ' 	return vol;
1f21c     00 FA 05 F6 | 	mov	result1, #0
1f220                 | _fatfs_cc_get_ldnumber_ret
1f220     2D 00 64 FD | 	ret
1f224                 | 
1f224                 | _fatfs_cc_check_fs
1f224     04 4A 05 F6 | 	mov	COUNT_, #4
1f228     A8 00 A0 FD | 	call	#pushregs_
1f22c     09 1F 02 F6 | 	mov	local01, arg01
1f230     03 1E 06 F1 | 	add	local01, #3
1f234     0F 01 48 FC | 	wrbyte	#0, local01
1f238     2D 1E 06 F1 | 	add	local01, #45
1f23c     FF FF FF FF 
1f240     0F FF 6B FC | 	wrlong	##-1, local01
1f244     30 1E 86 F1 | 	sub	local01, #48
1f248     0F 13 02 F6 | 	mov	arg01, local01
1f24c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1f250     00 FA 0D F2 | 	cmp	result1, #0 wz
1f254     04 FA 05 56 |  if_ne	mov	result1, #4
1f258     94 01 90 5D |  if_ne	jmp	#LR__3494
1f25c     34 1E 06 F1 | 	add	local01, #52
1f260     0F 13 02 F6 | 	mov	arg01, local01
1f264     FE 13 06 F1 | 	add	arg01, #510
1f268                 | ' {
1f268                 | ' 
1f268                 | ' 	return *((WORD*)ptr);
1f268     09 21 E2 FA | 	rdword	local02, arg01
1f26c     0F 23 C2 FA | 	rdbyte	local03, local01
1f270     34 1E 86 F1 | 	sub	local01, #52
1f274     11 25 E2 F8 | 	getbyte	local04, local03, #0
1f278     EB 24 0E F2 | 	cmp	local04, #235 wz
1f27c     11 17 02 56 |  if_ne	mov	arg03, local03
1f280     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1f284     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1f288     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1f28c     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1f290     44 01 90 5D |  if_ne	jmp	#LR__3493
1f294     10 25 32 F9 | 	getword	local04, local02, #0
1f298     55 00 00 FF 
1f29c     55 24 0E F2 | 	cmp	local04, ##43605 wz
1f2a0     2C 00 90 5D |  if_ne	jmp	#LR__3490
1f2a4     34 1E 06 F1 | 	add	local01, #52
1f2a8     0F 13 02 F6 | 	mov	arg01, local01
1f2ac     34 1E 86 F1 | 	sub	local01, #52
1f2b0     52 12 06 F1 | 	add	arg01, #82
1f2b4     23 01 00 FF 
1f2b8     00 15 06 F6 | 	mov	arg02, ##@LR__4084
1f2bc     08 16 06 F6 | 	mov	arg03, #8
1f2c0     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1f2c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f2c8                 | ' 			return 0;
1f2c8     00 FA 05 A6 |  if_e	mov	result1, #0
1f2cc     20 01 90 AD |  if_e	jmp	#LR__3494
1f2d0                 | LR__3490
1f2d0     34 1E 06 F1 | 	add	local01, #52
1f2d4     0F 13 02 F6 | 	mov	arg01, local01
1f2d8     0B 12 06 F1 | 	add	arg01, #11
1f2dc                 | ' {
1f2dc                 | ' 
1f2dc                 | ' 	return *((WORD*)ptr);
1f2dc     09 FB E1 FA | 	rdword	result1, arg01
1f2e0     0D 1E 06 F1 | 	add	local01, #13
1f2e4     0F 23 C2 FA | 	rdbyte	local03, local01
1f2e8     41 1E 86 F1 | 	sub	local01, #65
1f2ec     FD 24 32 F9 | 	getword	local04, result1, #0
1f2f0     FD 14 32 F9 | 	getword	arg02, result1, #0
1f2f4     01 14 86 F1 | 	sub	arg02, #1
1f2f8     0A 25 CA F7 | 	test	local04, arg02 wz
1f2fc     D8 00 90 5D |  if_ne	jmp	#LR__3492
1f300     FD 14 32 F9 | 	getword	arg02, result1, #0
1f304     01 00 00 FF 
1f308     00 14 16 F2 | 	cmp	arg02, ##512 wc
1f30c     C8 00 90 CD |  if_b	jmp	#LR__3492
1f310     FD 14 32 F9 | 	getword	arg02, result1, #0
1f314     01 00 00 FF 
1f318     01 14 16 F2 | 	cmp	arg02, ##513 wc
1f31c     B8 00 90 3D |  if_ae	jmp	#LR__3492
1f320     11 13 02 F6 | 	mov	arg01, local03
1f324     07 12 4E F7 | 	zerox	arg01, #7 wz
1f328     AC 00 90 AD |  if_e	jmp	#LR__3492
1f32c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1f330     11 23 E2 F8 | 	getbyte	local03, local03, #0
1f334     01 22 86 F1 | 	sub	local03, #1
1f338     11 13 CA F7 | 	test	arg01, local03 wz
1f33c     98 00 90 5D |  if_ne	jmp	#LR__3492
1f340     34 1E 06 F1 | 	add	local01, #52
1f344     0F 13 02 F6 | 	mov	arg01, local01
1f348     34 1E 86 F1 | 	sub	local01, #52
1f34c     0E 12 06 F1 | 	add	arg01, #14
1f350                 | ' {
1f350                 | ' 
1f350                 | ' 	return *((WORD*)ptr);
1f350     09 FB E9 FA | 	rdword	result1, arg01 wz
1f354     80 00 90 AD |  if_e	jmp	#LR__3492
1f358     44 1E 06 F1 | 	add	local01, #68
1f35c     0F 13 C2 FA | 	rdbyte	arg01, local01
1f360     44 1E 86 F1 | 	sub	local01, #68
1f364     01 12 86 F1 | 	sub	arg01, #1
1f368     02 12 16 F2 | 	cmp	arg01, #2 wc
1f36c     68 00 90 3D |  if_ae	jmp	#LR__3492
1f370     34 1E 06 F1 | 	add	local01, #52
1f374     0F 13 02 F6 | 	mov	arg01, local01
1f378     34 1E 86 F1 | 	sub	local01, #52
1f37c     11 12 06 F1 | 	add	arg01, #17
1f380                 | ' {
1f380                 | ' 
1f380                 | ' 	return *((WORD*)ptr);
1f380     09 FB E9 FA | 	rdword	result1, arg01 wz
1f384     50 00 90 AD |  if_e	jmp	#LR__3492
1f388     34 1E 06 F1 | 	add	local01, #52
1f38c     0F 13 02 F6 | 	mov	arg01, local01
1f390     34 1E 86 F1 | 	sub	local01, #52
1f394     13 12 06 F1 | 	add	arg01, #19
1f398                 | ' {
1f398                 | ' 
1f398                 | ' 	return *((WORD*)ptr);
1f398     09 FB E1 FA | 	rdword	result1, arg01
1f39c     FD 22 32 F9 | 	getword	local03, result1, #0
1f3a0     80 22 16 F2 | 	cmp	local03, #128 wc
1f3a4     20 00 90 3D |  if_ae	jmp	#LR__3491
1f3a8     34 1E 06 F1 | 	add	local01, #52
1f3ac     0F 13 02 F6 | 	mov	arg01, local01
1f3b0     34 1E 86 F1 | 	sub	local01, #52
1f3b4     20 12 06 F1 | 	add	arg01, #32
1f3b8                 | ' {
1f3b8                 | ' 
1f3b8                 | ' 	return *((DWORD*)ptr);
1f3b8     09 FB 01 FB | 	rdlong	result1, arg01
1f3bc     80 00 00 FF 
1f3c0     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1f3c4     10 00 90 CD |  if_b	jmp	#LR__3492
1f3c8                 | LR__3491
1f3c8     4A 1E 06 F1 | 	add	local01, #74
1f3cc                 | ' {
1f3cc                 | ' 
1f3cc                 | ' 	return *((WORD*)ptr);
1f3cc     0F FB E9 FA | 	rdword	result1, local01 wz
1f3d0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1f3d0                 | ' 			&& ld_word(fs->win +  14 ) != 0
1f3d0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1f3d0                 | ' 			&& ld_word(fs->win +  17 ) != 0
1f3d0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1f3d0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1f3d0                 | ' 				return 0;
1f3d0     00 FA 05 56 |  if_ne	mov	result1, #0
1f3d4     18 00 90 5D |  if_ne	jmp	#LR__3494
1f3d8                 | LR__3492
1f3d8                 | LR__3493
1f3d8                 | ' 		}
1f3d8                 | ' 	}
1f3d8                 | ' 	return sign == 0xAA55 ? 2 : 3;
1f3d8     10 23 32 F9 | 	getword	local03, local02, #0
1f3dc     55 00 00 FF 
1f3e0     55 22 0E F2 | 	cmp	local03, ##43605 wz
1f3e4     02 24 06 A6 |  if_e	mov	local04, #2
1f3e8     03 24 06 56 |  if_ne	mov	local04, #3
1f3ec     12 FB 01 F6 | 	mov	result1, local04
1f3f0                 | LR__3494
1f3f0     A7 F0 03 F6 | 	mov	ptra, fp
1f3f4     B2 00 A0 FD | 	call	#popregs_
1f3f8                 | _fatfs_cc_check_fs_ret
1f3f8     2D 00 64 FD | 	ret
1f3fc                 | 
1f3fc                 | _fatfs_cc_find_volume
1f3fc     05 4A 05 F6 | 	mov	COUNT_, #5
1f400     A8 00 A0 FD | 	call	#pushregs_
1f404     24 F0 07 F1 | 	add	ptra, #36
1f408     09 1F 02 F6 | 	mov	local01, arg01
1f40c     0A 21 02 F6 | 	mov	local02, arg02
1f410     0F 13 02 F6 | 	mov	arg01, local01
1f414     00 14 06 F6 | 	mov	arg02, #0
1f418     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1f41c     02 FA 0D F2 | 	cmp	result1, #2 wz
1f420     0C 00 90 AD |  if_e	jmp	#LR__3500
1f424     03 FA 15 F2 | 	cmp	result1, #3 wc
1f428     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f42c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3508
1f430                 | LR__3500
1f430                 | ' 	for (i = 0; i < 4; i++) {
1f430     00 22 06 F6 | 	mov	local03, #0
1f434     97 26 48 FB | 	callpa	#(@LR__3502-@LR__3501)>>2,fcache_load_ptr_
1f438                 | LR__3501
1f438     04 22 16 F2 | 	cmp	local03, #4 wc
1f43c     44 00 90 3D |  if_ae	jmp	#LR__3503
1f440     11 25 02 F6 | 	mov	local04, local03
1f444     02 24 66 F0 | 	shl	local04, #2
1f448     14 4E 05 F1 | 	add	fp, #20
1f44c     A7 24 02 F1 | 	add	local04, fp
1f450     34 1E 06 F1 | 	add	local01, #52
1f454     0F 13 02 F6 | 	mov	arg01, local01
1f458     34 1E 86 F1 | 	sub	local01, #52
1f45c     BE 13 06 F1 | 	add	arg01, #446
1f460     11 15 02 F6 | 	mov	arg02, local03
1f464     04 14 66 F0 | 	shl	arg02, #4
1f468     0A 13 02 F1 | 	add	arg01, arg02
1f46c     08 12 06 F1 | 	add	arg01, #8
1f470                 | ' {
1f470                 | ' 
1f470                 | ' 	return *((DWORD*)ptr);
1f470     09 FB 01 FB | 	rdlong	result1, arg01
1f474     14 4E 85 F1 | 	sub	fp, #20
1f478     12 FB 61 FC | 	wrlong	result1, local04
1f47c     01 22 06 F1 | 	add	local03, #1
1f480     B4 FF 9F FD | 	jmp	#LR__3501
1f484                 | LR__3502
1f484                 | LR__3503
1f484     00 20 0E F2 | 	cmp	local02, #0 wz
1f488     10 25 02 56 |  if_ne	mov	local04, local02
1f48c     01 24 86 51 |  if_ne	sub	local04, #1
1f490     00 24 06 A6 |  if_e	mov	local04, #0
1f494     12 23 02 F6 | 	mov	local03, local04
1f498                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1f498                 | ' 	}
1f498                 | ' 	i = part ? part - 1 : 0;
1f498                 | ' 	do {
1f498                 | LR__3504
1f498     11 25 02 F6 | 	mov	local04, local03
1f49c     02 24 66 F0 | 	shl	local04, #2
1f4a0     14 4E 05 F1 | 	add	fp, #20
1f4a4     A7 24 02 F1 | 	add	local04, fp
1f4a8     12 25 0A FB | 	rdlong	local04, local04 wz
1f4ac     14 4E 85 F1 | 	sub	fp, #20
1f4b0     28 00 90 AD |  if_e	jmp	#LR__3505
1f4b4     11 25 02 F6 | 	mov	local04, local03
1f4b8     02 24 66 F0 | 	shl	local04, #2
1f4bc     14 4E 05 F1 | 	add	fp, #20
1f4c0     A7 24 02 F1 | 	add	local04, fp
1f4c4     12 15 02 FB | 	rdlong	arg02, local04
1f4c8     0F 13 02 F6 | 	mov	arg01, local01
1f4cc     14 4E 85 F1 | 	sub	fp, #20
1f4d0     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1f4d4     FD 24 02 F6 | 	mov	local04, result1
1f4d8     04 00 90 FD | 	jmp	#LR__3506
1f4dc                 | LR__3505
1f4dc     03 24 06 F6 | 	mov	local04, #3
1f4e0                 | LR__3506
1f4e0     12 27 02 F6 | 	mov	local05, local04
1f4e4     00 20 0E F2 | 	cmp	local02, #0 wz
1f4e8     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1f4ec     0C 00 90 8D |  if_c_and_z	jmp	#LR__3507
1f4f0     01 22 06 A1 |  if_e	add	local03, #1
1f4f4     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1f4f8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3504
1f4fc                 | LR__3507
1f4fc                 | ' 	return fmt;
1f4fc     13 FB 01 F6 | 	mov	result1, local05
1f500                 | LR__3508
1f500     A7 F0 03 F6 | 	mov	ptra, fp
1f504     B2 00 A0 FD | 	call	#popregs_
1f508                 | _fatfs_cc_find_volume_ret
1f508     2D 00 64 FD | 	ret
1f50c                 | 
1f50c                 | _fatfs_cc_mount_volume
1f50c     0B 4A 05 F6 | 	mov	COUNT_, #11
1f510     A8 00 A0 FD | 	call	#pushregs_
1f514     0A 1F 02 F6 | 	mov	local01, arg02
1f518     0B 21 02 F6 | 	mov	local02, arg03
1f51c     0F 01 68 FC | 	wrlong	#0, local01
1f520     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1f524     FD 22 02 F6 | 	mov	local03, result1
1f528     00 22 56 F2 | 	cmps	local03, #0 wc
1f52c     0B FA 05 C6 |  if_b	mov	result1, #11
1f530     3C 05 90 CD |  if_b	jmp	#LR__3520
1f534     11 17 02 F6 | 	mov	arg03, local03
1f538     02 16 66 F0 | 	shl	arg03, #2
1f53c     F2 16 02 F1 | 	add	arg03, objptr
1f540     0B 25 0A FB | 	rdlong	local04, arg03 wz
1f544     0C FA 05 A6 |  if_e	mov	result1, #12
1f548     24 05 90 AD |  if_e	jmp	#LR__3520
1f54c     0F 25 62 FC | 	wrlong	local04, local01
1f550     10 21 E2 F8 | 	getbyte	local02, local02, #0
1f554     FE 20 06 F5 | 	and	local02, #254
1f558     12 17 CA FA | 	rdbyte	arg03, local04 wz
1f55c     4C 00 90 AD |  if_e	jmp	#LR__3511
1f560     01 24 06 F1 | 	add	local04, #1
1f564     12 13 CA FA | 	rdbyte	arg01, local04 wz
1f568     01 24 86 F1 | 	sub	local04, #1
1f56c     01 FA 05 56 |  if_ne	mov	result1, #1
1f570                 | ' 
1f570                 | ' 	return Stat;
1f570     01 00 00 AF 
1f574     20 E4 05 A1 |  if_e	add	objptr, ##544
1f578     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f57c     01 00 00 AF 
1f580     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f584     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1f588     01 16 CE F7 | 	test	arg03, #1 wz
1f58c     1C 00 90 5D |  if_ne	jmp	#LR__3510
1f590     00 20 0E F2 | 	cmp	local02, #0 wz
1f594     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1f598     04 FA CD 57 |  if_ne	test	result1, #4 wz
1f59c                 | ' 				return FR_WRITE_PROTECTED;
1f59c     0A FA 05 56 |  if_ne	mov	result1, #10
1f5a0     CC 04 90 5D |  if_ne	jmp	#LR__3520
1f5a4                 | ' 			}
1f5a4                 | ' 			return FR_OK;
1f5a4     00 FA 05 F6 | 	mov	result1, #0
1f5a8     C4 04 90 FD | 	jmp	#LR__3520
1f5ac                 | LR__3510
1f5ac                 | LR__3511
1f5ac     12 01 48 FC | 	wrbyte	#0, local04
1f5b0     01 24 06 F1 | 	add	local04, #1
1f5b4     12 23 42 FC | 	wrbyte	local03, local04
1f5b8     12 13 C2 FA | 	rdbyte	arg01, local04
1f5bc     01 24 86 F1 | 	sub	local04, #1
1f5c0     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1f5c4     FD 16 02 F6 | 	mov	arg03, result1
1f5c8     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1f5cc     01 26 CE F7 | 	test	local05, #1 wz
1f5d0                 | ' 		return FR_NOT_READY;
1f5d0     03 FA 05 56 |  if_ne	mov	result1, #3
1f5d4     98 04 90 5D |  if_ne	jmp	#LR__3520
1f5d8     00 20 0E F2 | 	cmp	local02, #0 wz
1f5dc     0B 27 02 56 |  if_ne	mov	local05, arg03
1f5e0     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1f5e4     04 26 CE 57 |  if_ne	test	local05, #4 wz
1f5e8                 | ' 		return FR_WRITE_PROTECTED;
1f5e8     0A FA 05 56 |  if_ne	mov	result1, #10
1f5ec     80 04 90 5D |  if_ne	jmp	#LR__3520
1f5f0     12 13 02 F6 | 	mov	arg01, local04
1f5f4     00 14 06 F6 | 	mov	arg02, #0
1f5f8     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1f5fc     FD 12 02 F6 | 	mov	arg01, result1
1f600     04 12 0E F2 | 	cmp	arg01, #4 wz
1f604     01 FA 05 A6 |  if_e	mov	result1, #1
1f608     64 04 90 AD |  if_e	jmp	#LR__3520
1f60c     02 12 16 F2 | 	cmp	arg01, #2 wc
1f610     0D FA 05 36 |  if_ae	mov	result1, #13
1f614     58 04 90 3D |  if_ae	jmp	#LR__3520
1f618     30 24 06 F1 | 	add	local04, #48
1f61c     12 29 02 FB | 	rdlong	local06, local04
1f620     04 24 06 F1 | 	add	local04, #4
1f624     12 13 02 F6 | 	mov	arg01, local04
1f628     34 24 86 F1 | 	sub	local04, #52
1f62c     0B 12 06 F1 | 	add	arg01, #11
1f630                 | ' {
1f630                 | ' 
1f630                 | ' 	return *((WORD*)ptr);
1f630     09 FB E1 FA | 	rdword	result1, arg01
1f634     01 00 00 FF 
1f638     00 FA 0D F2 | 	cmp	result1, ##512 wz
1f63c     0D FA 05 56 |  if_ne	mov	result1, #13
1f640     2C 04 90 5D |  if_ne	jmp	#LR__3520
1f644     34 24 06 F1 | 	add	local04, #52
1f648     12 13 02 F6 | 	mov	arg01, local04
1f64c     34 24 86 F1 | 	sub	local04, #52
1f650     16 12 06 F1 | 	add	arg01, #22
1f654                 | ' {
1f654                 | ' 
1f654                 | ' 	return *((WORD*)ptr);
1f654     09 FB E1 FA | 	rdword	result1, arg01
1f658     FD 2A 0A F6 | 	mov	local07, result1 wz
1f65c     18 00 90 5D |  if_ne	jmp	#LR__3512
1f660     34 24 06 F1 | 	add	local04, #52
1f664     12 13 02 F6 | 	mov	arg01, local04
1f668     34 24 86 F1 | 	sub	local04, #52
1f66c     24 12 06 F1 | 	add	arg01, #36
1f670                 | ' {
1f670                 | ' 
1f670                 | ' 	return *((DWORD*)ptr);
1f670     09 FB 01 FB | 	rdlong	result1, arg01
1f674     FD 2A 02 F6 | 	mov	local07, result1
1f678                 | LR__3512
1f678     1C 24 06 F1 | 	add	local04, #28
1f67c     12 2B 62 FC | 	wrlong	local07, local04
1f680     28 24 06 F1 | 	add	local04, #40
1f684     12 27 C2 FA | 	rdbyte	local05, local04
1f688     42 24 86 F1 | 	sub	local04, #66
1f68c     12 27 42 FC | 	wrbyte	local05, local04
1f690     12 27 C2 FA | 	rdbyte	local05, local04
1f694     02 24 86 F1 | 	sub	local04, #2
1f698     01 26 0E F2 | 	cmp	local05, #1 wz
1f69c     02 24 06 51 |  if_ne	add	local04, #2
1f6a0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1f6a4     02 24 86 51 |  if_ne	sub	local04, #2
1f6a8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1f6ac     0D FA 05 56 |  if_ne	mov	result1, #13
1f6b0     BC 03 90 5D |  if_ne	jmp	#LR__3520
1f6b4     02 24 06 F1 | 	add	local04, #2
1f6b8     12 27 C2 FA | 	rdbyte	local05, local04
1f6bc     13 2B 02 FD | 	qmul	local07, local05
1f6c0     3F 24 06 F1 | 	add	local04, #63
1f6c4     12 27 C2 FA | 	rdbyte	local05, local04
1f6c8     37 24 86 F1 | 	sub	local04, #55
1f6cc     12 27 52 FC | 	wrword	local05, local04
1f6d0     12 27 EA FA | 	rdword	local05, local04 wz
1f6d4     0A 24 86 F1 | 	sub	local04, #10
1f6d8     18 2A 62 FD | 	getqx	local07
1f6dc     20 00 90 AD |  if_e	jmp	#LR__3513
1f6e0     0A 24 06 F1 | 	add	local04, #10
1f6e4     12 27 E2 FA | 	rdword	local05, local04
1f6e8     13 23 32 F9 | 	getword	local03, local05, #0
1f6ec     0A 24 86 F1 | 	sub	local04, #10
1f6f0     13 27 32 F9 | 	getword	local05, local05, #0
1f6f4     01 26 86 F1 | 	sub	local05, #1
1f6f8     13 23 CA F7 | 	test	local03, local05 wz
1f6fc     08 00 90 AD |  if_e	jmp	#LR__3514
1f700                 | LR__3513
1f700     0D FA 05 F6 | 	mov	result1, #13
1f704     68 03 90 FD | 	jmp	#LR__3520
1f708                 | LR__3514
1f708     34 24 06 F1 | 	add	local04, #52
1f70c     12 13 02 F6 | 	mov	arg01, local04
1f710     11 12 06 F1 | 	add	arg01, #17
1f714                 | ' {
1f714                 | ' 
1f714                 | ' 	return *((WORD*)ptr);
1f714     09 FB E1 FA | 	rdword	result1, arg01
1f718     2C 24 86 F1 | 	sub	local04, #44
1f71c     12 FB 51 FC | 	wrword	result1, local04
1f720     12 27 E2 FA | 	rdword	local05, local04
1f724     08 24 86 F1 | 	sub	local04, #8
1f728     13 13 52 F6 | 	abs	arg01, local05 wc
1f72c     09 13 42 F8 | 	getnib	arg01, arg01, #0
1f730     09 13 8A F6 | 	negc	arg01, arg01 wz
1f734     0D FA 05 56 |  if_ne	mov	result1, #13
1f738     34 03 90 5D |  if_ne	jmp	#LR__3520
1f73c     34 24 06 F1 | 	add	local04, #52
1f740     12 13 02 F6 | 	mov	arg01, local04
1f744     34 24 86 F1 | 	sub	local04, #52
1f748     13 12 06 F1 | 	add	arg01, #19
1f74c                 | ' {
1f74c                 | ' 
1f74c                 | ' 	return *((WORD*)ptr);
1f74c     09 FB E1 FA | 	rdword	result1, arg01
1f750     FD 2C 0A F6 | 	mov	local08, result1 wz
1f754     34 24 06 A1 |  if_e	add	local04, #52
1f758     12 13 02 A6 |  if_e	mov	arg01, local04
1f75c     34 24 86 A1 |  if_e	sub	local04, #52
1f760     20 12 06 A1 |  if_e	add	arg01, #32
1f764                 | ' {
1f764                 | ' 
1f764                 | ' 	return *((DWORD*)ptr);
1f764     09 2D 02 AB |  if_e	rdlong	local08, arg01
1f768     34 24 06 F1 | 	add	local04, #52
1f76c     12 13 02 F6 | 	mov	arg01, local04
1f770     34 24 86 F1 | 	sub	local04, #52
1f774     0E 12 06 F1 | 	add	arg01, #14
1f778                 | ' {
1f778                 | ' 
1f778                 | ' 	return *((WORD*)ptr);
1f778     09 FB E1 FA | 	rdword	result1, arg01
1f77c     FD 12 02 F6 | 	mov	arg01, result1
1f780     09 27 02 F6 | 	mov	local05, arg01
1f784     0F 26 4E F7 | 	zerox	local05, #15 wz
1f788     0D FA 05 A6 |  if_e	mov	result1, #13
1f78c     E0 02 90 AD |  if_e	jmp	#LR__3520
1f790     09 2F 32 F9 | 	getword	local09, arg01, #0
1f794     15 2F 02 F1 | 	add	local09, local07
1f798     08 24 06 F1 | 	add	local04, #8
1f79c     12 27 E2 FA | 	rdword	local05, local04
1f7a0     08 24 86 F1 | 	sub	local04, #8
1f7a4     13 27 52 F6 | 	abs	local05, local05 wc
1f7a8     04 26 46 F0 | 	shr	local05, #4
1f7ac     13 2F 82 F3 | 	sumc	local09, local05
1f7b0     17 2D 12 F2 | 	cmp	local08, local09 wc
1f7b4     0D FA 05 C6 |  if_b	mov	result1, #13
1f7b8     B4 02 90 CD |  if_b	jmp	#LR__3520
1f7bc     17 2D 82 F1 | 	sub	local08, local09
1f7c0     0A 24 06 F1 | 	add	local04, #10
1f7c4     12 27 E2 FA | 	rdword	local05, local04
1f7c8     13 2D 12 FD | 	qdiv	local08, local05
1f7cc     0A 24 86 F1 | 	sub	local04, #10
1f7d0     18 26 62 FD | 	getqx	local05
1f7d4     00 26 0E F2 | 	cmp	local05, #0 wz
1f7d8     0D FA 05 A6 |  if_e	mov	result1, #13
1f7dc     90 02 90 AD |  if_e	jmp	#LR__3520
1f7e0     00 30 06 F6 | 	mov	local10, #0
1f7e4     FF FF 07 FF 
1f7e8     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1f7ec     03 30 06 C6 |  if_b	mov	local10, #3
1f7f0     7F 00 00 FF 
1f7f4     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1f7f8     02 30 06 C6 |  if_b	mov	local10, #2
1f7fc     07 00 00 FF 
1f800     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1f804     01 30 06 C6 |  if_b	mov	local10, #1
1f808     00 30 0E F2 | 	cmp	local10, #0 wz
1f80c     0D FA 05 A6 |  if_e	mov	result1, #13
1f810     5C 02 90 AD |  if_e	jmp	#LR__3520
1f814     02 26 06 F1 | 	add	local05, #2
1f818     18 24 06 F1 | 	add	local04, #24
1f81c     12 27 62 FC | 	wrlong	local05, local04
1f820     08 24 06 F1 | 	add	local04, #8
1f824     12 29 62 FC | 	wrlong	local06, local04
1f828     14 27 02 F6 | 	mov	local05, local06
1f82c     09 13 32 F9 | 	getword	arg01, arg01, #0
1f830     09 27 02 F1 | 	add	local05, arg01
1f834     04 24 06 F1 | 	add	local04, #4
1f838     12 27 62 FC | 	wrlong	local05, local04
1f83c     14 27 02 F6 | 	mov	local05, local06
1f840     17 27 02 F1 | 	add	local05, local09
1f844     08 24 06 F1 | 	add	local04, #8
1f848     12 27 62 FC | 	wrlong	local05, local04
1f84c     2C 24 86 F1 | 	sub	local04, #44
1f850     03 30 0E F2 | 	cmp	local10, #3 wz
1f854     5C 00 90 5D |  if_ne	jmp	#LR__3515
1f858     34 24 06 F1 | 	add	local04, #52
1f85c     12 13 02 F6 | 	mov	arg01, local04
1f860     34 24 86 F1 | 	sub	local04, #52
1f864     2A 12 06 F1 | 	add	arg01, #42
1f868                 | ' {
1f868                 | ' 
1f868                 | ' 	return *((WORD*)ptr);
1f868     09 FB E9 FA | 	rdword	result1, arg01 wz
1f86c     0D FA 05 56 |  if_ne	mov	result1, #13
1f870     FC 01 90 5D |  if_ne	jmp	#LR__3520
1f874     08 24 06 F1 | 	add	local04, #8
1f878     12 27 EA FA | 	rdword	local05, local04 wz
1f87c     08 24 86 F1 | 	sub	local04, #8
1f880     0D FA 05 56 |  if_ne	mov	result1, #13
1f884     E8 01 90 5D |  if_ne	jmp	#LR__3520
1f888     34 24 06 F1 | 	add	local04, #52
1f88c     12 13 02 F6 | 	mov	arg01, local04
1f890     2C 12 06 F1 | 	add	arg01, #44
1f894                 | ' {
1f894                 | ' 
1f894                 | ' 	return *((DWORD*)ptr);
1f894     09 FB 01 FB | 	rdlong	result1, arg01
1f898     0C 24 86 F1 | 	sub	local04, #12
1f89c     12 FB 61 FC | 	wrlong	result1, local04
1f8a0     10 24 86 F1 | 	sub	local04, #16
1f8a4     12 33 02 FB | 	rdlong	local11, local04
1f8a8     18 24 86 F1 | 	sub	local04, #24
1f8ac     02 32 66 F0 | 	shl	local11, #2
1f8b0     6C 00 90 FD | 	jmp	#LR__3517
1f8b4                 | LR__3515
1f8b4     08 24 06 F1 | 	add	local04, #8
1f8b8     12 27 EA FA | 	rdword	local05, local04 wz
1f8bc     08 24 86 F1 | 	sub	local04, #8
1f8c0     0D FA 05 A6 |  if_e	mov	result1, #13
1f8c4     A8 01 90 AD |  if_e	jmp	#LR__3520
1f8c8     24 24 06 F1 | 	add	local04, #36
1f8cc     12 27 02 FB | 	rdlong	local05, local04
1f8d0     15 27 02 F1 | 	add	local05, local07
1f8d4     04 24 06 F1 | 	add	local04, #4
1f8d8     12 27 62 FC | 	wrlong	local05, local04
1f8dc     28 24 86 F1 | 	sub	local04, #40
1f8e0     02 30 0E F2 | 	cmp	local10, #2 wz
1f8e4     18 24 06 A1 |  if_e	add	local04, #24
1f8e8     12 27 02 AB |  if_e	rdlong	local05, local04
1f8ec     18 24 86 A1 |  if_e	sub	local04, #24
1f8f0     01 26 66 A0 |  if_e	shl	local05, #1
1f8f4     24 00 90 AD |  if_e	jmp	#LR__3516
1f8f8     18 24 06 F1 | 	add	local04, #24
1f8fc     12 33 02 FB | 	rdlong	local11, local04
1f900     19 27 02 F6 | 	mov	local05, local11
1f904     01 26 66 F0 | 	shl	local05, #1
1f908     19 27 02 F1 | 	add	local05, local11
1f90c     01 26 46 F0 | 	shr	local05, #1
1f910     18 24 86 F1 | 	sub	local04, #24
1f914     01 32 06 F5 | 	and	local11, #1
1f918     19 27 02 F1 | 	add	local05, local11
1f91c                 | LR__3516
1f91c     13 33 02 F6 | 	mov	local11, local05
1f920                 | LR__3517
1f920     FF 33 06 F1 | 	add	local11, #511
1f924     09 32 46 F0 | 	shr	local11, #9
1f928     1C 24 06 F1 | 	add	local04, #28
1f92c     12 17 02 FB | 	rdlong	arg03, local04
1f930     1C 24 86 F1 | 	sub	local04, #28
1f934     19 17 12 F2 | 	cmp	arg03, local11 wc
1f938     0D FA 05 C6 |  if_b	mov	result1, #13
1f93c     30 01 90 CD |  if_b	jmp	#LR__3520
1f940     14 24 06 F1 | 	add	local04, #20
1f944     FF FF FF FF 
1f948     12 FF 6B FC | 	wrlong	##-1, local04
1f94c     04 24 86 F1 | 	sub	local04, #4
1f950     FF FF FF FF 
1f954     12 FF 6B FC | 	wrlong	##-1, local04
1f958     0C 24 86 F1 | 	sub	local04, #12
1f95c     12 01 49 FC | 	wrbyte	#128, local04
1f960     04 24 86 F1 | 	sub	local04, #4
1f964     03 30 0E F2 | 	cmp	local10, #3 wz
1f968     D0 00 90 5D |  if_ne	jmp	#LR__3519
1f96c     34 24 06 F1 | 	add	local04, #52
1f970     12 13 02 F6 | 	mov	arg01, local04
1f974     34 24 86 F1 | 	sub	local04, #52
1f978     30 12 06 F1 | 	add	arg01, #48
1f97c                 | ' {
1f97c                 | ' 
1f97c                 | ' 	return *((WORD*)ptr);
1f97c     09 FB E1 FA | 	rdword	result1, arg01
1f980     FD 26 32 F9 | 	getword	local05, result1, #0
1f984     01 26 0E F2 | 	cmp	local05, #1 wz
1f988     B0 00 90 5D |  if_ne	jmp	#LR__3519
1f98c     01 28 06 F1 | 	add	local06, #1
1f990     12 13 02 F6 | 	mov	arg01, local04
1f994     14 15 02 F6 | 	mov	arg02, local06
1f998     CC CD BF FD | 	call	#_fatfs_cc_move_window
1f99c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f9a0     98 00 90 5D |  if_ne	jmp	#LR__3519
1f9a4     04 24 06 F1 | 	add	local04, #4
1f9a8     12 01 48 FC | 	wrbyte	#0, local04
1f9ac     30 24 06 F1 | 	add	local04, #48
1f9b0     12 13 02 F6 | 	mov	arg01, local04
1f9b4     34 24 86 F1 | 	sub	local04, #52
1f9b8     FE 13 06 F1 | 	add	arg01, #510
1f9bc                 | ' {
1f9bc                 | ' 
1f9bc                 | ' 	return *((WORD*)ptr);
1f9bc     09 FB E1 FA | 	rdword	result1, arg01
1f9c0     FD 26 32 F9 | 	getword	local05, result1, #0
1f9c4     55 00 00 FF 
1f9c8     55 26 0E F2 | 	cmp	local05, ##43605 wz
1f9cc     34 24 06 A1 |  if_e	add	local04, #52
1f9d0     12 13 02 A6 |  if_e	mov	arg01, local04
1f9d4     34 24 86 A1 |  if_e	sub	local04, #52
1f9d8                 | ' {
1f9d8                 | ' 
1f9d8                 | ' 	return *((DWORD*)ptr);
1f9d8     09 FB 01 AB |  if_e	rdlong	result1, arg01
1f9dc     A9 B0 20 AF 
1f9e0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1f9e4     54 00 90 5D |  if_ne	jmp	#LR__3518
1f9e8     34 24 06 F1 | 	add	local04, #52
1f9ec     12 13 02 F6 | 	mov	arg01, local04
1f9f0     34 24 86 F1 | 	sub	local04, #52
1f9f4     E4 13 06 F1 | 	add	arg01, #484
1f9f8                 | ' {
1f9f8                 | ' 
1f9f8                 | ' 	return *((DWORD*)ptr);
1f9f8     09 FB 01 FB | 	rdlong	result1, arg01
1f9fc     B9 A0 30 FF 
1fa00     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1fa04     34 00 90 5D |  if_ne	jmp	#LR__3518
1fa08     34 24 06 F1 | 	add	local04, #52
1fa0c     12 13 02 F6 | 	mov	arg01, local04
1fa10     E8 13 06 F1 | 	add	arg01, #488
1fa14                 | ' {
1fa14                 | ' 
1fa14                 | ' 	return *((DWORD*)ptr);
1fa14     09 FB 01 FB | 	rdlong	result1, arg01
1fa18     20 24 86 F1 | 	sub	local04, #32
1fa1c     12 FB 61 FC | 	wrlong	result1, local04
1fa20     20 24 06 F1 | 	add	local04, #32
1fa24     12 13 02 F6 | 	mov	arg01, local04
1fa28     EC 13 06 F1 | 	add	arg01, #492
1fa2c                 | ' {
1fa2c                 | ' 
1fa2c                 | ' 	return *((DWORD*)ptr);
1fa2c     09 FB 01 FB | 	rdlong	result1, arg01
1fa30     24 24 86 F1 | 	sub	local04, #36
1fa34     12 FB 61 FC | 	wrlong	result1, local04
1fa38     10 24 86 F1 | 	sub	local04, #16
1fa3c                 | LR__3518
1fa3c                 | LR__3519
1fa3c     12 31 42 FC | 	wrbyte	local10, local04
1fa40     04 E4 05 F1 | 	add	objptr, #4
1fa44     F2 26 E2 FA | 	rdword	local05, objptr
1fa48     01 26 06 F1 | 	add	local05, #1
1fa4c     F2 26 52 FC | 	wrword	local05, objptr
1fa50     F2 32 E2 FA | 	rdword	local11, objptr
1fa54     06 24 06 F1 | 	add	local04, #6
1fa58     12 33 52 FC | 	wrword	local11, local04
1fa5c     04 E4 05 F1 | 	add	objptr, #4
1fa60     06 24 06 F1 | 	add	local04, #6
1fa64     12 E5 61 FC | 	wrlong	objptr, local04
1fa68                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1fa68                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1fa68                 | ' 			{
1fa68                 | ' 
1fa68                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1fa68                 | ' 
1fa68                 | ' 
1fa68                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1fa68                 | ' 
1fa68                 | ' 			}
1fa68                 | ' 		}
1fa68                 | ' 
1fa68                 | ' 
1fa68                 | ' 	}
1fa68                 | ' 
1fa68                 | ' 	fs->fs_type = (BYTE)fmt;
1fa68                 | ' 	fs->id = ++Fsid;
1fa68                 | ' 
1fa68                 | ' 	fs->lfnbuf = LfnBuf;
1fa68                 | ' #line 3567 "ff.c"
1fa68                 | ' 	return FR_OK;
1fa68     00 FA 05 F6 | 	mov	result1, #0
1fa6c     08 E4 85 F1 | 	sub	objptr, #8
1fa70                 | LR__3520
1fa70     A7 F0 03 F6 | 	mov	ptra, fp
1fa74     B2 00 A0 FD | 	call	#popregs_
1fa78                 | _fatfs_cc_mount_volume_ret
1fa78     2D 00 64 FD | 	ret
1fa7c                 | 
1fa7c                 | _fatfs_cc_validate
1fa7c     09 01 0A F6 | 	mov	_var01, arg01 wz
1fa80     09 02 06 F6 | 	mov	_var02, #9
1fa84     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1fa88     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1fa8c     50 00 90 AD |  if_e	jmp	#LR__3530
1fa90     04 00 06 F1 | 	add	_var01, #4
1fa94     00 07 E2 FA | 	rdword	_var04, _var01
1fa98     04 00 86 F1 | 	sub	_var01, #4
1fa9c     00 13 02 FB | 	rdlong	arg01, _var01
1faa0     06 12 06 F1 | 	add	arg01, #6
1faa4     09 FB E1 FA | 	rdword	result1, arg01
1faa8     FD 06 0A F2 | 	cmp	_var04, result1 wz
1faac     30 00 90 5D |  if_ne	jmp	#LR__3530
1fab0     00 07 02 FB | 	rdlong	_var04, _var01
1fab4     01 06 06 F1 | 	add	_var04, #1
1fab8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1fabc     01 FA 05 56 |  if_ne	mov	result1, #1
1fac0                 | ' 
1fac0                 | ' 	return Stat;
1fac0     01 00 00 AF 
1fac4     20 E4 05 A1 |  if_e	add	objptr, ##544
1fac8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1facc     01 00 00 AF 
1fad0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fad4     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1fad8     01 04 CE F7 | 	test	_var03, #1 wz
1fadc     00 02 06 A6 |  if_e	mov	_var02, #0
1fae0                 | LR__3530
1fae0     00 02 0E F2 | 	cmp	_var02, #0 wz
1fae4     00 05 02 AB |  if_e	rdlong	_var03, _var01
1fae8     00 04 06 56 |  if_ne	mov	_var03, #0
1faec     0A 05 62 FC | 	wrlong	_var03, arg02
1faf0                 | ' 			res = FR_OK;
1faf0                 | ' 		}
1faf0                 | ' 
1faf0                 | ' 	}
1faf0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1faf0                 | ' 	return res;
1faf0     01 FB 01 F6 | 	mov	result1, _var02
1faf4                 | _fatfs_cc_validate_ret
1faf4     2D 00 64 FD | 	ret
1faf8                 | 
1faf8                 | _fatfs_cc_f_mount
1faf8     01 4A 05 F6 | 	mov	COUNT_, #1
1fafc     A8 00 A0 FD | 	call	#pushregs_
1fb00     20 F0 07 F1 | 	add	ptra, #32
1fb04     04 4E 05 F1 | 	add	fp, #4
1fb08     A7 12 62 FC | 	wrlong	arg01, fp
1fb0c     04 4E 05 F1 | 	add	fp, #4
1fb10     A7 14 62 FC | 	wrlong	arg02, fp
1fb14     04 4E 05 F1 | 	add	fp, #4
1fb18     A7 16 42 FC | 	wrbyte	arg03, fp
1fb1c     04 4E 85 F1 | 	sub	fp, #4
1fb20     A7 16 02 FB | 	rdlong	arg03, fp
1fb24     14 4E 05 F1 | 	add	fp, #20
1fb28     A7 16 62 FC | 	wrlong	arg03, fp
1fb2c     A7 12 02 F6 | 	mov	arg01, fp
1fb30     1C 4E 85 F1 | 	sub	fp, #28
1fb34     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1fb38     14 4E 05 F1 | 	add	fp, #20
1fb3c     A7 FA 61 FC | 	wrlong	result1, fp
1fb40     14 4E 85 F1 | 	sub	fp, #20
1fb44     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb48     0B FA 05 C6 |  if_b	mov	result1, #11
1fb4c     C0 00 90 CD |  if_b	jmp	#LR__3541
1fb50     14 4E 05 F1 | 	add	fp, #20
1fb54     A7 16 02 FB | 	rdlong	arg03, fp
1fb58     02 16 66 F0 | 	shl	arg03, #2
1fb5c     F2 16 02 F1 | 	add	arg03, objptr
1fb60     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1fb64     04 4E 85 F1 | 	sub	fp, #4
1fb68     A7 16 62 FC | 	wrlong	arg03, fp
1fb6c     10 4E 85 F1 | 	sub	fp, #16
1fb70     28 00 90 AD |  if_e	jmp	#LR__3540
1fb74     10 4E 05 F1 | 	add	fp, #16
1fb78     A7 16 02 FB | 	rdlong	arg03, fp
1fb7c     10 4E 85 F1 | 	sub	fp, #16
1fb80     01 16 06 F1 | 	add	arg03, #1
1fb84     0B 13 C2 FA | 	rdbyte	arg01, arg03
1fb88     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1fb8c     10 4E 05 F1 | 	add	fp, #16
1fb90     A7 16 02 FB | 	rdlong	arg03, fp
1fb94     10 4E 85 F1 | 	sub	fp, #16
1fb98     0B 01 48 FC | 	wrbyte	#0, arg03
1fb9c                 | LR__3540
1fb9c     04 4E 05 F1 | 	add	fp, #4
1fba0     A7 1E 0A FB | 	rdlong	local01, fp wz
1fba4     04 4E 85 F1 | 	sub	fp, #4
1fba8     04 4E 05 51 |  if_ne	add	fp, #4
1fbac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1fbb0     04 4E 85 51 |  if_ne	sub	fp, #4
1fbb4     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1fbb8     14 4E 05 F1 | 	add	fp, #20
1fbbc     A7 1E 02 FB | 	rdlong	local01, fp
1fbc0     02 1E 66 F0 | 	shl	local01, #2
1fbc4     F2 1E 02 F1 | 	add	local01, objptr
1fbc8     10 4E 85 F1 | 	sub	fp, #16
1fbcc     A7 16 02 FB | 	rdlong	arg03, fp
1fbd0     0F 17 62 FC | 	wrlong	arg03, local01
1fbd4     08 4E 05 F1 | 	add	fp, #8
1fbd8     A7 1E CA FA | 	rdbyte	local01, fp wz
1fbdc     0C 4E 85 F1 | 	sub	fp, #12
1fbe0     00 FA 05 A6 |  if_e	mov	result1, #0
1fbe4     28 00 90 AD |  if_e	jmp	#LR__3541
1fbe8     08 4E 05 F1 | 	add	fp, #8
1fbec     A7 12 02 F6 | 	mov	arg01, fp
1fbf0     04 4E 85 F1 | 	sub	fp, #4
1fbf4     A7 14 02 F6 | 	mov	arg02, fp
1fbf8     04 4E 85 F1 | 	sub	fp, #4
1fbfc     00 16 06 F6 | 	mov	arg03, #0
1fc00     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1fc04     18 4E 05 F1 | 	add	fp, #24
1fc08     A7 FA 61 FC | 	wrlong	result1, fp
1fc0c                 | ' 
1fc0c                 | ' 	res = mount_volume(&path, &fs, 0);
1fc0c                 | ' 	return res ;
1fc0c     18 4E 85 F1 | 	sub	fp, #24
1fc10                 | LR__3541
1fc10     A7 F0 03 F6 | 	mov	ptra, fp
1fc14     B2 00 A0 FD | 	call	#popregs_
1fc18                 | _fatfs_cc_f_mount_ret
1fc18     2D 00 64 FD | 	ret
1fc1c                 | 
1fc1c                 | _fatfs_cc_f_open
1fc1c     02 4A 05 F6 | 	mov	COUNT_, #2
1fc20     A8 00 A0 FD | 	call	#pushregs_
1fc24     60 F0 07 F1 | 	add	ptra, #96
1fc28     04 4E 05 F1 | 	add	fp, #4
1fc2c     A7 12 62 FC | 	wrlong	arg01, fp
1fc30     04 4E 05 F1 | 	add	fp, #4
1fc34     A7 14 62 FC | 	wrlong	arg02, fp
1fc38     04 4E 05 F1 | 	add	fp, #4
1fc3c     A7 16 42 FC | 	wrbyte	arg03, fp
1fc40     08 4E 85 F1 | 	sub	fp, #8
1fc44     A7 18 0A FB | 	rdlong	arg04, fp wz
1fc48     04 4E 85 F1 | 	sub	fp, #4
1fc4c     09 FA 05 A6 |  if_e	mov	result1, #9
1fc50     98 06 90 AD |  if_e	jmp	#LR__3567
1fc54     0C 4E 05 F1 | 	add	fp, #12
1fc58     A7 18 C2 FA | 	rdbyte	arg04, fp
1fc5c     3F 18 06 F5 | 	and	arg04, #63
1fc60     A7 18 42 FC | 	wrbyte	arg04, fp
1fc64     04 4E 85 F1 | 	sub	fp, #4
1fc68     A7 12 02 F6 | 	mov	arg01, fp
1fc6c     3C 4E 05 F1 | 	add	fp, #60
1fc70     A7 14 02 F6 | 	mov	arg02, fp
1fc74     38 4E 85 F1 | 	sub	fp, #56
1fc78     A7 16 C2 FA | 	rdbyte	arg03, fp
1fc7c     0C 4E 85 F1 | 	sub	fp, #12
1fc80     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1fc84     10 4E 05 F1 | 	add	fp, #16
1fc88     A7 FA 61 FC | 	wrlong	result1, fp
1fc8c     10 4E 85 F1 | 	sub	fp, #16
1fc90     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc94     2C 06 90 5D |  if_ne	jmp	#LR__3566
1fc98     44 4E 05 F1 | 	add	fp, #68
1fc9c     A7 18 02 FB | 	rdlong	arg04, fp
1fca0     30 4E 85 F1 | 	sub	fp, #48
1fca4     A7 18 62 FC | 	wrlong	arg04, fp
1fca8     A7 12 02 F6 | 	mov	arg01, fp
1fcac     0C 4E 85 F1 | 	sub	fp, #12
1fcb0     A7 1E 02 FB | 	rdlong	local01, fp
1fcb4     08 4E 85 F1 | 	sub	fp, #8
1fcb8     0F 15 02 F6 | 	mov	arg02, local01
1fcbc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
1fcc0     10 4E 05 F1 | 	add	fp, #16
1fcc4     A7 FA 61 FC | 	wrlong	result1, fp
1fcc8     10 4E 85 F1 | 	sub	fp, #16
1fccc     00 FA 0D F2 | 	cmp	result1, #0 wz
1fcd0     1C 00 90 5D |  if_ne	jmp	#LR__3550
1fcd4     3F 4E 05 F1 | 	add	fp, #63
1fcd8     A7 18 C2 FA | 	rdbyte	arg04, fp
1fcdc     3F 4E 85 F1 | 	sub	fp, #63
1fce0     80 18 CE F7 | 	test	arg04, #128 wz
1fce4     10 4E 05 51 |  if_ne	add	fp, #16
1fce8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
1fcec     10 4E 85 51 |  if_ne	sub	fp, #16
1fcf0                 | LR__3550
1fcf0     0C 4E 05 F1 | 	add	fp, #12
1fcf4     A7 18 C2 FA | 	rdbyte	arg04, fp
1fcf8     0C 4E 85 F1 | 	sub	fp, #12
1fcfc     1C 18 CE F7 | 	test	arg04, #28 wz
1fd00     F0 01 90 AD |  if_e	jmp	#LR__3555
1fd04     10 4E 05 F1 | 	add	fp, #16
1fd08     A7 1E 0A FB | 	rdlong	local01, fp wz
1fd0c     10 4E 85 F1 | 	sub	fp, #16
1fd10     48 00 90 AD |  if_e	jmp	#LR__3552
1fd14     10 4E 05 F1 | 	add	fp, #16
1fd18     A7 18 02 FB | 	rdlong	arg04, fp
1fd1c     10 4E 85 F1 | 	sub	fp, #16
1fd20     04 18 0E F2 | 	cmp	arg04, #4 wz
1fd24     1C 00 90 5D |  if_ne	jmp	#LR__3551
1fd28     14 4E 05 F1 | 	add	fp, #20
1fd2c     A7 12 02 F6 | 	mov	arg01, fp
1fd30     14 4E 85 F1 | 	sub	fp, #20
1fd34     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
1fd38     10 4E 05 F1 | 	add	fp, #16
1fd3c     A7 FA 61 FC | 	wrlong	result1, fp
1fd40     10 4E 85 F1 | 	sub	fp, #16
1fd44                 | LR__3551
1fd44     0C 4E 05 F1 | 	add	fp, #12
1fd48     A7 1E C2 FA | 	rdbyte	local01, fp
1fd4c     08 1E 46 F5 | 	or	local01, #8
1fd50     A7 1E 42 FC | 	wrbyte	local01, fp
1fd54     0C 4E 85 F1 | 	sub	fp, #12
1fd58     3C 00 90 FD | 	jmp	#LR__3554
1fd5c                 | LR__3552
1fd5c     1A 4E 05 F1 | 	add	fp, #26
1fd60     A7 1E C2 FA | 	rdbyte	local01, fp
1fd64     1A 4E 85 F1 | 	sub	fp, #26
1fd68     11 1E CE F7 | 	test	local01, #17 wz
1fd6c     10 4E 05 51 |  if_ne	add	fp, #16
1fd70     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1fd74     10 4E 85 51 |  if_ne	sub	fp, #16
1fd78     1C 00 90 5D |  if_ne	jmp	#LR__3553
1fd7c     0C 4E 05 F1 | 	add	fp, #12
1fd80     A7 1E C2 FA | 	rdbyte	local01, fp
1fd84     0C 4E 85 F1 | 	sub	fp, #12
1fd88     04 1E CE F7 | 	test	local01, #4 wz
1fd8c     10 4E 05 51 |  if_ne	add	fp, #16
1fd90     A7 10 68 5C |  if_ne	wrlong	#8, fp
1fd94     10 4E 85 51 |  if_ne	sub	fp, #16
1fd98                 | LR__3553
1fd98                 | LR__3554
1fd98     10 4E 05 F1 | 	add	fp, #16
1fd9c     A7 1E 0A FB | 	rdlong	local01, fp wz
1fda0     10 4E 85 F1 | 	sub	fp, #16
1fda4     A8 01 90 5D |  if_ne	jmp	#LR__3558
1fda8     0C 4E 05 F1 | 	add	fp, #12
1fdac     A7 1E C2 FA | 	rdbyte	local01, fp
1fdb0     0C 4E 85 F1 | 	sub	fp, #12
1fdb4     08 1E CE F7 | 	test	local01, #8 wz
1fdb8     94 01 90 AD |  if_e	jmp	#LR__3558
1fdbc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
1fdc0     54 4E 05 F1 | 	add	fp, #84
1fdc4     A7 FA 61 FC | 	wrlong	result1, fp
1fdc8     24 4E 85 F1 | 	sub	fp, #36
1fdcc     A7 12 02 FB | 	rdlong	arg01, fp
1fdd0     0E 12 06 F1 | 	add	arg01, #14
1fdd4     09 FB 61 FC | 	wrlong	result1, arg01
1fdd8     A7 12 02 FB | 	rdlong	arg01, fp
1fddc     16 12 06 F1 | 	add	arg01, #22
1fde0     24 4E 05 F1 | 	add	fp, #36
1fde4     A7 14 02 FB | 	rdlong	arg02, fp
1fde8     09 15 62 FC | 	wrlong	arg02, arg01
1fdec     10 4E 85 F1 | 	sub	fp, #16
1fdf0     A7 12 02 FB | 	rdlong	arg01, fp
1fdf4     14 4E 85 F1 | 	sub	fp, #20
1fdf8     A7 14 02 FB | 	rdlong	arg02, fp
1fdfc     30 4E 85 F1 | 	sub	fp, #48
1fe00     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
1fe04     48 4E 05 F1 | 	add	fp, #72
1fe08     A7 FA 61 FC | 	wrlong	result1, fp
1fe0c     18 4E 85 F1 | 	sub	fp, #24
1fe10     A7 1E 02 FB | 	rdlong	local01, fp
1fe14     0B 1E 06 F1 | 	add	local01, #11
1fe18     0F 41 48 FC | 	wrbyte	#32, local01
1fe1c     14 4E 05 F1 | 	add	fp, #20
1fe20     A7 12 02 FB | 	rdlong	arg01, fp
1fe24     14 4E 85 F1 | 	sub	fp, #20
1fe28     A7 14 02 FB | 	rdlong	arg02, fp
1fe2c     30 4E 85 F1 | 	sub	fp, #48
1fe30     00 16 06 F6 | 	mov	arg03, #0
1fe34     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
1fe38     30 4E 05 F1 | 	add	fp, #48
1fe3c     A7 12 02 FB | 	rdlong	arg01, fp
1fe40     1C 12 06 F1 | 	add	arg01, #28
1fe44     09 01 68 FC | 	wrlong	#0, arg01
1fe48     14 4E 05 F1 | 	add	fp, #20
1fe4c     A7 1E 02 FB | 	rdlong	local01, fp
1fe50     03 1E 06 F1 | 	add	local01, #3
1fe54     0F 03 48 FC | 	wrbyte	#1, local01
1fe58     04 4E 05 F1 | 	add	fp, #4
1fe5c     A7 1E 0A FB | 	rdlong	local01, fp wz
1fe60     48 4E 85 F1 | 	sub	fp, #72
1fe64     E8 00 90 AD |  if_e	jmp	#LR__3558
1fe68     44 4E 05 F1 | 	add	fp, #68
1fe6c     A7 1E 02 FB | 	rdlong	local01, fp
1fe70     30 1E 06 F1 | 	add	local01, #48
1fe74     0F 1F 02 FB | 	rdlong	local01, local01
1fe78     14 4E 05 F1 | 	add	fp, #20
1fe7c     A7 1E 62 FC | 	wrlong	local01, fp
1fe80     44 4E 85 F1 | 	sub	fp, #68
1fe84     A7 12 02 F6 | 	mov	arg01, fp
1fe88     34 4E 05 F1 | 	add	fp, #52
1fe8c     A7 14 02 FB | 	rdlong	arg02, fp
1fe90     48 4E 85 F1 | 	sub	fp, #72
1fe94     00 16 06 F6 | 	mov	arg03, #0
1fe98     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
1fe9c     10 4E 05 F1 | 	add	fp, #16
1fea0     A7 FA 61 FC | 	wrlong	result1, fp
1fea4     10 4E 85 F1 | 	sub	fp, #16
1fea8     00 FA 0D F2 | 	cmp	result1, #0 wz
1feac     A0 00 90 5D |  if_ne	jmp	#LR__3558
1feb0     44 4E 05 F1 | 	add	fp, #68
1feb4     A7 12 02 FB | 	rdlong	arg01, fp
1feb8     14 4E 05 F1 | 	add	fp, #20
1febc     A7 14 02 FB | 	rdlong	arg02, fp
1fec0     58 4E 85 F1 | 	sub	fp, #88
1fec4     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
1fec8     10 4E 05 F1 | 	add	fp, #16
1fecc     A7 FA 61 FC | 	wrlong	result1, fp
1fed0     34 4E 05 F1 | 	add	fp, #52
1fed4     A7 18 02 FB | 	rdlong	arg04, fp
1fed8     04 4E 05 F1 | 	add	fp, #4
1fedc     A7 1E 02 FB | 	rdlong	local01, fp
1fee0     48 4E 85 F1 | 	sub	fp, #72
1fee4     01 1E 86 F1 | 	sub	local01, #1
1fee8     10 18 06 F1 | 	add	arg04, #16
1feec     0C 1F 62 FC | 	wrlong	local01, arg04
1fef0     5C 00 90 FD | 	jmp	#LR__3558
1fef4                 | LR__3555
1fef4     10 4E 05 F1 | 	add	fp, #16
1fef8     A7 18 0A FB | 	rdlong	arg04, fp wz
1fefc     10 4E 85 F1 | 	sub	fp, #16
1ff00     4C 00 90 5D |  if_ne	jmp	#LR__3557
1ff04     1A 4E 05 F1 | 	add	fp, #26
1ff08     A7 18 C2 FA | 	rdbyte	arg04, fp
1ff0c     1A 4E 85 F1 | 	sub	fp, #26
1ff10     10 18 CE F7 | 	test	arg04, #16 wz
1ff14     10 4E 05 51 |  if_ne	add	fp, #16
1ff18     A7 08 68 5C |  if_ne	wrlong	#4, fp
1ff1c     10 4E 85 51 |  if_ne	sub	fp, #16
1ff20     2C 00 90 5D |  if_ne	jmp	#LR__3556
1ff24     0C 4E 05 F1 | 	add	fp, #12
1ff28     A7 18 C2 FA | 	rdbyte	arg04, fp
1ff2c     0C 4E 85 F1 | 	sub	fp, #12
1ff30     02 18 CE F7 | 	test	arg04, #2 wz
1ff34     1A 4E 05 51 |  if_ne	add	fp, #26
1ff38     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
1ff3c     1A 4E 85 51 |  if_ne	sub	fp, #26
1ff40     01 1E CE 57 |  if_ne	test	local01, #1 wz
1ff44     10 4E 05 51 |  if_ne	add	fp, #16
1ff48     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1ff4c     10 4E 85 51 |  if_ne	sub	fp, #16
1ff50                 | LR__3556
1ff50                 | LR__3557
1ff50                 | LR__3558
1ff50     10 4E 05 F1 | 	add	fp, #16
1ff54     A7 1E 0A FB | 	rdlong	local01, fp wz
1ff58     10 4E 85 F1 | 	sub	fp, #16
1ff5c     60 00 90 5D |  if_ne	jmp	#LR__3559
1ff60     0C 4E 05 F1 | 	add	fp, #12
1ff64     A7 20 C2 FA | 	rdbyte	local02, fp
1ff68     0C 4E 85 F1 | 	sub	fp, #12
1ff6c     08 20 CE F7 | 	test	local02, #8 wz
1ff70     0C 4E 05 51 |  if_ne	add	fp, #12
1ff74     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
1ff78     40 20 46 55 |  if_ne	or	local02, #64
1ff7c     A7 20 42 5C |  if_ne	wrbyte	local02, fp
1ff80     0C 4E 85 51 |  if_ne	sub	fp, #12
1ff84     04 4E 05 F1 | 	add	fp, #4
1ff88     A7 20 02 FB | 	rdlong	local02, fp
1ff8c     40 4E 05 F1 | 	add	fp, #64
1ff90     A7 1E 02 FB | 	rdlong	local01, fp
1ff94     30 1E 06 F1 | 	add	local01, #48
1ff98     0F 1F 02 FB | 	rdlong	local01, local01
1ff9c     20 20 06 F1 | 	add	local02, #32
1ffa0     10 1F 62 FC | 	wrlong	local01, local02
1ffa4     40 4E 85 F1 | 	sub	fp, #64
1ffa8     A7 20 02 FB | 	rdlong	local02, fp
1ffac     2C 4E 05 F1 | 	add	fp, #44
1ffb0     A7 1E 02 FB | 	rdlong	local01, fp
1ffb4     30 4E 85 F1 | 	sub	fp, #48
1ffb8     24 20 06 F1 | 	add	local02, #36
1ffbc     10 1F 62 FC | 	wrlong	local01, local02
1ffc0                 | LR__3559
1ffc0     10 4E 05 F1 | 	add	fp, #16
1ffc4     A7 20 0A FB | 	rdlong	local02, fp wz
1ffc8     10 4E 85 F1 | 	sub	fp, #16
1ffcc     F4 02 90 5D |  if_ne	jmp	#LR__3565
1ffd0     04 4E 05 F1 | 	add	fp, #4
1ffd4     A7 20 02 FB | 	rdlong	local02, fp
1ffd8     40 4E 05 F1 | 	add	fp, #64
1ffdc     A7 12 02 FB | 	rdlong	arg01, fp
1ffe0     14 4E 85 F1 | 	sub	fp, #20
1ffe4     A7 14 02 FB | 	rdlong	arg02, fp
1ffe8     30 4E 85 F1 | 	sub	fp, #48
1ffec     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
1fff0     08 20 06 F1 | 	add	local02, #8
1fff4     10 FB 61 FC | 	wrlong	result1, local02
1fff8     04 4E 05 F1 | 	add	fp, #4
1fffc     A7 20 02 FB | 	rdlong	local02, fp
20000     2C 4E 05 F1 | 	add	fp, #44
20004     A7 12 02 FB | 	rdlong	arg01, fp
20008     1C 12 06 F1 | 	add	arg01, #28
2000c                 | ' {
2000c                 | ' 
2000c                 | ' 	return *((DWORD*)ptr);
2000c     09 FB 01 FB | 	rdlong	result1, arg01
20010     0C 20 06 F1 | 	add	local02, #12
20014     10 FB 61 FC | 	wrlong	result1, local02
20018     2C 4E 85 F1 | 	sub	fp, #44
2001c     A7 20 02 FB | 	rdlong	local02, fp
20020     40 4E 05 F1 | 	add	fp, #64
20024     A7 1E 02 FB | 	rdlong	local01, fp
20028     10 1F 62 FC | 	wrlong	local01, local02
2002c     40 4E 85 F1 | 	sub	fp, #64
20030     A7 20 02 FB | 	rdlong	local02, fp
20034     40 4E 05 F1 | 	add	fp, #64
20038     A7 1E 02 FB | 	rdlong	local01, fp
2003c     06 1E 06 F1 | 	add	local01, #6
20040     0F 1F E2 FA | 	rdword	local01, local01
20044     04 20 06 F1 | 	add	local02, #4
20048     10 1F 52 FC | 	wrword	local01, local02
2004c     40 4E 85 F1 | 	sub	fp, #64
20050     A7 20 02 FB | 	rdlong	local02, fp
20054     08 4E 05 F1 | 	add	fp, #8
20058     A7 1E C2 FA | 	rdbyte	local01, fp
2005c     10 20 06 F1 | 	add	local02, #16
20060     10 1F 42 FC | 	wrbyte	local01, local02
20064     08 4E 85 F1 | 	sub	fp, #8
20068     A7 20 02 FB | 	rdlong	local02, fp
2006c     11 20 06 F1 | 	add	local02, #17
20070     10 01 48 FC | 	wrbyte	#0, local02
20074     A7 20 02 FB | 	rdlong	local02, fp
20078     1C 20 06 F1 | 	add	local02, #28
2007c     10 01 68 FC | 	wrlong	#0, local02
20080     A7 20 02 FB | 	rdlong	local02, fp
20084     14 20 06 F1 | 	add	local02, #20
20088     10 01 68 FC | 	wrlong	#0, local02
2008c     A7 12 02 FB | 	rdlong	arg01, fp
20090     04 4E 85 F1 | 	sub	fp, #4
20094     28 12 06 F1 | 	add	arg01, #40
20098     00 14 06 F6 | 	mov	arg02, #0
2009c     09 16 C6 F9 | 	decod	arg03, #9
200a0     98 00 A0 FD | 	call	#\builtin_bytefill_
200a4     0C 4E 05 F1 | 	add	fp, #12
200a8     A7 20 C2 FA | 	rdbyte	local02, fp
200ac     0C 4E 85 F1 | 	sub	fp, #12
200b0     20 20 CE F7 | 	test	local02, #32 wz
200b4     0C 02 90 AD |  if_e	jmp	#LR__3564
200b8     04 4E 05 F1 | 	add	fp, #4
200bc     A7 1E 02 FB | 	rdlong	local01, fp
200c0     04 4E 85 F1 | 	sub	fp, #4
200c4     0C 1E 06 F1 | 	add	local01, #12
200c8     0F 21 02 FB | 	rdlong	local02, local01
200cc     01 20 16 F2 | 	cmp	local02, #1 wc
200d0     F0 01 90 CD |  if_b	jmp	#LR__3564
200d4     04 4E 05 F1 | 	add	fp, #4
200d8     A7 1E 02 FB | 	rdlong	local01, fp
200dc     0F 21 02 F6 | 	mov	local02, local01
200e0     0C 1E 06 F1 | 	add	local01, #12
200e4     0F 1F 02 FB | 	rdlong	local01, local01
200e8     14 20 06 F1 | 	add	local02, #20
200ec     10 1F 62 FC | 	wrlong	local01, local02
200f0     40 4E 05 F1 | 	add	fp, #64
200f4     A7 20 02 FB | 	rdlong	local02, fp
200f8     0A 20 06 F1 | 	add	local02, #10
200fc     10 21 E2 FA | 	rdword	local02, local02
20100     09 20 66 F0 | 	shl	local02, #9
20104     08 4E 05 F1 | 	add	fp, #8
20108     A7 20 62 FC | 	wrlong	local02, fp
2010c     48 4E 85 F1 | 	sub	fp, #72
20110     A7 20 02 FB | 	rdlong	local02, fp
20114     08 20 06 F1 | 	add	local02, #8
20118     10 1F 02 FB | 	rdlong	local01, local02
2011c     4C 4E 05 F1 | 	add	fp, #76
20120     A7 1E 62 FC | 	wrlong	local01, fp
20124                 | ' 				fp->fptr = fp->obj.objsize;
20124                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
20124                 | ' 				clst = fp->obj.sclust;
20124                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
20124     4C 4E 85 F1 | 	sub	fp, #76
20128     A7 20 02 FB | 	rdlong	local02, fp
2012c     0C 20 06 F1 | 	add	local02, #12
20130     10 1F 02 FB | 	rdlong	local01, local02
20134     58 4E 05 F1 | 	add	fp, #88
20138     A7 1E 62 FC | 	wrlong	local01, fp
2013c     5C 4E 85 F1 | 	sub	fp, #92
20140                 | LR__3560
20140     10 4E 05 F1 | 	add	fp, #16
20144     A7 20 0A FB | 	rdlong	local02, fp wz
20148     10 4E 85 F1 | 	sub	fp, #16
2014c     94 00 90 5D |  if_ne	jmp	#LR__3561
20150     5C 4E 05 F1 | 	add	fp, #92
20154     A7 20 02 FB | 	rdlong	local02, fp
20158     10 4E 85 F1 | 	sub	fp, #16
2015c     A7 1E 02 FB | 	rdlong	local01, fp
20160     4C 4E 85 F1 | 	sub	fp, #76
20164     0F 21 1A F2 | 	cmp	local02, local01 wcz
20168     78 00 90 ED |  if_be	jmp	#LR__3561
2016c     04 4E 05 F1 | 	add	fp, #4
20170     A7 12 02 FB | 	rdlong	arg01, fp
20174     4C 4E 05 F1 | 	add	fp, #76
20178     A7 14 02 FB | 	rdlong	arg02, fp
2017c     50 4E 85 F1 | 	sub	fp, #80
20180     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
20184     50 4E 05 F1 | 	add	fp, #80
20188     A7 FA 61 FC | 	wrlong	result1, fp
2018c     50 4E 85 F1 | 	sub	fp, #80
20190     02 FA 15 F2 | 	cmp	result1, #2 wc
20194     10 4E 05 C1 |  if_b	add	fp, #16
20198     A7 04 68 CC |  if_b	wrlong	#2, fp
2019c     10 4E 85 C1 |  if_b	sub	fp, #16
201a0     50 4E 05 F1 | 	add	fp, #80
201a4     A7 20 02 FB | 	rdlong	local02, fp
201a8     50 4E 85 F1 | 	sub	fp, #80
201ac     FF FF 7F FF 
201b0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
201b4     10 4E 05 A1 |  if_e	add	fp, #16
201b8     A7 02 68 AC |  if_e	wrlong	#1, fp
201bc     10 4E 85 A1 |  if_e	sub	fp, #16
201c0     5C 4E 05 F1 | 	add	fp, #92
201c4     A7 20 02 FB | 	rdlong	local02, fp
201c8     10 4E 85 F1 | 	sub	fp, #16
201cc     A7 1E 02 FB | 	rdlong	local01, fp
201d0     0F 21 82 F1 | 	sub	local02, local01
201d4     10 4E 05 F1 | 	add	fp, #16
201d8     A7 20 62 FC | 	wrlong	local02, fp
201dc     5C 4E 85 F1 | 	sub	fp, #92
201e0     5C FF 9F FD | 	jmp	#LR__3560
201e4                 | LR__3561
201e4     04 4E 05 F1 | 	add	fp, #4
201e8     A7 20 02 FB | 	rdlong	local02, fp
201ec     4C 4E 05 F1 | 	add	fp, #76
201f0     A7 1E 02 FB | 	rdlong	local01, fp
201f4     18 20 06 F1 | 	add	local02, #24
201f8     10 1F 62 FC | 	wrlong	local01, local02
201fc     40 4E 85 F1 | 	sub	fp, #64
20200     A7 20 0A FB | 	rdlong	local02, fp wz
20204     10 4E 85 F1 | 	sub	fp, #16
20208     B8 00 90 5D |  if_ne	jmp	#LR__3563
2020c     5C 4E 05 F1 | 	add	fp, #92
20210     A7 1E 02 FB | 	rdlong	local01, fp
20214     5C 4E 85 F1 | 	sub	fp, #92
20218     FF 1F CE F7 | 	test	local01, #511 wz
2021c     A4 00 90 AD |  if_e	jmp	#LR__3563
20220     44 4E 05 F1 | 	add	fp, #68
20224     A7 12 02 FB | 	rdlong	arg01, fp
20228     0C 4E 05 F1 | 	add	fp, #12
2022c     A7 14 02 FB | 	rdlong	arg02, fp
20230     50 4E 85 F1 | 	sub	fp, #80
20234     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
20238     58 4E 05 F1 | 	add	fp, #88
2023c     A7 FA 61 FC | 	wrlong	result1, fp
20240     00 FA 4D F2 | 	cmps	result1, #0 wz
20244     58 4E 85 F1 | 	sub	fp, #88
20248     10 4E 05 A1 |  if_e	add	fp, #16
2024c     A7 04 68 AC |  if_e	wrlong	#2, fp
20250     10 4E 85 A1 |  if_e	sub	fp, #16
20254     6C 00 90 AD |  if_e	jmp	#LR__3562
20258     04 4E 05 F1 | 	add	fp, #4
2025c     A7 20 02 FB | 	rdlong	local02, fp
20260     54 4E 05 F1 | 	add	fp, #84
20264     A7 1E 02 FB | 	rdlong	local01, fp
20268     04 4E 05 F1 | 	add	fp, #4
2026c     A7 18 02 FB | 	rdlong	arg04, fp
20270     09 18 46 F0 | 	shr	arg04, #9
20274     0C 1F 02 F1 | 	add	local01, arg04
20278     1C 20 06 F1 | 	add	local02, #28
2027c     10 1F 62 FC | 	wrlong	local01, local02
20280     18 4E 85 F1 | 	sub	fp, #24
20284     A7 20 02 FB | 	rdlong	local02, fp
20288     01 20 06 F1 | 	add	local02, #1
2028c     10 13 C2 FA | 	rdbyte	arg01, local02
20290     40 4E 85 F1 | 	sub	fp, #64
20294     A7 20 02 FB | 	rdlong	local02, fp
20298     10 15 02 F6 | 	mov	arg02, local02
2029c     28 14 06 F1 | 	add	arg02, #40
202a0     04 4E 85 F1 | 	sub	fp, #4
202a4     1C 20 06 F1 | 	add	local02, #28
202a8     10 17 02 FB | 	rdlong	arg03, local02
202ac     01 18 06 F6 | 	mov	arg04, #1
202b0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
202b4     00 FA 0D F2 | 	cmp	result1, #0 wz
202b8     10 4E 05 51 |  if_ne	add	fp, #16
202bc     A7 02 68 5C |  if_ne	wrlong	#1, fp
202c0     10 4E 85 51 |  if_ne	sub	fp, #16
202c4                 | LR__3562
202c4                 | LR__3563
202c4                 | LR__3564
202c4                 | LR__3565
202c4                 | LR__3566
202c4     10 4E 05 F1 | 	add	fp, #16
202c8     A7 20 0A FB | 	rdlong	local02, fp wz
202cc     10 4E 85 F1 | 	sub	fp, #16
202d0     04 4E 05 51 |  if_ne	add	fp, #4
202d4     A7 20 02 5B |  if_ne	rdlong	local02, fp
202d8     04 4E 85 51 |  if_ne	sub	fp, #4
202dc     10 01 68 5C |  if_ne	wrlong	#0, local02
202e0                 | ' 
202e0                 | ' 	return res ;
202e0     10 4E 05 F1 | 	add	fp, #16
202e4     A7 FA 01 FB | 	rdlong	result1, fp
202e8     10 4E 85 F1 | 	sub	fp, #16
202ec                 | LR__3567
202ec     A7 F0 03 F6 | 	mov	ptra, fp
202f0     B2 00 A0 FD | 	call	#popregs_
202f4                 | _fatfs_cc_f_open_ret
202f4     2D 00 64 FD | 	ret
202f8                 | 
202f8                 | _fatfs_cc_f_read
202f8     0E 4A 05 F6 | 	mov	COUNT_, #14
202fc     A8 00 A0 FD | 	call	#pushregs_
20300     38 F0 07 F1 | 	add	ptra, #56
20304     04 4E 05 F1 | 	add	fp, #4
20308     A7 12 62 FC | 	wrlong	arg01, fp
2030c     04 4E 05 F1 | 	add	fp, #4
20310     A7 14 62 FC | 	wrlong	arg02, fp
20314     04 4E 05 F1 | 	add	fp, #4
20318     A7 16 62 FC | 	wrlong	arg03, fp
2031c     04 4E 05 F1 | 	add	fp, #4
20320     A7 18 62 FC | 	wrlong	arg04, fp
20324     08 4E 85 F1 | 	sub	fp, #8
20328     A7 FA 01 FB | 	rdlong	result1, fp
2032c     2C 4E 05 F1 | 	add	fp, #44
20330     A7 FA 61 FC | 	wrlong	result1, fp
20334     24 4E 85 F1 | 	sub	fp, #36
20338     A7 FA 01 FB | 	rdlong	result1, fp
2033c     FD 00 68 FC | 	wrlong	#0, result1
20340     0C 4E 85 F1 | 	sub	fp, #12
20344     A7 12 02 FB | 	rdlong	arg01, fp
20348     14 4E 05 F1 | 	add	fp, #20
2034c     A7 14 02 F6 | 	mov	arg02, fp
20350     18 4E 85 F1 | 	sub	fp, #24
20354     24 F7 BF FD | 	call	#_fatfs_cc_validate
20358     14 4E 05 F1 | 	add	fp, #20
2035c     A7 FA 61 FC | 	wrlong	result1, fp
20360     00 FA 4D F2 | 	cmps	result1, #0 wz
20364     14 4E 85 F1 | 	sub	fp, #20
20368     20 00 90 5D |  if_ne	jmp	#LR__3570
2036c     04 4E 05 F1 | 	add	fp, #4
20370     A7 14 02 FB | 	rdlong	arg02, fp
20374     11 14 06 F1 | 	add	arg02, #17
20378     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2037c     10 4E 05 F1 | 	add	fp, #16
20380     A7 14 62 FC | 	wrlong	arg02, fp
20384     14 4E 85 F1 | 	sub	fp, #20
20388     10 00 90 AD |  if_e	jmp	#LR__3571
2038c                 | LR__3570
2038c     14 4E 05 F1 | 	add	fp, #20
20390     A7 FA 01 FB | 	rdlong	result1, fp
20394     14 4E 85 F1 | 	sub	fp, #20
20398     EC 05 90 FD | 	jmp	#LR__3590
2039c                 | LR__3571
2039c     04 4E 05 F1 | 	add	fp, #4
203a0     A7 18 02 FB | 	rdlong	arg04, fp
203a4     04 4E 85 F1 | 	sub	fp, #4
203a8     10 18 06 F1 | 	add	arg04, #16
203ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
203b0     01 18 CE F7 | 	test	arg04, #1 wz
203b4     07 FA 05 A6 |  if_e	mov	result1, #7
203b8     CC 05 90 AD |  if_e	jmp	#LR__3590
203bc     04 4E 05 F1 | 	add	fp, #4
203c0     A7 1E 02 FB | 	rdlong	local01, fp
203c4     0F 21 02 F6 | 	mov	local02, local01
203c8     0C 20 06 F1 | 	add	local02, #12
203cc     10 23 02 FB | 	rdlong	local03, local02
203d0     14 1E 06 F1 | 	add	local01, #20
203d4     0F 1F 02 FB | 	rdlong	local01, local01
203d8     0F 23 82 F1 | 	sub	local03, local01
203dc     20 4E 05 F1 | 	add	fp, #32
203e0     A7 22 62 FC | 	wrlong	local03, fp
203e4     18 4E 85 F1 | 	sub	fp, #24
203e8     A7 24 02 FB | 	rdlong	local04, fp
203ec     0C 4E 85 F1 | 	sub	fp, #12
203f0     11 25 1A F2 | 	cmp	local04, local03 wcz
203f4     24 4E 05 11 |  if_a	add	fp, #36
203f8     A7 24 02 1B |  if_a	rdlong	local04, fp
203fc     18 4E 85 11 |  if_a	sub	fp, #24
20400     A7 24 62 1C |  if_a	wrlong	local04, fp
20404     0C 4E 85 11 |  if_a	sub	fp, #12
20408                 | ' 
20408                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
20408                 | LR__3572
20408     0C 4E 05 F1 | 	add	fp, #12
2040c     A7 20 02 FB | 	rdlong	local02, fp
20410     0C 4E 85 F1 | 	sub	fp, #12
20414     10 25 02 F6 | 	mov	local04, local02
20418     01 24 16 F2 | 	cmp	local04, #1 wc
2041c     64 05 90 CD |  if_b	jmp	#LR__3589
20420     04 4E 05 F1 | 	add	fp, #4
20424     A7 22 02 FB | 	rdlong	local03, fp
20428     04 4E 85 F1 | 	sub	fp, #4
2042c     14 22 06 F1 | 	add	local03, #20
20430     11 23 02 FB | 	rdlong	local03, local03
20434     FF 23 CE F7 | 	test	local03, #511 wz
20438     3C 04 90 5D |  if_ne	jmp	#LR__3587
2043c     04 4E 05 F1 | 	add	fp, #4
20440     A7 1E 02 FB | 	rdlong	local01, fp
20444     14 1E 06 F1 | 	add	local01, #20
20448     0F 23 02 FB | 	rdlong	local03, local01
2044c     09 22 46 F0 | 	shr	local03, #9
20450     14 4E 05 F1 | 	add	fp, #20
20454     A7 26 02 FB | 	rdlong	local05, fp
20458     13 29 02 F6 | 	mov	local06, local05
2045c     0A 28 06 F1 | 	add	local06, #10
20460     14 2B E2 FA | 	rdword	local07, local06
20464     0A 28 86 F1 | 	sub	local06, #10
20468     15 2D 32 F9 | 	getword	local08, local07, #0
2046c     01 2C 86 F1 | 	sub	local08, #1
20470     16 23 0A F5 | 	and	local03, local08 wz
20474     18 4E 05 F1 | 	add	fp, #24
20478     A7 22 62 FC | 	wrlong	local03, fp
2047c     30 4E 85 F1 | 	sub	fp, #48
20480     E0 00 90 5D |  if_ne	jmp	#LR__3577
20484     04 4E 05 F1 | 	add	fp, #4
20488     A7 22 02 FB | 	rdlong	local03, fp
2048c     04 4E 85 F1 | 	sub	fp, #4
20490     14 22 06 F1 | 	add	local03, #20
20494     11 23 0A FB | 	rdlong	local03, local03 wz
20498     20 00 90 5D |  if_ne	jmp	#LR__3573
2049c     04 4E 05 F1 | 	add	fp, #4
204a0     A7 22 02 FB | 	rdlong	local03, fp
204a4     08 22 06 F1 | 	add	local03, #8
204a8     11 23 02 FB | 	rdlong	local03, local03
204ac     18 4E 05 F1 | 	add	fp, #24
204b0     A7 22 62 FC | 	wrlong	local03, fp
204b4     1C 4E 85 F1 | 	sub	fp, #28
204b8     28 00 90 FD | 	jmp	#LR__3574
204bc                 | LR__3573
204bc     04 4E 05 F1 | 	add	fp, #4
204c0     A7 2C 02 FB | 	rdlong	local08, fp
204c4     16 13 02 F6 | 	mov	arg01, local08
204c8     04 4E 85 F1 | 	sub	fp, #4
204cc     18 2C 06 F1 | 	add	local08, #24
204d0     16 15 02 FB | 	rdlong	arg02, local08
204d4     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
204d8     1C 4E 05 F1 | 	add	fp, #28
204dc     A7 FA 61 FC | 	wrlong	result1, fp
204e0     1C 4E 85 F1 | 	sub	fp, #28
204e4                 | LR__3574
204e4     1C 4E 05 F1 | 	add	fp, #28
204e8     A7 22 02 FB | 	rdlong	local03, fp
204ec     1C 4E 85 F1 | 	sub	fp, #28
204f0     02 22 16 F2 | 	cmp	local03, #2 wc
204f4     1C 00 90 3D |  if_ae	jmp	#LR__3575
204f8     04 4E 05 F1 | 	add	fp, #4
204fc     A7 22 02 FB | 	rdlong	local03, fp
20500     04 4E 85 F1 | 	sub	fp, #4
20504     11 22 06 F1 | 	add	local03, #17
20508     11 05 48 FC | 	wrbyte	#2, local03
2050c     02 FA 05 F6 | 	mov	result1, #2
20510     74 04 90 FD | 	jmp	#LR__3590
20514                 | LR__3575
20514     1C 4E 05 F1 | 	add	fp, #28
20518     A7 22 02 FB | 	rdlong	local03, fp
2051c     1C 4E 85 F1 | 	sub	fp, #28
20520     FF FF 7F FF 
20524     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20528     1C 00 90 5D |  if_ne	jmp	#LR__3576
2052c     04 4E 05 F1 | 	add	fp, #4
20530     A7 22 02 FB | 	rdlong	local03, fp
20534     04 4E 85 F1 | 	sub	fp, #4
20538     11 22 06 F1 | 	add	local03, #17
2053c     11 03 48 FC | 	wrbyte	#1, local03
20540     01 FA 05 F6 | 	mov	result1, #1
20544     40 04 90 FD | 	jmp	#LR__3590
20548                 | LR__3576
20548     04 4E 05 F1 | 	add	fp, #4
2054c     A7 22 02 FB | 	rdlong	local03, fp
20550     18 4E 05 F1 | 	add	fp, #24
20554     A7 2C 02 FB | 	rdlong	local08, fp
20558     1C 4E 85 F1 | 	sub	fp, #28
2055c     18 22 06 F1 | 	add	local03, #24
20560     11 2D 62 FC | 	wrlong	local08, local03
20564                 | LR__3577
20564     18 4E 05 F1 | 	add	fp, #24
20568     A7 12 02 FB | 	rdlong	arg01, fp
2056c     14 4E 85 F1 | 	sub	fp, #20
20570     A7 22 02 FB | 	rdlong	local03, fp
20574     04 4E 85 F1 | 	sub	fp, #4
20578     18 22 06 F1 | 	add	local03, #24
2057c     11 15 02 FB | 	rdlong	arg02, local03
20580     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
20584     20 4E 05 F1 | 	add	fp, #32
20588     A7 FA 61 FC | 	wrlong	result1, fp
2058c     20 4E 85 F1 | 	sub	fp, #32
20590     00 FA 0D F2 | 	cmp	result1, #0 wz
20594     1C 00 90 5D |  if_ne	jmp	#LR__3578
20598     04 4E 05 F1 | 	add	fp, #4
2059c     A7 22 02 FB | 	rdlong	local03, fp
205a0     04 4E 85 F1 | 	sub	fp, #4
205a4     11 22 06 F1 | 	add	local03, #17
205a8     11 05 48 FC | 	wrbyte	#2, local03
205ac     02 FA 05 F6 | 	mov	result1, #2
205b0     D4 03 90 FD | 	jmp	#LR__3590
205b4                 | LR__3578
205b4     20 4E 05 F1 | 	add	fp, #32
205b8     A7 22 02 FB | 	rdlong	local03, fp
205bc     10 4E 05 F1 | 	add	fp, #16
205c0     A7 2C 02 FB | 	rdlong	local08, fp
205c4     16 23 02 F1 | 	add	local03, local08
205c8     10 4E 85 F1 | 	sub	fp, #16
205cc     A7 22 62 FC | 	wrlong	local03, fp
205d0     14 4E 85 F1 | 	sub	fp, #20
205d4     A7 22 02 FB | 	rdlong	local03, fp
205d8     09 22 46 F0 | 	shr	local03, #9
205dc     20 4E 05 F1 | 	add	fp, #32
205e0     A7 22 62 FC | 	wrlong	local03, fp
205e4     2C 4E 85 F1 | 	sub	fp, #44
205e8     01 22 16 F2 | 	cmp	local03, #1 wc
205ec     5C 01 90 CD |  if_b	jmp	#LR__3582
205f0     30 4E 05 F1 | 	add	fp, #48
205f4     A7 22 02 FB | 	rdlong	local03, fp
205f8     04 4E 85 F1 | 	sub	fp, #4
205fc     A7 2C 02 FB | 	rdlong	local08, fp
20600     16 23 02 F1 | 	add	local03, local08
20604     14 4E 85 F1 | 	sub	fp, #20
20608     A7 2C 02 FB | 	rdlong	local08, fp
2060c     18 4E 85 F1 | 	sub	fp, #24
20610     0A 2C 06 F1 | 	add	local08, #10
20614     16 2D E2 FA | 	rdword	local08, local08
20618     16 23 1A F2 | 	cmp	local03, local08 wcz
2061c     28 00 90 ED |  if_be	jmp	#LR__3579
20620     18 4E 05 F1 | 	add	fp, #24
20624     A7 1E 02 FB | 	rdlong	local01, fp
20628     0A 1E 06 F1 | 	add	local01, #10
2062c     0F 23 E2 FA | 	rdword	local03, local01
20630     18 4E 05 F1 | 	add	fp, #24
20634     A7 2C 02 FB | 	rdlong	local08, fp
20638     16 23 82 F1 | 	sub	local03, local08
2063c     04 4E 85 F1 | 	sub	fp, #4
20640     A7 22 62 FC | 	wrlong	local03, fp
20644     2C 4E 85 F1 | 	sub	fp, #44
20648                 | LR__3579
20648     18 4E 05 F1 | 	add	fp, #24
2064c     A7 1E 02 FB | 	rdlong	local01, fp
20650     01 1E 06 F1 | 	add	local01, #1
20654     0F 13 C2 FA | 	rdbyte	arg01, local01
20658     1C 4E 05 F1 | 	add	fp, #28
2065c     A7 14 02 FB | 	rdlong	arg02, fp
20660     14 4E 85 F1 | 	sub	fp, #20
20664     A7 16 02 FB | 	rdlong	arg03, fp
20668     0C 4E 05 F1 | 	add	fp, #12
2066c     A7 18 02 FB | 	rdlong	arg04, fp
20670     2C 4E 85 F1 | 	sub	fp, #44
20674     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
20678     00 FA 0D F2 | 	cmp	result1, #0 wz
2067c     1C 00 90 AD |  if_e	jmp	#LR__3580
20680     04 4E 05 F1 | 	add	fp, #4
20684     A7 22 02 FB | 	rdlong	local03, fp
20688     04 4E 85 F1 | 	sub	fp, #4
2068c     11 22 06 F1 | 	add	local03, #17
20690     11 03 48 FC | 	wrbyte	#1, local03
20694     01 FA 05 F6 | 	mov	result1, #1
20698     EC 02 90 FD | 	jmp	#LR__3590
2069c                 | LR__3580
2069c     04 4E 05 F1 | 	add	fp, #4
206a0     A7 1E 02 FB | 	rdlong	local01, fp
206a4     04 4E 85 F1 | 	sub	fp, #4
206a8     10 1E 06 F1 | 	add	local01, #16
206ac     0F 23 C2 FA | 	rdbyte	local03, local01
206b0     80 22 CE F7 | 	test	local03, #128 wz
206b4     78 00 90 AD |  if_e	jmp	#LR__3581
206b8     04 4E 05 F1 | 	add	fp, #4
206bc     A7 2C 02 FB | 	rdlong	local08, fp
206c0     1C 2C 06 F1 | 	add	local08, #28
206c4     16 2D 02 FB | 	rdlong	local08, local08
206c8     1C 4E 05 F1 | 	add	fp, #28
206cc     A7 2E 02 FB | 	rdlong	local09, fp
206d0     17 2D 82 F1 | 	sub	local08, local09
206d4     0C 4E 05 F1 | 	add	fp, #12
206d8     A7 30 02 FB | 	rdlong	local10, fp
206dc     2C 4E 85 F1 | 	sub	fp, #44
206e0     18 33 02 F6 | 	mov	local11, local10
206e4     19 2D 12 F2 | 	cmp	local08, local11 wc
206e8     44 00 90 3D |  if_ae	jmp	#LR__3581
206ec     34 4E 05 F1 | 	add	fp, #52
206f0     A7 12 02 FB | 	rdlong	arg01, fp
206f4     30 4E 85 F1 | 	sub	fp, #48
206f8     A7 14 02 FB | 	rdlong	arg02, fp
206fc     0A 33 02 F6 | 	mov	local11, arg02
20700     1C 32 06 F1 | 	add	local11, #28
20704     19 2F 02 FB | 	rdlong	local09, local11
20708     1C 4E 05 F1 | 	add	fp, #28
2070c     A7 26 02 FB | 	rdlong	local05, fp
20710     13 2F 82 F1 | 	sub	local09, local05
20714     09 2E 66 F0 | 	shl	local09, #9
20718     17 33 02 F6 | 	mov	local11, local09
2071c     17 13 02 F1 | 	add	arg01, local09
20720     20 4E 85 F1 | 	sub	fp, #32
20724     28 14 06 F1 | 	add	arg02, #40
20728     09 16 C6 F9 | 	decod	arg03, #9
2072c     A0 4C BF FD | 	call	#__system____builtin_memmove
20730                 | LR__3581
20730     2C 4E 05 F1 | 	add	fp, #44
20734     A7 22 02 FB | 	rdlong	local03, fp
20738     09 22 66 F0 | 	shl	local03, #9
2073c     04 4E 85 F1 | 	sub	fp, #4
20740     A7 22 62 FC | 	wrlong	local03, fp
20744     28 4E 85 F1 | 	sub	fp, #40
20748                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
20748                 | ' 				}
20748                 | ' 
20748                 | ' 
20748                 | ' 				rcnt =  ((UINT) 512 )  * cc;
20748                 | ' 				continue;
20748     B4 01 90 FD | 	jmp	#LR__3588
2074c                 | LR__3582
2074c     04 4E 05 F1 | 	add	fp, #4
20750     A7 22 02 FB | 	rdlong	local03, fp
20754     1C 22 06 F1 | 	add	local03, #28
20758     11 23 02 FB | 	rdlong	local03, local03
2075c     1C 4E 05 F1 | 	add	fp, #28
20760     A7 1E 02 FB | 	rdlong	local01, fp
20764     20 4E 85 F1 | 	sub	fp, #32
20768     0F 23 0A F2 | 	cmp	local03, local01 wz
2076c     EC 00 90 AD |  if_e	jmp	#LR__3586
20770     04 4E 05 F1 | 	add	fp, #4
20774     A7 1E 02 FB | 	rdlong	local01, fp
20778     04 4E 85 F1 | 	sub	fp, #4
2077c     10 1E 06 F1 | 	add	local01, #16
20780     0F 23 C2 FA | 	rdbyte	local03, local01
20784     80 22 CE F7 | 	test	local03, #128 wz
20788     7C 00 90 AD |  if_e	jmp	#LR__3584
2078c     18 4E 05 F1 | 	add	fp, #24
20790     A7 1E 02 FB | 	rdlong	local01, fp
20794     01 1E 06 F1 | 	add	local01, #1
20798     0F 13 C2 FA | 	rdbyte	arg01, local01
2079c     14 4E 85 F1 | 	sub	fp, #20
207a0     A7 22 02 FB | 	rdlong	local03, fp
207a4     11 15 02 F6 | 	mov	arg02, local03
207a8     28 14 06 F1 | 	add	arg02, #40
207ac     04 4E 85 F1 | 	sub	fp, #4
207b0     1C 22 06 F1 | 	add	local03, #28
207b4     11 17 02 FB | 	rdlong	arg03, local03
207b8     01 18 06 F6 | 	mov	arg04, #1
207bc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
207c0     00 FA 0D F2 | 	cmp	result1, #0 wz
207c4     1C 00 90 AD |  if_e	jmp	#LR__3583
207c8     04 4E 05 F1 | 	add	fp, #4
207cc     A7 22 02 FB | 	rdlong	local03, fp
207d0     04 4E 85 F1 | 	sub	fp, #4
207d4     11 22 06 F1 | 	add	local03, #17
207d8     11 03 48 FC | 	wrbyte	#1, local03
207dc     01 FA 05 F6 | 	mov	result1, #1
207e0     A4 01 90 FD | 	jmp	#LR__3590
207e4                 | LR__3583
207e4     04 4E 05 F1 | 	add	fp, #4
207e8     A7 32 02 FB | 	rdlong	local11, fp
207ec     19 23 02 F6 | 	mov	local03, local11
207f0     04 4E 85 F1 | 	sub	fp, #4
207f4     10 32 06 F1 | 	add	local11, #16
207f8     19 33 C2 FA | 	rdbyte	local11, local11
207fc     7F 32 06 F5 | 	and	local11, #127
20800     10 22 06 F1 | 	add	local03, #16
20804     11 33 42 FC | 	wrbyte	local11, local03
20808                 | LR__3584
20808     18 4E 05 F1 | 	add	fp, #24
2080c     A7 1E 02 FB | 	rdlong	local01, fp
20810     01 1E 06 F1 | 	add	local01, #1
20814     0F 13 C2 FA | 	rdbyte	arg01, local01
20818     14 4E 85 F1 | 	sub	fp, #20
2081c     A7 14 02 FB | 	rdlong	arg02, fp
20820     28 14 06 F1 | 	add	arg02, #40
20824     1C 4E 05 F1 | 	add	fp, #28
20828     A7 16 02 FB | 	rdlong	arg03, fp
2082c     20 4E 85 F1 | 	sub	fp, #32
20830     01 18 06 F6 | 	mov	arg04, #1
20834     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
20838     00 FA 0D F2 | 	cmp	result1, #0 wz
2083c     1C 00 90 AD |  if_e	jmp	#LR__3585
20840     04 4E 05 F1 | 	add	fp, #4
20844     A7 22 02 FB | 	rdlong	local03, fp
20848     04 4E 85 F1 | 	sub	fp, #4
2084c     11 22 06 F1 | 	add	local03, #17
20850     11 03 48 FC | 	wrbyte	#1, local03
20854     01 FA 05 F6 | 	mov	result1, #1
20858     2C 01 90 FD | 	jmp	#LR__3590
2085c                 | LR__3585
2085c                 | LR__3586
2085c     04 4E 05 F1 | 	add	fp, #4
20860     A7 22 02 FB | 	rdlong	local03, fp
20864     1C 4E 05 F1 | 	add	fp, #28
20868     A7 32 02 FB | 	rdlong	local11, fp
2086c     20 4E 85 F1 | 	sub	fp, #32
20870     1C 22 06 F1 | 	add	local03, #28
20874     11 33 62 FC | 	wrlong	local11, local03
20878                 | LR__3587
20878     04 4E 05 F1 | 	add	fp, #4
2087c     A7 1E 02 FB | 	rdlong	local01, fp
20880     14 1E 06 F1 | 	add	local01, #20
20884     0F 33 02 FB | 	rdlong	local11, local01
20888     FF 33 06 F5 | 	and	local11, #511
2088c     09 22 C6 F9 | 	decod	local03, #9
20890     19 23 82 F1 | 	sub	local03, local11
20894     24 4E 05 F1 | 	add	fp, #36
20898     A7 22 62 FC | 	wrlong	local03, fp
2089c     1C 4E 85 F1 | 	sub	fp, #28
208a0     A7 32 02 FB | 	rdlong	local11, fp
208a4     0C 4E 85 F1 | 	sub	fp, #12
208a8     19 23 1A F2 | 	cmp	local03, local11 wcz
208ac     0C 4E 05 11 |  if_a	add	fp, #12
208b0     A7 22 02 1B |  if_a	rdlong	local03, fp
208b4     1C 4E 05 11 |  if_a	add	fp, #28
208b8     A7 22 62 1C |  if_a	wrlong	local03, fp
208bc     28 4E 85 11 |  if_a	sub	fp, #40
208c0     34 4E 05 F1 | 	add	fp, #52
208c4     A7 12 02 FB | 	rdlong	arg01, fp
208c8     30 4E 85 F1 | 	sub	fp, #48
208cc     A7 28 02 FB | 	rdlong	local06, fp
208d0     14 15 02 F6 | 	mov	arg02, local06
208d4     28 14 06 F1 | 	add	arg02, #40
208d8     14 28 06 F1 | 	add	local06, #20
208dc     14 33 02 FB | 	rdlong	local11, local06
208e0     19 2F 02 F6 | 	mov	local09, local11
208e4     17 31 02 F6 | 	mov	local10, local09
208e8     FF 31 06 F5 | 	and	local10, #511
208ec     18 15 02 F1 | 	add	arg02, local10
208f0     24 4E 05 F1 | 	add	fp, #36
208f4     A7 16 02 FB | 	rdlong	arg03, fp
208f8     28 4E 85 F1 | 	sub	fp, #40
208fc     D0 4A BF FD | 	call	#__system____builtin_memmove
20900                 | LR__3588
20900     0C 4E 05 F1 | 	add	fp, #12
20904     A7 22 02 FB | 	rdlong	local03, fp
20908     1C 4E 05 F1 | 	add	fp, #28
2090c     A7 2C 02 FB | 	rdlong	local08, fp
20910     16 23 82 F1 | 	sub	local03, local08
20914     1C 4E 85 F1 | 	sub	fp, #28
20918     A7 22 62 FC | 	wrlong	local03, fp
2091c     04 4E 05 F1 | 	add	fp, #4
20920     A7 1E 02 FB | 	rdlong	local01, fp
20924     0F 2B 02 FB | 	rdlong	local07, local01
20928     18 4E 05 F1 | 	add	fp, #24
2092c     A7 2C 02 FB | 	rdlong	local08, fp
20930     16 2B 02 F1 | 	add	local07, local08
20934     0F 2B 62 FC | 	wrlong	local07, local01
20938     0C 4E 05 F1 | 	add	fp, #12
2093c     A7 22 02 FB | 	rdlong	local03, fp
20940     0C 4E 85 F1 | 	sub	fp, #12
20944     A7 34 02 FB | 	rdlong	local12, fp
20948     1A 23 02 F1 | 	add	local03, local12
2094c     0C 4E 05 F1 | 	add	fp, #12
20950     A7 22 62 FC | 	wrlong	local03, fp
20954     30 4E 85 F1 | 	sub	fp, #48
20958     A7 36 02 FB | 	rdlong	local13, fp
2095c     1B 23 02 F6 | 	mov	local03, local13
20960     14 36 06 F1 | 	add	local13, #20
20964     1B 39 02 FB | 	rdlong	local14, local13
20968     24 4E 05 F1 | 	add	fp, #36
2096c     A7 28 02 FB | 	rdlong	local06, fp
20970     28 4E 85 F1 | 	sub	fp, #40
20974     14 39 02 F1 | 	add	local14, local06
20978     14 22 06 F1 | 	add	local03, #20
2097c     11 39 62 FC | 	wrlong	local14, local03
20980     84 FA 9F FD | 	jmp	#LR__3572
20984                 | LR__3589
20984                 | ' 
20984                 | ' 
20984                 | ' 
20984                 | ' 
20984                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
20984                 | ' 
20984                 | ' 	}
20984                 | ' 
20984                 | ' 	return FR_OK ;
20984     00 FA 05 F6 | 	mov	result1, #0
20988                 | LR__3590
20988     A7 F0 03 F6 | 	mov	ptra, fp
2098c     B2 00 A0 FD | 	call	#popregs_
20990                 | _fatfs_cc_f_read_ret
20990     2D 00 64 FD | 	ret
20994                 | 
20994                 | _fatfs_cc_f_write
20994     15 4A 05 F6 | 	mov	COUNT_, #21
20998     A8 00 A0 FD | 	call	#pushregs_
2099c     34 F0 07 F1 | 	add	ptra, #52
209a0     04 4E 05 F1 | 	add	fp, #4
209a4     A7 12 62 FC | 	wrlong	arg01, fp
209a8     04 4E 05 F1 | 	add	fp, #4
209ac     A7 14 62 FC | 	wrlong	arg02, fp
209b0     04 4E 05 F1 | 	add	fp, #4
209b4     A7 16 62 FC | 	wrlong	arg03, fp
209b8     04 4E 05 F1 | 	add	fp, #4
209bc     A7 18 62 FC | 	wrlong	arg04, fp
209c0     08 4E 85 F1 | 	sub	fp, #8
209c4     A7 FA 01 FB | 	rdlong	result1, fp
209c8     28 4E 05 F1 | 	add	fp, #40
209cc     A7 FA 61 FC | 	wrlong	result1, fp
209d0     20 4E 85 F1 | 	sub	fp, #32
209d4     A7 FA 01 FB | 	rdlong	result1, fp
209d8     FD 00 68 FC | 	wrlong	#0, result1
209dc     0C 4E 85 F1 | 	sub	fp, #12
209e0     A7 12 02 FB | 	rdlong	arg01, fp
209e4     14 4E 05 F1 | 	add	fp, #20
209e8     A7 14 02 F6 | 	mov	arg02, fp
209ec     18 4E 85 F1 | 	sub	fp, #24
209f0     88 F0 BF FD | 	call	#_fatfs_cc_validate
209f4     14 4E 05 F1 | 	add	fp, #20
209f8     A7 FA 61 FC | 	wrlong	result1, fp
209fc     00 FA 4D F2 | 	cmps	result1, #0 wz
20a00     14 4E 85 F1 | 	sub	fp, #20
20a04     20 00 90 5D |  if_ne	jmp	#LR__3600
20a08     04 4E 05 F1 | 	add	fp, #4
20a0c     A7 14 02 FB | 	rdlong	arg02, fp
20a10     11 14 06 F1 | 	add	arg02, #17
20a14     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20a18     10 4E 05 F1 | 	add	fp, #16
20a1c     A7 14 62 FC | 	wrlong	arg02, fp
20a20     14 4E 85 F1 | 	sub	fp, #20
20a24     10 00 90 AD |  if_e	jmp	#LR__3601
20a28                 | LR__3600
20a28     14 4E 05 F1 | 	add	fp, #20
20a2c     A7 FA 01 FB | 	rdlong	result1, fp
20a30     14 4E 85 F1 | 	sub	fp, #20
20a34     44 07 90 FD | 	jmp	#LR__3623
20a38                 | LR__3601
20a38     04 4E 05 F1 | 	add	fp, #4
20a3c     A7 14 02 FB | 	rdlong	arg02, fp
20a40     04 4E 85 F1 | 	sub	fp, #4
20a44     10 14 06 F1 | 	add	arg02, #16
20a48     0A 15 C2 FA | 	rdbyte	arg02, arg02
20a4c     02 14 CE F7 | 	test	arg02, #2 wz
20a50     07 FA 05 A6 |  if_e	mov	result1, #7
20a54     24 07 90 AD |  if_e	jmp	#LR__3623
20a58     04 4E 05 F1 | 	add	fp, #4
20a5c     A7 14 02 FB | 	rdlong	arg02, fp
20a60     0A 13 02 F6 | 	mov	arg01, arg02
20a64     14 12 06 F1 | 	add	arg01, #20
20a68     09 13 02 FB | 	rdlong	arg01, arg01
20a6c     08 4E 05 F1 | 	add	fp, #8
20a70     A7 FA 01 FB | 	rdlong	result1, fp
20a74     FD 12 02 F1 | 	add	arg01, result1
20a78     0C 4E 85 F1 | 	sub	fp, #12
20a7c     14 14 06 F1 | 	add	arg02, #20
20a80     0A FB 01 FB | 	rdlong	result1, arg02
20a84     FD 12 12 F2 | 	cmp	arg01, result1 wc
20a88     24 00 90 3D |  if_ae	jmp	#LR__3602
20a8c     04 4E 05 F1 | 	add	fp, #4
20a90     A7 14 02 FB | 	rdlong	arg02, fp
20a94     01 FA 65 F6 | 	neg	result1, #1
20a98     14 14 06 F1 | 	add	arg02, #20
20a9c     0A 15 02 FB | 	rdlong	arg02, arg02
20aa0     0A FB 81 F1 | 	sub	result1, arg02
20aa4     08 4E 05 F1 | 	add	fp, #8
20aa8     A7 FA 61 FC | 	wrlong	result1, fp
20aac     0C 4E 85 F1 | 	sub	fp, #12
20ab0                 | LR__3602
20ab0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20ab0                 | ' 	}
20ab0                 | ' 
20ab0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20ab0                 | LR__3603
20ab0     0C 4E 05 F1 | 	add	fp, #12
20ab4     A7 FA 01 FB | 	rdlong	result1, fp
20ab8     0C 4E 85 F1 | 	sub	fp, #12
20abc     01 FA 15 F2 | 	cmp	result1, #1 wc
20ac0     90 06 90 CD |  if_b	jmp	#LR__3622
20ac4     04 4E 05 F1 | 	add	fp, #4
20ac8     A7 FA 01 FB | 	rdlong	result1, fp
20acc     04 4E 85 F1 | 	sub	fp, #4
20ad0     14 FA 05 F1 | 	add	result1, #20
20ad4     FD FA 01 FB | 	rdlong	result1, result1
20ad8     FF FB CD F7 | 	test	result1, #511 wz
20adc     D8 04 90 5D |  if_ne	jmp	#LR__3618
20ae0     04 4E 05 F1 | 	add	fp, #4
20ae4     A7 FA 01 FB | 	rdlong	result1, fp
20ae8     14 FA 05 F1 | 	add	result1, #20
20aec     FD FA 01 FB | 	rdlong	result1, result1
20af0     09 FA 45 F0 | 	shr	result1, #9
20af4     14 4E 05 F1 | 	add	fp, #20
20af8     A7 14 02 FB | 	rdlong	arg02, fp
20afc     0A 14 06 F1 | 	add	arg02, #10
20b00     0A 19 E2 FA | 	rdword	arg04, arg02
20b04     0C 15 32 F9 | 	getword	arg02, arg04, #0
20b08     01 14 86 F1 | 	sub	arg02, #1
20b0c     0A FB 09 F5 | 	and	result1, arg02 wz
20b10     14 4E 05 F1 | 	add	fp, #20
20b14     A7 FA 61 FC | 	wrlong	result1, fp
20b18     2C 4E 85 F1 | 	sub	fp, #44
20b1c     44 01 90 5D |  if_ne	jmp	#LR__3609
20b20     04 4E 05 F1 | 	add	fp, #4
20b24     A7 FA 01 FB | 	rdlong	result1, fp
20b28     04 4E 85 F1 | 	sub	fp, #4
20b2c     14 FA 05 F1 | 	add	result1, #20
20b30     FD 14 0A FB | 	rdlong	arg02, result1 wz
20b34     44 00 90 5D |  if_ne	jmp	#LR__3604
20b38     04 4E 05 F1 | 	add	fp, #4
20b3c     A7 14 02 FB | 	rdlong	arg02, fp
20b40     08 14 06 F1 | 	add	arg02, #8
20b44     0A 15 0A FB | 	rdlong	arg02, arg02 wz
20b48     18 4E 05 F1 | 	add	fp, #24
20b4c     A7 14 62 FC | 	wrlong	arg02, fp
20b50     1C 4E 85 F1 | 	sub	fp, #28
20b54     4C 00 90 5D |  if_ne	jmp	#LR__3605
20b58     04 4E 05 F1 | 	add	fp, #4
20b5c     A7 12 02 FB | 	rdlong	arg01, fp
20b60     04 4E 85 F1 | 	sub	fp, #4
20b64     00 14 06 F6 | 	mov	arg02, #0
20b68     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
20b6c     1C 4E 05 F1 | 	add	fp, #28
20b70     A7 FA 61 FC | 	wrlong	result1, fp
20b74     1C 4E 85 F1 | 	sub	fp, #28
20b78     28 00 90 FD | 	jmp	#LR__3605
20b7c                 | LR__3604
20b7c     04 4E 05 F1 | 	add	fp, #4
20b80     A7 18 02 FB | 	rdlong	arg04, fp
20b84     0C 13 02 F6 | 	mov	arg01, arg04
20b88     04 4E 85 F1 | 	sub	fp, #4
20b8c     18 18 06 F1 | 	add	arg04, #24
20b90     0C 15 02 FB | 	rdlong	arg02, arg04
20b94     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
20b98     1C 4E 05 F1 | 	add	fp, #28
20b9c     A7 FA 61 FC | 	wrlong	result1, fp
20ba0     1C 4E 85 F1 | 	sub	fp, #28
20ba4                 | LR__3605
20ba4     1C 4E 05 F1 | 	add	fp, #28
20ba8     A7 FA 09 FB | 	rdlong	result1, fp wz
20bac     1C 4E 85 F1 | 	sub	fp, #28
20bb0     A0 05 90 AD |  if_e	jmp	#LR__3622
20bb4     1C 4E 05 F1 | 	add	fp, #28
20bb8     A7 FA 01 FB | 	rdlong	result1, fp
20bbc     1C 4E 85 F1 | 	sub	fp, #28
20bc0     01 FA 0D F2 | 	cmp	result1, #1 wz
20bc4     1C 00 90 5D |  if_ne	jmp	#LR__3606
20bc8     04 4E 05 F1 | 	add	fp, #4
20bcc     A7 FA 01 FB | 	rdlong	result1, fp
20bd0     04 4E 85 F1 | 	sub	fp, #4
20bd4     11 FA 05 F1 | 	add	result1, #17
20bd8     FD 04 48 FC | 	wrbyte	#2, result1
20bdc     02 FA 05 F6 | 	mov	result1, #2
20be0     98 05 90 FD | 	jmp	#LR__3623
20be4                 | LR__3606
20be4     1C 4E 05 F1 | 	add	fp, #28
20be8     A7 FA 01 FB | 	rdlong	result1, fp
20bec     1C 4E 85 F1 | 	sub	fp, #28
20bf0     FF FF 7F FF 
20bf4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20bf8     1C 00 90 5D |  if_ne	jmp	#LR__3607
20bfc     04 4E 05 F1 | 	add	fp, #4
20c00     A7 FA 01 FB | 	rdlong	result1, fp
20c04     04 4E 85 F1 | 	sub	fp, #4
20c08     11 FA 05 F1 | 	add	result1, #17
20c0c     FD 02 48 FC | 	wrbyte	#1, result1
20c10     01 FA 05 F6 | 	mov	result1, #1
20c14     64 05 90 FD | 	jmp	#LR__3623
20c18                 | LR__3607
20c18     04 4E 05 F1 | 	add	fp, #4
20c1c     A7 FA 01 FB | 	rdlong	result1, fp
20c20     18 4E 05 F1 | 	add	fp, #24
20c24     A7 18 02 FB | 	rdlong	arg04, fp
20c28     18 FA 05 F1 | 	add	result1, #24
20c2c     FD 18 62 FC | 	wrlong	arg04, result1
20c30     18 4E 85 F1 | 	sub	fp, #24
20c34     A7 FA 01 FB | 	rdlong	result1, fp
20c38     04 4E 85 F1 | 	sub	fp, #4
20c3c     08 FA 05 F1 | 	add	result1, #8
20c40     FD FA 09 FB | 	rdlong	result1, result1 wz
20c44     1C 00 90 5D |  if_ne	jmp	#LR__3608
20c48     04 4E 05 F1 | 	add	fp, #4
20c4c     A7 18 02 FB | 	rdlong	arg04, fp
20c50     18 4E 05 F1 | 	add	fp, #24
20c54     A7 FA 01 FB | 	rdlong	result1, fp
20c58     1C 4E 85 F1 | 	sub	fp, #28
20c5c     08 18 06 F1 | 	add	arg04, #8
20c60     0C FB 61 FC | 	wrlong	result1, arg04
20c64                 | LR__3608
20c64                 | LR__3609
20c64     04 4E 05 F1 | 	add	fp, #4
20c68     A7 18 02 FB | 	rdlong	arg04, fp
20c6c     04 4E 85 F1 | 	sub	fp, #4
20c70     10 18 06 F1 | 	add	arg04, #16
20c74     0C 19 C2 FA | 	rdbyte	arg04, arg04
20c78     80 18 CE F7 | 	test	arg04, #128 wz
20c7c     7C 00 90 AD |  if_e	jmp	#LR__3611
20c80     18 4E 05 F1 | 	add	fp, #24
20c84     A7 18 02 FB | 	rdlong	arg04, fp
20c88     01 18 06 F1 | 	add	arg04, #1
20c8c     0C 13 C2 FA | 	rdbyte	arg01, arg04
20c90     14 4E 85 F1 | 	sub	fp, #20
20c94     A7 18 02 FB | 	rdlong	arg04, fp
20c98     0C 15 02 F6 | 	mov	arg02, arg04
20c9c     28 14 06 F1 | 	add	arg02, #40
20ca0     04 4E 85 F1 | 	sub	fp, #4
20ca4     1C 18 06 F1 | 	add	arg04, #28
20ca8     0C 17 02 FB | 	rdlong	arg03, arg04
20cac     01 18 06 F6 | 	mov	arg04, #1
20cb0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
20cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
20cb8     1C 00 90 AD |  if_e	jmp	#LR__3610
20cbc     04 4E 05 F1 | 	add	fp, #4
20cc0     A7 FA 01 FB | 	rdlong	result1, fp
20cc4     04 4E 85 F1 | 	sub	fp, #4
20cc8     11 FA 05 F1 | 	add	result1, #17
20ccc     FD 02 48 FC | 	wrbyte	#1, result1
20cd0     01 FA 05 F6 | 	mov	result1, #1
20cd4     A4 04 90 FD | 	jmp	#LR__3623
20cd8                 | LR__3610
20cd8     04 4E 05 F1 | 	add	fp, #4
20cdc     A7 18 02 FB | 	rdlong	arg04, fp
20ce0     0C FB 01 F6 | 	mov	result1, arg04
20ce4     04 4E 85 F1 | 	sub	fp, #4
20ce8     10 18 06 F1 | 	add	arg04, #16
20cec     0C 19 C2 FA | 	rdbyte	arg04, arg04
20cf0     7F 18 06 F5 | 	and	arg04, #127
20cf4     10 FA 05 F1 | 	add	result1, #16
20cf8     FD 18 42 FC | 	wrbyte	arg04, result1
20cfc                 | LR__3611
20cfc     18 4E 05 F1 | 	add	fp, #24
20d00     A7 12 02 FB | 	rdlong	arg01, fp
20d04     14 4E 85 F1 | 	sub	fp, #20
20d08     A7 14 02 FB | 	rdlong	arg02, fp
20d0c     04 4E 85 F1 | 	sub	fp, #4
20d10     18 14 06 F1 | 	add	arg02, #24
20d14     0A 15 02 FB | 	rdlong	arg02, arg02
20d18     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
20d1c     20 4E 05 F1 | 	add	fp, #32
20d20     A7 FA 61 FC | 	wrlong	result1, fp
20d24     20 4E 85 F1 | 	sub	fp, #32
20d28     00 FA 0D F2 | 	cmp	result1, #0 wz
20d2c     1C 00 90 5D |  if_ne	jmp	#LR__3612
20d30     04 4E 05 F1 | 	add	fp, #4
20d34     A7 FA 01 FB | 	rdlong	result1, fp
20d38     04 4E 85 F1 | 	sub	fp, #4
20d3c     11 FA 05 F1 | 	add	result1, #17
20d40     FD 04 48 FC | 	wrbyte	#2, result1
20d44     02 FA 05 F6 | 	mov	result1, #2
20d48     30 04 90 FD | 	jmp	#LR__3623
20d4c                 | LR__3612
20d4c     20 4E 05 F1 | 	add	fp, #32
20d50     A7 FA 01 FB | 	rdlong	result1, fp
20d54     0C 4E 05 F1 | 	add	fp, #12
20d58     A7 1E 02 FB | 	rdlong	local01, fp
20d5c     0F FB 01 F1 | 	add	result1, local01
20d60     0C 4E 85 F1 | 	sub	fp, #12
20d64     A7 FA 61 FC | 	wrlong	result1, fp
20d68     14 4E 85 F1 | 	sub	fp, #20
20d6c     A7 FA 01 FB | 	rdlong	result1, fp
20d70     09 FA 45 F0 | 	shr	result1, #9
20d74     1C 4E 05 F1 | 	add	fp, #28
20d78     A7 FA 61 FC | 	wrlong	result1, fp
20d7c     28 4E 85 F1 | 	sub	fp, #40
20d80     01 FA 15 F2 | 	cmp	result1, #1 wc
20d84     60 01 90 CD |  if_b	jmp	#LR__3616
20d88     2C 4E 05 F1 | 	add	fp, #44
20d8c     A7 FA 01 FB | 	rdlong	result1, fp
20d90     04 4E 85 F1 | 	sub	fp, #4
20d94     A7 18 02 FB | 	rdlong	arg04, fp
20d98     0C FB 01 F1 | 	add	result1, arg04
20d9c     10 4E 85 F1 | 	sub	fp, #16
20da0     A7 18 02 FB | 	rdlong	arg04, fp
20da4     18 4E 85 F1 | 	sub	fp, #24
20da8     0A 18 06 F1 | 	add	arg04, #10
20dac     0C 19 E2 FA | 	rdword	arg04, arg04
20db0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
20db4     28 00 90 ED |  if_be	jmp	#LR__3613
20db8     18 4E 05 F1 | 	add	fp, #24
20dbc     A7 FA 01 FB | 	rdlong	result1, fp
20dc0     0A FA 05 F1 | 	add	result1, #10
20dc4     FD FA E1 FA | 	rdword	result1, result1
20dc8     14 4E 05 F1 | 	add	fp, #20
20dcc     A7 18 02 FB | 	rdlong	arg04, fp
20dd0     0C FB 81 F1 | 	sub	result1, arg04
20dd4     04 4E 85 F1 | 	sub	fp, #4
20dd8     A7 FA 61 FC | 	wrlong	result1, fp
20ddc     28 4E 85 F1 | 	sub	fp, #40
20de0                 | LR__3613
20de0     18 4E 05 F1 | 	add	fp, #24
20de4     A7 18 02 FB | 	rdlong	arg04, fp
20de8     01 18 06 F1 | 	add	arg04, #1
20dec     0C 13 C2 FA | 	rdbyte	arg01, arg04
20df0     18 4E 05 F1 | 	add	fp, #24
20df4     A7 14 02 FB | 	rdlong	arg02, fp
20df8     10 4E 85 F1 | 	sub	fp, #16
20dfc     A7 16 02 FB | 	rdlong	arg03, fp
20e00     08 4E 05 F1 | 	add	fp, #8
20e04     A7 18 02 FB | 	rdlong	arg04, fp
20e08     28 4E 85 F1 | 	sub	fp, #40
20e0c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
20e10     00 FA 0D F2 | 	cmp	result1, #0 wz
20e14     1C 00 90 AD |  if_e	jmp	#LR__3614
20e18     04 4E 05 F1 | 	add	fp, #4
20e1c     A7 1E 02 FB | 	rdlong	local01, fp
20e20     04 4E 85 F1 | 	sub	fp, #4
20e24     11 1E 06 F1 | 	add	local01, #17
20e28     0F 03 48 FC | 	wrbyte	#1, local01
20e2c     01 FA 05 F6 | 	mov	result1, #1
20e30     48 03 90 FD | 	jmp	#LR__3623
20e34                 | LR__3614
20e34     04 4E 05 F1 | 	add	fp, #4
20e38     A7 FA 01 FB | 	rdlong	result1, fp
20e3c     1C FA 05 F1 | 	add	result1, #28
20e40     FD FA 01 FB | 	rdlong	result1, result1
20e44     1C 4E 05 F1 | 	add	fp, #28
20e48     A7 20 02 FB | 	rdlong	local02, fp
20e4c     10 FB 81 F1 | 	sub	result1, local02
20e50     08 4E 05 F1 | 	add	fp, #8
20e54     A7 18 02 FB | 	rdlong	arg04, fp
20e58     28 4E 85 F1 | 	sub	fp, #40
20e5c     0C FB 11 F2 | 	cmp	result1, arg04 wc
20e60     68 00 90 3D |  if_ae	jmp	#LR__3615
20e64     04 4E 05 F1 | 	add	fp, #4
20e68     A7 12 02 FB | 	rdlong	arg01, fp
20e6c     28 12 06 F1 | 	add	arg01, #40
20e70     2C 4E 05 F1 | 	add	fp, #44
20e74     A7 14 02 FB | 	rdlong	arg02, fp
20e78     2C 4E 85 F1 | 	sub	fp, #44
20e7c     A7 FA 01 FB | 	rdlong	result1, fp
20e80     1C FA 05 F1 | 	add	result1, #28
20e84     FD 22 02 FB | 	rdlong	local03, result1
20e88     1C 4E 05 F1 | 	add	fp, #28
20e8c     A7 18 02 FB | 	rdlong	arg04, fp
20e90     20 4E 85 F1 | 	sub	fp, #32
20e94     0C 23 82 F1 | 	sub	local03, arg04
20e98     09 22 66 F0 | 	shl	local03, #9
20e9c     11 15 02 F1 | 	add	arg02, local03
20ea0     09 16 C6 F9 | 	decod	arg03, #9
20ea4     28 45 BF FD | 	call	#__system____builtin_memmove
20ea8     04 4E 05 F1 | 	add	fp, #4
20eac     A7 18 02 FB | 	rdlong	arg04, fp
20eb0     0C FB 01 F6 | 	mov	result1, arg04
20eb4     04 4E 85 F1 | 	sub	fp, #4
20eb8     10 18 06 F1 | 	add	arg04, #16
20ebc     0C 19 C2 FA | 	rdbyte	arg04, arg04
20ec0     7F 18 06 F5 | 	and	arg04, #127
20ec4     10 FA 05 F1 | 	add	result1, #16
20ec8     FD 18 42 FC | 	wrbyte	arg04, result1
20ecc                 | LR__3615
20ecc     28 4E 05 F1 | 	add	fp, #40
20ed0     A7 FA 01 FB | 	rdlong	result1, fp
20ed4     09 FA 65 F0 | 	shl	result1, #9
20ed8     04 4E 85 F1 | 	sub	fp, #4
20edc     A7 FA 61 FC | 	wrlong	result1, fp
20ee0     24 4E 85 F1 | 	sub	fp, #36
20ee4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
20ee4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
20ee4                 | ' 				}
20ee4                 | ' 
20ee4                 | ' 
20ee4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
20ee4                 | ' 				continue;
20ee4     74 01 90 FD | 	jmp	#LR__3619
20ee8                 | LR__3616
20ee8     04 4E 05 F1 | 	add	fp, #4
20eec     A7 20 02 FB | 	rdlong	local02, fp
20ef0     1C 20 06 F1 | 	add	local02, #28
20ef4     10 FB 01 FB | 	rdlong	result1, local02
20ef8     1C 4E 05 F1 | 	add	fp, #28
20efc     A7 20 02 FB | 	rdlong	local02, fp
20f00     20 4E 85 F1 | 	sub	fp, #32
20f04     10 FB 09 F2 | 	cmp	result1, local02 wz
20f08     90 00 90 AD |  if_e	jmp	#LR__3617
20f0c     04 4E 05 F1 | 	add	fp, #4
20f10     A7 FA 01 FB | 	rdlong	result1, fp
20f14     FD 22 02 F6 | 	mov	local03, result1
20f18     04 4E 85 F1 | 	sub	fp, #4
20f1c     14 22 06 F1 | 	add	local03, #20
20f20     11 23 02 FB | 	rdlong	local03, local03
20f24     0C FA 05 F1 | 	add	result1, #12
20f28     FD 24 02 FB | 	rdlong	local04, result1
20f2c     12 27 02 F6 | 	mov	local05, local04
20f30     13 23 12 F2 | 	cmp	local03, local05 wc
20f34     64 00 90 3D |  if_ae	jmp	#LR__3617
20f38     18 4E 05 F1 | 	add	fp, #24
20f3c     A7 18 02 FB | 	rdlong	arg04, fp
20f40     01 18 06 F1 | 	add	arg04, #1
20f44     0C 13 C2 FA | 	rdbyte	arg01, arg04
20f48     14 4E 85 F1 | 	sub	fp, #20
20f4c     A7 28 02 FB | 	rdlong	local06, fp
20f50     28 28 06 F1 | 	add	local06, #40
20f54     14 2B 02 F6 | 	mov	local07, local06
20f58     1C 4E 05 F1 | 	add	fp, #28
20f5c     A7 2C 02 FB | 	rdlong	local08, fp
20f60     20 4E 85 F1 | 	sub	fp, #32
20f64     01 2E 06 F6 | 	mov	local09, #1
20f68     15 15 02 F6 | 	mov	arg02, local07
20f6c     16 17 02 F6 | 	mov	arg03, local08
20f70     01 18 06 F6 | 	mov	arg04, #1
20f74     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
20f78     FD 30 0A F6 | 	mov	local10, result1 wz
20f7c     1C 00 90 AD |  if_e	jmp	#LR__3617
20f80     04 4E 05 F1 | 	add	fp, #4
20f84     A7 30 02 FB | 	rdlong	local10, fp
20f88     04 4E 85 F1 | 	sub	fp, #4
20f8c     11 30 06 F1 | 	add	local10, #17
20f90     18 03 48 FC | 	wrbyte	#1, local10
20f94                 | ' 				fp->fptr < fp->obj.objsize &&
20f94                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
20f94                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
20f94     01 FA 05 F6 | 	mov	result1, #1
20f98     E0 01 90 FD | 	jmp	#LR__3623
20f9c                 | LR__3617
20f9c     04 4E 05 F1 | 	add	fp, #4
20fa0     A7 18 02 FB | 	rdlong	arg04, fp
20fa4     1C 4E 05 F1 | 	add	fp, #28
20fa8     A7 FA 01 FB | 	rdlong	result1, fp
20fac     20 4E 85 F1 | 	sub	fp, #32
20fb0     1C 18 06 F1 | 	add	arg04, #28
20fb4     0C FB 61 FC | 	wrlong	result1, arg04
20fb8                 | LR__3618
20fb8     04 4E 05 F1 | 	add	fp, #4
20fbc     A7 FA 01 FB | 	rdlong	result1, fp
20fc0     14 FA 05 F1 | 	add	result1, #20
20fc4     FD FA 01 FB | 	rdlong	result1, result1
20fc8     FF FB 05 F5 | 	and	result1, #511
20fcc     09 32 C6 F9 | 	decod	local11, #9
20fd0     FD 32 82 F1 | 	sub	local11, result1
20fd4     20 4E 05 F1 | 	add	fp, #32
20fd8     A7 32 62 FC | 	wrlong	local11, fp
20fdc     18 4E 85 F1 | 	sub	fp, #24
20fe0     A7 FA 01 FB | 	rdlong	result1, fp
20fe4     0C 4E 85 F1 | 	sub	fp, #12
20fe8     FD 32 1A F2 | 	cmp	local11, result1 wcz
20fec     0C 4E 05 11 |  if_a	add	fp, #12
20ff0     A7 32 02 1B |  if_a	rdlong	local11, fp
20ff4     18 4E 05 11 |  if_a	add	fp, #24
20ff8     A7 32 62 1C |  if_a	wrlong	local11, fp
20ffc     24 4E 85 11 |  if_a	sub	fp, #36
21000     04 4E 05 F1 | 	add	fp, #4
21004     A7 32 02 FB | 	rdlong	local11, fp
21008     19 13 02 F6 | 	mov	arg01, local11
2100c     28 12 06 F1 | 	add	arg01, #40
21010     14 32 06 F1 | 	add	local11, #20
21014     19 33 02 FB | 	rdlong	local11, local11
21018     FF 33 06 F5 | 	and	local11, #511
2101c     19 13 02 F1 | 	add	arg01, local11
21020     2C 4E 05 F1 | 	add	fp, #44
21024     A7 14 02 FB | 	rdlong	arg02, fp
21028     0C 4E 85 F1 | 	sub	fp, #12
2102c     A7 16 02 FB | 	rdlong	arg03, fp
21030     24 4E 85 F1 | 	sub	fp, #36
21034     98 43 BF FD | 	call	#__system____builtin_memmove
21038     04 4E 05 F1 | 	add	fp, #4
2103c     A7 FA 01 FB | 	rdlong	result1, fp
21040     FD 32 02 F6 | 	mov	local11, result1
21044     04 4E 85 F1 | 	sub	fp, #4
21048     10 FA 05 F1 | 	add	result1, #16
2104c     FD FA C1 FA | 	rdbyte	result1, result1
21050     80 FA 45 F5 | 	or	result1, #128
21054     10 32 06 F1 | 	add	local11, #16
21058     19 FB 41 FC | 	wrbyte	result1, local11
2105c                 | LR__3619
2105c     0C 4E 05 F1 | 	add	fp, #12
21060     A7 32 02 FB | 	rdlong	local11, fp
21064     18 4E 05 F1 | 	add	fp, #24
21068     A7 FA 01 FB | 	rdlong	result1, fp
2106c     FD 32 82 F1 | 	sub	local11, result1
21070     18 4E 85 F1 | 	sub	fp, #24
21074     A7 32 62 FC | 	wrlong	local11, fp
21078     04 4E 05 F1 | 	add	fp, #4
2107c     A7 34 02 FB | 	rdlong	local12, fp
21080     1A 33 02 FB | 	rdlong	local11, local12
21084     14 4E 05 F1 | 	add	fp, #20
21088     A7 36 02 FB | 	rdlong	local13, fp
2108c     1B 33 02 F1 | 	add	local11, local13
21090     1A 33 62 FC | 	wrlong	local11, local12
21094     0C 4E 05 F1 | 	add	fp, #12
21098     A7 32 02 FB | 	rdlong	local11, fp
2109c     0C 4E 85 F1 | 	sub	fp, #12
210a0     A7 38 02 FB | 	rdlong	local14, fp
210a4     1C 33 02 F1 | 	add	local11, local14
210a8     0C 4E 05 F1 | 	add	fp, #12
210ac     A7 32 62 FC | 	wrlong	local11, fp
210b0     2C 4E 85 F1 | 	sub	fp, #44
210b4     A7 3A 02 FB | 	rdlong	local15, fp
210b8     1D 33 02 F6 | 	mov	local11, local15
210bc     14 3A 06 F1 | 	add	local15, #20
210c0     1D 3B 02 FB | 	rdlong	local15, local15
210c4     20 4E 05 F1 | 	add	fp, #32
210c8     A7 3C 02 FB | 	rdlong	local16, fp
210cc     1E 3B 02 F1 | 	add	local15, local16
210d0     14 32 06 F1 | 	add	local11, #20
210d4     19 3B 62 FC | 	wrlong	local15, local11
210d8     20 4E 85 F1 | 	sub	fp, #32
210dc     A7 3E 02 FB | 	rdlong	local17, fp
210e0     1F 33 02 F6 | 	mov	local11, local17
210e4     1F 41 02 F6 | 	mov	local18, local17
210e8     04 4E 85 F1 | 	sub	fp, #4
210ec     14 3E 06 F1 | 	add	local17, #20
210f0     1F 43 02 FB | 	rdlong	local19, local17
210f4     0C 40 06 F1 | 	add	local18, #12
210f8     20 45 02 FB | 	rdlong	local20, local18
210fc     22 43 1A F2 | 	cmp	local19, local20 wcz
21100     24 00 90 ED |  if_be	jmp	#LR__3620
21104     04 4E 05 F1 | 	add	fp, #4
21108     A7 26 02 FB | 	rdlong	local05, fp
2110c     04 4E 85 F1 | 	sub	fp, #4
21110     13 23 02 F6 | 	mov	local03, local05
21114     14 22 06 F1 | 	add	local03, #20
21118     11 25 02 FB | 	rdlong	local04, local03
2111c     14 22 86 F1 | 	sub	local03, #20
21120     12 47 02 F6 | 	mov	local21, local04
21124     20 00 90 FD | 	jmp	#LR__3621
21128                 | LR__3620
21128     04 4E 05 F1 | 	add	fp, #4
2112c     A7 2A 02 FB | 	rdlong	local07, fp
21130     04 4E 85 F1 | 	sub	fp, #4
21134     15 31 02 F6 | 	mov	local10, local07
21138     0C 30 06 F1 | 	add	local10, #12
2113c     18 2D 02 FB | 	rdlong	local08, local10
21140     0C 30 86 F1 | 	sub	local10, #12
21144     16 47 02 F6 | 	mov	local21, local08
21148                 | LR__3621
21148     0C 32 06 F1 | 	add	local11, #12
2114c     19 47 62 FC | 	wrlong	local21, local11
21150     5C F9 9F FD | 	jmp	#LR__3603
21154                 | LR__3622
21154     04 4E 05 F1 | 	add	fp, #4
21158     A7 34 02 FB | 	rdlong	local12, fp
2115c     1A 1F 02 F6 | 	mov	local01, local12
21160     04 4E 85 F1 | 	sub	fp, #4
21164     10 34 06 F1 | 	add	local12, #16
21168     1A 33 C2 FA | 	rdbyte	local11, local12
2116c     40 32 46 F5 | 	or	local11, #64
21170     10 1E 06 F1 | 	add	local01, #16
21174     0F 33 42 FC | 	wrbyte	local11, local01
21178                 | ' 
21178                 | ' 
21178                 | ' 
21178                 | ' 
21178                 | ' 
21178                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
21178                 | ' 		fp->flag |=  0x80 ;
21178                 | ' 
21178                 | ' 	}
21178                 | ' 
21178                 | ' 	fp->flag |=  0x40 ;
21178                 | ' 
21178                 | ' 	return FR_OK ;
21178     00 FA 05 F6 | 	mov	result1, #0
2117c                 | LR__3623
2117c     A7 F0 03 F6 | 	mov	ptra, fp
21180     B2 00 A0 FD | 	call	#popregs_
21184                 | _fatfs_cc_f_write_ret
21184     2D 00 64 FD | 	ret
21188                 | 
21188                 | _fatfs_cc_f_sync
21188     00 4A 05 F6 | 	mov	COUNT_, #0
2118c     A8 00 A0 FD | 	call	#pushregs_
21190     18 F0 07 F1 | 	add	ptra, #24
21194     04 4E 05 F1 | 	add	fp, #4
21198     A7 12 62 FC | 	wrlong	arg01, fp
2119c     08 4E 05 F1 | 	add	fp, #8
211a0     A7 14 02 F6 | 	mov	arg02, fp
211a4     0C 4E 85 F1 | 	sub	fp, #12
211a8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
211ac     08 4E 05 F1 | 	add	fp, #8
211b0     A7 FA 61 FC | 	wrlong	result1, fp
211b4     08 4E 85 F1 | 	sub	fp, #8
211b8     00 FA 0D F2 | 	cmp	result1, #0 wz
211bc     C0 01 90 5D |  if_ne	jmp	#LR__3633
211c0     04 4E 05 F1 | 	add	fp, #4
211c4     A7 18 02 FB | 	rdlong	arg04, fp
211c8     04 4E 85 F1 | 	sub	fp, #4
211cc     10 18 06 F1 | 	add	arg04, #16
211d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
211d4     40 18 CE F7 | 	test	arg04, #64 wz
211d8     A4 01 90 AD |  if_e	jmp	#LR__3632
211dc     04 4E 05 F1 | 	add	fp, #4
211e0     A7 18 02 FB | 	rdlong	arg04, fp
211e4     04 4E 85 F1 | 	sub	fp, #4
211e8     10 18 06 F1 | 	add	arg04, #16
211ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
211f0     80 18 CE F7 | 	test	arg04, #128 wz
211f4     64 00 90 AD |  if_e	jmp	#LR__3630
211f8     0C 4E 05 F1 | 	add	fp, #12
211fc     A7 18 02 FB | 	rdlong	arg04, fp
21200     01 18 06 F1 | 	add	arg04, #1
21204     0C 13 C2 FA | 	rdbyte	arg01, arg04
21208     08 4E 85 F1 | 	sub	fp, #8
2120c     A7 18 02 FB | 	rdlong	arg04, fp
21210     0C 15 02 F6 | 	mov	arg02, arg04
21214     28 14 06 F1 | 	add	arg02, #40
21218     04 4E 85 F1 | 	sub	fp, #4
2121c     1C 18 06 F1 | 	add	arg04, #28
21220     0C 17 02 FB | 	rdlong	arg03, arg04
21224     01 18 06 F6 | 	mov	arg04, #1
21228     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2122c     00 FA 0D F2 | 	cmp	result1, #0 wz
21230     01 FA 05 56 |  if_ne	mov	result1, #1
21234     54 01 90 5D |  if_ne	jmp	#LR__3634
21238     04 4E 05 F1 | 	add	fp, #4
2123c     A7 18 02 FB | 	rdlong	arg04, fp
21240     0C 17 02 F6 | 	mov	arg03, arg04
21244     04 4E 85 F1 | 	sub	fp, #4
21248     10 18 06 F1 | 	add	arg04, #16
2124c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21250     7F 18 06 F5 | 	and	arg04, #127
21254     10 16 06 F1 | 	add	arg03, #16
21258     0B 19 42 FC | 	wrbyte	arg04, arg03
2125c                 | LR__3630
2125c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
21260     10 4E 05 F1 | 	add	fp, #16
21264     A7 FA 61 FC | 	wrlong	result1, fp
21268     04 4E 85 F1 | 	sub	fp, #4
2126c     A7 12 02 FB | 	rdlong	arg01, fp
21270     08 4E 85 F1 | 	sub	fp, #8
21274     A7 18 02 FB | 	rdlong	arg04, fp
21278     04 4E 85 F1 | 	sub	fp, #4
2127c     20 18 06 F1 | 	add	arg04, #32
21280     0C 15 02 FB | 	rdlong	arg02, arg04
21284     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
21288     08 4E 05 F1 | 	add	fp, #8
2128c     A7 FA 61 FC | 	wrlong	result1, fp
21290     08 4E 85 F1 | 	sub	fp, #8
21294     00 FA 0D F2 | 	cmp	result1, #0 wz
21298     E4 00 90 5D |  if_ne	jmp	#LR__3631
2129c     04 4E 05 F1 | 	add	fp, #4
212a0     A7 18 02 FB | 	rdlong	arg04, fp
212a4     24 18 06 F1 | 	add	arg04, #36
212a8     0C 19 02 FB | 	rdlong	arg04, arg04
212ac     10 4E 05 F1 | 	add	fp, #16
212b0     A7 18 62 FC | 	wrlong	arg04, fp
212b4     0C 17 02 F6 | 	mov	arg03, arg04
212b8     0B 16 06 F1 | 	add	arg03, #11
212bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
212c0     20 16 46 F5 | 	or	arg03, #32
212c4     0B 18 06 F1 | 	add	arg04, #11
212c8     0C 17 42 FC | 	wrbyte	arg03, arg04
212cc     10 4E 85 F1 | 	sub	fp, #16
212d0     A7 18 02 FB | 	rdlong	arg04, fp
212d4     0C 13 02 FB | 	rdlong	arg01, arg04
212d8     10 4E 05 F1 | 	add	fp, #16
212dc     A7 14 02 FB | 	rdlong	arg02, fp
212e0     14 4E 85 F1 | 	sub	fp, #20
212e4     08 18 06 F1 | 	add	arg04, #8
212e8     0C 17 02 FB | 	rdlong	arg03, arg04
212ec     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
212f0     14 4E 05 F1 | 	add	fp, #20
212f4     A7 12 02 FB | 	rdlong	arg01, fp
212f8     1C 12 06 F1 | 	add	arg01, #28
212fc     10 4E 85 F1 | 	sub	fp, #16
21300     A7 18 02 FB | 	rdlong	arg04, fp
21304     0C 18 06 F1 | 	add	arg04, #12
21308     0C 15 02 FB | 	rdlong	arg02, arg04
2130c     09 15 62 FC | 	wrlong	arg02, arg01
21310     10 4E 05 F1 | 	add	fp, #16
21314     A7 12 02 FB | 	rdlong	arg01, fp
21318     16 12 06 F1 | 	add	arg01, #22
2131c     04 4E 85 F1 | 	sub	fp, #4
21320     A7 14 02 FB | 	rdlong	arg02, fp
21324     09 15 62 FC | 	wrlong	arg02, arg01
21328     04 4E 05 F1 | 	add	fp, #4
2132c     A7 12 02 FB | 	rdlong	arg01, fp
21330     12 12 06 F1 | 	add	arg01, #18
21334     09 01 58 FC | 	wrword	#0, arg01
21338     08 4E 85 F1 | 	sub	fp, #8
2133c     A7 18 02 FB | 	rdlong	arg04, fp
21340     03 18 06 F1 | 	add	arg04, #3
21344     0C 03 48 FC | 	wrbyte	#1, arg04
21348     A7 12 02 FB | 	rdlong	arg01, fp
2134c     0C 4E 85 F1 | 	sub	fp, #12
21350     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
21354     08 4E 05 F1 | 	add	fp, #8
21358     A7 FA 61 FC | 	wrlong	result1, fp
2135c     04 4E 85 F1 | 	sub	fp, #4
21360     A7 18 02 FB | 	rdlong	arg04, fp
21364     0C 17 02 F6 | 	mov	arg03, arg04
21368     04 4E 85 F1 | 	sub	fp, #4
2136c     10 18 06 F1 | 	add	arg04, #16
21370     0C 19 C2 FA | 	rdbyte	arg04, arg04
21374     BF 18 06 F5 | 	and	arg04, #191
21378     10 16 06 F1 | 	add	arg03, #16
2137c     0B 19 42 FC | 	wrbyte	arg04, arg03
21380                 | LR__3631
21380                 | LR__3632
21380                 | LR__3633
21380                 | ' 					dir = fp->dir_ptr;
21380                 | ' 					dir[ 11 ] |=  0x20 ;
21380                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
21380                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
21380                 | ' 					st_dword(dir +  22 , tm);
21380                 | ' 					st_word(dir +  18 , 0);
21380                 | ' 					fs->wflag = 1;
21380                 | ' 					res = sync_fs(fs);
21380                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
21380                 | ' 				}
21380                 | ' 			}
21380                 | ' 		}
21380                 | ' 	}
21380                 | ' 
21380                 | ' 	return res ;
21380     08 4E 05 F1 | 	add	fp, #8
21384     A7 FA 01 FB | 	rdlong	result1, fp
21388     08 4E 85 F1 | 	sub	fp, #8
2138c                 | LR__3634
2138c     A7 F0 03 F6 | 	mov	ptra, fp
21390     B2 00 A0 FD | 	call	#popregs_
21394                 | _fatfs_cc_f_sync_ret
21394     2D 00 64 FD | 	ret
21398                 | 
21398                 | _fatfs_cc_f_close
21398     01 4A 05 F6 | 	mov	COUNT_, #1
2139c     A8 00 A0 FD | 	call	#pushregs_
213a0     10 F0 07 F1 | 	add	ptra, #16
213a4     04 4E 05 F1 | 	add	fp, #4
213a8     A7 12 62 FC | 	wrlong	arg01, fp
213ac     04 4E 85 F1 | 	sub	fp, #4
213b0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
213b4     08 4E 05 F1 | 	add	fp, #8
213b8     A7 FA 61 FC | 	wrlong	result1, fp
213bc     08 4E 85 F1 | 	sub	fp, #8
213c0     00 FA 0D F2 | 	cmp	result1, #0 wz
213c4     38 00 90 5D |  if_ne	jmp	#LR__3640
213c8     04 4E 05 F1 | 	add	fp, #4
213cc     A7 12 02 FB | 	rdlong	arg01, fp
213d0     08 4E 05 F1 | 	add	fp, #8
213d4     A7 14 02 F6 | 	mov	arg02, fp
213d8     0C 4E 85 F1 | 	sub	fp, #12
213dc     9C E6 BF FD | 	call	#_fatfs_cc_validate
213e0     08 4E 05 F1 | 	add	fp, #8
213e4     A7 FA 61 FC | 	wrlong	result1, fp
213e8     08 4E 85 F1 | 	sub	fp, #8
213ec     00 FA 0D F2 | 	cmp	result1, #0 wz
213f0     04 4E 05 A1 |  if_e	add	fp, #4
213f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
213f8     04 4E 85 A1 |  if_e	sub	fp, #4
213fc     0F 01 68 AC |  if_e	wrlong	#0, local01
21400                 | LR__3640
21400                 | ' 
21400                 | ' 
21400                 | ' 
21400                 | ' 
21400                 | ' 			fp->obj.fs = 0;
21400                 | ' #line 4192 "ff.c"
21400                 | ' 		}
21400                 | ' 	}
21400                 | ' 	return res;
21400     08 4E 05 F1 | 	add	fp, #8
21404     A7 FA 01 FB | 	rdlong	result1, fp
21408     08 4E 85 F1 | 	sub	fp, #8
2140c     A7 F0 03 F6 | 	mov	ptra, fp
21410     B2 00 A0 FD | 	call	#popregs_
21414                 | _fatfs_cc_f_close_ret
21414     2D 00 64 FD | 	ret
21418                 | 
21418                 | _fatfs_cc_f_lseek
21418     00 4A 05 F6 | 	mov	COUNT_, #0
2141c     A8 00 A0 FD | 	call	#pushregs_
21420     24 F0 07 F1 | 	add	ptra, #36
21424     04 4E 05 F1 | 	add	fp, #4
21428     A7 12 62 FC | 	wrlong	arg01, fp
2142c     04 4E 05 F1 | 	add	fp, #4
21430     A7 14 62 FC | 	wrlong	arg02, fp
21434     04 4E 85 F1 | 	sub	fp, #4
21438     A7 12 02 FB | 	rdlong	arg01, fp
2143c     0C 4E 05 F1 | 	add	fp, #12
21440     A7 14 02 F6 | 	mov	arg02, fp
21444     10 4E 85 F1 | 	sub	fp, #16
21448     30 E6 BF FD | 	call	#_fatfs_cc_validate
2144c     0C 4E 05 F1 | 	add	fp, #12
21450     A7 FA 61 FC | 	wrlong	result1, fp
21454     0C 4E 85 F1 | 	sub	fp, #12
21458     00 FA 0D F2 | 	cmp	result1, #0 wz
2145c     1C 00 90 5D |  if_ne	jmp	#LR__3650
21460     04 4E 05 F1 | 	add	fp, #4
21464     A7 18 02 FB | 	rdlong	arg04, fp
21468     11 18 06 F1 | 	add	arg04, #17
2146c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21470     08 4E 05 F1 | 	add	fp, #8
21474     A7 18 62 FC | 	wrlong	arg04, fp
21478     0C 4E 85 F1 | 	sub	fp, #12
2147c                 | LR__3650
2147c     0C 4E 05 F1 | 	add	fp, #12
21480     A7 18 0A FB | 	rdlong	arg04, fp wz
21484     0C 4E 85 F1 | 	sub	fp, #12
21488     0C 4E 05 51 |  if_ne	add	fp, #12
2148c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21490     0C 4E 85 51 |  if_ne	sub	fp, #12
21494     40 06 90 5D |  if_ne	jmp	#LR__3673
21498     04 4E 05 F1 | 	add	fp, #4
2149c     A7 18 02 FB | 	rdlong	arg04, fp
214a0     04 4E 05 F1 | 	add	fp, #4
214a4     A7 16 02 FB | 	rdlong	arg03, fp
214a8     08 4E 85 F1 | 	sub	fp, #8
214ac     0C 18 06 F1 | 	add	arg04, #12
214b0     0C 19 02 FB | 	rdlong	arg04, arg04
214b4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
214b8     3C 00 90 ED |  if_be	jmp	#LR__3651
214bc     04 4E 05 F1 | 	add	fp, #4
214c0     A7 16 02 FB | 	rdlong	arg03, fp
214c4     04 4E 85 F1 | 	sub	fp, #4
214c8     10 16 06 F1 | 	add	arg03, #16
214cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
214d0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
214d4     02 16 CE F7 | 	test	arg03, #2 wz
214d8     1C 00 90 5D |  if_ne	jmp	#LR__3651
214dc     04 4E 05 F1 | 	add	fp, #4
214e0     A7 16 02 FB | 	rdlong	arg03, fp
214e4     0C 16 06 F1 | 	add	arg03, #12
214e8     0B 17 02 FB | 	rdlong	arg03, arg03
214ec     04 4E 05 F1 | 	add	fp, #4
214f0     A7 16 62 FC | 	wrlong	arg03, fp
214f4     08 4E 85 F1 | 	sub	fp, #8
214f8                 | LR__3651
214f8     04 4E 05 F1 | 	add	fp, #4
214fc     A7 16 02 FB | 	rdlong	arg03, fp
21500     14 16 06 F1 | 	add	arg03, #20
21504     0B 17 02 FB | 	rdlong	arg03, arg03
21508     1C 4E 05 F1 | 	add	fp, #28
2150c     A7 16 62 FC | 	wrlong	arg03, fp
21510     1C 4E 85 F1 | 	sub	fp, #28
21514     A7 16 02 FB | 	rdlong	arg03, fp
21518     18 4E 05 F1 | 	add	fp, #24
2151c     A7 00 68 FC | 	wrlong	#0, fp
21520     14 16 06 F1 | 	add	arg03, #20
21524     0B 01 68 FC | 	wrlong	#0, arg03
21528     14 4E 85 F1 | 	sub	fp, #20
2152c     A7 16 02 FB | 	rdlong	arg03, fp
21530     08 4E 85 F1 | 	sub	fp, #8
21534     01 16 16 F2 | 	cmp	arg03, #1 wc
21538     E4 03 90 CD |  if_b	jmp	#LR__3667
2153c     10 4E 05 F1 | 	add	fp, #16
21540     A7 16 02 FB | 	rdlong	arg03, fp
21544     0A 16 06 F1 | 	add	arg03, #10
21548     0B 19 E2 FA | 	rdword	arg04, arg03
2154c     09 18 66 F0 | 	shl	arg04, #9
21550     08 4E 05 F1 | 	add	fp, #8
21554     A7 18 62 FC | 	wrlong	arg04, fp
21558     08 4E 05 F1 | 	add	fp, #8
2155c     A7 18 02 FB | 	rdlong	arg04, fp
21560     20 4E 85 F1 | 	sub	fp, #32
21564     01 18 16 F2 | 	cmp	arg04, #1 wc
21568     AC 00 90 CD |  if_b	jmp	#LR__3652
2156c     08 4E 05 F1 | 	add	fp, #8
21570     A7 18 02 FB | 	rdlong	arg04, fp
21574     01 18 86 F1 | 	sub	arg04, #1
21578     10 4E 05 F1 | 	add	fp, #16
2157c     A7 16 02 FB | 	rdlong	arg03, fp
21580     0B 19 12 FD | 	qdiv	arg04, arg03
21584     08 4E 05 F1 | 	add	fp, #8
21588     A7 FA 01 FB | 	rdlong	result1, fp
2158c     01 FA 85 F1 | 	sub	result1, #1
21590     18 18 62 FD | 	getqx	arg04
21594     0B FB 11 FD | 	qdiv	result1, arg03
21598     20 4E 85 F1 | 	sub	fp, #32
2159c     18 16 62 FD | 	getqx	arg03
215a0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
215a4     70 00 90 CD |  if_b	jmp	#LR__3652
215a8     04 4E 05 F1 | 	add	fp, #4
215ac     A7 16 02 FB | 	rdlong	arg03, fp
215b0     1C 4E 05 F1 | 	add	fp, #28
215b4     A7 FA 01 FB | 	rdlong	result1, fp
215b8     01 FA 85 F1 | 	sub	result1, #1
215bc     08 4E 85 F1 | 	sub	fp, #8
215c0     A7 18 02 FB | 	rdlong	arg04, fp
215c4     01 18 86 F1 | 	sub	arg04, #1
215c8     0C FB 21 F5 | 	andn	result1, arg04
215cc     14 16 06 F1 | 	add	arg03, #20
215d0     0B FB 61 FC | 	wrlong	result1, arg03
215d4     10 4E 85 F1 | 	sub	fp, #16
215d8     A7 16 02 FB | 	rdlong	arg03, fp
215dc     04 4E 85 F1 | 	sub	fp, #4
215e0     A7 18 02 FB | 	rdlong	arg04, fp
215e4     14 18 06 F1 | 	add	arg04, #20
215e8     0C 19 02 FB | 	rdlong	arg04, arg04
215ec     0C 17 82 F1 | 	sub	arg03, arg04
215f0     04 4E 05 F1 | 	add	fp, #4
215f4     A7 16 62 FC | 	wrlong	arg03, fp
215f8     04 4E 85 F1 | 	sub	fp, #4
215fc     A7 16 02 FB | 	rdlong	arg03, fp
21600     18 16 06 F1 | 	add	arg03, #24
21604     0B 17 02 FB | 	rdlong	arg03, arg03
21608     10 4E 05 F1 | 	add	fp, #16
2160c     A7 16 62 FC | 	wrlong	arg03, fp
21610     14 4E 85 F1 | 	sub	fp, #20
21614     D0 00 90 FD | 	jmp	#LR__3656
21618                 | LR__3652
21618     04 4E 05 F1 | 	add	fp, #4
2161c     A7 16 02 FB | 	rdlong	arg03, fp
21620     08 16 06 F1 | 	add	arg03, #8
21624     0B 17 0A FB | 	rdlong	arg03, arg03 wz
21628     10 4E 05 F1 | 	add	fp, #16
2162c     A7 16 62 FC | 	wrlong	arg03, fp
21630     14 4E 85 F1 | 	sub	fp, #20
21634     94 00 90 5D |  if_ne	jmp	#LR__3655
21638     04 4E 05 F1 | 	add	fp, #4
2163c     A7 12 02 FB | 	rdlong	arg01, fp
21640     04 4E 85 F1 | 	sub	fp, #4
21644     00 14 06 F6 | 	mov	arg02, #0
21648     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2164c     14 4E 05 F1 | 	add	fp, #20
21650     A7 FA 61 FC | 	wrlong	result1, fp
21654     14 4E 85 F1 | 	sub	fp, #20
21658     01 FA 0D F2 | 	cmp	result1, #1 wz
2165c     1C 00 90 5D |  if_ne	jmp	#LR__3653
21660     04 4E 05 F1 | 	add	fp, #4
21664     A7 16 02 FB | 	rdlong	arg03, fp
21668     04 4E 85 F1 | 	sub	fp, #4
2166c     11 16 06 F1 | 	add	arg03, #17
21670     0B 05 48 FC | 	wrbyte	#2, arg03
21674     02 FA 05 F6 | 	mov	result1, #2
21678     5C 04 90 FD | 	jmp	#LR__3673
2167c                 | LR__3653
2167c     14 4E 05 F1 | 	add	fp, #20
21680     A7 FA 01 FB | 	rdlong	result1, fp
21684     14 4E 85 F1 | 	sub	fp, #20
21688     FF FF 7F FF 
2168c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21690     1C 00 90 5D |  if_ne	jmp	#LR__3654
21694     04 4E 05 F1 | 	add	fp, #4
21698     A7 16 02 FB | 	rdlong	arg03, fp
2169c     04 4E 85 F1 | 	sub	fp, #4
216a0     11 16 06 F1 | 	add	arg03, #17
216a4     0B 03 48 FC | 	wrbyte	#1, arg03
216a8     01 FA 05 F6 | 	mov	result1, #1
216ac     28 04 90 FD | 	jmp	#LR__3673
216b0                 | LR__3654
216b0     04 4E 05 F1 | 	add	fp, #4
216b4     A7 16 02 FB | 	rdlong	arg03, fp
216b8     10 4E 05 F1 | 	add	fp, #16
216bc     A7 18 02 FB | 	rdlong	arg04, fp
216c0     14 4E 85 F1 | 	sub	fp, #20
216c4     08 16 06 F1 | 	add	arg03, #8
216c8     0B 19 62 FC | 	wrlong	arg04, arg03
216cc                 | LR__3655
216cc     04 4E 05 F1 | 	add	fp, #4
216d0     A7 16 02 FB | 	rdlong	arg03, fp
216d4     10 4E 05 F1 | 	add	fp, #16
216d8     A7 18 02 FB | 	rdlong	arg04, fp
216dc     14 4E 85 F1 | 	sub	fp, #20
216e0     18 16 06 F1 | 	add	arg03, #24
216e4     0B 19 62 FC | 	wrlong	arg04, arg03
216e8                 | LR__3656
216e8     14 4E 05 F1 | 	add	fp, #20
216ec     A7 16 0A FB | 	rdlong	arg03, fp wz
216f0     14 4E 85 F1 | 	sub	fp, #20
216f4     28 02 90 AD |  if_e	jmp	#LR__3666
216f8                 | ' 				while (ofs > bcs) {
216f8                 | LR__3657
216f8     08 4E 05 F1 | 	add	fp, #8
216fc     A7 18 02 FB | 	rdlong	arg04, fp
21700     10 4E 05 F1 | 	add	fp, #16
21704     A7 16 02 FB | 	rdlong	arg03, fp
21708     18 4E 85 F1 | 	sub	fp, #24
2170c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
21710     68 01 90 ED |  if_be	jmp	#LR__3663
21714     08 4E 05 F1 | 	add	fp, #8
21718     A7 18 02 FB | 	rdlong	arg04, fp
2171c     10 4E 05 F1 | 	add	fp, #16
21720     A7 16 02 FB | 	rdlong	arg03, fp
21724     0B 19 82 F1 | 	sub	arg04, arg03
21728     10 4E 85 F1 | 	sub	fp, #16
2172c     A7 18 62 FC | 	wrlong	arg04, fp
21730     04 4E 85 F1 | 	sub	fp, #4
21734     A7 18 02 FB | 	rdlong	arg04, fp
21738     0C FB 01 F6 | 	mov	result1, arg04
2173c     14 18 06 F1 | 	add	arg04, #20
21740     0C 19 02 FB | 	rdlong	arg04, arg04
21744     14 4E 05 F1 | 	add	fp, #20
21748     A7 16 02 FB | 	rdlong	arg03, fp
2174c     0B 19 02 F1 | 	add	arg04, arg03
21750     14 FA 05 F1 | 	add	result1, #20
21754     FD 18 62 FC | 	wrlong	arg04, result1
21758     14 4E 85 F1 | 	sub	fp, #20
2175c     A7 16 02 FB | 	rdlong	arg03, fp
21760     04 4E 85 F1 | 	sub	fp, #4
21764     10 16 06 F1 | 	add	arg03, #16
21768     0B 17 C2 FA | 	rdbyte	arg03, arg03
2176c     02 16 CE F7 | 	test	arg03, #2 wz
21770     3C 00 90 AD |  if_e	jmp	#LR__3658
21774     04 4E 05 F1 | 	add	fp, #4
21778     A7 12 02 FB | 	rdlong	arg01, fp
2177c     10 4E 05 F1 | 	add	fp, #16
21780     A7 14 02 FB | 	rdlong	arg02, fp
21784     14 4E 85 F1 | 	sub	fp, #20
21788     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2178c     14 4E 05 F1 | 	add	fp, #20
21790     A7 FA 61 FC | 	wrlong	result1, fp
21794     00 FA 4D F2 | 	cmps	result1, #0 wz
21798     14 4E 85 F1 | 	sub	fp, #20
2179c     08 4E 05 A1 |  if_e	add	fp, #8
217a0     A7 00 68 AC |  if_e	wrlong	#0, fp
217a4     08 4E 85 A1 |  if_e	sub	fp, #8
217a8                 | ' 							ofs = 0; break;
217a8     D0 00 90 AD |  if_e	jmp	#LR__3663
217ac     24 00 90 FD | 	jmp	#LR__3659
217b0                 | LR__3658
217b0     04 4E 05 F1 | 	add	fp, #4
217b4     A7 12 02 FB | 	rdlong	arg01, fp
217b8     10 4E 05 F1 | 	add	fp, #16
217bc     A7 14 02 FB | 	rdlong	arg02, fp
217c0     14 4E 85 F1 | 	sub	fp, #20
217c4     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
217c8     14 4E 05 F1 | 	add	fp, #20
217cc     A7 FA 61 FC | 	wrlong	result1, fp
217d0     14 4E 85 F1 | 	sub	fp, #20
217d4                 | LR__3659
217d4     14 4E 05 F1 | 	add	fp, #20
217d8     A7 16 02 FB | 	rdlong	arg03, fp
217dc     14 4E 85 F1 | 	sub	fp, #20
217e0     FF FF 7F FF 
217e4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
217e8     1C 00 90 5D |  if_ne	jmp	#LR__3660
217ec     04 4E 05 F1 | 	add	fp, #4
217f0     A7 16 02 FB | 	rdlong	arg03, fp
217f4     04 4E 85 F1 | 	sub	fp, #4
217f8     11 16 06 F1 | 	add	arg03, #17
217fc     0B 03 48 FC | 	wrbyte	#1, arg03
21800     01 FA 05 F6 | 	mov	result1, #1
21804     D0 02 90 FD | 	jmp	#LR__3673
21808                 | LR__3660
21808     14 4E 05 F1 | 	add	fp, #20
2180c     A7 16 02 FB | 	rdlong	arg03, fp
21810     14 4E 85 F1 | 	sub	fp, #20
21814     02 16 16 F2 | 	cmp	arg03, #2 wc
21818     24 00 90 CD |  if_b	jmp	#LR__3661
2181c     10 4E 05 F1 | 	add	fp, #16
21820     A7 18 02 FB | 	rdlong	arg04, fp
21824     04 4E 05 F1 | 	add	fp, #4
21828     A7 16 02 FB | 	rdlong	arg03, fp
2182c     14 4E 85 F1 | 	sub	fp, #20
21830     18 18 06 F1 | 	add	arg04, #24
21834     0C 19 02 FB | 	rdlong	arg04, arg04
21838     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2183c     1C 00 90 CD |  if_b	jmp	#LR__3662
21840                 | LR__3661
21840     04 4E 05 F1 | 	add	fp, #4
21844     A7 16 02 FB | 	rdlong	arg03, fp
21848     04 4E 85 F1 | 	sub	fp, #4
2184c     11 16 06 F1 | 	add	arg03, #17
21850     0B 05 48 FC | 	wrbyte	#2, arg03
21854     02 FA 05 F6 | 	mov	result1, #2
21858     7C 02 90 FD | 	jmp	#LR__3673
2185c                 | LR__3662
2185c     04 4E 05 F1 | 	add	fp, #4
21860     A7 18 02 FB | 	rdlong	arg04, fp
21864     10 4E 05 F1 | 	add	fp, #16
21868     A7 16 02 FB | 	rdlong	arg03, fp
2186c     14 4E 85 F1 | 	sub	fp, #20
21870     18 18 06 F1 | 	add	arg04, #24
21874     0C 17 62 FC | 	wrlong	arg03, arg04
21878     7C FE 9F FD | 	jmp	#LR__3657
2187c                 | LR__3663
2187c     04 4E 05 F1 | 	add	fp, #4
21880     A7 16 02 FB | 	rdlong	arg03, fp
21884     0B 13 02 F6 | 	mov	arg01, arg03
21888     14 16 06 F1 | 	add	arg03, #20
2188c     0B 15 02 FB | 	rdlong	arg02, arg03
21890     04 4E 05 F1 | 	add	fp, #4
21894     A7 16 02 FB | 	rdlong	arg03, fp
21898     0B 15 02 F1 | 	add	arg02, arg03
2189c     14 12 06 F1 | 	add	arg01, #20
218a0     09 15 62 FC | 	wrlong	arg02, arg01
218a4     A7 16 02 FB | 	rdlong	arg03, fp
218a8     08 4E 85 F1 | 	sub	fp, #8
218ac     FF 17 CE F7 | 	test	arg03, #511 wz
218b0     6C 00 90 AD |  if_e	jmp	#LR__3665
218b4     10 4E 05 F1 | 	add	fp, #16
218b8     A7 12 02 FB | 	rdlong	arg01, fp
218bc     04 4E 05 F1 | 	add	fp, #4
218c0     A7 14 02 FB | 	rdlong	arg02, fp
218c4     14 4E 85 F1 | 	sub	fp, #20
218c8     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
218cc     1C 4E 05 F1 | 	add	fp, #28
218d0     A7 FA 61 FC | 	wrlong	result1, fp
218d4     1C 4E 85 F1 | 	sub	fp, #28
218d8     00 FA 0D F2 | 	cmp	result1, #0 wz
218dc     1C 00 90 5D |  if_ne	jmp	#LR__3664
218e0     04 4E 05 F1 | 	add	fp, #4
218e4     A7 16 02 FB | 	rdlong	arg03, fp
218e8     04 4E 85 F1 | 	sub	fp, #4
218ec     11 16 06 F1 | 	add	arg03, #17
218f0     0B 05 48 FC | 	wrbyte	#2, arg03
218f4     02 FA 05 F6 | 	mov	result1, #2
218f8     DC 01 90 FD | 	jmp	#LR__3673
218fc                 | LR__3664
218fc     1C 4E 05 F1 | 	add	fp, #28
21900     A7 18 02 FB | 	rdlong	arg04, fp
21904     14 4E 85 F1 | 	sub	fp, #20
21908     A7 16 02 FB | 	rdlong	arg03, fp
2190c     09 16 46 F0 | 	shr	arg03, #9
21910     0B 19 02 F1 | 	add	arg04, arg03
21914     14 4E 05 F1 | 	add	fp, #20
21918     A7 18 62 FC | 	wrlong	arg04, fp
2191c     1C 4E 85 F1 | 	sub	fp, #28
21920                 | LR__3665
21920                 | LR__3666
21920                 | LR__3667
21920     04 4E 05 F1 | 	add	fp, #4
21924     A7 18 02 FB | 	rdlong	arg04, fp
21928     0C 17 02 F6 | 	mov	arg03, arg04
2192c     04 4E 85 F1 | 	sub	fp, #4
21930     14 16 06 F1 | 	add	arg03, #20
21934     0B 17 02 FB | 	rdlong	arg03, arg03
21938     0C 18 06 F1 | 	add	arg04, #12
2193c     0C 19 02 FB | 	rdlong	arg04, arg04
21940     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21944     3C 00 90 ED |  if_be	jmp	#LR__3668
21948     04 4E 05 F1 | 	add	fp, #4
2194c     A7 18 02 FB | 	rdlong	arg04, fp
21950     0C 17 02 F6 | 	mov	arg03, arg04
21954     14 18 06 F1 | 	add	arg04, #20
21958     0C 19 02 FB | 	rdlong	arg04, arg04
2195c     0C 16 06 F1 | 	add	arg03, #12
21960     0B 19 62 FC | 	wrlong	arg04, arg03
21964     A7 18 02 FB | 	rdlong	arg04, fp
21968     0C 17 02 F6 | 	mov	arg03, arg04
2196c     04 4E 85 F1 | 	sub	fp, #4
21970     10 18 06 F1 | 	add	arg04, #16
21974     0C 19 C2 FA | 	rdbyte	arg04, arg04
21978     40 18 46 F5 | 	or	arg04, #64
2197c     10 16 06 F1 | 	add	arg03, #16
21980     0B 19 42 FC | 	wrbyte	arg04, arg03
21984                 | LR__3668
21984     04 4E 05 F1 | 	add	fp, #4
21988     A7 16 02 FB | 	rdlong	arg03, fp
2198c     04 4E 85 F1 | 	sub	fp, #4
21990     14 16 06 F1 | 	add	arg03, #20
21994     0B 17 02 FB | 	rdlong	arg03, arg03
21998     FF 17 CE F7 | 	test	arg03, #511 wz
2199c     2C 01 90 AD |  if_e	jmp	#LR__3672
219a0     04 4E 05 F1 | 	add	fp, #4
219a4     A7 18 02 FB | 	rdlong	arg04, fp
219a8     18 4E 05 F1 | 	add	fp, #24
219ac     A7 16 02 FB | 	rdlong	arg03, fp
219b0     1C 4E 85 F1 | 	sub	fp, #28
219b4     1C 18 06 F1 | 	add	arg04, #28
219b8     0C 19 02 FB | 	rdlong	arg04, arg04
219bc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
219c0     08 01 90 AD |  if_e	jmp	#LR__3672
219c4     04 4E 05 F1 | 	add	fp, #4
219c8     A7 16 02 FB | 	rdlong	arg03, fp
219cc     04 4E 85 F1 | 	sub	fp, #4
219d0     10 16 06 F1 | 	add	arg03, #16
219d4     0B 17 C2 FA | 	rdbyte	arg03, arg03
219d8     80 16 CE F7 | 	test	arg03, #128 wz
219dc     7C 00 90 AD |  if_e	jmp	#LR__3670
219e0     10 4E 05 F1 | 	add	fp, #16
219e4     A7 16 02 FB | 	rdlong	arg03, fp
219e8     01 16 06 F1 | 	add	arg03, #1
219ec     0B 13 C2 FA | 	rdbyte	arg01, arg03
219f0     0C 4E 85 F1 | 	sub	fp, #12
219f4     A7 16 02 FB | 	rdlong	arg03, fp
219f8     0B 15 02 F6 | 	mov	arg02, arg03
219fc     28 14 06 F1 | 	add	arg02, #40
21a00     04 4E 85 F1 | 	sub	fp, #4
21a04     1C 16 06 F1 | 	add	arg03, #28
21a08     0B 17 02 FB | 	rdlong	arg03, arg03
21a0c     01 18 06 F6 | 	mov	arg04, #1
21a10     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
21a14     00 FA 0D F2 | 	cmp	result1, #0 wz
21a18     1C 00 90 AD |  if_e	jmp	#LR__3669
21a1c     04 4E 05 F1 | 	add	fp, #4
21a20     A7 16 02 FB | 	rdlong	arg03, fp
21a24     04 4E 85 F1 | 	sub	fp, #4
21a28     11 16 06 F1 | 	add	arg03, #17
21a2c     0B 03 48 FC | 	wrbyte	#1, arg03
21a30     01 FA 05 F6 | 	mov	result1, #1
21a34     A0 00 90 FD | 	jmp	#LR__3673
21a38                 | LR__3669
21a38     04 4E 05 F1 | 	add	fp, #4
21a3c     A7 18 02 FB | 	rdlong	arg04, fp
21a40     0C 17 02 F6 | 	mov	arg03, arg04
21a44     04 4E 85 F1 | 	sub	fp, #4
21a48     10 18 06 F1 | 	add	arg04, #16
21a4c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21a50     7F 18 06 F5 | 	and	arg04, #127
21a54     10 16 06 F1 | 	add	arg03, #16
21a58     0B 19 42 FC | 	wrbyte	arg04, arg03
21a5c                 | LR__3670
21a5c     10 4E 05 F1 | 	add	fp, #16
21a60     A7 16 02 FB | 	rdlong	arg03, fp
21a64     01 16 06 F1 | 	add	arg03, #1
21a68     0B 13 C2 FA | 	rdbyte	arg01, arg03
21a6c     0C 4E 85 F1 | 	sub	fp, #12
21a70     A7 14 02 FB | 	rdlong	arg02, fp
21a74     28 14 06 F1 | 	add	arg02, #40
21a78     18 4E 05 F1 | 	add	fp, #24
21a7c     A7 16 02 FB | 	rdlong	arg03, fp
21a80     1C 4E 85 F1 | 	sub	fp, #28
21a84     01 18 06 F6 | 	mov	arg04, #1
21a88     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
21a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
21a90     1C 00 90 AD |  if_e	jmp	#LR__3671
21a94     04 4E 05 F1 | 	add	fp, #4
21a98     A7 16 02 FB | 	rdlong	arg03, fp
21a9c     04 4E 85 F1 | 	sub	fp, #4
21aa0     11 16 06 F1 | 	add	arg03, #17
21aa4     0B 03 48 FC | 	wrbyte	#1, arg03
21aa8     01 FA 05 F6 | 	mov	result1, #1
21aac     28 00 90 FD | 	jmp	#LR__3673
21ab0                 | LR__3671
21ab0     04 4E 05 F1 | 	add	fp, #4
21ab4     A7 18 02 FB | 	rdlong	arg04, fp
21ab8     18 4E 05 F1 | 	add	fp, #24
21abc     A7 16 02 FB | 	rdlong	arg03, fp
21ac0     1C 4E 85 F1 | 	sub	fp, #28
21ac4     1C 18 06 F1 | 	add	arg04, #28
21ac8     0C 17 62 FC | 	wrlong	arg03, arg04
21acc                 | LR__3672
21acc                 | ' 
21acc                 | ' 			fp->sect = nsect;
21acc                 | ' 		}
21acc                 | ' 	}
21acc                 | ' 
21acc                 | ' 	return res ;
21acc     0C 4E 05 F1 | 	add	fp, #12
21ad0     A7 FA 01 FB | 	rdlong	result1, fp
21ad4     0C 4E 85 F1 | 	sub	fp, #12
21ad8                 | LR__3673
21ad8     A7 F0 03 F6 | 	mov	ptra, fp
21adc     B2 00 A0 FD | 	call	#popregs_
21ae0                 | _fatfs_cc_f_lseek_ret
21ae0     2D 00 64 FD | 	ret
21ae4                 | 
21ae4                 | _fatfs_cc_f_opendir
21ae4     01 4A 05 F6 | 	mov	COUNT_, #1
21ae8     A8 00 A0 FD | 	call	#pushregs_
21aec     14 F0 07 F1 | 	add	ptra, #20
21af0     04 4E 05 F1 | 	add	fp, #4
21af4     A7 12 62 FC | 	wrlong	arg01, fp
21af8     04 4E 05 F1 | 	add	fp, #4
21afc     A7 14 62 FC | 	wrlong	arg02, fp
21b00     04 4E 85 F1 | 	sub	fp, #4
21b04     A7 16 0A FB | 	rdlong	arg03, fp wz
21b08     04 4E 85 F1 | 	sub	fp, #4
21b0c     09 FA 05 A6 |  if_e	mov	result1, #9
21b10     78 01 90 AD |  if_e	jmp	#LR__3686
21b14     08 4E 05 F1 | 	add	fp, #8
21b18     A7 12 02 F6 | 	mov	arg01, fp
21b1c     08 4E 05 F1 | 	add	fp, #8
21b20     A7 14 02 F6 | 	mov	arg02, fp
21b24     10 4E 85 F1 | 	sub	fp, #16
21b28     00 16 06 F6 | 	mov	arg03, #0
21b2c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
21b30     0C 4E 05 F1 | 	add	fp, #12
21b34     A7 FA 61 FC | 	wrlong	result1, fp
21b38     0C 4E 85 F1 | 	sub	fp, #12
21b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
21b40     20 01 90 5D |  if_ne	jmp	#LR__3685
21b44     04 4E 05 F1 | 	add	fp, #4
21b48     A7 16 02 FB | 	rdlong	arg03, fp
21b4c     0C 4E 05 F1 | 	add	fp, #12
21b50     A7 FA 01 FB | 	rdlong	result1, fp
21b54     0B FB 61 FC | 	wrlong	result1, arg03
21b58     0C 4E 85 F1 | 	sub	fp, #12
21b5c     A7 12 02 FB | 	rdlong	arg01, fp
21b60     04 4E 05 F1 | 	add	fp, #4
21b64     A7 14 02 FB | 	rdlong	arg02, fp
21b68     08 4E 85 F1 | 	sub	fp, #8
21b6c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
21b70     0C 4E 05 F1 | 	add	fp, #12
21b74     A7 FA 61 FC | 	wrlong	result1, fp
21b78     0C 4E 85 F1 | 	sub	fp, #12
21b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
21b80     C4 00 90 5D |  if_ne	jmp	#LR__3684
21b84     04 4E 05 F1 | 	add	fp, #4
21b88     A7 16 02 FB | 	rdlong	arg03, fp
21b8c     04 4E 85 F1 | 	sub	fp, #4
21b90     2B 16 06 F1 | 	add	arg03, #43
21b94     0B 17 C2 FA | 	rdbyte	arg03, arg03
21b98     80 16 CE F7 | 	test	arg03, #128 wz
21b9c     58 00 90 5D |  if_ne	jmp	#LR__3682
21ba0     04 4E 05 F1 | 	add	fp, #4
21ba4     A7 16 02 FB | 	rdlong	arg03, fp
21ba8     04 4E 85 F1 | 	sub	fp, #4
21bac     06 16 06 F1 | 	add	arg03, #6
21bb0     0B 17 C2 FA | 	rdbyte	arg03, arg03
21bb4     10 16 CE F7 | 	test	arg03, #16 wz
21bb8     30 00 90 AD |  if_e	jmp	#LR__3680
21bbc     04 4E 05 F1 | 	add	fp, #4
21bc0     A7 16 02 FB | 	rdlong	arg03, fp
21bc4     0B 1F 02 F6 | 	mov	local01, arg03
21bc8     0C 4E 05 F1 | 	add	fp, #12
21bcc     A7 12 02 FB | 	rdlong	arg01, fp
21bd0     10 4E 85 F1 | 	sub	fp, #16
21bd4     1C 16 06 F1 | 	add	arg03, #28
21bd8     0B 15 02 FB | 	rdlong	arg02, arg03
21bdc     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
21be0     08 1E 06 F1 | 	add	local01, #8
21be4     0F FB 61 FC | 	wrlong	result1, local01
21be8     0C 00 90 FD | 	jmp	#LR__3681
21bec                 | LR__3680
21bec     0C 4E 05 F1 | 	add	fp, #12
21bf0     A7 0A 68 FC | 	wrlong	#5, fp
21bf4     0C 4E 85 F1 | 	sub	fp, #12
21bf8                 | LR__3681
21bf8                 | LR__3682
21bf8     0C 4E 05 F1 | 	add	fp, #12
21bfc     A7 1E 0A FB | 	rdlong	local01, fp wz
21c00     0C 4E 85 F1 | 	sub	fp, #12
21c04     40 00 90 5D |  if_ne	jmp	#LR__3683
21c08     04 4E 05 F1 | 	add	fp, #4
21c0c     A7 1E 02 FB | 	rdlong	local01, fp
21c10     0C 4E 05 F1 | 	add	fp, #12
21c14     A7 16 02 FB | 	rdlong	arg03, fp
21c18     06 16 06 F1 | 	add	arg03, #6
21c1c     0B 17 E2 FA | 	rdword	arg03, arg03
21c20     04 1E 06 F1 | 	add	local01, #4
21c24     0F 17 52 FC | 	wrword	arg03, local01
21c28     0C 4E 85 F1 | 	sub	fp, #12
21c2c     A7 12 02 FB | 	rdlong	arg01, fp
21c30     04 4E 85 F1 | 	sub	fp, #4
21c34     00 14 06 F6 | 	mov	arg02, #0
21c38     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
21c3c     0C 4E 05 F1 | 	add	fp, #12
21c40     A7 FA 61 FC | 	wrlong	result1, fp
21c44     0C 4E 85 F1 | 	sub	fp, #12
21c48                 | LR__3683
21c48                 | LR__3684
21c48     0C 4E 05 F1 | 	add	fp, #12
21c4c     A7 1E 02 FB | 	rdlong	local01, fp
21c50     0C 4E 85 F1 | 	sub	fp, #12
21c54     04 1E 0E F2 | 	cmp	local01, #4 wz
21c58     0C 4E 05 A1 |  if_e	add	fp, #12
21c5c     A7 0A 68 AC |  if_e	wrlong	#5, fp
21c60     0C 4E 85 A1 |  if_e	sub	fp, #12
21c64                 | LR__3685
21c64     0C 4E 05 F1 | 	add	fp, #12
21c68     A7 1E 0A FB | 	rdlong	local01, fp wz
21c6c     0C 4E 85 F1 | 	sub	fp, #12
21c70     04 4E 05 51 |  if_ne	add	fp, #4
21c74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21c78     04 4E 85 51 |  if_ne	sub	fp, #4
21c7c     0F 01 68 5C |  if_ne	wrlong	#0, local01
21c80                 | ' 
21c80                 | ' 	return res ;
21c80     0C 4E 05 F1 | 	add	fp, #12
21c84     A7 FA 01 FB | 	rdlong	result1, fp
21c88     0C 4E 85 F1 | 	sub	fp, #12
21c8c                 | LR__3686
21c8c     A7 F0 03 F6 | 	mov	ptra, fp
21c90     B2 00 A0 FD | 	call	#popregs_
21c94                 | _fatfs_cc_f_opendir_ret
21c94     2D 00 64 FD | 	ret
21c98                 | 
21c98                 | _fatfs_cc_f_closedir
21c98     00 4A 05 F6 | 	mov	COUNT_, #0
21c9c     A8 00 A0 FD | 	call	#pushregs_
21ca0     10 F0 07 F1 | 	add	ptra, #16
21ca4     04 4E 05 F1 | 	add	fp, #4
21ca8     A7 12 62 FC | 	wrlong	arg01, fp
21cac     08 4E 05 F1 | 	add	fp, #8
21cb0     A7 14 02 F6 | 	mov	arg02, fp
21cb4     0C 4E 85 F1 | 	sub	fp, #12
21cb8     C0 DD BF FD | 	call	#_fatfs_cc_validate
21cbc     08 4E 05 F1 | 	add	fp, #8
21cc0     A7 FA 61 FC | 	wrlong	result1, fp
21cc4     08 4E 85 F1 | 	sub	fp, #8
21cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
21ccc     04 4E 05 A1 |  if_e	add	fp, #4
21cd0     A7 FA 01 AB |  if_e	rdlong	result1, fp
21cd4     04 4E 85 A1 |  if_e	sub	fp, #4
21cd8     FD 00 68 AC |  if_e	wrlong	#0, result1
21cdc                 | ' 
21cdc                 | ' 
21cdc                 | ' 
21cdc                 | ' 
21cdc                 | ' 		dp->obj.fs = 0;
21cdc                 | ' #line 4633 "ff.c"
21cdc                 | ' 	}
21cdc                 | ' 	return res;
21cdc     08 4E 05 F1 | 	add	fp, #8
21ce0     A7 FA 01 FB | 	rdlong	result1, fp
21ce4     08 4E 85 F1 | 	sub	fp, #8
21ce8     A7 F0 03 F6 | 	mov	ptra, fp
21cec     B2 00 A0 FD | 	call	#popregs_
21cf0                 | _fatfs_cc_f_closedir_ret
21cf0     2D 00 64 FD | 	ret
21cf4                 | 
21cf4                 | _fatfs_cc_f_readdir
21cf4     00 4A 05 F6 | 	mov	COUNT_, #0
21cf8     A8 00 A0 FD | 	call	#pushregs_
21cfc     14 F0 07 F1 | 	add	ptra, #20
21d00     04 4E 05 F1 | 	add	fp, #4
21d04     A7 12 62 FC | 	wrlong	arg01, fp
21d08     04 4E 05 F1 | 	add	fp, #4
21d0c     A7 14 62 FC | 	wrlong	arg02, fp
21d10     04 4E 85 F1 | 	sub	fp, #4
21d14     A7 12 02 FB | 	rdlong	arg01, fp
21d18     0C 4E 05 F1 | 	add	fp, #12
21d1c     A7 14 02 F6 | 	mov	arg02, fp
21d20     10 4E 85 F1 | 	sub	fp, #16
21d24     54 DD BF FD | 	call	#_fatfs_cc_validate
21d28     0C 4E 05 F1 | 	add	fp, #12
21d2c     A7 FA 61 FC | 	wrlong	result1, fp
21d30     0C 4E 85 F1 | 	sub	fp, #12
21d34     00 FA 0D F2 | 	cmp	result1, #0 wz
21d38     BC 00 90 5D |  if_ne	jmp	#LR__3693
21d3c     08 4E 05 F1 | 	add	fp, #8
21d40     A7 FA 09 FB | 	rdlong	result1, fp wz
21d44     08 4E 85 F1 | 	sub	fp, #8
21d48     24 00 90 5D |  if_ne	jmp	#LR__3690
21d4c     04 4E 05 F1 | 	add	fp, #4
21d50     A7 12 02 FB | 	rdlong	arg01, fp
21d54     04 4E 85 F1 | 	sub	fp, #4
21d58     00 14 06 F6 | 	mov	arg02, #0
21d5c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
21d60     0C 4E 05 F1 | 	add	fp, #12
21d64     A7 FA 61 FC | 	wrlong	result1, fp
21d68     0C 4E 85 F1 | 	sub	fp, #12
21d6c     88 00 90 FD | 	jmp	#LR__3692
21d70                 | LR__3690
21d70     04 4E 05 F1 | 	add	fp, #4
21d74     A7 12 02 FB | 	rdlong	arg01, fp
21d78     04 4E 85 F1 | 	sub	fp, #4
21d7c     00 14 06 F6 | 	mov	arg02, #0
21d80     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
21d84     0C 4E 05 F1 | 	add	fp, #12
21d88     A7 FA 61 FC | 	wrlong	result1, fp
21d8c     0C 4E 85 F1 | 	sub	fp, #12
21d90     04 FA 0D F2 | 	cmp	result1, #4 wz
21d94     0C 4E 05 A1 |  if_e	add	fp, #12
21d98     A7 00 68 AC |  if_e	wrlong	#0, fp
21d9c     0C 4E 85 A1 |  if_e	sub	fp, #12
21da0     0C 4E 05 F1 | 	add	fp, #12
21da4     A7 FA 09 FB | 	rdlong	result1, fp wz
21da8     0C 4E 85 F1 | 	sub	fp, #12
21dac     48 00 90 5D |  if_ne	jmp	#LR__3691
21db0     04 4E 05 F1 | 	add	fp, #4
21db4     A7 12 02 FB | 	rdlong	arg01, fp
21db8     04 4E 05 F1 | 	add	fp, #4
21dbc     A7 14 02 FB | 	rdlong	arg02, fp
21dc0     08 4E 85 F1 | 	sub	fp, #8
21dc4     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
21dc8     04 4E 05 F1 | 	add	fp, #4
21dcc     A7 12 02 FB | 	rdlong	arg01, fp
21dd0     04 4E 85 F1 | 	sub	fp, #4
21dd4     00 14 06 F6 | 	mov	arg02, #0
21dd8     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
21ddc     0C 4E 05 F1 | 	add	fp, #12
21de0     A7 FA 61 FC | 	wrlong	result1, fp
21de4     0C 4E 85 F1 | 	sub	fp, #12
21de8     04 FA 0D F2 | 	cmp	result1, #4 wz
21dec     0C 4E 05 A1 |  if_e	add	fp, #12
21df0     A7 00 68 AC |  if_e	wrlong	#0, fp
21df4     0C 4E 85 A1 |  if_e	sub	fp, #12
21df8                 | LR__3691
21df8                 | LR__3692
21df8                 | LR__3693
21df8                 | ' 			}
21df8                 | ' 			;
21df8                 | ' 		}
21df8                 | ' 	}
21df8                 | ' 	return res ;
21df8     0C 4E 05 F1 | 	add	fp, #12
21dfc     A7 FA 01 FB | 	rdlong	result1, fp
21e00     0C 4E 85 F1 | 	sub	fp, #12
21e04     A7 F0 03 F6 | 	mov	ptra, fp
21e08     B2 00 A0 FD | 	call	#popregs_
21e0c                 | _fatfs_cc_f_readdir_ret
21e0c     2D 00 64 FD | 	ret
21e10                 | 
21e10                 | _fatfs_cc_f_stat
21e10     00 4A 05 F6 | 	mov	COUNT_, #0
21e14     A8 00 A0 FD | 	call	#pushregs_
21e18     40 F0 07 F1 | 	add	ptra, #64
21e1c     04 4E 05 F1 | 	add	fp, #4
21e20     A7 12 62 FC | 	wrlong	arg01, fp
21e24     04 4E 05 F1 | 	add	fp, #4
21e28     A7 14 62 FC | 	wrlong	arg02, fp
21e2c     04 4E 85 F1 | 	sub	fp, #4
21e30     A7 12 02 F6 | 	mov	arg01, fp
21e34     0C 4E 05 F1 | 	add	fp, #12
21e38     A7 14 02 F6 | 	mov	arg02, fp
21e3c     10 4E 85 F1 | 	sub	fp, #16
21e40     00 16 06 F6 | 	mov	arg03, #0
21e44     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
21e48     0C 4E 05 F1 | 	add	fp, #12
21e4c     A7 FA 61 FC | 	wrlong	result1, fp
21e50     0C 4E 85 F1 | 	sub	fp, #12
21e54     00 FA 0D F2 | 	cmp	result1, #0 wz
21e58     74 00 90 5D |  if_ne	jmp	#LR__3703
21e5c     10 4E 05 F1 | 	add	fp, #16
21e60     A7 12 02 F6 | 	mov	arg01, fp
21e64     0C 4E 85 F1 | 	sub	fp, #12
21e68     A7 14 02 FB | 	rdlong	arg02, fp
21e6c     04 4E 85 F1 | 	sub	fp, #4
21e70     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
21e74     0C 4E 05 F1 | 	add	fp, #12
21e78     A7 FA 61 FC | 	wrlong	result1, fp
21e7c     0C 4E 85 F1 | 	sub	fp, #12
21e80     00 FA 0D F2 | 	cmp	result1, #0 wz
21e84     48 00 90 5D |  if_ne	jmp	#LR__3702
21e88     3B 4E 05 F1 | 	add	fp, #59
21e8c     A7 FA C1 FA | 	rdbyte	result1, fp
21e90     3B 4E 85 F1 | 	sub	fp, #59
21e94     80 FA CD F7 | 	test	result1, #128 wz
21e98     0C 4E 05 51 |  if_ne	add	fp, #12
21e9c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21ea0     0C 4E 85 51 |  if_ne	sub	fp, #12
21ea4     28 00 90 5D |  if_ne	jmp	#LR__3701
21ea8     08 4E 05 F1 | 	add	fp, #8
21eac     A7 FA 09 FB | 	rdlong	result1, fp wz
21eb0     08 4E 85 F1 | 	sub	fp, #8
21eb4     18 00 90 AD |  if_e	jmp	#LR__3700
21eb8     10 4E 05 F1 | 	add	fp, #16
21ebc     A7 12 02 F6 | 	mov	arg01, fp
21ec0     08 4E 85 F1 | 	sub	fp, #8
21ec4     A7 14 02 FB | 	rdlong	arg02, fp
21ec8     08 4E 85 F1 | 	sub	fp, #8
21ecc     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
21ed0                 | LR__3700
21ed0                 | LR__3701
21ed0                 | LR__3702
21ed0                 | LR__3703
21ed0                 | ' 			}
21ed0                 | ' 		}
21ed0                 | ' 		;
21ed0                 | ' 	}
21ed0                 | ' 
21ed0                 | ' 	return res ;
21ed0     0C 4E 05 F1 | 	add	fp, #12
21ed4     A7 FA 01 FB | 	rdlong	result1, fp
21ed8     0C 4E 85 F1 | 	sub	fp, #12
21edc     A7 F0 03 F6 | 	mov	ptra, fp
21ee0     B2 00 A0 FD | 	call	#popregs_
21ee4                 | _fatfs_cc_f_stat_ret
21ee4     2D 00 64 FD | 	ret
21ee8                 | 
21ee8                 | _fatfs_cc_f_unlink
21ee8     00 4A 05 F6 | 	mov	COUNT_, #0
21eec     A8 00 A0 FD | 	call	#pushregs_
21ef0     74 F0 07 F1 | 	add	ptra, #116
21ef4     04 4E 05 F1 | 	add	fp, #4
21ef8     A7 12 62 FC | 	wrlong	arg01, fp
21efc     68 4E 05 F1 | 	add	fp, #104
21f00     A7 00 68 FC | 	wrlong	#0, fp
21f04     68 4E 85 F1 | 	sub	fp, #104
21f08     A7 12 02 F6 | 	mov	arg01, fp
21f0c     6C 4E 05 F1 | 	add	fp, #108
21f10     A7 14 02 F6 | 	mov	arg02, fp
21f14     70 4E 85 F1 | 	sub	fp, #112
21f18     02 16 06 F6 | 	mov	arg03, #2
21f1c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
21f20     08 4E 05 F1 | 	add	fp, #8
21f24     A7 FA 61 FC | 	wrlong	result1, fp
21f28     08 4E 85 F1 | 	sub	fp, #8
21f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
21f30     E4 01 90 5D |  if_ne	jmp	#LR__3718
21f34     70 4E 05 F1 | 	add	fp, #112
21f38     A7 16 02 FB | 	rdlong	arg03, fp
21f3c     64 4E 85 F1 | 	sub	fp, #100
21f40     A7 16 62 FC | 	wrlong	arg03, fp
21f44     A7 12 02 F6 | 	mov	arg01, fp
21f48     08 4E 85 F1 | 	sub	fp, #8
21f4c     A7 14 02 FB | 	rdlong	arg02, fp
21f50     04 4E 85 F1 | 	sub	fp, #4
21f54     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
21f58     08 4E 05 F1 | 	add	fp, #8
21f5c     A7 FA 61 FC | 	wrlong	result1, fp
21f60     00 FA 4D F2 | 	cmps	result1, #0 wz
21f64     08 4E 85 F1 | 	sub	fp, #8
21f68     AC 01 90 5D |  if_ne	jmp	#LR__3717
21f6c     37 4E 05 F1 | 	add	fp, #55
21f70     A7 FA C1 FA | 	rdbyte	result1, fp
21f74     37 4E 85 F1 | 	sub	fp, #55
21f78     80 FA CD F7 | 	test	result1, #128 wz
21f7c     08 4E 05 51 |  if_ne	add	fp, #8
21f80     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21f84     08 4E 85 51 |  if_ne	sub	fp, #8
21f88     1C 00 90 5D |  if_ne	jmp	#LR__3710
21f8c     12 4E 05 F1 | 	add	fp, #18
21f90     A7 FA C1 FA | 	rdbyte	result1, fp
21f94     12 4E 85 F1 | 	sub	fp, #18
21f98     01 FA CD F7 | 	test	result1, #1 wz
21f9c     08 4E 05 51 |  if_ne	add	fp, #8
21fa0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
21fa4     08 4E 85 51 |  if_ne	sub	fp, #8
21fa8                 | LR__3710
21fa8     08 4E 05 F1 | 	add	fp, #8
21fac     A7 FA 09 FB | 	rdlong	result1, fp wz
21fb0     08 4E 85 F1 | 	sub	fp, #8
21fb4     C8 00 90 5D |  if_ne	jmp	#LR__3713
21fb8     70 4E 05 F1 | 	add	fp, #112
21fbc     A7 12 02 FB | 	rdlong	arg01, fp
21fc0     48 4E 85 F1 | 	sub	fp, #72
21fc4     A7 14 02 FB | 	rdlong	arg02, fp
21fc8     28 4E 85 F1 | 	sub	fp, #40
21fcc     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
21fd0     6C 4E 05 F1 | 	add	fp, #108
21fd4     A7 FA 61 FC | 	wrlong	result1, fp
21fd8     5A 4E 85 F1 | 	sub	fp, #90
21fdc     A7 FA C1 FA | 	rdbyte	result1, fp
21fe0     12 4E 85 F1 | 	sub	fp, #18
21fe4     10 FA CD F7 | 	test	result1, #16 wz
21fe8     94 00 90 AD |  if_e	jmp	#LR__3712
21fec     70 4E 05 F1 | 	add	fp, #112
21ff0     A7 FA 01 FB | 	rdlong	result1, fp
21ff4     34 4E 85 F1 | 	sub	fp, #52
21ff8     A7 FA 61 FC | 	wrlong	result1, fp
21ffc     30 4E 05 F1 | 	add	fp, #48
22000     A7 16 02 FB | 	rdlong	arg03, fp
22004     28 4E 85 F1 | 	sub	fp, #40
22008     A7 16 62 FC | 	wrlong	arg03, fp
2200c     08 4E 85 F1 | 	sub	fp, #8
22010     A7 12 02 F6 | 	mov	arg01, fp
22014     3C 4E 85 F1 | 	sub	fp, #60
22018     00 14 06 F6 | 	mov	arg02, #0
2201c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
22020     08 4E 05 F1 | 	add	fp, #8
22024     A7 FA 61 FC | 	wrlong	result1, fp
22028     08 4E 85 F1 | 	sub	fp, #8
2202c     00 FA 0D F2 | 	cmp	result1, #0 wz
22030     4C 00 90 5D |  if_ne	jmp	#LR__3711
22034     3C 4E 05 F1 | 	add	fp, #60
22038     A7 12 02 F6 | 	mov	arg01, fp
2203c     3C 4E 85 F1 | 	sub	fp, #60
22040     00 14 06 F6 | 	mov	arg02, #0
22044     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
22048     08 4E 05 F1 | 	add	fp, #8
2204c     A7 FA 61 FC | 	wrlong	result1, fp
22050     00 FA 4D F2 | 	cmps	result1, #0 wz
22054     08 4E 85 F1 | 	sub	fp, #8
22058     08 4E 05 A1 |  if_e	add	fp, #8
2205c     A7 0E 68 AC |  if_e	wrlong	#7, fp
22060     08 4E 85 A1 |  if_e	sub	fp, #8
22064     08 4E 05 F1 | 	add	fp, #8
22068     A7 FA 01 FB | 	rdlong	result1, fp
2206c     08 4E 85 F1 | 	sub	fp, #8
22070     04 FA 0D F2 | 	cmp	result1, #4 wz
22074     08 4E 05 A1 |  if_e	add	fp, #8
22078     A7 00 68 AC |  if_e	wrlong	#0, fp
2207c     08 4E 85 A1 |  if_e	sub	fp, #8
22080                 | LR__3711
22080                 | LR__3712
22080                 | LR__3713
22080     08 4E 05 F1 | 	add	fp, #8
22084     A7 FA 09 FB | 	rdlong	result1, fp wz
22088     08 4E 85 F1 | 	sub	fp, #8
2208c     88 00 90 5D |  if_ne	jmp	#LR__3716
22090     0C 4E 05 F1 | 	add	fp, #12
22094     A7 12 02 F6 | 	mov	arg01, fp
22098     0C 4E 85 F1 | 	sub	fp, #12
2209c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
220a0     08 4E 05 F1 | 	add	fp, #8
220a4     A7 FA 61 FC | 	wrlong	result1, fp
220a8     08 4E 85 F1 | 	sub	fp, #8
220ac     00 FA 0D F2 | 	cmp	result1, #0 wz
220b0     38 00 90 5D |  if_ne	jmp	#LR__3714
220b4     6C 4E 05 F1 | 	add	fp, #108
220b8     A7 FA 09 FB | 	rdlong	result1, fp wz
220bc     6C 4E 85 F1 | 	sub	fp, #108
220c0     28 00 90 AD |  if_e	jmp	#LR__3714
220c4     0C 4E 05 F1 | 	add	fp, #12
220c8     A7 12 02 F6 | 	mov	arg01, fp
220cc     60 4E 05 F1 | 	add	fp, #96
220d0     A7 14 02 FB | 	rdlong	arg02, fp
220d4     6C 4E 85 F1 | 	sub	fp, #108
220d8     00 16 06 F6 | 	mov	arg03, #0
220dc     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
220e0     08 4E 05 F1 | 	add	fp, #8
220e4     A7 FA 61 FC | 	wrlong	result1, fp
220e8     08 4E 85 F1 | 	sub	fp, #8
220ec                 | LR__3714
220ec     08 4E 05 F1 | 	add	fp, #8
220f0     A7 FA 09 FB | 	rdlong	result1, fp wz
220f4     08 4E 85 F1 | 	sub	fp, #8
220f8     1C 00 90 5D |  if_ne	jmp	#LR__3715
220fc     70 4E 05 F1 | 	add	fp, #112
22100     A7 12 02 FB | 	rdlong	arg01, fp
22104     70 4E 85 F1 | 	sub	fp, #112
22108     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2210c     08 4E 05 F1 | 	add	fp, #8
22110     A7 FA 61 FC | 	wrlong	result1, fp
22114     08 4E 85 F1 | 	sub	fp, #8
22118                 | LR__3715
22118                 | LR__3716
22118                 | LR__3717
22118                 | LR__3718
22118                 | ' 			}
22118                 | ' 		}
22118                 | ' 		;
22118                 | ' 	}
22118                 | ' 
22118                 | ' 	return res ;
22118     08 4E 05 F1 | 	add	fp, #8
2211c     A7 FA 01 FB | 	rdlong	result1, fp
22120     08 4E 85 F1 | 	sub	fp, #8
22124     A7 F0 03 F6 | 	mov	ptra, fp
22128     B2 00 A0 FD | 	call	#popregs_
2212c                 | _fatfs_cc_f_unlink_ret
2212c     2D 00 64 FD | 	ret
22130                 | 
22130                 | _fatfs_cc_f_mkdir
22130     00 4A 05 F6 | 	mov	COUNT_, #0
22134     A8 00 A0 FD | 	call	#pushregs_
22138     5C F0 07 F1 | 	add	ptra, #92
2213c     04 4E 05 F1 | 	add	fp, #4
22140     A7 12 62 FC | 	wrlong	arg01, fp
22144     A7 12 02 F6 | 	mov	arg01, fp
22148     48 4E 05 F1 | 	add	fp, #72
2214c     A7 14 02 F6 | 	mov	arg02, fp
22150     4C 4E 85 F1 | 	sub	fp, #76
22154     02 16 06 F6 | 	mov	arg03, #2
22158     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2215c     08 4E 05 F1 | 	add	fp, #8
22160     A7 FA 61 FC | 	wrlong	result1, fp
22164     08 4E 85 F1 | 	sub	fp, #8
22168     00 FA 0D F2 | 	cmp	result1, #0 wz
2216c     C4 02 90 5D |  if_ne	jmp	#LR__3725
22170     4C 4E 05 F1 | 	add	fp, #76
22174     A7 16 02 FB | 	rdlong	arg03, fp
22178     40 4E 85 F1 | 	sub	fp, #64
2217c     A7 16 62 FC | 	wrlong	arg03, fp
22180     A7 12 02 F6 | 	mov	arg01, fp
22184     08 4E 85 F1 | 	sub	fp, #8
22188     A7 14 02 FB | 	rdlong	arg02, fp
2218c     04 4E 85 F1 | 	sub	fp, #4
22190     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
22194     08 4E 05 F1 | 	add	fp, #8
22198     A7 FA 61 FC | 	wrlong	result1, fp
2219c     00 FA 4D F2 | 	cmps	result1, #0 wz
221a0     08 4E 85 F1 | 	sub	fp, #8
221a4     08 4E 05 A1 |  if_e	add	fp, #8
221a8     A7 10 68 AC |  if_e	wrlong	#8, fp
221ac     08 4E 85 A1 |  if_e	sub	fp, #8
221b0     08 4E 05 F1 | 	add	fp, #8
221b4     A7 FA 01 FB | 	rdlong	result1, fp
221b8     08 4E 85 F1 | 	sub	fp, #8
221bc     04 FA 0D F2 | 	cmp	result1, #4 wz
221c0     70 02 90 5D |  if_ne	jmp	#LR__3724
221c4     4C 4E 05 F1 | 	add	fp, #76
221c8     A7 16 02 FB | 	rdlong	arg03, fp
221cc     10 4E 85 F1 | 	sub	fp, #16
221d0     A7 16 62 FC | 	wrlong	arg03, fp
221d4     A7 12 02 F6 | 	mov	arg01, fp
221d8     3C 4E 85 F1 | 	sub	fp, #60
221dc     00 14 06 F6 | 	mov	arg02, #0
221e0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
221e4     50 4E 05 F1 | 	add	fp, #80
221e8     A7 FA 61 FC | 	wrlong	result1, fp
221ec     48 4E 85 F1 | 	sub	fp, #72
221f0     A7 00 68 FC | 	wrlong	#0, fp
221f4     48 4E 05 F1 | 	add	fp, #72
221f8     A7 FA 09 FB | 	rdlong	result1, fp wz
221fc     50 4E 85 F1 | 	sub	fp, #80
22200     08 4E 05 A1 |  if_e	add	fp, #8
22204     A7 0E 68 AC |  if_e	wrlong	#7, fp
22208     08 4E 85 A1 |  if_e	sub	fp, #8
2220c     50 4E 05 F1 | 	add	fp, #80
22210     A7 FA 01 FB | 	rdlong	result1, fp
22214     50 4E 85 F1 | 	sub	fp, #80
22218     01 FA 0D F2 | 	cmp	result1, #1 wz
2221c     08 4E 05 A1 |  if_e	add	fp, #8
22220     A7 04 68 AC |  if_e	wrlong	#2, fp
22224     08 4E 85 A1 |  if_e	sub	fp, #8
22228     50 4E 05 F1 | 	add	fp, #80
2222c     A7 16 02 FB | 	rdlong	arg03, fp
22230     50 4E 85 F1 | 	sub	fp, #80
22234     FF FF 7F FF 
22238     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2223c     08 4E 05 A1 |  if_e	add	fp, #8
22240     A7 02 68 AC |  if_e	wrlong	#1, fp
22244     08 4E 85 A1 |  if_e	sub	fp, #8
22248     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2224c     58 4E 05 F1 | 	add	fp, #88
22250     A7 FA 61 FC | 	wrlong	result1, fp
22254     50 4E 85 F1 | 	sub	fp, #80
22258     A7 FA 09 FB | 	rdlong	result1, fp wz
2225c     08 4E 85 F1 | 	sub	fp, #8
22260     1C 01 90 5D |  if_ne	jmp	#LR__3721
22264     4C 4E 05 F1 | 	add	fp, #76
22268     A7 12 02 FB | 	rdlong	arg01, fp
2226c     04 4E 05 F1 | 	add	fp, #4
22270     A7 14 02 FB | 	rdlong	arg02, fp
22274     50 4E 85 F1 | 	sub	fp, #80
22278     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2227c     08 4E 05 F1 | 	add	fp, #8
22280     A7 FA 61 FC | 	wrlong	result1, fp
22284     00 FA 4D F2 | 	cmps	result1, #0 wz
22288     08 4E 85 F1 | 	sub	fp, #8
2228c     F0 00 90 5D |  if_ne	jmp	#LR__3720
22290     4C 4E 05 F1 | 	add	fp, #76
22294     A7 12 02 FB | 	rdlong	arg01, fp
22298     4C 4E 85 F1 | 	sub	fp, #76
2229c     34 12 06 F1 | 	add	arg01, #52
222a0     20 14 06 F6 | 	mov	arg02, #32
222a4     0B 16 06 F6 | 	mov	arg03, #11
222a8     98 00 A0 FD | 	call	#\builtin_bytefill_
222ac     4C 4E 05 F1 | 	add	fp, #76
222b0     A7 FA 01 FB | 	rdlong	result1, fp
222b4     34 FA 05 F1 | 	add	result1, #52
222b8     FD 5C 48 FC | 	wrbyte	#46, result1
222bc     A7 16 02 FB | 	rdlong	arg03, fp
222c0     3F 16 06 F1 | 	add	arg03, #63
222c4     0B 21 48 FC | 	wrbyte	#16, arg03
222c8     A7 12 02 FB | 	rdlong	arg01, fp
222cc     4A 12 06 F1 | 	add	arg01, #74
222d0     0C 4E 05 F1 | 	add	fp, #12
222d4     A7 14 02 FB | 	rdlong	arg02, fp
222d8     09 15 62 FC | 	wrlong	arg02, arg01
222dc     0C 4E 85 F1 | 	sub	fp, #12
222e0     A7 14 02 FB | 	rdlong	arg02, fp
222e4     0A 13 02 F6 | 	mov	arg01, arg02
222e8     34 14 06 F1 | 	add	arg02, #52
222ec     04 4E 05 F1 | 	add	fp, #4
222f0     A7 16 02 FB | 	rdlong	arg03, fp
222f4     50 4E 85 F1 | 	sub	fp, #80
222f8     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
222fc     4C 4E 05 F1 | 	add	fp, #76
22300     A7 14 02 FB | 	rdlong	arg02, fp
22304     0A 13 02 F6 | 	mov	arg01, arg02
22308     54 12 06 F1 | 	add	arg01, #84
2230c     4C 4E 85 F1 | 	sub	fp, #76
22310     34 14 06 F1 | 	add	arg02, #52
22314     20 16 06 F6 | 	mov	arg03, #32
22318     B4 30 BF FD | 	call	#__system____builtin_memmove
2231c     4C 4E 05 F1 | 	add	fp, #76
22320     A7 16 02 FB | 	rdlong	arg03, fp
22324     55 16 06 F1 | 	add	arg03, #85
22328     0B 5D 48 FC | 	wrbyte	#46, arg03
2232c     38 4E 85 F1 | 	sub	fp, #56
22330     A7 16 02 FB | 	rdlong	arg03, fp
22334     40 4E 05 F1 | 	add	fp, #64
22338     A7 16 62 FC | 	wrlong	arg03, fp
2233c     08 4E 85 F1 | 	sub	fp, #8
22340     A7 14 02 FB | 	rdlong	arg02, fp
22344     0A 13 02 F6 | 	mov	arg01, arg02
22348     54 14 06 F1 | 	add	arg02, #84
2234c     4C 4E 85 F1 | 	sub	fp, #76
22350     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
22354     4C 4E 05 F1 | 	add	fp, #76
22358     A7 16 02 FB | 	rdlong	arg03, fp
2235c     03 16 06 F1 | 	add	arg03, #3
22360     0B 03 48 FC | 	wrbyte	#1, arg03
22364     40 4E 85 F1 | 	sub	fp, #64
22368     A7 12 02 F6 | 	mov	arg01, fp
2236c     0C 4E 85 F1 | 	sub	fp, #12
22370     44 BA BF FD | 	call	#_fatfs_cc_dir_register
22374     08 4E 05 F1 | 	add	fp, #8
22378     A7 FA 61 FC | 	wrlong	result1, fp
2237c     08 4E 85 F1 | 	sub	fp, #8
22380                 | LR__3720
22380                 | LR__3721
22380     08 4E 05 F1 | 	add	fp, #8
22384     A7 FA 09 FB | 	rdlong	result1, fp wz
22388     08 4E 85 F1 | 	sub	fp, #8
2238c     88 00 90 5D |  if_ne	jmp	#LR__3722
22390     28 4E 05 F1 | 	add	fp, #40
22394     A7 12 02 FB | 	rdlong	arg01, fp
22398     16 12 06 F1 | 	add	arg01, #22
2239c     30 4E 05 F1 | 	add	fp, #48
223a0     A7 14 02 FB | 	rdlong	arg02, fp
223a4     09 15 62 FC | 	wrlong	arg02, arg01
223a8     0C 4E 85 F1 | 	sub	fp, #12
223ac     A7 12 02 FB | 	rdlong	arg01, fp
223b0     24 4E 85 F1 | 	sub	fp, #36
223b4     A7 14 02 FB | 	rdlong	arg02, fp
223b8     28 4E 05 F1 | 	add	fp, #40
223bc     A7 16 02 FB | 	rdlong	arg03, fp
223c0     50 4E 85 F1 | 	sub	fp, #80
223c4     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
223c8     28 4E 05 F1 | 	add	fp, #40
223cc     A7 FA 01 FB | 	rdlong	result1, fp
223d0     0B FA 05 F1 | 	add	result1, #11
223d4     FD 20 48 FC | 	wrbyte	#16, result1
223d8     24 4E 05 F1 | 	add	fp, #36
223dc     A7 FA 01 FB | 	rdlong	result1, fp
223e0     03 FA 05 F1 | 	add	result1, #3
223e4     FD 02 48 FC | 	wrbyte	#1, result1
223e8     44 4E 85 F1 | 	sub	fp, #68
223ec     A7 FA 09 FB | 	rdlong	result1, fp wz
223f0     08 4E 85 F1 | 	sub	fp, #8
223f4     3C 00 90 5D |  if_ne	jmp	#LR__3723
223f8     4C 4E 05 F1 | 	add	fp, #76
223fc     A7 12 02 FB | 	rdlong	arg01, fp
22400     4C 4E 85 F1 | 	sub	fp, #76
22404     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
22408     08 4E 05 F1 | 	add	fp, #8
2240c     A7 FA 61 FC | 	wrlong	result1, fp
22410     08 4E 85 F1 | 	sub	fp, #8
22414     1C 00 90 FD | 	jmp	#LR__3723
22418                 | LR__3722
22418     3C 4E 05 F1 | 	add	fp, #60
2241c     A7 12 02 F6 | 	mov	arg01, fp
22420     14 4E 05 F1 | 	add	fp, #20
22424     A7 14 02 FB | 	rdlong	arg02, fp
22428     50 4E 85 F1 | 	sub	fp, #80
2242c     00 16 06 F6 | 	mov	arg03, #0
22430     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
22434                 | LR__3723
22434                 | LR__3724
22434                 | LR__3725
22434                 | ' 				remove_chain(&sobj, dcl, 0);
22434                 | ' 			}
22434                 | ' 		}
22434                 | ' 		;
22434                 | ' 	}
22434                 | ' 
22434                 | ' 	return res ;
22434     08 4E 05 F1 | 	add	fp, #8
22438     A7 FA 01 FB | 	rdlong	result1, fp
2243c     08 4E 85 F1 | 	sub	fp, #8
22440     A7 F0 03 F6 | 	mov	ptra, fp
22444     B2 00 A0 FD | 	call	#popregs_
22448                 | _fatfs_cc_f_mkdir_ret
22448     2D 00 64 FD | 	ret
2244c                 | 
2244c                 | _fatfs_cc_f_rename
2244c     01 4A 05 F6 | 	mov	COUNT_, #1
22450     A8 00 A0 FD | 	call	#pushregs_
22454     9C F0 07 F1 | 	add	ptra, #156
22458     04 4E 05 F1 | 	add	fp, #4
2245c     A7 12 62 FC | 	wrlong	arg01, fp
22460     04 4E 05 F1 | 	add	fp, #4
22464     A7 14 62 FC | 	wrlong	arg02, fp
22468     A7 12 02 F6 | 	mov	arg01, fp
2246c     08 4E 85 F1 | 	sub	fp, #8
22470     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
22474     04 4E 05 F1 | 	add	fp, #4
22478     A7 12 02 F6 | 	mov	arg01, fp
2247c     6C 4E 05 F1 | 	add	fp, #108
22480     A7 14 02 F6 | 	mov	arg02, fp
22484     70 4E 85 F1 | 	sub	fp, #112
22488     02 16 06 F6 | 	mov	arg03, #2
2248c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
22490     0C 4E 05 F1 | 	add	fp, #12
22494     A7 FA 61 FC | 	wrlong	result1, fp
22498     0C 4E 85 F1 | 	sub	fp, #12
2249c     00 FA 0D F2 | 	cmp	result1, #0 wz
224a0     44 03 90 5D |  if_ne	jmp	#LR__3743
224a4     70 4E 05 F1 | 	add	fp, #112
224a8     A7 16 02 FB | 	rdlong	arg03, fp
224ac     60 4E 85 F1 | 	sub	fp, #96
224b0     A7 16 62 FC | 	wrlong	arg03, fp
224b4     A7 12 02 F6 | 	mov	arg01, fp
224b8     0C 4E 85 F1 | 	sub	fp, #12
224bc     A7 14 02 FB | 	rdlong	arg02, fp
224c0     04 4E 85 F1 | 	sub	fp, #4
224c4     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
224c8     0C 4E 05 F1 | 	add	fp, #12
224cc     A7 FA 61 FC | 	wrlong	result1, fp
224d0     00 FA 4D F2 | 	cmps	result1, #0 wz
224d4     0C 4E 85 F1 | 	sub	fp, #12
224d8     1C 00 90 5D |  if_ne	jmp	#LR__3730
224dc     3B 4E 05 F1 | 	add	fp, #59
224e0     A7 FA C1 FA | 	rdbyte	result1, fp
224e4     3B 4E 85 F1 | 	sub	fp, #59
224e8     A0 FA CD F7 | 	test	result1, #160 wz
224ec     0C 4E 05 51 |  if_ne	add	fp, #12
224f0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
224f4     0C 4E 85 51 |  if_ne	sub	fp, #12
224f8                 | LR__3730
224f8     0C 4E 05 F1 | 	add	fp, #12
224fc     A7 1E 0A FB | 	rdlong	local01, fp wz
22500     0C 4E 85 F1 | 	sub	fp, #12
22504     E0 02 90 5D |  if_ne	jmp	#LR__3742
22508     74 4E 05 F1 | 	add	fp, #116
2250c     A7 12 02 F6 | 	mov	arg01, fp
22510     48 4E 85 F1 | 	sub	fp, #72
22514     A7 14 02 FB | 	rdlong	arg02, fp
22518     2C 4E 85 F1 | 	sub	fp, #44
2251c     20 16 06 F6 | 	mov	arg03, #32
22520     AC 2E BF FD | 	call	#__system____builtin_memmove
22524     40 4E 05 F1 | 	add	fp, #64
22528     A7 12 02 F6 | 	mov	arg01, fp
2252c     30 4E 85 F1 | 	sub	fp, #48
22530     A7 14 02 F6 | 	mov	arg02, fp
22534     10 4E 85 F1 | 	sub	fp, #16
22538     30 16 06 F6 | 	mov	arg03, #48
2253c     90 2E BF FD | 	call	#__system____builtin_memmove
22540     40 4E 05 F1 | 	add	fp, #64
22544     A7 12 02 F6 | 	mov	arg01, fp
22548     38 4E 85 F1 | 	sub	fp, #56
2254c     A7 14 02 FB | 	rdlong	arg02, fp
22550     08 4E 85 F1 | 	sub	fp, #8
22554     34 CA BF FD | 	call	#_fatfs_cc_follow_path
22558     0C 4E 05 F1 | 	add	fp, #12
2255c     A7 FA 61 FC | 	wrlong	result1, fp
22560     0C 4E 85 F1 | 	sub	fp, #12
22564     00 FA 0D F2 | 	cmp	result1, #0 wz
22568     4C 00 90 5D |  if_ne	jmp	#LR__3733
2256c     48 4E 05 F1 | 	add	fp, #72
22570     A7 FA 01 FB | 	rdlong	result1, fp
22574     30 4E 85 F1 | 	sub	fp, #48
22578     A7 16 02 FB | 	rdlong	arg03, fp
2257c     18 4E 85 F1 | 	sub	fp, #24
22580     0B FB 09 F2 | 	cmp	result1, arg03 wz
22584     20 00 90 5D |  if_ne	jmp	#LR__3731
22588     50 4E 05 F1 | 	add	fp, #80
2258c     A7 FA 01 FB | 	rdlong	result1, fp
22590     30 4E 85 F1 | 	sub	fp, #48
22594     A7 16 02 FB | 	rdlong	arg03, fp
22598     20 4E 85 F1 | 	sub	fp, #32
2259c     0B FB 09 F2 | 	cmp	result1, arg03 wz
225a0     04 1E 06 A6 |  if_e	mov	local01, #4
225a4     04 00 90 AD |  if_e	jmp	#LR__3732
225a8                 | LR__3731
225a8     08 1E 06 F6 | 	mov	local01, #8
225ac                 | LR__3732
225ac     0C 4E 05 F1 | 	add	fp, #12
225b0     A7 1E 62 FC | 	wrlong	local01, fp
225b4     0C 4E 85 F1 | 	sub	fp, #12
225b8                 | LR__3733
225b8     0C 4E 05 F1 | 	add	fp, #12
225bc     A7 1E 02 FB | 	rdlong	local01, fp
225c0     0C 4E 85 F1 | 	sub	fp, #12
225c4     04 1E 0E F2 | 	cmp	local01, #4 wz
225c8     CC 01 90 5D |  if_ne	jmp	#LR__3739
225cc     40 4E 05 F1 | 	add	fp, #64
225d0     A7 12 02 F6 | 	mov	arg01, fp
225d4     40 4E 85 F1 | 	sub	fp, #64
225d8     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
225dc     0C 4E 05 F1 | 	add	fp, #12
225e0     A7 FA 61 FC | 	wrlong	result1, fp
225e4     0C 4E 85 F1 | 	sub	fp, #12
225e8     00 FA 0D F2 | 	cmp	result1, #0 wz
225ec     A8 01 90 5D |  if_ne	jmp	#LR__3738
225f0     5C 4E 05 F1 | 	add	fp, #92
225f4     A7 12 02 FB | 	rdlong	arg01, fp
225f8     38 4E 05 F1 | 	add	fp, #56
225fc     A7 12 62 FC | 	wrlong	arg01, fp
22600     0D 12 06 F1 | 	add	arg01, #13
22604     20 4E 85 F1 | 	sub	fp, #32
22608     A7 14 02 F6 | 	mov	arg02, fp
2260c     74 4E 85 F1 | 	sub	fp, #116
22610     0D 14 06 F1 | 	add	arg02, #13
22614     13 16 06 F6 | 	mov	arg03, #19
22618     B4 2D BF FD | 	call	#__system____builtin_memmove
2261c     94 4E 05 F1 | 	add	fp, #148
22620     A7 1E 02 FB | 	rdlong	local01, fp
22624     15 4E 85 F1 | 	sub	fp, #21
22628     A7 FA C1 FA | 	rdbyte	result1, fp
2262c     0B 1E 06 F1 | 	add	local01, #11
22630     0F FB 41 FC | 	wrbyte	result1, local01
22634     15 4E 05 F1 | 	add	fp, #21
22638     A7 1E 02 FB | 	rdlong	local01, fp
2263c     94 4E 85 F1 | 	sub	fp, #148
22640     0B 1E 06 F1 | 	add	local01, #11
22644     0F 1F C2 FA | 	rdbyte	local01, local01
22648     10 1E CE F7 | 	test	local01, #16 wz
2264c     24 00 90 5D |  if_ne	jmp	#LR__3734
22650     94 4E 05 F1 | 	add	fp, #148
22654     A7 FA 01 FB | 	rdlong	result1, fp
22658     FD 1E 02 F6 | 	mov	local01, result1
2265c     94 4E 85 F1 | 	sub	fp, #148
22660     0B FA 05 F1 | 	add	result1, #11
22664     FD FA C1 FA | 	rdbyte	result1, result1
22668     20 FA 45 F5 | 	or	result1, #32
2266c     0B 1E 06 F1 | 	add	local01, #11
22670     0F FB 41 FC | 	wrbyte	result1, local01
22674                 | LR__3734
22674     70 4E 05 F1 | 	add	fp, #112
22678     A7 1E 02 FB | 	rdlong	local01, fp
2267c     03 1E 06 F1 | 	add	local01, #3
22680     0F 03 48 FC | 	wrbyte	#1, local01
22684     24 4E 05 F1 | 	add	fp, #36
22688     A7 1E 02 FB | 	rdlong	local01, fp
2268c     94 4E 85 F1 | 	sub	fp, #148
22690     0B 1E 06 F1 | 	add	local01, #11
22694     0F 1F C2 FA | 	rdbyte	local01, local01
22698     10 1E CE F7 | 	test	local01, #16 wz
2269c     F8 00 90 AD |  if_e	jmp	#LR__3737
226a0     18 4E 05 F1 | 	add	fp, #24
226a4     A7 16 02 FB | 	rdlong	arg03, fp
226a8     30 4E 05 F1 | 	add	fp, #48
226ac     A7 1E 02 FB | 	rdlong	local01, fp
226b0     48 4E 85 F1 | 	sub	fp, #72
226b4     0F 17 0A F2 | 	cmp	arg03, local01 wz
226b8     DC 00 90 AD |  if_e	jmp	#LR__3737
226bc     70 4E 05 F1 | 	add	fp, #112
226c0     A7 12 02 FB | 	rdlong	arg01, fp
226c4     09 1F 02 F6 | 	mov	local01, arg01
226c8     24 4E 05 F1 | 	add	fp, #36
226cc     A7 14 02 FB | 	rdlong	arg02, fp
226d0     94 4E 85 F1 | 	sub	fp, #148
226d4     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
226d8     FD 14 02 F6 | 	mov	arg02, result1
226dc     0F 13 02 F6 | 	mov	arg01, local01
226e0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
226e4     98 4E 05 F1 | 	add	fp, #152
226e8     A7 FA 61 FC | 	wrlong	result1, fp
226ec     00 FA 4D F2 | 	cmps	result1, #0 wz
226f0     98 4E 85 F1 | 	sub	fp, #152
226f4     0C 4E 05 A1 |  if_e	add	fp, #12
226f8     A7 04 68 AC |  if_e	wrlong	#2, fp
226fc     0C 4E 85 A1 |  if_e	sub	fp, #12
22700     94 00 90 AD |  if_e	jmp	#LR__3736
22704     70 4E 05 F1 | 	add	fp, #112
22708     A7 12 02 FB | 	rdlong	arg01, fp
2270c     28 4E 05 F1 | 	add	fp, #40
22710     A7 14 02 FB | 	rdlong	arg02, fp
22714     98 4E 85 F1 | 	sub	fp, #152
22718     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2271c     0C 4E 05 F1 | 	add	fp, #12
22720     A7 FA 61 FC | 	wrlong	result1, fp
22724     64 4E 05 F1 | 	add	fp, #100
22728     A7 1E 02 FB | 	rdlong	local01, fp
2272c     54 1E 06 F1 | 	add	local01, #84
22730     24 4E 05 F1 | 	add	fp, #36
22734     A7 1E 62 FC | 	wrlong	local01, fp
22738     88 4E 85 F1 | 	sub	fp, #136
2273c     A7 1E 0A FB | 	rdlong	local01, fp wz
22740     0C 4E 85 F1 | 	sub	fp, #12
22744     50 00 90 5D |  if_ne	jmp	#LR__3735
22748     94 4E 05 F1 | 	add	fp, #148
2274c     A7 1E 02 FB | 	rdlong	local01, fp
22750     94 4E 85 F1 | 	sub	fp, #148
22754     01 1E 06 F1 | 	add	local01, #1
22758     0F 1F C2 FA | 	rdbyte	local01, local01
2275c     2E 1E 0E F2 | 	cmp	local01, #46 wz
22760     34 00 90 5D |  if_ne	jmp	#LR__3735
22764     70 4E 05 F1 | 	add	fp, #112
22768     A7 12 02 FB | 	rdlong	arg01, fp
2276c     24 4E 05 F1 | 	add	fp, #36
22770     A7 14 02 FB | 	rdlong	arg02, fp
22774     4C 4E 85 F1 | 	sub	fp, #76
22778     A7 16 02 FB | 	rdlong	arg03, fp
2277c     48 4E 85 F1 | 	sub	fp, #72
22780     50 AD BF FD | 	call	#_fatfs_cc_st_clust
22784     70 4E 05 F1 | 	add	fp, #112
22788     A7 1E 02 FB | 	rdlong	local01, fp
2278c     70 4E 85 F1 | 	sub	fp, #112
22790     03 1E 06 F1 | 	add	local01, #3
22794     0F 03 48 FC | 	wrbyte	#1, local01
22798                 | LR__3735
22798                 | LR__3736
22798                 | LR__3737
22798                 | LR__3738
22798                 | LR__3739
22798     0C 4E 05 F1 | 	add	fp, #12
2279c     A7 1E 0A FB | 	rdlong	local01, fp wz
227a0     0C 4E 85 F1 | 	sub	fp, #12
227a4     40 00 90 5D |  if_ne	jmp	#LR__3741
227a8     10 4E 05 F1 | 	add	fp, #16
227ac     A7 12 02 F6 | 	mov	arg01, fp
227b0     10 4E 85 F1 | 	sub	fp, #16
227b4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
227b8     0C 4E 05 F1 | 	add	fp, #12
227bc     A7 FA 61 FC | 	wrlong	result1, fp
227c0     0C 4E 85 F1 | 	sub	fp, #12
227c4     00 FA 0D F2 | 	cmp	result1, #0 wz
227c8     1C 00 90 5D |  if_ne	jmp	#LR__3740
227cc     70 4E 05 F1 | 	add	fp, #112
227d0     A7 12 02 FB | 	rdlong	arg01, fp
227d4     70 4E 85 F1 | 	sub	fp, #112
227d8     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
227dc     0C 4E 05 F1 | 	add	fp, #12
227e0     A7 FA 61 FC | 	wrlong	result1, fp
227e4     0C 4E 85 F1 | 	sub	fp, #12
227e8                 | LR__3740
227e8                 | LR__3741
227e8                 | LR__3742
227e8                 | LR__3743
227e8                 | ' 					res = sync_fs(fs);
227e8                 | ' 				}
227e8                 | ' 			}
227e8                 | ' 
227e8                 | ' 		}
227e8                 | ' 		;
227e8                 | ' 	}
227e8                 | ' 
227e8                 | ' 	return res ;
227e8     0C 4E 05 F1 | 	add	fp, #12
227ec     A7 FA 01 FB | 	rdlong	result1, fp
227f0     0C 4E 85 F1 | 	sub	fp, #12
227f4     A7 F0 03 F6 | 	mov	ptra, fp
227f8     B2 00 A0 FD | 	call	#popregs_
227fc                 | _fatfs_cc_f_rename_ret
227fc     2D 00 64 FD | 	ret
22800                 | 
22800                 | _fatfs_cc_time
22800     00 4A 05 F6 | 	mov	COUNT_, #0
22804     A8 00 A0 FD | 	call	#pushregs_
22808     14 F0 07 F1 | 	add	ptra, #20
2280c     04 4E 05 F1 | 	add	fp, #4
22810     A7 12 62 FC | 	wrlong	arg01, fp
22814     04 4E 05 F1 | 	add	fp, #4
22818     A7 12 02 F6 | 	mov	arg01, fp
2281c     08 4E 85 F1 | 	sub	fp, #8
22820     00 14 06 F6 | 	mov	arg02, #0
22824     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
22828     08 4E 05 F1 | 	add	fp, #8
2282c     A7 FA 01 FB | 	rdlong	result1, fp
22830     08 4E 05 F1 | 	add	fp, #8
22834     A7 FA 61 FC | 	wrlong	result1, fp
22838     0C 4E 85 F1 | 	sub	fp, #12
2283c     A7 FA 09 FB | 	rdlong	result1, fp wz
22840     04 4E 85 F1 | 	sub	fp, #4
22844     18 00 90 AD |  if_e	jmp	#LR__3750
22848     04 4E 05 F1 | 	add	fp, #4
2284c     A7 FA 01 FB | 	rdlong	result1, fp
22850     0C 4E 05 F1 | 	add	fp, #12
22854     A7 14 02 FB | 	rdlong	arg02, fp
22858     10 4E 85 F1 | 	sub	fp, #16
2285c     FD 14 62 FC | 	wrlong	arg02, result1
22860                 | LR__3750
22860                 | '         *tp = now;
22860                 | '     return now;
22860     10 4E 05 F1 | 	add	fp, #16
22864     A7 FA 01 FB | 	rdlong	result1, fp
22868     10 4E 85 F1 | 	sub	fp, #16
2286c     A7 F0 03 F6 | 	mov	ptra, fp
22870     B2 00 A0 FD | 	call	#popregs_
22874                 | _fatfs_cc_time_ret
22874     2D 00 64 FD | 	ret
22878                 | 
22878                 | _fatfs_cc_mktime
22878     06 4A 05 F6 | 	mov	COUNT_, #6
2287c     A8 00 A0 FD | 	call	#pushregs_
22880     09 1F 02 F6 | 	mov	local01, arg01
22884     14 1E 06 F1 | 	add	local01, #20
22888     0F 13 02 FB | 	rdlong	arg01, local01
2288c     14 1E 86 F1 | 	sub	local01, #20
22890     46 12 56 F2 | 	cmps	arg01, #70 wc
22894                 | '                 return (time_t) -1;
22894     01 FA 65 C6 |  if_b	neg	result1, #1
22898     7C 01 90 CD |  if_b	jmp	#LR__3764
2289c     03 00 00 FF 
228a0     6C 21 06 F6 | 	mov	local02, ##1900
228a4     14 1E 06 F1 | 	add	local01, #20
228a8     0F FB 01 FB | 	rdlong	result1, local01
228ac     FD 20 02 F1 | 	add	local02, result1
228b0     08 1E 86 F1 | 	sub	local01, #8
228b4     0F 23 02 FB | 	rdlong	local03, local01
228b8     01 22 86 F1 | 	sub	local03, #1
228bc     04 1E 06 F1 | 	add	local01, #4
228c0     0F 13 02 FB | 	rdlong	arg01, local01
228c4     10 1E 86 F1 | 	sub	local01, #16
228c8     02 12 66 F0 | 	shl	arg01, #2
228cc     02 00 00 FF 
228d0     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
228d4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
228d8     09 FB 01 FB | 	rdlong	result1, arg01
228dc     FD 22 02 F1 | 	add	local03, result1
228e0     10 13 02 F6 | 	mov	arg01, local02
228e4     02 00 00 FF 
228e8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
228ec     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
228f0     00 FA 0D F2 | 	cmp	result1, #0 wz
228f4     1C 00 90 AD |  if_e	jmp	#LR__3760
228f8     00 24 06 F6 | 	mov	local04, #0
228fc     10 1E 06 F1 | 	add	local01, #16
22900     0F FB 01 FB | 	rdlong	result1, local01
22904     10 1E 86 F1 | 	sub	local01, #16
22908     02 FA 55 F2 | 	cmps	result1, #2 wc
2290c     01 24 06 36 |  if_ae	mov	local04, #1
22910     04 00 90 FD | 	jmp	#LR__3761
22914                 | LR__3760
22914     00 24 06 F6 | 	mov	local04, #0
22918                 | LR__3761
22918     04 1E 06 F1 | 	add	local01, #4
2291c     0F FB 01 FB | 	rdlong	result1, local01
22920     04 1E 86 F1 | 	sub	local01, #4
22924     0F 27 02 FB | 	rdlong	local05, local01
22928     08 1E 06 F1 | 	add	local01, #8
2292c     0F 13 02 FB | 	rdlong	arg01, local01
22930     07 00 00 FF 
22934     10 12 06 FD | 	qmul	arg01, ##3600
22938     12 23 02 F1 | 	add	local03, local04
2293c     FD 24 02 F6 | 	mov	local04, result1
22940     04 24 66 F0 | 	shl	local04, #4
22944     FD 24 82 F1 | 	sub	local04, result1
22948     02 24 66 F0 | 	shl	local04, #2
2294c     12 27 02 F1 | 	add	local05, local04
22950     08 1E 86 F1 | 	sub	local01, #8
22954     18 24 62 FD | 	getqx	local04
22958     A8 00 00 FF 
2295c     80 23 06 FD | 	qmul	local03, ##86400
22960     12 27 02 F1 | 	add	local05, local04
22964     10 23 02 F6 | 	mov	local03, local02
22968     03 00 00 FF 
2296c     B2 23 86 F1 | 	sub	local03, ##1970
22970     18 24 62 FD | 	getqx	local04
22974     99 F0 00 FF 
22978     80 23 06 FD | 	qmul	local03, ##31536000
2297c     12 27 02 F1 | 	add	local05, local04
22980     10 23 02 F6 | 	mov	local03, local02
22984     03 00 00 FF 
22988     B1 23 86 F1 | 	sub	local03, ##1969
2298c     11 29 52 F6 | 	abs	local06, local03 wc
22990     02 28 46 F0 | 	shr	local06, #2
22994     14 29 82 F6 | 	negc	local06, local06
22998     03 00 00 FF 
2299c     D1 21 56 F2 | 	cmps	local02, ##2001 wc
229a0     18 24 62 FD | 	getqx	local04
229a4     12 27 02 F1 | 	add	local05, local04
229a8     18 00 90 CD |  if_b	jmp	#LR__3762
229ac     03 00 00 FF 
229b0     D0 21 86 F1 | 	sub	local02, ##2000
229b4     10 25 52 F6 | 	abs	local04, local02 wc
229b8     64 24 16 FD | 	qdiv	local04, #100
229bc     18 24 62 FD | 	getqx	local04
229c0     12 29 A2 F3 | 	sumnc	local06, local04
229c4                 | LR__3762
229c4     A8 00 00 FF 
229c8     80 29 06 FD | 	qmul	local06, ##86400
229cc     18 28 62 FD | 	getqx	local06
229d0     14 27 02 F1 | 	add	local05, local06
229d4     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
229d8     02 00 00 FF 
229dc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
229e0     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
229e4     14 27 02 F1 | 	add	local05, local06
229e8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
229ec     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
229f0     02 00 00 FF 
229f4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
229f8     01 22 0E F2 | 	cmp	local03, #1 wz
229fc     14 00 90 5D |  if_ne	jmp	#LR__3763
22a00     0F 13 02 F6 | 	mov	arg01, local01
22a04     D8 19 B0 FD | 	call	#_fatfs_cc___indst
22a08     00 FA 0D F2 | 	cmp	result1, #0 wz
22a0c     07 00 00 5F 
22a10     10 26 86 51 |  if_ne	sub	local05, ##3600
22a14                 | LR__3763
22a14                 | '                 s -=  (3600L) ;
22a14                 | ' 
22a14                 | '         return s;
22a14     13 FB 01 F6 | 	mov	result1, local05
22a18                 | LR__3764
22a18     A7 F0 03 F6 | 	mov	ptra, fp
22a1c     B2 00 A0 FD | 	call	#popregs_
22a20                 | _fatfs_cc_mktime_ret
22a20     2D 00 64 FD | 	ret
22a24                 | 
22a24                 | _fatfs_cc__gmtime_r
22a24     03 4A 05 F6 | 	mov	COUNT_, #3
22a28     A8 00 A0 FD | 	call	#pushregs_
22a2c     09 1F 02 FB | 	rdlong	local01, arg01
22a30     A8 00 00 FF 
22a34     80 1F 16 FD | 	qdiv	local01, ##86400
22a38     18 FA 61 FD | 	getqx	result1
22a3c     04 FA 05 F1 | 	add	result1, #4
22a40     07 FA 15 FD | 	qdiv	result1, #7
22a44     18 14 06 F1 | 	add	arg02, #24
22a48     D1 7F 27 FF 
22a4c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
22a50     D1 7F 27 3F 
22a54     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
22a58     03 00 00 3F 
22a5c     DC 21 06 36 |  if_ae	mov	local02, ##2012
22a60     03 00 00 CF 
22a64     B2 21 06 C6 |  if_b	mov	local02, ##1970
22a68                 | ' 	  year = 1970;
22a68                 | ' 	}
22a68                 | ' 
22a68                 | ' 	for(;;) {
22a68     19 FA 61 FD | 	getqy	result1
22a6c     0A FB 61 FC | 	wrlong	result1, arg02
22a70     18 14 86 F1 | 	sub	arg02, #24
22a74                 | LR__3770
22a74     10 13 02 F6 | 	mov	arg01, local02
22a78     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
22a80     42 F1 00 5F 
22a84     00 23 06 56 |  if_ne	mov	local03, ##31622400
22a88     99 F0 00 AF 
22a8c     80 23 06 A6 |  if_e	mov	local03, ##31536000
22a90     11 1F 12 F2 | 	cmp	local01, local03 wc
22a94                 | ' 	    break;
22a94     01 20 06 31 |  if_ae	add	local02, #1
22a98     11 1F 82 31 |  if_ae	sub	local01, local03
22a9c     D4 FF 9F 3D |  if_ae	jmp	#LR__3770
22aa0     A8 00 00 FF 
22aa4     80 1F 16 FD | 	qdiv	local01, ##86400
22aa8     10 23 02 F6 | 	mov	local03, local02
22aac     03 00 00 FF 
22ab0     6C 23 86 F1 | 	sub	local03, ##1900
22ab4     14 14 06 F1 | 	add	arg02, #20
22ab8     0A 23 62 FC | 	wrlong	local03, arg02
22abc     08 14 06 F1 | 	add	arg02, #8
22ac0     10 13 02 F6 | 	mov	arg01, local02
22ac4     18 20 62 FD | 	getqx	local02
22ac8     0A 21 62 FC | 	wrlong	local02, arg02
22acc     1C 14 86 F1 | 	sub	arg02, #28
22ad0     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
22ad8     1D 22 06 56 |  if_ne	mov	local03, #29
22adc     1C 22 06 A6 |  if_e	mov	local03, #28
22ae0     02 00 00 FF 
22ae4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
22ae8     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
22aec     02 00 00 FF 
22af0     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
22af4                 | ' 
22af4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22af4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22af4     00 12 06 F6 | 	mov	arg01, #0
22af8     97 2A 48 FB | 	callpa	#(@LR__3772-@LR__3771)>>2,fcache_load_ptr_
22afc                 | LR__3771
22afc     09 23 02 F6 | 	mov	local03, arg01
22b00     02 22 66 F0 | 	shl	local03, #2
22b04     02 00 00 FF 
22b08     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22b0c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22b10     11 23 02 FB | 	rdlong	local03, local03
22b14     11 21 52 F2 | 	cmps	local02, local03 wc
22b18     02 00 00 FF 
22b1c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22b20     2C 00 90 CD |  if_b	jmp	#LR__3773
22b24     09 23 02 F6 | 	mov	local03, arg01
22b28     02 22 66 F0 | 	shl	local03, #2
22b2c     02 00 00 FF 
22b30     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22b34     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22b38     11 23 02 FB | 	rdlong	local03, local03
22b3c     11 21 82 F1 | 	sub	local02, local03
22b40     01 12 06 F1 | 	add	arg01, #1
22b44     02 00 00 FF 
22b48     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22b4c     AC FF 9F FD | 	jmp	#LR__3771
22b50                 | LR__3772
22b50                 | LR__3773
22b50     A8 00 00 FF 
22b54     80 1F 16 FD | 	qdiv	local01, ##86400
22b58     10 14 06 F1 | 	add	arg02, #16
22b5c     0A 13 62 FC | 	wrlong	arg01, arg02
22b60     01 20 06 F1 | 	add	local02, #1
22b64     04 14 86 F1 | 	sub	arg02, #4
22b68     0A 21 62 FC | 	wrlong	local02, arg02
22b6c     19 1E 62 FD | 	getqy	local01
22b70     07 00 00 FF 
22b74     10 1E 16 FD | 	qdiv	local01, ##3600
22b78     18 22 62 FD | 	getqx	local03
22b7c     07 00 00 FF 
22b80     10 1E 16 FD | 	qdiv	local01, ##3600
22b84     04 14 86 F1 | 	sub	arg02, #4
22b88     0A 23 62 FC | 	wrlong	local03, arg02
22b8c     19 1E 62 FD | 	getqy	local01
22b90     3C 1E 16 FD | 	qdiv	local01, #60
22b94     18 22 62 FD | 	getqx	local03
22b98     3C 1E 16 FD | 	qdiv	local01, #60
22b9c     04 14 86 F1 | 	sub	arg02, #4
22ba0     0A 23 62 FC | 	wrlong	local03, arg02
22ba4     04 14 86 F1 | 	sub	arg02, #4
22ba8                 | '         stm->tm_isdst = 0;
22ba8                 | ' 
22ba8                 | ' ;
22ba8                 | '         return stm;
22ba8     0A FB 01 F6 | 	mov	result1, arg02
22bac     19 22 62 FD | 	getqy	local03
22bb0     0A 23 62 FC | 	wrlong	local03, arg02
22bb4     20 14 06 F1 | 	add	arg02, #32
22bb8     0A 01 68 FC | 	wrlong	#0, arg02
22bbc     A7 F0 03 F6 | 	mov	ptra, fp
22bc0     B2 00 A0 FD | 	call	#popregs_
22bc4                 | _fatfs_cc__gmtime_r_ret
22bc4     2D 00 64 FD | 	ret
22bc8                 | 
22bc8                 | _fatfs_cc__tzset
22bc8     23 01 00 FF 
22bcc     09 13 06 F6 | 	mov	arg01, ##@LR__4085
22bd0     34 00 B0 FD | 	call	#_fatfs_cc_getenv
22bd4     FD 12 02 F6 | 	mov	arg01, result1
22bd8     02 00 00 FF 
22bdc     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
22be0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
22be4     02 00 00 FF 
22be8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22bec     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
22bf0     02 00 00 FF 
22bf4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22bf8     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
22bfc     02 00 00 FF 
22c00     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
22c04                 | _fatfs_cc__tzset_ret
22c04     2D 00 64 FD | 	ret
22c08                 | 
22c08                 | _fatfs_cc_getenv
22c08     06 4A 05 F6 | 	mov	COUNT_, #6
22c0c     A8 00 A0 FD | 	call	#pushregs_
22c10     09 1F 02 F6 | 	mov	local01, arg01
22c14     09 21 02 F6 | 	mov	local02, arg01
22c18     97 06 48 FB | 	callpa	#(@LR__3781-@LR__3780)>>2,fcache_load_ptr_
22c1c                 | LR__3780
22c1c     10 FB C9 FA | 	rdbyte	result1, local02 wz
22c20     01 20 06 51 |  if_ne	add	local02, #1
22c24     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
22c28                 | LR__3781
22c28     09 21 82 F1 | 	sub	local02, arg01
22c2c     10 FB 01 F6 | 	mov	result1, local02
22c30     02 00 00 FF 
22c34     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
22c38     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
22c3c     02 00 00 FF 
22c40     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
22c44                 | '             return 0;
22c44     00 FA 05 A6 |  if_e	mov	result1, #0
22c48     5C 00 90 AD |  if_e	jmp	#LR__3784
22c4c                 | ' 
22c4c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
22c4c     02 00 00 FF 
22c50     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
22c54     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22c58     02 00 00 FF 
22c5c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
22c60                 | LR__3782
22c60     11 25 0A FB | 	rdlong	local04, local03 wz
22c64     3C 00 90 AD |  if_e	jmp	#LR__3783
22c68     12 13 02 F6 | 	mov	arg01, local04
22c6c     0F 15 02 F6 | 	mov	arg02, local01
22c70     10 17 02 F6 | 	mov	arg03, local02
22c74     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
22c78     00 FA 0D F2 | 	cmp	result1, #0 wz
22c7c     10 27 02 A6 |  if_e	mov	local05, local02
22c80     12 27 02 A1 |  if_e	add	local05, local04
22c84     13 29 C2 AA |  if_e	rdbyte	local06, local05
22c88     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
22c8c                 | ' 			return name+len+1;
22c8c     10 25 02 A1 |  if_e	add	local04, local02
22c90     01 24 06 A1 |  if_e	add	local04, #1
22c94     12 FB 01 A6 |  if_e	mov	result1, local04
22c98     0C 00 90 AD |  if_e	jmp	#LR__3784
22c9c     04 22 06 F1 | 	add	local03, #4
22ca0     BC FF 9F FD | 	jmp	#LR__3782
22ca4                 | LR__3783
22ca4                 | ' 	}
22ca4                 | ' 	return 0;
22ca4     00 FA 05 F6 | 	mov	result1, #0
22ca8                 | LR__3784
22ca8     A7 F0 03 F6 | 	mov	ptra, fp
22cac     B2 00 A0 FD | 	call	#popregs_
22cb0                 | _fatfs_cc_getenv_ret
22cb0     2D 00 64 FD | 	ret
22cb4                 | 
22cb4                 | _fatfs_cc__get_fattime
22cb4     00 4A 05 F6 | 	mov	COUNT_, #0
22cb8     A8 00 A0 FD | 	call	#pushregs_
22cbc     34 F0 07 F1 | 	add	ptra, #52
22cc0     00 12 06 F6 | 	mov	arg01, #0
22cc4     38 FB BF FD | 	call	#_fatfs_cc_time
22cc8     04 4E 05 F1 | 	add	fp, #4
22ccc     A7 FA 61 FC | 	wrlong	result1, fp
22cd0     A7 12 02 F6 | 	mov	arg01, fp
22cd4     0C 4E 05 F1 | 	add	fp, #12
22cd8     A7 14 02 F6 | 	mov	arg02, fp
22cdc     10 4E 85 F1 | 	sub	fp, #16
22ce0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
22ce4     24 4E 05 F1 | 	add	fp, #36
22ce8     A7 14 02 FB | 	rdlong	arg02, fp
22cec     50 14 86 F1 | 	sub	arg02, #80
22cf0     09 14 66 F0 | 	shl	arg02, #9
22cf4     04 4E 85 F1 | 	sub	fp, #4
22cf8     A7 FA 01 FB | 	rdlong	result1, fp
22cfc     01 FA 05 F1 | 	add	result1, #1
22d00     05 FA 65 F0 | 	shl	result1, #5
22d04     FD 14 42 F5 | 	or	arg02, result1
22d08     04 4E 85 F1 | 	sub	fp, #4
22d0c     A7 FA 01 FB | 	rdlong	result1, fp
22d10     FD 14 42 F5 | 	or	arg02, result1
22d14     14 4E 85 F1 | 	sub	fp, #20
22d18     A7 14 62 FC | 	wrlong	arg02, fp
22d1c     10 4E 05 F1 | 	add	fp, #16
22d20     A7 14 02 FB | 	rdlong	arg02, fp
22d24     0B 14 66 F0 | 	shl	arg02, #11
22d28     04 4E 85 F1 | 	sub	fp, #4
22d2c     A7 FA 01 FB | 	rdlong	result1, fp
22d30     05 FA 65 F0 | 	shl	result1, #5
22d34     FD 14 42 F5 | 	or	arg02, result1
22d38     04 4E 85 F1 | 	sub	fp, #4
22d3c     A7 FA 01 FB | 	rdlong	result1, fp
22d40     FD 14 42 F5 | 	or	arg02, result1
22d44     04 4E 85 F1 | 	sub	fp, #4
22d48     A7 14 62 FC | 	wrlong	arg02, fp
22d4c                 | ' 
22d4c                 | '     now = time(0);
22d4c                 | '     _gmtime_r (&now, &date);
22d4c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
22d4c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
22d4c                 | '     return (ffdate << 16) | fftime;
22d4c     04 4E 85 F1 | 	sub	fp, #4
22d50     A7 FA 01 FB | 	rdlong	result1, fp
22d54     10 FA 65 F0 | 	shl	result1, #16
22d58     08 4E 85 F1 | 	sub	fp, #8
22d5c     0A FB 41 F5 | 	or	result1, arg02
22d60     A7 F0 03 F6 | 	mov	ptra, fp
22d64     B2 00 A0 FD | 	call	#popregs_
22d68                 | _fatfs_cc__get_fattime_ret
22d68     2D 00 64 FD | 	ret
22d6c                 | 
22d6c                 | _fatfs_cc_unixtime_0767
22d6c     00 4A 05 F6 | 	mov	COUNT_, #0
22d70     A8 00 A0 FD | 	call	#pushregs_
22d74     34 F0 07 F1 | 	add	ptra, #52
22d78     04 4E 05 F1 | 	add	fp, #4
22d7c     A7 12 62 FC | 	wrlong	arg01, fp
22d80     04 4E 05 F1 | 	add	fp, #4
22d84     A7 14 62 FC | 	wrlong	arg02, fp
22d88     04 4E 85 F1 | 	sub	fp, #4
22d8c     A7 14 02 FB | 	rdlong	arg02, fp
22d90     09 14 46 F0 | 	shr	arg02, #9
22d94     7F 14 06 F5 | 	and	arg02, #127
22d98     50 FA 05 F6 | 	mov	result1, #80
22d9c     0A FB 01 F1 | 	add	result1, arg02
22da0     20 4E 05 F1 | 	add	fp, #32
22da4     A7 FA 61 FC | 	wrlong	result1, fp
22da8     20 4E 85 F1 | 	sub	fp, #32
22dac     A7 FA 01 FB | 	rdlong	result1, fp
22db0     05 FA 45 F0 | 	shr	result1, #5
22db4     FD FA 41 F8 | 	getnib	result1, result1, #0
22db8     01 FA 85 F1 | 	sub	result1, #1
22dbc     1C 4E 05 F1 | 	add	fp, #28
22dc0     A7 FA 61 FC | 	wrlong	result1, fp
22dc4     1C 4E 85 F1 | 	sub	fp, #28
22dc8     A7 FA 01 FB | 	rdlong	result1, fp
22dcc     1F FA 05 F5 | 	and	result1, #31
22dd0     18 4E 05 F1 | 	add	fp, #24
22dd4     A7 FA 61 FC | 	wrlong	result1, fp
22dd8     14 4E 85 F1 | 	sub	fp, #20
22ddc     A7 FA 01 FB | 	rdlong	result1, fp
22de0     0B FA 45 F0 | 	shr	result1, #11
22de4     1F FA 05 F5 | 	and	result1, #31
22de8     10 4E 05 F1 | 	add	fp, #16
22dec     A7 FA 61 FC | 	wrlong	result1, fp
22df0     10 4E 85 F1 | 	sub	fp, #16
22df4     A7 FA 01 FB | 	rdlong	result1, fp
22df8     05 FA 45 F0 | 	shr	result1, #5
22dfc     3F FA 05 F5 | 	and	result1, #63
22e00     0C 4E 05 F1 | 	add	fp, #12
22e04     A7 FA 61 FC | 	wrlong	result1, fp
22e08     0C 4E 85 F1 | 	sub	fp, #12
22e0c     A7 14 02 FB | 	rdlong	arg02, fp
22e10     1F 14 06 F5 | 	and	arg02, #31
22e14     01 14 66 F0 | 	shl	arg02, #1
22e18     08 4E 05 F1 | 	add	fp, #8
22e1c     A7 14 62 FC | 	wrlong	arg02, fp
22e20     A7 12 02 F6 | 	mov	arg01, fp
22e24     10 4E 85 F1 | 	sub	fp, #16
22e28     4C FA BF FD | 	call	#_fatfs_cc_mktime
22e2c     0C 4E 05 F1 | 	add	fp, #12
22e30     A7 FA 61 FC | 	wrlong	result1, fp
22e34                 | ' 
22e34                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
22e34                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
22e34                 | '     date.tm_mday = (dosdate & 0x1f);
22e34                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
22e34                 | '     date.tm_min = (dostime >> 5) & 0x3f;
22e34                 | '     date.tm_sec = (dostime & 0x1f) << 1;
22e34                 | ' 
22e34                 | '     t = mktime(&date);
22e34                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22e34                 | '     return t;
22e34     0C 4E 85 F1 | 	sub	fp, #12
22e38     A7 F0 03 F6 | 	mov	ptra, fp
22e3c     B2 00 A0 FD | 	call	#popregs_
22e40                 | _fatfs_cc_unixtime_0767_ret
22e40     2D 00 64 FD | 	ret
22e44                 | 
22e44                 | _fatfs_cc__set_dos_error_0769
22e44     09 01 02 F6 | 	mov	_var01, arg01
22e48                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22e48                 | '     switch (derr) {
22e48     14 00 26 F3 | 	fle	_var01, #20
22e4c     30 00 62 FD | 	jmprel	_var01
22e50                 | LR__3790
22e50     50 00 90 FD | 	jmp	#LR__3791
22e54     84 00 90 FD | 	jmp	#LR__3805
22e58     80 00 90 FD | 	jmp	#LR__3806
22e5c     7C 00 90 FD | 	jmp	#LR__3807
22e60     48 00 90 FD | 	jmp	#LR__3792
22e64     44 00 90 FD | 	jmp	#LR__3793
22e68     40 00 90 FD | 	jmp	#LR__3794
22e6c     44 00 90 FD | 	jmp	#LR__3795
22e70     48 00 90 FD | 	jmp	#LR__3797
22e74     54 00 90 FD | 	jmp	#LR__3800
22e78     38 00 90 FD | 	jmp	#LR__3796
22e7c     4C 00 90 FD | 	jmp	#LR__3801
22e80     48 00 90 FD | 	jmp	#LR__3802
22e84     44 00 90 FD | 	jmp	#LR__3803
22e88     50 00 90 FD | 	jmp	#LR__3808
22e8c     4C 00 90 FD | 	jmp	#LR__3808
22e90     48 00 90 FD | 	jmp	#LR__3808
22e94     2C 00 90 FD | 	jmp	#LR__3798
22e98     38 00 90 FD | 	jmp	#LR__3804
22e9c     2C 00 90 FD | 	jmp	#LR__3799
22ea0     38 00 90 FD | 	jmp	#LR__3808
22ea4                 | LR__3791
22ea4     00 02 06 F6 | 	mov	_var02, #0
22ea8                 | '         r = 0;
22ea8                 | '         break;
22ea8     34 00 90 FD | 	jmp	#LR__3809
22eac                 | LR__3792
22eac                 | LR__3793
22eac                 | LR__3794
22eac     04 02 06 F6 | 	mov	_var02, #4
22eb0                 | '         r =  4 ;
22eb0                 | '         break;
22eb0     2C 00 90 FD | 	jmp	#LR__3809
22eb4                 | LR__3795
22eb4                 | LR__3796
22eb4     06 02 06 F6 | 	mov	_var02, #6
22eb8                 | '         r =  6 ;
22eb8                 | '         break;
22eb8     24 00 90 FD | 	jmp	#LR__3809
22ebc                 | LR__3797
22ebc     09 02 06 F6 | 	mov	_var02, #9
22ec0                 | '         r =  9 ;
22ec0                 | '         break;
22ec0     1C 00 90 FD | 	jmp	#LR__3809
22ec4                 | LR__3798
22ec4     07 02 06 F6 | 	mov	_var02, #7
22ec8                 | '         r =  7 ;
22ec8                 | '         break;
22ec8     14 00 90 FD | 	jmp	#LR__3809
22ecc                 | LR__3799
22ecc                 | LR__3800
22ecc                 | LR__3801
22ecc                 | LR__3802
22ecc                 | LR__3803
22ecc     0A 02 06 F6 | 	mov	_var02, #10
22ed0                 | '         r =  10 ;
22ed0                 | '         break;
22ed0     0C 00 90 FD | 	jmp	#LR__3809
22ed4                 | LR__3804
22ed4     0B 02 06 F6 | 	mov	_var02, #11
22ed8                 | '         r =  11 ;
22ed8                 | '         break;
22ed8     04 00 90 FD | 	jmp	#LR__3809
22edc                 | LR__3805
22edc                 | LR__3806
22edc                 | LR__3807
22edc                 | LR__3808
22edc     0C 02 06 F6 | 	mov	_var02, #12
22ee0                 | '         r =  12 ;
22ee0                 | '         break;
22ee0                 | LR__3809
22ee0                 | '     }
22ee0                 | '     return _seterror(r);
22ee0     00 02 4E F2 | 	cmps	_var02, #0 wz
22ee4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
22ee8     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22eec     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
22ef0     01 FA 65 56 |  if_ne	neg	result1, #1
22ef4     00 FA 05 A6 |  if_e	mov	result1, #0
22ef8                 | _fatfs_cc__set_dos_error_0769_ret
22ef8     2D 00 64 FD | 	ret
22efc                 | 
22efc                 | _fatfs_cc_v_creat
22efc     04 4A 05 F6 | 	mov	COUNT_, #4
22f00     A8 00 A0 FD | 	call	#pushregs_
22f04     09 1F 02 F6 | 	mov	local01, arg01
22f08     0A 21 02 F6 | 	mov	local02, arg02
22f0c     03 00 00 FF 
22f10     3C 12 06 F6 | 	mov	arg01, ##1596
22f14                 | '     return _gc_alloc(size);
22f14     10 14 06 F6 | 	mov	arg02, #16
22f18     2C 60 BF FD | 	call	#__system___gc_doalloc
22f1c     FD 22 0A F6 | 	mov	local03, result1 wz
22f20                 | '       return _seterror( 7 );
22f20     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22f24     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22f28     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22f2c     01 FA 65 A6 |  if_e	neg	result1, #1
22f30     58 00 90 AD |  if_e	jmp	#LR__3811
22f34     11 13 02 F6 | 	mov	arg01, local03
22f38     00 14 06 F6 | 	mov	arg02, #0
22f3c     03 00 00 FF 
22f40     3C 16 06 F6 | 	mov	arg03, ##1596
22f44     98 00 A0 FD | 	call	#\builtin_bytefill_
22f48     02 00 00 FF 
22f4c     14 22 06 F1 | 	add	local03, ##1044
22f50     11 13 02 F6 | 	mov	arg01, local03
22f54     02 00 00 FF 
22f58     14 22 86 F1 | 	sub	local03, ##1044
22f5c     10 15 02 F6 | 	mov	arg02, local02
22f60     07 16 06 F6 | 	mov	arg03, #7
22f64     B4 CC BF FD | 	call	#_fatfs_cc_f_open
22f68     FD 24 0A F6 | 	mov	local04, result1 wz
22f6c     14 00 90 AD |  if_e	jmp	#LR__3810
22f70     11 13 02 F6 | 	mov	arg01, local03
22f74                 | '     return _gc_free(ptr);
22f74     DC 60 BF FD | 	call	#__system___gc_free
22f78                 | '     free(f);
22f78                 | '     return _set_dos_error(r);
22f78     12 13 02 F6 | 	mov	arg01, local04
22f7c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0769
22f80     08 00 90 FD | 	jmp	#LR__3811
22f84                 | LR__3810
22f84     0F 23 62 FC | 	wrlong	local03, local01
22f88                 | '   }
22f88                 | '   fil->vfsdata = f;
22f88                 | '   return 0;
22f88     00 FA 05 F6 | 	mov	result1, #0
22f8c                 | LR__3811
22f8c     A7 F0 03 F6 | 	mov	ptra, fp
22f90     B2 00 A0 FD | 	call	#popregs_
22f94                 | _fatfs_cc_v_creat_ret
22f94     2D 00 64 FD | 	ret
22f98                 | 
22f98                 | _fatfs_cc_v_close
22f98     02 4A 05 F6 | 	mov	COUNT_, #2
22f9c     A8 00 A0 FD | 	call	#pushregs_
22fa0     09 1F 02 FB | 	rdlong	local01, arg01
22fa4     02 00 00 FF 
22fa8     14 1E 06 F1 | 	add	local01, ##1044
22fac     0F 13 02 F6 | 	mov	arg01, local01
22fb0     02 00 00 FF 
22fb4     14 1E 86 F1 | 	sub	local01, ##1044
22fb8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
22fbc     FD 20 02 F6 | 	mov	local02, result1
22fc0     0F 13 02 F6 | 	mov	arg01, local01
22fc4                 | '     return _gc_free(ptr);
22fc4     8C 60 BF FD | 	call	#__system___gc_free
22fc8                 | '     FAT_FIL *f = fil->vfsdata;
22fc8                 | '     r=f_close(&f->fil);
22fc8                 | '     free(f);
22fc8                 | '     return _set_dos_error(r);
22fc8     10 13 02 F6 | 	mov	arg01, local02
22fcc     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0769
22fd0     A7 F0 03 F6 | 	mov	ptra, fp
22fd4     B2 00 A0 FD | 	call	#popregs_
22fd8                 | _fatfs_cc_v_close_ret
22fd8     2D 00 64 FD | 	ret
22fdc                 | 
22fdc                 | _fatfs_cc_v_opendir
22fdc     04 4A 05 F6 | 	mov	COUNT_, #4
22fe0     A8 00 A0 FD | 	call	#pushregs_
22fe4     09 1F 02 F6 | 	mov	local01, arg01
22fe8     0A 21 02 F6 | 	mov	local02, arg02
22fec     30 12 06 F6 | 	mov	arg01, #48
22ff0                 | '     return _gc_alloc(size);
22ff0     10 14 06 F6 | 	mov	arg02, #16
22ff4     50 5F BF FD | 	call	#__system___gc_doalloc
22ff8     FD 22 0A F6 | 	mov	local03, result1 wz
22ffc                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22ffc                 | '       return _seterror( 7 );
22ffc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23000     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23004     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23008     01 FA 65 A6 |  if_e	neg	result1, #1
2300c     34 00 90 AD |  if_e	jmp	#LR__3821
23010     10 15 02 F6 | 	mov	arg02, local02
23014     11 13 02 F6 | 	mov	arg01, local03
23018     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2301c     FD 24 0A F6 | 	mov	local04, result1 wz
23020     14 00 90 AD |  if_e	jmp	#LR__3820
23024     11 13 02 F6 | 	mov	arg01, local03
23028                 | '     return _gc_free(ptr);
23028     28 60 BF FD | 	call	#__system___gc_free
2302c                 | '         free(f);
2302c                 | '         return _set_dos_error(r);
2302c     12 13 02 F6 | 	mov	arg01, local04
23030     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23034     0C 00 90 FD | 	jmp	#LR__3821
23038                 | LR__3820
23038     04 1E 06 F1 | 	add	local01, #4
2303c     0F 23 62 FC | 	wrlong	local03, local01
23040                 | '     }
23040                 | '     dir->vfsdata = f;
23040                 | '     return 0;
23040     00 FA 05 F6 | 	mov	result1, #0
23044                 | LR__3821
23044     A7 F0 03 F6 | 	mov	ptra, fp
23048     B2 00 A0 FD | 	call	#popregs_
2304c                 | _fatfs_cc_v_opendir_ret
2304c     2D 00 64 FD | 	ret
23050                 | 
23050                 | _fatfs_cc_v_closedir
23050     02 4A 05 F6 | 	mov	COUNT_, #2
23054     A8 00 A0 FD | 	call	#pushregs_
23058     04 12 06 F1 | 	add	arg01, #4
2305c     09 1F 02 FB | 	rdlong	local01, arg01
23060     0F 13 02 F6 | 	mov	arg01, local01
23064     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
23068     FD 20 02 F6 | 	mov	local02, result1
2306c     0F 13 02 F6 | 	mov	arg01, local01
23070                 | '     return _gc_free(ptr);
23070     E0 5F BF FD | 	call	#__system___gc_free
23074     00 20 0E F2 | 	cmp	local02, #0 wz
23078     10 13 02 56 |  if_ne	mov	arg01, local02
2307c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0769
23080                 | '     return r;
23080     10 FB 01 F6 | 	mov	result1, local02
23084     A7 F0 03 F6 | 	mov	ptra, fp
23088     B2 00 A0 FD | 	call	#popregs_
2308c                 | _fatfs_cc_v_closedir_ret
2308c     2D 00 64 FD | 	ret
23090                 | 
23090                 | _fatfs_cc_v_readdir
23090     01 4A 05 F6 | 	mov	COUNT_, #1
23094     A8 00 A0 FD | 	call	#pushregs_
23098     2C F1 07 F1 | 	add	ptra, #300
2309c     04 4E 05 F1 | 	add	fp, #4
230a0     A7 12 62 FC | 	wrlong	arg01, fp
230a4     04 4E 05 F1 | 	add	fp, #4
230a8     A7 14 62 FC | 	wrlong	arg02, fp
230ac     04 4E 85 F1 | 	sub	fp, #4
230b0     A7 16 02 FB | 	rdlong	arg03, fp
230b4     04 16 06 F1 | 	add	arg03, #4
230b8     0B 13 02 FB | 	rdlong	arg01, arg03
230bc     08 4E 05 F1 | 	add	fp, #8
230c0     A7 14 02 F6 | 	mov	arg02, fp
230c4     0C 4E 85 F1 | 	sub	fp, #12
230c8     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
230cc     28 4F 05 F1 | 	add	fp, #296
230d0     A7 FA 61 FC | 	wrlong	result1, fp
230d4     28 4F 85 F1 | 	sub	fp, #296
230d8     00 FA 0D F2 | 	cmp	result1, #0 wz
230dc     14 00 90 AD |  if_e	jmp	#LR__3830
230e0                 | '         return _set_dos_error(r);
230e0     28 4F 05 F1 | 	add	fp, #296
230e4     A7 12 02 FB | 	rdlong	arg01, fp
230e8     28 4F 85 F1 | 	sub	fp, #296
230ec     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0769
230f0     C4 00 90 FD | 	jmp	#LR__3833
230f4                 | LR__3830
230f4     28 4E 05 F1 | 	add	fp, #40
230f8     A7 16 CA FA | 	rdbyte	arg03, fp wz
230fc     28 4E 85 F1 | 	sub	fp, #40
23100                 | '         return -1;
23100     01 FA 65 A6 |  if_e	neg	result1, #1
23104     B0 00 90 AD |  if_e	jmp	#LR__3833
23108     08 4E 05 F1 | 	add	fp, #8
2310c     A7 12 02 FB | 	rdlong	arg01, fp
23110     20 4E 05 F1 | 	add	fp, #32
23114     A7 14 02 F6 | 	mov	arg02, fp
23118     28 4E 85 F1 | 	sub	fp, #40
2311c     3F 16 06 F6 | 	mov	arg03, #63
23120     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
23124     08 4E 05 F1 | 	add	fp, #8
23128     A7 16 02 FB | 	rdlong	arg03, fp
2312c     3F 16 06 F1 | 	add	arg03, #63
23130     0B 01 48 FC | 	wrbyte	#0, arg03
23134     0C 4E 05 F1 | 	add	fp, #12
23138     A7 16 C2 FA | 	rdbyte	arg03, fp
2313c     14 4E 85 F1 | 	sub	fp, #20
23140     10 16 CE F7 | 	test	arg03, #16 wz
23144     18 00 90 AD |  if_e	jmp	#LR__3831
23148     08 4E 05 F1 | 	add	fp, #8
2314c     A7 16 02 FB | 	rdlong	arg03, fp
23150     08 4E 85 F1 | 	sub	fp, #8
23154     50 16 06 F1 | 	add	arg03, #80
23158     0B 03 48 FC | 	wrbyte	#1, arg03
2315c     14 00 90 FD | 	jmp	#LR__3832
23160                 | LR__3831
23160     08 4E 05 F1 | 	add	fp, #8
23164     A7 16 02 FB | 	rdlong	arg03, fp
23168     08 4E 85 F1 | 	sub	fp, #8
2316c     50 16 06 F1 | 	add	arg03, #80
23170     0B 01 48 FC | 	wrbyte	#0, arg03
23174                 | LR__3832
23174     08 4E 05 F1 | 	add	fp, #8
23178     A7 16 02 FB | 	rdlong	arg03, fp
2317c     04 4E 05 F1 | 	add	fp, #4
23180     A7 14 02 FB | 	rdlong	arg02, fp
23184     48 16 06 F1 | 	add	arg03, #72
23188     0B 15 62 FC | 	wrlong	arg02, arg03
2318c     04 4E 85 F1 | 	sub	fp, #4
23190     A7 1E 02 FB | 	rdlong	local01, fp
23194     08 4E 05 F1 | 	add	fp, #8
23198     A7 12 E2 FA | 	rdword	arg01, fp
2319c     02 4E 05 F1 | 	add	fp, #2
231a0     A7 14 E2 FA | 	rdword	arg02, fp
231a4     12 4E 85 F1 | 	sub	fp, #18
231a8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0767
231ac     4C 1E 06 F1 | 	add	local01, #76
231b0     0F FB 61 FC | 	wrlong	result1, local01
231b4                 | '         ent->d_type =  (0) ;
231b4                 | '     }
231b4                 | '     ent->d_size = finfo.fsize;
231b4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
231b4                 | '     return 0;
231b4     00 FA 05 F6 | 	mov	result1, #0
231b8                 | LR__3833
231b8     A7 F0 03 F6 | 	mov	ptra, fp
231bc     B2 00 A0 FD | 	call	#popregs_
231c0                 | _fatfs_cc_v_readdir_ret
231c0     2D 00 64 FD | 	ret
231c4                 | 
231c4                 | _fatfs_cc_v_stat
231c4     03 4A 05 F6 | 	mov	COUNT_, #3
231c8     A8 00 A0 FD | 	call	#pushregs_
231cc     30 F1 07 F1 | 	add	ptra, #304
231d0     04 4E 05 F1 | 	add	fp, #4
231d4     A7 12 62 FC | 	wrlong	arg01, fp
231d8     04 4E 05 F1 | 	add	fp, #4
231dc     A7 14 62 FC | 	wrlong	arg02, fp
231e0     08 4E 85 F1 | 	sub	fp, #8
231e4     0A 13 02 F6 | 	mov	arg01, arg02
231e8     00 14 06 F6 | 	mov	arg02, #0
231ec     30 16 06 F6 | 	mov	arg03, #48
231f0     98 00 A0 FD | 	call	#\builtin_bytefill_
231f4     04 4E 05 F1 | 	add	fp, #4
231f8     A7 FA 01 FB | 	rdlong	result1, fp
231fc     04 4E 85 F1 | 	sub	fp, #4
23200     FD FA C9 FA | 	rdbyte	result1, result1 wz
23204     2C 00 90 AD |  if_e	jmp	#LR__3840
23208     04 4E 05 F1 | 	add	fp, #4
2320c     A7 FA 01 FB | 	rdlong	result1, fp
23210     04 4E 85 F1 | 	sub	fp, #4
23214     FD FA C1 FA | 	rdbyte	result1, result1
23218     2E FA 0D F2 | 	cmp	result1, #46 wz
2321c     04 4E 05 A1 |  if_e	add	fp, #4
23220     A7 1E 02 AB |  if_e	rdlong	local01, fp
23224     04 4E 85 A1 |  if_e	sub	fp, #4
23228     01 1E 06 A1 |  if_e	add	local01, #1
2322c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
23230     18 00 90 5D |  if_ne	jmp	#LR__3841
23234                 | LR__3840
23234     18 4E 05 F1 | 	add	fp, #24
23238     A7 20 48 FC | 	wrbyte	#16, fp
2323c     0C 4E 85 F1 | 	sub	fp, #12
23240     A7 00 68 FC | 	wrlong	#0, fp
23244     0C 4E 85 F1 | 	sub	fp, #12
23248     24 00 90 FD | 	jmp	#LR__3842
2324c                 | LR__3841
2324c     04 4E 05 F1 | 	add	fp, #4
23250     A7 12 02 FB | 	rdlong	arg01, fp
23254     0C 4E 05 F1 | 	add	fp, #12
23258     A7 14 02 F6 | 	mov	arg02, fp
2325c     10 4E 85 F1 | 	sub	fp, #16
23260     AC EB BF FD | 	call	#_fatfs_cc_f_stat
23264     0C 4E 05 F1 | 	add	fp, #12
23268     A7 FA 61 FC | 	wrlong	result1, fp
2326c     0C 4E 85 F1 | 	sub	fp, #12
23270                 | LR__3842
23270     0C 4E 05 F1 | 	add	fp, #12
23274     A7 20 0A FB | 	rdlong	local02, fp wz
23278     0C 4E 85 F1 | 	sub	fp, #12
2327c     14 00 90 AD |  if_e	jmp	#LR__3843
23280                 | '         return _set_dos_error(r);
23280     0C 4E 05 F1 | 	add	fp, #12
23284     A7 12 02 FB | 	rdlong	arg01, fp
23288     0C 4E 85 F1 | 	sub	fp, #12
2328c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23290     14 01 90 FD | 	jmp	#LR__3844
23294                 | LR__3843
23294     2C 4F 05 F1 | 	add	fp, #300
23298     A7 48 6A FC | 	wrlong	#292, fp
2329c     14 4F 85 F1 | 	sub	fp, #276
232a0     A7 22 C2 FA | 	rdbyte	local03, fp
232a4     18 4E 85 F1 | 	sub	fp, #24
232a8     01 22 CE F7 | 	test	local03, #1 wz
232ac     2C 4F 05 51 |  if_ne	add	fp, #300
232b0     A7 22 02 5B |  if_ne	rdlong	local03, fp
232b4     92 22 46 55 |  if_ne	or	local03, #146
232b8     A7 22 62 5C |  if_ne	wrlong	local03, fp
232bc     2C 4F 85 51 |  if_ne	sub	fp, #300
232c0     18 4E 05 F1 | 	add	fp, #24
232c4     A7 22 C2 FA | 	rdbyte	local03, fp
232c8     18 4E 85 F1 | 	sub	fp, #24
232cc     10 22 CE F7 | 	test	local03, #16 wz
232d0     2C 4F 05 51 |  if_ne	add	fp, #300
232d4     A7 22 02 5B |  if_ne	rdlong	local03, fp
232d8     08 00 00 5F 
232dc     49 22 46 55 |  if_ne	or	local03, ##4169
232e0     A7 22 62 5C |  if_ne	wrlong	local03, fp
232e4     2C 4F 85 51 |  if_ne	sub	fp, #300
232e8     08 4E 05 F1 | 	add	fp, #8
232ec     A7 22 02 FB | 	rdlong	local03, fp
232f0     24 4F 05 F1 | 	add	fp, #292
232f4     A7 20 02 FB | 	rdlong	local02, fp
232f8     08 22 06 F1 | 	add	local03, #8
232fc     11 21 62 FC | 	wrlong	local02, local03
23300     24 4F 85 F1 | 	sub	fp, #292
23304     A7 22 02 FB | 	rdlong	local03, fp
23308     0C 22 06 F1 | 	add	local03, #12
2330c     11 03 68 FC | 	wrlong	#1, local03
23310     A7 22 02 FB | 	rdlong	local03, fp
23314     08 4E 05 F1 | 	add	fp, #8
23318     A7 20 02 FB | 	rdlong	local02, fp
2331c     18 22 06 F1 | 	add	local03, #24
23320     11 21 62 FC | 	wrlong	local02, local03
23324     08 4E 85 F1 | 	sub	fp, #8
23328     A7 22 02 FB | 	rdlong	local03, fp
2332c     1C 22 06 F1 | 	add	local03, #28
23330     01 00 80 FF 
23334     11 01 68 FC | 	wrlong	##512, local03
23338     A7 20 02 FB | 	rdlong	local02, fp
2333c     10 23 02 F6 | 	mov	local03, local02
23340     18 20 06 F1 | 	add	local02, #24
23344     10 21 02 FB | 	rdlong	local02, local02
23348     FF 21 06 F1 | 	add	local02, #511
2334c     10 21 52 F6 | 	abs	local02, local02 wc
23350     09 20 46 F0 | 	shr	local02, #9
23354     10 21 82 F6 | 	negc	local02, local02
23358     20 22 06 F1 | 	add	local03, #32
2335c     11 21 62 FC | 	wrlong	local02, local03
23360     A7 20 02 FB | 	rdlong	local02, fp
23364     10 23 02 F6 | 	mov	local03, local02
23368     10 1F 02 F6 | 	mov	local01, local02
2336c     0C 4E 05 F1 | 	add	fp, #12
23370     A7 12 E2 FA | 	rdword	arg01, fp
23374     02 4E 05 F1 | 	add	fp, #2
23378     A7 14 E2 FA | 	rdword	arg02, fp
2337c     16 4E 85 F1 | 	sub	fp, #22
23380     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0767
23384     2C 1E 06 F1 | 	add	local01, #44
23388     0F FB 61 FC | 	wrlong	result1, local01
2338c     28 20 06 F1 | 	add	local02, #40
23390     10 FB 61 FC | 	wrlong	result1, local02
23394     24 22 06 F1 | 	add	local03, #36
23398     11 FB 61 FC | 	wrlong	result1, local03
2339c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2339c                 | '     }
2339c                 | '     buf->st_mode = mode;
2339c                 | '     buf->st_nlink = 1;
2339c                 | '     buf->st_size = finfo.fsize;
2339c                 | '     buf->st_blksize = 512;
2339c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2339c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2339c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
2339c                 | '     return r;
2339c     0C 4E 05 F1 | 	add	fp, #12
233a0     A7 FA 01 FB | 	rdlong	result1, fp
233a4     0C 4E 85 F1 | 	sub	fp, #12
233a8                 | LR__3844
233a8     A7 F0 03 F6 | 	mov	ptra, fp
233ac     B2 00 A0 FD | 	call	#popregs_
233b0                 | _fatfs_cc_v_stat_ret
233b0     2D 00 64 FD | 	ret
233b4                 | 
233b4                 | _fatfs_cc_v_read
233b4     00 4A 05 F6 | 	mov	COUNT_, #0
233b8     A8 00 A0 FD | 	call	#pushregs_
233bc     1C F0 07 F1 | 	add	ptra, #28
233c0     04 4E 05 F1 | 	add	fp, #4
233c4     A7 12 62 FC | 	wrlong	arg01, fp
233c8     04 4E 05 F1 | 	add	fp, #4
233cc     A7 14 62 FC | 	wrlong	arg02, fp
233d0     04 4E 05 F1 | 	add	fp, #4
233d4     A7 16 62 FC | 	wrlong	arg03, fp
233d8     08 4E 85 F1 | 	sub	fp, #8
233dc     A7 12 02 FB | 	rdlong	arg01, fp
233e0     09 13 0A FB | 	rdlong	arg01, arg01 wz
233e4     0C 4E 05 F1 | 	add	fp, #12
233e8     A7 12 62 FC | 	wrlong	arg01, fp
233ec     10 4E 85 F1 | 	sub	fp, #16
233f0                 | '         return _seterror( 5 );
233f0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
233f4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
233f8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
233fc     01 FA 65 A6 |  if_e	neg	result1, #1
23400     B8 00 90 AD |  if_e	jmp	#LR__3852
23404     10 4E 05 F1 | 	add	fp, #16
23408     A7 12 02 FB | 	rdlong	arg01, fp
2340c     02 00 00 FF 
23410     14 12 06 F1 | 	add	arg01, ##1044
23414     08 4E 85 F1 | 	sub	fp, #8
23418     A7 14 02 FB | 	rdlong	arg02, fp
2341c     04 4E 05 F1 | 	add	fp, #4
23420     A7 16 02 FB | 	rdlong	arg03, fp
23424     0C 4E 05 F1 | 	add	fp, #12
23428     A7 18 02 F6 | 	mov	arg04, fp
2342c     18 4E 85 F1 | 	sub	fp, #24
23430     C4 CE BF FD | 	call	#_fatfs_cc_f_read
23434     14 4E 05 F1 | 	add	fp, #20
23438     A7 FA 61 FC | 	wrlong	result1, fp
2343c     14 4E 85 F1 | 	sub	fp, #20
23440     00 FA 0D F2 | 	cmp	result1, #0 wz
23444     34 00 90 AD |  if_e	jmp	#LR__3850
23448     04 4E 05 F1 | 	add	fp, #4
2344c     A7 18 02 FB | 	rdlong	arg04, fp
23450     0C 17 02 F6 | 	mov	arg03, arg04
23454     08 18 06 F1 | 	add	arg04, #8
23458     0C 19 02 FB | 	rdlong	arg04, arg04
2345c     20 18 46 F5 | 	or	arg04, #32
23460     08 16 06 F1 | 	add	arg03, #8
23464     0B 19 62 FC | 	wrlong	arg04, arg03
23468                 | '         fil->state |=  (0x20) ;
23468                 | '         return _set_dos_error(r);
23468     10 4E 05 F1 | 	add	fp, #16
2346c     A7 12 02 FB | 	rdlong	arg01, fp
23470     14 4E 85 F1 | 	sub	fp, #20
23474     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23478     40 00 90 FD | 	jmp	#LR__3852
2347c                 | LR__3850
2347c     18 4E 05 F1 | 	add	fp, #24
23480     A7 FA 09 FB | 	rdlong	result1, fp wz
23484     18 4E 85 F1 | 	sub	fp, #24
23488     24 00 90 5D |  if_ne	jmp	#LR__3851
2348c     04 4E 05 F1 | 	add	fp, #4
23490     A7 FA 01 FB | 	rdlong	result1, fp
23494     FD 18 02 F6 | 	mov	arg04, result1
23498     04 4E 85 F1 | 	sub	fp, #4
2349c     08 FA 05 F1 | 	add	result1, #8
234a0     FD FA 01 FB | 	rdlong	result1, result1
234a4     10 FA 45 F5 | 	or	result1, #16
234a8     08 18 06 F1 | 	add	arg04, #8
234ac     0C FB 61 FC | 	wrlong	result1, arg04
234b0                 | LR__3851
234b0                 | '         fil->state |=  (0x10) ;
234b0                 | '     }
234b0                 | '     return x;
234b0     18 4E 05 F1 | 	add	fp, #24
234b4     A7 FA 01 FB | 	rdlong	result1, fp
234b8     18 4E 85 F1 | 	sub	fp, #24
234bc                 | LR__3852
234bc     A7 F0 03 F6 | 	mov	ptra, fp
234c0     B2 00 A0 FD | 	call	#popregs_
234c4                 | _fatfs_cc_v_read_ret
234c4     2D 00 64 FD | 	ret
234c8                 | 
234c8                 | _fatfs_cc_v_write
234c8     00 4A 05 F6 | 	mov	COUNT_, #0
234cc     A8 00 A0 FD | 	call	#pushregs_
234d0     1C F0 07 F1 | 	add	ptra, #28
234d4     04 4E 05 F1 | 	add	fp, #4
234d8     A7 12 62 FC | 	wrlong	arg01, fp
234dc     04 4E 05 F1 | 	add	fp, #4
234e0     A7 14 62 FC | 	wrlong	arg02, fp
234e4     04 4E 05 F1 | 	add	fp, #4
234e8     A7 16 62 FC | 	wrlong	arg03, fp
234ec     08 4E 85 F1 | 	sub	fp, #8
234f0     A7 12 02 FB | 	rdlong	arg01, fp
234f4     09 13 0A FB | 	rdlong	arg01, arg01 wz
234f8     0C 4E 05 F1 | 	add	fp, #12
234fc     A7 12 62 FC | 	wrlong	arg01, fp
23500     10 4E 85 F1 | 	sub	fp, #16
23504                 | '         return _seterror( 5 );
23504     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23508     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2350c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23510     01 FA 65 A6 |  if_e	neg	result1, #1
23514     84 00 90 AD |  if_e	jmp	#LR__3861
23518     10 4E 05 F1 | 	add	fp, #16
2351c     A7 12 02 FB | 	rdlong	arg01, fp
23520     02 00 00 FF 
23524     14 12 06 F1 | 	add	arg01, ##1044
23528     08 4E 85 F1 | 	sub	fp, #8
2352c     A7 14 02 FB | 	rdlong	arg02, fp
23530     04 4E 05 F1 | 	add	fp, #4
23534     A7 16 02 FB | 	rdlong	arg03, fp
23538     0C 4E 05 F1 | 	add	fp, #12
2353c     A7 18 02 F6 | 	mov	arg04, fp
23540     18 4E 85 F1 | 	sub	fp, #24
23544     4C D4 BF FD | 	call	#_fatfs_cc_f_write
23548     14 4E 05 F1 | 	add	fp, #20
2354c     A7 FA 61 FC | 	wrlong	result1, fp
23550     14 4E 85 F1 | 	sub	fp, #20
23554     00 FA 0D F2 | 	cmp	result1, #0 wz
23558     34 00 90 AD |  if_e	jmp	#LR__3860
2355c     04 4E 05 F1 | 	add	fp, #4
23560     A7 18 02 FB | 	rdlong	arg04, fp
23564     0C 17 02 F6 | 	mov	arg03, arg04
23568     08 18 06 F1 | 	add	arg04, #8
2356c     0C 19 02 FB | 	rdlong	arg04, arg04
23570     20 18 46 F5 | 	or	arg04, #32
23574     08 16 06 F1 | 	add	arg03, #8
23578     0B 19 62 FC | 	wrlong	arg04, arg03
2357c                 | '         fil->state |=  (0x20) ;
2357c                 | '         return _set_dos_error(r);
2357c     10 4E 05 F1 | 	add	fp, #16
23580     A7 12 02 FB | 	rdlong	arg01, fp
23584     14 4E 85 F1 | 	sub	fp, #20
23588     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
2358c     0C 00 90 FD | 	jmp	#LR__3861
23590                 | LR__3860
23590                 | '     }
23590                 | '     return x;
23590     18 4E 05 F1 | 	add	fp, #24
23594     A7 FA 01 FB | 	rdlong	result1, fp
23598     18 4E 85 F1 | 	sub	fp, #24
2359c                 | LR__3861
2359c     A7 F0 03 F6 | 	mov	ptra, fp
235a0     B2 00 A0 FD | 	call	#popregs_
235a4                 | _fatfs_cc_v_write_ret
235a4     2D 00 64 FD | 	ret
235a8                 | 
235a8                 | _fatfs_cc_v_lseek
235a8     04 4A 05 F6 | 	mov	COUNT_, #4
235ac     A8 00 A0 FD | 	call	#pushregs_
235b0     0A 1F 02 F6 | 	mov	local01, arg02
235b4     0B 21 02 F6 | 	mov	local02, arg03
235b8     09 23 02 FB | 	rdlong	local03, arg01
235bc     02 00 00 FF 
235c0     14 22 0E F1 | 	add	local03, ##1044 wz
235c4                 | '         return _seterror( 5 );
235c4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
235c8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
235cc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
235d0     01 FA 65 A6 |  if_e	neg	result1, #1
235d4     4C 00 90 AD |  if_e	jmp	#LR__3872
235d8     00 20 0E F2 | 	cmp	local02, #0 wz
235dc     24 00 90 AD |  if_e	jmp	#LR__3870
235e0     01 20 0E F2 | 	cmp	local02, #1 wz
235e4     14 22 06 A1 |  if_e	add	local03, #20
235e8     11 25 02 AB |  if_e	rdlong	local04, local03
235ec     14 22 86 A1 |  if_e	sub	local03, #20
235f0     12 1F 02 A1 |  if_e	add	local01, local04
235f4     0C 22 06 51 |  if_ne	add	local03, #12
235f8     11 25 02 5B |  if_ne	rdlong	local04, local03
235fc     0C 22 86 51 |  if_ne	sub	local03, #12
23600     12 1F 02 51 |  if_ne	add	local01, local04
23604                 | LR__3870
23604     0F 15 02 F6 | 	mov	arg02, local01
23608     11 13 02 F6 | 	mov	arg01, local03
2360c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
23610     FD 12 0A F6 | 	mov	arg01, result1 wz
23614     08 00 90 AD |  if_e	jmp	#LR__3871
23618                 | '         return _set_dos_error(result);
23618     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
2361c     04 00 90 FD | 	jmp	#LR__3872
23620                 | LR__3871
23620                 | '     }
23620                 | '     return offset;
23620     0F FB 01 F6 | 	mov	result1, local01
23624                 | LR__3872
23624     A7 F0 03 F6 | 	mov	ptra, fp
23628     B2 00 A0 FD | 	call	#popregs_
2362c                 | _fatfs_cc_v_lseek_ret
2362c     2D 00 64 FD | 	ret
23630                 | 
23630                 | _fatfs_cc_v_ioctl
23630                 | ' {
23630                 | '     return _seterror( 10 );
23630     20 E8 05 F1 | 	add	ptr___system__dat__, #32
23634     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
23638     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
2363c     01 FA 65 F6 | 	neg	result1, #1
23640                 | _fatfs_cc_v_ioctl_ret
23640     2D 00 64 FD | 	ret
23644                 | 
23644                 | _fatfs_cc_v_mkdir
23644     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
23648     FD 12 02 F6 | 	mov	arg01, result1
2364c                 | ' 
2364c                 | '     r = f_mkdir(name);
2364c                 | '     return _set_dos_error(r);
2364c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23650                 | _fatfs_cc_v_mkdir_ret
23650     2D 00 64 FD | 	ret
23654                 | 
23654                 | _fatfs_cc_v_remove
23654     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23658     FD 12 02 F6 | 	mov	arg01, result1
2365c                 | ' 
2365c                 | '     r = f_unlink(name);
2365c                 | '     return _set_dos_error(r);
2365c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23660                 | _fatfs_cc_v_remove_ret
23660     2D 00 64 FD | 	ret
23664                 | 
23664                 | _fatfs_cc_v_rmdir
23664     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23668     FD 12 02 F6 | 	mov	arg01, result1
2366c                 | ' 
2366c                 | '     r = f_unlink(name);
2366c                 | '     return _set_dos_error(r);
2366c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23670                 | _fatfs_cc_v_rmdir_ret
23670     2D 00 64 FD | 	ret
23674                 | 
23674                 | _fatfs_cc_v_rename
23674     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
23678     FD 12 02 F6 | 	mov	arg01, result1
2367c                 | '     return _set_dos_error(r);
2367c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23680                 | _fatfs_cc_v_rename_ret
23680     2D 00 64 FD | 	ret
23684                 | 
23684                 | _fatfs_cc_v_open
23684     07 4A 05 F6 | 	mov	COUNT_, #7
23688     A8 00 A0 FD | 	call	#pushregs_
2368c     09 1F 02 F6 | 	mov	local01, arg01
23690     0A 21 02 F6 | 	mov	local02, arg02
23694     0B 23 02 F6 | 	mov	local03, arg03
23698     03 00 00 FF 
2369c     3C 12 06 F6 | 	mov	arg01, ##1596
236a0                 | '     return _gc_alloc(size);
236a0     10 14 06 F6 | 	mov	arg02, #16
236a4     A0 58 BF FD | 	call	#__system___gc_doalloc
236a8     FD 24 0A F6 | 	mov	local04, result1 wz
236ac                 | '       return _seterror( 7 );
236ac     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
236b0     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
236b4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
236b8     01 FA 65 A6 |  if_e	neg	result1, #1
236bc     98 00 90 AD |  if_e	jmp	#LR__3886
236c0     12 13 02 F6 | 	mov	arg01, local04
236c4     00 14 06 F6 | 	mov	arg02, #0
236c8     03 00 00 FF 
236cc     3C 16 06 F6 | 	mov	arg03, ##1596
236d0     98 00 A0 FD | 	call	#\builtin_bytefill_
236d4                 | '   switch (flags & 3) {
236d4     11 27 02 F6 | 	mov	local05, local03
236d8     03 26 0E F5 | 	and	local05, #3 wz
236dc     0C 00 90 AD |  if_e	jmp	#LR__3880
236e0     01 26 0E F2 | 	cmp	local05, #1 wz
236e4     0C 00 90 AD |  if_e	jmp	#LR__3881
236e8     10 00 90 FD | 	jmp	#LR__3882
236ec                 | LR__3880
236ec     01 28 06 F6 | 	mov	local06, #1
236f0                 | '       fs_flags =  0x01 ;
236f0                 | '       break;
236f0     0C 00 90 FD | 	jmp	#LR__3883
236f4                 | LR__3881
236f4     02 28 06 F6 | 	mov	local06, #2
236f8                 | '       fs_flags =  0x02 ;
236f8                 | '       break;
236f8     04 00 90 FD | 	jmp	#LR__3883
236fc                 | LR__3882
236fc     03 28 06 F6 | 	mov	local06, #3
23700                 | '       fs_flags =  0x01  |  0x02 ;
23700                 | '       break;
23700                 | LR__3883
23700     08 22 CE F7 | 	test	local03, #8 wz
23704     18 28 46 55 |  if_ne	or	local06, #24
23708     08 00 90 5D |  if_ne	jmp	#LR__3884
2370c     20 22 CE F7 | 	test	local03, #32 wz
23710     30 28 46 55 |  if_ne	or	local06, #48
23714                 | LR__3884
23714     02 00 00 FF 
23718     14 24 06 F1 | 	add	local04, ##1044
2371c     12 13 02 F6 | 	mov	arg01, local04
23720     02 00 00 FF 
23724     14 24 86 F1 | 	sub	local04, ##1044
23728     10 15 02 F6 | 	mov	arg02, local02
2372c     14 17 02 F6 | 	mov	arg03, local06
23730     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
23734     FD 2A 0A F6 | 	mov	local07, result1 wz
23738     14 00 90 AD |  if_e	jmp	#LR__3885
2373c     12 13 02 F6 | 	mov	arg01, local04
23740                 | '     return _gc_free(ptr);
23740     10 59 BF FD | 	call	#__system___gc_free
23744                 | '     free(f);
23744                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23744                 | '     return _set_dos_error(r);
23744     15 13 02 F6 | 	mov	arg01, local07
23748     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
2374c     08 00 90 FD | 	jmp	#LR__3886
23750                 | LR__3885
23750     0F 25 62 FC | 	wrlong	local04, local01
23754                 | '   }
23754                 | '   fil->vfsdata = f;
23754                 | '   return 0;
23754     00 FA 05 F6 | 	mov	result1, #0
23758                 | LR__3886
23758     A7 F0 03 F6 | 	mov	ptra, fp
2375c     B2 00 A0 FD | 	call	#popregs_
23760                 | _fatfs_cc_v_open_ret
23760     2D 00 64 FD | 	ret
23764                 | 
23764                 | _fatfs_cc_v_flush
23764     09 13 02 FB | 	rdlong	arg01, arg01
23768     02 00 00 FF 
2376c     14 12 0E F1 | 	add	arg01, ##1044 wz
23770                 | '         return _seterror( 5 );
23770     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23774     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23778     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2377c     01 FA 65 A6 |  if_e	neg	result1, #1
23780     0C 00 90 AD |  if_e	jmp	#LR__3890
23784     00 DA BF FD | 	call	#_fatfs_cc_f_sync
23788     FD 12 02 F6 | 	mov	arg01, result1
2378c                 | '     }
2378c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
2378c                 | '     result = f_sync(f);
2378c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
2378c                 | '     return _set_dos_error(result);
2378c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0769
23790                 | LR__3890
23790                 | _fatfs_cc_v_flush_ret
23790     2D 00 64 FD | 	ret
23794                 | 
23794                 | _fatfs_cc_v_init
23794                 | ' {
23794                 | '     return 0;
23794     00 FA 05 F6 | 	mov	result1, #0
23798                 | _fatfs_cc_v_init_ret
23798     2D 00 64 FD | 	ret
2379c                 | 
2379c                 | _fatfs_cc_v_deinit
2379c     23 01 00 FF 
237a0     0C 15 06 F6 | 	mov	arg02, ##@LR__4086
237a4     00 12 06 F6 | 	mov	arg01, #0
237a8     00 16 06 F6 | 	mov	arg03, #0
237ac     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
237b0     01 00 00 FF 
237b4     08 E4 05 F1 | 	add	objptr, ##520
237b8     F2 12 02 FB | 	rdlong	arg01, objptr
237bc     04 E4 05 F1 | 	add	objptr, #4
237c0     F2 14 02 FB | 	rdlong	arg02, objptr
237c4     01 00 00 FF 
237c8     0C E4 85 F1 | 	sub	objptr, ##524
237cc     A0 43 BF FD | 	call	#__system___freepins
237d0                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
237d0                 | '     _freepins(f_pinmask);
237d0                 | '     return 0;
237d0     00 FA 05 F6 | 	mov	result1, #0
237d4                 | _fatfs_cc_v_deinit_ret
237d4     2D 00 64 FD | 	ret
237d8                 | 
237d8                 | _fatfs_cc_get_vfs
237d8     01 4A 05 F6 | 	mov	COUNT_, #1
237dc     A8 00 A0 FD | 	call	#pushregs_
237e0     09 1F 02 F6 | 	mov	local01, arg01
237e4     50 12 06 F6 | 	mov	arg01, #80
237e8     2C 57 BF FD | 	call	#__system___gc_alloc_managed
237ec     FD 12 02 F6 | 	mov	arg01, result1
237f0     F2 FA 01 F6 | 	mov	result1, objptr
237f4     00 C0 02 FF 
237f8     00 FA 45 F5 | 	or	result1, ##92274688
237fc     09 FB 61 FC | 	wrlong	result1, arg01
23800     F2 FA 01 F6 | 	mov	result1, objptr
23804     00 C8 02 FF 
23808     00 FA 45 F5 | 	or	result1, ##93323264
2380c     04 12 06 F1 | 	add	arg01, #4
23810     09 FB 61 FC | 	wrlong	result1, arg01
23814     F2 FA 01 F6 | 	mov	result1, objptr
23818     00 D0 02 FF 
2381c     00 FA 45 F5 | 	or	result1, ##94371840
23820     04 12 06 F1 | 	add	arg01, #4
23824     09 FB 61 FC | 	wrlong	result1, arg01
23828     F2 FA 01 F6 | 	mov	result1, objptr
2382c     00 D8 02 FF 
23830     00 FA 45 F5 | 	or	result1, ##95420416
23834     04 12 06 F1 | 	add	arg01, #4
23838     09 FB 61 FC | 	wrlong	result1, arg01
2383c     F2 FA 01 F6 | 	mov	result1, objptr
23840     00 E0 02 FF 
23844     00 FA 45 F5 | 	or	result1, ##96468992
23848     04 12 06 F1 | 	add	arg01, #4
2384c     09 FB 61 FC | 	wrlong	result1, arg01
23850     04 12 06 F1 | 	add	arg01, #4
23854     09 01 68 FC | 	wrlong	#0, arg01
23858     04 12 06 F1 | 	add	arg01, #4
2385c     09 1F 62 FC | 	wrlong	local01, arg01
23860     04 12 06 F1 | 	add	arg01, #4
23864     09 01 68 FC | 	wrlong	#0, arg01
23868     F2 FA 01 F6 | 	mov	result1, objptr
2386c     00 E8 02 FF 
23870     00 FA 45 F5 | 	or	result1, ##97517568
23874     04 12 06 F1 | 	add	arg01, #4
23878     09 FB 61 FC | 	wrlong	result1, arg01
2387c     F2 FA 01 F6 | 	mov	result1, objptr
23880     00 F0 02 FF 
23884     00 FA 45 F5 | 	or	result1, ##98566144
23888     04 12 06 F1 | 	add	arg01, #4
2388c     09 FB 61 FC | 	wrlong	result1, arg01
23890     F2 FA 01 F6 | 	mov	result1, objptr
23894     00 F8 02 FF 
23898     00 FA 45 F5 | 	or	result1, ##99614720
2389c     04 12 06 F1 | 	add	arg01, #4
238a0     09 FB 61 FC | 	wrlong	result1, arg01
238a4     F2 FA 01 F6 | 	mov	result1, objptr
238a8     39 FA 25 F4 | 	bith	result1, #57
238ac     04 12 06 F1 | 	add	arg01, #4
238b0     09 FB 61 FC | 	wrlong	result1, arg01
238b4     F2 FA 01 F6 | 	mov	result1, objptr
238b8     00 08 03 FF 
238bc     00 FA 45 F5 | 	or	result1, ##101711872
238c0     04 12 06 F1 | 	add	arg01, #4
238c4     09 FB 61 FC | 	wrlong	result1, arg01
238c8     F2 FA 01 F6 | 	mov	result1, objptr
238cc     00 10 03 FF 
238d0     00 FA 45 F5 | 	or	result1, ##102760448
238d4     04 12 06 F1 | 	add	arg01, #4
238d8     09 FB 61 FC | 	wrlong	result1, arg01
238dc     F2 FA 01 F6 | 	mov	result1, objptr
238e0     00 18 03 FF 
238e4     00 FA 45 F5 | 	or	result1, ##103809024
238e8     04 12 06 F1 | 	add	arg01, #4
238ec     09 FB 61 FC | 	wrlong	result1, arg01
238f0     F2 FA 01 F6 | 	mov	result1, objptr
238f4     00 20 03 FF 
238f8     00 FA 45 F5 | 	or	result1, ##104857600
238fc     04 12 06 F1 | 	add	arg01, #4
23900     09 FB 61 FC | 	wrlong	result1, arg01
23904     F2 FA 01 F6 | 	mov	result1, objptr
23908     00 28 03 FF 
2390c     00 FA 45 F5 | 	or	result1, ##105906176
23910     04 12 06 F1 | 	add	arg01, #4
23914     09 FB 61 FC | 	wrlong	result1, arg01
23918     F2 FA 01 F6 | 	mov	result1, objptr
2391c     00 30 03 FF 
23920     00 FA 45 F5 | 	or	result1, ##106954752
23924     04 12 06 F1 | 	add	arg01, #4
23928     09 FB 61 FC | 	wrlong	result1, arg01
2392c     F2 FA 01 F6 | 	mov	result1, objptr
23930     00 38 03 FF 
23934     00 FA 45 F5 | 	or	result1, ##108003328
23938     04 12 06 F1 | 	add	arg01, #4
2393c     09 FB 61 FC | 	wrlong	result1, arg01
23940     F2 FA 01 F6 | 	mov	result1, objptr
23944     00 40 03 FF 
23948     00 FA 45 F5 | 	or	result1, ##109051904
2394c     04 12 06 F1 | 	add	arg01, #4
23950     09 FB 61 FC | 	wrlong	result1, arg01
23954     4C 12 86 F1 | 	sub	arg01, #76
23958                 | ' 
23958                 | '     v->close = &v_close;
23958                 | '     v->read = &v_read;
23958                 | '     v->write = &v_write;
23958                 | '     v->lseek = &v_lseek;
23958                 | '     v->ioctl = &v_ioctl;
23958                 | '     v->flush = 0;
23958                 | '     v->vfs_data = ptr;
23958                 | '     v->reserved = 0;
23958                 | ' 
23958                 | '     v->open = &v_open;
23958                 | '     v->creat = &v_creat;
23958                 | '     v->opendir = &v_opendir;
23958                 | '     v->closedir = &v_closedir;
23958                 | '     v->readdir = &v_readdir;
23958                 | '     v->stat = &v_stat;
23958                 | ' 
23958                 | '     v->mkdir = &v_mkdir;
23958                 | '     v->rmdir = &v_rmdir;
23958                 | ' 
23958                 | '     v->remove = &v_remove;
23958                 | '     v->rename = &v_rename;
23958                 | ' 
23958                 | '     v->init = &v_init;
23958                 | '     v->deinit = &v_deinit;
23958                 | ' 
23958                 | '     return v;
23958     09 FB 01 F6 | 	mov	result1, arg01
2395c     A7 F0 03 F6 | 	mov	ptra, fp
23960     B2 00 A0 FD | 	call	#popregs_
23964                 | _fatfs_cc_get_vfs_ret
23964     2D 00 64 FD | 	ret
23968                 | 
23968                 | _fatfs_cc_xmit_mmc_0916
23968     01 00 00 FF 
2396c     10 E4 05 F1 | 	add	objptr, ##528
23970     F2 00 02 FB | 	rdlong	_var01, objptr
23974     08 E4 05 F1 | 	add	objptr, #8
23978     F2 02 02 FB | 	rdlong	_var02, objptr
2397c     01 00 00 FF 
23980     18 E4 85 F1 | 	sub	objptr, ##536
23984     40 02 62 FD | 	dirl	_var02
23988     28 02 64 FD | 	setq	#1
2398c     09 05 02 FB | 	rdlong	_var03, arg01
23990     69 04 62 FD | 	rev	_var03
23994     1B 04 FE F9 | 	movbyts	_var03, #27
23998     01 05 22 FC | 	wypin	_var03, _var02
2399c     0A 05 02 F6 | 	mov	_var03, arg02
239a0     02 14 4E F0 | 	shr	arg02, #2 wz
239a4     03 04 66 F0 | 	shl	_var03, #3
239a8     00 05 22 FC | 	wypin	_var03, _var01
239ac     41 02 62 FD | 	dirh	_var02
239b0     08 12 06 F1 | 	add	arg01, #8
239b4     69 06 62 FD | 	rev	_var04
239b8     1B 06 FE F9 | 	movbyts	_var04, #27
239bc                 | LR__3900
239bc     01 07 22 5C |  if_ne	wypin	_var04, _var02
239c0     09 07 02 5B |  if_ne	rdlong	_var04, arg01
239c4     04 12 06 51 |  if_ne	add	arg01, #4
239c8     69 06 62 5D |  if_ne	rev	_var04
239cc     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
239d0                 | LR__3901
239d0     40 02 72 5D |  if_ne	testp	_var02 wc
239d4     F8 FF 9F 1D |  if_a	jmp	#LR__3901
239d8     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3900
239dc                 | LR__3902
239dc     40 00 72 FD | 	testp	_var01 wc
239e0     F8 FF 9F 3D |  if_ae	jmp	#LR__3902
239e4     40 02 62 FD | 	dirl	_var02
239e8     FF FF FF FF 
239ec     01 FF 2B FC | 	wypin	##-1, _var02
239f0     41 02 62 FD | 	dirh	_var02
239f4                 | _fatfs_cc_xmit_mmc_0916_ret
239f4     2D 00 64 FD | 	ret
239f8                 | 
239f8                 | _fatfs_cc_rcvr_mmc_0923
239f8     01 00 00 FF 
239fc     10 E4 05 F1 | 	add	objptr, ##528
23a00     F2 00 02 FB | 	rdlong	_var01, objptr
23a04     0C E4 05 F1 | 	add	objptr, #12
23a08     F2 02 02 FB | 	rdlong	_var02, objptr
23a0c     01 00 00 FF 
23a10     1C E4 85 F1 | 	sub	objptr, ##540
23a14     01 03 08 FC | 	akpin	_var02
23a18     0A 05 0A F6 | 	mov	_var03, arg02 wz
23a1c     02 04 4E F0 | 	shr	_var03, #2 wz
23a20     30 00 90 AD |  if_e	jmp	#LR__3912
23a24     02 07 02 F6 | 	mov	_var04, _var03
23a28     05 06 66 F0 | 	shl	_var04, #5
23a2c     00 07 22 FC | 	wypin	_var04, _var01
23a30     01 7F 18 FC | 	wxpin	#63, _var02
23a34                 | LR__3910
23a34                 | LR__3911
23a34     40 02 72 FD | 	testp	_var02 wc
23a38     F8 FF 9F 3D |  if_ae	jmp	#LR__3911
23a3c     01 07 8A FA | 	rdpin	_var04, _var02
23a40     69 06 62 FD | 	rev	_var04
23a44     1B 06 FE F9 | 	movbyts	_var04, #27
23a48     09 07 62 FC | 	wrlong	_var04, arg01
23a4c     04 12 06 F1 | 	add	arg01, #4
23a50     F8 05 6E FB | 	djnz	_var03, #LR__3910
23a54                 | LR__3912
23a54     03 14 0E F5 | 	and	arg02, #3 wz
23a58     24 00 90 AD |  if_e	jmp	#LR__3915
23a5c     01 4F 18 FC | 	wxpin	#39, _var02
23a60                 | LR__3913
23a60     00 11 28 FC | 	wypin	#8, _var01
23a64                 | LR__3914
23a64     40 02 72 FD | 	testp	_var02 wc
23a68     F8 FF 9F 3D |  if_ae	jmp	#LR__3914
23a6c     01 07 8A FA | 	rdpin	_var04, _var02
23a70     69 06 62 FD | 	rev	_var04
23a74     09 07 42 FC | 	wrbyte	_var04, arg01
23a78     01 12 06 F1 | 	add	arg01, #1
23a7c     F8 15 6E FB | 	djnz	arg02, #LR__3913
23a80                 | LR__3915
23a80                 | _fatfs_cc_rcvr_mmc_0923_ret
23a80     2D 00 64 FD | 	ret
23a84                 | 
23a84                 | _fatfs_cc_wait_ready_0927
23a84     01 4A 05 F6 | 	mov	COUNT_, #1
23a88     A8 00 A0 FD | 	call	#pushregs_
23a8c     10 F0 07 F1 | 	add	ptra, #16
23a90     1A FA 61 FD | 	getct	result1
23a94     08 4E 05 F1 | 	add	fp, #8
23a98     A7 FA 61 FC | 	wrlong	result1, fp
23a9c     14 1E 06 FB | 	rdlong	local01, #20
23aa0     01 1E 46 F0 | 	shr	local01, #1
23aa4     04 4E 05 F1 | 	add	fp, #4
23aa8     A7 1E 62 FC | 	wrlong	local01, fp
23aac     0C 4E 85 F1 | 	sub	fp, #12
23ab0                 | ' {
23ab0                 | ' 	BYTE d;
23ab0                 | ' 	UINT tmr, tmout;
23ab0                 | ' 
23ab0                 | ' 	tmr = _cnt();
23ab0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23ab0                 | ' 	for(;;) {
23ab0                 | LR__3920
23ab0     04 4E 05 F1 | 	add	fp, #4
23ab4     A7 12 02 F6 | 	mov	arg01, fp
23ab8     04 4E 85 F1 | 	sub	fp, #4
23abc     01 14 06 F6 | 	mov	arg02, #1
23ac0     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23ac4     04 4E 05 F1 | 	add	fp, #4
23ac8     A7 1E C2 FA | 	rdbyte	local01, fp
23acc     04 4E 85 F1 | 	sub	fp, #4
23ad0     FF 1E 0E F2 | 	cmp	local01, #255 wz
23ad4     01 FA 05 A6 |  if_e	mov	result1, #1
23ad8     28 00 90 AD |  if_e	jmp	#LR__3921
23adc     1A FA 61 FD | 	getct	result1
23ae0     08 4E 05 F1 | 	add	fp, #8
23ae4     A7 1E 02 FB | 	rdlong	local01, fp
23ae8     0F FB 81 F1 | 	sub	result1, local01
23aec     04 4E 05 F1 | 	add	fp, #4
23af0     A7 1E 02 FB | 	rdlong	local01, fp
23af4     0C 4E 85 F1 | 	sub	fp, #12
23af8     0F FB 11 F2 | 	cmp	result1, local01 wc
23afc     00 FA 05 36 |  if_ae	mov	result1, #0
23b00     AC FF 9F CD |  if_b	jmp	#LR__3920
23b04                 | LR__3921
23b04     A7 F0 03 F6 | 	mov	ptra, fp
23b08     B2 00 A0 FD | 	call	#popregs_
23b0c                 | _fatfs_cc_wait_ready_0927_ret
23b0c     2D 00 64 FD | 	ret
23b10                 | 
23b10                 | _fatfs_cc_deselect_0933
23b10     00 4A 05 F6 | 	mov	COUNT_, #0
23b14     A8 00 A0 FD | 	call	#pushregs_
23b18     14 F0 07 F1 | 	add	ptra, #20
23b1c     01 00 00 FF 
23b20     14 E4 05 F1 | 	add	objptr, ##532
23b24     F2 14 02 FB | 	rdlong	arg02, objptr
23b28     04 4E 05 F1 | 	add	fp, #4
23b2c     A7 14 62 FC | 	wrlong	arg02, fp
23b30     04 E4 85 F1 | 	sub	objptr, #4
23b34     F2 14 02 FB | 	rdlong	arg02, objptr
23b38     04 4E 05 F1 | 	add	fp, #4
23b3c     A7 14 62 FC | 	wrlong	arg02, fp
23b40     08 E4 05 F1 | 	add	objptr, #8
23b44     F2 14 02 FB | 	rdlong	arg02, objptr
23b48     04 4E 05 F1 | 	add	fp, #4
23b4c     A7 14 62 FC | 	wrlong	arg02, fp
23b50     04 E4 05 F1 | 	add	objptr, #4
23b54     F2 14 02 FB | 	rdlong	arg02, objptr
23b58     01 00 00 FF 
23b5c     1C E4 85 F1 | 	sub	objptr, ##540
23b60     04 4E 05 F1 | 	add	fp, #4
23b64     A7 14 62 FC | 	wrlong	arg02, fp
23b68     0C 4E 85 F1 | 	sub	fp, #12
23b6c     A7 12 02 FB | 	rdlong	arg01, fp
23b70     04 4E 85 F1 | 	sub	fp, #4
23b74     59 12 62 FD | 	drvh	arg01
23b78     1F 20 64 FD | 	waitx	#16
23b7c     A7 12 02 F6 | 	mov	arg01, fp
23b80     01 14 06 F6 | 	mov	arg02, #1
23b84     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23b88     A7 F0 03 F6 | 	mov	ptra, fp
23b8c     B2 00 A0 FD | 	call	#popregs_
23b90                 | _fatfs_cc_deselect_0933_ret
23b90     2D 00 64 FD | 	ret
23b94                 | 
23b94                 | _fatfs_cc_select_0937
23b94     00 4A 05 F6 | 	mov	COUNT_, #0
23b98     A8 00 A0 FD | 	call	#pushregs_
23b9c     10 F0 07 F1 | 	add	ptra, #16
23ba0     01 00 00 FF 
23ba4     14 E4 05 F1 | 	add	objptr, ##532
23ba8     F2 14 02 FB | 	rdlong	arg02, objptr
23bac     08 4E 05 F1 | 	add	fp, #8
23bb0     A7 14 62 FC | 	wrlong	arg02, fp
23bb4     08 E4 05 F1 | 	add	objptr, #8
23bb8     F2 12 02 FB | 	rdlong	arg01, objptr
23bbc     01 00 00 FF 
23bc0     1C E4 85 F1 | 	sub	objptr, ##540
23bc4     04 4E 05 F1 | 	add	fp, #4
23bc8     A7 12 62 FC | 	wrlong	arg01, fp
23bcc     50 12 62 FD | 	fltl	arg01
23bd0     04 4E 85 F1 | 	sub	fp, #4
23bd4     A7 12 02 FB | 	rdlong	arg01, fp
23bd8     58 12 62 FD | 	drvl	arg01
23bdc     1F 20 64 FD | 	waitx	#16
23be0     04 4E 05 F1 | 	add	fp, #4
23be4     A7 12 02 FB | 	rdlong	arg01, fp
23be8     41 12 62 FD | 	dirh	arg01
23bec     08 4E 85 F1 | 	sub	fp, #8
23bf0     A7 12 02 F6 | 	mov	arg01, fp
23bf4     04 4E 85 F1 | 	sub	fp, #4
23bf8     01 14 06 F6 | 	mov	arg02, #1
23bfc     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23c00     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0927
23c04     00 FA 0D F2 | 	cmp	result1, #0 wz
23c08     01 FA 05 56 |  if_ne	mov	result1, #1
23c0c     08 00 90 5D |  if_ne	jmp	#LR__3930
23c10     FC FE BF FD | 	call	#_fatfs_cc_deselect_0933
23c14                 | ' 
23c14                 | ' 	deselect();
23c14                 | ' 	return 0;
23c14     00 FA 05 F6 | 	mov	result1, #0
23c18                 | LR__3930
23c18     A7 F0 03 F6 | 	mov	ptra, fp
23c1c     B2 00 A0 FD | 	call	#popregs_
23c20                 | _fatfs_cc_select_0937_ret
23c20     2D 00 64 FD | 	ret
23c24                 | 
23c24                 | _fatfs_cc_rcvr_datablock_0941
23c24     01 4A 05 F6 | 	mov	COUNT_, #1
23c28     A8 00 A0 FD | 	call	#pushregs_
23c2c     18 F0 07 F1 | 	add	ptra, #24
23c30     04 4E 05 F1 | 	add	fp, #4
23c34     A7 12 62 FC | 	wrlong	arg01, fp
23c38     04 4E 05 F1 | 	add	fp, #4
23c3c     A7 14 62 FC | 	wrlong	arg02, fp
23c40     1A FA 61 FD | 	getct	result1
23c44     08 4E 05 F1 | 	add	fp, #8
23c48     A7 FA 61 FC | 	wrlong	result1, fp
23c4c     14 1E 06 FB | 	rdlong	local01, #20
23c50     03 1E 46 F0 | 	shr	local01, #3
23c54     04 4E 05 F1 | 	add	fp, #4
23c58     A7 1E 62 FC | 	wrlong	local01, fp
23c5c     14 4E 85 F1 | 	sub	fp, #20
23c60                 | ' 	BYTE *buff,
23c60                 | ' 	UINT btr
23c60                 | ' )
23c60                 | ' {
23c60                 | ' 	BYTE d[2];
23c60                 | ' 	UINT tmr, tmout;
23c60                 | ' 
23c60                 | ' 	tmr = _cnt();
23c60                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
23c60                 | ' 	for(;;) {
23c60                 | LR__3940
23c60     0C 4E 05 F1 | 	add	fp, #12
23c64     A7 12 02 F6 | 	mov	arg01, fp
23c68     0C 4E 85 F1 | 	sub	fp, #12
23c6c     01 14 06 F6 | 	mov	arg02, #1
23c70     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23c74     0C 4E 05 F1 | 	add	fp, #12
23c78     A7 1E C2 FA | 	rdbyte	local01, fp
23c7c     0C 4E 85 F1 | 	sub	fp, #12
23c80     FF 1E 0E F2 | 	cmp	local01, #255 wz
23c84     28 00 90 5D |  if_ne	jmp	#LR__3941
23c88     1A FA 61 FD | 	getct	result1
23c8c     FD 1E 02 F6 | 	mov	local01, result1
23c90     10 4E 05 F1 | 	add	fp, #16
23c94     A7 14 02 FB | 	rdlong	arg02, fp
23c98     0A 1F 82 F1 | 	sub	local01, arg02
23c9c     04 4E 05 F1 | 	add	fp, #4
23ca0     A7 14 02 FB | 	rdlong	arg02, fp
23ca4     14 4E 85 F1 | 	sub	fp, #20
23ca8     0A 1F 12 F2 | 	cmp	local01, arg02 wc
23cac     B0 FF 9F CD |  if_b	jmp	#LR__3940
23cb0                 | LR__3941
23cb0     0C 4E 05 F1 | 	add	fp, #12
23cb4     A7 1E C2 FA | 	rdbyte	local01, fp
23cb8     0C 4E 85 F1 | 	sub	fp, #12
23cbc     FE 1E 0E F2 | 	cmp	local01, #254 wz
23cc0     00 FA 05 56 |  if_ne	mov	result1, #0
23cc4     30 00 90 5D |  if_ne	jmp	#LR__3942
23cc8     04 4E 05 F1 | 	add	fp, #4
23ccc     A7 12 02 FB | 	rdlong	arg01, fp
23cd0     04 4E 05 F1 | 	add	fp, #4
23cd4     A7 14 02 FB | 	rdlong	arg02, fp
23cd8     08 4E 85 F1 | 	sub	fp, #8
23cdc     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23ce0     0C 4E 05 F1 | 	add	fp, #12
23ce4     A7 12 02 F6 | 	mov	arg01, fp
23ce8     0C 4E 85 F1 | 	sub	fp, #12
23cec     02 14 06 F6 | 	mov	arg02, #2
23cf0     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23cf4                 | ' 
23cf4                 | ' 	rcvr_mmc(buff, btr);
23cf4                 | ' 	rcvr_mmc(d, 2);
23cf4                 | ' 
23cf4                 | ' 	return 1;
23cf4     01 FA 05 F6 | 	mov	result1, #1
23cf8                 | LR__3942
23cf8     A7 F0 03 F6 | 	mov	ptra, fp
23cfc     B2 00 A0 FD | 	call	#popregs_
23d00                 | _fatfs_cc_rcvr_datablock_0941_ret
23d00     2D 00 64 FD | 	ret
23d04                 | 
23d04                 | _fatfs_cc_xmit_datablock_0943
23d04     00 4A 05 F6 | 	mov	COUNT_, #0
23d08     A8 00 A0 FD | 	call	#pushregs_
23d0c     10 F0 07 F1 | 	add	ptra, #16
23d10     04 4E 05 F1 | 	add	fp, #4
23d14     A7 12 62 FC | 	wrlong	arg01, fp
23d18     04 4E 05 F1 | 	add	fp, #4
23d1c     A7 14 42 FC | 	wrbyte	arg02, fp
23d20     08 4E 85 F1 | 	sub	fp, #8
23d24     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0927
23d28     00 FA 0D F2 | 	cmp	result1, #0 wz
23d2c     00 FA 05 A6 |  if_e	mov	result1, #0
23d30     90 00 90 AD |  if_e	jmp	#LR__3951
23d34     08 4E 05 F1 | 	add	fp, #8
23d38     A7 14 C2 FA | 	rdbyte	arg02, fp
23d3c     04 4E 05 F1 | 	add	fp, #4
23d40     A7 14 42 FC | 	wrbyte	arg02, fp
23d44     A7 12 02 F6 | 	mov	arg01, fp
23d48     0C 4E 85 F1 | 	sub	fp, #12
23d4c     01 14 06 F6 | 	mov	arg02, #1
23d50     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0916
23d54     08 4E 05 F1 | 	add	fp, #8
23d58     A7 14 C2 FA | 	rdbyte	arg02, fp
23d5c     08 4E 85 F1 | 	sub	fp, #8
23d60     FD 14 0E F2 | 	cmp	arg02, #253 wz
23d64     58 00 90 AD |  if_e	jmp	#LR__3950
23d68     04 4E 05 F1 | 	add	fp, #4
23d6c     A7 12 02 FB | 	rdlong	arg01, fp
23d70     04 4E 85 F1 | 	sub	fp, #4
23d74     09 14 C6 F9 | 	decod	arg02, #9
23d78     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0916
23d7c     0C 4E 05 F1 | 	add	fp, #12
23d80     A7 12 02 F6 | 	mov	arg01, fp
23d84     0C 4E 85 F1 | 	sub	fp, #12
23d88     02 14 06 F6 | 	mov	arg02, #2
23d8c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23d90     0C 4E 05 F1 | 	add	fp, #12
23d94     A7 12 02 F6 | 	mov	arg01, fp
23d98     0C 4E 85 F1 | 	sub	fp, #12
23d9c     01 14 06 F6 | 	mov	arg02, #1
23da0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23da4     0C 4E 05 F1 | 	add	fp, #12
23da8     A7 14 C2 FA | 	rdbyte	arg02, fp
23dac     0C 4E 85 F1 | 	sub	fp, #12
23db0     1F 14 06 F5 | 	and	arg02, #31
23db4     05 14 0E F2 | 	cmp	arg02, #5 wz
23db8                 | ' 			return 0;
23db8     00 FA 05 56 |  if_ne	mov	result1, #0
23dbc     04 00 90 5D |  if_ne	jmp	#LR__3951
23dc0                 | LR__3950
23dc0                 | ' 	}
23dc0                 | ' 
23dc0                 | ' 	return 1;
23dc0     01 FA 05 F6 | 	mov	result1, #1
23dc4                 | LR__3951
23dc4     A7 F0 03 F6 | 	mov	ptra, fp
23dc8     B2 00 A0 FD | 	call	#popregs_
23dcc                 | _fatfs_cc_xmit_datablock_0943_ret
23dcc     2D 00 64 FD | 	ret
23dd0                 | 
23dd0                 | _fatfs_cc_send_cmd_0947
23dd0     01 4A 05 F6 | 	mov	COUNT_, #1
23dd4     A8 00 A0 FD | 	call	#pushregs_
23dd8     1C F0 07 F1 | 	add	ptra, #28
23ddc                 | _fatfs_cc_send_cmd_0947_enter
23ddc     04 4E 05 F1 | 	add	fp, #4
23de0     A7 12 42 FC | 	wrbyte	arg01, fp
23de4     04 4E 05 F1 | 	add	fp, #4
23de8     A7 14 62 FC | 	wrlong	arg02, fp
23dec     04 4E 85 F1 | 	sub	fp, #4
23df0     A7 FA C1 FA | 	rdbyte	result1, fp
23df4     04 4E 85 F1 | 	sub	fp, #4
23df8     80 FA CD F7 | 	test	result1, #128 wz
23dfc     44 00 90 AD |  if_e	jmp	#LR__3960
23e00     04 4E 05 F1 | 	add	fp, #4
23e04     A7 14 C2 FA | 	rdbyte	arg02, fp
23e08     7F 14 06 F5 | 	and	arg02, #127
23e0c     A7 14 42 FC | 	wrbyte	arg02, fp
23e10     04 4E 85 F1 | 	sub	fp, #4
23e14     37 12 06 F6 | 	mov	arg01, #55
23e18     00 14 06 F6 | 	mov	arg02, #0
23e1c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0947
23e20     0C 4E 05 F1 | 	add	fp, #12
23e24     A7 FA 41 FC | 	wrbyte	result1, fp
23e28     A7 14 C2 FA | 	rdbyte	arg02, fp
23e2c     0C 4E 85 F1 | 	sub	fp, #12
23e30     02 14 16 F2 | 	cmp	arg02, #2 wc
23e34     0C 4E 05 31 |  if_ae	add	fp, #12
23e38     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
23e3c     0C 4E 85 31 |  if_ae	sub	fp, #12
23e40     6C 01 90 3D |  if_ae	jmp	#LR__3964
23e44                 | LR__3960
23e44     04 4E 05 F1 | 	add	fp, #4
23e48     A7 14 C2 FA | 	rdbyte	arg02, fp
23e4c     04 4E 85 F1 | 	sub	fp, #4
23e50     0C 14 0E F2 | 	cmp	arg02, #12 wz
23e54     14 00 90 AD |  if_e	jmp	#LR__3961
23e58     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0933
23e5c     34 FD BF FD | 	call	#_fatfs_cc_select_0937
23e60     00 FA 0D F2 | 	cmp	result1, #0 wz
23e64     FF FA 05 A6 |  if_e	mov	result1, #255
23e68     44 01 90 AD |  if_e	jmp	#LR__3964
23e6c                 | LR__3961
23e6c     04 4E 05 F1 | 	add	fp, #4
23e70     A7 14 C2 FA | 	rdbyte	arg02, fp
23e74     40 FA 05 F6 | 	mov	result1, #64
23e78     0A FB 41 F5 | 	or	result1, arg02
23e7c     10 4E 05 F1 | 	add	fp, #16
23e80     A7 FA 41 FC | 	wrbyte	result1, fp
23e84     0C 4E 85 F1 | 	sub	fp, #12
23e88     A7 FA 01 FB | 	rdlong	result1, fp
23e8c     18 FA 45 F0 | 	shr	result1, #24
23e90     0D 4E 05 F1 | 	add	fp, #13
23e94     A7 FA 41 FC | 	wrbyte	result1, fp
23e98     0D 4E 85 F1 | 	sub	fp, #13
23e9c     A7 FA 01 FB | 	rdlong	result1, fp
23ea0     10 FA 45 F0 | 	shr	result1, #16
23ea4     0E 4E 05 F1 | 	add	fp, #14
23ea8     A7 FA 41 FC | 	wrbyte	result1, fp
23eac     0E 4E 85 F1 | 	sub	fp, #14
23eb0     A7 FA 01 FB | 	rdlong	result1, fp
23eb4     08 FA 45 F0 | 	shr	result1, #8
23eb8     0F 4E 05 F1 | 	add	fp, #15
23ebc     A7 FA 41 FC | 	wrbyte	result1, fp
23ec0     0F 4E 85 F1 | 	sub	fp, #15
23ec4     A7 FA 01 FB | 	rdlong	result1, fp
23ec8     10 4E 05 F1 | 	add	fp, #16
23ecc     A7 FA 41 FC | 	wrbyte	result1, fp
23ed0     0C 4E 85 F1 | 	sub	fp, #12
23ed4     A7 02 48 FC | 	wrbyte	#1, fp
23ed8     08 4E 85 F1 | 	sub	fp, #8
23edc     A7 FA C9 FA | 	rdbyte	result1, fp wz
23ee0     04 4E 85 F1 | 	sub	fp, #4
23ee4     0C 4E 05 A1 |  if_e	add	fp, #12
23ee8     A7 2A 49 AC |  if_e	wrbyte	#149, fp
23eec     0C 4E 85 A1 |  if_e	sub	fp, #12
23ef0     04 4E 05 F1 | 	add	fp, #4
23ef4     A7 FA C1 FA | 	rdbyte	result1, fp
23ef8     04 4E 85 F1 | 	sub	fp, #4
23efc     08 FA 0D F2 | 	cmp	result1, #8 wz
23f00     0C 4E 05 A1 |  if_e	add	fp, #12
23f04     A7 0E 49 AC |  if_e	wrbyte	#135, fp
23f08     0C 4E 85 A1 |  if_e	sub	fp, #12
23f0c     0C 4E 05 F1 | 	add	fp, #12
23f10     A7 14 C2 FA | 	rdbyte	arg02, fp
23f14     0D 4E 05 F1 | 	add	fp, #13
23f18     A7 14 42 FC | 	wrbyte	arg02, fp
23f1c     05 4E 85 F1 | 	sub	fp, #5
23f20     A7 12 02 F6 | 	mov	arg01, fp
23f24     14 4E 85 F1 | 	sub	fp, #20
23f28     06 14 06 F6 | 	mov	arg02, #6
23f2c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0916
23f30     04 4E 05 F1 | 	add	fp, #4
23f34     A7 1E C2 FA | 	rdbyte	local01, fp
23f38     04 4E 85 F1 | 	sub	fp, #4
23f3c     0C 1E 0E F2 | 	cmp	local01, #12 wz
23f40     10 4E 05 A1 |  if_e	add	fp, #16
23f44     A7 12 02 A6 |  if_e	mov	arg01, fp
23f48     10 4E 85 A1 |  if_e	sub	fp, #16
23f4c     01 14 06 A6 |  if_e	mov	arg02, #1
23f50     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0923
23f54     0C 4E 05 F1 | 	add	fp, #12
23f58     A7 14 48 FC | 	wrbyte	#10, fp
23f5c     0C 4E 85 F1 | 	sub	fp, #12
23f60                 | ' 	n = 10;
23f60                 | ' 	do
23f60                 | LR__3962
23f60     10 4E 05 F1 | 	add	fp, #16
23f64     A7 12 02 F6 | 	mov	arg01, fp
23f68     10 4E 85 F1 | 	sub	fp, #16
23f6c     01 14 06 F6 | 	mov	arg02, #1
23f70     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0923
23f74     10 4E 05 F1 | 	add	fp, #16
23f78     A7 1E C2 FA | 	rdbyte	local01, fp
23f7c     10 4E 85 F1 | 	sub	fp, #16
23f80     80 1E CE F7 | 	test	local01, #128 wz
23f84     1C 00 90 AD |  if_e	jmp	#LR__3963
23f88     0C 4E 05 F1 | 	add	fp, #12
23f8c     A7 1E C2 FA | 	rdbyte	local01, fp
23f90     01 1E 86 F1 | 	sub	local01, #1
23f94     A7 1E 42 FC | 	wrbyte	local01, fp
23f98     A7 1E CA FA | 	rdbyte	local01, fp wz
23f9c     0C 4E 85 F1 | 	sub	fp, #12
23fa0     BC FF 9F 5D |  if_ne	jmp	#LR__3962
23fa4                 | LR__3963
23fa4                 | ' 
23fa4                 | ' 	return d;
23fa4     10 4E 05 F1 | 	add	fp, #16
23fa8     A7 FA C1 FA | 	rdbyte	result1, fp
23fac     10 4E 85 F1 | 	sub	fp, #16
23fb0                 | LR__3964
23fb0     A7 F0 03 F6 | 	mov	ptra, fp
23fb4     B2 00 A0 FD | 	call	#popregs_
23fb8                 | _fatfs_cc_send_cmd_0947_ret
23fb8     2D 00 64 FD | 	ret
23fbc                 | 
23fbc                 | _fatfs_cc_disk_deinitialize
23fbc     03 4A 05 F6 | 	mov	COUNT_, #3
23fc0     A8 00 A0 FD | 	call	#pushregs_
23fc4     00 12 4E F2 | 	cmps	arg01, #0 wz
23fc8     01 00 00 FF 
23fcc     14 E4 05 F1 | 	add	objptr, ##532
23fd0     F2 12 02 FB | 	rdlong	arg01, objptr
23fd4     04 E4 85 F1 | 	sub	objptr, #4
23fd8     F2 1E 02 FB | 	rdlong	local01, objptr
23fdc     08 E4 05 F1 | 	add	objptr, #8
23fe0     F2 20 02 FB | 	rdlong	local02, objptr
23fe4     04 E4 05 F1 | 	add	objptr, #4
23fe8     F2 22 02 FB | 	rdlong	local03, objptr
23fec     01 00 00 FF 
23ff0     1C E4 85 F1 | 	sub	objptr, ##540
23ff4                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
23ff4                 | '         return RES_NOTRDY;
23ff4     03 FA 05 56 |  if_ne	mov	result1, #3
23ff8     2C 00 90 5D |  if_ne	jmp	#LR__3970
23ffc     50 12 62 FD | 	fltl	arg01
24000     09 01 08 FC | 	wrpin	#0, arg01
24004     50 1E 62 FD | 	fltl	local01
24008     0F 01 08 FC | 	wrpin	#0, local01
2400c     50 20 62 FD | 	fltl	local02
24010     10 01 08 FC | 	wrpin	#0, local02
24014     50 22 62 FD | 	fltl	local03
24018     11 01 08 FC | 	wrpin	#0, local03
2401c     0A 12 06 F6 | 	mov	arg01, #10
24020     80 17 BF FD | 	call	#__system___waitms
24024                 | '     }
24024                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
24024                 | '     _pinclear(PIN_SS);
24024                 | '     _pinclear(PIN_CLK);
24024                 | '     _pinclear(PIN_DI);
24024                 | '     _pinclear(PIN_DO);
24024                 | ' 
24024                 | '     _waitms(10);
24024                 | ' 
24024                 | '     return 0;
24024     00 FA 05 F6 | 	mov	result1, #0
24028                 | LR__3970
24028     A7 F0 03 F6 | 	mov	ptra, fp
2402c     B2 00 A0 FD | 	call	#popregs_
24030                 | _fatfs_cc_disk_deinitialize_ret
24030     2D 00 64 FD | 	ret
24034                 | 
24034                 | _fatfs_cc_gettimeofday
24034     04 4A 05 F6 | 	mov	COUNT_, #4
24038     A8 00 A0 FD | 	call	#pushregs_
2403c     09 1F 02 F6 | 	mov	local01, arg01
24040     3C 13 BF FD | 	call	#__system___getus
24044     FD 12 02 F6 | 	mov	arg01, result1
24048     02 00 00 FF 
2404c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
24050     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24054     09 FB 01 F6 | 	mov	result1, arg01
24058     10 FB 81 F1 | 	sub	result1, local02
2405c     A1 07 00 FF 
24060     40 FA 15 FD | 	qdiv	result1, ##1000000
24064     02 00 00 FF 
24068     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2406c     18 20 62 FD | 	getqx	local02
24070     A1 07 00 FF 
24074     40 FA 15 FD | 	qdiv	result1, ##1000000
24078     00 20 0E F2 | 	cmp	local02, #0 wz
2407c     19 22 62 FD | 	getqy	local03
24080     28 00 90 AD |  if_e	jmp	#LR__3980
24084     02 00 00 FF 
24088     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2408c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24090     10 25 02 F1 | 	add	local04, local02
24094     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
24098     11 13 82 F1 | 	sub	arg01, local03
2409c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
240a0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
240a4     02 00 00 FF 
240a8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
240ac                 | LR__3980
240ac     02 00 00 FF 
240b0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
240b4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
240b8     02 00 00 FF 
240bc     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
240c0     0F 25 62 FC | 	wrlong	local04, local01
240c4     04 1E 06 F1 | 	add	local01, #4
240c8     0F 23 62 FC | 	wrlong	local03, local01
240cc                 | '         lastsec += secs;
240cc                 | '         lastus = now - leftover;
240cc                 | '     }
240cc                 | '     tv->tv_sec = lastsec;
240cc                 | '     tv->tv_usec = leftover;
240cc                 | '     return 0;
240cc     00 FA 05 F6 | 	mov	result1, #0
240d0     A7 F0 03 F6 | 	mov	ptra, fp
240d4     B2 00 A0 FD | 	call	#popregs_
240d8                 | _fatfs_cc_gettimeofday_ret
240d8     2D 00 64 FD | 	ret
240dc                 | 
240dc                 | _fatfs_cc__is_leap_year
240dc     09 FB 51 F6 | 	abs	result1, arg01 wc
240e0     03 FA 05 F5 | 	and	result1, #3
240e4     FD FA 89 F6 | 	negc	result1, result1 wz
240e8     38 00 90 5D |  if_ne	jmp	#LR__3991
240ec     09 FB 51 F6 | 	abs	result1, arg01 wc
240f0     64 FA 15 FD | 	qdiv	result1, #100
240f4     19 FA 61 FD | 	getqy	result1
240f8     FD FA 89 F6 | 	negc	result1, result1 wz
240fc     1C 00 90 5D |  if_ne	jmp	#LR__3990
24100     09 FB 51 F6 | 	abs	result1, arg01 wc
24104     90 FB 15 FD | 	qdiv	result1, #400
24108                 | '       return (0 == y % 400);
24108     00 FA 05 F6 | 	mov	result1, #0
2410c     19 00 62 FD | 	getqy	_var01
24110     00 01 8A F6 | 	negc	_var01, _var01 wz
24114     01 FA 05 A6 |  if_e	mov	result1, #1
24118     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2411c                 | LR__3990
2411c                 | '     return 1;
2411c     01 FA 05 F6 | 	mov	result1, #1
24120     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24124                 | LR__3991
24124                 | '   }
24124                 | '   return 0;
24124     00 FA 05 F6 | 	mov	result1, #0
24128                 | _fatfs_cc__is_leap_year_ret
24128     2D 00 64 FD | 	ret
2412c                 | 
2412c                 | _fatfs_cc___tzoffset
2412c     09 01 0A F6 | 	mov	_var01, arg01 wz
24130     FF FF FF FF 
24134     0A FF 6B FC | 	wrlong	##-1, arg02
24138     01 02 06 F6 | 	mov	_var02, #1
2413c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
24140                 | '                 return 0;
24140     00 FA 05 A6 |  if_e	mov	result1, #0
24144     94 02 90 AD |  if_e	jmp	#LR__4017
24148     0A 01 68 FC | 	wrlong	#0, arg02
2414c     02 00 00 FF 
24150     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24154     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24158                 | ' 
24158                 | '        *hasdst = 0;
24158                 | ' 
24158                 | ' 	n = stdname;
24158                 | '         while (*s && isalpha(*s)) {
24158     02 00 00 FF 
2415c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
24160     97 28 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
24164                 | LR__4000
24164     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24168     48 00 90 AD |  if_e	jmp	#LR__4002
2416c     00 13 C2 FA | 	rdbyte	arg01, _var01
24170                 | ' {
24170                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24170     80 12 36 F3 | 	fle	arg01, #128 wc
24174                 | '     return __ctype[c];
24174     02 00 00 FF 
24178     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2417c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24180     09 FB C1 FA | 	rdbyte	result1, arg01
24184     02 00 00 FF 
24188     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2418c     0C FA CD F7 | 	test	result1, #12 wz
24190     20 00 90 AD |  if_e	jmp	#LR__4002
24194     00 09 02 F6 | 	mov	_var05, _var01
24198     00 0B 02 F6 | 	mov	_var06, _var01
2419c     01 0A 06 F1 | 	add	_var06, #1
241a0     04 0D C2 FA | 	rdbyte	_var07, _var05
241a4     05 01 02 F6 | 	mov	_var01, _var06
241a8     03 0D 42 FC | 	wrbyte	_var07, _var04
241ac     01 06 06 F1 | 	add	_var04, #1
241b0     B0 FF 9F FD | 	jmp	#LR__4000
241b4                 | LR__4001
241b4                 | LR__4002
241b4     03 01 48 FC | 	wrbyte	#0, _var04
241b8     00 0E 06 F6 | 	mov	_var08, #0
241bc     00 05 C2 FA | 	rdbyte	_var03, _var01
241c0     2D 04 0E F2 | 	cmp	_var03, #45 wz
241c4     01 02 66 A6 |  if_e	neg	_var02, #1
241c8     01 00 06 A1 |  if_e	add	_var01, #1
241cc     97 28 48 FB | 	callpa	#(@LR__4004-@LR__4003)>>2,fcache_load_ptr_
241d0                 | '                 sgn = -1;
241d0                 | '                 s++;
241d0                 | '         }
241d0                 | '         while (isdigit(*s)) {
241d0                 | LR__4003
241d0     00 13 C2 FA | 	rdbyte	arg01, _var01
241d4                 | ' {
241d4                 | '   return  (__ctype_get(c) & 0x02 ) ;
241d4     80 12 36 F3 | 	fle	arg01, #128 wc
241d8                 | '     return __ctype[c];
241d8     02 00 00 FF 
241dc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
241e0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
241e4     09 FB C1 FA | 	rdbyte	result1, arg01
241e8     02 00 00 FF 
241ec     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
241f0     02 FA CD F7 | 	test	result1, #2 wz
241f4     28 00 90 AD |  if_e	jmp	#LR__4005
241f8     07 05 02 F6 | 	mov	_var03, _var08
241fc     02 04 66 F0 | 	shl	_var03, #2
24200     07 05 02 F1 | 	add	_var03, _var08
24204     01 04 66 F0 | 	shl	_var03, #1
24208     00 09 C2 FA | 	rdbyte	_var05, _var01
2420c     30 08 86 F1 | 	sub	_var05, #48
24210     04 05 02 F1 | 	add	_var03, _var05
24214     02 0F 02 F6 | 	mov	_var08, _var03
24218     01 00 06 F1 | 	add	_var01, #1
2421c     B0 FF 9F FD | 	jmp	#LR__4003
24220                 | LR__4004
24220                 | LR__4005
24220     07 00 00 FF 
24224     10 0E 06 FD | 	qmul	_var08, ##3600
24228     00 05 C2 FA | 	rdbyte	_var03, _var01
2422c     3A 04 0E F2 | 	cmp	_var03, #58 wz
24230     18 10 62 FD | 	getqx	_var09
24234     70 00 90 5D |  if_ne	jmp	#LR__4009
24238     00 0E 06 F6 | 	mov	_var08, #0
2423c     01 00 06 F1 | 	add	_var01, #1
24240     97 28 48 FB | 	callpa	#(@LR__4007-@LR__4006)>>2,fcache_load_ptr_
24244                 | '                 x = 0;
24244                 | '                 s++;
24244                 | '                 while (isdigit(*s)) {
24244                 | LR__4006
24244     00 13 C2 FA | 	rdbyte	arg01, _var01
24248                 | ' {
24248                 | '   return  (__ctype_get(c) & 0x02 ) ;
24248     80 12 36 F3 | 	fle	arg01, #128 wc
2424c                 | '     return __ctype[c];
2424c     02 00 00 FF 
24250     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24254     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24258     09 FB C1 FA | 	rdbyte	result1, arg01
2425c     02 00 00 FF 
24260     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24264     02 FA CD F7 | 	test	result1, #2 wz
24268     28 00 90 AD |  if_e	jmp	#LR__4008
2426c     07 05 02 F6 | 	mov	_var03, _var08
24270     02 04 66 F0 | 	shl	_var03, #2
24274     07 05 02 F1 | 	add	_var03, _var08
24278     01 04 66 F0 | 	shl	_var03, #1
2427c     00 09 C2 FA | 	rdbyte	_var05, _var01
24280     30 08 86 F1 | 	sub	_var05, #48
24284     04 05 02 F1 | 	add	_var03, _var05
24288     02 0F 02 F6 | 	mov	_var08, _var03
2428c     01 00 06 F1 | 	add	_var01, #1
24290     B0 FF 9F FD | 	jmp	#LR__4006
24294                 | LR__4007
24294                 | LR__4008
24294     07 0D 02 F6 | 	mov	_var07, _var08
24298     04 0C 66 F0 | 	shl	_var07, #4
2429c     07 0D 82 F1 | 	sub	_var07, _var08
242a0     02 0C 66 F0 | 	shl	_var07, #2
242a4     06 11 02 F1 | 	add	_var09, _var07
242a8                 | LR__4009
242a8     02 00 00 FF 
242ac     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
242b0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
242b4     00 13 C2 FA | 	rdbyte	arg01, _var01
242b8                 | ' {
242b8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
242b8     80 12 36 F3 | 	fle	arg01, #128 wc
242bc                 | '     return __ctype[c];
242bc     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
242c0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
242c4     09 FB C1 FA | 	rdbyte	result1, arg01
242c8     02 00 00 FF 
242cc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
242d0     0C FA CD F7 | 	test	result1, #12 wz
242d4     50 00 90 AD |  if_e	jmp	#LR__4012
242d8     0A 03 68 FC | 	wrlong	#1, arg02
242dc                 | '                 *hasdst = 1;
242dc                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
242dc                 | LR__4010
242dc     00 05 CA FA | 	rdbyte	_var03, _var01 wz
242e0     44 00 90 AD |  if_e	jmp	#LR__4011
242e4     00 13 C2 FA | 	rdbyte	arg01, _var01
242e8                 | ' {
242e8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
242e8     80 12 36 F3 | 	fle	arg01, #128 wc
242ec                 | '     return __ctype[c];
242ec     02 00 00 FF 
242f0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
242f4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
242f8     09 FB C1 FA | 	rdbyte	result1, arg01
242fc     02 00 00 FF 
24300     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24304     0C FA CD F7 | 	test	result1, #12 wz
24308     1C 00 90 AD |  if_e	jmp	#LR__4011
2430c     00 0B 02 F6 | 	mov	_var06, _var01
24310     01 0A 06 F1 | 	add	_var06, #1
24314     00 0D C2 FA | 	rdbyte	_var07, _var01
24318     05 01 02 F6 | 	mov	_var01, _var06
2431c     03 0D 42 FC | 	wrbyte	_var07, _var04
24320     01 06 06 F1 | 	add	_var04, #1
24324     B4 FF 9F FD | 	jmp	#LR__4010
24328                 | LR__4011
24328                 | LR__4012
24328     03 01 48 FC | 	wrbyte	#0, _var04
2432c     02 00 00 FF 
24330     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24334     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24338     02 00 00 FF 
2433c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
24340     20 00 90 AD |  if_e	jmp	#LR__4013
24344     02 00 00 FF 
24348     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2434c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24350     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
24354     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24358     02 00 00 FF 
2435c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24360     1C 00 90 FD | 	jmp	#LR__4014
24364                 | LR__4013
24364     02 00 00 FF 
24368     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2436c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24370     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
24374     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24378     02 00 00 FF 
2437c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24380                 | LR__4014
24380     02 00 00 FF 
24384     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24388     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2438c     02 00 00 FF 
24390     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
24394     20 00 90 AD |  if_e	jmp	#LR__4015
24398     02 00 00 FF 
2439c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
243a0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
243a4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
243a8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
243ac     02 00 00 FF 
243b0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
243b4     1C 00 90 FD | 	jmp	#LR__4016
243b8                 | LR__4015
243b8     02 00 00 FF 
243bc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
243c0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
243c4     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
243c8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
243cc     02 00 00 FF 
243d0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
243d4                 | LR__4016
243d4     08 03 02 FD | 	qmul	_var02, _var09
243d8                 | ' 		_tzname[1] = stdname;
243d8                 | ' 
243d8                 | '         return sgn * off;
243d8     18 FA 61 FD | 	getqx	result1
243dc                 | LR__4017
243dc                 | _fatfs_cc___tzoffset_ret
243dc     2D 00 64 FD | 	ret
243e0                 | 
243e0                 | _fatfs_cc___indst
243e0     10 12 06 F1 | 	add	arg01, #16
243e4     09 01 02 FB | 	rdlong	_var01, arg01
243e8     10 12 86 F1 | 	sub	arg01, #16
243ec     02 00 0E F2 | 	cmp	_var01, #2 wz
243f0     30 00 90 5D |  if_ne	jmp	#LR__4020
243f4     07 00 06 F6 | 	mov	_var01, #7
243f8     18 12 06 F1 | 	add	arg01, #24
243fc     09 03 02 FB | 	rdlong	_var02, arg01
24400     01 01 02 F1 | 	add	_var01, _var02
24404     0C 12 86 F1 | 	sub	arg01, #12
24408     09 05 02 FB | 	rdlong	_var03, arg01
2440c     02 01 82 F1 | 	sub	_var01, _var03
24410     00 00 56 F2 | 	cmps	_var01, #0 wc
24414                 | '                         return 1;
24414     01 FA 05 C6 |  if_b	mov	result1, #1
24418     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2441c                 | '                 return 0;
2441c     00 FA 05 F6 | 	mov	result1, #0
24420     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
24424                 | LR__4020
24424     10 12 06 F1 | 	add	arg01, #16
24428     09 01 02 FB | 	rdlong	_var01, arg01
2442c     10 12 86 F1 | 	sub	arg01, #16
24430     0A 00 0E F2 | 	cmp	_var01, #10 wz
24434     28 00 90 5D |  if_ne	jmp	#LR__4021
24438     18 12 06 F1 | 	add	arg01, #24
2443c     09 01 02 FB | 	rdlong	_var01, arg01
24440     0C 12 86 F1 | 	sub	arg01, #12
24444     09 07 02 FB | 	rdlong	_var04, arg01
24448     03 01 82 F1 | 	sub	_var01, _var04
2444c     00 00 56 F2 | 	cmps	_var01, #0 wc
24450                 | '                         return 0;
24450     00 FA 05 C6 |  if_b	mov	result1, #0
24454     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
24458                 | '                 return 1;
24458     01 FA 05 F6 | 	mov	result1, #1
2445c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
24460                 | LR__4021
24460                 | '         }
24460                 | ' 
24460                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
24460     00 00 06 F6 | 	mov	_var01, #0
24464     10 12 06 F1 | 	add	arg01, #16
24468     09 03 02 FB | 	rdlong	_var02, arg01
2446c     10 12 86 F1 | 	sub	arg01, #16
24470     03 02 56 F2 | 	cmps	_var02, #3 wc
24474     10 00 90 CD |  if_b	jmp	#LR__4022
24478     10 12 06 F1 | 	add	arg01, #16
2447c     09 05 02 FB | 	rdlong	_var03, arg01
24480     0A 04 56 F2 | 	cmps	_var03, #10 wc
24484     01 00 06 C6 |  if_b	mov	_var01, #1
24488                 | LR__4022
24488     00 FB 01 F6 | 	mov	result1, _var01
2448c                 | _fatfs_cc___indst_ret
2448c     2D 00 64 FD | 	ret
24490                 | 
24490                 | ' 	
24490                 | ' 	FUNCTION pfunc(c as integer) as integer
24490                 | ___strs_cl_pfunc
24490                 | ' 		if (i < 16) then
24490     04 E4 05 F1 | 	add	objptr, #4
24494     F2 FA 01 FB | 	rdlong	result1, objptr
24498     04 E4 85 F1 | 	sub	objptr, #4
2449c     10 FA 55 F2 | 	cmps	result1, #16 wc
244a0     2C 00 90 3D |  if_ae	jmp	#LR__4030
244a4     F2 FA 01 FB | 	rdlong	result1, objptr
244a8     04 E4 05 F1 | 	add	objptr, #4
244ac     F2 00 02 FB | 	rdlong	_var01, objptr
244b0     FD 00 02 F1 | 	add	_var01, result1
244b4     00 13 42 FC | 	wrbyte	arg01, _var01
244b8     F2 FA 01 FB | 	rdlong	result1, objptr
244bc     01 FA 05 F1 | 	add	result1, #1
244c0     F2 FA 61 FC | 	wrlong	result1, objptr
244c4     04 E4 85 F1 | 	sub	objptr, #4
244c8                 | ' 			p(i) = c
244c8                 | ' 			i = i+1
244c8                 | ' 			return 1
244c8     01 FA 05 F6 | 	mov	result1, #1
244cc     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
244d0                 | LR__4030
244d0                 | ' 			return -1
244d0     01 FA 65 F6 | 	neg	result1, #1
244d4                 | ___strs_cl_pfunc_ret
244d4     2D 00 64 FD | 	ret
244d8                 | 
244d8                 | __struct__s_vfs_file_t_putchar
244d8     04 4A 05 F6 | 	mov	COUNT_, #4
244dc     A8 00 A0 FD | 	call	#pushregs_
244e0     1C E4 05 F1 | 	add	objptr, #28
244e4     F2 1E 0A FB | 	rdlong	local01, objptr wz
244e8     1C E4 85 F1 | 	sub	objptr, #28
244ec     00 FA 05 A6 |  if_e	mov	result1, #0
244f0     48 00 90 AD |  if_e	jmp	#LR__4040
244f4     1C E4 05 F1 | 	add	objptr, #28
244f8     F2 20 02 FB | 	rdlong	local02, objptr
244fc     10 23 02 F6 | 	mov	local03, local02
24500     1C E4 85 F1 | 	sub	objptr, #28
24504     13 22 46 F7 | 	zerox	local03, #19
24508     14 20 46 F0 | 	shr	local02, #20
2450c     02 20 66 F0 | 	shl	local02, #2
24510     ED 20 02 F1 | 	add	local02, __methods__
24514     10 21 02 FB | 	rdlong	local02, local02
24518     F2 14 02 F6 | 	mov	arg02, objptr
2451c     F2 24 02 F6 | 	mov	local04, objptr
24520     11 E5 01 F6 | 	mov	objptr, local03
24524     2D 20 62 FD | 	call	local02
24528     12 E5 01 F6 | 	mov	objptr, local04
2452c                 | '     return (i < 0) ? 0 : 1;
2452c     00 FA 55 F2 | 	cmps	result1, #0 wc
24530     00 1E 06 C6 |  if_b	mov	local01, #0
24534     01 1E 06 36 |  if_ae	mov	local01, #1
24538     0F FB 01 F6 | 	mov	result1, local01
2453c                 | LR__4040
2453c     A7 F0 03 F6 | 	mov	ptra, fp
24540     B2 00 A0 FD | 	call	#popregs_
24544                 | __struct__s_vfs_file_t_putchar_ret
24544     2D 00 64 FD | 	ret
24548                 | 
24548                 | __struct__s_vfs_file_t_getchar
24548     03 4A 05 F6 | 	mov	COUNT_, #3
2454c     A8 00 A0 FD | 	call	#pushregs_
24550     20 E4 05 F1 | 	add	objptr, #32
24554     F2 12 0A FB | 	rdlong	arg01, objptr wz
24558     20 E4 85 F1 | 	sub	objptr, #32
2455c     01 FA 65 A6 |  if_e	neg	result1, #1
24560     38 00 90 AD |  if_e	jmp	#LR__4050
24564                 | '     return getcf(__this);
24564     20 E4 05 F1 | 	add	objptr, #32
24568     F2 1E 02 FB | 	rdlong	local01, objptr
2456c     0F 21 02 F6 | 	mov	local02, local01
24570     20 E4 85 F1 | 	sub	objptr, #32
24574     13 20 46 F7 | 	zerox	local02, #19
24578     14 1E 46 F0 | 	shr	local01, #20
2457c     02 1E 66 F0 | 	shl	local01, #2
24580     ED 1E 02 F1 | 	add	local01, __methods__
24584     0F 1F 02 FB | 	rdlong	local01, local01
24588     F2 12 02 F6 | 	mov	arg01, objptr
2458c     F2 22 02 F6 | 	mov	local03, objptr
24590     10 E5 01 F6 | 	mov	objptr, local02
24594     2D 1E 62 FD | 	call	local01
24598     11 E5 01 F6 | 	mov	objptr, local03
2459c                 | LR__4050
2459c     A7 F0 03 F6 | 	mov	ptra, fp
245a0     B2 00 A0 FD | 	call	#popregs_
245a4                 | __struct__s_vfs_file_t_getchar_ret
245a4     2D 00 64 FD | 	ret
245a8                 | 
245a8                 | __struct___bas_wrap_sender_tx
245a8     03 4A 05 F6 | 	mov	COUNT_, #3
245ac     A8 00 A0 FD | 	call	#pushregs_
245b0     F2 1E 02 FB | 	rdlong	local01, objptr
245b4     0F 21 02 F6 | 	mov	local02, local01
245b8     13 1E 46 F7 | 	zerox	local01, #19
245bc     14 20 46 F0 | 	shr	local02, #20
245c0     02 20 66 F0 | 	shl	local02, #2
245c4     ED 20 02 F1 | 	add	local02, __methods__
245c8     10 21 02 FB | 	rdlong	local02, local02
245cc     F2 22 02 F6 | 	mov	local03, objptr
245d0     0F E5 01 F6 | 	mov	objptr, local01
245d4     2D 20 62 FD | 	call	local02
245d8     11 E5 01 F6 | 	mov	objptr, local03
245dc     01 FA 05 F6 | 	mov	result1, #1
245e0     A7 F0 03 F6 | 	mov	ptra, fp
245e4     B2 00 A0 FD | 	call	#popregs_
245e8                 | __struct___bas_wrap_sender_tx_ret
245e8     2D 00 64 FD | 	ret
245ec                 | 
245ec                 | __struct___bas_wrap_sender_rx
245ec     03 4A 05 F6 | 	mov	COUNT_, #3
245f0     A8 00 A0 FD | 	call	#pushregs_
245f4     04 E4 05 F1 | 	add	objptr, #4
245f8     F2 1E 02 FB | 	rdlong	local01, objptr
245fc     0F 21 02 F6 | 	mov	local02, local01
24600     04 E4 85 F1 | 	sub	objptr, #4
24604     13 20 46 F7 | 	zerox	local02, #19
24608     14 1E 46 F0 | 	shr	local01, #20
2460c     02 1E 66 F0 | 	shl	local01, #2
24610     ED 1E 02 F1 | 	add	local01, __methods__
24614     0F 1F 02 FB | 	rdlong	local01, local01
24618     F2 22 02 F6 | 	mov	local03, objptr
2461c     10 E5 01 F6 | 	mov	objptr, local02
24620     2D 1E 62 FD | 	call	local01
24624     11 E5 01 F6 | 	mov	objptr, local03
24628     A7 F0 03 F6 | 	mov	ptra, fp
2462c     B2 00 A0 FD | 	call	#popregs_
24630                 | __struct___bas_wrap_sender_rx_ret
24630     2D 00 64 FD | 	ret
24634                 | 
24634                 | __struct___bas_wrap_sender_close
24634     03 4A 05 F6 | 	mov	COUNT_, #3
24638     A8 00 A0 FD | 	call	#pushregs_
2463c     08 E4 05 F1 | 	add	objptr, #8
24640     F2 1E 02 FB | 	rdlong	local01, objptr
24644     0F 21 02 F6 | 	mov	local02, local01
24648     08 E4 85 F1 | 	sub	objptr, #8
2464c     13 20 46 F7 | 	zerox	local02, #19
24650     14 1E 46 F0 | 	shr	local01, #20
24654     02 1E 66 F0 | 	shl	local01, #2
24658     ED 1E 02 F1 | 	add	local01, __methods__
2465c     0F 1F 02 FB | 	rdlong	local01, local01
24660     F2 22 02 F6 | 	mov	local03, objptr
24664     10 E5 01 F6 | 	mov	objptr, local02
24668     2D 1E 62 FD | 	call	local01
2466c     11 E5 01 F6 | 	mov	objptr, local03
24670     A7 F0 03 F6 | 	mov	ptra, fp
24674     B2 00 A0 FD | 	call	#popregs_
24678                 | __struct___bas_wrap_sender_close_ret
24678     2D 00 64 FD | 	ret
2467c                 | 
2467c                 | LR__4060
2467c     2F          | 	byte	"/"
2467d     00          | 	byte	0
2467e                 | LR__4061
2467e     69 6E 66    | 	byte	"inf"
24681     00          | 	byte	0
24682                 | LR__4062
24682     6E 61 6E    | 	byte	"nan"
24685     00          | 	byte	0
24686                 | LR__4063
24686                 | 	byte	
24686     00          | 	byte	0
24687                 | LR__4064
24687                 | 	byte	
24687     00          | 	byte	0
24688                 | LR__4065
24688                 | 	byte	
24688     00          | 	byte	0
24689                 | LR__4066
24689                 | 	byte	
24689     00          | 	byte	0
2468a                 | LR__4067
2468a                 | 	byte	
2468a     00          | 	byte	0
2468b                 | LR__4068
2468b                 | 	byte	
2468b     00          | 	byte	0
2468c                 | LR__4069
2468c                 | 	byte	
2468c     00          | 	byte	0
2468d                 | LR__4070
2468d                 | 	byte	
2468d     00          | 	byte	0
2468e                 | LR__4071
2468e     00          | 	byte	0
2468f     00          | 	byte	0
24690                 | LR__4072
24690     00          | 	byte	0
24691     00          | 	byte	0
24692                 | LR__4073
24692     00          | 	byte	0
24693     00          | 	byte	0
24694                 | LR__4074
24694     20 21 21 21 
24698     20 63 6F 72 
2469c     72 75 70 74 
246a0     65 64 20 68 
246a4     65 61 70 3F 
246a8     3F 3F 20 21 
246ac     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
246af     00          | 	byte	0
246b0                 | LR__4075
246b0     20 21 21 21 
246b4     20 6F 75 74 
246b8     20 6F 66 20 
246bc     68 65 61 70 
246c0     20 6D 65 6D 
246c4     6F 72 79 20 
246c8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
246cc     00          | 	byte	0
246cd                 | LR__4076
246cd     20 21 21 21 
246d1     20 63 6F 72 
246d5     72 75 70 74 
246d9     65 64 20 68 
246dd     65 61 70 20 
246e1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
246e5     00          | 	byte	0
246e6                 | LR__4077
246e6     00          | 	byte	0
246e7     00          | 	byte	0
246e8                 | LR__4078
246e8     2E          | 	byte	"."
246e9     00          | 	byte	0
246ea                 | LR__4079
246ea     00          | 	byte	0
246eb     00          | 	byte	0
246ec                 | LR__4080
246ec     00          | 	byte	0
246ed     00          | 	byte	0
246ee                 | LR__4081
246ee     00          | 	byte	0
246ef     00          | 	byte	0
246f0                 | LR__4082
246f0     2A 3A 3C 3E 
246f4     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
246f8     00          | 	byte	0
246f9                 | LR__4083
246f9     2B 2C 3B 3D 
246fd     5B 5D       | 	byte	"+,;=[]"
246ff     00          | 	byte	0
24700                 | LR__4084
24700     46 41 54 33 
24704     32 20 20 20 | 	byte	"FAT32   "
24708     00          | 	byte	0
24709                 | LR__4085
24709     54 5A       | 	byte	"TZ"
2470b     00          | 	byte	0
2470c                 | LR__4086
2470c     00          | 	byte	0
2470d     00          | 	byte	0
2470e                 | LR__4087
2470e                 | 	byte	
2470e     00          | 	byte	0
2470f                 | LR__4088
2470f                 | 	byte	
2470f     00          | 	byte	0
24710                 | LR__4089
24710     3A          | 	byte	":"
24711     00          | 	byte	0
24712                 | LR__4090
24712                 | 	byte	
24712     00          | 	byte	0
24713                 | LR__4091
24713                 | 	byte	
24713     00          | 	byte	0
24714                 | LR__4092
24714                 | 	byte	
24714     00          | 	byte	0
24715                 | LR__4093
24715                 | 	byte	
24715     00          | 	byte	0
24716                 | LR__4094
24716                 | 	byte	
24716     00          | 	byte	0
24717                 | LR__4095
24717                 | 	byte	
24717     00          | 	byte	0
24718                 | LR__4096
24718                 | 	byte	
24718     00          | 	byte	0
24719                 | LR__4097
24719     22          | 	byte	34
2471a     00          | 	byte	0
2471b                 | LR__4098
2471b     22          | 	byte	34
2471c     00          | 	byte	0
2471d                 | LR__4099
2471d     22          | 	byte	34
2471e     00          | 	byte	0
2471f                 | LR__4100
2471f     22          | 	byte	34
24720     00          | 	byte	0
24721                 | LR__4101
24721     22          | 	byte	34
24722     00          | 	byte	0
24723                 | LR__4102
24723     3E          | 	byte	">"
24724     00          | 	byte	0
24725                 | LR__4103
24725     3E          | 	byte	">"
24726     00          | 	byte	0
24727                 | LR__4104
24727     2B          | 	byte	"+"
24728     00          | 	byte	0
24729                 | LR__4105
24729     2D          | 	byte	"-"
2472a     00          | 	byte	0
2472b                 | LR__4106
2472b     2A          | 	byte	"*"
2472c     00          | 	byte	0
2472d                 | LR__4107
2472d     2F          | 	byte	"/"
2472e     00          | 	byte	0
2472f                 | LR__4108
2472f     5E          | 	byte	"^"
24730     00          | 	byte	0
24731                 | LR__4109
24731     3D          | 	byte	"="
24732     00          | 	byte	0
24733                 | LR__4110
24733     2B          | 	byte	"+"
24734     00          | 	byte	0
24735                 | LR__4111
24735     2B          | 	byte	"+"
24736     00          | 	byte	0
24737                 | LR__4112
24737     2D          | 	byte	"-"
24738     00          | 	byte	0
24739                 | LR__4113
24739     2D          | 	byte	"-"
2473a     00          | 	byte	0
2473b                 | LR__4114
2473b     3C          | 	byte	"<"
2473c     00          | 	byte	0
2473d                 | LR__4115
2473d     3E          | 	byte	">"
2473e     00          | 	byte	0
2473f                 | LR__4116
2473f     22          | 	byte	34
24740     00          | 	byte	0
24741                 | LR__4117
24741     22          | 	byte	34
24742     00          | 	byte	0
24743                 | LR__4118
24743                 | 	byte	
24743     00          | 	byte	0
24744                 | LR__4119
24744     6C 6F 61 64 | 	byte	"load"
24748     00          | 	byte	0
24749                 | LR__4120
24749     73 61 76 65 | 	byte	"save"
2474d     00          | 	byte	0
2474e                 | LR__4121
2474e     62 72 75 6E | 	byte	"brun"
24752     00          | 	byte	0
24753                 | LR__4122
24753     6D 6F 75 73 
24757     65          | 	byte	"mouse"
24758     00          | 	byte	0
24759                 | LR__4123
24759     63 75 72 73 
2475d     6F 72       | 	byte	"cursor"
2475f     00          | 	byte	0
24760                 | LR__4124
24760     63 6C 69 63 
24764     6B          | 	byte	"click"
24765     00          | 	byte	0
24766                 | LR__4125
24766     6F 6E       | 	byte	"on"
24768     00          | 	byte	0
24769                 | LR__4126
24769     31          | 	byte	"1"
2476a     00          | 	byte	0
2476b                 | LR__4127
2476b     6F 66 66    | 	byte	"off"
2476e     00          | 	byte	0
2476f                 | LR__4128
2476f     30          | 	byte	"0"
24770     00          | 	byte	0
24771                 | LR__4129
24771                 | 	byte	
24771     00          | 	byte	0
24772                 | LR__4130
24772                 | 	byte	
24772     00          | 	byte	0
24773                 | LR__4131
24773                 | 	byte	
24773     00          | 	byte	0
24774                 | LR__4132
24774                 | 	byte	
24774     00          | 	byte	0
24775                 | LR__4133
24775     20 55 73 65 
24779     72 20 66 75 
2477d     6E 63 74 69 
24781     6F 6E 73 20 
24785     61 6E 64 20 
24789     61 72 72 61 
2478d     79 73 20 6E 
24791     6F 74 20 79 
24795     65 74 20 69 
24799     6D 70 6C 65 
2479d     6D 65 6E 74 
247a1     65 64       | 	byte	" User functions and arrays not yet implemented"
247a3     00          | 	byte	0
247a4                 | LR__4134
247a4                 | 	byte	
247a4     00          | 	byte	0
247a5                 | LR__4135
247a5                 | 	byte	
247a5     00          | 	byte	0
247a6                 | LR__4136
247a6     52 65 61 64 
247aa     79          | 	byte	"Ready"
247ab     00          | 	byte	0
247ac                 | LR__4137
247ac     2B          | 	byte	"+"
247ad     00          | 	byte	0
247ae                 | LR__4138
247ae     2D          | 	byte	"-"
247af     00          | 	byte	0
247b0                 | LR__4139
247b0     6F 72       | 	byte	"or"
247b2     00          | 	byte	0
247b3                 | LR__4140
247b3     78 6F 72    | 	byte	"xor"
247b6     00          | 	byte	0
247b7                 | LR__4141
247b7     2A          | 	byte	"*"
247b8     00          | 	byte	0
247b9                 | LR__4142
247b9     2F          | 	byte	"/"
247ba     00          | 	byte	0
247bb                 | LR__4143
247bb     61 6E 64    | 	byte	"and"
247be     00          | 	byte	0
247bf                 | LR__4144
247bf     64 69 76    | 	byte	"div"
247c2     00          | 	byte	0
247c3                 | LR__4145
247c3     6D 6F 64    | 	byte	"mod"
247c6     00          | 	byte	0
247c7                 | LR__4146
247c7     73 68 6C    | 	byte	"shl"
247ca     00          | 	byte	0
247cb                 | LR__4147
247cb     73 68 72    | 	byte	"shr"
247ce     00          | 	byte	0
247cf                 | LR__4148
247cf     5E          | 	byte	"^"
247d0     00          | 	byte	0
247d1                 | LR__4149
247d1     6E 6F 74    | 	byte	"not"
247d4     00          | 	byte	0
247d5                 | LR__4150
247d5     40          | 	byte	"@"
247d6     00          | 	byte	0
247d7                 | LR__4151
247d7     3D          | 	byte	"="
247d8     00          | 	byte	0
247d9                 | LR__4152
247d9     3E 3D       | 	byte	">="
247db     00          | 	byte	0
247dc                 | LR__4153
247dc     3C 3D       | 	byte	"<="
247de     00          | 	byte	0
247df                 | LR__4154
247df     3C          | 	byte	"<"
247e0     00          | 	byte	0
247e1                 | LR__4155
247e1     3E          | 	byte	">"
247e2     00          | 	byte	0
247e3                 | LR__4156
247e3     3C 3E       | 	byte	"<>"
247e5     00          | 	byte	0
247e6                 | LR__4157
247e6     2B 2B       | 	byte	"++"
247e8     00          | 	byte	0
247e9                 | LR__4158
247e9     2D 2D       | 	byte	"--"
247eb     00          | 	byte	0
247ec                 | LR__4159
247ec     2B          | 	byte	"+"
247ed     00          | 	byte	0
247ee                 | LR__4160
247ee     2D          | 	byte	"-"
247ef     00          | 	byte	0
247f0                 | LR__4161
247f0     3D          | 	byte	"="
247f1     00          | 	byte	0
247f2                 | LR__4162
247f2     2C          | 	byte	","
247f3     00          | 	byte	0
247f4                 | LR__4163
247f4     2A          | 	byte	"*"
247f5     00          | 	byte	0
247f6                 | LR__4164
247f6     2F          | 	byte	"/"
247f7     00          | 	byte	0
247f8                 | LR__4165
247f8     3B          | 	byte	";"
247f9     00          | 	byte	0
247fa                 | LR__4166
247fa     22          | 	byte	34
247fb     00          | 	byte	0
247fc                 | LR__4167
247fc     5E          | 	byte	"^"
247fd     00          | 	byte	0
247fe                 | LR__4168
247fe     29          | 	byte	")"
247ff     00          | 	byte	0
24800                 | LR__4169
24800     28          | 	byte	"("
24801     00          | 	byte	0
24802                 | LR__4170
24802     3A          | 	byte	":"
24803     00          | 	byte	0
24804                 | LR__4171
24804     20          | 	byte	" "
24805     00          | 	byte	0
24806                 | LR__4172
24806     3E          | 	byte	">"
24807     00          | 	byte	0
24808                 | LR__4173
24808     3C          | 	byte	"<"
24809     00          | 	byte	0
2480a                 | LR__4174
2480a     3D          | 	byte	"="
2480b     00          | 	byte	0
2480c                 | LR__4175
2480c     63 6C 73    | 	byte	"cls"
2480f     00          | 	byte	0
24810                 | LR__4176
24810     6E 65 77    | 	byte	"new"
24813     00          | 	byte	0
24814                 | LR__4177
24814     70 6C 6F 74 | 	byte	"plot"
24818     00          | 	byte	0
24819                 | LR__4178
24819     64 72 61 77 | 	byte	"draw"
2481d     00          | 	byte	0
2481e                 | LR__4179
2481e     70 72 69 6E 
24822     74          | 	byte	"print"
24823     00          | 	byte	0
24824                 | LR__4180
24824     63 69 72 63 
24828     6C 65       | 	byte	"circle"
2482a     00          | 	byte	0
2482b                 | LR__4181
2482b     66 63 69 72 
2482f     63 6C 65    | 	byte	"fcircle"
24832     00          | 	byte	0
24833                 | LR__4182
24833     62 6F 78    | 	byte	"box"
24836     00          | 	byte	0
24837                 | LR__4183
24837     66 72 61 6D 
2483b     65          | 	byte	"frame"
2483c     00          | 	byte	0
2483d                 | LR__4184
2483d     63 6F 6C 6F 
24841     72          | 	byte	"color"
24842     00          | 	byte	0
24843                 | LR__4185
24843     70 72 69 6E 
24847     74          | 	byte	"print"
24848     00          | 	byte	0
24849                 | LR__4186
24849     6C 69 73 74 | 	byte	"list"
2484d     00          | 	byte	0
2484e                 | LR__4187
2484e     72 75 6E    | 	byte	"run"
24851     00          | 	byte	0
24852                 | LR__4188
24852     67 6F 74 6F | 	byte	"goto"
24856     00          | 	byte	0
24857                 | LR__4189
24857     63 73 61 76 
2485b     65          | 	byte	"csave"
2485c     00          | 	byte	0
2485d                 | LR__4190
2485d     73 61 76 65 | 	byte	"save"
24861     00          | 	byte	0
24862                 | LR__4191
24862     6C 6F 61 64 | 	byte	"load"
24866     00          | 	byte	0
24867                 | LR__4192
24867     62 72 75 6E | 	byte	"brun"
2486b     00          | 	byte	0
2486c                 | LR__4193
2486c     70 69 6E 77 
24870     72 69 74 65 | 	byte	"pinwrite"
24874     00          | 	byte	0
24875                 | LR__4194
24875     77 61 69 74 
24879     6D 73       | 	byte	"waitms"
2487b     00          | 	byte	0
2487c                 | LR__4195
2487c     77 61 69 74 
24880     76 62 6C    | 	byte	"waitvbl"
24883     00          | 	byte	0
24884                 | LR__4196
24884     69 66       | 	byte	"if"
24886     00          | 	byte	0
24887                 | LR__4197
24887     65 6C 73 65 | 	byte	"else"
2488b     00          | 	byte	0
2488c                 | LR__4198
2488c     74 68 65 6E | 	byte	"then"
24890     00          | 	byte	0
24891                 | LR__4199
24891     62 65 65 70 | 	byte	"beep"
24895     00          | 	byte	0
24896                 | LR__4200
24896     64 69 72    | 	byte	"dir"
24899     00          | 	byte	0
2489a                 | LR__4201
2489a     66 6F 72    | 	byte	"for"
2489d     00          | 	byte	0
2489e                 | LR__4202
2489e     6E 65 78 74 | 	byte	"next"
248a2     00          | 	byte	0
248a3                 | LR__4203
248a3     70 61 70 65 
248a7     72          | 	byte	"paper"
248a8     00          | 	byte	0
248a9                 | LR__4204
248a9     69 6E 6B    | 	byte	"ink"
248ac     00          | 	byte	0
248ad                 | LR__4205
248ad     66 6F 6E 74 | 	byte	"font"
248b1     00          | 	byte	0
248b2                 | LR__4206
248b2     6D 6F 64 65 | 	byte	"mode"
248b6     00          | 	byte	0
248b7                 | LR__4207
248b7     6D 6F 75 73 
248bb     65          | 	byte	"mouse"
248bc     00          | 	byte	0
248bd                 | LR__4208
248bd     63 75 72 73 
248c1     6F 72       | 	byte	"cursor"
248c3     00          | 	byte	0
248c4                 | LR__4209
248c4     63 6C 69 63 
248c8     6B          | 	byte	"click"
248c9     00          | 	byte	0
248ca                 | LR__4210
248ca     64 65 66 73 
248ce     70 72 69 74 
248d2     65          | 	byte	"defsprite"
248d3     00          | 	byte	0
248d4                 | LR__4211
248d4     73 70 72 69 
248d8     74 65       | 	byte	"sprite"
248da     00          | 	byte	0
248db                 | LR__4212
248db     77 61 69 74 
248df     63 6C 6F 63 
248e3     6B          | 	byte	"waitclock"
248e4     00          | 	byte	0
248e5                 | LR__4213
248e5     66 69 6C 6C | 	byte	"fill"
248e9     00          | 	byte	0
248ea                 | LR__4214
248ea     64 69 6D    | 	byte	"dim"
248ed     00          | 	byte	0
248ee                 | LR__4215
248ee     72 6E 64    | 	byte	"rnd"
248f1     00          | 	byte	0
248f2                 | LR__4216
248f2     6D 6F 75 73 
248f6     65 78       | 	byte	"mousex"
248f8     00          | 	byte	0
248f9                 | LR__4217
248f9     6D 6F 75 73 
248fd     65 79       | 	byte	"mousey"
248ff     00          | 	byte	0
24900                 | LR__4218
24900     6D 6F 75 73 
24904     65 6B       | 	byte	"mousek"
24906     00          | 	byte	0
24907                 | LR__4219
24907     6D 6F 75 73 
2490b     65 77       | 	byte	"mousew"
2490d     00          | 	byte	0
2490e                 | LR__4220
2490e     67 65 74 74 
24912     69 6D 65    | 	byte	"gettime"
24915     00          | 	byte	0
24916                 | LR__4221
24916     73 69 6E    | 	byte	"sin"
24919     00          | 	byte	0
2491a                 | LR__4222
2491a     73 74 69 63 
2491e     6B          | 	byte	"stick"
2491f     00          | 	byte	0
24920                 | LR__4223
24920     73 74 72 69 
24924     67          | 	byte	"strig"
24925     00          | 	byte	0
24926                 | LR__4224
24926     67 65 74 70 
2492a     69 78 65 6C | 	byte	"getpixel"
2492e     00          | 	byte	0
2492f                 | LR__4225
2492f     61          | 	byte	"a"
24930     00          | 	byte	0
24931                 | LR__4226
24931     7A          | 	byte	"z"
24932     00          | 	byte	0
24933                 | LR__4227
24933     5F          | 	byte	"_"
24934     00          | 	byte	0
24935                 | LR__4228
24935     61          | 	byte	"a"
24936     00          | 	byte	0
24937                 | LR__4229
24937     7A          | 	byte	"z"
24938     00          | 	byte	0
24939                 | LR__4230
24939     30          | 	byte	"0"
2493a     00          | 	byte	0
2493b                 | LR__4231
2493b     39          | 	byte	"9"
2493c     00          | 	byte	0
2493d                 | LR__4232
2493d     5F          | 	byte	"_"
2493e     00          | 	byte	0
2493f                 | LR__4233
2493f     2E          | 	byte	"."
24940     00          | 	byte	0
24941                 | LR__4234
24941     61          | 	byte	"a"
24942     00          | 	byte	0
24943                 | LR__4235
24943     7A          | 	byte	"z"
24944     00          | 	byte	0
24945                 | LR__4236
24945     30          | 	byte	"0"
24946     00          | 	byte	0
24947                 | LR__4237
24947     39          | 	byte	"9"
24948     00          | 	byte	0
24949                 | LR__4238
24949     5F          | 	byte	"_"
2494a     00          | 	byte	0
2494b                 | LR__4239
2494b     24          | 	byte	"$"
2494c     00          | 	byte	0
2494d                 | LR__4240
2494d     25          | 	byte	"%"
2494e     00          | 	byte	0
2494f                 | LR__4241
2494f     21          | 	byte	"!"
24950     00          | 	byte	0
24951                 | LR__4242
24951     30          | 	byte	"0"
24952     00          | 	byte	0
24953                 | LR__4243
24953     39          | 	byte	"9"
24954     00          | 	byte	0
24955                 | LR__4244
24955     2E          | 	byte	"."
24956     00          | 	byte	0
24957                 | LR__4245
24957     24          | 	byte	"$"
24958     00          | 	byte	0
24959                 | LR__4246
24959     25          | 	byte	"%"
2495a     00          | 	byte	0
2495b                 | LR__4247
2495b     2D          | 	byte	"-"
2495c     00          | 	byte	0
2495d                 | LR__4248
2495d     2E          | 	byte	"."
2495e     00          | 	byte	0
2495f                 | LR__4249
2495f     30          | 	byte	"0"
24960     00          | 	byte	0
24961                 | LR__4250
24961     39          | 	byte	"9"
24962     00          | 	byte	0
24963                 | LR__4251
24963     5F          | 	byte	"_"
24964     00          | 	byte	0
24965                 | LR__4252
24965     2E          | 	byte	"."
24966     00          | 	byte	0
24967                 | LR__4253
24967     45          | 	byte	"E"
24968     00          | 	byte	0
24969                 | LR__4254
24969     65          | 	byte	"e"
2496a     00          | 	byte	0
2496b                 | LR__4255
2496b     2D          | 	byte	"-"
2496c     00          | 	byte	0
2496d                 | LR__4256
2496d     2D          | 	byte	"-"
2496e     00          | 	byte	0
2496f                 | LR__4257
2496f     65          | 	byte	"e"
24970     00          | 	byte	0
24971                 | LR__4258
24971     2E          | 	byte	"."
24972     00          | 	byte	0
24973                 | LR__4259
24973     45          | 	byte	"E"
24974     00          | 	byte	0
24975                 | LR__4260
24975     65          | 	byte	"e"
24976     00          | 	byte	0
24977                 | LR__4261
24977     30          | 	byte	"0"
24978     00          | 	byte	0
24979                 | LR__4262
24979     39          | 	byte	"9"
2497a     00          | 	byte	0
2497b                 | LR__4263
2497b     24          | 	byte	"$"
2497c     00          | 	byte	0
2497d                 | LR__4264
2497d     25          | 	byte	"%"
2497e     00          | 	byte	0
2497f                 | LR__4265
2497f     2D          | 	byte	"-"
24980     00          | 	byte	0
24981                 | LR__4266
24981     30          | 	byte	"0"
24982     00          | 	byte	0
24983                 | LR__4267
24983     39          | 	byte	"9"
24984     00          | 	byte	0
24985                 | LR__4268
24985     5F          | 	byte	"_"
24986     00          | 	byte	0
24987                 | LR__4269
24987     30          | 	byte	"0"
24988     00          | 	byte	0
24989                 | LR__4270
24989     39          | 	byte	"9"
2498a     00          | 	byte	0
2498b                 | LR__4271
2498b     5F          | 	byte	"_"
2498c     00          | 	byte	0
2498d                 | LR__4272
2498d     22          | 	byte	34
2498e     00          | 	byte	0
2498f                 | LR__4273
2498f     22          | 	byte	34
24990     00          | 	byte	0
24991                 | LR__4274
24991     28          | 	byte	"("
24992     00          | 	byte	0
24993                 | LR__4275
24993     61 73       | 	byte	"as"
24995     00          | 	byte	0
24996                 | LR__4276
24996     61 73       | 	byte	"as"
24998     00          | 	byte	0
24999                 | LR__4277
24999     2C          | 	byte	","
2499a     00          | 	byte	0
2499b                 | LR__4278
2499b     29          | 	byte	")"
2499c     00          | 	byte	0
2499d                 | LR__4279
2499d     29          | 	byte	")"
2499e     00          | 	byte	0
2499f                 | LR__4280
2499f     61 73       | 	byte	"as"
249a1     00          | 	byte	0
249a2                 | LR__4281
249a2     62 79 74 65 | 	byte	"byte"
249a6     00          | 	byte	0
249a7                 | LR__4282
249a7     75 62 79 74 
249ab     65          | 	byte	"ubyte"
249ac     00          | 	byte	0
249ad                 | LR__4283
249ad     73 68 6F 72 
249b1     74          | 	byte	"short"
249b2     00          | 	byte	0
249b3                 | LR__4284
249b3     75 73 68 6F 
249b7     72 74       | 	byte	"ushort"
249b9     00          | 	byte	0
249ba                 | LR__4285
249ba     6C 6F 6E 67 | 	byte	"long"
249be     00          | 	byte	0
249bf                 | LR__4286
249bf     75 6C 6F 6E 
249c3     67          | 	byte	"ulong"
249c4     00          | 	byte	0
249c5                 | LR__4287
249c5     69 6E 74 36 
249c9     34          | 	byte	"int64"
249ca     00          | 	byte	0
249cb                 | LR__4288
249cb     75 69 6E 74 
249cf     36 34       | 	byte	"uint64"
249d1     00          | 	byte	0
249d2                 | LR__4289
249d2     73 69 6E 67 
249d6     6C 65       | 	byte	"single"
249d8     00          | 	byte	0
249d9                 | LR__4290
249d9     64 6F 75 62 
249dd     6C 65       | 	byte	"double"
249df     00          | 	byte	0
249e0                 | LR__4291
249e0     73 74 72 69 
249e4     6E 67       | 	byte	"string"
249e6     00          | 	byte	0
249e7                 | LR__4292
249e7     74 6F       | 	byte	"to"
249e9     00          | 	byte	0
249ea                 | LR__4293
249ea     73 74 65 70 | 	byte	"step"
249ee     00          | 	byte	0
249ef                 | LR__4294
249ef     57 65 20 68 
249f3     61 76 65 20 
249f7     61 20 73 6C 
249fb     6F 77 20 67 
249ff     6F 74 6F 2C 
24a03     20 74 6F 64 
24a07     6F 20 20    | 	byte	"We have a slow goto, todo  "
24a0a     00          | 	byte	0
24a0b                 | LR__4295
24a0b     6E 6F 6E 61 
24a0f     6D 65 2E 62 
24a13     61 73       | 	byte	"noname.bas"
24a15     00          | 	byte	0
24a16                 | LR__4296
24a16                 | 	byte	
24a16     00          | 	byte	0
24a17                 | LR__4297
24a17     6E 6F 6E 61 
24a1b     6D 65 2E 62 
24a1f     61 73       | 	byte	"noname.bas"
24a21     00          | 	byte	0
24a22                 | LR__4298
24a22     2F          | 	byte	"/"
24a23     00          | 	byte	0
24a24                 | LR__4299
24a24                 | 	byte	
24a24     00          | 	byte	0
24a25                 | LR__4300
24a25                 | 	byte	
24a25     00          | 	byte	0
24a26                 | LR__4301
24a26     6E 6F 6E 61 
24a2a     6D 65 2E 62 
24a2e     61 73       | 	byte	"noname.bas"
24a30     00          | 	byte	0
24a31                 | LR__4302
24a31     2F          | 	byte	"/"
24a32     00          | 	byte	0
24a33                 | LR__4303
24a33     53 79 73 74 
24a37     65 6D 20 65 
24a3b     72 72 6F 72 
24a3f     20          | 	byte	"System error "
24a40     00          | 	byte	0
24a41                 | LR__4304
24a41     3A 20       | 	byte	": "
24a43     00          | 	byte	0
24a44                 | LR__4305
24a44     2F          | 	byte	"/"
24a45     00          | 	byte	0
24a46                 | LR__4306
24a46     30          | 	byte	"0"
24a47     00          | 	byte	0
24a48                 | LR__4307
24a48     39          | 	byte	"9"
24a49     00          | 	byte	0
24a4a                 | LR__4308
24a4a                 | 	byte	
24a4a     00          | 	byte	0
24a4b                 | LR__4309
24a4b     53 74 6F 70 
24a4f     70 65 64 20 
24a53     61 74 20 6C 
24a57     69 6E 65 20 | 	byte	"Stopped at line "
24a5b     00          | 	byte	0
24a5c                 | LR__4310
24a5c     45 72 72 6F 
24a60     72 20       | 	byte	"Error "
24a62     00          | 	byte	0
24a63                 | LR__4311
24a63     3A 20       | 	byte	": "
24a65     00          | 	byte	0
24a66                 | LR__4312
24a66     69 6E 20 64 
24a6a     6F 5F 67 65 
24a6e     74 76 61 72 
24a72     20 6E 75 6D 
24a76     70 61 72 3D | 	byte	"in do_getvar numpar="
24a7a     00          | 	byte	0
24a7b                 | LR__4313
24a7b     69 6E 20 64 
24a7f     6F 5F 67 65 
24a83     74 76 61 72 
24a87     20 70 6F 70 
24a8b     70 65 64 20 
24a8f     69 33 3D    | 	byte	"in do_getvar popped i3="
24a92     00          | 	byte	0
24a93                 | LR__4314
24a93     69 6E 20 64 
24a97     6F 5F 67 65 
24a9b     74 76 61 72 
24a9f     20 6E 6F 20 
24aa3     69 33 20 70 
24aa7     6F 70 70 65 
24aab     64          | 	byte	"in do_getvar no i3 popped"
24aac     00          | 	byte	0
24aad                 | LR__4315
24aad     69 6E 20 64 
24ab1     6F 5F 67 65 
24ab5     74 76 61 72 
24ab9     20 70 6F 70 
24abd     70 65 64 20 
24ac1     69 32 3D    | 	byte	"in do_getvar popped i2="
24ac4     00          | 	byte	0
24ac5                 | LR__4316
24ac5     69 6E 20 64 
24ac9     6F 5F 67 65 
24acd     74 76 61 72 
24ad1     20 6E 6F 20 
24ad5     69 32 20 70 
24ad9     6F 70 70 65 
24add     64          | 	byte	"in do_getvar no i2 popped"
24ade     00          | 	byte	0
24adf                 | LR__4317
24adf     69 6E 20 64 
24ae3     6F 5F 67 65 
24ae7     74 76 61 72 
24aeb     20 70 6F 70 
24aef     70 65 64 20 
24af3     69 31 3D    | 	byte	"in do_getvar popped i1="
24af6     00          | 	byte	0
24af7                 | LR__4318
24af7     69 6E 20 64 
24afb     6F 5F 67 65 
24aff     74 76 61 72 
24b03     20 6E 6F 20 
24b07     69 31 20 70 
24b0b     6F 70 70 65 
24b0f     64          | 	byte	"in do_getvar no i1 popped"
24b10     00          | 	byte	0
24b11                 | LR__4319
24b11     64 69 6D 31 
24b15     3D          | 	byte	"dim1="
24b16     00          | 	byte	0
24b17                 | LR__4320
24b17     64 69 6D 32 
24b1b     3D          | 	byte	"dim2="
24b1c     00          | 	byte	0
24b1d                 | LR__4321
24b1d     64 69 6D 33 
24b21     3D          | 	byte	"dim3="
24b22     00          | 	byte	0
24b23                 | LR__4322
24b23     65 73 69 7A 
24b27     65 3D       | 	byte	"esize="
24b29     00          | 	byte	0
24b2a                 | LR__4323
24b2a     69 31 3D    | 	byte	"i1="
24b2d     00          | 	byte	0
24b2e                 | LR__4324
24b2e     69 32 3D    | 	byte	"i2="
24b31     00          | 	byte	0
24b32                 | LR__4325
24b32     69 33 3D    | 	byte	"i3="
24b35     00          | 	byte	0
24b36                 | LR__4326
24b36     61 72 72 70 
24b3a     74 72 3D    | 	byte	"arrptr="
24b3d     00          | 	byte	0
24b3e                 | LR__4327
24b3e     76 61 72 69 
24b42     64 78 3D    | 	byte	"varidx="
24b45     00          | 	byte	0
24b46                 | LR__4328
24b46     6D 65 6D 74 
24b4a     6F 70 3D    | 	byte	"memtop="
24b4d     00          | 	byte	0
24b4e                 | LR__4329
24b4e     62 75 66 70 
24b52     74 72 3D    | 	byte	"bufptr="
24b55     00          | 	byte	0
24b56                 | LR__4330
24b56     69 6E 20 64 
24b5a     6F 5F 67 65 
24b5e     74 76 61 72 
24b62     20 6E 6F 74 
24b66     79 70 65 20 
24b6a     61 72 72 61 
24b6e     79 3D       | 	byte	"in do_getvar notype array="
24b70     00          | 	byte	0
24b71                 | LR__4331
24b71     72 6E 64 3A 
24b75     20          | 	byte	"rnd: "
24b76     00          | 	byte	0
24b77                 | LR__4332
24b77     72 6E 64 3A 
24b7b     20          | 	byte	"rnd: "
24b7c     00          | 	byte	0
24b7d                 | LR__4333
24b7d     73 69 6E 3A 
24b81     20          | 	byte	"sin: "
24b82     00          | 	byte	0
24b83                 | LR__4334
24b83     73 69 6E 3A 
24b87     20          | 	byte	"sin: "
24b88     00          | 	byte	0
24b89                 | LR__4335
24b89     73 74 69 63 
24b8d     6B 3A 20    | 	byte	"stick: "
24b90     00          | 	byte	0
24b91                 | LR__4336
24b91     73 74 72 69 
24b95     67 3A 20    | 	byte	"strig: "
24b98     00          | 	byte	0
24b99                 | LR__4337
24b99     67 65 74 70 
24b9d     69 78 65 6C 
24ba1     3A 20       | 	byte	"getpixel: "
24ba3     00          | 	byte	0
24ba4                 | LR__4338
24ba4                 | 	byte	
24ba4     00          | 	byte	0
24ba5                 | LR__4339
24ba5     2F 73 64 2F 
24ba9     62 61 73    | 	byte	"/sd/bas"
24bac     00          | 	byte	0
24bad                 | LR__4340
24bad     57 6F 72 6B 
24bb1     69 6E 67 20 
24bb5     64 69 72 65 
24bb9     63 74 6F 72 
24bbd     79 3A 20    | 	byte	"Working directory: "
24bc0     00          | 	byte	0
24bc1                 | LR__4341
24bc1     2A          | 	byte	"*"
24bc2     00          | 	byte	0
24bc3                 | LR__4342
24bc3                 | 	byte	
24bc3     00          | 	byte	0
24bc4                 | LR__4343
24bc4     5B 64 69 72 
24bc8     5D 20       | 	byte	"[dir] "
24bca     00          | 	byte	0
24bcb                 | LR__4344
24bcb     2A          | 	byte	"*"
24bcc     00          | 	byte	0
24bcd                 | LR__4345
24bcd                 | 	byte	
24bcd     00          | 	byte	0
24bce                 | LR__4346
24bce     2D 2D 2D 2D 
24bd2     2D 6D 6F 72 
24bd6     65 2C 20 70 
24bda     72 65 73 73 
24bde     20 61 6E 79 
24be2     20 6B 65 79 | 	byte	"-----more, press any key"
24be6     00          | 	byte	0
24be7                 | LR__4347
24be7     20 20 20 20 
      ...             
24bff     20 20 20 20 
24c03     20          | 	byte	"                             "
24c04     00          | 	byte	0
24c05                 | LR__4348
24c05     2F          | 	byte	"/"
24c06     00          | 	byte	0
24c07                 | LR__4349
24c07     2F 73 64 2F 
24c0b     62 69 6E 2F | 	byte	"/sd/bin/"
24c0f     00          | 	byte	0
24c10                 | LR__4350
24c10     53 79 73 74 
24c14     65 6D 20 65 
24c18     72 72 6F 72 
24c1c     20          | 	byte	"System error "
24c1d     00          | 	byte	0
24c1e                 | LR__4351
24c1e     3A 20       | 	byte	": "
24c20     00          | 	byte	0
24c21                 | LR__4352
24c21                 | 	byte	
24c21     00          | 	byte	0
24c22                 | LR__4353
24c22     45 78 70 65 
24c26     63 74 65 64 
24c2a     20 6E 75 6D 
24c2e     62 65 72 2C 
24c32     20 67 6F 74 
24c36     20 73 6F 6D 
24c3a     65 74 68 69 
24c3e     6E 67 20 65 
24c42     6C 73 65 2E | 	byte	"Expected number, got something else."
24c46     00          | 	byte	0
24c47                 | LR__4354
24c47     43 61 6E 6E 
24c4b     6F 74 20 61 
24c4f     64 64 20 61 
24c53     20 6E 75 6D 
24c57     62 65 72 20 
24c5b     74 6F 20 61 
24c5f     20 73 74 72 
24c63     69 6E 67 2E | 	byte	"Cannot add a number to a string."
24c67     00          | 	byte	0
24c68                 | LR__4355
24c68     43 61 6E 6E 
24c6c     6F 74 20 73 
24c70     75 62 73 74 
24c74     72 61 63 74 
24c78     20 73 74 72 
24c7c     69 6E 67 73 
24c80     2E          | 	byte	"Cannot substract strings."
24c81     00          | 	byte	0
24c82                 | LR__4356
24c82     55 6E 6B 6E 
24c86     6F 77 6E 20 
24c8a     65 72 72 6F 
24c8e     72 20 77 68 
24c92     69 6C 65 20 
24c96     61 64 64 69 
24c9a     6E 67 2E    | 	byte	"Unknown error while adding."
24c9d     00          | 	byte	0
24c9e                 | LR__4357
24c9e     55 6E 6B 6E 
24ca2     6F 77 6E 20 
24ca6     65 72 72 6F 
24caa     72 20 77 68 
24cae     69 6C 65 20 
24cb2     73 75 62 73 
24cb6     74 72 61 63 
24cba     74 69 6E 67 
24cbe     2E          | 	byte	"Unknown error while substracting."
24cbf     00          | 	byte	0
24cc0                 | LR__4358
24cc0     43 61 6E 6E 
24cc4     6F 74 20 64 
24cc8     6F 20 6C 6F 
24ccc     67 69 63 20 
24cd0     6F 70 65 72 
24cd4     61 74 69 6F 
24cd8     6E 20 6F 6E 
24cdc     20 73 74 72 
24ce0     69 6E 67 20 
24ce4     6F 72 20 66 
24ce8     6C 6F 61 74 
24cec     2E          | 	byte	"Cannot do logic operation on string or float."
24ced     00          | 	byte	0
24cee                 | LR__4359
24cee     55 6E 6B 6E 
24cf2     6F 77 6E 20 
24cf6     65 72 72 6F 
24cfa     72 20 77 68 
24cfe     69 6C 65 20 
24d02     64 6F 69 6E 
24d06     67 20 6C 6F 
24d0a     67 69 63 20 
24d0e     6F 70 65 72 
24d12     61 74 69 6F 
24d16     6E 2E       | 	byte	"Unknown error while doing logic operation."
24d18     00          | 	byte	0
24d19                 | LR__4360
24d19     43 61 6E 6E 
24d1d     6F 74 20 6D 
24d21     75 6C 74 69 
24d25     70 6C 79 20 
24d29     73 74 72 69 
24d2d     6E 67 73 2E | 	byte	"Cannot multiply strings."
24d31     00          | 	byte	0
24d32                 | LR__4361
24d32     55 6E 6B 6E 
24d36     6F 77 6E 20 
24d3a     65 72 72 6F 
24d3e     72 20 77 68 
24d42     69 6C 65 20 
24d46     6D 75 6C 74 
24d4a     69 70 6C 79 
24d4e     69 6E 67 2E | 	byte	"Unknown error while multiplying."
24d52     00          | 	byte	0
24d53                 | LR__4362
24d53     43 61 6E 6E 
24d57     6F 74 20 64 
24d5b     69 76 69 64 
24d5f     65 20 73 74 
24d63     72 69 6E 67 
24d67     73 2E       | 	byte	"Cannot divide strings."
24d69     00          | 	byte	0
24d6a                 | LR__4363
24d6a     55 6E 6B 6E 
24d6e     6F 77 6E 20 
24d72     65 72 72 6F 
24d76     72 20 77 68 
24d7a     69 6C 65 20 
24d7e     64 69 76 69 
24d82     64 69 6E 67 
24d86     2E          | 	byte	"Unknown error while dividing."
24d87     00          | 	byte	0
24d88                 | LR__4364
24d88     43 61 6E 6E 
24d8c     6F 74 20 63 
24d90     6F 6D 70 75 
24d94     74 65 20 61 
24d98     20 70 6F 77 
24d9c     65 72 20 6F 
24da0     66 20 61 20 
24da4     73 74 72 69 
24da8     6E 67 2E    | 	byte	"Cannot compute a power of a string."
24dab     00          | 	byte	0
24dac                 | LR__4365
24dac     55 6E 6B 6E 
24db0     6F 77 6E 20 
24db4     65 72 72 6F 
24db8     72 20 77 68 
24dbc     69 6C 65 20 
24dc0     63 6F 6D 70 
24dc4     75 74 69 6E 
24dc8     67 20 61 20 
24dcc     70 6F 77 65 
24dd0     72 2E       | 	byte	"Unknown error while computing a power."
24dd2     00          | 	byte	0
24dd3                 | LR__4366
24dd3     52 69 67 68 
24dd7     74 20 70 61 
24ddb     72 65 6E 74 
24ddf     68 65 73 69 
24de3     73 20 65 78 
24de7     70 65 63 74 
24deb     65 64 2E    | 	byte	"Right parenthesis expected."
24dee     00          | 	byte	0
24def                 | LR__4367
24def     45 78 70 65 
24df3     63 74 65 64 
24df7     20 73 74 72 
24dfb     69 6E 67 2E | 	byte	"Expected string."
24dff     00          | 	byte	0
24e00                 | LR__4368
24e00     45 78 70 65 
24e04     63 74 65 64 
24e08     20 66 6C 6F 
24e0c     61 74 2E    | 	byte	"Expected float."
24e0f     00          | 	byte	0
24e10                 | LR__4369
24e10     45 78 70 65 
24e14     63 74 65 64 
24e18     20 75 6E 73 
24e1c     69 67 6E 65 
24e20     64 20 69 6E 
24e24     74 65 67 65 
24e28     72 2E       | 	byte	"Expected unsigned integer."
24e2a     00          | 	byte	0
24e2b                 | LR__4370
24e2b     45 78 70 65 
24e2f     63 74 65 64 
24e33     20 69 6E 74 
24e37     65 67 65 72 
24e3b     2E          | 	byte	"Expected integer."
24e3c     00          | 	byte	0
24e3d                 | LR__4371
24e3d     4E 6F 20 6D 
24e41     6F 72 65 20 
24e45     76 61 72 69 
24e49     61 62 6C 65 
24e4d     20 73 6C 6F 
24e51     74 73 2E    | 	byte	"No more variable slots."
24e54     00          | 	byte	0
24e55                 | LR__4372
24e55     56 61 72 69 
24e59     61 62 6C 65 
24e5d     20 6E 6F 74 
24e61     20 66 6F 75 
24e65     6E 64 2E    | 	byte	"Variable not found."
24e68     00          | 	byte	0
24e69                 | LR__4373
24e69     43 6F 6D 6D 
24e6d     61 20 65 78 
24e71     70 65 63 74 
24e75     65 64 2E    | 	byte	"Comma expected."
24e78     00          | 	byte	0
24e79                 | LR__4374
24e79     43 6F 6D 6D 
24e7d     61 20 6F 72 
24e81     20 73 65 6D 
24e85     69 63 6F 6C 
24e89     6F 6E 20 65 
24e8d     78 70 65 63 
24e91     74 65 64 2E | 	byte	"Comma or semicolon expected."
24e95     00          | 	byte	0
24e96                 | LR__4375
24e96     55 6E 6B 6E 
24e9a     6F 77 6E 20 
24e9e     63 6F 6D 6D 
24ea2     61 6E 64 2E | 	byte	"Unknown command."
24ea6     00          | 	byte	0
24ea7                 | LR__4376
24ea7     53 74 61 63 
24eab     6B 20 75 6E 
24eaf     64 65 72 66 
24eb3     6C 6F 77 2E | 	byte	"Stack underflow."
24eb7     00          | 	byte	0
24eb8                 | LR__4377
24eb8     43 61 6E 6E 
24ebc     6F 74 20 65 
24ec0     78 65 63 75 
24ec4     74 65 20 67 
24ec8     6F 74 6F 20 
24ecc     69 6E 20 74 
24ed0     68 65 20 69 
24ed4     6D 6D 65 64 
24ed8     69 61 74 65 
24edc     20 6D 6F 64 
24ee0     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
24ee2     00          | 	byte	0
24ee3                 | LR__4378
24ee3     43 61 6E 6E 
24ee7     6F 74 20 6C 
24eeb     6F 61 64 20 
24eef     66 72 6F 6D 
24ef3     20 74 68 69 
24ef7     73 20 66 69 
24efb     6C 65 2E    | 	byte	"Cannot load from this file."
24efe     00          | 	byte	0
24eff                 | LR__4379
24eff     54 68 65 20 
24f03     70 72 6F 67 
24f07     72 61 6D 20 
24f0b     69 73 20 65 
24f0f     6D 70 74 79 
24f13     2E          | 	byte	"The program is empty."
24f14     00          | 	byte	0
24f15                 | LR__4380
24f15     49 66 20 61 
24f19     66 74 65 72 
24f1d     20 69 66 2E | 	byte	"If after if."
24f21     00          | 	byte	0
24f22                 | LR__4381
24f22     45 6D 70 74 
24f26     79 20 65 78 
24f2a     70 72 65 73 
24f2e     73 69 6F 6E 
24f32     2E          | 	byte	"Empty expression."
24f33     00          | 	byte	0
24f34                 | LR__4382
24f34     53 74 72 69 
24f38     6E 67 20 65 
24f3c     78 70 65 63 
24f40     74 65 64 2E | 	byte	"String expected."
24f44     00          | 	byte	0
24f45                 | LR__4383
24f45     49 6E 74 65 
24f49     72 70 72 65 
24f4d     74 65 72 20 
24f51     69 6E 74 65 
24f55     72 6E 61 6C 
24f59     20 65 72 72 
24f5d     6F 72 2E    | 	byte	"Interpreter internal error."
24f60     00          | 	byte	0
24f61                 | LR__4384
24f61     45 78 70 65 
24f65     63 74 65 64 
24f69     20 61 73 73 
24f6d     69 67 6E 2E | 	byte	"Expected assign."
24f71     00          | 	byte	0
24f72                 | LR__4385
24f72     45 78 70 65 
24f76     63 74 65 64 
24f7a     20 27 74 6F 
24f7e     27 2E       | 	byte	"Expected 'to'."
24f80     00          | 	byte	0
24f81                 | LR__4386
24f81     45 78 70 65 
24f85     63 74 65 64 
24f89     20 69 6E 74 
24f8d     65 67 65 72 
24f91     20 76 61 72 
24f95     69 61 62 6C 
24f99     65 2E       | 	byte	"Expected integer variable."
24f9b     00          | 	byte	0
24f9c                 | LR__4387
24f9c     55 6E 69 6E 
24fa0     69 74 69 61 
24fa4     6C 69 7A 65 
24fa8     64 20 76 61 
24fac     72 69 61 62 
24fb0     6C 65 20 69 
24fb4     6E 20 27 6E 
24fb8     65 78 74 27 
24fbc     2C 20 75 73 
24fc0     65 20 27 66 
24fc4     6F 72 27 20 
24fc8     62 65 66 6F 
24fcc     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
24fcf     00          | 	byte	0
24fd0                 | LR__4388
24fd0     4E 6F 20 6D 
24fd4     6F 72 65 20 
24fd8     73 6C 6F 74 
24fdc     73 20 66 6F 
24fe0     72 20 27 66 
24fe4     6F 72 27 2E | 	byte	"No more slots for 'for'."
24fe8     00          | 	byte	0
24fe9                 | LR__4389
24fe9     27 4E 65 78 
24fed     74 27 20 64 
24ff1     6F 65 73 6E 
24ff5     27 74 20 6D 
24ff9     61 74 63 68 
24ffd     20 27 66 6F 
25001     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
25004     00          | 	byte	0
25005                 | LR__4390
25005     27 47 6F 74 
25009     6F 27 20 74 
2500d     61 72 67 65 
25011     74 20 6C 69 
25015     6E 65 20 6E 
25019     6F 74 20 66 
2501d     6F 75 6E 64 
25021     2E          | 	byte	"'Goto' target line not found."
25022     00          | 	byte	0
25023                 | LR__4391
25023     42 61 64 20 
25027     6E 75 6D 62 
2502b     65 72 20 6F 
2502f     66 20 70 61 
25033     72 61 6D 65 
25037     74 65 72 73 | 	byte	"Bad number of parameters"
2503b     00          | 	byte	0
2503c                 | LR__4392
2503c     46 75 6E 63 
25040     74 69 6F 6E 
25044     20 75 6E 64 
25048     65 66 69 6E 
2504c     65 64 20 66 
25050     6F 72 20 73 
25054     74 72 69 6E 
25058     67 73       | 	byte	"Function undefined for strings"
2505a     00          | 	byte	0
2505b                 | LR__4393
2505b     42 61 64 20 
2505f     70 61 72 61 
25063     6D 65 74 65 
25067     72 2E       | 	byte	"Bad parameter."
25069     00          | 	byte	0
2506a                 | LR__4394
2506a     43 61 6E 6E 
2506e     6F 74 20 64 
25072     65 63 6C 61 
25076     72 65 20 61 
2507a     6E 20 61 72 
2507e     72 61 79 3A 
25082     20 74 68 65 
25086     20 76 61 72 
2508a     69 61 62 6C 
2508e     65 20 65 78 
25092     69 73 74 73 
25096     2E          | 	byte	"Cannot declare an array: the variable exists."
25097     00          | 	byte	0
25098                 | LR__4395
25098     45 78 70 65 
2509c     63 74 65 64 
250a0     20 27 28 27 
250a4     2E          | 	byte	"Expected '('."
250a5     00          | 	byte	0
250a6                 | LR__4396
250a6     45 78 70 65 
250aa     63 74 65 64 
250ae     20 27 29 27 
250b2     20 6F 72 20 
250b6     27 2C 27 2E | 	byte	"Expected ')' or ','."
250ba     00          | 	byte	0
250bb                 | LR__4397
250bb     4E 6F 20 6D 
250bf     6F 72 65 20 
250c3     74 68 61 6E 
250c7     20 33 20 64 
250cb     69 6D 65 6E 
250cf     73 69 6F 6E 
250d3     73 20 73 75 
250d7     70 70 6F 72 
250db     74 65 64    | 	byte	"No more than 3 dimensions supported"
250de     00          | 	byte	0
250df                 | LR__4398
250df     56 61 72 69 
250e3     61 62 6C 65 
250e7     20 6E 61 6D 
250eb     65 20 65 78 
250ef     70 65 63 74 
250f3     65 64       | 	byte	"Variable name expected"
250f5     00          | 	byte	0
250f6                 | LR__4399
250f6     54 79 70 65 
250fa     20 6E 61 6D 
250fe     65 20 65 78 
25102     70 65 63 74 
25106     65 64       | 	byte	"Type name expected"
25108     00          | 	byte	0
25109                 | LR__4400
25109     54 79 70 65 
2510d     20 6E 6F 74 
25111     20 73 75 70 
25115     70 6F 72 74 
25119     65 64 20 79 
2511d     65 74       | 	byte	"Type not supported yet"
2511f     00          | 	byte	0
25120                 | LR__4401
25120     45 72 72 6F 
25124     72 20       | 	byte	"Error "
25126     00          | 	byte	0
25127                 | LR__4402
25127     3A 20       | 	byte	": "
25129     00          | 	byte	0
2512a                 | LR__4403
2512a     2F 73 64    | 	byte	"/sd"
2512d     00          | 	byte	0
2512e                 | LR__4404
2512e     2F 73 64 2F 
25132     62 61 73    | 	byte	"/sd/bas"
25135     00          | 	byte	0
25136                 | LR__4405
25136     2F 73 64 2F 
2513a     62 61 73    | 	byte	"/sd/bas"
2513d     00          | 	byte	0
2513e                 | LR__4406
2513e     20 42 41 53 
25142     49 43 20 62 
25146     79 74 65 73 
2514a     20 66 72 65 
2514e     65          | 	byte	" BASIC bytes free"
2514f     00          | 	byte	0
25150                 | LR__4407
25150     52 65 61 64 
25154     79          | 	byte	"Ready"
25155     00          | 	byte	0
25156                 | LR__4408
25156     20          | 	byte	" "
25157     00          | 	byte	0
25158                 | LR__4409
25158     20          | 	byte	" "
25159     00          | 	byte	0
2515a                 | LR__4410
2515a                 | 	byte	
2515a     00          | 	byte	0
2515b                 | LR__4411
2515b                 | 	byte	
2515b     00          | 	byte	0
2515c                 | 	alignl
2515c                 | _dat_
2515c     00 00 00 00 
25160     00 00 00 00 
25164     00 00 00 00 
25168     00 00 00 00 | 	byte	$00[16]
2516c     61 41 17 0E 
25170     62 42 00 00 
25174     63 43 19 10 
25178     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2517c     65 45 18 0F 
25180     66 46 00 00 
25184     67 47 00 00 
25188     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2518c     69 49 00 00 
25190     6A 4A 00 00 
25194     6B 4B 00 00 
25198     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2519c     6D 4D 00 00 
251a0     6E 4E 1A 11 
251a4     6F 4F 1E 15 
251a8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
251ac     71 51 00 00 
251b0     72 52 00 00 
251b4     73 53 1B 12 
251b8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
251bc     75 55 00 00 
251c0     76 56 00 00 
251c4     77 57 00 00 
251c8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
251cc     79 59 00 00 
251d0     7A 5A 1D 14 
251d4     31 21 04 00 
251d8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
251dc     33 23 06 00 
251e0     34 24 07 00 
251e4     35 25 08 00 
251e8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
251ec     37 26 0A 00 
251f0     38 2A 0B 00 
251f4     39 28 0C 00 
251f8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
251fc     8D 8D 00 00 
25200     9B 9B 00 00 
25204     88 88 00 00 
25208     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2520c     20 20 00 00 
25210     2D 5F 00 00 
25214     3D 2B 00 00 
25218     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2521c     5D 7D 00 00 
25220     5C 7C 00 00 
25224     23 7E 00 00 
25228     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2522c     27 22 00 00 
25230     60 7E 03 00 
25234     2C 3C 00 00 
25238     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2523c     2F 3F 00 00 
25240     B9 B9 00 00 
25244     BA 00 00 00 
25248     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2524c     BC 00 00 00 
25250     BD 00 00 00 
25254     BE 00 00 00 
25258     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2525c     C0 00 00 00 
25260     C1 00 00 00 
25264     C2 00 00 00 
25268     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2526c     C4 00 00 00 
25270     C5 00 00 00 
25274     C6 00 00 00 
25278     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2527c     C8 00 00 00 
25280     C9 00 00 00 
25284     CA 00 00 00 
25288     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2528c     7F 7F 00 00 
25290     CC 00 00 00 
25294     CD 00 00 00 
25298     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2529c     CF 00 00 00 
252a0     D0 00 00 00 
252a4     D1 00 00 00 
252a8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
252ac     2F 2F 00 00 
252b0     2A 2A 00 00 
252b4     2D 2D 00 00 
252b8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
252bc     8D 8D 00 00 
252c0     31 31 00 00 
252c4     32 32 00 00 
252c8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
252cc     34 34 00 00 
252d0     35 35 00 00 
252d4     36 36 00 00 
252d8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
252dc     38 38 00 00 
252e0     39 39 00 00 
252e4     30 30 00 00 
252e8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
252ec     5C 7C 00 00 
252f0     00 00 00 00 
252f4     00 00 00 00 
252f8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
252fc     00 00 00 00 
      ...             
25354     00 00 00 00 
25358     00 00 00 00 | 	byte	$00[96]
2535c     2B 00 A6 F2 
25360     24 A7 09 80 
25364     5B 88 4D 89 
25368     80 88 A5 88 | atari_spl file "atari.spl"
2536c     6D 88 B8 88 
25370     80 88 CB 88 
25374     92 88 A5 88 
25378     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2537c     A5 88 CA 88 
25380     A6 88 DD 88 
25384     B8 88 AB 89 
25388     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2538c     C8 AD C6 F1 
25390     91 06 B6 FF 
25394     13 00 4A 00 
25398     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2539c     5D 00 5E 00 
253a0     5D 00 5E 00 
253a4     5E 00 5D 00 
253a8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
253ac     38 00 83 00 
253b0     25 00 83 00 
253b4     C3 FE D1 04 
253b8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
253bc     48 88 38 85 
253c0     41 8A CB 88 
253c4     28 89 B8 88 
253c8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
253cc     15 89 03 89 
253d0     02 89 15 89 
253d4     16 89 15 89 
253d8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
253dc     15 89 3A 89 
253e0     72 89 E3 89 
253e4     52 83 AD 97 
253e8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
253ec     0C 02 B6 FF 
253f0     E1 00 A8 00 
253f4     F3 00 A8 00 
253f8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
253fc     CE 00 CD 00 
25400     CD 00 BA 00 
25404     E1 00 BB 00 
25408     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2540c     DF 00 C9 FF 
25410     E6 01 B6 06 
25414     EE DD 8D 98 
25418     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2541c     97 89 73 89 
25420     3B 89 60 89 
25424     60 89 60 89 
25428     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2542c     73 89 72 89 
25430     85 89 73 89 
25434     AA 89 60 89 
25438     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2543c     E8 8A 18 86 
25440     92 88 A5 C2 
25444     E0 00 C3 05 
25448     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2544c     F2 00 64 01 
25450     06 01 3E 01 
25454     2B 01 2B 01 
25458     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2545c     2B 01 2A 01 
25460     2B 01 2B 01 
25464     2B 01 18 01 
25468     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2546c     39 07 61 F3 
25470     C0 AF 37 85 
25474     0F 88 8B 8A 
25478     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2547c     AB 89 D0 89 
25480     AB 89 D0 89 
25484     D0 89 CF 89 
25488     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2548c     D0 89 F5 89 
25490     BD 89 08 8A 
25494     CF 89 E8 8A 
25498     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2549c     53 B3 0D F8 
254a0     F4 07 38 00 
254a4     63 01 63 01 
254a8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
254ac     88 01 88 01 
254b0     76 01 88 01 
254b4     88 01 89 01 
254b8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
254bc     75 01 AE 01 
254c0     76 01 88 01 
254c4     4A 00 46 06 
254c8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
254cc     08 8A 9A 86 
254d0     33 8B 08 8A 
254d4     2D 8A F5 89 
254d8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
254dc     2D 8A 2D 8A 
254e0     2E 8A 1B 8A 
254e4     40 8A 2D 8A 
254e8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
254ec     2E 8A 79 8A 
254f0     66 8A C8 8B 
254f4     72 82 2B 97 
254f8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
254fc     1D 02 05 01 
25500     F8 01 C0 01 
25504     0B 02 C0 01 
25508     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2550c     F9 01 D3 01 
25510     F8 01 D3 01 
25514     F8 01 D2 01 
25518     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2551c     E6 01 2B 01 
25520     8E 02 5F 07 
25524     F7 E2 ED 9C 
25528     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2552c     E8 8A 78 8A 
25530     78 8A 65 8A 
25534     8B 8A 78 8A 
25538     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2553c     8B 8A 9D 8A 
25540     9D 8A 8B 8A 
25544     C2 8A 78 8A 
25548     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2554c     70 8C 18 86 
25550     8B 8A 23 C9 
25554     CB 03 C4 05 
25558     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2555c     0B 02 7B 02 
25560     1E 02 55 02 
25564     30 02 43 02 
25568     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2556c     43 02 44 02 
25570     43 02 30 02 
25574     68 02 31 02 
25578     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2557c     07 08 3F F7 
25580     73 B2 13 85 
25584     15 89 ED 8B 
25588     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2558c     B0 8A FB 8A 
25590     D5 8A FA 8A 
25594     E8 8A FB 8A 
25598     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2559c     E8 8A 21 8B 
255a0     E7 8A 33 8B 
255a4     E8 8A 26 8C 
255a8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
255ac     8D B0 27 F6 
255b0     9C 08 AD 01 
255b4     7B 02 8D 02 
255b8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
255bc     A1 02 A0 02 
255c0     A1 02 A0 02 
255c4     A0 02 A0 02 
255c8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
255cc     7B 02 D8 02 
255d0     7B 02 C6 02 
255d4     3E 01 C3 05 
255d8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
255dc     00 8C 2A 86 
255e0     E0 8C FA 8A 
255e4     6A 8B FB 8A 
255e8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
255ec     45 8B 45 8B 
255f0     45 8B 6B 8B 
255f4     46 8B 59 8B 
255f8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
255fc     6B 8B 6B 8B 
25600     6B 8B 6B 8B 
25604     7D 8B 7D 8B 
25608     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2560c     90 8B 91 8B 
25610     90 8B 90 8B 
25614     A3 8B A3 8B 
25618     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2561c     B5 8B B6 8B 
25620     B5 8B B5 8B 
25624     B6 8B C8 8B 
25628     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2562c     C8 8B DA 8B 
25630     DB 8B DB 8B 
25634     DB 8B DC 8B 
25638     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2563c     EE 8B EE 8B 
25640     00 8C 01 8C 
25644     00 8C 01 8C 
25648     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2564c     12 8C 13 8C 
25650     13 8C 26 8C 
25654     26 8C 26 8C 
25658     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2565c     38 8C 38 8C 
25660     38 8C 38 8C 
25664     4B 8C 4B 8C 
25668     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2566c     5E 8C 5E 8C 
25670     5E 8C 5E 8C 
25674     70 8C 70 8C 
25678     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2567c     70 8C 83 8C 
25680     83 8C 83 8C 
25684     83 8C 96 8C 
25688     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2568c     95 8C A9 8C 
25690     A9 8C A8 8C 
25694     A8 8C A8 8C 
25698     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2569c     BB 8C BB 8C 
256a0     BB 8C CE 8C 
256a4     CE 8C CE 8C 
256a8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
256ac     E0 8C E1 8C 
256b0     E1 8C E0 8C 
256b4     F4 8C F2 8C 
256b8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
256bc     05 8D 05 8D 
256c0     06 8D 06 8D 
256c4     19 8D 19 8D 
256c8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
256cc     18 8D 2B 8D 
256d0     2B 8D 2B 8D 
256d4     2A 8D 3E 8D 
256d8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
256dc     3E 8D 51 8D 
256e0     50 8D 50 8D 
256e4     50 8D 51 8D 
256e8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
256ec     63 8D 64 8D 
256f0     76 8D 75 8D 
256f4     75 8D 76 8D 
256f8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
256fc     88 8D 88 8D 
25700     89 8D 9B 8D 
25704     9A 8D 9B 8D 
25708     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2570c     AD 8D AE 8D 
25710     AD 8D AE 8D 
25714     C1 8D C1 8D 
25718     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2571c     D3 8D D3 8D 
25720     D3 8D D3 8D 
25724     D3 8D E6 8D 
25728     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2572c     E6 8D E6 8D 
25730     F9 8D F9 8D 
25734     F9 8D F8 8D 
25738     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2573c     0B 8E 0B 8E 
25740     1D 8E 1D 8E 
25744     1E 8E 1E 8E 
25748     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2574c     31 8E 31 8E 
25750     31 8E 42 8E 
25754     43 8E 43 8E 
25758     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2575c     56 8E 56 8E 
25760     55 8E 56 8E 
25764     68 8E 69 8E 
25768     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2576c     69 8E 7B 8E 
25770     7C 8E 7B 8E 
25774     7B 8E 8D 8E 
25778     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2577c     8D 8E A1 8E 
25780     A0 8E A1 8E 
25784     A1 8E A0 8E 
25788     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2578c     B3 8E B3 8E 
25790     C6 8E C5 8E 
25794     C6 8E C6 8E 
25798     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2579c     D8 8E D9 8E 
257a0     D8 8E EC 8E 
257a4     EB 8E EC 8E 
257a8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
257ac     FE 8E FE 8E 
257b0     FE 8E FE 8E 
257b4     10 8F 10 8F 
257b8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
257bc     11 8F 23 8F 
257c0     24 8F 23 8F 
257c4     24 8F 37 8F 
257c8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
257cc     36 8F 36 8F 
257d0     48 8F 49 8F 
257d4     49 8F 49 8F 
257d8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
257dc     5B 8F 5C 8F 
257e0     5B 8F 6E 8F 
257e4     6E 8F 6E 8F 
257e8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
257ec     81 8F 81 8F 
257f0     81 8F 81 8F 
257f4     93 8F 93 8F 
257f8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
257fc     93 8F A6 8F 
25800     A6 8F A6 8F 
25804     A6 8F B9 8F 
25808     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2580c     B9 8F B9 8F 
25810     CC 8F CB 8F 
25814     CB 8F CC 8F 
25818     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2581c     DF 8F DE 8F 
25820     DE 8F F1 8F 
25824     F1 8F F1 8F 
25828     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2582c     03 90 04 90 
25830     04 90 04 90 
25834     16 90 17 90 
25838     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2583c     29 90 28 90 
25840     29 90 28 90 
25844     29 90 3C 90 
25848     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2584c     3C 90 4F 90 
25850     4E 90 4E 90 
25854     4E 90 4E 90 
25858     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2585c     61 90 61 90 
25860     73 90 74 90 
25864     74 90 74 90 
25868     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2586c     87 90 86 90 
25870     87 90 86 90 
25874     99 90 99 90 
25878     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2587c     AB 90 AB 90 
25880     AC 90 AB 90 
25884     AB 90 BF 90 
25888     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2588c     BE 90 D1 90 
25890     D0 90 D1 90 
25894     D1 90 D1 90 
25898     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2589c     E3 90 E4 90 
258a0     F6 90 F6 90 
258a4     F6 90 F6 90 
258a8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
258ac     09 91 0A 91 
258b0     0A 91 1C 91 
258b4     1C 91 1C 91 
258b8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
258bc     2F 91 2E 91 
258c0     2F 91 2F 91 
258c4     2E 91 41 91 
258c8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
258cc     41 91 53 91 
258d0     54 91 54 91 
258d4     53 91 54 91 
258d8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
258dc     67 91 67 91 
258e0     79 91 7A 91 
258e4     79 91 78 91 
258e8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
258ec     8C 91 8B 91 
258f0     8C 91 8C 91 
258f4     9E 91 9E 91 
258f8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
258fc     B1 91 B1 91 
25900     B2 91 B1 91 
25904     B1 91 C4 91 
25908     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2590c     C4 91 D6 91 
25910     D7 91 D7 91 
25914     D7 91 D6 91 
25918     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2591c     EA 91 EA 91 
25920     EA 91 FC 91 
25924     FC 91 FB 91 
25928     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2592c     0E 92 0F 92 
25930     0F 92 0E 92 
25934     21 92 21 92 
25938     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2593c     21 92 34 92 
25940     33 92 34 92 
25944     34 92 47 92 
25948     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2594c     46 92 47 92 
25950     59 92 59 92 
25954     59 92 59 92 
25958     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2595c     6C 92 6C 92 
25960     6B 92 7E 92 
25964     7E 92 7E 92 
25968     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2596c     92 92 91 92 
25970     91 92 90 92 
25974     91 92 A4 92 
25978     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2597c     A3 92 B6 92 
25980     B6 92 B7 92 
25984     B7 92 B6 92 
25988     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2598c     CA 92 C9 92 
25990     CA 92 DC 92 
25994     DC 92 DC 92 
25998     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2599c     EF 92 EF 92 
259a0     EF 92 EF 92 
259a4     01 93 01 93 
259a8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
259ac     15 93 14 93 
259b0     14 93 14 93 
259b4     14 93 27 93 
259b8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
259bc     27 93 39 93 
259c0     3A 93 39 93 
259c4     39 93 39 93 
259c8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
259cc     4B 93 4C 93 
259d0     5F 93 5F 93 
259d4     5F 93 5E 93 
259d8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
259dc     5F 93 84 93 
259e0     4C 93 96 93 
259e4     5F 93 AE 94 
259e8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
259ec     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
259f0     7A D7 00 80 
259f4     87 8A 48 8F 
259f8     EC 8C 76 8D 
259fc     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
25a00     3C 8D 82 8D 
25a04     42 8D 88 8D 
25a08     8C 8D 8E 8D 
25a0c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
25a10     97 8D DE 8D 
25a14     E1 8D F1 8E 
25a18     D8 8C A3 83 
25a1c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
25a20     65 71 C9 65 
25a24     FC 64 C4 65 
25a28     C1 65 BF 65 
25a2c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
25a30     B6 65 B4 65 
25a34     B2 65 AE 65 
25a38     AC 65 ED 65 
25a3c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
25a40     5E 65 25 66 
25a44     FA 62 23 6B 
25a48     B5 6C 61 0A 
25a4c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
25a50     5D 90 BE 8D 
25a54     47 8E C3 8D 
25a58     09 8E C9 8D 
25a5c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
25a60     15 8E 19 8E 
25a64     1B 8E 62 8E 
25a68     64 8E 68 8E 
25a6c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
25a70     B5 8E 4C 90 
25a74     FA 84 3C 9D 
25a78     98 13 79 6D 
25a7c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
25a80     D9 66 50 66 
25a84     D4 66 4B 66 
25a88     8C 66 46 66 
25a8c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
25a90     81 66 3A 66 
25a94     7C 66 36 66 
25a98     76 66 30 66 
25a9c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
25aa0     6B 66 88 72 
25aa4     BF 37 E7 B7 
25aa8     75 83 8B 8E 
25aac     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
25ab0     94 8E 96 8E 
25ab4     DD 8E 9C 8E 
25ab8     E2 8E A2 8E 
25abc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
25ac0     EE 8E AE 8E 
25ac4     38 8F B5 8E 
25ac8     3F 8F FD 8E 
25acc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
25ad0     A5 87 1E E3 
25ad4     6D 5D FA 71 
25ad8     41 64 25 67 
25adc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
25ae0     D9 66 1A 67 
25ae4     18 67 15 67 
25ae8     12 67 0F 67 
25aec     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
25af0     07 67 C0 66 
25af4     01 67 BC 66 
25af8     B8 66 DE 64 
25afc     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
25b00     43 E5 1F 8B 
25b04     14 8A F1 90 
25b08     1C 8F 63 8F 
25b0c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
25b10     29 8F 6E 8F 
25b14     72 8F 75 8F 
25b18     34 8F BE 8F 
25b1c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
25b20     84 8F 87 8F 
25b24     CC 8F 56 90 
25b28     67 91 49 80 
25b2c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
25b30     46 77 A6 66 
25b34     E8 66 B0 67 
25b38     AD 67 ED 67 
25b3c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
25b40     A2 67 E3 67 
25b44     9D 67 9A 67 
25b48     98 67 94 67 
25b4c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
25b50     49 67 CD 67 
25b54     28 65 5F 6E 
25b58     82 67 3A 01 
25b5c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
25b60     C2 91 A9 8F 
25b64     EF 8F AE 8F 
25b68     F4 8F B5 8F 
25b6c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
25b70     01 90 03 90 
25b74     07 90 09 90 
25b78     0C 90 53 90 
25b7c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
25b80     18 90 44 93 
25b84     85 84 D6 9D 
25b88     87 1F 2F 75 
25b8c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
25b90     C4 68 F6 67 
25b94     BE 68 F1 67 
25b98     76 68 2E 68 
25b9c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
25ba0     27 68 24 68 
25ba4     64 68 1E 68 
25ba8     5F 68 19 68 
25bac     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
25bb0     DC 68 56 72 
25bb4     7E 36 C2 B8 
25bb8     D7 84 73 90 
25bbc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
25bc0     7B 90 7F 90 
25bc4     82 90 84 90 
25bc8     CB 90 8B 90 
25bcc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
25bd0     D7 90 96 90 
25bd4     20 91 59 90 
25bd8     25 91 A2 90 
25bdc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
25be0     D0 89 40 EE 
25be4     12 64 C4 71 
25be8     29 66 0C 69 
25bec     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
25bf0     C0 68 02 69 
25bf4     FE 68 FB 68 
25bf8     F9 68 F6 68 
25bfc     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
25c00     EE 68 A8 68 
25c04     2C 69 5F 68 
25c08     E2 68 81 66 
25c0c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
25c10     1E EB A6 8A 
25c14     73 8B 5E 93 
25c18     7B 90 48 91 
25c1c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
25c20     0D 91 11 91 
25c24     14 91 16 91 
25c28     5C 91 1C 91 
25c2c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
25c30     68 91 AF 91 
25c34     2A 91 B5 91 
25c38     75 91 1A 94 
25c3c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
25c40     70 0E CB 6C 
25c44     5D 6E C4 67 
25c48     99 69 54 69 
25c4c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
25c50     D2 69 49 69 
25c54     89 69 86 69 
25c58     40 69 C4 69 
25c5c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
25c60     35 69 76 69 
25c64     58 67 EB 6D 
25c68     E9 6D 89 0F 
25c6c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
25c70     33 94 94 91 
25c74     D9 91 56 91 
25c78     E0 91 9F 91 
25c7c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
25c80     EC 91 EE 91 
25c84     F1 91 F4 91 
25c88     F7 91 3D 92 
25c8c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
25c90     46 92 21 94 
25c94     11 89 A4 9D 
25c98     FD 0E 8F 6C 
25c9c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
25ca0     28 6A E1 69 
25ca4     65 6A 1F 6A 
25ca8     5F 6A 1A 6A 
25cac     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
25cb0     54 6A 0F 6A 
25cb4     4F 6A 09 6A 
25cb8     06 6A 03 6A 
25cbc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
25cc0     23 68 69 77 
25cc4     3A 4D 38 CA 
25cc8     38 86 4E 91 
25ccc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
25cd0     64 92 24 92 
25cd4     6A 92 2A 92 
25cd8     70 92 30 92 
25cdc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
25ce0     7B 92 7E 92 
25ce4     C5 92 84 92 
25ce8     CB 92 8A 92 
25cec     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
25cf0     4D 8D F9 E2 
25cf4     97 59 FE 74 
25cf8     DB 68 6D 6A 
25cfc     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
25d00     A8 6A A5 6A 
25d04     A3 6A 9F 6A 
25d08     9D 6A 9B 6A 
25d0c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
25d10     D6 6A 8F 6A 
25d14     CF 6A 46 6A 
25d18     CA 6A E1 67 
25d1c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
25d20     D3 F7 15 92 
25d24     90 8C BF 94 
25d28     A6 92 EB 92 
25d2c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
25d30     B1 92 F7 92 
25d34     FA 92 FD 92 
25d38     00 93 02 93 
25d3c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
25d40     4F 93 52 93 
25d44     54 93 22 94 
25d48     5A 93 8F 88 
25d4c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
25d50     1C 77 07 6C 
25d54     E8 69 7A 6B 
25d58     34 6B 75 6B 
25d5c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
25d60     29 6B 26 6B 
25d64     24 6B 21 6B 
25d68     1D 6B 5E 6B 
25d6c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
25d70     12 6B 52 6B 
25d74     34 69 34 6E 
25d78     BA 73 A4 24 
25d7c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
25d80     7A 94 B3 93 
25d84     72 93 31 93 
25d88     78 93 7A 93 
25d8c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
25d90     83 93 86 93 
25d94     89 93 D0 93 
25d98     D2 93 D5 93 
25d9c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
25da0     DD 93 40 96 
25da4     30 8B 99 9C 
25da8     52 10 94 71 
25dac     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
25db0     46 6C 79 6B 
25db4     40 6C B7 6B 
25db8     F7 6B B1 6B 
25dbc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
25dc0     EC 6B A5 6B 
25dc4     A2 6B 9F 6B 
25dc8     9D 6B 9A 6B 
25dcc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
25dd0     C8 6A E4 76 
25dd4     20 4B F9 CE 
25dd8     2E 8A 1A 92 
25ddc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
25de0     FB 93 BA 93 
25de4     01 94 03 94 
25de8     4A 94 09 94 
25dec     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
25df0     55 94 14 94 
25df4     9E 94 1A 94 
25df8     61 94 20 94 
25dfc     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
25e00     3E 87 E5 CD 
25e04     5F 50 6C 78 
25e08     B5 6A 04 6C 
25e0c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
25e10     83 6C 7F 6C 
25e14     7C 6C 36 6C 
25e18     76 6C 74 6C 
25e1c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
25e20     6B 6C 25 6C 
25e24     66 6C 1F 6C 
25e28     1D 6C 41 6A 
25e2c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
25e30     BA FA FC 94 
25e34     5B 8D 97 96 
25e38     3B 94 C5 94 
25e3c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
25e40     89 94 8C 94 
25e44     8F 94 92 94 
25e48     94 94 DB 94 
25e4c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
25e50     E4 94 E7 94 
25e54     2D 95 74 95 
25e58     C8 96 15 89 
25e5c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
25e60     CB 75 31 6F 
25e64     7E 6B 10 6D 
25e68     C9 6C 0A 6D 
25e6c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
25e70     BD 6C FF 6C 
25e74     FB 6C F9 6C 
25e78     B2 6C F3 6C 
25e7c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
25e80     A7 6C E8 6C 
25e84     0D 6B 85 6F 
25e88     C7 74 10 28 
25e8c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
25e90     96 96 47 95 
25e94     06 95 0A 95 
25e98     0C 95 0F 95 
25e9c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
25ea0     17 95 5E 95 
25ea4     61 95 63 95 
25ea8     22 95 AC 95 
25eac     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
25eb0     72 95 17 98 
25eb4     59 8E 01 96 
25eb8     CF FC 5A 68 
25ebc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
25ec0     96 6D 50 6D 
25ec4     D5 6D 4A 6D 
25ec8     8C 6D 89 6D 
25ecc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
25ed0     80 6D 3A 6D 
25ed4     7A 6D 77 6D 
25ed8     75 6D 71 6D 
25edc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
25ee0     18 6C BC 78 
25ee4     9A 4F 7E CF 
25ee8     1F 89 F1 93 
25eec     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
25ef0     D2 95 4E 95 
25ef4     D7 95 53 95 
25ef8     DD 95 E0 95 
25efc     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
25f00     A5 95 EB 95 
25f04     EE 95 F0 95 
25f08     37 96 B3 95 
25f0c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
25f10     1A 98 D5 8D 
25f14     C5 9F CD 0F 
25f18     0F 71 F3 73 
25f1c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
25f20     D9 6D 5E 6E 
25f24     D3 6D 58 6E 
25f28     12 6E 0F 6E 
25f2c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
25f30     49 6E BF 6D 
25f34     87 6E 76 6D 
25f38     81 6E 11 6B 
25f3c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
25f40     3F 09 44 95 
25f44     E5 8D 3F 99 
25f48     D4 95 A2 96 
25f4c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
25f50     23 96 69 96 
25f54     6B 96 6E 96 
25f58     71 96 74 96 
25f5c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
25f60     BF 96 3C 96 
25f64     C6 96 C8 96 
25f68     A3 98 51 8D 
25f6c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
25f70     CF 75 29 73 
25f74     90 6C EC 6E 
25f78     62 6E E7 6E 
25f7c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
25f80     9A 6E 98 6E 
25f84     95 6E 91 6E 
25f88     8E 6E CF 6E 
25f8c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
25f90     40 6E C3 6E 
25f94     E8 6C 45 6F 
25f98     A5 7B C9 35 
25f9c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
25fa0     2D 98 23 97 
25fa4     E1 96 A0 96 
25fa8     A4 96 EA 96 
25fac     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
25fb0     AF 96 F4 96 
25fb4     F8 96 3E 97 
25fb8     FD 96 43 97 
25fbc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
25fc0     08 97 6B 99 
25fc4     D6 92 88 91 
25fc8     D8 EE 84 66 
25fcc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
25fd0     2E 6F E7 6E 
25fd4     6C 6F 24 6F 
25fd8     21 6F 1F 6F 
25fdc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
25fe0     17 6F 13 6F 
25fe4     54 6F 0E 6F 
25fe8     0B 6F 4B 6F 
25fec     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
25ff0     27 6D 1C 7B 
25ff4     19 59 9F DB 
25ff8     66 8E BC 94 
25ffc     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
26000     67 97 26 97 
26004     6D 97 2B 97 
26008     72 97 32 97 
2600c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
26010     C1 97 7F 97 
26014     C6 97 85 97 
26018     CB 97 CE 97 
2601c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
26020     EC 8A C4 C6 
26024     68 4C F4 7D 
26028     63 6E E8 6E 
2602c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
26030     ED 6F A7 6F 
26034     E7 6F A0 6F 
26038     E1 6F 9B 6F 
2603c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
26040     D5 6F 8F 6F 
26044     CE 6F 45 6F 
26048     86 6F 68 6D 
2604c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
26050     C0 13 AD A2 
26054     A7 8E 79 99 
26058     E6 97 E8 97 
2605c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
26060     F1 97 F3 97 
26064     F6 97 F9 97 
26068     FB 97 FE 97 
2606c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
26070     4A 98 0A 98 
26074     93 98 0F 98 
26078     7F 9B BF 8C 
2607c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
26080     91 7B 62 73 
26084     1A 6E B9 70 
26088     EB 6F B3 70 
2608c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
26090     25 70 20 70 
26094     1E 70 1B 70 
26098     18 70 15 70 
2609c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
260a0     0D 70 09 70 
260a4     07 70 03 70 
260a8     01 70 FD 6F 
260ac     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
260b0     F6 6F F2 6F 
260b4     EF 6F EC 6F 
260b8     2C 70 E6 6F 
260bc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
260c0     DD 6F 97 6F 
260c4     D7 6F 84 6E 
260c8     8F 6F 3F 7D 
260cc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
260ce     01 00 00 00 
260d2     00 00 00 00 
260d6     00 00 00 00 
260da     00 00 00 00 | mouse  file "mouse.def"
260de     00 00 00 00 
260e2     00 00 00 00 
260e6     00 00 00 00 
260ea     00 00 00 00 | 	byte	$00[16]
260ee     01 01 00 00 
260f2     00 00 00 00 
260f6     00 00 00 00 
260fa     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
260fe     00 00 00 00 
26102     00 00 00 00 
26106     00 00 00 00 
2610a     00 00 00 00 | 	byte	$00[16]
2610e     01 0D 01 00 
26112     00 00 00 00 
26116     00 00 00 00 
2611a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2611e     00 00 00 00 
26122     00 00 00 00 
26126     00 00 00 00 
2612a     00 00 00 00 | 	byte	$00[16]
2612e     01 0D 0D 01 
26132     00 00 00 00 
26136     00 00 00 00 
2613a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2613e     00 00 00 00 
26142     00 00 00 00 
26146     00 00 00 00 
2614a     00 00 00 00 | 	byte	$00[16]
2614e     01 0D 0D 0D 
26152     01 00 00 00 
26156     00 00 00 00 
2615a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2615e     00 00 00 00 
26162     00 00 00 00 
26166     00 00 00 00 
2616a     00 00 00 00 | 	byte	$00[16]
2616e     01 0D 0D 0D 
26172     0D 01 00 00 
26176     00 00 00 00 
2617a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2617e     00 00 00 00 
26182     00 00 00 00 
26186     00 00 00 00 
2618a     00 00 00 00 | 	byte	$00[16]
2618e     01 0D 0D 0D 
26192     0D 0D 01 00 
26196     00 00 00 00 
2619a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2619e     00 00 00 00 
261a2     00 00 00 00 
261a6     00 00 00 00 
261aa     00 00 00 00 | 	byte	$00[16]
261ae     01 0D 0D 0D 
261b2     0D 0D 0D 01 
261b6     00 00 00 00 
261ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
261be     00 00 00 00 
261c2     00 00 00 00 
261c6     00 00 00 00 
261ca     00 00 00 00 | 	byte	$00[16]
261ce     01 0D 0D 0D 
261d2     0D 0D 0D 0C 
261d6     01 00 00 00 
261da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
261de     00 00 00 00 
261e2     00 00 00 00 
261e6     00 00 00 00 
261ea     00 00 00 00 | 	byte	$00[16]
261ee     01 0D 0D 0D 
261f2     0D 0D 0D 0D 
261f6     0C 01 00 00 
261fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
261fe     00 00 00 00 
26202     00 00 00 00 
26206     00 00 00 00 
2620a     00 00 00 00 | 	byte	$00[16]
2620e     01 0D 0D 0D 
26212     0D 0D 0D 0D 
26216     0D 0C 01 00 
2621a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2621e     00 00 00 00 
26222     00 00 00 00 
26226     00 00 00 00 
2622a     00 00 00 00 | 	byte	$00[16]
2622e     01 0D 0D 0D 
26232     0D 0D 0D 0D 
26236     0D 0D 0B 01 
2623a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2623e     00 00 00 00 
26242     00 00 00 00 
26246     00 00 00 00 
2624a     00 00 00 00 | 	byte	$00[16]
2624e     01 0D 0D 0D 
26252     0C 0D 0D 03 
26256     01 01 01 01 
2625a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2625e     00 00 00 00 
26262     00 00 00 00 
26266     00 00 00 00 
2626a     00 00 00 00 | 	byte	$00[16]
2626e     01 0D 0D 0C 
26272     01 09 0D 03 
26276     00 00 00 00 
2627a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2627e     00 00 00 00 
26282     00 00 00 00 
26286     00 00 00 00 
2628a     00 00 00 00 | 	byte	$00[16]
2628e     01 0D 0C 00 
26292     00 01 0D 0B 
26296     01 00 00 00 
2629a     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2629e     00 00 00 00 
262a2     00 00 00 00 
262a6     00 00 00 00 
262aa     00 00 00 00 | 	byte	$00[16]
262ae     01 0C 00 00 
262b2     00 01 0A 0D 
262b6     01 00 00 00 
262ba     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
262be     00 00 00 00 
262c2     00 00 00 00 
262c6     00 00 00 00 
262ca     00 00 00 00 | 	byte	$00[16]
262ce     01 00 00 00 
262d2     00 00 01 0D 
262d6     0B 01 00 00 
262da     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
262de     00 00 00 00 
262e2     00 00 00 00 
262e6     00 00 00 00 
262ea     00 00 00 00 
262ee     00 00 00 00 
262f2     00 00       | 	byte	$00[22]
262f4     01 0B 0D 01 
262f8     00 00 00 00 
262fc     00 00 00 00 
26300     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26304     00 00 00 00 
26308     00 00 00 00 
2630c     00 00 00 00 
26310     00 00 00 00 
26314     00          | 	byte	$00[17]
26315     01 00 00 00 
26319     00 00 00 00 
2631d     00 00 00 00 
26321     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26325     00 00 00 00 
      ...             
264c9     00 00 00 00 
264cd     00          | 	byte	$00[425]
264ce                 | 
264ce     00 00       |              	org
264d0 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
264d4 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
264d8 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
264dc 003             | 
264dc 003 00 30 04 F6 |                 mov     psramaddr,#0
264e0 004             | 
264e0 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
264e4 005 20 00 00 FF 
264e8 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
264ec 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
264f0 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
264f4 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
264f8 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
264fc 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
26500 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
26504 00d             | 
26504 00d 20 00 00 FF 
26508 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2650c 00f E0 03 00 FF 
26510 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
26514 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
26518 012             | 
26518 012             |                 
26518 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2651c 013             |     
2651c 013 01 2C 60 FD |                 cogid 	t11				' get id
26520 014 00 00 EC FC |                 coginit #0,#0				' start the new program
26524 015 03 2C 60 FD |                 cogstop t11				' stop the loader
26528 016             | 
26528 016 00 00 00 00 | t11 		long 	0
2652c 017 00 FF 07 00 | mailbox 	long 	$7FF00
26530 018 00 00 00 00 | psramaddr 	long 	0
26534 019 00 00 00 00 | pslockval	long 	0
26538 01a 00 00 00 00 | cmd             long    0
2653c 01b 00 00 00 00 | buf1            long    0
26540 01c 00 40 00 00 | buf2            long    16384
26544 01d 48 65 02 00 | 	long	@@@_dat_ + 5100
26548 01e 50 32 20 52 
2654c 01f 65 74 72 6F 
26550 020 6D 61 63 68 
26554 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
26558 022 42 41 53 49 
2655c 023 43 20 76 65 
26560 024 72 73 69 6F 
26564 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
26568 026 32 30 00 00 | 	byte	$32, $30, $00, $00
2656c 027             | 	alignl
2656c 027             | _hg010b_spin2_dat_
2656c 027             | 
2656c 027 00 00 00 00 
26570 028 00 00 00 00 
26574 029 00 00 00 00 
26578 02a 00 00 00 00 
2657c 02b 00 00 00    | vga_font       file "vgafont.def"
2657f 02b 7E 81 A5 81 
26583 02c 81 BD 99 81 
26587 02d 81 7E 00 00 
2658b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2658f 02f 7E FF DB FF 
26593 030 FF C3 E7 FF 
26597 031 FF 7E 00 00 
2659b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2659f 033 00 36 7F 7F 
265a3 034 7F 7F 3E 1C 
265a7 035 08 00 00 00 
265ab 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
265af 037 00 08 1C 3E 
265b3 038 7F 3E 1C 08 
265b7 039 00 00 00 00 
265bb 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
265bf 03b 18 3C 3C E7 
265c3 03c E7 E7 18 18 
265c7 03d 3C 00 00 00 
265cb 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
265cf 03f 18 3C 7E FF 
265d3 040 FF 7E 18 18 
265d7 041 3C 00 00 00 
265db 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
265df 043 00 00 00 18 
265e3 044 3C 3C 18 00 
265e7 045 00 00 00 00 
265eb 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
265ef 047 FF FF FF E7 
265f3 048 C3 C3 E7 FF 
265f7 049 FF FF FF FF 
265fb 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
265ff 04b 00 00 3C 66 
26603 04c 42 42 66 3C 
26607 04d 00 00 00 00 
2660b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2660f 04f FF FF C3 99 
26613 050 BD BD 99 C3 
26617 051 FF FF FF FF 
2661b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2661f 053 78 70 58 4C 
26623 054 1E 33 33 33 
26627 055 33 1E 00 00 
2662b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2662f 057 3C 66 66 66 
26633 058 66 3C 18 7E 
26637 059 18 18 00 00 
2663b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2663f 05b FC CC FC 0C 
26643 05c 0C 0C 0C 0E 
26647 05d 0F 07 00 00 
2664b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2664f 05f FE C6 FE C6 
26653 060 C6 C6 C6 E6 
26657 061 E7 67 03 00 
2665b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2665f 063 18 18 DB 3C 
26663 064 E7 3C DB 18 
26667 065 18 00 00 00 
2666b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2666f 067 03 07 0F 1F 
26673 068 7F 1F 0F 07 
26677 069 03 01 00 00 
2667b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2667f 06b 60 70 78 7C 
26683 06c 7F 7C 78 70 
26687 06d 60 40 00 00 
2668b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2668f 06f 18 3C 7E 18 
26693 070 18 18 7E 3C 
26697 071 18 00 00 00 
2669b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2669f 073 66 66 66 66 
266a3 074 66 66 66    | 	byte	$66[7]
266a6 075 00 66 66 00 
266aa 076 00 00 00 00 
266ae 077 00 FE DB DB 
266b2 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
266b6 079 D8 D8 D8 00 
266ba 07a 00 00 00 3E 
266be 07b 63 06 1C 36 
266c2 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
266c6 07d 30 63 3E 00 
266ca 07e 00 00 00 00 
266ce 07f 00 00 00 00 
266d2 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
266d6 081 7F 7F 7F 00 
266da 082 00 00 00 00 
266de 083 00 18 3C 7E 
266e2 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
266e6 085 3C 18 7E 00 
266ea 086 00 00 00 00 
266ee 087 00 18 3C 7E 
266f2 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
266f6 089 18 18 18 00 
266fa 08a 00 00 00 00 
266fe 08b 00 18 18 18 
26702 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26706 08d 7E 3C 18 00 
2670a 08e 00 00 00 00 
2670e 08f 00 00 00 18 
26712 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
26716 091 00 00 00 00 
2671a 092 00 00 00 00 
2671e 093 00 00 00    | 	byte	$00[11]
26721 094 0C 06 7F 06 
26725 095 0C 00 00 00 
26729 096 00 00 00 00 
2672d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26731 098 00 03 03 03 
26735 099 7F 00 00 00 
26739 09a 00 00 00 00 
2673d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26741 09c 14 36 7F 36 
26745 09d 14 00 00 00 
26749 09e 00 00 00 00 
2674d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
26751 0a0 1C 1C 3E 3E 
26755 0a1 7F 7F 00 00 
26759 0a2 00 00 00 00 
2675d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
26761 0a4 7F 3E 3E 1C 
26765 0a5 1C 08 00 00 
26769 0a6 00 00 00 00 
2676d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26771 0a8 00 00 00 00 
26775 0a9 00 00 00 00 
26779 0aa 00 00 00 00 
2677d 0ab 00 00       | 	byte	$00[14]
2677f 0ab 18 3C 3C 3C 
26783 0ac 18 18 18 00 
26787 0ad 18 18 00 00 
2678b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2678f 0af 66 24 00 00 
26793 0b0 00 00 00 00 
26797 0b1 00 00 00 00 
2679b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2679f 0b3 00 36 36 7F 
267a3 0b4 36 36 36 7F 
267a7 0b5 36 36 00 00 
267ab 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
267af 0b7 3E 63 43 03 
267b3 0b8 3E 60 60 61 
267b7 0b9 63 3E 18 18 
267bb 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
267bf 0bb 00 00 43 63 
267c3 0bc 30 18 0C 06 
267c7 0bd 63 61 00 00 
267cb 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
267cf 0bf 1C 36 36 1C 
267d3 0c0 6E 3B 33 33 
267d7 0c1 33 6E 00 00 
267db 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
267df 0c3 0C 0C 0C 06 
267e3 0c4 00 00 00 00 
267e7 0c5 00 00 00 00 
267eb 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
267ef 0c7 30 18 0C 0C 
267f3 0c8 0C 0C 0C 0C 
267f7 0c9 18 30 00 00 
267fb 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
267ff 0cb 0C 18 30 30 
26803 0cc 30 30 30 30 
26807 0cd 18 0C 00 00 
2680b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2680f 0cf 00 00 00 66 
26813 0d0 3C FF 3C 66 
26817 0d1 00 00 00 00 
2681b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2681f 0d3 00 00 00 18 
26823 0d4 18 7E 18 18 
26827 0d5 00 00 00 00 
2682b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2682f 0d7 00 00 00 00 
26833 0d8 00 00 00 00 | 	byte	$00[8]
26837 0d9 18 18 18 0C 
2683b 0da 00 00 00 00 
2683f 0db 00 00 00 00 
26843 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
26847 0dd 00 00 00 00 
2684b 0de 00 00 00 00 
2684f 0df 00 00 00 00 
26853 0e0 00 00 00 00 | 	byte	$00[16]
26857 0e1 18 18 00 00 
2685b 0e2 00 00 00 00 
2685f 0e3 00 00 40 60 
26863 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
26867 0e5 03 01 00 00 
2686b 0e6 00 00 00 00 
2686f 0e7 1C 36 63 63 
26873 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
26877 0e9 36 1C 00 00 
2687b 0ea 00 00 00 00 
2687f 0eb 18 1C 1E 18 
26883 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
26887 0ed 18 7E 00 00 
2688b 0ee 00 00 00 00 
2688f 0ef 3E 63 60 30 
26893 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
26897 0f1 63 7F 00 00 
2689b 0f2 00 00 00 00 
2689f 0f3 3E 63 60 60 
268a3 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
268a7 0f5 63 3E 00 00 
268ab 0f6 00 00 00 00 
268af 0f7 30 38 3C 36 
268b3 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
268b7 0f9 30 78 00 00 
268bb 0fa 00 00 00 00 
268bf 0fb 7F 03 03 03 
268c3 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
268c7 0fd 63 3E 00 00 
268cb 0fe 00 00 00 00 
268cf 0ff 1C 06 03 03 
268d3 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
268d7 101 63 3E 00 00 
268db 102 00 00 00 00 
268df 103 7F 63 60 60 
268e3 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
268e7 105 0C 0C 00 00 
268eb 106 00 00 00 00 
268ef 107 3E 63 63 63 
268f3 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
268f7 109 63 3E 00 00 
268fb 10a 00 00 00 00 
268ff 10b 3E 63 63 63 
26903 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
26907 10d 30 1E 00 00 
2690b 10e 00 00 00 00 
2690f 10f 00 00 00 18 
26913 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26917 111 18 18 00 00 
2691b 112 00 00 00 00 
2691f 113 00 00 00 18 
26923 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26927 115 18 18 0C 00 
2692b 116 00 00 00 00 
2692f 117 00 60 30 18 
26933 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
26937 119 30 60 00 00 
2693b 11a 00 00 00 00 
2693f 11b 00 00 00 7E 
26943 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
26947 11d 00 00 00 00 
2694b 11e 00 00 00 00 
2694f 11f 00          | 	byte	$00[9]
26950 120 06 0C 18 30 
26954 121 60 30 18 0C 
26958 122 06 00 00 00 
2695c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
26960 124 63 63 30 18 
26964 125 18 18 00 18 
26968 126 18 00 00 00 
2696c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
26970 128 3E 63 63 7B 
26974 129 7B 7B 3B 03 
26978 12a 3E 00 00 00 
2697c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
26980 12c 1C 36 63 63 
26984 12d 7F 63 63 63 
26988 12e 63 00 00 00 
2698c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
26990 130 66 66 66 3E 
26994 131 66 66 66 66 
26998 132 3F 00 00 00 
2699c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
269a0 134 66 43 03 03 
269a4 135 03 03 43 66 
269a8 136 3C 00 00 00 
269ac 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
269b0 138 36 66 66 66 
269b4 139 66 66 66 36 
269b8 13a 1F 00 00 00 
269bc 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
269c0 13c 66 46 16 1E 
269c4 13d 16 06 46 66 
269c8 13e 7F 00 00 00 
269cc 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
269d0 140 66 46 16 1E 
269d4 141 16 06 06 06 
269d8 142 0F 00 00 00 
269dc 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
269e0 144 66 43 03 03 
269e4 145 7B 63 63 66 
269e8 146 5C 00 00 00 
269ec 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
269f0 148 63 63 63 7F 
269f4 149 63 63 63 63 
269f8 14a 63 00 00 00 
269fc 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
26a00 14c 18 18 18 18 
26a04 14d 18 18 18 18 | 	byte	$18[8]
26a08 14e 3C 00 00 00 
26a0c 14f 00 00 00 78 
26a10 150 30 30 30 30 
26a14 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
26a18 152 1E 00 00 00 
26a1c 153 00 00 00 67 
26a20 154 66 66 36 1E 
26a24 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
26a28 156 67 00 00 00 
26a2c 157 00 00 00 0F 
26a30 158 06 06 06 06 
26a34 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
26a38 15a 7F 00 00 00 
26a3c 15b 00 00 00 63 
26a40 15c 77 7F 7F 6B 
26a44 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
26a48 15e 63 00 00 00 
26a4c 15f 00 00 00 63 
26a50 160 67 6F 7F 7B 
26a54 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
26a58 162 63 00 00 00 
26a5c 163 00 00 00 3E 
26a60 164 63 63 63 63 
26a64 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26a68 166 3E 00 00 00 
26a6c 167 00 00 00 3F 
26a70 168 66 66 66 3E 
26a74 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
26a78 16a 0F 00 00 00 
26a7c 16b 00 00 00 3E 
26a80 16c 63 63 63 63 
26a84 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
26a88 16e 3E 30 70 00 
26a8c 16f 00 00 00 3F 
26a90 170 66 66 66 3E 
26a94 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
26a98 172 67 00 00 00 
26a9c 173 00 00 00 3E 
26aa0 174 63 63 06 1C 
26aa4 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
26aa8 176 3E 00 00 00 
26aac 177 00 00 00 7E 
26ab0 178 7E 5A 18 18 
26ab4 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
26ab8 17a 3C 00 00 00 
26abc 17b 00 00 00 63 
26ac0 17c 63 63 63 63 
26ac4 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
26ac8 17e 3E 00 00 00 
26acc 17f 00 00 00 63 
26ad0 180 63 63 63 63 
26ad4 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
26ad8 182 08 00 00 00 
26adc 183 00 00 00 63 
26ae0 184 63 63 63 6B 
26ae4 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
26ae8 186 36 00 00 00 
26aec 187 00 00 00 63 
26af0 188 63 36 3E 1C 
26af4 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
26af8 18a 63 00 00 00 
26afc 18b 00 00 00 66 
26b00 18c 66 66 66 3C 
26b04 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
26b08 18e 3C 00 00 00 
26b0c 18f 00 00 00 7F 
26b10 190 63 61 30 18 
26b14 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
26b18 192 7F 00 00 00 
26b1c 193 00 00 00 3C 
26b20 194 0C 0C 0C 0C 
26b24 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
26b28 196 3C 00 00 00 
26b2c 197 00 00 00 00 
26b30 198 01 03 07 0E 
26b34 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
26b38 19a 40 00 00 00 
26b3c 19b 00 00 00 3C 
26b40 19c 30 30 30 30 
26b44 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
26b48 19e 3C 00 00 00 
26b4c 19f 1C 36 00 00 
26b50 1a0 00 00 00 00 
26b54 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b58 1a2 00 00 00 00 
26b5c 1a3 00 00 00 00 
26b60 1a4 00 00 00 00 
26b64 1a5 00 00 00 00 
26b68 1a6 00          | 	byte	$00[17]
26b69 1a6 FF 00 00 0C 
26b6d 1a7 18 00 00 00 
26b71 1a8 00 00 00 00 
26b75 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b79 1aa 00 00 00 00 
26b7d 1ab 00 00 00 00 
26b81 1ac 00          | 	byte	$00[9]
26b82 1ac 1E 30 3E 33 
26b86 1ad 33 33 6E 00 
26b8a 1ae 00 00 00 00 
26b8e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
26b92 1b0 1E 36 66 66 
26b96 1b1 66 66 3E 00 
26b9a 1b2 00 00 00 00 
26b9e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26ba2 1b4 3E 63 03 03 
26ba6 1b5 03 63 3E 00 
26baa 1b6 00 00 00 00 
26bae 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
26bb2 1b8 3C 36 33 33 
26bb6 1b9 33 33 6E 00 
26bba 1ba 00 00 00 00 
26bbe 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26bc2 1bc 3E 63 7F 03 
26bc6 1bd 03 63 3E 00 
26bca 1be 00 00 00 00 
26bce 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
26bd2 1c0 0C 1E 0C 0C 
26bd6 1c1 0C 0C 1E 00 
26bda 1c2 00 00 00 00 
26bde 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26be2 1c4 6E 33 33 33 
26be6 1c5 33 33 3E 30 
26bea 1c6 33 1E 00 00 
26bee 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
26bf2 1c8 36 6E 66 66 
26bf6 1c9 66 66 67 00 
26bfa 1ca 00 00 00 00 
26bfe 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
26c02 1cc 1C 18 18 18 
26c06 1cd 18 18 3C 00 
26c0a 1ce 00 00 00 00 
26c0e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
26c12 1d0 70 60 60 60 
26c16 1d1 60 60 60 66 
26c1a 1d2 66 3C 00 00 
26c1e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
26c22 1d4 66 36 1E 1E 
26c26 1d5 36 66 67 00 
26c2a 1d6 00 00 00 00 
26c2e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
26c32 1d8 18 18 18 18 
26c36 1d9 18 18       | 	byte	$18[6]
26c38 1da 3C 00 00 00 
26c3c 1db 00 00 00 00 
26c40 1dc 00 00 37 7F 
26c44 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
26c48 1de 63 00 00 00 
26c4c 1df 00 00 00 00 
26c50 1e0 00 00 3B 66 
26c54 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26c58 1e2 66 00 00 00 
26c5c 1e3 00 00 00 00 
26c60 1e4 00 00 3E 63 
26c64 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
26c68 1e6 3E 00 00 00 
26c6c 1e7 00 00 00 00 
26c70 1e8 00 00 3B 66 
26c74 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26c78 1ea 3E 06 06 0F 
26c7c 1eb 00 00 00 00 
26c80 1ec 00 00 6E 33 
26c84 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
26c88 1ee 3E 30 30 78 
26c8c 1ef 00 00 00 00 
26c90 1f0 00 00 3B 6E 
26c94 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
26c98 1f2 0F 00 00 00 
26c9c 1f3 00 00 00 00 
26ca0 1f4 00 00 3E 63 
26ca4 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
26ca8 1f6 3E 00 00 00 
26cac 1f7 00 00 00 08 
26cb0 1f8 0C 0C 3F 0C 
26cb4 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
26cb8 1fa 38 00 00 00 
26cbc 1fb 00 00 00 00 
26cc0 1fc 00 00 33 33 
26cc4 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
26cc8 1fe 6E 00 00 00 
26ccc 1ff 00 00 00 00 
26cd0 200 00 00 63 63 
26cd4 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
26cd8 202 1C 00 00 00 
26cdc 203 00 00 00 00 
26ce0 204 00 00 63 63 
26ce4 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
26ce8 206 36 00 00 00 
26cec 207 00 00 00 00 
26cf0 208 00 00 63 36 
26cf4 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
26cf8 20a 63 00 00 00 
26cfc 20b 00 00 00 00 
26d00 20c 00 00 63 63 
26d04 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
26d08 20e 7E 60 30 1F 
26d0c 20f 00 00 00 00 
26d10 210 00 00 7F 33 
26d14 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
26d18 212 7F 00 00 00 
26d1c 213 00 00 00 70 
26d20 214 18 18 18 0E 
26d24 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
26d28 216 70 00 00 00 
26d2c 217 00 00 00 18 
26d30 218 18 18 18 18 
26d34 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
26d38 21a 18 00 00 00 
26d3c 21b 00 00 00 0E 
26d40 21c 18 18 18 70 
26d44 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
26d48 21e 0E 00 00 00 
26d4c 21f 6E 3B 00 00 
26d50 220 00 00 00 00 
26d54 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26d58 222 00 00 00 00 
26d5c 223 00 00 00 00 
26d60 224 00 00       | 	byte	$00[10]
26d62 224 08 1C 36 63 
26d66 225 63 63 7F 00 
26d6a 226 00 00 00 00 
26d6e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
26d72 228 03 03 03 03 
26d76 229 43 66 3C 18 
26d7a 22a 30 1E 00 00 
26d7e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
26d82 22c 33 33 33 33 
26d86 22d 33 33       | 	byte	$33[6]
26d88 22e 6E 00 00 00 
26d8c 22f 00 00 60 30 
26d90 230 18 00 3E 63 
26d94 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
26d98 232 3E 00 00 00 
26d9c 233 00 00 08 1C 
26da0 234 36 00 1E 30 
26da4 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
26da8 236 6E 00 00 00 
26dac 237 00 00 00 00 
26db0 238 33 00 1E 30 
26db4 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
26db8 23a 6E 00 00 00 
26dbc 23b 00 00 1C 36 
26dc0 23c 1C 00 33 33 
26dc4 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
26dc8 23e 6E 00 00 00 
26dcc 23f 00 00 60 30 
26dd0 240 18 00 3E 63 
26dd4 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
26dd8 242 3E 00 00 00 
26ddc 243 00 00 00 00 
26de0 244 00 00 3E 63 
26de4 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
26de8 246 3E 18 30 1E 
26dec 247 00 00 00 1C 
26df0 248 58 78 38 18 
26df4 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
26df8 24a 3C 00 00 00 
26dfc 24b 00 00 00 00 
26e00 24c 63 00 3E 63 
26e04 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
26e08 24e 3E 00 00 00 
26e0c 24f 66 33 00 3E 
26e10 250 63 63 63 63 
26e14 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26e18 252 3E 00 00 00 
26e1c 253 00 00 CC 66 
26e20 254 33 00 3E 63 
26e24 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
26e28 256 3E 00 00 00 
26e2c 257 00 00 18 3C 
26e30 258 66 00 1C 18 
26e34 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
26e38 25a 3C 00 00 00 
26e3c 25b 30 18 00 7F 
26e40 25c 63 61 30 18 
26e44 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
26e48 25e 7F 00 00 00 
26e4c 25f 00 63 00 08 
26e50 260 1C 36 63 63 
26e54 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
26e58 262 63 00 00 00 
26e5c 263 30 18 00 3C 
26e60 264 66 43 03 03 
26e64 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
26e68 266 3C 00 00 00 
26e6c 267 30 18 00 7F 
26e70 268 66 46 16 1E 
26e74 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
26e78 26a 7F 00 00 00 
26e7c 26b 0C 06 00 0F 
26e80 26c 06 06 06 06 
26e84 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
26e88 26e 7F 00 00 00 
26e8c 26f 30 18 00 1C 
26e90 270 18 18 18 18 
26e94 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
26e98 272 3C 00 00 00 
26e9c 273 00 00 08 1C 
26ea0 274 36 00 3E 63 
26ea4 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
26ea8 276 3E 00 00 00 
26eac 277 00 00 00 00 
26eb0 278 63 00 3E 63 
26eb4 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
26eb8 27a 3E 00 00 00 
26ebc 27b 00 00 00 6F 
26ec0 27c 46 26 06 06 
26ec4 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
26ec8 27e 7F 00 00 00 
26ecc 27f 00 00 00 6E 
26ed0 280 4C 2C 0C 0C 
26ed4 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
26ed8 282 1E 00 00 00 
26edc 283 30 18 00 3E 
26ee0 284 63 63 06 1C 
26ee4 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
26ee8 286 3E 00 00 00 
26eec 287 00 00 60 30 
26ef0 288 18 00 3E 63 
26ef4 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
26ef8 28a 3E 00 00 00 
26efc 28b 00 63 00 3E 
26f00 28c 63 63 63 63 
26f04 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26f08 28e 3E 00 00 00 
26f0c 28f 00 63 00 63 
26f10 290 63 63 63 63 
26f14 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
26f18 292 3E 00 00 00 
26f1c 293 6C 38 00 7E 
26f20 294 7E 5A 18 18 
26f24 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
26f28 296 3C 00 00 00 
26f2c 297 00 00 60 48 
26f30 298 2C 0C 3F 0C 
26f34 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
26f38 29a 38 00 00 00 
26f3c 29b 00 00 00 0F 
26f40 29c 26 36 1E 0E 
26f44 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
26f48 29e 7F 00 00 00 
26f4c 29f 00 00 00 00 
26f50 2a0 00 63 36 1C 
26f54 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
26f58 2a2 00 00 00 00 
26f5c 2a3 00 00       | 	byte	$00[6]
26f5e 2a3 36 1C 08 00 
26f62 2a4 3E 63 03 03 
26f66 2a5 03 63 3E 00 
26f6a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
26f6e 2a7 30 18 0C 00 
26f72 2a8 1E 30 3E 33 
26f76 2a9 33 33 6E 00 
26f7a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
26f7e 2ab 60 30 18 00 
26f82 2ac 1C 18 18 18 
26f86 2ad 18 18 3C 00 
26f8a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
26f8e 2af 60 30 18 00 
26f92 2b0 3E 63 63 63 
26f96 2b1 63 63 3E 00 
26f9a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
26f9e 2b3 30 18 0C 00 
26fa2 2b4 33 33 33 33 
26fa6 2b5 33 33 6E 00 
26faa 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
26fae 2b7 00 08 1C 36 
26fb2 2b8 63 63 7F 63 
26fb6 2b9 63 63 63 18 
26fba 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
26fbe 2bb 00 00 00 00 
26fc2 2bc 1E 30 3E 33 
26fc6 2bd 33 33 6E 18 
26fca 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
26fce 2bf 00 7F 63 61 
26fd2 2c0 30 18 0C 06 
26fd6 2c1 43 63 7F 00 
26fda 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
26fde 2c3 36 1C 08 00 
26fe2 2c4 7F 33 18 0C 
26fe6 2c5 06 63 7F 00 
26fea 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
26fee 2c7 00 7F 66 46 
26ff2 2c8 16 1E 16 06 
26ff6 2c9 46 66 7F 18 
26ffa 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
26ffe 2cb 00 00 00 00 
27002 2cc 3E 63 7F 03 
27006 2cd 03 63 3E 18 
2700a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2700e 2cf 00 3C 66 03 
27012 2d0 1F 03 0F 03 
27016 2d1 03 66 3C 00 
2701a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2701e 2d3 60 30 18 00 
27022 2d4 7F 33 18 0C 
27026 2d5 06 63 7F 00 
2702a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2702e 2d7 00 3C 66 43 
27032 2d8 03 03 03 03 
27036 2d9 43 66 3C 00 
2703a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2703e 2db 00 00 00 00 
27042 2dc 3E 63 06 1C 
27046 2dd 30 63 3E 18 
2704a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2704e 2df 00 00 00 00 
27052 2e0 00 00       | 	byte	$00[6]
27054 2e1 6C 36 1B 36 
27058 2e2 6C 00 00 00 
2705c 2e3 00 00 00 00 
27060 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27064 2e5 1B 36 6C 36 
27068 2e6 1B 00 00 00 
2706c 2e7 88 22 88 22 
27070 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
27074 2e9 88 22 88 22 
27078 2ea 88 22 88 22 
2707c 2eb AA 55 AA 55 
27080 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
27084 2ed AA 55 AA 55 
27088 2ee AA 55 AA 55 
2708c 2ef BB EE BB EE 
27090 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
27094 2f1 BB EE BB EE 
27098 2f2 BB EE BB EE 
2709c 2f3 18 18 18 18 
270a0 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
270a4 2f5 18 18 18 18 
270a8 2f6 18 18 18 18 
270ac 2f7 18 18 18 18 
270b0 2f8 18 18 18    | 	byte	$18[15]
270b3 2f8 1F 18 18 18 
270b7 2f9 18 18 18 18 
270bb 2fa 18 30 18 00 
270bf 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
270c3 2fc 63 7F 63 63 
270c7 2fd 63 63 00 00 
270cb 2fe 00 1C 36 00 
270cf 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
270d3 300 63 7F 63 63 
270d7 301 63 63 00 00 
270db 302 00 36 1C 00 
270df 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
270e3 304 1E 16 06 46 
270e7 305 66 7F 00 00 
270eb 306 00 00 00 00 
270ef 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
270f3 308 1C 30 60 63 
270f7 309 63 3E 18 30 
270fb 30a 1E 6C 6C 6C 
270ff 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
27103 30c 6F 6C 6C 6C 
27107 30d 6C 6C 6C 6C 
2710b 30e 6C 6C 6C 6C 
2710f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27113 310 6C 6C 6C 6C 
27117 311 6C 6C 6C 6C 
2711b 312 6C          | 	byte	$6c[9]
2711c 313 00 00 00 00 
27120 314 00          | 	byte	$00[5]
27121 314 7F 60 6F 6C 
27125 315 6C 6C 6C 6C 
27129 316 6C 6C 6C 6C 
2712d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27131 318 6F 60 7F 00 
27135 319 00 00 00 00 
27139 31a 00 00 00 18 
2713d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
27141 31c 61 30 18 0C 
27145 31d 06 43 63 7F 
27149 31e 00 00 00 00 
2714d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
27151 320 00 7F 33 18 
27155 321 0C 06 63 7F 
27159 322 00 00 00 00 
2715d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
27161 324 00 00 1F 18 
27165 325 18 18 18 18 
27169 326 18 18 18 18 
2716d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27171 328 18 18 F8 00 
27175 329 00 00 00 00 
27179 32a 00 00 00 18 
2717d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
27181 32c 18 18 FF 00 
27185 32d 00 00 00 00 
27189 32e 00 00 00 00 
2718d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27191 330 00 00 FF 18 
27195 331 18 18 18 18 
27199 332 18 18 18 18 
2719d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
271a1 334 18 18 F8 18 
271a5 335 18 18 18 18 
271a9 336 18 18 18 00 
271ad 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
271b1 338 00 00 FF 00 
271b5 339 00 00 00 00 
271b9 33a 00 00 00 18 
271bd 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
271c1 33c 18 18 FF 18 
271c5 33d 18 18 18 18 
271c9 33e 18 18 18 63 
271cd 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
271d1 340 36 63 63 7F 
271d5 341 63 63 63 63 
271d9 342 00 00 00 00 
271dd 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
271e1 344 00 1E 30 3E 
271e5 345 33 33 33 6E 
271e9 346 00 00 00 6C 
271ed 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
271f1 348 EC 0C FC 00 
271f5 349 00 00 00 00 
271f9 34a 00 00 00 00 
271fd 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27201 34c FC 0C EC 6C 
27205 34d 6C 6C 6C 6C 
27209 34e 6C 6C 6C 6C 
2720d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27211 350 EF 00 FF 00 
27215 351 00 00 00 00 
27219 352 00 00 00 00 
2721d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27221 354 FF 00 EF 6C 
27225 355 6C 6C 6C 6C 
27229 356 6C 6C 6C 6C 
2722d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27231 358 EC 0C EC 6C 
27235 359 6C 6C 6C 6C 
27239 35a 6C 6C 6C 00 
2723d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27241 35c FF 00 FF 00 
27245 35d 00 00 00 00 
27249 35e 00 00 00 6C 
2724d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
27251 360 EF 00 EF 6C 
27255 361 6C 6C 6C 6C 
27259 362 6C 6C 6C 00 
2725d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27261 364 63 3E 63 63 
27265 365 63 63 3E 63 
27269 366 00 00 00 00 
2726d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
27271 368 30 3C 36 33 
27275 369 33 33 33 6E 
27279 36a 00 00 00 00 
2727d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
27281 36c 66 66 6F 66 
27285 36d 66 66 36 1F 
27289 36e 00 00 00 36 
2728d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
27291 370 66 66 66 66 
27295 371 66 66       | 	byte	$66[6]
27297 371 36 1F 00 00 
2729b 372 00 00 63 00 
2729f 373 7F 66 46 16 
272a3 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
272a7 375 66 7F 00 00 
272ab 376 00 6C 38 00 
272af 377 38 30 30 3C 
272b3 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
272b7 379 33 6E 00 00 
272bb 37a 00 36 1C 00 
272bf 37b 63 67 6F 7F 
272c3 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
272c7 37d 63 63 00 00 
272cb 37e 00 30 18 00 
272cf 37f 3C 18 18 18 
272d3 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
272d7 381 18 3C 00 00 
272db 382 00 3C 66 00 
272df 383 3C 18 18 18 
272e3 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
272e7 385 18 3C 00 00 
272eb 386 00 00 00 36 
272ef 387 1C 08 00 3E 
272f3 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
272f7 389 63 3E 00 00 
272fb 38a 00 18 18 18 
272ff 38b 18 18 18 18 
27303 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
27307 38d 00 00 00 00 
2730b 38e 00 00 00 00 
2730f 38f 00 00 00 00 | 	byte	$00[12]
27313 390 F8 18 18 18 
27317 391 18 18 18 18 
2731b 392 18 FF FF FF 
2731f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
27323 394 FF FF FF FF 
27327 395 FF FF FF FF 
2732b 396 FF          | 	byte	$ff[9]
2732c 397 00 00 00 00 
27330 398 00 00 00    | 	byte	$00[7]
27333 398 FF FF FF FF 
27337 399 FF FF FF FF 
2733b 39a FF          | 	byte	$ff[9]
2733c 39b 00 00 00 7E 
27340 39c 7E 5A 18 18 
27344 39d 18 18 18 18 
27348 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2734c 39f 1C 36 1C 63 
27350 3a0 63 63 63 63 
27354 3a1 63 63 63 63 
27358 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2735c 3a3 FF FF FF FF 
27360 3a4 FF FF FF    | 	byte	$ff[7]
27363 3a4 00 00 00 00 
27367 3a5 00 00 00 00 
2736b 3a6 00          | 	byte	$00[9]
2736c 3a7 30 18 00 3E 
27370 3a8 63 63 63 63 
27374 3a9 63 63 63 63 
27378 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2737c 3ab 00 00 00 1E 
27380 3ac 33 33 33 1B 
27384 3ad 33 63 63 63 
27388 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2738c 3af 1C 36 00 3E 
27390 3b0 63 63 63 63 
27394 3b1 63 63 63 63 
27398 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2739c 3b3 30 18 00 63 
273a0 3b4 67 6F 7F 7B 
273a4 3b5 73 63 63 63 
273a8 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
273ac 3b7 00 00 60 30 
273b0 3b8 18 00 3B 66 
273b4 3b9 66 66 66 66 
273b8 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
273bc 3bb 00 00 36 1C 
273c0 3bc 08 00 3B 66 
273c4 3bd 66 66 66 66 
273c8 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
273cc 3bf 36 1C 00 3E 
273d0 3c0 63 63 06 1C 
273d4 3c1 30 60 63 63 
273d8 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
273dc 3c3 00 00 36 1C 
273e0 3c4 08 00 3E 63 
273e4 3c5 06 1C 30 63 
273e8 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
273ec 3c7 30 18 00 3F 
273f0 3c8 66 66 66 3E 
273f4 3c9 36 66 66 66 
273f8 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
273fc 3cb 30 18 00 63 
27400 3cc 63 63 63 63 
27404 3cd 63 63 63 63 
27408 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2740c 3cf 00 00 60 30 
27410 3d0 18 00 3B 6E 
27414 3d1 66 06 06 06 
27418 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2741c 3d3 66 33 00 63 
27420 3d4 63 63 63 63 
27424 3d5 63 63 63 63 
27428 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2742c 3d7 00 00 60 30 
27430 3d8 18 00 63 63 
27434 3d9 63 63 63 63 
27438 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2743c 3db 30 18 00 66 
27440 3dc 66 66 66 3C 
27444 3dd 18 18 18 18 
27448 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2744c 3df 00 00 00 08 
27450 3e0 0C 0C 3F 0C 
27454 3e1 0C 0C 0C 6C 
27458 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2745c 3e3 30 18 00 00 
27460 3e4 00 00 00 00 
27464 3e5 00 00 00 00 
27468 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2746c 3e7 00 00 00 00 
27470 3e8 00 00 00 00 | 	byte	$00[8]
27474 3e9 7F 00 00 00 
27478 3ea 00 00 00 00 
2747c 3eb 66 33 00 00 
27480 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
27484 3ed 00 00 00 00 
27488 3ee 00 00 00 00 
2748c 3ef 00 00 00 00 
27490 3f0 00 00 00 00 
27494 3f1 00 00 00 00 
27498 3f2 00          | 	byte	$00[21]
27499 3f2 0C 06 3C 36 
2749d 3f3 1C 00 00 00 
274a1 3f4 00 00 00 00 
274a5 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
274a9 3f6 00 00 00 63 
274ad 3f7 3E 00 00 00 
274b1 3f8 00 00 00 00 
274b5 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
274b9 3fa 00 00 00 00 
274bd 3fb 3E 63 06 1C 
274c1 3fc 36 63 63 36 
274c5 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
274c9 3fe 00 00 00 00 
274cd 3ff 00 00 00 00 | 	byte	$00[8]
274d1 400 18 00 7E 00 
274d5 401 18 00 00 00 
274d9 402 00 00 00 00 
274dd 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
274e1 404 00 00 00 00 
274e5 405 00 00 00 00 | 	byte	$00[8]
274e9 406 18 30 1E 00 
274ed 407 00 00 1C 36 
274f1 408 36 1C 00 00 
274f5 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
274f9 40a 00 00 00 00 
274fd 40b 63 00 00 00 
27501 40c 00 00 00 00 
27505 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27509 40e 00 00 00 18 
2750d 40f 18 00 00 00 
27511 410 00 00 00 00 
27515 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27519 412 00 00 00 00 
2751d 413 00          | 	byte	$00[5]
2751e 413 CC 66 33 00 
27522 414 33 33 33 33 
27526 415 33 33 6E 00 
2752a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2752e 417 00 3F 66 66 
27532 418 66 3E 36 66 
27536 419 66 66 6F 00 
2753a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2753e 41b 36 1C 08 00 
27542 41c 3B 6E 66 06 
27546 41d 06 06 0F 00 
2754a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2754e 41f 00 00 00 7E 
27552 420 7E 7E 7E 7E 
27556 421 7E 7E 00 00 
2755a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2755e 423 00 00 00 00 
27562 424 00 00 00 00 
27566 425 00 00 00 00 
2756a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2756c 427             | 'vga_font       file "vgafont.def"
2756c 427 00 00 00 00 
      ...             
2759c 433 00 00 00 00 
275a0 434 00 00 00    | st_font        file "st4font.def"
275a3 434 FF FF 00 00 
275a7 435 00 00 00 00 
275ab 436 00 18 18 18 
275af 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
275b3 438 18 18 18 18 
275b7 439 18 18 18 18 
275bb 43a 18          | 	byte	$18[9]
275bc 43b 00 00 00 00 
275c0 43c 00 00 00    | 	byte	$00[7]
275c3 43c FF FF 18 18 
275c7 43d 18 18 18 18 
275cb 43e 18 18 18 18 
275cf 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
275d3 440 FF FF 00 00 
275d7 441 00 00 00 00 
275db 442 00 18 18 18 
275df 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
275e3 444 1F 1F 18 18 
275e7 445 18 18 18 18 
275eb 446 18 18 18 18 
275ef 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
275f3 448 F8 F8 18 18 
275f7 449 18 18 18 18 
275fb 44a 18 00 00 00 
275ff 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27603 44c 1F 1F 18 18 
27607 44d 18 18 18 18 
2760b 44e 18 00 00 00 
2760f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27613 450 F8 F8 18 18 
27617 451 18 18 18 18 
2761b 452 18 18 18 18 
2761f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27623 454 1F 1F 00 00 
27627 455 00 00 00 00 
2762b 456 00 18 18 18 
2762f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27633 458 F8 F8 00 00 
27637 459 00 00 00 00 
2763b 45a 00 18 18 18 
2763f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27643 45c FF FF 18 18 
27647 45d 18 18 18 18 
2764b 45e 18 00 00 18 
2764f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
27653 460 66 7E 7E 66 
27657 461 66 66 66 30 
2765b 462 18 00 00 7E 
2765f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
27663 464 3E 06 06 06 
27667 465 06 7E 7E 18 
2766b 466 0C 30 18 3C 
2766f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
27673 468 06 06 06 66 
27677 469 66 7E 3C 00 
2767b 46a 00 30 18 66 
2767f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
27683 46c 7E 7E 76 76 
27687 46d 66 66 66 00 
2768b 46e 00 30 18 7C 
2768f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
27693 470 1C 38 70 60 
27697 471 60 7E 3E 00 
2769b 472 00 30 18 7E 
2769f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
276a3 474 18 0C 0C 06 
276a7 475 06 7E 7E 00 
276ab 476 00 18 18 00 
276af 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
276b3 478 18 18 0C 0C 
276b7 479 06 7E 7E 00 
276bb 47a 00 30 18 3C 
276bf 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
276c3 47c 66 66 66 66 
276c7 47d 66          | 	byte	$66[5]
276c8 47e 7E 3C 00 00 
276cc 47f 00 00 06 06 
276d0 480 06 06 16 1E 
276d4 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
276d8 482 7E 7E 00 00 
276dc 483 00 00 00 00 
276e0 484 00 3C 7C 60 
276e4 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
276e8 486 7E 7C 30 18 
276ec 487 00 00 00 00 
276f0 488 00 3C 7E 66 
276f4 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
276f8 48a 7E 7C 18 0C 
276fc 48b 00 00 30 18 
27700 48c 00 3C 3E 06 
27704 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
27708 48e 7E 7C 00 00 
2770c 48f 00 00 30 18 
27710 490 00 3E 7E 66 
27714 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
27718 492 66 66 00 00 
2771c 493 00 00 30 18 
27720 494 00 7C 7E 06 
27724 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
27728 496 7E 3E 00 00 
2772c 497 00 00 30 18 
27730 498 00 7E 7E 30 
27734 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27738 49a 7E 7E 00 00 
2773c 49b 00 00 18 18 
27740 49c 00 7E 7E 30 
27744 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27748 49e 7E 7E 00 00 
2774c 49f 00 00 30 18 
27750 4a0 00 3C 7E 66 
27754 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
27758 4a2 7E 3C 00 00 
2775c 4a3 00 00 1C 1C 
27760 4a4 18 18 38 3C 
27764 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
27768 4a6 3C 3C 00 00 
2776c 4a7 00 00 00 00 
27770 4a8 00 00 00 00 
27774 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27778 4aa 00 00 00 00 
2777c 4ab 00 00       | 	byte	$00[6]
2777e 4ab 18 18 18 18 
27782 4ac 18 18 18 18 | 	byte	$18[8]
27786 4ad 00 00 18 18 
2778a 4ae 00 00 00 00 
2778e 4af 66 66 66 66 
27792 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
27796 4b1 00 00 00 00 
2779a 4b2 00 00 00 00 
2779e 4b3 00          | 	byte	$00[9]
2779f 4b3 66 66 FF FF 
277a3 4b4 66 66 FF FF 
277a7 4b5 66 66 00 00 
277ab 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
277af 4b7 7C 7E 06 06 
277b3 4b8 3E 7C 60 60 
277b7 4b9 7E 3E 18 18 
277bb 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
277bf 4bb 66 30 30 18 
277c3 4bc 18 0C 0C 66 
277c7 4bd 66 00 00 00 
277cb 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
277cf 4bf 66 66 3C 1C 
277d3 4c0 1C FC FE 66 
277d7 4c1 66 FE FC 00 
277db 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
277df 4c3 18 18 18 18 
277e3 4c4 00 00 00 00 
277e7 4c5 00 00 00 00 
277eb 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
277ef 4c7 18 1C 0C 0C 
277f3 4c8 0C 0C 0C 0C 
277f7 4c9 1C 18 30 00 
277fb 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
277ff 4cb 18 38 30 30 
27803 4cc 30 30 30 30 
27807 4cd 38 18 0C 00 
2780b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2780f 4cf 66 66 3C 3C 
27813 4d0 FF FF 3C 3C 
27817 4d1 66 66 00 00 
2781b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2781f 4d3 00 18 18 18 
27823 4d4 7E 7E 18 18 
27827 4d5 18 00 00 00 
2782b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2782f 4d7 00 00 00 00 
27833 4d8 00 00       | 	byte	$00[6]
27835 4d9 18 18 18 18 
27839 4da 18          | 	byte	$18[5]
2783a 4da 0C 04 00 00 
2783e 4db 00 00 00 00 
27842 4dc 7E 7E 00 00 
27846 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2784a 4de 00 00 00 00 
2784e 4df 00 00 00 00 
27852 4e0 00 00 00 00 
27856 4e1 00          | 	byte	$00[13]
27857 4e1 18 18 18 00 
2785b 4e2 00 00 00 60 
2785f 4e3 60 60 30 30 
27863 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
27867 4e5 06 06 06 00 
2786b 4e6 00 00 00 3C 
2786f 4e7 7E 66 66 66 
27873 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
27877 4e9 66 7E 3C 00 
2787b 4ea 00 00 00 18 
2787f 4eb 18 1C 1C 18 
27883 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
27887 4ed 18 7E 7E 00 
2788b 4ee 00 00 00 3C 
2788f 4ef 7E 66 66 30 
27893 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
27897 4f1 0C 7E 7E 00 
2789b 4f2 00 00 00 7E 
2789f 4f3 7E 30 30 18 
278a3 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
278a7 4f5 66 7E 3C 00 
278ab 4f6 00 00 00 30 
278af 4f7 30 38 38 3C 
278b3 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
278b7 4f9 7E 30 30 00 
278bb 4fa 00 00 00 7E 
278bf 4fb 7E 06 06 3E 
278c3 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
278c7 4fd 66 7E 3C 00 
278cb 4fe 00 00 00 38 
278cf 4ff 3C 0E 06 06 
278d3 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
278d7 501 66 7E 3C 00 
278db 502 00 00 00 7E 
278df 503 7E 60 60 30 
278e3 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
278e7 505 0C 0C 0C 00 
278eb 506 00 00 00 3C 
278ef 507 7E 66 66 3C 
278f3 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
278f7 509 66 7E 3C 00 
278fb 50a 00 00 00 3C 
278ff 50b 7E 66 66 7E 
27903 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
27907 50d 70 3C 1C 00 
2790b 50e 00 00 00 00 
2790f 50f 00 00 18 18 
27913 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
27917 511 18 18 18 00 
2791b 512 00 00 00 00 
2791f 513 00 00 18 18 
27923 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
27927 515 18 18 18 0C 
2792b 516 04 00 00 00 
2792f 517 70 38 1C 0E 
27933 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
27937 519 70 00 00 00 
2793b 51a 00 00 00 00 
2793f 51b 00 00 7E 7E 
27943 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
27947 51d 00 00 00 00 
2794b 51e 00 00 00 00 | 	byte	$00[8]
2794f 51f 0E 1C 38 70 
27953 520 E0 70 38 1C 
27957 521 0E 00 00 00 
2795b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2795f 523 7E 66 66 30 
27963 524 30 18 18 18 
27967 525 00 18 18 00 
2796b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2796f 527 7E 66 66 66 
27973 528 66 36 06 66 
27977 529 66 7E 3C 00 
2797b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2797f 52b 3C 7E 66 66 
27983 52c 66 7E 7E 66 
27987 52d 66 66 66 00 
2798b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2798f 52f 7E 66 66 7E 
27993 530 3E 66 66 66 
27997 531 66 7E 3E 00 
2799b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2799f 533 7E 66 66 06 
279a3 534 06 06 06 66 
279a7 535 66 7E 3C 00 
279ab 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
279af 537 7E 66 66 66 
279b3 538 66 66 66 66 
279b7 539 66 7E 3E 00 
279bb 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
279bf 53b 7E 06 06 3E 
279c3 53c 3E 06 06 06 
279c7 53d 06 7E 7E 00 
279cb 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
279cf 53f 7E 06 06 3E 
279d3 540 3E 06 06 06 
279d7 541 06 06 06 00 
279db 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
279df 543 7E 06 06 76 
279e3 544 76 66 66 66 
279e7 545 66 7E 3C 00 
279eb 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
279ef 547 66 66 66 7E 
279f3 548 7E 66 66 66 
279f7 549 66 66 66 00 
279fb 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
279ff 54b 7E 18 18 18 
27a03 54c 18 18 18 18 
27a07 54d 18 7E 7E 00 
27a0b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
27a0f 54f 60 60 60 60 
27a13 550 60 60 60    | 	byte	$60[7]
27a16 551 66 66 7E 3C 
27a1a 552 00 00 00 00 
27a1e 553 66 66 36 36 
27a22 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
27a26 555 66 66 C6 C6 
27a2a 556 00 00 00 00 
27a2e 557 06 06 06 06 
27a32 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
27a36 559 06 06 7E 7E 
27a3a 55a 00 00 00 00 
27a3e 55b C6 C6 EE EE 
27a42 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
27a46 55d C6 C6 C6 C6 
27a4a 55e 00 00 00 00 
27a4e 55f 66 66 66 6E 
27a52 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
27a56 561 76 66 66 66 
27a5a 562 00 00 00 00 
27a5e 563 3C 7E 66 66 
27a62 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
27a66 565 66 66 7E 3C 
27a6a 566 00 00 00 00 
27a6e 567 3E 7E 66 66 
27a72 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
27a76 569 06 06 06 06 
27a7a 56a 00 00 00 00 
27a7e 56b 3C 7E 66 66 
27a82 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
27a86 56d 66 56 3E 6C 
27a8a 56e 00 00 00 00 
27a8e 56f 3E 7E 66 66 
27a92 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
27a96 571 66 66 C6 C6 
27a9a 572 00 00 00 00 
27a9e 573 7C 7E 06 06 
27aa2 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
27aa6 575 60 60 7E 3E 
27aaa 576 00 00 00 00 
27aae 577 7E 7E 18 18 
27ab2 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
27ab6 579 18 18 18 18 
27aba 57a 00 00 00 00 
27abe 57b 66 66 66 66 
27ac2 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27ac6 57d 66 66 7E 3C 
27aca 57e 00 00 00 00 
27ace 57f 66 66 66 66 
27ad2 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27ad6 581 3C 3C 18 18 
27ada 582 00 00 00 00 
27ade 583 C6 C6 C6 C6 
27ae2 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
27ae6 585 FE EE C6 82 
27aea 586 00 00 00 00 
27aee 587 66 66 66 3C 
27af2 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
27af6 589 3C 66 66 66 
27afa 58a 00 00 00 00 
27afe 58b 66 66 66 66 
27b02 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
27b06 58d 18 18 18 18 
27b0a 58e 00 00 00 00 
27b0e 58f 7E 7E 30 30 
27b12 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
27b16 591 06 06 7E 7E 
27b1a 592 00 00 00 00 
27b1e 593 3C 3C 0C 0C 
27b22 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
27b26 595 0C 0C 3C 3C 
27b2a 596 00 00 00 00 
27b2e 597 06 06 0C 0C 
27b32 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
27b36 599 60 60 C0 C0 
27b3a 59a 00 00 00 00 
27b3e 59b 3C 3C 30 30 
27b42 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
27b46 59d 30 30 3C 3C 
27b4a 59e 00 00 00 00 
27b4e 59f 18 18 3C 3C 
27b52 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
27b56 5a1 00 00 00 00 
27b5a 5a2 00 00 00 00 
27b5e 5a3 00 00 00 00 
27b62 5a4 00 00 00 00 
27b66 5a5 00 00       | 	byte	$00[18]
27b68 5a6 FE FE 00 00 
27b6c 5a7 00 00 0C 0C 
27b70 5a8 18 18 00 00 
27b74 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
27b78 5aa 00 00 00 00 
27b7c 5ab 00 00 00 00 
27b80 5ac 00          | 	byte	$00[9]
27b81 5ac 3C 7C 60 7C 
27b85 5ad 7E 66 66 7E 
27b89 5ae 7C 00 00 00 
27b8d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
27b91 5b0 3E 7E 66 66 
27b95 5b1 66 66 66 7E 
27b99 5b2 3E 00 00 00 
27b9d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
27ba1 5b4 3C 3E 06 06 
27ba5 5b5 06 06 06 7E 
27ba9 5b6 7C 00 00 00 
27bad 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
27bb1 5b8 7C 7E 66 66 
27bb5 5b9 66 66 66 7E 
27bb9 5ba 7C 00 00 00 
27bbd 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
27bc1 5bc 3C 7E 66 66 
27bc5 5bd 7E 06 06 7E 
27bc9 5be 7C 00 00 00 
27bcd 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
27bd1 5c0 18 7E 7E 18 
27bd5 5c1 18 18 18 18 
27bd9 5c2 18 00 00 00 
27bdd 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27be1 5c4 7C 7E 66 66 
27be5 5c5 66 66 7E 7C 
27be9 5c6 60 7E 3E 00 
27bed 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
27bf1 5c8 3E 7E 66 66 
27bf5 5c9 66 66 66 66 
27bf9 5ca 66 00 00 00 
27bfd 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
27c01 5cc 1C 1C 18 18 
27c05 5cd 18 18 18 3C 
27c09 5ce 3C 00 00 00 
27c0d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
27c11 5d0 30 30 30 30 
27c15 5d1 30 30 30 30 
27c19 5d2 30          | 	byte	$30[9]
27c1a 5d2 3E 1E 00 00 
27c1e 5d3 06 06 06 36 
27c22 5d4 36 1E 1E 1E 
27c26 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
27c2a 5d6 00 00 00 00 
27c2e 5d7 1C 1C 18 18 
27c32 5d8 18 18 18 18 
27c36 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
27c3a 5da 00 00 00 00 
27c3e 5db 00 00 00    | 	byte	$00[7]
27c41 5dc 6C FE FE D6 
27c45 5dd D6 C6 C6 C6 
27c49 5de C6 00 00 00 
27c4d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
27c51 5e0 3E 7E 66 66 
27c55 5e1 66 66 66 66 
27c59 5e2 66 00 00 00 
27c5d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
27c61 5e4 3C 7E 66 66 
27c65 5e5 66 66 66 7E 
27c69 5e6 3C 00 00 00 
27c6d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
27c71 5e8 3E 7E 66 66 
27c75 5e9 66 66 66 7E 
27c79 5ea 3E 06 06 00 
27c7d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
27c81 5ec 7C 7E 66 66 
27c85 5ed 66 66 66 7E 
27c89 5ee 7C 60 60 00 
27c8d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
27c91 5f0 3E 7E 66 06 
27c95 5f1 06 06 06 06 
27c99 5f2 06 00 00 00 
27c9d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
27ca1 5f4 7C 7E 06 0E 
27ca5 5f5 3C 70 60 7E 
27ca9 5f6 3E 00 00 00 
27cad 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
27cb1 5f8 7E 7E 18 18 
27cb5 5f9 18 18 18 78 
27cb9 5fa 70 00 00 00 
27cbd 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
27cc1 5fc 66 66 66 66 
27cc5 5fd 66 66 66    | 	byte	$66[7]
27cc8 5fe 7E 7C 00 00 
27ccc 5ff 00 00 00 00 
27cd0 600 00 66 66 66 
27cd4 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
27cd8 602 18 18 00 00 
27cdc 603 00 00 00 00 
27ce0 604 00 C6 C6 D6 
27ce4 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
27ce8 606 C6 82 00 00 
27cec 607 00 00 00 00 
27cf0 608 00 66 66 3C 
27cf4 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
27cf8 60a 66 66 00 00 
27cfc 60b 00 00 00 00 
27d00 60c 00 66 66 66 
27d04 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
27d08 60e 7C 60 7E 3E 
27d0c 60f 00 00 00 00 
27d10 610 00 7E 7E 30 
27d14 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27d18 612 7E 7E 00 00 
27d1c 613 00 00 30 18 
27d20 614 18 18 18 0C 
27d24 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
27d28 616 18 30 00 00 
27d2c 617 00 00 18 18 
27d30 618 18 18 18 18 
27d34 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27d38 61a 18 18 00 00 
27d3c 61b 00 00 0C 18 
27d40 61c 18 18 18 30 
27d44 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
27d48 61e 18 0C 00 00 
27d4c 61f 00 00 6C 7E 
27d50 620 36 00 00 00 
27d54 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
27d58 622 00 00 00 00 
27d5c 623 00 00 00 00 
27d60 624 00          | 	byte	$00[9]
27d61 624 18 18 18 18 
27d65 625 18 18 00 00 
27d69 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
27d6c 627             | 'amiga_font     file "amigafont.def"
27d6c 627 00 6C FE FE 
27d70 628 7C 38 10 00 
27d74 629 18 18 18 F8 
27d78 62a F8 18 18 18 | a8_font        file "atari8.fnt"
27d7c 62b C0 C0 C0 C0 
27d80 62c C0 C0 C0 C0 | 	byte	$c0[8]
27d84 62d 18 18 18 1F 
27d88 62e 1F 00 00 00 
27d8c 62f 18 18 18 1F 
27d90 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
27d94 631 00 00 00 1F 
27d98 632 1F 18 18 18 
27d9c 633 C0 E0 70 38 
27da0 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
27da4 635 03 07 0E 1C 
27da8 636 38 70 E0 C0 
27dac 637 80 C0 E0 F0 
27db0 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
27db4 639 00 00 00 00 
27db8 63a F0 F0 F0 F0 
27dbc 63b 01 03 07 0F 
27dc0 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
27dc4 63d F0 F0 F0 F0 
27dc8 63e 00 00 00 00 
27dcc 63f 0F 0F 0F 0F 
27dd0 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
27dd4 641 FF FF 00 00 
27dd8 642 00 00 00 00 
27ddc 643 00 00 00 00 
27de0 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
27de4 645 00 00 00 00 
27de8 646 0F 0F 0F 0F 
27dec 647 00 38 38 EE 
27df0 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
27df4 649 00 00 00 F8 
27df8 64a F8 18 18 18 
27dfc 64b 00 00 00 FF 
27e00 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
27e04 64d 18 18 18 FF 
27e08 64e FF 18 18 18 
27e0c 64f 00 00 3C 7E 
27e10 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
27e14 651 00 00 00 00 
27e18 652 FF FF FF FF 
27e1c 653 03 03 03 03 
27e20 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
27e24 655 00 00 00 FF 
27e28 656 FF 18 18 18 
27e2c 657 18 18 18 FF 
27e30 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
27e34 659 0F 0F 0F 0F 
27e38 65a 0F 0F 0F 0F | 	byte	$0f[8]
27e3c 65b 18 18 18 F8 
27e40 65c F8 00 00 00 
27e44 65d 1E 06 1E 06 
27e48 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
27e4c 65f 00 18 3C 7E 
27e50 660 18 18 18 00 
27e54 661 00 18 18 18 
27e58 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
27e5c 663 00 18 0C 7E 
27e60 664 0C 18 00 00 
27e64 665 00 18 30 7E 
27e68 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
27e6c 667 00 00 00 00 
27e70 668 00 00 00 00 
27e74 669 00          | 	byte	$00[9]
27e75 669 18 18 18 18 
27e79 66a 00 18 00 00 
27e7d 66b 66 66 66 00 
27e81 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
27e85 66d 66 FF 66 66 
27e89 66e FF 66 00 18 
27e8d 66f 7C 06 3C 60 
27e91 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
27e95 671 66 36 18 0C 
27e99 672 66 62 00 38 
27e9d 673 6C 38 1C F6 
27ea1 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
27ea5 675 18 18 18 00 
27ea9 676 00 00 00 00 
27ead 677 70 38 18 18 
27eb1 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
27eb5 679 0E 1C 18 18 
27eb9 67a 1C 0E 00 00 
27ebd 67b 66 3C FF 3C 
27ec1 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
27ec5 67d 18 18 7E 18 
27ec9 67e 18 00 00 00 
27ecd 67f 00 00 00 00 
27ed1 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
27ed5 681 00 00 7E 00 
27ed9 682 00 00 00 00 
27edd 683 00 00 00 00 
27ee1 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
27ee5 685 60 30 18 0C 
27ee9 686 06 02 00 00 
27eed 687 3C 66 76 6E 
27ef1 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
27ef5 689 18 1C 18 18 
27ef9 68a 18 7E 00 00 
27efd 68b 3C 66 30 18 
27f01 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
27f05 68d 7E 30 18 30 
27f09 68e 66 3C 00 00 
27f0d 68f 30 38 3C 36 
27f11 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
27f15 691 7E 06 3E 60 
27f19 692 66 3C 00 00 
27f1d 693 3C 06 3E 66 
27f21 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
27f25 695 7E 60 30 18 
27f29 696 0C 0C 00 00 
27f2d 697 3C 66 3C 66 
27f31 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
27f35 699 3C 66 7C 60 
27f39 69a 30 1C 00 00 
27f3d 69b 00 18 18 00 
27f41 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
27f45 69d 00 18 18 00 
27f49 69e 18 18 0C 60 
27f4d 69f 30 18 0C 18 
27f51 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
27f55 6a1 00 7E 00 00 
27f59 6a2 7E 00 00 06 
27f5d 6a3 0C 18 30 18 
27f61 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
27f65 6a5 3C 66 30 18 
27f69 6a6 00 18 00 00 
27f6d 6a7 3C 66 76 76 
27f71 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
27f75 6a9 18 3C 66 66 
27f79 6aa 7E 66 00 00 
27f7d 6ab 3E 66 3E 66 
27f81 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
27f85 6ad 3C 66 06 06 
27f89 6ae 66 3C 00 00 
27f8d 6af 1E 36 66 66 
27f91 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
27f95 6b1 7E 06 3E 06 
27f99 6b2 06 7E 00 00 
27f9d 6b3 7E 06 3E 06 
27fa1 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
27fa5 6b5 7C 06 06 76 
27fa9 6b6 66 7C 00 00 
27fad 6b7 66 66 7E 66 
27fb1 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
27fb5 6b9 7E 18 18 18 
27fb9 6ba 18 7E 00 00 
27fbd 6bb 60 60 60 60 
27fc1 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
27fc5 6bd 66 36 1E 1E 
27fc9 6be 36 66 00 00 
27fcd 6bf 06 06 06 06 
27fd1 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
27fd5 6c1 C6 EE FE D6 
27fd9 6c2 C6 C6 00 00 
27fdd 6c3 66 6E 7E 7E 
27fe1 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
27fe5 6c5 3C 66 66 66 
27fe9 6c6 66 3C 00 00 
27fed 6c7 3E 66 66 3E 
27ff1 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
27ff5 6c9 3C 66 66 66 
27ff9 6ca 36 6C 00 00 
27ffd 6cb 3E 66 66 3E 
28001 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
28005 6cd 3C 06 3C 60 
28009 6ce 60 3C 00 00 
2800d 6cf 7E 18 18 18 
28011 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
28015 6d1 66 66 66 66 
28019 6d2 66          | 	byte	$66[5]
2801a 6d2 7E 00 00 66 
2801e 6d3 66 66 66 3C 
28022 6d4 18 00 00 C6 
28026 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2802a 6d6 C6 00 00 66 
2802e 6d7 66 3C 3C 66 
28032 6d8 66 00 00 66 
28036 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2803a 6da 18 00 00 7E 
2803e 6db 30 18 0C 06 
28042 6dc 7E 00 00 78 
28046 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2804a 6de 78 00 00 02 
2804e 6df 06 0C 18 30 
28052 6e0 60 00 00 1E 
28056 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2805a 6e2 1E 00 00 10 
2805e 6e3 38 6C C6 00 
28062 6e4 00 00 00 00 
28066 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2806a 6e6 FF 00 00 18 
2806e 6e7 3C 7E 7E 3C 
28072 6e8 18 00 00 00 
28076 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2807a 6ea 7C 00 00 06 
2807e 6eb 06 3E 66 66 
28082 6ec 3E 00 00 00 
28086 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2808a 6ee 3C 00 00 60 
2808e 6ef 60 7C 66 66 
28092 6f0 7C 00 00 00 
28096 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2809a 6f2 3C 00 00 70 
2809e 6f3 18 7C 18 18 
280a2 6f4 18 00 00 00 
280a6 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
280aa 6f6 60 3E 00 06 
280ae 6f7 06 3E 66 66 
280b2 6f8 66 00 00 18 
280b6 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
280ba 6fa 3C 00 00 60 
280be 6fb 00 60 60 60 
280c2 6fc 60 3C 00 06 
280c6 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
280ca 6fe 66 00 00 1C 
280ce 6ff 18 18 18 18 
280d2 700 3C 00 00 00 
280d6 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
280da 702 C6 00 00 00 
280de 703 3E 66 66 66 
280e2 704 66 00 00 00 
280e6 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
280ea 706 3C 00 00 00 
280ee 707 3E 66 66 3E 
280f2 708 06 06 00 00 
280f6 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
280fa 70a 60 60 00 00 
280fe 70b 3E 66 06 06 
28102 70c 06 00 00 00 
28106 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2810a 70e 3E 00 00 18 
2810e 70f 7E 18 18 18 
28112 710 70 00 00 00 
28116 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2811a 712 7C 00 00 00 
2811e 713 66 66 66 3C 
28122 714 18 00 00 00 
28126 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2812a 716 6C 00 00 00 
2812e 717 66 3C 18 3C 
28132 718 66 00 00 00 
28136 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2813a 71a 30 1E 00 00 
2813e 71b 7E 30 18 0C 
28142 71c 7E 00 00 18 
28146 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2814a 71e 3C 00 18 18 
2814e 71f 18 18 18 18 
28152 720 18 18 00 7E 
28156 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2815a 722 60 00 10 18 
2815e 723 1C 1E 1C 18 
28162 724 10 00 08 18 
28166 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2816a 726 08 00       | 	byte	$08, $00
2816c 727 00 00 00 00 
28170 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
28171 728 80 00 00 00 
28175 729 00 80 00 00 
28179 72a 80 80 00 00 
2817d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
28181 72c 80 00 80 00 
28185 72d 00 40 80 00 
28189 72e AA AA AA 00 
2818d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
28191 730 FF 00 00 00 
28195 731 00 FF 00 00 
28199 732 FF FF 00 00 
2819d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
281a1 734 FF 00 FF 00 
281a5 735 00 FF FF 00 
281a9 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
281ac 737 00 00 00 00 
281b0 738 00          | ataripalette   file "ataripalettep2.def"
281b1 738 11 11 11 00 
281b5 739 22 22 22 00 
281b9 73a 33 33 33 00 
281bd 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
281c1 73c 55 55 55 00 
281c5 73d 66 66 66 00 
281c9 73e 77 77 77 00 
281cd 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
281d1 740 99 99 99 00 
281d5 741 AA AA AA 00 
281d9 742 BB BB BB 00 
281dd 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
281e1 744 DD DD DD 00 
281e5 745 EE EE EE 00 
281e9 746 FF FF FF 00 
281ed 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
281f1 748 00 14 40 00 
281f5 749 00 1E 60 00 
281f9 74a 00 28 80 00 
281fd 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
28201 74c 00 3C BF 00 
28205 74d 00 46 DF 00 
28209 74e 00 50 FF 00 
2820d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
28211 750 39 77 FF 00 
28215 751 55 8A FF 00 
28219 752 71 9E FF 00 
2821d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
28221 754 AA C5 FF 00 
28225 755 C6 D8 FF 00 
28229 756 E3 EC FF 00 
2822d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
28231 758 00 00 40 00 
28235 759 00 00 60 00 
28239 75a 00 00 80 00 
2823d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
28241 75c 00 00 BF 00 
28245 75d 00 00 DF 00 
28249 75e 00 00 FF 00 
2824d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
28251 760 39 39 FF 00 
28255 761 55 55 FF 00 
28259 762 71 71 FF 00 
2825d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
28261 764 AA AA FF 00 
28265 765 C6 C6 FF 00 
28269 766 E3 E3 FF 00 
2826d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
28271 768 20 00 40 00 
28275 769 30 00 60 00 
28279 76a 40 00 80 00 
2827d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
28281 76c 60 00 BF 00 
28285 76d 70 00 DF 00 
28289 76e 80 00 FF 00 
2828d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
28291 770 9C 39 FF 00 
28295 771 AA 55 FF 00 
28299 772 B8 71 FF 00 
2829d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
282a1 774 D5 AA FF 00 
282a5 775 E3 C6 FF 00 
282a9 776 F1 E3 FF 00 
282ad 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
282b1 778 40 00 40 00 
282b5 779 60 00 60 00 
282b9 77a 80 00 80 00 
282bd 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
282c1 77c BF 00 BF 00 
282c5 77d DF 00 DF 00 
282c9 77e FF 00 FF 00 
282cd 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
282d1 780 FF 39 FF 00 
282d5 781 FF 55 FF 00 
282d9 782 FF 71 FF 00 
282dd 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
282e1 784 FF AA FF 00 
282e5 785 FF C6 FF 00 
282e9 786 FF E3 FF 00 
282ed 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
282f1 788 40 00 20 00 
282f5 789 60 00 30 00 
282f9 78a 80 00 40 00 
282fd 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
28301 78c BF 00 60 00 
28305 78d DF 00 70 00 
28309 78e FF 00 80 00 
2830d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
28311 790 FF 39 9C 00 
28315 791 FF 55 AA 00 
28319 792 FF 71 B8 00 
2831d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
28321 794 FF AA D5 00 
28325 795 FF C6 E3 00 
28329 796 FF E3 F1 00 
2832d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
28331 798 40 00 00 00 
28335 799 60 00 00 00 
28339 79a 80 00 00 00 
2833d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
28341 79c BF 00 00 00 
28345 79d DF 00 00 00 
28349 79e FF 00 00 00 
2834d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
28351 7a0 FF 39 39 00 
28355 7a1 FF 55 55 00 
28359 7a2 FF 71 71 00 
2835d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
28361 7a4 FF AA AA 00 
28365 7a5 FF C6 C6 00 
28369 7a6 FF E3 E3 00 
2836d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
28371 7a8 40 10 00 00 
28375 7a9 60 18 00 00 
28379 7aa 80 20 00 00 
2837d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
28381 7ac BF 30 00 00 
28385 7ad DF 38 00 00 
28389 7ae FF 40 00 00 
2838d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
28391 7b0 FF 6A 39 00 
28395 7b1 FF 80 55 00 
28399 7b2 FF 95 71 00 
2839d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
283a1 7b4 FF BF AA 00 
283a5 7b5 FF D5 C6 00 
283a9 7b6 FF EA E3 00 
283ad 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
283b1 7b8 40 20 00 00 
283b5 7b9 60 30 00 00 
283b9 7ba 80 40 00 00 
283bd 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
283c1 7bc BF 60 00 00 
283c5 7bd DF 70 00 00 
283c9 7be FF 80 00 00 
283cd 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
283d1 7c0 FF 9C 39 00 
283d5 7c1 FF AA 55 00 
283d9 7c2 FF B8 71 00 
283dd 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
283e1 7c4 FF D5 AA 00 
283e5 7c5 FF E3 C6 00 
283e9 7c6 FF F1 E3 00 
283ed 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
283f1 7c8 40 30 00 00 
283f5 7c9 60 48 00 00 
283f9 7ca 80 60 00 00 
283fd 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
28401 7cc BF 90 00 00 
28405 7cd DF A8 00 00 
28409 7ce FF C0 00 00 
2840d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
28411 7d0 FF CE 39 00 
28415 7d1 FF D5 55 00 
28419 7d2 FF DC 71 00 
2841d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
28421 7d4 FF EA AA 00 
28425 7d5 FF F1 C6 00 
28429 7d6 FF F8 E3 00 
2842d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
28431 7d8 30 40 00 00 
28435 7d9 48 60 00 00 
28439 7da 60 80 00 00 
2843d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
28441 7dc 90 BF 00 00 
28445 7dd A8 DF 00 00 
28449 7de C0 FF 00 00 
2844d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
28451 7e0 CE FF 39 00 
28455 7e1 D5 FF 55 00 
28459 7e2 DC FF 71 00 
2845d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
28461 7e4 EA FF AA 00 
28465 7e5 F1 FF C6 00 
28469 7e6 F8 FF E3 00 
2846d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
28471 7e8 00 40 00 00 
28475 7e9 00 60 00 00 
28479 7ea 00 80 00 00 
2847d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
28481 7ec 00 BF 00 00 
28485 7ed 00 DF 00 00 
28489 7ee 00 FF 00 00 
2848d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
28491 7f0 39 FF 39 00 
28495 7f1 55 FF 55 00 
28499 7f2 71 FF 71 00 
2849d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
284a1 7f4 AA FF AA 00 
284a5 7f5 C6 FF C6 00 
284a9 7f6 E3 FF E3 00 
284ad 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
284b1 7f8 00 40 14 00 
284b5 7f9 00 60 1E 00 
284b9 7fa 00 80 28 00 
284bd 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
284c1 7fc 00 BF 3C 00 
284c5 7fd 00 DF 46 00 
284c9 7fe 00 FF 50 00 
284cd 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
284d1 800 39 FF 77 00 
284d5 801 55 FF 8A 00 
284d9 802 71 FF 9E 00 
284dd 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
284e1 804 AA FF C5 00 
284e5 805 C6 FF D8 00 
284e9 806 E3 FF EC 00 
284ed 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
284f1 808 00 40 28 00 
284f5 809 00 60 3C 00 
284f9 80a 00 80 50 00 
284fd 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
28501 80c 00 BF 78 00 
28505 80d 00 DF 8C 00 
28509 80e 00 FF A0 00 
2850d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
28511 810 39 FF B5 00 
28515 811 55 FF C0 00 
28519 812 71 FF CA 00 
2851d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
28521 814 AA FF DF 00 
28525 815 C6 FF EA 00 
28529 816 E3 FF F4 00 
2852d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
28531 818 00 40 40 00 
28535 819 00 60 60 00 
28539 81a 00 80 80 00 
2853d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
28541 81c 00 BF BF 00 
28545 81d 00 DF DF 00 
28549 81e 00 FF FF 00 
2854d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
28551 820 39 FF FF 00 
28555 821 55 FF FF 00 
28559 822 71 FF FF 00 
2855d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
28561 824 AA FF FF 00 
28565 825 C6 FF FF 00 
28569 826 E3 FF FF 00 
2856d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
28571 828 00 28 40 00 
28575 829 00 3C 60 00 
28579 82a 00 50 80 00 
2857d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
28581 82c 00 78 BF 00 
28585 82d 00 8C DF 00 
28589 82e 00 A0 FF 00 
2858d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
28591 830 39 B5 FF 00 
28595 831 55 C0 FF 00 
28599 832 71 CA FF 00 
2859d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
285a1 834 AA DF FF 00 
285a5 835 C6 EA FF 00 
285a9 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
285ac 837             | 
285ac 837             | '**********************************************************************************
285ac 837             | '
285ac 837             | '        Timings and colors definitions
285ac 837             | '
285ac 837             | '**********************************************************************************
285ac 837             | 
285ac 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
285ac 837 10 00 00 00 
285b0 838 50 00 00 00 
285b4 839 0C 00 00 00 
285b8 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
285bc 83b 08 00 00 00 
285c0 83c 04 00 00 00 
285c4 83d 08 00 00 00 
285c8 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
285cc 83f 40 02 00 00 
285d0 840 6A 8C 15 14 
285d4 841 FB 06 B7 01 
285d8 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
285dc 843 00 00 00 00 
285e0 844 C0 00 00 00 
285e4 845 00 00 00 00 
285e8 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
285ec 847 00 75 C7 97 
285f0 848 27 47 F6 0A 
285f4 849 05 79 CB 9B 
285f8 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
285fc 84b             | 
285fc 84b             | ''--------  Initialization  ----------------------------------------------------------------
285fc 84b             | 
285fc 84b 28 0C 64 FD | hdmi            setq    #6
28600 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
28604 84d 28 10 64 FD |                 setq    #8
28608 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2860c 84f             | 
2860c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
28610 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
28614 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
28618 852 D6 C6 01 F1 |                 add     t1,hbase
2861c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
28620 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
28624 855 7B 0B 80 5F 
28628 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2862c 857 66 66 86 FF 
28630 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
28634 859             | '
28634 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
28638 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2863c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
28640 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
28644 85d             | 
28644 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
28648 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2864c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
28650 860             | 
28650 860             | ''--------  frame rendering main loop  ---------------------------------------------------
28650 860             | 
28650 860 28 06 64 FD | p101            setq 	#3
28654 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
28658 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2865c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
28660 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
28664 865 00 A0 05 F6 |                 mov     dlinum, #0
28668 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2866c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
28670 868             | 
28670 868             | 
28670 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
28674 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
28678 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2867c 86b             |                 
2867c 86b             | 
2867c 86b             | 
2867c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2867c 86b             |   
2867c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
28680 86c 29 FE 65 3D |          if_nc  setq2   #255
28684 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
28688 86e             | 
28688 86e             | '' -----   up porch (before the picture)
28688 86e             | 
28688 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2868c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
28690 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
28694 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
28698 872             |  
28698 872             |    
28698 872             |  
28698 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2869c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
286a0 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
286a4 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
286a8 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
286ac 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
286b0 878             | 
286b0 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
286b4 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
286b8 87a 48 00 B0 FD | 		call    #dli
286bc 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
286c0 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
286c4 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
286c8 87e             |                 	
286c8 87e             |                 
286c8 87e             | 
286c8 87e             |  
286c8 87e             | '' ------- the main screen drawing starts here
286c8 87e             | 
286c8 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
286cc 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
286d0 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
286d4 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
286d8 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
286dc 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
286e0 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
286e4 885             |               
286e4 885             | 
286e4 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
286e8 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
286ec 887             | 
286ec 887             | ' ---------------- All visible lines displayed now, start vblank  
286ec 887             | 
286ec 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
286f0 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
286f4 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
286f8 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
286fc 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
28700 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
28704 88d             | 
28704 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
28704 88d             | 
28704 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
28704 88d             | 
28704 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
28708 88e             | 
28708 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2870c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
28710 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
28714 891             | 
28714 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
28718 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2871c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
28720 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
28724 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
28728 896             | 
28728 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2872c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
28730 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
28734 899 70 00 90 AD |     if_z        jmp     #preload
28738 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2873c 89b 94 00 90 AD |     if_z        jmp     #preload2
28740 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
28744 89d 0C 00 90 AD |     if_z        jmp     #p390
28748 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2874c 89f 28 00 90 AD |     if_z        jmp     #p391  
28750 8a0             | 
28750 8a0 2D 00 64 FD | p308            ret
28754 8a1             |    
28754 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
28758 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2875c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
28760 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
28764 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
28768 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2876c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
28770 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
28774 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
28778 8aa             |  
28778 8aa             | '' --------  Reload palette. To do 
28778 8aa             | 
28778 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2877c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
28780 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
28784 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
28788 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2878c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
28790 8b0 70 FF 9F FD |         	jmp     #dli                
28794 8b1             |       
28794 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
28794 8b1             | 
28794 8b1             | 
28794 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
28794 8b1             | 
28794 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
28798 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2879c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
287a0 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
287a4 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
287a8 8b6             |         
287a8 8b6             | '' -------------- Preload a line from PSRAM        
287a8 8b6             |         
287a8 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
287ac 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
287b0 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
287b4 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
287b8 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
287bc 8bb             | 
287bc 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
287c0 8bc 32 B7 01 F6 |                 mov     buf2,a1024
287c4 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
287c8 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
287cc 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
287d0 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
287d4 8c1             |  
287d4 8c1             |  
287d4 8c1             | preload2      '  incmod  dlinum,#3
287d4 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
287d8 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
287dc 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
287e0 8c4 28 02 64 FD |                 setq	#1
287e4 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
287e8 8c6             |                 
287e8 8c6             | 
287e8 8c6             | '' -------------- Draw sprites
287e8 8c6             | 
287e8 8c6 CF 5C 02 F6 | sprite          mov t8,frames
287ec 8c7 10 5C 0E F5 | 		and t8,#16 wz
287f0 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
287f4 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
287f8 8ca             | 		
287f8 8ca             | 
287f8 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
287fc 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
28800 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
28804 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
28808 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2880c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
28810 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
28814 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
28818 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2881c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
28820 8d4 01 52 86 F1 |                 sub     sprite_h,#1
28824 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
28828 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2882c 8d7             | 
2882c 8d7             | 
2882c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
28830 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
28834 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
28838 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2883c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
28840 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
28844 8dd 00 5E 06 F6 |                 mov 	t9,#0
28848 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2884c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
28850 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
28854 8e1             |      
28854 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
28858 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2885c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
28860 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
28864 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
28868 8e6             |                 
28868 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2886c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
28870 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
28874 8e9             |   		
28874 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
28878 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2887c 8eb             | 
2887c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
28880 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
28884 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
28888 8ee             |  
28888 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2888c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
28890 8f0 10 00 90 CD |      if_c 	jmp     #p899		
28894 8f1             | 	
28894 8f1             | 	
28894 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
28898 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2889c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
288a0 8f4             | 
288a0 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
288a4 8f5             | 
288a4 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
288a8 8f6 01 58 86 F1 | 	 	sub     t6,#1
288ac 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
288b0 8f8             | 
288b0 8f8 28 58 62 FD |                 setq   	t6
288b4 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
288b8 8fa 28 5D 02 F6 |                 mov t8,sprite_w
288bc 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
288c0 8fc 24 00 90 AD |         if_z    jmp #p898
288c4 8fd             |          
288c4 8fd             |         
288c4 8fd 70 5F 06 F6 |                 mov  t9,#368
288c8 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
288cc 8ff             | 
288cc 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
288d0 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
288d4 901 FF FF 7F FF 
288d8 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
288dc 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
288e0 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
288e4 905 2D 01 00 F5 |                 and 0-0, t7
288e8 906             |                
288e8 906             | 
288e8 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
288ec 907 E5 E0 7A FA |                 wmlong 368,t3				
288f0 908             |                 
288f0 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
288f4 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
288f8 90a 2D 00 64 FD |                 ret
288fc 90b             | 	
288fc 90b             | 	
288fc 90b             |                
288fc 90b             |  
288fc 90b             | '' -------------- Graphics line ------------------------------------------------------------
288fc 90b             |  
288fc 90b             | 
288fc 90b             | '' consts and vars
288fc 90b             | 
288fc 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
28900 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
28904 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
28908 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2890c 90f             | 
2890c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
28910 910             | 
28910 910             | '------ these longs will be set by setmode function
28910 910             | 
28910 910 00 00 00 00 | m_bs            long    0        'blanks before sync
28914 911 00 00 00 00 | m_sn            long    0        'sync
28918 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2891c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
28920 914             | 'm_border        long    0        'left/right borders
28920 914 00 00 00 00 | i_upporch       long    0        'up porch lines
28924 915 00 00 00 00 | i_vsync         long    0        'vsync lines
28928 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2892c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
28930 918 00 00 00 00 | i_totalvis      long    0
28934 919             | 
28934 919             | '-------------------------------------
28934 919             |  
28934 919 00 00 00 00 | linenum         long    0
28938 91a 00 00 00 00 | frames          long    0
2893c 91b 00 00 00 00 | dlinum long 0
28940 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
28944 91d             | 
28944 91d 00 00 00 00 | vblankptr       long    0
28948 91e 00 00 00 00 | modeptr         long    0
2894c 91f 00 00 00 00 | paletteptr      long    0
28950 920 00 00 00 00 | dlptr           long    0
28954 921 01 00 00 00 | hbase           long    1
28958 922 00 00 00 00 | mailbox         long    0
2895c 923 00 00 00 00 | spriteptr          long 0
28960 924             | 
28960 924 00 00 00 00 | cmd             long    0
28964 925 00 B0 07 00 | buf1            long    $80000-16384-4096
28968 926 00 04 00 00 | buf2            long    1024
2896c 927 01 00 00 00 | dlptr2          long    1
28970 928 01 00 00 00 | dl              long    1
28974 929             | 
28974 929 00 00 00 00 | buf1c long 0
28978 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2897c 92b 01 00 00 00 | framebuf2       long    1
28980 92c 01 00 00 00 | hsync0          long    1
28984 92d 01 00 00 00 | hsync1          long    1
28988 92e             | 
28988 92e 01 00 00 00 | t1              long    1
2898c 92f 00 00 00 00 | t2 long 0
28990 930 00 00 00 00 | t3 long 0
28994 931 00 00 00 00 | t4 long 0
28998 932             | 
28998 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2899c 933 00 00 00 00 | rcnt2           long    0
289a0 934 00 00 00 00 | rcnt2a          long    0
289a4 935 00 00 00 00 | roffset         long    0
289a8 936 00 00 00 00 | rdl             long    0  'dl repeat line
289ac 937 00 00 00 00 | dlc             long    0  'dl command
289b0 938             | 
289b0 938 FF FF FF FF | affffffff       long    $ffffffff
289b4 939 00 00 00 00 | sprite1pointer long 0
289b8 93a 00 00 00 00 | sprite1xy      long 0
289bc 93b 00 00 00 00 | sprite1wh      long 0
289c0 93c 00 00 00 00 | sprite2pointer long 0
289c4 93d 00 00 00 00 | sprite2xy      long 0
289c8 93e 00 00 00 00 | sprite2wh      long 0
289cc 93f 00 00 00 00 | sprite3pointer long 0
289d0 940 00 00 00 00 | sprite3xy      long 0
289d4 941 00 00 00 00 | sprite3wh      long 0
289d8 942 00 00 00 00 | sprite4pointer long 0
289dc 943 00 00 00 00 | sprite4xy      long 0
289e0 944 00 00 00 00 | sprite4wh      long 0
289e4 945 00 00 00 00 | sprite5pointer long 0
289e8 946 00 00 00 00 | sprite5xy      long 0
289ec 947 00 00 00 00 | sprite5wh      long 0
289f0 948 00 00 00 00 | sprite6pointer long 0
289f4 949 00 00 00 00 | sprite6xy      long 0
289f8 94a 00 00 00 00 | sprite6wh      long 0
289fc 94b 00 00 00 00 | sprite7pointer long 0
28a00 94c 00 00 00 00 | sprite7xy      long 0
28a04 94d 00 00 00 00 | sprite7wh      long 0
28a08 94e 00 00 00 00 | sprite8pointer long 0
28a0c 94f 00 00 00 00 | sprite8xy      long 0
28a10 950 00 00 00 00 | sprite8wh      long 0
28a14 951 00 00 00 00 | sprite9pointer long 0
28a18 952 00 00 00 00 | sprite9xy      long 0
28a1c 953 00 00 00 00 | sprite9wh      long 0
28a20 954 00 00 00 00 | sprite10pointer long 0
28a24 955 00 00 00 00 | sprite10xy      long 0
28a28 956 00 00 00 00 | sprite10wh      long 0
28a2c 957 00 00 00 00 | sprite11pointer long 0
28a30 958 00 00 00 00 | sprite11xy      long 0
28a34 959 00 00 00 00 | sprite11wh      long 0
28a38 95a 00 00 00 00 | sprite12pointer long 0
28a3c 95b 00 00 00 00 | sprite12xy      long 0
28a40 95c 00 00 00 00 | sprite12wh      long 0
28a44 95d 00 00 00 00 | sprite13pointer long 0
28a48 95e 00 00 00 00 | sprite13xy      long 0
28a4c 95f 00 00 00 00 | sprite13wh      long 0
28a50 960 00 00 00 00 | sprite14pointer long 0
28a54 961 00 00 00 00 | sprite14xy      long 0
28a58 962 00 00 00 00 | sprite14wh      long 0
28a5c 963 00 00 00 00 | sprite15pointer long 0
28a60 964 00 00 00 00 | sprite15xy      long 0
28a64 965 00 00 00 00 | sprite15wh      long 0
28a68 966 00 00 00 00 | sprite16pointer long 0
28a6c 967 00 00 00 00 | sprite16xy      long 0
28a70 968 00 00 00 00 | sprite16wh      long 0
28a74 969 00 00 00 00 | sprite17pointer long 0
28a78 96a 00 00 00 00 | sprite17xy      long 0
28a7c 96b 00 00 00 00 | sprite17wh      long 0
28a80 96c 00 00 00 00 | sprite18pointer long 0
28a84 96d 00 00 00 00 | sprite18xy      long 0
28a88 96e 00 00 00 00 | sprite18wh      long 0
28a8c 96f 00 00 00 00 | spritenum long 0
28a90 970             | 
28a90 970 00 00 00 00 | spriteline long 0
28a94 971 84 03 00 00 | sprite_x long 900
28a98 972 00 00 00 00 | sprite_y long 0
28a9c 973 10 00 00 00 | sprite_w long 16
28aa0 974 40 00 00 00 | sprite_h long 64
28aa4 975 00 00 00 00 | l2 long 0
28aa8 976 00 00 00 00 | t5 long 0
28aac 977 00 00 00 00 | t6 long 0
28ab0 978 00 00 00 00 | t7 long 0
28ab4 979 00 00 00 00 | t8 long 0
28ab8 97a 00 00 00 00 | t9 long 0
28abc 97b 00 00 00 00 | preloadaddr long 0
28ac0 97c 00 00 00 00 | preloadlineaddr long 0
28ac4 97d 00 04 00 00 | a1024 long 1024
28ac8 97e             | 
28ac8 97e E0 03 00 00 | aa long 992
28acc 97f FF 03 00 00 | a1023 long 1023
28ad0 980 00 10 00 00 | a4096 long 4096
28ad4 981             |  fit 368
28ad4 981             | _psram_spin2_dat_
28ad4 981 00 00 00 00 
      ...             
28bcc 9bf 00 00 00 00 
28bd0 9c0 00 00 00 00 |     listdata long 0[8*8]
28bd4 9c1             |             orgh
28bd4                 | 
28bd4                 | ' driver state
28bd4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
28bd8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
28bdc                 | 
28bdc                 | ' delay profile
28bdc     07 00 00 00 
28be0     00 CF 7B 05 
28be4     80 D1 F0 08 
28be8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
28bec     80 C4 60 0F 
28bf0     80 39 7A 12 
28bf4     40 2D D9 13 
28bf8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
28bfc                 | 
28bfc                 | ' data to be passed to driver when starting it
28bfc                 | startupData
28bfc     00 00 00 00 |     long    0           ' current frequency
28c00     00 00 00 00 |     long    FLAGS       ' optional flags for driver
28c04     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
28c08     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
28c0c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
28c10     1C 8C 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
28c14     9C 8C 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
28c18     BC 8C 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
28c1c                 | 
28c1c                 | ' data for memory
28c1c                 | deviceData
28c1c                 |     ' 16 bank parameters follow (16MB per bank)
28c1c     00 00 00 00 
      ...             
28c54     00 00 00 00 
28c58     00 00 00 00 |     long    0[16]                               ' banks 0-15
28c5c                 |     ' 16 banks of pin parameters follow
28c5c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
28c60     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
28c64     FF FF FF FF 
      ...             
28c94     FF FF FF FF 
28c98     FF FF FF FF |     long    -1[14]                              ' banks 2-15
28c9c                 | 
28c9c                 | ' data for COG polling
28c9c                 | qosData 
28c9c     00 00 FF FF 
28ca0     00 00 FF FF 
28ca4     00 00 FF FF 
28ca8     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
28cac     00 00 FF FF 
28cb0     00 00 FF FF 
28cb4     00 00 FF FF 
28cb8     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
28cbc                 |     
28cbc                 | ' mailbox storage
28cbc                 | 
28cbc                 | mailboxes
28cbc     00 00 00 00 
      ...             
28d14     00 00 00 00 
28d18     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
28d1c                 | 	alignl
28d1c                 | _psram16drv_spin2_dat_
28d1c                 |                             orgh
28d1c     00 00 00 00 
      ...             
28d34     00 00 00 00 
28d38     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
28d3c                 | 
28d3c                 | driver_start
28d3c                 |                             org
28d3c 000             | '..................................................................................................
28d3c 000             | ' Memory layout for COG RAM once operational:
28d3c 000             | '
28d3c 000             | '  COG RAM address      Usage
28d3c 000             | '  ---------------      ----
28d3c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
28d3c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
28d3c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
28d3c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
28d3c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
28d3c 000             | '  ~$198-$1F3           State and register variables
28d3c 000             | '
28d3c 000             | ' Also during driver COG startup:
28d3c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
28d3c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
28d3c 000             | '..................................................................................................
28d3c 000             |                             
28d3c 000             | ' Mailbox storage after vector initialization
28d3c 000             | 
28d3c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
28d40 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
28d44 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
28d48 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
28d4c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
28d50 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
28d54 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
28d58 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
28d5c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
28d60 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
28d64 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
28d68 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
28d6c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
28d70 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
28d74 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
28d78 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
28d7c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
28d80 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
28d84 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
28d88 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
28d8c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
28d90 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
28d94 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
28d98 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
28d9c 018             | 
28d9c 018             | ' Mailbox parameter addresses per COG once patched
28d9c 018             |                             
28d9c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
28da0 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
28da4 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
28da8 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
28dac 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
28db0 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
28db4 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
28db8 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
28dbc 020             | 
28dbc 020             | '..................................................................................................
28dbc 020             | ' Per COG request and state setup and service branching
28dbc 020             |         
28dbc 020             | cog0                 
28dbc 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
28dc0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
28dc4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
28dc8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
28dcc 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28dd0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28dd4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
28dd8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
28ddc 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
28de0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28de4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28de8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
28dec 02c             | cog1                        
28dec 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
28df0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
28df4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
28df8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
28dfc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28e00 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28e04 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
28e08 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
28e0c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
28e10 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28e14 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28e18 037 33 CA 63 FD |                             execf   request-0               'jump to service
28e1c 038             | cog2                         
28e1c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
28e20 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
28e24 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
28e28 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
28e2c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28e30 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28e34 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
28e38 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
28e3c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
28e40 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28e44 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28e48 043 33 CA 63 FD |                             execf   request-0               'jump to service
28e4c 044             | cog3                        
28e4c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
28e50 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
28e54 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
28e58 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
28e5c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28e60 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28e64 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
28e68 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
28e6c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
28e70 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28e74 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28e78 04f 33 CA 63 FD |                             execf   request-0               'jump to service
28e7c 050             | cog4                        
28e7c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
28e80 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
28e84 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
28e88 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
28e8c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28e90 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28e94 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
28e98 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
28e9c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
28ea0 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28ea4 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28ea8 05b 33 CA 63 FD |                             execf   request-0               'jump to service
28eac 05c             | cog5                        
28eac 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
28eb0 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
28eb4 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
28eb8 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
28ebc 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28ec0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28ec4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
28ec8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
28ecc 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
28ed0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28ed4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28ed8 067 33 CA 63 FD |                             execf   request-0               'jump to service
28edc 068             | cog6                        
28edc 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
28ee0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
28ee4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
28ee8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
28eec 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28ef0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28ef4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
28ef8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
28efc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
28f00 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28f04 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28f08 073 33 CA 63 FD |                             execf   request-0               'jump to service
28f0c 074             | cog7                        
28f0c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
28f10 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
28f14 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
28f18 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
28f1c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28f20 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28f24 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
28f28 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
28f2c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
28f30 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28f34 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28f38 07f 33 CA 63 FD |                             execf   request-0               'jump to service
28f3c 080             |                             fit     128
28f3c 080             | 
28f3c 080             |                             fit     128
28f3c 080             | pad                         long    0[128-$]                'align init code to $80
28f3c 080             | 
28f3c 080             | '..................................................................................................
28f3c 080             | 
28f3c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
28f3c 080             | 
28f3c 080             | init                        
28f3c 080             |                             ' get driver scratch long address in hub
28f3c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
28f40 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
28f44 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
28f48 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
28f4c 084             |                     
28f4c 084             |                             ' read in the additional LUT RAM code
28f4c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
28f50 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
28f54 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
28f58 087             | 
28f58 087             |                             ' read the startup parameters
28f58 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
28f5c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
28f60 089             | 
28f60 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
28f60 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
28f64 08a             | 
28f64 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
28f68 08b 01 00 00 5F 
28f6c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
28f70 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
28f74 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
28f78 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
28f7c 090             | 
28f7c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
28f7c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
28f80 091 01 00 00 FF 
28f84 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
28f88 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
28f8c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
28f90 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
28f94 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
28f98 097 08 DE 47 F5 |                             or      a, #8
28f9c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
28fa0 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
28fa4 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
28fa8 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
28fac 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
28fb0 09d 01 DE 07 F1 |                             add     a, #1
28fb4 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
28fb8 09f             |  
28fb8 09f             |                             ' setup device control pin states
28fb8 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
28fbc 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
28fc0 0a1 01 00 00 FF 
28fc4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
28fc8 0a3             | 
28fc8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
28fcc 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
28fd0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
28fd4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
28fd8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
28fdc 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
28fe0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
28fe4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
28fe8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
28fec 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
28ff0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
28ff4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
28ff8 0af             | pinloop
28ff8 0af             |                             ' generate minimum CE high time before access
28ff8 0af A1 07 00 FF 
28ffc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
29000 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
29004 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
29008 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2900c 0b4 1F DE 63 FD |                             waitx   a                       'delay
29010 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
29014 0b6             | 
29014 0b6             |                             ' setup the COG mailboxes and addresses 
29014 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
29018 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2901c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
29020 0b9             | 
29020 0b9 28 2E 64 FD |                             setq    #24-1
29024 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
29028 0bb             | 
29028 0bb             |                             ' setup the polling loop for active COGs 
29028 0bb 01 C2 63 FD |                             cogid   id
2902c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
29030 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
29034 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
29038 0bf 0A F0 07 F6 |                             mov     ptra, #10
2903c 0c0 E1 F1 03 FA |                             mul     ptra, id
29040 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
29044 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
29048 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2904c 0c4 03 C2 07 FA |                             mul     id, #3
29050 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
29054 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
29058 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2905c 0c8 D8 01 B0 FD |                             call    #reloadcogs
29060 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
29064 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
29068 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
29068 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2906c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
29070 0cd 08 04 DC FC |                             rep     #2, #8
29074 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
29078 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2907c 0d0             | 
2907c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2907c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2907c 0d0 01 C2 63 FD |                             cogid   id
29080 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
29084 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
29088 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2908c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
29090 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
29094 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
29098 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2909c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
290a0 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
290a4 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
290a8 0db 3F E4 A7 F9 |                             alti    d, #%111_111
290ac 0dc 00 00 00 F6 |                             mov     0-0, 0-0
290b0 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
290b4 0de A5 E5 03 F1 |                             add     d, const512
290b8 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
290bc 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
290c0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
290c4 0e2             |                             
290c4 0e2             |                             ' setup register values for control vector loop setup after we return
290c4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
290c8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
290cc 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
290d0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
290d4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
290d8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
290dc 0e8 D0 C3 8F F9 |                             altd    id, #id0
290e0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
290e4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
290e8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
290ec 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
290f0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
290f4 0ee             |  
290f4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
290f8 0ef 07 CA 07 F5 |                             and     request, #7
290fc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
29100 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
29104 0f2             |                             fit     $100                    'ensure all init code fits this space
29104 0f2             | 
29104 0f2             |                             fit     $100                    'ensure all init code fits this space
29104 0f2             | 
29104 0f2 00 00 00 00 
      ...             
29134 0fe 00 00 00 00 
29138 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2913c 100             | 
2913c 100             | '..................................................................................................
2913c 100             | ' Error result handling and COG notification of request completion
2913c 100             | 
2913c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
29140 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
29144 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
29148 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2914c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
29150 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
29154 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
29158 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2915c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
29160 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
29164 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
29168 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2916c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
29170 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
29174 10e             | ' Poller re-starts here after a COG is serviced
29174 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
29178 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2917c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
29180 111             | ' Main dynamic polling loop repeats until a request arrives
29180 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
29184 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
29188 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2918c 114             | 
2918c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
29190 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
29194 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
29198 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2919c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
291a0 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
291a4 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
291a8 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
291ac 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
291b0 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
291b4 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
291b8 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
291bc 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
291c0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
291c4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
291c8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
291cc 124             | 
291cc 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
291d0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
291d4 126             |  
291d4 126             | '..................................................................................................
291d4 126             | ' List handler                               
291d4 126             | 
291d4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
291d8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
291dc 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
291e0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
291e4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
291e8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
291ec 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
291f0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
291f4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
291f8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
291fc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
29200 131 33 00 60 FD |                             execf   0-0                     'process the request 
29204 132             | 
29204 132             | '..................................................................................................
29204 132             | ' Restoring per COG state and resuming where we left off
29204 132             | 
29204 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
29208 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2920c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
29210 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
29214 136 D8 CB FB F8 |                             getbyte request, addr1, #3
29218 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2921c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
29220 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
29224 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
29228 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2922c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
29230 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
29234 13e             |                    
29234 13e             | '..................................................................................................
29234 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
29234 13e             | 
29234 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
29238 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2923c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
29240 141 D0 DF B7 F9 |                             setd    a, #id0
29244 142 D8 DF BF F9 |                             sets    a, #addr1
29248 143 FE FF FF FF 
2924c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
29250 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
29254 146 3F DE A7 F9 |                             alti    a, #%111_111 
29258 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2925c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
29260 149 01 E2 63 FD |                             cogid   c
29264 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
29268 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2926c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
29270 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
29274 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
29278 14f 00 E0 03 F6 |                             mov     b, 0-0
2927c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
29280 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
29284 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
29288 153 0C 00 90 AD |             if_z            jmp     #excluded               
2928c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
29290 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
29294 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
29298 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2929c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
292a0 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
292a4 15a             | 
292a4 15a             | 'determine priority cogs and build instructions for the polling sequence
292a4 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
292a8 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
292ac 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
292b0 15d             | 
292b0 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
292b4 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
292b8 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
292bc 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
292c0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
292c4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
292c8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
292cc 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
292d0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
292d4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
292d8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
292dc 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
292e0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
292e4 16a             | endprioloop
292e4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
292e8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
292ec 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
292f0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
292f4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
292f8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
292fc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
29300 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
29304 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
29308 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2930c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
29310 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
29314 176             | 
29314 176             | ' populate the round robin COG polling instructions
29314 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
29318 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2931c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
29320 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
29324 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
29328 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2932c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
29330 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
29334 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
29338 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2933c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
29340 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
29344 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
29348 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2934c 184             | '..................................................................................................
2934c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2934c 184             | 
2934c 184             | set_latency                                                 '            (a) set latency
2934c 184             | get_latency                                                 '            (b) get latency
2934c 184             | set_burst                                                   '            (c) set burst size of bank
2934c 184             | get_burst                                                   '            (d) get burst size of bank
2934c 184             |                                                             '            (e) dump state
2934c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
29350 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
29354 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
29358 187             |                                                             ' | | | | e  account for following AUGS
29358 187 04 00 00 FF 
2935c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
29360 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
29364 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
29368 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2936c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
29370 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
29374 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
29378 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2937c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
29380 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
29384 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
29388 193             | 
29388 193             | '..................................................................................................
29388 193             | ' Misc EXECF code
29388 193             | 
29388 193 33 72 63 FD | start_read_exec             execf   newburstr
2938c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
29390 195 33 78 63 FD | continue_read_exec          execf   lockedreads
29394 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
29398 197             | 
29398 197             | '..................................................................................................
29398 197             | ' Variables
29398 197             | 
29398 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2939c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
293a0 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
293a4 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
293a8 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
293ac 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
293b0 19d             | 
293b0 19d 00 00 00 80 | xfreq1          long    $80000000
293b4 19e 00 00 00 40 | xfreq2          long    $40000000
293b8 19f 03 00 00 00 | delay           long    3
293bc 1a0             | 
293bc 1a0             | lutcodeaddr                 
293bc 1a0             | startupparams
293bc 1a0             | excludedcogs                                    'careful: shared register use!
293bc 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
293c0 1a1 00 00 00 00 | flags           long    0
293c4 1a2             | mask                                            'careful: shared register use!
293c4 1a2 00 00 00 00 | resetmaskA      long    0
293c8 1a3             | limit                                           'careful: shared register use!
293c8 1a3 00 00 00 00 | resetmaskB      long    0
293cc 1a4 00 00 00 00 | datapins        long    0
293d0 1a5             | const512                                        'careful: shared register use!
293d0 1a5 00 00 00 00 | devicelist      long    0
293d4 1a6 00 00 00 00 | coglist         long    0
293d8 1a7 00 00 00 00 | mbox            long    0 
293dc 1a8             | 
293dc 1a8             | clkpin                                          'shared with code patched during init
293dc 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
293e0 1a9             | cspin                                           'shared with code patched during init
293e0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
293e4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
293e8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
293ec 1ac 01 00 00 00 | clkdelay        long    1
293f0 1ad 00 00 00 00 | regdatabus      long    0
293f4 1ae             | 
293f4 1ae 10 00 00 00 | deviceaddr      long    $10
293f8 1af             | rrcounter
293f8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
293fc 1b0             | 
293fc 1b0             | ' jump addresses for the per COG handlers
293fc 1b0 20 00 00 00 | cog0_handler    long    cog0
29400 1b1 2C 00 00 00 | cog1_handler    long    cog1
29404 1b2 38 00 00 00 | cog2_handler    long    cog2
29408 1b3 44 00 00 00 | cog3_handler    long    cog3
2940c 1b4 50 00 00 00 | cog4_handler    long    cog4
29410 1b5 5C 00 00 00 | cog5_handler    long    cog5
29414 1b6 68 00 00 00 | cog6_handler    long    cog6
29418 1b7 74 00 00 00 | cog7_handler    long    cog7
2941c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
29420 1b9             | 
29420 1b9             | ' EXECF sequences
29420 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
29424 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
29428 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2942c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
29430 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
29434 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
29438 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2943c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2943c 1c0             | 
2943c 1c0             | 
2943c 1c0             | ' SKIPF sequences
2943c 1c0             | skiptable
2943c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
29440 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
29444 1c2 00 00 00 00 |                 long    0                      ' read modify write long
29448 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2944c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
29450 1c5 00 00 00 00 | pattern2        long    0
29454 1c6 00 00 00 00 | pattern3        long    0
29458 1c7 77 02 00 00 | singlelong      long    %1001110111  
2945c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
29460 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
29464 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
29468 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2946c 1cc             | 
2946c 1cc             | ' LUT RAM address values
2946c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
29470 1cd DD 02 00 00 | continue_read   long    continue_read_lut
29474 1ce DB 02 00 00 | continue_write  long    continue_write_lut
29478 1cf F6 02 00 00 | noread          long    noread_lut
2947c 1d0             | 
2947c 1d0 00 00 00 00 | id0             long    0
29480 1d1 01 00 00 00 | id1             long    1
29484 1d2 02 00 00 00 | id2             long    2
29488 1d3 03 00 00 00 | id3             long    3
2948c 1d4 04 00 00 00 | id4             long    4
29490 1d5 05 00 00 00 | id5             long    5
29494 1d6 06 00 00 00 | id6             long    6
29498 1d7 07 00 00 00 | id7             long    7
2949c 1d8             | 
2949c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2949c 1d8             | 'and COG updates and need to follow immediately after id0-id7
2949c 1d8 00 00 00 00 | addr1           long    0
294a0 1d9 00 00 00 00 | hubdata         long    0
294a4 1da 00 00 00 00 | count           long    0
294a8 1db 00 00 00 00 | addr2           long    0
294ac 1dc 00 00 00 00 | total           long    0
294b0 1dd 00 00 00 00 | offset1         long    0
294b4 1de 00 00 00 00 | offset2         long    0
294b8 1df 00 00 00 00 | link            long    0
294bc 1e0             | 
294bc 1e0             | burstwrite                                      'note shared register use during init
294bc 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
294c0 1e1 00 00 00 00 | id              long    0
294c4 1e2             | 
294c4 1e2 00 00 00 00 | header          long    0
294c8 1e3 00 00 00 00 | trailer         long    0
294cc 1e4 00 00 00 00 | cmdaddr         long    0
294d0 1e5 00 00 00 00 | request         long    0
294d4 1e6 00 00 00 00 | rrlimit         long    0
294d8 1e7 00 00 00 00 | pinconfig       long    0
294dc 1e8 00 00 00 00 | clks            long    0
294e0 1e9 00 00 00 00 | resume          long    0
294e4 1ea 00 00 00 00 | orighubsize     long    0
294e8 1eb 00 00 00 00 | wrclks          long    0
294ec 1ec             | 
294ec 1ec 00 00 00 00 | pattern         long    0
294f0 1ed 00 00 00 00 | hubscratch      long    0
294f4 1ee 00 10 00 00 | val4k           long    4096
294f8 1ef             | 
294f8 1ef             | ' temporary general purpose regs
294f8 1ef 00 00 00 00 | a               long    0
294fc 1f0 00 00 00 00 | b               long    0
29500 1f1 00 00 00 00 | c               long    0
29504 1f2 00 00 00 00 | d               long    0
29508 1f3             |                 fit     502
29508 1f3             | 
29508 1f3             |                 fit     502
29508 1f3             | 
29508 1f3             | '..................................................................................................
29508 1f3             | 
29508 1f3             |             orgh
29508                 | 
29508                 | lut_code
29508                 | 'HW init code up to 80 longs
29508                 | 
29508                 | '..................................................................................................
29508                 | ' Memory layout for LUT RAM once operational:
29508                 | '
29508                 | '  LUT RAM address      Usage
29508                 | '  ---------------      ----
29508                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
29508                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
29508                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
29508                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
29508                 | '
29508                 | ' Also during driver COG startup:
29508                 | ' $230-$24F is used for HW init setup
29508                 | ' $250-$26F is used as temporary vector storage 
29508                 | '..................................................................................................
29508                 | 
29508                 |                 org $230    
29508 230             | 
29508 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
29508 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2950c 231 24 16 60 FD |                             pollxfi
29510 232 FF AA 2A FF 
29514 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
29518 234 28 00 B0 FD |                             call    #sendqspi
2951c 235 07 F8 07 FF 
29520 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
29524 237 28 00 B0 FD |                             call    #sendspi
29528 238 F8 07 78 FF 
2952c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
29530 23a 1C 00 B0 FD |                             call    #sendspi
29534 23b 7F 78 78 FF 
29538 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2953c 23d 10 00 B0 FD |                             call    #sendspi 
29540 23e 2D 00 64 FD |                             ret
29544 23f             | 
29544 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
29548 240 32 0C 64 FD |                             skipf   #%110
2954c 241 9C EF 03 F6 |                             mov     pb, xsendimm
29550 242             | 
29550 242 10 D0 07 F6 | sendspi                     mov     clks, #16
29554 243 97 EF 03 F6 |                             mov     pb, ximm8lut
29558 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2955c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29560 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
29564 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
29568 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2956c 249 50 48 63 FD |                             fltl    datapins                'float data bus
29570 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
29574 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
29578 24c             | 
29578 24c 00 00 00 00 
2957c 24d 00 00 00 00 
29580 24e 00 00 00 00 
29584 24f 00 00 00 00 |                 long    0[$270-32-$]
29588 250             |                 fit     $270-32  ' keep room for 32 vector longs
29588 250             |     
29588 250             |                 fit     $270-32  ' keep room for 32 vector longs
29588 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
29588 250             | rw_vect ' PSRAM jump vectors
29588 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2958c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29590 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
29594 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
29598 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2959c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
295a0 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
295a4 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
295a8 258             | ro_vect ' R/O PSRAM jump vectors
295a8 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
295ac 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
295b0 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
295b4 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
295b8 25c 00 01 00 00 |                 long    unsupported
295bc 25d 00 01 00 00 |                 long    unsupported
295c0 25e 00 01 00 00 |                 long    unsupported
295c4 25f 00 01 00 00 |                 long    unsupported
295c8 260             | ctrl_vect ' Control jump vectors
295c8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
295cc 261 00 01 00 00 |                 long    unsupported
295d0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
295d4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
295d8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
295dc 265 00 01 00 00 |                 long    unsupported
295e0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
295e4 267 3E 01 00 00 |                 long    reconfig 
295e8 268             | no_vect ' Invalid bank jump vectors
295e8 268 01 01 00 00 |                 long    invalidbank
295ec 269 01 01 00 00 |                 long    invalidbank
295f0 26a 01 01 00 00 |                 long    invalidbank
295f4 26b 01 01 00 00 |                 long    invalidbank
295f8 26c 01 01 00 00 |                 long    invalidbank
295fc 26d 01 01 00 00 |                 long    invalidbank
29600 26e 01 01 00 00 |                 long    invalidbank
29604 26f 01 01 00 00 |                 long    invalidbank
29608 270             |                 fit     $270
29608 270             | 
29608 270             |                 fit     $270
29608 270             | '..................................................................................................
29608 270             | ' PSRAM READS
29608 270             |                                                             ' a b c d e f
29608 270             |                                                             ' B W L B R L  (a) byte read
29608 270             |                                                             ' Y O O U E O  (b) word read
29608 270             |                                                             ' T R N R S C  (c) long read
29608 270             |                                                             ' E D G S U K  (d) new burst read
29608 270             |                                                             '       T M E  (e) resumed sub-burst
29608 270             |                                                             '         E D  (f) locked sub-burst
29608 270             | 
29608 270             | 
29608 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2960c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
29610 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
29614 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
29618 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2961c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
29620 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
29624 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
29628 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2962c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
29630 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
29634 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
29638 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2963c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
29640 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
29644 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
29648 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2964c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
29650 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
29654 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
29658 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2965c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
29660 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
29664 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
29668 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2966c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
29670 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
29674 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
29678 28c             | 
29678 28c             |                             ' fall through to read bursts
29678 28c             |                         
29678 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
29678 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2967c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29680 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
29684 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
29688 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2968c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
29690 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
29694 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
29698 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2969c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
296a0 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
296a4 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
296a8 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
296ac 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
296b0 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
296b4 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
296b8 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
296bc 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
296c0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
296c4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
296c8 2a0 E8 D1 03 F1 |                             add     clks, clks
296cc 2a1             | readcommon
296cc 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
296d0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
296d4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
296d8 2a4             | 
296d8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
296dc 2a5 69 C8 63 FD |                             rev     cmdaddr
296e0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
296e4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
296e8 2a8             | 
296e8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
296ec 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
296f0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
296f0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
296f4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
296f8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
296fc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
29700 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
29700 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
29704 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
29708 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2970c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
29710 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
29714 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
29718 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
29718 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2971c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
29720 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
29724 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
29728 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2972c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
29730 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
29734 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
29738 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2973c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
29740 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
29744 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
29748 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2974c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
29750 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
29750 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
29754 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
29758 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2975c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
29760 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
29764 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
29768 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2976c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
29770 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
29774 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
29778 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2977c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
29780 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
29784 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
29788 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2978c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
29790 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
29794 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
29798 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2979c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
297a0 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
297a4 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
297a8 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
297ac 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
297b0 2da 10 03 90 FD |                             jmp     #writecommon
297b4 2db             | 
297b4 2db             | '..................................................................................................
297b4 2db             | ' Burst continuation testing
297b4 2db             | 
297b4 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
297b8 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
297bc 2dd             | continue_read_lut          
297bc 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
297c0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
297c4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
297c8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
297cc 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
297d0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
297d4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
297d8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
297dc 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
297e0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
297e4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
297e8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
297ec 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
297f0 2ea             | 
297f0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
297f4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
297f8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
297fc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
29800 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
29804 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
29808 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2980c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
29810 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
29814 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
29818 2f4 2A 1C 66 0D |             _ret_           push    #poller
2981c 2f5             | 
2981c 2f5             | 
2981c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
29820 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
29820 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
29824 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
29828 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2982c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
29830 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
29834 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
29838 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2983c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
29840 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
29844 2ff             | '..................................................................................................
29844 2ff             | ' Completion of requests
29844 2ff             | 
29844 2ff             | complete_rw_lut             
29844 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
29848 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2984c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
29850 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
29854 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
29858 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2985c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
29860 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
29864 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
29868 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2986c 309 32 62 64 AD |             if_z            skipf   #%110001
29870 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
29874 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
29878 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2987c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
29880 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
29884 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
29888 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2988c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
29890 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
29894 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
29898 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2989c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
298a0 316             |                                                             ' skipcase (a) gfx copy to/from hub
298a0 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
298a0 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
298a0 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
298a4 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
298a8 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
298ac 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
298b0 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
298b4 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
298b8 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
298bc 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
298c0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
298c4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
298c8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
298cc 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
298d0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
298d4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
298d8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
298dc 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
298e0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
298e4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
298e8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
298ec 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
298f0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
298f4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
298f8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
298fc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
29900 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
29904 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
29908 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2990c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
29910 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
29914 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
29918 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2991c 335 DF B7 03 A6 |             if_z            mov     addr2, link
29920 336 34 FF 9F AD |             if_z            jmp     #checknext
29924 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
29928 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2992c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
29930 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
29934 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
29938 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2993c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
29940 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
29944 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
29948 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2994c 341             | 
2994c 341             | '..................................................................................................
2994c 341             | ' PSRAM WRITES
2994c 341             |                                                             '  a b c d e f g h
2994c 341             | 
2994c 341             |                                                             '  B W L F B R L L (a) byte write(s)
2994c 341             |                                                             '  Y O O I U E O O (b) word write(s)
2994c 341             |                                                             '  T R N L R S C C (c) long write(s)
2994c 341             |                                                             '  E D G L S U K K (d) resumed fill
2994c 341             |                                                             '          T M E E (e) new burst write
2994c 341             |                                                             '            E D D (f) resumed burst
2994c 341             |                                                             '              F B (g) locked fill
2994c 341             |                                                             '              I U (h) locked burst write
2994c 341             |                                                             '              L R 
2994c 341             |                                                             '              L S 
2994c 341             |                                                             '                T 
2994c 341             | 
2994c 341             | w_single                   
2994c 341             | w_fill_cont           
2994c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
29950 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
29954 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
29958 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2995c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
29960 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
29964 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
29968 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2996c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
29970 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
29974 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
29978 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2997c 34d             |                ' disable call to r_resume_burst for single longs when z=0
2997c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
29980 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
29984 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
29988 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2998c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
29990 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
29994 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
29998 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2999c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
299a0 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
299a4 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
299a8 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
299ac 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
299b0 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
299b4 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
299b8 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
299bc 35d             |         
299bc 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
299bc 35d             |             '
299bc 35d             |             '  At least one of these 3 optional components will be sent
299bc 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
299bc 35d             |             '     body - N x full longs of data
299bc 35d             |             '     trailer - last partial long of data
299bc 35d             |             '
299bc 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
299bc 35d             |             '
299bc 35d             |             'Case    Type                           Sends
299bc 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
299bc 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
299bc 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
299bc 35d             |             ' 4)     Multiple long fill             body only
299bc 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
299bc 35d             | 
299bc 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
299bc 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
299c0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
299c4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
299c8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
299cc 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
299d0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
299d4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
299d8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
299dc 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
299e0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
299e4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
299e8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
299ec 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
299f0 36a             |                             
299f0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
299f4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
299f8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
299fc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
29a00 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
29a04 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
29a08 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
29a0c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
29a10 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
29a14 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
29a18 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
29a1c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
29a20 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
29a24 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
29a28 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
29a2c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
29a30 37a             | 
29a30 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29a34 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
29a38 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
29a3c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
29a40 37e             |                  
29a40 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
29a44 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
29a48 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
29a4c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
29a50 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
29a54 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
29a58 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
29a5c 385             | 
29a5c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
29a60 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
29a64 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
29a68 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
29a6c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
29a70 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
29a74 38b             | 
29a74 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
29a74 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
29a78 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
29a7c 38d 2A B0 63 FD |                             push    addr1                   'save address
29a80 38e             | 
29a80 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
29a80 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
29a84 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
29a88 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
29a8c 391             |             
29a8c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
29a90 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
29a94 393 2B B0 63 FD |                             pop     addr1                   'restore address
29a98 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
29a9c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
29aa0 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
29aa4 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
29aa8 398             | 
29aa8 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
29aac 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
29ab0 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
29ab4 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
29ab8 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
29abc 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
29ac0 39e             | 
29ac0 39e             |                             'trailer is done
29ac0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
29ac4 39f             | 
29ac4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
29ac8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
29acc 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
29ad0 3a2             | 
29ad0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29ad4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
29ad8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29adc 3a5 61 C8 63 FD |                             mergeb  cmdaddr
29ae0 3a6             |                             
29ae0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
29ae4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29ae8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
29aec 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
29af0 3aa             |                                                          
29af0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
29af4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
29af8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
29afc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
29b00 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
29b04 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
29b08 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
29b0c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
29b10 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
29b14 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
29b18 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
29b1c 3b5             |  
29b1c 3b5 59 52 63 FD |                             drvh    cspin
29b20 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
29b24 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
29b28 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
29b2c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
29b30 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
29b34 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
29b38 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
29b3c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
29b40 3be EA E5 03 F6 |                             mov     d, orighubsize
29b44 3bf EF E5 63 F0 |                             shl     d, a
29b48 3c0 F2 E3 83 F1 |                             sub     c, d
29b4c 3c1 DD E3 03 F1 |                             add     c, offset1
29b50 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
29b54 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
29b58 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
29b5c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
29b60 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
29b64 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
29b68 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
29b6c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29b70 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
29b74 3cb BB D3 03 F6 |                             mov     resume, restorefill
29b78 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
29b7c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
29b80 3ce 6C FC BF CD |             if_c            call    #yield
29b84 3cf 2D 00 64 FD |                             ret
29b88 3d0             |                            
29b88 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
29b88 3d0             |                       '     rczl    pa                      'rotate left into address offset
29b88 3d0             |                       '     rczl    c wcz                   'restore count and flags
29b88 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
29b8c 3d1 02 EC 67 F0 |                             shl     pa, #2
29b90 3d2 28 06 64 AD |             if_z            setq    #3
29b94 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
29b98 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
29b9c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
29ba0 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
29ba4 3d7             | 
29ba4 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
29ba8 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
29bac 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
29bb0 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
29bb4 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
29bb8 3dc             |                 fit 1024-32
29bb8 3dc             |         
29bb8 3dc             | 
29bb8 3dc             | '..................................................................................................
29bb8 3dc             | 
29bb8 3dc             |                 fit 1024-32
29bb8 3dc 00 00 00 00 
29bbc 3dd 00 00 00 00 
29bc0 3de 00 00 00 00 
29bc4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
29bc8 3e0             |                 org 1024-32
29bc8 000             | 
29bc8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
29bc8 000 00 00 00 00 |                 long $0000
29bcc 001 11 11 00 00 |                 long $1111
29bd0 002 22 22 00 00 |                 long $2222
29bd4 003 33 33 00 00 |                 long $3333
29bd8 004 44 44 00 00 |                 long $4444
29bdc 005 55 55 00 00 |                 long $5555
29be0 006 66 66 00 00 |                 long $6666
29be4 007 77 77 00 00 |                 long $7777
29be8 008 88 88 00 00 |                 long $8888
29bec 009 99 99 00 00 |                 long $9999
29bf0 00a AA AA 00 00 |                 long $aaaa
29bf4 00b BB BB 00 00 |                 long $bbbb
29bf8 00c CC CC 00 00 |                 long $cccc
29bfc 00d DD DD 00 00 |                 long $dddd
29c00 00e EE EE 00 00 |                 long $eeee
29c04 00f FF FF 00 00 |                 long $ffff
29c08 010             | 
29c08 010             | 'masks
29c08 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
29c0c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
29c10 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
29c14 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
29c18 014             | 
29c18 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
29c1c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
29c20 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
29c24 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
29c28 018             | 
29c28 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
29c2c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
29c30 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
29c34 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
29c38 01c             | 
29c38 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
29c3c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
29c40 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
29c44 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
29c48 020             |         fit 1024
29c48 020             | 
29c48 020             |         fit 1024
29c48 020             | 
29c48 020             | '--------------------------------------------------------------------------------------------------
29c48 020             |         orgh
29c48                 | 
29c48                 | gfxexpansion
29c48                 |                             'simple line drawing graphics expansion of memory driver
29c48                 |                             'jmp     #donerepeats                'just return for now
29c48                 | 
29c48     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
29c4c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
29c50     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
29c54     DD E1 03 F6 |                             mov     b, offset1              'get error term
29c58     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
29c5c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
29c60     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
29c64     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
29c68     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
29c6c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
29c70     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
29c74     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
29c78     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
29c7c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
29c80     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
29c84     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
29c88     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
29c8c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
29c90     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
29c94     DC E5 33 F9 |                             getword d, total, #0            'get line width
29c98     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
29c9c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
29ca0     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
29ca4     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
29ca8     C3 03 80 FD |                             jmp     #readmask               'continue filling
29cac                 | 	alignl
29cac                 | _usbnew_spin2_dat_
29cac                 |                 org     $000
29cac 000             | 
29cac 000             | usb_host_start
29cac 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
29cb0 001             | 
29cb0 001 03 00 00 FF 
29cb4 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
29cb8 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
29cbc 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
29cc0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
29cc4 006 29 70 63 FD |                 setq2   htmp
29cc8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
29ccc 008             | 
29ccc 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
29cd0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
29cd4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
29cd8 00b             | 
29cd8 00b             | '------------------------------------------------------------------------------
29cd8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
29cd8 00b             | ' special because the receiving function must not respond with either STALL or
29cd8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
29cd8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
29cd8 00b             | ' corrupt packet, it must ignore the transaction
29cd8 00b             | '------------------------------------------------------------------------------
29cd8 00b             | ' On entry:
29cd8 00b             | '   PTRA - start address of the SETUP data struct.
29cd8 00b             | ' On exit:
29cd8 00b             | '   retval - PID_ACK on success, otherwise error code.
29cd8 00b             | '------------------------------------------------------------------------------
29cd8 00b             | txn_setup
29cd8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
29cdc 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
29ce0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
29ce4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
29ce8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
29cec 010             | .setup
29cec 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
29cf0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29cf4 012 2D 00 64 AD |         if_z    ret
29cf8 013 7C 0B B0 FD |                 call    #retry_wait
29cfc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29d00 015 2D 00 64 AD |         if_z    ret
29d04 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
29d08 017 E0 FF 9F FD |                 jmp     #.setup
29d0c 018             | 
29d0c 018             | '------------------------------------------------------------------------------
29d0c 018             | ' IN/INTERRUPT transaction.
29d0c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
29d0c 018             | '------------------------------------------------------------------------------
29d0c 018             | ' On entry:
29d0c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
29d0c 018             | '     CRC(b19..23).
29d0c 018             | ' On exit:
29d0c 018             | '------------------------------------------------------------------------------
29d0c 018             | txn_in
29d0c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
29d10 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
29d14 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
29d18 01b             | 
29d18 01b             |                 ' Fall through to urx_packet
29d18 01b             | 
29d18 01b             | '------------------------------------------------------------------------------
29d18 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
29d18 01b             | ' received are handshakes and IN DATAx.
29d18 01b             | '------------------------------------------------------------------------------
29d18 01b             | ' On entry:
29d18 01b             | ' On exit:
29d18 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
29d18 01b             | '     returned.
29d18 01b             | '------------------------------------------------------------------------------
29d18 01b             | urx_packet
29d18 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
29d1c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29d20 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
29d24 01e 1A 92 63 FD |                 getct   hct2
29d28 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
29d2c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
29d30 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
29d34 022             | .wait_sop
29d34 022 22 A7 8A FA |                 rdpin   urx, dm
29d38 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29d3c 024 08 00 90 CD |         if_c    jmp     #.get_pid
29d40 025 FC 25 CC FB |                 jnct2   #.wait_sop
29d44 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
29d48 027             | .get_pid
29d48 027 28 02 B0 FD |                 call    #urx_next
29d4c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
29d50 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
29d54 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
29d58 02b             | .chk_pid
29d58 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29d5c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
29d60 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
29d64 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
29d68 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
29d6c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
29d70 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
29d74 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
29d78 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
29d7c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
29d80 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
29d84 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
29d88 037             | .ack_resend
29d88 037 22 A7 82 FA |                 rqpin   urx, dm
29d8c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
29d90 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
29d94 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
29d98 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
29d9c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
29da0 03d             | .chk_eop
29da0 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29da4 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
29da8 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
29dac 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
29db0 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
29db4 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
29db8 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
29dbc 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
29dc0 045 2D 00 64 FD |                 ret
29dc4 046             | .idle
29dc4 046 22 A7 82 FA |                 rqpin   urx, dm
29dc8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29dcc 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
29dd0 049 2D 00 64 FD |                 ret
29dd4 04a             | 
29dd4 04a             | '------------------------------------------------------------------------------
29dd4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
29dd4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
29dd4 04a             | ' if one is required.
29dd4 04a             | '------------------------------------------------------------------------------
29dd4 04a             | ' On entry:
29dd4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
29dd4 04a             | ' On exit:
29dd4 04a             | '------------------------------------------------------------------------------
29dd4 04a             | utx_token
29dd4 04a 22 A7 82 FA |                 rqpin   urx, dm
29dd8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29ddc 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
29de0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29de4 04e 34 0D B0 CD |         if_c    call    #utx_pre
29de8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
29dec 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
29df0 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
29df4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
29df8 053             | .next_byte
29df8 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
29dfc 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
29e00 055             | .wait
29e00 055 40 46 72 FD |                 testp   dp                      wc
29e04 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
29e08 057 23 03 08 FC |                 akpin   dp
29e0c 058 22 A5 22 FC |                 wypin   utx, dm
29e10 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
29e14 05a             | 
29e14 05a             | '------------------------------------------------------------------------------
29e14 05a             | ' SETUP/OUT/INTERRUPT transaction.
29e14 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
29e14 05a             | '------------------------------------------------------------------------------
29e14 05a             | ' On entry:
29e14 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
29e14 05a             | '     CRC(b19..23).
29e14 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
29e14 05a             | '   pkt_data - count of DATAx payload bytes to send.
29e14 05a             | ' On exit:
29e14 05a             | '------------------------------------------------------------------------------
29e14 05a             | txn_out
29e14 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
29e18 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
29e1c 05c 00 00 C0 FF 
29e20 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
29e24 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
29e28 05f             | 
29e28 05f             |                 ' Fall through to utx_data
29e28 05f             | 
29e28 05f             | '------------------------------------------------------------------------------
29e28 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
29e28 05f             | ' calculated while the data byte is being shifted out. Since data stage
29e28 05f             | ' success/fail is not determined until the status stage of the transaction,
29e28 05f             | ' this routine is only concerned about the current DATAx packet.
29e28 05f             | '------------------------------------------------------------------------------
29e28 05f             | ' On entry:
29e28 05f             | '   PTRA - hub start address of the data to read.
29e28 05f             | '   pkt_cnt - data payload size.
29e28 05f             | ' On exit:
29e28 05f             | '------------------------------------------------------------------------------
29e28 05f             | utx_data
29e28 05f 22 A7 82 FA |                 rqpin   urx, dm
29e2c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29e30 061 F4 FF 9F CD |         if_c    jmp     #utx_data
29e34 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
29e38 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
29e3c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29e40 065 D8 0C B0 CD |         if_c    call    #utx_pre
29e44 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
29e48 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
29e4c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
29e50 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
29e54 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
29e58 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
29e5c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
29e60 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
29e64 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
29e68 06f             | .read_byte
29e68 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
29e6c 070 F0 00 B0 FD |                 call    #utx_byte
29e70 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
29e74 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
29e78 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
29e7c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
29e80 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
29e84 076             | .send_crc
29e84 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
29e88 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
29e8c 078 D0 00 B0 FD |                 call    #utx_byte
29e90 079 5D A5 EA F8 |                 getbyte utx, crc, #1
29e94 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
29e98 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
29e9c 07c             | 
29e9c 07c             | '------------------------------------------------------------------------------
29e9c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
29e9c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
29e9c 07c             | ' expects that the packet includes at least the CRC word.
29e9c 07c             | '
29e9c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
29e9c 07c             | ' was requested, which makes it difficult to determine where the data stops
29e9c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
29e9c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
29e9c 07c             | ' USB-16 expected residual value of 0xB001.
29e9c 07c             | '
29e9c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
29e9c 07c             | ' so the caller can verify IN success before writing the data to its final
29e9c 07c             | ' destination.
29e9c 07c             | '------------------------------------------------------------------------------
29e9c 07c             | ' On entry:
29e9c 07c             | '   pkt_data - max byte count expected to be in the packet.
29e9c 07c             | '   newb_flg - signals new byte ready when toggled.
29e9c 07c             | ' On exit:
29e9c 07c             | '   pkt_cnt - actual number of bytes read.
29e9c 07c             | '------------------------------------------------------------------------------
29e9c 07c             | urx_data
29e9c 07c F7 75 03 F6 |                 mov     htmp2, pb
29ea0 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
29ea4 07e 00 00 C0 FF 
29ea8 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
29eac 080 BA EF 03 F6 |                 mov     pb, htmp2
29eb0 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
29eb4 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
29eb8 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
29ebc 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
29ec0 085             | .wait_byte
29ec0 085             | ' In-line rx for max speed
29ec0 085 22 A7 82 FA |                 rqpin   urx, dm
29ec4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
29ec8 087 53 A5 02 F5 |                 and     utx, urx
29ecc 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
29ed0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
29ed4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
29ed8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
29edc 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
29ee0 08d DC FF 9F FD |                 jmp     #.wait_byte
29ee4 08e             | .get_byte
29ee4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
29ee8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
29eec 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
29ef0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
29ef4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
29ef8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
29efc 094             | .end_crc
29efc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
29f00 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
29f04 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
29f08 097 2D 00 64 1D |         if_a    ret
29f0c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
29f0c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
29f0c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
29f0c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
29f0c 098 22 A7 82 FA |                 rqpin   urx, dm
29f10 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
29f14 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
29f18 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
29f18 09b             | .chk_crc
29f18 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
29f1c 09c 58 00 00 FF 
29f20 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
29f24 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
29f28 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
29f2c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
29f30 0a1 34 09 B0 FD |                 call    #poll_waitx
29f34 0a2             | 
29f34 0a2             |                 ' Fall through to utx_handshake
29f34 0a2             | 
29f34 0a2             | '------------------------------------------------------------------------------
29f34 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
29f34 0a2             | ' the appropriate IP delay has been inserted.
29f34 0a2             | '------------------------------------------------------------------------------
29f34 0a2             | ' On entry:
29f34 0a2             | '   retval - handshake PID to send.
29f34 0a2             | ' On exit:
29f34 0a2             | '   retval unchanged.
29f34 0a2             | '------------------------------------------------------------------------------
29f34 0a2             | utx_handshake
29f34 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29f38 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
29f3c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
29f40 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
29f44 0a6 5F A5 02 F6 |                 mov     utx, retval
29f48 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
29f4c 0a8             | .idle
29f4c 0a8 22 A7 82 FA |                 rqpin   urx, dm
29f50 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29f54 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
29f58 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
29f5c 0ac 08 09 90 FD |                 jmp     #poll_waitx
29f60 0ad             | 
29f60 0ad             | '------------------------------------------------------------------------------
29f60 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
29f60 0ad             | '------------------------------------------------------------------------------
29f60 0ad             | ' On entry:
29f60 0ad             | '   utx - byte to transmit.
29f60 0ad             | ' On exit:
29f60 0ad             | '------------------------------------------------------------------------------
29f60 0ad             | utx_byte
29f60 0ad 40 46 72 FD |                 testp   dp                      wc
29f64 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
29f68 0af 23 03 08 FC |                 akpin   dp
29f6c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
29f70 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
29f74 0b2             | 
29f74 0b2             | '------------------------------------------------------------------------------
29f74 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
29f74 0b2             | '------------------------------------------------------------------------------
29f74 0b2             | ' On entry:
29f74 0b2             | ' On exit:
29f74 0b2             | '   retval - the byte read.
29f74 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
29f74 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
29f74 0b2             | '     received.
29f74 0b2             | '------------------------------------------------------------------------------
29f74 0b2             | urx_next
29f74 0b2 22 A7 8A FA |                 rdpin   urx, dm
29f78 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
29f7c 0b4 53 A5 02 F5 |                 and     utx, urx
29f80 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
29f84 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
29f88 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
29f8c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
29f90 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29f94 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
29f98 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
29f9c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
29fa0 0bd 2D 00 64 FD |                 ret
29fa4 0be             | 
29fa4 0be             | '------------------------------------------------------------------------------
29fa4 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
29fa4 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
29fa4 0be             | ' length, and the PID is not included in the CRC calculation:
29fa4 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
29fa4 0be             | '  CRC5  ENDP ADDRESS PID
29fa4 0be             | ' %00000_1111_1111111_xxxxxxxx
29fa4 0be             | '------------------------------------------------------------------------------
29fa4 0be             | ' On entry:
29fa4 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
29fa4 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
29fa4 0be             | ' On exit:
29fa4 0be             | '   ep_addr_pid - CRC value appended to the packet.
29fa4 0be             | '------------------------------------------------------------------------------
29fa4 0be             | calc_crc5
29fa4 0be FF 03 00 FF 
29fa8 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
29fac 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
29fb0 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
29fb4 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
29fb8 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
29fbc 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
29fc0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
29fc4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
29fc8 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
29fcc 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
29fd0 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
29fd4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
29fd8 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
29fdc 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
29fe0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
29fe4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
29fe8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
29fec 0d0             | 
29fec 0d0             | '------------------------------------------------------------------------------
29fec 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
29fec 0d0             | '------------------------------------------------------------------------------
29fec 0d0             | isr1_fsframe
29fec 0d0 1A 92 62 FD |                 getct   iframe_ct_base
29ff0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29ff4 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
29ff8 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
29ffc 0d4             | .wait
29ffc 0d4 40 46 72 FD |                 testp   dp                      wc
2a000 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a004 0d6 23 03 08 FC |                 akpin   dp
2a008 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2a00c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2a010 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2a014 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2a018 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2a01c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2a020 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2a024 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2a028 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2a02c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2a030 0e1 2C FF BF FD |                 call    #utx_byte
2a034 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2a038 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2a03c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2a040 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2a044 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2a048 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2a04c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2a050 0e9 5B A5 42 F5 |                 or      utx, icrc
2a054 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2a058 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2a05c 0ec 20 00 90 FD |                 jmp     #isr1_wait
2a060 0ed             | isr1_lsframe
2a060 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2a064 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a068 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a06c 0f0             | .wait
2a06c 0f0 40 46 72 FD |                 testp   dp                      wc
2a070 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a074 0f2 23 03 08 FC |                 akpin   dp
2a078 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2a07c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2a080 0f5             | isr1_wait
2a080 0f5 22 A5 82 FA |                 rqpin   utx, dm
2a084 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2a088 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2a08c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2a090 0f9 03 00 00 FF 
2a094 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2a098 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2a09c 0fc F5 FF 3B FB |                 reti1
2a0a0 0fd             | 
2a0a0 0fd             | '------------------------------------------------------------------------------
2a0a0 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2a0a0 0fd             | ' transaction will complete before the next frame is triggered.
2a0a0 0fd             | '------------------------------------------------------------------------------
2a0a0 0fd             | ' On entry:
2a0a0 0fd             | ' On exit:
2a0a0 0fd             | '------------------------------------------------------------------------------
2a0a0 0fd             | wait_txn_ok
2a0a0 0fd 1A 74 63 FD |                 getct   htmp2
2a0a4 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2a0a8 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a0ac 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2a0b0 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2a0b4 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2a0b8 103 2D 00 64 FD |                 ret
2a0bc 104             | 
2a0bc 104             | '------------------------------------------------------------------------------
2a0bc 104             | ' A device connection was detected, or a bus reset was requested by the USB
2a0bc 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2a0bc 104             | ' and perform a reset sequence prior to device enumeration.
2a0bc 104             | '------------------------------------------------------------------------------
2a0bc 104             | dev_reset
2a0bc 104 22 A7 82 FA |                 rqpin   urx, dm
2a0c0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2a0c4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2a0c8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2a0cc 108             | reset
2a0cc 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2a0d0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2a0d4 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2a0d8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a0dc 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2a0e0 10d 1A 92 62 FD |                 getct   iframe_ct_base
2a0e4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a0e8 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a0ec 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2a0f0 111 24 70 07 F1 |                 add     htmp, #36
2a0f4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2a0f8 113             | .framewait
2a0f8 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2a0fc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2a100 115 2D 00 64 FD |                 ret
2a104 116             | 
2a104 116             | '------------------------------------------------------------------------------
2a104 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2a104 116             | '------------------------------------------------------------------------------
2a104 116             | ' On entry:
2a104 116             | '   PTRA - source address.
2a104 116             | '   PB - destination address.
2a104 116             | '   hr0 - length of copy, in bytes.
2a104 116             | ' On exit:
2a104 116             | '------------------------------------------------------------------------------
2a104 116             | hmemcpy
2a104 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2a108 117 F7 71 43 FC |                 wrbyte  htmp, pb
2a10c 118 01 EE 07 F1 |                 add     pb, #1
2a110 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2a114 11a             | 
2a114 11a             | '------------------------------------------------------------------------------
2a114 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2a114 11a             | ' loop until the errant device is disconnected.
2a114 11a             | '------------------------------------------------------------------------------
2a114 11a             | ' On entry:
2a114 11a             | ' On exit:
2a114 11a             | '------------------------------------------------------------------------------
2a114 11a             | host_error
2a114 11a             |           if ERROR_LED >= 0
2a114 11a             |           end
2a114 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2a118 11b             | 
2a118 11b             | '------------------------------------------------------------------------------
2a118 11b             | ' Get HID descriptor buffer for current port
2a118 11b             | '------------------------------------------------------------------------------
2a118 11b             | ' On entry:
2a118 11b             | ' On exit:
2a118 11b             | '   PB - HID descriptor buffer pointer
2a118 11b             | '------------------------------------------------------------------------------
2a118 11b             | get_hid_descr_buffer
2a118 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2a11c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2a120 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2a124 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2a128 11f             | 
2a128 11f             | 
2a128 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2a12c 120             | 
2a12c 120             | ' USB commands and error codes
2a12c 120 00 00 00 00 | cmd_data        long    0
2a130 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2a134 122             | 
2a134 122             | ' Parameters block assigned at cog startup
2a134 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2a138 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2a13c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2a140 125             | if ACTIVITY_LED >= 0
2a140 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2a140 125             | end
2a140 125             | if ERROR_LED >= 0
2a140 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2a140 125             | end
2a140 125 00 00 00 00 | hid_descr_p     long    0
2a144 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2a144 126             | 'hkbd_report_p   long    0
2a144 126 00 00 00 00 | hub_descr_p     long    0
2a148 127 00 00 00 00 | urx_buff_p      long    0
2a14c 128 00 00 00 00 | dev_desc_buff_p long    0
2a150 129 00 00 00 00 | con_desc_buff_p long    0
2a154 12a 00 00 00 00 | cache_start_p   long    0
2a158 12b 00 00 00 00 | cache_end_p     long    0
2a15c 12c             | if EMUPAD_MAX_PLAYER > 0
2a15c 12c             | emupad_out_ptr  long    0
2a15c 12c             | end
2a15c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2a160 12d             | 
2a160 12d             | hdev_init_start
2a160 12d             | hdev_port       res     1
2a160 12d             | hdev_port       res     1
2a160 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a160 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a160 12d             | kbm_next_datax  res     1
2a160 12d             | kbm_next_datax  res     1
2a160 12d             | hub_intf_num    res     1
2a160 12d             | hub_intf_num    res     1
2a160 12d             | hub_next_datax  res     1
2a160 12d             | hub_next_datax  res     1
2a160 12d             | hub_status_chg  res     1
2a160 12d             | hub_status_chg  res     1
2a160 12d             | hub_port_status res     1
2a160 12d             | hub_port_status res     1
2a160 12d             | if HAVE_MOUSE
2a160 12d             | ms_intf_num     res     1
2a160 12d             | ms_intf_num     res     1
2a160 12d             | ms_in_max_pkt   res     1
2a160 12d             | ms_in_max_pkt   res     1
2a160 12d             | end
2a160 12d             | kb_intf_num     res     1
2a160 12d             | kb_intf_num     res     1
2a160 12d             | kb_interval     res     1
2a160 12d             | kb_interval     res     1
2a160 12d             | kb_in_max_pkt   res     1
2a160 12d             | kb_in_max_pkt   res     1
2a160 12d             | kb_max_index    res     1
2a160 12d             | kb_max_index    res     1
2a160 12d             | kb_led_states   res     1
2a160 12d             | kb_led_states   res     1
2a160 12d             | gp_intf_num     res     1
2a160 12d             | gp_intf_num     res     1
2a160 12d             | gp_interval     res     1
2a160 12d             | gp_interval     res     1
2a160 12d             | gp_max_index    res     1
2a160 12d             | gp_max_index    res     1
2a160 12d             | gp_descr_len    res     1+MAX_DEVICES
2a160 12d             | gp_descr_len    res     1+MAX_DEVICES
2a160 12d             | hdev_init_end
2a160 12d             | 
2a160 12d             | ' Initialized at cog startup:
2a160 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a160 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a160 12d             | iframe_ct_new   res     1
2a160 12d             | iframe_ct_new   res     1
2a160 12d             | iframe_ct_base  res     1
2a160 12d             | iframe_ct_base  res     1
2a160 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a160 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a160 12d             | 
2a160 12d             | ' This register block is reset to zero when a USB device connects
2a160 12d             | hreg_init_start
2a160 12d             | hstatus         res     1         ' Host status flags
2a160 12d             | hstatus         res     1         ' Host status flags
2a160 12d             | hctwait         res     1         ' Poll-based wait clocks
2a160 12d             | hctwait         res     1         ' Poll-based wait clocks
2a160 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a160 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a160 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a160 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a160 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a160 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a160 12d             | xfer_retry      res     1         ' Control transfer retry count
2a160 12d             | xfer_retry      res     1         ' Control transfer retry count
2a160 12d             | retry           res     1         ' Transaction retry count
2a160 12d             | retry           res     1         ' Transaction retry count
2a160 12d             | utx             res     1         ' Byte to transmit on USB
2a160 12d             | utx             res     1         ' Byte to transmit on USB
2a160 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a160 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a160 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a160 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a160 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a160 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a160 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a160 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a160 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a160 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a160 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a160 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a160 12d             | frame           res     1         ' USB 1ms frame counter value
2a160 12d             | frame           res     1         ' USB 1ms frame counter value
2a160 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a160 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a160 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a160 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a160 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a160 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a160 12d             | crc             res     1         ' Used for CRC16 calculation
2a160 12d             | crc             res     1         ' Used for CRC16 calculation
2a160 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a160 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a160 12d             | retval          res     1         ' Global success/fail return parameter
2a160 12d             | retval          res     1         ' Global success/fail return parameter
2a160 12d             | context_retval  res     1         ' Operation contextual return parameter
2a160 12d             | context_retval  res     1         ' Operation contextual return parameter
2a160 12d             | ' Device stuff
2a160 12d             | hdev_id         res     1+MAX_DEVICES
2a160 12d             | hdev_id         res     1+MAX_DEVICES
2a160 12d             | hdev_bcd        res     1
2a160 12d             | hdev_bcd        res     1
2a160 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a160 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a160 12d             | ' Keyboard/mouse stuff
2a160 12d             | hctrl_ep_addr   res     1
2a160 12d             | hctrl_ep_addr   res     1
2a160 12d             | hctrl_max_pkt   res     1
2a160 12d             | hctrl_max_pkt   res     1
2a160 12d             | hconfig_base    res     1
2a160 12d             | hconfig_base    res     1
2a160 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a160 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a160 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a160 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a160 12d             | hdev_class      res     1
2a160 12d             | hdev_class      res     1
2a160 12d             | hdev_subclass   res     1
2a160 12d             | hdev_subclass   res     1
2a160 12d             | hdev_protocol   res     1
2a160 12d             | hdev_protocol   res     1
2a160 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a160 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a160 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a160 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a160 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a160 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a160 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a160 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a160 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a160 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a160 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a160 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a160 12d             | if HAVE_MOUSE
2a160 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a160 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a160 12d             | end
2a160 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a160 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a160 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a160 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a160 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a160 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a160 12d             | hdev_out_addr   res     1
2a160 12d             | hdev_out_addr   res     1
2a160 12d             | 
2a160 12d             | if EMUPAD_MAX_PLAYER > 0
2a160 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2a160 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2a160 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2a160 12d             | end
2a160 12d             | 
2a160 12d             | hreg_init_end
2a160 12d             | 
2a160 12d             | hidr_start
2a160 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a160 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a160 12d             | hidr_flags      res     1
2a160 12d             | hidr_flags      res     1
2a160 12d             | hidr_axis       res     3
2a160 12d             | hidr_axis       res     3
2a160 12d             | hidr_buttons    res     1
2a160 12d             | hidr_buttons    res     1
2a160 12d             | hidr_hats       res     1
2a160 12d             | hidr_hats       res     1
2a160 12d             | '' Above are actually useful values, 6 longs
2a160 12d             | hidr_id         res     1
2a160 12d             | hidr_id         res     1
2a160 12d             | hidr_state      res     1
2a160 12d             | hidr_state      res     1
2a160 12d             | hidr_size       res     1
2a160 12d             | hidr_size       res     1
2a160 12d             | hidr_count      res     1
2a160 12d             | hidr_count      res     1
2a160 12d             | hidr_offset     res     1
2a160 12d             | hidr_offset     res     1
2a160 12d             | hidr_usage_idx  res     1
2a160 12d             | hidr_usage_idx  res     1
2a160 12d             | hidr_lminmax    res     1
2a160 12d             | hidr_lminmax    res     1
2a160 12d             | hidr_pminmax    res     1
2a160 12d             | hidr_pminmax    res     1
2a160 12d             | hidr_type       res     1
2a160 12d             | hidr_type       res     1
2a160 12d             | hidr_end
2a160 12d             | 
2a160 12d             | ' Variables dependent on the system freqency
2a160 12d             | _var_64_lower_  res     1
2a160 12d             | _var_64_lower_  res     1
2a160 12d             | _var_64_upper_  res     1
2a160 12d             | _var_64_upper_  res     1
2a160 12d             | _12Mbps_        res     1
2a160 12d             | _12Mbps_        res     1
2a160 12d             | _1_5Mbps_       res     1
2a160 12d             | _1_5Mbps_       res     1
2a160 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a160 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a160 12d             | _1us_           res     1         ' 1us
2a160 12d             | _1us_           res     1         ' 1us
2a160 12d             | _10us_          res     1         ' 10us
2a160 12d             | _10us_          res     1         ' 10us
2a160 12d             | _33us_          res     1         ' 33us
2a160 12d             | _33us_          res     1         ' 33us
2a160 12d             | _txn_err_       res     1         ' 250us
2a160 12d             | _txn_err_       res     1         ' 250us
2a160 12d             | _500us_         res     1         ' 500us
2a160 12d             | _500us_         res     1         ' 500us
2a160 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a160 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a160 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a160 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a160 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a160 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a160 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a160 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a160 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a160 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a160 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a160 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a160 12d             | _preamble_wait_ res     1
2a160 12d             | _preamble_wait_ res     1
2a160 12d             | _1ms_           res     1         ' 1ms
2a160 12d             | _1ms_           res     1         ' 1ms
2a160 12d             | _2ms_           res     1         ' 2ms
2a160 12d             | _2ms_           res     1         ' 2ms
2a160 12d             | _suspend_wait_  res     1         ' 3ms
2a160 12d             | _suspend_wait_  res     1         ' 3ms
2a160 12d             | _4ms_           res     1         ' 4ms
2a160 12d             | _4ms_           res     1         ' 4ms
2a160 12d             | _xfer_wait_     res     1         ' 5ms
2a160 12d             | _xfer_wait_     res     1         ' 5ms
2a160 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a160 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a160 12d             | _reset_hold_    res     1         ' 15ms
2a160 12d             | _reset_hold_    res     1         ' 15ms
2a160 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a160 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a160 12d             | _21ms_          res     1         ' 21ms
2a160 12d             | _21ms_          res     1         ' 21ms
2a160 12d             | _100ms_         res     1         ' 100ms
2a160 12d             | _100ms_         res     1         ' 100ms
2a160 12d             | _500ms_         res     1         ' 500ms
2a160 12d             | _500ms_         res     1         ' 500ms
2a160 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a160 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a160 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a160 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a160 12d             | '------------------------------------------------------------------------------
2a160 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a160 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a160 12d             | _usb_d_ls_nco_  res     1
2a160 12d             | _usb_d_ls_nco_  res     1
2a160 12d             | _usb_h_fs_nco_  res     1
2a160 12d             | _usb_h_fs_nco_  res     1
2a160 12d             | _usb_d_fs_nco_  res     1
2a160 12d             | _usb_d_fs_nco_  res     1
2a160 12d             | '------------------------------------------------------------------------------
2a160 12d             | ' Scratch registers
2a160 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a160 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a160 12d             | htmp1           res     1
2a160 12d             | htmp1           res     1
2a160 12d             | htmp2           res     1
2a160 12d             | htmp2           res     1
2a160 12d             | htmp3           res     1
2a160 12d             | htmp3           res     1
2a160 12d             | hrep            res     1         ' Repeat count
2a160 12d             | hrep            res     1         ' Repeat count
2a160 12d             | hsave0          res     1         ' Subroutine parameter saves
2a160 12d             | hsave0          res     1         ' Subroutine parameter saves
2a160 12d             | hsave1          res     1
2a160 12d             | hsave1          res     1
2a160 12d             | hsave2          res     1
2a160 12d             | hsave2          res     1
2a160 12d             | isrtmp1         res     1
2a160 12d             | isrtmp1         res     1
2a160 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a160 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a160 12d             | hr0             res     1         ' Multi-purpose registers
2a160 12d             | hr0             res     1         ' Multi-purpose registers
2a160 12d             | hr1             res     1
2a160 12d             | hr1             res     1
2a160 12d             | hr2             res     1
2a160 12d             | hr2             res     1
2a160 12d             | hr3             res     1
2a160 12d             | hr3             res     1
2a160 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a160 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a160 12d             | hpar2           res     1
2a160 12d             | hpar2           res     1
2a160 12d             | hpar3           res     1
2a160 12d             | hpar3           res     1
2a160 12d             | hct2            res     1         ' Function response bus turn-around timer
2a160 12d             | hct2            res     1         ' Function response bus turn-around timer
2a160 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a160 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a160 12d             | mod_cnt         res     1         ' Used in idle loops
2a160 12d             | mod_cnt         res     1         ' Used in idle loops
2a160 12d             |                 fit     $1F0
2a160 12d             |                 org     $200
2a160 200             | hlut_start
2a160 200             | 
2a160 200             | '------------------------------------------------------------------------------
2a160 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2a160 200             | ' settings to startup defaults.
2a160 200             | '------------------------------------------------------------------------------
2a160 200             | ' On entry:
2a160 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2a160 200             | '------------------------------------------------------------------------------
2a160 200             | set_speed_full
2a160 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2a164 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a168 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2a16c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2a170 204             | '                ret                             wcz     ' Restore caller flags on exit
2a170 204             | 
2a170 204             | '------------------------------------------------------------------------------
2a170 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2a170 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2a170 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2a170 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2a170 204             | ' putting the smart pins into reset.
2a170 204             | '------------------------------------------------------------------------------
2a170 204             | ' On entry:
2a170 204             | ' On exit: CZ flags restored to caller states
2a170 204             | '------------------------------------------------------------------------------
2a170 204             | set_speed_low
2a170 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2a174 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2a178 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2a17c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2a180 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2a184 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2a188 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2a18c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2a190 20c             | 
2a190 20c             | '------------------------------------------------------------------------------
2a190 20c             | ' Perform configuration stuff required when a device intitially connects.
2a190 20c             | '------------------------------------------------------------------------------
2a190 20c             | ' On entry:
2a190 20c             | ' On exit:
2a190 20c             | '------------------------------------------------------------------------------
2a190 20c             | on_connect
2a190 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2a194 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2a198 20e             | .retry
2a198 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a19c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2a1a0 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2a1a4 211 00 08 00 FF 
2a1a8 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2a1ac 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2a1b0 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a1b4 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2a1b8 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2a1bc 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2a1c0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a1c4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2a1c8 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2a1cc 21b 4C 03 B0 FD |                 call    #poll_waitx
2a1d0 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2a1d4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2a1d8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2a1dc 21f B8 FF 9F FD |                 jmp     #.retry
2a1e0 220             | .get_dev_desc
2a1e0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2a1e4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2a1e8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2a1ec 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2a1f0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2a1f4 225 88 FB BF FD |                 call    #reset
2a1f8 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2a1fc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a200 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2a204 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2a208 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a20c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a210 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2a214 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2a218 22e 04 00 00 FF 
2a21c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2a220 230 34 FA BF FD |                 call    #calc_crc5
2a224 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2a228 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a22c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2a230 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2a234 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2a238 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2a23c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a240 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a244 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2a248 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2a24c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2a250 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2a254 23d C4 02 B0 FD |                 call    #poll_waitx
2a258 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2a25c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a260 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2a264 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2a268 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2a26c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a270 244 2D 00 64 5D |         if_nz   ret
2a274 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2a278 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2a27c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2a280 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2a284 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2a288 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2a28c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2a290 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2a294 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2a298 24e 2C FB 9F CD |         if_b    jmp     #host_error
2a29c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2a2a0 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a2a4 251 2D EC 63 FD |                 call    pa
2a2a8 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2a2ac 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a2b0 254 2C EC 63 FD |                 jmp     pa
2a2b4 255             | 
2a2b4 255             | '------------------------------------------------------------------------------
2a2b4 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2a2b4 255             | ' Status reporting is always in the function-to-host direction.
2a2b4 255             | '------------------------------------------------------------------------------
2a2b4 255             | ' On entry:
2a2b4 255             | '   PTRA - start address of the SETUP data in hub.
2a2b4 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2a2b4 255             | '     stage.
2a2b4 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2a2b4 255             | ' On exit:
2a2b4 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2a2b4 255             | '     contains the count of data stage bytes actually received, which must
2a2b4 255             | '     always be <= the count requested.
2a2b4 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a2b4 255             | '     more specific USB operation error code.
2a2b4 255             | '------------------------------------------------------------------------------
2a2b4 255             | control_read
2a2b4 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a2b8 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2a2bc 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2a2c0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a2c4 259             | .xfer_start
2a2c4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a2c8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a2cc 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a2d0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2a2d4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a2d8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a2dc 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a2e0 260 61 00 00 FF 
2a2e4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2a2e8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a2ec 263             | .data
2a2ec 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2a2f0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a2f4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a2f8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2a2fc 267             | .nak_retry
2a2fc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2a300 268             | .in_retry
2a300 268 BC F6 BF FD |                 call    #txn_in
2a304 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2a308 26a 28 00 90 AD |         if_z    jmp     #.commit
2a30c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a310 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a314 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a318 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a31c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2a320 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a324 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a328 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a32c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2a330 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2a334 275             | .commit
2a334 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2a338 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2a33c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2a340 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2a344 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2a348 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a34c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2a350 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2a354 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2a358 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2a35c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2a360 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2a364 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2a368 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2a36c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a370 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2a374 285             | .pre_status
2a374 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2a378 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2a37c 287 00 B0 06 F6 |                 mov     pkt_data, #0
2a380 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2a384 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a388 28a 61 00 00 FF 
2a38c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2a390 28c             | .out_retry
2a390 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2a394 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a398 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2a39c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a3a0 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a3a4 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a3a8 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a3ac 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a3b0 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a3b4 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2a3b8 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2a3bc 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2a3bc 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2a3bc 297             | ' ControlRead() transfer gets things unstuck most of the time...
2a3bc 297             | .xfer_retry
2a3bc 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2a3c0 298 58 01 B0 FD |                 call    #poll_waitx
2a3c4 299 8C F9 BF FD |                 call    #wait_txn_ok
2a3c8 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2a3cc 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2a3d0 29c C8 EF 03 F6 |                 mov     pb, hpar3
2a3d4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2a3d8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2a3dc 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2a3e0 2a0             | 
2a3e0 2a0             | '------------------------------------------------------------------------------
2a3e0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2a3e0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2a3e0 2a0             | ' the SETUP data struct is filled with the required values.
2a3e0 2a0             | '------------------------------------------------------------------------------
2a3e0 2a0             | ' On entry:
2a3e0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2a3e0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2a3e0 2a0             | '     stage.
2a3e0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2a3e0 2a0             | ' On exit:
2a3e0 2a0             | '   retval - used to convey the success/failure of each stage.
2a3e0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a3e0 2a0             | '     more specific USB operation error code.
2a3e0 2a0             | '------------------------------------------------------------------------------
2a3e0 2a0             | control_write
2a3e0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a3e4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a3e8 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a3ec 2a3             | 
2a3ec 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a3f0 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2a3f4 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2a3f8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a3fc 2a7             | .xfer_start
2a3fc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2a400 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a404 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a408 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a40c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2a410 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a414 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a418 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a41c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2a420 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a424 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a428 2b2             | .data
2a428 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2a42c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a430 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a434 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2a438 2b6             | .out_retry
2a438 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2a43c 2b7 88 F6 BF FD |                 call    #txn_out
2a440 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a444 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2a448 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a44c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2a450 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2a454 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2a458 2be             | .commit
2a458 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2a45c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2a460 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2a464 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a468 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2a46c 2c3             | pre_status_in
2a46c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2a470 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a474 2c5             | .status_retry
2a474 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2a478 2c6 44 F5 BF FD |                 call    #txn_in
2a47c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2a480 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2a484 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2a488 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2a48c 2cb 2D 00 64 AD |         if_z    ret
2a490 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2a494 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a498 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2a49c 2cf             | '               ret                                     ' Caller must handle transfer retirement
2a49c 2cf             | 
2a49c 2cf             | '------------------------------------------------------------------------------
2a49c 2cf             | ' Execute an IN interrupt transaction.
2a49c 2cf             | '------------------------------------------------------------------------------
2a49c 2cf             | ' On entry:
2a49c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2a49c 2cf             | '   hpar2 - Address of the IN data buffer
2a49c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2a49c 2cf             | ' On exit:
2a49c 2cf             | '   retval - the result of the operation.
2a49c 2cf             | '   hpar3 - the count of IN data bytes actually received.
2a49c 2cf             | '------------------------------------------------------------------------------
2a49c 2cf             | do_int_in
2a49c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a4a0 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a4a4 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a4a8 2d2             | 
2a4a8 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2a4ac 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2a4b0 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2a4b4 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2a4b8 2d6             | .retry
2a4b8 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2a4bc 2d7 00 F5 BF FD |                 call    #txn_in
2a4c0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2a4c4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2a4c8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2a4cc 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2a4d0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2a4d4 2dd 54 00 B0 FD |                 call    #retry_wait
2a4d8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a4dc 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2a4e0 2e0 D4 FF 9F FD |                 jmp     #.retry
2a4e4 2e1             | .commit
2a4e4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2a4e8 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2a4ec 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2a4f0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2a4f4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a4f8 2e6             | .post_ret
2a4f8 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2a4fc 2e7             | 
2a4fc 2e7             | 
2a4fc 2e7             | '------------------------------------------------------------------------------
2a4fc 2e7             | ' Resets the downstream hub port to FS
2a4fc 2e7             | '------------------------------------------------------------------------------
2a4fc 2e7             | dwnstream_reset
2a4fc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a500 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2a504 2e9             | 
2a504 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2a508 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2a50c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a510 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a514 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2a518 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2a51c 2ef             | 
2a51c 2ef             | '------------------------------------------------------------------------------
2a51c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2a51c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2a51c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2a51c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2a51c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2a51c 2ef             | '------------------------------------------------------------------------------
2a51c 2ef             | ' On entry:
2a51c 2ef             | '   hctwait - wait interval in sysclocks.
2a51c 2ef             | ' On exit:
2a51c 2ef             | '------------------------------------------------------------------------------
2a51c 2ef             | poll_waitx
2a51c 2ef 1A 92 63 FD |                 getct   hct2
2a520 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2a524 2f1             | .wait
2a524 2f1 FF 25 CC FB |                 jnct2   #.wait
2a528 2f2 2D 00 64 FD |                 ret
2a52c 2f3             | 
2a52c 2f3             | '------------------------------------------------------------------------------
2a52c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2a52c 2f3             | '------------------------------------------------------------------------------
2a52c 2f3             | ' On entry:
2a52c 2f3             | '   retval - transaction response PID or error code.
2a52c 2f3             | ' On exit:
2a52c 2f3             | '------------------------------------------------------------------------------
2a52c 2f3             | retry_wait
2a52c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a530 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2a534 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a538 2f6 14 00 90 AD |         if_z    jmp     #.nak
2a53c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2a540 2f8 D8 FF BF FD |                 call    #poll_waitx
2a544 2f9             | .dec
2a544 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2a548 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2a54c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2a550 2fc             | .nak
2a550 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2a554 2fd C4 FF BF FD |                 call    #poll_waitx
2a558 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2a55c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2a560 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2a564 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2a568 302 2D 00 64 FD |                 ret
2a56c 303             | 
2a56c 303             | host_reset
2a56c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2a570 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2a574 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2a574 305 BD 01 05 FF 
2a578 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2a57c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2a580 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2a584 309             | ' Check to see if the system clock has been changed.
2a584 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a588 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2a58c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2a590 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2a594 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a598 30e 40 46 62 FD |                 dirl    dp
2a59c 30f             | 
2a59c 30f 28 02 64 FD |                 setq    #1
2a5a0 310 80 00 80 FF 
2a5a4 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2a5a8 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2a5ac 313             | .enable
2a5ac 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2a5b0 314 41 46 62 FD |                 dirh    dp
2a5b4 315 1F 36 63 FD |                 waitx   _1us_
2a5b8 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a5bc 317             | 
2a5bc 317             |                 ' Handle Port protection enable and startup delay
2a5bc 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2a5c0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2a5c4 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2a5c8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2a5cc 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2a5d0 31c             | 
2a5d0 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2a5d4 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2a5d8 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2a5dc 31f 00 00 04 F6 |                 mov     0-0, #0
2a5e0 320             | .regloop
2a5e0 320             | 
2a5e0 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2a5e0 320             | 
2a5e0 320             | discon_entry
2a5e0 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2a5e4 321             | 
2a5e4 321             |               
2a5e4 321             |         if HAVE_HIDPAD
2a5e4 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2a5e8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a5ec 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2a5f0 324 F7 01 68 FC |                 wrlong  #0,pb
2a5f4 325             |         end
2a5f4 325             |         if EMUPAD_MAX_PLAYER > 0
2a5f4 325             |         end
2a5f4 325             | 
2a5f4 325             |                 ' Fall through to disconnected loop
2a5f4 325             | 
2a5f4 325             | '-----------------------------------------------------------------------------------------------------------------
2a5f4 325             | ' Device connect handling (Section 7.1.7.3).
2a5f4 325             | '-----------------------------------------------------------------------------------------------------------------
2a5f4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2a5f4 325             | ' device to connect (Section 7.1.7.3).
2a5f4 325             | '-----------------------------------------------------------------------------------------------------------------
2a5f4 325             | disconnected
2a5f4 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2a5f8 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2a5fc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2a600 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2a604 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2a608 32a             |         if ACTIVITY_LED >= 0
2a608 32a             |         end
2a608 32a 22 A7 82 FA |                 rqpin   urx, dm
2a60c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2a610 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2a614 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2a618 32e             | .se1_test
2a618 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2a61c 32f FC FE BF FD |                 call    #poll_waitx
2a620 330 22 A7 82 FA |                 rqpin   urx, dm
2a624 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a628 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2a62c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2a630 334             | .se1            'SE1 is a fatal error condition
2a630 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2a634 335 E4 FE BF FD |                 call    #poll_waitx
2a638 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2a63c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2a640 338             | .connect_test                                           ' Test lines until stable J/K state seen
2a640 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2a644 339 22 A7 82 FA |                 rqpin   urx, dm
2a648 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a64c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2a650 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2a654 33d             | connected
2a654 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2a658 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2a65c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2a660 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2a664 341             | .set_pulse
2a664 341 1A 64 63 FD |                 getct   _pulse_time_
2a668 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2a66c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2a66c 343             | ' of 1ms and make a correction, if necessary.
2a66c 343             | '                mov     htmp, _1ms_
2a66c 343             | '                subs    htmp, iframe_delta
2a66c 343             | '                adds    _frame1ms_clks_, htmp
2a66c 343             | '                debug(udec(_frame1ms_clks_))
2a66c 343             | 
2a66c 343             |                 ' Fall through to idle/processing loop
2a66c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2a670 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2a674 345             | 
2a674 345             | hidle
2a674 345 22 A7 82 FA |                 rqpin   urx, dm
2a678 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a67c 347 98 00 90 CD |         if_c    jmp     #.se0_test
2a680 348 24 06 70 FD |                 pollct3                         wc
2a684 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2a688 34a 1A 94 63 FD |                 getct   hct3
2a68c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2a690 34c             | 
2a690 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2a694 34d 00 70 E3 F8 |                 getbyte htmp
2a698 34e             | 
2a698 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2a69c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2a6a0 350 40 00 90 AD |         if_z    jmp     #.poll
2a6a4 351             | 
2a6a4 351             |         if _HAVE_GAMEPAD
2a6a4 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2a6a8 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2a6ac 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2a6b0 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2a6b4 355 2C 00 90 AD |         if_z    jmp     #.poll
2a6b8 356             |         end
2a6b8 356             | 
2a6b8 356             |         if HAVE_MOUSE
2a6b8 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2a6bc 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a6c0 358 20 00 90 AD |         if_z    jmp     #.poll
2a6c4 359             |         end
2a6c4 359             | 
2a6c4 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2a6c8 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2a6cc 35b 14 00 90 AD |         if_z    jmp     #.poll
2a6d0 35c             | 
2a6d0 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2a6d4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2a6d8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2a6dc 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2a6e0 360             |         if HAVE_MOUSE
2a6e0 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a6e4 361             |         else
2a6e4 361             |         end
2a6e4 361             | 
2a6e4 361             | .poll
2a6e4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a6e8 362 2D EC 63 FD |                 call    pa
2a6ec 363             | .skip_poll
2a6ec 363             | 
2a6ec 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2a6f0 364             | 
2a6f0 364             | .nopoll
2a6f0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2a6f4 365 44 00 90 AD |         if_z    jmp     #hsuspend
2a6f8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2a6fc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2a700 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2a704 369 1A 84 63 FD |                 getct   hr0
2a708 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2a70c 36b             |         if ACTIVITY_LED >= 0
2a70c 36b             |         end
2a70c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2a710 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2a714 36d 5C FF 9F FD |                 jmp     #hidle
2a718 36e             | ' Check for extended SE0 state on the bus
2a718 36e             | .se0_test
2a718 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2a71c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2a720 370 22 A7 82 FA |                 rqpin   urx, dm
2a724 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a728 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2a72c 373 24 F6 BF FD |                 call    #wait_txn_ok
2a730 374 00 00 80 FF 
2a734 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2a738 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2a738 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2a73c 377             | 
2a73c 377             | hsuspend
2a73c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2a740 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2a744 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2a748 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2a74c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2a750 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2a754 37d             | 
2a754 37d             |                 ' Fall through to resume wait loop
2a754 37d             | 
2a754 37d             | hwait_resume
2a754 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2a758 37e 02 86 47 F0 |                 shr     hr1, #2
2a75c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2a760 380             |         if ACTIVITY_LED >= 0
2a760 380             |         end
2a760 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2a764 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2a768 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2a76c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a770 384 18 00 90 AD |         if_z    jmp     #.resume
2a774 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2a778 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a77c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2a780 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a784 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2a788 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2a78c 38b             | .resume
2a78c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2a790 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2a794 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2a798 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2a79c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2a7a0 390 1F 70 63 FD |                 waitx   htmp
2a7a4 391 22 07 28 FC |                 wypin   #OUT_J, dm
2a7a8 392 01 70 47 F0 |                 shr     htmp, #1
2a7ac 393 1F 70 63 FD |                 waitx   htmp
2a7b0 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a7b4 395 1A 92 62 FD |                 getct   iframe_ct_base
2a7b8 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a7bc 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a7c0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2a7c4 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2a7c8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2a7cc 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2a7d0 39c             | 
2a7d0 39c             | '------------------------------------------------------------------------------
2a7d0 39c             | ' Send preamble to enable low-speed HUB ports
2a7d0 39c             | '------------------------------------------------------------------------------
2a7d0 39c             | ' On entry:
2a7d0 39c             | ' On exit:
2a7d0 39c             | '   USB baud rate set to low-speed
2a7d0 39c             | '------------------------------------------------------------------------------
2a7d0 39c             | utx_pre
2a7d0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a7d4 39d 40 46 62 FD |                 dirl    dp
2a7d8 39e 28 02 64 FD |                 setq    #1
2a7dc 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2a7e0 3a0 58 44 62 FD |                 drvl    dm
2a7e4 3a1 59 46 62 FD |                 drvh    dp
2a7e8 3a2             | 
2a7e8 3a2 1E 00 00 FF 
2a7ec 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2a7f0 3a4             | 
2a7f0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2a7f4 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2a7f8 3a6 28 02 64 3D |         if_nc   setq    #1
2a7fc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2a800 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2a804 3a9             | .l1
2a804 3a9             | 
2a804 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a808 3aa 40 46 62 FD |                 dirl    dp
2a80c 3ab 28 02 64 FD |                 setq    #1
2a810 3ac 80 00 80 FF 
2a814 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2a818 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2a81c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2a820 3b0 41 46 62 FD |                 dirh    dp
2a824 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a828 3b2             | 
2a828 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2a82c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2a830 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2a834 3b5             | 
2a834 3b5             | hlut_end
2a834 3b5             |                 fit     $400
2a834 3b5             |                 orgh
2a834                 | if OVERLAP_MEMORY
2a834                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2a834                 | end
2a834                 | '------------------------------------------------------------------------------
2a834                 | ' Routines called from cog space.
2a834                 | '------------------------------------------------------------------------------
2a834                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2a834                 | '------------------------------------------------------------------------------
2a834                 | 
2a834                 | '------------------------------------------------------------------------------
2a834                 | ' USB host cog initialization.
2a834                 | '------------------------------------------------------------------------------
2a834                 | usb_host_init
2a834                 |                 ' Initialize buffer pointers
2a834                 |         if OVERLAP_MEMORY
2a834                 |         else
2a834     40 15 B0 FE |                 loc     pb, #hid_descr
2a838                 |         end
2a838     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2a83c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2a83c                 |                 {
2a83c                 |                 }
2a83c                 |         
2a83c                 |                 {
2a83c                 |                 }
2a83c                 |                 'loc     pb,#hkbd_report
2a83c                 |                 'mov     hkbd_report_p,pb
2a83c                 | 
2a83c     08 1D B0 FE |                 loc     pb, #hub_descr
2a840     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2a844     1D 1D B0 FE |                 loc     pb, #urx_buff
2a848     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2a84c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2a850     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2a854     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2a858     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2a85c     18 15 B0 FE |                 loc     pb, #usb_cache_start
2a860     F7 55 02 F6 |                 mov     cache_start_p, pb
2a864     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2a868     F7 57 02 F6 |                 mov     cache_end_p, pb
2a86c                 | 
2a86c                 |         if ERROR_LED >= 0
2a86c                 |         end
2a86c                 | 
2a86c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2a86c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2a86c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2a86c                 | ' Configure and enable the Serial Host USB port.
2a86c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2a870                 | 
2a870                 | '------------------------------------------------------------------------------
2a870                 | ' Timing calculations happen before any interrupt(s) are enabled.
2a870                 | '------------------------------------------------------------------------------
2a870                 | ' On entry:
2a870                 | '   htmp - current CLKFREQ value.
2a870                 | '------------------------------------------------------------------------------
2a870                 | hinit_usb_timings
2a870                 | '                getct   htmp2
2a870     B8 59 02 F6 |                 mov     save_sysclk, htmp
2a874     8D 5B 80 FF 
2a878     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2a87c     18 30 63 FD |                 getqx   _12Mbps_
2a880     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2a884     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2a888     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2a88c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2a890     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2a894     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2a898     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2a89c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2a8a0     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2a8a4     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2a8a8     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2a8ac     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2a8b0     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2a8b4     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2a8b8     80 00 00 FF 
2a8bc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2a8c0     18 2C 63 FD |                 getqx   _var_64_lower_
2a8c4     19 2E 63 FD |                 getqy   _var_64_upper_
2a8c8     28 2C 63 FD |                 setq    _var_64_lower_
2a8cc     65 CD 1D FF 
2a8d0     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2a8d4     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2a8d8     01 00 00 FF 
2a8dc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2a8e0     18 2C 63 FD |                 getqx   _var_64_lower_
2a8e4     19 2E 63 FD |                 getqy   _var_64_upper_
2a8e8     28 2C 63 FD |                 setq    _var_64_lower_
2a8ec     A1 07 00 FF 
2a8f0     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2a8f4     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2a8f8     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2a8fc     09 36 57 F0 |                 shr     _1us_, #9               wc
2a900     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2a904     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2a908     18 38 63 FD |                 getqx   _10us_
2a90c     09 38 57 F0 |                 shr     _10us_, #9              wc
2a910     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2a914     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2a918     18 3A 63 FD |                 getqx   _33us_
2a91c     09 3A 57 F0 |                 shr     _33us_, #9              wc
2a920     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2a924     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2a928     18 3C 63 FD |                 getqx   _txn_err_
2a92c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2a930     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2a934     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2a938     18 3E 63 FD |                 getqx   _500us_
2a93c     09 3E 57 F0 |                 shr     _500us_, #9             wc
2a940     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2a944     01 00 00 FF 
2a948     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2a94c     18 40 63 FD |                 getqx   _txn_ok_ls_
2a950     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2a954     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2a958     01 00 00 FF 
2a95c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2a960     18 42 63 FD |                 getqx   _txn_ok_fs_
2a964     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2a968     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2a96c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2a970     05 00 00 FF 
2a974     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2a978     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2a97c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2a980     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2a984     1C 00 00 FF 
2a988     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2a98c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2a990     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2a994     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2a998     00 00 00 FF 
2a99c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2a9a0     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2a9a4     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2a9a8     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2a9ac     04 00 00 FF 
2a9b0     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2a9b4     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2a9b8     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2a9bc     8D 5B 00 FF 
2a9c0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2a9c4     18 4C 63 FD |                 getqx   _preamble_wait_
2a9c8     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2a9cc     01 00 00 FF 
2a9d0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2a9d4     18 2C 63 FD |                 getqx   _var_64_lower_
2a9d8     19 2E 63 FD |                 getqy   _var_64_upper_
2a9dc     28 2C 63 FD |                 setq    _var_64_lower_
2a9e0     01 00 00 FF 
2a9e4     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2a9e8     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2a9ec     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2a9f0     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2a9f4     FF FF 7F FF 
2a9f8     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2a9fc     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2aa00     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2aa04     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2aa08     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2aa0c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2aa10     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2aa14     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2aa18     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2aa1c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2aa20     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2aa24     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2aa28     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2aa2c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2aa30     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2aa34     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2aa38     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2aa3c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2aa40     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2aa44     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2aa48     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2aa4c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2aa50     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2aa54     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2aa58     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2aa5c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2aa60     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2aa64                 | '        _ret_   mov     _1sec_, save_sysclk
2aa64                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2aa64                 | '                ret
2aa64                 | {
2aa64                 | }
2aa64                 | 
2aa64                 | '------------------------------------------------------------------------------
2aa64                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2aa64                 | ' one. If it is, start the task progression that will configure the device for
2aa64                 | ' use.
2aa64                 | '------------------------------------------------------------------------------
2aa64                 | ' On entry:
2aa64                 | '   hconfig_base - start address of the cached config descriptor chain.
2aa64                 | ' On exit:
2aa64                 | '------------------------------------------------------------------------------
2aa64                 | hparse_con_desc
2aa64     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2aa68     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2aa6c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2aa70     4E 70 FF F9 |                 movbyts htmp,#%%1032
2aa74     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2aa78                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2aa78                 | 
2aa78     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2aa7c     6E ED 03 F1 |                 add     pa, hconfig_base
2aa80     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2aa84                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2aa84                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2aa84                 | ' that defines a keyboard and/or mouse.
2aa84     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2aa88                 | .next_intf
2aa88     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2aa8c     BC 01 90 3D |         if_ae   jmp     #hset_config
2aa90     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2aa94     75 F3 03 F1 |                 add     ptrb, hnext_desc
2aa98     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2aa9c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2aaa0     0C 00 90 AD |         if_z    jmp     #.intf
2aaa4     80 71 C7 FA |                 rdbyte  htmp, ptrb
2aaa8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2aaac     D8 FF 9F FD |                 jmp     #.next_intf
2aab0                 | .intf
2aab0     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2aab4     00 90 07 F6 |                 mov     hpar3, #0
2aab8     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2aabc     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2aac0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2aac4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2aac8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2aac8                 | 
2aac8                 | .endp
2aac8     80 71 C7 FA |                 rdbyte  htmp, ptrb
2aacc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2aad0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2aad4     78 00 90 3D |         if_ae   jmp     #.get_device
2aad8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2aadc     75 F3 03 F1 |                 add     ptrb, hnext_desc
2aae0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2aae4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2aae8     64 00 90 AD |         if_z    jmp     #.get_device
2aaec     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2aaf0     04 00 90 AD |         if_z    jmp     #.get_ep
2aaf4     D0 FF 9F FD |                 jmp     #.endp
2aaf8                 | .get_ep
2aaf8     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2aafc     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2ab00     0F 86 67 F0 |                 shl     hr1, #8 + 7
2ab04     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2ab08     3F 00 00 FF 
2ab0c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2ab10     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2ab14     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2ab18     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2ab1c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2ab20     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2ab24     A0 FF 9F FD |                 jmp     #.endp
2ab28                 | .in_ep
2ab28     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2ab2c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2ab30                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ab30     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ab34     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2ab38     8C FF 9F FD |                 jmp     #.endp
2ab3c                 | .out_ep
2ab3c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2ab40     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2ab44                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ab44     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ab48     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2ab4c     78 FF 9F FD |                 jmp     #.endp
2ab50                 | 
2ab50                 | .get_device
2ab50     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2ab54     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2ab58     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2ab5c     68 00 90 AD |         if_z    jmp     #.gamepad
2ab60     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2ab64     AC 00 90 AD |         if_z    jmp     #.hub
2ab68     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2ab6c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2ab70     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2ab74     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2ab78     4C 00 90 AD |         if_z    jmp     #.gamepad
2ab7c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2ab80     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2ab84                 | .keyboard
2ab84     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2ab88                 |         if HAVE_MOUSE
2ab88     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2ab8c                 |         else
2ab8c                 |         end
2ab8c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2ab90     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2ab94     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2ab98     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2ab9c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2aba0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2aba4                 |                 'debug(udec(kb_intf_num))
2aba4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2aba4     E0 FE 9F FD |                 jmp     #.next_intf
2aba8                 | if HAVE_MOUSE
2aba8                 | .mouse
2aba8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2abac     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2abb0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2abb4     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2abb8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2abbc                 |                 'getbyte ms_interval, hr2, #3
2abbc     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2abc0     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2abc4                 |                 'debug(udec(kb_intf_num))
2abc4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2abc4     C0 FE 9F FD |                 jmp     #.next_intf
2abc8                 | end
2abc8                 | .gamepad
2abc8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2abcc     C7 71 63 F5 |                 xor     htmp, hpar2
2abd0     3F 00 00 FF 
2abd4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2abd8     AC FE 9F AD |         if_z    jmp     #.next_intf
2abdc                 |         if HAVE_MOUSE
2abdc     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2abe0     C7 71 63 F5 |                 xor     htmp, hpar2
2abe4     3F 00 00 FF 
2abe8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2abec     98 FE 9F AD |         if_z    jmp     #.next_intf
2abf0                 |         end
2abf0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2abf4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2abf8     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2abfc                 | 
2abfc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2ac00     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2ac04     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ac08     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2ac0c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2ac10                 |                 'debug(udec(gp_intf_num))
2ac10                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2ac10     74 FE 9F FD |                 jmp     #.next_intf
2ac14                 | .hub
2ac14     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2ac18     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2ac1c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2ac20     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2ac24     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2ac28     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2ac2c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2ac30     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2ac34     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2ac38     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2ac3c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ac40     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2ac44     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2ac48                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2ac48     3C FE 9F FD |                 jmp     #.next_intf
2ac4c                 | 
2ac4c                 | '------------------------------------------------------------------------------
2ac4c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2ac4c                 | ' it according to its function, or functions. In the case of this boot protocol
2ac4c                 | ' keyboard/mouse class driver:
2ac4c                 | ' - SetConfiguration(config_num)
2ac4c                 | ' - SetProtocol(boot)
2ac4c                 | ' - SetIdle(indefinite)
2ac4c                 | ' - Enter the device interrupt IN polling task stage.
2ac4c                 | '------------------------------------------------------------------------------
2ac4c                 | ' On entry:
2ac4c                 | ' On exit:
2ac4c                 | '------------------------------------------------------------------------------
2ac4c                 | hset_config
2ac4c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2ac4c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2ac4c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2ac50     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ac54     00 00 0C F2 |                 cmp     0-0, #0                 wz
2ac58     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2ac5c                 |         if HAVE_MOUSE
2ac5c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2ac60                 |         end
2ac60     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2ac64     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2ac68                 | .set_config
2ac68     6C 0E D0 FE |                 loc     ptra, #set_config
2ac6c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2ac70     6E ED 03 F1 |                 add     pa, hconfig_base
2ac74     F6 8D C3 FA |                 rdbyte  hpar1, pa
2ac78     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2ac7c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2ac80     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2ac84     A0 02 A0 FD |                 call    #control_write
2ac88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ac8c     2D 00 64 5D |         if_nz   ret
2ac90                 | .kbd_config
2ac90     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2ac94     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2ac98                 | 
2ac98     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2ac9c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2aca0     3F 00 00 FF 
2aca4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2aca8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2acac                 | 
2acac     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2acb0     34 0E D0 FE |                 loc     ptra, #set_protocol
2acb4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2acb8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2acbc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2acc0     A0 02 A0 FD |                 call    #control_write
2acc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2acc8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2accc     E4 02 90 5D |         if_nz   jmp     #.notify_client
2acd0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2acd4     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2acd8     30 03 B0 FD |                 call    #hset_idle
2acdc                 |                 'cmp     retval, #PID_ACK        wz
2acdc                 |         'if_nz   mov     hkbd_ep_addr, #0
2acdc                 |         'if_nz   jmp     #.notify_client
2acdc     A8 99 02 F6 |                 mov     hctwait, _2ms_
2ace0     EF 02 A0 FD |                 call    #poll_waitx
2ace4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2ace8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2acec     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2acf0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2acf4     2C 03 B0 FD |                 call    #hset_kbdled_report
2acf8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2acfc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2ad00     B0 02 90 5D |         if_nz   jmp     #.notify_client
2ad04     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2ad08     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ad0c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ad10     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2ad14     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2ad18     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2ad1c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2ad20     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ad24     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2ad28     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2ad2c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2ad30                 |         if !!HAVE_MOUSE
2ad30                 |         end
2ad30                 | 
2ad30                 | .mouse_config
2ad30                 | if HAVE_MOUSE
2ad30     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2ad34     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2ad38     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2ad3c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2ad40     3F 00 00 FF 
2ad44     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ad48     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2ad4c                 | 
2ad4c                 |                 debug("mouse passed addr check")
2ad4c                 | 
2ad4c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2ad50     00 00 80 FF 
2ad54     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2ad58     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2ad5c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ad60     55 02 A0 FD |                 call    #control_read
2ad64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ad68     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2ad6c     44 02 90 5D |         if_nz   jmp     #.notify_client
2ad70     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2ad74     56 01 00 F6 |                 mov     0-0, total_data
2ad78     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ad7c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2ad7c                 | 
2ad7c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2ad80     64 0D D0 FE |                 loc     ptra, #set_protocol
2ad84     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2ad88     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ad8c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2ad90     A0 02 A0 FD |                 call    #control_write
2ad94     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ad98     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2ad9c     14 02 90 5D |         if_nz   jmp     #.notify_client
2ada0                 |                 debug("mouse passed SetProtocol")
2ada0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2ada4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2ada8     60 02 B0 FD |                 call    #hset_idle
2adac                 |                 'cmp     retval, #PID_ACK        wz
2adac                 |         'if_nz   mov     hmouse_ep_addr, #0
2adac                 |         'if_nz   jmp     #.notify_client
2adac                 |                 debug("mouse passed SetIdle")
2adac     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2adb0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2adb4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2adb8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2adbc     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2adc0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2adc4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2adc8     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2adcc     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2add0     3F 00 00 FF 
2add4     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2add8     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2addc     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2ade0     D0 01 90 FD |                 jmp     #.notify_client
2ade4                 | end
2ade4                 | .gamepad_config
2ade4                 | if _HAVE_GAMEPAD
2ade4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ade8     00 00 0C F2 |                 cmp     0-0, #0                 wz
2adec     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2adf0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2adf4     00 70 03 F6 |                 mov     htmp, 0-0
2adf8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2adfc     3F 00 00 FF 
2ae00     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ae04     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2ae08                 | 
2ae08     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2ae0c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2ae10     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ae14     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ae18     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2ae1c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ae20     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2ae24     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2ae28     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2ae2c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ae30     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ae34     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2ae38     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2ae3c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ae40                 | 
2ae40                 |                 if EMUPAD_MAX_PLAYER > 0
2ae40                 |                 
2ae40                 | .rule_loop           
2ae40                 |                 end
2ae40                 | 
2ae40     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2ae44     5C 00 90 AD |         if_e    jmp     #.xinput
2ae48     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2ae4c     00 70 03 F6 |                 mov     htmp,0-0
2ae50     01 A6 02 FF 
2ae54     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2ae58     7C 00 90 AD |         if_e    jmp     #.ps3
2ae5c                 | 
2ae5c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2ae60     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2ae64     00 00 80 5F 
2ae68     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2ae6c     03 00 80 AF 
2ae70     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2ae74     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2ae78     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ae7c     55 02 A0 FD |                 call    #control_read
2ae80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ae84     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2ae88     00 00 04 56 |         if_nz   mov     0-0, #0
2ae8c     24 01 90 5D |         if_nz   jmp     #.notify_client
2ae90     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2ae94     56 01 00 F6 |                 mov     0-0, total_data
2ae98     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ae9c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2ae9c                 | 
2ae9c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2aea0     10 01 90 FD |                 jmp     #.notify_client
2aea4                 | .xinput
2aea4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2aea8     2D EF 03 F6 |                 mov     pb,hdev_port
2aeac     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2aeb0     03 EE 27 F3 |                 fle     pb,#3
2aeb4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2aeb8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2aebc                 | 
2aebc     03 B0 06 F6 |                 mov     pkt_data, #3
2aec0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2aec4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2aec8     5A 00 A0 FD |                 call    #txn_out
2aecc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2aed0                 | 
2aed0     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2aed4     DC 00 90 FD |                 jmp     #.notify_client
2aed8                 | .ps3
2aed8     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2aedc     2D EF 03 F6 |                 mov     pb,hdev_port
2aee0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2aee4     04 EE 27 F3 |                 fle     pb,#4
2aee8     F7 EF C3 F9 |                 decod   pb
2aeec     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2aef0                 | 
2aef0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2aef4     00 0C D0 FE |                 loc     ptra, #set_report
2aef8     01 00 80 FF 
2aefc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2af00     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2af04     03 61 5C FC |                 wrword  #48, ptra[wLength]
2af08     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2af0c     A0 02 A0 FD |                 call    #control_write
2af10                 | 
2af10     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2af14     E0 0B D0 FE |                 loc     ptra, #set_report
2af18     01 00 80 FF 
2af1c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2af20     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2af24     03 09 5C FC |                 wrword  #4, ptra[wLength]
2af28     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2af2c     A0 02 A0 FD |                 call    #control_write
2af30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2af34     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2af38     00 00 04 56 |         if_nz   mov     0-0, #0
2af3c     74 00 90 5D |         if_nz   jmp     #.notify_client
2af40                 | 
2af40     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2af44     6C 00 90 FD |                 jmp     #.notify_client
2af48                 | end
2af48                 | 
2af48                 | .hub_config
2af48     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2af4c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2af50     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2af54     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2af58     3F 00 00 FF 
2af5c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2af60     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2af64                 | 
2af64     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2af68     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2af6c     26 EF 03 F6 |                 mov     pb, hub_descr_p
2af70     55 02 A0 FD |                 call    #control_read
2af74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2af78     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2af7c     34 00 90 5D |         if_nz   jmp     #.notify_client
2af80                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2af80                 | 
2af80     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2af84     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2af88     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2af8c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2af8c                 | .pwr_loop
2af8c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2af90     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2af94     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2af98     A0 02 A0 FD |                 call    #control_write
2af9c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2afa0                 | 
2afa0     B1 99 02 F6 |                 mov     hctwait, _500ms_
2afa4     B0 99 02 F1 |                 add     hctwait, _100ms_
2afa8     EF 02 A0 FD |                 call    #poll_waitx
2afac                 | 
2afac     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2afb0     00 00 90 FD |                 jmp     #.notify_client
2afb4                 | 
2afb4                 | .notify_client
2afb4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2afb8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2afbc                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2afbc                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2afbc     2D 00 64 FD |                 ret
2afc0                 | 
2afc0                 | '------------------------------------------------------------------------------
2afc0                 | ' Initialize the keyboard/mouse data area to start-up values.
2afc0                 | '------------------------------------------------------------------------------
2afc0                 | ' On entry:
2afc0                 | ' On exit:
2afc0                 | '------------------------------------------------------------------------------
2afc0                 | init_kbdm_data
2afc0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2afc4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2afc8                 | 
2afc8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2afcc     2B ED 03 F6 |                 mov     pa, cache_end_p
2afd0                 | .loop
2afd0     61 01 4C FC |                 wrbyte  #0, ptra++
2afd4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2afd8     F4 FF 9F CD |         if_b    jmp     #.loop
2afdc                 |         
2afdc                 |         if EMUPAD_MAX_PLAYER > 0
2afdc                 |         end
2afdc                 | 
2afdc                 | 
2afdc     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2afe0                 | .regloop
2afe0     00 EC 8F F9 |                 altd    pa
2afe4     00 00 04 F6 |                 mov     0-0, #0
2afe8     01 EC 07 F1 |                 add     pa, #1
2afec     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2aff0     EC FF 9F 5D |         if_nz   jmp     #.regloop
2aff4                 | 
2aff4     E1 E1 61 FF 
2aff8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2affc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2b000     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2b004     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2b008                 | 
2b008     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2b00c                 | 
2b00c                 | '------------------------------------------------------------------------------
2b00c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2b00c                 | ' function.
2b00c                 | '------------------------------------------------------------------------------
2b00c                 | ' On entry:
2b00c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2b00c                 | '   hpar2 - index number of the target interface.
2b00c                 | ' On exit:
2b00c                 | '------------------------------------------------------------------------------
2b00c                 | hset_idle
2b00c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2b010     EF 02 A0 FD |                 call    #poll_waitx
2b014     D8 0A D0 FE |                 loc     ptra, #set_idle
2b018     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2b01c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2b020     A0 02 80 FD |                 jmp     #control_write
2b024                 | 
2b024                 | '------------------------------------------------------------------------------
2b024                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2b024                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2b024                 | '------------------------------------------------------------------------------
2b024                 | ' On entry:
2b024                 | '   ep_addr_pid - device address and enpoint for the request.
2b024                 | ' On exit:
2b024                 | '   retval - transaction result.
2b024                 | '------------------------------------------------------------------------------
2b024                 | hset_kbdled_report
2b024     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2b028     CC 0A D0 FE |                 loc     ptra, #set_report
2b02c     01 00 80 FF 
2b030     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2b034     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b038     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2b03c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b040     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2b044     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2b048                 | 
2b048                 | '------------------------------------------------------------------------------
2b048                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2b048                 | '------------------------------------------------------------------------------
2b048                 | ' On entry:
2b048                 | ' On exit:
2b048                 | '------------------------------------------------------------------------------
2b048                 | hget_kbd_in_report
2b048     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2b04c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b050     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2b054     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2b058     CF 02 A0 FD |                 call    #do_int_in
2b05c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b060     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b064                 | 
2b064     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b068     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b06c                 | 
2b06c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2b070     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b074     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2b078     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2b07c                 | 
2b07c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2b080     18 00 B0 FD |                 call    #hkbd_compare
2b084                 |         if EMUPAD_MAX_PLAYER > 0
2b084                 |         end
2b084                 | 
2b084                 | .led_check
2b084     3B 71 03 F6 |                 mov     htmp, kb_led_states
2b088     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2b08c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2b090     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2b094     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2b098     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2b09c                 | 
2b09c                 | '------------------------------------------------------------------------------
2b09c                 | ' Compare current and previous keyboard data buffers for keypress changes.
2b09c                 | '------------------------------------------------------------------------------
2b09c                 | hkbd_compare
2b09c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b0a0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2b0a4     61 73 07 FB |                 rdlong  htmp1, ptra++
2b0a8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b0ac     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2b0b0     61 73 07 FB |                 rdlong  htmp1, ptra++
2b0b4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b0b8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2b0bc     2D 00 64 AD |         if_z    ret
2b0c0                 | 
2b0c0     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2b0c4                 | 
2b0c4                 |                 ' Handle modifiers
2b0c4     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2b0c8     00 87 C7 FA |                 rdbyte  hr1, ptra
2b0cc     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2b0d0     63 86 63 FD |                 mergew  hr1
2b0d4     08 EC 07 F6 |                 mov     pa,#8
2b0d8                 | .modloop
2b0d8     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2b0dc     E8 8C 07 F6 |                 mov     hpar1,#$E8
2b0e0     F6 8D 83 F1 |                 sub     hpar1,pa
2b0e4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2b0e8     FB ED 6F FB |                 djnz    pa,#.modloop
2b0ec                 | 
2b0ec     6F E0 75 FD | .release        modc    _set    wc
2b0f0                 |                 'alts    hdev_port, #hid_report_p
2b0f0                 |                 'mov     ptra, hid_report_p
2b0f0     02 F0 07 F1 |                 add     ptra, #2
2b0f4     06 EC 07 F6 |                 mov     pa, #6
2b0f8     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2b0fc     20 00 90 AD |         if_z    jmp     #.rl3
2b100     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b104     02 F2 07 F1 |                 add     ptrb, #2
2b108     06 EE 07 F6 |                 mov     pb, #6
2b10c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2b110     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b114     08 00 90 AD |         if_z    jmp     #.rl3
2b118     FC EF 6F FB |                 djnz    pb, #.rl2
2b11c     68 00 B0 FD |                 call    #hkbd_translate
2b120     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2b124                 | 
2b124     00 90 07 F6 |                 mov     hpar3, #0
2b128     1F 90 27 F4 |                 bith    hpar3, #31
2b12c                 | 
2b12c     6F 00 74 FD | .press          modc    _clr    wc
2b130     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b134     02 F0 07 F1 |                 add     ptra, #2
2b138     06 EC 07 F6 |                 mov     pa, #6
2b13c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2b140     20 00 90 AD |         if_z    jmp     #.pl3
2b144     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2b148     02 F2 07 F1 |                 add     ptrb, #2
2b14c     06 EE 07 F6 |                 mov     pb, #6
2b150     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2b154     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b158     08 00 90 AD |         if_z    jmp     #.pl3
2b15c     FC EF 6F FB |                 djnz    pb, #.pl2
2b160     24 00 B0 FD |                 call    #hkbd_translate
2b164     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2b168                 | 
2b168     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2b16c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2b170     28 02 64 FD |                 setq #1
2b174     61 73 07 FB |                 rdlong  htmp1, ptra++
2b178     28 02 64 FD |                 setq #1
2b17c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2b180     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2b184                 | 
2b184     2D 00 64 FD |                 ret
2b188                 | 
2b188                 | '------------------------------------------------------------------------------
2b188                 | ' Translate keyboard scancode to ASCII
2b188                 | '------------------------------------------------------------------------------
2b188                 | ' On entry:
2b188                 | '   hpar1 - scancode
2b188                 | '   hpar2 - key modifiers state
2b188                 | '       c - pressed (0) or released (1) flag
2b188                 | ' On exit:
2b188                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2b188                 | '               30..17 = unused
2b188                 | '                   18 = scroll-lock state 
2b188                 | '                   17 = caps-lock state
2b188                 | '                   16 = num-lock state 
2b188                 | '                15..8 = key modifiers state
2b188                 | '                 7..0 = scancode
2b188                 | '------------------------------------------------------------------------------
2b188                 | hkbd_translate
2b188     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2b18c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2b190     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2b194     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2b198     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2b19c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2b1a0                 | 
2b1a0                 |         if EMUPAD_MAX_PLAYER > 0
2b1a0                 | 
2b1a0                 |         if EMUPAD_BT0_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT1_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT2_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT3_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT4_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT5_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT6_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT7_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT8_BIT >= 0
2b1a0                 |         end
2b1a0                 |         if EMUPAD_BT9_BIT >= 0
2b1a0                 |         end
2b1a0                 | 
2b1a0                 |         end
2b1a0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2b1a4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2b1a8     1F 8C 47 F4 |                 bitc    hpar1, #31
2b1ac                 |         if KEYQUEUE_SIZE > 0
2b1ac     C4 09 B0 FE |                 loc pb,#keyq_head
2b1b0     F7 71 E3 FA |                 rdword htmp,pb
2b1b4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2b1b8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2b1bc     B8 75 03 F6 |                 mov htmp2,htmp
2b1c0     04 74 07 FA |                 mul htmp2,#4
2b1c4     F7 75 03 F1 |                 add htmp2,pb
2b1c8     02 74 07 F1 |                 add htmp2,#2
2b1cc     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2b1d0     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2b1d4     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2b1d8     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2b1dc                 |         end
2b1dc     2D 00 7C FD |                 ret wcz
2b1e0                 | 
2b1e0                 | if HAVE_MOUSE
2b1e0                 | '------------------------------------------------------------------------------
2b1e0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2b1e0                 | '------------------------------------------------------------------------------
2b1e0                 | ' On entry:
2b1e0                 | ' On exit:
2b1e0                 | '------------------------------------------------------------------------------
2b1e0                 | hget_mouse_in_report
2b1e0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b1e4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b1e8     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2b1ec     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2b1f0     CF 02 A0 FD |                 call    #do_int_in
2b1f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b1f8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b1fc                 | 
2b1fc     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b200     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b204                 | 
2b204     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2b208     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b20c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2b210     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2b214                 | 
2b214     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b218     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2b21c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2b220     01 90 87 31 |         if_ae   sub     hpar3, #1
2b224                 | 
2b224     40 09 90 FE |                 loc     pa, #mouse_limits
2b228     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2b22c                 | 
2b22c                 |                 ' load xacc,yacc,zacc
2b22c     28 04 64 FD |                 setq    #3-1
2b230     80 87 07 FB |                 rdlong  hr1,ptrb
2b234                 |                 ' load limits and outptr
2b234     28 04 64 FD |                 setq    #3-1
2b238     F6 73 03 FB |                 rdlong  htmp1,pa
2b23c                 | 
2b23c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2b240     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2b244     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2b248     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2b24c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2b250     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2b254     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2b258     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2b25c                 |               
2b25c                 | 
2b25c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2b260     07 70 67 F7 |                 signx   htmp, #7
2b264     B8 87 03 F1 |                 add     hr1,htmp
2b268     00 72 0F F2 |                 cmp     htmp1,#0 wz
2b26c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2b270     00 86 47 53 |         if_ne   fges    hr1,#0
2b274                 | 
2b274     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2b278     07 70 67 F7 |                 signx   htmp, #7
2b27c     B8 89 03 F1 |                 add     hr2,htmp
2b280     00 74 0F F2 |                 cmp     htmp2,#0 wz
2b284     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2b288     00 88 47 53 |         if_ne   fges    hr2,#0
2b28c                 |                 
2b28c                 | 
2b28c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2b290     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2b294     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2b298     B8 8B 03 A1 |         if_z    add     hr3,htmp
2b29c                 | 
2b29c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2b2a0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2b2a4                 | 
2b2a4                 |                 ' write back accumulators
2b2a4     28 04 64 FD |                 setq    #3-1
2b2a8     80 87 67 FC |                 wrlong  hr1,ptrb
2b2ac                 |                 ' if outptr set, write X/Y words
2b2ac     00 76 0F F2 |                 cmp htmp3,#0                    wz
2b2b0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2b2b4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2b2b8     2D 00 64 FD |                 ret
2b2bc                 | end
2b2bc                 | 
2b2bc                 | '------------------------------------------------------------------------------
2b2bc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b2bc                 | '------------------------------------------------------------------------------
2b2bc                 | ' On entry:
2b2bc                 | ' On exit:
2b2bc                 | '------------------------------------------------------------------------------
2b2bc                 | if _HAVE_GAMEPAD
2b2bc                 | hget_gp_in_report
2b2bc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b2c0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b2c4                 | 
2b2c4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b2c8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2b2cc     00 90 E3 F8 |                 getbyte hpar3
2b2d0     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2b2d4     CF 02 A0 FD |                 call    #do_int_in
2b2d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b2dc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b2e0                 | 
2b2e0     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b2e4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b2e8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2b2e8                 | 
2b2e8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2b2ec     00 70 E3 F8 |                 getbyte htmp                            ' |
2b2f0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b2f4     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2b2f8     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2b2fc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2b300     B8 01 C0 F8 |                 setbyte htmp                            ' |
2b304                 | 
2b304                 | ' Note: the following code compares the current and previous reports
2b304                 | ' and process the data if there are changes to ease the debug output.
2b304                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2b304                 | ' gpPreReport buffer.
2b304                 | 
2b304                 |                 ' ----- start of block to remove
2b304                 |                 {
2b304                 |                 }
2b304                 |                 ' ----- end of block to remove
2b304     F4 04 90 FE |                 loc pa,#hpad_translate
2b308     2A EC 63 FD |                 push pa
2b30c                 | 
2b30c                 |                 ' FALL THROUGH !!!!
2b30c                 | 
2b30c                 | '------------------------------------------------------------------------------
2b30c                 | ' Decode controller report
2b30c                 | '------------------------------------------------------------------------------
2b30c                 | hid_decode
2b30c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2b30c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2b310     00 04 00 FF 
2b314     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2b318                 | 
2b318     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b31c                 | 
2b31c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b320     00 2A E3 F8 |                 getbyte hidr_type
2b324     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2b328     34 02 90 AD |         if_z    jmp     #hpad_xinput
2b32c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2b330     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2b334     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2b338     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2b33c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2b340                 |                 
2b340                 | 
2b340                 | '------------------------------------------------------------------------------
2b340                 | ' Handle HID controller (or mouse now
2b340                 | ' On entry:
2b340                 | '   ptrb - controller report
2b340                 | '------------------------------------------------------------------------------
2b340                 | hpad_hid
2b340     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b344     F7 F1 03 F6 |                 mov     ptra, pb
2b348     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2b34c     00 EC 03 F6 |                 mov     pa, 0-0
2b350                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2b350     19 2A 3B FF 
2b354     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2b358                 | 
2b358                 | .next
2b358     00 EC 5F F2 |                 cmps    pa, #0      wcz
2b35c     2D 00 7C ED |         if_be   ret     wcz
2b360                 | 
2b360     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2b364     01 EC 87 F1 |                 sub     pa, #1
2b368     00 8E 07 F6 |                 mov     hpar2, #0
2b36c                 | 
2b36c     C6 71 03 F6 |                 mov     htmp, hpar1
2b370     03 70 07 F5 |                 and     htmp, #$03
2b374     01 70 0F F2 |                 cmp     htmp, #1    wz
2b378     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2b37c     07 8E 67 A7 |         if_z    signx   hpar2,#7
2b380     01 EC 87 A1 |         if_z    sub     pa, #1
2b384     02 70 0F F2 |                 cmp     htmp, #2    wz
2b388     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2b38c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2b390     02 EC 87 A1 |         if_z    sub     pa, #2
2b394     03 70 0F F2 |                 cmp     htmp, #3    wz
2b398     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2b39c     04 EC 87 A1 |         if_z    sub     pa, #4
2b3a0                 | 
2b3a0     FC 8C 07 F5 |                 and     hpar1, #$FC
2b3a4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2b3a4                 | 
2b3a4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2b3a8     0C 01 90 AD |         if_z    jmp     #.report_id
2b3ac     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2b3b0     24 01 90 AD |         if_z    jmp     #.usage_page
2b3b4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2b3b8     2C 01 90 AD |         if_z    jmp     #.usage
2b3bc     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2b3c0     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2b3c4     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2b3c8     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2b3cc     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2b3d0     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2b3d4     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2b3d8     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2b3dc     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2b3e0     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2b3e4     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2b3e8     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2b3ec     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2b3f0     64 FF 9F 5D |         if_nz   jmp     #.next
2b3f4                 | 
2b3f4     D8 1D A7 FB |                 tjf     hidr_state,#.next
2b3f8                 | 
2b3f8     03 8E 07 F5 |                 and     hpar2, #$03
2b3fc     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2b400     18 00 90 5D |         if_nz   jmp     #.skip
2b404                 | 
2b404     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2b408     20 00 90 AD |         if_z    jmp     #.axes
2b40c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2b410     5C 00 90 AD |         if_z    jmp     #.hats
2b414     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2b418     70 00 90 AD |         if_z    jmp     #.buttons
2b41c                 | .skip
2b41c     8F 71 03 F6 |                 mov     htmp, hidr_size
2b420     90 71 03 FA |                 mul     htmp, hidr_count
2b424     B8 23 03 F1 |                 add     hidr_offset, htmp
2b428     2C FF 9F FD |                 jmp     #.next
2b42c                 | .axes
2b42c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2b42c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2b430     90 87 03 F6 |                 mov     hr1, hidr_count
2b434                 | .l1
2b434     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b438     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b43c     04 03 B0 FD |                 call    #hpad_getbits
2b440     64 03 B0 FD |                 call    #hpad_normalize
2b444     06 84 1F F2 |                 cmp     hr0, #6         wcz
2b448     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2b44c     00 88 43 C8 |         if_b    getnib  hr2
2b450     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2b454     5F 01 20 C9 |         if_b    setword retval
2b458     01 84 07 C1 |         if_b    add     hr0, #1
2b45c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2b460     F4 87 6F FB |                 djnz    hr1, #.l1
2b464                 | 
2b464     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2b468     01 1C 07 F6 |                 mov     hidr_state, #1
2b46c     E8 FE 9F FD |                 jmp     #.next
2b470                 | .hats
2b470                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2b470     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b474     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b478     C8 02 B0 FD |                 call    #hpad_getbits
2b47c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2b480     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b484     01 1C 07 F6 |                 mov     hidr_state, #1
2b488     90 FF 9F FD |                 jmp     #.skip
2b48c                 | .buttons
2b48c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2b48c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b490     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b494     90 8F 03 FA |                 mul     hpar2, hidr_count
2b498     A8 02 B0 FD |                 call    #hpad_getbits
2b49c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2b4a0     B8 BF 62 F0 |                 shl     retval, htmp
2b4a4     5F 17 43 F5 |                 or      hidr_buttons, retval
2b4a8     90 71 03 F1 |                 add     htmp, hidr_count
2b4ac     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2b4b0     01 1C 07 F6 |                 mov     hidr_state, #1
2b4b4     64 FF 9F FD |                 jmp     #.skip
2b4b8                 | .report_id
2b4b8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2b4bc     2D 00 7C 5D |         if_nz   ret     wcz
2b4c0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b4c4     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2b4c8     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2b4cc     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2b4d0     01 F2 87 51 |         if_nz   sub     ptrb,#1
2b4d4     80 FE 9F FD |                 jmp     #.next
2b4d8                 | .usage_page
2b4d8     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2b4dc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2b4e0     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2b4e4     70 FE 9F FD |                 jmp     #.next
2b4e8                 | .usage
2b4e8     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2b4ec     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2b4f0     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2b4f4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b4f8     5C FE 9F AD |         if_z    jmp     #.next
2b4fc     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2b500     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2b504     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b508     4C FE 9F AD |         if_z    jmp     #.next
2b50c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2b510     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2b514     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2b518     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2b51c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2b520     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2b524     10 00 90 AD |         if_z    jmp     #.usage_axis
2b528     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2b52c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2b530     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2b534     20 FE 9F FD |                 jmp     #.next
2b538                 | .usage_axis
2b538     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2b53c     18 FE 9F CD |         if_b    jmp     #.next
2b540     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2b544     C7 01 00 F8 |                 setnib  hpar2
2b548                 | 
2b548     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2b54c     C7 8F C3 F9 |                 decod   hpar2
2b550     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2b554                 | 
2b554     01 24 07 F1 |                 add     hidr_usage_idx, #1
2b558     02 1C 07 F6 |                 mov     hidr_state, #2
2b55c     F8 FD 9F FD |                 jmp     #.next
2b560                 | 
2b560                 | '------------------------------------------------------------------------------
2b560                 | ' Handle XInput controller
2b560                 | ' On entry:
2b560                 | '   ptrb - controller report
2b560                 | '------------------------------------------------------------------------------
2b560                 | '   Default implementation translates the report to a pseudo-defacto hid
2b560                 | '   standard and jumps to hpad_translate for actions.
2b560                 | '   Implementors may take specific actions for this kind of controller.
2b560                 | '------------------------------------------------------------------------------
2b560                 | hpad_xinput
2b560     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2b564     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2b568     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2b56c     14 70 0F F2 |                 cmp     htmp, #$14      wz
2b570     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2b574                 | 
2b574                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b574                 | 
2b574     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2b578     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2b57c                 | 
2b57c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2b580     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2b584     5F BF 22 F6 |                 not     retval
2b588     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b58c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2b590     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2b594     5F BF 22 F6 |                 not     retval
2b598     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b59c                 | 
2b59c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b5a0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2b5a4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b5a8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2b5ac     F8 01 B0 FD |                 call    #hpad_normalize
2b5b0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2b5b4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2b5b8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b5bc     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2b5c0     E4 01 B0 FD |                 call    #hpad_normalize
2b5c4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2b5c8                 | 
2b5c8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b5cc     81 BF E6 FA |                 rdword  retval, ptrb[1]
2b5d0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b5d4     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b5d8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b5dc     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b5e0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b5e4     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b5e8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b5ec     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b5f0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2b5f4     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b5f8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2b5fc     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b600     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2b604     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b608     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2b60c     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b610     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2b614     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b618     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2b61c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b620     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2b624     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b628                 | 
2b628     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b62c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2b630     7A BB 7A FF 
2b634     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2b638     F9 FF 7F FF 
2b63c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2b640     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b644     00 70 43 F8 |                 getnib  htmp
2b648     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b64c                 | 
2b64c     AC 01 90 FD |                 jmp     #hpad_translate
2b650                 | 
2b650                 | '------------------------------------------------------------------------------
2b650                 | ' Handle PS3 controller
2b650                 | ' On entry:
2b650                 | '   ptrb - controller report
2b650                 | '------------------------------------------------------------------------------
2b650                 | '   Default implementation translates the report to a pseudo-defacto hid
2b650                 | '   standard and jumps to hpad_translate for actions.
2b650                 | '   Implementors may take specific actions for this kind of controller.
2b650                 | '------------------------------------------------------------------------------
2b650                 | hpad_ps3
2b650     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b654     01 70 0F F2 |                 cmp     htmp, #$01      wz
2b658     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2b65c                 | 
2b65c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b65c                 | 
2b65c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b660     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2b664     40 01 B0 FD |                 call    #hpad_normalize
2b668     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2b66c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2b670     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2b674     30 01 B0 FD |                 call    #hpad_normalize
2b678     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b67c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2b680     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2b684     20 01 B0 FD |                 call    #hpad_normalize
2b688     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2b68c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2b690     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2b694     10 01 B0 FD |                 call    #hpad_normalize
2b698     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b69c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2b6a0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2b6a4                 | 
2b6a4     08 8C 07 F6 |                 mov     hpar1, #8
2b6a8     13 8E 07 F6 |                 mov     hpar2, #19
2b6ac     94 00 B0 FD |                 call    #hpad_getbits
2b6b0                 | 
2b6b0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b6b4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b6b8     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b6bc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b6c0     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b6c4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b6c8     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b6cc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b6d0     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b6d4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2b6d8     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b6dc     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2b6e0     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b6e4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2b6e8     06 16 47 F4 |                 bitc    hidr_buttons, #6
2b6ec     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2b6f0     07 16 47 F4 |                 bitc    hidr_buttons, #7
2b6f4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2b6f8     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b6fc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2b700     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b704     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2b708     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b70c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2b710     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b714     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2b718     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b71c                 | 
2b71c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b720     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2b724     09 FA 79 FF 
2b728     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2b72c     FF FA 7F FF 
2b730     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2b734     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b738     00 70 43 F8 |                 getnib  htmp
2b73c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b740                 | 
2b740     B8 00 90 FD |                 jmp     #hpad_translate
2b744                 | 
2b744                 | '------------------------------------------------------------------------------
2b744                 | ' Read bits from report data buffer
2b744                 | '------------------------------------------------------------------------------
2b744                 | ' On entry:
2b744                 | '   PTRB - report buffer
2b744                 | '   hpar1 - start bit
2b744                 | '   hpar2 - number of bits
2b744                 | ' On exit:
2b744                 | '   retval - bits
2b744                 | '------------------------------------------------------------------------------
2b744                 | hpad_getbits
2b744     C6 71 03 F6 |                 mov     htmp, hpar1
2b748     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2b74c     F9 71 03 F1 |                 add     htmp, ptrb
2b750     B8 BF 02 FB |                 rdlong  retval, htmp
2b754                 | 
2b754     C6 73 03 F6 |                 mov     htmp1, hpar1
2b758     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2b75c     B9 BF 42 F0 |                 shr     retval, htmp1
2b760                 | 
2b760     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2b764     10 00 90 1D |         if_a    jmp     #.l1
2b768                 | 
2b768     C7 8F C3 F9 |                 decod   hpar2
2b76c     01 8E 87 F1 |                 sub     hpar2, #1
2b770     C7 BF 02 F5 |                 and     retval, hpar2
2b774     2D 00 64 FD |                 ret
2b778                 | .l1
2b778     FF 7F 00 FF 
2b77c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2b780     03 70 07 F1 |                 add     htmp, #3
2b784     B8 75 03 FB |                 rdlong  htmp2, htmp
2b788     18 8E 87 F1 |                 sub     hpar2, #24
2b78c     C7 8F C3 F9 |                 decod   hpar2
2b790     01 8E 87 F1 |                 sub     hpar2, #1
2b794     B9 75 43 F0 |                 shr     htmp2, htmp1
2b798     C7 75 03 F5 |                 and     htmp2, hpar2
2b79c     18 74 67 F0 |                 shl     htmp2, #24
2b7a0     BA BF 42 F5 |                 or      retval, htmp2
2b7a4     2D 00 64 FD |                 ret
2b7a8                 | 
2b7a8                 | '------------------------------------------------------------------------------
2b7a8                 | ' Normalize value to signed word (-32768 / 32767)
2b7a8                 | '------------------------------------------------------------------------------
2b7a8                 | ' On entry:
2b7a8                 | '   retval - value to normalize
2b7a8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2b7a8                 | '   - or -
2b7a8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2b7a8                 | '   hidr_size - value bits length
2b7a8                 | ' On exit:
2b7a8                 | '   retval - normalized value
2b7a8                 | '------------------------------------------------------------------------------
2b7a8                 | hpad_normalize
2b7a8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2b7ac     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2b7b0     2D 00 64 AD |         if_z    ret
2b7b4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2b7b8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2b7bc     0F 72 77 F7 |                 signx   htmp1, #15      wc
2b7c0     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2b7c4     00 BE 66 C7 |         if_c    signx   retval, #0-0
2b7c8     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2b7cc     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2b7d0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2b7d4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2b7d8     B8 71 53 F6 |                 abs     htmp            wc
2b7dc     1F BE 0E F4 |                 testb   retval, #31     wz
2b7e0     5F BF 42 F6 |                 abs     retval
2b7e4     B8 BF 12 FD |                 qdiv    retval, htmp
2b7e8     18 BE 62 FD |                 getqx   retval
2b7ec     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2b7f0     C0 FF 7F FF 
2b7f4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2b7f8     2D 00 64 FD |                 ret
2b7fc                 | 
2b7fc                 | '------------------------------------------------------------------------------
2b7fc                 | ' Perform controller actions
2b7fc                 | ' On entry:
2b7fc                 | '    hidr_id        report id
2b7fc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2b7fc                 | '                      X = hidr_axis+0, #0
2b7fc                 | '                      Y = hidr_axis+0, #1
2b7fc                 | '                      Z = hidr_axis+1, #0
2b7fc                 | '                     RX = hidr_axis+1, #1
2b7fc                 | '                     RY = hidr_axis+2, #0
2b7fc                 | '                     RZ = hidr_axis+2, #1
2b7fc                 | '    hidr_buttons   buttons state (bits 0 to 31)
2b7fc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2b7fc                 | '
2b7fc                 | '                     -------3 -------2 -------1 -------0 byte
2b7fc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2b7fc                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2b7fc                 | '                                zyx||| |||||||| ++++++++ n. buttons
2b7fc                 | '                                |||||| ||||++++--------- n. axes
2b7fc                 | '                                |||||| ++++------------- n. hats
2b7fc                 | '                                ++++++------------------ valid axes
2b7fc                 | '------------------------------------------------------------------------------
2b7fc                 | hpad_translate
2b7fc                 | 
2b7fc                 | 
2b7fc                 |         if HAVE_HIDPAD
2b7fc     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2b800     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2b804     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2b808     01 70 E7 F2 |                 cmpsub  htmp,#1
2b80c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2b810     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2b814     2D 00 7C 3D |         if_ae   ret     wcz
2b818     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2b81c     B8 F3 03 F1 |                 add     ptrb,htmp
2b820     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2b824     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2b828     28 0C 64 FD |                 setq    #7-1
2b82c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2b830                 |         end
2b830                 | 
2b830                 | 
2b830                 |         if EMUPAD_MAX_PLAYER > 0
2b830                 | .emupad_no_hat
2b830                 |         if EMUPAD_BT0_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT1_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT2_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT3_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT4_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT5_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT6_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT7_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT8_BIT >= 0
2b830                 |         end
2b830                 |         if EMUPAD_BT9_BIT >= 0
2b830                 |         end
2b830                 | .emupad_slot_over
2b830                 |         end
2b830                 | 
2b830                 |         if 0
2b830                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2b830                 | 
2b830                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2b830                 | 
2b830                 |         end
2b830     2D 00 64 FD |                 ret
2b834                 | end
2b834                 | 
2b834                 | if EMUPAD_MAX_PLAYER > 0
2b834                 | '------------------------------------------------------------------------------
2b834                 | ' Clear EmuPad state
2b834                 | '------------------------------------------------------------------------------
2b834                 | emupad_reset
2b834                 | 
2b834                 | '------------------------------------------------------------------------------
2b834                 | ' Get EmuPad Player number for current device (into retval)
2b834                 | ' Z flag is also set if current device is valid
2b834                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2b834                 | '------------------------------------------------------------------------------
2b834                 | emupad_getnum
2b834                 | .loop
2b834                 | '------------------------------------------------------------------------------
2b834                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2b834                 | '------------------------------------------------------------------------------
2b834                 | emupad_discon
2b834                 | .loop         
2b834                 |         
2b834                 |         ' FALL THROUGH!!!
2b834                 | 
2b834                 | '------------------------------------------------------------------------------
2b834                 | ' Update EmuPad reports (all of them...)
2b834                 | '------------------------------------------------------------------------------
2b834                 | emupad_write_reports
2b834                 | .devloop
2b834                 | 
2b834                 | end
2b834                 | 
2b834                 | 
2b834                 | '------------------------------------------------------------------------------
2b834                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b834                 | '------------------------------------------------------------------------------
2b834                 | ' On entry:
2b834                 | ' On exit:
2b834                 | '------------------------------------------------------------------------------
2b834                 | hget_hub_status
2b834     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2b838     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b83c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2b840     01 90 2F F9 |                 setword hpar3, #1, #1
2b844     CF 02 A0 FD |                 call    #do_int_in
2b848     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b84c     0C 00 90 AD |         if_z    jmp     #.data
2b850     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2b854     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2b858     2D 00 64 FD |                 ret
2b85c                 | .data
2b85c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b860     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b864                 | 
2b864     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2b868     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2b86c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2b870     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2b874                 |                 debug(ubin_long(hub_status_chg))
2b874                 | 
2b874     01 5A 06 F6 |                 mov     hdev_port, #1
2b878                 | .loop
2b878     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2b87c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2b880     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2b884     F0 FF 9F 3D |         if_nc   jmp     #.loop
2b888     2D 00 64 FD |                 ret
2b88c                 | 
2b88c                 | hub_port_handler
2b88c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2b890     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b894     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b898     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b89c     55 02 A0 FD |                 call    #control_read
2b8a0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2b8a4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2b8a4                 | 
2b8a4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2b8a8     50 01 90 5D |         if_x0   jmp     #.other
2b8ac     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2b8b0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2b8b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b8b8     A0 02 A0 FD |                 call    #control_write
2b8bc     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2b8c0     7C 01 90 5D |         if_x0   jmp     #.disconnect
2b8c4     B0 99 02 F6 |                 mov     hctwait, _100ms_
2b8c8     EF 02 A0 FD |                 call    #poll_waitx
2b8cc                 | 
2b8cc     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2b8d0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2b8d4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b8d8     A0 02 A0 FD |                 call    #control_write
2b8dc                 | 
2b8dc     02 76 07 F6 |                 mov     htmp3, #2
2b8e0                 | .wait_reset
2b8e0     AC 99 02 F6 |                 mov     hctwait, _8ms_
2b8e4     EF 02 A0 FD |                 call    #poll_waitx
2b8e8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b8ec     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b8f0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b8f4     55 02 A0 FD |                 call    #control_read
2b8f8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2b8fc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2b900     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2b904                 | 
2b904     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2b908     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2b90c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b910     A0 02 A0 FD |                 call    #control_write
2b914                 | 
2b914     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2b918                 | .wait_recover
2b918     A7 99 02 F6 |                 mov     hctwait, _1ms_
2b91c     EF 02 A0 FD |                 call    #poll_waitx
2b920     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2b924                 | 
2b924     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b928     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2b92c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2b930                 | 
2b930     00 08 00 FF 
2b934     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2b938     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2b93c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2b940     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2b944     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2b948     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b94c     48 01 90 5D |         if_nz   jmp     #.done
2b950                 | .get_dev_desc
2b950     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2b954     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2b958     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2b95c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2b960     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2b964     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2b968     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2b96c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b970     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b974     AC 99 02 F6 |                 mov     hctwait, _8ms_
2b978     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2b97c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2b980     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2b984     BE 00 A0 FD |                 call    #calc_crc5
2b988     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2b98c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2b990     F7 AD C2 FA |                 rdbyte  total_data, pb
2b994     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2b998     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2b99c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b9a0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b9a4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2b9a8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2b9ac                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2b9ac     9F 99 02 F6 |                 mov     hctwait, _500us_
2b9b0     EF 02 A0 FD |                 call    #poll_waitx
2b9b4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2b9b8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2b9bc     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2b9c0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2b9c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b9c8     CC 00 90 5D |         if_nz   jmp     #.done
2b9cc     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2b9d0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2b9d4     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2b9d8     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2b9dc     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2b9e0     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2b9e4     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2b9e8     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2b9ec     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2b9f0     A4 00 90 CD |         if_b    jmp     #.done
2b9f4     6C F0 BF FD |                 call    #hparse_con_desc
2b9f8     9C 00 90 FD |                 jmp     #.done
2b9fc                 | 
2b9fc                 | .other
2b9fc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2ba00     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2ba04     28 00 90 AD |         if_x1   jmp     #.reset_feature
2ba08     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2ba0c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2ba10     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2ba14     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2ba18     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2ba1c     10 00 90 AD |         if_x1   jmp     #.reset_feature
2ba20     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2ba24     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2ba28     04 00 90 AD |         if_x1   jmp     #.reset_feature
2ba2c     68 00 90 FD |                 jmp     #.done
2ba30                 | .reset_feature
2ba30     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2ba34     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2ba38     A0 02 A0 FD |                 call    #control_write
2ba3c     58 00 90 FD |                 jmp     #.done
2ba40                 | .disconnect
2ba40                 | 
2ba40     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2ba44     00 70 E3 F8 |                 getbyte htmp
2ba48     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2ba4c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2ba50     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2ba54     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2ba58     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2ba5c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2ba60                 |         if EMUPAD_MAX_PLAYER > 0
2ba60                 |         end
2ba60                 |         if HAVE_MOUSE
2ba60     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2ba64     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2ba68     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2ba6c                 |         end
2ba6c                 |         if HAVE_HIDPAD
2ba6c     14 0A F0 FE |                 loc ptrb,#hidpad_report
2ba70     2D 71 03 F6 |                 mov htmp,hdev_port
2ba74     01 70 E7 F2 |                 cmpsub htmp,#1
2ba78     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2ba7c     B8 F3 03 F1 |                 add ptrb,htmp
2ba80     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2ba84     80 01 6C FC |                 wrlong #0,ptrb
2ba88                 |         end
2ba88                 | 
2ba88     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2ba8c     00 00 C4 F8 |                 setbyte #0
2ba90     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ba94     00 00 04 F6 |                 mov     0-0, #0
2ba98                 | 
2ba98                 | .done
2ba98     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2ba9c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2baa0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2baa4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2baa8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2baac     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2bab0                 | 
2bab0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2bab4     27 EF 03 F6 |                 mov     pb, urx_buff_p
2bab8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2babc     55 02 A0 FD |                 call    #control_read
2bac0     00 69 06 FB |                 rdlong  hub_port_status, ptra
2bac4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2bac4     2D 00 64 FD |                 ret
2bac8                 | 
2bac8                 | '------------------------------------------------------------------------------
2bac8                 | ' Partially populated SETUP packets
2bac8                 | '------------------------------------------------------------------------------
2bac8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2bac9     06          |                 byte    REQ_GET_DESC
2baca     00 01       |                 word    TYPE_DEVICE << 8
2bacc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bace     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bad0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2bad1     06          |                 byte    REQ_GET_DESC
2bad2     00 02       |                 word    TYPE_CONFIG << 8
2bad4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bad6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bad8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2bad9     09          |                 byte    REQ_SET_CONFIG
2bada     00 00       |                 word    0       ' Configuration value
2badc     00 00       |                 word    0       ' Zero
2bade     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2bae0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2bae1     05          |                 byte    REQ_SET_ADDR
2bae2     00 00       |                 word    0       ' Zero
2bae4     00 00       |                 word    0       ' Zero
2bae6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2bae8                 | '------------------------------------------------------------------------------
2bae8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2bae8                 | ' wValue field dictates which protocol should be used.
2bae8                 | '
2bae8                 | ' When initialized, all devices default to report protocol. However the host
2bae8                 | ' should not make any assumptions about the device state and should set the
2bae8                 | ' desired protocol whenever initializing a device.
2bae8                 | '------------------------------------------------------------------------------
2bae8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2bae9     0B          |                 byte    HID_SET_PROTO
2baea     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2baec                 |                                                 ' (HID 1.11 Section 7.2.6).
2baec     00 00       |                 word    0               ' Interface index number.
2baee     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2baf0                 | '------------------------------------------------------------------------------
2baf0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2baf1     0A          |                 byte    HID_SET_IDLE
2baf2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2baf4                 |                                         ' reporting until a change is detected in the report data
2baf4                 | 
2baf4                 |                                         ' (HID 1.11 Section 7.2.4).
2baf4     00 00       |                 word    0       ' Interface index number.
2baf6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2baf8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2baf9     09          |                 byte    HID_SET_REPORT
2bafa     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2bafc                 |                                         ' (HID 1.11 Section 7.2.2).
2bafc     00 00       |                 word    0       ' Interface index number.
2bafe     00 00       |                 word    0       ' Size of the report, in bytes.
2bb00     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2bb01     06          |                 byte    REQ_GET_DESC
2bb02     00 22       |                 word    TYPE_REPORT << 8
2bb04     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bb06     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bb08                 | '------------------------------------------------------------------------------
2bb08     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2bb09     06          |                 byte    REQ_GET_DESC
2bb0a     00 29       |                 word    TYPE_HUB << 8
2bb0c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bb0e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bb10     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2bb11     03          |                 byte    REQ_SET_FEATURE
2bb12     00 00       |                 word    0       ' port power
2bb14     01 00       |                 word    1       ' Port index number (1+)
2bb16     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bb18     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2bb19     01          |                 byte    REQ_CLEAR_FEATURE
2bb1a     00 00       |                 word    0       ' port power
2bb1c     01 00       |                 word    1       ' Port index number (1+)
2bb1e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bb20     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2bb21     00          |                 byte    REQ_GET_STATUS
2bb22     00 00       |                 word    0
2bb24     01 00       |                 word    1       ' Port index number (1+)
2bb26     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2bb28                 | '------------------------------------------------------------------------------
2bb28                 | if _HAVE_GAMEPAD
2bb28     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2bb2c                 | ps3_command_buff
2bb2c     00 00 00 00 
2bb30     00          |                 byte    $00, $00, $00, $00, $00
2bb31     00 00 00 00 
2bb35     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2bb36     FF 27 10 00 
2bb3a     32          |                 byte    $FF, $27, $10, $00, $32
2bb3b     FF 27 10 00 
2bb3f     32          |                 byte    $FF, $27, $10, $00, $32
2bb40     FF 27 10 00 
2bb44     32          |                 byte    $FF, $27, $10, $00, $32
2bb45     FF 27 10 00 
2bb49     32          |                 byte    $FF, $27, $10, $00, $32
2bb4a     00 00 00 00 
2bb4e     00          |                 byte    $00, $00, $00, $00, $00
2bb4f     00 00 00 00 
2bb53     00          |                 byte    $00, $00, $00, $00, $00
2bb54     00 00 00 00 
2bb58     00          |                 byte    $00, $00, $00, $00, $00
2bb59     00 00 00    |                 byte    $00, $00, $00
2bb5c                 | '------------------------------------------------------------------------------
2bb5c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2bb5f                 |                                         ' 0x01 All blinking
2bb5f                 |                                         ' 0x02 1 flashes, then on
2bb5f                 |                                         ' 0x03 2 flashes, then on
2bb5f                 |                                         ' 0x04 3 flashes, then on
2bb5f                 |                                         ' 0x05 4 flashes, then on
2bb5f                 |                                         ' 0x06 1 on
2bb5f                 |                                         ' 0x07 2 on
2bb5f                 |                                         ' 0x08 3 on
2bb5f                 |                                         ' 0x09 4 on
2bb5f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2bb5f                 |                                         ' 0x0B Blinking*
2bb5f                 |                                         ' 0x0C Slow blinking*
2bb5f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2bb5f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2bb62     00          |                 byte    $00             ' Left rumble
2bb63     00          |                 byte    $00             ' Right rumble
2bb64     00 00 00    |                 byte    $00, $00, $00
2bb67     00          | end
2bb68                 | alignl
2bb68                 | 
2bb68                 | if HAVE_MOUSE
2bb68     00 00 00 00 
2bb6c     00 00 00 00 | mouse_limits long 0[2]
2bb70     00 00 00 00 | mouse_outptr long 0
2bb74                 | end
2bb74                 | 
2bb74                 | if KEYQUEUE_SIZE > 0
2bb74     00          | keyq_head byte 0
2bb75     00          | keyq_tail byte 0
2bb76     00 00 00 00 
      ...             
2bd72     00 00 00 00 
2bd76     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2bd78                 | alignl
2bd78                 | end
2bd78                 | 
2bd78                 | if EMUPAD_MAX_PLAYER > 0
2bd78                 | emupad_rule_buffer
2bd78                 | if EMUPAD_BUILTIN_RULES
2bd78                 | file "padmap_builtin.dat"
2bd78                 | end
2bd78                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2bd78                 | '' Default rule directly follows!
2bd78                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2bd78                 | end
2bd78                 | 
2bd78                 | '------------------------------------------------------------------------------
2bd78                 | ' The USB data cache area gets zero-filled at every device disconnect
2bd78                 | '------------------------------------------------------------------------------
2bd78                 | usb_cache_start
2bd78                 | 
2bd78                 | ' HID descriptor and report buffers
2bd78                 | if !!OVERLAP_MEMORY
2bd78     00 00 00 00 
      ...             
2c470     00 00 00 00 
2c474     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2c478                 | end
2c478     00 00 00 00 
2c47c     00 00 00 00 | hkbd_report     byte    0[8]
2c480     00 00 00 00 | hkbd_led_rep    byte    0
2c484                 | alignl
2c484                 | 
2c484                 | if HAVE_HIDPAD
2c484     00 00 00 00 
      ...             
2c540     00 00 00 00 
2c544     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2c548                 | end
2c548                 | 
2c548                 | ' HUB descriptor
2c548     00          | hub_descr       byte    0   ' bDescLength
2c549     00          |                 byte    0   ' bDescriptorType
2c54a     00          |                 byte    0   ' bNbrPorts
2c54b     00 00       |                 word    0   ' wHubCharacteristics
2c54d     00          |                 byte    0   ' bPwrOn2PwrGood
2c54e     00          |                 byte    0   ' bHubContrCurrent
2c54f     00          |                 byte    0   ' DeviceRemoveable
2c550     00          |                 byte    0   ' PortPwrCtrlMask
2c551                 | 
2c551                 | usb_cache_end
2c551                 | 
2c551                 | if HAVE_MOUSE
2c551     00 00 00 00 | mouse_xacc      long 0
2c555     00 00 00 00 | mouse_yacc      long 0
2c559     00 00 00 00 | mouse_zacc      long 0
2c55d     00          | mouse_bstate    byte 0
2c55e     00          | mouse_lpending  byte 0
2c55f     00          | mouse_rpending  byte 0
2c560     00          | mouse_mpending  byte 0
2c561     00          | mouse_lock      byte 0
2c562     00 00 00    |                 byte 0[3] ' padding
2c565                 | end
2c565                 | 
2c565     00 00 00 00 
      ...             
2c5dd     00 00 00 00 
2c5e1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2c5e5     00 00 00 00 
2c5e9     00 00 00 00 
2c5ed     00 00 00 00 
2c5f1     00 00 00 00 
2c5f5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2c5f7     00 00 00 00 
      ...             
2c6ef     00 00 00 00 
2c6f3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2c6f7                 | 
2c6f7     00          | driver_cog      byte    0                       ' Current driver cog + 1
2c6f8                 | 	alignl
2c6f8                 | _Audio093b_8_sc_spin2_dat_
2c6f8                 | 
2c6f8                 | audio       org     0
2c6f8                 | 
2c6f8     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2c6fc     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2c700     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2c704                 | 
2c704     01 EC 63 FD |             cogid   pa                   ' compute cogid
2c708     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2c70c     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2c710     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2c714                 | 
2c714     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2c718     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2c71c     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2c720     0F CA 05 FC |             wrpin   dac,#right
2c724     0F BE 1C FC |             wxpin   #95,#right    
2c728     41 9C 64 FD |             dirh    #left addpins 1
2c72c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2c730     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2c734     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2c738                 |             
2c738                 | '---------------------------------------------------------------------------------        
2c738                 | '----------------- The main loop -------------------------------------------------
2c738                 | '---------------------------------------------------------------------------------
2c738                 | 
2c738     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2c73c     10 00 90 CD |       if_c  jmp     #loop1
2c740                 |   
2c740     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2c744     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2c748     B1 00 80 F1 |             sub     0-0,a40000000
2c74c     FD A9 6D FB |             djnz    cn,#p402
2c750                 |     
2c750     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2c754     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2c758     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2c75c     01 A8 05 C6 |     if_c    mov     cn,#1
2c760     B6 AA 39 F3 |             fle     ct,time3 wcz
2c764     02 A8 05 C6 |     if_c    mov     cn,#2     
2c768     B7 AA 39 F3 |             fle     ct,time4 wcz
2c76c     03 A8 05 C6 |     if_c    mov     cn,#3
2c770     B8 AA 39 F3 |             fle     ct,time5 wcz
2c774     04 A8 05 C6 |     if_c    mov     cn,#4
2c778     B9 AA 39 F3 |             fle     ct,time6 wcz
2c77c     05 A8 05 C6 |     if_c    mov     cn,#5
2c780     BA AA 39 F3 |             fle     ct,time7 wcz
2c784     06 A8 05 C6 |     if_c    mov     cn,#6
2c788     BB AA 39 F3 |             fle     ct,time8 wcz
2c78c     07 A8 05 C6 |     if_c    mov     cn,#7
2c790                 | 
2c790                 | 
2c790                 | '----------------------------------------------------------------------------------
2c790                 | '------------- Compute channel samples --------------------------------------------
2c790                 | '----------------------------------------------------------------------------------
2c790                 | 
2c790                 | 
2c790     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2c794     05 78 65 F0 |             shl     channeladd,#5
2c798     BC F0 03 F1 |             add     ptra,channeladd
2c79c                 | 
2c79c     28 0E 64 FD |             setq    #7                        ' read parameters
2c7a0     00 8F 05 FB |             rdlong  pointer0,ptra
2c7a4                 | '            testb   command0,#29 wz
2c7a4                 | '    if_nz   jmp     #p408
2c7a4                 | '    	    getword envptr,command0,#0
2c7a4                 | '    	    getbyte envspeed,command0,#2
2c7a4                 | '    	    jmp     #p404                     'if envelope then no sample rate
2c7a4                 |     	    
2c7a4     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2c7a8     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2c7ac     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2c7b0     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2c7b4     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2c7b8     00 7C 0D F2 |             cmp     qq,#0 wz                         
2c7bc     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2c7c0     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2c7c4                 |             
2c7c4     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2c7c8     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2c7cc     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2c7d0                 | 
2c7d0                 | 
2c7d0     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2c7d4     C8 B0 39 F9 |             getword oldrs,sample0,#1
2c7d8     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2c7dc     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2c7e0     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2c7e4     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2c7e8                 | 
2c7e8     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2c7ec     00 AC 01 F6 |             mov     dt0,0-0    
2c7f0     B3 AC 81 F1 |             sub     dt0,time0
2c7f4                 |             
2c7f4     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2c7f8     CF 00 00 F1 |             add     0-0,afreq0  	
2c7fc                 | 
2c7fc     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2c800     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2c804     08 8E 45 F0 |             shr     pointer0,#8
2c808                 |          
2c808     1F 92 0D F4 |             testb   sstart0,#31 wz            
2c80c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2c810     1C 92 0D F4 |             testb   sstart0,#28 wz            
2c814     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2c818                 |             
2c818     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2c81c     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2c820     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2c824                 |             
2c824     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2c828     C9 7C 01 F1 |             add     qq,sstart0            
2c82c                 | 
2c82c                 | 
2c82c                 | 
2c82c     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2c830     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2c834     04 01 B0 1D |     if_gt   call    #cache_read
2c838                 |          
2c838                 |          
2c838                 |  
2c838                 |          
2c838     1F 92 0D F4 |             testb   sstart0,#31 wz 
2c83c     08 7E 65 50 |     if_nz   shl     spl,#8
2c840     08 8E 65 50 |     if_nz   shl     pointer0,#8
2c844     07 8E 65 A0 |     if_z    shl     pointer0,#7
2c848     1C 92 0D F4 |             testb   sstart0,#28 wz            
2c84c     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2c850     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2c854                 |     
2c854                 | 
2c854     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2c858     00 7E 01 F6 |             mov     spl,0-0
2c85c                 |  
2c85c     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2c860     00 B2 01 F6 |             mov     ls0,0-0
2c864     20 00 00 FF 
2c868     00 7C 05 F6 |             mov     qq,##16384
2c86c     D2 7C 81 F1 |             sub     qq,apan0
2c870     BE 7E 31 FA |             scas    spl,qq
2c874     00 B4 01 F6 |             mov     rs0, 0-0
2c878                 | 
2c878     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2c87c     DA B8 01 F1 |             add     rs,rs0
2c880     D7 B6 81 F1 |             sub     ls,oldls
2c884     D9 B6 01 F1 |             add     ls,ls0
2c888                 |    
2c888     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2c88c     D9 90 21 F9 |             setword sample0,ls0,#0
2c890                 |             
2c890     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2c894     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2c898     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2c89c     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2c8a0     04 00 00 AF 
2c8a4     00 68 05 A1 |     if_z    add     time1,##2048
2c8a8     B4 6A 01 A6 |     if_z    mov     time2,time1
2c8ac     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2c8b0                 |             
2c8b0     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2c8b4     00 8F 65 FC |             wrlong  pointer0,ptra
2c8b8     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2c8bc                 |                       
2c8bc     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2c8c0     FF 7B 25 A7 |     if_z    decmod  front, #511          
2c8c4                 |          
2c8c4     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2c8c8     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2c8cc     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2c8d0     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2c8d4                 | 	    
2c8d4                 | 		    
2c8d4     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2c8d8     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2c8dc     D8 BC 01 F6 |             mov     newsample, oldrs       
2c8e0                 | 
2c8e0     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2c8e4     D6 66 01 F1 |             add     time0,dt0    
2c8e8                 |                                      
2c8e8     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2c8ec     60 FE 9F AD |     if_z    jmp     #loop1
2c8f0     D6 7C 01 F6 |             mov     qq,dt0
2c8f4                 |   
2c8f4     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2c8f8     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2c8fc     F4 FF 9F AD |     if_e    jmp     #p301    
2c900                 | 		
2c900     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2c904     20 00 90 AD |     if_z    jmp #p302	   
2c908                 |  
2c908                 |  
2c908     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2c90c     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2c910     02 C6 65 C0 |     if_c    shl scptr2,#2
2c914     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2c918     60 C6 65 FC |             wrlong scptr2,#$60
2c91c     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2c920     01 00 00 CF 
2c924     7F C4 05 C7 |     if_c    incmod scptr,##639
2c928                 | 			    
2c928     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2c92c     00 00 00 FF 
2c930     FF 7B 05 F7 |             incmod  front, ##511
2c934     EF 7D 6D FB |             djnz    qq,#p301
2c938                 |             
2c938     FC FD 9F FD |             jmp     #loop            'loop
2c93c                 | 
2c93c                 | '----------------------------------------------------------------------------------
2c93c                 | '------------- This is the end of the main loop -----------------------------------
2c93c                 | '----------------------------------------------------------------------------------
2c93c                 | 
2c93c                 | '----------------------------------------------------------------------------------
2c93c                 | '------------- PSRAM cache ----------- --------------------------------------------
2c93c                 | '----------------------------------------------------------------------------------
2c93c                 | 
2c93c                 | ' There are 8 cache pointers for 8 channels
2c93c                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2c93c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2c93c                 | 
2c93c                 | 
2c93c     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2c940                 |             
2c940     BE E8 01 F6 | 	    mov     addrhi,qq		
2c944     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2c948     E8 A8 95 F9 | 	    alts    cn,#cache1            
2c94c     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2c950     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2c954                 | 	
2c954     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2c958     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2c95c     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2c960     08 E0 65 F0 | 	    shl     cmd,#8
2c964     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2c968     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2c96c     08 E2 65 F0 |             shl     hubaddr,#8                  '
2c970     E7 E2 01 F1 |             add     hubaddr,hubptr 
2c974     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2c978     28 04 64 FD |             setq    #2                          ' write 3 longs
2c97c     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2c980     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2c984     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2c988                 |             
2c988                 | 	
2c988     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2c98c     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2c990     E7 7C 01 F1 | 	    add     qq,hubptr
2c994     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2c998     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2c99c                 |           
2c99c                 | 
2c99c                 | '--------------------------------------------------------------------------
2c99c                 | '------ Interrupt service -------------------------------------------------
2c99c                 | '------ Output the sample, get the next one if exists ---------------------
2c99c                 | '--------------------------------------------------------------------------
2c99c                 | 
2c99c     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2c9a0     0F 88 25 FC |             wypin   rsample,#right       '4
2c9a4     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2c9a8     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2c9ac     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2c9b0     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2c9b4     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2c9b8                 |     
2c9b8     F5 FF 3B FB |             reti1                        '17/19 
2c9bc                 |           
2c9bc                 | '---------------------------------------------------------------------------
2c9bc                 | '-------- End of interrupt -------------------------------------------------
2c9bc                 | '---------------------------------------------------------------------------    
2c9bc                 | 
2c9bc                 | 
2c9bc                 | '---------------------------------------------------------------------------
2c9bc                 | '------- Variables ---------------------------------------------------------
2c9bc                 | '---------------------------------------------------------------------------
2c9bc                 | 
2c9bc                 | ' constants
2c9bc                 | 
2c9bc     00 00 00 40 | a40000000   long $40000000
2c9c0     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2c9c4                 | 
2c9c4                 | ' Time variables
2c9c4                 | 
2c9c4     00 00 00 00 | time0       long 0    ' Global sample computing time
2c9c8     01 00 00 00 | time1       long 1    ' Local channels time
2c9cc     02 00 00 00 | time2       long 2
2c9d0     03 00 00 00 | time3       long 3
2c9d4     04 00 00 00 | time4       long 4
2c9d8     05 00 00 00 | time5       long 5
2c9dc     06 00 00 00 | time6       long 6
2c9e0     07 00 00 00 | time7       long 7
2c9e4     08 00 00 00 | time8       long 8
2c9e8                 | 
2c9e8     00 00 00 00 | channeladd long 0
2c9ec                 | 
2c9ec     00 00 00 00 | front       long 0
2c9f0                 | 
2c9f0                 | ' temporary variables 
2c9f0     00 00 00 00 | qq          long 0
2c9f4     00 00 00 00 | spl         long 0
2c9f8     00 00 00 00 | zero        long 0
2c9fc     00 00 00 00 | mailbox     long 0
2ca00     00 00 00 00 | mailbox2 long 0
2ca04                 | 
2ca04                 | ' Interrupt ISR variables
2ca04                 | 
2ca04     00 00 00 00 | lsample     long 0
2ca08     00 00 00 00 | rsample     long 0
2ca0c     00 00 00 00 | lsnext      long 0
2ca10     00 00 00 00 | rsnext      long 0 
2ca14                 | 
2ca14                 | ' channel parameter block
2ca14                 | 
2ca14     00 00 00 00 | pointer0    long 0     
2ca18     00 00 00 00 | sample0     long 0
2ca1c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2ca20     00 00 00 00 | lstart0     long 0
2ca24     00 00 00 00 | lend0       long 0
2ca28     00 00 00 00 | volpan0     long 0
2ca2c     00 00 00 00 | freqskip0   long 0
2ca30     00 00 00 00 | command0    long 0
2ca34                 | 
2ca34     00 00 00 00 | afreq0      long 0
2ca38     00 00 00 00 | askip0      long 0
2ca3c     00 00 00 00 | avol0       long 0
2ca40     00 00 00 00 | apan0       long 0
2ca44                 | 
2ca44     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2ca48     00 00 00 00 | cn          long 0
2ca4c     00 00 00 00 | ct          long 0
2ca50     00 00 00 00 | dt0         long 0
2ca54                 | 
2ca54                 | ' Samples
2ca54     00 00 00 00 | oldls       long 0
2ca58     00 00 00 00 | oldrs       long 0
2ca5c                 | 
2ca5c     00 00 00 00 | ls0         long 0
2ca60     00 00 00 00 | rs0         long 0
2ca64                 | 
2ca64     00 00 00 00 | ls          long 0    
2ca68     00 00 00 00 | rs          long 0
2ca6c                 | 
2ca6c     00 00 00 00 | oldsample   long 0
2ca70     00 00 00 00 | newsample   long 0
2ca74                 | 
2ca74     00 00 00 00 | nrsample    long 0
2ca78     00 00 00 00 | nlsample    long 0
2ca7c                 | 
2ca7c     00 00 00 00 | scbase long 0
2ca80     00 00 00 00 | scptr long 0
2ca84     00 00 00 00 | scptr2 long 0
2ca88     00 00 00 00 | scope long 0
2ca8c                 | 
2ca8c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2ca90     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2ca94                 | 
2ca94     00 18 07 00 | hubptr      long $71800
2ca98     00 00 00 00 | cache1      long 0
2ca9c     00 00 00 00 | cache2      long 0
2caa0     00 00 00 00 | cache3      long 0
2caa4     00 00 00 00 | cache4      long 0
2caa8     00 00 00 00 | cache5      long 0
2caac     00 00 00 00 | cache6      long 0
2cab0     00 00 00 00 | cache7      long 0
2cab4     00 00 00 00 | cache8      long 0
2cab8                 | 
2cab8                 | 
2cab8     00 00 00 00 | cmd         long 0
2cabc     00 00 00 00 | hubaddr     long 0
2cac0     00 01 00 00 | count       long 256
2cac4     00 00 00 00 | addrlo long 0
2cac8     00 00 00 00 | addrhi long 0
2cacc     00 00 00 00 | pointer00 long 0
2cad0     00 00 00 00 
2cad4     00 00 00 00 | null  			long 	0,0           ' for channel reset
2cad8                 | 	alignl
2cad8                 | __system__dat_
2cad8     00 00 00 00 
2cadc     00 00 00 00 | 	byte	$00[8]
2cae0     03 00 00 00 
2cae4     00 00 00 00 
2cae8     00 00 00 00 
2caec     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2caf0     00 00 00 00 
      ...             
2cd7c     00 00 00 00 
2cd80     00 00 00 00 | 	byte	$00[660]
2cd84     00 00 10 05 | 	long	(81 {__system____root_opendir})<<20
2cd88     00 00 20 05 | 	long	(82 {__system____root_closedir})<<20
2cd8c     00 00 30 05 | 	long	(83 {__system____root_readdir})<<20
2cd90     00 00 40 05 | 	long	(84 {__system____root_stat})<<20
2cd94     00 00 00 00 
2cd98     00 00 00 00 
2cd9c     00 00 00 00 
2cda0     00 00 00 00 
2cda4     00 00 00 00 
2cda8     00 00 00 00 
2cdac     00 00 00 00 | 	byte	$00[28]
2cdb0     18 CE 02 00 | 	long	@@@__system__dat_ + 832
2cdb4     1B CE 02 00 | 	long	@@@__system__dat_ + 835
2cdb8     3C CE 02 00 | 	long	@@@__system__dat_ + 868
2cdbc     55 CE 02 00 | 	long	@@@__system__dat_ + 893
2cdc0     70 CE 02 00 | 	long	@@@__system__dat_ + 920
2cdc4     8A CE 02 00 | 	long	@@@__system__dat_ + 946
2cdc8     9A CE 02 00 | 	long	@@@__system__dat_ + 962
2cdcc     AC CE 02 00 | 	long	@@@__system__dat_ + 980
2cdd0     BE CE 02 00 | 	long	@@@__system__dat_ + 998
2cdd4     D0 CE 02 00 | 	long	@@@__system__dat_ + 1016
2cdd8     DC CE 02 00 | 	long	@@@__system__dat_ + 1028
2cddc     ED CE 02 00 | 	long	@@@__system__dat_ + 1045
2cde0     01 CF 02 00 | 	long	@@@__system__dat_ + 1065
2cde4     0B CF 02 00 | 	long	@@@__system__dat_ + 1075
2cde8     1B CF 02 00 | 	long	@@@__system__dat_ + 1091
2cdec     2A CF 02 00 | 	long	@@@__system__dat_ + 1106
2cdf0     40 CF 02 00 | 	long	@@@__system__dat_ + 1128
2cdf4     59 CF 02 00 | 	long	@@@__system__dat_ + 1153
2cdf8     6D CF 02 00 | 	long	@@@__system__dat_ + 1173
2cdfc     7B CF 02 00 | 	long	@@@__system__dat_ + 1187
2ce00     8F CF 02 00 | 	long	@@@__system__dat_ + 1207
2ce04     9B CF 02 00 | 	long	@@@__system__dat_ + 1219
2ce08     AD CF 02 00 | 	long	@@@__system__dat_ + 1237
2ce0c     C5 CF 02 00 | 	long	@@@__system__dat_ + 1261
2ce10     D7 CF 02 00 | 	long	@@@__system__dat_ + 1279
2ce14     EA CF 02 00 | 	long	@@@__system__dat_ + 1298
2ce18     4F 4B 00 4E 
2ce1c     75 6D 65 72 
2ce20     69 63 61 6C 
2ce24     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2ce28     75 6D 65 6E 
2ce2c     74 20 6F 75 
2ce30     74 20 6F 66 
2ce34     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2ce38     61 69 6E 00 
2ce3c     52 65 73 75 
2ce40     6C 74 20 6E 
2ce44     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2ce48     65 70 72 65 
2ce4c     73 65 6E 74 
2ce50     61 62 6C 65 
2ce54     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2ce58     65 67 61 6C 
2ce5c     20 6D 75 6C 
2ce60     74 69 62 79 
2ce64     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2ce68     65 71 75 65 
2ce6c     6E 63 65 00 
2ce70     4E 6F 20 73 
2ce74     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2ce78     66 69 6C 65 
2ce7c     20 6F 72 20 
2ce80     64 69 72 65 
2ce84     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2ce88     79 00 42 61 
2ce8c     64 20 66 69 
2ce90     6C 65 20 6E 
2ce94     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2ce98     72 00 50 65 
2ce9c     72 6D 69 73 
2cea0     73 69 6F 6E 
2cea4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2cea8     69 65 64 00 
2ceac     4E 6F 74 20 
2ceb0     65 6E 6F 75 
2ceb4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2ceb8     65 6D 6F 72 
2cebc     79 00 54 65 
2cec0     6D 70 6F 72 
2cec4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2cec8     66 61 69 6C 
2cecc     75 72 65 00 
2ced0     46 69 6C 65 
2ced4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2ced8     73 74 73 00 
2cedc     49 6E 76 61 
2cee0     6C 69 64 20 
2cee4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2cee8     6D 65 6E 74 
2ceec     00 54 6F 6F 
2cef0     20 6D 61 6E 
2cef4     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2cef8     65 6E 20 66 
2cefc     69 6C 65 73 
2cf00     00 49 2F 4F 
2cf04     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2cf08     6F 72 00 4E 
2cf0c     6F 74 20 61 
2cf10     20 64 69 72 
2cf14     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2cf18     72 79 00 49 
2cf1c     73 20 61 20 
2cf20     64 69 72 65 
2cf24     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2cf28     79 00 52 65 
2cf2c     61 64 20 6F 
2cf30     6E 6C 79 20 
2cf34     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2cf38     20 73 79 73 
2cf3c     74 65 6D 00 
2cf40     46 75 6E 63 
2cf44     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2cf48     20 6E 6F 74 
2cf4c     20 69 6D 70 
2cf50     6C 65 6D 65 
2cf54     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2cf58     00 44 69 72 
2cf5c     65 63 74 6F 
2cf60     72 79 20 6E 
2cf64     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2cf68     6D 70 74 79 
2cf6c     00 4E 61 6D 
2cf70     65 20 74 6F 
2cf74     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2cf78     6E 67 00 44 
2cf7c     65 76 69 63 
2cf80     65 20 6E 6F 
2cf84     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2cf88     65 6B 61 62 
2cf8c     6C 65 00 42 
2cf90     61 64 20 61 
2cf94     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2cf98     73 73 00 42 
2cf9c     72 6F 6B 65 
2cfa0     6E 20 63 6F 
2cfa4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2cfa8     74 69 6F 6E 
2cfac     00 44 65 76 
2cfb0     69 63 65 20 
2cfb4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2cfb8     65 73 6F 75 
2cfbc     72 63 65 20 
2cfc0     62 75 73 79 
2cfc4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2cfc8     73 73 20 64 
2cfcc     65 76 69 63 
2cfd0     65 20 6C 69 
2cfd4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2cfd8     6F 20 73 70 
2cfdc     61 63 65 20 
2cfe0     6F 6E 20 64 
2cfe4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2cfe8     65 00 55 6E 
2cfec     6B 6E 6F 77 
2cff0     6E 20 65 72 
2cff4     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2cff8     00 00 00 00 
2cffc     00 00 00 00 | 	byte	$00[8]
2d000     05 00 00 00 
2d004     00 00 00 00 
2d008     00 00 00 00 
2d00c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d010     00 00 00 00 | 	byte	$00, $00, $00, $00
2d014     00 00 90 06 | 	long	(105 {__system___tx})<<20
2d018     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2d01c     00 00 00 00 | 	byte	$00, $00, $00, $00
2d020     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0503})<<20
2d024     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0504})<<20
2d028     00 00 00 00 
2d02c     00 00 00 00 | 	byte	$00[8]
2d030     01 00 00 00 
2d034     06 00 00 00 
2d038     00 00 00 00 
2d03c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d040     00 00 00 00 
2d044     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d048     00 00 90 06 | 	long	(105 {__system___tx})<<20
2d04c     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2d050     00 00 00 00 | 	byte	$00, $00, $00, $00
2d054     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0503})<<20
2d058     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0504})<<20
2d05c     00 00 00 00 
2d060     00 00 00 00 | 	byte	$00[8]
2d064     01 00 00 00 
2d068     06 00 00 00 
2d06c     00 00 00 00 
2d070     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d074     00 00 00 00 
2d078     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d07c     00 00 90 06 | 	long	(105 {__system___tx})<<20
2d080     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2d084     00 00 00 00 | 	byte	$00, $00, $00, $00
2d088     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0503})<<20
2d08c     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0504})<<20
2d090     00 00 00 00 
      ...             
2d200     00 00 00 00 
2d204     00 00 00 00 | 	byte	$00[376]
2d208     0C D2 02 00 | 	long	@@@__system__dat_ + 1844
2d20c     00 00 00 00 
2d210     00 00 00 00 
2d214     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d218                 | 	alignl
2d218                 | _fatfs_cc_dat_
2d218     C7 00 FC 00 
2d21c     E9 00 E2 00 
2d220     E4 00 E0 00 
2d224     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2d228     EA 00 EB 00 
2d22c     E8 00 EF 00 
2d230     EE 00 EC 00 
2d234     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2d238     C9 00 E6 00 
2d23c     C6 00 F4 00 
2d240     F6 00 F2 00 
2d244     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2d248     FF 00 D6 00 
2d24c     DC 00 F8 00 
2d250     A3 00 D8 00 
2d254     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2d258     E1 00 ED 00 
2d25c     F3 00 FA 00 
2d260     F1 00 D1 00 
2d264     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2d268     BF 00 AE 00 
2d26c     AC 00 BD 00 
2d270     BC 00 A1 00 
2d274     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2d278     91 25 92 25 
2d27c     93 25 02 25 
2d280     24 25 C1 00 
2d284     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2d288     A9 00 63 25 
2d28c     51 25 57 25 
2d290     5D 25 A2 00 
2d294     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2d298     14 25 34 25 
2d29c     2C 25 1C 25 
2d2a0     00 25 3C 25 
2d2a4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2d2a8     5A 25 54 25 
2d2ac     69 25 66 25 
2d2b0     60 25 50 25 
2d2b4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2d2b8     F0 00 D0 00 
2d2bc     CA 00 CB 00 
2d2c0     C8 00 31 01 
2d2c4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2d2c8     CF 00 18 25 
2d2cc     0C 25 88 25 
2d2d0     84 25 A6 00 
2d2d4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2d2d8     D3 00 DF 00 
2d2dc     D4 00 D2 00 
2d2e0     F5 00 D5 00 
2d2e4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2d2e8     DE 00 DA 00 
2d2ec     DB 00 D9 00 
2d2f0     FD 00 DD 00 
2d2f4     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2d2f8     AD 00 B1 00 
2d2fc     17 20 BE 00 
2d300     B6 00 A7 00 
2d304     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2d308     B0 00 A8 00 
2d30c     B7 00 B9 00 
2d310     B3 00 B2 00 
2d314     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2d318     61 00 1A 03 
2d31c     E0 00 17 03 
2d320     F8 00 07 03 
2d324     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2d328     78 01 00 01 
2d32c     30 01 32 01 
2d330     06 01 39 01 
2d334     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2d338     2E 01 79 01 
2d33c     06 01 80 01 
2d340     4D 00 43 02 
2d344     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2d348     82 01 84 01 
2d34c     84 01 86 01 
2d350     87 01 87 01 
2d354     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2d358     8B 01 8B 01 
2d35c     8D 01 8E 01 
2d360     8F 01 90 01 
2d364     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2d368     93 01 94 01 
2d36c     F6 01 96 01 
2d370     97 01 98 01 
2d374     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2d378     9B 01 9C 01 
2d37c     9D 01 20 02 
2d380     9F 01 A0 01 
2d384     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2d388     A2 01 A4 01 
2d38c     A4 01 A6 01 
2d390     A7 01 A7 01 
2d394     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2d398     AB 01 AC 01 
2d39c     AC 01 AE 01 
2d3a0     AF 01 AF 01 
2d3a4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2d3a8     B3 01 B3 01 
2d3ac     B5 01 B5 01 
2d3b0     B7 01 B8 01 
2d3b4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2d3b8     BB 01 BC 01 
2d3bc     BC 01 BE 01 
2d3c0     F7 01 C0 01 
2d3c4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2d3c8     C3 01 C4 01 
2d3cc     C5 01 C4 01 
2d3d0     C7 01 C8 01 
2d3d4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2d3d8     CB 01 CA 01 
2d3dc     CD 01 10 01 
2d3e0     DD 01 01 00 
2d3e4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2d3e8     12 01 F3 01 
2d3ec     03 00 F1 01 
2d3f0     F4 01 F4 01 
2d3f4     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2d3f8     22 02 12 01 
2d3fc     3A 02 09 00 
2d400     65 2C 3B 02 
2d404     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2d408     66 2C 3F 02 
2d40c     40 02 41 02 
2d410     41 02 46 02 
2d414     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2d418     40 00 81 01 
2d41c     86 01 55 02 
2d420     89 01 8A 01 
2d424     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2d428     5A 02 90 01 
2d42c     5C 02 5D 02 
2d430     5E 02 5F 02 
2d434     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2d438     62 02 94 01 
2d43c     64 02 65 02 
2d440     66 02 67 02 
2d444     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2d448     6A 02 62 2C 
2d44c     6C 02 6D 02 
2d450     6E 02 9C 01 
2d454     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2d458     9D 01 73 02 
2d45c     74 02 9F 01 
2d460     76 02 77 02 
2d464     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2d468     7A 02 7B 02 
2d46c     7C 02 64 2C 
2d470     7E 02 7F 02 
2d474     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2d478     82 02 A9 01 
2d47c     84 02 85 02 
2d480     86 02 87 02 
2d484     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2d488     B1 01 B2 01 
2d48c     45 02 8D 02 
2d490     8E 02 8F 02 
2d494     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2d498     B7 01 7B 03 
2d49c     03 00 FD 03 
2d4a0     FE 03 FF 03 
2d4a4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2d4a8     86 03 88 03 
2d4ac     89 03 8A 03 
2d4b0     B1 03 11 03 
2d4b4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2d4b8     A3 03 A3 03 
2d4bc     C4 03 08 03 
2d4c0     CC 03 03 00 
2d4c4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2d4c8     8F 03 D8 03 
2d4cc     18 01 F2 03 
2d4d0     0A 00 F9 03 
2d4d4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2d4d8     F5 03 F6 03 
2d4dc     F7 03 F7 03 
2d4e0     F9 03 FA 03 
2d4e4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2d4e8     20 03 50 04 
2d4ec     10 07 60 04 
2d4f0     22 01 8A 04 
2d4f4     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2d4f8     0E 01 CF 04 
2d4fc     01 00 C0 04 
2d500     D0 04 44 01 
2d504     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2d508     00 00 7D 1D 
2d50c     01 00 63 2C 
2d510     00 1E 96 01 
2d514     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2d518     00 1F 08 06 
2d51c     10 1F 06 06 
2d520     20 1F 08 06 
2d524     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2d528     40 1F 06 06 
2d52c     51 1F 07 00 
2d530     59 1F 52 1F 
2d534     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2d538     5D 1F 56 1F 
2d53c     5F 1F 60 1F 
2d540     08 06 70 1F 
2d544     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2d548     BB 1F C8 1F 
2d54c     C9 1F CA 1F 
2d550     CB 1F DA 1F 
2d554     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2d558     F9 1F EA 1F 
2d55c     EB 1F FA 1F 
2d560     FB 1F 80 1F 
2d564     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2d568     08 06 A0 1F 
2d56c     08 06 B0 1F 
2d570     04 00 B8 1F 
2d574     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2d578     BC 1F CC 1F 
2d57c     01 00 C3 1F 
2d580     D0 1F 02 06 
2d584     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2d588     E5 1F 01 00 
2d58c     EC 1F F3 1F 
2d590     01 00 FC 1F 
2d594     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2d598     32 21 70 21 
2d59c     10 02 84 21 
2d5a0     01 00 83 21 
2d5a4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2d5a8     30 2C 2F 04 
2d5ac     60 2C 02 01 
2d5b0     67 2C 06 01 
2d5b4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2d5b8     80 2C 64 01 
2d5bc     00 2D 26 08 
2d5c0     41 FF 1A 03 
2d5c4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2d5c8     05 07 09 0E 
2d5cc     10 12 14 16 
2d5d0     18 1C 1E 43 
2d5d4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2d5d8     41 41 43 45 
2d5dc     45 45 49 49 
2d5e0     49 41 41 45 
2d5e4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2d5e8     4F 55 55 59 
2d5ec     4F 55 4F 9C 
2d5f0     4F 9E 9F 41 
2d5f4     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2d5f8     A5 A6 A7 A8 
2d5fc     A9 AA AB AC 
2d600     AD AE AF B0 
2d604     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2d608     41 41 41 B8 
2d60c     B9 BA BB BC 
2d610     BD BE BF C0 
2d614     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2d618     C5 41 41 C8 
2d61c     C9 CA CB CC 
2d620     CD CE CF D1 
2d624     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2d628     49 49 49 49 
2d62c     D9 DA DB DC 
2d630     DD 49 DF 4F 
2d634     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2d638     4F E6 E8 E8 
2d63c     55 55 55 59 
2d640     59 EE EF F0 
2d644     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2d648     F5 F6 F7 F8 
2d64c     F9 FA FB FC 
2d650     FD FE FF 00 
2d654     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2d658     00 00 00 00 | 	byte	$00, $00, $00, $00
2d65c     00 00 80 05 | 	long	(88 {_fatfs_cc_v_close})<<20
2d660     00 00 90 05 | 	long	(89 {_fatfs_cc_v_read})<<20
2d664     00 00 A0 05 | 	long	(90 {_fatfs_cc_v_write})<<20
2d668     00 00 B0 05 | 	long	(91 {_fatfs_cc_v_lseek})<<20
2d66c     00 00 C0 05 | 	long	(92 {_fatfs_cc_v_ioctl})<<20
2d670     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_flush})<<20
2d674     00 00 00 00 
2d678     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d67c     00 00 D0 05 | 	long	(93 {_fatfs_cc_v_open})<<20
2d680     00 00 E0 05 | 	long	(94 {_fatfs_cc_v_creat})<<20
2d684     00 00 F0 05 | 	long	(95 {_fatfs_cc_v_opendir})<<20
2d688     00 00 00 06 | 	long	(96 {_fatfs_cc_v_closedir})<<20
2d68c     00 00 10 06 | 	long	(97 {_fatfs_cc_v_readdir})<<20
2d690     00 00 20 06 | 	long	(98 {_fatfs_cc_v_stat})<<20
2d694     00 00 30 06 | 	long	(99 {_fatfs_cc_v_mkdir})<<20
2d698     00 00 40 06 | 	long	(100 {_fatfs_cc_v_rmdir})<<20
2d69c     00 00 50 06 | 	long	(101 {_fatfs_cc_v_remove})<<20
2d6a0     00 00 60 06 | 	long	(102 {_fatfs_cc_v_rename})<<20
2d6a4     00 00 70 06 | 	long	(103 {_fatfs_cc_v_init})<<20
2d6a8     00 00 80 06 | 	long	(104 {_fatfs_cc_v_deinit})<<20
2d6ac     FF FF FF FF 
2d6b0     1F 00 00 00 
2d6b4     1C 00 00 00 
2d6b8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2d6bc     1E 00 00 00 
2d6c0     1F 00 00 00 
2d6c4     1E 00 00 00 
2d6c8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2d6cc     1F 00 00 00 
2d6d0     1E 00 00 00 
2d6d4     1F 00 00 00 
2d6d8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2d6dc     1F 00 00 00 
2d6e0     00 00 00 00 
2d6e4     1F 00 00 00 
2d6e8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2d6ec     5A 00 00 00 
2d6f0     78 00 00 00 
2d6f4     97 00 00 00 
2d6f8     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2d6fc     D4 00 00 00 
2d700     F3 00 00 00 
2d704     11 01 00 00 
2d708     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2d70c     4E 01 00 00 
2d710     6D 01 00 00 
2d714     FF FF FF FF 
2d718     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2d71c     00 00 00 00 
      ...             
2d734     00 00 00 00 
2d738     00 00 00 00 | 	byte	$00[32]
2d73c     5A D7 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2d740     5E D7 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2d744     00 00 00 00 
2d748     00 00 00 00 
2d74c     00 00 00 00 
2d750     00 00 00 00 
2d754     00 00       | 	byte	$00[18]
2d756     3F 3F 3F 00 
2d75a     55 43 54 00 
2d75e     55 43 54 00 
2d762     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2d766     00 00 00 00 
2d76a     00 00 00    | 	byte	$00[7]
2d76d     CA 9A 3B 00 
2d771     00 00 00 01 
2d775     01 01 01 01 
2d779     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d77d     91 11 11 11 
2d781     11 01 01 01 
2d785     01 01 01 01 
2d789     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d78d     01 01 01 01 
2d791     01 01 01    | 	byte	$01[7]
2d794     90 20 20 20 
2d798     20 20 20 20 
2d79c     20 20 20 20 
2d7a0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2d7a4     42 42 42 42 
2d7a8     42 42 42 42 
2d7ac     42 42       | 	byte	$42[10]
2d7ae     20 20 20 20 
2d7b2     20 20 20    | 	byte	$20[7]
2d7b5     44 44 44 44 
2d7b9     44 44       | 	byte	$44[6]
2d7bb     04 04 04 04 
2d7bf     04 04 04 04 
2d7c3     04 04 04 04 
2d7c7     04 04 04 04 
2d7cb     04 04 04 04 | 	byte	$04[20]
2d7cf     20 20 20 20 
2d7d3     20 20       | 	byte	$20[6]
2d7d5     48 48 48 48 
2d7d9     48 48       | 	byte	$48[6]
2d7db     08 08 08 08 
2d7df     08 08 08 08 
2d7e3     08 08 08 08 
2d7e7     08 08 08 08 
2d7eb     08 08 08 08 | 	byte	$08[20]
2d7ef     20 20 20 20 
2d7f3     01 00 00 00 
2d7f7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2d7f8                 | __methodtable__
2d7f8     04 12 01 00 | 	long	@_do_no_command
2d7fc     10 B7 00 00 | 	long	@_do_plus
2d800     F0 BA 00 00 | 	long	@_do_minus
2d804     B8 BF 00 00 | 	long	@_do_or
2d808     D0 C0 00 00 | 	long	@_do_mul
2d80c     5C C6 00 00 | 	long	@_do_fdiv
2d810     A0 BE 00 00 | 	long	@_do_and
2d814     3C C4 00 00 | 	long	@_do_div
2d818     24 C8 00 00 | 	long	@_do_mod
2d81c     44 CA 00 00 | 	long	@_do_shl
2d820     5C CB 00 00 | 	long	@_do_shr
2d824     74 CC 00 00 | 	long	@_do_power
2d828     F8 A9 00 00 | 	long	@_do_getvar
2d82c     AC 88 00 00 | 	long	@_do_push
2d830     D0 A3 00 00 | 	long	@_do_assign
2d834     78 F4 00 00 | 	long	@_do_cls
2d838     6C 9E 00 00 | 	long	@_do_new
2d83c     1C F5 00 00 | 	long	@_do_plot
2d840     54 F6 00 00 | 	long	@_do_draw
2d844     3C 00 01 00 | 	long	@_do_print
2d848     34 F9 00 00 | 	long	@_do_circle
2d84c     BC F7 00 00 | 	long	@_do_fcircle
2d850     AC FA 00 00 | 	long	@_do_box
2d854     54 FE 00 00 | 	long	@_do_frame
2d858     E4 F4 00 00 | 	long	@_do_color
2d85c     C4 69 00 00 | 	long	@_do_for
2d860     F0 6B 00 00 | 	long	@_do_next
2d864     D0 9B 00 00 | 	long	@_do_list
2d868     A4 98 00 00 | 	long	@_do_run
2d86c     F8 A2 00 00 | 	long	@_do_error
2d870     F4 9F 00 00 | 	long	@_do_fast_goto
2d874     E4 A0 00 00 | 	long	@_do_find_goto
2d878     F4 A2 00 00 | 	long	@_do_slow_goto
2d87c     AC E4 00 00 | 	long	@_do_converttoint
2d880     F0 8E 00 00 | 	long	@_test_csave
2d884     44 92 00 00 | 	long	@_do_save
2d888     04 95 00 00 | 	long	@_do_load
2d88c     D8 08 01 00 | 	long	@_do_pinwrite
2d890     F0 08 01 00 | 	long	@_do_waitms
2d894     2C 0A 01 00 | 	long	@_do_waitvbl
2d898     34 0D 01 00 | 	long	@_do_if
2d89c     18 0E 01 00 | 	long	@_do_else
2d8a0     3C 0E 01 00 | 	long	@_do_nothing
2d8a4     3C CE 00 00 | 	long	@_do_eq
2d8a8     6C D9 00 00 | 	long	@_do_ge
2d8ac     2C DD 00 00 | 	long	@_do_le
2d8b0     FC D1 00 00 | 	long	@_do_gt
2d8b4     BC D5 00 00 | 	long	@_do_lt
2d8b8     EC E0 00 00 | 	long	@_do_ne
2d8bc     7C E6 00 00 | 	long	@_do_rnd
2d8c0     40 0E 01 00 | 	long	@_do_brun
2d8c4     F0 10 01 00 | 	long	@_do_beep
2d8c8     5C 0A 01 00 | 	long	@_do_dir
2d8cc     E8 04 01 00 | 	long	@_do_paper
2d8d0     70 05 01 00 | 	long	@_do_ink
2d8d4     0C 06 01 00 | 	long	@_do_font
2d8d8     88 06 01 00 | 	long	@_do_mode
2d8dc     5C 10 01 00 | 	long	@_do_mouse
2d8e0     10 F4 00 00 | 	long	@_do_gettime
2d8e4     90 10 01 00 | 	long	@_do_cursor
2d8e8     C4 10 01 00 | 	long	@_do_click
2d8ec     00 F3 00 00 | 	long	@_do_mousex
2d8f0     44 F3 00 00 | 	long	@_do_mousey
2d8f4     CC F3 00 00 | 	long	@_do_mousek
2d8f8     88 F3 00 00 | 	long	@_do_mousew
2d8fc     44 E8 00 00 | 	long	@_do_sin
2d900     2C EA 00 00 | 	long	@_do_stick
2d904     B0 EB 00 00 | 	long	@_do_strig
2d908     14 F2 00 00 | 	long	@_do_sprite
2d90c     84 EE 00 00 | 	long	@_do_defsprite
2d910     34 ED 00 00 | 	long	@_do_getpixel
2d914     38 0A 01 00 | 	long	@_do_waitclock
2d918     10 12 01 00 | 	long	@_do_negative
2d91c     94 FC 00 00 | 	long	@_do_fill
2d920     70 42 01 00 | 	long	@_hg010b_spin2_putchar
2d924     A8 45 02 00 | 	long	@__struct___bas_wrap_sender_tx
2d928     EC 45 02 00 | 	long	@__struct___bas_wrap_sender_rx
2d92c     34 46 02 00 | 	long	@__struct___bas_wrap_sender_close
2d930     D8 44 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2d934     48 45 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2d938     90 44 02 00 | 	long	@___strs_cl_pfunc
2d93c     F0 A3 01 00 | 	long	@__system____root_opendir
2d940     8C A4 01 00 | 	long	@__system____root_closedir
2d944     08 A4 01 00 | 	long	@__system____root_readdir
2d948     94 A4 01 00 | 	long	@__system____root_stat
2d94c     1C 9D 01 00 | 	long	@__system____default_putc
2d950     A0 9C 01 00 | 	long	@__system____default_getc
2d954     C4 9D 01 00 | 	long	@__system____default_flush
2d958     98 2F 02 00 | 	long	@_fatfs_cc_v_close
2d95c     B4 33 02 00 | 	long	@_fatfs_cc_v_read
2d960     C8 34 02 00 | 	long	@_fatfs_cc_v_write
2d964     A8 35 02 00 | 	long	@_fatfs_cc_v_lseek
2d968     30 36 02 00 | 	long	@_fatfs_cc_v_ioctl
2d96c     84 36 02 00 | 	long	@_fatfs_cc_v_open
2d970     FC 2E 02 00 | 	long	@_fatfs_cc_v_creat
2d974     DC 2F 02 00 | 	long	@_fatfs_cc_v_opendir
2d978     50 30 02 00 | 	long	@_fatfs_cc_v_closedir
2d97c     90 30 02 00 | 	long	@_fatfs_cc_v_readdir
2d980     C4 31 02 00 | 	long	@_fatfs_cc_v_stat
2d984     44 36 02 00 | 	long	@_fatfs_cc_v_mkdir
2d988     64 36 02 00 | 	long	@_fatfs_cc_v_rmdir
2d98c     54 36 02 00 | 	long	@_fatfs_cc_v_remove
2d990     74 36 02 00 | 	long	@_fatfs_cc_v_rename
2d994     94 37 02 00 | 	long	@_fatfs_cc_v_init
2d998     9C 37 02 00 | 	long	@_fatfs_cc_v_deinit
2d99c     A8 55 01 00 | 	long	@__system___tx
2d9a0     E8 55 01 00 | 	long	@__system___rx
2d9a4     00 B0 01 00 | 	long	@__system___rxtxioctl_0503
2d9a8     58 B0 01 00 | 	long	@__system____dummy_flush_0504
2d9ac     64 37 02 00 | 	long	@_fatfs_cc_v_flush
2d9b0                 | __heap_base
2d9b0     00 00 00 00 
      ...             
6c1b0     00 00 00 00 
6c1b4     00 00 00 00 | 	long	0[64002]
6c1b8                 | objmem
6c1b8     00 00 00 00 
      ...             
76660     00 00 00 00 
76664     00 00 00 00 | 	long	0[10540]
76668                 | stackspace
76668     00 00 00 00 | 	long	0[1]
7666c 100             | 	org	COG_BSS_START
7666c 100             | _var01
7666c 100             | 	res	1
7666c 101             | _var02
7666c 101             | 	res	1
7666c 102             | _var03
7666c 102             | 	res	1
7666c 103             | _var04
7666c 103             | 	res	1
7666c 104             | _var05
7666c 104             | 	res	1
7666c 105             | _var06
7666c 105             | 	res	1
7666c 106             | _var07
7666c 106             | 	res	1
7666c 107             | _var08
7666c 107             | 	res	1
7666c 108             | _var09
7666c 108             | 	res	1
7666c 109             | arg01
7666c 109             | 	res	1
7666c 10a             | arg02
7666c 10a             | 	res	1
7666c 10b             | arg03
7666c 10b             | 	res	1
7666c 10c             | arg04
7666c 10c             | 	res	1
7666c 10d             | arg05
7666c 10d             | 	res	1
7666c 10e             | arg06
7666c 10e             | 	res	1
7666c 10f             | local01
7666c 10f             | 	res	1
7666c 110             | local02
7666c 110             | 	res	1
7666c 111             | local03
7666c 111             | 	res	1
7666c 112             | local04
7666c 112             | 	res	1
7666c 113             | local05
7666c 113             | 	res	1
7666c 114             | local06
7666c 114             | 	res	1
7666c 115             | local07
7666c 115             | 	res	1
7666c 116             | local08
7666c 116             | 	res	1
7666c 117             | local09
7666c 117             | 	res	1
7666c 118             | local10
7666c 118             | 	res	1
7666c 119             | local11
7666c 119             | 	res	1
7666c 11a             | local12
7666c 11a             | 	res	1
7666c 11b             | local13
7666c 11b             | 	res	1
7666c 11c             | local14
7666c 11c             | 	res	1
7666c 11d             | local15
7666c 11d             | 	res	1
7666c 11e             | local16
7666c 11e             | 	res	1
7666c 11f             | local17
7666c 11f             | 	res	1
7666c 120             | local18
7666c 120             | 	res	1
7666c 121             | local19
7666c 121             | 	res	1
7666c 122             | local20
7666c 122             | 	res	1
7666c 123             | local21
7666c 123             | 	res	1
7666c 124             | local22
7666c 124             | 	res	1
7666c 125             | local23
7666c 125             | 	res	1
7666c 126             | local24
7666c 126             | 	res	1
7666c 127             | local25
7666c 127             | 	res	1
7666c 128             | local26
7666c 128             | 	res	1
7666c 129             | local27
7666c 129             | 	res	1
7666c 12a             | local28
7666c 12a             | 	res	1
7666c 12b             | local29
7666c 12b             | 	res	1
7666c 12c             | local30
7666c 12c             | 	res	1
7666c 12d             | local31
7666c 12d             | 	res	1
7666c 12e             | local32
7666c 12e             | 	res	1
7666c 12f             | muldiva_
7666c 12f             | 	res	1
7666c 130             | muldivb_
7666c 130             | 	res	1
7666c 131             | 	fit	480
7666c 131             | 
